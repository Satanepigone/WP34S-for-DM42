ARM GAS  /tmp/cc5NzCD8.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"matrix.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.matrix_range_check,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	matrix_range_check:
  27              	.LVL0:
  28              	.LFB2:
  29              		.file 1 "src/matrix.c"
   1:src/matrix.c  **** /* This file is part of 34S.
   2:src/matrix.c  ****  * 
   3:src/matrix.c  ****  * 34S is free software: you can redistribute it and/or modify
   4:src/matrix.c  ****  * it under the terms of the GNU General Public License as published by
   5:src/matrix.c  ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/matrix.c  ****  * (at your option) any later version.
   7:src/matrix.c  ****  * 
   8:src/matrix.c  ****  * 34S is distributed in the hope that it will be useful,
   9:src/matrix.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/matrix.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/matrix.c  ****  * GNU General Public License for more details.
  12:src/matrix.c  ****  * 
  13:src/matrix.c  ****  * You should have received a copy of the GNU General Public License
  14:src/matrix.c  ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/matrix.c  ****  */
  16:src/matrix.c  **** 
  17:src/matrix.c  **** #include "matrix.h"
  18:src/matrix.c  **** #include "decn.h"
  19:src/matrix.c  **** #include "consts.h"
  20:src/matrix.c  **** #include "decNumber/decimal128.h"
  21:src/matrix.c  **** 
  22:src/matrix.c  **** #define MAX_DIMENSION	100
  23:src/matrix.c  **** #define MAX_SQUARE	10
  24:src/matrix.c  **** 
  25:src/matrix.c  **** static int matrix_idx(int row, int col, int ncols) {
  26:src/matrix.c  **** 	return col + row * ncols;
  27:src/matrix.c  **** }
  28:src/matrix.c  **** 		
  29:src/matrix.c  **** static void matrix_get(decNumber *r, const decimal64 *base, int row, int col, int ncols) {
ARM GAS  /tmp/cc5NzCD8.s 			page 2


  30:src/matrix.c  **** 	decimal64ToNumber(base + matrix_idx(row, col, ncols), r);
  31:src/matrix.c  **** }
  32:src/matrix.c  **** 
  33:src/matrix.c  **** /* Check if a matrix fits into the available registers or not.
  34:src/matrix.c  ****  * Raise an error if not.
  35:src/matrix.c  ****  */
  36:src/matrix.c  **** static int matrix_range_check(int base, int rows, int cols) {
  30              		.loc 1 36 61 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  37:src/matrix.c  **** 	int limit = NumRegs;
  34              		.loc 1 37 2 view .LVU1
  38:src/matrix.c  **** 	int s;
  35              		.loc 1 38 2 view .LVU2
  39:src/matrix.c  **** 
  40:src/matrix.c  **** 	if (is_intmode() || is_dblmode()) {
  36              		.loc 1 40 2 view .LVU3
  36:src/matrix.c  **** 	int limit = NumRegs;
  37              		.loc 1 36 61 is_stmt 0 view .LVU4
  38 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  39              		.cfi_def_cfa_offset 32
  40              		.cfi_offset 3, -32
  41              		.cfi_offset 4, -28
  42              		.cfi_offset 5, -24
  43              		.cfi_offset 6, -20
  44              		.cfi_offset 7, -16
  45              		.cfi_offset 8, -12
  46              		.cfi_offset 9, -8
  47              		.cfi_offset 14, -4
  48              		.loc 1 40 6 view .LVU5
  49 0004 194F     		ldr	r7, .L13
  50 0006 97F8E837 		ldrb	r3, [r7, #2024]	@ zero_extendqisi2
  51              		.loc 1 40 5 view .LVU6
  52 000a DB07     		lsls	r3, r3, #31
  53 000c 19D4     		bmi	.L4
  37:src/matrix.c  **** 	int s;
  54              		.loc 1 37 14 discriminator 1 view .LVU7
  55 000e 97F8CF97 		ldrb	r9, [r7, #1999]	@ zero_extendqisi2
  56 0012 0446     		mov	r4, r0
  57 0014 8846     		mov	r8, r1
  58 0016 1646     		mov	r6, r2
  59              		.loc 1 40 22 discriminator 1 view .LVU8
  60 0018 FFF7FEFF 		bl	is_dblmode
  61              	.LVL1:
  62              		.loc 1 40 19 discriminator 1 view .LVU9
  63 001c 0546     		mov	r5, r0
  64 001e 80B9     		cbnz	r0, .L4
  41:src/matrix.c  **** 		report_err(ERR_BAD_MODE);
  42:src/matrix.c  **** 		return 0;
  43:src/matrix.c  **** 	}
  44:src/matrix.c  **** 	if (base >= LOCAL_REG_BASE && LocalRegs < 0) {
  65              		.loc 1 44 2 is_stmt 1 view .LVU10
  66              		.loc 1 44 5 is_stmt 0 view .LVU11
  67 0020 6F2C     		cmp	r4, #111
  68 0022 15DD     		ble	.L5
  69              		.loc 1 44 29 discriminator 1 view .LVU12
ARM GAS  /tmp/cc5NzCD8.s 			page 3


  70 0024 B7F9DE37 		ldrsh	r3, [r7, #2014]
  71 0028 002B     		cmp	r3, #0
  72 002a 19DB     		blt	.L12
  73              	.L7:
  45:src/matrix.c  **** 		base -= LOCAL_REG_BASE;
  46:src/matrix.c  **** 		limit = local_regs();
  47:src/matrix.c  **** 	}
  48:src/matrix.c  **** 	s = rows * cols;
  74              		.loc 1 48 4 view .LVU13
  75 002c 06FB08F1 		mul	r1, r6, r8
  76              	.LVL2:
  49:src/matrix.c  **** 	if (base < 0 || base + s > limit || s > MAX_DIMENSION) {
  77              		.loc 1 49 23 view .LVU14
  78 0030 0C44     		add	r4, r4, r1
  79              	.LVL3:
  80              		.loc 1 49 15 view .LVU15
  81 0032 4C45     		cmp	r4, r9
  82 0034 0EDC     		bgt	.L8
  83              		.loc 1 49 35 discriminator 2 view .LVU16
  84 0036 6429     		cmp	r1, #100
  85 0038 0CDC     		bgt	.L8
  50:src/matrix.c  **** 		report_err(ERR_RANGE);
  51:src/matrix.c  **** 		return 0;
  52:src/matrix.c  **** 	}
  53:src/matrix.c  **** 	return 1;
  86              		.loc 1 53 9 view .LVU17
  87 003a 0125     		movs	r5, #1
  54:src/matrix.c  **** }
  88              		.loc 1 54 1 view .LVU18
  89 003c 2846     		mov	r0, r5
  90 003e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
  91              	.LVL4:
  92              	.L4:
  41:src/matrix.c  **** 		return 0;
  93              		.loc 1 41 3 is_stmt 1 view .LVU19
  42:src/matrix.c  **** 	}
  94              		.loc 1 42 10 is_stmt 0 view .LVU20
  95 0042 0025     		movs	r5, #0
  41:src/matrix.c  **** 		return 0;
  96              		.loc 1 41 3 view .LVU21
  97 0044 0D20     		movs	r0, #13
  98 0046 FFF7FEFF 		bl	report_err
  99              	.LVL5:
  42:src/matrix.c  **** 	}
 100              		.loc 1 42 3 is_stmt 1 view .LVU22
 101              		.loc 1 54 1 is_stmt 0 view .LVU23
 102 004a 2846     		mov	r0, r5
 103 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 104              	.LVL6:
 105              	.L5:
  48:src/matrix.c  **** 	if (base < 0 || base + s > limit || s > MAX_DIMENSION) {
 106              		.loc 1 48 2 is_stmt 1 view .LVU24
  49:src/matrix.c  **** 		report_err(ERR_RANGE);
 107              		.loc 1 49 2 view .LVU25
  49:src/matrix.c  **** 		report_err(ERR_RANGE);
 108              		.loc 1 49 5 is_stmt 0 view .LVU26
 109 0050 002C     		cmp	r4, #0
ARM GAS  /tmp/cc5NzCD8.s 			page 4


 110 0052 EBDA     		bge	.L7
 111              	.LVL7:
 112              	.L8:
  50:src/matrix.c  **** 		return 0;
 113              		.loc 1 50 3 is_stmt 1 view .LVU27
 114 0054 0820     		movs	r0, #8
 115 0056 FFF7FEFF 		bl	report_err
 116              	.LVL8:
  51:src/matrix.c  **** 	}
 117              		.loc 1 51 3 view .LVU28
 118              		.loc 1 54 1 is_stmt 0 view .LVU29
 119 005a 2846     		mov	r0, r5
 120 005c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 121              	.LVL9:
 122              	.L12:
  45:src/matrix.c  **** 		limit = local_regs();
 123              		.loc 1 45 3 is_stmt 1 view .LVU30
  46:src/matrix.c  **** 	}
 124              		.loc 1 46 11 is_stmt 0 view .LVU31
 125 0060 FFF7FEFF 		bl	local_regs
 126              	.LVL10:
  45:src/matrix.c  **** 		limit = local_regs();
 127              		.loc 1 45 8 view .LVU32
 128 0064 703C     		subs	r4, r4, #112
 129              	.LVL11:
  46:src/matrix.c  **** 	}
 130              		.loc 1 46 3 is_stmt 1 view .LVU33
  46:src/matrix.c  **** 	}
 131              		.loc 1 46 11 is_stmt 0 view .LVU34
 132 0066 8146     		mov	r9, r0
 133              	.LVL12:
  46:src/matrix.c  **** 	}
 134              		.loc 1 46 11 view .LVU35
 135 0068 E0E7     		b	.L7
 136              	.L14:
 137 006a 00BF     		.align	2
 138              	.L13:
 139 006c 00000000 		.word	PersistentRam
 140              		.cfi_endproc
 141              	.LFE2:
 143              		.section	.text.matrix_decompose,"ax",%progbits
 144              		.align	1
 145              		.p2align 2,,3
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv4-sp-d16
 151              	matrix_decompose:
 152              	.LVL13:
 153              	.LFB4:
  55:src/matrix.c  **** 
  56:src/matrix.c  **** /* Build a matrix descriptor from the base, rows and columns.
  57:src/matrix.c  ****  */
  58:src/matrix.c  **** static int matrix_descriptor(decNumber *r, int base, int rows, int cols) {
  59:src/matrix.c  **** 	decNumber z;
  60:src/matrix.c  **** 
  61:src/matrix.c  **** 	if (! matrix_range_check(base, rows, cols))
ARM GAS  /tmp/cc5NzCD8.s 			page 5


  62:src/matrix.c  **** 		return 0;
  63:src/matrix.c  **** 	int_to_dn(&z, (base * 100 + rows) * 100 + cols);
  64:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
  65:src/matrix.c  **** 	return 1;
  66:src/matrix.c  **** }
  67:src/matrix.c  **** 
  68:src/matrix.c  **** /* Take a matrix descriptor and return the base register number.
  69:src/matrix.c  ****  * Optionally return the number of rows and columns in the matrix.
  70:src/matrix.c  ****  * Optionally return the sign of the initial descriptor as well.
  71:src/matrix.c  ****  */
  72:src/matrix.c  **** static int matrix_decompose(const decNumber *x, int *rows, int *cols, int *up) {
 154              		.loc 1 72 80 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 72
 157              		@ frame_needed = 0, uses_anonymous_args = 0
  73:src/matrix.c  **** 	decNumber ax, y;
 158              		.loc 1 73 2 view .LVU37
  74:src/matrix.c  **** 	unsigned int n, base;
 159              		.loc 1 74 2 view .LVU38
  75:src/matrix.c  **** 	int r, c, u;
 160              		.loc 1 75 2 view .LVU39
  76:src/matrix.c  **** 
  77:src/matrix.c  **** 	if (decNumberIsNegative(x)) {
 161              		.loc 1 77 2 view .LVU40
  72:src/matrix.c  **** 	decNumber ax, y;
 162              		.loc 1 72 80 is_stmt 0 view .LVU41
 163 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 164              		.cfi_def_cfa_offset 24
 165              		.cfi_offset 4, -24
 166              		.cfi_offset 5, -20
 167              		.cfi_offset 6, -16
 168              		.cfi_offset 7, -12
 169              		.cfi_offset 8, -8
 170              		.cfi_offset 14, -4
 171              		.loc 1 77 5 view .LVU42
 172 0004 90F90850 		ldrsb	r5, [r0, #8]
 173 0008 002D     		cmp	r5, #0
  72:src/matrix.c  **** 	decNumber ax, y;
 174              		.loc 1 72 80 view .LVU43
 175 000a 92B0     		sub	sp, sp, #72
 176              		.cfi_def_cfa_offset 96
  72:src/matrix.c  **** 	decNumber ax, y;
 177              		.loc 1 72 80 view .LVU44
 178 000c 0E46     		mov	r6, r1
 179 000e 1746     		mov	r7, r2
 180 0010 1C46     		mov	r4, r3
 181              		.loc 1 77 5 view .LVU45
 182 0012 37DB     		blt	.L40
  78:src/matrix.c  **** 		dn_abs(&ax, x);
  79:src/matrix.c  **** 		x = &ax;
  80:src/matrix.c  **** 		u = 0;
  81:src/matrix.c  **** 	} else
  82:src/matrix.c  **** 		u = 1;
 183              		.loc 1 82 5 view .LVU46
 184 0014 0123     		movs	r3, #1
 185              	.LVL14:
 186              	.L16:
ARM GAS  /tmp/cc5NzCD8.s 			page 6


  83:src/matrix.c  **** 	if (up)		*up = u;
 187              		.loc 1 83 2 is_stmt 1 view .LVU47
 188              		.loc 1 83 5 is_stmt 0 view .LVU48
 189 0016 04B1     		cbz	r4, .L17
 190              		.loc 1 83 11 is_stmt 1 discriminator 1 view .LVU49
 191              		.loc 1 83 15 is_stmt 0 discriminator 1 view .LVU50
 192 0018 2360     		str	r3, [r4]
 193              	.L17:
  84:src/matrix.c  **** 
  85:src/matrix.c  **** 	dn_mulpow10(&y, x, 4);
 194              		.loc 1 85 2 is_stmt 1 view .LVU51
 195 001a 0146     		mov	r1, r0
 196 001c 0422     		movs	r2, #4
 197 001e 09A8     		add	r0, sp, #36
 198              	.LVL15:
 199              		.loc 1 85 2 is_stmt 0 view .LVU52
 200 0020 FFF7FEFF 		bl	dn_mulpow10
 201              	.LVL16:
  86:src/matrix.c  **** 	n = dn_to_int(&y);
 202              		.loc 1 86 2 is_stmt 1 view .LVU53
 203              		.loc 1 86 6 is_stmt 0 view .LVU54
 204 0024 09A8     		add	r0, sp, #36
 205 0026 FFF7FEFF 		bl	dn_to_int
 206              	.LVL17:
  87:src/matrix.c  **** 	base = n / 10000;
  88:src/matrix.c  **** 	c = n % 100;
 207              		.loc 1 88 8 view .LVU55
 208 002a 1C4D     		ldr	r5, .L42
  87:src/matrix.c  **** 	base = n / 10000;
 209              		.loc 1 87 7 view .LVU56
 210 002c 1C4C     		ldr	r4, .L42+4
 211              	.LVL18:
  87:src/matrix.c  **** 	base = n / 10000;
 212              		.loc 1 87 2 is_stmt 1 view .LVU57
 213              		.loc 1 88 8 is_stmt 0 view .LVU58
 214 002e A5FB0032 		umull	r3, r2, r5, r0
  89:src/matrix.c  **** 	r = (n / 100) % 100;
 215              		.loc 1 89 9 view .LVU59
 216 0032 4FEA521C 		lsr	ip, r2, #5
  88:src/matrix.c  **** 	r = (n / 100) % 100;
 217              		.loc 1 88 8 view .LVU60
 218 0036 6421     		movs	r1, #100
 219              		.loc 1 89 16 view .LVU61
 220 0038 A5FB0C35 		umull	r3, r5, r5, ip
 221 003c 6D09     		lsrs	r5, r5, #5
  87:src/matrix.c  **** 	base = n / 10000;
 222              		.loc 1 87 7 view .LVU62
 223 003e A4FB0034 		umull	r3, r4, r4, r0
  88:src/matrix.c  **** 	r = (n / 100) % 100;
 224              		.loc 1 88 8 view .LVU63
 225 0042 01FB1C02 		mls	r2, r1, ip, r0
 226              		.loc 1 89 16 view .LVU64
 227 0046 01FB15C5 		mls	r5, r1, r5, ip
  87:src/matrix.c  **** 	base = n / 10000;
 228              		.loc 1 87 7 view .LVU65
 229 004a 640B     		lsrs	r4, r4, #13
 230              	.LVL19:
ARM GAS  /tmp/cc5NzCD8.s 			page 7


  88:src/matrix.c  **** 	r = (n / 100) % 100;
 231              		.loc 1 88 2 is_stmt 1 view .LVU66
 232              		.loc 1 89 2 view .LVU67
  90:src/matrix.c  **** 	if (c == 0)
 233              		.loc 1 90 2 view .LVU68
 234              		.loc 1 90 5 is_stmt 0 view .LVU69
 235 004c 82B9     		cbnz	r2, .L18
  91:src/matrix.c  **** 		c = r;
 236              		.loc 1 91 3 is_stmt 1 view .LVU70
 237              	.LVL20:
  92:src/matrix.c  **** 	if (! matrix_range_check(base, r, c))
 238              		.loc 1 92 2 view .LVU71
 239              		.loc 1 92 8 is_stmt 0 view .LVU72
 240 004e 2046     		mov	r0, r4
 241              	.LVL21:
 242              		.loc 1 92 8 view .LVU73
 243 0050 2A46     		mov	r2, r5
 244 0052 2946     		mov	r1, r5
 245 0054 FFF7FEFF 		bl	matrix_range_check
 246              	.LVL22:
 247              		.loc 1 92 5 view .LVU74
 248 0058 88B1     		cbz	r0, .L39
  93:src/matrix.c  **** 		return -1;
  94:src/matrix.c  **** 	if (c == 0) {
 249              		.loc 1 94 2 is_stmt 1 view .LVU75
 250 005a A846     		mov	r8, r5
 251              		.loc 1 94 5 is_stmt 0 view .LVU76
 252 005c CDB1     		cbz	r5, .L41
 253              	.LVL23:
 254              	.L21:
  95:src/matrix.c  **** 		report_err(ERR_BAD_PARAM);
  96:src/matrix.c  **** 		return -1;
  97:src/matrix.c  **** 	}
  98:src/matrix.c  **** 	if (rows)	*rows = r;
 255              		.loc 1 98 2 is_stmt 1 view .LVU77
 256              		.loc 1 98 5 is_stmt 0 view .LVU78
 257 005e 06B1     		cbz	r6, .L22
 258              		.loc 1 98 12 is_stmt 1 discriminator 1 view .LVU79
 259              		.loc 1 98 18 is_stmt 0 discriminator 1 view .LVU80
 260 0060 3560     		str	r5, [r6]
 261              	.L22:
  99:src/matrix.c  **** 	if (cols)	*cols = c;
 262              		.loc 1 99 2 is_stmt 1 view .LVU81
 263              		.loc 1 99 5 is_stmt 0 view .LVU82
 264 0062 0FB1     		cbz	r7, .L15
 265              		.loc 1 99 12 is_stmt 1 discriminator 1 view .LVU83
 266              		.loc 1 99 18 is_stmt 0 discriminator 1 view .LVU84
 267 0064 C7F80080 		str	r8, [r7]
 268              	.LVL24:
 269              	.L15:
 100:src/matrix.c  **** 	return base;
 101:src/matrix.c  **** }
 270              		.loc 1 101 1 view .LVU85
 271 0068 2046     		mov	r0, r4
 272 006a 12B0     		add	sp, sp, #72
 273              		.cfi_remember_state
 274              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc5NzCD8.s 			page 8


 275              		@ sp needed
 276 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 277              	.LVL25:
 278              	.L18:
 279              		.cfi_restore_state
  92:src/matrix.c  **** 		return -1;
 280              		.loc 1 92 8 view .LVU86
 281 0070 2046     		mov	r0, r4
 282              	.LVL26:
  92:src/matrix.c  **** 		return -1;
 283              		.loc 1 92 8 view .LVU87
 284 0072 2946     		mov	r1, r5
  88:src/matrix.c  **** 	r = (n / 100) % 100;
 285              		.loc 1 88 4 view .LVU88
 286 0074 9046     		mov	r8, r2
  92:src/matrix.c  **** 		return -1;
 287              		.loc 1 92 2 is_stmt 1 view .LVU89
  92:src/matrix.c  **** 		return -1;
 288              		.loc 1 92 8 is_stmt 0 view .LVU90
 289 0076 FFF7FEFF 		bl	matrix_range_check
 290              	.LVL27:
  92:src/matrix.c  **** 		return -1;
 291              		.loc 1 92 5 view .LVU91
 292 007a 0028     		cmp	r0, #0
 293 007c EFD1     		bne	.L21
 294              	.LVL28:
 295              	.L39:
  96:src/matrix.c  **** 	}
 296              		.loc 1 96 3 is_stmt 1 view .LVU92
  96:src/matrix.c  **** 	}
 297              		.loc 1 96 10 is_stmt 0 view .LVU93
 298 007e 4FF0FF34 		mov	r4, #-1
 299              	.LVL29:
  96:src/matrix.c  **** 	}
 300              		.loc 1 96 10 view .LVU94
 301 0082 F1E7     		b	.L15
 302              	.LVL30:
 303              	.L40:
  78:src/matrix.c  **** 		x = &ax;
 304              		.loc 1 78 3 is_stmt 1 view .LVU95
 305 0084 0146     		mov	r1, r0
 306              	.LVL31:
  78:src/matrix.c  **** 		x = &ax;
 307              		.loc 1 78 3 is_stmt 0 view .LVU96
 308 0086 6846     		mov	r0, sp
 309              	.LVL32:
  78:src/matrix.c  **** 		x = &ax;
 310              		.loc 1 78 3 view .LVU97
 311 0088 FFF7FEFF 		bl	dn_abs
 312              	.LVL33:
  79:src/matrix.c  **** 		u = 0;
 313              		.loc 1 79 3 is_stmt 1 view .LVU98
  80:src/matrix.c  **** 	} else
 314              		.loc 1 80 3 view .LVU99
  79:src/matrix.c  **** 		u = 0;
 315              		.loc 1 79 5 is_stmt 0 view .LVU100
 316 008c 6846     		mov	r0, sp
ARM GAS  /tmp/cc5NzCD8.s 			page 9


  80:src/matrix.c  **** 	} else
 317              		.loc 1 80 5 view .LVU101
 318 008e 0023     		movs	r3, #0
 319 0090 C1E7     		b	.L16
 320              	.LVL34:
 321              	.L41:
  95:src/matrix.c  **** 		return -1;
 322              		.loc 1 95 3 is_stmt 1 view .LVU102
 323 0092 1020     		movs	r0, #16
 324 0094 FFF7FEFF 		bl	report_err
 325              	.LVL35:
 326 0098 F1E7     		b	.L39
 327              	.L43:
 328 009a 00BF     		.align	2
 329              	.L42:
 330 009c 1F85EB51 		.word	1374389535
 331 00a0 5917B7D1 		.word	-776530087
 332              		.cfi_endproc
 333              	.LFE4:
 335              		.section	.text.matrix_decomp,"ax",%progbits
 336              		.align	1
 337              		.p2align 2,,3
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu fpv4-sp-d16
 343              	matrix_decomp:
 344              	.LVL36:
 345              	.LFB5:
 102:src/matrix.c  **** 
 103:src/matrix.c  **** /* Decompose a matrix descriptor and return a pointer to its first
 104:src/matrix.c  ****  * element.  Optionally return the number of rows and columns.
 105:src/matrix.c  ****  */
 106:src/matrix.c  **** static decimal64 *matrix_decomp(const decNumber *x, int *rows, int *cols) {
 346              		.loc 1 106 75 view -0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 107:src/matrix.c  **** 	const int base = matrix_decompose(x, rows, cols, NULL);
 350              		.loc 1 107 2 view .LVU104
 106:src/matrix.c  **** 	const int base = matrix_decompose(x, rows, cols, NULL);
 351              		.loc 1 106 75 is_stmt 0 view .LVU105
 352 0000 08B5     		push	{r3, lr}
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 3, -8
 355              		.cfi_offset 14, -4
 356              		.loc 1 107 19 view .LVU106
 357 0002 0023     		movs	r3, #0
 358 0004 FFF7FEFF 		bl	matrix_decompose
 359              	.LVL37:
 108:src/matrix.c  **** 
 109:src/matrix.c  **** 	if (base < 0)
 360              		.loc 1 109 2 is_stmt 1 view .LVU107
 361              		.loc 1 109 5 is_stmt 0 view .LVU108
 362 0008 0028     		cmp	r0, #0
 363 000a 02DB     		blt	.L46
 110:src/matrix.c  **** 		return NULL;
ARM GAS  /tmp/cc5NzCD8.s 			page 10


 111:src/matrix.c  **** 	return &(get_reg_n(base)->s);
 364              		.loc 1 111 2 is_stmt 1 view .LVU109
 365              		.loc 1 111 11 is_stmt 0 view .LVU110
 366 000c FFF7FEFF 		bl	get_reg_n
 367              	.LVL38:
 112:src/matrix.c  **** }
 368              		.loc 1 112 1 view .LVU111
 369 0010 08BD     		pop	{r3, pc}
 370              	.LVL39:
 371              	.L46:
 110:src/matrix.c  **** 		return NULL;
 372              		.loc 1 110 10 view .LVU112
 373 0012 0020     		movs	r0, #0
 374              	.LVL40:
 375              		.loc 1 112 1 view .LVU113
 376 0014 08BD     		pop	{r3, pc}
 377              		.cfi_endproc
 378              	.LFE5:
 380 0016 00BF     		.section	.text.matrix_do_loop,"ax",%progbits
 381              		.align	1
 382              		.p2align 2,,3
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu fpv4-sp-d16
 388              	matrix_do_loop:
 389              	.LVL41:
 390              	.LFB8:
 113:src/matrix.c  **** 
 114:src/matrix.c  **** /* Check if a matrix is square or not.
 115:src/matrix.c  ****  */
 116:src/matrix.c  **** void matrix_is_square(enum nilop op) {
 117:src/matrix.c  **** 	int r, c;
 118:src/matrix.c  **** 	decNumber x;
 119:src/matrix.c  **** 
 120:src/matrix.c  **** 	getX(&x);
 121:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 122:src/matrix.c  **** 		return;
 123:src/matrix.c  **** 	fin_tst(r == c);
 124:src/matrix.c  **** }
 125:src/matrix.c  **** 
 126:src/matrix.c  **** #ifdef SILLY_MATRIX_SUPPORT
 127:src/matrix.c  **** /* Create either a zero matrix or an identity matrix.
 128:src/matrix.c  ****  */
 129:src/matrix.c  **** void matrix_create(enum nilop op) {
 130:src/matrix.c  **** 	decNumber x;
 131:src/matrix.c  **** 	int r, c, i, j;
 132:src/matrix.c  **** 	decimal64 *base;
 133:src/matrix.c  **** 	const decimal64 *diag, *off;
 134:src/matrix.c  **** 
 135:src/matrix.c  **** 	getX(&x);
 136:src/matrix.c  **** 	base = matrix_decomp(&x, &r, &c);
 137:src/matrix.c  **** 	if (base != NULL) {
 138:src/matrix.c  **** 		off = get_const(OP_ZERO, 0)->s;
 139:src/matrix.c  **** 
 140:src/matrix.c  **** 		if (op == OP_MAT_IDENT) {
 141:src/matrix.c  **** 			if (r != c) {
ARM GAS  /tmp/cc5NzCD8.s 			page 11


 142:src/matrix.c  **** 				report_err(ERR_MATRIX_DIM);
 143:src/matrix.c  **** 				return;
 144:src/matrix.c  **** 			}
 145:src/matrix.c  **** 			diag = get_const(OP_ONE, 0)->s;
 146:src/matrix.c  **** 		} else
 147:src/matrix.c  **** 			diag = off;
 148:src/matrix.c  **** 
 149:src/matrix.c  **** 		for (i=0; i<r; i++)
 150:src/matrix.c  **** 			for (j=0; j<c; j++)
 151:src/matrix.c  **** 				*base++ = *((i==j)?diag:off);
 152:src/matrix.c  **** 	}
 153:src/matrix.c  **** }
 154:src/matrix.c  **** #endif
 155:src/matrix.c  **** 
 156:src/matrix.c  **** /* Matrix copy
 157:src/matrix.c  ****  */
 158:src/matrix.c  **** decNumber *matrix_copy(decNumber *r, const decNumber *y, const decNumber *x) {
 159:src/matrix.c  **** 	decimal64 *src;
 160:src/matrix.c  **** 	int rows, cols, d;
 161:src/matrix.c  **** 
 162:src/matrix.c  **** 	src = matrix_decomp(y, &rows, &cols);
 163:src/matrix.c  **** 	if (src == NULL)
 164:src/matrix.c  **** 		return NULL;
 165:src/matrix.c  **** 
 166:src/matrix.c  **** 	d = dn_to_int(x);
 167:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 168:src/matrix.c  **** 		return NULL;
 169:src/matrix.c  **** 	xcopy(get_reg_n(d), src, rows * cols * sizeof(decimal64));
 170:src/matrix.c  **** 	return r;
 171:src/matrix.c  **** }
 172:src/matrix.c  **** 
 173:src/matrix.c  **** 
 174:src/matrix.c  **** static decNumber *matrix_do_loop(decNumber *r, int low, int high, int step, int up) {
 391              		.loc 1 174 85 is_stmt 1 view -0
 392              		.cfi_startproc
 393              		@ args = 4, pretend = 0, frame = 40
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 175:src/matrix.c  **** 	decNumber z;
 395              		.loc 1 175 2 view .LVU115
 176:src/matrix.c  **** 	int i;
 396              		.loc 1 176 2 view .LVU116
 177:src/matrix.c  **** 
 178:src/matrix.c  **** 	if (up) {
 397              		.loc 1 178 2 view .LVU117
 174:src/matrix.c  **** 	decNumber z;
 398              		.loc 1 174 85 is_stmt 0 view .LVU118
 399 0000 30B5     		push	{r4, r5, lr}
 400              		.cfi_def_cfa_offset 12
 401              		.cfi_offset 4, -12
 402              		.cfi_offset 5, -8
 403              		.cfi_offset 14, -4
 404 0002 8BB0     		sub	sp, sp, #44
 405              		.cfi_def_cfa_offset 56
 174:src/matrix.c  **** 	decNumber z;
 406              		.loc 1 174 85 view .LVU119
 407 0004 0446     		mov	r4, r0
 408 0006 0E9D     		ldr	r5, [sp, #56]
ARM GAS  /tmp/cc5NzCD8.s 			page 12


 179:src/matrix.c  **** 		i = (low * 1000 + high) * 100 + step;
 409              		.loc 1 179 12 view .LVU120
 410 0008 4FF47A70 		mov	r0, #1000
 411              	.LVL42:
 178:src/matrix.c  **** 		i = (low * 1000 + high) * 100 + step;
 412              		.loc 1 178 5 view .LVU121
 413 000c 85B1     		cbz	r5, .L49
 414              		.loc 1 179 3 is_stmt 1 view .LVU122
 415              		.loc 1 179 19 is_stmt 0 view .LVU123
 416 000e 00FB0121 		mla	r1, r0, r1, r2
 417              	.LVL43:
 418              		.loc 1 179 27 view .LVU124
 419 0012 6422     		movs	r2, #100
 420              	.LVL44:
 421              		.loc 1 179 5 view .LVU125
 422 0014 02FB0131 		mla	r1, r2, r1, r3
 423              	.LVL45:
 424              	.L50:
 180:src/matrix.c  **** 	} else {
 181:src/matrix.c  **** 		i = (high * 1000 + low) * 100 + step;
 182:src/matrix.c  **** 	}
 183:src/matrix.c  **** 	int_to_dn(&z, i);
 425              		.loc 1 183 2 is_stmt 1 view .LVU126
 426 0018 01A8     		add	r0, sp, #4
 427 001a FFF7FEFF 		bl	int_to_dn
 428              	.LVL46:
 184:src/matrix.c  **** 	dn_mulpow10(r, &z, -5);
 429              		.loc 1 184 2 view .LVU127
 430 001e 01A9     		add	r1, sp, #4
 431 0020 6FF00402 		mvn	r2, #4
 432 0024 2046     		mov	r0, r4
 433 0026 FFF7FEFF 		bl	dn_mulpow10
 434              	.LVL47:
 185:src/matrix.c  **** 	return r;
 435              		.loc 1 185 2 view .LVU128
 186:src/matrix.c  **** }
 436              		.loc 1 186 1 is_stmt 0 view .LVU129
 437 002a 2046     		mov	r0, r4
 438 002c 0BB0     		add	sp, sp, #44
 439              		.cfi_remember_state
 440              		.cfi_def_cfa_offset 12
 441              		@ sp needed
 442 002e 30BD     		pop	{r4, r5, pc}
 443              	.LVL48:
 444              	.L49:
 445              		.cfi_restore_state
 181:src/matrix.c  **** 	}
 446              		.loc 1 181 3 is_stmt 1 view .LVU130
 181:src/matrix.c  **** 	}
 447              		.loc 1 181 20 is_stmt 0 view .LVU131
 448 0030 00FB0211 		mla	r1, r0, r2, r1
 449              	.LVL49:
 181:src/matrix.c  **** 	}
 450              		.loc 1 181 27 view .LVU132
 451 0034 6422     		movs	r2, #100
 452              	.LVL50:
 181:src/matrix.c  **** 	}
ARM GAS  /tmp/cc5NzCD8.s 			page 13


 453              		.loc 1 181 5 view .LVU133
 454 0036 02FB0131 		mla	r1, r2, r1, r3
 455              	.LVL51:
 181:src/matrix.c  **** 	}
 456              		.loc 1 181 5 view .LVU134
 457 003a EDE7     		b	.L50
 458              		.cfi_endproc
 459              	.LFE8:
 461              		.section	.text.matrix_lu_check,"ax",%progbits
 462              		.align	1
 463              		.p2align 2,,3
 464              		.syntax unified
 465              		.thumb
 466              		.thumb_func
 467              		.fpu fpv4-sp-d16
 469              	matrix_lu_check:
 470              	.LVL52:
 471              	.LFB25:
 187:src/matrix.c  **** 
 188:src/matrix.c  **** decNumber *matrix_all(decNumber *r, const decNumber *x) {
 189:src/matrix.c  **** 	int rows, cols, base, up;
 190:src/matrix.c  **** 
 191:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 192:src/matrix.c  **** 	if (base < 0)
 193:src/matrix.c  **** 		return NULL;
 194:src/matrix.c  **** 	return matrix_do_loop(r, base, base+rows*cols-1, 1, up);
 195:src/matrix.c  **** }
 196:src/matrix.c  **** 
 197:src/matrix.c  **** decNumber *matrix_diag(decNumber *r, const decNumber *x) {
 198:src/matrix.c  **** 	int rows, cols, base, up, n;
 199:src/matrix.c  **** 
 200:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 201:src/matrix.c  **** 	if (base < 0)
 202:src/matrix.c  **** 		return NULL;
 203:src/matrix.c  **** 	n = ((rows < cols) ? rows : cols) - 1;
 204:src/matrix.c  **** 	cols++;
 205:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 206:src/matrix.c  **** }
 207:src/matrix.c  **** 
 208:src/matrix.c  **** decNumber *matrix_row(decNumber *r, const decNumber *y, const decNumber *x) {
 209:src/matrix.c  **** 	int rows, cols, base, up, n;
 210:src/matrix.c  **** 
 211:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 212:src/matrix.c  **** 	if (base < 0)
 213:src/matrix.c  **** 		return NULL;
 214:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 215:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 216:src/matrix.c  **** 		report_err(ERR_RANGE);
 217:src/matrix.c  **** 		return NULL;
 218:src/matrix.c  **** 	}
 219:src/matrix.c  **** 	base += n*cols;
 220:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols - 1, 1, up);
 221:src/matrix.c  **** }
 222:src/matrix.c  **** 
 223:src/matrix.c  **** decNumber *matrix_col(decNumber *r, const decNumber *y, const decNumber *x) {
 224:src/matrix.c  **** 	int rows, cols, base, up, n;
 225:src/matrix.c  **** 
ARM GAS  /tmp/cc5NzCD8.s 			page 14


 226:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 227:src/matrix.c  **** 	if (base < 0)
 228:src/matrix.c  **** 		return NULL;
 229:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 230:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 231:src/matrix.c  **** 		report_err(ERR_RANGE);
 232:src/matrix.c  **** 		return NULL;
 233:src/matrix.c  **** 	}
 234:src/matrix.c  **** 	base += n;
 235:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols * (rows-1), cols, up);
 236:src/matrix.c  **** }
 237:src/matrix.c  **** 
 238:src/matrix.c  **** decNumber *matrix_rowq(decNumber *r, const decNumber *x) {
 239:src/matrix.c  **** 	int rows;
 240:src/matrix.c  **** 
 241:src/matrix.c  **** 	if (matrix_decompose(x, &rows, NULL, NULL) < 0)
 242:src/matrix.c  **** 		return NULL;
 243:src/matrix.c  **** 	int_to_dn(r, rows);
 244:src/matrix.c  **** 	return r;
 245:src/matrix.c  **** }
 246:src/matrix.c  **** 
 247:src/matrix.c  **** decNumber *matrix_colq(decNumber *r, const decNumber *x) {
 248:src/matrix.c  **** 	int cols;
 249:src/matrix.c  **** 
 250:src/matrix.c  **** 	if (matrix_decompose(x, NULL, &cols, NULL) < 0)
 251:src/matrix.c  **** 		return NULL;
 252:src/matrix.c  **** 	int_to_dn(r, cols);
 253:src/matrix.c  **** 	return r;
 254:src/matrix.c  **** }
 255:src/matrix.c  **** 
 256:src/matrix.c  **** decNumber *matrix_getreg(decNumber *r, const decNumber *cdn, const decNumber *rdn, const decNumber 
 257:src/matrix.c  **** 	int h, w, ri, ci;
 258:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 259:src/matrix.c  **** 
 260:src/matrix.c  **** 	if (n < 0)
 261:src/matrix.c  **** 		return NULL;
 262:src/matrix.c  **** 	ri = dn_to_int(rdn) - 1;
 263:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 264:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 266:src/matrix.c  **** 		return NULL;
 267:src/matrix.c  **** 	}
 268:src/matrix.c  **** 	n += matrix_idx(ri, ci, w);
 269:src/matrix.c  **** 	int_to_dn(r, n);
 270:src/matrix.c  **** 	return r;
 271:src/matrix.c  **** }
 272:src/matrix.c  **** 
 273:src/matrix.c  **** decNumber *matrix_getrc(decNumber *res, const decNumber *m) {
 274:src/matrix.c  **** 	decNumber ydn;
 275:src/matrix.c  **** 	int rows, cols, c, r, pos;
 276:src/matrix.c  **** 	int n = matrix_decompose(m, &rows, &cols, NULL);
 277:src/matrix.c  **** 
 278:src/matrix.c  **** 	if (n < 0)
 279:src/matrix.c  **** 		return NULL;
 280:src/matrix.c  **** 	getY(&ydn);
 281:src/matrix.c  **** 	pos = dn_to_int(&ydn);
 282:src/matrix.c  **** 	pos -= n;
ARM GAS  /tmp/cc5NzCD8.s 			page 15


 283:src/matrix.c  **** 	if (pos < 0 || pos >= rows*cols) {
 284:src/matrix.c  **** 		report_err(ERR_RANGE);
 285:src/matrix.c  **** 		return NULL;
 286:src/matrix.c  **** 	}
 287:src/matrix.c  **** 	c = pos % cols + 1;
 288:src/matrix.c  **** 	r = pos / cols + 1;
 289:src/matrix.c  **** 	int_to_dn(res, r);
 290:src/matrix.c  **** 	int_to_dn(&ydn, c);
 291:src/matrix.c  **** 	setY(&ydn);
 292:src/matrix.c  **** 	return res;
 293:src/matrix.c  **** }
 294:src/matrix.c  **** 
 295:src/matrix.c  **** // a = a + b * k -- generalised matrix add and subtract
 296:src/matrix.c  **** decNumber *matrix_genadd(decNumber *r, const decNumber *k, const decNumber *b, const decNumber *a) 
 297:src/matrix.c  **** 	int arows, acols, brows, bcols;
 298:src/matrix.c  **** 	decNumber s, t, u;
 299:src/matrix.c  **** 	int i;
 300:src/matrix.c  **** 
 301:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 303:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 304:src/matrix.c  **** 		return NULL;
 305:src/matrix.c  **** 	if (arows != brows || acols != bcols) {
 306:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 307:src/matrix.c  **** 		return NULL;
 308:src/matrix.c  **** 	}
 309:src/matrix.c  **** 	for (i=0; i<arows*acols; i++) {
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 311:src/matrix.c  **** 		dn_multiply(&t, &s, k);
 312:src/matrix.c  **** 		decimal64ToNumber(abase + i, &s);
 313:src/matrix.c  **** 		dn_add(&u, &t, &s);
 314:src/matrix.c  **** 		packed_from_number(abase + i, &u);
 315:src/matrix.c  **** 	}
 316:src/matrix.c  **** 	return decNumberCopy(r, a);
 317:src/matrix.c  **** }
 318:src/matrix.c  **** 
 319:src/matrix.c  **** 
 320:src/matrix.c  **** // Matrix multiply c = a * b, c can be a or b or overlap either
 321:src/matrix.c  **** decNumber *matrix_multiply(decNumber *r, const decNumber *a, const decNumber *b, const decNumber *c
 322:src/matrix.c  **** 	int arows, acols, brows, bcols;
 323:src/matrix.c  **** 	decNumber sum, s, t, u;
 324:src/matrix.c  **** 	int creg;
 325:src/matrix.c  **** 	int i, j, k;
 326:src/matrix.c  **** 	decimal64 result[MAX_DIMENSION];
 327:src/matrix.c  **** 	decimal64 *rp = result;
 328:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 330:src/matrix.c  **** 
 331:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 332:src/matrix.c  **** 		return NULL;
 333:src/matrix.c  **** 	if (acols != brows) {
 334:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 335:src/matrix.c  **** 		return NULL;
 336:src/matrix.c  **** 	}
 337:src/matrix.c  **** 	creg = dn_to_int(c);
 338:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 339:src/matrix.c  **** 		return NULL;
ARM GAS  /tmp/cc5NzCD8.s 			page 16


 340:src/matrix.c  **** 
 341:src/matrix.c  ****         busy();
 342:src/matrix.c  **** 	for (i=0; i<arows; i++)
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 344:src/matrix.c  **** 			decNumberZero(&sum);
 345:src/matrix.c  **** 			for (k=0; k<acols; k++) {
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 347:src/matrix.c  **** 				matrix_get(&t, bbase, k, j, bcols);
 348:src/matrix.c  **** 				dn_multiply(&u, &s, &t);
 349:src/matrix.c  **** 				dn_add(&sum, &sum, &u);
 350:src/matrix.c  **** 			}
 351:src/matrix.c  **** 			packed_from_number(rp++, &sum);
 352:src/matrix.c  **** 		}
 353:src/matrix.c  **** 	xcopy(get_reg_n(creg), result, sizeof(decimal64) * arows * bcols);
 354:src/matrix.c  **** 	return r;
 355:src/matrix.c  **** }
 356:src/matrix.c  **** 
 357:src/matrix.c  **** /* In place matrix transpose using minimal extra storage */
 358:src/matrix.c  **** decNumber *matrix_transpose(decNumber *r, const decNumber *m) {
 359:src/matrix.c  **** 	int w, h, start, next, i;
 360:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 361:src/matrix.c  **** 	decimal64 *base, tmp;
 362:src/matrix.c  **** 
 363:src/matrix.c  **** 	if (n < 0)
 364:src/matrix.c  **** 		return NULL;
 365:src/matrix.c  **** 	base = &(get_reg_n(n)->s);
 366:src/matrix.c  **** 	if (base == NULL)
 367:src/matrix.c  **** 		return NULL;
 368:src/matrix.c  **** 
 369:src/matrix.c  **** 	for (start=0; start < w*h; start++) {
 370:src/matrix.c  **** 		next = start;
 371:src/matrix.c  **** 		i=0;
 372:src/matrix.c  **** 		do {
 373:src/matrix.c  **** 			i++;
 374:src/matrix.c  **** 			next = (next % h) * w + next / h;
 375:src/matrix.c  **** 		} while (next > start);
 376:src/matrix.c  **** 		if (next < start || i == 1)
 377:src/matrix.c  **** 			continue;
 378:src/matrix.c  **** 
 379:src/matrix.c  **** 		tmp = base[next = start];
 380:src/matrix.c  **** 		do {
 381:src/matrix.c  **** 			i = (next % h) * w + next / h;
 382:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 383:src/matrix.c  **** 			next = i;
 384:src/matrix.c  **** 		} while (next > start);
 385:src/matrix.c  **** 	}
 386:src/matrix.c  **** 
 387:src/matrix.c  **** 	matrix_descriptor(r, n, w, h);
 388:src/matrix.c  **** 	return r;
 389:src/matrix.c  **** }
 390:src/matrix.c  **** 
 391:src/matrix.c  **** #ifdef MATRIX_ROWOPS
 392:src/matrix.c  **** void matrix_rowops(enum nilop op) {
 393:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 394:src/matrix.c  **** 	decimal64 *base, *r1, *r2;
 395:src/matrix.c  **** 	int rows, cols;
 396:src/matrix.c  **** 	int i;
ARM GAS  /tmp/cc5NzCD8.s 			page 17


 397:src/matrix.c  **** 
 398:src/matrix.c  **** 	getXYZT(&m, &ydn, &zdn, &t);
 399:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 400:src/matrix.c  **** 	if (base == NULL)
 401:src/matrix.c  **** 		return;
 402:src/matrix.c  **** 
 403:src/matrix.c  **** 	i = dn_to_int(&ydn) - 1;
 404:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 405:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 406:src/matrix.c  **** 		return;
 407:src/matrix.c  **** 	}
 408:src/matrix.c  **** 	r1 = base + i * cols;
 409:src/matrix.c  **** 
 410:src/matrix.c  **** 	if (op == OP_MAT_ROW_MUL) {
 411:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 413:src/matrix.c  **** 			dn_multiply(&m, &zdn, &t);
 414:src/matrix.c  **** 			packed_from_number(r1++, &m);
 415:src/matrix.c  **** 		}
 416:src/matrix.c  **** 	} else {
 417:src/matrix.c  **** 		i = dn_to_int(&zdn) - 1;
 418:src/matrix.c  **** 		if (i < 0 || i >= rows)
 419:src/matrix.c  **** 			goto badrow;
 420:src/matrix.c  **** 		r2 = base + i * cols;
 421:src/matrix.c  **** 
 422:src/matrix.c  **** 		if (op == OP_MAT_ROW_SWAP) {
 423:src/matrix.c  **** 			for (i=0; i<cols; i++)
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 425:src/matrix.c  **** 		} else {
 426:src/matrix.c  **** 			for (i=0; i<cols; i++) {
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 428:src/matrix.c  **** 				decimal64ToNumber(r2++, &zdn);
 429:src/matrix.c  **** 				dn_multiply(&m, &zdn, &t);
 430:src/matrix.c  **** 				dn_add(&zdn, &ydn, &m);
 431:src/matrix.c  **** 				packed_from_number(r1++, &zdn);
 432:src/matrix.c  **** 			}
 433:src/matrix.c  **** 		}
 434:src/matrix.c  **** 	}
 435:src/matrix.c  **** }
 436:src/matrix.c  **** #endif
 437:src/matrix.c  **** 
 438:src/matrix.c  **** 
 439:src/matrix.c  **** /* Two little utility routines to convert decimal128s to decNumbers and back and to
 440:src/matrix.c  ****  * extract elements form a decimal128 matrix.
 441:src/matrix.c  ****  */
 442:src/matrix.c  **** static void matrix_get128(decNumber *r, const decimal128 *base, int row, int col, int ncols) {
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 444:src/matrix.c  **** }
 445:src/matrix.c  **** 
 446:src/matrix.c  **** static void matrix_put128(const decNumber *x, decimal128 *base, int row, int col, int ncols) {
 447:src/matrix.c  **** 	packed128_from_number(base + matrix_idx(row, col, ncols), x);
 448:src/matrix.c  **** }
 449:src/matrix.c  **** 
 450:src/matrix.c  **** 
 451:src/matrix.c  **** /* Perform a LU decomposition of the specified matrix in-situ.
 452:src/matrix.c  ****  * Return the pivot rows in pivots if not null and return the parity
 453:src/matrix.c  ****  * of the number of pivots or zero if the matrix is singular
ARM GAS  /tmp/cc5NzCD8.s 			page 18


 454:src/matrix.c  ****  */
 455:src/matrix.c  **** static int LU_decomposition(decimal128 *A, unsigned char *pivots, const int n) {
 456:src/matrix.c  **** 	int i, j, k;
 457:src/matrix.c  **** 	int pvt, spvt = 1;
 458:src/matrix.c  **** 	decimal128 *p1, *p2;
 459:src/matrix.c  **** 	decNumber max, t, u;
 460:src/matrix.c  **** 
 461:src/matrix.c  ****         busy();
 462:src/matrix.c  **** 	for (k=0; k<n; k++) {
 463:src/matrix.c  **** 		/* Find the pivot row */
 464:src/matrix.c  **** 		pvt = k;
 465:src/matrix.c  **** 		matrix_get128(&u, A, k, k, n);
 466:src/matrix.c  **** 		dn_abs(&max, &u);
 467:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 469:src/matrix.c  **** 			dn_abs(&u, &t);
 470:src/matrix.c  **** 			if (dn_gt(&u, &max)) {
 471:src/matrix.c  **** 				decNumberCopy(&max, &u);
 472:src/matrix.c  **** 				pvt = j;
 473:src/matrix.c  **** 			}
 474:src/matrix.c  **** 		}
 475:src/matrix.c  **** 		if (pivots != NULL)
 476:src/matrix.c  **** 			*pivots++ = pvt;
 477:src/matrix.c  **** 
 478:src/matrix.c  **** 		/* pivot if required */
 479:src/matrix.c  **** 		if (pvt != k) {
 480:src/matrix.c  **** 			spvt = -spvt;
 481:src/matrix.c  **** 			p1 = A + (n * k);
 482:src/matrix.c  **** 			p2 = A + (n * pvt);
 483:src/matrix.c  **** 			for (j=0; j<n; j++) {
 484:src/matrix.c  **** 				decimal128 t = *p1;
 485:src/matrix.c  **** 				*p1 = *p2;
 486:src/matrix.c  **** 				*p2 = t;
 487:src/matrix.c  **** 				p1++;
 488:src/matrix.c  **** 				p2++;
 489:src/matrix.c  **** 				//swap_reg(p1++, p2++);
 490:src/matrix.c  **** 			}
 491:src/matrix.c  **** 		}
 492:src/matrix.c  **** 
 493:src/matrix.c  **** 		/* Check for singular */
 494:src/matrix.c  **** 		matrix_get128(&t, A, k, k, n);
 495:src/matrix.c  **** 		if (dn_eq0(&t))
 496:src/matrix.c  **** 			return 0;
 497:src/matrix.c  **** 
 498:src/matrix.c  **** 		/* Find the lower triangular elements for column k */
 499:src/matrix.c  **** 		for (i=k+1; i<n; i++) {
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 501:src/matrix.c  **** 			matrix_get128(&u, A, i, k, n);
 502:src/matrix.c  **** 			dn_divide(&max, &u, &t);
 503:src/matrix.c  **** 			matrix_put128(&max, A, i, k, n);
 504:src/matrix.c  **** 		}
 505:src/matrix.c  **** 		/* Update the upper triangular elements */
 506:src/matrix.c  **** 		for (i=k+1; i<n; i++)
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 508:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 509:src/matrix.c  **** 				matrix_get128(&u, A, k, j, n);
 510:src/matrix.c  **** 				dn_multiply(&max, &t, &u);
ARM GAS  /tmp/cc5NzCD8.s 			page 19


 511:src/matrix.c  **** 				matrix_get128(&t, A, i, j, n);
 512:src/matrix.c  **** 				dn_subtract(&u, &t, &max);
 513:src/matrix.c  **** 				matrix_put128(&u, A, i, j, n);
 514:src/matrix.c  **** 			}
 515:src/matrix.c  **** 	}
 516:src/matrix.c  **** 	return spvt;
 517:src/matrix.c  **** }
 518:src/matrix.c  **** 
 519:src/matrix.c  **** /* Solve the linear equation Ax = b.
 520:src/matrix.c  ****  * We do this by utilising the LU decomposition passed in in A and solving
 521:src/matrix.c  ****  * the linear equation Ly = b for y, where L is the lower diagonal triangular
 522:src/matrix.c  ****  * matrix with unity along the diagonal.  Then we solve the linear system
 523:src/matrix.c  ****  * Ux = y, where U is the upper triangular matrix.
 524:src/matrix.c  ****  */
 525:src/matrix.c  **** static void matrix_pivoting_solve(decimal128 *LU, const decimal64 *b[], unsigned char pivot[], decN
 526:src/matrix.c  **** 	int i, k;
 527:src/matrix.c  **** 	decNumber r, t;
 528:src/matrix.c  **** 
 529:src/matrix.c  **** 	/* Solve the first linear equation Ly = b */
 530:src/matrix.c  **** 	for (k=0; k<n; k++) {
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 532:src/matrix.c  **** 			const decimal64 *swap = b[k];
 533:src/matrix.c  **** 			b[k] = b[pivot[k]];
 534:src/matrix.c  **** 			b[pivot[k]] = swap;
 535:src/matrix.c  **** 		}
 536:src/matrix.c  **** 		decimal64ToNumber(b[k], x + k);
 537:src/matrix.c  **** 		for (i=0; i<k; i++) {
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 539:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 540:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 541:src/matrix.c  **** 		}
 542:src/matrix.c  **** 	}
 543:src/matrix.c  **** 
 544:src/matrix.c  **** 	/* Solve the second linear equation Ux = y */
 545:src/matrix.c  **** 	for (k=n-1; k>=0; k--) {
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 547:src/matrix.c  **** 		for (i=k+1; i<n; i++) {
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 549:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 550:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 551:src/matrix.c  **** 		}
 552:src/matrix.c  **** 		matrix_get128(&r, LU, k, k, n);
 553:src/matrix.c  **** #if 0
 554:src/matrix.c  **** 		/* Check for singular matrix */
 555:src/matrix.c  **** 		if (dn_eq0(&r))
 556:src/matrix.c  **** 			return;
 557:src/matrix.c  **** #endif
 558:src/matrix.c  **** 		dn_divide(x+k, x+k, &r);
 559:src/matrix.c  **** 	}
 560:src/matrix.c  **** }
 561:src/matrix.c  **** 
 562:src/matrix.c  **** /* Decompose the passed in matrix identifier and extract the matrix from the
 563:src/matrix.c  ****  * associated registers into the passed higher precision matrix.  Optionally,
 564:src/matrix.c  ****  * return the first register in the matrix and always return the dimensionality.
 565:src/matrix.c  ****  * On error, return 0.
 566:src/matrix.c  ****  */
 567:src/matrix.c  **** static int matrix_lu_check(const decNumber *m, decimal128 *mat, decimal64 **mbase) {
ARM GAS  /tmp/cc5NzCD8.s 			page 20


 472              		.loc 1 567 84 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 48
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 568:src/matrix.c  **** 	int rows, cols;
 476              		.loc 1 568 2 view .LVU136
 569:src/matrix.c  **** 	decimal64 *base;
 477              		.loc 1 569 2 view .LVU137
 570:src/matrix.c  **** 	decNumber t;
 478              		.loc 1 570 2 view .LVU138
 571:src/matrix.c  **** 	int i;
 479              		.loc 1 571 2 view .LVU139
 572:src/matrix.c  **** 
 573:src/matrix.c  **** 	base = matrix_decomp(m, &rows, &cols);
 480              		.loc 1 573 2 view .LVU140
 567:src/matrix.c  **** 	int rows, cols;
 481              		.loc 1 567 84 is_stmt 0 view .LVU141
 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 4, -24
 485              		.cfi_offset 5, -20
 486              		.cfi_offset 6, -16
 487              		.cfi_offset 7, -12
 488              		.cfi_offset 8, -8
 489              		.cfi_offset 14, -4
 490 0004 8CB0     		sub	sp, sp, #48
 491              		.cfi_def_cfa_offset 72
 567:src/matrix.c  **** 	int rows, cols;
 492              		.loc 1 567 84 view .LVU142
 493 0006 0C46     		mov	r4, r1
 494 0008 9046     		mov	r8, r2
 495              		.loc 1 573 9 view .LVU143
 496 000a 01A9     		add	r1, sp, #4
 497              	.LVL53:
 498              		.loc 1 573 9 view .LVU144
 499 000c 02AA     		add	r2, sp, #8
 500              	.LVL54:
 501              		.loc 1 573 9 view .LVU145
 502 000e FFF7FEFF 		bl	matrix_decomp
 503              	.LVL55:
 574:src/matrix.c  **** 	if (base == NULL)
 504              		.loc 1 574 2 is_stmt 1 view .LVU146
 505              		.loc 1 574 5 is_stmt 0 view .LVU147
 506 0012 0746     		mov	r7, r0
 507 0014 F8B1     		cbz	r0, .L52
 575:src/matrix.c  **** 		return 0;
 576:src/matrix.c  **** 	if (rows != cols) {
 508              		.loc 1 576 2 is_stmt 1 view .LVU148
 509              		.loc 1 576 5 is_stmt 0 view .LVU149
 510 0016 DDE90103 		ldrd	r0, r3, [sp, #4]
 511              	.LVL56:
 512              		.loc 1 576 5 view .LVU150
 513 001a 9842     		cmp	r0, r3
 514 001c 1ED1     		bne	.L54
 515              	.LVL57:
 577:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 578:src/matrix.c  **** 		return 0;
ARM GAS  /tmp/cc5NzCD8.s 			page 21


 579:src/matrix.c  **** 	}
 580:src/matrix.c  **** 	if (mat != NULL) {
 581:src/matrix.c  **** 		for (i=0; i<rows*rows; i++) {
 516              		.loc 1 581 13 is_stmt 1 view .LVU151
 517              		.loc 1 581 19 is_stmt 0 view .LVU152
 518 001e 00FB00F3 		mul	r3, r0, r0
 519              		.loc 1 581 3 view .LVU153
 520 0022 9BB1     		cbz	r3, .L56
 521 0024 3E46     		mov	r6, r7
 522              		.loc 1 581 9 view .LVU154
 523 0026 0025     		movs	r5, #0
 524              	.LVL58:
 525              	.L57:
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 526              		.loc 1 582 4 is_stmt 1 discriminator 3 view .LVU155
 527 0028 03A9     		add	r1, sp, #12
 528 002a 3046     		mov	r0, r6
 529 002c FFF7FEFF 		bl	decimal64ToNumber
 530              	.LVL59:
 583:src/matrix.c  **** 			packed128_from_number(mat+i, &t);
 531              		.loc 1 583 4 discriminator 3 view .LVU156
 532 0030 2046     		mov	r0, r4
 533 0032 03A9     		add	r1, sp, #12
 534 0034 FFF7FEFF 		bl	packed128_from_number
 535              	.LVL60:
 581:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 536              		.loc 1 581 26 discriminator 3 view .LVU157
 581:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 537              		.loc 1 581 19 is_stmt 0 discriminator 3 view .LVU158
 538 0038 0198     		ldr	r0, [sp, #4]
 581:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 539              		.loc 1 581 27 discriminator 3 view .LVU159
 540 003a 0135     		adds	r5, r5, #1
 541              	.LVL61:
 581:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 542              		.loc 1 581 13 is_stmt 1 discriminator 3 view .LVU160
 581:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 543              		.loc 1 581 19 is_stmt 0 discriminator 3 view .LVU161
 544 003c 00FB00F3 		mul	r3, r0, r0
 581:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 545              		.loc 1 581 3 discriminator 3 view .LVU162
 546 0040 AB42     		cmp	r3, r5
 547 0042 06F10806 		add	r6, r6, #8
 548 0046 04F11004 		add	r4, r4, #16
 549 004a EDDC     		bgt	.L57
 550              	.LVL62:
 551              	.L56:
 584:src/matrix.c  **** 		}
 585:src/matrix.c  **** 	}
 586:src/matrix.c  **** 	if (mbase != NULL)
 552              		.loc 1 586 2 is_stmt 1 view .LVU163
 553              		.loc 1 586 5 is_stmt 0 view .LVU164
 554 004c B8F1000F 		cmp	r8, #0
 555 0050 01D0     		beq	.L52
 587:src/matrix.c  **** 		*mbase = base;
 556              		.loc 1 587 3 is_stmt 1 view .LVU165
 557              		.loc 1 587 10 is_stmt 0 view .LVU166
ARM GAS  /tmp/cc5NzCD8.s 			page 22


 558 0052 C8F80070 		str	r7, [r8]
 588:src/matrix.c  **** 	return rows;
 559              		.loc 1 588 2 is_stmt 1 view .LVU167
 560              	.L52:
 589:src/matrix.c  **** }
 561              		.loc 1 589 1 is_stmt 0 view .LVU168
 562 0056 0CB0     		add	sp, sp, #48
 563              		.cfi_remember_state
 564              		.cfi_def_cfa_offset 24
 565              		@ sp needed
 566 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 567              	.LVL63:
 568              	.L54:
 569              		.cfi_restore_state
 577:src/matrix.c  **** 		return 0;
 570              		.loc 1 577 3 is_stmt 1 view .LVU169
 571 005c 1520     		movs	r0, #21
 572 005e FFF7FEFF 		bl	report_err
 573              	.LVL64:
 578:src/matrix.c  **** 	}
 574              		.loc 1 578 3 view .LVU170
 578:src/matrix.c  **** 	}
 575              		.loc 1 578 10 is_stmt 0 view .LVU171
 576 0062 0020     		movs	r0, #0
 577              		.loc 1 589 1 view .LVU172
 578 0064 0CB0     		add	sp, sp, #48
 579              		.cfi_def_cfa_offset 24
 580              		@ sp needed
 581 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 582              		.loc 1 589 1 view .LVU173
 583              		.cfi_endproc
 584              	.LFE25:
 586 006a 00BF     		.section	.text.LU_decomposition,"ax",%progbits
 587              		.align	1
 588              		.p2align 2,,3
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu fpv4-sp-d16
 594              	LU_decomposition:
 595              	.LVL65:
 596              	.LFB23:
 455:src/matrix.c  **** 	int i, j, k;
 597              		.loc 1 455 80 is_stmt 1 view -0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 176
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 456:src/matrix.c  **** 	int pvt, spvt = 1;
 601              		.loc 1 456 2 view .LVU175
 457:src/matrix.c  **** 	decimal128 *p1, *p2;
 602              		.loc 1 457 2 view .LVU176
 458:src/matrix.c  **** 	decNumber max, t, u;
 603              		.loc 1 458 2 view .LVU177
 459:src/matrix.c  **** 
 604              		.loc 1 459 2 view .LVU178
 461:src/matrix.c  **** 	for (k=0; k<n; k++) {
 605              		.loc 1 461 9 view .LVU179
ARM GAS  /tmp/cc5NzCD8.s 			page 23


 455:src/matrix.c  **** 	int i, j, k;
 606              		.loc 1 455 80 is_stmt 0 view .LVU180
 607 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 608              		.cfi_def_cfa_offset 36
 609              		.cfi_offset 4, -36
 610              		.cfi_offset 5, -32
 611              		.cfi_offset 6, -28
 612              		.cfi_offset 7, -24
 613              		.cfi_offset 8, -20
 614              		.cfi_offset 9, -16
 615              		.cfi_offset 10, -12
 616              		.cfi_offset 11, -8
 617              		.cfi_offset 14, -4
 618 0004 ADB0     		sub	sp, sp, #180
 619              		.cfi_def_cfa_offset 216
 455:src/matrix.c  **** 	int i, j, k;
 620              		.loc 1 455 80 view .LVU181
 621 0006 9346     		mov	fp, r2
 622 0008 0446     		mov	r4, r0
 623 000a 0A90     		str	r0, [sp, #40]
 624 000c 0491     		str	r1, [sp, #16]
 461:src/matrix.c  **** 	for (k=0; k<n; k++) {
 625              		.loc 1 461 9 view .LVU182
 626 000e FFF7FEFF 		bl	busy
 627              	.LVL66:
 462:src/matrix.c  **** 		/* Find the pivot row */
 628              		.loc 1 462 2 is_stmt 1 view .LVU183
 462:src/matrix.c  **** 		/* Find the pivot row */
 629              		.loc 1 462 12 view .LVU184
 462:src/matrix.c  **** 		/* Find the pivot row */
 630              		.loc 1 462 2 is_stmt 0 view .LVU185
 631 0012 BBF1000F 		cmp	fp, #0
 632 0016 40F3DC80 		ble	.L78
 633 001a 0BF10103 		add	r3, fp, #1
 634 001e 1B01     		lsls	r3, r3, #4
 635 0020 0893     		str	r3, [sp, #32]
 636 0022 A3F11009 		sub	r9, r3, #16
 637 0026 203B     		subs	r3, r3, #32
 638 0028 04F11001 		add	r1, r4, #16
 639 002c 0026     		movs	r6, #0
 640 002e 0993     		str	r3, [sp, #36]
 457:src/matrix.c  **** 	decimal128 *p1, *p2;
 641              		.loc 1 457 11 view .LVU186
 642 0030 0123     		movs	r3, #1
 643 0032 0B91     		str	r1, [sp, #44]
 462:src/matrix.c  **** 		/* Find the pivot row */
 644              		.loc 1 462 2 view .LVU187
 645 0034 0596     		str	r6, [sp, #20]
 646 0036 0291     		str	r1, [sp, #8]
 647 0038 0394     		str	r4, [sp, #12]
 457:src/matrix.c  **** 	decimal128 *p1, *p2;
 648              		.loc 1 457 11 view .LVU188
 649 003a 0793     		str	r3, [sp, #28]
 650              	.LVL67:
 651              	.L76:
 464:src/matrix.c  **** 		matrix_get128(&u, A, k, k, n);
 652              		.loc 1 464 3 is_stmt 1 view .LVU189
ARM GAS  /tmp/cc5NzCD8.s 			page 24


 465:src/matrix.c  **** 		dn_abs(&max, &u);
 653              		.loc 1 465 3 view .LVU190
 654              	.LBB78:
 655              	.LBI78:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 656              		.loc 1 442 13 view .LVU191
 657              	.LBB79:
 443:src/matrix.c  **** }
 658              		.loc 1 443 2 view .LVU192
 443:src/matrix.c  **** }
 659              		.loc 1 443 2 is_stmt 0 view .LVU193
 660              	.LBE79:
 661              	.LBE78:
  26:src/matrix.c  **** }
 662              		.loc 1 26 2 is_stmt 1 view .LVU194
  26:src/matrix.c  **** }
 663              		.loc 1 26 2 is_stmt 0 view .LVU195
 664 003c 029B     		ldr	r3, [sp, #8]
 665 003e A3F11005 		sub	r5, r3, #16
 666              	.LBB81:
 667              	.LBB80:
 443:src/matrix.c  **** }
 668              		.loc 1 443 2 view .LVU196
 669 0042 23A9     		add	r1, sp, #140
 670              	.LVL68:
 443:src/matrix.c  **** }
 671              		.loc 1 443 2 view .LVU197
 672 0044 2846     		mov	r0, r5
 673 0046 FFF7FEFF 		bl	decimal128ToNumber
 674              	.LVL69:
 443:src/matrix.c  **** }
 675              		.loc 1 443 2 view .LVU198
 676              	.LBE80:
 677              	.LBE81:
 466:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 678              		.loc 1 466 3 is_stmt 1 view .LVU199
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 679              		.loc 1 467 9 is_stmt 0 view .LVU200
 680 004a 771C     		adds	r7, r6, #1
 466:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 681              		.loc 1 466 3 view .LVU201
 682 004c 23A9     		add	r1, sp, #140
 683 004e 11A8     		add	r0, sp, #68
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 684              		.loc 1 467 9 view .LVU202
 685 0050 0197     		str	r7, [sp, #4]
 466:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 686              		.loc 1 466 3 view .LVU203
 687 0052 FFF7FEFF 		bl	dn_abs
 688              	.LVL70:
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 689              		.loc 1 467 3 is_stmt 1 view .LVU204
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 690              		.loc 1 467 15 view .LVU205
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 691              		.loc 1 467 3 is_stmt 0 view .LVU206
 692 0056 BB45     		cmp	fp, r7
ARM GAS  /tmp/cc5NzCD8.s 			page 25


 693 0058 40F3C180 		ble	.L67
 694 005c 039B     		ldr	r3, [sp, #12]
 695 005e 3446     		mov	r4, r6
 696 0060 09EB0308 		add	r8, r9, r3
 697 0064 02E0     		b	.L69
 698              	.L68:
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 699              		.loc 1 467 20 is_stmt 1 discriminator 2 view .LVU207
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 700              		.loc 1 467 21 is_stmt 0 discriminator 2 view .LVU208
 701 0066 0137     		adds	r7, r7, #1
 702              	.LVL71:
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 703              		.loc 1 467 15 is_stmt 1 discriminator 2 view .LVU209
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 704              		.loc 1 467 3 is_stmt 0 discriminator 2 view .LVU210
 705 0068 BB45     		cmp	fp, r7
 706 006a 16D0     		beq	.L93
 707              	.L69:
 468:src/matrix.c  **** 			dn_abs(&u, &t);
 708              		.loc 1 468 4 is_stmt 1 view .LVU211
 709              	.LVL72:
 710              	.LBB82:
 711              	.LBI82:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 712              		.loc 1 442 13 view .LVU212
 713              	.LBB83:
 443:src/matrix.c  **** }
 714              		.loc 1 443 2 view .LVU213
 443:src/matrix.c  **** }
 715              		.loc 1 443 2 is_stmt 0 view .LVU214
 716              	.LBE83:
 717              	.LBE82:
  26:src/matrix.c  **** }
 718              		.loc 1 26 2 is_stmt 1 view .LVU215
 719              	.LBB85:
 720              	.LBB84:
 443:src/matrix.c  **** }
 721              		.loc 1 443 2 is_stmt 0 view .LVU216
 722 006c 1AA9     		add	r1, sp, #104
 723              	.LVL73:
 443:src/matrix.c  **** }
 724              		.loc 1 443 2 view .LVU217
 725 006e 4046     		mov	r0, r8
 726 0070 FFF7FEFF 		bl	decimal128ToNumber
 727              	.LVL74:
 443:src/matrix.c  **** }
 728              		.loc 1 443 2 view .LVU218
 729              	.LBE84:
 730              	.LBE85:
 469:src/matrix.c  **** 			if (dn_gt(&u, &max)) {
 731              		.loc 1 469 4 is_stmt 1 view .LVU219
 732 0074 1AA9     		add	r1, sp, #104
 733 0076 23A8     		add	r0, sp, #140
 734 0078 FFF7FEFF 		bl	dn_abs
 735              	.LVL75:
 470:src/matrix.c  **** 				decNumberCopy(&max, &u);
ARM GAS  /tmp/cc5NzCD8.s 			page 26


 736              		.loc 1 470 4 view .LVU220
 470:src/matrix.c  **** 				decNumberCopy(&max, &u);
 737              		.loc 1 470 8 is_stmt 0 view .LVU221
 738 007c 23A9     		add	r1, sp, #140
 739 007e 11A8     		add	r0, sp, #68
 740 0080 FFF7FEFF 		bl	dn_lt
 741              	.LVL76:
 742 0084 C844     		add	r8, r8, r9
 470:src/matrix.c  **** 				decNumberCopy(&max, &u);
 743              		.loc 1 470 7 view .LVU222
 744 0086 0028     		cmp	r0, #0
 745 0088 EDD0     		beq	.L68
 471:src/matrix.c  **** 				pvt = j;
 746              		.loc 1 471 5 is_stmt 1 view .LVU223
 747 008a 23A9     		add	r1, sp, #140
 748 008c 11A8     		add	r0, sp, #68
 749 008e 3C46     		mov	r4, r7
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 750              		.loc 1 467 21 is_stmt 0 view .LVU224
 751 0090 0137     		adds	r7, r7, #1
 752              	.LVL77:
 471:src/matrix.c  **** 				pvt = j;
 753              		.loc 1 471 5 view .LVU225
 754 0092 FFF7FEFF 		bl	decNumberCopy
 755              	.LVL78:
 472:src/matrix.c  **** 			}
 756              		.loc 1 472 5 is_stmt 1 view .LVU226
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 757              		.loc 1 467 20 view .LVU227
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 758              		.loc 1 467 15 view .LVU228
 467:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 759              		.loc 1 467 3 is_stmt 0 view .LVU229
 760 0096 BB45     		cmp	fp, r7
 761 0098 E8D1     		bne	.L69
 762              	.L93:
 475:src/matrix.c  **** 			*pivots++ = pvt;
 763              		.loc 1 475 3 is_stmt 1 view .LVU230
 475:src/matrix.c  **** 			*pivots++ = pvt;
 764              		.loc 1 475 6 is_stmt 0 view .LVU231
 765 009a 049B     		ldr	r3, [sp, #16]
 766 009c 1BB1     		cbz	r3, .L70
 767              	.L77:
 476:src/matrix.c  **** 
 768              		.loc 1 476 4 is_stmt 1 view .LVU232
 476:src/matrix.c  **** 
 769              		.loc 1 476 11 is_stmt 0 view .LVU233
 770 009e 049B     		ldr	r3, [sp, #16]
 771              	.LVL79:
 476:src/matrix.c  **** 
 772              		.loc 1 476 14 view .LVU234
 773 00a0 03F8014B 		strb	r4, [r3], #1
 774              	.LVL80:
 476:src/matrix.c  **** 
 775              		.loc 1 476 11 view .LVU235
 776 00a4 0493     		str	r3, [sp, #16]
 777              	.LVL81:
ARM GAS  /tmp/cc5NzCD8.s 			page 27


 778              	.L70:
 479:src/matrix.c  **** 			spvt = -spvt;
 779              		.loc 1 479 3 is_stmt 1 view .LVU236
 479:src/matrix.c  **** 			spvt = -spvt;
 780              		.loc 1 479 6 is_stmt 0 view .LVU237
 781 00a6 B442     		cmp	r4, r6
 782 00a8 69D1     		bne	.L94
 783              	.LVL82:
 784              	.L71:
 494:src/matrix.c  **** 		if (dn_eq0(&t))
 785              		.loc 1 494 3 is_stmt 1 view .LVU238
 786              	.LBB86:
 787              	.LBI86:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 788              		.loc 1 442 13 view .LVU239
 789              	.LBB87:
 443:src/matrix.c  **** }
 790              		.loc 1 443 2 view .LVU240
 443:src/matrix.c  **** }
 791              		.loc 1 443 2 is_stmt 0 view .LVU241
 792              	.LBE87:
 793              	.LBE86:
  26:src/matrix.c  **** }
 794              		.loc 1 26 2 is_stmt 1 view .LVU242
 795              	.LBB89:
 796              	.LBB88:
 443:src/matrix.c  **** }
 797              		.loc 1 443 2 is_stmt 0 view .LVU243
 798 00aa 1AA9     		add	r1, sp, #104
 799              	.LVL83:
 443:src/matrix.c  **** }
 800              		.loc 1 443 2 view .LVU244
 801 00ac 2846     		mov	r0, r5
 802 00ae FFF7FEFF 		bl	decimal128ToNumber
 803              	.LVL84:
 443:src/matrix.c  **** }
 804              		.loc 1 443 2 view .LVU245
 805              	.LBE88:
 806              	.LBE89:
 495:src/matrix.c  **** 			return 0;
 807              		.loc 1 495 3 is_stmt 1 view .LVU246
 495:src/matrix.c  **** 			return 0;
 808              		.loc 1 495 7 is_stmt 0 view .LVU247
 809 00b2 1AA8     		add	r0, sp, #104
 810 00b4 FFF7FEFF 		bl	dn_eq0
 811              	.LVL85:
 495:src/matrix.c  **** 			return 0;
 812              		.loc 1 495 6 view .LVU248
 813 00b8 0028     		cmp	r0, #0
 814 00ba 40F09680 		bne	.L79
 815              	.LVL86:
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 816              		.loc 1 499 15 is_stmt 1 view .LVU249
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 817              		.loc 1 499 3 is_stmt 0 view .LVU250
 818 00be 019E     		ldr	r6, [sp, #4]
 819 00c0 B345     		cmp	fp, r6
ARM GAS  /tmp/cc5NzCD8.s 			page 28


 820 00c2 00F08880 		beq	.L65
 821 00c6 099B     		ldr	r3, [sp, #36]
 822 00c8 029A     		ldr	r2, [sp, #8]
 823 00ca 9C18     		adds	r4, r3, r2
 824              	.LVL87:
 825              	.L73:
 500:src/matrix.c  **** 			matrix_get128(&u, A, i, k, n);
 826              		.loc 1 500 4 is_stmt 1 view .LVU251
 827              	.LBB90:
 828              	.LBI90:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 829              		.loc 1 442 13 view .LVU252
 830              	.LBB91:
 443:src/matrix.c  **** }
 831              		.loc 1 443 2 view .LVU253
 443:src/matrix.c  **** }
 832              		.loc 1 443 2 is_stmt 0 view .LVU254
 833              	.LBE91:
 834              	.LBE90:
  26:src/matrix.c  **** }
 835              		.loc 1 26 2 is_stmt 1 view .LVU255
 836              	.LBB93:
 837              	.LBB92:
 443:src/matrix.c  **** }
 838              		.loc 1 443 2 is_stmt 0 view .LVU256
 839 00cc 1AA9     		add	r1, sp, #104
 840              	.LVL88:
 443:src/matrix.c  **** }
 841              		.loc 1 443 2 view .LVU257
 842 00ce 2846     		mov	r0, r5
 843 00d0 FFF7FEFF 		bl	decimal128ToNumber
 844              	.LVL89:
 443:src/matrix.c  **** }
 845              		.loc 1 443 2 view .LVU258
 846              	.LBE92:
 847              	.LBE93:
 501:src/matrix.c  **** 			dn_divide(&max, &u, &t);
 848              		.loc 1 501 4 is_stmt 1 view .LVU259
 849              	.LBB94:
 850              	.LBI94:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 851              		.loc 1 442 13 view .LVU260
 852              	.LBB95:
 443:src/matrix.c  **** }
 853              		.loc 1 443 2 view .LVU261
 443:src/matrix.c  **** }
 854              		.loc 1 443 2 is_stmt 0 view .LVU262
 855              	.LBE95:
 856              	.LBE94:
  26:src/matrix.c  **** }
 857              		.loc 1 26 2 is_stmt 1 view .LVU263
 858              	.LBB97:
 859              	.LBB96:
 443:src/matrix.c  **** }
 860              		.loc 1 443 2 is_stmt 0 view .LVU264
 861 00d4 23A9     		add	r1, sp, #140
 862              	.LVL90:
ARM GAS  /tmp/cc5NzCD8.s 			page 29


 443:src/matrix.c  **** }
 863              		.loc 1 443 2 view .LVU265
 864 00d6 2046     		mov	r0, r4
 865 00d8 FFF7FEFF 		bl	decimal128ToNumber
 866              	.LVL91:
 443:src/matrix.c  **** }
 867              		.loc 1 443 2 view .LVU266
 868              	.LBE96:
 869              	.LBE97:
 502:src/matrix.c  **** 			matrix_put128(&max, A, i, k, n);
 870              		.loc 1 502 4 is_stmt 1 view .LVU267
 871 00dc 1AAA     		add	r2, sp, #104
 872 00de 23A9     		add	r1, sp, #140
 873 00e0 11A8     		add	r0, sp, #68
 874 00e2 FFF7FEFF 		bl	dn_divide
 875              	.LVL92:
 503:src/matrix.c  **** 		}
 876              		.loc 1 503 4 view .LVU268
 877              	.LBB98:
 878              	.LBI98:
 446:src/matrix.c  **** 	packed128_from_number(base + matrix_idx(row, col, ncols), x);
 879              		.loc 1 446 13 view .LVU269
 880              	.LBB99:
 447:src/matrix.c  **** }
 881              		.loc 1 447 2 view .LVU270
 447:src/matrix.c  **** }
 882              		.loc 1 447 2 is_stmt 0 view .LVU271
 883              	.LBE99:
 884              	.LBE98:
  26:src/matrix.c  **** }
 885              		.loc 1 26 2 is_stmt 1 view .LVU272
  26:src/matrix.c  **** }
 886              		.loc 1 26 2 is_stmt 0 view .LVU273
 887 00e6 3746     		mov	r7, r6
 888              	.LBB102:
 889              	.LBB100:
 447:src/matrix.c  **** }
 890              		.loc 1 447 2 view .LVU274
 891 00e8 2046     		mov	r0, r4
 892 00ea 11A9     		add	r1, sp, #68
 893              	.LVL93:
 447:src/matrix.c  **** }
 894              		.loc 1 447 2 view .LVU275
 895              	.LBE100:
 896              	.LBE102:
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 897              		.loc 1 499 21 view .LVU276
 898 00ec 0136     		adds	r6, r6, #1
 899              	.LVL94:
 900              	.LBB103:
 901              	.LBB101:
 447:src/matrix.c  **** }
 902              		.loc 1 447 2 view .LVU277
 903 00ee FFF7FEFF 		bl	packed128_from_number
 904              	.LVL95:
 447:src/matrix.c  **** }
 905              		.loc 1 447 2 view .LVU278
ARM GAS  /tmp/cc5NzCD8.s 			page 30


 906              	.LBE101:
 907              	.LBE103:
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 908              		.loc 1 499 20 is_stmt 1 view .LVU279
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 909              		.loc 1 499 15 view .LVU280
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 910              		.loc 1 499 3 is_stmt 0 view .LVU281
 911 00f2 B345     		cmp	fp, r6
 912 00f4 4C44     		add	r4, r4, r9
 913 00f6 E9D1     		bne	.L73
 914 00f8 059B     		ldr	r3, [sp, #20]
 915 00fa CDF818B0 		str	fp, [sp, #24]
 916 00fe 5B44     		add	r3, r3, fp
 917 0100 0593     		str	r3, [sp, #20]
 918 0102 019B     		ldr	r3, [sp, #4]
 919 0104 4FEA0B16 		lsl	r6, fp, #4
 920              	.LVL96:
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 921              		.loc 1 499 3 view .LVU282
 922 0108 9A46     		mov	r10, r3
 923              	.LVL97:
 924              	.L74:
 507:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 925              		.loc 1 507 16 is_stmt 1 view .LVU283
 926 010a 039B     		ldr	r3, [sp, #12]
 499:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 927              		.loc 1 499 3 is_stmt 0 view .LVU284
 928 010c DDE90154 		ldrd	r5, r4, [sp, #4]
 929 0110 06EB0308 		add	r8, r6, r3
 930              	.LVL98:
 931              	.L75:
 508:src/matrix.c  **** 				matrix_get128(&u, A, k, j, n);
 932              		.loc 1 508 5 is_stmt 1 view .LVU285
 933              	.LBB104:
 934              	.LBI104:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 935              		.loc 1 442 13 view .LVU286
 936              	.LBB105:
 443:src/matrix.c  **** }
 937              		.loc 1 443 2 view .LVU287
 443:src/matrix.c  **** }
 938              		.loc 1 443 2 is_stmt 0 view .LVU288
 939              	.LBE105:
 940              	.LBE104:
  26:src/matrix.c  **** }
 941              		.loc 1 26 2 is_stmt 1 view .LVU289
 942              	.LBB107:
 943              	.LBB106:
 443:src/matrix.c  **** }
 944              		.loc 1 443 2 is_stmt 0 view .LVU290
 945 0114 1AA9     		add	r1, sp, #104
 946              	.LVL99:
 443:src/matrix.c  **** }
 947              		.loc 1 443 2 view .LVU291
 948 0116 4046     		mov	r0, r8
 949 0118 FFF7FEFF 		bl	decimal128ToNumber
ARM GAS  /tmp/cc5NzCD8.s 			page 31


 950              	.LVL100:
 443:src/matrix.c  **** }
 951              		.loc 1 443 2 view .LVU292
 952              	.LBE106:
 953              	.LBE107:
 509:src/matrix.c  **** 				dn_multiply(&max, &t, &u);
 954              		.loc 1 509 5 is_stmt 1 view .LVU293
 955              	.LBB108:
 956              	.LBI108:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 957              		.loc 1 442 13 view .LVU294
 958              	.LBB109:
 443:src/matrix.c  **** }
 959              		.loc 1 443 2 view .LVU295
 443:src/matrix.c  **** }
 960              		.loc 1 443 2 is_stmt 0 view .LVU296
 961              	.LBE109:
 962              	.LBE108:
  26:src/matrix.c  **** }
 963              		.loc 1 26 2 is_stmt 1 view .LVU297
 964              	.LBB111:
 965              	.LBB110:
 443:src/matrix.c  **** }
 966              		.loc 1 443 2 is_stmt 0 view .LVU298
 967 011c 23A9     		add	r1, sp, #140
 968              	.LVL101:
 443:src/matrix.c  **** }
 969              		.loc 1 443 2 view .LVU299
 970 011e 2046     		mov	r0, r4
 971 0120 FFF7FEFF 		bl	decimal128ToNumber
 972              	.LVL102:
 443:src/matrix.c  **** }
 973              		.loc 1 443 2 view .LVU300
 974              	.LBE110:
 975              	.LBE111:
 510:src/matrix.c  **** 				matrix_get128(&t, A, i, j, n);
 976              		.loc 1 510 5 is_stmt 1 view .LVU301
 977 0124 06EB040B 		add	fp, r6, r4
 978 0128 23AA     		add	r2, sp, #140
 979 012a 1AA9     		add	r1, sp, #104
 980 012c 11A8     		add	r0, sp, #68
 981 012e FFF7FEFF 		bl	dn_multiply
 982              	.LVL103:
 511:src/matrix.c  **** 				dn_subtract(&u, &t, &max);
 983              		.loc 1 511 5 view .LVU302
 984              	.LBB112:
 985              	.LBI112:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 986              		.loc 1 442 13 view .LVU303
 987              	.LBB113:
 443:src/matrix.c  **** }
 988              		.loc 1 443 2 view .LVU304
 443:src/matrix.c  **** }
 989              		.loc 1 443 2 is_stmt 0 view .LVU305
 990              	.LBE113:
 991              	.LBE112:
  26:src/matrix.c  **** }
ARM GAS  /tmp/cc5NzCD8.s 			page 32


 992              		.loc 1 26 2 is_stmt 1 view .LVU306
 993              	.LBB115:
 994              	.LBB114:
 443:src/matrix.c  **** }
 995              		.loc 1 443 2 is_stmt 0 view .LVU307
 996 0132 1AA9     		add	r1, sp, #104
 997              	.LVL104:
 443:src/matrix.c  **** }
 998              		.loc 1 443 2 view .LVU308
 999 0134 5846     		mov	r0, fp
 1000 0136 FFF7FEFF 		bl	decimal128ToNumber
 1001              	.LVL105:
 443:src/matrix.c  **** }
 1002              		.loc 1 443 2 view .LVU309
 1003              	.LBE114:
 1004              	.LBE115:
 512:src/matrix.c  **** 				matrix_put128(&u, A, i, j, n);
 1005              		.loc 1 512 5 is_stmt 1 view .LVU310
 1006 013a 11AA     		add	r2, sp, #68
 1007 013c 1AA9     		add	r1, sp, #104
 1008 013e 23A8     		add	r0, sp, #140
 1009 0140 FFF7FEFF 		bl	dn_subtract
 1010              	.LVL106:
 513:src/matrix.c  **** 			}
 1011              		.loc 1 513 5 view .LVU311
 1012              	.LBB116:
 1013              	.LBI116:
 446:src/matrix.c  **** 	packed128_from_number(base + matrix_idx(row, col, ncols), x);
 1014              		.loc 1 446 13 view .LVU312
 1015              	.LBB117:
 447:src/matrix.c  **** }
 1016              		.loc 1 447 2 view .LVU313
 447:src/matrix.c  **** }
 1017              		.loc 1 447 2 is_stmt 0 view .LVU314
 1018              	.LBE117:
 1019              	.LBE116:
  26:src/matrix.c  **** }
 1020              		.loc 1 26 2 is_stmt 1 view .LVU315
 1021              	.LBB119:
 1022              	.LBB118:
 447:src/matrix.c  **** }
 1023              		.loc 1 447 2 is_stmt 0 view .LVU316
 1024 0144 23A9     		add	r1, sp, #140
 1025              	.LVL107:
 447:src/matrix.c  **** }
 1026              		.loc 1 447 2 view .LVU317
 1027 0146 5846     		mov	r0, fp
 1028 0148 FFF7FEFF 		bl	packed128_from_number
 1029              	.LVL108:
 447:src/matrix.c  **** }
 1030              		.loc 1 447 2 view .LVU318
 1031              	.LBE118:
 1032              	.LBE119:
 507:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1033              		.loc 1 507 21 is_stmt 1 view .LVU319
 507:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1034              		.loc 1 507 16 view .LVU320
ARM GAS  /tmp/cc5NzCD8.s 			page 33


 507:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1035              		.loc 1 507 4 is_stmt 0 view .LVU321
 1036 014c AF42     		cmp	r7, r5
 1037 014e 04F11004 		add	r4, r4, #16
 1038 0152 05F10105 		add	r5, r5, #1
 1039              	.LVL109:
 507:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1040              		.loc 1 507 4 view .LVU322
 1041 0156 DDD1     		bne	.L75
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1042              		.loc 1 506 20 is_stmt 1 discriminator 2 view .LVU323
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1043              		.loc 1 506 3 is_stmt 0 discriminator 2 view .LVU324
 1044 0158 BA45     		cmp	r10, r7
 1045 015a 4E44     		add	r6, r6, r9
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1046              		.loc 1 506 21 discriminator 2 view .LVU325
 1047 015c 0AF10103 		add	r3, r10, #1
 1048              	.LVL110:
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1049              		.loc 1 506 15 is_stmt 1 discriminator 2 view .LVU326
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1050              		.loc 1 506 3 is_stmt 0 discriminator 2 view .LVU327
 1051 0160 01D0     		beq	.L95
 1052 0162 9A46     		mov	r10, r3
 1053 0164 D1E7     		b	.L74
 1054              	.L95:
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1055              		.loc 1 506 3 discriminator 2 view .LVU328
 1056 0166 029A     		ldr	r2, [sp, #8]
 1057 0168 089B     		ldr	r3, [sp, #32]
 1058              	.LVL111:
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1059              		.loc 1 506 3 discriminator 2 view .LVU329
 1060 016a DDF818B0 		ldr	fp, [sp, #24]
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1061              		.loc 1 506 3 view .LVU330
 1062 016e 019E     		ldr	r6, [sp, #4]
 1063 0170 1146     		mov	r1, r2
 1064 0172 039A     		ldr	r2, [sp, #12]
 1065 0174 1944     		add	r1, r1, r3
 1066 0176 1A44     		add	r2, r2, r3
 1067 0178 0291     		str	r1, [sp, #8]
 1068 017a 0392     		str	r2, [sp, #12]
 1069              	.LVL112:
 506:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1070              		.loc 1 506 3 view .LVU331
 1071 017c 5EE7     		b	.L76
 1072              	.LVL113:
 1073              	.L94:
 480:src/matrix.c  **** 			p1 = A + (n * k);
 1074              		.loc 1 480 4 is_stmt 1 view .LVU332
 1075 017e 0A9B     		ldr	r3, [sp, #40]
 1076 0180 059A     		ldr	r2, [sp, #20]
 482:src/matrix.c  **** 			for (j=0; j<n; j++) {
 1077              		.loc 1 482 16 is_stmt 0 view .LVU333
 1078 0182 0BFB04F7 		mul	r7, fp, r4
ARM GAS  /tmp/cc5NzCD8.s 			page 34


 1079              	.LVL114:
 482:src/matrix.c  **** 			for (j=0; j<n; j++) {
 1080              		.loc 1 482 16 view .LVU334
 1081 0186 0137     		adds	r7, r7, #1
 1082 0188 03EB0717 		add	r7, r3, r7, lsl #4
 480:src/matrix.c  **** 			p1 = A + (n * k);
 1083              		.loc 1 480 9 view .LVU335
 1084 018c 079B     		ldr	r3, [sp, #28]
 1085 018e 5B42     		rsbs	r3, r3, #0
 1086 0190 0793     		str	r3, [sp, #28]
 1087              	.LVL115:
 481:src/matrix.c  **** 			p2 = A + (n * pvt);
 1088              		.loc 1 481 4 is_stmt 1 view .LVU336
 482:src/matrix.c  **** 			for (j=0; j<n; j++) {
 1089              		.loc 1 482 4 view .LVU337
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1090              		.loc 1 483 4 view .LVU338
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1091              		.loc 1 483 14 view .LVU339
 1092 0192 0B9B     		ldr	r3, [sp, #44]
 1093              	.LVL116:
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1094              		.loc 1 483 10 is_stmt 0 view .LVU340
 1095 0194 4FF0000C 		mov	ip, #0
 1096 0198 03EB021E 		add	lr, r3, r2, lsl #4
 1097              	.LVL117:
 1098              	.L72:
 1099              	.LBB120:
 484:src/matrix.c  **** 				*p1 = *p2;
 1100              		.loc 1 484 5 is_stmt 1 discriminator 3 view .LVU341
 484:src/matrix.c  **** 				*p1 = *p2;
 1101              		.loc 1 484 16 is_stmt 0 discriminator 3 view .LVU342
 1102 019c AEF11006 		sub	r6, lr, #16
 1103              	.LVL118:
 484:src/matrix.c  **** 				*p1 = *p2;
 1104              		.loc 1 484 16 discriminator 3 view .LVU343
 1105 01a0 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 485:src/matrix.c  **** 				*p2 = t;
 1106              		.loc 1 485 9 discriminator 3 view .LVU344
 1107 01a4 A7F11004 		sub	r4, r7, #16
 484:src/matrix.c  **** 				*p1 = *p2;
 1108              		.loc 1 484 16 discriminator 3 view .LVU345
 1109 01a8 0DF13408 		add	r8, sp, #52
 1110 01ac 88E80F00 		stm	r8, {r0, r1, r2, r3}
 485:src/matrix.c  **** 				*p2 = t;
 1111              		.loc 1 485 5 is_stmt 1 discriminator 3 view .LVU346
 485:src/matrix.c  **** 				*p2 = t;
 1112              		.loc 1 485 9 is_stmt 0 discriminator 3 view .LVU347
 1113 01b0 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1114 01b4 86E80F00 		stm	r6, {r0, r1, r2, r3}
 486:src/matrix.c  **** 				p1++;
 1115              		.loc 1 486 5 is_stmt 1 discriminator 3 view .LVU348
 486:src/matrix.c  **** 				p1++;
 1116              		.loc 1 486 9 is_stmt 0 discriminator 3 view .LVU349
 1117 01b8 98E80F00 		ldm	r8, {r0, r1, r2, r3}
 1118              	.LBE120:
 483:src/matrix.c  **** 				decimal128 t = *p1;
ARM GAS  /tmp/cc5NzCD8.s 			page 35


 1119              		.loc 1 483 20 discriminator 3 view .LVU350
 1120 01bc 0CF1010C 		add	ip, ip, #1
 1121              	.LVL119:
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1122              		.loc 1 483 4 discriminator 3 view .LVU351
 1123 01c0 E345     		cmp	fp, ip
 1124              	.LBB121:
 486:src/matrix.c  **** 				p1++;
 1125              		.loc 1 486 9 discriminator 3 view .LVU352
 1126 01c2 84E80F00 		stm	r4, {r0, r1, r2, r3}
 487:src/matrix.c  **** 				p2++;
 1127              		.loc 1 487 5 is_stmt 1 discriminator 3 view .LVU353
 1128              	.LVL120:
 488:src/matrix.c  **** 				//swap_reg(p1++, p2++);
 1129              		.loc 1 488 5 discriminator 3 view .LVU354
 488:src/matrix.c  **** 				//swap_reg(p1++, p2++);
 1130              		.loc 1 488 5 is_stmt 0 discriminator 3 view .LVU355
 1131              	.LBE121:
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1132              		.loc 1 483 19 is_stmt 1 discriminator 3 view .LVU356
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1133              		.loc 1 483 14 discriminator 3 view .LVU357
 1134 01c6 0EF1100E 		add	lr, lr, #16
 1135 01ca 07F11007 		add	r7, r7, #16
 483:src/matrix.c  **** 				decimal128 t = *p1;
 1136              		.loc 1 483 4 is_stmt 0 discriminator 3 view .LVU358
 1137 01ce E5D1     		bne	.L72
 1138 01d0 6BE7     		b	.L71
 1139              	.LVL121:
 1140              	.L78:
 457:src/matrix.c  **** 	decimal128 *p1, *p2;
 1141              		.loc 1 457 11 view .LVU359
 1142 01d2 0123     		movs	r3, #1
 1143 01d4 0793     		str	r3, [sp, #28]
 1144              	.LVL122:
 1145              	.L65:
 517:src/matrix.c  **** 
 1146              		.loc 1 517 1 view .LVU360
 1147 01d6 0798     		ldr	r0, [sp, #28]
 1148 01d8 2DB0     		add	sp, sp, #180
 1149              		.cfi_remember_state
 1150              		.cfi_def_cfa_offset 36
 1151              		@ sp needed
 1152 01da BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1153              	.LVL123:
 1154              	.L67:
 1155              		.cfi_restore_state
 475:src/matrix.c  **** 			*pivots++ = pvt;
 1156              		.loc 1 475 3 is_stmt 1 view .LVU361
 475:src/matrix.c  **** 			*pivots++ = pvt;
 1157              		.loc 1 475 6 is_stmt 0 view .LVU362
 1158 01de 049B     		ldr	r3, [sp, #16]
 1159 01e0 002B     		cmp	r3, #0
 1160 01e2 3FF462AF 		beq	.L71
 1161 01e6 3446     		mov	r4, r6
 1162 01e8 59E7     		b	.L77
 1163              	.LVL124:
ARM GAS  /tmp/cc5NzCD8.s 			page 36


 1164              	.L79:
 496:src/matrix.c  **** 
 1165              		.loc 1 496 11 view .LVU363
 1166 01ea 0023     		movs	r3, #0
 1167 01ec 0793     		str	r3, [sp, #28]
 1168              	.LVL125:
 517:src/matrix.c  **** 
 1169              		.loc 1 517 1 view .LVU364
 1170 01ee 0798     		ldr	r0, [sp, #28]
 1171 01f0 2DB0     		add	sp, sp, #180
 1172              		.cfi_def_cfa_offset 36
 1173              		@ sp needed
 1174 01f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 517:src/matrix.c  **** 
 1175              		.loc 1 517 1 view .LVU365
 1176              		.cfi_endproc
 1177              	.LFE23:
 1179              		.section	.text.matrix_pivoting_solve,"ax",%progbits
 1180              		.align	1
 1181              		.p2align 2,,3
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1185              		.fpu fpv4-sp-d16
 1187              	matrix_pivoting_solve:
 1188              	.LVL126:
 1189              	.LFB24:
 525:src/matrix.c  **** 	int i, k;
 1190              		.loc 1 525 117 is_stmt 1 view -0
 1191              		.cfi_startproc
 1192              		@ args = 4, pretend = 0, frame = 96
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 526:src/matrix.c  **** 	decNumber r, t;
 1194              		.loc 1 526 2 view .LVU367
 527:src/matrix.c  **** 
 1195              		.loc 1 527 2 view .LVU368
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1196              		.loc 1 530 2 view .LVU369
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1197              		.loc 1 530 12 view .LVU370
 525:src/matrix.c  **** 	int i, k;
 1198              		.loc 1 525 117 is_stmt 0 view .LVU371
 1199 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1200              		.cfi_def_cfa_offset 36
 1201              		.cfi_offset 4, -36
 1202              		.cfi_offset 5, -32
 1203              		.cfi_offset 6, -28
 1204              		.cfi_offset 7, -24
 1205              		.cfi_offset 8, -20
 1206              		.cfi_offset 9, -16
 1207              		.cfi_offset 10, -12
 1208              		.cfi_offset 11, -8
 1209              		.cfi_offset 14, -4
 1210 0004 99B0     		sub	sp, sp, #100
 1211              		.cfi_def_cfa_offset 136
 525:src/matrix.c  **** 	int i, k;
 1212              		.loc 1 525 117 view .LVU372
ARM GAS  /tmp/cc5NzCD8.s 			page 37


 1213 0006 DDF88890 		ldr	r9, [sp, #136]
 1214 000a 0390     		str	r0, [sp, #12]
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1215              		.loc 1 530 2 view .LVU373
 1216 000c B9F1000F 		cmp	r9, #0
 525:src/matrix.c  **** 	int i, k;
 1217              		.loc 1 525 117 view .LVU374
 1218 0010 0193     		str	r3, [sp, #4]
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1219              		.loc 1 530 2 view .LVU375
 1220 0012 48DD     		ble	.L96
 1221 0014 09F10103 		add	r3, r9, #1
 1222              	.LVL127:
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1223              		.loc 1 530 2 view .LVU376
 1224 0018 0593     		str	r3, [sp, #20]
 1225 001a 4FF0000B 		mov	fp, #0
 1226 001e 013A     		subs	r2, r2, #1
 1227              	.LVL128:
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1228              		.loc 1 530 2 view .LVU377
 1229 0020 1B01     		lsls	r3, r3, #4
 1230 0022 8846     		mov	r8, r1
 1231 0024 0293     		str	r3, [sp, #8]
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1232              		.loc 1 530 8 view .LVU378
 1233 0026 5F46     		mov	r7, fp
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1234              		.loc 1 530 2 view .LVU379
 1235 0028 0646     		mov	r6, r0
 1236 002a 9246     		mov	r10, r2
 1237              	.LVL129:
 1238              	.L101:
 531:src/matrix.c  **** 			const decimal64 *swap = b[k];
 1239              		.loc 1 531 3 is_stmt 1 view .LVU380
 531:src/matrix.c  **** 			const decimal64 *swap = b[k];
 1240              		.loc 1 531 17 is_stmt 0 view .LVU381
 1241 002c 1AF8013F 		ldrb	r3, [r10, #1]!	@ zero_extendqisi2
 531:src/matrix.c  **** 			const decimal64 *swap = b[k];
 1242              		.loc 1 531 6 view .LVU382
 1243 0030 BB42     		cmp	r3, r7
 1244 0032 09D0     		beq	.L115
 1245              	.LBB122:
 532:src/matrix.c  **** 			b[k] = b[pivot[k]];
 1246              		.loc 1 532 4 is_stmt 1 view .LVU383
 533:src/matrix.c  **** 			b[pivot[k]] = swap;
 1247              		.loc 1 533 12 is_stmt 0 view .LVU384
 1248 0034 58F82330 		ldr	r3, [r8, r3, lsl #2]
 532:src/matrix.c  **** 			b[k] = b[pivot[k]];
 1249              		.loc 1 532 21 view .LVU385
 1250 0038 58F82720 		ldr	r2, [r8, r7, lsl #2]
 1251              	.LVL130:
 533:src/matrix.c  **** 			b[pivot[k]] = swap;
 1252              		.loc 1 533 4 is_stmt 1 view .LVU386
 533:src/matrix.c  **** 			b[pivot[k]] = swap;
 1253              		.loc 1 533 9 is_stmt 0 view .LVU387
 1254 003c 48F82730 		str	r3, [r8, r7, lsl #2]
ARM GAS  /tmp/cc5NzCD8.s 			page 38


 534:src/matrix.c  **** 		}
 1255              		.loc 1 534 4 is_stmt 1 view .LVU388
 534:src/matrix.c  **** 		}
 1256              		.loc 1 534 5 is_stmt 0 view .LVU389
 1257 0040 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 534:src/matrix.c  **** 		}
 1258              		.loc 1 534 16 view .LVU390
 1259 0044 48F82320 		str	r2, [r8, r3, lsl #2]
 1260              	.LVL131:
 1261              	.L115:
 534:src/matrix.c  **** 		}
 1262              		.loc 1 534 16 view .LVU391
 1263              	.LBE122:
 536:src/matrix.c  **** 		for (i=0; i<k; i++) {
 1264              		.loc 1 536 3 is_stmt 1 view .LVU392
 1265 0048 019C     		ldr	r4, [sp, #4]
 1266 004a 08EB8703 		add	r3, r8, r7, lsl #2
 1267 004e 07EBC705 		add	r5, r7, r7, lsl #3
 1268 0052 04EB8505 		add	r5, r4, r5, lsl #2
 1269 0056 1868     		ldr	r0, [r3]
 1270 0058 2946     		mov	r1, r5
 1271 005a FB00     		lsls	r3, r7, #3
 1272 005c 0493     		str	r3, [sp, #16]
 1273 005e FFF7FEFF 		bl	decimal64ToNumber
 1274              	.LVL132:
 537:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1275              		.loc 1 537 3 view .LVU393
 537:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1276              		.loc 1 537 13 view .LVU394
 537:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1277              		.loc 1 537 3 is_stmt 0 view .LVU395
 1278 0062 B7B1     		cbz	r7, .L104
 1279 0064 039B     		ldr	r3, [sp, #12]
 1280 0066 03EB0B19 		add	r9, r3, fp, lsl #4
 1281              	.LVL133:
 1282              	.L103:
 538:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 1283              		.loc 1 538 4 is_stmt 1 view .LVU396
 1284              	.LBB123:
 1285              	.LBI123:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 1286              		.loc 1 442 13 view .LVU397
 1287              	.LBB124:
 443:src/matrix.c  **** }
 1288              		.loc 1 443 2 view .LVU398
 1289              	.LBE124:
 1290              	.LBE123:
  26:src/matrix.c  **** }
 1291              		.loc 1 26 2 view .LVU399
 1292              	.LBB126:
 1293              	.LBB125:
 443:src/matrix.c  **** }
 1294              		.loc 1 443 2 is_stmt 0 view .LVU400
 1295 006a 06A9     		add	r1, sp, #24
 1296              	.LVL134:
 443:src/matrix.c  **** }
 1297              		.loc 1 443 2 view .LVU401
ARM GAS  /tmp/cc5NzCD8.s 			page 39


 1298 006c 4846     		mov	r0, r9
 1299 006e FFF7FEFF 		bl	decimal128ToNumber
 1300              	.LVL135:
 443:src/matrix.c  **** }
 1301              		.loc 1 443 2 view .LVU402
 1302              	.LBE125:
 1303              	.LBE126:
 539:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 1304              		.loc 1 539 4 is_stmt 1 view .LVU403
 1305 0072 2246     		mov	r2, r4
 1306 0074 06A9     		add	r1, sp, #24
 1307 0076 0FA8     		add	r0, sp, #60
 1308 0078 FFF7FEFF 		bl	dn_multiply
 1309              	.LVL136:
 540:src/matrix.c  **** 		}
 1310              		.loc 1 540 4 view .LVU404
 1311 007c 09F11009 		add	r9, r9, #16
 1312 0080 0FAA     		add	r2, sp, #60
 1313 0082 2946     		mov	r1, r5
 1314 0084 2846     		mov	r0, r5
 1315 0086 FFF7FEFF 		bl	dn_subtract
 1316              	.LVL137:
 537:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1317              		.loc 1 537 18 view .LVU405
 537:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1318              		.loc 1 537 13 view .LVU406
 537:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1319              		.loc 1 537 3 is_stmt 0 view .LVU407
 1320 008a B145     		cmp	r9, r6
 1321 008c 04F12404 		add	r4, r4, #36
 1322 0090 EBD1     		bne	.L103
 1323              	.L104:
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1324              		.loc 1 530 17 is_stmt 1 view .LVU408
 1325 0092 229A     		ldr	r2, [sp, #136]
 1326 0094 9344     		add	fp, fp, r2
 1327 0096 029A     		ldr	r2, [sp, #8]
 1328 0098 1644     		add	r6, r6, r2
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1329              		.loc 1 530 2 is_stmt 0 view .LVU409
 1330 009a 229A     		ldr	r2, [sp, #136]
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1331              		.loc 1 530 18 view .LVU410
 1332 009c 7B1C     		adds	r3, r7, #1
 1333              	.LVL138:
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1334              		.loc 1 530 12 is_stmt 1 view .LVU411
 530:src/matrix.c  **** 		if (k != pivot[k]) {
 1335              		.loc 1 530 2 is_stmt 0 view .LVU412
 1336 009e 9A42     		cmp	r2, r3
 1337 00a0 04D0     		beq	.L116
 1338 00a2 1F46     		mov	r7, r3
 1339 00a4 C2E7     		b	.L101
 1340              	.LVL139:
 1341              	.L96:
 560:src/matrix.c  **** 
 1342              		.loc 1 560 1 view .LVU413
ARM GAS  /tmp/cc5NzCD8.s 			page 40


 1343 00a6 19B0     		add	sp, sp, #100
 1344              		.cfi_remember_state
 1345              		.cfi_def_cfa_offset 36
 1346              		@ sp needed
 1347 00a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1348              	.LVL140:
 1349              	.L116:
 1350              		.cfi_restore_state
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1351              		.loc 1 545 2 is_stmt 1 view .LVU414
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1352              		.loc 1 545 14 view .LVU415
 1353 00ac 9146     		mov	r9, r2
 1354 00ae 049A     		ldr	r2, [sp, #16]
 1355 00b0 059B     		ldr	r3, [sp, #20]
 1356 00b2 3A44     		add	r2, r2, r7
 1357 00b4 1546     		mov	r5, r2
 1358 00b6 019A     		ldr	r2, [sp, #4]
 1359 00b8 02EB8505 		add	r5, r2, r5, lsl #2
 1360 00bc 039A     		ldr	r2, [sp, #12]
 1361 00be 1B01     		lsls	r3, r3, #4
 1362 00c0 C9EB097A 		rsb	r10, r9, r9, lsl #28
 1363 00c4 A3F11006 		sub	r6, r3, #16
 1364 00c8 6FEA090B 		mvn	fp, r9
 1365 00cc 03FB0727 		mla	r7, r3, r7, r2
 1366              	.LVL141:
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1367              		.loc 1 545 14 is_stmt 0 view .LVU416
 1368 00d0 4FEA0A13 		lsl	r3, r10, #4
 1369 00d4 06FB0926 		mla	r6, r6, r9, r2
 1370 00d8 4FEA0B1B 		lsl	fp, fp, #4
 1371 00dc 0193     		str	r3, [sp, #4]
 1372              	.LVL142:
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1373              		.loc 1 545 14 view .LVU417
 1374 00de C846     		mov	r8, r9
 1375              	.LVL143:
 1376              	.L108:
 547:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1377              		.loc 1 547 3 is_stmt 1 view .LVU418
 547:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1378              		.loc 1 547 15 view .LVU419
 547:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1379              		.loc 1 547 3 is_stmt 0 view .LVU420
 1380 00e0 C145     		cmp	r9, r8
 1381 00e2 17DD     		ble	.L107
 1382 00e4 07F1100A 		add	r10, r7, #16
 1383 00e8 05F12404 		add	r4, r5, #36
 1384              	.LVL144:
 1385              	.L106:
 548:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 1386              		.loc 1 548 4 is_stmt 1 view .LVU421
 1387              	.LBB127:
 1388              	.LBI127:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 1389              		.loc 1 442 13 view .LVU422
 1390              	.LBB128:
ARM GAS  /tmp/cc5NzCD8.s 			page 41


 443:src/matrix.c  **** }
 1391              		.loc 1 443 2 view .LVU423
 443:src/matrix.c  **** }
 1392              		.loc 1 443 2 is_stmt 0 view .LVU424
 1393              	.LBE128:
 1394              	.LBE127:
  26:src/matrix.c  **** }
 1395              		.loc 1 26 2 is_stmt 1 view .LVU425
 1396              	.LBB130:
 1397              	.LBB129:
 443:src/matrix.c  **** }
 1398              		.loc 1 443 2 is_stmt 0 view .LVU426
 1399 00ec 06A9     		add	r1, sp, #24
 1400              	.LVL145:
 443:src/matrix.c  **** }
 1401              		.loc 1 443 2 view .LVU427
 1402 00ee 5046     		mov	r0, r10
 1403 00f0 FFF7FEFF 		bl	decimal128ToNumber
 1404              	.LVL146:
 443:src/matrix.c  **** }
 1405              		.loc 1 443 2 view .LVU428
 1406              	.LBE129:
 1407              	.LBE130:
 549:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 1408              		.loc 1 549 4 is_stmt 1 view .LVU429
 1409 00f4 2246     		mov	r2, r4
 1410 00f6 06A9     		add	r1, sp, #24
 1411 00f8 0FA8     		add	r0, sp, #60
 1412 00fa FFF7FEFF 		bl	dn_multiply
 1413              	.LVL147:
 550:src/matrix.c  **** 		}
 1414              		.loc 1 550 4 view .LVU430
 1415 00fe 0AF1100A 		add	r10, r10, #16
 1416 0102 0FAA     		add	r2, sp, #60
 1417 0104 2946     		mov	r1, r5
 1418 0106 2846     		mov	r0, r5
 1419 0108 FFF7FEFF 		bl	dn_subtract
 1420              	.LVL148:
 547:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1421              		.loc 1 547 20 view .LVU431
 547:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1422              		.loc 1 547 15 view .LVU432
 547:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1423              		.loc 1 547 3 is_stmt 0 view .LVU433
 1424 010c B245     		cmp	r10, r6
 1425 010e 04F12404 		add	r4, r4, #36
 1426 0112 EBD1     		bne	.L106
 1427              	.L107:
 552:src/matrix.c  **** #if 0
 1428              		.loc 1 552 3 is_stmt 1 view .LVU434
 1429              	.LVL149:
 1430              	.LBB131:
 1431              	.LBI131:
 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 1432              		.loc 1 442 13 view .LVU435
 1433              	.LBB132:
 443:src/matrix.c  **** }
ARM GAS  /tmp/cc5NzCD8.s 			page 42


 1434              		.loc 1 443 2 view .LVU436
 443:src/matrix.c  **** }
 1435              		.loc 1 443 2 is_stmt 0 view .LVU437
 1436              	.LBE132:
 1437              	.LBE131:
  26:src/matrix.c  **** }
 1438              		.loc 1 26 2 is_stmt 1 view .LVU438
 1439              	.LBB134:
 1440              	.LBB133:
 443:src/matrix.c  **** }
 1441              		.loc 1 443 2 is_stmt 0 view .LVU439
 1442 0114 06A9     		add	r1, sp, #24
 1443              	.LVL150:
 443:src/matrix.c  **** }
 1444              		.loc 1 443 2 view .LVU440
 1445 0116 3846     		mov	r0, r7
 1446 0118 FFF7FEFF 		bl	decimal128ToNumber
 1447              	.LVL151:
 443:src/matrix.c  **** }
 1448              		.loc 1 443 2 view .LVU441
 1449              	.LBE133:
 1450              	.LBE134:
 558:src/matrix.c  **** 	}
 1451              		.loc 1 558 3 is_stmt 1 view .LVU442
 1452 011c 019B     		ldr	r3, [sp, #4]
 1453 011e 2946     		mov	r1, r5
 1454 0120 2846     		mov	r0, r5
 1455 0122 06AA     		add	r2, sp, #24
 1456 0124 1E44     		add	r6, r6, r3
 1457 0126 FFF7FEFF 		bl	dn_divide
 1458              	.LVL152:
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1459              		.loc 1 545 20 view .LVU443
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1460              		.loc 1 545 14 view .LVU444
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1461              		.loc 1 545 2 is_stmt 0 view .LVU445
 1462 012a B8F1020F 		cmp	r8, #2
 1463 012e 5F44     		add	r7, r7, fp
 1464 0130 A5F12405 		sub	r5, r5, #36
 1465 0134 08F1FF33 		add	r3, r8, #-1
 1466 0138 B5D4     		bmi	.L96
 1467 013a 9846     		mov	r8, r3
 1468              	.LVL153:
 545:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1469              		.loc 1 545 2 view .LVU446
 1470 013c D0E7     		b	.L108
 1471              		.cfi_endproc
 1472              	.LFE24:
 1474 013e 00BF     		.section	.text.matrix_descriptor,"ax",%progbits
 1475              		.align	1
 1476              		.p2align 2,,3
 1477              		.syntax unified
 1478              		.thumb
 1479              		.thumb_func
 1480              		.fpu fpv4-sp-d16
 1482              	matrix_descriptor:
ARM GAS  /tmp/cc5NzCD8.s 			page 43


 1483              	.LVL154:
 1484              	.LFB3:
  58:src/matrix.c  **** 	decNumber z;
 1485              		.loc 1 58 74 is_stmt 1 view -0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 40
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
  59:src/matrix.c  **** 
 1489              		.loc 1 59 2 view .LVU448
  61:src/matrix.c  **** 		return 0;
 1490              		.loc 1 61 2 view .LVU449
  58:src/matrix.c  **** 	decNumber z;
 1491              		.loc 1 58 74 is_stmt 0 view .LVU450
 1492 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1493              		.cfi_def_cfa_offset 20
 1494              		.cfi_offset 4, -20
 1495              		.cfi_offset 5, -16
 1496              		.cfi_offset 6, -12
 1497              		.cfi_offset 7, -8
 1498              		.cfi_offset 14, -4
 1499 0002 0C46     		mov	r4, r1
 1500 0004 1646     		mov	r6, r2
 1501 0006 8BB0     		sub	sp, sp, #44
 1502              		.cfi_def_cfa_offset 64
  58:src/matrix.c  **** 	decNumber z;
 1503              		.loc 1 58 74 view .LVU451
 1504 0008 0746     		mov	r7, r0
  61:src/matrix.c  **** 		return 0;
 1505              		.loc 1 61 8 view .LVU452
 1506 000a 1A46     		mov	r2, r3
 1507              	.LVL155:
  61:src/matrix.c  **** 		return 0;
 1508              		.loc 1 61 8 view .LVU453
 1509 000c 3146     		mov	r1, r6
 1510              	.LVL156:
  61:src/matrix.c  **** 		return 0;
 1511              		.loc 1 61 8 view .LVU454
 1512 000e 2046     		mov	r0, r4
 1513              	.LVL157:
  58:src/matrix.c  **** 	decNumber z;
 1514              		.loc 1 58 74 view .LVU455
 1515 0010 1D46     		mov	r5, r3
  61:src/matrix.c  **** 		return 0;
 1516              		.loc 1 61 8 view .LVU456
 1517 0012 FFF7FEFF 		bl	matrix_range_check
 1518              	.LVL158:
  61:src/matrix.c  **** 		return 0;
 1519              		.loc 1 61 5 view .LVU457
 1520 0016 70B1     		cbz	r0, .L117
 1521              	.LVL159:
 1522              	.LBB137:
 1523              	.LBI137:
  58:src/matrix.c  **** 	decNumber z;
 1524              		.loc 1 58 12 is_stmt 1 view .LVU458
 1525              	.LBB138:
  63:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1526              		.loc 1 63 2 view .LVU459
ARM GAS  /tmp/cc5NzCD8.s 			page 44


  63:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1527              		.loc 1 63 22 is_stmt 0 view .LVU460
 1528 0018 6421     		movs	r1, #100
  63:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1529              		.loc 1 63 28 view .LVU461
 1530 001a 01FB0464 		mla	r4, r1, r4, r6
 1531              	.LVL160:
  63:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1532              		.loc 1 63 2 view .LVU462
 1533 001e 01FB0451 		mla	r1, r1, r4, r5
 1534 0022 01A8     		add	r0, sp, #4
 1535 0024 FFF7FEFF 		bl	int_to_dn
 1536              	.LVL161:
  64:src/matrix.c  **** 	return 1;
 1537              		.loc 1 64 2 is_stmt 1 view .LVU463
 1538 0028 01A9     		add	r1, sp, #4
 1539 002a 3846     		mov	r0, r7
 1540 002c 6FF00302 		mvn	r2, #3
 1541 0030 FFF7FEFF 		bl	dn_mulpow10
 1542              	.LVL162:
  65:src/matrix.c  **** }
 1543              		.loc 1 65 2 view .LVU464
  65:src/matrix.c  **** }
 1544              		.loc 1 65 2 is_stmt 0 view .LVU465
 1545 0034 0120     		movs	r0, #1
 1546              	.L117:
 1547              	.LBE138:
 1548              	.LBE137:
  66:src/matrix.c  **** 
 1549              		.loc 1 66 1 view .LVU466
 1550 0036 0BB0     		add	sp, sp, #44
 1551              		.cfi_def_cfa_offset 20
 1552              		@ sp needed
 1553 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
  66:src/matrix.c  **** 
 1554              		.loc 1 66 1 view .LVU467
 1555              		.cfi_endproc
 1556              	.LFE3:
 1558 003a 00BF     		.section	.text.matrix_is_square,"ax",%progbits
 1559              		.align	1
 1560              		.p2align 2,,3
 1561              		.global	matrix_is_square
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1565              		.fpu fpv4-sp-d16
 1567              	matrix_is_square:
 1568              	.LVL163:
 1569              	.LFB6:
 116:src/matrix.c  **** 	int r, c;
 1570              		.loc 1 116 38 is_stmt 1 view -0
 1571              		.cfi_startproc
 1572              		@ args = 0, pretend = 0, frame = 48
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 117:src/matrix.c  **** 	decNumber x;
 1574              		.loc 1 117 2 view .LVU469
 118:src/matrix.c  **** 
ARM GAS  /tmp/cc5NzCD8.s 			page 45


 1575              		.loc 1 118 2 view .LVU470
 120:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 1576              		.loc 1 120 2 view .LVU471
 116:src/matrix.c  **** 	int r, c;
 1577              		.loc 1 116 38 is_stmt 0 view .LVU472
 1578 0000 00B5     		push	{lr}
 1579              		.cfi_def_cfa_offset 4
 1580              		.cfi_offset 14, -4
 1581 0002 8DB0     		sub	sp, sp, #52
 1582              		.cfi_def_cfa_offset 56
 120:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 1583              		.loc 1 120 2 view .LVU473
 1584 0004 03A8     		add	r0, sp, #12
 1585              	.LVL164:
 120:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 1586              		.loc 1 120 2 view .LVU474
 1587 0006 FFF7FEFF 		bl	getX
 1588              	.LVL165:
 121:src/matrix.c  **** 		return;
 1589              		.loc 1 121 2 is_stmt 1 view .LVU475
 121:src/matrix.c  **** 		return;
 1590              		.loc 1 121 6 is_stmt 0 view .LVU476
 1591 000a 03A8     		add	r0, sp, #12
 1592 000c 0023     		movs	r3, #0
 1593 000e 02AA     		add	r2, sp, #8
 1594 0010 01A9     		add	r1, sp, #4
 1595 0012 FFF7FEFF 		bl	matrix_decompose
 1596              	.LVL166:
 121:src/matrix.c  **** 		return;
 1597              		.loc 1 121 5 view .LVU477
 1598 0016 0028     		cmp	r0, #0
 1599 0018 07DB     		blt	.L123
 123:src/matrix.c  **** }
 1600              		.loc 1 123 2 is_stmt 1 view .LVU478
 1601 001a DDE90103 		ldrd	r0, r3, [sp, #4]
 1602 001e C01A     		subs	r0, r0, r3
 1603 0020 B0FA80F0 		clz	r0, r0
 1604 0024 4009     		lsrs	r0, r0, #5
 1605 0026 FFF7FEFF 		bl	fin_tst
 1606              	.LVL167:
 1607              	.L123:
 124:src/matrix.c  **** 
 1608              		.loc 1 124 1 is_stmt 0 view .LVU479
 1609 002a 0DB0     		add	sp, sp, #52
 1610              		.cfi_def_cfa_offset 4
 1611              		@ sp needed
 1612 002c 5DF804FB 		ldr	pc, [sp], #4
 1613              		.cfi_endproc
 1614              	.LFE6:
 1616              		.section	.text.matrix_copy,"ax",%progbits
 1617              		.align	1
 1618              		.p2align 2,,3
 1619              		.global	matrix_copy
 1620              		.syntax unified
 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc5NzCD8.s 			page 46


 1625              	matrix_copy:
 1626              	.LVL168:
 1627              	.LFB7:
 158:src/matrix.c  **** 	decimal64 *src;
 1628              		.loc 1 158 78 is_stmt 1 view -0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 8
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 159:src/matrix.c  **** 	int rows, cols, d;
 1632              		.loc 1 159 2 view .LVU481
 160:src/matrix.c  **** 
 1633              		.loc 1 160 2 view .LVU482
 162:src/matrix.c  **** 	if (src == NULL)
 1634              		.loc 1 162 2 view .LVU483
 158:src/matrix.c  **** 	decimal64 *src;
 1635              		.loc 1 158 78 is_stmt 0 view .LVU484
 1636 0000 70B5     		push	{r4, r5, r6, lr}
 1637              		.cfi_def_cfa_offset 16
 1638              		.cfi_offset 4, -16
 1639              		.cfi_offset 5, -12
 1640              		.cfi_offset 6, -8
 1641              		.cfi_offset 14, -4
 1642 0002 82B0     		sub	sp, sp, #8
 1643              		.cfi_def_cfa_offset 24
 158:src/matrix.c  **** 	decimal64 *src;
 1644              		.loc 1 158 78 view .LVU485
 1645 0004 0446     		mov	r4, r0
 1646 0006 1646     		mov	r6, r2
 162:src/matrix.c  **** 	if (src == NULL)
 1647              		.loc 1 162 8 view .LVU486
 1648 0008 0846     		mov	r0, r1
 1649              	.LVL169:
 162:src/matrix.c  **** 	if (src == NULL)
 1650              		.loc 1 162 8 view .LVU487
 1651 000a 01AA     		add	r2, sp, #4
 1652              	.LVL170:
 162:src/matrix.c  **** 	if (src == NULL)
 1653              		.loc 1 162 8 view .LVU488
 1654 000c 6946     		mov	r1, sp
 1655              	.LVL171:
 162:src/matrix.c  **** 	if (src == NULL)
 1656              		.loc 1 162 8 view .LVU489
 1657 000e FFF7FEFF 		bl	matrix_decomp
 1658              	.LVL172:
 163:src/matrix.c  **** 		return NULL;
 1659              		.loc 1 163 2 is_stmt 1 view .LVU490
 163:src/matrix.c  **** 		return NULL;
 1660              		.loc 1 163 5 is_stmt 0 view .LVU491
 1661 0012 C8B1     		cbz	r0, .L130
 166:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 1662              		.loc 1 166 2 is_stmt 1 view .LVU492
 1663 0014 0546     		mov	r5, r0
 166:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 1664              		.loc 1 166 6 is_stmt 0 view .LVU493
 1665 0016 3046     		mov	r0, r6
 1666              	.LVL173:
 166:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
ARM GAS  /tmp/cc5NzCD8.s 			page 47


 1667              		.loc 1 166 6 view .LVU494
 1668 0018 FFF7FEFF 		bl	dn_to_int
 1669              	.LVL174:
 167:src/matrix.c  **** 		return NULL;
 1670              		.loc 1 167 6 view .LVU495
 1671 001c DDE90023 		ldrd	r2, r3, [sp]
 166:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 1672              		.loc 1 166 6 view .LVU496
 1673 0020 0646     		mov	r6, r0
 1674              	.LVL175:
 167:src/matrix.c  **** 		return NULL;
 1675              		.loc 1 167 2 is_stmt 1 view .LVU497
 167:src/matrix.c  **** 		return NULL;
 1676              		.loc 1 167 6 is_stmt 0 view .LVU498
 1677 0022 0146     		mov	r1, r0
 1678 0024 2046     		mov	r0, r4
 1679              	.LVL176:
 167:src/matrix.c  **** 		return NULL;
 1680              		.loc 1 167 6 view .LVU499
 1681 0026 FFF7FEFF 		bl	matrix_descriptor
 1682              	.LVL177:
 167:src/matrix.c  **** 		return NULL;
 1683              		.loc 1 167 5 view .LVU500
 1684 002a 68B1     		cbz	r0, .L130
 169:src/matrix.c  **** 	return r;
 1685              		.loc 1 169 2 is_stmt 1 view .LVU501
 169:src/matrix.c  **** 	return r;
 1686              		.loc 1 169 8 is_stmt 0 view .LVU502
 1687 002c 3046     		mov	r0, r6
 1688 002e FFF7FEFF 		bl	get_reg_n
 1689              	.LVL178:
 169:src/matrix.c  **** 	return r;
 1690              		.loc 1 169 32 view .LVU503
 1691 0032 DDE90032 		ldrd	r3, r2, [sp]
 1692 0036 02FB03F2 		mul	r2, r2, r3
 169:src/matrix.c  **** 	return r;
 1693              		.loc 1 169 2 view .LVU504
 1694 003a 2946     		mov	r1, r5
 1695 003c D200     		lsls	r2, r2, #3
 1696 003e FFF7FEFF 		bl	xcopy
 1697              	.LVL179:
 170:src/matrix.c  **** }
 1698              		.loc 1 170 2 is_stmt 1 view .LVU505
 170:src/matrix.c  **** }
 1699              		.loc 1 170 9 is_stmt 0 view .LVU506
 1700 0042 2046     		mov	r0, r4
 171:src/matrix.c  **** 
 1701              		.loc 1 171 1 view .LVU507
 1702 0044 02B0     		add	sp, sp, #8
 1703              		.cfi_remember_state
 1704              		.cfi_def_cfa_offset 16
 1705              		@ sp needed
 1706 0046 70BD     		pop	{r4, r5, r6, pc}
 1707              	.LVL180:
 1708              	.L130:
 1709              		.cfi_restore_state
 164:src/matrix.c  **** 
ARM GAS  /tmp/cc5NzCD8.s 			page 48


 1710              		.loc 1 164 10 view .LVU508
 1711 0048 0020     		movs	r0, #0
 171:src/matrix.c  **** 
 1712              		.loc 1 171 1 view .LVU509
 1713 004a 02B0     		add	sp, sp, #8
 1714              		.cfi_def_cfa_offset 16
 1715              		@ sp needed
 1716 004c 70BD     		pop	{r4, r5, r6, pc}
 171:src/matrix.c  **** 
 1717              		.loc 1 171 1 view .LVU510
 1718              		.cfi_endproc
 1719              	.LFE7:
 1721 004e 00BF     		.section	.text.matrix_all,"ax",%progbits
 1722              		.align	1
 1723              		.p2align 2,,3
 1724              		.global	matrix_all
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1728              		.fpu fpv4-sp-d16
 1730              	matrix_all:
 1731              	.LVL181:
 1732              	.LFB9:
 188:src/matrix.c  **** 	int rows, cols, base, up;
 1733              		.loc 1 188 57 is_stmt 1 view -0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 16
 1736              		@ frame_needed = 0, uses_anonymous_args = 0
 189:src/matrix.c  **** 
 1737              		.loc 1 189 2 view .LVU512
 191:src/matrix.c  **** 	if (base < 0)
 1738              		.loc 1 191 2 view .LVU513
 188:src/matrix.c  **** 	int rows, cols, base, up;
 1739              		.loc 1 188 57 is_stmt 0 view .LVU514
 1740 0000 10B5     		push	{r4, lr}
 1741              		.cfi_def_cfa_offset 8
 1742              		.cfi_offset 4, -8
 1743              		.cfi_offset 14, -4
 1744 0002 86B0     		sub	sp, sp, #24
 1745              		.cfi_def_cfa_offset 32
 188:src/matrix.c  **** 	int rows, cols, base, up;
 1746              		.loc 1 188 57 view .LVU515
 1747 0004 0446     		mov	r4, r0
 191:src/matrix.c  **** 	if (base < 0)
 1748              		.loc 1 191 9 view .LVU516
 1749 0006 05AB     		add	r3, sp, #20
 1750 0008 0846     		mov	r0, r1
 1751              	.LVL182:
 191:src/matrix.c  **** 	if (base < 0)
 1752              		.loc 1 191 9 view .LVU517
 1753 000a 04AA     		add	r2, sp, #16
 1754 000c 03A9     		add	r1, sp, #12
 1755              	.LVL183:
 191:src/matrix.c  **** 	if (base < 0)
 1756              		.loc 1 191 9 view .LVU518
 1757 000e FFF7FEFF 		bl	matrix_decompose
 1758              	.LVL184:
ARM GAS  /tmp/cc5NzCD8.s 			page 49


 192:src/matrix.c  **** 		return NULL;
 1759              		.loc 1 192 2 is_stmt 1 view .LVU519
 192:src/matrix.c  **** 		return NULL;
 1760              		.loc 1 192 5 is_stmt 0 view .LVU520
 1761 0012 011E     		subs	r1, r0, #0
 1762 0014 0CDB     		blt	.L137
 194:src/matrix.c  **** }
 1763              		.loc 1 194 2 is_stmt 1 view .LVU521
 194:src/matrix.c  **** }
 1764              		.loc 1 194 42 is_stmt 0 view .LVU522
 1765 0016 DDE90323 		ldrd	r2, r3, [sp, #12]
 194:src/matrix.c  **** }
 1766              		.loc 1 194 9 view .LVU523
 1767 001a 0598     		ldr	r0, [sp, #20]
 1768              	.LVL185:
 194:src/matrix.c  **** }
 1769              		.loc 1 194 9 view .LVU524
 1770 001c 0090     		str	r0, [sp]
 194:src/matrix.c  **** }
 1771              		.loc 1 194 37 view .LVU525
 1772 001e 03FB0212 		mla	r2, r3, r2, r1
 194:src/matrix.c  **** }
 1773              		.loc 1 194 9 view .LVU526
 1774 0022 2046     		mov	r0, r4
 1775 0024 013A     		subs	r2, r2, #1
 1776 0026 0123     		movs	r3, #1
 1777 0028 FFF7FEFF 		bl	matrix_do_loop
 1778              	.LVL186:
 195:src/matrix.c  **** 
 1779              		.loc 1 195 1 view .LVU527
 1780 002c 06B0     		add	sp, sp, #24
 1781              		.cfi_remember_state
 1782              		.cfi_def_cfa_offset 8
 1783              		@ sp needed
 1784 002e 10BD     		pop	{r4, pc}
 1785              	.LVL187:
 1786              	.L137:
 1787              		.cfi_restore_state
 193:src/matrix.c  **** 	return matrix_do_loop(r, base, base+rows*cols-1, 1, up);
 1788              		.loc 1 193 10 view .LVU528
 1789 0030 0020     		movs	r0, #0
 1790              	.LVL188:
 195:src/matrix.c  **** 
 1791              		.loc 1 195 1 view .LVU529
 1792 0032 06B0     		add	sp, sp, #24
 1793              		.cfi_def_cfa_offset 8
 1794              		@ sp needed
 1795 0034 10BD     		pop	{r4, pc}
 195:src/matrix.c  **** 
 1796              		.loc 1 195 1 view .LVU530
 1797              		.cfi_endproc
 1798              	.LFE9:
 1800 0036 00BF     		.section	.text.matrix_diag,"ax",%progbits
 1801              		.align	1
 1802              		.p2align 2,,3
 1803              		.global	matrix_diag
 1804              		.syntax unified
ARM GAS  /tmp/cc5NzCD8.s 			page 50


 1805              		.thumb
 1806              		.thumb_func
 1807              		.fpu fpv4-sp-d16
 1809              	matrix_diag:
 1810              	.LVL189:
 1811              	.LFB10:
 197:src/matrix.c  **** 	int rows, cols, base, up, n;
 1812              		.loc 1 197 58 is_stmt 1 view -0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 16
 1815              		@ frame_needed = 0, uses_anonymous_args = 0
 198:src/matrix.c  **** 
 1816              		.loc 1 198 2 view .LVU532
 200:src/matrix.c  **** 	if (base < 0)
 1817              		.loc 1 200 2 view .LVU533
 197:src/matrix.c  **** 	int rows, cols, base, up, n;
 1818              		.loc 1 197 58 is_stmt 0 view .LVU534
 1819 0000 10B5     		push	{r4, lr}
 1820              		.cfi_def_cfa_offset 8
 1821              		.cfi_offset 4, -8
 1822              		.cfi_offset 14, -4
 1823 0002 86B0     		sub	sp, sp, #24
 1824              		.cfi_def_cfa_offset 32
 197:src/matrix.c  **** 	int rows, cols, base, up, n;
 1825              		.loc 1 197 58 view .LVU535
 1826 0004 0446     		mov	r4, r0
 200:src/matrix.c  **** 	if (base < 0)
 1827              		.loc 1 200 9 view .LVU536
 1828 0006 05AB     		add	r3, sp, #20
 1829 0008 0846     		mov	r0, r1
 1830              	.LVL190:
 200:src/matrix.c  **** 	if (base < 0)
 1831              		.loc 1 200 9 view .LVU537
 1832 000a 04AA     		add	r2, sp, #16
 1833 000c 03A9     		add	r1, sp, #12
 1834              	.LVL191:
 200:src/matrix.c  **** 	if (base < 0)
 1835              		.loc 1 200 9 view .LVU538
 1836 000e FFF7FEFF 		bl	matrix_decompose
 1837              	.LVL192:
 201:src/matrix.c  **** 		return NULL;
 1838              		.loc 1 201 2 is_stmt 1 view .LVU539
 201:src/matrix.c  **** 		return NULL;
 1839              		.loc 1 201 5 is_stmt 0 view .LVU540
 1840 0012 011E     		subs	r1, r0, #0
 1841 0014 10DB     		blt	.L141
 203:src/matrix.c  **** 	cols++;
 1842              		.loc 1 203 2 is_stmt 1 view .LVU541
 203:src/matrix.c  **** 	cols++;
 1843              		.loc 1 203 28 is_stmt 0 view .LVU542
 1844 0016 DDE90323 		ldrd	r2, r3, [sp, #12]
 1845 001a 9A42     		cmp	r2, r3
 1846 001c A8BF     		it	ge
 1847 001e 1A46     		movge	r2, r3
 205:src/matrix.c  **** }
 1848              		.loc 1 205 9 view .LVU543
 1849 0020 0598     		ldr	r0, [sp, #20]
ARM GAS  /tmp/cc5NzCD8.s 			page 51


 1850              	.LVL193:
 205:src/matrix.c  **** }
 1851              		.loc 1 205 9 view .LVU544
 1852 0022 0090     		str	r0, [sp]
 204:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 1853              		.loc 1 204 6 view .LVU545
 1854 0024 0133     		adds	r3, r3, #1
 203:src/matrix.c  **** 	cols++;
 1855              		.loc 1 203 4 view .LVU546
 1856 0026 013A     		subs	r2, r2, #1
 1857              	.LVL194:
 204:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 1858              		.loc 1 204 2 is_stmt 1 view .LVU547
 205:src/matrix.c  **** }
 1859              		.loc 1 205 9 is_stmt 0 view .LVU548
 1860 0028 2046     		mov	r0, r4
 1861 002a 02FB0312 		mla	r2, r2, r3, r1
 1862              	.LVL195:
 204:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 1863              		.loc 1 204 6 view .LVU549
 1864 002e 0493     		str	r3, [sp, #16]
 1865              	.LVL196:
 205:src/matrix.c  **** }
 1866              		.loc 1 205 2 is_stmt 1 view .LVU550
 205:src/matrix.c  **** }
 1867              		.loc 1 205 9 is_stmt 0 view .LVU551
 1868 0030 FFF7FEFF 		bl	matrix_do_loop
 1869              	.LVL197:
 206:src/matrix.c  **** 
 1870              		.loc 1 206 1 view .LVU552
 1871 0034 06B0     		add	sp, sp, #24
 1872              		.cfi_remember_state
 1873              		.cfi_def_cfa_offset 8
 1874              		@ sp needed
 1875 0036 10BD     		pop	{r4, pc}
 1876              	.LVL198:
 1877              	.L141:
 1878              		.cfi_restore_state
 202:src/matrix.c  **** 	n = ((rows < cols) ? rows : cols) - 1;
 1879              		.loc 1 202 10 view .LVU553
 1880 0038 0020     		movs	r0, #0
 1881              	.LVL199:
 206:src/matrix.c  **** 
 1882              		.loc 1 206 1 view .LVU554
 1883 003a 06B0     		add	sp, sp, #24
 1884              		.cfi_def_cfa_offset 8
 1885              		@ sp needed
 1886 003c 10BD     		pop	{r4, pc}
 206:src/matrix.c  **** 
 1887              		.loc 1 206 1 view .LVU555
 1888              		.cfi_endproc
 1889              	.LFE10:
 1891 003e 00BF     		.section	.text.matrix_row,"ax",%progbits
 1892              		.align	1
 1893              		.p2align 2,,3
 1894              		.global	matrix_row
 1895              		.syntax unified
ARM GAS  /tmp/cc5NzCD8.s 			page 52


 1896              		.thumb
 1897              		.thumb_func
 1898              		.fpu fpv4-sp-d16
 1900              	matrix_row:
 1901              	.LVL200:
 1902              	.LFB11:
 208:src/matrix.c  **** 	int rows, cols, base, up, n;
 1903              		.loc 1 208 77 is_stmt 1 view -0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 16
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 209:src/matrix.c  **** 
 1907              		.loc 1 209 2 view .LVU557
 211:src/matrix.c  **** 	if (base < 0)
 1908              		.loc 1 211 2 view .LVU558
 208:src/matrix.c  **** 	int rows, cols, base, up, n;
 1909              		.loc 1 208 77 is_stmt 0 view .LVU559
 1910 0000 70B5     		push	{r4, r5, r6, lr}
 1911              		.cfi_def_cfa_offset 16
 1912              		.cfi_offset 4, -16
 1913              		.cfi_offset 5, -12
 1914              		.cfi_offset 6, -8
 1915              		.cfi_offset 14, -4
 1916 0002 86B0     		sub	sp, sp, #24
 1917              		.cfi_def_cfa_offset 40
 208:src/matrix.c  **** 	int rows, cols, base, up, n;
 1918              		.loc 1 208 77 view .LVU560
 1919 0004 0646     		mov	r6, r0
 1920 0006 0D46     		mov	r5, r1
 211:src/matrix.c  **** 	if (base < 0)
 1921              		.loc 1 211 9 view .LVU561
 1922 0008 1046     		mov	r0, r2
 1923              	.LVL201:
 211:src/matrix.c  **** 	if (base < 0)
 1924              		.loc 1 211 9 view .LVU562
 1925 000a 05AB     		add	r3, sp, #20
 1926 000c 04AA     		add	r2, sp, #16
 1927              	.LVL202:
 211:src/matrix.c  **** 	if (base < 0)
 1928              		.loc 1 211 9 view .LVU563
 1929 000e 03A9     		add	r1, sp, #12
 1930              	.LVL203:
 211:src/matrix.c  **** 	if (base < 0)
 1931              		.loc 1 211 9 view .LVU564
 1932 0010 FFF7FEFF 		bl	matrix_decompose
 1933              	.LVL204:
 212:src/matrix.c  **** 		return NULL;
 1934              		.loc 1 212 2 is_stmt 1 view .LVU565
 212:src/matrix.c  **** 		return NULL;
 1935              		.loc 1 212 5 is_stmt 0 view .LVU566
 1936 0014 041E     		subs	r4, r0, #0
 1937 0016 1ADB     		blt	.L147
 214:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 1938              		.loc 1 214 2 is_stmt 1 view .LVU567
 214:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 1939              		.loc 1 214 6 is_stmt 0 view .LVU568
 1940 0018 2846     		mov	r0, r5
ARM GAS  /tmp/cc5NzCD8.s 			page 53


 1941              	.LVL205:
 214:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 1942              		.loc 1 214 6 view .LVU569
 1943 001a FFF7FEFF 		bl	dn_to_int
 1944              	.LVL206:
 215:src/matrix.c  **** 		report_err(ERR_RANGE);
 1945              		.loc 1 215 2 is_stmt 1 view .LVU570
 215:src/matrix.c  **** 		report_err(ERR_RANGE);
 1946              		.loc 1 215 5 is_stmt 0 view .LVU571
 1947 001e 411E     		subs	r1, r0, #1
 1948              	.LVL207:
 215:src/matrix.c  **** 		report_err(ERR_RANGE);
 1949              		.loc 1 215 5 view .LVU572
 1950 0020 0FD4     		bmi	.L145
 215:src/matrix.c  **** 		report_err(ERR_RANGE);
 1951              		.loc 1 215 12 discriminator 1 view .LVU573
 1952 0022 039B     		ldr	r3, [sp, #12]
 1953 0024 8B42     		cmp	r3, r1
 1954 0026 0CDD     		ble	.L145
 219:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols - 1, 1, up);
 1955              		.loc 1 219 2 is_stmt 1 view .LVU574
 220:src/matrix.c  **** }
 1956              		.loc 1 220 9 is_stmt 0 view .LVU575
 1957 0028 DDE90423 		ldrd	r2, r3, [sp, #16]
 219:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols - 1, 1, up);
 1958              		.loc 1 219 7 view .LVU576
 1959 002c 01FB0241 		mla	r1, r1, r2, r4
 1960              	.LVL208:
 220:src/matrix.c  **** }
 1961              		.loc 1 220 2 is_stmt 1 view .LVU577
 220:src/matrix.c  **** }
 1962              		.loc 1 220 38 is_stmt 0 view .LVU578
 1963 0030 0A44     		add	r2, r2, r1
 220:src/matrix.c  **** }
 1964              		.loc 1 220 9 view .LVU579
 1965 0032 0093     		str	r3, [sp]
 1966 0034 3046     		mov	r0, r6
 1967              	.LVL209:
 220:src/matrix.c  **** }
 1968              		.loc 1 220 9 view .LVU580
 1969 0036 013A     		subs	r2, r2, #1
 1970 0038 0123     		movs	r3, #1
 1971 003a FFF7FEFF 		bl	matrix_do_loop
 1972              	.LVL210:
 221:src/matrix.c  **** 
 1973              		.loc 1 221 1 view .LVU581
 1974 003e 06B0     		add	sp, sp, #24
 1975              		.cfi_remember_state
 1976              		.cfi_def_cfa_offset 16
 1977              		@ sp needed
 1978 0040 70BD     		pop	{r4, r5, r6, pc}
 1979              	.LVL211:
 1980              	.L145:
 1981              		.cfi_restore_state
 216:src/matrix.c  **** 		return NULL;
 1982              		.loc 1 216 3 is_stmt 1 view .LVU582
 1983 0042 0820     		movs	r0, #8
ARM GAS  /tmp/cc5NzCD8.s 			page 54


 1984 0044 FFF7FEFF 		bl	report_err
 1985              	.LVL212:
 217:src/matrix.c  **** 	}
 1986              		.loc 1 217 3 view .LVU583
 217:src/matrix.c  **** 	}
 1987              		.loc 1 217 10 is_stmt 0 view .LVU584
 1988 0048 0020     		movs	r0, #0
 221:src/matrix.c  **** 
 1989              		.loc 1 221 1 view .LVU585
 1990 004a 06B0     		add	sp, sp, #24
 1991              		.cfi_remember_state
 1992              		.cfi_def_cfa_offset 16
 1993              		@ sp needed
 1994 004c 70BD     		pop	{r4, r5, r6, pc}
 1995              	.LVL213:
 1996              	.L147:
 1997              		.cfi_restore_state
 213:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 1998              		.loc 1 213 10 view .LVU586
 1999 004e 0020     		movs	r0, #0
 2000              	.LVL214:
 221:src/matrix.c  **** 
 2001              		.loc 1 221 1 view .LVU587
 2002 0050 06B0     		add	sp, sp, #24
 2003              		.cfi_def_cfa_offset 16
 2004              		@ sp needed
 2005 0052 70BD     		pop	{r4, r5, r6, pc}
 221:src/matrix.c  **** 
 2006              		.loc 1 221 1 view .LVU588
 2007              		.cfi_endproc
 2008              	.LFE11:
 2010              		.section	.text.matrix_col,"ax",%progbits
 2011              		.align	1
 2012              		.p2align 2,,3
 2013              		.global	matrix_col
 2014              		.syntax unified
 2015              		.thumb
 2016              		.thumb_func
 2017              		.fpu fpv4-sp-d16
 2019              	matrix_col:
 2020              	.LVL215:
 2021              	.LFB12:
 223:src/matrix.c  **** 	int rows, cols, base, up, n;
 2022              		.loc 1 223 77 is_stmt 1 view -0
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 16
 2025              		@ frame_needed = 0, uses_anonymous_args = 0
 224:src/matrix.c  **** 
 2026              		.loc 1 224 2 view .LVU590
 226:src/matrix.c  **** 	if (base < 0)
 2027              		.loc 1 226 2 view .LVU591
 223:src/matrix.c  **** 	int rows, cols, base, up, n;
 2028              		.loc 1 223 77 is_stmt 0 view .LVU592
 2029 0000 70B5     		push	{r4, r5, r6, lr}
 2030              		.cfi_def_cfa_offset 16
 2031              		.cfi_offset 4, -16
 2032              		.cfi_offset 5, -12
ARM GAS  /tmp/cc5NzCD8.s 			page 55


 2033              		.cfi_offset 6, -8
 2034              		.cfi_offset 14, -4
 2035 0002 86B0     		sub	sp, sp, #24
 2036              		.cfi_def_cfa_offset 40
 223:src/matrix.c  **** 	int rows, cols, base, up, n;
 2037              		.loc 1 223 77 view .LVU593
 2038 0004 0646     		mov	r6, r0
 2039 0006 0D46     		mov	r5, r1
 226:src/matrix.c  **** 	if (base < 0)
 2040              		.loc 1 226 9 view .LVU594
 2041 0008 1046     		mov	r0, r2
 2042              	.LVL216:
 226:src/matrix.c  **** 	if (base < 0)
 2043              		.loc 1 226 9 view .LVU595
 2044 000a 05AB     		add	r3, sp, #20
 2045 000c 04AA     		add	r2, sp, #16
 2046              	.LVL217:
 226:src/matrix.c  **** 	if (base < 0)
 2047              		.loc 1 226 9 view .LVU596
 2048 000e 03A9     		add	r1, sp, #12
 2049              	.LVL218:
 226:src/matrix.c  **** 	if (base < 0)
 2050              		.loc 1 226 9 view .LVU597
 2051 0010 FFF7FEFF 		bl	matrix_decompose
 2052              	.LVL219:
 227:src/matrix.c  **** 		return NULL;
 2053              		.loc 1 227 2 is_stmt 1 view .LVU598
 227:src/matrix.c  **** 		return NULL;
 2054              		.loc 1 227 5 is_stmt 0 view .LVU599
 2055 0014 041E     		subs	r4, r0, #0
 2056 0016 19DB     		blt	.L153
 229:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 2057              		.loc 1 229 2 is_stmt 1 view .LVU600
 229:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 2058              		.loc 1 229 6 is_stmt 0 view .LVU601
 2059 0018 2846     		mov	r0, r5
 2060              	.LVL220:
 229:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 2061              		.loc 1 229 6 view .LVU602
 2062 001a FFF7FEFF 		bl	dn_to_int
 2063              	.LVL221:
 230:src/matrix.c  **** 		report_err(ERR_RANGE);
 2064              		.loc 1 230 2 is_stmt 1 view .LVU603
 230:src/matrix.c  **** 		report_err(ERR_RANGE);
 2065              		.loc 1 230 5 is_stmt 0 view .LVU604
 2066 001e 411E     		subs	r1, r0, #1
 2067              	.LVL222:
 230:src/matrix.c  **** 		report_err(ERR_RANGE);
 2068              		.loc 1 230 5 view .LVU605
 2069 0020 0ED4     		bmi	.L151
 230:src/matrix.c  **** 		report_err(ERR_RANGE);
 2070              		.loc 1 230 17 discriminator 1 view .LVU606
 2071 0022 049B     		ldr	r3, [sp, #16]
 230:src/matrix.c  **** 		report_err(ERR_RANGE);
 2072              		.loc 1 230 12 discriminator 1 view .LVU607
 2073 0024 8B42     		cmp	r3, r1
 2074 0026 0BDD     		ble	.L151
ARM GAS  /tmp/cc5NzCD8.s 			page 56


 234:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols * (rows-1), cols, up);
 2075              		.loc 1 234 2 is_stmt 1 view .LVU608
 235:src/matrix.c  **** }
 2076              		.loc 1 235 52 is_stmt 0 view .LVU609
 2077 0028 039A     		ldr	r2, [sp, #12]
 235:src/matrix.c  **** }
 2078              		.loc 1 235 9 view .LVU610
 2079 002a 0598     		ldr	r0, [sp, #20]
 2080 002c 0090     		str	r0, [sp]
 234:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols * (rows-1), cols, up);
 2081              		.loc 1 234 7 view .LVU611
 2082 002e 2144     		add	r1, r1, r4
 2083              	.LVL223:
 235:src/matrix.c  **** }
 2084              		.loc 1 235 2 is_stmt 1 view .LVU612
 235:src/matrix.c  **** }
 2085              		.loc 1 235 52 is_stmt 0 view .LVU613
 2086 0030 013A     		subs	r2, r2, #1
 235:src/matrix.c  **** }
 2087              		.loc 1 235 9 view .LVU614
 2088 0032 3046     		mov	r0, r6
 2089 0034 03FB0212 		mla	r2, r3, r2, r1
 2090 0038 FFF7FEFF 		bl	matrix_do_loop
 2091              	.LVL224:
 236:src/matrix.c  **** 
 2092              		.loc 1 236 1 view .LVU615
 2093 003c 06B0     		add	sp, sp, #24
 2094              		.cfi_remember_state
 2095              		.cfi_def_cfa_offset 16
 2096              		@ sp needed
 2097 003e 70BD     		pop	{r4, r5, r6, pc}
 2098              	.LVL225:
 2099              	.L151:
 2100              		.cfi_restore_state
 231:src/matrix.c  **** 		return NULL;
 2101              		.loc 1 231 3 is_stmt 1 view .LVU616
 2102 0040 0820     		movs	r0, #8
 2103 0042 FFF7FEFF 		bl	report_err
 2104              	.LVL226:
 232:src/matrix.c  **** 	}
 2105              		.loc 1 232 3 view .LVU617
 232:src/matrix.c  **** 	}
 2106              		.loc 1 232 10 is_stmt 0 view .LVU618
 2107 0046 0020     		movs	r0, #0
 236:src/matrix.c  **** 
 2108              		.loc 1 236 1 view .LVU619
 2109 0048 06B0     		add	sp, sp, #24
 2110              		.cfi_remember_state
 2111              		.cfi_def_cfa_offset 16
 2112              		@ sp needed
 2113 004a 70BD     		pop	{r4, r5, r6, pc}
 2114              	.LVL227:
 2115              	.L153:
 2116              		.cfi_restore_state
 228:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 2117              		.loc 1 228 10 view .LVU620
 2118 004c 0020     		movs	r0, #0
ARM GAS  /tmp/cc5NzCD8.s 			page 57


 2119              	.LVL228:
 236:src/matrix.c  **** 
 2120              		.loc 1 236 1 view .LVU621
 2121 004e 06B0     		add	sp, sp, #24
 2122              		.cfi_def_cfa_offset 16
 2123              		@ sp needed
 2124 0050 70BD     		pop	{r4, r5, r6, pc}
 236:src/matrix.c  **** 
 2125              		.loc 1 236 1 view .LVU622
 2126              		.cfi_endproc
 2127              	.LFE12:
 2129 0052 00BF     		.section	.text.matrix_rowq,"ax",%progbits
 2130              		.align	1
 2131              		.p2align 2,,3
 2132              		.global	matrix_rowq
 2133              		.syntax unified
 2134              		.thumb
 2135              		.thumb_func
 2136              		.fpu fpv4-sp-d16
 2138              	matrix_rowq:
 2139              	.LVL229:
 2140              	.LFB13:
 238:src/matrix.c  **** 	int rows;
 2141              		.loc 1 238 58 is_stmt 1 view -0
 2142              		.cfi_startproc
 2143              		@ args = 0, pretend = 0, frame = 8
 2144              		@ frame_needed = 0, uses_anonymous_args = 0
 239:src/matrix.c  **** 
 2145              		.loc 1 239 2 view .LVU624
 241:src/matrix.c  **** 		return NULL;
 2146              		.loc 1 241 2 view .LVU625
 238:src/matrix.c  **** 	int rows;
 2147              		.loc 1 238 58 is_stmt 0 view .LVU626
 2148 0000 10B5     		push	{r4, lr}
 2149              		.cfi_def_cfa_offset 8
 2150              		.cfi_offset 4, -8
 2151              		.cfi_offset 14, -4
 241:src/matrix.c  **** 		return NULL;
 2152              		.loc 1 241 6 view .LVU627
 2153 0002 0023     		movs	r3, #0
 238:src/matrix.c  **** 	int rows;
 2154              		.loc 1 238 58 view .LVU628
 2155 0004 82B0     		sub	sp, sp, #8
 2156              		.cfi_def_cfa_offset 16
 238:src/matrix.c  **** 	int rows;
 2157              		.loc 1 238 58 view .LVU629
 2158 0006 0446     		mov	r4, r0
 241:src/matrix.c  **** 		return NULL;
 2159              		.loc 1 241 6 view .LVU630
 2160 0008 1A46     		mov	r2, r3
 2161 000a 0846     		mov	r0, r1
 2162              	.LVL230:
 241:src/matrix.c  **** 		return NULL;
 2163              		.loc 1 241 6 view .LVU631
 2164 000c 01A9     		add	r1, sp, #4
 2165              	.LVL231:
 241:src/matrix.c  **** 		return NULL;
ARM GAS  /tmp/cc5NzCD8.s 			page 58


 2166              		.loc 1 241 6 view .LVU632
 2167 000e FFF7FEFF 		bl	matrix_decompose
 2168              	.LVL232:
 241:src/matrix.c  **** 		return NULL;
 2169              		.loc 1 241 5 view .LVU633
 2170 0012 0028     		cmp	r0, #0
 2171 0014 06DB     		blt	.L157
 243:src/matrix.c  **** 	return r;
 2172              		.loc 1 243 2 is_stmt 1 view .LVU634
 2173 0016 2046     		mov	r0, r4
 2174 0018 0199     		ldr	r1, [sp, #4]
 2175 001a FFF7FEFF 		bl	int_to_dn
 2176              	.LVL233:
 244:src/matrix.c  **** }
 2177              		.loc 1 244 2 view .LVU635
 244:src/matrix.c  **** }
 2178              		.loc 1 244 9 is_stmt 0 view .LVU636
 2179 001e 2046     		mov	r0, r4
 245:src/matrix.c  **** 
 2180              		.loc 1 245 1 view .LVU637
 2181 0020 02B0     		add	sp, sp, #8
 2182              		.cfi_remember_state
 2183              		.cfi_def_cfa_offset 8
 2184              		@ sp needed
 2185 0022 10BD     		pop	{r4, pc}
 2186              	.LVL234:
 2187              	.L157:
 2188              		.cfi_restore_state
 242:src/matrix.c  **** 	int_to_dn(r, rows);
 2189              		.loc 1 242 10 view .LVU638
 2190 0024 0020     		movs	r0, #0
 245:src/matrix.c  **** 
 2191              		.loc 1 245 1 view .LVU639
 2192 0026 02B0     		add	sp, sp, #8
 2193              		.cfi_def_cfa_offset 8
 2194              		@ sp needed
 2195 0028 10BD     		pop	{r4, pc}
 245:src/matrix.c  **** 
 2196              		.loc 1 245 1 view .LVU640
 2197              		.cfi_endproc
 2198              	.LFE13:
 2200 002a 00BF     		.section	.text.matrix_colq,"ax",%progbits
 2201              		.align	1
 2202              		.p2align 2,,3
 2203              		.global	matrix_colq
 2204              		.syntax unified
 2205              		.thumb
 2206              		.thumb_func
 2207              		.fpu fpv4-sp-d16
 2209              	matrix_colq:
 2210              	.LVL235:
 2211              	.LFB14:
 247:src/matrix.c  **** 	int cols;
 2212              		.loc 1 247 58 is_stmt 1 view -0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 8
 2215              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc5NzCD8.s 			page 59


 248:src/matrix.c  **** 
 2216              		.loc 1 248 2 view .LVU642
 250:src/matrix.c  **** 		return NULL;
 2217              		.loc 1 250 2 view .LVU643
 247:src/matrix.c  **** 	int cols;
 2218              		.loc 1 247 58 is_stmt 0 view .LVU644
 2219 0000 10B5     		push	{r4, lr}
 2220              		.cfi_def_cfa_offset 8
 2221              		.cfi_offset 4, -8
 2222              		.cfi_offset 14, -4
 2223 0002 0A46     		mov	r2, r1
 2224 0004 82B0     		sub	sp, sp, #8
 2225              		.cfi_def_cfa_offset 16
 250:src/matrix.c  **** 		return NULL;
 2226              		.loc 1 250 6 view .LVU645
 2227 0006 0023     		movs	r3, #0
 247:src/matrix.c  **** 	int cols;
 2228              		.loc 1 247 58 view .LVU646
 2229 0008 0446     		mov	r4, r0
 250:src/matrix.c  **** 		return NULL;
 2230              		.loc 1 250 6 view .LVU647
 2231 000a 1946     		mov	r1, r3
 2232              	.LVL236:
 250:src/matrix.c  **** 		return NULL;
 2233              		.loc 1 250 6 view .LVU648
 2234 000c 1046     		mov	r0, r2
 2235              	.LVL237:
 250:src/matrix.c  **** 		return NULL;
 2236              		.loc 1 250 6 view .LVU649
 2237 000e 01AA     		add	r2, sp, #4
 2238              	.LVL238:
 250:src/matrix.c  **** 		return NULL;
 2239              		.loc 1 250 6 view .LVU650
 2240 0010 FFF7FEFF 		bl	matrix_decompose
 2241              	.LVL239:
 250:src/matrix.c  **** 		return NULL;
 2242              		.loc 1 250 5 view .LVU651
 2243 0014 0028     		cmp	r0, #0
 2244 0016 06DB     		blt	.L161
 252:src/matrix.c  **** 	return r;
 2245              		.loc 1 252 2 is_stmt 1 view .LVU652
 2246 0018 2046     		mov	r0, r4
 2247 001a 0199     		ldr	r1, [sp, #4]
 2248 001c FFF7FEFF 		bl	int_to_dn
 2249              	.LVL240:
 253:src/matrix.c  **** }
 2250              		.loc 1 253 2 view .LVU653
 253:src/matrix.c  **** }
 2251              		.loc 1 253 9 is_stmt 0 view .LVU654
 2252 0020 2046     		mov	r0, r4
 254:src/matrix.c  **** 
 2253              		.loc 1 254 1 view .LVU655
 2254 0022 02B0     		add	sp, sp, #8
 2255              		.cfi_remember_state
 2256              		.cfi_def_cfa_offset 8
 2257              		@ sp needed
 2258 0024 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cc5NzCD8.s 			page 60


 2259              	.LVL241:
 2260              	.L161:
 2261              		.cfi_restore_state
 251:src/matrix.c  **** 	int_to_dn(r, cols);
 2262              		.loc 1 251 10 view .LVU656
 2263 0026 0020     		movs	r0, #0
 254:src/matrix.c  **** 
 2264              		.loc 1 254 1 view .LVU657
 2265 0028 02B0     		add	sp, sp, #8
 2266              		.cfi_def_cfa_offset 8
 2267              		@ sp needed
 2268 002a 10BD     		pop	{r4, pc}
 254:src/matrix.c  **** 
 2269              		.loc 1 254 1 view .LVU658
 2270              		.cfi_endproc
 2271              	.LFE14:
 2273              		.section	.text.matrix_getreg,"ax",%progbits
 2274              		.align	1
 2275              		.p2align 2,,3
 2276              		.global	matrix_getreg
 2277              		.syntax unified
 2278              		.thumb
 2279              		.thumb_func
 2280              		.fpu fpv4-sp-d16
 2282              	matrix_getreg:
 2283              	.LVL242:
 2284              	.LFB15:
 256:src/matrix.c  **** 	int h, w, ri, ci;
 2285              		.loc 1 256 104 is_stmt 1 view -0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 8
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 257:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 2289              		.loc 1 257 2 view .LVU660
 258:src/matrix.c  **** 
 2290              		.loc 1 258 2 view .LVU661
 256:src/matrix.c  **** 	int h, w, ri, ci;
 2291              		.loc 1 256 104 is_stmt 0 view .LVU662
 2292 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2293              		.cfi_def_cfa_offset 24
 2294              		.cfi_offset 4, -24
 2295              		.cfi_offset 5, -20
 2296              		.cfi_offset 6, -16
 2297              		.cfi_offset 7, -12
 2298              		.cfi_offset 8, -8
 2299              		.cfi_offset 14, -4
 2300 0004 82B0     		sub	sp, sp, #8
 2301              		.cfi_def_cfa_offset 32
 256:src/matrix.c  **** 	int h, w, ri, ci;
 2302              		.loc 1 256 104 view .LVU663
 2303 0006 0446     		mov	r4, r0
 2304 0008 0E46     		mov	r6, r1
 258:src/matrix.c  **** 
 2305              		.loc 1 258 10 view .LVU664
 2306 000a 1846     		mov	r0, r3
 2307              	.LVL243:
 256:src/matrix.c  **** 	int h, w, ri, ci;
ARM GAS  /tmp/cc5NzCD8.s 			page 61


 2308              		.loc 1 256 104 view .LVU665
 2309 000c 1746     		mov	r7, r2
 258:src/matrix.c  **** 
 2310              		.loc 1 258 10 view .LVU666
 2311 000e 0023     		movs	r3, #0
 2312              	.LVL244:
 258:src/matrix.c  **** 
 2313              		.loc 1 258 10 view .LVU667
 2314 0010 01AA     		add	r2, sp, #4
 2315              	.LVL245:
 258:src/matrix.c  **** 
 2316              		.loc 1 258 10 view .LVU668
 2317 0012 6946     		mov	r1, sp
 2318              	.LVL246:
 258:src/matrix.c  **** 
 2319              		.loc 1 258 10 view .LVU669
 2320 0014 FFF7FEFF 		bl	matrix_decompose
 2321              	.LVL247:
 260:src/matrix.c  **** 		return NULL;
 2322              		.loc 1 260 2 is_stmt 1 view .LVU670
 260:src/matrix.c  **** 		return NULL;
 2323              		.loc 1 260 5 is_stmt 0 view .LVU671
 2324 0018 B0F10008 		subs	r8, r0, #0
 2325 001c 24DB     		blt	.L167
 262:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2326              		.loc 1 262 2 is_stmt 1 view .LVU672
 262:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2327              		.loc 1 262 7 is_stmt 0 view .LVU673
 2328 001e 3846     		mov	r0, r7
 2329              	.LVL248:
 262:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2330              		.loc 1 262 7 view .LVU674
 2331 0020 FFF7FEFF 		bl	dn_to_int
 2332              	.LVL249:
 2333 0024 0546     		mov	r5, r0
 263:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 2334              		.loc 1 263 7 view .LVU675
 2335 0026 3046     		mov	r0, r6
 2336 0028 FFF7FEFF 		bl	dn_to_int
 2337              	.LVL250:
 262:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2338              		.loc 1 262 5 view .LVU676
 2339 002c 013D     		subs	r5, r5, #1
 2340              	.LVL251:
 263:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 2341              		.loc 1 263 2 is_stmt 1 view .LVU677
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2342              		.loc 1 264 5 is_stmt 0 view .LVU678
 2343 002e 002D     		cmp	r5, #0
 263:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 2344              		.loc 1 263 5 view .LVU679
 2345 0030 00F1FF30 		add	r0, r0, #-1
 2346              	.LVL252:
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2347              		.loc 1 264 2 is_stmt 1 view .LVU680
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2348              		.loc 1 264 5 is_stmt 0 view .LVU681
ARM GAS  /tmp/cc5NzCD8.s 			page 62


 2349 0034 11DB     		blt	.L165
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2350              		.loc 1 264 13 discriminator 1 view .LVU682
 2351 0036 0028     		cmp	r0, #0
 2352 0038 0FDB     		blt	.L165
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2353              		.loc 1 264 23 discriminator 2 view .LVU683
 2354 003a 009B     		ldr	r3, [sp]
 2355 003c AB42     		cmp	r3, r5
 2356 003e 0CDD     		ble	.L165
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2357              		.loc 1 264 40 discriminator 3 view .LVU684
 2358 0040 0199     		ldr	r1, [sp, #4]
 264:src/matrix.c  **** 		report_err(ERR_RANGE);
 2359              		.loc 1 264 34 discriminator 3 view .LVU685
 2360 0042 8142     		cmp	r1, r0
 2361 0044 09DD     		ble	.L165
 268:src/matrix.c  **** 	int_to_dn(r, n);
 2362              		.loc 1 268 2 is_stmt 1 view .LVU686
 2363              	.LVL253:
 2364              	.LBB139:
 2365              	.LBI139:
  25:src/matrix.c  **** 	return col + row * ncols;
 2366              		.loc 1 25 12 view .LVU687
 2367              	.LBB140:
  26:src/matrix.c  **** }
 2368              		.loc 1 26 2 view .LVU688
  26:src/matrix.c  **** }
 2369              		.loc 1 26 2 is_stmt 0 view .LVU689
 2370              	.LBE140:
 2371              	.LBE139:
 269:src/matrix.c  **** 	return r;
 2372              		.loc 1 269 2 is_stmt 1 view .LVU690
 2373              	.LBB142:
 2374              	.LBB141:
  26:src/matrix.c  **** }
 2375              		.loc 1 26 13 is_stmt 0 view .LVU691
 2376 0046 05FB0101 		mla	r1, r5, r1, r0
 2377              	.LVL254:
  26:src/matrix.c  **** }
 2378              		.loc 1 26 13 view .LVU692
 2379              	.LBE141:
 2380              	.LBE142:
 269:src/matrix.c  **** 	return r;
 2381              		.loc 1 269 2 view .LVU693
 2382 004a 4144     		add	r1, r1, r8
 2383 004c 2046     		mov	r0, r4
 2384              	.LVL255:
 269:src/matrix.c  **** 	return r;
 2385              		.loc 1 269 2 view .LVU694
 2386 004e FFF7FEFF 		bl	int_to_dn
 2387              	.LVL256:
 270:src/matrix.c  **** }
 2388              		.loc 1 270 2 is_stmt 1 view .LVU695
 270:src/matrix.c  **** }
 2389              		.loc 1 270 9 is_stmt 0 view .LVU696
 2390 0052 2046     		mov	r0, r4
ARM GAS  /tmp/cc5NzCD8.s 			page 63


 271:src/matrix.c  **** 
 2391              		.loc 1 271 1 view .LVU697
 2392 0054 02B0     		add	sp, sp, #8
 2393              		.cfi_remember_state
 2394              		.cfi_def_cfa_offset 24
 2395              		@ sp needed
 2396 0056 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2397              	.LVL257:
 2398              	.L165:
 2399              		.cfi_restore_state
 265:src/matrix.c  **** 		return NULL;
 2400              		.loc 1 265 3 is_stmt 1 view .LVU698
 2401 005a 0820     		movs	r0, #8
 2402              	.LVL258:
 265:src/matrix.c  **** 		return NULL;
 2403              		.loc 1 265 3 is_stmt 0 view .LVU699
 2404 005c FFF7FEFF 		bl	report_err
 2405              	.LVL259:
 266:src/matrix.c  **** 	}
 2406              		.loc 1 266 3 is_stmt 1 view .LVU700
 266:src/matrix.c  **** 	}
 2407              		.loc 1 266 10 is_stmt 0 view .LVU701
 2408 0060 0020     		movs	r0, #0
 271:src/matrix.c  **** 
 2409              		.loc 1 271 1 view .LVU702
 2410 0062 02B0     		add	sp, sp, #8
 2411              		.cfi_remember_state
 2412              		.cfi_def_cfa_offset 24
 2413              		@ sp needed
 2414 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2415              	.LVL260:
 2416              	.L167:
 2417              		.cfi_restore_state
 261:src/matrix.c  **** 	ri = dn_to_int(rdn) - 1;
 2418              		.loc 1 261 10 view .LVU703
 2419 0068 0020     		movs	r0, #0
 2420              	.LVL261:
 271:src/matrix.c  **** 
 2421              		.loc 1 271 1 view .LVU704
 2422 006a 02B0     		add	sp, sp, #8
 2423              		.cfi_def_cfa_offset 24
 2424              		@ sp needed
 2425 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 271:src/matrix.c  **** 
 2426              		.loc 1 271 1 view .LVU705
 2427              		.cfi_endproc
 2428              	.LFE15:
 2430              		.section	.text.matrix_getrc,"ax",%progbits
 2431              		.align	1
 2432              		.p2align 2,,3
 2433              		.global	matrix_getrc
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2437              		.fpu fpv4-sp-d16
 2439              	matrix_getrc:
 2440              	.LVL262:
ARM GAS  /tmp/cc5NzCD8.s 			page 64


 2441              	.LFB16:
 273:src/matrix.c  **** 	decNumber ydn;
 2442              		.loc 1 273 61 is_stmt 1 view -0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 48
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 274:src/matrix.c  **** 	int rows, cols, c, r, pos;
 2446              		.loc 1 274 2 view .LVU707
 275:src/matrix.c  **** 	int n = matrix_decompose(m, &rows, &cols, NULL);
 2447              		.loc 1 275 2 view .LVU708
 276:src/matrix.c  **** 
 2448              		.loc 1 276 2 view .LVU709
 273:src/matrix.c  **** 	decNumber ydn;
 2449              		.loc 1 273 61 is_stmt 0 view .LVU710
 2450 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2451              		.cfi_def_cfa_offset 20
 2452              		.cfi_offset 4, -20
 2453              		.cfi_offset 5, -16
 2454              		.cfi_offset 6, -12
 2455              		.cfi_offset 7, -8
 2456              		.cfi_offset 14, -4
 2457 0002 8DB0     		sub	sp, sp, #52
 2458              		.cfi_def_cfa_offset 72
 273:src/matrix.c  **** 	decNumber ydn;
 2459              		.loc 1 273 61 view .LVU711
 2460 0004 0446     		mov	r4, r0
 276:src/matrix.c  **** 
 2461              		.loc 1 276 10 view .LVU712
 2462 0006 0023     		movs	r3, #0
 2463 0008 0846     		mov	r0, r1
 2464              	.LVL263:
 276:src/matrix.c  **** 
 2465              		.loc 1 276 10 view .LVU713
 2466 000a 02AA     		add	r2, sp, #8
 2467 000c 01A9     		add	r1, sp, #4
 2468              	.LVL264:
 276:src/matrix.c  **** 
 2469              		.loc 1 276 10 view .LVU714
 2470 000e FFF7FEFF 		bl	matrix_decompose
 2471              	.LVL265:
 278:src/matrix.c  **** 		return NULL;
 2472              		.loc 1 278 2 is_stmt 1 view .LVU715
 278:src/matrix.c  **** 		return NULL;
 2473              		.loc 1 278 5 is_stmt 0 view .LVU716
 2474 0012 051E     		subs	r5, r0, #0
 2475 0014 25DB     		blt	.L173
 280:src/matrix.c  **** 	pos = dn_to_int(&ydn);
 2476              		.loc 1 280 2 is_stmt 1 view .LVU717
 2477 0016 03A8     		add	r0, sp, #12
 2478              	.LVL266:
 280:src/matrix.c  **** 	pos = dn_to_int(&ydn);
 2479              		.loc 1 280 2 is_stmt 0 view .LVU718
 2480 0018 FFF7FEFF 		bl	getY
 2481              	.LVL267:
 281:src/matrix.c  **** 	pos -= n;
 2482              		.loc 1 281 2 is_stmt 1 view .LVU719
 281:src/matrix.c  **** 	pos -= n;
ARM GAS  /tmp/cc5NzCD8.s 			page 65


 2483              		.loc 1 281 8 is_stmt 0 view .LVU720
 2484 001c 03A8     		add	r0, sp, #12
 2485 001e FFF7FEFF 		bl	dn_to_int
 2486              	.LVL268:
 282:src/matrix.c  **** 	if (pos < 0 || pos >= rows*cols) {
 2487              		.loc 1 282 2 is_stmt 1 view .LVU721
 283:src/matrix.c  **** 		report_err(ERR_RANGE);
 2488              		.loc 1 283 2 view .LVU722
 283:src/matrix.c  **** 		report_err(ERR_RANGE);
 2489              		.loc 1 283 5 is_stmt 0 view .LVU723
 2490 0022 451B     		subs	r5, r0, r5
 2491              	.LVL269:
 283:src/matrix.c  **** 		report_err(ERR_RANGE);
 2492              		.loc 1 283 5 view .LVU724
 2493 0024 17D4     		bmi	.L171
 283:src/matrix.c  **** 		report_err(ERR_RANGE);
 2494              		.loc 1 283 28 discriminator 1 view .LVU725
 2495 0026 DDE90137 		ldrd	r3, r7, [sp, #4]
 2496 002a 03FB07F3 		mul	r3, r3, r7
 283:src/matrix.c  **** 		report_err(ERR_RANGE);
 2497              		.loc 1 283 14 discriminator 1 view .LVU726
 2498 002e AB42     		cmp	r3, r5
 2499 0030 11DD     		ble	.L171
 287:src/matrix.c  **** 	r = pos / cols + 1;
 2500              		.loc 1 287 2 is_stmt 1 view .LVU727
 2501              	.LVL270:
 288:src/matrix.c  **** 	int_to_dn(res, r);
 2502              		.loc 1 288 2 view .LVU728
 289:src/matrix.c  **** 	int_to_dn(&ydn, c);
 2503              		.loc 1 289 2 view .LVU729
 288:src/matrix.c  **** 	int_to_dn(res, r);
 2504              		.loc 1 288 10 is_stmt 0 view .LVU730
 2505 0032 95FBF7F6 		sdiv	r6, r5, r7
 289:src/matrix.c  **** 	int_to_dn(&ydn, c);
 2506              		.loc 1 289 2 view .LVU731
 2507 0036 2046     		mov	r0, r4
 2508 0038 711C     		adds	r1, r6, #1
 2509              	.LVL271:
 287:src/matrix.c  **** 	r = pos / cols + 1;
 2510              		.loc 1 287 10 view .LVU732
 2511 003a 07FB1655 		mls	r5, r7, r6, r5
 2512              	.LVL272:
 289:src/matrix.c  **** 	int_to_dn(&ydn, c);
 2513              		.loc 1 289 2 view .LVU733
 2514 003e FFF7FEFF 		bl	int_to_dn
 2515              	.LVL273:
 290:src/matrix.c  **** 	setY(&ydn);
 2516              		.loc 1 290 2 is_stmt 1 view .LVU734
 2517 0042 691C     		adds	r1, r5, #1
 2518 0044 03A8     		add	r0, sp, #12
 2519 0046 FFF7FEFF 		bl	int_to_dn
 2520              	.LVL274:
 291:src/matrix.c  **** 	return res;
 2521              		.loc 1 291 2 view .LVU735
 2522 004a 03A8     		add	r0, sp, #12
 2523 004c FFF7FEFF 		bl	setY
 2524              	.LVL275:
ARM GAS  /tmp/cc5NzCD8.s 			page 66


 292:src/matrix.c  **** }
 2525              		.loc 1 292 2 view .LVU736
 292:src/matrix.c  **** }
 2526              		.loc 1 292 9 is_stmt 0 view .LVU737
 2527 0050 2046     		mov	r0, r4
 293:src/matrix.c  **** 
 2528              		.loc 1 293 1 view .LVU738
 2529 0052 0DB0     		add	sp, sp, #52
 2530              		.cfi_remember_state
 2531              		.cfi_def_cfa_offset 20
 2532              		@ sp needed
 2533 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 2534              	.LVL276:
 2535              	.L171:
 2536              		.cfi_restore_state
 284:src/matrix.c  **** 		return NULL;
 2537              		.loc 1 284 3 is_stmt 1 view .LVU739
 2538 0056 0820     		movs	r0, #8
 2539 0058 FFF7FEFF 		bl	report_err
 2540              	.LVL277:
 285:src/matrix.c  **** 	}
 2541              		.loc 1 285 3 view .LVU740
 285:src/matrix.c  **** 	}
 2542              		.loc 1 285 10 is_stmt 0 view .LVU741
 2543 005c 0020     		movs	r0, #0
 293:src/matrix.c  **** 
 2544              		.loc 1 293 1 view .LVU742
 2545 005e 0DB0     		add	sp, sp, #52
 2546              		.cfi_remember_state
 2547              		.cfi_def_cfa_offset 20
 2548              		@ sp needed
 2549 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 2550              	.LVL278:
 2551              	.L173:
 2552              		.cfi_restore_state
 279:src/matrix.c  **** 	getY(&ydn);
 2553              		.loc 1 279 10 view .LVU743
 2554 0062 0020     		movs	r0, #0
 2555              	.LVL279:
 293:src/matrix.c  **** 
 2556              		.loc 1 293 1 view .LVU744
 2557 0064 0DB0     		add	sp, sp, #52
 2558              		.cfi_def_cfa_offset 20
 2559              		@ sp needed
 2560 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 293:src/matrix.c  **** 
 2561              		.loc 1 293 1 view .LVU745
 2562              		.cfi_endproc
 2563              	.LFE16:
 2565              		.section	.text.matrix_genadd,"ax",%progbits
 2566              		.align	1
 2567              		.p2align 2,,3
 2568              		.global	matrix_genadd
 2569              		.syntax unified
 2570              		.thumb
 2571              		.thumb_func
 2572              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc5NzCD8.s 			page 67


 2574              	matrix_genadd:
 2575              	.LVL280:
 2576              	.LFB17:
 296:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2577              		.loc 1 296 100 is_stmt 1 view -0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 128
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 297:src/matrix.c  **** 	decNumber s, t, u;
 2581              		.loc 1 297 2 view .LVU747
 298:src/matrix.c  **** 	int i;
 2582              		.loc 1 298 2 view .LVU748
 299:src/matrix.c  **** 
 2583              		.loc 1 299 2 view .LVU749
 301:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2584              		.loc 1 301 2 view .LVU750
 296:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2585              		.loc 1 296 100 is_stmt 0 view .LVU751
 2586 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2587              		.cfi_def_cfa_offset 28
 2588              		.cfi_offset 4, -28
 2589              		.cfi_offset 5, -24
 2590              		.cfi_offset 6, -20
 2591              		.cfi_offset 7, -16
 2592              		.cfi_offset 8, -12
 2593              		.cfi_offset 9, -8
 2594              		.cfi_offset 14, -4
 2595 0004 A1B0     		sub	sp, sp, #132
 2596              		.cfi_def_cfa_offset 160
 296:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2597              		.loc 1 296 100 view .LVU752
 2598 0006 1546     		mov	r5, r2
 2599 0008 8046     		mov	r8, r0
 301:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2600              		.loc 1 301 21 view .LVU753
 2601 000a 02AA     		add	r2, sp, #8
 2602              	.LVL281:
 296:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2603              		.loc 1 296 100 view .LVU754
 2604 000c 0E46     		mov	r6, r1
 301:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2605              		.loc 1 301 21 view .LVU755
 2606 000e 1846     		mov	r0, r3
 2607              	.LVL282:
 301:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2608              		.loc 1 301 21 view .LVU756
 2609 0010 01A9     		add	r1, sp, #4
 2610              	.LVL283:
 296:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2611              		.loc 1 296 100 view .LVU757
 2612 0012 1F46     		mov	r7, r3
 301:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2613              		.loc 1 301 21 view .LVU758
 2614 0014 FFF7FEFF 		bl	matrix_decomp
 2615              	.LVL284:
 302:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2616              		.loc 1 302 21 view .LVU759
ARM GAS  /tmp/cc5NzCD8.s 			page 68


 2617 0018 04AA     		add	r2, sp, #16
 301:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2618              		.loc 1 301 21 view .LVU760
 2619 001a 0446     		mov	r4, r0
 302:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2620              		.loc 1 302 21 view .LVU761
 2621 001c 03A9     		add	r1, sp, #12
 2622              	.LVL285:
 302:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2623              		.loc 1 302 2 is_stmt 1 view .LVU762
 302:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2624              		.loc 1 302 21 is_stmt 0 view .LVU763
 2625 001e 2846     		mov	r0, r5
 2626              	.LVL286:
 302:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2627              		.loc 1 302 21 view .LVU764
 2628 0020 FFF7FEFF 		bl	matrix_decomp
 2629              	.LVL287:
 303:src/matrix.c  **** 		return NULL;
 2630              		.loc 1 303 2 is_stmt 1 view .LVU765
 303:src/matrix.c  **** 		return NULL;
 2631              		.loc 1 303 5 is_stmt 0 view .LVU766
 2632 0024 002C     		cmp	r4, #0
 2633 0026 38D0     		beq	.L175
 2634 0028 0546     		mov	r5, r0
 2635              	.LVL288:
 303:src/matrix.c  **** 		return NULL;
 2636              		.loc 1 303 20 discriminator 1 view .LVU767
 2637 002a 0028     		cmp	r0, #0
 2638 002c 41D0     		beq	.L181
 305:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2639              		.loc 1 305 2 is_stmt 1 view .LVU768
 305:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2640              		.loc 1 305 12 is_stmt 0 view .LVU769
 2641 002e 019A     		ldr	r2, [sp, #4]
 305:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2642              		.loc 1 305 5 view .LVU770
 2643 0030 039B     		ldr	r3, [sp, #12]
 2644 0032 9A42     		cmp	r2, r3
 2645 0034 35D1     		bne	.L177
 305:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2646              		.loc 1 305 30 discriminator 1 view .LVU771
 2647 0036 029B     		ldr	r3, [sp, #8]
 305:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2648              		.loc 1 305 21 discriminator 1 view .LVU772
 2649 0038 0499     		ldr	r1, [sp, #16]
 2650 003a 8B42     		cmp	r3, r1
 2651 003c 31D1     		bne	.L177
 2652              	.LVL289:
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2653              		.loc 1 309 12 is_stmt 1 view .LVU773
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2654              		.loc 1 309 19 is_stmt 0 view .LVU774
 2655 003e 03FB02F3 		mul	r3, r3, r2
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2656              		.loc 1 309 2 view .LVU775
 2657 0042 002B     		cmp	r3, #0
ARM GAS  /tmp/cc5NzCD8.s 			page 69


 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2658              		.loc 1 309 8 view .LVU776
 2659 0044 C8BF     		it	gt
 2660 0046 4FF00009 		movgt	r9, #0
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2661              		.loc 1 309 2 view .LVU777
 2662 004a 21DD     		ble	.L179
 2663              	.LVL290:
 2664              	.L180:
 310:src/matrix.c  **** 		dn_multiply(&t, &s, k);
 2665              		.loc 1 310 3 is_stmt 1 discriminator 3 view .LVU778
 2666 004c 05A9     		add	r1, sp, #20
 2667 004e 2846     		mov	r0, r5
 2668 0050 FFF7FEFF 		bl	decimal64ToNumber
 2669              	.LVL291:
 311:src/matrix.c  **** 		decimal64ToNumber(abase + i, &s);
 2670              		.loc 1 311 3 discriminator 3 view .LVU779
 2671 0054 3246     		mov	r2, r6
 2672 0056 05A9     		add	r1, sp, #20
 2673 0058 0EA8     		add	r0, sp, #56
 2674 005a FFF7FEFF 		bl	dn_multiply
 2675              	.LVL292:
 312:src/matrix.c  **** 		dn_add(&u, &t, &s);
 2676              		.loc 1 312 3 discriminator 3 view .LVU780
 2677 005e 05A9     		add	r1, sp, #20
 2678 0060 2046     		mov	r0, r4
 2679 0062 FFF7FEFF 		bl	decimal64ToNumber
 2680              	.LVL293:
 313:src/matrix.c  **** 		packed_from_number(abase + i, &u);
 2681              		.loc 1 313 3 discriminator 3 view .LVU781
 2682 0066 05AA     		add	r2, sp, #20
 2683 0068 0EA9     		add	r1, sp, #56
 2684 006a 17A8     		add	r0, sp, #92
 2685 006c FFF7FEFF 		bl	dn_add
 2686              	.LVL294:
 314:src/matrix.c  **** 	}
 2687              		.loc 1 314 3 discriminator 3 view .LVU782
 2688 0070 2046     		mov	r0, r4
 2689 0072 17A9     		add	r1, sp, #92
 2690 0074 FFF7FEFF 		bl	packed_from_number
 2691              	.LVL295:
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2692              		.loc 1 309 27 discriminator 3 view .LVU783
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2693              		.loc 1 309 19 is_stmt 0 discriminator 3 view .LVU784
 2694 0078 DDE90132 		ldrd	r3, r2, [sp, #4]
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2695              		.loc 1 309 28 discriminator 3 view .LVU785
 2696 007c 09F10109 		add	r9, r9, #1
 2697              	.LVL296:
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2698              		.loc 1 309 12 is_stmt 1 discriminator 3 view .LVU786
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2699              		.loc 1 309 19 is_stmt 0 discriminator 3 view .LVU787
 2700 0080 02FB03F2 		mul	r2, r2, r3
 309:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2701              		.loc 1 309 2 discriminator 3 view .LVU788
ARM GAS  /tmp/cc5NzCD8.s 			page 70


 2702 0084 4A45     		cmp	r2, r9
 2703 0086 05F10805 		add	r5, r5, #8
 2704 008a 04F10804 		add	r4, r4, #8
 2705 008e DDDC     		bgt	.L180
 2706              	.LVL297:
 2707              	.L179:
 316:src/matrix.c  **** }
 2708              		.loc 1 316 2 is_stmt 1 view .LVU789
 316:src/matrix.c  **** }
 2709              		.loc 1 316 9 is_stmt 0 view .LVU790
 2710 0090 3946     		mov	r1, r7
 2711 0092 4046     		mov	r0, r8
 2712 0094 FFF7FEFF 		bl	decNumberCopy
 2713              	.LVL298:
 2714 0098 0446     		mov	r4, r0
 2715              	.L175:
 317:src/matrix.c  **** 
 2716              		.loc 1 317 1 view .LVU791
 2717 009a 2046     		mov	r0, r4
 2718 009c 21B0     		add	sp, sp, #132
 2719              		.cfi_remember_state
 2720              		.cfi_def_cfa_offset 28
 2721              		@ sp needed
 2722 009e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2723              	.LVL299:
 2724              	.L177:
 2725              		.cfi_restore_state
 306:src/matrix.c  **** 		return NULL;
 2726              		.loc 1 306 3 is_stmt 1 view .LVU792
 2727 00a2 1520     		movs	r0, #21
 2728              	.LVL300:
 306:src/matrix.c  **** 		return NULL;
 2729              		.loc 1 306 3 is_stmt 0 view .LVU793
 2730 00a4 FFF7FEFF 		bl	report_err
 2731              	.LVL301:
 307:src/matrix.c  **** 	}
 2732              		.loc 1 307 3 is_stmt 1 view .LVU794
 307:src/matrix.c  **** 	}
 2733              		.loc 1 307 10 is_stmt 0 view .LVU795
 2734 00a8 0024     		movs	r4, #0
 2735              	.LVL302:
 317:src/matrix.c  **** 
 2736              		.loc 1 317 1 view .LVU796
 2737 00aa 2046     		mov	r0, r4
 2738 00ac 21B0     		add	sp, sp, #132
 2739              		.cfi_remember_state
 2740              		.cfi_def_cfa_offset 28
 2741              		@ sp needed
 2742 00ae BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2743              	.LVL303:
 2744              	.L181:
 2745              		.cfi_restore_state
 304:src/matrix.c  **** 	if (arows != brows || acols != bcols) {
 2746              		.loc 1 304 10 view .LVU797
 2747 00b2 0446     		mov	r4, r0
 2748              	.LVL304:
 304:src/matrix.c  **** 	if (arows != brows || acols != bcols) {
ARM GAS  /tmp/cc5NzCD8.s 			page 71


 2749              		.loc 1 304 10 view .LVU798
 2750 00b4 F1E7     		b	.L175
 2751              		.cfi_endproc
 2752              	.LFE17:
 2754 00b6 00BF     		.section	.text.matrix_multiply,"ax",%progbits
 2755              		.align	1
 2756              		.p2align 2,,3
 2757              		.global	matrix_multiply
 2758              		.syntax unified
 2759              		.thumb
 2760              		.thumb_func
 2761              		.fpu fpv4-sp-d16
 2763              	matrix_multiply:
 2764              	.LVL305:
 2765              	.LFB18:
 321:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2766              		.loc 1 321 102 is_stmt 1 view -0
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 968
 2769              		@ frame_needed = 0, uses_anonymous_args = 0
 322:src/matrix.c  **** 	decNumber sum, s, t, u;
 2770              		.loc 1 322 2 view .LVU800
 323:src/matrix.c  **** 	int creg;
 2771              		.loc 1 323 2 view .LVU801
 324:src/matrix.c  **** 	int i, j, k;
 2772              		.loc 1 324 2 view .LVU802
 325:src/matrix.c  **** 	decimal64 result[MAX_DIMENSION];
 2773              		.loc 1 325 2 view .LVU803
 326:src/matrix.c  **** 	decimal64 *rp = result;
 2774              		.loc 1 326 2 view .LVU804
 327:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2775              		.loc 1 327 2 view .LVU805
 321:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2776              		.loc 1 321 102 is_stmt 0 view .LVU806
 2777 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2778              		.cfi_def_cfa_offset 36
 2779              		.cfi_offset 4, -36
 2780              		.cfi_offset 5, -32
 2781              		.cfi_offset 6, -28
 2782              		.cfi_offset 7, -24
 2783              		.cfi_offset 8, -20
 2784              		.cfi_offset 9, -16
 2785              		.cfi_offset 10, -12
 2786              		.cfi_offset 11, -8
 2787              		.cfi_offset 14, -4
 2788 0004 ADF5737D 		sub	sp, sp, #972
 2789              		.cfi_def_cfa_offset 1008
 2790              	.LVL306:
 328:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2791              		.loc 1 328 2 is_stmt 1 view .LVU807
 321:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2792              		.loc 1 321 102 is_stmt 0 view .LVU808
 2793 0008 1446     		mov	r4, r2
 2794 000a 8146     		mov	r9, r0
 328:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2795              		.loc 1 328 21 view .LVU809
 2796 000c 03AA     		add	r2, sp, #12
ARM GAS  /tmp/cc5NzCD8.s 			page 72


 2797              	.LVL307:
 328:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2798              		.loc 1 328 21 view .LVU810
 2799 000e 0846     		mov	r0, r1
 2800              	.LVL308:
 328:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2801              		.loc 1 328 21 view .LVU811
 2802 0010 02A9     		add	r1, sp, #8
 2803              	.LVL309:
 321:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2804              		.loc 1 321 102 view .LVU812
 2805 0012 1D46     		mov	r5, r3
 328:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2806              		.loc 1 328 21 view .LVU813
 2807 0014 FFF7FEFF 		bl	matrix_decomp
 2808              	.LVL310:
 329:src/matrix.c  **** 
 2809              		.loc 1 329 21 view .LVU814
 2810 0018 05AA     		add	r2, sp, #20
 328:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2811              		.loc 1 328 21 view .LVU815
 2812 001a 0646     		mov	r6, r0
 329:src/matrix.c  **** 
 2813              		.loc 1 329 21 view .LVU816
 2814 001c 04A9     		add	r1, sp, #16
 2815              	.LVL311:
 329:src/matrix.c  **** 
 2816              		.loc 1 329 2 is_stmt 1 view .LVU817
 329:src/matrix.c  **** 
 2817              		.loc 1 329 21 is_stmt 0 view .LVU818
 2818 001e 2046     		mov	r0, r4
 2819              	.LVL312:
 329:src/matrix.c  **** 
 2820              		.loc 1 329 21 view .LVU819
 2821 0020 FFF7FEFF 		bl	matrix_decomp
 2822              	.LVL313:
 331:src/matrix.c  **** 		return NULL;
 2823              		.loc 1 331 2 is_stmt 1 view .LVU820
 331:src/matrix.c  **** 		return NULL;
 2824              		.loc 1 331 5 is_stmt 0 view .LVU821
 2825 0024 002E     		cmp	r6, #0
 2826 0026 67D0     		beq	.L209
 2827 0028 0746     		mov	r7, r0
 331:src/matrix.c  **** 		return NULL;
 2828              		.loc 1 331 20 discriminator 1 view .LVU822
 2829 002a 0028     		cmp	r0, #0
 2830 002c 64D0     		beq	.L209
 333:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2831              		.loc 1 333 2 is_stmt 1 view .LVU823
 333:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2832              		.loc 1 333 5 is_stmt 0 view .LVU824
 2833 002e DDE90323 		ldrd	r2, r3, [sp, #12]
 2834 0032 9A42     		cmp	r2, r3
 2835 0034 5DD1     		bne	.L210
 337:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2836              		.loc 1 337 2 is_stmt 1 view .LVU825
 337:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
ARM GAS  /tmp/cc5NzCD8.s 			page 73


 2837              		.loc 1 337 9 is_stmt 0 view .LVU826
 2838 0036 2846     		mov	r0, r5
 2839              	.LVL314:
 337:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2840              		.loc 1 337 9 view .LVU827
 2841 0038 FFF7FEFF 		bl	dn_to_int
 2842              	.LVL315:
 338:src/matrix.c  **** 		return NULL;
 2843              		.loc 1 338 6 view .LVU828
 2844 003c 059B     		ldr	r3, [sp, #20]
 2845 003e 029A     		ldr	r2, [sp, #8]
 337:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2846              		.loc 1 337 9 view .LVU829
 2847 0040 8246     		mov	r10, r0
 2848              	.LVL316:
 338:src/matrix.c  **** 		return NULL;
 2849              		.loc 1 338 2 is_stmt 1 view .LVU830
 338:src/matrix.c  **** 		return NULL;
 2850              		.loc 1 338 6 is_stmt 0 view .LVU831
 2851 0042 0146     		mov	r1, r0
 2852 0044 4846     		mov	r0, r9
 2853              	.LVL317:
 338:src/matrix.c  **** 		return NULL;
 2854              		.loc 1 338 6 view .LVU832
 2855 0046 FFF7FEFF 		bl	matrix_descriptor
 2856              	.LVL318:
 338:src/matrix.c  **** 		return NULL;
 2857              		.loc 1 338 5 view .LVU833
 2858 004a 0028     		cmp	r0, #0
 2859 004c 54D0     		beq	.L209
 341:src/matrix.c  **** 	for (i=0; i<arows; i++)
 2860              		.loc 1 341 9 is_stmt 1 view .LVU834
 2861 004e FFF7FEFF 		bl	busy
 2862              	.LVL319:
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2863              		.loc 1 342 2 view .LVU835
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2864              		.loc 1 342 12 view .LVU836
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2865              		.loc 1 342 2 is_stmt 0 view .LVU837
 2866 0052 029B     		ldr	r3, [sp, #8]
 2867 0054 002B     		cmp	r3, #0
 327:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2868              		.loc 1 327 13 view .LVU838
 2869 0056 2AAB     		add	r3, sp, #168
 2870              	.LVL320:
 327:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2871              		.loc 1 327 13 view .LVU839
 2872 0058 0193     		str	r3, [sp, #4]
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2873              		.loc 1 342 2 view .LVU840
 2874 005a 3ADD     		ble	.L193
 327:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2875              		.loc 1 327 13 view .LVU841
 2876 005c 9846     		mov	r8, r3
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2877              		.loc 1 342 8 view .LVU842
ARM GAS  /tmp/cc5NzCD8.s 			page 74


 2878 005e 0025     		movs	r5, #0
 2879              	.LVL321:
 2880              	.L192:
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2881              		.loc 1 343 13 is_stmt 1 view .LVU843
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2882              		.loc 1 343 3 is_stmt 0 view .LVU844
 2883 0060 059B     		ldr	r3, [sp, #20]
 2884 0062 002B     		cmp	r3, #0
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2885              		.loc 1 343 9 view .LVU845
 2886 0064 C8BF     		it	gt
 2887 0066 0024     		movgt	r4, #0
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2888              		.loc 1 343 3 view .LVU846
 2889 0068 2FDD     		ble	.L197
 2890              	.LVL322:
 2891              	.L196:
 344:src/matrix.c  **** 			for (k=0; k<acols; k++) {
 2892              		.loc 1 344 4 is_stmt 1 view .LVU847
 2893 006a 06A8     		add	r0, sp, #24
 2894 006c FFF7FEFF 		bl	decNumberZero
 2895              	.LVL323:
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2896              		.loc 1 345 4 view .LVU848
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2897              		.loc 1 345 14 view .LVU849
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2898              		.loc 1 345 15 is_stmt 0 view .LVU850
 2899 0070 0398     		ldr	r0, [sp, #12]
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2900              		.loc 1 345 4 view .LVU851
 2901 0072 0028     		cmp	r0, #0
 2902 0074 1FDD     		ble	.L194
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2903              		.loc 1 345 10 view .LVU852
 2904 0076 4FF0000B 		mov	fp, #0
 2905              	.LVL324:
 2906              	.L195:
 346:src/matrix.c  **** 				matrix_get(&t, bbase, k, j, bcols);
 2907              		.loc 1 346 5 is_stmt 1 discriminator 3 view .LVU853
 2908              	.LBB143:
 2909              	.LBI143:
  29:src/matrix.c  **** 	decimal64ToNumber(base + matrix_idx(row, col, ncols), r);
 2910              		.loc 1 29 13 discriminator 3 view .LVU854
 2911              	.LBB144:
  30:src/matrix.c  **** }
 2912              		.loc 1 30 2 discriminator 3 view .LVU855
 2913              	.LBB145:
 2914              	.LBI145:
  25:src/matrix.c  **** 	return col + row * ncols;
 2915              		.loc 1 25 12 discriminator 3 view .LVU856
 2916              	.LBB146:
  26:src/matrix.c  **** }
 2917              		.loc 1 26 2 discriminator 3 view .LVU857
  26:src/matrix.c  **** }
 2918              		.loc 1 26 13 is_stmt 0 discriminator 3 view .LVU858
ARM GAS  /tmp/cc5NzCD8.s 			page 75


 2919 007a 05FB00B0 		mla	r0, r5, r0, fp
 2920              	.LVL325:
  26:src/matrix.c  **** }
 2921              		.loc 1 26 13 discriminator 3 view .LVU859
 2922              	.LBE146:
 2923              	.LBE145:
  30:src/matrix.c  **** }
 2924              		.loc 1 30 2 discriminator 3 view .LVU860
 2925 007e 0FA9     		add	r1, sp, #60
 2926              	.LVL326:
  30:src/matrix.c  **** }
 2927              		.loc 1 30 2 discriminator 3 view .LVU861
 2928 0080 06EBC000 		add	r0, r6, r0, lsl #3
 2929 0084 FFF7FEFF 		bl	decimal64ToNumber
 2930              	.LVL327:
  30:src/matrix.c  **** }
 2931              		.loc 1 30 2 discriminator 3 view .LVU862
 2932              	.LBE144:
 2933              	.LBE143:
 347:src/matrix.c  **** 				dn_multiply(&u, &s, &t);
 2934              		.loc 1 347 5 is_stmt 1 discriminator 3 view .LVU863
 2935              	.LBB147:
 2936              	.LBI147:
  29:src/matrix.c  **** 	decimal64ToNumber(base + matrix_idx(row, col, ncols), r);
 2937              		.loc 1 29 13 discriminator 3 view .LVU864
 2938              	.LBB148:
  30:src/matrix.c  **** }
 2939              		.loc 1 30 2 discriminator 3 view .LVU865
 2940              	.LBB149:
 2941              	.LBI149:
  25:src/matrix.c  **** 	return col + row * ncols;
 2942              		.loc 1 25 12 discriminator 3 view .LVU866
 2943              	.LBB150:
  26:src/matrix.c  **** }
 2944              		.loc 1 26 2 discriminator 3 view .LVU867
  26:src/matrix.c  **** }
 2945              		.loc 1 26 19 is_stmt 0 discriminator 3 view .LVU868
 2946 0088 0598     		ldr	r0, [sp, #20]
  26:src/matrix.c  **** }
 2947              		.loc 1 26 13 discriminator 3 view .LVU869
 2948 008a 00FB0B40 		mla	r0, r0, fp, r4
 2949              	.LBE150:
 2950              	.LBE149:
  30:src/matrix.c  **** }
 2951              		.loc 1 30 2 discriminator 3 view .LVU870
 2952 008e 18A9     		add	r1, sp, #96
 2953              	.LVL328:
  30:src/matrix.c  **** }
 2954              		.loc 1 30 2 discriminator 3 view .LVU871
 2955 0090 07EBC000 		add	r0, r7, r0, lsl #3
 2956 0094 FFF7FEFF 		bl	decimal64ToNumber
 2957              	.LVL329:
  30:src/matrix.c  **** }
 2958              		.loc 1 30 2 discriminator 3 view .LVU872
 2959              	.LBE148:
 2960              	.LBE147:
 348:src/matrix.c  **** 				dn_add(&sum, &sum, &u);
ARM GAS  /tmp/cc5NzCD8.s 			page 76


 2961              		.loc 1 348 5 is_stmt 1 discriminator 3 view .LVU873
 2962 0098 18AA     		add	r2, sp, #96
 2963 009a 0FA9     		add	r1, sp, #60
 2964 009c 21A8     		add	r0, sp, #132
 2965 009e FFF7FEFF 		bl	dn_multiply
 2966              	.LVL330:
 349:src/matrix.c  **** 			}
 2967              		.loc 1 349 5 discriminator 3 view .LVU874
 2968 00a2 06A9     		add	r1, sp, #24
 2969 00a4 21AA     		add	r2, sp, #132
 2970 00a6 0846     		mov	r0, r1
 2971 00a8 FFF7FEFF 		bl	dn_add
 2972              	.LVL331:
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2973              		.loc 1 345 23 discriminator 3 view .LVU875
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2974              		.loc 1 345 15 is_stmt 0 discriminator 3 view .LVU876
 2975 00ac 0398     		ldr	r0, [sp, #12]
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2976              		.loc 1 345 24 discriminator 3 view .LVU877
 2977 00ae 0BF1010B 		add	fp, fp, #1
 2978              	.LVL332:
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2979              		.loc 1 345 14 is_stmt 1 discriminator 3 view .LVU878
 345:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2980              		.loc 1 345 4 is_stmt 0 discriminator 3 view .LVU879
 2981 00b2 5845     		cmp	r0, fp
 2982 00b4 E1DC     		bgt	.L195
 2983              	.LVL333:
 2984              	.L194:
 351:src/matrix.c  **** 		}
 2985              		.loc 1 351 4 is_stmt 1 view .LVU880
 2986 00b6 4046     		mov	r0, r8
 2987 00b8 06A9     		add	r1, sp, #24
 2988 00ba FFF7FEFF 		bl	packed_from_number
 2989              	.LVL334:
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2990              		.loc 1 343 3 is_stmt 0 view .LVU881
 2991 00be 059B     		ldr	r3, [sp, #20]
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2992              		.loc 1 343 23 view .LVU882
 2993 00c0 0134     		adds	r4, r4, #1
 2994              	.LVL335:
 343:src/matrix.c  **** 			decNumberZero(&sum);
 2995              		.loc 1 343 3 view .LVU883
 2996 00c2 A342     		cmp	r3, r4
 351:src/matrix.c  **** 		}
 2997              		.loc 1 351 4 view .LVU884
 2998 00c4 08F10808 		add	r8, r8, #8
 2999              	.LVL336:
 343:src/matrix.c  **** 			decNumberZero(&sum);
 3000              		.loc 1 343 22 is_stmt 1 view .LVU885
 343:src/matrix.c  **** 			decNumberZero(&sum);
 3001              		.loc 1 343 13 view .LVU886
 343:src/matrix.c  **** 			decNumberZero(&sum);
 3002              		.loc 1 343 3 is_stmt 0 view .LVU887
 3003 00c8 CFDC     		bgt	.L196
ARM GAS  /tmp/cc5NzCD8.s 			page 77


 3004              	.LVL337:
 3005              	.L197:
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3006              		.loc 1 342 21 is_stmt 1 discriminator 2 view .LVU888
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3007              		.loc 1 342 2 is_stmt 0 discriminator 2 view .LVU889
 3008 00ca 029B     		ldr	r3, [sp, #8]
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3009              		.loc 1 342 22 discriminator 2 view .LVU890
 3010 00cc 0135     		adds	r5, r5, #1
 3011              	.LVL338:
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3012              		.loc 1 342 12 is_stmt 1 discriminator 2 view .LVU891
 342:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3013              		.loc 1 342 2 is_stmt 0 discriminator 2 view .LVU892
 3014 00ce AB42     		cmp	r3, r5
 3015 00d0 C6DC     		bgt	.L192
 3016              	.LVL339:
 3017              	.L193:
 353:src/matrix.c  **** 	return r;
 3018              		.loc 1 353 2 is_stmt 1 view .LVU893
 353:src/matrix.c  **** 	return r;
 3019              		.loc 1 353 8 is_stmt 0 view .LVU894
 3020 00d2 5046     		mov	r0, r10
 3021 00d4 FFF7FEFF 		bl	get_reg_n
 3022              	.LVL340:
 353:src/matrix.c  **** 	return r;
 3023              		.loc 1 353 59 view .LVU895
 3024 00d8 029B     		ldr	r3, [sp, #8]
 3025 00da 059A     		ldr	r2, [sp, #20]
 353:src/matrix.c  **** 	return r;
 3026              		.loc 1 353 2 view .LVU896
 3027 00dc 0199     		ldr	r1, [sp, #4]
 353:src/matrix.c  **** 	return r;
 3028              		.loc 1 353 59 view .LVU897
 3029 00de 02FB03F2 		mul	r2, r2, r3
 353:src/matrix.c  **** 	return r;
 3030              		.loc 1 353 2 view .LVU898
 3031 00e2 D200     		lsls	r2, r2, #3
 3032 00e4 FFF7FEFF 		bl	xcopy
 3033              	.LVL341:
 354:src/matrix.c  **** }
 3034              		.loc 1 354 2 is_stmt 1 view .LVU899
 354:src/matrix.c  **** }
 3035              		.loc 1 354 9 is_stmt 0 view .LVU900
 3036 00e8 4846     		mov	r0, r9
 355:src/matrix.c  **** 
 3037              		.loc 1 355 1 view .LVU901
 3038 00ea 0DF5737D 		add	sp, sp, #972
 3039              		.cfi_remember_state
 3040              		.cfi_def_cfa_offset 36
 3041              		@ sp needed
 3042 00ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3043              	.LVL342:
 3044              	.L210:
 3045              		.cfi_restore_state
 334:src/matrix.c  **** 		return NULL;
ARM GAS  /tmp/cc5NzCD8.s 			page 78


 3046              		.loc 1 334 3 is_stmt 1 view .LVU902
 3047 00f2 1520     		movs	r0, #21
 3048              	.LVL343:
 334:src/matrix.c  **** 		return NULL;
 3049              		.loc 1 334 3 is_stmt 0 view .LVU903
 3050 00f4 FFF7FEFF 		bl	report_err
 3051              	.LVL344:
 3052              	.L209:
 335:src/matrix.c  **** 	}
 3053              		.loc 1 335 3 is_stmt 1 view .LVU904
 335:src/matrix.c  **** 	}
 3054              		.loc 1 335 10 is_stmt 0 view .LVU905
 3055 00f8 0020     		movs	r0, #0
 355:src/matrix.c  **** 
 3056              		.loc 1 355 1 view .LVU906
 3057 00fa 0DF5737D 		add	sp, sp, #972
 3058              		.cfi_def_cfa_offset 36
 3059              		@ sp needed
 3060 00fe BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 355:src/matrix.c  **** 
 3061              		.loc 1 355 1 view .LVU907
 3062              		.cfi_endproc
 3063              	.LFE18:
 3065 0102 00BF     		.section	.text.matrix_transpose,"ax",%progbits
 3066              		.align	1
 3067              		.p2align 2,,3
 3068              		.global	matrix_transpose
 3069              		.syntax unified
 3070              		.thumb
 3071              		.thumb_func
 3072              		.fpu fpv4-sp-d16
 3074              	matrix_transpose:
 3075              	.LVL345:
 3076              	.LFB19:
 358:src/matrix.c  **** 	int w, h, start, next, i;
 3077              		.loc 1 358 63 is_stmt 1 view -0
 3078              		.cfi_startproc
 3079              		@ args = 0, pretend = 0, frame = 16
 3080              		@ frame_needed = 0, uses_anonymous_args = 0
 359:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 3081              		.loc 1 359 2 view .LVU909
 360:src/matrix.c  **** 	decimal64 *base, tmp;
 3082              		.loc 1 360 2 view .LVU910
 358:src/matrix.c  **** 	int w, h, start, next, i;
 3083              		.loc 1 358 63 is_stmt 0 view .LVU911
 3084 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3085              		.cfi_def_cfa_offset 24
 3086              		.cfi_offset 4, -24
 3087              		.cfi_offset 5, -20
 3088              		.cfi_offset 6, -16
 3089              		.cfi_offset 7, -12
 3090              		.cfi_offset 8, -8
 3091              		.cfi_offset 14, -4
 3092 0004 84B0     		sub	sp, sp, #16
 3093              		.cfi_def_cfa_offset 40
 358:src/matrix.c  **** 	int w, h, start, next, i;
 3094              		.loc 1 358 63 view .LVU912
ARM GAS  /tmp/cc5NzCD8.s 			page 79


 3095 0006 0646     		mov	r6, r0
 360:src/matrix.c  **** 	decimal64 *base, tmp;
 3096              		.loc 1 360 10 view .LVU913
 3097 0008 0023     		movs	r3, #0
 3098 000a 0846     		mov	r0, r1
 3099              	.LVL346:
 360:src/matrix.c  **** 	decimal64 *base, tmp;
 3100              		.loc 1 360 10 view .LVU914
 3101 000c 6A46     		mov	r2, sp
 3102 000e 01A9     		add	r1, sp, #4
 3103              	.LVL347:
 360:src/matrix.c  **** 	decimal64 *base, tmp;
 3104              		.loc 1 360 10 view .LVU915
 3105 0010 FFF7FEFF 		bl	matrix_decompose
 3106              	.LVL348:
 361:src/matrix.c  **** 
 3107              		.loc 1 361 2 is_stmt 1 view .LVU916
 363:src/matrix.c  **** 		return NULL;
 3108              		.loc 1 363 2 view .LVU917
 363:src/matrix.c  **** 		return NULL;
 3109              		.loc 1 363 5 is_stmt 0 view .LVU918
 3110 0014 071E     		subs	r7, r0, #0
 3111 0016 4CDB     		blt	.L214
 365:src/matrix.c  **** 	if (base == NULL)
 3112              		.loc 1 365 2 is_stmt 1 view .LVU919
 365:src/matrix.c  **** 	if (base == NULL)
 3113              		.loc 1 365 11 is_stmt 0 view .LVU920
 3114 0018 FFF7FEFF 		bl	get_reg_n
 3115              	.LVL349:
 366:src/matrix.c  **** 		return NULL;
 3116              		.loc 1 366 2 is_stmt 1 view .LVU921
 366:src/matrix.c  **** 		return NULL;
 3117              		.loc 1 366 5 is_stmt 0 view .LVU922
 3118 001c 8646     		mov	lr, r0
 3119 001e 0028     		cmp	r0, #0
 3120 0020 47D0     		beq	.L214
 3121              	.LVL350:
 369:src/matrix.c  **** 		next = start;
 3122              		.loc 1 369 16 is_stmt 1 view .LVU923
 369:src/matrix.c  **** 		next = start;
 3123              		.loc 1 369 25 is_stmt 0 view .LVU924
 3124 0022 DDE90023 		ldrd	r2, r3, [sp]
 3125 0026 03FB02F1 		mul	r1, r3, r2
 369:src/matrix.c  **** 		next = start;
 3126              		.loc 1 369 2 view .LVU925
 3127 002a 0029     		cmp	r1, #0
 3128 002c 39DD     		ble	.L215
 369:src/matrix.c  **** 		next = start;
 3129              		.loc 1 369 12 view .LVU926
 3130 002e 4FF0000C 		mov	ip, #0
 379:src/matrix.c  **** 		do {
 3131              		.loc 1 379 7 view .LVU927
 3132 0032 0DF10808 		add	r8, sp, #8
 3133              	.LVL351:
 3134              	.L222:
 369:src/matrix.c  **** 		next = start;
 3135              		.loc 1 369 12 view .LVU928
ARM GAS  /tmp/cc5NzCD8.s 			page 80


 3136 0036 6146     		mov	r1, ip
 371:src/matrix.c  **** 		do {
 3137              		.loc 1 371 4 view .LVU929
 3138 0038 0025     		movs	r5, #0
 3139              	.L216:
 3140              	.LVL352:
 372:src/matrix.c  **** 			i++;
 3141              		.loc 1 372 3 is_stmt 1 discriminator 1 view .LVU930
 373:src/matrix.c  **** 			next = (next % h) * w + next / h;
 3142              		.loc 1 373 4 discriminator 1 view .LVU931
 374:src/matrix.c  **** 		} while (next > start);
 3143              		.loc 1 374 17 is_stmt 0 discriminator 1 view .LVU932
 3144 003a 91FBF3F4 		sdiv	r4, r1, r3
 3145 003e 03FB1411 		mls	r1, r3, r4, r1
 3146              	.LVL353:
 374:src/matrix.c  **** 		} while (next > start);
 3147              		.loc 1 374 9 discriminator 1 view .LVU933
 3148 0042 02FB0141 		mla	r1, r2, r1, r4
 375:src/matrix.c  **** 		if (next < start || i == 1)
 3149              		.loc 1 375 3 discriminator 1 view .LVU934
 3150 0046 6145     		cmp	r1, ip
 373:src/matrix.c  **** 			next = (next % h) * w + next / h;
 3151              		.loc 1 373 5 discriminator 1 view .LVU935
 3152 0048 05F10105 		add	r5, r5, #1
 3153              	.LVL354:
 374:src/matrix.c  **** 		} while (next > start);
 3154              		.loc 1 374 4 is_stmt 1 discriminator 1 view .LVU936
 375:src/matrix.c  **** 		if (next < start || i == 1)
 3155              		.loc 1 375 11 discriminator 1 view .LVU937
 375:src/matrix.c  **** 		if (next < start || i == 1)
 3156              		.loc 1 375 3 is_stmt 0 discriminator 1 view .LVU938
 3157 004c F5DC     		bgt	.L216
 3158              	.LVL355:
 376:src/matrix.c  **** 			continue;
 3159              		.loc 1 376 3 is_stmt 1 view .LVU939
 376:src/matrix.c  **** 			continue;
 3160              		.loc 1 376 6 is_stmt 0 view .LVU940
 3161 004e 22DB     		blt	.L218
 376:src/matrix.c  **** 			continue;
 3162              		.loc 1 376 20 discriminator 1 view .LVU941
 3163 0050 012D     		cmp	r5, #1
 3164 0052 20D0     		beq	.L218
 379:src/matrix.c  **** 		do {
 3165              		.loc 1 379 3 is_stmt 1 view .LVU942
 3166              	.LVL356:
 379:src/matrix.c  **** 		do {
 3167              		.loc 1 379 7 is_stmt 0 view .LVU943
 3168 0054 0EEBCC01 		add	r1, lr, ip, lsl #3
 3169 0058 03C9     		ldm	r1, {r0, r1}
 3170 005a 6446     		mov	r4, ip
 3171 005c 88E80300 		stm	r8, {r0, r1}
 3172 0060 06E0     		b	.L221
 3173              	.LVL357:
 3174              	.L233:
 382:src/matrix.c  **** 			next = i;
 3175              		.loc 1 382 15 discriminator 1 view .LVU944
 3176 0062 92E80300 		ldm	r2, {r0, r1}
ARM GAS  /tmp/cc5NzCD8.s 			page 81


 3177              	.LVL358:
 382:src/matrix.c  **** 			next = i;
 3178              		.loc 1 382 15 discriminator 1 view .LVU945
 3179 0066 83E80300 		stm	r3, {r0, r1}
 383:src/matrix.c  **** 		} while (next > start);
 3180              		.loc 1 383 4 is_stmt 1 discriminator 1 view .LVU946
 3181              	.LVL359:
 384:src/matrix.c  **** 	}
 3182              		.loc 1 384 11 discriminator 1 view .LVU947
 3183 006a DDE90023 		ldrd	r2, r3, [sp]
 384:src/matrix.c  **** 	}
 3184              		.loc 1 384 3 is_stmt 0 discriminator 1 view .LVU948
 3185 006e 12DD     		ble	.L218
 3186              	.LVL360:
 3187              	.L221:
 380:src/matrix.c  **** 			i = (next % h) * w + next / h;
 3188              		.loc 1 380 3 is_stmt 1 view .LVU949
 381:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 3189              		.loc 1 381 4 view .LVU950
 381:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 3190              		.loc 1 381 14 is_stmt 0 view .LVU951
 3191 0070 94FBF3F0 		sdiv	r0, r4, r3
 3192 0074 03FB1043 		mls	r3, r3, r0, r4
 3193 0078 2146     		mov	r1, r4
 381:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 3194              		.loc 1 381 6 view .LVU952
 3195 007a 02FB0304 		mla	r4, r2, r3, r0
 3196              	.LVL361:
 382:src/matrix.c  **** 			next = i;
 3197              		.loc 1 382 4 is_stmt 1 view .LVU953
 382:src/matrix.c  **** 			next = i;
 3198              		.loc 1 382 15 is_stmt 0 view .LVU954
 3199 007e 6445     		cmp	r4, ip
 3200 0080 0EEBC402 		add	r2, lr, r4, lsl #3
 382:src/matrix.c  **** 			next = i;
 3201              		.loc 1 382 8 view .LVU955
 3202 0084 0EEBC103 		add	r3, lr, r1, lsl #3
 382:src/matrix.c  **** 			next = i;
 3203              		.loc 1 382 15 view .LVU956
 3204 0088 EBD1     		bne	.L233
 382:src/matrix.c  **** 			next = i;
 3205              		.loc 1 382 15 discriminator 2 view .LVU957
 3206 008a 98E80300 		ldm	r8, {r0, r1}
 3207              	.LVL362:
 382:src/matrix.c  **** 			next = i;
 3208              		.loc 1 382 15 discriminator 2 view .LVU958
 3209 008e 83E80300 		stm	r3, {r0, r1}
 383:src/matrix.c  **** 		} while (next > start);
 3210              		.loc 1 383 4 is_stmt 1 discriminator 2 view .LVU959
 3211              	.LVL363:
 384:src/matrix.c  **** 	}
 3212              		.loc 1 384 11 discriminator 2 view .LVU960
 3213 0092 DDE90023 		ldrd	r2, r3, [sp]
 3214              	.LVL364:
 3215              	.L218:
 369:src/matrix.c  **** 		next = start;
 3216              		.loc 1 369 29 discriminator 2 view .LVU961
ARM GAS  /tmp/cc5NzCD8.s 			page 82


 369:src/matrix.c  **** 		next = start;
 3217              		.loc 1 369 34 is_stmt 0 discriminator 2 view .LVU962
 3218 0096 0CF1010C 		add	ip, ip, #1
 3219              	.LVL365:
 369:src/matrix.c  **** 		next = start;
 3220              		.loc 1 369 16 is_stmt 1 discriminator 2 view .LVU963
 369:src/matrix.c  **** 		next = start;
 3221              		.loc 1 369 25 is_stmt 0 discriminator 2 view .LVU964
 3222 009a 03FB02F1 		mul	r1, r3, r2
 369:src/matrix.c  **** 		next = start;
 3223              		.loc 1 369 2 discriminator 2 view .LVU965
 3224 009e 6145     		cmp	r1, ip
 3225 00a0 C9DC     		bgt	.L222
 3226              	.LVL366:
 3227              	.L215:
 387:src/matrix.c  **** 	return r;
 3228              		.loc 1 387 2 is_stmt 1 view .LVU966
 3229 00a2 3946     		mov	r1, r7
 3230 00a4 3046     		mov	r0, r6
 3231 00a6 FFF7FEFF 		bl	matrix_descriptor
 3232              	.LVL367:
 388:src/matrix.c  **** }
 3233              		.loc 1 388 2 view .LVU967
 388:src/matrix.c  **** }
 3234              		.loc 1 388 9 is_stmt 0 view .LVU968
 3235 00aa 3046     		mov	r0, r6
 389:src/matrix.c  **** 
 3236              		.loc 1 389 1 view .LVU969
 3237 00ac 04B0     		add	sp, sp, #16
 3238              		.cfi_remember_state
 3239              		.cfi_def_cfa_offset 24
 3240              		@ sp needed
 3241 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3242              	.LVL368:
 3243              	.L214:
 3244              		.cfi_restore_state
 364:src/matrix.c  **** 	base = &(get_reg_n(n)->s);
 3245              		.loc 1 364 10 view .LVU970
 3246 00b2 0020     		movs	r0, #0
 389:src/matrix.c  **** 
 3247              		.loc 1 389 1 view .LVU971
 3248 00b4 04B0     		add	sp, sp, #16
 3249              		.cfi_def_cfa_offset 24
 3250              		@ sp needed
 3251 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 389:src/matrix.c  **** 
 3252              		.loc 1 389 1 view .LVU972
 3253              		.cfi_endproc
 3254              	.LFE19:
 3256 00ba 00BF     		.section	.text.matrix_rowops,"ax",%progbits
 3257              		.align	1
 3258              		.p2align 2,,3
 3259              		.global	matrix_rowops
 3260              		.syntax unified
 3261              		.thumb
 3262              		.thumb_func
 3263              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc5NzCD8.s 			page 83


 3265              	matrix_rowops:
 3266              	.LVL369:
 3267              	.LFB20:
 392:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 3268              		.loc 1 392 35 is_stmt 1 view -0
 3269              		.cfi_startproc
 3270              		@ args = 0, pretend = 0, frame = 152
 3271              		@ frame_needed = 0, uses_anonymous_args = 0
 393:src/matrix.c  **** 	decimal64 *base, *r1, *r2;
 3272              		.loc 1 393 2 view .LVU974
 394:src/matrix.c  **** 	int rows, cols;
 3273              		.loc 1 394 2 view .LVU975
 395:src/matrix.c  **** 	int i;
 3274              		.loc 1 395 2 view .LVU976
 396:src/matrix.c  **** 
 3275              		.loc 1 396 2 view .LVU977
 398:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3276              		.loc 1 398 2 view .LVU978
 392:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 3277              		.loc 1 392 35 is_stmt 0 view .LVU979
 3278 0000 70B5     		push	{r4, r5, r6, lr}
 3279              		.cfi_def_cfa_offset 16
 3280              		.cfi_offset 4, -16
 3281              		.cfi_offset 5, -12
 3282              		.cfi_offset 6, -8
 3283              		.cfi_offset 14, -4
 3284 0002 A6B0     		sub	sp, sp, #152
 3285              		.cfi_def_cfa_offset 168
 398:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3286              		.loc 1 398 2 view .LVU980
 3287 0004 14AA     		add	r2, sp, #80
 3288 0006 0BA9     		add	r1, sp, #44
 392:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 3289              		.loc 1 392 35 view .LVU981
 3290 0008 0646     		mov	r6, r0
 398:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3291              		.loc 1 398 2 view .LVU982
 3292 000a 1DAB     		add	r3, sp, #116
 3293 000c 02A8     		add	r0, sp, #8
 3294              	.LVL370:
 398:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3295              		.loc 1 398 2 view .LVU983
 3296 000e FFF7FEFF 		bl	getXYZT
 3297              	.LVL371:
 399:src/matrix.c  **** 	if (base == NULL)
 3298              		.loc 1 399 2 is_stmt 1 view .LVU984
 399:src/matrix.c  **** 	if (base == NULL)
 3299              		.loc 1 399 9 is_stmt 0 view .LVU985
 3300 0012 02A8     		add	r0, sp, #8
 3301 0014 01AA     		add	r2, sp, #4
 3302 0016 6946     		mov	r1, sp
 3303 0018 FFF7FEFF 		bl	matrix_decomp
 3304              	.LVL372:
 400:src/matrix.c  **** 		return;
 3305              		.loc 1 400 2 is_stmt 1 view .LVU986
 400:src/matrix.c  **** 		return;
 3306              		.loc 1 400 5 is_stmt 0 view .LVU987
ARM GAS  /tmp/cc5NzCD8.s 			page 84


 3307 001c 28B3     		cbz	r0, .L234
 403:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 3308              		.loc 1 403 2 is_stmt 1 view .LVU988
 3309 001e 0546     		mov	r5, r0
 403:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 3310              		.loc 1 403 6 is_stmt 0 view .LVU989
 3311 0020 0BA8     		add	r0, sp, #44
 3312              	.LVL373:
 403:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 3313              		.loc 1 403 6 view .LVU990
 3314 0022 FFF7FEFF 		bl	dn_to_int
 3315              	.LVL374:
 404:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3316              		.loc 1 404 2 is_stmt 1 view .LVU991
 404:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3317              		.loc 1 404 5 is_stmt 0 view .LVU992
 3318 0026 441E     		subs	r4, r0, #1
 3319              	.LVL375:
 404:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3320              		.loc 1 404 5 view .LVU993
 3321 0028 21D4     		bmi	.L238
 404:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3322              		.loc 1 404 12 discriminator 1 view .LVU994
 3323 002a 009B     		ldr	r3, [sp]
 3324 002c A342     		cmp	r3, r4
 3325 002e 1EDD     		ble	.L238
 408:src/matrix.c  **** 
 3326              		.loc 1 408 2 is_stmt 1 view .LVU995
 408:src/matrix.c  **** 
 3327              		.loc 1 408 16 is_stmt 0 view .LVU996
 3328 0030 019B     		ldr	r3, [sp, #4]
 410:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 3329              		.loc 1 410 5 view .LVU997
 3330 0032 A42E     		cmp	r6, #164
 408:src/matrix.c  **** 
 3331              		.loc 1 408 16 view .LVU998
 3332 0034 04FB03F4 		mul	r4, r4, r3
 3333              	.LVL376:
 408:src/matrix.c  **** 
 3334              		.loc 1 408 5 view .LVU999
 3335 0038 05EBC404 		add	r4, r5, r4, lsl #3
 3336              	.LVL377:
 410:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 3337              		.loc 1 410 2 is_stmt 1 view .LVU1000
 410:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 3338              		.loc 1 410 5 is_stmt 0 view .LVU1001
 3339 003c 1CD1     		bne	.L239
 3340              	.LVL378:
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3341              		.loc 1 411 13 is_stmt 1 view .LVU1002
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3342              		.loc 1 411 3 is_stmt 0 view .LVU1003
 3343 003e 002B     		cmp	r3, #0
 3344 0040 13DD     		ble	.L234
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3345              		.loc 1 411 9 view .LVU1004
 3346 0042 0025     		movs	r5, #0
ARM GAS  /tmp/cc5NzCD8.s 			page 85


 3347              	.LVL379:
 3348              	.L240:
 412:src/matrix.c  **** 			dn_multiply(&m, &zdn, &t);
 3349              		.loc 1 412 4 is_stmt 1 discriminator 3 view .LVU1005
 3350 0044 1DA9     		add	r1, sp, #116
 3351 0046 2046     		mov	r0, r4
 3352 0048 FFF7FEFF 		bl	decimal64ToNumber
 3353              	.LVL380:
 413:src/matrix.c  **** 			packed_from_number(r1++, &m);
 3354              		.loc 1 413 4 discriminator 3 view .LVU1006
 3355 004c 1DAA     		add	r2, sp, #116
 3356 004e 14A9     		add	r1, sp, #80
 3357 0050 02A8     		add	r0, sp, #8
 3358 0052 FFF7FEFF 		bl	dn_multiply
 3359              	.LVL381:
 414:src/matrix.c  **** 		}
 3360              		.loc 1 414 4 discriminator 3 view .LVU1007
 3361 0056 2046     		mov	r0, r4
 3362 0058 02A9     		add	r1, sp, #8
 3363 005a FFF7FEFF 		bl	packed_from_number
 3364              	.LVL382:
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3365              		.loc 1 411 3 is_stmt 0 discriminator 3 view .LVU1008
 3366 005e 019B     		ldr	r3, [sp, #4]
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3367              		.loc 1 411 22 discriminator 3 view .LVU1009
 3368 0060 0135     		adds	r5, r5, #1
 3369              	.LVL383:
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3370              		.loc 1 411 3 discriminator 3 view .LVU1010
 3371 0062 AB42     		cmp	r3, r5
 414:src/matrix.c  **** 		}
 3372              		.loc 1 414 4 discriminator 3 view .LVU1011
 3373 0064 04F10804 		add	r4, r4, #8
 3374              	.LVL384:
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3375              		.loc 1 411 21 is_stmt 1 discriminator 3 view .LVU1012
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3376              		.loc 1 411 13 discriminator 3 view .LVU1013
 411:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3377              		.loc 1 411 3 is_stmt 0 discriminator 3 view .LVU1014
 3378 0068 ECDC     		bgt	.L240
 3379              	.LVL385:
 3380              	.L234:
 435:src/matrix.c  **** #endif
 3381              		.loc 1 435 1 view .LVU1015
 3382 006a 26B0     		add	sp, sp, #152
 3383              		.cfi_remember_state
 3384              		.cfi_def_cfa_offset 16
 3385              		@ sp needed
 3386 006c 70BD     		pop	{r4, r5, r6, pc}
 3387              	.LVL386:
 3388              	.L238:
 3389              		.cfi_restore_state
 3390              	.LDL1:
 405:src/matrix.c  **** 		return;
 3391              		.loc 1 405 10 is_stmt 1 view .LVU1016
ARM GAS  /tmp/cc5NzCD8.s 			page 86


 3392 006e 0820     		movs	r0, #8
 3393 0070 FFF7FEFF 		bl	report_err
 3394              	.LVL387:
 406:src/matrix.c  **** 	}
 3395              		.loc 1 406 3 view .LVU1017
 435:src/matrix.c  **** #endif
 3396              		.loc 1 435 1 is_stmt 0 view .LVU1018
 3397 0074 26B0     		add	sp, sp, #152
 3398              		.cfi_remember_state
 3399              		.cfi_def_cfa_offset 16
 3400              		@ sp needed
 3401 0076 70BD     		pop	{r4, r5, r6, pc}
 3402              	.LVL388:
 3403              	.L239:
 3404              		.cfi_restore_state
 417:src/matrix.c  **** 		if (i < 0 || i >= rows)
 3405              		.loc 1 417 3 is_stmt 1 view .LVU1019
 417:src/matrix.c  **** 		if (i < 0 || i >= rows)
 3406              		.loc 1 417 7 is_stmt 0 view .LVU1020
 3407 0078 14A8     		add	r0, sp, #80
 3408              	.LVL389:
 417:src/matrix.c  **** 		if (i < 0 || i >= rows)
 3409              		.loc 1 417 7 view .LVU1021
 3410 007a FFF7FEFF 		bl	dn_to_int
 3411              	.LVL390:
 418:src/matrix.c  **** 			goto badrow;
 3412              		.loc 1 418 3 is_stmt 1 view .LVU1022
 418:src/matrix.c  **** 			goto badrow;
 3413              		.loc 1 418 6 is_stmt 0 view .LVU1023
 3414 007e 0138     		subs	r0, r0, #1
 3415              	.LVL391:
 418:src/matrix.c  **** 			goto badrow;
 3416              		.loc 1 418 6 view .LVU1024
 3417 0080 F5D4     		bmi	.L238
 418:src/matrix.c  **** 			goto badrow;
 3418              		.loc 1 418 13 discriminator 1 view .LVU1025
 3419 0082 009B     		ldr	r3, [sp]
 3420 0084 8342     		cmp	r3, r0
 3421 0086 F2DD     		ble	.L238
 420:src/matrix.c  **** 
 3422              		.loc 1 420 3 is_stmt 1 view .LVU1026
 420:src/matrix.c  **** 
 3423              		.loc 1 420 17 is_stmt 0 view .LVU1027
 3424 0088 019B     		ldr	r3, [sp, #4]
 422:src/matrix.c  **** 			for (i=0; i<cols; i++)
 3425              		.loc 1 422 6 view .LVU1028
 3426 008a A32E     		cmp	r6, #163
 420:src/matrix.c  **** 
 3427              		.loc 1 420 17 view .LVU1029
 3428 008c 00FB03F0 		mul	r0, r0, r3
 3429              	.LVL392:
 420:src/matrix.c  **** 
 3430              		.loc 1 420 6 view .LVU1030
 3431 0090 05EBC005 		add	r5, r5, r0, lsl #3
 3432              	.LVL393:
 422:src/matrix.c  **** 			for (i=0; i<cols; i++)
 3433              		.loc 1 422 3 is_stmt 1 view .LVU1031
ARM GAS  /tmp/cc5NzCD8.s 			page 87


 422:src/matrix.c  **** 			for (i=0; i<cols; i++)
 3434              		.loc 1 422 6 is_stmt 0 view .LVU1032
 3435 0094 22D0     		beq	.L241
 3436              	.LVL394:
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3437              		.loc 1 426 14 is_stmt 1 view .LVU1033
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3438              		.loc 1 426 4 is_stmt 0 view .LVU1034
 3439 0096 002B     		cmp	r3, #0
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3440              		.loc 1 426 10 view .LVU1035
 3441 0098 C8BF     		it	gt
 3442 009a 0026     		movgt	r6, #0
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3443              		.loc 1 426 4 view .LVU1036
 3444 009c E5DD     		ble	.L234
 3445              	.LVL395:
 3446              	.L242:
 427:src/matrix.c  **** 				decimal64ToNumber(r2++, &zdn);
 3447              		.loc 1 427 5 is_stmt 1 discriminator 3 view .LVU1037
 3448 009e 0BA9     		add	r1, sp, #44
 3449 00a0 2046     		mov	r0, r4
 3450 00a2 FFF7FEFF 		bl	decimal64ToNumber
 3451              	.LVL396:
 428:src/matrix.c  **** 				dn_multiply(&m, &zdn, &t);
 3452              		.loc 1 428 5 discriminator 3 view .LVU1038
 3453 00a6 2846     		mov	r0, r5
 3454 00a8 14A9     		add	r1, sp, #80
 3455 00aa FFF7FEFF 		bl	decimal64ToNumber
 3456              	.LVL397:
 429:src/matrix.c  **** 				dn_add(&zdn, &ydn, &m);
 3457              		.loc 1 429 5 is_stmt 0 discriminator 3 view .LVU1039
 3458 00ae 1DAA     		add	r2, sp, #116
 3459 00b0 14A9     		add	r1, sp, #80
 3460 00b2 02A8     		add	r0, sp, #8
 3461 00b4 FFF7FEFF 		bl	dn_multiply
 3462              	.LVL398:
 430:src/matrix.c  **** 				packed_from_number(r1++, &zdn);
 3463              		.loc 1 430 5 discriminator 3 view .LVU1040
 3464 00b8 02AA     		add	r2, sp, #8
 3465 00ba 0BA9     		add	r1, sp, #44
 3466 00bc 14A8     		add	r0, sp, #80
 3467 00be FFF7FEFF 		bl	dn_add
 3468              	.LVL399:
 3469 00c2 2046     		mov	r0, r4
 431:src/matrix.c  **** 			}
 3470              		.loc 1 431 5 discriminator 3 view .LVU1041
 3471 00c4 14A9     		add	r1, sp, #80
 3472 00c6 FFF7FEFF 		bl	packed_from_number
 3473              	.LVL400:
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3474              		.loc 1 426 4 discriminator 3 view .LVU1042
 3475 00ca 019B     		ldr	r3, [sp, #4]
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3476              		.loc 1 426 23 discriminator 3 view .LVU1043
 3477 00cc 0136     		adds	r6, r6, #1
 3478              	.LVL401:
ARM GAS  /tmp/cc5NzCD8.s 			page 88


 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3479              		.loc 1 426 4 discriminator 3 view .LVU1044
 3480 00ce B342     		cmp	r3, r6
 428:src/matrix.c  **** 				dn_multiply(&m, &zdn, &t);
 3481              		.loc 1 428 5 discriminator 3 view .LVU1045
 3482 00d0 05F10805 		add	r5, r5, #8
 3483              	.LVL402:
 429:src/matrix.c  **** 				dn_add(&zdn, &ydn, &m);
 3484              		.loc 1 429 5 is_stmt 1 discriminator 3 view .LVU1046
 430:src/matrix.c  **** 				packed_from_number(r1++, &zdn);
 3485              		.loc 1 430 5 discriminator 3 view .LVU1047
 431:src/matrix.c  **** 			}
 3486              		.loc 1 431 5 discriminator 3 view .LVU1048
 3487 00d4 04F10804 		add	r4, r4, #8
 3488              	.LVL403:
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3489              		.loc 1 426 22 discriminator 3 view .LVU1049
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3490              		.loc 1 426 14 discriminator 3 view .LVU1050
 426:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3491              		.loc 1 426 4 is_stmt 0 discriminator 3 view .LVU1051
 3492 00d8 E1DC     		bgt	.L242
 3493 00da C6E7     		b	.L234
 3494              	.LVL404:
 3495              	.L241:
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3496              		.loc 1 423 14 is_stmt 1 view .LVU1052
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3497              		.loc 1 423 4 is_stmt 0 view .LVU1053
 3498 00dc 002B     		cmp	r3, #0
 3499 00de C4DD     		ble	.L234
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3500              		.loc 1 423 10 view .LVU1054
 3501 00e0 0026     		movs	r6, #0
 3502              	.LVL405:
 3503              	.L243:
 424:src/matrix.c  **** 		} else {
 3504              		.loc 1 424 5 is_stmt 1 discriminator 3 view .LVU1055
 3505 00e2 2046     		mov	r0, r4
 3506 00e4 2946     		mov	r1, r5
 3507 00e6 FFF7FEFF 		bl	swap_reg
 3508              	.LVL406:
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3509              		.loc 1 423 4 is_stmt 0 discriminator 3 view .LVU1056
 3510 00ea 019B     		ldr	r3, [sp, #4]
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3511              		.loc 1 423 23 discriminator 3 view .LVU1057
 3512 00ec 0136     		adds	r6, r6, #1
 3513              	.LVL407:
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3514              		.loc 1 423 4 discriminator 3 view .LVU1058
 3515 00ee B342     		cmp	r3, r6
 424:src/matrix.c  **** 		} else {
 3516              		.loc 1 424 5 discriminator 3 view .LVU1059
 3517 00f0 04F10804 		add	r4, r4, #8
 3518              	.LVL408:
 424:src/matrix.c  **** 		} else {
ARM GAS  /tmp/cc5NzCD8.s 			page 89


 3519              		.loc 1 424 5 discriminator 3 view .LVU1060
 3520 00f4 05F10805 		add	r5, r5, #8
 3521              	.LVL409:
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3522              		.loc 1 423 22 is_stmt 1 discriminator 3 view .LVU1061
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3523              		.loc 1 423 14 discriminator 3 view .LVU1062
 423:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3524              		.loc 1 423 4 is_stmt 0 discriminator 3 view .LVU1063
 3525 00f8 F3DC     		bgt	.L243
 3526 00fa B6E7     		b	.L234
 3527              		.cfi_endproc
 3528              	.LFE20:
 3530              		.section	.text.matrix_determinant,"ax",%progbits
 3531              		.align	1
 3532              		.p2align 2,,3
 3533              		.global	matrix_determinant
 3534              		.syntax unified
 3535              		.thumb
 3536              		.thumb_func
 3537              		.fpu fpv4-sp-d16
 3539              	matrix_determinant:
 3540              	.LVL410:
 3541              	.LFB26:
 590:src/matrix.c  **** 
 591:src/matrix.c  **** /* Calculate the determinant of a matrix by performing the LU decomposition
 592:src/matrix.c  ****  * and multiplying the diagonal elements of the upper triangular portion.
 593:src/matrix.c  ****  * Also adjust for the parity of the number of pivots.
 594:src/matrix.c  ****  */
 595:src/matrix.c  **** decNumber *matrix_determinant(decNumber *r, const decNumber *m) {
 3542              		.loc 1 595 65 is_stmt 1 view -0
 3543              		.cfi_startproc
 3544              		@ args = 0, pretend = 0, frame = 1640
 3545              		@ frame_needed = 0, uses_anonymous_args = 0
 596:src/matrix.c  **** 	int n, i;
 3546              		.loc 1 596 2 view .LVU1065
 597:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3547              		.loc 1 597 2 view .LVU1066
 598:src/matrix.c  **** 	decNumber t;
 3548              		.loc 1 598 2 view .LVU1067
 599:src/matrix.c  **** 
 600:src/matrix.c  **** 	n = matrix_lu_check(m, mat, NULL);
 3549              		.loc 1 600 2 view .LVU1068
 595:src/matrix.c  **** 	int n, i;
 3550              		.loc 1 595 65 is_stmt 0 view .LVU1069
 3551 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3552              		.cfi_def_cfa_offset 24
 3553              		.cfi_offset 4, -24
 3554              		.cfi_offset 5, -20
 3555              		.cfi_offset 6, -16
 3556              		.cfi_offset 7, -12
 3557              		.cfi_offset 8, -8
 3558              		.cfi_offset 14, -4
 3559 0004 0B46     		mov	r3, r1
 3560 0006 ADF5CD6D 		sub	sp, sp, #1640
 3561              		.cfi_def_cfa_offset 1664
 595:src/matrix.c  **** 	int n, i;
ARM GAS  /tmp/cc5NzCD8.s 			page 90


 3562              		.loc 1 595 65 view .LVU1070
 3563 000a 0546     		mov	r5, r0
 3564              		.loc 1 600 6 view .LVU1071
 3565 000c 0AA9     		add	r1, sp, #40
 3566              	.LVL411:
 3567              		.loc 1 600 6 view .LVU1072
 3568 000e 1846     		mov	r0, r3
 3569              	.LVL412:
 3570              		.loc 1 600 6 view .LVU1073
 3571 0010 0022     		movs	r2, #0
 3572 0012 FFF7FEFF 		bl	matrix_lu_check
 3573              	.LVL413:
 601:src/matrix.c  **** 	if (n == 0)
 3574              		.loc 1 601 2 is_stmt 1 view .LVU1074
 3575              		.loc 1 601 5 is_stmt 0 view .LVU1075
 3576 0016 0746     		mov	r7, r0
 3577 0018 F0B1     		cbz	r0, .L252
 602:src/matrix.c  **** 		return NULL;
 603:src/matrix.c  **** 
 604:src/matrix.c  **** 	i = LU_decomposition(mat, NULL, n);
 3578              		.loc 1 604 2 is_stmt 1 view .LVU1076
 3579              		.loc 1 604 6 is_stmt 0 view .LVU1077
 3580 001a 0246     		mov	r2, r0
 3581 001c 0021     		movs	r1, #0
 3582 001e 0AA8     		add	r0, sp, #40
 3583              	.LVL414:
 3584              		.loc 1 604 6 view .LVU1078
 3585 0020 FFF7FEFF 		bl	LU_decomposition
 3586              	.LVL415:
 3587              		.loc 1 604 6 view .LVU1079
 3588 0024 0146     		mov	r1, r0
 3589              	.LVL416:
 605:src/matrix.c  **** 
 606:src/matrix.c  **** 	int_to_dn(r, i);
 3590              		.loc 1 606 2 is_stmt 1 view .LVU1080
 3591 0026 2846     		mov	r0, r5
 3592              	.LVL417:
 3593              		.loc 1 606 2 is_stmt 0 view .LVU1081
 3594 0028 FFF7FEFF 		bl	int_to_dn
 3595              	.LVL418:
 607:src/matrix.c  **** 	for (i=0; i<n; i++) {
 3596              		.loc 1 607 2 is_stmt 1 view .LVU1082
 3597              		.loc 1 607 12 view .LVU1083
 3598              		.loc 1 607 2 is_stmt 0 view .LVU1084
 3599 002c 002F     		cmp	r7, #0
 3600 002e 12DD     		ble	.L256
 3601 0030 07F10108 		add	r8, r7, #1
 3602 0034 0AAC     		add	r4, sp, #40
 3603 0036 4FEA0818 		lsl	r8, r8, #4
 3604              		.loc 1 607 8 view .LVU1085
 3605 003a 0026     		movs	r6, #0
 3606              	.LVL419:
 3607              	.L255:
 608:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3608              		.loc 1 608 3 is_stmt 1 view .LVU1086
 3609              	.LBB151:
 3610              	.LBI151:
ARM GAS  /tmp/cc5NzCD8.s 			page 91


 442:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 3611              		.loc 1 442 13 view .LVU1087
 3612              	.LBB152:
 443:src/matrix.c  **** }
 3613              		.loc 1 443 2 view .LVU1088
 443:src/matrix.c  **** }
 3614              		.loc 1 443 2 is_stmt 0 view .LVU1089
 3615              	.LBE152:
 3616              	.LBE151:
  26:src/matrix.c  **** }
 3617              		.loc 1 26 2 is_stmt 1 view .LVU1090
 3618              	.LBB154:
 3619              	.LBB153:
 443:src/matrix.c  **** }
 3620              		.loc 1 443 2 is_stmt 0 view .LVU1091
 3621 003c 01A9     		add	r1, sp, #4
 3622              	.LVL420:
 443:src/matrix.c  **** }
 3623              		.loc 1 443 2 view .LVU1092
 3624 003e 2046     		mov	r0, r4
 3625 0040 FFF7FEFF 		bl	decimal128ToNumber
 3626              	.LVL421:
 443:src/matrix.c  **** }
 3627              		.loc 1 443 2 view .LVU1093
 3628              	.LBE153:
 3629              	.LBE154:
 609:src/matrix.c  **** 		dn_multiply(r, r, &t);
 3630              		.loc 1 609 3 is_stmt 1 view .LVU1094
 607:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3631              		.loc 1 607 18 is_stmt 0 view .LVU1095
 3632 0044 0136     		adds	r6, r6, #1
 3633              	.LVL422:
 3634              		.loc 1 609 3 view .LVU1096
 3635 0046 01AA     		add	r2, sp, #4
 3636 0048 2946     		mov	r1, r5
 3637 004a 2846     		mov	r0, r5
 3638 004c FFF7FEFF 		bl	dn_multiply
 3639              	.LVL423:
 607:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3640              		.loc 1 607 17 is_stmt 1 view .LVU1097
 607:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3641              		.loc 1 607 12 view .LVU1098
 607:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3642              		.loc 1 607 2 is_stmt 0 view .LVU1099
 3643 0050 B742     		cmp	r7, r6
 3644 0052 4444     		add	r4, r4, r8
 3645 0054 F2D1     		bne	.L255
 3646              	.LVL424:
 3647              	.L256:
 610:src/matrix.c  **** 	}
 611:src/matrix.c  **** 	return r;
 3648              		.loc 1 611 9 view .LVU1100
 3649 0056 2846     		mov	r0, r5
 3650              	.L252:
 612:src/matrix.c  **** }
 3651              		.loc 1 612 1 view .LVU1101
 3652 0058 0DF5CD6D 		add	sp, sp, #1640
ARM GAS  /tmp/cc5NzCD8.s 			page 92


 3653              		.cfi_def_cfa_offset 24
 3654              		@ sp needed
 3655 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3656              		.loc 1 612 1 view .LVU1102
 3657              		.cfi_endproc
 3658              	.LFE26:
 3660              		.section	.text.matrix_inverse,"ax",%progbits
 3661              		.align	1
 3662              		.p2align 2,,3
 3663              		.global	matrix_inverse
 3664              		.syntax unified
 3665              		.thumb
 3666              		.thumb_func
 3667              		.fpu fpv4-sp-d16
 3669              	matrix_inverse:
 3670              	.LVL425:
 3671              	.LFB27:
 613:src/matrix.c  **** 
 614:src/matrix.c  **** /* Invert a matrix in situ.
 615:src/matrix.c  ****  * Do this by calculating the LU decomposition and solving lots of systems
 616:src/matrix.c  ****  * of linear equations.
 617:src/matrix.c  ****  */
 618:src/matrix.c  **** void matrix_inverse(enum nilop op) {
 3672              		.loc 1 618 36 is_stmt 1 view -0
 3673              		.cfi_startproc
 3674              		@ args = 0, pretend = 0, frame = 2016
 3675              		@ frame_needed = 0, uses_anonymous_args = 0
 619:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3676              		.loc 1 619 2 view .LVU1104
 620:src/matrix.c  **** 	decNumber x[MAX_SQUARE];
 3677              		.loc 1 620 2 view .LVU1105
 621:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 3678              		.loc 1 621 2 view .LVU1106
 622:src/matrix.c  **** 	int i, j, n;
 3679              		.loc 1 622 2 view .LVU1107
 623:src/matrix.c  **** 	decimal64 *base;
 3680              		.loc 1 623 2 view .LVU1108
 624:src/matrix.c  **** 	const decimal64 *b[MAX_SQUARE];
 3681              		.loc 1 624 2 view .LVU1109
 625:src/matrix.c  **** 
 626:src/matrix.c  **** 	getX(x);
 3682              		.loc 1 626 2 view .LVU1110
 618:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3683              		.loc 1 618 36 is_stmt 0 view .LVU1111
 3684 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3685              		.cfi_def_cfa_offset 32
 3686              		.cfi_offset 4, -32
 3687              		.cfi_offset 5, -28
 3688              		.cfi_offset 6, -24
 3689              		.cfi_offset 7, -20
 3690              		.cfi_offset 8, -16
 3691              		.cfi_offset 9, -12
 3692              		.cfi_offset 10, -8
 3693              		.cfi_offset 14, -4
 3694 0004 ADF5FD6D 		sub	sp, sp, #2024
 3695              		.cfi_def_cfa_offset 2056
 3696              		.loc 1 626 2 view .LVU1112
ARM GAS  /tmp/cc5NzCD8.s 			page 93


 3697 0008 10A8     		add	r0, sp, #64
 3698              	.LVL426:
 3699              		.loc 1 626 2 view .LVU1113
 3700 000a FFF7FEFF 		bl	getX
 3701              	.LVL427:
 627:src/matrix.c  **** 	n = matrix_lu_check(x, mat, &base);
 3702              		.loc 1 627 2 is_stmt 1 view .LVU1114
 3703              		.loc 1 627 6 is_stmt 0 view .LVU1115
 3704 000e 10A8     		add	r0, sp, #64
 3705 0010 02AA     		add	r2, sp, #8
 3706 0012 6AA9     		add	r1, sp, #424
 3707 0014 FFF7FEFF 		bl	matrix_lu_check
 3708              	.LVL428:
 628:src/matrix.c  **** 	if (n == 0)
 3709              		.loc 1 628 2 is_stmt 1 view .LVU1116
 3710              		.loc 1 628 5 is_stmt 0 view .LVU1117
 3711 0018 18B9     		cbnz	r0, .L275
 3712              	.LVL429:
 3713              	.L260:
 629:src/matrix.c  **** 		return;
 630:src/matrix.c  **** 
 631:src/matrix.c  **** 	i = LU_decomposition(mat, pivots, n);
 632:src/matrix.c  **** 	if (i == 0) {
 633:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 634:src/matrix.c  **** 		return;
 635:src/matrix.c  **** 	}
 636:src/matrix.c  **** 
 637:src/matrix.c  **** 	for (i=0; i<n; i++) {
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 641:src/matrix.c  **** 		for (j=0; j<n; j++)
 642:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 643:src/matrix.c  **** 	}
 644:src/matrix.c  **** }
 3714              		.loc 1 644 1 view .LVU1118
 3715 001a 0DF5FD6D 		add	sp, sp, #2024
 3716              		.cfi_remember_state
 3717              		.cfi_def_cfa_offset 32
 3718              		@ sp needed
 3719 001e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3720              	.LVL430:
 3721              	.L275:
 3722              		.cfi_restore_state
 631:src/matrix.c  **** 	if (i == 0) {
 3723              		.loc 1 631 2 is_stmt 1 view .LVU1119
 3724 0022 0746     		mov	r7, r0
 631:src/matrix.c  **** 	if (i == 0) {
 3725              		.loc 1 631 6 is_stmt 0 view .LVU1120
 3726 0024 0246     		mov	r2, r0
 3727 0026 03A9     		add	r1, sp, #12
 3728 0028 6AA8     		add	r0, sp, #424
 3729              	.LVL431:
 631:src/matrix.c  **** 	if (i == 0) {
 3730              		.loc 1 631 6 view .LVU1121
 3731 002a FFF7FEFF 		bl	LU_decomposition
 3732              	.LVL432:
ARM GAS  /tmp/cc5NzCD8.s 			page 94


 632:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 3733              		.loc 1 632 2 is_stmt 1 view .LVU1122
 632:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 3734              		.loc 1 632 5 is_stmt 0 view .LVU1123
 3735 002e 90B3     		cbz	r0, .L262
 3736              	.LVL433:
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3737              		.loc 1 637 12 is_stmt 1 view .LVU1124
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3738              		.loc 1 637 2 is_stmt 0 view .LVU1125
 3739 0030 002F     		cmp	r7, #0
 3740 0032 F2DD     		ble	.L260
 3741 0034 07EBC708 		add	r8, r7, r7, lsl #3
 3742 0038 10AB     		add	r3, sp, #64
 3743 003a 03EB8808 		add	r8, r3, r8, lsl #2
 3744 003e 4FEAC709 		lsl	r9, r7, #3
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3745              		.loc 1 637 8 view .LVU1126
 3746 0042 0026     		movs	r6, #0
 3747              	.LVL434:
 3748              	.L263:
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3749              		.loc 1 638 13 is_stmt 1 view .LVU1127
 3750 0044 06AC     		add	r4, sp, #24
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3751              		.loc 1 638 9 is_stmt 0 view .LVU1128
 3752 0046 0025     		movs	r5, #0
 3753 0048 00E0     		b	.L267
 3754              	.LVL435:
 3755              	.L269:
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3756              		.loc 1 638 9 view .LVU1129
 3757 004a 1D46     		mov	r5, r3
 3758              	.LVL436:
 3759              	.L267:
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3760              		.loc 1 639 4 is_stmt 1 view .LVU1130
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3761              		.loc 1 639 9 is_stmt 0 view .LVU1131
 3762 004c B542     		cmp	r5, r6
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3763              		.loc 1 639 34 view .LVU1132
 3764 004e 0CBF     		ite	eq
 3765 0050 4C20     		moveq	r0, #76
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3766              		.loc 1 639 71 view .LVU1133
 3767 0052 4B20     		movne	r0, #75
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3768              		.loc 1 639 34 view .LVU1134
 3769 0054 0021     		movs	r1, #0
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3770              		.loc 1 639 71 view .LVU1135
 3771 0056 FFF7FEFF 		bl	get_const
 3772              	.LVL437:
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3773              		.loc 1 638 19 view .LVU1136
 3774 005a 6B1C     		adds	r3, r5, #1
ARM GAS  /tmp/cc5NzCD8.s 			page 95


 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3775              		.loc 1 638 3 view .LVU1137
 3776 005c 9F42     		cmp	r7, r3
 639:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3777              		.loc 1 639 9 view .LVU1138
 3778 005e 44F8040B 		str	r0, [r4], #4
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3779              		.loc 1 638 18 is_stmt 1 view .LVU1139
 3780              	.LVL438:
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3781              		.loc 1 638 13 view .LVU1140
 638:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3782              		.loc 1 638 3 is_stmt 0 view .LVU1141
 3783 0062 F2D1     		bne	.L269
 640:src/matrix.c  **** 		for (j=0; j<n; j++)
 3784              		.loc 1 640 3 is_stmt 1 view .LVU1142
 3785 0064 0097     		str	r7, [sp]
 3786 0066 10AB     		add	r3, sp, #64
 3787              	.LVL439:
 640:src/matrix.c  **** 		for (j=0; j<n; j++)
 3788              		.loc 1 640 3 is_stmt 0 view .LVU1143
 3789 0068 03AA     		add	r2, sp, #12
 3790 006a 06A9     		add	r1, sp, #24
 3791 006c 6AA8     		add	r0, sp, #424
 3792 006e FFF7FEFF 		bl	matrix_pivoting_solve
 3793              	.LVL440:
 641:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3794              		.loc 1 641 3 is_stmt 1 view .LVU1144
 641:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3795              		.loc 1 641 13 view .LVU1145
 3796 0072 4FEAC60A 		lsl	r10, r6, #3
 640:src/matrix.c  **** 		for (j=0; j<n; j++)
 3797              		.loc 1 640 3 is_stmt 0 view .LVU1146
 3798 0076 10AC     		add	r4, sp, #64
 3799              	.LVL441:
 3800              	.L268:
 642:src/matrix.c  **** 	}
 3801              		.loc 1 642 4 is_stmt 1 discriminator 3 view .LVU1147
  26:src/matrix.c  **** }
 3802              		.loc 1 26 2 discriminator 3 view .LVU1148
 642:src/matrix.c  **** 	}
 3803              		.loc 1 642 4 is_stmt 0 discriminator 3 view .LVU1149
 3804 0078 0298     		ldr	r0, [sp, #8]
 3805 007a 2146     		mov	r1, r4
 3806 007c 5044     		add	r0, r0, r10
 3807 007e 2434     		adds	r4, r4, #36
 3808 0080 FFF7FEFF 		bl	packed_from_number
 3809              	.LVL442:
 641:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3810              		.loc 1 641 18 is_stmt 1 discriminator 3 view .LVU1150
 641:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3811              		.loc 1 641 13 discriminator 3 view .LVU1151
 641:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3812              		.loc 1 641 3 is_stmt 0 discriminator 3 view .LVU1152
 3813 0084 4445     		cmp	r4, r8
 3814 0086 CA44     		add	r10, r10, r9
 3815 0088 F6D1     		bne	.L268
ARM GAS  /tmp/cc5NzCD8.s 			page 96


 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3816              		.loc 1 637 17 is_stmt 1 discriminator 2 view .LVU1153
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3817              		.loc 1 637 2 is_stmt 0 discriminator 2 view .LVU1154
 3818 008a B542     		cmp	r5, r6
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3819              		.loc 1 637 18 discriminator 2 view .LVU1155
 3820 008c 06F10103 		add	r3, r6, #1
 3821              	.LVL443:
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3822              		.loc 1 637 12 is_stmt 1 discriminator 2 view .LVU1156
 637:src/matrix.c  **** 		for (j=0; j<n; j++)
 3823              		.loc 1 637 2 is_stmt 0 discriminator 2 view .LVU1157
 3824 0090 C3D0     		beq	.L260
 3825 0092 1E46     		mov	r6, r3
 3826 0094 D6E7     		b	.L263
 3827              	.LVL444:
 3828              	.L262:
 633:src/matrix.c  **** 		return;
 3829              		.loc 1 633 3 is_stmt 1 view .LVU1158
 3830 0096 1620     		movs	r0, #22
 3831              	.LVL445:
 633:src/matrix.c  **** 		return;
 3832              		.loc 1 633 3 is_stmt 0 view .LVU1159
 3833 0098 FFF7FEFF 		bl	report_err
 3834              	.LVL446:
 634:src/matrix.c  **** 	}
 3835              		.loc 1 634 3 is_stmt 1 view .LVU1160
 3836 009c BDE7     		b	.L260
 3837              		.cfi_endproc
 3838              	.LFE27:
 3840 009e 00BF     		.section	.text.matrix_linear_eqn,"ax",%progbits
 3841              		.align	1
 3842              		.p2align 2,,3
 3843              		.global	matrix_linear_eqn
 3844              		.syntax unified
 3845              		.thumb
 3846              		.thumb_func
 3847              		.fpu fpv4-sp-d16
 3849              	matrix_linear_eqn:
 3850              	.LVL447:
 3851              	.LFB28:
 645:src/matrix.c  **** 
 646:src/matrix.c  **** /* Solve a system of linear equations Ac = b
 647:src/matrix.c  ****  */
 648:src/matrix.c  **** decNumber *matrix_linear_eqn(decNumber *r, const decNumber *a, const decNumber *b, const decNumber 
 3852              		.loc 1 648 104 view -0
 3853              		.cfi_startproc
 3854              		@ args = 0, pretend = 0, frame = 2024
 3855              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3856              		.loc 1 649 2 view .LVU1162
 650:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3857              		.loc 1 650 2 view .LVU1163
 651:src/matrix.c  **** 	decimal64 *bbase, *cbase;
 3858              		.loc 1 651 2 view .LVU1164
 652:src/matrix.c  **** 	decNumber cv[MAX_SQUARE];
ARM GAS  /tmp/cc5NzCD8.s 			page 97


 3859              		.loc 1 652 2 view .LVU1165
 653:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 3860              		.loc 1 653 2 view .LVU1166
 654:src/matrix.c  **** 	const decimal64 *bv[MAX_SQUARE];
 3861              		.loc 1 654 2 view .LVU1167
 655:src/matrix.c  **** 
 656:src/matrix.c  **** 	n = matrix_lu_check(a, mat, NULL);
 3862              		.loc 1 656 2 view .LVU1168
 648:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3863              		.loc 1 648 104 is_stmt 0 view .LVU1169
 3864 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3865              		.cfi_def_cfa_offset 28
 3866              		.cfi_offset 4, -28
 3867              		.cfi_offset 5, -24
 3868              		.cfi_offset 6, -20
 3869              		.cfi_offset 7, -16
 3870              		.cfi_offset 8, -12
 3871              		.cfi_offset 9, -8
 3872              		.cfi_offset 14, -4
 3873 0004 ADF2F47D 		subw	sp, sp, #2036
 3874              		.cfi_def_cfa_offset 2064
 648:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3875              		.loc 1 648 104 view .LVU1170
 3876 0008 0646     		mov	r6, r0
 3877 000a 1446     		mov	r4, r2
 3878              		.loc 1 656 6 view .LVU1171
 3879 000c 0846     		mov	r0, r1
 3880              	.LVL448:
 3881              		.loc 1 656 6 view .LVU1172
 3882 000e 0022     		movs	r2, #0
 3883              	.LVL449:
 3884              		.loc 1 656 6 view .LVU1173
 3885 0010 6CA9     		add	r1, sp, #432
 3886              	.LVL450:
 648:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3887              		.loc 1 648 104 view .LVU1174
 3888 0012 1D46     		mov	r5, r3
 3889              		.loc 1 656 6 view .LVU1175
 3890 0014 FFF7FEFF 		bl	matrix_lu_check
 3891              	.LVL451:
 657:src/matrix.c  **** 	if (n == 0)
 3892              		.loc 1 657 2 is_stmt 1 view .LVU1176
 3893              		.loc 1 657 5 is_stmt 0 view .LVU1177
 3894 0018 0028     		cmp	r0, #0
 3895 001a 50D0     		beq	.L300
 658:src/matrix.c  **** 		return NULL;
 659:src/matrix.c  **** 
 660:src/matrix.c  **** 	bbase = matrix_decomp(b, &brows, &bcols);
 3896              		.loc 1 660 2 is_stmt 1 view .LVU1178
 3897 001c 0746     		mov	r7, r0
 3898              		.loc 1 660 10 is_stmt 0 view .LVU1179
 3899 001e 04AA     		add	r2, sp, #16
 3900 0020 2046     		mov	r0, r4
 3901              	.LVL452:
 3902              		.loc 1 660 10 view .LVU1180
 3903 0022 03A9     		add	r1, sp, #12
 3904 0024 FFF7FEFF 		bl	matrix_decomp
ARM GAS  /tmp/cc5NzCD8.s 			page 98


 3905              	.LVL453:
 661:src/matrix.c  **** 	if (bbase == NULL)
 3906              		.loc 1 661 2 is_stmt 1 view .LVU1181
 3907              		.loc 1 661 5 is_stmt 0 view .LVU1182
 3908 0028 0446     		mov	r4, r0
 3909              	.LVL454:
 3910              		.loc 1 661 5 view .LVU1183
 3911 002a 0028     		cmp	r0, #0
 3912 002c 47D0     		beq	.L300
 662:src/matrix.c  **** 		return NULL;
 663:src/matrix.c  **** 	if (brows != n || bcols != 1) {
 3913              		.loc 1 663 2 is_stmt 1 view .LVU1184
 3914              		.loc 1 663 5 is_stmt 0 view .LVU1185
 3915 002e DDF80C80 		ldr	r8, [sp, #12]
 3916 0032 B845     		cmp	r8, r7
 3917 0034 40D1     		bne	.L280
 3918              		.loc 1 663 17 discriminator 1 view .LVU1186
 3919 0036 DDF81090 		ldr	r9, [sp, #16]
 3920 003a B9F1010F 		cmp	r9, #1
 3921 003e 3BD1     		bne	.L280
 664:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 665:src/matrix.c  **** 		return NULL;
 666:src/matrix.c  **** 	}
 667:src/matrix.c  **** 
 668:src/matrix.c  **** 	creg = dn_to_int(c);
 3922              		.loc 1 668 2 is_stmt 1 view .LVU1187
 3923              		.loc 1 668 9 is_stmt 0 view .LVU1188
 3924 0040 2846     		mov	r0, r5
 3925              	.LVL455:
 3926              		.loc 1 668 9 view .LVU1189
 3927 0042 FFF7FEFF 		bl	dn_to_int
 3928              	.LVL456:
 669:src/matrix.c  **** 	if (matrix_descriptor(r, creg, n, 1) == 0)
 3929              		.loc 1 669 6 view .LVU1190
 3930 0046 4B46     		mov	r3, r9
 668:src/matrix.c  **** 	if (matrix_descriptor(r, creg, n, 1) == 0)
 3931              		.loc 1 668 9 view .LVU1191
 3932 0048 0546     		mov	r5, r0
 3933              	.LVL457:
 3934              		.loc 1 669 2 is_stmt 1 view .LVU1192
 3935              		.loc 1 669 6 is_stmt 0 view .LVU1193
 3936 004a 0146     		mov	r1, r0
 3937 004c 4246     		mov	r2, r8
 3938 004e 3046     		mov	r0, r6
 3939              	.LVL458:
 3940              		.loc 1 669 6 view .LVU1194
 3941 0050 FFF7FEFF 		bl	matrix_descriptor
 3942              	.LVL459:
 3943              		.loc 1 669 5 view .LVU1195
 3944 0054 98B3     		cbz	r0, .L300
 670:src/matrix.c  **** 		return NULL;
 671:src/matrix.c  **** 	cbase = &(get_reg_n(creg)->s);
 3945              		.loc 1 671 2 is_stmt 1 view .LVU1196
 3946              		.loc 1 671 12 is_stmt 0 view .LVU1197
 3947 0056 2846     		mov	r0, r5
 3948 0058 FFF7FEFF 		bl	get_reg_n
 3949              	.LVL460:
ARM GAS  /tmp/cc5NzCD8.s 			page 99


 672:src/matrix.c  **** 
 673:src/matrix.c  **** 	/* Everything is happy so far -- decompose */
 674:src/matrix.c  **** 	i = LU_decomposition(mat, pivots, n);
 3950              		.loc 1 674 6 view .LVU1198
 3951 005c 05A9     		add	r1, sp, #20
 671:src/matrix.c  **** 
 3952              		.loc 1 671 12 view .LVU1199
 3953 005e 0546     		mov	r5, r0
 3954              	.LVL461:
 3955              		.loc 1 674 6 view .LVU1200
 3956 0060 4246     		mov	r2, r8
 3957 0062 6CA8     		add	r0, sp, #432
 3958              	.LVL462:
 3959              		.loc 1 674 2 is_stmt 1 view .LVU1201
 3960              		.loc 1 674 6 is_stmt 0 view .LVU1202
 3961 0064 FFF7FEFF 		bl	LU_decomposition
 3962              	.LVL463:
 675:src/matrix.c  **** 	if (i == 0) {
 3963              		.loc 1 675 2 is_stmt 1 view .LVU1203
 3964              		.loc 1 675 5 is_stmt 0 view .LVU1204
 3965 0068 8146     		mov	r9, r0
 3966 006a 68B3     		cbz	r0, .L282
 3967              	.LVL464:
 676:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 677:src/matrix.c  **** 		return NULL;
 678:src/matrix.c  **** 	}
 679:src/matrix.c  **** 
 680:src/matrix.c  **** 	/* And solve */
 681:src/matrix.c  **** 	for (i=0; i<n; i++)
 3968              		.loc 1 681 12 is_stmt 1 view .LVU1205
 3969              		.loc 1 681 2 is_stmt 0 view .LVU1206
 3970 006c B8F1000F 		cmp	r8, #0
 3971 0070 2FDD     		ble	.L301
 3972 0072 04EBC701 		add	r1, r4, r7, lsl #3
 3973 0076 08AA     		add	r2, sp, #32
 3974 0078 4FEAC70C 		lsl	ip, r7, #3
 3975              	.LVL465:
 3976              	.L285:
 682:src/matrix.c  **** 		bv[i] = bbase + i;
 3977              		.loc 1 682 3 is_stmt 1 discriminator 3 view .LVU1207
 3978              		.loc 1 682 9 is_stmt 0 discriminator 3 view .LVU1208
 3979 007c 42F8044B 		str	r4, [r2], #4
 681:src/matrix.c  **** 		bv[i] = bbase + i;
 3980              		.loc 1 681 17 is_stmt 1 discriminator 3 view .LVU1209
 681:src/matrix.c  **** 		bv[i] = bbase + i;
 3981              		.loc 1 681 12 discriminator 3 view .LVU1210
 3982 0080 0834     		adds	r4, r4, #8
 681:src/matrix.c  **** 		bv[i] = bbase + i;
 3983              		.loc 1 681 2 is_stmt 0 discriminator 3 view .LVU1211
 3984 0082 8C42     		cmp	r4, r1
 3985 0084 FAD1     		bne	.L285
 683:src/matrix.c  **** 	matrix_pivoting_solve(mat, bv, pivots, cv, n);
 3986              		.loc 1 683 2 is_stmt 1 view .LVU1212
 3987 0086 0097     		str	r7, [sp]
 3988 0088 05AA     		add	r2, sp, #20
 3989 008a 08A9     		add	r1, sp, #32
 3990 008c 6CA8     		add	r0, sp, #432
ARM GAS  /tmp/cc5NzCD8.s 			page 100


 3991 008e 12AB     		add	r3, sp, #72
 3992 0090 05EB0C07 		add	r7, r5, ip
 3993              	.LVL466:
 3994              		.loc 1 683 2 is_stmt 0 view .LVU1213
 3995 0094 FFF7FEFF 		bl	matrix_pivoting_solve
 3996              	.LVL467:
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 3997              		.loc 1 684 2 is_stmt 1 view .LVU1214
 3998              		.loc 1 684 12 view .LVU1215
 3999 0098 2C46     		mov	r4, r5
 4000 009a 12AD     		add	r5, sp, #72
 4001              	.LVL468:
 4002              	.L287:
 685:src/matrix.c  **** 		packed_from_number(cbase+i, cv+i);
 4003              		.loc 1 685 3 discriminator 3 view .LVU1216
 4004 009c 2946     		mov	r1, r5
 4005 009e 2046     		mov	r0, r4
 4006 00a0 0834     		adds	r4, r4, #8
 4007 00a2 FFF7FEFF 		bl	packed_from_number
 4008              	.LVL469:
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 4009              		.loc 1 684 17 discriminator 3 view .LVU1217
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 4010              		.loc 1 684 12 discriminator 3 view .LVU1218
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 4011              		.loc 1 684 2 is_stmt 0 discriminator 3 view .LVU1219
 4012 00a6 BC42     		cmp	r4, r7
 4013 00a8 05F12405 		add	r5, r5, #36
 4014 00ac F6D1     		bne	.L287
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 4015              		.loc 1 684 2 is_stmt 1 view .LVU1220
 4016              	.LVL470:
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 4017              		.loc 1 684 12 view .LVU1221
 686:src/matrix.c  **** 	return r;
 4018              		.loc 1 686 9 is_stmt 0 view .LVU1222
 4019 00ae 3046     		mov	r0, r6
 4020              	.LVL471:
 4021              	.L302:
 687:src/matrix.c  **** }
 4022              		.loc 1 687 1 view .LVU1223
 4023 00b0 0DF2F47D 		addw	sp, sp, #2036
 4024              		.cfi_remember_state
 4025              		.cfi_def_cfa_offset 28
 4026              		@ sp needed
 4027 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4028              	.LVL472:
 4029              	.L280:
 4030              		.cfi_restore_state
 664:src/matrix.c  **** 		return NULL;
 4031              		.loc 1 664 3 is_stmt 1 view .LVU1224
 4032 00b8 1520     		movs	r0, #21
 4033              	.LVL473:
 664:src/matrix.c  **** 		return NULL;
 4034              		.loc 1 664 3 is_stmt 0 view .LVU1225
 4035 00ba FFF7FEFF 		bl	report_err
 4036              	.LVL474:
ARM GAS  /tmp/cc5NzCD8.s 			page 101


 4037              	.L300:
 665:src/matrix.c  **** 	}
 4038              		.loc 1 665 3 is_stmt 1 view .LVU1226
 665:src/matrix.c  **** 	}
 4039              		.loc 1 665 10 is_stmt 0 view .LVU1227
 4040 00be 0020     		movs	r0, #0
 4041              	.L276:
 4042              		.loc 1 687 1 view .LVU1228
 4043 00c0 0DF2F47D 		addw	sp, sp, #2036
 4044              		.cfi_remember_state
 4045              		.cfi_def_cfa_offset 28
 4046              		@ sp needed
 4047 00c4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4048              	.LVL475:
 4049              	.L282:
 4050              		.cfi_restore_state
 676:src/matrix.c  **** 		return NULL;
 4051              		.loc 1 676 3 is_stmt 1 view .LVU1229
 4052 00c8 1620     		movs	r0, #22
 4053              	.LVL476:
 676:src/matrix.c  **** 		return NULL;
 4054              		.loc 1 676 3 is_stmt 0 view .LVU1230
 4055 00ca FFF7FEFF 		bl	report_err
 4056              	.LVL477:
 677:src/matrix.c  **** 	}
 4057              		.loc 1 677 3 is_stmt 1 view .LVU1231
 677:src/matrix.c  **** 	}
 4058              		.loc 1 677 10 is_stmt 0 view .LVU1232
 4059 00ce 4846     		mov	r0, r9
 4060 00d0 F6E7     		b	.L276
 4061              	.LVL478:
 4062              	.L301:
 683:src/matrix.c  **** 	for (i=0; i<n; i++)
 4063              		.loc 1 683 2 is_stmt 1 view .LVU1233
 4064 00d2 6CA8     		add	r0, sp, #432
 4065 00d4 CDF80080 		str	r8, [sp]
 4066 00d8 05AA     		add	r2, sp, #20
 4067 00da 12AB     		add	r3, sp, #72
 4068 00dc 08A9     		add	r1, sp, #32
 4069 00de FFF7FEFF 		bl	matrix_pivoting_solve
 4070              	.LVL479:
 684:src/matrix.c  **** 		packed_from_number(cbase+i, cv+i);
 4071              		.loc 1 684 2 view .LVU1234
 684:src/matrix.c  **** 		packed_from_number(cbase+i, cv+i);
 4072              		.loc 1 684 12 view .LVU1235
 686:src/matrix.c  **** }
 4073              		.loc 1 686 9 is_stmt 0 view .LVU1236
 4074 00e2 3046     		mov	r0, r6
 4075 00e4 E4E7     		b	.L302
 4076              		.cfi_endproc
 4077              	.LFE28:
 4079 00e6 00BF     		.section	.text.matrix_lu_decomp,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	matrix_lu_decomp
 4083              		.syntax unified
 4084              		.thumb
ARM GAS  /tmp/cc5NzCD8.s 			page 102


 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	matrix_lu_decomp:
 4089              	.LVL480:
 4090              	.LFB29:
 688:src/matrix.c  **** 
 689:src/matrix.c  **** #ifdef MATRIX_LU_DECOMP
 690:src/matrix.c  **** /* Perform an in-situ LU decomposition of a user's matrix.
 691:src/matrix.c  ****  * Return the pivot descriptor.
 692:src/matrix.c  ****  */
 693:src/matrix.c  **** decNumber *matrix_lu_decomp(decNumber *r, const decNumber *m) {
 4091              		.loc 1 693 63 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 1688
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 694:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4095              		.loc 1 694 2 view .LVU1238
 695:src/matrix.c  **** 	int i, sign, n;
 4096              		.loc 1 695 2 view .LVU1239
 696:src/matrix.c  **** 	decNumber t, u;
 4097              		.loc 1 696 2 view .LVU1240
 697:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 4098              		.loc 1 697 2 view .LVU1241
 698:src/matrix.c  **** 	decimal64 *base;
 4099              		.loc 1 698 2 view .LVU1242
 699:src/matrix.c  **** 
 700:src/matrix.c  **** 	n = matrix_lu_check(m, mat, &base);
 4100              		.loc 1 700 2 view .LVU1243
 693:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4101              		.loc 1 693 63 is_stmt 0 view .LVU1244
 4102 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4103              		.cfi_def_cfa_offset 20
 4104              		.cfi_offset 4, -20
 4105              		.cfi_offset 5, -16
 4106              		.cfi_offset 6, -12
 4107              		.cfi_offset 7, -8
 4108              		.cfi_offset 14, -4
 4109 0002 ADF29C6D 		subw	sp, sp, #1692
 4110              		.cfi_def_cfa_offset 1712
 693:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4111              		.loc 1 693 63 view .LVU1245
 4112 0006 0646     		mov	r6, r0
 4113              		.loc 1 700 6 view .LVU1246
 4114 0008 6A46     		mov	r2, sp
 4115 000a 0846     		mov	r0, r1
 4116              	.LVL481:
 4117              		.loc 1 700 6 view .LVU1247
 4118 000c 16A9     		add	r1, sp, #88
 4119              	.LVL482:
 4120              		.loc 1 700 6 view .LVU1248
 4121 000e FFF7FEFF 		bl	matrix_lu_check
 4122              	.LVL483:
 701:src/matrix.c  **** 	if (n == 0)
 4123              		.loc 1 701 2 is_stmt 1 view .LVU1249
 4124              		.loc 1 701 5 is_stmt 0 view .LVU1250
 4125 0012 0746     		mov	r7, r0
 4126 0014 88B3     		cbz	r0, .L311
ARM GAS  /tmp/cc5NzCD8.s 			page 103


 702:src/matrix.c  **** 		return NULL;
 703:src/matrix.c  **** 
 704:src/matrix.c  **** 	sign = LU_decomposition(mat, pivots, n);
 4127              		.loc 1 704 2 is_stmt 1 view .LVU1251
 4128              		.loc 1 704 9 is_stmt 0 view .LVU1252
 4129 0016 0246     		mov	r2, r0
 4130 0018 01A9     		add	r1, sp, #4
 4131 001a 16A8     		add	r0, sp, #88
 4132              	.LVL484:
 4133              		.loc 1 704 9 view .LVU1253
 4134 001c FFF7FEFF 		bl	LU_decomposition
 4135              	.LVL485:
 705:src/matrix.c  **** 	if (sign == 0) {
 4136              		.loc 1 705 2 is_stmt 1 view .LVU1254
 4137              		.loc 1 705 5 is_stmt 0 view .LVU1255
 4138 0020 0346     		mov	r3, r0
 4139 0022 78B3     		cbz	r0, .L317
 706:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 707:src/matrix.c  **** 		return NULL;
 708:src/matrix.c  **** 	}
 709:src/matrix.c  **** 
 710:src/matrix.c  **** 	/* Build the pivot number */
 711:src/matrix.c  **** 	decNumberZero(r);
 4140              		.loc 1 711 2 is_stmt 1 view .LVU1256
 4141 0024 3046     		mov	r0, r6
 4142              	.LVL486:
 4143              		.loc 1 711 2 is_stmt 0 view .LVU1257
 4144 0026 FFF7FEFF 		bl	decNumberZero
 4145              	.LVL487:
 712:src/matrix.c  **** 	for (i=0; i<n; i++) {
 4146              		.loc 1 712 2 is_stmt 1 view .LVU1258
 4147              		.loc 1 712 12 view .LVU1259
 4148              		.loc 1 712 2 is_stmt 0 view .LVU1260
 4149 002a 002F     		cmp	r7, #0
 4150 002c 12DD     		ble	.L306
 4151 002e 01AC     		add	r4, sp, #4
 4152 0030 E519     		adds	r5, r4, r7
 4153              	.LVL488:
 4154              	.L307:
 713:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4155              		.loc 1 713 3 is_stmt 1 discriminator 3 view .LVU1261
 4156 0032 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 4157              	.LVL489:
 4158              		.loc 1 713 3 is_stmt 0 discriminator 3 view .LVU1262
 4159 0036 04A8     		add	r0, sp, #16
 4160 0038 FFF7FEFF 		bl	int_to_dn
 4161              	.LVL490:
 714:src/matrix.c  **** 		dn_mulpow10(&u, r, 1);
 4162              		.loc 1 714 3 is_stmt 1 discriminator 3 view .LVU1263
 4163 003c 0122     		movs	r2, #1
 4164 003e 3146     		mov	r1, r6
 4165 0040 0DA8     		add	r0, sp, #52
 4166 0042 FFF7FEFF 		bl	dn_mulpow10
 4167              	.LVL491:
 715:src/matrix.c  **** 		dn_add(r, &u, &t);
 4168              		.loc 1 715 3 discriminator 3 view .LVU1264
 4169 0046 04AA     		add	r2, sp, #16
ARM GAS  /tmp/cc5NzCD8.s 			page 104


 4170 0048 0DA9     		add	r1, sp, #52
 4171 004a 3046     		mov	r0, r6
 4172 004c FFF7FEFF 		bl	dn_add
 4173              	.LVL492:
 712:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4174              		.loc 1 712 17 discriminator 3 view .LVU1265
 712:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4175              		.loc 1 712 12 discriminator 3 view .LVU1266
 712:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4176              		.loc 1 712 2 is_stmt 0 discriminator 3 view .LVU1267
 4177 0050 AC42     		cmp	r4, r5
 4178 0052 EED1     		bne	.L307
 4179              	.LVL493:
 4180              	.L306:
 716:src/matrix.c  **** 	}
 717:src/matrix.c  **** 
 718:src/matrix.c  **** 	/* Copy the result back over the matrix */
 719:src/matrix.c  **** 	for (i=0; i<n*n; i++) {
 4181              		.loc 1 719 12 is_stmt 1 view .LVU1268
 4182              		.loc 1 719 15 is_stmt 0 view .LVU1269
 4183 0054 07FB07F7 		mul	r7, r7, r7
 4184              	.LVL494:
 4185              		.loc 1 719 15 view .LVU1270
 4186 0058 16AD     		add	r5, sp, #88
 693:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4187              		.loc 1 693 63 view .LVU1271
 4188 005a 0024     		movs	r4, #0
 4189              	.LVL495:
 4190              	.L309:
 720:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4191              		.loc 1 720 3 is_stmt 1 discriminator 3 view .LVU1272
 4192 005c 0098     		ldr	r0, [sp]
 4193 005e 2946     		mov	r1, r5
 4194 0060 00EBC400 		add	r0, r0, r4, lsl #3
 719:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4195              		.loc 1 719 20 is_stmt 0 discriminator 3 view .LVU1273
 4196 0064 0134     		adds	r4, r4, #1
 4197              	.LVL496:
 4198              		.loc 1 720 3 discriminator 3 view .LVU1274
 4199 0066 FFF7FEFF 		bl	packed_from_packed128
 4200              	.LVL497:
 719:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4201              		.loc 1 719 19 is_stmt 1 discriminator 3 view .LVU1275
 719:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4202              		.loc 1 719 12 discriminator 3 view .LVU1276
 719:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4203              		.loc 1 719 2 is_stmt 0 discriminator 3 view .LVU1277
 4204 006a A742     		cmp	r7, r4
 4205 006c 05F11005 		add	r5, r5, #16
 4206 0070 F4DC     		bgt	.L309
 721:src/matrix.c  **** 	}
 722:src/matrix.c  **** 	return r;
 723:src/matrix.c  **** }
 4207              		.loc 1 723 1 view .LVU1278
 4208 0072 3046     		mov	r0, r6
 4209 0074 0DF29C6D 		addw	sp, sp, #1692
 4210              		.cfi_remember_state
ARM GAS  /tmp/cc5NzCD8.s 			page 105


 4211              		.cfi_def_cfa_offset 20
 4212              		@ sp needed
 4213 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 4214              	.LVL498:
 4215              	.L311:
 4216              		.cfi_restore_state
 702:src/matrix.c  **** 
 4217              		.loc 1 702 10 view .LVU1279
 4218 007a 0646     		mov	r6, r0
 4219              	.LVL499:
 4220              		.loc 1 723 1 view .LVU1280
 4221 007c 3046     		mov	r0, r6
 4222              	.LVL500:
 4223              		.loc 1 723 1 view .LVU1281
 4224 007e 0DF29C6D 		addw	sp, sp, #1692
 4225              		.cfi_remember_state
 4226              		.cfi_def_cfa_offset 20
 4227              		@ sp needed
 4228 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 4229              	.LVL501:
 4230              	.L317:
 4231              		.cfi_restore_state
 706:src/matrix.c  **** 		return NULL;
 4232              		.loc 1 706 3 is_stmt 1 view .LVU1282
 4233 0084 1620     		movs	r0, #22
 4234              	.LVL502:
 707:src/matrix.c  **** 	}
 4235              		.loc 1 707 10 is_stmt 0 view .LVU1283
 4236 0086 1E46     		mov	r6, r3
 4237              	.LVL503:
 706:src/matrix.c  **** 		return NULL;
 4238              		.loc 1 706 3 view .LVU1284
 4239 0088 FFF7FEFF 		bl	report_err
 4240              	.LVL504:
 707:src/matrix.c  **** 	}
 4241              		.loc 1 707 3 is_stmt 1 view .LVU1285
 4242              		.loc 1 723 1 is_stmt 0 view .LVU1286
 4243 008c 3046     		mov	r0, r6
 4244 008e 0DF29C6D 		addw	sp, sp, #1692
 4245              		.cfi_def_cfa_offset 20
 4246              		@ sp needed
 4247 0092 F0BD     		pop	{r4, r5, r6, r7, pc}
 4248              		.loc 1 723 1 view .LVU1287
 4249              		.cfi_endproc
 4250              	.LFE29:
 4252              		.text
 4253              	.Letext0:
 4254              		.file 2 "src/decNumber/decContext.h"
 4255              		.file 3 "src/decNumber/decNumber.h"
 4256              		.file 4 "src/decNumber/decimal64.h"
 4257              		.file 5 "src/decNumber/decimal128.h"
 4258              		.file 6 "src/xeq.h"
 4259              		.file 7 "src/data.h"
 4260              		.file 8 "src/consts.h"
 4261              		.file 9 "src/decn.h"
ARM GAS  /tmp/cc5NzCD8.s 			page 106


DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/cc5NzCD8.s:18     .text.matrix_range_check:0000000000000000 $t
     /tmp/cc5NzCD8.s:26     .text.matrix_range_check:0000000000000000 matrix_range_check
     /tmp/cc5NzCD8.s:139    .text.matrix_range_check:000000000000006c $d
     /tmp/cc5NzCD8.s:144    .text.matrix_decompose:0000000000000000 $t
     /tmp/cc5NzCD8.s:151    .text.matrix_decompose:0000000000000000 matrix_decompose
     /tmp/cc5NzCD8.s:330    .text.matrix_decompose:000000000000009c $d
     /tmp/cc5NzCD8.s:336    .text.matrix_decomp:0000000000000000 $t
     /tmp/cc5NzCD8.s:343    .text.matrix_decomp:0000000000000000 matrix_decomp
     /tmp/cc5NzCD8.s:381    .text.matrix_do_loop:0000000000000000 $t
     /tmp/cc5NzCD8.s:388    .text.matrix_do_loop:0000000000000000 matrix_do_loop
     /tmp/cc5NzCD8.s:462    .text.matrix_lu_check:0000000000000000 $t
     /tmp/cc5NzCD8.s:469    .text.matrix_lu_check:0000000000000000 matrix_lu_check
     /tmp/cc5NzCD8.s:587    .text.LU_decomposition:0000000000000000 $t
     /tmp/cc5NzCD8.s:594    .text.LU_decomposition:0000000000000000 LU_decomposition
     /tmp/cc5NzCD8.s:1180   .text.matrix_pivoting_solve:0000000000000000 $t
     /tmp/cc5NzCD8.s:1187   .text.matrix_pivoting_solve:0000000000000000 matrix_pivoting_solve
     /tmp/cc5NzCD8.s:1475   .text.matrix_descriptor:0000000000000000 $t
     /tmp/cc5NzCD8.s:1482   .text.matrix_descriptor:0000000000000000 matrix_descriptor
     /tmp/cc5NzCD8.s:1559   .text.matrix_is_square:0000000000000000 $t
     /tmp/cc5NzCD8.s:1567   .text.matrix_is_square:0000000000000000 matrix_is_square
     /tmp/cc5NzCD8.s:1617   .text.matrix_copy:0000000000000000 $t
     /tmp/cc5NzCD8.s:1625   .text.matrix_copy:0000000000000000 matrix_copy
     /tmp/cc5NzCD8.s:1722   .text.matrix_all:0000000000000000 $t
     /tmp/cc5NzCD8.s:1730   .text.matrix_all:0000000000000000 matrix_all
     /tmp/cc5NzCD8.s:1801   .text.matrix_diag:0000000000000000 $t
     /tmp/cc5NzCD8.s:1809   .text.matrix_diag:0000000000000000 matrix_diag
     /tmp/cc5NzCD8.s:1892   .text.matrix_row:0000000000000000 $t
     /tmp/cc5NzCD8.s:1900   .text.matrix_row:0000000000000000 matrix_row
     /tmp/cc5NzCD8.s:2011   .text.matrix_col:0000000000000000 $t
     /tmp/cc5NzCD8.s:2019   .text.matrix_col:0000000000000000 matrix_col
     /tmp/cc5NzCD8.s:2130   .text.matrix_rowq:0000000000000000 $t
     /tmp/cc5NzCD8.s:2138   .text.matrix_rowq:0000000000000000 matrix_rowq
     /tmp/cc5NzCD8.s:2201   .text.matrix_colq:0000000000000000 $t
     /tmp/cc5NzCD8.s:2209   .text.matrix_colq:0000000000000000 matrix_colq
     /tmp/cc5NzCD8.s:2274   .text.matrix_getreg:0000000000000000 $t
     /tmp/cc5NzCD8.s:2282   .text.matrix_getreg:0000000000000000 matrix_getreg
     /tmp/cc5NzCD8.s:2431   .text.matrix_getrc:0000000000000000 $t
     /tmp/cc5NzCD8.s:2439   .text.matrix_getrc:0000000000000000 matrix_getrc
     /tmp/cc5NzCD8.s:2566   .text.matrix_genadd:0000000000000000 $t
     /tmp/cc5NzCD8.s:2574   .text.matrix_genadd:0000000000000000 matrix_genadd
     /tmp/cc5NzCD8.s:2755   .text.matrix_multiply:0000000000000000 $t
     /tmp/cc5NzCD8.s:2763   .text.matrix_multiply:0000000000000000 matrix_multiply
     /tmp/cc5NzCD8.s:3066   .text.matrix_transpose:0000000000000000 $t
     /tmp/cc5NzCD8.s:3074   .text.matrix_transpose:0000000000000000 matrix_transpose
     /tmp/cc5NzCD8.s:3257   .text.matrix_rowops:0000000000000000 $t
     /tmp/cc5NzCD8.s:3265   .text.matrix_rowops:0000000000000000 matrix_rowops
     /tmp/cc5NzCD8.s:3531   .text.matrix_determinant:0000000000000000 $t
     /tmp/cc5NzCD8.s:3539   .text.matrix_determinant:0000000000000000 matrix_determinant
     /tmp/cc5NzCD8.s:3661   .text.matrix_inverse:0000000000000000 $t
     /tmp/cc5NzCD8.s:3669   .text.matrix_inverse:0000000000000000 matrix_inverse
     /tmp/cc5NzCD8.s:3841   .text.matrix_linear_eqn:0000000000000000 $t
     /tmp/cc5NzCD8.s:3849   .text.matrix_linear_eqn:0000000000000000 matrix_linear_eqn
     /tmp/cc5NzCD8.s:4080   .text.matrix_lu_decomp:0000000000000000 $t
     /tmp/cc5NzCD8.s:4088   .text.matrix_lu_decomp:0000000000000000 matrix_lu_decomp

ARM GAS  /tmp/cc5NzCD8.s 			page 107


UNDEFINED SYMBOLS
is_dblmode
report_err
local_regs
PersistentRam
dn_mulpow10
dn_to_int
dn_abs
get_reg_n
int_to_dn
decimal64ToNumber
packed128_from_number
busy
decimal128ToNumber
dn_lt
decNumberCopy
dn_eq0
dn_divide
dn_multiply
dn_subtract
getX
fin_tst
xcopy
getY
setY
dn_add
packed_from_number
decNumberZero
getXYZT
swap_reg
get_const
packed_from_packed128

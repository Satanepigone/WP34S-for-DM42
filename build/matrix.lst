ARM GAS  /tmp/cc0YfLmr.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"matrix.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.matrix_range_check,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	matrix_range_check:
  27              	.LVL0:
  28              	.LFB2:
  29              		.file 1 "src/matrix.c"
   1:src/matrix.c  **** /* This file is part of 34S.
   2:src/matrix.c  ****  * 
   3:src/matrix.c  ****  * 34S is free software: you can redistribute it and/or modify
   4:src/matrix.c  ****  * it under the terms of the GNU General Public License as published by
   5:src/matrix.c  ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/matrix.c  ****  * (at your option) any later version.
   7:src/matrix.c  ****  * 
   8:src/matrix.c  ****  * 34S is distributed in the hope that it will be useful,
   9:src/matrix.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/matrix.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/matrix.c  ****  * GNU General Public License for more details.
  12:src/matrix.c  ****  * 
  13:src/matrix.c  ****  * You should have received a copy of the GNU General Public License
  14:src/matrix.c  ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/matrix.c  ****  */
  16:src/matrix.c  **** 
  17:src/matrix.c  **** #include "matrix.h"
  18:src/matrix.c  **** #include "decn.h"
  19:src/matrix.c  **** #include "consts.h"
  20:src/matrix.c  **** #include "decNumber/decimal128.h"
  21:src/matrix.c  **** #include "storage.h"
  22:src/matrix.c  **** 
  23:src/matrix.c  **** #define MAX_DIMENSION	100
  24:src/matrix.c  **** #define MAX_SQUARE	10
  25:src/matrix.c  **** 
  26:src/matrix.c  **** static int matrix_idx(int row, int col, int ncols) {
  27:src/matrix.c  **** 	return col + row * ncols;
  28:src/matrix.c  **** }
  29:src/matrix.c  **** 		
ARM GAS  /tmp/cc0YfLmr.s 			page 2


  30:src/matrix.c  **** static void matrix_get(decNumber *r, const decimal64 *base, int row, int col, int ncols) {
  31:src/matrix.c  **** 	decimal64ToNumber(base + matrix_idx(row, col, ncols), r);
  32:src/matrix.c  **** }
  33:src/matrix.c  **** 
  34:src/matrix.c  **** /* Check if a matrix fits into the available registers or not.
  35:src/matrix.c  ****  * Raise an error if not.
  36:src/matrix.c  ****  */
  37:src/matrix.c  **** static int matrix_range_check(int base, int rows, int cols) {
  30              		.loc 1 37 61 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  38:src/matrix.c  **** 	int limit = NumRegs;
  34              		.loc 1 38 2 view .LVU1
  37:src/matrix.c  **** 	int limit = NumRegs;
  35              		.loc 1 37 61 is_stmt 0 view .LVU2
  36 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  37              		.cfi_def_cfa_offset 32
  38              		.cfi_offset 3, -32
  39              		.cfi_offset 4, -28
  40              		.cfi_offset 5, -24
  41              		.cfi_offset 6, -20
  42              		.cfi_offset 7, -16
  43              		.cfi_offset 8, -12
  44              		.cfi_offset 9, -8
  45              		.cfi_offset 14, -4
  46              		.loc 1 38 14 view .LVU3
  47 0004 DFF86C80 		ldr	r8, .L13
  48 0008 D8F80030 		ldr	r3, [r8]
  49              	.LVL1:
  39:src/matrix.c  **** 	int s;
  50              		.loc 1 39 2 is_stmt 1 view .LVU4
  40:src/matrix.c  **** 
  41:src/matrix.c  **** 	if (is_intmode() || is_dblmode()) {
  51              		.loc 1 41 2 view .LVU5
  52              		.loc 1 41 6 is_stmt 0 view .LVU6
  53 000c 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
  54              		.loc 1 41 5 view .LVU7
  55 0010 EC07     		lsls	r4, r5, #31
  56 0012 1BD4     		bmi	.L4
  38:src/matrix.c  **** 	int s;
  57              		.loc 1 38 14 discriminator 1 view .LVU8
  58 0014 93F8CF97 		ldrb	r9, [r3, #1999]	@ zero_extendqisi2
  59 0018 0446     		mov	r4, r0
  60 001a 0F46     		mov	r7, r1
  61 001c 1646     		mov	r6, r2
  62              		.loc 1 41 22 discriminator 1 view .LVU9
  63 001e FFF7FEFF 		bl	is_dblmode
  64              	.LVL2:
  65              		.loc 1 41 19 discriminator 1 view .LVU10
  66 0022 0546     		mov	r5, r0
  67 0024 90B9     		cbnz	r0, .L4
  42:src/matrix.c  **** 		report_err(ERR_BAD_MODE);
  43:src/matrix.c  **** 		return 0;
  44:src/matrix.c  **** 	}
  45:src/matrix.c  **** 	if (base >= LOCAL_REG_BASE && LocalRegs < 0) {
  68              		.loc 1 45 2 is_stmt 1 view .LVU11
ARM GAS  /tmp/cc0YfLmr.s 			page 3


  69              		.loc 1 45 5 is_stmt 0 view .LVU12
  70 0026 6F2C     		cmp	r4, #111
  71 0028 17DD     		ble	.L5
  72              		.loc 1 45 32 discriminator 1 view .LVU13
  73 002a D8F80030 		ldr	r3, [r8]
  74 002e B3F8DE37 		ldrh	r3, [r3, #2014]
  75              		.loc 1 45 29 discriminator 1 view .LVU14
  76 0032 1B04     		lsls	r3, r3, #16
  77 0034 19D4     		bmi	.L12
  78              	.LVL3:
  79              	.L7:
  46:src/matrix.c  **** 		base -= LOCAL_REG_BASE;
  47:src/matrix.c  **** 		limit = local_regs();
  48:src/matrix.c  **** 	}
  49:src/matrix.c  **** 	s = rows * cols;
  80              		.loc 1 49 4 view .LVU15
  81 0036 06FB07F1 		mul	r1, r6, r7
  82              	.LVL4:
  50:src/matrix.c  **** 	if (base < 0 || base + s > limit || s > MAX_DIMENSION) {
  83              		.loc 1 50 23 view .LVU16
  84 003a 0C44     		add	r4, r4, r1
  85              	.LVL5:
  86              		.loc 1 50 15 view .LVU17
  87 003c 4C45     		cmp	r4, r9
  88 003e 0EDC     		bgt	.L8
  89              		.loc 1 50 35 discriminator 2 view .LVU18
  90 0040 6429     		cmp	r1, #100
  91 0042 0CDC     		bgt	.L8
  51:src/matrix.c  **** 		report_err(ERR_RANGE);
  52:src/matrix.c  **** 		return 0;
  53:src/matrix.c  **** 	}
  54:src/matrix.c  **** 	return 1;
  92              		.loc 1 54 9 view .LVU19
  93 0044 0125     		movs	r5, #1
  55:src/matrix.c  **** }
  94              		.loc 1 55 1 view .LVU20
  95 0046 2846     		mov	r0, r5
  96 0048 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
  97              	.LVL6:
  98              	.L4:
  42:src/matrix.c  **** 		return 0;
  99              		.loc 1 42 3 is_stmt 1 view .LVU21
  43:src/matrix.c  **** 	}
 100              		.loc 1 43 10 is_stmt 0 view .LVU22
 101 004c 0025     		movs	r5, #0
  42:src/matrix.c  **** 		return 0;
 102              		.loc 1 42 3 view .LVU23
 103 004e 0D20     		movs	r0, #13
 104 0050 FFF7FEFF 		bl	report_err
 105              	.LVL7:
  43:src/matrix.c  **** 	}
 106              		.loc 1 43 3 is_stmt 1 view .LVU24
 107              		.loc 1 55 1 is_stmt 0 view .LVU25
 108 0054 2846     		mov	r0, r5
 109 0056 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 110              	.LVL8:
 111              	.L5:
ARM GAS  /tmp/cc0YfLmr.s 			page 4


  49:src/matrix.c  **** 	if (base < 0 || base + s > limit || s > MAX_DIMENSION) {
 112              		.loc 1 49 2 is_stmt 1 view .LVU26
  50:src/matrix.c  **** 		report_err(ERR_RANGE);
 113              		.loc 1 50 2 view .LVU27
  50:src/matrix.c  **** 		report_err(ERR_RANGE);
 114              		.loc 1 50 5 is_stmt 0 view .LVU28
 115 005a 002C     		cmp	r4, #0
 116 005c EBDA     		bge	.L7
 117              	.LVL9:
 118              	.L8:
  51:src/matrix.c  **** 		return 0;
 119              		.loc 1 51 3 is_stmt 1 view .LVU29
 120 005e 0820     		movs	r0, #8
 121 0060 FFF7FEFF 		bl	report_err
 122              	.LVL10:
  52:src/matrix.c  **** 	}
 123              		.loc 1 52 3 view .LVU30
 124              		.loc 1 55 1 is_stmt 0 view .LVU31
 125 0064 2846     		mov	r0, r5
 126 0066 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 127              	.LVL11:
 128              	.L12:
  46:src/matrix.c  **** 		limit = local_regs();
 129              		.loc 1 46 3 is_stmt 1 view .LVU32
  47:src/matrix.c  **** 	}
 130              		.loc 1 47 11 is_stmt 0 view .LVU33
 131 006a FFF7FEFF 		bl	local_regs
 132              	.LVL12:
  46:src/matrix.c  **** 		limit = local_regs();
 133              		.loc 1 46 8 view .LVU34
 134 006e 703C     		subs	r4, r4, #112
 135              	.LVL13:
  47:src/matrix.c  **** 	}
 136              		.loc 1 47 3 is_stmt 1 view .LVU35
  47:src/matrix.c  **** 	}
 137              		.loc 1 47 11 is_stmt 0 view .LVU36
 138 0070 8146     		mov	r9, r0
 139              	.LVL14:
  47:src/matrix.c  **** 	}
 140              		.loc 1 47 11 view .LVU37
 141 0072 E0E7     		b	.L7
 142              	.L14:
 143              		.align	2
 144              	.L13:
 145 0074 00000000 		.word	main_ram
 146              		.cfi_endproc
 147              	.LFE2:
 149              		.section	.text.matrix_decompose,"ax",%progbits
 150              		.align	1
 151              		.p2align 2,,3
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	matrix_decompose:
 158              	.LVL15:
 159              	.LFB4:
ARM GAS  /tmp/cc0YfLmr.s 			page 5


  56:src/matrix.c  **** 
  57:src/matrix.c  **** /* Build a matrix descriptor from the base, rows and columns.
  58:src/matrix.c  ****  */
  59:src/matrix.c  **** static int matrix_descriptor(decNumber *r, int base, int rows, int cols) {
  60:src/matrix.c  **** 	decNumber z;
  61:src/matrix.c  **** 
  62:src/matrix.c  **** 	if (! matrix_range_check(base, rows, cols))
  63:src/matrix.c  **** 		return 0;
  64:src/matrix.c  **** 	int_to_dn(&z, (base * 100 + rows) * 100 + cols);
  65:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
  66:src/matrix.c  **** 	return 1;
  67:src/matrix.c  **** }
  68:src/matrix.c  **** 
  69:src/matrix.c  **** /* Take a matrix descriptor and return the base register number.
  70:src/matrix.c  ****  * Optionally return the number of rows and columns in the matrix.
  71:src/matrix.c  ****  * Optionally return the sign of the initial descriptor as well.
  72:src/matrix.c  ****  */
  73:src/matrix.c  **** static int matrix_decompose(const decNumber *x, int *rows, int *cols, int *up) {
 160              		.loc 1 73 80 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 72
 163              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/matrix.c  **** 	decNumber ax, y;
 164              		.loc 1 74 2 view .LVU39
  75:src/matrix.c  **** 	unsigned int n, base;
 165              		.loc 1 75 2 view .LVU40
  76:src/matrix.c  **** 	int r, c, u;
 166              		.loc 1 76 2 view .LVU41
  77:src/matrix.c  **** 
  78:src/matrix.c  **** 	if (decNumberIsNegative(x)) {
 167              		.loc 1 78 2 view .LVU42
  73:src/matrix.c  **** 	decNumber ax, y;
 168              		.loc 1 73 80 is_stmt 0 view .LVU43
 169 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 170              		.cfi_def_cfa_offset 24
 171              		.cfi_offset 4, -24
 172              		.cfi_offset 5, -20
 173              		.cfi_offset 6, -16
 174              		.cfi_offset 7, -12
 175              		.cfi_offset 8, -8
 176              		.cfi_offset 14, -4
 177              		.loc 1 78 5 view .LVU44
 178 0004 90F90850 		ldrsb	r5, [r0, #8]
 179 0008 002D     		cmp	r5, #0
  73:src/matrix.c  **** 	decNumber ax, y;
 180              		.loc 1 73 80 view .LVU45
 181 000a 92B0     		sub	sp, sp, #72
 182              		.cfi_def_cfa_offset 96
  73:src/matrix.c  **** 	decNumber ax, y;
 183              		.loc 1 73 80 view .LVU46
 184 000c 0E46     		mov	r6, r1
 185 000e 1746     		mov	r7, r2
 186 0010 1C46     		mov	r4, r3
 187              		.loc 1 78 5 view .LVU47
 188 0012 37DB     		blt	.L40
  79:src/matrix.c  **** 		dn_abs(&ax, x);
  80:src/matrix.c  **** 		x = &ax;
ARM GAS  /tmp/cc0YfLmr.s 			page 6


  81:src/matrix.c  **** 		u = 0;
  82:src/matrix.c  **** 	} else
  83:src/matrix.c  **** 		u = 1;
 189              		.loc 1 83 5 view .LVU48
 190 0014 0123     		movs	r3, #1
 191              	.LVL16:
 192              	.L16:
  84:src/matrix.c  **** 	if (up)		*up = u;
 193              		.loc 1 84 2 is_stmt 1 view .LVU49
 194              		.loc 1 84 5 is_stmt 0 view .LVU50
 195 0016 04B1     		cbz	r4, .L17
 196              		.loc 1 84 11 is_stmt 1 discriminator 1 view .LVU51
 197              		.loc 1 84 15 is_stmt 0 discriminator 1 view .LVU52
 198 0018 2360     		str	r3, [r4]
 199              	.L17:
  85:src/matrix.c  **** 
  86:src/matrix.c  **** 	dn_mulpow10(&y, x, 4);
 200              		.loc 1 86 2 is_stmt 1 view .LVU53
 201 001a 0146     		mov	r1, r0
 202 001c 0422     		movs	r2, #4
 203 001e 09A8     		add	r0, sp, #36
 204              	.LVL17:
 205              		.loc 1 86 2 is_stmt 0 view .LVU54
 206 0020 FFF7FEFF 		bl	dn_mulpow10
 207              	.LVL18:
  87:src/matrix.c  **** 	n = dn_to_int(&y);
 208              		.loc 1 87 2 is_stmt 1 view .LVU55
 209              		.loc 1 87 6 is_stmt 0 view .LVU56
 210 0024 09A8     		add	r0, sp, #36
 211 0026 FFF7FEFF 		bl	dn_to_int
 212              	.LVL19:
  88:src/matrix.c  **** 	base = n / 10000;
  89:src/matrix.c  **** 	c = n % 100;
 213              		.loc 1 89 8 view .LVU57
 214 002a 1C4D     		ldr	r5, .L42
  88:src/matrix.c  **** 	base = n / 10000;
 215              		.loc 1 88 7 view .LVU58
 216 002c 1C4C     		ldr	r4, .L42+4
 217              	.LVL20:
  88:src/matrix.c  **** 	base = n / 10000;
 218              		.loc 1 88 2 is_stmt 1 view .LVU59
 219              		.loc 1 89 8 is_stmt 0 view .LVU60
 220 002e A5FB0032 		umull	r3, r2, r5, r0
  90:src/matrix.c  **** 	r = (n / 100) % 100;
 221              		.loc 1 90 9 view .LVU61
 222 0032 4FEA521C 		lsr	ip, r2, #5
  89:src/matrix.c  **** 	r = (n / 100) % 100;
 223              		.loc 1 89 8 view .LVU62
 224 0036 6421     		movs	r1, #100
 225              		.loc 1 90 16 view .LVU63
 226 0038 A5FB0C35 		umull	r3, r5, r5, ip
 227 003c 6D09     		lsrs	r5, r5, #5
  88:src/matrix.c  **** 	base = n / 10000;
 228              		.loc 1 88 7 view .LVU64
 229 003e A4FB0034 		umull	r3, r4, r4, r0
  89:src/matrix.c  **** 	r = (n / 100) % 100;
 230              		.loc 1 89 8 view .LVU65
ARM GAS  /tmp/cc0YfLmr.s 			page 7


 231 0042 01FB1C02 		mls	r2, r1, ip, r0
 232              		.loc 1 90 16 view .LVU66
 233 0046 01FB15C5 		mls	r5, r1, r5, ip
  88:src/matrix.c  **** 	base = n / 10000;
 234              		.loc 1 88 7 view .LVU67
 235 004a 640B     		lsrs	r4, r4, #13
 236              	.LVL21:
  89:src/matrix.c  **** 	r = (n / 100) % 100;
 237              		.loc 1 89 2 is_stmt 1 view .LVU68
 238              		.loc 1 90 2 view .LVU69
  91:src/matrix.c  **** 	if (c == 0)
 239              		.loc 1 91 2 view .LVU70
 240              		.loc 1 91 5 is_stmt 0 view .LVU71
 241 004c 82B9     		cbnz	r2, .L18
  92:src/matrix.c  **** 		c = r;
 242              		.loc 1 92 3 is_stmt 1 view .LVU72
 243              	.LVL22:
  93:src/matrix.c  **** 	if (! matrix_range_check(base, r, c))
 244              		.loc 1 93 2 view .LVU73
 245              		.loc 1 93 8 is_stmt 0 view .LVU74
 246 004e 2046     		mov	r0, r4
 247              	.LVL23:
 248              		.loc 1 93 8 view .LVU75
 249 0050 2A46     		mov	r2, r5
 250 0052 2946     		mov	r1, r5
 251 0054 FFF7FEFF 		bl	matrix_range_check
 252              	.LVL24:
 253              		.loc 1 93 5 view .LVU76
 254 0058 88B1     		cbz	r0, .L39
  94:src/matrix.c  **** 		return -1;
  95:src/matrix.c  **** 	if (c == 0) {
 255              		.loc 1 95 2 is_stmt 1 view .LVU77
 256 005a A846     		mov	r8, r5
 257              		.loc 1 95 5 is_stmt 0 view .LVU78
 258 005c CDB1     		cbz	r5, .L41
 259              	.LVL25:
 260              	.L21:
  96:src/matrix.c  **** 		report_err(ERR_BAD_PARAM);
  97:src/matrix.c  **** 		return -1;
  98:src/matrix.c  **** 	}
  99:src/matrix.c  **** 	if (rows)	*rows = r;
 261              		.loc 1 99 2 is_stmt 1 view .LVU79
 262              		.loc 1 99 5 is_stmt 0 view .LVU80
 263 005e 06B1     		cbz	r6, .L22
 264              		.loc 1 99 12 is_stmt 1 discriminator 1 view .LVU81
 265              		.loc 1 99 18 is_stmt 0 discriminator 1 view .LVU82
 266 0060 3560     		str	r5, [r6]
 267              	.L22:
 100:src/matrix.c  **** 	if (cols)	*cols = c;
 268              		.loc 1 100 2 is_stmt 1 view .LVU83
 269              		.loc 1 100 5 is_stmt 0 view .LVU84
 270 0062 0FB1     		cbz	r7, .L15
 271              		.loc 1 100 12 is_stmt 1 discriminator 1 view .LVU85
 272              		.loc 1 100 18 is_stmt 0 discriminator 1 view .LVU86
 273 0064 C7F80080 		str	r8, [r7]
 274              	.LVL26:
 275              	.L15:
ARM GAS  /tmp/cc0YfLmr.s 			page 8


 101:src/matrix.c  **** 	return base;
 102:src/matrix.c  **** }
 276              		.loc 1 102 1 view .LVU87
 277 0068 2046     		mov	r0, r4
 278 006a 12B0     		add	sp, sp, #72
 279              		.cfi_remember_state
 280              		.cfi_def_cfa_offset 24
 281              		@ sp needed
 282 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 283              	.LVL27:
 284              	.L18:
 285              		.cfi_restore_state
  93:src/matrix.c  **** 		return -1;
 286              		.loc 1 93 8 view .LVU88
 287 0070 2046     		mov	r0, r4
 288              	.LVL28:
  93:src/matrix.c  **** 		return -1;
 289              		.loc 1 93 8 view .LVU89
 290 0072 2946     		mov	r1, r5
  89:src/matrix.c  **** 	r = (n / 100) % 100;
 291              		.loc 1 89 4 view .LVU90
 292 0074 9046     		mov	r8, r2
  93:src/matrix.c  **** 		return -1;
 293              		.loc 1 93 2 is_stmt 1 view .LVU91
  93:src/matrix.c  **** 		return -1;
 294              		.loc 1 93 8 is_stmt 0 view .LVU92
 295 0076 FFF7FEFF 		bl	matrix_range_check
 296              	.LVL29:
  93:src/matrix.c  **** 		return -1;
 297              		.loc 1 93 5 view .LVU93
 298 007a 0028     		cmp	r0, #0
 299 007c EFD1     		bne	.L21
 300              	.LVL30:
 301              	.L39:
  97:src/matrix.c  **** 	}
 302              		.loc 1 97 3 is_stmt 1 view .LVU94
  97:src/matrix.c  **** 	}
 303              		.loc 1 97 10 is_stmt 0 view .LVU95
 304 007e 4FF0FF34 		mov	r4, #-1
 305              	.LVL31:
  97:src/matrix.c  **** 	}
 306              		.loc 1 97 10 view .LVU96
 307 0082 F1E7     		b	.L15
 308              	.LVL32:
 309              	.L40:
  79:src/matrix.c  **** 		x = &ax;
 310              		.loc 1 79 3 is_stmt 1 view .LVU97
 311 0084 0146     		mov	r1, r0
 312              	.LVL33:
  79:src/matrix.c  **** 		x = &ax;
 313              		.loc 1 79 3 is_stmt 0 view .LVU98
 314 0086 6846     		mov	r0, sp
 315              	.LVL34:
  79:src/matrix.c  **** 		x = &ax;
 316              		.loc 1 79 3 view .LVU99
 317 0088 FFF7FEFF 		bl	dn_abs
 318              	.LVL35:
ARM GAS  /tmp/cc0YfLmr.s 			page 9


  80:src/matrix.c  **** 		u = 0;
 319              		.loc 1 80 3 is_stmt 1 view .LVU100
  81:src/matrix.c  **** 	} else
 320              		.loc 1 81 3 view .LVU101
  80:src/matrix.c  **** 		u = 0;
 321              		.loc 1 80 5 is_stmt 0 view .LVU102
 322 008c 6846     		mov	r0, sp
  81:src/matrix.c  **** 	} else
 323              		.loc 1 81 5 view .LVU103
 324 008e 0023     		movs	r3, #0
 325 0090 C1E7     		b	.L16
 326              	.LVL36:
 327              	.L41:
  96:src/matrix.c  **** 		return -1;
 328              		.loc 1 96 3 is_stmt 1 view .LVU104
 329 0092 1020     		movs	r0, #16
 330 0094 FFF7FEFF 		bl	report_err
 331              	.LVL37:
 332 0098 F1E7     		b	.L39
 333              	.L43:
 334 009a 00BF     		.align	2
 335              	.L42:
 336 009c 1F85EB51 		.word	1374389535
 337 00a0 5917B7D1 		.word	-776530087
 338              		.cfi_endproc
 339              	.LFE4:
 341              		.section	.text.matrix_decomp,"ax",%progbits
 342              		.align	1
 343              		.p2align 2,,3
 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 347              		.fpu fpv4-sp-d16
 349              	matrix_decomp:
 350              	.LVL38:
 351              	.LFB5:
 103:src/matrix.c  **** 
 104:src/matrix.c  **** /* Decompose a matrix descriptor and return a pointer to its first
 105:src/matrix.c  ****  * element.  Optionally return the number of rows and columns.
 106:src/matrix.c  ****  */
 107:src/matrix.c  **** static decimal64 *matrix_decomp(const decNumber *x, int *rows, int *cols) {
 352              		.loc 1 107 75 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 108:src/matrix.c  **** 	const int base = matrix_decompose(x, rows, cols, NULL);
 356              		.loc 1 108 2 view .LVU106
 107:src/matrix.c  **** 	const int base = matrix_decompose(x, rows, cols, NULL);
 357              		.loc 1 107 75 is_stmt 0 view .LVU107
 358 0000 08B5     		push	{r3, lr}
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 3, -8
 361              		.cfi_offset 14, -4
 362              		.loc 1 108 19 view .LVU108
 363 0002 0023     		movs	r3, #0
 364 0004 FFF7FEFF 		bl	matrix_decompose
 365              	.LVL39:
ARM GAS  /tmp/cc0YfLmr.s 			page 10


 109:src/matrix.c  **** 
 110:src/matrix.c  **** 	if (base < 0)
 366              		.loc 1 110 2 is_stmt 1 view .LVU109
 367              		.loc 1 110 5 is_stmt 0 view .LVU110
 368 0008 0028     		cmp	r0, #0
 369 000a 02DB     		blt	.L46
 111:src/matrix.c  **** 		return NULL;
 112:src/matrix.c  **** 	return &(get_reg_n(base)->s);
 370              		.loc 1 112 2 is_stmt 1 view .LVU111
 371              		.loc 1 112 11 is_stmt 0 view .LVU112
 372 000c FFF7FEFF 		bl	get_reg_n
 373              	.LVL40:
 113:src/matrix.c  **** }
 374              		.loc 1 113 1 view .LVU113
 375 0010 08BD     		pop	{r3, pc}
 376              	.LVL41:
 377              	.L46:
 111:src/matrix.c  **** 		return NULL;
 378              		.loc 1 111 10 view .LVU114
 379 0012 0020     		movs	r0, #0
 380              	.LVL42:
 381              		.loc 1 113 1 view .LVU115
 382 0014 08BD     		pop	{r3, pc}
 383              		.cfi_endproc
 384              	.LFE5:
 386 0016 00BF     		.section	.text.matrix_do_loop,"ax",%progbits
 387              		.align	1
 388              		.p2align 2,,3
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu fpv4-sp-d16
 394              	matrix_do_loop:
 395              	.LVL43:
 396              	.LFB8:
 114:src/matrix.c  **** 
 115:src/matrix.c  **** /* Check if a matrix is square or not.
 116:src/matrix.c  ****  */
 117:src/matrix.c  **** void matrix_is_square(enum nilop op) {
 118:src/matrix.c  **** 	int r, c;
 119:src/matrix.c  **** 	decNumber x;
 120:src/matrix.c  **** 
 121:src/matrix.c  **** 	getX(&x);
 122:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 123:src/matrix.c  **** 		return;
 124:src/matrix.c  **** 	fin_tst(r == c);
 125:src/matrix.c  **** }
 126:src/matrix.c  **** 
 127:src/matrix.c  **** #ifdef SILLY_MATRIX_SUPPORT
 128:src/matrix.c  **** /* Create either a zero matrix or an identity matrix.
 129:src/matrix.c  ****  */
 130:src/matrix.c  **** void matrix_create(enum nilop op) {
 131:src/matrix.c  **** 	decNumber x;
 132:src/matrix.c  **** 	int r, c, i, j;
 133:src/matrix.c  **** 	decimal64 *base;
 134:src/matrix.c  **** 	const decimal64 *diag, *off;
 135:src/matrix.c  **** 
ARM GAS  /tmp/cc0YfLmr.s 			page 11


 136:src/matrix.c  **** 	getX(&x);
 137:src/matrix.c  **** 	base = matrix_decomp(&x, &r, &c);
 138:src/matrix.c  **** 	if (base != NULL) {
 139:src/matrix.c  **** 		off = get_const(OP_ZERO, 0)->s;
 140:src/matrix.c  **** 
 141:src/matrix.c  **** 		if (op == OP_MAT_IDENT) {
 142:src/matrix.c  **** 			if (r != c) {
 143:src/matrix.c  **** 				report_err(ERR_MATRIX_DIM);
 144:src/matrix.c  **** 				return;
 145:src/matrix.c  **** 			}
 146:src/matrix.c  **** 			diag = get_const(OP_ONE, 0)->s;
 147:src/matrix.c  **** 		} else
 148:src/matrix.c  **** 			diag = off;
 149:src/matrix.c  **** 
 150:src/matrix.c  **** 		for (i=0; i<r; i++)
 151:src/matrix.c  **** 			for (j=0; j<c; j++)
 152:src/matrix.c  **** 				*base++ = *((i==j)?diag:off);
 153:src/matrix.c  **** 	}
 154:src/matrix.c  **** }
 155:src/matrix.c  **** #endif
 156:src/matrix.c  **** 
 157:src/matrix.c  **** /* Matrix copy
 158:src/matrix.c  ****  */
 159:src/matrix.c  **** decNumber *matrix_copy(decNumber *r, const decNumber *y, const decNumber *x) {
 160:src/matrix.c  **** 	decimal64 *src;
 161:src/matrix.c  **** 	int rows, cols, d;
 162:src/matrix.c  **** 
 163:src/matrix.c  **** 	src = matrix_decomp(y, &rows, &cols);
 164:src/matrix.c  **** 	if (src == NULL)
 165:src/matrix.c  **** 		return NULL;
 166:src/matrix.c  **** 
 167:src/matrix.c  **** 	d = dn_to_int(x);
 168:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 169:src/matrix.c  **** 		return NULL;
 170:src/matrix.c  **** 	xcopy(get_reg_n(d), src, rows * cols * sizeof(decimal64));
 171:src/matrix.c  **** 	return r;
 172:src/matrix.c  **** }
 173:src/matrix.c  **** 
 174:src/matrix.c  **** 
 175:src/matrix.c  **** static decNumber *matrix_do_loop(decNumber *r, int low, int high, int step, int up) {
 397              		.loc 1 175 85 is_stmt 1 view -0
 398              		.cfi_startproc
 399              		@ args = 4, pretend = 0, frame = 40
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 176:src/matrix.c  **** 	decNumber z;
 401              		.loc 1 176 2 view .LVU117
 177:src/matrix.c  **** 	int i;
 402              		.loc 1 177 2 view .LVU118
 178:src/matrix.c  **** 
 179:src/matrix.c  **** 	if (up) {
 403              		.loc 1 179 2 view .LVU119
 175:src/matrix.c  **** 	decNumber z;
 404              		.loc 1 175 85 is_stmt 0 view .LVU120
 405 0000 30B5     		push	{r4, r5, lr}
 406              		.cfi_def_cfa_offset 12
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
ARM GAS  /tmp/cc0YfLmr.s 			page 12


 409              		.cfi_offset 14, -4
 410 0002 8BB0     		sub	sp, sp, #44
 411              		.cfi_def_cfa_offset 56
 175:src/matrix.c  **** 	decNumber z;
 412              		.loc 1 175 85 view .LVU121
 413 0004 0446     		mov	r4, r0
 414 0006 0E9D     		ldr	r5, [sp, #56]
 180:src/matrix.c  **** 		i = (low * 1000 + high) * 100 + step;
 415              		.loc 1 180 12 view .LVU122
 416 0008 4FF47A70 		mov	r0, #1000
 417              	.LVL44:
 179:src/matrix.c  **** 		i = (low * 1000 + high) * 100 + step;
 418              		.loc 1 179 5 view .LVU123
 419 000c 85B1     		cbz	r5, .L49
 420              		.loc 1 180 3 is_stmt 1 view .LVU124
 421              		.loc 1 180 19 is_stmt 0 view .LVU125
 422 000e 00FB0121 		mla	r1, r0, r1, r2
 423              	.LVL45:
 424              		.loc 1 180 27 view .LVU126
 425 0012 6422     		movs	r2, #100
 426              	.LVL46:
 427              		.loc 1 180 5 view .LVU127
 428 0014 02FB0131 		mla	r1, r2, r1, r3
 429              	.LVL47:
 430              	.L50:
 181:src/matrix.c  **** 	} else {
 182:src/matrix.c  **** 		i = (high * 1000 + low) * 100 + step;
 183:src/matrix.c  **** 	}
 184:src/matrix.c  **** 	int_to_dn(&z, i);
 431              		.loc 1 184 2 is_stmt 1 view .LVU128
 432 0018 01A8     		add	r0, sp, #4
 433 001a FFF7FEFF 		bl	int_to_dn
 434              	.LVL48:
 185:src/matrix.c  **** 	dn_mulpow10(r, &z, -5);
 435              		.loc 1 185 2 view .LVU129
 436 001e 01A9     		add	r1, sp, #4
 437 0020 6FF00402 		mvn	r2, #4
 438 0024 2046     		mov	r0, r4
 439 0026 FFF7FEFF 		bl	dn_mulpow10
 440              	.LVL49:
 186:src/matrix.c  **** 	return r;
 441              		.loc 1 186 2 view .LVU130
 187:src/matrix.c  **** }
 442              		.loc 1 187 1 is_stmt 0 view .LVU131
 443 002a 2046     		mov	r0, r4
 444 002c 0BB0     		add	sp, sp, #44
 445              		.cfi_remember_state
 446              		.cfi_def_cfa_offset 12
 447              		@ sp needed
 448 002e 30BD     		pop	{r4, r5, pc}
 449              	.LVL50:
 450              	.L49:
 451              		.cfi_restore_state
 182:src/matrix.c  **** 	}
 452              		.loc 1 182 3 is_stmt 1 view .LVU132
 182:src/matrix.c  **** 	}
 453              		.loc 1 182 20 is_stmt 0 view .LVU133
ARM GAS  /tmp/cc0YfLmr.s 			page 13


 454 0030 00FB0211 		mla	r1, r0, r2, r1
 455              	.LVL51:
 182:src/matrix.c  **** 	}
 456              		.loc 1 182 27 view .LVU134
 457 0034 6422     		movs	r2, #100
 458              	.LVL52:
 182:src/matrix.c  **** 	}
 459              		.loc 1 182 5 view .LVU135
 460 0036 02FB0131 		mla	r1, r2, r1, r3
 461              	.LVL53:
 182:src/matrix.c  **** 	}
 462              		.loc 1 182 5 view .LVU136
 463 003a EDE7     		b	.L50
 464              		.cfi_endproc
 465              	.LFE8:
 467              		.section	.text.matrix_lu_check,"ax",%progbits
 468              		.align	1
 469              		.p2align 2,,3
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	matrix_lu_check:
 476              	.LVL54:
 477              	.LFB25:
 188:src/matrix.c  **** 
 189:src/matrix.c  **** decNumber *matrix_all(decNumber *r, const decNumber *x) {
 190:src/matrix.c  **** 	int rows, cols, base, up;
 191:src/matrix.c  **** 
 192:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 193:src/matrix.c  **** 	if (base < 0)
 194:src/matrix.c  **** 		return NULL;
 195:src/matrix.c  **** 	return matrix_do_loop(r, base, base+rows*cols-1, 1, up);
 196:src/matrix.c  **** }
 197:src/matrix.c  **** 
 198:src/matrix.c  **** decNumber *matrix_diag(decNumber *r, const decNumber *x) {
 199:src/matrix.c  **** 	int rows, cols, base, up, n;
 200:src/matrix.c  **** 
 201:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 202:src/matrix.c  **** 	if (base < 0)
 203:src/matrix.c  **** 		return NULL;
 204:src/matrix.c  **** 	n = ((rows < cols) ? rows : cols) - 1;
 205:src/matrix.c  **** 	cols++;
 206:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 207:src/matrix.c  **** }
 208:src/matrix.c  **** 
 209:src/matrix.c  **** decNumber *matrix_row(decNumber *r, const decNumber *y, const decNumber *x) {
 210:src/matrix.c  **** 	int rows, cols, base, up, n;
 211:src/matrix.c  **** 
 212:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 213:src/matrix.c  **** 	if (base < 0)
 214:src/matrix.c  **** 		return NULL;
 215:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 216:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 217:src/matrix.c  **** 		report_err(ERR_RANGE);
 218:src/matrix.c  **** 		return NULL;
 219:src/matrix.c  **** 	}
ARM GAS  /tmp/cc0YfLmr.s 			page 14


 220:src/matrix.c  **** 	base += n*cols;
 221:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols - 1, 1, up);
 222:src/matrix.c  **** }
 223:src/matrix.c  **** 
 224:src/matrix.c  **** decNumber *matrix_col(decNumber *r, const decNumber *y, const decNumber *x) {
 225:src/matrix.c  **** 	int rows, cols, base, up, n;
 226:src/matrix.c  **** 
 227:src/matrix.c  **** 	base = matrix_decompose(x, &rows, &cols, &up);
 228:src/matrix.c  **** 	if (base < 0)
 229:src/matrix.c  **** 		return NULL;
 230:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 231:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 232:src/matrix.c  **** 		report_err(ERR_RANGE);
 233:src/matrix.c  **** 		return NULL;
 234:src/matrix.c  **** 	}
 235:src/matrix.c  **** 	base += n;
 236:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols * (rows-1), cols, up);
 237:src/matrix.c  **** }
 238:src/matrix.c  **** 
 239:src/matrix.c  **** decNumber *matrix_rowq(decNumber *r, const decNumber *x) {
 240:src/matrix.c  **** 	int rows;
 241:src/matrix.c  **** 
 242:src/matrix.c  **** 	if (matrix_decompose(x, &rows, NULL, NULL) < 0)
 243:src/matrix.c  **** 		return NULL;
 244:src/matrix.c  **** 	int_to_dn(r, rows);
 245:src/matrix.c  **** 	return r;
 246:src/matrix.c  **** }
 247:src/matrix.c  **** 
 248:src/matrix.c  **** decNumber *matrix_colq(decNumber *r, const decNumber *x) {
 249:src/matrix.c  **** 	int cols;
 250:src/matrix.c  **** 
 251:src/matrix.c  **** 	if (matrix_decompose(x, NULL, &cols, NULL) < 0)
 252:src/matrix.c  **** 		return NULL;
 253:src/matrix.c  **** 	int_to_dn(r, cols);
 254:src/matrix.c  **** 	return r;
 255:src/matrix.c  **** }
 256:src/matrix.c  **** 
 257:src/matrix.c  **** decNumber *matrix_getreg(decNumber *r, const decNumber *cdn, const decNumber *rdn, const decNumber 
 258:src/matrix.c  **** 	int h, w, ri, ci;
 259:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 260:src/matrix.c  **** 
 261:src/matrix.c  **** 	if (n < 0)
 262:src/matrix.c  **** 		return NULL;
 263:src/matrix.c  **** 	ri = dn_to_int(rdn) - 1;
 264:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 265:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 266:src/matrix.c  **** 		report_err(ERR_RANGE);
 267:src/matrix.c  **** 		return NULL;
 268:src/matrix.c  **** 	}
 269:src/matrix.c  **** 	n += matrix_idx(ri, ci, w);
 270:src/matrix.c  **** 	int_to_dn(r, n);
 271:src/matrix.c  **** 	return r;
 272:src/matrix.c  **** }
 273:src/matrix.c  **** 
 274:src/matrix.c  **** decNumber *matrix_getrc(decNumber *res, const decNumber *m) {
 275:src/matrix.c  **** 	decNumber ydn;
 276:src/matrix.c  **** 	int rows, cols, c, r, pos;
ARM GAS  /tmp/cc0YfLmr.s 			page 15


 277:src/matrix.c  **** 	int n = matrix_decompose(m, &rows, &cols, NULL);
 278:src/matrix.c  **** 
 279:src/matrix.c  **** 	if (n < 0)
 280:src/matrix.c  **** 		return NULL;
 281:src/matrix.c  **** 	getY(&ydn);
 282:src/matrix.c  **** 	pos = dn_to_int(&ydn);
 283:src/matrix.c  **** 	pos -= n;
 284:src/matrix.c  **** 	if (pos < 0 || pos >= rows*cols) {
 285:src/matrix.c  **** 		report_err(ERR_RANGE);
 286:src/matrix.c  **** 		return NULL;
 287:src/matrix.c  **** 	}
 288:src/matrix.c  **** 	c = pos % cols + 1;
 289:src/matrix.c  **** 	r = pos / cols + 1;
 290:src/matrix.c  **** 	int_to_dn(res, r);
 291:src/matrix.c  **** 	int_to_dn(&ydn, c);
 292:src/matrix.c  **** 	setY(&ydn);
 293:src/matrix.c  **** 	return res;
 294:src/matrix.c  **** }
 295:src/matrix.c  **** 
 296:src/matrix.c  **** // a = a + b * k -- generalised matrix add and subtract
 297:src/matrix.c  **** decNumber *matrix_genadd(decNumber *r, const decNumber *k, const decNumber *b, const decNumber *a) 
 298:src/matrix.c  **** 	int arows, acols, brows, bcols;
 299:src/matrix.c  **** 	decNumber s, t, u;
 300:src/matrix.c  **** 	int i;
 301:src/matrix.c  **** 
 302:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 303:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 304:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 305:src/matrix.c  **** 		return NULL;
 306:src/matrix.c  **** 	if (arows != brows || acols != bcols) {
 307:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 308:src/matrix.c  **** 		return NULL;
 309:src/matrix.c  **** 	}
 310:src/matrix.c  **** 	for (i=0; i<arows*acols; i++) {
 311:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 312:src/matrix.c  **** 		dn_multiply(&t, &s, k);
 313:src/matrix.c  **** 		decimal64ToNumber(abase + i, &s);
 314:src/matrix.c  **** 		dn_add(&u, &t, &s);
 315:src/matrix.c  **** 		packed_from_number(abase + i, &u);
 316:src/matrix.c  **** 	}
 317:src/matrix.c  **** 	return decNumberCopy(r, a);
 318:src/matrix.c  **** }
 319:src/matrix.c  **** 
 320:src/matrix.c  **** 
 321:src/matrix.c  **** // Matrix multiply c = a * b, c can be a or b or overlap either
 322:src/matrix.c  **** decNumber *matrix_multiply(decNumber *r, const decNumber *a, const decNumber *b, const decNumber *c
 323:src/matrix.c  **** 	int arows, acols, brows, bcols;
 324:src/matrix.c  **** 	decNumber sum, s, t, u;
 325:src/matrix.c  **** 	int creg;
 326:src/matrix.c  **** 	int i, j, k;
 327:src/matrix.c  **** 	decimal64 result[MAX_DIMENSION];
 328:src/matrix.c  **** 	decimal64 *rp = result;
 329:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 330:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 331:src/matrix.c  **** 
 332:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 333:src/matrix.c  **** 		return NULL;
ARM GAS  /tmp/cc0YfLmr.s 			page 16


 334:src/matrix.c  **** 	if (acols != brows) {
 335:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 336:src/matrix.c  **** 		return NULL;
 337:src/matrix.c  **** 	}
 338:src/matrix.c  **** 	creg = dn_to_int(c);
 339:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 340:src/matrix.c  **** 		return NULL;
 341:src/matrix.c  **** 
 342:src/matrix.c  ****         busy();
 343:src/matrix.c  **** 	for (i=0; i<arows; i++)
 344:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 345:src/matrix.c  **** 			decNumberZero(&sum);
 346:src/matrix.c  **** 			for (k=0; k<acols; k++) {
 347:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 348:src/matrix.c  **** 				matrix_get(&t, bbase, k, j, bcols);
 349:src/matrix.c  **** 				dn_multiply(&u, &s, &t);
 350:src/matrix.c  **** 				dn_add(&sum, &sum, &u);
 351:src/matrix.c  **** 			}
 352:src/matrix.c  **** 			packed_from_number(rp++, &sum);
 353:src/matrix.c  **** 		}
 354:src/matrix.c  **** 	xcopy(get_reg_n(creg), result, sizeof(decimal64) * arows * bcols);
 355:src/matrix.c  **** 	return r;
 356:src/matrix.c  **** }
 357:src/matrix.c  **** 
 358:src/matrix.c  **** /* In place matrix transpose using minimal extra storage */
 359:src/matrix.c  **** decNumber *matrix_transpose(decNumber *r, const decNumber *m) {
 360:src/matrix.c  **** 	int w, h, start, next, i;
 361:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 362:src/matrix.c  **** 	decimal64 *base, tmp;
 363:src/matrix.c  **** 
 364:src/matrix.c  **** 	if (n < 0)
 365:src/matrix.c  **** 		return NULL;
 366:src/matrix.c  **** 	base = &(get_reg_n(n)->s);
 367:src/matrix.c  **** 	if (base == NULL)
 368:src/matrix.c  **** 		return NULL;
 369:src/matrix.c  **** 
 370:src/matrix.c  **** 	for (start=0; start < w*h; start++) {
 371:src/matrix.c  **** 		next = start;
 372:src/matrix.c  **** 		i=0;
 373:src/matrix.c  **** 		do {
 374:src/matrix.c  **** 			i++;
 375:src/matrix.c  **** 			next = (next % h) * w + next / h;
 376:src/matrix.c  **** 		} while (next > start);
 377:src/matrix.c  **** 		if (next < start || i == 1)
 378:src/matrix.c  **** 			continue;
 379:src/matrix.c  **** 
 380:src/matrix.c  **** 		tmp = base[next = start];
 381:src/matrix.c  **** 		do {
 382:src/matrix.c  **** 			i = (next % h) * w + next / h;
 383:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 384:src/matrix.c  **** 			next = i;
 385:src/matrix.c  **** 		} while (next > start);
 386:src/matrix.c  **** 	}
 387:src/matrix.c  **** 
 388:src/matrix.c  **** 	matrix_descriptor(r, n, w, h);
 389:src/matrix.c  **** 	return r;
 390:src/matrix.c  **** }
ARM GAS  /tmp/cc0YfLmr.s 			page 17


 391:src/matrix.c  **** 
 392:src/matrix.c  **** #ifdef MATRIX_ROWOPS
 393:src/matrix.c  **** void matrix_rowops(enum nilop op) {
 394:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 395:src/matrix.c  **** 	decimal64 *base, *r1, *r2;
 396:src/matrix.c  **** 	int rows, cols;
 397:src/matrix.c  **** 	int i;
 398:src/matrix.c  **** 
 399:src/matrix.c  **** 	getXYZT(&m, &ydn, &zdn, &t);
 400:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 401:src/matrix.c  **** 	if (base == NULL)
 402:src/matrix.c  **** 		return;
 403:src/matrix.c  **** 
 404:src/matrix.c  **** 	i = dn_to_int(&ydn) - 1;
 405:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 406:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 407:src/matrix.c  **** 		return;
 408:src/matrix.c  **** 	}
 409:src/matrix.c  **** 	r1 = base + i * cols;
 410:src/matrix.c  **** 
 411:src/matrix.c  **** 	if (op == OP_MAT_ROW_MUL) {
 412:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 413:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 414:src/matrix.c  **** 			dn_multiply(&m, &zdn, &t);
 415:src/matrix.c  **** 			packed_from_number(r1++, &m);
 416:src/matrix.c  **** 		}
 417:src/matrix.c  **** 	} else {
 418:src/matrix.c  **** 		i = dn_to_int(&zdn) - 1;
 419:src/matrix.c  **** 		if (i < 0 || i >= rows)
 420:src/matrix.c  **** 			goto badrow;
 421:src/matrix.c  **** 		r2 = base + i * cols;
 422:src/matrix.c  **** 
 423:src/matrix.c  **** 		if (op == OP_MAT_ROW_SWAP) {
 424:src/matrix.c  **** 			for (i=0; i<cols; i++)
 425:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 426:src/matrix.c  **** 		} else {
 427:src/matrix.c  **** 			for (i=0; i<cols; i++) {
 428:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 429:src/matrix.c  **** 				decimal64ToNumber(r2++, &zdn);
 430:src/matrix.c  **** 				dn_multiply(&m, &zdn, &t);
 431:src/matrix.c  **** 				dn_add(&zdn, &ydn, &m);
 432:src/matrix.c  **** 				packed_from_number(r1++, &zdn);
 433:src/matrix.c  **** 			}
 434:src/matrix.c  **** 		}
 435:src/matrix.c  **** 	}
 436:src/matrix.c  **** }
 437:src/matrix.c  **** #endif
 438:src/matrix.c  **** 
 439:src/matrix.c  **** 
 440:src/matrix.c  **** /* Two little utility routines to convert decimal128s to decNumbers and back and to
 441:src/matrix.c  ****  * extract elements form a decimal128 matrix.
 442:src/matrix.c  ****  */
 443:src/matrix.c  **** static void matrix_get128(decNumber *r, const decimal128 *base, int row, int col, int ncols) {
 444:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 445:src/matrix.c  **** }
 446:src/matrix.c  **** 
 447:src/matrix.c  **** static void matrix_put128(const decNumber *x, decimal128 *base, int row, int col, int ncols) {
ARM GAS  /tmp/cc0YfLmr.s 			page 18


 448:src/matrix.c  **** 	packed128_from_number(base + matrix_idx(row, col, ncols), x);
 449:src/matrix.c  **** }
 450:src/matrix.c  **** 
 451:src/matrix.c  **** 
 452:src/matrix.c  **** /* Perform a LU decomposition of the specified matrix in-situ.
 453:src/matrix.c  ****  * Return the pivot rows in pivots if not null and return the parity
 454:src/matrix.c  ****  * of the number of pivots or zero if the matrix is singular
 455:src/matrix.c  ****  */
 456:src/matrix.c  **** static int LU_decomposition(decimal128 *A, unsigned char *pivots, const int n) {
 457:src/matrix.c  **** 	int i, j, k;
 458:src/matrix.c  **** 	int pvt, spvt = 1;
 459:src/matrix.c  **** 	decimal128 *p1, *p2;
 460:src/matrix.c  **** 	decNumber max, t, u;
 461:src/matrix.c  **** 
 462:src/matrix.c  ****         busy();
 463:src/matrix.c  **** 	for (k=0; k<n; k++) {
 464:src/matrix.c  **** 		/* Find the pivot row */
 465:src/matrix.c  **** 		pvt = k;
 466:src/matrix.c  **** 		matrix_get128(&u, A, k, k, n);
 467:src/matrix.c  **** 		dn_abs(&max, &u);
 468:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 469:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 470:src/matrix.c  **** 			dn_abs(&u, &t);
 471:src/matrix.c  **** 			if (dn_gt(&u, &max)) {
 472:src/matrix.c  **** 				decNumberCopy(&max, &u);
 473:src/matrix.c  **** 				pvt = j;
 474:src/matrix.c  **** 			}
 475:src/matrix.c  **** 		}
 476:src/matrix.c  **** 		if (pivots != NULL)
 477:src/matrix.c  **** 			*pivots++ = pvt;
 478:src/matrix.c  **** 
 479:src/matrix.c  **** 		/* pivot if required */
 480:src/matrix.c  **** 		if (pvt != k) {
 481:src/matrix.c  **** 			spvt = -spvt;
 482:src/matrix.c  **** 			p1 = A + (n * k);
 483:src/matrix.c  **** 			p2 = A + (n * pvt);
 484:src/matrix.c  **** 			for (j=0; j<n; j++) {
 485:src/matrix.c  **** 				decimal128 t = *p1;
 486:src/matrix.c  **** 				*p1 = *p2;
 487:src/matrix.c  **** 				*p2 = t;
 488:src/matrix.c  **** 				p1++;
 489:src/matrix.c  **** 				p2++;
 490:src/matrix.c  **** 				//swap_reg(p1++, p2++);
 491:src/matrix.c  **** 			}
 492:src/matrix.c  **** 		}
 493:src/matrix.c  **** 
 494:src/matrix.c  **** 		/* Check for singular */
 495:src/matrix.c  **** 		matrix_get128(&t, A, k, k, n);
 496:src/matrix.c  **** 		if (dn_eq0(&t))
 497:src/matrix.c  **** 			return 0;
 498:src/matrix.c  **** 
 499:src/matrix.c  **** 		/* Find the lower triangular elements for column k */
 500:src/matrix.c  **** 		for (i=k+1; i<n; i++) {
 501:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 502:src/matrix.c  **** 			matrix_get128(&u, A, i, k, n);
 503:src/matrix.c  **** 			dn_divide(&max, &u, &t);
 504:src/matrix.c  **** 			matrix_put128(&max, A, i, k, n);
ARM GAS  /tmp/cc0YfLmr.s 			page 19


 505:src/matrix.c  **** 		}
 506:src/matrix.c  **** 		/* Update the upper triangular elements */
 507:src/matrix.c  **** 		for (i=k+1; i<n; i++)
 508:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 509:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 510:src/matrix.c  **** 				matrix_get128(&u, A, k, j, n);
 511:src/matrix.c  **** 				dn_multiply(&max, &t, &u);
 512:src/matrix.c  **** 				matrix_get128(&t, A, i, j, n);
 513:src/matrix.c  **** 				dn_subtract(&u, &t, &max);
 514:src/matrix.c  **** 				matrix_put128(&u, A, i, j, n);
 515:src/matrix.c  **** 			}
 516:src/matrix.c  **** 	}
 517:src/matrix.c  **** 	return spvt;
 518:src/matrix.c  **** }
 519:src/matrix.c  **** 
 520:src/matrix.c  **** /* Solve the linear equation Ax = b.
 521:src/matrix.c  ****  * We do this by utilising the LU decomposition passed in in A and solving
 522:src/matrix.c  ****  * the linear equation Ly = b for y, where L is the lower diagonal triangular
 523:src/matrix.c  ****  * matrix with unity along the diagonal.  Then we solve the linear system
 524:src/matrix.c  ****  * Ux = y, where U is the upper triangular matrix.
 525:src/matrix.c  ****  */
 526:src/matrix.c  **** static void matrix_pivoting_solve(decimal128 *LU, const decimal64 *b[], unsigned char pivot[], decN
 527:src/matrix.c  **** 	int i, k;
 528:src/matrix.c  **** 	decNumber r, t;
 529:src/matrix.c  **** 
 530:src/matrix.c  **** 	/* Solve the first linear equation Ly = b */
 531:src/matrix.c  **** 	for (k=0; k<n; k++) {
 532:src/matrix.c  **** 		if (k != pivot[k]) {
 533:src/matrix.c  **** 			const decimal64 *swap = b[k];
 534:src/matrix.c  **** 			b[k] = b[pivot[k]];
 535:src/matrix.c  **** 			b[pivot[k]] = swap;
 536:src/matrix.c  **** 		}
 537:src/matrix.c  **** 		decimal64ToNumber(b[k], x + k);
 538:src/matrix.c  **** 		for (i=0; i<k; i++) {
 539:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 540:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 541:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 542:src/matrix.c  **** 		}
 543:src/matrix.c  **** 	}
 544:src/matrix.c  **** 
 545:src/matrix.c  **** 	/* Solve the second linear equation Ux = y */
 546:src/matrix.c  **** 	for (k=n-1; k>=0; k--) {
 547:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 548:src/matrix.c  **** 		for (i=k+1; i<n; i++) {
 549:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 550:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 551:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 552:src/matrix.c  **** 		}
 553:src/matrix.c  **** 		matrix_get128(&r, LU, k, k, n);
 554:src/matrix.c  **** #if 0
 555:src/matrix.c  **** 		/* Check for singular matrix */
 556:src/matrix.c  **** 		if (dn_eq0(&r))
 557:src/matrix.c  **** 			return;
 558:src/matrix.c  **** #endif
 559:src/matrix.c  **** 		dn_divide(x+k, x+k, &r);
 560:src/matrix.c  **** 	}
 561:src/matrix.c  **** }
ARM GAS  /tmp/cc0YfLmr.s 			page 20


 562:src/matrix.c  **** 
 563:src/matrix.c  **** /* Decompose the passed in matrix identifier and extract the matrix from the
 564:src/matrix.c  ****  * associated registers into the passed higher precision matrix.  Optionally,
 565:src/matrix.c  ****  * return the first register in the matrix and always return the dimensionality.
 566:src/matrix.c  ****  * On error, return 0.
 567:src/matrix.c  ****  */
 568:src/matrix.c  **** static int matrix_lu_check(const decNumber *m, decimal128 *mat, decimal64 **mbase) {
 478              		.loc 1 568 84 is_stmt 1 view -0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 48
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 569:src/matrix.c  **** 	int rows, cols;
 482              		.loc 1 569 2 view .LVU138
 570:src/matrix.c  **** 	decimal64 *base;
 483              		.loc 1 570 2 view .LVU139
 571:src/matrix.c  **** 	decNumber t;
 484              		.loc 1 571 2 view .LVU140
 572:src/matrix.c  **** 	int i;
 485              		.loc 1 572 2 view .LVU141
 573:src/matrix.c  **** 
 574:src/matrix.c  **** 	base = matrix_decomp(m, &rows, &cols);
 486              		.loc 1 574 2 view .LVU142
 568:src/matrix.c  **** 	int rows, cols;
 487              		.loc 1 568 84 is_stmt 0 view .LVU143
 488 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 489              		.cfi_def_cfa_offset 24
 490              		.cfi_offset 4, -24
 491              		.cfi_offset 5, -20
 492              		.cfi_offset 6, -16
 493              		.cfi_offset 7, -12
 494              		.cfi_offset 8, -8
 495              		.cfi_offset 14, -4
 496 0004 8CB0     		sub	sp, sp, #48
 497              		.cfi_def_cfa_offset 72
 568:src/matrix.c  **** 	int rows, cols;
 498              		.loc 1 568 84 view .LVU144
 499 0006 0C46     		mov	r4, r1
 500 0008 9046     		mov	r8, r2
 501              		.loc 1 574 9 view .LVU145
 502 000a 01A9     		add	r1, sp, #4
 503              	.LVL55:
 504              		.loc 1 574 9 view .LVU146
 505 000c 02AA     		add	r2, sp, #8
 506              	.LVL56:
 507              		.loc 1 574 9 view .LVU147
 508 000e FFF7FEFF 		bl	matrix_decomp
 509              	.LVL57:
 575:src/matrix.c  **** 	if (base == NULL)
 510              		.loc 1 575 2 is_stmt 1 view .LVU148
 511              		.loc 1 575 5 is_stmt 0 view .LVU149
 512 0012 0746     		mov	r7, r0
 513 0014 F8B1     		cbz	r0, .L52
 576:src/matrix.c  **** 		return 0;
 577:src/matrix.c  **** 	if (rows != cols) {
 514              		.loc 1 577 2 is_stmt 1 view .LVU150
 515              		.loc 1 577 5 is_stmt 0 view .LVU151
 516 0016 DDE90103 		ldrd	r0, r3, [sp, #4]
ARM GAS  /tmp/cc0YfLmr.s 			page 21


 517              	.LVL58:
 518              		.loc 1 577 5 view .LVU152
 519 001a 9842     		cmp	r0, r3
 520 001c 1ED1     		bne	.L54
 521              	.LVL59:
 578:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 579:src/matrix.c  **** 		return 0;
 580:src/matrix.c  **** 	}
 581:src/matrix.c  **** 	if (mat != NULL) {
 582:src/matrix.c  **** 		for (i=0; i<rows*rows; i++) {
 522              		.loc 1 582 13 is_stmt 1 view .LVU153
 523              		.loc 1 582 19 is_stmt 0 view .LVU154
 524 001e 00FB00F3 		mul	r3, r0, r0
 525              		.loc 1 582 3 view .LVU155
 526 0022 9BB1     		cbz	r3, .L56
 527 0024 3E46     		mov	r6, r7
 528              		.loc 1 582 9 view .LVU156
 529 0026 0025     		movs	r5, #0
 530              	.LVL60:
 531              	.L57:
 583:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 532              		.loc 1 583 4 is_stmt 1 discriminator 3 view .LVU157
 533 0028 03A9     		add	r1, sp, #12
 534 002a 3046     		mov	r0, r6
 535 002c FFF7FEFF 		bl	decimal64ToNumber
 536              	.LVL61:
 584:src/matrix.c  **** 			packed128_from_number(mat+i, &t);
 537              		.loc 1 584 4 discriminator 3 view .LVU158
 538 0030 2046     		mov	r0, r4
 539 0032 03A9     		add	r1, sp, #12
 540 0034 FFF7FEFF 		bl	packed128_from_number
 541              	.LVL62:
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 542              		.loc 1 582 26 discriminator 3 view .LVU159
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 543              		.loc 1 582 19 is_stmt 0 discriminator 3 view .LVU160
 544 0038 0198     		ldr	r0, [sp, #4]
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 545              		.loc 1 582 27 discriminator 3 view .LVU161
 546 003a 0135     		adds	r5, r5, #1
 547              	.LVL63:
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 548              		.loc 1 582 13 is_stmt 1 discriminator 3 view .LVU162
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 549              		.loc 1 582 19 is_stmt 0 discriminator 3 view .LVU163
 550 003c 00FB00F3 		mul	r3, r0, r0
 582:src/matrix.c  **** 			decimal64ToNumber(base+i, &t);
 551              		.loc 1 582 3 discriminator 3 view .LVU164
 552 0040 AB42     		cmp	r3, r5
 553 0042 06F10806 		add	r6, r6, #8
 554 0046 04F11004 		add	r4, r4, #16
 555 004a EDDC     		bgt	.L57
 556              	.LVL64:
 557              	.L56:
 585:src/matrix.c  **** 		}
 586:src/matrix.c  **** 	}
 587:src/matrix.c  **** 	if (mbase != NULL)
ARM GAS  /tmp/cc0YfLmr.s 			page 22


 558              		.loc 1 587 2 is_stmt 1 view .LVU165
 559              		.loc 1 587 5 is_stmt 0 view .LVU166
 560 004c B8F1000F 		cmp	r8, #0
 561 0050 01D0     		beq	.L52
 588:src/matrix.c  **** 		*mbase = base;
 562              		.loc 1 588 3 is_stmt 1 view .LVU167
 563              		.loc 1 588 10 is_stmt 0 view .LVU168
 564 0052 C8F80070 		str	r7, [r8]
 589:src/matrix.c  **** 	return rows;
 565              		.loc 1 589 2 is_stmt 1 view .LVU169
 566              	.L52:
 590:src/matrix.c  **** }
 567              		.loc 1 590 1 is_stmt 0 view .LVU170
 568 0056 0CB0     		add	sp, sp, #48
 569              		.cfi_remember_state
 570              		.cfi_def_cfa_offset 24
 571              		@ sp needed
 572 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 573              	.LVL65:
 574              	.L54:
 575              		.cfi_restore_state
 578:src/matrix.c  **** 		return 0;
 576              		.loc 1 578 3 is_stmt 1 view .LVU171
 577 005c 1520     		movs	r0, #21
 578 005e FFF7FEFF 		bl	report_err
 579              	.LVL66:
 579:src/matrix.c  **** 	}
 580              		.loc 1 579 3 view .LVU172
 579:src/matrix.c  **** 	}
 581              		.loc 1 579 10 is_stmt 0 view .LVU173
 582 0062 0020     		movs	r0, #0
 583              		.loc 1 590 1 view .LVU174
 584 0064 0CB0     		add	sp, sp, #48
 585              		.cfi_def_cfa_offset 24
 586              		@ sp needed
 587 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 588              		.loc 1 590 1 view .LVU175
 589              		.cfi_endproc
 590              	.LFE25:
 592 006a 00BF     		.section	.text.LU_decomposition,"ax",%progbits
 593              		.align	1
 594              		.p2align 2,,3
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv4-sp-d16
 600              	LU_decomposition:
 601              	.LVL67:
 602              	.LFB23:
 456:src/matrix.c  **** 	int i, j, k;
 603              		.loc 1 456 80 is_stmt 1 view -0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 176
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 457:src/matrix.c  **** 	int pvt, spvt = 1;
 607              		.loc 1 457 2 view .LVU177
 458:src/matrix.c  **** 	decimal128 *p1, *p2;
ARM GAS  /tmp/cc0YfLmr.s 			page 23


 608              		.loc 1 458 2 view .LVU178
 459:src/matrix.c  **** 	decNumber max, t, u;
 609              		.loc 1 459 2 view .LVU179
 460:src/matrix.c  **** 
 610              		.loc 1 460 2 view .LVU180
 462:src/matrix.c  **** 	for (k=0; k<n; k++) {
 611              		.loc 1 462 9 view .LVU181
 456:src/matrix.c  **** 	int i, j, k;
 612              		.loc 1 456 80 is_stmt 0 view .LVU182
 613 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 614              		.cfi_def_cfa_offset 36
 615              		.cfi_offset 4, -36
 616              		.cfi_offset 5, -32
 617              		.cfi_offset 6, -28
 618              		.cfi_offset 7, -24
 619              		.cfi_offset 8, -20
 620              		.cfi_offset 9, -16
 621              		.cfi_offset 10, -12
 622              		.cfi_offset 11, -8
 623              		.cfi_offset 14, -4
 624 0004 ADB0     		sub	sp, sp, #180
 625              		.cfi_def_cfa_offset 216
 456:src/matrix.c  **** 	int i, j, k;
 626              		.loc 1 456 80 view .LVU183
 627 0006 9346     		mov	fp, r2
 628 0008 0446     		mov	r4, r0
 629 000a 0A90     		str	r0, [sp, #40]
 630 000c 0491     		str	r1, [sp, #16]
 462:src/matrix.c  **** 	for (k=0; k<n; k++) {
 631              		.loc 1 462 9 view .LVU184
 632 000e FFF7FEFF 		bl	busy
 633              	.LVL68:
 463:src/matrix.c  **** 		/* Find the pivot row */
 634              		.loc 1 463 2 is_stmt 1 view .LVU185
 463:src/matrix.c  **** 		/* Find the pivot row */
 635              		.loc 1 463 12 view .LVU186
 463:src/matrix.c  **** 		/* Find the pivot row */
 636              		.loc 1 463 2 is_stmt 0 view .LVU187
 637 0012 BBF1000F 		cmp	fp, #0
 638 0016 40F3DC80 		ble	.L78
 639 001a 0BF10103 		add	r3, fp, #1
 640 001e 1B01     		lsls	r3, r3, #4
 641 0020 0893     		str	r3, [sp, #32]
 642 0022 A3F11009 		sub	r9, r3, #16
 643 0026 203B     		subs	r3, r3, #32
 644 0028 04F11001 		add	r1, r4, #16
 645 002c 0026     		movs	r6, #0
 646 002e 0993     		str	r3, [sp, #36]
 458:src/matrix.c  **** 	decimal128 *p1, *p2;
 647              		.loc 1 458 11 view .LVU188
 648 0030 0123     		movs	r3, #1
 649 0032 0B91     		str	r1, [sp, #44]
 463:src/matrix.c  **** 		/* Find the pivot row */
 650              		.loc 1 463 2 view .LVU189
 651 0034 0596     		str	r6, [sp, #20]
 652 0036 0291     		str	r1, [sp, #8]
 653 0038 0394     		str	r4, [sp, #12]
ARM GAS  /tmp/cc0YfLmr.s 			page 24


 458:src/matrix.c  **** 	decimal128 *p1, *p2;
 654              		.loc 1 458 11 view .LVU190
 655 003a 0793     		str	r3, [sp, #28]
 656              	.LVL69:
 657              	.L76:
 465:src/matrix.c  **** 		matrix_get128(&u, A, k, k, n);
 658              		.loc 1 465 3 is_stmt 1 view .LVU191
 466:src/matrix.c  **** 		dn_abs(&max, &u);
 659              		.loc 1 466 3 view .LVU192
 660              	.LBB78:
 661              	.LBI78:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 662              		.loc 1 443 13 view .LVU193
 663              	.LBB79:
 444:src/matrix.c  **** }
 664              		.loc 1 444 2 view .LVU194
 444:src/matrix.c  **** }
 665              		.loc 1 444 2 is_stmt 0 view .LVU195
 666              	.LBE79:
 667              	.LBE78:
  27:src/matrix.c  **** }
 668              		.loc 1 27 2 is_stmt 1 view .LVU196
  27:src/matrix.c  **** }
 669              		.loc 1 27 2 is_stmt 0 view .LVU197
 670 003c 029B     		ldr	r3, [sp, #8]
 671 003e A3F11005 		sub	r5, r3, #16
 672              	.LBB81:
 673              	.LBB80:
 444:src/matrix.c  **** }
 674              		.loc 1 444 2 view .LVU198
 675 0042 23A9     		add	r1, sp, #140
 676              	.LVL70:
 444:src/matrix.c  **** }
 677              		.loc 1 444 2 view .LVU199
 678 0044 2846     		mov	r0, r5
 679 0046 FFF7FEFF 		bl	decimal128ToNumber
 680              	.LVL71:
 444:src/matrix.c  **** }
 681              		.loc 1 444 2 view .LVU200
 682              	.LBE80:
 683              	.LBE81:
 467:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 684              		.loc 1 467 3 is_stmt 1 view .LVU201
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 685              		.loc 1 468 9 is_stmt 0 view .LVU202
 686 004a 771C     		adds	r7, r6, #1
 467:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 687              		.loc 1 467 3 view .LVU203
 688 004c 23A9     		add	r1, sp, #140
 689 004e 11A8     		add	r0, sp, #68
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 690              		.loc 1 468 9 view .LVU204
 691 0050 0197     		str	r7, [sp, #4]
 467:src/matrix.c  **** 		for (j=k+1; j<n; j++) {
 692              		.loc 1 467 3 view .LVU205
 693 0052 FFF7FEFF 		bl	dn_abs
 694              	.LVL72:
ARM GAS  /tmp/cc0YfLmr.s 			page 25


 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 695              		.loc 1 468 3 is_stmt 1 view .LVU206
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 696              		.loc 1 468 15 view .LVU207
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 697              		.loc 1 468 3 is_stmt 0 view .LVU208
 698 0056 BB45     		cmp	fp, r7
 699 0058 40F3C180 		ble	.L67
 700 005c 039B     		ldr	r3, [sp, #12]
 701 005e 3446     		mov	r4, r6
 702 0060 09EB0308 		add	r8, r9, r3
 703 0064 02E0     		b	.L69
 704              	.L68:
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 705              		.loc 1 468 20 is_stmt 1 discriminator 2 view .LVU209
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 706              		.loc 1 468 21 is_stmt 0 discriminator 2 view .LVU210
 707 0066 0137     		adds	r7, r7, #1
 708              	.LVL73:
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 709              		.loc 1 468 15 is_stmt 1 discriminator 2 view .LVU211
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 710              		.loc 1 468 3 is_stmt 0 discriminator 2 view .LVU212
 711 0068 BB45     		cmp	fp, r7
 712 006a 16D0     		beq	.L93
 713              	.L69:
 469:src/matrix.c  **** 			dn_abs(&u, &t);
 714              		.loc 1 469 4 is_stmt 1 view .LVU213
 715              	.LVL74:
 716              	.LBB82:
 717              	.LBI82:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 718              		.loc 1 443 13 view .LVU214
 719              	.LBB83:
 444:src/matrix.c  **** }
 720              		.loc 1 444 2 view .LVU215
 444:src/matrix.c  **** }
 721              		.loc 1 444 2 is_stmt 0 view .LVU216
 722              	.LBE83:
 723              	.LBE82:
  27:src/matrix.c  **** }
 724              		.loc 1 27 2 is_stmt 1 view .LVU217
 725              	.LBB85:
 726              	.LBB84:
 444:src/matrix.c  **** }
 727              		.loc 1 444 2 is_stmt 0 view .LVU218
 728 006c 1AA9     		add	r1, sp, #104
 729              	.LVL75:
 444:src/matrix.c  **** }
 730              		.loc 1 444 2 view .LVU219
 731 006e 4046     		mov	r0, r8
 732 0070 FFF7FEFF 		bl	decimal128ToNumber
 733              	.LVL76:
 444:src/matrix.c  **** }
 734              		.loc 1 444 2 view .LVU220
 735              	.LBE84:
 736              	.LBE85:
ARM GAS  /tmp/cc0YfLmr.s 			page 26


 470:src/matrix.c  **** 			if (dn_gt(&u, &max)) {
 737              		.loc 1 470 4 is_stmt 1 view .LVU221
 738 0074 1AA9     		add	r1, sp, #104
 739 0076 23A8     		add	r0, sp, #140
 740 0078 FFF7FEFF 		bl	dn_abs
 741              	.LVL77:
 471:src/matrix.c  **** 				decNumberCopy(&max, &u);
 742              		.loc 1 471 4 view .LVU222
 471:src/matrix.c  **** 				decNumberCopy(&max, &u);
 743              		.loc 1 471 8 is_stmt 0 view .LVU223
 744 007c 23A9     		add	r1, sp, #140
 745 007e 11A8     		add	r0, sp, #68
 746 0080 FFF7FEFF 		bl	dn_lt
 747              	.LVL78:
 748 0084 C844     		add	r8, r8, r9
 471:src/matrix.c  **** 				decNumberCopy(&max, &u);
 749              		.loc 1 471 7 view .LVU224
 750 0086 0028     		cmp	r0, #0
 751 0088 EDD0     		beq	.L68
 472:src/matrix.c  **** 				pvt = j;
 752              		.loc 1 472 5 is_stmt 1 view .LVU225
 753 008a 23A9     		add	r1, sp, #140
 754 008c 11A8     		add	r0, sp, #68
 755 008e 3C46     		mov	r4, r7
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 756              		.loc 1 468 21 is_stmt 0 view .LVU226
 757 0090 0137     		adds	r7, r7, #1
 758              	.LVL79:
 472:src/matrix.c  **** 				pvt = j;
 759              		.loc 1 472 5 view .LVU227
 760 0092 FFF7FEFF 		bl	decNumberCopy
 761              	.LVL80:
 473:src/matrix.c  **** 			}
 762              		.loc 1 473 5 is_stmt 1 view .LVU228
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 763              		.loc 1 468 20 view .LVU229
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 764              		.loc 1 468 15 view .LVU230
 468:src/matrix.c  **** 			matrix_get128(&t, A, j, k, n);
 765              		.loc 1 468 3 is_stmt 0 view .LVU231
 766 0096 BB45     		cmp	fp, r7
 767 0098 E8D1     		bne	.L69
 768              	.L93:
 476:src/matrix.c  **** 			*pivots++ = pvt;
 769              		.loc 1 476 3 is_stmt 1 view .LVU232
 476:src/matrix.c  **** 			*pivots++ = pvt;
 770              		.loc 1 476 6 is_stmt 0 view .LVU233
 771 009a 049B     		ldr	r3, [sp, #16]
 772 009c 1BB1     		cbz	r3, .L70
 773              	.L77:
 477:src/matrix.c  **** 
 774              		.loc 1 477 4 is_stmt 1 view .LVU234
 477:src/matrix.c  **** 
 775              		.loc 1 477 11 is_stmt 0 view .LVU235
 776 009e 049B     		ldr	r3, [sp, #16]
 777              	.LVL81:
 477:src/matrix.c  **** 
ARM GAS  /tmp/cc0YfLmr.s 			page 27


 778              		.loc 1 477 14 view .LVU236
 779 00a0 03F8014B 		strb	r4, [r3], #1
 780              	.LVL82:
 477:src/matrix.c  **** 
 781              		.loc 1 477 11 view .LVU237
 782 00a4 0493     		str	r3, [sp, #16]
 783              	.LVL83:
 784              	.L70:
 480:src/matrix.c  **** 			spvt = -spvt;
 785              		.loc 1 480 3 is_stmt 1 view .LVU238
 480:src/matrix.c  **** 			spvt = -spvt;
 786              		.loc 1 480 6 is_stmt 0 view .LVU239
 787 00a6 B442     		cmp	r4, r6
 788 00a8 69D1     		bne	.L94
 789              	.LVL84:
 790              	.L71:
 495:src/matrix.c  **** 		if (dn_eq0(&t))
 791              		.loc 1 495 3 is_stmt 1 view .LVU240
 792              	.LBB86:
 793              	.LBI86:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 794              		.loc 1 443 13 view .LVU241
 795              	.LBB87:
 444:src/matrix.c  **** }
 796              		.loc 1 444 2 view .LVU242
 444:src/matrix.c  **** }
 797              		.loc 1 444 2 is_stmt 0 view .LVU243
 798              	.LBE87:
 799              	.LBE86:
  27:src/matrix.c  **** }
 800              		.loc 1 27 2 is_stmt 1 view .LVU244
 801              	.LBB89:
 802              	.LBB88:
 444:src/matrix.c  **** }
 803              		.loc 1 444 2 is_stmt 0 view .LVU245
 804 00aa 1AA9     		add	r1, sp, #104
 805              	.LVL85:
 444:src/matrix.c  **** }
 806              		.loc 1 444 2 view .LVU246
 807 00ac 2846     		mov	r0, r5
 808 00ae FFF7FEFF 		bl	decimal128ToNumber
 809              	.LVL86:
 444:src/matrix.c  **** }
 810              		.loc 1 444 2 view .LVU247
 811              	.LBE88:
 812              	.LBE89:
 496:src/matrix.c  **** 			return 0;
 813              		.loc 1 496 3 is_stmt 1 view .LVU248
 496:src/matrix.c  **** 			return 0;
 814              		.loc 1 496 7 is_stmt 0 view .LVU249
 815 00b2 1AA8     		add	r0, sp, #104
 816 00b4 FFF7FEFF 		bl	dn_eq0
 817              	.LVL87:
 496:src/matrix.c  **** 			return 0;
 818              		.loc 1 496 6 view .LVU250
 819 00b8 0028     		cmp	r0, #0
 820 00ba 40F09680 		bne	.L79
ARM GAS  /tmp/cc0YfLmr.s 			page 28


 821              	.LVL88:
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 822              		.loc 1 500 15 is_stmt 1 view .LVU251
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 823              		.loc 1 500 3 is_stmt 0 view .LVU252
 824 00be 019E     		ldr	r6, [sp, #4]
 825 00c0 B345     		cmp	fp, r6
 826 00c2 00F08880 		beq	.L65
 827 00c6 099B     		ldr	r3, [sp, #36]
 828 00c8 029A     		ldr	r2, [sp, #8]
 829 00ca 9C18     		adds	r4, r3, r2
 830              	.LVL89:
 831              	.L73:
 501:src/matrix.c  **** 			matrix_get128(&u, A, i, k, n);
 832              		.loc 1 501 4 is_stmt 1 view .LVU253
 833              	.LBB90:
 834              	.LBI90:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 835              		.loc 1 443 13 view .LVU254
 836              	.LBB91:
 444:src/matrix.c  **** }
 837              		.loc 1 444 2 view .LVU255
 444:src/matrix.c  **** }
 838              		.loc 1 444 2 is_stmt 0 view .LVU256
 839              	.LBE91:
 840              	.LBE90:
  27:src/matrix.c  **** }
 841              		.loc 1 27 2 is_stmt 1 view .LVU257
 842              	.LBB93:
 843              	.LBB92:
 444:src/matrix.c  **** }
 844              		.loc 1 444 2 is_stmt 0 view .LVU258
 845 00cc 1AA9     		add	r1, sp, #104
 846              	.LVL90:
 444:src/matrix.c  **** }
 847              		.loc 1 444 2 view .LVU259
 848 00ce 2846     		mov	r0, r5
 849 00d0 FFF7FEFF 		bl	decimal128ToNumber
 850              	.LVL91:
 444:src/matrix.c  **** }
 851              		.loc 1 444 2 view .LVU260
 852              	.LBE92:
 853              	.LBE93:
 502:src/matrix.c  **** 			dn_divide(&max, &u, &t);
 854              		.loc 1 502 4 is_stmt 1 view .LVU261
 855              	.LBB94:
 856              	.LBI94:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 857              		.loc 1 443 13 view .LVU262
 858              	.LBB95:
 444:src/matrix.c  **** }
 859              		.loc 1 444 2 view .LVU263
 444:src/matrix.c  **** }
 860              		.loc 1 444 2 is_stmt 0 view .LVU264
 861              	.LBE95:
 862              	.LBE94:
  27:src/matrix.c  **** }
ARM GAS  /tmp/cc0YfLmr.s 			page 29


 863              		.loc 1 27 2 is_stmt 1 view .LVU265
 864              	.LBB97:
 865              	.LBB96:
 444:src/matrix.c  **** }
 866              		.loc 1 444 2 is_stmt 0 view .LVU266
 867 00d4 23A9     		add	r1, sp, #140
 868              	.LVL92:
 444:src/matrix.c  **** }
 869              		.loc 1 444 2 view .LVU267
 870 00d6 2046     		mov	r0, r4
 871 00d8 FFF7FEFF 		bl	decimal128ToNumber
 872              	.LVL93:
 444:src/matrix.c  **** }
 873              		.loc 1 444 2 view .LVU268
 874              	.LBE96:
 875              	.LBE97:
 503:src/matrix.c  **** 			matrix_put128(&max, A, i, k, n);
 876              		.loc 1 503 4 is_stmt 1 view .LVU269
 877 00dc 1AAA     		add	r2, sp, #104
 878 00de 23A9     		add	r1, sp, #140
 879 00e0 11A8     		add	r0, sp, #68
 880 00e2 FFF7FEFF 		bl	dn_divide
 881              	.LVL94:
 504:src/matrix.c  **** 		}
 882              		.loc 1 504 4 view .LVU270
 883              	.LBB98:
 884              	.LBI98:
 447:src/matrix.c  **** 	packed128_from_number(base + matrix_idx(row, col, ncols), x);
 885              		.loc 1 447 13 view .LVU271
 886              	.LBB99:
 448:src/matrix.c  **** }
 887              		.loc 1 448 2 view .LVU272
 448:src/matrix.c  **** }
 888              		.loc 1 448 2 is_stmt 0 view .LVU273
 889              	.LBE99:
 890              	.LBE98:
  27:src/matrix.c  **** }
 891              		.loc 1 27 2 is_stmt 1 view .LVU274
  27:src/matrix.c  **** }
 892              		.loc 1 27 2 is_stmt 0 view .LVU275
 893 00e6 3746     		mov	r7, r6
 894              	.LBB102:
 895              	.LBB100:
 448:src/matrix.c  **** }
 896              		.loc 1 448 2 view .LVU276
 897 00e8 2046     		mov	r0, r4
 898 00ea 11A9     		add	r1, sp, #68
 899              	.LVL95:
 448:src/matrix.c  **** }
 900              		.loc 1 448 2 view .LVU277
 901              	.LBE100:
 902              	.LBE102:
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 903              		.loc 1 500 21 view .LVU278
 904 00ec 0136     		adds	r6, r6, #1
 905              	.LVL96:
 906              	.LBB103:
ARM GAS  /tmp/cc0YfLmr.s 			page 30


 907              	.LBB101:
 448:src/matrix.c  **** }
 908              		.loc 1 448 2 view .LVU279
 909 00ee FFF7FEFF 		bl	packed128_from_number
 910              	.LVL97:
 448:src/matrix.c  **** }
 911              		.loc 1 448 2 view .LVU280
 912              	.LBE101:
 913              	.LBE103:
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 914              		.loc 1 500 20 is_stmt 1 view .LVU281
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 915              		.loc 1 500 15 view .LVU282
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 916              		.loc 1 500 3 is_stmt 0 view .LVU283
 917 00f2 B345     		cmp	fp, r6
 918 00f4 4C44     		add	r4, r4, r9
 919 00f6 E9D1     		bne	.L73
 920 00f8 059B     		ldr	r3, [sp, #20]
 921 00fa CDF818B0 		str	fp, [sp, #24]
 922 00fe 5B44     		add	r3, r3, fp
 923 0100 0593     		str	r3, [sp, #20]
 924 0102 019B     		ldr	r3, [sp, #4]
 925 0104 4FEA0B16 		lsl	r6, fp, #4
 926              	.LVL98:
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 927              		.loc 1 500 3 view .LVU284
 928 0108 9A46     		mov	r10, r3
 929              	.LVL99:
 930              	.L74:
 508:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 931              		.loc 1 508 16 is_stmt 1 view .LVU285
 932 010a 039B     		ldr	r3, [sp, #12]
 500:src/matrix.c  **** 			matrix_get128(&t, A, k, k, n);
 933              		.loc 1 500 3 is_stmt 0 view .LVU286
 934 010c DDE90154 		ldrd	r5, r4, [sp, #4]
 935 0110 06EB0308 		add	r8, r6, r3
 936              	.LVL100:
 937              	.L75:
 509:src/matrix.c  **** 				matrix_get128(&u, A, k, j, n);
 938              		.loc 1 509 5 is_stmt 1 view .LVU287
 939              	.LBB104:
 940              	.LBI104:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 941              		.loc 1 443 13 view .LVU288
 942              	.LBB105:
 444:src/matrix.c  **** }
 943              		.loc 1 444 2 view .LVU289
 444:src/matrix.c  **** }
 944              		.loc 1 444 2 is_stmt 0 view .LVU290
 945              	.LBE105:
 946              	.LBE104:
  27:src/matrix.c  **** }
 947              		.loc 1 27 2 is_stmt 1 view .LVU291
 948              	.LBB107:
 949              	.LBB106:
 444:src/matrix.c  **** }
ARM GAS  /tmp/cc0YfLmr.s 			page 31


 950              		.loc 1 444 2 is_stmt 0 view .LVU292
 951 0114 1AA9     		add	r1, sp, #104
 952              	.LVL101:
 444:src/matrix.c  **** }
 953              		.loc 1 444 2 view .LVU293
 954 0116 4046     		mov	r0, r8
 955 0118 FFF7FEFF 		bl	decimal128ToNumber
 956              	.LVL102:
 444:src/matrix.c  **** }
 957              		.loc 1 444 2 view .LVU294
 958              	.LBE106:
 959              	.LBE107:
 510:src/matrix.c  **** 				dn_multiply(&max, &t, &u);
 960              		.loc 1 510 5 is_stmt 1 view .LVU295
 961              	.LBB108:
 962              	.LBI108:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 963              		.loc 1 443 13 view .LVU296
 964              	.LBB109:
 444:src/matrix.c  **** }
 965              		.loc 1 444 2 view .LVU297
 444:src/matrix.c  **** }
 966              		.loc 1 444 2 is_stmt 0 view .LVU298
 967              	.LBE109:
 968              	.LBE108:
  27:src/matrix.c  **** }
 969              		.loc 1 27 2 is_stmt 1 view .LVU299
 970              	.LBB111:
 971              	.LBB110:
 444:src/matrix.c  **** }
 972              		.loc 1 444 2 is_stmt 0 view .LVU300
 973 011c 23A9     		add	r1, sp, #140
 974              	.LVL103:
 444:src/matrix.c  **** }
 975              		.loc 1 444 2 view .LVU301
 976 011e 2046     		mov	r0, r4
 977 0120 FFF7FEFF 		bl	decimal128ToNumber
 978              	.LVL104:
 444:src/matrix.c  **** }
 979              		.loc 1 444 2 view .LVU302
 980              	.LBE110:
 981              	.LBE111:
 511:src/matrix.c  **** 				matrix_get128(&t, A, i, j, n);
 982              		.loc 1 511 5 is_stmt 1 view .LVU303
 983 0124 06EB040B 		add	fp, r6, r4
 984 0128 23AA     		add	r2, sp, #140
 985 012a 1AA9     		add	r1, sp, #104
 986 012c 11A8     		add	r0, sp, #68
 987 012e FFF7FEFF 		bl	dn_multiply
 988              	.LVL105:
 512:src/matrix.c  **** 				dn_subtract(&u, &t, &max);
 989              		.loc 1 512 5 view .LVU304
 990              	.LBB112:
 991              	.LBI112:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 992              		.loc 1 443 13 view .LVU305
 993              	.LBB113:
ARM GAS  /tmp/cc0YfLmr.s 			page 32


 444:src/matrix.c  **** }
 994              		.loc 1 444 2 view .LVU306
 444:src/matrix.c  **** }
 995              		.loc 1 444 2 is_stmt 0 view .LVU307
 996              	.LBE113:
 997              	.LBE112:
  27:src/matrix.c  **** }
 998              		.loc 1 27 2 is_stmt 1 view .LVU308
 999              	.LBB115:
 1000              	.LBB114:
 444:src/matrix.c  **** }
 1001              		.loc 1 444 2 is_stmt 0 view .LVU309
 1002 0132 1AA9     		add	r1, sp, #104
 1003              	.LVL106:
 444:src/matrix.c  **** }
 1004              		.loc 1 444 2 view .LVU310
 1005 0134 5846     		mov	r0, fp
 1006 0136 FFF7FEFF 		bl	decimal128ToNumber
 1007              	.LVL107:
 444:src/matrix.c  **** }
 1008              		.loc 1 444 2 view .LVU311
 1009              	.LBE114:
 1010              	.LBE115:
 513:src/matrix.c  **** 				matrix_put128(&u, A, i, j, n);
 1011              		.loc 1 513 5 is_stmt 1 view .LVU312
 1012 013a 11AA     		add	r2, sp, #68
 1013 013c 1AA9     		add	r1, sp, #104
 1014 013e 23A8     		add	r0, sp, #140
 1015 0140 FFF7FEFF 		bl	dn_subtract
 1016              	.LVL108:
 514:src/matrix.c  **** 			}
 1017              		.loc 1 514 5 view .LVU313
 1018              	.LBB116:
 1019              	.LBI116:
 447:src/matrix.c  **** 	packed128_from_number(base + matrix_idx(row, col, ncols), x);
 1020              		.loc 1 447 13 view .LVU314
 1021              	.LBB117:
 448:src/matrix.c  **** }
 1022              		.loc 1 448 2 view .LVU315
 448:src/matrix.c  **** }
 1023              		.loc 1 448 2 is_stmt 0 view .LVU316
 1024              	.LBE117:
 1025              	.LBE116:
  27:src/matrix.c  **** }
 1026              		.loc 1 27 2 is_stmt 1 view .LVU317
 1027              	.LBB119:
 1028              	.LBB118:
 448:src/matrix.c  **** }
 1029              		.loc 1 448 2 is_stmt 0 view .LVU318
 1030 0144 23A9     		add	r1, sp, #140
 1031              	.LVL109:
 448:src/matrix.c  **** }
 1032              		.loc 1 448 2 view .LVU319
 1033 0146 5846     		mov	r0, fp
 1034 0148 FFF7FEFF 		bl	packed128_from_number
 1035              	.LVL110:
 448:src/matrix.c  **** }
ARM GAS  /tmp/cc0YfLmr.s 			page 33


 1036              		.loc 1 448 2 view .LVU320
 1037              	.LBE118:
 1038              	.LBE119:
 508:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1039              		.loc 1 508 21 is_stmt 1 view .LVU321
 508:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1040              		.loc 1 508 16 view .LVU322
 508:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1041              		.loc 1 508 4 is_stmt 0 view .LVU323
 1042 014c AF42     		cmp	r7, r5
 1043 014e 04F11004 		add	r4, r4, #16
 1044 0152 05F10105 		add	r5, r5, #1
 1045              	.LVL111:
 508:src/matrix.c  **** 				matrix_get128(&t, A, i, k, n);
 1046              		.loc 1 508 4 view .LVU324
 1047 0156 DDD1     		bne	.L75
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1048              		.loc 1 507 20 is_stmt 1 discriminator 2 view .LVU325
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1049              		.loc 1 507 3 is_stmt 0 discriminator 2 view .LVU326
 1050 0158 BA45     		cmp	r10, r7
 1051 015a 4E44     		add	r6, r6, r9
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1052              		.loc 1 507 21 discriminator 2 view .LVU327
 1053 015c 0AF10103 		add	r3, r10, #1
 1054              	.LVL112:
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1055              		.loc 1 507 15 is_stmt 1 discriminator 2 view .LVU328
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1056              		.loc 1 507 3 is_stmt 0 discriminator 2 view .LVU329
 1057 0160 01D0     		beq	.L95
 1058 0162 9A46     		mov	r10, r3
 1059 0164 D1E7     		b	.L74
 1060              	.L95:
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1061              		.loc 1 507 3 discriminator 2 view .LVU330
 1062 0166 029A     		ldr	r2, [sp, #8]
 1063 0168 089B     		ldr	r3, [sp, #32]
 1064              	.LVL113:
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1065              		.loc 1 507 3 discriminator 2 view .LVU331
 1066 016a DDF818B0 		ldr	fp, [sp, #24]
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1067              		.loc 1 507 3 view .LVU332
 1068 016e 019E     		ldr	r6, [sp, #4]
 1069 0170 1146     		mov	r1, r2
 1070 0172 039A     		ldr	r2, [sp, #12]
 1071 0174 1944     		add	r1, r1, r3
 1072 0176 1A44     		add	r2, r2, r3
 1073 0178 0291     		str	r1, [sp, #8]
 1074 017a 0392     		str	r2, [sp, #12]
 1075              	.LVL114:
 507:src/matrix.c  **** 			for (j=k+1; j<n; j++) {
 1076              		.loc 1 507 3 view .LVU333
 1077 017c 5EE7     		b	.L76
 1078              	.LVL115:
 1079              	.L94:
ARM GAS  /tmp/cc0YfLmr.s 			page 34


 481:src/matrix.c  **** 			p1 = A + (n * k);
 1080              		.loc 1 481 4 is_stmt 1 view .LVU334
 1081 017e 0A9B     		ldr	r3, [sp, #40]
 1082 0180 059A     		ldr	r2, [sp, #20]
 483:src/matrix.c  **** 			for (j=0; j<n; j++) {
 1083              		.loc 1 483 16 is_stmt 0 view .LVU335
 1084 0182 0BFB04F7 		mul	r7, fp, r4
 1085              	.LVL116:
 483:src/matrix.c  **** 			for (j=0; j<n; j++) {
 1086              		.loc 1 483 16 view .LVU336
 1087 0186 0137     		adds	r7, r7, #1
 1088 0188 03EB0717 		add	r7, r3, r7, lsl #4
 481:src/matrix.c  **** 			p1 = A + (n * k);
 1089              		.loc 1 481 9 view .LVU337
 1090 018c 079B     		ldr	r3, [sp, #28]
 1091 018e 5B42     		rsbs	r3, r3, #0
 1092 0190 0793     		str	r3, [sp, #28]
 1093              	.LVL117:
 482:src/matrix.c  **** 			p2 = A + (n * pvt);
 1094              		.loc 1 482 4 is_stmt 1 view .LVU338
 483:src/matrix.c  **** 			for (j=0; j<n; j++) {
 1095              		.loc 1 483 4 view .LVU339
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1096              		.loc 1 484 4 view .LVU340
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1097              		.loc 1 484 14 view .LVU341
 1098 0192 0B9B     		ldr	r3, [sp, #44]
 1099              	.LVL118:
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1100              		.loc 1 484 10 is_stmt 0 view .LVU342
 1101 0194 4FF0000C 		mov	ip, #0
 1102 0198 03EB021E 		add	lr, r3, r2, lsl #4
 1103              	.LVL119:
 1104              	.L72:
 1105              	.LBB120:
 485:src/matrix.c  **** 				*p1 = *p2;
 1106              		.loc 1 485 5 is_stmt 1 discriminator 3 view .LVU343
 485:src/matrix.c  **** 				*p1 = *p2;
 1107              		.loc 1 485 16 is_stmt 0 discriminator 3 view .LVU344
 1108 019c AEF11006 		sub	r6, lr, #16
 1109              	.LVL120:
 485:src/matrix.c  **** 				*p1 = *p2;
 1110              		.loc 1 485 16 discriminator 3 view .LVU345
 1111 01a0 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 486:src/matrix.c  **** 				*p2 = t;
 1112              		.loc 1 486 9 discriminator 3 view .LVU346
 1113 01a4 A7F11004 		sub	r4, r7, #16
 485:src/matrix.c  **** 				*p1 = *p2;
 1114              		.loc 1 485 16 discriminator 3 view .LVU347
 1115 01a8 0DF13408 		add	r8, sp, #52
 1116 01ac 88E80F00 		stm	r8, {r0, r1, r2, r3}
 486:src/matrix.c  **** 				*p2 = t;
 1117              		.loc 1 486 5 is_stmt 1 discriminator 3 view .LVU348
 486:src/matrix.c  **** 				*p2 = t;
 1118              		.loc 1 486 9 is_stmt 0 discriminator 3 view .LVU349
 1119 01b0 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1120 01b4 86E80F00 		stm	r6, {r0, r1, r2, r3}
ARM GAS  /tmp/cc0YfLmr.s 			page 35


 487:src/matrix.c  **** 				p1++;
 1121              		.loc 1 487 5 is_stmt 1 discriminator 3 view .LVU350
 487:src/matrix.c  **** 				p1++;
 1122              		.loc 1 487 9 is_stmt 0 discriminator 3 view .LVU351
 1123 01b8 98E80F00 		ldm	r8, {r0, r1, r2, r3}
 1124              	.LBE120:
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1125              		.loc 1 484 20 discriminator 3 view .LVU352
 1126 01bc 0CF1010C 		add	ip, ip, #1
 1127              	.LVL121:
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1128              		.loc 1 484 4 discriminator 3 view .LVU353
 1129 01c0 E345     		cmp	fp, ip
 1130              	.LBB121:
 487:src/matrix.c  **** 				p1++;
 1131              		.loc 1 487 9 discriminator 3 view .LVU354
 1132 01c2 84E80F00 		stm	r4, {r0, r1, r2, r3}
 488:src/matrix.c  **** 				p2++;
 1133              		.loc 1 488 5 is_stmt 1 discriminator 3 view .LVU355
 1134              	.LVL122:
 489:src/matrix.c  **** 				//swap_reg(p1++, p2++);
 1135              		.loc 1 489 5 discriminator 3 view .LVU356
 489:src/matrix.c  **** 				//swap_reg(p1++, p2++);
 1136              		.loc 1 489 5 is_stmt 0 discriminator 3 view .LVU357
 1137              	.LBE121:
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1138              		.loc 1 484 19 is_stmt 1 discriminator 3 view .LVU358
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1139              		.loc 1 484 14 discriminator 3 view .LVU359
 1140 01c6 0EF1100E 		add	lr, lr, #16
 1141 01ca 07F11007 		add	r7, r7, #16
 484:src/matrix.c  **** 				decimal128 t = *p1;
 1142              		.loc 1 484 4 is_stmt 0 discriminator 3 view .LVU360
 1143 01ce E5D1     		bne	.L72
 1144 01d0 6BE7     		b	.L71
 1145              	.LVL123:
 1146              	.L78:
 458:src/matrix.c  **** 	decimal128 *p1, *p2;
 1147              		.loc 1 458 11 view .LVU361
 1148 01d2 0123     		movs	r3, #1
 1149 01d4 0793     		str	r3, [sp, #28]
 1150              	.LVL124:
 1151              	.L65:
 518:src/matrix.c  **** 
 1152              		.loc 1 518 1 view .LVU362
 1153 01d6 0798     		ldr	r0, [sp, #28]
 1154 01d8 2DB0     		add	sp, sp, #180
 1155              		.cfi_remember_state
 1156              		.cfi_def_cfa_offset 36
 1157              		@ sp needed
 1158 01da BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1159              	.LVL125:
 1160              	.L67:
 1161              		.cfi_restore_state
 476:src/matrix.c  **** 			*pivots++ = pvt;
 1162              		.loc 1 476 3 is_stmt 1 view .LVU363
 476:src/matrix.c  **** 			*pivots++ = pvt;
ARM GAS  /tmp/cc0YfLmr.s 			page 36


 1163              		.loc 1 476 6 is_stmt 0 view .LVU364
 1164 01de 049B     		ldr	r3, [sp, #16]
 1165 01e0 002B     		cmp	r3, #0
 1166 01e2 3FF462AF 		beq	.L71
 1167 01e6 3446     		mov	r4, r6
 1168 01e8 59E7     		b	.L77
 1169              	.LVL126:
 1170              	.L79:
 497:src/matrix.c  **** 
 1171              		.loc 1 497 11 view .LVU365
 1172 01ea 0023     		movs	r3, #0
 1173 01ec 0793     		str	r3, [sp, #28]
 1174              	.LVL127:
 518:src/matrix.c  **** 
 1175              		.loc 1 518 1 view .LVU366
 1176 01ee 0798     		ldr	r0, [sp, #28]
 1177 01f0 2DB0     		add	sp, sp, #180
 1178              		.cfi_def_cfa_offset 36
 1179              		@ sp needed
 1180 01f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 518:src/matrix.c  **** 
 1181              		.loc 1 518 1 view .LVU367
 1182              		.cfi_endproc
 1183              	.LFE23:
 1185              		.section	.text.matrix_pivoting_solve,"ax",%progbits
 1186              		.align	1
 1187              		.p2align 2,,3
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu fpv4-sp-d16
 1193              	matrix_pivoting_solve:
 1194              	.LVL128:
 1195              	.LFB24:
 526:src/matrix.c  **** 	int i, k;
 1196              		.loc 1 526 117 is_stmt 1 view -0
 1197              		.cfi_startproc
 1198              		@ args = 4, pretend = 0, frame = 96
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 527:src/matrix.c  **** 	decNumber r, t;
 1200              		.loc 1 527 2 view .LVU369
 528:src/matrix.c  **** 
 1201              		.loc 1 528 2 view .LVU370
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1202              		.loc 1 531 2 view .LVU371
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1203              		.loc 1 531 12 view .LVU372
 526:src/matrix.c  **** 	int i, k;
 1204              		.loc 1 526 117 is_stmt 0 view .LVU373
 1205 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1206              		.cfi_def_cfa_offset 36
 1207              		.cfi_offset 4, -36
 1208              		.cfi_offset 5, -32
 1209              		.cfi_offset 6, -28
 1210              		.cfi_offset 7, -24
 1211              		.cfi_offset 8, -20
 1212              		.cfi_offset 9, -16
ARM GAS  /tmp/cc0YfLmr.s 			page 37


 1213              		.cfi_offset 10, -12
 1214              		.cfi_offset 11, -8
 1215              		.cfi_offset 14, -4
 1216 0004 99B0     		sub	sp, sp, #100
 1217              		.cfi_def_cfa_offset 136
 526:src/matrix.c  **** 	int i, k;
 1218              		.loc 1 526 117 view .LVU374
 1219 0006 DDF88890 		ldr	r9, [sp, #136]
 1220 000a 0390     		str	r0, [sp, #12]
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1221              		.loc 1 531 2 view .LVU375
 1222 000c B9F1000F 		cmp	r9, #0
 526:src/matrix.c  **** 	int i, k;
 1223              		.loc 1 526 117 view .LVU376
 1224 0010 0193     		str	r3, [sp, #4]
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1225              		.loc 1 531 2 view .LVU377
 1226 0012 48DD     		ble	.L96
 1227 0014 09F10103 		add	r3, r9, #1
 1228              	.LVL129:
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1229              		.loc 1 531 2 view .LVU378
 1230 0018 0593     		str	r3, [sp, #20]
 1231 001a 4FF0000B 		mov	fp, #0
 1232 001e 013A     		subs	r2, r2, #1
 1233              	.LVL130:
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1234              		.loc 1 531 2 view .LVU379
 1235 0020 1B01     		lsls	r3, r3, #4
 1236 0022 8846     		mov	r8, r1
 1237 0024 0293     		str	r3, [sp, #8]
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1238              		.loc 1 531 8 view .LVU380
 1239 0026 5F46     		mov	r7, fp
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1240              		.loc 1 531 2 view .LVU381
 1241 0028 0646     		mov	r6, r0
 1242 002a 9246     		mov	r10, r2
 1243              	.LVL131:
 1244              	.L101:
 532:src/matrix.c  **** 			const decimal64 *swap = b[k];
 1245              		.loc 1 532 3 is_stmt 1 view .LVU382
 532:src/matrix.c  **** 			const decimal64 *swap = b[k];
 1246              		.loc 1 532 17 is_stmt 0 view .LVU383
 1247 002c 1AF8013F 		ldrb	r3, [r10, #1]!	@ zero_extendqisi2
 532:src/matrix.c  **** 			const decimal64 *swap = b[k];
 1248              		.loc 1 532 6 view .LVU384
 1249 0030 BB42     		cmp	r3, r7
 1250 0032 09D0     		beq	.L115
 1251              	.LBB122:
 533:src/matrix.c  **** 			b[k] = b[pivot[k]];
 1252              		.loc 1 533 4 is_stmt 1 view .LVU385
 534:src/matrix.c  **** 			b[pivot[k]] = swap;
 1253              		.loc 1 534 12 is_stmt 0 view .LVU386
 1254 0034 58F82330 		ldr	r3, [r8, r3, lsl #2]
 533:src/matrix.c  **** 			b[k] = b[pivot[k]];
 1255              		.loc 1 533 21 view .LVU387
ARM GAS  /tmp/cc0YfLmr.s 			page 38


 1256 0038 58F82720 		ldr	r2, [r8, r7, lsl #2]
 1257              	.LVL132:
 534:src/matrix.c  **** 			b[pivot[k]] = swap;
 1258              		.loc 1 534 4 is_stmt 1 view .LVU388
 534:src/matrix.c  **** 			b[pivot[k]] = swap;
 1259              		.loc 1 534 9 is_stmt 0 view .LVU389
 1260 003c 48F82730 		str	r3, [r8, r7, lsl #2]
 535:src/matrix.c  **** 		}
 1261              		.loc 1 535 4 is_stmt 1 view .LVU390
 535:src/matrix.c  **** 		}
 1262              		.loc 1 535 5 is_stmt 0 view .LVU391
 1263 0040 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 535:src/matrix.c  **** 		}
 1264              		.loc 1 535 16 view .LVU392
 1265 0044 48F82320 		str	r2, [r8, r3, lsl #2]
 1266              	.LVL133:
 1267              	.L115:
 535:src/matrix.c  **** 		}
 1268              		.loc 1 535 16 view .LVU393
 1269              	.LBE122:
 537:src/matrix.c  **** 		for (i=0; i<k; i++) {
 1270              		.loc 1 537 3 is_stmt 1 view .LVU394
 1271 0048 019C     		ldr	r4, [sp, #4]
 1272 004a 08EB8703 		add	r3, r8, r7, lsl #2
 1273 004e 07EBC705 		add	r5, r7, r7, lsl #3
 1274 0052 04EB8505 		add	r5, r4, r5, lsl #2
 1275 0056 1868     		ldr	r0, [r3]
 1276 0058 2946     		mov	r1, r5
 1277 005a FB00     		lsls	r3, r7, #3
 1278 005c 0493     		str	r3, [sp, #16]
 1279 005e FFF7FEFF 		bl	decimal64ToNumber
 1280              	.LVL134:
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1281              		.loc 1 538 3 view .LVU395
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1282              		.loc 1 538 13 view .LVU396
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1283              		.loc 1 538 3 is_stmt 0 view .LVU397
 1284 0062 B7B1     		cbz	r7, .L104
 1285 0064 039B     		ldr	r3, [sp, #12]
 1286 0066 03EB0B19 		add	r9, r3, fp, lsl #4
 1287              	.LVL135:
 1288              	.L103:
 539:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 1289              		.loc 1 539 4 is_stmt 1 view .LVU398
 1290              	.LBB123:
 1291              	.LBI123:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 1292              		.loc 1 443 13 view .LVU399
 1293              	.LBB124:
 444:src/matrix.c  **** }
 1294              		.loc 1 444 2 view .LVU400
 1295              	.LBE124:
 1296              	.LBE123:
  27:src/matrix.c  **** }
 1297              		.loc 1 27 2 view .LVU401
 1298              	.LBB126:
ARM GAS  /tmp/cc0YfLmr.s 			page 39


 1299              	.LBB125:
 444:src/matrix.c  **** }
 1300              		.loc 1 444 2 is_stmt 0 view .LVU402
 1301 006a 06A9     		add	r1, sp, #24
 1302              	.LVL136:
 444:src/matrix.c  **** }
 1303              		.loc 1 444 2 view .LVU403
 1304 006c 4846     		mov	r0, r9
 1305 006e FFF7FEFF 		bl	decimal128ToNumber
 1306              	.LVL137:
 444:src/matrix.c  **** }
 1307              		.loc 1 444 2 view .LVU404
 1308              	.LBE125:
 1309              	.LBE126:
 540:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 1310              		.loc 1 540 4 is_stmt 1 view .LVU405
 1311 0072 2246     		mov	r2, r4
 1312 0074 06A9     		add	r1, sp, #24
 1313 0076 0FA8     		add	r0, sp, #60
 1314 0078 FFF7FEFF 		bl	dn_multiply
 1315              	.LVL138:
 541:src/matrix.c  **** 		}
 1316              		.loc 1 541 4 view .LVU406
 1317 007c 09F11009 		add	r9, r9, #16
 1318 0080 0FAA     		add	r2, sp, #60
 1319 0082 2946     		mov	r1, r5
 1320 0084 2846     		mov	r0, r5
 1321 0086 FFF7FEFF 		bl	dn_subtract
 1322              	.LVL139:
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1323              		.loc 1 538 18 view .LVU407
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1324              		.loc 1 538 13 view .LVU408
 538:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1325              		.loc 1 538 3 is_stmt 0 view .LVU409
 1326 008a B145     		cmp	r9, r6
 1327 008c 04F12404 		add	r4, r4, #36
 1328 0090 EBD1     		bne	.L103
 1329              	.L104:
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1330              		.loc 1 531 17 is_stmt 1 view .LVU410
 1331 0092 229A     		ldr	r2, [sp, #136]
 1332 0094 9344     		add	fp, fp, r2
 1333 0096 029A     		ldr	r2, [sp, #8]
 1334 0098 1644     		add	r6, r6, r2
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1335              		.loc 1 531 2 is_stmt 0 view .LVU411
 1336 009a 229A     		ldr	r2, [sp, #136]
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1337              		.loc 1 531 18 view .LVU412
 1338 009c 7B1C     		adds	r3, r7, #1
 1339              	.LVL140:
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1340              		.loc 1 531 12 is_stmt 1 view .LVU413
 531:src/matrix.c  **** 		if (k != pivot[k]) {
 1341              		.loc 1 531 2 is_stmt 0 view .LVU414
 1342 009e 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc0YfLmr.s 			page 40


 1343 00a0 04D0     		beq	.L116
 1344 00a2 1F46     		mov	r7, r3
 1345 00a4 C2E7     		b	.L101
 1346              	.LVL141:
 1347              	.L96:
 561:src/matrix.c  **** 
 1348              		.loc 1 561 1 view .LVU415
 1349 00a6 19B0     		add	sp, sp, #100
 1350              		.cfi_remember_state
 1351              		.cfi_def_cfa_offset 36
 1352              		@ sp needed
 1353 00a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1354              	.LVL142:
 1355              	.L116:
 1356              		.cfi_restore_state
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1357              		.loc 1 546 2 is_stmt 1 view .LVU416
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1358              		.loc 1 546 14 view .LVU417
 1359 00ac 9146     		mov	r9, r2
 1360 00ae 049A     		ldr	r2, [sp, #16]
 1361 00b0 059B     		ldr	r3, [sp, #20]
 1362 00b2 3A44     		add	r2, r2, r7
 1363 00b4 1546     		mov	r5, r2
 1364 00b6 019A     		ldr	r2, [sp, #4]
 1365 00b8 02EB8505 		add	r5, r2, r5, lsl #2
 1366 00bc 039A     		ldr	r2, [sp, #12]
 1367 00be 1B01     		lsls	r3, r3, #4
 1368 00c0 C9EB097A 		rsb	r10, r9, r9, lsl #28
 1369 00c4 A3F11006 		sub	r6, r3, #16
 1370 00c8 6FEA090B 		mvn	fp, r9
 1371 00cc 03FB0727 		mla	r7, r3, r7, r2
 1372              	.LVL143:
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1373              		.loc 1 546 14 is_stmt 0 view .LVU418
 1374 00d0 4FEA0A13 		lsl	r3, r10, #4
 1375 00d4 06FB0926 		mla	r6, r6, r9, r2
 1376 00d8 4FEA0B1B 		lsl	fp, fp, #4
 1377 00dc 0193     		str	r3, [sp, #4]
 1378              	.LVL144:
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1379              		.loc 1 546 14 view .LVU419
 1380 00de C846     		mov	r8, r9
 1381              	.LVL145:
 1382              	.L108:
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1383              		.loc 1 548 3 is_stmt 1 view .LVU420
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1384              		.loc 1 548 15 view .LVU421
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1385              		.loc 1 548 3 is_stmt 0 view .LVU422
 1386 00e0 C145     		cmp	r9, r8
 1387 00e2 17DD     		ble	.L107
 1388 00e4 07F1100A 		add	r10, r7, #16
 1389 00e8 05F12404 		add	r4, r5, #36
 1390              	.LVL146:
 1391              	.L106:
ARM GAS  /tmp/cc0YfLmr.s 			page 41


 549:src/matrix.c  **** 			dn_multiply(&t, &r, x+i);
 1392              		.loc 1 549 4 is_stmt 1 view .LVU423
 1393              	.LBB127:
 1394              	.LBI127:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 1395              		.loc 1 443 13 view .LVU424
 1396              	.LBB128:
 444:src/matrix.c  **** }
 1397              		.loc 1 444 2 view .LVU425
 444:src/matrix.c  **** }
 1398              		.loc 1 444 2 is_stmt 0 view .LVU426
 1399              	.LBE128:
 1400              	.LBE127:
  27:src/matrix.c  **** }
 1401              		.loc 1 27 2 is_stmt 1 view .LVU427
 1402              	.LBB130:
 1403              	.LBB129:
 444:src/matrix.c  **** }
 1404              		.loc 1 444 2 is_stmt 0 view .LVU428
 1405 00ec 06A9     		add	r1, sp, #24
 1406              	.LVL147:
 444:src/matrix.c  **** }
 1407              		.loc 1 444 2 view .LVU429
 1408 00ee 5046     		mov	r0, r10
 1409 00f0 FFF7FEFF 		bl	decimal128ToNumber
 1410              	.LVL148:
 444:src/matrix.c  **** }
 1411              		.loc 1 444 2 view .LVU430
 1412              	.LBE129:
 1413              	.LBE130:
 550:src/matrix.c  **** 			dn_subtract(x+k, x+k, &t);
 1414              		.loc 1 550 4 is_stmt 1 view .LVU431
 1415 00f4 2246     		mov	r2, r4
 1416 00f6 06A9     		add	r1, sp, #24
 1417 00f8 0FA8     		add	r0, sp, #60
 1418 00fa FFF7FEFF 		bl	dn_multiply
 1419              	.LVL149:
 551:src/matrix.c  **** 		}
 1420              		.loc 1 551 4 view .LVU432
 1421 00fe 0AF1100A 		add	r10, r10, #16
 1422 0102 0FAA     		add	r2, sp, #60
 1423 0104 2946     		mov	r1, r5
 1424 0106 2846     		mov	r0, r5
 1425 0108 FFF7FEFF 		bl	dn_subtract
 1426              	.LVL150:
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1427              		.loc 1 548 20 view .LVU433
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1428              		.loc 1 548 15 view .LVU434
 548:src/matrix.c  **** 			matrix_get128(&r, LU, k, i, n);
 1429              		.loc 1 548 3 is_stmt 0 view .LVU435
 1430 010c B245     		cmp	r10, r6
 1431 010e 04F12404 		add	r4, r4, #36
 1432 0112 EBD1     		bne	.L106
 1433              	.L107:
 553:src/matrix.c  **** #if 0
 1434              		.loc 1 553 3 is_stmt 1 view .LVU436
ARM GAS  /tmp/cc0YfLmr.s 			page 42


 1435              	.LVL151:
 1436              	.LBB131:
 1437              	.LBI131:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 1438              		.loc 1 443 13 view .LVU437
 1439              	.LBB132:
 444:src/matrix.c  **** }
 1440              		.loc 1 444 2 view .LVU438
 444:src/matrix.c  **** }
 1441              		.loc 1 444 2 is_stmt 0 view .LVU439
 1442              	.LBE132:
 1443              	.LBE131:
  27:src/matrix.c  **** }
 1444              		.loc 1 27 2 is_stmt 1 view .LVU440
 1445              	.LBB134:
 1446              	.LBB133:
 444:src/matrix.c  **** }
 1447              		.loc 1 444 2 is_stmt 0 view .LVU441
 1448 0114 06A9     		add	r1, sp, #24
 1449              	.LVL152:
 444:src/matrix.c  **** }
 1450              		.loc 1 444 2 view .LVU442
 1451 0116 3846     		mov	r0, r7
 1452 0118 FFF7FEFF 		bl	decimal128ToNumber
 1453              	.LVL153:
 444:src/matrix.c  **** }
 1454              		.loc 1 444 2 view .LVU443
 1455              	.LBE133:
 1456              	.LBE134:
 559:src/matrix.c  **** 	}
 1457              		.loc 1 559 3 is_stmt 1 view .LVU444
 1458 011c 019B     		ldr	r3, [sp, #4]
 1459 011e 2946     		mov	r1, r5
 1460 0120 2846     		mov	r0, r5
 1461 0122 06AA     		add	r2, sp, #24
 1462 0124 1E44     		add	r6, r6, r3
 1463 0126 FFF7FEFF 		bl	dn_divide
 1464              	.LVL154:
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1465              		.loc 1 546 20 view .LVU445
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1466              		.loc 1 546 14 view .LVU446
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1467              		.loc 1 546 2 is_stmt 0 view .LVU447
 1468 012a B8F1020F 		cmp	r8, #2
 1469 012e 5F44     		add	r7, r7, fp
 1470 0130 A5F12405 		sub	r5, r5, #36
 1471 0134 08F1FF33 		add	r3, r8, #-1
 1472 0138 B5D4     		bmi	.L96
 1473 013a 9846     		mov	r8, r3
 1474              	.LVL155:
 546:src/matrix.c  **** 		//if(k != pivot[k]) swap(b[k], b[pivot[k]]);		// undo pivoting from before
 1475              		.loc 1 546 2 view .LVU448
 1476 013c D0E7     		b	.L108
 1477              		.cfi_endproc
 1478              	.LFE24:
 1480 013e 00BF     		.section	.text.matrix_descriptor,"ax",%progbits
ARM GAS  /tmp/cc0YfLmr.s 			page 43


 1481              		.align	1
 1482              		.p2align 2,,3
 1483              		.syntax unified
 1484              		.thumb
 1485              		.thumb_func
 1486              		.fpu fpv4-sp-d16
 1488              	matrix_descriptor:
 1489              	.LVL156:
 1490              	.LFB3:
  59:src/matrix.c  **** 	decNumber z;
 1491              		.loc 1 59 74 is_stmt 1 view -0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 40
 1494              		@ frame_needed = 0, uses_anonymous_args = 0
  60:src/matrix.c  **** 
 1495              		.loc 1 60 2 view .LVU450
  62:src/matrix.c  **** 		return 0;
 1496              		.loc 1 62 2 view .LVU451
  59:src/matrix.c  **** 	decNumber z;
 1497              		.loc 1 59 74 is_stmt 0 view .LVU452
 1498 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1499              		.cfi_def_cfa_offset 20
 1500              		.cfi_offset 4, -20
 1501              		.cfi_offset 5, -16
 1502              		.cfi_offset 6, -12
 1503              		.cfi_offset 7, -8
 1504              		.cfi_offset 14, -4
 1505 0002 0C46     		mov	r4, r1
 1506 0004 1646     		mov	r6, r2
 1507 0006 8BB0     		sub	sp, sp, #44
 1508              		.cfi_def_cfa_offset 64
  59:src/matrix.c  **** 	decNumber z;
 1509              		.loc 1 59 74 view .LVU453
 1510 0008 0746     		mov	r7, r0
  62:src/matrix.c  **** 		return 0;
 1511              		.loc 1 62 8 view .LVU454
 1512 000a 1A46     		mov	r2, r3
 1513              	.LVL157:
  62:src/matrix.c  **** 		return 0;
 1514              		.loc 1 62 8 view .LVU455
 1515 000c 3146     		mov	r1, r6
 1516              	.LVL158:
  62:src/matrix.c  **** 		return 0;
 1517              		.loc 1 62 8 view .LVU456
 1518 000e 2046     		mov	r0, r4
 1519              	.LVL159:
  59:src/matrix.c  **** 	decNumber z;
 1520              		.loc 1 59 74 view .LVU457
 1521 0010 1D46     		mov	r5, r3
  62:src/matrix.c  **** 		return 0;
 1522              		.loc 1 62 8 view .LVU458
 1523 0012 FFF7FEFF 		bl	matrix_range_check
 1524              	.LVL160:
  62:src/matrix.c  **** 		return 0;
 1525              		.loc 1 62 5 view .LVU459
 1526 0016 70B1     		cbz	r0, .L117
 1527              	.LVL161:
ARM GAS  /tmp/cc0YfLmr.s 			page 44


 1528              	.LBB137:
 1529              	.LBI137:
  59:src/matrix.c  **** 	decNumber z;
 1530              		.loc 1 59 12 is_stmt 1 view .LVU460
 1531              	.LBB138:
  64:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1532              		.loc 1 64 2 view .LVU461
  64:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1533              		.loc 1 64 22 is_stmt 0 view .LVU462
 1534 0018 6421     		movs	r1, #100
  64:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1535              		.loc 1 64 28 view .LVU463
 1536 001a 01FB0464 		mla	r4, r1, r4, r6
 1537              	.LVL162:
  64:src/matrix.c  **** 	dn_mulpow10(r, &z, -4);
 1538              		.loc 1 64 2 view .LVU464
 1539 001e 01FB0451 		mla	r1, r1, r4, r5
 1540 0022 01A8     		add	r0, sp, #4
 1541 0024 FFF7FEFF 		bl	int_to_dn
 1542              	.LVL163:
  65:src/matrix.c  **** 	return 1;
 1543              		.loc 1 65 2 is_stmt 1 view .LVU465
 1544 0028 01A9     		add	r1, sp, #4
 1545 002a 3846     		mov	r0, r7
 1546 002c 6FF00302 		mvn	r2, #3
 1547 0030 FFF7FEFF 		bl	dn_mulpow10
 1548              	.LVL164:
  66:src/matrix.c  **** }
 1549              		.loc 1 66 2 view .LVU466
  66:src/matrix.c  **** }
 1550              		.loc 1 66 2 is_stmt 0 view .LVU467
 1551 0034 0120     		movs	r0, #1
 1552              	.L117:
 1553              	.LBE138:
 1554              	.LBE137:
  67:src/matrix.c  **** 
 1555              		.loc 1 67 1 view .LVU468
 1556 0036 0BB0     		add	sp, sp, #44
 1557              		.cfi_def_cfa_offset 20
 1558              		@ sp needed
 1559 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
  67:src/matrix.c  **** 
 1560              		.loc 1 67 1 view .LVU469
 1561              		.cfi_endproc
 1562              	.LFE3:
 1564 003a 00BF     		.section	.text.matrix_is_square,"ax",%progbits
 1565              		.align	1
 1566              		.p2align 2,,3
 1567              		.global	matrix_is_square
 1568              		.syntax unified
 1569              		.thumb
 1570              		.thumb_func
 1571              		.fpu fpv4-sp-d16
 1573              	matrix_is_square:
 1574              	.LVL165:
 1575              	.LFB6:
 117:src/matrix.c  **** 	int r, c;
ARM GAS  /tmp/cc0YfLmr.s 			page 45


 1576              		.loc 1 117 38 is_stmt 1 view -0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 48
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 118:src/matrix.c  **** 	decNumber x;
 1580              		.loc 1 118 2 view .LVU471
 119:src/matrix.c  **** 
 1581              		.loc 1 119 2 view .LVU472
 121:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 1582              		.loc 1 121 2 view .LVU473
 117:src/matrix.c  **** 	int r, c;
 1583              		.loc 1 117 38 is_stmt 0 view .LVU474
 1584 0000 00B5     		push	{lr}
 1585              		.cfi_def_cfa_offset 4
 1586              		.cfi_offset 14, -4
 1587 0002 8DB0     		sub	sp, sp, #52
 1588              		.cfi_def_cfa_offset 56
 121:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 1589              		.loc 1 121 2 view .LVU475
 1590 0004 03A8     		add	r0, sp, #12
 1591              	.LVL166:
 121:src/matrix.c  **** 	if (matrix_decompose(&x, &r, &c, NULL) < 0)
 1592              		.loc 1 121 2 view .LVU476
 1593 0006 FFF7FEFF 		bl	getX
 1594              	.LVL167:
 122:src/matrix.c  **** 		return;
 1595              		.loc 1 122 2 is_stmt 1 view .LVU477
 122:src/matrix.c  **** 		return;
 1596              		.loc 1 122 6 is_stmt 0 view .LVU478
 1597 000a 03A8     		add	r0, sp, #12
 1598 000c 0023     		movs	r3, #0
 1599 000e 02AA     		add	r2, sp, #8
 1600 0010 01A9     		add	r1, sp, #4
 1601 0012 FFF7FEFF 		bl	matrix_decompose
 1602              	.LVL168:
 122:src/matrix.c  **** 		return;
 1603              		.loc 1 122 5 view .LVU479
 1604 0016 0028     		cmp	r0, #0
 1605 0018 07DB     		blt	.L123
 124:src/matrix.c  **** }
 1606              		.loc 1 124 2 is_stmt 1 view .LVU480
 1607 001a DDE90103 		ldrd	r0, r3, [sp, #4]
 1608 001e C01A     		subs	r0, r0, r3
 1609 0020 B0FA80F0 		clz	r0, r0
 1610 0024 4009     		lsrs	r0, r0, #5
 1611 0026 FFF7FEFF 		bl	fin_tst
 1612              	.LVL169:
 1613              	.L123:
 125:src/matrix.c  **** 
 1614              		.loc 1 125 1 is_stmt 0 view .LVU481
 1615 002a 0DB0     		add	sp, sp, #52
 1616              		.cfi_def_cfa_offset 4
 1617              		@ sp needed
 1618 002c 5DF804FB 		ldr	pc, [sp], #4
 1619              		.cfi_endproc
 1620              	.LFE6:
 1622              		.section	.text.matrix_copy,"ax",%progbits
ARM GAS  /tmp/cc0YfLmr.s 			page 46


 1623              		.align	1
 1624              		.p2align 2,,3
 1625              		.global	matrix_copy
 1626              		.syntax unified
 1627              		.thumb
 1628              		.thumb_func
 1629              		.fpu fpv4-sp-d16
 1631              	matrix_copy:
 1632              	.LVL170:
 1633              	.LFB7:
 159:src/matrix.c  **** 	decimal64 *src;
 1634              		.loc 1 159 78 is_stmt 1 view -0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 8
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 160:src/matrix.c  **** 	int rows, cols, d;
 1638              		.loc 1 160 2 view .LVU483
 161:src/matrix.c  **** 
 1639              		.loc 1 161 2 view .LVU484
 163:src/matrix.c  **** 	if (src == NULL)
 1640              		.loc 1 163 2 view .LVU485
 159:src/matrix.c  **** 	decimal64 *src;
 1641              		.loc 1 159 78 is_stmt 0 view .LVU486
 1642 0000 70B5     		push	{r4, r5, r6, lr}
 1643              		.cfi_def_cfa_offset 16
 1644              		.cfi_offset 4, -16
 1645              		.cfi_offset 5, -12
 1646              		.cfi_offset 6, -8
 1647              		.cfi_offset 14, -4
 1648 0002 82B0     		sub	sp, sp, #8
 1649              		.cfi_def_cfa_offset 24
 159:src/matrix.c  **** 	decimal64 *src;
 1650              		.loc 1 159 78 view .LVU487
 1651 0004 0446     		mov	r4, r0
 1652 0006 1646     		mov	r6, r2
 163:src/matrix.c  **** 	if (src == NULL)
 1653              		.loc 1 163 8 view .LVU488
 1654 0008 0846     		mov	r0, r1
 1655              	.LVL171:
 163:src/matrix.c  **** 	if (src == NULL)
 1656              		.loc 1 163 8 view .LVU489
 1657 000a 01AA     		add	r2, sp, #4
 1658              	.LVL172:
 163:src/matrix.c  **** 	if (src == NULL)
 1659              		.loc 1 163 8 view .LVU490
 1660 000c 6946     		mov	r1, sp
 1661              	.LVL173:
 163:src/matrix.c  **** 	if (src == NULL)
 1662              		.loc 1 163 8 view .LVU491
 1663 000e FFF7FEFF 		bl	matrix_decomp
 1664              	.LVL174:
 164:src/matrix.c  **** 		return NULL;
 1665              		.loc 1 164 2 is_stmt 1 view .LVU492
 164:src/matrix.c  **** 		return NULL;
 1666              		.loc 1 164 5 is_stmt 0 view .LVU493
 1667 0012 C8B1     		cbz	r0, .L130
 167:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
ARM GAS  /tmp/cc0YfLmr.s 			page 47


 1668              		.loc 1 167 2 is_stmt 1 view .LVU494
 1669 0014 0546     		mov	r5, r0
 167:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 1670              		.loc 1 167 6 is_stmt 0 view .LVU495
 1671 0016 3046     		mov	r0, r6
 1672              	.LVL175:
 167:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 1673              		.loc 1 167 6 view .LVU496
 1674 0018 FFF7FEFF 		bl	dn_to_int
 1675              	.LVL176:
 168:src/matrix.c  **** 		return NULL;
 1676              		.loc 1 168 6 view .LVU497
 1677 001c DDE90023 		ldrd	r2, r3, [sp]
 167:src/matrix.c  **** 	if (matrix_descriptor(r, d, rows, cols) == 0)
 1678              		.loc 1 167 6 view .LVU498
 1679 0020 0646     		mov	r6, r0
 1680              	.LVL177:
 168:src/matrix.c  **** 		return NULL;
 1681              		.loc 1 168 2 is_stmt 1 view .LVU499
 168:src/matrix.c  **** 		return NULL;
 1682              		.loc 1 168 6 is_stmt 0 view .LVU500
 1683 0022 0146     		mov	r1, r0
 1684 0024 2046     		mov	r0, r4
 1685              	.LVL178:
 168:src/matrix.c  **** 		return NULL;
 1686              		.loc 1 168 6 view .LVU501
 1687 0026 FFF7FEFF 		bl	matrix_descriptor
 1688              	.LVL179:
 168:src/matrix.c  **** 		return NULL;
 1689              		.loc 1 168 5 view .LVU502
 1690 002a 68B1     		cbz	r0, .L130
 170:src/matrix.c  **** 	return r;
 1691              		.loc 1 170 2 is_stmt 1 view .LVU503
 170:src/matrix.c  **** 	return r;
 1692              		.loc 1 170 8 is_stmt 0 view .LVU504
 1693 002c 3046     		mov	r0, r6
 1694 002e FFF7FEFF 		bl	get_reg_n
 1695              	.LVL180:
 170:src/matrix.c  **** 	return r;
 1696              		.loc 1 170 32 view .LVU505
 1697 0032 DDE90032 		ldrd	r3, r2, [sp]
 1698 0036 02FB03F2 		mul	r2, r2, r3
 170:src/matrix.c  **** 	return r;
 1699              		.loc 1 170 2 view .LVU506
 1700 003a 2946     		mov	r1, r5
 1701 003c D200     		lsls	r2, r2, #3
 1702 003e FFF7FEFF 		bl	xcopy
 1703              	.LVL181:
 171:src/matrix.c  **** }
 1704              		.loc 1 171 2 is_stmt 1 view .LVU507
 171:src/matrix.c  **** }
 1705              		.loc 1 171 9 is_stmt 0 view .LVU508
 1706 0042 2046     		mov	r0, r4
 172:src/matrix.c  **** 
 1707              		.loc 1 172 1 view .LVU509
 1708 0044 02B0     		add	sp, sp, #8
 1709              		.cfi_remember_state
ARM GAS  /tmp/cc0YfLmr.s 			page 48


 1710              		.cfi_def_cfa_offset 16
 1711              		@ sp needed
 1712 0046 70BD     		pop	{r4, r5, r6, pc}
 1713              	.LVL182:
 1714              	.L130:
 1715              		.cfi_restore_state
 165:src/matrix.c  **** 
 1716              		.loc 1 165 10 view .LVU510
 1717 0048 0020     		movs	r0, #0
 172:src/matrix.c  **** 
 1718              		.loc 1 172 1 view .LVU511
 1719 004a 02B0     		add	sp, sp, #8
 1720              		.cfi_def_cfa_offset 16
 1721              		@ sp needed
 1722 004c 70BD     		pop	{r4, r5, r6, pc}
 172:src/matrix.c  **** 
 1723              		.loc 1 172 1 view .LVU512
 1724              		.cfi_endproc
 1725              	.LFE7:
 1727 004e 00BF     		.section	.text.matrix_all,"ax",%progbits
 1728              		.align	1
 1729              		.p2align 2,,3
 1730              		.global	matrix_all
 1731              		.syntax unified
 1732              		.thumb
 1733              		.thumb_func
 1734              		.fpu fpv4-sp-d16
 1736              	matrix_all:
 1737              	.LVL183:
 1738              	.LFB9:
 189:src/matrix.c  **** 	int rows, cols, base, up;
 1739              		.loc 1 189 57 is_stmt 1 view -0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 16
 1742              		@ frame_needed = 0, uses_anonymous_args = 0
 190:src/matrix.c  **** 
 1743              		.loc 1 190 2 view .LVU514
 192:src/matrix.c  **** 	if (base < 0)
 1744              		.loc 1 192 2 view .LVU515
 189:src/matrix.c  **** 	int rows, cols, base, up;
 1745              		.loc 1 189 57 is_stmt 0 view .LVU516
 1746 0000 10B5     		push	{r4, lr}
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 4, -8
 1749              		.cfi_offset 14, -4
 1750 0002 86B0     		sub	sp, sp, #24
 1751              		.cfi_def_cfa_offset 32
 189:src/matrix.c  **** 	int rows, cols, base, up;
 1752              		.loc 1 189 57 view .LVU517
 1753 0004 0446     		mov	r4, r0
 192:src/matrix.c  **** 	if (base < 0)
 1754              		.loc 1 192 9 view .LVU518
 1755 0006 05AB     		add	r3, sp, #20
 1756 0008 0846     		mov	r0, r1
 1757              	.LVL184:
 192:src/matrix.c  **** 	if (base < 0)
 1758              		.loc 1 192 9 view .LVU519
ARM GAS  /tmp/cc0YfLmr.s 			page 49


 1759 000a 04AA     		add	r2, sp, #16
 1760 000c 03A9     		add	r1, sp, #12
 1761              	.LVL185:
 192:src/matrix.c  **** 	if (base < 0)
 1762              		.loc 1 192 9 view .LVU520
 1763 000e FFF7FEFF 		bl	matrix_decompose
 1764              	.LVL186:
 193:src/matrix.c  **** 		return NULL;
 1765              		.loc 1 193 2 is_stmt 1 view .LVU521
 193:src/matrix.c  **** 		return NULL;
 1766              		.loc 1 193 5 is_stmt 0 view .LVU522
 1767 0012 011E     		subs	r1, r0, #0
 1768 0014 0CDB     		blt	.L137
 195:src/matrix.c  **** }
 1769              		.loc 1 195 2 is_stmt 1 view .LVU523
 195:src/matrix.c  **** }
 1770              		.loc 1 195 42 is_stmt 0 view .LVU524
 1771 0016 DDE90323 		ldrd	r2, r3, [sp, #12]
 195:src/matrix.c  **** }
 1772              		.loc 1 195 9 view .LVU525
 1773 001a 0598     		ldr	r0, [sp, #20]
 1774              	.LVL187:
 195:src/matrix.c  **** }
 1775              		.loc 1 195 9 view .LVU526
 1776 001c 0090     		str	r0, [sp]
 195:src/matrix.c  **** }
 1777              		.loc 1 195 37 view .LVU527
 1778 001e 03FB0212 		mla	r2, r3, r2, r1
 195:src/matrix.c  **** }
 1779              		.loc 1 195 9 view .LVU528
 1780 0022 2046     		mov	r0, r4
 1781 0024 013A     		subs	r2, r2, #1
 1782 0026 0123     		movs	r3, #1
 1783 0028 FFF7FEFF 		bl	matrix_do_loop
 1784              	.LVL188:
 196:src/matrix.c  **** 
 1785              		.loc 1 196 1 view .LVU529
 1786 002c 06B0     		add	sp, sp, #24
 1787              		.cfi_remember_state
 1788              		.cfi_def_cfa_offset 8
 1789              		@ sp needed
 1790 002e 10BD     		pop	{r4, pc}
 1791              	.LVL189:
 1792              	.L137:
 1793              		.cfi_restore_state
 194:src/matrix.c  **** 	return matrix_do_loop(r, base, base+rows*cols-1, 1, up);
 1794              		.loc 1 194 10 view .LVU530
 1795 0030 0020     		movs	r0, #0
 1796              	.LVL190:
 196:src/matrix.c  **** 
 1797              		.loc 1 196 1 view .LVU531
 1798 0032 06B0     		add	sp, sp, #24
 1799              		.cfi_def_cfa_offset 8
 1800              		@ sp needed
 1801 0034 10BD     		pop	{r4, pc}
 196:src/matrix.c  **** 
 1802              		.loc 1 196 1 view .LVU532
ARM GAS  /tmp/cc0YfLmr.s 			page 50


 1803              		.cfi_endproc
 1804              	.LFE9:
 1806 0036 00BF     		.section	.text.matrix_diag,"ax",%progbits
 1807              		.align	1
 1808              		.p2align 2,,3
 1809              		.global	matrix_diag
 1810              		.syntax unified
 1811              		.thumb
 1812              		.thumb_func
 1813              		.fpu fpv4-sp-d16
 1815              	matrix_diag:
 1816              	.LVL191:
 1817              	.LFB10:
 198:src/matrix.c  **** 	int rows, cols, base, up, n;
 1818              		.loc 1 198 58 is_stmt 1 view -0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 16
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/matrix.c  **** 
 1822              		.loc 1 199 2 view .LVU534
 201:src/matrix.c  **** 	if (base < 0)
 1823              		.loc 1 201 2 view .LVU535
 198:src/matrix.c  **** 	int rows, cols, base, up, n;
 1824              		.loc 1 198 58 is_stmt 0 view .LVU536
 1825 0000 10B5     		push	{r4, lr}
 1826              		.cfi_def_cfa_offset 8
 1827              		.cfi_offset 4, -8
 1828              		.cfi_offset 14, -4
 1829 0002 86B0     		sub	sp, sp, #24
 1830              		.cfi_def_cfa_offset 32
 198:src/matrix.c  **** 	int rows, cols, base, up, n;
 1831              		.loc 1 198 58 view .LVU537
 1832 0004 0446     		mov	r4, r0
 201:src/matrix.c  **** 	if (base < 0)
 1833              		.loc 1 201 9 view .LVU538
 1834 0006 05AB     		add	r3, sp, #20
 1835 0008 0846     		mov	r0, r1
 1836              	.LVL192:
 201:src/matrix.c  **** 	if (base < 0)
 1837              		.loc 1 201 9 view .LVU539
 1838 000a 04AA     		add	r2, sp, #16
 1839 000c 03A9     		add	r1, sp, #12
 1840              	.LVL193:
 201:src/matrix.c  **** 	if (base < 0)
 1841              		.loc 1 201 9 view .LVU540
 1842 000e FFF7FEFF 		bl	matrix_decompose
 1843              	.LVL194:
 202:src/matrix.c  **** 		return NULL;
 1844              		.loc 1 202 2 is_stmt 1 view .LVU541
 202:src/matrix.c  **** 		return NULL;
 1845              		.loc 1 202 5 is_stmt 0 view .LVU542
 1846 0012 011E     		subs	r1, r0, #0
 1847 0014 10DB     		blt	.L141
 204:src/matrix.c  **** 	cols++;
 1848              		.loc 1 204 2 is_stmt 1 view .LVU543
 204:src/matrix.c  **** 	cols++;
 1849              		.loc 1 204 28 is_stmt 0 view .LVU544
ARM GAS  /tmp/cc0YfLmr.s 			page 51


 1850 0016 DDE90323 		ldrd	r2, r3, [sp, #12]
 1851 001a 9A42     		cmp	r2, r3
 1852 001c A8BF     		it	ge
 1853 001e 1A46     		movge	r2, r3
 206:src/matrix.c  **** }
 1854              		.loc 1 206 9 view .LVU545
 1855 0020 0598     		ldr	r0, [sp, #20]
 1856              	.LVL195:
 206:src/matrix.c  **** }
 1857              		.loc 1 206 9 view .LVU546
 1858 0022 0090     		str	r0, [sp]
 205:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 1859              		.loc 1 205 6 view .LVU547
 1860 0024 0133     		adds	r3, r3, #1
 204:src/matrix.c  **** 	cols++;
 1861              		.loc 1 204 4 view .LVU548
 1862 0026 013A     		subs	r2, r2, #1
 1863              	.LVL196:
 205:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 1864              		.loc 1 205 2 is_stmt 1 view .LVU549
 206:src/matrix.c  **** }
 1865              		.loc 1 206 9 is_stmt 0 view .LVU550
 1866 0028 2046     		mov	r0, r4
 1867 002a 02FB0312 		mla	r2, r2, r3, r1
 1868              	.LVL197:
 205:src/matrix.c  **** 	return matrix_do_loop(r, base, base+n*cols, cols, up);
 1869              		.loc 1 205 6 view .LVU551
 1870 002e 0493     		str	r3, [sp, #16]
 1871              	.LVL198:
 206:src/matrix.c  **** }
 1872              		.loc 1 206 2 is_stmt 1 view .LVU552
 206:src/matrix.c  **** }
 1873              		.loc 1 206 9 is_stmt 0 view .LVU553
 1874 0030 FFF7FEFF 		bl	matrix_do_loop
 1875              	.LVL199:
 207:src/matrix.c  **** 
 1876              		.loc 1 207 1 view .LVU554
 1877 0034 06B0     		add	sp, sp, #24
 1878              		.cfi_remember_state
 1879              		.cfi_def_cfa_offset 8
 1880              		@ sp needed
 1881 0036 10BD     		pop	{r4, pc}
 1882              	.LVL200:
 1883              	.L141:
 1884              		.cfi_restore_state
 203:src/matrix.c  **** 	n = ((rows < cols) ? rows : cols) - 1;
 1885              		.loc 1 203 10 view .LVU555
 1886 0038 0020     		movs	r0, #0
 1887              	.LVL201:
 207:src/matrix.c  **** 
 1888              		.loc 1 207 1 view .LVU556
 1889 003a 06B0     		add	sp, sp, #24
 1890              		.cfi_def_cfa_offset 8
 1891              		@ sp needed
 1892 003c 10BD     		pop	{r4, pc}
 207:src/matrix.c  **** 
 1893              		.loc 1 207 1 view .LVU557
ARM GAS  /tmp/cc0YfLmr.s 			page 52


 1894              		.cfi_endproc
 1895              	.LFE10:
 1897 003e 00BF     		.section	.text.matrix_row,"ax",%progbits
 1898              		.align	1
 1899              		.p2align 2,,3
 1900              		.global	matrix_row
 1901              		.syntax unified
 1902              		.thumb
 1903              		.thumb_func
 1904              		.fpu fpv4-sp-d16
 1906              	matrix_row:
 1907              	.LVL202:
 1908              	.LFB11:
 209:src/matrix.c  **** 	int rows, cols, base, up, n;
 1909              		.loc 1 209 77 is_stmt 1 view -0
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 16
 1912              		@ frame_needed = 0, uses_anonymous_args = 0
 210:src/matrix.c  **** 
 1913              		.loc 1 210 2 view .LVU559
 212:src/matrix.c  **** 	if (base < 0)
 1914              		.loc 1 212 2 view .LVU560
 209:src/matrix.c  **** 	int rows, cols, base, up, n;
 1915              		.loc 1 209 77 is_stmt 0 view .LVU561
 1916 0000 70B5     		push	{r4, r5, r6, lr}
 1917              		.cfi_def_cfa_offset 16
 1918              		.cfi_offset 4, -16
 1919              		.cfi_offset 5, -12
 1920              		.cfi_offset 6, -8
 1921              		.cfi_offset 14, -4
 1922 0002 86B0     		sub	sp, sp, #24
 1923              		.cfi_def_cfa_offset 40
 209:src/matrix.c  **** 	int rows, cols, base, up, n;
 1924              		.loc 1 209 77 view .LVU562
 1925 0004 0646     		mov	r6, r0
 1926 0006 0D46     		mov	r5, r1
 212:src/matrix.c  **** 	if (base < 0)
 1927              		.loc 1 212 9 view .LVU563
 1928 0008 1046     		mov	r0, r2
 1929              	.LVL203:
 212:src/matrix.c  **** 	if (base < 0)
 1930              		.loc 1 212 9 view .LVU564
 1931 000a 05AB     		add	r3, sp, #20
 1932 000c 04AA     		add	r2, sp, #16
 1933              	.LVL204:
 212:src/matrix.c  **** 	if (base < 0)
 1934              		.loc 1 212 9 view .LVU565
 1935 000e 03A9     		add	r1, sp, #12
 1936              	.LVL205:
 212:src/matrix.c  **** 	if (base < 0)
 1937              		.loc 1 212 9 view .LVU566
 1938 0010 FFF7FEFF 		bl	matrix_decompose
 1939              	.LVL206:
 213:src/matrix.c  **** 		return NULL;
 1940              		.loc 1 213 2 is_stmt 1 view .LVU567
 213:src/matrix.c  **** 		return NULL;
 1941              		.loc 1 213 5 is_stmt 0 view .LVU568
ARM GAS  /tmp/cc0YfLmr.s 			page 53


 1942 0014 041E     		subs	r4, r0, #0
 1943 0016 1ADB     		blt	.L147
 215:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 1944              		.loc 1 215 2 is_stmt 1 view .LVU569
 215:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 1945              		.loc 1 215 6 is_stmt 0 view .LVU570
 1946 0018 2846     		mov	r0, r5
 1947              	.LVL207:
 215:src/matrix.c  **** 	if (n < 0 || n >= rows) {
 1948              		.loc 1 215 6 view .LVU571
 1949 001a FFF7FEFF 		bl	dn_to_int
 1950              	.LVL208:
 216:src/matrix.c  **** 		report_err(ERR_RANGE);
 1951              		.loc 1 216 2 is_stmt 1 view .LVU572
 216:src/matrix.c  **** 		report_err(ERR_RANGE);
 1952              		.loc 1 216 5 is_stmt 0 view .LVU573
 1953 001e 411E     		subs	r1, r0, #1
 1954              	.LVL209:
 216:src/matrix.c  **** 		report_err(ERR_RANGE);
 1955              		.loc 1 216 5 view .LVU574
 1956 0020 0FD4     		bmi	.L145
 216:src/matrix.c  **** 		report_err(ERR_RANGE);
 1957              		.loc 1 216 12 discriminator 1 view .LVU575
 1958 0022 039B     		ldr	r3, [sp, #12]
 1959 0024 8B42     		cmp	r3, r1
 1960 0026 0CDD     		ble	.L145
 220:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols - 1, 1, up);
 1961              		.loc 1 220 2 is_stmt 1 view .LVU576
 221:src/matrix.c  **** }
 1962              		.loc 1 221 9 is_stmt 0 view .LVU577
 1963 0028 DDE90423 		ldrd	r2, r3, [sp, #16]
 220:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols - 1, 1, up);
 1964              		.loc 1 220 7 view .LVU578
 1965 002c 01FB0241 		mla	r1, r1, r2, r4
 1966              	.LVL210:
 221:src/matrix.c  **** }
 1967              		.loc 1 221 2 is_stmt 1 view .LVU579
 221:src/matrix.c  **** }
 1968              		.loc 1 221 38 is_stmt 0 view .LVU580
 1969 0030 0A44     		add	r2, r2, r1
 221:src/matrix.c  **** }
 1970              		.loc 1 221 9 view .LVU581
 1971 0032 0093     		str	r3, [sp]
 1972 0034 3046     		mov	r0, r6
 1973              	.LVL211:
 221:src/matrix.c  **** }
 1974              		.loc 1 221 9 view .LVU582
 1975 0036 013A     		subs	r2, r2, #1
 1976 0038 0123     		movs	r3, #1
 1977 003a FFF7FEFF 		bl	matrix_do_loop
 1978              	.LVL212:
 222:src/matrix.c  **** 
 1979              		.loc 1 222 1 view .LVU583
 1980 003e 06B0     		add	sp, sp, #24
 1981              		.cfi_remember_state
 1982              		.cfi_def_cfa_offset 16
 1983              		@ sp needed
ARM GAS  /tmp/cc0YfLmr.s 			page 54


 1984 0040 70BD     		pop	{r4, r5, r6, pc}
 1985              	.LVL213:
 1986              	.L145:
 1987              		.cfi_restore_state
 217:src/matrix.c  **** 		return NULL;
 1988              		.loc 1 217 3 is_stmt 1 view .LVU584
 1989 0042 0820     		movs	r0, #8
 1990 0044 FFF7FEFF 		bl	report_err
 1991              	.LVL214:
 218:src/matrix.c  **** 	}
 1992              		.loc 1 218 3 view .LVU585
 218:src/matrix.c  **** 	}
 1993              		.loc 1 218 10 is_stmt 0 view .LVU586
 1994 0048 0020     		movs	r0, #0
 222:src/matrix.c  **** 
 1995              		.loc 1 222 1 view .LVU587
 1996 004a 06B0     		add	sp, sp, #24
 1997              		.cfi_remember_state
 1998              		.cfi_def_cfa_offset 16
 1999              		@ sp needed
 2000 004c 70BD     		pop	{r4, r5, r6, pc}
 2001              	.LVL215:
 2002              	.L147:
 2003              		.cfi_restore_state
 214:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 2004              		.loc 1 214 10 view .LVU588
 2005 004e 0020     		movs	r0, #0
 2006              	.LVL216:
 222:src/matrix.c  **** 
 2007              		.loc 1 222 1 view .LVU589
 2008 0050 06B0     		add	sp, sp, #24
 2009              		.cfi_def_cfa_offset 16
 2010              		@ sp needed
 2011 0052 70BD     		pop	{r4, r5, r6, pc}
 222:src/matrix.c  **** 
 2012              		.loc 1 222 1 view .LVU590
 2013              		.cfi_endproc
 2014              	.LFE11:
 2016              		.section	.text.matrix_col,"ax",%progbits
 2017              		.align	1
 2018              		.p2align 2,,3
 2019              		.global	matrix_col
 2020              		.syntax unified
 2021              		.thumb
 2022              		.thumb_func
 2023              		.fpu fpv4-sp-d16
 2025              	matrix_col:
 2026              	.LVL217:
 2027              	.LFB12:
 224:src/matrix.c  **** 	int rows, cols, base, up, n;
 2028              		.loc 1 224 77 is_stmt 1 view -0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 16
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
 225:src/matrix.c  **** 
 2032              		.loc 1 225 2 view .LVU592
 227:src/matrix.c  **** 	if (base < 0)
ARM GAS  /tmp/cc0YfLmr.s 			page 55


 2033              		.loc 1 227 2 view .LVU593
 224:src/matrix.c  **** 	int rows, cols, base, up, n;
 2034              		.loc 1 224 77 is_stmt 0 view .LVU594
 2035 0000 70B5     		push	{r4, r5, r6, lr}
 2036              		.cfi_def_cfa_offset 16
 2037              		.cfi_offset 4, -16
 2038              		.cfi_offset 5, -12
 2039              		.cfi_offset 6, -8
 2040              		.cfi_offset 14, -4
 2041 0002 86B0     		sub	sp, sp, #24
 2042              		.cfi_def_cfa_offset 40
 224:src/matrix.c  **** 	int rows, cols, base, up, n;
 2043              		.loc 1 224 77 view .LVU595
 2044 0004 0646     		mov	r6, r0
 2045 0006 0D46     		mov	r5, r1
 227:src/matrix.c  **** 	if (base < 0)
 2046              		.loc 1 227 9 view .LVU596
 2047 0008 1046     		mov	r0, r2
 2048              	.LVL218:
 227:src/matrix.c  **** 	if (base < 0)
 2049              		.loc 1 227 9 view .LVU597
 2050 000a 05AB     		add	r3, sp, #20
 2051 000c 04AA     		add	r2, sp, #16
 2052              	.LVL219:
 227:src/matrix.c  **** 	if (base < 0)
 2053              		.loc 1 227 9 view .LVU598
 2054 000e 03A9     		add	r1, sp, #12
 2055              	.LVL220:
 227:src/matrix.c  **** 	if (base < 0)
 2056              		.loc 1 227 9 view .LVU599
 2057 0010 FFF7FEFF 		bl	matrix_decompose
 2058              	.LVL221:
 228:src/matrix.c  **** 		return NULL;
 2059              		.loc 1 228 2 is_stmt 1 view .LVU600
 228:src/matrix.c  **** 		return NULL;
 2060              		.loc 1 228 5 is_stmt 0 view .LVU601
 2061 0014 041E     		subs	r4, r0, #0
 2062 0016 19DB     		blt	.L153
 230:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 2063              		.loc 1 230 2 is_stmt 1 view .LVU602
 230:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 2064              		.loc 1 230 6 is_stmt 0 view .LVU603
 2065 0018 2846     		mov	r0, r5
 2066              	.LVL222:
 230:src/matrix.c  **** 	if (n < 0 || n >= cols) {
 2067              		.loc 1 230 6 view .LVU604
 2068 001a FFF7FEFF 		bl	dn_to_int
 2069              	.LVL223:
 231:src/matrix.c  **** 		report_err(ERR_RANGE);
 2070              		.loc 1 231 2 is_stmt 1 view .LVU605
 231:src/matrix.c  **** 		report_err(ERR_RANGE);
 2071              		.loc 1 231 5 is_stmt 0 view .LVU606
 2072 001e 411E     		subs	r1, r0, #1
 2073              	.LVL224:
 231:src/matrix.c  **** 		report_err(ERR_RANGE);
 2074              		.loc 1 231 5 view .LVU607
 2075 0020 0ED4     		bmi	.L151
ARM GAS  /tmp/cc0YfLmr.s 			page 56


 231:src/matrix.c  **** 		report_err(ERR_RANGE);
 2076              		.loc 1 231 17 discriminator 1 view .LVU608
 2077 0022 049B     		ldr	r3, [sp, #16]
 231:src/matrix.c  **** 		report_err(ERR_RANGE);
 2078              		.loc 1 231 12 discriminator 1 view .LVU609
 2079 0024 8B42     		cmp	r3, r1
 2080 0026 0BDD     		ble	.L151
 235:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols * (rows-1), cols, up);
 2081              		.loc 1 235 2 is_stmt 1 view .LVU610
 236:src/matrix.c  **** }
 2082              		.loc 1 236 52 is_stmt 0 view .LVU611
 2083 0028 039A     		ldr	r2, [sp, #12]
 236:src/matrix.c  **** }
 2084              		.loc 1 236 9 view .LVU612
 2085 002a 0598     		ldr	r0, [sp, #20]
 2086 002c 0090     		str	r0, [sp]
 235:src/matrix.c  **** 	return matrix_do_loop(r, base, base + cols * (rows-1), cols, up);
 2087              		.loc 1 235 7 view .LVU613
 2088 002e 2144     		add	r1, r1, r4
 2089              	.LVL225:
 236:src/matrix.c  **** }
 2090              		.loc 1 236 2 is_stmt 1 view .LVU614
 236:src/matrix.c  **** }
 2091              		.loc 1 236 52 is_stmt 0 view .LVU615
 2092 0030 013A     		subs	r2, r2, #1
 236:src/matrix.c  **** }
 2093              		.loc 1 236 9 view .LVU616
 2094 0032 3046     		mov	r0, r6
 2095 0034 03FB0212 		mla	r2, r3, r2, r1
 2096 0038 FFF7FEFF 		bl	matrix_do_loop
 2097              	.LVL226:
 237:src/matrix.c  **** 
 2098              		.loc 1 237 1 view .LVU617
 2099 003c 06B0     		add	sp, sp, #24
 2100              		.cfi_remember_state
 2101              		.cfi_def_cfa_offset 16
 2102              		@ sp needed
 2103 003e 70BD     		pop	{r4, r5, r6, pc}
 2104              	.LVL227:
 2105              	.L151:
 2106              		.cfi_restore_state
 232:src/matrix.c  **** 		return NULL;
 2107              		.loc 1 232 3 is_stmt 1 view .LVU618
 2108 0040 0820     		movs	r0, #8
 2109 0042 FFF7FEFF 		bl	report_err
 2110              	.LVL228:
 233:src/matrix.c  **** 	}
 2111              		.loc 1 233 3 view .LVU619
 233:src/matrix.c  **** 	}
 2112              		.loc 1 233 10 is_stmt 0 view .LVU620
 2113 0046 0020     		movs	r0, #0
 237:src/matrix.c  **** 
 2114              		.loc 1 237 1 view .LVU621
 2115 0048 06B0     		add	sp, sp, #24
 2116              		.cfi_remember_state
 2117              		.cfi_def_cfa_offset 16
 2118              		@ sp needed
ARM GAS  /tmp/cc0YfLmr.s 			page 57


 2119 004a 70BD     		pop	{r4, r5, r6, pc}
 2120              	.LVL229:
 2121              	.L153:
 2122              		.cfi_restore_state
 229:src/matrix.c  **** 	n = dn_to_int(y) - 1;
 2123              		.loc 1 229 10 view .LVU622
 2124 004c 0020     		movs	r0, #0
 2125              	.LVL230:
 237:src/matrix.c  **** 
 2126              		.loc 1 237 1 view .LVU623
 2127 004e 06B0     		add	sp, sp, #24
 2128              		.cfi_def_cfa_offset 16
 2129              		@ sp needed
 2130 0050 70BD     		pop	{r4, r5, r6, pc}
 237:src/matrix.c  **** 
 2131              		.loc 1 237 1 view .LVU624
 2132              		.cfi_endproc
 2133              	.LFE12:
 2135 0052 00BF     		.section	.text.matrix_rowq,"ax",%progbits
 2136              		.align	1
 2137              		.p2align 2,,3
 2138              		.global	matrix_rowq
 2139              		.syntax unified
 2140              		.thumb
 2141              		.thumb_func
 2142              		.fpu fpv4-sp-d16
 2144              	matrix_rowq:
 2145              	.LVL231:
 2146              	.LFB13:
 239:src/matrix.c  **** 	int rows;
 2147              		.loc 1 239 58 is_stmt 1 view -0
 2148              		.cfi_startproc
 2149              		@ args = 0, pretend = 0, frame = 8
 2150              		@ frame_needed = 0, uses_anonymous_args = 0
 240:src/matrix.c  **** 
 2151              		.loc 1 240 2 view .LVU626
 242:src/matrix.c  **** 		return NULL;
 2152              		.loc 1 242 2 view .LVU627
 239:src/matrix.c  **** 	int rows;
 2153              		.loc 1 239 58 is_stmt 0 view .LVU628
 2154 0000 10B5     		push	{r4, lr}
 2155              		.cfi_def_cfa_offset 8
 2156              		.cfi_offset 4, -8
 2157              		.cfi_offset 14, -4
 242:src/matrix.c  **** 		return NULL;
 2158              		.loc 1 242 6 view .LVU629
 2159 0002 0023     		movs	r3, #0
 239:src/matrix.c  **** 	int rows;
 2160              		.loc 1 239 58 view .LVU630
 2161 0004 82B0     		sub	sp, sp, #8
 2162              		.cfi_def_cfa_offset 16
 239:src/matrix.c  **** 	int rows;
 2163              		.loc 1 239 58 view .LVU631
 2164 0006 0446     		mov	r4, r0
 242:src/matrix.c  **** 		return NULL;
 2165              		.loc 1 242 6 view .LVU632
 2166 0008 1A46     		mov	r2, r3
ARM GAS  /tmp/cc0YfLmr.s 			page 58


 2167 000a 0846     		mov	r0, r1
 2168              	.LVL232:
 242:src/matrix.c  **** 		return NULL;
 2169              		.loc 1 242 6 view .LVU633
 2170 000c 01A9     		add	r1, sp, #4
 2171              	.LVL233:
 242:src/matrix.c  **** 		return NULL;
 2172              		.loc 1 242 6 view .LVU634
 2173 000e FFF7FEFF 		bl	matrix_decompose
 2174              	.LVL234:
 242:src/matrix.c  **** 		return NULL;
 2175              		.loc 1 242 5 view .LVU635
 2176 0012 0028     		cmp	r0, #0
 2177 0014 06DB     		blt	.L157
 244:src/matrix.c  **** 	return r;
 2178              		.loc 1 244 2 is_stmt 1 view .LVU636
 2179 0016 2046     		mov	r0, r4
 2180 0018 0199     		ldr	r1, [sp, #4]
 2181 001a FFF7FEFF 		bl	int_to_dn
 2182              	.LVL235:
 245:src/matrix.c  **** }
 2183              		.loc 1 245 2 view .LVU637
 245:src/matrix.c  **** }
 2184              		.loc 1 245 9 is_stmt 0 view .LVU638
 2185 001e 2046     		mov	r0, r4
 246:src/matrix.c  **** 
 2186              		.loc 1 246 1 view .LVU639
 2187 0020 02B0     		add	sp, sp, #8
 2188              		.cfi_remember_state
 2189              		.cfi_def_cfa_offset 8
 2190              		@ sp needed
 2191 0022 10BD     		pop	{r4, pc}
 2192              	.LVL236:
 2193              	.L157:
 2194              		.cfi_restore_state
 243:src/matrix.c  **** 	int_to_dn(r, rows);
 2195              		.loc 1 243 10 view .LVU640
 2196 0024 0020     		movs	r0, #0
 246:src/matrix.c  **** 
 2197              		.loc 1 246 1 view .LVU641
 2198 0026 02B0     		add	sp, sp, #8
 2199              		.cfi_def_cfa_offset 8
 2200              		@ sp needed
 2201 0028 10BD     		pop	{r4, pc}
 246:src/matrix.c  **** 
 2202              		.loc 1 246 1 view .LVU642
 2203              		.cfi_endproc
 2204              	.LFE13:
 2206 002a 00BF     		.section	.text.matrix_colq,"ax",%progbits
 2207              		.align	1
 2208              		.p2align 2,,3
 2209              		.global	matrix_colq
 2210              		.syntax unified
 2211              		.thumb
 2212              		.thumb_func
 2213              		.fpu fpv4-sp-d16
 2215              	matrix_colq:
ARM GAS  /tmp/cc0YfLmr.s 			page 59


 2216              	.LVL237:
 2217              	.LFB14:
 248:src/matrix.c  **** 	int cols;
 2218              		.loc 1 248 58 is_stmt 1 view -0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 8
 2221              		@ frame_needed = 0, uses_anonymous_args = 0
 249:src/matrix.c  **** 
 2222              		.loc 1 249 2 view .LVU644
 251:src/matrix.c  **** 		return NULL;
 2223              		.loc 1 251 2 view .LVU645
 248:src/matrix.c  **** 	int cols;
 2224              		.loc 1 248 58 is_stmt 0 view .LVU646
 2225 0000 10B5     		push	{r4, lr}
 2226              		.cfi_def_cfa_offset 8
 2227              		.cfi_offset 4, -8
 2228              		.cfi_offset 14, -4
 2229 0002 0A46     		mov	r2, r1
 2230 0004 82B0     		sub	sp, sp, #8
 2231              		.cfi_def_cfa_offset 16
 251:src/matrix.c  **** 		return NULL;
 2232              		.loc 1 251 6 view .LVU647
 2233 0006 0023     		movs	r3, #0
 248:src/matrix.c  **** 	int cols;
 2234              		.loc 1 248 58 view .LVU648
 2235 0008 0446     		mov	r4, r0
 251:src/matrix.c  **** 		return NULL;
 2236              		.loc 1 251 6 view .LVU649
 2237 000a 1946     		mov	r1, r3
 2238              	.LVL238:
 251:src/matrix.c  **** 		return NULL;
 2239              		.loc 1 251 6 view .LVU650
 2240 000c 1046     		mov	r0, r2
 2241              	.LVL239:
 251:src/matrix.c  **** 		return NULL;
 2242              		.loc 1 251 6 view .LVU651
 2243 000e 01AA     		add	r2, sp, #4
 2244              	.LVL240:
 251:src/matrix.c  **** 		return NULL;
 2245              		.loc 1 251 6 view .LVU652
 2246 0010 FFF7FEFF 		bl	matrix_decompose
 2247              	.LVL241:
 251:src/matrix.c  **** 		return NULL;
 2248              		.loc 1 251 5 view .LVU653
 2249 0014 0028     		cmp	r0, #0
 2250 0016 06DB     		blt	.L161
 253:src/matrix.c  **** 	return r;
 2251              		.loc 1 253 2 is_stmt 1 view .LVU654
 2252 0018 2046     		mov	r0, r4
 2253 001a 0199     		ldr	r1, [sp, #4]
 2254 001c FFF7FEFF 		bl	int_to_dn
 2255              	.LVL242:
 254:src/matrix.c  **** }
 2256              		.loc 1 254 2 view .LVU655
 254:src/matrix.c  **** }
 2257              		.loc 1 254 9 is_stmt 0 view .LVU656
 2258 0020 2046     		mov	r0, r4
ARM GAS  /tmp/cc0YfLmr.s 			page 60


 255:src/matrix.c  **** 
 2259              		.loc 1 255 1 view .LVU657
 2260 0022 02B0     		add	sp, sp, #8
 2261              		.cfi_remember_state
 2262              		.cfi_def_cfa_offset 8
 2263              		@ sp needed
 2264 0024 10BD     		pop	{r4, pc}
 2265              	.LVL243:
 2266              	.L161:
 2267              		.cfi_restore_state
 252:src/matrix.c  **** 	int_to_dn(r, cols);
 2268              		.loc 1 252 10 view .LVU658
 2269 0026 0020     		movs	r0, #0
 255:src/matrix.c  **** 
 2270              		.loc 1 255 1 view .LVU659
 2271 0028 02B0     		add	sp, sp, #8
 2272              		.cfi_def_cfa_offset 8
 2273              		@ sp needed
 2274 002a 10BD     		pop	{r4, pc}
 255:src/matrix.c  **** 
 2275              		.loc 1 255 1 view .LVU660
 2276              		.cfi_endproc
 2277              	.LFE14:
 2279              		.section	.text.matrix_getreg,"ax",%progbits
 2280              		.align	1
 2281              		.p2align 2,,3
 2282              		.global	matrix_getreg
 2283              		.syntax unified
 2284              		.thumb
 2285              		.thumb_func
 2286              		.fpu fpv4-sp-d16
 2288              	matrix_getreg:
 2289              	.LVL244:
 2290              	.LFB15:
 257:src/matrix.c  **** 	int h, w, ri, ci;
 2291              		.loc 1 257 104 is_stmt 1 view -0
 2292              		.cfi_startproc
 2293              		@ args = 0, pretend = 0, frame = 8
 2294              		@ frame_needed = 0, uses_anonymous_args = 0
 258:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 2295              		.loc 1 258 2 view .LVU662
 259:src/matrix.c  **** 
 2296              		.loc 1 259 2 view .LVU663
 257:src/matrix.c  **** 	int h, w, ri, ci;
 2297              		.loc 1 257 104 is_stmt 0 view .LVU664
 2298 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2299              		.cfi_def_cfa_offset 24
 2300              		.cfi_offset 4, -24
 2301              		.cfi_offset 5, -20
 2302              		.cfi_offset 6, -16
 2303              		.cfi_offset 7, -12
 2304              		.cfi_offset 8, -8
 2305              		.cfi_offset 14, -4
 2306 0004 82B0     		sub	sp, sp, #8
 2307              		.cfi_def_cfa_offset 32
 257:src/matrix.c  **** 	int h, w, ri, ci;
 2308              		.loc 1 257 104 view .LVU665
ARM GAS  /tmp/cc0YfLmr.s 			page 61


 2309 0006 0446     		mov	r4, r0
 2310 0008 0E46     		mov	r6, r1
 259:src/matrix.c  **** 
 2311              		.loc 1 259 10 view .LVU666
 2312 000a 1846     		mov	r0, r3
 2313              	.LVL245:
 257:src/matrix.c  **** 	int h, w, ri, ci;
 2314              		.loc 1 257 104 view .LVU667
 2315 000c 1746     		mov	r7, r2
 259:src/matrix.c  **** 
 2316              		.loc 1 259 10 view .LVU668
 2317 000e 0023     		movs	r3, #0
 2318              	.LVL246:
 259:src/matrix.c  **** 
 2319              		.loc 1 259 10 view .LVU669
 2320 0010 01AA     		add	r2, sp, #4
 2321              	.LVL247:
 259:src/matrix.c  **** 
 2322              		.loc 1 259 10 view .LVU670
 2323 0012 6946     		mov	r1, sp
 2324              	.LVL248:
 259:src/matrix.c  **** 
 2325              		.loc 1 259 10 view .LVU671
 2326 0014 FFF7FEFF 		bl	matrix_decompose
 2327              	.LVL249:
 261:src/matrix.c  **** 		return NULL;
 2328              		.loc 1 261 2 is_stmt 1 view .LVU672
 261:src/matrix.c  **** 		return NULL;
 2329              		.loc 1 261 5 is_stmt 0 view .LVU673
 2330 0018 B0F10008 		subs	r8, r0, #0
 2331 001c 24DB     		blt	.L167
 263:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2332              		.loc 1 263 2 is_stmt 1 view .LVU674
 263:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2333              		.loc 1 263 7 is_stmt 0 view .LVU675
 2334 001e 3846     		mov	r0, r7
 2335              	.LVL250:
 263:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2336              		.loc 1 263 7 view .LVU676
 2337 0020 FFF7FEFF 		bl	dn_to_int
 2338              	.LVL251:
 2339 0024 0546     		mov	r5, r0
 264:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 2340              		.loc 1 264 7 view .LVU677
 2341 0026 3046     		mov	r0, r6
 2342 0028 FFF7FEFF 		bl	dn_to_int
 2343              	.LVL252:
 263:src/matrix.c  **** 	ci = dn_to_int(cdn) - 1;
 2344              		.loc 1 263 5 view .LVU678
 2345 002c 013D     		subs	r5, r5, #1
 2346              	.LVL253:
 264:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
 2347              		.loc 1 264 2 is_stmt 1 view .LVU679
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2348              		.loc 1 265 5 is_stmt 0 view .LVU680
 2349 002e 002D     		cmp	r5, #0
 264:src/matrix.c  **** 	if (ri < 0 || ci < 0 || ri >= h || ci >= w) {
ARM GAS  /tmp/cc0YfLmr.s 			page 62


 2350              		.loc 1 264 5 view .LVU681
 2351 0030 00F1FF30 		add	r0, r0, #-1
 2352              	.LVL254:
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2353              		.loc 1 265 2 is_stmt 1 view .LVU682
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2354              		.loc 1 265 5 is_stmt 0 view .LVU683
 2355 0034 11DB     		blt	.L165
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2356              		.loc 1 265 13 discriminator 1 view .LVU684
 2357 0036 0028     		cmp	r0, #0
 2358 0038 0FDB     		blt	.L165
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2359              		.loc 1 265 23 discriminator 2 view .LVU685
 2360 003a 009B     		ldr	r3, [sp]
 2361 003c AB42     		cmp	r3, r5
 2362 003e 0CDD     		ble	.L165
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2363              		.loc 1 265 40 discriminator 3 view .LVU686
 2364 0040 0199     		ldr	r1, [sp, #4]
 265:src/matrix.c  **** 		report_err(ERR_RANGE);
 2365              		.loc 1 265 34 discriminator 3 view .LVU687
 2366 0042 8142     		cmp	r1, r0
 2367 0044 09DD     		ble	.L165
 269:src/matrix.c  **** 	int_to_dn(r, n);
 2368              		.loc 1 269 2 is_stmt 1 view .LVU688
 2369              	.LVL255:
 2370              	.LBB139:
 2371              	.LBI139:
  26:src/matrix.c  **** 	return col + row * ncols;
 2372              		.loc 1 26 12 view .LVU689
 2373              	.LBB140:
  27:src/matrix.c  **** }
 2374              		.loc 1 27 2 view .LVU690
  27:src/matrix.c  **** }
 2375              		.loc 1 27 2 is_stmt 0 view .LVU691
 2376              	.LBE140:
 2377              	.LBE139:
 270:src/matrix.c  **** 	return r;
 2378              		.loc 1 270 2 is_stmt 1 view .LVU692
 2379              	.LBB142:
 2380              	.LBB141:
  27:src/matrix.c  **** }
 2381              		.loc 1 27 13 is_stmt 0 view .LVU693
 2382 0046 05FB0101 		mla	r1, r5, r1, r0
 2383              	.LVL256:
  27:src/matrix.c  **** }
 2384              		.loc 1 27 13 view .LVU694
 2385              	.LBE141:
 2386              	.LBE142:
 270:src/matrix.c  **** 	return r;
 2387              		.loc 1 270 2 view .LVU695
 2388 004a 4144     		add	r1, r1, r8
 2389 004c 2046     		mov	r0, r4
 2390              	.LVL257:
 270:src/matrix.c  **** 	return r;
 2391              		.loc 1 270 2 view .LVU696
ARM GAS  /tmp/cc0YfLmr.s 			page 63


 2392 004e FFF7FEFF 		bl	int_to_dn
 2393              	.LVL258:
 271:src/matrix.c  **** }
 2394              		.loc 1 271 2 is_stmt 1 view .LVU697
 271:src/matrix.c  **** }
 2395              		.loc 1 271 9 is_stmt 0 view .LVU698
 2396 0052 2046     		mov	r0, r4
 272:src/matrix.c  **** 
 2397              		.loc 1 272 1 view .LVU699
 2398 0054 02B0     		add	sp, sp, #8
 2399              		.cfi_remember_state
 2400              		.cfi_def_cfa_offset 24
 2401              		@ sp needed
 2402 0056 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2403              	.LVL259:
 2404              	.L165:
 2405              		.cfi_restore_state
 266:src/matrix.c  **** 		return NULL;
 2406              		.loc 1 266 3 is_stmt 1 view .LVU700
 2407 005a 0820     		movs	r0, #8
 2408              	.LVL260:
 266:src/matrix.c  **** 		return NULL;
 2409              		.loc 1 266 3 is_stmt 0 view .LVU701
 2410 005c FFF7FEFF 		bl	report_err
 2411              	.LVL261:
 267:src/matrix.c  **** 	}
 2412              		.loc 1 267 3 is_stmt 1 view .LVU702
 267:src/matrix.c  **** 	}
 2413              		.loc 1 267 10 is_stmt 0 view .LVU703
 2414 0060 0020     		movs	r0, #0
 272:src/matrix.c  **** 
 2415              		.loc 1 272 1 view .LVU704
 2416 0062 02B0     		add	sp, sp, #8
 2417              		.cfi_remember_state
 2418              		.cfi_def_cfa_offset 24
 2419              		@ sp needed
 2420 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2421              	.LVL262:
 2422              	.L167:
 2423              		.cfi_restore_state
 262:src/matrix.c  **** 	ri = dn_to_int(rdn) - 1;
 2424              		.loc 1 262 10 view .LVU705
 2425 0068 0020     		movs	r0, #0
 2426              	.LVL263:
 272:src/matrix.c  **** 
 2427              		.loc 1 272 1 view .LVU706
 2428 006a 02B0     		add	sp, sp, #8
 2429              		.cfi_def_cfa_offset 24
 2430              		@ sp needed
 2431 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 272:src/matrix.c  **** 
 2432              		.loc 1 272 1 view .LVU707
 2433              		.cfi_endproc
 2434              	.LFE15:
 2436              		.section	.text.matrix_getrc,"ax",%progbits
 2437              		.align	1
 2438              		.p2align 2,,3
ARM GAS  /tmp/cc0YfLmr.s 			page 64


 2439              		.global	matrix_getrc
 2440              		.syntax unified
 2441              		.thumb
 2442              		.thumb_func
 2443              		.fpu fpv4-sp-d16
 2445              	matrix_getrc:
 2446              	.LVL264:
 2447              	.LFB16:
 274:src/matrix.c  **** 	decNumber ydn;
 2448              		.loc 1 274 61 is_stmt 1 view -0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 48
 2451              		@ frame_needed = 0, uses_anonymous_args = 0
 275:src/matrix.c  **** 	int rows, cols, c, r, pos;
 2452              		.loc 1 275 2 view .LVU709
 276:src/matrix.c  **** 	int n = matrix_decompose(m, &rows, &cols, NULL);
 2453              		.loc 1 276 2 view .LVU710
 277:src/matrix.c  **** 
 2454              		.loc 1 277 2 view .LVU711
 274:src/matrix.c  **** 	decNumber ydn;
 2455              		.loc 1 274 61 is_stmt 0 view .LVU712
 2456 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2457              		.cfi_def_cfa_offset 20
 2458              		.cfi_offset 4, -20
 2459              		.cfi_offset 5, -16
 2460              		.cfi_offset 6, -12
 2461              		.cfi_offset 7, -8
 2462              		.cfi_offset 14, -4
 2463 0002 8DB0     		sub	sp, sp, #52
 2464              		.cfi_def_cfa_offset 72
 274:src/matrix.c  **** 	decNumber ydn;
 2465              		.loc 1 274 61 view .LVU713
 2466 0004 0446     		mov	r4, r0
 277:src/matrix.c  **** 
 2467              		.loc 1 277 10 view .LVU714
 2468 0006 0023     		movs	r3, #0
 2469 0008 0846     		mov	r0, r1
 2470              	.LVL265:
 277:src/matrix.c  **** 
 2471              		.loc 1 277 10 view .LVU715
 2472 000a 02AA     		add	r2, sp, #8
 2473 000c 01A9     		add	r1, sp, #4
 2474              	.LVL266:
 277:src/matrix.c  **** 
 2475              		.loc 1 277 10 view .LVU716
 2476 000e FFF7FEFF 		bl	matrix_decompose
 2477              	.LVL267:
 279:src/matrix.c  **** 		return NULL;
 2478              		.loc 1 279 2 is_stmt 1 view .LVU717
 279:src/matrix.c  **** 		return NULL;
 2479              		.loc 1 279 5 is_stmt 0 view .LVU718
 2480 0012 051E     		subs	r5, r0, #0
 2481 0014 25DB     		blt	.L173
 281:src/matrix.c  **** 	pos = dn_to_int(&ydn);
 2482              		.loc 1 281 2 is_stmt 1 view .LVU719
 2483 0016 03A8     		add	r0, sp, #12
 2484              	.LVL268:
ARM GAS  /tmp/cc0YfLmr.s 			page 65


 281:src/matrix.c  **** 	pos = dn_to_int(&ydn);
 2485              		.loc 1 281 2 is_stmt 0 view .LVU720
 2486 0018 FFF7FEFF 		bl	getY
 2487              	.LVL269:
 282:src/matrix.c  **** 	pos -= n;
 2488              		.loc 1 282 2 is_stmt 1 view .LVU721
 282:src/matrix.c  **** 	pos -= n;
 2489              		.loc 1 282 8 is_stmt 0 view .LVU722
 2490 001c 03A8     		add	r0, sp, #12
 2491 001e FFF7FEFF 		bl	dn_to_int
 2492              	.LVL270:
 283:src/matrix.c  **** 	if (pos < 0 || pos >= rows*cols) {
 2493              		.loc 1 283 2 is_stmt 1 view .LVU723
 284:src/matrix.c  **** 		report_err(ERR_RANGE);
 2494              		.loc 1 284 2 view .LVU724
 284:src/matrix.c  **** 		report_err(ERR_RANGE);
 2495              		.loc 1 284 5 is_stmt 0 view .LVU725
 2496 0022 451B     		subs	r5, r0, r5
 2497              	.LVL271:
 284:src/matrix.c  **** 		report_err(ERR_RANGE);
 2498              		.loc 1 284 5 view .LVU726
 2499 0024 17D4     		bmi	.L171
 284:src/matrix.c  **** 		report_err(ERR_RANGE);
 2500              		.loc 1 284 28 discriminator 1 view .LVU727
 2501 0026 DDE90137 		ldrd	r3, r7, [sp, #4]
 2502 002a 03FB07F3 		mul	r3, r3, r7
 284:src/matrix.c  **** 		report_err(ERR_RANGE);
 2503              		.loc 1 284 14 discriminator 1 view .LVU728
 2504 002e AB42     		cmp	r3, r5
 2505 0030 11DD     		ble	.L171
 288:src/matrix.c  **** 	r = pos / cols + 1;
 2506              		.loc 1 288 2 is_stmt 1 view .LVU729
 2507              	.LVL272:
 289:src/matrix.c  **** 	int_to_dn(res, r);
 2508              		.loc 1 289 2 view .LVU730
 290:src/matrix.c  **** 	int_to_dn(&ydn, c);
 2509              		.loc 1 290 2 view .LVU731
 289:src/matrix.c  **** 	int_to_dn(res, r);
 2510              		.loc 1 289 10 is_stmt 0 view .LVU732
 2511 0032 95FBF7F6 		sdiv	r6, r5, r7
 290:src/matrix.c  **** 	int_to_dn(&ydn, c);
 2512              		.loc 1 290 2 view .LVU733
 2513 0036 2046     		mov	r0, r4
 2514 0038 711C     		adds	r1, r6, #1
 2515              	.LVL273:
 288:src/matrix.c  **** 	r = pos / cols + 1;
 2516              		.loc 1 288 10 view .LVU734
 2517 003a 07FB1655 		mls	r5, r7, r6, r5
 2518              	.LVL274:
 290:src/matrix.c  **** 	int_to_dn(&ydn, c);
 2519              		.loc 1 290 2 view .LVU735
 2520 003e FFF7FEFF 		bl	int_to_dn
 2521              	.LVL275:
 291:src/matrix.c  **** 	setY(&ydn);
 2522              		.loc 1 291 2 is_stmt 1 view .LVU736
 2523 0042 691C     		adds	r1, r5, #1
 2524 0044 03A8     		add	r0, sp, #12
ARM GAS  /tmp/cc0YfLmr.s 			page 66


 2525 0046 FFF7FEFF 		bl	int_to_dn
 2526              	.LVL276:
 292:src/matrix.c  **** 	return res;
 2527              		.loc 1 292 2 view .LVU737
 2528 004a 03A8     		add	r0, sp, #12
 2529 004c FFF7FEFF 		bl	setY
 2530              	.LVL277:
 293:src/matrix.c  **** }
 2531              		.loc 1 293 2 view .LVU738
 293:src/matrix.c  **** }
 2532              		.loc 1 293 9 is_stmt 0 view .LVU739
 2533 0050 2046     		mov	r0, r4
 294:src/matrix.c  **** 
 2534              		.loc 1 294 1 view .LVU740
 2535 0052 0DB0     		add	sp, sp, #52
 2536              		.cfi_remember_state
 2537              		.cfi_def_cfa_offset 20
 2538              		@ sp needed
 2539 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 2540              	.LVL278:
 2541              	.L171:
 2542              		.cfi_restore_state
 285:src/matrix.c  **** 		return NULL;
 2543              		.loc 1 285 3 is_stmt 1 view .LVU741
 2544 0056 0820     		movs	r0, #8
 2545 0058 FFF7FEFF 		bl	report_err
 2546              	.LVL279:
 286:src/matrix.c  **** 	}
 2547              		.loc 1 286 3 view .LVU742
 286:src/matrix.c  **** 	}
 2548              		.loc 1 286 10 is_stmt 0 view .LVU743
 2549 005c 0020     		movs	r0, #0
 294:src/matrix.c  **** 
 2550              		.loc 1 294 1 view .LVU744
 2551 005e 0DB0     		add	sp, sp, #52
 2552              		.cfi_remember_state
 2553              		.cfi_def_cfa_offset 20
 2554              		@ sp needed
 2555 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 2556              	.LVL280:
 2557              	.L173:
 2558              		.cfi_restore_state
 280:src/matrix.c  **** 	getY(&ydn);
 2559              		.loc 1 280 10 view .LVU745
 2560 0062 0020     		movs	r0, #0
 2561              	.LVL281:
 294:src/matrix.c  **** 
 2562              		.loc 1 294 1 view .LVU746
 2563 0064 0DB0     		add	sp, sp, #52
 2564              		.cfi_def_cfa_offset 20
 2565              		@ sp needed
 2566 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 294:src/matrix.c  **** 
 2567              		.loc 1 294 1 view .LVU747
 2568              		.cfi_endproc
 2569              	.LFE16:
 2571              		.section	.text.matrix_genadd,"ax",%progbits
ARM GAS  /tmp/cc0YfLmr.s 			page 67


 2572              		.align	1
 2573              		.p2align 2,,3
 2574              		.global	matrix_genadd
 2575              		.syntax unified
 2576              		.thumb
 2577              		.thumb_func
 2578              		.fpu fpv4-sp-d16
 2580              	matrix_genadd:
 2581              	.LVL282:
 2582              	.LFB17:
 297:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2583              		.loc 1 297 100 is_stmt 1 view -0
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 128
 2586              		@ frame_needed = 0, uses_anonymous_args = 0
 298:src/matrix.c  **** 	decNumber s, t, u;
 2587              		.loc 1 298 2 view .LVU749
 299:src/matrix.c  **** 	int i;
 2588              		.loc 1 299 2 view .LVU750
 300:src/matrix.c  **** 
 2589              		.loc 1 300 2 view .LVU751
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2590              		.loc 1 302 2 view .LVU752
 297:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2591              		.loc 1 297 100 is_stmt 0 view .LVU753
 2592 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2593              		.cfi_def_cfa_offset 28
 2594              		.cfi_offset 4, -28
 2595              		.cfi_offset 5, -24
 2596              		.cfi_offset 6, -20
 2597              		.cfi_offset 7, -16
 2598              		.cfi_offset 8, -12
 2599              		.cfi_offset 9, -8
 2600              		.cfi_offset 14, -4
 2601 0004 A1B0     		sub	sp, sp, #132
 2602              		.cfi_def_cfa_offset 160
 297:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2603              		.loc 1 297 100 view .LVU754
 2604 0006 1546     		mov	r5, r2
 2605 0008 8046     		mov	r8, r0
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2606              		.loc 1 302 21 view .LVU755
 2607 000a 02AA     		add	r2, sp, #8
 2608              	.LVL283:
 297:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2609              		.loc 1 297 100 view .LVU756
 2610 000c 0E46     		mov	r6, r1
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2611              		.loc 1 302 21 view .LVU757
 2612 000e 1846     		mov	r0, r3
 2613              	.LVL284:
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2614              		.loc 1 302 21 view .LVU758
 2615 0010 01A9     		add	r1, sp, #4
 2616              	.LVL285:
 297:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2617              		.loc 1 297 100 view .LVU759
ARM GAS  /tmp/cc0YfLmr.s 			page 68


 2618 0012 1F46     		mov	r7, r3
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2619              		.loc 1 302 21 view .LVU760
 2620 0014 FFF7FEFF 		bl	matrix_decomp
 2621              	.LVL286:
 303:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2622              		.loc 1 303 21 view .LVU761
 2623 0018 04AA     		add	r2, sp, #16
 302:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2624              		.loc 1 302 21 view .LVU762
 2625 001a 0446     		mov	r4, r0
 303:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2626              		.loc 1 303 21 view .LVU763
 2627 001c 03A9     		add	r1, sp, #12
 2628              	.LVL287:
 303:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2629              		.loc 1 303 2 is_stmt 1 view .LVU764
 303:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2630              		.loc 1 303 21 is_stmt 0 view .LVU765
 2631 001e 2846     		mov	r0, r5
 2632              	.LVL288:
 303:src/matrix.c  **** 	if (abase == NULL || bbase == NULL)
 2633              		.loc 1 303 21 view .LVU766
 2634 0020 FFF7FEFF 		bl	matrix_decomp
 2635              	.LVL289:
 304:src/matrix.c  **** 		return NULL;
 2636              		.loc 1 304 2 is_stmt 1 view .LVU767
 304:src/matrix.c  **** 		return NULL;
 2637              		.loc 1 304 5 is_stmt 0 view .LVU768
 2638 0024 002C     		cmp	r4, #0
 2639 0026 38D0     		beq	.L175
 2640 0028 0546     		mov	r5, r0
 2641              	.LVL290:
 304:src/matrix.c  **** 		return NULL;
 2642              		.loc 1 304 20 discriminator 1 view .LVU769
 2643 002a 0028     		cmp	r0, #0
 2644 002c 41D0     		beq	.L181
 306:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2645              		.loc 1 306 2 is_stmt 1 view .LVU770
 306:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2646              		.loc 1 306 12 is_stmt 0 view .LVU771
 2647 002e 019A     		ldr	r2, [sp, #4]
 306:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2648              		.loc 1 306 5 view .LVU772
 2649 0030 039B     		ldr	r3, [sp, #12]
 2650 0032 9A42     		cmp	r2, r3
 2651 0034 35D1     		bne	.L177
 306:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2652              		.loc 1 306 30 discriminator 1 view .LVU773
 2653 0036 029B     		ldr	r3, [sp, #8]
 306:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2654              		.loc 1 306 21 discriminator 1 view .LVU774
 2655 0038 0499     		ldr	r1, [sp, #16]
 2656 003a 8B42     		cmp	r3, r1
 2657 003c 31D1     		bne	.L177
 2658              	.LVL291:
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
ARM GAS  /tmp/cc0YfLmr.s 			page 69


 2659              		.loc 1 310 12 is_stmt 1 view .LVU775
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2660              		.loc 1 310 19 is_stmt 0 view .LVU776
 2661 003e 03FB02F3 		mul	r3, r3, r2
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2662              		.loc 1 310 2 view .LVU777
 2663 0042 002B     		cmp	r3, #0
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2664              		.loc 1 310 8 view .LVU778
 2665 0044 C8BF     		it	gt
 2666 0046 4FF00009 		movgt	r9, #0
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2667              		.loc 1 310 2 view .LVU779
 2668 004a 21DD     		ble	.L179
 2669              	.LVL292:
 2670              	.L180:
 311:src/matrix.c  **** 		dn_multiply(&t, &s, k);
 2671              		.loc 1 311 3 is_stmt 1 discriminator 3 view .LVU780
 2672 004c 05A9     		add	r1, sp, #20
 2673 004e 2846     		mov	r0, r5
 2674 0050 FFF7FEFF 		bl	decimal64ToNumber
 2675              	.LVL293:
 312:src/matrix.c  **** 		decimal64ToNumber(abase + i, &s);
 2676              		.loc 1 312 3 discriminator 3 view .LVU781
 2677 0054 3246     		mov	r2, r6
 2678 0056 05A9     		add	r1, sp, #20
 2679 0058 0EA8     		add	r0, sp, #56
 2680 005a FFF7FEFF 		bl	dn_multiply
 2681              	.LVL294:
 313:src/matrix.c  **** 		dn_add(&u, &t, &s);
 2682              		.loc 1 313 3 discriminator 3 view .LVU782
 2683 005e 05A9     		add	r1, sp, #20
 2684 0060 2046     		mov	r0, r4
 2685 0062 FFF7FEFF 		bl	decimal64ToNumber
 2686              	.LVL295:
 314:src/matrix.c  **** 		packed_from_number(abase + i, &u);
 2687              		.loc 1 314 3 discriminator 3 view .LVU783
 2688 0066 05AA     		add	r2, sp, #20
 2689 0068 0EA9     		add	r1, sp, #56
 2690 006a 17A8     		add	r0, sp, #92
 2691 006c FFF7FEFF 		bl	dn_add
 2692              	.LVL296:
 315:src/matrix.c  **** 	}
 2693              		.loc 1 315 3 discriminator 3 view .LVU784
 2694 0070 2046     		mov	r0, r4
 2695 0072 17A9     		add	r1, sp, #92
 2696 0074 FFF7FEFF 		bl	packed_from_number
 2697              	.LVL297:
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2698              		.loc 1 310 27 discriminator 3 view .LVU785
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2699              		.loc 1 310 19 is_stmt 0 discriminator 3 view .LVU786
 2700 0078 DDE90132 		ldrd	r3, r2, [sp, #4]
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2701              		.loc 1 310 28 discriminator 3 view .LVU787
 2702 007c 09F10109 		add	r9, r9, #1
 2703              	.LVL298:
ARM GAS  /tmp/cc0YfLmr.s 			page 70


 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2704              		.loc 1 310 12 is_stmt 1 discriminator 3 view .LVU788
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2705              		.loc 1 310 19 is_stmt 0 discriminator 3 view .LVU789
 2706 0080 02FB03F2 		mul	r2, r2, r3
 310:src/matrix.c  **** 		decimal64ToNumber(bbase + i, &s);
 2707              		.loc 1 310 2 discriminator 3 view .LVU790
 2708 0084 4A45     		cmp	r2, r9
 2709 0086 05F10805 		add	r5, r5, #8
 2710 008a 04F10804 		add	r4, r4, #8
 2711 008e DDDC     		bgt	.L180
 2712              	.LVL299:
 2713              	.L179:
 317:src/matrix.c  **** }
 2714              		.loc 1 317 2 is_stmt 1 view .LVU791
 317:src/matrix.c  **** }
 2715              		.loc 1 317 9 is_stmt 0 view .LVU792
 2716 0090 3946     		mov	r1, r7
 2717 0092 4046     		mov	r0, r8
 2718 0094 FFF7FEFF 		bl	decNumberCopy
 2719              	.LVL300:
 2720 0098 0446     		mov	r4, r0
 2721              	.L175:
 318:src/matrix.c  **** 
 2722              		.loc 1 318 1 view .LVU793
 2723 009a 2046     		mov	r0, r4
 2724 009c 21B0     		add	sp, sp, #132
 2725              		.cfi_remember_state
 2726              		.cfi_def_cfa_offset 28
 2727              		@ sp needed
 2728 009e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2729              	.LVL301:
 2730              	.L177:
 2731              		.cfi_restore_state
 307:src/matrix.c  **** 		return NULL;
 2732              		.loc 1 307 3 is_stmt 1 view .LVU794
 2733 00a2 1520     		movs	r0, #21
 2734              	.LVL302:
 307:src/matrix.c  **** 		return NULL;
 2735              		.loc 1 307 3 is_stmt 0 view .LVU795
 2736 00a4 FFF7FEFF 		bl	report_err
 2737              	.LVL303:
 308:src/matrix.c  **** 	}
 2738              		.loc 1 308 3 is_stmt 1 view .LVU796
 308:src/matrix.c  **** 	}
 2739              		.loc 1 308 10 is_stmt 0 view .LVU797
 2740 00a8 0024     		movs	r4, #0
 2741              	.LVL304:
 318:src/matrix.c  **** 
 2742              		.loc 1 318 1 view .LVU798
 2743 00aa 2046     		mov	r0, r4
 2744 00ac 21B0     		add	sp, sp, #132
 2745              		.cfi_remember_state
 2746              		.cfi_def_cfa_offset 28
 2747              		@ sp needed
 2748 00ae BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2749              	.LVL305:
ARM GAS  /tmp/cc0YfLmr.s 			page 71


 2750              	.L181:
 2751              		.cfi_restore_state
 305:src/matrix.c  **** 	if (arows != brows || acols != bcols) {
 2752              		.loc 1 305 10 view .LVU799
 2753 00b2 0446     		mov	r4, r0
 2754              	.LVL306:
 305:src/matrix.c  **** 	if (arows != brows || acols != bcols) {
 2755              		.loc 1 305 10 view .LVU800
 2756 00b4 F1E7     		b	.L175
 2757              		.cfi_endproc
 2758              	.LFE17:
 2760 00b6 00BF     		.section	.text.matrix_multiply,"ax",%progbits
 2761              		.align	1
 2762              		.p2align 2,,3
 2763              		.global	matrix_multiply
 2764              		.syntax unified
 2765              		.thumb
 2766              		.thumb_func
 2767              		.fpu fpv4-sp-d16
 2769              	matrix_multiply:
 2770              	.LVL307:
 2771              	.LFB18:
 322:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2772              		.loc 1 322 102 is_stmt 1 view -0
 2773              		.cfi_startproc
 2774              		@ args = 0, pretend = 0, frame = 968
 2775              		@ frame_needed = 0, uses_anonymous_args = 0
 323:src/matrix.c  **** 	decNumber sum, s, t, u;
 2776              		.loc 1 323 2 view .LVU802
 324:src/matrix.c  **** 	int creg;
 2777              		.loc 1 324 2 view .LVU803
 325:src/matrix.c  **** 	int i, j, k;
 2778              		.loc 1 325 2 view .LVU804
 326:src/matrix.c  **** 	decimal64 result[MAX_DIMENSION];
 2779              		.loc 1 326 2 view .LVU805
 327:src/matrix.c  **** 	decimal64 *rp = result;
 2780              		.loc 1 327 2 view .LVU806
 328:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2781              		.loc 1 328 2 view .LVU807
 322:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2782              		.loc 1 322 102 is_stmt 0 view .LVU808
 2783 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2784              		.cfi_def_cfa_offset 36
 2785              		.cfi_offset 4, -36
 2786              		.cfi_offset 5, -32
 2787              		.cfi_offset 6, -28
 2788              		.cfi_offset 7, -24
 2789              		.cfi_offset 8, -20
 2790              		.cfi_offset 9, -16
 2791              		.cfi_offset 10, -12
 2792              		.cfi_offset 11, -8
 2793              		.cfi_offset 14, -4
 2794 0004 ADF5737D 		sub	sp, sp, #972
 2795              		.cfi_def_cfa_offset 1008
 2796              	.LVL308:
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2797              		.loc 1 329 2 is_stmt 1 view .LVU809
ARM GAS  /tmp/cc0YfLmr.s 			page 72


 322:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2798              		.loc 1 322 102 is_stmt 0 view .LVU810
 2799 0008 1446     		mov	r4, r2
 2800 000a 8146     		mov	r9, r0
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2801              		.loc 1 329 21 view .LVU811
 2802 000c 03AA     		add	r2, sp, #12
 2803              	.LVL309:
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2804              		.loc 1 329 21 view .LVU812
 2805 000e 0846     		mov	r0, r1
 2806              	.LVL310:
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2807              		.loc 1 329 21 view .LVU813
 2808 0010 02A9     		add	r1, sp, #8
 2809              	.LVL311:
 322:src/matrix.c  **** 	int arows, acols, brows, bcols;
 2810              		.loc 1 322 102 view .LVU814
 2811 0012 1D46     		mov	r5, r3
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2812              		.loc 1 329 21 view .LVU815
 2813 0014 FFF7FEFF 		bl	matrix_decomp
 2814              	.LVL312:
 330:src/matrix.c  **** 
 2815              		.loc 1 330 21 view .LVU816
 2816 0018 05AA     		add	r2, sp, #20
 329:src/matrix.c  **** 	decimal64 *bbase = matrix_decomp(b, &brows, &bcols);
 2817              		.loc 1 329 21 view .LVU817
 2818 001a 0646     		mov	r6, r0
 330:src/matrix.c  **** 
 2819              		.loc 1 330 21 view .LVU818
 2820 001c 04A9     		add	r1, sp, #16
 2821              	.LVL313:
 330:src/matrix.c  **** 
 2822              		.loc 1 330 2 is_stmt 1 view .LVU819
 330:src/matrix.c  **** 
 2823              		.loc 1 330 21 is_stmt 0 view .LVU820
 2824 001e 2046     		mov	r0, r4
 2825              	.LVL314:
 330:src/matrix.c  **** 
 2826              		.loc 1 330 21 view .LVU821
 2827 0020 FFF7FEFF 		bl	matrix_decomp
 2828              	.LVL315:
 332:src/matrix.c  **** 		return NULL;
 2829              		.loc 1 332 2 is_stmt 1 view .LVU822
 332:src/matrix.c  **** 		return NULL;
 2830              		.loc 1 332 5 is_stmt 0 view .LVU823
 2831 0024 002E     		cmp	r6, #0
 2832 0026 67D0     		beq	.L209
 2833 0028 0746     		mov	r7, r0
 332:src/matrix.c  **** 		return NULL;
 2834              		.loc 1 332 20 discriminator 1 view .LVU824
 2835 002a 0028     		cmp	r0, #0
 2836 002c 64D0     		beq	.L209
 334:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 2837              		.loc 1 334 2 is_stmt 1 view .LVU825
 334:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
ARM GAS  /tmp/cc0YfLmr.s 			page 73


 2838              		.loc 1 334 5 is_stmt 0 view .LVU826
 2839 002e DDE90323 		ldrd	r2, r3, [sp, #12]
 2840 0032 9A42     		cmp	r2, r3
 2841 0034 5DD1     		bne	.L210
 338:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2842              		.loc 1 338 2 is_stmt 1 view .LVU827
 338:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2843              		.loc 1 338 9 is_stmt 0 view .LVU828
 2844 0036 2846     		mov	r0, r5
 2845              	.LVL316:
 338:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2846              		.loc 1 338 9 view .LVU829
 2847 0038 FFF7FEFF 		bl	dn_to_int
 2848              	.LVL317:
 339:src/matrix.c  **** 		return NULL;
 2849              		.loc 1 339 6 view .LVU830
 2850 003c 059B     		ldr	r3, [sp, #20]
 2851 003e 029A     		ldr	r2, [sp, #8]
 338:src/matrix.c  **** 	if (matrix_descriptor(r, creg, arows, bcols) == 0)
 2852              		.loc 1 338 9 view .LVU831
 2853 0040 8246     		mov	r10, r0
 2854              	.LVL318:
 339:src/matrix.c  **** 		return NULL;
 2855              		.loc 1 339 2 is_stmt 1 view .LVU832
 339:src/matrix.c  **** 		return NULL;
 2856              		.loc 1 339 6 is_stmt 0 view .LVU833
 2857 0042 0146     		mov	r1, r0
 2858 0044 4846     		mov	r0, r9
 2859              	.LVL319:
 339:src/matrix.c  **** 		return NULL;
 2860              		.loc 1 339 6 view .LVU834
 2861 0046 FFF7FEFF 		bl	matrix_descriptor
 2862              	.LVL320:
 339:src/matrix.c  **** 		return NULL;
 2863              		.loc 1 339 5 view .LVU835
 2864 004a 0028     		cmp	r0, #0
 2865 004c 54D0     		beq	.L209
 342:src/matrix.c  **** 	for (i=0; i<arows; i++)
 2866              		.loc 1 342 9 is_stmt 1 view .LVU836
 2867 004e FFF7FEFF 		bl	busy
 2868              	.LVL321:
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2869              		.loc 1 343 2 view .LVU837
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2870              		.loc 1 343 12 view .LVU838
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2871              		.loc 1 343 2 is_stmt 0 view .LVU839
 2872 0052 029B     		ldr	r3, [sp, #8]
 2873 0054 002B     		cmp	r3, #0
 328:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2874              		.loc 1 328 13 view .LVU840
 2875 0056 2AAB     		add	r3, sp, #168
 2876              	.LVL322:
 328:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2877              		.loc 1 328 13 view .LVU841
 2878 0058 0193     		str	r3, [sp, #4]
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
ARM GAS  /tmp/cc0YfLmr.s 			page 74


 2879              		.loc 1 343 2 view .LVU842
 2880 005a 3ADD     		ble	.L193
 328:src/matrix.c  **** 	decimal64 *abase = matrix_decomp(a, &arows, &acols);
 2881              		.loc 1 328 13 view .LVU843
 2882 005c 9846     		mov	r8, r3
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 2883              		.loc 1 343 8 view .LVU844
 2884 005e 0025     		movs	r5, #0
 2885              	.LVL323:
 2886              	.L192:
 344:src/matrix.c  **** 			decNumberZero(&sum);
 2887              		.loc 1 344 13 is_stmt 1 view .LVU845
 344:src/matrix.c  **** 			decNumberZero(&sum);
 2888              		.loc 1 344 3 is_stmt 0 view .LVU846
 2889 0060 059B     		ldr	r3, [sp, #20]
 2890 0062 002B     		cmp	r3, #0
 344:src/matrix.c  **** 			decNumberZero(&sum);
 2891              		.loc 1 344 9 view .LVU847
 2892 0064 C8BF     		it	gt
 2893 0066 0024     		movgt	r4, #0
 344:src/matrix.c  **** 			decNumberZero(&sum);
 2894              		.loc 1 344 3 view .LVU848
 2895 0068 2FDD     		ble	.L197
 2896              	.LVL324:
 2897              	.L196:
 345:src/matrix.c  **** 			for (k=0; k<acols; k++) {
 2898              		.loc 1 345 4 is_stmt 1 view .LVU849
 2899 006a 06A8     		add	r0, sp, #24
 2900 006c FFF7FEFF 		bl	decNumberZero
 2901              	.LVL325:
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2902              		.loc 1 346 4 view .LVU850
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2903              		.loc 1 346 14 view .LVU851
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2904              		.loc 1 346 15 is_stmt 0 view .LVU852
 2905 0070 0398     		ldr	r0, [sp, #12]
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2906              		.loc 1 346 4 view .LVU853
 2907 0072 0028     		cmp	r0, #0
 2908 0074 1FDD     		ble	.L194
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2909              		.loc 1 346 10 view .LVU854
 2910 0076 4FF0000B 		mov	fp, #0
 2911              	.LVL326:
 2912              	.L195:
 347:src/matrix.c  **** 				matrix_get(&t, bbase, k, j, bcols);
 2913              		.loc 1 347 5 is_stmt 1 discriminator 3 view .LVU855
 2914              	.LBB143:
 2915              	.LBI143:
  30:src/matrix.c  **** 	decimal64ToNumber(base + matrix_idx(row, col, ncols), r);
 2916              		.loc 1 30 13 discriminator 3 view .LVU856
 2917              	.LBB144:
  31:src/matrix.c  **** }
 2918              		.loc 1 31 2 discriminator 3 view .LVU857
 2919              	.LBB145:
 2920              	.LBI145:
ARM GAS  /tmp/cc0YfLmr.s 			page 75


  26:src/matrix.c  **** 	return col + row * ncols;
 2921              		.loc 1 26 12 discriminator 3 view .LVU858
 2922              	.LBB146:
  27:src/matrix.c  **** }
 2923              		.loc 1 27 2 discriminator 3 view .LVU859
  27:src/matrix.c  **** }
 2924              		.loc 1 27 13 is_stmt 0 discriminator 3 view .LVU860
 2925 007a 05FB00B0 		mla	r0, r5, r0, fp
 2926              	.LVL327:
  27:src/matrix.c  **** }
 2927              		.loc 1 27 13 discriminator 3 view .LVU861
 2928              	.LBE146:
 2929              	.LBE145:
  31:src/matrix.c  **** }
 2930              		.loc 1 31 2 discriminator 3 view .LVU862
 2931 007e 0FA9     		add	r1, sp, #60
 2932              	.LVL328:
  31:src/matrix.c  **** }
 2933              		.loc 1 31 2 discriminator 3 view .LVU863
 2934 0080 06EBC000 		add	r0, r6, r0, lsl #3
 2935 0084 FFF7FEFF 		bl	decimal64ToNumber
 2936              	.LVL329:
  31:src/matrix.c  **** }
 2937              		.loc 1 31 2 discriminator 3 view .LVU864
 2938              	.LBE144:
 2939              	.LBE143:
 348:src/matrix.c  **** 				dn_multiply(&u, &s, &t);
 2940              		.loc 1 348 5 is_stmt 1 discriminator 3 view .LVU865
 2941              	.LBB147:
 2942              	.LBI147:
  30:src/matrix.c  **** 	decimal64ToNumber(base + matrix_idx(row, col, ncols), r);
 2943              		.loc 1 30 13 discriminator 3 view .LVU866
 2944              	.LBB148:
  31:src/matrix.c  **** }
 2945              		.loc 1 31 2 discriminator 3 view .LVU867
 2946              	.LBB149:
 2947              	.LBI149:
  26:src/matrix.c  **** 	return col + row * ncols;
 2948              		.loc 1 26 12 discriminator 3 view .LVU868
 2949              	.LBB150:
  27:src/matrix.c  **** }
 2950              		.loc 1 27 2 discriminator 3 view .LVU869
  27:src/matrix.c  **** }
 2951              		.loc 1 27 19 is_stmt 0 discriminator 3 view .LVU870
 2952 0088 0598     		ldr	r0, [sp, #20]
  27:src/matrix.c  **** }
 2953              		.loc 1 27 13 discriminator 3 view .LVU871
 2954 008a 00FB0B40 		mla	r0, r0, fp, r4
 2955              	.LBE150:
 2956              	.LBE149:
  31:src/matrix.c  **** }
 2957              		.loc 1 31 2 discriminator 3 view .LVU872
 2958 008e 18A9     		add	r1, sp, #96
 2959              	.LVL330:
  31:src/matrix.c  **** }
 2960              		.loc 1 31 2 discriminator 3 view .LVU873
 2961 0090 07EBC000 		add	r0, r7, r0, lsl #3
ARM GAS  /tmp/cc0YfLmr.s 			page 76


 2962 0094 FFF7FEFF 		bl	decimal64ToNumber
 2963              	.LVL331:
  31:src/matrix.c  **** }
 2964              		.loc 1 31 2 discriminator 3 view .LVU874
 2965              	.LBE148:
 2966              	.LBE147:
 349:src/matrix.c  **** 				dn_add(&sum, &sum, &u);
 2967              		.loc 1 349 5 is_stmt 1 discriminator 3 view .LVU875
 2968 0098 18AA     		add	r2, sp, #96
 2969 009a 0FA9     		add	r1, sp, #60
 2970 009c 21A8     		add	r0, sp, #132
 2971 009e FFF7FEFF 		bl	dn_multiply
 2972              	.LVL332:
 350:src/matrix.c  **** 			}
 2973              		.loc 1 350 5 discriminator 3 view .LVU876
 2974 00a2 06A9     		add	r1, sp, #24
 2975 00a4 21AA     		add	r2, sp, #132
 2976 00a6 0846     		mov	r0, r1
 2977 00a8 FFF7FEFF 		bl	dn_add
 2978              	.LVL333:
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2979              		.loc 1 346 23 discriminator 3 view .LVU877
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2980              		.loc 1 346 15 is_stmt 0 discriminator 3 view .LVU878
 2981 00ac 0398     		ldr	r0, [sp, #12]
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2982              		.loc 1 346 24 discriminator 3 view .LVU879
 2983 00ae 0BF1010B 		add	fp, fp, #1
 2984              	.LVL334:
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2985              		.loc 1 346 14 is_stmt 1 discriminator 3 view .LVU880
 346:src/matrix.c  **** 				matrix_get(&s, abase, i, k, acols);
 2986              		.loc 1 346 4 is_stmt 0 discriminator 3 view .LVU881
 2987 00b2 5845     		cmp	r0, fp
 2988 00b4 E1DC     		bgt	.L195
 2989              	.LVL335:
 2990              	.L194:
 352:src/matrix.c  **** 		}
 2991              		.loc 1 352 4 is_stmt 1 view .LVU882
 2992 00b6 4046     		mov	r0, r8
 2993 00b8 06A9     		add	r1, sp, #24
 2994 00ba FFF7FEFF 		bl	packed_from_number
 2995              	.LVL336:
 344:src/matrix.c  **** 			decNumberZero(&sum);
 2996              		.loc 1 344 3 is_stmt 0 view .LVU883
 2997 00be 059B     		ldr	r3, [sp, #20]
 344:src/matrix.c  **** 			decNumberZero(&sum);
 2998              		.loc 1 344 23 view .LVU884
 2999 00c0 0134     		adds	r4, r4, #1
 3000              	.LVL337:
 344:src/matrix.c  **** 			decNumberZero(&sum);
 3001              		.loc 1 344 3 view .LVU885
 3002 00c2 A342     		cmp	r3, r4
 352:src/matrix.c  **** 		}
 3003              		.loc 1 352 4 view .LVU886
 3004 00c4 08F10808 		add	r8, r8, #8
 3005              	.LVL338:
ARM GAS  /tmp/cc0YfLmr.s 			page 77


 344:src/matrix.c  **** 			decNumberZero(&sum);
 3006              		.loc 1 344 22 is_stmt 1 view .LVU887
 344:src/matrix.c  **** 			decNumberZero(&sum);
 3007              		.loc 1 344 13 view .LVU888
 344:src/matrix.c  **** 			decNumberZero(&sum);
 3008              		.loc 1 344 3 is_stmt 0 view .LVU889
 3009 00c8 CFDC     		bgt	.L196
 3010              	.LVL339:
 3011              	.L197:
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3012              		.loc 1 343 21 is_stmt 1 discriminator 2 view .LVU890
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3013              		.loc 1 343 2 is_stmt 0 discriminator 2 view .LVU891
 3014 00ca 029B     		ldr	r3, [sp, #8]
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3015              		.loc 1 343 22 discriminator 2 view .LVU892
 3016 00cc 0135     		adds	r5, r5, #1
 3017              	.LVL340:
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3018              		.loc 1 343 12 is_stmt 1 discriminator 2 view .LVU893
 343:src/matrix.c  **** 		for (j=0; j<bcols; j++) {
 3019              		.loc 1 343 2 is_stmt 0 discriminator 2 view .LVU894
 3020 00ce AB42     		cmp	r3, r5
 3021 00d0 C6DC     		bgt	.L192
 3022              	.LVL341:
 3023              	.L193:
 354:src/matrix.c  **** 	return r;
 3024              		.loc 1 354 2 is_stmt 1 view .LVU895
 354:src/matrix.c  **** 	return r;
 3025              		.loc 1 354 8 is_stmt 0 view .LVU896
 3026 00d2 5046     		mov	r0, r10
 3027 00d4 FFF7FEFF 		bl	get_reg_n
 3028              	.LVL342:
 354:src/matrix.c  **** 	return r;
 3029              		.loc 1 354 59 view .LVU897
 3030 00d8 029B     		ldr	r3, [sp, #8]
 3031 00da 059A     		ldr	r2, [sp, #20]
 354:src/matrix.c  **** 	return r;
 3032              		.loc 1 354 2 view .LVU898
 3033 00dc 0199     		ldr	r1, [sp, #4]
 354:src/matrix.c  **** 	return r;
 3034              		.loc 1 354 59 view .LVU899
 3035 00de 02FB03F2 		mul	r2, r2, r3
 354:src/matrix.c  **** 	return r;
 3036              		.loc 1 354 2 view .LVU900
 3037 00e2 D200     		lsls	r2, r2, #3
 3038 00e4 FFF7FEFF 		bl	xcopy
 3039              	.LVL343:
 355:src/matrix.c  **** }
 3040              		.loc 1 355 2 is_stmt 1 view .LVU901
 355:src/matrix.c  **** }
 3041              		.loc 1 355 9 is_stmt 0 view .LVU902
 3042 00e8 4846     		mov	r0, r9
 356:src/matrix.c  **** 
 3043              		.loc 1 356 1 view .LVU903
 3044 00ea 0DF5737D 		add	sp, sp, #972
 3045              		.cfi_remember_state
ARM GAS  /tmp/cc0YfLmr.s 			page 78


 3046              		.cfi_def_cfa_offset 36
 3047              		@ sp needed
 3048 00ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3049              	.LVL344:
 3050              	.L210:
 3051              		.cfi_restore_state
 335:src/matrix.c  **** 		return NULL;
 3052              		.loc 1 335 3 is_stmt 1 view .LVU904
 3053 00f2 1520     		movs	r0, #21
 3054              	.LVL345:
 335:src/matrix.c  **** 		return NULL;
 3055              		.loc 1 335 3 is_stmt 0 view .LVU905
 3056 00f4 FFF7FEFF 		bl	report_err
 3057              	.LVL346:
 3058              	.L209:
 336:src/matrix.c  **** 	}
 3059              		.loc 1 336 3 is_stmt 1 view .LVU906
 336:src/matrix.c  **** 	}
 3060              		.loc 1 336 10 is_stmt 0 view .LVU907
 3061 00f8 0020     		movs	r0, #0
 356:src/matrix.c  **** 
 3062              		.loc 1 356 1 view .LVU908
 3063 00fa 0DF5737D 		add	sp, sp, #972
 3064              		.cfi_def_cfa_offset 36
 3065              		@ sp needed
 3066 00fe BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 356:src/matrix.c  **** 
 3067              		.loc 1 356 1 view .LVU909
 3068              		.cfi_endproc
 3069              	.LFE18:
 3071 0102 00BF     		.section	.text.matrix_transpose,"ax",%progbits
 3072              		.align	1
 3073              		.p2align 2,,3
 3074              		.global	matrix_transpose
 3075              		.syntax unified
 3076              		.thumb
 3077              		.thumb_func
 3078              		.fpu fpv4-sp-d16
 3080              	matrix_transpose:
 3081              	.LVL347:
 3082              	.LFB19:
 359:src/matrix.c  **** 	int w, h, start, next, i;
 3083              		.loc 1 359 63 is_stmt 1 view -0
 3084              		.cfi_startproc
 3085              		@ args = 0, pretend = 0, frame = 16
 3086              		@ frame_needed = 0, uses_anonymous_args = 0
 360:src/matrix.c  **** 	int n = matrix_decompose(m, &h, &w, NULL);
 3087              		.loc 1 360 2 view .LVU911
 361:src/matrix.c  **** 	decimal64 *base, tmp;
 3088              		.loc 1 361 2 view .LVU912
 359:src/matrix.c  **** 	int w, h, start, next, i;
 3089              		.loc 1 359 63 is_stmt 0 view .LVU913
 3090 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3091              		.cfi_def_cfa_offset 24
 3092              		.cfi_offset 4, -24
 3093              		.cfi_offset 5, -20
 3094              		.cfi_offset 6, -16
ARM GAS  /tmp/cc0YfLmr.s 			page 79


 3095              		.cfi_offset 7, -12
 3096              		.cfi_offset 8, -8
 3097              		.cfi_offset 14, -4
 3098 0004 84B0     		sub	sp, sp, #16
 3099              		.cfi_def_cfa_offset 40
 359:src/matrix.c  **** 	int w, h, start, next, i;
 3100              		.loc 1 359 63 view .LVU914
 3101 0006 0646     		mov	r6, r0
 361:src/matrix.c  **** 	decimal64 *base, tmp;
 3102              		.loc 1 361 10 view .LVU915
 3103 0008 0023     		movs	r3, #0
 3104 000a 0846     		mov	r0, r1
 3105              	.LVL348:
 361:src/matrix.c  **** 	decimal64 *base, tmp;
 3106              		.loc 1 361 10 view .LVU916
 3107 000c 6A46     		mov	r2, sp
 3108 000e 01A9     		add	r1, sp, #4
 3109              	.LVL349:
 361:src/matrix.c  **** 	decimal64 *base, tmp;
 3110              		.loc 1 361 10 view .LVU917
 3111 0010 FFF7FEFF 		bl	matrix_decompose
 3112              	.LVL350:
 362:src/matrix.c  **** 
 3113              		.loc 1 362 2 is_stmt 1 view .LVU918
 364:src/matrix.c  **** 		return NULL;
 3114              		.loc 1 364 2 view .LVU919
 364:src/matrix.c  **** 		return NULL;
 3115              		.loc 1 364 5 is_stmt 0 view .LVU920
 3116 0014 071E     		subs	r7, r0, #0
 3117 0016 4CDB     		blt	.L214
 366:src/matrix.c  **** 	if (base == NULL)
 3118              		.loc 1 366 2 is_stmt 1 view .LVU921
 366:src/matrix.c  **** 	if (base == NULL)
 3119              		.loc 1 366 11 is_stmt 0 view .LVU922
 3120 0018 FFF7FEFF 		bl	get_reg_n
 3121              	.LVL351:
 367:src/matrix.c  **** 		return NULL;
 3122              		.loc 1 367 2 is_stmt 1 view .LVU923
 367:src/matrix.c  **** 		return NULL;
 3123              		.loc 1 367 5 is_stmt 0 view .LVU924
 3124 001c 8646     		mov	lr, r0
 3125 001e 0028     		cmp	r0, #0
 3126 0020 47D0     		beq	.L214
 3127              	.LVL352:
 370:src/matrix.c  **** 		next = start;
 3128              		.loc 1 370 16 is_stmt 1 view .LVU925
 370:src/matrix.c  **** 		next = start;
 3129              		.loc 1 370 25 is_stmt 0 view .LVU926
 3130 0022 DDE90023 		ldrd	r2, r3, [sp]
 3131 0026 03FB02F1 		mul	r1, r3, r2
 370:src/matrix.c  **** 		next = start;
 3132              		.loc 1 370 2 view .LVU927
 3133 002a 0029     		cmp	r1, #0
 3134 002c 39DD     		ble	.L215
 370:src/matrix.c  **** 		next = start;
 3135              		.loc 1 370 12 view .LVU928
 3136 002e 4FF0000C 		mov	ip, #0
ARM GAS  /tmp/cc0YfLmr.s 			page 80


 380:src/matrix.c  **** 		do {
 3137              		.loc 1 380 7 view .LVU929
 3138 0032 0DF10808 		add	r8, sp, #8
 3139              	.LVL353:
 3140              	.L222:
 370:src/matrix.c  **** 		next = start;
 3141              		.loc 1 370 12 view .LVU930
 3142 0036 6146     		mov	r1, ip
 372:src/matrix.c  **** 		do {
 3143              		.loc 1 372 4 view .LVU931
 3144 0038 0025     		movs	r5, #0
 3145              	.L216:
 3146              	.LVL354:
 373:src/matrix.c  **** 			i++;
 3147              		.loc 1 373 3 is_stmt 1 discriminator 1 view .LVU932
 374:src/matrix.c  **** 			next = (next % h) * w + next / h;
 3148              		.loc 1 374 4 discriminator 1 view .LVU933
 375:src/matrix.c  **** 		} while (next > start);
 3149              		.loc 1 375 17 is_stmt 0 discriminator 1 view .LVU934
 3150 003a 91FBF3F4 		sdiv	r4, r1, r3
 3151 003e 03FB1411 		mls	r1, r3, r4, r1
 3152              	.LVL355:
 375:src/matrix.c  **** 		} while (next > start);
 3153              		.loc 1 375 9 discriminator 1 view .LVU935
 3154 0042 02FB0141 		mla	r1, r2, r1, r4
 376:src/matrix.c  **** 		if (next < start || i == 1)
 3155              		.loc 1 376 3 discriminator 1 view .LVU936
 3156 0046 6145     		cmp	r1, ip
 374:src/matrix.c  **** 			next = (next % h) * w + next / h;
 3157              		.loc 1 374 5 discriminator 1 view .LVU937
 3158 0048 05F10105 		add	r5, r5, #1
 3159              	.LVL356:
 375:src/matrix.c  **** 		} while (next > start);
 3160              		.loc 1 375 4 is_stmt 1 discriminator 1 view .LVU938
 376:src/matrix.c  **** 		if (next < start || i == 1)
 3161              		.loc 1 376 11 discriminator 1 view .LVU939
 376:src/matrix.c  **** 		if (next < start || i == 1)
 3162              		.loc 1 376 3 is_stmt 0 discriminator 1 view .LVU940
 3163 004c F5DC     		bgt	.L216
 3164              	.LVL357:
 377:src/matrix.c  **** 			continue;
 3165              		.loc 1 377 3 is_stmt 1 view .LVU941
 377:src/matrix.c  **** 			continue;
 3166              		.loc 1 377 6 is_stmt 0 view .LVU942
 3167 004e 22DB     		blt	.L218
 377:src/matrix.c  **** 			continue;
 3168              		.loc 1 377 20 discriminator 1 view .LVU943
 3169 0050 012D     		cmp	r5, #1
 3170 0052 20D0     		beq	.L218
 380:src/matrix.c  **** 		do {
 3171              		.loc 1 380 3 is_stmt 1 view .LVU944
 3172              	.LVL358:
 380:src/matrix.c  **** 		do {
 3173              		.loc 1 380 7 is_stmt 0 view .LVU945
 3174 0054 0EEBCC01 		add	r1, lr, ip, lsl #3
 3175 0058 03C9     		ldm	r1, {r0, r1}
 3176 005a 6446     		mov	r4, ip
ARM GAS  /tmp/cc0YfLmr.s 			page 81


 3177 005c 88E80300 		stm	r8, {r0, r1}
 3178 0060 06E0     		b	.L221
 3179              	.LVL359:
 3180              	.L233:
 383:src/matrix.c  **** 			next = i;
 3181              		.loc 1 383 15 discriminator 1 view .LVU946
 3182 0062 92E80300 		ldm	r2, {r0, r1}
 3183              	.LVL360:
 383:src/matrix.c  **** 			next = i;
 3184              		.loc 1 383 15 discriminator 1 view .LVU947
 3185 0066 83E80300 		stm	r3, {r0, r1}
 384:src/matrix.c  **** 		} while (next > start);
 3186              		.loc 1 384 4 is_stmt 1 discriminator 1 view .LVU948
 3187              	.LVL361:
 385:src/matrix.c  **** 	}
 3188              		.loc 1 385 11 discriminator 1 view .LVU949
 3189 006a DDE90023 		ldrd	r2, r3, [sp]
 385:src/matrix.c  **** 	}
 3190              		.loc 1 385 3 is_stmt 0 discriminator 1 view .LVU950
 3191 006e 12DD     		ble	.L218
 3192              	.LVL362:
 3193              	.L221:
 381:src/matrix.c  **** 			i = (next % h) * w + next / h;
 3194              		.loc 1 381 3 is_stmt 1 view .LVU951
 382:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 3195              		.loc 1 382 4 view .LVU952
 382:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 3196              		.loc 1 382 14 is_stmt 0 view .LVU953
 3197 0070 94FBF3F0 		sdiv	r0, r4, r3
 3198 0074 03FB1043 		mls	r3, r3, r0, r4
 3199 0078 2146     		mov	r1, r4
 382:src/matrix.c  **** 			base[next] = (i == start) ? tmp : base[i];
 3200              		.loc 1 382 6 view .LVU954
 3201 007a 02FB0304 		mla	r4, r2, r3, r0
 3202              	.LVL363:
 383:src/matrix.c  **** 			next = i;
 3203              		.loc 1 383 4 is_stmt 1 view .LVU955
 383:src/matrix.c  **** 			next = i;
 3204              		.loc 1 383 15 is_stmt 0 view .LVU956
 3205 007e 6445     		cmp	r4, ip
 3206 0080 0EEBC402 		add	r2, lr, r4, lsl #3
 383:src/matrix.c  **** 			next = i;
 3207              		.loc 1 383 8 view .LVU957
 3208 0084 0EEBC103 		add	r3, lr, r1, lsl #3
 383:src/matrix.c  **** 			next = i;
 3209              		.loc 1 383 15 view .LVU958
 3210 0088 EBD1     		bne	.L233
 383:src/matrix.c  **** 			next = i;
 3211              		.loc 1 383 15 discriminator 2 view .LVU959
 3212 008a 98E80300 		ldm	r8, {r0, r1}
 3213              	.LVL364:
 383:src/matrix.c  **** 			next = i;
 3214              		.loc 1 383 15 discriminator 2 view .LVU960
 3215 008e 83E80300 		stm	r3, {r0, r1}
 384:src/matrix.c  **** 		} while (next > start);
 3216              		.loc 1 384 4 is_stmt 1 discriminator 2 view .LVU961
 3217              	.LVL365:
ARM GAS  /tmp/cc0YfLmr.s 			page 82


 385:src/matrix.c  **** 	}
 3218              		.loc 1 385 11 discriminator 2 view .LVU962
 3219 0092 DDE90023 		ldrd	r2, r3, [sp]
 3220              	.LVL366:
 3221              	.L218:
 370:src/matrix.c  **** 		next = start;
 3222              		.loc 1 370 29 discriminator 2 view .LVU963
 370:src/matrix.c  **** 		next = start;
 3223              		.loc 1 370 34 is_stmt 0 discriminator 2 view .LVU964
 3224 0096 0CF1010C 		add	ip, ip, #1
 3225              	.LVL367:
 370:src/matrix.c  **** 		next = start;
 3226              		.loc 1 370 16 is_stmt 1 discriminator 2 view .LVU965
 370:src/matrix.c  **** 		next = start;
 3227              		.loc 1 370 25 is_stmt 0 discriminator 2 view .LVU966
 3228 009a 03FB02F1 		mul	r1, r3, r2
 370:src/matrix.c  **** 		next = start;
 3229              		.loc 1 370 2 discriminator 2 view .LVU967
 3230 009e 6145     		cmp	r1, ip
 3231 00a0 C9DC     		bgt	.L222
 3232              	.LVL368:
 3233              	.L215:
 388:src/matrix.c  **** 	return r;
 3234              		.loc 1 388 2 is_stmt 1 view .LVU968
 3235 00a2 3946     		mov	r1, r7
 3236 00a4 3046     		mov	r0, r6
 3237 00a6 FFF7FEFF 		bl	matrix_descriptor
 3238              	.LVL369:
 389:src/matrix.c  **** }
 3239              		.loc 1 389 2 view .LVU969
 389:src/matrix.c  **** }
 3240              		.loc 1 389 9 is_stmt 0 view .LVU970
 3241 00aa 3046     		mov	r0, r6
 390:src/matrix.c  **** 
 3242              		.loc 1 390 1 view .LVU971
 3243 00ac 04B0     		add	sp, sp, #16
 3244              		.cfi_remember_state
 3245              		.cfi_def_cfa_offset 24
 3246              		@ sp needed
 3247 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3248              	.LVL370:
 3249              	.L214:
 3250              		.cfi_restore_state
 365:src/matrix.c  **** 	base = &(get_reg_n(n)->s);
 3251              		.loc 1 365 10 view .LVU972
 3252 00b2 0020     		movs	r0, #0
 390:src/matrix.c  **** 
 3253              		.loc 1 390 1 view .LVU973
 3254 00b4 04B0     		add	sp, sp, #16
 3255              		.cfi_def_cfa_offset 24
 3256              		@ sp needed
 3257 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 390:src/matrix.c  **** 
 3258              		.loc 1 390 1 view .LVU974
 3259              		.cfi_endproc
 3260              	.LFE19:
 3262 00ba 00BF     		.section	.text.matrix_rowops,"ax",%progbits
ARM GAS  /tmp/cc0YfLmr.s 			page 83


 3263              		.align	1
 3264              		.p2align 2,,3
 3265              		.global	matrix_rowops
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3269              		.fpu fpv4-sp-d16
 3271              	matrix_rowops:
 3272              	.LVL371:
 3273              	.LFB20:
 393:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 3274              		.loc 1 393 35 is_stmt 1 view -0
 3275              		.cfi_startproc
 3276              		@ args = 0, pretend = 0, frame = 152
 3277              		@ frame_needed = 0, uses_anonymous_args = 0
 394:src/matrix.c  **** 	decimal64 *base, *r1, *r2;
 3278              		.loc 1 394 2 view .LVU976
 395:src/matrix.c  **** 	int rows, cols;
 3279              		.loc 1 395 2 view .LVU977
 396:src/matrix.c  **** 	int i;
 3280              		.loc 1 396 2 view .LVU978
 397:src/matrix.c  **** 
 3281              		.loc 1 397 2 view .LVU979
 399:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3282              		.loc 1 399 2 view .LVU980
 393:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 3283              		.loc 1 393 35 is_stmt 0 view .LVU981
 3284 0000 70B5     		push	{r4, r5, r6, lr}
 3285              		.cfi_def_cfa_offset 16
 3286              		.cfi_offset 4, -16
 3287              		.cfi_offset 5, -12
 3288              		.cfi_offset 6, -8
 3289              		.cfi_offset 14, -4
 3290 0002 A6B0     		sub	sp, sp, #152
 3291              		.cfi_def_cfa_offset 168
 399:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3292              		.loc 1 399 2 view .LVU982
 3293 0004 14AA     		add	r2, sp, #80
 3294 0006 0BA9     		add	r1, sp, #44
 393:src/matrix.c  **** 	decNumber m, ydn, zdn, t;
 3295              		.loc 1 393 35 view .LVU983
 3296 0008 0646     		mov	r6, r0
 399:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3297              		.loc 1 399 2 view .LVU984
 3298 000a 1DAB     		add	r3, sp, #116
 3299 000c 02A8     		add	r0, sp, #8
 3300              	.LVL372:
 399:src/matrix.c  **** 	base = matrix_decomp(&m, &rows, &cols);
 3301              		.loc 1 399 2 view .LVU985
 3302 000e FFF7FEFF 		bl	getXYZT
 3303              	.LVL373:
 400:src/matrix.c  **** 	if (base == NULL)
 3304              		.loc 1 400 2 is_stmt 1 view .LVU986
 400:src/matrix.c  **** 	if (base == NULL)
 3305              		.loc 1 400 9 is_stmt 0 view .LVU987
 3306 0012 02A8     		add	r0, sp, #8
 3307 0014 01AA     		add	r2, sp, #4
ARM GAS  /tmp/cc0YfLmr.s 			page 84


 3308 0016 6946     		mov	r1, sp
 3309 0018 FFF7FEFF 		bl	matrix_decomp
 3310              	.LVL374:
 401:src/matrix.c  **** 		return;
 3311              		.loc 1 401 2 is_stmt 1 view .LVU988
 401:src/matrix.c  **** 		return;
 3312              		.loc 1 401 5 is_stmt 0 view .LVU989
 3313 001c 28B3     		cbz	r0, .L234
 404:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 3314              		.loc 1 404 2 is_stmt 1 view .LVU990
 3315 001e 0546     		mov	r5, r0
 404:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 3316              		.loc 1 404 6 is_stmt 0 view .LVU991
 3317 0020 0BA8     		add	r0, sp, #44
 3318              	.LVL375:
 404:src/matrix.c  **** 	if (i < 0 || i >= rows) {
 3319              		.loc 1 404 6 view .LVU992
 3320 0022 FFF7FEFF 		bl	dn_to_int
 3321              	.LVL376:
 405:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3322              		.loc 1 405 2 is_stmt 1 view .LVU993
 405:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3323              		.loc 1 405 5 is_stmt 0 view .LVU994
 3324 0026 441E     		subs	r4, r0, #1
 3325              	.LVL377:
 405:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3326              		.loc 1 405 5 view .LVU995
 3327 0028 21D4     		bmi	.L238
 405:src/matrix.c  **** badrow:		report_err(ERR_RANGE);
 3328              		.loc 1 405 12 discriminator 1 view .LVU996
 3329 002a 009B     		ldr	r3, [sp]
 3330 002c A342     		cmp	r3, r4
 3331 002e 1EDD     		ble	.L238
 409:src/matrix.c  **** 
 3332              		.loc 1 409 2 is_stmt 1 view .LVU997
 409:src/matrix.c  **** 
 3333              		.loc 1 409 16 is_stmt 0 view .LVU998
 3334 0030 019B     		ldr	r3, [sp, #4]
 411:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 3335              		.loc 1 411 5 view .LVU999
 3336 0032 A42E     		cmp	r6, #164
 409:src/matrix.c  **** 
 3337              		.loc 1 409 16 view .LVU1000
 3338 0034 04FB03F4 		mul	r4, r4, r3
 3339              	.LVL378:
 409:src/matrix.c  **** 
 3340              		.loc 1 409 5 view .LVU1001
 3341 0038 05EBC404 		add	r4, r5, r4, lsl #3
 3342              	.LVL379:
 411:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 3343              		.loc 1 411 2 is_stmt 1 view .LVU1002
 411:src/matrix.c  **** 		for (i=0; i<cols; i++) {
 3344              		.loc 1 411 5 is_stmt 0 view .LVU1003
 3345 003c 1CD1     		bne	.L239
 3346              	.LVL380:
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3347              		.loc 1 412 13 is_stmt 1 view .LVU1004
ARM GAS  /tmp/cc0YfLmr.s 			page 85


 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3348              		.loc 1 412 3 is_stmt 0 view .LVU1005
 3349 003e 002B     		cmp	r3, #0
 3350 0040 13DD     		ble	.L234
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3351              		.loc 1 412 9 view .LVU1006
 3352 0042 0025     		movs	r5, #0
 3353              	.LVL381:
 3354              	.L240:
 413:src/matrix.c  **** 			dn_multiply(&m, &zdn, &t);
 3355              		.loc 1 413 4 is_stmt 1 discriminator 3 view .LVU1007
 3356 0044 1DA9     		add	r1, sp, #116
 3357 0046 2046     		mov	r0, r4
 3358 0048 FFF7FEFF 		bl	decimal64ToNumber
 3359              	.LVL382:
 414:src/matrix.c  **** 			packed_from_number(r1++, &m);
 3360              		.loc 1 414 4 discriminator 3 view .LVU1008
 3361 004c 1DAA     		add	r2, sp, #116
 3362 004e 14A9     		add	r1, sp, #80
 3363 0050 02A8     		add	r0, sp, #8
 3364 0052 FFF7FEFF 		bl	dn_multiply
 3365              	.LVL383:
 415:src/matrix.c  **** 		}
 3366              		.loc 1 415 4 discriminator 3 view .LVU1009
 3367 0056 2046     		mov	r0, r4
 3368 0058 02A9     		add	r1, sp, #8
 3369 005a FFF7FEFF 		bl	packed_from_number
 3370              	.LVL384:
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3371              		.loc 1 412 3 is_stmt 0 discriminator 3 view .LVU1010
 3372 005e 019B     		ldr	r3, [sp, #4]
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3373              		.loc 1 412 22 discriminator 3 view .LVU1011
 3374 0060 0135     		adds	r5, r5, #1
 3375              	.LVL385:
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3376              		.loc 1 412 3 discriminator 3 view .LVU1012
 3377 0062 AB42     		cmp	r3, r5
 415:src/matrix.c  **** 		}
 3378              		.loc 1 415 4 discriminator 3 view .LVU1013
 3379 0064 04F10804 		add	r4, r4, #8
 3380              	.LVL386:
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3381              		.loc 1 412 21 is_stmt 1 discriminator 3 view .LVU1014
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3382              		.loc 1 412 13 discriminator 3 view .LVU1015
 412:src/matrix.c  **** 			decimal64ToNumber(r1, &t);
 3383              		.loc 1 412 3 is_stmt 0 discriminator 3 view .LVU1016
 3384 0068 ECDC     		bgt	.L240
 3385              	.LVL387:
 3386              	.L234:
 436:src/matrix.c  **** #endif
 3387              		.loc 1 436 1 view .LVU1017
 3388 006a 26B0     		add	sp, sp, #152
 3389              		.cfi_remember_state
 3390              		.cfi_def_cfa_offset 16
 3391              		@ sp needed
ARM GAS  /tmp/cc0YfLmr.s 			page 86


 3392 006c 70BD     		pop	{r4, r5, r6, pc}
 3393              	.LVL388:
 3394              	.L238:
 3395              		.cfi_restore_state
 3396              	.LDL1:
 406:src/matrix.c  **** 		return;
 3397              		.loc 1 406 10 is_stmt 1 view .LVU1018
 3398 006e 0820     		movs	r0, #8
 3399 0070 FFF7FEFF 		bl	report_err
 3400              	.LVL389:
 407:src/matrix.c  **** 	}
 3401              		.loc 1 407 3 view .LVU1019
 436:src/matrix.c  **** #endif
 3402              		.loc 1 436 1 is_stmt 0 view .LVU1020
 3403 0074 26B0     		add	sp, sp, #152
 3404              		.cfi_remember_state
 3405              		.cfi_def_cfa_offset 16
 3406              		@ sp needed
 3407 0076 70BD     		pop	{r4, r5, r6, pc}
 3408              	.LVL390:
 3409              	.L239:
 3410              		.cfi_restore_state
 418:src/matrix.c  **** 		if (i < 0 || i >= rows)
 3411              		.loc 1 418 3 is_stmt 1 view .LVU1021
 418:src/matrix.c  **** 		if (i < 0 || i >= rows)
 3412              		.loc 1 418 7 is_stmt 0 view .LVU1022
 3413 0078 14A8     		add	r0, sp, #80
 3414              	.LVL391:
 418:src/matrix.c  **** 		if (i < 0 || i >= rows)
 3415              		.loc 1 418 7 view .LVU1023
 3416 007a FFF7FEFF 		bl	dn_to_int
 3417              	.LVL392:
 419:src/matrix.c  **** 			goto badrow;
 3418              		.loc 1 419 3 is_stmt 1 view .LVU1024
 419:src/matrix.c  **** 			goto badrow;
 3419              		.loc 1 419 6 is_stmt 0 view .LVU1025
 3420 007e 0138     		subs	r0, r0, #1
 3421              	.LVL393:
 419:src/matrix.c  **** 			goto badrow;
 3422              		.loc 1 419 6 view .LVU1026
 3423 0080 F5D4     		bmi	.L238
 419:src/matrix.c  **** 			goto badrow;
 3424              		.loc 1 419 13 discriminator 1 view .LVU1027
 3425 0082 009B     		ldr	r3, [sp]
 3426 0084 8342     		cmp	r3, r0
 3427 0086 F2DD     		ble	.L238
 421:src/matrix.c  **** 
 3428              		.loc 1 421 3 is_stmt 1 view .LVU1028
 421:src/matrix.c  **** 
 3429              		.loc 1 421 17 is_stmt 0 view .LVU1029
 3430 0088 019B     		ldr	r3, [sp, #4]
 423:src/matrix.c  **** 			for (i=0; i<cols; i++)
 3431              		.loc 1 423 6 view .LVU1030
 3432 008a A32E     		cmp	r6, #163
 421:src/matrix.c  **** 
 3433              		.loc 1 421 17 view .LVU1031
 3434 008c 00FB03F0 		mul	r0, r0, r3
ARM GAS  /tmp/cc0YfLmr.s 			page 87


 3435              	.LVL394:
 421:src/matrix.c  **** 
 3436              		.loc 1 421 6 view .LVU1032
 3437 0090 05EBC005 		add	r5, r5, r0, lsl #3
 3438              	.LVL395:
 423:src/matrix.c  **** 			for (i=0; i<cols; i++)
 3439              		.loc 1 423 3 is_stmt 1 view .LVU1033
 423:src/matrix.c  **** 			for (i=0; i<cols; i++)
 3440              		.loc 1 423 6 is_stmt 0 view .LVU1034
 3441 0094 22D0     		beq	.L241
 3442              	.LVL396:
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3443              		.loc 1 427 14 is_stmt 1 view .LVU1035
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3444              		.loc 1 427 4 is_stmt 0 view .LVU1036
 3445 0096 002B     		cmp	r3, #0
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3446              		.loc 1 427 10 view .LVU1037
 3447 0098 C8BF     		it	gt
 3448 009a 0026     		movgt	r6, #0
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3449              		.loc 1 427 4 view .LVU1038
 3450 009c E5DD     		ble	.L234
 3451              	.LVL397:
 3452              	.L242:
 428:src/matrix.c  **** 				decimal64ToNumber(r2++, &zdn);
 3453              		.loc 1 428 5 is_stmt 1 discriminator 3 view .LVU1039
 3454 009e 0BA9     		add	r1, sp, #44
 3455 00a0 2046     		mov	r0, r4
 3456 00a2 FFF7FEFF 		bl	decimal64ToNumber
 3457              	.LVL398:
 429:src/matrix.c  **** 				dn_multiply(&m, &zdn, &t);
 3458              		.loc 1 429 5 discriminator 3 view .LVU1040
 3459 00a6 2846     		mov	r0, r5
 3460 00a8 14A9     		add	r1, sp, #80
 3461 00aa FFF7FEFF 		bl	decimal64ToNumber
 3462              	.LVL399:
 430:src/matrix.c  **** 				dn_add(&zdn, &ydn, &m);
 3463              		.loc 1 430 5 is_stmt 0 discriminator 3 view .LVU1041
 3464 00ae 1DAA     		add	r2, sp, #116
 3465 00b0 14A9     		add	r1, sp, #80
 3466 00b2 02A8     		add	r0, sp, #8
 3467 00b4 FFF7FEFF 		bl	dn_multiply
 3468              	.LVL400:
 431:src/matrix.c  **** 				packed_from_number(r1++, &zdn);
 3469              		.loc 1 431 5 discriminator 3 view .LVU1042
 3470 00b8 02AA     		add	r2, sp, #8
 3471 00ba 0BA9     		add	r1, sp, #44
 3472 00bc 14A8     		add	r0, sp, #80
 3473 00be FFF7FEFF 		bl	dn_add
 3474              	.LVL401:
 3475 00c2 2046     		mov	r0, r4
 432:src/matrix.c  **** 			}
 3476              		.loc 1 432 5 discriminator 3 view .LVU1043
 3477 00c4 14A9     		add	r1, sp, #80
 3478 00c6 FFF7FEFF 		bl	packed_from_number
 3479              	.LVL402:
ARM GAS  /tmp/cc0YfLmr.s 			page 88


 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3480              		.loc 1 427 4 discriminator 3 view .LVU1044
 3481 00ca 019B     		ldr	r3, [sp, #4]
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3482              		.loc 1 427 23 discriminator 3 view .LVU1045
 3483 00cc 0136     		adds	r6, r6, #1
 3484              	.LVL403:
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3485              		.loc 1 427 4 discriminator 3 view .LVU1046
 3486 00ce B342     		cmp	r3, r6
 429:src/matrix.c  **** 				dn_multiply(&m, &zdn, &t);
 3487              		.loc 1 429 5 discriminator 3 view .LVU1047
 3488 00d0 05F10805 		add	r5, r5, #8
 3489              	.LVL404:
 430:src/matrix.c  **** 				dn_add(&zdn, &ydn, &m);
 3490              		.loc 1 430 5 is_stmt 1 discriminator 3 view .LVU1048
 431:src/matrix.c  **** 				packed_from_number(r1++, &zdn);
 3491              		.loc 1 431 5 discriminator 3 view .LVU1049
 432:src/matrix.c  **** 			}
 3492              		.loc 1 432 5 discriminator 3 view .LVU1050
 3493 00d4 04F10804 		add	r4, r4, #8
 3494              	.LVL405:
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3495              		.loc 1 427 22 discriminator 3 view .LVU1051
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3496              		.loc 1 427 14 discriminator 3 view .LVU1052
 427:src/matrix.c  **** 				decimal64ToNumber(r1, &ydn);
 3497              		.loc 1 427 4 is_stmt 0 discriminator 3 view .LVU1053
 3498 00d8 E1DC     		bgt	.L242
 3499 00da C6E7     		b	.L234
 3500              	.LVL406:
 3501              	.L241:
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3502              		.loc 1 424 14 is_stmt 1 view .LVU1054
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3503              		.loc 1 424 4 is_stmt 0 view .LVU1055
 3504 00dc 002B     		cmp	r3, #0
 3505 00de C4DD     		ble	.L234
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3506              		.loc 1 424 10 view .LVU1056
 3507 00e0 0026     		movs	r6, #0
 3508              	.LVL407:
 3509              	.L243:
 425:src/matrix.c  **** 		} else {
 3510              		.loc 1 425 5 is_stmt 1 discriminator 3 view .LVU1057
 3511 00e2 2046     		mov	r0, r4
 3512 00e4 2946     		mov	r1, r5
 3513 00e6 FFF7FEFF 		bl	swap_reg
 3514              	.LVL408:
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3515              		.loc 1 424 4 is_stmt 0 discriminator 3 view .LVU1058
 3516 00ea 019B     		ldr	r3, [sp, #4]
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3517              		.loc 1 424 23 discriminator 3 view .LVU1059
 3518 00ec 0136     		adds	r6, r6, #1
 3519              	.LVL409:
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
ARM GAS  /tmp/cc0YfLmr.s 			page 89


 3520              		.loc 1 424 4 discriminator 3 view .LVU1060
 3521 00ee B342     		cmp	r3, r6
 425:src/matrix.c  **** 		} else {
 3522              		.loc 1 425 5 discriminator 3 view .LVU1061
 3523 00f0 04F10804 		add	r4, r4, #8
 3524              	.LVL410:
 425:src/matrix.c  **** 		} else {
 3525              		.loc 1 425 5 discriminator 3 view .LVU1062
 3526 00f4 05F10805 		add	r5, r5, #8
 3527              	.LVL411:
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3528              		.loc 1 424 22 is_stmt 1 discriminator 3 view .LVU1063
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3529              		.loc 1 424 14 discriminator 3 view .LVU1064
 424:src/matrix.c  **** 				swap_reg((REGISTER *) r1++, (REGISTER *) r2++);
 3530              		.loc 1 424 4 is_stmt 0 discriminator 3 view .LVU1065
 3531 00f8 F3DC     		bgt	.L243
 3532 00fa B6E7     		b	.L234
 3533              		.cfi_endproc
 3534              	.LFE20:
 3536              		.section	.text.matrix_determinant,"ax",%progbits
 3537              		.align	1
 3538              		.p2align 2,,3
 3539              		.global	matrix_determinant
 3540              		.syntax unified
 3541              		.thumb
 3542              		.thumb_func
 3543              		.fpu fpv4-sp-d16
 3545              	matrix_determinant:
 3546              	.LVL412:
 3547              	.LFB26:
 591:src/matrix.c  **** 
 592:src/matrix.c  **** /* Calculate the determinant of a matrix by performing the LU decomposition
 593:src/matrix.c  ****  * and multiplying the diagonal elements of the upper triangular portion.
 594:src/matrix.c  ****  * Also adjust for the parity of the number of pivots.
 595:src/matrix.c  ****  */
 596:src/matrix.c  **** decNumber *matrix_determinant(decNumber *r, const decNumber *m) {
 3548              		.loc 1 596 65 is_stmt 1 view -0
 3549              		.cfi_startproc
 3550              		@ args = 0, pretend = 0, frame = 1640
 3551              		@ frame_needed = 0, uses_anonymous_args = 0
 597:src/matrix.c  **** 	int n, i;
 3552              		.loc 1 597 2 view .LVU1067
 598:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3553              		.loc 1 598 2 view .LVU1068
 599:src/matrix.c  **** 	decNumber t;
 3554              		.loc 1 599 2 view .LVU1069
 600:src/matrix.c  **** 
 601:src/matrix.c  **** 	n = matrix_lu_check(m, mat, NULL);
 3555              		.loc 1 601 2 view .LVU1070
 596:src/matrix.c  **** 	int n, i;
 3556              		.loc 1 596 65 is_stmt 0 view .LVU1071
 3557 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3558              		.cfi_def_cfa_offset 24
 3559              		.cfi_offset 4, -24
 3560              		.cfi_offset 5, -20
 3561              		.cfi_offset 6, -16
ARM GAS  /tmp/cc0YfLmr.s 			page 90


 3562              		.cfi_offset 7, -12
 3563              		.cfi_offset 8, -8
 3564              		.cfi_offset 14, -4
 3565 0004 0B46     		mov	r3, r1
 3566 0006 ADF5CD6D 		sub	sp, sp, #1640
 3567              		.cfi_def_cfa_offset 1664
 596:src/matrix.c  **** 	int n, i;
 3568              		.loc 1 596 65 view .LVU1072
 3569 000a 0546     		mov	r5, r0
 3570              		.loc 1 601 6 view .LVU1073
 3571 000c 0AA9     		add	r1, sp, #40
 3572              	.LVL413:
 3573              		.loc 1 601 6 view .LVU1074
 3574 000e 1846     		mov	r0, r3
 3575              	.LVL414:
 3576              		.loc 1 601 6 view .LVU1075
 3577 0010 0022     		movs	r2, #0
 3578 0012 FFF7FEFF 		bl	matrix_lu_check
 3579              	.LVL415:
 602:src/matrix.c  **** 	if (n == 0)
 3580              		.loc 1 602 2 is_stmt 1 view .LVU1076
 3581              		.loc 1 602 5 is_stmt 0 view .LVU1077
 3582 0016 0746     		mov	r7, r0
 3583 0018 F0B1     		cbz	r0, .L252
 603:src/matrix.c  **** 		return NULL;
 604:src/matrix.c  **** 
 605:src/matrix.c  **** 	i = LU_decomposition(mat, NULL, n);
 3584              		.loc 1 605 2 is_stmt 1 view .LVU1078
 3585              		.loc 1 605 6 is_stmt 0 view .LVU1079
 3586 001a 0246     		mov	r2, r0
 3587 001c 0021     		movs	r1, #0
 3588 001e 0AA8     		add	r0, sp, #40
 3589              	.LVL416:
 3590              		.loc 1 605 6 view .LVU1080
 3591 0020 FFF7FEFF 		bl	LU_decomposition
 3592              	.LVL417:
 3593              		.loc 1 605 6 view .LVU1081
 3594 0024 0146     		mov	r1, r0
 3595              	.LVL418:
 606:src/matrix.c  **** 
 607:src/matrix.c  **** 	int_to_dn(r, i);
 3596              		.loc 1 607 2 is_stmt 1 view .LVU1082
 3597 0026 2846     		mov	r0, r5
 3598              	.LVL419:
 3599              		.loc 1 607 2 is_stmt 0 view .LVU1083
 3600 0028 FFF7FEFF 		bl	int_to_dn
 3601              	.LVL420:
 608:src/matrix.c  **** 	for (i=0; i<n; i++) {
 3602              		.loc 1 608 2 is_stmt 1 view .LVU1084
 3603              		.loc 1 608 12 view .LVU1085
 3604              		.loc 1 608 2 is_stmt 0 view .LVU1086
 3605 002c 002F     		cmp	r7, #0
 3606 002e 12DD     		ble	.L256
 3607 0030 07F10108 		add	r8, r7, #1
 3608 0034 0AAC     		add	r4, sp, #40
 3609 0036 4FEA0818 		lsl	r8, r8, #4
 3610              		.loc 1 608 8 view .LVU1087
ARM GAS  /tmp/cc0YfLmr.s 			page 91


 3611 003a 0026     		movs	r6, #0
 3612              	.LVL421:
 3613              	.L255:
 609:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3614              		.loc 1 609 3 is_stmt 1 view .LVU1088
 3615              	.LBB151:
 3616              	.LBI151:
 443:src/matrix.c  **** 	decimal128ToNumber(base + matrix_idx(row, col, ncols), r);
 3617              		.loc 1 443 13 view .LVU1089
 3618              	.LBB152:
 444:src/matrix.c  **** }
 3619              		.loc 1 444 2 view .LVU1090
 444:src/matrix.c  **** }
 3620              		.loc 1 444 2 is_stmt 0 view .LVU1091
 3621              	.LBE152:
 3622              	.LBE151:
  27:src/matrix.c  **** }
 3623              		.loc 1 27 2 is_stmt 1 view .LVU1092
 3624              	.LBB154:
 3625              	.LBB153:
 444:src/matrix.c  **** }
 3626              		.loc 1 444 2 is_stmt 0 view .LVU1093
 3627 003c 01A9     		add	r1, sp, #4
 3628              	.LVL422:
 444:src/matrix.c  **** }
 3629              		.loc 1 444 2 view .LVU1094
 3630 003e 2046     		mov	r0, r4
 3631 0040 FFF7FEFF 		bl	decimal128ToNumber
 3632              	.LVL423:
 444:src/matrix.c  **** }
 3633              		.loc 1 444 2 view .LVU1095
 3634              	.LBE153:
 3635              	.LBE154:
 610:src/matrix.c  **** 		dn_multiply(r, r, &t);
 3636              		.loc 1 610 3 is_stmt 1 view .LVU1096
 608:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3637              		.loc 1 608 18 is_stmt 0 view .LVU1097
 3638 0044 0136     		adds	r6, r6, #1
 3639              	.LVL424:
 3640              		.loc 1 610 3 view .LVU1098
 3641 0046 01AA     		add	r2, sp, #4
 3642 0048 2946     		mov	r1, r5
 3643 004a 2846     		mov	r0, r5
 3644 004c FFF7FEFF 		bl	dn_multiply
 3645              	.LVL425:
 608:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3646              		.loc 1 608 17 is_stmt 1 view .LVU1099
 608:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3647              		.loc 1 608 12 view .LVU1100
 608:src/matrix.c  **** 		matrix_get128(&t, mat, i, i, n);
 3648              		.loc 1 608 2 is_stmt 0 view .LVU1101
 3649 0050 B742     		cmp	r7, r6
 3650 0052 4444     		add	r4, r4, r8
 3651 0054 F2D1     		bne	.L255
 3652              	.LVL426:
 3653              	.L256:
 611:src/matrix.c  **** 	}
ARM GAS  /tmp/cc0YfLmr.s 			page 92


 612:src/matrix.c  **** 	return r;
 3654              		.loc 1 612 9 view .LVU1102
 3655 0056 2846     		mov	r0, r5
 3656              	.L252:
 613:src/matrix.c  **** }
 3657              		.loc 1 613 1 view .LVU1103
 3658 0058 0DF5CD6D 		add	sp, sp, #1640
 3659              		.cfi_def_cfa_offset 24
 3660              		@ sp needed
 3661 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3662              		.loc 1 613 1 view .LVU1104
 3663              		.cfi_endproc
 3664              	.LFE26:
 3666              		.section	.text.matrix_inverse,"ax",%progbits
 3667              		.align	1
 3668              		.p2align 2,,3
 3669              		.global	matrix_inverse
 3670              		.syntax unified
 3671              		.thumb
 3672              		.thumb_func
 3673              		.fpu fpv4-sp-d16
 3675              	matrix_inverse:
 3676              	.LVL427:
 3677              	.LFB27:
 614:src/matrix.c  **** 
 615:src/matrix.c  **** /* Invert a matrix in situ.
 616:src/matrix.c  ****  * Do this by calculating the LU decomposition and solving lots of systems
 617:src/matrix.c  ****  * of linear equations.
 618:src/matrix.c  ****  */
 619:src/matrix.c  **** void matrix_inverse(enum nilop op) {
 3678              		.loc 1 619 36 is_stmt 1 view -0
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 2016
 3681              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3682              		.loc 1 620 2 view .LVU1106
 621:src/matrix.c  **** 	decNumber x[MAX_SQUARE];
 3683              		.loc 1 621 2 view .LVU1107
 622:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 3684              		.loc 1 622 2 view .LVU1108
 623:src/matrix.c  **** 	int i, j, n;
 3685              		.loc 1 623 2 view .LVU1109
 624:src/matrix.c  **** 	decimal64 *base;
 3686              		.loc 1 624 2 view .LVU1110
 625:src/matrix.c  **** 	const decimal64 *b[MAX_SQUARE];
 3687              		.loc 1 625 2 view .LVU1111
 626:src/matrix.c  **** 
 627:src/matrix.c  **** 	getX(x);
 3688              		.loc 1 627 2 view .LVU1112
 619:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3689              		.loc 1 619 36 is_stmt 0 view .LVU1113
 3690 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3691              		.cfi_def_cfa_offset 32
 3692              		.cfi_offset 4, -32
 3693              		.cfi_offset 5, -28
 3694              		.cfi_offset 6, -24
 3695              		.cfi_offset 7, -20
ARM GAS  /tmp/cc0YfLmr.s 			page 93


 3696              		.cfi_offset 8, -16
 3697              		.cfi_offset 9, -12
 3698              		.cfi_offset 10, -8
 3699              		.cfi_offset 14, -4
 3700 0004 ADF5FD6D 		sub	sp, sp, #2024
 3701              		.cfi_def_cfa_offset 2056
 3702              		.loc 1 627 2 view .LVU1114
 3703 0008 10A8     		add	r0, sp, #64
 3704              	.LVL428:
 3705              		.loc 1 627 2 view .LVU1115
 3706 000a FFF7FEFF 		bl	getX
 3707              	.LVL429:
 628:src/matrix.c  **** 	n = matrix_lu_check(x, mat, &base);
 3708              		.loc 1 628 2 is_stmt 1 view .LVU1116
 3709              		.loc 1 628 6 is_stmt 0 view .LVU1117
 3710 000e 10A8     		add	r0, sp, #64
 3711 0010 02AA     		add	r2, sp, #8
 3712 0012 6AA9     		add	r1, sp, #424
 3713 0014 FFF7FEFF 		bl	matrix_lu_check
 3714              	.LVL430:
 629:src/matrix.c  **** 	if (n == 0)
 3715              		.loc 1 629 2 is_stmt 1 view .LVU1118
 3716              		.loc 1 629 5 is_stmt 0 view .LVU1119
 3717 0018 18B9     		cbnz	r0, .L275
 3718              	.LVL431:
 3719              	.L260:
 630:src/matrix.c  **** 		return;
 631:src/matrix.c  **** 
 632:src/matrix.c  **** 	i = LU_decomposition(mat, pivots, n);
 633:src/matrix.c  **** 	if (i == 0) {
 634:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 635:src/matrix.c  **** 		return;
 636:src/matrix.c  **** 	}
 637:src/matrix.c  **** 
 638:src/matrix.c  **** 	for (i=0; i<n; i++) {
 639:src/matrix.c  **** 		for (j=0; j<n; j++)
 640:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 641:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 642:src/matrix.c  **** 		for (j=0; j<n; j++)
 643:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 644:src/matrix.c  **** 	}
 645:src/matrix.c  **** }
 3720              		.loc 1 645 1 view .LVU1120
 3721 001a 0DF5FD6D 		add	sp, sp, #2024
 3722              		.cfi_remember_state
 3723              		.cfi_def_cfa_offset 32
 3724              		@ sp needed
 3725 001e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3726              	.LVL432:
 3727              	.L275:
 3728              		.cfi_restore_state
 632:src/matrix.c  **** 	if (i == 0) {
 3729              		.loc 1 632 2 is_stmt 1 view .LVU1121
 3730 0022 0746     		mov	r7, r0
 632:src/matrix.c  **** 	if (i == 0) {
 3731              		.loc 1 632 6 is_stmt 0 view .LVU1122
 3732 0024 0246     		mov	r2, r0
ARM GAS  /tmp/cc0YfLmr.s 			page 94


 3733 0026 03A9     		add	r1, sp, #12
 3734 0028 6AA8     		add	r0, sp, #424
 3735              	.LVL433:
 632:src/matrix.c  **** 	if (i == 0) {
 3736              		.loc 1 632 6 view .LVU1123
 3737 002a FFF7FEFF 		bl	LU_decomposition
 3738              	.LVL434:
 633:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 3739              		.loc 1 633 2 is_stmt 1 view .LVU1124
 633:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 3740              		.loc 1 633 5 is_stmt 0 view .LVU1125
 3741 002e 90B3     		cbz	r0, .L262
 3742              	.LVL435:
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3743              		.loc 1 638 12 is_stmt 1 view .LVU1126
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3744              		.loc 1 638 2 is_stmt 0 view .LVU1127
 3745 0030 002F     		cmp	r7, #0
 3746 0032 F2DD     		ble	.L260
 3747 0034 07EBC708 		add	r8, r7, r7, lsl #3
 3748 0038 10AB     		add	r3, sp, #64
 3749 003a 03EB8808 		add	r8, r3, r8, lsl #2
 3750 003e 4FEAC709 		lsl	r9, r7, #3
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3751              		.loc 1 638 8 view .LVU1128
 3752 0042 0026     		movs	r6, #0
 3753              	.LVL436:
 3754              	.L263:
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3755              		.loc 1 639 13 is_stmt 1 view .LVU1129
 3756 0044 06AC     		add	r4, sp, #24
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3757              		.loc 1 639 9 is_stmt 0 view .LVU1130
 3758 0046 0025     		movs	r5, #0
 3759 0048 00E0     		b	.L267
 3760              	.LVL437:
 3761              	.L269:
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3762              		.loc 1 639 9 view .LVU1131
 3763 004a 1D46     		mov	r5, r3
 3764              	.LVL438:
 3765              	.L267:
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3766              		.loc 1 640 4 is_stmt 1 view .LVU1132
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3767              		.loc 1 640 9 is_stmt 0 view .LVU1133
 3768 004c B542     		cmp	r5, r6
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3769              		.loc 1 640 34 view .LVU1134
 3770 004e 0CBF     		ite	eq
 3771 0050 4C20     		moveq	r0, #76
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3772              		.loc 1 640 71 view .LVU1135
 3773 0052 4B20     		movne	r0, #75
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3774              		.loc 1 640 34 view .LVU1136
 3775 0054 0021     		movs	r1, #0
ARM GAS  /tmp/cc0YfLmr.s 			page 95


 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3776              		.loc 1 640 71 view .LVU1137
 3777 0056 FFF7FEFF 		bl	get_const
 3778              	.LVL439:
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3779              		.loc 1 639 19 view .LVU1138
 3780 005a 6B1C     		adds	r3, r5, #1
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3781              		.loc 1 639 3 view .LVU1139
 3782 005c 9F42     		cmp	r7, r3
 640:src/matrix.c  **** 		matrix_pivoting_solve(mat, b, pivots, x, n);
 3783              		.loc 1 640 9 view .LVU1140
 3784 005e 44F8040B 		str	r0, [r4], #4
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3785              		.loc 1 639 18 is_stmt 1 view .LVU1141
 3786              	.LVL440:
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3787              		.loc 1 639 13 view .LVU1142
 639:src/matrix.c  **** 			b[j] = (i==j) ? (decimal64 *) get_const(OP_ONE, 0) : (decimal64 *) get_const(OP_ZERO, 0);
 3788              		.loc 1 639 3 is_stmt 0 view .LVU1143
 3789 0062 F2D1     		bne	.L269
 641:src/matrix.c  **** 		for (j=0; j<n; j++)
 3790              		.loc 1 641 3 is_stmt 1 view .LVU1144
 3791 0064 0097     		str	r7, [sp]
 3792 0066 10AB     		add	r3, sp, #64
 3793              	.LVL441:
 641:src/matrix.c  **** 		for (j=0; j<n; j++)
 3794              		.loc 1 641 3 is_stmt 0 view .LVU1145
 3795 0068 03AA     		add	r2, sp, #12
 3796 006a 06A9     		add	r1, sp, #24
 3797 006c 6AA8     		add	r0, sp, #424
 3798 006e FFF7FEFF 		bl	matrix_pivoting_solve
 3799              	.LVL442:
 642:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3800              		.loc 1 642 3 is_stmt 1 view .LVU1146
 642:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3801              		.loc 1 642 13 view .LVU1147
 3802 0072 4FEAC60A 		lsl	r10, r6, #3
 641:src/matrix.c  **** 		for (j=0; j<n; j++)
 3803              		.loc 1 641 3 is_stmt 0 view .LVU1148
 3804 0076 10AC     		add	r4, sp, #64
 3805              	.LVL443:
 3806              	.L268:
 643:src/matrix.c  **** 	}
 3807              		.loc 1 643 4 is_stmt 1 discriminator 3 view .LVU1149
  27:src/matrix.c  **** }
 3808              		.loc 1 27 2 discriminator 3 view .LVU1150
 643:src/matrix.c  **** 	}
 3809              		.loc 1 643 4 is_stmt 0 discriminator 3 view .LVU1151
 3810 0078 0298     		ldr	r0, [sp, #8]
 3811 007a 2146     		mov	r1, r4
 3812 007c 5044     		add	r0, r0, r10
 3813 007e 2434     		adds	r4, r4, #36
 3814 0080 FFF7FEFF 		bl	packed_from_number
 3815              	.LVL444:
 642:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3816              		.loc 1 642 18 is_stmt 1 discriminator 3 view .LVU1152
ARM GAS  /tmp/cc0YfLmr.s 			page 96


 642:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3817              		.loc 1 642 13 discriminator 3 view .LVU1153
 642:src/matrix.c  **** 			packed_from_number(base + matrix_idx(j, i, n), x+j);
 3818              		.loc 1 642 3 is_stmt 0 discriminator 3 view .LVU1154
 3819 0084 4445     		cmp	r4, r8
 3820 0086 CA44     		add	r10, r10, r9
 3821 0088 F6D1     		bne	.L268
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3822              		.loc 1 638 17 is_stmt 1 discriminator 2 view .LVU1155
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3823              		.loc 1 638 2 is_stmt 0 discriminator 2 view .LVU1156
 3824 008a B542     		cmp	r5, r6
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3825              		.loc 1 638 18 discriminator 2 view .LVU1157
 3826 008c 06F10103 		add	r3, r6, #1
 3827              	.LVL445:
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3828              		.loc 1 638 12 is_stmt 1 discriminator 2 view .LVU1158
 638:src/matrix.c  **** 		for (j=0; j<n; j++)
 3829              		.loc 1 638 2 is_stmt 0 discriminator 2 view .LVU1159
 3830 0090 C3D0     		beq	.L260
 3831 0092 1E46     		mov	r6, r3
 3832 0094 D6E7     		b	.L263
 3833              	.LVL446:
 3834              	.L262:
 634:src/matrix.c  **** 		return;
 3835              		.loc 1 634 3 is_stmt 1 view .LVU1160
 3836 0096 1620     		movs	r0, #22
 3837              	.LVL447:
 634:src/matrix.c  **** 		return;
 3838              		.loc 1 634 3 is_stmt 0 view .LVU1161
 3839 0098 FFF7FEFF 		bl	report_err
 3840              	.LVL448:
 635:src/matrix.c  **** 	}
 3841              		.loc 1 635 3 is_stmt 1 view .LVU1162
 3842 009c BDE7     		b	.L260
 3843              		.cfi_endproc
 3844              	.LFE27:
 3846 009e 00BF     		.section	.text.matrix_linear_eqn,"ax",%progbits
 3847              		.align	1
 3848              		.p2align 2,,3
 3849              		.global	matrix_linear_eqn
 3850              		.syntax unified
 3851              		.thumb
 3852              		.thumb_func
 3853              		.fpu fpv4-sp-d16
 3855              	matrix_linear_eqn:
 3856              	.LVL449:
 3857              	.LFB28:
 646:src/matrix.c  **** 
 647:src/matrix.c  **** /* Solve a system of linear equations Ac = b
 648:src/matrix.c  ****  */
 649:src/matrix.c  **** decNumber *matrix_linear_eqn(decNumber *r, const decNumber *a, const decNumber *b, const decNumber 
 3858              		.loc 1 649 104 view -0
 3859              		.cfi_startproc
 3860              		@ args = 0, pretend = 0, frame = 2024
 3861              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0YfLmr.s 			page 97


 650:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3862              		.loc 1 650 2 view .LVU1164
 651:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 3863              		.loc 1 651 2 view .LVU1165
 652:src/matrix.c  **** 	decimal64 *bbase, *cbase;
 3864              		.loc 1 652 2 view .LVU1166
 653:src/matrix.c  **** 	decNumber cv[MAX_SQUARE];
 3865              		.loc 1 653 2 view .LVU1167
 654:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 3866              		.loc 1 654 2 view .LVU1168
 655:src/matrix.c  **** 	const decimal64 *bv[MAX_SQUARE];
 3867              		.loc 1 655 2 view .LVU1169
 656:src/matrix.c  **** 
 657:src/matrix.c  **** 	n = matrix_lu_check(a, mat, NULL);
 3868              		.loc 1 657 2 view .LVU1170
 649:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3869              		.loc 1 649 104 is_stmt 0 view .LVU1171
 3870 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3871              		.cfi_def_cfa_offset 28
 3872              		.cfi_offset 4, -28
 3873              		.cfi_offset 5, -24
 3874              		.cfi_offset 6, -20
 3875              		.cfi_offset 7, -16
 3876              		.cfi_offset 8, -12
 3877              		.cfi_offset 9, -8
 3878              		.cfi_offset 14, -4
 3879 0004 ADF2F47D 		subw	sp, sp, #2036
 3880              		.cfi_def_cfa_offset 2064
 649:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3881              		.loc 1 649 104 view .LVU1172
 3882 0008 0646     		mov	r6, r0
 3883 000a 1446     		mov	r4, r2
 3884              		.loc 1 657 6 view .LVU1173
 3885 000c 0846     		mov	r0, r1
 3886              	.LVL450:
 3887              		.loc 1 657 6 view .LVU1174
 3888 000e 0022     		movs	r2, #0
 3889              	.LVL451:
 3890              		.loc 1 657 6 view .LVU1175
 3891 0010 6CA9     		add	r1, sp, #432
 3892              	.LVL452:
 649:src/matrix.c  **** 	int n, i, brows, bcols, creg;
 3893              		.loc 1 649 104 view .LVU1176
 3894 0012 1D46     		mov	r5, r3
 3895              		.loc 1 657 6 view .LVU1177
 3896 0014 FFF7FEFF 		bl	matrix_lu_check
 3897              	.LVL453:
 658:src/matrix.c  **** 	if (n == 0)
 3898              		.loc 1 658 2 is_stmt 1 view .LVU1178
 3899              		.loc 1 658 5 is_stmt 0 view .LVU1179
 3900 0018 0028     		cmp	r0, #0
 3901 001a 50D0     		beq	.L300
 659:src/matrix.c  **** 		return NULL;
 660:src/matrix.c  **** 
 661:src/matrix.c  **** 	bbase = matrix_decomp(b, &brows, &bcols);
 3902              		.loc 1 661 2 is_stmt 1 view .LVU1180
 3903 001c 0746     		mov	r7, r0
ARM GAS  /tmp/cc0YfLmr.s 			page 98


 3904              		.loc 1 661 10 is_stmt 0 view .LVU1181
 3905 001e 04AA     		add	r2, sp, #16
 3906 0020 2046     		mov	r0, r4
 3907              	.LVL454:
 3908              		.loc 1 661 10 view .LVU1182
 3909 0022 03A9     		add	r1, sp, #12
 3910 0024 FFF7FEFF 		bl	matrix_decomp
 3911              	.LVL455:
 662:src/matrix.c  **** 	if (bbase == NULL)
 3912              		.loc 1 662 2 is_stmt 1 view .LVU1183
 3913              		.loc 1 662 5 is_stmt 0 view .LVU1184
 3914 0028 0446     		mov	r4, r0
 3915              	.LVL456:
 3916              		.loc 1 662 5 view .LVU1185
 3917 002a 0028     		cmp	r0, #0
 3918 002c 47D0     		beq	.L300
 663:src/matrix.c  **** 		return NULL;
 664:src/matrix.c  **** 	if (brows != n || bcols != 1) {
 3919              		.loc 1 664 2 is_stmt 1 view .LVU1186
 3920              		.loc 1 664 5 is_stmt 0 view .LVU1187
 3921 002e DDF80C80 		ldr	r8, [sp, #12]
 3922 0032 B845     		cmp	r8, r7
 3923 0034 40D1     		bne	.L280
 3924              		.loc 1 664 17 discriminator 1 view .LVU1188
 3925 0036 DDF81090 		ldr	r9, [sp, #16]
 3926 003a B9F1010F 		cmp	r9, #1
 3927 003e 3BD1     		bne	.L280
 665:src/matrix.c  **** 		report_err(ERR_MATRIX_DIM);
 666:src/matrix.c  **** 		return NULL;
 667:src/matrix.c  **** 	}
 668:src/matrix.c  **** 
 669:src/matrix.c  **** 	creg = dn_to_int(c);
 3928              		.loc 1 669 2 is_stmt 1 view .LVU1189
 3929              		.loc 1 669 9 is_stmt 0 view .LVU1190
 3930 0040 2846     		mov	r0, r5
 3931              	.LVL457:
 3932              		.loc 1 669 9 view .LVU1191
 3933 0042 FFF7FEFF 		bl	dn_to_int
 3934              	.LVL458:
 670:src/matrix.c  **** 	if (matrix_descriptor(r, creg, n, 1) == 0)
 3935              		.loc 1 670 6 view .LVU1192
 3936 0046 4B46     		mov	r3, r9
 669:src/matrix.c  **** 	if (matrix_descriptor(r, creg, n, 1) == 0)
 3937              		.loc 1 669 9 view .LVU1193
 3938 0048 0546     		mov	r5, r0
 3939              	.LVL459:
 3940              		.loc 1 670 2 is_stmt 1 view .LVU1194
 3941              		.loc 1 670 6 is_stmt 0 view .LVU1195
 3942 004a 0146     		mov	r1, r0
 3943 004c 4246     		mov	r2, r8
 3944 004e 3046     		mov	r0, r6
 3945              	.LVL460:
 3946              		.loc 1 670 6 view .LVU1196
 3947 0050 FFF7FEFF 		bl	matrix_descriptor
 3948              	.LVL461:
 3949              		.loc 1 670 5 view .LVU1197
 3950 0054 98B3     		cbz	r0, .L300
ARM GAS  /tmp/cc0YfLmr.s 			page 99


 671:src/matrix.c  **** 		return NULL;
 672:src/matrix.c  **** 	cbase = &(get_reg_n(creg)->s);
 3951              		.loc 1 672 2 is_stmt 1 view .LVU1198
 3952              		.loc 1 672 12 is_stmt 0 view .LVU1199
 3953 0056 2846     		mov	r0, r5
 3954 0058 FFF7FEFF 		bl	get_reg_n
 3955              	.LVL462:
 673:src/matrix.c  **** 
 674:src/matrix.c  **** 	/* Everything is happy so far -- decompose */
 675:src/matrix.c  **** 	i = LU_decomposition(mat, pivots, n);
 3956              		.loc 1 675 6 view .LVU1200
 3957 005c 05A9     		add	r1, sp, #20
 672:src/matrix.c  **** 
 3958              		.loc 1 672 12 view .LVU1201
 3959 005e 0546     		mov	r5, r0
 3960              	.LVL463:
 3961              		.loc 1 675 6 view .LVU1202
 3962 0060 4246     		mov	r2, r8
 3963 0062 6CA8     		add	r0, sp, #432
 3964              	.LVL464:
 3965              		.loc 1 675 2 is_stmt 1 view .LVU1203
 3966              		.loc 1 675 6 is_stmt 0 view .LVU1204
 3967 0064 FFF7FEFF 		bl	LU_decomposition
 3968              	.LVL465:
 676:src/matrix.c  **** 	if (i == 0) {
 3969              		.loc 1 676 2 is_stmt 1 view .LVU1205
 3970              		.loc 1 676 5 is_stmt 0 view .LVU1206
 3971 0068 8146     		mov	r9, r0
 3972 006a 68B3     		cbz	r0, .L282
 3973              	.LVL466:
 677:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 678:src/matrix.c  **** 		return NULL;
 679:src/matrix.c  **** 	}
 680:src/matrix.c  **** 
 681:src/matrix.c  **** 	/* And solve */
 682:src/matrix.c  **** 	for (i=0; i<n; i++)
 3974              		.loc 1 682 12 is_stmt 1 view .LVU1207
 3975              		.loc 1 682 2 is_stmt 0 view .LVU1208
 3976 006c B8F1000F 		cmp	r8, #0
 3977 0070 2FDD     		ble	.L301
 3978 0072 04EBC701 		add	r1, r4, r7, lsl #3
 3979 0076 08AA     		add	r2, sp, #32
 3980 0078 4FEAC70C 		lsl	ip, r7, #3
 3981              	.LVL467:
 3982              	.L285:
 683:src/matrix.c  **** 		bv[i] = bbase + i;
 3983              		.loc 1 683 3 is_stmt 1 discriminator 3 view .LVU1209
 3984              		.loc 1 683 9 is_stmt 0 discriminator 3 view .LVU1210
 3985 007c 42F8044B 		str	r4, [r2], #4
 682:src/matrix.c  **** 		bv[i] = bbase + i;
 3986              		.loc 1 682 17 is_stmt 1 discriminator 3 view .LVU1211
 682:src/matrix.c  **** 		bv[i] = bbase + i;
 3987              		.loc 1 682 12 discriminator 3 view .LVU1212
 3988 0080 0834     		adds	r4, r4, #8
 682:src/matrix.c  **** 		bv[i] = bbase + i;
 3989              		.loc 1 682 2 is_stmt 0 discriminator 3 view .LVU1213
 3990 0082 8C42     		cmp	r4, r1
ARM GAS  /tmp/cc0YfLmr.s 			page 100


 3991 0084 FAD1     		bne	.L285
 684:src/matrix.c  **** 	matrix_pivoting_solve(mat, bv, pivots, cv, n);
 3992              		.loc 1 684 2 is_stmt 1 view .LVU1214
 3993 0086 0097     		str	r7, [sp]
 3994 0088 05AA     		add	r2, sp, #20
 3995 008a 08A9     		add	r1, sp, #32
 3996 008c 6CA8     		add	r0, sp, #432
 3997 008e 12AB     		add	r3, sp, #72
 3998 0090 05EB0C07 		add	r7, r5, ip
 3999              	.LVL468:
 4000              		.loc 1 684 2 is_stmt 0 view .LVU1215
 4001 0094 FFF7FEFF 		bl	matrix_pivoting_solve
 4002              	.LVL469:
 685:src/matrix.c  **** 	for (i=0; i<n; i++)
 4003              		.loc 1 685 2 is_stmt 1 view .LVU1216
 4004              		.loc 1 685 12 view .LVU1217
 4005 0098 2C46     		mov	r4, r5
 4006 009a 12AD     		add	r5, sp, #72
 4007              	.LVL470:
 4008              	.L287:
 686:src/matrix.c  **** 		packed_from_number(cbase+i, cv+i);
 4009              		.loc 1 686 3 discriminator 3 view .LVU1218
 4010 009c 2946     		mov	r1, r5
 4011 009e 2046     		mov	r0, r4
 4012 00a0 0834     		adds	r4, r4, #8
 4013 00a2 FFF7FEFF 		bl	packed_from_number
 4014              	.LVL471:
 685:src/matrix.c  **** 	for (i=0; i<n; i++)
 4015              		.loc 1 685 17 discriminator 3 view .LVU1219
 685:src/matrix.c  **** 	for (i=0; i<n; i++)
 4016              		.loc 1 685 12 discriminator 3 view .LVU1220
 685:src/matrix.c  **** 	for (i=0; i<n; i++)
 4017              		.loc 1 685 2 is_stmt 0 discriminator 3 view .LVU1221
 4018 00a6 BC42     		cmp	r4, r7
 4019 00a8 05F12405 		add	r5, r5, #36
 4020 00ac F6D1     		bne	.L287
 685:src/matrix.c  **** 	for (i=0; i<n; i++)
 4021              		.loc 1 685 2 is_stmt 1 view .LVU1222
 4022              	.LVL472:
 685:src/matrix.c  **** 	for (i=0; i<n; i++)
 4023              		.loc 1 685 12 view .LVU1223
 687:src/matrix.c  **** 	return r;
 4024              		.loc 1 687 9 is_stmt 0 view .LVU1224
 4025 00ae 3046     		mov	r0, r6
 4026              	.LVL473:
 4027              	.L302:
 688:src/matrix.c  **** }
 4028              		.loc 1 688 1 view .LVU1225
 4029 00b0 0DF2F47D 		addw	sp, sp, #2036
 4030              		.cfi_remember_state
 4031              		.cfi_def_cfa_offset 28
 4032              		@ sp needed
 4033 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4034              	.LVL474:
 4035              	.L280:
 4036              		.cfi_restore_state
 665:src/matrix.c  **** 		return NULL;
ARM GAS  /tmp/cc0YfLmr.s 			page 101


 4037              		.loc 1 665 3 is_stmt 1 view .LVU1226
 4038 00b8 1520     		movs	r0, #21
 4039              	.LVL475:
 665:src/matrix.c  **** 		return NULL;
 4040              		.loc 1 665 3 is_stmt 0 view .LVU1227
 4041 00ba FFF7FEFF 		bl	report_err
 4042              	.LVL476:
 4043              	.L300:
 666:src/matrix.c  **** 	}
 4044              		.loc 1 666 3 is_stmt 1 view .LVU1228
 666:src/matrix.c  **** 	}
 4045              		.loc 1 666 10 is_stmt 0 view .LVU1229
 4046 00be 0020     		movs	r0, #0
 4047              	.L276:
 4048              		.loc 1 688 1 view .LVU1230
 4049 00c0 0DF2F47D 		addw	sp, sp, #2036
 4050              		.cfi_remember_state
 4051              		.cfi_def_cfa_offset 28
 4052              		@ sp needed
 4053 00c4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4054              	.LVL477:
 4055              	.L282:
 4056              		.cfi_restore_state
 677:src/matrix.c  **** 		return NULL;
 4057              		.loc 1 677 3 is_stmt 1 view .LVU1231
 4058 00c8 1620     		movs	r0, #22
 4059              	.LVL478:
 677:src/matrix.c  **** 		return NULL;
 4060              		.loc 1 677 3 is_stmt 0 view .LVU1232
 4061 00ca FFF7FEFF 		bl	report_err
 4062              	.LVL479:
 678:src/matrix.c  **** 	}
 4063              		.loc 1 678 3 is_stmt 1 view .LVU1233
 678:src/matrix.c  **** 	}
 4064              		.loc 1 678 10 is_stmt 0 view .LVU1234
 4065 00ce 4846     		mov	r0, r9
 4066 00d0 F6E7     		b	.L276
 4067              	.LVL480:
 4068              	.L301:
 684:src/matrix.c  **** 	for (i=0; i<n; i++)
 4069              		.loc 1 684 2 is_stmt 1 view .LVU1235
 4070 00d2 6CA8     		add	r0, sp, #432
 4071 00d4 CDF80080 		str	r8, [sp]
 4072 00d8 05AA     		add	r2, sp, #20
 4073 00da 12AB     		add	r3, sp, #72
 4074 00dc 08A9     		add	r1, sp, #32
 4075 00de FFF7FEFF 		bl	matrix_pivoting_solve
 4076              	.LVL481:
 685:src/matrix.c  **** 		packed_from_number(cbase+i, cv+i);
 4077              		.loc 1 685 2 view .LVU1236
 685:src/matrix.c  **** 		packed_from_number(cbase+i, cv+i);
 4078              		.loc 1 685 12 view .LVU1237
 687:src/matrix.c  **** }
 4079              		.loc 1 687 9 is_stmt 0 view .LVU1238
 4080 00e2 3046     		mov	r0, r6
 4081 00e4 E4E7     		b	.L302
 4082              		.cfi_endproc
ARM GAS  /tmp/cc0YfLmr.s 			page 102


 4083              	.LFE28:
 4085 00e6 00BF     		.section	.text.matrix_lu_decomp,"ax",%progbits
 4086              		.align	1
 4087              		.p2align 2,,3
 4088              		.global	matrix_lu_decomp
 4089              		.syntax unified
 4090              		.thumb
 4091              		.thumb_func
 4092              		.fpu fpv4-sp-d16
 4094              	matrix_lu_decomp:
 4095              	.LVL482:
 4096              	.LFB29:
 689:src/matrix.c  **** 
 690:src/matrix.c  **** #ifdef MATRIX_LU_DECOMP
 691:src/matrix.c  **** /* Perform an in-situ LU decomposition of a user's matrix.
 692:src/matrix.c  ****  * Return the pivot descriptor.
 693:src/matrix.c  ****  */
 694:src/matrix.c  **** decNumber *matrix_lu_decomp(decNumber *r, const decNumber *m) {
 4097              		.loc 1 694 63 is_stmt 1 view -0
 4098              		.cfi_startproc
 4099              		@ args = 0, pretend = 0, frame = 1688
 4100              		@ frame_needed = 0, uses_anonymous_args = 0
 695:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4101              		.loc 1 695 2 view .LVU1240
 696:src/matrix.c  **** 	int i, sign, n;
 4102              		.loc 1 696 2 view .LVU1241
 697:src/matrix.c  **** 	decNumber t, u;
 4103              		.loc 1 697 2 view .LVU1242
 698:src/matrix.c  **** 	decimal128 mat[MAX_SQUARE*MAX_SQUARE];
 4104              		.loc 1 698 2 view .LVU1243
 699:src/matrix.c  **** 	decimal64 *base;
 4105              		.loc 1 699 2 view .LVU1244
 700:src/matrix.c  **** 
 701:src/matrix.c  **** 	n = matrix_lu_check(m, mat, &base);
 4106              		.loc 1 701 2 view .LVU1245
 694:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4107              		.loc 1 694 63 is_stmt 0 view .LVU1246
 4108 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4109              		.cfi_def_cfa_offset 20
 4110              		.cfi_offset 4, -20
 4111              		.cfi_offset 5, -16
 4112              		.cfi_offset 6, -12
 4113              		.cfi_offset 7, -8
 4114              		.cfi_offset 14, -4
 4115 0002 ADF29C6D 		subw	sp, sp, #1692
 4116              		.cfi_def_cfa_offset 1712
 694:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4117              		.loc 1 694 63 view .LVU1247
 4118 0006 0646     		mov	r6, r0
 4119              		.loc 1 701 6 view .LVU1248
 4120 0008 6A46     		mov	r2, sp
 4121 000a 0846     		mov	r0, r1
 4122              	.LVL483:
 4123              		.loc 1 701 6 view .LVU1249
 4124 000c 16A9     		add	r1, sp, #88
 4125              	.LVL484:
 4126              		.loc 1 701 6 view .LVU1250
ARM GAS  /tmp/cc0YfLmr.s 			page 103


 4127 000e FFF7FEFF 		bl	matrix_lu_check
 4128              	.LVL485:
 702:src/matrix.c  **** 	if (n == 0)
 4129              		.loc 1 702 2 is_stmt 1 view .LVU1251
 4130              		.loc 1 702 5 is_stmt 0 view .LVU1252
 4131 0012 0746     		mov	r7, r0
 4132 0014 88B3     		cbz	r0, .L311
 703:src/matrix.c  **** 		return NULL;
 704:src/matrix.c  **** 
 705:src/matrix.c  **** 	sign = LU_decomposition(mat, pivots, n);
 4133              		.loc 1 705 2 is_stmt 1 view .LVU1253
 4134              		.loc 1 705 9 is_stmt 0 view .LVU1254
 4135 0016 0246     		mov	r2, r0
 4136 0018 01A9     		add	r1, sp, #4
 4137 001a 16A8     		add	r0, sp, #88
 4138              	.LVL486:
 4139              		.loc 1 705 9 view .LVU1255
 4140 001c FFF7FEFF 		bl	LU_decomposition
 4141              	.LVL487:
 706:src/matrix.c  **** 	if (sign == 0) {
 4142              		.loc 1 706 2 is_stmt 1 view .LVU1256
 4143              		.loc 1 706 5 is_stmt 0 view .LVU1257
 4144 0020 0346     		mov	r3, r0
 4145 0022 78B3     		cbz	r0, .L317
 707:src/matrix.c  **** 		report_err(ERR_SINGULAR);
 708:src/matrix.c  **** 		return NULL;
 709:src/matrix.c  **** 	}
 710:src/matrix.c  **** 
 711:src/matrix.c  **** 	/* Build the pivot number */
 712:src/matrix.c  **** 	decNumberZero(r);
 4146              		.loc 1 712 2 is_stmt 1 view .LVU1258
 4147 0024 3046     		mov	r0, r6
 4148              	.LVL488:
 4149              		.loc 1 712 2 is_stmt 0 view .LVU1259
 4150 0026 FFF7FEFF 		bl	decNumberZero
 4151              	.LVL489:
 713:src/matrix.c  **** 	for (i=0; i<n; i++) {
 4152              		.loc 1 713 2 is_stmt 1 view .LVU1260
 4153              		.loc 1 713 12 view .LVU1261
 4154              		.loc 1 713 2 is_stmt 0 view .LVU1262
 4155 002a 002F     		cmp	r7, #0
 4156 002c 12DD     		ble	.L306
 4157 002e 01AC     		add	r4, sp, #4
 4158 0030 E519     		adds	r5, r4, r7
 4159              	.LVL490:
 4160              	.L307:
 714:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4161              		.loc 1 714 3 is_stmt 1 discriminator 3 view .LVU1263
 4162 0032 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 4163              	.LVL491:
 4164              		.loc 1 714 3 is_stmt 0 discriminator 3 view .LVU1264
 4165 0036 04A8     		add	r0, sp, #16
 4166 0038 FFF7FEFF 		bl	int_to_dn
 4167              	.LVL492:
 715:src/matrix.c  **** 		dn_mulpow10(&u, r, 1);
 4168              		.loc 1 715 3 is_stmt 1 discriminator 3 view .LVU1265
 4169 003c 0122     		movs	r2, #1
ARM GAS  /tmp/cc0YfLmr.s 			page 104


 4170 003e 3146     		mov	r1, r6
 4171 0040 0DA8     		add	r0, sp, #52
 4172 0042 FFF7FEFF 		bl	dn_mulpow10
 4173              	.LVL493:
 716:src/matrix.c  **** 		dn_add(r, &u, &t);
 4174              		.loc 1 716 3 discriminator 3 view .LVU1266
 4175 0046 04AA     		add	r2, sp, #16
 4176 0048 0DA9     		add	r1, sp, #52
 4177 004a 3046     		mov	r0, r6
 4178 004c FFF7FEFF 		bl	dn_add
 4179              	.LVL494:
 713:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4180              		.loc 1 713 17 discriminator 3 view .LVU1267
 713:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4181              		.loc 1 713 12 discriminator 3 view .LVU1268
 713:src/matrix.c  **** 		int_to_dn(&t, pivots[i]);
 4182              		.loc 1 713 2 is_stmt 0 discriminator 3 view .LVU1269
 4183 0050 AC42     		cmp	r4, r5
 4184 0052 EED1     		bne	.L307
 4185              	.LVL495:
 4186              	.L306:
 717:src/matrix.c  **** 	}
 718:src/matrix.c  **** 
 719:src/matrix.c  **** 	/* Copy the result back over the matrix */
 720:src/matrix.c  **** 	for (i=0; i<n*n; i++) {
 4187              		.loc 1 720 12 is_stmt 1 view .LVU1270
 4188              		.loc 1 720 15 is_stmt 0 view .LVU1271
 4189 0054 07FB07F7 		mul	r7, r7, r7
 4190              	.LVL496:
 4191              		.loc 1 720 15 view .LVU1272
 4192 0058 16AD     		add	r5, sp, #88
 694:src/matrix.c  **** 	unsigned char pivots[MAX_SQUARE];
 4193              		.loc 1 694 63 view .LVU1273
 4194 005a 0024     		movs	r4, #0
 4195              	.LVL497:
 4196              	.L309:
 721:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4197              		.loc 1 721 3 is_stmt 1 discriminator 3 view .LVU1274
 4198 005c 0098     		ldr	r0, [sp]
 4199 005e 2946     		mov	r1, r5
 4200 0060 00EBC400 		add	r0, r0, r4, lsl #3
 720:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4201              		.loc 1 720 20 is_stmt 0 discriminator 3 view .LVU1275
 4202 0064 0134     		adds	r4, r4, #1
 4203              	.LVL498:
 4204              		.loc 1 721 3 discriminator 3 view .LVU1276
 4205 0066 FFF7FEFF 		bl	packed_from_packed128
 4206              	.LVL499:
 720:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4207              		.loc 1 720 19 is_stmt 1 discriminator 3 view .LVU1277
 720:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4208              		.loc 1 720 12 discriminator 3 view .LVU1278
 720:src/matrix.c  **** 		packed_from_packed128(base+i, mat+i);
 4209              		.loc 1 720 2 is_stmt 0 discriminator 3 view .LVU1279
 4210 006a A742     		cmp	r7, r4
 4211 006c 05F11005 		add	r5, r5, #16
 4212 0070 F4DC     		bgt	.L309
ARM GAS  /tmp/cc0YfLmr.s 			page 105


 722:src/matrix.c  **** 	}
 723:src/matrix.c  **** 	return r;
 724:src/matrix.c  **** }
 4213              		.loc 1 724 1 view .LVU1280
 4214 0072 3046     		mov	r0, r6
 4215 0074 0DF29C6D 		addw	sp, sp, #1692
 4216              		.cfi_remember_state
 4217              		.cfi_def_cfa_offset 20
 4218              		@ sp needed
 4219 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 4220              	.LVL500:
 4221              	.L311:
 4222              		.cfi_restore_state
 703:src/matrix.c  **** 
 4223              		.loc 1 703 10 view .LVU1281
 4224 007a 0646     		mov	r6, r0
 4225              	.LVL501:
 4226              		.loc 1 724 1 view .LVU1282
 4227 007c 3046     		mov	r0, r6
 4228              	.LVL502:
 4229              		.loc 1 724 1 view .LVU1283
 4230 007e 0DF29C6D 		addw	sp, sp, #1692
 4231              		.cfi_remember_state
 4232              		.cfi_def_cfa_offset 20
 4233              		@ sp needed
 4234 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 4235              	.LVL503:
 4236              	.L317:
 4237              		.cfi_restore_state
 707:src/matrix.c  **** 		return NULL;
 4238              		.loc 1 707 3 is_stmt 1 view .LVU1284
 4239 0084 1620     		movs	r0, #22
 4240              	.LVL504:
 708:src/matrix.c  **** 	}
 4241              		.loc 1 708 10 is_stmt 0 view .LVU1285
 4242 0086 1E46     		mov	r6, r3
 4243              	.LVL505:
 707:src/matrix.c  **** 		return NULL;
 4244              		.loc 1 707 3 view .LVU1286
 4245 0088 FFF7FEFF 		bl	report_err
 4246              	.LVL506:
 708:src/matrix.c  **** 	}
 4247              		.loc 1 708 3 is_stmt 1 view .LVU1287
 4248              		.loc 1 724 1 is_stmt 0 view .LVU1288
 4249 008c 3046     		mov	r0, r6
 4250 008e 0DF29C6D 		addw	sp, sp, #1692
 4251              		.cfi_def_cfa_offset 20
 4252              		@ sp needed
 4253 0092 F0BD     		pop	{r4, r5, r6, r7, pc}
 4254              		.loc 1 724 1 view .LVU1289
 4255              		.cfi_endproc
 4256              	.LFE29:
 4258              		.text
 4259              	.Letext0:
 4260              		.file 2 "src/decNumber/decContext.h"
 4261              		.file 3 "src/decNumber/decNumber.h"
 4262              		.file 4 "src/decNumber/decimal64.h"
ARM GAS  /tmp/cc0YfLmr.s 			page 106


 4263              		.file 5 "src/decNumber/decimal128.h"
 4264              		.file 6 "src/xeq.h"
 4265              		.file 7 "src/data.h"
 4266              		.file 8 "src/consts.h"
 4267              		.file 9 "src/storage.h"
 4268              		.file 10 "src/decn.h"
ARM GAS  /tmp/cc0YfLmr.s 			page 107


DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/cc0YfLmr.s:18     .text.matrix_range_check:0000000000000000 $t
     /tmp/cc0YfLmr.s:26     .text.matrix_range_check:0000000000000000 matrix_range_check
     /tmp/cc0YfLmr.s:145    .text.matrix_range_check:0000000000000074 $d
     /tmp/cc0YfLmr.s:150    .text.matrix_decompose:0000000000000000 $t
     /tmp/cc0YfLmr.s:157    .text.matrix_decompose:0000000000000000 matrix_decompose
     /tmp/cc0YfLmr.s:336    .text.matrix_decompose:000000000000009c $d
     /tmp/cc0YfLmr.s:342    .text.matrix_decomp:0000000000000000 $t
     /tmp/cc0YfLmr.s:349    .text.matrix_decomp:0000000000000000 matrix_decomp
     /tmp/cc0YfLmr.s:387    .text.matrix_do_loop:0000000000000000 $t
     /tmp/cc0YfLmr.s:394    .text.matrix_do_loop:0000000000000000 matrix_do_loop
     /tmp/cc0YfLmr.s:468    .text.matrix_lu_check:0000000000000000 $t
     /tmp/cc0YfLmr.s:475    .text.matrix_lu_check:0000000000000000 matrix_lu_check
     /tmp/cc0YfLmr.s:593    .text.LU_decomposition:0000000000000000 $t
     /tmp/cc0YfLmr.s:600    .text.LU_decomposition:0000000000000000 LU_decomposition
     /tmp/cc0YfLmr.s:1186   .text.matrix_pivoting_solve:0000000000000000 $t
     /tmp/cc0YfLmr.s:1193   .text.matrix_pivoting_solve:0000000000000000 matrix_pivoting_solve
     /tmp/cc0YfLmr.s:1481   .text.matrix_descriptor:0000000000000000 $t
     /tmp/cc0YfLmr.s:1488   .text.matrix_descriptor:0000000000000000 matrix_descriptor
     /tmp/cc0YfLmr.s:1565   .text.matrix_is_square:0000000000000000 $t
     /tmp/cc0YfLmr.s:1573   .text.matrix_is_square:0000000000000000 matrix_is_square
     /tmp/cc0YfLmr.s:1623   .text.matrix_copy:0000000000000000 $t
     /tmp/cc0YfLmr.s:1631   .text.matrix_copy:0000000000000000 matrix_copy
     /tmp/cc0YfLmr.s:1728   .text.matrix_all:0000000000000000 $t
     /tmp/cc0YfLmr.s:1736   .text.matrix_all:0000000000000000 matrix_all
     /tmp/cc0YfLmr.s:1807   .text.matrix_diag:0000000000000000 $t
     /tmp/cc0YfLmr.s:1815   .text.matrix_diag:0000000000000000 matrix_diag
     /tmp/cc0YfLmr.s:1898   .text.matrix_row:0000000000000000 $t
     /tmp/cc0YfLmr.s:1906   .text.matrix_row:0000000000000000 matrix_row
     /tmp/cc0YfLmr.s:2017   .text.matrix_col:0000000000000000 $t
     /tmp/cc0YfLmr.s:2025   .text.matrix_col:0000000000000000 matrix_col
     /tmp/cc0YfLmr.s:2136   .text.matrix_rowq:0000000000000000 $t
     /tmp/cc0YfLmr.s:2144   .text.matrix_rowq:0000000000000000 matrix_rowq
     /tmp/cc0YfLmr.s:2207   .text.matrix_colq:0000000000000000 $t
     /tmp/cc0YfLmr.s:2215   .text.matrix_colq:0000000000000000 matrix_colq
     /tmp/cc0YfLmr.s:2280   .text.matrix_getreg:0000000000000000 $t
     /tmp/cc0YfLmr.s:2288   .text.matrix_getreg:0000000000000000 matrix_getreg
     /tmp/cc0YfLmr.s:2437   .text.matrix_getrc:0000000000000000 $t
     /tmp/cc0YfLmr.s:2445   .text.matrix_getrc:0000000000000000 matrix_getrc
     /tmp/cc0YfLmr.s:2572   .text.matrix_genadd:0000000000000000 $t
     /tmp/cc0YfLmr.s:2580   .text.matrix_genadd:0000000000000000 matrix_genadd
     /tmp/cc0YfLmr.s:2761   .text.matrix_multiply:0000000000000000 $t
     /tmp/cc0YfLmr.s:2769   .text.matrix_multiply:0000000000000000 matrix_multiply
     /tmp/cc0YfLmr.s:3072   .text.matrix_transpose:0000000000000000 $t
     /tmp/cc0YfLmr.s:3080   .text.matrix_transpose:0000000000000000 matrix_transpose
     /tmp/cc0YfLmr.s:3263   .text.matrix_rowops:0000000000000000 $t
     /tmp/cc0YfLmr.s:3271   .text.matrix_rowops:0000000000000000 matrix_rowops
     /tmp/cc0YfLmr.s:3537   .text.matrix_determinant:0000000000000000 $t
     /tmp/cc0YfLmr.s:3545   .text.matrix_determinant:0000000000000000 matrix_determinant
     /tmp/cc0YfLmr.s:3667   .text.matrix_inverse:0000000000000000 $t
     /tmp/cc0YfLmr.s:3675   .text.matrix_inverse:0000000000000000 matrix_inverse
     /tmp/cc0YfLmr.s:3847   .text.matrix_linear_eqn:0000000000000000 $t
     /tmp/cc0YfLmr.s:3855   .text.matrix_linear_eqn:0000000000000000 matrix_linear_eqn
     /tmp/cc0YfLmr.s:4086   .text.matrix_lu_decomp:0000000000000000 $t
     /tmp/cc0YfLmr.s:4094   .text.matrix_lu_decomp:0000000000000000 matrix_lu_decomp

ARM GAS  /tmp/cc0YfLmr.s 			page 108


UNDEFINED SYMBOLS
is_dblmode
report_err
local_regs
main_ram
dn_mulpow10
dn_to_int
dn_abs
get_reg_n
int_to_dn
decimal64ToNumber
packed128_from_number
busy
decimal128ToNumber
dn_lt
decNumberCopy
dn_eq0
dn_divide
dn_multiply
dn_subtract
getX
fin_tst
xcopy
getY
setY
dn_add
packed_from_number
decNumberZero
getXYZT
swap_reg
get_const
packed_from_packed128

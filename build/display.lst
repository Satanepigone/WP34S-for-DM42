ARM GAS  /tmp/ccE2jV6G.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccE2jV6G.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** 
  43:src/display.c **** static void set_status_right(const char *);
  44:src/display.c **** static void set_status_graphic(const unsigned char *);
  45:src/display.c **** 
  46:src/display.c **** static void set_int_x(const long long int value, char *res);
  47:src/display.c **** 
  48:src/display.c **** const char *DispMsg; // What to display in message area
  49:src/display.c **** 
  50:src/display.c **** short int DispPlot;
  51:src/display.c **** short int no_status_top = 0;
  52:src/display.c **** 
  53:src/display.c **** #ifndef REALBUILD
  54:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  55:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  56:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  57:src/display.c **** char forceDispPlot;
  58:src/display.c **** #endif
  59:src/display.c **** 
  60:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  61:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  62:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  63:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  64:src/display.c **** 
  65:src/display.c **** /* Message strings
  66:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  67:src/display.c ****  * are for the upper dot matrix line.
  68:src/display.c ****  */
  69:src/display.c **** static const char S_SURE[] = "Sure?";
  70:src/display.c **** 
  71:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  72:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  73:src/display.c **** #ifndef REALBUILD
  74:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  75:src/display.c **** #endif
  76:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  77:src/display.c **** #ifndef REALBUILD
  78:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  79:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  80:src/display.c **** #endif
  81:src/display.c **** 
  82:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  83:src/display.c **** #ifndef REALBUILD
  84:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
ARM GAS  /tmp/ccE2jV6G.s 			page 3


  88:src/display.c **** static const char S7_fract_LT[] = " Lt";
  89:src/display.c **** static const char S7_fract_GT[] = " Gt";
  90:src/display.c **** 
  91:src/display.c **** static const char libname[][5] = {
  92:src/display.c ****   "rAMm", "Lib ", "Bup ",
  93:src/display.c **** #ifndef REALBUILD
  94:src/display.c ****   "roMm"
  95:src/display.c **** #endif
  96:src/display.c **** };
  97:src/display.c **** 
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c **** static const char libname_text[][10] = {
 100:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 101:src/display.c **** };
 102:src/display.c **** static const char libname_shorttext[][5] = {
 103:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 104:src/display.c **** };
 105:src/display.c **** #endif
 106:src/display.c **** 
 107:src/display.c **** 
 108:src/display.c **** /* Set the separator and decimal mode globals
 109:src/display.c ****  */
 110:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 110 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 111:src/display.c ****   // Separators used by various modes
 112:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 112 3 view .LVU1
  35              		.loc 1 112 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 113:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 113 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 112:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 112 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 112:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 112 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 110:src/display.c ****   // Separators used by various modes
  44              		.loc 1 110 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 112:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 112 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 113 5 is_stmt 1 view .LVU8
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 114 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 115:src/display.c ****   }
ARM GAS  /tmp/ccE2jV6G.s 			page 4


 116:src/display.c ****   else {
 117:src/display.c ****     SeparatorMode = SEP_COMMA;
 118:src/display.c ****     DecimalMode = DECIMAL_DOT;
 119:src/display.c ****   }
 120:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 120 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 114 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 113:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 113 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 114 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 120 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 113:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 113 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 114 5 is_stmt 1 view .LVU16
  67              		.loc 1 120 3 view .LVU17
  68              		.loc 1 120 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 120 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 121:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 121 5 is_stmt 1 view .LVU20
  76              		.loc 1 121 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 122:src/display.c **** }
  80              		.loc 1 122 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 117:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 117 5 is_stmt 1 view .LVU23
 118:src/display.c ****   }
  90              		.loc 1 118 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 120:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 120 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 118:src/display.c ****   }
  94              		.loc 1 118 17 view .LVU26
ARM GAS  /tmp/ccE2jV6G.s 			page 5


  95 0036 2070     		strb	r0, [r4]
 117:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 117 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 120:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 120 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 117:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 117 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 118:src/display.c ****   }
 102              		.loc 1 118 5 is_stmt 1 view .LVU30
 120:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 120 3 view .LVU31
 120:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 120 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 120:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 120 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 122 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 123:src/display.c **** 
 124:src/display.c **** 
 125:src/display.c **** /* Table of error messages.
 126:src/display.c ****  * These consist of a double string.  The first is displayed in the
 127:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 128:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 129:src/display.c ****  */
 130:src/display.c **** void error_message(const unsigned int e) 
 131:src/display.c **** {
 132:src/display.c **** #define MSG1(top) top "\0"
 133:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
ARM GAS  /tmp/ccE2jV6G.s 			page 6


 134:src/display.c **** 
 135:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 136:src/display.c ****   static const char *const error_table[] = 
 137:src/display.c ****     {
 138:src/display.c ****       // manually get the order correct!
 139:src/display.c ****       MSG2("Running", "ProGraMm"),
 140:src/display.c ****       MSG1("Domain"),
 141:src/display.c ****       MSG2("Bad time", "or dAtE"),
 142:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 143:src/display.c ****       MSG1("+\237"),
 144:src/display.c ****       MSG1("-\237"),
 145:src/display.c ****       MSG2("No such", "LAbEL"),
 146:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 147:src/display.c ****       MSG1("Out of range"),
 148:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 149:src/display.c ****       MSG2("Bad digit", "1"),
 150:src/display.c ****       MSG2("Too long", "1"),
 151:src/display.c **** #else
 152:src/display.c ****       MSG1("Bad digit"),
 153:src/display.c ****       MSG1("Too long"),
 154:src/display.c **** #endif
 155:src/display.c ****       MSG2("RAM is", "FuLL"),
 156:src/display.c ****       MSG2("Stack", "CLASH"),
 157:src/display.c ****       MSG1("Bad mode"),
 158:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 159:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 160:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 161:src/display.c ****       MSG1("I/O"),
 162:src/display.c ****       MSG2("Invalid", "dAtA"),
 163:src/display.c ****       MSG2("Write", "ProtEctEd"),
 164:src/display.c ****       MSG2("No root", "Found"),
 165:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 166:src/display.c ****       MSG1("Singular"),
 167:src/display.c ****       MSG2("Flash is", "FuLL"),
 168:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 169:src/display.c **** #ifndef SHIFT_EXPONENT
 170:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 171:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 172:src/display.c ****       MSG2("Too\007\304 small", "1"),
 173:src/display.c **** #     else
 174:src/display.c ****       MSG2("Too small", "1"),
 175:src/display.c **** #     endif
 176:src/display.c ****       MSG2("Too big", "1"),
 177:src/display.c **** #  else
 178:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 179:src/display.c ****       MSG1("Too\007\304 small"),
 180:src/display.c **** #     else
 181:src/display.c ****       MSG1("Too small"),
 182:src/display.c **** #     endif
 183:src/display.c ****       MSG1("Too big"),
 184:src/display.c **** #  endif
 185:src/display.c **** #endif
 186:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 187:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 188:src/display.c ****       MSG2("Interrupted", "X"),
 189:src/display.c **** #endif
 190:src/display.c ****     };
ARM GAS  /tmp/ccE2jV6G.s 			page 7


 191:src/display.c **** #undef MSG1
 192:src/display.c **** #undef MSG2
 193:src/display.c **** #ifndef REALBUILD
 194:src/display.c ****   static const char *const error_table_text[] =
 195:src/display.c ****     {
 196:src/display.c ****       " P r o g r a m ",
 197:src/display.c ****       "",
 198:src/display.c ****       " o r   d a t e ",
 199:src/display.c ****       " O p - c o d e ",
 200:src/display.c ****       "",
 201:src/display.c ****       "",
 202:src/display.c ****       " L a b e l ",
 203:src/display.c ****       " O p e r a t i o n ",
 204:src/display.c ****       "",
 205:src/display.c ****       "",
 206:src/display.c ****       "",
 207:src/display.c ****       " F u l l ",
 208:src/display.c ****       " C l a s h ",
 209:src/display.c ****       "",
 210:src/display.c ****       " T o o   s m a l l ",
 211:src/display.c ****       " D a t a   p o i n t s ",
 212:src/display.c ****       " P a r a m e t e r ",
 213:src/display.c ****       "",
 214:src/display.c ****       " D a t a ",
 215:src/display.c ****       " P r o t e c t e d ",
 216:src/display.c ****       " F o u n d ",
 217:src/display.c ****       " M i s m a t c h ",
 218:src/display.c ****       "",
 219:src/display.c ****       " F u l l ",
 220:src/display.c ****       " I n s t a l l e d ",
 221:src/display.c **** #ifndef SHIFT_EXPONENT
 222:src/display.c ****       "",
 223:src/display.c ****       "",
 224:src/display.c **** #endif
 225:src/display.c ****       "",
 226:src/display.c ****     };
 227:src/display.c **** #endif
 228:src/display.c **** 
 229:src/display.c ****   if (e != ERR_NONE || Running) {
 230:src/display.c ****     const char *p = error_table[e];
 231:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 232:src/display.c ****     if (*q == '\0')
 233:src/display.c ****       q = S7_ERROR;
 234:src/display.c ****     if (*q == 'X') {
 235:src/display.c ****       DispMsg = p;
 236:src/display.c ****       frozen_display();
 237:src/display.c ****     }
 238:src/display.c ****     else {
 239:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 240:src/display.c ****       if (*q == '1')
 241:src/display.c **** 	q = CNULL;
 242:src/display.c **** #endif
 243:src/display.c ****       message(p, q);
 244:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 245:src/display.c **** #ifndef REALBUILD
 246:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 247:src/display.c **** #endif
ARM GAS  /tmp/ccE2jV6G.s 			page 8


 248:src/display.c ****     }
 249:src/display.c **** #ifdef INFRARED
 250:src/display.c ****     if (Tracing) {
 251:src/display.c ****       if (*q == 'X')
 252:src/display.c **** 	print_reg(regX_idx, p, 0);
 253:src/display.c ****       else {
 254:src/display.c **** 	print_tab(0);
 255:src/display.c **** 	print_line(p, 0);
 256:src/display.c **** 	print(' ');
 257:src/display.c **** 	while (*q != '\0') {
 258:src/display.c **** 	  int c = *q;
 259:src/display.c **** 	  if (c >= 'A')
 260:src/display.c **** 	    c |= 0x60; // ASCII lower case
 261:src/display.c **** 	  print(c);
 262:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 263:src/display.c **** 	    ++q;
 264:src/display.c **** 	  ++q;
 265:src/display.c **** 	}
 266:src/display.c **** 	print_advance( 0 );
 267:src/display.c ****       }
 268:src/display.c ****     }
 269:src/display.c **** #endif
 270:src/display.c ****   }
 271:src/display.c **** }
 272:src/display.c **** 
 273:src/display.c **** 
 274:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 275:src/display.c ****  * display.
 276:src/display.c ****  */
 277:src/display.c **** #define D_TOP 64
 278:src/display.c **** #define D_TL 32
 279:src/display.c **** #define D_TR 8
 280:src/display.c **** #define D_MIDDLE 16
 281:src/display.c **** #define D_BL 4
 282:src/display.c **** #define D_BR 1
 283:src/display.c **** #define D_BOTTOM 2
 284:src/display.c **** 
 285:src/display.c **** #include "charset7.h"
 286:src/display.c **** 
 287:src/display.c **** #ifndef REALBUILD
 288:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 289:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 290:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 291:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 292:src/display.c **** 
 293:src/display.c **** static void set_mant_sign_dot()
 294:src/display.c **** {
 295:src/display.c ****   LastDisplayedNumber[0]='-';
 296:src/display.c ****   set_dot(MANT_SIGN);
 297:src/display.c **** }
 298:src/display.c **** 
 299:src/display.c **** static void clr_mant_sign_dot()
 300:src/display.c **** {
 301:src/display.c ****   LastDisplayedNumber[0]=' ';
 302:src/display.c ****   clr_dot(MANT_SIGN);
 303:src/display.c **** }
 304:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 9


 305:src/display.c **** static void set_exp_sign_dot()
 306:src/display.c **** {
 307:src/display.c ****   LastDisplayedExponent[0]='-';
 308:src/display.c ****   set_dot(EXP_SIGN);
 309:src/display.c **** }
 310:src/display.c **** 
 311:src/display.c **** static void clr_exp_sign_dot()
 312:src/display.c **** {
 313:src/display.c ****   LastDisplayedExponent[0]=' ';
 314:src/display.c ****   clr_dot(EXP_SIGN);
 315:src/display.c **** }
 316:src/display.c **** 
 317:src/display.c **** #else
 318:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 319:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 320:src/display.c **** 
 321:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 322:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 323:src/display.c **** 
 324:src/display.c **** #endif
 325:src/display.c **** 
 326:src/display.c **** #ifndef REALBUILD
 327:src/display.c **** int getdig(int ch)
 328:src/display.c **** #else
 329:src/display.c ****   static int getdig(int ch)
 330:src/display.c **** #endif
 331:src/display.c **** {
 332:src/display.c ****   // perform index lookup
 333:src/display.c ****   return digtbl[ch&0xff];
 334:src/display.c **** }
 335:src/display.c **** 
 336:src/display.c **** void dot(int n, int on) {
 337:src/display.c ****   if (on)	set_dot(n);
 338:src/display.c ****   else	clr_dot(n);
 339:src/display.c **** }
 340:src/display.c **** 
 341:src/display.c **** 
 342:src/display.c **** /* Set the decimal point *after* the indicated digit
 343:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 344:src/display.c ****  * of decimal.
 345:src/display.c ****  */
 346:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 347:src/display.c ****   if (res) {
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 349:src/display.c ****   } else {
 350:src/display.c ****     set_dot(posn+7);
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 352:src/display.c ****       set_dot(posn+8);
 353:src/display.c **** #ifndef REALBUILD
 354:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 355:src/display.c **** #endif
 356:src/display.c ****   }
 357:src/display.c ****   return res;
 358:src/display.c **** }
 359:src/display.c **** 
 360:src/display.c **** /* Set the digit group separator *before* the specified digit.
 361:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
ARM GAS  /tmp/ccE2jV6G.s 			page 10


 362:src/display.c ****  * sep argument.
 363:src/display.c ****  */
 364:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 365:src/display.c ****   if (sep == SEP_NONE)
 366:src/display.c ****     return res;
 367:src/display.c ****   if (res) {
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 369:src/display.c ****     else *res++ = '.';
 370:src/display.c ****   } else {
 371:src/display.c ****     posn -= SEGS_PER_DIGIT;
 372:src/display.c ****     set_dot(posn+7);
 373:src/display.c ****     if (sep == SEP_COMMA)
 374:src/display.c ****       set_dot(posn+8);
 375:src/display.c **** #ifndef REALBUILD
 376:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 377:src/display.c **** #endif
 378:src/display.c ****   }
 379:src/display.c ****   return res;
 380:src/display.c **** }
 381:src/display.c **** 
 382:src/display.c **** /* Set a digit in positions [base, base+6] */
 383:src/display.c **** static void set_dig(int base, int ch)
 384:src/display.c **** {
 136              		.loc 1 384 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 385:src/display.c ****   int i;
 140              		.loc 1 385 3 view .LVU36
 386:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 386 3 view .LVU37
 142              	.LBB170:
 143              	.LBI170:
 327:src/display.c **** #else
 144              		.loc 1 327 5 view .LVU38
 145              	.LBB171:
 333:src/display.c **** }
 146              		.loc 1 333 3 view .LVU39
 333:src/display.c **** }
 147              		.loc 1 333 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 333:src/display.c **** }
 149              		.loc 1 333 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE171:
 152              	.LBE170:
 387:src/display.c **** #ifndef REALBUILD
 388:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 388 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 384:src/display.c ****   int i;
 155              		.loc 1 384 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
ARM GAS  /tmp/ccE2jV6G.s 			page 11


 161              		.cfi_offset 14, -4
 162              	.LBB173:
 163              	.LBB172:
 333:src/display.c **** }
 164              		.loc 1 333 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 333:src/display.c **** }
 167              		.loc 1 333 16 view .LVU45
 168              	.LBE172:
 169              	.LBE173:
 170              		.loc 1 388 3 is_stmt 1 view .LVU46
 171              		.loc 1 388 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 389:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 389 5 is_stmt 1 view .LVU48
 174              		.loc 1 389 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 389 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 389 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 389 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 389 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 390:src/display.c ****   else
 391:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 392:src/display.c **** #endif
 393:src/display.c ****   for (i=6; i>=0; i--)
 394:src/display.c ****     {
 395:src/display.c ****       //		dot(base, c & (1 << i));
 396:src/display.c ****       if (c & (1 << i))
 397:src/display.c **** 	set_dot(base);
 196              		.loc 1 397 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 398:src/display.c ****       else
 399:src/display.c **** 	clr_dot(base);
 400:src/display.c ****       base++;
 199              		.loc 1 400 7 is_stmt 1 view .LVU55
 393:src/display.c ****     {
 200              		.loc 1 393 19 view .LVU56
 393:src/display.c ****     {
 201              		.loc 1 393 3 is_stmt 0 view .LVU57
ARM GAS  /tmp/ccE2jV6G.s 			page 12


 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 393:src/display.c ****     {
 204              		.loc 1 393 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 397:src/display.c ****       else
 208              		.loc 1 397 2 is_stmt 1 view .LVU59
 399:src/display.c ****       base++;
 209              		.loc 1 399 2 view .LVU60
 396:src/display.c **** 	set_dot(base);
 210              		.loc 1 396 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 396:src/display.c **** 	set_dot(base);
 212              		.loc 1 396 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 396:src/display.c **** 	set_dot(base);
 216              		.loc 1 396 7 is_stmt 1 view .LVU63
 396:src/display.c **** 	set_dot(base);
 217              		.loc 1 396 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 399:src/display.c ****       base++;
 219              		.loc 1 399 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 400 7 is_stmt 1 view .LVU66
 393:src/display.c ****     {
 223              		.loc 1 393 19 view .LVU67
 393:src/display.c ****     {
 224              		.loc 1 393 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 393:src/display.c ****     {
 227              		.loc 1 393 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 401:src/display.c ****     }
 402:src/display.c **** }
 231              		.loc 1 402 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 391:src/display.c **** #endif
 235              		.loc 1 391 5 is_stmt 1 view .LVU71
 391:src/display.c **** #endif
 236              		.loc 1 391 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 391:src/display.c **** #endif
 238              		.loc 1 391 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 391:src/display.c **** #endif
 240              		.loc 1 391 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
ARM GAS  /tmp/ccE2jV6G.s 			page 13


 391:src/display.c **** #endif
 242              		.loc 1 391 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 391:src/display.c **** #endif
 246              		.loc 1 391 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 403:src/display.c **** 
 404:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 405:src/display.c ****   if (res) *res++ = ch;
 406:src/display.c ****   else	set_dig(base, ch);
 407:src/display.c ****   return res;
 408:src/display.c **** }
 409:src/display.c **** 
 410:src/display.c **** 
 411:src/display.c **** static void set_digits_string(const char *msg, int j) {
 412:src/display.c ****   for (; *msg != '\0'; msg++) {
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 414:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 415:src/display.c ****     else {
 416:src/display.c ****       set_dig_s(j, *msg, CNULL);
 417:src/display.c ****       j += SEGS_PER_DIGIT;
 418:src/display.c ****     }
 419:src/display.c ****   }
 420:src/display.c **** }
 421:src/display.c **** 
 422:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 423:src/display.c ****   int i;
 424:src/display.c ****   const int n = res == NULL ? 3 : 4;
 425:src/display.c **** 
 426:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 428:src/display.c **** }
 429:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 14


 430:src/display.c **** /* Force the exponent display
 431:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 432:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 433:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 434:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 435:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 436:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 437:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 438:src/display.c ****  */
 439:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 440:src/display.c ****   union {
 441:src/display.c ****     char buf[4];
 442:src/display.c ****     int i;
 443:src/display.c ****   } u;
 444:src/display.c ****   int negative;
 445:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 446:src/display.c ****   int thousands;
 447:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 448:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 449:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 450:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 451:src/display.c **** #  else
 452:src/display.c ****   const int show_large_exponent = 1;
 453:src/display.c **** #  endif
 454:src/display.c **** #else
 455:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 456:src/display.c ****   int thousands;
 457:src/display.c **** #  endif
 458:src/display.c ****   const int show_large_exponent = 0;
 459:src/display.c **** #endif
 460:src/display.c **** 
 461:src/display.c ****   negative = flags & 2;
 462:src/display.c ****   if (exp < 0) {
 463:src/display.c ****     negative = 1;
 464:src/display.c ****     exp = -exp;
 465:src/display.c ****   }
 466:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 467:src/display.c ****   thousands = exp / 1000;
 468:src/display.c **** #endif
 469:src/display.c ****   if (res) {
 470:src/display.c **** #ifdef INCLUDE_YREG_CODE
 471:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 472:src/display.c ****     if (thousands != 0) {
 473:src/display.c **** #else
 474:src/display.c ****       if (exp > 999) {
 475:src/display.c **** #endif
 476:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 478:src/display.c ****       }
 479:src/display.c ****       else *res++ = 'e'; // Normal separator
 480:src/display.c **** #else
 481:src/display.c ****       *res++ = 'e';
 482:src/display.c **** #endif
 483:src/display.c ****       if (negative) *res++ = '-';
 484:src/display.c ****     }
 485:src/display.c ****     else {
 486:src/display.c ****       if (negative) SET_EXP_SIGN;
ARM GAS  /tmp/ccE2jV6G.s 			page 15


 487:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 488:src/display.c ****       if (thousands != 0) {
 489:src/display.c **** #else
 490:src/display.c **** 	if (exp > 999) {
 491:src/display.c **** #endif
 492:src/display.c **** 	  if (!show_large_exponent
 493:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 494:src/display.c **** 	      && (flags & 8) == 0
 495:src/display.c **** #endif
 496:src/display.c **** 	      ) {
 497:src/display.c **** #ifdef REALBUILD
 498:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 499:src/display.c **** #else
 500:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 501:src/display.c **** #endif
 502:src/display.c **** 	    goto no_number;
 503:src/display.c **** 	  }
 504:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 505:src/display.c **** 	  else {
 506:src/display.c **** 	    exp -= thousands * 1000;
 507:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 508:src/display.c **** 	    if (flags & 16) {
 509:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 510:src/display.c **** 	      int i;
 511:src/display.c **** 
 512:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 513:src/display.c **** 		// Clear digits and separators
 514:src/display.c **** 		clr_dot(i);
 515:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 516:src/display.c **** 	    }
 517:src/display.c **** #  endif
 518:src/display.c **** 	    if (negative) {
 519:src/display.c **** 	      CLR_EXP_SIGN;
 520:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 521:src/display.c **** 	    }
 522:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 523:src/display.c **** 	    flags = 1;
 524:src/display.c **** 	  }
 525:src/display.c **** #endif
 526:src/display.c **** 	}
 527:src/display.c ****       }
 528:src/display.c **** #ifdef REALBUILD
 529:src/display.c ****       u.i = 0; // Smaller ARM code
 530:src/display.c **** #else
 531:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 532:src/display.c **** #endif
 533:src/display.c ****       if (flags & 5) {
 534:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 535:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 536:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 537:src/display.c **** 	  int i;
 538:src/display.c **** 
 539:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 540:src/display.c **** 	    if (u.buf[i] == '0')
 541:src/display.c **** 	      u.buf[i] = ' ';
 542:src/display.c **** 	    else
 543:src/display.c **** 	      break;
ARM GAS  /tmp/ccE2jV6G.s 			page 16


 544:src/display.c **** 	  }
 545:src/display.c **** 	  if (i != 0 && negative) {
 546:src/display.c **** 	    // Move minus sign to right in front of exponent
 547:src/display.c **** 	    CLR_EXP_SIGN;
 548:src/display.c **** 	    u.buf[i - 1] = '-';
 549:src/display.c **** 	  }
 550:src/display.c **** 	}
 551:src/display.c **** #endif
 552:src/display.c ****       }
 553:src/display.c ****       else
 554:src/display.c **** 	num_arg(u.buf, exp);
 555:src/display.c ****     no_number:
 556:src/display.c ****       set_exp_digits_string(u.buf, res);
 557:src/display.c ****     }
 558:src/display.c **** 
 559:src/display.c ****     static void carry_overflow(void) {
 560:src/display.c ****       const int base = SEGS_EXP_BASE;
 561:src/display.c ****       int c;
 562:src/display.c ****       unsigned int b;
 563:src/display.c **** 
 564:src/display.c ****       // Figure out the base
 565:src/display.c ****       switch (State2.smode) {
 566:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 567:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 568:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 569:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 570:src/display.c ****       default:	b = UState.int_base+1;	break;
 571:src/display.c ****       }
 572:src/display.c **** 
 573:src/display.c ****       // Display the base as the first exponent digit
 574:src/display.c ****       if (b > 10 && b < 16)
 575:src/display.c **** 	SET_EXP_SIGN;
 576:src/display.c ****       c = "B34567o9D12345h"[b-2];
 577:src/display.c ****       set_dig(base, c);
 578:src/display.c **** 
 579:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 580:src/display.c ****       if (get_carry())
 581:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 582:src/display.c ****       if (get_overflow())
 583:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 584:src/display.c ****     }
 585:src/display.c **** 
 586:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 587:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 588:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 589:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 590:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 591:src/display.c **** #endif
 592:src/display.c **** 
 593:src/display.c ****     /* Display the annunicator text line.
 594:src/display.c ****      * Care needs to be taken to keep things aligned.
 595:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 596:src/display.c ****      */
 597:src/display.c **** #ifdef TOP_ROW
 598:src/display.c ****     static void annunciators(void) {
 599:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 600:src/display.c ****       char buf[42], *p = buf, *q="";
ARM GAS  /tmp/ccE2jV6G.s 			page 17


 601:src/display.c ****       char buf2[42], *p2 = buf2;
 602:src/display.c ****       int n;
 603:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 604:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 605:src/display.c ****       // Constant variables and code branches depending on a constant variable
 606:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 607:src/display.c ****       // feature run-time configurable if needed.
 608:src/display.c **** #ifdef INCLUDE_YREG_CODE
 609:src/display.c **** #  ifdef YREG_ALWAYS_ON
 610:src/display.c ****       const int yreg_enabled = 1;
 611:src/display.c **** #  else
 612:src/display.c ****       const int yreg_enabled = UState.show_y;
 613:src/display.c **** #  endif
 614:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 615:src/display.c ****       const int yreg_hms = 1;
 616:src/display.c **** #  else
 617:src/display.c ****       const int yreg_hms = 0;
 618:src/display.c **** #  endif
 619:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 620:src/display.c ****       const int yreg_fract = 1;
 621:src/display.c **** #  else
 622:src/display.c ****       const int yreg_fract = 0;
 623:src/display.c **** #  endif
 624:src/display.c **** #else
 625:src/display.c ****       const int yreg_enabled = 0;
 626:src/display.c ****       const int yreg_hms = 0;
 627:src/display.c ****       const int yreg_fract = 0;
 628:src/display.c **** #endif
 629:src/display.c **** #ifdef RP_PREFIX
 630:src/display.c ****       const int rp_prefix = 1;
 631:src/display.c **** #else
 632:src/display.c ****       const int rp_prefix = 0;
 633:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 634:src/display.c **** #endif
 635:src/display.c ****       // Indicates whether font escape code is compiled in.
 636:src/display.c ****       // This variable will always be set at compile time.
 637:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 638:src/display.c ****       const int has_FONT_ESCAPE = 1;
 639:src/display.c **** #else
 640:src/display.c ****       const int has_FONT_ESCAPE = 0;
 641:src/display.c **** #endif
 642:src/display.c **** 
 643:src/display.c ****       xset(buf, '\0', sizeof(buf));
 644:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 645:src/display.c ****       
 646:src/display.c ****       if (is_intmode()) {
 647:src/display.c **** #ifdef SHOW_STACK_SIZE
 648:src/display.c **** 	if (shift_char == ' ') {
 649:src/display.c **** 	  *p2++ = '\007';
 650:src/display.c **** 	  *p2++ = '\346';
 651:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 652:src/display.c **** 	}
 653:src/display.c **** 	else
 654:src/display.c **** #endif
 655:src/display.c **** 	  {
 656:src/display.c **** 	    *p2++ = shift_char;
 657:src/display.c **** 	    *p2++ = '\006';
ARM GAS  /tmp/ccE2jV6G.s 			page 18


 658:src/display.c **** 	  }
 659:src/display.c **** 
 660:src/display.c **** 	switch(int_mode()) {
 661:src/display.c **** 	default:
 662:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 663:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 664:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 665:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 666:src/display.c **** 	}
 667:src/display.c **** 	q = scopy(p2, q);
 668:src/display.c **** 	*q++ = '\006';
 669:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 670:src/display.c **** 
 671:src/display.c **** 	if (IntMaxWindow > 0) {
 672:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 673:src/display.c **** 	  if (*q == '1')
 674:src/display.c **** 	    n += 2;
 675:src/display.c **** 	  if (q[1] == '1')
 676:src/display.c **** 	    n += 2;
 677:src/display.c **** 	  while (n-- > 0)
 678:src/display.c **** 	    *p2++ = '\006';
 679:src/display.c **** 
 680:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 682:src/display.c **** 	}
 683:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 684:src/display.c ****       }
 685:src/display.c ****       else if (!yreg_enabled
 686:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 687:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 688:src/display.c **** #endif
 689:src/display.c **** 	       ) {
 690:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 691:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 692:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 693:src/display.c **** 	if (shift_char == ' ') {
 694:src/display.c **** 	  *p2++ = '\007';
 695:src/display.c **** 	  *p2++ = '\342';
 696:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 697:src/display.c **** 	  *p2++ = '\007';
 698:src/display.c **** 	  *p2++ = '\344';
 699:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 700:src/display.c **** 	}
 701:src/display.c **** 	else
 702:src/display.c **** #endif
 703:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 704:src/display.c **** 	    *p2++ = shift_char;
 705:src/display.c **** 	    *p2++ = '\006';
 706:src/display.c **** 	  }
 707:src/display.c **** 	  else {
 708:src/display.c **** 	    *p2++ = 'D';
 709:src/display.c **** 	  }
 710:src/display.c **** 
 711:src/display.c **** 	if (State2.cmplx) {
 712:src/display.c **** 	  *p2++ = ' ';
 713:src/display.c **** 	  *p2 = '\024';
 714:src/display.c **** 	  goto skip;
ARM GAS  /tmp/ccE2jV6G.s 			page 19


 715:src/display.c **** 	}
 716:src/display.c **** 	if (State2.arrow) {
 717:src/display.c **** 	  *p2++ = ' ';
 718:src/display.c **** 	  *p2 = '\015';
 719:src/display.c **** 	  goto skip;
 720:src/display.c **** 	}
 721:src/display.c **** 
 722:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 723:src/display.c **** 	  if (State2.wascomplex) {
 724:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 725:src/display.c **** 	  }
 726:src/display.c **** 	  else if (rp_prefix) {
 727:src/display.c **** 	    if (RectPolConv == 1) {
 728:src/display.c **** 	      q = "\007\306<";
 729:src/display.c **** 	    }
 730:src/display.c **** 	    else {
 731:src/display.c **** 	      q = "\007\306y";
 732:src/display.c **** 	    }
 733:src/display.c **** 	  }
 734:src/display.c **** 	  p = scopy(buf, q);
 735:src/display.c **** 
 736:src/display.c **** 	  goto display_yreg;
 737:src/display.c **** 	}
 738:src/display.c **** 
 739:src/display.c **** 	switch (UState.date_mode) {
 740:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 741:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 742:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 743:src/display.c **** #endif
 744:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 745:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 748:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #endif
 751:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 752:src/display.c **** 	}
 753:src/display.c **** 	p2 = scopy(p2, q);
 754:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 755:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 756:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 757:src/display.c **** 	}
 758:src/display.c **** #else
 759:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 760:src/display.c **** 	*p2++ = '\007';
 761:src/display.c **** 	*p2++ = '\342';
 762:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 763:src/display.c **** #endif
 764:src/display.c ****       }
 765:src/display.c ****       else { // yreg_enabled
 766:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 767:src/display.c **** 	if (State2.cmplx) {
 768:src/display.c **** 	  *p2++ = '\007';
 769:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 770:src/display.c **** 	  *p2++ = shift_char;
 771:src/display.c **** 	  //	  q = "\024";
ARM GAS  /tmp/ccE2jV6G.s 			page 20


 772:src/display.c **** 	  *p2++ = '\024';
 773:src/display.c **** 	}
 774:src/display.c **** 	else {// if (shift_char != ' ') {
 775:src/display.c **** 	  *p2++ = '\007';
 776:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 777:src/display.c **** 	  *p2++ = shift_char;
 778:src/display.c **** 	  //	  goto no_copy;
 779:src/display.c **** 	}
 780:src/display.c **** 	//	else
 781:src/display.c **** #endif
 782:src/display.c **** 	  if (State2.wascomplex) {
 783:src/display.c **** 	    q = "\007\207i";
 784:src/display.c **** 	    p = scopy(p, q);
 785:src/display.c **** 	    //	    goto no_copy;
 786:src/display.c **** 	  }
 787:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 788:src/display.c **** 	    q = "\007\307<";
 789:src/display.c **** 	    p = scopy(p, q);
 790:src/display.c **** 	    //	    goto no_copy;
 791:src/display.c **** 	  }
 792:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 793:src/display.c **** 	    q = "\007\307y";
 794:src/display.c **** 	    p = scopy(p, q);
 795:src/display.c **** 	    //	    goto no_copy;
 796:src/display.c **** 	  }
 797:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 798:src/display.c **** 	  //	  else
 799:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 800:src/display.c **** 	    //	    q = "\007\207\007";
 801:src/display.c **** 	      *p2++ = '\007';
 802:src/display.c **** 	      *p2++ = '\207';
 803:src/display.c **** 	      *p2++ = '\007';	    
 804:src/display.c **** 	    }
 805:src/display.c **** 	    else {
 806:src/display.c **** 	      *p2++ = '\007';
 807:src/display.c **** 	      *p2++ = '\207';
 808:src/display.c **** 	      *p2++ = ' ';
 809:src/display.c **** 	    }
 810:src/display.c **** #endif
 811:src/display.c **** 	    //	else { 
 812:src/display.c **** #ifndef SHOW_STACK_SIZE
 813:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 814:src/display.c **** 	  p2 = scopy(p2, q);
 815:src/display.c **** #else
 816:src/display.c **** 	  if (is_dblmode()) {
 817:src/display.c **** 	    *p2++ = '\007';
 818:src/display.c **** 	    *p2++ = '\342';
 819:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 820:src/display.c **** 	    //	    q = "\007\345D";
 821:src/display.c **** 	    *p2++ = '\007';
 822:src/display.c **** 	    *p2++ = '\345';
 823:src/display.c **** 	    *p2++ = 'D';
 824:src/display.c **** 	  }
 825:src/display.c **** 	  else {
 826:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 827:src/display.c **** 	    p2 = scopy(p2, q);
 828:src/display.c **** 	  }
ARM GAS  /tmp/ccE2jV6G.s 			page 21


 829:src/display.c **** #endif
 830:src/display.c **** 	  //	}
 831:src/display.c **** 	//	p2 = scopy(p2, q);
 832:src/display.c **** 
 833:src/display.c **** 	switch (UState.date_mode) {
 834:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 835:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 836:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 837:src/display.c **** #endif
 838:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 839:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 840:src/display.c **** #endif
 841:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 842:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 843:src/display.c **** #endif
 844:src/display.c **** #endif
 845:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 846:src/display.c **** 	}
 847:src/display.c **** 	p2 = scopy(p2, q);
 848:src/display.c **** 	  
 849:src/display.c ****       no_copy:
 850:src/display.c **** 
 851:src/display.c **** 	if (State2.arrow) {
 852:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 853:src/display.c **** 	} // no need to skip y display with arrow here
 854:src/display.c **** 	if (State2.runmode) {
 855:src/display.c **** 	  decNumber y;
 856:src/display.c **** 	display_yreg:
 857:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 858:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 859:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 860:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 861:src/display.c **** 	   */
 862:src/display.c **** 	  if (is_intmode()) {
 863:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 864:src/display.c **** 	    goto skip;
 865:src/display.c **** 	  }
 866:src/display.c **** 		      
 867:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 868:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 869:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 870:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 871:src/display.c **** 	    if (yreg_hms && State2.hms) {
 872:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 873:src/display.c **** 
 874:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 875:src/display.c **** 	      UState.nothousands = 1;
 876:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 877:src/display.c **** 	      UState.nothousands = saved_nothousands;
 878:src/display.c **** 	      // First replace the '@' character with the degree symbol
 879:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 880:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 881:src/display.c **** 	      // then remove the fractional part of the seconds.
 882:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 883:src/display.c **** 	      while (*p) {
 884:src/display.c **** 		replace_char(buf, p[0], p[1]);
 885:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
ARM GAS  /tmp/ccE2jV6G.s 			page 22


 886:src/display.c **** 		  goto skip;
 887:src/display.c **** 		}
 888:src/display.c **** 		p += 2;
 889:src/display.c **** 	      }
 890:src/display.c **** 	      goto skip;
 891:src/display.c **** 	    }
 892:src/display.c **** 	    if (yreg_fract && UState.fract
 893:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 894:src/display.c **** 		&& !State2.cmplx
 895:src/display.c **** #endif
 896:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 897:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 898:src/display.c **** #endif
 899:src/display.c **** 		&& set_x_fract(&y, p)) {
 900:src/display.c **** 	      char ltgteq;
 901:src/display.c **** 
 902:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 903:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 904:src/display.c **** 	      ltgteq = *q;
 905:src/display.c **** 	      switch (ltgteq) {
 906:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 907:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 908:src/display.c **** 	      }
 909:src/display.c **** 	      scopy(q, "\007\344?");
 910:src/display.c **** 	      q[2] = ltgteq;
 911:src/display.c **** 
 912:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 913:src/display.c **** 		goto skip;
 914:src/display.c **** 	      }
 915:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 916:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 917:src/display.c **** 		goto skip;
 918:src/display.c **** 	      }
 919:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 920:src/display.c **** 	    }
 921:src/display.c **** 	  }
 922:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 923:src/display.c **** 	    int extra_pixels;
 924:src/display.c **** 
 925:src/display.c **** 	    set_x_dn(&y, p, &n);
 926:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 927:src/display.c **** 	    if (extra_pixels <= 0)
 928:src/display.c **** 	      break;
 929:src/display.c **** 
 930:src/display.c **** 	    xset(p, '\0', n+10);
 931:src/display.c **** 
 932:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 933:src/display.c **** 	  }
 934:src/display.c **** 	}
 935:src/display.c ****       }
 936:src/display.c ****       
 937:src/display.c ****     skip:	set_status(buf);
 938:src/display.c ****       set_status_top(buf2);
 939:src/display.c ****       
 940:src/display.c ****     }
 941:src/display.c **** #else
 942:src/display.c ****     static void annunciators(void) {
ARM GAS  /tmp/ccE2jV6G.s 			page 23


 943:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 944:src/display.c ****       char buf[42], *p = buf, *q="";
 945:src/display.c ****       int n;
 946:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 947:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 948:src/display.c ****       // Constant variables and code branches depending on a constant variable
 949:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 950:src/display.c ****       // feature run-time configurable if needed.
 951:src/display.c **** #ifdef INCLUDE_YREG_CODE
 952:src/display.c **** #  ifdef YREG_ALWAYS_ON
 953:src/display.c ****       const int yreg_enabled = 1;
 954:src/display.c **** #  else
 955:src/display.c ****       const int yreg_enabled = UState.show_y;
 956:src/display.c **** #  endif
 957:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 958:src/display.c ****       const int yreg_hms = 1;
 959:src/display.c **** #  else
 960:src/display.c ****       const int yreg_hms = 0;
 961:src/display.c **** #  endif
 962:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 963:src/display.c ****       const int yreg_fract = 1;
 964:src/display.c **** #  else
 965:src/display.c ****       const int yreg_fract = 0;
 966:src/display.c **** #  endif
 967:src/display.c **** #else
 968:src/display.c ****       const int yreg_enabled = 0;
 969:src/display.c ****       const int yreg_hms = 0;
 970:src/display.c ****       const int yreg_fract = 0;
 971:src/display.c **** #endif
 972:src/display.c **** #ifdef RP_PREFIX
 973:src/display.c ****       const int rp_prefix = 1;
 974:src/display.c **** #else
 975:src/display.c ****       const int rp_prefix = 0;
 976:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 977:src/display.c **** #endif
 978:src/display.c ****       // Indicates whether font escape code is compiled in.
 979:src/display.c ****       // This variable will always be set at compile time.
 980:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 981:src/display.c ****       const int has_FONT_ESCAPE = 1;
 982:src/display.c **** #else
 983:src/display.c ****       const int has_FONT_ESCAPE = 0;
 984:src/display.c **** #endif
 985:src/display.c **** 
 986:src/display.c ****       xset(buf, '\0', sizeof(buf));
 987:src/display.c ****       
 988:src/display.c ****       if (is_intmode()) {
 989:src/display.c **** #ifdef SHOW_STACK_SIZE
 990:src/display.c **** 	if (shift_char == ' ') {
 991:src/display.c **** 	  *p++ = '\007';
 992:src/display.c **** 	  *p++ = '\346';
 993:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 994:src/display.c **** 	}
 995:src/display.c **** 	else
 996:src/display.c **** #endif
 997:src/display.c **** 	  {
 998:src/display.c **** 	    *p++ = shift_char;
 999:src/display.c **** 	    *p++ = '\006';
ARM GAS  /tmp/ccE2jV6G.s 			page 24


1000:src/display.c **** 	  }
1001:src/display.c **** 
1002:src/display.c **** 	switch(int_mode()) {
1003:src/display.c **** 	default:
1004:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1005:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1006:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1007:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1008:src/display.c **** 	}
1009:src/display.c **** 	q = scopy(p, q);
1010:src/display.c **** 	*q++ = '\006';
1011:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1012:src/display.c **** 
1013:src/display.c **** 	if (IntMaxWindow > 0) {
1014:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1015:src/display.c **** 	  if (*q == '1')
1016:src/display.c **** 	    n += 2;
1017:src/display.c **** 	  if (q[1] == '1')
1018:src/display.c **** 	    n += 2;
1019:src/display.c **** 	  while (n-- > 0)
1020:src/display.c **** 	    *p++ = '\006';
1021:src/display.c **** 
1022:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1023:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1024:src/display.c **** 	}
1025:src/display.c ****       }
1026:src/display.c ****       else if (!yreg_enabled
1027:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1028:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1029:src/display.c **** #endif
1030:src/display.c **** 	       ) {
1031:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1032:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1033:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1034:src/display.c **** 	if (shift_char == ' ') {
1035:src/display.c **** 	  *p++ = '\007';
1036:src/display.c **** 	  *p++ = '\342';
1037:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1038:src/display.c **** 	  *p++ = '\007';
1039:src/display.c **** 	  *p++ = '\344';
1040:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1041:src/display.c **** 	}
1042:src/display.c **** 	else
1043:src/display.c **** #endif
1044:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1045:src/display.c **** 	    *p++ = shift_char;
1046:src/display.c **** 	    *p++ = '\006';
1047:src/display.c **** 	  }
1048:src/display.c **** 	  else {
1049:src/display.c **** 	    *p++ = 'D';
1050:src/display.c **** 	  }
1051:src/display.c **** 
1052:src/display.c **** 	if (State2.cmplx) {
1053:src/display.c **** 	  *p++ = ' ';
1054:src/display.c **** 	  *p = '\024';
1055:src/display.c **** 	  goto skip;
1056:src/display.c **** 	}
ARM GAS  /tmp/ccE2jV6G.s 			page 25


1057:src/display.c **** 	if (State2.arrow) {
1058:src/display.c **** 	  *p++ = ' ';
1059:src/display.c **** 	  *p = '\015';
1060:src/display.c **** 	  goto skip;
1061:src/display.c **** 	}
1062:src/display.c **** 
1063:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1064:src/display.c **** 	  if (State2.wascomplex) {
1065:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1066:src/display.c **** 	  }
1067:src/display.c **** 	  else if (rp_prefix) {
1068:src/display.c **** 	    if (RectPolConv == 1) {
1069:src/display.c **** 	      q = "\007\306<";
1070:src/display.c **** 	    }
1071:src/display.c **** 	    else {
1072:src/display.c **** 	      q = "\007\306y";
1073:src/display.c **** 	    }
1074:src/display.c **** 	  }
1075:src/display.c **** 	  p = scopy(buf, q);
1076:src/display.c **** 
1077:src/display.c **** 	  goto display_yreg;
1078:src/display.c **** 	}
1079:src/display.c **** 
1080:src/display.c **** 	switch (UState.date_mode) {
1081:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1082:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1083:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1084:src/display.c **** #endif
1085:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1086:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1087:src/display.c **** #endif
1088:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1089:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1090:src/display.c **** #endif
1091:src/display.c **** #endif
1092:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1093:src/display.c **** 	}
1094:src/display.c **** 	p = scopy(p, q);
1095:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1096:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1097:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1098:src/display.c **** 	}
1099:src/display.c **** #else
1100:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1101:src/display.c **** 	*p++ = '\007';
1102:src/display.c **** 	*p++ = '\342';
1103:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1104:src/display.c **** #endif
1105:src/display.c ****       }
1106:src/display.c ****       else { // yreg_enabled
1107:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1108:src/display.c **** 	if (State2.cmplx) {
1109:src/display.c **** 	  *p++ = '\007';
1110:src/display.c **** 	  *p++ = '\344';
1111:src/display.c **** 	  *p++ = shift_char;
1112:src/display.c **** 	  q = "\024";
1113:src/display.c **** 	}
ARM GAS  /tmp/ccE2jV6G.s 			page 26


1114:src/display.c **** 	else if (shift_char != ' ') {
1115:src/display.c **** 	  *p++ = '\007';
1116:src/display.c **** 	  *p++ = '\307';
1117:src/display.c **** 	  *p++ = shift_char;
1118:src/display.c **** 	  goto no_copy;
1119:src/display.c **** 	}
1120:src/display.c **** 	else
1121:src/display.c **** #endif
1122:src/display.c **** 	  if (State2.wascomplex) {
1123:src/display.c **** 	    q = "\007\207i";
1124:src/display.c **** 	  }
1125:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1126:src/display.c **** 	    q = "\007\307<";
1127:src/display.c **** 	  }
1128:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1129:src/display.c **** 	    q = "\007\307y";
1130:src/display.c **** 	  }
1131:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1132:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1133:src/display.c **** 	    q = "\007\207\007";
1134:src/display.c **** 	  }
1135:src/display.c **** #endif
1136:src/display.c **** 	  else {
1137:src/display.c **** #ifndef SHOW_STACK_SIZE
1138:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1139:src/display.c **** #else
1140:src/display.c **** 	    if (is_dblmode()) {
1141:src/display.c **** 	      *p++ = '\007';
1142:src/display.c **** 	      *p++ = '\342';
1143:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1144:src/display.c **** 	      q = "\007\345D";
1145:src/display.c **** 	    }
1146:src/display.c **** 	    else {
1147:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1148:src/display.c **** 	    }
1149:src/display.c **** #endif
1150:src/display.c **** 	  }
1151:src/display.c **** 	p = scopy(p, q);
1152:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1153:src/display.c ****       no_copy:
1154:src/display.c **** #endif
1155:src/display.c **** 
1156:src/display.c **** 	if (State2.arrow) {
1157:src/display.c **** 	  scopy(p, "\007\204\006\015");
1158:src/display.c **** 	} else if (State2.runmode) {
1159:src/display.c **** 	  decNumber y;
1160:src/display.c **** 	display_yreg:
1161:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1162:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1163:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1164:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1165:src/display.c **** 	   */
1166:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1167:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1168:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1169:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1170:src/display.c **** 	    if (yreg_hms && State2.hms) {
ARM GAS  /tmp/ccE2jV6G.s 			page 27


1171:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1172:src/display.c **** 
1173:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1174:src/display.c **** 	      UState.nothousands = 1;
1175:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1176:src/display.c **** 	      UState.nothousands = saved_nothousands;
1177:src/display.c **** 	      // First replace the '@' character with the degree symbol
1178:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1179:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1180:src/display.c **** 	      // then remove the fractional part of the seconds.
1181:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1182:src/display.c **** 	      while (*p) {
1183:src/display.c **** 		replace_char(buf, p[0], p[1]);
1184:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1185:src/display.c **** 		  goto skip;
1186:src/display.c **** 		}
1187:src/display.c **** 		p += 2;
1188:src/display.c **** 	      }
1189:src/display.c **** 	      goto skip;
1190:src/display.c **** 	    }
1191:src/display.c **** 	    if (yreg_fract && UState.fract
1192:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1193:src/display.c **** 		&& !State2.cmplx
1194:src/display.c **** #endif
1195:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1196:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1197:src/display.c **** #endif
1198:src/display.c **** 		&& set_x_fract(&y, p)) {
1199:src/display.c **** 	      char ltgteq;
1200:src/display.c **** 
1201:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1202:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1203:src/display.c **** 	      ltgteq = *q;
1204:src/display.c **** 	      switch (ltgteq) {
1205:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1206:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1207:src/display.c **** 	      }
1208:src/display.c **** 	      scopy(q, "\007\344?");
1209:src/display.c **** 	      q[2] = ltgteq;
1210:src/display.c **** 
1211:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1212:src/display.c **** 		goto skip;
1213:src/display.c **** 	      }
1214:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1215:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1216:src/display.c **** 		goto skip;
1217:src/display.c **** 	      }
1218:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1219:src/display.c **** 	    }
1220:src/display.c **** 	  }
1221:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1222:src/display.c **** 	    int extra_pixels;
1223:src/display.c **** 
1224:src/display.c **** 	    set_x_dn(&y, p, &n);
1225:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1226:src/display.c **** 	    if (extra_pixels <= 0)
1227:src/display.c **** 	      break;
ARM GAS  /tmp/ccE2jV6G.s 			page 28


1228:src/display.c **** 
1229:src/display.c **** 	    xset(p, '\0', n+10);
1230:src/display.c **** 
1231:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1232:src/display.c **** 	  }
1233:src/display.c **** 	}
1234:src/display.c ****       }
1235:src/display.c ****       
1236:src/display.c ****     skip:	set_status_top(buf);
1237:src/display.c ****     }
1238:src/display.c **** #endif //top_row
1239:src/display.c ****     static void disp_x(const char *p) {
1240:src/display.c ****       int i;
1241:src/display.c ****       int gotdot = -1;
1242:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1243:src/display.c ****       const
1244:src/display.c **** #endif
1245:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1246:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1247:src/display.c ****       int overflow_to_left = 0;
1248:src/display.c **** #endif
1249:src/display.c **** 
1250:src/display.c ****       if (*p == '-') {
1251:src/display.c **** 	SET_MANT_SIGN;
1252:src/display.c **** 	p++;
1253:src/display.c ****       }
1254:src/display.c **** 
1255:src/display.c ****       if (is_intmode()) {
1256:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1257:src/display.c **** 	  set_dig(i, *p);
1258:src/display.c **** 	  i += SEGS_PER_DIGIT;
1259:src/display.c **** 	}
1260:src/display.c **** 	carry_overflow();
1261:src/display.c ****       } else {
1262:src/display.c **** 	set_separator_decimal_modes();
1263:src/display.c **** 
1264:src/display.c **** 	i = 0;
1265:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1266:src/display.c **** 	if ( CmdLineDot > 1 ) {
1267:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1268:src/display.c **** 	  const
1269:src/display.c **** #  endif
1270:src/display.c **** 	    int double_dot = 0;
1271:src/display.c **** 	  int j;
1272:src/display.c **** 
1273:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1274:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1275:src/display.c **** 	      gotdot = j;
1276:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1277:src/display.c **** 	      double_dot = (p[j+1] == '.');
1278:src/display.c **** #  endif
1279:src/display.c **** 	    }
1280:src/display.c **** 	  }
1281:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1282:src/display.c **** 	  if (j > 0) {
1283:src/display.c **** 	    p += j + 1;
1284:src/display.c **** 	    i = SEGS_PER_DIGIT;
ARM GAS  /tmp/ccE2jV6G.s 			page 29


1285:src/display.c **** 	    if (gotdot <= j) {
1286:src/display.c **** 	      gotdot = 0;
1287:src/display.c **** 	      if (double_dot)
1288:src/display.c **** 		p++;
1289:src/display.c **** 	    }
1290:src/display.c **** 	    else if (*p == '.') {
1291:src/display.c **** 	      gotdot = 0;
1292:src/display.c **** 	      p++;
1293:src/display.c **** 	      if (!double_dot)
1294:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1295:src/display.c **** 	    }
1296:src/display.c **** 	    else gotdot = -1;
1297:src/display.c **** 	    set_dig(0, '<');
1298:src/display.c **** 	    overflow_to_left = 1;
1299:src/display.c **** 	  }
1300:src/display.c **** 	  else gotdot = -1;
1301:src/display.c **** 	}
1302:src/display.c **** #endif
1303:src/display.c **** 
1304:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1305:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1306:src/display.c **** 	       && *p != 'D'
1307:src/display.c **** #endif
1308:src/display.c **** 	       ; p++) {
1309:src/display.c **** 	  if (*p == '.') {
1310:src/display.c **** 	    if (gotdot < 0)
1311:src/display.c **** 	      gotdot = i;
1312:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1313:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1314:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1315:src/display.c **** 	      if ( *(p+1) == '.' ) {
1316:src/display.c **** 		p++;
1317:src/display.c **** 	      }
1318:src/display.c **** #  else
1319:src/display.c **** 	      if ( i != gotdot ) {
1320:src/display.c **** #  endif
1321:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1322:src/display.c **** 		i += segs_per_digit;
1323:src/display.c **** 	      }
1324:src/display.c **** 	      else {
1325:src/display.c **** 		if ( CmdLineDot > 1 ) {
1326:src/display.c **** 		  i += segs_per_digit;
1327:src/display.c **** 		}
1328:src/display.c **** 		else {
1329:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1330:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1331:src/display.c **** 		}
1332:src/display.c **** 	      }
1333:src/display.c **** #else
1334:src/display.c **** 	      if (i > 0)
1335:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1336:src/display.c **** 	      else {
1337:src/display.c **** 		set_dig(i, '0');
1338:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1339:src/display.c **** 		i += segs_per_digit;
1340:src/display.c **** 	      }
1341:src/display.c **** #endif
ARM GAS  /tmp/ccE2jV6G.s 			page 30


1342:src/display.c **** 	    } else {
1343:src/display.c **** 	      set_dig(i, *p);
1344:src/display.c **** 	      i += segs_per_digit;
1345:src/display.c **** 	    }
1346:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1347:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1348:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1349:src/display.c **** #endif
1350:src/display.c **** 	  }
1351:src/display.c **** 
1352:src/display.c **** 	  /* Implement a floating comma */
1353:src/display.c **** 	  if (gotdot < 0)
1354:src/display.c **** 	    gotdot = i;
1355:src/display.c **** 	  for (;;) {
1356:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1357:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1358:src/display.c **** 	      break;
1359:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1360:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1361:src/display.c **** 	      break;
1362:src/display.c **** #endif
1363:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1364:src/display.c **** 	  }
1365:src/display.c **** 
1366:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1367:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1368:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1369:src/display.c **** 	    int flags = 8;
1370:src/display.c **** #  else
1371:src/display.c **** 	    int flags = 12;
1372:src/display.c **** #  endif
1373:src/display.c **** 
1374:src/display.c **** 	    if (*p == 'D')
1375:src/display.c **** 	      flags |= 2;
1376:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1377:src/display.c **** 	      flags |= 16;
1378:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1379:src/display.c **** 	  }
1380:src/display.c **** #else
1381:src/display.c **** 	  if (*p == 'E') {
1382:src/display.c **** 	    p++;
1383:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1384:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1385:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1386:src/display.c **** #  else
1387:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1388:src/display.c **** #  endif
1389:src/display.c **** 	  } 
1390:src/display.c **** #endif
1391:src/display.c **** 	}
1392:src/display.c ****       }
1393:src/display.c **** 
1394:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1395:src/display.c **** 
1396:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1397:src/display.c **** 	const int ws = word_size();
1398:src/display.c **** 	unsigned int b;
ARM GAS  /tmp/ccE2jV6G.s 			page 31


1399:src/display.c **** 	long long int vs = value;
1400:src/display.c **** 	unsigned long long int v;
1401:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1402:src/display.c **** 	int i, j, k;
1403:src/display.c **** 	int sign = 0;
1404:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1405:src/display.c **** 
1406:src/display.c **** 	switch (State2.smode) {
1407:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1408:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1409:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1410:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1411:src/display.c **** 	default:	b = int_base();	break;
1412:src/display.c **** 	}
1413:src/display.c **** 
1414:src/display.c **** 	if (!res) {
1415:src/display.c **** 	  IntMaxWindow = 0;
1416:src/display.c **** 	  carry_overflow();
1417:src/display.c **** 	}
1418:src/display.c **** 
1419:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1420:src/display.c **** 	  v = extract_value(value, &sign);
1421:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1422:src/display.c **** 	    v = value;
1423:src/display.c **** 	  if (v == 0) {
1424:src/display.c **** 	    if (sign)
1425:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1426:src/display.c **** 	    set_dig_s(dig, '0', res);
1427:src/display.c **** 	    return;
1428:src/display.c **** 	  } else
1429:src/display.c **** 	    for (i=0; v != 0; i++) {
1430:src/display.c **** 	      const int r = v % b;
1431:src/display.c **** 	      v /= b;
1432:src/display.c **** 	      buf[i] = DIGITS[r];
1433:src/display.c **** 	    }
1434:src/display.c **** 	} else {
1435:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1436:src/display.c **** 	  if (ws < 64) {
1437:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1438:src/display.c **** 	    vs &= mask;
1439:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1440:src/display.c **** 	      vs |= ~mask;
1441:src/display.c **** 	  }
1442:src/display.c **** 
1443:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1444:src/display.c **** 	    set_dig_s(dig, '0', res);
1445:src/display.c **** 	    return;
1446:src/display.c **** 	  } else if (!UState.leadzero) {
1447:src/display.c **** 	    v = (unsigned long long int)vs;
1448:src/display.c **** 	    for (i=0; v != 0; i++) {
1449:src/display.c **** 	      const int r = v % b;
1450:src/display.c **** 	      v /= b;
1451:src/display.c **** 	      buf[i] = DIGITS[r];
1452:src/display.c **** 	    }
1453:src/display.c **** 	  } else {
1454:src/display.c **** 	    int n;
1455:src/display.c **** 	    const unsigned int b1 = b >> 1;
ARM GAS  /tmp/ccE2jV6G.s 			page 32


1456:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1457:src/display.c **** 	    v = (unsigned long long int)vs;
1458:src/display.c **** 
1459:src/display.c **** 	    n = (ws + fac) / (fac+1);
1460:src/display.c **** 	    for (i=0; i<n; i++) {
1461:src/display.c **** 	      const int r = v % b;
1462:src/display.c **** 	      v /= b;
1463:src/display.c **** 	      buf[i] = DIGITS[r];
1464:src/display.c **** 	    }
1465:src/display.c **** 	  }
1466:src/display.c **** 	}
1467:src/display.c **** #ifdef BIGGER_DISPLAY
1468:src/display.c **** #define MAX_INT_Y_DIG 13
1469:src/display.c **** #else
1470:src/display.c **** #define MAX_INT_Y_DIG 7
1471:src/display.c **** #endif
1472:src/display.c **** 	/* At this point i is the number of digits in the output */
1473:src/display.c **** 	int nd = i;
1474:src/display.c **** 	if (res) {
1475:src/display.c **** 	  if (sign) *res++ = '-';
1476:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1477:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1478:src/display.c **** 	      *res++ = buf[i];
1479:src/display.c **** 	    *res++ = '.';
1480:src/display.c **** 	    *res++ = '.';
1481:src/display.c **** 	  }
1482:src/display.c **** 	  else {
1483:src/display.c **** 	    while (--i >= 0)
1484:src/display.c **** 	      *res++ = buf[i];
1485:src/display.c **** 	  }
1486:src/display.c **** 	} else {
1487:src/display.c **** #if 0
1488:src/display.c **** 	  set_separator_decimal_modes();
1489:src/display.c **** 
1490:src/display.c **** 	  // Allows configuration of digit grouping per base
1491:src/display.c **** 	  static const char grouping[] = 
1492:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1493:src/display.c **** 		    //	   2     3     4     5     6     7     8
1494:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1495:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1496:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1497:src/display.c **** 	    : grouping[b - 2] >> 4;
1498:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1499:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1500:src/display.c **** #else
1501:src/display.c **** 	  // Less flexible but shorter
1502:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1503:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1504:src/display.c **** 	    : b == 16 ? 2 : 3;
1505:src/display.c **** 	  set_separator_decimal_modes();
1506:src/display.c **** #endif
1507:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1508:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1509:src/display.c **** 	    State2.window = 0;
1510:src/display.c **** 	  buf[i] = '\0';
1511:src/display.c **** 
1512:src/display.c **** 	  j = State2.window * shift;	// digits at a time
ARM GAS  /tmp/ccE2jV6G.s 			page 33


1513:src/display.c **** 	  for (k = 0; k < 12; k++)
1514:src/display.c **** 	    if (buf[j + k] == '\0')
1515:src/display.c **** 	      break;
1516:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1517:src/display.c **** 	    int ch = buf[j++];
1518:src/display.c **** 	    if (i >= shift)
1519:src/display.c **** 	      ch -= 030;
1520:src/display.c **** 	    set_dig(dig, ch);
1521:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1522:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1523:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1524:src/display.c **** 	  }
1525:src/display.c **** 	  if (sign) {
1526:src/display.c **** 	    if (dig >= 0)
1527:src/display.c **** 	      set_dig(dig, '-');
1528:src/display.c **** 	    else	SET_MANT_SIGN;
1529:src/display.c **** 	  }
1530:src/display.c **** 	}
1531:src/display.c ****       }
1532:src/display.c **** 
1533:src/display.c ****       /* Handle special cases.
1534:src/display.c ****        * return non-zero if the number is special.
1535:src/display.c ****        */
1536:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1537:src/display.c **** 	if (decNumberIsSpecial(x)) {
1538:src/display.c **** 	  if (decNumberIsNaN(x)) {
1539:src/display.c **** 	    if (res) {
1540:src/display.c **** 	      scopy(res, "NaN");
1541:src/display.c **** 	    } else {
1542:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1543:src/display.c **** #ifndef REALBUILD
1544:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1545:src/display.c **** 	      forceDispPlot=0;
1546:src/display.c **** #endif
1547:src/display.c **** 	    }
1548:src/display.c **** 	    return 1;
1549:src/display.c **** 	  } else {
1550:src/display.c **** 	    if (decNumberIsNegative(x)) {
1551:src/display.c **** 	      if (res) *res++ = '-';
1552:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1553:src/display.c **** 	    }
1554:src/display.c **** 	    if (res)
1555:src/display.c **** 	      *res++ = '\237';
1556:src/display.c **** 	    else {
1557:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1558:src/display.c **** #ifndef REALBUILD
1559:src/display.c **** 	      if (decNumberIsNegative(x)) {
1560:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1561:src/display.c **** 	      }
1562:src/display.c **** 	      else {
1563:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1564:src/display.c **** 	      }
1565:src/display.c **** 	      forceDispPlot=0;
1566:src/display.c **** #endif
1567:src/display.c **** 	    }
1568:src/display.c **** 	    return 1;
1569:src/display.c **** 	  }
ARM GAS  /tmp/ccE2jV6G.s 			page 34


1570:src/display.c **** 	}
1571:src/display.c **** 	return 0;
1572:src/display.c ****       }
1573:src/display.c **** 
1574:src/display.c **** 
1575:src/display.c ****       /* Extract the two lowest integral digits from the number
1576:src/display.c ****        */
1577:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1578:src/display.c **** 	decNumber n;
1579:src/display.c **** 
1580:src/display.c **** 	decNumberMod(&n, x, &const_100);
1581:src/display.c **** 	*v = dn_to_int(&n);
1582:src/display.c **** 	dn_mulpow10(&n, x, -2);
1583:src/display.c **** 	decNumberTrunc(res, &n);
1584:src/display.c ****       }
1585:src/display.c **** 
1586:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1586 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1587:src/display.c **** 	char b[32];
 276              		.loc 1 1587 2 view .LVU78
1588:src/display.c **** 	int i, j;
 277              		.loc 1 1588 2 view .LVU79
1589:src/display.c **** 
1590:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1590 2 view .LVU80
 279              		.loc 1 1590 12 view .LVU81
1586:src/display.c **** 	char b[32];
 280              		.loc 1 1586 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1591:src/display.c **** 	  if (v == 0)
1592:src/display.c **** 	    b[i] = spaces?' ':'0';
1593:src/display.c **** 	  else {
1594:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1594 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1586:src/display.c **** 	char b[32];
 292              		.loc 1 1586 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1586:src/display.c **** 	char b[32];
 295              		.loc 1 1586 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1590:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1590 8 view .LVU86
 299 000e 0026     		movs	r6, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 35


 300              	.LVL13:
 301              	.L33:
1591:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1591 4 is_stmt 1 view .LVU87
 303              		.loc 1 1594 6 view .LVU88
 304              		.loc 1 1594 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1595:src/display.c **** 	    v /= 10;
 311              		.loc 1 1595 6 is_stmt 1 view .LVU90
1596:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1596 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1590:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1590 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1591:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1591 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1590:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1590 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1596 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1595:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1595 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1596 6 is_stmt 1 view .LVU97
1590:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1590 17 view .LVU98
1590:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1590 12 view .LVU99
1590:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1590 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1590:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1590 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1590:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1590 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
ARM GAS  /tmp/ccE2jV6G.s 			page 36


1591:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1591 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1592:src/display.c **** 	  else {
 349              		.loc 1 1592 6 is_stmt 1 view .LVU104
1590:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1590 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1590:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1590 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1592:src/display.c **** 	  else {
 355              		.loc 1 1592 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1590:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1590 17 is_stmt 1 view .LVU108
1590:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1590 12 view .LVU109
1590:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1590 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1590:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1590 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1597:src/display.c **** 	  }
1598:src/display.c **** 	}
1599:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1599 2 is_stmt 1 view .LVU112
 371              		.loc 1 1599 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1600:src/display.c **** 	  b[0] = '0';
1601:src/display.c **** 
1602:src/display.c **** 	/* Copy across and appropriately leading space things
1603:src/display.c **** 	 */
1604:src/display.c **** 	j = *jin;
 374              		.loc 1 1604 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1599:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1599 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1600:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1600 4 is_stmt 1 view .LVU116
1600:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1600 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
ARM GAS  /tmp/ccE2jV6G.s 			page 37


 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1604 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1605:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1605 2 view .LVU119
 386              		.loc 1 1605 8 view .LVU120
1604:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1604 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1605 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1606:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1606 4 is_stmt 1 view .LVU123
 395              	.LBB174:
 396              	.LBB175:
 405:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 405 12 view .LVU124
 398              	.LBE175:
 399              	.LBE174:
 400              		.loc 1 1606 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB179:
 403              	.LBB176:
 405:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 405 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 405:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 405 16 view .LVU127
 408              	.LBE176:
 409              	.LBI174:
 404:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 404 14 is_stmt 1 view .LVU128
 411              	.LBB177:
 405:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 405 3 view .LVU129
 405:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 405 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 405:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 405 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 405:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 405 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 407:src/display.c **** }
 423              		.loc 1 407 3 is_stmt 1 view .LVU133
 407:src/display.c **** }
 424              		.loc 1 407 3 is_stmt 0 view .LVU134
 425              	.LBE177:
ARM GAS  /tmp/ccE2jV6G.s 			page 38


 426              	.LBE179:
1607:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1607 4 is_stmt 1 view .LVU135
1605:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1605 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1607 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1605:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1605 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1608:src/display.c **** 	}
1609:src/display.c **** 	*jin = j;
 436              		.loc 1 1609 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1609 2 is_stmt 1 view .LVU140
 440              		.loc 1 1609 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1610:src/display.c **** 	return str;
1611:src/display.c ****       }
 443              		.loc 1 1611 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1609:src/display.c **** 	return str;
 445              		.loc 1 1609 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1610:src/display.c **** 	return str;
 447              		.loc 1 1610 2 is_stmt 1 view .LVU144
 448              		.loc 1 1611 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB180:
 458              	.LBB178:
 406:src/display.c ****   return res;
 459              		.loc 1 406 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 406:src/display.c ****   return res;
 463              		.loc 1 406 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE178:
 470              	.LBE180:
 471              		.cfi_endproc
ARM GAS  /tmp/ccE2jV6G.s 			page 39


 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 422:src/display.c ****   int i;
 485              		.loc 1 422 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 423 3 view .LVU149
 424:src/display.c **** 
 490              		.loc 1 424 3 view .LVU150
 422:src/display.c ****   int i;
 491              		.loc 1 422 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 424:src/display.c **** 
 500              		.loc 1 424 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 426 3 is_stmt 1 view .LVU153
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 426 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB181:
 513              	.LBB182:
 406:src/display.c ****   return res;
 514              		.loc 1 406 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 405:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 405 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
ARM GAS  /tmp/ccE2jV6G.s 			page 40


 405:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 405 19 view .LVU157
 523              	.LBE182:
 524              	.LBE181:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 426 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB188:
 528              	.LBB183:
 405:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 405 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 407:src/display.c **** }
 532              		.loc 1 407 3 is_stmt 1 view .LVU160
 407:src/display.c **** }
 533              		.loc 1 407 3 is_stmt 0 view .LVU161
 534              	.LBE183:
 535              	.LBE188:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 426 36 is_stmt 1 view .LVU162
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 426 13 view .LVU163
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 426 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 427:src/display.c **** }
 542              		.loc 1 427 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB189:
 544              	.LBB184:
 405:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 405 12 discriminator 3 view .LVU166
 405:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 405 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE184:
 548              	.LBE189:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 426 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB190:
 553              	.LBB185:
 405:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 405 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 405:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 405 16 discriminator 3 view .LVU170
 558              	.LBE185:
 559              	.LBI181:
 404:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 404 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB186:
 405:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 405 3 discriminator 3 view .LVU172
ARM GAS  /tmp/ccE2jV6G.s 			page 41


 563              	.LBE186:
 564              	.LBE190:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 426 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB191:
 569              	.LBB187:
 405:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 405 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 406:src/display.c ****   return res;
 573              		.loc 1 406 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 407:src/display.c **** }
 578              		.loc 1 407 3 view .LVU176
 407:src/display.c **** }
 579              		.loc 1 407 3 is_stmt 0 view .LVU177
 580              	.LBE187:
 581              	.LBE191:
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 426 36 is_stmt 1 view .LVU178
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 426 13 view .LVU179
 426:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 426 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 428:src/display.c **** 
 589              		.loc 1 428 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 428:src/display.c **** 
 591              		.loc 1 428 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1577:src/display.c **** 	decNumber n;
 606              		.loc 1 1577 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1578:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 42


 610              		.loc 1 1578 2 view .LVU184
1580:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1580 2 view .LVU185
1577:src/display.c **** 	decNumber n;
 612              		.loc 1 1577 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1577:src/display.c **** 	decNumber n;
 621              		.loc 1 1577 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1580:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1580 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1580:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1580 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1577:src/display.c **** 	decNumber n;
 630              		.loc 1 1577 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1580:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1580 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1581:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1581 2 is_stmt 1 view .LVU192
1581:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1581 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1582:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1582 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1581:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1581 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1582:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1582 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1583:src/display.c ****       }
 649              		.loc 1 1583 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
ARM GAS  /tmp/ccE2jV6G.s 			page 43


1584:src/display.c **** 
 654              		.loc 1 1584 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1584:src/display.c **** 
 661              		.loc 1 1584 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1612:src/display.c **** 
1613:src/display.c **** 
1614:src/display.c ****       /* Display the number in H.MS mode.
1615:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1616:src/display.c ****        */
1617:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1618:src/display.c **** 	decNumber x, y, a, t, u;
1619:src/display.c **** 	int j=0;
1620:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1621:src/display.c **** 	unsigned int hr, min, sec, fs;
1622:src/display.c **** 
1623:src/display.c **** 	if (check_special_dn(rgx, res)) {
1624:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1625:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1626:src/display.c **** 	  return;
1627:src/display.c **** 	}
1628:src/display.c **** 
1629:src/display.c **** 	set_separator_decimal_modes();
1630:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1631:src/display.c **** 	dn_abs(&a, rgx);
1632:src/display.c **** 	if (decNumberIsNegative(&x)) {
1633:src/display.c **** 	  if (res != NULL)
1634:src/display.c **** 	    *res++ += '-';
1635:src/display.c **** 	  else
1636:src/display.c **** 	    SET_MANT_SIGN;
1637:src/display.c **** 	  dn_minus(&x, &x);
1638:src/display.c **** 	}
1639:src/display.c **** 
1640:src/display.c **** 	decNumberHR2HMS(&y, &x);
1641:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1642:src/display.c **** 	decNumberRound(&u, &t);
1643:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 44


1644:src/display.c **** 	hms_step(&t, &u, &fs);
1645:src/display.c **** 	hms_step(&u, &t, &sec);
1646:src/display.c **** 	hms_step(&t, &u, &min);
1647:src/display.c **** 	hr = dn_to_int(&t);
1648:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1649:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1650:src/display.c **** 
1651:src/display.c **** 	// degrees
1652:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1653:src/display.c **** 	res = set_dig_s(j, '@', res);
1654:src/display.c **** 	j += SEGS_PER_DIGIT;
1655:src/display.c **** 
1656:src/display.c **** 	// minutes
1657:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1658:src/display.c **** 	res = set_dig_s(j, '\'', res);
1659:src/display.c **** 	j += SEGS_PER_DIGIT;
1660:src/display.c **** 
1661:src/display.c **** 	// seconds
1662:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1663:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1664:src/display.c **** 
1665:src/display.c **** 	// Fractional seconds
1666:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1667:src/display.c **** 
1668:src/display.c **** 	// We're now pointing at the exponent's first digit...
1669:src/display.c **** 	res = set_dig_s(j, '"', res);
1670:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1671:src/display.c **** 
1672:src/display.c **** 	// Check for values too big or small
1673:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1674:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1675:src/display.c **** 	} else if (! dn_eq0(&a)) {
1676:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1677:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1678:src/display.c **** 	  }
1679:src/display.c **** 	}
1680:src/display.c ****       }
1681:src/display.c **** 
1682:src/display.c **** 
1683:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1684:src/display.c **** 	decNumber x, w, n, d, t;
1685:src/display.c **** 	char buf[32], *p = buf;
1686:src/display.c **** 	int j;
1687:src/display.c **** 
1688:src/display.c **** 	if (check_special_dn(rgx, res))
1689:src/display.c **** 	  return 1;
1690:src/display.c **** 	dn_abs(&x, rgx);
1691:src/display.c **** 	if (dn_ge(&x, &const_100000))
1692:src/display.c **** 	  return 0;
1693:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1694:src/display.c **** 	  return 0;
1695:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1696:src/display.c **** 	  if (res != NULL)
1697:src/display.c **** 	    *res++ += '-';
1698:src/display.c **** 	  else
1699:src/display.c **** 	    SET_MANT_SIGN;
1700:src/display.c **** 	}
ARM GAS  /tmp/ccE2jV6G.s 			page 45


1701:src/display.c **** 	decNumberFrac(&w, &x);
1702:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1703:src/display.c **** 
1704:src/display.c **** 	dn_divide(&t, &n, &d);
1705:src/display.c **** 	dn_compare(&t, &t, &w);
1706:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1707:src/display.c **** 
1708:src/display.c **** 	if (dn_eq(&n, &d)) {
1709:src/display.c **** 	  dn_inc(&w);
1710:src/display.c **** 	  decNumberZero(&n);
1711:src/display.c **** 	}
1712:src/display.c **** 
1713:src/display.c **** 	if (!UState.improperfrac) {
1714:src/display.c **** 	  if (!dn_eq0(&w)) {
1715:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1716:src/display.c **** 	    *p++ = ' ';
1717:src/display.c **** 	  }
1718:src/display.c **** 	} else {
1719:src/display.c **** 	  dn_multiply(&x, &w, &d);
1720:src/display.c **** 	  dn_add(&n, &n, &x);
1721:src/display.c **** 	}
1722:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1723:src/display.c **** 	*p++ = '/';
1724:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1725:src/display.c **** 	*p = '\0';
1726:src/display.c **** 	if ((p - 12) > buf) {
1727:src/display.c **** 	  p -= 12;
1728:src/display.c **** 	  *p = '<';
1729:src/display.c **** 	} else	p = buf;
1730:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1731:src/display.c **** 	  res = set_dig_s(j, *p, res);
1732:src/display.c **** 	  j += SEGS_PER_DIGIT;
1733:src/display.c **** 	}
1734:src/display.c **** 
1735:src/display.c **** 	if (dn_eq0(&t))
1736:src/display.c **** 	  p = (char *)S7_fract_EQ;
1737:src/display.c **** 	else if (decNumberIsNegative(&t))
1738:src/display.c **** 	  p = (char *)S7_fract_LT;
1739:src/display.c **** 	else
1740:src/display.c **** 	  p = (char *)S7_fract_GT;
1741:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1742:src/display.c **** 	  res = set_dig_s(j, *p, res);
1743:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1744:src/display.c **** 	}
1745:src/display.c **** 	return 1;
1746:src/display.c ****       }
1747:src/display.c **** 
1748:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1749:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1750:src/display.c **** 	decNumber c;
1751:src/display.c **** 	int true_exp, x=0;
1752:src/display.c **** 	int min_pos_exp, max_neg_exp;
1753:src/display.c **** 
1754:src/display.c **** 	if ( mode != MODE_STD ) {
1755:src/display.c **** 	  min_pos_exp = 9;
1756:src/display.c **** 	  max_neg_exp = -5;
1757:src/display.c **** 	}
ARM GAS  /tmp/ccE2jV6G.s 			page 46


1758:src/display.c **** 	else {
1759:src/display.c **** 	  min_pos_exp = 12;
1760:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1761:src/display.c **** 	}
1762:src/display.c **** 
1763:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1764:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1765:src/display.c **** 
1766:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1767:src/display.c **** 	  x = *dd;
1768:src/display.c **** 	}
1769:src/display.c **** 
1770:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1771:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1772:src/display.c **** 	  *dd += -true_exp;
1773:src/display.c **** 	  return MODE_FIX;
1774:src/display.c **** 	}
1775:src/display.c **** 
1776:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1777:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1778:src/display.c **** 	}
1779:src/display.c **** 	else {
1780:src/display.c **** 	  return MODE_STD;
1781:src/display.c **** 	}
1782:src/display.c ****       }
1783:src/display.c **** #else
1784:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1785:src/display.c **** 	decNumber b, c;
1786:src/display.c **** 
1787:src/display.c **** 	dn_1(&b);
1788:src/display.c **** 	b.exponent -= UState.dispdigs;
1789:src/display.c **** 	dn_abs(&c, z);
1790:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1791:src/display.c **** 	  return MODE_FIX;
1792:src/display.c **** 	return MODE_STD;
1793:src/display.c ****       }
1794:src/display.c **** #endif
1795:src/display.c **** 
1796:src/display.c ****       /* SHOW display mode
1797:src/display.c ****        * in double precision show left or right part
1798:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1799:src/display.c ****        */
1800:src/display.c ****       static void show_x(char *x, int exp) {
1801:src/display.c **** 	const int dbl = is_dblmode();
1802:src/display.c **** 	char *p;
1803:src/display.c **** 	int i, j;
1804:src/display.c **** 	char *upper_str;
1805:src/display.c **** 	enum separator_modes separator_mode;
1806:src/display.c **** 	char decimal_mark;
1807:src/display.c **** 	char thousands_sep;
1808:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1809:src/display.c **** 	const int grouping = 0;
1810:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1811:src/display.c **** 	const int grouping = !UState.nothousands;
1812:src/display.c **** #else
1813:src/display.c **** 	const int grouping = 1;
1814:src/display.c **** #endif
ARM GAS  /tmp/ccE2jV6G.s 			page 47


1815:src/display.c **** 	int negative;
1816:src/display.c **** 
1817:src/display.c **** 	if (x[0] == '-') {
1818:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1819:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1820:src/display.c **** 
1821:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1822:src/display.c **** 	  xcopy(x, small_minus, 4);
1823:src/display.c **** 	  x += 4;
1824:src/display.c **** 	  negative = 4;
1825:src/display.c **** #else
1826:src/display.c **** 	  ++x;
1827:src/display.c **** 	  negative = 1;
1828:src/display.c **** #endif
1829:src/display.c **** 	}
1830:src/display.c **** 	else negative = 0;
1831:src/display.c **** 
1832:src/display.c **** 	p = find_char(x, '\0');
1833:src/display.c **** 	xset(p, '0', 34 - (p - x));
1834:src/display.c **** 
1835:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1836:src/display.c **** 	  separator_mode = SEP_COMMA;
1837:src/display.c **** 	  decimal_mark = '.';
1838:src/display.c **** 	  thousands_sep = ',';
1839:src/display.c **** 	}
1840:src/display.c **** 	else {
1841:src/display.c **** 	  separator_mode = SEP_DOT;
1842:src/display.c **** 	  decimal_mark = ',';
1843:src/display.c **** 	  thousands_sep = '.';
1844:src/display.c **** 	}
1845:src/display.c **** 
1846:src/display.c **** 	if (State2.window) { // right half in double precision mode
1847:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1848:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1849:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1850:src/display.c **** 
1851:src/display.c **** 	  upper_str = x + 3;
1852:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1853:src/display.c **** 	  if (grouping) {
1854:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1855:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1856:src/display.c **** 	    x += 3 + 13 + 7;
1857:src/display.c **** 	  }
1858:src/display.c **** 	  else x += 3 + 13 + 6;
1859:src/display.c **** #else
1860:src/display.c **** 	  upper_str = x + 13;
1861:src/display.c **** 	  xset(upper_str, '.', 3);
1862:src/display.c **** 	  if (grouping) {
1863:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1864:src/display.c **** 	    upper_str[6] = thousands_sep;
1865:src/display.c **** 	    x += 13 + 3 + 7;
1866:src/display.c **** 	  }
1867:src/display.c **** 	  else x += 13 + 3 + 6;
1868:src/display.c **** #endif
1869:src/display.c **** 	  negative = 0;
1870:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1871:src/display.c **** 	}
ARM GAS  /tmp/ccE2jV6G.s 			page 48


1872:src/display.c **** 	else {
1873:src/display.c **** 	  upper_str = x;
1874:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1875:src/display.c **** 	  x[1] = decimal_mark;
1876:src/display.c **** 	  if (grouping) {
1877:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1878:src/display.c **** 	    x[5] = thousands_sep;
1879:src/display.c **** 	    x += 9;
1880:src/display.c **** 	  }
1881:src/display.c **** 	  else x += 8;
1882:src/display.c **** 	  if (dbl) {
1883:src/display.c **** 	    if (exp < 0) {
1884:src/display.c **** 	      x[9] = '-';
1885:src/display.c **** 	      exp = -exp;
1886:src/display.c **** 	    }
1887:src/display.c **** 	    else
1888:src/display.c **** 	      x[9] = ' ';
1889:src/display.c **** 	    j = exp / 1000;
1890:src/display.c **** 	    x[10] = '0' + j;
1891:src/display.c **** 	    exp -= 1000 * j;
1892:src/display.c **** 	  }
1893:src/display.c **** 	  else {
1894:src/display.c **** 	    x[9] = '\0';
1895:src/display.c **** 	    x[10] = '\0';
1896:src/display.c **** 	  }
1897:src/display.c **** 	  xcopy(x + 1, x, 11);
1898:src/display.c **** 	  *x = 0;
1899:src/display.c **** 	  set_exp(exp, 1, CNULL);
1900:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1901:src/display.c **** 	}
1902:src/display.c **** 	if (grouping) {
1903:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1904:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1905:src/display.c **** 	  }
1906:src/display.c **** 	}
1907:src/display.c **** 
1908:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1909:src/display.c **** 	  set_dig(j, x[i]);
1910:src/display.c **** 
1911:src/display.c **** 	*x = '\0';
1912:src/display.c **** 	set_status(upper_str - negative);
1913:src/display.c ****       }
1914:src/display.c **** 
1915:src/display.c **** 
1916:src/display.c ****       /* Display the X register in the numeric portion of the display.
1917:src/display.c ****        * We have to account for the various display modes and numbers of
1918:src/display.c ****        * digits.
1919:src/display.c ****        */
1920:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1921:src/display.c **** 	decNumber z;
1922:src/display.c **** 	int digits = DISPLAY_DIGITS;
1923:src/display.c **** 
1924:src/display.c **** 	if (dbl)
1925:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1926:src/display.c **** 	else
1927:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1928:src/display.c **** 	set_x_dn(&z, res, &digits);
ARM GAS  /tmp/ccE2jV6G.s 			page 49


1929:src/display.c ****       }
1930:src/display.c **** 
1931:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1932:src/display.c **** 	char x[50], *obp = x;
1933:src/display.c **** 	int odig = 0;
1934:src/display.c **** 	int show_exp = 0;
1935:src/display.c **** 	int j;
1936:src/display.c **** 	char mantissa[64];
1937:src/display.c **** 	int exp = 0;
1938:src/display.c **** 	char *p = mantissa;
1939:src/display.c **** 	char *r;
1940:src/display.c **** 	const char *q;
1941:src/display.c **** 	int count, i;
1942:src/display.c **** 	int extra_digits = 0;
1943:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1944:src/display.c **** 	int dd;
1945:src/display.c **** 	int dispdigs;
1946:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1947:src/display.c **** #else
1948:src/display.c **** 	int dd = UState.dispdigs;
1949:src/display.c **** 	int mode = UState.dispmode;
1950:src/display.c **** #endif
1951:src/display.c **** 	int c;
1952:src/display.c **** 	int negative = 0;
1953:src/display.c **** 	int trimzeros = 0;
1954:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1955:src/display.c **** 	const int show_large_exponent = 0;
1956:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1957:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1958:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1959:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1960:src/display.c **** #else
1961:src/display.c **** 	const int show_large_exponent = 1;
1962:src/display.c **** #endif
1963:src/display.c **** 
1964:src/display.c **** 	set_separator_decimal_modes();
1965:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1966:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1967:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1968:src/display.c **** 	    if (State2.hms) {
1969:src/display.c **** 	      set_x_hms(z, res);
1970:src/display.c **** 	      return;
1971:src/display.c **** 	    }
1972:src/display.c **** 	    else if (UState.fract) {
1973:src/display.c **** 	      if (set_x_fract(z, res))
1974:src/display.c **** 		return;
1975:src/display.c **** 	    }
1976:src/display.c **** 	  }
1977:src/display.c **** 	}		
1978:src/display.c **** #else
1979:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1980:src/display.c **** 	  if (State2.hms) {
1981:src/display.c **** 	    set_x_hms(z, res);
1982:src/display.c **** 	    State2.hms = 0;
1983:src/display.c **** 	    return;
1984:src/display.c **** 	  } else if (UState.fract) {
1985:src/display.c **** 	    if (set_x_fract(z, res))
ARM GAS  /tmp/ccE2jV6G.s 			page 50


1986:src/display.c **** 	      return;
1987:src/display.c **** 	  }
1988:src/display.c **** 	}
1989:src/display.c **** #endif
1990:src/display.c **** 
1991:src/display.c **** 	if (check_special_dn(z, res))
1992:src/display.c **** 	  return;
1993:src/display.c **** 
1994:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1995:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1996:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1997:src/display.c **** 	  z->exponent = 0;
1998:src/display.c **** 	}
1999:src/display.c **** 
2000:src/display.c **** 	xset(x, '\0', sizeof(x));
2001:src/display.c **** 
2002:src/display.c **** 	if (dn_eq0(z)) {
2003:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2004:src/display.c **** 	    x[0] = '-';
2005:src/display.c **** 	    x[1] = '0';
2006:src/display.c **** 	  } else
2007:src/display.c **** 	    x[0] = '0';
2008:src/display.c **** 	} else
2009:src/display.c **** 	  decNumberToString(z, x);
2010:src/display.c **** 
2011:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2012:src/display.c **** 	  show_x(x, exp);
2013:src/display.c **** 	  return;
2014:src/display.c **** 	}
2015:src/display.c **** 
2016:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2017:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2018:src/display.c **** 	  //  ALL mode: fill the display
2019:src/display.c **** 	  dd = *display_digits - 1;
2020:src/display.c **** 	else
2021:src/display.c **** 	  dd = dispdigs;
2022:src/display.c **** 
2023:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
2024:src/display.c **** 	  int orig_mode = mode;
2025:src/display.c **** 
2026:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2027:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2028:src/display.c **** 	    // allow zeros to be trimmed
2029:src/display.c **** 	    trimzeros = 1;
2030:src/display.c **** 	  if (orig_mode == MODE_STD)
2031:src/display.c **** 	    dd = *display_digits - 1;
2032:src/display.c ****  	}
2033:src/display.c **** #else
2034:src/display.c **** 	if (mode == MODE_STD) {
2035:src/display.c **** 	  mode = std_round_fix(z);
2036:src/display.c **** 	  trimzeros = 1;
2037:src/display.c **** 	  dd = *display_digits - 1;
2038:src/display.c **** 	} else if (dd >= *display_digits)
2039:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2040:src/display.c **** 	  dd = *display_digits - 1;
2041:src/display.c **** #endif
2042:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 51


2043:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2044:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2045:src/display.c **** 
2046:src/display.c **** 	q = find_char(x, 'E');
2047:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2048:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2049:src/display.c **** 	if (q == NULL) exp = 0;
2050:src/display.c **** 	else {
2051:src/display.c **** 	  exp = s_to_i(q+1);
2052:src/display.c **** 	  if (*q == 'D') exp = -exp;
2053:src/display.c **** 	}
2054:src/display.c **** #else
2055:src/display.c **** 	if (q == NULL) exp = 0;
2056:src/display.c **** 	else exp = s_to_i(q+1);
2057:src/display.c **** #endif
2058:src/display.c **** 
2059:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2060:src/display.c **** 	for (q=x; *q == ' '; q++);
2061:src/display.c **** 	if (!res) {
2062:src/display.c **** 	  CLR_EXP_SIGN;
2063:src/display.c **** 	  CLR_MANT_SIGN;
2064:src/display.c **** 	}
2065:src/display.c **** 	if (*q == '-') {
2066:src/display.c **** 	  negative = 1;
2067:src/display.c **** 	  q++;
2068:src/display.c **** 	} else if (*q == '+')
2069:src/display.c **** 	  q++;
2070:src/display.c **** 	for (; *q == '0'; q++);
2071:src/display.c **** 	if (*q == '.') {
2072:src/display.c **** 	  do
2073:src/display.c **** 	    exp--;
2074:src/display.c **** 	  while (*++q == '0');
2075:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2076:src/display.c **** 	    *p++ = *q++;
2077:src/display.c **** 	} else {
2078:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2079:src/display.c **** 	    *p++ = *q++;
2080:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2081:src/display.c **** 	    *p++ = *q++;
2082:src/display.c **** 	    exp++;
2083:src/display.c **** 	  }
2084:src/display.c **** 	  if (*q == '.') {
2085:src/display.c **** 	    q++;
2086:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2087:src/display.c **** 	      *p++ = *q++;
2088:src/display.c **** 	  }
2089:src/display.c **** 	}
2090:src/display.c **** 
2091:src/display.c **** 	if (mode == MODE_FIX) {
2092:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2093:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2094:src/display.c **** 	  else {
2095:src/display.c **** 	    extra_digits = exp;
2096:src/display.c **** 	    /* We might have push the fixed decimals off the
2097:src/display.c **** 	     * screen so adjust if so.
2098:src/display.c **** 	     */
2099:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
ARM GAS  /tmp/ccE2jV6G.s 			page 52


2100:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2101:src/display.c **** 	  }
2102:src/display.c **** 	}
2103:src/display.c **** 
2104:src/display.c **** 	// Round the mantissa to the number of digits desired
2105:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2106:src/display.c **** 	if (*p >= '5') {	// Round up
2107:src/display.c **** 	  *p = '0';
2108:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2109:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2110:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2111:src/display.c **** 	    mantissa[0] = '1';
2112:src/display.c **** 	    exp++;
2113:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2114:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2115:src/display.c **** 	      extra_digits = 0;
2116:src/display.c **** 	    }
2117:src/display.c **** 	  } else {
2118:src/display.c **** 	    while (*--p == '9')
2119:src/display.c **** 	      *p = '0';
2120:src/display.c **** 	    (*p)++;
2121:src/display.c **** 	  }
2122:src/display.c **** 	}
2123:src/display.c **** 
2124:src/display.c **** 	// Zap what is left
2125:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2126:src/display.c **** 
2127:src/display.c **** 	p = mantissa;
2128:src/display.c **** 	switch (mode) {
2129:src/display.c **** 	default:
2130:src/display.c **** 	case MODE_STD:   
2131:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2132:src/display.c **** 	  if (count != *display_digits)
2133:src/display.c **** 	    count++;
2134:src/display.c **** 	  // Too big or too small to fit on display
2135:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2136:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2137:src/display.c **** 	    case -1:
2138:src/display.c **** 	    case 2:
2139:src/display.c **** 	      *obp++ = *p++;
2140:src/display.c **** 	      odig++;
2141:src/display.c **** 	      dd--;
2142:src/display.c **** 	      exp--;
2143:src/display.c **** 	    case -2:
2144:src/display.c **** 	    case 1:
2145:src/display.c **** 	      *obp++ = *p++;
2146:src/display.c **** 	      odig++;
2147:src/display.c **** 	      dd--;
2148:src/display.c **** 	      exp--;
2149:src/display.c **** 	    case 0:
2150:src/display.c **** 	      ;
2151:src/display.c **** 	    };
2152:src/display.c **** 	    *obp++ = *p++;
2153:src/display.c **** 	    odig++;
2154:src/display.c **** 	    *obp++ = '.';
2155:src/display.c **** 	    for (i=1; i<count; i++) {
2156:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccE2jV6G.s 			page 53


2157:src/display.c **** 	      odig++;
2158:src/display.c **** 	    }
2159:src/display.c **** 	    show_exp = 1;
2160:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2161:src/display.c **** 	    for(i=0; i<=exp; i++) {
2162:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2163:src/display.c **** 		*obp++ = ',';
2164:src/display.c **** 	      *obp++ = *p++;
2165:src/display.c **** 	      odig++;
2166:src/display.c **** 	    }
2167:src/display.c **** 	    *obp++ = '.';
2168:src/display.c **** 	    if (count > (exp + 1)) {
2169:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2170:src/display.c **** 		*obp++ = *p++;
2171:src/display.c **** 		odig++;
2172:src/display.c **** 	      }
2173:src/display.c **** 	    }
2174:src/display.c **** 	  } else {		// All digits to right of decimal point
2175:src/display.c **** 	    *obp++ = '0';
2176:src/display.c **** 	    odig++;
2177:src/display.c **** 	    *obp++ = '.';
2178:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2179:src/display.c **** 	      *obp++ = '0';
2180:src/display.c **** 	      odig++;
2181:src/display.c **** 	    }
2182:src/display.c **** 	    for (i=0; i<count; i++) {
2183:src/display.c **** 	      *obp++ = *p++;
2184:src/display.c **** 	      odig++;
2185:src/display.c **** 	    }
2186:src/display.c **** 	  }
2187:src/display.c **** 	  break;
2188:src/display.c **** 
2189:src/display.c **** 	case MODE_FIX:
2190:src/display.c **** 	  j = 0;
2191:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2192:src/display.c **** 	    for (i=0; i<=exp; i++) {
2193:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2194:src/display.c **** 		*obp++ = ',';
2195:src/display.c **** 	      *obp++ = *p++;
2196:src/display.c **** 	      odig++;
2197:src/display.c **** 	    }
2198:src/display.c **** 	    *obp++ = '.';
2199:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2200:src/display.c **** 	      *obp++ = *p++;
2201:src/display.c **** 	      odig++;
2202:src/display.c **** 	    }
2203:src/display.c **** 	  } else {		// All digits to right of decimal point
2204:src/display.c **** 	    *obp++ = '0';
2205:src/display.c **** 	    odig++;
2206:src/display.c **** 	    *obp++ = '.';
2207:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2208:src/display.c **** 	      *obp++ = '0';
2209:src/display.c **** 	      odig++;
2210:src/display.c **** 	      dd--;
2211:src/display.c **** 	    }
2212:src/display.c **** 	    while (dd-- > 0) {
2213:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccE2jV6G.s 			page 54


2214:src/display.c **** 	      odig++;
2215:src/display.c **** 	    }
2216:src/display.c **** 	  }
2217:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2218:src/display.c **** 	  if (trimzeros)
2219:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2220:src/display.c **** 	      obp--;
2221:src/display.c **** 	      odig--;
2222:src/display.c **** 	    }
2223:src/display.c **** #endif			
2224:src/display.c **** 	  break;
2225:src/display.c **** 
2226:src/display.c **** 	case MODE_ENG:
2227:src/display.c **** 	  switch (exp % 3) {
2228:src/display.c **** 	  case -1:
2229:src/display.c **** 	  case 2:
2230:src/display.c **** 	    *obp++ = *p++;
2231:src/display.c **** 	    odig++;
2232:src/display.c **** 	    dd--;
2233:src/display.c **** 	    exp--;
2234:src/display.c **** 	  case -2:
2235:src/display.c **** 	  case 1:
2236:src/display.c **** 	    *obp++ = *p++;
2237:src/display.c **** 	    odig++;
2238:src/display.c **** 	    dd--;
2239:src/display.c **** 	    exp--;
2240:src/display.c **** 	  case 0:
2241:src/display.c **** 	    ;
2242:src/display.c **** 	  };
2243:src/display.c **** 	  // Falling through
2244:src/display.c **** 
2245:src/display.c **** 	case MODE_SCI:
2246:src/display.c **** 	  *obp++ = *p++;
2247:src/display.c **** 	  odig++;
2248:src/display.c **** 	  *obp++ = '.';
2249:src/display.c **** 	  dd--;
2250:src/display.c **** 	  while (dd-- >= 0) {
2251:src/display.c **** 	    *obp++ = *p++;
2252:src/display.c **** 	    odig++;
2253:src/display.c **** 	  }
2254:src/display.c **** 	  show_exp = 1;
2255:src/display.c **** 	}
2256:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2257:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2258:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2259:src/display.c **** 	    obp--;
2260:src/display.c **** 	    odig--;
2261:src/display.c **** 	  }
2262:src/display.c **** #endif	
2263:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2264:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2265:src/display.c **** 	  set_x_dn(z, res, display_digits);
2266:src/display.c **** 	  return;
2267:src/display.c **** 	}
2268:src/display.c **** 	/* Finally, send the output to the display */
2269:src/display.c **** 	*obp = '\0';
2270:src/display.c **** 	if (odig > *display_digits)
ARM GAS  /tmp/ccE2jV6G.s 			page 55


2271:src/display.c **** 	  odig = *display_digits;
2272:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2273:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2274:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2275:src/display.c **** 	if (negative) {
2276:src/display.c **** 	  if (res) *res++ = '-';
2277:src/display.c **** 	  else {
2278:src/display.c **** 	    if (j == 0)
2279:src/display.c **** 	      SET_MANT_SIGN;
2280:src/display.c **** 	    else
2281:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2282:src/display.c **** 	  }
2283:src/display.c **** 	}
2284:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2285:src/display.c **** 	  if (c == '.') {
2286:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2287:src/display.c **** 	  } else if (c == ',') {
2288:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2289:src/display.c **** 	  } else {
2290:src/display.c **** 	    res = set_dig_s(j, c, res);
2291:src/display.c **** 	    j += SEGS_PER_DIGIT;
2292:src/display.c **** 	  }
2293:src/display.c **** 	}
2294:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2295:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2296:src/display.c **** 	  if ( !res ) {
2297:src/display.c **** 	    set_exp(exp, 4, res);
2298:src/display.c **** 	  }
2299:src/display.c **** 	  else {
2300:src/display.c **** 	    set_exp(exp, 0, res);
2301:src/display.c **** 	  }
2302:src/display.c **** 	}
2303:src/display.c **** #else
2304:src/display.c **** 	if (show_exp)
2305:src/display.c **** 	  set_exp(exp, 0, res);
2306:src/display.c **** #endif
2307:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2308:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2309:src/display.c **** 	*display_digits = odig;
2310:src/display.c ****       }
2311:src/display.c **** 
2312:src/display.c **** #if defined(QTGUI) || defined(IOS)
2313:src/display.c ****       void format_display(char *buf) {
2314:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2315:src/display.c **** 	  {
2316:src/display.c **** 	    const char *p = get_cmdline();
2317:src/display.c **** 	    if (p == NULL) {
2318:src/display.c **** 	      format_reg(regX_idx, buf);
2319:src/display.c **** 	    } else {
2320:src/display.c **** 	      scopy(buf, p);
2321:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2322:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2323:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2324:src/display.c **** 		buf[CmdLineEex] = 'E';
2325:src/display.c **** 		buf[CmdLineEex+1] = '-';
2326:src/display.c **** 	      }
2327:src/display.c **** #  endif
ARM GAS  /tmp/ccE2jV6G.s 			page 56


2328:src/display.c **** 	    }
2329:src/display.c **** 	  }
2330:src/display.c **** 	else {
2331:src/display.c **** 	  buf[0]=0;
2332:src/display.c **** 	}
2333:src/display.c ****       }
2334:src/display.c **** #endif
2335:src/display.c **** 
2336:src/display.c ****       void format_reg(int index, char *buf) {
2337:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2338:src/display.c **** 
2339:src/display.c **** 	if (is_intmode())
2340:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2341:src/display.c **** #ifndef HP16C_MODE_CHANGE
2342:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2343:src/display.c **** 	  decNumber x;
2344:src/display.c **** 	  int s;
2345:src/display.c **** 	  unsigned long long int v;
2346:src/display.c **** 
2347:src/display.c **** 	  getRegister(&x, index);
2348:src/display.c **** 	  v = dn_to_ull(&x, &s);
2349:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2350:src/display.c **** 	}
2351:src/display.c **** #endif
2352:src/display.c **** 	else
2353:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2354:src/display.c ****       }
2355:src/display.c **** 
2356:src/display.c ****       /* Display the status screen */
2357:src/display.c ****       static void show_status(void) {
2358:src/display.c **** 	int i, n;
2359:src/display.c **** 	int j = SEGS_EXP_BASE;
2360:src/display.c **** 	const int status = State2.status - 3;
2361:src/display.c **** 	char buf[16], *p = buf;
2362:src/display.c **** 	unsigned int pc;
2363:src/display.c **** 
2364:src/display.c **** 	if (status == -2) {
2365:src/display.c **** 	  set_status("Free:");
2366:src/display.c **** 	  p = num_arg(buf, free_mem());
2367:src/display.c **** 	  p = scopy(p, " , FL. ");
2368:src/display.c **** 	  p = num_arg(p, free_flash());
2369:src/display.c **** 	  *p = '\0';
2370:src/display.c **** 	  set_digits_string(buf, 0);
2371:src/display.c **** 	}
2372:src/display.c **** 	else if (status == -1) {
2373:src/display.c **** 	  /* Top line */
2374:src/display.c **** 	  p = scopy(buf, "Regs:");
2375:src/display.c **** 	  if (SizeStatRegs)
2376:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2377:src/display.c **** 	  *p = '\0';
2378:src/display.c **** 	  set_status(buf);
2379:src/display.c **** 
2380:src/display.c **** 	  /* Bottom line */
2381:src/display.c **** 	  p = num_arg(buf, global_regs());
2382:src/display.c **** 	  if (LocalRegs < 0) {
2383:src/display.c **** 	    p = scopy(p, " , Loc. ");
2384:src/display.c **** 	    p = num_arg(p, local_regs());
ARM GAS  /tmp/ccE2jV6G.s 			page 57


2385:src/display.c **** 	  }
2386:src/display.c **** 	  *p = '\0';
2387:src/display.c **** 	  set_digits_string(buf, 0);
2388:src/display.c **** 	} else {
2389:src/display.c **** 	  int base;
2390:src/display.c **** 	  int end;
2391:src/display.c **** 	  int group = 10;
2392:src/display.c **** 	  int start = 0;
2393:src/display.c **** 		
2394:src/display.c **** 	  if (status <= 9) {
2395:src/display.c **** 	    base = 10 * status;
2396:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2397:src/display.c **** 	    p = scopy(buf, "FL ");
2398:src/display.c **** 	    p = num_arg_0(p, base, 2);
2399:src/display.c **** 	    *p++ = '-';
2400:src/display.c **** 	    p = num_arg_0(p, end, 2);
2401:src/display.c **** 	    *p = '\0';
2402:src/display.c **** 	    set_status(buf);
2403:src/display.c **** 	  }
2404:src/display.c **** 	  else if (status == 10) {
2405:src/display.c **** 	    base = regX_idx;
2406:src/display.c **** 	    end = regK_idx;
2407:src/display.c **** 	    start = 3;
2408:src/display.c **** 	    group = 4;
2409:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2410:src/display.c **** 	  }
2411:src/display.c **** 	  else { // status == 11
2412:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2413:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2414:src/display.c **** 	    set_status("FL.00-.15");
2415:src/display.c **** 	  }
2416:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2417:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2418:src/display.c **** 	  j += SEGS_PER_DIGIT;
2419:src/display.c **** 	  for (i = start; i < group + start; i++) {
2420:src/display.c **** 	    int k = i + base - start;
2421:src/display.c **** 	    int l = get_user_flag(k);
2422:src/display.c **** 	    k += group;
2423:src/display.c **** 	    if (end >= k) {
2424:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2425:src/display.c **** 	      k += group;
2426:src/display.c **** 	      if (end >= k)
2427:src/display.c **** 		l |= (get_user_flag(k) << 2);
2428:src/display.c **** 	    }
2429:src/display.c **** 	    set_dig(j, l);
2430:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2431:src/display.c **** 	    j += SEGS_PER_DIGIT;
2432:src/display.c **** 	    if (i == 4) {
2433:src/display.c **** 	      set_dig(j, 8);
2434:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2435:src/display.c **** 	      j += SEGS_PER_DIGIT;
2436:src/display.c **** 	    }
2437:src/display.c **** 	  }
2438:src/display.c **** 	}
2439:src/display.c **** 
2440:src/display.c **** 	j = SEGS_EXP_BASE;
2441:src/display.c **** 	pc = state_pc();
ARM GAS  /tmp/ccE2jV6G.s 			page 58


2442:src/display.c **** 	if (isXROM(pc))
2443:src/display.c **** 	  pc = 1;
2444:src/display.c **** 	for (n=i=0; i<4; i++) {
2445:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2446:src/display.c **** 	    if (++n == 4) {
2447:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2449:src/display.c **** 	    } else {
2450:src/display.c **** 	      set_dig(j, 'A'+i);
2451:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2452:src/display.c **** 	    }
2453:src/display.c **** 	  }
2454:src/display.c **** 	}
2455:src/display.c ****       }
2456:src/display.c **** 
2457:src/display.c **** 
2458:src/display.c ****       /* Display the list of alpha labels */
2459:src/display.c ****       static void show_label(void) {
2460:src/display.c **** 	char buf[16];
2461:src/display.c **** 	unsigned short int pc = State2.digval;
2462:src/display.c **** 	unsigned int op = getprog(pc);
2463:src/display.c **** 	int n = nLIB(pc);
2464:src/display.c **** 	unsigned short int lblpc;
2465:src/display.c **** 
2466:src/display.c **** 	set_status(prt((opcode)op, buf));
2467:src/display.c **** 	set_digits_string(libname[n], 0);
2468:src/display.c **** #ifndef REALBUILD
2469:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2470:src/display.c **** #endif
2471:src/display.c **** 
2472:src/display.c **** 	if (op & OP_DBL) {
2473:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2474:src/display.c **** 	  if (lblpc != pc) {
2475:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2476:src/display.c **** 	    n = nLIB(lblpc);
2477:src/display.c **** 	    if (n == REGION_RAM)
2478:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2479:src/display.c **** 	    else {
2480:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2481:src/display.c **** #ifndef REALBUILD
2482:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2483:src/display.c **** #endif
2484:src/display.c **** 	    }
2485:src/display.c **** 	  }
2486:src/display.c **** 	}
2487:src/display.c ****       }
2488:src/display.c **** 
2489:src/display.c ****       /* Display a list of register contents */
2490:src/display.c ****       static void show_registers(void) {
2491:src/display.c **** 	char buf[16], *bp;
2492:src/display.c **** 	int n = State2.digval;
2493:src/display.c **** 	
2494:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2495:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2496:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2497:src/display.c **** 	  n;
2498:src/display.c **** #else
ARM GAS  /tmp/ccE2jV6G.s 			page 59


2499:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2500:src/display.c **** 	  n;
2501:src/display.c **** #endif
2502:src/display.c **** 
2503:src/display.c **** 	if (State2.disp_as_alpha) {
2504:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2505:src/display.c **** 	}
2506:src/display.c **** 	else {
2507:src/display.c **** 	  xset(buf, '\0', 16);
2508:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2509:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2510:src/display.c **** #else
2511:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2512:src/display.c **** #endif
2513:src/display.c **** 	  if (State2.local) {
2514:src/display.c **** 	    *bp++ = '.';
2515:src/display.c **** 	    if (n >= 100) {
2516:src/display.c **** 	      *bp++ = '1';
2517:src/display.c **** 	      n -= 100;
2518:src/display.c **** 	    }
2519:src/display.c **** 	  }
2520:src/display.c **** 	  if (n < 100)
2521:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2522:src/display.c **** 	  else
2523:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2524:src/display.c **** 	  set_status(buf);
2525:src/display.c **** 	}
2526:src/display.c **** 	format_reg(reg, CNULL);
2527:src/display.c ****       }
2528:src/display.c **** 
2529:src/display.c **** 
2530:src/display.c ****       static void set_annunciators(void)
2531:src/display.c ****       {
2532:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2533:src/display.c **** 
2534:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2535:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2536:src/display.c **** 	 * browsing constants.
2537:src/display.c **** 	 */
2538:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2539:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2540:src/display.c **** #else
2541:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2542:src/display.c **** #endif
2543:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2546:src/display.c **** 	set_IO_annunciator();
2547:src/display.c **** 
2548:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2549:src/display.c **** 	 */
2550:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2552:src/display.c ****       }
2553:src/display.c **** 
2554:src/display.c **** 
2555:src/display.c ****       /*
ARM GAS  /tmp/ccE2jV6G.s 			page 60


2556:src/display.c ****        *  Toggle the little "=" sign
2557:src/display.c ****        */
2558:src/display.c ****       void set_IO_annunciator(void) {
2559:src/display.c **** #ifndef DM42
2560:src/display.c **** 	int on = SerialOn
2561:src/display.c **** #endif
2562:src/display.c **** #ifdef DM42
2563:src/display.c **** 	  int on = 0
2564:src/display.c **** #endif
2565:src/display.c **** #ifdef REALBUILD
2566:src/display.c **** 	  || DebugFlag
2567:src/display.c **** #endif
2568:src/display.c **** #ifdef INFRARED
2569:src/display.c **** 	  || PrinterColumn != 0
2570:src/display.c **** #endif
2571:src/display.c **** 	  ;
2572:src/display.c **** 
2573:src/display.c **** 	if (on != IoAnnunciator) {
2574:src/display.c **** 	  dot(LIT_EQ, on);
2575:src/display.c **** 	  IoAnnunciator = on;
2576:src/display.c **** 	  finish_display(); //LIT_EQ
2577:src/display.c **** 	}
2578:src/display.c ****       }
2579:src/display.c **** 
2580:src/display.c **** #ifdef TOP_ROW
2581:src/display.c ****       /*
2582:src/display.c ****        *  Update the display
2583:src/display.c ****        */
2584:src/display.c ****       void display(void) {
2585:src/display.c **** 	int i, j;
2586:src/display.c **** 	char buf[40], *bp = buf;
2587:src/display.c **** 	const char *p;
2588:src/display.c **** 	int annuc = 0;
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2590:src/display.c **** 	int skip = 0;
2591:src/display.c **** 	int x_disp = 0;
2592:src/display.c **** 	const int shift = cur_shift();
2593:src/display.c **** 
2594:src/display.c **** 	no_status_top = 0;
2595:src/display.c **** 	if (State2.disp_freeze) {
2596:src/display.c **** 	  State2.disp_freeze = 0;
2597:src/display.c **** 	  State2.disp_temp = 1;
2598:src/display.c **** #ifdef CONSOLE
2599:src/display.c **** 	  JustDisplayed = 1;
2600:src/display.c **** #endif
2601:src/display.c **** 	  ShowRPN = 0;
2602:src/display.c **** 	  return;
2603:src/display.c **** 	}
2604:src/display.c **** 
2605:src/display.c **** 	if (WasDataEntry) {
2606:src/display.c **** #if defined(QTGUI) || defined(IOS)
2607:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2608:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2609:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2610:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2611:src/display.c **** #endif
2612:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
ARM GAS  /tmp/ccE2jV6G.s 			page 61


2613:src/display.c **** 
2614:src/display.c **** 	  // Erase 7-segment display
2615:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2616:src/display.c **** 	    clr_dot(i);
2617:src/display.c **** 	  }
2618:src/display.c **** 	  goto only_update_x;
2619:src/display.c **** 	}
2620:src/display.c **** #ifdef INCLUDE_YREG_CODE
2621:src/display.c **** #  ifdef YREG_ALWAYS_ON
2622:src/display.c **** 	const int yreg_enabled = 1;
2623:src/display.c **** #  else
2624:src/display.c **** 	const int yreg_enabled = UState.show_y;
2625:src/display.c **** #  endif
2626:src/display.c **** #else
2627:src/display.c **** 	const int yreg_enabled = 0;
2628:src/display.c **** #endif
2629:src/display.c **** 	// Clear display
2630:src/display.c **** 	reset_disp();
2631:src/display.c **** 
2632:src/display.c **** 	
2633:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2634:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2635:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2636:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2637:src/display.c **** 	/*   set_status(buf); */
2638:src/display.c **** 	/* } */
2639:src/display.c **** 	if (State2.version) {
2640:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2641:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2642:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2643:src/display.c **** #ifndef REALBUILD
2644:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2645:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2646:src/display.c **** #endif
2647:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2648:src/display.c **** 	  set_status(vers);
2649:src/display.c **** 	  skip = 1;
2650:src/display.c **** 	  goto nostk;
2651:src/display.c **** 	} else if (State2.confirm) {
2652:src/display.c **** 	  if (yreg_enabled) {
2653:src/display.c **** 	    set_status_top(S_SURE);
2654:src/display.c **** 	    no_status_top = 1;
2655:src/display.c **** 	    annuc = State2.runmode;
2656:src/display.c **** 	  }
2657:src/display.c **** 	  else {
2658:src/display.c **** 	    set_status(S_SURE);
2659:src/display.c **** 	  }
2660:src/display.c **** 	} else if (State2.hyp) {
2661:src/display.c **** 	  bp = scopy(bp, "HYP");
2662:src/display.c **** 	  if (! State2.dot)
2663:src/display.c **** 	    *bp++ = '\235';
2664:src/display.c **** 	  if (yreg_enabled) {
2665:src/display.c **** 	    set_status_top(buf);
2666:src/display.c **** 	    no_status_top = 1;
2667:src/display.c **** 	    annuc = State2.runmode;
2668:src/display.c **** 	  }
2669:src/display.c **** 	  else {
ARM GAS  /tmp/ccE2jV6G.s 			page 62


2670:src/display.c **** 	    set_status(buf);
2671:src/display.c **** 	  }
2672:src/display.c **** 	} else if (State2.gtodot) {
2673:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2674:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2675:src/display.c **** 	  if (State2.numdigit > 0)
2676:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2677:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2678:src/display.c **** 	  *bp++ = '_';
2679:src/display.c **** 	  if (yreg_enabled) {
2680:src/display.c **** 	    set_status_top(buf);
2681:src/display.c **** 	    no_status_top = 1;
2682:src/display.c **** 	    annuc = State2.runmode;
2683:src/display.c **** 	  }
2684:src/display.c **** 	  else {
2685:src/display.c **** 	    set_status(buf);
2686:src/display.c **** 	  }
2687:src/display.c **** 	} else if (State2.rarg) {
2688:src/display.c **** 	  /* Commands with arguments */
2689:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2690:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2691:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2692:src/display.c **** #endif
2693:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2694:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2695:src/display.c **** 	  if (State2.dot) {
2696:src/display.c **** 	    *bp++ = 's';
2697:src/display.c **** 	    *bp++ = '_';
2698:src/display.c **** 	  } else if (shift == SHIFT_F) {
2699:src/display.c **** 	    *bp++ = '\021';
2700:src/display.c **** 	    *bp++ = '_';
2701:src/display.c **** 	  } else {
2702:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2703:src/display.c **** 	       : State2.ind ? 2 
2704:src/display.c **** 	       : num_arg_digits(CmdBase); */
2705:src/display.c **** 	    if (State2.local)
2706:src/display.c **** 	      *bp++ = '.';
2707:src/display.c **** 	    if (State2.numdigit > 0) {
2708:src/display.c **** 	      if (State2.shuffle)
2709:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2710:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2711:src/display.c **** 	      else
2712:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2713:src/display.c **** 	    }
2714:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2715:src/display.c **** 	    *bp++ = '_';
2716:src/display.c **** 	  }
2717:src/display.c **** 	  if (yreg_enabled) {
2718:src/display.c **** 	    set_status_top(buf);
2719:src/display.c **** 	    no_status_top = 1;
2720:src/display.c **** 	    annuc = State2.runmode;
2721:src/display.c **** 	  }
2722:src/display.c **** 	  else {
2723:src/display.c **** 	    set_status(buf);
2724:src/display.c **** 	  }
2725:src/display.c **** 	} else if (State2.test != TST_NONE) {
2726:src/display.c **** 	  *bp++ = 'x';
ARM GAS  /tmp/ccE2jV6G.s 			page 63


2727:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2728:src/display.c **** 	  *bp++ = '_';
2729:src/display.c **** 	  *bp++ = '?';
2730:src/display.c **** 	  if (yreg_enabled) {
2731:src/display.c **** 	    set_status_top(buf);
2732:src/display.c **** 	    no_status_top = 1;
2733:src/display.c **** 	    annuc = State2.runmode;
2734:src/display.c **** 	  }
2735:src/display.c **** 	  else {
2736:src/display.c **** 	    set_status(buf);
2737:src/display.c **** 	  }
2738:src/display.c **** 	} else if (cata) {
2739:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2740:src/display.c **** 	  char b2[16];
2741:src/display.c **** 	  const char *p;
2742:src/display.c **** 
2743:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2744:src/display.c **** 	  p = catcmd(op, b2);
2745:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2746:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2747:src/display.c **** 	  bp = scopy(bp, p);
2748:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2749:src/display.c **** 	    // State2.disp_small = 1;
2750:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2751:src/display.c **** 	      set_digits_string("0 to 255", 0);
2752:src/display.c **** 	    else
2753:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2754:src/display.c **** 	    skip = 1;
2755:src/display.c **** 	  } else if (State2.runmode) {
2756:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2757:src/display.c **** 	      decNumber x, r;
2758:src/display.c **** 	      decimal64 z;
2759:src/display.c **** 
2760:src/display.c **** 	      getX(&x);
2761:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2762:src/display.c **** 		const unsigned int f = argKIND(op);
2763:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2764:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2765:src/display.c **** 		  update_speed(0);
2766:src/display.c **** 		  fp(&r, &x);
2767:src/display.c **** 		}
2768:src/display.c **** 		else
2769:src/display.c **** 		  set_NaN(&r);
2770:src/display.c **** 	      } else
2771:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2772:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2773:src/display.c **** 	      packed_from_number(&z, &r);
2774:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2775:src/display.c **** 	      skip = 1;
2776:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2777:src/display.c **** 	      REGISTER z, *const x = StackBase;
2778:src/display.c **** 	      copyreg(&z, x);
2779:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2780:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2781:src/display.c **** 	      copyreg(x, &z);
2782:src/display.c **** 	      skip = 1;
2783:src/display.c **** 	    }
ARM GAS  /tmp/ccE2jV6G.s 			page 64


2784:src/display.c **** 	  }
2785:src/display.c **** 	  if (yreg_enabled) {
2786:src/display.c **** 	    set_status_top(buf);
2787:src/display.c **** 	    no_status_top = 1;
2788:src/display.c **** 	    annuc = State2.runmode;
2789:src/display.c **** 	  }
2790:src/display.c **** 	  else {
2791:src/display.c **** 	    set_status(buf);
2792:src/display.c **** 	  }
2793:src/display.c **** 	} else if (State2.multi) {
2794:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2795:src/display.c **** 	  if (State2.numdigit > 0) {
2796:src/display.c **** 	    *bp++ = (char) State2.digval;
2797:src/display.c **** 	    if (State2.numdigit > 1)
2798:src/display.c **** 	      *bp++ = State2.digval2;
2799:src/display.c **** 	  }
2800:src/display.c **** 	  if (yreg_enabled) {
2801:src/display.c **** 	    set_status_top(buf);
2802:src/display.c **** 	    no_status_top = 1;
2803:src/display.c **** 	    annuc = State2.runmode;
2804:src/display.c **** 	  }
2805:src/display.c **** 	  else {
2806:src/display.c **** 	    set_status(buf);
2807:src/display.c **** 	  }
2808:src/display.c **** 	} else if (State2.status) {
2809:src/display.c **** 	  show_status();
2810:src/display.c **** 	  skip = 1;
2811:src/display.c **** 	} else if (State2.labellist) {
2812:src/display.c **** 	  show_label();
2813:src/display.c **** 	  skip = 1;
2814:src/display.c **** 	} else if (State2.registerlist) {
2815:src/display.c **** 	  show_registers();
2816:src/display.c **** 	  skip = 1;
2817:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2818:src/display.c **** 	    annunciators();
2819:src/display.c **** 	  }
2820:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2821:src/display.c **** 	} else if (State2.disp_as_alpha) {
2822:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2823:src/display.c **** #endif
2824:src/display.c **** 	} else if (State2.runmode) {
2825:src/display.c **** 	  if (DispMsg) { 
2826:src/display.c **** 	    set_status(DispMsg);
2827:src/display.c **** 	  } else if (DispPlot) {
2828:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2829:src/display.c **** 	  } else if (State2.alphas) {
2830:src/display.c **** 	    bp = scopy(buf, Alpha);
2831:src/display.c **** 	    j = State2.alpha_pos;
2832:src/display.c **** 	    if (j != 0) {
2833:src/display.c **** 	      i = slen(buf);
2834:src/display.c **** 	      j *= 6;
2835:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2836:src/display.c **** 		{
2837:src/display.c **** 		  buf[ (i - j) ] = '\0';
2838:src/display.c **** 		  set_status_right(buf);
2839:src/display.c **** 		}
2840:src/display.c **** 	      else {
ARM GAS  /tmp/ccE2jV6G.s 			page 65


2841:src/display.c **** 		set_status(buf);
2842:src/display.c **** 	      }
2843:src/display.c **** 	    }
2844:src/display.c **** 	    else {
2845:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2846:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2847:src/display.c **** 		*bp++ = '\0';
2848:src/display.c **** 	      }
2849:src/display.c **** 	      set_status_right(buf);
2850:src/display.c **** 	    }
2851:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2852:src/display.c **** 	      bp = buf;
2853:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2854:src/display.c **** 	      *bp++ = '\0';
2855:src/display.c **** 	      set_status_top(buf);
2856:src/display.c **** 	      no_status_top = 1;
2857:src/display.c **** 	      //	      annuc = State2.runmode;
2858:src/display.c **** 	    }
2859:src/display.c **** 	  }
2860:src/display.c **** 	  else {
2861:src/display.c **** 	    annuc = 1;
2862:src/display.c **** 	  }
2863:src/display.c **** 	}
2864:src/display.c **** 	else {
2865:src/display.c **** #ifndef DM42
2866:src/display.c **** 	  show_progtrace(buf);
2867:src/display.c **** #endif
2868:src/display.c **** 	  i = state_pc();
2869:src/display.c **** 	  if (i > 0)
2870:src/display.c **** 	    set_status(prt(getprog(i), buf));
2871:src/display.c **** 	  else
2872:src/display.c **** 	    set_status("");
2873:src/display.c **** 	  set_dot(STO_annun);
2874:src/display.c **** 	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2875:src/display.c **** 	    annuc = 1;
2876:src/display.c **** 	  goto nostk;
2877:src/display.c **** 	}
2878:src/display.c **** 	show_stack();
2879:src/display.c ****       nostk:
2880:src/display.c **** 	show_flags();
2881:src/display.c **** 	if (!skip) {
2882:src/display.c **** 	  if (State2.runmode) {
2883:src/display.c **** 	  only_update_x:
2884:src/display.c **** 	    p = get_cmdline();
2885:src/display.c **** 	    if (p == NULL || cata) {
2886:src/display.c **** 	      if (ShowRegister != -1) {
2887:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2888:src/display.c **** 		format_reg(ShowRegister, CNULL);
2889:src/display.c **** 	      }
2890:src/display.c **** 	      else
2891:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2892:src/display.c **** 	    } else {
2893:src/display.c **** 	      disp_x(p);
2894:src/display.c **** 	      x_disp = 1;
2895:src/display.c **** 	    }
2896:src/display.c **** 	    if (WasDataEntry) {
2897:src/display.c **** 	      goto finish;
ARM GAS  /tmp/ccE2jV6G.s 			page 66


2898:src/display.c **** 	    }
2899:src/display.c **** 	  } else {
2900:src/display.c **** 	    unsigned int pc = state_pc();
2901:src/display.c **** 	    unsigned int upc = user_pc(pc);
2902:src/display.c **** 	    const int n = nLIB(pc);
2903:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2904:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2905:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2906:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2907:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2908:src/display.c **** #ifndef REALBUILD
2909:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2910:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2911:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2912:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2913:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2914:src/display.c **** 	      char *b=buf;
2915:src/display.c **** 	      char *l=LastDisplayedNumber;
2916:src/display.c **** 	      *l++=' ';
2917:src/display.c **** 	      while(*b) {
2918:src/display.c **** 		*l++=*b++;
2919:src/display.c **** 		*l++=' ';
2920:src/display.c **** 	      }
2921:src/display.c **** 	      *l=0;
2922:src/display.c **** 	    }
2923:src/display.c **** #endif
2924:src/display.c **** 	  }
2925:src/display.c **** 	}
2926:src/display.c **** 	set_annunciators();
2927:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2928:src/display.c **** 	  ShowRPN = 0;
2929:src/display.c **** 	  dot(RPN, 0);
2930:src/display.c **** 	}
2931:src/display.c **** 	// disp_temp disables the <- key
2932:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2933:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2934:src/display.c **** 
2935:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2936:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2937:src/display.c **** 	  annunciators();
2938:src/display.c ****  	State2.hms = 0;
2939:src/display.c **** #else
2940:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2941:src/display.c **** 	  annunciators();
2942:src/display.c **** #endif
2943:src/display.c **** 
2944:src/display.c ****       finish:
2945:src/display.c **** 	State2.version = 0;
2946:src/display.c **** 	State2.disp_as_alpha = 0;
2947:src/display.c **** 	State2.smode = SDISP_NORMAL;
2948:src/display.c **** 	State2.invalid_disp = 0;
2949:src/display.c **** 	ShowRegister = regX_idx;
2950:src/display.c **** 	DispMsg = CNULL;
2951:src/display.c **** 	DispPlot = 0;
2952:src/display.c **** 	State2.disp_small = 0;
2953:src/display.c **** 	finish_display();
2954:src/display.c **** 	no_status_top = 0;
ARM GAS  /tmp/ccE2jV6G.s 			page 67


2955:src/display.c **** #ifdef CONSOLE
2956:src/display.c **** 	JustDisplayed = 1;
2957:src/display.c **** #endif
2958:src/display.c ****       }
2959:src/display.c **** #else
2960:src/display.c ****       /*
2961:src/display.c ****        *  Update the display
2962:src/display.c ****        */
2963:src/display.c ****       void display(void) {
2964:src/display.c **** 	int i, j;
2965:src/display.c **** 	char buf[40], *bp = buf;
2966:src/display.c **** 	const char *p;
2967:src/display.c **** 	int annuc = 0;
2968:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2969:src/display.c **** 	int skip = 0;
2970:src/display.c **** 	int x_disp = 0;
2971:src/display.c **** 	const int shift = cur_shift();
2972:src/display.c **** 
2973:src/display.c **** 
2974:src/display.c **** 
2975:src/display.c **** 	if (State2.disp_freeze) {
2976:src/display.c **** 	  State2.disp_freeze = 0;
2977:src/display.c **** 	  State2.disp_temp = 1;
2978:src/display.c **** #ifdef CONSOLE
2979:src/display.c **** 	  JustDisplayed = 1;
2980:src/display.c **** #endif
2981:src/display.c **** 	  ShowRPN = 0;
2982:src/display.c **** 	  return;
2983:src/display.c **** 	}
2984:src/display.c **** 
2985:src/display.c **** 	if (WasDataEntry) {
2986:src/display.c **** #if defined(QTGUI) || defined(IOS)
2987:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2988:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2989:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2990:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2991:src/display.c **** #endif
2992:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2993:src/display.c **** 
2994:src/display.c **** 	  // Erase 7-segment display
2995:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2996:src/display.c **** 	    clr_dot(i);
2997:src/display.c **** 	  }
2998:src/display.c **** 	  goto only_update_x;
2999:src/display.c **** 	}
3000:src/display.c **** 
3001:src/display.c **** 	// Clear display
3002:src/display.c **** 	reset_disp();
3003:src/display.c **** 
3004:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3005:src/display.c **** 	if (State2.cmplx  && !cata) {
3006:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3007:src/display.c **** 	  set_status(buf);
3008:src/display.c **** 	}
3009:src/display.c **** 	if (State2.version) {
3010:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3011:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
ARM GAS  /tmp/ccE2jV6G.s 			page 68


3012:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3013:src/display.c **** #ifndef REALBUILD
3014:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3015:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3016:src/display.c **** #endif
3017:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3018:src/display.c **** 	  set_status(vers);
3019:src/display.c **** 	  skip = 1;
3020:src/display.c **** 	  goto nostk;
3021:src/display.c **** 	} else if (State2.confirm) {
3022:src/display.c **** 	  set_status(S_SURE);
3023:src/display.c **** 	} else if (State2.hyp) {
3024:src/display.c **** 	  bp = scopy(bp, "HYP");
3025:src/display.c **** 	  if (! State2.dot)
3026:src/display.c **** 	    *bp++ = '\235';
3027:src/display.c **** 	  set_status(buf);
3028:src/display.c **** 	} else if (State2.gtodot) {
3029:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3030:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3031:src/display.c **** 	  if (State2.numdigit > 0)
3032:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3033:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3034:src/display.c **** 	  *bp++ = '_';
3035:src/display.c **** 	  set_status(buf);
3036:src/display.c **** 	} else if (State2.rarg) {
3037:src/display.c **** 	  /* Commands with arguments */
3038:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3039:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
3040:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3041:src/display.c **** #endif
3042:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3043:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3044:src/display.c **** 	  if (State2.dot) {
3045:src/display.c **** 	    *bp++ = 's';
3046:src/display.c **** 	    *bp++ = '_';
3047:src/display.c **** 	  } else if (shift == SHIFT_F) {
3048:src/display.c **** 	    *bp++ = '\021';
3049:src/display.c **** 	    *bp++ = '_';
3050:src/display.c **** 	  } else {
3051:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3052:src/display.c **** 	       : State2.ind ? 2 
3053:src/display.c **** 	       : num_arg_digits(CmdBase); */
3054:src/display.c **** 	    if (State2.local)
3055:src/display.c **** 	      *bp++ = '.';
3056:src/display.c **** 	    if (State2.numdigit > 0) {
3057:src/display.c **** 	      if (State2.shuffle)
3058:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3059:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3060:src/display.c **** 	      else
3061:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3062:src/display.c **** 	    }
3063:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3064:src/display.c **** 	    *bp++ = '_';
3065:src/display.c **** 	  }
3066:src/display.c **** 	  set_status(buf);
3067:src/display.c **** 	} else if (State2.test != TST_NONE) {
3068:src/display.c **** 	  *bp++ = 'x';
ARM GAS  /tmp/ccE2jV6G.s 			page 69


3069:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3070:src/display.c **** 	  *bp++ = '_';
3071:src/display.c **** 	  *bp++ = '?';
3072:src/display.c **** 	  set_status(buf);
3073:src/display.c **** 	} else if (cata) {
3074:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3075:src/display.c **** 	  char b2[16];
3076:src/display.c **** 	  const char *p;
3077:src/display.c **** 
3078:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3079:src/display.c **** 	  p = catcmd(op, b2);
3080:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3081:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3082:src/display.c **** 	  bp = scopy(bp, p);
3083:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3084:src/display.c **** 	    // State2.disp_small = 1;
3085:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3086:src/display.c **** 	      set_digits_string("0 to 255", 0);
3087:src/display.c **** 	    else
3088:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3089:src/display.c **** 	    skip = 1;
3090:src/display.c **** 	  } else if (State2.runmode) {
3091:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3092:src/display.c **** 	      decNumber x, r;
3093:src/display.c **** 	      decimal64 z;
3094:src/display.c **** 
3095:src/display.c **** 	      getX(&x);
3096:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3097:src/display.c **** 		const unsigned int f = argKIND(op);
3098:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3099:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3100:src/display.c **** 		  update_speed(0);
3101:src/display.c **** 		  fp(&r, &x);
3102:src/display.c **** 		}
3103:src/display.c **** 		else
3104:src/display.c **** 		  set_NaN(&r);
3105:src/display.c **** 	      } else
3106:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3107:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3108:src/display.c **** 	      packed_from_number(&z, &r);
3109:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3110:src/display.c **** 	      skip = 1;
3111:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3112:src/display.c **** 	      REGISTER z, *const x = StackBase;
3113:src/display.c **** 	      copyreg(&z, x);
3114:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3115:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3116:src/display.c **** 	      copyreg(x, &z);
3117:src/display.c **** 	      skip = 1;
3118:src/display.c **** 	    }
3119:src/display.c **** 	  }
3120:src/display.c **** 	  set_status(buf);
3121:src/display.c **** 	} else if (State2.multi) {
3122:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3123:src/display.c **** 	  if (State2.numdigit > 0) {
3124:src/display.c **** 	    *bp++ = (char) State2.digval;
3125:src/display.c **** 	    if (State2.numdigit > 1)
ARM GAS  /tmp/ccE2jV6G.s 			page 70


3126:src/display.c **** 	      *bp++ = State2.digval2;
3127:src/display.c **** 	  }
3128:src/display.c **** 	  set_status(buf);
3129:src/display.c **** 	} else if (State2.status) {
3130:src/display.c **** 	  show_status();
3131:src/display.c **** 	  skip = 1;
3132:src/display.c **** 	} else if (State2.labellist) {
3133:src/display.c **** 	  show_label();
3134:src/display.c **** 	  skip = 1;
3135:src/display.c **** 	} else if (State2.registerlist) {
3136:src/display.c **** 	  show_registers();
3137:src/display.c **** 	  skip = 1;
3138:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3139:src/display.c **** 	    annunciators();
3140:src/display.c **** 	  }
3141:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3142:src/display.c **** 	} else if (State2.disp_as_alpha) {
3143:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3144:src/display.c **** #endif
3145:src/display.c **** 	} else if (State2.runmode) {
3146:src/display.c **** 	  if (DispMsg) { 
3147:src/display.c **** 	    set_status(DispMsg);
3148:src/display.c **** 	  } else if (DispPlot) {
3149:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3150:src/display.c **** 	  } else if (State2.alphas) {
3151:src/display.c **** #if 0
3152:src/display.c **** 	    set_digits_string("AlpHA", 0);
3153:src/display.c **** #endif
3154:src/display.c **** 	    bp = scopy(buf, Alpha);
3155:src/display.c **** 	    j = State2.alpha_pos;
3156:src/display.c **** 	    if (j != 0) {
3157:src/display.c **** 	      i = slen(buf);
3158:src/display.c **** 	      //				
3159:src/display.c **** 	      j *= 6;
3160:src/display.c **** #ifdef BIGGER_DISPLAY
3161:src/display.c **** 	      if ( i - j >= 20 )
3162:src/display.c **** #else
3163:src/display.c **** 	      if ( i - j >= 12 )
3164:src/display.c **** #endif
3165:src/display.c **** 		{
3166:src/display.c **** 		buf[ (i - j) ] = '\0';
3167:src/display.c **** 		set_status_right(buf);
3168:src/display.c **** 		}
3169:src/display.c **** 	      else {
3170:src/display.c **** 		set_status(buf);
3171:src/display.c **** 	      }
3172:src/display.c **** 	    } else {
3173:src/display.c **** 	      if (shift != SHIFT_N) {
3174:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3175:src/display.c **** 		*bp++ = '\0';
3176:src/display.c **** 	      }
3177:src/display.c **** 	      set_status_right(buf);
3178:src/display.c **** 	    }
3179:src/display.c **** 	  } else {
3180:src/display.c **** 	    annuc = 1;
3181:src/display.c **** 	  }
3182:src/display.c **** 	} else {
ARM GAS  /tmp/ccE2jV6G.s 			page 71


3183:src/display.c **** #ifndef DM42
3184:src/display.c **** 	  show_progtrace(buf);
3185:src/display.c **** #endif
3186:src/display.c **** 	  i = state_pc();
3187:src/display.c **** 	  if (i > 0)
3188:src/display.c **** 	    set_status(prt(getprog(i), buf));
3189:src/display.c **** 	  else
3190:src/display.c **** 	    set_status("");
3191:src/display.c **** 	  set_dot(STO_annun);
3192:src/display.c **** #if 0
3193:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3194:src/display.c **** 	    unsigned short int crc;
3195:src/display.c **** 	    crc = checksum_program();
3196:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3197:src/display.c **** 	    for (i=0; i<4; i++) {
3198:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3199:src/display.c **** 	      crc >>= 4;
3200:src/display.c **** 	      j += SEGS_PER_DIGIT;
3201:src/display.c **** 	    }
3202:src/display.c **** 	    skip = 1;
3203:src/display.c **** 	  }
3204:src/display.c **** 	  else
3205:src/display.c **** #endif
3206:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3207:src/display.c **** 	      annuc = 1;
3208:src/display.c **** 	  goto nostk;
3209:src/display.c **** 	}
3210:src/display.c **** 	show_stack();
3211:src/display.c ****       nostk:	show_flags();
3212:src/display.c **** 	if (!skip) {
3213:src/display.c **** 	  if (State2.runmode) {
3214:src/display.c **** 	  only_update_x:
3215:src/display.c **** 	    p = get_cmdline();
3216:src/display.c **** 	    if (p == NULL || cata) {
3217:src/display.c **** 	      if (ShowRegister != -1) {
3218:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3219:src/display.c **** 		format_reg(ShowRegister, CNULL);
3220:src/display.c **** 	      }
3221:src/display.c **** 	      else
3222:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3223:src/display.c **** 	    } else {
3224:src/display.c **** 	      disp_x(p);
3225:src/display.c **** 	      x_disp = 1;
3226:src/display.c **** 	    }
3227:src/display.c **** 	    if (WasDataEntry) {
3228:src/display.c **** 	      goto finish;
3229:src/display.c **** 	    }
3230:src/display.c **** 	  } else {
3231:src/display.c **** 	    unsigned int pc = state_pc();
3232:src/display.c **** 	    unsigned int upc = user_pc(pc);
3233:src/display.c **** 	    const int n = nLIB(pc);
3234:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3235:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3236:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3237:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3238:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3239:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccE2jV6G.s 			page 72


3240:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3241:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3242:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3243:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3244:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3245:src/display.c **** 	      char *b=buf;
3246:src/display.c **** 	      char *l=LastDisplayedNumber;
3247:src/display.c **** 	      *l++=' ';
3248:src/display.c **** 	      while(*b) {
3249:src/display.c **** 		*l++=*b++;
3250:src/display.c **** 		*l++=' ';
3251:src/display.c **** 	      }
3252:src/display.c **** 	      *l=0;
3253:src/display.c **** 	    }
3254:src/display.c **** #endif
3255:src/display.c **** 	  }
3256:src/display.c **** 	}
3257:src/display.c **** 	set_annunciators();
3258:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3259:src/display.c **** 	  ShowRPN = 0;
3260:src/display.c **** 	  dot(RPN, 0);
3261:src/display.c **** 	}
3262:src/display.c **** 	// disp_temp disables the <- key
3263:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3264:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3265:src/display.c **** 
3266:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3267:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3268:src/display.c **** 	  annunciators();
3269:src/display.c ****  	State2.hms = 0;
3270:src/display.c **** #else
3271:src/display.c **** 
3272:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3273:src/display.c **** 	  annunciators();
3274:src/display.c **** 	
3275:src/display.c **** 
3276:src/display.c **** 
3277:src/display.c **** #endif
3278:src/display.c **** 
3279:src/display.c ****       finish:
3280:src/display.c **** 	State2.version = 0;
3281:src/display.c **** 	State2.disp_as_alpha = 0;
3282:src/display.c **** 	State2.smode = SDISP_NORMAL;
3283:src/display.c **** 	State2.invalid_disp = 0;
3284:src/display.c **** 	ShowRegister = regX_idx;
3285:src/display.c **** 	DispMsg = CNULL;
3286:src/display.c **** 	DispPlot = 0;
3287:src/display.c **** 	State2.disp_small = 0;
3288:src/display.c **** 	finish_display();
3289:src/display.c **** #ifdef CONSOLE
3290:src/display.c **** 	JustDisplayed = 1;
3291:src/display.c **** #endif
3292:src/display.c ****       }
3293:src/display.c **** #endif
3294:src/display.c ****       /*
3295:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3296:src/display.c ****        */
ARM GAS  /tmp/ccE2jV6G.s 			page 73


3297:src/display.c ****       void frozen_display()
3298:src/display.c ****       {
3299:src/display.c **** 	State2.disp_freeze = 0;
3300:src/display.c **** 	display();
3301:src/display.c **** 	State2.disp_freeze = 1;
3302:src/display.c ****       }
3303:src/display.c **** 
3304:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3305:src/display.c **** 	int glen = *graphic++;
3306:src/display.c **** 	int i, j;
3307:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3308:src/display.c **** 	unsigned long long int mat[6];
3309:src/display.c **** 
3310:src/display.c **** 	xset(mat, 0, sizeof(mat));
3311:src/display.c **** #endif
3312:src/display.c **** #ifndef REALBUILD
3313:src/display.c **** 	forceDispPlot=1;
3314:src/display.c **** #endif
3315:src/display.c **** 	if (glen <= 0)			return;
3316:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3317:src/display.c **** 
3318:src/display.c **** 	for (i=0; i<6; i++)
3319:src/display.c **** 	  for (j=1; j<=glen; j++) {
3320:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3321:src/display.c **** 	    if (graphic[j] & (1 << i))
3322:src/display.c **** 	      mat[i] |= 1LL << j;
3323:src/display.c **** #else
3324:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3325:src/display.c **** #endif
3326:src/display.c **** 	  }
3327:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3328:src/display.c **** 	set_status_grob(mat);
3329:src/display.c **** #endif
3330:src/display.c ****       }
3331:src/display.c **** 
3332:src/display.c **** 
3333:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3334:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3335:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3336:src/display.c ****        * column is almost always blank.
3337:src/display.c ****        */
3338:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3339:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3340:src/display.c ****       }
3341:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3342:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3343:src/display.c ****       }
3344:src/display.c **** 
3345:src/display.c ****       
3346:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3346 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3347:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3347 2 view .LVU201
3348:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccE2jV6G.s 			page 74


3349:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3350:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3350 2 view .LVU202
3351:src/display.c **** #endif
3352:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3352 2 view .LVU203
3353:src/display.c **** 	int i, j;
 686              		.loc 1 3353 2 view .LVU204
3354:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3354 2 view .LVU205
3346:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3346 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3355:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3356:src/display.c **** 	unsigned long long int mat[6];
3357:src/display.c **** 
3358:src/display.c **** 	xset(mat, 0, sizeof(mat));
3359:src/display.c **** #endif
3360:src/display.c **** #ifndef REALBUILD
3361:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3361 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3346:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3346 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3354:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3354 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3346:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3346 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3354:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3354 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3354:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3354 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3361 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3361 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
ARM GAS  /tmp/ccE2jV6G.s 			page 75


3354:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3354 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3361 2 is_stmt 1 view .LVU216
3354:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3354 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3346:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3346 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3361 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3362:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3363:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3363 2 is_stmt 1 view .LVU220
 734              		.loc 1 3363 14 view .LVU221
 735              		.loc 1 3363 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3363 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3363 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3363 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3364:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3364 4 is_stmt 1 view .LVU226
 749              		.loc 1 3364 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3364 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3364 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3364 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3365:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3366:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3367:src/display.c **** 	      ++i;
3368:src/display.c **** 	  }
3369:src/display.c **** 	  else {
3370:src/display.c **** 	    ++i;
3371:src/display.c **** 	  }
3372:src/display.c **** 	}
3373:src/display.c **** #endif
3374:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3374 2 is_stmt 1 view .LVU231
3375:src/display.c **** #endif
3376:src/display.c **** #ifdef RP_PREFIX
ARM GAS  /tmp/ccE2jV6G.s 			page 76


3377:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3377 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3374:src/display.c **** #endif
 763              		.loc 1 3374 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3377 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3378:src/display.c **** #endif
3379:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3380:src/display.c **** 	findlengths(posns, smallp);
3381:src/display.c **** #endif
3382:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3382 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3374:src/display.c **** #endif
 770              		.loc 1 3374 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3377:src/display.c **** #endif
 772              		.loc 1 3377 2 is_stmt 1 view .LVU237
 773              		.loc 1 3382 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3382 8 view .LVU239
 776              		.loc 1 3382 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3382 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3352:src/display.c **** 	int i, j;
 781              		.loc 1 3352 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB192:
3383:src/display.c **** 	  int c;
3384:src/display.c **** 	  int width;
3385:src/display.c **** 	  unsigned char cmap[6];
3386:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3387:src/display.c **** 	  int real_width;
3388:src/display.c **** 	  int current_smallp;
3389:src/display.c **** 
3390:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3391:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3392:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3393:src/display.c **** 	  //           01 -> (not used)
3394:src/display.c **** 	  //           10 -> use big font
3395:src/display.c **** 	  //           11 -> use small font
3396:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3397:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3397 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE192:
3382:src/display.c **** 	  int c;
 787              		.loc 1 3382 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3350:src/display.c **** #endif
 790              		.loc 1 3350 6 view .LVU245
ARM GAS  /tmp/ccE2jV6G.s 			page 77


 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB201:
3383:src/display.c **** 	  int c;
 794              		.loc 1 3383 4 is_stmt 1 view .LVU246
3384:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3384 4 view .LVU247
3385:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3385 4 view .LVU248
3387:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3387 4 view .LVU249
3388:src/display.c **** 
 798              		.loc 1 3388 4 view .LVU250
 799              		.loc 1 3397 4 view .LVU251
 800              		.loc 1 3397 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3398:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3398 6 is_stmt 1 view .LVU253
 805              		.loc 1 3398 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3399:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3399 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3398:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3398 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3399 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3400:src/display.c **** 	    default:
3401:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3402:src/display.c **** 	      break;
3403:src/display.c **** 	    case 0x40:	current_smallp = 0;
3404:src/display.c **** 	      break;
3405:src/display.c **** 	    case 0x60:	current_smallp = 1;
3406:src/display.c **** 	      break;
3407:src/display.c **** 	    }
3408:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3408 6 view .LVU258
 820              		.loc 1 3408 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3408 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
ARM GAS  /tmp/ccE2jV6G.s 			page 78


3409:src/display.c **** 	    str += 3;
 831              		.loc 1 3409 6 is_stmt 1 discriminator 4 view .LVU261
3410:src/display.c **** 
3411:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3411 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3409:src/display.c **** 	    str += 3;
 836              		.loc 1 3409 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3411 6 is_stmt 1 discriminator 4 view .LVU264
3412:src/display.c **** 	  } else {
3413:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3414:src/display.c **** 	    real_width = width = charlengths(c);
3415:src/display.c **** 	    current_smallp = smallp;
3416:src/display.c **** 	  }
3417:src/display.c **** 
3418:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3418 4 discriminator 4 view .LVU265
 843              		.loc 1 3418 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3418 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3418 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3419:src/display.c **** 	    break;
3420:src/display.c **** 
3421:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3421 4 is_stmt 1 view .LVU269
 853              		.loc 1 3421 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3422:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3422 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3421:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3421 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3422 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3423:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3423 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3424:src/display.c **** 	  }
ARM GAS  /tmp/ccE2jV6G.s 			page 79


3425:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3425 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3426:src/display.c **** #else
3427:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3428:src/display.c **** 
3429:src/display.c **** 	  //cmap = &charset[c][0];
3430:src/display.c **** 	  width = charlengths(c);
3431:src/display.c **** 
3432:src/display.c **** 	  if (x + width > b_w+1)
3433:src/display.c **** 	    break;
3434:src/display.c **** 
3435:src/display.c **** 	  /* Decode the packed character bytes */
3436:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3437:src/display.c **** #endif
3438:src/display.c **** 
3439:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3439 4 view .LVU276
 877              		.loc 1 3439 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3439 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3440 16 is_stmt 1 view .LVU279
 889              		.loc 1 3440 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3441:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3441 8 is_stmt 1 view .LVU281
 893              		.loc 1 3441 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3440 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3440 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB193:
 907              	.LBB194:
ARM GAS  /tmp/ccE2jV6G.s 			page 80


 337:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 337 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 337:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 337 11 view .LVU286
 912              	.LBE194:
 913              	.LBE193:
 914              		.loc 1 3441 8 is_stmt 1 view .LVU287
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3440 25 view .LVU288
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3440 16 view .LVU289
3440:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3440 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3441 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3442:src/display.c **** 		break;
3443:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3444:src/display.c **** 	      if (cmap[i] & (1 << j))
3445:src/display.c **** 		mat[i] |= 1LL << (x+j);
3446:src/display.c **** #else
3447:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3447 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB198:
 929              	.LBI193:
 336:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 336 6 discriminator 2 view .LVU293
 931              	.LBB195:
 337:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 337 3 discriminator 2 view .LVU294
 337:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 337 11 discriminator 2 view .LVU295
 338:src/display.c **** }
 934              		.loc 1 338 8 discriminator 2 view .LVU296
 935              	.LBE195:
 936              	.LBE198:
 937              		.loc 1 3447 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3447 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB199:
 942              	.LBB196:
 337:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 337 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 337:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 337 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 337:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccE2jV6G.s 			page 81


 947              		.loc 1 337 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE196:
 950              	.LBE199:
3440:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3440 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB200:
 955              	.LBB197:
 338:src/display.c **** }
 956              		.loc 1 338 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 338:src/display.c **** }
 959              		.loc 1 338 8 view .LVU304
 960              	.LBE197:
 961              	.LBE200:
3441:src/display.c **** 		break;
 962              		.loc 1 3441 8 is_stmt 1 view .LVU305
3440:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3440 25 view .LVU306
3440:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3440 16 view .LVU307
3440:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3440 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3439 19 is_stmt 1 view .LVU309
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3439 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3439 14 is_stmt 1 view .LVU311
3439:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3439 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3448:src/display.c **** #endif
3449:src/display.c **** 	    }
3450:src/display.c **** 	  x += width;
 980              		.loc 1 3450 4 is_stmt 1 view .LVU313
 981              	.LBE201:
3382:src/display.c **** 	  int c;
 982              		.loc 1 3382 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB202:
 986              		.loc 1 3450 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
ARM GAS  /tmp/ccE2jV6G.s 			page 82


 989              		.loc 1 3450 6 view .LVU316
 990              	.LBE202:
3382:src/display.c **** 	  int c;
 991              		.loc 1 3382 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3382:src/display.c **** 	  int c;
 993              		.loc 1 3382 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3382:src/display.c **** 	  int c;
 996              		.loc 1 3382 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB203:
3397:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3397 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE203:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB204:
3383:src/display.c **** 	  int width;
 1005              		.loc 1 3383 4 is_stmt 1 view .LVU321
3384:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3384 4 view .LVU322
3385:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3385 4 view .LVU323
3387:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3387 4 view .LVU324
3388:src/display.c **** 
 1009              		.loc 1 3388 4 view .LVU325
3397:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3397 4 view .LVU326
3397:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3397 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3413:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3413 6 is_stmt 1 view .LVU328
3413:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3413 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3414:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3414 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3413:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3413 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3414:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3414 6 is_stmt 1 view .LVU332
3414:src/display.c **** 	    current_smallp = smallp;
ARM GAS  /tmp/ccE2jV6G.s 			page 83


 1029              		.loc 1 3414 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3414:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3414 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3418:src/display.c **** 	    break;
 1034              		.loc 1 3418 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3414:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3414 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3415:src/display.c **** 	  }
 1039              		.loc 1 3415 6 is_stmt 1 view .LVU337
3418:src/display.c **** 	    break;
 1040              		.loc 1 3418 4 view .LVU338
3418:src/display.c **** 	    break;
 1041              		.loc 1 3418 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3418:src/display.c **** 	    break;
 1044              		.loc 1 3418 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3418:src/display.c **** 	    break;
 1049              		.loc 1 3418 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3418:src/display.c **** 	    break;
 1053              		.loc 1 3418 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3418:src/display.c **** 	    break;
 1057              		.loc 1 3418 7 view .LVU343
 1058              	.LBE204:
3451:src/display.c **** 	}
3452:src/display.c **** 
3453:src/display.c **** 
3454:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3455:src/display.c **** 	set_status_grob(mat);
3456:src/display.c **** #else
3457:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3457 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3457 20 view .LVU345
 1061              		.loc 1 3457 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3458:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3458 4 is_stmt 1 discriminator 3 view .LVU347
ARM GAS  /tmp/ccE2jV6G.s 			page 84


 1068 0164 4046     		mov	r0, r8
3457:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3457 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3458 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3457:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3457 27 is_stmt 1 discriminator 3 view .LVU350
3457:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3457 20 discriminator 3 view .LVU351
3457:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3457 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3459:src/display.c **** #endif
3460:src/display.c ****       }
 1081              		.loc 1 3460 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB205:
3405:src/display.c **** 	      break;
 1091              		.loc 1 3405 17 is_stmt 1 view .LVU354
3406:src/display.c **** 	    }
 1092              		.loc 1 3406 8 view .LVU355
3408:src/display.c **** 	    str += 3;
 1093              		.loc 1 3408 6 view .LVU356
3408:src/display.c **** 	    str += 3;
 1094              		.loc 1 3408 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3405:src/display.c **** 	      break;
 1097              		.loc 1 3405 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3403:src/display.c **** 	      break;
 1104              		.loc 1 3403 17 is_stmt 1 view .LVU359
3404:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3404 8 view .LVU360
3408:src/display.c **** 	    str += 3;
 1106              		.loc 1 3408 6 view .LVU361
3408:src/display.c **** 	    str += 3;
 1107              		.loc 1 3408 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccE2jV6G.s 			page 85


3403:src/display.c **** 	      break;
 1110              		.loc 1 3403 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3403:src/display.c **** 	      break;
 1116              		.loc 1 3403 32 view .LVU364
 1117              	.LBE205:
3365:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3365 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3366:src/display.c **** 	      ++i;
 1123              		.loc 1 3366 6 view .LVU366
3366:src/display.c **** 	      ++i;
 1124              		.loc 1 3366 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB206:
3366:src/display.c **** 	      ++i;
 1133              		.loc 1 3366 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3366:src/display.c **** 	      ++i;
 1136              		.loc 1 3366 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3366:src/display.c **** 	      ++i;
 1141              		.loc 1 3366 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE206:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
ARM GAS  /tmp/ccE2jV6G.s 			page 86


 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 439:src/display.c ****   union {
 1169              		.loc 1 439 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 440:src/display.c ****     char buf[4];
 1173              		.loc 1 440 3 view .LVU372
 444:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 444 3 view .LVU373
 458:src/display.c **** #endif
 1175              		.loc 1 458 3 view .LVU374
 461:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 461 3 view .LVU375
 439:src/display.c ****   union {
 1177              		.loc 1 439 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 462:src/display.c ****     negative = 1;
 1185              		.loc 1 462 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 439:src/display.c ****   union {
 1187              		.loc 1 439 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 439:src/display.c ****   union {
 1190              		.loc 1 439 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 462:src/display.c ****     negative = 1;
 1193              		.loc 1 462 3 is_stmt 1 view .LVU380
 439:src/display.c ****   union {
 1194              		.loc 1 439 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 462:src/display.c ****     negative = 1;
 1196              		.loc 1 462 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
 461:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 461 12 view .LVU383
 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 469 3 is_stmt 1 view .LVU384
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 469 6 is_stmt 0 view .LVU385
ARM GAS  /tmp/ccE2jV6G.s 			page 87


 1203 0010 A2B3     		cbz	r2, .L126
 474:src/display.c **** #endif
 1204              		.loc 1 474 7 is_stmt 1 view .LVU386
 474:src/display.c **** #endif
 1205              		.loc 1 474 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 476 2 is_stmt 1 view .LVU388
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 476 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 476 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 476 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
 1215              	.LVL110:
 476:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 476 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 483:src/display.c ****     }
 1219              		.loc 1 483 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 463:src/display.c ****     exp = -exp;
 1223              		.loc 1 463 5 view .LVU394
 464:src/display.c ****   }
 1224              		.loc 1 464 5 view .LVU395
 464:src/display.c ****   }
 1225              		.loc 1 464 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 469 3 is_stmt 1 view .LVU397
 469:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 469 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 474:src/display.c **** #endif
 1231              		.loc 1 474 7 is_stmt 1 view .LVU399
 474:src/display.c **** #endif
 1232              		.loc 1 474 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
 483:src/display.c ****     }
 1237              		.loc 1 483 21 is_stmt 1 discriminator 1 view .LVU401
 483:src/display.c ****     }
 1238              		.loc 1 483 28 is_stmt 0 discriminator 1 view .LVU402
 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 483:src/display.c ****     }
ARM GAS  /tmp/ccE2jV6G.s 			page 88


 1242              		.loc 1 483 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 531:src/display.c **** #endif
 1246              		.loc 1 531 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 533:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 533 7 view .LVU405
 533:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 533 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 534:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 534 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 533:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 533 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
 534:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 534 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
 556:src/display.c ****     }
 1267              		.loc 1 556 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 557:src/display.c **** 
 1272              		.loc 1 557 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 554:src/display.c ****     no_number:
 1281              		.loc 1 554 2 is_stmt 1 view .LVU412
 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
 1284              	.LVL122:
 556:src/display.c ****     }
 1285              		.loc 1 556 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
ARM GAS  /tmp/ccE2jV6G.s 			page 89


 1289              	.LVL123:
 557:src/display.c **** 
 1290              		.loc 1 557 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 479:src/display.c **** #else
 1299              		.loc 1 479 12 is_stmt 1 view .LVU415
 479:src/display.c **** #else
 1300              		.loc 1 479 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 479:src/display.c **** #else
 1303              		.loc 1 479 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 483:src/display.c ****     }
 1306              		.loc 1 483 7 is_stmt 1 view .LVU418
 483:src/display.c ****     }
 1307              		.loc 1 483 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 483:src/display.c ****     }
 1311              		.loc 1 483 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 486:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 486 7 is_stmt 1 view .LVU421
 486:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 486 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 490:src/display.c **** #endif
 1321              		.loc 1 490 2 is_stmt 1 view .LVU423
 490:src/display.c **** #endif
 1322              		.loc 1 490 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 490:src/display.c **** #endif
 1325              		.loc 1 490 5 view .LVU425
 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
 490:src/display.c **** #endif
 1328              		.loc 1 490 5 view .LVU426
 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 479:src/display.c **** #else
ARM GAS  /tmp/ccE2jV6G.s 			page 90


 1332              		.loc 1 479 12 is_stmt 1 view .LVU427
 479:src/display.c **** #else
 1333              		.loc 1 479 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 483:src/display.c ****     }
 1337              		.loc 1 483 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 483:src/display.c ****     }
 1341              		.loc 1 483 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 486:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 486 21 is_stmt 1 view .LVU431
 1346              	.LBB207:
 1347              	.LBI207:
 305:src/display.c **** {
 1348              		.loc 1 305 13 view .LVU432
 1349              	.LBB208:
 307:src/display.c ****   set_dot(EXP_SIGN);
 1350              		.loc 1 307 3 view .LVU433
 307:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 307 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 308:src/display.c **** }
 1355              		.loc 1 308 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 307:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 307 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 308:src/display.c **** }
 1359              		.loc 1 308 3 is_stmt 1 view .LVU437
 309:src/display.c **** 
 1360              		.loc 1 309 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 308:src/display.c **** }
 1362              		.loc 1 308 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 309:src/display.c **** 
 1365              		.loc 1 309 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
 1368              	.L148:
 309:src/display.c **** 
 1369              		.loc 1 309 1 view .LVU441
 1370              	.LBE208:
 1371              	.LBE207:
 492:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 492 4 is_stmt 1 view .LVU442
 500:src/display.c **** #endif
ARM GAS  /tmp/ccE2jV6G.s 			page 91


 1373              		.loc 1 500 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 502:src/display.c **** 	  }
 1379              		.loc 1 502 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 502:src/display.c **** 	  }
 1382              		.loc 1 502 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB47:
 364:src/display.c ****   if (sep == SEP_NONE)
 1403              		.loc 1 364 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 371:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 371 5 view .LVU447
 364:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 364 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 364:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 364 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
 372:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 372 5 view .LVU450
 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
 372:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 372 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
ARM GAS  /tmp/ccE2jV6G.s 			page 92


 373:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 373 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 371:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 371 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 372:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 372 5 is_stmt 1 view .LVU454
 373:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 373 5 view .LVU455
 373:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 373 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 376:src/display.c **** #endif
 1433              		.loc 1 376 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
 376:src/display.c **** #endif
 1436              		.loc 1 376 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 376:src/display.c **** #endif
 1438              		.loc 1 376 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
 376:src/display.c **** #endif
 1440              		.loc 1 376 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 376:src/display.c **** #endif
 1444              		.loc 1 376 30 view .LVU461
 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 376:src/display.c **** #endif
 1446              		.loc 1 376 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 380:src/display.c **** 
 1448              		.loc 1 380 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 376:src/display.c **** #endif
 1450              		.loc 1 376 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 380:src/display.c **** 
 1453              		.loc 1 380 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 374:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 374 7 is_stmt 1 view .LVU466
 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
 1460              	.LVL146:
 376:src/display.c **** #endif
 1461              		.loc 1 376 5 view .LVU467
 376:src/display.c **** #endif
 1462              		.loc 1 376 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
ARM GAS  /tmp/ccE2jV6G.s 			page 93


 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE47:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
 346:src/display.c ****   if (res) {
 1484              		.loc 1 346 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1488              		.loc 1 347 3 view .LVU470
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 347 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 348:src/display.c ****   } else {
 1491              		.loc 1 348 5 is_stmt 1 view .LVU472
 348:src/display.c ****   } else {
 1492              		.loc 1 348 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 348:src/display.c ****   } else {
 1494              		.loc 1 348 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 348:src/display.c ****   } else {
 1497              		.loc 1 348 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 358:src/display.c **** 
 1503              		.loc 1 358 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 350 5 is_stmt 1 view .LVU477
 346:src/display.c ****   if (res) {
 1508              		.loc 1 346 87 is_stmt 0 view .LVU478
 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
ARM GAS  /tmp/ccE2jV6G.s 			page 94


 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 350 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 350 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 351:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 351 5 is_stmt 1 view .LVU481
 351:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 351 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
 1527              	.LBB211:
 1528              	.LBB212:
 354:src/display.c **** #endif
 1529              		.loc 1 354 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
 354:src/display.c **** #endif
 1532              		.loc 1 354 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 354:src/display.c **** #endif
 1534              		.loc 1 354 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 354:src/display.c **** #endif
 1536              		.loc 1 354 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 354:src/display.c **** #endif
 1540              		.loc 1 354 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 354:src/display.c **** #endif
 1542              		.loc 1 354 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 354:src/display.c **** #endif
 1544              		.loc 1 354 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 357:src/display.c **** }
 1548              		.loc 1 357 3 is_stmt 1 view .LVU490
 357:src/display.c **** }
 1549              		.loc 1 357 3 is_stmt 0 view .LVU491
 1550              	.LBE212:
 1551              	.LBE211:
 357:src/display.c **** }
 1552              		.loc 1 357 3 is_stmt 1 view .LVU492
 358:src/display.c **** 
 1553              		.loc 1 358 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccE2jV6G.s 			page 95


 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 352:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 352 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB214:
 1567              	.LBI211:
 346:src/display.c ****   if (res) {
 1568              		.loc 1 346 14 view .LVU495
 1569              	.LBB213:
 354:src/display.c **** #endif
 1570              		.loc 1 354 5 view .LVU496
 354:src/display.c **** #endif
 1571              		.loc 1 354 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE213:
 1580              	.LBE214:
 1581              		.cfi_endproc
 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 411:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 411 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 412 3 view .LVU499
 411:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 411 55 is_stmt 0 view .LVU500
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
ARM GAS  /tmp/ccE2jV6G.s 			page 96


 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 412 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 412 10 is_stmt 1 view .LVU502
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 412 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB215:
 1618              	.LBB216:
 406:src/display.c ****   return res;
 1619              		.loc 1 406 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 407:src/display.c **** }
 1623              		.loc 1 407 3 is_stmt 1 view .LVU505
 407:src/display.c **** }
 1624              		.loc 1 407 3 is_stmt 0 view .LVU506
 1625              	.LBE216:
 1626              	.LBE215:
 417:src/display.c ****     }
 1627              		.loc 1 417 7 is_stmt 1 view .LVU507
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 412 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1630              	.LVL160:
 417:src/display.c ****     }
 1631              		.loc 1 417 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 412 24 is_stmt 1 view .LVU510
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 412 10 view .LVU511
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 412 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 413:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 413 5 is_stmt 1 view .LVU513
 414:src/display.c ****     else {
 1641              		.loc 1 414 7 view .LVU514
 416:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 416 7 view .LVU515
 1643              	.LBB219:
 1644              	.LBI215:
 404:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 404 14 view .LVU516
 1646              	.LBB217:
 405:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccE2jV6G.s 			page 97


 1647              		.loc 1 405 3 view .LVU517
 406:src/display.c ****   return res;
 1648              		.loc 1 406 8 view .LVU518
 1649              	.LBE217:
 1650              	.LBE219:
 413:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 413 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 414:src/display.c ****     else {
 1654              		.loc 1 414 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB220:
 1658              	.LBB218:
 406:src/display.c ****   return res;
 1659              		.loc 1 406 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
 1661              	.LBE218:
 1662              	.LBE220:
 413:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 413 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 414:src/display.c ****     else {
 1665              		.loc 1 414 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1671              		.loc 1 412 24 is_stmt 1 view .LVU524
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 412 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 412:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 412 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 420:src/display.c **** 
 1680              		.loc 1 420 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
ARM GAS  /tmp/ccE2jV6G.s 			page 98


 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB49:
1536:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1536 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1537:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1537 2 view .LVU529
1536:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1536 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
1537:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1537 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1536:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1536 18 view .LVU532
 1715 0004 0546     		mov	r5, r0
1537:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1537 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1538:src/display.c **** 	    if (res) {
 1719              		.loc 1 1538 4 is_stmt 1 view .LVU534
1538:src/display.c **** 	    if (res) {
 1720              		.loc 1 1538 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB223:
 1726              	.LBI223:
1536:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1536 18 is_stmt 1 view .LVU536
 1728              	.LBB224:
1539:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1539 6 view .LVU537
1539:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1539 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1540:src/display.c **** 	    } else {
 1732              		.loc 1 1540 8 is_stmt 1 view .LVU539
 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
 1735              	.LVL168:
1540:src/display.c **** 	    } else {
 1736              		.loc 1 1540 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1540:src/display.c **** 	    } else {
ARM GAS  /tmp/ccE2jV6G.s 			page 99


 1739              		.loc 1 1540 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1540:src/display.c **** 	    } else {
 1743              		.loc 1 1540 8 view .LVU542
 1744              	.LBE224:
 1745              	.LBE223:
1572:src/display.c **** 
 1746              		.loc 1 1572 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1550:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1550 6 is_stmt 1 view .LVU544
1550:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1550 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
 1753 0024 04D4     		bmi	.L196
1554:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1554 6 is_stmt 1 view .LVU546
1554:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1554 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
 1757              	.LVL172:
 1758              	.L187:
1555:src/display.c **** 	    else {
 1759              		.loc 1 1555 8 is_stmt 1 view .LVU548
1555:src/display.c **** 	    else {
 1760              		.loc 1 1555 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
 1762 002a 2370     		strb	r3, [r4]
1568:src/display.c **** 	  }
 1763              		.loc 1 1568 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1572:src/display.c **** 
 1765              		.loc 1 1572 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1551:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1551 8 is_stmt 1 view .LVU552
1551:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1551 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1551:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1551 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1551:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1774              		.loc 1 1551 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
1554:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1554 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
ARM GAS  /tmp/ccE2jV6G.s 			page 100


 1781              	.L184:
 1782              	.LBB226:
 1783              	.LBB225:
1542:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1542 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1544:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1544 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1545:src/display.c **** #endif
 1793              		.loc 1 1545 8 view .LVU559
1545:src/display.c **** #endif
 1794              		.loc 1 1545 21 is_stmt 0 view .LVU560
 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE225:
 1799              	.LBE226:
1572:src/display.c **** 
 1800              		.loc 1 1572 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1552:src/display.c **** 	    }
 1804              		.loc 1 1552 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
 1806              	.LVL180:
1552:src/display.c **** 	    }
 1807              		.loc 1 1552 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1554:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1554 6 is_stmt 1 view .LVU564
 1812              	.L188:
1557:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1557 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1559:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1559 8 view .LVU566
1559:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1819              		.loc 1 1559 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
1563:src/display.c **** 	      }
 1821              		.loc 1 1563 3 view .LVU568
 1822 0064 0848     		ldr	r0, .L197+12
1559:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1559 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 101


1560:src/display.c **** 	      }
 1825              		.loc 1 1560 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1563:src/display.c **** 	      }
 1828              		.loc 1 1563 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1565:src/display.c **** #endif
 1832              		.loc 1 1565 8 view .LVU572
1565:src/display.c **** #endif
 1833              		.loc 1 1565 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1568:src/display.c **** 	  }
 1837              		.loc 1 1568 13 view .LVU574
 1838 0078 0120     		movs	r0, #1
1572:src/display.c **** 
 1839              		.loc 1 1572 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE49:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1617:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1617 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1618:src/display.c **** 	int j=0;
 1870              		.loc 1 1618 2 view .LVU577
1619:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1871              		.loc 1 1619 2 view .LVU578
1617:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1617 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccE2jV6G.s 			page 102


 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1617:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1617 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1619:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1619 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1623:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1623 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1617:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1617 62 view .LVU583
 1888 000a 0D46     		mov	r5, r1
1619:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1619 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1620:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1620 2 is_stmt 1 view .LVU585
 1892              	.LVL186:
1621:src/display.c **** 
 1893              		.loc 1 1621 2 view .LVU586
1623:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1623 2 view .LVU587
1623:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1623 6 is_stmt 0 view .LVU588
 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1623:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1623 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1624:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1624 4 is_stmt 1 view .LVU590
1624:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1624 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1625:src/display.c **** 	  return;
 1905              		.loc 1 1625 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB227:
 1908              	.LBI227:
 404:src/display.c ****   if (res) *res++ = ch;
 1909              		.loc 1 404 14 view .LVU593
 1910              	.LBB228:
 405:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 405 3 view .LVU594
 405:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 405 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
ARM GAS  /tmp/ccE2jV6G.s 			page 103


 405:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 405 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 405:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 405 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 405:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 405 19 view .LVU598
 1923              	.LBE228:
 1924              	.LBE227:
1680:src/display.c **** 
 1925              		.loc 1 1680 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1629:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1934              		.loc 1 1629 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1630:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1630 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1631:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1631 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1632:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1632 2 view .LVU603
1632:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1632 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1640:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1954              		.loc 1 1640 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
 1958              	.LVL195:
1641:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1641 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
ARM GAS  /tmp/ccE2jV6G.s 			page 104


 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1642:src/display.c **** 
 1965              		.loc 1 1642 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1644:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1644 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1645:src/display.c **** 	hms_step(&t, &u, &min);
 1976              		.loc 1 1645 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
1646:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1646 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
1647:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1647 2 view .LVU611
1647:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1647 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1648:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1648 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1648:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1648 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1648:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1648 19 is_stmt 1 view .LVU615
1648:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1648 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
 2000 008c 3C3A     		subhi	r2, r2, #60
1648:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2001              		.loc 1 1648 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1649:src/display.c **** 
 2004              		.loc 1 1649 2 is_stmt 1 view .LVU618
1649:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 105


 2005              		.loc 1 1649 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1649:src/display.c **** 
 2008              		.loc 1 1649 19 is_stmt 1 discriminator 1 view .LVU620
1649:src/display.c **** 
 2009              		.loc 1 1649 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1649:src/display.c **** 
 2012              		.loc 1 1649 30 is_stmt 1 discriminator 1 view .LVU622
1649:src/display.c **** 
 2013              		.loc 1 1649 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1652:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1652 2 is_stmt 1 view .LVU624
1652:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1652 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1653:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1653 2 is_stmt 1 view .LVU626
 2027              	.LBB230:
 2028              	.LBI230:
 404:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 404 14 view .LVU627
 2030              	.LBB231:
 405:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 405 3 view .LVU628
 405:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 405 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 405:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 405 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 405:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 405 12 is_stmt 1 view .LVU631
 405:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 405 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
 2041              	.LVL205:
 405:src/display.c ****   else	set_dig(base, ch);
 2042              		.loc 1 405 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 407:src/display.c **** }
ARM GAS  /tmp/ccE2jV6G.s 			page 106


 2047              		.loc 1 407 3 is_stmt 1 view .LVU634
 407:src/display.c **** }
 2048              		.loc 1 407 3 is_stmt 0 view .LVU635
 2049              	.LBE231:
 2050              	.LBE230:
1654:src/display.c **** 
 2051              		.loc 1 1654 2 is_stmt 1 view .LVU636
1657:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1657 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1654:src/display.c **** 
 2055              		.loc 1 1654 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1657:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1657 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
 2060 00c8 03AA     		add	r2, sp, #12
1654:src/display.c **** 
 2061              		.loc 1 1654 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1657:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1657 2 is_stmt 1 view .LVU641
1657:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1657 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1658:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1658 2 is_stmt 1 view .LVU643
 2068              	.LBB233:
 2069              	.LBI233:
 404:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 404 14 view .LVU644
 2071              	.LBB234:
 405:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 405 3 view .LVU645
 405:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 405 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 405:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 405 12 is_stmt 1 view .LVU647
 405:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 405 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 405:src/display.c ****   else	set_dig(base, ch);
 2081              		.loc 1 405 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
 2085              	.L213:
 407:src/display.c **** }
 2086              		.loc 1 407 3 is_stmt 1 view .LVU650
 407:src/display.c **** }
ARM GAS  /tmp/ccE2jV6G.s 			page 107


 2087              		.loc 1 407 3 is_stmt 0 view .LVU651
 2088              	.LBE234:
 2089              	.LBE233:
1659:src/display.c **** 
 2090              		.loc 1 1659 2 is_stmt 1 view .LVU652
1659:src/display.c **** 
 2091              		.loc 1 1659 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1662:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1662 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1659:src/display.c **** 
 2096              		.loc 1 1659 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1662:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1662 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1659:src/display.c **** 
 2102              		.loc 1 1659 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1662:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2104              		.loc 1 1662 2 is_stmt 1 view .LVU658
1662:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1662 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1663:src/display.c **** 
 2108              		.loc 1 1663 8 view .LVU660
 2109 00f4 3149     		ldr	r1, .L230+4
1662:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1662 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1663:src/display.c **** 
 2113              		.loc 1 1663 2 is_stmt 1 view .LVU662
1663:src/display.c **** 
 2114              		.loc 1 1663 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1663:src/display.c **** 
 2117              		.loc 1 1663 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1666:src/display.c **** 
 2122              		.loc 1 1666 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
1663:src/display.c **** 
 2124              		.loc 1 1663 8 view .LVU666
 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1666:src/display.c **** 
 2127              		.loc 1 1666 2 is_stmt 1 view .LVU667
ARM GAS  /tmp/ccE2jV6G.s 			page 108


1666:src/display.c **** 
 2128              		.loc 1 1666 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1666:src/display.c **** 
 2132              		.loc 1 1666 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1669:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1669 2 is_stmt 1 view .LVU670
 2138              	.LBB236:
 2139              	.LBI236:
 404:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 404 14 view .LVU671
 2141              	.LBB237:
 405:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 405 3 view .LVU672
 405:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 405 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
 405:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 405 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 405:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 405 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
 2151              	.LVL218:
 407:src/display.c **** }
 2152              		.loc 1 407 3 is_stmt 1 view .LVU676
 407:src/display.c **** }
 2153              		.loc 1 407 3 is_stmt 0 view .LVU677
 2154              	.LBE237:
 2155              	.LBE236:
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1673 2 is_stmt 1 view .LVU678
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1673 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1673 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1673 5 view .LVU681
 2165 0122 78B9     		cbnz	r0, .L229
1674:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2166              		.loc 1 1674 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB240:
 2169              	.LBI240:
ARM GAS  /tmp/ccE2jV6G.s 			page 109


 404:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 404 14 view .LVU683
 2171              	.LBB241:
 405:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 405 3 view .LVU684
 405:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 405 12 view .LVU685
 405:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 405 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE241:
 2178              	.LBE240:
1680:src/display.c **** 
 2179              		.loc 1 1680 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1633:src/display.c **** 	    *res++ += '-';
 2188              		.loc 1 1633 4 is_stmt 1 view .LVU688
1633:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1633 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1634:src/display.c **** 	  else
 2191              		.loc 1 1634 6 is_stmt 1 view .LVU690
1634:src/display.c **** 	  else
 2192              		.loc 1 1634 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1634:src/display.c **** 	  else
 2195              		.loc 1 1634 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1634:src/display.c **** 	  else
 2198              		.loc 1 1634 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1634:src/display.c **** 	  else
 2201              		.loc 1 1634 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1637:src/display.c **** 	}
 2205              		.loc 1 1637 4 is_stmt 1 view .LVU695
 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB242:
ARM GAS  /tmp/ccE2jV6G.s 			page 110


 2214              	.LBB238:
 405:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 405 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 405:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 405 16 view .LVU697
 2220              	.LBE238:
 2221              	.LBE242:
1675:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1675 9 is_stmt 1 view .LVU698
1675:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1675 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1675:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2227              		.loc 1 1675 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1676:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1676 4 is_stmt 1 view .LVU701
1676:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2231              		.loc 1 1676 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1676:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1676 7 view .LVU703
 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1677:src/display.c **** 	  }
 2239              		.loc 1 1677 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB243:
 2242              	.LBI243:
 404:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 404 14 view .LVU705
 2244              	.LBB244:
 405:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 405 3 view .LVU706
 405:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 405 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 405:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 405 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
 405:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 405 19 is_stmt 0 view .LVU709
 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 405:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccE2jV6G.s 			page 111


 2256              		.loc 1 405 19 view .LVU710
 2257              	.LBE244:
 2258              	.LBE243:
1636:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1636 6 is_stmt 1 view .LVU711
 2260              	.LBB246:
 2261              	.LBI246:
 293:src/display.c **** {
 2262              		.loc 1 293 13 view .LVU712
 2263              	.LBB247:
 295:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 295 3 view .LVU713
 295:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 295 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 296:src/display.c **** }
 2268              		.loc 1 296 3 view .LVU715
 2269 016c 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 295 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 296:src/display.c **** }
 2272              		.loc 1 296 3 is_stmt 1 view .LVU717
 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 297:src/display.c **** 
 2275              		.loc 1 297 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
 297:src/display.c **** 
 2279              		.loc 1 297 1 view .LVU719
 2280              	.LBE247:
 2281              	.LBE246:
 2282              	.LBB248:
 2283              	.LBB239:
 406:src/display.c ****   return res;
 2284              		.loc 1 406 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 406:src/display.c ****   return res;
 2287              		.loc 1 406 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 407:src/display.c **** }
 2291              		.loc 1 407 3 is_stmt 1 view .LVU722
 407:src/display.c **** }
 2292              		.loc 1 407 3 is_stmt 0 view .LVU723
 2293              	.LBE239:
 2294              	.LBE248:
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2295              		.loc 1 1673 2 is_stmt 1 view .LVU724
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1673 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
ARM GAS  /tmp/ccE2jV6G.s 			page 112


 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1673:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1673 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB249:
 2307              	.LBB229:
 406:src/display.c ****   return res;
 2308              		.loc 1 406 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE229:
 2314              	.LBE249:
1626:src/display.c **** 	}
 2315              		.loc 1 1626 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
 2319              	.LBB250:
 2320              	.LBB235:
 406:src/display.c ****   return res;
 2321              		.loc 1 406 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
 406:src/display.c ****   return res;
 2325              		.loc 1 406 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 406:src/display.c ****   return res;
 2328              		.loc 1 406 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 406:src/display.c ****   return res;
 2333              		.loc 1 406 8 view .LVU732
 2334              	.LBE235:
 2335              	.LBE250:
 2336              	.LBB251:
 2337              	.LBB232:
 406:src/display.c ****   return res;
 2338              		.loc 1 406 8 is_stmt 1 view .LVU733
 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
 2341              	.LVL245:
 406:src/display.c ****   return res;
 2342              		.loc 1 406 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 406:src/display.c ****   return res;
ARM GAS  /tmp/ccE2jV6G.s 			page 113


 2345              		.loc 1 406 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 406:src/display.c ****   return res;
 2350              		.loc 1 406 8 view .LVU736
 2351              	.LBE232:
 2352              	.LBE251:
 2353              	.LBB252:
 2354              	.LBB245:
 406:src/display.c ****   return res;
 2355              		.loc 1 406 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE245:
 2369              	.LBE252:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1683:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1683 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1684:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1684 2 view .LVU739
1685:src/display.c **** 	int j;
 2389              		.loc 1 1685 2 view .LVU740
1686:src/display.c **** 
 2390              		.loc 1 1686 2 view .LVU741
1688:src/display.c **** 	  return 1;
 2391              		.loc 1 1688 2 view .LVU742
1683:src/display.c **** 	decNumber x, w, n, d, t;
 2392              		.loc 1 1683 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
ARM GAS  /tmp/ccE2jV6G.s 			page 114


 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1688:src/display.c **** 	  return 1;
 2403              		.loc 1 1688 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1683:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1683 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1688:src/display.c **** 	  return 1;
 2408              		.loc 1 1688 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
1688:src/display.c **** 	  return 1;
 2411              		.loc 1 1688 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1689:src/display.c **** 	dn_abs(&x, rgx);
 2415              		.loc 1 1689 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1746:src/display.c **** 
 2418              		.loc 1 1746 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB261:
 2429              	.LBI261:
1683:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1683 18 is_stmt 1 view .LVU750
 2431              	.LBB262:
1690:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1690 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
 2437              	.LVL254:
1691:src/display.c **** 	  return 0;
 2438              		.loc 1 1691 2 view .LVU752
1691:src/display.c **** 	  return 0;
 2439              		.loc 1 1691 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
ARM GAS  /tmp/ccE2jV6G.s 			page 115


 2443              	.LVL255:
1691:src/display.c **** 	  return 0;
 2444              		.loc 1 1691 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1693:src/display.c **** 	  return 0;
 2447              		.loc 1 1693 2 is_stmt 1 view .LVU755
1693:src/display.c **** 	  return 0;
 2448              		.loc 1 1693 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1693:src/display.c **** 	  return 0;
 2453              		.loc 1 1693 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
1695:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1695 2 is_stmt 1 view .LVU758
1695:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1695 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1701:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1701 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1702:src/display.c **** 
 2469              		.loc 1 1702 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1704:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1704 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1705:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1705 2 view .LVU763
 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
 2486              	.LVL261:
1706:src/display.c **** 
 2487              		.loc 1 1706 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
ARM GAS  /tmp/ccE2jV6G.s 			page 116


 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1708:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1708 2 view .LVU765
1708:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1708 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1708:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1708 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1713:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1713 2 is_stmt 1 view .LVU768
1713:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1713 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1713:src/display.c **** 	  if (!dn_eq0(&w)) {
 2507              		.loc 1 1713 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1714:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1714 4 is_stmt 1 view .LVU771
1714:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1714 9 is_stmt 0 view .LVU772
 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1714:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1714 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1685:src/display.c **** 	int j;
 2518              		.loc 1 1685 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1685:src/display.c **** 	int j;
 2521              		.loc 1 1685 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1722:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1722 2 is_stmt 1 view .LVU776
1722:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1722 17 is_stmt 0 view .LVU777
 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1722:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1722 6 view .LVU778
ARM GAS  /tmp/ccE2jV6G.s 			page 117


 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1723:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1723 2 is_stmt 1 view .LVU779
1723:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1723 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1723:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1723 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1724:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1724 2 is_stmt 1 view .LVU782
1724:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1724 17 is_stmt 0 view .LVU783
 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1724:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1724 6 view .LVU784
 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1725:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1725 2 is_stmt 1 view .LVU785
1725:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1725 5 is_stmt 0 view .LVU786
 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1726:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1726 2 is_stmt 1 view .LVU787
1726:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1726 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1730 12 is_stmt 1 view .LVU789
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1730 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1729:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1729 11 view .LVU791
 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
 2570              	.L247:
1731:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2571              		.loc 1 1731 4 is_stmt 1 view .LVU792
 2572              	.LBB263:
 2573              	.LBI263:
 404:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccE2jV6G.s 			page 118


 2574              		.loc 1 404 14 view .LVU793
 2575              	.LBB264:
 405:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 405 3 view .LVU794
 405:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 405 12 view .LVU795
 405:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 405 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 405:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 405 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 405:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 405 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
 405:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 405 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 407:src/display.c **** }
 2591              		.loc 1 407 3 is_stmt 1 view .LVU800
 407:src/display.c **** }
 2592              		.loc 1 407 3 is_stmt 0 view .LVU801
 2593              	.LBE264:
 2594              	.LBE263:
1732:src/display.c **** 	}
 2595              		.loc 1 1732 4 is_stmt 1 view .LVU802
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1730 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1732:src/display.c **** 	}
 2599              		.loc 1 1732 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1730 24 is_stmt 1 view .LVU805
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1730 12 view .LVU806
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1730 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
1735:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1735 2 is_stmt 1 view .LVU808
1735:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1735 6 is_stmt 0 view .LVU809
 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1735:src/display.c **** 	  p = (char *)S7_fract_EQ;
ARM GAS  /tmp/ccE2jV6G.s 			page 119


 2614              		.loc 1 1735 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1737:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1737 7 is_stmt 1 view .LVU811
1737:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1737 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1740:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1740 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1741:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1741 26 is_stmt 1 view .LVU814
 2628              	.LBB267:
 2629              	.LBB265:
 405:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 405 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 405:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 405 16 view .LVU816
 2637              	.LBE265:
 2638              	.LBE267:
 2639              	.LBB268:
 2640              	.LBB269:
 405:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 405 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 405:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 405 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 407:src/display.c **** }
 2648              		.loc 1 407 3 is_stmt 1 view .LVU819
 407:src/display.c **** }
 2649              		.loc 1 407 3 is_stmt 0 view .LVU820
 2650              	.LBE269:
 2651              	.LBE268:
1743:src/display.c **** 	}
 2652              		.loc 1 1743 4 is_stmt 1 view .LVU821
1741:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2653              		.loc 1 1741 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2655              	.LVL287:
1743:src/display.c **** 	}
 2656              		.loc 1 1743 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
ARM GAS  /tmp/ccE2jV6G.s 			page 120


 2658              	.LVL288:
1741:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1741 38 is_stmt 1 view .LVU824
1741:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1741 26 view .LVU825
1741:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1741 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1742:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1742 4 is_stmt 1 view .LVU827
 2667              	.LBB271:
 2668              	.LBI268:
 404:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 404 14 view .LVU828
 2670              	.LBB270:
 405:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 405 3 view .LVU829
 405:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 405 12 view .LVU830
 405:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 405 16 is_stmt 0 view .LVU831
 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 405:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 405 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
 406:src/display.c ****   return res;
 2680              		.loc 1 406 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 406:src/display.c ****   return res;
 2684              		.loc 1 406 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 406:src/display.c ****   return res;
 2688              		.loc 1 406 8 view .LVU835
 2689              	.LBE270:
 2690              	.LBE271:
 2691              	.LBB272:
 2692              	.LBB266:
 406:src/display.c ****   return res;
 2693              		.loc 1 406 8 is_stmt 1 view .LVU836
 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
 2696              	.LVL294:
 406:src/display.c ****   return res;
 2697              		.loc 1 406 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
ARM GAS  /tmp/ccE2jV6G.s 			page 121


 406:src/display.c ****   return res;
 2701              		.loc 1 406 8 view .LVU838
 2702              	.LBE266:
 2703              	.LBE272:
1736:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1736 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1727:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1727 4 is_stmt 1 view .LVU840
1728:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1728 4 view .LVU841
1728:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1728 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
 2714              	.LVL297:
1730:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1730 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
1719:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1719 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
1720:src/display.c **** 	}
 2725              		.loc 1 1720 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1685:src/display.c **** 	int j;
 2729              		.loc 1 1685 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1720:src/display.c **** 	}
 2732              		.loc 1 1720 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1685:src/display.c **** 	int j;
 2735              		.loc 1 1685 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
 2739              	.L264:
1696:src/display.c **** 	    *res++ += '-';
 2740              		.loc 1 1696 4 is_stmt 1 view .LVU849
1696:src/display.c **** 	    *res++ += '-';
 2741              		.loc 1 1696 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1697:src/display.c **** 	  else
 2743              		.loc 1 1697 6 is_stmt 1 view .LVU851
ARM GAS  /tmp/ccE2jV6G.s 			page 122


1697:src/display.c **** 	  else
 2744              		.loc 1 1697 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1697:src/display.c **** 	  else
 2747              		.loc 1 1697 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1697:src/display.c **** 	  else
 2750              		.loc 1 1697 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1697:src/display.c **** 	  else
 2753              		.loc 1 1697 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1697:src/display.c **** 	  else
 2756              		.loc 1 1697 10 view .LVU856
 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1709:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1709 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1710:src/display.c **** 	}
 2764              		.loc 1 1710 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
 2768 016e 87E7     		b	.L239
 2769              	.L266:
1715:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1715 6 view .LVU859
1715:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1715 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1715:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1715 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1715:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1715 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1715:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1715 10 view .LVU863
 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
 2783              	.LVL311:
1716:src/display.c **** 	  }
 2784              		.loc 1 1716 6 is_stmt 1 view .LVU864
1716:src/display.c **** 	  }
 2785              		.loc 1 1716 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
ARM GAS  /tmp/ccE2jV6G.s 			page 123


 2787              	.LVL312:
1716:src/display.c **** 	  }
 2788              		.loc 1 1716 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1716:src/display.c **** 	  }
 2792              		.loc 1 1716 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1699:src/display.c **** 	}
 2796              		.loc 1 1699 6 is_stmt 1 view .LVU868
 2797              	.LBB273:
 2798              	.LBI273:
 293:src/display.c **** {
 2799              		.loc 1 293 13 view .LVU869
 2800              	.LBB274:
 295:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 295 3 view .LVU870
 295:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 295 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
 296:src/display.c **** }
 2805              		.loc 1 296 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 295 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 296:src/display.c **** }
 2809              		.loc 1 296 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 297:src/display.c **** 
 2812              		.loc 1 297 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE274:
 2825              	.LBE273:
 2826              	.LBE262:
 2827              	.LBE261:
 2828              		.cfi_endproc
 2829              	.LFE23:
 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
ARM GAS  /tmp/ccE2jV6G.s 			page 124


 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 559:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 559 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 560:src/display.c ****       int c;
 2849              		.loc 1 560 7 view .LVU877
 2850              	.LVL316:
 561:src/display.c ****       unsigned int b;
 2851              		.loc 1 561 7 view .LVU878
 562:src/display.c **** 
 2852              		.loc 1 562 7 view .LVU879
 565:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 565 7 view .LVU880
 559:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 559 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
 2858              		.cfi_offset 14, -4
 565:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 565 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 574:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 574 7 is_stmt 1 view .LVU883
 574:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 574 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 574:src/display.c **** 	SET_EXP_SIGN;
 2872              		.loc 1 574 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
 2874 001a 17D9     		bls	.L280
 2875              	.L273:
 576:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 576 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 577:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 125


 2878              		.loc 1 577 7 view .LVU887
 576:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 576 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 577:src/display.c **** 
 2883              		.loc 1 577 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 580:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 580 7 is_stmt 1 view .LVU890
 580:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 580 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
 580:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 580 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 582:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 582 7 is_stmt 1 view .LVU893
 582:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 582 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 582:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 582 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
 584:src/display.c **** 
 2901              		.loc 1 584 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 570:src/display.c ****       }
 2905              		.loc 1 570 16 is_stmt 1 view .LVU897
 570:src/display.c ****       }
 2906              		.loc 1 570 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 570:src/display.c ****       }
 2911              		.loc 1 570 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 570:src/display.c ****       }
 2914              		.loc 1 570 39 is_stmt 1 view .LVU900
 574:src/display.c **** 	SET_EXP_SIGN;
 2915              		.loc 1 574 7 view .LVU901
 574:src/display.c **** 	SET_EXP_SIGN;
 2916              		.loc 1 574 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 574:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 574 10 view .LVU903
ARM GAS  /tmp/ccE2jV6G.s 			page 126


 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 575:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 575 2 is_stmt 1 view .LVU904
 2923              	.LBB281:
 2924              	.LBI281:
 305:src/display.c **** {
 2925              		.loc 1 305 13 view .LVU905
 2926              	.LBB282:
 307:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 307 3 view .LVU906
 307:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 307 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 308:src/display.c **** }
 2931              		.loc 1 308 3 view .LVU908
 2932 0050 8220     		movs	r0, #130
 307:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 307 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 308:src/display.c **** }
 2935              		.loc 1 308 3 is_stmt 1 view .LVU910
 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 309:src/display.c **** 
 2938              		.loc 1 309 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
 309:src/display.c **** 
 2942              		.loc 1 309 1 view .LVU912
 2943              	.LBE282:
 2944              	.LBE281:
 2945              	.LBB283:
 2946              	.LBI283:
 559:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 559 17 is_stmt 1 view .LVU913
 2948              	.LBB284:
 583:src/display.c ****     }
 2949              		.loc 1 583 2 view .LVU914
 2950              	.LBE284:
 2951              	.LBE283:
 584:src/display.c **** 
 2952              		.loc 1 584 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958              	.LVL327:
 2959              	.LBB286:
 2960              	.LBB285:
 583:src/display.c ****     }
 2961              		.loc 1 583 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
ARM GAS  /tmp/ccE2jV6G.s 			page 127


 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 583:src/display.c ****     }
 2968              		.loc 1 583 2 view .LVU917
 2969              	.LBE285:
 2970              	.LBE286:
 581:src/display.c ****       if (get_overflow())
 2971              		.loc 1 581 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1396:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1396 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1396:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1396 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
ARM GAS  /tmp/ccE2jV6G.s 			page 128


1396:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1396 67 view .LVU921
 3019 0006 1546     		mov	r5, r2
 3020 0008 0646     		mov	r6, r0
 3021 000a 0F46     		mov	r7, r1
1397:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1397 2 is_stmt 1 view .LVU922
1397:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1397 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1397:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1397 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L377
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1403:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3031              		.loc 1 1403 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1397:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1397 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
 3036              	.LVL332:
1398:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1398 2 is_stmt 1 view .LVU927
1399:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1399 2 view .LVU928
1400:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1400 2 view .LVU929
1401:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1401 2 view .LVU930
1402:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1402 2 view .LVU931
1403:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1403 2 view .LVU932
1403:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1403 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1404:src/display.c **** 
 3045              		.loc 1 1404 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1406:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1406 2 view .LVU935
 3048 0020 00F24181 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L377+4
 3050 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3051              	.LVL334:
1414:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1414 2 view .LVU936
1414:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1414 5 is_stmt 0 view .LVU937
 3054 002a 002D     		cmp	r5, #0
 3055 002c 00F04181 		beq	.L368
 3056              	.LVL335:
 3057              	.L288:
ARM GAS  /tmp/ccE2jV6G.s 			page 129


1419:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1419 2 is_stmt 1 view .LVU938
1419:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1419 24 is_stmt 0 view .LVU939
 3060 0030 0AF1FF33 		add	r3, r10, #-1
1419:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1419 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1419:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1419 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F380 		bne	.L369
1436:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1436 4 is_stmt 1 view .LVU942
1436:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1436 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
 3070 0046 17DC     		bgt	.L299
 3071              	.LBB287:
1437:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1437 6 is_stmt 1 view .LVU944
1437:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1437 38 is_stmt 0 view .LVU945
 3074 0048 0121     		movs	r1, #1
 3075 004a ABF1200C 		sub	ip, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA0CF3 		lsl	r3, r1, ip
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
 3081              	.LVL336:
1438:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1438 6 is_stmt 1 view .LVU946
1437:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1437 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1438:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1438 9 view .LVU948
 3087 0068 3040     		ands	r0, r0, r6
 3088 006a 3940     		ands	r1, r1, r7
 3089              	.LVL337:
1439:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1439 9 view .LVU949
 3091 006c BAF10A0F 		cmp	r10, #10
1438:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1438 9 view .LVU950
 3093 0070 0646     		mov	r6, r0
 3094              	.LVL338:
1438:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3095              		.loc 1 1438 9 view .LVU951
 3096 0072 0F46     		mov	r7, r1
1439:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1439 6 is_stmt 1 view .LVU952
1439:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1439 9 is_stmt 0 view .LVU953
ARM GAS  /tmp/ccE2jV6G.s 			page 130


 3099 0074 00F03D81 		beq	.L370
 3100              	.LVL339:
 3101              	.L299:
1439:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1439 9 view .LVU954
 3103              	.LBE287:
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1443 4 is_stmt 1 view .LVU955
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1443 8 is_stmt 0 view .LVU956
 3106 0078 B54B     		ldr	r3, .L377+8
 3107 007a 1B68     		ldr	r3, [r3]
 3108 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1443 7 view .LVU957
 3110 0080 9A07     		lsls	r2, r3, #30
 3111 0082 41D5     		bpl	.L330
1446:src/display.c **** 	    v = (unsigned long long int)vs;
 3112              		.loc 1 1446 11 is_stmt 1 view .LVU958
 3113              	.LBB288:
1454:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1454 6 view .LVU959
1455:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1455 6 view .LVU960
1455:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1455 25 is_stmt 0 view .LVU961
 3117 0084 4FEA5A02 		lsr	r2, r10, #1
 3118              	.LVL340:
1456:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1456 6 is_stmt 1 view .LVU962
1456:src/display.c **** 	    v = (unsigned long long int)vs;
 3120              		.loc 1 1456 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1456:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1456 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1457:src/display.c **** 
 3131              		.loc 1 1457 6 is_stmt 1 discriminator 4 view .LVU965
1459:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1459 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0308 		add	r8, fp, r3
1459:src/display.c **** 	    for (i=0; i<n; i++) {
 3134              		.loc 1 1459 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
 3136              	.LVL342:
1459:src/display.c **** 	    for (i=0; i<n; i++) {
 3137              		.loc 1 1459 21 discriminator 4 view .LVU968
 3138 00a2 B8FBF3F8 		udiv	r8, r8, r3
1460:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1460 6 discriminator 4 view .LVU969
ARM GAS  /tmp/ccE2jV6G.s 			page 131


 3140 00a6 B8F1000F 		cmp	r8, #0
1457:src/display.c **** 
 3141              		.loc 1 1457 8 discriminator 4 view .LVU970
 3142 00aa 3046     		mov	r0, r6
 3143 00ac 3946     		mov	r1, r7
 3144              	.LVL343:
1459:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1459 6 is_stmt 1 discriminator 4 view .LVU971
1460:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1460 6 discriminator 4 view .LVU972
1460:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1460 16 discriminator 4 view .LVU973
1460:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1460 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ae 40F38381 		ble	.L331
 3150 00b2 05AC     		add	r4, sp, #20
 3151 00b4 DFF8A4B2 		ldr	fp, .L377+20
 3152              	.LVL344:
1460:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1460 6 discriminator 4 view .LVU975
 3154 00b8 08EB0406 		add	r6, r8, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB289:
1461:src/display.c **** 	      v /= b;
 3158              		.loc 1 1461 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00bc 5246     		mov	r2, r10
 3160 00be 0023     		movs	r3, #0
 3161 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1462:src/display.c **** 	      buf[i] = DIGITS[r];
 3163              		.loc 1 1462 8 discriminator 3 view .LVU977
1463:src/display.c **** 	    }
 3164              		.loc 1 1463 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c8 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1463:src/display.c **** 	    }
 3168              		.loc 1 1463 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE289:
1460:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1460 21 discriminator 3 view .LVU980
1460:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1460 16 discriminator 3 view .LVU981
1460:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1460 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00cc B442     		cmp	r4, r6
 3174 00ce F5D1     		bne	.L306
 3175 00d0 08F1FF31 		add	r1, r8, #-1
 3176              	.LVL348:
1460:src/display.c **** 	      const int r = v % b;
 3177              		.loc 1 1460 6 view .LVU983
 3178 00d4 4446     		mov	r4, r8
 3179              	.LVL349:
 3180              	.L298:
1460:src/display.c **** 	      const int r = v % b;
 3181              		.loc 1 1460 6 view .LVU984
ARM GAS  /tmp/ccE2jV6G.s 			page 132


 3182              	.LBE288:
1473:src/display.c **** 	if (res) {
 3183              		.loc 1 1473 2 is_stmt 1 view .LVU985
1474:src/display.c **** 	  if (sign) *res++ = '-';
 3184              		.loc 1 1474 2 view .LVU986
1474:src/display.c **** 	  if (sign) *res++ = '-';
 3185              		.loc 1 1474 5 is_stmt 0 view .LVU987
 3186 00d6 002D     		cmp	r5, #0
 3187 00d8 3ED0     		beq	.L307
 3188              	.LVL350:
 3189              	.L371:
1475:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3190              		.loc 1 1475 4 is_stmt 1 view .LVU988
1475:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3191              		.loc 1 1475 7 is_stmt 0 view .LVU989
 3192 00da 049B     		ldr	r3, [sp, #16]
 3193 00dc 13B1     		cbz	r3, .L308
1475:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3194              		.loc 1 1475 14 is_stmt 1 discriminator 1 view .LVU990
 3195              	.LVL351:
1475:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3196              		.loc 1 1475 21 is_stmt 0 discriminator 1 view .LVU991
 3197 00de 2D23     		movs	r3, #45
 3198 00e0 05F8013B 		strb	r3, [r5], #1
 3199              	.LVL352:
 3200              	.L308:
1476:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3201              		.loc 1 1476 4 is_stmt 1 view .LVU992
1476:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3202              		.loc 1 1476 7 is_stmt 0 view .LVU993
 3203 00e4 0D2C     		cmp	r4, #13
 3204 00e6 00F3E980 		bgt	.L309
1483:src/display.c **** 	      *res++ = buf[i];
 3205              		.loc 1 1483 12 is_stmt 1 view .LVU994
 3206              	.LVL353:
1483:src/display.c **** 	      *res++ = buf[i];
 3207              		.loc 1 1483 12 is_stmt 0 view .LVU995
 3208 00ea 481C     		adds	r0, r1, #1
 3209 00ec 09D0     		beq	.L285
 3210 00ee 0131     		adds	r1, r1, #1
 3211 00f0 05AA     		add	r2, sp, #20
 3212 00f2 013D     		subs	r5, r5, #1
 3213 00f4 1144     		add	r1, r1, r2
 3214              	.LVL354:
 3215              	.L312:
1484:src/display.c **** 	  }
 3216              		.loc 1 1484 8 is_stmt 1 view .LVU996
1484:src/display.c **** 	  }
 3217              		.loc 1 1484 15 is_stmt 0 view .LVU997
 3218 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3219              	.LVL355:
1484:src/display.c **** 	  }
 3220              		.loc 1 1484 15 view .LVU998
 3221 00fa 05F8013F 		strb	r3, [r5, #1]!
 3222              	.LVL356:
1483:src/display.c **** 	      *res++ = buf[i];
 3223              		.loc 1 1483 12 is_stmt 1 view .LVU999
ARM GAS  /tmp/ccE2jV6G.s 			page 133


1483:src/display.c **** 	      *res++ = buf[i];
 3224              		.loc 1 1483 12 is_stmt 0 view .LVU1000
 3225 00fe 9142     		cmp	r1, r2
 3226 0100 F9D1     		bne	.L312
 3227              	.LVL357:
 3228              	.L285:
1531:src/display.c **** 
 3229              		.loc 1 1531 7 view .LVU1001
 3230 0102 17B0     		add	sp, sp, #92
 3231              		.cfi_remember_state
 3232              		.cfi_def_cfa_offset 36
 3233              		@ sp needed
 3234 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3235              	.LVL358:
 3236              	.L330:
 3237              		.cfi_restore_state
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3238              		.loc 1 1443 25 discriminator 1 view .LVU1002
 3239 0108 56EA0703 		orrs	r3, r6, r7
 3240 010c 00F0C480 		beq	.L293
1446:src/display.c **** 	    v = (unsigned long long int)vs;
 3241              		.loc 1 1446 11 is_stmt 1 view .LVU1003
1447:src/display.c **** 	    for (i=0; v != 0; i++) {
 3242              		.loc 1 1447 6 view .LVU1004
 3243 0110 DFF848B2 		ldr	fp, .L377+20
 3244              	.LVL359:
1447:src/display.c **** 	    for (i=0; v != 0; i++) {
 3245              		.loc 1 1447 6 is_stmt 0 view .LVU1005
 3246 0114 CDF800A0 		str	r10, [sp]
 3247 0118 0023     		movs	r3, #0
1447:src/display.c **** 	    for (i=0; v != 0; i++) {
 3248              		.loc 1 1447 8 view .LVU1006
 3249 011a B046     		mov	r8, r6
 3250 011c D946     		mov	r9, fp
 3251 011e 3E46     		mov	r6, r7
1448:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1448 6 is_stmt 1 view .LVU1007
 3253              	.LVL360:
1448:src/display.c **** 	      const int r = v % b;
 3254              		.loc 1 1448 16 view .LVU1008
 3255 0120 9B46     		mov	fp, r3
 3256 0122 05AF     		add	r7, sp, #20
 3257              	.LVL361:
 3258              	.L304:
 3259              	.LBB290:
1449:src/display.c **** 	      v /= b;
 3260              		.loc 1 1449 8 discriminator 3 view .LVU1009
 3261 0124 4046     		mov	r0, r8
 3262 0126 3146     		mov	r1, r6
 3263 0128 5246     		mov	r2, r10
 3264 012a 5B46     		mov	r3, fp
 3265 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3266              	.LVL362:
 3267 0130 3346     		mov	r3, r6
 3268 0132 9446     		mov	ip, r2
 3269              	.LVL363:
1450:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/ccE2jV6G.s 			page 134


 3270              		.loc 1 1450 8 discriminator 3 view .LVU1010
 3271              	.LBE290:
1448:src/display.c **** 	      const int r = v % b;
 3272              		.loc 1 1448 6 is_stmt 0 discriminator 3 view .LVU1011
 3273 0134 5B45     		cmp	r3, fp
 3274 0136 4246     		mov	r2, r8
 3275              	.LVL364:
 3276              	.LBB291:
1451:src/display.c **** 	    }
 3277              		.loc 1 1451 15 discriminator 3 view .LVU1012
 3278 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3279              	.LVL365:
1451:src/display.c **** 	    }
 3280              		.loc 1 1451 15 discriminator 3 view .LVU1013
 3281 013c 07F801CB 		strb	ip, [r7], #1
 3282              	.LBE291:
1448:src/display.c **** 	      const int r = v % b;
 3283              		.loc 1 1448 6 discriminator 3 view .LVU1014
 3284 0140 08BF     		it	eq
 3285 0142 5245     		cmpeq	r2, r10
 3286              	.LBB292:
1450:src/display.c **** 	      buf[i] = DIGITS[r];
 3287              		.loc 1 1450 10 discriminator 3 view .LVU1015
 3288 0144 0E46     		mov	r6, r1
 3289              	.LVL366:
1451:src/display.c **** 	    }
 3290              		.loc 1 1451 8 is_stmt 1 discriminator 3 view .LVU1016
 3291              	.LBE292:
1448:src/display.c **** 	      const int r = v % b;
 3292              		.loc 1 1448 24 discriminator 3 view .LVU1017
 3293              	.LBB293:
1450:src/display.c **** 	      buf[i] = DIGITS[r];
 3294              		.loc 1 1450 10 is_stmt 0 discriminator 3 view .LVU1018
 3295 0146 8046     		mov	r8, r0
 3296 0148 2146     		mov	r1, r4
 3297              	.LVL367:
1450:src/display.c **** 	      buf[i] = DIGITS[r];
 3298              		.loc 1 1450 10 discriminator 3 view .LVU1019
 3299              	.LBE293:
1448:src/display.c **** 	      const int r = v % b;
 3300              		.loc 1 1448 25 discriminator 3 view .LVU1020
 3301 014a 04F10104 		add	r4, r4, #1
 3302              	.LVL368:
1448:src/display.c **** 	      const int r = v % b;
 3303              		.loc 1 1448 16 is_stmt 1 discriminator 3 view .LVU1021
1448:src/display.c **** 	      const int r = v % b;
 3304              		.loc 1 1448 6 is_stmt 0 discriminator 3 view .LVU1022
 3305 014e E9D2     		bcs	.L304
 3306 0150 DDF800A0 		ldr	r10, [sp]
 3307              	.LVL369:
1473:src/display.c **** 	if (res) {
 3308              		.loc 1 1473 2 is_stmt 1 view .LVU1023
1474:src/display.c **** 	  if (sign) *res++ = '-';
 3309              		.loc 1 1474 2 view .LVU1024
1474:src/display.c **** 	  if (sign) *res++ = '-';
 3310              		.loc 1 1474 5 is_stmt 0 view .LVU1025
 3311 0154 002D     		cmp	r5, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 135


 3312 0156 C0D1     		bne	.L371
 3313              	.LVL370:
 3314              	.L307:
 3315              	.LBB294:
1502:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3316              		.loc 1 1502 4 is_stmt 1 view .LVU1026
1502:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3317              		.loc 1 1502 33 is_stmt 0 view .LVU1027
 3318 0158 BAF1020F 		cmp	r10, #2
 3319 015c 00F0F080 		beq	.L372
 3320              	.LVL371:
1503:src/display.c **** 	    : b == 16 ? 2 : 3;
 3321              		.loc 1 1503 4 is_stmt 1 view .LVU1028
1503:src/display.c **** 	    : b == 16 ? 2 : 3;
 3322              		.loc 1 1503 30 is_stmt 0 view .LVU1029
 3323 0160 BAF1040F 		cmp	r10, #4
 3324 0164 00F01F81 		beq	.L373
1502:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3325              		.loc 1 1502 33 view .LVU1030
 3326 0168 BAF1100F 		cmp	r10, #16
 3327 016c 0CBF     		ite	eq
 3328 016e 4FF0020A 		moveq	r10, #2
 3329 0172 4FF0030A 		movne	r10, #3
 3330 0176 0C26     		movs	r6, #12
 3331              	.LVL372:
 3332              	.L314:
1505:src/display.c **** #endif
 3333              		.loc 1 1505 4 is_stmt 1 view .LVU1031
 3334 0178 0091     		str	r1, [sp]
 3335 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3336              	.LVL373:
1507:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3337              		.loc 1 1507 4 view .LVU1032
1508:src/display.c **** 	    State2.window = 0;
 3338              		.loc 1 1508 26 is_stmt 0 view .LVU1033
 3339 017e 724B     		ldr	r3, .L377
1507:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3340              		.loc 1 1507 17 view .LVU1034
 3341 0180 744A     		ldr	r2, .L377+12
1508:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1508 26 view .LVU1035
 3343 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1507:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3344              		.loc 1 1507 27 view .LVU1036
 3345 0184 0099     		ldr	r1, [sp]
 3346 0186 91FBF6F1 		sdiv	r1, r1, r6
1508:src/display.c **** 	    State2.window = 0;
 3347              		.loc 1 1508 8 view .LVU1037
 3348 018a C3F3C207 		ubfx	r7, r3, #3, #3
1508:src/display.c **** 	    State2.window = 0;
 3349              		.loc 1 1508 7 view .LVU1038
 3350 018e B942     		cmp	r1, r7
1507:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3351              		.loc 1 1507 17 view .LVU1039
 3352 0190 1160     		str	r1, [r2]
1508:src/display.c **** 	    State2.window = 0;
 3353              		.loc 1 1508 4 is_stmt 1 view .LVU1040
ARM GAS  /tmp/ccE2jV6G.s 			page 136


1508:src/display.c **** 	    State2.window = 0;
 3354              		.loc 1 1508 7 is_stmt 0 view .LVU1041
 3355 0192 C0F2F680 		blt	.L316
 3356 0196 06FB07F7 		mul	r7, r6, r7
 3357              	.L317:
1510:src/display.c **** 
 3358              		.loc 1 1510 4 is_stmt 1 view .LVU1042
1510:src/display.c **** 
 3359              		.loc 1 1510 11 is_stmt 0 view .LVU1043
 3360 019a 16AB     		add	r3, sp, #88
 3361 019c 16AA     		add	r2, sp, #88
 3362 019e 1C44     		add	r4, r4, r3
 3363              	.LVL374:
1510:src/display.c **** 
 3364              		.loc 1 1510 11 view .LVU1044
 3365 01a0 D519     		adds	r5, r2, r7
 3366 01a2 0023     		movs	r3, #0
 3367 01a4 453D     		subs	r5, r5, #69
 3368 01a6 04F8443C 		strb	r3, [r4, #-68]
1512:src/display.c **** 	  for (k = 0; k < 12; k++)
 3369              		.loc 1 1512 4 is_stmt 1 view .LVU1045
 3370              	.LVL375:
1513:src/display.c **** 	    if (buf[j + k] == '\0')
 3371              		.loc 1 1513 4 view .LVU1046
1513:src/display.c **** 	    if (buf[j + k] == '\0')
 3372              		.loc 1 1513 16 view .LVU1047
1510:src/display.c **** 
 3373              		.loc 1 1510 11 is_stmt 0 view .LVU1048
 3374 01aa 2A46     		mov	r2, r5
 3375              	.LVL376:
 3376              	.L319:
1514:src/display.c **** 	      break;
 3377              		.loc 1 1514 6 is_stmt 1 view .LVU1049
1513:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1513 24 view .LVU1050
1514:src/display.c **** 	      break;
 3379              		.loc 1 1514 9 is_stmt 0 view .LVU1051
 3380 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3381 01b0 0029     		cmp	r1, #0
 3382 01b2 00F0EC80 		beq	.L318
1513:src/display.c **** 	    if (buf[j + k] == '\0')
 3383              		.loc 1 1513 25 discriminator 2 view .LVU1052
 3384 01b6 0133     		adds	r3, r3, #1
 3385              	.LVL377:
1513:src/display.c **** 	    if (buf[j + k] == '\0')
 3386              		.loc 1 1513 16 is_stmt 1 discriminator 2 view .LVU1053
1513:src/display.c **** 	    if (buf[j + k] == '\0')
 3387              		.loc 1 1513 4 is_stmt 0 discriminator 2 view .LVU1054
 3388 01b8 0C2B     		cmp	r3, #12
 3389 01ba F7D1     		bne	.L319
1516:src/display.c **** 	    int ch = buf[j++];
 3390              		.loc 1 1516 4 view .LVU1055
 3391 01bc 4FF00B08 		mov	r8, #11
 3392              	.LVL378:
 3393              	.L320:
1516:src/display.c **** 	    int ch = buf[j++];
 3394              		.loc 1 1516 4 view .LVU1056
ARM GAS  /tmp/ccE2jV6G.s 			page 137


 3395 01c0 0137     		adds	r7, r7, #1
 3396 01c2 4744     		add	r7, r7, r8
 3397 01c4 4446     		mov	r4, r8
 3398 01c6 4FF0630B 		mov	fp, #99
 3399 01ca 09E0     		b	.L325
 3400              	.LVL379:
 3401              	.L374:
 3402              	.LBB295:
1522:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3403              		.loc 1 1522 8 view .LVU1057
 3404 01cc 624B     		ldr	r3, .L377+16
 3405 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3406              	.LVL380:
 3407              	.LBB296:
 3408              	.LBI296:
 364:src/display.c ****   if (sep == SEP_NONE)
 3409              		.loc 1 364 14 is_stmt 1 view .LVU1058
 3410              	.LBB297:
 365:src/display.c ****     return res;
 3411              		.loc 1 365 3 view .LVU1059
 365:src/display.c ****     return res;
 3412              		.loc 1 365 6 is_stmt 0 view .LVU1060
 3413 01d0 09B1     		cbz	r1, .L323
 365:src/display.c ****     return res;
 3414              		.loc 1 365 6 view .LVU1061
 3415 01d2 FFF7FEFF 		bl	set_separator.part.0
 3416              	.LVL381:
 3417              	.L323:
 365:src/display.c ****     return res;
 3418              		.loc 1 365 6 view .LVU1062
 3419              	.LBE297:
 3420              	.LBE296:
1523:src/display.c **** 	  }
 3421              		.loc 1 1523 6 is_stmt 1 discriminator 2 view .LVU1063
 3422              	.LBE295:
1516:src/display.c **** 	    int ch = buf[j++];
 3423              		.loc 1 1516 4 is_stmt 0 discriminator 2 view .LVU1064
 3424 01d6 013C     		subs	r4, r4, #1
1516:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1516 4 discriminator 2 view .LVU1065
 3426 01d8 621C     		adds	r2, r4, #1
 3427              	.LBB300:
1523:src/display.c **** 	  }
 3428              		.loc 1 1523 10 discriminator 2 view .LVU1066
 3429 01da ABF1090B 		sub	fp, fp, #9
 3430              	.LVL382:
1523:src/display.c **** 	  }
 3431              		.loc 1 1523 10 discriminator 2 view .LVU1067
 3432              	.LBE300:
1516:src/display.c **** 	    int ch = buf[j++];
 3433              		.loc 1 1516 24 is_stmt 1 discriminator 2 view .LVU1068
1516:src/display.c **** 	    int ch = buf[j++];
 3434              		.loc 1 1516 14 discriminator 2 view .LVU1069
1516:src/display.c **** 	    int ch = buf[j++];
 3435              		.loc 1 1516 4 is_stmt 0 discriminator 2 view .LVU1070
 3436 01de 16D0     		beq	.L329
 3437              	.LVL383:
ARM GAS  /tmp/ccE2jV6G.s 			page 138


 3438              	.L325:
 3439              	.LBB301:
1517:src/display.c **** 	    if (i >= shift)
 3440              		.loc 1 1517 6 is_stmt 1 view .LVU1071
1519:src/display.c **** 	    set_dig(dig, ch);
 3441              		.loc 1 1519 8 view .LVU1072
1517:src/display.c **** 	    if (i >= shift)
 3442              		.loc 1 1517 10 is_stmt 0 view .LVU1073
 3443 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1518:src/display.c **** 	      ch -= 030;
 3444              		.loc 1 1518 9 view .LVU1074
 3445 01e4 A8EB0402 		sub	r2, r8, r4
 3446 01e8 B242     		cmp	r2, r6
 3447 01ea A7EB0409 		sub	r9, r7, r4
 3448              	.LVL384:
1518:src/display.c **** 	      ch -= 030;
 3449              		.loc 1 1518 6 is_stmt 1 view .LVU1075
1520:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3450              		.loc 1 1520 6 is_stmt 0 view .LVU1076
 3451 01ee 5846     		mov	r0, fp
1519:src/display.c **** 	    set_dig(dig, ch);
 3452              		.loc 1 1519 11 view .LVU1077
 3453 01f0 A8BF     		it	ge
 3454 01f2 1839     		subge	r1, r1, #24
 3455              	.LVL385:
1520:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3456              		.loc 1 1520 6 is_stmt 1 view .LVU1078
 3457 01f4 FFF7FEFF 		bl	set_dig
 3458              	.LVL386:
1521:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3459              		.loc 1 1521 6 view .LVU1079
1521:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3460              		.loc 1 1521 13 is_stmt 0 view .LVU1080
 3461 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3462 01fc 0AFB1393 		mls	r3, r10, r3, r9
1521:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3463              		.loc 1 1521 9 view .LVU1081
 3464 0200 002B     		cmp	r3, #0
 3465 0202 E8D1     		bne	.L323
1522:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3466              		.loc 1 1522 8 is_stmt 1 discriminator 1 view .LVU1082
 3467              	.LBB299:
 3468              	.LBB298:
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3469              		.loc 1 367 3 discriminator 1 view .LVU1083
 3470 0204 5846     		mov	r0, fp
 3471              	.LBE298:
 3472              	.LBE299:
1521:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3473              		.loc 1 1521 27 is_stmt 0 discriminator 1 view .LVU1084
 3474 0206 002C     		cmp	r4, #0
 3475 0208 E0D1     		bne	.L374
1523:src/display.c **** 	  }
 3476              		.loc 1 1523 6 is_stmt 1 view .LVU1085
1523:src/display.c **** 	  }
 3477              		.loc 1 1523 10 is_stmt 0 view .LVU1086
 3478 020a ABF1090B 		sub	fp, fp, #9
ARM GAS  /tmp/ccE2jV6G.s 			page 139


 3479              	.LVL387:
1523:src/display.c **** 	  }
 3480              		.loc 1 1523 10 view .LVU1087
 3481              	.LBE301:
1516:src/display.c **** 	    int ch = buf[j++];
 3482              		.loc 1 1516 24 is_stmt 1 view .LVU1088
1516:src/display.c **** 	    int ch = buf[j++];
 3483              		.loc 1 1516 14 view .LVU1089
 3484              	.L329:
1525:src/display.c **** 	    if (dig >= 0)
 3485              		.loc 1 1525 4 view .LVU1090
1525:src/display.c **** 	    if (dig >= 0)
 3486              		.loc 1 1525 7 is_stmt 0 view .LVU1091
 3487 020e 049B     		ldr	r3, [sp, #16]
 3488 0210 002B     		cmp	r3, #0
 3489 0212 3FF476AF 		beq	.L285
1526:src/display.c **** 	      set_dig(dig, '-');
 3490              		.loc 1 1526 6 is_stmt 1 view .LVU1092
1526:src/display.c **** 	      set_dig(dig, '-');
 3491              		.loc 1 1526 9 is_stmt 0 view .LVU1093
 3492 0216 BBF1000F 		cmp	fp, #0
 3493 021a C0F2C680 		blt	.L375
 3494              	.LVL388:
 3495              	.L328:
1527:src/display.c **** 	    else	SET_MANT_SIGN;
 3496              		.loc 1 1527 8 is_stmt 1 view .LVU1094
 3497 021e 5846     		mov	r0, fp
 3498 0220 2D21     		movs	r1, #45
 3499 0222 FFF7FEFF 		bl	set_dig
 3500              	.LVL389:
 3501 0226 6CE7     		b	.L285
 3502              	.LVL390:
 3503              	.L369:
1527:src/display.c **** 	    else	SET_MANT_SIGN;
 3504              		.loc 1 1527 8 is_stmt 0 view .LVU1095
 3505              	.LBE294:
1420:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3506              		.loc 1 1420 4 is_stmt 1 view .LVU1096
1420:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3507              		.loc 1 1420 8 is_stmt 0 view .LVU1097
 3508 0228 04AA     		add	r2, sp, #16
 3509 022a 3046     		mov	r0, r6
 3510 022c 3946     		mov	r1, r7
 3511 022e FFF7FEFF 		bl	extract_value
 3512              	.LVL391:
 3513 0232 8046     		mov	r8, r0
 3514 0234 8946     		mov	r9, r1
 3515              	.LVL392:
1421:src/display.c **** 	    v = value;
 3516              		.loc 1 1421 4 is_stmt 1 view .LVU1098
1421:src/display.c **** 	    v = value;
 3517              		.loc 1 1421 8 is_stmt 0 view .LVU1099
 3518 0236 FFF7FEFF 		bl	int_mode
 3519              	.LVL393:
1421:src/display.c **** 	    v = value;
 3520              		.loc 1 1421 7 view .LVU1100
 3521 023a 38BB     		cbnz	r0, .L290
ARM GAS  /tmp/ccE2jV6G.s 			page 140


1421:src/display.c **** 	    v = value;
 3522              		.loc 1 1421 33 discriminator 1 view .LVU1101
 3523 023c 049B     		ldr	r3, [sp, #16]
 3524 023e 012B     		cmp	r3, #1
 3525 0240 24D1     		bne	.L290
1421:src/display.c **** 	    v = value;
 3526              		.loc 1 1421 46 discriminator 2 view .LVU1102
 3527 0242 58EA0903 		orrs	r3, r8, r9
 3528 0246 00F08B80 		beq	.L376
 3529              	.LVL394:
 3530              	.L291:
1421:src/display.c **** 	    v = value;
 3531              		.loc 1 1421 46 discriminator 2 view .LVU1103
 3532 024a DFF810B1 		ldr	fp, .L377+20
 3533              	.LVL395:
1396:src/display.c **** 	const int ws = word_size();
 3534              		.loc 1 1396 67 discriminator 3 view .LVU1104
 3535 024e 0395     		str	r5, [sp, #12]
 3536 0250 05AB     		add	r3, sp, #20
 3537 0252 5D46     		mov	r5, fp
 3538              	.LVL396:
1396:src/display.c **** 	const int ws = word_size();
 3539              		.loc 1 1396 67 discriminator 3 view .LVU1105
 3540 0254 5646     		mov	r6, r10
 3541 0256 0027     		movs	r7, #0
 3542 0258 0024     		movs	r4, #0
 3543 025a 9B46     		mov	fp, r3
 3544              	.LVL397:
 3545              	.L297:
 3546              	.LBB304:
1430:src/display.c **** 	      v /= b;
 3547              		.loc 1 1430 8 is_stmt 1 discriminator 3 view .LVU1106
 3548 025c 4046     		mov	r0, r8
 3549 025e 4946     		mov	r1, r9
 3550 0260 3246     		mov	r2, r6
 3551 0262 3B46     		mov	r3, r7
 3552 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3553              	.LVL398:
1431:src/display.c **** 	      buf[i] = DIGITS[r];
 3554              		.loc 1 1431 8 discriminator 3 view .LVU1107
 3555 0268 CDE90089 		strd	r8, [sp]
1432:src/display.c **** 	    }
 3556              		.loc 1 1432 15 is_stmt 0 discriminator 3 view .LVU1108
 3557 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3558 026e 0BF8013B 		strb	r3, [fp], #1
 3559              	.LBE304:
1429:src/display.c **** 	      const int r = v % b;
 3560              		.loc 1 1429 6 discriminator 3 view .LVU1109
 3561 0272 DDE90023 		ldrd	r2, [sp]
 3562              	.LVL399:
1429:src/display.c **** 	      const int r = v % b;
 3563              		.loc 1 1429 6 discriminator 3 view .LVU1110
 3564 0276 BB42     		cmp	r3, r7
 3565 0278 08BF     		it	eq
 3566 027a B242     		cmpeq	r2, r6
 3567              	.LBB305:
1431:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/ccE2jV6G.s 			page 141


 3568              		.loc 1 1431 10 discriminator 3 view .LVU1111
 3569 027c 8946     		mov	r9, r1
 3570              	.LVL400:
1432:src/display.c **** 	    }
 3571              		.loc 1 1432 8 is_stmt 1 discriminator 3 view .LVU1112
 3572              	.LBE305:
1429:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1429 24 discriminator 3 view .LVU1113
 3574              	.LBB306:
1431:src/display.c **** 	      buf[i] = DIGITS[r];
 3575              		.loc 1 1431 10 is_stmt 0 discriminator 3 view .LVU1114
 3576 027e 8046     		mov	r8, r0
 3577 0280 2146     		mov	r1, r4
 3578              	.LVL401:
1431:src/display.c **** 	      buf[i] = DIGITS[r];
 3579              		.loc 1 1431 10 discriminator 3 view .LVU1115
 3580              	.LBE306:
1429:src/display.c **** 	      const int r = v % b;
 3581              		.loc 1 1429 25 discriminator 3 view .LVU1116
 3582 0282 04F10104 		add	r4, r4, #1
 3583              	.LVL402:
1429:src/display.c **** 	      const int r = v % b;
 3584              		.loc 1 1429 16 is_stmt 1 discriminator 3 view .LVU1117
1429:src/display.c **** 	      const int r = v % b;
 3585              		.loc 1 1429 6 is_stmt 0 discriminator 3 view .LVU1118
 3586 0286 E9D2     		bcs	.L297
 3587 0288 039D     		ldr	r5, [sp, #12]
 3588 028a 24E7     		b	.L298
 3589              	.LVL403:
 3590              	.L290:
1423:src/display.c **** 	    if (sign)
 3591              		.loc 1 1423 4 is_stmt 1 view .LVU1119
1423:src/display.c **** 	    if (sign)
 3592              		.loc 1 1423 7 is_stmt 0 view .LVU1120
 3593 028c 58EA0903 		orrs	r3, r8, r9
 3594 0290 DBD1     		bne	.L291
1424:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3595              		.loc 1 1424 6 is_stmt 1 view .LVU1121
1424:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3596              		.loc 1 1424 9 is_stmt 0 view .LVU1122
 3597 0292 049B     		ldr	r3, [sp, #16]
 3598 0294 002B     		cmp	r3, #0
 3599 0296 69D1     		bne	.L292
 3600              	.LVL404:
 3601              	.L293:
1426:src/display.c **** 	    return;
 3602              		.loc 1 1426 6 is_stmt 1 view .LVU1123
 3603              	.LBB307:
 3604              	.LBI307:
 404:src/display.c ****   if (res) *res++ = ch;
 3605              		.loc 1 404 14 view .LVU1124
 3606              	.LBB308:
 405:src/display.c ****   else	set_dig(base, ch);
 3607              		.loc 1 405 3 view .LVU1125
 405:src/display.c ****   else	set_dig(base, ch);
 3608              		.loc 1 405 6 is_stmt 0 view .LVU1126
 3609 0298 002D     		cmp	r5, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 142


 3610 029a 6DD0     		beq	.L295
 3611              	.LVL405:
 3612              	.L294:
 405:src/display.c ****   else	set_dig(base, ch);
 3613              		.loc 1 405 12 is_stmt 1 view .LVU1127
 405:src/display.c ****   else	set_dig(base, ch);
 3614              		.loc 1 405 19 is_stmt 0 view .LVU1128
 3615 029c 3023     		movs	r3, #48
 3616 029e 2B70     		strb	r3, [r5]
 3617              	.LBE308:
 3618              	.LBE307:
1531:src/display.c **** 
 3619              		.loc 1 1531 7 view .LVU1129
 3620 02a0 17B0     		add	sp, sp, #92
 3621              		.cfi_remember_state
 3622              		.cfi_def_cfa_offset 36
 3623              		@ sp needed
 3624 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3625              	.LVL406:
 3626              	.L286:
 3627              		.cfi_restore_state
1411:src/display.c **** 	}
 3628              		.loc 1 1411 11 is_stmt 1 view .LVU1130
1411:src/display.c **** 	}
 3629              		.loc 1 1411 15 is_stmt 0 view .LVU1131
 3630 02a6 FFF7FEFF 		bl	int_base
 3631              	.LVL407:
1411:src/display.c **** 	}
 3632              		.loc 1 1411 15 view .LVU1132
 3633 02aa 8246     		mov	r10, r0
 3634              	.LVL408:
1411:src/display.c **** 	}
 3635              		.loc 1 1411 27 is_stmt 1 view .LVU1133
1414:src/display.c **** 	  IntMaxWindow = 0;
 3636              		.loc 1 1414 2 view .LVU1134
1414:src/display.c **** 	  IntMaxWindow = 0;
 3637              		.loc 1 1414 5 is_stmt 0 view .LVU1135
 3638 02ac 002D     		cmp	r5, #0
 3639 02ae 7FF4BFAE 		bne	.L288
 3640              	.LVL409:
 3641              	.L368:
1415:src/display.c **** 	  carry_overflow();
 3642              		.loc 1 1415 4 is_stmt 1 view .LVU1136
1415:src/display.c **** 	  carry_overflow();
 3643              		.loc 1 1415 17 is_stmt 0 view .LVU1137
 3644 02b2 284B     		ldr	r3, .L377+12
 3645 02b4 1D60     		str	r5, [r3]
1416:src/display.c **** 	}
 3646              		.loc 1 1416 4 is_stmt 1 view .LVU1138
 3647 02b6 FFF7FEFF 		bl	carry_overflow
 3648              	.LVL410:
 3649 02ba B9E6     		b	.L288
 3650              	.LVL411:
 3651              	.L309:
1477:src/display.c **** 	      *res++ = buf[i];
 3652              		.loc 1 1477 12 view .LVU1139
1477:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/ccE2jV6G.s 			page 143


 3653              		.loc 1 1477 12 is_stmt 0 view .LVU1140
 3654 02bc 05AB     		add	r3, sp, #20
 3655 02be 5818     		adds	r0, r3, r1
1477:src/display.c **** 	      *res++ = buf[i];
 3656              		.loc 1 1477 24 view .LVU1141
 3657 02c0 A4F10D06 		sub	r6, r4, #13
 3658 02c4 6A1E     		subs	r2, r5, #1
 3659              	.LVL412:
 3660              	.L311:
1478:src/display.c **** 	    *res++ = '.';
 3661              		.loc 1 1478 8 is_stmt 1 view .LVU1142
1478:src/display.c **** 	    *res++ = '.';
 3662              		.loc 1 1478 20 is_stmt 0 view .LVU1143
 3663 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3664              	.LVL413:
1478:src/display.c **** 	    *res++ = '.';
 3665              		.loc 1 1478 15 view .LVU1144
 3666 02ca 02F8013F 		strb	r3, [r2, #1]!
 3667              	.LVL414:
1477:src/display.c **** 	      *res++ = buf[i];
 3668              		.loc 1 1477 12 is_stmt 1 view .LVU1145
1477:src/display.c **** 	      *res++ = buf[i];
 3669              		.loc 1 1477 12 is_stmt 0 view .LVU1146
 3670 02ce D343     		mvns	r3, r2
 3671 02d0 0B44     		add	r3, r3, r1
 3672 02d2 2B44     		add	r3, r3, r5
 3673 02d4 9E42     		cmp	r6, r3
 3674 02d6 F6DD     		ble	.L311
 3675 02d8 01F10E03 		add	r3, r1, #14
 3676 02dc 1C1B     		subs	r4, r3, r4
 3677              	.LVL415:
1477:src/display.c **** 	      *res++ = buf[i];
 3678              		.loc 1 1477 12 view .LVU1147
 3679 02de 8E42     		cmp	r6, r1
 3680 02e0 C8BF     		it	gt
 3681 02e2 0124     		movgt	r4, #1
 3682 02e4 2A19     		adds	r2, r5, r4
 3683              	.LVL416:
1479:src/display.c **** 	    *res++ = '.';
 3684              		.loc 1 1479 6 is_stmt 1 view .LVU1148
1479:src/display.c **** 	    *res++ = '.';
 3685              		.loc 1 1479 13 is_stmt 0 view .LVU1149
 3686 02e6 2E23     		movs	r3, #46
 3687 02e8 2B55     		strb	r3, [r5, r4]
1480:src/display.c **** 	  }
 3688              		.loc 1 1480 6 is_stmt 1 view .LVU1150
 3689              	.LVL417:
1480:src/display.c **** 	  }
 3690              		.loc 1 1480 13 is_stmt 0 view .LVU1151
 3691 02ea 5370     		strb	r3, [r2, #1]
1531:src/display.c **** 
 3692              		.loc 1 1531 7 view .LVU1152
 3693 02ec 17B0     		add	sp, sp, #92
 3694              		.cfi_remember_state
 3695              		.cfi_def_cfa_offset 36
 3696              		@ sp needed
 3697 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccE2jV6G.s 			page 144


 3698              	.LVL418:
 3699              	.L370:
 3700              		.cfi_restore_state
 3701              	.LBB310:
1439:src/display.c **** 	      vs |= ~mask;
 3702              		.loc 1 1439 38 discriminator 1 view .LVU1153
 3703 02f2 0BF1FF31 		add	r1, fp, #-1
1439:src/display.c **** 	      vs |= ~mask;
 3704              		.loc 1 1439 18 discriminator 1 view .LVU1154
 3705 02f6 CBF1210C 		rsb	ip, fp, #33
 3706 02fa C840     		lsrs	r0, r0, r1
 3707 02fc 07FA0CFC 		lsl	ip, r7, ip
 3708 0300 2039     		subs	r1, r1, #32
 3709 0302 40EA0C00 		orr	r0, r0, ip
 3710 0306 5CBF     		itt	pl
 3711 0308 47FA01F1 		asrpl	r1, r7, r1
 3712 030c 0843     		orrpl	r0, r0, r1
 3713 030e 00F00108 		and	r8, r0, #1
 3714 0312 4FF00009 		mov	r9, #0
 3715 0316 58EA0901 		orrs	r1, r8, r9
 3716 031a 08D0     		beq	.L300
1440:src/display.c **** 	  }
 3717              		.loc 1 1440 8 is_stmt 1 view .LVU1155
1440:src/display.c **** 	  }
 3718              		.loc 1 1440 11 is_stmt 0 view .LVU1156
 3719 031c 5042     		rsbs	r0, r2, #0
 3720 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3721 0322 40EA0602 		orr	r2, r0, r6
 3722              	.LVL419:
1440:src/display.c **** 	  }
 3723              		.loc 1 1440 11 view .LVU1157
 3724 0326 41EA0703 		orr	r3, r1, r7
 3725              	.LVL420:
1440:src/display.c **** 	  }
 3726              		.loc 1 1440 11 view .LVU1158
 3727 032a 1646     		mov	r6, r2
 3728              	.LVL421:
1440:src/display.c **** 	  }
 3729              		.loc 1 1440 11 view .LVU1159
 3730 032c 1F46     		mov	r7, r3
 3731              	.L300:
1440:src/display.c **** 	  }
 3732              		.loc 1 1440 11 view .LVU1160
 3733              	.LBE310:
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3734              		.loc 1 1443 4 is_stmt 1 view .LVU1161
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3735              		.loc 1 1443 8 is_stmt 0 view .LVU1162
 3736 032e 084B     		ldr	r3, .L377+8
 3737 0330 1B68     		ldr	r3, [r3]
 3738 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1443:src/display.c **** 	    set_dig_s(dig, '0', res);
 3739              		.loc 1 1443 7 view .LVU1163
 3740 0336 9B07     		lsls	r3, r3, #30
 3741 0338 7FF5E6AE 		bpl	.L330
 3742 033c 0223     		movs	r3, #2
 3743 033e ADE6     		b	.L305
ARM GAS  /tmp/ccE2jV6G.s 			page 145


 3744              	.LVL422:
 3745              	.L372:
 3746              	.LBB311:
1502:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3747              		.loc 1 1502 33 view .LVU1164
 3748 0340 0826     		movs	r6, #8
1504:src/display.c **** 	  set_separator_decimal_modes();
 3749              		.loc 1 1504 6 view .LVU1165
 3750 0342 4FF0040A 		mov	r10, #4
 3751 0346 17E7     		b	.L314
 3752              	.L378:
 3753              		.align	2
 3754              	.L377:
 3755 0348 00000000 		.word	StateWhileOn
 3756 034c 00000000 		.word	CSWTCH.326
 3757 0350 00000000 		.word	main_ram
 3758 0354 00000000 		.word	IntMaxWindow
 3759 0358 00000000 		.word	.LANCHOR0
 3760 035c 00000000 		.word	.LANCHOR12
 3761              	.LVL423:
 3762              	.L376:
1504:src/display.c **** 	  set_separator_decimal_modes();
 3763              		.loc 1 1504 6 view .LVU1166
 3764              	.LBE311:
1422:src/display.c **** 	  if (v == 0) {
 3765              		.loc 1 1422 6 is_stmt 1 view .LVU1167
1422:src/display.c **** 	  if (v == 0) {
 3766              		.loc 1 1422 8 is_stmt 0 view .LVU1168
 3767 0360 B046     		mov	r8, r6
 3768              	.LVL424:
1422:src/display.c **** 	  if (v == 0) {
 3769              		.loc 1 1422 8 view .LVU1169
 3770 0362 B946     		mov	r9, r7
 3771              	.LVL425:
1423:src/display.c **** 	    if (sign)
 3772              		.loc 1 1423 4 is_stmt 1 view .LVU1170
1423:src/display.c **** 	    if (sign)
 3773              		.loc 1 1423 7 is_stmt 0 view .LVU1171
 3774 0364 58EA0903 		orrs	r3, r8, r9
 3775 0368 7FF46FAF 		bne	.L291
 3776              	.LVL426:
 3777              	.L292:
1425:src/display.c **** 	    set_dig_s(dig, '0', res);
 3778              		.loc 1 1425 8 is_stmt 1 view .LVU1172
 3779              	.LBB312:
 3780              	.LBI312:
 404:src/display.c ****   if (res) *res++ = ch;
 3781              		.loc 1 404 14 view .LVU1173
 3782              	.LBB313:
 405:src/display.c ****   else	set_dig(base, ch);
 3783              		.loc 1 405 3 view .LVU1174
 405:src/display.c ****   else	set_dig(base, ch);
 3784              		.loc 1 405 6 is_stmt 0 view .LVU1175
 3785 036c 002D     		cmp	r5, #0
 3786 036e 95D1     		bne	.L294
 406:src/display.c ****   return res;
 3787              		.loc 1 406 8 is_stmt 1 view .LVU1176
ARM GAS  /tmp/ccE2jV6G.s 			page 146


 3788 0370 2D21     		movs	r1, #45
 3789 0372 5A20     		movs	r0, #90
 3790 0374 FFF7FEFF 		bl	set_dig
 3791              	.LVL427:
 406:src/display.c ****   return res;
 3792              		.loc 1 406 8 is_stmt 0 view .LVU1177
 3793              	.LBE313:
 3794              	.LBE312:
1426:src/display.c **** 	    return;
 3795              		.loc 1 1426 6 is_stmt 1 view .LVU1178
 3796              	.LBB314:
 404:src/display.c ****   if (res) *res++ = ch;
 3797              		.loc 1 404 14 view .LVU1179
 3798              	.LBB309:
 405:src/display.c ****   else	set_dig(base, ch);
 3799              		.loc 1 405 3 view .LVU1180
 3800              	.L295:
 406:src/display.c ****   return res;
 3801              		.loc 1 406 8 view .LVU1181
 3802 0378 3021     		movs	r1, #48
 3803 037a 6320     		movs	r0, #99
 3804 037c FFF7FEFF 		bl	set_dig
 3805              	.LVL428:
 3806 0380 BFE6     		b	.L285
 3807              	.LVL429:
 3808              	.L316:
 406:src/display.c ****   return res;
 3809              		.loc 1 406 8 is_stmt 0 view .LVU1182
 3810              	.LBE309:
 3811              	.LBE314:
 3812              	.LBB315:
1509:src/display.c **** 	  buf[i] = '\0';
 3813              		.loc 1 1509 6 is_stmt 1 view .LVU1183
1509:src/display.c **** 	  buf[i] = '\0';
 3814              		.loc 1 1509 20 is_stmt 0 view .LVU1184
 3815 0382 0F4A     		ldr	r2, .L379
 3816 0384 6FF3C503 		bfc	r3, #3, #3
 3817 0388 1375     		strb	r3, [r2, #20]
 3818 038a 0027     		movs	r7, #0
 3819 038c 05E7     		b	.L317
 3820              	.LVL430:
 3821              	.L318:
1516:src/display.c **** 	    int ch = buf[j++];
 3822              		.loc 1 1516 14 is_stmt 1 discriminator 1 view .LVU1185
1516:src/display.c **** 	    int ch = buf[j++];
 3823              		.loc 1 1516 4 is_stmt 0 discriminator 1 view .LVU1186
 3824 038e 03F1FF38 		add	r8, r3, #-1
 3825              	.LVL431:
1516:src/display.c **** 	    int ch = buf[j++];
 3826              		.loc 1 1516 4 discriminator 1 view .LVU1187
 3827 0392 002B     		cmp	r3, #0
 3828 0394 7FF414AF 		bne	.L320
1525:src/display.c **** 	    if (dig >= 0)
 3829              		.loc 1 1525 4 is_stmt 1 view .LVU1188
1525:src/display.c **** 	    if (dig >= 0)
 3830              		.loc 1 1525 7 is_stmt 0 view .LVU1189
 3831 0398 049B     		ldr	r3, [sp, #16]
ARM GAS  /tmp/ccE2jV6G.s 			page 147


 3832 039a 002B     		cmp	r3, #0
 3833 039c 3FF4B1AE 		beq	.L285
 3834 03a0 4FF0630B 		mov	fp, #99
 3835 03a4 3BE7     		b	.L328
 3836              	.LVL432:
 3837              	.L373:
1502:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3838              		.loc 1 1502 33 view .LVU1190
 3839 03a6 0C26     		movs	r6, #12
 3840 03a8 E6E6     		b	.L314
 3841              	.LVL433:
 3842              	.L375:
1528:src/display.c **** 	  }
 3843              		.loc 1 1528 11 is_stmt 1 view .LVU1191
 3844              	.LBB302:
 3845              	.LBI302:
 293:src/display.c **** {
 3846              		.loc 1 293 13 view .LVU1192
 3847              	.LBB303:
 295:src/display.c ****   set_dot(MANT_SIGN);
 3848              		.loc 1 295 3 view .LVU1193
 295:src/display.c ****   set_dot(MANT_SIGN);
 3849              		.loc 1 295 25 is_stmt 0 view .LVU1194
 3850 03aa 064B     		ldr	r3, .L379+4
 3851 03ac 2D22     		movs	r2, #45
 296:src/display.c **** }
 3852              		.loc 1 296 3 view .LVU1195
 3853 03ae 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 3854              		.loc 1 295 25 view .LVU1196
 3855 03b0 1A70     		strb	r2, [r3]
 296:src/display.c **** }
 3856              		.loc 1 296 3 is_stmt 1 view .LVU1197
 3857 03b2 FFF7FEFF 		bl	set_dot
 3858              	.LVL434:
 297:src/display.c **** 
 3859              		.loc 1 297 1 is_stmt 0 view .LVU1198
 3860 03b6 A4E6     		b	.L285
 3861              	.LVL435:
 3862              	.L331:
 297:src/display.c **** 
 3863              		.loc 1 297 1 view .LVU1199
 3864              	.LBE303:
 3865              	.LBE302:
 3866              	.LBE315:
 3867              	.LBB316:
1460:src/display.c **** 	      const int r = v % b;
 3868              		.loc 1 1460 6 view .LVU1200
 3869 03b8 4FF0FF31 		mov	r1, #-1
 3870 03bc 8BE6     		b	.L298
 3871              	.L380:
 3872 03be 00BF     		.align	2
 3873              	.L379:
 3874 03c0 00000000 		.word	StateWhileOn
 3875 03c4 00000000 		.word	LastDisplayedNumber
 3876              	.LBE316:
 3877              		.cfi_endproc
ARM GAS  /tmp/ccE2jV6G.s 			page 148


 3878              	.LFE18:
 3880              		.section	.text.set_annunciators,"ax",%progbits
 3881              		.align	1
 3882              		.p2align 2,,3
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv4-sp-d16
 3888              	set_annunciators:
 3889              	.LFB32:
2531:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3890              		.loc 1 2531 7 is_stmt 1 view -0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
2532:src/display.c **** 
 3894              		.loc 1 2532 2 view .LVU1202
2531:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3895              		.loc 1 2531 7 is_stmt 0 view .LVU1203
 3896 0000 70B5     		push	{r4, r5, r6, lr}
 3897              		.cfi_def_cfa_offset 16
 3898              		.cfi_offset 4, -16
 3899              		.cfi_offset 5, -12
 3900              		.cfi_offset 6, -8
 3901              		.cfi_offset 14, -4
2541:src/display.c **** #endif
 3902              		.loc 1 2541 11 view .LVU1204
 3903 0002 344E     		ldr	r6, .L407
2532:src/display.c **** 
 3904              		.loc 1 2532 29 view .LVU1205
 3905 0004 FFF7FEFF 		bl	get_trig_mode
 3906              	.LVL436:
2541:src/display.c **** #endif
 3907              		.loc 1 2541 11 view .LVU1206
 3908 0008 3368     		ldr	r3, [r6]
2541:src/display.c **** #endif
 3909              		.loc 1 2541 2 view .LVU1207
 3910 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3911 000e 012B     		cmp	r3, #1
2532:src/display.c **** 
 3912              		.loc 1 2532 29 view .LVU1208
 3913 0010 0446     		mov	r4, r0
 3914              	.LVL437:
2541:src/display.c **** #endif
 3915              		.loc 1 2541 2 is_stmt 1 view .LVU1209
 3916              	.LBB335:
 3917              	.LBB336:
 337:src/display.c ****   else	clr_dot(n);
 3918              		.loc 1 337 11 is_stmt 0 view .LVU1210
 3919 0012 4FF08800 		mov	r0, #136
 3920              	.LBE336:
 3921              	.LBE335:
2541:src/display.c **** #endif
 3922              		.loc 1 2541 2 view .LVU1211
 3923 0016 03D8     		bhi	.L382
2541:src/display.c **** #endif
 3924              		.loc 1 2541 30 discriminator 1 view .LVU1212
ARM GAS  /tmp/ccE2jV6G.s 			page 149


 3925 0018 2F4B     		ldr	r3, .L407+4
2541:src/display.c **** #endif
 3926              		.loc 1 2541 2 discriminator 1 view .LVU1213
 3927 001a 1B68     		ldr	r3, [r3]
 3928 001c 002B     		cmp	r3, #0
 3929 001e 56D0     		beq	.L403
 3930              	.L382:
 3931              	.LVL438:
 3932              	.LBB339:
 3933              	.LBI335:
 336:src/display.c ****   if (on)	set_dot(n);
 3934              		.loc 1 336 6 is_stmt 1 view .LVU1214
 3935              	.LBB337:
 337:src/display.c ****   else	clr_dot(n);
 3936              		.loc 1 337 3 view .LVU1215
 338:src/display.c **** }
 3937              		.loc 1 338 8 view .LVU1216
 3938 0020 FFF7FEFF 		bl	clr_dot
 3939              	.LVL439:
 3940              	.L383:
 338:src/display.c **** }
 3941              		.loc 1 338 8 is_stmt 0 view .LVU1217
 3942              	.LBE337:
 3943              	.LBE339:
2543:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3944              		.loc 1 2543 2 is_stmt 1 view .LVU1218
2543:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3945              		.loc 1 2543 19 is_stmt 0 view .LVU1219
 3946 0024 2D4D     		ldr	r5, .L407+8
2543:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3947              		.loc 1 2543 2 view .LVU1220
 3948 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3949              	.LBB340:
 3950              	.LBB341:
 337:src/display.c ****   else	clr_dot(n);
 3951              		.loc 1 337 11 view .LVU1221
 3952 0028 8620     		movs	r0, #134
 3953              	.LBE341:
 3954              	.LBE340:
2543:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3955              		.loc 1 2543 2 view .LVU1222
 3956 002a 23B9     		cbnz	r3, .L384
2543:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3957              		.loc 1 2543 47 discriminator 2 view .LVU1223
 3958 002c 6A69     		ldr	r2, [r5, #20]
 3959 002e 2C4B     		ldr	r3, .L407+12
 3960 0030 1340     		ands	r3, r3, r2
2543:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3961              		.loc 1 2543 2 discriminator 2 view .LVU1224
 3962 0032 002B     		cmp	r3, #0
 3963 0034 48D0     		beq	.L404
 3964              	.L384:
 3965              	.LBB344:
 3966              	.LBB342:
 337:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 337 11 is_stmt 1 view .LVU1225
 3968 0036 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccE2jV6G.s 			page 150


 3969              	.LVL440:
 3970              	.L385:
 3971              	.LBE342:
 3972              	.LBE344:
2544:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3973              		.loc 1 2544 2 view .LVU1226
2544:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3974              		.loc 1 2544 31 is_stmt 0 view .LVU1227
 3975 003a 2A4A     		ldr	r2, .L407+16
 3976 003c 6B69     		ldr	r3, [r5, #20]
2544:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3977              		.loc 1 2544 2 view .LVU1228
 3978 003e 1A42     		tst	r2, r3
 3979              	.LBB345:
 3980              	.LBB346:
 337:src/display.c ****   else	clr_dot(n);
 3981              		.loc 1 337 11 view .LVU1229
 3982 0040 4FF08500 		mov	r0, #133
 3983              	.LBE346:
 3984              	.LBE345:
2544:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3985              		.loc 1 2544 2 view .LVU1230
 3986 0044 02D0     		beq	.L386
2544:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3987              		.loc 1 2544 48 discriminator 1 view .LVU1231
 3988 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2544:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3989              		.loc 1 2544 2 discriminator 1 view .LVU1232
 3990 0048 DA06     		lsls	r2, r3, #27
 3991 004a 3AD4     		bmi	.L387
 3992              	.L386:
 3993              	.LVL441:
 3994              	.LBB349:
 3995              	.LBI345:
 336:src/display.c ****   if (on)	set_dot(n);
 3996              		.loc 1 336 6 is_stmt 1 view .LVU1233
 3997              	.LBB347:
 337:src/display.c ****   else	clr_dot(n);
 3998              		.loc 1 337 3 view .LVU1234
 338:src/display.c **** }
 3999              		.loc 1 338 8 view .LVU1235
 4000 004c FFF7FEFF 		bl	clr_dot
 4001              	.LVL442:
 4002              	.L388:
 338:src/display.c **** }
 4003              		.loc 1 338 8 is_stmt 0 view .LVU1236
 4004              	.LBE347:
 4005              	.LBE349:
2545:src/display.c **** 	set_IO_annunciator();
 4006              		.loc 1 2545 2 is_stmt 1 view .LVU1237
 4007 0050 6820     		movs	r0, #104
 4008 0052 FFF7FEFF 		bl	get_user_flag
 4009              	.LVL443:
 4010              	.LBB350:
 4011              	.LBI350:
 336:src/display.c ****   if (on)	set_dot(n);
 4012              		.loc 1 336 6 view .LVU1238
ARM GAS  /tmp/ccE2jV6G.s 			page 151


 4013              	.LBB351:
 337:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 337 3 view .LVU1239
 337:src/display.c ****   else	clr_dot(n);
 4015              		.loc 1 337 6 is_stmt 0 view .LVU1240
 4016 0056 28B3     		cbz	r0, .L389
 337:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 337 11 is_stmt 1 view .LVU1241
 4018              	.LBE351:
 4019              	.LBE350:
 4020              	.LBB355:
 4021              	.LBB356:
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4022              		.loc 1 2573 9 is_stmt 0 view .LVU1242
 4023 0058 234D     		ldr	r5, .L407+20
 4024              	.LBE356:
 4025              	.LBE355:
 4026              	.LBB364:
 4027              	.LBB352:
 337:src/display.c ****   else	clr_dot(n);
 4028              		.loc 1 337 11 view .LVU1243
 4029 005a 8320     		movs	r0, #131
 4030              	.LVL444:
 337:src/display.c ****   else	clr_dot(n);
 4031              		.loc 1 337 11 view .LVU1244
 4032 005c FFF7FEFF 		bl	set_dot
 4033              	.LVL445:
 337:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 337 11 view .LVU1245
 4035              	.LBE352:
 4036              	.LBE364:
2546:src/display.c **** 
 4037              		.loc 1 2546 2 is_stmt 1 view .LVU1246
 4038              	.LBB365:
 4039              	.LBI355:
2558:src/display.c **** #ifndef DM42
 4040              		.loc 1 2558 12 view .LVU1247
 4041              	.LBB361:
2563:src/display.c **** #endif
 4042              		.loc 1 2563 4 view .LVU1248
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4043              		.loc 1 2573 2 view .LVU1249
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4044              		.loc 1 2573 5 is_stmt 0 view .LVU1250
 4045 0060 2B68     		ldr	r3, [r5]
 4046 0062 33BB     		cbnz	r3, .L405
 4047              	.L391:
 4048              	.LBE361:
 4049              	.LBE365:
2550:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4050              		.loc 1 2550 2 is_stmt 1 view .LVU1251
2550:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4051              		.loc 1 2550 11 is_stmt 0 view .LVU1252
 4052 0064 3368     		ldr	r3, [r6]
 4053 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4054 006a 03F00103 		and	r3, r3, #1
2550:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
ARM GAS  /tmp/ccE2jV6G.s 			page 152


 4055              		.loc 1 2550 2 view .LVU1253
 4056 006e 2343     		orrs	r3, r3, r4
 4057 0070 13F0FF0F 		tst	r3, #255
 4058              	.LBB366:
 4059              	.LBB367:
 337:src/display.c ****   else	clr_dot(n);
 4060              		.loc 1 337 11 view .LVU1254
 4061 0074 4FF08C00 		mov	r0, #140
 4062              	.LBE367:
 4063              	.LBE366:
2550:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4064              		.loc 1 2550 2 view .LVU1255
 4065 0078 06D1     		bne	.L406
 4066              	.LVL446:
 4067              	.LBB370:
 4068              	.LBI366:
 336:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 336 6 is_stmt 1 view .LVU1256
 4070              	.LBB368:
 337:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 337 3 view .LVU1257
 337:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 337 11 view .LVU1258
 4073 007a FFF7FEFF 		bl	set_dot
 4074              	.LVL447:
 337:src/display.c ****   else	clr_dot(n);
 4075              		.loc 1 337 11 is_stmt 0 view .LVU1259
 4076              	.LBE368:
 4077              	.LBE370:
2551:src/display.c ****       }
 4078              		.loc 1 2551 2 is_stmt 1 view .LVU1260
 4079              	.L394:
 4080              	.LBB371:
 4081              	.LBI371:
 336:src/display.c ****   if (on)	set_dot(n);
 4082              		.loc 1 336 6 view .LVU1261
 4083              	.LBB372:
 337:src/display.c ****   else	clr_dot(n);
 4084              		.loc 1 337 3 view .LVU1262
 338:src/display.c **** }
 4085              		.loc 1 338 8 view .LVU1263
 4086              	.LBE372:
 4087              	.LBE371:
2552:src/display.c **** 
 4088              		.loc 1 2552 7 is_stmt 0 view .LVU1264
 4089 007e BDE87040 		pop	{r4, r5, r6, lr}
 4090              		.cfi_remember_state
 4091              		.cfi_restore 14
 4092              		.cfi_restore 6
 4093              		.cfi_restore 5
 4094              		.cfi_restore 4
 4095              		.cfi_def_cfa_offset 0
 4096              	.LVL448:
 4097              	.LBB376:
 4098              	.LBB373:
 338:src/display.c **** }
 4099              		.loc 1 338 8 view .LVU1265
ARM GAS  /tmp/ccE2jV6G.s 			page 153


 4100 0082 8B20     		movs	r0, #139
 4101 0084 FFF7FEBF 		b	clr_dot
 4102              	.LVL449:
 4103              	.L406:
 4104              		.cfi_restore_state
 338:src/display.c **** }
 4105              		.loc 1 338 8 view .LVU1266
 4106              	.LBE373:
 4107              	.LBE376:
 4108              	.LBB377:
 336:src/display.c ****   if (on)	set_dot(n);
 4109              		.loc 1 336 6 is_stmt 1 view .LVU1267
 4110              	.LBB369:
 337:src/display.c ****   else	clr_dot(n);
 4111              		.loc 1 337 3 view .LVU1268
 338:src/display.c **** }
 4112              		.loc 1 338 8 view .LVU1269
 4113 0088 FFF7FEFF 		bl	clr_dot
 4114              	.LVL450:
 338:src/display.c **** }
 4115              		.loc 1 338 8 is_stmt 0 view .LVU1270
 4116              	.LBE369:
 4117              	.LBE377:
2551:src/display.c ****       }
 4118              		.loc 1 2551 2 is_stmt 1 view .LVU1271
2551:src/display.c ****       }
 4119              		.loc 1 2551 11 is_stmt 0 view .LVU1272
 4120 008c 3368     		ldr	r3, [r6]
 4121 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2551:src/display.c ****       }
 4122              		.loc 1 2551 2 view .LVU1273
 4123 0092 DB07     		lsls	r3, r3, #31
 4124 0094 F3D4     		bmi	.L394
2551:src/display.c ****       }
 4125              		.loc 1 2551 2 discriminator 1 view .LVU1274
 4126 0096 012C     		cmp	r4, #1
 4127 0098 F1D1     		bne	.L394
 4128              	.LVL451:
 4129              	.LBB378:
 336:src/display.c ****   if (on)	set_dot(n);
 4130              		.loc 1 336 6 is_stmt 1 view .LVU1275
 4131              	.LBB374:
 337:src/display.c ****   else	clr_dot(n);
 4132              		.loc 1 337 3 view .LVU1276
 337:src/display.c ****   else	clr_dot(n);
 4133              		.loc 1 337 11 view .LVU1277
 4134              	.LBE374:
 4135              	.LBE378:
2552:src/display.c **** 
 4136              		.loc 1 2552 7 is_stmt 0 view .LVU1278
 4137 009a BDE87040 		pop	{r4, r5, r6, lr}
 4138              		.cfi_remember_state
 4139              		.cfi_restore 14
 4140              		.cfi_restore 6
 4141              		.cfi_restore 5
 4142              		.cfi_restore 4
 4143              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccE2jV6G.s 			page 154


 4144              	.LVL452:
 4145              	.LBB379:
 4146              	.LBB375:
 337:src/display.c ****   else	clr_dot(n);
 4147              		.loc 1 337 11 view .LVU1279
 4148 009e 8B20     		movs	r0, #139
 4149 00a0 FFF7FEBF 		b	set_dot
 4150              	.LVL453:
 4151              	.L389:
 4152              		.cfi_restore_state
 337:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 337 11 view .LVU1280
 4154              	.LBE375:
 4155              	.LBE379:
 4156              	.LBB380:
 4157              	.LBB353:
 338:src/display.c **** }
 4158              		.loc 1 338 8 is_stmt 1 view .LVU1281
 4159              	.LBE353:
 4160              	.LBE380:
 4161              	.LBB381:
 4162              	.LBB362:
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4163              		.loc 1 2573 9 is_stmt 0 view .LVU1282
 4164 00a4 104D     		ldr	r5, .L407+20
 4165              	.LBE362:
 4166              	.LBE381:
 4167              	.LBB382:
 4168              	.LBB354:
 338:src/display.c **** }
 4169              		.loc 1 338 8 view .LVU1283
 4170 00a6 8320     		movs	r0, #131
 4171              	.LVL454:
 338:src/display.c **** }
 4172              		.loc 1 338 8 view .LVU1284
 4173 00a8 FFF7FEFF 		bl	clr_dot
 4174              	.LVL455:
 338:src/display.c **** }
 4175              		.loc 1 338 8 view .LVU1285
 4176              	.LBE354:
 4177              	.LBE382:
2546:src/display.c **** 
 4178              		.loc 1 2546 2 is_stmt 1 view .LVU1286
 4179              	.LBB383:
2558:src/display.c **** #ifndef DM42
 4180              		.loc 1 2558 12 view .LVU1287
 4181              	.LBB363:
2563:src/display.c **** #endif
 4182              		.loc 1 2563 4 view .LVU1288
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4183              		.loc 1 2573 2 view .LVU1289
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4184              		.loc 1 2573 5 is_stmt 0 view .LVU1290
 4185 00ac 2B68     		ldr	r3, [r5]
 4186 00ae 002B     		cmp	r3, #0
 4187 00b0 D8D0     		beq	.L391
 4188              	.L405:
ARM GAS  /tmp/ccE2jV6G.s 			page 155


 4189              	.LBB357:
 4190              	.LBI357:
2558:src/display.c **** #ifndef DM42
 4191              		.loc 1 2558 12 is_stmt 1 view .LVU1291
 4192              	.LBB358:
2574:src/display.c **** 	  IoAnnunciator = on;
 4193              		.loc 1 2574 4 view .LVU1292
 4194              	.LVL456:
 4195              	.LBB359:
 4196              	.LBI359:
 336:src/display.c ****   if (on)	set_dot(n);
 4197              		.loc 1 336 6 view .LVU1293
 4198              	.LBB360:
 337:src/display.c ****   else	clr_dot(n);
 4199              		.loc 1 337 3 view .LVU1294
 338:src/display.c **** }
 4200              		.loc 1 338 8 view .LVU1295
 4201 00b2 8420     		movs	r0, #132
 4202 00b4 FFF7FEFF 		bl	clr_dot
 4203              	.LVL457:
 338:src/display.c **** }
 4204              		.loc 1 338 8 is_stmt 0 view .LVU1296
 4205              	.LBE360:
 4206              	.LBE359:
2575:src/display.c **** 	  finish_display(); //LIT_EQ
 4207              		.loc 1 2575 4 is_stmt 1 view .LVU1297
2575:src/display.c **** 	  finish_display(); //LIT_EQ
 4208              		.loc 1 2575 18 is_stmt 0 view .LVU1298
 4209 00b8 0023     		movs	r3, #0
 4210 00ba 2B60     		str	r3, [r5]
2576:src/display.c **** 	}
 4211              		.loc 1 2576 4 is_stmt 1 view .LVU1299
 4212 00bc FFF7FEFF 		bl	finish_display
 4213              	.LVL458:
2578:src/display.c **** 
 4214              		.loc 1 2578 7 is_stmt 0 view .LVU1300
 4215 00c0 D0E7     		b	.L391
 4216              	.LVL459:
 4217              	.L387:
2578:src/display.c **** 
 4218              		.loc 1 2578 7 view .LVU1301
 4219              	.LBE358:
 4220              	.LBE357:
 4221              	.LBE363:
 4222              	.LBE383:
 4223              	.LBB384:
 336:src/display.c ****   if (on)	set_dot(n);
 4224              		.loc 1 336 6 is_stmt 1 view .LVU1302
 4225              	.LBB348:
 337:src/display.c ****   else	clr_dot(n);
 4226              		.loc 1 337 3 view .LVU1303
 337:src/display.c ****   else	clr_dot(n);
 4227              		.loc 1 337 11 view .LVU1304
 4228 00c2 FFF7FEFF 		bl	set_dot
 4229              	.LVL460:
 4230 00c6 C3E7     		b	.L388
 4231              	.LVL461:
ARM GAS  /tmp/ccE2jV6G.s 			page 156


 4232              	.L404:
 337:src/display.c ****   else	clr_dot(n);
 4233              		.loc 1 337 11 is_stmt 0 view .LVU1305
 4234              	.LBE348:
 4235              	.LBE384:
 4236              	.LBB385:
 4237              	.LBI340:
 336:src/display.c ****   if (on)	set_dot(n);
 4238              		.loc 1 336 6 is_stmt 1 view .LVU1306
 4239              	.LBB343:
 337:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 337 3 view .LVU1307
 338:src/display.c **** }
 4241              		.loc 1 338 8 view .LVU1308
 4242 00c8 FFF7FEFF 		bl	clr_dot
 4243              	.LVL462:
 4244 00cc B5E7     		b	.L385
 4245              	.LVL463:
 4246              	.L403:
 338:src/display.c **** }
 4247              		.loc 1 338 8 is_stmt 0 view .LVU1309
 4248              	.LBE343:
 4249              	.LBE385:
 4250              	.LBB386:
 336:src/display.c ****   if (on)	set_dot(n);
 4251              		.loc 1 336 6 is_stmt 1 view .LVU1310
 4252              	.LBB338:
 337:src/display.c ****   else	clr_dot(n);
 4253              		.loc 1 337 3 view .LVU1311
 337:src/display.c ****   else	clr_dot(n);
 4254              		.loc 1 337 11 view .LVU1312
 4255 00ce FFF7FEFF 		bl	set_dot
 4256              	.LVL464:
 4257 00d2 A7E7     		b	.L383
 4258              	.L408:
 4259              		.align	2
 4260              	.L407:
 4261 00d4 00000000 		.word	main_ram
 4262 00d8 00000000 		.word	Running
 4263 00dc 00000000 		.word	StateWhileOn
 4264 00e0 07000800 		.word	524295
 4265 00e4 00080800 		.word	526336
 4266 00e8 00000000 		.word	IoAnnunciator
 4267              	.LBE338:
 4268              	.LBE386:
 4269              		.cfi_endproc
 4270              	.LFE32:
 4272              		.section	.text.getdig,"ax",%progbits
 4273              		.align	1
 4274              		.p2align 2,,3
 4275              		.global	getdig
 4276              		.syntax unified
 4277              		.thumb
 4278              		.thumb_func
 4279              		.fpu fpv4-sp-d16
 4281              	getdig:
 4282              	.LVL465:
ARM GAS  /tmp/ccE2jV6G.s 			page 157


 4283              	.LFB6:
 331:src/display.c ****   // perform index lookup
 4284              		.loc 1 331 1 view -0
 4285              		.cfi_startproc
 4286              		@ args = 0, pretend = 0, frame = 0
 4287              		@ frame_needed = 0, uses_anonymous_args = 0
 4288              		@ link register save eliminated.
 333:src/display.c **** }
 4289              		.loc 1 333 3 view .LVU1314
 333:src/display.c **** }
 4290              		.loc 1 333 16 is_stmt 0 view .LVU1315
 4291 0000 014B     		ldr	r3, .L410
 333:src/display.c **** }
 4292              		.loc 1 333 19 view .LVU1316
 4293 0002 C0B2     		uxtb	r0, r0
 4294              	.LVL466:
 334:src/display.c **** 
 4295              		.loc 1 334 1 view .LVU1317
 4296 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4297 0006 7047     		bx	lr
 4298              	.L411:
 4299              		.align	2
 4300              	.L410:
 4301 0008 00000000 		.word	.LANCHOR2
 4302              		.cfi_endproc
 4303              	.LFE6:
 4305              		.section	.text.dot,"ax",%progbits
 4306              		.align	1
 4307              		.p2align 2,,3
 4308              		.global	dot
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu fpv4-sp-d16
 4314              	dot:
 4315              	.LVL467:
 4316              	.LFB7:
 336:src/display.c ****   if (on)	set_dot(n);
 4317              		.loc 1 336 25 is_stmt 1 view -0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 0
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              		@ link register save eliminated.
 337:src/display.c ****   else	clr_dot(n);
 4322              		.loc 1 337 3 view .LVU1319
 337:src/display.c ****   else	clr_dot(n);
 4323              		.loc 1 337 6 is_stmt 0 view .LVU1320
 4324 0000 09B1     		cbz	r1, .L413
 337:src/display.c ****   else	clr_dot(n);
 4325              		.loc 1 337 11 is_stmt 1 discriminator 1 view .LVU1321
 4326 0002 FFF7FEBF 		b	set_dot
 4327              	.LVL468:
 4328              	.L413:
 338:src/display.c **** }
 4329              		.loc 1 338 8 view .LVU1322
 4330 0006 FFF7FEBF 		b	clr_dot
 4331              	.LVL469:
ARM GAS  /tmp/ccE2jV6G.s 			page 158


 338:src/display.c **** }
 4332              		.loc 1 338 8 is_stmt 0 view .LVU1323
 4333              		.cfi_endproc
 4334              	.LFE7:
 4336 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4337              		.align	1
 4338              		.p2align 2,,3
 4339              		.global	std_round_fix
 4340              		.syntax unified
 4341              		.thumb
 4342              		.thumb_func
 4343              		.fpu fpv4-sp-d16
 4345              	std_round_fix:
 4346              	.LVL470:
 4347              	.LFB24:
1784:src/display.c **** 	decNumber b, c;
 4348              		.loc 1 1784 60 is_stmt 1 view -0
 4349              		.cfi_startproc
 4350              		@ args = 0, pretend = 0, frame = 80
 4351              		@ frame_needed = 0, uses_anonymous_args = 0
1785:src/display.c **** 
 4352              		.loc 1 1785 2 view .LVU1325
1787:src/display.c **** 	b.exponent -= UState.dispdigs;
 4353              		.loc 1 1787 2 view .LVU1326
1784:src/display.c **** 	decNumber b, c;
 4354              		.loc 1 1784 60 is_stmt 0 view .LVU1327
 4355 0000 00B5     		push	{lr}
 4356              		.cfi_def_cfa_offset 4
 4357              		.cfi_offset 14, -4
 4358 0002 95B0     		sub	sp, sp, #84
 4359              		.cfi_def_cfa_offset 88
1784:src/display.c **** 	decNumber b, c;
 4360              		.loc 1 1784 60 view .LVU1328
 4361 0004 0146     		mov	r1, r0
1787:src/display.c **** 	b.exponent -= UState.dispdigs;
 4362              		.loc 1 1787 2 view .LVU1329
 4363 0006 02A8     		add	r0, sp, #8
 4364              	.LVL471:
1784:src/display.c **** 	decNumber b, c;
 4365              		.loc 1 1784 60 view .LVU1330
 4366 0008 0191     		str	r1, [sp, #4]
1787:src/display.c **** 	b.exponent -= UState.dispdigs;
 4367              		.loc 1 1787 2 view .LVU1331
 4368 000a FFF7FEFF 		bl	dn_1
 4369              	.LVL472:
1788:src/display.c **** 	dn_abs(&c, z);
 4370              		.loc 1 1788 2 is_stmt 1 view .LVU1332
1788:src/display.c **** 	dn_abs(&c, z);
 4371              		.loc 1 1788 22 is_stmt 0 view .LVU1333
 4372 000e 0F4A     		ldr	r2, .L419
1788:src/display.c **** 	dn_abs(&c, z);
 4373              		.loc 1 1788 13 view .LVU1334
 4374 0010 039B     		ldr	r3, [sp, #12]
1788:src/display.c **** 	dn_abs(&c, z);
 4375              		.loc 1 1788 22 view .LVU1335
 4376 0012 1268     		ldr	r2, [r2]
1789:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
ARM GAS  /tmp/ccE2jV6G.s 			page 159


 4377              		.loc 1 1789 2 view .LVU1336
 4378 0014 0199     		ldr	r1, [sp, #4]
1788:src/display.c **** 	dn_abs(&c, z);
 4379              		.loc 1 1788 22 view .LVU1337
 4380 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4381 001a 02F00F02 		and	r2, r2, #15
1788:src/display.c **** 	dn_abs(&c, z);
 4382              		.loc 1 1788 13 view .LVU1338
 4383 001e 9B1A     		subs	r3, r3, r2
1789:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4384              		.loc 1 1789 2 view .LVU1339
 4385 0020 0BA8     		add	r0, sp, #44
1788:src/display.c **** 	dn_abs(&c, z);
 4386              		.loc 1 1788 13 view .LVU1340
 4387 0022 0393     		str	r3, [sp, #12]
1789:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4388              		.loc 1 1789 2 is_stmt 1 view .LVU1341
 4389 0024 FFF7FEFF 		bl	dn_abs
 4390              	.LVL473:
1790:src/display.c **** 	  return MODE_FIX;
 4391              		.loc 1 1790 2 view .LVU1342
1790:src/display.c **** 	  return MODE_FIX;
 4392              		.loc 1 1790 6 is_stmt 0 view .LVU1343
 4393 0028 0BA9     		add	r1, sp, #44
 4394 002a 02A8     		add	r0, sp, #8
 4395 002c FFF7FEFF 		bl	dn_lt
 4396              	.LVL474:
1790:src/display.c **** 	  return MODE_FIX;
 4397              		.loc 1 1790 5 view .LVU1344
 4398 0030 10B9     		cbnz	r0, .L418
1793:src/display.c **** #endif
 4399              		.loc 1 1793 7 view .LVU1345
 4400 0032 15B0     		add	sp, sp, #84
 4401              		.cfi_remember_state
 4402              		.cfi_def_cfa_offset 4
 4403              		@ sp needed
 4404 0034 5DF804FB 		ldr	pc, [sp], #4
 4405              	.LVL475:
 4406              	.L418:
 4407              		.cfi_restore_state
1790:src/display.c **** 	  return MODE_FIX;
 4408              		.loc 1 1790 23 discriminator 1 view .LVU1346
 4409 0038 0549     		ldr	r1, .L419+4
 4410 003a 0BA8     		add	r0, sp, #44
 4411 003c FFF7FEFF 		bl	dn_lt
 4412              	.LVL476:
1791:src/display.c **** 	return MODE_STD;
 4413              		.loc 1 1791 11 discriminator 1 view .LVU1347
 4414 0040 0038     		subs	r0, r0, #0
 4415 0042 18BF     		it	ne
 4416 0044 0120     		movne	r0, #1
1793:src/display.c **** #endif
 4417              		.loc 1 1793 7 discriminator 1 view .LVU1348
 4418 0046 15B0     		add	sp, sp, #84
 4419              		.cfi_def_cfa_offset 4
 4420              		@ sp needed
 4421 0048 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccE2jV6G.s 			page 160


 4422              	.LVL477:
 4423              	.L420:
1793:src/display.c **** #endif
 4424              		.loc 1 1793 7 discriminator 1 view .LVU1349
 4425              		.align	2
 4426              	.L419:
 4427 004c 00000000 		.word	main_ram
 4428 0050 00000000 		.word	const_1
 4429              		.cfi_endproc
 4430              	.LFE24:
 4432              		.section	.text.set_IO_annunciator,"ax",%progbits
 4433              		.align	1
 4434              		.p2align 2,,3
 4435              		.global	set_IO_annunciator
 4436              		.syntax unified
 4437              		.thumb
 4438              		.thumb_func
 4439              		.fpu fpv4-sp-d16
 4441              	set_IO_annunciator:
 4442              	.LFB33:
2558:src/display.c **** #ifndef DM42
 4443              		.loc 1 2558 37 is_stmt 1 view -0
 4444              		.cfi_startproc
 4445              		@ args = 0, pretend = 0, frame = 0
 4446              		@ frame_needed = 0, uses_anonymous_args = 0
2563:src/display.c **** #endif
 4447              		.loc 1 2563 4 view .LVU1351
 4448              	.LVL478:
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4449              		.loc 1 2573 2 view .LVU1352
2558:src/display.c **** #ifndef DM42
 4450              		.loc 1 2558 37 is_stmt 0 view .LVU1353
 4451 0000 10B5     		push	{r4, lr}
 4452              		.cfi_def_cfa_offset 8
 4453              		.cfi_offset 4, -8
 4454              		.cfi_offset 14, -4
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4455              		.loc 1 2573 9 view .LVU1354
 4456 0002 064C     		ldr	r4, .L425
2573:src/display.c **** 	  dot(LIT_EQ, on);
 4457              		.loc 1 2573 5 view .LVU1355
 4458 0004 2368     		ldr	r3, [r4]
 4459 0006 03B9     		cbnz	r3, .L424
2578:src/display.c **** 
 4460              		.loc 1 2578 7 view .LVU1356
 4461 0008 10BD     		pop	{r4, pc}
 4462              	.L424:
 4463              	.LBB391:
 4464              	.LBI391:
2558:src/display.c **** #ifndef DM42
 4465              		.loc 1 2558 12 is_stmt 1 view .LVU1357
 4466              	.LBB392:
2574:src/display.c **** 	  IoAnnunciator = on;
 4467              		.loc 1 2574 4 view .LVU1358
 4468              	.LVL479:
 4469              	.LBB393:
 4470              	.LBI393:
ARM GAS  /tmp/ccE2jV6G.s 			page 161


 336:src/display.c ****   if (on)	set_dot(n);
 4471              		.loc 1 336 6 view .LVU1359
 4472              	.LBB394:
 337:src/display.c ****   else	clr_dot(n);
 4473              		.loc 1 337 3 view .LVU1360
 338:src/display.c **** }
 4474              		.loc 1 338 8 view .LVU1361
 4475 000a 8420     		movs	r0, #132
 4476 000c FFF7FEFF 		bl	clr_dot
 4477              	.LVL480:
 338:src/display.c **** }
 4478              		.loc 1 338 8 is_stmt 0 view .LVU1362
 4479              	.LBE394:
 4480              	.LBE393:
2575:src/display.c **** 	  finish_display(); //LIT_EQ
 4481              		.loc 1 2575 4 is_stmt 1 view .LVU1363
2575:src/display.c **** 	  finish_display(); //LIT_EQ
 4482              		.loc 1 2575 18 is_stmt 0 view .LVU1364
 4483 0010 0023     		movs	r3, #0
 4484 0012 2360     		str	r3, [r4]
2576:src/display.c **** 	}
 4485              		.loc 1 2576 4 is_stmt 1 view .LVU1365
 4486              	.LBE392:
 4487              	.LBE391:
2578:src/display.c **** 
 4488              		.loc 1 2578 7 is_stmt 0 view .LVU1366
 4489 0014 BDE81040 		pop	{r4, lr}
 4490              		.cfi_restore 14
 4491              		.cfi_restore 4
 4492              		.cfi_def_cfa_offset 0
 4493              	.LBB396:
 4494              	.LBB395:
2576:src/display.c **** 	}
 4495              		.loc 1 2576 4 view .LVU1367
 4496 0018 FFF7FEBF 		b	finish_display
 4497              	.LVL481:
 4498              	.L426:
 4499              		.align	2
 4500              	.L425:
 4501 001c 00000000 		.word	IoAnnunciator
 4502              	.LBE395:
 4503              	.LBE396:
 4504              		.cfi_endproc
 4505              	.LFE33:
 4507              		.section	.text.pixel_length,"ax",%progbits
 4508              		.align	1
 4509              		.p2align 2,,3
 4510              		.global	pixel_length
 4511              		.syntax unified
 4512              		.thumb
 4513              		.thumb_func
 4514              		.fpu fpv4-sp-d16
 4516              	pixel_length:
 4517              	.LVL482:
 4518              	.LFB40:
3461:src/display.c **** 
3462:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 162


3463:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3464:src/display.c ****        */
3465:src/display.c ****       int pixel_length(const char *s, int smallp)
3466:src/display.c ****       {
 4519              		.loc 1 3466 7 is_stmt 1 view -0
 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 0
 4522              		@ frame_needed = 0, uses_anonymous_args = 0
3467:src/display.c **** 	int len = 0;
 4523              		.loc 1 3467 2 view .LVU1369
3468:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4524              		.loc 1 3468 2 view .LVU1370
3466:src/display.c **** 	int len = 0;
 4525              		.loc 1 3466 7 is_stmt 0 view .LVU1371
 4526 0000 70B5     		push	{r4, r5, r6, lr}
 4527              		.cfi_def_cfa_offset 16
 4528              		.cfi_offset 4, -16
 4529              		.cfi_offset 5, -12
 4530              		.cfi_offset 6, -8
 4531              		.cfi_offset 14, -4
3466:src/display.c **** 	int len = 0;
 4532              		.loc 1 3466 7 view .LVU1372
 4533 0002 0446     		mov	r4, r0
3469:src/display.c **** 	while (*s != '\0') {
 4534              		.loc 1 3469 9 view .LVU1373
 4535 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4536              	.LVL483:
3468:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4537              		.loc 1 3468 34 view .LVU1374
 4538 0006 0E1E     		subs	r6, r1, #0
 4539 0008 18BF     		it	ne
 4540 000a 4FF48076 		movne	r6, #256
 4541              	.LVL484:
 4542              		.loc 1 3469 2 is_stmt 1 view .LVU1375
 4543              		.loc 1 3469 8 view .LVU1376
 4544 000e A0B1     		cbz	r0, .L434
3467:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4545              		.loc 1 3467 6 is_stmt 0 view .LVU1377
 4546 0010 0025     		movs	r5, #0
 4547 0012 06E0     		b	.L432
 4548              	.LVL485:
 4549              	.L430:
3470:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3471:src/display.c **** 	  if (s[0] == '\007') {
3472:src/display.c **** 	    len += s[1] & 0x1F;
3473:src/display.c **** 	    s += 3;
3474:src/display.c **** 	    continue;
3475:src/display.c **** 	  }
3476:src/display.c **** #endif
3477:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4550              		.loc 1 3477 11 view .LVU1378
 4551 0014 3044     		add	r0, r0, r6
 4552 0016 FFF7FEFF 		bl	charlengths
 4553              	.LVL486:
 4554              		.loc 1 3477 42 view .LVU1379
 4555 001a 0134     		adds	r4, r4, #1
 4556              	.LVL487:
ARM GAS  /tmp/ccE2jV6G.s 			page 163


 4557              		.loc 1 3477 8 view .LVU1380
 4558 001c 0544     		add	r5, r5, r0
 4559              	.LVL488:
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4560              		.loc 1 3469 8 is_stmt 1 view .LVU1381
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4561              		.loc 1 3469 9 is_stmt 0 view .LVU1382
 4562 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4563              		.loc 1 3469 8 view .LVU1383
 4564 0020 48B1     		cbz	r0, .L427
 4565              	.LVL489:
 4566              	.L432:
3471:src/display.c **** 	    len += s[1] & 0x1F;
 4567              		.loc 1 3471 4 is_stmt 1 view .LVU1384
 4568              		.loc 1 3477 4 view .LVU1385
3471:src/display.c **** 	    len += s[1] & 0x1F;
 4569              		.loc 1 3471 7 is_stmt 0 view .LVU1386
 4570 0022 0728     		cmp	r0, #7
 4571 0024 F6D1     		bne	.L430
3472:src/display.c **** 	    s += 3;
 4572              		.loc 1 3472 6 is_stmt 1 view .LVU1387
3472:src/display.c **** 	    s += 3;
 4573              		.loc 1 3472 18 is_stmt 0 view .LVU1388
 4574 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4575              		.loc 1 3469 9 view .LVU1389
 4576 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3472:src/display.c **** 	    s += 3;
 4577              		.loc 1 3472 18 view .LVU1390
 4578 002a 03F01F03 		and	r3, r3, #31
3473:src/display.c **** 	    continue;
 4579              		.loc 1 3473 8 view .LVU1391
 4580 002e 0334     		adds	r4, r4, #3
 4581              	.LVL490:
3472:src/display.c **** 	    s += 3;
 4582              		.loc 1 3472 10 view .LVU1392
 4583 0030 1D44     		add	r5, r5, r3
 4584              	.LVL491:
3473:src/display.c **** 	    continue;
 4585              		.loc 1 3473 6 is_stmt 1 view .LVU1393
3474:src/display.c **** 	  }
 4586              		.loc 1 3474 6 view .LVU1394
3469:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4587              		.loc 1 3469 8 view .LVU1395
 4588 0032 0028     		cmp	r0, #0
 4589 0034 F5D1     		bne	.L432
 4590              	.L427:
3478:src/display.c **** 	}
3479:src/display.c **** 	return len;
3480:src/display.c ****       }
 4591              		.loc 1 3480 7 is_stmt 0 view .LVU1396
 4592 0036 2846     		mov	r0, r5
 4593 0038 70BD     		pop	{r4, r5, r6, pc}
 4594              	.LVL492:
 4595              	.L434:
3467:src/display.c **** 	const int offset = smallp ? 256 : 0;
ARM GAS  /tmp/ccE2jV6G.s 			page 164


 4596              		.loc 1 3467 6 view .LVU1397
 4597 003a 0546     		mov	r5, r0
3479:src/display.c ****       }
 4598              		.loc 1 3479 2 is_stmt 1 view .LVU1398
 4599              		.loc 1 3480 7 is_stmt 0 view .LVU1399
 4600 003c 2846     		mov	r0, r5
 4601 003e 70BD     		pop	{r4, r5, r6, pc}
 4602              		.loc 1 3480 7 view .LVU1400
 4603              		.cfi_endproc
 4604              	.LFE40:
 4606              		.section	.text.set_status,"ax",%progbits
 4607              		.align	1
 4608              		.p2align 2,,3
 4609              		.syntax unified
 4610              		.thumb
 4611              		.thumb_func
 4612              		.fpu fpv4-sp-d16
 4614              	set_status:
 4615              	.LVL493:
 4616              	.LFB43:
3481:src/display.c **** 
3482:src/display.c **** 
3483:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3484:src/display.c ****        * If this is larger than the display, return true.
3485:src/display.c ****        */
3486:src/display.c ****       static int string_too_large(const char *s) {
3487:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3488:src/display.c ****       }
3489:src/display.c ****       static int string_too_large_top(const char *s) {
3490:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3491:src/display.c ****       }
3492:src/display.c **** 
3493:src/display.c **** 
3494:src/display.c ****       /* Display the given string on the screen.
3495:src/display.c ****        */
3496:src/display.c ****       static void set_status(const char *str) {
 4617              		.loc 1 3496 47 is_stmt 1 view -0
 4618              		.cfi_startproc
 4619              		@ args = 0, pretend = 0, frame = 0
 4620              		@ frame_needed = 0, uses_anonymous_args = 0
3497:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4621              		.loc 1 3497 2 view .LVU1402
3496:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4622              		.loc 1 3496 47 is_stmt 0 view .LVU1403
 4623 0000 10B5     		push	{r4, lr}
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 4, -8
 4626              		.cfi_offset 14, -4
 4627              		.loc 1 3497 24 view .LVU1404
 4628 0002 0D4B     		ldr	r3, .L442
 4629              		.loc 1 3497 2 view .LVU1405
 4630 0004 93F91630 		ldrsb	r3, [r3, #22]
 4631 0008 002B     		cmp	r3, #0
3496:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4632              		.loc 1 3496 47 view .LVU1406
 4633 000a 82B0     		sub	sp, sp, #8
 4634              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccE2jV6G.s 			page 165


3496:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4635              		.loc 1 3496 47 view .LVU1407
 4636 000c 0446     		mov	r4, r0
 4637              		.loc 1 3497 2 view .LVU1408
 4638 000e 0ADA     		bge	.L441
 4639 0010 0121     		movs	r1, #1
 4640              	.LVL494:
 4641              	.L438:
 4642              	.LBB397:
 4643              	.LBI397:
3338:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4644              		.loc 1 3338 19 is_stmt 1 discriminator 6 view .LVU1409
 4645              	.LBB398:
3339:src/display.c ****       }
 4646              		.loc 1 3339 2 discriminator 6 view .LVU1410
 4647 0012 40F24A23 		movw	r3, #586
 4648 0016 0093     		str	r3, [sp]
 4649 0018 2046     		mov	r0, r4
 4650 001a 8E23     		movs	r3, #142
 4651 001c 4A22     		movs	r2, #74
 4652 001e FFF7FEFF 		bl	s_s_sized
 4653              	.LVL495:
3339:src/display.c ****       }
 4654              		.loc 1 3339 2 is_stmt 0 discriminator 6 view .LVU1411
 4655              	.LBE398:
 4656              	.LBE397:
3498:src/display.c ****       }
 4657              		.loc 1 3498 7 discriminator 6 view .LVU1412
 4658 0022 02B0     		add	sp, sp, #8
 4659              		.cfi_remember_state
 4660              		.cfi_def_cfa_offset 8
 4661              		@ sp needed
 4662 0024 10BD     		pop	{r4, pc}
 4663              	.LVL496:
 4664              	.L441:
 4665              		.cfi_restore_state
 4666              	.LBB399:
 4667              	.LBI399:
3486:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4668              		.loc 1 3486 18 is_stmt 1 view .LVU1413
 4669              	.LBB400:
3487:src/display.c ****       }
 4670              		.loc 1 3487 2 view .LVU1414
3487:src/display.c ****       }
 4671              		.loc 1 3487 9 is_stmt 0 view .LVU1415
 4672 0026 0021     		movs	r1, #0
 4673 0028 FFF7FEFF 		bl	pixel_length
 4674              	.LVL497:
3487:src/display.c ****       }
 4675              		.loc 1 3487 9 view .LVU1416
 4676              	.LBE400:
 4677              	.LBE399:
3497:src/display.c ****       }
 4678              		.loc 1 3497 2 view .LVU1417
 4679 002c 4B28     		cmp	r0, #75
 4680 002e D4BF     		ite	le
 4681 0030 0021     		movle	r1, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 166


 4682 0032 0121     		movgt	r1, #1
 4683 0034 EDE7     		b	.L438
 4684              	.L443:
 4685 0036 00BF     		.align	2
 4686              	.L442:
 4687 0038 00000000 		.word	StateWhileOn
 4688              		.cfi_endproc
 4689              	.LFE43:
 4691              		.section	.text.set_x_dn,"ax",%progbits
 4692              		.align	1
 4693              		.p2align 2,,3
 4694              		.global	set_x_dn
 4695              		.syntax unified
 4696              		.thumb
 4697              		.thumb_func
 4698              		.fpu fpv4-sp-d16
 4700              	set_x_dn:
 4701              	.LVL498:
 4702              	.LFB27:
1931:src/display.c **** 	char x[50], *obp = x;
 4703              		.loc 1 1931 67 is_stmt 1 view -0
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 136
 4706              		@ frame_needed = 0, uses_anonymous_args = 0
1932:src/display.c **** 	int odig = 0;
 4707              		.loc 1 1932 2 view .LVU1419
1931:src/display.c **** 	char x[50], *obp = x;
 4708              		.loc 1 1931 67 is_stmt 0 view .LVU1420
 4709 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4710              		.cfi_def_cfa_offset 36
 4711              		.cfi_offset 4, -36
 4712              		.cfi_offset 5, -32
 4713              		.cfi_offset 6, -28
 4714              		.cfi_offset 7, -24
 4715              		.cfi_offset 8, -20
 4716              		.cfi_offset 9, -16
 4717              		.cfi_offset 10, -12
 4718              		.cfi_offset 11, -8
 4719              		.cfi_offset 14, -4
1948:src/display.c **** 	int mode = UState.dispmode;
 4720              		.loc 1 1948 11 view .LVU1421
 4721 0004 C84B     		ldr	r3, .L679
 4722 0006 1B68     		ldr	r3, [r3]
1931:src/display.c **** 	char x[50], *obp = x;
 4723              		.loc 1 1931 67 view .LVU1422
 4724 0008 A3B0     		sub	sp, sp, #140
 4725              		.cfi_def_cfa_offset 176
 4726              	.LVL499:
1933:src/display.c **** 	int show_exp = 0;
 4727              		.loc 1 1933 2 is_stmt 1 view .LVU1423
1934:src/display.c **** 	int j;
 4728              		.loc 1 1934 2 view .LVU1424
1935:src/display.c **** 	char mantissa[64];
 4729              		.loc 1 1935 2 view .LVU1425
1936:src/display.c **** 	int exp = 0;
 4730              		.loc 1 1936 2 view .LVU1426
1937:src/display.c **** 	char *p = mantissa;
ARM GAS  /tmp/ccE2jV6G.s 			page 167


 4731              		.loc 1 1937 2 view .LVU1427
1938:src/display.c **** 	char *r;
 4732              		.loc 1 1938 2 view .LVU1428
1939:src/display.c **** 	const char *q;
 4733              		.loc 1 1939 2 view .LVU1429
1940:src/display.c **** 	int count, i;
 4734              		.loc 1 1940 2 view .LVU1430
1941:src/display.c **** 	int extra_digits = 0;
 4735              		.loc 1 1941 2 view .LVU1431
1942:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4736              		.loc 1 1942 2 view .LVU1432
1948:src/display.c **** 	int mode = UState.dispmode;
 4737              		.loc 1 1948 2 view .LVU1433
1948:src/display.c **** 	int mode = UState.dispmode;
 4738              		.loc 1 1948 17 is_stmt 0 view .LVU1434
 4739 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1949:src/display.c **** #endif
 4740              		.loc 1 1949 19 view .LVU1435
 4741 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1931:src/display.c **** 	char x[50], *obp = x;
 4742              		.loc 1 1931 67 view .LVU1436
 4743 0012 0092     		str	r2, [sp]
 4744 0014 0C46     		mov	r4, r1
 4745 0016 0646     		mov	r6, r0
1948:src/display.c **** 	int mode = UState.dispmode;
 4746              		.loc 1 1948 17 view .LVU1437
 4747 0018 05F00F05 		and	r5, r5, #15
 4748              	.LVL500:
1949:src/display.c **** #endif
 4749              		.loc 1 1949 2 is_stmt 1 view .LVU1438
1949:src/display.c **** #endif
 4750              		.loc 1 1949 19 is_stmt 0 view .LVU1439
 4751 001c BF09     		lsrs	r7, r7, #6
 4752              	.LVL501:
1951:src/display.c **** 	int negative = 0;
 4753              		.loc 1 1951 2 is_stmt 1 view .LVU1440
1952:src/display.c **** 	int trimzeros = 0;
 4754              		.loc 1 1952 2 view .LVU1441
1953:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4755              		.loc 1 1953 2 view .LVU1442
1955:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4756              		.loc 1 1955 2 view .LVU1443
1964:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4757              		.loc 1 1964 2 view .LVU1444
 4758 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4759              	.LVL502:
1966:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4760              		.loc 1 1966 2 view .LVU1445
1966:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4761              		.loc 1 1966 5 is_stmt 0 view .LVU1446
 4762 0022 002C     		cmp	r4, #0
 4763 0024 00F08A81 		beq	.L445
 4764              	.L448:
1991:src/display.c **** 	  return;
 4765              		.loc 1 1991 2 is_stmt 1 view .LVU1447
1991:src/display.c **** 	  return;
 4766              		.loc 1 1991 6 is_stmt 0 view .LVU1448
ARM GAS  /tmp/ccE2jV6G.s 			page 168


 4767 0028 2146     		mov	r1, r4
 4768 002a 06F10800 		add	r0, r6, #8
 4769 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4770              	.LVL503:
1991:src/display.c **** 	  return;
 4771              		.loc 1 1991 5 view .LVU1449
 4772 0032 8346     		mov	fp, r0
 4773 0034 0028     		cmp	r0, #0
 4774 0036 40F06F81 		bne	.L444
1994:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4775              		.loc 1 1994 2 is_stmt 1 view .LVU1450
1994:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4776              		.loc 1 1994 12 is_stmt 0 view .LVU1451
 4777 003a DFF8F092 		ldr	r9, .L679+4
1994:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4778              		.loc 1 1994 5 view .LVU1452
 4779 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4780 0042 012B     		cmp	r3, #1
 4781 0044 00F0AF82 		beq	.L660
1937:src/display.c **** 	char *p = mantissa;
 4782              		.loc 1 1937 6 view .LVU1453
 4783 0048 0190     		str	r0, [sp, #4]
 4784              	.LVL504:
 4785              	.L451:
2000:src/display.c **** 
 4786              		.loc 1 2000 2 is_stmt 1 view .LVU1454
 4787 004a 0DF11408 		add	r8, sp, #20
 4788              	.LVL505:
2000:src/display.c **** 
 4789              		.loc 1 2000 2 is_stmt 0 view .LVU1455
 4790 004e 4046     		mov	r0, r8
 4791 0050 3222     		movs	r2, #50
 4792 0052 0021     		movs	r1, #0
 4793 0054 FFF7FEFF 		bl	xset
 4794              	.LVL506:
2002:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4795              		.loc 1 2002 2 is_stmt 1 view .LVU1456
2002:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4796              		.loc 1 2002 6 is_stmt 0 view .LVU1457
 4797 0058 3046     		mov	r0, r6
 4798 005a FFF7FEFF 		bl	dn_eq0
 4799              	.LVL507:
2002:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4800              		.loc 1 2002 5 view .LVU1458
 4801 005e 0028     		cmp	r0, #0
 4802 0060 00F05D81 		beq	.L452
2003:src/display.c **** 	    x[0] = '-';
 4803              		.loc 1 2003 4 is_stmt 1 view .LVU1459
2003:src/display.c **** 	    x[0] = '-';
 4804              		.loc 1 2003 7 is_stmt 0 view .LVU1460
 4805 0064 96F90830 		ldrsb	r3, [r6, #8]
 4806 0068 002B     		cmp	r3, #0
 4807 006a C0F2C182 		blt	.L661
 4808              	.L453:
2007:src/display.c **** 	} else
 4809              		.loc 1 2007 6 is_stmt 1 view .LVU1461
2007:src/display.c **** 	} else
ARM GAS  /tmp/ccE2jV6G.s 			page 169


 4810              		.loc 1 2007 11 is_stmt 0 view .LVU1462
 4811 006e 3023     		movs	r3, #48
 4812 0070 8DF81430 		strb	r3, [sp, #20]
 4813              	.L454:
2011:src/display.c **** 	  show_x(x, exp);
 4814              		.loc 1 2011 2 is_stmt 1 view .LVU1463
2011:src/display.c **** 	  show_x(x, exp);
 4815              		.loc 1 2011 12 is_stmt 0 view .LVU1464
 4816 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
2011:src/display.c **** 	  show_x(x, exp);
 4817              		.loc 1 2011 5 view .LVU1465
 4818 0078 BAF1010F 		cmp	r10, #1
 4819 007c 00F0F082 		beq	.L662
2034:src/display.c **** 	  mode = std_round_fix(z);
 4820              		.loc 1 2034 2 is_stmt 1 view .LVU1466
2034:src/display.c **** 	  mode = std_round_fix(z);
 4821              		.loc 1 2034 5 is_stmt 0 view .LVU1467
 4822 0080 002F     		cmp	r7, #0
 4823 0082 00F0FD81 		beq	.L663
2038:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4824              		.loc 1 2038 19 view .LVU1468
 4825 0086 009B     		ldr	r3, [sp]
 4826 0088 1B68     		ldr	r3, [r3]
2038:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4827              		.loc 1 2038 12 view .LVU1469
 4828 008a AB42     		cmp	r3, r5
1948:src/display.c **** 	int mode = UState.dispmode;
 4829              		.loc 1 1948 6 view .LVU1470
 4830 008c AA46     		mov	r10, r5
2038:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4831              		.loc 1 2038 9 is_stmt 1 view .LVU1471
2040:src/display.c **** #endif
 4832              		.loc 1 2040 4 view .LVU1472
2040:src/display.c **** #endif
 4833              		.loc 1 2040 7 is_stmt 0 view .LVU1473
 4834 008e D8BF     		it	le
 4835 0090 03F1FF3A 		addle	r10, r3, #-1
1953:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4836              		.loc 1 1953 6 view .LVU1474
 4837 0094 0023     		movs	r3, #0
 4838 0096 0193     		str	r3, [sp, #4]
 4839              	.LVL508:
 4840              	.L467:
2043:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4841              		.loc 1 2043 2 is_stmt 1 view .LVU1475
 4842 0098 0DF14809 		add	r9, sp, #72
 4843              	.LVL509:
2043:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4844              		.loc 1 2043 2 is_stmt 0 view .LVU1476
 4845 009c 3021     		movs	r1, #48
 4846 009e 4846     		mov	r0, r9
 4847 00a0 3F22     		movs	r2, #63
 4848 00a2 FFF7FEFF 		bl	xset
 4849              	.LVL510:
2044:src/display.c **** 
 4850              		.loc 1 2044 2 is_stmt 1 view .LVU1477
2044:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 170


 4851              		.loc 1 2044 31 is_stmt 0 view .LVU1478
 4852 00a6 0023     		movs	r3, #0
2046:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4853              		.loc 1 2046 6 view .LVU1479
 4854 00a8 4521     		movs	r1, #69
 4855 00aa 4046     		mov	r0, r8
2044:src/display.c **** 
 4856              		.loc 1 2044 31 view .LVU1480
 4857 00ac 8DF88730 		strb	r3, [sp, #135]
2046:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4858              		.loc 1 2046 2 is_stmt 1 view .LVU1481
2046:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4859              		.loc 1 2046 6 is_stmt 0 view .LVU1482
 4860 00b0 FFF7FEFF 		bl	find_char
 4861              	.LVL511:
2055:src/display.c **** 	else exp = s_to_i(q+1);
 4862              		.loc 1 2055 2 is_stmt 1 view .LVU1483
2055:src/display.c **** 	else exp = s_to_i(q+1);
 4863              		.loc 1 2055 5 is_stmt 0 view .LVU1484
 4864 00b4 0028     		cmp	r0, #0
 4865 00b6 00F05C81 		beq	.L568
2056:src/display.c **** #endif
 4866              		.loc 1 2056 7 is_stmt 1 view .LVU1485
2056:src/display.c **** #endif
 4867              		.loc 1 2056 13 is_stmt 0 view .LVU1486
 4868 00ba 0130     		adds	r0, r0, #1
 4869              	.LVL512:
2056:src/display.c **** #endif
 4870              		.loc 1 2056 13 view .LVU1487
 4871 00bc FFF7FEFF 		bl	s_to_i
 4872              	.LVL513:
2056:src/display.c **** #endif
 4873              		.loc 1 2056 13 view .LVU1488
 4874 00c0 0546     		mov	r5, r0
 4875              	.LVL514:
 4876              	.L468:
2060:src/display.c **** 	if (!res) {
 4877              		.loc 1 2060 2 is_stmt 1 view .LVU1489
2060:src/display.c **** 	if (!res) {
 4878              		.loc 1 2060 12 view .LVU1490
2060:src/display.c **** 	if (!res) {
 4879              		.loc 1 2060 2 is_stmt 0 view .LVU1491
 4880 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4881 00c6 202B     		cmp	r3, #32
2060:src/display.c **** 	if (!res) {
 4882              		.loc 1 2060 8 view .LVU1492
 4883 00c8 4646     		mov	r6, r8
 4884              	.LVL515:
2060:src/display.c **** 	if (!res) {
 4885              		.loc 1 2060 2 view .LVU1493
 4886 00ca 03D1     		bne	.L469
 4887              	.LVL516:
 4888              	.L470:
2060:src/display.c **** 	if (!res) {
 4889              		.loc 1 2060 27 is_stmt 1 discriminator 3 view .LVU1494
2060:src/display.c **** 	if (!res) {
 4890              		.loc 1 2060 23 discriminator 3 view .LVU1495
ARM GAS  /tmp/ccE2jV6G.s 			page 171


2060:src/display.c **** 	if (!res) {
 4891              		.loc 1 2060 12 discriminator 3 view .LVU1496
2060:src/display.c **** 	if (!res) {
 4892              		.loc 1 2060 2 is_stmt 0 discriminator 3 view .LVU1497
 4893 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4894              	.LVL517:
2060:src/display.c **** 	if (!res) {
 4895              		.loc 1 2060 2 discriminator 3 view .LVU1498
 4896 00d0 202B     		cmp	r3, #32
 4897 00d2 FBD0     		beq	.L470
 4898              	.LVL518:
 4899              	.L469:
2061:src/display.c **** 	  CLR_EXP_SIGN;
 4900              		.loc 1 2061 2 is_stmt 1 view .LVU1499
2061:src/display.c **** 	  CLR_EXP_SIGN;
 4901              		.loc 1 2061 5 is_stmt 0 view .LVU1500
 4902 00d4 002C     		cmp	r4, #0
 4903 00d6 00F09682 		beq	.L664
 4904              	.L471:
2065:src/display.c **** 	  negative = 1;
 4905              		.loc 1 2065 2 is_stmt 1 view .LVU1501
2065:src/display.c **** 	  negative = 1;
 4906              		.loc 1 2065 6 is_stmt 0 view .LVU1502
 4907 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2065:src/display.c **** 	  negative = 1;
 4908              		.loc 1 2065 5 view .LVU1503
 4909 00dc 2D2B     		cmp	r3, #45
 4910 00de 00F0CA81 		beq	.L665
2068:src/display.c **** 	  q++;
 4911              		.loc 1 2068 9 is_stmt 1 view .LVU1504
2068:src/display.c **** 	  q++;
 4912              		.loc 1 2068 12 is_stmt 0 view .LVU1505
 4913 00e2 2B2B     		cmp	r3, #43
 4914 00e4 00F06E82 		beq	.L666
1952:src/display.c **** 	int trimzeros = 0;
 4915              		.loc 1 1952 6 view .LVU1506
 4916 00e8 4FF0000E 		mov	lr, #0
 4917              	.LVL519:
 4918              	.L473:
2070:src/display.c **** 	if (*q == '.') {
 4919              		.loc 1 2070 9 is_stmt 1 discriminator 1 view .LVU1507
2070:src/display.c **** 	if (*q == '.') {
 4920              		.loc 1 2070 2 is_stmt 0 discriminator 1 view .LVU1508
 4921 00ec 302B     		cmp	r3, #48
 4922 00ee 03D1     		bne	.L475
 4923              	.LVL520:
 4924              	.L474:
2070:src/display.c **** 	if (*q == '.') {
 4925              		.loc 1 2070 24 is_stmt 1 discriminator 2 view .LVU1509
2070:src/display.c **** 	if (*q == '.') {
 4926              		.loc 1 2070 20 discriminator 2 view .LVU1510
2070:src/display.c **** 	if (*q == '.') {
 4927              		.loc 1 2070 9 discriminator 2 view .LVU1511
 4928 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4929              	.LVL521:
2070:src/display.c **** 	if (*q == '.') {
 4930              		.loc 1 2070 2 is_stmt 0 discriminator 2 view .LVU1512
ARM GAS  /tmp/ccE2jV6G.s 			page 172


 4931 00f4 302B     		cmp	r3, #48
 4932 00f6 FBD0     		beq	.L474
 4933              	.LVL522:
 4934              	.L475:
2071:src/display.c **** 	  do
 4935              		.loc 1 2071 2 is_stmt 1 view .LVU1513
2071:src/display.c **** 	  do
 4936              		.loc 1 2071 5 is_stmt 0 view .LVU1514
 4937 00f8 2E2B     		cmp	r3, #46
 4938 00fa 00F0A681 		beq	.L667
2078:src/display.c **** 	    *p++ = *q++;
 4939              		.loc 1 2078 4 is_stmt 1 view .LVU1515
2078:src/display.c **** 	    *p++ = *q++;
 4940              		.loc 1 2078 7 is_stmt 0 view .LVU1516
 4941 00fe A3F13002 		sub	r2, r3, #48
 4942 0102 092A     		cmp	r2, #9
2079:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4943              		.loc 1 2079 6 is_stmt 1 view .LVU1517
 4944              	.LVL523:
2079:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4945              		.loc 1 2079 15 is_stmt 0 view .LVU1518
 4946 0104 9CBF     		itt	ls
 4947 0106 0136     		addls	r6, r6, #1
 4948              	.LVL524:
2079:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4949              		.loc 1 2079 11 view .LVU1519
 4950 0108 8DF84830 		strbls	r3, [sp, #72]
2080:src/display.c **** 	    *p++ = *q++;
 4951              		.loc 1 2080 11 view .LVU1520
 4952 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2080:src/display.c **** 	    *p++ = *q++;
 4953              		.loc 1 2080 10 view .LVU1521
 4954 010e A2F13003 		sub	r3, r2, #48
2079:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4955              		.loc 1 2079 8 view .LVU1522
 4956 0112 94BF     		ite	ls
 4957 0114 0DF14901 		addls	r1, sp, #73
1938:src/display.c **** 	char *r;
 4958              		.loc 1 1938 8 view .LVU1523
 4959 0118 4946     		movhi	r1, r9
 4960              	.LVL525:
2080:src/display.c **** 	    *p++ = *q++;
 4961              		.loc 1 2080 10 is_stmt 1 view .LVU1524
 4962 011a 092B     		cmp	r3, #9
 4963 011c 0CD8     		bhi	.L481
 4964 011e A81B     		subs	r0, r5, r6
 4965 0120 731C     		adds	r3, r6, #1
 4966              	.L482:
 4967              	.LVL526:
2081:src/display.c **** 	    exp++;
 4968              		.loc 1 2081 6 view .LVU1525
2081:src/display.c **** 	    exp++;
 4969              		.loc 1 2081 11 is_stmt 0 view .LVU1526
 4970 0122 01F8012B 		strb	r2, [r1], #1
 4971              	.LVL527:
2081:src/display.c **** 	    exp++;
 4972              		.loc 1 2081 15 view .LVU1527
ARM GAS  /tmp/ccE2jV6G.s 			page 173


 4973 0126 1E46     		mov	r6, r3
 4974              	.LVL528:
2082:src/display.c **** 	  }
 4975              		.loc 1 2082 6 is_stmt 1 view .LVU1528
 4976 0128 C518     		adds	r5, r0, r3
 4977              	.LVL529:
2080:src/display.c **** 	    *p++ = *q++;
 4978              		.loc 1 2080 10 view .LVU1529
2080:src/display.c **** 	    *p++ = *q++;
 4979              		.loc 1 2080 11 is_stmt 0 view .LVU1530
 4980 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4981              	.LVL530:
2080:src/display.c **** 	    *p++ = *q++;
 4982              		.loc 1 2080 10 view .LVU1531
 4983 012e A2F1300C 		sub	ip, r2, #48
 4984 0132 BCF1090F 		cmp	ip, #9
 4985 0136 F4D9     		bls	.L482
 4986              	.LVL531:
 4987              	.L481:
2084:src/display.c **** 	    q++;
 4988              		.loc 1 2084 4 is_stmt 1 view .LVU1532
2084:src/display.c **** 	    q++;
 4989              		.loc 1 2084 7 is_stmt 0 view .LVU1533
 4990 0138 2E2A     		cmp	r2, #46
 4991 013a 00F04882 		beq	.L668
 4992              	.LVL532:
 4993              	.L478:
2091:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4994              		.loc 1 2091 2 is_stmt 1 view .LVU1534
2092:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4995              		.loc 1 2092 12 is_stmt 0 view .LVU1535
 4996 013e 009B     		ldr	r3, [sp]
2091:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4997              		.loc 1 2091 5 view .LVU1536
 4998 0140 012F     		cmp	r7, #1
2092:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4999              		.loc 1 2092 12 view .LVU1537
 5000 0142 1E68     		ldr	r6, [r3]
2091:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5001              		.loc 1 2091 5 view .LVU1538
 5002 0144 00F06F81 		beq	.L669
 5003 0148 0022     		movs	r2, #0
 5004              	.LVL533:
 5005              	.L484:
2105:src/display.c **** 	if (*p >= '5') {	// Round up
 5006              		.loc 1 2105 2 is_stmt 1 view .LVU1539
2105:src/display.c **** 	if (*p >= '5') {	// Round up
 5007              		.loc 1 2105 20 is_stmt 0 view .LVU1540
 5008 014a 5244     		add	r2, r2, r10
2105:src/display.c **** 	if (*p >= '5') {	// Round up
 5009              		.loc 1 2105 35 view .LVU1541
 5010 014c 501C     		adds	r0, r2, #1
2105:src/display.c **** 	if (*p >= '5') {	// Round up
 5011              		.loc 1 2105 4 view .LVU1542
 5012 014e 09EB0003 		add	r3, r9, r0
 5013              	.LVL534:
2106:src/display.c **** 	  *p = '0';
ARM GAS  /tmp/ccE2jV6G.s 			page 174


 5014              		.loc 1 2106 2 is_stmt 1 view .LVU1543
2106:src/display.c **** 	  *p = '0';
 5015              		.loc 1 2106 6 is_stmt 0 view .LVU1544
 5016 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2106:src/display.c **** 	  *p = '0';
 5017              		.loc 1 2106 5 view .LVU1545
 5018 0156 3429     		cmp	r1, #52
 5019 0158 21D9     		bls	.L488
2107:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5020              		.loc 1 2107 4 is_stmt 1 view .LVU1546
2107:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5021              		.loc 1 2107 7 is_stmt 0 view .LVU1547
 5022 015a 3021     		movs	r1, #48
 5023 015c 09F80010 		strb	r1, [r9, r0]
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5024              		.loc 1 2108 4 is_stmt 1 view .LVU1548
 5025              	.LVL535:
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5026              		.loc 1 2108 23 view .LVU1549
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5027              		.loc 1 2108 4 is_stmt 0 view .LVU1550
 5028 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 5029 0164 3929     		cmp	r1, #57
 5030 0166 40F0A683 		bne	.L489
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5031              		.loc 1 2108 11 view .LVU1551
 5032 016a 4946     		mov	r1, r9
 5033              	.LVL536:
 5034              	.L490:
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5035              		.loc 1 2108 38 is_stmt 1 discriminator 3 view .LVU1552
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5036              		.loc 1 2108 34 discriminator 3 view .LVU1553
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5037              		.loc 1 2108 23 discriminator 3 view .LVU1554
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5038              		.loc 1 2108 4 is_stmt 0 discriminator 3 view .LVU1555
 5039 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 5040              	.LVL537:
2108:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5041              		.loc 1 2108 4 discriminator 3 view .LVU1556
 5042 0170 BCF1390F 		cmp	ip, #57
 5043 0174 FAD0     		beq	.L490
2109:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5044              		.loc 1 2109 4 is_stmt 1 view .LVU1557
2109:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5045              		.loc 1 2109 7 is_stmt 0 view .LVU1558
 5046 0176 8B42     		cmp	r3, r1
 5047 0178 00F0FD80 		beq	.L670
 5048              	.LVL538:
 5049              	.L560:
2118:src/display.c **** 	      *p = '0';
 5050              		.loc 1 2118 12 is_stmt 1 view .LVU1559
2118:src/display.c **** 	      *p = '0';
 5051              		.loc 1 2118 13 is_stmt 0 view .LVU1560
 5052 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2118:src/display.c **** 	      *p = '0';
ARM GAS  /tmp/ccE2jV6G.s 			page 175


 5053              		.loc 1 2118 12 view .LVU1561
 5054 0180 3929     		cmp	r1, #57
 5055 0182 4A44     		add	r2, r2, r9
 5056              	.LVL539:
2118:src/display.c **** 	      *p = '0';
 5057              		.loc 1 2118 12 view .LVU1562
 5058 0184 07D1     		bne	.L493
2119:src/display.c **** 	    (*p)++;
 5059              		.loc 1 2119 11 view .LVU1563
 5060 0186 4FF0300C 		mov	ip, #48
 5061              	.L492:
2119:src/display.c **** 	    (*p)++;
 5062              		.loc 1 2119 8 is_stmt 1 view .LVU1564
2119:src/display.c **** 	    (*p)++;
 5063              		.loc 1 2119 11 is_stmt 0 view .LVU1565
 5064 018a 82F800C0 		strb	ip, [r2]
2118:src/display.c **** 	      *p = '0';
 5065              		.loc 1 2118 12 is_stmt 1 view .LVU1566
 5066              	.LVL540:
2118:src/display.c **** 	      *p = '0';
 5067              		.loc 1 2118 13 is_stmt 0 view .LVU1567
 5068 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5069              	.LVL541:
2118:src/display.c **** 	      *p = '0';
 5070              		.loc 1 2118 12 view .LVU1568
 5071 0192 3929     		cmp	r1, #57
 5072 0194 F9D0     		beq	.L492
 5073              	.L493:
2120:src/display.c **** 	  }
 5074              		.loc 1 2120 6 is_stmt 1 view .LVU1569
2120:src/display.c **** 	  }
 5075              		.loc 1 2120 10 is_stmt 0 view .LVU1570
 5076 0196 0131     		adds	r1, r1, #1
 5077 0198 1170     		strb	r1, [r2]
 5078              	.LVL542:
 5079              	.L657:
2120:src/display.c **** 	  }
 5080              		.loc 1 2120 10 view .LVU1571
 5081 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5082              	.L488:
2125:src/display.c **** 
 5083              		.loc 1 2125 2 is_stmt 1 view .LVU1572
 5084              	.LVL543:
2125:src/display.c **** 
 5085              		.loc 1 2125 45 view .LVU1573
2125:src/display.c **** 
 5086              		.loc 1 2125 2 is_stmt 0 view .LVU1574
 5087 019e 29B1     		cbz	r1, .L499
 5088              	.LVL544:
 5089              	.L559:
2125:src/display.c **** 
 5090              		.loc 1 2125 62 view .LVU1575
 5091 01a0 3021     		movs	r1, #48
 5092              	.L500:
2125:src/display.c **** 
 5093              		.loc 1 2125 68 is_stmt 1 discriminator 3 view .LVU1576
2125:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 176


 5094              		.loc 1 2125 57 discriminator 3 view .LVU1577
 5095              	.LVL545:
2125:src/display.c **** 
 5096              		.loc 1 2125 62 is_stmt 0 discriminator 3 view .LVU1578
 5097 01a2 03F8011B 		strb	r1, [r3], #1
 5098              	.LVL546:
2125:src/display.c **** 
 5099              		.loc 1 2125 45 is_stmt 1 discriminator 3 view .LVU1579
2125:src/display.c **** 
 5100              		.loc 1 2125 2 is_stmt 0 discriminator 3 view .LVU1580
 5101 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5102 01a8 002A     		cmp	r2, #0
 5103 01aa FAD1     		bne	.L500
 5104              	.L499:
2127:src/display.c **** 	switch (mode) {
 5105              		.loc 1 2127 2 is_stmt 1 view .LVU1581
 5106              	.LVL547:
2128:src/display.c **** 	default:
 5107              		.loc 1 2128 2 view .LVU1582
 5108 01ac 022F     		cmp	r7, #2
 5109 01ae 5AD0     		beq	.L582
 5110 01b0 032F     		cmp	r7, #3
 5111 01b2 00F00481 		beq	.L502
 5112 01b6 012F     		cmp	r7, #1
 5113 01b8 00F0B681 		beq	.L503
2131:src/display.c **** 	  if (count != *display_digits)
 5114              		.loc 1 2131 4 view .LVU1583
 5115              	.LVL548:
2131:src/display.c **** 	  if (count != *display_digits)
 5116              		.loc 1 2131 34 view .LVU1584
2131:src/display.c **** 	  if (count != *display_digits)
 5117              		.loc 1 2131 42 is_stmt 0 view .LVU1585
 5118 01bc 22AB     		add	r3, sp, #136
 5119 01be 3344     		add	r3, r3, r6
2131:src/display.c **** 	  if (count != *display_digits)
 5120              		.loc 1 2131 4 view .LVU1586
 5121 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5122 01c4 302B     		cmp	r3, #48
 5123 01c6 40F06783 		bne	.L576
 5124 01ca 711E     		subs	r1, r6, #1
 5125 01cc 4944     		add	r1, r1, r9
2131:src/display.c **** 	  if (count != *display_digits)
 5126              		.loc 1 2131 15 view .LVU1587
 5127 01ce 3346     		mov	r3, r6
 5128              	.LVL549:
 5129              	.L505:
2131:src/display.c **** 	  if (count != *display_digits)
 5130              		.loc 1 2131 66 is_stmt 1 discriminator 3 view .LVU1588
2131:src/display.c **** 	  if (count != *display_digits)
 5131              		.loc 1 2131 58 discriminator 3 view .LVU1589
2131:src/display.c **** 	  if (count != *display_digits)
 5132              		.loc 1 2131 42 is_stmt 0 discriminator 3 view .LVU1590
 5133 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
2131:src/display.c **** 	  if (count != *display_digits)
 5134              		.loc 1 2131 4 discriminator 3 view .LVU1591
 5135 01d4 3028     		cmp	r0, #48
 5136 01d6 1A46     		mov	r2, r3
ARM GAS  /tmp/ccE2jV6G.s 			page 177


2131:src/display.c **** 	  if (count != *display_digits)
 5137              		.loc 1 2131 63 discriminator 3 view .LVU1592
 5138 01d8 03F1FF33 		add	r3, r3, #-1
 5139              	.LVL550:
2131:src/display.c **** 	  if (count != *display_digits)
 5140              		.loc 1 2131 34 is_stmt 1 discriminator 3 view .LVU1593
2131:src/display.c **** 	  if (count != *display_digits)
 5141              		.loc 1 2131 4 is_stmt 0 discriminator 3 view .LVU1594
 5142 01dc F8D0     		beq	.L505
2132:src/display.c **** 	    count++;
 5143              		.loc 1 2132 4 is_stmt 1 view .LVU1595
2132:src/display.c **** 	    count++;
 5144              		.loc 1 2132 7 is_stmt 0 view .LVU1596
 5145 01de 9E42     		cmp	r6, r3
 5146 01e0 08BF     		it	eq
 5147 01e2 1A46     		moveq	r2, r3
 5148              	.LVL551:
 5149              	.L504:
2135:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5150              		.loc 1 2135 4 is_stmt 1 view .LVU1597
2135:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5151              		.loc 1 2135 7 is_stmt 0 view .LVU1598
 5152 01e4 B542     		cmp	r5, r6
 5153 01e6 80F20381 		bge	.L506
2135:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5154              		.loc 1 2135 47 discriminator 1 view .LVU1599
 5155 01ea 931B     		subs	r3, r2, r6
2135:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5156              		.loc 1 2135 31 discriminator 1 view .LVU1600
 5157 01ec AB42     		cmp	r3, r5
 5158 01ee 00F3FF80 		bgt	.L506
2160:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5159              		.loc 1 2160 11 is_stmt 1 view .LVU1601
2160:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5160              		.loc 1 2160 14 is_stmt 0 view .LVU1602
 5161 01f2 002D     		cmp	r5, #0
 5162 01f4 C0F27583 		blt	.L514
 5163 01f8 6B1C     		adds	r3, r5, #1
2162:src/display.c **** 		*obp++ = ',';
 5164              		.loc 1 2162 31 view .LVU1603
 5165 01fa DFF834A1 		ldr	r10, .L679+8
 5166 01fe 0293     		str	r3, [sp, #8]
 5167 0200 09EB0300 		add	r0, r9, r3
2127:src/display.c **** 	switch (mode) {
 5168              		.loc 1 2127 4 view .LVU1604
 5169 0204 CC46     		mov	ip, r9
1932:src/display.c **** 	int odig = 0;
 5170              		.loc 1 1932 15 view .LVU1605
 5171 0206 4146     		mov	r1, r8
 5172 0208 0192     		str	r2, [sp, #4]
 5173              	.LVL552:
1932:src/display.c **** 	int odig = 0;
 5174              		.loc 1 1932 15 view .LVU1606
 5175 020a 05E0     		b	.L515
 5176              	.LVL553:
 5177              	.L518:
2163:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccE2jV6G.s 			page 178


 5178              		.loc 1 2163 3 is_stmt 1 view .LVU1607
2162:src/display.c **** 		*obp++ = ',';
 5179              		.loc 1 2162 18 is_stmt 0 view .LVU1608
 5180 020c 022F     		cmp	r7, #2
2163:src/display.c **** 	      *obp++ = *p++;
 5181              		.loc 1 2163 10 view .LVU1609
 5182 020e 05BF     		ittet	eq
 5183 0210 2C23     		moveq	r3, #44
 5184 0212 4B70     		strbeq	r3, [r1, #1]
2164:src/display.c **** 	      odig++;
 5185              		.loc 1 2164 12 view .LVU1610
 5186 0214 0131     		addne	r1, r1, #1
 5187              	.LVL554:
2163:src/display.c **** 	      *obp++ = *p++;
 5188              		.loc 1 2163 7 view .LVU1611
 5189 0216 0231     		addeq	r1, r1, #2
 5190              	.LVL555:
 5191              	.L515:
2164:src/display.c **** 	      odig++;
 5192              		.loc 1 2164 8 is_stmt 1 discriminator 2 view .LVU1612
2164:src/display.c **** 	      odig++;
 5193              		.loc 1 2164 15 is_stmt 0 discriminator 2 view .LVU1613
 5194 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5195              	.LVL556:
2162:src/display.c **** 		*obp++ = ',';
 5196              		.loc 1 2162 8 is_stmt 1 discriminator 2 view .LVU1614
2164:src/display.c **** 	      odig++;
 5197              		.loc 1 2164 15 is_stmt 0 discriminator 2 view .LVU1615
 5198 021c 0B70     		strb	r3, [r1]
2165:src/display.c **** 	    }
 5199              		.loc 1 2165 8 is_stmt 1 discriminator 2 view .LVU1616
 5200              	.LVL557:
2161:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5201              		.loc 1 2161 23 discriminator 2 view .LVU1617
2161:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5202              		.loc 1 2161 15 discriminator 2 view .LVU1618
2162:src/display.c **** 		*obp++ = ',';
 5203              		.loc 1 2162 31 is_stmt 0 discriminator 2 view .LVU1619
 5204 021e A9EB0C03 		sub	r3, r9, ip
 5205 0222 2B44     		add	r3, r3, r5
 5206 0224 8AFB0327 		smull	r2, r7, r10, r3
 5207 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5208 022c 07EB4707 		add	r7, r7, r7, lsl #1
2161:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5209              		.loc 1 2161 6 discriminator 2 view .LVU1620
 5210 0230 6045     		cmp	r0, ip
2162:src/display.c **** 		*obp++ = ',';
 5211              		.loc 1 2162 31 discriminator 2 view .LVU1621
 5212 0232 A3EB0707 		sub	r7, r3, r7
2161:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5213              		.loc 1 2161 6 discriminator 2 view .LVU1622
 5214 0236 E9D1     		bne	.L518
 5215 0238 019A     		ldr	r2, [sp, #4]
 5216 023a 029F     		ldr	r7, [sp, #8]
2167:src/display.c **** 	    if (count > (exp + 1)) {
 5217              		.loc 1 2167 6 is_stmt 1 view .LVU1623
2167:src/display.c **** 	    if (count > (exp + 1)) {
ARM GAS  /tmp/ccE2jV6G.s 			page 179


 5218              		.loc 1 2167 13 is_stmt 0 view .LVU1624
 5219 023c 2E23     		movs	r3, #46
2168:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5220              		.loc 1 2168 9 view .LVU1625
 5221 023e BA42     		cmp	r2, r7
2167:src/display.c **** 	    if (count > (exp + 1)) {
 5222              		.loc 1 2167 13 view .LVU1626
 5223 0240 4B70     		strb	r3, [r1, #1]
2167:src/display.c **** 	    if (count > (exp + 1)) {
 5224              		.loc 1 2167 10 view .LVU1627
 5225 0242 01F10203 		add	r3, r1, #2
 5226              	.LVL558:
2168:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5227              		.loc 1 2168 6 is_stmt 1 view .LVU1628
2168:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5228              		.loc 1 2168 9 is_stmt 0 view .LVU1629
 5229 0246 2BDD     		ble	.L512
 5230 0248 A2EB050C 		sub	ip, r2, r5
 5231              	.LVL559:
2168:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5232              		.loc 1 2168 9 view .LVU1630
 5233 024c 8C44     		add	ip, ip, r1
 5234 024e 0131     		adds	r1, r1, #1
 5235              	.LVL560:
 5236              	.L519:
2170:src/display.c **** 		odig++;
 5237              		.loc 1 2170 3 is_stmt 1 discriminator 3 view .LVU1631
2170:src/display.c **** 		odig++;
 5238              		.loc 1 2170 10 is_stmt 0 discriminator 3 view .LVU1632
 5239 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5240              	.LVL561:
2170:src/display.c **** 		odig++;
 5241              		.loc 1 2170 10 discriminator 3 view .LVU1633
 5242 0254 01F8017F 		strb	r7, [r1, #1]!
2171:src/display.c **** 	      }
 5243              		.loc 1 2171 3 is_stmt 1 discriminator 3 view .LVU1634
2169:src/display.c **** 		*obp++ = *p++;
 5244              		.loc 1 2169 31 discriminator 3 view .LVU1635
2169:src/display.c **** 		*obp++ = *p++;
 5245              		.loc 1 2169 22 discriminator 3 view .LVU1636
2169:src/display.c **** 		*obp++ = *p++;
 5246              		.loc 1 2169 8 is_stmt 0 discriminator 3 view .LVU1637
 5247 0258 8C45     		cmp	ip, r1
 5248 025a F9D1     		bne	.L519
 5249 025c E943     		mvns	r1, r5
 5250 025e 1144     		add	r1, r1, r2
 5251 0260 0B44     		add	r3, r3, r1
 5252              	.LVL562:
2171:src/display.c **** 	      }
 5253              		.loc 1 2171 7 view .LVU1638
 5254 0262 1746     		mov	r7, r2
 5255 0264 1CE0     		b	.L512
 5256              	.LVL563:
 5257              	.L582:
2227:src/display.c **** 	  case -1:
 5258              		.loc 1 2227 16 view .LVU1639
 5259 0266 0127     		movs	r7, #1
ARM GAS  /tmp/ccE2jV6G.s 			page 180


 5260              	.LVL564:
 5261              	.L658:
2227:src/display.c **** 	  case -1:
 5262              		.loc 1 2227 16 view .LVU1640
 5263 0268 4146     		mov	r1, r8
 5264              	.LVL565:
 5265              	.L501:
2241:src/display.c **** 	  };
 5266              		.loc 1 2241 6 is_stmt 1 view .LVU1641
2242:src/display.c **** 	  // Falling through
 5267              		.loc 1 2242 5 view .LVU1642
2246:src/display.c **** 	  odig++;
 5268              		.loc 1 2246 4 view .LVU1643
2246:src/display.c **** 	  odig++;
 5269              		.loc 1 2246 15 is_stmt 0 view .LVU1644
 5270 026a 4A46     		mov	r2, r9
 5271              	.LVL566:
2246:src/display.c **** 	  odig++;
 5272              		.loc 1 2246 11 view .LVU1645
 5273 026c 0B46     		mov	r3, r1
 5274 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5275              	.LVL567:
2246:src/display.c **** 	  odig++;
 5276              		.loc 1 2246 11 view .LVU1646
 5277 0272 03F8020B 		strb	r0, [r3], #2
2247:src/display.c **** 	  *obp++ = '.';
 5278              		.loc 1 2247 4 is_stmt 1 view .LVU1647
2248:src/display.c **** 	  dd--;
 5279              		.loc 1 2248 4 view .LVU1648
 5280              	.LVL568:
2250:src/display.c **** 	    *obp++ = *p++;
 5281              		.loc 1 2250 10 is_stmt 0 view .LVU1649
 5282 0276 BAF1000F 		cmp	r10, #0
2248:src/display.c **** 	  dd--;
 5283              		.loc 1 2248 11 view .LVU1650
 5284 027a 4FF02E00 		mov	r0, #46
 5285 027e 4870     		strb	r0, [r1, #1]
2249:src/display.c **** 	  while (dd-- >= 0) {
 5286              		.loc 1 2249 4 is_stmt 1 view .LVU1651
2250:src/display.c **** 	    *obp++ = *p++;
 5287              		.loc 1 2250 4 view .LVU1652
2250:src/display.c **** 	    *obp++ = *p++;
 5288              		.loc 1 2250 10 view .LVU1653
2250:src/display.c **** 	    *obp++ = *p++;
 5289              		.loc 1 2250 10 is_stmt 0 view .LVU1654
 5290 0280 40F30F83 		ble	.L579
2250:src/display.c **** 	    *obp++ = *p++;
 5291              		.loc 1 2250 10 view .LVU1655
 5292 0284 0AF10100 		add	r0, r10, #1
 5293 0288 0131     		adds	r1, r1, #1
 5294 028a 8144     		add	r9, r9, r0
 5295              	.LVL569:
 5296              	.L542:
2251:src/display.c **** 	    odig++;
 5297              		.loc 1 2251 6 is_stmt 1 view .LVU1656
2251:src/display.c **** 	    odig++;
 5298              		.loc 1 2251 13 is_stmt 0 view .LVU1657
ARM GAS  /tmp/ccE2jV6G.s 			page 181


 5299 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5300              	.LVL570:
2251:src/display.c **** 	    odig++;
 5301              		.loc 1 2251 13 view .LVU1658
 5302 0290 01F8010F 		strb	r0, [r1, #1]!
2252:src/display.c **** 	  }
 5303              		.loc 1 2252 6 is_stmt 1 view .LVU1659
2250:src/display.c **** 	    *obp++ = *p++;
 5304              		.loc 1 2250 10 view .LVU1660
2250:src/display.c **** 	    *obp++ = *p++;
 5305              		.loc 1 2250 10 is_stmt 0 view .LVU1661
 5306 0294 4A45     		cmp	r2, r9
 5307 0296 F9D1     		bne	.L542
 5308 0298 5344     		add	r3, r3, r10
 5309 029a 5744     		add	r7, r7, r10
2254:src/display.c **** 	}
 5310              		.loc 1 2254 13 view .LVU1662
 5311 029c 4FF0010B 		mov	fp, #1
 5312              	.LVL571:
 5313              	.L512:
2263:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5314              		.loc 1 2263 2 is_stmt 1 view .LVU1663
2269:src/display.c **** 	if (odig > *display_digits)
 5315              		.loc 1 2269 2 view .LVU1664
 5316 02a0 B742     		cmp	r7, r6
 5317 02a2 A8BF     		it	ge
 5318 02a4 3746     		movge	r7, r6
 5319              	.LVL572:
2272:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5320              		.loc 1 2272 23 is_stmt 0 view .LVU1665
 5321 02a6 F61B     		subs	r6, r6, r7
2269:src/display.c **** 	if (odig > *display_digits)
 5322              		.loc 1 2269 7 view .LVU1666
 5323 02a8 0022     		movs	r2, #0
2272:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5324              		.loc 1 2272 4 view .LVU1667
 5325 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2269:src/display.c **** 	if (odig > *display_digits)
 5326              		.loc 1 2269 7 view .LVU1668
 5327 02ae 1A70     		strb	r2, [r3]
2270:src/display.c **** 	  odig = *display_digits;
 5328              		.loc 1 2270 2 is_stmt 1 view .LVU1669
 5329              	.LVL573:
2272:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5330              		.loc 1 2272 2 view .LVU1670
2273:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5331              		.loc 1 2273 2 view .LVU1671
2275:src/display.c **** 	  if (res) *res++ = '-';
 5332              		.loc 1 2275 2 view .LVU1672
2275:src/display.c **** 	  if (res) *res++ = '-';
 5333              		.loc 1 2275 5 is_stmt 0 view .LVU1673
 5334 02b0 BEF1000F 		cmp	lr, #0
 5335 02b4 05D0     		beq	.L543
2276:src/display.c **** 	  else {
 5336              		.loc 1 2276 4 is_stmt 1 view .LVU1674
2276:src/display.c **** 	  else {
 5337              		.loc 1 2276 7 is_stmt 0 view .LVU1675
ARM GAS  /tmp/ccE2jV6G.s 			page 182


 5338 02b6 002C     		cmp	r4, #0
 5339 02b8 00F0B281 		beq	.L544
2276:src/display.c **** 	  else {
 5340              		.loc 1 2276 13 is_stmt 1 discriminator 1 view .LVU1676
 5341              	.LVL574:
2276:src/display.c **** 	  else {
 5342              		.loc 1 2276 20 is_stmt 0 discriminator 1 view .LVU1677
 5343 02bc 2D22     		movs	r2, #45
 5344 02be 04F8012B 		strb	r2, [r4], #1
 5345              	.LVL575:
 5346              	.L543:
2284:src/display.c **** 	  if (c == '.') {
 5347              		.loc 1 2284 12 is_stmt 1 discriminator 1 view .LVU1678
2284:src/display.c **** 	  if (c == '.') {
 5348              		.loc 1 2284 18 is_stmt 0 discriminator 1 view .LVU1679
 5349 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5350              	.LVL576:
2284:src/display.c **** 	  if (c == '.') {
 5351              		.loc 1 2284 2 discriminator 1 view .LVU1680
 5352 02c6 E2B1     		cbz	r2, .L545
2284:src/display.c **** 	  if (c == '.') {
 5353              		.loc 1 2284 31 view .LVU1681
 5354 02c8 6B2E     		cmp	r6, #107
 5355 02ca 1ADC     		bgt	.L545
 5356              	.LVL577:
 5357              	.L546:
 5358              	.LBB417:
 5359              	.LBB418:
 369:src/display.c ****   } else {
 5360              		.loc 1 369 17 view .LVU1682
 5361 02cc 3946     		mov	r1, r7
 5362              	.LBE418:
 5363              	.LBE417:
2288:src/display.c **** 	  } else {
 5364              		.loc 1 2288 12 view .LVU1683
 5365 02ce DFF864A0 		ldr	r10, .L679+12
2286:src/display.c **** 	  } else if (c == ',') {
 5366              		.loc 1 2286 12 view .LVU1684
 5367 02d2 DFF86490 		ldr	r9, .L679+16
 5368              	.LBB422:
 5369              	.LBB419:
 369:src/display.c ****   } else {
 5370              		.loc 1 369 17 view .LVU1685
 5371 02d6 1F46     		mov	r7, r3
 5372              	.LVL578:
 369:src/display.c ****   } else {
 5373              		.loc 1 369 17 view .LVU1686
 5374 02d8 0B46     		mov	r3, r1
 5375              	.LVL579:
 5376              	.L555:
 369:src/display.c ****   } else {
 5377              		.loc 1 369 17 view .LVU1687
 5378              	.LBE419:
 5379              	.LBE422:
2285:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5380              		.loc 1 2285 4 is_stmt 1 view .LVU1688
2285:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
ARM GAS  /tmp/ccE2jV6G.s 			page 183


 5381              		.loc 1 2285 7 is_stmt 0 view .LVU1689
 5382 02da 2E2A     		cmp	r2, #46
 5383 02dc 00F0DB80 		beq	.L671
2287:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5384              		.loc 1 2287 11 is_stmt 1 view .LVU1690
2287:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5385              		.loc 1 2287 14 is_stmt 0 view .LVU1691
 5386 02e0 2C2A     		cmp	r2, #44
 5387 02e2 00F0E880 		beq	.L672
2290:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5388              		.loc 1 2290 6 is_stmt 1 view .LVU1692
 5389              	.LVL580:
 5390              	.LBB423:
 5391              	.LBI423:
 404:src/display.c ****   if (res) *res++ = ch;
 5392              		.loc 1 404 14 view .LVU1693
 5393              	.LBB424:
 405:src/display.c ****   else	set_dig(base, ch);
 5394              		.loc 1 405 3 view .LVU1694
 405:src/display.c ****   else	set_dig(base, ch);
 5395              		.loc 1 405 6 is_stmt 0 view .LVU1695
 5396 02e6 002C     		cmp	r4, #0
 5397 02e8 00F0F280 		beq	.L553
 405:src/display.c ****   else	set_dig(base, ch);
 5398              		.loc 1 405 12 is_stmt 1 view .LVU1696
 5399              	.LVL581:
 405:src/display.c ****   else	set_dig(base, ch);
 5400              		.loc 1 405 19 is_stmt 0 view .LVU1697
 5401 02ec 04F8012B 		strb	r2, [r4], #1
 5402              	.LVL582:
 5403              	.L554:
 407:src/display.c **** }
 5404              		.loc 1 407 3 is_stmt 1 view .LVU1698
 407:src/display.c **** }
 5405              		.loc 1 407 3 is_stmt 0 view .LVU1699
 5406              	.LBE424:
 5407              	.LBE423:
2291:src/display.c **** 	  }
 5408              		.loc 1 2291 6 is_stmt 1 view .LVU1700
2284:src/display.c **** 	  if (c == '.') {
 5409              		.loc 1 2284 18 is_stmt 0 view .LVU1701
 5410 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5411              	.LVL583:
2291:src/display.c **** 	  }
 5412              		.loc 1 2291 8 view .LVU1702
 5413 02f4 0936     		adds	r6, r6, #9
 5414              	.LVL584:
2284:src/display.c **** 	  if (c == '.') {
 5415              		.loc 1 2284 53 is_stmt 1 view .LVU1703
2284:src/display.c **** 	  if (c == '.') {
 5416              		.loc 1 2284 12 view .LVU1704
2284:src/display.c **** 	  if (c == '.') {
 5417              		.loc 1 2284 2 is_stmt 0 view .LVU1705
 5418 02f6 0AB1     		cbz	r2, .L654
2284:src/display.c **** 	  if (c == '.') {
 5419              		.loc 1 2284 31 discriminator 3 view .LVU1706
 5420 02f8 6B2E     		cmp	r6, #107
ARM GAS  /tmp/ccE2jV6G.s 			page 184


 5421 02fa EEDD     		ble	.L555
 5422              	.L654:
2284:src/display.c **** 	  if (c == '.') {
 5423              		.loc 1 2284 31 discriminator 3 view .LVU1707
 5424 02fc 1A46     		mov	r2, r3
 5425              	.LVL585:
2284:src/display.c **** 	  if (c == '.') {
 5426              		.loc 1 2284 31 discriminator 3 view .LVU1708
 5427 02fe 3B46     		mov	r3, r7
 5428 0300 1746     		mov	r7, r2
 5429              	.LVL586:
 5430              	.L545:
2304:src/display.c **** 	  set_exp(exp, 0, res);
 5431              		.loc 1 2304 2 is_stmt 1 view .LVU1709
2304:src/display.c **** 	  set_exp(exp, 0, res);
 5432              		.loc 1 2304 5 is_stmt 0 view .LVU1710
 5433 0302 BBF1000F 		cmp	fp, #0
 5434 0306 40F0F880 		bne	.L673
 5435              	.L556:
2307:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5436              		.loc 1 2307 2 is_stmt 1 view .LVU1711
2307:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5437              		.loc 1 2307 5 is_stmt 0 view .LVU1712
 5438 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5439 030e 2E2B     		cmp	r3, #46
 5440 0310 00F0E580 		beq	.L674
 5441              	.L557:
2309:src/display.c ****       }
 5442              		.loc 1 2309 2 is_stmt 1 view .LVU1713
2309:src/display.c ****       }
 5443              		.loc 1 2309 18 is_stmt 0 view .LVU1714
 5444 0314 009B     		ldr	r3, [sp]
 5445 0316 1F60     		str	r7, [r3]
 5446              	.LVL587:
 5447              	.L444:
2310:src/display.c **** 
 5448              		.loc 1 2310 7 view .LVU1715
 5449 0318 23B0     		add	sp, sp, #140
 5450              		.cfi_remember_state
 5451              		.cfi_def_cfa_offset 36
 5452              	.LVL588:
2310:src/display.c **** 
 5453              		.loc 1 2310 7 view .LVU1716
 5454              		@ sp needed
 5455 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5456              	.LVL589:
 5457              	.L452:
 5458              		.cfi_restore_state
2009:src/display.c **** 
 5459              		.loc 1 2009 4 is_stmt 1 view .LVU1717
 5460 031e 4146     		mov	r1, r8
 5461 0320 3046     		mov	r0, r6
 5462 0322 FFF7FEFF 		bl	decNumberToString
 5463              	.LVL590:
 5464 0326 A5E6     		b	.L454
 5465              	.L680:
 5466              		.align	2
ARM GAS  /tmp/ccE2jV6G.s 			page 185


 5467              	.L679:
 5468 0328 00000000 		.word	main_ram
 5469 032c 00000000 		.word	StateWhileOn
 5470 0330 56555555 		.word	1431655766
 5471 0334 00000000 		.word	.LANCHOR0
 5472 0338 00000000 		.word	.LANCHOR1
 5473              	.LVL591:
 5474              	.L445:
1967:src/display.c **** 	    if (State2.hms) {
 5475              		.loc 1 1967 4 view .LVU1718
1967:src/display.c **** 	    if (State2.hms) {
 5476              		.loc 1 1967 25 is_stmt 0 view .LVU1719
 5477 033c C14B     		ldr	r3, .L681
 5478 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1967:src/display.c **** 	    if (State2.hms) {
 5479              		.loc 1 1967 22 view .LVU1720
 5480 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1967:src/display.c **** 	    if (State2.hms) {
 5481              		.loc 1 1967 25 view .LVU1721
 5482 0342 01F00201 		and	r1, r1, #2
1967:src/display.c **** 	    if (State2.hms) {
 5483              		.loc 1 1967 22 view .LVU1722
 5484 0346 1143     		orrs	r1, r1, r2
 5485 0348 7FF46EAE 		bne	.L448
1968:src/display.c **** 	      set_x_hms(z, res);
 5486              		.loc 1 1968 6 is_stmt 1 view .LVU1723
1968:src/display.c **** 	      set_x_hms(z, res);
 5487              		.loc 1 1968 10 is_stmt 0 view .LVU1724
 5488 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1968:src/display.c **** 	      set_x_hms(z, res);
 5489              		.loc 1 1968 9 view .LVU1725
 5490 034e DA07     		lsls	r2, r3, #31
 5491 0350 00F19E82 		bmi	.L675
1972:src/display.c **** 	      if (set_x_fract(z, res))
 5492              		.loc 1 1972 11 is_stmt 1 view .LVU1726
1972:src/display.c **** 	      if (set_x_fract(z, res))
 5493              		.loc 1 1972 15 is_stmt 0 view .LVU1727
 5494 0354 BC4B     		ldr	r3, .L681+4
 5495 0356 1B68     		ldr	r3, [r3]
 5496 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1972:src/display.c **** 	      if (set_x_fract(z, res))
 5497              		.loc 1 1972 14 view .LVU1728
 5498 035c 9B06     		lsls	r3, r3, #26
 5499 035e 7FF563AE 		bpl	.L448
1973:src/display.c **** 		return;
 5500              		.loc 1 1973 8 is_stmt 1 view .LVU1729
1973:src/display.c **** 		return;
 5501              		.loc 1 1973 12 is_stmt 0 view .LVU1730
 5502 0362 2146     		mov	r1, r4
 5503 0364 3046     		mov	r0, r6
 5504 0366 FFF7FEFF 		bl	set_x_fract
 5505              	.LVL592:
1973:src/display.c **** 		return;
 5506              		.loc 1 1973 11 view .LVU1731
 5507 036a 0028     		cmp	r0, #0
 5508 036c 3FF45CAE 		beq	.L448
 5509 0370 D2E7     		b	.L444
ARM GAS  /tmp/ccE2jV6G.s 			page 186


 5510              	.LVL593:
 5511              	.L568:
2055:src/display.c **** 	else exp = s_to_i(q+1);
 5512              		.loc 1 2055 21 view .LVU1732
 5513 0372 0546     		mov	r5, r0
 5514 0374 A5E6     		b	.L468
 5515              	.LVL594:
 5516              	.L670:
2109:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5517              		.loc 1 2109 7 view .LVU1733
 5518 0376 4A46     		mov	r2, r9
2110:src/display.c **** 	    mantissa[0] = '1';
 5519              		.loc 1 2110 41 view .LVU1734
 5520 0378 4FF0300C 		mov	ip, #48
 5521              	.LVL595:
 5522              	.L494:
2110:src/display.c **** 	    mantissa[0] = '1';
 5523              		.loc 1 2110 47 is_stmt 1 discriminator 3 view .LVU1735
2110:src/display.c **** 	    mantissa[0] = '1';
 5524              		.loc 1 2110 36 discriminator 3 view .LVU1736
2110:src/display.c **** 	    mantissa[0] = '1';
 5525              		.loc 1 2110 41 is_stmt 0 discriminator 3 view .LVU1737
 5526 037c 02F801CB 		strb	ip, [r2], #1
 5527              	.LVL596:
2110:src/display.c **** 	    mantissa[0] = '1';
 5528              		.loc 1 2110 25 is_stmt 1 discriminator 3 view .LVU1738
2110:src/display.c **** 	    mantissa[0] = '1';
 5529              		.loc 1 2110 6 is_stmt 0 discriminator 3 view .LVU1739
 5530 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5531 0382 3929     		cmp	r1, #57
 5532 0384 FAD0     		beq	.L494
 5533              	.LVL597:
 5534              	.L561:
2111:src/display.c **** 	    exp++;
 5535              		.loc 1 2111 6 is_stmt 1 view .LVU1740
2111:src/display.c **** 	    exp++;
 5536              		.loc 1 2111 18 is_stmt 0 view .LVU1741
 5537 0386 3122     		movs	r2, #49
2113:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5538              		.loc 1 2113 9 view .LVU1742
 5539 0388 012F     		cmp	r7, #1
2112:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5540              		.loc 1 2112 9 view .LVU1743
 5541 038a 05F10105 		add	r5, r5, #1
 5542              	.LVL598:
2111:src/display.c **** 	    exp++;
 5543              		.loc 1 2111 18 view .LVU1744
 5544 038e 8DF84820 		strb	r2, [sp, #72]
2112:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5545              		.loc 1 2112 6 is_stmt 1 view .LVU1745
 5546              	.LVL599:
2113:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5547              		.loc 1 2113 6 view .LVU1746
2113:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5548              		.loc 1 2113 9 is_stmt 0 view .LVU1747
 5549 0392 7FF402AF 		bne	.L657
2113:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccE2jV6G.s 			page 187


 5550              		.loc 1 2113 27 discriminator 1 view .LVU1748
 5551 0396 AE42     		cmp	r6, r5
 5552 0398 00F3C180 		bgt	.L496
2114:src/display.c **** 	      extra_digits = 0;
 5553              		.loc 1 2114 8 is_stmt 1 view .LVU1749
2114:src/display.c **** 	      extra_digits = 0;
 5554              		.loc 1 2114 28 is_stmt 0 view .LVU1750
 5555 039c AA4B     		ldr	r3, .L681+4
 5556              	.LVL600:
2114:src/display.c **** 	      extra_digits = 0;
 5557              		.loc 1 2114 28 view .LVU1751
 5558 039e 1B68     		ldr	r3, [r3]
 5559 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2114:src/display.c **** 	      extra_digits = 0;
 5560              		.loc 1 2114 37 view .LVU1752
 5561 03a4 D806     		lsls	r0, r3, #27
 5562              	.LVL601:
2114:src/display.c **** 	      extra_digits = 0;
 5563              		.loc 1 2114 37 view .LVU1753
 5564 03a6 40F1C082 		bpl	.L676
 5565              	.LVL602:
2125:src/display.c **** 
 5566              		.loc 1 2125 2 is_stmt 1 view .LVU1754
2125:src/display.c **** 
 5567              		.loc 1 2125 40 is_stmt 0 view .LVU1755
 5568 03aa 0AF10102 		add	r2, r10, #1
2125:src/display.c **** 
 5569              		.loc 1 2125 9 view .LVU1756
 5570 03ae 09EB0203 		add	r3, r9, r2
 5571              	.LVL603:
2125:src/display.c **** 
 5572              		.loc 1 2125 45 is_stmt 1 view .LVU1757
2125:src/display.c **** 
 5573              		.loc 1 2125 2 is_stmt 0 view .LVU1758
 5574 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2114:src/display.c **** 	      extra_digits = 0;
 5575              		.loc 1 2114 37 view .LVU1759
 5576 03b6 0327     		movs	r7, #3
2125:src/display.c **** 
 5577              		.loc 1 2125 2 view .LVU1760
 5578 03b8 002A     		cmp	r2, #0
 5579 03ba 7FF4F1AE 		bne	.L559
 5580              	.LVL604:
 5581              	.L502:
2227:src/display.c **** 	  case -1:
 5582              		.loc 1 2227 4 is_stmt 1 view .LVU1761
2227:src/display.c **** 	  case -1:
 5583              		.loc 1 2227 16 is_stmt 0 view .LVU1762
 5584 03be A34B     		ldr	r3, .L681+8
 5585 03c0 83FB0523 		smull	r2, r3, r3, r5
 5586 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5587 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5588 03cc EB1A     		subs	r3, r5, r3
 5589 03ce 0233     		adds	r3, r3, #2
 5590 03d0 042B     		cmp	r3, #4
 5591 03d2 3FF648AF 		bhi	.L582
 5592 03d6 01A2     		adr	r2, .L539
ARM GAS  /tmp/ccE2jV6G.s 			page 188


 5593 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5594              		.p2align 2
 5595              	.L539:
 5596 03dc 0B050000 		.word	.L583+1
 5597 03e0 A7070000 		.word	.L538+1
 5598 03e4 67020000 		.word	.L582+1
 5599 03e8 0B050000 		.word	.L583+1
 5600 03ec A7070000 		.word	.L538+1
 5601              	.LVL605:
 5602              		.p2align 1
 5603              	.L506:
2136:src/display.c **** 	    case -1:
 5604              		.loc 1 2136 6 is_stmt 1 view .LVU1763
2136:src/display.c **** 	    case -1:
 5605              		.loc 1 2136 32 is_stmt 0 view .LVU1764
 5606 03f0 9549     		ldr	r1, .L681+4
2136:src/display.c **** 	    case -1:
 5607              		.loc 1 2136 19 view .LVU1765
 5608 03f2 964B     		ldr	r3, .L681+8
2136:src/display.c **** 	    case -1:
 5609              		.loc 1 2136 32 view .LVU1766
 5610 03f4 0968     		ldr	r1, [r1]
2136:src/display.c **** 	    case -1:
 5611              		.loc 1 2136 19 view .LVU1767
 5612 03f6 83FB0503 		smull	r0, r3, r3, r5
2136:src/display.c **** 	    case -1:
 5613              		.loc 1 2136 32 view .LVU1768
 5614 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2136:src/display.c **** 	    case -1:
 5615              		.loc 1 2136 19 view .LVU1769
 5616 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5617 0402 03EB4303 		add	r3, r3, r3, lsl #1
2136:src/display.c **** 	    case -1:
 5618              		.loc 1 2136 32 view .LVU1770
 5619 0406 C1F30011 		ubfx	r1, r1, #4, #1
2136:src/display.c **** 	    case -1:
 5620              		.loc 1 2136 19 view .LVU1771
 5621 040a EB1A     		subs	r3, r5, r3
2136:src/display.c **** 	    case -1:
 5622              		.loc 1 2136 24 view .LVU1772
 5623 040c 03FB01F3 		mul	r3, r3, r1
 5624 0410 0233     		adds	r3, r3, #2
 5625 0412 042B     		cmp	r3, #4
 5626 0414 00F24282 		bhi	.L577
 5627 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5628              	.L510:
 5629 041c DC01     		.2byte	(.L578-.L510)/2
 5630 041e FD01     		.2byte	(.L509-.L510)/2
 5631 0420 4002     		.2byte	(.L577-.L510)/2
 5632 0422 DC01     		.2byte	(.L578-.L510)/2
 5633 0424 FD01     		.2byte	(.L509-.L510)/2
 5634              	.LVL606:
 5635              		.p2align 1
 5636              	.L669:
2092:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5637              		.loc 1 2092 4 is_stmt 1 view .LVU1773
2092:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccE2jV6G.s 			page 189


 5638              		.loc 1 2092 7 is_stmt 0 view .LVU1774
 5639 0426 AE42     		cmp	r6, r5
 5640 0428 04DD     		ble	.L485
2092:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5641              		.loc 1 2092 45 discriminator 1 view .LVU1775
 5642 042a CAF10003 		rsb	r3, r10, #0
2092:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5643              		.loc 1 2092 36 discriminator 1 view .LVU1776
 5644 042e AB42     		cmp	r3, r5
 5645 0430 40F3C681 		ble	.L486
 5646              	.L485:
2093:src/display.c **** 	  else {
 5647              		.loc 1 2093 6 is_stmt 1 view .LVU1777
2093:src/display.c **** 	  else {
 5648              		.loc 1 2093 26 is_stmt 0 view .LVU1778
 5649 0434 844B     		ldr	r3, .L681+4
 5650 0436 1B68     		ldr	r3, [r3]
 5651 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2093:src/display.c **** 	  else {
 5652              		.loc 1 2093 35 view .LVU1779
 5653 043c 13F0100F 		tst	r3, #16
 5654 0440 14BF     		ite	ne
 5655 0442 0327     		movne	r7, #3
 5656              	.LVL607:
2093:src/display.c **** 	  else {
 5657              		.loc 1 2093 35 view .LVU1780
 5658 0444 0227     		moveq	r7, #2
 5659 0446 0022     		movs	r2, #0
 5660 0448 7FE6     		b	.L484
 5661              	.LVL608:
 5662              	.L667:
2093:src/display.c **** 	  else {
 5663              		.loc 1 2093 35 view .LVU1781
 5664 044a 013D     		subs	r5, r5, #1
 5665 044c 7219     		adds	r2, r6, r5
 5666              	.L477:
2072:src/display.c **** 	    exp--;
 5667              		.loc 1 2072 4 is_stmt 1 discriminator 1 view .LVU1782
2073:src/display.c **** 	  while (*++q == '0');
 5668              		.loc 1 2073 6 discriminator 1 view .LVU1783
 5669 044e 951B     		subs	r5, r2, r6
 5670              	.LVL609:
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5671              		.loc 1 2074 10 discriminator 1 view .LVU1784
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5672              		.loc 1 2074 11 is_stmt 0 discriminator 1 view .LVU1785
 5673 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5674              	.LVL610:
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5675              		.loc 1 2074 4 discriminator 1 view .LVU1786
 5676 0454 302B     		cmp	r3, #48
 5677 0456 FAD0     		beq	.L477
2075:src/display.c **** 	    *p++ = *q++;
 5678              		.loc 1 2075 10 is_stmt 1 view .LVU1787
 5679 0458 A3F13002 		sub	r2, r3, #48
 5680 045c 092A     		cmp	r2, #9
 5681 045e 3FF66EAE 		bhi	.L478
ARM GAS  /tmp/ccE2jV6G.s 			page 190


1938:src/display.c **** 	char *r;
 5682              		.loc 1 1938 8 is_stmt 0 view .LVU1788
 5683 0462 4A46     		mov	r2, r9
 5684              	.LVL611:
 5685              	.L479:
2076:src/display.c **** 	} else {
 5686              		.loc 1 2076 6 is_stmt 1 view .LVU1789
2076:src/display.c **** 	} else {
 5687              		.loc 1 2076 11 is_stmt 0 view .LVU1790
 5688 0464 02F8013B 		strb	r3, [r2], #1
 5689              	.LVL612:
2075:src/display.c **** 	    *p++ = *q++;
 5690              		.loc 1 2075 10 is_stmt 1 view .LVU1791
2075:src/display.c **** 	    *p++ = *q++;
 5691              		.loc 1 2075 11 is_stmt 0 view .LVU1792
 5692 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2075:src/display.c **** 	    *p++ = *q++;
 5693              		.loc 1 2075 10 view .LVU1793
 5694 046c A3F13001 		sub	r1, r3, #48
 5695 0470 0929     		cmp	r1, #9
 5696 0472 F7D9     		bls	.L479
 5697 0474 63E6     		b	.L478
 5698              	.LVL613:
 5699              	.L665:
2066:src/display.c **** 	  q++;
 5700              		.loc 1 2066 4 is_stmt 1 view .LVU1794
2067:src/display.c **** 	} else if (*q == '+')
 5701              		.loc 1 2067 4 view .LVU1795
2066:src/display.c **** 	  q++;
 5702              		.loc 1 2066 13 is_stmt 0 view .LVU1796
 5703 0476 4FF0010E 		mov	lr, #1
 5704 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2067:src/display.c **** 	} else if (*q == '+')
 5705              		.loc 1 2067 5 view .LVU1797
 5706 047c 7644     		add	r6, r6, lr
 5707              	.LVL614:
2067:src/display.c **** 	} else if (*q == '+')
 5708              		.loc 1 2067 5 view .LVU1798
 5709 047e 35E6     		b	.L473
 5710              	.LVL615:
 5711              	.L663:
2035:src/display.c **** 	  trimzeros = 1;
 5712              		.loc 1 2035 4 is_stmt 1 view .LVU1799
2035:src/display.c **** 	  trimzeros = 1;
 5713              		.loc 1 2035 11 is_stmt 0 view .LVU1800
 5714 0480 3046     		mov	r0, r6
 5715 0482 FFF7FEFF 		bl	std_round_fix
 5716              	.LVL616:
2037:src/display.c **** 	} else if (dd >= *display_digits)
 5717              		.loc 1 2037 7 view .LVU1801
 5718 0486 009B     		ldr	r3, [sp]
 5719 0488 1D68     		ldr	r5, [r3]
2036:src/display.c **** 	  dd = *display_digits - 1;
 5720              		.loc 1 2036 14 view .LVU1802
 5721 048a 0123     		movs	r3, #1
2035:src/display.c **** 	  trimzeros = 1;
 5722              		.loc 1 2035 11 view .LVU1803
ARM GAS  /tmp/ccE2jV6G.s 			page 191


 5723 048c 0746     		mov	r7, r0
 5724              	.LVL617:
2036:src/display.c **** 	  dd = *display_digits - 1;
 5725              		.loc 1 2036 4 is_stmt 1 view .LVU1804
2037:src/display.c **** 	} else if (dd >= *display_digits)
 5726              		.loc 1 2037 4 view .LVU1805
2037:src/display.c **** 	} else if (dd >= *display_digits)
 5727              		.loc 1 2037 7 is_stmt 0 view .LVU1806
 5728 048e 05F1FF3A 		add	r10, r5, #-1
 5729              	.LVL618:
2036:src/display.c **** 	  dd = *display_digits - 1;
 5730              		.loc 1 2036 14 view .LVU1807
 5731 0492 0193     		str	r3, [sp, #4]
 5732              	.LVL619:
2036:src/display.c **** 	  dd = *display_digits - 1;
 5733              		.loc 1 2036 14 view .LVU1808
 5734 0494 00E6     		b	.L467
 5735              	.LVL620:
 5736              	.L671:
2286:src/display.c **** 	  } else if (c == ',') {
 5737              		.loc 1 2286 6 is_stmt 1 view .LVU1809
2286:src/display.c **** 	  } else if (c == ',') {
 5738              		.loc 1 2286 12 is_stmt 0 view .LVU1810
 5739 0496 2246     		mov	r2, r4
 5740              	.LVL621:
2286:src/display.c **** 	  } else if (c == ',') {
 5741              		.loc 1 2286 12 view .LVU1811
 5742 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5743 049c 0193     		str	r3, [sp, #4]
 5744 049e A6F10900 		sub	r0, r6, #9
 5745 04a2 FFF7FEFF 		bl	set_decimal
 5746              	.LVL622:
 5747 04a6 019B     		ldr	r3, [sp, #4]
 5748 04a8 0446     		mov	r4, r0
 5749              	.LVL623:
 5750              	.L549:
2284:src/display.c **** 	  if (c == '.') {
 5751              		.loc 1 2284 53 is_stmt 1 view .LVU1812
2284:src/display.c **** 	  if (c == '.') {
 5752              		.loc 1 2284 12 view .LVU1813
2284:src/display.c **** 	  if (c == '.') {
 5753              		.loc 1 2284 18 is_stmt 0 view .LVU1814
 5754 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5755              	.LVL624:
2284:src/display.c **** 	  if (c == '.') {
 5756              		.loc 1 2284 2 view .LVU1815
 5757 04ae 002A     		cmp	r2, #0
 5758 04b0 7FF413AF 		bne	.L555
 5759 04b4 22E7     		b	.L654
 5760              	.L672:
2288:src/display.c **** 	  } else {
 5761              		.loc 1 2288 6 is_stmt 1 view .LVU1816
2288:src/display.c **** 	  } else {
 5762              		.loc 1 2288 12 is_stmt 0 view .LVU1817
 5763 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5764              	.LVL625:
 5765              	.LBB426:
ARM GAS  /tmp/ccE2jV6G.s 			page 192


 5766              	.LBI417:
 364:src/display.c ****   if (sep == SEP_NONE)
 5767              		.loc 1 364 14 is_stmt 1 view .LVU1818
 5768              	.LBB420:
 365:src/display.c ****     return res;
 5769              		.loc 1 365 3 view .LVU1819
 365:src/display.c ****     return res;
 5770              		.loc 1 365 6 is_stmt 0 view .LVU1820
 5771 04ba 0029     		cmp	r1, #0
 5772 04bc F5D0     		beq	.L549
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5773              		.loc 1 367 3 is_stmt 1 view .LVU1821
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5774              		.loc 1 367 6 is_stmt 0 view .LVU1822
 5775 04be 002C     		cmp	r4, #0
 5776 04c0 00F0F281 		beq	.L551
 368:src/display.c ****     else *res++ = '.';
 5777              		.loc 1 368 5 is_stmt 1 view .LVU1823
 368:src/display.c ****     else *res++ = '.';
 5778              		.loc 1 368 8 is_stmt 0 view .LVU1824
 5779 04c4 0129     		cmp	r1, #1
 368:src/display.c ****     else *res++ = '.';
 5780              		.loc 1 368 27 is_stmt 1 view .LVU1825
 5781              	.LVL626:
 369:src/display.c ****   } else {
 5782              		.loc 1 369 10 view .LVU1826
 369:src/display.c ****   } else {
 5783              		.loc 1 369 17 is_stmt 0 view .LVU1827
 5784 04c6 18BF     		it	ne
 5785 04c8 2E22     		movne	r2, #46
 5786              	.LVL627:
 369:src/display.c ****   } else {
 5787              		.loc 1 369 17 view .LVU1828
 5788 04ca 04F8012B 		strb	r2, [r4], #1
 5789              	.LVL628:
 369:src/display.c ****   } else {
 5790              		.loc 1 369 17 view .LVU1829
 5791 04ce ECE7     		b	.L549
 5792              	.LVL629:
 5793              	.L553:
 369:src/display.c ****   } else {
 5794              		.loc 1 369 17 view .LVU1830
 5795              	.LBE420:
 5796              	.LBE426:
 5797              	.LBB427:
 5798              	.LBB425:
 406:src/display.c ****   return res;
 5799              		.loc 1 406 8 view .LVU1831
 5800 04d0 1146     		mov	r1, r2
 5801 04d2 3046     		mov	r0, r6
 5802 04d4 0193     		str	r3, [sp, #4]
 406:src/display.c ****   return res;
 5803              		.loc 1 406 8 is_stmt 1 view .LVU1832
 5804 04d6 FFF7FEFF 		bl	set_dig
 5805              	.LVL630:
 406:src/display.c ****   return res;
 5806              		.loc 1 406 8 is_stmt 0 view .LVU1833
ARM GAS  /tmp/ccE2jV6G.s 			page 193


 5807 04da 019B     		ldr	r3, [sp, #4]
 5808 04dc 08E7     		b	.L554
 5809              	.LVL631:
 5810              	.L674:
 406:src/display.c ****   return res;
 5811              		.loc 1 406 8 view .LVU1834
 5812              	.LBE425:
 5813              	.LBE427:
2307:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5814              		.loc 1 2307 21 discriminator 1 view .LVU1835
 5815 04de 002C     		cmp	r4, #0
 5816 04e0 7FF418AF 		bne	.L557
2308:src/display.c **** 	*display_digits = odig;
 5817              		.loc 1 2308 4 is_stmt 1 view .LVU1836
2308:src/display.c **** 	*display_digits = odig;
 5818              		.loc 1 2308 33 is_stmt 0 view .LVU1837
 5819 04e4 009B     		ldr	r3, [sp]
 5820 04e6 1868     		ldr	r0, [r3]
2308:src/display.c **** 	*display_digits = odig;
 5821              		.loc 1 2308 4 view .LVU1838
 5822 04e8 594B     		ldr	r3, .L681+12
2308:src/display.c **** 	*display_digits = odig;
 5823              		.loc 1 2308 33 view .LVU1839
 5824 04ea 0138     		subs	r0, r0, #1
2308:src/display.c **** 	*display_digits = odig;
 5825              		.loc 1 2308 4 view .LVU1840
 5826 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5827 04ee 2246     		mov	r2, r4
 5828 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5829 04f4 FFF7FEFF 		bl	set_decimal
 5830              	.LVL632:
 5831 04f8 0CE7     		b	.L557
 5832              	.L673:
2305:src/display.c **** #endif
 5833              		.loc 1 2305 4 view .LVU1841
 5834 04fa 2846     		mov	r0, r5
 5835 04fc 2246     		mov	r2, r4
 5836 04fe 0021     		movs	r1, #0
 5837 0500 0193     		str	r3, [sp, #4]
2305:src/display.c **** #endif
 5838              		.loc 1 2305 4 is_stmt 1 view .LVU1842
 5839 0502 FFF7FEFF 		bl	set_exp
 5840              	.LVL633:
 5841 0506 019B     		ldr	r3, [sp, #4]
 5842 0508 FFE6     		b	.L556
 5843              	.LVL634:
 5844              	.L583:
2227:src/display.c **** 	  case -1:
 5845              		.loc 1 2227 16 is_stmt 0 view .LVU1843
 5846 050a 0227     		movs	r7, #2
 5847 050c 4146     		mov	r1, r8
 5848              	.LVL635:
 5849              	.L540:
2236:src/display.c **** 	    odig++;
 5850              		.loc 1 2236 6 is_stmt 1 view .LVU1844
2236:src/display.c **** 	    odig++;
 5851              		.loc 1 2236 13 is_stmt 0 view .LVU1845
ARM GAS  /tmp/ccE2jV6G.s 			page 194


 5852 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5853              	.LVL636:
2236:src/display.c **** 	    odig++;
 5854              		.loc 1 2236 13 view .LVU1846
 5855 0512 01F8013B 		strb	r3, [r1], #1
 5856              	.LVL637:
2237:src/display.c **** 	    dd--;
 5857              		.loc 1 2237 6 is_stmt 1 view .LVU1847
2238:src/display.c **** 	    exp--;
 5858              		.loc 1 2238 6 view .LVU1848
2238:src/display.c **** 	    exp--;
 5859              		.loc 1 2238 8 is_stmt 0 view .LVU1849
 5860 0516 0AF1FF3A 		add	r10, r10, #-1
 5861              	.LVL638:
2239:src/display.c **** 	  case 0:
 5862              		.loc 1 2239 6 is_stmt 1 view .LVU1850
2239:src/display.c **** 	  case 0:
 5863              		.loc 1 2239 9 is_stmt 0 view .LVU1851
 5864 051a 013D     		subs	r5, r5, #1
 5865              	.LVL639:
2239:src/display.c **** 	  case 0:
 5866              		.loc 1 2239 9 view .LVU1852
 5867 051c A5E6     		b	.L501
 5868              	.LVL640:
 5869              	.L496:
2125:src/display.c **** 
 5870              		.loc 1 2125 2 is_stmt 1 view .LVU1853
2125:src/display.c **** 
 5871              		.loc 1 2125 45 view .LVU1854
2125:src/display.c **** 
 5872              		.loc 1 2125 2 is_stmt 0 view .LVU1855
 5873 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5874 0522 002A     		cmp	r2, #0
 5875 0524 7FF43CAE 		bne	.L559
 5876              	.LVL641:
 5877              	.L503:
2190:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5878              		.loc 1 2190 4 is_stmt 1 view .LVU1856
2191:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5879              		.loc 1 2191 4 view .LVU1857
2191:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5880              		.loc 1 2191 7 is_stmt 0 view .LVU1858
 5881 0528 002D     		cmp	r5, #0
 5882 052a C0F21081 		blt	.L523
2191:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5883              		.loc 1 2191 7 view .LVU1859
 5884 052e 6B1C     		adds	r3, r5, #1
2193:src/display.c **** 		*obp++ = ',';
 5885              		.loc 1 2193 31 view .LVU1860
 5886 0530 DFF818C1 		ldr	ip, .L681+8
 5887 0534 0293     		str	r3, [sp, #8]
 5888 0536 09EB0300 		add	r0, r9, r3
2127:src/display.c **** 	switch (mode) {
 5889              		.loc 1 2127 4 view .LVU1861
 5890 053a 4F46     		mov	r7, r9
1932:src/display.c **** 	int odig = 0;
 5891              		.loc 1 1932 15 view .LVU1862
ARM GAS  /tmp/ccE2jV6G.s 			page 195


 5892 053c 4146     		mov	r1, r8
 5893 053e 0394     		str	r4, [sp, #12]
 5894 0540 05E0     		b	.L524
 5895              	.LVL642:
 5896              	.L527:
2194:src/display.c **** 	      *obp++ = *p++;
 5897              		.loc 1 2194 3 is_stmt 1 view .LVU1863
2193:src/display.c **** 		*obp++ = ',';
 5898              		.loc 1 2193 18 is_stmt 0 view .LVU1864
 5899 0542 022A     		cmp	r2, #2
2194:src/display.c **** 	      *obp++ = *p++;
 5900              		.loc 1 2194 10 view .LVU1865
 5901 0544 05BF     		ittet	eq
 5902 0546 2C23     		moveq	r3, #44
 5903 0548 4B70     		strbeq	r3, [r1, #1]
2195:src/display.c **** 	      odig++;
 5904              		.loc 1 2195 12 view .LVU1866
 5905 054a 0131     		addne	r1, r1, #1
 5906              	.LVL643:
2194:src/display.c **** 	      *obp++ = *p++;
 5907              		.loc 1 2194 7 view .LVU1867
 5908 054c 0231     		addeq	r1, r1, #2
 5909              	.LVL644:
 5910              	.L524:
2195:src/display.c **** 	      odig++;
 5911              		.loc 1 2195 8 is_stmt 1 discriminator 2 view .LVU1868
2195:src/display.c **** 	      odig++;
 5912              		.loc 1 2195 15 is_stmt 0 discriminator 2 view .LVU1869
 5913 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5914              	.LVL645:
2193:src/display.c **** 		*obp++ = ',';
 5915              		.loc 1 2193 8 is_stmt 1 discriminator 2 view .LVU1870
2195:src/display.c **** 	      odig++;
 5916              		.loc 1 2195 15 is_stmt 0 discriminator 2 view .LVU1871
 5917 0552 0B70     		strb	r3, [r1]
2196:src/display.c **** 	    }
 5918              		.loc 1 2196 8 is_stmt 1 discriminator 2 view .LVU1872
 5919              	.LVL646:
2192:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5920              		.loc 1 2192 24 discriminator 2 view .LVU1873
2192:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5921              		.loc 1 2192 16 discriminator 2 view .LVU1874
2193:src/display.c **** 		*obp++ = ',';
 5922              		.loc 1 2193 31 is_stmt 0 discriminator 2 view .LVU1875
 5923 0554 A9EB0703 		sub	r3, r9, r7
 5924 0558 2B44     		add	r3, r3, r5
 5925 055a 8CFB0342 		smull	r4, r2, ip, r3
 5926 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5927 0562 02EB4202 		add	r2, r2, r2, lsl #1
2192:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5928              		.loc 1 2192 6 discriminator 2 view .LVU1876
 5929 0566 B842     		cmp	r0, r7
2193:src/display.c **** 		*obp++ = ',';
 5930              		.loc 1 2193 31 discriminator 2 view .LVU1877
 5931 0568 A3EB0202 		sub	r2, r3, r2
2192:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5932              		.loc 1 2192 6 discriminator 2 view .LVU1878
ARM GAS  /tmp/ccE2jV6G.s 			page 196


 5933 056c E9D1     		bne	.L527
2198:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5934              		.loc 1 2198 13 view .LVU1879
 5935 056e 2E23     		movs	r3, #46
2199:src/display.c **** 	      *obp++ = *p++;
 5936              		.loc 1 2199 6 view .LVU1880
 5937 0570 BAF1000F 		cmp	r10, #0
2198:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5938              		.loc 1 2198 13 view .LVU1881
 5939 0574 4B70     		strb	r3, [r1, #1]
 5940 0576 039C     		ldr	r4, [sp, #12]
 5941 0578 029F     		ldr	r7, [sp, #8]
 5942              	.LVL647:
2198:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5943              		.loc 1 2198 6 is_stmt 1 view .LVU1882
2198:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5944              		.loc 1 2198 10 is_stmt 0 view .LVU1883
 5945 057a 01F10203 		add	r3, r1, #2
 5946              	.LVL648:
2199:src/display.c **** 	      *obp++ = *p++;
 5947              		.loc 1 2199 6 is_stmt 1 view .LVU1884
2199:src/display.c **** 	      *obp++ = *p++;
 5948              		.loc 1 2199 16 view .LVU1885
2199:src/display.c **** 	      *obp++ = *p++;
 5949              		.loc 1 2199 6 is_stmt 0 view .LVU1886
 5950 057e 0CDD     		ble	.L528
 5951 0580 0131     		adds	r1, r1, #1
 5952 0582 00EB0A07 		add	r7, r0, r10
 5953              	.LVL649:
 5954              	.L529:
2200:src/display.c **** 	      odig++;
 5955              		.loc 1 2200 8 is_stmt 1 discriminator 4 view .LVU1887
2200:src/display.c **** 	      odig++;
 5956              		.loc 1 2200 15 is_stmt 0 discriminator 4 view .LVU1888
 5957 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5958              	.LVL650:
2200:src/display.c **** 	      odig++;
 5959              		.loc 1 2200 15 discriminator 4 view .LVU1889
 5960 058a 01F8012F 		strb	r2, [r1, #1]!
2201:src/display.c **** 	    }
 5961              		.loc 1 2201 8 is_stmt 1 discriminator 4 view .LVU1890
2199:src/display.c **** 	      *obp++ = *p++;
 5962              		.loc 1 2199 43 discriminator 4 view .LVU1891
2199:src/display.c **** 	      *obp++ = *p++;
 5963              		.loc 1 2199 16 discriminator 4 view .LVU1892
2199:src/display.c **** 	      *obp++ = *p++;
 5964              		.loc 1 2199 6 is_stmt 0 discriminator 4 view .LVU1893
 5965 058e 8742     		cmp	r7, r0
 5966 0590 F9D1     		bne	.L529
 5967 0592 029A     		ldr	r2, [sp, #8]
 5968 0594 5244     		add	r2, r2, r10
 5969 0596 5344     		add	r3, r3, r10
 5970              	.LVL651:
2199:src/display.c **** 	      *obp++ = *p++;
 5971              		.loc 1 2199 6 discriminator 4 view .LVU1894
 5972 0598 1746     		mov	r7, r2
 5973              	.LVL652:
ARM GAS  /tmp/ccE2jV6G.s 			page 197


 5974              	.L528:
2218:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5975              		.loc 1 2218 4 is_stmt 1 view .LVU1895
2218:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5976              		.loc 1 2218 7 is_stmt 0 view .LVU1896
 5977 059a 019A     		ldr	r2, [sp, #4]
 5978 059c 002A     		cmp	r2, #0
 5979 059e 40F0C480 		bne	.L534
1934:src/display.c **** 	int j;
 5980              		.loc 1 1934 6 view .LVU1897
 5981 05a2 9346     		mov	fp, r2
 5982 05a4 7CE6     		b	.L512
 5983              	.LVL653:
 5984              	.L660:
1995:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5985              		.loc 1 1995 4 is_stmt 1 view .LVU1898
 5986 05a6 2B4A     		ldr	r2, .L681+16
 5987 05a8 3146     		mov	r1, r6
 5988 05aa 3046     		mov	r0, r6
 5989 05ac FFF7FEFF 		bl	decNumberNormalize
 5990              	.LVL654:
1996:src/display.c **** 	  z->exponent = 0;
 5991              		.loc 1 1996 4 view .LVU1899
1996:src/display.c **** 	  z->exponent = 0;
 5992              		.loc 1 1996 22 is_stmt 0 view .LVU1900
 5993 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5994 05b4 03EB020A 		add	r10, r3, r2
1996:src/display.c **** 	  z->exponent = 0;
 5995              		.loc 1 1996 8 view .LVU1901
 5996 05b8 0AF1FF33 		add	r3, r10, #-1
1997:src/display.c **** 	}
 5997              		.loc 1 1997 16 view .LVU1902
 5998 05bc C6F804B0 		str	fp, [r6, #4]
1996:src/display.c **** 	  z->exponent = 0;
 5999              		.loc 1 1996 8 view .LVU1903
 6000 05c0 0193     		str	r3, [sp, #4]
 6001              	.LVL655:
1997:src/display.c **** 	}
 6002              		.loc 1 1997 4 is_stmt 1 view .LVU1904
 6003 05c2 42E5     		b	.L451
 6004              	.LVL656:
 6005              	.L666:
2069:src/display.c **** 	for (; *q == '0'; q++);
 6006              		.loc 1 2069 4 view .LVU1905
2069:src/display.c **** 	for (; *q == '0'; q++);
 6007              		.loc 1 2069 4 is_stmt 0 view .LVU1906
 6008 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1952:src/display.c **** 	int trimzeros = 0;
 6009              		.loc 1 1952 6 view .LVU1907
 6010 05c6 4FF0000E 		mov	lr, #0
2069:src/display.c **** 	for (; *q == '0'; q++);
 6011              		.loc 1 2069 5 view .LVU1908
 6012 05ca 0136     		adds	r6, r6, #1
 6013              	.LVL657:
2069:src/display.c **** 	for (; *q == '0'; q++);
 6014              		.loc 1 2069 5 view .LVU1909
 6015 05cc 8EE5     		b	.L473
ARM GAS  /tmp/ccE2jV6G.s 			page 198


 6016              	.LVL658:
 6017              	.L668:
2085:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6018              		.loc 1 2085 6 is_stmt 1 view .LVU1910
2086:src/display.c **** 	      *p++ = *q++;
 6019              		.loc 1 2086 13 is_stmt 0 view .LVU1911
 6020 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2086:src/display.c **** 	      *p++ = *q++;
 6021              		.loc 1 2086 12 view .LVU1912
 6022 05d0 A3F13002 		sub	r2, r3, #48
 6023 05d4 092A     		cmp	r2, #9
2085:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6024              		.loc 1 2085 7 view .LVU1913
 6025 05d6 06F10106 		add	r6, r6, #1
 6026              	.LVL659:
2086:src/display.c **** 	      *p++ = *q++;
 6027              		.loc 1 2086 6 is_stmt 1 view .LVU1914
2086:src/display.c **** 	      *p++ = *q++;
 6028              		.loc 1 2086 12 view .LVU1915
 6029 05da 3FF6B0AD 		bhi	.L478
 6030              	.LVL660:
 6031              	.L483:
2087:src/display.c **** 	  }
 6032              		.loc 1 2087 8 view .LVU1916
2087:src/display.c **** 	  }
 6033              		.loc 1 2087 13 is_stmt 0 view .LVU1917
 6034 05de 01F8013B 		strb	r3, [r1], #1
 6035              	.LVL661:
2086:src/display.c **** 	      *p++ = *q++;
 6036              		.loc 1 2086 12 is_stmt 1 view .LVU1918
2086:src/display.c **** 	      *p++ = *q++;
 6037              		.loc 1 2086 13 is_stmt 0 view .LVU1919
 6038 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2086:src/display.c **** 	      *p++ = *q++;
 6039              		.loc 1 2086 12 view .LVU1920
 6040 05e6 A3F13002 		sub	r2, r3, #48
 6041 05ea 092A     		cmp	r2, #9
 6042 05ec F7D9     		bls	.L483
 6043 05ee A6E5     		b	.L478
 6044              	.LVL662:
 6045              	.L661:
2003:src/display.c **** 	    x[0] = '-';
 6046              		.loc 1 2003 34 discriminator 1 view .LVU1921
 6047 05f0 6B20     		movs	r0, #107
 6048 05f2 FFF7FEFF 		bl	get_user_flag
 6049              	.LVL663:
2003:src/display.c **** 	    x[0] = '-';
 6050              		.loc 1 2003 31 discriminator 1 view .LVU1922
 6051 05f6 0028     		cmp	r0, #0
 6052 05f8 3FF439AD 		beq	.L453
2004:src/display.c **** 	    x[1] = '0';
 6053              		.loc 1 2004 6 is_stmt 1 view .LVU1923
2005:src/display.c **** 	  } else
 6054              		.loc 1 2005 6 view .LVU1924
2004:src/display.c **** 	    x[1] = '0';
 6055              		.loc 1 2004 11 is_stmt 0 view .LVU1925
 6056 05fc 43F22D03 		movw	r3, #12333
ARM GAS  /tmp/ccE2jV6G.s 			page 199


 6057 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
2005:src/display.c **** 	  } else
 6058              		.loc 1 2005 11 view .LVU1926
 6059 0604 36E5     		b	.L454
 6060              	.LVL664:
 6061              	.L664:
2062:src/display.c **** 	  CLR_MANT_SIGN;
 6062              		.loc 1 2062 4 is_stmt 1 view .LVU1927
 6063              	.LBB428:
 6064              	.LBI428:
 311:src/display.c **** {
 6065              		.loc 1 311 13 view .LVU1928
 6066              	.LBB429:
 313:src/display.c ****   clr_dot(EXP_SIGN);
 6067              		.loc 1 313 3 view .LVU1929
 314:src/display.c **** }
 6068              		.loc 1 314 3 view .LVU1930
 313:src/display.c ****   clr_dot(EXP_SIGN);
 6069              		.loc 1 313 27 is_stmt 0 view .LVU1931
 6070 0606 144B     		ldr	r3, .L681+20
 6071 0608 2022     		movs	r2, #32
 314:src/display.c **** }
 6072              		.loc 1 314 3 view .LVU1932
 6073 060a 8220     		movs	r0, #130
 313:src/display.c ****   clr_dot(EXP_SIGN);
 6074              		.loc 1 313 27 view .LVU1933
 6075 060c 1A70     		strb	r2, [r3]
 314:src/display.c **** }
 6076              		.loc 1 314 3 view .LVU1934
 6077 060e FFF7FEFF 		bl	clr_dot
 6078              	.LVL665:
 6079              	.LBE429:
 6080              	.LBE428:
2063:src/display.c **** 	}
 6081              		.loc 1 2063 4 is_stmt 1 view .LVU1935
 6082              	.LBB430:
 6083              	.LBI430:
 299:src/display.c **** {
 6084              		.loc 1 299 13 view .LVU1936
 6085              	.LBB431:
 301:src/display.c ****   clr_dot(MANT_SIGN);
 6086              		.loc 1 301 3 view .LVU1937
 301:src/display.c ****   clr_dot(MANT_SIGN);
 6087              		.loc 1 301 25 is_stmt 0 view .LVU1938
 6088 0612 124B     		ldr	r3, .L681+24
 6089 0614 2022     		movs	r2, #32
 302:src/display.c **** }
 6090              		.loc 1 302 3 view .LVU1939
 6091 0616 8120     		movs	r0, #129
 301:src/display.c ****   clr_dot(MANT_SIGN);
 6092              		.loc 1 301 25 view .LVU1940
 6093 0618 1A70     		strb	r2, [r3]
 302:src/display.c **** }
 6094              		.loc 1 302 3 is_stmt 1 view .LVU1941
 6095 061a FFF7FEFF 		bl	clr_dot
 6096              	.LVL666:
 303:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 200


 6097              		.loc 1 303 1 is_stmt 0 view .LVU1942
 6098 061e 5CE5     		b	.L471
 6099              	.LVL667:
 6100              	.L544:
 303:src/display.c **** 
 6101              		.loc 1 303 1 view .LVU1943
 6102              	.LBE431:
 6103              	.LBE430:
2278:src/display.c **** 	      SET_MANT_SIGN;
 6104              		.loc 1 2278 6 is_stmt 1 view .LVU1944
 6105 0620 0193     		str	r3, [sp, #4]
2278:src/display.c **** 	      SET_MANT_SIGN;
 6106              		.loc 1 2278 9 is_stmt 0 view .LVU1945
 6107 0622 002E     		cmp	r6, #0
 6108 0624 40F00281 		bne	.L547
2279:src/display.c **** 	    else
 6109              		.loc 1 2279 8 is_stmt 1 view .LVU1946
 6110              	.LBB432:
 6111              	.LBI432:
 293:src/display.c **** {
 6112              		.loc 1 293 13 view .LVU1947
 6113              	.LBB433:
 295:src/display.c ****   set_dot(MANT_SIGN);
 6114              		.loc 1 295 3 view .LVU1948
 295:src/display.c ****   set_dot(MANT_SIGN);
 6115              		.loc 1 295 25 is_stmt 0 view .LVU1949
 6116 0628 0C4A     		ldr	r2, .L681+24
 6117 062a 2D21     		movs	r1, #45
 296:src/display.c **** }
 6118              		.loc 1 296 3 view .LVU1950
 6119 062c 8120     		movs	r0, #129
 295:src/display.c ****   set_dot(MANT_SIGN);
 6120              		.loc 1 295 25 view .LVU1951
 6121 062e 1170     		strb	r1, [r2]
 296:src/display.c **** }
 6122              		.loc 1 296 3 is_stmt 1 view .LVU1952
 6123 0630 FFF7FEFF 		bl	set_dot
 6124              	.LVL668:
 296:src/display.c **** }
 6125              		.loc 1 296 3 is_stmt 0 view .LVU1953
 6126              	.LBE433:
 6127              	.LBE432:
2284:src/display.c **** 	  if (c == '.') {
 6128              		.loc 1 2284 12 is_stmt 1 view .LVU1954
2284:src/display.c **** 	  if (c == '.') {
 6129              		.loc 1 2284 18 is_stmt 0 view .LVU1955
 6130 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6131              	.LVL669:
2284:src/display.c **** 	  if (c == '.') {
 6132              		.loc 1 2284 2 view .LVU1956
 6133 0638 019B     		ldr	r3, [sp, #4]
 6134 063a 002A     		cmp	r2, #0
 6135 063c 7FF446AE 		bne	.L546
 6136 0640 5FE6     		b	.L545
 6137              	.L682:
 6138 0642 00BF     		.align	2
 6139              	.L681:
ARM GAS  /tmp/ccE2jV6G.s 			page 201


 6140 0644 00000000 		.word	StateWhileOn
 6141 0648 00000000 		.word	main_ram
 6142 064c 56555555 		.word	1431655766
 6143 0650 00000000 		.word	.LANCHOR1
 6144 0654 00000000 		.word	Ctx
 6145 0658 00000000 		.word	LastDisplayedExponent
 6146 065c 00000000 		.word	LastDisplayedNumber
 6147              	.LVL670:
 6148              	.L662:
2012:src/display.c **** 	  return;
 6149              		.loc 1 2012 4 is_stmt 1 view .LVU1957
 6150              	.LBB434:
 6151              	.LBI434:
1800:src/display.c **** 	const int dbl = is_dblmode();
 6152              		.loc 1 1800 19 view .LVU1958
 6153              	.LBB435:
1801:src/display.c **** 	char *p;
 6154              		.loc 1 1801 2 view .LVU1959
1801:src/display.c **** 	char *p;
 6155              		.loc 1 1801 18 is_stmt 0 view .LVU1960
 6156 0660 FFF7FEFF 		bl	is_dblmode
 6157              	.LVL671:
1817:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6158              		.loc 1 1817 5 view .LVU1961
 6159 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6160 0668 2D2B     		cmp	r3, #45
1801:src/display.c **** 	char *p;
 6161              		.loc 1 1801 18 view .LVU1962
 6162 066a 0446     		mov	r4, r0
 6163              	.LVL672:
1802:src/display.c **** 	int i, j;
 6164              		.loc 1 1802 2 is_stmt 1 view .LVU1963
1803:src/display.c **** 	char *upper_str;
 6165              		.loc 1 1803 2 view .LVU1964
1804:src/display.c **** 	enum separator_modes separator_mode;
 6166              		.loc 1 1804 2 view .LVU1965
1805:src/display.c **** 	char decimal_mark;
 6167              		.loc 1 1805 2 view .LVU1966
1806:src/display.c **** 	char thousands_sep;
 6168              		.loc 1 1806 2 view .LVU1967
1807:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6169              		.loc 1 1807 2 view .LVU1968
1813:src/display.c **** #endif
 6170              		.loc 1 1813 2 view .LVU1969
1815:src/display.c **** 
 6171              		.loc 1 1815 2 view .LVU1970
1817:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6172              		.loc 1 1817 2 view .LVU1971
1817:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6173              		.loc 1 1817 5 is_stmt 0 view .LVU1972
 6174 066c 00F02A81 		beq	.L677
1830:src/display.c **** 
 6175              		.loc 1 1830 16 view .LVU1973
 6176 0670 0026     		movs	r6, #0
 6177              	.LVL673:
 6178              	.L456:
1832:src/display.c **** 	xset(p, '0', 34 - (p - x));
ARM GAS  /tmp/ccE2jV6G.s 			page 202


 6179              		.loc 1 1832 2 is_stmt 1 view .LVU1974
1832:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6180              		.loc 1 1832 6 is_stmt 0 view .LVU1975
 6181 0672 0021     		movs	r1, #0
 6182 0674 4046     		mov	r0, r8
 6183 0676 FFF7FEFF 		bl	find_char
 6184              	.LVL674:
1833:src/display.c **** 
 6185              		.loc 1 1833 2 is_stmt 1 view .LVU1976
1833:src/display.c **** 
 6186              		.loc 1 1833 23 is_stmt 0 view .LVU1977
 6187 067a A0EB0802 		sub	r2, r0, r8
1833:src/display.c **** 
 6188              		.loc 1 1833 2 view .LVU1978
 6189 067e C2F12202 		rsb	r2, r2, #34
 6190 0682 3021     		movs	r1, #48
 6191 0684 FFF7FEFF 		bl	xset
 6192              	.LVL675:
1835:src/display.c **** 	  separator_mode = SEP_COMMA;
 6193              		.loc 1 1835 2 is_stmt 1 view .LVU1979
1835:src/display.c **** 	  separator_mode = SEP_COMMA;
 6194              		.loc 1 1835 18 is_stmt 0 view .LVU1980
 6195 0688 B14A     		ldr	r2, .L683
1846:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6196              		.loc 1 1846 6 view .LVU1981
 6197 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1835:src/display.c **** 	  separator_mode = SEP_COMMA;
 6198              		.loc 1 1835 5 view .LVU1982
 6199 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1843:src/display.c **** 	}
 6200              		.loc 1 1843 18 view .LVU1983
 6201 0690 002A     		cmp	r2, #0
 6202 0692 15BF     		itete	ne
 6203 0694 4FF0020A 		movne	r10, #2
 6204 0698 2C27     		moveq	r7, #44
 6205 069a 2E27     		movne	r7, #46
 6206              	.LVL676:
1843:src/display.c **** 	}
 6207              		.loc 1 1843 18 view .LVU1984
 6208 069c 2E25     		moveq	r5, #46
 6209 069e 18BF     		it	ne
 6210 06a0 2C25     		movne	r5, #44
 6211              	.LVL677:
1846:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6212              		.loc 1 1846 2 is_stmt 1 view .LVU1985
1846:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6213              		.loc 1 1846 5 is_stmt 0 view .LVU1986
 6214 06a2 13F0380F 		tst	r3, #56
 6215 06a6 40F0C880 		bne	.L678
1873:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6216              		.loc 1 1873 4 is_stmt 1 view .LVU1987
 6217              	.LVL678:
1874:src/display.c **** 	  x[1] = decimal_mark;
 6218              		.loc 1 1874 4 view .LVU1988
 6219 06aa 1022     		movs	r2, #16
 6220 06ac 08F10101 		add	r1, r8, #1
 6221 06b0 08F10200 		add	r0, r8, #2
ARM GAS  /tmp/ccE2jV6G.s 			page 203


 6222 06b4 FFF7FEFF 		bl	xcopy
 6223              	.LVL679:
1875:src/display.c **** 	  if (grouping) {
 6224              		.loc 1 1875 4 view .LVU1989
1877:src/display.c **** 	    x[5] = thousands_sep;
 6225              		.loc 1 1877 6 is_stmt 0 view .LVU1990
 6226 06b8 0D22     		movs	r2, #13
 6227 06ba 08F10501 		add	r1, r8, #5
 6228 06be 08F10600 		add	r0, r8, #6
1875:src/display.c **** 	  if (grouping) {
 6229              		.loc 1 1875 9 view .LVU1991
 6230 06c2 88F80150 		strb	r5, [r8, #1]
1876:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6231              		.loc 1 1876 4 is_stmt 1 view .LVU1992
1877:src/display.c **** 	    x[5] = thousands_sep;
 6232              		.loc 1 1877 6 view .LVU1993
 6233 06c6 FFF7FEFF 		bl	xcopy
 6234              	.LVL680:
1878:src/display.c **** 	    x += 9;
 6235              		.loc 1 1878 6 view .LVU1994
1879:src/display.c **** 	  }
 6236              		.loc 1 1879 8 is_stmt 0 view .LVU1995
 6237 06ca 08F10905 		add	r5, r8, #9
 6238              	.LVL681:
1878:src/display.c **** 	    x += 9;
 6239              		.loc 1 1878 11 view .LVU1996
 6240 06ce 88F80570 		strb	r7, [r8, #5]
1879:src/display.c **** 	  }
 6241              		.loc 1 1879 6 is_stmt 1 view .LVU1997
 6242              	.LVL682:
1882:src/display.c **** 	    if (exp < 0) {
 6243              		.loc 1 1882 4 view .LVU1998
1882:src/display.c **** 	    if (exp < 0) {
 6244              		.loc 1 1882 7 is_stmt 0 view .LVU1999
 6245 06d2 002C     		cmp	r4, #0
 6246 06d4 00F0F380 		beq	.L460
1883:src/display.c **** 	      x[9] = '-';
 6247              		.loc 1 1883 6 is_stmt 1 view .LVU2000
1883:src/display.c **** 	      x[9] = '-';
 6248              		.loc 1 1883 9 is_stmt 0 view .LVU2001
 6249 06d8 019B     		ldr	r3, [sp, #4]
1891:src/display.c **** 	  }
 6250              		.loc 1 1891 18 view .LVU2002
 6251 06da 9E49     		ldr	r1, .L683+4
1883:src/display.c **** 	      x[9] = '-';
 6252              		.loc 1 1883 9 view .LVU2003
 6253 06dc 002B     		cmp	r3, #0
1884:src/display.c **** 	      exp = -exp;
 6254              		.loc 1 1884 8 is_stmt 1 view .LVU2004
1885:src/display.c **** 	    }
 6255              		.loc 1 1885 8 view .LVU2005
1885:src/display.c **** 	    }
 6256              		.loc 1 1885 12 is_stmt 0 view .LVU2006
 6257 06de BCBF     		itt	lt
 6258 06e0 5B42     		rsblt	r3, r3, #0
 6259 06e2 0193     		strlt	r3, [sp, #4]
 6260              	.LVL683:
ARM GAS  /tmp/ccE2jV6G.s 			page 204


1889:src/display.c **** 	    x[10] = '0' + j;
 6261              		.loc 1 1889 8 view .LVU2007
 6262 06e4 0198     		ldr	r0, [sp, #4]
 6263 06e6 9C4B     		ldr	r3, .L683+8
1884:src/display.c **** 	      exp = -exp;
 6264              		.loc 1 1884 13 view .LVU2008
 6265 06e8 B4BF     		ite	lt
 6266 06ea 2D22     		movlt	r2, #45
1888:src/display.c **** 	    j = exp / 1000;
 6267              		.loc 1 1888 13 view .LVU2009
 6268 06ec 2022     		movge	r2, #32
 6269 06ee 88F81220 		strb	r2, [r8, #18]
1889:src/display.c **** 	    x[10] = '0' + j;
 6270              		.loc 1 1889 6 is_stmt 1 view .LVU2010
1889:src/display.c **** 	    x[10] = '0' + j;
 6271              		.loc 1 1889 8 is_stmt 0 view .LVU2011
 6272 06f2 0246     		mov	r2, r0
 6273 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6274 06f8 9B09     		lsrs	r3, r3, #6
 6275              	.LVL684:
1890:src/display.c **** 	    exp -= 1000 * j;
 6276              		.loc 1 1890 6 is_stmt 1 view .LVU2012
1890:src/display.c **** 	    exp -= 1000 * j;
 6277              		.loc 1 1890 18 is_stmt 0 view .LVU2013
 6278 06fa 03F13002 		add	r2, r3, #48
1891:src/display.c **** 	  }
 6279              		.loc 1 1891 10 view .LVU2014
 6280 06fe 01FB0303 		mla	r3, r1, r3, r0
 6281              	.LVL685:
1891:src/display.c **** 	  }
 6282              		.loc 1 1891 10 view .LVU2015
 6283 0702 0193     		str	r3, [sp, #4]
 6284              	.LVL686:
1890:src/display.c **** 	    exp -= 1000 * j;
 6285              		.loc 1 1890 12 view .LVU2016
 6286 0704 88F81320 		strb	r2, [r8, #19]
1891:src/display.c **** 	  }
 6287              		.loc 1 1891 6 is_stmt 1 view .LVU2017
 6288              	.LVL687:
 6289              	.L462:
1897:src/display.c **** 	  *x = 0;
 6290              		.loc 1 1897 4 view .LVU2018
 6291 0708 0B22     		movs	r2, #11
 6292 070a 2946     		mov	r1, r5
 6293 070c 08F10A00 		add	r0, r8, #10
 6294 0710 FFF7FEFF 		bl	xcopy
 6295              	.LVL688:
1898:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6296              		.loc 1 1898 4 view .LVU2019
1898:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6297              		.loc 1 1898 7 is_stmt 0 view .LVU2020
 6298 0714 0022     		movs	r2, #0
1899:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6299              		.loc 1 1899 4 view .LVU2021
 6300 0716 0198     		ldr	r0, [sp, #4]
1898:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6301              		.loc 1 1898 7 view .LVU2022
ARM GAS  /tmp/ccE2jV6G.s 			page 205


 6302 0718 88F80920 		strb	r2, [r8, #9]
1899:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6303              		.loc 1 1899 4 is_stmt 1 view .LVU2023
 6304 071c 0121     		movs	r1, #1
 6305 071e FFF7FEFF 		bl	set_exp
 6306              	.LVL689:
1900:src/display.c **** 	}
 6307              		.loc 1 1900 4 view .LVU2024
1900:src/display.c **** 	}
 6308              		.loc 1 1900 4 is_stmt 0 view .LVU2025
 6309 0722 A8EB0606 		sub	r6, r8, r6
 6310              	.LVL690:
1900:src/display.c **** 	}
 6311              		.loc 1 1900 6 view .LVU2026
 6312 0726 0924     		movs	r4, #9
 6313              	.LVL691:
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6314              		.loc 1 1903 11 is_stmt 1 view .LVU2027
 6315 0728 9AE0     		b	.L463
 6316              	.LVL692:
 6317              	.L534:
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6318              		.loc 1 1903 11 is_stmt 0 view .LVU2028
 6319              	.LBE435:
 6320              	.LBE434:
2219:src/display.c **** 	      obp--;
 6321              		.loc 1 2219 12 is_stmt 1 view .LVU2029
 6322 072a 4345     		cmp	r3, r8
 6323 072c 88BF     		it	hi
 6324 072e 1A46     		movhi	r2, r3
 6325 0730 7FF6B6AD 		bls	.L512
 6326              	.L536:
2220:src/display.c **** 	      odig--;
 6327              		.loc 1 2220 8 discriminator 1 view .LVU2030
 6328 0734 1346     		mov	r3, r2
 6329              	.LVL693:
2220:src/display.c **** 	      odig--;
 6330              		.loc 1 2220 8 is_stmt 0 discriminator 1 view .LVU2031
 6331 0736 013A     		subs	r2, r2, #1
 6332              	.LVL694:
2221:src/display.c **** 	    }
 6333              		.loc 1 2221 8 is_stmt 1 discriminator 1 view .LVU2032
2219:src/display.c **** 	      obp--;
 6334              		.loc 1 2219 21 is_stmt 0 discriminator 1 view .LVU2033
 6335 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6336 073c 3029     		cmp	r1, #48
 6337 073e 7FF4AFAD 		bne	.L512
2219:src/display.c **** 	      obp--;
 6338              		.loc 1 2219 12 view .LVU2034
 6339 0742 9045     		cmp	r8, r2
2221:src/display.c **** 	    }
 6340              		.loc 1 2221 12 view .LVU2035
 6341 0744 07F1FF37 		add	r7, r7, #-1
 6342              	.LVL695:
2219:src/display.c **** 	      obp--;
 6343              		.loc 1 2219 12 is_stmt 1 view .LVU2036
 6344 0748 F4D1     		bne	.L536
ARM GAS  /tmp/ccE2jV6G.s 			page 206


 6345 074a 4346     		mov	r3, r8
 6346 074c A8E5     		b	.L512
 6347              	.LVL696:
 6348              	.L523:
2204:src/display.c **** 	    odig++;
 6349              		.loc 1 2204 6 view .LVU2037
2205:src/display.c **** 	    *obp++ = '.';
 6350              		.loc 1 2205 6 view .LVU2038
2206:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6351              		.loc 1 2206 6 view .LVU2039
2204:src/display.c **** 	    odig++;
 6352              		.loc 1 2204 13 is_stmt 0 view .LVU2040
 6353 074e 42F63063 		movw	r3, #11824
 6354 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2207:src/display.c **** 	      *obp++ = '0';
 6355              		.loc 1 2207 6 is_stmt 1 view .LVU2041
 6356              	.LVL697:
2207:src/display.c **** 	      *obp++ = '0';
 6357              		.loc 1 2207 20 view .LVU2042
2207:src/display.c **** 	      *obp++ = '0';
 6358              		.loc 1 2207 6 is_stmt 0 view .LVU2043
 6359 0756 6B1C     		adds	r3, r5, #1
 6360              	.LVL698:
2207:src/display.c **** 	      *obp++ = '0';
 6361              		.loc 1 2207 6 view .LVU2044
 6362 0758 00F0F280 		beq	.L581
 6363 075c C5F10101 		rsb	r1, r5, #1
2206:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6364              		.loc 1 2206 10 view .LVU2045
 6365 0760 0DF11603 		add	r3, sp, #22
 6366              	.LVL699:
2206:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6367              		.loc 1 2206 10 view .LVU2046
 6368 0764 4144     		add	r1, r1, r8
 6369 0766 1A46     		mov	r2, r3
2208:src/display.c **** 	      odig++;
 6370              		.loc 1 2208 15 view .LVU2047
 6371 0768 3020     		movs	r0, #48
 6372              	.LVL700:
 6373              	.L532:
2208:src/display.c **** 	      odig++;
 6374              		.loc 1 2208 8 is_stmt 1 discriminator 3 view .LVU2048
2208:src/display.c **** 	      odig++;
 6375              		.loc 1 2208 15 is_stmt 0 discriminator 3 view .LVU2049
 6376 076a 02F8010B 		strb	r0, [r2], #1
 6377              	.LVL701:
2209:src/display.c **** 	      dd--;
 6378              		.loc 1 2209 8 is_stmt 1 discriminator 3 view .LVU2050
2210:src/display.c **** 	    }
 6379              		.loc 1 2210 8 discriminator 3 view .LVU2051
2207:src/display.c **** 	      *obp++ = '0';
 6380              		.loc 1 2207 25 discriminator 3 view .LVU2052
2207:src/display.c **** 	      *obp++ = '0';
 6381              		.loc 1 2207 20 discriminator 3 view .LVU2053
2207:src/display.c **** 	      *obp++ = '0';
 6382              		.loc 1 2207 6 is_stmt 0 discriminator 3 view .LVU2054
 6383 076e 8A42     		cmp	r2, r1
ARM GAS  /tmp/ccE2jV6G.s 			page 207


 6384 0770 FBD1     		bne	.L532
 6385 0772 AA44     		add	r10, r10, r5
 6386 0774 EA43     		mvns	r2, r5
 6387              	.LVL702:
2207:src/display.c **** 	      *obp++ = '0';
 6388              		.loc 1 2207 6 discriminator 3 view .LVU2055
 6389 0776 0AF1010A 		add	r10, r10, #1
 6390 077a 1344     		add	r3, r3, r2
 6391 077c 6F42     		rsbs	r7, r5, #0
 6392              	.L531:
 6393              	.LVL703:
2212:src/display.c **** 	      *obp++ = *p++;
 6394              		.loc 1 2212 12 is_stmt 1 view .LVU2056
 6395 077e BAF1000F 		cmp	r10, #0
2212:src/display.c **** 	      *obp++ = *p++;
 6396              		.loc 1 2212 15 is_stmt 0 view .LVU2057
 6397 0782 0AF1FF32 		add	r2, r10, #-1
 6398              	.LVL704:
2212:src/display.c **** 	      *obp++ = *p++;
 6399              		.loc 1 2212 12 view .LVU2058
 6400 0786 7FF708AF 		ble	.L528
 6401 078a 9A44     		add	r10, r10, r3
 6402 078c 0AF1FF30 		add	r0, r10, #-1
 6403 0790 013B     		subs	r3, r3, #1
 6404              	.LVL705:
 6405              	.L533:
2213:src/display.c **** 	      odig++;
 6406              		.loc 1 2213 8 is_stmt 1 view .LVU2059
2213:src/display.c **** 	      odig++;
 6407              		.loc 1 2213 15 is_stmt 0 view .LVU2060
 6408 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6409              	.LVL706:
2213:src/display.c **** 	      odig++;
 6410              		.loc 1 2213 15 view .LVU2061
 6411 0796 03F8011F 		strb	r1, [r3, #1]!
2214:src/display.c **** 	    }
 6412              		.loc 1 2214 8 is_stmt 1 view .LVU2062
2212:src/display.c **** 	      *obp++ = *p++;
 6413              		.loc 1 2212 12 view .LVU2063
2212:src/display.c **** 	      *obp++ = *p++;
 6414              		.loc 1 2212 12 is_stmt 0 view .LVU2064
 6415 079a 8342     		cmp	r3, r0
 6416 079c F9D1     		bne	.L533
 6417              	.LVL707:
2212:src/display.c **** 	      *obp++ = *p++;
 6418              		.loc 1 2212 12 view .LVU2065
 6419 079e 0137     		adds	r7, r7, #1
 6420 07a0 1744     		add	r7, r7, r2
 6421 07a2 5346     		mov	r3, r10
 6422 07a4 F9E6     		b	.L528
 6423              	.LVL708:
 6424              	.L538:
2230:src/display.c **** 	    odig++;
 6425              		.loc 1 2230 6 is_stmt 1 view .LVU2066
2230:src/display.c **** 	    odig++;
 6426              		.loc 1 2230 13 is_stmt 0 view .LVU2067
 6427 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
ARM GAS  /tmp/ccE2jV6G.s 			page 208


 6428 07aa 8DF81430 		strb	r3, [sp, #20]
2231:src/display.c **** 	    dd--;
 6429              		.loc 1 2231 6 is_stmt 1 view .LVU2068
 6430              	.LVL709:
2232:src/display.c **** 	    exp--;
 6431              		.loc 1 2232 6 view .LVU2069
2232:src/display.c **** 	    exp--;
 6432              		.loc 1 2232 8 is_stmt 0 view .LVU2070
 6433 07ae 0AF1FF3A 		add	r10, r10, #-1
 6434              	.LVL710:
2233:src/display.c **** 	  case -2:
 6435              		.loc 1 2233 6 is_stmt 1 view .LVU2071
2233:src/display.c **** 	  case -2:
 6436              		.loc 1 2233 9 is_stmt 0 view .LVU2072
 6437 07b2 013D     		subs	r5, r5, #1
 6438              	.LVL711:
2233:src/display.c **** 	  case -2:
 6439              		.loc 1 2233 9 view .LVU2073
 6440 07b4 0327     		movs	r7, #3
2230:src/display.c **** 	    odig++;
 6441              		.loc 1 2230 17 view .LVU2074
 6442 07b6 0DF14909 		add	r9, sp, #73
 6443              	.LVL712:
2230:src/display.c **** 	    odig++;
 6444              		.loc 1 2230 10 view .LVU2075
 6445 07ba 0DF11501 		add	r1, sp, #21
 6446              	.LVL713:
2230:src/display.c **** 	    odig++;
 6447              		.loc 1 2230 10 view .LVU2076
 6448 07be A6E6     		b	.L540
 6449              	.LVL714:
 6450              	.L486:
2095:src/display.c **** 	    /* We might have push the fixed decimals off the
 6451              		.loc 1 2095 6 is_stmt 1 view .LVU2077
2099:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6452              		.loc 1 2099 6 view .LVU2078
2099:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6453              		.loc 1 2099 23 is_stmt 0 view .LVU2079
 6454 07c0 05EB0A03 		add	r3, r5, r10
2099:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6455              		.loc 1 2099 9 view .LVU2080
 6456 07c4 9E42     		cmp	r6, r3
2100:src/display.c **** 	  }
 6457              		.loc 1 2100 8 is_stmt 1 view .LVU2081
2100:src/display.c **** 	  }
 6458              		.loc 1 2100 30 is_stmt 0 view .LVU2082
 6459 07c6 DCBF     		itt	le
 6460 07c8 06F1FF3A 		addle	r10, r6, #-1
 6461              	.LVL715:
2100:src/display.c **** 	  }
 6462              		.loc 1 2100 11 view .LVU2083
 6463 07cc AAEB050A 		suble	r10, r10, r5
 6464              	.LVL716:
2100:src/display.c **** 	  }
 6465              		.loc 1 2100 11 view .LVU2084
 6466 07d0 2A46     		mov	r2, r5
 6467 07d2 BAE4     		b	.L484
ARM GAS  /tmp/ccE2jV6G.s 			page 209


 6468              	.LVL717:
 6469              	.L578:
2136:src/display.c **** 	    case -1:
 6470              		.loc 1 2136 24 view .LVU2085
 6471 07d4 0227     		movs	r7, #2
 6472 07d6 4046     		mov	r0, r8
 6473              	.LVL718:
 6474              	.L511:
2145:src/display.c **** 	      odig++;
 6475              		.loc 1 2145 8 is_stmt 1 view .LVU2086
2145:src/display.c **** 	      odig++;
 6476              		.loc 1 2145 15 is_stmt 0 view .LVU2087
 6477 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6478              	.LVL719:
2145:src/display.c **** 	      odig++;
 6479              		.loc 1 2145 15 view .LVU2088
 6480 07dc 00F8013B 		strb	r3, [r0], #1
 6481              	.LVL720:
2146:src/display.c **** 	      dd--;
 6482              		.loc 1 2146 8 is_stmt 1 view .LVU2089
2147:src/display.c **** 	      exp--;
 6483              		.loc 1 2147 8 view .LVU2090
2148:src/display.c **** 	    case 0:
 6484              		.loc 1 2148 8 view .LVU2091
2148:src/display.c **** 	    case 0:
 6485              		.loc 1 2148 11 is_stmt 0 view .LVU2092
 6486 07e0 013D     		subs	r5, r5, #1
 6487              	.LVL721:
 6488              	.L508:
2150:src/display.c **** 	    };
 6489              		.loc 1 2150 8 is_stmt 1 view .LVU2093
2151:src/display.c **** 	    *obp++ = *p++;
 6490              		.loc 1 2151 7 view .LVU2094
2152:src/display.c **** 	    odig++;
 6491              		.loc 1 2152 6 view .LVU2095
2152:src/display.c **** 	    odig++;
 6492              		.loc 1 2152 17 is_stmt 0 view .LVU2096
 6493 07e2 4946     		mov	r1, r9
 6494              	.LVL722:
2152:src/display.c **** 	    odig++;
 6495              		.loc 1 2152 13 view .LVU2097
 6496 07e4 0346     		mov	r3, r0
 6497 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6498              	.LVL723:
2152:src/display.c **** 	    odig++;
 6499              		.loc 1 2152 13 view .LVU2098
 6500 07ea 03F802CB 		strb	ip, [r3], #2
2153:src/display.c **** 	    *obp++ = '.';
 6501              		.loc 1 2153 6 is_stmt 1 view .LVU2099
2154:src/display.c **** 	    for (i=1; i<count; i++) {
 6502              		.loc 1 2154 6 view .LVU2100
 6503              	.LVL724:
2155:src/display.c **** 	      *obp++ = *p++;
 6504              		.loc 1 2155 6 is_stmt 0 view .LVU2101
 6505 07ee 012A     		cmp	r2, #1
2154:src/display.c **** 	    for (i=1; i<count; i++) {
 6506              		.loc 1 2154 13 view .LVU2102
ARM GAS  /tmp/ccE2jV6G.s 			page 210


 6507 07f0 4FF02E0C 		mov	ip, #46
 6508 07f4 80F801C0 		strb	ip, [r0, #1]
2155:src/display.c **** 	      *obp++ = *p++;
 6509              		.loc 1 2155 6 is_stmt 1 view .LVU2103
 6510              	.LVL725:
2155:src/display.c **** 	      *obp++ = *p++;
 6511              		.loc 1 2155 16 view .LVU2104
2155:src/display.c **** 	      *obp++ = *p++;
 6512              		.loc 1 2155 6 is_stmt 0 view .LVU2105
 6513 07f8 53DD     		ble	.L579
2155:src/display.c **** 	      *obp++ = *p++;
 6514              		.loc 1 2155 6 view .LVU2106
 6515 07fa 0130     		adds	r0, r0, #1
 6516 07fc 9144     		add	r9, r9, r2
 6517              	.LVL726:
 6518              	.L513:
2156:src/display.c **** 	      odig++;
 6519              		.loc 1 2156 8 is_stmt 1 discriminator 3 view .LVU2107
2156:src/display.c **** 	      odig++;
 6520              		.loc 1 2156 15 is_stmt 0 discriminator 3 view .LVU2108
 6521 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6522              	.LVL727:
2156:src/display.c **** 	      odig++;
 6523              		.loc 1 2156 15 discriminator 3 view .LVU2109
 6524 0802 00F801CF 		strb	ip, [r0, #1]!
2157:src/display.c **** 	    }
 6525              		.loc 1 2157 8 is_stmt 1 discriminator 3 view .LVU2110
2155:src/display.c **** 	      *obp++ = *p++;
 6526              		.loc 1 2155 25 discriminator 3 view .LVU2111
2155:src/display.c **** 	      *obp++ = *p++;
 6527              		.loc 1 2155 16 discriminator 3 view .LVU2112
2155:src/display.c **** 	      *obp++ = *p++;
 6528              		.loc 1 2155 6 is_stmt 0 discriminator 3 view .LVU2113
 6529 0806 4945     		cmp	r1, r9
 6530 0808 F9D1     		bne	.L513
 6531 080a 013A     		subs	r2, r2, #1
 6532              	.LVL728:
2155:src/display.c **** 	      *obp++ = *p++;
 6533              		.loc 1 2155 6 discriminator 3 view .LVU2114
 6534 080c 1344     		add	r3, r3, r2
 6535 080e 1744     		add	r7, r7, r2
2159:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6536              		.loc 1 2159 15 view .LVU2115
 6537 0810 4FF0010B 		mov	fp, #1
 6538 0814 44E5     		b	.L512
 6539              	.LVL729:
 6540              	.L509:
2139:src/display.c **** 	      odig++;
 6541              		.loc 1 2139 8 is_stmt 1 view .LVU2116
2139:src/display.c **** 	      odig++;
 6542              		.loc 1 2139 15 is_stmt 0 view .LVU2117
 6543 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6544 081a 8DF81430 		strb	r3, [sp, #20]
2140:src/display.c **** 	      dd--;
 6545              		.loc 1 2140 8 is_stmt 1 view .LVU2118
 6546              	.LVL730:
2141:src/display.c **** 	      exp--;
ARM GAS  /tmp/ccE2jV6G.s 			page 211


 6547              		.loc 1 2141 8 view .LVU2119
2142:src/display.c **** 	    case -2:
 6548              		.loc 1 2142 8 view .LVU2120
2142:src/display.c **** 	    case -2:
 6549              		.loc 1 2142 11 is_stmt 0 view .LVU2121
 6550 081e 013D     		subs	r5, r5, #1
 6551              	.LVL731:
2142:src/display.c **** 	    case -2:
 6552              		.loc 1 2142 11 view .LVU2122
 6553 0820 0327     		movs	r7, #3
2139:src/display.c **** 	      odig++;
 6554              		.loc 1 2139 19 view .LVU2123
 6555 0822 0DF14909 		add	r9, sp, #73
 6556              	.LVL732:
2139:src/display.c **** 	      odig++;
 6557              		.loc 1 2139 12 view .LVU2124
 6558 0826 0DF11500 		add	r0, sp, #21
 6559              	.LVL733:
2139:src/display.c **** 	      odig++;
 6560              		.loc 1 2139 12 view .LVU2125
 6561 082a D5E7     		b	.L511
 6562              	.LVL734:
 6563              	.L547:
2281:src/display.c **** 	  }
 6564              		.loc 1 2281 8 is_stmt 1 view .LVU2126
 6565 082c 2D21     		movs	r1, #45
 6566 082e A6F10900 		sub	r0, r6, #9
 6567 0832 FFF7FEFF 		bl	set_dig
 6568              	.LVL735:
 6569 0836 019B     		ldr	r3, [sp, #4]
 6570 0838 43E5     		b	.L543
 6571              	.LVL736:
 6572              	.L678:
 6573              	.LBB444:
 6574              	.LBB442:
 6575              	.LBB436:
1848:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6576              		.loc 1 1848 4 view .LVU2127
1851:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6577              		.loc 1 1851 4 view .LVU2128
1851:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6578              		.loc 1 1851 14 is_stmt 0 view .LVU2129
 6579 083a 08F10306 		add	r6, r8, #3
 6580              	.LVL737:
1852:src/display.c **** 	  if (grouping) {
 6581              		.loc 1 1852 4 is_stmt 1 view .LVU2130
 6582 083e 4749     		ldr	r1, .L683+12
 6583 0840 0D22     		movs	r2, #13
 6584 0842 3046     		mov	r0, r6
 6585 0844 FFF7FEFF 		bl	xcopy
 6586              	.LVL738:
1853:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6587              		.loc 1 1853 4 view .LVU2131
1854:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6588              		.loc 1 1854 6 view .LVU2132
 6589 0848 1322     		movs	r2, #19
 6590 084a 08EB0201 		add	r1, r8, r2
ARM GAS  /tmp/ccE2jV6G.s 			page 212


 6591 084e 08F11400 		add	r0, r8, #20
 6592 0852 FFF7FEFF 		bl	xcopy
 6593              	.LVL739:
1855:src/display.c **** 	    x += 3 + 13 + 7;
 6594              		.loc 1 1855 6 view .LVU2133
1856:src/display.c **** 	  }
 6595              		.loc 1 1856 8 is_stmt 0 view .LVU2134
 6596 0856 08F11705 		add	r5, r8, #23
 6597              	.LVL740:
1855:src/display.c **** 	    x += 3 + 13 + 7;
 6598              		.loc 1 1855 24 view .LVU2135
 6599 085a 88F81370 		strb	r7, [r8, #19]
1856:src/display.c **** 	  }
 6600              		.loc 1 1856 6 is_stmt 1 view .LVU2136
 6601              	.LVL741:
1869:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6602              		.loc 1 1869 4 view .LVU2137
1870:src/display.c **** 	}
 6603              		.loc 1 1870 4 view .LVU2138
1870:src/display.c **** 	}
 6604              		.loc 1 1870 6 is_stmt 0 view .LVU2139
 6605 085e 1B24     		movs	r4, #27
 6606              	.LVL742:
 6607              	.L463:
1870:src/display.c **** 	}
 6608              		.loc 1 1870 6 view .LVU2140
 6609              	.LBE436:
1904:src/display.c **** 	  }
 6610              		.loc 1 1904 6 is_stmt 1 view .LVU2141
 6611              	.LBB437:
 6612              	.LBI437:
 364:src/display.c ****   if (sep == SEP_NONE)
 6613              		.loc 1 364 14 view .LVU2142
 6614              	.LBB438:
 365:src/display.c ****     return res;
 6615              		.loc 1 365 3 view .LVU2143
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6616              		.loc 1 367 3 view .LVU2144
 6617 0860 2046     		mov	r0, r4
 6618 0862 5146     		mov	r1, r10
 6619              	.LBE438:
 6620              	.LBE437:
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6621              		.loc 1 1903 38 is_stmt 0 view .LVU2145
 6622 0864 1B34     		adds	r4, r4, #27
 6623              	.LVL743:
 6624              	.LBB440:
 6625              	.LBB439:
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6626              		.loc 1 1903 38 view .LVU2146
 6627 0866 FFF7FEFF 		bl	set_separator.part.0
 6628              	.LVL744:
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6629              		.loc 1 1903 38 view .LVU2147
 6630              	.LBE439:
 6631              	.LBE440:
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
ARM GAS  /tmp/ccE2jV6G.s 			page 213


 6632              		.loc 1 1903 36 is_stmt 1 view .LVU2148
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6633              		.loc 1 1903 11 view .LVU2149
1903:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6634              		.loc 1 1903 4 is_stmt 0 view .LVU2150
 6635 086a 512C     		cmp	r4, #81
 6636 086c F8DD     		ble	.L463
 6637 086e 6C1E     		subs	r4, r5, #1
 6638              	.LVL745:
 6639              	.L465:
1909:src/display.c **** 
 6640              		.loc 1 1909 4 is_stmt 1 view .LVU2151
 6641 0870 5846     		mov	r0, fp
 6642 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1908:src/display.c **** 	  set_dig(j, x[i]);
 6643              		.loc 1 1908 33 is_stmt 0 view .LVU2152
 6644 0876 0BF1090B 		add	fp, fp, #9
 6645              	.LVL746:
1909:src/display.c **** 
 6646              		.loc 1 1909 4 view .LVU2153
 6647 087a FFF7FEFF 		bl	set_dig
 6648              	.LVL747:
1908:src/display.c **** 	  set_dig(j, x[i]);
 6649              		.loc 1 1908 26 is_stmt 1 view .LVU2154
1908:src/display.c **** 	  set_dig(j, x[i]);
 6650              		.loc 1 1908 18 view .LVU2155
1908:src/display.c **** 	  set_dig(j, x[i]);
 6651              		.loc 1 1908 2 is_stmt 0 view .LVU2156
 6652 087e BBF16C0F 		cmp	fp, #108
 6653 0882 F5D1     		bne	.L465
1911:src/display.c **** 	set_status(upper_str - negative);
 6654              		.loc 1 1911 2 is_stmt 1 view .LVU2157
1911:src/display.c **** 	set_status(upper_str - negative);
 6655              		.loc 1 1911 5 is_stmt 0 view .LVU2158
 6656 0884 0023     		movs	r3, #0
1912:src/display.c ****       }
 6657              		.loc 1 1912 2 view .LVU2159
 6658 0886 3046     		mov	r0, r6
1911:src/display.c **** 	set_status(upper_str - negative);
 6659              		.loc 1 1911 5 view .LVU2160
 6660 0888 2B70     		strb	r3, [r5]
1912:src/display.c ****       }
 6661              		.loc 1 1912 2 is_stmt 1 view .LVU2161
 6662 088a FFF7FEFF 		bl	set_status
 6663              	.LVL748:
1913:src/display.c **** 
 6664              		.loc 1 1913 7 is_stmt 0 view .LVU2162
 6665 088e 43E5     		b	.L444
 6666              	.LVL749:
 6667              	.L675:
1913:src/display.c **** 
 6668              		.loc 1 1913 7 view .LVU2163
 6669              	.LBE442:
 6670              	.LBE444:
1969:src/display.c **** 	      return;
 6671              		.loc 1 1969 8 is_stmt 1 view .LVU2164
 6672 0890 3046     		mov	r0, r6
ARM GAS  /tmp/ccE2jV6G.s 			page 214


 6673 0892 FFF7FEFF 		bl	set_x_hms
 6674              	.LVL750:
1970:src/display.c **** 	    }
 6675              		.loc 1 1970 8 view .LVU2165
 6676 0896 3FE5     		b	.L444
 6677              	.LVL751:
 6678              	.L576:
2131:src/display.c **** 	  if (count != *display_digits)
 6679              		.loc 1 2131 15 is_stmt 0 view .LVU2166
 6680 0898 3246     		mov	r2, r6
 6681 089a A3E4     		b	.L504
 6682              	.LVL752:
 6683              	.L577:
2136:src/display.c **** 	    case -1:
 6684              		.loc 1 2136 24 view .LVU2167
 6685 089c 0127     		movs	r7, #1
 6686 089e 4046     		mov	r0, r8
 6687 08a0 9FE7     		b	.L508
 6688              	.LVL753:
 6689              	.L579:
2159:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6690              		.loc 1 2159 15 view .LVU2168
 6691 08a2 4FF0010B 		mov	fp, #1
 6692 08a6 FBE4     		b	.L512
 6693              	.LVL754:
 6694              	.L551:
 6695              	.LBB445:
 6696              	.LBB421:
2159:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6697              		.loc 1 2159 15 view .LVU2169
 6698 08a8 3046     		mov	r0, r6
 6699 08aa 0193     		str	r3, [sp, #4]
 6700 08ac FFF7FEFF 		bl	set_separator.part.0
 6701              	.LVL755:
2159:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6702              		.loc 1 2159 15 view .LVU2170
 6703 08b0 019B     		ldr	r3, [sp, #4]
 6704 08b2 0446     		mov	r4, r0
 6705              	.LVL756:
2159:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6706              		.loc 1 2159 15 view .LVU2171
 6707 08b4 F9E5     		b	.L549
 6708              	.LVL757:
 6709              	.L489:
2159:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6710              		.loc 1 2159 15 view .LVU2172
 6711              	.LBE421:
 6712              	.LBE445:
2109:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6713              		.loc 1 2109 4 is_stmt 1 view .LVU2173
2109:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6714              		.loc 1 2109 7 is_stmt 0 view .LVU2174
 6715 08b6 4B45     		cmp	r3, r9
 6716 08b8 7FF460AC 		bne	.L560
 6717 08bc 63E5     		b	.L561
 6718              	.LVL758:
 6719              	.L460:
ARM GAS  /tmp/ccE2jV6G.s 			page 215


 6720              	.LBB446:
 6721              	.LBB443:
1894:src/display.c **** 	    x[10] = '\0';
 6722              		.loc 1 1894 6 is_stmt 1 view .LVU2175
1895:src/display.c **** 	  }
 6723              		.loc 1 1895 6 view .LVU2176
1894:src/display.c **** 	    x[10] = '\0';
 6724              		.loc 1 1894 11 is_stmt 0 view .LVU2177
 6725 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6726 08c2 21E7     		b	.L462
 6727              	.LVL759:
 6728              	.L677:
 6729              	.LBB441:
1819:src/display.c **** 
 6730              		.loc 1 1819 4 is_stmt 1 view .LVU2178
1821:src/display.c **** 	  xcopy(x, small_minus, 4);
 6731              		.loc 1 1821 4 view .LVU2179
 6732 08c4 2222     		movs	r2, #34
 6733 08c6 0DF11501 		add	r1, sp, #21
 6734 08ca 06A8     		add	r0, sp, #24
 6735              	.LVL760:
1821:src/display.c **** 	  xcopy(x, small_minus, 4);
 6736              		.loc 1 1821 4 is_stmt 0 view .LVU2180
 6737 08cc FFF7FEFF 		bl	xcopy
 6738              	.LVL761:
1822:src/display.c **** 	  x += 4;
 6739              		.loc 1 1822 4 is_stmt 1 view .LVU2181
 6740 08d0 4046     		mov	r0, r8
 6741 08d2 2349     		ldr	r1, .L683+16
 6742 08d4 0422     		movs	r2, #4
 6743 08d6 FFF7FEFF 		bl	xcopy
 6744              	.LVL762:
1823:src/display.c **** 	  negative = 4;
 6745              		.loc 1 1823 4 view .LVU2182
1824:src/display.c **** #else
 6746              		.loc 1 1824 4 view .LVU2183
1823:src/display.c **** 	  negative = 4;
 6747              		.loc 1 1823 6 is_stmt 0 view .LVU2184
 6748 08da 0DF11808 		add	r8, sp, #24
 6749              	.LVL763:
1824:src/display.c **** #else
 6750              		.loc 1 1824 13 view .LVU2185
 6751 08de 0426     		movs	r6, #4
 6752              	.LVL764:
1824:src/display.c **** #else
 6753              		.loc 1 1824 13 view .LVU2186
 6754              	.LBE441:
 6755 08e0 C7E6     		b	.L456
 6756              	.LVL765:
 6757              	.L514:
1824:src/display.c **** #else
 6758              		.loc 1 1824 13 view .LVU2187
 6759              	.LBE443:
 6760              	.LBE446:
2175:src/display.c **** 	    odig++;
 6761              		.loc 1 2175 6 is_stmt 1 view .LVU2188
2176:src/display.c **** 	    *obp++ = '.';
ARM GAS  /tmp/ccE2jV6G.s 			page 216


 6762              		.loc 1 2176 6 view .LVU2189
2177:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6763              		.loc 1 2177 6 view .LVU2190
2175:src/display.c **** 	    odig++;
 6764              		.loc 1 2175 13 is_stmt 0 view .LVU2191
 6765 08e2 42F63063 		movw	r3, #11824
2178:src/display.c **** 	      *obp++ = '0';
 6766              		.loc 1 2178 6 view .LVU2192
 6767 08e6 691C     		adds	r1, r5, #1
2175:src/display.c **** 	    odig++;
 6768              		.loc 1 2175 13 view .LVU2193
 6769 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2178:src/display.c **** 	      *obp++ = '0';
 6770              		.loc 1 2178 6 is_stmt 1 view .LVU2194
 6771              	.LVL766:
2178:src/display.c **** 	      *obp++ = '0';
 6772              		.loc 1 2178 20 view .LVU2195
2178:src/display.c **** 	      *obp++ = '0';
 6773              		.loc 1 2178 6 is_stmt 0 view .LVU2196
 6774 08ec 2CD0     		beq	.L580
 6775 08ee C5F10100 		rsb	r0, r5, #1
2177:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6776              		.loc 1 2177 10 view .LVU2197
 6777 08f2 0DF11603 		add	r3, sp, #22
 6778              	.LVL767:
2177:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6779              		.loc 1 2177 10 view .LVU2198
 6780 08f6 4044     		add	r0, r0, r8
 6781 08f8 1946     		mov	r1, r3
 6782              	.LVL768:
2179:src/display.c **** 	      odig++;
 6783              		.loc 1 2179 15 view .LVU2199
 6784 08fa 3027     		movs	r7, #48
 6785              	.LVL769:
 6786              	.L521:
2179:src/display.c **** 	      odig++;
 6787              		.loc 1 2179 8 is_stmt 1 discriminator 3 view .LVU2200
2179:src/display.c **** 	      odig++;
 6788              		.loc 1 2179 15 is_stmt 0 discriminator 3 view .LVU2201
 6789 08fc 01F8017B 		strb	r7, [r1], #1
 6790              	.LVL770:
2180:src/display.c **** 	    }
 6791              		.loc 1 2180 8 is_stmt 1 discriminator 3 view .LVU2202
2178:src/display.c **** 	      *obp++ = '0';
 6792              		.loc 1 2178 25 discriminator 3 view .LVU2203
2178:src/display.c **** 	      *obp++ = '0';
 6793              		.loc 1 2178 20 discriminator 3 view .LVU2204
2178:src/display.c **** 	      *obp++ = '0';
 6794              		.loc 1 2178 6 is_stmt 0 discriminator 3 view .LVU2205
 6795 0900 8142     		cmp	r1, r0
 6796 0902 FBD1     		bne	.L521
 6797 0904 E943     		mvns	r1, r5
 6798              	.LVL771:
2178:src/display.c **** 	      *obp++ = '0';
 6799              		.loc 1 2178 6 discriminator 3 view .LVU2206
 6800 0906 0B44     		add	r3, r3, r1
 6801 0908 6F42     		rsbs	r7, r5, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 217


 6802              	.L520:
 6803              	.LVL772:
2182:src/display.c **** 	      *obp++ = *p++;
 6804              		.loc 1 2182 16 is_stmt 1 view .LVU2207
2182:src/display.c **** 	      *obp++ = *p++;
 6805              		.loc 1 2182 6 is_stmt 0 view .LVU2208
 6806 090a 002A     		cmp	r2, #0
 6807 090c 7FF7C8AC 		ble	.L512
 6808 0910 02F1FF3C 		add	ip, r2, #-1
 6809 0914 9C44     		add	ip, ip, r3
 6810 0916 591E     		subs	r1, r3, #1
 6811              	.LVL773:
 6812              	.L522:
2183:src/display.c **** 	      odig++;
 6813              		.loc 1 2183 8 is_stmt 1 discriminator 3 view .LVU2209
2183:src/display.c **** 	      odig++;
 6814              		.loc 1 2183 15 is_stmt 0 discriminator 3 view .LVU2210
 6815 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6816              	.LVL774:
2183:src/display.c **** 	      odig++;
 6817              		.loc 1 2183 15 discriminator 3 view .LVU2211
 6818 091c 01F8010F 		strb	r0, [r1, #1]!
2184:src/display.c **** 	    }
 6819              		.loc 1 2184 8 is_stmt 1 discriminator 3 view .LVU2212
2182:src/display.c **** 	      *obp++ = *p++;
 6820              		.loc 1 2182 25 discriminator 3 view .LVU2213
 6821              	.LVL775:
2182:src/display.c **** 	      *obp++ = *p++;
 6822              		.loc 1 2182 16 discriminator 3 view .LVU2214
2182:src/display.c **** 	      *obp++ = *p++;
 6823              		.loc 1 2182 6 is_stmt 0 discriminator 3 view .LVU2215
 6824 0920 8C45     		cmp	ip, r1
 6825 0922 F9D1     		bne	.L522
 6826              	.LVL776:
2182:src/display.c **** 	      *obp++ = *p++;
 6827              		.loc 1 2182 6 discriminator 3 view .LVU2216
 6828 0924 1344     		add	r3, r3, r2
 6829              	.LVL777:
2182:src/display.c **** 	      *obp++ = *p++;
 6830              		.loc 1 2182 6 discriminator 3 view .LVU2217
 6831 0926 1744     		add	r7, r7, r2
 6832 0928 BAE4     		b	.L512
 6833              	.LVL778:
 6834              	.L676:
2125:src/display.c **** 
 6835              		.loc 1 2125 2 is_stmt 1 view .LVU2218
2125:src/display.c **** 
 6836              		.loc 1 2125 40 is_stmt 0 view .LVU2219
 6837 092a 0AF10102 		add	r2, r10, #1
2125:src/display.c **** 
 6838              		.loc 1 2125 9 view .LVU2220
 6839 092e 09EB0203 		add	r3, r9, r2
 6840              	.LVL779:
2125:src/display.c **** 
 6841              		.loc 1 2125 45 is_stmt 1 view .LVU2221
2125:src/display.c **** 
 6842              		.loc 1 2125 2 is_stmt 0 view .LVU2222
ARM GAS  /tmp/ccE2jV6G.s 			page 218


 6843 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6844 0936 002A     		cmp	r2, #0
 6845 0938 3FF496AC 		beq	.L658
2114:src/display.c **** 	      extra_digits = 0;
 6846              		.loc 1 2114 37 view .LVU2223
 6847 093c 0227     		movs	r7, #2
 6848 093e 2FE4     		b	.L559
 6849              	.LVL780:
 6850              	.L581:
2205:src/display.c **** 	    *obp++ = '.';
 6851              		.loc 1 2205 10 view .LVU2224
 6852 0940 0127     		movs	r7, #1
2206:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6853              		.loc 1 2206 10 view .LVU2225
 6854 0942 0DF11603 		add	r3, sp, #22
 6855              	.LVL781:
2206:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6856              		.loc 1 2206 10 view .LVU2226
 6857 0946 1AE7     		b	.L531
 6858              	.LVL782:
 6859              	.L580:
2176:src/display.c **** 	    *obp++ = '.';
 6860              		.loc 1 2176 10 view .LVU2227
 6861 0948 0127     		movs	r7, #1
2177:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6862              		.loc 1 2177 10 view .LVU2228
 6863 094a 0DF11603 		add	r3, sp, #22
 6864              	.LVL783:
2177:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6865              		.loc 1 2177 10 view .LVU2229
 6866 094e DCE7     		b	.L520
 6867              	.L684:
 6868              		.align	2
 6869              	.L683:
 6870 0950 00000000 		.word	.LANCHOR1
 6871 0954 18FCFFFF 		.word	-1000
 6872 0958 D34D6210 		.word	274877907
 6873 095c 00000000 		.word	.LANCHOR14
 6874 0960 00000000 		.word	.LANCHOR13
 6875              		.cfi_endproc
 6876              	.LFE27:
 6878              		.section	.text.set_x,"ax",%progbits
 6879              		.align	1
 6880              		.p2align 2,,3
 6881              		.syntax unified
 6882              		.thumb
 6883              		.thumb_func
 6884              		.fpu fpv4-sp-d16
 6886              	set_x:
 6887              	.LVL784:
 6888              	.LFB26:
1920:src/display.c **** 	decNumber z;
 6889              		.loc 1 1920 66 is_stmt 1 view -0
 6890              		.cfi_startproc
 6891              		@ args = 0, pretend = 0, frame = 40
 6892              		@ frame_needed = 0, uses_anonymous_args = 0
1921:src/display.c **** 	int digits = DISPLAY_DIGITS;
ARM GAS  /tmp/ccE2jV6G.s 			page 219


 6893              		.loc 1 1921 2 view .LVU2231
1922:src/display.c **** 
 6894              		.loc 1 1922 2 view .LVU2232
1920:src/display.c **** 	decNumber z;
 6895              		.loc 1 1920 66 is_stmt 0 view .LVU2233
 6896 0000 30B5     		push	{r4, r5, lr}
 6897              		.cfi_def_cfa_offset 12
 6898              		.cfi_offset 4, -12
 6899              		.cfi_offset 5, -8
 6900              		.cfi_offset 14, -4
 6901 0002 8BB0     		sub	sp, sp, #44
 6902              		.cfi_def_cfa_offset 56
1922:src/display.c **** 
 6903              		.loc 1 1922 6 view .LVU2234
 6904 0004 0C23     		movs	r3, #12
1925:src/display.c **** 	else
 6905              		.loc 1 1925 4 view .LVU2235
 6906 0006 01AD     		add	r5, sp, #4
1920:src/display.c **** 	decNumber z;
 6907              		.loc 1 1920 66 view .LVU2236
 6908 0008 0C46     		mov	r4, r1
1922:src/display.c **** 
 6909              		.loc 1 1922 6 view .LVU2237
 6910 000a 0093     		str	r3, [sp]
1924:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6911              		.loc 1 1924 2 is_stmt 1 view .LVU2238
1925:src/display.c **** 	else
 6912              		.loc 1 1925 4 is_stmt 0 view .LVU2239
 6913 000c 2946     		mov	r1, r5
 6914              	.LVL785:
1924:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6915              		.loc 1 1924 5 view .LVU2240
 6916 000e 42B1     		cbz	r2, .L686
1925:src/display.c **** 	else
 6917              		.loc 1 1925 4 is_stmt 1 view .LVU2241
 6918 0010 FFF7FEFF 		bl	decimal128ToNumber
 6919              	.LVL786:
1928:src/display.c ****       }
 6920              		.loc 1 1928 2 view .LVU2242
 6921 0014 2146     		mov	r1, r4
 6922 0016 2846     		mov	r0, r5
 6923 0018 6A46     		mov	r2, sp
 6924 001a FFF7FEFF 		bl	set_x_dn
 6925              	.LVL787:
1929:src/display.c **** 
 6926              		.loc 1 1929 7 is_stmt 0 view .LVU2243
 6927 001e 0BB0     		add	sp, sp, #44
 6928              		.cfi_remember_state
 6929              		.cfi_def_cfa_offset 12
 6930              		@ sp needed
 6931 0020 30BD     		pop	{r4, r5, pc}
 6932              	.LVL788:
 6933              	.L686:
 6934              		.cfi_restore_state
1927:src/display.c **** 	set_x_dn(&z, res, &digits);
 6935              		.loc 1 1927 4 is_stmt 1 view .LVU2244
 6936 0022 FFF7FEFF 		bl	decimal64ToNumber
ARM GAS  /tmp/ccE2jV6G.s 			page 220


 6937              	.LVL789:
1928:src/display.c ****       }
 6938              		.loc 1 1928 2 view .LVU2245
 6939 0026 2146     		mov	r1, r4
 6940 0028 2846     		mov	r0, r5
 6941 002a 6A46     		mov	r2, sp
 6942 002c FFF7FEFF 		bl	set_x_dn
 6943              	.LVL790:
1929:src/display.c **** 
 6944              		.loc 1 1929 7 is_stmt 0 view .LVU2246
 6945 0030 0BB0     		add	sp, sp, #44
 6946              		.cfi_def_cfa_offset 12
 6947              		@ sp needed
 6948 0032 30BD     		pop	{r4, r5, pc}
1929:src/display.c **** 
 6949              		.loc 1 1929 7 view .LVU2247
 6950              		.cfi_endproc
 6951              	.LFE26:
 6953              		.section	.text.format_reg,"ax",%progbits
 6954              		.align	1
 6955              		.p2align 2,,3
 6956              		.global	format_reg
 6957              		.syntax unified
 6958              		.thumb
 6959              		.thumb_func
 6960              		.fpu fpv4-sp-d16
 6962              	format_reg:
 6963              	.LVL791:
 6964              	.LFB28:
2336:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6965              		.loc 1 2336 45 is_stmt 1 view -0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 40
 6968              		@ frame_needed = 0, uses_anonymous_args = 0
2337:src/display.c **** 
 6969              		.loc 1 2337 2 view .LVU2249
2336:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6970              		.loc 1 2336 45 is_stmt 0 view .LVU2250
 6971 0000 30B5     		push	{r4, r5, lr}
 6972              		.cfi_def_cfa_offset 12
 6973              		.cfi_offset 4, -12
 6974              		.cfi_offset 5, -8
 6975              		.cfi_offset 14, -4
 6976 0002 8BB0     		sub	sp, sp, #44
 6977              		.cfi_def_cfa_offset 56
2336:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6978              		.loc 1 2336 45 view .LVU2251
 6979 0004 0C46     		mov	r4, r1
 6980 0006 0546     		mov	r5, r0
2337:src/display.c **** 
 6981              		.loc 1 2337 28 view .LVU2252
 6982 0008 FFF7FEFF 		bl	get_reg_n
 6983              	.LVL792:
2339:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6984              		.loc 1 2339 6 view .LVU2253
 6985 000c 154B     		ldr	r3, .L696
 6986 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccE2jV6G.s 			page 221


 6987 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6988              	.LVL793:
2339:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6989              		.loc 1 2339 2 is_stmt 1 view .LVU2254
2339:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6990              		.loc 1 2339 5 is_stmt 0 view .LVU2255
 6991 0014 D207     		lsls	r2, r2, #31
 6992 0016 1DD4     		bmi	.L694
2342:src/display.c **** 	  decNumber x;
 6993              		.loc 1 2342 7 is_stmt 1 view .LVU2256
2342:src/display.c **** 	  decNumber x;
 6994              		.loc 1 2342 10 is_stmt 0 view .LVU2257
 6995 0018 44B1     		cbz	r4, .L695
 6996              	.L692:
2353:src/display.c ****       }
 6997              		.loc 1 2353 4 is_stmt 1 view .LVU2258
2353:src/display.c ****       }
 6998              		.loc 1 2353 24 is_stmt 0 view .LVU2259
 6999 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2353:src/display.c ****       }
 7000              		.loc 1 2353 4 view .LVU2260
 7001 001e 2146     		mov	r1, r4
 7002 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7003 0024 FFF7FEFF 		bl	set_x
 7004              	.LVL794:
2354:src/display.c **** 
 7005              		.loc 1 2354 7 view .LVU2261
 7006 0028 0BB0     		add	sp, sp, #44
 7007              		.cfi_remember_state
 7008              		.cfi_def_cfa_offset 12
 7009              		@ sp needed
 7010 002a 30BD     		pop	{r4, r5, pc}
 7011              	.LVL795:
 7012              	.L695:
 7013              		.cfi_restore_state
2342:src/display.c **** 	  decNumber x;
 7014              		.loc 1 2342 32 discriminator 1 view .LVU2262
 7015 002c 0E4A     		ldr	r2, .L696+4
2342:src/display.c **** 	  decNumber x;
 7016              		.loc 1 2342 23 discriminator 1 view .LVU2263
 7017 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7018 0030 012A     		cmp	r2, #1
 7019 0032 F2D9     		bls	.L692
 7020              	.LVL796:
 7021              	.LBB450:
 7022              	.LBI450:
2336:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7023              		.loc 1 2336 12 is_stmt 1 view .LVU2264
 7024              	.LBB451:
 7025              	.LBB452:
2343:src/display.c **** 	  int s;
 7026              		.loc 1 2343 4 view .LVU2265
2344:src/display.c **** 	  unsigned long long int v;
 7027              		.loc 1 2344 4 view .LVU2266
2345:src/display.c **** 
 7028              		.loc 1 2345 4 view .LVU2267
2347:src/display.c **** 	  v = dn_to_ull(&x, &s);
ARM GAS  /tmp/ccE2jV6G.s 			page 222


 7029              		.loc 1 2347 4 view .LVU2268
 7030 0034 2946     		mov	r1, r5
 7031 0036 01A8     		add	r0, sp, #4
 7032              	.LVL797:
2347:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7033              		.loc 1 2347 4 is_stmt 0 view .LVU2269
 7034 0038 FFF7FEFF 		bl	getRegister
 7035              	.LVL798:
2348:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7036              		.loc 1 2348 4 is_stmt 1 view .LVU2270
2348:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7037              		.loc 1 2348 8 is_stmt 0 view .LVU2271
 7038 003c 01A8     		add	r0, sp, #4
 7039 003e 6946     		mov	r1, sp
 7040 0040 FFF7FEFF 		bl	dn_to_ull
 7041              	.LVL799:
2349:src/display.c **** 	}
 7042              		.loc 1 2349 4 is_stmt 1 view .LVU2272
 7043 0044 009A     		ldr	r2, [sp]
 7044 0046 FFF7FEFF 		bl	build_value
 7045              	.LVL800:
2349:src/display.c **** 	}
 7046              		.loc 1 2349 4 is_stmt 0 view .LVU2273
 7047 004a 2246     		mov	r2, r4
 7048 004c FFF7FEFF 		bl	set_int_x
 7049              	.LVL801:
 7050              	.LBE452:
 7051              	.LBE451:
 7052              	.LBE450:
2354:src/display.c **** 
 7053              		.loc 1 2354 7 view .LVU2274
 7054 0050 0BB0     		add	sp, sp, #44
 7055              		.cfi_remember_state
 7056              		.cfi_def_cfa_offset 12
 7057              		@ sp needed
 7058 0052 30BD     		pop	{r4, r5, pc}
 7059              	.LVL802:
 7060              	.L694:
 7061              		.cfi_restore_state
2340:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7062              		.loc 1 2340 4 is_stmt 1 view .LVU2275
 7063 0054 2846     		mov	r0, r5
 7064              	.LVL803:
2340:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7065              		.loc 1 2340 4 is_stmt 0 view .LVU2276
 7066 0056 FFF7FEFF 		bl	get_reg_n_int
 7067              	.LVL804:
 7068 005a 2246     		mov	r2, r4
 7069 005c FFF7FEFF 		bl	set_int_x
 7070              	.LVL805:
2354:src/display.c **** 
 7071              		.loc 1 2354 7 view .LVU2277
 7072 0060 0BB0     		add	sp, sp, #44
 7073              		.cfi_def_cfa_offset 12
 7074              		@ sp needed
 7075 0062 30BD     		pop	{r4, r5, pc}
 7076              	.LVL806:
ARM GAS  /tmp/ccE2jV6G.s 			page 223


 7077              	.L697:
2354:src/display.c **** 
 7078              		.loc 1 2354 7 view .LVU2278
 7079              		.align	2
 7080              	.L696:
 7081 0064 00000000 		.word	main_ram
 7082 0068 00000000 		.word	StateWhileOn
 7083              		.cfi_endproc
 7084              	.LFE28:
 7086              		.section	.text.set_status_right,"ax",%progbits
 7087              		.align	1
 7088              		.p2align 2,,3
 7089              		.syntax unified
 7090              		.thumb
 7091              		.thumb_func
 7092              		.fpu fpv4-sp-d16
 7094              	set_status_right:
 7095              	.LVL807:
 7096              	.LFB46:
3499:src/display.c ****       static void set_status_top(const char *str) {
3500:src/display.c **** 	if (no_status_top) return;
3501:src/display.c **** 	if (State2.runmode) {
3502:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3503:src/display.c **** 	}
3504:src/display.c **** 	else {
3505:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3506:src/display.c **** 	}
3507:src/display.c ****       }
3508:src/display.c **** 
3509:src/display.c **** 
3510:src/display.c ****       /*
3511:src/display.c ****        *  Display messages (global function)
3512:src/display.c ****        */
3513:src/display.c ****       extern void message(const char *str1, const char *str2)
3514:src/display.c ****       {
3515:src/display.c **** 	State2.disp_freeze = 0;
3516:src/display.c **** 	State2.disp_small = 0;
3517:src/display.c **** 	WasDataEntry = 0;
3518:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3519:src/display.c **** 	  // Complete redraw necessary
3520:src/display.c **** 	  DispMsg = str1;
3521:src/display.c **** 	  display();
3522:src/display.c **** 	}
3523:src/display.c **** 	else {
3524:src/display.c **** 	  if ( str2 != NULL ) {
3525:src/display.c **** 	    reset_disp();
3526:src/display.c **** 	    ShowRPN = 0;
3527:src/display.c **** 	    set_annunciators();
3528:src/display.c **** 	    set_digits_string( str2, 0 );
3529:src/display.c **** 	  }
3530:src/display.c **** 	  set_status( str1 );
3531:src/display.c **** 	  finish_display();// message
3532:src/display.c **** 	}
3533:src/display.c ****       }
3534:src/display.c **** 
3535:src/display.c **** #ifdef INCLUDE_STOPWATCH
3536:src/display.c **** 
ARM GAS  /tmp/ccE2jV6G.s 			page 224


3537:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3538:src/display.c **** 	int j = SEGS_EXP_BASE;
3539:src/display.c **** 	for (; *exponent!=0; exponent++) {
3540:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3541:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3542:src/display.c **** 	}
3543:src/display.c ****       }
3544:src/display.c **** 
3545:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3546:src/display.c ****       {
3547:src/display.c **** #ifndef REALBUILD
3548:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3549:src/display.c **** #endif
3550:src/display.c **** 	reset_disp();
3551:src/display.c **** 	set_dot(DEG);
3552:src/display.c **** 	set_digits_string( str2, 0 );
3553:src/display.c **** 	State2.disp_small = force_small;
3554:src/display.c **** 	if( exponent!=NULL ) {
3555:src/display.c **** 	  stopwatch_exponent(exponent);
3556:src/display.c **** 	}
3557:src/display.c **** 	set_status( str1 );
3558:src/display.c **** 	finish_display();
3559:src/display.c ****       }
3560:src/display.c **** 
3561:src/display.c **** 
3562:src/display.c **** #endif // INCLUDE_STOPWATCH
3563:src/display.c **** 
3564:src/display.c ****       /* Display the right hand characters from the given string.
3565:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3566:src/display.c ****        * and reduce font size if required.
3567:src/display.c ****        */
3568:src/display.c ****       static void set_status_right(const char *str) {
 7097              		.loc 1 3568 53 is_stmt 1 view -0
 7098              		.cfi_startproc
 7099              		@ args = 0, pretend = 0, frame = 0
 7100              		@ frame_needed = 0, uses_anonymous_args = 0
3569:src/display.c **** 	unsigned int x = 0;
 7101              		.loc 1 3569 2 view .LVU2280
3570:src/display.c **** 	const char *p;
 7102              		.loc 1 3570 2 view .LVU2281
3571:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7103              		.loc 1 3571 2 view .LVU2282
3568:src/display.c **** 	unsigned int x = 0;
 7104              		.loc 1 3568 53 is_stmt 0 view .LVU2283
 7105 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7106              		.cfi_def_cfa_offset 28
 7107              		.cfi_offset 4, -28
 7108              		.cfi_offset 5, -24
 7109              		.cfi_offset 6, -20
 7110              		.cfi_offset 7, -16
 7111              		.cfi_offset 8, -12
 7112              		.cfi_offset 9, -8
 7113              		.cfi_offset 14, -4
 7114              		.loc 1 3571 23 view .LVU2284
 7115 0004 194B     		ldr	r3, .L713
 7116              		.loc 1 3571 41 view .LVU2285
 7117 0006 93F91630 		ldrsb	r3, [r3, #22]
ARM GAS  /tmp/ccE2jV6G.s 			page 225


 7118 000a 002B     		cmp	r3, #0
3568:src/display.c **** 	unsigned int x = 0;
 7119              		.loc 1 3568 53 view .LVU2286
 7120 000c 83B0     		sub	sp, sp, #12
 7121              		.cfi_def_cfa_offset 40
3568:src/display.c **** 	unsigned int x = 0;
 7122              		.loc 1 3568 53 view .LVU2287
 7123 000e 0646     		mov	r6, r0
 7124              		.loc 1 3571 41 view .LVU2288
 7125 0010 23DA     		bge	.L712
 7126              	.LVL808:
 7127              	.L699:
 7128              		.loc 1 3571 12 view .LVU2289
 7129 0012 4FF00108 		mov	r8, #1
3572:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7130              		.loc 1 3572 36 view .LVU2290
 7131 0016 4FF48077 		mov	r7, #256
 7132              	.L700:
 7133              	.LVL809:
3573:src/display.c **** 
3574:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7134              		.loc 1 3574 2 is_stmt 1 discriminator 4 view .LVU2291
 7135              		.loc 1 3574 14 discriminator 4 view .LVU2292
 7136              		.loc 1 3574 2 is_stmt 0 discriminator 4 view .LVU2293
 7137 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7138 001c 3446     		mov	r4, r6
 7139 001e 1BB1     		cbz	r3, .L701
 7140              	.LVL810:
 7141              	.L702:
 7142              		.loc 1 3574 30 is_stmt 1 discriminator 3 view .LVU2294
 7143              		.loc 1 3574 26 discriminator 3 view .LVU2295
 7144              		.loc 1 3574 14 discriminator 3 view .LVU2296
 7145              		.loc 1 3574 2 is_stmt 0 discriminator 3 view .LVU2297
 7146 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7147              	.LVL811:
 7148              		.loc 1 3574 2 discriminator 3 view .LVU2298
 7149 0024 002B     		cmp	r3, #0
 7150 0026 FBD1     		bne	.L702
 7151              	.L701:
3569:src/display.c **** 	const char *p;
 7152              		.loc 1 3569 15 view .LVU2299
 7153 0028 0025     		movs	r5, #0
 7154 002a 06E0     		b	.L703
 7155              	.LVL812:
 7156              	.L704:
 7157              	.LBB453:
3575:src/display.c **** 	while (--p >= str) {
3576:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7158              		.loc 1 3576 27 view .LVU2300
 7159 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3577:src/display.c **** 
3578:src/display.c **** 	  x += charlengths(c);
 7160              		.loc 1 3578 9 view .LVU2301
 7161 002e 3844     		add	r0, r0, r7
 7162 0030 FFF7FEFF 		bl	charlengths
 7163              	.LVL813:
 7164              		.loc 1 3578 6 view .LVU2302
ARM GAS  /tmp/ccE2jV6G.s 			page 226


 7165 0034 0544     		add	r5, r5, r0
 7166              	.LVL814:
3579:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7167              		.loc 1 3579 4 is_stmt 1 view .LVU2303
 7168              		.loc 1 3579 7 is_stmt 0 view .LVU2304
 7169 0036 4B2D     		cmp	r5, #75
 7170 0038 03D8     		bhi	.L705
 7171              	.LVL815:
 7172              	.L703:
3576:src/display.c **** 
 7173              		.loc 1 3576 4 is_stmt 1 view .LVU2305
3576:src/display.c **** 
 7174              		.loc 1 3576 4 is_stmt 0 view .LVU2306
 7175              	.LBE453:
3575:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7176              		.loc 1 3575 8 is_stmt 1 view .LVU2307
 7177 003a A146     		mov	r9, r4
 7178 003c 013C     		subs	r4, r4, #1
 7179              	.LVL816:
 7180              	.LBB454:
3578:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7181              		.loc 1 3578 4 view .LVU2308
3578:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7182              		.loc 1 3578 4 is_stmt 0 view .LVU2309
 7183              	.LBE454:
3575:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7184              		.loc 1 3575 8 view .LVU2310
 7185 003e A642     		cmp	r6, r4
 7186 0040 F4D9     		bls	.L704
 7187              	.LVL817:
 7188              	.L705:
3580:src/display.c **** 	    break;
3581:src/display.c **** 	}
3582:src/display.c **** 	set_status_sized(p+1, toolarge);
 7189              		.loc 1 3582 2 is_stmt 1 view .LVU2311
 7190              	.LBB455:
 7191              	.LBI455:
3338:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7192              		.loc 1 3338 19 view .LVU2312
 7193              	.LBB456:
3339:src/display.c ****       }
 7194              		.loc 1 3339 2 view .LVU2313
 7195 0042 40F24A23 		movw	r3, #586
 7196 0046 0093     		str	r3, [sp]
 7197 0048 4146     		mov	r1, r8
 7198 004a 4846     		mov	r0, r9
 7199 004c 8E23     		movs	r3, #142
 7200 004e 4A22     		movs	r2, #74
 7201 0050 FFF7FEFF 		bl	s_s_sized
 7202              	.LVL818:
3339:src/display.c ****       }
 7203              		.loc 1 3339 2 is_stmt 0 view .LVU2314
 7204              	.LBE456:
 7205              	.LBE455:
3583:src/display.c ****       }
 7206              		.loc 1 3583 7 view .LVU2315
 7207 0054 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccE2jV6G.s 			page 227


 7208              		.cfi_remember_state
 7209              		.cfi_def_cfa_offset 28
 7210              		@ sp needed
 7211 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7212              	.LVL819:
 7213              	.L712:
 7214              		.cfi_restore_state
 7215              	.LBB457:
 7216              	.LBI457:
3486:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7217              		.loc 1 3486 18 is_stmt 1 view .LVU2316
 7218              	.LBB458:
3487:src/display.c ****       }
 7219              		.loc 1 3487 2 view .LVU2317
3487:src/display.c ****       }
 7220              		.loc 1 3487 9 is_stmt 0 view .LVU2318
 7221 005a 0021     		movs	r1, #0
 7222 005c FFF7FEFF 		bl	pixel_length
 7223              	.LVL820:
3487:src/display.c ****       }
 7224              		.loc 1 3487 9 view .LVU2319
 7225              	.LBE458:
 7226              	.LBE457:
3571:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7227              		.loc 1 3571 41 view .LVU2320
 7228 0060 4B28     		cmp	r0, #75
 7229 0062 D6DC     		bgt	.L699
3571:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7230              		.loc 1 3571 12 view .LVU2321
 7231 0064 4FF00008 		mov	r8, #0
3572:src/display.c **** 
 7232              		.loc 1 3572 36 view .LVU2322
 7233 0068 4746     		mov	r7, r8
 7234 006a D6E7     		b	.L700
 7235              	.L714:
 7236              		.align	2
 7237              	.L713:
 7238 006c 00000000 		.word	StateWhileOn
 7239              		.cfi_endproc
 7240              	.LFE46:
 7242              		.section	.text.set_status_top.part.0,"ax",%progbits
 7243              		.align	1
 7244              		.p2align 2,,3
 7245              		.syntax unified
 7246              		.thumb
 7247              		.thumb_func
 7248              		.fpu fpv4-sp-d16
 7250              	set_status_top.part.0:
 7251              	.LVL821:
 7252              	.LFB55:
3499:src/display.c **** 	if (no_status_top) return;
 7253              		.loc 1 3499 19 is_stmt 1 view -0
 7254              		.cfi_startproc
 7255              		@ args = 0, pretend = 0, frame = 0
 7256              		@ frame_needed = 0, uses_anonymous_args = 0
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7257              		.loc 1 3501 2 view .LVU2324
ARM GAS  /tmp/ccE2jV6G.s 			page 228


3499:src/display.c **** 	if (no_status_top) return;
 7258              		.loc 1 3499 19 is_stmt 0 view .LVU2325
 7259 0000 10B5     		push	{r4, lr}
 7260              		.cfi_def_cfa_offset 8
 7261              		.cfi_offset 4, -8
 7262              		.cfi_offset 14, -4
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7263              		.loc 1 3501 6 view .LVU2326
 7264 0002 184B     		ldr	r3, .L725
 7265 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7266              		.loc 1 3501 5 view .LVU2327
 7267 0006 13F04001 		ands	r1, r3, #64
3499:src/display.c **** 	if (no_status_top) return;
 7268              		.loc 1 3499 19 view .LVU2328
 7269 000a 82B0     		sub	sp, sp, #8
 7270              		.cfi_def_cfa_offset 16
3499:src/display.c **** 	if (no_status_top) return;
 7271              		.loc 1 3499 19 view .LVU2329
 7272 000c 0446     		mov	r4, r0
3501:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7273              		.loc 1 3501 5 view .LVU2330
 7274 000e 0DD0     		beq	.L716
3502:src/display.c **** 	}
 7275              		.loc 1 3502 4 is_stmt 1 view .LVU2331
 7276 0010 1A06     		lsls	r2, r3, #24
 7277 0012 18D5     		bpl	.L723
 7278 0014 0121     		movs	r1, #1
 7279              	.LVL822:
 7280              	.L717:
 7281              	.LBB459:
 7282              	.LBI459:
3341:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7283              		.loc 1 3341 19 view .LVU2332
 7284              	.LBB460:
3342:src/display.c ****       }
 7285              		.loc 1 3342 2 view .LVU2333
 7286 0016 4FF45373 		mov	r3, #844
 7287 001a 0093     		str	r3, [sp]
 7288 001c 2046     		mov	r0, r4
 7289 001e 40F24A23 		movw	r3, #586
 7290 0022 2B22     		movs	r2, #43
 7291 0024 FFF7FEFF 		bl	s_s_sized
 7292              	.LVL823:
3342:src/display.c ****       }
 7293              		.loc 1 3342 2 is_stmt 0 view .LVU2334
 7294              	.LBE460:
 7295              	.LBE459:
3507:src/display.c **** 
 7296              		.loc 1 3507 7 view .LVU2335
 7297 0028 02B0     		add	sp, sp, #8
 7298              		.cfi_remember_state
 7299              		.cfi_def_cfa_offset 8
 7300              		@ sp needed
 7301 002a 10BD     		pop	{r4, pc}
 7302              	.LVL824:
 7303              	.L716:
ARM GAS  /tmp/ccE2jV6G.s 			page 229


 7304              		.cfi_restore_state
3505:src/display.c **** 	}
 7305              		.loc 1 3505 4 is_stmt 1 view .LVU2336
 7306 002c 1B06     		lsls	r3, r3, #24
 7307 002e 12D5     		bpl	.L724
 7308 0030 0121     		movs	r1, #1
 7309              	.LVL825:
 7310              	.L719:
 7311              	.LBB461:
 7312              	.LBI461:
3338:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7313              		.loc 1 3338 19 view .LVU2337
 7314              	.LBB462:
3339:src/display.c ****       }
 7315              		.loc 1 3339 2 view .LVU2338
 7316 0032 40F24A23 		movw	r3, #586
 7317 0036 0093     		str	r3, [sp]
 7318 0038 2046     		mov	r0, r4
 7319 003a 8E23     		movs	r3, #142
 7320 003c 4A22     		movs	r2, #74
 7321 003e FFF7FEFF 		bl	s_s_sized
 7322              	.LVL826:
3339:src/display.c ****       }
 7323              		.loc 1 3339 2 is_stmt 0 view .LVU2339
 7324              	.LBE462:
 7325              	.LBE461:
3507:src/display.c **** 
 7326              		.loc 1 3507 7 view .LVU2340
 7327 0042 02B0     		add	sp, sp, #8
 7328              		.cfi_remember_state
 7329              		.cfi_def_cfa_offset 8
 7330              		@ sp needed
 7331 0044 10BD     		pop	{r4, pc}
 7332              	.LVL827:
 7333              	.L723:
 7334              		.cfi_restore_state
 7335              	.LBB463:
 7336              	.LBI463:
3489:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7337              		.loc 1 3489 18 is_stmt 1 view .LVU2341
 7338              	.LBB464:
3490:src/display.c ****       }
 7339              		.loc 1 3490 2 view .LVU2342
3490:src/display.c ****       }
 7340              		.loc 1 3490 9 is_stmt 0 view .LVU2343
 7341 0046 0021     		movs	r1, #0
 7342 0048 FFF7FEFF 		bl	pixel_length
 7343              	.LVL828:
3490:src/display.c ****       }
 7344              		.loc 1 3490 9 view .LVU2344
 7345              	.LBE464:
 7346              	.LBE463:
3502:src/display.c **** 	}
 7347              		.loc 1 3502 4 view .LVU2345
 7348 004c 2C28     		cmp	r0, #44
 7349 004e D4BF     		ite	le
 7350 0050 0021     		movle	r1, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 230


 7351 0052 0121     		movgt	r1, #1
 7352 0054 DFE7     		b	.L717
 7353              	.LVL829:
 7354              	.L724:
 7355              	.LBB465:
 7356              	.LBI465:
3486:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7357              		.loc 1 3486 18 is_stmt 1 view .LVU2346
 7358              	.LBB466:
3487:src/display.c ****       }
 7359              		.loc 1 3487 2 view .LVU2347
3487:src/display.c ****       }
 7360              		.loc 1 3487 9 is_stmt 0 view .LVU2348
 7361 0056 FFF7FEFF 		bl	pixel_length
 7362              	.LVL830:
3487:src/display.c ****       }
 7363              		.loc 1 3487 9 view .LVU2349
 7364              	.LBE466:
 7365              	.LBE465:
3505:src/display.c **** 	}
 7366              		.loc 1 3505 4 view .LVU2350
 7367 005a 4B28     		cmp	r0, #75
 7368 005c D4BF     		ite	le
 7369 005e 0021     		movle	r1, #0
 7370 0060 0121     		movgt	r1, #1
 7371 0062 E6E7     		b	.L719
 7372              	.L726:
 7373              		.align	2
 7374              	.L725:
 7375 0064 00000000 		.word	StateWhileOn
 7376              		.cfi_endproc
 7377              	.LFE55:
 7379              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7380              		.align	2
 7381              	.LC3:
 7382 0000 32630600 		.ascii	"2c\006\000"
 7383              		.align	2
 7384              	.LC4:
 7385 0004 07C63C00 		.ascii	"\007\306<\000"
 7386              		.align	2
 7387              	.LC5:
 7388 0008 07876900 		.ascii	"\007\207i\000"
 7389              		.align	2
 7390              	.LC6:
 7391 000c 07C67900 		.ascii	"\007\306y\000"
 7392              		.align	2
 7393              	.LC7:
 7394 0010 07950600 		.ascii	"\007\225\006\000"
 7395              		.align	2
 7396              	.LC8:
 7397 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7397      060600
 7398 001b 00       		.align	2
 7399              	.LC9:
 7400 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7400      060600
 7401 0023 00       		.align	2
ARM GAS  /tmp/ccE2jV6G.s 			page 231


 7402              	.LC10:
 7403 0024 07C74400 		.ascii	"\007\307D\000"
 7404              		.align	2
 7405              	.LC11:
 7406 0028 07872000 		.ascii	"\007\207 \000"
 7407              		.align	2
 7408              	.LC12:
 7409 002c 06060788 		.ascii	"\006\006\007\210\007\000"
 7409      0700
 7410 0032 0000     		.align	2
 7411              	.LC13:
 7412 0034 07C73C00 		.ascii	"\007\307<\000"
 7413              		.align	2
 7414              	.LC14:
 7415 0038 07C77900 		.ascii	"\007\307y\000"
 7416              		.align	2
 7417              	.LC15:
 7418 003c 0784060D 		.ascii	"\007\204\006\015\000"
 7418      00
 7419 0041 000000   		.align	2
 7420              	.LC17:
 7421 0044 07E43F00 		.ascii	"\007\344?\000"
 7422              		.section	.text.annunciators,"ax",%progbits
 7423              		.align	1
 7424              		.p2align 2,,3
 7425              		.syntax unified
 7426              		.thumb
 7427              		.thumb_func
 7428              		.fpu fpv4-sp-d16
 7430              	annunciators:
 7431              	.LFB16:
 598:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7432              		.loc 1 598 36 is_stmt 1 view -0
 7433              		.cfi_startproc
 7434              		@ args = 0, pretend = 0, frame = 128
 7435              		@ frame_needed = 0, uses_anonymous_args = 0
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 7436              		.loc 1 600 7 view .LVU2352
 598:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7437              		.loc 1 598 36 is_stmt 0 view .LVU2353
 7438 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7439              		.cfi_def_cfa_offset 28
 7440              		.cfi_offset 4, -28
 7441              		.cfi_offset 5, -24
 7442              		.cfi_offset 6, -20
 7443              		.cfi_offset 7, -16
 7444              		.cfi_offset 8, -12
 7445              		.cfi_offset 9, -8
 7446              		.cfi_offset 14, -4
 612:src/display.c **** #  endif
 7447              		.loc 1 612 38 view .LVU2354
 7448 0004 C94E     		ldr	r6, .L841
 598:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7449              		.loc 1 598 36 view .LVU2355
 7450 0006 A1B0     		sub	sp, sp, #132
 7451              		.cfi_def_cfa_offset 160
 7452              	.LVL831:
ARM GAS  /tmp/ccE2jV6G.s 			page 232


 601:src/display.c ****       int n;
 7453              		.loc 1 601 7 is_stmt 1 view .LVU2356
 602:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7454              		.loc 1 602 7 view .LVU2357
 603:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7455              		.loc 1 603 7 view .LVU2358
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7456              		.loc 1 604 7 view .LVU2359
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7457              		.loc 1 604 43 is_stmt 0 view .LVU2360
 7458 0008 FFF7FEFF 		bl	cur_shift
 7459              	.LVL832:
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7460              		.loc 1 604 18 view .LVU2361
 7461 000c C84B     		ldr	r3, .L841+4
 612:src/display.c **** #  endif
 7462              		.loc 1 612 38 view .LVU2362
 7463 000e 3268     		ldr	r2, [r6]
 604:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7464              		.loc 1 604 18 view .LVU2363
 7465 0010 1F5C     		ldrb	r7, [r3, r0]	@ zero_extendqisi2
 7466              	.LVL833:
 612:src/display.c **** #  endif
 7467              		.loc 1 612 7 is_stmt 1 view .LVU2364
 612:src/display.c **** #  endif
 7468              		.loc 1 612 38 is_stmt 0 view .LVU2365
 7469 0012 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 643:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7470              		.loc 1 643 7 view .LVU2366
 7471 0016 0AAD     		add	r5, sp, #40
 7472              	.LVL834:
 643:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7473              		.loc 1 643 7 view .LVU2367
 7474 0018 2A22     		movs	r2, #42
 7475 001a 0021     		movs	r1, #0
 7476 001c 2846     		mov	r0, r5
 7477 001e FFF7FEFF 		bl	xset
 7478              	.LVL835:
 644:src/display.c ****       
 7479              		.loc 1 644 7 view .LVU2368
 7480 0022 15A8     		add	r0, sp, #84
 7481              	.LVL836:
 644:src/display.c ****       
 7482              		.loc 1 644 7 view .LVU2369
 7483 0024 2A22     		movs	r2, #42
 7484 0026 0021     		movs	r1, #0
 7485 0028 FFF7FEFF 		bl	xset
 7486              	.LVL837:
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7487              		.loc 1 646 11 view .LVU2370
 7488 002c 3368     		ldr	r3, [r6]
 7489 002e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7490              		.loc 1 646 10 view .LVU2371
 7491 0032 D807     		lsls	r0, r3, #31
 612:src/display.c **** #  endif
 7492              		.loc 1 612 17 view .LVU2372
ARM GAS  /tmp/ccE2jV6G.s 			page 233


 7493 0034 C4F38004 		ubfx	r4, r4, #2, #1
 7494              	.LVL838:
 615:src/display.c **** #  else
 7495              		.loc 1 615 7 is_stmt 1 view .LVU2373
 620:src/display.c **** #  else
 7496              		.loc 1 620 7 view .LVU2374
 630:src/display.c **** #else
 7497              		.loc 1 630 7 view .LVU2375
 638:src/display.c **** #else
 7498              		.loc 1 638 7 view .LVU2376
 643:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7499              		.loc 1 643 7 view .LVU2377
 644:src/display.c ****       
 7500              		.loc 1 644 7 view .LVU2378
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7501              		.loc 1 646 7 view .LVU2379
 646:src/display.c **** #ifdef SHOW_STACK_SIZE
 7502              		.loc 1 646 10 is_stmt 0 view .LVU2380
 7503 0038 00F1FC80 		bmi	.L825
 685:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7504              		.loc 1 685 12 is_stmt 1 view .LVU2381
 685:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7505              		.loc 1 685 15 is_stmt 0 view .LVU2382
 7506 003c 74BB     		cbnz	r4, .L741
 703:src/display.c **** 	    *p2++ = shift_char;
 7507              		.loc 1 703 4 is_stmt 1 view .LVU2383
 703:src/display.c **** 	    *p2++ = shift_char;
 7508              		.loc 1 703 7 is_stmt 0 view .LVU2384
 7509 003e 202F     		cmp	r7, #32
 7510 0040 00F0C781 		beq	.L742
 7511              	.L744:
 704:src/display.c **** 	    *p2++ = '\006';
 7512              		.loc 1 704 6 is_stmt 1 view .LVU2385
 7513              	.LVL839:
 705:src/display.c **** 	  }
 7514              		.loc 1 705 12 is_stmt 0 view .LVU2386
 7515 0044 0623     		movs	r3, #6
 704:src/display.c **** 	    *p2++ = '\006';
 7516              		.loc 1 704 12 view .LVU2387
 7517 0046 8DF85470 		strb	r7, [sp, #84]
 705:src/display.c **** 	  }
 7518              		.loc 1 705 6 is_stmt 1 view .LVU2388
 7519              	.LVL840:
 705:src/display.c **** 	  }
 7520              		.loc 1 705 12 is_stmt 0 view .LVU2389
 7521 004a 8DF85530 		strb	r3, [sp, #85]
 705:src/display.c **** 	  }
 7522              		.loc 1 705 9 view .LVU2390
 7523 004e 0DF15600 		add	r0, sp, #86
 7524              	.LVL841:
 7525              	.L743:
 711:src/display.c **** 	  *p2++ = ' ';
 7526              		.loc 1 711 2 is_stmt 1 view .LVU2391
 711:src/display.c **** 	  *p2++ = ' ';
 7527              		.loc 1 711 6 is_stmt 0 view .LVU2392
 7528 0052 B84A     		ldr	r2, .L841+8
 7529 0054 537D     		ldrb	r3, [r2, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccE2jV6G.s 			page 234


 711:src/display.c **** 	  *p2++ = ' ';
 7530              		.loc 1 711 5 view .LVU2393
 7531 0056 9907     		lsls	r1, r3, #30
 7532 0058 00F18D81 		bmi	.L826
 716:src/display.c **** 	  *p2++ = ' ';
 7533              		.loc 1 716 2 is_stmt 1 view .LVU2394
 716:src/display.c **** 	  *p2++ = ' ';
 7534              		.loc 1 716 5 is_stmt 0 view .LVU2395
 7535 005c 5B07     		lsls	r3, r3, #29
 7536 005e 00F18581 		bmi	.L827
 722:src/display.c **** 	  if (State2.wascomplex) {
 7537              		.loc 1 722 2 is_stmt 1 view .LVU2396
 722:src/display.c **** 	  if (State2.wascomplex) {
 7538              		.loc 1 722 5 is_stmt 0 view .LVU2397
 7539 0062 202F     		cmp	r7, #32
 7540 0064 00F0C781 		beq	.L828
 7541              	.L747:
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7542              		.loc 1 739 2 is_stmt 1 view .LVU2398
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7543              		.loc 1 739 16 is_stmt 0 view .LVU2399
 7544 0068 3368     		ldr	r3, [r6]
 7545 006a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7546 006e C3F30113 		ubfx	r3, r3, #4, #2
 739:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7547              		.loc 1 739 2 view .LVU2400
 7548 0072 012B     		cmp	r3, #1
 7549 0074 00F00782 		beq	.L783
 7550 0078 AF49     		ldr	r1, .L841+12
 7551 007a B04A     		ldr	r2, .L841+16
 7552 007c 022B     		cmp	r3, #2
 7553 007e 08BF     		it	eq
 7554 0080 1146     		moveq	r1, r2
 7555              	.L749:
 7556              	.LVL842:
 753:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7557              		.loc 1 753 2 is_stmt 1 view .LVU2401
 753:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7558              		.loc 1 753 7 is_stmt 0 view .LVU2402
 7559 0082 FFF7FEFF 		bl	scopy
 7560              	.LVL843:
 753:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7561              		.loc 1 753 7 view .LVU2403
 7562 0086 0446     		mov	r4, r0
 7563              	.LVL844:
 755:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7564              		.loc 1 755 2 is_stmt 1 view .LVU2404
 755:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7565              		.loc 1 755 6 is_stmt 0 view .LVU2405
 7566 0088 FFF7FEFF 		bl	get_trig_mode
 7567              	.LVL845:
 755:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7568              		.loc 1 755 5 view .LVU2406
 7569 008c 0228     		cmp	r0, #2
 7570 008e 40F02881 		bne	.L740
 756:src/display.c **** 	}
 7571              		.loc 1 756 4 is_stmt 1 view .LVU2407
ARM GAS  /tmp/ccE2jV6G.s 			page 235


 7572 0092 AB49     		ldr	r1, .L841+20
 7573 0094 2046     		mov	r0, r4
 7574 0096 FFF7FEFF 		bl	scopy
 7575              	.LVL846:
 7576 009a 22E1     		b	.L740
 7577              	.LVL847:
 7578              	.L741:
 767:src/display.c **** 	  *p2++ = '\007';
 7579              		.loc 1 767 2 view .LVU2408
 767:src/display.c **** 	  *p2++ = '\007';
 7580              		.loc 1 767 6 is_stmt 0 view .LVU2409
 7581 009c DFF89482 		ldr	r8, .L841+8
 7582 00a0 98F81530 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
 767:src/display.c **** 	  *p2++ = '\007';
 7583              		.loc 1 767 5 view .LVU2410
 7584 00a4 9807     		lsls	r0, r3, #30
 7585 00a6 00F12981 		bmi	.L829
 775:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7586              		.loc 1 775 4 is_stmt 1 view .LVU2411
 7587              	.LVL848:
 776:src/display.c **** 	  *p2++ = shift_char;
 7588              		.loc 1 776 4 view .LVU2412
 775:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7589              		.loc 1 775 10 is_stmt 0 view .LVU2413
 7590 00aa 4CF20773 		movw	r3, #50951
 7591 00ae ADF85430 		strh	r3, [sp, #84]	@ movhi
 777:src/display.c **** 	  //	  goto no_copy;
 7592              		.loc 1 777 4 is_stmt 1 view .LVU2414
 7593              	.LVL849:
 782:src/display.c **** 	    q = "\007\207i";
 7594              		.loc 1 782 8 is_stmt 0 view .LVU2415
 7595 00b2 98F81430 		ldrb	r3, [r8, #20]	@ zero_extendqisi2
 777:src/display.c **** 	  //	  goto no_copy;
 7596              		.loc 1 777 10 view .LVU2416
 7597 00b6 8DF85670 		strb	r7, [sp, #86]
 782:src/display.c **** 	    q = "\007\207i";
 7598              		.loc 1 782 7 view .LVU2417
 7599 00ba 13F0C00F 		tst	r3, #192
 777:src/display.c **** 	  //	  goto no_copy;
 7600              		.loc 1 777 7 view .LVU2418
 7601 00be 0DF15709 		add	r9, sp, #87
 7602              	.LVL850:
 782:src/display.c **** 	    q = "\007\207i";
 7603              		.loc 1 782 4 is_stmt 1 view .LVU2419
 782:src/display.c **** 	    q = "\007\207i";
 7604              		.loc 1 782 7 is_stmt 0 view .LVU2420
 7605 00c2 40F02C81 		bne	.L830
 7606              	.L752:
 787:src/display.c **** 	    q = "\007\307<";
 7607              		.loc 1 787 9 is_stmt 1 view .LVU2421
 787:src/display.c **** 	    q = "\007\307<";
 7608              		.loc 1 787 23 is_stmt 0 view .LVU2422
 7609 00c6 9F4B     		ldr	r3, .L841+24
 7610 00c8 1B68     		ldr	r3, [r3]
 787:src/display.c **** 	    q = "\007\307<";
 7611              		.loc 1 787 12 view .LVU2423
 7612 00ca 012B     		cmp	r3, #1
ARM GAS  /tmp/ccE2jV6G.s 			page 236


 7613 00cc 00F0A681 		beq	.L831
 792:src/display.c **** 	    q = "\007\307y";
 7614              		.loc 1 792 9 is_stmt 1 view .LVU2424
 792:src/display.c **** 	    q = "\007\307y";
 7615              		.loc 1 792 12 is_stmt 0 view .LVU2425
 7616 00d0 022B     		cmp	r3, #2
 7617 00d2 00F0DA81 		beq	.L832
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 7618              		.loc 1 600 22 view .LVU2426
 7619 00d6 2F46     		mov	r7, r5
 7620              	.LVL851:
 7621              	.L753:
 799:src/display.c **** 	    //	    q = "\007\207\007";
 7622              		.loc 1 799 6 is_stmt 1 view .LVU2427
 799:src/display.c **** 	    //	    q = "\007\207\007";
 7623              		.loc 1 799 10 is_stmt 0 view .LVU2428
 7624 00d8 FFF7FEFF 		bl	get_trig_mode
 7625              	.LVL852:
 801:src/display.c **** 	      *p2++ = '\207';
 7626              		.loc 1 801 14 view .LVU2429
 7627 00dc 0723     		movs	r3, #7
 799:src/display.c **** 	    //	    q = "\007\207\007";
 7628              		.loc 1 799 9 view .LVU2430
 7629 00de 0228     		cmp	r0, #2
 802:src/display.c **** 	      *p2++ = '\007';	    
 7630              		.loc 1 802 14 view .LVU2431
 7631 00e0 4FF08702 		mov	r2, #135
 801:src/display.c **** 	      *p2++ = '\207';
 7632              		.loc 1 801 14 view .LVU2432
 7633 00e4 89F80030 		strb	r3, [r9]
 799:src/display.c **** 	    //	    q = "\007\207\007";
 7634              		.loc 1 799 9 view .LVU2433
 7635 00e8 00F04A81 		beq	.L833
 806:src/display.c **** 	      *p2++ = '\207';
 7636              		.loc 1 806 8 is_stmt 1 view .LVU2434
 7637              	.LVL853:
 807:src/display.c **** 	      *p2++ = ' ';
 7638              		.loc 1 807 8 view .LVU2435
 808:src/display.c **** 	    }
 7639              		.loc 1 808 14 is_stmt 0 view .LVU2436
 7640 00ec 2023     		movs	r3, #32
 807:src/display.c **** 	      *p2++ = ' ';
 7641              		.loc 1 807 14 view .LVU2437
 7642 00ee 89F80120 		strb	r2, [r9, #1]
 808:src/display.c **** 	    }
 7643              		.loc 1 808 8 is_stmt 1 view .LVU2438
 808:src/display.c **** 	    }
 7644              		.loc 1 808 14 is_stmt 0 view .LVU2439
 7645 00f2 89F80230 		strb	r3, [r9, #2]
 808:src/display.c **** 	    }
 7646              		.loc 1 808 11 view .LVU2440
 7647 00f6 09F10309 		add	r9, r9, #3
 7648              	.LVL854:
 7649              	.L756:
 813:src/display.c **** 	  p2 = scopy(p2, q);
 7650              		.loc 1 813 4 is_stmt 1 view .LVU2441
 813:src/display.c **** 	  p2 = scopy(p2, q);
ARM GAS  /tmp/ccE2jV6G.s 			page 237


 7651              		.loc 1 813 9 is_stmt 0 view .LVU2442
 7652 00fa FFF7FEFF 		bl	is_dblmode
 7653              	.LVL855:
 813:src/display.c **** 	  p2 = scopy(p2, q);
 7654              		.loc 1 813 36 view .LVU2443
 7655 00fe 924B     		ldr	r3, .L841+28
 7656 0100 924A     		ldr	r2, .L841+32
 813:src/display.c **** 	  p2 = scopy(p2, q);
 7657              		.loc 1 813 9 view .LVU2444
 7658 0102 0146     		mov	r1, r0
 7659              	.LVL856:
 814:src/display.c **** #else
 7660              		.loc 1 814 4 is_stmt 1 view .LVU2445
 814:src/display.c **** #else
 7661              		.loc 1 814 9 is_stmt 0 view .LVU2446
 7662 0104 0029     		cmp	r1, #0
 7663 0106 14BF     		ite	ne
 7664 0108 1146     		movne	r1, r2
 7665 010a 1946     		moveq	r1, r3
 7666              	.LVL857:
 814:src/display.c **** #else
 7667              		.loc 1 814 9 view .LVU2447
 7668 010c 4846     		mov	r0, r9
 7669 010e FFF7FEFF 		bl	scopy
 7670              	.LVL858:
 833:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7671              		.loc 1 833 16 view .LVU2448
 7672 0112 3368     		ldr	r3, [r6]
 7673 0114 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7674 0118 C3F30113 		ubfx	r3, r3, #4, #2
 7675              	.LVL859:
 833:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7676              		.loc 1 833 2 is_stmt 1 view .LVU2449
 7677 011c 012B     		cmp	r3, #1
 7678 011e 00F03881 		beq	.L787
 7679 0122 864A     		ldr	r2, .L841+16
 7680 0124 8449     		ldr	r1, .L841+12
 7681 0126 022B     		cmp	r3, #2
 7682 0128 08BF     		it	eq
 7683 012a 1146     		moveq	r1, r2
 7684              	.LVL860:
 847:src/display.c **** 	  
 7685              		.loc 1 847 2 view .LVU2450
 847:src/display.c **** 	  
 7686              		.loc 1 847 7 is_stmt 0 view .LVU2451
 7687 012c FFF7FEFF 		bl	scopy
 7688              	.LVL861:
 7689              	.LDL1:
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7690              		.loc 1 851 2 is_stmt 1 view .LVU2452
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7691              		.loc 1 851 6 is_stmt 0 view .LVU2453
 7692 0130 98F81530 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7693              		.loc 1 851 5 view .LVU2454
 7694 0134 5907     		lsls	r1, r3, #29
 7695 0136 00F13481 		bmi	.L834
ARM GAS  /tmp/ccE2jV6G.s 			page 238


 7696              	.LVL862:
 7697              	.L759:
 854:src/display.c **** 	  decNumber y;
 7698              		.loc 1 854 2 is_stmt 1 view .LVU2455
 854:src/display.c **** 	  decNumber y;
 7699              		.loc 1 854 6 is_stmt 0 view .LVU2456
 7700 013a 98F81630 		ldrb	r3, [r8, #22]	@ zero_extendqisi2
 854:src/display.c **** 	  decNumber y;
 7701              		.loc 1 854 5 view .LVU2457
 7702 013e 5A06     		lsls	r2, r3, #25
 7703 0140 40F1CF80 		bpl	.L740
 7704              	.L731:
 7705              	.LBB467:
 855:src/display.c **** 	display_yreg:
 7706              		.loc 1 855 4 is_stmt 1 view .LVU2458
 862:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7707              		.loc 1 862 4 view .LVU2459
 862:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7708              		.loc 1 862 8 is_stmt 0 view .LVU2460
 7709 0144 3368     		ldr	r3, [r6]
 7710 0146 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 862:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7711              		.loc 1 862 7 view .LVU2461
 7712 014a DB07     		lsls	r3, r3, #31
 7713 014c 00F14C81 		bmi	.L835
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7714              		.loc 1 867 4 is_stmt 1 view .LVU2462
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7715              		.loc 1 867 34 is_stmt 0 view .LVU2463
 7716 0150 DFF81082 		ldr	r8, .L841+56
 7717 0154 D8F80010 		ldr	r1, [r8]
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7718              		.loc 1 867 4 view .LVU2464
 7719 0158 6329     		cmp	r1, #99
 7720 015a 00F32681 		bgt	.L836
 7721              	.LVL863:
 7722              	.L762:
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7723              		.loc 1 867 4 discriminator 5 view .LVU2465
 7724 015e 0131     		adds	r1, r1, #1
 7725              	.L766:
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7726              		.loc 1 867 4 discriminator 6 view .LVU2466
 7727 0160 01A8     		add	r0, sp, #4
 7728 0162 FFF7FEFF 		bl	getRegister
 7729              	.LVL864:
 870:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7730              		.loc 1 870 4 is_stmt 1 discriminator 6 view .LVU2467
 870:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7731              		.loc 1 870 7 is_stmt 0 discriminator 6 view .LVU2468
 7732 0166 9DF80C10 		ldrb	r1, [sp, #12]	@ zero_extendqisi2
 7733 016a 11F07001 		ands	r1, r1, #112
 7734 016e 3FD1     		bne	.L768
 871:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7735              		.loc 1 871 6 is_stmt 1 view .LVU2469
 871:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7736              		.loc 1 871 19 is_stmt 0 view .LVU2470
ARM GAS  /tmp/ccE2jV6G.s 			page 239


 7737 0170 704B     		ldr	r3, .L841+8
 7738 0172 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 871:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7739              		.loc 1 871 9 view .LVU2471
 7740 0174 D007     		lsls	r0, r2, #31
 7741 0176 00F15781 		bmi	.L837
 892:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7742              		.loc 1 892 6 is_stmt 1 view .LVU2472
 892:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7743              		.loc 1 892 21 is_stmt 0 view .LVU2473
 7744 017a 3268     		ldr	r2, [r6]
 7745 017c 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
 892:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7746              		.loc 1 892 9 view .LVU2474
 7747 0180 9206     		lsls	r2, r2, #26
 7748 0182 35D5     		bpl	.L768
 894:src/display.c **** #endif
 7749              		.loc 1 894 6 view .LVU2475
 7750 0184 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 894:src/display.c **** #endif
 7751              		.loc 1 894 3 view .LVU2476
 7752 0186 13F00204 		ands	r4, r3, #2
 7753 018a 31D1     		bne	.L768
 897:src/display.c **** #endif
 7754              		.loc 1 897 6 view .LVU2477
 7755 018c 6D4B     		ldr	r3, .L841+24
 897:src/display.c **** #endif
 7756              		.loc 1 897 3 view .LVU2478
 7757 018e 1B68     		ldr	r3, [r3]
 7758 0190 012B     		cmp	r3, #1
 7759 0192 2DD0     		beq	.L768
 899:src/display.c **** 	      char ltgteq;
 7760              		.loc 1 899 6 view .LVU2479
 7761 0194 3946     		mov	r1, r7
 7762 0196 01A8     		add	r0, sp, #4
 7763 0198 FFF7FEFF 		bl	set_x_fract
 7764              	.LVL865:
 899:src/display.c **** 	      char ltgteq;
 7765              		.loc 1 899 3 view .LVU2480
 7766 019c 40B3     		cbz	r0, .L768
 7767              	.LBB468:
 900:src/display.c **** 
 7768              		.loc 1 900 8 is_stmt 1 view .LVU2481
 902:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7769              		.loc 1 902 8 view .LVU2482
 902:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7770              		.loc 1 902 12 is_stmt 0 view .LVU2483
 7771 019e 2146     		mov	r1, r4
 7772 01a0 2846     		mov	r0, r5
 7773 01a2 FFF7FEFF 		bl	find_char
 7774              	.LVL866:
 7775 01a6 0446     		mov	r4, r0
 902:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7776              		.loc 1 902 10 view .LVU2484
 7777 01a8 0238     		subs	r0, r0, #2
 7778              	.LVL867:
 904:src/display.c **** 	      switch (ltgteq) {
ARM GAS  /tmp/ccE2jV6G.s 			page 240


 7779              		.loc 1 904 8 is_stmt 1 view .LVU2485
 904:src/display.c **** 	      switch (ltgteq) {
 7780              		.loc 1 904 15 is_stmt 0 view .LVU2486
 7781 01aa 14F8026C 		ldrb	r6, [r4, #-2]	@ zero_extendqisi2
 7782              	.LVL868:
 905:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7783              		.loc 1 905 8 is_stmt 1 view .LVU2487
 7784 01ae 472E     		cmp	r6, #71
 7785 01b0 00F07881 		beq	.L789
 907:src/display.c **** 	      }
 7786              		.loc 1 907 25 is_stmt 0 view .LVU2488
 7787 01b4 4C2E     		cmp	r6, #76
 7788 01b6 08BF     		it	eq
 7789 01b8 3C26     		moveq	r6, #60
 7790              	.LVL869:
 7791              	.L773:
 909:src/display.c **** 	      q[2] = ltgteq;
 7792              		.loc 1 909 8 is_stmt 1 view .LVU2489
 7793 01ba 6549     		ldr	r1, .L841+36
 7794 01bc FFF7FEFF 		bl	scopy
 7795              	.LVL870:
 910:src/display.c **** 
 7796              		.loc 1 910 8 view .LVU2490
 910:src/display.c **** 
 7797              		.loc 1 910 13 is_stmt 0 view .LVU2491
 7798 01c0 2670     		strb	r6, [r4]
 912:src/display.c **** 		goto skip;
 7799              		.loc 1 912 8 is_stmt 1 view .LVU2492
 912:src/display.c **** 		goto skip;
 7800              		.loc 1 912 12 is_stmt 0 view .LVU2493
 7801 01c2 0121     		movs	r1, #1
 7802 01c4 2846     		mov	r0, r5
 7803 01c6 FFF7FEFF 		bl	pixel_length
 7804              	.LVL871:
 912:src/display.c **** 		goto skip;
 7805              		.loc 1 912 11 view .LVU2494
 7806 01ca 2C28     		cmp	r0, #44
 7807 01cc 40F38980 		ble	.L740
 915:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7808              		.loc 1 915 8 is_stmt 1 view .LVU2495
 915:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7809              		.loc 1 915 14 is_stmt 0 view .LVU2496
 7810 01d0 0026     		movs	r6, #0
 7811              	.LVL872:
 915:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7812              		.loc 1 915 14 view .LVU2497
 7813 01d2 04F8036C 		strb	r6, [r4, #-3]
 916:src/display.c **** 		goto skip;
 7814              		.loc 1 916 8 is_stmt 1 view .LVU2498
 916:src/display.c **** 		goto skip;
 7815              		.loc 1 916 12 is_stmt 0 view .LVU2499
 7816 01d6 0121     		movs	r1, #1
 7817 01d8 2846     		mov	r0, r5
 7818 01da FFF7FEFF 		bl	pixel_length
 7819              	.LVL873:
 916:src/display.c **** 		goto skip;
 7820              		.loc 1 916 11 view .LVU2500
ARM GAS  /tmp/ccE2jV6G.s 			page 241


 7821 01de 2C28     		cmp	r0, #44
 7822 01e0 7FDD     		ble	.L740
 919:src/display.c **** 	    }
 7823              		.loc 1 919 8 is_stmt 1 view .LVU2501
 919:src/display.c **** 	    }
 7824              		.loc 1 919 39 is_stmt 0 view .LVU2502
 7825 01e2 7A1B     		subs	r2, r7, r5
 919:src/display.c **** 	    }
 7826              		.loc 1 919 8 view .LVU2503
 7827 01e4 3146     		mov	r1, r6
 7828 01e6 C2F12A02 		rsb	r2, r2, #42
 7829 01ea 3846     		mov	r0, r7
 7830 01ec FFF7FEFF 		bl	xset
 7831              	.LVL874:
 7832              	.L768:
 919:src/display.c **** 	    }
 7833              		.loc 1 919 8 view .LVU2504
 7834              	.LBE468:
 922:src/display.c **** 	    int extra_pixels;
 7835              		.loc 1 922 4 is_stmt 1 view .LVU2505
 922:src/display.c **** 	    int extra_pixels;
 7836              		.loc 1 922 10 is_stmt 0 view .LVU2506
 7837 01f0 0C23     		movs	r3, #12
 7838 01f2 0093     		str	r3, [sp]
 922:src/display.c **** 	    int extra_pixels;
 7839              		.loc 1 922 27 is_stmt 1 view .LVU2507
 7840 01f4 0EE0     		b	.L775
 7841              	.LVL875:
 7842              	.L838:
 7843              	.LBB469:
 930:src/display.c **** 
 7844              		.loc 1 930 6 is_stmt 0 view .LVU2508
 7845 01f6 009A     		ldr	r2, [sp]
 7846 01f8 0A32     		adds	r2, r2, #10
 7847 01fa FFF7FEFF 		bl	xset
 7848              	.LVL876:
 932:src/display.c **** 	  }
 7849              		.loc 1 932 6 is_stmt 1 view .LVU2509
 932:src/display.c **** 	  }
 7850              		.loc 1 932 30 is_stmt 0 view .LVU2510
 7851 01fe B4F14802 		subs	r2, r4, #72
 932:src/display.c **** 	  }
 7852              		.loc 1 932 8 view .LVU2511
 7853 0202 009B     		ldr	r3, [sp]
 932:src/display.c **** 	  }
 7854              		.loc 1 932 30 view .LVU2512
 7855 0204 48BF     		it	mi
 7856 0206 A4F14502 		submi	r2, r4, #69
 932:src/display.c **** 	  }
 7857              		.loc 1 932 8 view .LVU2513
 7858 020a A3EBA203 		sub	r3, r3, r2, asr #2
 7859              	.LBE469:
 922:src/display.c **** 	    int extra_pixels;
 7860              		.loc 1 922 4 view .LVU2514
 7861 020e 012B     		cmp	r3, #1
 7862              	.LBB470:
 932:src/display.c **** 	  }
ARM GAS  /tmp/ccE2jV6G.s 			page 242


 7863              		.loc 1 932 8 view .LVU2515
 7864 0210 0093     		str	r3, [sp]
 7865              	.LBE470:
 922:src/display.c **** 	    int extra_pixels;
 7866              		.loc 1 922 27 is_stmt 1 view .LVU2516
 922:src/display.c **** 	    int extra_pixels;
 7867              		.loc 1 922 4 is_stmt 0 view .LVU2517
 7868 0212 66DD     		ble	.L740
 7869              	.LVL877:
 7870              	.L775:
 7871              	.LBB471:
 923:src/display.c **** 
 7872              		.loc 1 923 6 is_stmt 1 view .LVU2518
 925:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7873              		.loc 1 925 6 view .LVU2519
 7874 0214 6A46     		mov	r2, sp
 7875 0216 3946     		mov	r1, r7
 7876 0218 01A8     		add	r0, sp, #4
 7877 021a FFF7FEFF 		bl	set_x_dn
 7878              	.LVL878:
 926:src/display.c **** 	    if (extra_pixels <= 0)
 7879              		.loc 1 926 6 view .LVU2520
 926:src/display.c **** 	    if (extra_pixels <= 0)
 7880              		.loc 1 926 21 is_stmt 0 view .LVU2521
 7881 021e 0121     		movs	r1, #1
 7882 0220 2846     		mov	r0, r5
 7883 0222 FFF7FEFF 		bl	pixel_length
 7884              	.LVL879:
 930:src/display.c **** 
 7885              		.loc 1 930 6 is_stmt 1 view .LVU2522
 926:src/display.c **** 	    if (extra_pixels <= 0)
 7886              		.loc 1 926 21 is_stmt 0 view .LVU2523
 7887 0226 0446     		mov	r4, r0
 7888              	.LVL880:
 927:src/display.c **** 	      break;
 7889              		.loc 1 927 6 is_stmt 1 view .LVU2524
 927:src/display.c **** 	      break;
 7890              		.loc 1 927 9 is_stmt 0 view .LVU2525
 7891 0228 4B2C     		cmp	r4, #75
 930:src/display.c **** 
 7892              		.loc 1 930 6 view .LVU2526
 7893 022a 4FF00001 		mov	r1, #0
 7894 022e 3846     		mov	r0, r7
 7895              	.LVL881:
 927:src/display.c **** 	      break;
 7896              		.loc 1 927 9 view .LVU2527
 7897 0230 E1DC     		bgt	.L838
 7898              	.LVL882:
 927:src/display.c **** 	      break;
 7899              		.loc 1 927 9 view .LVU2528
 7900              	.LBE471:
 7901 0232 56E0     		b	.L740
 7902              	.LVL883:
 7903              	.L825:
 927:src/display.c **** 	      break;
 7904              		.loc 1 927 9 view .LVU2529
 7905              	.LBE467:
ARM GAS  /tmp/ccE2jV6G.s 			page 243


 656:src/display.c **** 	    *p2++ = '\006';
 7906              		.loc 1 656 6 is_stmt 1 view .LVU2530
 657:src/display.c **** 	  }
 7907              		.loc 1 657 12 is_stmt 0 view .LVU2531
 7908 0234 0623     		movs	r3, #6
 7909 0236 8DF85530 		strb	r3, [sp, #85]
 656:src/display.c **** 	    *p2++ = '\006';
 7910              		.loc 1 656 12 view .LVU2532
 7911 023a 8DF85470 		strb	r7, [sp, #84]
 657:src/display.c **** 	  }
 7912              		.loc 1 657 6 is_stmt 1 view .LVU2533
 7913              	.LVL884:
 660:src/display.c **** 	default:
 7914              		.loc 1 660 2 view .LVU2534
 660:src/display.c **** 	default:
 7915              		.loc 1 660 9 is_stmt 0 view .LVU2535
 7916 023e FFF7FEFF 		bl	int_mode
 7917              	.LVL885:
 7918 0242 0138     		subs	r0, r0, #1
 7919 0244 C0B2     		uxtb	r0, r0
 7920 0246 0228     		cmp	r0, #2
 7921 0248 96BF     		itet	ls
 7922 024a 424B     		ldrls	r3, .L841+40
 7923 024c 4249     		ldrhi	r1, .L841+44
 7924 024e 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7925              	.LVL886:
 667:src/display.c **** 	*q++ = '\006';
 7926              		.loc 1 667 2 is_stmt 1 view .LVU2536
 667:src/display.c **** 	*q++ = '\006';
 7927              		.loc 1 667 6 is_stmt 0 view .LVU2537
 7928 0252 0DF15600 		add	r0, sp, #86
 7929              	.LVL887:
 667:src/display.c **** 	*q++ = '\006';
 7930              		.loc 1 667 6 view .LVU2538
 7931 0256 FFF7FEFF 		bl	scopy
 7932              	.LVL888:
 668:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7933              		.loc 1 668 7 view .LVU2539
 7934 025a 8046     		mov	r8, r0
 7935 025c 0623     		movs	r3, #6
 7936 025e 08F8013B 		strb	r3, [r8], #1
 667:src/display.c **** 	*q++ = '\006';
 7937              		.loc 1 667 6 view .LVU2540
 7938 0262 0746     		mov	r7, r0
 7939              	.LVL889:
 668:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7940              		.loc 1 668 2 is_stmt 1 view .LVU2541
 669:src/display.c **** 
 7941              		.loc 1 669 2 view .LVU2542
 669:src/display.c **** 
 7942              		.loc 1 669 7 is_stmt 0 view .LVU2543
 7943 0264 FFF7FEFF 		bl	word_size
 7944              	.LVL890:
 7945 0268 0222     		movs	r2, #2
 7946 026a 0146     		mov	r1, r0
 7947 026c 4046     		mov	r0, r8
 7948 026e FFF7FEFF 		bl	num_arg_0
ARM GAS  /tmp/ccE2jV6G.s 			page 244


 7949              	.LVL891:
 671:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7950              		.loc 1 671 19 view .LVU2544
 7951 0272 DFF8F4C0 		ldr	ip, .L841+60
 7952 0276 DCF80030 		ldr	r3, [ip]
 7953              	.LVL892:
 671:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7954              		.loc 1 671 2 is_stmt 1 view .LVU2545
 671:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7955              		.loc 1 671 5 is_stmt 0 view .LVU2546
 7956 027a 002B     		cmp	r3, #0
 7957 027c 2FDD     		ble	.L737
 672:src/display.c **** 	  if (*q == '1')
 7958              		.loc 1 672 4 is_stmt 1 view .LVU2547
 672:src/display.c **** 	  if (*q == '1')
 7959              		.loc 1 672 10 is_stmt 0 view .LVU2548
 7960 027e C3F10702 		rsb	r2, r3, #7
 7961 0282 5200     		lsls	r2, r2, #1
 672:src/display.c **** 	  if (*q == '1')
 7962              		.loc 1 672 6 view .LVU2549
 7963 0284 0092     		str	r2, [sp]
 673:src/display.c **** 	    n += 2;
 7964              		.loc 1 673 4 is_stmt 1 view .LVU2550
 673:src/display.c **** 	    n += 2;
 7965              		.loc 1 673 7 is_stmt 0 view .LVU2551
 7966 0286 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 7967 0288 3129     		cmp	r1, #49
 674:src/display.c **** 	  if (q[1] == '1')
 7968              		.loc 1 674 6 is_stmt 1 view .LVU2552
 674:src/display.c **** 	  if (q[1] == '1')
 7969              		.loc 1 674 8 is_stmt 0 view .LVU2553
 7970 028a 04BF     		itt	eq
 7971 028c 0232     		addeq	r2, r2, #2
 7972 028e 0092     		streq	r2, [sp]
 675:src/display.c **** 	    n += 2;
 7973              		.loc 1 675 4 is_stmt 1 view .LVU2554
 675:src/display.c **** 	    n += 2;
 7974              		.loc 1 675 7 is_stmt 0 view .LVU2555
 7975 0290 B978     		ldrb	r1, [r7, #2]	@ zero_extendqisi2
 7976 0292 3129     		cmp	r1, #49
 676:src/display.c **** 	  while (n-- > 0)
 7977              		.loc 1 676 6 is_stmt 1 view .LVU2556
 676:src/display.c **** 	  while (n-- > 0)
 7978              		.loc 1 676 8 is_stmt 0 view .LVU2557
 7979 0294 08BF     		it	eq
 7980 0296 0232     		addeq	r2, r2, #2
 677:src/display.c **** 	    *p2++ = '\006';
 7981              		.loc 1 677 10 is_stmt 1 view .LVU2558
 677:src/display.c **** 	    *p2++ = '\006';
 7982              		.loc 1 677 12 is_stmt 0 view .LVU2559
 7983 0298 511E     		subs	r1, r2, #1
 677:src/display.c **** 	    *p2++ = '\006';
 7984              		.loc 1 677 10 view .LVU2560
 7985 029a 002A     		cmp	r2, #0
 677:src/display.c **** 	    *p2++ = '\006';
 7986              		.loc 1 677 12 view .LVU2561
 7987 029c 0091     		str	r1, [sp]
ARM GAS  /tmp/ccE2jV6G.s 			page 245


 677:src/display.c **** 	    *p2++ = '\006';
 7988              		.loc 1 677 10 view .LVU2562
 7989 029e 40F3FA80 		ble	.L735
 678:src/display.c **** 
 7990              		.loc 1 678 12 view .LVU2563
 7991 02a2 0621     		movs	r1, #6
 7992              	.L736:
 678:src/display.c **** 
 7993              		.loc 1 678 6 is_stmt 1 view .LVU2564
 7994              	.LVL893:
 678:src/display.c **** 
 7995              		.loc 1 678 12 is_stmt 0 view .LVU2565
 7996 02a4 00F8011B 		strb	r1, [r0], #1
 7997              	.LVL894:
 677:src/display.c **** 	    *p2++ = '\006';
 7998              		.loc 1 677 10 is_stmt 1 view .LVU2566
 677:src/display.c **** 	    *p2++ = '\006';
 7999              		.loc 1 677 12 is_stmt 0 view .LVU2567
 8000 02a8 009B     		ldr	r3, [sp]
 8001 02aa 5A1E     		subs	r2, r3, #1
 677:src/display.c **** 	    *p2++ = '\006';
 8002              		.loc 1 677 10 view .LVU2568
 8003 02ac 002B     		cmp	r3, #0
 677:src/display.c **** 	    *p2++ = '\006';
 8004              		.loc 1 677 12 view .LVU2569
 8005 02ae 0092     		str	r2, [sp]
 677:src/display.c **** 	    *p2++ = '\006';
 8006              		.loc 1 677 10 view .LVU2570
 8007 02b0 F8DC     		bgt	.L736
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8008              		.loc 1 680 4 is_stmt 1 view .LVU2571
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8009              		.loc 1 680 11 is_stmt 0 view .LVU2572
 8010 02b2 DCF80030 		ldr	r3, [ip]
 8011 02b6 0093     		str	r3, [sp]
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8012              		.loc 1 680 27 is_stmt 1 view .LVU2573
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8013              		.loc 1 680 4 is_stmt 0 view .LVU2574
 8014 02b8 002B     		cmp	r3, #0
 8015 02ba 10DB     		blt	.L737
 8016              	.L777:
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8017              		.loc 1 680 4 view .LVU2575
 8018 02bc DFF87480 		ldr	r8, .L841+8
 8019              	.LVL895:
 8020              	.L739:
 681:src/display.c **** 	}
 8021              		.loc 1 681 6 is_stmt 1 view .LVU2576
 681:src/display.c **** 	}
 8022              		.loc 1 681 20 is_stmt 0 view .LVU2577
 8023 02c0 98F81420 		ldrb	r2, [r8, #20]	@ zero_extendqisi2
 8024 02c4 C2F3C202 		ubfx	r2, r2, #3, #3
 681:src/display.c **** 	}
 8025              		.loc 1 681 12 view .LVU2578
 8026 02c8 9A42     		cmp	r2, r3
 8027 02ca 0CBF     		ite	eq
ARM GAS  /tmp/ccE2jV6G.s 			page 246


 8028 02cc 7C23     		moveq	r3, #124
 8029 02ce 2723     		movne	r3, #39
 8030              	.LVL896:
 681:src/display.c **** 	}
 8031              		.loc 1 681 12 view .LVU2579
 8032 02d0 00F8013B 		strb	r3, [r0], #1
 8033              	.LVL897:
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8034              		.loc 1 680 35 is_stmt 1 view .LVU2580
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8035              		.loc 1 680 36 is_stmt 0 view .LVU2581
 8036 02d4 009B     		ldr	r3, [sp]
 8037 02d6 013B     		subs	r3, r3, #1
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8038              		.loc 1 680 4 view .LVU2582
 8039 02d8 002B     		cmp	r3, #0
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8040              		.loc 1 680 36 view .LVU2583
 8041 02da 0093     		str	r3, [sp]
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8042              		.loc 1 680 27 is_stmt 1 view .LVU2584
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8043              		.loc 1 680 4 is_stmt 0 view .LVU2585
 8044 02dc F0DA     		bge	.L739
 8045              	.L737:
 683:src/display.c ****       }
 8046              		.loc 1 683 2 is_stmt 1 view .LVU2586
 683:src/display.c ****       }
 8047              		.loc 1 683 5 is_stmt 0 view .LVU2587
 8048 02de 002C     		cmp	r4, #0
 8049 02e0 55D1     		bne	.L839
 8050              	.LVL898:
 8051              	.L740:
 937:src/display.c ****       set_status_top(buf2);
 8052              		.loc 1 937 11 is_stmt 1 view .LVU2588
 8053 02e2 2846     		mov	r0, r5
 8054 02e4 FFF7FEFF 		bl	set_status
 8055              	.LVL899:
 938:src/display.c ****       
 8056              		.loc 1 938 7 view .LVU2589
 8057              	.LBB474:
 8058              	.LBI474:
3499:src/display.c **** 	if (no_status_top) return;
 8059              		.loc 1 3499 19 view .LVU2590
 8060              	.LBB475:
3500:src/display.c **** 	if (State2.runmode) {
 8061              		.loc 1 3500 2 view .LVU2591
3500:src/display.c **** 	if (State2.runmode) {
 8062              		.loc 1 3500 6 is_stmt 0 view .LVU2592
 8063 02e8 1C4B     		ldr	r3, .L841+48
3500:src/display.c **** 	if (State2.runmode) {
 8064              		.loc 1 3500 5 view .LVU2593
 8065 02ea B3F90030 		ldrsh	r3, [r3]
 8066 02ee 13B9     		cbnz	r3, .L727
 8067 02f0 15A8     		add	r0, sp, #84
 8068              	.LVL900:
3500:src/display.c **** 	if (State2.runmode) {
ARM GAS  /tmp/ccE2jV6G.s 			page 247


 8069              		.loc 1 3500 5 view .LVU2594
 8070 02f2 FFF7FEFF 		bl	set_status_top.part.0
 8071              	.LVL901:
 8072              	.L727:
3500:src/display.c **** 	if (State2.runmode) {
 8073              		.loc 1 3500 5 view .LVU2595
 8074              	.LBE475:
 8075              	.LBE474:
 940:src/display.c **** #else
 8076              		.loc 1 940 5 view .LVU2596
 8077 02f6 21B0     		add	sp, sp, #132
 8078              		.cfi_remember_state
 8079              		.cfi_def_cfa_offset 28
 8080              		@ sp needed
 8081 02f8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8082              	.LVL902:
 8083              	.L829:
 8084              		.cfi_restore_state
 768:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8085              		.loc 1 768 4 is_stmt 1 view .LVU2597
 769:src/display.c **** 	  *p2++ = shift_char;
 8086              		.loc 1 769 4 view .LVU2598
 772:src/display.c **** 	}
 8087              		.loc 1 772 10 is_stmt 0 view .LVU2599
 8088 02fc 1423     		movs	r3, #20
 8089 02fe 8DF85730 		strb	r3, [sp, #87]
 782:src/display.c **** 	    q = "\007\207i";
 8090              		.loc 1 782 8 view .LVU2600
 8091 0302 98F81430 		ldrb	r3, [r8, #20]	@ zero_extendqisi2
 770:src/display.c **** 	  //	  q = "\024";
 8092              		.loc 1 770 10 view .LVU2601
 8093 0306 8DF85670 		strb	r7, [sp, #86]
 768:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8094              		.loc 1 768 10 view .LVU2602
 8095 030a 4EF20742 		movw	r2, #58375
 782:src/display.c **** 	    q = "\007\207i";
 8096              		.loc 1 782 7 view .LVU2603
 8097 030e 13F0C00F 		tst	r3, #192
 768:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8098              		.loc 1 768 10 view .LVU2604
 8099 0312 ADF85420 		strh	r2, [sp, #84]	@ movhi
 770:src/display.c **** 	  //	  q = "\024";
 8100              		.loc 1 770 4 is_stmt 1 view .LVU2605
 8101              	.LVL903:
 772:src/display.c **** 	}
 8102              		.loc 1 772 4 view .LVU2606
 772:src/display.c **** 	}
 8103              		.loc 1 772 7 is_stmt 0 view .LVU2607
 8104 0316 0DF15809 		add	r9, sp, #88
 8105              	.LVL904:
 782:src/display.c **** 	    q = "\007\207i";
 8106              		.loc 1 782 4 is_stmt 1 view .LVU2608
 782:src/display.c **** 	    q = "\007\207i";
 8107              		.loc 1 782 7 is_stmt 0 view .LVU2609
 8108 031a 3FF4D4AE 		beq	.L752
 8109              	.L830:
 783:src/display.c **** 	    p = scopy(p, q);
ARM GAS  /tmp/ccE2jV6G.s 			page 248


 8110              		.loc 1 783 6 is_stmt 1 view .LVU2610
 8111              	.LVL905:
 784:src/display.c **** 	    //	    goto no_copy;
 8112              		.loc 1 784 6 view .LVU2611
 784:src/display.c **** 	    //	    goto no_copy;
 8113              		.loc 1 784 10 is_stmt 0 view .LVU2612
 8114 031e 1049     		ldr	r1, .L841+52
 8115 0320 2846     		mov	r0, r5
 8116 0322 FFF7FEFF 		bl	scopy
 8117              	.LVL906:
 8118 0326 0746     		mov	r7, r0
 8119              	.LVL907:
 784:src/display.c **** 	    //	    goto no_copy;
 8120              		.loc 1 784 10 view .LVU2613
 8121 0328 D6E6     		b	.L753
 8122              	.L842:
 8123 032a 00BF     		.align	2
 8124              	.L841:
 8125 032c 00000000 		.word	main_ram
 8126 0330 00000000 		.word	.LANCHOR15
 8127 0334 00000000 		.word	StateWhileOn
 8128 0338 10000000 		.word	.LC7
 8129 033c 1C000000 		.word	.LC9
 8130 0340 2C000000 		.word	.LC12
 8131 0344 00000000 		.word	RectPolConv
 8132 0348 28000000 		.word	.LC11
 8133 034c 24000000 		.word	.LC10
 8134 0350 44000000 		.word	.LC17
 8135 0354 00000000 		.word	.LANCHOR16
 8136 0358 00000000 		.word	.LC3
 8137 035c 00000000 		.word	.LANCHOR18
 8138 0360 08000000 		.word	.LC5
 8139 0364 00000000 		.word	ShowRegister
 8140 0368 00000000 		.word	IntMaxWindow
 8141              	.LVL908:
 8142              	.L827:
 717:src/display.c **** 	  *p2 = '\015';
 8143              		.loc 1 717 4 is_stmt 1 view .LVU2614
 717:src/display.c **** 	  *p2 = '\015';
 8144              		.loc 1 717 10 is_stmt 0 view .LVU2615
 8145 036c 2022     		movs	r2, #32
 718:src/display.c **** 	  goto skip;
 8146              		.loc 1 718 8 view .LVU2616
 8147 036e 0D23     		movs	r3, #13
 717:src/display.c **** 	  *p2 = '\015';
 8148              		.loc 1 717 10 view .LVU2617
 8149 0370 0270     		strb	r2, [r0]
 718:src/display.c **** 	  goto skip;
 8150              		.loc 1 718 4 is_stmt 1 view .LVU2618
 718:src/display.c **** 	  goto skip;
 8151              		.loc 1 718 8 is_stmt 0 view .LVU2619
 8152 0372 4370     		strb	r3, [r0, #1]
 719:src/display.c **** 	}
 8153              		.loc 1 719 4 is_stmt 1 view .LVU2620
 8154 0374 B5E7     		b	.L740
 8155              	.LVL909:
 8156              	.L826:
ARM GAS  /tmp/ccE2jV6G.s 			page 249


 712:src/display.c **** 	  *p2 = '\024';
 8157              		.loc 1 712 4 view .LVU2621
 712:src/display.c **** 	  *p2 = '\024';
 8158              		.loc 1 712 10 is_stmt 0 view .LVU2622
 8159 0376 2022     		movs	r2, #32
 713:src/display.c **** 	  goto skip;
 8160              		.loc 1 713 8 view .LVU2623
 8161 0378 1423     		movs	r3, #20
 712:src/display.c **** 	  *p2 = '\024';
 8162              		.loc 1 712 10 view .LVU2624
 8163 037a 0270     		strb	r2, [r0]
 713:src/display.c **** 	  goto skip;
 8164              		.loc 1 713 4 is_stmt 1 view .LVU2625
 713:src/display.c **** 	  goto skip;
 8165              		.loc 1 713 8 is_stmt 0 view .LVU2626
 8166 037c 4370     		strb	r3, [r0, #1]
 714:src/display.c **** 	}
 8167              		.loc 1 714 4 is_stmt 1 view .LVU2627
 8168 037e B0E7     		b	.L740
 8169              	.LVL910:
 8170              	.L833:
 801:src/display.c **** 	      *p2++ = '\207';
 8171              		.loc 1 801 8 view .LVU2628
 802:src/display.c **** 	      *p2++ = '\007';	    
 8172              		.loc 1 802 8 view .LVU2629
 803:src/display.c **** 	    }
 8173              		.loc 1 803 14 is_stmt 0 view .LVU2630
 8174 0380 89F80230 		strb	r3, [r9, #2]
 802:src/display.c **** 	      *p2++ = '\007';	    
 8175              		.loc 1 802 14 view .LVU2631
 8176 0384 89F80120 		strb	r2, [r9, #1]
 803:src/display.c **** 	    }
 8177              		.loc 1 803 8 is_stmt 1 view .LVU2632
 803:src/display.c **** 	    }
 8178              		.loc 1 803 11 is_stmt 0 view .LVU2633
 8179 0388 09F10309 		add	r9, r9, #3
 8180              	.LVL911:
 803:src/display.c **** 	    }
 8181              		.loc 1 803 11 view .LVU2634
 8182 038c B5E6     		b	.L756
 8183              	.LVL912:
 8184              	.L839:
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 8185              		.loc 1 600 22 view .LVU2635
 8186 038e 2F46     		mov	r7, r5
 8187              	.LVL913:
 600:src/display.c ****       char buf2[42], *p2 = buf2;
 8188              		.loc 1 600 22 view .LVU2636
 8189 0390 D8E6     		b	.L731
 8190              	.LVL914:
 8191              	.L787:
 839:src/display.c **** #endif
 8192              		.loc 1 839 19 view .LVU2637
 8193 0392 4549     		ldr	r1, .L843
 8194              	.LVL915:
 847:src/display.c **** 	  
 8195              		.loc 1 847 2 is_stmt 1 view .LVU2638
ARM GAS  /tmp/ccE2jV6G.s 			page 250


 847:src/display.c **** 	  
 8196              		.loc 1 847 7 is_stmt 0 view .LVU2639
 8197 0394 FFF7FEFF 		bl	scopy
 8198              	.LVL916:
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 8199              		.loc 1 851 2 is_stmt 1 view .LVU2640
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 8200              		.loc 1 851 6 is_stmt 0 view .LVU2641
 8201 0398 98F81530 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 8202              		.loc 1 851 5 view .LVU2642
 8203 039c 5907     		lsls	r1, r3, #29
 8204 039e 7FF5CCAE 		bpl	.L759
 8205              	.LVL917:
 8206              	.L834:
 852:src/display.c **** 	} // no need to skip y display with arrow here
 8207              		.loc 1 852 4 is_stmt 1 view .LVU2643
 8208 03a2 4249     		ldr	r1, .L843+4
 8209 03a4 FFF7FEFF 		bl	scopy
 8210              	.LVL918:
 852:src/display.c **** 	} // no need to skip y display with arrow here
 8211              		.loc 1 852 4 is_stmt 0 view .LVU2644
 8212 03a8 C7E6     		b	.L759
 8213              	.L836:
 8214              	.LBB476:
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8215              		.loc 1 867 75 discriminator 2 view .LVU2645
 8216 03aa FFF7FEFF 		bl	stack_size
 8217              	.LVL919:
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8218              		.loc 1 867 62 discriminator 2 view .LVU2646
 8219 03ae D8F80010 		ldr	r1, [r8]
 8220 03b2 6330     		adds	r0, r0, #99
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8221              		.loc 1 867 46 discriminator 2 view .LVU2647
 8222 03b4 8842     		cmp	r0, r1
 8223 03b6 FFF6D2AE 		blt	.L762
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8224              		.loc 1 867 91 discriminator 4 view .LVU2648
 8225 03ba FFF7FEFF 		bl	get_cmdline
 8226              	.LVL920:
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8227              		.loc 1 867 88 discriminator 4 view .LVU2649
 8228 03be 28B1     		cbz	r0, .L765
 868:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8229              		.loc 1 868 7 view .LVU2650
 8230 03c0 002C     		cmp	r4, #0
 8231 03c2 6CD0     		beq	.L764
 868:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8232              		.loc 1 868 28 discriminator 1 view .LVU2651
 8233 03c4 3A4B     		ldr	r3, .L843+8
 8234 03c6 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 868:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8235              		.loc 1 868 10 discriminator 1 view .LVU2652
 8236 03c8 5C06     		lsls	r4, r3, #25
 8237              	.LVL921:
 868:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
ARM GAS  /tmp/ccE2jV6G.s 			page 251


 8238              		.loc 1 868 10 discriminator 1 view .LVU2653
 8239 03ca 68D4     		bmi	.L764
 8240              	.L765:
 8241 03cc D8F80010 		ldr	r1, [r8]
 8242 03d0 C5E6     		b	.L762
 8243              	.LVL922:
 8244              	.L742:
 868:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8245              		.loc 1 868 10 discriminator 1 view .LVU2654
 8246              	.LBE476:
 703:src/display.c **** 	    *p2++ = shift_char;
 8247              		.loc 1 703 30 discriminator 1 view .LVU2655
 8248 03d2 FFF7FEFF 		bl	is_dblmode
 8249              	.LVL923:
 703:src/display.c **** 	    *p2++ = shift_char;
 8250              		.loc 1 703 26 discriminator 1 view .LVU2656
 8251 03d6 0028     		cmp	r0, #0
 8252 03d8 3FF434AE 		beq	.L744
 708:src/display.c **** 	  }
 8253              		.loc 1 708 6 is_stmt 1 view .LVU2657
 8254              	.LVL924:
 708:src/display.c **** 	  }
 8255              		.loc 1 708 12 is_stmt 0 view .LVU2658
 8256 03dc 4423     		movs	r3, #68
 8257 03de 8DF85430 		strb	r3, [sp, #84]
 708:src/display.c **** 	  }
 8258              		.loc 1 708 9 view .LVU2659
 8259 03e2 0DF15500 		add	r0, sp, #85
 8260              	.LVL925:
 708:src/display.c **** 	  }
 8261              		.loc 1 708 9 view .LVU2660
 8262 03e6 34E6     		b	.L743
 8263              	.LVL926:
 8264              	.L835:
 8265              	.LBB477:
 863:src/display.c **** 	    goto skip;
 8266              		.loc 1 863 6 is_stmt 1 view .LVU2661
 8267 03e8 6520     		movs	r0, #101
 8268 03ea FFF7FEFF 		bl	get_reg_n_int
 8269              	.LVL927:
 8270 03ee 3A46     		mov	r2, r7
 8271 03f0 FFF7FEFF 		bl	set_int_x
 8272              	.LVL928:
 864:src/display.c **** 	  }
 8273              		.loc 1 864 6 view .LVU2662
 8274 03f4 75E7     		b	.L740
 8275              	.LVL929:
 8276              	.L828:
 864:src/display.c **** 	  }
 8277              		.loc 1 864 6 is_stmt 0 view .LVU2663
 8278              	.LBE477:
 722:src/display.c **** 	  if (State2.wascomplex) {
 8279              		.loc 1 722 28 discriminator 1 view .LVU2664
 8280 03f6 137D     		ldrb	r3, [r2, #20]	@ zero_extendqisi2
 722:src/display.c **** 	  if (State2.wascomplex) {
 8281              		.loc 1 722 24 discriminator 1 view .LVU2665
 8282 03f8 13F0C00F 		tst	r3, #192
ARM GAS  /tmp/ccE2jV6G.s 			page 252


 8283 03fc 4DD1     		bne	.L781
 722:src/display.c **** 	  if (State2.wascomplex) {
 8284              		.loc 1 722 60 discriminator 2 view .LVU2666
 8285 03fe 2D4B     		ldr	r3, .L843+12
 8286 0400 1B68     		ldr	r3, [r3]
 722:src/display.c **** 	  if (State2.wascomplex) {
 8287              		.loc 1 722 46 discriminator 2 view .LVU2667
 8288 0402 002B     		cmp	r3, #0
 8289 0404 3FF430AE 		beq	.L747
 723:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8290              		.loc 1 723 4 is_stmt 1 view .LVU2668
 726:src/display.c **** 	    if (RectPolConv == 1) {
 8291              		.loc 1 726 9 view .LVU2669
 727:src/display.c **** 	      q = "\007\306<";
 8292              		.loc 1 727 6 view .LVU2670
 731:src/display.c **** 	    }
 8293              		.loc 1 731 10 is_stmt 0 view .LVU2671
 8294 0408 2B49     		ldr	r1, .L843+16
 8295 040a 2C4A     		ldr	r2, .L843+20
 8296 040c 012B     		cmp	r3, #1
 8297 040e 18BF     		it	ne
 8298 0410 1146     		movne	r1, r2
 8299              	.L748:
 8300              	.LVL930:
 734:src/display.c **** 
 8301              		.loc 1 734 4 is_stmt 1 view .LVU2672
 734:src/display.c **** 
 8302              		.loc 1 734 8 is_stmt 0 view .LVU2673
 8303 0412 2846     		mov	r0, r5
 8304              	.LVL931:
 734:src/display.c **** 
 8305              		.loc 1 734 8 view .LVU2674
 8306 0414 FFF7FEFF 		bl	scopy
 8307              	.LVL932:
 734:src/display.c **** 
 8308              		.loc 1 734 8 view .LVU2675
 8309 0418 0746     		mov	r7, r0
 8310              	.LVL933:
 736:src/display.c **** 	}
 8311              		.loc 1 736 4 is_stmt 1 view .LVU2676
 8312 041a 93E6     		b	.L731
 8313              	.LVL934:
 8314              	.L831:
 788:src/display.c **** 	    p = scopy(p, q);
 8315              		.loc 1 788 6 view .LVU2677
 789:src/display.c **** 	    //	    goto no_copy;
 8316              		.loc 1 789 6 view .LVU2678
 789:src/display.c **** 	    //	    goto no_copy;
 8317              		.loc 1 789 10 is_stmt 0 view .LVU2679
 8318 041c 2849     		ldr	r1, .L843+24
 8319 041e 2846     		mov	r0, r5
 8320 0420 FFF7FEFF 		bl	scopy
 8321              	.LVL935:
 8322 0424 0746     		mov	r7, r0
 8323              	.LVL936:
 789:src/display.c **** 	    //	    goto no_copy;
 8324              		.loc 1 789 10 view .LVU2680
ARM GAS  /tmp/ccE2jV6G.s 			page 253


 8325 0426 57E6     		b	.L753
 8326              	.LVL937:
 8327              	.L837:
 8328              	.LBB478:
 8329              	.LBB472:
 872:src/display.c **** 
 8330              		.loc 1 872 8 is_stmt 1 view .LVU2681
 872:src/display.c **** 
 8331              		.loc 1 872 44 is_stmt 0 view .LVU2682
 8332 0428 3368     		ldr	r3, [r6]
 8333 042a 264C     		ldr	r4, .L843+28
 8334 042c 93F8E777 		ldrb	r7, [r3, #2023]	@ zero_extendqisi2
 8335              	.LVL938:
 874:src/display.c **** 	      UState.nothousands = 1;
 8336              		.loc 1 874 8 view .LVU2683
 8337 0430 2A22     		movs	r2, #42
 8338 0432 2846     		mov	r0, r5
 8339 0434 FFF7FEFF 		bl	xset
 8340              	.LVL939:
 875:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8341              		.loc 1 875 27 view .LVU2684
 8342 0438 3268     		ldr	r2, [r6]
 8343 043a 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8344 043e 43F04003 		orr	r3, r3, #64
 8345 0442 82F8E737 		strb	r3, [r2, #2023]
 876:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8346              		.loc 1 876 8 view .LVU2685
 8347 0446 2946     		mov	r1, r5
 8348 0448 01A8     		add	r0, sp, #4
 8349 044a FFF7FEFF 		bl	set_x_hms
 8350              	.LVL940:
 877:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8351              		.loc 1 877 27 view .LVU2686
 8352 044e 3368     		ldr	r3, [r6]
 8353 0450 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 872:src/display.c **** 
 8354              		.loc 1 872 44 view .LVU2687
 8355 0454 C7F38017 		ubfx	r7, r7, #6, #1
 8356              	.LVL941:
 874:src/display.c **** 	      UState.nothousands = 1;
 8357              		.loc 1 874 8 is_stmt 1 view .LVU2688
 875:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8358              		.loc 1 875 8 view .LVU2689
 876:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8359              		.loc 1 876 8 view .LVU2690
 877:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8360              		.loc 1 877 8 view .LVU2691
 877:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8361              		.loc 1 877 27 is_stmt 0 view .LVU2692
 8362 0458 67F38612 		bfi	r2, r7, #6, #1
 8363 045c 83F8E727 		strb	r2, [r3, #2023]
 882:src/display.c **** 	      while (*p) {
 8364              		.loc 1 882 8 is_stmt 1 view .LVU2693
 8365              	.LVL942:
 883:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8366              		.loc 1 883 8 view .LVU2694
 883:src/display.c **** 		replace_char(buf, p[0], p[1]);
ARM GAS  /tmp/ccE2jV6G.s 			page 254


 8367              		.loc 1 883 14 view .LVU2695
 883:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8368              		.loc 1 883 15 is_stmt 0 view .LVU2696
 8369 0460 4021     		movs	r1, #64
 877:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8370              		.loc 1 877 27 view .LVU2697
 8371 0462 0522     		movs	r2, #5
 8372 0464 05E0     		b	.L771
 8373              	.LVL943:
 8374              	.L840:
 883:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8375              		.loc 1 883 15 view .LVU2698
 8376 0466 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8377              	.LVL944:
 883:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8378              		.loc 1 883 14 view .LVU2699
 8379 046a 0029     		cmp	r1, #0
 8380 046c 3FF439AF 		beq	.L740
 8381 0470 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8382              	.LVL945:
 8383              	.L771:
 884:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8384              		.loc 1 884 3 is_stmt 1 view .LVU2700
 8385 0472 2846     		mov	r0, r5
 8386 0474 FFF7FEFF 		bl	replace_char
 8387              	.LVL946:
 885:src/display.c **** 		  goto skip;
 8388              		.loc 1 885 3 view .LVU2701
 885:src/display.c **** 		  goto skip;
 8389              		.loc 1 885 7 is_stmt 0 view .LVU2702
 8390 0478 0121     		movs	r1, #1
 8391 047a 2846     		mov	r0, r5
 8392 047c FFF7FEFF 		bl	pixel_length
 8393              	.LVL947:
 888:src/display.c **** 	      }
 8394              		.loc 1 888 3 is_stmt 1 view .LVU2703
 883:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8395              		.loc 1 883 14 view .LVU2704
 885:src/display.c **** 		  goto skip;
 8396              		.loc 1 885 6 is_stmt 0 view .LVU2705
 8397 0480 2C28     		cmp	r0, #44
 8398 0482 F0DC     		bgt	.L840
 8399 0484 2DE7     		b	.L740
 8400              	.LVL948:
 8401              	.L783:
 885:src/display.c **** 		  goto skip;
 8402              		.loc 1 885 6 view .LVU2706
 8403              	.LBE472:
 8404              	.LBE478:
 745:src/display.c **** #endif
 8405              		.loc 1 745 19 view .LVU2707
 8406 0486 0849     		ldr	r1, .L843
 8407 0488 FBE5     		b	.L749
 8408              	.LVL949:
 8409              	.L832:
 793:src/display.c **** 	    p = scopy(p, q);
 8410              		.loc 1 793 6 is_stmt 1 view .LVU2708
ARM GAS  /tmp/ccE2jV6G.s 			page 255


 794:src/display.c **** 	    //	    goto no_copy;
 8411              		.loc 1 794 6 view .LVU2709
 794:src/display.c **** 	    //	    goto no_copy;
 8412              		.loc 1 794 10 is_stmt 0 view .LVU2710
 8413 048a 0F49     		ldr	r1, .L843+32
 8414 048c 2846     		mov	r0, r5
 8415 048e FFF7FEFF 		bl	scopy
 8416              	.LVL950:
 8417 0492 0746     		mov	r7, r0
 8418              	.LVL951:
 794:src/display.c **** 	    //	    goto no_copy;
 8419              		.loc 1 794 10 view .LVU2711
 8420 0494 20E6     		b	.L753
 8421              	.LVL952:
 8422              	.L735:
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8423              		.loc 1 680 4 is_stmt 1 view .LVU2712
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8424              		.loc 1 680 11 is_stmt 0 view .LVU2713
 8425 0496 0093     		str	r3, [sp]
 680:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8426              		.loc 1 680 27 is_stmt 1 view .LVU2714
 8427 0498 10E7     		b	.L777
 8428              	.LVL953:
 8429              	.L781:
 724:src/display.c **** 	  }
 8430              		.loc 1 724 8 is_stmt 0 view .LVU2715
 8431 049a 0C49     		ldr	r1, .L843+36
 8432 049c B9E7     		b	.L748
 8433              	.LVL954:
 8434              	.L764:
 8435              	.LBB479:
 867:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8436              		.loc 1 867 4 discriminator 7 view .LVU2716
 8437 049e D8F80010 		ldr	r1, [r8]
 8438 04a2 5DE6     		b	.L766
 8439              	.LVL955:
 8440              	.L789:
 8441              	.LBB473:
 906:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8442              		.loc 1 906 25 view .LVU2717
 8443 04a4 3E26     		movs	r6, #62
 8444              	.LVL956:
 906:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8445              		.loc 1 906 25 view .LVU2718
 8446 04a6 88E6     		b	.L773
 8447              	.L844:
 8448              		.align	2
 8449              	.L843:
 8450 04a8 14000000 		.word	.LC8
 8451 04ac 3C000000 		.word	.LC15
 8452 04b0 00000000 		.word	StateWhileOn
 8453 04b4 00000000 		.word	RectPolConv
 8454 04b8 04000000 		.word	.LC4
 8455 04bc 0C000000 		.word	.LC6
 8456 04c0 34000000 		.word	.LC13
 8457 04c4 00000000 		.word	.LANCHOR17
ARM GAS  /tmp/ccE2jV6G.s 			page 256


 8458 04c8 38000000 		.word	.LC14
 8459 04cc 08000000 		.word	.LC5
 8460              	.LBE473:
 8461              	.LBE479:
 8462              		.cfi_endproc
 8463              	.LFE16:
 8465              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8466              		.align	2
 8467              	.LC18:
 8468 0000 0D00     		.ascii	"\015\000"
 8469 0002 0000     		.align	2
 8470              	.LC19:
 8471 0004 060600   		.ascii	"\006\006\000"
 8472 0007 00       		.align	2
 8473              	.LC21:
 8474 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8474      492C2057 
 8474      77414C74 
 8474      4500
 8475 0016 0000     		.align	2
 8476              	.LC22:
 8477 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8477      2055204C 
 8477      20492C20 
 8477      20572041 
 8477      204C2054 
 8478 0032 0000     		.align	2
 8479              	.LC23:
 8480 0034 2000     		.ascii	" \000"
 8481 0036 0000     		.align	2
 8482              	.LC24:
 8483 0038 48595000 		.ascii	"HYP\000"
 8484              		.align	2
 8485              	.LC27:
 8486 003c 7F060600 		.ascii	"\177\006\006\000"
 8487              		.align	2
 8488              	.LC28:
 8489 0040 3020746F 		.ascii	"0 to 255\000"
 8489      20323535 
 8489      00
 8490 0049 000000   		.align	2
 8491              	.LC29:
 8492 004c 46726565 		.ascii	"Free:\000"
 8492      3A00
 8493 0052 0000     		.align	2
 8494              	.LC30:
 8495 0054 202C2046 		.ascii	" , FL. \000"
 8495      4C2E2000 
 8496              		.align	2
 8497              	.LC31:
 8498 005c 52656773 		.ascii	"Regs:\000"
 8498      3A00
 8499 0062 0000     		.align	2
 8500              	.LC32:
 8501 0064 20910606 		.ascii	" \221\006\006+\000"
 8501      2B00
 8502 006a 0000     		.align	2
ARM GAS  /tmp/ccE2jV6G.s 			page 257


 8503              	.LC33:
 8504 006c 202C204C 		.ascii	" , Loc. \000"
 8504      6F632E20 
 8504      00
 8505 0075 000000   		.align	2
 8506              	.LC34:
 8507 0078 464C2000 		.ascii	"FL \000"
 8508              		.align	2
 8509              	.LC35:
 8510 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8510      06413A44 
 8510      064C494A 
 8510      4B00
 8511 008a 0000     		.align	2
 8512              	.LC36:
 8513 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8513      302D2E31 
 8513      3500
 8514 0096 0000     		.align	2
 8515              	.LC37:
 8516 0098 43414C4C 		.ascii	"CALLS\000"
 8516      5300
 8517 009e 0000     		.align	2
 8518              	.LC38:
 8519 00a0 52656720 		.ascii	"Reg \000"
 8519      00
 8520 00a5 000000   		.align	2
 8521              	.LC39:
 8522 00a8 00       		.ascii	"\000"
 8523 00a9 000000   		.align	2
 8524              	.LC40:
 8525 00ac 202D2D2D 		.ascii	" ---\000"
 8525      00
 8526 00b1 000000   		.align	2
 8527              	.LC26:
 8528 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8528      093E0A00 
 8529              		.align	2
 8530              	.LC25:
 8531 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8531      41424344 
 8531      4C494A4B 
 8531      00
 8532              		.section	.text.display,"ax",%progbits
 8533              		.align	1
 8534              		.p2align 2,,3
 8535              		.global	display
 8536              		.syntax unified
 8537              		.thumb
 8538              		.thumb_func
 8539              		.fpu fpv4-sp-d16
 8541              	display:
 8542              	.LFB34:
2584:src/display.c **** 	int i, j;
 8543              		.loc 1 2584 26 is_stmt 1 view -0
 8544              		.cfi_startproc
 8545              		@ args = 0, pretend = 0, frame = 168
ARM GAS  /tmp/ccE2jV6G.s 			page 258


 8546              		@ frame_needed = 0, uses_anonymous_args = 0
2585:src/display.c **** 	char buf[40], *bp = buf;
 8547              		.loc 1 2585 2 view .LVU2720
2586:src/display.c **** 	const char *p;
 8548              		.loc 1 2586 2 view .LVU2721
2584:src/display.c **** 	int i, j;
 8549              		.loc 1 2584 26 is_stmt 0 view .LVU2722
 8550 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8551              		.cfi_def_cfa_offset 36
 8552              		.cfi_offset 4, -36
 8553              		.cfi_offset 5, -32
 8554              		.cfi_offset 6, -28
 8555              		.cfi_offset 7, -24
 8556              		.cfi_offset 8, -20
 8557              		.cfi_offset 9, -16
 8558              		.cfi_offset 10, -12
 8559              		.cfi_offset 11, -8
 8560              		.cfi_offset 14, -4
2589:src/display.c **** 	int skip = 0;
 8561              		.loc 1 2589 24 view .LVU2723
 8562 0004 BE4C     		ldr	r4, .L1166
2594:src/display.c **** 	if (State2.disp_freeze) {
 8563              		.loc 1 2594 16 view .LVU2724
 8564 0006 DFF82893 		ldr	r9, .L1166+48
2589:src/display.c **** 	int skip = 0;
 8565              		.loc 1 2589 24 view .LVU2725
 8566 000a 94F80EB0 		ldrb	fp, [r4, #14]	@ zero_extendqisi2
2584:src/display.c **** 	int i, j;
 8567              		.loc 1 2584 26 view .LVU2726
 8568 000e ABB0     		sub	sp, sp, #172
 8569              		.cfi_def_cfa_offset 208
 8570              	.LVL957:
2587:src/display.c **** 	int annuc = 0;
 8571              		.loc 1 2587 2 is_stmt 1 view .LVU2727
2588:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8572              		.loc 1 2588 2 view .LVU2728
2589:src/display.c **** 	int skip = 0;
 8573              		.loc 1 2589 2 view .LVU2729
2590:src/display.c **** 	int x_disp = 0;
 8574              		.loc 1 2590 2 view .LVU2730
2591:src/display.c **** 	const int shift = cur_shift();
 8575              		.loc 1 2591 2 view .LVU2731
2592:src/display.c **** 
 8576              		.loc 1 2592 2 view .LVU2732
2592:src/display.c **** 
 8577              		.loc 1 2592 20 is_stmt 0 view .LVU2733
 8578 0010 FFF7FEFF 		bl	cur_shift
 8579              	.LVL958:
2595:src/display.c **** 	  State2.disp_freeze = 0;
 8580              		.loc 1 2595 6 view .LVU2734
 8581 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2594:src/display.c **** 	if (State2.disp_freeze) {
 8582              		.loc 1 2594 16 view .LVU2735
 8583 0016 0022     		movs	r2, #0
 8584              	.LVL959:
2594:src/display.c **** 	if (State2.disp_freeze) {
 8585              		.loc 1 2594 2 is_stmt 1 view .LVU2736
ARM GAS  /tmp/ccE2jV6G.s 			page 259


2595:src/display.c **** 	  State2.disp_freeze = 0;
 8586              		.loc 1 2595 5 is_stmt 0 view .LVU2737
 8587 0018 13F01007 		ands	r7, r3, #16
2594:src/display.c **** 	if (State2.disp_freeze) {
 8588              		.loc 1 2594 16 view .LVU2738
 8589 001c A9F80020 		strh	r2, [r9]	@ movhi
2595:src/display.c **** 	  State2.disp_freeze = 0;
 8590              		.loc 1 2595 2 is_stmt 1 view .LVU2739
2595:src/display.c **** 	  State2.disp_freeze = 0;
 8591              		.loc 1 2595 5 is_stmt 0 view .LVU2740
 8592 0020 40F0F180 		bne	.L1127
2605:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8593              		.loc 1 2605 2 is_stmt 1 view .LVU2741
2605:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8594              		.loc 1 2605 6 is_stmt 0 view .LVU2742
 8595 0024 B74B     		ldr	r3, .L1166+4
 8596 0026 1D68     		ldr	r5, [r3]
2605:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8597              		.loc 1 2605 5 view .LVU2743
 8598 0028 002D     		cmp	r5, #0
 8599 002a 40F08780 		bne	.L1128
2624:src/display.c **** #  endif
 8600              		.loc 1 2624 2 is_stmt 1 view .LVU2744
2624:src/display.c **** #  endif
 8601              		.loc 1 2624 33 is_stmt 0 view .LVU2745
 8602 002e DFF8FCA2 		ldr	r10, .L1166+44
 8603 0032 DAF80030 		ldr	r3, [r10]
 8604 0036 0646     		mov	r6, r0
 8605 0038 93F8EA87 		ldrb	r8, [r3, #2026]	@ zero_extendqisi2
2630:src/display.c **** 
 8606              		.loc 1 2630 2 view .LVU2746
 8607 003c FFF7FEFF 		bl	reset_disp
 8608              	.LVL960:
2633:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8609              		.loc 1 2633 2 view .LVU2747
 8610 0040 20A8     		add	r0, sp, #128
 8611              	.LVL961:
2633:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8612              		.loc 1 2633 2 view .LVU2748
 8613 0042 2822     		movs	r2, #40
 8614 0044 2946     		mov	r1, r5
 8615 0046 FFF7FEFF 		bl	xset
 8616              	.LVL962:
2639:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8617              		.loc 1 2639 6 view .LVU2749
 8618 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2639:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8619              		.loc 1 2639 5 view .LVU2750
 8620 004c D806     		lsls	r0, r3, #27
2624:src/display.c **** #  endif
 8621              		.loc 1 2624 12 view .LVU2751
 8622 004e C8F38008 		ubfx	r8, r8, #2, #1
 8623              	.LVL963:
2630:src/display.c **** 
 8624              		.loc 1 2630 2 is_stmt 1 view .LVU2752
2633:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8625              		.loc 1 2633 2 view .LVU2753
ARM GAS  /tmp/ccE2jV6G.s 			page 260


2639:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8626              		.loc 1 2639 2 view .LVU2754
2639:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8627              		.loc 1 2639 5 is_stmt 0 view .LVU2755
 8628 0052 00F17181 		bmi	.L1129
2651:src/display.c **** 	  if (yreg_enabled) {
 8629              		.loc 1 2651 9 is_stmt 1 view .LVU2756
2651:src/display.c **** 	  if (yreg_enabled) {
 8630              		.loc 1 2651 13 is_stmt 0 view .LVU2757
 8631 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2651:src/display.c **** 	  if (yreg_enabled) {
 8632              		.loc 1 2651 12 view .LVU2758
 8633 0058 5107     		lsls	r1, r2, #29
 8634 005a 00F0DE80 		beq	.L853
2652:src/display.c **** 	    set_status_top(S_SURE);
 8635              		.loc 1 2652 4 is_stmt 1 view .LVU2759
2652:src/display.c **** 	    set_status_top(S_SURE);
 8636              		.loc 1 2652 7 is_stmt 0 view .LVU2760
 8637 005e B8F1000F 		cmp	r8, #0
 8638 0062 00F0B381 		beq	.L854
2653:src/display.c **** 	    no_status_top = 1;
 8639              		.loc 1 2653 6 is_stmt 1 view .LVU2761
 8640              	.LVL964:
 8641              	.LBB539:
 8642              	.LBI539:
3499:src/display.c **** 	if (no_status_top) return;
 8643              		.loc 1 3499 19 view .LVU2762
 8644              	.LBB540:
3500:src/display.c **** 	if (State2.runmode) {
 8645              		.loc 1 3500 2 view .LVU2763
3500:src/display.c **** 	if (State2.runmode) {
 8646              		.loc 1 3500 5 is_stmt 0 view .LVU2764
 8647 0066 B9F90030 		ldrsh	r3, [r9]
 8648 006a 13B9     		cbnz	r3, .L894
 8649 006c A648     		ldr	r0, .L1166+8
 8650 006e FFF7FEFF 		bl	set_status_top.part.0
 8651              	.LVL965:
 8652              	.L894:
3500:src/display.c **** 	if (State2.runmode) {
 8653              		.loc 1 3500 5 view .LVU2765
 8654              	.LBE540:
 8655              	.LBE539:
2802:src/display.c **** 	    annuc = State2.runmode;
 8656              		.loc 1 2802 6 is_stmt 1 view .LVU2766
 8657 0072 A64B     		ldr	r3, .L1166+12
2803:src/display.c **** 	  }
 8658              		.loc 1 2803 20 is_stmt 0 view .LVU2767
 8659 0074 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
 8660 0076 0193     		str	r3, [sp, #4]
2802:src/display.c **** 	    annuc = State2.runmode;
 8661              		.loc 1 2802 20 view .LVU2768
 8662 0078 0123     		movs	r3, #1
 8663 007a A9F80030 		strh	r3, [r9]	@ movhi
2803:src/display.c **** 	  }
 8664              		.loc 1 2803 6 is_stmt 1 view .LVU2769
2803:src/display.c **** 	  }
 8665              		.loc 1 2803 6 is_stmt 0 view .LVU2770
ARM GAS  /tmp/ccE2jV6G.s 			page 261


 8666 007e A44F     		ldr	r7, .L1166+16
2803:src/display.c **** 	  }
 8667              		.loc 1 2803 12 view .LVU2771
 8668 0080 C5F38015 		ubfx	r5, r5, #6, #1
 8669              	.LVL966:
2878:src/display.c ****       nostk:
 8670              		.loc 1 2878 2 is_stmt 1 view .LVU2772
 8671 0084 FFF7FEFF 		bl	show_stack
 8672              	.LVL967:
2880:src/display.c **** 	if (!skip) {
 8673              		.loc 1 2880 2 view .LVU2773
 8674 0088 FFF7FEFF 		bl	show_flags
 8675              	.LVL968:
2881:src/display.c **** 	  if (State2.runmode) {
 8676              		.loc 1 2881 2 view .LVU2774
 8677              	.L856:
2882:src/display.c **** 	  only_update_x:
 8678              		.loc 1 2882 4 view .LVU2775
2882:src/display.c **** 	  only_update_x:
 8679              		.loc 1 2882 8 is_stmt 0 view .LVU2776
 8680 008c A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
2882:src/display.c **** 	  only_update_x:
 8681              		.loc 1 2882 7 view .LVU2777
 8682 008e 16F04006 		ands	r6, r6, #64
 8683 0092 5FD1     		bne	.L850
 8684              	.LBB541:
2900:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8685              		.loc 1 2900 6 is_stmt 1 view .LVU2778
2900:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8686              		.loc 1 2900 24 is_stmt 0 view .LVU2779
 8687 0094 DAF80030 		ldr	r3, [r10]
2904:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8688              		.loc 1 2904 6 view .LVU2780
 8689 0098 DFF898A2 		ldr	r10, .L1166+52
2900:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8690              		.loc 1 2900 19 view .LVU2781
 8691 009c B3F8E0B7 		ldrh	fp, [r3, #2016]
 8692              	.LVL969:
2901:src/display.c **** 	    const int n = nLIB(pc);
 8693              		.loc 1 2901 6 is_stmt 1 view .LVU2782
2901:src/display.c **** 	    const int n = nLIB(pc);
 8694              		.loc 1 2901 25 is_stmt 0 view .LVU2783
 8695 00a0 5846     		mov	r0, fp
 8696 00a2 FFF7FEFF 		bl	user_pc
 8697              	.LVL970:
2903:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8698              		.loc 1 2903 6 view .LVU2784
 8699 00a6 2822     		movs	r2, #40
 8700 00a8 3146     		mov	r1, r6
2901:src/display.c **** 	    const int n = nLIB(pc);
 8701              		.loc 1 2901 25 view .LVU2785
 8702 00aa 8046     		mov	r8, r0
2903:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8703              		.loc 1 2903 6 view .LVU2786
 8704 00ac 20A8     		add	r0, sp, #128
 8705              	.LVL971:
2902:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
ARM GAS  /tmp/ccE2jV6G.s 			page 262


 8706              		.loc 1 2902 6 is_stmt 1 view .LVU2787
2903:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8707              		.loc 1 2903 6 is_stmt 0 view .LVU2788
 8708 00ae FFF7FEFF 		bl	xset
 8709              	.LVL972:
2902:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8710              		.loc 1 2902 20 view .LVU2789
 8711 00b2 4FEA9B3B 		lsr	fp, fp, #14
 8712              	.LVL973:
2903:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8713              		.loc 1 2903 6 is_stmt 1 view .LVU2790
2904:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8714              		.loc 1 2904 6 view .LVU2791
 8715 00b6 DAF80000 		ldr	r0, [r10]
 8716 00ba 3246     		mov	r2, r6
 8717 00bc 0121     		movs	r1, #1
 8718 00be FFF7FEFF 		bl	set_exp
 8719              	.LVL974:
2905:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8720              		.loc 1 2905 6 view .LVU2792
 8721 00c2 BBF1000F 		cmp	fp, #0
 8722 00c6 40F08C81 		bne	.L1130
 8723 00ca 9249     		ldr	r1, .L1166+20
 8724 00cc 20A8     		add	r0, sp, #128
 8725 00ce FFF7FEFF 		bl	scopy_spc
 8726              	.LVL975:
 8727 00d2 0322     		movs	r2, #3
 8728 00d4 4146     		mov	r1, r8
 8729 00d6 FFF7FEFF 		bl	num_arg_0
 8730              	.LVL976:
2907:src/display.c **** #ifndef REALBUILD
 8731              		.loc 1 2907 6 view .LVU2793
 8732 00da 0921     		movs	r1, #9
 8733 00dc 20A8     		add	r0, sp, #128
 8734 00de FFF7FEFF 		bl	set_digits_string
 8735              	.LVL977:
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8736              		.loc 1 2909 6 view .LVU2794
 8737 00e2 5946     		mov	r1, fp
 8738 00e4 2822     		movs	r2, #40
 8739 00e6 20A8     		add	r0, sp, #128
 8740 00e8 FFF7FEFF 		bl	xset
 8741              	.LVL978:
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8742              		.loc 1 2910 6 view .LVU2795
 8743 00ec 5A46     		mov	r2, fp
 8744 00ee 0121     		movs	r1, #1
 8745 00f0 DAF80000 		ldr	r0, [r10]
 8746 00f4 FFF7FEFF 		bl	set_exp
 8747              	.LVL979:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8748              		.loc 1 2911 6 view .LVU2796
 8749 00f8 8749     		ldr	r1, .L1166+24
2905:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8750              		.loc 1 2905 6 is_stmt 0 view .LVU2797
 8751 00fa 4FF0030B 		mov	fp, #3
 8752              	.LVL980:
ARM GAS  /tmp/ccE2jV6G.s 			page 263


 8753              	.L988:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8754              		.loc 1 2911 6 discriminator 4 view .LVU2798
 8755 00fe 20A8     		add	r0, sp, #128
 8756 0100 FFF7FEFF 		bl	scopy_spc
 8757              	.LVL981:
 8758 0104 4146     		mov	r1, r8
 8759 0106 5A46     		mov	r2, fp
 8760 0108 FFF7FEFF 		bl	num_arg_0
 8761              	.LVL982:
 8762              	.LBB542:
2914:src/display.c **** 	      char *l=LastDisplayedNumber;
 8763              		.loc 1 2914 8 is_stmt 1 discriminator 4 view .LVU2799
2915:src/display.c **** 	      *l++=' ';
 8764              		.loc 1 2915 8 discriminator 4 view .LVU2800
2916:src/display.c **** 	      while(*b) {
 8765              		.loc 1 2916 8 discriminator 4 view .LVU2801
2916:src/display.c **** 	      while(*b) {
 8766              		.loc 1 2916 12 is_stmt 0 discriminator 4 view .LVU2802
 8767 010c 834B     		ldr	r3, .L1166+28
2917:src/display.c **** 		*l++=*b++;
 8768              		.loc 1 2917 14 discriminator 4 view .LVU2803
 8769 010e 9DF88010 		ldrb	r1, [sp, #128]	@ zero_extendqisi2
2916:src/display.c **** 	      while(*b) {
 8770              		.loc 1 2916 12 discriminator 4 view .LVU2804
 8771 0112 2026     		movs	r6, #32
 8772 0114 1E70     		strb	r6, [r3]
2917:src/display.c **** 		*l++=*b++;
 8773              		.loc 1 2917 8 is_stmt 1 discriminator 4 view .LVU2805
2917:src/display.c **** 		*l++=*b++;
 8774              		.loc 1 2917 13 discriminator 4 view .LVU2806
 8775 0116 0029     		cmp	r1, #0
 8776 0118 00F0C182 		beq	.L1000
 8777 011c 0333     		adds	r3, r3, #3
 8778 011e 20A8     		add	r0, sp, #128
 8779              	.LVL983:
 8780              	.L982:
2918:src/display.c **** 		*l++=' ';
 8781              		.loc 1 2918 3 view .LVU2807
2918:src/display.c **** 		*l++=' ';
 8782              		.loc 1 2918 7 is_stmt 0 view .LVU2808
 8783 0120 03F8021C 		strb	r1, [r3, #-2]
2919:src/display.c **** 	      }
 8784              		.loc 1 2919 3 is_stmt 1 view .LVU2809
 8785              	.LVL984:
2917:src/display.c **** 		*l++=*b++;
 8786              		.loc 1 2917 14 is_stmt 0 view .LVU2810
 8787 0124 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8788              	.LVL985:
2919:src/display.c **** 	      }
 8789              		.loc 1 2919 7 view .LVU2811
 8790 0128 03F8016C 		strb	r6, [r3, #-1]
2917:src/display.c **** 		*l++=*b++;
 8791              		.loc 1 2917 13 is_stmt 1 view .LVU2812
 8792 012c 1A46     		mov	r2, r3
 8793 012e 0233     		adds	r3, r3, #2
 8794              	.LVL986:
ARM GAS  /tmp/ccE2jV6G.s 			page 264


2917:src/display.c **** 		*l++=*b++;
 8795              		.loc 1 2917 13 is_stmt 0 view .LVU2813
 8796 0130 0029     		cmp	r1, #0
 8797 0132 F5D1     		bne	.L982
 8798              	.LVL987:
 8799              	.L981:
2921:src/display.c **** 	    }
 8800              		.loc 1 2921 8 is_stmt 1 view .LVU2814
2921:src/display.c **** 	    }
 8801              		.loc 1 2921 10 is_stmt 0 view .LVU2815
 8802 0134 0023     		movs	r3, #0
 8803 0136 7A4E     		ldr	r6, .L1166+32
 8804 0138 1370     		strb	r3, [r2]
 8805              	.LVL988:
2921:src/display.c **** 	    }
 8806              		.loc 1 2921 10 view .LVU2816
 8807              	.LBE542:
 8808              	.LBE541:
2926:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8809              		.loc 1 2926 2 is_stmt 1 view .LVU2817
 8810 013a 21E0     		b	.L1122
 8811              	.LVL989:
 8812              	.L1128:
2612:src/display.c **** 
 8813              		.loc 1 2612 4 view .LVU2818
 8814 013c FFF7FEFF 		bl	wait_for_display
 8815              	.LVL990:
2615:src/display.c **** 	    clr_dot(i);
 8816              		.loc 1 2615 4 view .LVU2819
2615:src/display.c **** 	    clr_dot(i);
 8817              		.loc 1 2615 16 view .LVU2820
 8818              	.L849:
2616:src/display.c **** 	  }
 8819              		.loc 1 2616 6 discriminator 3 view .LVU2821
 8820 0140 3846     		mov	r0, r7
2615:src/display.c **** 	    clr_dot(i);
 8821              		.loc 1 2615 31 is_stmt 0 discriminator 3 view .LVU2822
 8822 0142 0137     		adds	r7, r7, #1
 8823              	.LVL991:
2616:src/display.c **** 	  }
 8824              		.loc 1 2616 6 discriminator 3 view .LVU2823
 8825 0144 FFF7FEFF 		bl	clr_dot
 8826              	.LVL992:
2615:src/display.c **** 	    clr_dot(i);
 8827              		.loc 1 2615 31 is_stmt 1 discriminator 3 view .LVU2824
2615:src/display.c **** 	    clr_dot(i);
 8828              		.loc 1 2615 16 discriminator 3 view .LVU2825
2615:src/display.c **** 	    clr_dot(i);
 8829              		.loc 1 2615 4 is_stmt 0 discriminator 3 view .LVU2826
 8830 0148 832F     		cmp	r7, #131
 8831 014a F9D1     		bne	.L849
 8832 014c 6F4B     		ldr	r3, .L1166+12
 8833 014e 704F     		ldr	r7, .L1166+16
 8834              	.LVL993:
2615:src/display.c **** 	    clr_dot(i);
 8835              		.loc 1 2615 4 discriminator 3 view .LVU2827
 8836 0150 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccE2jV6G.s 			page 265


2588:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8837              		.loc 1 2588 6 view .LVU2828
 8838 0152 0025     		movs	r5, #0
 8839              	.LVL994:
 8840              	.L850:
2884:src/display.c **** 	    if (p == NULL || cata) {
 8841              		.loc 1 2884 6 is_stmt 1 view .LVU2829
2884:src/display.c **** 	    if (p == NULL || cata) {
 8842              		.loc 1 2884 10 is_stmt 0 view .LVU2830
 8843 0154 FFF7FEFF 		bl	get_cmdline
 8844              	.LVL995:
2885:src/display.c **** 	      if (ShowRegister != -1) {
 8845              		.loc 1 2885 6 is_stmt 1 view .LVU2831
2885:src/display.c **** 	      if (ShowRegister != -1) {
 8846              		.loc 1 2885 9 is_stmt 0 view .LVU2832
 8847 0158 8246     		mov	r10, r0
 8848 015a 18B1     		cbz	r0, .L945
2885:src/display.c **** 	      if (ShowRegister != -1) {
 8849              		.loc 1 2885 20 discriminator 1 view .LVU2833
 8850 015c BBF1000F 		cmp	fp, #0
 8851 0160 00F08380 		beq	.L946
 8852              	.L945:
2886:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8853              		.loc 1 2886 8 is_stmt 1 view .LVU2834
2886:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8854              		.loc 1 2886 25 is_stmt 0 view .LVU2835
 8855 0164 6E4E     		ldr	r6, .L1166+32
 8856 0166 3068     		ldr	r0, [r6]
 8857              	.LVL996:
2886:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8858              		.loc 1 2886 11 view .LVU2836
 8859 0168 421C     		adds	r2, r0, #1
 8860 016a 00F02581 		beq	.L947
2887:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8861              		.loc 1 2887 3 is_stmt 1 view .LVU2837
2887:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8862              		.loc 1 2887 39 is_stmt 0 view .LVU2838
 8863 016e 6428     		cmp	r0, #100
 8864 0170 00F0B180 		beq	.L1131
 8865              	.L948:
2888:src/display.c **** 	      }
 8866              		.loc 1 2888 3 is_stmt 1 view .LVU2839
 8867 0174 0021     		movs	r1, #0
 8868 0176 FFF7FEFF 		bl	format_reg
 8869              	.LVL997:
2896:src/display.c **** 	      goto finish;
 8870              		.loc 1 2896 6 view .LVU2840
2896:src/display.c **** 	      goto finish;
 8871              		.loc 1 2896 9 is_stmt 0 view .LVU2841
 8872 017a 624B     		ldr	r3, .L1166+4
 8873 017c 1B68     		ldr	r3, [r3]
 8874 017e 73BB     		cbnz	r3, .L950
 8875              	.LVL998:
 8876              	.L1122:
2926:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8877              		.loc 1 2926 2 view .LVU2842
 8878 0180 FFF7FEFF 		bl	set_annunciators
ARM GAS  /tmp/ccE2jV6G.s 			page 266


 8879              	.LVL999:
2927:src/display.c **** 	  ShowRPN = 0;
 8880              		.loc 1 2927 2 is_stmt 1 view .LVU2843
 8881              	.L852:
2928:src/display.c **** 	  dot(RPN, 0);
 8882              		.loc 1 2928 4 view .LVU2844
2928:src/display.c **** 	  dot(RPN, 0);
 8883              		.loc 1 2928 12 is_stmt 0 view .LVU2845
 8884 0184 DFF89C81 		ldr	r8, .L1166+36
 8885 0188 0023     		movs	r3, #0
 8886              	.LBB544:
 8887              	.LBB545:
 338:src/display.c **** }
 8888              		.loc 1 338 8 view .LVU2846
 8889 018a 8D20     		movs	r0, #141
 8890              	.LBE545:
 8891              	.LBE544:
2928:src/display.c **** 	  dot(RPN, 0);
 8892              		.loc 1 2928 12 view .LVU2847
 8893 018c C8F80030 		str	r3, [r8]
2929:src/display.c **** 	}
 8894              		.loc 1 2929 4 is_stmt 1 view .LVU2848
 8895              	.LVL1000:
 8896              	.LBB547:
 8897              	.LBI544:
 336:src/display.c ****   if (on)	set_dot(n);
 8898              		.loc 1 336 6 view .LVU2849
 8899              	.LBB546:
 337:src/display.c ****   else	clr_dot(n);
 8900              		.loc 1 337 3 view .LVU2850
 338:src/display.c **** }
 8901              		.loc 1 338 8 view .LVU2851
 8902 0190 FFF7FEFF 		bl	clr_dot
 8903              	.LVL1001:
 8904              	.L983:
 338:src/display.c **** }
 8905              		.loc 1 338 8 is_stmt 0 view .LVU2852
 8906              	.LBE546:
 8907              	.LBE547:
2932:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8908              		.loc 1 2932 2 is_stmt 1 view .LVU2853
2933:src/display.c **** 
 8909              		.loc 1 2933 4 is_stmt 0 view .LVU2854
 8910 0194 D8F80030 		ldr	r3, [r8]
 8911 0198 002B     		cmp	r3, #0
 8912 019a 40F0AE80 		bne	.L1001
2932:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8913              		.loc 1 2932 31 view .LVU2855
 8914 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8915 01a0 12F04003 		ands	r3, r2, #64
 8916 01a4 08D0     		beq	.L984
2933:src/display.c **** 
 8917              		.loc 1 2933 8 view .LVU2856
 8918 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2933:src/display.c **** 
 8919              		.loc 1 2933 4 view .LVU2857
 8920 01a8 1B07     		lsls	r3, r3, #28
ARM GAS  /tmp/ccE2jV6G.s 			page 267


 8921 01aa 40F1EF80 		bpl	.L1003
2933:src/display.c **** 
 8922              		.loc 1 2933 30 discriminator 3 view .LVU2858
 8923 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8924 01b0 012B     		cmp	r3, #1
 8925 01b2 01D0     		beq	.L984
2933:src/display.c **** 
 8926              		.loc 1 2933 60 discriminator 5 view .LVU2859
 8927 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8928              	.L984:
2932:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8929              		.loc 1 2932 19 discriminator 9 view .LVU2860
 8930 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8931 01ba 63F34512 		bfi	r2, r3, #5, #1
 8932 01be E275     		strb	r2, [r4, #23]
2936:src/display.c **** 	  annunciators();
 8933              		.loc 1 2936 2 is_stmt 1 discriminator 9 view .LVU2861
2936:src/display.c **** 	  annunciators();
 8934              		.loc 1 2936 5 is_stmt 0 discriminator 9 view .LVU2862
 8935 01c0 002D     		cmp	r5, #0
 8936 01c2 00F09480 		beq	.L985
2936:src/display.c **** 	  annunciators();
 8937              		.loc 1 2936 36 discriminator 1 view .LVU2863
 8938 01c6 D3B2     		uxtb	r3, r2
2936:src/display.c **** 	  annunciators();
 8939              		.loc 1 2936 13 discriminator 1 view .LVU2864
 8940 01c8 03F02103 		and	r3, r3, #33
 8941 01cc 202B     		cmp	r3, #32
 8942 01ce 00F08E80 		beq	.L985
 8943              	.L986:
2937:src/display.c ****  	State2.hms = 0;
 8944              		.loc 1 2937 4 is_stmt 1 view .LVU2865
 8945 01d2 FFF7FEFF 		bl	annunciators
 8946              	.LVL1002:
 8947              	.L987:
2938:src/display.c **** #else
 8948              		.loc 1 2938 3 view .LVU2866
2938:src/display.c **** #else
 8949              		.loc 1 2938 14 is_stmt 0 view .LVU2867
 8950 01d6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8951 01d8 6FF30003 		bfc	r3, #0, #1
 8952 01dc E375     		strb	r3, [r4, #23]
 8953              	.L950:
2945:src/display.c **** 	State2.disp_as_alpha = 0;
 8954              		.loc 1 2945 2 is_stmt 1 view .LVU2868
2946:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8955              		.loc 1 2946 2 view .LVU2869
2947:src/display.c **** 	State2.invalid_disp = 0;
 8956              		.loc 1 2947 2 view .LVU2870
2945:src/display.c **** 	State2.disp_as_alpha = 0;
 8957              		.loc 1 2945 17 is_stmt 0 view .LVU2871
 8958 01de 6369     		ldr	r3, [r4, #20]
2951:src/display.c **** 	State2.disp_small = 0;
 8959              		.loc 1 2951 11 view .LVU2872
 8960 01e0 019A     		ldr	r2, [sp, #4]
2945:src/display.c **** 	State2.disp_as_alpha = 0;
 8961              		.loc 1 2945 17 view .LVU2873
ARM GAS  /tmp/ccE2jV6G.s 			page 268


 8962 01e2 23F02173 		bic	r3, r3, #42205184
 8963 01e6 23F48053 		bic	r3, r3, #4096
2947:src/display.c **** 	State2.invalid_disp = 0;
 8964              		.loc 1 2947 15 view .LVU2874
 8965 01ea 0025     		movs	r5, #0
2945:src/display.c **** 	State2.disp_as_alpha = 0;
 8966              		.loc 1 2945 17 view .LVU2875
 8967 01ec 6361     		str	r3, [r4, #20]
2949:src/display.c **** 	DispMsg = CNULL;
 8968              		.loc 1 2949 15 view .LVU2876
 8969 01ee 6423     		movs	r3, #100
2947:src/display.c **** 	State2.invalid_disp = 0;
 8970              		.loc 1 2947 15 view .LVU2877
 8971 01f0 6574     		strb	r5, [r4, #17]
2948:src/display.c **** 	ShowRegister = regX_idx;
 8972              		.loc 1 2948 2 is_stmt 1 view .LVU2878
2949:src/display.c **** 	DispMsg = CNULL;
 8973              		.loc 1 2949 2 view .LVU2879
2950:src/display.c **** 	DispPlot = 0;
 8974              		.loc 1 2950 10 is_stmt 0 view .LVU2880
 8975 01f2 3D60     		str	r5, [r7]
2951:src/display.c **** 	State2.disp_small = 0;
 8976              		.loc 1 2951 11 view .LVU2881
 8977 01f4 1580     		strh	r5, [r2]	@ movhi
2949:src/display.c **** 	DispMsg = CNULL;
 8978              		.loc 1 2949 15 view .LVU2882
 8979 01f6 3360     		str	r3, [r6]
2950:src/display.c **** 	DispPlot = 0;
 8980              		.loc 1 2950 2 is_stmt 1 view .LVU2883
2951:src/display.c **** 	State2.disp_small = 0;
 8981              		.loc 1 2951 2 view .LVU2884
2952:src/display.c **** 	finish_display();
 8982              		.loc 1 2952 2 view .LVU2885
2953:src/display.c **** 	no_status_top = 0;
 8983              		.loc 1 2953 2 view .LVU2886
 8984 01f8 FFF7FEFF 		bl	finish_display
 8985              	.LVL1003:
2954:src/display.c **** #ifdef CONSOLE
 8986              		.loc 1 2954 2 view .LVU2887
2954:src/display.c **** #ifdef CONSOLE
 8987              		.loc 1 2954 16 is_stmt 0 view .LVU2888
 8988 01fc A9F80050 		strh	r5, [r9]	@ movhi
2958:src/display.c **** #else
 8989              		.loc 1 2958 7 view .LVU2889
 8990 0200 2BB0     		add	sp, sp, #172
 8991              		.cfi_remember_state
 8992              		.cfi_def_cfa_offset 36
 8993              		@ sp needed
 8994 0202 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8995              	.LVL1004:
 8996              	.L1127:
 8997              		.cfi_restore_state
2596:src/display.c **** 	  State2.disp_temp = 1;
 8998              		.loc 1 2596 4 is_stmt 1 view .LVU2890
2597:src/display.c **** #ifdef CONSOLE
 8999              		.loc 1 2597 4 view .LVU2891
2601:src/display.c **** 	  return;
ARM GAS  /tmp/ccE2jV6G.s 			page 269


 9000              		.loc 1 2601 12 is_stmt 0 view .LVU2892
 9001 0206 4749     		ldr	r1, .L1166+36
2596:src/display.c **** 	  State2.disp_temp = 1;
 9002              		.loc 1 2596 23 view .LVU2893
 9003 0208 23F03003 		bic	r3, r3, #48
 9004 020c 43F02003 		orr	r3, r3, #32
 9005 0210 E375     		strb	r3, [r4, #23]
2601:src/display.c **** 	  return;
 9006              		.loc 1 2601 4 is_stmt 1 view .LVU2894
2601:src/display.c **** 	  return;
 9007              		.loc 1 2601 12 is_stmt 0 view .LVU2895
 9008 0212 0A60     		str	r2, [r1]
2602:src/display.c **** 	}
 9009              		.loc 1 2602 4 is_stmt 1 view .LVU2896
2958:src/display.c **** #else
 9010              		.loc 1 2958 7 is_stmt 0 view .LVU2897
 9011 0214 2BB0     		add	sp, sp, #172
 9012              		.cfi_remember_state
 9013              		.cfi_def_cfa_offset 36
 9014              		@ sp needed
 9015 0216 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9016              	.LVL1005:
 9017              	.L853:
 9018              		.cfi_restore_state
2660:src/display.c **** 	  bp = scopy(bp, "HYP");
 9019              		.loc 1 2660 9 is_stmt 1 view .LVU2898
2660:src/display.c **** 	  bp = scopy(bp, "HYP");
 9020              		.loc 1 2660 12 is_stmt 0 view .LVU2899
 9021 021a 9A06     		lsls	r2, r3, #26
 9022 021c 00F1B880 		bmi	.L1132
2672:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9023              		.loc 1 2672 9 is_stmt 1 view .LVU2900
2672:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9024              		.loc 1 2672 12 is_stmt 0 view .LVU2901
 9025 0220 DF07     		lsls	r7, r3, #31
 9026 0222 00F14E81 		bmi	.L1133
2687:src/display.c **** 	  /* Commands with arguments */
 9027              		.loc 1 2687 9 is_stmt 1 view .LVU2902
2687:src/display.c **** 	  /* Commands with arguments */
 9028              		.loc 1 2687 13 is_stmt 0 view .LVU2903
 9029 0226 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2687:src/display.c **** 	  /* Commands with arguments */
 9030              		.loc 1 2687 12 view .LVU2904
 9031 0228 8806     		lsls	r0, r1, #26
 9032 022a 00F1B381 		bmi	.L1134
2725:src/display.c **** 	  *bp++ = 'x';
 9033              		.loc 1 2725 9 is_stmt 1 view .LVU2905
2725:src/display.c **** 	  *bp++ = 'x';
 9034              		.loc 1 2725 19 is_stmt 0 view .LVU2906
 9035 022e E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2725:src/display.c **** 	  *bp++ = 'x';
 9036              		.loc 1 2725 12 view .LVU2907
 9037 0230 072A     		cmp	r2, #7
 9038 0232 00F02281 		beq	.L874
2726:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9039              		.loc 1 2726 4 is_stmt 1 view .LVU2908
 9040              	.LVL1006:
ARM GAS  /tmp/ccE2jV6G.s 			page 270


2727:src/display.c **** 	  *bp++ = '_';
 9041              		.loc 1 2727 33 is_stmt 0 view .LVU2909
 9042 0236 3C4B     		ldr	r3, .L1166+40
2727:src/display.c **** 	  *bp++ = '_';
 9043              		.loc 1 2727 10 view .LVU2910
 9044 0238 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9045 023a 8DF88130 		strb	r3, [sp, #129]
2726:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9046              		.loc 1 2726 10 view .LVU2911
 9047 023e 7822     		movs	r2, #120
2728:src/display.c **** 	  *bp++ = '?';
 9048              		.loc 1 2728 10 view .LVU2912
 9049 0240 43F65F73 		movw	r3, #16223
2726:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9050              		.loc 1 2726 10 view .LVU2913
 9051 0244 8DF88020 		strb	r2, [sp, #128]
2727:src/display.c **** 	  *bp++ = '_';
 9052              		.loc 1 2727 4 is_stmt 1 view .LVU2914
 9053              	.LVL1007:
2728:src/display.c **** 	  *bp++ = '?';
 9054              		.loc 1 2728 4 view .LVU2915
2729:src/display.c **** 	  if (yreg_enabled) {
 9055              		.loc 1 2729 4 view .LVU2916
2728:src/display.c **** 	  *bp++ = '?';
 9056              		.loc 1 2728 10 is_stmt 0 view .LVU2917
 9057 0248 ADF88230 		strh	r3, [sp, #130]	@ movhi
2730:src/display.c **** 	    set_status_top(buf);
 9058              		.loc 1 2730 4 is_stmt 1 view .LVU2918
2730:src/display.c **** 	    set_status_top(buf);
 9059              		.loc 1 2730 7 is_stmt 0 view .LVU2919
 9060 024c B8F1000F 		cmp	r8, #0
 9061 0250 40F0A980 		bne	.L1124
 9062              	.LVL1008:
 9063              	.L859:
2670:src/display.c **** 	  }
 9064              		.loc 1 2670 6 is_stmt 1 view .LVU2920
 9065 0254 20A8     		add	r0, sp, #128
 9066 0256 FFF7FEFF 		bl	set_status
 9067              	.LVL1009:
2878:src/display.c ****       nostk:
 9068              		.loc 1 2878 2 view .LVU2921
 9069 025a 2C4B     		ldr	r3, .L1166+12
 9070 025c 0193     		str	r3, [sp, #4]
 9071 025e 2C4F     		ldr	r7, .L1166+16
 9072 0260 FFF7FEFF 		bl	show_stack
 9073              	.LVL1010:
2880:src/display.c **** 	if (!skip) {
 9074              		.loc 1 2880 2 view .LVU2922
 9075 0264 FFF7FEFF 		bl	show_flags
 9076              	.LVL1011:
2881:src/display.c **** 	  if (State2.runmode) {
 9077              		.loc 1 2881 2 view .LVU2923
 9078 0268 10E7     		b	.L856
 9079              	.LVL1012:
 9080              	.L946:
2893:src/display.c **** 	      x_disp = 1;
 9081              		.loc 1 2893 8 view .LVU2924
ARM GAS  /tmp/ccE2jV6G.s 			page 271


 9082              	.LBB548:
 9083              	.LBI548:
1239:src/display.c ****       int i;
 9084              		.loc 1 1239 17 view .LVU2925
 9085              	.LBB549:
1240:src/display.c ****       int gotdot = -1;
 9086              		.loc 1 1240 7 view .LVU2926
1241:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9087              		.loc 1 1241 7 view .LVU2927
1243:src/display.c **** #endif
 9088              		.loc 1 1243 7 view .LVU2928
1247:src/display.c **** #endif
 9089              		.loc 1 1247 7 view .LVU2929
1250:src/display.c **** 	SET_MANT_SIGN;
 9090              		.loc 1 1250 7 view .LVU2930
1250:src/display.c **** 	SET_MANT_SIGN;
 9091              		.loc 1 1250 10 is_stmt 0 view .LVU2931
 9092 026a 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 9093 026c 2D2A     		cmp	r2, #45
 9094 026e 00F0AC81 		beq	.L1135
 9095              	.LVL1013:
 9096              	.L954:
1255:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9097              		.loc 1 1255 7 is_stmt 1 view .LVU2932
1255:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9098              		.loc 1 1255 11 is_stmt 0 view .LVU2933
 9099 0272 2E4A     		ldr	r2, .L1166+44
 9100 0274 1268     		ldr	r2, [r2]
 9101 0276 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1255:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9102              		.loc 1 1255 10 view .LVU2934
 9103 027a 12F00106 		ands	r6, r2, #1
 9104 027e 00F03181 		beq	.L955
 9105              	.LVL1014:
1256:src/display.c **** 	  set_dig(i, *p);
 9106              		.loc 1 1256 12 is_stmt 1 view .LVU2935
 9107 0282 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1256:src/display.c **** 	  set_dig(i, *p);
 9108              		.loc 1 1256 8 is_stmt 0 view .LVU2936
 9109 0286 0026     		movs	r6, #0
1256:src/display.c **** 	  set_dig(i, *p);
 9110              		.loc 1 1256 2 view .LVU2937
 9111 0288 39B1     		cbz	r1, .L957
 9112              	.LVL1015:
 9113              	.L956:
1257:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9114              		.loc 1 1257 4 is_stmt 1 view .LVU2938
 9115 028a 3046     		mov	r0, r6
 9116 028c FFF7FEFF 		bl	set_dig
 9117              	.LVL1016:
1258:src/display.c **** 	}
 9118              		.loc 1 1258 4 view .LVU2939
1256:src/display.c **** 	  set_dig(i, *p);
 9119              		.loc 1 1256 12 is_stmt 0 view .LVU2940
 9120 0290 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 9121              	.LVL1017:
1258:src/display.c **** 	}
ARM GAS  /tmp/ccE2jV6G.s 			page 272


 9122              		.loc 1 1258 6 view .LVU2941
 9123 0294 0936     		adds	r6, r6, #9
 9124              	.LVL1018:
1256:src/display.c **** 	  set_dig(i, *p);
 9125              		.loc 1 1256 24 is_stmt 1 view .LVU2942
1256:src/display.c **** 	  set_dig(i, *p);
 9126              		.loc 1 1256 12 view .LVU2943
1256:src/display.c **** 	  set_dig(i, *p);
 9127              		.loc 1 1256 2 is_stmt 0 view .LVU2944
 9128 0296 0029     		cmp	r1, #0
 9129 0298 F7D1     		bne	.L956
 9130              	.LVL1019:
 9131              	.L957:
1260:src/display.c ****       } else {
 9132              		.loc 1 1260 2 is_stmt 1 view .LVU2945
 9133 029a FFF7FEFF 		bl	carry_overflow
 9134              	.LVL1020:
1260:src/display.c ****       } else {
 9135              		.loc 1 1260 2 is_stmt 0 view .LVU2946
 9136              	.LBE549:
 9137              	.LBE548:
2896:src/display.c **** 	      goto finish;
 9138              		.loc 1 2896 6 is_stmt 1 view .LVU2947
2896:src/display.c **** 	      goto finish;
 9139              		.loc 1 2896 9 is_stmt 0 view .LVU2948
 9140 029e 194B     		ldr	r3, .L1166+4
 9141 02a0 1B68     		ldr	r3, [r3]
 9142 02a2 002B     		cmp	r3, #0
 9143 02a4 40F0E780 		bne	.L1042
 9144              	.LVL1021:
 9145              	.L1120:
2896:src/display.c **** 	      goto finish;
 9146              		.loc 1 2896 9 view .LVU2949
 9147 02a8 1D4E     		ldr	r6, .L1166+32
 9148              	.LVL1022:
 9149              	.L949:
2926:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9150              		.loc 1 2926 2 is_stmt 1 view .LVU2950
 9151 02aa FFF7FEFF 		bl	set_annunciators
 9152              	.LVL1023:
2927:src/display.c **** 	  ShowRPN = 0;
 9153              		.loc 1 2927 2 view .LVU2951
2927:src/display.c **** 	  ShowRPN = 0;
 9154              		.loc 1 2927 50 is_stmt 0 view .LVU2952
 9155 02ae 3B68     		ldr	r3, [r7]
 9156 02b0 002B     		cmp	r3, #0
 9157 02b2 7FF467AF 		bne	.L852
2927:src/display.c **** 	  ShowRPN = 0;
 9158              		.loc 1 2927 69 discriminator 3 view .LVU2953
 9159 02b6 019B     		ldr	r3, [sp, #4]
 9160 02b8 B3F90030 		ldrsh	r3, [r3]
 9161 02bc 002B     		cmp	r3, #0
 9162 02be 7FF461AF 		bne	.L852
2927:src/display.c **** 	  ShowRPN = 0;
 9163              		.loc 1 2927 81 discriminator 4 view .LVU2954
 9164 02c2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9165 02c4 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
ARM GAS  /tmp/ccE2jV6G.s 			page 273


 9166 02c6 03F00403 		and	r3, r3, #4
 9167 02ca 1343     		orrs	r3, r3, r2
 9168 02cc 7FF45AAF 		bne	.L852
 9169 02d0 DFF85080 		ldr	r8, .L1166+36
 9170 02d4 5EE7     		b	.L983
 9171              	.LVL1024:
 9172              	.L1131:
2887:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9173              		.loc 1 2887 42 discriminator 1 view .LVU2955
 9174 02d6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2887:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9175              		.loc 1 2887 39 discriminator 1 view .LVU2956
 9176 02d8 13F00101 		ands	r1, r3, #1
 9177 02dc 7FF44AAF 		bne	.L948
 9178              	.LVL1025:
2888:src/display.c **** 	      }
 9179              		.loc 1 2888 3 is_stmt 1 view .LVU2957
 9180 02e0 FFF7FEFF 		bl	format_reg
 9181              	.LVL1026:
2896:src/display.c **** 	      goto finish;
 9182              		.loc 1 2896 6 view .LVU2958
2896:src/display.c **** 	      goto finish;
 9183              		.loc 1 2896 9 is_stmt 0 view .LVU2959
 9184 02e4 074B     		ldr	r3, .L1166+4
 9185 02e6 1B68     		ldr	r3, [r3]
 9186 02e8 002B     		cmp	r3, #0
 9187 02ea DED0     		beq	.L949
 9188 02ec 77E7     		b	.L950
 9189              	.LVL1027:
 9190              	.L985:
2936:src/display.c **** 	  annunciators();
 9191              		.loc 1 2936 52 discriminator 3 view .LVU2960
 9192 02ee 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9193 02f0 13F0C00F 		tst	r3, #192
 9194 02f4 3FF46FAF 		beq	.L987
 9195 02f8 6BE7     		b	.L986
 9196              	.L1001:
 9197 02fa 0023     		movs	r3, #0
 9198 02fc 5CE7     		b	.L984
 9199              	.L1167:
 9200 02fe 00BF     		.align	2
 9201              	.L1166:
 9202 0300 00000000 		.word	StateWhileOn
 9203 0304 00000000 		.word	WasDataEntry
 9204 0308 00000000 		.word	.LANCHOR21
 9205 030c 00000000 		.word	DispPlot
 9206 0310 00000000 		.word	DispMsg
 9207 0314 00000000 		.word	.LANCHOR25
 9208 0318 00000000 		.word	.LANCHOR19
 9209 031c 00000000 		.word	LastDisplayedNumber
 9210 0320 00000000 		.word	ShowRegister
 9211 0324 00000000 		.word	ShowRPN
 9212 0328 B4000000 		.word	.LC26
 9213 032c 00000000 		.word	main_ram
 9214 0330 00000000 		.word	.LANCHOR18
 9215 0334 00000000 		.word	ProgFree
 9216              	.LVL1028:
ARM GAS  /tmp/ccE2jV6G.s 			page 274


 9217              	.L1129:
 9218              	.LBB572:
2640:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9219              		.loc 1 2640 4 is_stmt 1 view .LVU2961
2640:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9220              		.loc 1 2640 9 is_stmt 0 view .LVU2962
 9221 0338 AF4B     		ldr	r3, .L1168
 9222 033a CDF86650 		str	r5, [sp, #102]	@ unaligned
2641:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9223              		.loc 1 2641 4 is_stmt 1 view .LVU2963
2640:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9224              		.loc 1 2640 9 is_stmt 0 view .LVU2964
 9225 033e 93E80700 		ldm	r3, {r0, r1, r2}
 9226 0342 17AB     		add	r3, sp, #92
 9227 0344 03C3     		stmia	r3!, {r0, r1}
2641:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9228              		.loc 1 2641 4 view .LVU2965
 9229 0346 2946     		mov	r1, r5
 9230 0348 AC48     		ldr	r0, .L1168+4
2640:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9231              		.loc 1 2640 9 view .LVU2966
 9232 034a 1A80     		strh	r2, [r3]	@ movhi
2641:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9233              		.loc 1 2641 4 view .LVU2967
 9234 034c FFF7FEFF 		bl	set_digits_string
 9235              	.LVL1029:
2642:src/display.c **** #ifndef REALBUILD
 9236              		.loc 1 2642 4 is_stmt 1 view .LVU2968
 9237              	.LBB573:
 9238              	.LBI573:
 404:src/display.c ****   if (res) *res++ = ch;
 9239              		.loc 1 404 14 view .LVU2969
 9240              	.LBB574:
 405:src/display.c ****   else	set_dig(base, ch);
 9241              		.loc 1 405 3 view .LVU2970
 406:src/display.c ****   return res;
 9242              		.loc 1 406 8 view .LVU2971
 9243 0350 7221     		movs	r1, #114
 9244 0352 6C20     		movs	r0, #108
 9245 0354 FFF7FEFF 		bl	set_dig
 9246              	.LVL1030:
 407:src/display.c **** }
 9247              		.loc 1 407 3 view .LVU2972
 407:src/display.c **** }
 9248              		.loc 1 407 3 is_stmt 0 view .LVU2973
 9249              	.LBE574:
 9250              	.LBE573:
2644:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9251              		.loc 1 2644 4 is_stmt 1 view .LVU2974
 9252 0358 A949     		ldr	r1, .L1168+8
 9253 035a AA48     		ldr	r0, .L1168+12
 9254 035c AA4F     		ldr	r7, .L1168+16
 9255 035e AB4E     		ldr	r6, .L1168+20
 9256 0360 FFF7FEFF 		bl	scopy
 9257              	.LVL1031:
2645:src/display.c **** #endif
 9258              		.loc 1 2645 4 view .LVU2975
ARM GAS  /tmp/ccE2jV6G.s 			page 275


 9259 0364 AA49     		ldr	r1, .L1168+24
 9260 0366 AB48     		ldr	r0, .L1168+28
 9261 0368 FFF7FEFF 		bl	scopy
 9262              	.LVL1032:
2647:src/display.c **** 	  set_status(vers);
 9263              		.loc 1 2647 4 view .LVU2976
 9264 036c AA49     		ldr	r1, .L1168+32
 9265 036e 0422     		movs	r2, #4
 9266 0370 0DF16500 		add	r0, sp, #101
 9267 0374 FFF7FEFF 		bl	xcopy
 9268              	.LVL1033:
2648:src/display.c **** 	  skip = 1;
 9269              		.loc 1 2648 4 view .LVU2977
 9270 0378 17A8     		add	r0, sp, #92
 9271 037a FFF7FEFF 		bl	set_status
 9272              	.LVL1034:
2649:src/display.c **** 	  goto nostk;
 9273              		.loc 1 2649 4 view .LVU2978
2650:src/display.c **** 	} else if (State2.confirm) {
 9274              		.loc 1 2650 4 view .LVU2979
2650:src/display.c **** 	} else if (State2.confirm) {
 9275              		.loc 1 2650 4 is_stmt 0 view .LVU2980
 9276              	.LBE572:
2880:src/display.c **** 	if (!skip) {
 9277              		.loc 1 2880 2 is_stmt 1 view .LVU2981
 9278 037e A74B     		ldr	r3, .L1168+36
 9279 0380 0193     		str	r3, [sp, #4]
 9280 0382 FFF7FEFF 		bl	show_flags
 9281              	.LVL1035:
2881:src/display.c **** 	  if (State2.runmode) {
 9282              		.loc 1 2881 2 view .LVU2982
2926:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9283              		.loc 1 2926 2 view .LVU2983
 9284 0386 FFF7FEFF 		bl	set_annunciators
 9285              	.LVL1036:
2927:src/display.c **** 	  ShowRPN = 0;
 9286              		.loc 1 2927 2 view .LVU2984
 9287 038a FBE6     		b	.L852
 9288              	.LVL1037:
 9289              	.L1003:
2927:src/display.c **** 	  ShowRPN = 0;
 9290              		.loc 1 2927 2 is_stmt 0 view .LVU2985
 9291 038c 0123     		movs	r3, #1
 9292 038e 13E7     		b	.L984
 9293              	.LVL1038:
 9294              	.L1132:
2661:src/display.c **** 	  if (! State2.dot)
 9295              		.loc 1 2661 4 is_stmt 1 view .LVU2986
2661:src/display.c **** 	  if (! State2.dot)
 9296              		.loc 1 2661 9 is_stmt 0 view .LVU2987
 9297 0390 A349     		ldr	r1, .L1168+40
 9298 0392 20A8     		add	r0, sp, #128
 9299              	.LVL1039:
2661:src/display.c **** 	  if (! State2.dot)
 9300              		.loc 1 2661 9 view .LVU2988
 9301 0394 FFF7FEFF 		bl	scopy
 9302              	.LVL1040:
ARM GAS  /tmp/ccE2jV6G.s 			page 276


2662:src/display.c **** 	    *bp++ = '\235';
 9303              		.loc 1 2662 8 view .LVU2989
 9304 0398 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9305              	.LVL1041:
2662:src/display.c **** 	    *bp++ = '\235';
 9306              		.loc 1 2662 4 is_stmt 1 view .LVU2990
2662:src/display.c **** 	    *bp++ = '\235';
 9307              		.loc 1 2662 7 is_stmt 0 view .LVU2991
 9308 039a 5B06     		lsls	r3, r3, #25
 9309 039c 44D5     		bpl	.L1136
 9310              	.LVL1042:
 9311              	.L892:
2800:src/display.c **** 	    set_status_top(buf);
 9312              		.loc 1 2800 4 is_stmt 1 view .LVU2992
2800:src/display.c **** 	    set_status_top(buf);
 9313              		.loc 1 2800 7 is_stmt 0 view .LVU2993
 9314 039e B8F1000F 		cmp	r8, #0
 9315 03a2 3FF457AF 		beq	.L859
 9316              	.L1124:
2801:src/display.c **** 	    no_status_top = 1;
 9317              		.loc 1 2801 6 is_stmt 1 view .LVU2994
 9318              	.LVL1043:
 9319              	.LBB575:
 9320              	.LBI575:
3499:src/display.c **** 	if (no_status_top) return;
 9321              		.loc 1 3499 19 view .LVU2995
 9322              	.LBB576:
3500:src/display.c **** 	if (State2.runmode) {
 9323              		.loc 1 3500 2 view .LVU2996
3500:src/display.c **** 	if (State2.runmode) {
 9324              		.loc 1 3500 5 is_stmt 0 view .LVU2997
 9325 03a6 B9F90030 		ldrsh	r3, [r9]
 9326 03aa 002B     		cmp	r3, #0
 9327 03ac 7FF461AE 		bne	.L894
 9328 03b0 20A8     		add	r0, sp, #128
 9329              	.LVL1044:
3500:src/display.c **** 	if (State2.runmode) {
 9330              		.loc 1 3500 5 view .LVU2998
 9331 03b2 FFF7FEFF 		bl	set_status_top.part.0
 9332              	.LVL1045:
3500:src/display.c **** 	if (State2.runmode) {
 9333              		.loc 1 3500 5 view .LVU2999
 9334 03b6 5CE6     		b	.L894
 9335              	.LVL1046:
 9336              	.L947:
3500:src/display.c **** 	if (State2.runmode) {
 9337              		.loc 1 3500 5 view .LVU3000
 9338              	.LBE576:
 9339              	.LBE575:
2891:src/display.c **** 	    } else {
 9340              		.loc 1 2891 3 is_stmt 1 view .LVU3001
 9341 03b8 9A48     		ldr	r0, .L1168+44
 9342 03ba 2421     		movs	r1, #36
 9343 03bc FFF7FEFF 		bl	set_digits_string
 9344              	.LVL1047:
2896:src/display.c **** 	      goto finish;
 9345              		.loc 1 2896 6 view .LVU3002
ARM GAS  /tmp/ccE2jV6G.s 			page 277


2896:src/display.c **** 	      goto finish;
 9346              		.loc 1 2896 9 is_stmt 0 view .LVU3003
 9347 03c0 994B     		ldr	r3, .L1168+48
 9348 03c2 1B68     		ldr	r3, [r3]
 9349 03c4 002B     		cmp	r3, #0
 9350 03c6 3FF4DBAE 		beq	.L1122
 9351 03ca 08E7     		b	.L950
 9352              	.LVL1048:
 9353              	.L854:
2658:src/display.c **** 	  }
 9354              		.loc 1 2658 6 is_stmt 1 view .LVU3004
 9355 03cc 934B     		ldr	r3, .L1168+36
 9356 03ce 9748     		ldr	r0, .L1168+52
 9357 03d0 0193     		str	r3, [sp, #4]
 9358 03d2 8D4F     		ldr	r7, .L1168+16
 9359 03d4 FFF7FEFF 		bl	set_status
 9360              	.LVL1049:
2878:src/display.c ****       nostk:
 9361              		.loc 1 2878 2 view .LVU3005
 9362 03d8 FFF7FEFF 		bl	show_stack
 9363              	.LVL1050:
2880:src/display.c **** 	if (!skip) {
 9364              		.loc 1 2880 2 view .LVU3006
 9365 03dc FFF7FEFF 		bl	show_flags
 9366              	.LVL1051:
2881:src/display.c **** 	  if (State2.runmode) {
 9367              		.loc 1 2881 2 view .LVU3007
 9368 03e0 54E6     		b	.L856
 9369              	.LVL1052:
 9370              	.L1130:
 9371              	.LBB577:
2905:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9372              		.loc 1 2905 6 is_stmt 0 discriminator 1 view .LVU3008
 9373 03e2 9349     		ldr	r1, .L1168+56
 9374 03e4 0BEB8B03 		add	r3, fp, fp, lsl #2
2906:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9375              		.loc 1 2906 21 discriminator 1 view .LVU3009
 9376 03e8 0BF0010B 		and	fp, fp, #1
 9377              	.LVL1053:
2905:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9378              		.loc 1 2905 6 discriminator 1 view .LVU3010
 9379 03ec 1944     		add	r1, r1, r3
 9380 03ee 20A8     		add	r0, sp, #128
 9381 03f0 0BF1030B 		add	fp, fp, #3
 9382 03f4 0293     		str	r3, [sp, #8]
 9383 03f6 FFF7FEFF 		bl	scopy_spc
 9384              	.LVL1054:
 9385 03fa 5A46     		mov	r2, fp
 9386 03fc 4146     		mov	r1, r8
 9387 03fe FFF7FEFF 		bl	num_arg_0
 9388              	.LVL1055:
2907:src/display.c **** #ifndef REALBUILD
 9389              		.loc 1 2907 6 is_stmt 1 discriminator 1 view .LVU3011
 9390 0402 0921     		movs	r1, #9
 9391 0404 20A8     		add	r0, sp, #128
 9392 0406 FFF7FEFF 		bl	set_digits_string
 9393              	.LVL1056:
ARM GAS  /tmp/ccE2jV6G.s 			page 278


2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9394              		.loc 1 2909 6 discriminator 1 view .LVU3012
 9395 040a 2822     		movs	r2, #40
 9396 040c 3146     		mov	r1, r6
 9397 040e 20A8     		add	r0, sp, #128
 9398 0410 FFF7FEFF 		bl	xset
 9399              	.LVL1057:
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9400              		.loc 1 2910 6 discriminator 1 view .LVU3013
 9401 0414 0121     		movs	r1, #1
 9402 0416 DAF80000 		ldr	r0, [r10]
 9403 041a 3246     		mov	r2, r6
 9404 041c FFF7FEFF 		bl	set_exp
 9405              	.LVL1058:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9406              		.loc 1 2911 6 discriminator 1 view .LVU3014
 9407 0420 8449     		ldr	r1, .L1168+60
 9408 0422 029B     		ldr	r3, [sp, #8]
 9409 0424 1944     		add	r1, r1, r3
 9410 0426 6AE6     		b	.L988
 9411              	.LVL1059:
 9412              	.L1136:
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9413              		.loc 1 2911 6 is_stmt 0 discriminator 1 view .LVU3015
 9414              	.LBE577:
2663:src/display.c **** 	  if (yreg_enabled) {
 9415              		.loc 1 2663 6 is_stmt 1 view .LVU3016
2663:src/display.c **** 	  if (yreg_enabled) {
 9416              		.loc 1 2663 12 is_stmt 0 view .LVU3017
 9417 0428 9D23     		movs	r3, #157
 9418 042a 0370     		strb	r3, [r0]
 9419 042c B7E7     		b	.L892
 9420              	.LVL1060:
 9421              	.L970:
 9422              	.LBB578:
 9423              	.LBB565:
1353:src/display.c **** 	    gotdot = i;
 9424              		.loc 1 1353 4 is_stmt 1 view .LVU3018
1353:src/display.c **** 	    gotdot = i;
 9425              		.loc 1 1353 7 is_stmt 0 view .LVU3019
 9426 042e 3BEA2B0B 		bics	fp, fp, fp, asr #32
 9427 0432 28BF     		it	cs
 9428 0434 C346     		movcs	fp, r8
 9429              	.LVL1061:
1355:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9430              		.loc 1 1355 4 is_stmt 1 view .LVU3020
1356:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9431              		.loc 1 1356 6 view .LVU3021
1356:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9432              		.loc 1 1356 13 is_stmt 0 view .LVU3022
 9433 0436 ABF11B0B 		sub	fp, fp, #27
 9434              	.LVL1062:
1357:src/display.c **** 	      break;
 9435              		.loc 1 1357 6 is_stmt 1 view .LVU3023
1357:src/display.c **** 	      break;
 9436              		.loc 1 1357 9 is_stmt 0 view .LVU3024
 9437 043a BBF1000F 		cmp	fp, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 279


 9438 043e 10DD     		ble	.L959
1363:src/display.c **** 	  }
 9439              		.loc 1 1363 6 view .LVU3025
 9440 0440 DFF80882 		ldr	r8, .L1168+84
 9441              	.LVL1063:
 9442              	.L975:
1360:src/display.c **** 	      break;
 9443              		.loc 1 1360 6 is_stmt 1 view .LVU3026
1363:src/display.c **** 	  }
 9444              		.loc 1 1363 6 view .LVU3027
 9445              	.LBB550:
 9446              	.LBB551:
 367:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9447              		.loc 1 367 3 view .LVU3028
 9448 0444 5846     		mov	r0, fp
 9449              	.LBE551:
 9450              	.LBE550:
1360:src/display.c **** 	      break;
 9451              		.loc 1 1360 9 is_stmt 0 view .LVU3029
 9452 0446 16B1     		cbz	r6, .L976
 9453              	.LVL1064:
1360:src/display.c **** 	      break;
 9454              		.loc 1 1360 27 view .LVU3030
 9455 0448 BBF1090F 		cmp	fp, #9
 9456 044c 09D0     		beq	.L959
 9457              	.L976:
1363:src/display.c **** 	  }
 9458              		.loc 1 1363 6 view .LVU3031
 9459 044e 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 9460              	.LVL1065:
 9461              	.LBB553:
 9462              	.LBI550:
 364:src/display.c ****   if (sep == SEP_NONE)
 9463              		.loc 1 364 14 is_stmt 1 view .LVU3032
 9464              	.LBB552:
 365:src/display.c ****     return res;
 9465              		.loc 1 365 3 view .LVU3033
 365:src/display.c ****     return res;
 9466              		.loc 1 365 6 is_stmt 0 view .LVU3034
 9467 0452 09B1     		cbz	r1, .L977
 9468 0454 FFF7FEFF 		bl	set_separator.part.0
 9469              	.LVL1066:
 9470              	.L977:
 365:src/display.c ****     return res;
 9471              		.loc 1 365 6 view .LVU3035
 9472              	.LBE552:
 9473              	.LBE553:
1355:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9474              		.loc 1 1355 4 is_stmt 1 view .LVU3036
1356:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9475              		.loc 1 1356 6 view .LVU3037
1356:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9476              		.loc 1 1356 13 is_stmt 0 view .LVU3038
 9477 0458 ABF11B0B 		sub	fp, fp, #27
 9478              	.LVL1067:
1357:src/display.c **** 	      break;
 9479              		.loc 1 1357 6 is_stmt 1 view .LVU3039
ARM GAS  /tmp/ccE2jV6G.s 			page 280


1357:src/display.c **** 	      break;
 9480              		.loc 1 1357 9 is_stmt 0 view .LVU3040
 9481 045c BBF1000F 		cmp	fp, #0
 9482 0460 F0DC     		bgt	.L975
 9483              	.LVL1068:
 9484              	.L959:
1381:src/display.c **** 	    p++;
 9485              		.loc 1 1381 4 is_stmt 1 view .LVU3041
1381:src/display.c **** 	    p++;
 9486              		.loc 1 1381 7 is_stmt 0 view .LVU3042
 9487 0462 9AF80020 		ldrb	r2, [r10]	@ zero_extendqisi2
 9488 0466 452A     		cmp	r2, #69
 9489 0468 00F06B81 		beq	.L1137
 9490              	.L978:
 9491              	.LVL1069:
1381:src/display.c **** 	    p++;
 9492              		.loc 1 1381 7 view .LVU3043
 9493              	.LBE565:
 9494              	.LBE578:
2896:src/display.c **** 	      goto finish;
 9495              		.loc 1 2896 6 is_stmt 1 view .LVU3044
2896:src/display.c **** 	      goto finish;
 9496              		.loc 1 2896 9 is_stmt 0 view .LVU3045
 9497 046c 6E4B     		ldr	r3, .L1168+48
 9498 046e 1B68     		ldr	r3, [r3]
 9499 0470 002B     		cmp	r3, #0
 9500 0472 3FF419AF 		beq	.L1120
 9501              	.L1042:
 9502 0476 654E     		ldr	r6, .L1168+20
 9503 0478 B1E6     		b	.L950
 9504              	.LVL1070:
 9505              	.L874:
2738:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9506              		.loc 1 2738 9 is_stmt 1 view .LVU3046
2738:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9507              		.loc 1 2738 12 is_stmt 0 view .LVU3047
 9508 047a BBF1000F 		cmp	fp, #0
 9509 047e 40F01081 		bne	.L1138
2793:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9510              		.loc 1 2793 9 is_stmt 1 view .LVU3048
2793:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9511              		.loc 1 2793 12 is_stmt 0 view .LVU3049
 9512 0482 1807     		lsls	r0, r3, #28
 9513 0484 00F17581 		bmi	.L1139
2808:src/display.c **** 	  show_status();
 9514              		.loc 1 2808 9 is_stmt 1 view .LVU3050
2808:src/display.c **** 	  show_status();
 9515              		.loc 1 2808 19 is_stmt 0 view .LVU3051
 9516 0488 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2808:src/display.c **** 	  show_status();
 9517              		.loc 1 2808 12 view .LVU3052
 9518 048a 002F     		cmp	r7, #0
 9519 048c 40F0E081 		bne	.L1140
2811:src/display.c **** 	  show_label();
 9520              		.loc 1 2811 9 is_stmt 1 view .LVU3053
2811:src/display.c **** 	  show_label();
 9521              		.loc 1 2811 13 is_stmt 0 view .LVU3054
ARM GAS  /tmp/ccE2jV6G.s 			page 281


 9522 0490 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2811:src/display.c **** 	  show_label();
 9523              		.loc 1 2811 12 view .LVU3055
 9524 0492 5A07     		lsls	r2, r3, #29
 9525 0494 00F1AE81 		bmi	.L1141
2814:src/display.c **** 	  show_registers();
 9526              		.loc 1 2814 9 is_stmt 1 view .LVU3056
2814:src/display.c **** 	  show_registers();
 9527              		.loc 1 2814 12 is_stmt 0 view .LVU3057
 9528 0498 1807     		lsls	r0, r3, #28
 9529 049a 00F1A682 		bmi	.L1142
2824:src/display.c **** 	  if (DispMsg) { 
 9530              		.loc 1 2824 9 is_stmt 1 view .LVU3058
2824:src/display.c **** 	  if (DispMsg) { 
 9531              		.loc 1 2824 12 is_stmt 0 view .LVU3059
 9532 049e 4806     		lsls	r0, r1, #25
 9533 04a0 40F14183 		bpl	.L927
2825:src/display.c **** 	    set_status(DispMsg);
 9534              		.loc 1 2825 4 is_stmt 1 view .LVU3060
2825:src/display.c **** 	    set_status(DispMsg);
 9535              		.loc 1 2825 8 is_stmt 0 view .LVU3061
 9536 04a4 584F     		ldr	r7, .L1168+16
 9537 04a6 3B68     		ldr	r3, [r7]
2825:src/display.c **** 	    set_status(DispMsg);
 9538              		.loc 1 2825 7 view .LVU3062
 9539 04a8 002B     		cmp	r3, #0
 9540 04aa 00F05D83 		beq	.L928
2826:src/display.c **** 	  } else if (DispPlot) {
 9541              		.loc 1 2826 6 is_stmt 1 view .LVU3063
 9542 04ae 1846     		mov	r0, r3
 9543 04b0 FFF7FEFF 		bl	set_status
 9544              	.LVL1071:
2878:src/display.c ****       nostk:
 9545              		.loc 1 2878 2 view .LVU3064
 9546 04b4 594B     		ldr	r3, .L1168+36
 9547 04b6 0193     		str	r3, [sp, #4]
 9548 04b8 FFF7FEFF 		bl	show_stack
 9549              	.LVL1072:
2880:src/display.c **** 	if (!skip) {
 9550              		.loc 1 2880 2 view .LVU3065
 9551 04bc FFF7FEFF 		bl	show_flags
 9552              	.LVL1073:
2881:src/display.c **** 	  if (State2.runmode) {
 9553              		.loc 1 2881 2 view .LVU3066
 9554 04c0 E4E5     		b	.L856
 9555              	.L1133:
2674:src/display.c **** 	  if (State2.numdigit > 0)
 9556              		.loc 1 2674 4 view .LVU3067
2674:src/display.c **** 	  if (State2.numdigit > 0)
 9557              		.loc 1 2674 9 is_stmt 0 view .LVU3068
 9558 04c2 2E22     		movs	r2, #46
 9559 04c4 5C49     		ldr	r1, .L1168+64
 9560 04c6 20A8     		add	r0, sp, #128
 9561              	.LVL1074:
2674:src/display.c **** 	  if (State2.numdigit > 0)
 9562              		.loc 1 2674 9 view .LVU3069
 9563 04c8 FFF7FEFF 		bl	scopy_char
ARM GAS  /tmp/ccE2jV6G.s 			page 282


 9564              	.LVL1075:
2675:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9565              		.loc 1 2675 14 view .LVU3070
 9566 04cc E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2674:src/display.c **** 	  if (State2.numdigit > 0)
 9567              		.loc 1 2674 9 view .LVU3071
 9568 04ce 0346     		mov	r3, r0
 9569              	.LVL1076:
2675:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9570              		.loc 1 2675 4 is_stmt 1 view .LVU3072
2675:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9571              		.loc 1 2675 7 is_stmt 0 view .LVU3073
 9572 04d0 002A     		cmp	r2, #0
 9573 04d2 40F08B80 		bne	.L1143
 9574              	.L862:
2678:src/display.c **** 	  if (yreg_enabled) {
 9575              		.loc 1 2678 4 is_stmt 1 view .LVU3074
 9576              	.LVL1077:
2678:src/display.c **** 	  if (yreg_enabled) {
 9577              		.loc 1 2678 10 is_stmt 0 view .LVU3075
 9578 04d6 5F22     		movs	r2, #95
 9579 04d8 1A70     		strb	r2, [r3]
2679:src/display.c **** 	    set_status_top(buf);
 9580              		.loc 1 2679 4 is_stmt 1 view .LVU3076
2679:src/display.c **** 	    set_status_top(buf);
 9581              		.loc 1 2679 7 is_stmt 0 view .LVU3077
 9582 04da B8F1000F 		cmp	r8, #0
 9583 04de 7FF462AF 		bne	.L1124
2679:src/display.c **** 	    set_status_top(buf);
 9584              		.loc 1 2679 7 view .LVU3078
 9585 04e2 B7E6     		b	.L859
 9586              	.LVL1078:
 9587              	.L955:
 9588              	.LBB579:
 9589              	.LBB566:
1262:src/display.c **** 
 9590              		.loc 1 1262 2 is_stmt 1 view .LVU3079
 9591 04e4 FFF7FEFF 		bl	set_separator_decimal_modes
 9592              	.LVL1079:
1264:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9593              		.loc 1 1264 2 view .LVU3080
1266:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9594              		.loc 1 1266 2 view .LVU3081
1266:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9595              		.loc 1 1266 5 is_stmt 0 view .LVU3082
 9596 04e8 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9597              	.LBB554:
1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9598              		.loc 1 1273 15 view .LVU3083
 9599 04ea 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9600              	.LBE554:
1266:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9601              		.loc 1 1266 5 view .LVU3084
 9602 04ee 012A     		cmp	r2, #1
 9603 04f0 40F2CE80 		bls	.L958
 9604              	.LVL1080:
 9605              	.LBB555:
ARM GAS  /tmp/ccE2jV6G.s 			page 283


1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9606              		.loc 1 1273 14 is_stmt 1 view .LVU3085
1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9607              		.loc 1 1273 4 is_stmt 0 view .LVU3086
 9608 04f4 002B     		cmp	r3, #0
 9609 04f6 B4D0     		beq	.L959
 9610 04f8 0AF10102 		add	r2, r10, #1
 9611 04fc 1846     		mov	r0, r3
 9612              	.LBE555:
1241:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9613              		.loc 1 1241 11 view .LVU3087
 9614 04fe 4FF0FF3E 		mov	lr, #-1
 9615 0502 6FEA0A06 		mvn	r6, r10
 9616              	.LVL1081:
 9617              	.L961:
 9618              	.LBB556:
1274:src/display.c **** 	      gotdot = j;
 9619              		.loc 1 1274 9 view .LVU3088
 9620 0506 2E28     		cmp	r0, #46
 9621 0508 06EB0201 		add	r1, r6, r2
 9622              	.LVL1082:
1274:src/display.c **** 	      gotdot = j;
 9623              		.loc 1 1274 6 is_stmt 1 view .LVU3089
1274:src/display.c **** 	      gotdot = j;
 9624              		.loc 1 1274 9 is_stmt 0 view .LVU3090
 9625 050c 03D1     		bne	.L960
1274:src/display.c **** 	      gotdot = j;
 9626              		.loc 1 1274 22 view .LVU3091
 9627 050e BEF1FF3F 		cmp	lr, #-1
 9628 0512 08BF     		it	eq
 9629 0514 8E46     		moveq	lr, r1
 9630              	.LVL1083:
 9631              	.L960:
1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9632              		.loc 1 1273 28 is_stmt 1 view .LVU3092
1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9633              		.loc 1 1273 14 view .LVU3093
1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9634              		.loc 1 1273 15 is_stmt 0 view .LVU3094
 9635 0516 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
1273:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9636              		.loc 1 1273 4 view .LVU3095
 9637 051a 0028     		cmp	r0, #0
 9638 051c F3D1     		bne	.L961
1281:src/display.c **** 	  if (j > 0) {
 9639              		.loc 1 1281 4 is_stmt 1 view .LVU3096
1281:src/display.c **** 	  if (j > 0) {
 9640              		.loc 1 1281 6 is_stmt 0 view .LVU3097
 9641 051e A1F10B02 		sub	r2, r1, #11
 9642              	.LVL1084:
1282:src/display.c **** 	    p += j + 1;
 9643              		.loc 1 1282 4 is_stmt 1 view .LVU3098
1282:src/display.c **** 	    p += j + 1;
 9644              		.loc 1 1282 7 is_stmt 0 view .LVU3099
 9645 0522 002A     		cmp	r2, #0
 9646 0524 40F34981 		ble	.L1144
1283:src/display.c **** 	    i = SEGS_PER_DIGIT;
ARM GAS  /tmp/ccE2jV6G.s 			page 284


 9647              		.loc 1 1283 6 is_stmt 1 view .LVU3100
1283:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9648              		.loc 1 1283 8 is_stmt 0 view .LVU3101
 9649 0528 0A39     		subs	r1, r1, #10
1285:src/display.c **** 	      gotdot = 0;
 9650              		.loc 1 1285 9 view .LVU3102
 9651 052a 7245     		cmp	r2, lr
1283:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9652              		.loc 1 1283 8 view .LVU3103
 9653 052c 8A44     		add	r10, r10, r1
 9654              	.LVL1085:
1284:src/display.c **** 	    if (gotdot <= j) {
 9655              		.loc 1 1284 6 is_stmt 1 view .LVU3104
1285:src/display.c **** 	      gotdot = 0;
 9656              		.loc 1 1285 6 view .LVU3105
1285:src/display.c **** 	      gotdot = 0;
 9657              		.loc 1 1285 9 is_stmt 0 view .LVU3106
 9658 052e 80F23681 		bge	.L997
1290:src/display.c **** 	      gotdot = 0;
 9659              		.loc 1 1290 11 is_stmt 1 view .LVU3107
1290:src/display.c **** 	      gotdot = 0;
 9660              		.loc 1 1290 14 is_stmt 0 view .LVU3108
 9661 0532 9AF80020 		ldrb	r2, [r10]	@ zero_extendqisi2
 9662              	.LVL1086:
1290:src/display.c **** 	      gotdot = 0;
 9663              		.loc 1 1290 14 view .LVU3109
 9664 0536 2E2A     		cmp	r2, #46
 9665 0538 00F08581 		beq	.L1145
 9666              	.LVL1087:
1297:src/display.c **** 	    overflow_to_left = 1;
 9667              		.loc 1 1297 6 is_stmt 1 view .LVU3110
 9668 053c 3C21     		movs	r1, #60
 9669              	.LVL1088:
1297:src/display.c **** 	    overflow_to_left = 1;
 9670              		.loc 1 1297 6 is_stmt 0 view .LVU3111
 9671 053e FFF7FEFF 		bl	set_dig
 9672              	.LVL1089:
1298:src/display.c **** 	  }
 9673              		.loc 1 1298 6 is_stmt 1 view .LVU3112
1298:src/display.c **** 	  }
 9674              		.loc 1 1298 6 is_stmt 0 view .LVU3113
 9675 0542 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
1298:src/display.c **** 	  }
 9676              		.loc 1 1298 6 view .LVU3114
 9677              	.LBE556:
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9678              		.loc 1 1304 9 is_stmt 1 view .LVU3115
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9679              		.loc 1 1304 2 is_stmt 0 view .LVU3116
 9680 0546 002B     		cmp	r3, #0
 9681 0548 8BD0     		beq	.L959
 9682              	.LBB557:
1296:src/display.c **** 	    set_dig(0, '<');
 9683              		.loc 1 1296 18 view .LVU3117
 9684 054a 4FF0FF3B 		mov	fp, #-1
 9685              	.LVL1090:
1284:src/display.c **** 	    if (gotdot <= j) {
ARM GAS  /tmp/ccE2jV6G.s 			page 285


 9686              		.loc 1 1284 8 view .LVU3118
 9687 054e 4FF00908 		mov	r8, #9
 9688              	.LVL1091:
 9689              	.L990:
1298:src/display.c **** 	  }
 9690              		.loc 1 1298 23 view .LVU3119
 9691 0552 0126     		movs	r6, #1
 9692 0554 0AE0     		b	.L969
 9693              	.LVL1092:
 9694              	.L1146:
1298:src/display.c **** 	  }
 9695              		.loc 1 1298 23 view .LVU3120
 9696              	.LBE557:
1319:src/display.c **** #  endif
 9697              		.loc 1 1319 11 view .LVU3121
 9698 0556 D845     		cmp	r8, fp
 9699 0558 15D0     		beq	.L966
 9700              	.LVL1093:
 9701              	.L965:
1343:src/display.c **** 	      i += segs_per_digit;
 9702              		.loc 1 1343 8 view .LVU3122
 9703 055a FFF7FEFF 		bl	set_dig
 9704              	.LVL1094:
1344:src/display.c **** 	    }
 9705              		.loc 1 1344 8 is_stmt 1 view .LVU3123
1344:src/display.c **** 	    }
 9706              		.loc 1 1344 10 is_stmt 0 view .LVU3124
 9707 055e 08F10908 		add	r8, r8, #9
 9708              	.LVL1095:
 9709              	.L967:
1308:src/display.c **** 	  if (*p == '.') {
 9710              		.loc 1 1308 11 is_stmt 1 view .LVU3125
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9711              		.loc 1 1304 9 view .LVU3126
 9712 0562 1AF8013F 		ldrb	r3, [r10, #1]!	@ zero_extendqisi2
 9713              	.LVL1096:
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9714              		.loc 1 1304 2 is_stmt 0 view .LVU3127
 9715 0566 002B     		cmp	r3, #0
 9716 0568 3FF461AF 		beq	.L970
 9717              	.LVL1097:
 9718              	.L969:
1309:src/display.c **** 	    if (gotdot < 0)
 9719              		.loc 1 1309 4 is_stmt 1 view .LVU3128
1310:src/display.c **** 	      gotdot = i;
 9720              		.loc 1 1310 6 view .LVU3129
1343:src/display.c **** 	      i += segs_per_digit;
 9721              		.loc 1 1343 8 view .LVU3130
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9722              		.loc 1 1304 20 is_stmt 0 view .LVU3131
 9723 056c 452B     		cmp	r3, #69
1343:src/display.c **** 	      i += segs_per_digit;
 9724              		.loc 1 1343 8 view .LVU3132
 9725 056e 1946     		mov	r1, r3
 9726 0570 4046     		mov	r0, r8
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9727              		.loc 1 1304 20 view .LVU3133
ARM GAS  /tmp/ccE2jV6G.s 			page 286


 9728 0572 3FF45CAF 		beq	.L970
1309:src/display.c **** 	    if (gotdot < 0)
 9729              		.loc 1 1309 7 view .LVU3134
 9730 0576 2E2B     		cmp	r3, #46
 9731 0578 EFD1     		bne	.L965
1319:src/display.c **** #  endif
 9732              		.loc 1 1319 8 is_stmt 1 view .LVU3135
1321:src/display.c **** 		i += segs_per_digit;
 9733              		.loc 1 1321 3 view .LVU3136
 9734              	.LVL1098:
1325:src/display.c **** 		  i += segs_per_digit;
 9735              		.loc 1 1325 3 view .LVU3137
1310:src/display.c **** 	      gotdot = i;
 9736              		.loc 1 1310 9 is_stmt 0 view .LVU3138
 9737 057a BBF1000F 		cmp	fp, #0
1321:src/display.c **** 		i += segs_per_digit;
 9738              		.loc 1 1321 3 view .LVU3139
 9739 057e 4046     		mov	r0, r8
 9740 0580 4FF02F01 		mov	r1, #47
1310:src/display.c **** 	      gotdot = i;
 9741              		.loc 1 1310 9 view .LVU3140
 9742 0584 E7DA     		bge	.L1146
 9743              	.L966:
1326:src/display.c **** 		}
 9744              		.loc 1 1326 5 is_stmt 1 view .LVU3141
 9745              	.LVL1099:
1325:src/display.c **** 		  i += segs_per_digit;
 9746              		.loc 1 1325 6 is_stmt 0 view .LVU3142
 9747 0586 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9748 0588 012B     		cmp	r3, #1
 9749 058a 26D9     		bls	.L968
 9750 058c C346     		mov	fp, r8
1326:src/display.c **** 		}
 9751              		.loc 1 1326 7 view .LVU3143
 9752 058e 08F10908 		add	r8, r8, #9
 9753              	.LVL1100:
1326:src/display.c **** 		}
 9754              		.loc 1 1326 7 view .LVU3144
 9755 0592 E6E7     		b	.L967
 9756              	.LVL1101:
 9757              	.L1134:
1326:src/display.c **** 		}
 9758              		.loc 1 1326 7 view .LVU3145
 9759              	.LBE566:
 9760              	.LBE579:
2693:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9761              		.loc 1 2693 4 is_stmt 1 view .LVU3146
2693:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9762              		.loc 1 2693 35 is_stmt 0 view .LVU3147
 9763 0594 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9764 0596 2949     		ldr	r1, .L1168+68
 9765 0598 0623     		movs	r3, #6
 9766 059a 03EB0213 		add	r3, r3, r2, lsl #4
2693:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9767              		.loc 1 2693 9 view .LVU3148
 9768 059e 1944     		add	r1, r1, r3
 9769 05a0 20A8     		add	r0, sp, #128
ARM GAS  /tmp/ccE2jV6G.s 			page 287


 9770              	.LVL1102:
2693:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9771              		.loc 1 2693 9 view .LVU3149
 9772 05a2 FFF7FEFF 		bl	scopy
 9773              	.LVL1103:
2694:src/display.c **** 	  if (State2.dot) {
 9774              		.loc 1 2694 4 is_stmt 1 view .LVU3150
2694:src/display.c **** 	  if (State2.dot) {
 9775              		.loc 1 2694 9 is_stmt 0 view .LVU3151
 9776 05a6 264B     		ldr	r3, .L1168+72
 9777 05a8 94F91510 		ldrsb	r1, [r4, #21]
 9778 05ac 254A     		ldr	r2, .L1168+76
 9779 05ae 12EA2101 		ands	r1, r2, r1, asr #32
 9780 05b2 38BF     		it	cc
 9781 05b4 1946     		movcc	r1, r3
 9782 05b6 FFF7FEFF 		bl	scopy
 9783              	.LVL1104:
2695:src/display.c **** 	    *bp++ = 's';
 9784              		.loc 1 2695 8 view .LVU3152
 9785 05ba 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9786              	.LVL1105:
2695:src/display.c **** 	    *bp++ = 's';
 9787              		.loc 1 2695 4 is_stmt 1 view .LVU3153
2695:src/display.c **** 	    *bp++ = 's';
 9788              		.loc 1 2695 7 is_stmt 0 view .LVU3154
 9789 05bc 5906     		lsls	r1, r3, #25
 9790 05be 47D5     		bpl	.L866
2696:src/display.c **** 	    *bp++ = '_';
 9791              		.loc 1 2696 6 is_stmt 1 view .LVU3155
 9792              	.LVL1106:
2696:src/display.c **** 	    *bp++ = '_';
 9793              		.loc 1 2696 12 is_stmt 0 view .LVU3156
 9794 05c0 7322     		movs	r2, #115
2697:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9795              		.loc 1 2697 12 view .LVU3157
 9796 05c2 5F23     		movs	r3, #95
2696:src/display.c **** 	    *bp++ = '_';
 9797              		.loc 1 2696 12 view .LVU3158
 9798 05c4 0270     		strb	r2, [r0]
2697:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9799              		.loc 1 2697 6 is_stmt 1 view .LVU3159
 9800              	.LVL1107:
2697:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9801              		.loc 1 2697 12 is_stmt 0 view .LVU3160
 9802 05c6 4370     		strb	r3, [r0, #1]
 9803 05c8 E9E6     		b	.L892
 9804              	.LVL1108:
 9805              	.L1135:
 9806              	.LBB580:
 9807              	.LBB567:
1251:src/display.c **** 	p++;
 9808              		.loc 1 1251 2 is_stmt 1 view .LVU3161
 9809              	.LBB558:
 9810              	.LBI558:
 293:src/display.c **** {
 9811              		.loc 1 293 13 view .LVU3162
 9812              	.LBB559:
ARM GAS  /tmp/ccE2jV6G.s 			page 288


 295:src/display.c ****   set_dot(MANT_SIGN);
 9813              		.loc 1 295 3 view .LVU3163
 295:src/display.c ****   set_dot(MANT_SIGN);
 9814              		.loc 1 295 25 is_stmt 0 view .LVU3164
 9815 05ca 0E49     		ldr	r1, .L1168+12
 296:src/display.c **** }
 9816              		.loc 1 296 3 view .LVU3165
 9817 05cc 8120     		movs	r0, #129
 9818              	.LVL1109:
 295:src/display.c ****   set_dot(MANT_SIGN);
 9819              		.loc 1 295 25 view .LVU3166
 9820 05ce 0A70     		strb	r2, [r1]
 296:src/display.c **** }
 9821              		.loc 1 296 3 is_stmt 1 view .LVU3167
 9822              	.LBE559:
 9823              	.LBE558:
1252:src/display.c ****       }
 9824              		.loc 1 1252 3 is_stmt 0 view .LVU3168
 9825 05d0 0AF1010A 		add	r10, r10, #1
 9826              	.LVL1110:
 9827              	.LBB561:
 9828              	.LBB560:
 296:src/display.c **** }
 9829              		.loc 1 296 3 view .LVU3169
 9830 05d4 FFF7FEFF 		bl	set_dot
 9831              	.LVL1111:
 9832              	.LBE560:
 9833              	.LBE561:
1252:src/display.c ****       }
 9834              		.loc 1 1252 2 is_stmt 1 view .LVU3170
1252:src/display.c ****       }
 9835              		.loc 1 1252 2 is_stmt 0 view .LVU3171
 9836 05d8 4BE6     		b	.L954
 9837              	.LVL1112:
 9838              	.L968:
1329:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9839              		.loc 1 1329 5 is_stmt 1 view .LVU3172
 9840 05da 1B4B     		ldr	r3, .L1168+80
 9841 05dc 0022     		movs	r2, #0
 9842 05de 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9843 05e0 A8F10900 		sub	r0, r8, #9
 9844              	.LVL1113:
1329:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9845              		.loc 1 1329 5 is_stmt 0 view .LVU3173
 9846 05e4 FFF7FEFF 		bl	set_decimal
 9847              	.LVL1114:
 9848 05e8 C346     		mov	fp, r8
 9849 05ea BAE7     		b	.L967
 9850              	.LVL1115:
 9851              	.L1143:
1329:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9852              		.loc 1 1329 5 view .LVU3174
 9853              	.LBE567:
 9854              	.LBE580:
2676:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9855              		.loc 1 2676 6 is_stmt 1 view .LVU3175
2676:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
ARM GAS  /tmp/ccE2jV6G.s 			page 289


 9856              		.loc 1 2676 11 is_stmt 0 view .LVU3176
 9857 05ec 2189     		ldrh	r1, [r4, #8]
 9858 05ee FFF7FEFF 		bl	num_arg_0
 9859              	.LVL1116:
2676:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9860              		.loc 1 2676 11 view .LVU3177
 9861 05f2 0346     		mov	r3, r0
 9862              	.LVL1117:
2676:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9863              		.loc 1 2676 11 view .LVU3178
 9864 05f4 6FE7     		b	.L862
 9865              	.L1169:
 9866 05f6 00BF     		.align	2
 9867              	.L1168:
 9868 05f8 0C000000 		.word	.LANCHOR17+12
 9869 05fc 08000000 		.word	.LC21
 9870 0600 18000000 		.word	.LC22
 9871 0604 00000000 		.word	LastDisplayedNumber
 9872 0608 00000000 		.word	DispMsg
 9873 060c 00000000 		.word	ShowRegister
 9874 0610 34000000 		.word	.LC23
 9875 0614 00000000 		.word	LastDisplayedExponent
 9876 0618 00000000 		.word	.LANCHOR20
 9877 061c 00000000 		.word	DispPlot
 9878 0620 38000000 		.word	.LC24
 9879 0624 AC000000 		.word	.LC40
 9880 0628 00000000 		.word	WasDataEntry
 9881 062c 00000000 		.word	.LANCHOR21
 9882 0630 00000000 		.word	.LANCHOR22
 9883 0634 00000000 		.word	.LANCHOR24
 9884 0638 56040000 		.word	argcmds+1110
 9885 063c 00000000 		.word	argcmds
 9886 0640 04000000 		.word	.LC19
 9887 0644 00000000 		.word	.LC18
 9888 0648 00000000 		.word	.LANCHOR1
 9889 064c 00000000 		.word	.LANCHOR0
 9890              	.L866:
2698:src/display.c **** 	    *bp++ = '\021';
 9891              		.loc 1 2698 11 is_stmt 1 view .LVU3179
2698:src/display.c **** 	    *bp++ = '\021';
 9892              		.loc 1 2698 14 is_stmt 0 view .LVU3180
 9893 0650 012E     		cmp	r6, #1
 9894 0652 00F08980 		beq	.L1147
2705:src/display.c **** 	      *bp++ = '.';
 9895              		.loc 1 2705 6 is_stmt 1 view .LVU3181
2705:src/display.c **** 	      *bp++ = '.';
 9896              		.loc 1 2705 10 is_stmt 0 view .LVU3182
 9897 0656 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2705:src/display.c **** 	      *bp++ = '.';
 9898              		.loc 1 2705 9 view .LVU3183
 9899 0658 DA07     		lsls	r2, r3, #31
2706:src/display.c **** 	    if (State2.numdigit > 0) {
 9900              		.loc 1 2706 8 is_stmt 1 view .LVU3184
 9901              	.LVL1118:
2706:src/display.c **** 	    if (State2.numdigit > 0) {
 9902              		.loc 1 2706 14 is_stmt 0 view .LVU3185
 9903 065a 44BF     		itt	mi
ARM GAS  /tmp/ccE2jV6G.s 			page 290


 9904 065c 2E23     		movmi	r3, #46
 9905 065e 00F8013B 		strbmi	r3, [r0], #1
 9906              	.LVL1119:
2707:src/display.c **** 	      if (State2.shuffle)
 9907              		.loc 1 2707 6 is_stmt 1 view .LVU3186
2707:src/display.c **** 	      if (State2.shuffle)
 9908              		.loc 1 2707 16 is_stmt 0 view .LVU3187
 9909 0662 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2707:src/display.c **** 	      if (State2.shuffle)
 9910              		.loc 1 2707 9 view .LVU3188
 9911 0664 8AB1     		cbz	r2, .L870
2708:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9912              		.loc 1 2708 8 is_stmt 1 view .LVU3189
2708:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9913              		.loc 1 2708 12 is_stmt 0 view .LVU3190
 9914 0666 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2708:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9915              		.loc 1 2708 11 view .LVU3191
 9916 0668 9B07     		lsls	r3, r3, #30
 9917 066a 40F1E880 		bpl	.L871
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9918              		.loc 1 2709 3 is_stmt 1 view .LVU3192
 9919              	.LVL1120:
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9920              		.loc 1 2709 17 is_stmt 0 view .LVU3193
 9921 066e 2289     		ldrh	r2, [r4, #8]
 9922              	.LVL1121:
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9923              		.loc 1 2709 34 is_stmt 1 view .LVU3194
 9924 0670 CA49     		ldr	r1, .L1170
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9925              		.loc 1 2709 10 is_stmt 0 view .LVU3195
 9926 0672 0023     		movs	r3, #0
 9927              	.LVL1122:
 9928              	.L872:
2710:src/display.c **** 	      else
 9929              		.loc 1 2710 5 is_stmt 1 discriminator 3 view .LVU3196
2710:src/display.c **** 	      else
 9930              		.loc 1 2710 24 is_stmt 0 discriminator 3 view .LVU3197
 9931 0674 02F00306 		and	r6, r2, #3
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9932              		.loc 1 2709 54 discriminator 3 view .LVU3198
 9933 0678 0133     		adds	r3, r3, #1
 9934              	.LVL1123:
2710:src/display.c **** 	      else
 9935              		.loc 1 2710 11 discriminator 3 view .LVU3199
 9936 067a 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9937 067c 00F8016B 		strb	r6, [r0], #1
 9938              	.LVL1124:
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9939              		.loc 1 2709 53 is_stmt 1 discriminator 3 view .LVU3200
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9940              		.loc 1 2709 42 is_stmt 0 discriminator 3 view .LVU3201
 9941 0680 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9942              		.loc 1 2709 3 discriminator 3 view .LVU3202
 9943 0682 9E42     		cmp	r6, r3
ARM GAS  /tmp/ccE2jV6G.s 			page 291


2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9944              		.loc 1 2709 60 discriminator 3 view .LVU3203
 9945 0684 4FEAA202 		asr	r2, r2, #2
 9946              	.LVL1125:
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9947              		.loc 1 2709 34 is_stmt 1 discriminator 3 view .LVU3204
2709:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9948              		.loc 1 2709 3 is_stmt 0 discriminator 3 view .LVU3205
 9949 0688 F4DC     		bgt	.L872
 9950              	.LVL1126:
 9951              	.L870:
2715:src/display.c **** 	  }
 9952              		.loc 1 2715 6 is_stmt 1 view .LVU3206
2715:src/display.c **** 	  }
 9953              		.loc 1 2715 12 is_stmt 0 view .LVU3207
 9954 068a 5F23     		movs	r3, #95
 9955 068c 0370     		strb	r3, [r0]
 9956 068e 86E6     		b	.L892
 9957              	.LVL1127:
 9958              	.L958:
 9959              	.LBB581:
 9960              	.LBB568:
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9961              		.loc 1 1304 9 is_stmt 1 view .LVU3208
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9962              		.loc 1 1304 2 is_stmt 0 view .LVU3209
 9963 0690 002B     		cmp	r3, #0
 9964 0692 3FF4E6AE 		beq	.L959
1264:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9965              		.loc 1 1264 4 view .LVU3210
 9966 0696 B046     		mov	r8, r6
1241:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9967              		.loc 1 1241 11 view .LVU3211
 9968 0698 4FF0FF3B 		mov	fp, #-1
 9969              	.LVL1128:
1241:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9970              		.loc 1 1241 11 view .LVU3212
 9971 069c 66E7     		b	.L969
 9972              	.LVL1129:
 9973              	.L1000:
1241:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9974              		.loc 1 1241 11 view .LVU3213
 9975              	.LBE568:
 9976              	.LBE581:
 9977              	.LBB582:
 9978              	.LBB543:
2916:src/display.c **** 	      while(*b) {
 9979              		.loc 1 2916 10 view .LVU3214
 9980 069e 5A1C     		adds	r2, r3, #1
 9981 06a0 48E5     		b	.L981
 9982              	.LVL1130:
 9983              	.L1138:
2916:src/display.c **** 	      while(*b) {
 9984              		.loc 1 2916 10 view .LVU3215
 9985              	.LBE543:
 9986              	.LBE582:
 9987              	.LBB583:
ARM GAS  /tmp/ccE2jV6G.s 			page 292


2739:src/display.c **** 	  char b2[16];
 9988              		.loc 1 2739 4 is_stmt 1 view .LVU3216
2739:src/display.c **** 	  char b2[16];
 9989              		.loc 1 2739 45 is_stmt 0 view .LVU3217
 9990 06a2 DAF80030 		ldr	r3, [r10]
 9991 06a6 B3F8DC07 		ldrh	r0, [r3, #2012]
2739:src/display.c **** 	  char b2[16];
 9992              		.loc 1 2739 22 view .LVU3218
 9993 06aa C0F34610 		ubfx	r0, r0, #5, #7
 9994 06ae FFF7FEFF 		bl	current_catalogue
 9995              	.LVL1131:
2743:src/display.c **** 	  p = catcmd(op, b2);
 9996              		.loc 1 2743 9 view .LVU3219
 9997 06b2 BB49     		ldr	r1, .L1170+4
2739:src/display.c **** 	  char b2[16];
 9998              		.loc 1 2739 22 view .LVU3220
 9999 06b4 0546     		mov	r5, r0
 10000              	.LVL1132:
2740:src/display.c **** 	  const char *p;
 10001              		.loc 1 2740 4 is_stmt 1 view .LVU3221
2741:src/display.c **** 
 10002              		.loc 1 2741 4 view .LVU3222
2743:src/display.c **** 	  p = catcmd(op, b2);
 10003              		.loc 1 2743 4 view .LVU3223
2743:src/display.c **** 	  p = catcmd(op, b2);
 10004              		.loc 1 2743 9 is_stmt 0 view .LVU3224
 10005 06b6 20A8     		add	r0, sp, #128
 10006              	.LVL1133:
2743:src/display.c **** 	  p = catcmd(op, b2);
 10007              		.loc 1 2743 9 view .LVU3225
 10008 06b8 FFF7FEFF 		bl	scopy
 10009              	.LVL1134:
2744:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10010              		.loc 1 2744 8 view .LVU3226
 10011 06bc 0AA9     		add	r1, sp, #40
2743:src/display.c **** 	  p = catcmd(op, b2);
 10012              		.loc 1 2743 9 view .LVU3227
 10013 06be 0646     		mov	r6, r0
2744:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10014              		.loc 1 2744 8 view .LVU3228
 10015 06c0 2846     		mov	r0, r5
 10016              	.LVL1135:
2744:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10017              		.loc 1 2744 4 is_stmt 1 view .LVU3229
2744:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10018              		.loc 1 2744 8 is_stmt 0 view .LVU3230
 10019 06c2 FFF7FEFF 		bl	catcmd
 10020              	.LVL1136:
2745:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10021              		.loc 1 2745 7 view .LVU3231
 10022 06c6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10023 06c8 142B     		cmp	r3, #20
2744:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10024              		.loc 1 2744 8 view .LVU3232
 10025 06ca 0146     		mov	r1, r0
 10026              	.LVL1137:
2745:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
ARM GAS  /tmp/ccE2jV6G.s 			page 293


 10027              		.loc 1 2745 4 is_stmt 1 view .LVU3233
2745:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10028              		.loc 1 2745 7 is_stmt 0 view .LVU3234
 10029 06cc 07D0     		beq	.L877
2745:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10030              		.loc 1 2745 29 discriminator 1 view .LVU3235
 10031 06ce 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10032 06d0 9F07     		lsls	r7, r3, #30
 10033 06d2 04D5     		bpl	.L877
2746:src/display.c **** 	  bp = scopy(bp, p);
 10034              		.loc 1 2746 6 is_stmt 1 view .LVU3236
2746:src/display.c **** 	  bp = scopy(bp, p);
 10035              		.loc 1 2746 9 is_stmt 0 view .LVU3237
 10036 06d4 3346     		mov	r3, r6
 10037              	.LVL1138:
2746:src/display.c **** 	  bp = scopy(bp, p);
 10038              		.loc 1 2746 12 view .LVU3238
 10039 06d6 1422     		movs	r2, #20
 10040 06d8 03F8012B 		strb	r2, [r3], #1
 10041              	.LVL1139:
2746:src/display.c **** 	  bp = scopy(bp, p);
 10042              		.loc 1 2746 9 view .LVU3239
 10043 06dc 1E46     		mov	r6, r3
 10044              	.LVL1140:
 10045              	.L877:
2747:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10046              		.loc 1 2747 4 is_stmt 1 view .LVU3240
2747:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10047              		.loc 1 2747 9 is_stmt 0 view .LVU3241
 10048 06de 3046     		mov	r0, r6
 10049              	.LVL1141:
2747:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10050              		.loc 1 2747 9 view .LVU3242
 10051 06e0 FFF7FEFF 		bl	scopy
 10052              	.LVL1142:
2748:src/display.c **** 	    // State2.disp_small = 1;
 10053              		.loc 1 2748 4 is_stmt 1 view .LVU3243
2748:src/display.c **** 	    // State2.disp_small = 1;
 10054              		.loc 1 2748 7 is_stmt 0 view .LVU3244
 10055 06e4 ABF11003 		sub	r3, fp, #16
 10056 06e8 012B     		cmp	r3, #1
 10057 06ea 70D9     		bls	.L1148
2755:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10058              		.loc 1 2755 11 is_stmt 1 view .LVU3245
2755:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10059              		.loc 1 2755 15 is_stmt 0 view .LVU3246
 10060 06ec A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2755:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10061              		.loc 1 2755 14 view .LVU3247
 10062 06ee 13F04003 		ands	r3, r3, #64
 10063 06f2 08D0     		beq	.L993
2756:src/display.c **** 	      decNumber x, r;
 10064              		.loc 1 2756 6 is_stmt 1 view .LVU3248
2756:src/display.c **** 	      decNumber x, r;
 10065              		.loc 1 2756 9 is_stmt 0 view .LVU3249
 10066 06f4 BBF1120F 		cmp	fp, #18
 10067 06f8 00F0AC81 		beq	.L1149
ARM GAS  /tmp/ccE2jV6G.s 			page 294


2776:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10068              		.loc 1 2776 13 is_stmt 1 view .LVU3250
2776:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10069              		.loc 1 2776 46 is_stmt 0 view .LVU3251
 10070 06fc A5F58873 		sub	r3, r5, #272
2776:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10071              		.loc 1 2776 16 view .LVU3252
 10072 0700 0D2B     		cmp	r3, #13
 10073 0702 40F29181 		bls	.L1150
 10074              	.L993:
2776:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10075              		.loc 1 2776 16 view .LVU3253
 10076              	.LBE583:
2590:src/display.c **** 	int x_disp = 0;
 10077              		.loc 1 2590 6 view .LVU3254
 10078 0706 0026     		movs	r6, #0
 10079              	.LVL1143:
 10080              	.L881:
 10081              	.LBB593:
2785:src/display.c **** 	    set_status_top(buf);
 10082              		.loc 1 2785 4 is_stmt 1 view .LVU3255
2785:src/display.c **** 	    set_status_top(buf);
 10083              		.loc 1 2785 7 is_stmt 0 view .LVU3256
 10084 0708 B8F1000F 		cmp	r8, #0
 10085 070c 5AD0     		beq	.L886
2786:src/display.c **** 	    no_status_top = 1;
 10086              		.loc 1 2786 6 is_stmt 1 view .LVU3257
 10087              	.LVL1144:
 10088              	.LBB584:
 10089              	.LBI584:
3499:src/display.c **** 	if (no_status_top) return;
 10090              		.loc 1 3499 19 view .LVU3258
 10091              	.LBB585:
3500:src/display.c **** 	if (State2.runmode) {
 10092              		.loc 1 3500 2 view .LVU3259
3500:src/display.c **** 	if (State2.runmode) {
 10093              		.loc 1 3500 5 is_stmt 0 view .LVU3260
 10094 070e B9F90030 		ldrsh	r3, [r9]
 10095 0712 13B9     		cbnz	r3, .L887
 10096 0714 20A8     		add	r0, sp, #128
 10097              	.LVL1145:
3500:src/display.c **** 	if (State2.runmode) {
 10098              		.loc 1 3500 5 view .LVU3261
 10099 0716 FFF7FEFF 		bl	set_status_top.part.0
 10100              	.LVL1146:
 10101              	.L887:
3500:src/display.c **** 	if (State2.runmode) {
 10102              		.loc 1 3500 5 view .LVU3262
 10103              	.LBE585:
 10104              	.LBE584:
2787:src/display.c **** 	    annuc = State2.runmode;
 10105              		.loc 1 2787 6 is_stmt 1 view .LVU3263
2788:src/display.c **** 	  }
 10106              		.loc 1 2788 20 is_stmt 0 view .LVU3264
 10107 071a A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2787:src/display.c **** 	    annuc = State2.runmode;
 10108              		.loc 1 2787 20 view .LVU3265
ARM GAS  /tmp/ccE2jV6G.s 			page 295


 10109 071c 0123     		movs	r3, #1
2788:src/display.c **** 	  }
 10110              		.loc 1 2788 12 view .LVU3266
 10111 071e C5F38015 		ubfx	r5, r5, #6, #1
2787:src/display.c **** 	    annuc = State2.runmode;
 10112              		.loc 1 2787 20 view .LVU3267
 10113 0722 A9F80030 		strh	r3, [r9]	@ movhi
2788:src/display.c **** 	  }
 10114              		.loc 1 2788 6 is_stmt 1 view .LVU3268
 10115              	.LVL1147:
 10116              	.L888:
2788:src/display.c **** 	  }
 10117              		.loc 1 2788 6 is_stmt 0 view .LVU3269
 10118              	.LBE593:
2878:src/display.c ****       nostk:
 10119              		.loc 1 2878 2 is_stmt 1 view .LVU3270
 10120 0726 FFF7FEFF 		bl	show_stack
 10121              	.LVL1148:
 10122              	.LDL2:
2880:src/display.c **** 	if (!skip) {
 10123              		.loc 1 2880 2 view .LVU3271
 10124 072a FFF7FEFF 		bl	show_flags
 10125              	.LVL1149:
2881:src/display.c **** 	  if (State2.runmode) {
 10126              		.loc 1 2881 2 view .LVU3272
2881:src/display.c **** 	  if (State2.runmode) {
 10127              		.loc 1 2881 5 is_stmt 0 view .LVU3273
 10128 072e 002E     		cmp	r6, #0
 10129 0730 00F0F481 		beq	.L1118
 10130              	.LVL1150:
 10131              	.L889:
2926:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10132              		.loc 1 2926 2 is_stmt 1 view .LVU3274
 10133 0734 FFF7FEFF 		bl	set_annunciators
 10134              	.LVL1151:
2927:src/display.c **** 	  ShowRPN = 0;
 10135              		.loc 1 2927 2 view .LVU3275
 10136 0738 9A4B     		ldr	r3, .L1170+8
 10137 073a 9B4F     		ldr	r7, .L1170+12
 10138 073c 9B4E     		ldr	r6, .L1170+16
 10139 073e 0193     		str	r3, [sp, #4]
 10140 0740 20E5     		b	.L852
 10141              	.LVL1152:
 10142              	.L1137:
 10143              	.LBB594:
 10144              	.LBB569:
1382:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 10145              		.loc 1 1382 6 view .LVU3276
1387:src/display.c **** #  endif
 10146              		.loc 1 1387 6 view .LVU3277
 10147 0742 0AF10100 		add	r0, r10, #1
 10148              	.LVL1153:
1387:src/display.c **** #  endif
 10149              		.loc 1 1387 6 is_stmt 0 view .LVU3278
 10150 0746 FFF7FEFF 		bl	s_to_i
 10151              	.LVL1154:
1387:src/display.c **** #  endif
ARM GAS  /tmp/ccE2jV6G.s 			page 296


 10152              		.loc 1 1387 6 view .LVU3279
 10153 074a 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 10154 074e 2D2B     		cmp	r3, #45
 10155 0750 0CBF     		ite	eq
 10156 0752 0621     		moveq	r1, #6
 10157 0754 0421     		movne	r1, #4
 10158 0756 0022     		movs	r2, #0
 10159 0758 FFF7FEFF 		bl	set_exp
 10160              	.LVL1155:
1387:src/display.c **** #  endif
 10161              		.loc 1 1387 6 view .LVU3280
 10162              	.LBE569:
 10163              	.LBE594:
2896:src/display.c **** 	      goto finish;
 10164              		.loc 1 2896 6 is_stmt 1 view .LVU3281
2896:src/display.c **** 	      goto finish;
 10165              		.loc 1 2896 9 is_stmt 0 view .LVU3282
 10166 075c 944B     		ldr	r3, .L1170+20
 10167 075e 1B68     		ldr	r3, [r3]
 10168 0760 002B     		cmp	r3, #0
 10169 0762 3FF4A1AD 		beq	.L1120
 10170 0766 86E6     		b	.L1042
 10171              	.LVL1156:
 10172              	.L1147:
2699:src/display.c **** 	    *bp++ = '_';
 10173              		.loc 1 2699 6 is_stmt 1 view .LVU3283
2699:src/display.c **** 	    *bp++ = '_';
 10174              		.loc 1 2699 12 is_stmt 0 view .LVU3284
 10175 0768 1122     		movs	r2, #17
2700:src/display.c **** 	  } else {
 10176              		.loc 1 2700 12 view .LVU3285
 10177 076a 5F23     		movs	r3, #95
2699:src/display.c **** 	    *bp++ = '_';
 10178              		.loc 1 2699 12 view .LVU3286
 10179 076c 0270     		strb	r2, [r0]
2700:src/display.c **** 	  } else {
 10180              		.loc 1 2700 6 is_stmt 1 view .LVU3287
 10181              	.LVL1157:
2700:src/display.c **** 	  } else {
 10182              		.loc 1 2700 12 is_stmt 0 view .LVU3288
 10183 076e 4370     		strb	r3, [r0, #1]
 10184 0770 15E6     		b	.L892
 10185              	.LVL1158:
 10186              	.L1139:
2794:src/display.c **** 	  if (State2.numdigit > 0) {
 10187              		.loc 1 2794 4 is_stmt 1 view .LVU3289
2794:src/display.c **** 	  if (State2.numdigit > 0) {
 10188              		.loc 1 2794 42 is_stmt 0 view .LVU3290
 10189 0772 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10190 0774 8F49     		ldr	r1, .L1170+24
 10191 0776 0423     		movs	r3, #4
 10192 0778 03EB0213 		add	r3, r3, r2, lsl #4
2794:src/display.c **** 	  if (State2.numdigit > 0) {
 10193              		.loc 1 2794 9 view .LVU3291
 10194 077c 1944     		add	r1, r1, r3
 10195 077e 2722     		movs	r2, #39
 10196 0780 20A8     		add	r0, sp, #128
ARM GAS  /tmp/ccE2jV6G.s 			page 297


 10197              	.LVL1159:
2794:src/display.c **** 	  if (State2.numdigit > 0) {
 10198              		.loc 1 2794 9 view .LVU3292
 10199 0782 FFF7FEFF 		bl	scopy_char
 10200              	.LVL1160:
2795:src/display.c **** 	    *bp++ = (char) State2.digval;
 10201              		.loc 1 2795 7 view .LVU3293
 10202 0786 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10203              	.LVL1161:
2795:src/display.c **** 	    *bp++ = (char) State2.digval;
 10204              		.loc 1 2795 4 is_stmt 1 view .LVU3294
2795:src/display.c **** 	    *bp++ = (char) State2.digval;
 10205              		.loc 1 2795 7 is_stmt 0 view .LVU3295
 10206 0788 002B     		cmp	r3, #0
 10207 078a 3FF408AE 		beq	.L892
2796:src/display.c **** 	    if (State2.numdigit > 1)
 10208              		.loc 1 2796 6 is_stmt 1 view .LVU3296
 10209              	.LVL1162:
2796:src/display.c **** 	    if (State2.numdigit > 1)
 10210              		.loc 1 2796 14 is_stmt 0 view .LVU3297
 10211 078e 2389     		ldrh	r3, [r4, #8]
 10212 0790 0370     		strb	r3, [r0]
2797:src/display.c **** 	      *bp++ = State2.digval2;
 10213              		.loc 1 2797 6 is_stmt 1 view .LVU3298
2797:src/display.c **** 	      *bp++ = State2.digval2;
 10214              		.loc 1 2797 9 is_stmt 0 view .LVU3299
 10215 0792 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10216 0794 012B     		cmp	r3, #1
2798:src/display.c **** 	  }
 10217              		.loc 1 2798 8 is_stmt 1 view .LVU3300
 10218              	.LVL1163:
2798:src/display.c **** 	  }
 10219              		.loc 1 2798 22 is_stmt 0 view .LVU3301
 10220 0796 84BF     		itt	hi
 10221 0798 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2798:src/display.c **** 	  }
 10222              		.loc 1 2798 14 view .LVU3302
 10223 079a 4370     		strbhi	r3, [r0, #1]
 10224 079c FFE5     		b	.L892
 10225              	.LVL1164:
 10226              	.L997:
 10227              	.LBB595:
 10228              	.LBB570:
 10229              	.LBB562:
1284:src/display.c **** 	    if (gotdot <= j) {
 10230              		.loc 1 1284 8 view .LVU3303
 10231 079e 4FF00908 		mov	r8, #9
 10232              	.LVL1165:
 10233              	.L963:
1297:src/display.c **** 	    overflow_to_left = 1;
 10234              		.loc 1 1297 6 is_stmt 1 view .LVU3304
 10235 07a2 3C21     		movs	r1, #60
 10236              	.LVL1166:
1297:src/display.c **** 	    overflow_to_left = 1;
 10237              		.loc 1 1297 6 is_stmt 0 view .LVU3305
 10238 07a4 0020     		movs	r0, #0
 10239 07a6 FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccE2jV6G.s 			page 298


 10240              	.LVL1167:
1298:src/display.c **** 	  }
 10241              		.loc 1 1298 6 is_stmt 1 view .LVU3306
1298:src/display.c **** 	  }
 10242              		.loc 1 1298 6 is_stmt 0 view .LVU3307
 10243 07aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
1298:src/display.c **** 	  }
 10244              		.loc 1 1298 6 view .LVU3308
 10245              	.LBE562:
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10246              		.loc 1 1304 9 is_stmt 1 view .LVU3309
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10247              		.loc 1 1304 2 is_stmt 0 view .LVU3310
 10248 07ae 4FF0000B 		mov	fp, #0
 10249              	.LVL1168:
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10250              		.loc 1 1304 2 view .LVU3311
 10251 07b2 002B     		cmp	r3, #0
 10252 07b4 7FF4CDAE 		bne	.L990
1304:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10253              		.loc 1 1304 2 view .LVU3312
 10254 07b8 58E6     		b	.L978
 10255              	.LVL1169:
 10256              	.L1144:
1247:src/display.c **** #endif
 10257              		.loc 1 1247 11 view .LVU3313
 10258 07ba 0646     		mov	r6, r0
1264:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10259              		.loc 1 1264 4 view .LVU3314
 10260 07bc 8046     		mov	r8, r0
 10261              	.LBB563:
1300:src/display.c **** 	}
 10262              		.loc 1 1300 16 view .LVU3315
 10263 07be 4FF0FF3B 		mov	fp, #-1
 10264              	.LVL1170:
1300:src/display.c **** 	}
 10265              		.loc 1 1300 16 view .LVU3316
 10266 07c2 D3E6     		b	.L969
 10267              	.LVL1171:
 10268              	.L886:
1300:src/display.c **** 	}
 10269              		.loc 1 1300 16 view .LVU3317
 10270              	.LBE563:
 10271              	.LBE570:
 10272              	.LBE595:
 10273              	.LBB596:
2791:src/display.c **** 	  }
 10274              		.loc 1 2791 6 is_stmt 1 view .LVU3318
 10275 07c4 20A8     		add	r0, sp, #128
 10276 07c6 FFF7FEFF 		bl	set_status
 10277              	.LVL1172:
 10278              	.LBE596:
2588:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10279              		.loc 1 2588 6 is_stmt 0 view .LVU3319
 10280 07ca 4546     		mov	r5, r8
 10281 07cc ABE7     		b	.L888
 10282              	.LVL1173:
ARM GAS  /tmp/ccE2jV6G.s 			page 299


 10283              	.L1148:
 10284              	.LBB597:
2750:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10285              		.loc 1 2750 6 is_stmt 1 view .LVU3320
2750:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10286              		.loc 1 2750 9 is_stmt 0 view .LVU3321
 10287 07ce B5F5274F 		cmp	r5, #42752
 10288 07d2 00F00481 		beq	.L879
2750:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10289              		.loc 1 2750 41 discriminator 1 view .LVU3322
 10290 07d6 B5F5284F 		cmp	r5, #43008
 10291 07da 00F00081 		beq	.L879
2753:src/display.c **** 	    skip = 1;
 10292              		.loc 1 2753 8 is_stmt 1 view .LVU3323
2753:src/display.c **** 	    skip = 1;
 10293              		.loc 1 2753 14 is_stmt 0 view .LVU3324
 10294 07de 0021     		movs	r1, #0
 10295 07e0 05F07F00 		and	r0, r5, #127
 10296 07e4 FFF7FEFF 		bl	get_const
 10297              	.LVL1174:
2753:src/display.c **** 	    skip = 1;
 10298              		.loc 1 2753 8 view .LVU3325
 10299 07e8 0022     		movs	r2, #0
 10300 07ea 1146     		mov	r1, r2
 10301 07ec FFF7FEFF 		bl	set_x
 10302              	.LVL1175:
2754:src/display.c **** 	  } else if (State2.runmode) {
 10303              		.loc 1 2754 11 view .LVU3326
 10304 07f0 0126     		movs	r6, #1
 10305 07f2 89E7     		b	.L881
 10306              	.LVL1176:
 10307              	.L1141:
2754:src/display.c **** 	  } else if (State2.runmode) {
 10308              		.loc 1 2754 11 view .LVU3327
 10309              	.LBE597:
2812:src/display.c **** 	  skip = 1;
 10310              		.loc 1 2812 4 is_stmt 1 view .LVU3328
 10311              	.LBB598:
 10312              	.LBI598:
2459:src/display.c **** 	char buf[16];
 10313              		.loc 1 2459 19 view .LVU3329
 10314              	.LBB599:
2460:src/display.c **** 	unsigned short int pc = State2.digval;
 10315              		.loc 1 2460 2 view .LVU3330
2461:src/display.c **** 	unsigned int op = getprog(pc);
 10316              		.loc 1 2461 2 view .LVU3331
2461:src/display.c **** 	unsigned int op = getprog(pc);
 10317              		.loc 1 2461 21 is_stmt 0 view .LVU3332
 10318 07f4 B4F808B0 		ldrh	fp, [r4, #8]
 10319              	.LVL1177:
2462:src/display.c **** 	int n = nLIB(pc);
 10320              		.loc 1 2462 2 is_stmt 1 view .LVU3333
2467:src/display.c **** #ifndef REALBUILD
 10321              		.loc 1 2467 27 is_stmt 0 view .LVU3334
 10322 07f8 DFF8CCA1 		ldr	r10, .L1170+44
2462:src/display.c **** 	int n = nLIB(pc);
 10323              		.loc 1 2462 20 view .LVU3335
ARM GAS  /tmp/ccE2jV6G.s 			page 300


 10324 07fc 5846     		mov	r0, fp
 10325 07fe FFF7FEFF 		bl	getprog
 10326              	.LVL1178:
 10327 0802 4FEA9B36 		lsr	r6, fp, #14
2466:src/display.c **** 	set_digits_string(libname[n], 0);
 10328              		.loc 1 2466 2 view .LVU3336
 10329 0806 17A9     		add	r1, sp, #92
2462:src/display.c **** 	int n = nLIB(pc);
 10330              		.loc 1 2462 20 view .LVU3337
 10331 0808 8046     		mov	r8, r0
 10332              	.LVL1179:
2463:src/display.c **** 	unsigned short int lblpc;
 10333              		.loc 1 2463 2 is_stmt 1 view .LVU3338
2464:src/display.c **** 
 10334              		.loc 1 2464 2 view .LVU3339
2466:src/display.c **** 	set_digits_string(libname[n], 0);
 10335              		.loc 1 2466 2 view .LVU3340
2467:src/display.c **** #ifndef REALBUILD
 10336              		.loc 1 2467 27 is_stmt 0 view .LVU3341
 10337 080a 06EB8606 		add	r6, r6, r6, lsl #2
2466:src/display.c **** 	set_digits_string(libname[n], 0);
 10338              		.loc 1 2466 2 view .LVU3342
 10339 080e FFF7FEFF 		bl	prt
 10340              	.LVL1180:
2466:src/display.c **** 	set_digits_string(libname[n], 0);
 10341              		.loc 1 2466 2 view .LVU3343
 10342 0812 FFF7FEFF 		bl	set_status
 10343              	.LVL1181:
2467:src/display.c **** #ifndef REALBUILD
 10344              		.loc 1 2467 2 is_stmt 1 view .LVU3344
 10345 0816 0AEB0600 		add	r0, r10, r6
 10346 081a 3946     		mov	r1, r7
 10347 081c FFF7FEFF 		bl	set_digits_string
 10348              	.LVL1182:
2469:src/display.c **** #endif
 10349              		.loc 1 2469 2 view .LVU3345
 10350 0820 654B     		ldr	r3, .L1170+28
 10351 0822 6648     		ldr	r0, .L1170+32
 10352 0824 03EB4601 		add	r1, r3, r6, lsl #1
 10353 0828 FFF7FEFF 		bl	scopy
 10354              	.LVL1183:
2472:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10355              		.loc 1 2472 2 view .LVU3346
2472:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10356              		.loc 1 2472 5 is_stmt 0 view .LVU3347
 10357 082c 18F4704F 		tst	r8, #61440
 10358 0830 40F0AA81 		bne	.L1151
 10359              	.LVL1184:
 10360              	.L1121:
2472:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10361              		.loc 1 2472 5 view .LVU3348
 10362              	.LBE599:
 10363              	.LBE598:
2878:src/display.c ****       nostk:
 10364              		.loc 1 2878 2 is_stmt 1 view .LVU3349
 10365 0834 FFF7FEFF 		bl	show_stack
 10366              	.LVL1185:
ARM GAS  /tmp/ccE2jV6G.s 			page 301


2880:src/display.c **** 	if (!skip) {
 10367              		.loc 1 2880 2 view .LVU3350
 10368 0838 FFF7FEFF 		bl	show_flags
 10369              	.LVL1186:
2881:src/display.c **** 	  if (State2.runmode) {
 10370              		.loc 1 2881 2 view .LVU3351
 10371 083c 7AE7     		b	.L889
 10372              	.LVL1187:
 10373              	.L871:
2712:src/display.c **** 	    }
 10374              		.loc 1 2712 3 view .LVU3352
2712:src/display.c **** 	    }
 10375              		.loc 1 2712 8 is_stmt 0 view .LVU3353
 10376 083e 2189     		ldrh	r1, [r4, #8]
 10377 0840 FFF7FEFF 		bl	num_arg_0
 10378              	.LVL1188:
2712:src/display.c **** 	    }
 10379              		.loc 1 2712 8 view .LVU3354
 10380 0844 21E7     		b	.L870
 10381              	.LVL1189:
 10382              	.L1145:
 10383              	.LBB602:
 10384              	.LBB571:
 10385              	.LBB564:
1291:src/display.c **** 	      p++;
 10386              		.loc 1 1291 8 is_stmt 1 view .LVU3355
1292:src/display.c **** 	      if (!double_dot)
 10387              		.loc 1 1292 8 view .LVU3356
1292:src/display.c **** 	      if (!double_dot)
 10388              		.loc 1 1292 9 is_stmt 0 view .LVU3357
 10389 0846 0AF1010A 		add	r10, r10, #1
 10390              	.LVL1190:
1293:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10391              		.loc 1 1293 8 is_stmt 1 view .LVU3358
1294:src/display.c **** 	    }
 10392              		.loc 1 1294 3 view .LVU3359
1294:src/display.c **** 	    }
 10393              		.loc 1 1294 5 is_stmt 0 view .LVU3360
 10394 084a 4FF01208 		mov	r8, #18
 10395 084e A8E7     		b	.L963
 10396              	.LVL1191:
 10397              	.L1140:
1294:src/display.c **** 	    }
 10398              		.loc 1 1294 5 view .LVU3361
 10399              	.LBE564:
 10400              	.LBE571:
 10401              	.LBE602:
2809:src/display.c **** 	  skip = 1;
 10402              		.loc 1 2809 4 is_stmt 1 view .LVU3362
 10403              	.LBB603:
 10404              	.LBI603:
2357:src/display.c **** 	int i, n;
 10405              		.loc 1 2357 19 view .LVU3363
 10406              	.LBB604:
2358:src/display.c **** 	int j = SEGS_EXP_BASE;
 10407              		.loc 1 2358 2 view .LVU3364
2359:src/display.c **** 	const int status = State2.status - 3;
ARM GAS  /tmp/ccE2jV6G.s 			page 302


 10408              		.loc 1 2359 2 view .LVU3365
2360:src/display.c **** 	char buf[16], *p = buf;
 10409              		.loc 1 2360 2 view .LVU3366
2364:src/display.c **** 	  set_status("Free:");
 10410              		.loc 1 2364 5 is_stmt 0 view .LVU3367
 10411 0850 012F     		cmp	r7, #1
2360:src/display.c **** 	char buf[16], *p = buf;
 10412              		.loc 1 2360 12 view .LVU3368
 10413 0852 A7F10303 		sub	r3, r7, #3
 10414              	.LVL1192:
2361:src/display.c **** 	unsigned int pc;
 10415              		.loc 1 2361 2 is_stmt 1 view .LVU3369
2362:src/display.c **** 
 10416              		.loc 1 2362 2 view .LVU3370
2364:src/display.c **** 	  set_status("Free:");
 10417              		.loc 1 2364 2 view .LVU3371
2364:src/display.c **** 	  set_status("Free:");
 10418              		.loc 1 2364 5 is_stmt 0 view .LVU3372
 10419 0856 00F06782 		beq	.L1152
2372:src/display.c **** 	  /* Top line */
 10420              		.loc 1 2372 7 is_stmt 1 view .LVU3373
2372:src/display.c **** 	  /* Top line */
 10421              		.loc 1 2372 10 is_stmt 0 view .LVU3374
 10422 085a 591C     		adds	r1, r3, #1
 10423 085c 00F04282 		beq	.L1153
 10424              	.LBB605:
2389:src/display.c **** 	  int end;
 10425              		.loc 1 2389 4 is_stmt 1 view .LVU3375
2390:src/display.c **** 	  int group = 10;
 10426              		.loc 1 2390 4 view .LVU3376
2391:src/display.c **** 	  int start = 0;
 10427              		.loc 1 2391 4 view .LVU3377
 10428              	.LVL1193:
2392:src/display.c **** 		
 10429              		.loc 1 2392 4 view .LVU3378
2394:src/display.c **** 	    base = 10 * status;
 10430              		.loc 1 2394 4 view .LVU3379
2394:src/display.c **** 	    base = 10 * status;
 10431              		.loc 1 2394 7 is_stmt 0 view .LVU3380
 10432 0860 092B     		cmp	r3, #9
 10433 0862 40F30582 		ble	.L1154
2404:src/display.c **** 	    base = regX_idx;
 10434              		.loc 1 2404 9 is_stmt 1 view .LVU3381
2404:src/display.c **** 	    base = regX_idx;
 10435              		.loc 1 2404 12 is_stmt 0 view .LVU3382
 10436 0866 0A2B     		cmp	r3, #10
 10437 0868 00F0F881 		beq	.L1155
2412:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10438              		.loc 1 2412 6 is_stmt 1 view .LVU3383
 10439              	.LVL1194:
2413:src/display.c **** 	    set_status("FL.00-.15");
 10440              		.loc 1 2413 6 view .LVU3384
2414:src/display.c **** 	  }
 10441              		.loc 1 2414 6 view .LVU3385
 10442 086c 5448     		ldr	r0, .L1170+36
 10443 086e FFF7FEFF 		bl	set_status
 10444              	.LVL1195:
ARM GAS  /tmp/ccE2jV6G.s 			page 303


2392:src/display.c **** 		
 10445              		.loc 1 2392 8 is_stmt 0 view .LVU3386
 10446 0872 4FF0000B 		mov	fp, #0
 10447              	.LVL1196:
2391:src/display.c **** 	  int start = 0;
 10448              		.loc 1 2391 8 view .LVU3387
 10449 0876 0A23     		movs	r3, #10
2413:src/display.c **** 	    set_status("FL.00-.15");
 10450              		.loc 1 2413 10 view .LVU3388
 10451 0878 4FF07F08 		mov	r8, #127
 10452              	.LVL1197:
2412:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10453              		.loc 1 2412 11 view .LVU3389
 10454 087c 7027     		movs	r7, #112
 10455              	.LVL1198:
 10456              	.L902:
2416:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10457              		.loc 1 2416 4 is_stmt 1 view .LVU3390
2416:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10458              		.loc 1 2416 6 is_stmt 0 view .LVU3391
 10459 087e 0BEBCB06 		add	r6, fp, fp, lsl #3
 10460              	.LVL1199:
2417:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10461              		.loc 1 2417 4 is_stmt 1 view .LVU3392
 10462              	.LBB606:
 10463              	.LBI606:
 346:src/display.c ****   if (res) {
 10464              		.loc 1 346 14 view .LVU3393
 10465              	.LBB607:
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10466              		.loc 1 347 3 view .LVU3394
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10467              		.loc 1 350 5 view .LVU3395
 10468 0882 0193     		str	r3, [sp, #4]
 10469              	.LVL1200:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10470              		.loc 1 350 5 is_stmt 0 view .LVU3396
 10471 0884 F01D     		adds	r0, r6, #7
 10472              	.LBB608:
 10473              	.LBB609:
 354:src/display.c **** #endif
 10474              		.loc 1 354 35 view .LVU3397
 10475 0886 0BF10103 		add	r3, fp, #1
 10476 088a 0293     		str	r3, [sp, #8]
 10477              	.LBE609:
 10478              	.LBE608:
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10479              		.loc 1 350 5 view .LVU3398
 10480 088c FFF7FEFF 		bl	set_dot
 10481              	.LVL1201:
 351:src/display.c ****       set_dot(posn+8);
 10482              		.loc 1 351 5 is_stmt 1 view .LVU3399
 10483              	.LBB611:
 10484              	.LBI608:
 346:src/display.c ****   if (res) {
 10485              		.loc 1 346 14 view .LVU3400
 10486              	.LBB610:
ARM GAS  /tmp/ccE2jV6G.s 			page 304


 354:src/display.c **** #endif
 10487              		.loc 1 354 5 view .LVU3401
 354:src/display.c **** #endif
 10488              		.loc 1 354 38 is_stmt 0 view .LVU3402
 10489 0890 4A49     		ldr	r1, .L1170+32
 10490 0892 029B     		ldr	r3, [sp, #8]
 10491 0894 2E22     		movs	r2, #46
 10492 0896 01F81320 		strb	r2, [r1, r3, lsl #1]
 357:src/display.c **** }
 10493              		.loc 1 357 3 is_stmt 1 view .LVU3403
 10494              	.LVL1202:
 357:src/display.c **** }
 10495              		.loc 1 357 3 is_stmt 0 view .LVU3404
 10496              	.LBE610:
 10497              	.LBE611:
 357:src/display.c **** }
 10498              		.loc 1 357 3 is_stmt 1 view .LVU3405
 357:src/display.c **** }
 10499              		.loc 1 357 3 is_stmt 0 view .LVU3406
 10500              	.LBE607:
 10501              	.LBE606:
2418:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10502              		.loc 1 2418 4 is_stmt 1 view .LVU3407
 10503 089a 019B     		ldr	r3, [sp, #4]
 10504              	.LBB612:
 10505              	.LBB613:
 10506              	.LBB614:
 10507              	.LBB615:
 10508              	.LBB616:
 354:src/display.c **** #endif
 10509              		.loc 1 354 38 is_stmt 0 view .LVU3408
 10510 089c 0392     		str	r2, [sp, #12]
 10511 089e CBEB4301 		rsb	r1, fp, r3, lsl #1
 10512 08a2 CA19     		adds	r2, r1, r7
 10513 08a4 0492     		str	r2, [sp, #16]
 10514              	.LBE616:
 10515              	.LBE615:
 10516              	.LBE614:
 10517              	.LBE613:
 10518              	.LBE612:
2419:src/display.c **** 	    int k = i + base - start;
 10519              		.loc 1 2419 30 view .LVU3409
 10520 08a6 0BEB0302 		add	r2, fp, r3
 10521 08aa FB18     		adds	r3, r7, r3
 10522 08ac 0193     		str	r3, [sp, #4]
 10523 08ae A7EB0B03 		sub	r3, r7, fp
 10524 08b2 CDE90635 		strd	r3, r5, [sp, #24]
2418:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10525              		.loc 1 2418 6 view .LVU3410
 10526 08b6 0936     		adds	r6, r6, #9
 10527              	.LVL1203:
2419:src/display.c **** 	    int k = i + base - start;
 10528              		.loc 1 2419 4 is_stmt 1 view .LVU3411
2419:src/display.c **** 	    int k = i + base - start;
 10529              		.loc 1 2419 20 view .LVU3412
2419:src/display.c **** 	    int k = i + base - start;
 10530              		.loc 1 2419 30 is_stmt 0 view .LVU3413
ARM GAS  /tmp/ccE2jV6G.s 			page 305


 10531 08b8 0592     		str	r2, [sp, #20]
 10532 08ba 1DE0     		b	.L906
 10533              	.LVL1204:
 10534              	.L904:
 10535              	.LBB633:
2429:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10536              		.loc 1 2429 6 is_stmt 1 view .LVU3414
 10537 08bc 2946     		mov	r1, r5
 10538 08be 3046     		mov	r0, r6
 10539 08c0 FFF7FEFF 		bl	set_dig
 10540              	.LVL1205:
2430:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10541              		.loc 1 2430 6 view .LVU3415
 10542              	.LBB623:
 10543              	.LBI613:
 346:src/display.c ****   if (res) {
 10544              		.loc 1 346 14 view .LVU3416
 10545              	.LBB621:
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10546              		.loc 1 347 3 view .LVU3417
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10547              		.loc 1 350 5 view .LVU3418
 10548 08c4 F01D     		adds	r0, r6, #7
 10549 08c6 FFF7FEFF 		bl	set_dot
 10550              	.LVL1206:
 351:src/display.c ****       set_dot(posn+8);
 10551              		.loc 1 351 5 view .LVU3419
 10552              	.LBB619:
 10553              	.LBI615:
 346:src/display.c ****   if (res) {
 10554              		.loc 1 346 14 view .LVU3420
 10555              	.LBB617:
 354:src/display.c **** #endif
 10556              		.loc 1 354 5 view .LVU3421
 354:src/display.c **** #endif
 10557              		.loc 1 354 30 is_stmt 0 view .LVU3422
 10558 08ca 3E4B     		ldr	r3, .L1170+40
 354:src/display.c **** #endif
 10559              		.loc 1 354 38 view .LVU3423
 10560 08cc 0399     		ldr	r1, [sp, #12]
 354:src/display.c **** #endif
 10561              		.loc 1 354 30 view .LVU3424
 10562 08ce A3FB0623 		umull	r2, r3, r3, r6
 10563 08d2 5B08     		lsrs	r3, r3, #1
 354:src/display.c **** #endif
 10564              		.loc 1 354 38 view .LVU3425
 10565 08d4 394A     		ldr	r2, .L1170+32
 354:src/display.c **** #endif
 10566              		.loc 1 354 35 view .LVU3426
 10567 08d6 0133     		adds	r3, r3, #1
 10568              	.LBE617:
 10569              	.LBE619:
 10570              	.LBE621:
 10571              	.LBE623:
2432:src/display.c **** 	      set_dig(j, 8);
 10572              		.loc 1 2432 9 view .LVU3427
 10573 08d8 BBF1040F 		cmp	fp, #4
ARM GAS  /tmp/ccE2jV6G.s 			page 306


 10574              	.LBB624:
 10575              	.LBB622:
 10576              	.LBB620:
 10577              	.LBB618:
 354:src/display.c **** #endif
 10578              		.loc 1 354 38 view .LVU3428
 10579 08dc 02F81310 		strb	r1, [r2, r3, lsl #1]
 357:src/display.c **** }
 10580              		.loc 1 357 3 is_stmt 1 view .LVU3429
 10581              	.LVL1207:
 357:src/display.c **** }
 10582              		.loc 1 357 3 is_stmt 0 view .LVU3430
 10583              	.LBE618:
 10584              	.LBE620:
 357:src/display.c **** }
 10585              		.loc 1 357 3 is_stmt 1 view .LVU3431
 357:src/display.c **** }
 10586              		.loc 1 357 3 is_stmt 0 view .LVU3432
 10587              	.LBE622:
 10588              	.LBE624:
2431:src/display.c **** 	    if (i == 4) {
 10589              		.loc 1 2431 6 is_stmt 1 view .LVU3433
2432:src/display.c **** 	      set_dig(j, 8);
 10590              		.loc 1 2432 6 view .LVU3434
2432:src/display.c **** 	      set_dig(j, 8);
 10591              		.loc 1 2432 9 is_stmt 0 view .LVU3435
 10592 08e0 48D0     		beq	.L1156
2431:src/display.c **** 	    if (i == 4) {
 10593              		.loc 1 2431 8 view .LVU3436
 10594 08e2 3E46     		mov	r6, r7
 10595              	.LVL1208:
 10596              	.L905:
2431:src/display.c **** 	    if (i == 4) {
 10597              		.loc 1 2431 8 view .LVU3437
 10598              	.LBE633:
2419:src/display.c **** 	    int k = i + base - start;
 10599              		.loc 1 2419 39 is_stmt 1 view .LVU3438
 10600 08e4 019B     		ldr	r3, [sp, #4]
2419:src/display.c **** 	    int k = i + base - start;
 10601              		.loc 1 2419 4 is_stmt 0 view .LVU3439
 10602 08e6 0599     		ldr	r1, [sp, #20]
 10603 08e8 0133     		adds	r3, r3, #1
 10604 08ea 0193     		str	r3, [sp, #4]
2419:src/display.c **** 	    int k = i + base - start;
 10605              		.loc 1 2419 40 view .LVU3440
 10606 08ec 029B     		ldr	r3, [sp, #8]
2419:src/display.c **** 	    int k = i + base - start;
 10607              		.loc 1 2419 4 view .LVU3441
 10608 08ee 8B42     		cmp	r3, r1
2419:src/display.c **** 	    int k = i + base - start;
 10609              		.loc 1 2419 40 view .LVU3442
 10610 08f0 9B46     		mov	fp, r3
 10611              	.LVL1209:
2419:src/display.c **** 	    int k = i + base - start;
 10612              		.loc 1 2419 20 is_stmt 1 view .LVU3443
2419:src/display.c **** 	    int k = i + base - start;
 10613              		.loc 1 2419 4 is_stmt 0 view .LVU3444
ARM GAS  /tmp/ccE2jV6G.s 			page 307


 10614 08f2 1BD0     		beq	.L1113
2419:src/display.c **** 	    int k = i + base - start;
 10615              		.loc 1 2419 4 view .LVU3445
 10616 08f4 0133     		adds	r3, r3, #1
 10617              	.LVL1210:
2419:src/display.c **** 	    int k = i + base - start;
 10618              		.loc 1 2419 4 view .LVU3446
 10619 08f6 0293     		str	r3, [sp, #8]
 10620              	.LVL1211:
 10621              	.L906:
 10622              	.LBB634:
2420:src/display.c **** 	    int l = get_user_flag(k);
 10623              		.loc 1 2420 6 is_stmt 1 view .LVU3447
2421:src/display.c **** 	    k += group;
 10624              		.loc 1 2421 6 view .LVU3448
2421:src/display.c **** 	    k += group;
 10625              		.loc 1 2421 14 is_stmt 0 view .LVU3449
 10626 08f8 069B     		ldr	r3, [sp, #24]
 10627 08fa 03EB0B00 		add	r0, r3, fp
 10628 08fe FFF7FEFF 		bl	get_user_flag
 10629              	.LVL1212:
2423:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10630              		.loc 1 2423 9 view .LVU3450
 10631 0902 019B     		ldr	r3, [sp, #4]
 10632 0904 4345     		cmp	r3, r8
2421:src/display.c **** 	    k += group;
 10633              		.loc 1 2421 14 view .LVU3451
 10634 0906 0546     		mov	r5, r0
 10635              	.LVL1213:
2422:src/display.c **** 	    if (end >= k) {
 10636              		.loc 1 2422 6 is_stmt 1 view .LVU3452
2423:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10637              		.loc 1 2423 6 view .LVU3453
2431:src/display.c **** 	    if (i == 4) {
 10638              		.loc 1 2431 8 is_stmt 0 view .LVU3454
 10639 0908 06F10907 		add	r7, r6, #9
2423:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10640              		.loc 1 2423 9 view .LVU3455
 10641 090c D6DC     		bgt	.L904
2424:src/display.c **** 	      k += group;
 10642              		.loc 1 2424 8 is_stmt 1 view .LVU3456
2424:src/display.c **** 	      k += group;
 10643              		.loc 1 2424 14 is_stmt 0 view .LVU3457
 10644 090e 1846     		mov	r0, r3
 10645              	.LVL1214:
2424:src/display.c **** 	      k += group;
 10646              		.loc 1 2424 14 view .LVU3458
 10647 0910 FFF7FEFF 		bl	get_user_flag
 10648              	.LVL1215:
2424:src/display.c **** 	      k += group;
 10649              		.loc 1 2424 14 view .LVU3459
 10650 0914 049B     		ldr	r3, [sp, #16]
 10651 0916 5B44     		add	r3, r3, fp
2426:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10652              		.loc 1 2426 11 view .LVU3460
 10653 0918 9845     		cmp	r8, r3
2424:src/display.c **** 	      k += group;
ARM GAS  /tmp/ccE2jV6G.s 			page 308


 10654              		.loc 1 2424 10 view .LVU3461
 10655 091a 45EA4005 		orr	r5, r5, r0, lsl #1
 10656              	.LVL1216:
2425:src/display.c **** 	      if (end >= k)
 10657              		.loc 1 2425 8 is_stmt 1 view .LVU3462
2426:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10658              		.loc 1 2426 8 view .LVU3463
2426:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10659              		.loc 1 2426 11 is_stmt 0 view .LVU3464
 10660 091e CDDB     		blt	.L904
2427:src/display.c **** 	    }
 10661              		.loc 1 2427 3 is_stmt 1 view .LVU3465
2427:src/display.c **** 	    }
 10662              		.loc 1 2427 9 is_stmt 0 view .LVU3466
 10663 0920 1846     		mov	r0, r3
 10664 0922 FFF7FEFF 		bl	get_user_flag
 10665              	.LVL1217:
2427:src/display.c **** 	    }
 10666              		.loc 1 2427 5 view .LVU3467
 10667 0926 45EA8005 		orr	r5, r5, r0, lsl #2
 10668              	.LVL1218:
2427:src/display.c **** 	    }
 10669              		.loc 1 2427 5 view .LVU3468
 10670 092a C7E7     		b	.L904
 10671              	.LVL1219:
 10672              	.L1113:
2427:src/display.c **** 	    }
 10673              		.loc 1 2427 5 view .LVU3469
 10674 092c 079D     		ldr	r5, [sp, #28]
 10675              	.LVL1220:
 10676              	.L897:
2427:src/display.c **** 	    }
 10677              		.loc 1 2427 5 view .LVU3470
 10678              	.LBE634:
 10679              	.LBE605:
2440:src/display.c **** 	pc = state_pc();
 10680              		.loc 1 2440 2 is_stmt 1 view .LVU3471
2441:src/display.c **** 	if (isXROM(pc))
 10681              		.loc 1 2441 2 view .LVU3472
2441:src/display.c **** 	if (isXROM(pc))
 10682              		.loc 1 2441 7 is_stmt 0 view .LVU3473
 10683 092e DAF80030 		ldr	r3, [r10]
2441:src/display.c **** 	if (isXROM(pc))
 10684              		.loc 1 2441 5 view .LVU3474
 10685 0932 B3F8E077 		ldrh	r7, [r3, #2016]
 10686              	.LVL1221:
2442:src/display.c **** 	  pc = 1;
 10687              		.loc 1 2442 2 is_stmt 1 view .LVU3475
2442:src/display.c **** 	  pc = 1;
 10688              		.loc 1 2442 6 is_stmt 0 view .LVU3476
 10689 0936 BB0B     		lsrs	r3, r7, #14
2443:src/display.c **** 	for (n=i=0; i<4; i++) {
 10690              		.loc 1 2443 7 view .LVU3477
 10691 0938 032B     		cmp	r3, #3
 10692 093a 08BF     		it	eq
 10693 093c 0127     		moveq	r7, #1
 10694              	.LVL1222:
ARM GAS  /tmp/ccE2jV6G.s 			page 309


2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10695              		.loc 1 2444 2 is_stmt 1 view .LVU3478
2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10696              		.loc 1 2444 14 view .LVU3479
2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10697              		.loc 1 2444 8 is_stmt 0 view .LVU3480
 10698 093e 4FF0000A 		mov	r10, #0
 10699 0942 6426     		movs	r6, #100
2440:src/display.c **** 	pc = state_pc();
 10700              		.loc 1 2440 4 view .LVU3481
 10701 0944 4FF06C08 		mov	r8, #108
 10702              	.LVL1223:
 10703              	.L910:
2445:src/display.c **** 	    if (++n == 4) {
 10704              		.loc 1 2445 4 is_stmt 1 view .LVU3482
2445:src/display.c **** 	    if (++n == 4) {
 10705              		.loc 1 2445 8 is_stmt 0 view .LVU3483
 10706 0948 0222     		movs	r2, #2
 10707 094a 3146     		mov	r1, r6
 10708 094c 3846     		mov	r0, r7
 10709 094e FFF7FEFF 		bl	find_label_from
 10710              	.LVL1224:
2446:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10711              		.loc 1 2446 6 is_stmt 1 view .LVU3484
2445:src/display.c **** 	    if (++n == 4) {
 10712              		.loc 1 2445 7 is_stmt 0 view .LVU3485
 10713 0952 58B1     		cbz	r0, .L908
2446:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10714              		.loc 1 2446 9 view .LVU3486
 10715 0954 0AF1010A 		add	r10, r10, #1
 10716              	.LVL1225:
2450:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10717              		.loc 1 2450 8 is_stmt 1 view .LVU3487
2446:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10718              		.loc 1 2446 9 is_stmt 0 view .LVU3488
 10719 0958 BAF1040F 		cmp	r10, #4
2450:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10720              		.loc 1 2450 8 view .LVU3489
 10721 095c A6F12301 		sub	r1, r6, #35
 10722 0960 4046     		mov	r0, r8
2446:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10723              		.loc 1 2446 9 view .LVU3490
 10724 0962 33D0     		beq	.L1157
2450:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10725              		.loc 1 2450 8 view .LVU3491
 10726 0964 FFF7FEFF 		bl	set_dig
 10727              	.LVL1226:
2451:src/display.c **** 	    }
 10728              		.loc 1 2451 8 is_stmt 1 view .LVU3492
2451:src/display.c **** 	    }
 10729              		.loc 1 2451 10 is_stmt 0 view .LVU3493
 10730 0968 08F10708 		add	r8, r8, #7
 10731              	.LVL1227:
 10732              	.L908:
2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10733              		.loc 1 2444 19 is_stmt 1 view .LVU3494
2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
ARM GAS  /tmp/ccE2jV6G.s 			page 310


 10734              		.loc 1 2444 14 view .LVU3495
 10735 096c 0136     		adds	r6, r6, #1
 10736              	.LVL1228:
2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10737              		.loc 1 2444 2 is_stmt 0 view .LVU3496
 10738 096e 682E     		cmp	r6, #104
 10739 0970 EAD1     		bne	.L910
2444:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10740              		.loc 1 2444 2 view .LVU3497
 10741 0972 5FE7     		b	.L1121
 10742              	.LVL1229:
 10743              	.L1156:
 10744              	.LBB636:
 10745              	.LBB635:
2433:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10746              		.loc 1 2433 8 is_stmt 1 view .LVU3498
 10747 0974 0821     		movs	r1, #8
 10748 0976 3846     		mov	r0, r7
 10749 0978 FFF7FEFF 		bl	set_dig
 10750              	.LVL1230:
2434:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10751              		.loc 1 2434 8 view .LVU3499
 10752              	.LBB625:
 10753              	.LBI625:
 346:src/display.c ****   if (res) {
 10754              		.loc 1 346 14 view .LVU3500
 10755              	.LBB626:
 347:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10756              		.loc 1 347 3 view .LVU3501
 350:src/display.c ****     if (decimal != DECIMAL_DOT)
 10757              		.loc 1 350 5 view .LVU3502
 10758 097c 06F11000 		add	r0, r6, #16
 10759 0980 FFF7FEFF 		bl	set_dot
 10760              	.LVL1231:
 351:src/display.c ****       set_dot(posn+8);
 10761              		.loc 1 351 5 view .LVU3503
 10762              	.LBB627:
 10763              	.LBI627:
 346:src/display.c ****   if (res) {
 10764              		.loc 1 346 14 view .LVU3504
 10765              	.LBB628:
 354:src/display.c **** #endif
 10766              		.loc 1 354 5 view .LVU3505
 354:src/display.c **** #endif
 10767              		.loc 1 354 30 is_stmt 0 view .LVU3506
 10768 0984 0F4B     		ldr	r3, .L1170+40
 354:src/display.c **** #endif
 10769              		.loc 1 354 38 view .LVU3507
 10770 0986 0399     		ldr	r1, [sp, #12]
 354:src/display.c **** #endif
 10771              		.loc 1 354 30 view .LVU3508
 10772 0988 A3FB0723 		umull	r2, r3, r3, r7
 10773 098c 5B08     		lsrs	r3, r3, #1
 354:src/display.c **** #endif
 10774              		.loc 1 354 38 view .LVU3509
 10775 098e 0B4A     		ldr	r2, .L1170+32
 354:src/display.c **** #endif
ARM GAS  /tmp/ccE2jV6G.s 			page 311


 10776              		.loc 1 354 35 view .LVU3510
 10777 0990 0133     		adds	r3, r3, #1
 10778              	.LBE628:
 10779              	.LBE627:
 10780              	.LBE626:
 10781              	.LBE625:
2435:src/display.c **** 	    }
 10782              		.loc 1 2435 10 view .LVU3511
 10783 0992 1236     		adds	r6, r6, #18
 10784              	.LBB632:
 10785              	.LBB631:
 10786              	.LBB630:
 10787              	.LBB629:
 354:src/display.c **** #endif
 10788              		.loc 1 354 38 view .LVU3512
 10789 0994 02F81310 		strb	r1, [r2, r3, lsl #1]
 357:src/display.c **** }
 10790              		.loc 1 357 3 is_stmt 1 view .LVU3513
 10791              	.LVL1232:
 357:src/display.c **** }
 10792              		.loc 1 357 3 is_stmt 0 view .LVU3514
 10793              	.LBE629:
 10794              	.LBE630:
 357:src/display.c **** }
 10795              		.loc 1 357 3 is_stmt 1 view .LVU3515
 357:src/display.c **** }
 10796              		.loc 1 357 3 is_stmt 0 view .LVU3516
 10797              	.LBE631:
 10798              	.LBE632:
2435:src/display.c **** 	    }
 10799              		.loc 1 2435 8 is_stmt 1 view .LVU3517
2435:src/display.c **** 	    }
 10800              		.loc 1 2435 8 is_stmt 0 view .LVU3518
 10801 0998 A4E7     		b	.L905
 10802              	.L1171:
 10803 099a 00BF     		.align	2
 10804              	.L1170:
 10805 099c BC000000 		.word	.LC25
 10806 09a0 3C000000 		.word	.LC27
 10807 09a4 00000000 		.word	DispPlot
 10808 09a8 00000000 		.word	DispMsg
 10809 09ac 00000000 		.word	ShowRegister
 10810 09b0 00000000 		.word	WasDataEntry
 10811 09b4 00000000 		.word	multicmds
 10812 09b8 00000000 		.word	.LANCHOR23
 10813 09bc 00000000 		.word	LastDisplayedNumber
 10814 09c0 8C000000 		.word	.LC36
 10815 09c4 398EE338 		.word	954437177
 10816 09c8 00000000 		.word	.LANCHOR22
 10817              	.LVL1233:
 10818              	.L1157:
2435:src/display.c **** 	    }
 10819              		.loc 1 2435 8 view .LVU3519
 10820              	.LBE635:
 10821              	.LBE636:
2447:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10822              		.loc 1 2447 8 is_stmt 1 view .LVU3520
ARM GAS  /tmp/ccE2jV6G.s 			page 312


 10823 09cc 4C21     		movs	r1, #76
 10824 09ce 7320     		movs	r0, #115
 10825              	.LVL1234:
2447:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10826              		.loc 1 2447 8 is_stmt 0 view .LVU3521
 10827 09d0 FFF7FEFF 		bl	set_dig
 10828              	.LVL1235:
2448:src/display.c **** 	    } else {
 10829              		.loc 1 2448 8 is_stmt 1 view .LVU3522
 10830 09d4 4C21     		movs	r1, #76
 10831 09d6 7A20     		movs	r0, #122
 10832 09d8 FFF7FEFF 		bl	set_dig
 10833              	.LVL1236:
 10834 09dc C6E7     		b	.L908
 10835              	.LVL1237:
 10836              	.L879:
2448:src/display.c **** 	    } else {
 10837              		.loc 1 2448 8 is_stmt 0 view .LVU3523
 10838              	.LBE604:
 10839              	.LBE603:
 10840              	.LBB639:
2751:src/display.c **** 	    else
 10841              		.loc 1 2751 8 is_stmt 1 view .LVU3524
 10842 09de B648     		ldr	r0, .L1172
 10843 09e0 0021     		movs	r1, #0
 10844 09e2 FFF7FEFF 		bl	set_digits_string
 10845              	.LVL1238:
2754:src/display.c **** 	  } else if (State2.runmode) {
 10846              		.loc 1 2754 11 is_stmt 0 view .LVU3525
 10847 09e6 0126     		movs	r6, #1
2751:src/display.c **** 	    else
 10848              		.loc 1 2751 8 view .LVU3526
 10849 09e8 8EE6     		b	.L881
 10850              	.LVL1239:
 10851              	.L1142:
2751:src/display.c **** 	    else
 10852              		.loc 1 2751 8 view .LVU3527
 10853              	.LBE639:
2815:src/display.c **** 	  skip = 1;
 10854              		.loc 1 2815 4 is_stmt 1 view .LVU3528
 10855              	.LBB640:
 10856              	.LBI640:
2490:src/display.c **** 	char buf[16], *bp;
 10857              		.loc 1 2490 19 view .LVU3529
 10858              	.LBB641:
2491:src/display.c **** 	int n = State2.digval;
 10859              		.loc 1 2491 2 view .LVU3530
2492:src/display.c **** 	
 10860              		.loc 1 2492 2 view .LVU3531
2492:src/display.c **** 	
 10861              		.loc 1 2492 6 is_stmt 0 view .LVU3532
 10862 09ea B4F808B0 		ldrh	fp, [r4, #8]
 10863              	.LVL1240:
2499:src/display.c **** 	  n;
 10864              		.loc 1 2499 2 is_stmt 1 view .LVU3533
2499:src/display.c **** 	  n;
 10865              		.loc 1 2499 54 is_stmt 0 view .LVU3534
ARM GAS  /tmp/ccE2jV6G.s 			page 313


 10866 09ee CA07     		lsls	r2, r1, #31
 10867 09f0 4CBF     		ite	mi
 10868 09f2 0BF17008 		addmi	r8, fp, #112
 10869              	.LVL1241:
2492:src/display.c **** 	
 10870              		.loc 1 2492 6 view .LVU3535
 10871 09f6 D846     		movpl	r8, fp
 10872              	.LVL1242:
2503:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10873              		.loc 1 2503 2 is_stmt 1 view .LVU3536
2503:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10874              		.loc 1 2503 5 is_stmt 0 view .LVU3537
 10875 09f8 11F00401 		ands	r1, r1, #4
 10876 09fc 57D0     		beq	.L918
2504:src/display.c **** 	}
 10877              		.loc 1 2504 4 is_stmt 1 view .LVU3538
2504:src/display.c **** 	}
 10878              		.loc 1 2504 15 is_stmt 0 view .LVU3539
 10879 09fe 17A9     		add	r1, sp, #92
 10880 0a00 4046     		mov	r0, r8
 10881 0a02 FFF7FEFF 		bl	alpha_rcl_s
 10882              	.LVL1243:
2504:src/display.c **** 	}
 10883              		.loc 1 2504 4 view .LVU3540
 10884 0a06 FFF7FEFF 		bl	set_status
 10885              	.LVL1244:
 10886              	.L919:
2526:src/display.c ****       }
 10887              		.loc 1 2526 2 is_stmt 1 view .LVU3541
 10888 0a0a 4046     		mov	r0, r8
 10889 0a0c 0021     		movs	r1, #0
 10890 0a0e FFF7FEFF 		bl	format_reg
 10891              	.LVL1245:
2526:src/display.c ****       }
 10892              		.loc 1 2526 2 is_stmt 0 view .LVU3542
 10893              	.LBE641:
 10894              	.LBE640:
2816:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10895              		.loc 1 2816 4 is_stmt 1 view .LVU3543
2817:src/display.c **** 	    annunciators();
 10896              		.loc 1 2817 4 view .LVU3544
2817:src/display.c **** 	    annunciators();
 10897              		.loc 1 2817 7 is_stmt 0 view .LVU3545
 10898 0a12 002E     		cmp	r6, #0
 10899 0a14 48D1     		bne	.L925
2817:src/display.c **** 	    annunciators();
 10900              		.loc 1 2817 25 discriminator 1 view .LVU3546
 10901 0a16 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10902 0a18 012B     		cmp	r3, #1
 10903 0a1a 3FD0     		beq	.L1158
 10904              	.L926:
2878:src/display.c ****       nostk:
 10905              		.loc 1 2878 2 is_stmt 1 view .LVU3547
 10906 0a1c FFF7FEFF 		bl	show_stack
 10907              	.LVL1246:
2880:src/display.c **** 	if (!skip) {
 10908              		.loc 1 2880 2 view .LVU3548
ARM GAS  /tmp/ccE2jV6G.s 			page 314


2588:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10909              		.loc 1 2588 6 is_stmt 0 view .LVU3549
 10910 0a20 0025     		movs	r5, #0
2880:src/display.c **** 	if (!skip) {
 10911              		.loc 1 2880 2 view .LVU3550
 10912 0a22 FFF7FEFF 		bl	show_flags
 10913              	.LVL1247:
2881:src/display.c **** 	  if (State2.runmode) {
 10914              		.loc 1 2881 2 is_stmt 1 view .LVU3551
 10915 0a26 85E6     		b	.L889
 10916              	.LVL1248:
 10917              	.L1150:
 10918              	.LBB644:
 10919              	.LBB586:
2777:src/display.c **** 	      copyreg(&z, x);
 10920              		.loc 1 2777 8 view .LVU3552
2777:src/display.c **** 	      copyreg(&z, x);
 10921              		.loc 1 2777 27 is_stmt 0 view .LVU3553
 10922 0a28 A44B     		ldr	r3, .L1172+4
 10923 0a2a 1E68     		ldr	r6, [r3]
 10924              	.LVL1249:
2778:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 10925              		.loc 1 2778 8 is_stmt 1 view .LVU3554
 10926 0a2c 17A8     		add	r0, sp, #92
 10927 0a2e 3146     		mov	r1, r6
 10928 0a30 FFF7FEFF 		bl	copyreg
 10929              	.LVL1250:
2779:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 10930              		.loc 1 2779 8 view .LVU3555
 10931 0a34 E8B2     		uxtb	r0, r5
 10932 0a36 FFF7FEFF 		bl	sigma_val
 10933              	.LVL1251:
2780:src/display.c **** 	      copyreg(x, &z);
 10934              		.loc 1 2780 8 view .LVU3556
 10935 0a3a FFF7FEFF 		bl	is_dblmode
 10936              	.LVL1252:
 10937 0a3e 0021     		movs	r1, #0
 10938 0a40 0246     		mov	r2, r0
 10939 0a42 3046     		mov	r0, r6
 10940 0a44 FFF7FEFF 		bl	set_x
 10941              	.LVL1253:
2781:src/display.c **** 	      skip = 1;
 10942              		.loc 1 2781 8 view .LVU3557
 10943 0a48 3046     		mov	r0, r6
 10944 0a4a 17A9     		add	r1, sp, #92
 10945 0a4c FFF7FEFF 		bl	copyreg
 10946              	.LVL1254:
2782:src/display.c **** 	    }
 10947              		.loc 1 2782 8 view .LVU3558
2782:src/display.c **** 	    }
 10948              		.loc 1 2782 13 is_stmt 0 view .LVU3559
 10949 0a50 0126     		movs	r6, #1
 10950              	.LVL1255:
2782:src/display.c **** 	    }
 10951              		.loc 1 2782 13 view .LVU3560
 10952 0a52 59E6     		b	.L881
 10953              	.LVL1256:
ARM GAS  /tmp/ccE2jV6G.s 			page 315


 10954              	.L1149:
2782:src/display.c **** 	    }
 10955              		.loc 1 2782 13 view .LVU3561
 10956              	.LBE586:
 10957              	.LBB587:
2757:src/display.c **** 	      decimal64 z;
 10958              		.loc 1 2757 8 is_stmt 1 view .LVU3562
2758:src/display.c **** 
 10959              		.loc 1 2758 8 view .LVU3563
2760:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 10960              		.loc 1 2760 8 view .LVU3564
 10961 0a54 0EA8     		add	r0, sp, #56
 10962 0a56 FFF7FEFF 		bl	getX
 10963              	.LVL1257:
2761:src/display.c **** 		const unsigned int f = argKIND(op);
 10964              		.loc 1 2761 8 view .LVU3565
2761:src/display.c **** 		const unsigned int f = argKIND(op);
 10965              		.loc 1 2761 11 is_stmt 0 view .LVU3566
 10966 0a5a C5F30723 		ubfx	r3, r5, #8, #8
 10967 0a5e 022B     		cmp	r3, #2
 10968 0a60 43D1     		bne	.L883
 10969              	.LBB588:
2762:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10970              		.loc 1 2762 3 is_stmt 1 view .LVU3567
2762:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10971              		.loc 1 2762 22 is_stmt 0 view .LVU3568
 10972 0a62 EDB2     		uxtb	r5, r5
 10973              	.LVL1258:
2763:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10974              		.loc 1 2763 3 is_stmt 1 view .LVU3569
2763:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10975              		.loc 1 2763 6 is_stmt 0 view .LVU3570
 10976 0a64 982D     		cmp	r5, #152
 10977              	.LBB589:
2766:src/display.c **** 		}
 10978              		.loc 1 2766 5 view .LVU3571
 10979 0a66 17AF     		add	r7, sp, #92
 10980              	.LBE589:
2763:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10981              		.loc 1 2763 6 view .LVU3572
 10982 0a68 3BD8     		bhi	.L884
2763:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10983              		.loc 1 2763 28 discriminator 1 view .LVU3573
 10984 0a6a 1823     		movs	r3, #24
 10985 0a6c 944A     		ldr	r2, .L1172+8
 10986 0a6e 03FB05F3 		mul	r3, r3, r5
 10987 0a72 D358     		ldr	r3, [r2, r3]
2763:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10988              		.loc 1 2763 23 discriminator 1 view .LVU3574
 10989 0a74 ABB3     		cbz	r3, .L884
 10990              	.LBB590:
2764:src/display.c **** 		  update_speed(0);
 10991              		.loc 1 2764 5 is_stmt 1 view .LVU3575
 10992              	.LVL1259:
2765:src/display.c **** 		  fp(&r, &x);
 10993              		.loc 1 2765 20 view .LVU3576
2766:src/display.c **** 		}
ARM GAS  /tmp/ccE2jV6G.s 			page 316


 10994              		.loc 1 2766 5 view .LVU3577
 10995 0a76 0EA9     		add	r1, sp, #56
 10996 0a78 3846     		mov	r0, r7
 10997 0a7a 9847     		blx	r3
 10998              	.LVL1260:
 10999              	.L885:
2766:src/display.c **** 		}
 11000              		.loc 1 2766 5 is_stmt 0 view .LVU3578
 11001              	.LBE590:
 11002              	.LBE588:
2772:src/display.c **** 	      packed_from_number(&z, &r);
 11003              		.loc 1 2772 8 is_stmt 1 discriminator 1 view .LVU3579
 11004 0a7c 914A     		ldr	r2, .L1172+12
 11005 0a7e 3946     		mov	r1, r7
 11006 0a80 3846     		mov	r0, r7
 11007 0a82 FFF7FEFF 		bl	decNumberNormalize
 11008              	.LVL1261:
2773:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11009              		.loc 1 2773 8 discriminator 1 view .LVU3580
 11010 0a86 3946     		mov	r1, r7
 11011 0a88 08A8     		add	r0, sp, #32
 11012 0a8a FFF7FEFF 		bl	packed_from_number
 11013              	.LVL1262:
2774:src/display.c **** 	      skip = 1;
 11014              		.loc 1 2774 8 discriminator 1 view .LVU3581
 11015 0a8e 0022     		movs	r2, #0
 11016 0a90 08A8     		add	r0, sp, #32
 11017 0a92 1146     		mov	r1, r2
 11018 0a94 FFF7FEFF 		bl	set_x
 11019              	.LVL1263:
2775:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11020              		.loc 1 2775 8 discriminator 1 view .LVU3582
2775:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11021              		.loc 1 2775 13 is_stmt 0 discriminator 1 view .LVU3583
 11022 0a98 0126     		movs	r6, #1
 11023              	.LBE587:
 11024 0a9a 35E6     		b	.L881
 11025              	.LVL1264:
 11026              	.L1158:
2775:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11027              		.loc 1 2775 13 discriminator 1 view .LVU3584
 11028              	.LBE644:
2817:src/display.c **** 	    annunciators();
 11029              		.loc 1 2817 56 discriminator 2 view .LVU3585
 11030 0a9c DAF80030 		ldr	r3, [r10]
 11031 0aa0 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11032 0aa4 DE07     		lsls	r6, r3, #31
 11033 0aa6 B9D5     		bpl	.L926
 11034              	.L925:
2818:src/display.c **** 	  }
 11035              		.loc 1 2818 6 is_stmt 1 view .LVU3586
 11036 0aa8 FFF7FEFF 		bl	annunciators
 11037              	.LVL1265:
 11038 0aac C2E6     		b	.L1121
 11039              	.LVL1266:
 11040              	.L918:
 11041              	.LBB645:
ARM GAS  /tmp/ccE2jV6G.s 			page 317


 11042              	.LBB642:
2507:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11043              		.loc 1 2507 4 view .LVU3587
 11044 0aae 17AF     		add	r7, sp, #92
 11045 0ab0 1022     		movs	r2, #16
 11046 0ab2 3846     		mov	r0, r7
 11047 0ab4 FFF7FEFF 		bl	xset
 11048              	.LVL1267:
2511:src/display.c **** #endif
 11049              		.loc 1 2511 4 view .LVU3588
2511:src/display.c **** #endif
 11050              		.loc 1 2511 9 is_stmt 0 view .LVU3589
 11051 0ab8 8349     		ldr	r1, .L1172+16
 11052 0aba 3846     		mov	r0, r7
 11053 0abc FFF7FEFF 		bl	scopy_spc
 11054              	.LVL1268:
2513:src/display.c **** 	    *bp++ = '.';
 11055              		.loc 1 2513 8 view .LVU3590
 11056 0ac0 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11057              	.LVL1269:
2513:src/display.c **** 	    *bp++ = '.';
 11058              		.loc 1 2513 4 is_stmt 1 view .LVU3591
2513:src/display.c **** 	    *bp++ = '.';
 11059              		.loc 1 2513 7 is_stmt 0 view .LVU3592
 11060 0ac2 DB07     		lsls	r3, r3, #31
 11061 0ac4 1ED5     		bpl	.L920
2514:src/display.c **** 	    if (n >= 100) {
 11062              		.loc 1 2514 6 is_stmt 1 view .LVU3593
 11063              	.LVL1270:
2514:src/display.c **** 	    if (n >= 100) {
 11064              		.loc 1 2514 12 is_stmt 0 view .LVU3594
 11065 0ac6 2E23     		movs	r3, #46
2515:src/display.c **** 	      *bp++ = '1';
 11066              		.loc 1 2515 9 view .LVU3595
 11067 0ac8 BBF1630F 		cmp	fp, #99
2514:src/display.c **** 	    if (n >= 100) {
 11068              		.loc 1 2514 12 view .LVU3596
 11069 0acc 0370     		strb	r3, [r0]
2515:src/display.c **** 	      *bp++ = '1';
 11070              		.loc 1 2515 6 is_stmt 1 view .LVU3597
2515:src/display.c **** 	      *bp++ = '1';
 11071              		.loc 1 2515 9 is_stmt 0 view .LVU3598
 11072 0ace 14DC     		bgt	.L921
2514:src/display.c **** 	    if (n >= 100) {
 11073              		.loc 1 2514 9 view .LVU3599
 11074 0ad0 0130     		adds	r0, r0, #1
 11075              	.LVL1271:
 11076              	.L922:
2521:src/display.c **** 	  else
 11077              		.loc 1 2521 6 is_stmt 1 view .LVU3600
2521:src/display.c **** 	  else
 11078              		.loc 1 2521 11 is_stmt 0 view .LVU3601
 11079 0ad2 5946     		mov	r1, fp
 11080 0ad4 0222     		movs	r2, #2
 11081 0ad6 FFF7FEFF 		bl	num_arg_0
 11082              	.LVL1272:
 11083              	.L924:
ARM GAS  /tmp/ccE2jV6G.s 			page 318


2524:src/display.c **** 	}
 11084              		.loc 1 2524 4 is_stmt 1 view .LVU3602
 11085 0ada 3846     		mov	r0, r7
 11086 0adc FFF7FEFF 		bl	set_status
 11087              	.LVL1273:
 11088 0ae0 93E7     		b	.L919
 11089              	.LVL1274:
 11090              	.L884:
2524:src/display.c **** 	}
 11091              		.loc 1 2524 4 is_stmt 0 view .LVU3603
 11092              	.LBE642:
 11093              	.LBE645:
 11094              	.LBB646:
 11095              	.LBB592:
 11096              	.LBB591:
2769:src/display.c **** 	      } else
 11097              		.loc 1 2769 5 is_stmt 1 view .LVU3604
 11098 0ae2 3846     		mov	r0, r7
 11099 0ae4 FFF7FEFF 		bl	set_NaN
 11100              	.LVL1275:
 11101 0ae8 C8E7     		b	.L885
 11102              	.LVL1276:
 11103              	.L883:
2769:src/display.c **** 	      } else
 11104              		.loc 1 2769 5 is_stmt 0 view .LVU3605
 11105              	.LBE591:
2771:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11106              		.loc 1 2771 3 is_stmt 1 view .LVU3606
 11107 0aea 17AF     		add	r7, sp, #92
 11108 0aec 0EAA     		add	r2, sp, #56
 11109 0aee 05F07F01 		and	r1, r5, #127
 11110 0af2 3846     		mov	r0, r7
 11111 0af4 FFF7FEFF 		bl	do_conv
 11112              	.LVL1277:
 11113 0af8 C0E7     		b	.L885
 11114              	.LVL1278:
 11115              	.L921:
2771:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11116              		.loc 1 2771 3 is_stmt 0 view .LVU3607
 11117              	.LBE592:
 11118              	.LBE646:
 11119              	.LBB647:
 11120              	.LBB643:
2516:src/display.c **** 	      n -= 100;
 11121              		.loc 1 2516 8 is_stmt 1 view .LVU3608
2516:src/display.c **** 	      n -= 100;
 11122              		.loc 1 2516 14 is_stmt 0 view .LVU3609
 11123 0afa 3123     		movs	r3, #49
 11124 0afc 4370     		strb	r3, [r0, #1]
2517:src/display.c **** 	    }
 11125              		.loc 1 2517 8 is_stmt 1 view .LVU3610
2517:src/display.c **** 	    }
 11126              		.loc 1 2517 10 is_stmt 0 view .LVU3611
 11127 0afe ABF1640B 		sub	fp, fp, #100
 11128              	.LVL1279:
2516:src/display.c **** 	      n -= 100;
 11129              		.loc 1 2516 11 view .LVU3612
ARM GAS  /tmp/ccE2jV6G.s 			page 319


 11130 0b02 0230     		adds	r0, r0, #2
 11131              	.LVL1280:
 11132              	.L920:
2520:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11133              		.loc 1 2520 4 is_stmt 1 view .LVU3613
2520:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11134              		.loc 1 2520 7 is_stmt 0 view .LVU3614
 11135 0b04 BBF1630F 		cmp	fp, #99
 11136 0b08 E3DD     		ble	.L922
2523:src/display.c **** 	  set_status(buf);
 11137              		.loc 1 2523 6 is_stmt 1 view .LVU3615
 11138              	.LVL1281:
2523:src/display.c **** 	  set_status(buf);
 11139              		.loc 1 2523 22 is_stmt 0 view .LVU3616
 11140 0b0a 704B     		ldr	r3, .L1172+20
 11141 0b0c 5B44     		add	r3, r3, fp
2523:src/display.c **** 	  set_status(buf);
 11142              		.loc 1 2523 12 view .LVU3617
 11143 0b0e 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 11144 0b12 0370     		strb	r3, [r0]
 11145 0b14 E1E7     		b	.L924
 11146              	.LVL1282:
 11147              	.L943:
2523:src/display.c **** 	  set_status(buf);
 11148              		.loc 1 2523 12 view .LVU3618
 11149              	.LBE643:
 11150              	.LBE647:
2875:src/display.c **** 	  goto nostk;
 11151              		.loc 1 2875 6 is_stmt 1 view .LVU3619
2880:src/display.c **** 	if (!skip) {
 11152              		.loc 1 2880 2 view .LVU3620
 11153 0b16 FFF7FEFF 		bl	show_flags
 11154              	.LVL1283:
2881:src/display.c **** 	  if (State2.runmode) {
 11155              		.loc 1 2881 2 view .LVU3621
2875:src/display.c **** 	  goto nostk;
 11156              		.loc 1 2875 12 is_stmt 0 view .LVU3622
 11157 0b1a 0125     		movs	r5, #1
 11158              	.LVL1284:
 11159              	.L1118:
2875:src/display.c **** 	  goto nostk;
 11160              		.loc 1 2875 12 view .LVU3623
 11161 0b1c 6C4B     		ldr	r3, .L1172+24
 11162 0b1e 6D4F     		ldr	r7, .L1172+28
 11163 0b20 0193     		str	r3, [sp, #4]
 11164 0b22 FFF7B3BA 		b	.L856
 11165              	.LVL1285:
 11166              	.L927:
2868:src/display.c **** 	  if (i > 0)
 11167              		.loc 1 2868 4 is_stmt 1 view .LVU3624
2868:src/display.c **** 	  if (i > 0)
 11168              		.loc 1 2868 8 is_stmt 0 view .LVU3625
 11169 0b26 DAF80030 		ldr	r3, [r10]
 11170 0b2a B3F8E007 		ldrh	r0, [r3, #2016]
 11171              	.LVL1286:
2869:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11172              		.loc 1 2869 4 is_stmt 1 view .LVU3626
ARM GAS  /tmp/ccE2jV6G.s 			page 320


2869:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11173              		.loc 1 2869 7 is_stmt 0 view .LVU3627
 11174 0b2e 0028     		cmp	r0, #0
 11175 0b30 00F02581 		beq	.L941
2870:src/display.c **** 	  else
 11176              		.loc 1 2870 6 is_stmt 1 view .LVU3628
 11177 0b34 FFF7FEFF 		bl	getprog
 11178              	.LVL1287:
2870:src/display.c **** 	  else
 11179              		.loc 1 2870 6 is_stmt 0 view .LVU3629
 11180 0b38 20A9     		add	r1, sp, #128
 11181              	.LVL1288:
2870:src/display.c **** 	  else
 11182              		.loc 1 2870 6 view .LVU3630
 11183 0b3a FFF7FEFF 		bl	prt
 11184              	.LVL1289:
2870:src/display.c **** 	  else
 11185              		.loc 1 2870 6 view .LVU3631
 11186 0b3e FFF7FEFF 		bl	set_status
 11187              	.LVL1290:
 11188              	.L942:
2873:src/display.c **** 	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11189              		.loc 1 2873 4 is_stmt 1 view .LVU3632
 11190 0b42 8920     		movs	r0, #137
 11191 0b44 FFF7FEFF 		bl	set_dot
 11192              	.LVL1291:
2874:src/display.c **** 	    annuc = 1;
 11193              		.loc 1 2874 4 view .LVU3633
2874:src/display.c **** 	    annuc = 1;
 11194              		.loc 1 2874 8 is_stmt 0 view .LVU3634
 11195 0b48 FFF7FEFF 		bl	cur_shift
 11196              	.LVL1292:
2874:src/display.c **** 	    annuc = 1;
 11197              		.loc 1 2874 47 view .LVU3635
 11198 0b4c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 11199 0b4e 03F00603 		and	r3, r3, #6
 11200 0b52 1843     		orrs	r0, r0, r3
 11201 0b54 10F0FF0F 		tst	r0, #255
 11202 0b58 DDD1     		bne	.L943
2880:src/display.c **** 	if (!skip) {
 11203              		.loc 1 2880 2 is_stmt 1 view .LVU3636
 11204 0b5a FFF7FEFF 		bl	show_flags
 11205              	.LVL1293:
2881:src/display.c **** 	  if (State2.runmode) {
 11206              		.loc 1 2881 2 view .LVU3637
 11207 0b5e 5C4B     		ldr	r3, .L1172+24
 11208 0b60 5C4F     		ldr	r7, .L1172+28
 11209 0b62 0193     		str	r3, [sp, #4]
 11210 0b64 FFF792BA 		b	.L856
 11211              	.L928:
2827:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11212              		.loc 1 2827 11 view .LVU3638
2827:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11213              		.loc 1 2827 15 is_stmt 0 view .LVU3639
 11214 0b68 594A     		ldr	r2, .L1172+24
 11215 0b6a 0192     		str	r2, [sp, #4]
 11216 0b6c B2F90020 		ldrsh	r2, [r2]
ARM GAS  /tmp/ccE2jV6G.s 			page 321


2827:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11217              		.loc 1 2827 14 view .LVU3640
 11218 0b70 002A     		cmp	r2, #0
 11219 0b72 40F00881 		bne	.L1159
2829:src/display.c **** 	    bp = scopy(buf, Alpha);
 11220              		.loc 1 2829 11 is_stmt 1 view .LVU3641
2829:src/display.c **** 	    bp = scopy(buf, Alpha);
 11221              		.loc 1 2829 14 is_stmt 0 view .LVU3642
 11222 0b76 0907     		lsls	r1, r1, #28
 11223 0b78 1DD4     		bmi	.L1160
 11224              	.LVL1294:
2878:src/display.c ****       nostk:
 11225              		.loc 1 2878 2 is_stmt 1 view .LVU3643
 11226 0b7a FFF7FEFF 		bl	show_stack
 11227              	.LVL1295:
2880:src/display.c **** 	if (!skip) {
 11228              		.loc 1 2880 2 view .LVU3644
2861:src/display.c **** 	  }
 11229              		.loc 1 2861 12 is_stmt 0 view .LVU3645
 11230 0b7e 0125     		movs	r5, #1
2880:src/display.c **** 	if (!skip) {
 11231              		.loc 1 2880 2 view .LVU3646
 11232 0b80 FFF7FEFF 		bl	show_flags
 11233              	.LVL1296:
2881:src/display.c **** 	  if (State2.runmode) {
 11234              		.loc 1 2881 2 is_stmt 1 view .LVU3647
 11235 0b84 FFF782BA 		b	.L856
 11236              	.LVL1297:
 11237              	.L1151:
 11238              	.LBB648:
 11239              	.LBB600:
2473:src/display.c **** 	  if (lblpc != pc) {
 11240              		.loc 1 2473 4 view .LVU3648
2473:src/display.c **** 	  if (lblpc != pc) {
 11241              		.loc 1 2473 12 is_stmt 0 view .LVU3649
 11242 0b88 4046     		mov	r0, r8
 11243 0b8a 3946     		mov	r1, r7
 11244 0b8c FFF7FEFF 		bl	findmultilbl
 11245              	.LVL1298:
2473:src/display.c **** 	  if (lblpc != pc) {
 11246              		.loc 1 2473 10 view .LVU3650
 11247 0b90 86B2     		uxth	r6, r0
 11248              	.LVL1299:
2474:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11249              		.loc 1 2474 4 is_stmt 1 view .LVU3651
2474:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11250              		.loc 1 2474 7 is_stmt 0 view .LVU3652
 11251 0b92 B345     		cmp	fp, r6
2473:src/display.c **** 	  if (lblpc != pc) {
 11252              		.loc 1 2473 12 view .LVU3653
 11253 0b94 8046     		mov	r8, r0
 11254              	.LVL1300:
2474:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11255              		.loc 1 2474 7 view .LVU3654
 11256 0b96 3FF44DAE 		beq	.L1121
2475:src/display.c **** 	    n = nLIB(lblpc);
 11257              		.loc 1 2475 6 is_stmt 1 view .LVU3655
ARM GAS  /tmp/ccE2jV6G.s 			page 322


 11258 0b9a 4F48     		ldr	r0, .L1172+32
 11259 0b9c 3F21     		movs	r1, #63
 11260 0b9e FFF7FEFF 		bl	set_digits_string
 11261              	.LVL1301:
2476:src/display.c **** 	    if (n == REGION_RAM)
 11262              		.loc 1 2476 6 view .LVU3656
2477:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11263              		.loc 1 2477 6 view .LVU3657
2477:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11264              		.loc 1 2477 9 is_stmt 0 view .LVU3658
 11265 0ba2 B60B     		lsrs	r6, r6, #14
 11266              	.LVL1302:
2477:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11267              		.loc 1 2477 9 view .LVU3659
 11268 0ba4 40F01E81 		bne	.L915
2478:src/display.c **** 	    else {
 11269              		.loc 1 2478 8 is_stmt 1 view .LVU3660
 11270 0ba8 3246     		mov	r2, r6
 11271 0baa 1FFA88F0 		uxth	r0, r8
 11272 0bae 0121     		movs	r1, #1
 11273 0bb0 FFF7FEFF 		bl	set_exp
 11274              	.LVL1303:
 11275 0bb4 3EE6     		b	.L1121
 11276              	.LVL1304:
 11277              	.L1160:
2478:src/display.c **** 	    else {
 11278              		.loc 1 2478 8 is_stmt 0 view .LVU3661
 11279              	.LBE600:
 11280              	.LBE648:
2830:src/display.c **** 	    j = State2.alpha_pos;
 11281              		.loc 1 2830 6 is_stmt 1 view .LVU3662
2830:src/display.c **** 	    j = State2.alpha_pos;
 11282              		.loc 1 2830 22 is_stmt 0 view .LVU3663
 11283 0bb6 DAF80010 		ldr	r1, [r10]
 11284 0bba 0292     		str	r2, [sp, #8]
2830:src/display.c **** 	    j = State2.alpha_pos;
 11285              		.loc 1 2830 11 view .LVU3664
 11286 0bbc 20A8     		add	r0, sp, #128
 11287              	.LVL1305:
2830:src/display.c **** 	    j = State2.alpha_pos;
 11288              		.loc 1 2830 11 view .LVU3665
 11289 0bbe 01F5F661 		add	r1, r1, #1968
 11290 0bc2 FFF7FEFF 		bl	scopy
 11291              	.LVL1306:
2831:src/display.c **** 	    if (j != 0) {
 11292              		.loc 1 2831 16 view .LVU3666
 11293 0bc6 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11294              	.LVL1307:
2831:src/display.c **** 	    if (j != 0) {
 11295              		.loc 1 2831 6 is_stmt 1 view .LVU3667
2832:src/display.c **** 	      i = slen(buf);
 11296              		.loc 1 2832 6 view .LVU3668
2832:src/display.c **** 	      i = slen(buf);
 11297              		.loc 1 2832 9 is_stmt 0 view .LVU3669
 11298 0bc8 23BB     		cbnz	r3, .L1161
2845:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11299              		.loc 1 2845 8 is_stmt 1 view .LVU3670
ARM GAS  /tmp/ccE2jV6G.s 			page 323


2845:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11300              		.loc 1 2845 11 is_stmt 0 view .LVU3671
 11301 0bca 3EB1     		cbz	r6, .L939
2845:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11302              		.loc 1 2845 31 discriminator 1 view .LVU3672
 11303 0bcc B8F1000F 		cmp	r8, #0
 11304 0bd0 04D1     		bne	.L939
2846:src/display.c **** 		*bp++ = '\0';
 11305              		.loc 1 2846 3 is_stmt 1 view .LVU3673
 11306              	.LVL1308:
2846:src/display.c **** 		*bp++ = '\0';
 11307              		.loc 1 2846 23 is_stmt 0 view .LVU3674
 11308 0bd2 06F11003 		add	r3, r6, #16
 11309              	.LVL1309:
2847:src/display.c **** 	      }
 11310              		.loc 1 2847 9 view .LVU3675
 11311 0bd6 0022     		movs	r2, #0
2846:src/display.c **** 		*bp++ = '\0';
 11312              		.loc 1 2846 9 view .LVU3676
 11313 0bd8 0370     		strb	r3, [r0]
 11314              	.LVL1310:
2847:src/display.c **** 	      }
 11315              		.loc 1 2847 3 is_stmt 1 view .LVU3677
2847:src/display.c **** 	      }
 11316              		.loc 1 2847 9 is_stmt 0 view .LVU3678
 11317 0bda 4270     		strb	r2, [r0, #1]
 11318              	.LVL1311:
 11319              	.L939:
2849:src/display.c **** 	    }
 11320              		.loc 1 2849 8 is_stmt 1 view .LVU3679
 11321 0bdc 20A8     		add	r0, sp, #128
 11322 0bde FFF7FEFF 		bl	set_status_right
 11323              	.LVL1312:
 11324              	.L938:
2851:src/display.c **** 	      bp = buf;
 11325              		.loc 1 2851 6 view .LVU3680
2851:src/display.c **** 	      bp = buf;
 11326              		.loc 1 2851 9 is_stmt 0 view .LVU3681
 11327 0be2 8EB3     		cbz	r6, .L930
2851:src/display.c **** 	      bp = buf;
 11328              		.loc 1 2851 27 discriminator 1 view .LVU3682
 11329 0be4 B8F1000F 		cmp	r8, #0
 11330 0be8 2ED0     		beq	.L930
2852:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11331              		.loc 1 2852 8 is_stmt 1 view .LVU3683
 11332              	.LVL1313:
2853:src/display.c **** 	      *bp++ = '\0';
 11333              		.loc 1 2853 8 view .LVU3684
 11334              	.LBB649:
 11335              	.LBB650:
3500:src/display.c **** 	if (State2.runmode) {
 11336              		.loc 1 3500 5 is_stmt 0 view .LVU3685
 11337 0bea B9F90030 		ldrsh	r3, [r9]
 11338              	.LBE650:
 11339              	.LBE649:
2853:src/display.c **** 	      *bp++ = '\0';
 11340              		.loc 1 2853 28 view .LVU3686
ARM GAS  /tmp/ccE2jV6G.s 			page 324


 11341 0bee 1036     		adds	r6, r6, #16
2854:src/display.c **** 	      set_status_top(buf);
 11342              		.loc 1 2854 14 view .LVU3687
 11343 0bf0 0022     		movs	r2, #0
2853:src/display.c **** 	      *bp++ = '\0';
 11344              		.loc 1 2853 14 view .LVU3688
 11345 0bf2 8DF88060 		strb	r6, [sp, #128]
2854:src/display.c **** 	      set_status_top(buf);
 11346              		.loc 1 2854 8 is_stmt 1 view .LVU3689
 11347              	.LVL1314:
2854:src/display.c **** 	      set_status_top(buf);
 11348              		.loc 1 2854 14 is_stmt 0 view .LVU3690
 11349 0bf6 8DF88120 		strb	r2, [sp, #129]
2855:src/display.c **** 	      no_status_top = 1;
 11350              		.loc 1 2855 8 is_stmt 1 view .LVU3691
 11351              	.LVL1315:
 11352              	.LBB652:
 11353              	.LBI649:
3499:src/display.c **** 	if (no_status_top) return;
 11354              		.loc 1 3499 19 view .LVU3692
 11355              	.LBB651:
3500:src/display.c **** 	if (State2.runmode) {
 11356              		.loc 1 3500 2 view .LVU3693
3500:src/display.c **** 	if (State2.runmode) {
 11357              		.loc 1 3500 5 is_stmt 0 view .LVU3694
 11358 0bfa 13B9     		cbnz	r3, .L940
 11359 0bfc 20A8     		add	r0, sp, #128
 11360              	.LVL1316:
3500:src/display.c **** 	if (State2.runmode) {
 11361              		.loc 1 3500 5 view .LVU3695
 11362 0bfe FFF7FEFF 		bl	set_status_top.part.0
 11363              	.LVL1317:
 11364              	.L940:
3500:src/display.c **** 	if (State2.runmode) {
 11365              		.loc 1 3500 5 view .LVU3696
 11366              	.LBE651:
 11367              	.LBE652:
2856:src/display.c **** 	      //	      annuc = State2.runmode;
 11368              		.loc 1 2856 8 is_stmt 1 view .LVU3697
2856:src/display.c **** 	      //	      annuc = State2.runmode;
 11369              		.loc 1 2856 22 is_stmt 0 view .LVU3698
 11370 0c02 0123     		movs	r3, #1
 11371 0c04 A9F80030 		strh	r3, [r9]	@ movhi
2878:src/display.c ****       nostk:
 11372              		.loc 1 2878 2 is_stmt 1 view .LVU3699
 11373 0c08 FFF7FEFF 		bl	show_stack
 11374              	.LVL1318:
2880:src/display.c **** 	if (!skip) {
 11375              		.loc 1 2880 2 view .LVU3700
 11376 0c0c FFF7FEFF 		bl	show_flags
 11377              	.LVL1319:
2881:src/display.c **** 	  if (State2.runmode) {
 11378              		.loc 1 2881 2 view .LVU3701
 11379 0c10 FFF73CBA 		b	.L856
 11380              	.LVL1320:
 11381              	.L1161:
2833:src/display.c **** 	      j *= 6;
ARM GAS  /tmp/ccE2jV6G.s 			page 325


 11382              		.loc 1 2833 8 view .LVU3702
2833:src/display.c **** 	      j *= 6;
 11383              		.loc 1 2833 12 is_stmt 0 view .LVU3703
 11384 0c14 20A8     		add	r0, sp, #128
 11385              	.LVL1321:
2833:src/display.c **** 	      j *= 6;
 11386              		.loc 1 2833 12 view .LVU3704
 11387 0c16 0393     		str	r3, [sp, #12]
 11388 0c18 FFF7FEFF 		bl	slen
 11389              	.LVL1322:
2834:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11390              		.loc 1 2834 8 is_stmt 1 view .LVU3705
2835:src/display.c **** 		{
 11391              		.loc 1 2835 8 view .LVU3706
2834:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11392              		.loc 1 2834 10 is_stmt 0 view .LVU3707
 11393 0c1c 039B     		ldr	r3, [sp, #12]
 11394 0c1e 03EB4303 		add	r3, r3, r3, lsl #1
2835:src/display.c **** 		{
 11395              		.loc 1 2835 15 view .LVU3708
 11396 0c22 A0EB4300 		sub	r0, r0, r3, lsl #1
 11397              	.LVL1323:
2835:src/display.c **** 		{
 11398              		.loc 1 2835 11 view .LVU3709
 11399 0c26 1328     		cmp	r0, #19
 11400 0c28 14DD     		ble	.L937
2837:src/display.c **** 		  set_status_right(buf);
 11401              		.loc 1 2837 5 is_stmt 1 view .LVU3710
2837:src/display.c **** 		  set_status_right(buf);
 11402              		.loc 1 2837 20 is_stmt 0 view .LVU3711
 11403 0c2a 2AAB     		add	r3, sp, #168
 11404 0c2c 0344     		add	r3, r3, r0
 11405 0c2e 029A     		ldr	r2, [sp, #8]
 11406 0c30 03F8282C 		strb	r2, [r3, #-40]
2838:src/display.c **** 		}
 11407              		.loc 1 2838 5 is_stmt 1 view .LVU3712
 11408 0c34 20A8     		add	r0, sp, #128
 11409 0c36 FFF7FEFF 		bl	set_status_right
 11410              	.LVL1324:
 11411 0c3a D2E7     		b	.L938
 11412              	.LVL1325:
 11413              	.L1164:
 11414              	.LBB653:
 11415              	.LBB654:
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11416              		.loc 1 3318 17 view .LVU3713
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11417              		.loc 1 3318 18 is_stmt 0 view .LVU3714
 11418 0c3c 0136     		adds	r6, r6, #1
 11419              	.LVL1326:
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11420              		.loc 1 3318 12 is_stmt 1 view .LVU3715
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11421              		.loc 1 3318 2 is_stmt 0 view .LVU3716
 11422 0c3e 062E     		cmp	r6, #6
 11423 0c40 40F0B880 		bne	.L931
 11424 0c44 DDE90557 		ldrd	r5, r7, [sp, #20]
ARM GAS  /tmp/ccE2jV6G.s 			page 326


 11425              	.LVL1327:
 11426              	.L930:
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11427              		.loc 1 3318 2 view .LVU3717
 11428              	.LBE654:
 11429              	.LBE653:
2878:src/display.c ****       nostk:
 11430              		.loc 1 2878 2 is_stmt 1 view .LVU3718
 11431 0c48 FFF7FEFF 		bl	show_stack
 11432              	.LVL1328:
2880:src/display.c **** 	if (!skip) {
 11433              		.loc 1 2880 2 view .LVU3719
 11434 0c4c FFF7FEFF 		bl	show_flags
 11435              	.LVL1329:
2881:src/display.c **** 	  if (State2.runmode) {
 11436              		.loc 1 2881 2 view .LVU3720
 11437 0c50 FFF71CBA 		b	.L856
 11438              	.LVL1330:
 11439              	.L937:
2841:src/display.c **** 	      }
 11440              		.loc 1 2841 3 view .LVU3721
 11441 0c54 20A8     		add	r0, sp, #128
 11442 0c56 FFF7FEFF 		bl	set_status
 11443              	.LVL1331:
 11444 0c5a C2E7     		b	.L938
 11445              	.LVL1332:
 11446              	.L1155:
 11447              	.LBB662:
 11448              	.LBB638:
 11449              	.LBB637:
2405:src/display.c **** 	    end = regK_idx;
 11450              		.loc 1 2405 6 view .LVU3722
2406:src/display.c **** 	    start = 3;
 11451              		.loc 1 2406 6 view .LVU3723
2407:src/display.c **** 	    group = 4;
 11452              		.loc 1 2407 6 view .LVU3724
2408:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11453              		.loc 1 2408 6 view .LVU3725
2409:src/display.c **** 	  }
 11454              		.loc 1 2409 6 view .LVU3726
 11455 0c5c 1F48     		ldr	r0, .L1172+36
 11456 0c5e FFF7FEFF 		bl	set_status
 11457              	.LVL1333:
2407:src/display.c **** 	    group = 4;
 11458              		.loc 1 2407 12 is_stmt 0 view .LVU3727
 11459 0c62 4FF0030B 		mov	fp, #3
 11460              	.LVL1334:
2408:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11461              		.loc 1 2408 12 view .LVU3728
 11462 0c66 0423     		movs	r3, #4
2406:src/display.c **** 	    start = 3;
 11463              		.loc 1 2406 10 view .LVU3729
 11464 0c68 4FF06F08 		mov	r8, #111
 11465              	.LVL1335:
2405:src/display.c **** 	    end = regK_idx;
 11466              		.loc 1 2405 11 view .LVU3730
 11467 0c6c 6427     		movs	r7, #100
ARM GAS  /tmp/ccE2jV6G.s 			page 327


 11468              	.LVL1336:
2405:src/display.c **** 	    end = regK_idx;
 11469              		.loc 1 2405 11 view .LVU3731
 11470 0c6e 06E6     		b	.L902
 11471              	.LVL1337:
 11472              	.L1154:
2395:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11473              		.loc 1 2395 6 is_stmt 1 view .LVU3732
2395:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11474              		.loc 1 2395 11 is_stmt 0 view .LVU3733
 11475 0c70 0A26     		movs	r6, #10
 11476 0c72 06FB03F7 		mul	r7, r6, r3
 11477              	.LVL1338:
2396:src/display.c **** 	    p = scopy(buf, "FL ");
 11478              		.loc 1 2396 6 is_stmt 1 view .LVU3734
2396:src/display.c **** 	    p = scopy(buf, "FL ");
 11479              		.loc 1 2396 28 is_stmt 0 view .LVU3735
 11480 0c76 462F     		cmp	r7, #70
2397:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11481              		.loc 1 2397 10 view .LVU3736
 11482 0c78 1949     		ldr	r1, .L1172+40
 11483 0c7a 17A8     		add	r0, sp, #92
 11484              	.LVL1339:
2396:src/display.c **** 	    p = scopy(buf, "FL ");
 11485              		.loc 1 2396 28 view .LVU3737
 11486 0c7c B846     		mov	r8, r7
 11487              	.LVL1340:
2396:src/display.c **** 	    p = scopy(buf, "FL ");
 11488              		.loc 1 2396 28 view .LVU3738
 11489 0c7e A8BF     		it	ge
 11490 0c80 4FF04608 		movge	r8, #70
2397:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11491              		.loc 1 2397 10 view .LVU3739
 11492 0c84 FFF7FEFF 		bl	scopy
 11493              	.LVL1341:
2398:src/display.c **** 	    *p++ = '-';
 11494              		.loc 1 2398 10 view .LVU3740
 11495 0c88 3946     		mov	r1, r7
 11496 0c8a 0222     		movs	r2, #2
 11497 0c8c FFF7FEFF 		bl	num_arg_0
 11498              	.LVL1342:
2396:src/display.c **** 	    p = scopy(buf, "FL ");
 11499              		.loc 1 2396 10 view .LVU3741
 11500 0c90 08F11D08 		add	r8, r8, #29
 11501              	.LVL1343:
2397:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11502              		.loc 1 2397 6 is_stmt 1 view .LVU3742
2398:src/display.c **** 	    *p++ = '-';
 11503              		.loc 1 2398 6 view .LVU3743
2399:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11504              		.loc 1 2399 6 view .LVU3744
2399:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11505              		.loc 1 2399 11 is_stmt 0 view .LVU3745
 11506 0c94 2D23     		movs	r3, #45
 11507 0c96 00F8013B 		strb	r3, [r0], #1
 11508              	.LVL1344:
2400:src/display.c **** 	    *p = '\0';
ARM GAS  /tmp/ccE2jV6G.s 			page 328


 11509              		.loc 1 2400 6 is_stmt 1 view .LVU3746
2400:src/display.c **** 	    *p = '\0';
 11510              		.loc 1 2400 10 is_stmt 0 view .LVU3747
 11511 0c9a 4146     		mov	r1, r8
 11512 0c9c 0222     		movs	r2, #2
 11513 0c9e FFF7FEFF 		bl	num_arg_0
 11514              	.LVL1345:
2400:src/display.c **** 	    *p = '\0';
 11515              		.loc 1 2400 10 view .LVU3748
 11516 0ca2 0246     		mov	r2, r0
 11517              	.LVL1346:
2401:src/display.c **** 	    set_status(buf);
 11518              		.loc 1 2401 6 is_stmt 1 view .LVU3749
2401:src/display.c **** 	    set_status(buf);
 11519              		.loc 1 2401 9 is_stmt 0 view .LVU3750
 11520 0ca4 4FF0000B 		mov	fp, #0
 11521              	.LVL1347:
2402:src/display.c **** 	  }
 11522              		.loc 1 2402 6 view .LVU3751
 11523 0ca8 17A8     		add	r0, sp, #92
 11524              	.LVL1348:
2401:src/display.c **** 	    set_status(buf);
 11525              		.loc 1 2401 9 view .LVU3752
 11526 0caa 82F800B0 		strb	fp, [r2]
2402:src/display.c **** 	  }
 11527              		.loc 1 2402 6 is_stmt 1 view .LVU3753
2391:src/display.c **** 	  int start = 0;
 11528              		.loc 1 2391 8 is_stmt 0 view .LVU3754
 11529 0cae 0196     		str	r6, [sp, #4]
2402:src/display.c **** 	  }
 11530              		.loc 1 2402 6 view .LVU3755
 11531 0cb0 FFF7FEFF 		bl	set_status
 11532              	.LVL1349:
2402:src/display.c **** 	  }
 11533              		.loc 1 2402 6 view .LVU3756
 11534 0cb4 019B     		ldr	r3, [sp, #4]
 11535 0cb6 E2E5     		b	.L902
 11536              	.L1173:
 11537              		.align	2
 11538              	.L1172:
 11539 0cb8 40000000 		.word	.LC28
 11540 0cbc 00000000 		.word	StackBase
 11541 0cc0 00000000 		.word	monfuncs
 11542 0cc4 00000000 		.word	Ctx
 11543 0cc8 A0000000 		.word	.LC38
 11544 0ccc BC000000 		.word	.LC25
 11545 0cd0 00000000 		.word	DispPlot
 11546 0cd4 00000000 		.word	DispMsg
 11547 0cd8 98000000 		.word	.LC37
 11548 0cdc 7C000000 		.word	.LC35
 11549 0ce0 78000000 		.word	.LC34
 11550              	.LVL1350:
 11551              	.L1153:
2402:src/display.c **** 	  }
 11552              		.loc 1 2402 6 view .LVU3757
 11553              	.LBE637:
2374:src/display.c **** 	  if (SizeStatRegs)
ARM GAS  /tmp/ccE2jV6G.s 			page 329


 11554              		.loc 1 2374 4 is_stmt 1 view .LVU3758
2374:src/display.c **** 	  if (SizeStatRegs)
 11555              		.loc 1 2374 8 is_stmt 0 view .LVU3759
 11556 0ce4 17AF     		add	r7, sp, #92
 11557              	.LVL1351:
2374:src/display.c **** 	  if (SizeStatRegs)
 11558              		.loc 1 2374 8 view .LVU3760
 11559 0ce6 4649     		ldr	r1, .L1174
 11560 0ce8 3846     		mov	r0, r7
 11561 0cea FFF7FEFF 		bl	scopy
 11562              	.LVL1352:
2375:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11563              		.loc 1 2375 8 view .LVU3761
 11564 0cee 454A     		ldr	r2, .L1174+4
2375:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11565              		.loc 1 2375 7 view .LVU3762
 11566 0cf0 1268     		ldr	r2, [r2]
2374:src/display.c **** 	  if (SizeStatRegs)
 11567              		.loc 1 2374 8 view .LVU3763
 11568 0cf2 0346     		mov	r3, r0
 11569              	.LVL1353:
2375:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11570              		.loc 1 2375 4 is_stmt 1 view .LVU3764
2375:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11571              		.loc 1 2375 7 is_stmt 0 view .LVU3765
 11572 0cf4 002A     		cmp	r2, #0
 11573 0cf6 3DD1     		bne	.L1162
 11574              	.L899:
2377:src/display.c **** 	  set_status(buf);
 11575              		.loc 1 2377 4 is_stmt 1 view .LVU3766
2377:src/display.c **** 	  set_status(buf);
 11576              		.loc 1 2377 7 is_stmt 0 view .LVU3767
 11577 0cf8 0022     		movs	r2, #0
 11578 0cfa 1A70     		strb	r2, [r3]
2378:src/display.c **** 
 11579              		.loc 1 2378 4 is_stmt 1 view .LVU3768
 11580 0cfc 3846     		mov	r0, r7
 11581              	.LVL1354:
2378:src/display.c **** 
 11582              		.loc 1 2378 4 is_stmt 0 view .LVU3769
 11583 0cfe FFF7FEFF 		bl	set_status
 11584              	.LVL1355:
2381:src/display.c **** 	  if (LocalRegs < 0) {
 11585              		.loc 1 2381 4 is_stmt 1 view .LVU3770
2381:src/display.c **** 	  if (LocalRegs < 0) {
 11586              		.loc 1 2381 8 is_stmt 0 view .LVU3771
 11587 0d02 FFF7FEFF 		bl	global_regs
 11588              	.LVL1356:
 11589 0d06 0146     		mov	r1, r0
 11590 0d08 3846     		mov	r0, r7
 11591 0d0a FFF7FEFF 		bl	num_arg
 11592              	.LVL1357:
2382:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11593              		.loc 1 2382 8 view .LVU3772
 11594 0d0e DAF80020 		ldr	r2, [r10]
2382:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11595              		.loc 1 2382 7 view .LVU3773
ARM GAS  /tmp/ccE2jV6G.s 			page 330


 11596 0d12 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11597 0d16 002A     		cmp	r2, #0
2381:src/display.c **** 	  if (LocalRegs < 0) {
 11598              		.loc 1 2381 8 view .LVU3774
 11599 0d18 0346     		mov	r3, r0
 11600              	.LVL1358:
2382:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11601              		.loc 1 2382 4 is_stmt 1 view .LVU3775
2382:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11602              		.loc 1 2382 7 is_stmt 0 view .LVU3776
 11603 0d1a 1FDB     		blt	.L1163
 11604              	.L900:
2386:src/display.c **** 	  set_digits_string(buf, 0);
 11605              		.loc 1 2386 4 is_stmt 1 view .LVU3777
2386:src/display.c **** 	  set_digits_string(buf, 0);
 11606              		.loc 1 2386 7 is_stmt 0 view .LVU3778
 11607 0d1c 0021     		movs	r1, #0
2387:src/display.c **** 	} else {
 11608              		.loc 1 2387 4 view .LVU3779
 11609 0d1e 3846     		mov	r0, r7
 11610              	.LVL1359:
2386:src/display.c **** 	  set_digits_string(buf, 0);
 11611              		.loc 1 2386 7 view .LVU3780
 11612 0d20 1970     		strb	r1, [r3]
2387:src/display.c **** 	} else {
 11613              		.loc 1 2387 4 is_stmt 1 view .LVU3781
 11614 0d22 FFF7FEFF 		bl	set_digits_string
 11615              	.LVL1360:
2387:src/display.c **** 	} else {
 11616              		.loc 1 2387 4 is_stmt 0 view .LVU3782
 11617 0d26 02E6     		b	.L897
 11618              	.LVL1361:
 11619              	.L1152:
2365:src/display.c **** 	  p = num_arg(buf, free_mem());
 11620              		.loc 1 2365 4 is_stmt 1 view .LVU3783
 11621 0d28 3748     		ldr	r0, .L1174+8
 11622 0d2a FFF7FEFF 		bl	set_status
 11623              	.LVL1362:
2366:src/display.c **** 	  p = scopy(p, " , FL. ");
 11624              		.loc 1 2366 4 view .LVU3784
2366:src/display.c **** 	  p = scopy(p, " , FL. ");
 11625              		.loc 1 2366 21 is_stmt 0 view .LVU3785
 11626 0d2e FFF7FEFF 		bl	free_mem
 11627              	.LVL1363:
 11628 0d32 0146     		mov	r1, r0
2366:src/display.c **** 	  p = scopy(p, " , FL. ");
 11629              		.loc 1 2366 8 view .LVU3786
 11630 0d34 17A8     		add	r0, sp, #92
 11631              	.LVL1364:
2366:src/display.c **** 	  p = scopy(p, " , FL. ");
 11632              		.loc 1 2366 8 view .LVU3787
 11633 0d36 FFF7FEFF 		bl	num_arg
 11634              	.LVL1365:
2367:src/display.c **** 	  p = num_arg(p, free_flash());
 11635              		.loc 1 2367 4 is_stmt 1 view .LVU3788
2367:src/display.c **** 	  p = num_arg(p, free_flash());
 11636              		.loc 1 2367 8 is_stmt 0 view .LVU3789
ARM GAS  /tmp/ccE2jV6G.s 			page 331


 11637 0d3a 3449     		ldr	r1, .L1174+12
 11638 0d3c FFF7FEFF 		bl	scopy
 11639              	.LVL1366:
2367:src/display.c **** 	  p = num_arg(p, free_flash());
 11640              		.loc 1 2367 8 view .LVU3790
 11641 0d40 0646     		mov	r6, r0
 11642              	.LVL1367:
2368:src/display.c **** 	  *p = '\0';
 11643              		.loc 1 2368 4 is_stmt 1 view .LVU3791
2368:src/display.c **** 	  *p = '\0';
 11644              		.loc 1 2368 19 is_stmt 0 view .LVU3792
 11645 0d42 FFF7FEFF 		bl	free_flash
 11646              	.LVL1368:
2368:src/display.c **** 	  *p = '\0';
 11647              		.loc 1 2368 19 view .LVU3793
 11648 0d46 0146     		mov	r1, r0
2368:src/display.c **** 	  *p = '\0';
 11649              		.loc 1 2368 8 view .LVU3794
 11650 0d48 3046     		mov	r0, r6
 11651 0d4a FFF7FEFF 		bl	num_arg
 11652              	.LVL1369:
 11653 0d4e 0346     		mov	r3, r0
 11654              	.LVL1370:
2369:src/display.c **** 	  set_digits_string(buf, 0);
 11655              		.loc 1 2369 4 is_stmt 1 view .LVU3795
2369:src/display.c **** 	  set_digits_string(buf, 0);
 11656              		.loc 1 2369 7 is_stmt 0 view .LVU3796
 11657 0d50 0021     		movs	r1, #0
2370:src/display.c **** 	}
 11658              		.loc 1 2370 4 view .LVU3797
 11659 0d52 17A8     		add	r0, sp, #92
 11660              	.LVL1371:
2369:src/display.c **** 	  set_digits_string(buf, 0);
 11661              		.loc 1 2369 7 view .LVU3798
 11662 0d54 1970     		strb	r1, [r3]
2370:src/display.c **** 	}
 11663              		.loc 1 2370 4 is_stmt 1 view .LVU3799
 11664 0d56 FFF7FEFF 		bl	set_digits_string
 11665              	.LVL1372:
2370:src/display.c **** 	}
 11666              		.loc 1 2370 4 is_stmt 0 view .LVU3800
 11667 0d5a E8E5     		b	.L897
 11668              	.LVL1373:
 11669              	.L1163:
2383:src/display.c **** 	    p = num_arg(p, local_regs());
 11670              		.loc 1 2383 6 is_stmt 1 view .LVU3801
2383:src/display.c **** 	    p = num_arg(p, local_regs());
 11671              		.loc 1 2383 10 is_stmt 0 view .LVU3802
 11672 0d5c 2C49     		ldr	r1, .L1174+16
 11673 0d5e FFF7FEFF 		bl	scopy
 11674              	.LVL1374:
2383:src/display.c **** 	    p = num_arg(p, local_regs());
 11675              		.loc 1 2383 10 view .LVU3803
 11676 0d62 0646     		mov	r6, r0
 11677              	.LVL1375:
2384:src/display.c **** 	  }
 11678              		.loc 1 2384 6 is_stmt 1 view .LVU3804
ARM GAS  /tmp/ccE2jV6G.s 			page 332


2384:src/display.c **** 	  }
 11679              		.loc 1 2384 21 is_stmt 0 view .LVU3805
 11680 0d64 FFF7FEFF 		bl	local_regs
 11681              	.LVL1376:
2384:src/display.c **** 	  }
 11682              		.loc 1 2384 21 view .LVU3806
 11683 0d68 0146     		mov	r1, r0
2384:src/display.c **** 	  }
 11684              		.loc 1 2384 10 view .LVU3807
 11685 0d6a 3046     		mov	r0, r6
 11686 0d6c FFF7FEFF 		bl	num_arg
 11687              	.LVL1377:
 11688 0d70 0346     		mov	r3, r0
 11689              	.LVL1378:
2384:src/display.c **** 	  }
 11690              		.loc 1 2384 10 view .LVU3808
 11691 0d72 D3E7     		b	.L900
 11692              	.L1162:
2376:src/display.c **** 	  *p = '\0';
 11693              		.loc 1 2376 6 is_stmt 1 view .LVU3809
2376:src/display.c **** 	  *p = '\0';
 11694              		.loc 1 2376 10 is_stmt 0 view .LVU3810
 11695 0d74 2749     		ldr	r1, .L1174+20
 11696 0d76 FFF7FEFF 		bl	scopy
 11697              	.LVL1379:
2376:src/display.c **** 	  *p = '\0';
 11698              		.loc 1 2376 10 view .LVU3811
 11699 0d7a 0346     		mov	r3, r0
 11700              	.LVL1380:
2376:src/display.c **** 	  *p = '\0';
 11701              		.loc 1 2376 10 view .LVU3812
 11702 0d7c BCE7     		b	.L899
 11703              	.LVL1381:
 11704              	.L941:
2376:src/display.c **** 	  *p = '\0';
 11705              		.loc 1 2376 10 view .LVU3813
 11706              	.LBE638:
 11707              	.LBE662:
2872:src/display.c **** 	  set_dot(STO_annun);
 11708              		.loc 1 2872 6 is_stmt 1 view .LVU3814
 11709 0d7e 2648     		ldr	r0, .L1174+24
 11710              	.LVL1382:
2872:src/display.c **** 	  set_dot(STO_annun);
 11711              		.loc 1 2872 6 is_stmt 0 view .LVU3815
 11712 0d80 FFF7FEFF 		bl	set_status
 11713              	.LVL1383:
2872:src/display.c **** 	  set_dot(STO_annun);
 11714              		.loc 1 2872 6 view .LVU3816
 11715 0d84 DDE6     		b	.L942
 11716              	.L1159:
2828:src/display.c **** 	  } else if (State2.alphas) {
 11717              		.loc 1 2828 6 is_stmt 1 view .LVU3817
2828:src/display.c **** 	  } else if (State2.alphas) {
 11718              		.loc 1 2828 48 is_stmt 0 view .LVU3818
 11719 0d86 501E     		subs	r0, r2, #1
 11720 0d88 0393     		str	r3, [sp, #12]
 11721 0d8a FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccE2jV6G.s 			page 333


 11722              	.LVL1384:
 11723              	.LBB663:
 11724              	.LBI653:
3304:src/display.c **** 	int glen = *graphic++;
 11725              		.loc 1 3304 19 is_stmt 1 view .LVU3819
 11726              	.LBB661:
3305:src/display.c **** 	int i, j;
 11727              		.loc 1 3305 2 view .LVU3820
3313:src/display.c **** #endif
 11728              		.loc 1 3313 15 is_stmt 0 view .LVU3821
 11729 0d8e 234E     		ldr	r6, .L1174+28
3305:src/display.c **** 	int i, j;
 11730              		.loc 1 3305 6 view .LVU3822
 11731 0d90 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11732              	.LVL1385:
3306:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11733              		.loc 1 3306 2 is_stmt 1 view .LVU3823
3313:src/display.c **** #endif
 11734              		.loc 1 3313 2 view .LVU3824
3313:src/display.c **** #endif
 11735              		.loc 1 3313 15 is_stmt 0 view .LVU3825
 11736 0d92 0122     		movs	r2, #1
 11737 0d94 3270     		strb	r2, [r6]
3315:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11738              		.loc 1 3315 2 is_stmt 1 view .LVU3826
3315:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11739              		.loc 1 3315 5 is_stmt 0 view .LVU3827
 11740 0d96 0029     		cmp	r1, #0
 11741 0d98 3FF456AF 		beq	.L930
3316:src/display.c **** 
 11742              		.loc 1 3316 2 is_stmt 1 view .LVU3828
 11743              	.LVL1386:
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11744              		.loc 1 3318 2 view .LVU3829
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11745              		.loc 1 3318 12 view .LVU3830
 11746 0d9c 8318     		adds	r3, r0, r2
 11747 0d9e 0493     		str	r3, [sp, #16]
 11748 0da0 4A29     		cmp	r1, #74
 11749 0da2 D4BF     		ite	le
 11750 0da4 5B18     		addle	r3, r3, r1
 11751 0da6 4A33     		addgt	r3, r3, #74
 11752 0da8 0293     		str	r3, [sp, #8]
 11753 0daa CDE90557 		strd	r5, r7, [sp, #20]
3318:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11754              		.loc 1 3318 8 is_stmt 0 view .LVU3831
 11755 0dae 039B     		ldr	r3, [sp, #12]
 11756 0db0 0392     		str	r2, [sp, #12]
 11757 0db2 1E46     		mov	r6, r3
 11758              	.LVL1387:
 11759              	.L931:
3319:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11760              		.loc 1 3319 14 is_stmt 1 view .LVU3832
 11761 0db4 039B     		ldr	r3, [sp, #12]
 11762 0db6 049F     		ldr	r7, [sp, #16]
 11763 0db8 03FA06F8 		lsl	r8, r3, r6
 11764 0dbc 06F19405 		add	r5, r6, #148
ARM GAS  /tmp/ccE2jV6G.s 			page 334


 11765 0dc0 07E0     		b	.L934
 11766              	.LVL1388:
 11767              	.L1165:
 11768              	.LBB655:
 11769              	.LBB656:
 337:src/display.c ****   else	clr_dot(n);
 11770              		.loc 1 337 11 is_stmt 0 view .LVU3833
 11771 0dc2 FFF7FEFF 		bl	set_dot
 11772              	.LVL1389:
 11773              	.L933:
 337:src/display.c ****   else	clr_dot(n);
 11774              		.loc 1 337 11 view .LVU3834
 11775              	.LBE656:
 11776              	.LBE655:
3319:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11777              		.loc 1 3319 23 is_stmt 1 view .LVU3835
3319:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11778              		.loc 1 3319 14 view .LVU3836
3319:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11779              		.loc 1 3319 4 is_stmt 0 view .LVU3837
 11780 0dc6 029B     		ldr	r3, [sp, #8]
 11781 0dc8 BB42     		cmp	r3, r7
 11782 0dca 05F10605 		add	r5, r5, #6
 11783 0dce 3FF435AF 		beq	.L1164
 11784              	.LVL1390:
 11785              	.L934:
3324:src/display.c **** #endif
 11786              		.loc 1 3324 6 is_stmt 1 view .LVU3838
 11787              	.LBB659:
 11788              	.LBI655:
 336:src/display.c ****   if (on)	set_dot(n);
 11789              		.loc 1 336 6 view .LVU3839
 11790              	.LBB657:
 337:src/display.c ****   else	clr_dot(n);
 11791              		.loc 1 337 3 view .LVU3840
 337:src/display.c ****   else	clr_dot(n);
 11792              		.loc 1 337 11 view .LVU3841
 338:src/display.c **** }
 11793              		.loc 1 338 8 view .LVU3842
 11794              	.LBE657:
 11795              	.LBE659:
3324:src/display.c **** #endif
 11796              		.loc 1 3324 37 is_stmt 0 view .LVU3843
 11797 0dd2 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11798              	.LVL1391:
 11799              	.LBB660:
 11800              	.LBB658:
 337:src/display.c ****   else	clr_dot(n);
 11801              		.loc 1 337 6 view .LVU3844
 11802 0dd6 13EA080F 		tst	r3, r8
 337:src/display.c ****   else	clr_dot(n);
 11803              		.loc 1 337 11 view .LVU3845
 11804 0dda 2846     		mov	r0, r5
 337:src/display.c ****   else	clr_dot(n);
 11805              		.loc 1 337 6 view .LVU3846
 11806 0ddc F1D1     		bne	.L1165
 338:src/display.c **** }
ARM GAS  /tmp/ccE2jV6G.s 			page 335


 11807              		.loc 1 338 8 view .LVU3847
 11808 0dde FFF7FEFF 		bl	clr_dot
 11809              	.LVL1392:
 11810 0de2 F0E7     		b	.L933
 11811              	.LVL1393:
 11812              	.L915:
 338:src/display.c **** }
 11813              		.loc 1 338 8 view .LVU3848
 11814              	.LBE658:
 11815              	.LBE660:
 11816              	.LBE661:
 11817              	.LBE663:
 11818              	.LBB664:
 11819              	.LBB601:
2480:src/display.c **** #ifndef REALBUILD
 11820              		.loc 1 2480 8 is_stmt 1 view .LVU3849
2480:src/display.c **** #ifndef REALBUILD
 11821              		.loc 1 2480 37 is_stmt 0 view .LVU3850
 11822 0de4 06EB8600 		add	r0, r6, r6, lsl #2
2480:src/display.c **** #ifndef REALBUILD
 11823              		.loc 1 2480 8 view .LVU3851
 11824 0de8 3946     		mov	r1, r7
 11825 0dea 5044     		add	r0, r0, r10
 11826 0dec FFF7FEFF 		bl	set_exp_digits_string
 11827              	.LVL1394:
2482:src/display.c **** #endif
 11828              		.loc 1 2482 8 is_stmt 1 view .LVU3852
 11829 0df0 0B4B     		ldr	r3, .L1174+32
 11830 0df2 0C48     		ldr	r0, .L1174+36
2482:src/display.c **** #endif
 11831              		.loc 1 2482 47 is_stmt 0 view .LVU3853
 11832 0df4 0A21     		movs	r1, #10
2482:src/display.c **** #endif
 11833              		.loc 1 2482 8 view .LVU3854
 11834 0df6 01FB0631 		mla	r1, r1, r6, r3
 11835 0dfa FFF7FEFF 		bl	scopy
 11836              	.LVL1395:
2482:src/display.c **** #endif
 11837              		.loc 1 2482 8 view .LVU3855
 11838              	.LBE601:
 11839              	.LBE664:
2878:src/display.c ****       nostk:
 11840              		.loc 1 2878 2 is_stmt 1 view .LVU3856
 11841 0dfe 19E5     		b	.L1121
 11842              	.L1175:
 11843              		.align	2
 11844              	.L1174:
 11845 0e00 5C000000 		.word	.LC31
 11846 0e04 00000000 		.word	SizeStatRegs
 11847 0e08 4C000000 		.word	.LC29
 11848 0e0c 54000000 		.word	.LC30
 11849 0e10 6C000000 		.word	.LC33
 11850 0e14 64000000 		.word	.LC32
 11851 0e18 A8000000 		.word	.LC39
 11852 0e1c 00000000 		.word	forceDispPlot
 11853 0e20 00000000 		.word	.LANCHOR23
 11854 0e24 00000000 		.word	LastDisplayedNumber
ARM GAS  /tmp/ccE2jV6G.s 			page 336


 11855              		.cfi_endproc
 11856              	.LFE34:
 11858              		.section	.text.frozen_display,"ax",%progbits
 11859              		.align	1
 11860              		.p2align 2,,3
 11861              		.global	frozen_display
 11862              		.syntax unified
 11863              		.thumb
 11864              		.thumb_func
 11865              		.fpu fpv4-sp-d16
 11867              	frozen_display:
 11868              	.LFB35:
3298:src/display.c **** 	State2.disp_freeze = 0;
 11869              		.loc 1 3298 7 view -0
 11870              		.cfi_startproc
 11871              		@ args = 0, pretend = 0, frame = 0
 11872              		@ frame_needed = 0, uses_anonymous_args = 0
3299:src/display.c **** 	display();
 11873              		.loc 1 3299 2 view .LVU3858
3298:src/display.c **** 	State2.disp_freeze = 0;
 11874              		.loc 1 3298 7 is_stmt 0 view .LVU3859
 11875 0000 10B5     		push	{r4, lr}
 11876              		.cfi_def_cfa_offset 8
 11877              		.cfi_offset 4, -8
 11878              		.cfi_offset 14, -4
3299:src/display.c **** 	display();
 11879              		.loc 1 3299 21 view .LVU3860
 11880 0002 064C     		ldr	r4, .L1178
 11881 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11882 0006 6FF30413 		bfc	r3, #4, #1
 11883 000a E375     		strb	r3, [r4, #23]
3300:src/display.c **** 	State2.disp_freeze = 1;
 11884              		.loc 1 3300 2 is_stmt 1 view .LVU3861
 11885 000c FFF7FEFF 		bl	display
 11886              	.LVL1396:
3301:src/display.c ****       }
 11887              		.loc 1 3301 2 view .LVU3862
3301:src/display.c ****       }
 11888              		.loc 1 3301 21 is_stmt 0 view .LVU3863
 11889 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11890 0012 43F01003 		orr	r3, r3, #16
 11891 0016 E375     		strb	r3, [r4, #23]
3302:src/display.c **** 
 11892              		.loc 1 3302 7 view .LVU3864
 11893 0018 10BD     		pop	{r4, pc}
 11894              	.L1179:
 11895 001a 00BF     		.align	2
 11896              	.L1178:
 11897 001c 00000000 		.word	StateWhileOn
 11898              		.cfi_endproc
 11899              	.LFE35:
 11901              		.section	.text.message,"ax",%progbits
 11902              		.align	1
 11903              		.p2align 2,,3
 11904              		.global	message
 11905              		.syntax unified
 11906              		.thumb
ARM GAS  /tmp/ccE2jV6G.s 			page 337


 11907              		.thumb_func
 11908              		.fpu fpv4-sp-d16
 11910              	message:
 11911              	.LVL1397:
 11912              	.LFB45:
3514:src/display.c **** 	State2.disp_freeze = 0;
 11913              		.loc 1 3514 7 is_stmt 1 view -0
 11914              		.cfi_startproc
 11915              		@ args = 0, pretend = 0, frame = 0
 11916              		@ frame_needed = 0, uses_anonymous_args = 0
3515:src/display.c **** 	State2.disp_small = 0;
 11917              		.loc 1 3515 2 view .LVU3866
3516:src/display.c **** 	WasDataEntry = 0;
 11918              		.loc 1 3516 2 view .LVU3867
3516:src/display.c **** 	WasDataEntry = 0;
 11919              		.loc 1 3516 20 is_stmt 0 view .LVU3868
 11920 0000 174A     		ldr	r2, .L1190
3514:src/display.c **** 	State2.disp_freeze = 0;
 11921              		.loc 1 3514 7 view .LVU3869
 11922 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11923              		.cfi_def_cfa_offset 24
 11924              		.cfi_offset 3, -24
 11925              		.cfi_offset 4, -20
 11926              		.cfi_offset 5, -16
 11927              		.cfi_offset 6, -12
 11928              		.cfi_offset 7, -8
 11929              		.cfi_offset 14, -4
3516:src/display.c **** 	WasDataEntry = 0;
 11930              		.loc 1 3516 20 view .LVU3870
 11931 0004 D38A     		ldrh	r3, [r2, #22]
3517:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11932              		.loc 1 3517 15 view .LVU3871
 11933 0006 174E     		ldr	r6, .L1190+4
3516:src/display.c **** 	WasDataEntry = 0;
 11934              		.loc 1 3516 20 view .LVU3872
 11935 0008 23F48453 		bic	r3, r3, #4224
3517:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11936              		.loc 1 3517 15 view .LVU3873
 11937 000c 0027     		movs	r7, #0
3516:src/display.c **** 	WasDataEntry = 0;
 11938              		.loc 1 3516 20 view .LVU3874
 11939 000e D382     		strh	r3, [r2, #22]	@ movhi
3517:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11940              		.loc 1 3517 2 is_stmt 1 view .LVU3875
3518:src/display.c **** 	  // Complete redraw necessary
 11941              		.loc 1 3518 5 is_stmt 0 view .LVU3876
 11942 0010 9B05     		lsls	r3, r3, #22
3514:src/display.c **** 	State2.disp_freeze = 0;
 11943              		.loc 1 3514 7 view .LVU3877
 11944 0012 0546     		mov	r5, r0
 11945 0014 0C46     		mov	r4, r1
3517:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11946              		.loc 1 3517 15 view .LVU3878
 11947 0016 3760     		str	r7, [r6]
3518:src/display.c **** 	  // Complete redraw necessary
 11948              		.loc 1 3518 2 is_stmt 1 view .LVU3879
3518:src/display.c **** 	  // Complete redraw necessary
ARM GAS  /tmp/ccE2jV6G.s 			page 338


 11949              		.loc 1 3518 5 is_stmt 0 view .LVU3880
 11950 0018 12D5     		bpl	.L1181
3518:src/display.c **** 	  // Complete redraw necessary
 11951              		.loc 1 3518 27 discriminator 1 view .LVU3881
 11952 001a D1B1     		cbz	r1, .L1189
 11953              	.L1182:
3525:src/display.c **** 	    ShowRPN = 0;
 11954              		.loc 1 3525 6 is_stmt 1 view .LVU3882
 11955 001c FFF7FEFF 		bl	reset_disp
 11956              	.LVL1398:
3526:src/display.c **** 	    set_annunciators();
 11957              		.loc 1 3526 6 view .LVU3883
3526:src/display.c **** 	    set_annunciators();
 11958              		.loc 1 3526 14 is_stmt 0 view .LVU3884
 11959 0020 114B     		ldr	r3, .L1190+8
 11960 0022 0026     		movs	r6, #0
 11961 0024 1E60     		str	r6, [r3]
3527:src/display.c **** 	    set_digits_string( str2, 0 );
 11962              		.loc 1 3527 6 is_stmt 1 view .LVU3885
 11963 0026 FFF7FEFF 		bl	set_annunciators
 11964              	.LVL1399:
3528:src/display.c **** 	  }
 11965              		.loc 1 3528 6 view .LVU3886
 11966 002a 3146     		mov	r1, r6
 11967 002c 2046     		mov	r0, r4
 11968 002e FFF7FEFF 		bl	set_digits_string
 11969              	.LVL1400:
3530:src/display.c **** 	  finish_display();// message
 11970              		.loc 1 3530 4 view .LVU3887
 11971 0032 2846     		mov	r0, r5
 11972 0034 FFF7FEFF 		bl	set_status
 11973              	.LVL1401:
3531:src/display.c **** 	}
 11974              		.loc 1 3531 4 view .LVU3888
3533:src/display.c **** 
 11975              		.loc 1 3533 7 is_stmt 0 view .LVU3889
 11976 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11977              		.cfi_remember_state
 11978              		.cfi_restore 14
 11979              		.cfi_restore 7
 11980              		.cfi_restore 6
 11981              		.cfi_restore 5
 11982              		.cfi_restore 4
 11983              		.cfi_restore 3
 11984              		.cfi_def_cfa_offset 0
 11985              	.LVL1402:
3531:src/display.c **** 	}
 11986              		.loc 1 3531 4 view .LVU3890
 11987 003c FFF7FEBF 		b	finish_display
 11988              	.LVL1403:
 11989              	.L1181:
 11990              		.cfi_restore_state
3524:src/display.c **** 	    reset_disp();
 11991              		.loc 1 3524 4 is_stmt 1 view .LVU3891
3524:src/display.c **** 	    reset_disp();
 11992              		.loc 1 3524 7 is_stmt 0 view .LVU3892
 11993 0040 0029     		cmp	r1, #0
ARM GAS  /tmp/ccE2jV6G.s 			page 339


 11994 0042 EBD1     		bne	.L1182
3530:src/display.c **** 	  finish_display();// message
 11995              		.loc 1 3530 4 is_stmt 1 view .LVU3893
 11996 0044 2846     		mov	r0, r5
 11997              	.LVL1404:
3530:src/display.c **** 	  finish_display();// message
 11998              		.loc 1 3530 4 is_stmt 0 view .LVU3894
 11999 0046 FFF7FEFF 		bl	set_status
 12000              	.LVL1405:
3531:src/display.c **** 	}
 12001              		.loc 1 3531 4 is_stmt 1 view .LVU3895
3533:src/display.c **** 
 12002              		.loc 1 3533 7 is_stmt 0 view .LVU3896
 12003 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12004              		.cfi_remember_state
 12005              		.cfi_restore 14
 12006              		.cfi_restore 7
 12007              		.cfi_restore 6
 12008              		.cfi_restore 5
 12009              		.cfi_restore 4
 12010              		.cfi_restore 3
 12011              		.cfi_def_cfa_offset 0
 12012              	.LVL1406:
3531:src/display.c **** 	}
 12013              		.loc 1 3531 4 view .LVU3897
 12014 004e FFF7FEBF 		b	finish_display
 12015              	.LVL1407:
 12016              	.L1189:
 12017              		.cfi_restore_state
3520:src/display.c **** 	  display();
 12018              		.loc 1 3520 4 is_stmt 1 view .LVU3898
3520:src/display.c **** 	  display();
 12019              		.loc 1 3520 12 is_stmt 0 view .LVU3899
 12020 0052 064B     		ldr	r3, .L1190+12
 12021 0054 1860     		str	r0, [r3]
3521:src/display.c **** 	}
 12022              		.loc 1 3521 4 is_stmt 1 view .LVU3900
3533:src/display.c **** 
 12023              		.loc 1 3533 7 is_stmt 0 view .LVU3901
 12024 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12025              		.cfi_restore 14
 12026              		.cfi_restore 7
 12027              		.cfi_restore 6
 12028              		.cfi_restore 5
 12029              		.cfi_restore 4
 12030              		.cfi_restore 3
 12031              		.cfi_def_cfa_offset 0
3521:src/display.c **** 	}
 12032              		.loc 1 3521 4 view .LVU3902
 12033 005a FFF7FEBF 		b	display
 12034              	.LVL1408:
 12035              	.L1191:
3521:src/display.c **** 	}
 12036              		.loc 1 3521 4 view .LVU3903
 12037 005e 00BF     		.align	2
 12038              	.L1190:
 12039 0060 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccE2jV6G.s 			page 340


 12040 0064 00000000 		.word	WasDataEntry
 12041 0068 00000000 		.word	ShowRPN
 12042 006c 00000000 		.word	DispMsg
 12043              		.cfi_endproc
 12044              	.LFE45:
 12046              		.section	.text.error_message,"ax",%progbits
 12047              		.align	1
 12048              		.p2align 2,,3
 12049              		.global	error_message
 12050              		.syntax unified
 12051              		.thumb
 12052              		.thumb_func
 12053              		.fpu fpv4-sp-d16
 12055              	error_message:
 12056              	.LVL1409:
 12057              	.LFB1:
 131:src/display.c **** #define MSG1(top) top "\0"
 12058              		.loc 1 131 1 is_stmt 1 view -0
 12059              		.cfi_startproc
 12060              		@ args = 0, pretend = 0, frame = 0
 12061              		@ frame_needed = 0, uses_anonymous_args = 0
 136:src/display.c ****     {
 12062              		.loc 1 136 3 view .LVU3905
 194:src/display.c ****     {
 12063              		.loc 1 194 3 view .LVU3906
 229:src/display.c ****     const char *p = error_table[e];
 12064              		.loc 1 229 3 view .LVU3907
 131:src/display.c **** #define MSG1(top) top "\0"
 12065              		.loc 1 131 1 is_stmt 0 view .LVU3908
 12066 0000 38B5     		push	{r3, r4, r5, lr}
 12067              		.cfi_def_cfa_offset 16
 12068              		.cfi_offset 3, -16
 12069              		.cfi_offset 4, -12
 12070              		.cfi_offset 5, -8
 12071              		.cfi_offset 14, -4
 229:src/display.c ****     const char *p = error_table[e];
 12072              		.loc 1 229 21 view .LVU3909
 12073 0002 1A4B     		ldr	r3, .L1203
 12074 0004 1B68     		ldr	r3, [r3]
 12075 0006 0343     		orrs	r3, r0, r3
 12076 0008 2CD0     		beq	.L1192
 12077              	.LBB665:
 230:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12078              		.loc 1 230 5 is_stmt 1 view .LVU3910
 230:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12079              		.loc 1 230 17 is_stmt 0 view .LVU3911
 12080 000a 194B     		ldr	r3, .L1203+4
 12081 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 12082              	.LVL1410:
 231:src/display.c ****     if (*q == '\0')
 12083              		.loc 1 231 5 is_stmt 1 view .LVU3912
 12084 0010 0446     		mov	r4, r0
 231:src/display.c ****     if (*q == '\0')
 12085              		.loc 1 231 21 is_stmt 0 view .LVU3913
 12086 0012 0021     		movs	r1, #0
 12087 0014 2846     		mov	r0, r5
 12088              	.LVL1411:
ARM GAS  /tmp/ccE2jV6G.s 			page 341


 231:src/display.c ****     if (*q == '\0')
 12089              		.loc 1 231 21 view .LVU3914
 12090 0016 FFF7FEFF 		bl	find_char
 12091              	.LVL1412:
 232:src/display.c ****       q = S7_ERROR;
 12092              		.loc 1 232 5 is_stmt 1 view .LVU3915
 232:src/display.c ****       q = S7_ERROR;
 12093              		.loc 1 232 9 is_stmt 0 view .LVU3916
 12094 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 232:src/display.c ****       q = S7_ERROR;
 12095              		.loc 1 232 8 view .LVU3917
 12096 001c 9BB9     		cbnz	r3, .L1201
 233:src/display.c ****     if (*q == 'X') {
 12097              		.loc 1 233 9 view .LVU3918
 12098 001e 1549     		ldr	r1, .L1203+8
 12099              	.L1194:
 12100              	.LVL1413:
 243:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12101              		.loc 1 243 7 is_stmt 1 view .LVU3919
 12102 0020 2846     		mov	r0, r5
 12103 0022 FFF7FEFF 		bl	message
 12104              	.LVL1414:
 244:src/display.c **** #ifndef REALBUILD
 12105              		.loc 1 244 7 view .LVU3920
 244:src/display.c **** #ifndef REALBUILD
 12106              		.loc 1 244 26 is_stmt 0 view .LVU3921
 12107 0026 144B     		ldr	r3, .L1203+12
 246:src/display.c **** #endif
 12108              		.loc 1 246 7 view .LVU3922
 12109 0028 1449     		ldr	r1, .L1203+16
 244:src/display.c **** #ifndef REALBUILD
 12110              		.loc 1 244 26 view .LVU3923
 12111 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 246:src/display.c **** #endif
 12112              		.loc 1 246 7 view .LVU3924
 12113 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12114 0030 1348     		ldr	r0, .L1203+20
 244:src/display.c **** #ifndef REALBUILD
 12115              		.loc 1 244 31 view .LVU3925
 12116 0032 003C     		subs	r4, r4, #0
 244:src/display.c **** #ifndef REALBUILD
 12117              		.loc 1 244 31 view .LVU3926
 12118 0034 18BF     		it	ne
 12119 0036 0124     		movne	r4, #1
 12120              	.LVL1415:
 244:src/display.c **** #ifndef REALBUILD
 12121              		.loc 1 244 26 view .LVU3927
 12122 0038 64F30412 		bfi	r2, r4, #4, #1
 12123 003c DA75     		strb	r2, [r3, #23]
 246:src/display.c **** #endif
 12124              		.loc 1 246 7 is_stmt 1 view .LVU3928
 12125              	.LBE665:
 271:src/display.c **** 
 12126              		.loc 1 271 1 is_stmt 0 view .LVU3929
 12127 003e BDE83840 		pop	{r3, r4, r5, lr}
 12128              		.cfi_remember_state
 12129              		.cfi_restore 14
ARM GAS  /tmp/ccE2jV6G.s 			page 342


 12130              		.cfi_restore 5
 12131              		.cfi_restore 4
 12132              		.cfi_restore 3
 12133              		.cfi_def_cfa_offset 0
 12134              	.LVL1416:
 12135              	.LBB672:
 246:src/display.c **** #endif
 12136              		.loc 1 246 7 view .LVU3930
 12137 0042 FFF7FEBF 		b	scopy
 12138              	.LVL1417:
 12139              	.L1201:
 12140              		.cfi_restore_state
 234:src/display.c ****       DispMsg = p;
 12141              		.loc 1 234 5 is_stmt 1 view .LVU3931
 234:src/display.c ****       DispMsg = p;
 12142              		.loc 1 234 8 is_stmt 0 view .LVU3932
 12143 0046 582B     		cmp	r3, #88
 12144 0048 0DD1     		bne	.L1202
 235:src/display.c ****       frozen_display();
 12145              		.loc 1 235 7 is_stmt 1 view .LVU3933
 12146              	.LBB666:
 12147              	.LBB667:
3299:src/display.c **** 	display();
 12148              		.loc 1 3299 21 is_stmt 0 view .LVU3934
 12149 004a 0B4C     		ldr	r4, .L1203+12
 12150              	.LVL1418:
3299:src/display.c **** 	display();
 12151              		.loc 1 3299 21 view .LVU3935
 12152              	.LBE667:
 12153              	.LBE666:
 235:src/display.c ****       frozen_display();
 12154              		.loc 1 235 15 view .LVU3936
 12155 004c 0D4A     		ldr	r2, .L1203+24
 12156              	.LBB670:
 12157              	.LBB668:
3299:src/display.c **** 	display();
 12158              		.loc 1 3299 21 view .LVU3937
 12159 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12160              	.LBE668:
 12161              	.LBE670:
 235:src/display.c ****       frozen_display();
 12162              		.loc 1 235 15 view .LVU3938
 12163 0050 1560     		str	r5, [r2]
 236:src/display.c ****     }
 12164              		.loc 1 236 7 is_stmt 1 view .LVU3939
 12165              	.LBB671:
 12166              	.LBI666:
3297:src/display.c ****       {
 12167              		.loc 1 3297 12 view .LVU3940
 12168              	.LBB669:
3299:src/display.c **** 	display();
 12169              		.loc 1 3299 2 view .LVU3941
3299:src/display.c **** 	display();
 12170              		.loc 1 3299 21 is_stmt 0 view .LVU3942
 12171 0052 6FF30413 		bfc	r3, #4, #1
 12172 0056 E375     		strb	r3, [r4, #23]
3300:src/display.c **** 	State2.disp_freeze = 1;
ARM GAS  /tmp/ccE2jV6G.s 			page 343


 12173              		.loc 1 3300 2 is_stmt 1 view .LVU3943
 12174 0058 FFF7FEFF 		bl	display
 12175              	.LVL1419:
3301:src/display.c ****       }
 12176              		.loc 1 3301 2 view .LVU3944
3301:src/display.c ****       }
 12177              		.loc 1 3301 21 is_stmt 0 view .LVU3945
 12178 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12179 005e 43F01003 		orr	r3, r3, #16
 12180 0062 E375     		strb	r3, [r4, #23]
 12181              	.LVL1420:
 12182              	.L1192:
3301:src/display.c ****       }
 12183              		.loc 1 3301 21 view .LVU3946
 12184              	.LBE669:
 12185              	.LBE671:
 12186              	.LBE672:
 271:src/display.c **** 
 12187              		.loc 1 271 1 view .LVU3947
 12188 0064 38BD     		pop	{r3, r4, r5, pc}
 12189              	.LVL1421:
 12190              	.L1202:
 12191              	.LBB673:
 231:src/display.c ****     if (*q == '\0')
 12192              		.loc 1 231 17 view .LVU3948
 12193 0066 411C     		adds	r1, r0, #1
 12194 0068 DAE7     		b	.L1194
 12195              	.L1204:
 12196 006a 00BF     		.align	2
 12197              	.L1203:
 12198 006c 00000000 		.word	Running
 12199 0070 00000000 		.word	.LANCHOR27
 12200 0074 00000000 		.word	.LANCHOR26
 12201 0078 00000000 		.word	StateWhileOn
 12202 007c 00000000 		.word	.LANCHOR28
 12203 0080 00000000 		.word	LastDisplayedNumber
 12204 0084 00000000 		.word	DispMsg
 12205              	.LBE673:
 12206              		.cfi_endproc
 12207              	.LFE1:
 12209              		.section	.rodata.str1.4,"aMS",%progbits,1
 12210              		.align	2
 12211              	.LC41:
 12212 0000 06316306 		.ascii	"\0061c\006\006\000"
 12212      0600
 12213 0006 0000     		.align	2
 12214              	.LC42:
 12215 0008 756E0600 		.ascii	"un\006\000"
 12216              		.align	2
 12217              	.LC43:
 12218 000c 736D00   		.ascii	"sm\000"
 12219              		.set	CSWTCH.326,CSWTCH.324
 12220 000f 00       		.align	2
 12221              	.LC44:
 12222 0010 20502072 		.ascii	" P r o g r a m \000"
 12222      206F2067 
 12222      20722061 
ARM GAS  /tmp/ccE2jV6G.s 			page 344


 12222      206D2000 
 12223              		.align	2
 12224              	.LC45:
 12225 0020 206F2072 		.ascii	" o r   d a t e \000"
 12225      20202064 
 12225      20612074 
 12225      20652000 
 12226              		.align	2
 12227              	.LC46:
 12228 0030 204F2070 		.ascii	" O p - c o d e \000"
 12228      202D2063 
 12228      206F2064 
 12228      20652000 
 12229              		.align	2
 12230              	.LC47:
 12231 0040 204C2061 		.ascii	" L a b e l \000"
 12231      20622065 
 12231      206C2000 
 12232              		.align	2
 12233              	.LC48:
 12234 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12234      20652072 
 12234      20612074 
 12234      2069206F 
 12234      206E2000 
 12235              		.align	2
 12236              	.LC49:
 12237 0060 20462075 		.ascii	" F u l l \000"
 12237      206C206C 
 12237      2000
 12238 006a 0000     		.align	2
 12239              	.LC50:
 12240 006c 2043206C 		.ascii	" C l a s h \000"
 12240      20612073 
 12240      20682000 
 12241              		.align	2
 12242              	.LC51:
 12243 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12243      206F2020 
 12243      2073206D 
 12243      2061206C 
 12243      206C2000 
 12244              		.align	2
 12245              	.LC52:
 12246 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12246      20742061 
 12246      20202070 
 12246      206F2069 
 12246      206E2074 
 12247              		.align	2
 12248              	.LC53:
 12249 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12249      20722061 
 12249      206D2065 
 12249      20742065 
 12249      20722000 
 12250              		.align	2
ARM GAS  /tmp/ccE2jV6G.s 			page 345


 12251              	.LC54:
 12252 00b8 20442061 		.ascii	" D a t a \000"
 12252      20742061 
 12252      2000
 12253 00c2 0000     		.align	2
 12254              	.LC55:
 12255 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12255      206F2074 
 12255      20652063 
 12255      20742065 
 12255      20642000 
 12256              		.align	2
 12257              	.LC56:
 12258 00d8 2046206F 		.ascii	" F o u n d \000"
 12258      2075206E 
 12258      20642000 
 12259              		.align	2
 12260              	.LC57:
 12261 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12261      2073206D 
 12261      20612074 
 12261      20632068 
 12261      2000
 12262 00f6 0000     		.align	2
 12263              	.LC58:
 12264 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12264      20732074 
 12264      2061206C 
 12264      206C2065 
 12264      20642000 
 12265              		.global	DIGITS
 12266              		.comm	IoAnnunciator,4,4
 12267              		.comm	IntMaxWindow,4,4
 12268              		.comm	JustDisplayed,4,4
 12269              		.comm	ShowRPN,4,4
 12270              		.comm	forceDispPlot,1,1
 12271              		.comm	LastDisplayedExponent,5,4
 12272              		.comm	LastDisplayedNumber,26,4
 12273              		.comm	LastDisplayedText,31,4
 12274              		.global	no_status_top
 12275              		.comm	DispPlot,2,2
 12276              		.comm	DispMsg,4,4
 12277              		.global	SvnRevision
 12278              		.section	.rodata
 12279              		.align	2
 12280              		.set	.LANCHOR17,. + 0
 12281              	.LC16:
 12282 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12282      22002E00 
 12282      00
 12283 0009 000000   		.space	3
 12284              	.LC20:
 12285 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12285      332E3306 
 12285      0600
 12286 0016 00000000 		.space	4
 12287 001a 0000     		.space	2
ARM GAS  /tmp/ccE2jV6G.s 			page 346


 12288              	.LC59:
 12289 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12289      696E6700 
 12289      50726F47 
 12289      72614D6D 
 12289      00
 12290 002d 000000   		.space	3
 12291              	.LC60:
 12292 0030 446F6D61 		.ascii	"Domain\000\000"
 12292      696E0000 
 12293              	.LC61:
 12294 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12294      74696D65 
 12294      006F7220 
 12294      64417445 
 12294      00
 12295 0049 000000   		.space	3
 12296              	.LC62:
 12297 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12297      66696E65 
 12297      64004F70 
 12297      2D434F64 
 12297      4500
 12298 005e 0000     		.space	2
 12299              	.LC63:
 12300 0060 2B9F0000 		.ascii	"+\237\000\000"
 12301              	.LC64:
 12302 0064 2D9F0000 		.ascii	"-\237\000\000"
 12303              	.LC65:
 12304 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12304      75636800 
 12304      4C416245 
 12304      4C00
 12305 0076 0000     		.space	2
 12306              	.LC66:
 12307 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12307      67616C00 
 12307      4F504572 
 12307      4174696F 
 12307      6E00
 12308 008a 0000     		.space	2
 12309              	.LC67:
 12310 008c 4F757420 		.ascii	"Out of range\000\000"
 12310      6F662072 
 12310      616E6765 
 12310      0000
 12311 009a 0000     		.space	2
 12312              	.LC68:
 12313 009c 42616420 		.ascii	"Bad digit\000\000"
 12313      64696769 
 12313      740000
 12314 00a7 00       		.space	1
 12315              	.LC69:
 12316 00a8 546F6F20 		.ascii	"Too long\000\000"
 12316      6C6F6E67 
 12316      0000
 12317 00b2 0000     		.space	2
ARM GAS  /tmp/ccE2jV6G.s 			page 347


 12318              	.LC70:
 12319 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12319      69730046 
 12319      754C4C00 
 12320              	.LC71:
 12321 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12321      6B00434C 
 12321      41534800 
 12322              	.LC72:
 12323 00cc 42616420 		.ascii	"Bad mode\000\000"
 12323      6D6F6465 
 12323      0000
 12324 00d6 0000     		.space	2
 12325              	.LC73:
 12326 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12326      06060673 
 12326      697A6500 
 12326      746F6F20 
 12326      534D6D41 
 12327 00ef 00       		.space	1
 12328              	.LC74:
 12329 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12329      66657700 
 12329      64417441 
 12329      20506F69 
 12329      6E745300 
 12330              	.LC75:
 12331 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12331      6C696400 
 12331      50617261 
 12331      4D6D4574 
 12331      457200
 12332 0117 00       		.space	1
 12333              	.LC76:
 12334 0118 492F4F00 		.ascii	"I/O\000\000"
 12334      00
 12335 011d 000000   		.space	3
 12336              	.LC77:
 12337 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12337      6C696400 
 12337      64417441 
 12337      00
 12338 012d 000000   		.space	3
 12339              	.LC78:
 12340 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12340      65005072 
 12340      6F744563 
 12340      74456400 
 12341              	.LC79:
 12342 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12342      6F6F7400 
 12342      466F756E 
 12342      6400
 12343 014e 0000     		.space	2
 12344              	.LC80:
 12345 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12345      6978004D 
ARM GAS  /tmp/ccE2jV6G.s 			page 348


 12345      6D49534D 
 12345      6D417443 
 12345      4800
 12346 0162 0000     		.space	2
 12347              	.LC81:
 12348 0164 53696E67 		.ascii	"Singular\000\000"
 12348      756C6172 
 12348      0000
 12349 016e 0000     		.space	2
 12350              	.LC82:
 12351 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12351      68206973 
 12351      0046754C 
 12351      4C00
 12352 017e 0000     		.space	2
 12353              	.LC83:
 12354 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12354      72797374 
 12354      616C0049 
 12354      6E537461 
 12354      4C4C4564 
 12355 0195 000000   		.space	3
 12356              	.LC84:
 12357 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12357      5800
 12358              		.section	.bss.DecimalMode,"aw",%nobits
 12359              		.set	.LANCHOR1,. + 0
 12362              	DecimalMode:
 12363 0000 00       		.space	1
 12364              		.section	.bss.SeparatorMode,"aw",%nobits
 12365              		.set	.LANCHOR0,. + 0
 12368              	SeparatorMode:
 12369 0000 00       		.space	1
 12370              		.section	.bss.no_status_top,"aw",%nobits
 12371              		.align	1
 12372              		.set	.LANCHOR18,. + 0
 12375              	no_status_top:
 12376 0000 0000     		.space	2
 12377              		.section	.rodata.CSWTCH.324,"a"
 12378              		.align	2
 12379              		.set	.LANCHOR11,. + 0
 12382              	CSWTCH.324:
 12383 0000 02000000 		.word	2
 12384 0004 08000000 		.word	8
 12385 0008 0A000000 		.word	10
 12386 000c 10000000 		.word	16
 12387              		.section	.rodata.CSWTCH.350,"a"
 12388              		.align	2
 12389              		.set	.LANCHOR16,. + 0
 12392              	CSWTCH.350:
 12393 0000 00000000 		.word	.LC41
 12394 0004 08000000 		.word	.LC42
 12395 0008 0C000000 		.word	.LC43
 12396              		.section	.rodata.DIGITS,"a"
 12397              		.align	2
 12398              		.set	.LANCHOR12,. + 0
 12401              	DIGITS:
ARM GAS  /tmp/ccE2jV6G.s 			page 349


 12402 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12402      34353637 
 12402      38394142 
 12402      43444546 
 12402      00
 12403              		.section	.rodata.S7_ERROR,"a"
 12404              		.align	2
 12405              		.set	.LANCHOR26,. + 0
 12408              	S7_ERROR:
 12409 0000 4572726F 		.ascii	"Error\000"
 12409      7200
 12410              		.section	.rodata.S7_INF,"a"
 12411              		.align	2
 12412              		.set	.LANCHOR5,. + 0
 12415              	S7_INF:
 12416 0000 496E6669 		.ascii	"Infinity\000"
 12416      6E697479 
 12416      00
 12417              		.section	.rodata.S7_INF_Text,"a"
 12418              		.align	2
 12419              		.set	.LANCHOR7,. + 0
 12422              	S7_INF_Text:
 12423 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12423      20662069 
 12423      206E2069 
 12423      20742079 
 12423      2000
 12424              		.section	.rodata.S7_NEG_INF_Text,"a"
 12425              		.align	2
 12426              		.set	.LANCHOR6,. + 0
 12429              	S7_NEG_INF_Text:
 12430 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12430      20662069 
 12430      206E2069 
 12430      20742079 
 12430      2000
 12431              		.section	.rodata.S7_NaN,"a"
 12432              		.align	2
 12433              		.set	.LANCHOR3,. + 0
 12436              	S7_NaN:
 12437 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12437      6E754D6D 
 12437      45726963 
 12437      00
 12438              		.section	.rodata.S7_NaN_Text,"a"
 12439              		.align	2
 12440              		.set	.LANCHOR4,. + 0
 12443              	S7_NaN_Text:
 12444 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12444      20742020 
 12444      206E2075 
 12444      206D2065 
 12444      20722069 
 12445              		.section	.rodata.S7_STEP,"a"
 12446              		.align	2
 12447              		.set	.LANCHOR25,. + 0
 12450              	S7_STEP:
ARM GAS  /tmp/ccE2jV6G.s 			page 350


 12451 0000 53744550 		.ascii	"StEP \000"
 12451      2000
 12452              		.section	.rodata.S7_STEP_ShortText,"a"
 12453              		.align	2
 12454              		.set	.LANCHOR19,. + 0
 12457              	S7_STEP_ShortText:
 12458 0000 53544550 		.ascii	"STEP\000"
 12458      00
 12459              		.section	.rodata.S7_fract_EQ,"a"
 12460              		.align	2
 12461              		.set	.LANCHOR9,. + 0
 12464              	S7_fract_EQ:
 12465 0000 203D2000 		.ascii	" = \000"
 12466              		.section	.rodata.S7_fract_GT,"a"
 12467              		.align	2
 12468              		.set	.LANCHOR10,. + 0
 12471              	S7_fract_GT:
 12472 0000 20477400 		.ascii	" Gt\000"
 12473              		.section	.rodata.S7_fract_LT,"a"
 12474              		.align	2
 12475              		.set	.LANCHOR8,. + 0
 12478              	S7_fract_LT:
 12479 0000 204C7400 		.ascii	" Lt\000"
 12480              		.section	.rodata.S_SURE,"a"
 12481              		.align	2
 12482              		.set	.LANCHOR21,. + 0
 12485              	S_SURE:
 12486 0000 53757265 		.ascii	"Sure?\000"
 12486      3F00
 12487              		.section	.rodata.SvnRevision,"a"
 12488              		.align	2
 12489              		.set	.LANCHOR20,. + 0
 12492              	SvnRevision:
 12493 0000 30202020 		.ascii	"0   "
 12494              		.section	.rodata.digtbl,"a"
 12495              		.align	2
 12496              		.set	.LANCHOR2,. + 0
 12499              	digtbl:
 12500 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12500      02421252 
 12500      2D000000 
 12500      00000000 
 12500      00
 12501 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12501      00000017 
 12501      01000000 
 12501      00
 12502 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12502      28000000 
 12502      0020664B 
 12502      00000010 
 12503 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12503      5E5B3973 
 12503      77497F7B 
 12503      00000612 
 12503      0300787D 
 12504 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
ARM GAS  /tmp/ccE2jV6G.s 			page 351


 12504      673D240F 
 12504      75266C6D 
 12504      6F7C7914 
 12504      73362F00 
 12505 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12505      161F7674 
 12505      6735040F 
 12505      75266915 
 12505      177C7914 
 12506 0076 000F003B 		.ascii	"\000\017\000;"
 12507              		.section	.rodata.error_table.8493,"a"
 12508              		.align	2
 12509              		.set	.LANCHOR27,. + 0
 12512              	error_table.8493:
 12513 0000 1C000000 		.word	.LC59
 12514 0004 30000000 		.word	.LC60
 12515 0008 38000000 		.word	.LC61
 12516 000c 4C000000 		.word	.LC62
 12517 0010 60000000 		.word	.LC63
 12518 0014 64000000 		.word	.LC64
 12519 0018 68000000 		.word	.LC65
 12520 001c 78000000 		.word	.LC66
 12521 0020 8C000000 		.word	.LC67
 12522 0024 9C000000 		.word	.LC68
 12523 0028 A8000000 		.word	.LC69
 12524 002c B4000000 		.word	.LC70
 12525 0030 C0000000 		.word	.LC71
 12526 0034 CC000000 		.word	.LC72
 12527 0038 D8000000 		.word	.LC73
 12528 003c F0000000 		.word	.LC74
 12529 0040 04010000 		.word	.LC75
 12530 0044 18010000 		.word	.LC76
 12531 0048 20010000 		.word	.LC77
 12532 004c 30010000 		.word	.LC78
 12533 0050 40010000 		.word	.LC79
 12534 0054 50010000 		.word	.LC80
 12535 0058 64010000 		.word	.LC81
 12536 005c 70010000 		.word	.LC82
 12537 0060 80010000 		.word	.LC83
 12538 0064 98010000 		.word	.LC84
 12539              		.section	.rodata.error_table_text.8494,"a"
 12540              		.align	2
 12541              		.set	.LANCHOR28,. + 0
 12544              	error_table_text.8494:
 12545 0000 10000000 		.word	.LC44
 12546 0004 A8000000 		.word	.LC39
 12547 0008 20000000 		.word	.LC45
 12548 000c 30000000 		.word	.LC46
 12549 0010 A8000000 		.word	.LC39
 12550 0014 A8000000 		.word	.LC39
 12551 0018 40000000 		.word	.LC47
 12552 001c 4C000000 		.word	.LC48
 12553 0020 A8000000 		.word	.LC39
 12554 0024 A8000000 		.word	.LC39
 12555 0028 A8000000 		.word	.LC39
 12556 002c 60000000 		.word	.LC49
 12557 0030 6C000000 		.word	.LC50
ARM GAS  /tmp/ccE2jV6G.s 			page 352


 12558 0034 A8000000 		.word	.LC39
 12559 0038 78000000 		.word	.LC51
 12560 003c 8C000000 		.word	.LC52
 12561 0040 A4000000 		.word	.LC53
 12562 0044 A8000000 		.word	.LC39
 12563 0048 B8000000 		.word	.LC54
 12564 004c C4000000 		.word	.LC55
 12565 0050 D8000000 		.word	.LC56
 12566 0054 E4000000 		.word	.LC57
 12567 0058 A8000000 		.word	.LC39
 12568 005c 60000000 		.word	.LC49
 12569 0060 F8000000 		.word	.LC58
 12570 0064 A8000000 		.word	.LC39
 12571              		.section	.rodata.libname,"a"
 12572              		.align	2
 12573              		.set	.LANCHOR22,. + 0
 12576              	libname:
 12577 0000 72414D6D 		.ascii	"rAMm\000"
 12577      00
 12578 0005 4C696220 		.ascii	"Lib \000"
 12578      00
 12579 000a 42757020 		.ascii	"Bup \000"
 12579      00
 12580 000f 726F4D6D 		.ascii	"roMm\000"
 12580      00
 12581              		.section	.rodata.libname_shorttext,"a"
 12582              		.align	2
 12583              		.set	.LANCHOR24,. + 0
 12586              	libname_shorttext:
 12587 0000 52616D00 		.ascii	"Ram\000"
 12588 0004 00       		.space	1
 12589 0005 4C696200 		.ascii	"Lib\000"
 12590 0009 00       		.space	1
 12591 000a 42757000 		.ascii	"Bup\000"
 12592 000e 00       		.space	1
 12593 000f 526F6D00 		.ascii	"Rom\000"
 12594 0013 00       		.space	1
 12595              		.section	.rodata.libname_text,"a"
 12596              		.align	2
 12597              		.set	.LANCHOR23,. + 0
 12600              	libname_text:
 12601 0000 20522061 		.ascii	" R a m \000"
 12601      206D2000 
 12602 0008 0000     		.space	2
 12603 000a 204C2069 		.ascii	" L i b \000"
 12603      20622000 
 12604 0012 0000     		.space	2
 12605 0014 20422075 		.ascii	" B u p \000"
 12605      20702000 
 12606 001c 0000     		.space	2
 12607 001e 2052206F 		.ascii	" R o m \000"
 12607      206D2000 
 12608 0026 0000     		.space	2
 12609              		.section	.rodata.shift_chars.8592,"a"
 12610              		.align	2
 12611              		.set	.LANCHOR15,. + 0
 12614              	shift_chars.8592:
ARM GAS  /tmp/ccE2jV6G.s 			page 353


 12615 0000 20111213 		.ascii	" \021\022\023"
 12616              		.section	.rodata.small_dots.8787,"a"
 12617              		.align	2
 12618              		.set	.LANCHOR14,. + 0
 12621              	small_dots.8787:
 12622 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12622      07E12C06 
 12622      07E12C06 
 12622      06
 12623              		.section	.rodata.small_minus.8786,"a"
 12624              		.align	2
 12625              		.set	.LANCHOR13,. + 0
 12628              	small_minus.8786:
 12629 0000 07C22D06 		.ascii	"\007\302-\006"
 12630              		.text
 12631              	.Letext0:
 12632              		.file 2 "src/decNumber/decContext.h"
 12633              		.file 3 "src/decNumber/decNumber.h"
 12634              		.file 4 "src/decNumber/decimal64.h"
 12635              		.file 5 "src/decNumber/decimal128.h"
 12636              		.file 6 "src/xeq.h"
 12637              		.file 7 "src/data.h"
 12638              		.file 8 "src/storage.h"
 12639              		.file 9 "src/display.h"
 12640              		.file 10 "src/consts.h"
 12641              		.file 11 "src/stats.h"
 12642              		.file 12 "src/revision.h"
 12643              		.file 13 "src/charset7.h"
 12644              		.file 14 "src/lcd.h"
 12645              		.file 15 "src/decn.h"
 12646              		.file 16 "src/alpha.h"
 12647              		.file 17 "src/int.h"
ARM GAS  /tmp/ccE2jV6G.s 			page 354


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccE2jV6G.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccE2jV6G.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccE2jV6G.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccE2jV6G.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccE2jV6G.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccE2jV6G.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccE2jV6G.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccE2jV6G.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccE2jV6G.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccE2jV6G.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccE2jV6G.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccE2jV6G.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccE2jV6G.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccE2jV6G.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccE2jV6G.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccE2jV6G.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccE2jV6G.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccE2jV6G.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccE2jV6G.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/ccE2jV6G.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/ccE2jV6G.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/ccE2jV6G.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccE2jV6G.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccE2jV6G.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccE2jV6G.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/ccE2jV6G.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccE2jV6G.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/ccE2jV6G.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/ccE2jV6G.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccE2jV6G.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccE2jV6G.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccE2jV6G.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccE2jV6G.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccE2jV6G.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/ccE2jV6G.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccE2jV6G.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccE2jV6G.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/ccE2jV6G.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccE2jV6G.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/ccE2jV6G.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccE2jV6G.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccE2jV6G.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/ccE2jV6G.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccE2jV6G.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/ccE2jV6G.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/ccE2jV6G.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccE2jV6G.s:3755   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.324:0000000000000000 CSWTCH.326
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccE2jV6G.s:3767   .text.set_int_x:0000000000000360 $t
     /tmp/ccE2jV6G.s:3874   .text.set_int_x:00000000000003c0 $d
ARM GAS  /tmp/ccE2jV6G.s 			page 355


     /tmp/ccE2jV6G.s:3881   .text.set_annunciators:0000000000000000 $t
     /tmp/ccE2jV6G.s:3888   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccE2jV6G.s:4261   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccE2jV6G.s:4273   .text.getdig:0000000000000000 $t
     /tmp/ccE2jV6G.s:4281   .text.getdig:0000000000000000 getdig
     /tmp/ccE2jV6G.s:4301   .text.getdig:0000000000000008 $d
     /tmp/ccE2jV6G.s:4306   .text.dot:0000000000000000 $t
     /tmp/ccE2jV6G.s:4314   .text.dot:0000000000000000 dot
     /tmp/ccE2jV6G.s:4337   .text.std_round_fix:0000000000000000 $t
     /tmp/ccE2jV6G.s:4345   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccE2jV6G.s:4427   .text.std_round_fix:000000000000004c $d
     /tmp/ccE2jV6G.s:4433   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccE2jV6G.s:4441   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccE2jV6G.s:4501   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccE2jV6G.s:4508   .text.pixel_length:0000000000000000 $t
     /tmp/ccE2jV6G.s:4516   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccE2jV6G.s:4607   .text.set_status:0000000000000000 $t
     /tmp/ccE2jV6G.s:4614   .text.set_status:0000000000000000 set_status
     /tmp/ccE2jV6G.s:4687   .text.set_status:0000000000000038 $d
     /tmp/ccE2jV6G.s:4692   .text.set_x_dn:0000000000000000 $t
     /tmp/ccE2jV6G.s:4700   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccE2jV6G.s:5468   .text.set_x_dn:0000000000000328 $d
     /tmp/ccE2jV6G.s:5477   .text.set_x_dn:000000000000033c $t
     /tmp/ccE2jV6G.s:5596   .text.set_x_dn:00000000000003dc $d
     /tmp/ccE2jV6G.s:5602   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccE2jV6G.s:5629   .text.set_x_dn:000000000000041c $d
     /tmp/ccE2jV6G.s:5635   .text.set_x_dn:0000000000000426 $t
     /tmp/ccE2jV6G.s:6140   .text.set_x_dn:0000000000000644 $d
     /tmp/ccE2jV6G.s:6156   .text.set_x_dn:0000000000000660 $t
     /tmp/ccE2jV6G.s:6870   .text.set_x_dn:0000000000000950 $d
     /tmp/ccE2jV6G.s:6879   .text.set_x:0000000000000000 $t
     /tmp/ccE2jV6G.s:6886   .text.set_x:0000000000000000 set_x
     /tmp/ccE2jV6G.s:6954   .text.format_reg:0000000000000000 $t
     /tmp/ccE2jV6G.s:6962   .text.format_reg:0000000000000000 format_reg
     /tmp/ccE2jV6G.s:7081   .text.format_reg:0000000000000064 $d
     /tmp/ccE2jV6G.s:7087   .text.set_status_right:0000000000000000 $t
     /tmp/ccE2jV6G.s:7094   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccE2jV6G.s:7238   .text.set_status_right:000000000000006c $d
     /tmp/ccE2jV6G.s:7243   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccE2jV6G.s:7250   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccE2jV6G.s:7375   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccE2jV6G.s:7380   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccE2jV6G.s:7423   .text.annunciators:0000000000000000 $t
     /tmp/ccE2jV6G.s:7430   .text.annunciators:0000000000000000 annunciators
     /tmp/ccE2jV6G.s:8125   .text.annunciators:000000000000032c $d
     /tmp/ccE2jV6G.s:8145   .text.annunciators:000000000000036c $t
     /tmp/ccE2jV6G.s:8450   .text.annunciators:00000000000004a8 $d
     /tmp/ccE2jV6G.s:8466   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccE2jV6G.s:8533   .text.display:0000000000000000 $t
     /tmp/ccE2jV6G.s:8541   .text.display:0000000000000000 display
     /tmp/ccE2jV6G.s:9202   .text.display:0000000000000300 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccE2jV6G.s:9221   .text.display:0000000000000338 $t
     /tmp/ccE2jV6G.s:9868   .text.display:00000000000005f8 $d
ARM GAS  /tmp/ccE2jV6G.s 			page 356


     /tmp/ccE2jV6G.s:9893   .text.display:0000000000000650 $t
     /tmp/ccE2jV6G.s:10805  .text.display:000000000000099c $d
     /tmp/ccE2jV6G.s:10823  .text.display:00000000000009cc $t
     /tmp/ccE2jV6G.s:11539  .text.display:0000000000000cb8 $d
     /tmp/ccE2jV6G.s:11556  .text.display:0000000000000ce4 $t
     /tmp/ccE2jV6G.s:11845  .text.display:0000000000000e00 $d
     /tmp/ccE2jV6G.s:11859  .text.frozen_display:0000000000000000 $t
     /tmp/ccE2jV6G.s:11867  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccE2jV6G.s:11897  .text.frozen_display:000000000000001c $d
     /tmp/ccE2jV6G.s:11902  .text.message:0000000000000000 $t
     /tmp/ccE2jV6G.s:11910  .text.message:0000000000000000 message
     /tmp/ccE2jV6G.s:12039  .text.message:0000000000000060 $d
     /tmp/ccE2jV6G.s:12047  .text.error_message:0000000000000000 $t
     /tmp/ccE2jV6G.s:12055  .text.error_message:0000000000000000 error_message
     /tmp/ccE2jV6G.s:12198  .text.error_message:000000000000006c $d
     /tmp/ccE2jV6G.s:12210  .rodata.str1.4:0000000000000000 $d
     /tmp/ccE2jV6G.s:12382  .rodata.CSWTCH.324:0000000000000000 CSWTCH.324
     /tmp/ccE2jV6G.s:12401  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccE2jV6G.s:12375  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccE2jV6G.s:12492  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccE2jV6G.s:12279  .rodata:0000000000000000 $d
     /tmp/ccE2jV6G.s:12362  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccE2jV6G.s:12363  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccE2jV6G.s:12368  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccE2jV6G.s:12369  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccE2jV6G.s:12371  .bss.no_status_top:0000000000000000 $d
     /tmp/ccE2jV6G.s:12378  .rodata.CSWTCH.324:0000000000000000 $d
     /tmp/ccE2jV6G.s:12388  .rodata.CSWTCH.350:0000000000000000 $d
     /tmp/ccE2jV6G.s:12392  .rodata.CSWTCH.350:0000000000000000 CSWTCH.350
     /tmp/ccE2jV6G.s:12397  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccE2jV6G.s:12404  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccE2jV6G.s:12408  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccE2jV6G.s:12411  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccE2jV6G.s:12415  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccE2jV6G.s:12418  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccE2jV6G.s:12422  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccE2jV6G.s:12425  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccE2jV6G.s:12429  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccE2jV6G.s:12432  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccE2jV6G.s:12436  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccE2jV6G.s:12439  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccE2jV6G.s:12443  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccE2jV6G.s:12446  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccE2jV6G.s:12450  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccE2jV6G.s:12453  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccE2jV6G.s:12457  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccE2jV6G.s:12460  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccE2jV6G.s:12464  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccE2jV6G.s:12467  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccE2jV6G.s:12471  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccE2jV6G.s:12474  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccE2jV6G.s:12478  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccE2jV6G.s:12481  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccE2jV6G.s:12485  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccE2jV6G.s:12488  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccE2jV6G.s:12495  .rodata.digtbl:0000000000000000 $d
ARM GAS  /tmp/ccE2jV6G.s 			page 357


     /tmp/ccE2jV6G.s:12499  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccE2jV6G.s:12508  .rodata.error_table.8493:0000000000000000 $d
     /tmp/ccE2jV6G.s:12512  .rodata.error_table.8493:0000000000000000 error_table.8493
     /tmp/ccE2jV6G.s:12540  .rodata.error_table_text.8494:0000000000000000 $d
     /tmp/ccE2jV6G.s:12544  .rodata.error_table_text.8494:0000000000000000 error_table_text.8494
     /tmp/ccE2jV6G.s:12572  .rodata.libname:0000000000000000 $d
     /tmp/ccE2jV6G.s:12576  .rodata.libname:0000000000000000 libname
     /tmp/ccE2jV6G.s:12582  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccE2jV6G.s:12586  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccE2jV6G.s:12596  .rodata.libname_text:0000000000000000 $d
     /tmp/ccE2jV6G.s:12600  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccE2jV6G.s:12610  .rodata.shift_chars.8592:0000000000000000 $d
     /tmp/ccE2jV6G.s:12614  .rodata.shift_chars.8592:0000000000000000 shift_chars.8592
     /tmp/ccE2jV6G.s:12617  .rodata.small_dots.8787:0000000000000000 $d
     /tmp/ccE2jV6G.s:12621  .rodata.small_dots.8787:0000000000000000 small_dots.8787
     /tmp/ccE2jV6G.s:12624  .rodata.small_minus.8786:0000000000000000 $d
     /tmp/ccE2jV6G.s:12628  .rodata.small_minus.8786:0000000000000000 small_minus.8786

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
ARM GAS  /tmp/ccE2jV6G.s 			page 358


__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
get_const
getprog
prt
find_label_from
multicmds
alpha_rcl_s
copyreg
sigma_val
getX
packed_from_number
set_NaN
do_conv
findmultilbl
slen
StackBase
ARM GAS  /tmp/ccE2jV6G.s 			page 359


monfuncs
global_regs
free_mem
free_flash
local_regs
SizeStatRegs

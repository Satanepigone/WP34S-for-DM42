ARM GAS  /tmp/ccQmbpxO.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccQmbpxO.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status(const char *);
  38:src/display.c **** static void set_status_right(const char *);
  39:src/display.c **** static void set_status_graphic(const unsigned char *);
  40:src/display.c **** 
  41:src/display.c **** const char *DispMsg;	   // What to display in message area
  42:src/display.c **** short int DispPlot;
  43:src/display.c **** #ifndef REALBUILD
  44:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  45:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  46:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  47:src/display.c **** char forceDispPlot;
  48:src/display.c **** #endif
  49:src/display.c **** 
  50:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  51:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  52:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  53:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  54:src/display.c **** 
  55:src/display.c **** /* Message strings
  56:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  57:src/display.c ****  * are for the upper dot matrix line.
  58:src/display.c ****  */
  59:src/display.c **** static const char S_SURE[] = "Sure?";
  60:src/display.c **** 
  61:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  62:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  63:src/display.c **** #ifndef REALBUILD
  64:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  65:src/display.c **** #endif
  66:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  67:src/display.c **** #ifndef REALBUILD
  68:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  69:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  70:src/display.c **** #endif
  71:src/display.c **** 
  72:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  73:src/display.c **** #ifndef REALBUILD
  74:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  75:src/display.c **** #endif
  76:src/display.c **** 
  77:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  78:src/display.c **** static const char S7_fract_LT[] = " Lt";
  79:src/display.c **** static const char S7_fract_GT[] = " Gt";
  80:src/display.c **** 
  81:src/display.c **** static const char libname[][5] = {
  82:src/display.c **** 	"rAMm", "Lib ", "Bup ",
  83:src/display.c **** #ifndef REALBUILD
  84:src/display.c **** 	"roMm"
  85:src/display.c **** #endif
  86:src/display.c **** };
  87:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 3


  88:src/display.c **** #ifndef REALBUILD
  89:src/display.c **** static const char libname_text[][10] = {
  90:src/display.c **** 	" R a m ", " L i b ", " B u p ",	" R o m "
  91:src/display.c **** };
  92:src/display.c **** static const char libname_shorttext[][5] = {
  93:src/display.c **** 	"Ram", "Lib", "Bup", "Rom"
  94:src/display.c **** };
  95:src/display.c **** #endif
  96:src/display.c **** 
  97:src/display.c **** 
  98:src/display.c **** /* Set the separator and decimal mode globals
  99:src/display.c ****  */
 100:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 100 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 101:src/display.c **** 	// Separators used by various modes
 102:src/display.c **** 	if (UState.fraccomma) {
  34              		.loc 1 102 2 view .LVU1
  35              		.loc 1 102 6 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  37              		.loc 1 103 17 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 102:src/display.c **** 		SeparatorMode = SEP_DOT;
  39              		.loc 1 102 6 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 102:src/display.c **** 		SeparatorMode = SEP_DOT;
  42              		.loc 1 102 5 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 100:src/display.c **** 	// Separators used by various modes
  44              		.loc 1 100 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 102:src/display.c **** 		SeparatorMode = SEP_DOT;
  49              		.loc 1 102 5 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 103 3 is_stmt 1 view .LVU8
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 104 15 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 105:src/display.c **** 	}
 106:src/display.c **** 	else {
 107:src/display.c **** 		SeparatorMode = SEP_COMMA;
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 109:src/display.c **** 	}
 110:src/display.c **** 	if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 110 7 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 104 15 view .LVU11
  57 0018 0124     		movs	r4, #1
ARM GAS  /tmp/ccQmbpxO.s 			page 4


 103:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 103 17 view .LVU12
  59 001a 0225     		movs	r5, #2
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 104 15 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 110 5 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 103:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 103 17 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 104 3 is_stmt 1 view .LVU16
  67              		.loc 1 110 2 view .LVU17
  68              		.loc 1 110 5 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 110 62 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
  75              		.loc 1 111 3 is_stmt 1 view .LVU20
  76              		.loc 1 111 17 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 112:src/display.c **** }
  80              		.loc 1 112 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 107:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  89              		.loc 1 107 3 is_stmt 1 view .LVU23
 108:src/display.c **** 	}
  90              		.loc 1 108 15 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
  92              		.loc 1 110 7 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 108:src/display.c **** 	}
  94              		.loc 1 108 15 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 107:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  96              		.loc 1 107 17 view .LVU27
  97 0038 0125     		movs	r5, #1
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
  98              		.loc 1 110 5 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 107:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 100              		.loc 1 107 17 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
ARM GAS  /tmp/ccQmbpxO.s 			page 5


 108:src/display.c **** 	}
 102              		.loc 1 108 3 is_stmt 1 view .LVU30
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
 103              		.loc 1 110 2 view .LVU31
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
 104              		.loc 1 110 5 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
 107              		.loc 1 110 19 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 112 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 113:src/display.c **** 
 114:src/display.c **** 
 115:src/display.c **** /* Table of error messages.
 116:src/display.c ****  * These consist of a double string.  The first is displayed in the
 117:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 118:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 119:src/display.c ****  */
 120:src/display.c **** void error_message(const unsigned int e) 
 121:src/display.c **** {
 122:src/display.c **** #define MSG1(top) top "\0"
 123:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 124:src/display.c **** 
 125:src/display.c **** 	// NB: this MUST be in the same order as the error #defines in errors.h
 126:src/display.c **** 	static const char *const error_table[] = 
 127:src/display.c **** 	{
 128:src/display.c **** 		// manually get the order correct!
 129:src/display.c **** 		MSG2("Running", "ProGraMm"),
 130:src/display.c **** 		MSG1("Domain"),
 131:src/display.c **** 		MSG2("Bad time", "or dAtE"),
 132:src/display.c **** 		MSG2("Undefined", "Op-COdE"),
 133:src/display.c **** 		MSG1("+\237"),
ARM GAS  /tmp/ccQmbpxO.s 			page 6


 134:src/display.c **** 		MSG1("-\237"),
 135:src/display.c **** 		MSG2("No such", "LAbEL"),
 136:src/display.c **** 		MSG2("Illegal", "OPErAtion"),
 137:src/display.c **** 		MSG1("Out of range"),
 138:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 139:src/display.c **** 		MSG2("Bad digit", "1"),
 140:src/display.c **** 		MSG2("Too long", "1"),
 141:src/display.c **** #else
 142:src/display.c **** 		MSG1("Bad digit"),
 143:src/display.c **** 		MSG1("Too long"),
 144:src/display.c **** #endif
 145:src/display.c **** 		MSG2("RAM is", "FuLL"),
 146:src/display.c **** 		MSG2("Stack", "CLASH"),
 147:src/display.c **** 		MSG1("Bad mode"),
 148:src/display.c **** 		MSG2("Word\006\006\006size", "too SMmALL"),
 149:src/display.c **** 		MSG2("Too few", "dAtA PointS"),
 150:src/display.c **** 		MSG2("Invalid", "ParaMmEtEr"),
 151:src/display.c **** 		MSG1("I/O"),
 152:src/display.c **** 		MSG2("Invalid", "dAtA"),
 153:src/display.c **** 		MSG2("Write", "ProtEctEd"),
 154:src/display.c **** 		MSG2("No root", "Found"),
 155:src/display.c **** 		MSG2("Matrix", "MmISMmAtCH"),
 156:src/display.c **** 		MSG1("Singular"),
 157:src/display.c **** 		MSG2("Flash is", "FuLL"),
 158:src/display.c **** 		MSG2("No crystal", "InStaLLEd"),
 159:src/display.c **** #ifndef SHIFT_EXPONENT
 160:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 161:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 162:src/display.c **** 		MSG2("Too\007\304 small", "1"),
 163:src/display.c **** #     else
 164:src/display.c **** 		MSG2("Too small", "1"),
 165:src/display.c **** #     endif
 166:src/display.c **** 		MSG2("Too big", "1"),
 167:src/display.c **** #  else
 168:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 169:src/display.c **** 		MSG1("Too\007\304 small"),
 170:src/display.c **** #     else
 171:src/display.c **** 		MSG1("Too small"),
 172:src/display.c **** #     endif
 173:src/display.c **** 		MSG1("Too big"),
 174:src/display.c **** #  endif
 175:src/display.c **** #endif
 176:src/display.c **** 		MSG2("\004 \035", "X"),		// Integral ~
 177:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 178:src/display.c **** 		MSG2("Interrupted", "X"),
 179:src/display.c **** #endif
 180:src/display.c **** 	};
 181:src/display.c **** #undef MSG1
 182:src/display.c **** #undef MSG2
 183:src/display.c **** #ifndef REALBUILD
 184:src/display.c **** 	static const char *const error_table_text[] =
 185:src/display.c **** 	{
 186:src/display.c **** 		" P r o g r a m ",
 187:src/display.c **** 		"",
 188:src/display.c **** 		" o r   d a t e ",
 189:src/display.c **** 		" O p - c o d e ",
 190:src/display.c **** 		"",
ARM GAS  /tmp/ccQmbpxO.s 			page 7


 191:src/display.c **** 		"",
 192:src/display.c **** 		" L a b e l ",
 193:src/display.c **** 		" O p e r a t i o n ",
 194:src/display.c **** 		"",
 195:src/display.c **** 		"",
 196:src/display.c **** 		"",
 197:src/display.c **** 		" F u l l ",
 198:src/display.c **** 		" C l a s h ",
 199:src/display.c **** 		"",
 200:src/display.c **** 		" T o o   s m a l l ",
 201:src/display.c **** 		" D a t a   p o i n t s ",
 202:src/display.c **** 		" P a r a m e t e r ",
 203:src/display.c **** 		"",
 204:src/display.c **** 		" D a t a ",
 205:src/display.c **** 		" P r o t e c t e d ",
 206:src/display.c **** 		" F o u n d ",
 207:src/display.c **** 		" M i s m a t c h ",
 208:src/display.c **** 		"",
 209:src/display.c **** 		" F u l l ",
 210:src/display.c **** 		" I n s t a l l e d ",
 211:src/display.c **** #ifndef SHIFT_EXPONENT
 212:src/display.c **** 		"",
 213:src/display.c **** 		"",
 214:src/display.c **** #endif
 215:src/display.c **** 		"",
 216:src/display.c **** 	};
 217:src/display.c **** #endif
 218:src/display.c **** 
 219:src/display.c **** 	if (e != ERR_NONE || Running) {
 220:src/display.c **** 		const char *p = error_table[e];
 221:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 222:src/display.c **** 		if (*q == '\0')
 223:src/display.c **** 			q = S7_ERROR;
 224:src/display.c **** 		if (*q == 'X') {
 225:src/display.c **** 			DispMsg = p;
 226:src/display.c **** 			frozen_display();
 227:src/display.c **** 		}
 228:src/display.c **** 		else {
 229:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 230:src/display.c **** 			if (*q == '1')
 231:src/display.c **** 				q = CNULL;
 232:src/display.c **** #endif
 233:src/display.c **** 			message(p, q);
 234:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 235:src/display.c **** #ifndef REALBUILD
 236:src/display.c **** 			scopy(LastDisplayedNumber, error_table_text[e]);
 237:src/display.c **** #endif
 238:src/display.c **** 		}
 239:src/display.c **** #ifdef INFRARED
 240:src/display.c **** 		if (Tracing) {
 241:src/display.c **** 			if (*q == 'X')
 242:src/display.c **** 				print_reg(regX_idx, p, 0);
 243:src/display.c **** 			else {
 244:src/display.c **** 				print_tab(0);
 245:src/display.c **** 				print_line(p, 0);
 246:src/display.c **** 				print(' ');
 247:src/display.c **** 				while (*q != '\0') {
ARM GAS  /tmp/ccQmbpxO.s 			page 8


 248:src/display.c **** 					int c = *q;
 249:src/display.c **** 					if (c >= 'A')
 250:src/display.c **** 						c |= 0x60; // ASCII lower case
 251:src/display.c **** 					print(c);
 252:src/display.c **** 					if (c == 'm' /* || c == 'w' */)
 253:src/display.c **** 						++q;
 254:src/display.c **** 					++q;
 255:src/display.c **** 				}
 256:src/display.c **** 				print_advance( 0 );
 257:src/display.c **** 			}
 258:src/display.c **** 		}
 259:src/display.c **** #endif
 260:src/display.c **** 	}
 261:src/display.c **** }
 262:src/display.c **** 
 263:src/display.c **** 
 264:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 265:src/display.c ****  * display.
 266:src/display.c ****  */
 267:src/display.c **** #define D_TOP 64
 268:src/display.c **** #define D_TL 32
 269:src/display.c **** #define D_TR 8
 270:src/display.c **** #define D_MIDDLE 16
 271:src/display.c **** #define D_BL 4
 272:src/display.c **** #define D_BR 1
 273:src/display.c **** #define D_BOTTOM 2
 274:src/display.c **** 
 275:src/display.c **** #include "charset7.h"
 276:src/display.c **** 
 277:src/display.c **** #ifndef REALBUILD
 278:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 279:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 280:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 281:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 282:src/display.c **** 
 283:src/display.c **** static void set_mant_sign_dot()
 284:src/display.c **** {
 285:src/display.c **** 	LastDisplayedNumber[0]='-';
 286:src/display.c **** 	set_dot(MANT_SIGN);
 287:src/display.c **** }
 288:src/display.c **** 
 289:src/display.c **** static void clr_mant_sign_dot()
 290:src/display.c **** {
 291:src/display.c **** 	LastDisplayedNumber[0]=' ';
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 293:src/display.c **** }
 294:src/display.c **** 
 295:src/display.c **** static void set_exp_sign_dot()
 296:src/display.c **** {
 297:src/display.c **** 	LastDisplayedExponent[0]='-';
 298:src/display.c **** 	set_dot(EXP_SIGN);
 299:src/display.c **** }
 300:src/display.c **** 
 301:src/display.c **** static void clr_exp_sign_dot()
 302:src/display.c **** {
 303:src/display.c **** 	LastDisplayedExponent[0]=' ';
 304:src/display.c **** 	clr_dot(EXP_SIGN);
ARM GAS  /tmp/ccQmbpxO.s 			page 9


 305:src/display.c **** }
 306:src/display.c **** 
 307:src/display.c **** #else
 308:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 309:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 310:src/display.c **** 
 311:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 312:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 313:src/display.c **** 
 314:src/display.c **** #endif
 315:src/display.c **** 
 316:src/display.c **** #ifndef REALBUILD
 317:src/display.c **** int getdig(int ch)
 318:src/display.c **** #else
 319:src/display.c **** static int getdig(int ch)
 320:src/display.c **** #endif
 321:src/display.c **** {
 322:src/display.c **** 	// perform index lookup
 323:src/display.c **** 	return digtbl[ch&0xff];
 324:src/display.c **** }
 325:src/display.c **** 
 326:src/display.c **** void dot(int n, int on) {
 327:src/display.c **** 	if (on)	set_dot(n);
 328:src/display.c **** 	else	clr_dot(n);
 329:src/display.c **** }
 330:src/display.c **** 
 331:src/display.c **** 
 332:src/display.c **** /* Set the decimal point *after* the indicated digit
 333:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 334:src/display.c ****  * of decimal.
 335:src/display.c ****  */
 336:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 337:src/display.c **** 	if (res) {
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 339:src/display.c **** 	} else {
 340:src/display.c **** 		set_dot(posn+7);
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 342:src/display.c **** 			set_dot(posn+8);
 343:src/display.c **** #ifndef REALBUILD
 344:src/display.c **** 	LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 345:src/display.c **** #endif
 346:src/display.c **** 	}
 347:src/display.c **** 	return res;
 348:src/display.c **** }
 349:src/display.c **** 
 350:src/display.c **** /* Set the digit group separator *before* the specified digit.
 351:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 352:src/display.c ****  * sep argument.
 353:src/display.c ****  */
 354:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 355:src/display.c **** 	if (sep == SEP_NONE)
 356:src/display.c **** 		return res;
 357:src/display.c **** 	if (res) {
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 359:src/display.c **** 		else *res++ = '.';
 360:src/display.c **** 	} else {
 361:src/display.c **** 		posn -= SEGS_PER_DIGIT;
ARM GAS  /tmp/ccQmbpxO.s 			page 10


 362:src/display.c **** 		set_dot(posn+7);
 363:src/display.c **** 		if (sep == SEP_COMMA)
 364:src/display.c **** 			set_dot(posn+8);
 365:src/display.c **** #ifndef REALBUILD
 366:src/display.c **** 		LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 367:src/display.c **** #endif
 368:src/display.c **** 	}
 369:src/display.c **** 	return res;
 370:src/display.c **** }
 371:src/display.c **** 
 372:src/display.c **** /* Set a digit in positions [base, base+6] */
 373:src/display.c **** static void set_dig(int base, int ch)
 374:src/display.c **** {
 136              		.loc 1 374 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 375:src/display.c **** 	int i;
 140              		.loc 1 375 2 view .LVU36
 376:src/display.c **** 	int c = getdig(ch);
 141              		.loc 1 376 2 view .LVU37
 142              	.LBB128:
 143              	.LBI128:
 317:src/display.c **** #else
 144              		.loc 1 317 5 view .LVU38
 145              	.LBB129:
 323:src/display.c **** }
 146              		.loc 1 323 2 view .LVU39
 323:src/display.c **** }
 147              		.loc 1 323 15 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 323:src/display.c **** }
 149              		.loc 1 323 18 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE129:
 152              	.LBE128:
 377:src/display.c **** #ifndef REALBUILD
 378:src/display.c **** 	if(base<SEGS_EXP_BASE)
 153              		.loc 1 378 4 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 374:src/display.c **** 	int i;
 155              		.loc 1 374 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB131:
 163              	.LBB130:
 323:src/display.c **** }
 164              		.loc 1 323 15 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 323:src/display.c **** }
 167              		.loc 1 323 15 view .LVU45
 168              	.LBE130:
ARM GAS  /tmp/ccQmbpxO.s 			page 11


 169              	.LBE131:
 170              		.loc 1 378 2 is_stmt 1 view .LVU46
 171              		.loc 1 378 4 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 379:src/display.c **** 		LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 379 3 is_stmt 1 view .LVU48
 174              		.loc 1 379 28 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 379 37 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 379 28 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 379 37 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 379 37 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 380:src/display.c **** 	else
 381:src/display.c **** 		LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 382:src/display.c **** #endif
 383:src/display.c **** 	for (i=6; i>=0; i--)
 384:src/display.c **** 	{
 385:src/display.c **** //		dot(base, c & (1 << i));
 386:src/display.c **** 		if (c & (1 << i))
 387:src/display.c **** 			set_dot(base);
 196              		.loc 1 387 4 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 388:src/display.c **** 		else
 389:src/display.c **** 			clr_dot(base);
 390:src/display.c **** 		base++;
 199              		.loc 1 390 3 is_stmt 1 view .LVU55
 383:src/display.c **** 	{
 200              		.loc 1 383 18 view .LVU56
 383:src/display.c **** 	{
 201              		.loc 1 383 2 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 383:src/display.c **** 	{
 204              		.loc 1 383 2 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 387:src/display.c **** 		else
 208              		.loc 1 387 4 is_stmt 1 view .LVU59
 389:src/display.c **** 		base++;
ARM GAS  /tmp/ccQmbpxO.s 			page 12


 209              		.loc 1 389 4 view .LVU60
 386:src/display.c **** 			set_dot(base);
 210              		.loc 1 386 7 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 386:src/display.c **** 			set_dot(base);
 212              		.loc 1 386 6 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 386:src/display.c **** 			set_dot(base);
 216              		.loc 1 386 3 is_stmt 1 view .LVU63
 386:src/display.c **** 			set_dot(base);
 217              		.loc 1 386 6 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 389:src/display.c **** 		base++;
 219              		.loc 1 389 4 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 390 3 is_stmt 1 view .LVU66
 383:src/display.c **** 	{
 223              		.loc 1 383 18 view .LVU67
 383:src/display.c **** 	{
 224              		.loc 1 383 2 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 383:src/display.c **** 	{
 227              		.loc 1 383 2 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 391:src/display.c **** 	}
 392:src/display.c **** }
 231              		.loc 1 392 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 381:src/display.c **** #endif
 235              		.loc 1 381 3 is_stmt 1 view .LVU71
 381:src/display.c **** #endif
 236              		.loc 1 381 45 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 381:src/display.c **** #endif
 238              		.loc 1 381 51 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 381:src/display.c **** #endif
 240              		.loc 1 381 30 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 381:src/display.c **** #endif
 242              		.loc 1 381 45 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 381:src/display.c **** #endif
 246              		.loc 1 381 51 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
ARM GAS  /tmp/ccQmbpxO.s 			page 13


 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 393:src/display.c **** 
 394:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 395:src/display.c **** 	if (res) *res++ = ch;
 396:src/display.c **** 	else	set_dig(base, ch);
 397:src/display.c **** 	return res;
 398:src/display.c **** }
 399:src/display.c **** 
 400:src/display.c **** 
 401:src/display.c **** static void set_digits_string(const char *msg, int j) {
 402:src/display.c **** 	for (; *msg != '\0'; msg++) {
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 405:src/display.c **** 		else {
 406:src/display.c **** 			set_dig_s(j, *msg, CNULL);
 407:src/display.c **** 			j += SEGS_PER_DIGIT;
 408:src/display.c **** 		}
 409:src/display.c **** 	}
 410:src/display.c **** }
 411:src/display.c **** 
 412:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 413:src/display.c **** 	int i;
 414:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 415:src/display.c **** 
 416:src/display.c **** 	for (i=0; i<n && msg[i] != '\0'; i++)
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 418:src/display.c **** }
 419:src/display.c **** 
 420:src/display.c **** /* Force the exponent display
 421:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 422:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 423:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 424:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 425:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 426:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 427:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 428:src/display.c ****  */
 429:src/display.c **** static void set_exp(int exp, int flags, char *res) {
ARM GAS  /tmp/ccQmbpxO.s 			page 14


 430:src/display.c **** 	union {
 431:src/display.c **** 		char buf[4];
 432:src/display.c **** 		int i;
 433:src/display.c **** 	} u;
 434:src/display.c **** 	int negative;
 435:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 436:src/display.c **** 	int thousands;
 437:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 438:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
 439:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 440:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
 441:src/display.c **** #  else
 442:src/display.c **** 	const int show_large_exponent = 1;
 443:src/display.c **** #  endif
 444:src/display.c **** #else
 445:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 446:src/display.c **** 	int thousands;
 447:src/display.c **** #  endif
 448:src/display.c **** 	const int show_large_exponent = 0;
 449:src/display.c **** #endif
 450:src/display.c **** 
 451:src/display.c **** 	negative = flags & 2;
 452:src/display.c **** 	if (exp < 0) {
 453:src/display.c **** 		negative = 1;
 454:src/display.c **** 		exp = -exp;
 455:src/display.c **** 	}
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 457:src/display.c **** 	thousands = exp / 1000;
 458:src/display.c **** #endif
 459:src/display.c **** 	if (res) {
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 461:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 462:src/display.c **** 		if (thousands != 0) {
 463:src/display.c **** #else
 464:src/display.c **** 		if (exp > 999) {
 465:src/display.c **** #endif
 466:src/display.c **** 			if (!negative) *res++ = ':'; // Separator for large +ve exponents
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 468:src/display.c **** 		}
 469:src/display.c **** 		else *res++ = 'e'; // Normal separator
 470:src/display.c **** #else
 471:src/display.c **** 		*res++ = 'e';
 472:src/display.c **** #endif
 473:src/display.c **** 		if (negative) *res++ = '-';
 474:src/display.c **** 	}
 475:src/display.c **** 	else {
 476:src/display.c **** 		if (negative) SET_EXP_SIGN;
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c **** 		if (thousands != 0) {
 479:src/display.c **** #else
 480:src/display.c **** 		if (exp > 999) {
 481:src/display.c **** #endif
 482:src/display.c **** 			if (!show_large_exponent
 483:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 484:src/display.c **** 			                         && (flags & 8) == 0
 485:src/display.c **** #endif
 486:src/display.c **** 			                                            ) {
ARM GAS  /tmp/ccQmbpxO.s 			page 15


 487:src/display.c **** #ifdef REALBUILD
 488:src/display.c **** 				u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 489:src/display.c **** #else
 490:src/display.c **** 				scopy(u.buf, "HIG"); // More portable code
 491:src/display.c **** #endif
 492:src/display.c **** 				goto no_number;
 493:src/display.c **** 			}
 494:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 495:src/display.c **** 			else {
 496:src/display.c **** 				exp -= thousands * 1000;
 497:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 498:src/display.c **** 				if (flags & 16) {
 499:src/display.c **** 					// Cut off the last three digits of the mantissa.
 500:src/display.c **** 					int i;
 501:src/display.c **** 
 502:src/display.c **** 					for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 503:src/display.c **** 						// Clear digits and separators
 504:src/display.c **** 						clr_dot(i);
 505:src/display.c **** 					set_dig(9 * SEGS_PER_DIGIT, '>');
 506:src/display.c **** 				}
 507:src/display.c **** #  endif
 508:src/display.c **** 				if (negative) {
 509:src/display.c **** 					CLR_EXP_SIGN;
 510:src/display.c **** 					set_dig(10 * SEGS_PER_DIGIT, '-');
 511:src/display.c **** 				}
 512:src/display.c **** 				set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 513:src/display.c **** 				flags = 1;
 514:src/display.c **** 			}
 515:src/display.c **** #endif
 516:src/display.c **** 		}
 517:src/display.c **** 	}
 518:src/display.c **** #ifdef REALBUILD
 519:src/display.c **** 	u.i = 0; // Smaller ARM code
 520:src/display.c **** #else
 521:src/display.c **** 	xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 522:src/display.c **** #endif
 523:src/display.c **** 	if (flags & 5) {
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 525:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 526:src/display.c **** 		if (flags & 4) { // Pad exponent with spaces instead of zeros
 527:src/display.c **** 			int i;
 528:src/display.c **** 
 529:src/display.c **** 			for (i = 0; i < 2; ++i) {
 530:src/display.c **** 				if (u.buf[i] == '0')
 531:src/display.c **** 					u.buf[i] = ' ';
 532:src/display.c **** 				else
 533:src/display.c **** 					break;
 534:src/display.c **** 			}
 535:src/display.c **** 			if (i != 0 && negative) {
 536:src/display.c **** 				// Move minus sign to right in front of exponent
 537:src/display.c **** 				CLR_EXP_SIGN;
 538:src/display.c **** 				u.buf[i - 1] = '-';
 539:src/display.c **** 			}
 540:src/display.c **** 		}
 541:src/display.c **** #endif
 542:src/display.c **** 	}
 543:src/display.c **** 	else
ARM GAS  /tmp/ccQmbpxO.s 			page 16


 544:src/display.c **** 		num_arg(u.buf, exp);
 545:src/display.c **** no_number:
 546:src/display.c **** 	set_exp_digits_string(u.buf, res);
 547:src/display.c **** }
 548:src/display.c **** 
 549:src/display.c **** static void carry_overflow(void) {
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 551:src/display.c **** 	int c;
 552:src/display.c **** 	unsigned int b;
 553:src/display.c **** 
 554:src/display.c **** 	// Figure out the base
 555:src/display.c **** 	switch (State2.smode) {
 556:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 557:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
 558:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
 559:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
 560:src/display.c **** 	default:	b = UState.int_base+1;	break;
 561:src/display.c **** 	}
 562:src/display.c **** 
 563:src/display.c **** 	// Display the base as the first exponent digit
 564:src/display.c **** 	if (b > 10 && b < 16)
 565:src/display.c **** 		SET_EXP_SIGN;
 566:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 567:src/display.c **** 	set_dig(base, c);
 568:src/display.c **** 
 569:src/display.c **** 	// Carry and overflow are the next two exponent digits if they are set
 570:src/display.c **** 	if (get_carry())
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 572:src/display.c **** 	if (get_overflow())
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 574:src/display.c **** }
 575:src/display.c **** 
 576:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res);
 577:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res);
 578:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 579:src/display.c **** // replace_char() isn't used or implemented unless HMS Y register display is enabled
 580:src/display.c **** static void replace_char(char *a, char b, char c) { }
 581:src/display.c **** #endif
 582:src/display.c **** 
 583:src/display.c **** /* Display the annunicator text line.
 584:src/display.c ****  * Care needs to be taken to keep things aligned.
 585:src/display.c ****  * Spaces are 5 pixels wide, \006 is a single pixel space.
 586:src/display.c ****  */
 587:src/display.c **** static void annunciators(void) {
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 589:src/display.c **** 	char buf[42], *p = buf, *q="";
 590:src/display.c **** 	int n;
 591:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 592:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 594:src/display.c **** 	// that's set to 0 will be optimized away. This way it's easier to make a
 595:src/display.c **** 	// feature run-time configurable if needed.
 596:src/display.c **** #ifdef INCLUDE_YREG_CODE
 597:src/display.c **** #  ifdef YREG_ALWAYS_ON
 598:src/display.c **** 	const int yreg_enabled = 1;
 599:src/display.c **** #  else
 600:src/display.c **** 	const int yreg_enabled = UState.show_y;
ARM GAS  /tmp/ccQmbpxO.s 			page 17


 601:src/display.c **** #  endif
 602:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 603:src/display.c **** 	const int yreg_hms = 1;
 604:src/display.c **** #  else
 605:src/display.c **** 	const int yreg_hms = 0;
 606:src/display.c **** #  endif
 607:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 608:src/display.c **** 	const int yreg_fract = 1;
 609:src/display.c **** #  else
 610:src/display.c **** 	const int yreg_fract = 0;
 611:src/display.c **** #  endif
 612:src/display.c **** #else
 613:src/display.c **** 	const int yreg_enabled = 0;
 614:src/display.c **** 	const int yreg_hms = 0;
 615:src/display.c **** 	const int yreg_fract = 0;
 616:src/display.c **** #endif
 617:src/display.c **** #ifdef RP_PREFIX
 618:src/display.c **** 	const int rp_prefix = 1;
 619:src/display.c **** #else
 620:src/display.c **** 	const int rp_prefix = 0;
 621:src/display.c **** 	const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 622:src/display.c **** #endif
 623:src/display.c **** // Indicates whether font escape code is compiled in.
 624:src/display.c **** // This variable will always be set at compile time.
 625:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 626:src/display.c **** 	const int has_FONT_ESCAPE = 1;
 627:src/display.c **** #else
 628:src/display.c **** 	const int has_FONT_ESCAPE = 0;
 629:src/display.c **** #endif
 630:src/display.c **** 
 631:src/display.c **** 	xset(buf, '\0', sizeof(buf));
 632:src/display.c **** 
 633:src/display.c **** 	if (is_intmode()) {
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 635:src/display.c **** 		if (shift_char == ' ') {
 636:src/display.c **** 			*p++ = '\007';
 637:src/display.c **** 			*p++ = '\346';
 638:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 639:src/display.c **** 		}
 640:src/display.c **** 		else
 641:src/display.c **** #endif
 642:src/display.c **** 		{
 643:src/display.c **** 			*p++ = shift_char;
 644:src/display.c **** 			*p++ = '\006';
 645:src/display.c **** 		}
 646:src/display.c **** 
 647:src/display.c **** 		switch(int_mode()) {
 648:src/display.c **** 		default:
 649:src/display.c **** 		case MODE_2COMP:	q = "2c\006";		break;
 650:src/display.c **** 		case MODE_UNSIGNED:	q = "un\006";		break;
 651:src/display.c **** 		case MODE_1COMP:	q = "\0061c\006\006";	break;
 652:src/display.c **** 		case MODE_SGNMANT:	q = "sm";		break;
 653:src/display.c **** 		}
 654:src/display.c **** 		q = scopy(p, q);
 655:src/display.c **** 		*q++ = '\006';
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 657:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 18


 658:src/display.c **** 		if (IntMaxWindow > 0) {
 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 660:src/display.c **** 			if (*q == '1')
 661:src/display.c **** 				n += 2;
 662:src/display.c **** 			if (q[1] == '1')
 663:src/display.c **** 				n += 2;
 664:src/display.c **** 			while (n-- > 0)
 665:src/display.c **** 				*p++ = '\006';
 666:src/display.c **** 
 667:src/display.c **** 			for (n = IntMaxWindow; n >= 0; n--)
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 669:src/display.c **** 		}
 670:src/display.c **** 	}
 671:src/display.c **** 	else if (!yreg_enabled
 672:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 673:src/display.c **** 		 || shift_char != ' ' || State2.cmplx
 674:src/display.c **** #endif
 675:src/display.c **** 		 ) {
 676:src/display.c **** // The stack size indicator is displayed on the right if date mode indication is enabled
 677:src/display.c **** // because the 'D' in small font doesn't look good next to the date mode indicator.
 678:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 679:src/display.c **** 		if (shift_char == ' ') {
 680:src/display.c **** 			*p++ = '\007';
 681:src/display.c **** 			*p++ = '\342';
 682:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 683:src/display.c **** 			*p++ = '\007';
 684:src/display.c **** 			*p++ = '\344';
 685:src/display.c **** 			*p++ = (is_dblmode() ? 'D' : ' ');
 686:src/display.c **** 		}
 687:src/display.c **** 		else
 688:src/display.c **** #endif
 689:src/display.c **** 		if (shift_char != ' ' || !is_dblmode()) {
 690:src/display.c **** 			*p++ = shift_char;
 691:src/display.c **** 			*p++ = '\006';
 692:src/display.c **** 		}
 693:src/display.c **** 		else {
 694:src/display.c **** 			*p++ = 'D';
 695:src/display.c **** 		}
 696:src/display.c **** 
 697:src/display.c **** 		if (State2.cmplx) {
 698:src/display.c **** 			*p++ = ' ';
 699:src/display.c **** 			*p = '\024';
 700:src/display.c **** 			goto skip;
 701:src/display.c **** 		}
 702:src/display.c **** 		if (State2.arrow) {
 703:src/display.c **** 			*p++ = ' ';
 704:src/display.c **** 			*p = '\015';
 705:src/display.c **** 			goto skip;
 706:src/display.c **** 		}
 707:src/display.c **** 
 708:src/display.c **** 		if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 709:src/display.c **** 			if (State2.wascomplex) {
 710:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 711:src/display.c **** 			}
 712:src/display.c **** 			else if (rp_prefix) {
 713:src/display.c **** 				if (RectPolConv == 1) {
 714:src/display.c **** 					q = "\007\306<";
ARM GAS  /tmp/ccQmbpxO.s 			page 19


 715:src/display.c **** 				}
 716:src/display.c **** 				else {
 717:src/display.c **** 					q = "\007\306y";
 718:src/display.c **** 				}
 719:src/display.c **** 			}
 720:src/display.c **** 			p = scopy(buf, q);
 721:src/display.c **** 
 722:src/display.c **** 			goto display_yreg;
 723:src/display.c **** 		}
 724:src/display.c **** 
 725:src/display.c **** 		switch (UState.date_mode) {
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 727:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 728:src/display.c **** 		case DATE_DMY:	q = "d.my\006\006";	break;
 729:src/display.c **** #endif
 730:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 731:src/display.c **** 		case DATE_YMD:	q = "y.md\006\006";	break;
 732:src/display.c **** #endif
 733:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 734:src/display.c **** 		case DATE_MDY:	q = "m.dy\006\006";	break;
 735:src/display.c **** #endif
 736:src/display.c **** #endif
 737:src/display.c **** 		default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 738:src/display.c **** 		}
 739:src/display.c **** 		p = scopy(p, q);
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 741:src/display.c **** 		if (get_trig_mode() == TRIG_GRAD) {
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 743:src/display.c **** 		}
 744:src/display.c **** #else
 745:src/display.c **** 		p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 746:src/display.c **** 		*p++ = '\007';
 747:src/display.c **** 		*p++ = '\342';
 748:src/display.c **** 		*p =  (UState.stack_depth ? ':' : '.');
 749:src/display.c **** #endif
 750:src/display.c **** 	}
 751:src/display.c **** 	else { // yreg_enabled
 752:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 753:src/display.c **** 		if (State2.cmplx) {
 754:src/display.c **** 			*p++ = '\007';
 755:src/display.c **** 			*p++ = '\344';
 756:src/display.c **** 			*p++ = shift_char;
 757:src/display.c **** 			q = "\024";
 758:src/display.c **** 		}
 759:src/display.c **** 		else if (shift_char != ' ') {
 760:src/display.c **** 			*p++ = '\007';
 761:src/display.c **** 			*p++ = '\307';
 762:src/display.c **** 			*p++ = shift_char;
 763:src/display.c **** 			goto no_copy;
 764:src/display.c **** 		}
 765:src/display.c **** 		else
 766:src/display.c **** #endif
 767:src/display.c **** 		if (State2.wascomplex) {
 768:src/display.c **** 			q = "\007\207i";
 769:src/display.c **** 		}
 770:src/display.c **** 		else if (rp_prefix && RectPolConv == 1) {
 771:src/display.c **** 			q = "\007\307<";
ARM GAS  /tmp/ccQmbpxO.s 			page 20


 772:src/display.c **** 		}
 773:src/display.c **** 		else if (rp_prefix && RectPolConv == 2) {
 774:src/display.c **** 			q = "\007\307y";
 775:src/display.c **** 		}
 776:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 777:src/display.c **** 		else if (get_trig_mode() == TRIG_GRAD) {
 778:src/display.c **** 			q = "\007\207\007";
 779:src/display.c **** 		}
 780:src/display.c **** #endif
 781:src/display.c **** 		else {
 782:src/display.c **** #ifndef SHOW_STACK_SIZE
 783:src/display.c **** 			q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 784:src/display.c **** #else
 785:src/display.c **** 			if (is_dblmode()) {
 786:src/display.c **** 				*p++ = '\007';
 787:src/display.c **** 				*p++ = '\342';
 788:src/display.c **** 				*p++ = (UState.stack_depth ? ':' : '.');
 789:src/display.c **** 				q = "\007\345D";
 790:src/display.c **** 			}
 791:src/display.c **** 			else {
 792:src/display.c **** 				q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 793:src/display.c **** 			}
 794:src/display.c **** #endif
 795:src/display.c **** 		}
 796:src/display.c **** 		p = scopy(p, q);
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 798:src/display.c **** 	no_copy:
 799:src/display.c **** #endif
 800:src/display.c **** 
 801:src/display.c **** 		if (State2.arrow) {
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 803:src/display.c **** 		} else if (State2.runmode) {
 804:src/display.c **** 			decNumber y;
 805:src/display.c **** display_yreg:
 806:src/display.c **** 			/* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 807:src/display.c **** 			 * ShowRegister+1 would contain the complex component, however if the register being
 808:src/display.c **** 			 * examined is on the stack and there is a command line present, the stack will be lifted
 809:src/display.c **** 			 * after we execute so we need to show ShowRegister instead.
 810:src/display.c **** 			 */
 811:src/display.c **** 			getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 814:src/display.c **** 			if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 815:src/display.c **** 				if (yreg_hms && State2.hms) {
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 817:src/display.c **** 
 818:src/display.c **** 					xset(buf, '\0', sizeof(buf));
 819:src/display.c **** 					UState.nothousands = 1;
 820:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 821:src/display.c **** 					UState.nothousands = saved_nothousands;
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 823:src/display.c **** 					// Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow space
 824:src/display.c **** 					// then remove the second symbol (") and the overflow or underflow signs,
 825:src/display.c **** 					// then remove the fractional part of the seconds.
 826:src/display.c **** 					p = "@\005 \006\"\0.\0";
 827:src/display.c **** 					while (*p) {
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
ARM GAS  /tmp/ccQmbpxO.s 			page 21


 829:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 830:src/display.c **** 							goto skip;
 831:src/display.c **** 						}
 832:src/display.c **** 						p += 2;
 833:src/display.c **** 					}
 834:src/display.c **** 					goto skip;
 835:src/display.c **** 				}
 836:src/display.c **** 				if (yreg_fract && UState.fract
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 838:src/display.c **** 				    && !State2.cmplx
 839:src/display.c **** #endif
 840:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 841:src/display.c **** 				    && !(rp_prefix && RectPolConv == 1)
 842:src/display.c **** #endif
 843:src/display.c **** 				    && set_x_fract(&y, p)) {
 844:src/display.c **** 					char ltgteq;
 845:src/display.c **** 
 846:src/display.c **** 					q = find_char(buf, '\0') - 2;
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 848:src/display.c **** 					ltgteq = *q;
 849:src/display.c **** 					switch (ltgteq) {
 850:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 851:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 852:src/display.c **** 					}
 853:src/display.c **** 					scopy(q, "\007\344?");
 854:src/display.c **** 					q[2] = ltgteq;
 855:src/display.c **** 
 856:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 857:src/display.c **** 						goto skip;
 858:src/display.c **** 					}
 859:src/display.c **** 					q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 861:src/display.c **** 						goto skip;
 862:src/display.c **** 					}
 863:src/display.c **** 					xset(p, '\0', sizeof(buf) - (p - buf));
 864:src/display.c **** 				}
 865:src/display.c **** 			}
 866:src/display.c **** 			for (n=DISPLAY_DIGITS; n>1; ) {
 867:src/display.c **** 				int extra_pixels;
 868:src/display.c **** 
 869:src/display.c **** 				set_x_dn(&y, p, &n);
 870:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 871:src/display.c **** 				if (extra_pixels <= 0)
 872:src/display.c **** 					break;
 873:src/display.c **** 
 874:src/display.c **** 				xset(p, '\0', n+10);
 875:src/display.c **** 
 876:src/display.c **** 				n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 877:src/display.c **** 			}
 878:src/display.c **** 		}
 879:src/display.c **** 	}
 880:src/display.c **** 
 881:src/display.c **** skip:	set_status(buf);
 882:src/display.c **** }
 883:src/display.c **** 
 884:src/display.c **** static void disp_x(const char *p) {
 885:src/display.c **** 	int i;
ARM GAS  /tmp/ccQmbpxO.s 			page 22


 886:src/display.c **** 	int gotdot = -1;
 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 888:src/display.c **** 	const
 889:src/display.c **** #endif
 890:src/display.c **** 	      int segs_per_digit = SEGS_PER_DIGIT;
 891:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 892:src/display.c **** 	int overflow_to_left = 0;
 893:src/display.c **** #endif
 894:src/display.c **** 
 895:src/display.c **** 	if (*p == '-') {
 896:src/display.c **** 		SET_MANT_SIGN;
 897:src/display.c **** 		p++;
 898:src/display.c **** 	}
 899:src/display.c **** 
 900:src/display.c **** 	if (is_intmode()) {
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 902:src/display.c **** 			set_dig(i, *p);
 903:src/display.c **** 			i += SEGS_PER_DIGIT;
 904:src/display.c **** 		}
 905:src/display.c **** 		carry_overflow();
 906:src/display.c **** 	} else {
 907:src/display.c **** 		set_separator_decimal_modes();
 908:src/display.c **** 
 909:src/display.c **** 		i = 0;
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 911:src/display.c **** 		if ( CmdLineDot > 1 ) {
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 913:src/display.c **** 			const
 914:src/display.c **** #  endif
 915:src/display.c **** 			      int double_dot = 0;
 916:src/display.c **** 			int j;
 917:src/display.c **** 
 918:src/display.c **** 			for (j=0; p[j] != '\0'; j++) {
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 920:src/display.c **** 					gotdot = j;
 921:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 922:src/display.c **** 					double_dot = (p[j+1] == '.');
 923:src/display.c **** #  endif
 924:src/display.c **** 				}
 925:src/display.c **** 			}
 926:src/display.c **** 			j -= DISPLAY_DIGITS + double_dot;
 927:src/display.c **** 			if (j > 0) {
 928:src/display.c **** 				p += j + 1;
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 930:src/display.c **** 				if (gotdot <= j) {
 931:src/display.c **** 					gotdot = 0;
 932:src/display.c **** 					if (double_dot)
 933:src/display.c **** 						p++;
 934:src/display.c **** 				}
 935:src/display.c **** 				else if (*p == '.') {
 936:src/display.c **** 					gotdot = 0;
 937:src/display.c **** 					p++;
 938:src/display.c **** 					if (!double_dot)
 939:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 940:src/display.c **** 				}
 941:src/display.c **** 				else gotdot = -1;
 942:src/display.c **** 				set_dig(0, '<');
ARM GAS  /tmp/ccQmbpxO.s 			page 23


 943:src/display.c **** 				overflow_to_left = 1;
 944:src/display.c **** 			}
 945:src/display.c **** 			else gotdot = -1;
 946:src/display.c **** 		}
 947:src/display.c **** #endif
 948:src/display.c **** 
 949:src/display.c **** 		for (; *p != '\0' && *p != 'E'
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 951:src/display.c **** 		                               && *p != 'D'
 952:src/display.c **** #endif
 953:src/display.c **** 		                                           ; p++) {
 954:src/display.c **** 			if (*p == '.') {
 955:src/display.c **** 				if (gotdot < 0)
 956:src/display.c **** 					gotdot = i;
 957:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 958:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 959:src/display.c **** 				if ( *(p+1) == '.' || ( i != gotdot ) ) {
 960:src/display.c **** 					if ( *(p+1) == '.' ) {
 961:src/display.c **** 						p++;
 962:src/display.c **** 					}
 963:src/display.c **** #  else
 964:src/display.c **** 				if ( i != gotdot ) {
 965:src/display.c **** #  endif
 966:src/display.c **** 					set_dig(i, '/'); // put in a fraction separator
 967:src/display.c **** 					i += segs_per_digit;
 968:src/display.c **** 				}
 969:src/display.c **** 				else {
 970:src/display.c **** 					if ( CmdLineDot > 1 ) {
 971:src/display.c **** 						i += segs_per_digit;
 972:src/display.c **** 					}
 973:src/display.c **** 					else {
 974:src/display.c **** 						set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 976:src/display.c **** 					}
 977:src/display.c **** 				}
 978:src/display.c **** #else
 979:src/display.c **** 				if (i > 0)
 980:src/display.c **** 					set_decimal(i - segs_per_digit, DecimalMode, CNULL);
 981:src/display.c **** 				else {
 982:src/display.c **** 					set_dig(i, '0');
 983:src/display.c **** 					set_decimal(i, DecimalMode, CNULL);
 984:src/display.c **** 					i += segs_per_digit;
 985:src/display.c **** 				}
 986:src/display.c **** #endif
 987:src/display.c **** 			} else {
 988:src/display.c **** 				set_dig(i, *p);
 989:src/display.c **** 				i += segs_per_digit;
 990:src/display.c **** 			}
 991:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 992:src/display.c **** 			if (i == SEGS_EXP_BASE)
 993:src/display.c **** 				segs_per_digit = SEGS_PER_EXP_DIGIT;
 994:src/display.c **** #endif
 995:src/display.c **** 		}
 996:src/display.c **** 
 997:src/display.c **** 		/* Implement a floating comma */
 998:src/display.c **** 		if (gotdot < 0)
 999:src/display.c **** 			gotdot = i;
ARM GAS  /tmp/ccQmbpxO.s 			page 24


1000:src/display.c **** 		for (;;) {
1001:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
1003:src/display.c **** 				break;
1004:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1005:src/display.c **** 			if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1006:src/display.c **** 				break;
1007:src/display.c **** #endif
1008:src/display.c **** 			set_separator(gotdot, SeparatorMode, CNULL);
1009:src/display.c **** 		}
1010:src/display.c **** 
1011:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1012:src/display.c **** 		if (*p == 'E' || *p == 'D') {
1013:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1014:src/display.c **** 			int flags = 8;
1015:src/display.c **** #  else
1016:src/display.c **** 			int flags = 12;
1017:src/display.c **** #  endif
1018:src/display.c **** 
1019:src/display.c **** 			if (*p == 'D')
1020:src/display.c **** 				flags |= 2;
1021:src/display.c **** 			if (i > 10 * SEGS_PER_DIGIT)
1022:src/display.c **** 				flags |= 16;
1023:src/display.c **** 			set_exp(s_to_i(p+1), flags, CNULL);
1024:src/display.c **** 		}
1025:src/display.c **** #else
1026:src/display.c **** 		if (*p == 'E') {
1027:src/display.c **** 			p++;
1028:src/display.c **** 			// set_exp() takes care of setting the exponent sign
1029:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1030:src/display.c **** 			set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1031:src/display.c **** #  else
1032:src/display.c **** 			set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1033:src/display.c **** #  endif
1034:src/display.c **** 		} 
1035:src/display.c **** #endif
1036:src/display.c **** 	}
1037:src/display.c **** }
1038:src/display.c **** 
1039:src/display.c **** const char DIGITS[] = "0123456789ABCDEF";
1040:src/display.c **** 
1041:src/display.c **** static void set_int_x(const long long int value, char *res) {
1042:src/display.c **** 	const int ws = word_size();
1043:src/display.c **** 	unsigned int b;
1044:src/display.c **** 	long long int vs = value;
1045:src/display.c **** 	unsigned long long int v;
1046:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1047:src/display.c **** 	int i, j, k;
1048:src/display.c **** 	int sign = 0;
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1050:src/display.c **** 
1051:src/display.c **** 	switch (State2.smode) {
1052:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1053:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1054:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1055:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1056:src/display.c **** 	default:	b = int_base();	break;
ARM GAS  /tmp/ccQmbpxO.s 			page 25


1057:src/display.c **** 	}
1058:src/display.c **** 
1059:src/display.c **** 	if (!res) {
1060:src/display.c **** 		IntMaxWindow = 0;
1061:src/display.c **** 		carry_overflow();
1062:src/display.c **** 	}
1063:src/display.c **** 
1064:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) {
1065:src/display.c **** 		v = extract_value(value, &sign);
1066:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1067:src/display.c **** 			v = value;
1068:src/display.c **** 		if (v == 0) {
1069:src/display.c **** 			if (sign)
1070:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1071:src/display.c **** 			set_dig_s(dig, '0', res);
1072:src/display.c **** 			return;
1073:src/display.c **** 		} else
1074:src/display.c **** 			for (i=0; v != 0; i++) {
1075:src/display.c **** 				const int r = v % b;
1076:src/display.c **** 				v /= b;
1077:src/display.c **** 				buf[i] = DIGITS[r];
1078:src/display.c **** 			}
1079:src/display.c **** 	} else {
1080:src/display.c **** 		// Truncate down to the current word size and then sign extend it back
1081:src/display.c **** 		if (ws < 64) {
1082:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
1083:src/display.c **** 			vs &= mask;
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
1085:src/display.c **** 				vs |= ~mask;
1086:src/display.c **** 		}
1087:src/display.c **** 
1088:src/display.c **** 		if (!UState.leadzero && vs == 0) {
1089:src/display.c **** 			set_dig_s(dig, '0', res);
1090:src/display.c **** 			return;
1091:src/display.c **** 		} else if (!UState.leadzero) {
1092:src/display.c **** 			v = (unsigned long long int)vs;
1093:src/display.c **** 			for (i=0; v != 0; i++) {
1094:src/display.c **** 				const int r = v % b;
1095:src/display.c **** 				v /= b;
1096:src/display.c **** 				buf[i] = DIGITS[r];
1097:src/display.c **** 			}
1098:src/display.c **** 		} else {
1099:src/display.c **** 			int n;
1100:src/display.c **** 			const unsigned int b1 = b >> 1;
1101:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1102:src/display.c **** 			v = (unsigned long long int)vs;
1103:src/display.c **** 
1104:src/display.c **** 			n = (ws + fac) / (fac+1);
1105:src/display.c **** 			for (i=0; i<n; i++) {
1106:src/display.c **** 				const int r = v % b;
1107:src/display.c **** 				v /= b;
1108:src/display.c **** 				buf[i] = DIGITS[r];
1109:src/display.c **** 			}
1110:src/display.c **** 		}
1111:src/display.c **** 	}
1112:src/display.c **** 
1113:src/display.c **** 	/* At this point i is the number of digits in the output */
ARM GAS  /tmp/ccQmbpxO.s 			page 26


1114:src/display.c **** 	if (res) {
1115:src/display.c **** 		if (sign) *res++ = '-';
1116:src/display.c **** 		while (--i >= 0)
1117:src/display.c **** 			*res++ = buf[i];
1118:src/display.c **** 	} else {
1119:src/display.c **** #if 0
1120:src/display.c **** 		set_separator_decimal_modes();
1121:src/display.c **** 
1122:src/display.c **** 		// Allows configuration of digit grouping per base
1123:src/display.c **** 		static const char grouping[] = 
1124:src/display.c **** 			{       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1125:src/display.c **** 		      //	   2     3     4     5     6     7     8
1126:src/display.c **** 		          0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1127:src/display.c **** 		      //     9    10    11    12    13    14    15    16
1128:src/display.c **** 		const int shift = SeparatorMode == SEP_NONE ? 12 
1129:src/display.c **** 			        : grouping[b - 2] >> 4;
1130:src/display.c **** 		const int group = SeparatorMode == SEP_NONE ? 16
1131:src/display.c **** 				: (grouping[b - 2] & 0xf);
1132:src/display.c **** #else
1133:src/display.c **** 		// Less flexible but shorter
1134:src/display.c **** 		const int shift = b == 2 ? 8 : 12;
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
1136:src/display.c **** 				: b == 16 ? 2 : 3;
1137:src/display.c **** 		set_separator_decimal_modes();
1138:src/display.c **** #endif
1139:src/display.c **** 		IntMaxWindow = (i - 1) / shift;
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
1141:src/display.c **** 			State2.window = 0;
1142:src/display.c **** 		buf[i] = '\0';
1143:src/display.c **** 
1144:src/display.c **** 		j = State2.window * shift;	// digits at a time
1145:src/display.c **** 		for (k = 0; k < 12; k++)
1146:src/display.c **** 			if (buf[j + k] == '\0')
1147:src/display.c **** 				break;
1148:src/display.c **** 		for (i=0; --k >= 0; i++) {
1149:src/display.c **** 			int ch = buf[j++];
1150:src/display.c **** 			if (i >= shift)
1151:src/display.c **** 				ch -= 030;
1152:src/display.c **** 			set_dig(dig, ch);
1153:src/display.c **** 			if ((j % group) == 0 && k != 0)
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
1155:src/display.c **** 			dig -= SEGS_PER_DIGIT;
1156:src/display.c **** 		}
1157:src/display.c **** 		if (sign) {
1158:src/display.c **** 			if (dig >= 0)
1159:src/display.c **** 				set_dig(dig, '-');
1160:src/display.c **** 			else	SET_MANT_SIGN;
1161:src/display.c **** 		}
1162:src/display.c **** 	}
1163:src/display.c **** }
1164:src/display.c **** 
1165:src/display.c **** /* Handle special cases.
1166:src/display.c ****  * return non-zero if the number is special.
1167:src/display.c ****  */
1168:src/display.c **** static int check_special_dn(const decNumber *x, char *res) {
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
ARM GAS  /tmp/ccQmbpxO.s 			page 27


1171:src/display.c **** 			if (res) {
1172:src/display.c **** 				scopy(res, "NaN");
1173:src/display.c **** 			} else {
1174:src/display.c **** 				set_digits_string(S7_NaN, 0);
1175:src/display.c **** #ifndef REALBUILD
1176:src/display.c **** 				scopy(LastDisplayedNumber, S7_NaN_Text);
1177:src/display.c **** 				forceDispPlot=0;
1178:src/display.c **** #endif
1179:src/display.c **** 			}
1180:src/display.c **** 			return 1;
1181:src/display.c **** 		} else {
1182:src/display.c **** 			if (decNumberIsNegative(x)) {
1183:src/display.c **** 				if (res) *res++ = '-';
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
1185:src/display.c **** 			}
1186:src/display.c **** 			if (res)
1187:src/display.c **** 				*res++ = '\237';
1188:src/display.c **** 			else {
1189:src/display.c **** 				set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1190:src/display.c **** #ifndef REALBUILD
1191:src/display.c **** 				if (decNumberIsNegative(x)) {
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1193:src/display.c **** 				}
1194:src/display.c **** 				else {
1195:src/display.c **** 					scopy(LastDisplayedNumber, S7_INF_Text);
1196:src/display.c **** 				}
1197:src/display.c **** 				forceDispPlot=0;
1198:src/display.c **** #endif
1199:src/display.c **** 			}
1200:src/display.c **** 			return 1;
1201:src/display.c **** 		}
1202:src/display.c **** 	}
1203:src/display.c **** 	return 0;
1204:src/display.c **** }
1205:src/display.c **** 
1206:src/display.c **** 
1207:src/display.c **** /* Extract the two lowest integral digits from the number
1208:src/display.c ****  */
1209:src/display.c **** static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1210:src/display.c **** 	decNumber n;
1211:src/display.c **** 
1212:src/display.c **** 	decNumberMod(&n, x, &const_100);
1213:src/display.c **** 	*v = dn_to_int(&n);
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
1215:src/display.c **** 	decNumberTrunc(res, &n);
1216:src/display.c **** }
1217:src/display.c **** 
1218:src/display.c **** static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1218 81 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1219:src/display.c **** 	char b[32];
 276              		.loc 1 1219 2 view .LVU78
1220:src/display.c **** 	int i, j;
 277              		.loc 1 1220 2 view .LVU79
1221:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 28


1222:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1222 2 view .LVU80
 279              		.loc 1 1222 12 view .LVU81
1218:src/display.c **** 	char b[32];
 280              		.loc 1 1218 81 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1223:src/display.c **** 		if (v == 0)
1224:src/display.c **** 			b[i] = spaces?' ':'0';
1225:src/display.c **** 		else {
1226:src/display.c **** 			j = v % 10;
 290              		.loc 1 1226 10 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1218:src/display.c **** 	char b[32];
 292              		.loc 1 1218 81 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1218:src/display.c **** 	char b[32];
 295              		.loc 1 1218 81 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1222:src/display.c **** 		if (v == 0)
 298              		.loc 1 1222 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1223:src/display.c **** 		if (v == 0)
 302              		.loc 1 1223 3 is_stmt 1 view .LVU87
 303              		.loc 1 1226 4 view .LVU88
 304              		.loc 1 1226 10 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1227:src/display.c **** 			v /= 10;
 311              		.loc 1 1227 4 is_stmt 1 view .LVU90
1228:src/display.c **** 			b[i] = j + '0';
 312              		.loc 1 1228 13 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1222:src/display.c **** 		if (v == 0)
 315              		.loc 1 1222 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1223:src/display.c **** 			b[i] = spaces?' ':'0';
 317              		.loc 1 1223 6 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1222:src/display.c **** 		if (v == 0)
 319              		.loc 1 1222 2 view .LVU94
ARM GAS  /tmp/ccQmbpxO.s 			page 29


 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1228 9 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1227:src/display.c **** 			b[i] = j + '0';
 323              		.loc 1 1227 6 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1228 4 is_stmt 1 view .LVU97
1222:src/display.c **** 		if (v == 0)
 327              		.loc 1 1222 17 view .LVU98
1222:src/display.c **** 		if (v == 0)
 328              		.loc 1 1222 12 view .LVU99
1222:src/display.c **** 		if (v == 0)
 329              		.loc 1 1222 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1222:src/display.c **** 		if (v == 0)
 335              		.loc 1 1222 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1222:src/display.c **** 		if (v == 0)
 341              		.loc 1 1222 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1223:src/display.c **** 			b[i] = spaces?' ':'0';
 345              		.loc 1 1223 6 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1224:src/display.c **** 		else {
 349              		.loc 1 1224 4 is_stmt 1 view .LVU104
1222:src/display.c **** 		if (v == 0)
 350              		.loc 1 1222 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1222:src/display.c **** 		if (v == 0)
 353              		.loc 1 1222 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1224:src/display.c **** 		else {
 355              		.loc 1 1224 9 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1222:src/display.c **** 		if (v == 0)
 358              		.loc 1 1222 17 is_stmt 1 view .LVU108
1222:src/display.c **** 		if (v == 0)
 359              		.loc 1 1222 12 view .LVU109
1222:src/display.c **** 		if (v == 0)
 360              		.loc 1 1222 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
ARM GAS  /tmp/ccQmbpxO.s 			page 30


 363              	.LVL23:
1222:src/display.c **** 		if (v == 0)
 364              		.loc 1 1222 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1229:src/display.c **** 		}
1230:src/display.c **** 	}
1231:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1231 2 is_stmt 1 view .LVU112
 371              		.loc 1 1231 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1232:src/display.c **** 		b[0] = '0';
1233:src/display.c **** 
1234:src/display.c **** 	/* Copy across and appropriately leading space things
1235:src/display.c **** 	 */
1236:src/display.c **** 	j = *jin;
 374              		.loc 1 1236 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1231:src/display.c **** 		b[0] = '0';
 376              		.loc 1 1231 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1232:src/display.c **** 		b[0] = '0';
 378              		.loc 1 1232 3 is_stmt 1 view .LVU116
1232:src/display.c **** 		b[0] = '0';
 379              		.loc 1 1232 8 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1236 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1237:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1237 2 view .LVU119
 386              		.loc 1 1237 8 view .LVU120
1236:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1236 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1237 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1238:src/display.c **** 		str = set_dig_s(j, b[i], str);
 394              		.loc 1 1238 3 is_stmt 1 view .LVU123
 395              	.LBB132:
 396              	.LBB133:
 395:src/display.c **** 	else	set_dig(base, ch);
 397              		.loc 1 395 11 view .LVU124
 398              	.LBE133:
 399              	.LBE132:
 400              		.loc 1 1238 23 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB137:
 403              	.LBB134:
ARM GAS  /tmp/ccQmbpxO.s 			page 31


 395:src/display.c **** 	else	set_dig(base, ch);
 404              		.loc 1 395 15 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 395:src/display.c **** 	else	set_dig(base, ch);
 407              		.loc 1 395 15 view .LVU127
 408              	.LBE134:
 409              	.LBI132:
 394:src/display.c **** 	if (res) *res++ = ch;
 410              		.loc 1 394 14 is_stmt 1 view .LVU128
 411              	.LBB135:
 395:src/display.c **** 	else	set_dig(base, ch);
 412              		.loc 1 395 2 view .LVU129
 395:src/display.c **** 	else	set_dig(base, ch);
 413              		.loc 1 395 5 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 395:src/display.c **** 	else	set_dig(base, ch);
 416              		.loc 1 395 18 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 395:src/display.c **** 	else	set_dig(base, ch);
 419              		.loc 1 395 15 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 397:src/display.c **** }
 423              		.loc 1 397 2 is_stmt 1 view .LVU133
 397:src/display.c **** }
 424              		.loc 1 397 2 is_stmt 0 view .LVU134
 425              	.LBE135:
 426              	.LBE137:
1239:src/display.c **** 		j += SEGS_PER_DIGIT;
 427              		.loc 1 1239 3 is_stmt 1 view .LVU135
1237:src/display.c **** 		str = set_dig_s(j, b[i], str);
 428              		.loc 1 1237 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1239 5 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1237:src/display.c **** 		str = set_dig_s(j, b[i], str);
 434              		.loc 1 1237 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1240:src/display.c **** 	}
1241:src/display.c **** 	*jin = j;
 436              		.loc 1 1241 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1241 2 is_stmt 1 view .LVU140
 440              		.loc 1 1241 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1242:src/display.c **** 	return str;
1243:src/display.c **** }
 443              		.loc 1 1243 1 view .LVU142
 444 0092 2846     		mov	r0, r5
ARM GAS  /tmp/ccQmbpxO.s 			page 32


1241:src/display.c **** 	return str;
 445              		.loc 1 1241 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1242:src/display.c **** 	return str;
 447              		.loc 1 1242 2 is_stmt 1 view .LVU144
 448              		.loc 1 1243 1 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB138:
 458              	.LBB136:
 396:src/display.c **** 	return res;
 459              		.loc 1 396 7 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 396:src/display.c **** 	return res;
 463              		.loc 1 396 7 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE136:
 470              	.LBE138:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 412:src/display.c **** 	int i;
 485              		.loc 1 412 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 413:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 489              		.loc 1 413 2 view .LVU149
 414:src/display.c **** 
 490              		.loc 1 414 2 view .LVU150
 412:src/display.c **** 	int i;
 491              		.loc 1 412 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
ARM GAS  /tmp/ccQmbpxO.s 			page 33


 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 414:src/display.c **** 
 500              		.loc 1 414 32 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 416 2 is_stmt 1 view .LVU153
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 416 12 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB139:
 513              	.LBB140:
 396:src/display.c **** 	return res;
 514              		.loc 1 396 7 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 395:src/display.c **** 	else	set_dig(base, ch);
 519              		.loc 1 395 18 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 395:src/display.c **** 	else	set_dig(base, ch);
 522              		.loc 1 395 18 view .LVU157
 523              	.LBE140:
 524              	.LBE139:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 416 2 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB146:
 528              	.LBB141:
 395:src/display.c **** 	else	set_dig(base, ch);
 529              		.loc 1 395 15 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 397:src/display.c **** }
 532              		.loc 1 397 2 is_stmt 1 view .LVU160
 397:src/display.c **** }
 533              		.loc 1 397 2 is_stmt 0 view .LVU161
 534              	.LBE141:
 535              	.LBE146:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 416 35 is_stmt 1 view .LVU162
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 416 12 view .LVU163
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 416 2 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
ARM GAS  /tmp/ccQmbpxO.s 			page 34


 540              	.LVL42:
 541              	.L49:
 417:src/display.c **** }
 542              		.loc 1 417 3 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB147:
 544              	.LBB142:
 395:src/display.c **** 	else	set_dig(base, ch);
 545              		.loc 1 395 11 discriminator 3 view .LVU166
 395:src/display.c **** 	else	set_dig(base, ch);
 546              		.loc 1 395 11 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE142:
 548              	.LBE147:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 416 22 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB148:
 553              	.LBB143:
 395:src/display.c **** 	else	set_dig(base, ch);
 554              		.loc 1 395 15 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 395:src/display.c **** 	else	set_dig(base, ch);
 557              		.loc 1 395 15 discriminator 3 view .LVU170
 558              	.LBE143:
 559              	.LBI139:
 394:src/display.c **** 	if (res) *res++ = ch;
 560              		.loc 1 394 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB144:
 395:src/display.c **** 	else	set_dig(base, ch);
 562              		.loc 1 395 2 discriminator 3 view .LVU172
 563              	.LBE144:
 564              	.LBE148:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 416 16 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB149:
 569              	.LBB145:
 395:src/display.c **** 	else	set_dig(base, ch);
 570              		.loc 1 395 5 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 396:src/display.c **** 	return res;
 573              		.loc 1 396 7 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 397:src/display.c **** }
 578              		.loc 1 397 2 view .LVU176
 397:src/display.c **** }
 579              		.loc 1 397 2 is_stmt 0 view .LVU177
 580              	.LBE145:
 581              	.LBE149:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 416 35 is_stmt 1 view .LVU178
ARM GAS  /tmp/ccQmbpxO.s 			page 35


 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 416 12 view .LVU179
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 416 2 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 418:src/display.c **** 
 589              		.loc 1 418 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 418:src/display.c **** 
 591              		.loc 1 418 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1209:src/display.c **** 	decNumber n;
 606              		.loc 1 1209 69 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1210:src/display.c **** 
 610              		.loc 1 1210 2 view .LVU184
1212:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1212 2 view .LVU185
1209:src/display.c **** 	decNumber n;
 612              		.loc 1 1209 69 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1209:src/display.c **** 	decNumber n;
 621              		.loc 1 1209 69 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1212:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1212 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1212:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1212 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1209:src/display.c **** 	decNumber n;
ARM GAS  /tmp/ccQmbpxO.s 			page 36


 630              		.loc 1 1209 69 view .LVU190
 631 000c 0D46     		mov	r5, r1
1212:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1212 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1213:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1213 2 is_stmt 1 view .LVU192
1213:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1213 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1214:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1214 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1213:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1213 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1214:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1214 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1215:src/display.c **** }
 649              		.loc 1 1215 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1216:src/display.c **** 
 654              		.loc 1 1216 1 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1216:src/display.c **** 
 661              		.loc 1 1216 1 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.set_status_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	set_status_sized:
 677              	.LVL56:
 678              	.LFB37:
1244:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 37


1245:src/display.c **** 
1246:src/display.c **** /* Display the number in H.MS mode.
1247:src/display.c ****  * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1248:src/display.c ****  */
1249:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res) {
1250:src/display.c **** 	decNumber x, y, a, t, u;
1251:src/display.c **** 	int j=0;
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1253:src/display.c **** 	unsigned int hr, min, sec, fs;
1254:src/display.c **** 
1255:src/display.c **** 	if (check_special_dn(rgx, res)) {
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
1257:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
1258:src/display.c **** 		return;
1259:src/display.c **** 	}
1260:src/display.c **** 
1261:src/display.c **** 	set_separator_decimal_modes();
1262:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1263:src/display.c **** 	dn_abs(&a, rgx);
1264:src/display.c **** 	if (decNumberIsNegative(&x)) {
1265:src/display.c **** 		if (res != NULL)
1266:src/display.c **** 			*res++ += '-';
1267:src/display.c **** 		else
1268:src/display.c **** 			SET_MANT_SIGN;
1269:src/display.c **** 		dn_minus(&x, &x);
1270:src/display.c **** 	}
1271:src/display.c **** 
1272:src/display.c **** 	decNumberHR2HMS(&y, &x);
1273:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1274:src/display.c **** 	decNumberRound(&u, &t);
1275:src/display.c **** 
1276:src/display.c **** 	hms_step(&t, &u, &fs);
1277:src/display.c **** 	hms_step(&u, &t, &sec);
1278:src/display.c **** 	hms_step(&t, &u, &min);
1279:src/display.c **** 	hr = dn_to_int(&t);
1280:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1282:src/display.c **** 
1283:src/display.c **** 	// degrees
1284:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1285:src/display.c **** 	res = set_dig_s(j, '@', res);
1286:src/display.c **** 	j += SEGS_PER_DIGIT;
1287:src/display.c **** 
1288:src/display.c **** 	// minutes
1289:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
1291:src/display.c **** 	j += SEGS_PER_DIGIT;
1292:src/display.c **** 
1293:src/display.c **** 	// seconds
1294:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1296:src/display.c **** 
1297:src/display.c **** 	// Fractional seconds
1298:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1299:src/display.c **** 
1300:src/display.c **** 	// We're now pointing at the exponent's first digit...
1301:src/display.c **** 	res = set_dig_s(j, '"', res);
ARM GAS  /tmp/ccQmbpxO.s 			page 38


1302:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1303:src/display.c **** 
1304:src/display.c **** 	// Check for values too big or small
1305:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
1307:src/display.c **** 	} else if (! dn_eq0(&a)) {
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
1310:src/display.c **** 		}
1311:src/display.c **** 	}
1312:src/display.c **** }
1313:src/display.c **** 
1314:src/display.c **** 
1315:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res) {
1316:src/display.c **** 	decNumber x, w, n, d, t;
1317:src/display.c **** 	char buf[32], *p = buf;
1318:src/display.c **** 	int j;
1319:src/display.c **** 
1320:src/display.c **** 	if (check_special_dn(rgx, res))
1321:src/display.c **** 		return 1;
1322:src/display.c **** 	dn_abs(&x, rgx);
1323:src/display.c **** 	if (dn_ge(&x, &const_100000))
1324:src/display.c **** 		return 0;
1325:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1326:src/display.c **** 		return 0;
1327:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1328:src/display.c **** 		if (res != NULL)
1329:src/display.c **** 			*res++ += '-';
1330:src/display.c **** 		else
1331:src/display.c **** 			SET_MANT_SIGN;
1332:src/display.c **** 	}
1333:src/display.c **** 	decNumberFrac(&w, &x);
1334:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1335:src/display.c **** 
1336:src/display.c **** 	dn_divide(&t, &n, &d);
1337:src/display.c **** 	dn_compare(&t, &t, &w);
1338:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1339:src/display.c **** 
1340:src/display.c **** 	if (dn_eq(&n, &d)) {
1341:src/display.c **** 		dn_inc(&w);
1342:src/display.c **** 		decNumberZero(&n);
1343:src/display.c **** 	}
1344:src/display.c **** 
1345:src/display.c **** 	if (!UState.improperfrac) {
1346:src/display.c **** 		if (!dn_eq0(&w)) {
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
1348:src/display.c **** 			*p++ = ' ';
1349:src/display.c **** 		}
1350:src/display.c **** 	} else {
1351:src/display.c **** 		dn_multiply(&x, &w, &d);
1352:src/display.c **** 		dn_add(&n, &n, &x);
1353:src/display.c **** 	}
1354:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1355:src/display.c **** 	*p++ = '/';
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1357:src/display.c **** 	*p = '\0';
1358:src/display.c **** 	if ((p - 12) > buf) {
ARM GAS  /tmp/ccQmbpxO.s 			page 39


1359:src/display.c **** 		p -= 12;
1360:src/display.c **** 		*p = '<';
1361:src/display.c **** 	} else	p = buf;
1362:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
1364:src/display.c **** 		j += SEGS_PER_DIGIT;
1365:src/display.c **** 	}
1366:src/display.c **** 
1367:src/display.c **** 	if (dn_eq0(&t))
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
1369:src/display.c **** 	else if (decNumberIsNegative(&t))
1370:src/display.c **** 		p = (char *)S7_fract_LT;
1371:src/display.c **** 	else
1372:src/display.c **** 		p = (char *)S7_fract_GT;
1373:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
1375:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
1376:src/display.c **** 	}
1377:src/display.c **** 	return 1;
1378:src/display.c **** }
1379:src/display.c **** 
1380:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1381:src/display.c **** enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1382:src/display.c **** 	decNumber c;
1383:src/display.c **** 	int true_exp, x=0;
1384:src/display.c **** 	int min_pos_exp, max_neg_exp;
1385:src/display.c **** 
1386:src/display.c **** 	if ( mode != MODE_STD ) {
1387:src/display.c **** 		min_pos_exp = 9;
1388:src/display.c **** 		max_neg_exp = -5;
1389:src/display.c **** 	}
1390:src/display.c **** 	else {
1391:src/display.c **** 		min_pos_exp = 12;
1392:src/display.c **** 		max_neg_exp = -1 - dispdigs;
1393:src/display.c **** 	}
1394:src/display.c **** 
1395:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1396:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1397:src/display.c **** 
1398:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1399:src/display.c **** 		x = *dd;
1400:src/display.c **** 	}
1401:src/display.c **** 
1402:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1403:src/display.c **** 		// decimals needed; *dd adjusted to provide correct number
1404:src/display.c **** 		*dd += -true_exp;
1405:src/display.c **** 		return MODE_FIX;
1406:src/display.c **** 	}
1407:src/display.c **** 
1408:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1409:src/display.c **** 		return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1410:src/display.c **** 	}
1411:src/display.c **** 	else {
1412:src/display.c **** 		return MODE_STD;
1413:src/display.c **** 	}
1414:src/display.c ****  }
1415:src/display.c **** #else
ARM GAS  /tmp/ccQmbpxO.s 			page 40


1416:src/display.c **** enum display_modes std_round_fix(const decNumber *z) {
1417:src/display.c **** 	decNumber b, c;
1418:src/display.c **** 
1419:src/display.c **** 	dn_1(&b);
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
1421:src/display.c **** 	dn_abs(&c, z);
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1423:src/display.c **** 		return MODE_FIX;
1424:src/display.c **** 	return MODE_STD;
1425:src/display.c **** }
1426:src/display.c **** #endif
1427:src/display.c **** 
1428:src/display.c **** /* SHOW display mode
1429:src/display.c ****  * in double precision show left or right part
1430:src/display.c ****  * 4 + 12 + 3 or 6 + 10 + 4 version
1431:src/display.c ****  */
1432:src/display.c **** static void show_x(char *x, int exp) {
1433:src/display.c **** 	const int dbl = is_dblmode();
1434:src/display.c **** 	char *p;
1435:src/display.c **** 	int i, j;
1436:src/display.c **** 	char *upper_str;
1437:src/display.c **** 	enum separator_modes separator_mode;
1438:src/display.c **** 	char decimal_mark;
1439:src/display.c **** 	char thousands_sep;
1440:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1441:src/display.c **** 	const int grouping = 0;
1442:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1443:src/display.c **** 	const int grouping = !UState.nothousands;
1444:src/display.c **** #else
1445:src/display.c **** 	const int grouping = 1;
1446:src/display.c **** #endif
1447:src/display.c **** 	int negative;
1448:src/display.c **** 
1449:src/display.c **** 	if (x[0] == '-') {
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1451:src/display.c **** 		static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1452:src/display.c **** 
1453:src/display.c **** 		xcopy(x + 4, x + 1, 34);
1454:src/display.c **** 		xcopy(x, small_minus, 4);
1455:src/display.c **** 		x += 4;
1456:src/display.c **** 		negative = 4;
1457:src/display.c **** #else
1458:src/display.c **** 		++x;
1459:src/display.c **** 		negative = 1;
1460:src/display.c **** #endif
1461:src/display.c **** 	}
1462:src/display.c **** 	else negative = 0;
1463:src/display.c **** 
1464:src/display.c **** 	p = find_char(x, '\0');
1465:src/display.c **** 	xset(p, '0', 34 - (p - x));
1466:src/display.c **** 
1467:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1468:src/display.c **** 		separator_mode = SEP_COMMA;
1469:src/display.c **** 		decimal_mark = '.';
1470:src/display.c **** 		thousands_sep = ',';
1471:src/display.c **** 	}
1472:src/display.c **** 	else {
ARM GAS  /tmp/ccQmbpxO.s 			page 41


1473:src/display.c **** 		separator_mode = SEP_DOT;
1474:src/display.c **** 		decimal_mark = ',';
1475:src/display.c **** 		thousands_sep = '.';
1476:src/display.c **** 	}
1477:src/display.c **** 
1478:src/display.c **** 	if (State2.window) { // right half in double precision mode
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1480:src/display.c **** 		static const char small_dots[13] = { '\007', '\341', ',', '\006',
1481:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1482:src/display.c **** 
1483:src/display.c **** 		upper_str = x + 3;
1484:src/display.c **** 		xcopy(upper_str, small_dots, 13);
1485:src/display.c **** 		if (grouping) {
1486:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1487:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
1488:src/display.c **** 			x += 3 + 13 + 7;
1489:src/display.c **** 		}
1490:src/display.c **** 		else x += 3 + 13 + 6;
1491:src/display.c **** #else
1492:src/display.c **** 		upper_str = x + 13;
1493:src/display.c **** 		xset(upper_str, '.', 3);
1494:src/display.c **** 		if (grouping) {
1495:src/display.c **** 			xcopy(upper_str + 7, upper_str + 6, 19);
1496:src/display.c **** 			upper_str[6] = thousands_sep;
1497:src/display.c **** 			x += 13 + 3 + 7;
1498:src/display.c **** 		}
1499:src/display.c **** 		else x += 13 + 3 + 6;
1500:src/display.c **** #endif
1501:src/display.c **** 		negative = 0;
1502:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
1503:src/display.c **** 	}
1504:src/display.c **** 	else {
1505:src/display.c **** 		upper_str = x;
1506:src/display.c **** 		xcopy(x + 2, x + 1, 16);
1507:src/display.c **** 		x[1] = decimal_mark;
1508:src/display.c **** 		if (grouping) {
1509:src/display.c **** 			xcopy(x + 6, x + 5, 13);
1510:src/display.c **** 			x[5] = thousands_sep;
1511:src/display.c **** 			x += 9;
1512:src/display.c **** 		}
1513:src/display.c **** 		else x += 8;
1514:src/display.c **** 		if (dbl) {
1515:src/display.c **** 			if (exp < 0) {
1516:src/display.c **** 				x[9] = '-';
1517:src/display.c **** 				exp = -exp;
1518:src/display.c **** 			}
1519:src/display.c **** 			else
1520:src/display.c **** 				x[9] = ' ';
1521:src/display.c **** 			j = exp / 1000;
1522:src/display.c **** 			x[10] = '0' + j;
1523:src/display.c **** 			exp -= 1000 * j;
1524:src/display.c **** 		}
1525:src/display.c **** 		else {
1526:src/display.c **** 			x[9] = '\0';
1527:src/display.c **** 			x[10] = '\0';
1528:src/display.c **** 		}
1529:src/display.c **** 		xcopy(x + 1, x, 11);
ARM GAS  /tmp/ccQmbpxO.s 			page 42


1530:src/display.c **** 		*x = 0;
1531:src/display.c **** 		set_exp(exp, 1, CNULL);
1532:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
1533:src/display.c **** 	}
1534:src/display.c **** 	if (grouping) {
1535:src/display.c **** 		for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
1537:src/display.c **** 		}
1538:src/display.c **** 	}
1539:src/display.c **** 
1540:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1541:src/display.c **** 		set_dig(j, x[i]);
1542:src/display.c **** 
1543:src/display.c **** 	*x = '\0';
1544:src/display.c **** 	set_status(upper_str - negative);
1545:src/display.c **** }
1546:src/display.c **** 
1547:src/display.c **** 
1548:src/display.c **** /* Display the X register in the numeric portion of the display.
1549:src/display.c ****  * We have to account for the various display modes and numbers of
1550:src/display.c ****  * digits.
1551:src/display.c ****  */
1552:src/display.c **** static void set_x(const REGISTER *rgx, char *res, int dbl) {
1553:src/display.c **** 	decNumber z;
1554:src/display.c **** 	int digits = DISPLAY_DIGITS;
1555:src/display.c **** 
1556:src/display.c **** 	if (dbl)
1557:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
1558:src/display.c **** 	else
1559:src/display.c **** 		decimal64ToNumber(&(rgx->s), &z);
1560:src/display.c **** 	set_x_dn(&z, res, &digits);
1561:src/display.c **** }
1562:src/display.c **** 
1563:src/display.c **** void set_x_dn(decNumber *z, char *res, int *display_digits) {
1564:src/display.c **** 	char x[50], *obp = x;
1565:src/display.c **** 	int odig = 0;
1566:src/display.c **** 	int show_exp = 0;
1567:src/display.c **** 	int j;
1568:src/display.c **** 	char mantissa[64];
1569:src/display.c **** 	int exp = 0;
1570:src/display.c **** 	char *p = mantissa;
1571:src/display.c **** 	char *r;
1572:src/display.c **** 	const char *q;
1573:src/display.c **** 	int count, i;
1574:src/display.c **** 	int extra_digits = 0;
1575:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1576:src/display.c **** 	int dd;
1577:src/display.c **** 	int dispdigs;
1578:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1579:src/display.c **** #else
1580:src/display.c **** 	int dd = UState.dispdigs;
1581:src/display.c **** 	int mode = UState.dispmode;
1582:src/display.c **** #endif
1583:src/display.c **** 	int c;
1584:src/display.c **** 	int negative = 0;
1585:src/display.c **** 	int trimzeros = 0;
1586:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
ARM GAS  /tmp/ccQmbpxO.s 			page 43


1587:src/display.c **** 	const int show_large_exponent = 0;
1588:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1589:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1590:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1591:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1592:src/display.c **** #else
1593:src/display.c **** 	const int show_large_exponent = 1;
1594:src/display.c **** #endif
1595:src/display.c **** 
1596:src/display.c **** 	set_separator_decimal_modes();
1597:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1598:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1599:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
1600:src/display.c **** 			if (State2.hms) {
1601:src/display.c **** 				set_x_hms(z, res);
1602:src/display.c ****  				return;
1603:src/display.c **** 			}
1604:src/display.c **** 			else if (UState.fract) {
1605:src/display.c **** 				if (set_x_fract(z, res))
1606:src/display.c **** 					return;
1607:src/display.c **** 			}
1608:src/display.c **** 		}
1609:src/display.c **** 	}		
1610:src/display.c **** #else
1611:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1612:src/display.c **** 		if (State2.hms) {
1613:src/display.c **** 			set_x_hms(z, res);
1614:src/display.c **** 			State2.hms = 0;
1615:src/display.c **** 			return;
1616:src/display.c **** 		} else if (UState.fract) {
1617:src/display.c **** 			if (set_x_fract(z, res))
1618:src/display.c **** 				return;
1619:src/display.c **** 		}
1620:src/display.c **** 	}
1621:src/display.c **** #endif
1622:src/display.c **** 
1623:src/display.c **** 	if (check_special_dn(z, res))
1624:src/display.c **** 		return;
1625:src/display.c **** 
1626:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
1628:src/display.c **** 		exp = z->exponent + z->digits - 1;
1629:src/display.c **** 		z->exponent = 0;
1630:src/display.c **** 	}
1631:src/display.c **** 
1632:src/display.c **** 	xset(x, '\0', sizeof(x));
1633:src/display.c **** 
1634:src/display.c **** 	if (dn_eq0(z)) {
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1636:src/display.c **** 			x[0] = '-';
1637:src/display.c **** 			x[1] = '0';
1638:src/display.c **** 		} else
1639:src/display.c **** 			x[0] = '0';
1640:src/display.c **** 	} else
1641:src/display.c **** 		decNumberToString(z, x);
1642:src/display.c **** 
1643:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
ARM GAS  /tmp/ccQmbpxO.s 			page 44


1644:src/display.c **** 		show_x(x, exp);
1645:src/display.c **** 		return;
1646:src/display.c **** 	}
1647:src/display.c **** 
1648:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1649:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1650:src/display.c **** 		//  ALL mode: fill the display
1651:src/display.c **** 		dd = *display_digits - 1;
1652:src/display.c **** 	else
1653:src/display.c **** 		dd = dispdigs;
1654:src/display.c **** 
1655:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1656:src/display.c **** 		int orig_mode = mode;
1657:src/display.c **** 
1658:src/display.c **** 		mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1659:src/display.c **** 		if (orig_mode != MODE_SIG0)
1660:src/display.c **** 			// allow zeros to be trimmed
1661:src/display.c **** 			trimzeros = 1;
1662:src/display.c **** 		if (orig_mode == MODE_STD)
1663:src/display.c **** 			dd = *display_digits - 1;
1664:src/display.c ****  	}
1665:src/display.c **** #else
1666:src/display.c **** 	if (mode == MODE_STD) {
1667:src/display.c **** 		mode = std_round_fix(z);
1668:src/display.c **** 		trimzeros = 1;
1669:src/display.c **** 		dd = *display_digits - 1;
1670:src/display.c **** 	} else if (dd >= *display_digits)
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
1672:src/display.c **** 		dd = *display_digits - 1;
1673:src/display.c **** #endif
1674:src/display.c **** 
1675:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
1676:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
1677:src/display.c **** 
1678:src/display.c **** 	q = find_char(x, 'E');
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1680:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
1681:src/display.c **** 	if (q == NULL) exp = 0;
1682:src/display.c **** 	else {
1683:src/display.c **** 		exp = s_to_i(q+1);
1684:src/display.c **** 		if (*q == 'D') exp = -exp;
1685:src/display.c **** 	}
1686:src/display.c **** #else
1687:src/display.c **** 	if (q == NULL) exp = 0;
1688:src/display.c **** 	else exp = s_to_i(q+1);
1689:src/display.c **** #endif
1690:src/display.c **** 
1691:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
1692:src/display.c **** 	for (q=x; *q == ' '; q++);
1693:src/display.c **** 	if (!res) {
1694:src/display.c **** 		CLR_EXP_SIGN;
1695:src/display.c **** 		CLR_MANT_SIGN;
1696:src/display.c **** 	}
1697:src/display.c **** 	if (*q == '-') {
1698:src/display.c **** 		negative = 1;
1699:src/display.c **** 		q++;
1700:src/display.c **** 	} else if (*q == '+')
ARM GAS  /tmp/ccQmbpxO.s 			page 45


1701:src/display.c **** 		q++;
1702:src/display.c **** 	for (; *q == '0'; q++);
1703:src/display.c **** 	if (*q == '.') {
1704:src/display.c **** 		do
1705:src/display.c **** 			exp--;
1706:src/display.c **** 		while (*++q == '0');
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
1708:src/display.c **** 			*p++ = *q++;
1709:src/display.c **** 	} else {
1710:src/display.c **** 		if (*q >= '0' && *q <= '9')
1711:src/display.c **** 			*p++ = *q++;
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
1713:src/display.c **** 			*p++ = *q++;
1714:src/display.c **** 			exp++;
1715:src/display.c **** 		}
1716:src/display.c **** 		if (*q == '.') {
1717:src/display.c **** 			q++;
1718:src/display.c **** 			while (*q >= '0' && *q <= '9')
1719:src/display.c **** 				*p++ = *q++;
1720:src/display.c **** 		}
1721:src/display.c **** 	}
1722:src/display.c **** 
1723:src/display.c **** 	if (mode == MODE_FIX) {
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
1726:src/display.c **** 		else {
1727:src/display.c **** 			extra_digits = exp;
1728:src/display.c **** 			/* We might have push the fixed decimals off the
1729:src/display.c **** 			 * screen so adjust if so.
1730:src/display.c **** 			 */
1731:src/display.c **** 			if (extra_digits + dd > (*display_digits - 1))
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
1733:src/display.c **** 		}
1734:src/display.c **** 	}
1735:src/display.c **** 
1736:src/display.c **** 	// Round the mantissa to the number of digits desired
1737:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
1738:src/display.c **** 	if (*p >= '5') {	// Round up
1739:src/display.c **** 		*p = '0';
1740:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
1743:src/display.c **** 			mantissa[0] = '1';
1744:src/display.c **** 			exp++;
1745:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
1747:src/display.c **** 				extra_digits = 0;
1748:src/display.c **** 			}
1749:src/display.c **** 		} else {
1750:src/display.c **** 			while (*--p == '9')
1751:src/display.c **** 				*p = '0';
1752:src/display.c **** 			(*p)++;
1753:src/display.c **** 		}
1754:src/display.c **** 	}
1755:src/display.c **** 
1756:src/display.c **** 	// Zap what is left
1757:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
ARM GAS  /tmp/ccQmbpxO.s 			page 46


1758:src/display.c **** 
1759:src/display.c **** 	p = mantissa;
1760:src/display.c **** 	switch (mode) {
1761:src/display.c **** 	default:
1762:src/display.c **** 	case MODE_STD:   
1763:src/display.c **** 		for (count = *display_digits; mantissa[count] == '0'; count--);
1764:src/display.c **** 		if (count != *display_digits)
1765:src/display.c **** 			count++;
1766:src/display.c **** 		// Too big or too small to fit on display
1767:src/display.c **** 		if (exp >= *display_digits || exp < (count - *display_digits)) {
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
1769:src/display.c **** 			case -1:
1770:src/display.c **** 			case 2:
1771:src/display.c **** 				*obp++ = *p++;
1772:src/display.c **** 				odig++;
1773:src/display.c **** 				dd--;
1774:src/display.c **** 				exp--;
1775:src/display.c **** 			case -2:
1776:src/display.c **** 			case 1:
1777:src/display.c **** 				*obp++ = *p++;
1778:src/display.c **** 				odig++;
1779:src/display.c **** 				dd--;
1780:src/display.c **** 				exp--;
1781:src/display.c **** 			case 0:
1782:src/display.c **** 				;
1783:src/display.c **** 			};
1784:src/display.c **** 			*obp++ = *p++;
1785:src/display.c **** 			odig++;
1786:src/display.c **** 			*obp++ = '.';
1787:src/display.c **** 			for (i=1; i<count; i++) {
1788:src/display.c **** 				*obp++ = *p++;
1789:src/display.c **** 				odig++;
1790:src/display.c **** 			}
1791:src/display.c **** 			show_exp = 1;
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
1793:src/display.c **** 			for(i=0; i<=exp; i++) {
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1795:src/display.c **** 					*obp++ = ',';
1796:src/display.c **** 				*obp++ = *p++;
1797:src/display.c **** 				odig++;
1798:src/display.c **** 			}
1799:src/display.c **** 			*obp++ = '.';
1800:src/display.c **** 			if (count > (exp + 1)) {
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
1802:src/display.c **** 					*obp++ = *p++;
1803:src/display.c **** 					odig++;
1804:src/display.c **** 				}
1805:src/display.c **** 			}
1806:src/display.c **** 		} else {		// All digits to right of decimal point
1807:src/display.c **** 			*obp++ = '0';
1808:src/display.c **** 			odig++;
1809:src/display.c **** 			*obp++ = '.';
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
1811:src/display.c **** 				*obp++ = '0';
1812:src/display.c **** 				odig++;
1813:src/display.c **** 			}
1814:src/display.c **** 			for (i=0; i<count; i++) {
ARM GAS  /tmp/ccQmbpxO.s 			page 47


1815:src/display.c **** 				*obp++ = *p++;
1816:src/display.c **** 				odig++;
1817:src/display.c **** 			}
1818:src/display.c **** 		}
1819:src/display.c **** 		break;
1820:src/display.c **** 
1821:src/display.c **** 	case MODE_FIX:
1822:src/display.c **** 		j = 0;
1823:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1826:src/display.c **** 					*obp++ = ',';
1827:src/display.c **** 				*obp++ = *p++;
1828:src/display.c **** 				odig++;
1829:src/display.c **** 			}
1830:src/display.c **** 			*obp++ = '.';
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
1832:src/display.c **** 				*obp++ = *p++;
1833:src/display.c **** 				odig++;
1834:src/display.c **** 			}
1835:src/display.c **** 		} else {		// All digits to right of decimal point
1836:src/display.c **** 			*obp++ = '0';
1837:src/display.c **** 			odig++;
1838:src/display.c **** 			*obp++ = '.';
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
1840:src/display.c **** 				*obp++ = '0';
1841:src/display.c **** 				odig++;
1842:src/display.c **** 				dd--;
1843:src/display.c **** 			}
1844:src/display.c **** 			while (dd-- > 0) {
1845:src/display.c **** 				*obp++ = *p++;
1846:src/display.c **** 				odig++;
1847:src/display.c **** 			}
1848:src/display.c **** 		}
1849:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
1850:src/display.c **** 		if (trimzeros)
1851:src/display.c **** 			while (obp > x && obp[-1] == '0') {
1852:src/display.c **** 				obp--;
1853:src/display.c **** 				odig--;
1854:src/display.c **** 			}
1855:src/display.c **** #endif			
1856:src/display.c **** 		break;
1857:src/display.c **** 
1858:src/display.c **** 	case MODE_ENG:
1859:src/display.c **** 		switch (exp % 3) {
1860:src/display.c **** 		case -1:
1861:src/display.c **** 		case 2:
1862:src/display.c **** 			*obp++ = *p++;
1863:src/display.c **** 			odig++;
1864:src/display.c **** 			dd--;
1865:src/display.c **** 			exp--;
1866:src/display.c **** 		case -2:
1867:src/display.c **** 		case 1:
1868:src/display.c **** 			*obp++ = *p++;
1869:src/display.c **** 			odig++;
1870:src/display.c **** 			dd--;
1871:src/display.c **** 			exp--;
ARM GAS  /tmp/ccQmbpxO.s 			page 48


1872:src/display.c **** 		case 0:
1873:src/display.c **** 			;
1874:src/display.c **** 		};
1875:src/display.c **** 	// Falling through
1876:src/display.c **** 
1877:src/display.c **** 	case MODE_SCI:
1878:src/display.c **** 		*obp++ = *p++;
1879:src/display.c **** 		odig++;
1880:src/display.c **** 		*obp++ = '.';
1881:src/display.c **** 		dd--;
1882:src/display.c **** 		while (dd-- >= 0) {
1883:src/display.c **** 			*obp++ = *p++;
1884:src/display.c **** 			odig++;
1885:src/display.c **** 		}
1886:src/display.c **** 		show_exp = 1;
1887:src/display.c **** 	}
1888:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1889:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
1890:src/display.c **** 		while (obp > x && obp[-1] == '0') {
1891:src/display.c **** 			obp--;
1892:src/display.c **** 			odig--;
1893:src/display.c **** 		}
1894:src/display.c **** #endif	
1895:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
1896:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
1897:src/display.c **** 		set_x_dn(z, res, display_digits);
1898:src/display.c **** 		return;
1899:src/display.c **** 	}
1900:src/display.c **** 	/* Finally, send the output to the display */
1901:src/display.c **** 	*obp = '\0';
1902:src/display.c **** 	if (odig > *display_digits)
1903:src/display.c **** 		odig = *display_digits;
1904:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
1906:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
1907:src/display.c **** 	if (negative) {
1908:src/display.c **** 		if (res) *res++ = '-';
1909:src/display.c **** 		else {
1910:src/display.c **** 			if (j == 0)
1911:src/display.c **** 				SET_MANT_SIGN;
1912:src/display.c **** 			else
1913:src/display.c **** 				set_dig(j - SEGS_PER_DIGIT, '-');
1914:src/display.c **** 		}
1915:src/display.c **** 	}
1916:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
1917:src/display.c **** 		if (c == '.') {
1918:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1919:src/display.c **** 		} else if (c == ',') {
1920:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
1921:src/display.c **** 		} else {
1922:src/display.c **** 			res = set_dig_s(j, c, res);
1923:src/display.c **** 			j += SEGS_PER_DIGIT;
1924:src/display.c **** 		}
1925:src/display.c **** 	}
1926:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
1927:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
1928:src/display.c **** 		if ( !res ) {
ARM GAS  /tmp/ccQmbpxO.s 			page 49


1929:src/display.c **** 				set_exp(exp, 4, res);
1930:src/display.c **** 		}
1931:src/display.c **** 		else {
1932:src/display.c **** 			set_exp(exp, 0, res);
1933:src/display.c **** 		}
1934:src/display.c **** 	}
1935:src/display.c **** #else
1936:src/display.c **** 	if (show_exp)
1937:src/display.c **** 		set_exp(exp, 0, res);
1938:src/display.c **** #endif
1939:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
1941:src/display.c **** 	*display_digits = odig;
1942:src/display.c **** }
1943:src/display.c **** 
1944:src/display.c **** #if defined(QTGUI) || defined(IOS)
1945:src/display.c **** void format_display(char *buf) {
1946:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
1947:src/display.c **** 	{
1948:src/display.c **** 		const char *p = get_cmdline();
1949:src/display.c **** 		if (p == NULL) {
1950:src/display.c **** 			format_reg(regX_idx, buf);
1951:src/display.c **** 		} else {
1952:src/display.c **** 			scopy(buf, p);
1953:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
1954:src/display.c **** 			if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
1955:src/display.c **** 				scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
1956:src/display.c **** 				buf[CmdLineEex] = 'E';
1957:src/display.c **** 				buf[CmdLineEex+1] = '-';
1958:src/display.c **** 			}
1959:src/display.c **** #  endif
1960:src/display.c **** 		}
1961:src/display.c **** 	}
1962:src/display.c **** 	else {
1963:src/display.c **** 		buf[0]=0;
1964:src/display.c **** 	}
1965:src/display.c **** }
1966:src/display.c **** #endif
1967:src/display.c **** 
1968:src/display.c **** void format_reg(int index, char *buf) {
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
1970:src/display.c **** 
1971:src/display.c **** 	if (is_intmode())
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
1973:src/display.c **** #ifndef HP16C_MODE_CHANGE
1974:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
1975:src/display.c **** 		decNumber x;
1976:src/display.c **** 		int s;
1977:src/display.c **** 		unsigned long long int v;
1978:src/display.c **** 
1979:src/display.c **** 		getRegister(&x, index);
1980:src/display.c **** 		v = dn_to_ull(&x, &s);
1981:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
1982:src/display.c **** 	}
1983:src/display.c **** #endif
1984:src/display.c **** 	else
1985:src/display.c **** 		set_x(r, buf, UState.mode_double);
ARM GAS  /tmp/ccQmbpxO.s 			page 50


1986:src/display.c **** }
1987:src/display.c **** 
1988:src/display.c **** /* Display the status screen */
1989:src/display.c **** static void show_status(void) {
1990:src/display.c **** 	int i, n;
1991:src/display.c **** 	int j = SEGS_EXP_BASE;
1992:src/display.c **** 	const int status = State2.status - 3;
1993:src/display.c **** 	char buf[16], *p = buf;
1994:src/display.c **** 	unsigned int pc;
1995:src/display.c **** 
1996:src/display.c **** 	if (status == -2) {
1997:src/display.c **** 		set_status("Free:");
1998:src/display.c **** 		p = num_arg(buf, free_mem());
1999:src/display.c **** 		p = scopy(p, " , FL. ");
2000:src/display.c **** 		p = num_arg(p, free_flash());
2001:src/display.c **** 		*p = '\0';
2002:src/display.c **** 		set_digits_string(buf, 0);
2003:src/display.c **** 	}
2004:src/display.c **** 	else if (status == -1) {
2005:src/display.c **** 		/* Top line */
2006:src/display.c **** 		p = scopy(buf, "Regs:");
2007:src/display.c **** 		if (SizeStatRegs)
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
2009:src/display.c **** 		*p = '\0';
2010:src/display.c **** 		set_status(buf);
2011:src/display.c **** 
2012:src/display.c **** 		/* Bottom line */
2013:src/display.c **** 		p = num_arg(buf, global_regs());
2014:src/display.c **** 		if (LocalRegs < 0) {
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
2016:src/display.c **** 			p = num_arg(p, local_regs());
2017:src/display.c **** 		}
2018:src/display.c **** 		*p = '\0';
2019:src/display.c **** 		set_digits_string(buf, 0);
2020:src/display.c **** 	} else {
2021:src/display.c **** 		int base;
2022:src/display.c **** 		int end;
2023:src/display.c **** 		int group = 10;
2024:src/display.c **** 		int start = 0;
2025:src/display.c **** 		
2026:src/display.c **** 		if (status <= 9) {
2027:src/display.c **** 			base = 10 * status;
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
2029:src/display.c **** 			p = scopy(buf, "FL ");
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
2031:src/display.c **** 			*p++ = '-';
2032:src/display.c **** 			p = num_arg_0(p, end, 2);
2033:src/display.c **** 			*p = '\0';
2034:src/display.c **** 			set_status(buf);
2035:src/display.c **** 		}
2036:src/display.c **** 		else if (status == 10) {
2037:src/display.c **** 			base = regX_idx;
2038:src/display.c **** 			end = regK_idx;
2039:src/display.c **** 			start = 3;
2040:src/display.c **** 			group = 4;
2041:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
2042:src/display.c **** 		}
ARM GAS  /tmp/ccQmbpxO.s 			page 51


2043:src/display.c **** 		else { // status == 11
2044:src/display.c **** 			base = LOCAL_FLAG_BASE;
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
2046:src/display.c **** 			set_status("FL.00-.15");
2047:src/display.c **** 		}
2048:src/display.c **** 		j = start * SEGS_PER_DIGIT;
2049:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
2050:src/display.c **** 		j += SEGS_PER_DIGIT;
2051:src/display.c **** 		for (i = start; i < group + start; i++) {
2052:src/display.c **** 			int k = i + base - start;
2053:src/display.c **** 			int l = get_user_flag(k);
2054:src/display.c **** 			k += group;
2055:src/display.c **** 			if (end >= k) {
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
2057:src/display.c **** 				k += group;
2058:src/display.c **** 				if (end >= k)
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
2060:src/display.c **** 			}
2061:src/display.c **** 			set_dig(j, l);
2062:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
2063:src/display.c **** 			j += SEGS_PER_DIGIT;
2064:src/display.c **** 			if (i == 4) {
2065:src/display.c **** 				set_dig(j, 8);
2066:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
2067:src/display.c **** 				j += SEGS_PER_DIGIT;
2068:src/display.c **** 			}
2069:src/display.c **** 		}
2070:src/display.c **** 	}
2071:src/display.c **** 
2072:src/display.c **** 	j = SEGS_EXP_BASE;
2073:src/display.c **** 	pc = state_pc();
2074:src/display.c **** 	if (isXROM(pc))
2075:src/display.c **** 		pc = 1;
2076:src/display.c **** 	for (n=i=0; i<4; i++) {
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2078:src/display.c **** 			if (++n == 4) {
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2081:src/display.c **** 			} else {
2082:src/display.c **** 				set_dig(j, 'A'+i);
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
2084:src/display.c **** 			}
2085:src/display.c **** 		}
2086:src/display.c **** 	}
2087:src/display.c **** }
2088:src/display.c **** 
2089:src/display.c **** 
2090:src/display.c **** /* Display the list of alpha labels */
2091:src/display.c **** static void show_label(void) {
2092:src/display.c **** 	char buf[16];
2093:src/display.c **** 	unsigned short int pc = State2.digval;
2094:src/display.c **** 	unsigned int op = getprog(pc);
2095:src/display.c **** 	int n = nLIB(pc);
2096:src/display.c **** 	unsigned short int lblpc;
2097:src/display.c **** 
2098:src/display.c **** 	set_status(prt((opcode)op, buf));
2099:src/display.c **** 	set_digits_string(libname[n], 0);
ARM GAS  /tmp/ccQmbpxO.s 			page 52


2100:src/display.c **** #ifndef REALBUILD
2101:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2102:src/display.c **** #endif
2103:src/display.c **** 
2104:src/display.c **** 	if (op & OP_DBL) {
2105:src/display.c **** 		lblpc = findmultilbl(op, 0);
2106:src/display.c **** 		if (lblpc != pc) {
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2108:src/display.c **** 			n = nLIB(lblpc);
2109:src/display.c **** 			if (n == REGION_RAM)
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
2111:src/display.c **** 			else {
2112:src/display.c **** 				set_exp_digits_string(libname[n], CNULL);
2113:src/display.c **** #ifndef REALBUILD
2114:src/display.c **** 				scopy(LastDisplayedNumber, libname_text[n]);
2115:src/display.c **** #endif
2116:src/display.c **** 			}
2117:src/display.c **** 		}
2118:src/display.c **** 	}
2119:src/display.c **** }
2120:src/display.c **** 
2121:src/display.c **** /* Display a list of register contents */
2122:src/display.c **** static void show_registers(void) {
2123:src/display.c **** 	char buf[16], *bp;
2124:src/display.c **** 	int n = State2.digval;
2125:src/display.c **** 	
2126:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2127:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2128:src/display.c **** 			State2.local   ? LOCAL_REG_BASE + n : 
2129:src/display.c **** 			n;
2130:src/display.c **** #else
2131:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2132:src/display.c **** 			n;
2133:src/display.c **** #endif
2134:src/display.c **** 
2135:src/display.c **** 	if (State2.disp_as_alpha) {
2136:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
2137:src/display.c **** 	}
2138:src/display.c **** 	else {
2139:src/display.c **** 		xset(buf, '\0', 16);
2140:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2141:src/display.c **** 		bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2142:src/display.c **** #else
2143:src/display.c **** 		bp = scopy_spc(buf, "Reg ");
2144:src/display.c **** #endif
2145:src/display.c **** 		if (State2.local) {
2146:src/display.c **** 			*bp++ = '.';
2147:src/display.c **** 			if (n >= 100) {
2148:src/display.c **** 				*bp++ = '1';
2149:src/display.c **** 				n -= 100;
2150:src/display.c **** 			}
2151:src/display.c **** 		}
2152:src/display.c **** 		if (n < 100)
2153:src/display.c **** 			bp = num_arg_0(bp, n, 2);
2154:src/display.c **** 		else
2155:src/display.c **** 			*bp++ = REGNAMES[n - regX_idx];
2156:src/display.c **** 		set_status(buf);
ARM GAS  /tmp/ccQmbpxO.s 			page 53


2157:src/display.c **** 	}
2158:src/display.c **** 	format_reg(reg, CNULL);
2159:src/display.c **** }
2160:src/display.c **** 
2161:src/display.c **** 
2162:src/display.c **** static void set_annunciators(void)
2163:src/display.c **** {
2164:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2165:src/display.c **** 
2166:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2167:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2168:src/display.c **** 	 * browsing constants.
2169:src/display.c **** 	 */
2170:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2171:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2172:src/display.c **** #else
2173:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2174:src/display.c **** #endif
2175:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2178:src/display.c **** 	set_IO_annunciator();
2179:src/display.c **** 
2180:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2181:src/display.c **** 	 */
2182:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2184:src/display.c **** }
2185:src/display.c **** 
2186:src/display.c **** 
2187:src/display.c **** /*
2188:src/display.c ****  *  Toggle the little "=" sign
2189:src/display.c ****  */
2190:src/display.c **** void set_IO_annunciator(void) {
2191:src/display.c **** #ifndef DM42
2192:src/display.c ****     int on = SerialOn
2193:src/display.c **** #endif
2194:src/display.c **** #ifdef DM42
2195:src/display.c ****     int on = 1
2196:src/display.c **** #endif
2197:src/display.c **** #ifdef REALBUILD
2198:src/display.c **** 	  || DebugFlag
2199:src/display.c **** #endif
2200:src/display.c **** #ifdef INFRARED
2201:src/display.c **** 	  || PrinterColumn != 0
2202:src/display.c **** #endif
2203:src/display.c **** 	;
2204:src/display.c **** 
2205:src/display.c **** 	if (on != IoAnnunciator) {
2206:src/display.c **** 		dot(LIT_EQ, on);
2207:src/display.c **** 		IoAnnunciator = on;
2208:src/display.c **** 		finish_display();
2209:src/display.c **** 	}
2210:src/display.c **** }
2211:src/display.c **** 
2212:src/display.c **** /*
2213:src/display.c ****  *  Update the display
ARM GAS  /tmp/ccQmbpxO.s 			page 54


2214:src/display.c ****  */
2215:src/display.c **** void display(void) {
2216:src/display.c **** 	int i, j;
2217:src/display.c **** 	char buf[40], *bp = buf;
2218:src/display.c **** 	const char *p;
2219:src/display.c **** 	int annuc = 0;
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2221:src/display.c **** 	int skip = 0;
2222:src/display.c **** 	int x_disp = 0;
2223:src/display.c **** 	const int shift = cur_shift();
2224:src/display.c **** 
2225:src/display.c **** 
2226:src/display.c **** 
2227:src/display.c **** 	if (State2.disp_freeze) {
2228:src/display.c **** 		State2.disp_freeze = 0;
2229:src/display.c **** 		State2.disp_temp = 1;
2230:src/display.c **** #ifdef CONSOLE
2231:src/display.c **** 		JustDisplayed = 1;
2232:src/display.c **** #endif
2233:src/display.c **** 		ShowRPN = 0;
2234:src/display.c **** 		return;
2235:src/display.c **** 	}
2236:src/display.c **** 
2237:src/display.c **** 	if (WasDataEntry) {
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
2239:src/display.c **** 		xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2240:src/display.c **** 		LastDisplayedNumber[NUMBER_LENGTH]=0;
2241:src/display.c **** 		xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2242:src/display.c **** 		LastDisplayedExponent[EXPONENT_LENGTH]=0;
2243:src/display.c **** #endif
2244:src/display.c **** 		wait_for_display(); // Normally called from reset_disp()
2245:src/display.c **** 
2246:src/display.c **** 		// Erase 7-segment display
2247:src/display.c **** 		for (i = 0; i <= EXP_SIGN; ++i) {
2248:src/display.c **** 			clr_dot(i);
2249:src/display.c **** 		}
2250:src/display.c **** 		goto only_update_x;
2251:src/display.c **** 	}
2252:src/display.c **** 
2253:src/display.c **** 	// Clear display
2254:src/display.c **** 	reset_disp();
2255:src/display.c **** 
2256:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2257:src/display.c **** 	if (State2.cmplx  && !cata) {
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
2259:src/display.c **** 		set_status(buf);
2260:src/display.c **** 	}
2261:src/display.c **** 	if (State2.version) {
2262:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
2264:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2265:src/display.c **** #ifndef REALBUILD
2266:src/display.c **** 		scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2267:src/display.c **** 		scopy(LastDisplayedExponent, " ");
2268:src/display.c **** #endif
2269:src/display.c **** 		xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2270:src/display.c **** 		set_status(vers);
ARM GAS  /tmp/ccQmbpxO.s 			page 55


2271:src/display.c **** 		skip = 1;
2272:src/display.c **** 		goto nostk;
2273:src/display.c **** 	} else if (State2.confirm) {
2274:src/display.c **** 		set_status(S_SURE);
2275:src/display.c **** 	} else if (State2.hyp) {
2276:src/display.c **** 		bp = scopy(bp, "HYP");
2277:src/display.c **** 		if (! State2.dot)
2278:src/display.c **** 			*bp++ = '\235';
2279:src/display.c **** 		set_status(buf);
2280:src/display.c **** 	} else if (State2.gtodot) {
2281:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2282:src/display.c **** 		bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2283:src/display.c **** 		if (State2.numdigit > 0)
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
2286:src/display.c **** 			*bp++ = '_';
2287:src/display.c **** 		set_status(buf);
2288:src/display.c **** 	} else if (State2.rarg) {
2289:src/display.c **** 		/* Commands with arguments */
2290:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2291:src/display.c **** 		if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2292:src/display.c **** 			bp = scopy(bp, "\177\006\006");
2293:src/display.c **** #endif
2294:src/display.c **** 		bp = scopy(bp, argcmds[CmdBase].cmd);
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
2296:src/display.c **** 		if (State2.dot) {
2297:src/display.c **** 			*bp++ = 's';
2298:src/display.c **** 			*bp++ = '_';
2299:src/display.c **** 		} else if (shift == SHIFT_F) {
2300:src/display.c **** 			*bp++ = '\021';
2301:src/display.c **** 			*bp++ = '_';
2302:src/display.c **** 		} else {
2303:src/display.c **** 			/* const int maxdigits = State2.shuffle ? 4 
2304:src/display.c **** 						: State2.ind ? 2 
2305:src/display.c **** 						: num_arg_digits(CmdBase); */
2306:src/display.c **** 			if (State2.local)
2307:src/display.c **** 				*bp++ = '.';
2308:src/display.c **** 			if (State2.numdigit > 0) {
2309:src/display.c **** 				if (State2.shuffle)
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
2312:src/display.c **** 				else
2313:src/display.c **** 					bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2314:src/display.c **** 			}
2315:src/display.c **** 			// for (i = State2.numdigit; i < maxdigits; i++)
2316:src/display.c **** 				*bp++ = '_';
2317:src/display.c **** 		}
2318:src/display.c **** 		set_status(buf);
2319:src/display.c **** 	} else if (State2.test != TST_NONE) {
2320:src/display.c **** 		*bp++ = 'x';
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
2322:src/display.c **** 		*bp++ = '_';
2323:src/display.c **** 		*bp++ = '?';
2324:src/display.c **** 		set_status(buf);
2325:src/display.c **** 	} else if (cata) {
2326:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
2327:src/display.c **** 		char b2[16];
ARM GAS  /tmp/ccQmbpxO.s 			page 56


2328:src/display.c **** 		const char *p;
2329:src/display.c **** 
2330:src/display.c **** 		bp = scopy(bp, "\177\006\006");
2331:src/display.c **** 		p = catcmd(op, b2);
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
2334:src/display.c **** 		bp = scopy(bp, p);
2335:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2336:src/display.c **** 			// State2.disp_small = 1;
2337:src/display.c **** 			if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
2339:src/display.c **** 			else
2340:src/display.c **** 				set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2341:src/display.c **** 			skip = 1;
2342:src/display.c **** 		} else if (State2.runmode) {
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
2344:src/display.c **** 				decNumber x, r;
2345:src/display.c **** 				decimal64 z;
2346:src/display.c **** 
2347:src/display.c **** 				getX(&x);
2348:src/display.c **** 				if (opKIND(op) == KIND_MON) {
2349:src/display.c **** 					const unsigned int f = argKIND(op);
2350:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2352:src/display.c **** 						update_speed(0);
2353:src/display.c **** 						fp(&r, &x);
2354:src/display.c **** 					}
2355:src/display.c **** 					else
2356:src/display.c **** 						set_NaN(&r);
2357:src/display.c **** 				} else
2358:src/display.c **** 					do_conv(&r, op & RARG_MASK, &x);
2359:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
2360:src/display.c **** 				packed_from_number(&z, &r);
2361:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
2362:src/display.c **** 				skip = 1;
2363:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
2365:src/display.c **** 				copyreg(&z, x);
2366:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
2367:src/display.c **** 				set_x(x, CNULL, is_dblmode());
2368:src/display.c **** 				copyreg(x, &z);
2369:src/display.c **** 				skip = 1;
2370:src/display.c **** 			}
2371:src/display.c **** 		}
2372:src/display.c **** 		set_status(buf);
2373:src/display.c **** 	} else if (State2.multi) {
2374:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2375:src/display.c **** 		if (State2.numdigit > 0) {
2376:src/display.c **** 			*bp++ = (char) State2.digval;
2377:src/display.c **** 			if (State2.numdigit > 1)
2378:src/display.c **** 				*bp++ = State2.digval2;
2379:src/display.c **** 		}
2380:src/display.c **** 		set_status(buf);
2381:src/display.c **** 	} else if (State2.status) {
2382:src/display.c **** 		show_status();
2383:src/display.c **** 		skip = 1;
2384:src/display.c **** 	} else if (State2.labellist) {
ARM GAS  /tmp/ccQmbpxO.s 			page 57


2385:src/display.c **** 		show_label();
2386:src/display.c **** 		skip = 1;
2387:src/display.c **** 	} else if (State2.registerlist) {
2388:src/display.c **** 		show_registers();
2389:src/display.c **** 		skip = 1;
2390:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2391:src/display.c **** 			annunciators();
2392:src/display.c **** 		}
2393:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2394:src/display.c **** 	} else if (State2.disp_as_alpha) {
2395:src/display.c **** 		set_status(alpha_rcl_s(regX_idx, buf));
2396:src/display.c **** #endif
2397:src/display.c **** 	} else if (State2.runmode) {
2398:src/display.c **** 		if (DispMsg) {
2399:src/display.c **** 			set_status(DispMsg);
2400:src/display.c **** 		} else if (DispPlot) {
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2402:src/display.c **** 		} else if (State2.alphas) {
2403:src/display.c **** #if 0
2404:src/display.c **** 			set_digits_string("AlpHA", 0);
2405:src/display.c **** #endif
2406:src/display.c **** 			bp = scopy(buf, Alpha);
2407:src/display.c **** 			j = State2.alpha_pos;
2408:src/display.c **** 			if (j != 0) {
2409:src/display.c **** 				i = slen(buf);
2410:src/display.c **** 				j *= 6;
2411:src/display.c **** 				if ( i - j >= 12 ) {
2412:src/display.c **** 					buf[ (i - j) ] = '\0';
2413:src/display.c **** 					set_status_right(buf);
2414:src/display.c **** 				}
2415:src/display.c **** 				else {
2416:src/display.c **** 					set_status(buf);
2417:src/display.c **** 				}
2418:src/display.c **** 			} else {
2419:src/display.c **** 				if (shift != SHIFT_N) {
2420:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
2421:src/display.c **** 					*bp++ = '\0';
2422:src/display.c **** 				}
2423:src/display.c **** 				set_status_right(buf);
2424:src/display.c **** 			}
2425:src/display.c **** 		} else {
2426:src/display.c **** 			annuc = 1;
2427:src/display.c **** 		}
2428:src/display.c **** 	} else {
2429:src/display.c **** #ifndef DM42
2430:src/display.c **** 	        show_progtrace(buf);
2431:src/display.c **** #endif
2432:src/display.c **** 		i = state_pc();
2433:src/display.c **** 		if (i > 0)
2434:src/display.c **** 			set_status(prt(getprog(i), buf));
2435:src/display.c **** 		else
2436:src/display.c **** 			set_status("");
2437:src/display.c **** 		set_dot(STO_annun);
2438:src/display.c **** #if 0
2439:src/display.c **** 		if (State2.smode == SDISP_SHOW) {
2440:src/display.c **** 			unsigned short int crc;
2441:src/display.c **** 			crc = checksum_program();
ARM GAS  /tmp/ccQmbpxO.s 			page 58


2442:src/display.c **** 			j = SEGS_PER_DIGIT * 0;
2443:src/display.c **** 			for (i=0; i<4; i++) {
2444:src/display.c **** 				set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
2445:src/display.c **** 				crc >>= 4;
2446:src/display.c **** 				j += SEGS_PER_DIGIT;
2447:src/display.c **** 			}
2448:src/display.c **** 			skip = 1;
2449:src/display.c **** 		}
2450:src/display.c **** 		else
2451:src/display.c **** #endif
2452:src/display.c **** 		if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2453:src/display.c **** 			annuc = 1;
2454:src/display.c **** 		goto nostk;
2455:src/display.c **** 	}
2456:src/display.c **** 	show_stack();
2457:src/display.c **** nostk:	show_flags();
2458:src/display.c **** 	if (!skip) {
2459:src/display.c **** 		if (State2.runmode) {
2460:src/display.c **** only_update_x:
2461:src/display.c **** 			p = get_cmdline();
2462:src/display.c **** 			if (p == NULL || cata) {
2463:src/display.c **** 				if (ShowRegister != -1) {
2464:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
2465:src/display.c **** 					format_reg(ShowRegister, CNULL);
2466:src/display.c **** 				}
2467:src/display.c **** 				else
2468:src/display.c **** 					set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2469:src/display.c **** 			} else {
2470:src/display.c **** 				disp_x(p);
2471:src/display.c **** 				x_disp = 1;
2472:src/display.c **** 			}
2473:src/display.c **** 			if (WasDataEntry) {
2474:src/display.c **** 				goto finish;
2475:src/display.c **** 			}
2476:src/display.c **** 		} else {
2477:src/display.c **** 			unsigned int pc = state_pc();
2478:src/display.c **** 			unsigned int upc = user_pc(pc);
2479:src/display.c **** 			const int n = nLIB(pc);
2480:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2481:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2482:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2483:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2484:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
2485:src/display.c **** #ifndef REALBUILD
2486:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2487:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2488:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2489:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2490:src/display.c ****       { // allow local declaration of b and l in C (not C++) on VisualStudio
2491:src/display.c **** 			  char *b=buf;
2492:src/display.c **** 			  char *l=LastDisplayedNumber;
2493:src/display.c **** 			  *l++=' ';
2494:src/display.c **** 			  while(*b) {
2495:src/display.c **** 				  *l++=*b++;
2496:src/display.c **** 				  *l++=' ';
2497:src/display.c **** 			  }
2498:src/display.c **** 			  *l=0;
ARM GAS  /tmp/ccQmbpxO.s 			page 59


2499:src/display.c ****       }
2500:src/display.c **** #endif
2501:src/display.c **** 		}
2502:src/display.c **** 	}
2503:src/display.c **** 	set_annunciators();
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2505:src/display.c **** 		ShowRPN = 0;
2506:src/display.c **** 		dot(RPN, 0);
2507:src/display.c **** 	}
2508:src/display.c **** 	// disp_temp disables the <- key
2509:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2510:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2511:src/display.c **** 
2512:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2513:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2514:src/display.c ****  		annunciators();
2515:src/display.c ****  	State2.hms = 0;
2516:src/display.c **** #else
2517:src/display.c **** 
2518:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2519:src/display.c **** 		annunciators();
2520:src/display.c **** 	
2521:src/display.c **** 
2522:src/display.c **** 
2523:src/display.c **** #endif
2524:src/display.c **** 
2525:src/display.c **** finish:
2526:src/display.c **** 	State2.version = 0;
2527:src/display.c **** 	State2.disp_as_alpha = 0;
2528:src/display.c **** 	State2.smode = SDISP_NORMAL;
2529:src/display.c **** 	State2.invalid_disp = 0;
2530:src/display.c **** 	ShowRegister = regX_idx;
2531:src/display.c **** 	DispMsg = CNULL;
2532:src/display.c **** 	DispPlot = 0;
2533:src/display.c **** 	State2.disp_small = 0;
2534:src/display.c **** 	finish_display();
2535:src/display.c **** #ifdef CONSOLE
2536:src/display.c **** 	JustDisplayed = 1;
2537:src/display.c **** #endif
2538:src/display.c **** }
2539:src/display.c **** 
2540:src/display.c **** /*
2541:src/display.c ****  *  Frozen display will revert to normal only after another call to display();
2542:src/display.c ****  */
2543:src/display.c **** void frozen_display()
2544:src/display.c **** {
2545:src/display.c **** 	State2.disp_freeze = 0;
2546:src/display.c **** 	display();
2547:src/display.c **** 	State2.disp_freeze = 1;
2548:src/display.c **** }
2549:src/display.c **** 
2550:src/display.c **** static void set_status_graphic(const unsigned char *graphic) {
2551:src/display.c **** 	int glen = *graphic++;
2552:src/display.c **** 	int i, j;
2553:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2554:src/display.c **** 	unsigned long long int mat[6];
2555:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 60


2556:src/display.c **** 	xset(mat, 0, sizeof(mat));
2557:src/display.c **** #endif
2558:src/display.c **** #ifndef REALBUILD
2559:src/display.c **** 	forceDispPlot=1;
2560:src/display.c **** #endif
2561:src/display.c **** 	if (glen <= 0)			return;
2562:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
2563:src/display.c **** 
2564:src/display.c **** 	for (i=0; i<6; i++)
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
2566:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2567:src/display.c **** 			if (graphic[j] & (1 << i))
2568:src/display.c **** 				mat[i] |= 1LL << j;
2569:src/display.c **** #else
2570:src/display.c **** 			dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
2571:src/display.c **** #endif
2572:src/display.c **** 		}
2573:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2574:src/display.c **** 	set_status_grob(mat);
2575:src/display.c **** #endif
2576:src/display.c **** }
2577:src/display.c **** 
2578:src/display.c **** 
2579:src/display.c **** /* Take the given string and display as much of it as possible on the top
2580:src/display.c ****  * line of the display.  The font size is set by the smallp parameter.
2581:src/display.c ****  * We allow character to go one pixel beyond the display since the rightmost
2582:src/display.c ****  * column is almost always blank.
2583:src/display.c ****  */
2584:src/display.c **** static void set_status_sized(const char *str, int smallp) {
 679              		.loc 1 2584 59 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 544
 682              		@ frame_needed = 0, uses_anonymous_args = 0
2585:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 2585 2 view .LVU201
2586:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2587:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
2588:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 2588 2 view .LVU202
2589:src/display.c **** #endif
2590:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 2590 2 view .LVU203
2591:src/display.c **** 	int i, j;
 686              		.loc 1 2591 2 view .LVU204
2592:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 2592 2 view .LVU205
2584:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 2584 59 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
ARM GAS  /tmp/ccQmbpxO.s 			page 61


 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
2593:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2594:src/display.c **** 	unsigned long long int mat[6];
2595:src/display.c **** 
2596:src/display.c **** 	xset(mat, 0, sizeof(mat));
2597:src/display.c **** #endif
2598:src/display.c **** #ifndef REALBUILD
2599:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 2599 2 view .LVU207
 701 0004 624C     		ldr	r4, .L113
2584:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 2584 59 view .LVU208
 703 0006 ADF5097D 		sub	sp, sp, #548
 704              		.cfi_def_cfa_offset 584
2592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 2592 34 view .LVU209
 706 000a 0B1E     		subs	r3, r1, #0
 707 000c 0293     		str	r3, [sp, #8]
2584:src/display.c **** 	unsigned short int posns[257];
 708              		.loc 1 2584 59 view .LVU210
 709 000e 0090     		str	r0, [sp]
2592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 2592 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713 0016 0023     		moveq	r3, #0
 714              		.loc 1 2599 2 view .LVU212
 715 0018 0146     		mov	r1, r0
 716              	.LVL57:
 717              		.loc 1 2599 2 view .LVU213
 718 001a 2046     		mov	r0, r4
 719              	.LVL58:
2592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 720              		.loc 1 2592 34 view .LVU214
 721 001c 0393     		str	r3, [sp, #12]
 722              	.LVL59:
 723              		.loc 1 2599 2 is_stmt 1 view .LVU215
 724 001e FFF7FEFF 		bl	scopy
 725              	.LVL60:
2600:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2601:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 726              		.loc 1 2601 2 view .LVU216
 727              		.loc 1 2601 14 view .LVU217
 728              		.loc 1 2601 31 is_stmt 0 view .LVU218
 729 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 730              		.loc 1 2601 2 view .LVU219
 731 0024 13B9     		cbnz	r3, .L70
 732 0026 07E0     		b	.L68
 733              	.LVL61:
 734              	.L69:
 735              		.loc 1 2601 14 is_stmt 1 discriminator 1 view .LVU220
 736 0028 0134     		adds	r4, r4, #1
 737              		.loc 1 2601 2 is_stmt 0 discriminator 1 view .LVU221
 738 002a 2BB1     		cbz	r3, .L68
 739              	.L70:
 740              	.LVL62:
ARM GAS  /tmp/ccQmbpxO.s 			page 62


2602:src/display.c **** 		if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 741              		.loc 1 2602 3 is_stmt 1 view .LVU222
 742              		.loc 1 2602 6 is_stmt 0 view .LVU223
 743 002c 072B     		cmp	r3, #7
 744              		.loc 1 2602 38 view .LVU224
 745 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 746              		.loc 1 2602 6 view .LVU225
 747 0030 FAD1     		bne	.L69
 748              		.loc 1 2602 38 discriminator 1 view .LVU226
 749 0032 002B     		cmp	r3, #0
 750 0034 40F09E80 		bne	.L109
 751              	.LVL63:
 752              	.L68:
2603:src/display.c **** 			scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
2604:src/display.c **** 			if (LastDisplayedText[i] != '\0')
2605:src/display.c **** 				++i;
2606:src/display.c **** 		}
2607:src/display.c **** 		else {
2608:src/display.c **** 			++i;
2609:src/display.c **** 		}
2610:src/display.c **** 	}
2611:src/display.c **** #endif
2612:src/display.c **** 	forceDispPlot=0;
 753              		.loc 1 2612 2 is_stmt 1 view .LVU227
2613:src/display.c **** #endif
2614:src/display.c **** #ifdef RP_PREFIX
2615:src/display.c **** 	RectPolConv = 0;
 754              		.loc 1 2615 14 is_stmt 0 view .LVU228
 755 0038 564B     		ldr	r3, .L113+4
2612:src/display.c **** #endif
 756              		.loc 1 2612 15 view .LVU229
 757 003a 574A     		ldr	r2, .L113+8
 758 003c 0027     		movs	r7, #0
 759              		.loc 1 2615 14 view .LVU230
 760 003e 1F60     		str	r7, [r3]
2616:src/display.c **** #endif
2617:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
2618:src/display.c **** 	findlengths(posns, smallp);
2619:src/display.c **** #endif
2620:src/display.c **** 	while (*str != '\0' && x <= BITMAP_WIDTH+1)  {
 761              		.loc 1 2620 9 view .LVU231
 762 0040 009B     		ldr	r3, [sp]
2612:src/display.c **** #endif
 763              		.loc 1 2612 15 view .LVU232
 764 0042 1770     		strb	r7, [r2]
2615:src/display.c **** #endif
 765              		.loc 1 2615 2 is_stmt 1 view .LVU233
 766              		.loc 1 2620 2 view .LVU234
 767              	.LVL64:
 768              		.loc 1 2620 8 view .LVU235
 769              		.loc 1 2620 9 is_stmt 0 view .LVU236
 770 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
2621:src/display.c **** 		int c;
2622:src/display.c **** 		int width;
2623:src/display.c **** 		unsigned char cmap[6];
2624:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2625:src/display.c **** 		int real_width;
ARM GAS  /tmp/ccQmbpxO.s 			page 63


2626:src/display.c **** 		int current_smallp;
2627:src/display.c **** 
2628:src/display.c **** 		// A 007 byte followed by a mode byte changes the way the following character is printed.
2629:src/display.c **** 		// Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
2630:src/display.c **** 		// Bits 6-5: 00 -> don't change font
2631:src/display.c **** 		//           01 -> (not used)
2632:src/display.c **** 		//           10 -> use big font
2633:src/display.c **** 		//           11 -> use small font
2634:src/display.c **** 		// Bits 4-0: character will be considered this wide
2635:src/display.c **** 		if (str[0] == '\007') {
2636:src/display.c **** 			width = str[1] & 0x1F;
2637:src/display.c **** 			switch (str[1] & 0x60) {
2638:src/display.c **** 			default:
2639:src/display.c **** 			case 0x00:	current_smallp = smallp;
2640:src/display.c **** 					break;
2641:src/display.c **** 			case 0x40:	current_smallp = 0;
2642:src/display.c **** 					break;
2643:src/display.c **** 			case 0x60:	current_smallp = 1;
2644:src/display.c **** 					break;
2645:src/display.c **** 			}
2646:src/display.c **** 			c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
2647:src/display.c **** 			str += 3;
2648:src/display.c **** 
2649:src/display.c **** 			real_width = charlengths(c);
2650:src/display.c **** 		} else {
2651:src/display.c **** 			c = (unsigned char) *str++ + offset;
2652:src/display.c **** 			real_width = width = charlengths(c);
2653:src/display.c **** 			current_smallp = smallp;
2654:src/display.c **** 		}
2655:src/display.c **** 
2656:src/display.c **** 		if (x + real_width > BITMAP_WIDTH+1)
2657:src/display.c **** 			break;
2658:src/display.c **** 
2659:src/display.c **** 		if (posns_state != current_smallp) {
2660:src/display.c **** 			findlengths(posns, current_smallp);
2661:src/display.c **** 			posns_state = current_smallp;
2662:src/display.c **** 		}
2663:src/display.c **** 		unpackchar(c, cmap, current_smallp, posns);
2664:src/display.c **** #else
2665:src/display.c **** 		c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
2666:src/display.c **** 
2667:src/display.c **** 		//cmap = &charset[c][0];
2668:src/display.c **** 		width = charlengths(c);
2669:src/display.c **** 
2670:src/display.c **** 		if (x + width > BITMAP_WIDTH+1)
2671:src/display.c **** 			break;
2672:src/display.c **** 
2673:src/display.c **** 		/* Decode the packed character bytes */
2674:src/display.c **** 		unpackchar(c, cmap, smallp, posns);
2675:src/display.c **** #endif
2676:src/display.c **** 
2677:src/display.c **** 		for (i=0; i<6; i++)
2678:src/display.c **** 			for (j=0; j<width; j++) {
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
2680:src/display.c **** 					break;
2681:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2682:src/display.c **** 				if (cmap[i] & (1 << j))
ARM GAS  /tmp/ccQmbpxO.s 			page 64


2683:src/display.c **** 					mat[i] |= 1LL << (x+j);
2684:src/display.c **** #else
2685:src/display.c **** 				dot((x+j)*6+i+MATRIX_BASE, (cmap[i] & (1 << j))?1:0);
2686:src/display.c **** #endif
2687:src/display.c **** 			}
2688:src/display.c **** 		x += width;
2689:src/display.c **** 	}
2690:src/display.c **** 
2691:src/display.c **** 
2692:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2693:src/display.c **** 	set_status_grob(mat);
2694:src/display.c **** #else
2695:src/display.c **** 	for (i=MATRIX_BASE + 6*x; i<400; i++)
 771              		.loc 1 2695 8 view .LVU237
 772 0046 8E24     		movs	r4, #142
2620:src/display.c **** 		int c;
 773              		.loc 1 2620 8 view .LVU238
 774 0048 002D     		cmp	r5, #0
 775 004a 7CD0     		beq	.L88
 776              	.LBB150:
2635:src/display.c **** 			width = str[1] & 0x1F;
 777              		.loc 1 2635 6 view .LVU239
 778 004c 072D     		cmp	r5, #7
 779              	.LBE150:
2588:src/display.c **** #endif
 780              		.loc 1 2588 6 view .LVU240
 781 004e 4FF0FF04 		mov	r4, #255
 782              	.LVL65:
 783              	.LBB159:
2621:src/display.c **** 		int width;
 784              		.loc 1 2621 3 is_stmt 1 view .LVU241
2622:src/display.c **** 		unsigned char cmap[6];
 785              		.loc 1 2622 3 view .LVU242
2623:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 786              		.loc 1 2623 3 view .LVU243
2625:src/display.c **** 		int current_smallp;
 787              		.loc 1 2625 3 view .LVU244
2626:src/display.c **** 
 788              		.loc 1 2626 3 view .LVU245
2635:src/display.c **** 			width = str[1] & 0x1F;
 789              		.loc 1 2635 3 view .LVU246
2635:src/display.c **** 			width = str[1] & 0x1F;
 790              		.loc 1 2635 6 is_stmt 0 view .LVU247
 791 0052 63D1     		bne	.L71
 792              	.L111:
2636:src/display.c **** 			switch (str[1] & 0x60) {
 793              		.loc 1 2636 4 is_stmt 1 view .LVU248
2636:src/display.c **** 			switch (str[1] & 0x60) {
 794              		.loc 1 2636 15 is_stmt 0 view .LVU249
 795 0054 009B     		ldr	r3, [sp]
 796              	.LVL66:
2636:src/display.c **** 			switch (str[1] & 0x60) {
 797              		.loc 1 2636 15 view .LVU250
 798 0056 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 799 0058 06F06003 		and	r3, r6, #96
2637:src/display.c **** 			default:
 800              		.loc 1 2637 4 view .LVU251
ARM GAS  /tmp/ccQmbpxO.s 			page 65


 801 005c 402B     		cmp	r3, #64
2636:src/display.c **** 			switch (str[1] & 0x60) {
 802              		.loc 1 2636 10 view .LVU252
 803 005e 06F01F06 		and	r6, r6, #31
 804              	.LVL67:
2637:src/display.c **** 			default:
 805              		.loc 1 2637 4 is_stmt 1 view .LVU253
 806 0062 7BD0     		beq	.L72
 807 0064 602B     		cmp	r3, #96
 808 0066 7ED0     		beq	.L73
 809              	.LVL68:
2646:src/display.c **** 			str += 3;
 810              		.loc 1 2646 4 view .LVU254
2646:src/display.c **** 			str += 3;
 811              		.loc 1 2646 8 is_stmt 0 view .LVU255
 812 0068 009B     		ldr	r3, [sp]
 813 006a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
2646:src/display.c **** 			str += 3;
 814              		.loc 1 2646 55 view .LVU256
 815 006c 029B     		ldr	r3, [sp, #8]
 816 006e 002B     		cmp	r3, #0
 817 0070 00F08A80 		beq	.L92
 818 0074 05F58075 		add	r5, r5, #256
 819 0078 9A46     		mov	r10, r3
 820              	.LVL69:
 821              	.L75:
2647:src/display.c **** 
 822              		.loc 1 2647 4 is_stmt 1 discriminator 4 view .LVU257
2649:src/display.c **** 		} else {
 823              		.loc 1 2649 17 is_stmt 0 discriminator 4 view .LVU258
 824 007a 2846     		mov	r0, r5
 825 007c FFF7FEFF 		bl	charlengths
 826              	.LVL70:
2647:src/display.c **** 
 827              		.loc 1 2647 8 discriminator 4 view .LVU259
 828 0080 009B     		ldr	r3, [sp]
2656:src/display.c **** 			break;
 829              		.loc 1 2656 9 discriminator 4 view .LVU260
 830 0082 3844     		add	r0, r0, r7
2647:src/display.c **** 
 831              		.loc 1 2647 8 discriminator 4 view .LVU261
 832 0084 0333     		adds	r3, r3, #3
2656:src/display.c **** 			break;
 833              		.loc 1 2656 6 discriminator 4 view .LVU262
 834 0086 2C28     		cmp	r0, #44
2647:src/display.c **** 
 835              		.loc 1 2647 8 discriminator 4 view .LVU263
 836 0088 0093     		str	r3, [sp]
 837              	.LVL71:
2649:src/display.c **** 		} else {
 838              		.loc 1 2649 4 is_stmt 1 discriminator 4 view .LVU264
2656:src/display.c **** 			break;
 839              		.loc 1 2656 3 discriminator 4 view .LVU265
2656:src/display.c **** 			break;
 840              		.loc 1 2656 6 is_stmt 0 discriminator 4 view .LVU266
 841 008a 55D8     		bhi	.L87
 842              	.L112:
ARM GAS  /tmp/ccQmbpxO.s 			page 66


2659:src/display.c **** 			findlengths(posns, current_smallp);
 843              		.loc 1 2659 3 is_stmt 1 view .LVU267
2659:src/display.c **** 			findlengths(posns, current_smallp);
 844              		.loc 1 2659 6 is_stmt 0 view .LVU268
 845 008c A245     		cmp	r10, r4
2660:src/display.c **** 			posns_state = current_smallp;
 846              		.loc 1 2660 4 view .LVU269
 847 008e 07AB     		add	r3, sp, #28
 848              	.LVL72:
2659:src/display.c **** 			findlengths(posns, current_smallp);
 849              		.loc 1 2659 6 view .LVU270
 850 0090 05D0     		beq	.L78
2660:src/display.c **** 			posns_state = current_smallp;
 851              		.loc 1 2660 4 is_stmt 1 view .LVU271
 852 0092 1846     		mov	r0, r3
 853 0094 5146     		mov	r1, r10
 854 0096 0193     		str	r3, [sp, #4]
 855 0098 FFF7FEFF 		bl	findlengths
 856              	.LVL73:
 857 009c 019B     		ldr	r3, [sp, #4]
2661:src/display.c **** 		}
 858              		.loc 1 2661 4 view .LVU272
 859              	.LVL74:
 860              	.L78:
2663:src/display.c **** #else
 861              		.loc 1 2663 3 view .LVU273
 862 009e 2846     		mov	r0, r5
 863 00a0 05A9     		add	r1, sp, #20
 864 00a2 5246     		mov	r2, r10
 865 00a4 07EB4708 		add	r8, r7, r7, lsl #1
 866 00a8 FFF7FEFF 		bl	unpackchar
 867              	.LVL75:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 868              		.loc 1 2677 3 view .LVU274
2677:src/display.c **** 			for (j=0; j<width; j++) {
 869              		.loc 1 2677 13 view .LVU275
 870 00ac 4FEA4808 		lsl	r8, r8, #1
 871 00b0 05AD     		add	r5, sp, #20
 872              	.LVL76:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 873              		.loc 1 2677 13 is_stmt 0 view .LVU276
 874 00b2 A8F58178 		sub	r8, r8, #258
2663:src/display.c **** #else
 875              		.loc 1 2663 3 view .LVU277
 876 00b6 4FF4C874 		mov	r4, #400
 877              	.LVL77:
 878              	.L79:
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 879              		.loc 1 2678 14 is_stmt 1 view .LVU278
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 880              		.loc 1 2678 4 is_stmt 0 view .LVU279
 881 00ba 002E     		cmp	r6, #0
 882 00bc 1FDD     		ble	.L85
2679:src/display.c **** 					break;
 883              		.loc 1 2679 5 is_stmt 1 view .LVU280
2679:src/display.c **** 					break;
 884              		.loc 1 2679 8 is_stmt 0 view .LVU281
ARM GAS  /tmp/ccQmbpxO.s 			page 67


 885 00be 2A2F     		cmp	r7, #42
 886 00c0 1DD8     		bhi	.L85
 887 00c2 08EB0409 		add	r9, r8, r4
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 888              		.loc 1 2678 10 view .LVU282
 889 00c6 4FF0000B 		mov	fp, #0
 890 00ca 09E0     		b	.L80
 891              	.LVL78:
 892              	.L110:
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 893              		.loc 1 2678 24 view .LVU283
 894 00cc 0BF1010B 		add	fp, fp, #1
 895              	.LVL79:
 896              	.LBB151:
 897              	.LBB152:
 327:src/display.c **** 	else	clr_dot(n);
 898              		.loc 1 327 10 view .LVU284
 899 00d0 FFF7FEFF 		bl	set_dot
 900              	.LVL80:
 327:src/display.c **** 	else	clr_dot(n);
 901              		.loc 1 327 10 view .LVU285
 902              	.LBE152:
 903              	.LBE151:
2679:src/display.c **** 					break;
 904              		.loc 1 2679 5 is_stmt 1 view .LVU286
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 905              		.loc 1 2678 23 view .LVU287
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 906              		.loc 1 2678 14 view .LVU288
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 907              		.loc 1 2678 4 is_stmt 0 view .LVU289
 908 00d4 5E45     		cmp	r6, fp
 909 00d6 09F10609 		add	r9, r9, #6
 910 00da 10D0     		beq	.L85
 911              	.L84:
2679:src/display.c **** 					break;
 912              		.loc 1 2679 8 view .LVU290
 913 00dc 4C45     		cmp	r4, r9
 914 00de 0ED0     		beq	.L85
 915              	.LVL81:
 916              	.L80:
2685:src/display.c **** #endif
 917              		.loc 1 2685 5 is_stmt 1 discriminator 2 view .LVU291
 918              	.LBB156:
 919              	.LBI151:
 326:src/display.c **** 	if (on)	set_dot(n);
 920              		.loc 1 326 6 discriminator 2 view .LVU292
 921              	.LBB153:
 327:src/display.c **** 	else	clr_dot(n);
 922              		.loc 1 327 2 discriminator 2 view .LVU293
 327:src/display.c **** 	else	clr_dot(n);
 923              		.loc 1 327 10 discriminator 2 view .LVU294
 328:src/display.c **** }
 924              		.loc 1 328 7 discriminator 2 view .LVU295
 925              	.LBE153:
 926              	.LBE156:
2685:src/display.c **** #endif
ARM GAS  /tmp/ccQmbpxO.s 			page 68


 927              		.loc 1 2685 37 is_stmt 0 discriminator 2 view .LVU296
 928 00e0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
2685:src/display.c **** #endif
 929              		.loc 1 2685 52 discriminator 2 view .LVU297
 930 00e2 41FA0BF1 		asr	r1, r1, fp
 931              	.LBB157:
 932              	.LBB154:
 327:src/display.c **** 	else	clr_dot(n);
 933              		.loc 1 327 5 discriminator 2 view .LVU298
 934 00e6 11F0010F 		tst	r1, #1
 327:src/display.c **** 	else	clr_dot(n);
 935              		.loc 1 327 10 discriminator 2 view .LVU299
 936 00ea 4846     		mov	r0, r9
 327:src/display.c **** 	else	clr_dot(n);
 937              		.loc 1 327 5 discriminator 2 view .LVU300
 938 00ec EED1     		bne	.L110
 939              	.LBE154:
 940              	.LBE157:
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 941              		.loc 1 2678 24 view .LVU301
 942 00ee 0BF1010B 		add	fp, fp, #1
 943              	.LVL82:
 944              	.LBB158:
 945              	.LBB155:
 328:src/display.c **** }
 946              		.loc 1 328 7 view .LVU302
 947 00f2 FFF7FEFF 		bl	clr_dot
 948              	.LVL83:
 328:src/display.c **** }
 949              		.loc 1 328 7 view .LVU303
 950              	.LBE155:
 951              	.LBE158:
2679:src/display.c **** 					break;
 952              		.loc 1 2679 5 is_stmt 1 view .LVU304
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 953              		.loc 1 2678 23 view .LVU305
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 954              		.loc 1 2678 14 view .LVU306
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 955              		.loc 1 2678 4 is_stmt 0 view .LVU307
 956 00f6 5E45     		cmp	r6, fp
 957 00f8 09F10609 		add	r9, r9, #6
 958 00fc EED1     		bne	.L84
 959              	.LVL84:
 960              	.L85:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 961              		.loc 1 2677 18 is_stmt 1 view .LVU308
2677:src/display.c **** 			for (j=0; j<width; j++) {
 962              		.loc 1 2677 13 view .LVU309
 963 00fe 0134     		adds	r4, r4, #1
 964              	.LVL85:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 965              		.loc 1 2677 3 is_stmt 0 view .LVU310
 966 0100 B4F5CB7F 		cmp	r4, #406
 967 0104 05F10105 		add	r5, r5, #1
 968 0108 D7D1     		bne	.L79
2688:src/display.c **** 	}
ARM GAS  /tmp/ccQmbpxO.s 			page 69


 969              		.loc 1 2688 3 is_stmt 1 view .LVU311
 970              	.LBE159:
2620:src/display.c **** 		int c;
 971              		.loc 1 2620 9 is_stmt 0 view .LVU312
 972 010a 009B     		ldr	r3, [sp]
 973 010c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 974              	.LBB160:
2688:src/display.c **** 	}
 975              		.loc 1 2688 5 view .LVU313
 976 010e 3744     		add	r7, r7, r6
 977              	.LVL86:
2688:src/display.c **** 	}
 978              		.loc 1 2688 5 view .LVU314
 979              	.LBE160:
2620:src/display.c **** 		int c;
 980              		.loc 1 2620 8 is_stmt 1 view .LVU315
 981 0110 95B1     		cbz	r5, .L87
2620:src/display.c **** 		int c;
 982              		.loc 1 2620 22 is_stmt 0 discriminator 1 view .LVU316
 983 0112 2C2F     		cmp	r7, #44
 984 0114 10D8     		bhi	.L87
 985              	.LBB161:
2635:src/display.c **** 			width = str[1] & 0x1F;
 986              		.loc 1 2635 6 view .LVU317
 987 0116 072D     		cmp	r5, #7
 988              	.LBE161:
 989 0118 5446     		mov	r4, r10
 990              	.LVL87:
 991              	.LBB162:
2621:src/display.c **** 		int width;
 992              		.loc 1 2621 3 is_stmt 1 view .LVU318
2622:src/display.c **** 		unsigned char cmap[6];
 993              		.loc 1 2622 3 view .LVU319
2623:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 994              		.loc 1 2623 3 view .LVU320
2625:src/display.c **** 		int current_smallp;
 995              		.loc 1 2625 3 view .LVU321
2626:src/display.c **** 
 996              		.loc 1 2626 3 view .LVU322
2635:src/display.c **** 			width = str[1] & 0x1F;
 997              		.loc 1 2635 3 view .LVU323
2635:src/display.c **** 			width = str[1] & 0x1F;
 998              		.loc 1 2635 6 is_stmt 0 view .LVU324
 999 011a 9BD0     		beq	.L111
 1000              	.LVL88:
 1001              	.L71:
2651:src/display.c **** 			real_width = width = charlengths(c);
 1002              		.loc 1 2651 4 is_stmt 1 view .LVU325
2651:src/display.c **** 			real_width = width = charlengths(c);
 1003              		.loc 1 2651 6 is_stmt 0 view .LVU326
 1004 011c 039B     		ldr	r3, [sp, #12]
 1005              	.LVL89:
2651:src/display.c **** 			real_width = width = charlengths(c);
 1006              		.loc 1 2651 6 view .LVU327
 1007 011e 1D44     		add	r5, r5, r3
2652:src/display.c **** 			current_smallp = smallp;
 1008              		.loc 1 2652 25 view .LVU328
ARM GAS  /tmp/ccQmbpxO.s 			page 70


 1009 0120 2846     		mov	r0, r5
 1010 0122 FFF7FEFF 		bl	charlengths
 1011              	.LVL90:
2651:src/display.c **** 			real_width = width = charlengths(c);
 1012              		.loc 1 2651 28 view .LVU329
 1013 0126 009B     		ldr	r3, [sp]
2652:src/display.c **** 			current_smallp = smallp;
 1014              		.loc 1 2652 23 view .LVU330
 1015 0128 DDF808A0 		ldr	r10, [sp, #8]
 1016 012c 0646     		mov	r6, r0
2656:src/display.c **** 			break;
 1017              		.loc 1 2656 9 view .LVU331
 1018 012e 3844     		add	r0, r0, r7
2651:src/display.c **** 			real_width = width = charlengths(c);
 1019              		.loc 1 2651 28 view .LVU332
 1020 0130 0133     		adds	r3, r3, #1
2656:src/display.c **** 			break;
 1021              		.loc 1 2656 6 view .LVU333
 1022 0132 2C28     		cmp	r0, #44
2651:src/display.c **** 			real_width = width = charlengths(c);
 1023              		.loc 1 2651 28 view .LVU334
 1024 0134 0093     		str	r3, [sp]
 1025              	.LVL91:
2652:src/display.c **** 			current_smallp = smallp;
 1026              		.loc 1 2652 4 is_stmt 1 view .LVU335
2653:src/display.c **** 		}
 1027              		.loc 1 2653 4 view .LVU336
2656:src/display.c **** 			break;
 1028              		.loc 1 2656 3 view .LVU337
2656:src/display.c **** 			break;
 1029              		.loc 1 2656 6 is_stmt 0 view .LVU338
 1030 0136 A9D9     		bls	.L112
 1031              	.LVL92:
 1032              	.L87:
2656:src/display.c **** 			break;
 1033              		.loc 1 2656 6 view .LVU339
 1034              	.LBE162:
 1035              		.loc 1 2695 2 is_stmt 1 view .LVU340
 1036              		.loc 1 2695 24 is_stmt 0 view .LVU341
 1037 0138 07EB4704 		add	r4, r7, r7, lsl #1
 1038 013c 6400     		lsls	r4, r4, #1
 1039              		.loc 1 2695 21 view .LVU342
 1040 013e 8E34     		adds	r4, r4, #142
 1041              	.LVL93:
 1042              		.loc 1 2695 28 is_stmt 1 view .LVU343
 1043              		.loc 1 2695 2 is_stmt 0 view .LVU344
 1044 0140 B4F5C87F 		cmp	r4, #400
 1045 0144 06DA     		bge	.L62
 1046              	.LVL94:
 1047              	.L88:
2696:src/display.c **** 		clr_dot(i);
 1048              		.loc 1 2696 3 is_stmt 1 discriminator 3 view .LVU345
 1049 0146 2046     		mov	r0, r4
2695:src/display.c **** 		clr_dot(i);
 1050              		.loc 1 2695 36 is_stmt 0 discriminator 3 view .LVU346
 1051 0148 0134     		adds	r4, r4, #1
 1052              	.LVL95:
ARM GAS  /tmp/ccQmbpxO.s 			page 71


 1053              		.loc 1 2696 3 discriminator 3 view .LVU347
 1054 014a FFF7FEFF 		bl	clr_dot
 1055              	.LVL96:
2695:src/display.c **** 		clr_dot(i);
 1056              		.loc 1 2695 35 is_stmt 1 discriminator 3 view .LVU348
2695:src/display.c **** 		clr_dot(i);
 1057              		.loc 1 2695 28 discriminator 3 view .LVU349
2695:src/display.c **** 		clr_dot(i);
 1058              		.loc 1 2695 2 is_stmt 0 discriminator 3 view .LVU350
 1059 014e B4F5C87F 		cmp	r4, #400
 1060 0152 F8D1     		bne	.L88
 1061              	.L62:
2697:src/display.c **** #endif
2698:src/display.c **** }
 1062              		.loc 1 2698 1 view .LVU351
 1063 0154 0DF5097D 		add	sp, sp, #548
 1064              		.cfi_remember_state
 1065              		.cfi_def_cfa_offset 36
 1066              	.LVL97:
 1067              		.loc 1 2698 1 view .LVU352
 1068              		@ sp needed
 1069 0158 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1070              	.LVL98:
 1071              	.L72:
 1072              		.cfi_restore_state
 1073              	.LBB163:
2641:src/display.c **** 					break;
 1074              		.loc 1 2641 15 is_stmt 1 view .LVU353
2642:src/display.c **** 			case 0x60:	current_smallp = 1;
 1075              		.loc 1 2642 6 view .LVU354
2646:src/display.c **** 			str += 3;
 1076              		.loc 1 2646 4 view .LVU355
2646:src/display.c **** 			str += 3;
 1077              		.loc 1 2646 8 is_stmt 0 view .LVU356
 1078 015c 009B     		ldr	r3, [sp]
2641:src/display.c **** 					break;
 1079              		.loc 1 2641 30 view .LVU357
 1080 015e 4FF0000A 		mov	r10, #0
2646:src/display.c **** 			str += 3;
 1081              		.loc 1 2646 8 view .LVU358
 1082 0162 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1083 0164 89E7     		b	.L75
 1084              	.LVL99:
 1085              	.L73:
2643:src/display.c **** 					break;
 1086              		.loc 1 2643 15 is_stmt 1 view .LVU359
2644:src/display.c **** 			}
 1087              		.loc 1 2644 6 view .LVU360
2646:src/display.c **** 			str += 3;
 1088              		.loc 1 2646 4 view .LVU361
2646:src/display.c **** 			str += 3;
 1089              		.loc 1 2646 8 is_stmt 0 view .LVU362
 1090 0166 009B     		ldr	r3, [sp]
 1091 0168 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
2643:src/display.c **** 					break;
 1092              		.loc 1 2643 30 view .LVU363
 1093 016a 4FF0010A 		mov	r10, #1
ARM GAS  /tmp/ccQmbpxO.s 			page 72


 1094 016e 00F58075 		add	r5, r0, #256
 1095 0172 82E7     		b	.L75
 1096              	.LVL100:
 1097              	.L109:
2643:src/display.c **** 					break;
 1098              		.loc 1 2643 30 view .LVU364
 1099              	.LBE163:
2603:src/display.c **** 			if (LastDisplayedText[i] != '\0')
 1100              		.loc 1 2603 4 is_stmt 1 view .LVU365
 1101 0174 A11C     		adds	r1, r4, #2
 1102 0176 2046     		mov	r0, r4
 1103 0178 FFF7FEFF 		bl	scopy
 1104              	.LVL101:
2604:src/display.c **** 				++i;
 1105              		.loc 1 2604 4 view .LVU366
2604:src/display.c **** 				++i;
 1106              		.loc 1 2604 7 is_stmt 0 view .LVU367
 1107 017c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1108 017e 002B     		cmp	r3, #0
 1109 0180 3FF45AAF 		beq	.L68
 1110 0184 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1111 0186 4FE7     		b	.L69
 1112              	.LVL102:
 1113              	.L92:
 1114              	.LBB164:
2604:src/display.c **** 				++i;
 1115              		.loc 1 2604 7 view .LVU368
 1116 0188 DDF808A0 		ldr	r10, [sp, #8]
 1117 018c 75E7     		b	.L75
 1118              	.L114:
 1119 018e 00BF     		.align	2
 1120              	.L113:
 1121 0190 00000000 		.word	LastDisplayedText
 1122 0194 00000000 		.word	RectPolConv
 1123 0198 00000000 		.word	forceDispPlot
 1124              	.LBE164:
 1125              		.cfi_endproc
 1126              	.LFE37:
 1128              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1129              		.align	2
 1130              	.LC0:
 1131 0000 48494700 		.ascii	"HIG\000"
 1132              		.section	.text.set_exp,"ax",%progbits
 1133              		.align	1
 1134              		.p2align 2,,3
 1135              		.syntax unified
 1136              		.thumb
 1137              		.thumb_func
 1138              		.fpu fpv4-sp-d16
 1140              	set_exp:
 1141              	.LVL103:
 1142              	.LFB14:
 429:src/display.c **** 	union {
 1143              		.loc 1 429 52 is_stmt 1 view -0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 8
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQmbpxO.s 			page 73


 430:src/display.c **** 		char buf[4];
 1147              		.loc 1 430 2 view .LVU370
 434:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1148              		.loc 1 434 2 view .LVU371
 448:src/display.c **** #endif
 1149              		.loc 1 448 2 view .LVU372
 451:src/display.c **** 	if (exp < 0) {
 1150              		.loc 1 451 2 view .LVU373
 429:src/display.c **** 	union {
 1151              		.loc 1 429 52 is_stmt 0 view .LVU374
 1152 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1153              		.cfi_def_cfa_offset 20
 1154              		.cfi_offset 4, -20
 1155              		.cfi_offset 5, -16
 1156              		.cfi_offset 6, -12
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 452:src/display.c **** 		negative = 1;
 1159              		.loc 1 452 5 view .LVU375
 1160 0002 051E     		subs	r5, r0, #0
 429:src/display.c **** 	union {
 1161              		.loc 1 429 52 view .LVU376
 1162 0004 83B0     		sub	sp, sp, #12
 1163              		.cfi_def_cfa_offset 32
 429:src/display.c **** 	union {
 1164              		.loc 1 429 52 view .LVU377
 1165 0006 0F46     		mov	r7, r1
 1166              	.LVL104:
 452:src/display.c **** 		negative = 1;
 1167              		.loc 1 452 2 is_stmt 1 view .LVU378
 429:src/display.c **** 	union {
 1168              		.loc 1 429 52 is_stmt 0 view .LVU379
 1169 0008 1446     		mov	r4, r2
 452:src/display.c **** 		negative = 1;
 1170              		.loc 1 452 5 view .LVU380
 1171 000a 0ADB     		blt	.L139
 451:src/display.c **** 	if (exp < 0) {
 1172              		.loc 1 451 11 view .LVU381
 1173 000c 01F00203 		and	r3, r1, #2
 1174              	.LVL105:
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1175              		.loc 1 459 2 is_stmt 1 view .LVU382
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1176              		.loc 1 459 5 is_stmt 0 view .LVU383
 1177 0010 A2B3     		cbz	r2, .L120
 464:src/display.c **** #endif
 1178              		.loc 1 464 3 is_stmt 1 view .LVU384
 464:src/display.c **** #endif
 1179              		.loc 1 464 6 is_stmt 0 view .LVU385
 1180 0012 B5F57A7F 		cmp	r5, #1000
 1181 0016 2ADB     		blt	.L121
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1182              		.loc 1 466 4 is_stmt 1 view .LVU386
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1183              		.loc 1 466 7 is_stmt 0 view .LVU387
 1184 0018 73BB     		cbnz	r3, .L126
 466:src/display.c **** 			// No exponent separator for large -ve exponents
ARM GAS  /tmp/ccQmbpxO.s 			page 74


 1185              		.loc 1 466 19 is_stmt 1 discriminator 1 view .LVU388
 1186              	.LVL106:
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1187              		.loc 1 466 26 is_stmt 0 discriminator 1 view .LVU389
 1188 001a 3A23     		movs	r3, #58
 1189              	.LVL107:
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1190              		.loc 1 466 26 discriminator 1 view .LVU390
 1191 001c 04F8013B 		strb	r3, [r4], #1
 1192              	.LVL108:
 473:src/display.c **** 	}
 1193              		.loc 1 473 3 is_stmt 1 discriminator 1 view .LVU391
 1194 0020 08E0     		b	.L122
 1195              	.LVL109:
 1196              	.L139:
 453:src/display.c **** 		exp = -exp;
 1197              		.loc 1 453 3 view .LVU392
 454:src/display.c **** 	}
 1198              		.loc 1 454 3 view .LVU393
 454:src/display.c **** 	}
 1199              		.loc 1 454 7 is_stmt 0 view .LVU394
 1200 0022 6E42     		rsbs	r6, r5, #0
 1201              	.LVL110:
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 459 2 is_stmt 1 view .LVU395
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1203              		.loc 1 459 5 is_stmt 0 view .LVU396
 1204 0024 AAB3     		cbz	r2, .L117
 464:src/display.c **** #endif
 1205              		.loc 1 464 3 is_stmt 1 view .LVU397
 464:src/display.c **** #endif
 1206              		.loc 1 464 6 is_stmt 0 view .LVU398
 1207 0026 15F57A7F 		cmn	r5, #1000
 1208 002a 2DDC     		bgt	.L140
 1209              	.LVL111:
 1210              	.L118:
 473:src/display.c **** 	}
 1211              		.loc 1 473 17 is_stmt 1 discriminator 1 view .LVU399
 473:src/display.c **** 	}
 1212              		.loc 1 473 24 is_stmt 0 discriminator 1 view .LVU400
 1213 002c 2D23     		movs	r3, #45
 1214 002e 04F8013B 		strb	r3, [r4], #1
 1215              	.LVL112:
 473:src/display.c **** 	}
 1216              		.loc 1 473 24 discriminator 1 view .LVU401
 1217 0032 3546     		mov	r5, r6
 1218              	.LVL113:
 1219              	.L122:
 521:src/display.c **** #endif
 1220              		.loc 1 521 2 is_stmt 1 view .LVU402
 1221 0034 01AE     		add	r6, sp, #4
 1222 0036 0021     		movs	r1, #0
 1223 0038 3046     		mov	r0, r6
 1224 003a 0422     		movs	r2, #4
 1225 003c FFF7FEFF 		bl	xset
 1226              	.LVL114:
 523:src/display.c **** 		num_arg_0(u.buf, exp, 3);
ARM GAS  /tmp/ccQmbpxO.s 			page 75


 1227              		.loc 1 523 2 view .LVU403
 523:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1228              		.loc 1 523 5 is_stmt 0 view .LVU404
 1229 0040 17F0050F 		tst	r7, #5
 524:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1230              		.loc 1 524 3 view .LVU405
 1231 0044 2946     		mov	r1, r5
 523:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1232              		.loc 1 523 5 view .LVU406
 1233 0046 09D0     		beq	.L125
 1234              	.LVL115:
 524:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1235              		.loc 1 524 3 is_stmt 1 view .LVU407
 1236 0048 0322     		movs	r2, #3
 1237 004a 3046     		mov	r0, r6
 1238 004c FFF7FEFF 		bl	num_arg_0
 1239              	.LVL116:
 1240              	.L124:
 546:src/display.c **** }
 1241              		.loc 1 546 2 view .LVU408
 1242 0050 2146     		mov	r1, r4
 1243 0052 3046     		mov	r0, r6
 1244 0054 FFF7FEFF 		bl	set_exp_digits_string
 1245              	.LVL117:
 547:src/display.c **** 
 1246              		.loc 1 547 1 is_stmt 0 view .LVU409
 1247 0058 03B0     		add	sp, sp, #12
 1248              		.cfi_remember_state
 1249              		.cfi_def_cfa_offset 20
 1250              		@ sp needed
 1251 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1252              	.LVL118:
 1253              	.L125:
 1254              		.cfi_restore_state
 544:src/display.c **** no_number:
 1255              		.loc 1 544 3 is_stmt 1 view .LVU410
 1256 005c 3046     		mov	r0, r6
 1257 005e FFF7FEFF 		bl	num_arg
 1258              	.LVL119:
 546:src/display.c **** }
 1259              		.loc 1 546 2 view .LVU411
 1260 0062 2146     		mov	r1, r4
 1261 0064 3046     		mov	r0, r6
 1262 0066 FFF7FEFF 		bl	set_exp_digits_string
 1263              	.LVL120:
 547:src/display.c **** 
 1264              		.loc 1 547 1 is_stmt 0 view .LVU412
 1265 006a 03B0     		add	sp, sp, #12
 1266              		.cfi_remember_state
 1267              		.cfi_def_cfa_offset 20
 1268              		@ sp needed
 1269 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1270              	.LVL121:
 1271              	.L121:
 1272              		.cfi_restore_state
 469:src/display.c **** #else
 1273              		.loc 1 469 8 is_stmt 1 view .LVU413
ARM GAS  /tmp/ccQmbpxO.s 			page 76


 469:src/display.c **** #else
 1274              		.loc 1 469 15 is_stmt 0 view .LVU414
 1275 006e 6522     		movs	r2, #101
 1276              	.LVL122:
 469:src/display.c **** #else
 1277              		.loc 1 469 15 view .LVU415
 1278 0070 04F8012B 		strb	r2, [r4], #1
 1279              	.LVL123:
 473:src/display.c **** 	}
 1280              		.loc 1 473 3 is_stmt 1 view .LVU416
 473:src/display.c **** 	}
 1281              		.loc 1 473 6 is_stmt 0 view .LVU417
 1282 0074 002B     		cmp	r3, #0
 1283 0076 DDD0     		beq	.L122
 1284              	.L126:
 473:src/display.c **** 	}
 1285              		.loc 1 473 6 view .LVU418
 1286 0078 2E46     		mov	r6, r5
 1287 007a D7E7     		b	.L118
 1288              	.LVL124:
 1289              	.L120:
 476:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1290              		.loc 1 476 3 is_stmt 1 view .LVU419
 476:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1291              		.loc 1 476 6 is_stmt 0 view .LVU420
 1292 007c 43B9     		cbnz	r3, .L141
 1293              	.LVL125:
 1294              	.L123:
 480:src/display.c **** #endif
 1295              		.loc 1 480 3 is_stmt 1 view .LVU421
 480:src/display.c **** #endif
 1296              		.loc 1 480 6 is_stmt 0 view .LVU422
 1297 007e B5F57A7F 		cmp	r5, #1000
 1298 0082 0EDA     		bge	.L142
 480:src/display.c **** #endif
 1299              		.loc 1 480 6 view .LVU423
 1300 0084 0024     		movs	r4, #0
 1301              	.LVL126:
 480:src/display.c **** #endif
 1302              		.loc 1 480 6 view .LVU424
 1303 0086 D5E7     		b	.L122
 1304              	.LVL127:
 1305              	.L140:
 469:src/display.c **** #else
 1306              		.loc 1 469 8 is_stmt 1 view .LVU425
 469:src/display.c **** #else
 1307              		.loc 1 469 15 is_stmt 0 view .LVU426
 1308 0088 6523     		movs	r3, #101
 1309 008a 04F8013B 		strb	r3, [r4], #1
 1310              	.LVL128:
 473:src/display.c **** 	}
 1311              		.loc 1 473 3 is_stmt 1 view .LVU427
 1312 008e CDE7     		b	.L118
 1313              	.LVL129:
 1314              	.L141:
 473:src/display.c **** 	}
 1315              		.loc 1 473 3 is_stmt 0 view .LVU428
ARM GAS  /tmp/ccQmbpxO.s 			page 77


 1316 0090 2E46     		mov	r6, r5
 1317              	.LVL130:
 1318              	.L117:
 476:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1319              		.loc 1 476 17 is_stmt 1 view .LVU429
 1320              	.LBB165:
 1321              	.LBI165:
 295:src/display.c **** {
 1322              		.loc 1 295 13 view .LVU430
 1323              	.LBB166:
 297:src/display.c **** 	set_dot(EXP_SIGN);
 1324              		.loc 1 297 2 view .LVU431
 297:src/display.c **** 	set_dot(EXP_SIGN);
 1325              		.loc 1 297 26 is_stmt 0 view .LVU432
 1326 0092 074B     		ldr	r3, .L143
 1327 0094 2D22     		movs	r2, #45
 1328              	.LVL131:
 298:src/display.c **** }
 1329              		.loc 1 298 2 view .LVU433
 1330 0096 8220     		movs	r0, #130
 297:src/display.c **** 	set_dot(EXP_SIGN);
 1331              		.loc 1 297 26 view .LVU434
 1332 0098 1A70     		strb	r2, [r3]
 298:src/display.c **** }
 1333              		.loc 1 298 2 is_stmt 1 view .LVU435
 299:src/display.c **** 
 1334              		.loc 1 299 1 is_stmt 0 view .LVU436
 1335 009a 3546     		mov	r5, r6
 298:src/display.c **** }
 1336              		.loc 1 298 2 view .LVU437
 1337 009c FFF7FEFF 		bl	set_dot
 1338              	.LVL132:
 299:src/display.c **** 
 1339              		.loc 1 299 1 view .LVU438
 1340 00a0 EDE7     		b	.L123
 1341              	.LVL133:
 1342              	.L142:
 299:src/display.c **** 
 1343              		.loc 1 299 1 view .LVU439
 1344              	.LBE166:
 1345              	.LBE165:
 482:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1346              		.loc 1 482 4 is_stmt 1 view .LVU440
 490:src/display.c **** #endif
 1347              		.loc 1 490 5 view .LVU441
 1348 00a2 01AE     		add	r6, sp, #4
 1349 00a4 0349     		ldr	r1, .L143+4
 1350 00a6 3046     		mov	r0, r6
 1351 00a8 FFF7FEFF 		bl	scopy
 1352              	.LVL134:
 492:src/display.c **** 			}
 1353              		.loc 1 492 5 view .LVU442
 1354 00ac 0024     		movs	r4, #0
 1355              	.LVL135:
 492:src/display.c **** 			}
 1356              		.loc 1 492 5 is_stmt 0 view .LVU443
 1357 00ae CFE7     		b	.L124
ARM GAS  /tmp/ccQmbpxO.s 			page 78


 1358              	.L144:
 1359              		.align	2
 1360              	.L143:
 1361 00b0 00000000 		.word	LastDisplayedExponent
 1362 00b4 00000000 		.word	.LC0
 1363              		.cfi_endproc
 1364              	.LFE14:
 1366              		.section	.text.set_separator.part.0,"ax",%progbits
 1367              		.align	1
 1368              		.p2align 2,,3
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	set_separator.part.0:
 1375              	.LVL136:
 1376              	.LFB43:
 354:src/display.c **** 	if (sep == SEP_NONE)
 1377              		.loc 1 354 14 is_stmt 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 361:src/display.c **** 		set_dot(posn+7);
 1381              		.loc 1 361 3 view .LVU445
 354:src/display.c **** 	if (sep == SEP_NONE)
 1382              		.loc 1 354 14 is_stmt 0 view .LVU446
 1383 0000 70B5     		push	{r4, r5, r6, lr}
 1384              		.cfi_def_cfa_offset 16
 1385              		.cfi_offset 4, -16
 1386              		.cfi_offset 5, -12
 1387              		.cfi_offset 6, -8
 1388              		.cfi_offset 14, -4
 354:src/display.c **** 	if (sep == SEP_NONE)
 1389              		.loc 1 354 14 view .LVU447
 1390 0002 0546     		mov	r5, r0
 1391 0004 0E46     		mov	r6, r1
 362:src/display.c **** 		if (sep == SEP_COMMA)
 1392              		.loc 1 362 3 view .LVU448
 1393 0006 0238     		subs	r0, r0, #2
 1394              	.LVL137:
 362:src/display.c **** 		if (sep == SEP_COMMA)
 1395              		.loc 1 362 3 view .LVU449
 1396 0008 FFF7FEFF 		bl	set_dot
 1397              	.LVL138:
 363:src/display.c **** 			set_dot(posn+8);
 1398              		.loc 1 363 6 view .LVU450
 1399 000c 012E     		cmp	r6, #1
 361:src/display.c **** 		set_dot(posn+7);
 1400              		.loc 1 361 8 view .LVU451
 1401 000e A5F10904 		sub	r4, r5, #9
 1402              	.LVL139:
 362:src/display.c **** 		if (sep == SEP_COMMA)
 1403              		.loc 1 362 3 is_stmt 1 view .LVU452
 363:src/display.c **** 			set_dot(posn+8);
 1404              		.loc 1 363 3 view .LVU453
 363:src/display.c **** 			set_dot(posn+8);
 1405              		.loc 1 363 6 is_stmt 0 view .LVU454
ARM GAS  /tmp/ccQmbpxO.s 			page 79


 1406 0012 0CD0     		beq	.L149
 366:src/display.c **** #endif
 1407              		.loc 1 366 37 view .LVU455
 1408 0014 2E21     		movs	r1, #46
 1409              	.L146:
 366:src/display.c **** #endif
 1410              		.loc 1 366 28 view .LVU456
 1411 0016 084B     		ldr	r3, .L150
 366:src/display.c **** #endif
 1412              		.loc 1 366 37 view .LVU457
 1413 0018 084A     		ldr	r2, .L150+4
 366:src/display.c **** #endif
 1414              		.loc 1 366 28 view .LVU458
 1415 001a 83FB0403 		smull	r0, r3, r3, r4
 1416 001e E417     		asrs	r4, r4, #31
 1417              	.LVL140:
 366:src/display.c **** #endif
 1418              		.loc 1 366 28 view .LVU459
 1419 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 366:src/display.c **** #endif
 1420              		.loc 1 366 33 view .LVU460
 1421 0024 0134     		adds	r4, r4, #1
 370:src/display.c **** 
 1422              		.loc 1 370 1 view .LVU461
 1423 0026 0020     		movs	r0, #0
 366:src/display.c **** #endif
 1424              		.loc 1 366 37 view .LVU462
 1425 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1426              	.LVL141:
 370:src/display.c **** 
 1427              		.loc 1 370 1 view .LVU463
 1428 002c 70BD     		pop	{r4, r5, r6, pc}
 1429              	.LVL142:
 1430              	.L149:
 364:src/display.c **** #ifndef REALBUILD
 1431              		.loc 1 364 4 is_stmt 1 view .LVU464
 1432 002e 681E     		subs	r0, r5, #1
 1433 0030 FFF7FEFF 		bl	set_dot
 1434              	.LVL143:
 366:src/display.c **** #endif
 1435              		.loc 1 366 3 view .LVU465
 366:src/display.c **** #endif
 1436              		.loc 1 366 37 is_stmt 0 view .LVU466
 1437 0034 2C21     		movs	r1, #44
 1438 0036 EEE7     		b	.L146
 1439              	.L151:
 1440              		.align	2
 1441              	.L150:
 1442 0038 398EE338 		.word	954437177
 1443 003c 00000000 		.word	LastDisplayedNumber
 1444              		.cfi_endproc
 1445              	.LFE43:
 1447              		.section	.text.set_decimal,"ax",%progbits
 1448              		.align	1
 1449              		.p2align 2,,3
 1450              		.syntax unified
 1451              		.thumb
ARM GAS  /tmp/ccQmbpxO.s 			page 80


 1452              		.thumb_func
 1453              		.fpu fpv4-sp-d16
 1455              	set_decimal:
 1456              	.LVL144:
 1457              	.LFB8:
 336:src/display.c **** 	if (res) {
 1458              		.loc 1 336 87 is_stmt 1 view -0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 8
 1461              		@ frame_needed = 0, uses_anonymous_args = 0
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1462              		.loc 1 337 2 view .LVU468
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1463              		.loc 1 337 5 is_stmt 0 view .LVU469
 1464 0000 3AB1     		cbz	r2, .L153
 338:src/display.c **** 	} else {
 1465              		.loc 1 338 3 is_stmt 1 view .LVU470
 338:src/display.c **** 	} else {
 1466              		.loc 1 338 10 is_stmt 0 view .LVU471
 1467 0002 0029     		cmp	r1, #0
 338:src/display.c **** 	} else {
 1468              		.loc 1 338 7 view .LVU472
 1469 0004 1046     		mov	r0, r2
 1470              	.LVL145:
 338:src/display.c **** 	} else {
 1471              		.loc 1 338 10 view .LVU473
 1472 0006 0CBF     		ite	eq
 1473 0008 2E23     		moveq	r3, #46
 1474 000a 2C23     		movne	r3, #44
 1475 000c 00F8013B 		strb	r3, [r0], #1
 1476              	.LVL146:
 348:src/display.c **** 
 1477              		.loc 1 348 1 view .LVU474
 1478 0010 7047     		bx	lr
 1479              	.LVL147:
 1480              	.L153:
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1481              		.loc 1 340 3 is_stmt 1 view .LVU475
 336:src/display.c **** 	if (res) {
 1482              		.loc 1 336 87 is_stmt 0 view .LVU476
 1483 0012 10B5     		push	{r4, lr}
 1484              		.cfi_def_cfa_offset 8
 1485              		.cfi_offset 4, -8
 1486              		.cfi_offset 14, -4
 1487 0014 82B0     		sub	sp, sp, #8
 1488              		.cfi_def_cfa_offset 16
 1489 0016 0446     		mov	r4, r0
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1490              		.loc 1 340 3 view .LVU477
 1491 0018 0730     		adds	r0, r0, #7
 1492              	.LVL148:
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1493              		.loc 1 340 3 view .LVU478
 1494 001a 0191     		str	r1, [sp, #4]
 1495 001c FFF7FEFF 		bl	set_dot
 1496              	.LVL149:
 341:src/display.c **** 			set_dot(posn+8);
ARM GAS  /tmp/ccQmbpxO.s 			page 81


 1497              		.loc 1 341 3 is_stmt 1 view .LVU479
 341:src/display.c **** 			set_dot(posn+8);
 1498              		.loc 1 341 6 is_stmt 0 view .LVU480
 1499 0020 0199     		ldr	r1, [sp, #4]
 1500 0022 69B9     		cbnz	r1, .L162
 1501              	.LBB169:
 1502              	.LBB170:
 344:src/display.c **** #endif
 1503              		.loc 1 344 35 view .LVU481
 1504 0024 2E22     		movs	r2, #46
 1505              	.L156:
 344:src/display.c **** #endif
 1506              		.loc 1 344 27 view .LVU482
 1507 0026 0948     		ldr	r0, .L163
 344:src/display.c **** #endif
 1508              		.loc 1 344 35 view .LVU483
 1509 0028 094B     		ldr	r3, .L163+4
 344:src/display.c **** #endif
 1510              		.loc 1 344 27 view .LVU484
 1511 002a 80FB0410 		smull	r1, r0, r0, r4
 1512 002e E417     		asrs	r4, r4, #31
 1513              	.LVL150:
 344:src/display.c **** #endif
 1514              		.loc 1 344 27 view .LVU485
 1515 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 344:src/display.c **** #endif
 1516              		.loc 1 344 32 view .LVU486
 1517 0034 0134     		adds	r4, r4, #1
 344:src/display.c **** #endif
 1518              		.loc 1 344 35 view .LVU487
 1519 0036 0020     		movs	r0, #0
 1520 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1521              	.LVL151:
 347:src/display.c **** }
 1522              		.loc 1 347 2 is_stmt 1 view .LVU488
 347:src/display.c **** }
 1523              		.loc 1 347 2 is_stmt 0 view .LVU489
 1524              	.LBE170:
 1525              	.LBE169:
 347:src/display.c **** }
 1526              		.loc 1 347 2 is_stmt 1 view .LVU490
 348:src/display.c **** 
 1527              		.loc 1 348 1 is_stmt 0 view .LVU491
 1528 003c 02B0     		add	sp, sp, #8
 1529              		.cfi_remember_state
 1530              		.cfi_def_cfa_offset 8
 1531              		@ sp needed
 1532 003e 10BD     		pop	{r4, pc}
 1533              	.LVL152:
 1534              	.L162:
 1535              		.cfi_restore_state
 342:src/display.c **** #ifndef REALBUILD
 1536              		.loc 1 342 4 is_stmt 1 view .LVU492
 1537 0040 04F10800 		add	r0, r4, #8
 1538 0044 FFF7FEFF 		bl	set_dot
 1539              	.LVL153:
 1540              	.LBB172:
ARM GAS  /tmp/ccQmbpxO.s 			page 82


 1541              	.LBI169:
 336:src/display.c **** 	if (res) {
 1542              		.loc 1 336 14 view .LVU493
 1543              	.LBB171:
 344:src/display.c **** #endif
 1544              		.loc 1 344 2 view .LVU494
 344:src/display.c **** #endif
 1545              		.loc 1 344 35 is_stmt 0 view .LVU495
 1546 0048 2C22     		movs	r2, #44
 1547 004a ECE7     		b	.L156
 1548              	.L164:
 1549              		.align	2
 1550              	.L163:
 1551 004c 398EE338 		.word	954437177
 1552 0050 00000000 		.word	LastDisplayedNumber
 1553              	.LBE171:
 1554              	.LBE172:
 1555              		.cfi_endproc
 1556              	.LFE8:
 1558              		.section	.text.set_digits_string,"ax",%progbits
 1559              		.align	1
 1560              		.p2align 2,,3
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv4-sp-d16
 1566              	set_digits_string:
 1567              	.LVL154:
 1568              	.LFB12:
 401:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1569              		.loc 1 401 55 is_stmt 1 view -0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 0
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1573              		.loc 1 402 2 view .LVU497
 401:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1574              		.loc 1 401 55 is_stmt 0 view .LVU498
 1575 0000 38B5     		push	{r3, r4, r5, lr}
 1576              		.cfi_def_cfa_offset 16
 1577              		.cfi_offset 3, -16
 1578              		.cfi_offset 4, -12
 1579              		.cfi_offset 5, -8
 1580              		.cfi_offset 14, -4
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1581              		.loc 1 402 9 view .LVU499
 1582 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1583              		.loc 1 402 9 is_stmt 1 view .LVU500
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1584              		.loc 1 402 2 is_stmt 0 view .LVU501
 1585 0004 E3B1     		cbz	r3, .L165
 1586 0006 0546     		mov	r5, r0
 1587 0008 0C46     		mov	r4, r1
 1588 000a 06E0     		b	.L169
 1589              	.LVL155:
 1590              	.L167:
ARM GAS  /tmp/ccQmbpxO.s 			page 83


 1591              	.LBB173:
 1592              	.LBB174:
 396:src/display.c **** 	return res;
 1593              		.loc 1 396 7 view .LVU502
 1594 000c 2046     		mov	r0, r4
 1595 000e FFF7FEFF 		bl	set_dig
 1596              	.LVL156:
 397:src/display.c **** }
 1597              		.loc 1 397 2 is_stmt 1 view .LVU503
 397:src/display.c **** }
 1598              		.loc 1 397 2 is_stmt 0 view .LVU504
 1599              	.LBE174:
 1600              	.LBE173:
 407:src/display.c **** 		}
 1601              		.loc 1 407 4 is_stmt 1 view .LVU505
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1602              		.loc 1 402 9 is_stmt 0 view .LVU506
 1603 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1604              	.LVL157:
 407:src/display.c **** 		}
 1605              		.loc 1 407 6 view .LVU507
 1606 0016 0934     		adds	r4, r4, #9
 1607              	.LVL158:
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1608              		.loc 1 402 23 is_stmt 1 view .LVU508
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1609              		.loc 1 402 9 view .LVU509
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1610              		.loc 1 402 2 is_stmt 0 view .LVU510
 1611 0018 93B1     		cbz	r3, .L165
 1612              	.LVL159:
 1613              	.L169:
 403:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1614              		.loc 1 403 3 is_stmt 1 view .LVU511
 404:src/display.c **** 		else {
 1615              		.loc 1 404 4 view .LVU512
 406:src/display.c **** 			j += SEGS_PER_DIGIT;
 1616              		.loc 1 406 4 view .LVU513
 1617              	.LBB177:
 1618              	.LBI173:
 394:src/display.c **** 	if (res) *res++ = ch;
 1619              		.loc 1 394 14 view .LVU514
 1620              	.LBB175:
 395:src/display.c **** 	else	set_dig(base, ch);
 1621              		.loc 1 395 2 view .LVU515
 396:src/display.c **** 	return res;
 1622              		.loc 1 396 7 view .LVU516
 1623              	.LBE175:
 1624              	.LBE177:
 403:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1625              		.loc 1 403 19 is_stmt 0 view .LVU517
 1626 001a 03F0FD02 		and	r2, r3, #253
 1627 001e 2C2A     		cmp	r2, #44
 404:src/display.c **** 		else {
 1628              		.loc 1 404 4 view .LVU518
 1629 0020 A4F10900 		sub	r0, r4, #9
 1630 0024 4FF00002 		mov	r2, #0
ARM GAS  /tmp/ccQmbpxO.s 			page 84


 1631              	.LBB178:
 1632              	.LBB176:
 396:src/display.c **** 	return res;
 1633              		.loc 1 396 7 view .LVU519
 1634 0028 1946     		mov	r1, r3
 1635              	.LBE176:
 1636              	.LBE178:
 403:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1637              		.loc 1 403 19 view .LVU520
 1638 002a EFD1     		bne	.L167
 404:src/display.c **** 		else {
 1639              		.loc 1 404 4 view .LVU521
 1640 002c B3F12E01 		subs	r1, r3, #46
 1641 0030 18BF     		it	ne
 1642 0032 0121     		movne	r1, #1
 1643 0034 FFF7FEFF 		bl	set_decimal
 1644              	.LVL160:
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1645              		.loc 1 402 23 is_stmt 1 view .LVU522
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1646              		.loc 1 402 9 view .LVU523
 1647 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1648              	.LVL161:
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1649              		.loc 1 402 2 is_stmt 0 view .LVU524
 1650 003c 002B     		cmp	r3, #0
 1651 003e ECD1     		bne	.L169
 1652              	.LVL162:
 1653              	.L165:
 410:src/display.c **** 
 1654              		.loc 1 410 1 view .LVU525
 1655 0040 38BD     		pop	{r3, r4, r5, pc}
 1656              		.cfi_endproc
 1657              	.LFE12:
 1659 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1660              		.align	2
 1661              	.LC1:
 1662 0000 4E614E00 		.ascii	"NaN\000"
 1663              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1664              		.align	1
 1665              		.p2align 2,,3
 1666              		.syntax unified
 1667              		.thumb
 1668              		.thumb_func
 1669              		.fpu fpv4-sp-d16
 1671              	check_special_dn.isra.0:
 1672              	.LVL163:
 1673              	.LFB45:
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1674              		.loc 1 1168 12 is_stmt 1 view -0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
1169:src/display.c **** 		if (decNumberIsNaN(x)) {
 1678              		.loc 1 1169 2 view .LVU527
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1679              		.loc 1 1168 12 is_stmt 0 view .LVU528
ARM GAS  /tmp/ccQmbpxO.s 			page 85


 1680 0000 38B5     		push	{r3, r4, r5, lr}
 1681              		.cfi_def_cfa_offset 16
 1682              		.cfi_offset 3, -16
 1683              		.cfi_offset 4, -12
 1684              		.cfi_offset 5, -8
 1685              		.cfi_offset 14, -4
1169:src/display.c **** 		if (decNumberIsNaN(x)) {
 1686              		.loc 1 1169 6 view .LVU529
 1687 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1688              		.loc 1 1168 12 view .LVU530
 1689 0004 0546     		mov	r5, r0
1169:src/display.c **** 		if (decNumberIsNaN(x)) {
 1690              		.loc 1 1169 5 view .LVU531
 1691 0006 13F07000 		ands	r0, r3, #112
 1692 000a 09D0     		beq	.L175
1170:src/display.c **** 			if (res) {
 1693              		.loc 1 1170 3 is_stmt 1 view .LVU532
1170:src/display.c **** 			if (res) {
 1694              		.loc 1 1170 6 is_stmt 0 view .LVU533
 1695 000c 13F0300F 		tst	r3, #48
 1696 0010 0C46     		mov	r4, r1
 1697 0012 06D0     		beq	.L177
 1698              	.LVL164:
 1699              	.LBB181:
 1700              	.LBI181:
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1701              		.loc 1 1168 12 is_stmt 1 view .LVU534
 1702              	.LBB182:
1171:src/display.c **** 				scopy(res, "NaN");
 1703              		.loc 1 1171 4 view .LVU535
1171:src/display.c **** 				scopy(res, "NaN");
 1704              		.loc 1 1171 7 is_stmt 0 view .LVU536
 1705 0014 89B1     		cbz	r1, .L178
1172:src/display.c **** 			} else {
 1706              		.loc 1 1172 5 is_stmt 1 view .LVU537
 1707 0016 0846     		mov	r0, r1
 1708 0018 1849     		ldr	r1, .L191
 1709              	.LVL165:
1172:src/display.c **** 			} else {
 1710              		.loc 1 1172 5 is_stmt 0 view .LVU538
 1711 001a FFF7FEFF 		bl	scopy
 1712              	.LVL166:
1172:src/display.c **** 			} else {
 1713              		.loc 1 1172 5 view .LVU539
 1714 001e 0120     		movs	r0, #1
 1715              	.LVL167:
 1716              	.L175:
1172:src/display.c **** 			} else {
 1717              		.loc 1 1172 5 view .LVU540
 1718              	.LBE182:
 1719              	.LBE181:
1204:src/display.c **** 
 1720              		.loc 1 1204 1 view .LVU541
 1721 0020 38BD     		pop	{r3, r4, r5, pc}
 1722              	.LVL168:
 1723              	.L177:
ARM GAS  /tmp/ccQmbpxO.s 			page 86


1182:src/display.c **** 				if (res) *res++ = '-';
 1724              		.loc 1 1182 4 is_stmt 1 view .LVU542
1182:src/display.c **** 				if (res) *res++ = '-';
 1725              		.loc 1 1182 7 is_stmt 0 view .LVU543
 1726 0022 1B06     		lsls	r3, r3, #24
 1727 0024 04D4     		bmi	.L190
1186:src/display.c **** 				*res++ = '\237';
 1728              		.loc 1 1186 4 is_stmt 1 view .LVU544
1186:src/display.c **** 				*res++ = '\237';
 1729              		.loc 1 1186 7 is_stmt 0 view .LVU545
 1730 0026 B9B1     		cbz	r1, .L182
 1731              	.LVL169:
 1732              	.L181:
1187:src/display.c **** 			else {
 1733              		.loc 1 1187 5 is_stmt 1 view .LVU546
1187:src/display.c **** 			else {
 1734              		.loc 1 1187 12 is_stmt 0 view .LVU547
 1735 0028 9F23     		movs	r3, #159
 1736 002a 2370     		strb	r3, [r4]
1200:src/display.c **** 		}
 1737              		.loc 1 1200 11 view .LVU548
 1738 002c 0120     		movs	r0, #1
1204:src/display.c **** 
 1739              		.loc 1 1204 1 view .LVU549
 1740 002e 38BD     		pop	{r3, r4, r5, pc}
 1741              	.LVL170:
 1742              	.L190:
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1743              		.loc 1 1183 5 is_stmt 1 view .LVU550
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1744              		.loc 1 1183 8 is_stmt 0 view .LVU551
 1745 0030 71B1     		cbz	r1, .L180
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1746              		.loc 1 1183 14 is_stmt 1 view .LVU552
 1747              	.LVL171:
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1748              		.loc 1 1183 21 is_stmt 0 view .LVU553
 1749 0032 2D23     		movs	r3, #45
 1750 0034 04F8013B 		strb	r3, [r4], #1
 1751              	.LVL172:
1186:src/display.c **** 				*res++ = '\237';
 1752              		.loc 1 1186 4 is_stmt 1 view .LVU554
 1753 0038 F6E7     		b	.L181
 1754              	.LVL173:
 1755              	.L178:
 1756              	.LBB184:
 1757              	.LBB183:
1174:src/display.c **** #ifndef REALBUILD
 1758              		.loc 1 1174 5 view .LVU555
 1759 003a 1148     		ldr	r0, .L191+4
 1760 003c FFF7FEFF 		bl	set_digits_string
 1761              	.LVL174:
1176:src/display.c **** 				forceDispPlot=0;
 1762              		.loc 1 1176 5 view .LVU556
 1763 0040 1049     		ldr	r1, .L191+8
 1764 0042 1148     		ldr	r0, .L191+12
 1765 0044 FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccQmbpxO.s 			page 87


 1766              	.LVL175:
1177:src/display.c **** #endif
 1767              		.loc 1 1177 5 view .LVU557
1177:src/display.c **** #endif
 1768              		.loc 1 1177 18 is_stmt 0 view .LVU558
 1769 0048 104B     		ldr	r3, .L191+16
 1770 004a 1C70     		strb	r4, [r3]
 1771 004c 0120     		movs	r0, #1
 1772              	.LBE183:
 1773              	.LBE184:
1204:src/display.c **** 
 1774              		.loc 1 1204 1 view .LVU559
 1775 004e 38BD     		pop	{r3, r4, r5, pc}
 1776              	.LVL176:
 1777              	.L180:
1184:src/display.c **** 			}
 1778              		.loc 1 1184 10 is_stmt 1 view .LVU560
 1779 0050 2D21     		movs	r1, #45
 1780              	.LVL177:
1184:src/display.c **** 			}
 1781              		.loc 1 1184 10 is_stmt 0 view .LVU561
 1782 0052 0920     		movs	r0, #9
 1783 0054 FFF7FEFF 		bl	set_dig
 1784              	.LVL178:
1186:src/display.c **** 				*res++ = '\237';
 1785              		.loc 1 1186 4 is_stmt 1 view .LVU562
 1786              	.L182:
1189:src/display.c **** #ifndef REALBUILD
 1787              		.loc 1 1189 5 view .LVU563
 1788 0058 1221     		movs	r1, #18
 1789 005a 0D48     		ldr	r0, .L191+20
 1790 005c FFF7FEFF 		bl	set_digits_string
 1791              	.LVL179:
1191:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1792              		.loc 1 1191 5 view .LVU564
1191:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1793              		.loc 1 1191 8 is_stmt 0 view .LVU565
 1794 0060 95F90030 		ldrsb	r3, [r5]
1195:src/display.c **** 				}
 1795              		.loc 1 1195 6 view .LVU566
 1796 0064 0848     		ldr	r0, .L191+12
1191:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1797              		.loc 1 1191 8 view .LVU567
 1798 0066 002B     		cmp	r3, #0
1192:src/display.c **** 				}
 1799              		.loc 1 1192 6 is_stmt 1 view .LVU568
 1800 0068 B4BF     		ite	lt
 1801 006a 0A49     		ldrlt	r1, .L191+24
1195:src/display.c **** 				}
 1802              		.loc 1 1195 6 view .LVU569
 1803 006c 0A49     		ldrge	r1, .L191+28
 1804 006e FFF7FEFF 		bl	scopy
 1805              	.LVL180:
1197:src/display.c **** #endif
 1806              		.loc 1 1197 5 view .LVU570
1197:src/display.c **** #endif
 1807              		.loc 1 1197 18 is_stmt 0 view .LVU571
ARM GAS  /tmp/ccQmbpxO.s 			page 88


 1808 0072 064B     		ldr	r3, .L191+16
 1809 0074 0022     		movs	r2, #0
 1810 0076 1A70     		strb	r2, [r3]
1200:src/display.c **** 		}
 1811              		.loc 1 1200 11 view .LVU572
 1812 0078 0120     		movs	r0, #1
1204:src/display.c **** 
 1813              		.loc 1 1204 1 view .LVU573
 1814 007a 38BD     		pop	{r3, r4, r5, pc}
 1815              	.L192:
 1816              		.align	2
 1817              	.L191:
 1818 007c 00000000 		.word	.LC1
 1819 0080 00000000 		.word	.LANCHOR3
 1820 0084 00000000 		.word	.LANCHOR4
 1821 0088 00000000 		.word	LastDisplayedNumber
 1822 008c 00000000 		.word	forceDispPlot
 1823 0090 00000000 		.word	.LANCHOR5
 1824 0094 00000000 		.word	.LANCHOR6
 1825 0098 00000000 		.word	.LANCHOR7
 1826              		.cfi_endproc
 1827              	.LFE45:
 1829              		.section	.text.set_x_hms,"ax",%progbits
 1830              		.align	1
 1831              		.p2align 2,,3
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	set_x_hms:
 1838              	.LVL181:
 1839              	.LFB22:
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1840              		.loc 1 1249 56 is_stmt 1 view -0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 200
 1843              		@ frame_needed = 0, uses_anonymous_args = 0
1250:src/display.c **** 	int j=0;
 1844              		.loc 1 1250 2 view .LVU575
1251:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1845              		.loc 1 1251 2 view .LVU576
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1846              		.loc 1 1249 56 is_stmt 0 view .LVU577
 1847 0000 30B5     		push	{r4, r5, lr}
 1848              		.cfi_def_cfa_offset 12
 1849              		.cfi_offset 4, -12
 1850              		.cfi_offset 5, -8
 1851              		.cfi_offset 14, -4
 1852 0002 B5B0     		sub	sp, sp, #212
 1853              		.cfi_def_cfa_offset 224
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1854              		.loc 1 1249 56 view .LVU578
 1855 0004 0446     		mov	r4, r0
1251:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1856              		.loc 1 1251 6 view .LVU579
 1857 0006 0023     		movs	r3, #0
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
ARM GAS  /tmp/ccQmbpxO.s 			page 89


 1858              		.loc 1 1255 6 view .LVU580
 1859 0008 0830     		adds	r0, r0, #8
 1860              	.LVL182:
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1861              		.loc 1 1249 56 view .LVU581
 1862 000a 0D46     		mov	r5, r1
1251:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1863              		.loc 1 1251 6 view .LVU582
 1864 000c 0393     		str	r3, [sp, #12]
1252:src/display.c **** 	unsigned int hr, min, sec, fs;
 1865              		.loc 1 1252 2 is_stmt 1 view .LVU583
 1866              	.LVL183:
1253:src/display.c **** 
 1867              		.loc 1 1253 2 view .LVU584
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1868              		.loc 1 1255 2 view .LVU585
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1869              		.loc 1 1255 6 is_stmt 0 view .LVU586
 1870 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1871              	.LVL184:
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1872              		.loc 1 1255 5 view .LVU587
 1873 0012 48B1     		cbz	r0, .L194
1256:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1874              		.loc 1 1256 3 is_stmt 1 view .LVU588
1256:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1875              		.loc 1 1256 6 is_stmt 0 view .LVU589
 1876 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1877 0016 5B06     		lsls	r3, r3, #25
 1878 0018 04D5     		bpl	.L193
1257:src/display.c **** 		return;
 1879              		.loc 1 1257 4 is_stmt 1 view .LVU590
 1880              	.LVL185:
 1881              	.LBB185:
 1882              	.LBI185:
 394:src/display.c **** 	if (res) *res++ = ch;
 1883              		.loc 1 394 14 view .LVU591
 1884              	.LBB186:
 395:src/display.c **** 	else	set_dig(base, ch);
 1885              		.loc 1 395 2 view .LVU592
 395:src/display.c **** 	else	set_dig(base, ch);
 1886              		.loc 1 395 5 is_stmt 0 view .LVU593
 1887 001a 002D     		cmp	r5, #0
 1888 001c 00F0B580 		beq	.L197
 395:src/display.c **** 	else	set_dig(base, ch);
 1889              		.loc 1 395 11 is_stmt 1 view .LVU594
 1890              	.LVL186:
 395:src/display.c **** 	else	set_dig(base, ch);
 1891              		.loc 1 395 18 is_stmt 0 view .LVU595
 1892 0020 6F23     		movs	r3, #111
 1893 0022 2B70     		strb	r3, [r5]
 1894              	.LVL187:
 1895              	.L193:
 395:src/display.c **** 	else	set_dig(base, ch);
 1896              		.loc 1 395 18 view .LVU596
 1897              	.LBE186:
 1898              	.LBE185:
ARM GAS  /tmp/ccQmbpxO.s 			page 90


1312:src/display.c **** 
 1899              		.loc 1 1312 1 view .LVU597
 1900 0024 35B0     		add	sp, sp, #212
 1901              		.cfi_remember_state
 1902              		.cfi_def_cfa_offset 12
 1903              		@ sp needed
 1904 0026 30BD     		pop	{r4, r5, pc}
 1905              	.LVL188:
 1906              	.L194:
 1907              		.cfi_restore_state
1261:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1908              		.loc 1 1261 2 is_stmt 1 view .LVU598
 1909 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1910              	.LVL189:
1262:src/display.c **** 	dn_abs(&a, rgx);
 1911              		.loc 1 1262 2 view .LVU599
 1912 002c 624A     		ldr	r2, .L224
 1913 002e 2146     		mov	r1, r4
 1914 0030 07A8     		add	r0, sp, #28
 1915 0032 FFF7FEFF 		bl	decNumberMod
 1916              	.LVL190:
1263:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1917              		.loc 1 1263 2 view .LVU600
 1918 0036 2146     		mov	r1, r4
 1919 0038 19A8     		add	r0, sp, #100
 1920 003a FFF7FEFF 		bl	dn_abs
 1921              	.LVL191:
1264:src/display.c **** 		if (res != NULL)
 1922              		.loc 1 1264 2 view .LVU601
1264:src/display.c **** 		if (res != NULL)
 1923              		.loc 1 1264 5 is_stmt 0 view .LVU602
 1924 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1925 0042 002B     		cmp	r3, #0
 1926 0044 72DB     		blt	.L222
 1927              	.L198:
1272:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1928              		.loc 1 1272 2 is_stmt 1 view .LVU603
 1929 0046 07A9     		add	r1, sp, #28
 1930 0048 10A8     		add	r0, sp, #64
 1931 004a FFF7FEFF 		bl	decNumberHR2HMS
 1932              	.LVL192:
1273:src/display.c **** 	decNumberRound(&u, &t);
 1933              		.loc 1 1273 2 view .LVU604
 1934 004e 0622     		movs	r2, #6
 1935 0050 10A9     		add	r1, sp, #64
 1936 0052 22A8     		add	r0, sp, #136
 1937 0054 FFF7FEFF 		bl	dn_mulpow10
 1938              	.LVL193:
1274:src/display.c **** 
 1939              		.loc 1 1274 2 view .LVU605
 1940 0058 22A9     		add	r1, sp, #136
 1941 005a 2BA8     		add	r0, sp, #172
 1942 005c FFF7FEFF 		bl	decNumberRound
 1943              	.LVL194:
1276:src/display.c **** 	hms_step(&u, &t, &sec);
 1944              		.loc 1 1276 2 view .LVU606
 1945 0060 2BA9     		add	r1, sp, #172
ARM GAS  /tmp/ccQmbpxO.s 			page 91


 1946 0062 22A8     		add	r0, sp, #136
 1947 0064 06AA     		add	r2, sp, #24
 1948 0066 FFF7FEFF 		bl	hms_step
 1949              	.LVL195:
1277:src/display.c **** 	hms_step(&t, &u, &min);
 1950              		.loc 1 1277 2 view .LVU607
 1951 006a 22A9     		add	r1, sp, #136
 1952 006c 2BA8     		add	r0, sp, #172
 1953 006e 05AA     		add	r2, sp, #20
 1954 0070 FFF7FEFF 		bl	hms_step
 1955              	.LVL196:
1278:src/display.c **** 	hr = dn_to_int(&t);
 1956              		.loc 1 1278 2 view .LVU608
 1957 0074 04AA     		add	r2, sp, #16
 1958 0076 2BA9     		add	r1, sp, #172
 1959 0078 22A8     		add	r0, sp, #136
 1960 007a FFF7FEFF 		bl	hms_step
 1961              	.LVL197:
1279:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1962              		.loc 1 1279 2 view .LVU609
1279:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1963              		.loc 1 1279 7 is_stmt 0 view .LVU610
 1964 007e 22A8     		add	r0, sp, #136
 1965 0080 FFF7FEFF 		bl	dn_to_int
 1966              	.LVL198:
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1967              		.loc 1 1280 33 view .LVU611
 1968 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1969              		.loc 1 1280 5 view .LVU612
 1970 0088 3B2A     		cmp	r2, #59
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1971              		.loc 1 1280 19 is_stmt 1 view .LVU613
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1972              		.loc 1 1280 23 is_stmt 0 view .LVU614
 1973 008a 82BF     		ittt	hi
 1974 008c 3C3A     		subhi	r2, r2, #60
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1975              		.loc 1 1280 33 view .LVU615
 1976 008e 0133     		addhi	r3, r3, #1
 1977 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1281:src/display.c **** 
 1978              		.loc 1 1281 2 is_stmt 1 view .LVU616
1281:src/display.c **** 
 1979              		.loc 1 1281 5 is_stmt 0 view .LVU617
 1980 0094 3B2B     		cmp	r3, #59
 1981 0096 02D9     		bls	.L203
1281:src/display.c **** 
 1982              		.loc 1 1281 19 is_stmt 1 discriminator 1 view .LVU618
1281:src/display.c **** 
 1983              		.loc 1 1281 23 is_stmt 0 discriminator 1 view .LVU619
 1984 0098 3C3B     		subs	r3, r3, #60
 1985 009a 0493     		str	r3, [sp, #16]
1281:src/display.c **** 
 1986              		.loc 1 1281 30 is_stmt 1 discriminator 1 view .LVU620
1281:src/display.c **** 
 1987              		.loc 1 1281 32 is_stmt 0 discriminator 1 view .LVU621
ARM GAS  /tmp/ccQmbpxO.s 			page 92


 1988 009c 0130     		adds	r0, r0, #1
 1989              	.LVL199:
 1990              	.L203:
1284:src/display.c **** 	res = set_dig_s(j, '@', res);
 1991              		.loc 1 1284 2 is_stmt 1 view .LVU622
1284:src/display.c **** 	res = set_dig_s(j, '@', res);
 1992              		.loc 1 1284 8 is_stmt 0 view .LVU623
 1993 009e 0123     		movs	r3, #1
 1994 00a0 0093     		str	r3, [sp]
 1995 00a2 2946     		mov	r1, r5
 1996 00a4 03AA     		add	r2, sp, #12
 1997 00a6 0423     		movs	r3, #4
 1998 00a8 FFF7FEFF 		bl	hms_render
 1999              	.LVL200:
1285:src/display.c **** 	j += SEGS_PER_DIGIT;
 2000              		.loc 1 1285 2 is_stmt 1 view .LVU624
 2001              	.LBB188:
 2002              	.LBI188:
 394:src/display.c **** 	if (res) *res++ = ch;
 2003              		.loc 1 394 14 view .LVU625
 2004              	.LBB189:
 395:src/display.c **** 	else	set_dig(base, ch);
 2005              		.loc 1 395 2 view .LVU626
 395:src/display.c **** 	else	set_dig(base, ch);
 2006              		.loc 1 395 5 is_stmt 0 view .LVU627
 2007 00ac 0446     		mov	r4, r0
 2008              	.LVL201:
 395:src/display.c **** 	else	set_dig(base, ch);
 2009              		.loc 1 395 5 view .LVU628
 2010 00ae 0028     		cmp	r0, #0
 2011 00b0 76D0     		beq	.L204
 395:src/display.c **** 	else	set_dig(base, ch);
 2012              		.loc 1 395 11 is_stmt 1 view .LVU629
 395:src/display.c **** 	else	set_dig(base, ch);
 2013              		.loc 1 395 15 is_stmt 0 view .LVU630
 2014 00b2 0146     		mov	r1, r0
 2015              	.LVL202:
 395:src/display.c **** 	else	set_dig(base, ch);
 2016              		.loc 1 395 18 view .LVU631
 2017 00b4 4023     		movs	r3, #64
 2018 00b6 01F8013B 		strb	r3, [r1], #1
 2019              	.LVL203:
 2020              	.L205:
 397:src/display.c **** }
 2021              		.loc 1 397 2 is_stmt 1 view .LVU632
 397:src/display.c **** }
 2022              		.loc 1 397 2 is_stmt 0 view .LVU633
 2023              	.LBE189:
 2024              	.LBE188:
1286:src/display.c **** 
 2025              		.loc 1 1286 2 is_stmt 1 view .LVU634
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2026              		.loc 1 1289 8 is_stmt 0 view .LVU635
 2027 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2028 00be 0122     		movs	r2, #1
1286:src/display.c **** 
 2029              		.loc 1 1286 4 view .LVU636
ARM GAS  /tmp/ccQmbpxO.s 			page 93


 2030 00c0 03F10904 		add	r4, r3, #9
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2031              		.loc 1 1289 8 view .LVU637
 2032 00c4 0092     		str	r2, [sp]
 2033 00c6 0223     		movs	r3, #2
 2034 00c8 03AA     		add	r2, sp, #12
1286:src/display.c **** 
 2035              		.loc 1 1286 4 view .LVU638
 2036 00ca 0394     		str	r4, [sp, #12]
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2037              		.loc 1 1289 2 is_stmt 1 view .LVU639
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2038              		.loc 1 1289 8 is_stmt 0 view .LVU640
 2039 00cc FFF7FEFF 		bl	hms_render
 2040              	.LVL204:
1290:src/display.c **** 	j += SEGS_PER_DIGIT;
 2041              		.loc 1 1290 2 is_stmt 1 view .LVU641
 2042              	.LBB191:
 2043              	.LBI191:
 394:src/display.c **** 	if (res) *res++ = ch;
 2044              		.loc 1 394 14 view .LVU642
 2045              	.LBB192:
 395:src/display.c **** 	else	set_dig(base, ch);
 2046              		.loc 1 395 2 view .LVU643
 395:src/display.c **** 	else	set_dig(base, ch);
 2047              		.loc 1 395 5 is_stmt 0 view .LVU644
 2048 00d0 0446     		mov	r4, r0
 2049 00d2 0028     		cmp	r0, #0
 2050 00d4 5ED0     		beq	.L206
 395:src/display.c **** 	else	set_dig(base, ch);
 2051              		.loc 1 395 11 is_stmt 1 view .LVU645
 395:src/display.c **** 	else	set_dig(base, ch);
 2052              		.loc 1 395 15 is_stmt 0 view .LVU646
 2053 00d6 0146     		mov	r1, r0
 2054              	.LVL205:
 395:src/display.c **** 	else	set_dig(base, ch);
 2055              		.loc 1 395 18 view .LVU647
 2056 00d8 2723     		movs	r3, #39
 2057 00da 01F8013B 		strb	r3, [r1], #1
 2058              	.LVL206:
 2059              	.L207:
 397:src/display.c **** }
 2060              		.loc 1 397 2 is_stmt 1 view .LVU648
 397:src/display.c **** }
 2061              		.loc 1 397 2 is_stmt 0 view .LVU649
 2062              	.LBE192:
 2063              	.LBE191:
1291:src/display.c **** 
 2064              		.loc 1 1291 2 is_stmt 1 view .LVU650
1291:src/display.c **** 
 2065              		.loc 1 1291 4 is_stmt 0 view .LVU651
 2066 00de 039B     		ldr	r3, [sp, #12]
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2067              		.loc 1 1294 8 view .LVU652
 2068 00e0 0598     		ldr	r0, [sp, #20]
 2069 00e2 0122     		movs	r2, #1
1291:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 94


 2070              		.loc 1 1291 4 view .LVU653
 2071 00e4 03F10904 		add	r4, r3, #9
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2072              		.loc 1 1294 8 view .LVU654
 2073 00e8 0092     		str	r2, [sp]
 2074 00ea 0223     		movs	r3, #2
 2075 00ec 03AA     		add	r2, sp, #12
1291:src/display.c **** 
 2076              		.loc 1 1291 4 view .LVU655
 2077 00ee 0394     		str	r4, [sp, #12]
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2078              		.loc 1 1294 2 is_stmt 1 view .LVU656
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2079              		.loc 1 1294 8 is_stmt 0 view .LVU657
 2080 00f0 FFF7FEFF 		bl	hms_render
 2081              	.LVL207:
1295:src/display.c **** 
 2082              		.loc 1 1295 8 view .LVU658
 2083 00f4 3149     		ldr	r1, .L224+4
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2084              		.loc 1 1294 8 view .LVU659
 2085 00f6 0246     		mov	r2, r0
 2086              	.LVL208:
1295:src/display.c **** 
 2087              		.loc 1 1295 2 is_stmt 1 view .LVU660
1295:src/display.c **** 
 2088              		.loc 1 1295 8 is_stmt 0 view .LVU661
 2089 00f8 0398     		ldr	r0, [sp, #12]
 2090              	.LVL209:
1295:src/display.c **** 
 2091              		.loc 1 1295 8 view .LVU662
 2092 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2093 00fc 0938     		subs	r0, r0, #9
 2094 00fe FFF7FEFF 		bl	set_decimal
 2095              	.LVL210:
1298:src/display.c **** 
 2096              		.loc 1 1298 8 view .LVU663
 2097 0102 0023     		movs	r3, #0
1295:src/display.c **** 
 2098              		.loc 1 1295 8 view .LVU664
 2099 0104 0146     		mov	r1, r0
 2100              	.LVL211:
1298:src/display.c **** 
 2101              		.loc 1 1298 2 is_stmt 1 view .LVU665
1298:src/display.c **** 
 2102              		.loc 1 1298 8 is_stmt 0 view .LVU666
 2103 0106 0093     		str	r3, [sp]
 2104 0108 0698     		ldr	r0, [sp, #24]
 2105              	.LVL212:
1298:src/display.c **** 
 2106              		.loc 1 1298 8 view .LVU667
 2107 010a 03AA     		add	r2, sp, #12
 2108 010c 0223     		movs	r3, #2
 2109 010e FFF7FEFF 		bl	hms_render
 2110              	.LVL213:
1301:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2111              		.loc 1 1301 2 is_stmt 1 view .LVU668
ARM GAS  /tmp/ccQmbpxO.s 			page 95


 2112              	.LBB194:
 2113              	.LBI194:
 394:src/display.c **** 	if (res) *res++ = ch;
 2114              		.loc 1 394 14 view .LVU669
 2115              	.LBB195:
 395:src/display.c **** 	else	set_dig(base, ch);
 2116              		.loc 1 395 2 view .LVU670
 395:src/display.c **** 	else	set_dig(base, ch);
 2117              		.loc 1 395 5 is_stmt 0 view .LVU671
 2118 0112 0446     		mov	r4, r0
 2119 0114 78B3     		cbz	r0, .L208
 395:src/display.c **** 	else	set_dig(base, ch);
 2120              		.loc 1 395 11 is_stmt 1 view .LVU672
 2121              	.LVL214:
 395:src/display.c **** 	else	set_dig(base, ch);
 2122              		.loc 1 395 18 is_stmt 0 view .LVU673
 2123 0116 2223     		movs	r3, #34
 2124 0118 0370     		strb	r3, [r0]
 2125              	.LVL215:
 397:src/display.c **** }
 2126              		.loc 1 397 2 is_stmt 1 view .LVU674
 397:src/display.c **** }
 2127              		.loc 1 397 2 is_stmt 0 view .LVU675
 2128              	.LBE195:
 2129              	.LBE194:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2130              		.loc 1 1305 2 is_stmt 1 view .LVU676
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2131              		.loc 1 1305 6 is_stmt 0 view .LVU677
 2132 011a 2749     		ldr	r1, .L224
 2133 011c 19A8     		add	r0, sp, #100
 2134              	.LVL216:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2135              		.loc 1 1305 6 view .LVU678
 2136 011e FFF7FEFF 		bl	dn_lt
 2137              	.LVL217:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2138              		.loc 1 1305 5 view .LVU679
 2139 0122 78B9     		cbnz	r0, .L223
1306:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2140              		.loc 1 1306 3 is_stmt 1 view .LVU680
 2141              	.LVL218:
 2142              	.LBB198:
 2143              	.LBI198:
 394:src/display.c **** 	if (res) *res++ = ch;
 2144              		.loc 1 394 14 view .LVU681
 2145              	.LBB199:
 395:src/display.c **** 	else	set_dig(base, ch);
 2146              		.loc 1 395 2 view .LVU682
 395:src/display.c **** 	else	set_dig(base, ch);
 2147              		.loc 1 395 11 view .LVU683
 395:src/display.c **** 	else	set_dig(base, ch);
 2148              		.loc 1 395 18 is_stmt 0 view .LVU684
 2149 0124 6F23     		movs	r3, #111
 2150 0126 6370     		strb	r3, [r4, #1]
 2151              	.LBE199:
 2152              	.LBE198:
ARM GAS  /tmp/ccQmbpxO.s 			page 96


1312:src/display.c **** 
 2153              		.loc 1 1312 1 view .LVU685
 2154 0128 35B0     		add	sp, sp, #212
 2155              		.cfi_remember_state
 2156              		.cfi_def_cfa_offset 12
 2157              		@ sp needed
 2158 012a 30BD     		pop	{r4, r5, pc}
 2159              	.LVL219:
 2160              	.L222:
 2161              		.cfi_restore_state
1265:src/display.c **** 			*res++ += '-';
 2162              		.loc 1 1265 3 is_stmt 1 view .LVU686
1265:src/display.c **** 			*res++ += '-';
 2163              		.loc 1 1265 6 is_stmt 0 view .LVU687
 2164 012c E5B1     		cbz	r5, .L199
1266:src/display.c **** 		else
 2165              		.loc 1 1266 4 is_stmt 1 view .LVU688
1266:src/display.c **** 		else
 2166              		.loc 1 1266 8 is_stmt 0 view .LVU689
 2167 012e 2B46     		mov	r3, r5
 2168              	.LVL220:
1266:src/display.c **** 		else
 2169              		.loc 1 1266 11 view .LVU690
 2170 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2171              	.LVL221:
1266:src/display.c **** 		else
 2172              		.loc 1 1266 11 view .LVU691
 2173 0134 2D32     		adds	r2, r2, #45
 2174 0136 2A70     		strb	r2, [r5]
1266:src/display.c **** 		else
 2175              		.loc 1 1266 8 view .LVU692
 2176 0138 1D46     		mov	r5, r3
 2177              	.LVL222:
 2178              	.L200:
1269:src/display.c **** 	}
 2179              		.loc 1 1269 3 is_stmt 1 view .LVU693
 2180 013a 07A9     		add	r1, sp, #28
 2181 013c 0846     		mov	r0, r1
 2182 013e FFF7FEFF 		bl	dn_minus
 2183              	.LVL223:
 2184 0142 80E7     		b	.L198
 2185              	.LVL224:
 2186              	.L223:
 2187              	.LBB200:
 2188              	.LBB196:
 395:src/display.c **** 	else	set_dig(base, ch);
 2189              		.loc 1 395 15 is_stmt 0 view .LVU694
 2190 0144 0134     		adds	r4, r4, #1
 2191              	.LVL225:
 2192              	.L211:
 395:src/display.c **** 	else	set_dig(base, ch);
 2193              		.loc 1 395 15 view .LVU695
 2194              	.LBE196:
 2195              	.LBE200:
1307:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2196              		.loc 1 1307 9 is_stmt 1 view .LVU696
1307:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
ARM GAS  /tmp/ccQmbpxO.s 			page 97


 2197              		.loc 1 1307 15 is_stmt 0 view .LVU697
 2198 0146 19A8     		add	r0, sp, #100
 2199 0148 FFF7FEFF 		bl	dn_eq0
 2200              	.LVL226:
1307:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2201              		.loc 1 1307 12 view .LVU698
 2202 014c 0028     		cmp	r0, #0
 2203 014e 7FF469AF 		bne	.L193
1308:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2204              		.loc 1 1308 3 is_stmt 1 view .LVU699
1308:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2205              		.loc 1 1308 7 is_stmt 0 view .LVU700
 2206 0152 1B48     		ldr	r0, .L224+8
 2207 0154 19A9     		add	r1, sp, #100
 2208 0156 FFF7FEFF 		bl	dn_lt
 2209              	.LVL227:
1308:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2210              		.loc 1 1308 6 view .LVU701
 2211 015a 0028     		cmp	r0, #0
 2212 015c 7FF462AF 		bne	.L193
1309:src/display.c **** 		}
 2213              		.loc 1 1309 4 is_stmt 1 view .LVU702
 2214              	.LVL228:
 2215              	.LBB201:
 2216              	.LBI201:
 394:src/display.c **** 	if (res) *res++ = ch;
 2217              		.loc 1 394 14 view .LVU703
 2218              	.LBB202:
 395:src/display.c **** 	else	set_dig(base, ch);
 2219              		.loc 1 395 2 view .LVU704
 395:src/display.c **** 	else	set_dig(base, ch);
 2220              		.loc 1 395 5 is_stmt 0 view .LVU705
 2221 0160 24B3     		cbz	r4, .L213
 395:src/display.c **** 	else	set_dig(base, ch);
 2222              		.loc 1 395 11 is_stmt 1 view .LVU706
 2223              	.LVL229:
 395:src/display.c **** 	else	set_dig(base, ch);
 2224              		.loc 1 395 18 is_stmt 0 view .LVU707
 2225 0162 7523     		movs	r3, #117
 2226 0164 2370     		strb	r3, [r4]
 2227 0166 5DE7     		b	.L193
 2228              	.LVL230:
 2229              	.L199:
 395:src/display.c **** 	else	set_dig(base, ch);
 2230              		.loc 1 395 18 view .LVU708
 2231              	.LBE202:
 2232              	.LBE201:
1268:src/display.c **** 		dn_minus(&x, &x);
 2233              		.loc 1 1268 4 is_stmt 1 view .LVU709
 2234              	.LBB204:
 2235              	.LBI204:
 283:src/display.c **** {
 2236              		.loc 1 283 13 view .LVU710
 2237              	.LBB205:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2238              		.loc 1 285 2 view .LVU711
 285:src/display.c **** 	set_dot(MANT_SIGN);
ARM GAS  /tmp/ccQmbpxO.s 			page 98


 2239              		.loc 1 285 24 is_stmt 0 view .LVU712
 2240 0168 164B     		ldr	r3, .L224+12
 2241 016a 2D22     		movs	r2, #45
 286:src/display.c **** }
 2242              		.loc 1 286 2 view .LVU713
 2243 016c 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2244              		.loc 1 285 24 view .LVU714
 2245 016e 1A70     		strb	r2, [r3]
 286:src/display.c **** }
 2246              		.loc 1 286 2 is_stmt 1 view .LVU715
 2247 0170 FFF7FEFF 		bl	set_dot
 2248              	.LVL231:
 287:src/display.c **** 
 2249              		.loc 1 287 1 is_stmt 0 view .LVU716
 2250 0174 E1E7     		b	.L200
 2251              	.LVL232:
 2252              	.L208:
 287:src/display.c **** 
 2253              		.loc 1 287 1 view .LVU717
 2254              	.LBE205:
 2255              	.LBE204:
 2256              	.LBB206:
 2257              	.LBB197:
 396:src/display.c **** 	return res;
 2258              		.loc 1 396 7 is_stmt 1 view .LVU718
 2259 0176 0398     		ldr	r0, [sp, #12]
 2260              	.LVL233:
 396:src/display.c **** 	return res;
 2261              		.loc 1 396 7 is_stmt 0 view .LVU719
 2262 0178 2221     		movs	r1, #34
 2263 017a FFF7FEFF 		bl	set_dig
 2264              	.LVL234:
 397:src/display.c **** }
 2265              		.loc 1 397 2 is_stmt 1 view .LVU720
 397:src/display.c **** }
 2266              		.loc 1 397 2 is_stmt 0 view .LVU721
 2267              	.LBE197:
 2268              	.LBE206:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2269              		.loc 1 1305 2 is_stmt 1 view .LVU722
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2270              		.loc 1 1305 6 is_stmt 0 view .LVU723
 2271 017e 0E49     		ldr	r1, .L224
 2272 0180 19A8     		add	r0, sp, #100
 2273 0182 FFF7FEFF 		bl	dn_lt
 2274              	.LVL235:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2275              		.loc 1 1305 5 view .LVU724
 2276 0186 0028     		cmp	r0, #0
 2277 0188 DDD1     		bne	.L211
 2278              	.LVL236:
 2279              	.L197:
 2280              	.LBB207:
 2281              	.LBB187:
 396:src/display.c **** 	return res;
 2282              		.loc 1 396 7 is_stmt 1 view .LVU725
ARM GAS  /tmp/ccQmbpxO.s 			page 99


 2283 018a 6F21     		movs	r1, #111
 2284 018c 7A20     		movs	r0, #122
 2285 018e FFF7FEFF 		bl	set_dig
 2286              	.LVL237:
 2287              	.LBE187:
 2288              	.LBE207:
1258:src/display.c **** 	}
 2289              		.loc 1 1258 3 view .LVU726
 2290 0192 47E7     		b	.L193
 2291              	.LVL238:
 2292              	.L206:
 2293              	.LBB208:
 2294              	.LBB193:
 396:src/display.c **** 	return res;
 2295              		.loc 1 396 7 view .LVU727
 2296 0194 2721     		movs	r1, #39
 2297 0196 0398     		ldr	r0, [sp, #12]
 2298              	.LVL239:
 396:src/display.c **** 	return res;
 2299              		.loc 1 396 7 is_stmt 0 view .LVU728
 2300 0198 FFF7FEFF 		bl	set_dig
 2301              	.LVL240:
 396:src/display.c **** 	return res;
 2302              		.loc 1 396 7 view .LVU729
 2303 019c 2146     		mov	r1, r4
 2304 019e 9EE7     		b	.L207
 2305              	.LVL241:
 2306              	.L204:
 396:src/display.c **** 	return res;
 2307              		.loc 1 396 7 view .LVU730
 2308              	.LBE193:
 2309              	.LBE208:
 2310              	.LBB209:
 2311              	.LBB190:
 396:src/display.c **** 	return res;
 2312              		.loc 1 396 7 is_stmt 1 view .LVU731
 2313 01a0 4021     		movs	r1, #64
 2314 01a2 0398     		ldr	r0, [sp, #12]
 2315              	.LVL242:
 396:src/display.c **** 	return res;
 2316              		.loc 1 396 7 is_stmt 0 view .LVU732
 2317 01a4 FFF7FEFF 		bl	set_dig
 2318              	.LVL243:
 396:src/display.c **** 	return res;
 2319              		.loc 1 396 7 view .LVU733
 2320 01a8 2146     		mov	r1, r4
 2321 01aa 86E7     		b	.L205
 2322              	.LVL244:
 2323              	.L213:
 396:src/display.c **** 	return res;
 2324              		.loc 1 396 7 view .LVU734
 2325              	.LBE190:
 2326              	.LBE209:
 2327              	.LBB210:
 2328              	.LBB203:
 396:src/display.c **** 	return res;
 2329              		.loc 1 396 7 is_stmt 1 view .LVU735
ARM GAS  /tmp/ccQmbpxO.s 			page 100


 2330 01ac 7521     		movs	r1, #117
 2331 01ae 7A20     		movs	r0, #122
 2332 01b0 FFF7FEFF 		bl	set_dig
 2333              	.LVL245:
 2334 01b4 36E7     		b	.L193
 2335              	.L225:
 2336 01b6 00BF     		.align	2
 2337              	.L224:
 2338 01b8 00000000 		.word	const_9000
 2339 01bc 00000000 		.word	.LANCHOR1
 2340 01c0 00000000 		.word	const_hms_threshold
 2341 01c4 00000000 		.word	LastDisplayedNumber
 2342              	.LBE203:
 2343              	.LBE210:
 2344              		.cfi_endproc
 2345              	.LFE22:
 2347              		.section	.text.set_x_fract,"ax",%progbits
 2348              		.align	1
 2349              		.p2align 2,,3
 2350              		.syntax unified
 2351              		.thumb
 2352              		.thumb_func
 2353              		.fpu fpv4-sp-d16
 2355              	set_x_fract:
 2356              	.LVL246:
 2357              	.LFB23:
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2358              		.loc 1 1315 57 view -0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 216
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
1316:src/display.c **** 	char buf[32], *p = buf;
 2362              		.loc 1 1316 2 view .LVU737
1317:src/display.c **** 	int j;
 2363              		.loc 1 1317 2 view .LVU738
1318:src/display.c **** 
 2364              		.loc 1 1318 2 view .LVU739
1320:src/display.c **** 		return 1;
 2365              		.loc 1 1320 2 view .LVU740
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2366              		.loc 1 1315 57 is_stmt 0 view .LVU741
 2367 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2368              		.cfi_def_cfa_offset 20
 2369              		.cfi_offset 4, -20
 2370              		.cfi_offset 5, -16
 2371              		.cfi_offset 6, -12
 2372              		.cfi_offset 7, -8
 2373              		.cfi_offset 14, -4
 2374 0002 0646     		mov	r6, r0
 2375 0004 B7B0     		sub	sp, sp, #220
 2376              		.cfi_def_cfa_offset 240
1320:src/display.c **** 		return 1;
 2377              		.loc 1 1320 6 view .LVU742
 2378 0006 0830     		adds	r0, r0, #8
 2379              	.LVL247:
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2380              		.loc 1 1315 57 view .LVU743
ARM GAS  /tmp/ccQmbpxO.s 			page 101


 2381 0008 0C46     		mov	r4, r1
1320:src/display.c **** 		return 1;
 2382              		.loc 1 1320 6 view .LVU744
 2383 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2384              	.LVL248:
1320:src/display.c **** 		return 1;
 2385              		.loc 1 1320 5 view .LVU745
 2386 000e 18B1     		cbz	r0, .L257
 2387              	.LVL249:
 2388              	.L246:
1321:src/display.c **** 	dn_abs(&x, rgx);
 2389              		.loc 1 1321 10 view .LVU746
 2390 0010 0125     		movs	r5, #1
 2391              	.L226:
1378:src/display.c **** 
 2392              		.loc 1 1378 1 view .LVU747
 2393 0012 2846     		mov	r0, r5
 2394 0014 37B0     		add	sp, sp, #220
 2395              		.cfi_remember_state
 2396              		.cfi_def_cfa_offset 20
 2397              		@ sp needed
 2398 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2399              	.LVL250:
 2400              	.L257:
 2401              		.cfi_restore_state
 2402              	.LBB219:
 2403              	.LBI219:
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2404              		.loc 1 1315 12 is_stmt 1 view .LVU748
 2405              	.LBB220:
1322:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2406              		.loc 1 1322 2 view .LVU749
 2407 0018 3146     		mov	r1, r6
 2408 001a 0546     		mov	r5, r0
 2409 001c 09A8     		add	r0, sp, #36
 2410 001e FFF7FEFF 		bl	dn_abs
 2411              	.LVL251:
1323:src/display.c **** 		return 0;
 2412              		.loc 1 1323 2 view .LVU750
1323:src/display.c **** 		return 0;
 2413              		.loc 1 1323 6 is_stmt 0 view .LVU751
 2414 0022 5D49     		ldr	r1, .L262
 2415 0024 09A8     		add	r0, sp, #36
 2416 0026 FFF7FEFF 		bl	dn_lt
 2417              	.LVL252:
1323:src/display.c **** 		return 0;
 2418              		.loc 1 1323 5 view .LVU752
 2419 002a 0028     		cmp	r0, #0
 2420 002c F1D0     		beq	.L226
1325:src/display.c **** 		return 0;
 2421              		.loc 1 1325 2 is_stmt 1 view .LVU753
1325:src/display.c **** 		return 0;
 2422              		.loc 1 1325 6 is_stmt 0 view .LVU754
 2423 002e 5B49     		ldr	r1, .L262+4
 2424 0030 09A8     		add	r0, sp, #36
 2425 0032 FFF7FEFF 		bl	dn_lt
 2426              	.LVL253:
ARM GAS  /tmp/ccQmbpxO.s 			page 102


1325:src/display.c **** 		return 0;
 2427              		.loc 1 1325 5 view .LVU755
 2428 0036 0746     		mov	r7, r0
 2429 0038 0028     		cmp	r0, #0
 2430 003a EAD1     		bne	.L226
1327:src/display.c **** 		if (res != NULL)
 2431              		.loc 1 1327 2 is_stmt 1 view .LVU756
1327:src/display.c **** 		if (res != NULL)
 2432              		.loc 1 1327 5 is_stmt 0 view .LVU757
 2433 003c 96F90830 		ldrsb	r3, [r6, #8]
 2434 0040 002B     		cmp	r3, #0
 2435 0042 C0F28680 		blt	.L258
 2436              	.LVL254:
 2437              	.L231:
1333:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2438              		.loc 1 1333 2 is_stmt 1 view .LVU758
 2439 0046 09A9     		add	r1, sp, #36
 2440 0048 12A8     		add	r0, sp, #72
 2441 004a FFF7FEFF 		bl	decNumberFrac
 2442              	.LVL255:
1334:src/display.c **** 
 2443              		.loc 1 1334 2 view .LVU759
 2444 004e 12AA     		add	r2, sp, #72
 2445 0050 24A9     		add	r1, sp, #144
 2446 0052 1BA8     		add	r0, sp, #108
 2447 0054 FFF7FEFF 		bl	decNumber2Fraction
 2448              	.LVL256:
1336:src/display.c **** 	dn_compare(&t, &t, &w);
 2449              		.loc 1 1336 2 view .LVU760
 2450 0058 24AA     		add	r2, sp, #144
 2451 005a 1BA9     		add	r1, sp, #108
 2452 005c 2DA8     		add	r0, sp, #180
 2453 005e FFF7FEFF 		bl	dn_divide
 2454              	.LVL257:
1337:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2455              		.loc 1 1337 2 view .LVU761
 2456 0062 2DA9     		add	r1, sp, #180
 2457 0064 12AA     		add	r2, sp, #72
 2458 0066 0846     		mov	r0, r1
 2459 0068 FFF7FEFF 		bl	dn_compare
 2460              	.LVL258:
1338:src/display.c **** 
 2461              		.loc 1 1338 2 view .LVU762
 2462 006c 09A9     		add	r1, sp, #36
 2463 006e 12A8     		add	r0, sp, #72
 2464 0070 FFF7FEFF 		bl	decNumberTrunc
 2465              	.LVL259:
1340:src/display.c **** 		dn_inc(&w);
 2466              		.loc 1 1340 2 view .LVU763
1340:src/display.c **** 		dn_inc(&w);
 2467              		.loc 1 1340 6 is_stmt 0 view .LVU764
 2468 0074 24A9     		add	r1, sp, #144
 2469 0076 1BA8     		add	r0, sp, #108
 2470 0078 FFF7FEFF 		bl	dn_eq
 2471              	.LVL260:
1340:src/display.c **** 		dn_inc(&w);
 2472              		.loc 1 1340 5 view .LVU765
ARM GAS  /tmp/ccQmbpxO.s 			page 103


 2473 007c 0028     		cmp	r0, #0
 2474 007e 70D1     		bne	.L259
 2475              	.L233:
1345:src/display.c **** 		if (!dn_eq0(&w)) {
 2476              		.loc 1 1345 2 is_stmt 1 view .LVU766
1345:src/display.c **** 		if (!dn_eq0(&w)) {
 2477              		.loc 1 1345 6 is_stmt 0 view .LVU767
 2478 0080 474B     		ldr	r3, .L262+8
 2479 0082 1B68     		ldr	r3, [r3]
 2480 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1345:src/display.c **** 		if (!dn_eq0(&w)) {
 2481              		.loc 1 1345 5 view .LVU768
 2482 0088 DB06     		lsls	r3, r3, #27
 2483 008a 55D4     		bmi	.L234
1346:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2484              		.loc 1 1346 3 is_stmt 1 view .LVU769
1346:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2485              		.loc 1 1346 8 is_stmt 0 view .LVU770
 2486 008c 12A8     		add	r0, sp, #72
 2487 008e FFF7FEFF 		bl	dn_eq0
 2488              	.LVL261:
1346:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2489              		.loc 1 1346 6 view .LVU771
 2490 0092 0028     		cmp	r0, #0
 2491 0094 6CD0     		beq	.L260
1317:src/display.c **** 	int j;
 2492              		.loc 1 1317 17 view .LVU772
 2493 0096 01AE     		add	r6, sp, #4
 2494              	.LVL262:
1317:src/display.c **** 	int j;
 2495              		.loc 1 1317 17 view .LVU773
 2496 0098 3546     		mov	r5, r6
 2497              	.L235:
 2498              	.LVL263:
1354:src/display.c **** 	*p++ = '/';
 2499              		.loc 1 1354 2 is_stmt 1 view .LVU774
1354:src/display.c **** 	*p++ = '/';
 2500              		.loc 1 1354 17 is_stmt 0 view .LVU775
 2501 009a 1BA8     		add	r0, sp, #108
 2502 009c FFF7FEFF 		bl	dn_to_int
 2503              	.LVL264:
 2504 00a0 0146     		mov	r1, r0
1354:src/display.c **** 	*p++ = '/';
 2505              		.loc 1 1354 6 view .LVU776
 2506 00a2 2846     		mov	r0, r5
 2507 00a4 FFF7FEFF 		bl	num_arg
 2508              	.LVL265:
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2509              		.loc 1 1355 2 is_stmt 1 view .LVU777
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2510              		.loc 1 1355 4 is_stmt 0 view .LVU778
 2511 00a8 0546     		mov	r5, r0
 2512              	.LVL266:
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2513              		.loc 1 1355 7 view .LVU779
 2514 00aa 2F23     		movs	r3, #47
 2515 00ac 05F8013B 		strb	r3, [r5], #1
ARM GAS  /tmp/ccQmbpxO.s 			page 104


 2516              	.LVL267:
1356:src/display.c **** 	*p = '\0';
 2517              		.loc 1 1356 2 is_stmt 1 view .LVU780
1356:src/display.c **** 	*p = '\0';
 2518              		.loc 1 1356 17 is_stmt 0 view .LVU781
 2519 00b0 24A8     		add	r0, sp, #144
 2520 00b2 FFF7FEFF 		bl	dn_to_int
 2521              	.LVL268:
 2522 00b6 0146     		mov	r1, r0
1356:src/display.c **** 	*p = '\0';
 2523              		.loc 1 1356 6 view .LVU782
 2524 00b8 2846     		mov	r0, r5
 2525 00ba FFF7FEFF 		bl	num_arg
 2526              	.LVL269:
1357:src/display.c **** 	if ((p - 12) > buf) {
 2527              		.loc 1 1357 2 is_stmt 1 view .LVU783
1357:src/display.c **** 	if ((p - 12) > buf) {
 2528              		.loc 1 1357 5 is_stmt 0 view .LVU784
 2529 00be 0546     		mov	r5, r0
 2530 00c0 0023     		movs	r3, #0
 2531 00c2 05F80C39 		strb	r3, [r5], #-12
1358:src/display.c **** 		p -= 12;
 2532              		.loc 1 1358 2 is_stmt 1 view .LVU785
1358:src/display.c **** 		p -= 12;
 2533              		.loc 1 1358 5 is_stmt 0 view .LVU786
 2534 00c6 B542     		cmp	r5, r6
 2535 00c8 32D8     		bhi	.L236
 2536 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2537              	.LVL270:
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2538              		.loc 1 1362 12 is_stmt 1 view .LVU787
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2539              		.loc 1 1362 2 is_stmt 0 view .LVU788
 2540 00ce 51B1     		cbz	r1, .L238
1361:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2541              		.loc 1 1361 11 view .LVU789
 2542 00d0 3546     		mov	r5, r6
 2543              	.LVL271:
 2544              	.L241:
1363:src/display.c **** 		j += SEGS_PER_DIGIT;
 2545              		.loc 1 1363 3 is_stmt 1 view .LVU790
 2546              	.LBB221:
 2547              	.LBI221:
 394:src/display.c **** 	if (res) *res++ = ch;
 2548              		.loc 1 394 14 view .LVU791
 2549              	.LBB222:
 395:src/display.c **** 	else	set_dig(base, ch);
 2550              		.loc 1 395 2 view .LVU792
 395:src/display.c **** 	else	set_dig(base, ch);
 2551              		.loc 1 395 11 view .LVU793
 395:src/display.c **** 	else	set_dig(base, ch);
 2552              		.loc 1 395 15 is_stmt 0 view .LVU794
 2553 00d2 2346     		mov	r3, r4
 2554              	.LVL272:
 395:src/display.c **** 	else	set_dig(base, ch);
 2555              		.loc 1 395 5 view .LVU795
 2556 00d4 34B3     		cbz	r4, .L239
ARM GAS  /tmp/ccQmbpxO.s 			page 105


 2557              	.LVL273:
 395:src/display.c **** 	else	set_dig(base, ch);
 2558              		.loc 1 395 18 view .LVU796
 2559 00d6 03F8011B 		strb	r1, [r3], #1
 2560              	.LVL274:
 395:src/display.c **** 	else	set_dig(base, ch);
 2561              		.loc 1 395 15 view .LVU797
 2562 00da 1C46     		mov	r4, r3
 2563              	.LVL275:
 2564              	.L240:
 397:src/display.c **** }
 2565              		.loc 1 397 2 is_stmt 1 view .LVU798
 397:src/display.c **** }
 2566              		.loc 1 397 2 is_stmt 0 view .LVU799
 2567              	.LBE222:
 2568              	.LBE221:
1364:src/display.c **** 	}
 2569              		.loc 1 1364 3 is_stmt 1 view .LVU800
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2570              		.loc 1 1362 12 is_stmt 0 view .LVU801
 2571 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2572              	.LVL276:
1364:src/display.c **** 	}
 2573              		.loc 1 1364 5 view .LVU802
 2574 00e0 0937     		adds	r7, r7, #9
 2575              	.LVL277:
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2576              		.loc 1 1362 24 is_stmt 1 view .LVU803
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2577              		.loc 1 1362 12 view .LVU804
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2578              		.loc 1 1362 2 is_stmt 0 view .LVU805
 2579 00e2 0029     		cmp	r1, #0
 2580 00e4 F5D1     		bne	.L241
 2581              	.LVL278:
 2582              	.L238:
1367:src/display.c **** 		p = (char *)S7_fract_EQ;
 2583              		.loc 1 1367 2 is_stmt 1 view .LVU806
1367:src/display.c **** 		p = (char *)S7_fract_EQ;
 2584              		.loc 1 1367 6 is_stmt 0 view .LVU807
 2585 00e6 2DA8     		add	r0, sp, #180
 2586 00e8 FFF7FEFF 		bl	dn_eq0
 2587              	.LVL279:
1367:src/display.c **** 		p = (char *)S7_fract_EQ;
 2588              		.loc 1 1367 5 view .LVU808
 2589 00ec F0B9     		cbnz	r0, .L249
1369:src/display.c **** 		p = (char *)S7_fract_LT;
 2590              		.loc 1 1369 7 is_stmt 1 view .LVU809
1369:src/display.c **** 		p = (char *)S7_fract_LT;
 2591              		.loc 1 1369 10 is_stmt 0 view .LVU810
 2592 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1372:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2593              		.loc 1 1372 5 view .LVU811
 2594 00f2 2C4D     		ldr	r5, .L262+12
 2595 00f4 2C4B     		ldr	r3, .L262+16
 2596 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2597 00fa 38BF     		it	cc
ARM GAS  /tmp/ccQmbpxO.s 			page 106


 2598 00fc 1D46     		movcc	r5, r3
 2599              	.L242:
 2600              	.LVL280:
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2601              		.loc 1 1373 26 is_stmt 1 view .LVU812
 2602              	.LBB225:
 2603              	.LBB223:
 395:src/display.c **** 	else	set_dig(base, ch);
 2604              		.loc 1 395 15 is_stmt 0 view .LVU813
 2605 00fe 6C26     		movs	r6, #108
 2606 0100 2021     		movs	r1, #32
 2607 0102 08E0     		b	.L245
 2608              	.LVL281:
 2609              	.L261:
 395:src/display.c **** 	else	set_dig(base, ch);
 2610              		.loc 1 395 15 view .LVU814
 2611              	.LBE223:
 2612              	.LBE225:
 2613              	.LBB226:
 2614              	.LBB227:
 395:src/display.c **** 	else	set_dig(base, ch);
 2615              		.loc 1 395 18 view .LVU815
 2616 0104 03F8011B 		strb	r1, [r3], #1
 2617              	.LVL282:
 395:src/display.c **** 	else	set_dig(base, ch);
 2618              		.loc 1 395 15 view .LVU816
 2619 0108 1C46     		mov	r4, r3
 2620              	.LVL283:
 2621              	.L244:
 397:src/display.c **** }
 2622              		.loc 1 397 2 is_stmt 1 view .LVU817
 397:src/display.c **** }
 2623              		.loc 1 397 2 is_stmt 0 view .LVU818
 2624              	.LBE227:
 2625              	.LBE226:
1375:src/display.c **** 	}
 2626              		.loc 1 1375 3 is_stmt 1 view .LVU819
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2627              		.loc 1 1373 26 is_stmt 0 view .LVU820
 2628 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2629              	.LVL284:
1375:src/display.c **** 	}
 2630              		.loc 1 1375 5 view .LVU821
 2631 010e 0736     		adds	r6, r6, #7
 2632              	.LVL285:
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2633              		.loc 1 1373 38 is_stmt 1 view .LVU822
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2634              		.loc 1 1373 26 view .LVU823
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2635              		.loc 1 1373 2 is_stmt 0 view .LVU824
 2636 0110 0029     		cmp	r1, #0
 2637 0112 3FF47DAF 		beq	.L246
 2638              	.LVL286:
 2639              	.L245:
1374:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
 2640              		.loc 1 1374 3 is_stmt 1 view .LVU825
ARM GAS  /tmp/ccQmbpxO.s 			page 107


 2641              	.LBB229:
 2642              	.LBI226:
 394:src/display.c **** 	if (res) *res++ = ch;
 2643              		.loc 1 394 14 view .LVU826
 2644              	.LBB228:
 395:src/display.c **** 	else	set_dig(base, ch);
 2645              		.loc 1 395 2 view .LVU827
 395:src/display.c **** 	else	set_dig(base, ch);
 2646              		.loc 1 395 11 view .LVU828
 395:src/display.c **** 	else	set_dig(base, ch);
 2647              		.loc 1 395 15 is_stmt 0 view .LVU829
 2648 0116 2346     		mov	r3, r4
 2649              	.LVL287:
 395:src/display.c **** 	else	set_dig(base, ch);
 2650              		.loc 1 395 5 view .LVU830
 2651 0118 002C     		cmp	r4, #0
 2652 011a F3D1     		bne	.L261
 2653              	.LVL288:
 396:src/display.c **** 	return res;
 2654              		.loc 1 396 7 is_stmt 1 view .LVU831
 2655 011c 3046     		mov	r0, r6
 2656 011e FFF7FEFF 		bl	set_dig
 2657              	.LVL289:
 396:src/display.c **** 	return res;
 2658              		.loc 1 396 7 is_stmt 0 view .LVU832
 2659 0122 F2E7     		b	.L244
 2660              	.LVL290:
 2661              	.L239:
 396:src/display.c **** 	return res;
 2662              		.loc 1 396 7 view .LVU833
 2663              	.LBE228:
 2664              	.LBE229:
 2665              	.LBB230:
 2666              	.LBB224:
 396:src/display.c **** 	return res;
 2667              		.loc 1 396 7 is_stmt 1 view .LVU834
 2668 0124 3846     		mov	r0, r7
 2669 0126 FFF7FEFF 		bl	set_dig
 2670              	.LVL291:
 396:src/display.c **** 	return res;
 2671              		.loc 1 396 7 is_stmt 0 view .LVU835
 2672 012a D7E7     		b	.L240
 2673              	.LVL292:
 2674              	.L249:
 396:src/display.c **** 	return res;
 2675              		.loc 1 396 7 view .LVU836
 2676              	.LBE224:
 2677              	.LBE230:
1368:src/display.c **** 	else if (decNumberIsNegative(&t))
 2678              		.loc 1 1368 5 view .LVU837
 2679 012c 1F4D     		ldr	r5, .L262+20
 2680 012e E6E7     		b	.L242
 2681              	.LVL293:
 2682              	.L236:
1359:src/display.c **** 		*p = '<';
 2683              		.loc 1 1359 3 is_stmt 1 view .LVU838
1360:src/display.c **** 	} else	p = buf;
ARM GAS  /tmp/ccQmbpxO.s 			page 108


 2684              		.loc 1 1360 3 view .LVU839
1360:src/display.c **** 	} else	p = buf;
 2685              		.loc 1 1360 6 is_stmt 0 view .LVU840
 2686 0130 3C21     		movs	r1, #60
 2687 0132 00F80C1C 		strb	r1, [r0, #-12]
 2688              	.LVL294:
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2689              		.loc 1 1362 12 is_stmt 1 view .LVU841
 2690 0136 CCE7     		b	.L241
 2691              	.LVL295:
 2692              	.L234:
1351:src/display.c **** 		dn_add(&n, &n, &x);
 2693              		.loc 1 1351 3 view .LVU842
 2694 0138 12A9     		add	r1, sp, #72
 2695 013a 24AA     		add	r2, sp, #144
 2696 013c 09A8     		add	r0, sp, #36
 2697 013e FFF7FEFF 		bl	dn_multiply
 2698              	.LVL296:
1352:src/display.c **** 	}
 2699              		.loc 1 1352 3 view .LVU843
 2700 0142 1BA9     		add	r1, sp, #108
 2701 0144 09AA     		add	r2, sp, #36
 2702 0146 0846     		mov	r0, r1
1317:src/display.c **** 	int j;
 2703              		.loc 1 1317 17 is_stmt 0 view .LVU844
 2704 0148 01AE     		add	r6, sp, #4
 2705              	.LVL297:
1352:src/display.c **** 	}
 2706              		.loc 1 1352 3 view .LVU845
 2707 014a FFF7FEFF 		bl	dn_add
 2708              	.LVL298:
1317:src/display.c **** 	int j;
 2709              		.loc 1 1317 17 view .LVU846
 2710 014e 3546     		mov	r5, r6
 2711 0150 A3E7     		b	.L235
 2712              	.LVL299:
 2713              	.L258:
1328:src/display.c **** 			*res++ += '-';
 2714              		.loc 1 1328 3 is_stmt 1 view .LVU847
1328:src/display.c **** 			*res++ += '-';
 2715              		.loc 1 1328 6 is_stmt 0 view .LVU848
 2716 0152 D4B1     		cbz	r4, .L232
1329:src/display.c **** 		else
 2717              		.loc 1 1329 4 is_stmt 1 view .LVU849
1329:src/display.c **** 		else
 2718              		.loc 1 1329 8 is_stmt 0 view .LVU850
 2719 0154 2346     		mov	r3, r4
 2720              	.LVL300:
1329:src/display.c **** 		else
 2721              		.loc 1 1329 11 view .LVU851
 2722 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2723              	.LVL301:
1329:src/display.c **** 		else
 2724              		.loc 1 1329 11 view .LVU852
 2725 015a 2D32     		adds	r2, r2, #45
 2726 015c 2270     		strb	r2, [r4]
1329:src/display.c **** 		else
ARM GAS  /tmp/ccQmbpxO.s 			page 109


 2727              		.loc 1 1329 8 view .LVU853
 2728 015e 1C46     		mov	r4, r3
 2729              	.LVL302:
1329:src/display.c **** 		else
 2730              		.loc 1 1329 8 view .LVU854
 2731 0160 71E7     		b	.L231
 2732              	.LVL303:
 2733              	.L259:
1341:src/display.c **** 		decNumberZero(&n);
 2734              		.loc 1 1341 3 is_stmt 1 view .LVU855
 2735 0162 12A8     		add	r0, sp, #72
 2736 0164 FFF7FEFF 		bl	dn_inc
 2737              	.LVL304:
1342:src/display.c **** 	}
 2738              		.loc 1 1342 3 view .LVU856
 2739 0168 1BA8     		add	r0, sp, #108
 2740 016a FFF7FEFF 		bl	decNumberZero
 2741              	.LVL305:
 2742 016e 87E7     		b	.L233
 2743              	.L260:
1347:src/display.c **** 			*p++ = ' ';
 2744              		.loc 1 1347 4 view .LVU857
1347:src/display.c **** 			*p++ = ' ';
 2745              		.loc 1 1347 19 is_stmt 0 view .LVU858
 2746 0170 12A8     		add	r0, sp, #72
 2747 0172 FFF7FEFF 		bl	dn_to_int
 2748              	.LVL306:
1347:src/display.c **** 			*p++ = ' ';
 2749              		.loc 1 1347 8 view .LVU859
 2750 0176 01AE     		add	r6, sp, #4
 2751              	.LVL307:
1347:src/display.c **** 			*p++ = ' ';
 2752              		.loc 1 1347 19 view .LVU860
 2753 0178 0146     		mov	r1, r0
1347:src/display.c **** 			*p++ = ' ';
 2754              		.loc 1 1347 8 view .LVU861
 2755 017a 3046     		mov	r0, r6
 2756 017c FFF7FEFF 		bl	num_arg
 2757              	.LVL308:
1348:src/display.c **** 		}
 2758              		.loc 1 1348 4 is_stmt 1 view .LVU862
1348:src/display.c **** 		}
 2759              		.loc 1 1348 6 is_stmt 0 view .LVU863
 2760 0180 0546     		mov	r5, r0
 2761              	.LVL309:
1348:src/display.c **** 		}
 2762              		.loc 1 1348 9 view .LVU864
 2763 0182 2023     		movs	r3, #32
 2764 0184 05F8013B 		strb	r3, [r5], #1
 2765              	.LVL310:
1348:src/display.c **** 		}
 2766              		.loc 1 1348 9 view .LVU865
 2767 0188 87E7     		b	.L235
 2768              	.LVL311:
 2769              	.L232:
1331:src/display.c **** 	}
 2770              		.loc 1 1331 4 is_stmt 1 view .LVU866
ARM GAS  /tmp/ccQmbpxO.s 			page 110


 2771              	.LBB231:
 2772              	.LBI231:
 283:src/display.c **** {
 2773              		.loc 1 283 13 view .LVU867
 2774              	.LBB232:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2775              		.loc 1 285 2 view .LVU868
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2776              		.loc 1 285 24 is_stmt 0 view .LVU869
 2777 018a 094B     		ldr	r3, .L262+24
 2778 018c 2D22     		movs	r2, #45
 286:src/display.c **** }
 2779              		.loc 1 286 2 view .LVU870
 2780 018e 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2781              		.loc 1 285 24 view .LVU871
 2782 0190 1A70     		strb	r2, [r3]
 286:src/display.c **** }
 2783              		.loc 1 286 2 is_stmt 1 view .LVU872
 2784 0192 FFF7FEFF 		bl	set_dot
 2785              	.LVL312:
 287:src/display.c **** 
 2786              		.loc 1 287 1 is_stmt 0 view .LVU873
 2787 0196 56E7     		b	.L231
 2788              	.L263:
 2789              		.align	2
 2790              	.L262:
 2791 0198 00000000 		.word	const_100000
 2792 019c 00000000 		.word	const_0_0001
 2793 01a0 00000000 		.word	main_ram
 2794 01a4 00000000 		.word	.LANCHOR8
 2795 01a8 00000000 		.word	.LANCHOR10
 2796 01ac 00000000 		.word	.LANCHOR9
 2797 01b0 00000000 		.word	LastDisplayedNumber
 2798              	.LBE232:
 2799              	.LBE231:
 2800              	.LBE220:
 2801              	.LBE219:
 2802              		.cfi_endproc
 2803              	.LFE23:
 2805              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2806              		.align	2
 2807              	.LC2:
 2808 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2808      36376F39 
 2808      44313233 
 2808      34356800 
 2809              		.section	.text.carry_overflow,"ax",%progbits
 2810              		.align	1
 2811              		.p2align 2,,3
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	carry_overflow:
 2818              	.LFB15:
 549:src/display.c **** 	const int base = SEGS_EXP_BASE;
ARM GAS  /tmp/ccQmbpxO.s 			page 111


 2819              		.loc 1 549 34 is_stmt 1 view -0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 550:src/display.c **** 	int c;
 2823              		.loc 1 550 2 view .LVU875
 2824              	.LVL313:
 551:src/display.c **** 	unsigned int b;
 2825              		.loc 1 551 2 view .LVU876
 552:src/display.c **** 
 2826              		.loc 1 552 2 view .LVU877
 555:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2827              		.loc 1 555 2 view .LVU878
 549:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2828              		.loc 1 549 34 is_stmt 0 view .LVU879
 2829 0000 10B5     		push	{r4, lr}
 2830              		.cfi_def_cfa_offset 8
 2831              		.cfi_offset 4, -8
 2832              		.cfi_offset 14, -4
 555:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2833              		.loc 1 555 16 view .LVU880
 2834 0002 1B4B     		ldr	r3, .L277
 2835 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2836 0006 023B     		subs	r3, r3, #2
 2837 0008 DBB2     		uxtb	r3, r3
 2838 000a 032B     		cmp	r3, #3
 2839 000c 14D8     		bhi	.L265
 2840 000e 194A     		ldr	r2, .L277+4
 2841 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2842              	.LVL314:
 564:src/display.c **** 		SET_EXP_SIGN;
 2843              		.loc 1 564 2 is_stmt 1 view .LVU881
 564:src/display.c **** 		SET_EXP_SIGN;
 2844              		.loc 1 564 13 is_stmt 0 view .LVU882
 2845 0014 A4F10B03 		sub	r3, r4, #11
 564:src/display.c **** 		SET_EXP_SIGN;
 2846              		.loc 1 564 5 view .LVU883
 2847 0018 042B     		cmp	r3, #4
 2848 001a 17D9     		bls	.L274
 2849              	.L267:
 566:src/display.c **** 	set_dig(base, c);
 2850              		.loc 1 566 2 is_stmt 1 view .LVU884
 2851              	.LVL315:
 567:src/display.c **** 
 2852              		.loc 1 567 2 view .LVU885
 566:src/display.c **** 	set_dig(base, c);
 2853              		.loc 1 566 23 is_stmt 0 view .LVU886
 2854 001c 164B     		ldr	r3, .L277+8
 2855 001e 1C44     		add	r4, r4, r3
 2856              	.LVL316:
 567:src/display.c **** 
 2857              		.loc 1 567 2 view .LVU887
 2858 0020 6C20     		movs	r0, #108
 2859 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2860 0026 FFF7FEFF 		bl	set_dig
 2861              	.LVL317:
 570:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
ARM GAS  /tmp/ccQmbpxO.s 			page 112


 2862              		.loc 1 570 2 is_stmt 1 view .LVU888
 570:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2863              		.loc 1 570 6 is_stmt 0 view .LVU889
 2864 002a FFF7FEFF 		bl	get_carry
 2865              	.LVL318:
 570:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2866              		.loc 1 570 5 view .LVU890
 2867 002e D0B9     		cbnz	r0, .L275
 2868              	.L268:
 572:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2869              		.loc 1 572 2 is_stmt 1 view .LVU891
 572:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2870              		.loc 1 572 6 is_stmt 0 view .LVU892
 2871 0030 FFF7FEFF 		bl	get_overflow
 2872              	.LVL319:
 572:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2873              		.loc 1 572 5 view .LVU893
 2874 0034 88B9     		cbnz	r0, .L276
 574:src/display.c **** 
 2875              		.loc 1 574 1 view .LVU894
 2876 0036 10BD     		pop	{r4, pc}
 2877              	.LVL320:
 2878              	.L265:
 560:src/display.c **** 	}
 2879              		.loc 1 560 11 is_stmt 1 view .LVU895
 560:src/display.c **** 	}
 2880              		.loc 1 560 21 is_stmt 0 view .LVU896
 2881 0038 104B     		ldr	r3, .L277+12
 2882 003a 1B68     		ldr	r3, [r3]
 2883 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2884 0040 2409     		lsrs	r4, r4, #4
 560:src/display.c **** 	}
 2885              		.loc 1 560 30 view .LVU897
 2886 0042 0134     		adds	r4, r4, #1
 2887              	.LVL321:
 560:src/display.c **** 	}
 2888              		.loc 1 560 34 is_stmt 1 view .LVU898
 564:src/display.c **** 		SET_EXP_SIGN;
 2889              		.loc 1 564 2 view .LVU899
 564:src/display.c **** 		SET_EXP_SIGN;
 2890              		.loc 1 564 13 is_stmt 0 view .LVU900
 2891 0044 A4F10B03 		sub	r3, r4, #11
 564:src/display.c **** 		SET_EXP_SIGN;
 2892              		.loc 1 564 5 view .LVU901
 2893 0048 042B     		cmp	r3, #4
 2894 004a E7D8     		bhi	.L267
 2895              	.L274:
 565:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 2896              		.loc 1 565 3 is_stmt 1 view .LVU902
 2897              	.LBB239:
 2898              	.LBI239:
 295:src/display.c **** {
 2899              		.loc 1 295 13 view .LVU903
 2900              	.LBB240:
 297:src/display.c **** 	set_dot(EXP_SIGN);
 2901              		.loc 1 297 2 view .LVU904
 297:src/display.c **** 	set_dot(EXP_SIGN);
ARM GAS  /tmp/ccQmbpxO.s 			page 113


 2902              		.loc 1 297 26 is_stmt 0 view .LVU905
 2903 004c 0C4B     		ldr	r3, .L277+16
 2904 004e 2D22     		movs	r2, #45
 298:src/display.c **** }
 2905              		.loc 1 298 2 view .LVU906
 2906 0050 8220     		movs	r0, #130
 297:src/display.c **** 	set_dot(EXP_SIGN);
 2907              		.loc 1 297 26 view .LVU907
 2908 0052 1A70     		strb	r2, [r3]
 298:src/display.c **** }
 2909              		.loc 1 298 2 is_stmt 1 view .LVU908
 2910 0054 FFF7FEFF 		bl	set_dot
 2911              	.LVL322:
 299:src/display.c **** 
 2912              		.loc 1 299 1 is_stmt 0 view .LVU909
 2913 0058 E0E7     		b	.L267
 2914              	.LVL323:
 2915              	.L276:
 299:src/display.c **** 
 2916              		.loc 1 299 1 view .LVU910
 2917              	.LBE240:
 2918              	.LBE239:
 2919              	.LBB241:
 2920              	.LBI241:
 549:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2921              		.loc 1 549 13 is_stmt 1 view .LVU911
 2922              	.LBB242:
 573:src/display.c **** }
 2923              		.loc 1 573 3 view .LVU912
 2924              	.LBE242:
 2925              	.LBE241:
 574:src/display.c **** 
 2926              		.loc 1 574 1 is_stmt 0 view .LVU913
 2927 005a BDE81040 		pop	{r4, lr}
 2928              		.cfi_remember_state
 2929              		.cfi_restore 14
 2930              		.cfi_restore 4
 2931              		.cfi_def_cfa_offset 0
 2932              	.LVL324:
 2933              	.LBB244:
 2934              	.LBB243:
 573:src/display.c **** }
 2935              		.loc 1 573 3 view .LVU914
 2936 005e 6F21     		movs	r1, #111
 2937 0060 7A20     		movs	r0, #122
 2938 0062 FFF7FEBF 		b	set_dig
 2939              	.LVL325:
 2940              	.L275:
 2941              		.cfi_restore_state
 573:src/display.c **** }
 2942              		.loc 1 573 3 view .LVU915
 2943              	.LBE243:
 2944              	.LBE244:
 571:src/display.c **** 	if (get_overflow())
 2945              		.loc 1 571 3 is_stmt 1 view .LVU916
 2946 0066 6321     		movs	r1, #99
 2947 0068 7320     		movs	r0, #115
ARM GAS  /tmp/ccQmbpxO.s 			page 114


 2948 006a FFF7FEFF 		bl	set_dig
 2949              	.LVL326:
 2950 006e DFE7     		b	.L268
 2951              	.L278:
 2952              		.align	2
 2953              	.L277:
 2954 0070 00000000 		.word	StateWhileOn
 2955 0074 00000000 		.word	.LANCHOR11
 2956 0078 00000000 		.word	.LC2
 2957 007c 00000000 		.word	main_ram
 2958 0080 00000000 		.word	LastDisplayedExponent
 2959              		.cfi_endproc
 2960              	.LFE15:
 2962              		.global	__aeabi_uldivmod
 2963              		.section	.text.set_int_x,"ax",%progbits
 2964              		.align	1
 2965              		.p2align 2,,3
 2966              		.syntax unified
 2967              		.thumb
 2968              		.thumb_func
 2969              		.fpu fpv4-sp-d16
 2971              	set_int_x:
 2972              	.LVL327:
 2973              	.LFB18:
1041:src/display.c **** 	const int ws = word_size();
 2974              		.loc 1 1041 61 view -0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 88
 2977              		@ frame_needed = 0, uses_anonymous_args = 0
1041:src/display.c **** 	const int ws = word_size();
 2978              		.loc 1 1041 61 is_stmt 0 view .LVU918
 2979 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2980              		.cfi_def_cfa_offset 36
 2981              		.cfi_offset 4, -36
 2982              		.cfi_offset 5, -32
 2983              		.cfi_offset 6, -28
 2984              		.cfi_offset 7, -24
 2985              		.cfi_offset 8, -20
 2986              		.cfi_offset 9, -16
 2987              		.cfi_offset 10, -12
 2988              		.cfi_offset 11, -8
 2989              		.cfi_offset 14, -4
 2990 0004 97B0     		sub	sp, sp, #92
 2991              		.cfi_def_cfa_offset 128
1041:src/display.c **** 	const int ws = word_size();
 2992              		.loc 1 1041 61 view .LVU919
 2993 0006 9246     		mov	r10, r2
 2994 0008 8046     		mov	r8, r0
 2995 000a 8946     		mov	r9, r1
1042:src/display.c **** 	unsigned int b;
 2996              		.loc 1 1042 2 is_stmt 1 view .LVU920
1042:src/display.c **** 	unsigned int b;
 2997              		.loc 1 1042 17 is_stmt 0 view .LVU921
 2998 000c FFF7FEFF 		bl	word_size
 2999              	.LVL328:
1042:src/display.c **** 	unsigned int b;
 3000              		.loc 1 1042 17 view .LVU922
ARM GAS  /tmp/ccQmbpxO.s 			page 115


 3001 0010 CD4B     		ldr	r3, .L368
 3002 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3003 0014 023B     		subs	r3, r3, #2
 3004 0016 DBB2     		uxtb	r3, r3
1048:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3005              		.loc 1 1048 6 view .LVU923
 3006 0018 0022     		movs	r2, #0
 3007 001a 032B     		cmp	r3, #3
1042:src/display.c **** 	unsigned int b;
 3008              		.loc 1 1042 17 view .LVU924
 3009 001c 8346     		mov	fp, r0
 3010              	.LVL329:
1043:src/display.c **** 	long long int vs = value;
 3011              		.loc 1 1043 2 is_stmt 1 view .LVU925
1044:src/display.c **** 	unsigned long long int v;
 3012              		.loc 1 1044 2 view .LVU926
1045:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3013              		.loc 1 1045 2 view .LVU927
1046:src/display.c **** 	int i, j, k;
 3014              		.loc 1 1046 2 view .LVU928
1047:src/display.c **** 	int sign = 0;
 3015              		.loc 1 1047 2 view .LVU929
1048:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3016              		.loc 1 1048 2 view .LVU930
1048:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3017              		.loc 1 1048 6 is_stmt 0 view .LVU931
 3018 001e 0492     		str	r2, [sp, #16]
1049:src/display.c **** 
 3019              		.loc 1 1049 2 is_stmt 1 view .LVU932
 3020              	.LVL330:
1051:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3021              		.loc 1 1051 2 view .LVU933
 3022 0020 00F24481 		bhi	.L280
 3023 0024 C94A     		ldr	r2, .L368+4
 3024 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 3025              	.LVL331:
1059:src/display.c **** 		IntMaxWindow = 0;
 3026              		.loc 1 1059 2 view .LVU934
1059:src/display.c **** 		IntMaxWindow = 0;
 3027              		.loc 1 1059 5 is_stmt 0 view .LVU935
 3028 002a BAF1000F 		cmp	r10, #0
 3029 002e 00F04481 		beq	.L359
 3030              	.LVL332:
 3031              	.L282:
1064:src/display.c **** 		v = extract_value(value, &sign);
 3032              		.loc 1 1064 2 is_stmt 1 view .LVU936
1064:src/display.c **** 		v = extract_value(value, &sign);
 3033              		.loc 1 1064 24 is_stmt 0 view .LVU937
 3034 0032 6B1E     		subs	r3, r5, #1
1064:src/display.c **** 		v = extract_value(value, &sign);
 3035              		.loc 1 1064 30 view .LVU938
 3036 0034 47F67574 		movw	r4, #32629
 3037 0038 1C41     		asrs	r4, r4, r3
1064:src/display.c **** 		v = extract_value(value, &sign);
 3038              		.loc 1 1064 5 view .LVU939
 3039 003a 14F00104 		ands	r4, r4, #1
 3040 003e 40F0F080 		bne	.L360
ARM GAS  /tmp/ccQmbpxO.s 			page 116


1081:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3041              		.loc 1 1081 3 is_stmt 1 view .LVU940
1081:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3042              		.loc 1 1081 6 is_stmt 0 view .LVU941
 3043 0042 BBF13F0F 		cmp	fp, #63
 3044 0046 18DC     		bgt	.L293
 3045              	.LBB245:
1082:src/display.c **** 			vs &= mask;
 3046              		.loc 1 1082 4 is_stmt 1 view .LVU942
1082:src/display.c **** 			vs &= mask;
 3047              		.loc 1 1082 36 is_stmt 0 view .LVU943
 3048 0048 0121     		movs	r1, #1
 3049 004a ABF12006 		sub	r6, fp, #32
 3050 004e CBF12000 		rsb	r0, fp, #32
 3051 0052 21FA00F0 		lsr	r0, r1, r0
 3052 0056 01FA06F3 		lsl	r3, r1, r6
 3053 005a 01FA0BF2 		lsl	r2, r1, fp
 3054 005e 0343     		orrs	r3, r3, r0
 3055              	.LVL333:
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3056              		.loc 1 1083 4 is_stmt 1 view .LVU944
1082:src/display.c **** 			vs &= mask;
 3057              		.loc 1 1082 24 is_stmt 0 view .LVU945
 3058 0060 12F1FF30 		adds	r0, r2, #-1
 3059 0064 43F1FF31 		adc	r1, r3, #-1
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3060              		.loc 1 1083 7 view .LVU946
 3061 0068 00EA0800 		and	r0, r0, r8
 3062 006c 01EA0901 		and	r1, r1, r9
 3063              	.LVL334:
1084:src/display.c **** 				vs |= ~mask;
 3064              		.loc 1 1084 7 view .LVU947
 3065 0070 0A2D     		cmp	r5, #10
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3066              		.loc 1 1083 7 view .LVU948
 3067 0072 8046     		mov	r8, r0
 3068              	.LVL335:
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3069              		.loc 1 1083 7 view .LVU949
 3070 0074 8946     		mov	r9, r1
1084:src/display.c **** 				vs |= ~mask;
 3071              		.loc 1 1084 4 is_stmt 1 view .LVU950
1084:src/display.c **** 				vs |= ~mask;
 3072              		.loc 1 1084 7 is_stmt 0 view .LVU951
 3073 0076 00F02681 		beq	.L361
 3074              	.LVL336:
 3075              	.L293:
1084:src/display.c **** 				vs |= ~mask;
 3076              		.loc 1 1084 7 view .LVU952
 3077              	.LBE245:
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3078              		.loc 1 1088 3 is_stmt 1 view .LVU953
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3079              		.loc 1 1088 7 is_stmt 0 view .LVU954
 3080 007a B54B     		ldr	r3, .L368+8
 3081 007c 1B68     		ldr	r3, [r3]
 3082 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/ccQmbpxO.s 			page 117


1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3083              		.loc 1 1088 6 view .LVU955
 3084 0082 9907     		lsls	r1, r3, #30
 3085 0084 3FD5     		bpl	.L322
1091:src/display.c **** 			v = (unsigned long long int)vs;
 3086              		.loc 1 1091 10 is_stmt 1 view .LVU956
 3087              	.LBB246:
1099:src/display.c **** 			const unsigned int b1 = b >> 1;
 3088              		.loc 1 1099 4 view .LVU957
1100:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3089              		.loc 1 1100 4 view .LVU958
1100:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3090              		.loc 1 1100 23 is_stmt 0 view .LVU959
 3091 0086 6A08     		lsrs	r2, r5, #1
 3092              	.LVL337:
1101:src/display.c **** 			v = (unsigned long long int)vs;
 3093              		.loc 1 1101 4 is_stmt 1 view .LVU960
1101:src/display.c **** 			v = (unsigned long long int)vs;
 3094              		.loc 1 1101 41 is_stmt 0 view .LVU961
 3095 0088 12F00A0F 		tst	r2, #10
 3096 008c 14BF     		ite	ne
 3097 008e 0123     		movne	r3, #1
 3098 0090 0023     		moveq	r3, #0
1101:src/display.c **** 			v = (unsigned long long int)vs;
 3099              		.loc 1 1101 68 view .LVU962
 3100 0092 12F00C0F 		tst	r2, #12
 3101 0096 18BF     		it	ne
 3102 0098 43F00203 		orrne	r3, r3, #2
 3103              	.LVL338:
 3104              	.L299:
1102:src/display.c **** 
 3105              		.loc 1 1102 4 is_stmt 1 discriminator 4 view .LVU963
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3106              		.loc 1 1104 12 is_stmt 0 discriminator 4 view .LVU964
 3107 009c 0BEB0306 		add	r6, fp, r3
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3108              		.loc 1 1104 25 discriminator 4 view .LVU965
 3109 00a0 0133     		adds	r3, r3, #1
 3110              	.LVL339:
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3111              		.loc 1 1104 19 discriminator 4 view .LVU966
 3112 00a2 B6FBF3F6 		udiv	r6, r6, r3
1105:src/display.c **** 				const int r = v % b;
 3113              		.loc 1 1105 4 discriminator 4 view .LVU967
 3114 00a6 002E     		cmp	r6, #0
1102:src/display.c **** 
 3115              		.loc 1 1102 6 discriminator 4 view .LVU968
 3116 00a8 4046     		mov	r0, r8
 3117 00aa 4946     		mov	r1, r9
 3118              	.LVL340:
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3119              		.loc 1 1104 4 is_stmt 1 discriminator 4 view .LVU969
1105:src/display.c **** 				const int r = v % b;
 3120              		.loc 1 1105 4 discriminator 4 view .LVU970
1105:src/display.c **** 				const int r = v % b;
 3121              		.loc 1 1105 14 discriminator 4 view .LVU971
1105:src/display.c **** 				const int r = v % b;
ARM GAS  /tmp/ccQmbpxO.s 			page 118


 3122              		.loc 1 1105 4 is_stmt 0 discriminator 4 view .LVU972
 3123 00ac 40F36D81 		ble	.L323
 3124 00b0 05AC     		add	r4, sp, #20
 3125 00b2 DFF8A8B2 		ldr	fp, .L368+20
 3126              	.LVL341:
1105:src/display.c **** 				const int r = v % b;
 3127              		.loc 1 1105 4 discriminator 4 view .LVU973
 3128 00b6 3719     		adds	r7, r6, r4
 3129              	.LVL342:
 3130              	.L300:
 3131              	.LBB247:
1106:src/display.c **** 				v /= b;
 3132              		.loc 1 1106 5 is_stmt 1 discriminator 3 view .LVU974
 3133 00b8 2A46     		mov	r2, r5
 3134 00ba 0023     		movs	r3, #0
 3135 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 3136              	.LVL343:
1107:src/display.c **** 				buf[i] = DIGITS[r];
 3137              		.loc 1 1107 5 discriminator 3 view .LVU975
1108:src/display.c **** 			}
 3138              		.loc 1 1108 12 is_stmt 0 discriminator 3 view .LVU976
 3139 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3140 00c4 04F8013B 		strb	r3, [r4], #1
 3141              	.LVL344:
1108:src/display.c **** 			}
 3142              		.loc 1 1108 5 is_stmt 1 discriminator 3 view .LVU977
 3143              	.LBE247:
1105:src/display.c **** 				const int r = v % b;
 3144              		.loc 1 1105 19 discriminator 3 view .LVU978
1105:src/display.c **** 				const int r = v % b;
 3145              		.loc 1 1105 14 discriminator 3 view .LVU979
1105:src/display.c **** 				const int r = v % b;
 3146              		.loc 1 1105 4 is_stmt 0 discriminator 3 view .LVU980
 3147 00c8 BC42     		cmp	r4, r7
 3148 00ca F5D1     		bne	.L300
 3149 00cc 06F1FF39 		add	r9, r6, #-1
1105:src/display.c **** 				const int r = v % b;
 3150              		.loc 1 1105 4 view .LVU981
 3151 00d0 3446     		mov	r4, r6
 3152              	.LVL345:
 3153              	.L292:
1105:src/display.c **** 				const int r = v % b;
 3154              		.loc 1 1105 4 view .LVU982
 3155              	.LBE246:
1114:src/display.c **** 		if (sign) *res++ = '-';
 3156              		.loc 1 1114 2 is_stmt 1 view .LVU983
1114:src/display.c **** 		if (sign) *res++ = '-';
 3157              		.loc 1 1114 5 is_stmt 0 view .LVU984
 3158 00d2 BAF1000F 		cmp	r10, #0
 3159 00d6 41D0     		beq	.L301
 3160              	.LVL346:
 3161              	.L362:
1115:src/display.c **** 		while (--i >= 0)
 3162              		.loc 1 1115 3 is_stmt 1 view .LVU985
1115:src/display.c **** 		while (--i >= 0)
 3163              		.loc 1 1115 6 is_stmt 0 view .LVU986
 3164 00d8 049B     		ldr	r3, [sp, #16]
ARM GAS  /tmp/ccQmbpxO.s 			page 119


 3165 00da 13B1     		cbz	r3, .L302
1115:src/display.c **** 		while (--i >= 0)
 3166              		.loc 1 1115 13 is_stmt 1 discriminator 1 view .LVU987
 3167              	.LVL347:
1115:src/display.c **** 		while (--i >= 0)
 3168              		.loc 1 1115 20 is_stmt 0 discriminator 1 view .LVU988
 3169 00dc 2D23     		movs	r3, #45
 3170 00de 0AF8013B 		strb	r3, [r10], #1
 3171              	.LVL348:
 3172              	.L302:
1116:src/display.c **** 			*res++ = buf[i];
 3173              		.loc 1 1116 9 is_stmt 1 view .LVU989
1116:src/display.c **** 			*res++ = buf[i];
 3174              		.loc 1 1116 9 is_stmt 0 view .LVU990
 3175 00e2 B9F1FF3F 		cmp	r9, #-1
 3176 00e6 0BD0     		beq	.L279
 3177 00e8 09F10103 		add	r3, r9, #1
 3178 00ec 05A9     		add	r1, sp, #20
 3179 00ee 0AF1FF3A 		add	r10, r10, #-1
 3180 00f2 0B44     		add	r3, r3, r1
 3181              	.LVL349:
 3182              	.L304:
1117:src/display.c **** 	} else {
 3183              		.loc 1 1117 4 is_stmt 1 view .LVU991
1117:src/display.c **** 	} else {
 3184              		.loc 1 1117 11 is_stmt 0 view .LVU992
 3185 00f4 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 3186              	.LVL350:
1117:src/display.c **** 	} else {
 3187              		.loc 1 1117 11 view .LVU993
 3188 00f8 0AF8012F 		strb	r2, [r10, #1]!
 3189              	.LVL351:
1116:src/display.c **** 			*res++ = buf[i];
 3190              		.loc 1 1116 9 is_stmt 1 view .LVU994
1116:src/display.c **** 			*res++ = buf[i];
 3191              		.loc 1 1116 9 is_stmt 0 view .LVU995
 3192 00fc 9942     		cmp	r1, r3
 3193 00fe F9D1     		bne	.L304
 3194              	.LVL352:
 3195              	.L279:
1163:src/display.c **** 
 3196              		.loc 1 1163 1 view .LVU996
 3197 0100 17B0     		add	sp, sp, #92
 3198              		.cfi_remember_state
 3199              		.cfi_def_cfa_offset 36
 3200              		@ sp needed
 3201 0102 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3202              	.LVL353:
 3203              	.L322:
 3204              		.cfi_restore_state
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3205              		.loc 1 1088 24 discriminator 1 view .LVU997
 3206 0106 58EA0903 		orrs	r3, r8, r9
 3207 010a 00F0C680 		beq	.L287
1091:src/display.c **** 			v = (unsigned long long int)vs;
 3208              		.loc 1 1091 10 is_stmt 1 view .LVU998
1092:src/display.c **** 			for (i=0; v != 0; i++) {
ARM GAS  /tmp/ccQmbpxO.s 			page 120


 3209              		.loc 1 1092 4 view .LVU999
 3210 010e 2A46     		mov	r2, r5
1092:src/display.c **** 			for (i=0; v != 0; i++) {
 3211              		.loc 1 1092 6 is_stmt 0 view .LVU1000
 3212 0110 4746     		mov	r7, r8
 3213 0112 0023     		movs	r3, #0
 3214 0114 0DF11408 		add	r8, sp, #20
 3215 0118 DFF840B2 		ldr	fp, .L368+20
 3216              	.LVL354:
1092:src/display.c **** 			for (i=0; v != 0; i++) {
 3217              		.loc 1 1092 6 view .LVU1001
 3218 011c 0095     		str	r5, [sp]
 3219 011e 4E46     		mov	r6, r9
1093:src/display.c **** 				const int r = v % b;
 3220              		.loc 1 1093 4 is_stmt 1 view .LVU1002
 3221              	.LVL355:
1093:src/display.c **** 				const int r = v % b;
 3222              		.loc 1 1093 14 view .LVU1003
 3223 0120 4546     		mov	r5, r8
 3224              	.LVL356:
1093:src/display.c **** 				const int r = v % b;
 3225              		.loc 1 1093 14 is_stmt 0 view .LVU1004
 3226 0122 9946     		mov	r9, r3
 3227 0124 9046     		mov	r8, r2
 3228              	.LVL357:
 3229              	.L298:
 3230              	.LBB248:
1094:src/display.c **** 				v /= b;
 3231              		.loc 1 1094 5 is_stmt 1 discriminator 3 view .LVU1005
 3232 0126 3846     		mov	r0, r7
 3233 0128 3146     		mov	r1, r6
 3234 012a 4246     		mov	r2, r8
 3235 012c 4B46     		mov	r3, r9
 3236 012e FFF7FEFF 		bl	__aeabi_uldivmod
 3237              	.LVL358:
 3238 0132 3346     		mov	r3, r6
 3239 0134 9446     		mov	ip, r2
 3240              	.LVL359:
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3241              		.loc 1 1095 5 discriminator 3 view .LVU1006
 3242              	.LBE248:
1093:src/display.c **** 				const int r = v % b;
 3243              		.loc 1 1093 4 is_stmt 0 discriminator 3 view .LVU1007
 3244 0136 4B45     		cmp	r3, r9
 3245 0138 3A46     		mov	r2, r7
 3246              	.LVL360:
1093:src/display.c **** 				const int r = v % b;
 3247              		.loc 1 1093 4 discriminator 3 view .LVU1008
 3248 013a 08BF     		it	eq
 3249 013c 4245     		cmpeq	r2, r8
 3250              	.LBB249:
1096:src/display.c **** 			}
 3251              		.loc 1 1096 12 discriminator 3 view .LVU1009
 3252 013e 1BF80C70 		ldrb	r7, [fp, ip]	@ zero_extendqisi2
 3253              	.LVL361:
1096:src/display.c **** 			}
 3254              		.loc 1 1096 12 discriminator 3 view .LVU1010
ARM GAS  /tmp/ccQmbpxO.s 			page 121


 3255 0142 05F8017B 		strb	r7, [r5], #1
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3256              		.loc 1 1095 7 discriminator 3 view .LVU1011
 3257 0146 0E46     		mov	r6, r1
 3258              	.LVL362:
1096:src/display.c **** 			}
 3259              		.loc 1 1096 5 is_stmt 1 discriminator 3 view .LVU1012
 3260              	.LBE249:
1093:src/display.c **** 				const int r = v % b;
 3261              		.loc 1 1093 22 discriminator 3 view .LVU1013
 3262              	.LBB250:
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3263              		.loc 1 1095 7 is_stmt 0 discriminator 3 view .LVU1014
 3264 0148 0746     		mov	r7, r0
 3265 014a 2146     		mov	r1, r4
 3266              	.LVL363:
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3267              		.loc 1 1095 7 discriminator 3 view .LVU1015
 3268              	.LBE250:
1093:src/display.c **** 				const int r = v % b;
 3269              		.loc 1 1093 23 discriminator 3 view .LVU1016
 3270 014c 04F10104 		add	r4, r4, #1
 3271              	.LVL364:
1093:src/display.c **** 				const int r = v % b;
 3272              		.loc 1 1093 14 is_stmt 1 discriminator 3 view .LVU1017
1093:src/display.c **** 				const int r = v % b;
 3273              		.loc 1 1093 4 is_stmt 0 discriminator 3 view .LVU1018
 3274 0150 E9D2     		bcs	.L298
 3275 0152 009D     		ldr	r5, [sp]
 3276 0154 8946     		mov	r9, r1
1114:src/display.c **** 		if (sign) *res++ = '-';
 3277              		.loc 1 1114 2 is_stmt 1 view .LVU1019
1114:src/display.c **** 		if (sign) *res++ = '-';
 3278              		.loc 1 1114 5 is_stmt 0 view .LVU1020
 3279 0156 BAF1000F 		cmp	r10, #0
 3280 015a BDD1     		bne	.L362
 3281              	.LVL365:
 3282              	.L301:
 3283              	.LBB251:
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3284              		.loc 1 1134 3 is_stmt 1 view .LVU1021
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3285              		.loc 1 1134 32 is_stmt 0 view .LVU1022
 3286 015c 022D     		cmp	r5, #2
 3287 015e 00F0D880 		beq	.L363
 3288              	.LVL366:
1135:src/display.c **** 				: b == 16 ? 2 : 3;
 3289              		.loc 1 1135 3 is_stmt 1 view .LVU1023
1135:src/display.c **** 				: b == 16 ? 2 : 3;
 3290              		.loc 1 1135 29 is_stmt 0 view .LVU1024
 3291 0162 042D     		cmp	r5, #4
 3292 0164 00F00881 		beq	.L364
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3293              		.loc 1 1134 32 view .LVU1025
 3294 0168 102D     		cmp	r5, #16
 3295 016a 0CBF     		ite	eq
 3296 016c 0225     		moveq	r5, #2
ARM GAS  /tmp/ccQmbpxO.s 			page 122


 3297 016e 0325     		movne	r5, #3
 3298 0170 0C27     		movs	r7, #12
 3299              	.LVL367:
 3300              	.L306:
1137:src/display.c **** #endif
 3301              		.loc 1 1137 3 is_stmt 1 view .LVU1026
 3302 0172 FFF7FEFF 		bl	set_separator_decimal_modes
 3303              	.LVL368:
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3304              		.loc 1 1139 3 view .LVU1027
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3305              		.loc 1 1139 26 is_stmt 0 view .LVU1028
 3306 0176 99FBF7F3 		sdiv	r3, r9, r7
1140:src/display.c **** 			State2.window = 0;
 3307              		.loc 1 1140 25 view .LVU1029
 3308 017a 734A     		ldr	r2, .L368
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3309              		.loc 1 1139 16 view .LVU1030
 3310 017c 7549     		ldr	r1, .L368+12
1140:src/display.c **** 			State2.window = 0;
 3311              		.loc 1 1140 25 view .LVU1031
 3312 017e 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3313              		.loc 1 1139 16 view .LVU1032
 3314 0180 0B60     		str	r3, [r1]
1140:src/display.c **** 			State2.window = 0;
 3315              		.loc 1 1140 3 is_stmt 1 view .LVU1033
1140:src/display.c **** 			State2.window = 0;
 3316              		.loc 1 1140 7 is_stmt 0 view .LVU1034
 3317 0182 C2F3C208 		ubfx	r8, r2, #3, #3
1140:src/display.c **** 			State2.window = 0;
 3318              		.loc 1 1140 6 view .LVU1035
 3319 0186 4345     		cmp	r3, r8
 3320 0188 C0F2D780 		blt	.L308
 3321 018c 07FB08F8 		mul	r8, r7, r8
 3322              	.L309:
1142:src/display.c **** 
 3323              		.loc 1 1142 3 is_stmt 1 view .LVU1036
1142:src/display.c **** 
 3324              		.loc 1 1142 10 is_stmt 0 view .LVU1037
 3325 0190 16AB     		add	r3, sp, #88
 3326 0192 16AA     		add	r2, sp, #88
 3327 0194 1C44     		add	r4, r4, r3
 3328              	.LVL369:
1142:src/display.c **** 
 3329              		.loc 1 1142 10 view .LVU1038
 3330 0196 02EB0806 		add	r6, r2, r8
 3331 019a 0023     		movs	r3, #0
 3332 019c 453E     		subs	r6, r6, #69
 3333 019e 04F8443C 		strb	r3, [r4, #-68]
1144:src/display.c **** 		for (k = 0; k < 12; k++)
 3334              		.loc 1 1144 3 is_stmt 1 view .LVU1039
 3335              	.LVL370:
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3336              		.loc 1 1145 3 view .LVU1040
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3337              		.loc 1 1145 15 view .LVU1041
ARM GAS  /tmp/ccQmbpxO.s 			page 123


1142:src/display.c **** 
 3338              		.loc 1 1142 10 is_stmt 0 view .LVU1042
 3339 01a2 3246     		mov	r2, r6
 3340              	.LVL371:
 3341              	.L311:
1146:src/display.c **** 				break;
 3342              		.loc 1 1146 4 is_stmt 1 view .LVU1043
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3343              		.loc 1 1145 23 view .LVU1044
1146:src/display.c **** 				break;
 3344              		.loc 1 1146 7 is_stmt 0 view .LVU1045
 3345 01a4 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3346 01a8 0029     		cmp	r1, #0
 3347 01aa 00F0D980 		beq	.L310
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3348              		.loc 1 1145 24 discriminator 2 view .LVU1046
 3349 01ae 0133     		adds	r3, r3, #1
 3350              	.LVL372:
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3351              		.loc 1 1145 15 is_stmt 1 discriminator 2 view .LVU1047
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3352              		.loc 1 1145 3 is_stmt 0 discriminator 2 view .LVU1048
 3353 01b0 0C2B     		cmp	r3, #12
 3354 01b2 F7D1     		bne	.L311
1148:src/display.c **** 			int ch = buf[j++];
 3355              		.loc 1 1148 3 view .LVU1049
 3356 01b4 4FF00B09 		mov	r9, #11
 3357              	.LVL373:
 3358              	.L312:
1148:src/display.c **** 			int ch = buf[j++];
 3359              		.loc 1 1148 3 view .LVU1050
 3360 01b8 08F10108 		add	r8, r8, #1
 3361 01bc C844     		add	r8, r8, r9
 3362 01be 4C46     		mov	r4, r9
 3363 01c0 4FF0630B 		mov	fp, #99
 3364 01c4 09E0     		b	.L317
 3365              	.LVL374:
 3366              	.L365:
 3367              	.LBB252:
1154:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3368              		.loc 1 1154 5 view .LVU1051
 3369 01c6 644B     		ldr	r3, .L368+16
 3370 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3371              	.LVL375:
 3372              	.LBB253:
 3373              	.LBI253:
 354:src/display.c **** 	if (sep == SEP_NONE)
 3374              		.loc 1 354 14 is_stmt 1 view .LVU1052
 3375              	.LBB254:
 355:src/display.c **** 		return res;
 3376              		.loc 1 355 2 view .LVU1053
 355:src/display.c **** 		return res;
 3377              		.loc 1 355 5 is_stmt 0 view .LVU1054
 3378 01ca 09B1     		cbz	r1, .L315
 355:src/display.c **** 		return res;
 3379              		.loc 1 355 5 view .LVU1055
 3380 01cc FFF7FEFF 		bl	set_separator.part.0
ARM GAS  /tmp/ccQmbpxO.s 			page 124


 3381              	.LVL376:
 3382              	.L315:
 355:src/display.c **** 		return res;
 3383              		.loc 1 355 5 view .LVU1056
 3384              	.LBE254:
 3385              	.LBE253:
1155:src/display.c **** 		}
 3386              		.loc 1 1155 4 is_stmt 1 discriminator 2 view .LVU1057
 3387              	.LBE252:
1148:src/display.c **** 			int ch = buf[j++];
 3388              		.loc 1 1148 3 is_stmt 0 discriminator 2 view .LVU1058
 3389 01d0 013C     		subs	r4, r4, #1
1148:src/display.c **** 			int ch = buf[j++];
 3390              		.loc 1 1148 3 discriminator 2 view .LVU1059
 3391 01d2 621C     		adds	r2, r4, #1
 3392              	.LBB257:
1155:src/display.c **** 		}
 3393              		.loc 1 1155 8 discriminator 2 view .LVU1060
 3394 01d4 ABF1090B 		sub	fp, fp, #9
 3395              	.LVL377:
1155:src/display.c **** 		}
 3396              		.loc 1 1155 8 discriminator 2 view .LVU1061
 3397              	.LBE257:
1148:src/display.c **** 			int ch = buf[j++];
 3398              		.loc 1 1148 23 is_stmt 1 discriminator 2 view .LVU1062
1148:src/display.c **** 			int ch = buf[j++];
 3399              		.loc 1 1148 13 discriminator 2 view .LVU1063
1148:src/display.c **** 			int ch = buf[j++];
 3400              		.loc 1 1148 3 is_stmt 0 discriminator 2 view .LVU1064
 3401 01d8 16D0     		beq	.L321
 3402              	.LVL378:
 3403              	.L317:
 3404              	.LBB258:
1149:src/display.c **** 			if (i >= shift)
 3405              		.loc 1 1149 4 is_stmt 1 view .LVU1065
1151:src/display.c **** 			set_dig(dig, ch);
 3406              		.loc 1 1151 5 view .LVU1066
1149:src/display.c **** 			if (i >= shift)
 3407              		.loc 1 1149 8 is_stmt 0 view .LVU1067
 3408 01da 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1150:src/display.c **** 				ch -= 030;
 3409              		.loc 1 1150 7 view .LVU1068
 3410 01de A9EB0402 		sub	r2, r9, r4
 3411 01e2 BA42     		cmp	r2, r7
 3412 01e4 A8EB040A 		sub	r10, r8, r4
 3413              	.LVL379:
1150:src/display.c **** 				ch -= 030;
 3414              		.loc 1 1150 4 is_stmt 1 view .LVU1069
1152:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3415              		.loc 1 1152 4 is_stmt 0 view .LVU1070
 3416 01e8 5846     		mov	r0, fp
1151:src/display.c **** 			set_dig(dig, ch);
 3417              		.loc 1 1151 8 view .LVU1071
 3418 01ea A8BF     		it	ge
 3419 01ec 1839     		subge	r1, r1, #24
 3420              	.LVL380:
1152:src/display.c **** 			if ((j % group) == 0 && k != 0)
ARM GAS  /tmp/ccQmbpxO.s 			page 125


 3421              		.loc 1 1152 4 is_stmt 1 view .LVU1072
 3422 01ee FFF7FEFF 		bl	set_dig
 3423              	.LVL381:
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3424              		.loc 1 1153 4 view .LVU1073
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3425              		.loc 1 1153 11 is_stmt 0 view .LVU1074
 3426 01f2 9AFBF5F3 		sdiv	r3, r10, r5
 3427 01f6 05FB13A3 		mls	r3, r5, r3, r10
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3428              		.loc 1 1153 7 view .LVU1075
 3429 01fa 002B     		cmp	r3, #0
 3430 01fc E8D1     		bne	.L315
1154:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3431              		.loc 1 1154 5 is_stmt 1 discriminator 1 view .LVU1076
 3432              	.LBB256:
 3433              	.LBB255:
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 3434              		.loc 1 357 2 discriminator 1 view .LVU1077
 3435 01fe 5846     		mov	r0, fp
 3436              	.LBE255:
 3437              	.LBE256:
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3438              		.loc 1 1153 25 is_stmt 0 discriminator 1 view .LVU1078
 3439 0200 002C     		cmp	r4, #0
 3440 0202 E0D1     		bne	.L365
1155:src/display.c **** 		}
 3441              		.loc 1 1155 4 is_stmt 1 view .LVU1079
1155:src/display.c **** 		}
 3442              		.loc 1 1155 8 is_stmt 0 view .LVU1080
 3443 0204 ABF1090B 		sub	fp, fp, #9
 3444              	.LVL382:
1155:src/display.c **** 		}
 3445              		.loc 1 1155 8 view .LVU1081
 3446              	.LBE258:
1148:src/display.c **** 			int ch = buf[j++];
 3447              		.loc 1 1148 23 is_stmt 1 view .LVU1082
1148:src/display.c **** 			int ch = buf[j++];
 3448              		.loc 1 1148 13 view .LVU1083
 3449              	.L321:
1157:src/display.c **** 			if (dig >= 0)
 3450              		.loc 1 1157 3 view .LVU1084
1157:src/display.c **** 			if (dig >= 0)
 3451              		.loc 1 1157 6 is_stmt 0 view .LVU1085
 3452 0208 049B     		ldr	r3, [sp, #16]
 3453 020a 002B     		cmp	r3, #0
 3454 020c 3FF478AF 		beq	.L279
1158:src/display.c **** 				set_dig(dig, '-');
 3455              		.loc 1 1158 4 is_stmt 1 view .LVU1086
1158:src/display.c **** 				set_dig(dig, '-');
 3456              		.loc 1 1158 7 is_stmt 0 view .LVU1087
 3457 0210 BBF1000F 		cmp	fp, #0
 3458 0214 C0F2B280 		blt	.L366
 3459              	.LVL383:
 3460              	.L320:
1159:src/display.c **** 			else	SET_MANT_SIGN;
 3461              		.loc 1 1159 5 is_stmt 1 view .LVU1088
ARM GAS  /tmp/ccQmbpxO.s 			page 126


 3462 0218 5846     		mov	r0, fp
 3463 021a 2D21     		movs	r1, #45
 3464 021c FFF7FEFF 		bl	set_dig
 3465              	.LVL384:
 3466 0220 6EE7     		b	.L279
 3467              	.LVL385:
 3468              	.L360:
1159:src/display.c **** 			else	SET_MANT_SIGN;
 3469              		.loc 1 1159 5 is_stmt 0 view .LVU1089
 3470              	.LBE251:
1065:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3471              		.loc 1 1065 3 is_stmt 1 view .LVU1090
1065:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3472              		.loc 1 1065 7 is_stmt 0 view .LVU1091
 3473 0222 04AA     		add	r2, sp, #16
 3474 0224 4046     		mov	r0, r8
 3475 0226 4946     		mov	r1, r9
 3476 0228 FFF7FEFF 		bl	extract_value
 3477              	.LVL386:
 3478 022c 0646     		mov	r6, r0
 3479 022e 0F46     		mov	r7, r1
 3480              	.LVL387:
1066:src/display.c **** 			v = value;
 3481              		.loc 1 1066 3 is_stmt 1 view .LVU1092
1066:src/display.c **** 			v = value;
 3482              		.loc 1 1066 7 is_stmt 0 view .LVU1093
 3483 0230 FFF7FEFF 		bl	int_mode
 3484              	.LVL388:
1066:src/display.c **** 			v = value;
 3485              		.loc 1 1066 6 view .LVU1094
 3486 0234 58BB     		cbnz	r0, .L284
1066:src/display.c **** 			v = value;
 3487              		.loc 1 1066 32 discriminator 1 view .LVU1095
 3488 0236 049B     		ldr	r3, [sp, #16]
 3489 0238 012B     		cmp	r3, #1
 3490 023a 28D1     		bne	.L284
1066:src/display.c **** 			v = value;
 3491              		.loc 1 1066 45 discriminator 2 view .LVU1096
 3492 023c 56EA0703 		orrs	r3, r6, r7
 3493 0240 6AD0     		beq	.L367
 3494              	.LVL389:
 3495              	.L285:
1066:src/display.c **** 			v = value;
 3496              		.loc 1 1066 45 discriminator 2 view .LVU1097
 3497 0242 DFF818B1 		ldr	fp, .L368+20
 3498              	.LVL390:
1041:src/display.c **** 	const int ws = word_size();
 3499              		.loc 1 1041 61 discriminator 3 view .LVU1098
 3500 0246 CDF80CA0 		str	r10, [sp, #12]
 3501 024a 0023     		movs	r3, #0
 3502 024c D946     		mov	r9, fp
 3503 024e 0DF11408 		add	r8, sp, #20
 3504 0252 0024     		movs	r4, #0
 3505 0254 AA46     		mov	r10, r5
 3506              	.LVL391:
1041:src/display.c **** 	const int ws = word_size();
 3507              		.loc 1 1041 61 discriminator 3 view .LVU1099
ARM GAS  /tmp/ccQmbpxO.s 			page 127


 3508 0256 9B46     		mov	fp, r3
 3509              	.L291:
 3510              	.LVL392:
 3511              	.LBB261:
1075:src/display.c **** 				v /= b;
 3512              		.loc 1 1075 5 is_stmt 1 discriminator 3 view .LVU1100
 3513 0258 3046     		mov	r0, r6
 3514 025a 3946     		mov	r1, r7
 3515 025c 5246     		mov	r2, r10
 3516 025e 5B46     		mov	r3, fp
 3517 0260 FFF7FEFF 		bl	__aeabi_uldivmod
 3518              	.LVL393:
1076:src/display.c **** 				buf[i] = DIGITS[r];
 3519              		.loc 1 1076 5 discriminator 3 view .LVU1101
 3520 0264 CDE90067 		strd	r6, [sp]
1077:src/display.c **** 			}
 3521              		.loc 1 1077 12 is_stmt 0 discriminator 3 view .LVU1102
 3522 0268 19F80230 		ldrb	r3, [r9, r2]	@ zero_extendqisi2
 3523 026c 08F8013B 		strb	r3, [r8], #1
1076:src/display.c **** 				buf[i] = DIGITS[r];
 3524              		.loc 1 1076 7 discriminator 3 view .LVU1103
 3525 0270 0F46     		mov	r7, r1
 3526              	.LVL394:
1077:src/display.c **** 			}
 3527              		.loc 1 1077 5 is_stmt 1 discriminator 3 view .LVU1104
 3528              	.LBE261:
1074:src/display.c **** 				const int r = v % b;
 3529              		.loc 1 1074 22 discriminator 3 view .LVU1105
1074:src/display.c **** 				const int r = v % b;
 3530              		.loc 1 1074 4 is_stmt 0 discriminator 3 view .LVU1106
 3531 0272 DDE90012 		ldrd	r1, [sp]
 3532              	.LVL395:
1074:src/display.c **** 				const int r = v % b;
 3533              		.loc 1 1074 4 discriminator 3 view .LVU1107
 3534 0276 5A45     		cmp	r2, fp
 3535 0278 08BF     		it	eq
 3536 027a 5145     		cmpeq	r1, r10
 3537 027c 2346     		mov	r3, r4
 3538              	.LVL396:
 3539              	.LBB262:
1076:src/display.c **** 				buf[i] = DIGITS[r];
 3540              		.loc 1 1076 7 discriminator 3 view .LVU1108
 3541 027e 0646     		mov	r6, r0
 3542              	.LBE262:
1074:src/display.c **** 				const int r = v % b;
 3543              		.loc 1 1074 23 discriminator 3 view .LVU1109
 3544 0280 04F10104 		add	r4, r4, #1
 3545              	.LVL397:
1074:src/display.c **** 				const int r = v % b;
 3546              		.loc 1 1074 14 is_stmt 1 discriminator 3 view .LVU1110
1074:src/display.c **** 				const int r = v % b;
 3547              		.loc 1 1074 4 is_stmt 0 discriminator 3 view .LVU1111
 3548 0284 E8D2     		bcs	.L291
 3549 0286 DDF80CA0 		ldr	r10, [sp, #12]
 3550 028a 9946     		mov	r9, r3
 3551 028c 21E7     		b	.L292
 3552              	.LVL398:
ARM GAS  /tmp/ccQmbpxO.s 			page 128


 3553              	.L284:
1068:src/display.c **** 			if (sign)
 3554              		.loc 1 1068 3 is_stmt 1 view .LVU1112
1068:src/display.c **** 			if (sign)
 3555              		.loc 1 1068 6 is_stmt 0 view .LVU1113
 3556 028e 56EA0703 		orrs	r3, r6, r7
 3557 0292 D6D1     		bne	.L285
1069:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3558              		.loc 1 1069 4 is_stmt 1 view .LVU1114
1069:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3559              		.loc 1 1069 7 is_stmt 0 view .LVU1115
 3560 0294 049B     		ldr	r3, [sp, #16]
 3561 0296 002B     		cmp	r3, #0
 3562 0298 43D1     		bne	.L286
 3563              	.LVL399:
 3564              	.L287:
1071:src/display.c **** 			return;
 3565              		.loc 1 1071 4 is_stmt 1 view .LVU1116
 3566              	.LBB263:
 3567              	.LBI263:
 394:src/display.c **** 	if (res) *res++ = ch;
 3568              		.loc 1 394 14 view .LVU1117
 3569              	.LBB264:
 395:src/display.c **** 	else	set_dig(base, ch);
 3570              		.loc 1 395 2 view .LVU1118
 395:src/display.c **** 	else	set_dig(base, ch);
 3571              		.loc 1 395 5 is_stmt 0 view .LVU1119
 3572 029a BAF1000F 		cmp	r10, #0
 3573 029e 47D0     		beq	.L289
 3574              	.LVL400:
 3575              	.L288:
 395:src/display.c **** 	else	set_dig(base, ch);
 3576              		.loc 1 395 11 is_stmt 1 view .LVU1120
 395:src/display.c **** 	else	set_dig(base, ch);
 3577              		.loc 1 395 18 is_stmt 0 view .LVU1121
 3578 02a0 3023     		movs	r3, #48
 3579 02a2 8AF80030 		strb	r3, [r10]
 3580              	.LBE264:
 3581              	.LBE263:
1163:src/display.c **** 
 3582              		.loc 1 1163 1 view .LVU1122
 3583 02a6 17B0     		add	sp, sp, #92
 3584              		.cfi_remember_state
 3585              		.cfi_def_cfa_offset 36
 3586              		@ sp needed
 3587 02a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3588              	.LVL401:
 3589              	.L280:
 3590              		.cfi_restore_state
1056:src/display.c **** 	}
 3591              		.loc 1 1056 11 is_stmt 1 view .LVU1123
1056:src/display.c **** 	}
 3592              		.loc 1 1056 15 is_stmt 0 view .LVU1124
 3593 02ac FFF7FEFF 		bl	int_base
 3594              	.LVL402:
1056:src/display.c **** 	}
 3595              		.loc 1 1056 15 view .LVU1125
ARM GAS  /tmp/ccQmbpxO.s 			page 129


 3596 02b0 0546     		mov	r5, r0
 3597              	.LVL403:
1056:src/display.c **** 	}
 3598              		.loc 1 1056 27 is_stmt 1 view .LVU1126
1059:src/display.c **** 		IntMaxWindow = 0;
 3599              		.loc 1 1059 2 view .LVU1127
1059:src/display.c **** 		IntMaxWindow = 0;
 3600              		.loc 1 1059 5 is_stmt 0 view .LVU1128
 3601 02b2 BAF1000F 		cmp	r10, #0
 3602 02b6 7FF4BCAE 		bne	.L282
 3603              	.LVL404:
 3604              	.L359:
1060:src/display.c **** 		carry_overflow();
 3605              		.loc 1 1060 3 is_stmt 1 view .LVU1129
1060:src/display.c **** 		carry_overflow();
 3606              		.loc 1 1060 16 is_stmt 0 view .LVU1130
 3607 02ba 264B     		ldr	r3, .L368+12
 3608 02bc C3F800A0 		str	r10, [r3]
1061:src/display.c **** 	}
 3609              		.loc 1 1061 3 is_stmt 1 view .LVU1131
 3610 02c0 FFF7FEFF 		bl	carry_overflow
 3611              	.LVL405:
 3612 02c4 B5E6     		b	.L282
 3613              	.LVL406:
 3614              	.L361:
 3615              	.LBB266:
1084:src/display.c **** 				vs |= ~mask;
 3616              		.loc 1 1084 36 is_stmt 0 discriminator 1 view .LVU1132
 3617 02c6 0BF1FF31 		add	r1, fp, #-1
1084:src/display.c **** 				vs |= ~mask;
 3618              		.loc 1 1084 16 discriminator 1 view .LVU1133
 3619 02ca CBF12106 		rsb	r6, fp, #33
 3620 02ce C840     		lsrs	r0, r0, r1
 3621 02d0 09FA06F6 		lsl	r6, r9, r6
 3622 02d4 2039     		subs	r1, r1, #32
 3623 02d6 40EA0600 		orr	r0, r0, r6
 3624 02da 5CBF     		itt	pl
 3625 02dc 49FA01F1 		asrpl	r1, r9, r1
 3626 02e0 0843     		orrpl	r0, r0, r1
 3627 02e2 00F00106 		and	r6, r0, #1
 3628 02e6 0027     		movs	r7, #0
 3629 02e8 56EA0701 		orrs	r1, r6, r7
 3630 02ec 08D0     		beq	.L294
1085:src/display.c **** 		}
 3631              		.loc 1 1085 5 is_stmt 1 view .LVU1134
1085:src/display.c **** 		}
 3632              		.loc 1 1085 8 is_stmt 0 view .LVU1135
 3633 02ee 5042     		rsbs	r0, r2, #0
 3634 02f0 63EB4301 		sbc	r1, r3, r3, lsl #1
 3635 02f4 40EA0802 		orr	r2, r0, r8
 3636              	.LVL407:
1085:src/display.c **** 		}
 3637              		.loc 1 1085 8 view .LVU1136
 3638 02f8 41EA0903 		orr	r3, r1, r9
 3639              	.LVL408:
1085:src/display.c **** 		}
 3640              		.loc 1 1085 8 view .LVU1137
ARM GAS  /tmp/ccQmbpxO.s 			page 130


 3641 02fc 9046     		mov	r8, r2
 3642              	.LVL409:
1085:src/display.c **** 		}
 3643              		.loc 1 1085 8 view .LVU1138
 3644 02fe 9946     		mov	r9, r3
 3645              	.L294:
1085:src/display.c **** 		}
 3646              		.loc 1 1085 8 view .LVU1139
 3647              	.LBE266:
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3648              		.loc 1 1088 3 is_stmt 1 view .LVU1140
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3649              		.loc 1 1088 7 is_stmt 0 view .LVU1141
 3650 0300 134B     		ldr	r3, .L368+8
 3651 0302 1B68     		ldr	r3, [r3]
 3652 0304 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3653              		.loc 1 1088 6 view .LVU1142
 3654 0308 9B07     		lsls	r3, r3, #30
 3655 030a 7FF5FCAE 		bpl	.L322
 3656 030e 0223     		movs	r3, #2
 3657 0310 C4E6     		b	.L299
 3658              	.LVL410:
 3659              	.L363:
 3660              	.LBB267:
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3661              		.loc 1 1134 32 view .LVU1143
 3662 0312 0827     		movs	r7, #8
1136:src/display.c **** 		set_separator_decimal_modes();
 3663              		.loc 1 1136 5 view .LVU1144
 3664 0314 0425     		movs	r5, #4
 3665 0316 2CE7     		b	.L306
 3666              	.LVL411:
 3667              	.L367:
1136:src/display.c **** 		set_separator_decimal_modes();
 3668              		.loc 1 1136 5 view .LVU1145
 3669              	.LBE267:
1067:src/display.c **** 		if (v == 0) {
 3670              		.loc 1 1067 4 is_stmt 1 view .LVU1146
1067:src/display.c **** 		if (v == 0) {
 3671              		.loc 1 1067 6 is_stmt 0 view .LVU1147
 3672 0318 4646     		mov	r6, r8
 3673              	.LVL412:
1067:src/display.c **** 		if (v == 0) {
 3674              		.loc 1 1067 6 view .LVU1148
 3675 031a 4F46     		mov	r7, r9
 3676              	.LVL413:
1068:src/display.c **** 			if (sign)
 3677              		.loc 1 1068 3 is_stmt 1 view .LVU1149
1068:src/display.c **** 			if (sign)
 3678              		.loc 1 1068 6 is_stmt 0 view .LVU1150
 3679 031c 56EA0703 		orrs	r3, r6, r7
 3680 0320 8FD1     		bne	.L285
 3681              	.LVL414:
 3682              	.L286:
1070:src/display.c **** 			set_dig_s(dig, '0', res);
 3683              		.loc 1 1070 5 is_stmt 1 view .LVU1151
ARM GAS  /tmp/ccQmbpxO.s 			page 131


 3684              	.LBB268:
 3685              	.LBI268:
 394:src/display.c **** 	if (res) *res++ = ch;
 3686              		.loc 1 394 14 view .LVU1152
 3687              	.LBB269:
 395:src/display.c **** 	else	set_dig(base, ch);
 3688              		.loc 1 395 2 view .LVU1153
 395:src/display.c **** 	else	set_dig(base, ch);
 3689              		.loc 1 395 5 is_stmt 0 view .LVU1154
 3690 0322 BAF1000F 		cmp	r10, #0
 3691 0326 BBD1     		bne	.L288
 396:src/display.c **** 	return res;
 3692              		.loc 1 396 7 is_stmt 1 view .LVU1155
 3693 0328 2D21     		movs	r1, #45
 3694 032a 5A20     		movs	r0, #90
 3695 032c FFF7FEFF 		bl	set_dig
 3696              	.LVL415:
 396:src/display.c **** 	return res;
 3697              		.loc 1 396 7 is_stmt 0 view .LVU1156
 3698              	.LBE269:
 3699              	.LBE268:
1071:src/display.c **** 			return;
 3700              		.loc 1 1071 4 is_stmt 1 view .LVU1157
 3701              	.LBB270:
 394:src/display.c **** 	if (res) *res++ = ch;
 3702              		.loc 1 394 14 view .LVU1158
 3703              	.LBB265:
 395:src/display.c **** 	else	set_dig(base, ch);
 3704              		.loc 1 395 2 view .LVU1159
 3705              	.L289:
 396:src/display.c **** 	return res;
 3706              		.loc 1 396 7 view .LVU1160
 3707 0330 3021     		movs	r1, #48
 3708 0332 6320     		movs	r0, #99
 3709 0334 FFF7FEFF 		bl	set_dig
 3710              	.LVL416:
 3711 0338 E2E6     		b	.L279
 3712              	.LVL417:
 3713              	.L308:
 396:src/display.c **** 	return res;
 3714              		.loc 1 396 7 is_stmt 0 view .LVU1161
 3715              	.LBE265:
 3716              	.LBE270:
 3717              	.LBB271:
1141:src/display.c **** 		buf[i] = '\0';
 3718              		.loc 1 1141 4 is_stmt 1 view .LVU1162
1141:src/display.c **** 		buf[i] = '\0';
 3719              		.loc 1 1141 18 is_stmt 0 view .LVU1163
 3720 033a 034B     		ldr	r3, .L368
 3721 033c 6FF3C502 		bfc	r2, #3, #3
 3722 0340 1A75     		strb	r2, [r3, #20]
 3723 0342 4FF00008 		mov	r8, #0
 3724 0346 23E7     		b	.L309
 3725              	.L369:
 3726              		.align	2
 3727              	.L368:
 3728 0348 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccQmbpxO.s 			page 132


 3729 034c 00000000 		.word	CSWTCH.306
 3730 0350 00000000 		.word	main_ram
 3731 0354 00000000 		.word	IntMaxWindow
 3732 0358 00000000 		.word	.LANCHOR0
 3733 035c 00000000 		.word	.LANCHOR12
 3734              	.LVL418:
 3735              	.L310:
1148:src/display.c **** 			int ch = buf[j++];
 3736              		.loc 1 1148 13 is_stmt 1 discriminator 1 view .LVU1164
1148:src/display.c **** 			int ch = buf[j++];
 3737              		.loc 1 1148 3 is_stmt 0 discriminator 1 view .LVU1165
 3738 0360 03F1FF39 		add	r9, r3, #-1
 3739              	.LVL419:
1148:src/display.c **** 			int ch = buf[j++];
 3740              		.loc 1 1148 3 discriminator 1 view .LVU1166
 3741 0364 002B     		cmp	r3, #0
 3742 0366 7FF427AF 		bne	.L312
1157:src/display.c **** 			if (dig >= 0)
 3743              		.loc 1 1157 3 is_stmt 1 view .LVU1167
1157:src/display.c **** 			if (dig >= 0)
 3744              		.loc 1 1157 6 is_stmt 0 view .LVU1168
 3745 036a 049B     		ldr	r3, [sp, #16]
 3746 036c 002B     		cmp	r3, #0
 3747 036e 3FF4C7AE 		beq	.L279
 3748 0372 4FF0630B 		mov	fp, #99
 3749 0376 4FE7     		b	.L320
 3750              	.LVL420:
 3751              	.L364:
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3752              		.loc 1 1134 32 view .LVU1169
 3753 0378 0C27     		movs	r7, #12
 3754 037a FAE6     		b	.L306
 3755              	.LVL421:
 3756              	.L366:
1160:src/display.c **** 		}
 3757              		.loc 1 1160 9 is_stmt 1 view .LVU1170
 3758              	.LBB259:
 3759              	.LBI259:
 283:src/display.c **** {
 3760              		.loc 1 283 13 view .LVU1171
 3761              	.LBB260:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 3762              		.loc 1 285 2 view .LVU1172
 285:src/display.c **** 	set_dot(MANT_SIGN);
 3763              		.loc 1 285 24 is_stmt 0 view .LVU1173
 3764 037c 044B     		ldr	r3, .L370
 3765 037e 2D22     		movs	r2, #45
 286:src/display.c **** }
 3766              		.loc 1 286 2 view .LVU1174
 3767 0380 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 3768              		.loc 1 285 24 view .LVU1175
 3769 0382 1A70     		strb	r2, [r3]
 286:src/display.c **** }
 3770              		.loc 1 286 2 is_stmt 1 view .LVU1176
 3771 0384 FFF7FEFF 		bl	set_dot
 3772              	.LVL422:
ARM GAS  /tmp/ccQmbpxO.s 			page 133


 287:src/display.c **** 
 3773              		.loc 1 287 1 is_stmt 0 view .LVU1177
 3774 0388 BAE6     		b	.L279
 3775              	.LVL423:
 3776              	.L323:
 287:src/display.c **** 
 3777              		.loc 1 287 1 view .LVU1178
 3778              	.LBE260:
 3779              	.LBE259:
 3780              	.LBE271:
 3781              	.LBB272:
1105:src/display.c **** 				const int r = v % b;
 3782              		.loc 1 1105 4 view .LVU1179
 3783 038a 4FF0FF39 		mov	r9, #-1
 3784 038e A0E6     		b	.L292
 3785              	.L371:
 3786              		.align	2
 3787              	.L370:
 3788 0390 00000000 		.word	LastDisplayedNumber
 3789              	.LBE272:
 3790              		.cfi_endproc
 3791              	.LFE18:
 3793              		.section	.text.set_annunciators,"ax",%progbits
 3794              		.align	1
 3795              		.p2align 2,,3
 3796              		.syntax unified
 3797              		.thumb
 3798              		.thumb_func
 3799              		.fpu fpv4-sp-d16
 3801              	set_annunciators:
 3802              	.LFB32:
2163:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3803              		.loc 1 2163 1 is_stmt 1 view -0
 3804              		.cfi_startproc
 3805              		@ args = 0, pretend = 0, frame = 0
 3806              		@ frame_needed = 0, uses_anonymous_args = 0
2164:src/display.c **** 
 3807              		.loc 1 2164 2 view .LVU1181
2163:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3808              		.loc 1 2163 1 is_stmt 0 view .LVU1182
 3809 0000 70B5     		push	{r4, r5, r6, lr}
 3810              		.cfi_def_cfa_offset 16
 3811              		.cfi_offset 4, -16
 3812              		.cfi_offset 5, -12
 3813              		.cfi_offset 6, -8
 3814              		.cfi_offset 14, -4
2173:src/display.c **** #endif
 3815              		.loc 1 2173 11 view .LVU1183
 3816 0002 334E     		ldr	r6, .L397
2164:src/display.c **** 
 3817              		.loc 1 2164 29 view .LVU1184
 3818 0004 FFF7FEFF 		bl	get_trig_mode
 3819              	.LVL424:
2173:src/display.c **** #endif
 3820              		.loc 1 2173 11 view .LVU1185
 3821 0008 3368     		ldr	r3, [r6]
2173:src/display.c **** #endif
ARM GAS  /tmp/ccQmbpxO.s 			page 134


 3822              		.loc 1 2173 2 view .LVU1186
 3823 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3824 000e 012B     		cmp	r3, #1
2164:src/display.c **** 
 3825              		.loc 1 2164 29 view .LVU1187
 3826 0010 0446     		mov	r4, r0
 3827              	.LVL425:
2173:src/display.c **** #endif
 3828              		.loc 1 2173 2 is_stmt 1 view .LVU1188
 3829              	.LBB291:
 3830              	.LBB292:
 327:src/display.c **** 	else	clr_dot(n);
 3831              		.loc 1 327 10 is_stmt 0 view .LVU1189
 3832 0012 4FF08800 		mov	r0, #136
 3833              	.LBE292:
 3834              	.LBE291:
2173:src/display.c **** #endif
 3835              		.loc 1 2173 2 view .LVU1190
 3836 0016 03D8     		bhi	.L373
2173:src/display.c **** #endif
 3837              		.loc 1 2173 30 discriminator 1 view .LVU1191
 3838 0018 2E4B     		ldr	r3, .L397+4
2173:src/display.c **** #endif
 3839              		.loc 1 2173 2 discriminator 1 view .LVU1192
 3840 001a 1B68     		ldr	r3, [r3]
 3841 001c 002B     		cmp	r3, #0
 3842 001e 53D0     		beq	.L394
 3843              	.L373:
 3844              	.LVL426:
 3845              	.LBB295:
 3846              	.LBI291:
 326:src/display.c **** 	if (on)	set_dot(n);
 3847              		.loc 1 326 6 is_stmt 1 view .LVU1193
 3848              	.LBB293:
 327:src/display.c **** 	else	clr_dot(n);
 3849              		.loc 1 327 2 view .LVU1194
 328:src/display.c **** }
 3850              		.loc 1 328 7 view .LVU1195
 3851 0020 FFF7FEFF 		bl	clr_dot
 3852              	.LVL427:
 3853              	.L374:
 328:src/display.c **** }
 3854              		.loc 1 328 7 is_stmt 0 view .LVU1196
 3855              	.LBE293:
 3856              	.LBE295:
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3857              		.loc 1 2175 2 is_stmt 1 view .LVU1197
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3858              		.loc 1 2175 19 is_stmt 0 view .LVU1198
 3859 0024 2C4D     		ldr	r5, .L397+8
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3860              		.loc 1 2175 2 view .LVU1199
 3861 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3862              	.LBB296:
 3863              	.LBB297:
 327:src/display.c **** 	else	clr_dot(n);
 3864              		.loc 1 327 10 view .LVU1200
ARM GAS  /tmp/ccQmbpxO.s 			page 135


 3865 0028 8620     		movs	r0, #134
 3866              	.LBE297:
 3867              	.LBE296:
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3868              		.loc 1 2175 2 view .LVU1201
 3869 002a 23B9     		cbnz	r3, .L375
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3870              		.loc 1 2175 47 discriminator 2 view .LVU1202
 3871 002c 6A69     		ldr	r2, [r5, #20]
 3872 002e 2B4B     		ldr	r3, .L397+12
 3873 0030 1340     		ands	r3, r3, r2
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3874              		.loc 1 2175 2 discriminator 2 view .LVU1203
 3875 0032 002B     		cmp	r3, #0
 3876 0034 45D0     		beq	.L395
 3877              	.L375:
 3878              	.LBB300:
 3879              	.LBB298:
 327:src/display.c **** 	else	clr_dot(n);
 3880              		.loc 1 327 10 is_stmt 1 view .LVU1204
 3881 0036 FFF7FEFF 		bl	set_dot
 3882              	.LVL428:
 3883              	.L376:
 3884              	.LBE298:
 3885              	.LBE300:
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3886              		.loc 1 2176 2 view .LVU1205
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3887              		.loc 1 2176 31 is_stmt 0 view .LVU1206
 3888 003a 294A     		ldr	r2, .L397+16
 3889 003c 6B69     		ldr	r3, [r5, #20]
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3890              		.loc 1 2176 2 view .LVU1207
 3891 003e 1A42     		tst	r2, r3
 3892              	.LBB301:
 3893              	.LBB302:
 327:src/display.c **** 	else	clr_dot(n);
 3894              		.loc 1 327 10 view .LVU1208
 3895 0040 4FF08500 		mov	r0, #133
 3896              	.LBE302:
 3897              	.LBE301:
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3898              		.loc 1 2176 2 view .LVU1209
 3899 0044 02D0     		beq	.L377
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3900              		.loc 1 2176 48 discriminator 1 view .LVU1210
 3901 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3902              		.loc 1 2176 2 discriminator 1 view .LVU1211
 3903 0048 DA06     		lsls	r2, r3, #27
 3904 004a 37D4     		bmi	.L378
 3905              	.L377:
 3906              	.LVL429:
 3907              	.LBB305:
 3908              	.LBI301:
 326:src/display.c **** 	if (on)	set_dot(n);
 3909              		.loc 1 326 6 is_stmt 1 view .LVU1212
ARM GAS  /tmp/ccQmbpxO.s 			page 136


 3910              	.LBB303:
 327:src/display.c **** 	else	clr_dot(n);
 3911              		.loc 1 327 2 view .LVU1213
 328:src/display.c **** }
 3912              		.loc 1 328 7 view .LVU1214
 3913 004c FFF7FEFF 		bl	clr_dot
 3914              	.LVL430:
 3915              	.L379:
 328:src/display.c **** }
 3916              		.loc 1 328 7 is_stmt 0 view .LVU1215
 3917              	.LBE303:
 3918              	.LBE305:
2177:src/display.c **** 	set_IO_annunciator();
 3919              		.loc 1 2177 2 is_stmt 1 view .LVU1216
 3920 0050 6820     		movs	r0, #104
 3921 0052 FFF7FEFF 		bl	get_user_flag
 3922              	.LVL431:
 3923              	.LBB306:
 3924              	.LBI306:
 326:src/display.c **** 	if (on)	set_dot(n);
 3925              		.loc 1 326 6 view .LVU1217
 3926              	.LBB307:
 327:src/display.c **** 	else	clr_dot(n);
 3927              		.loc 1 327 2 view .LVU1218
 327:src/display.c **** 	else	clr_dot(n);
 3928              		.loc 1 327 5 is_stmt 0 view .LVU1219
 3929 0056 68B3     		cbz	r0, .L380
 327:src/display.c **** 	else	clr_dot(n);
 3930              		.loc 1 327 10 is_stmt 1 view .LVU1220
 3931 0058 8320     		movs	r0, #131
 3932              	.LVL432:
 327:src/display.c **** 	else	clr_dot(n);
 3933              		.loc 1 327 10 is_stmt 0 view .LVU1221
 3934 005a FFF7FEFF 		bl	set_dot
 3935              	.LVL433:
 3936              	.L381:
 327:src/display.c **** 	else	clr_dot(n);
 3937              		.loc 1 327 10 view .LVU1222
 3938              	.LBE307:
 3939              	.LBE306:
2178:src/display.c **** 
 3940              		.loc 1 2178 2 is_stmt 1 view .LVU1223
 3941              	.LBB309:
 3942              	.LBI309:
2190:src/display.c **** #ifndef DM42
 3943              		.loc 1 2190 6 view .LVU1224
 3944              	.LBB310:
2195:src/display.c **** #endif
 3945              		.loc 1 2195 5 view .LVU1225
2205:src/display.c **** 		dot(LIT_EQ, on);
 3946              		.loc 1 2205 2 view .LVU1226
2205:src/display.c **** 		dot(LIT_EQ, on);
 3947              		.loc 1 2205 9 is_stmt 0 view .LVU1227
 3948 005e 214D     		ldr	r5, .L397+20
2205:src/display.c **** 		dot(LIT_EQ, on);
 3949              		.loc 1 2205 5 view .LVU1228
 3950 0060 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccQmbpxO.s 			page 137


 3951 0062 012B     		cmp	r3, #1
 3952 0064 06D0     		beq	.L382
 3953              	.LBB311:
 3954              	.LBI311:
2190:src/display.c **** #ifndef DM42
 3955              		.loc 1 2190 6 is_stmt 1 view .LVU1229
 3956              	.LBB312:
2206:src/display.c **** 		IoAnnunciator = on;
 3957              		.loc 1 2206 3 view .LVU1230
 3958              	.LVL434:
 3959              	.LBB313:
 3960              	.LBI313:
 326:src/display.c **** 	if (on)	set_dot(n);
 3961              		.loc 1 326 6 view .LVU1231
 3962              	.LBB314:
 327:src/display.c **** 	else	clr_dot(n);
 3963              		.loc 1 327 2 view .LVU1232
 327:src/display.c **** 	else	clr_dot(n);
 3964              		.loc 1 327 10 view .LVU1233
 3965 0066 8420     		movs	r0, #132
 3966 0068 FFF7FEFF 		bl	set_dot
 3967              	.LVL435:
 327:src/display.c **** 	else	clr_dot(n);
 3968              		.loc 1 327 10 is_stmt 0 view .LVU1234
 3969              	.LBE314:
 3970              	.LBE313:
2207:src/display.c **** 		finish_display();
 3971              		.loc 1 2207 3 is_stmt 1 view .LVU1235
2207:src/display.c **** 		finish_display();
 3972              		.loc 1 2207 17 is_stmt 0 view .LVU1236
 3973 006c 0123     		movs	r3, #1
 3974 006e 2B60     		str	r3, [r5]
2208:src/display.c **** 	}
 3975              		.loc 1 2208 3 is_stmt 1 view .LVU1237
 3976 0070 FFF7FEFF 		bl	finish_display
 3977              	.LVL436:
 3978              	.L382:
 3979              	.LBE312:
 3980              	.LBE311:
 3981              	.LBE310:
 3982              	.LBE309:
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3983              		.loc 1 2182 2 view .LVU1238
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3984              		.loc 1 2182 11 is_stmt 0 view .LVU1239
 3985 0074 3368     		ldr	r3, [r6]
 3986 0076 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3987 007a 03F00103 		and	r3, r3, #1
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3988              		.loc 1 2182 2 view .LVU1240
 3989 007e 2343     		orrs	r3, r3, r4
 3990 0080 13F0FF0F 		tst	r3, #255
 3991              	.LBB315:
 3992              	.LBB316:
 327:src/display.c **** 	else	clr_dot(n);
 3993              		.loc 1 327 10 view .LVU1241
 3994 0084 4FF08C00 		mov	r0, #140
ARM GAS  /tmp/ccQmbpxO.s 			page 138


 3995              	.LBE316:
 3996              	.LBE315:
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3997              		.loc 1 2182 2 view .LVU1242
 3998 0088 06D1     		bne	.L396
 3999              	.LVL437:
 4000              	.LBB319:
 4001              	.LBI315:
 326:src/display.c **** 	if (on)	set_dot(n);
 4002              		.loc 1 326 6 is_stmt 1 view .LVU1243
 4003              	.LBB317:
 327:src/display.c **** 	else	clr_dot(n);
 4004              		.loc 1 327 2 view .LVU1244
 327:src/display.c **** 	else	clr_dot(n);
 4005              		.loc 1 327 10 view .LVU1245
 4006 008a FFF7FEFF 		bl	set_dot
 4007              	.LVL438:
 327:src/display.c **** 	else	clr_dot(n);
 4008              		.loc 1 327 10 is_stmt 0 view .LVU1246
 4009              	.LBE317:
 4010              	.LBE319:
2183:src/display.c **** }
 4011              		.loc 1 2183 2 is_stmt 1 view .LVU1247
 4012              	.L385:
 4013              	.LBB320:
 4014              	.LBI320:
 326:src/display.c **** 	if (on)	set_dot(n);
 4015              		.loc 1 326 6 view .LVU1248
 4016              	.LBB321:
 327:src/display.c **** 	else	clr_dot(n);
 4017              		.loc 1 327 2 view .LVU1249
 328:src/display.c **** }
 4018              		.loc 1 328 7 view .LVU1250
 4019              	.LBE321:
 4020              	.LBE320:
2184:src/display.c **** 
 4021              		.loc 1 2184 1 is_stmt 0 view .LVU1251
 4022 008e BDE87040 		pop	{r4, r5, r6, lr}
 4023              		.cfi_remember_state
 4024              		.cfi_restore 14
 4025              		.cfi_restore 6
 4026              		.cfi_restore 5
 4027              		.cfi_restore 4
 4028              		.cfi_def_cfa_offset 0
 4029              	.LVL439:
 4030              	.LBB325:
 4031              	.LBB322:
 328:src/display.c **** }
 4032              		.loc 1 328 7 view .LVU1252
 4033 0092 8B20     		movs	r0, #139
 4034 0094 FFF7FEBF 		b	clr_dot
 4035              	.LVL440:
 4036              	.L396:
 4037              		.cfi_restore_state
 328:src/display.c **** }
 4038              		.loc 1 328 7 view .LVU1253
 4039              	.LBE322:
ARM GAS  /tmp/ccQmbpxO.s 			page 139


 4040              	.LBE325:
 4041              	.LBB326:
 326:src/display.c **** 	if (on)	set_dot(n);
 4042              		.loc 1 326 6 is_stmt 1 view .LVU1254
 4043              	.LBB318:
 327:src/display.c **** 	else	clr_dot(n);
 4044              		.loc 1 327 2 view .LVU1255
 328:src/display.c **** }
 4045              		.loc 1 328 7 view .LVU1256
 4046 0098 FFF7FEFF 		bl	clr_dot
 4047              	.LVL441:
 328:src/display.c **** }
 4048              		.loc 1 328 7 is_stmt 0 view .LVU1257
 4049              	.LBE318:
 4050              	.LBE326:
2183:src/display.c **** }
 4051              		.loc 1 2183 2 is_stmt 1 view .LVU1258
2183:src/display.c **** }
 4052              		.loc 1 2183 11 is_stmt 0 view .LVU1259
 4053 009c 3368     		ldr	r3, [r6]
 4054 009e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2183:src/display.c **** }
 4055              		.loc 1 2183 2 view .LVU1260
 4056 00a2 DB07     		lsls	r3, r3, #31
 4057 00a4 F3D4     		bmi	.L385
2183:src/display.c **** }
 4058              		.loc 1 2183 2 discriminator 1 view .LVU1261
 4059 00a6 012C     		cmp	r4, #1
 4060 00a8 F1D1     		bne	.L385
 4061              	.LVL442:
 4062              	.LBB327:
 326:src/display.c **** 	if (on)	set_dot(n);
 4063              		.loc 1 326 6 is_stmt 1 view .LVU1262
 4064              	.LBB323:
 327:src/display.c **** 	else	clr_dot(n);
 4065              		.loc 1 327 2 view .LVU1263
 327:src/display.c **** 	else	clr_dot(n);
 4066              		.loc 1 327 10 view .LVU1264
 4067              	.LBE323:
 4068              	.LBE327:
2184:src/display.c **** 
 4069              		.loc 1 2184 1 is_stmt 0 view .LVU1265
 4070 00aa BDE87040 		pop	{r4, r5, r6, lr}
 4071              		.cfi_remember_state
 4072              		.cfi_restore 14
 4073              		.cfi_restore 6
 4074              		.cfi_restore 5
 4075              		.cfi_restore 4
 4076              		.cfi_def_cfa_offset 0
 4077              	.LVL443:
 4078              	.LBB328:
 4079              	.LBB324:
 327:src/display.c **** 	else	clr_dot(n);
 4080              		.loc 1 327 10 view .LVU1266
 4081 00ae 8B20     		movs	r0, #139
 4082 00b0 FFF7FEBF 		b	set_dot
 4083              	.LVL444:
ARM GAS  /tmp/ccQmbpxO.s 			page 140


 4084              	.L380:
 4085              		.cfi_restore_state
 327:src/display.c **** 	else	clr_dot(n);
 4086              		.loc 1 327 10 view .LVU1267
 4087              	.LBE324:
 4088              	.LBE328:
 4089              	.LBB329:
 4090              	.LBB308:
 328:src/display.c **** }
 4091              		.loc 1 328 7 is_stmt 1 view .LVU1268
 4092 00b4 8320     		movs	r0, #131
 4093              	.LVL445:
 328:src/display.c **** }
 4094              		.loc 1 328 7 is_stmt 0 view .LVU1269
 4095 00b6 FFF7FEFF 		bl	clr_dot
 4096              	.LVL446:
 4097 00ba D0E7     		b	.L381
 4098              	.LVL447:
 4099              	.L378:
 328:src/display.c **** }
 4100              		.loc 1 328 7 view .LVU1270
 4101              	.LBE308:
 4102              	.LBE329:
 4103              	.LBB330:
 326:src/display.c **** 	if (on)	set_dot(n);
 4104              		.loc 1 326 6 is_stmt 1 view .LVU1271
 4105              	.LBB304:
 327:src/display.c **** 	else	clr_dot(n);
 4106              		.loc 1 327 2 view .LVU1272
 327:src/display.c **** 	else	clr_dot(n);
 4107              		.loc 1 327 10 view .LVU1273
 4108 00bc FFF7FEFF 		bl	set_dot
 4109              	.LVL448:
 4110 00c0 C6E7     		b	.L379
 4111              	.LVL449:
 4112              	.L395:
 327:src/display.c **** 	else	clr_dot(n);
 4113              		.loc 1 327 10 is_stmt 0 view .LVU1274
 4114              	.LBE304:
 4115              	.LBE330:
 4116              	.LBB331:
 4117              	.LBI296:
 326:src/display.c **** 	if (on)	set_dot(n);
 4118              		.loc 1 326 6 is_stmt 1 view .LVU1275
 4119              	.LBB299:
 327:src/display.c **** 	else	clr_dot(n);
 4120              		.loc 1 327 2 view .LVU1276
 328:src/display.c **** }
 4121              		.loc 1 328 7 view .LVU1277
 4122 00c2 FFF7FEFF 		bl	clr_dot
 4123              	.LVL450:
 4124 00c6 B8E7     		b	.L376
 4125              	.LVL451:
 4126              	.L394:
 328:src/display.c **** }
 4127              		.loc 1 328 7 is_stmt 0 view .LVU1278
 4128              	.LBE299:
ARM GAS  /tmp/ccQmbpxO.s 			page 141


 4129              	.LBE331:
 4130              	.LBB332:
 326:src/display.c **** 	if (on)	set_dot(n);
 4131              		.loc 1 326 6 is_stmt 1 view .LVU1279
 4132              	.LBB294:
 327:src/display.c **** 	else	clr_dot(n);
 4133              		.loc 1 327 2 view .LVU1280
 327:src/display.c **** 	else	clr_dot(n);
 4134              		.loc 1 327 10 view .LVU1281
 4135 00c8 FFF7FEFF 		bl	set_dot
 4136              	.LVL452:
 4137 00cc AAE7     		b	.L374
 4138              	.L398:
 4139 00ce 00BF     		.align	2
 4140              	.L397:
 4141 00d0 00000000 		.word	main_ram
 4142 00d4 00000000 		.word	Running
 4143 00d8 00000000 		.word	StateWhileOn
 4144 00dc 07000800 		.word	524295
 4145 00e0 00080800 		.word	526336
 4146 00e4 00000000 		.word	IoAnnunciator
 4147              	.LBE294:
 4148              	.LBE332:
 4149              		.cfi_endproc
 4150              	.LFE32:
 4152              		.section	.text.getdig,"ax",%progbits
 4153              		.align	1
 4154              		.p2align 2,,3
 4155              		.global	getdig
 4156              		.syntax unified
 4157              		.thumb
 4158              		.thumb_func
 4159              		.fpu fpv4-sp-d16
 4161              	getdig:
 4162              	.LVL453:
 4163              	.LFB6:
 321:src/display.c **** 	// perform index lookup
 4164              		.loc 1 321 1 view -0
 4165              		.cfi_startproc
 4166              		@ args = 0, pretend = 0, frame = 0
 4167              		@ frame_needed = 0, uses_anonymous_args = 0
 4168              		@ link register save eliminated.
 323:src/display.c **** }
 4169              		.loc 1 323 2 view .LVU1283
 323:src/display.c **** }
 4170              		.loc 1 323 15 is_stmt 0 view .LVU1284
 4171 0000 014B     		ldr	r3, .L400
 323:src/display.c **** }
 4172              		.loc 1 323 18 view .LVU1285
 4173 0002 C0B2     		uxtb	r0, r0
 4174              	.LVL454:
 324:src/display.c **** 
 4175              		.loc 1 324 1 view .LVU1286
 4176 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4177 0006 7047     		bx	lr
 4178              	.L401:
 4179              		.align	2
ARM GAS  /tmp/ccQmbpxO.s 			page 142


 4180              	.L400:
 4181 0008 00000000 		.word	.LANCHOR2
 4182              		.cfi_endproc
 4183              	.LFE6:
 4185              		.section	.text.dot,"ax",%progbits
 4186              		.align	1
 4187              		.p2align 2,,3
 4188              		.global	dot
 4189              		.syntax unified
 4190              		.thumb
 4191              		.thumb_func
 4192              		.fpu fpv4-sp-d16
 4194              	dot:
 4195              	.LVL455:
 4196              	.LFB7:
 326:src/display.c **** 	if (on)	set_dot(n);
 4197              		.loc 1 326 25 is_stmt 1 view -0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 0
 4200              		@ frame_needed = 0, uses_anonymous_args = 0
 4201              		@ link register save eliminated.
 327:src/display.c **** 	else	clr_dot(n);
 4202              		.loc 1 327 2 view .LVU1288
 327:src/display.c **** 	else	clr_dot(n);
 4203              		.loc 1 327 5 is_stmt 0 view .LVU1289
 4204 0000 09B1     		cbz	r1, .L403
 327:src/display.c **** 	else	clr_dot(n);
 4205              		.loc 1 327 10 is_stmt 1 discriminator 1 view .LVU1290
 4206 0002 FFF7FEBF 		b	set_dot
 4207              	.LVL456:
 4208              	.L403:
 328:src/display.c **** }
 4209              		.loc 1 328 7 view .LVU1291
 4210 0006 FFF7FEBF 		b	clr_dot
 4211              	.LVL457:
 328:src/display.c **** }
 4212              		.loc 1 328 7 is_stmt 0 view .LVU1292
 4213              		.cfi_endproc
 4214              	.LFE7:
 4216 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4217              		.align	1
 4218              		.p2align 2,,3
 4219              		.global	std_round_fix
 4220              		.syntax unified
 4221              		.thumb
 4222              		.thumb_func
 4223              		.fpu fpv4-sp-d16
 4225              	std_round_fix:
 4226              	.LVL458:
 4227              	.LFB24:
1416:src/display.c **** 	decNumber b, c;
 4228              		.loc 1 1416 54 is_stmt 1 view -0
 4229              		.cfi_startproc
 4230              		@ args = 0, pretend = 0, frame = 80
 4231              		@ frame_needed = 0, uses_anonymous_args = 0
1417:src/display.c **** 
 4232              		.loc 1 1417 2 view .LVU1294
ARM GAS  /tmp/ccQmbpxO.s 			page 143


1419:src/display.c **** 	b.exponent -= UState.dispdigs;
 4233              		.loc 1 1419 2 view .LVU1295
1416:src/display.c **** 	decNumber b, c;
 4234              		.loc 1 1416 54 is_stmt 0 view .LVU1296
 4235 0000 00B5     		push	{lr}
 4236              		.cfi_def_cfa_offset 4
 4237              		.cfi_offset 14, -4
 4238 0002 95B0     		sub	sp, sp, #84
 4239              		.cfi_def_cfa_offset 88
1416:src/display.c **** 	decNumber b, c;
 4240              		.loc 1 1416 54 view .LVU1297
 4241 0004 0146     		mov	r1, r0
1419:src/display.c **** 	b.exponent -= UState.dispdigs;
 4242              		.loc 1 1419 2 view .LVU1298
 4243 0006 02A8     		add	r0, sp, #8
 4244              	.LVL459:
1416:src/display.c **** 	decNumber b, c;
 4245              		.loc 1 1416 54 view .LVU1299
 4246 0008 0191     		str	r1, [sp, #4]
1419:src/display.c **** 	b.exponent -= UState.dispdigs;
 4247              		.loc 1 1419 2 view .LVU1300
 4248 000a FFF7FEFF 		bl	dn_1
 4249              	.LVL460:
1420:src/display.c **** 	dn_abs(&c, z);
 4250              		.loc 1 1420 2 is_stmt 1 view .LVU1301
1420:src/display.c **** 	dn_abs(&c, z);
 4251              		.loc 1 1420 22 is_stmt 0 view .LVU1302
 4252 000e 0F4A     		ldr	r2, .L409
1420:src/display.c **** 	dn_abs(&c, z);
 4253              		.loc 1 1420 13 view .LVU1303
 4254 0010 039B     		ldr	r3, [sp, #12]
1420:src/display.c **** 	dn_abs(&c, z);
 4255              		.loc 1 1420 22 view .LVU1304
 4256 0012 1268     		ldr	r2, [r2]
1421:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4257              		.loc 1 1421 2 view .LVU1305
 4258 0014 0199     		ldr	r1, [sp, #4]
1420:src/display.c **** 	dn_abs(&c, z);
 4259              		.loc 1 1420 22 view .LVU1306
 4260 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4261 001a 02F00F02 		and	r2, r2, #15
1420:src/display.c **** 	dn_abs(&c, z);
 4262              		.loc 1 1420 13 view .LVU1307
 4263 001e 9B1A     		subs	r3, r3, r2
1421:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4264              		.loc 1 1421 2 view .LVU1308
 4265 0020 0BA8     		add	r0, sp, #44
1420:src/display.c **** 	dn_abs(&c, z);
 4266              		.loc 1 1420 13 view .LVU1309
 4267 0022 0393     		str	r3, [sp, #12]
1421:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4268              		.loc 1 1421 2 is_stmt 1 view .LVU1310
 4269 0024 FFF7FEFF 		bl	dn_abs
 4270              	.LVL461:
1422:src/display.c **** 		return MODE_FIX;
 4271              		.loc 1 1422 2 view .LVU1311
1422:src/display.c **** 		return MODE_FIX;
ARM GAS  /tmp/ccQmbpxO.s 			page 144


 4272              		.loc 1 1422 6 is_stmt 0 view .LVU1312
 4273 0028 0BA9     		add	r1, sp, #44
 4274 002a 02A8     		add	r0, sp, #8
 4275 002c FFF7FEFF 		bl	dn_lt
 4276              	.LVL462:
1422:src/display.c **** 		return MODE_FIX;
 4277              		.loc 1 1422 5 view .LVU1313
 4278 0030 10B9     		cbnz	r0, .L408
1425:src/display.c **** #endif
 4279              		.loc 1 1425 1 view .LVU1314
 4280 0032 15B0     		add	sp, sp, #84
 4281              		.cfi_remember_state
 4282              		.cfi_def_cfa_offset 4
 4283              		@ sp needed
 4284 0034 5DF804FB 		ldr	pc, [sp], #4
 4285              	.LVL463:
 4286              	.L408:
 4287              		.cfi_restore_state
1422:src/display.c **** 		return MODE_FIX;
 4288              		.loc 1 1422 23 discriminator 1 view .LVU1315
 4289 0038 0549     		ldr	r1, .L409+4
 4290 003a 0BA8     		add	r0, sp, #44
 4291 003c FFF7FEFF 		bl	dn_lt
 4292              	.LVL464:
1423:src/display.c **** 	return MODE_STD;
 4293              		.loc 1 1423 10 discriminator 1 view .LVU1316
 4294 0040 0038     		subs	r0, r0, #0
 4295 0042 18BF     		it	ne
 4296 0044 0120     		movne	r0, #1
1425:src/display.c **** #endif
 4297              		.loc 1 1425 1 discriminator 1 view .LVU1317
 4298 0046 15B0     		add	sp, sp, #84
 4299              		.cfi_def_cfa_offset 4
 4300              		@ sp needed
 4301 0048 5DF804FB 		ldr	pc, [sp], #4
 4302              	.LVL465:
 4303              	.L410:
1425:src/display.c **** #endif
 4304              		.loc 1 1425 1 discriminator 1 view .LVU1318
 4305              		.align	2
 4306              	.L409:
 4307 004c 00000000 		.word	main_ram
 4308 0050 00000000 		.word	const_1
 4309              		.cfi_endproc
 4310              	.LFE24:
 4312              		.section	.text.set_IO_annunciator,"ax",%progbits
 4313              		.align	1
 4314              		.p2align 2,,3
 4315              		.global	set_IO_annunciator
 4316              		.syntax unified
 4317              		.thumb
 4318              		.thumb_func
 4319              		.fpu fpv4-sp-d16
 4321              	set_IO_annunciator:
 4322              	.LFB33:
2190:src/display.c **** #ifndef DM42
 4323              		.loc 1 2190 31 is_stmt 1 view -0
ARM GAS  /tmp/ccQmbpxO.s 			page 145


 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 0
 4326              		@ frame_needed = 0, uses_anonymous_args = 0
2195:src/display.c **** #endif
 4327              		.loc 1 2195 5 view .LVU1320
 4328              	.LVL466:
2205:src/display.c **** 		dot(LIT_EQ, on);
 4329              		.loc 1 2205 2 view .LVU1321
2190:src/display.c **** #ifndef DM42
 4330              		.loc 1 2190 31 is_stmt 0 view .LVU1322
 4331 0000 10B5     		push	{r4, lr}
 4332              		.cfi_def_cfa_offset 8
 4333              		.cfi_offset 4, -8
 4334              		.cfi_offset 14, -4
2205:src/display.c **** 		dot(LIT_EQ, on);
 4335              		.loc 1 2205 9 view .LVU1323
 4336 0002 074C     		ldr	r4, .L415
2205:src/display.c **** 		dot(LIT_EQ, on);
 4337              		.loc 1 2205 5 view .LVU1324
 4338 0004 2368     		ldr	r3, [r4]
 4339 0006 012B     		cmp	r3, #1
 4340 0008 00D1     		bne	.L414
2210:src/display.c **** 
 4341              		.loc 1 2210 1 view .LVU1325
 4342 000a 10BD     		pop	{r4, pc}
 4343              	.L414:
 4344              	.LBB337:
 4345              	.LBI337:
2190:src/display.c **** #ifndef DM42
 4346              		.loc 1 2190 6 is_stmt 1 view .LVU1326
 4347              	.LBB338:
2206:src/display.c **** 		IoAnnunciator = on;
 4348              		.loc 1 2206 3 view .LVU1327
 4349              	.LVL467:
 4350              	.LBB339:
 4351              	.LBI339:
 326:src/display.c **** 	if (on)	set_dot(n);
 4352              		.loc 1 326 6 view .LVU1328
 4353              	.LBB340:
 327:src/display.c **** 	else	clr_dot(n);
 4354              		.loc 1 327 2 view .LVU1329
 327:src/display.c **** 	else	clr_dot(n);
 4355              		.loc 1 327 10 view .LVU1330
 4356 000c 8420     		movs	r0, #132
 4357 000e FFF7FEFF 		bl	set_dot
 4358              	.LVL468:
 327:src/display.c **** 	else	clr_dot(n);
 4359              		.loc 1 327 10 is_stmt 0 view .LVU1331
 4360              	.LBE340:
 4361              	.LBE339:
2207:src/display.c **** 		finish_display();
 4362              		.loc 1 2207 3 is_stmt 1 view .LVU1332
2207:src/display.c **** 		finish_display();
 4363              		.loc 1 2207 17 is_stmt 0 view .LVU1333
 4364 0012 0123     		movs	r3, #1
 4365 0014 2360     		str	r3, [r4]
2208:src/display.c **** 	}
ARM GAS  /tmp/ccQmbpxO.s 			page 146


 4366              		.loc 1 2208 3 is_stmt 1 view .LVU1334
 4367              	.LBE338:
 4368              	.LBE337:
2210:src/display.c **** 
 4369              		.loc 1 2210 1 is_stmt 0 view .LVU1335
 4370 0016 BDE81040 		pop	{r4, lr}
 4371              		.cfi_restore 14
 4372              		.cfi_restore 4
 4373              		.cfi_def_cfa_offset 0
 4374              	.LBB342:
 4375              	.LBB341:
2208:src/display.c **** 	}
 4376              		.loc 1 2208 3 view .LVU1336
 4377 001a FFF7FEBF 		b	finish_display
 4378              	.LVL469:
 4379              	.L416:
 4380 001e 00BF     		.align	2
 4381              	.L415:
 4382 0020 00000000 		.word	IoAnnunciator
 4383              	.LBE341:
 4384              	.LBE342:
 4385              		.cfi_endproc
 4386              	.LFE33:
 4388              		.section	.text.pixel_length,"ax",%progbits
 4389              		.align	1
 4390              		.p2align 2,,3
 4391              		.global	pixel_length
 4392              		.syntax unified
 4393              		.thumb
 4394              		.thumb_func
 4395              		.fpu fpv4-sp-d16
 4397              	pixel_length:
 4398              	.LVL470:
 4399              	.LFB38:
2699:src/display.c **** 
2700:src/display.c **** 
2701:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2702:src/display.c ****  */
2703:src/display.c **** int pixel_length(const char *s, int smallp)
2704:src/display.c **** {
 4400              		.loc 1 2704 1 is_stmt 1 view -0
 4401              		.cfi_startproc
 4402              		@ args = 0, pretend = 0, frame = 0
 4403              		@ frame_needed = 0, uses_anonymous_args = 0
2705:src/display.c **** 	int len = 0;
 4404              		.loc 1 2705 2 view .LVU1338
2706:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4405              		.loc 1 2706 2 view .LVU1339
2704:src/display.c **** 	int len = 0;
 4406              		.loc 1 2704 1 is_stmt 0 view .LVU1340
 4407 0000 70B5     		push	{r4, r5, r6, lr}
 4408              		.cfi_def_cfa_offset 16
 4409              		.cfi_offset 4, -16
 4410              		.cfi_offset 5, -12
 4411              		.cfi_offset 6, -8
 4412              		.cfi_offset 14, -4
2704:src/display.c **** 	int len = 0;
ARM GAS  /tmp/ccQmbpxO.s 			page 147


 4413              		.loc 1 2704 1 view .LVU1341
 4414 0002 0446     		mov	r4, r0
2707:src/display.c **** 	while (*s != '\0') {
 4415              		.loc 1 2707 9 view .LVU1342
 4416 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4417              	.LVL471:
2706:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4418              		.loc 1 2706 34 view .LVU1343
 4419 0006 0E1E     		subs	r6, r1, #0
 4420 0008 18BF     		it	ne
 4421 000a 4FF48076 		movne	r6, #256
 4422              	.LVL472:
 4423              		.loc 1 2707 2 is_stmt 1 view .LVU1344
 4424              		.loc 1 2707 8 view .LVU1345
 4425 000e A0B1     		cbz	r0, .L424
2705:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4426              		.loc 1 2705 6 is_stmt 0 view .LVU1346
 4427 0010 0025     		movs	r5, #0
 4428 0012 06E0     		b	.L422
 4429              	.LVL473:
 4430              	.L420:
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2709:src/display.c **** 		if (s[0] == '\007') {
2710:src/display.c **** 			len += s[1] & 0x1F;
2711:src/display.c **** 			s += 3;
2712:src/display.c **** 			continue;
2713:src/display.c **** 		}
2714:src/display.c **** #endif
2715:src/display.c **** 		len += charlengths( (unsigned char) *s++ + offset );
 4431              		.loc 1 2715 10 view .LVU1347
 4432 0014 3044     		add	r0, r0, r6
 4433 0016 FFF7FEFF 		bl	charlengths
 4434              	.LVL474:
 4435              		.loc 1 2715 41 view .LVU1348
 4436 001a 0134     		adds	r4, r4, #1
 4437              	.LVL475:
 4438              		.loc 1 2715 7 view .LVU1349
 4439 001c 0544     		add	r5, r5, r0
 4440              	.LVL476:
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4441              		.loc 1 2707 8 is_stmt 1 view .LVU1350
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4442              		.loc 1 2707 9 is_stmt 0 view .LVU1351
 4443 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4444              		.loc 1 2707 8 view .LVU1352
 4445 0020 48B1     		cbz	r0, .L417
 4446              	.LVL477:
 4447              	.L422:
2709:src/display.c **** 			len += s[1] & 0x1F;
 4448              		.loc 1 2709 3 is_stmt 1 view .LVU1353
 4449              		.loc 1 2715 3 view .LVU1354
2709:src/display.c **** 			len += s[1] & 0x1F;
 4450              		.loc 1 2709 6 is_stmt 0 view .LVU1355
 4451 0022 0728     		cmp	r0, #7
 4452 0024 F6D1     		bne	.L420
2710:src/display.c **** 			s += 3;
ARM GAS  /tmp/ccQmbpxO.s 			page 148


 4453              		.loc 1 2710 4 is_stmt 1 view .LVU1356
2710:src/display.c **** 			s += 3;
 4454              		.loc 1 2710 16 is_stmt 0 view .LVU1357
 4455 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4456              		.loc 1 2707 9 view .LVU1358
 4457 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
2710:src/display.c **** 			s += 3;
 4458              		.loc 1 2710 16 view .LVU1359
 4459 002a 03F01F03 		and	r3, r3, #31
2711:src/display.c **** 			continue;
 4460              		.loc 1 2711 6 view .LVU1360
 4461 002e 0334     		adds	r4, r4, #3
 4462              	.LVL478:
2710:src/display.c **** 			s += 3;
 4463              		.loc 1 2710 8 view .LVU1361
 4464 0030 1D44     		add	r5, r5, r3
 4465              	.LVL479:
2711:src/display.c **** 			continue;
 4466              		.loc 1 2711 4 is_stmt 1 view .LVU1362
2712:src/display.c **** 		}
 4467              		.loc 1 2712 4 view .LVU1363
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4468              		.loc 1 2707 8 view .LVU1364
 4469 0032 0028     		cmp	r0, #0
 4470 0034 F5D1     		bne	.L422
 4471              	.L417:
2716:src/display.c **** 	}
2717:src/display.c **** 	return len;
2718:src/display.c **** }
 4472              		.loc 1 2718 1 is_stmt 0 view .LVU1365
 4473 0036 2846     		mov	r0, r5
 4474 0038 70BD     		pop	{r4, r5, r6, pc}
 4475              	.LVL480:
 4476              	.L424:
2705:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4477              		.loc 1 2705 6 view .LVU1366
 4478 003a 0546     		mov	r5, r0
2717:src/display.c **** }
 4479              		.loc 1 2717 2 is_stmt 1 view .LVU1367
 4480              		.loc 1 2718 1 is_stmt 0 view .LVU1368
 4481 003c 2846     		mov	r0, r5
 4482 003e 70BD     		pop	{r4, r5, r6, pc}
 4483              		.loc 1 2718 1 view .LVU1369
 4484              		.cfi_endproc
 4485              	.LFE38:
 4487              		.section	.text.set_status,"ax",%progbits
 4488              		.align	1
 4489              		.p2align 2,,3
 4490              		.syntax unified
 4491              		.thumb
 4492              		.thumb_func
 4493              		.fpu fpv4-sp-d16
 4495              	set_status:
 4496              	.LVL481:
 4497              	.LFB40:
2719:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 149


2720:src/display.c **** 
2721:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2722:src/display.c ****  * If this is larger than the display, return true.
2723:src/display.c ****  */
2724:src/display.c **** static int string_too_large(const char *s) {
2725:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
2726:src/display.c **** }
2727:src/display.c **** 
2728:src/display.c **** 
2729:src/display.c **** /* Display the given string on the screen.
2730:src/display.c ****  */
2731:src/display.c **** static void set_status(const char *str) {
 4498              		.loc 1 2731 41 is_stmt 1 view -0
 4499              		.cfi_startproc
 4500              		@ args = 0, pretend = 0, frame = 0
 4501              		@ frame_needed = 0, uses_anonymous_args = 0
2732:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4502              		.loc 1 2732 2 view .LVU1371
 4503              		.loc 1 2732 24 is_stmt 0 view .LVU1372
 4504 0000 0C4B     		ldr	r3, .L432
 4505              		.loc 1 2732 2 view .LVU1373
 4506 0002 93F91630 		ldrsb	r3, [r3, #22]
 4507 0006 002B     		cmp	r3, #0
2731:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4508              		.loc 1 2731 41 view .LVU1374
 4509 0008 10B5     		push	{r4, lr}
 4510              		.cfi_def_cfa_offset 8
 4511              		.cfi_offset 4, -8
 4512              		.cfi_offset 14, -4
2731:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4513              		.loc 1 2731 41 view .LVU1375
 4514 000a 0446     		mov	r4, r0
 4515              		.loc 1 2732 2 view .LVU1376
 4516 000c 05DA     		bge	.L431
 4517 000e 2046     		mov	r0, r4
 4518              		.loc 1 2732 2 view .LVU1377
 4519 0010 0121     		movs	r1, #1
2733:src/display.c **** }
 4520              		.loc 1 2733 1 view .LVU1378
 4521 0012 BDE81040 		pop	{r4, lr}
 4522              		.cfi_remember_state
 4523              		.cfi_restore 14
 4524              		.cfi_restore 4
 4525              		.cfi_def_cfa_offset 0
2732:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4526              		.loc 1 2732 2 view .LVU1379
 4527 0016 FFF7FEBF 		b	set_status_sized
 4528              	.LVL482:
 4529              	.L431:
 4530              		.cfi_restore_state
 4531              	.LBB343:
 4532              	.LBI343:
2724:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4533              		.loc 1 2724 12 is_stmt 1 view .LVU1380
 4534              	.LBB344:
2725:src/display.c **** }
 4535              		.loc 1 2725 2 view .LVU1381
ARM GAS  /tmp/ccQmbpxO.s 			page 150


2725:src/display.c **** }
 4536              		.loc 1 2725 9 is_stmt 0 view .LVU1382
 4537 001a 0021     		movs	r1, #0
 4538 001c FFF7FEFF 		bl	pixel_length
 4539              	.LVL483:
2725:src/display.c **** }
 4540              		.loc 1 2725 9 view .LVU1383
 4541              	.LBE344:
 4542              	.LBE343:
2732:src/display.c **** }
 4543              		.loc 1 2732 2 view .LVU1384
 4544 0020 2C28     		cmp	r0, #44
 4545 0022 D8BF     		it	le
 4546 0024 0021     		movle	r1, #0
 4547 0026 2046     		mov	r0, r4
 4548 0028 C8BF     		it	gt
 4549 002a 0121     		movgt	r1, #1
 4550              		.loc 1 2733 1 view .LVU1385
 4551 002c BDE81040 		pop	{r4, lr}
 4552              		.cfi_restore 14
 4553              		.cfi_restore 4
 4554              		.cfi_def_cfa_offset 0
 4555              	.LVL484:
2732:src/display.c **** }
 4556              		.loc 1 2732 2 view .LVU1386
 4557 0030 FFF7FEBF 		b	set_status_sized
 4558              	.LVL485:
 4559              	.L433:
2732:src/display.c **** }
 4560              		.loc 1 2732 2 view .LVU1387
 4561              		.align	2
 4562              	.L432:
 4563 0034 00000000 		.word	StateWhileOn
 4564              		.cfi_endproc
 4565              	.LFE40:
 4567              		.section	.text.set_x_dn,"ax",%progbits
 4568              		.align	1
 4569              		.p2align 2,,3
 4570              		.global	set_x_dn
 4571              		.syntax unified
 4572              		.thumb
 4573              		.thumb_func
 4574              		.fpu fpv4-sp-d16
 4576              	set_x_dn:
 4577              	.LVL486:
 4578              	.LFB27:
1563:src/display.c **** 	char x[50], *obp = x;
 4579              		.loc 1 1563 61 is_stmt 1 view -0
 4580              		.cfi_startproc
 4581              		@ args = 0, pretend = 0, frame = 136
 4582              		@ frame_needed = 0, uses_anonymous_args = 0
1564:src/display.c **** 	int odig = 0;
 4583              		.loc 1 1564 2 view .LVU1389
1563:src/display.c **** 	char x[50], *obp = x;
 4584              		.loc 1 1563 61 is_stmt 0 view .LVU1390
 4585 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4586              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccQmbpxO.s 			page 151


 4587              		.cfi_offset 4, -36
 4588              		.cfi_offset 5, -32
 4589              		.cfi_offset 6, -28
 4590              		.cfi_offset 7, -24
 4591              		.cfi_offset 8, -20
 4592              		.cfi_offset 9, -16
 4593              		.cfi_offset 10, -12
 4594              		.cfi_offset 11, -8
 4595              		.cfi_offset 14, -4
1580:src/display.c **** 	int mode = UState.dispmode;
 4596              		.loc 1 1580 11 view .LVU1391
 4597 0004 C84B     		ldr	r3, .L669
 4598 0006 1B68     		ldr	r3, [r3]
1563:src/display.c **** 	char x[50], *obp = x;
 4599              		.loc 1 1563 61 view .LVU1392
 4600 0008 A3B0     		sub	sp, sp, #140
 4601              		.cfi_def_cfa_offset 176
 4602              	.LVL487:
1565:src/display.c **** 	int show_exp = 0;
 4603              		.loc 1 1565 2 is_stmt 1 view .LVU1393
1566:src/display.c **** 	int j;
 4604              		.loc 1 1566 2 view .LVU1394
1567:src/display.c **** 	char mantissa[64];
 4605              		.loc 1 1567 2 view .LVU1395
1568:src/display.c **** 	int exp = 0;
 4606              		.loc 1 1568 2 view .LVU1396
1569:src/display.c **** 	char *p = mantissa;
 4607              		.loc 1 1569 2 view .LVU1397
1570:src/display.c **** 	char *r;
 4608              		.loc 1 1570 2 view .LVU1398
1571:src/display.c **** 	const char *q;
 4609              		.loc 1 1571 2 view .LVU1399
1572:src/display.c **** 	int count, i;
 4610              		.loc 1 1572 2 view .LVU1400
1573:src/display.c **** 	int extra_digits = 0;
 4611              		.loc 1 1573 2 view .LVU1401
1574:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4612              		.loc 1 1574 2 view .LVU1402
1580:src/display.c **** 	int mode = UState.dispmode;
 4613              		.loc 1 1580 2 view .LVU1403
1580:src/display.c **** 	int mode = UState.dispmode;
 4614              		.loc 1 1580 17 is_stmt 0 view .LVU1404
 4615 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1581:src/display.c **** #endif
 4616              		.loc 1 1581 19 view .LVU1405
 4617 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1563:src/display.c **** 	char x[50], *obp = x;
 4618              		.loc 1 1563 61 view .LVU1406
 4619 0012 0092     		str	r2, [sp]
 4620 0014 0C46     		mov	r4, r1
 4621 0016 0646     		mov	r6, r0
1580:src/display.c **** 	int mode = UState.dispmode;
 4622              		.loc 1 1580 17 view .LVU1407
 4623 0018 05F00F05 		and	r5, r5, #15
 4624              	.LVL488:
1581:src/display.c **** #endif
 4625              		.loc 1 1581 2 is_stmt 1 view .LVU1408
ARM GAS  /tmp/ccQmbpxO.s 			page 152


1581:src/display.c **** #endif
 4626              		.loc 1 1581 19 is_stmt 0 view .LVU1409
 4627 001c BF09     		lsrs	r7, r7, #6
 4628              	.LVL489:
1583:src/display.c **** 	int negative = 0;
 4629              		.loc 1 1583 2 is_stmt 1 view .LVU1410
1584:src/display.c **** 	int trimzeros = 0;
 4630              		.loc 1 1584 2 view .LVU1411
1585:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4631              		.loc 1 1585 2 view .LVU1412
1587:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4632              		.loc 1 1587 2 view .LVU1413
1596:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4633              		.loc 1 1596 2 view .LVU1414
 4634 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4635              	.LVL490:
1598:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4636              		.loc 1 1598 2 view .LVU1415
1598:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4637              		.loc 1 1598 5 is_stmt 0 view .LVU1416
 4638 0022 002C     		cmp	r4, #0
 4639 0024 00F08A81 		beq	.L435
 4640              	.L438:
1623:src/display.c **** 		return;
 4641              		.loc 1 1623 2 is_stmt 1 view .LVU1417
1623:src/display.c **** 		return;
 4642              		.loc 1 1623 6 is_stmt 0 view .LVU1418
 4643 0028 2146     		mov	r1, r4
 4644 002a 06F10800 		add	r0, r6, #8
 4645 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4646              	.LVL491:
1623:src/display.c **** 		return;
 4647              		.loc 1 1623 5 view .LVU1419
 4648 0032 8346     		mov	fp, r0
 4649 0034 0028     		cmp	r0, #0
 4650 0036 40F06F81 		bne	.L434
1626:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4651              		.loc 1 1626 2 is_stmt 1 view .LVU1420
1626:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4652              		.loc 1 1626 12 is_stmt 0 view .LVU1421
 4653 003a DFF8F092 		ldr	r9, .L669+4
1626:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4654              		.loc 1 1626 5 view .LVU1422
 4655 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4656 0042 012B     		cmp	r3, #1
 4657 0044 00F0AF82 		beq	.L650
1569:src/display.c **** 	char *p = mantissa;
 4658              		.loc 1 1569 6 view .LVU1423
 4659 0048 0190     		str	r0, [sp, #4]
 4660              	.LVL492:
 4661              	.L441:
1632:src/display.c **** 
 4662              		.loc 1 1632 2 is_stmt 1 view .LVU1424
 4663 004a 0DF11408 		add	r8, sp, #20
 4664              	.LVL493:
1632:src/display.c **** 
 4665              		.loc 1 1632 2 is_stmt 0 view .LVU1425
ARM GAS  /tmp/ccQmbpxO.s 			page 153


 4666 004e 4046     		mov	r0, r8
 4667 0050 3222     		movs	r2, #50
 4668 0052 0021     		movs	r1, #0
 4669 0054 FFF7FEFF 		bl	xset
 4670              	.LVL494:
1634:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4671              		.loc 1 1634 2 is_stmt 1 view .LVU1426
1634:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4672              		.loc 1 1634 6 is_stmt 0 view .LVU1427
 4673 0058 3046     		mov	r0, r6
 4674 005a FFF7FEFF 		bl	dn_eq0
 4675              	.LVL495:
1634:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4676              		.loc 1 1634 5 view .LVU1428
 4677 005e 0028     		cmp	r0, #0
 4678 0060 00F05D81 		beq	.L442
1635:src/display.c **** 			x[0] = '-';
 4679              		.loc 1 1635 3 is_stmt 1 view .LVU1429
1635:src/display.c **** 			x[0] = '-';
 4680              		.loc 1 1635 6 is_stmt 0 view .LVU1430
 4681 0064 96F90830 		ldrsb	r3, [r6, #8]
 4682 0068 002B     		cmp	r3, #0
 4683 006a C0F2C182 		blt	.L651
 4684              	.L443:
1639:src/display.c **** 	} else
 4685              		.loc 1 1639 4 is_stmt 1 view .LVU1431
1639:src/display.c **** 	} else
 4686              		.loc 1 1639 9 is_stmt 0 view .LVU1432
 4687 006e 3023     		movs	r3, #48
 4688 0070 8DF81430 		strb	r3, [sp, #20]
 4689              	.L444:
1643:src/display.c **** 		show_x(x, exp);
 4690              		.loc 1 1643 2 is_stmt 1 view .LVU1433
1643:src/display.c **** 		show_x(x, exp);
 4691              		.loc 1 1643 12 is_stmt 0 view .LVU1434
 4692 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1643:src/display.c **** 		show_x(x, exp);
 4693              		.loc 1 1643 5 view .LVU1435
 4694 0078 BAF1010F 		cmp	r10, #1
 4695 007c 00F0F082 		beq	.L652
1666:src/display.c **** 		mode = std_round_fix(z);
 4696              		.loc 1 1666 2 is_stmt 1 view .LVU1436
1666:src/display.c **** 		mode = std_round_fix(z);
 4697              		.loc 1 1666 5 is_stmt 0 view .LVU1437
 4698 0080 002F     		cmp	r7, #0
 4699 0082 00F0FD81 		beq	.L653
1670:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4700              		.loc 1 1670 19 view .LVU1438
 4701 0086 009B     		ldr	r3, [sp]
 4702 0088 1B68     		ldr	r3, [r3]
1670:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4703              		.loc 1 1670 12 view .LVU1439
 4704 008a AB42     		cmp	r3, r5
1580:src/display.c **** 	int mode = UState.dispmode;
 4705              		.loc 1 1580 6 view .LVU1440
 4706 008c AA46     		mov	r10, r5
1670:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
ARM GAS  /tmp/ccQmbpxO.s 			page 154


 4707              		.loc 1 1670 9 is_stmt 1 view .LVU1441
1672:src/display.c **** #endif
 4708              		.loc 1 1672 3 view .LVU1442
1672:src/display.c **** #endif
 4709              		.loc 1 1672 6 is_stmt 0 view .LVU1443
 4710 008e D8BF     		it	le
 4711 0090 03F1FF3A 		addle	r10, r3, #-1
1585:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4712              		.loc 1 1585 6 view .LVU1444
 4713 0094 0023     		movs	r3, #0
 4714 0096 0193     		str	r3, [sp, #4]
 4715              	.LVL496:
 4716              	.L457:
1675:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4717              		.loc 1 1675 2 is_stmt 1 view .LVU1445
 4718 0098 0DF14809 		add	r9, sp, #72
 4719              	.LVL497:
1675:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4720              		.loc 1 1675 2 is_stmt 0 view .LVU1446
 4721 009c 3021     		movs	r1, #48
 4722 009e 4846     		mov	r0, r9
 4723 00a0 3F22     		movs	r2, #63
 4724 00a2 FFF7FEFF 		bl	xset
 4725              	.LVL498:
1676:src/display.c **** 
 4726              		.loc 1 1676 2 is_stmt 1 view .LVU1447
1676:src/display.c **** 
 4727              		.loc 1 1676 31 is_stmt 0 view .LVU1448
 4728 00a6 0023     		movs	r3, #0
1678:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4729              		.loc 1 1678 6 view .LVU1449
 4730 00a8 4521     		movs	r1, #69
 4731 00aa 4046     		mov	r0, r8
1676:src/display.c **** 
 4732              		.loc 1 1676 31 view .LVU1450
 4733 00ac 8DF88730 		strb	r3, [sp, #135]
1678:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4734              		.loc 1 1678 2 is_stmt 1 view .LVU1451
1678:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4735              		.loc 1 1678 6 is_stmt 0 view .LVU1452
 4736 00b0 FFF7FEFF 		bl	find_char
 4737              	.LVL499:
1687:src/display.c **** 	else exp = s_to_i(q+1);
 4738              		.loc 1 1687 2 is_stmt 1 view .LVU1453
1687:src/display.c **** 	else exp = s_to_i(q+1);
 4739              		.loc 1 1687 5 is_stmt 0 view .LVU1454
 4740 00b4 0028     		cmp	r0, #0
 4741 00b6 00F05C81 		beq	.L558
1688:src/display.c **** #endif
 4742              		.loc 1 1688 7 is_stmt 1 view .LVU1455
1688:src/display.c **** #endif
 4743              		.loc 1 1688 13 is_stmt 0 view .LVU1456
 4744 00ba 0130     		adds	r0, r0, #1
 4745              	.LVL500:
1688:src/display.c **** #endif
 4746              		.loc 1 1688 13 view .LVU1457
 4747 00bc FFF7FEFF 		bl	s_to_i
ARM GAS  /tmp/ccQmbpxO.s 			page 155


 4748              	.LVL501:
1688:src/display.c **** #endif
 4749              		.loc 1 1688 13 view .LVU1458
 4750 00c0 0546     		mov	r5, r0
 4751              	.LVL502:
 4752              	.L458:
1692:src/display.c **** 	if (!res) {
 4753              		.loc 1 1692 2 is_stmt 1 view .LVU1459
1692:src/display.c **** 	if (!res) {
 4754              		.loc 1 1692 12 view .LVU1460
1692:src/display.c **** 	if (!res) {
 4755              		.loc 1 1692 2 is_stmt 0 view .LVU1461
 4756 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4757 00c6 202B     		cmp	r3, #32
1692:src/display.c **** 	if (!res) {
 4758              		.loc 1 1692 8 view .LVU1462
 4759 00c8 4646     		mov	r6, r8
 4760              	.LVL503:
1692:src/display.c **** 	if (!res) {
 4761              		.loc 1 1692 2 view .LVU1463
 4762 00ca 03D1     		bne	.L459
 4763              	.LVL504:
 4764              	.L460:
1692:src/display.c **** 	if (!res) {
 4765              		.loc 1 1692 27 is_stmt 1 discriminator 3 view .LVU1464
1692:src/display.c **** 	if (!res) {
 4766              		.loc 1 1692 23 discriminator 3 view .LVU1465
1692:src/display.c **** 	if (!res) {
 4767              		.loc 1 1692 12 discriminator 3 view .LVU1466
1692:src/display.c **** 	if (!res) {
 4768              		.loc 1 1692 2 is_stmt 0 discriminator 3 view .LVU1467
 4769 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4770              	.LVL505:
1692:src/display.c **** 	if (!res) {
 4771              		.loc 1 1692 2 discriminator 3 view .LVU1468
 4772 00d0 202B     		cmp	r3, #32
 4773 00d2 FBD0     		beq	.L460
 4774              	.LVL506:
 4775              	.L459:
1693:src/display.c **** 		CLR_EXP_SIGN;
 4776              		.loc 1 1693 2 is_stmt 1 view .LVU1469
1693:src/display.c **** 		CLR_EXP_SIGN;
 4777              		.loc 1 1693 5 is_stmt 0 view .LVU1470
 4778 00d4 002C     		cmp	r4, #0
 4779 00d6 00F09682 		beq	.L654
 4780              	.L461:
1697:src/display.c **** 		negative = 1;
 4781              		.loc 1 1697 2 is_stmt 1 view .LVU1471
1697:src/display.c **** 		negative = 1;
 4782              		.loc 1 1697 6 is_stmt 0 view .LVU1472
 4783 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1697:src/display.c **** 		negative = 1;
 4784              		.loc 1 1697 5 view .LVU1473
 4785 00dc 2D2B     		cmp	r3, #45
 4786 00de 00F0CA81 		beq	.L655
1700:src/display.c **** 		q++;
 4787              		.loc 1 1700 9 is_stmt 1 view .LVU1474
ARM GAS  /tmp/ccQmbpxO.s 			page 156


1700:src/display.c **** 		q++;
 4788              		.loc 1 1700 12 is_stmt 0 view .LVU1475
 4789 00e2 2B2B     		cmp	r3, #43
 4790 00e4 00F06E82 		beq	.L656
1584:src/display.c **** 	int trimzeros = 0;
 4791              		.loc 1 1584 6 view .LVU1476
 4792 00e8 4FF0000E 		mov	lr, #0
 4793              	.LVL507:
 4794              	.L463:
1702:src/display.c **** 	if (*q == '.') {
 4795              		.loc 1 1702 9 is_stmt 1 discriminator 1 view .LVU1477
1702:src/display.c **** 	if (*q == '.') {
 4796              		.loc 1 1702 2 is_stmt 0 discriminator 1 view .LVU1478
 4797 00ec 302B     		cmp	r3, #48
 4798 00ee 03D1     		bne	.L465
 4799              	.LVL508:
 4800              	.L464:
1702:src/display.c **** 	if (*q == '.') {
 4801              		.loc 1 1702 24 is_stmt 1 discriminator 2 view .LVU1479
1702:src/display.c **** 	if (*q == '.') {
 4802              		.loc 1 1702 20 discriminator 2 view .LVU1480
1702:src/display.c **** 	if (*q == '.') {
 4803              		.loc 1 1702 9 discriminator 2 view .LVU1481
 4804 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4805              	.LVL509:
1702:src/display.c **** 	if (*q == '.') {
 4806              		.loc 1 1702 2 is_stmt 0 discriminator 2 view .LVU1482
 4807 00f4 302B     		cmp	r3, #48
 4808 00f6 FBD0     		beq	.L464
 4809              	.LVL510:
 4810              	.L465:
1703:src/display.c **** 		do
 4811              		.loc 1 1703 2 is_stmt 1 view .LVU1483
1703:src/display.c **** 		do
 4812              		.loc 1 1703 5 is_stmt 0 view .LVU1484
 4813 00f8 2E2B     		cmp	r3, #46
 4814 00fa 00F0A681 		beq	.L657
1710:src/display.c **** 			*p++ = *q++;
 4815              		.loc 1 1710 3 is_stmt 1 view .LVU1485
1710:src/display.c **** 			*p++ = *q++;
 4816              		.loc 1 1710 6 is_stmt 0 view .LVU1486
 4817 00fe A3F13002 		sub	r2, r3, #48
 4818 0102 092A     		cmp	r2, #9
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4819              		.loc 1 1711 4 is_stmt 1 view .LVU1487
 4820              	.LVL511:
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4821              		.loc 1 1711 13 is_stmt 0 view .LVU1488
 4822 0104 9CBF     		itt	ls
 4823 0106 0136     		addls	r6, r6, #1
 4824              	.LVL512:
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4825              		.loc 1 1711 9 view .LVU1489
 4826 0108 8DF84830 		strbls	r3, [sp, #72]
1712:src/display.c **** 			*p++ = *q++;
 4827              		.loc 1 1712 10 view .LVU1490
 4828 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
ARM GAS  /tmp/ccQmbpxO.s 			page 157


1712:src/display.c **** 			*p++ = *q++;
 4829              		.loc 1 1712 9 view .LVU1491
 4830 010e A2F13003 		sub	r3, r2, #48
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4831              		.loc 1 1711 6 view .LVU1492
 4832 0112 94BF     		ite	ls
 4833 0114 0DF14901 		addls	r1, sp, #73
1570:src/display.c **** 	char *r;
 4834              		.loc 1 1570 8 view .LVU1493
 4835 0118 4946     		movhi	r1, r9
 4836              	.LVL513:
1712:src/display.c **** 			*p++ = *q++;
 4837              		.loc 1 1712 9 is_stmt 1 view .LVU1494
 4838 011a 092B     		cmp	r3, #9
 4839 011c 0CD8     		bhi	.L471
 4840 011e A81B     		subs	r0, r5, r6
 4841 0120 731C     		adds	r3, r6, #1
 4842              	.L472:
 4843              	.LVL514:
1713:src/display.c **** 			exp++;
 4844              		.loc 1 1713 4 view .LVU1495
1713:src/display.c **** 			exp++;
 4845              		.loc 1 1713 9 is_stmt 0 view .LVU1496
 4846 0122 01F8012B 		strb	r2, [r1], #1
 4847              	.LVL515:
1713:src/display.c **** 			exp++;
 4848              		.loc 1 1713 13 view .LVU1497
 4849 0126 1E46     		mov	r6, r3
 4850              	.LVL516:
1714:src/display.c **** 		}
 4851              		.loc 1 1714 4 is_stmt 1 view .LVU1498
 4852 0128 C518     		adds	r5, r0, r3
 4853              	.LVL517:
1712:src/display.c **** 			*p++ = *q++;
 4854              		.loc 1 1712 9 view .LVU1499
1712:src/display.c **** 			*p++ = *q++;
 4855              		.loc 1 1712 10 is_stmt 0 view .LVU1500
 4856 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4857              	.LVL518:
1712:src/display.c **** 			*p++ = *q++;
 4858              		.loc 1 1712 9 view .LVU1501
 4859 012e A2F1300C 		sub	ip, r2, #48
 4860 0132 BCF1090F 		cmp	ip, #9
 4861 0136 F4D9     		bls	.L472
 4862              	.LVL519:
 4863              	.L471:
1716:src/display.c **** 			q++;
 4864              		.loc 1 1716 3 is_stmt 1 view .LVU1502
1716:src/display.c **** 			q++;
 4865              		.loc 1 1716 6 is_stmt 0 view .LVU1503
 4866 0138 2E2A     		cmp	r2, #46
 4867 013a 00F04882 		beq	.L658
 4868              	.LVL520:
 4869              	.L468:
1723:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4870              		.loc 1 1723 2 is_stmt 1 view .LVU1504
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
ARM GAS  /tmp/ccQmbpxO.s 			page 158


 4871              		.loc 1 1724 11 is_stmt 0 view .LVU1505
 4872 013e 009B     		ldr	r3, [sp]
1723:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4873              		.loc 1 1723 5 view .LVU1506
 4874 0140 012F     		cmp	r7, #1
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4875              		.loc 1 1724 11 view .LVU1507
 4876 0142 1E68     		ldr	r6, [r3]
1723:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4877              		.loc 1 1723 5 view .LVU1508
 4878 0144 00F06F81 		beq	.L659
 4879 0148 0022     		movs	r2, #0
 4880              	.LVL521:
 4881              	.L474:
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4882              		.loc 1 1737 2 is_stmt 1 view .LVU1509
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4883              		.loc 1 1737 20 is_stmt 0 view .LVU1510
 4884 014a 5244     		add	r2, r2, r10
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4885              		.loc 1 1737 35 view .LVU1511
 4886 014c 501C     		adds	r0, r2, #1
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4887              		.loc 1 1737 4 view .LVU1512
 4888 014e 09EB0003 		add	r3, r9, r0
 4889              	.LVL522:
1738:src/display.c **** 		*p = '0';
 4890              		.loc 1 1738 2 is_stmt 1 view .LVU1513
1738:src/display.c **** 		*p = '0';
 4891              		.loc 1 1738 6 is_stmt 0 view .LVU1514
 4892 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
1738:src/display.c **** 		*p = '0';
 4893              		.loc 1 1738 5 view .LVU1515
 4894 0156 3429     		cmp	r1, #52
 4895 0158 21D9     		bls	.L478
1739:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4896              		.loc 1 1739 3 is_stmt 1 view .LVU1516
1739:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4897              		.loc 1 1739 6 is_stmt 0 view .LVU1517
 4898 015a 3021     		movs	r1, #48
 4899 015c 09F80010 		strb	r1, [r9, r0]
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4900              		.loc 1 1740 3 is_stmt 1 view .LVU1518
 4901              	.LVL523:
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4902              		.loc 1 1740 22 view .LVU1519
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4903              		.loc 1 1740 3 is_stmt 0 view .LVU1520
 4904 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 4905 0164 3929     		cmp	r1, #57
 4906 0166 40F0A683 		bne	.L479
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4907              		.loc 1 1740 10 view .LVU1521
 4908 016a 4946     		mov	r1, r9
 4909              	.LVL524:
 4910              	.L480:
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
ARM GAS  /tmp/ccQmbpxO.s 			page 159


 4911              		.loc 1 1740 37 is_stmt 1 discriminator 3 view .LVU1522
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4912              		.loc 1 1740 33 discriminator 3 view .LVU1523
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4913              		.loc 1 1740 22 discriminator 3 view .LVU1524
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4914              		.loc 1 1740 3 is_stmt 0 discriminator 3 view .LVU1525
 4915 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 4916              	.LVL525:
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4917              		.loc 1 1740 3 discriminator 3 view .LVU1526
 4918 0170 BCF1390F 		cmp	ip, #57
 4919 0174 FAD0     		beq	.L480
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4920              		.loc 1 1741 3 is_stmt 1 view .LVU1527
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4921              		.loc 1 1741 6 is_stmt 0 view .LVU1528
 4922 0176 8B42     		cmp	r3, r1
 4923 0178 00F0FD80 		beq	.L660
 4924              	.LVL526:
 4925              	.L550:
1750:src/display.c **** 				*p = '0';
 4926              		.loc 1 1750 10 is_stmt 1 view .LVU1529
1750:src/display.c **** 				*p = '0';
 4927              		.loc 1 1750 11 is_stmt 0 view .LVU1530
 4928 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
1750:src/display.c **** 				*p = '0';
 4929              		.loc 1 1750 10 view .LVU1531
 4930 0180 3929     		cmp	r1, #57
 4931 0182 4A44     		add	r2, r2, r9
 4932              	.LVL527:
1750:src/display.c **** 				*p = '0';
 4933              		.loc 1 1750 10 view .LVU1532
 4934 0184 07D1     		bne	.L483
1751:src/display.c **** 			(*p)++;
 4935              		.loc 1 1751 8 view .LVU1533
 4936 0186 4FF0300C 		mov	ip, #48
 4937              	.L482:
1751:src/display.c **** 			(*p)++;
 4938              		.loc 1 1751 5 is_stmt 1 view .LVU1534
1751:src/display.c **** 			(*p)++;
 4939              		.loc 1 1751 8 is_stmt 0 view .LVU1535
 4940 018a 82F800C0 		strb	ip, [r2]
1750:src/display.c **** 				*p = '0';
 4941              		.loc 1 1750 10 is_stmt 1 view .LVU1536
 4942              	.LVL528:
1750:src/display.c **** 				*p = '0';
 4943              		.loc 1 1750 11 is_stmt 0 view .LVU1537
 4944 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 4945              	.LVL529:
1750:src/display.c **** 				*p = '0';
 4946              		.loc 1 1750 10 view .LVU1538
 4947 0192 3929     		cmp	r1, #57
 4948 0194 F9D0     		beq	.L482
 4949              	.L483:
1752:src/display.c **** 		}
 4950              		.loc 1 1752 4 is_stmt 1 view .LVU1539
ARM GAS  /tmp/ccQmbpxO.s 			page 160


1752:src/display.c **** 		}
 4951              		.loc 1 1752 8 is_stmt 0 view .LVU1540
 4952 0196 0131     		adds	r1, r1, #1
 4953 0198 1170     		strb	r1, [r2]
 4954              	.LVL530:
 4955              	.L647:
1752:src/display.c **** 		}
 4956              		.loc 1 1752 8 view .LVU1541
 4957 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 4958              	.L478:
1757:src/display.c **** 
 4959              		.loc 1 1757 2 is_stmt 1 view .LVU1542
 4960              	.LVL531:
1757:src/display.c **** 
 4961              		.loc 1 1757 45 view .LVU1543
1757:src/display.c **** 
 4962              		.loc 1 1757 2 is_stmt 0 view .LVU1544
 4963 019e 29B1     		cbz	r1, .L489
 4964              	.LVL532:
 4965              	.L549:
1757:src/display.c **** 
 4966              		.loc 1 1757 62 view .LVU1545
 4967 01a0 3021     		movs	r1, #48
 4968              	.L490:
1757:src/display.c **** 
 4969              		.loc 1 1757 68 is_stmt 1 discriminator 3 view .LVU1546
1757:src/display.c **** 
 4970              		.loc 1 1757 57 discriminator 3 view .LVU1547
 4971              	.LVL533:
1757:src/display.c **** 
 4972              		.loc 1 1757 62 is_stmt 0 discriminator 3 view .LVU1548
 4973 01a2 03F8011B 		strb	r1, [r3], #1
 4974              	.LVL534:
1757:src/display.c **** 
 4975              		.loc 1 1757 45 is_stmt 1 discriminator 3 view .LVU1549
1757:src/display.c **** 
 4976              		.loc 1 1757 2 is_stmt 0 discriminator 3 view .LVU1550
 4977 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4978 01a8 002A     		cmp	r2, #0
 4979 01aa FAD1     		bne	.L490
 4980              	.L489:
1759:src/display.c **** 	switch (mode) {
 4981              		.loc 1 1759 2 is_stmt 1 view .LVU1551
 4982              	.LVL535:
1760:src/display.c **** 	default:
 4983              		.loc 1 1760 2 view .LVU1552
 4984 01ac 022F     		cmp	r7, #2
 4985 01ae 5AD0     		beq	.L572
 4986 01b0 032F     		cmp	r7, #3
 4987 01b2 00F00481 		beq	.L492
 4988 01b6 012F     		cmp	r7, #1
 4989 01b8 00F0B681 		beq	.L493
1763:src/display.c **** 		if (count != *display_digits)
 4990              		.loc 1 1763 3 view .LVU1553
 4991              	.LVL536:
1763:src/display.c **** 		if (count != *display_digits)
 4992              		.loc 1 1763 33 view .LVU1554
ARM GAS  /tmp/ccQmbpxO.s 			page 161


1763:src/display.c **** 		if (count != *display_digits)
 4993              		.loc 1 1763 41 is_stmt 0 view .LVU1555
 4994 01bc 22AB     		add	r3, sp, #136
 4995 01be 3344     		add	r3, r3, r6
1763:src/display.c **** 		if (count != *display_digits)
 4996              		.loc 1 1763 3 view .LVU1556
 4997 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 4998 01c4 302B     		cmp	r3, #48
 4999 01c6 40F06783 		bne	.L566
 5000 01ca 711E     		subs	r1, r6, #1
 5001 01cc 4944     		add	r1, r1, r9
1763:src/display.c **** 		if (count != *display_digits)
 5002              		.loc 1 1763 14 view .LVU1557
 5003 01ce 3346     		mov	r3, r6
 5004              	.LVL537:
 5005              	.L495:
1763:src/display.c **** 		if (count != *display_digits)
 5006              		.loc 1 1763 65 is_stmt 1 discriminator 3 view .LVU1558
1763:src/display.c **** 		if (count != *display_digits)
 5007              		.loc 1 1763 57 discriminator 3 view .LVU1559
1763:src/display.c **** 		if (count != *display_digits)
 5008              		.loc 1 1763 41 is_stmt 0 discriminator 3 view .LVU1560
 5009 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
1763:src/display.c **** 		if (count != *display_digits)
 5010              		.loc 1 1763 3 discriminator 3 view .LVU1561
 5011 01d4 3028     		cmp	r0, #48
 5012 01d6 1A46     		mov	r2, r3
1763:src/display.c **** 		if (count != *display_digits)
 5013              		.loc 1 1763 62 discriminator 3 view .LVU1562
 5014 01d8 03F1FF33 		add	r3, r3, #-1
 5015              	.LVL538:
1763:src/display.c **** 		if (count != *display_digits)
 5016              		.loc 1 1763 33 is_stmt 1 discriminator 3 view .LVU1563
1763:src/display.c **** 		if (count != *display_digits)
 5017              		.loc 1 1763 3 is_stmt 0 discriminator 3 view .LVU1564
 5018 01dc F8D0     		beq	.L495
1764:src/display.c **** 			count++;
 5019              		.loc 1 1764 3 is_stmt 1 view .LVU1565
1764:src/display.c **** 			count++;
 5020              		.loc 1 1764 6 is_stmt 0 view .LVU1566
 5021 01de 9E42     		cmp	r6, r3
 5022 01e0 08BF     		it	eq
 5023 01e2 1A46     		moveq	r2, r3
 5024              	.LVL539:
 5025              	.L494:
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5026              		.loc 1 1767 3 is_stmt 1 view .LVU1567
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5027              		.loc 1 1767 6 is_stmt 0 view .LVU1568
 5028 01e4 B542     		cmp	r5, r6
 5029 01e6 80F20381 		bge	.L496
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5030              		.loc 1 1767 46 discriminator 1 view .LVU1569
 5031 01ea 931B     		subs	r3, r2, r6
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5032              		.loc 1 1767 30 discriminator 1 view .LVU1570
 5033 01ec AB42     		cmp	r3, r5
ARM GAS  /tmp/ccQmbpxO.s 			page 162


 5034 01ee 00F3FF80 		bgt	.L496
1792:src/display.c **** 			for(i=0; i<=exp; i++) {
 5035              		.loc 1 1792 10 is_stmt 1 view .LVU1571
1792:src/display.c **** 			for(i=0; i<=exp; i++) {
 5036              		.loc 1 1792 13 is_stmt 0 view .LVU1572
 5037 01f2 002D     		cmp	r5, #0
 5038 01f4 C0F27583 		blt	.L504
 5039 01f8 6B1C     		adds	r3, r5, #1
1794:src/display.c **** 					*obp++ = ',';
 5040              		.loc 1 1794 28 view .LVU1573
 5041 01fa DFF834A1 		ldr	r10, .L669+8
 5042 01fe 0293     		str	r3, [sp, #8]
 5043 0200 09EB0300 		add	r0, r9, r3
1759:src/display.c **** 	switch (mode) {
 5044              		.loc 1 1759 4 view .LVU1574
 5045 0204 CC46     		mov	ip, r9
1564:src/display.c **** 	int odig = 0;
 5046              		.loc 1 1564 15 view .LVU1575
 5047 0206 4146     		mov	r1, r8
 5048 0208 0192     		str	r2, [sp, #4]
 5049              	.LVL540:
1564:src/display.c **** 	int odig = 0;
 5050              		.loc 1 1564 15 view .LVU1576
 5051 020a 05E0     		b	.L505
 5052              	.LVL541:
 5053              	.L508:
1795:src/display.c **** 				*obp++ = *p++;
 5054              		.loc 1 1795 6 is_stmt 1 view .LVU1577
1794:src/display.c **** 					*obp++ = ',';
 5055              		.loc 1 1794 15 is_stmt 0 view .LVU1578
 5056 020c 022F     		cmp	r7, #2
1795:src/display.c **** 				*obp++ = *p++;
 5057              		.loc 1 1795 13 view .LVU1579
 5058 020e 05BF     		ittet	eq
 5059 0210 2C23     		moveq	r3, #44
 5060 0212 4B70     		strbeq	r3, [r1, #1]
1796:src/display.c **** 				odig++;
 5061              		.loc 1 1796 9 view .LVU1580
 5062 0214 0131     		addne	r1, r1, #1
 5063              	.LVL542:
1795:src/display.c **** 				*obp++ = *p++;
 5064              		.loc 1 1795 10 view .LVU1581
 5065 0216 0231     		addeq	r1, r1, #2
 5066              	.LVL543:
 5067              	.L505:
1796:src/display.c **** 				odig++;
 5068              		.loc 1 1796 5 is_stmt 1 discriminator 2 view .LVU1582
1796:src/display.c **** 				odig++;
 5069              		.loc 1 1796 12 is_stmt 0 discriminator 2 view .LVU1583
 5070 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5071              	.LVL544:
1794:src/display.c **** 					*obp++ = ',';
 5072              		.loc 1 1794 5 is_stmt 1 discriminator 2 view .LVU1584
1796:src/display.c **** 				odig++;
 5073              		.loc 1 1796 12 is_stmt 0 discriminator 2 view .LVU1585
 5074 021c 0B70     		strb	r3, [r1]
1797:src/display.c **** 			}
ARM GAS  /tmp/ccQmbpxO.s 			page 163


 5075              		.loc 1 1797 5 is_stmt 1 discriminator 2 view .LVU1586
 5076              	.LVL545:
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5077              		.loc 1 1793 21 discriminator 2 view .LVU1587
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5078              		.loc 1 1793 13 discriminator 2 view .LVU1588
1794:src/display.c **** 					*obp++ = ',';
 5079              		.loc 1 1794 28 is_stmt 0 discriminator 2 view .LVU1589
 5080 021e A9EB0C03 		sub	r3, r9, ip
 5081 0222 2B44     		add	r3, r3, r5
 5082 0224 8AFB0327 		smull	r2, r7, r10, r3
 5083 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5084 022c 07EB4707 		add	r7, r7, r7, lsl #1
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5085              		.loc 1 1793 4 discriminator 2 view .LVU1590
 5086 0230 6045     		cmp	r0, ip
1794:src/display.c **** 					*obp++ = ',';
 5087              		.loc 1 1794 28 discriminator 2 view .LVU1591
 5088 0232 A3EB0707 		sub	r7, r3, r7
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5089              		.loc 1 1793 4 discriminator 2 view .LVU1592
 5090 0236 E9D1     		bne	.L508
 5091 0238 019A     		ldr	r2, [sp, #4]
 5092 023a 029F     		ldr	r7, [sp, #8]
1799:src/display.c **** 			if (count > (exp + 1)) {
 5093              		.loc 1 1799 4 is_stmt 1 view .LVU1593
1799:src/display.c **** 			if (count > (exp + 1)) {
 5094              		.loc 1 1799 11 is_stmt 0 view .LVU1594
 5095 023c 2E23     		movs	r3, #46
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5096              		.loc 1 1800 7 view .LVU1595
 5097 023e BA42     		cmp	r2, r7
1799:src/display.c **** 			if (count > (exp + 1)) {
 5098              		.loc 1 1799 11 view .LVU1596
 5099 0240 4B70     		strb	r3, [r1, #1]
1799:src/display.c **** 			if (count > (exp + 1)) {
 5100              		.loc 1 1799 8 view .LVU1597
 5101 0242 01F10203 		add	r3, r1, #2
 5102              	.LVL546:
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5103              		.loc 1 1800 4 is_stmt 1 view .LVU1598
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5104              		.loc 1 1800 7 is_stmt 0 view .LVU1599
 5105 0246 2BDD     		ble	.L502
 5106 0248 A2EB050C 		sub	ip, r2, r5
 5107              	.LVL547:
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5108              		.loc 1 1800 7 view .LVU1600
 5109 024c 8C44     		add	ip, ip, r1
 5110 024e 0131     		adds	r1, r1, #1
 5111              	.LVL548:
 5112              	.L509:
1802:src/display.c **** 					odig++;
 5113              		.loc 1 1802 6 is_stmt 1 discriminator 3 view .LVU1601
1802:src/display.c **** 					odig++;
 5114              		.loc 1 1802 13 is_stmt 0 discriminator 3 view .LVU1602
 5115 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
ARM GAS  /tmp/ccQmbpxO.s 			page 164


 5116              	.LVL549:
1802:src/display.c **** 					odig++;
 5117              		.loc 1 1802 13 discriminator 3 view .LVU1603
 5118 0254 01F8017F 		strb	r7, [r1, #1]!
1803:src/display.c **** 				}
 5119              		.loc 1 1803 6 is_stmt 1 discriminator 3 view .LVU1604
1801:src/display.c **** 					*obp++ = *p++;
 5120              		.loc 1 1801 28 discriminator 3 view .LVU1605
1801:src/display.c **** 					*obp++ = *p++;
 5121              		.loc 1 1801 19 discriminator 3 view .LVU1606
1801:src/display.c **** 					*obp++ = *p++;
 5122              		.loc 1 1801 5 is_stmt 0 discriminator 3 view .LVU1607
 5123 0258 8C45     		cmp	ip, r1
 5124 025a F9D1     		bne	.L509
 5125 025c E943     		mvns	r1, r5
 5126 025e 1144     		add	r1, r1, r2
 5127 0260 0B44     		add	r3, r3, r1
 5128              	.LVL550:
1803:src/display.c **** 				}
 5129              		.loc 1 1803 10 view .LVU1608
 5130 0262 1746     		mov	r7, r2
 5131 0264 1CE0     		b	.L502
 5132              	.LVL551:
 5133              	.L572:
1859:src/display.c **** 		case -1:
 5134              		.loc 1 1859 15 view .LVU1609
 5135 0266 0127     		movs	r7, #1
 5136              	.LVL552:
 5137              	.L648:
1859:src/display.c **** 		case -1:
 5138              		.loc 1 1859 15 view .LVU1610
 5139 0268 4146     		mov	r1, r8
 5140              	.LVL553:
 5141              	.L491:
1873:src/display.c **** 		};
 5142              		.loc 1 1873 4 is_stmt 1 view .LVU1611
1874:src/display.c **** 	// Falling through
 5143              		.loc 1 1874 4 view .LVU1612
1878:src/display.c **** 		odig++;
 5144              		.loc 1 1878 3 view .LVU1613
1878:src/display.c **** 		odig++;
 5145              		.loc 1 1878 14 is_stmt 0 view .LVU1614
 5146 026a 4A46     		mov	r2, r9
 5147              	.LVL554:
1878:src/display.c **** 		odig++;
 5148              		.loc 1 1878 10 view .LVU1615
 5149 026c 0B46     		mov	r3, r1
 5150 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5151              	.LVL555:
1878:src/display.c **** 		odig++;
 5152              		.loc 1 1878 10 view .LVU1616
 5153 0272 03F8020B 		strb	r0, [r3], #2
1879:src/display.c **** 		*obp++ = '.';
 5154              		.loc 1 1879 3 is_stmt 1 view .LVU1617
1880:src/display.c **** 		dd--;
 5155              		.loc 1 1880 3 view .LVU1618
 5156              	.LVL556:
ARM GAS  /tmp/ccQmbpxO.s 			page 165


1882:src/display.c **** 			*obp++ = *p++;
 5157              		.loc 1 1882 9 is_stmt 0 view .LVU1619
 5158 0276 BAF1000F 		cmp	r10, #0
1880:src/display.c **** 		dd--;
 5159              		.loc 1 1880 10 view .LVU1620
 5160 027a 4FF02E00 		mov	r0, #46
 5161 027e 4870     		strb	r0, [r1, #1]
1881:src/display.c **** 		while (dd-- >= 0) {
 5162              		.loc 1 1881 3 is_stmt 1 view .LVU1621
1882:src/display.c **** 			*obp++ = *p++;
 5163              		.loc 1 1882 3 view .LVU1622
1882:src/display.c **** 			*obp++ = *p++;
 5164              		.loc 1 1882 9 view .LVU1623
1882:src/display.c **** 			*obp++ = *p++;
 5165              		.loc 1 1882 9 is_stmt 0 view .LVU1624
 5166 0280 40F30F83 		ble	.L569
1882:src/display.c **** 			*obp++ = *p++;
 5167              		.loc 1 1882 9 view .LVU1625
 5168 0284 0AF10100 		add	r0, r10, #1
 5169 0288 0131     		adds	r1, r1, #1
 5170 028a 8144     		add	r9, r9, r0
 5171              	.LVL557:
 5172              	.L532:
1883:src/display.c **** 			odig++;
 5173              		.loc 1 1883 4 is_stmt 1 view .LVU1626
1883:src/display.c **** 			odig++;
 5174              		.loc 1 1883 11 is_stmt 0 view .LVU1627
 5175 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5176              	.LVL558:
1883:src/display.c **** 			odig++;
 5177              		.loc 1 1883 11 view .LVU1628
 5178 0290 01F8010F 		strb	r0, [r1, #1]!
1884:src/display.c **** 		}
 5179              		.loc 1 1884 4 is_stmt 1 view .LVU1629
1882:src/display.c **** 			*obp++ = *p++;
 5180              		.loc 1 1882 9 view .LVU1630
1882:src/display.c **** 			*obp++ = *p++;
 5181              		.loc 1 1882 9 is_stmt 0 view .LVU1631
 5182 0294 4A45     		cmp	r2, r9
 5183 0296 F9D1     		bne	.L532
 5184 0298 5344     		add	r3, r3, r10
 5185 029a 5744     		add	r7, r7, r10
1886:src/display.c **** 	}
 5186              		.loc 1 1886 12 view .LVU1632
 5187 029c 4FF0010B 		mov	fp, #1
 5188              	.LVL559:
 5189              	.L502:
1895:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
 5190              		.loc 1 1895 2 is_stmt 1 view .LVU1633
1901:src/display.c **** 	if (odig > *display_digits)
 5191              		.loc 1 1901 2 view .LVU1634
 5192 02a0 B742     		cmp	r7, r6
 5193 02a2 A8BF     		it	ge
 5194 02a4 3746     		movge	r7, r6
 5195              	.LVL560:
1904:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5196              		.loc 1 1904 23 is_stmt 0 view .LVU1635
ARM GAS  /tmp/ccQmbpxO.s 			page 166


 5197 02a6 F61B     		subs	r6, r6, r7
1901:src/display.c **** 	if (odig > *display_digits)
 5198              		.loc 1 1901 7 view .LVU1636
 5199 02a8 0022     		movs	r2, #0
1904:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5200              		.loc 1 1904 4 view .LVU1637
 5201 02aa 06EBC606 		add	r6, r6, r6, lsl #3
1901:src/display.c **** 	if (odig > *display_digits)
 5202              		.loc 1 1901 7 view .LVU1638
 5203 02ae 1A70     		strb	r2, [r3]
1902:src/display.c **** 		odig = *display_digits;
 5204              		.loc 1 1902 2 is_stmt 1 view .LVU1639
 5205              	.LVL561:
1904:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5206              		.loc 1 1904 2 view .LVU1640
1905:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5207              		.loc 1 1905 2 view .LVU1641
1907:src/display.c **** 		if (res) *res++ = '-';
 5208              		.loc 1 1907 2 view .LVU1642
1907:src/display.c **** 		if (res) *res++ = '-';
 5209              		.loc 1 1907 5 is_stmt 0 view .LVU1643
 5210 02b0 BEF1000F 		cmp	lr, #0
 5211 02b4 05D0     		beq	.L533
1908:src/display.c **** 		else {
 5212              		.loc 1 1908 3 is_stmt 1 view .LVU1644
1908:src/display.c **** 		else {
 5213              		.loc 1 1908 6 is_stmt 0 view .LVU1645
 5214 02b6 002C     		cmp	r4, #0
 5215 02b8 00F0B281 		beq	.L534
1908:src/display.c **** 		else {
 5216              		.loc 1 1908 12 is_stmt 1 discriminator 1 view .LVU1646
 5217              	.LVL562:
1908:src/display.c **** 		else {
 5218              		.loc 1 1908 19 is_stmt 0 discriminator 1 view .LVU1647
 5219 02bc 2D22     		movs	r2, #45
 5220 02be 04F8012B 		strb	r2, [r4], #1
 5221              	.LVL563:
 5222              	.L533:
1916:src/display.c **** 		if (c == '.') {
 5223              		.loc 1 1916 12 is_stmt 1 discriminator 1 view .LVU1648
1916:src/display.c **** 		if (c == '.') {
 5224              		.loc 1 1916 18 is_stmt 0 discriminator 1 view .LVU1649
 5225 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5226              	.LVL564:
1916:src/display.c **** 		if (c == '.') {
 5227              		.loc 1 1916 2 discriminator 1 view .LVU1650
 5228 02c6 E2B1     		cbz	r2, .L535
1916:src/display.c **** 		if (c == '.') {
 5229              		.loc 1 1916 31 view .LVU1651
 5230 02c8 6B2E     		cmp	r6, #107
 5231 02ca 1ADC     		bgt	.L535
 5232              	.LVL565:
 5233              	.L536:
 5234              	.LBB361:
 5235              	.LBB362:
 359:src/display.c **** 	} else {
 5236              		.loc 1 359 15 view .LVU1652
ARM GAS  /tmp/ccQmbpxO.s 			page 167


 5237 02cc 3946     		mov	r1, r7
 5238              	.LBE362:
 5239              	.LBE361:
1920:src/display.c **** 		} else {
 5240              		.loc 1 1920 10 view .LVU1653
 5241 02ce DFF864A0 		ldr	r10, .L669+12
1918:src/display.c **** 		} else if (c == ',') {
 5242              		.loc 1 1918 10 view .LVU1654
 5243 02d2 DFF86490 		ldr	r9, .L669+16
 5244              	.LBB366:
 5245              	.LBB363:
 359:src/display.c **** 	} else {
 5246              		.loc 1 359 15 view .LVU1655
 5247 02d6 1F46     		mov	r7, r3
 5248              	.LVL566:
 359:src/display.c **** 	} else {
 5249              		.loc 1 359 15 view .LVU1656
 5250 02d8 0B46     		mov	r3, r1
 5251              	.LVL567:
 5252              	.L545:
 359:src/display.c **** 	} else {
 5253              		.loc 1 359 15 view .LVU1657
 5254              	.LBE363:
 5255              	.LBE366:
1917:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5256              		.loc 1 1917 3 is_stmt 1 view .LVU1658
1917:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5257              		.loc 1 1917 6 is_stmt 0 view .LVU1659
 5258 02da 2E2A     		cmp	r2, #46
 5259 02dc 00F0DB80 		beq	.L661
1919:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5260              		.loc 1 1919 10 is_stmt 1 view .LVU1660
1919:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5261              		.loc 1 1919 13 is_stmt 0 view .LVU1661
 5262 02e0 2C2A     		cmp	r2, #44
 5263 02e2 00F0E880 		beq	.L662
1922:src/display.c **** 			j += SEGS_PER_DIGIT;
 5264              		.loc 1 1922 4 is_stmt 1 view .LVU1662
 5265              	.LVL568:
 5266              	.LBB367:
 5267              	.LBI367:
 394:src/display.c **** 	if (res) *res++ = ch;
 5268              		.loc 1 394 14 view .LVU1663
 5269              	.LBB368:
 395:src/display.c **** 	else	set_dig(base, ch);
 5270              		.loc 1 395 2 view .LVU1664
 395:src/display.c **** 	else	set_dig(base, ch);
 5271              		.loc 1 395 5 is_stmt 0 view .LVU1665
 5272 02e6 002C     		cmp	r4, #0
 5273 02e8 00F0F280 		beq	.L543
 395:src/display.c **** 	else	set_dig(base, ch);
 5274              		.loc 1 395 11 is_stmt 1 view .LVU1666
 5275              	.LVL569:
 395:src/display.c **** 	else	set_dig(base, ch);
 5276              		.loc 1 395 18 is_stmt 0 view .LVU1667
 5277 02ec 04F8012B 		strb	r2, [r4], #1
 5278              	.LVL570:
ARM GAS  /tmp/ccQmbpxO.s 			page 168


 5279              	.L544:
 397:src/display.c **** }
 5280              		.loc 1 397 2 is_stmt 1 view .LVU1668
 397:src/display.c **** }
 5281              		.loc 1 397 2 is_stmt 0 view .LVU1669
 5282              	.LBE368:
 5283              	.LBE367:
1923:src/display.c **** 		}
 5284              		.loc 1 1923 4 is_stmt 1 view .LVU1670
1916:src/display.c **** 		if (c == '.') {
 5285              		.loc 1 1916 18 is_stmt 0 view .LVU1671
 5286 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5287              	.LVL571:
1923:src/display.c **** 		}
 5288              		.loc 1 1923 6 view .LVU1672
 5289 02f4 0936     		adds	r6, r6, #9
 5290              	.LVL572:
1916:src/display.c **** 		if (c == '.') {
 5291              		.loc 1 1916 53 is_stmt 1 view .LVU1673
1916:src/display.c **** 		if (c == '.') {
 5292              		.loc 1 1916 12 view .LVU1674
1916:src/display.c **** 		if (c == '.') {
 5293              		.loc 1 1916 2 is_stmt 0 view .LVU1675
 5294 02f6 0AB1     		cbz	r2, .L644
1916:src/display.c **** 		if (c == '.') {
 5295              		.loc 1 1916 31 discriminator 3 view .LVU1676
 5296 02f8 6B2E     		cmp	r6, #107
 5297 02fa EEDD     		ble	.L545
 5298              	.L644:
1916:src/display.c **** 		if (c == '.') {
 5299              		.loc 1 1916 31 discriminator 3 view .LVU1677
 5300 02fc 1A46     		mov	r2, r3
 5301              	.LVL573:
1916:src/display.c **** 		if (c == '.') {
 5302              		.loc 1 1916 31 discriminator 3 view .LVU1678
 5303 02fe 3B46     		mov	r3, r7
 5304 0300 1746     		mov	r7, r2
 5305              	.LVL574:
 5306              	.L535:
1936:src/display.c **** 		set_exp(exp, 0, res);
 5307              		.loc 1 1936 2 is_stmt 1 view .LVU1679
1936:src/display.c **** 		set_exp(exp, 0, res);
 5308              		.loc 1 1936 5 is_stmt 0 view .LVU1680
 5309 0302 BBF1000F 		cmp	fp, #0
 5310 0306 40F0F880 		bne	.L663
 5311              	.L546:
1939:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5312              		.loc 1 1939 2 is_stmt 1 view .LVU1681
1939:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5313              		.loc 1 1939 5 is_stmt 0 view .LVU1682
 5314 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5315 030e 2E2B     		cmp	r3, #46
 5316 0310 00F0E580 		beq	.L664
 5317              	.L547:
1941:src/display.c **** }
 5318              		.loc 1 1941 2 is_stmt 1 view .LVU1683
1941:src/display.c **** }
ARM GAS  /tmp/ccQmbpxO.s 			page 169


 5319              		.loc 1 1941 18 is_stmt 0 view .LVU1684
 5320 0314 009B     		ldr	r3, [sp]
 5321 0316 1F60     		str	r7, [r3]
 5322              	.LVL575:
 5323              	.L434:
1942:src/display.c **** 
 5324              		.loc 1 1942 1 view .LVU1685
 5325 0318 23B0     		add	sp, sp, #140
 5326              		.cfi_remember_state
 5327              		.cfi_def_cfa_offset 36
 5328              	.LVL576:
1942:src/display.c **** 
 5329              		.loc 1 1942 1 view .LVU1686
 5330              		@ sp needed
 5331 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5332              	.LVL577:
 5333              	.L442:
 5334              		.cfi_restore_state
1641:src/display.c **** 
 5335              		.loc 1 1641 3 is_stmt 1 view .LVU1687
 5336 031e 4146     		mov	r1, r8
 5337 0320 3046     		mov	r0, r6
 5338 0322 FFF7FEFF 		bl	decNumberToString
 5339              	.LVL578:
 5340 0326 A5E6     		b	.L444
 5341              	.L670:
 5342              		.align	2
 5343              	.L669:
 5344 0328 00000000 		.word	main_ram
 5345 032c 00000000 		.word	StateWhileOn
 5346 0330 56555555 		.word	1431655766
 5347 0334 00000000 		.word	.LANCHOR0
 5348 0338 00000000 		.word	.LANCHOR1
 5349              	.LVL579:
 5350              	.L435:
1599:src/display.c **** 			if (State2.hms) {
 5351              		.loc 1 1599 3 view .LVU1688
1599:src/display.c **** 			if (State2.hms) {
 5352              		.loc 1 1599 24 is_stmt 0 view .LVU1689
 5353 033c C14B     		ldr	r3, .L671
 5354 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1599:src/display.c **** 			if (State2.hms) {
 5355              		.loc 1 1599 21 view .LVU1690
 5356 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1599:src/display.c **** 			if (State2.hms) {
 5357              		.loc 1 1599 24 view .LVU1691
 5358 0342 01F00201 		and	r1, r1, #2
1599:src/display.c **** 			if (State2.hms) {
 5359              		.loc 1 1599 21 view .LVU1692
 5360 0346 1143     		orrs	r1, r1, r2
 5361 0348 7FF46EAE 		bne	.L438
1600:src/display.c **** 				set_x_hms(z, res);
 5362              		.loc 1 1600 4 is_stmt 1 view .LVU1693
1600:src/display.c **** 				set_x_hms(z, res);
 5363              		.loc 1 1600 8 is_stmt 0 view .LVU1694
 5364 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1600:src/display.c **** 				set_x_hms(z, res);
ARM GAS  /tmp/ccQmbpxO.s 			page 170


 5365              		.loc 1 1600 7 view .LVU1695
 5366 034e DA07     		lsls	r2, r3, #31
 5367 0350 00F19E82 		bmi	.L665
1604:src/display.c **** 				if (set_x_fract(z, res))
 5368              		.loc 1 1604 9 is_stmt 1 view .LVU1696
1604:src/display.c **** 				if (set_x_fract(z, res))
 5369              		.loc 1 1604 13 is_stmt 0 view .LVU1697
 5370 0354 BC4B     		ldr	r3, .L671+4
 5371 0356 1B68     		ldr	r3, [r3]
 5372 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1604:src/display.c **** 				if (set_x_fract(z, res))
 5373              		.loc 1 1604 12 view .LVU1698
 5374 035c 9B06     		lsls	r3, r3, #26
 5375 035e 7FF563AE 		bpl	.L438
1605:src/display.c **** 					return;
 5376              		.loc 1 1605 5 is_stmt 1 view .LVU1699
1605:src/display.c **** 					return;
 5377              		.loc 1 1605 9 is_stmt 0 view .LVU1700
 5378 0362 2146     		mov	r1, r4
 5379 0364 3046     		mov	r0, r6
 5380 0366 FFF7FEFF 		bl	set_x_fract
 5381              	.LVL580:
1605:src/display.c **** 					return;
 5382              		.loc 1 1605 8 view .LVU1701
 5383 036a 0028     		cmp	r0, #0
 5384 036c 3FF45CAE 		beq	.L438
 5385 0370 D2E7     		b	.L434
 5386              	.LVL581:
 5387              	.L558:
1687:src/display.c **** 	else exp = s_to_i(q+1);
 5388              		.loc 1 1687 21 view .LVU1702
 5389 0372 0546     		mov	r5, r0
 5390 0374 A5E6     		b	.L458
 5391              	.LVL582:
 5392              	.L660:
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 5393              		.loc 1 1741 6 view .LVU1703
 5394 0376 4A46     		mov	r2, r9
1742:src/display.c **** 			mantissa[0] = '1';
 5395              		.loc 1 1742 39 view .LVU1704
 5396 0378 4FF0300C 		mov	ip, #48
 5397              	.LVL583:
 5398              	.L484:
1742:src/display.c **** 			mantissa[0] = '1';
 5399              		.loc 1 1742 45 is_stmt 1 discriminator 3 view .LVU1705
1742:src/display.c **** 			mantissa[0] = '1';
 5400              		.loc 1 1742 34 discriminator 3 view .LVU1706
1742:src/display.c **** 			mantissa[0] = '1';
 5401              		.loc 1 1742 39 is_stmt 0 discriminator 3 view .LVU1707
 5402 037c 02F801CB 		strb	ip, [r2], #1
 5403              	.LVL584:
1742:src/display.c **** 			mantissa[0] = '1';
 5404              		.loc 1 1742 23 is_stmt 1 discriminator 3 view .LVU1708
1742:src/display.c **** 			mantissa[0] = '1';
 5405              		.loc 1 1742 4 is_stmt 0 discriminator 3 view .LVU1709
 5406 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5407 0382 3929     		cmp	r1, #57
ARM GAS  /tmp/ccQmbpxO.s 			page 171


 5408 0384 FAD0     		beq	.L484
 5409              	.LVL585:
 5410              	.L551:
1743:src/display.c **** 			exp++;
 5411              		.loc 1 1743 4 is_stmt 1 view .LVU1710
1743:src/display.c **** 			exp++;
 5412              		.loc 1 1743 16 is_stmt 0 view .LVU1711
 5413 0386 3122     		movs	r2, #49
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5414              		.loc 1 1745 7 view .LVU1712
 5415 0388 012F     		cmp	r7, #1
1744:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5416              		.loc 1 1744 7 view .LVU1713
 5417 038a 05F10105 		add	r5, r5, #1
 5418              	.LVL586:
1743:src/display.c **** 			exp++;
 5419              		.loc 1 1743 16 view .LVU1714
 5420 038e 8DF84820 		strb	r2, [sp, #72]
1744:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5421              		.loc 1 1744 4 is_stmt 1 view .LVU1715
 5422              	.LVL587:
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5423              		.loc 1 1745 4 view .LVU1716
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5424              		.loc 1 1745 7 is_stmt 0 view .LVU1717
 5425 0392 7FF402AF 		bne	.L647
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5426              		.loc 1 1745 25 discriminator 1 view .LVU1718
 5427 0396 AE42     		cmp	r6, r5
 5428 0398 00F3C180 		bgt	.L486
1746:src/display.c **** 				extra_digits = 0;
 5429              		.loc 1 1746 5 is_stmt 1 view .LVU1719
1746:src/display.c **** 				extra_digits = 0;
 5430              		.loc 1 1746 25 is_stmt 0 view .LVU1720
 5431 039c AA4B     		ldr	r3, .L671+4
 5432              	.LVL588:
1746:src/display.c **** 				extra_digits = 0;
 5433              		.loc 1 1746 25 view .LVU1721
 5434 039e 1B68     		ldr	r3, [r3]
 5435 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1746:src/display.c **** 				extra_digits = 0;
 5436              		.loc 1 1746 34 view .LVU1722
 5437 03a4 D806     		lsls	r0, r3, #27
 5438              	.LVL589:
1746:src/display.c **** 				extra_digits = 0;
 5439              		.loc 1 1746 34 view .LVU1723
 5440 03a6 40F1C082 		bpl	.L666
 5441              	.LVL590:
1757:src/display.c **** 
 5442              		.loc 1 1757 2 is_stmt 1 view .LVU1724
1757:src/display.c **** 
 5443              		.loc 1 1757 40 is_stmt 0 view .LVU1725
 5444 03aa 0AF10102 		add	r2, r10, #1
1757:src/display.c **** 
 5445              		.loc 1 1757 9 view .LVU1726
 5446 03ae 09EB0203 		add	r3, r9, r2
 5447              	.LVL591:
ARM GAS  /tmp/ccQmbpxO.s 			page 172


1757:src/display.c **** 
 5448              		.loc 1 1757 45 is_stmt 1 view .LVU1727
1757:src/display.c **** 
 5449              		.loc 1 1757 2 is_stmt 0 view .LVU1728
 5450 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
1746:src/display.c **** 				extra_digits = 0;
 5451              		.loc 1 1746 34 view .LVU1729
 5452 03b6 0327     		movs	r7, #3
1757:src/display.c **** 
 5453              		.loc 1 1757 2 view .LVU1730
 5454 03b8 002A     		cmp	r2, #0
 5455 03ba 7FF4F1AE 		bne	.L549
 5456              	.LVL592:
 5457              	.L492:
1859:src/display.c **** 		case -1:
 5458              		.loc 1 1859 3 is_stmt 1 view .LVU1731
1859:src/display.c **** 		case -1:
 5459              		.loc 1 1859 15 is_stmt 0 view .LVU1732
 5460 03be A34B     		ldr	r3, .L671+8
 5461 03c0 83FB0523 		smull	r2, r3, r3, r5
 5462 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5463 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5464 03cc EB1A     		subs	r3, r5, r3
 5465 03ce 0233     		adds	r3, r3, #2
 5466 03d0 042B     		cmp	r3, #4
 5467 03d2 3FF648AF 		bhi	.L572
 5468 03d6 01A2     		adr	r2, .L529
 5469 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5470              		.p2align 2
 5471              	.L529:
 5472 03dc 0B050000 		.word	.L573+1
 5473 03e0 A7070000 		.word	.L528+1
 5474 03e4 67020000 		.word	.L572+1
 5475 03e8 0B050000 		.word	.L573+1
 5476 03ec A7070000 		.word	.L528+1
 5477              	.LVL593:
 5478              		.p2align 1
 5479              	.L496:
1768:src/display.c **** 			case -1:
 5480              		.loc 1 1768 4 is_stmt 1 view .LVU1733
1768:src/display.c **** 			case -1:
 5481              		.loc 1 1768 30 is_stmt 0 view .LVU1734
 5482 03f0 9549     		ldr	r1, .L671+4
1768:src/display.c **** 			case -1:
 5483              		.loc 1 1768 17 view .LVU1735
 5484 03f2 964B     		ldr	r3, .L671+8
1768:src/display.c **** 			case -1:
 5485              		.loc 1 1768 30 view .LVU1736
 5486 03f4 0968     		ldr	r1, [r1]
1768:src/display.c **** 			case -1:
 5487              		.loc 1 1768 17 view .LVU1737
 5488 03f6 83FB0503 		smull	r0, r3, r3, r5
1768:src/display.c **** 			case -1:
 5489              		.loc 1 1768 30 view .LVU1738
 5490 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
1768:src/display.c **** 			case -1:
 5491              		.loc 1 1768 17 view .LVU1739
ARM GAS  /tmp/ccQmbpxO.s 			page 173


 5492 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5493 0402 03EB4303 		add	r3, r3, r3, lsl #1
1768:src/display.c **** 			case -1:
 5494              		.loc 1 1768 30 view .LVU1740
 5495 0406 C1F30011 		ubfx	r1, r1, #4, #1
1768:src/display.c **** 			case -1:
 5496              		.loc 1 1768 17 view .LVU1741
 5497 040a EB1A     		subs	r3, r5, r3
1768:src/display.c **** 			case -1:
 5498              		.loc 1 1768 22 view .LVU1742
 5499 040c 03FB01F3 		mul	r3, r3, r1
 5500 0410 0233     		adds	r3, r3, #2
 5501 0412 042B     		cmp	r3, #4
 5502 0414 00F24282 		bhi	.L567
 5503 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5504              	.L500:
 5505 041c DC01     		.2byte	(.L568-.L500)/2
 5506 041e FD01     		.2byte	(.L499-.L500)/2
 5507 0420 4002     		.2byte	(.L567-.L500)/2
 5508 0422 DC01     		.2byte	(.L568-.L500)/2
 5509 0424 FD01     		.2byte	(.L499-.L500)/2
 5510              	.LVL594:
 5511              		.p2align 1
 5512              	.L659:
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5513              		.loc 1 1724 3 is_stmt 1 view .LVU1743
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5514              		.loc 1 1724 6 is_stmt 0 view .LVU1744
 5515 0426 AE42     		cmp	r6, r5
 5516 0428 04DD     		ble	.L475
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5517              		.loc 1 1724 44 discriminator 1 view .LVU1745
 5518 042a CAF10003 		rsb	r3, r10, #0
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5519              		.loc 1 1724 35 discriminator 1 view .LVU1746
 5520 042e AB42     		cmp	r3, r5
 5521 0430 40F3C681 		ble	.L476
 5522              	.L475:
1725:src/display.c **** 		else {
 5523              		.loc 1 1725 4 is_stmt 1 view .LVU1747
1725:src/display.c **** 		else {
 5524              		.loc 1 1725 24 is_stmt 0 view .LVU1748
 5525 0434 844B     		ldr	r3, .L671+4
 5526 0436 1B68     		ldr	r3, [r3]
 5527 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1725:src/display.c **** 		else {
 5528              		.loc 1 1725 33 view .LVU1749
 5529 043c 13F0100F 		tst	r3, #16
 5530 0440 14BF     		ite	ne
 5531 0442 0327     		movne	r7, #3
 5532              	.LVL595:
1725:src/display.c **** 		else {
 5533              		.loc 1 1725 33 view .LVU1750
 5534 0444 0227     		moveq	r7, #2
 5535 0446 0022     		movs	r2, #0
 5536 0448 7FE6     		b	.L474
 5537              	.LVL596:
ARM GAS  /tmp/ccQmbpxO.s 			page 174


 5538              	.L657:
1725:src/display.c **** 		else {
 5539              		.loc 1 1725 33 view .LVU1751
 5540 044a 013D     		subs	r5, r5, #1
 5541 044c 7219     		adds	r2, r6, r5
 5542              	.L467:
1704:src/display.c **** 			exp--;
 5543              		.loc 1 1704 3 is_stmt 1 discriminator 1 view .LVU1752
1705:src/display.c **** 		while (*++q == '0');
 5544              		.loc 1 1705 4 discriminator 1 view .LVU1753
 5545 044e 951B     		subs	r5, r2, r6
 5546              	.LVL597:
1706:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5547              		.loc 1 1706 9 discriminator 1 view .LVU1754
1706:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5548              		.loc 1 1706 10 is_stmt 0 discriminator 1 view .LVU1755
 5549 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5550              	.LVL598:
1706:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5551              		.loc 1 1706 3 discriminator 1 view .LVU1756
 5552 0454 302B     		cmp	r3, #48
 5553 0456 FAD0     		beq	.L467
1707:src/display.c **** 			*p++ = *q++;
 5554              		.loc 1 1707 9 is_stmt 1 view .LVU1757
 5555 0458 A3F13002 		sub	r2, r3, #48
 5556 045c 092A     		cmp	r2, #9
 5557 045e 3FF66EAE 		bhi	.L468
1570:src/display.c **** 	char *r;
 5558              		.loc 1 1570 8 is_stmt 0 view .LVU1758
 5559 0462 4A46     		mov	r2, r9
 5560              	.LVL599:
 5561              	.L469:
1708:src/display.c **** 	} else {
 5562              		.loc 1 1708 4 is_stmt 1 view .LVU1759
1708:src/display.c **** 	} else {
 5563              		.loc 1 1708 9 is_stmt 0 view .LVU1760
 5564 0464 02F8013B 		strb	r3, [r2], #1
 5565              	.LVL600:
1707:src/display.c **** 			*p++ = *q++;
 5566              		.loc 1 1707 9 is_stmt 1 view .LVU1761
1707:src/display.c **** 			*p++ = *q++;
 5567              		.loc 1 1707 10 is_stmt 0 view .LVU1762
 5568 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1707:src/display.c **** 			*p++ = *q++;
 5569              		.loc 1 1707 9 view .LVU1763
 5570 046c A3F13001 		sub	r1, r3, #48
 5571 0470 0929     		cmp	r1, #9
 5572 0472 F7D9     		bls	.L469
 5573 0474 63E6     		b	.L468
 5574              	.LVL601:
 5575              	.L655:
1698:src/display.c **** 		q++;
 5576              		.loc 1 1698 3 is_stmt 1 view .LVU1764
1699:src/display.c **** 	} else if (*q == '+')
 5577              		.loc 1 1699 3 view .LVU1765
1698:src/display.c **** 		q++;
 5578              		.loc 1 1698 12 is_stmt 0 view .LVU1766
ARM GAS  /tmp/ccQmbpxO.s 			page 175


 5579 0476 4FF0010E 		mov	lr, #1
 5580 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1699:src/display.c **** 	} else if (*q == '+')
 5581              		.loc 1 1699 4 view .LVU1767
 5582 047c 7644     		add	r6, r6, lr
 5583              	.LVL602:
1699:src/display.c **** 	} else if (*q == '+')
 5584              		.loc 1 1699 4 view .LVU1768
 5585 047e 35E6     		b	.L463
 5586              	.LVL603:
 5587              	.L653:
1667:src/display.c **** 		trimzeros = 1;
 5588              		.loc 1 1667 3 is_stmt 1 view .LVU1769
1667:src/display.c **** 		trimzeros = 1;
 5589              		.loc 1 1667 10 is_stmt 0 view .LVU1770
 5590 0480 3046     		mov	r0, r6
 5591 0482 FFF7FEFF 		bl	std_round_fix
 5592              	.LVL604:
1669:src/display.c **** 	} else if (dd >= *display_digits)
 5593              		.loc 1 1669 6 view .LVU1771
 5594 0486 009B     		ldr	r3, [sp]
 5595 0488 1D68     		ldr	r5, [r3]
1668:src/display.c **** 		dd = *display_digits - 1;
 5596              		.loc 1 1668 13 view .LVU1772
 5597 048a 0123     		movs	r3, #1
1667:src/display.c **** 		trimzeros = 1;
 5598              		.loc 1 1667 10 view .LVU1773
 5599 048c 0746     		mov	r7, r0
 5600              	.LVL605:
1668:src/display.c **** 		dd = *display_digits - 1;
 5601              		.loc 1 1668 3 is_stmt 1 view .LVU1774
1669:src/display.c **** 	} else if (dd >= *display_digits)
 5602              		.loc 1 1669 3 view .LVU1775
1669:src/display.c **** 	} else if (dd >= *display_digits)
 5603              		.loc 1 1669 6 is_stmt 0 view .LVU1776
 5604 048e 05F1FF3A 		add	r10, r5, #-1
 5605              	.LVL606:
1668:src/display.c **** 		dd = *display_digits - 1;
 5606              		.loc 1 1668 13 view .LVU1777
 5607 0492 0193     		str	r3, [sp, #4]
 5608              	.LVL607:
1668:src/display.c **** 		dd = *display_digits - 1;
 5609              		.loc 1 1668 13 view .LVU1778
 5610 0494 00E6     		b	.L457
 5611              	.LVL608:
 5612              	.L661:
1918:src/display.c **** 		} else if (c == ',') {
 5613              		.loc 1 1918 4 is_stmt 1 view .LVU1779
1918:src/display.c **** 		} else if (c == ',') {
 5614              		.loc 1 1918 10 is_stmt 0 view .LVU1780
 5615 0496 2246     		mov	r2, r4
 5616              	.LVL609:
1918:src/display.c **** 		} else if (c == ',') {
 5617              		.loc 1 1918 10 view .LVU1781
 5618 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5619 049c 0193     		str	r3, [sp, #4]
 5620 049e A6F10900 		sub	r0, r6, #9
ARM GAS  /tmp/ccQmbpxO.s 			page 176


 5621 04a2 FFF7FEFF 		bl	set_decimal
 5622              	.LVL610:
 5623 04a6 019B     		ldr	r3, [sp, #4]
 5624 04a8 0446     		mov	r4, r0
 5625              	.LVL611:
 5626              	.L539:
1916:src/display.c **** 		if (c == '.') {
 5627              		.loc 1 1916 53 is_stmt 1 view .LVU1782
1916:src/display.c **** 		if (c == '.') {
 5628              		.loc 1 1916 12 view .LVU1783
1916:src/display.c **** 		if (c == '.') {
 5629              		.loc 1 1916 18 is_stmt 0 view .LVU1784
 5630 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5631              	.LVL612:
1916:src/display.c **** 		if (c == '.') {
 5632              		.loc 1 1916 2 view .LVU1785
 5633 04ae 002A     		cmp	r2, #0
 5634 04b0 7FF413AF 		bne	.L545
 5635 04b4 22E7     		b	.L644
 5636              	.L662:
1920:src/display.c **** 		} else {
 5637              		.loc 1 1920 4 is_stmt 1 view .LVU1786
1920:src/display.c **** 		} else {
 5638              		.loc 1 1920 10 is_stmt 0 view .LVU1787
 5639 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5640              	.LVL613:
 5641              	.LBB370:
 5642              	.LBI361:
 354:src/display.c **** 	if (sep == SEP_NONE)
 5643              		.loc 1 354 14 is_stmt 1 view .LVU1788
 5644              	.LBB364:
 355:src/display.c **** 		return res;
 5645              		.loc 1 355 2 view .LVU1789
 355:src/display.c **** 		return res;
 5646              		.loc 1 355 5 is_stmt 0 view .LVU1790
 5647 04ba 0029     		cmp	r1, #0
 5648 04bc F5D0     		beq	.L539
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5649              		.loc 1 357 2 is_stmt 1 view .LVU1791
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5650              		.loc 1 357 5 is_stmt 0 view .LVU1792
 5651 04be 002C     		cmp	r4, #0
 5652 04c0 00F0F281 		beq	.L541
 358:src/display.c **** 		else *res++ = '.';
 5653              		.loc 1 358 3 is_stmt 1 view .LVU1793
 358:src/display.c **** 		else *res++ = '.';
 5654              		.loc 1 358 6 is_stmt 0 view .LVU1794
 5655 04c4 0129     		cmp	r1, #1
 358:src/display.c **** 		else *res++ = '.';
 5656              		.loc 1 358 25 is_stmt 1 view .LVU1795
 5657              	.LVL614:
 359:src/display.c **** 	} else {
 5658              		.loc 1 359 8 view .LVU1796
 359:src/display.c **** 	} else {
 5659              		.loc 1 359 15 is_stmt 0 view .LVU1797
 5660 04c6 18BF     		it	ne
 5661 04c8 2E22     		movne	r2, #46
ARM GAS  /tmp/ccQmbpxO.s 			page 177


 5662              	.LVL615:
 359:src/display.c **** 	} else {
 5663              		.loc 1 359 15 view .LVU1798
 5664 04ca 04F8012B 		strb	r2, [r4], #1
 5665              	.LVL616:
 359:src/display.c **** 	} else {
 5666              		.loc 1 359 15 view .LVU1799
 5667 04ce ECE7     		b	.L539
 5668              	.LVL617:
 5669              	.L543:
 359:src/display.c **** 	} else {
 5670              		.loc 1 359 15 view .LVU1800
 5671              	.LBE364:
 5672              	.LBE370:
 5673              	.LBB371:
 5674              	.LBB369:
 396:src/display.c **** 	return res;
 5675              		.loc 1 396 7 view .LVU1801
 5676 04d0 1146     		mov	r1, r2
 5677 04d2 3046     		mov	r0, r6
 5678 04d4 0193     		str	r3, [sp, #4]
 396:src/display.c **** 	return res;
 5679              		.loc 1 396 7 is_stmt 1 view .LVU1802
 5680 04d6 FFF7FEFF 		bl	set_dig
 5681              	.LVL618:
 396:src/display.c **** 	return res;
 5682              		.loc 1 396 7 is_stmt 0 view .LVU1803
 5683 04da 019B     		ldr	r3, [sp, #4]
 5684 04dc 08E7     		b	.L544
 5685              	.LVL619:
 5686              	.L664:
 396:src/display.c **** 	return res;
 5687              		.loc 1 396 7 view .LVU1804
 5688              	.LBE369:
 5689              	.LBE371:
1939:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5690              		.loc 1 1939 21 discriminator 1 view .LVU1805
 5691 04de 002C     		cmp	r4, #0
 5692 04e0 7FF418AF 		bne	.L547
1940:src/display.c **** 	*display_digits = odig;
 5693              		.loc 1 1940 3 is_stmt 1 view .LVU1806
1940:src/display.c **** 	*display_digits = odig;
 5694              		.loc 1 1940 32 is_stmt 0 view .LVU1807
 5695 04e4 009B     		ldr	r3, [sp]
 5696 04e6 1868     		ldr	r0, [r3]
1940:src/display.c **** 	*display_digits = odig;
 5697              		.loc 1 1940 3 view .LVU1808
 5698 04e8 594B     		ldr	r3, .L671+12
1940:src/display.c **** 	*display_digits = odig;
 5699              		.loc 1 1940 32 view .LVU1809
 5700 04ea 0138     		subs	r0, r0, #1
1940:src/display.c **** 	*display_digits = odig;
 5701              		.loc 1 1940 3 view .LVU1810
 5702 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5703 04ee 2246     		mov	r2, r4
 5704 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5705 04f4 FFF7FEFF 		bl	set_decimal
ARM GAS  /tmp/ccQmbpxO.s 			page 178


 5706              	.LVL620:
 5707 04f8 0CE7     		b	.L547
 5708              	.L663:
1937:src/display.c **** #endif
 5709              		.loc 1 1937 3 view .LVU1811
 5710 04fa 2846     		mov	r0, r5
 5711 04fc 2246     		mov	r2, r4
 5712 04fe 0021     		movs	r1, #0
 5713 0500 0193     		str	r3, [sp, #4]
1937:src/display.c **** #endif
 5714              		.loc 1 1937 3 is_stmt 1 view .LVU1812
 5715 0502 FFF7FEFF 		bl	set_exp
 5716              	.LVL621:
 5717 0506 019B     		ldr	r3, [sp, #4]
 5718 0508 FFE6     		b	.L546
 5719              	.LVL622:
 5720              	.L573:
1859:src/display.c **** 		case -1:
 5721              		.loc 1 1859 15 is_stmt 0 view .LVU1813
 5722 050a 0227     		movs	r7, #2
 5723 050c 4146     		mov	r1, r8
 5724              	.LVL623:
 5725              	.L530:
1868:src/display.c **** 			odig++;
 5726              		.loc 1 1868 4 is_stmt 1 view .LVU1814
1868:src/display.c **** 			odig++;
 5727              		.loc 1 1868 11 is_stmt 0 view .LVU1815
 5728 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5729              	.LVL624:
1868:src/display.c **** 			odig++;
 5730              		.loc 1 1868 11 view .LVU1816
 5731 0512 01F8013B 		strb	r3, [r1], #1
 5732              	.LVL625:
1869:src/display.c **** 			dd--;
 5733              		.loc 1 1869 4 is_stmt 1 view .LVU1817
1870:src/display.c **** 			exp--;
 5734              		.loc 1 1870 4 view .LVU1818
1870:src/display.c **** 			exp--;
 5735              		.loc 1 1870 6 is_stmt 0 view .LVU1819
 5736 0516 0AF1FF3A 		add	r10, r10, #-1
 5737              	.LVL626:
1871:src/display.c **** 		case 0:
 5738              		.loc 1 1871 4 is_stmt 1 view .LVU1820
1871:src/display.c **** 		case 0:
 5739              		.loc 1 1871 7 is_stmt 0 view .LVU1821
 5740 051a 013D     		subs	r5, r5, #1
 5741              	.LVL627:
1871:src/display.c **** 		case 0:
 5742              		.loc 1 1871 7 view .LVU1822
 5743 051c A5E6     		b	.L491
 5744              	.LVL628:
 5745              	.L486:
1757:src/display.c **** 
 5746              		.loc 1 1757 2 is_stmt 1 view .LVU1823
1757:src/display.c **** 
 5747              		.loc 1 1757 45 view .LVU1824
1757:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 179


 5748              		.loc 1 1757 2 is_stmt 0 view .LVU1825
 5749 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5750 0522 002A     		cmp	r2, #0
 5751 0524 7FF43CAE 		bne	.L549
 5752              	.LVL629:
 5753              	.L493:
1822:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
 5754              		.loc 1 1822 3 is_stmt 1 view .LVU1826
1823:src/display.c **** 			for (i=0; i<=exp; i++) {
 5755              		.loc 1 1823 3 view .LVU1827
1823:src/display.c **** 			for (i=0; i<=exp; i++) {
 5756              		.loc 1 1823 6 is_stmt 0 view .LVU1828
 5757 0528 002D     		cmp	r5, #0
 5758 052a C0F21081 		blt	.L513
1823:src/display.c **** 			for (i=0; i<=exp; i++) {
 5759              		.loc 1 1823 6 view .LVU1829
 5760 052e 6B1C     		adds	r3, r5, #1
1825:src/display.c **** 					*obp++ = ',';
 5761              		.loc 1 1825 28 view .LVU1830
 5762 0530 DFF818C1 		ldr	ip, .L671+8
 5763 0534 0293     		str	r3, [sp, #8]
 5764 0536 09EB0300 		add	r0, r9, r3
1759:src/display.c **** 	switch (mode) {
 5765              		.loc 1 1759 4 view .LVU1831
 5766 053a 4F46     		mov	r7, r9
1564:src/display.c **** 	int odig = 0;
 5767              		.loc 1 1564 15 view .LVU1832
 5768 053c 4146     		mov	r1, r8
 5769 053e 0394     		str	r4, [sp, #12]
 5770 0540 05E0     		b	.L514
 5771              	.LVL630:
 5772              	.L517:
1826:src/display.c **** 				*obp++ = *p++;
 5773              		.loc 1 1826 6 is_stmt 1 view .LVU1833
1825:src/display.c **** 					*obp++ = ',';
 5774              		.loc 1 1825 15 is_stmt 0 view .LVU1834
 5775 0542 022A     		cmp	r2, #2
1826:src/display.c **** 				*obp++ = *p++;
 5776              		.loc 1 1826 13 view .LVU1835
 5777 0544 05BF     		ittet	eq
 5778 0546 2C23     		moveq	r3, #44
 5779 0548 4B70     		strbeq	r3, [r1, #1]
1827:src/display.c **** 				odig++;
 5780              		.loc 1 1827 9 view .LVU1836
 5781 054a 0131     		addne	r1, r1, #1
 5782              	.LVL631:
1826:src/display.c **** 				*obp++ = *p++;
 5783              		.loc 1 1826 10 view .LVU1837
 5784 054c 0231     		addeq	r1, r1, #2
 5785              	.LVL632:
 5786              	.L514:
1827:src/display.c **** 				odig++;
 5787              		.loc 1 1827 5 is_stmt 1 discriminator 2 view .LVU1838
1827:src/display.c **** 				odig++;
 5788              		.loc 1 1827 12 is_stmt 0 discriminator 2 view .LVU1839
 5789 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5790              	.LVL633:
ARM GAS  /tmp/ccQmbpxO.s 			page 180


1825:src/display.c **** 					*obp++ = ',';
 5791              		.loc 1 1825 5 is_stmt 1 discriminator 2 view .LVU1840
1827:src/display.c **** 				odig++;
 5792              		.loc 1 1827 12 is_stmt 0 discriminator 2 view .LVU1841
 5793 0552 0B70     		strb	r3, [r1]
1828:src/display.c **** 			}
 5794              		.loc 1 1828 5 is_stmt 1 discriminator 2 view .LVU1842
 5795              	.LVL634:
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5796              		.loc 1 1824 22 discriminator 2 view .LVU1843
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5797              		.loc 1 1824 14 discriminator 2 view .LVU1844
1825:src/display.c **** 					*obp++ = ',';
 5798              		.loc 1 1825 28 is_stmt 0 discriminator 2 view .LVU1845
 5799 0554 A9EB0703 		sub	r3, r9, r7
 5800 0558 2B44     		add	r3, r3, r5
 5801 055a 8CFB0342 		smull	r4, r2, ip, r3
 5802 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5803 0562 02EB4202 		add	r2, r2, r2, lsl #1
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5804              		.loc 1 1824 4 discriminator 2 view .LVU1846
 5805 0566 B842     		cmp	r0, r7
1825:src/display.c **** 					*obp++ = ',';
 5806              		.loc 1 1825 28 discriminator 2 view .LVU1847
 5807 0568 A3EB0202 		sub	r2, r3, r2
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5808              		.loc 1 1824 4 discriminator 2 view .LVU1848
 5809 056c E9D1     		bne	.L517
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5810              		.loc 1 1830 11 view .LVU1849
 5811 056e 2E23     		movs	r3, #46
1831:src/display.c **** 				*obp++ = *p++;
 5812              		.loc 1 1831 4 view .LVU1850
 5813 0570 BAF1000F 		cmp	r10, #0
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5814              		.loc 1 1830 11 view .LVU1851
 5815 0574 4B70     		strb	r3, [r1, #1]
 5816 0576 039C     		ldr	r4, [sp, #12]
 5817 0578 029F     		ldr	r7, [sp, #8]
 5818              	.LVL635:
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5819              		.loc 1 1830 4 is_stmt 1 view .LVU1852
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5820              		.loc 1 1830 8 is_stmt 0 view .LVU1853
 5821 057a 01F10203 		add	r3, r1, #2
 5822              	.LVL636:
1831:src/display.c **** 				*obp++ = *p++;
 5823              		.loc 1 1831 4 is_stmt 1 view .LVU1854
1831:src/display.c **** 				*obp++ = *p++;
 5824              		.loc 1 1831 14 view .LVU1855
1831:src/display.c **** 				*obp++ = *p++;
 5825              		.loc 1 1831 4 is_stmt 0 view .LVU1856
 5826 057e 0CDD     		ble	.L518
 5827 0580 0131     		adds	r1, r1, #1
 5828 0582 00EB0A07 		add	r7, r0, r10
 5829              	.LVL637:
 5830              	.L519:
ARM GAS  /tmp/ccQmbpxO.s 			page 181


1832:src/display.c **** 				odig++;
 5831              		.loc 1 1832 5 is_stmt 1 discriminator 4 view .LVU1857
1832:src/display.c **** 				odig++;
 5832              		.loc 1 1832 12 is_stmt 0 discriminator 4 view .LVU1858
 5833 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5834              	.LVL638:
1832:src/display.c **** 				odig++;
 5835              		.loc 1 1832 12 discriminator 4 view .LVU1859
 5836 058a 01F8012F 		strb	r2, [r1, #1]!
1833:src/display.c **** 			}
 5837              		.loc 1 1833 5 is_stmt 1 discriminator 4 view .LVU1860
1831:src/display.c **** 				*obp++ = *p++;
 5838              		.loc 1 1831 41 discriminator 4 view .LVU1861
1831:src/display.c **** 				*obp++ = *p++;
 5839              		.loc 1 1831 14 discriminator 4 view .LVU1862
1831:src/display.c **** 				*obp++ = *p++;
 5840              		.loc 1 1831 4 is_stmt 0 discriminator 4 view .LVU1863
 5841 058e 8742     		cmp	r7, r0
 5842 0590 F9D1     		bne	.L519
 5843 0592 029A     		ldr	r2, [sp, #8]
 5844 0594 5244     		add	r2, r2, r10
 5845 0596 5344     		add	r3, r3, r10
 5846              	.LVL639:
1831:src/display.c **** 				*obp++ = *p++;
 5847              		.loc 1 1831 4 discriminator 4 view .LVU1864
 5848 0598 1746     		mov	r7, r2
 5849              	.LVL640:
 5850              	.L518:
1850:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5851              		.loc 1 1850 3 is_stmt 1 view .LVU1865
1850:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5852              		.loc 1 1850 6 is_stmt 0 view .LVU1866
 5853 059a 019A     		ldr	r2, [sp, #4]
 5854 059c 002A     		cmp	r2, #0
 5855 059e 40F0C480 		bne	.L524
1566:src/display.c **** 	int j;
 5856              		.loc 1 1566 6 view .LVU1867
 5857 05a2 9346     		mov	fp, r2
 5858 05a4 7CE6     		b	.L502
 5859              	.LVL641:
 5860              	.L650:
1627:src/display.c **** 		exp = z->exponent + z->digits - 1;
 5861              		.loc 1 1627 3 is_stmt 1 view .LVU1868
 5862 05a6 2B4A     		ldr	r2, .L671+16
 5863 05a8 3146     		mov	r1, r6
 5864 05aa 3046     		mov	r0, r6
 5865 05ac FFF7FEFF 		bl	decNumberNormalize
 5866              	.LVL642:
1628:src/display.c **** 		z->exponent = 0;
 5867              		.loc 1 1628 3 view .LVU1869
1628:src/display.c **** 		z->exponent = 0;
 5868              		.loc 1 1628 21 is_stmt 0 view .LVU1870
 5869 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5870 05b4 03EB020A 		add	r10, r3, r2
1628:src/display.c **** 		z->exponent = 0;
 5871              		.loc 1 1628 7 view .LVU1871
 5872 05b8 0AF1FF33 		add	r3, r10, #-1
ARM GAS  /tmp/ccQmbpxO.s 			page 182


1629:src/display.c **** 	}
 5873              		.loc 1 1629 15 view .LVU1872
 5874 05bc C6F804B0 		str	fp, [r6, #4]
1628:src/display.c **** 		z->exponent = 0;
 5875              		.loc 1 1628 7 view .LVU1873
 5876 05c0 0193     		str	r3, [sp, #4]
 5877              	.LVL643:
1629:src/display.c **** 	}
 5878              		.loc 1 1629 3 is_stmt 1 view .LVU1874
 5879 05c2 42E5     		b	.L441
 5880              	.LVL644:
 5881              	.L656:
1701:src/display.c **** 	for (; *q == '0'; q++);
 5882              		.loc 1 1701 3 view .LVU1875
1701:src/display.c **** 	for (; *q == '0'; q++);
 5883              		.loc 1 1701 3 is_stmt 0 view .LVU1876
 5884 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1584:src/display.c **** 	int trimzeros = 0;
 5885              		.loc 1 1584 6 view .LVU1877
 5886 05c6 4FF0000E 		mov	lr, #0
1701:src/display.c **** 	for (; *q == '0'; q++);
 5887              		.loc 1 1701 4 view .LVU1878
 5888 05ca 0136     		adds	r6, r6, #1
 5889              	.LVL645:
1701:src/display.c **** 	for (; *q == '0'; q++);
 5890              		.loc 1 1701 4 view .LVU1879
 5891 05cc 8EE5     		b	.L463
 5892              	.LVL646:
 5893              	.L658:
1717:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5894              		.loc 1 1717 4 is_stmt 1 view .LVU1880
1718:src/display.c **** 				*p++ = *q++;
 5895              		.loc 1 1718 11 is_stmt 0 view .LVU1881
 5896 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1718:src/display.c **** 				*p++ = *q++;
 5897              		.loc 1 1718 10 view .LVU1882
 5898 05d0 A3F13002 		sub	r2, r3, #48
 5899 05d4 092A     		cmp	r2, #9
1717:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5900              		.loc 1 1717 5 view .LVU1883
 5901 05d6 06F10106 		add	r6, r6, #1
 5902              	.LVL647:
1718:src/display.c **** 				*p++ = *q++;
 5903              		.loc 1 1718 4 is_stmt 1 view .LVU1884
1718:src/display.c **** 				*p++ = *q++;
 5904              		.loc 1 1718 10 view .LVU1885
 5905 05da 3FF6B0AD 		bhi	.L468
 5906              	.LVL648:
 5907              	.L473:
1719:src/display.c **** 		}
 5908              		.loc 1 1719 5 view .LVU1886
1719:src/display.c **** 		}
 5909              		.loc 1 1719 10 is_stmt 0 view .LVU1887
 5910 05de 01F8013B 		strb	r3, [r1], #1
 5911              	.LVL649:
1718:src/display.c **** 				*p++ = *q++;
 5912              		.loc 1 1718 10 is_stmt 1 view .LVU1888
ARM GAS  /tmp/ccQmbpxO.s 			page 183


1718:src/display.c **** 				*p++ = *q++;
 5913              		.loc 1 1718 11 is_stmt 0 view .LVU1889
 5914 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1718:src/display.c **** 				*p++ = *q++;
 5915              		.loc 1 1718 10 view .LVU1890
 5916 05e6 A3F13002 		sub	r2, r3, #48
 5917 05ea 092A     		cmp	r2, #9
 5918 05ec F7D9     		bls	.L473
 5919 05ee A6E5     		b	.L468
 5920              	.LVL650:
 5921              	.L651:
1635:src/display.c **** 			x[0] = '-';
 5922              		.loc 1 1635 33 discriminator 1 view .LVU1891
 5923 05f0 6B20     		movs	r0, #107
 5924 05f2 FFF7FEFF 		bl	get_user_flag
 5925              	.LVL651:
1635:src/display.c **** 			x[0] = '-';
 5926              		.loc 1 1635 30 discriminator 1 view .LVU1892
 5927 05f6 0028     		cmp	r0, #0
 5928 05f8 3FF439AD 		beq	.L443
1636:src/display.c **** 			x[1] = '0';
 5929              		.loc 1 1636 4 is_stmt 1 view .LVU1893
1637:src/display.c **** 		} else
 5930              		.loc 1 1637 4 view .LVU1894
1636:src/display.c **** 			x[1] = '0';
 5931              		.loc 1 1636 9 is_stmt 0 view .LVU1895
 5932 05fc 43F22D03 		movw	r3, #12333
 5933 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
1637:src/display.c **** 		} else
 5934              		.loc 1 1637 9 view .LVU1896
 5935 0604 36E5     		b	.L444
 5936              	.LVL652:
 5937              	.L654:
1694:src/display.c **** 		CLR_MANT_SIGN;
 5938              		.loc 1 1694 3 is_stmt 1 view .LVU1897
 5939              	.LBB372:
 5940              	.LBI372:
 301:src/display.c **** {
 5941              		.loc 1 301 13 view .LVU1898
 5942              	.LBB373:
 303:src/display.c **** 	clr_dot(EXP_SIGN);
 5943              		.loc 1 303 2 view .LVU1899
 304:src/display.c **** }
 5944              		.loc 1 304 2 view .LVU1900
 303:src/display.c **** 	clr_dot(EXP_SIGN);
 5945              		.loc 1 303 26 is_stmt 0 view .LVU1901
 5946 0606 144B     		ldr	r3, .L671+20
 5947 0608 2022     		movs	r2, #32
 304:src/display.c **** }
 5948              		.loc 1 304 2 view .LVU1902
 5949 060a 8220     		movs	r0, #130
 303:src/display.c **** 	clr_dot(EXP_SIGN);
 5950              		.loc 1 303 26 view .LVU1903
 5951 060c 1A70     		strb	r2, [r3]
 304:src/display.c **** }
 5952              		.loc 1 304 2 view .LVU1904
 5953 060e FFF7FEFF 		bl	clr_dot
ARM GAS  /tmp/ccQmbpxO.s 			page 184


 5954              	.LVL653:
 5955              	.LBE373:
 5956              	.LBE372:
1695:src/display.c **** 	}
 5957              		.loc 1 1695 3 is_stmt 1 view .LVU1905
 5958              	.LBB374:
 5959              	.LBI374:
 289:src/display.c **** {
 5960              		.loc 1 289 13 view .LVU1906
 5961              	.LBB375:
 291:src/display.c **** 	clr_dot(MANT_SIGN);
 5962              		.loc 1 291 2 view .LVU1907
 291:src/display.c **** 	clr_dot(MANT_SIGN);
 5963              		.loc 1 291 24 is_stmt 0 view .LVU1908
 5964 0612 124B     		ldr	r3, .L671+24
 5965 0614 2022     		movs	r2, #32
 292:src/display.c **** }
 5966              		.loc 1 292 2 view .LVU1909
 5967 0616 8120     		movs	r0, #129
 291:src/display.c **** 	clr_dot(MANT_SIGN);
 5968              		.loc 1 291 24 view .LVU1910
 5969 0618 1A70     		strb	r2, [r3]
 292:src/display.c **** }
 5970              		.loc 1 292 2 is_stmt 1 view .LVU1911
 5971 061a FFF7FEFF 		bl	clr_dot
 5972              	.LVL654:
 293:src/display.c **** 
 5973              		.loc 1 293 1 is_stmt 0 view .LVU1912
 5974 061e 5CE5     		b	.L461
 5975              	.LVL655:
 5976              	.L534:
 293:src/display.c **** 
 5977              		.loc 1 293 1 view .LVU1913
 5978              	.LBE375:
 5979              	.LBE374:
1910:src/display.c **** 				SET_MANT_SIGN;
 5980              		.loc 1 1910 4 is_stmt 1 view .LVU1914
 5981 0620 0193     		str	r3, [sp, #4]
1910:src/display.c **** 				SET_MANT_SIGN;
 5982              		.loc 1 1910 7 is_stmt 0 view .LVU1915
 5983 0622 002E     		cmp	r6, #0
 5984 0624 40F00281 		bne	.L537
1911:src/display.c **** 			else
 5985              		.loc 1 1911 5 is_stmt 1 view .LVU1916
 5986              	.LBB376:
 5987              	.LBI376:
 283:src/display.c **** {
 5988              		.loc 1 283 13 view .LVU1917
 5989              	.LBB377:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 5990              		.loc 1 285 2 view .LVU1918
 285:src/display.c **** 	set_dot(MANT_SIGN);
 5991              		.loc 1 285 24 is_stmt 0 view .LVU1919
 5992 0628 0C4A     		ldr	r2, .L671+24
 5993 062a 2D21     		movs	r1, #45
 286:src/display.c **** }
 5994              		.loc 1 286 2 view .LVU1920
ARM GAS  /tmp/ccQmbpxO.s 			page 185


 5995 062c 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 5996              		.loc 1 285 24 view .LVU1921
 5997 062e 1170     		strb	r1, [r2]
 286:src/display.c **** }
 5998              		.loc 1 286 2 is_stmt 1 view .LVU1922
 5999 0630 FFF7FEFF 		bl	set_dot
 6000              	.LVL656:
 286:src/display.c **** }
 6001              		.loc 1 286 2 is_stmt 0 view .LVU1923
 6002              	.LBE377:
 6003              	.LBE376:
1916:src/display.c **** 		if (c == '.') {
 6004              		.loc 1 1916 12 is_stmt 1 view .LVU1924
1916:src/display.c **** 		if (c == '.') {
 6005              		.loc 1 1916 18 is_stmt 0 view .LVU1925
 6006 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6007              	.LVL657:
1916:src/display.c **** 		if (c == '.') {
 6008              		.loc 1 1916 2 view .LVU1926
 6009 0638 019B     		ldr	r3, [sp, #4]
 6010 063a 002A     		cmp	r2, #0
 6011 063c 7FF446AE 		bne	.L536
 6012 0640 5FE6     		b	.L535
 6013              	.L672:
 6014 0642 00BF     		.align	2
 6015              	.L671:
 6016 0644 00000000 		.word	StateWhileOn
 6017 0648 00000000 		.word	main_ram
 6018 064c 56555555 		.word	1431655766
 6019 0650 00000000 		.word	.LANCHOR1
 6020 0654 00000000 		.word	Ctx
 6021 0658 00000000 		.word	LastDisplayedExponent
 6022 065c 00000000 		.word	LastDisplayedNumber
 6023              	.LVL658:
 6024              	.L652:
1644:src/display.c **** 		return;
 6025              		.loc 1 1644 3 is_stmt 1 view .LVU1927
 6026              	.LBB378:
 6027              	.LBI378:
1432:src/display.c **** 	const int dbl = is_dblmode();
 6028              		.loc 1 1432 13 view .LVU1928
 6029              	.LBB379:
1433:src/display.c **** 	char *p;
 6030              		.loc 1 1433 2 view .LVU1929
1433:src/display.c **** 	char *p;
 6031              		.loc 1 1433 18 is_stmt 0 view .LVU1930
 6032 0660 FFF7FEFF 		bl	is_dblmode
 6033              	.LVL659:
1449:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6034              		.loc 1 1449 5 view .LVU1931
 6035 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6036 0668 2D2B     		cmp	r3, #45
1433:src/display.c **** 	char *p;
 6037              		.loc 1 1433 18 view .LVU1932
 6038 066a 0446     		mov	r4, r0
 6039              	.LVL660:
ARM GAS  /tmp/ccQmbpxO.s 			page 186


1434:src/display.c **** 	int i, j;
 6040              		.loc 1 1434 2 is_stmt 1 view .LVU1933
1435:src/display.c **** 	char *upper_str;
 6041              		.loc 1 1435 2 view .LVU1934
1436:src/display.c **** 	enum separator_modes separator_mode;
 6042              		.loc 1 1436 2 view .LVU1935
1437:src/display.c **** 	char decimal_mark;
 6043              		.loc 1 1437 2 view .LVU1936
1438:src/display.c **** 	char thousands_sep;
 6044              		.loc 1 1438 2 view .LVU1937
1439:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6045              		.loc 1 1439 2 view .LVU1938
1445:src/display.c **** #endif
 6046              		.loc 1 1445 2 view .LVU1939
1447:src/display.c **** 
 6047              		.loc 1 1447 2 view .LVU1940
1449:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6048              		.loc 1 1449 2 view .LVU1941
1449:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6049              		.loc 1 1449 5 is_stmt 0 view .LVU1942
 6050 066c 00F02A81 		beq	.L667
1462:src/display.c **** 
 6051              		.loc 1 1462 16 view .LVU1943
 6052 0670 0026     		movs	r6, #0
 6053              	.LVL661:
 6054              	.L446:
1464:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6055              		.loc 1 1464 2 is_stmt 1 view .LVU1944
1464:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6056              		.loc 1 1464 6 is_stmt 0 view .LVU1945
 6057 0672 0021     		movs	r1, #0
 6058 0674 4046     		mov	r0, r8
 6059 0676 FFF7FEFF 		bl	find_char
 6060              	.LVL662:
1465:src/display.c **** 
 6061              		.loc 1 1465 2 is_stmt 1 view .LVU1946
1465:src/display.c **** 
 6062              		.loc 1 1465 23 is_stmt 0 view .LVU1947
 6063 067a A0EB0802 		sub	r2, r0, r8
1465:src/display.c **** 
 6064              		.loc 1 1465 2 view .LVU1948
 6065 067e C2F12202 		rsb	r2, r2, #34
 6066 0682 3021     		movs	r1, #48
 6067 0684 FFF7FEFF 		bl	xset
 6068              	.LVL663:
1467:src/display.c **** 		separator_mode = SEP_COMMA;
 6069              		.loc 1 1467 2 is_stmt 1 view .LVU1949
1467:src/display.c **** 		separator_mode = SEP_COMMA;
 6070              		.loc 1 1467 18 is_stmt 0 view .LVU1950
 6071 0688 B14A     		ldr	r2, .L673
1478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6072              		.loc 1 1478 6 view .LVU1951
 6073 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1467:src/display.c **** 		separator_mode = SEP_COMMA;
 6074              		.loc 1 1467 5 view .LVU1952
 6075 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1475:src/display.c **** 	}
ARM GAS  /tmp/ccQmbpxO.s 			page 187


 6076              		.loc 1 1475 17 view .LVU1953
 6077 0690 002A     		cmp	r2, #0
 6078 0692 15BF     		itete	ne
 6079 0694 4FF0020A 		movne	r10, #2
 6080 0698 2C27     		moveq	r7, #44
 6081 069a 2E27     		movne	r7, #46
 6082              	.LVL664:
1475:src/display.c **** 	}
 6083              		.loc 1 1475 17 view .LVU1954
 6084 069c 2E25     		moveq	r5, #46
 6085 069e 18BF     		it	ne
 6086 06a0 2C25     		movne	r5, #44
 6087              	.LVL665:
1478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6088              		.loc 1 1478 2 is_stmt 1 view .LVU1955
1478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6089              		.loc 1 1478 5 is_stmt 0 view .LVU1956
 6090 06a2 13F0380F 		tst	r3, #56
 6091 06a6 40F0C880 		bne	.L668
1505:src/display.c **** 		xcopy(x + 2, x + 1, 16);
 6092              		.loc 1 1505 3 is_stmt 1 view .LVU1957
 6093              	.LVL666:
1506:src/display.c **** 		x[1] = decimal_mark;
 6094              		.loc 1 1506 3 view .LVU1958
 6095 06aa 1022     		movs	r2, #16
 6096 06ac 08F10101 		add	r1, r8, #1
 6097 06b0 08F10200 		add	r0, r8, #2
 6098 06b4 FFF7FEFF 		bl	xcopy
 6099              	.LVL667:
1507:src/display.c **** 		if (grouping) {
 6100              		.loc 1 1507 3 view .LVU1959
1509:src/display.c **** 			x[5] = thousands_sep;
 6101              		.loc 1 1509 4 is_stmt 0 view .LVU1960
 6102 06b8 0D22     		movs	r2, #13
 6103 06ba 08F10501 		add	r1, r8, #5
 6104 06be 08F10600 		add	r0, r8, #6
1507:src/display.c **** 		if (grouping) {
 6105              		.loc 1 1507 8 view .LVU1961
 6106 06c2 88F80150 		strb	r5, [r8, #1]
1508:src/display.c **** 			xcopy(x + 6, x + 5, 13);
 6107              		.loc 1 1508 3 is_stmt 1 view .LVU1962
1509:src/display.c **** 			x[5] = thousands_sep;
 6108              		.loc 1 1509 4 view .LVU1963
 6109 06c6 FFF7FEFF 		bl	xcopy
 6110              	.LVL668:
1510:src/display.c **** 			x += 9;
 6111              		.loc 1 1510 4 view .LVU1964
1511:src/display.c **** 		}
 6112              		.loc 1 1511 6 is_stmt 0 view .LVU1965
 6113 06ca 08F10905 		add	r5, r8, #9
 6114              	.LVL669:
1510:src/display.c **** 			x += 9;
 6115              		.loc 1 1510 9 view .LVU1966
 6116 06ce 88F80570 		strb	r7, [r8, #5]
1511:src/display.c **** 		}
 6117              		.loc 1 1511 4 is_stmt 1 view .LVU1967
 6118              	.LVL670:
ARM GAS  /tmp/ccQmbpxO.s 			page 188


1514:src/display.c **** 			if (exp < 0) {
 6119              		.loc 1 1514 3 view .LVU1968
1514:src/display.c **** 			if (exp < 0) {
 6120              		.loc 1 1514 6 is_stmt 0 view .LVU1969
 6121 06d2 002C     		cmp	r4, #0
 6122 06d4 00F0F380 		beq	.L450
1515:src/display.c **** 				x[9] = '-';
 6123              		.loc 1 1515 4 is_stmt 1 view .LVU1970
1515:src/display.c **** 				x[9] = '-';
 6124              		.loc 1 1515 7 is_stmt 0 view .LVU1971
 6125 06d8 019B     		ldr	r3, [sp, #4]
1523:src/display.c **** 		}
 6126              		.loc 1 1523 16 view .LVU1972
 6127 06da 9E49     		ldr	r1, .L673+4
1515:src/display.c **** 				x[9] = '-';
 6128              		.loc 1 1515 7 view .LVU1973
 6129 06dc 002B     		cmp	r3, #0
1516:src/display.c **** 				exp = -exp;
 6130              		.loc 1 1516 5 is_stmt 1 view .LVU1974
1517:src/display.c **** 			}
 6131              		.loc 1 1517 5 view .LVU1975
1517:src/display.c **** 			}
 6132              		.loc 1 1517 9 is_stmt 0 view .LVU1976
 6133 06de BCBF     		itt	lt
 6134 06e0 5B42     		rsblt	r3, r3, #0
 6135 06e2 0193     		strlt	r3, [sp, #4]
 6136              	.LVL671:
1521:src/display.c **** 			x[10] = '0' + j;
 6137              		.loc 1 1521 6 view .LVU1977
 6138 06e4 0198     		ldr	r0, [sp, #4]
 6139 06e6 9C4B     		ldr	r3, .L673+8
1516:src/display.c **** 				exp = -exp;
 6140              		.loc 1 1516 10 view .LVU1978
 6141 06e8 B4BF     		ite	lt
 6142 06ea 2D22     		movlt	r2, #45
1520:src/display.c **** 			j = exp / 1000;
 6143              		.loc 1 1520 10 view .LVU1979
 6144 06ec 2022     		movge	r2, #32
 6145 06ee 88F81220 		strb	r2, [r8, #18]
1521:src/display.c **** 			x[10] = '0' + j;
 6146              		.loc 1 1521 4 is_stmt 1 view .LVU1980
1521:src/display.c **** 			x[10] = '0' + j;
 6147              		.loc 1 1521 6 is_stmt 0 view .LVU1981
 6148 06f2 0246     		mov	r2, r0
 6149 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6150 06f8 9B09     		lsrs	r3, r3, #6
 6151              	.LVL672:
1522:src/display.c **** 			exp -= 1000 * j;
 6152              		.loc 1 1522 4 is_stmt 1 view .LVU1982
1522:src/display.c **** 			exp -= 1000 * j;
 6153              		.loc 1 1522 16 is_stmt 0 view .LVU1983
 6154 06fa 03F13002 		add	r2, r3, #48
1523:src/display.c **** 		}
 6155              		.loc 1 1523 8 view .LVU1984
 6156 06fe 01FB0303 		mla	r3, r1, r3, r0
 6157              	.LVL673:
1523:src/display.c **** 		}
ARM GAS  /tmp/ccQmbpxO.s 			page 189


 6158              		.loc 1 1523 8 view .LVU1985
 6159 0702 0193     		str	r3, [sp, #4]
 6160              	.LVL674:
1522:src/display.c **** 			exp -= 1000 * j;
 6161              		.loc 1 1522 10 view .LVU1986
 6162 0704 88F81320 		strb	r2, [r8, #19]
1523:src/display.c **** 		}
 6163              		.loc 1 1523 4 is_stmt 1 view .LVU1987
 6164              	.LVL675:
 6165              	.L452:
1529:src/display.c **** 		*x = 0;
 6166              		.loc 1 1529 3 view .LVU1988
 6167 0708 0B22     		movs	r2, #11
 6168 070a 2946     		mov	r1, r5
 6169 070c 08F10A00 		add	r0, r8, #10
 6170 0710 FFF7FEFF 		bl	xcopy
 6171              	.LVL676:
1530:src/display.c **** 		set_exp(exp, 1, CNULL);
 6172              		.loc 1 1530 3 view .LVU1989
1530:src/display.c **** 		set_exp(exp, 1, CNULL);
 6173              		.loc 1 1530 6 is_stmt 0 view .LVU1990
 6174 0714 0022     		movs	r2, #0
1531:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6175              		.loc 1 1531 3 view .LVU1991
 6176 0716 0198     		ldr	r0, [sp, #4]
1530:src/display.c **** 		set_exp(exp, 1, CNULL);
 6177              		.loc 1 1530 6 view .LVU1992
 6178 0718 88F80920 		strb	r2, [r8, #9]
1531:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6179              		.loc 1 1531 3 is_stmt 1 view .LVU1993
 6180 071c 0121     		movs	r1, #1
 6181 071e FFF7FEFF 		bl	set_exp
 6182              	.LVL677:
1532:src/display.c **** 	}
 6183              		.loc 1 1532 3 view .LVU1994
1532:src/display.c **** 	}
 6184              		.loc 1 1532 3 is_stmt 0 view .LVU1995
 6185 0722 A8EB0606 		sub	r6, r8, r6
 6186              	.LVL678:
1532:src/display.c **** 	}
 6187              		.loc 1 1532 5 view .LVU1996
 6188 0726 0924     		movs	r4, #9
 6189              	.LVL679:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6190              		.loc 1 1535 10 is_stmt 1 view .LVU1997
 6191 0728 9AE0     		b	.L453
 6192              	.LVL680:
 6193              	.L524:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6194              		.loc 1 1535 10 is_stmt 0 view .LVU1998
 6195              	.LBE379:
 6196              	.LBE378:
1851:src/display.c **** 				obp--;
 6197              		.loc 1 1851 10 is_stmt 1 view .LVU1999
 6198 072a 4345     		cmp	r3, r8
 6199 072c 88BF     		it	hi
 6200 072e 1A46     		movhi	r2, r3
ARM GAS  /tmp/ccQmbpxO.s 			page 190


 6201 0730 7FF6B6AD 		bls	.L502
 6202              	.L526:
1852:src/display.c **** 				odig--;
 6203              		.loc 1 1852 5 discriminator 1 view .LVU2000
 6204 0734 1346     		mov	r3, r2
 6205              	.LVL681:
1852:src/display.c **** 				odig--;
 6206              		.loc 1 1852 5 is_stmt 0 discriminator 1 view .LVU2001
 6207 0736 013A     		subs	r2, r2, #1
 6208              	.LVL682:
1853:src/display.c **** 			}
 6209              		.loc 1 1853 5 is_stmt 1 discriminator 1 view .LVU2002
1851:src/display.c **** 				obp--;
 6210              		.loc 1 1851 19 is_stmt 0 discriminator 1 view .LVU2003
 6211 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6212 073c 3029     		cmp	r1, #48
 6213 073e 7FF4AFAD 		bne	.L502
1851:src/display.c **** 				obp--;
 6214              		.loc 1 1851 10 view .LVU2004
 6215 0742 9045     		cmp	r8, r2
1853:src/display.c **** 			}
 6216              		.loc 1 1853 9 view .LVU2005
 6217 0744 07F1FF37 		add	r7, r7, #-1
 6218              	.LVL683:
1851:src/display.c **** 				obp--;
 6219              		.loc 1 1851 10 is_stmt 1 view .LVU2006
 6220 0748 F4D1     		bne	.L526
 6221 074a 4346     		mov	r3, r8
 6222 074c A8E5     		b	.L502
 6223              	.LVL684:
 6224              	.L513:
1836:src/display.c **** 			odig++;
 6225              		.loc 1 1836 4 view .LVU2007
1837:src/display.c **** 			*obp++ = '.';
 6226              		.loc 1 1837 4 view .LVU2008
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6227              		.loc 1 1838 4 view .LVU2009
1836:src/display.c **** 			odig++;
 6228              		.loc 1 1836 11 is_stmt 0 view .LVU2010
 6229 074e 42F63063 		movw	r3, #11824
 6230 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
1839:src/display.c **** 				*obp++ = '0';
 6231              		.loc 1 1839 4 is_stmt 1 view .LVU2011
 6232              	.LVL685:
1839:src/display.c **** 				*obp++ = '0';
 6233              		.loc 1 1839 18 view .LVU2012
1839:src/display.c **** 				*obp++ = '0';
 6234              		.loc 1 1839 4 is_stmt 0 view .LVU2013
 6235 0756 6B1C     		adds	r3, r5, #1
 6236              	.LVL686:
1839:src/display.c **** 				*obp++ = '0';
 6237              		.loc 1 1839 4 view .LVU2014
 6238 0758 00F0F280 		beq	.L571
 6239 075c C5F10101 		rsb	r1, r5, #1
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6240              		.loc 1 1838 8 view .LVU2015
 6241 0760 0DF11603 		add	r3, sp, #22
ARM GAS  /tmp/ccQmbpxO.s 			page 191


 6242              	.LVL687:
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6243              		.loc 1 1838 8 view .LVU2016
 6244 0764 4144     		add	r1, r1, r8
 6245 0766 1A46     		mov	r2, r3
1840:src/display.c **** 				odig++;
 6246              		.loc 1 1840 12 view .LVU2017
 6247 0768 3020     		movs	r0, #48
 6248              	.LVL688:
 6249              	.L522:
1840:src/display.c **** 				odig++;
 6250              		.loc 1 1840 5 is_stmt 1 discriminator 3 view .LVU2018
1840:src/display.c **** 				odig++;
 6251              		.loc 1 1840 12 is_stmt 0 discriminator 3 view .LVU2019
 6252 076a 02F8010B 		strb	r0, [r2], #1
 6253              	.LVL689:
1841:src/display.c **** 				dd--;
 6254              		.loc 1 1841 5 is_stmt 1 discriminator 3 view .LVU2020
1842:src/display.c **** 			}
 6255              		.loc 1 1842 5 discriminator 3 view .LVU2021
1839:src/display.c **** 				*obp++ = '0';
 6256              		.loc 1 1839 23 discriminator 3 view .LVU2022
1839:src/display.c **** 				*obp++ = '0';
 6257              		.loc 1 1839 18 discriminator 3 view .LVU2023
1839:src/display.c **** 				*obp++ = '0';
 6258              		.loc 1 1839 4 is_stmt 0 discriminator 3 view .LVU2024
 6259 076e 8A42     		cmp	r2, r1
 6260 0770 FBD1     		bne	.L522
 6261 0772 AA44     		add	r10, r10, r5
 6262 0774 EA43     		mvns	r2, r5
 6263              	.LVL690:
1839:src/display.c **** 				*obp++ = '0';
 6264              		.loc 1 1839 4 discriminator 3 view .LVU2025
 6265 0776 0AF1010A 		add	r10, r10, #1
 6266 077a 1344     		add	r3, r3, r2
 6267 077c 6F42     		rsbs	r7, r5, #0
 6268              	.L521:
 6269              	.LVL691:
1844:src/display.c **** 				*obp++ = *p++;
 6270              		.loc 1 1844 10 is_stmt 1 view .LVU2026
 6271 077e BAF1000F 		cmp	r10, #0
1844:src/display.c **** 				*obp++ = *p++;
 6272              		.loc 1 1844 13 is_stmt 0 view .LVU2027
 6273 0782 0AF1FF32 		add	r2, r10, #-1
 6274              	.LVL692:
1844:src/display.c **** 				*obp++ = *p++;
 6275              		.loc 1 1844 10 view .LVU2028
 6276 0786 7FF708AF 		ble	.L518
 6277 078a 9A44     		add	r10, r10, r3
 6278 078c 0AF1FF30 		add	r0, r10, #-1
 6279 0790 013B     		subs	r3, r3, #1
 6280              	.LVL693:
 6281              	.L523:
1845:src/display.c **** 				odig++;
 6282              		.loc 1 1845 5 is_stmt 1 view .LVU2029
1845:src/display.c **** 				odig++;
 6283              		.loc 1 1845 12 is_stmt 0 view .LVU2030
ARM GAS  /tmp/ccQmbpxO.s 			page 192


 6284 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6285              	.LVL694:
1845:src/display.c **** 				odig++;
 6286              		.loc 1 1845 12 view .LVU2031
 6287 0796 03F8011F 		strb	r1, [r3, #1]!
1846:src/display.c **** 			}
 6288              		.loc 1 1846 5 is_stmt 1 view .LVU2032
1844:src/display.c **** 				*obp++ = *p++;
 6289              		.loc 1 1844 10 view .LVU2033
1844:src/display.c **** 				*obp++ = *p++;
 6290              		.loc 1 1844 10 is_stmt 0 view .LVU2034
 6291 079a 8342     		cmp	r3, r0
 6292 079c F9D1     		bne	.L523
 6293              	.LVL695:
1844:src/display.c **** 				*obp++ = *p++;
 6294              		.loc 1 1844 10 view .LVU2035
 6295 079e 0137     		adds	r7, r7, #1
 6296 07a0 1744     		add	r7, r7, r2
 6297 07a2 5346     		mov	r3, r10
 6298 07a4 F9E6     		b	.L518
 6299              	.LVL696:
 6300              	.L528:
1862:src/display.c **** 			odig++;
 6301              		.loc 1 1862 4 is_stmt 1 view .LVU2036
1862:src/display.c **** 			odig++;
 6302              		.loc 1 1862 11 is_stmt 0 view .LVU2037
 6303 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6304 07aa 8DF81430 		strb	r3, [sp, #20]
1863:src/display.c **** 			dd--;
 6305              		.loc 1 1863 4 is_stmt 1 view .LVU2038
 6306              	.LVL697:
1864:src/display.c **** 			exp--;
 6307              		.loc 1 1864 4 view .LVU2039
1864:src/display.c **** 			exp--;
 6308              		.loc 1 1864 6 is_stmt 0 view .LVU2040
 6309 07ae 0AF1FF3A 		add	r10, r10, #-1
 6310              	.LVL698:
1865:src/display.c **** 		case -2:
 6311              		.loc 1 1865 4 is_stmt 1 view .LVU2041
1865:src/display.c **** 		case -2:
 6312              		.loc 1 1865 7 is_stmt 0 view .LVU2042
 6313 07b2 013D     		subs	r5, r5, #1
 6314              	.LVL699:
1865:src/display.c **** 		case -2:
 6315              		.loc 1 1865 7 view .LVU2043
 6316 07b4 0327     		movs	r7, #3
1862:src/display.c **** 			odig++;
 6317              		.loc 1 1862 15 view .LVU2044
 6318 07b6 0DF14909 		add	r9, sp, #73
 6319              	.LVL700:
1862:src/display.c **** 			odig++;
 6320              		.loc 1 1862 8 view .LVU2045
 6321 07ba 0DF11501 		add	r1, sp, #21
 6322              	.LVL701:
1862:src/display.c **** 			odig++;
 6323              		.loc 1 1862 8 view .LVU2046
 6324 07be A6E6     		b	.L530
ARM GAS  /tmp/ccQmbpxO.s 			page 193


 6325              	.LVL702:
 6326              	.L476:
1727:src/display.c **** 			/* We might have push the fixed decimals off the
 6327              		.loc 1 1727 4 is_stmt 1 view .LVU2047
1731:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6328              		.loc 1 1731 4 view .LVU2048
1731:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6329              		.loc 1 1731 21 is_stmt 0 view .LVU2049
 6330 07c0 05EB0A03 		add	r3, r5, r10
1731:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6331              		.loc 1 1731 7 view .LVU2050
 6332 07c4 9E42     		cmp	r6, r3
1732:src/display.c **** 		}
 6333              		.loc 1 1732 5 is_stmt 1 view .LVU2051
1732:src/display.c **** 		}
 6334              		.loc 1 1732 27 is_stmt 0 view .LVU2052
 6335 07c6 DCBF     		itt	le
 6336 07c8 06F1FF3A 		addle	r10, r6, #-1
 6337              	.LVL703:
1732:src/display.c **** 		}
 6338              		.loc 1 1732 8 view .LVU2053
 6339 07cc AAEB050A 		suble	r10, r10, r5
 6340              	.LVL704:
1732:src/display.c **** 		}
 6341              		.loc 1 1732 8 view .LVU2054
 6342 07d0 2A46     		mov	r2, r5
 6343 07d2 BAE4     		b	.L474
 6344              	.LVL705:
 6345              	.L568:
1768:src/display.c **** 			case -1:
 6346              		.loc 1 1768 22 view .LVU2055
 6347 07d4 0227     		movs	r7, #2
 6348 07d6 4046     		mov	r0, r8
 6349              	.LVL706:
 6350              	.L501:
1777:src/display.c **** 				odig++;
 6351              		.loc 1 1777 5 is_stmt 1 view .LVU2056
1777:src/display.c **** 				odig++;
 6352              		.loc 1 1777 12 is_stmt 0 view .LVU2057
 6353 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6354              	.LVL707:
1777:src/display.c **** 				odig++;
 6355              		.loc 1 1777 12 view .LVU2058
 6356 07dc 00F8013B 		strb	r3, [r0], #1
 6357              	.LVL708:
1778:src/display.c **** 				dd--;
 6358              		.loc 1 1778 5 is_stmt 1 view .LVU2059
1779:src/display.c **** 				exp--;
 6359              		.loc 1 1779 5 view .LVU2060
1780:src/display.c **** 			case 0:
 6360              		.loc 1 1780 5 view .LVU2061
1780:src/display.c **** 			case 0:
 6361              		.loc 1 1780 8 is_stmt 0 view .LVU2062
 6362 07e0 013D     		subs	r5, r5, #1
 6363              	.LVL709:
 6364              	.L498:
1782:src/display.c **** 			};
ARM GAS  /tmp/ccQmbpxO.s 			page 194


 6365              		.loc 1 1782 5 is_stmt 1 view .LVU2063
1783:src/display.c **** 			*obp++ = *p++;
 6366              		.loc 1 1783 5 view .LVU2064
1784:src/display.c **** 			odig++;
 6367              		.loc 1 1784 4 view .LVU2065
1784:src/display.c **** 			odig++;
 6368              		.loc 1 1784 15 is_stmt 0 view .LVU2066
 6369 07e2 4946     		mov	r1, r9
 6370              	.LVL710:
1784:src/display.c **** 			odig++;
 6371              		.loc 1 1784 11 view .LVU2067
 6372 07e4 0346     		mov	r3, r0
 6373 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6374              	.LVL711:
1784:src/display.c **** 			odig++;
 6375              		.loc 1 1784 11 view .LVU2068
 6376 07ea 03F802CB 		strb	ip, [r3], #2
1785:src/display.c **** 			*obp++ = '.';
 6377              		.loc 1 1785 4 is_stmt 1 view .LVU2069
1786:src/display.c **** 			for (i=1; i<count; i++) {
 6378              		.loc 1 1786 4 view .LVU2070
 6379              	.LVL712:
1787:src/display.c **** 				*obp++ = *p++;
 6380              		.loc 1 1787 4 is_stmt 0 view .LVU2071
 6381 07ee 012A     		cmp	r2, #1
1786:src/display.c **** 			for (i=1; i<count; i++) {
 6382              		.loc 1 1786 11 view .LVU2072
 6383 07f0 4FF02E0C 		mov	ip, #46
 6384 07f4 80F801C0 		strb	ip, [r0, #1]
1787:src/display.c **** 				*obp++ = *p++;
 6385              		.loc 1 1787 4 is_stmt 1 view .LVU2073
 6386              	.LVL713:
1787:src/display.c **** 				*obp++ = *p++;
 6387              		.loc 1 1787 14 view .LVU2074
1787:src/display.c **** 				*obp++ = *p++;
 6388              		.loc 1 1787 4 is_stmt 0 view .LVU2075
 6389 07f8 53DD     		ble	.L569
1787:src/display.c **** 				*obp++ = *p++;
 6390              		.loc 1 1787 4 view .LVU2076
 6391 07fa 0130     		adds	r0, r0, #1
 6392 07fc 9144     		add	r9, r9, r2
 6393              	.LVL714:
 6394              	.L503:
1788:src/display.c **** 				odig++;
 6395              		.loc 1 1788 5 is_stmt 1 discriminator 3 view .LVU2077
1788:src/display.c **** 				odig++;
 6396              		.loc 1 1788 12 is_stmt 0 discriminator 3 view .LVU2078
 6397 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6398              	.LVL715:
1788:src/display.c **** 				odig++;
 6399              		.loc 1 1788 12 discriminator 3 view .LVU2079
 6400 0802 00F801CF 		strb	ip, [r0, #1]!
1789:src/display.c **** 			}
 6401              		.loc 1 1789 5 is_stmt 1 discriminator 3 view .LVU2080
1787:src/display.c **** 				*obp++ = *p++;
 6402              		.loc 1 1787 23 discriminator 3 view .LVU2081
1787:src/display.c **** 				*obp++ = *p++;
ARM GAS  /tmp/ccQmbpxO.s 			page 195


 6403              		.loc 1 1787 14 discriminator 3 view .LVU2082
1787:src/display.c **** 				*obp++ = *p++;
 6404              		.loc 1 1787 4 is_stmt 0 discriminator 3 view .LVU2083
 6405 0806 4945     		cmp	r1, r9
 6406 0808 F9D1     		bne	.L503
 6407 080a 013A     		subs	r2, r2, #1
 6408              	.LVL716:
1787:src/display.c **** 				*obp++ = *p++;
 6409              		.loc 1 1787 4 discriminator 3 view .LVU2084
 6410 080c 1344     		add	r3, r3, r2
 6411 080e 1744     		add	r7, r7, r2
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6412              		.loc 1 1791 13 view .LVU2085
 6413 0810 4FF0010B 		mov	fp, #1
 6414 0814 44E5     		b	.L502
 6415              	.LVL717:
 6416              	.L499:
1771:src/display.c **** 				odig++;
 6417              		.loc 1 1771 5 is_stmt 1 view .LVU2086
1771:src/display.c **** 				odig++;
 6418              		.loc 1 1771 12 is_stmt 0 view .LVU2087
 6419 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6420 081a 8DF81430 		strb	r3, [sp, #20]
1772:src/display.c **** 				dd--;
 6421              		.loc 1 1772 5 is_stmt 1 view .LVU2088
 6422              	.LVL718:
1773:src/display.c **** 				exp--;
 6423              		.loc 1 1773 5 view .LVU2089
1774:src/display.c **** 			case -2:
 6424              		.loc 1 1774 5 view .LVU2090
1774:src/display.c **** 			case -2:
 6425              		.loc 1 1774 8 is_stmt 0 view .LVU2091
 6426 081e 013D     		subs	r5, r5, #1
 6427              	.LVL719:
1774:src/display.c **** 			case -2:
 6428              		.loc 1 1774 8 view .LVU2092
 6429 0820 0327     		movs	r7, #3
1771:src/display.c **** 				odig++;
 6430              		.loc 1 1771 16 view .LVU2093
 6431 0822 0DF14909 		add	r9, sp, #73
 6432              	.LVL720:
1771:src/display.c **** 				odig++;
 6433              		.loc 1 1771 9 view .LVU2094
 6434 0826 0DF11500 		add	r0, sp, #21
 6435              	.LVL721:
1771:src/display.c **** 				odig++;
 6436              		.loc 1 1771 9 view .LVU2095
 6437 082a D5E7     		b	.L501
 6438              	.LVL722:
 6439              	.L537:
1913:src/display.c **** 		}
 6440              		.loc 1 1913 5 is_stmt 1 view .LVU2096
 6441 082c 2D21     		movs	r1, #45
 6442 082e A6F10900 		sub	r0, r6, #9
 6443 0832 FFF7FEFF 		bl	set_dig
 6444              	.LVL723:
 6445 0836 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccQmbpxO.s 			page 196


 6446 0838 43E5     		b	.L533
 6447              	.LVL724:
 6448              	.L668:
 6449              	.LBB388:
 6450              	.LBB386:
 6451              	.LBB380:
1480:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6452              		.loc 1 1480 3 view .LVU2097
1483:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6453              		.loc 1 1483 3 view .LVU2098
1483:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6454              		.loc 1 1483 13 is_stmt 0 view .LVU2099
 6455 083a 08F10306 		add	r6, r8, #3
 6456              	.LVL725:
1484:src/display.c **** 		if (grouping) {
 6457              		.loc 1 1484 3 is_stmt 1 view .LVU2100
 6458 083e 4749     		ldr	r1, .L673+12
 6459 0840 0D22     		movs	r2, #13
 6460 0842 3046     		mov	r0, r6
 6461 0844 FFF7FEFF 		bl	xcopy
 6462              	.LVL726:
1485:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6463              		.loc 1 1485 3 view .LVU2101
1486:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
 6464              		.loc 1 1486 4 view .LVU2102
 6465 0848 1322     		movs	r2, #19
 6466 084a 08EB0201 		add	r1, r8, r2
 6467 084e 08F11400 		add	r0, r8, #20
 6468 0852 FFF7FEFF 		bl	xcopy
 6469              	.LVL727:
1487:src/display.c **** 			x += 3 + 13 + 7;
 6470              		.loc 1 1487 4 view .LVU2103
1488:src/display.c **** 		}
 6471              		.loc 1 1488 6 is_stmt 0 view .LVU2104
 6472 0856 08F11705 		add	r5, r8, #23
 6473              	.LVL728:
1487:src/display.c **** 			x += 3 + 13 + 7;
 6474              		.loc 1 1487 22 view .LVU2105
 6475 085a 88F81370 		strb	r7, [r8, #19]
1488:src/display.c **** 		}
 6476              		.loc 1 1488 4 is_stmt 1 view .LVU2106
 6477              	.LVL729:
1501:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
 6478              		.loc 1 1501 3 view .LVU2107
1502:src/display.c **** 	}
 6479              		.loc 1 1502 3 view .LVU2108
1502:src/display.c **** 	}
 6480              		.loc 1 1502 5 is_stmt 0 view .LVU2109
 6481 085e 1B24     		movs	r4, #27
 6482              	.LVL730:
 6483              	.L453:
1502:src/display.c **** 	}
 6484              		.loc 1 1502 5 view .LVU2110
 6485              	.LBE380:
1536:src/display.c **** 		}
 6486              		.loc 1 1536 4 is_stmt 1 view .LVU2111
 6487              	.LBB381:
ARM GAS  /tmp/ccQmbpxO.s 			page 197


 6488              	.LBI381:
 354:src/display.c **** 	if (sep == SEP_NONE)
 6489              		.loc 1 354 14 view .LVU2112
 6490              	.LBB382:
 355:src/display.c **** 		return res;
 6491              		.loc 1 355 2 view .LVU2113
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 6492              		.loc 1 357 2 view .LVU2114
 6493 0860 2046     		mov	r0, r4
 6494 0862 5146     		mov	r1, r10
 6495              	.LBE382:
 6496              	.LBE381:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6497              		.loc 1 1535 37 is_stmt 0 view .LVU2115
 6498 0864 1B34     		adds	r4, r4, #27
 6499              	.LVL731:
 6500              	.LBB384:
 6501              	.LBB383:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6502              		.loc 1 1535 37 view .LVU2116
 6503 0866 FFF7FEFF 		bl	set_separator.part.0
 6504              	.LVL732:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6505              		.loc 1 1535 37 view .LVU2117
 6506              	.LBE383:
 6507              	.LBE384:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6508              		.loc 1 1535 35 is_stmt 1 view .LVU2118
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6509              		.loc 1 1535 10 view .LVU2119
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6510              		.loc 1 1535 3 is_stmt 0 view .LVU2120
 6511 086a 512C     		cmp	r4, #81
 6512 086c F8DD     		ble	.L453
 6513 086e 6C1E     		subs	r4, r5, #1
 6514              	.LVL733:
 6515              	.L455:
1541:src/display.c **** 
 6516              		.loc 1 1541 3 is_stmt 1 view .LVU2121
 6517 0870 5846     		mov	r0, fp
 6518 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1540:src/display.c **** 		set_dig(j, x[i]);
 6519              		.loc 1 1540 33 is_stmt 0 view .LVU2122
 6520 0876 0BF1090B 		add	fp, fp, #9
 6521              	.LVL734:
1541:src/display.c **** 
 6522              		.loc 1 1541 3 view .LVU2123
 6523 087a FFF7FEFF 		bl	set_dig
 6524              	.LVL735:
1540:src/display.c **** 		set_dig(j, x[i]);
 6525              		.loc 1 1540 26 is_stmt 1 view .LVU2124
1540:src/display.c **** 		set_dig(j, x[i]);
 6526              		.loc 1 1540 18 view .LVU2125
1540:src/display.c **** 		set_dig(j, x[i]);
 6527              		.loc 1 1540 2 is_stmt 0 view .LVU2126
 6528 087e BBF16C0F 		cmp	fp, #108
 6529 0882 F5D1     		bne	.L455
ARM GAS  /tmp/ccQmbpxO.s 			page 198


1543:src/display.c **** 	set_status(upper_str - negative);
 6530              		.loc 1 1543 2 is_stmt 1 view .LVU2127
1543:src/display.c **** 	set_status(upper_str - negative);
 6531              		.loc 1 1543 5 is_stmt 0 view .LVU2128
 6532 0884 0023     		movs	r3, #0
1544:src/display.c **** }
 6533              		.loc 1 1544 2 view .LVU2129
 6534 0886 3046     		mov	r0, r6
1543:src/display.c **** 	set_status(upper_str - negative);
 6535              		.loc 1 1543 5 view .LVU2130
 6536 0888 2B70     		strb	r3, [r5]
1544:src/display.c **** }
 6537              		.loc 1 1544 2 is_stmt 1 view .LVU2131
 6538 088a FFF7FEFF 		bl	set_status
 6539              	.LVL736:
1545:src/display.c **** 
 6540              		.loc 1 1545 1 is_stmt 0 view .LVU2132
 6541 088e 43E5     		b	.L434
 6542              	.LVL737:
 6543              	.L665:
1545:src/display.c **** 
 6544              		.loc 1 1545 1 view .LVU2133
 6545              	.LBE386:
 6546              	.LBE388:
1601:src/display.c ****  				return;
 6547              		.loc 1 1601 5 is_stmt 1 view .LVU2134
 6548 0890 3046     		mov	r0, r6
 6549 0892 FFF7FEFF 		bl	set_x_hms
 6550              	.LVL738:
1602:src/display.c **** 			}
 6551              		.loc 1 1602 6 view .LVU2135
 6552 0896 3FE5     		b	.L434
 6553              	.LVL739:
 6554              	.L566:
1763:src/display.c **** 		if (count != *display_digits)
 6555              		.loc 1 1763 14 is_stmt 0 view .LVU2136
 6556 0898 3246     		mov	r2, r6
 6557 089a A3E4     		b	.L494
 6558              	.LVL740:
 6559              	.L567:
1768:src/display.c **** 			case -1:
 6560              		.loc 1 1768 22 view .LVU2137
 6561 089c 0127     		movs	r7, #1
 6562 089e 4046     		mov	r0, r8
 6563 08a0 9FE7     		b	.L498
 6564              	.LVL741:
 6565              	.L569:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6566              		.loc 1 1791 13 view .LVU2138
 6567 08a2 4FF0010B 		mov	fp, #1
 6568 08a6 FBE4     		b	.L502
 6569              	.LVL742:
 6570              	.L541:
 6571              	.LBB389:
 6572              	.LBB365:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6573              		.loc 1 1791 13 view .LVU2139
ARM GAS  /tmp/ccQmbpxO.s 			page 199


 6574 08a8 3046     		mov	r0, r6
 6575 08aa 0193     		str	r3, [sp, #4]
 6576 08ac FFF7FEFF 		bl	set_separator.part.0
 6577              	.LVL743:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6578              		.loc 1 1791 13 view .LVU2140
 6579 08b0 019B     		ldr	r3, [sp, #4]
 6580 08b2 0446     		mov	r4, r0
 6581              	.LVL744:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6582              		.loc 1 1791 13 view .LVU2141
 6583 08b4 F9E5     		b	.L539
 6584              	.LVL745:
 6585              	.L479:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6586              		.loc 1 1791 13 view .LVU2142
 6587              	.LBE365:
 6588              	.LBE389:
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6589              		.loc 1 1741 3 is_stmt 1 view .LVU2143
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6590              		.loc 1 1741 6 is_stmt 0 view .LVU2144
 6591 08b6 4B45     		cmp	r3, r9
 6592 08b8 7FF460AC 		bne	.L550
 6593 08bc 63E5     		b	.L551
 6594              	.LVL746:
 6595              	.L450:
 6596              	.LBB390:
 6597              	.LBB387:
1526:src/display.c **** 			x[10] = '\0';
 6598              		.loc 1 1526 4 is_stmt 1 view .LVU2145
1527:src/display.c **** 		}
 6599              		.loc 1 1527 4 view .LVU2146
1526:src/display.c **** 			x[10] = '\0';
 6600              		.loc 1 1526 9 is_stmt 0 view .LVU2147
 6601 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6602 08c2 21E7     		b	.L452
 6603              	.LVL747:
 6604              	.L667:
 6605              	.LBB385:
1451:src/display.c **** 
 6606              		.loc 1 1451 3 is_stmt 1 view .LVU2148
1453:src/display.c **** 		xcopy(x, small_minus, 4);
 6607              		.loc 1 1453 3 view .LVU2149
 6608 08c4 2222     		movs	r2, #34
 6609 08c6 0DF11501 		add	r1, sp, #21
 6610 08ca 06A8     		add	r0, sp, #24
 6611              	.LVL748:
1453:src/display.c **** 		xcopy(x, small_minus, 4);
 6612              		.loc 1 1453 3 is_stmt 0 view .LVU2150
 6613 08cc FFF7FEFF 		bl	xcopy
 6614              	.LVL749:
1454:src/display.c **** 		x += 4;
 6615              		.loc 1 1454 3 is_stmt 1 view .LVU2151
 6616 08d0 4046     		mov	r0, r8
 6617 08d2 2349     		ldr	r1, .L673+16
 6618 08d4 0422     		movs	r2, #4
ARM GAS  /tmp/ccQmbpxO.s 			page 200


 6619 08d6 FFF7FEFF 		bl	xcopy
 6620              	.LVL750:
1455:src/display.c **** 		negative = 4;
 6621              		.loc 1 1455 3 view .LVU2152
1456:src/display.c **** #else
 6622              		.loc 1 1456 3 view .LVU2153
1455:src/display.c **** 		negative = 4;
 6623              		.loc 1 1455 5 is_stmt 0 view .LVU2154
 6624 08da 0DF11808 		add	r8, sp, #24
 6625              	.LVL751:
1456:src/display.c **** #else
 6626              		.loc 1 1456 12 view .LVU2155
 6627 08de 0426     		movs	r6, #4
 6628              	.LVL752:
1456:src/display.c **** #else
 6629              		.loc 1 1456 12 view .LVU2156
 6630              	.LBE385:
 6631 08e0 C7E6     		b	.L446
 6632              	.LVL753:
 6633              	.L504:
1456:src/display.c **** #else
 6634              		.loc 1 1456 12 view .LVU2157
 6635              	.LBE387:
 6636              	.LBE390:
1807:src/display.c **** 			odig++;
 6637              		.loc 1 1807 4 is_stmt 1 view .LVU2158
1808:src/display.c **** 			*obp++ = '.';
 6638              		.loc 1 1808 4 view .LVU2159
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6639              		.loc 1 1809 4 view .LVU2160
1807:src/display.c **** 			odig++;
 6640              		.loc 1 1807 11 is_stmt 0 view .LVU2161
 6641 08e2 42F63063 		movw	r3, #11824
1810:src/display.c **** 				*obp++ = '0';
 6642              		.loc 1 1810 4 view .LVU2162
 6643 08e6 691C     		adds	r1, r5, #1
1807:src/display.c **** 			odig++;
 6644              		.loc 1 1807 11 view .LVU2163
 6645 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
1810:src/display.c **** 				*obp++ = '0';
 6646              		.loc 1 1810 4 is_stmt 1 view .LVU2164
 6647              	.LVL754:
1810:src/display.c **** 				*obp++ = '0';
 6648              		.loc 1 1810 18 view .LVU2165
1810:src/display.c **** 				*obp++ = '0';
 6649              		.loc 1 1810 4 is_stmt 0 view .LVU2166
 6650 08ec 2CD0     		beq	.L570
 6651 08ee C5F10100 		rsb	r0, r5, #1
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6652              		.loc 1 1809 8 view .LVU2167
 6653 08f2 0DF11603 		add	r3, sp, #22
 6654              	.LVL755:
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6655              		.loc 1 1809 8 view .LVU2168
 6656 08f6 4044     		add	r0, r0, r8
 6657 08f8 1946     		mov	r1, r3
 6658              	.LVL756:
ARM GAS  /tmp/ccQmbpxO.s 			page 201


1811:src/display.c **** 				odig++;
 6659              		.loc 1 1811 12 view .LVU2169
 6660 08fa 3027     		movs	r7, #48
 6661              	.LVL757:
 6662              	.L511:
1811:src/display.c **** 				odig++;
 6663              		.loc 1 1811 5 is_stmt 1 discriminator 3 view .LVU2170
1811:src/display.c **** 				odig++;
 6664              		.loc 1 1811 12 is_stmt 0 discriminator 3 view .LVU2171
 6665 08fc 01F8017B 		strb	r7, [r1], #1
 6666              	.LVL758:
1812:src/display.c **** 			}
 6667              		.loc 1 1812 5 is_stmt 1 discriminator 3 view .LVU2172
1810:src/display.c **** 				*obp++ = '0';
 6668              		.loc 1 1810 23 discriminator 3 view .LVU2173
1810:src/display.c **** 				*obp++ = '0';
 6669              		.loc 1 1810 18 discriminator 3 view .LVU2174
1810:src/display.c **** 				*obp++ = '0';
 6670              		.loc 1 1810 4 is_stmt 0 discriminator 3 view .LVU2175
 6671 0900 8142     		cmp	r1, r0
 6672 0902 FBD1     		bne	.L511
 6673 0904 E943     		mvns	r1, r5
 6674              	.LVL759:
1810:src/display.c **** 				*obp++ = '0';
 6675              		.loc 1 1810 4 discriminator 3 view .LVU2176
 6676 0906 0B44     		add	r3, r3, r1
 6677 0908 6F42     		rsbs	r7, r5, #0
 6678              	.L510:
 6679              	.LVL760:
1814:src/display.c **** 				*obp++ = *p++;
 6680              		.loc 1 1814 14 is_stmt 1 view .LVU2177
1814:src/display.c **** 				*obp++ = *p++;
 6681              		.loc 1 1814 4 is_stmt 0 view .LVU2178
 6682 090a 002A     		cmp	r2, #0
 6683 090c 7FF7C8AC 		ble	.L502
 6684 0910 02F1FF3C 		add	ip, r2, #-1
 6685 0914 9C44     		add	ip, ip, r3
 6686 0916 591E     		subs	r1, r3, #1
 6687              	.LVL761:
 6688              	.L512:
1815:src/display.c **** 				odig++;
 6689              		.loc 1 1815 5 is_stmt 1 discriminator 3 view .LVU2179
1815:src/display.c **** 				odig++;
 6690              		.loc 1 1815 12 is_stmt 0 discriminator 3 view .LVU2180
 6691 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6692              	.LVL762:
1815:src/display.c **** 				odig++;
 6693              		.loc 1 1815 12 discriminator 3 view .LVU2181
 6694 091c 01F8010F 		strb	r0, [r1, #1]!
1816:src/display.c **** 			}
 6695              		.loc 1 1816 5 is_stmt 1 discriminator 3 view .LVU2182
1814:src/display.c **** 				*obp++ = *p++;
 6696              		.loc 1 1814 23 discriminator 3 view .LVU2183
 6697              	.LVL763:
1814:src/display.c **** 				*obp++ = *p++;
 6698              		.loc 1 1814 14 discriminator 3 view .LVU2184
1814:src/display.c **** 				*obp++ = *p++;
ARM GAS  /tmp/ccQmbpxO.s 			page 202


 6699              		.loc 1 1814 4 is_stmt 0 discriminator 3 view .LVU2185
 6700 0920 8C45     		cmp	ip, r1
 6701 0922 F9D1     		bne	.L512
 6702              	.LVL764:
1814:src/display.c **** 				*obp++ = *p++;
 6703              		.loc 1 1814 4 discriminator 3 view .LVU2186
 6704 0924 1344     		add	r3, r3, r2
 6705              	.LVL765:
1814:src/display.c **** 				*obp++ = *p++;
 6706              		.loc 1 1814 4 discriminator 3 view .LVU2187
 6707 0926 1744     		add	r7, r7, r2
 6708 0928 BAE4     		b	.L502
 6709              	.LVL766:
 6710              	.L666:
1757:src/display.c **** 
 6711              		.loc 1 1757 2 is_stmt 1 view .LVU2188
1757:src/display.c **** 
 6712              		.loc 1 1757 40 is_stmt 0 view .LVU2189
 6713 092a 0AF10102 		add	r2, r10, #1
1757:src/display.c **** 
 6714              		.loc 1 1757 9 view .LVU2190
 6715 092e 09EB0203 		add	r3, r9, r2
 6716              	.LVL767:
1757:src/display.c **** 
 6717              		.loc 1 1757 45 is_stmt 1 view .LVU2191
1757:src/display.c **** 
 6718              		.loc 1 1757 2 is_stmt 0 view .LVU2192
 6719 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6720 0936 002A     		cmp	r2, #0
 6721 0938 3FF496AC 		beq	.L648
1746:src/display.c **** 				extra_digits = 0;
 6722              		.loc 1 1746 34 view .LVU2193
 6723 093c 0227     		movs	r7, #2
 6724 093e 2FE4     		b	.L549
 6725              	.LVL768:
 6726              	.L571:
1837:src/display.c **** 			*obp++ = '.';
 6727              		.loc 1 1837 8 view .LVU2194
 6728 0940 0127     		movs	r7, #1
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6729              		.loc 1 1838 8 view .LVU2195
 6730 0942 0DF11603 		add	r3, sp, #22
 6731              	.LVL769:
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6732              		.loc 1 1838 8 view .LVU2196
 6733 0946 1AE7     		b	.L521
 6734              	.LVL770:
 6735              	.L570:
1808:src/display.c **** 			*obp++ = '.';
 6736              		.loc 1 1808 8 view .LVU2197
 6737 0948 0127     		movs	r7, #1
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6738              		.loc 1 1809 8 view .LVU2198
 6739 094a 0DF11603 		add	r3, sp, #22
 6740              	.LVL771:
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6741              		.loc 1 1809 8 view .LVU2199
ARM GAS  /tmp/ccQmbpxO.s 			page 203


 6742 094e DCE7     		b	.L510
 6743              	.L674:
 6744              		.align	2
 6745              	.L673:
 6746 0950 00000000 		.word	.LANCHOR1
 6747 0954 18FCFFFF 		.word	-1000
 6748 0958 D34D6210 		.word	274877907
 6749 095c 00000000 		.word	.LANCHOR14
 6750 0960 00000000 		.word	.LANCHOR13
 6751              		.cfi_endproc
 6752              	.LFE27:
 6754              		.section	.text.set_x,"ax",%progbits
 6755              		.align	1
 6756              		.p2align 2,,3
 6757              		.syntax unified
 6758              		.thumb
 6759              		.thumb_func
 6760              		.fpu fpv4-sp-d16
 6762              	set_x:
 6763              	.LVL772:
 6764              	.LFB26:
1552:src/display.c **** 	decNumber z;
 6765              		.loc 1 1552 60 is_stmt 1 view -0
 6766              		.cfi_startproc
 6767              		@ args = 0, pretend = 0, frame = 40
 6768              		@ frame_needed = 0, uses_anonymous_args = 0
1553:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6769              		.loc 1 1553 2 view .LVU2201
1554:src/display.c **** 
 6770              		.loc 1 1554 2 view .LVU2202
1552:src/display.c **** 	decNumber z;
 6771              		.loc 1 1552 60 is_stmt 0 view .LVU2203
 6772 0000 30B5     		push	{r4, r5, lr}
 6773              		.cfi_def_cfa_offset 12
 6774              		.cfi_offset 4, -12
 6775              		.cfi_offset 5, -8
 6776              		.cfi_offset 14, -4
 6777 0002 8BB0     		sub	sp, sp, #44
 6778              		.cfi_def_cfa_offset 56
1554:src/display.c **** 
 6779              		.loc 1 1554 6 view .LVU2204
 6780 0004 0C23     		movs	r3, #12
1557:src/display.c **** 	else
 6781              		.loc 1 1557 3 view .LVU2205
 6782 0006 01AD     		add	r5, sp, #4
1552:src/display.c **** 	decNumber z;
 6783              		.loc 1 1552 60 view .LVU2206
 6784 0008 0C46     		mov	r4, r1
1554:src/display.c **** 
 6785              		.loc 1 1554 6 view .LVU2207
 6786 000a 0093     		str	r3, [sp]
1556:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6787              		.loc 1 1556 2 is_stmt 1 view .LVU2208
1557:src/display.c **** 	else
 6788              		.loc 1 1557 3 is_stmt 0 view .LVU2209
 6789 000c 2946     		mov	r1, r5
 6790              	.LVL773:
ARM GAS  /tmp/ccQmbpxO.s 			page 204


1556:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6791              		.loc 1 1556 5 view .LVU2210
 6792 000e 42B1     		cbz	r2, .L676
1557:src/display.c **** 	else
 6793              		.loc 1 1557 3 is_stmt 1 view .LVU2211
 6794 0010 FFF7FEFF 		bl	decimal128ToNumber
 6795              	.LVL774:
1560:src/display.c **** }
 6796              		.loc 1 1560 2 view .LVU2212
 6797 0014 2146     		mov	r1, r4
 6798 0016 2846     		mov	r0, r5
 6799 0018 6A46     		mov	r2, sp
 6800 001a FFF7FEFF 		bl	set_x_dn
 6801              	.LVL775:
1561:src/display.c **** 
 6802              		.loc 1 1561 1 is_stmt 0 view .LVU2213
 6803 001e 0BB0     		add	sp, sp, #44
 6804              		.cfi_remember_state
 6805              		.cfi_def_cfa_offset 12
 6806              		@ sp needed
 6807 0020 30BD     		pop	{r4, r5, pc}
 6808              	.LVL776:
 6809              	.L676:
 6810              		.cfi_restore_state
1559:src/display.c **** 	set_x_dn(&z, res, &digits);
 6811              		.loc 1 1559 3 is_stmt 1 view .LVU2214
 6812 0022 FFF7FEFF 		bl	decimal64ToNumber
 6813              	.LVL777:
1560:src/display.c **** }
 6814              		.loc 1 1560 2 view .LVU2215
 6815 0026 2146     		mov	r1, r4
 6816 0028 2846     		mov	r0, r5
 6817 002a 6A46     		mov	r2, sp
 6818 002c FFF7FEFF 		bl	set_x_dn
 6819              	.LVL778:
1561:src/display.c **** 
 6820              		.loc 1 1561 1 is_stmt 0 view .LVU2216
 6821 0030 0BB0     		add	sp, sp, #44
 6822              		.cfi_def_cfa_offset 12
 6823              		@ sp needed
 6824 0032 30BD     		pop	{r4, r5, pc}
1561:src/display.c **** 
 6825              		.loc 1 1561 1 view .LVU2217
 6826              		.cfi_endproc
 6827              	.LFE26:
 6829              		.section	.text.format_reg,"ax",%progbits
 6830              		.align	1
 6831              		.p2align 2,,3
 6832              		.global	format_reg
 6833              		.syntax unified
 6834              		.thumb
 6835              		.thumb_func
 6836              		.fpu fpv4-sp-d16
 6838              	format_reg:
 6839              	.LVL779:
 6840              	.LFB28:
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
ARM GAS  /tmp/ccQmbpxO.s 			page 205


 6841              		.loc 1 1968 39 is_stmt 1 view -0
 6842              		.cfi_startproc
 6843              		@ args = 0, pretend = 0, frame = 40
 6844              		@ frame_needed = 0, uses_anonymous_args = 0
1969:src/display.c **** 
 6845              		.loc 1 1969 2 view .LVU2219
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6846              		.loc 1 1968 39 is_stmt 0 view .LVU2220
 6847 0000 30B5     		push	{r4, r5, lr}
 6848              		.cfi_def_cfa_offset 12
 6849              		.cfi_offset 4, -12
 6850              		.cfi_offset 5, -8
 6851              		.cfi_offset 14, -4
 6852 0002 8BB0     		sub	sp, sp, #44
 6853              		.cfi_def_cfa_offset 56
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6854              		.loc 1 1968 39 view .LVU2221
 6855 0004 0C46     		mov	r4, r1
 6856 0006 0546     		mov	r5, r0
1969:src/display.c **** 
 6857              		.loc 1 1969 28 view .LVU2222
 6858 0008 FFF7FEFF 		bl	get_reg_n
 6859              	.LVL780:
1971:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6860              		.loc 1 1971 6 view .LVU2223
 6861 000c 154B     		ldr	r3, .L686
 6862 000e 1B68     		ldr	r3, [r3]
 6863 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6864              	.LVL781:
1971:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6865              		.loc 1 1971 2 is_stmt 1 view .LVU2224
1971:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6866              		.loc 1 1971 5 is_stmt 0 view .LVU2225
 6867 0014 D207     		lsls	r2, r2, #31
 6868 0016 1DD4     		bmi	.L684
1974:src/display.c **** 		decNumber x;
 6869              		.loc 1 1974 7 is_stmt 1 view .LVU2226
1974:src/display.c **** 		decNumber x;
 6870              		.loc 1 1974 10 is_stmt 0 view .LVU2227
 6871 0018 44B1     		cbz	r4, .L685
 6872              	.L682:
1985:src/display.c **** }
 6873              		.loc 1 1985 3 is_stmt 1 view .LVU2228
1985:src/display.c **** }
 6874              		.loc 1 1985 23 is_stmt 0 view .LVU2229
 6875 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1985:src/display.c **** }
 6876              		.loc 1 1985 3 view .LVU2230
 6877 001e 2146     		mov	r1, r4
 6878 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6879 0024 FFF7FEFF 		bl	set_x
 6880              	.LVL782:
1986:src/display.c **** 
 6881              		.loc 1 1986 1 view .LVU2231
 6882 0028 0BB0     		add	sp, sp, #44
 6883              		.cfi_remember_state
 6884              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccQmbpxO.s 			page 206


 6885              		@ sp needed
 6886 002a 30BD     		pop	{r4, r5, pc}
 6887              	.LVL783:
 6888              	.L685:
 6889              		.cfi_restore_state
1974:src/display.c **** 		decNumber x;
 6890              		.loc 1 1974 32 discriminator 1 view .LVU2232
 6891 002c 0E4A     		ldr	r2, .L686+4
1974:src/display.c **** 		decNumber x;
 6892              		.loc 1 1974 23 discriminator 1 view .LVU2233
 6893 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6894 0030 012A     		cmp	r2, #1
 6895 0032 F2D9     		bls	.L682
 6896              	.LVL784:
 6897              	.LBB394:
 6898              	.LBI394:
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6899              		.loc 1 1968 6 is_stmt 1 view .LVU2234
 6900              	.LBB395:
 6901              	.LBB396:
1975:src/display.c **** 		int s;
 6902              		.loc 1 1975 3 view .LVU2235
1976:src/display.c **** 		unsigned long long int v;
 6903              		.loc 1 1976 3 view .LVU2236
1977:src/display.c **** 
 6904              		.loc 1 1977 3 view .LVU2237
1979:src/display.c **** 		v = dn_to_ull(&x, &s);
 6905              		.loc 1 1979 3 view .LVU2238
 6906 0034 2946     		mov	r1, r5
 6907 0036 01A8     		add	r0, sp, #4
 6908              	.LVL785:
1979:src/display.c **** 		v = dn_to_ull(&x, &s);
 6909              		.loc 1 1979 3 is_stmt 0 view .LVU2239
 6910 0038 FFF7FEFF 		bl	getRegister
 6911              	.LVL786:
1980:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6912              		.loc 1 1980 3 is_stmt 1 view .LVU2240
1980:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6913              		.loc 1 1980 7 is_stmt 0 view .LVU2241
 6914 003c 01A8     		add	r0, sp, #4
 6915 003e 6946     		mov	r1, sp
 6916 0040 FFF7FEFF 		bl	dn_to_ull
 6917              	.LVL787:
1981:src/display.c **** 	}
 6918              		.loc 1 1981 3 is_stmt 1 view .LVU2242
 6919 0044 009A     		ldr	r2, [sp]
 6920 0046 FFF7FEFF 		bl	build_value
 6921              	.LVL788:
1981:src/display.c **** 	}
 6922              		.loc 1 1981 3 is_stmt 0 view .LVU2243
 6923 004a 2246     		mov	r2, r4
 6924 004c FFF7FEFF 		bl	set_int_x
 6925              	.LVL789:
 6926              	.LBE396:
 6927              	.LBE395:
 6928              	.LBE394:
1986:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 207


 6929              		.loc 1 1986 1 view .LVU2244
 6930 0050 0BB0     		add	sp, sp, #44
 6931              		.cfi_remember_state
 6932              		.cfi_def_cfa_offset 12
 6933              		@ sp needed
 6934 0052 30BD     		pop	{r4, r5, pc}
 6935              	.LVL790:
 6936              	.L684:
 6937              		.cfi_restore_state
1972:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6938              		.loc 1 1972 3 is_stmt 1 view .LVU2245
 6939 0054 2846     		mov	r0, r5
 6940              	.LVL791:
1972:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6941              		.loc 1 1972 3 is_stmt 0 view .LVU2246
 6942 0056 FFF7FEFF 		bl	get_reg_n_int
 6943              	.LVL792:
 6944 005a 2246     		mov	r2, r4
 6945 005c FFF7FEFF 		bl	set_int_x
 6946              	.LVL793:
1986:src/display.c **** 
 6947              		.loc 1 1986 1 view .LVU2247
 6948 0060 0BB0     		add	sp, sp, #44
 6949              		.cfi_def_cfa_offset 12
 6950              		@ sp needed
 6951 0062 30BD     		pop	{r4, r5, pc}
 6952              	.LVL794:
 6953              	.L687:
1986:src/display.c **** 
 6954              		.loc 1 1986 1 view .LVU2248
 6955              		.align	2
 6956              	.L686:
 6957 0064 00000000 		.word	main_ram
 6958 0068 00000000 		.word	StateWhileOn
 6959              		.cfi_endproc
 6960              	.LFE28:
 6962              		.section	.text.set_status_right,"ax",%progbits
 6963              		.align	1
 6964              		.p2align 2,,3
 6965              		.syntax unified
 6966              		.thumb
 6967              		.thumb_func
 6968              		.fpu fpv4-sp-d16
 6970              	set_status_right:
 6971              	.LVL795:
 6972              	.LFB42:
2734:src/display.c **** 
2735:src/display.c **** 
2736:src/display.c **** /*
2737:src/display.c ****  *  Display messages (global function)
2738:src/display.c ****  */
2739:src/display.c **** extern void message(const char *str1, const char *str2)
2740:src/display.c **** {
2741:src/display.c **** 	State2.disp_freeze = 0;
2742:src/display.c **** 	State2.disp_small = 0;
2743:src/display.c **** 	WasDataEntry = 0;
2744:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
ARM GAS  /tmp/ccQmbpxO.s 			page 208


2745:src/display.c **** 		// Complete redraw necessary
2746:src/display.c **** 		DispMsg = str1;
2747:src/display.c **** 		display();
2748:src/display.c **** 	}
2749:src/display.c **** 	else {
2750:src/display.c **** 		if ( str2 != NULL ) {
2751:src/display.c **** 			reset_disp();
2752:src/display.c **** 			ShowRPN = 0;
2753:src/display.c **** 			set_annunciators();
2754:src/display.c **** 			set_digits_string( str2, 0 );
2755:src/display.c **** 		}
2756:src/display.c **** 		set_status( str1 );
2757:src/display.c **** 		finish_display();
2758:src/display.c **** 	}
2759:src/display.c **** }
2760:src/display.c **** 
2761:src/display.c **** #ifdef INCLUDE_STOPWATCH
2762:src/display.c **** 
2763:src/display.c **** static void stopwatch_exponent(const char* exponent) {
2764:src/display.c **** 	int j = SEGS_EXP_BASE;
2765:src/display.c **** 	for (; *exponent!=0; exponent++) {
2766:src/display.c **** 		set_dig_s(j, *exponent, CNULL);
2767:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
2768:src/display.c **** 	}
2769:src/display.c **** }
2770:src/display.c **** 
2771:src/display.c **** void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
2772:src/display.c **** {
2773:src/display.c **** #ifndef REALBUILD
2774:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2775:src/display.c **** #endif
2776:src/display.c **** 	reset_disp();
2777:src/display.c **** 	set_dot(DEG);
2778:src/display.c **** 	set_digits_string( str2, 0 );
2779:src/display.c **** 	State2.disp_small = force_small;
2780:src/display.c **** 	if( exponent!=NULL ) {
2781:src/display.c **** 		stopwatch_exponent(exponent);
2782:src/display.c **** 	}
2783:src/display.c **** 	set_status( str1 );
2784:src/display.c **** 	finish_display();
2785:src/display.c **** }
2786:src/display.c **** 
2787:src/display.c **** 
2788:src/display.c **** #endif // INCLUDE_STOPWATCH
2789:src/display.c **** 
2790:src/display.c **** /* Display the right hand characters from the given string.
2791:src/display.c ****  * Trying to fit as many as possible into the bitmap area,
2792:src/display.c ****  * and reduce font size if required.
2793:src/display.c ****  */
2794:src/display.c **** static void set_status_right(const char *str) {
 6973              		.loc 1 2794 47 is_stmt 1 view -0
 6974              		.cfi_startproc
 6975              		@ args = 0, pretend = 0, frame = 0
 6976              		@ frame_needed = 0, uses_anonymous_args = 0
2795:src/display.c **** 	unsigned int x = 0;
 6977              		.loc 1 2795 2 view .LVU2250
2796:src/display.c **** 	const char *p;
ARM GAS  /tmp/ccQmbpxO.s 			page 209


 6978              		.loc 1 2796 2 view .LVU2251
2797:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 6979              		.loc 1 2797 2 view .LVU2252
2794:src/display.c **** 	unsigned int x = 0;
 6980              		.loc 1 2794 47 is_stmt 0 view .LVU2253
 6981 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 6982              		.cfi_def_cfa_offset 32
 6983              		.cfi_offset 3, -32
 6984              		.cfi_offset 4, -28
 6985              		.cfi_offset 5, -24
 6986              		.cfi_offset 6, -20
 6987              		.cfi_offset 7, -16
 6988              		.cfi_offset 8, -12
 6989              		.cfi_offset 9, -8
 6990              		.cfi_offset 14, -4
 6991              		.loc 1 2797 23 view .LVU2254
 6992 0004 164B     		ldr	r3, .L702
 6993              		.loc 1 2797 41 view .LVU2255
 6994 0006 93F91630 		ldrsb	r3, [r3, #22]
 6995 000a 002B     		cmp	r3, #0
2794:src/display.c **** 	unsigned int x = 0;
 6996              		.loc 1 2794 47 view .LVU2256
 6997 000c 0646     		mov	r6, r0
 6998              		.loc 1 2797 41 view .LVU2257
 6999 000e 1DDA     		bge	.L701
 7000              	.LVL796:
 7001              	.L689:
 7002              		.loc 1 2797 12 view .LVU2258
 7003 0010 4FF00108 		mov	r8, #1
2798:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7004              		.loc 1 2798 36 view .LVU2259
 7005 0014 4FF48077 		mov	r7, #256
 7006              	.L690:
 7007              	.LVL797:
2799:src/display.c **** 
2800:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7008              		.loc 1 2800 2 is_stmt 1 discriminator 4 view .LVU2260
 7009              		.loc 1 2800 14 discriminator 4 view .LVU2261
 7010              		.loc 1 2800 2 is_stmt 0 discriminator 4 view .LVU2262
 7011 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7012 001a 3446     		mov	r4, r6
 7013 001c 1BB1     		cbz	r3, .L691
 7014              	.LVL798:
 7015              	.L692:
 7016              		.loc 1 2800 30 is_stmt 1 discriminator 3 view .LVU2263
 7017              		.loc 1 2800 26 discriminator 3 view .LVU2264
 7018              		.loc 1 2800 14 discriminator 3 view .LVU2265
 7019              		.loc 1 2800 2 is_stmt 0 discriminator 3 view .LVU2266
 7020 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7021              	.LVL799:
 7022              		.loc 1 2800 2 discriminator 3 view .LVU2267
 7023 0022 002B     		cmp	r3, #0
 7024 0024 FBD1     		bne	.L692
 7025              	.L691:
2795:src/display.c **** 	const char *p;
 7026              		.loc 1 2795 15 view .LVU2268
 7027 0026 0025     		movs	r5, #0
ARM GAS  /tmp/ccQmbpxO.s 			page 210


 7028 0028 06E0     		b	.L693
 7029              	.LVL800:
 7030              	.L694:
 7031              	.LBB397:
2801:src/display.c **** 	while (--p >= str) {
2802:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7032              		.loc 1 2802 26 view .LVU2269
 7033 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2803:src/display.c **** 
2804:src/display.c **** 		x += charlengths(c);
 7034              		.loc 1 2804 8 view .LVU2270
 7035 002c 3844     		add	r0, r0, r7
 7036 002e FFF7FEFF 		bl	charlengths
 7037              	.LVL801:
 7038              		.loc 1 2804 5 view .LVU2271
 7039 0032 0544     		add	r5, r5, r0
 7040              	.LVL802:
2805:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7041              		.loc 1 2805 3 is_stmt 1 view .LVU2272
 7042              		.loc 1 2805 6 is_stmt 0 view .LVU2273
 7043 0034 2C2D     		cmp	r5, #44
 7044 0036 03D8     		bhi	.L695
 7045              	.LVL803:
 7046              	.L693:
2802:src/display.c **** 
 7047              		.loc 1 2802 3 is_stmt 1 view .LVU2274
2802:src/display.c **** 
 7048              		.loc 1 2802 3 is_stmt 0 view .LVU2275
 7049              	.LBE397:
2801:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7050              		.loc 1 2801 8 is_stmt 1 view .LVU2276
 7051 0038 A146     		mov	r9, r4
 7052 003a 013C     		subs	r4, r4, #1
 7053              	.LVL804:
 7054              	.LBB398:
2804:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7055              		.loc 1 2804 3 view .LVU2277
2804:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7056              		.loc 1 2804 3 is_stmt 0 view .LVU2278
 7057              	.LBE398:
2801:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7058              		.loc 1 2801 8 view .LVU2279
 7059 003c A642     		cmp	r6, r4
 7060 003e F4D9     		bls	.L694
 7061              	.LVL805:
 7062              	.L695:
2806:src/display.c **** 			break;
2807:src/display.c **** 	}
2808:src/display.c **** 	set_status_sized(p+1, toolarge);
 7063              		.loc 1 2808 2 is_stmt 1 view .LVU2280
 7064 0040 4146     		mov	r1, r8
 7065 0042 4846     		mov	r0, r9
2809:src/display.c **** }
 7066              		.loc 1 2809 1 is_stmt 0 view .LVU2281
 7067 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7068              		.cfi_remember_state
 7069              		.cfi_restore 14
ARM GAS  /tmp/ccQmbpxO.s 			page 211


 7070              		.cfi_restore 9
 7071              		.cfi_restore 8
 7072              		.cfi_restore 7
 7073              		.cfi_restore 6
 7074              		.cfi_restore 5
 7075              		.cfi_restore 4
 7076              		.cfi_restore 3
 7077              		.cfi_def_cfa_offset 0
 7078              	.LVL806:
2808:src/display.c **** }
 7079              		.loc 1 2808 2 view .LVU2282
 7080 0048 FFF7FEBF 		b	set_status_sized
 7081              	.LVL807:
 7082              	.L701:
 7083              		.cfi_restore_state
 7084              	.LBB399:
 7085              	.LBI399:
2724:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7086              		.loc 1 2724 12 is_stmt 1 view .LVU2283
 7087              	.LBB400:
2725:src/display.c **** }
 7088              		.loc 1 2725 2 view .LVU2284
2725:src/display.c **** }
 7089              		.loc 1 2725 9 is_stmt 0 view .LVU2285
 7090 004c 0021     		movs	r1, #0
 7091 004e FFF7FEFF 		bl	pixel_length
 7092              	.LVL808:
2725:src/display.c **** }
 7093              		.loc 1 2725 9 view .LVU2286
 7094              	.LBE400:
 7095              	.LBE399:
2797:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7096              		.loc 1 2797 41 view .LVU2287
 7097 0052 2C28     		cmp	r0, #44
 7098 0054 DCDC     		bgt	.L689
2797:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7099              		.loc 1 2797 12 view .LVU2288
 7100 0056 4FF00008 		mov	r8, #0
2798:src/display.c **** 
 7101              		.loc 1 2798 36 view .LVU2289
 7102 005a 4746     		mov	r7, r8
 7103 005c DCE7     		b	.L690
 7104              	.L703:
 7105 005e 00BF     		.align	2
 7106              	.L702:
 7107 0060 00000000 		.word	StateWhileOn
 7108              		.cfi_endproc
 7109              	.LFE42:
 7111              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7112              		.align	2
 7113              	.LC3:
 7114 0000 32630600 		.ascii	"2c\006\000"
 7115              		.align	2
 7116              	.LC4:
 7117 0004 07C63C00 		.ascii	"\007\306<\000"
 7118              		.align	2
 7119              	.LC5:
ARM GAS  /tmp/ccQmbpxO.s 			page 212


 7120 0008 07876900 		.ascii	"\007\207i\000"
 7121              		.align	2
 7122              	.LC6:
 7123 000c 07C67900 		.ascii	"\007\306y\000"
 7124              		.align	2
 7125              	.LC7:
 7126 0010 07950600 		.ascii	"\007\225\006\000"
 7127              		.align	2
 7128              	.LC8:
 7129 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7129      060600
 7130 001b 00       		.align	2
 7131              	.LC9:
 7132 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7132      060600
 7133 0023 00       		.align	2
 7134              	.LC10:
 7135 0024 1400     		.ascii	"\024\000"
 7136 0026 0000     		.align	2
 7137              	.LC11:
 7138 0028 07C77900 		.ascii	"\007\307y\000"
 7139              		.align	2
 7140              	.LC12:
 7141 002c 07870700 		.ascii	"\007\207\007\000"
 7142              		.align	2
 7143              	.LC13:
 7144 0030 07C74400 		.ascii	"\007\307D\000"
 7145              		.align	2
 7146              	.LC14:
 7147 0034 07C73C00 		.ascii	"\007\307<\000"
 7148              		.align	2
 7149              	.LC15:
 7150 0038 07872000 		.ascii	"\007\207 \000"
 7151              		.align	2
 7152              	.LC16:
 7153 003c 06060788 		.ascii	"\006\006\007\210\007\000"
 7153      0700
 7154 0042 0000     		.align	2
 7155              	.LC17:
 7156 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7156      00
 7157 0049 000000   		.align	2
 7158              	.LC19:
 7159 004c 07E43F00 		.ascii	"\007\344?\000"
 7160              		.section	.text.annunciators,"ax",%progbits
 7161              		.align	1
 7162              		.p2align 2,,3
 7163              		.syntax unified
 7164              		.thumb
 7165              		.thumb_func
 7166              		.fpu fpv4-sp-d16
 7168              	annunciators:
 7169              	.LFB16:
 587:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7170              		.loc 1 587 32 is_stmt 1 view -0
 7171              		.cfi_startproc
 7172              		@ args = 0, pretend = 0, frame = 88
ARM GAS  /tmp/ccQmbpxO.s 			page 213


 7173              		@ frame_needed = 0, uses_anonymous_args = 0
 589:src/display.c **** 	int n;
 7174              		.loc 1 589 2 view .LVU2291
 587:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7175              		.loc 1 587 32 is_stmt 0 view .LVU2292
 7176 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7177              		.cfi_def_cfa_offset 28
 7178              		.cfi_offset 4, -28
 7179              		.cfi_offset 5, -24
 7180              		.cfi_offset 6, -20
 7181              		.cfi_offset 7, -16
 7182              		.cfi_offset 8, -12
 7183              		.cfi_offset 9, -8
 7184              		.cfi_offset 14, -4
 600:src/display.c **** #  endif
 7185              		.loc 1 600 33 view .LVU2293
 7186 0004 DFF83C83 		ldr	r8, .L802+60
 587:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7187              		.loc 1 587 32 view .LVU2294
 7188 0008 97B0     		sub	sp, sp, #92
 7189              		.cfi_def_cfa_offset 120
 7190              	.LVL809:
 590:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 7191              		.loc 1 590 2 is_stmt 1 view .LVU2295
 591:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 7192              		.loc 1 591 2 view .LVU2296
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7193              		.loc 1 592 2 view .LVU2297
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7194              		.loc 1 592 38 is_stmt 0 view .LVU2298
 7195 000a FFF7FEFF 		bl	cur_shift
 7196              	.LVL810:
 600:src/display.c **** #  endif
 7197              		.loc 1 600 33 view .LVU2299
 7198 000e D8F80030 		ldr	r3, [r8]
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7199              		.loc 1 592 13 view .LVU2300
 7200 0012 BD4A     		ldr	r2, .L802
 600:src/display.c **** #  endif
 7201              		.loc 1 600 33 view .LVU2301
 7202 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7203              		.loc 1 592 13 view .LVU2302
 7204 0018 165C     		ldrb	r6, [r2, r0]	@ zero_extendqisi2
 7205              	.LVL811:
 600:src/display.c **** #  endif
 7206              		.loc 1 600 2 is_stmt 1 view .LVU2303
 631:src/display.c **** 
 7207              		.loc 1 631 2 is_stmt 0 view .LVU2304
 7208 001a 0BAD     		add	r5, sp, #44
 7209              	.LVL812:
 631:src/display.c **** 
 7210              		.loc 1 631 2 view .LVU2305
 7211 001c 0021     		movs	r1, #0
 7212 001e 2846     		mov	r0, r5
 7213 0020 2A22     		movs	r2, #42
 600:src/display.c **** #  endif
ARM GAS  /tmp/ccQmbpxO.s 			page 214


 7214              		.loc 1 600 33 view .LVU2306
 7215 0022 C3F38007 		ubfx	r7, r3, #2, #1
 7216              	.LVL813:
 603:src/display.c **** #  else
 7217              		.loc 1 603 2 is_stmt 1 view .LVU2307
 608:src/display.c **** #  else
 7218              		.loc 1 608 2 view .LVU2308
 618:src/display.c **** #else
 7219              		.loc 1 618 2 view .LVU2309
 626:src/display.c **** #else
 7220              		.loc 1 626 2 view .LVU2310
 631:src/display.c **** 
 7221              		.loc 1 631 2 view .LVU2311
 7222 0026 FFF7FEFF 		bl	xset
 7223              	.LVL814:
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7224              		.loc 1 633 2 view .LVU2312
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7225              		.loc 1 633 6 is_stmt 0 view .LVU2313
 7226 002a D8F80030 		ldr	r3, [r8]
 7227 002e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7228              		.loc 1 633 5 view .LVU2314
 7229 0032 D907     		lsls	r1, r3, #31
 7230 0034 00F1BA80 		bmi	.L791
 671:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7231              		.loc 1 671 7 is_stmt 1 view .LVU2315
 671:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7232              		.loc 1 671 10 is_stmt 0 view .LVU2316
 7233 0038 87BB     		cbnz	r7, .L716
 689:src/display.c **** 			*p++ = shift_char;
 7234              		.loc 1 689 3 is_stmt 1 view .LVU2317
 689:src/display.c **** 			*p++ = shift_char;
 7235              		.loc 1 689 6 is_stmt 0 view .LVU2318
 7236 003a 202E     		cmp	r6, #32
 7237 003c 00F05181 		beq	.L717
 7238              	.L719:
 690:src/display.c **** 			*p++ = '\006';
 7239              		.loc 1 690 4 is_stmt 1 view .LVU2319
 7240              	.LVL815:
 691:src/display.c **** 		}
 7241              		.loc 1 691 9 is_stmt 0 view .LVU2320
 7242 0040 0623     		movs	r3, #6
 690:src/display.c **** 			*p++ = '\006';
 7243              		.loc 1 690 9 view .LVU2321
 7244 0042 8DF82C60 		strb	r6, [sp, #44]
 691:src/display.c **** 		}
 7245              		.loc 1 691 4 is_stmt 1 view .LVU2322
 7246              	.LVL816:
 691:src/display.c **** 		}
 7247              		.loc 1 691 9 is_stmt 0 view .LVU2323
 7248 0046 8DF82D30 		strb	r3, [sp, #45]
 691:src/display.c **** 		}
 7249              		.loc 1 691 6 view .LVU2324
 7250 004a 0DF12E00 		add	r0, sp, #46
 7251              	.LVL817:
 7252              	.L718:
ARM GAS  /tmp/ccQmbpxO.s 			page 215


 697:src/display.c **** 			*p++ = ' ';
 7253              		.loc 1 697 3 is_stmt 1 view .LVU2325
 697:src/display.c **** 			*p++ = ' ';
 7254              		.loc 1 697 7 is_stmt 0 view .LVU2326
 7255 004e AF4C     		ldr	r4, .L802+4
 7256 0050 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 697:src/display.c **** 			*p++ = ' ';
 7257              		.loc 1 697 6 view .LVU2327
 7258 0052 9A07     		lsls	r2, r3, #30
 7259 0054 00F12181 		bmi	.L792
 702:src/display.c **** 			*p++ = ' ';
 7260              		.loc 1 702 3 is_stmt 1 view .LVU2328
 702:src/display.c **** 			*p++ = ' ';
 7261              		.loc 1 702 6 is_stmt 0 view .LVU2329
 7262 0058 5907     		lsls	r1, r3, #29
 7263 005a 00F11981 		bmi	.L793
 708:src/display.c **** 			if (State2.wascomplex) {
 7264              		.loc 1 708 3 is_stmt 1 view .LVU2330
 708:src/display.c **** 			if (State2.wascomplex) {
 7265              		.loc 1 708 6 is_stmt 0 view .LVU2331
 7266 005e 202E     		cmp	r6, #32
 7267 0060 00F0A481 		beq	.L794
 7268              	.L722:
 725:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7269              		.loc 1 725 3 is_stmt 1 view .LVU2332
 725:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7270              		.loc 1 725 17 is_stmt 0 view .LVU2333
 7271 0064 D8F80030 		ldr	r3, [r8]
 7272 0068 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7273 006c C3F30113 		ubfx	r3, r3, #4, #2
 725:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7274              		.loc 1 725 3 view .LVU2334
 7275 0070 012B     		cmp	r3, #1
 7276 0072 00F0C081 		beq	.L750
 7277 0076 A649     		ldr	r1, .L802+8
 7278 0078 A64A     		ldr	r2, .L802+12
 7279 007a 022B     		cmp	r3, #2
 7280 007c 08BF     		it	eq
 7281 007e 1146     		moveq	r1, r2
 7282              	.L725:
 7283              	.LVL818:
 739:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7284              		.loc 1 739 3 is_stmt 1 view .LVU2335
 739:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7285              		.loc 1 739 7 is_stmt 0 view .LVU2336
 7286 0080 FFF7FEFF 		bl	scopy
 7287              	.LVL819:
 739:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7288              		.loc 1 739 7 view .LVU2337
 7289 0084 0446     		mov	r4, r0
 7290              	.LVL820:
 741:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7291              		.loc 1 741 3 is_stmt 1 view .LVU2338
 741:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7292              		.loc 1 741 7 is_stmt 0 view .LVU2339
 7293 0086 FFF7FEFF 		bl	get_trig_mode
 7294              	.LVL821:
ARM GAS  /tmp/ccQmbpxO.s 			page 216


 741:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7295              		.loc 1 741 6 view .LVU2340
 7296 008a 0228     		cmp	r0, #2
 7297 008c 00F03781 		beq	.L795
 7298              	.LVL822:
 7299              	.L708:
 881:src/display.c **** }
 7300              		.loc 1 881 7 is_stmt 1 view .LVU2341
 7301 0090 2846     		mov	r0, r5
 7302 0092 FFF7FEFF 		bl	set_status
 7303              	.LVL823:
 882:src/display.c **** 
 7304              		.loc 1 882 1 is_stmt 0 view .LVU2342
 7305 0096 17B0     		add	sp, sp, #92
 7306              		.cfi_remember_state
 7307              		.cfi_def_cfa_offset 28
 7308              		@ sp needed
 7309 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7310              	.LVL824:
 7311              	.L716:
 7312              		.cfi_restore_state
 753:src/display.c **** 			*p++ = '\007';
 7313              		.loc 1 753 3 is_stmt 1 view .LVU2343
 753:src/display.c **** 			*p++ = '\007';
 7314              		.loc 1 753 7 is_stmt 0 view .LVU2344
 7315 009c 9B4C     		ldr	r4, .L802+4
 7316 009e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 753:src/display.c **** 			*p++ = '\007';
 7317              		.loc 1 753 6 view .LVU2345
 7318 00a0 9A07     		lsls	r2, r3, #30
 7319 00a2 00F1DB80 		bmi	.L796
 759:src/display.c **** 			*p++ = '\007';
 7320              		.loc 1 759 8 is_stmt 1 view .LVU2346
 759:src/display.c **** 			*p++ = '\007';
 7321              		.loc 1 759 11 is_stmt 0 view .LVU2347
 7322 00a6 202E     		cmp	r6, #32
 7323 00a8 00F00181 		beq	.L728
 7324              	.L729:
 760:src/display.c **** 			*p++ = '\307';
 7325              		.loc 1 760 4 is_stmt 1 view .LVU2348
 7326              	.LVL825:
 761:src/display.c **** 			*p++ = shift_char;
 7327              		.loc 1 761 4 view .LVU2349
 760:src/display.c **** 			*p++ = '\307';
 7328              		.loc 1 760 9 is_stmt 0 view .LVU2350
 7329 00ac 4CF20772 		movw	r2, #50951
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7330              		.loc 1 801 6 view .LVU2351
 7331 00b0 5807     		lsls	r0, r3, #29
 762:src/display.c **** 			goto no_copy;
 7332              		.loc 1 762 9 view .LVU2352
 7333 00b2 8DF82E60 		strb	r6, [sp, #46]
 760:src/display.c **** 			*p++ = '\307';
 7334              		.loc 1 760 9 view .LVU2353
 7335 00b6 ADF82C20 		strh	r2, [sp, #44]	@ movhi
 762:src/display.c **** 			goto no_copy;
 7336              		.loc 1 762 4 is_stmt 1 view .LVU2354
ARM GAS  /tmp/ccQmbpxO.s 			page 217


 7337              	.LVL826:
 763:src/display.c **** 		}
 7338              		.loc 1 763 4 view .LVU2355
 762:src/display.c **** 			goto no_copy;
 7339              		.loc 1 762 6 is_stmt 0 view .LVU2356
 7340 00ba 0DF12F06 		add	r6, sp, #47
 7341              	.LVL827:
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7342              		.loc 1 801 3 is_stmt 1 view .LVU2357
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7343              		.loc 1 801 6 is_stmt 0 view .LVU2358
 7344 00be 00F1DD80 		bmi	.L797
 7345              	.LVL828:
 7346              	.L730:
 803:src/display.c **** 			decNumber y;
 7347              		.loc 1 803 10 is_stmt 1 view .LVU2359
 803:src/display.c **** 			decNumber y;
 7348              		.loc 1 803 14 is_stmt 0 view .LVU2360
 7349 00c2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 803:src/display.c **** 			decNumber y;
 7350              		.loc 1 803 13 view .LVU2361
 7351 00c4 5906     		lsls	r1, r3, #25
 7352 00c6 E3D5     		bpl	.L708
 7353              	.L724:
 7354              	.LBB401:
 804:src/display.c **** display_yreg:
 7355              		.loc 1 804 4 is_stmt 1 view .LVU2362
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7356              		.loc 1 811 4 view .LVU2363
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7357              		.loc 1 811 34 is_stmt 0 view .LVU2364
 7358 00c8 DFF87C92 		ldr	r9, .L802+64
 7359 00cc D9F80010 		ldr	r1, [r9]
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7360              		.loc 1 811 4 view .LVU2365
 7361 00d0 6329     		cmp	r1, #99
 7362 00d2 00F37E81 		bgt	.L798
 7363              	.L731:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7364              		.loc 1 811 4 discriminator 5 view .LVU2366
 7365 00d6 0131     		adds	r1, r1, #1
 7366              	.L735:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7367              		.loc 1 811 4 discriminator 6 view .LVU2367
 7368 00d8 02A8     		add	r0, sp, #8
 7369 00da FFF7FEFF 		bl	getRegister
 7370              	.LVL829:
 814:src/display.c **** 				if (yreg_hms && State2.hms) {
 7371              		.loc 1 814 4 is_stmt 1 discriminator 6 view .LVU2368
 814:src/display.c **** 				if (yreg_hms && State2.hms) {
 7372              		.loc 1 814 7 is_stmt 0 discriminator 6 view .LVU2369
 7373 00de 9DF81010 		ldrb	r1, [sp, #16]	@ zero_extendqisi2
 7374 00e2 11F07001 		ands	r1, r1, #112
 7375 00e6 3FD1     		bne	.L737
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7376              		.loc 1 815 5 is_stmt 1 view .LVU2370
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
ARM GAS  /tmp/ccQmbpxO.s 			page 218


 7377              		.loc 1 815 18 is_stmt 0 view .LVU2371
 7378 00e8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7379              		.loc 1 815 8 view .LVU2372
 7380 00ea 13F0010F 		tst	r3, #1
 7381              	.LBB402:
 816:src/display.c **** 
 7382              		.loc 1 816 42 view .LVU2373
 7383 00ee D8F80030 		ldr	r3, [r8]
 7384              	.LBE402:
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7385              		.loc 1 815 8 view .LVU2374
 7386 00f2 40F02B81 		bne	.L799
 836:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7387              		.loc 1 836 5 is_stmt 1 view .LVU2375
 836:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7388              		.loc 1 836 20 is_stmt 0 view .LVU2376
 7389 00f6 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 836:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7390              		.loc 1 836 8 view .LVU2377
 7391 00fa 9B06     		lsls	r3, r3, #26
 7392 00fc 34D5     		bpl	.L737
 838:src/display.c **** #endif
 7393              		.loc 1 838 12 view .LVU2378
 7394 00fe 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 838:src/display.c **** #endif
 7395              		.loc 1 838 9 view .LVU2379
 7396 0100 13F00204 		ands	r4, r3, #2
 7397 0104 30D1     		bne	.L737
 841:src/display.c **** #endif
 7398              		.loc 1 841 12 view .LVU2380
 7399 0106 844B     		ldr	r3, .L802+16
 841:src/display.c **** #endif
 7400              		.loc 1 841 9 view .LVU2381
 7401 0108 1B68     		ldr	r3, [r3]
 7402 010a 012B     		cmp	r3, #1
 7403 010c 2CD0     		beq	.L737
 843:src/display.c **** 					char ltgteq;
 7404              		.loc 1 843 12 view .LVU2382
 7405 010e 3146     		mov	r1, r6
 7406 0110 02A8     		add	r0, sp, #8
 7407 0112 FFF7FEFF 		bl	set_x_fract
 7408              	.LVL830:
 843:src/display.c **** 					char ltgteq;
 7409              		.loc 1 843 9 view .LVU2383
 7410 0116 38B3     		cbz	r0, .L737
 7411              	.LBB403:
 844:src/display.c **** 
 7412              		.loc 1 844 6 is_stmt 1 view .LVU2384
 846:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7413              		.loc 1 846 6 view .LVU2385
 846:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7414              		.loc 1 846 10 is_stmt 0 view .LVU2386
 7415 0118 2146     		mov	r1, r4
 7416 011a 2846     		mov	r0, r5
 7417 011c FFF7FEFF 		bl	find_char
 7418              	.LVL831:
ARM GAS  /tmp/ccQmbpxO.s 			page 219


 7419 0120 0446     		mov	r4, r0
 846:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7420              		.loc 1 846 8 view .LVU2387
 7421 0122 0238     		subs	r0, r0, #2
 7422              	.LVL832:
 848:src/display.c **** 					switch (ltgteq) {
 7423              		.loc 1 848 6 is_stmt 1 view .LVU2388
 848:src/display.c **** 					switch (ltgteq) {
 7424              		.loc 1 848 13 is_stmt 0 view .LVU2389
 7425 0124 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7426              	.LVL833:
 849:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 7427              		.loc 1 849 6 is_stmt 1 view .LVU2390
 7428 0128 472F     		cmp	r7, #71
 7429 012a 00F07681 		beq	.L757
 851:src/display.c **** 					}
 7430              		.loc 1 851 23 is_stmt 0 view .LVU2391
 7431 012e 4C2F     		cmp	r7, #76
 7432 0130 08BF     		it	eq
 7433 0132 3C27     		moveq	r7, #60
 7434              	.LVL834:
 7435              	.L742:
 853:src/display.c **** 					q[2] = ltgteq;
 7436              		.loc 1 853 6 is_stmt 1 view .LVU2392
 7437 0134 7949     		ldr	r1, .L802+20
 7438 0136 FFF7FEFF 		bl	scopy
 7439              	.LVL835:
 854:src/display.c **** 
 7440              		.loc 1 854 6 view .LVU2393
 854:src/display.c **** 
 7441              		.loc 1 854 11 is_stmt 0 view .LVU2394
 7442 013a 2770     		strb	r7, [r4]
 856:src/display.c **** 						goto skip;
 7443              		.loc 1 856 6 is_stmt 1 view .LVU2395
 856:src/display.c **** 						goto skip;
 7444              		.loc 1 856 10 is_stmt 0 view .LVU2396
 7445 013c 0121     		movs	r1, #1
 7446 013e 2846     		mov	r0, r5
 7447 0140 FFF7FEFF 		bl	pixel_length
 7448              	.LVL836:
 856:src/display.c **** 						goto skip;
 7449              		.loc 1 856 9 view .LVU2397
 7450 0144 2C28     		cmp	r0, #44
 7451 0146 A3DD     		ble	.L708
 859:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7452              		.loc 1 859 6 is_stmt 1 view .LVU2398
 859:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7453              		.loc 1 859 12 is_stmt 0 view .LVU2399
 7454 0148 0027     		movs	r7, #0
 7455              	.LVL837:
 859:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7456              		.loc 1 859 12 view .LVU2400
 7457 014a 04F8037C 		strb	r7, [r4, #-3]
 860:src/display.c **** 						goto skip;
 7458              		.loc 1 860 6 is_stmt 1 view .LVU2401
 860:src/display.c **** 						goto skip;
 7459              		.loc 1 860 10 is_stmt 0 view .LVU2402
ARM GAS  /tmp/ccQmbpxO.s 			page 220


 7460 014e 0121     		movs	r1, #1
 7461 0150 2846     		mov	r0, r5
 7462 0152 FFF7FEFF 		bl	pixel_length
 7463              	.LVL838:
 860:src/display.c **** 						goto skip;
 7464              		.loc 1 860 9 view .LVU2403
 7465 0156 2C28     		cmp	r0, #44
 7466 0158 9ADD     		ble	.L708
 863:src/display.c **** 				}
 7467              		.loc 1 863 6 is_stmt 1 view .LVU2404
 863:src/display.c **** 				}
 7468              		.loc 1 863 37 is_stmt 0 view .LVU2405
 7469 015a 721B     		subs	r2, r6, r5
 863:src/display.c **** 				}
 7470              		.loc 1 863 6 view .LVU2406
 7471 015c 3946     		mov	r1, r7
 7472 015e C2F12A02 		rsb	r2, r2, #42
 7473 0162 3046     		mov	r0, r6
 7474 0164 FFF7FEFF 		bl	xset
 7475              	.LVL839:
 7476              	.L737:
 863:src/display.c **** 				}
 7477              		.loc 1 863 6 view .LVU2407
 7478              	.LBE403:
 866:src/display.c **** 				int extra_pixels;
 7479              		.loc 1 866 4 is_stmt 1 view .LVU2408
 866:src/display.c **** 				int extra_pixels;
 7480              		.loc 1 866 10 is_stmt 0 view .LVU2409
 7481 0168 0C23     		movs	r3, #12
 7482 016a 0193     		str	r3, [sp, #4]
 866:src/display.c **** 				int extra_pixels;
 7483              		.loc 1 866 27 is_stmt 1 view .LVU2410
 7484 016c 0EE0     		b	.L744
 7485              	.LVL840:
 7486              	.L800:
 7487              	.LBB404:
 874:src/display.c **** 
 7488              		.loc 1 874 5 is_stmt 0 view .LVU2411
 7489 016e 019A     		ldr	r2, [sp, #4]
 7490 0170 0A32     		adds	r2, r2, #10
 7491 0172 FFF7FEFF 		bl	xset
 7492              	.LVL841:
 876:src/display.c **** 			}
 7493              		.loc 1 876 5 is_stmt 1 view .LVU2412
 876:src/display.c **** 			}
 7494              		.loc 1 876 29 is_stmt 0 view .LVU2413
 7495 0176 B4F12902 		subs	r2, r4, #41
 876:src/display.c **** 			}
 7496              		.loc 1 876 7 view .LVU2414
 7497 017a 019B     		ldr	r3, [sp, #4]
 876:src/display.c **** 			}
 7498              		.loc 1 876 29 view .LVU2415
 7499 017c 48BF     		it	mi
 7500 017e A4F12602 		submi	r2, r4, #38
 876:src/display.c **** 			}
 7501              		.loc 1 876 7 view .LVU2416
 7502 0182 A3EBA203 		sub	r3, r3, r2, asr #2
ARM GAS  /tmp/ccQmbpxO.s 			page 221


 7503              	.LBE404:
 866:src/display.c **** 				int extra_pixels;
 7504              		.loc 1 866 4 view .LVU2417
 7505 0186 012B     		cmp	r3, #1
 7506              	.LBB405:
 876:src/display.c **** 			}
 7507              		.loc 1 876 7 view .LVU2418
 7508 0188 0193     		str	r3, [sp, #4]
 7509              	.LBE405:
 866:src/display.c **** 				int extra_pixels;
 7510              		.loc 1 866 27 is_stmt 1 view .LVU2419
 866:src/display.c **** 				int extra_pixels;
 7511              		.loc 1 866 4 is_stmt 0 view .LVU2420
 7512 018a 81DD     		ble	.L708
 7513              	.LVL842:
 7514              	.L744:
 7515              	.LBB406:
 867:src/display.c **** 
 7516              		.loc 1 867 5 is_stmt 1 view .LVU2421
 869:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7517              		.loc 1 869 5 view .LVU2422
 7518 018c 01AA     		add	r2, sp, #4
 7519 018e 3146     		mov	r1, r6
 7520 0190 02A8     		add	r0, sp, #8
 7521 0192 FFF7FEFF 		bl	set_x_dn
 7522              	.LVL843:
 870:src/display.c **** 				if (extra_pixels <= 0)
 7523              		.loc 1 870 5 view .LVU2423
 870:src/display.c **** 				if (extra_pixels <= 0)
 7524              		.loc 1 870 20 is_stmt 0 view .LVU2424
 7525 0196 0121     		movs	r1, #1
 7526 0198 2846     		mov	r0, r5
 7527 019a FFF7FEFF 		bl	pixel_length
 7528              	.LVL844:
 874:src/display.c **** 
 7529              		.loc 1 874 5 is_stmt 1 view .LVU2425
 870:src/display.c **** 				if (extra_pixels <= 0)
 7530              		.loc 1 870 20 is_stmt 0 view .LVU2426
 7531 019e 0446     		mov	r4, r0
 7532              	.LVL845:
 871:src/display.c **** 					break;
 7533              		.loc 1 871 5 is_stmt 1 view .LVU2427
 871:src/display.c **** 					break;
 7534              		.loc 1 871 8 is_stmt 0 view .LVU2428
 7535 01a0 2C2C     		cmp	r4, #44
 874:src/display.c **** 
 7536              		.loc 1 874 5 view .LVU2429
 7537 01a2 4FF00001 		mov	r1, #0
 7538 01a6 3046     		mov	r0, r6
 7539              	.LVL846:
 871:src/display.c **** 					break;
 7540              		.loc 1 871 8 view .LVU2430
 7541 01a8 E1DC     		bgt	.L800
 7542              	.LVL847:
 871:src/display.c **** 					break;
 7543              		.loc 1 871 8 view .LVU2431
 7544              	.LBE406:
ARM GAS  /tmp/ccQmbpxO.s 			page 222


 7545 01aa 71E7     		b	.L708
 7546              	.LVL848:
 7547              	.L791:
 871:src/display.c **** 					break;
 7548              		.loc 1 871 8 view .LVU2432
 7549              	.LBE401:
 643:src/display.c **** 			*p++ = '\006';
 7550              		.loc 1 643 4 is_stmt 1 view .LVU2433
 644:src/display.c **** 		}
 7551              		.loc 1 644 9 is_stmt 0 view .LVU2434
 7552 01ac 0623     		movs	r3, #6
 7553 01ae 8DF82D30 		strb	r3, [sp, #45]
 643:src/display.c **** 			*p++ = '\006';
 7554              		.loc 1 643 9 view .LVU2435
 7555 01b2 8DF82C60 		strb	r6, [sp, #44]
 644:src/display.c **** 		}
 7556              		.loc 1 644 4 is_stmt 1 view .LVU2436
 7557              	.LVL849:
 647:src/display.c **** 		default:
 7558              		.loc 1 647 3 view .LVU2437
 647:src/display.c **** 		default:
 7559              		.loc 1 647 10 is_stmt 0 view .LVU2438
 7560 01b6 FFF7FEFF 		bl	int_mode
 7561              	.LVL850:
 7562 01ba 0138     		subs	r0, r0, #1
 7563 01bc C0B2     		uxtb	r0, r0
 7564 01be 0228     		cmp	r0, #2
 7565 01c0 96BF     		itet	ls
 7566 01c2 574B     		ldrls	r3, .L802+24
 7567 01c4 5749     		ldrhi	r1, .L802+28
 7568 01c6 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7569              	.LVL851:
 654:src/display.c **** 		*q++ = '\006';
 7570              		.loc 1 654 3 is_stmt 1 view .LVU2439
 654:src/display.c **** 		*q++ = '\006';
 7571              		.loc 1 654 7 is_stmt 0 view .LVU2440
 7572 01ca 0DF12E00 		add	r0, sp, #46
 7573              	.LVL852:
 654:src/display.c **** 		*q++ = '\006';
 7574              		.loc 1 654 7 view .LVU2441
 7575 01ce FFF7FEFF 		bl	scopy
 7576              	.LVL853:
 655:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7577              		.loc 1 655 8 view .LVU2442
 7578 01d2 0646     		mov	r6, r0
 7579              	.LVL854:
 655:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7580              		.loc 1 655 8 view .LVU2443
 7581 01d4 0623     		movs	r3, #6
 7582 01d6 06F8013B 		strb	r3, [r6], #1
 654:src/display.c **** 		*q++ = '\006';
 7583              		.loc 1 654 7 view .LVU2444
 7584 01da 0446     		mov	r4, r0
 7585              	.LVL855:
 655:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7586              		.loc 1 655 3 is_stmt 1 view .LVU2445
 656:src/display.c **** 
ARM GAS  /tmp/ccQmbpxO.s 			page 223


 7587              		.loc 1 656 3 view .LVU2446
 656:src/display.c **** 
 7588              		.loc 1 656 7 is_stmt 0 view .LVU2447
 7589 01dc FFF7FEFF 		bl	word_size
 7590              	.LVL856:
 7591 01e0 0146     		mov	r1, r0
 7592 01e2 3046     		mov	r0, r6
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7593              		.loc 1 658 20 view .LVU2448
 7594 01e4 504E     		ldr	r6, .L802+32
 7595              	.LVL857:
 656:src/display.c **** 
 7596              		.loc 1 656 7 view .LVU2449
 7597 01e6 0222     		movs	r2, #2
 7598 01e8 FFF7FEFF 		bl	num_arg_0
 7599              	.LVL858:
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7600              		.loc 1 658 20 view .LVU2450
 7601 01ec 3368     		ldr	r3, [r6]
 7602              	.LVL859:
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7603              		.loc 1 658 3 is_stmt 1 view .LVU2451
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7604              		.loc 1 658 6 is_stmt 0 view .LVU2452
 7605 01ee 002B     		cmp	r3, #0
 7606 01f0 7FF74EAF 		ble	.L708
 659:src/display.c **** 			if (*q == '1')
 7607              		.loc 1 659 4 is_stmt 1 view .LVU2453
 659:src/display.c **** 			if (*q == '1')
 7608              		.loc 1 659 10 is_stmt 0 view .LVU2454
 7609 01f4 C3F10702 		rsb	r2, r3, #7
 7610 01f8 5200     		lsls	r2, r2, #1
 659:src/display.c **** 			if (*q == '1')
 7611              		.loc 1 659 6 view .LVU2455
 7612 01fa 0192     		str	r2, [sp, #4]
 660:src/display.c **** 				n += 2;
 7613              		.loc 1 660 4 is_stmt 1 view .LVU2456
 660:src/display.c **** 				n += 2;
 7614              		.loc 1 660 7 is_stmt 0 view .LVU2457
 7615 01fc 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7616 01fe 3129     		cmp	r1, #49
 661:src/display.c **** 			if (q[1] == '1')
 7617              		.loc 1 661 5 is_stmt 1 view .LVU2458
 661:src/display.c **** 			if (q[1] == '1')
 7618              		.loc 1 661 7 is_stmt 0 view .LVU2459
 7619 0200 04BF     		itt	eq
 7620 0202 0232     		addeq	r2, r2, #2
 7621 0204 0192     		streq	r2, [sp, #4]
 662:src/display.c **** 				n += 2;
 7622              		.loc 1 662 4 is_stmt 1 view .LVU2460
 662:src/display.c **** 				n += 2;
 7623              		.loc 1 662 7 is_stmt 0 view .LVU2461
 7624 0206 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7625 0208 3129     		cmp	r1, #49
 663:src/display.c **** 			while (n-- > 0)
 7626              		.loc 1 663 5 is_stmt 1 view .LVU2462
 663:src/display.c **** 			while (n-- > 0)
ARM GAS  /tmp/ccQmbpxO.s 			page 224


 7627              		.loc 1 663 7 is_stmt 0 view .LVU2463
 7628 020a 08BF     		it	eq
 7629 020c 0232     		addeq	r2, r2, #2
 664:src/display.c **** 				*p++ = '\006';
 7630              		.loc 1 664 10 is_stmt 1 view .LVU2464
 664:src/display.c **** 				*p++ = '\006';
 7631              		.loc 1 664 12 is_stmt 0 view .LVU2465
 7632 020e 511E     		subs	r1, r2, #1
 664:src/display.c **** 				*p++ = '\006';
 7633              		.loc 1 664 10 view .LVU2466
 7634 0210 002A     		cmp	r2, #0
 664:src/display.c **** 				*p++ = '\006';
 7635              		.loc 1 664 12 view .LVU2467
 7636 0212 0191     		str	r1, [sp, #4]
 664:src/display.c **** 				*p++ = '\006';
 7637              		.loc 1 664 10 view .LVU2468
 7638 0214 40F3F180 		ble	.L711
 665:src/display.c **** 
 7639              		.loc 1 665 10 view .LVU2469
 7640 0218 0621     		movs	r1, #6
 7641              	.L712:
 665:src/display.c **** 
 7642              		.loc 1 665 5 is_stmt 1 view .LVU2470
 7643              	.LVL860:
 665:src/display.c **** 
 7644              		.loc 1 665 10 is_stmt 0 view .LVU2471
 7645 021a 00F8011B 		strb	r1, [r0], #1
 7646              	.LVL861:
 664:src/display.c **** 				*p++ = '\006';
 7647              		.loc 1 664 10 is_stmt 1 view .LVU2472
 664:src/display.c **** 				*p++ = '\006';
 7648              		.loc 1 664 12 is_stmt 0 view .LVU2473
 7649 021e 019B     		ldr	r3, [sp, #4]
 7650 0220 5A1E     		subs	r2, r3, #1
 664:src/display.c **** 				*p++ = '\006';
 7651              		.loc 1 664 10 view .LVU2474
 7652 0222 002B     		cmp	r3, #0
 664:src/display.c **** 				*p++ = '\006';
 7653              		.loc 1 664 12 view .LVU2475
 7654 0224 0192     		str	r2, [sp, #4]
 664:src/display.c **** 				*p++ = '\006';
 7655              		.loc 1 664 10 view .LVU2476
 7656 0226 F8DC     		bgt	.L712
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7657              		.loc 1 667 4 is_stmt 1 view .LVU2477
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7658              		.loc 1 667 11 is_stmt 0 view .LVU2478
 7659 0228 3368     		ldr	r3, [r6]
 7660 022a 0193     		str	r3, [sp, #4]
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7661              		.loc 1 667 27 is_stmt 1 view .LVU2479
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7662              		.loc 1 667 4 is_stmt 0 view .LVU2480
 7663 022c 002B     		cmp	r3, #0
 7664 022e FFF62FAF 		blt	.L708
 7665              	.L745:
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccQmbpxO.s 			page 225


 7666              		.loc 1 667 4 view .LVU2481
 7667 0232 364C     		ldr	r4, .L802+4
 7668              	.LVL862:
 7669              	.L715:
 668:src/display.c **** 		}
 7670              		.loc 1 668 5 is_stmt 1 view .LVU2482
 668:src/display.c **** 		}
 7671              		.loc 1 668 18 is_stmt 0 view .LVU2483
 7672 0234 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7673 0236 C2F3C202 		ubfx	r2, r2, #3, #3
 668:src/display.c **** 		}
 7674              		.loc 1 668 10 view .LVU2484
 7675 023a 9A42     		cmp	r2, r3
 7676 023c 0CBF     		ite	eq
 7677 023e 7C23     		moveq	r3, #124
 7678 0240 2723     		movne	r3, #39
 7679              	.LVL863:
 668:src/display.c **** 		}
 7680              		.loc 1 668 10 view .LVU2485
 7681 0242 00F8013B 		strb	r3, [r0], #1
 7682              	.LVL864:
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7683              		.loc 1 667 35 is_stmt 1 view .LVU2486
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7684              		.loc 1 667 36 is_stmt 0 view .LVU2487
 7685 0246 019B     		ldr	r3, [sp, #4]
 7686 0248 013B     		subs	r3, r3, #1
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7687              		.loc 1 667 4 view .LVU2488
 7688 024a 002B     		cmp	r3, #0
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7689              		.loc 1 667 36 view .LVU2489
 7690 024c 0193     		str	r3, [sp, #4]
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7691              		.loc 1 667 27 is_stmt 1 view .LVU2490
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7692              		.loc 1 667 4 is_stmt 0 view .LVU2491
 7693 024e F1DA     		bge	.L715
 881:src/display.c **** }
 7694              		.loc 1 881 7 is_stmt 1 view .LVU2492
 7695 0250 2846     		mov	r0, r5
 7696              	.LVL865:
 881:src/display.c **** }
 7697              		.loc 1 881 7 is_stmt 0 view .LVU2493
 7698 0252 FFF7FEFF 		bl	set_status
 7699              	.LVL866:
 882:src/display.c **** 
 7700              		.loc 1 882 1 view .LVU2494
 7701 0256 17B0     		add	sp, sp, #92
 7702              		.cfi_remember_state
 7703              		.cfi_def_cfa_offset 28
 7704              		@ sp needed
 7705 0258 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7706              	.LVL867:
 7707              	.L796:
 7708              		.cfi_restore_state
 754:src/display.c **** 			*p++ = '\344';
ARM GAS  /tmp/ccQmbpxO.s 			page 226


 7709              		.loc 1 754 4 is_stmt 1 view .LVU2495
 755:src/display.c **** 			*p++ = shift_char;
 7710              		.loc 1 755 4 view .LVU2496
 754:src/display.c **** 			*p++ = '\344';
 7711              		.loc 1 754 9 is_stmt 0 view .LVU2497
 7712 025c 4EF20743 		movw	r3, #58375
 757:src/display.c **** 		}
 7713              		.loc 1 757 6 view .LVU2498
 7714 0260 3249     		ldr	r1, .L802+36
 756:src/display.c **** 			q = "\024";
 7715              		.loc 1 756 9 view .LVU2499
 7716 0262 8DF82E60 		strb	r6, [sp, #46]
 754:src/display.c **** 			*p++ = '\344';
 7717              		.loc 1 754 9 view .LVU2500
 7718 0266 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 756:src/display.c **** 			q = "\024";
 7719              		.loc 1 756 4 is_stmt 1 view .LVU2501
 7720              	.LVL868:
 757:src/display.c **** 		}
 7721              		.loc 1 757 4 view .LVU2502
 756:src/display.c **** 			q = "\024";
 7722              		.loc 1 756 6 is_stmt 0 view .LVU2503
 7723 026a 0DF12F00 		add	r0, sp, #47
 7724              	.LVL869:
 7725              	.L727:
 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7726              		.loc 1 796 3 is_stmt 1 view .LVU2504
 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7727              		.loc 1 796 7 is_stmt 0 view .LVU2505
 7728 026e FFF7FEFF 		bl	scopy
 7729              	.LVL870:
 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7730              		.loc 1 796 7 view .LVU2506
 7731 0272 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 7732 0274 0646     		mov	r6, r0
 7733              	.LVL871:
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7734              		.loc 1 801 3 is_stmt 1 view .LVU2507
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7735              		.loc 1 801 6 is_stmt 0 view .LVU2508
 7736 0276 5807     		lsls	r0, r3, #29
 7737              	.LVL872:
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7738              		.loc 1 801 6 view .LVU2509
 7739 0278 7FF523AF 		bpl	.L730
 7740              	.L797:
 802:src/display.c **** 		} else if (State2.runmode) {
 7741              		.loc 1 802 4 is_stmt 1 view .LVU2510
 7742 027c 2C49     		ldr	r1, .L802+40
 7743 027e 3046     		mov	r0, r6
 7744 0280 FFF7FEFF 		bl	scopy
 7745              	.LVL873:
 881:src/display.c **** }
 7746              		.loc 1 881 7 view .LVU2511
 7747 0284 2846     		mov	r0, r5
 7748 0286 FFF7FEFF 		bl	set_status
 7749              	.LVL874:
ARM GAS  /tmp/ccQmbpxO.s 			page 227


 882:src/display.c **** 
 7750              		.loc 1 882 1 is_stmt 0 view .LVU2512
 7751 028a 17B0     		add	sp, sp, #92
 7752              		.cfi_remember_state
 7753              		.cfi_def_cfa_offset 28
 7754              		@ sp needed
 7755 028c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7756              	.LVL875:
 7757              	.L793:
 7758              		.cfi_restore_state
 703:src/display.c **** 			*p = '\015';
 7759              		.loc 1 703 4 is_stmt 1 view .LVU2513
 703:src/display.c **** 			*p = '\015';
 7760              		.loc 1 703 9 is_stmt 0 view .LVU2514
 7761 0290 2022     		movs	r2, #32
 704:src/display.c **** 			goto skip;
 7762              		.loc 1 704 7 view .LVU2515
 7763 0292 0D23     		movs	r3, #13
 703:src/display.c **** 			*p = '\015';
 7764              		.loc 1 703 9 view .LVU2516
 7765 0294 0270     		strb	r2, [r0]
 704:src/display.c **** 			goto skip;
 7766              		.loc 1 704 4 is_stmt 1 view .LVU2517
 704:src/display.c **** 			goto skip;
 7767              		.loc 1 704 7 is_stmt 0 view .LVU2518
 7768 0296 4370     		strb	r3, [r0, #1]
 705:src/display.c **** 		}
 7769              		.loc 1 705 4 is_stmt 1 view .LVU2519
 7770 0298 FAE6     		b	.L708
 7771              	.LVL876:
 7772              	.L792:
 698:src/display.c **** 			*p = '\024';
 7773              		.loc 1 698 4 view .LVU2520
 698:src/display.c **** 			*p = '\024';
 7774              		.loc 1 698 9 is_stmt 0 view .LVU2521
 7775 029a 2022     		movs	r2, #32
 699:src/display.c **** 			goto skip;
 7776              		.loc 1 699 7 view .LVU2522
 7777 029c 1423     		movs	r3, #20
 698:src/display.c **** 			*p = '\024';
 7778              		.loc 1 698 9 view .LVU2523
 7779 029e 0270     		strb	r2, [r0]
 699:src/display.c **** 			goto skip;
 7780              		.loc 1 699 4 is_stmt 1 view .LVU2524
 699:src/display.c **** 			goto skip;
 7781              		.loc 1 699 7 is_stmt 0 view .LVU2525
 7782 02a0 4370     		strb	r3, [r0, #1]
 700:src/display.c **** 		}
 7783              		.loc 1 700 4 is_stmt 1 view .LVU2526
 881:src/display.c **** }
 7784              		.loc 1 881 7 view .LVU2527
 7785 02a2 2846     		mov	r0, r5
 7786              	.LVL877:
 881:src/display.c **** }
 7787              		.loc 1 881 7 is_stmt 0 view .LVU2528
 7788 02a4 FFF7FEFF 		bl	set_status
 7789              	.LVL878:
ARM GAS  /tmp/ccQmbpxO.s 			page 228


 882:src/display.c **** 
 7790              		.loc 1 882 1 view .LVU2529
 7791 02a8 17B0     		add	sp, sp, #92
 7792              		.cfi_remember_state
 7793              		.cfi_def_cfa_offset 28
 7794              		@ sp needed
 7795 02aa BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7796              	.LVL879:
 7797              	.L728:
 7798              		.cfi_restore_state
 767:src/display.c **** 			q = "\007\207i";
 7799              		.loc 1 767 3 is_stmt 1 view .LVU2530
 767:src/display.c **** 			q = "\007\207i";
 7800              		.loc 1 767 7 is_stmt 0 view .LVU2531
 7801 02ae 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 767:src/display.c **** 			q = "\007\207i";
 7802              		.loc 1 767 6 view .LVU2532
 7803 02b0 13F0C00F 		tst	r3, #192
 7804 02b4 20D1     		bne	.L752
 770:src/display.c **** 			q = "\007\307<";
 7805              		.loc 1 770 8 is_stmt 1 view .LVU2533
 770:src/display.c **** 			q = "\007\307<";
 7806              		.loc 1 770 22 is_stmt 0 view .LVU2534
 7807 02b6 184B     		ldr	r3, .L802+16
 7808 02b8 1B68     		ldr	r3, [r3]
 770:src/display.c **** 			q = "\007\307<";
 7809              		.loc 1 770 11 view .LVU2535
 7810 02ba 012B     		cmp	r3, #1
 7811 02bc 00F0A480 		beq	.L753
 773:src/display.c **** 			q = "\007\307y";
 7812              		.loc 1 773 8 is_stmt 1 view .LVU2536
 773:src/display.c **** 			q = "\007\307y";
 7813              		.loc 1 773 11 is_stmt 0 view .LVU2537
 7814 02c0 022B     		cmp	r3, #2
 7815 02c2 00F09E80 		beq	.L754
 777:src/display.c **** 			q = "\007\207\007";
 7816              		.loc 1 777 8 is_stmt 1 view .LVU2538
 777:src/display.c **** 			q = "\007\207\007";
 7817              		.loc 1 777 12 is_stmt 0 view .LVU2539
 7818 02c6 FFF7FEFF 		bl	get_trig_mode
 7819              	.LVL880:
 777:src/display.c **** 			q = "\007\207\007";
 7820              		.loc 1 777 11 view .LVU2540
 7821 02ca 0228     		cmp	r0, #2
 7822 02cc 00F0A280 		beq	.L755
 783:src/display.c **** #else
 7823              		.loc 1 783 4 is_stmt 1 view .LVU2541
 783:src/display.c **** #else
 7824              		.loc 1 783 9 is_stmt 0 view .LVU2542
 7825 02d0 FFF7FEFF 		bl	is_dblmode
 7826              	.LVL881:
 783:src/display.c **** #else
 7827              		.loc 1 783 36 view .LVU2543
 7828 02d4 174B     		ldr	r3, .L802+44
 7829 02d6 1849     		ldr	r1, .L802+48
 7830 02d8 0028     		cmp	r0, #0
 7831 02da 18BF     		it	ne
ARM GAS  /tmp/ccQmbpxO.s 			page 229


 7832 02dc 1946     		movne	r1, r3
 7833 02de 2846     		mov	r0, r5
 7834 02e0 C5E7     		b	.L727
 7835              	.L717:
 689:src/display.c **** 			*p++ = shift_char;
 7836              		.loc 1 689 29 discriminator 1 view .LVU2544
 7837 02e2 FFF7FEFF 		bl	is_dblmode
 7838              	.LVL882:
 689:src/display.c **** 			*p++ = shift_char;
 7839              		.loc 1 689 25 discriminator 1 view .LVU2545
 7840 02e6 0028     		cmp	r0, #0
 7841 02e8 3FF4AAAE 		beq	.L719
 694:src/display.c **** 		}
 7842              		.loc 1 694 4 is_stmt 1 view .LVU2546
 7843              	.LVL883:
 694:src/display.c **** 		}
 7844              		.loc 1 694 9 is_stmt 0 view .LVU2547
 7845 02ec 4423     		movs	r3, #68
 7846 02ee 8DF82C30 		strb	r3, [sp, #44]
 694:src/display.c **** 		}
 7847              		.loc 1 694 6 view .LVU2548
 7848 02f2 0DF12D00 		add	r0, sp, #45
 7849              	.LVL884:
 694:src/display.c **** 		}
 7850              		.loc 1 694 6 view .LVU2549
 7851 02f6 AAE6     		b	.L718
 7852              	.LVL885:
 7853              	.L752:
 768:src/display.c **** 		}
 7854              		.loc 1 768 6 view .LVU2550
 7855 02f8 1049     		ldr	r1, .L802+52
 589:src/display.c **** 	int n;
 7856              		.loc 1 589 17 view .LVU2551
 7857 02fa 2846     		mov	r0, r5
 7858 02fc B7E7     		b	.L727
 7859              	.LVL886:
 7860              	.L795:
 742:src/display.c **** 		}
 7861              		.loc 1 742 4 is_stmt 1 view .LVU2552
 7862 02fe 1049     		ldr	r1, .L802+56
 7863 0300 2046     		mov	r0, r4
 7864 0302 FFF7FEFF 		bl	scopy
 7865              	.LVL887:
 7866 0306 C3E6     		b	.L708
 7867              	.L803:
 7868              		.align	2
 7869              	.L802:
 7870 0308 00000000 		.word	.LANCHOR15
 7871 030c 00000000 		.word	StateWhileOn
 7872 0310 10000000 		.word	.LC7
 7873 0314 1C000000 		.word	.LC9
 7874 0318 00000000 		.word	RectPolConv
 7875 031c 4C000000 		.word	.LC19
 7876 0320 00000000 		.word	.LANCHOR16
 7877 0324 00000000 		.word	.LC3
 7878 0328 00000000 		.word	IntMaxWindow
 7879 032c 24000000 		.word	.LC10
ARM GAS  /tmp/ccQmbpxO.s 			page 230


 7880 0330 44000000 		.word	.LC17
 7881 0334 30000000 		.word	.LC13
 7882 0338 38000000 		.word	.LC15
 7883 033c 08000000 		.word	.LC5
 7884 0340 3C000000 		.word	.LC16
 7885 0344 00000000 		.word	main_ram
 7886 0348 00000000 		.word	ShowRegister
 7887              	.LVL888:
 7888              	.L799:
 7889              	.LBB409:
 7890              	.LBB407:
 816:src/display.c **** 
 7891              		.loc 1 816 6 view .LVU2553
 818:src/display.c **** 					UState.nothousands = 1;
 7892              		.loc 1 818 6 is_stmt 0 view .LVU2554
 7893 034c 2A22     		movs	r2, #42
 7894 034e 2846     		mov	r0, r5
 816:src/display.c **** 
 7895              		.loc 1 816 42 view .LVU2555
 7896 0350 93F8E767 		ldrb	r6, [r3, #2023]	@ zero_extendqisi2
 7897              	.LVL889:
 816:src/display.c **** 
 7898              		.loc 1 816 42 view .LVU2556
 7899 0354 324C     		ldr	r4, .L804
 818:src/display.c **** 					UState.nothousands = 1;
 7900              		.loc 1 818 6 view .LVU2557
 7901 0356 FFF7FEFF 		bl	xset
 7902              	.LVL890:
 819:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7903              		.loc 1 819 25 view .LVU2558
 7904 035a D8F80020 		ldr	r2, [r8]
 7905 035e 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 7906 0362 43F04003 		orr	r3, r3, #64
 7907 0366 82F8E737 		strb	r3, [r2, #2023]
 820:src/display.c **** 					UState.nothousands = saved_nothousands;
 7908              		.loc 1 820 6 view .LVU2559
 7909 036a 2946     		mov	r1, r5
 7910 036c 02A8     		add	r0, sp, #8
 7911 036e FFF7FEFF 		bl	set_x_hms
 7912              	.LVL891:
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7913              		.loc 1 821 25 view .LVU2560
 7914 0372 D8F80030 		ldr	r3, [r8]
 7915 0376 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 816:src/display.c **** 
 7916              		.loc 1 816 42 view .LVU2561
 7917 037a C6F38016 		ubfx	r6, r6, #6, #1
 7918              	.LVL892:
 818:src/display.c **** 					UState.nothousands = 1;
 7919              		.loc 1 818 6 is_stmt 1 view .LVU2562
 819:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7920              		.loc 1 819 6 view .LVU2563
 820:src/display.c **** 					UState.nothousands = saved_nothousands;
 7921              		.loc 1 820 6 view .LVU2564
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7922              		.loc 1 821 6 view .LVU2565
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
ARM GAS  /tmp/ccQmbpxO.s 			page 231


 7923              		.loc 1 821 25 is_stmt 0 view .LVU2566
 7924 037e 66F38612 		bfi	r2, r6, #6, #1
 7925 0382 83F8E727 		strb	r2, [r3, #2023]
 826:src/display.c **** 					while (*p) {
 7926              		.loc 1 826 6 is_stmt 1 view .LVU2567
 7927              	.LVL893:
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7928              		.loc 1 827 6 view .LVU2568
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7929              		.loc 1 827 12 view .LVU2569
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7930              		.loc 1 827 13 is_stmt 0 view .LVU2570
 7931 0386 4021     		movs	r1, #64
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7932              		.loc 1 821 25 view .LVU2571
 7933 0388 0522     		movs	r2, #5
 7934 038a 05E0     		b	.L740
 7935              	.LVL894:
 7936              	.L801:
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7937              		.loc 1 827 13 view .LVU2572
 7938 038c 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 7939              	.LVL895:
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7940              		.loc 1 827 12 view .LVU2573
 7941 0390 0029     		cmp	r1, #0
 7942 0392 3FF47DAE 		beq	.L708
 7943 0396 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 7944              	.LVL896:
 7945              	.L740:
 828:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7946              		.loc 1 828 7 is_stmt 1 view .LVU2574
 7947 0398 2846     		mov	r0, r5
 7948 039a FFF7FEFF 		bl	replace_char
 7949              	.LVL897:
 829:src/display.c **** 							goto skip;
 7950              		.loc 1 829 7 view .LVU2575
 829:src/display.c **** 							goto skip;
 7951              		.loc 1 829 11 is_stmt 0 view .LVU2576
 7952 039e 0121     		movs	r1, #1
 7953 03a0 2846     		mov	r0, r5
 7954 03a2 FFF7FEFF 		bl	pixel_length
 7955              	.LVL898:
 832:src/display.c **** 					}
 7956              		.loc 1 832 7 is_stmt 1 view .LVU2577
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7957              		.loc 1 827 12 view .LVU2578
 829:src/display.c **** 							goto skip;
 7958              		.loc 1 829 10 is_stmt 0 view .LVU2579
 7959 03a6 2C28     		cmp	r0, #44
 7960 03a8 F0DC     		bgt	.L801
 7961 03aa 71E6     		b	.L708
 7962              	.LVL899:
 7963              	.L794:
 829:src/display.c **** 							goto skip;
 7964              		.loc 1 829 10 view .LVU2580
 7965              	.LBE407:
ARM GAS  /tmp/ccQmbpxO.s 			page 232


 7966              	.LBE409:
 708:src/display.c **** 			if (State2.wascomplex) {
 7967              		.loc 1 708 29 discriminator 1 view .LVU2581
 7968 03ac 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 708:src/display.c **** 			if (State2.wascomplex) {
 7969              		.loc 1 708 25 discriminator 1 view .LVU2582
 7970 03ae 13F0C00F 		tst	r3, #192
 7971 03b2 24D1     		bne	.L748
 708:src/display.c **** 			if (State2.wascomplex) {
 7972              		.loc 1 708 61 discriminator 2 view .LVU2583
 7973 03b4 1B4B     		ldr	r3, .L804+4
 7974 03b6 1B68     		ldr	r3, [r3]
 708:src/display.c **** 			if (State2.wascomplex) {
 7975              		.loc 1 708 47 discriminator 2 view .LVU2584
 7976 03b8 002B     		cmp	r3, #0
 7977 03ba 3FF453AE 		beq	.L722
 709:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 7978              		.loc 1 709 4 is_stmt 1 view .LVU2585
 712:src/display.c **** 				if (RectPolConv == 1) {
 7979              		.loc 1 712 9 view .LVU2586
 713:src/display.c **** 					q = "\007\306<";
 7980              		.loc 1 713 5 view .LVU2587
 717:src/display.c **** 				}
 7981              		.loc 1 717 8 is_stmt 0 view .LVU2588
 7982 03be 1A49     		ldr	r1, .L804+8
 7983 03c0 1A4A     		ldr	r2, .L804+12
 7984 03c2 012B     		cmp	r3, #1
 7985 03c4 18BF     		it	ne
 7986 03c6 1146     		movne	r1, r2
 7987              	.L723:
 7988              	.LVL900:
 720:src/display.c **** 
 7989              		.loc 1 720 4 is_stmt 1 view .LVU2589
 720:src/display.c **** 
 7990              		.loc 1 720 8 is_stmt 0 view .LVU2590
 7991 03c8 2846     		mov	r0, r5
 7992              	.LVL901:
 720:src/display.c **** 
 7993              		.loc 1 720 8 view .LVU2591
 7994 03ca FFF7FEFF 		bl	scopy
 7995              	.LVL902:
 720:src/display.c **** 
 7996              		.loc 1 720 8 view .LVU2592
 7997 03ce 0646     		mov	r6, r0
 7998              	.LVL903:
 722:src/display.c **** 		}
 7999              		.loc 1 722 4 is_stmt 1 view .LVU2593
 8000 03d0 7AE6     		b	.L724
 8001              	.LVL904:
 8002              	.L798:
 8003              	.LBB410:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8004              		.loc 1 811 75 is_stmt 0 discriminator 2 view .LVU2594
 8005 03d2 FFF7FEFF 		bl	stack_size
 8006              	.LVL905:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8007              		.loc 1 811 62 discriminator 2 view .LVU2595
ARM GAS  /tmp/ccQmbpxO.s 			page 233


 8008 03d6 D9F80010 		ldr	r1, [r9]
 8009 03da 6330     		adds	r0, r0, #99
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8010              		.loc 1 811 46 discriminator 2 view .LVU2596
 8011 03dc 8842     		cmp	r0, r1
 8012 03de FFF67AAE 		blt	.L731
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8013              		.loc 1 811 91 discriminator 4 view .LVU2597
 8014 03e2 FFF7FEFF 		bl	get_cmdline
 8015              	.LVL906:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8016              		.loc 1 811 88 discriminator 4 view .LVU2598
 8017 03e6 18B1     		cbz	r0, .L734
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8018              		.loc 1 812 7 view .LVU2599
 8019 03e8 8FB1     		cbz	r7, .L733
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8020              		.loc 1 812 28 discriminator 1 view .LVU2600
 8021 03ea E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8022              		.loc 1 812 10 discriminator 1 view .LVU2601
 8023 03ec 5A06     		lsls	r2, r3, #25
 8024 03ee 0ED4     		bmi	.L733
 8025              	.L734:
 8026 03f0 D9F80010 		ldr	r1, [r9]
 8027 03f4 6FE6     		b	.L731
 8028              	.LVL907:
 8029              	.L750:
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8030              		.loc 1 812 10 discriminator 1 view .LVU2602
 8031              	.LBE410:
 731:src/display.c **** #endif
 8032              		.loc 1 731 20 view .LVU2603
 8033 03f6 0E49     		ldr	r1, .L804+16
 8034 03f8 42E6     		b	.L725
 8035              	.LVL908:
 8036              	.L711:
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8037              		.loc 1 667 4 is_stmt 1 view .LVU2604
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8038              		.loc 1 667 11 is_stmt 0 view .LVU2605
 8039 03fa 0193     		str	r3, [sp, #4]
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8040              		.loc 1 667 27 is_stmt 1 view .LVU2606
 8041 03fc 19E7     		b	.L745
 8042              	.LVL909:
 8043              	.L748:
 710:src/display.c **** 			}
 8044              		.loc 1 710 7 is_stmt 0 view .LVU2607
 8045 03fe 0D49     		ldr	r1, .L804+20
 8046 0400 E2E7     		b	.L723
 8047              	.LVL910:
 8048              	.L754:
 774:src/display.c **** 		}
 8049              		.loc 1 774 6 view .LVU2608
 8050 0402 0D49     		ldr	r1, .L804+24
 589:src/display.c **** 	int n;
ARM GAS  /tmp/ccQmbpxO.s 			page 234


 8051              		.loc 1 589 17 view .LVU2609
 8052 0404 2846     		mov	r0, r5
 8053 0406 32E7     		b	.L727
 8054              	.L753:
 771:src/display.c **** 		}
 8055              		.loc 1 771 6 view .LVU2610
 8056 0408 0C49     		ldr	r1, .L804+28
 589:src/display.c **** 	int n;
 8057              		.loc 1 589 17 view .LVU2611
 8058 040a 2846     		mov	r0, r5
 8059 040c 2FE7     		b	.L727
 8060              	.LVL911:
 8061              	.L733:
 8062              	.LBB411:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8063              		.loc 1 811 4 discriminator 7 view .LVU2612
 8064 040e D9F80010 		ldr	r1, [r9]
 8065 0412 61E6     		b	.L735
 8066              	.LVL912:
 8067              	.L755:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8068              		.loc 1 811 4 discriminator 7 view .LVU2613
 8069              	.LBE411:
 778:src/display.c **** 		}
 8070              		.loc 1 778 6 view .LVU2614
 8071 0414 0A49     		ldr	r1, .L804+32
 589:src/display.c **** 	int n;
 8072              		.loc 1 589 17 view .LVU2615
 8073 0416 2846     		mov	r0, r5
 8074 0418 29E7     		b	.L727
 8075              	.LVL913:
 8076              	.L757:
 8077              	.LBB412:
 8078              	.LBB408:
 850:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8079              		.loc 1 850 23 view .LVU2616
 8080 041a 3E27     		movs	r7, #62
 8081              	.LVL914:
 850:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8082              		.loc 1 850 23 view .LVU2617
 8083 041c 8AE6     		b	.L742
 8084              	.L805:
 8085 041e 00BF     		.align	2
 8086              	.L804:
 8087 0420 00000000 		.word	.LANCHOR17
 8088 0424 00000000 		.word	RectPolConv
 8089 0428 04000000 		.word	.LC4
 8090 042c 0C000000 		.word	.LC6
 8091 0430 14000000 		.word	.LC8
 8092 0434 08000000 		.word	.LC5
 8093 0438 28000000 		.word	.LC11
 8094 043c 34000000 		.word	.LC14
 8095 0440 2C000000 		.word	.LC12
 8096              	.LBE408:
 8097              	.LBE412:
 8098              		.cfi_endproc
 8099              	.LFE16:
ARM GAS  /tmp/ccQmbpxO.s 			page 235


 8101              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8102              		.align	2
 8103              	.LC20:
 8104 0000 0D00     		.ascii	"\015\000"
 8105 0002 0000     		.align	2
 8106              	.LC21:
 8107 0004 060600   		.ascii	"\006\006\000"
 8108 0007 00       		.align	2
 8109              	.LC23:
 8110 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8110      492C2057 
 8110      77414C74 
 8110      4500
 8111 0016 0000     		.align	2
 8112              	.LC24:
 8113 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8113      2055204C 
 8113      20492C20 
 8113      20572041 
 8113      204C2054 
 8114 0032 0000     		.align	2
 8115              	.LC25:
 8116 0034 2000     		.ascii	" \000"
 8117 0036 0000     		.align	2
 8118              	.LC26:
 8119 0038 48595000 		.ascii	"HYP\000"
 8120              		.align	2
 8121              	.LC29:
 8122 003c 7F060600 		.ascii	"\177\006\006\000"
 8123              		.align	2
 8124              	.LC30:
 8125 0040 3020746F 		.ascii	"0 to 255\000"
 8125      20323535 
 8125      00
 8126 0049 000000   		.align	2
 8127              	.LC31:
 8128 004c 46726565 		.ascii	"Free:\000"
 8128      3A00
 8129 0052 0000     		.align	2
 8130              	.LC32:
 8131 0054 202C2046 		.ascii	" , FL. \000"
 8131      4C2E2000 
 8132              		.align	2
 8133              	.LC33:
 8134 005c 52656773 		.ascii	"Regs:\000"
 8134      3A00
 8135 0062 0000     		.align	2
 8136              	.LC34:
 8137 0064 20910606 		.ascii	" \221\006\006+\000"
 8137      2B00
 8138 006a 0000     		.align	2
 8139              	.LC35:
 8140 006c 202C204C 		.ascii	" , Loc. \000"
 8140      6F632E20 
 8140      00
 8141 0075 000000   		.align	2
 8142              	.LC36:
ARM GAS  /tmp/ccQmbpxO.s 			page 236


 8143 0078 464C2000 		.ascii	"FL \000"
 8144              		.align	2
 8145              	.LC37:
 8146 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8146      06413A44 
 8146      064C494A 
 8146      4B00
 8147 008a 0000     		.align	2
 8148              	.LC38:
 8149 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8149      302D2E31 
 8149      3500
 8150 0096 0000     		.align	2
 8151              	.LC39:
 8152 0098 43414C4C 		.ascii	"CALLS\000"
 8152      5300
 8153 009e 0000     		.align	2
 8154              	.LC40:
 8155 00a0 52656720 		.ascii	"Reg \000"
 8155      00
 8156 00a5 000000   		.align	2
 8157              	.LC41:
 8158 00a8 00       		.ascii	"\000"
 8159 00a9 000000   		.align	2
 8160              	.LC42:
 8161 00ac 202D2D2D 		.ascii	" ---\000"
 8161      00
 8162 00b1 000000   		.align	2
 8163              	.LC28:
 8164 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8164      093E0A00 
 8165              		.align	2
 8166              	.LC27:
 8167 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8167      41424344 
 8167      4C494A4B 
 8167      00
 8168              		.section	.text.display,"ax",%progbits
 8169              		.align	1
 8170              		.p2align 2,,3
 8171              		.global	display
 8172              		.syntax unified
 8173              		.thumb
 8174              		.thumb_func
 8175              		.fpu fpv4-sp-d16
 8177              	display:
 8178              	.LFB34:
2215:src/display.c **** 	int i, j;
 8179              		.loc 1 2215 20 is_stmt 1 view -0
 8180              		.cfi_startproc
 8181              		@ args = 0, pretend = 0, frame = 160
 8182              		@ frame_needed = 0, uses_anonymous_args = 0
2216:src/display.c **** 	char buf[40], *bp = buf;
 8183              		.loc 1 2216 2 view .LVU2619
2217:src/display.c **** 	const char *p;
 8184              		.loc 1 2217 2 view .LVU2620
2215:src/display.c **** 	int i, j;
ARM GAS  /tmp/ccQmbpxO.s 			page 237


 8185              		.loc 1 2215 20 is_stmt 0 view .LVU2621
 8186 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8187              		.cfi_def_cfa_offset 36
 8188              		.cfi_offset 4, -36
 8189              		.cfi_offset 5, -32
 8190              		.cfi_offset 6, -28
 8191              		.cfi_offset 7, -24
 8192              		.cfi_offset 8, -20
 8193              		.cfi_offset 9, -16
 8194              		.cfi_offset 10, -12
 8195              		.cfi_offset 11, -8
 8196              		.cfi_offset 14, -4
2220:src/display.c **** 	int skip = 0;
 8197              		.loc 1 2220 24 view .LVU2622
 8198 0004 BE4C     		ldr	r4, .L1098
2215:src/display.c **** 	int i, j;
 8199              		.loc 1 2215 20 view .LVU2623
 8200 0006 A9B0     		sub	sp, sp, #164
 8201              		.cfi_def_cfa_offset 200
 8202              	.LVL915:
2218:src/display.c **** 	int annuc = 0;
 8203              		.loc 1 2218 2 is_stmt 1 view .LVU2624
2219:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8204              		.loc 1 2219 2 view .LVU2625
2220:src/display.c **** 	int skip = 0;
 8205              		.loc 1 2220 2 view .LVU2626
2220:src/display.c **** 	int skip = 0;
 8206              		.loc 1 2220 24 is_stmt 0 view .LVU2627
 8207 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8208              	.LVL916:
2221:src/display.c **** 	int x_disp = 0;
 8209              		.loc 1 2221 2 is_stmt 1 view .LVU2628
2222:src/display.c **** 	const int shift = cur_shift();
 8210              		.loc 1 2222 2 view .LVU2629
2223:src/display.c **** 
 8211              		.loc 1 2223 2 view .LVU2630
2223:src/display.c **** 
 8212              		.loc 1 2223 20 is_stmt 0 view .LVU2631
 8213 000c FFF7FEFF 		bl	cur_shift
 8214              	.LVL917:
2227:src/display.c **** 		State2.disp_freeze = 0;
 8215              		.loc 1 2227 6 view .LVU2632
 8216 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8217              	.LVL918:
2227:src/display.c **** 		State2.disp_freeze = 0;
 8218              		.loc 1 2227 2 is_stmt 1 view .LVU2633
2227:src/display.c **** 		State2.disp_freeze = 0;
 8219              		.loc 1 2227 5 is_stmt 0 view .LVU2634
 8220 0012 13F01006 		ands	r6, r3, #16
 8221 0016 40F08780 		bne	.L1057
2237:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8222              		.loc 1 2237 2 is_stmt 1 view .LVU2635
2237:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8223              		.loc 1 2237 6 is_stmt 0 view .LVU2636
 8224 001a BA4F     		ldr	r7, .L1098+4
 8225 001c 3D68     		ldr	r5, [r7]
2237:src/display.c **** #if defined(QTGUI) || defined(IOS)
ARM GAS  /tmp/ccQmbpxO.s 			page 238


 8226              		.loc 1 2237 5 view .LVU2637
 8227 001e 002D     		cmp	r5, #0
 8228 0020 4BD1     		bne	.L1058
2254:src/display.c **** 
 8229              		.loc 1 2254 2 is_stmt 1 view .LVU2638
 8230 0022 8246     		mov	r10, r0
 8231 0024 FFF7FEFF 		bl	reset_disp
 8232              	.LVL919:
2256:src/display.c **** 	if (State2.cmplx  && !cata) {
 8233              		.loc 1 2256 2 view .LVU2639
 8234 0028 1EA8     		add	r0, sp, #120
 8235              	.LVL920:
2256:src/display.c **** 	if (State2.cmplx  && !cata) {
 8236              		.loc 1 2256 2 is_stmt 0 view .LVU2640
 8237 002a 2822     		movs	r2, #40
 8238 002c 2946     		mov	r1, r5
 8239 002e FFF7FEFF 		bl	xset
 8240              	.LVL921:
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8241              		.loc 1 2257 2 is_stmt 1 view .LVU2641
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8242              		.loc 1 2257 6 is_stmt 0 view .LVU2642
 8243 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8244              		.loc 1 2257 5 view .LVU2643
 8245 0034 9E07     		lsls	r6, r3, #30
 8246 0036 03D5     		bpl	.L941
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8247              		.loc 1 2257 20 discriminator 1 view .LVU2644
 8248 0038 B9F1000F 		cmp	r9, #0
 8249 003c 00F0EC80 		beq	.L1059
 8250              	.L941:
2217:src/display.c **** 	const char *p;
 8251              		.loc 1 2217 17 view .LVU2645
 8252 0040 0DF17808 		add	r8, sp, #120
 8253              	.LVL922:
 8254              	.L812:
2261:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8255              		.loc 1 2261 2 is_stmt 1 view .LVU2646
2261:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8256              		.loc 1 2261 5 is_stmt 0 view .LVU2647
 8257 0044 D806     		lsls	r0, r3, #27
 8258 0046 00F17581 		bmi	.L1060
2273:src/display.c **** 		set_status(S_SURE);
 8259              		.loc 1 2273 9 is_stmt 1 view .LVU2648
2273:src/display.c **** 		set_status(S_SURE);
 8260              		.loc 1 2273 13 is_stmt 0 view .LVU2649
 8261 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2273:src/display.c **** 		set_status(S_SURE);
 8262              		.loc 1 2273 12 view .LVU2650
 8263 004c 5107     		lsls	r1, r2, #29
 8264 004e 40F0F480 		bne	.L1061
2275:src/display.c **** 		bp = scopy(bp, "HYP");
 8265              		.loc 1 2275 9 is_stmt 1 view .LVU2651
2275:src/display.c **** 		bp = scopy(bp, "HYP");
 8266              		.loc 1 2275 12 is_stmt 0 view .LVU2652
 8267 0052 9A06     		lsls	r2, r3, #26
ARM GAS  /tmp/ccQmbpxO.s 			page 239


 8268 0054 00F1C280 		bmi	.L1062
2280:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8269              		.loc 1 2280 9 is_stmt 1 view .LVU2653
2280:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8270              		.loc 1 2280 12 is_stmt 0 view .LVU2654
 8271 0058 DE07     		lsls	r6, r3, #31
 8272 005a 00F1AE81 		bmi	.L1063
2288:src/display.c **** 		/* Commands with arguments */
 8273              		.loc 1 2288 9 is_stmt 1 view .LVU2655
2288:src/display.c **** 		/* Commands with arguments */
 8274              		.loc 1 2288 13 is_stmt 0 view .LVU2656
 8275 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2288:src/display.c **** 		/* Commands with arguments */
 8276              		.loc 1 2288 12 view .LVU2657
 8277 0060 8806     		lsls	r0, r1, #26
 8278 0062 00F10582 		bmi	.L1064
2319:src/display.c **** 		*bp++ = 'x';
 8279              		.loc 1 2319 9 is_stmt 1 view .LVU2658
2319:src/display.c **** 		*bp++ = 'x';
 8280              		.loc 1 2319 19 is_stmt 0 view .LVU2659
 8281 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2319:src/display.c **** 		*bp++ = 'x';
 8282              		.loc 1 2319 12 view .LVU2660
 8283 0068 072A     		cmp	r2, #7
 8284 006a 40F0E481 		bne	.L1065
2325:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8285              		.loc 1 2325 9 is_stmt 1 view .LVU2661
2325:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8286              		.loc 1 2325 12 is_stmt 0 view .LVU2662
 8287 006e B9F1000F 		cmp	r9, #0
 8288 0072 40F00F83 		bne	.L1066
2373:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8289              		.loc 1 2373 9 is_stmt 1 view .LVU2663
2373:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8290              		.loc 1 2373 12 is_stmt 0 view .LVU2664
 8291 0076 1A07     		lsls	r2, r3, #28
 8292 0078 00F16083 		bmi	.L1067
2381:src/display.c **** 		show_status();
 8293              		.loc 1 2381 9 is_stmt 1 view .LVU2665
2381:src/display.c **** 		show_status();
 8294              		.loc 1 2381 19 is_stmt 0 view .LVU2666
 8295 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
2381:src/display.c **** 		show_status();
 8296              		.loc 1 2381 12 view .LVU2667
 8297 007e 002B     		cmp	r3, #0
 8298 0080 40F0E583 		bne	.L1068
2384:src/display.c **** 		show_label();
 8299              		.loc 1 2384 9 is_stmt 1 view .LVU2668
2384:src/display.c **** 		show_label();
 8300              		.loc 1 2384 13 is_stmt 0 view .LVU2669
 8301 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2384:src/display.c **** 		show_label();
 8302              		.loc 1 2384 12 view .LVU2670
 8303 0086 5E07     		lsls	r6, r3, #29
 8304 0088 00F1AC83 		bmi	.L1069
2387:src/display.c **** 		show_registers();
 8305              		.loc 1 2387 9 is_stmt 1 view .LVU2671
ARM GAS  /tmp/ccQmbpxO.s 			page 240


2387:src/display.c **** 		show_registers();
 8306              		.loc 1 2387 12 is_stmt 0 view .LVU2672
 8307 008c 1807     		lsls	r0, r3, #28
 8308 008e 00F1D484 		bmi	.L1070
2397:src/display.c **** 		if (DispMsg) {
 8309              		.loc 1 2397 9 is_stmt 1 view .LVU2673
2397:src/display.c **** 		if (DispMsg) {
 8310              		.loc 1 2397 12 is_stmt 0 view .LVU2674
 8311 0092 4806     		lsls	r0, r1, #25
 8312 0094 40F1B284 		bpl	.L877
2398:src/display.c **** 			set_status(DispMsg);
 8313              		.loc 1 2398 3 is_stmt 1 view .LVU2675
2398:src/display.c **** 			set_status(DispMsg);
 8314              		.loc 1 2398 7 is_stmt 0 view .LVU2676
 8315 0098 9B4E     		ldr	r6, .L1098+8
 8316 009a D6F800B0 		ldr	fp, [r6]
2398:src/display.c **** 			set_status(DispMsg);
 8317              		.loc 1 2398 6 view .LVU2677
 8318 009e BBF1000F 		cmp	fp, #0
 8319 00a2 00F08184 		beq	.L878
2399:src/display.c **** 		} else if (DispPlot) {
 8320              		.loc 1 2399 4 is_stmt 1 view .LVU2678
 8321 00a6 5846     		mov	r0, fp
 8322 00a8 FFF7FEFF 		bl	set_status
 8323              	.LVL923:
2456:src/display.c **** nostk:	show_flags();
 8324              		.loc 1 2456 2 view .LVU2679
 8325 00ac DFF87882 		ldr	r8, .L1098+40
 8326              	.LVL924:
2456:src/display.c **** nostk:	show_flags();
 8327              		.loc 1 2456 2 is_stmt 0 view .LVU2680
 8328 00b0 FFF7FEFF 		bl	show_stack
 8329              	.LVL925:
2457:src/display.c **** 	if (!skip) {
 8330              		.loc 1 2457 8 is_stmt 1 view .LVU2681
 8331 00b4 FFF7FEFF 		bl	show_flags
 8332              	.LVL926:
2458:src/display.c **** 		if (State2.runmode) {
 8333              		.loc 1 2458 2 view .LVU2682
 8334 00b8 C9E0     		b	.L816
 8335              	.LVL927:
 8336              	.L1058:
2244:src/display.c **** 
 8337              		.loc 1 2244 3 view .LVU2683
 8338 00ba FFF7FEFF 		bl	wait_for_display
 8339              	.LVL928:
2247:src/display.c **** 			clr_dot(i);
 8340              		.loc 1 2247 3 view .LVU2684
2247:src/display.c **** 			clr_dot(i);
 8341              		.loc 1 2247 15 view .LVU2685
 8342              	.L810:
2248:src/display.c **** 		}
 8343              		.loc 1 2248 4 discriminator 3 view .LVU2686
 8344 00be 3046     		mov	r0, r6
2247:src/display.c **** 			clr_dot(i);
 8345              		.loc 1 2247 30 is_stmt 0 discriminator 3 view .LVU2687
 8346 00c0 0136     		adds	r6, r6, #1
ARM GAS  /tmp/ccQmbpxO.s 			page 241


 8347              	.LVL929:
2248:src/display.c **** 		}
 8348              		.loc 1 2248 4 discriminator 3 view .LVU2688
 8349 00c2 FFF7FEFF 		bl	clr_dot
 8350              	.LVL930:
2247:src/display.c **** 			clr_dot(i);
 8351              		.loc 1 2247 30 is_stmt 1 discriminator 3 view .LVU2689
2247:src/display.c **** 			clr_dot(i);
 8352              		.loc 1 2247 15 discriminator 3 view .LVU2690
2247:src/display.c **** 			clr_dot(i);
 8353              		.loc 1 2247 3 is_stmt 0 discriminator 3 view .LVU2691
 8354 00c6 832E     		cmp	r6, #131
 8355 00c8 F9D1     		bne	.L810
 8356 00ca 8F4E     		ldr	r6, .L1098+8
 8357              	.LVL931:
2247:src/display.c **** 			clr_dot(i);
 8358              		.loc 1 2247 3 discriminator 3 view .LVU2692
 8359 00cc DFF85882 		ldr	r8, .L1098+40
2219:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8360              		.loc 1 2219 6 view .LVU2693
 8361 00d0 0025     		movs	r5, #0
 8362              	.LVL932:
 8363              	.L811:
2461:src/display.c **** 			if (p == NULL || cata) {
 8364              		.loc 1 2461 4 is_stmt 1 view .LVU2694
2461:src/display.c **** 			if (p == NULL || cata) {
 8365              		.loc 1 2461 8 is_stmt 0 view .LVU2695
 8366 00d2 FFF7FEFF 		bl	get_cmdline
 8367              	.LVL933:
2462:src/display.c **** 				if (ShowRegister != -1) {
 8368              		.loc 1 2462 4 is_stmt 1 view .LVU2696
2462:src/display.c **** 				if (ShowRegister != -1) {
 8369              		.loc 1 2462 7 is_stmt 0 view .LVU2697
 8370 00d6 8246     		mov	r10, r0
 8371 00d8 10B1     		cbz	r0, .L892
2462:src/display.c **** 				if (ShowRegister != -1) {
 8372              		.loc 1 2462 18 discriminator 1 view .LVU2698
 8373 00da B9F1000F 		cmp	r9, #0
 8374 00de 2ED0     		beq	.L893
 8375              	.L892:
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8376              		.loc 1 2463 5 is_stmt 1 view .LVU2699
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8377              		.loc 1 2463 22 is_stmt 0 view .LVU2700
 8378 00e0 DFF84892 		ldr	r9, .L1098+44
 8379              	.LVL934:
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8380              		.loc 1 2463 22 view .LVU2701
 8381 00e4 D9F80000 		ldr	r0, [r9]
 8382              	.LVL935:
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8383              		.loc 1 2463 8 view .LVU2702
 8384 00e8 421C     		adds	r2, r0, #1
 8385 00ea 00F05081 		beq	.L894
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8386              		.loc 1 2464 6 is_stmt 1 view .LVU2703
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/ccQmbpxO.s 			page 242


 8387              		.loc 1 2464 42 is_stmt 0 view .LVU2704
 8388 00ee 6428     		cmp	r0, #100
 8389 00f0 00F08780 		beq	.L1071
 8390              	.L895:
2465:src/display.c **** 				}
 8391              		.loc 1 2465 6 is_stmt 1 view .LVU2705
 8392 00f4 0021     		movs	r1, #0
 8393 00f6 FFF7FEFF 		bl	format_reg
 8394              	.LVL936:
2473:src/display.c **** 				goto finish;
 8395              		.loc 1 2473 4 view .LVU2706
2473:src/display.c **** 				goto finish;
 8396              		.loc 1 2473 7 is_stmt 0 view .LVU2707
 8397 00fa 3B68     		ldr	r3, [r7]
 8398 00fc 002B     		cmp	r3, #0
 8399 00fe 00F0FC80 		beq	.L1054
 8400              	.LVL937:
 8401              	.L898:
2526:src/display.c **** 	State2.disp_as_alpha = 0;
 8402              		.loc 1 2526 2 is_stmt 1 view .LVU2708
2527:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8403              		.loc 1 2527 2 view .LVU2709
2528:src/display.c **** 	State2.invalid_disp = 0;
 8404              		.loc 1 2528 2 view .LVU2710
2526:src/display.c **** 	State2.disp_as_alpha = 0;
 8405              		.loc 1 2526 17 is_stmt 0 view .LVU2711
 8406 0102 6369     		ldr	r3, [r4, #20]
 8407 0104 23F02173 		bic	r3, r3, #42205184
 8408 0108 23F48053 		bic	r3, r3, #4096
2528:src/display.c **** 	State2.invalid_disp = 0;
 8409              		.loc 1 2528 15 view .LVU2712
 8410 010c 0022     		movs	r2, #0
2526:src/display.c **** 	State2.disp_as_alpha = 0;
 8411              		.loc 1 2526 17 view .LVU2713
 8412 010e 6361     		str	r3, [r4, #20]
2530:src/display.c **** 	DispMsg = CNULL;
 8413              		.loc 1 2530 15 view .LVU2714
 8414 0110 6423     		movs	r3, #100
2528:src/display.c **** 	State2.invalid_disp = 0;
 8415              		.loc 1 2528 15 view .LVU2715
 8416 0112 6274     		strb	r2, [r4, #17]
2529:src/display.c **** 	ShowRegister = regX_idx;
 8417              		.loc 1 2529 2 is_stmt 1 view .LVU2716
2530:src/display.c **** 	DispMsg = CNULL;
 8418              		.loc 1 2530 2 view .LVU2717
2531:src/display.c **** 	DispPlot = 0;
 8419              		.loc 1 2531 10 is_stmt 0 view .LVU2718
 8420 0114 3260     		str	r2, [r6]
2532:src/display.c **** 	State2.disp_small = 0;
 8421              		.loc 1 2532 11 view .LVU2719
 8422 0116 A8F80020 		strh	r2, [r8]	@ movhi
2530:src/display.c **** 	DispMsg = CNULL;
 8423              		.loc 1 2530 15 view .LVU2720
 8424 011a C9F80030 		str	r3, [r9]
2531:src/display.c **** 	DispPlot = 0;
 8425              		.loc 1 2531 2 is_stmt 1 view .LVU2721
2532:src/display.c **** 	State2.disp_small = 0;
ARM GAS  /tmp/ccQmbpxO.s 			page 243


 8426              		.loc 1 2532 2 view .LVU2722
2533:src/display.c **** 	finish_display();
 8427              		.loc 1 2533 2 view .LVU2723
2534:src/display.c **** #ifdef CONSOLE
 8428              		.loc 1 2534 2 view .LVU2724
 8429 011e FFF7FEFF 		bl	finish_display
 8430              	.LVL938:
2538:src/display.c **** 
 8431              		.loc 1 2538 1 is_stmt 0 view .LVU2725
 8432 0122 29B0     		add	sp, sp, #164
 8433              		.cfi_remember_state
 8434              		.cfi_def_cfa_offset 36
 8435              		@ sp needed
 8436 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8437              	.LVL939:
 8438              	.L1057:
 8439              		.cfi_restore_state
2228:src/display.c **** 		State2.disp_temp = 1;
 8440              		.loc 1 2228 3 is_stmt 1 view .LVU2726
2229:src/display.c **** #ifdef CONSOLE
 8441              		.loc 1 2229 3 view .LVU2727
2233:src/display.c **** 		return;
 8442              		.loc 1 2233 11 is_stmt 0 view .LVU2728
 8443 0128 784A     		ldr	r2, .L1098+12
2228:src/display.c **** 		State2.disp_temp = 1;
 8444              		.loc 1 2228 22 view .LVU2729
 8445 012a 23F03003 		bic	r3, r3, #48
 8446 012e 43F02003 		orr	r3, r3, #32
2233:src/display.c **** 		return;
 8447              		.loc 1 2233 11 view .LVU2730
 8448 0132 0021     		movs	r1, #0
2228:src/display.c **** 		State2.disp_temp = 1;
 8449              		.loc 1 2228 22 view .LVU2731
 8450 0134 E375     		strb	r3, [r4, #23]
2233:src/display.c **** 		return;
 8451              		.loc 1 2233 3 is_stmt 1 view .LVU2732
2233:src/display.c **** 		return;
 8452              		.loc 1 2233 11 is_stmt 0 view .LVU2733
 8453 0136 1160     		str	r1, [r2]
2234:src/display.c **** 	}
 8454              		.loc 1 2234 3 is_stmt 1 view .LVU2734
2538:src/display.c **** 
 8455              		.loc 1 2538 1 is_stmt 0 view .LVU2735
 8456 0138 29B0     		add	sp, sp, #164
 8457              		.cfi_remember_state
 8458              		.cfi_def_cfa_offset 36
 8459              		@ sp needed
 8460 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8461              	.LVL940:
 8462              	.L893:
 8463              		.cfi_restore_state
2470:src/display.c **** 				x_disp = 1;
 8464              		.loc 1 2470 5 is_stmt 1 view .LVU2736
 8465              	.LBB456:
 8466              	.LBI456:
 884:src/display.c **** 	int i;
 8467              		.loc 1 884 13 view .LVU2737
ARM GAS  /tmp/ccQmbpxO.s 			page 244


 8468              	.LBB457:
 885:src/display.c **** 	int gotdot = -1;
 8469              		.loc 1 885 2 view .LVU2738
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8470              		.loc 1 886 2 view .LVU2739
 888:src/display.c **** #endif
 8471              		.loc 1 888 2 view .LVU2740
 892:src/display.c **** #endif
 8472              		.loc 1 892 2 view .LVU2741
 895:src/display.c **** 		SET_MANT_SIGN;
 8473              		.loc 1 895 2 view .LVU2742
 895:src/display.c **** 		SET_MANT_SIGN;
 8474              		.loc 1 895 5 is_stmt 0 view .LVU2743
 8475 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8476 0140 2D2B     		cmp	r3, #45
 8477 0142 00F03E82 		beq	.L1072
 8478              	.LVL941:
 8479              	.L899:
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8480              		.loc 1 900 2 is_stmt 1 view .LVU2744
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8481              		.loc 1 900 6 is_stmt 0 view .LVU2745
 8482 0146 724B     		ldr	r3, .L1098+16
 8483 0148 1B68     		ldr	r3, [r3]
 8484 014a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8485              		.loc 1 900 5 view .LVU2746
 8486 014e 13F00109 		ands	r9, r3, #1
 8487              	.LVL942:
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8488              		.loc 1 900 5 view .LVU2747
 8489 0152 00F0AC81 		beq	.L900
 8490              	.LVL943:
 901:src/display.c **** 			set_dig(i, *p);
 8491              		.loc 1 901 13 is_stmt 1 view .LVU2748
 8492 0156 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 901:src/display.c **** 			set_dig(i, *p);
 8493              		.loc 1 901 9 is_stmt 0 view .LVU2749
 8494 015a 4FF00009 		mov	r9, #0
 901:src/display.c **** 			set_dig(i, *p);
 8495              		.loc 1 901 3 view .LVU2750
 8496 015e 41B1     		cbz	r1, .L904
 8497              	.LVL944:
 8498              	.L901:
 902:src/display.c **** 			i += SEGS_PER_DIGIT;
 8499              		.loc 1 902 4 is_stmt 1 view .LVU2751
 8500 0160 4846     		mov	r0, r9
 8501 0162 FFF7FEFF 		bl	set_dig
 8502              	.LVL945:
 903:src/display.c **** 		}
 8503              		.loc 1 903 4 view .LVU2752
 901:src/display.c **** 			set_dig(i, *p);
 8504              		.loc 1 901 13 is_stmt 0 view .LVU2753
 8505 0166 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8506              	.LVL946:
 903:src/display.c **** 		}
 8507              		.loc 1 903 6 view .LVU2754
ARM GAS  /tmp/ccQmbpxO.s 			page 245


 8508 016a 09F10909 		add	r9, r9, #9
 8509              	.LVL947:
 901:src/display.c **** 			set_dig(i, *p);
 8510              		.loc 1 901 25 is_stmt 1 view .LVU2755
 901:src/display.c **** 			set_dig(i, *p);
 8511              		.loc 1 901 13 view .LVU2756
 901:src/display.c **** 			set_dig(i, *p);
 8512              		.loc 1 901 3 is_stmt 0 view .LVU2757
 8513 016e 0029     		cmp	r1, #0
 8514 0170 F6D1     		bne	.L901
 8515              	.LVL948:
 8516              	.L904:
 905:src/display.c **** 	} else {
 8517              		.loc 1 905 3 is_stmt 1 view .LVU2758
 8518 0172 FFF7FEFF 		bl	carry_overflow
 8519              	.LVL949:
 905:src/display.c **** 	} else {
 8520              		.loc 1 905 3 is_stmt 0 view .LVU2759
 8521              	.LBE457:
 8522              	.LBE456:
2473:src/display.c **** 				goto finish;
 8523              		.loc 1 2473 4 is_stmt 1 view .LVU2760
2473:src/display.c **** 				goto finish;
 8524              		.loc 1 2473 7 is_stmt 0 view .LVU2761
 8525 0176 3B68     		ldr	r3, [r7]
 8526 0178 DFF8B091 		ldr	r9, .L1098+44
 8527 017c 002B     		cmp	r3, #0
 8528 017e C0D1     		bne	.L898
 8529              	.LVL950:
 8530              	.L903:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8531              		.loc 1 2503 2 is_stmt 1 view .LVU2762
 8532 0180 FFF7FEFF 		bl	set_annunciators
 8533              	.LVL951:
2504:src/display.c **** 		ShowRPN = 0;
 8534              		.loc 1 2504 2 view .LVU2763
2504:src/display.c **** 		ShowRPN = 0;
 8535              		.loc 1 2504 50 is_stmt 0 view .LVU2764
 8536 0184 3368     		ldr	r3, [r6]
 8537 0186 002B     		cmp	r3, #0
 8538 0188 00F00981 		beq	.L1073
 8539              	.LVL952:
 8540              	.L814:
2505:src/display.c **** 		dot(RPN, 0);
 8541              		.loc 1 2505 3 is_stmt 1 view .LVU2765
2505:src/display.c **** 		dot(RPN, 0);
 8542              		.loc 1 2505 11 is_stmt 0 view .LVU2766
 8543 018c 5F4F     		ldr	r7, .L1098+12
 8544 018e 0023     		movs	r3, #0
 8545              	.LBB480:
 8546              	.LBB481:
 328:src/display.c **** }
 8547              		.loc 1 328 7 view .LVU2767
 8548 0190 8D20     		movs	r0, #141
 8549              	.LBE481:
 8550              	.LBE480:
2505:src/display.c **** 		dot(RPN, 0);
ARM GAS  /tmp/ccQmbpxO.s 			page 246


 8551              		.loc 1 2505 11 view .LVU2768
 8552 0192 3B60     		str	r3, [r7]
2506:src/display.c **** 	}
 8553              		.loc 1 2506 3 is_stmt 1 view .LVU2769
 8554              	.LVL953:
 8555              	.LBB483:
 8556              	.LBI480:
 326:src/display.c **** 	if (on)	set_dot(n);
 8557              		.loc 1 326 6 view .LVU2770
 8558              	.LBB482:
 327:src/display.c **** 	else	clr_dot(n);
 8559              		.loc 1 327 2 view .LVU2771
 328:src/display.c **** }
 8560              		.loc 1 328 7 view .LVU2772
 8561 0194 FFF7FEFF 		bl	clr_dot
 8562              	.LVL954:
 8563              	.L931:
 328:src/display.c **** }
 8564              		.loc 1 328 7 is_stmt 0 view .LVU2773
 8565              	.LBE482:
 8566              	.LBE483:
2509:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8567              		.loc 1 2509 2 is_stmt 1 view .LVU2774
2510:src/display.c **** 
 8568              		.loc 1 2510 14 is_stmt 0 view .LVU2775
 8569 0198 3B68     		ldr	r3, [r7]
 8570 019a 002B     		cmp	r3, #0
 8571 019c 4BD1     		bne	.L949
2509:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8572              		.loc 1 2509 31 view .LVU2776
 8573 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8574 01a0 12F04003 		ands	r3, r2, #64
 8575 01a4 08D0     		beq	.L932
2510:src/display.c **** 
 8576              		.loc 1 2510 18 view .LVU2777
 8577 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2510:src/display.c **** 
 8578              		.loc 1 2510 14 view .LVU2778
 8579 01a8 1B07     		lsls	r3, r3, #28
 8580 01aa 40F1EE80 		bpl	.L951
2510:src/display.c **** 
 8581              		.loc 1 2510 40 discriminator 3 view .LVU2779
 8582 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8583 01b0 012B     		cmp	r3, #1
 8584 01b2 01D0     		beq	.L932
2510:src/display.c **** 
 8585              		.loc 1 2510 70 discriminator 5 view .LVU2780
 8586 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8587              	.L932:
2509:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8588              		.loc 1 2509 19 discriminator 9 view .LVU2781
 8589 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8590 01ba 63F34512 		bfi	r2, r3, #5, #1
 8591 01be E275     		strb	r2, [r4, #23]
2513:src/display.c ****  		annunciators();
 8592              		.loc 1 2513 2 is_stmt 1 discriminator 9 view .LVU2782
2513:src/display.c ****  		annunciators();
ARM GAS  /tmp/ccQmbpxO.s 			page 247


 8593              		.loc 1 2513 5 is_stmt 0 discriminator 9 view .LVU2783
 8594 01c0 002D     		cmp	r5, #0
 8595 01c2 33D0     		beq	.L933
2513:src/display.c ****  		annunciators();
 8596              		.loc 1 2513 36 discriminator 1 view .LVU2784
 8597 01c4 D3B2     		uxtb	r3, r2
2513:src/display.c ****  		annunciators();
 8598              		.loc 1 2513 13 discriminator 1 view .LVU2785
 8599 01c6 03F02103 		and	r3, r3, #33
 8600 01ca 202B     		cmp	r3, #32
 8601 01cc 2ED0     		beq	.L933
 8602              	.L934:
2514:src/display.c ****  	State2.hms = 0;
 8603              		.loc 1 2514 4 is_stmt 1 view .LVU2786
 8604 01ce FFF7FEFF 		bl	annunciators
 8605              	.LVL955:
 8606              	.L935:
2515:src/display.c **** #else
 8607              		.loc 1 2515 3 view .LVU2787
2515:src/display.c **** #else
 8608              		.loc 1 2515 14 is_stmt 0 view .LVU2788
 8609 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8610 01d4 6FF30003 		bfc	r3, #0, #1
 8611 01d8 E375     		strb	r3, [r4, #23]
 8612 01da 92E7     		b	.L898
 8613              	.LVL956:
 8614              	.L1062:
2276:src/display.c **** 		if (! State2.dot)
 8615              		.loc 1 2276 3 is_stmt 1 view .LVU2789
2276:src/display.c **** 		if (! State2.dot)
 8616              		.loc 1 2276 8 is_stmt 0 view .LVU2790
 8617 01dc 4D49     		ldr	r1, .L1098+20
 8618 01de 4046     		mov	r0, r8
 8619 01e0 FFF7FEFF 		bl	scopy
 8620              	.LVL957:
2277:src/display.c **** 			*bp++ = '\235';
 8621              		.loc 1 2277 7 view .LVU2791
 8622 01e4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8623              	.LVL958:
2277:src/display.c **** 			*bp++ = '\235';
 8624              		.loc 1 2277 3 is_stmt 1 view .LVU2792
2277:src/display.c **** 			*bp++ = '\235';
 8625              		.loc 1 2277 6 is_stmt 0 view .LVU2793
 8626 01e6 5B06     		lsls	r3, r3, #25
 8627 01e8 40F1FD80 		bpl	.L818
 8628              	.LVL959:
 8629              	.L1049:
2277:src/display.c **** 			*bp++ = '\235';
 8630              		.loc 1 2277 6 view .LVU2794
 8631 01ec 464E     		ldr	r6, .L1098+8
 8632 01ee DFF83881 		ldr	r8, .L1098+40
 8633              	.L819:
2279:src/display.c **** 	} else if (State2.gtodot) {
 8634              		.loc 1 2279 3 is_stmt 1 view .LVU2795
 8635 01f2 1EA8     		add	r0, sp, #120
 8636 01f4 FFF7FEFF 		bl	set_status
 8637              	.LVL960:
ARM GAS  /tmp/ccQmbpxO.s 			page 248


2456:src/display.c **** nostk:	show_flags();
 8638              		.loc 1 2456 2 view .LVU2796
 8639 01f8 FFF7FEFF 		bl	show_stack
 8640              	.LVL961:
2457:src/display.c **** 	if (!skip) {
 8641              		.loc 1 2457 8 view .LVU2797
 8642 01fc FFF7FEFF 		bl	show_flags
 8643              	.LVL962:
2458:src/display.c **** 		if (State2.runmode) {
 8644              		.loc 1 2458 2 view .LVU2798
 8645 0200 25E0     		b	.L816
 8646              	.LVL963:
 8647              	.L1071:
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8648              		.loc 1 2464 45 is_stmt 0 discriminator 1 view .LVU2799
 8649 0202 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8650              		.loc 1 2464 42 discriminator 1 view .LVU2800
 8651 0204 13F00101 		ands	r1, r3, #1
 8652 0208 7FF474AF 		bne	.L895
 8653              	.LVL964:
2465:src/display.c **** 				}
 8654              		.loc 1 2465 6 is_stmt 1 view .LVU2801
 8655 020c FFF7FEFF 		bl	format_reg
 8656              	.LVL965:
2473:src/display.c **** 				goto finish;
 8657              		.loc 1 2473 4 view .LVU2802
2473:src/display.c **** 				goto finish;
 8658              		.loc 1 2473 7 is_stmt 0 view .LVU2803
 8659 0210 3B68     		ldr	r3, [r7]
 8660 0212 002B     		cmp	r3, #0
 8661 0214 B4D0     		beq	.L903
 8662 0216 74E7     		b	.L898
 8663              	.LVL966:
 8664              	.L1059:
2258:src/display.c **** 		set_status(buf);
 8665              		.loc 1 2258 3 is_stmt 1 view .LVU2804
2258:src/display.c **** 		set_status(buf);
 8666              		.loc 1 2258 9 is_stmt 0 view .LVU2805
 8667 0218 1423     		movs	r3, #20
2259:src/display.c **** 	}
 8668              		.loc 1 2259 3 view .LVU2806
 8669 021a 1EA8     		add	r0, sp, #120
2258:src/display.c **** 		set_status(buf);
 8670              		.loc 1 2258 9 view .LVU2807
 8671 021c 8DF87830 		strb	r3, [sp, #120]
2259:src/display.c **** 	}
 8672              		.loc 1 2259 3 is_stmt 1 view .LVU2808
2258:src/display.c **** 		set_status(buf);
 8673              		.loc 1 2258 6 is_stmt 0 view .LVU2809
 8674 0220 0DF17908 		add	r8, sp, #121
 8675              	.LVL967:
2259:src/display.c **** 	}
 8676              		.loc 1 2259 3 view .LVU2810
 8677 0224 FFF7FEFF 		bl	set_status
 8678              	.LVL968:
 8679 0228 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccQmbpxO.s 			page 249


 8680 022a 0BE7     		b	.L812
 8681              	.LVL969:
 8682              	.L933:
2513:src/display.c ****  		annunciators();
 8683              		.loc 1 2513 52 discriminator 3 view .LVU2811
 8684 022c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8685 022e 13F0C00F 		tst	r3, #192
 8686 0232 CED0     		beq	.L935
 8687 0234 CBE7     		b	.L934
 8688              	.L949:
 8689 0236 0023     		movs	r3, #0
 8690 0238 BEE7     		b	.L932
 8691              	.LVL970:
 8692              	.L1061:
2274:src/display.c **** 	} else if (State2.hyp) {
 8693              		.loc 1 2274 3 is_stmt 1 view .LVU2812
 8694 023a 3748     		ldr	r0, .L1098+24
 8695 023c 324E     		ldr	r6, .L1098+8
 8696 023e DFF8E880 		ldr	r8, .L1098+40
 8697              	.LVL971:
2274:src/display.c **** 	} else if (State2.hyp) {
 8698              		.loc 1 2274 3 is_stmt 0 view .LVU2813
 8699 0242 FFF7FEFF 		bl	set_status
 8700              	.LVL972:
2456:src/display.c **** nostk:	show_flags();
 8701              		.loc 1 2456 2 is_stmt 1 view .LVU2814
 8702 0246 FFF7FEFF 		bl	show_stack
 8703              	.LVL973:
2457:src/display.c **** 	if (!skip) {
 8704              		.loc 1 2457 8 view .LVU2815
 8705 024a FFF7FEFF 		bl	show_flags
 8706              	.LVL974:
2458:src/display.c **** 		if (State2.runmode) {
 8707              		.loc 1 2458 2 view .LVU2816
 8708              	.L816:
2459:src/display.c **** only_update_x:
 8709              		.loc 1 2459 3 view .LVU2817
2459:src/display.c **** only_update_x:
 8710              		.loc 1 2459 7 is_stmt 0 view .LVU2818
 8711 024e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2459:src/display.c **** only_update_x:
 8712              		.loc 1 2459 6 view .LVU2819
 8713 0250 13F0400A 		ands	r10, r3, #64
 8714 0254 7FF43DAF 		bne	.L811
 8715              	.LBB484:
2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8716              		.loc 1 2477 4 is_stmt 1 view .LVU2820
2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8717              		.loc 1 2477 22 is_stmt 0 view .LVU2821
 8718 0258 2D4B     		ldr	r3, .L1098+16
2481:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8719              		.loc 1 2481 4 view .LVU2822
 8720 025a DFF8D490 		ldr	r9, .L1098+48
 8721              	.LVL975:
2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8722              		.loc 1 2477 22 view .LVU2823
 8723 025e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQmbpxO.s 			page 250


2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8724              		.loc 1 2477 17 view .LVU2824
 8725 0260 B3F8E077 		ldrh	r7, [r3, #2016]
 8726              	.LVL976:
2478:src/display.c **** 			const int n = nLIB(pc);
 8727              		.loc 1 2478 4 is_stmt 1 view .LVU2825
2478:src/display.c **** 			const int n = nLIB(pc);
 8728              		.loc 1 2478 23 is_stmt 0 view .LVU2826
 8729 0264 3846     		mov	r0, r7
 8730 0266 FFF7FEFF 		bl	user_pc
 8731              	.LVL977:
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8732              		.loc 1 2480 4 view .LVU2827
 8733 026a 2822     		movs	r2, #40
 8734 026c 5146     		mov	r1, r10
2478:src/display.c **** 			const int n = nLIB(pc);
 8735              		.loc 1 2478 23 view .LVU2828
 8736 026e 8346     		mov	fp, r0
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8737              		.loc 1 2480 4 view .LVU2829
 8738 0270 1EA8     		add	r0, sp, #120
 8739 0272 FFF7FEFF 		bl	xset
 8740              	.LVL978:
2479:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8741              		.loc 1 2479 18 view .LVU2830
 8742 0276 BF0B     		lsrs	r7, r7, #14
 8743              	.LVL979:
2479:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8744              		.loc 1 2479 4 is_stmt 1 view .LVU2831
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8745              		.loc 1 2480 4 view .LVU2832
2481:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8746              		.loc 1 2481 4 view .LVU2833
 8747 0278 D9F80000 		ldr	r0, [r9]
 8748 027c 5246     		mov	r2, r10
 8749 027e 0121     		movs	r1, #1
 8750 0280 FFF7FEFF 		bl	set_exp
 8751              	.LVL980:
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8752              		.loc 1 2482 4 view .LVU2834
 8753 0284 002F     		cmp	r7, #0
 8754 0286 40F0B480 		bne	.L1074
 8755 028a 2449     		ldr	r1, .L1098+28
 8756 028c 1EA8     		add	r0, sp, #120
 8757 028e FFF7FEFF 		bl	scopy_spc
 8758              	.LVL981:
 8759 0292 0322     		movs	r2, #3
 8760 0294 5946     		mov	r1, fp
 8761 0296 FFF7FEFF 		bl	num_arg_0
 8762              	.LVL982:
2484:src/display.c **** #ifndef REALBUILD
 8763              		.loc 1 2484 4 view .LVU2835
 8764 029a 0921     		movs	r1, #9
 8765 029c 1EA8     		add	r0, sp, #120
 8766 029e FFF7FEFF 		bl	set_digits_string
 8767              	.LVL983:
2486:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
ARM GAS  /tmp/ccQmbpxO.s 			page 251


 8768              		.loc 1 2486 4 view .LVU2836
 8769 02a2 3946     		mov	r1, r7
 8770 02a4 2822     		movs	r2, #40
 8771 02a6 1EA8     		add	r0, sp, #120
 8772 02a8 FFF7FEFF 		bl	xset
 8773              	.LVL984:
2487:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8774              		.loc 1 2487 4 view .LVU2837
 8775 02ac 3A46     		mov	r2, r7
 8776 02ae 0121     		movs	r1, #1
 8777 02b0 D9F80000 		ldr	r0, [r9]
 8778 02b4 FFF7FEFF 		bl	set_exp
 8779              	.LVL985:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8780              		.loc 1 2488 4 view .LVU2838
 8781 02b8 1949     		ldr	r1, .L1098+32
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8782              		.loc 1 2482 4 is_stmt 0 view .LVU2839
 8783 02ba 0327     		movs	r7, #3
 8784              	.LVL986:
 8785              	.L937:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8786              		.loc 1 2488 4 discriminator 4 view .LVU2840
 8787 02bc 1EA8     		add	r0, sp, #120
 8788 02be FFF7FEFF 		bl	scopy_spc
 8789              	.LVL987:
 8790 02c2 3A46     		mov	r2, r7
 8791 02c4 5946     		mov	r1, fp
 8792 02c6 FFF7FEFF 		bl	num_arg_0
 8793              	.LVL988:
 8794              	.LBB485:
2491:src/display.c **** 			  char *l=LastDisplayedNumber;
 8795              		.loc 1 2491 6 is_stmt 1 discriminator 4 view .LVU2841
2492:src/display.c **** 			  *l++=' ';
 8796              		.loc 1 2492 6 discriminator 4 view .LVU2842
2493:src/display.c **** 			  while(*b) {
 8797              		.loc 1 2493 6 discriminator 4 view .LVU2843
2493:src/display.c **** 			  while(*b) {
 8798              		.loc 1 2493 10 is_stmt 0 discriminator 4 view .LVU2844
 8799 02ca 164B     		ldr	r3, .L1098+36
2494:src/display.c **** 				  *l++=*b++;
 8800              		.loc 1 2494 12 discriminator 4 view .LVU2845
 8801 02cc 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2493:src/display.c **** 			  while(*b) {
 8802              		.loc 1 2493 10 discriminator 4 view .LVU2846
 8803 02d0 2027     		movs	r7, #32
 8804 02d2 1F70     		strb	r7, [r3]
2494:src/display.c **** 				  *l++=*b++;
 8805              		.loc 1 2494 6 is_stmt 1 discriminator 4 view .LVU2847
2494:src/display.c **** 				  *l++=*b++;
 8806              		.loc 1 2494 11 discriminator 4 view .LVU2848
 8807 02d4 0029     		cmp	r1, #0
 8808 02d6 00F04782 		beq	.L948
 8809 02da 0333     		adds	r3, r3, #3
 8810 02dc 1EA8     		add	r0, sp, #120
 8811              	.LVL989:
 8812              	.L930:
ARM GAS  /tmp/ccQmbpxO.s 			page 252


2495:src/display.c **** 				  *l++=' ';
 8813              		.loc 1 2495 7 view .LVU2849
2495:src/display.c **** 				  *l++=' ';
 8814              		.loc 1 2495 11 is_stmt 0 view .LVU2850
 8815 02de 03F8021C 		strb	r1, [r3, #-2]
2496:src/display.c **** 			  }
 8816              		.loc 1 2496 7 is_stmt 1 view .LVU2851
 8817              	.LVL990:
2494:src/display.c **** 				  *l++=*b++;
 8818              		.loc 1 2494 12 is_stmt 0 view .LVU2852
 8819 02e2 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8820              	.LVL991:
2496:src/display.c **** 			  }
 8821              		.loc 1 2496 11 view .LVU2853
 8822 02e6 03F8017C 		strb	r7, [r3, #-1]
2494:src/display.c **** 				  *l++=*b++;
 8823              		.loc 1 2494 11 is_stmt 1 view .LVU2854
 8824 02ea 1A46     		mov	r2, r3
 8825 02ec 0233     		adds	r3, r3, #2
 8826              	.LVL992:
2494:src/display.c **** 				  *l++=*b++;
 8827              		.loc 1 2494 11 is_stmt 0 view .LVU2855
 8828 02ee 0029     		cmp	r1, #0
 8829 02f0 F5D1     		bne	.L930
 8830              	.LVL993:
 8831              	.L929:
2498:src/display.c ****       }
 8832              		.loc 1 2498 6 is_stmt 1 view .LVU2856
2498:src/display.c ****       }
 8833              		.loc 1 2498 8 is_stmt 0 view .LVU2857
 8834 02f2 0023     		movs	r3, #0
 8835 02f4 DFF83490 		ldr	r9, .L1098+44
 8836 02f8 1370     		strb	r3, [r2]
 8837              	.LVL994:
2498:src/display.c ****       }
 8838              		.loc 1 2498 8 view .LVU2858
 8839              	.LBE485:
 8840              	.LBE484:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8841              		.loc 1 2503 2 is_stmt 1 view .LVU2859
 8842              	.L1054:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8843              		.loc 1 2503 2 is_stmt 0 view .LVU2860
 8844 02fa FFF7FEFF 		bl	set_annunciators
 8845              	.LVL995:
2504:src/display.c **** 		ShowRPN = 0;
 8846              		.loc 1 2504 2 is_stmt 1 view .LVU2861
 8847 02fe 45E7     		b	.L814
 8848              	.L1099:
 8849              		.align	2
 8850              	.L1098:
 8851 0300 00000000 		.word	StateWhileOn
 8852 0304 00000000 		.word	WasDataEntry
 8853 0308 00000000 		.word	DispMsg
 8854 030c 00000000 		.word	ShowRPN
 8855 0310 00000000 		.word	main_ram
 8856 0314 38000000 		.word	.LC26
ARM GAS  /tmp/ccQmbpxO.s 			page 253


 8857 0318 00000000 		.word	.LANCHOR20
 8858 031c 00000000 		.word	.LANCHOR24
 8859 0320 00000000 		.word	.LANCHOR18
 8860 0324 00000000 		.word	LastDisplayedNumber
 8861 0328 00000000 		.word	DispPlot
 8862 032c 00000000 		.word	ShowRegister
 8863 0330 00000000 		.word	ProgFree
 8864              	.LVL996:
 8865              	.L1060:
 8866              	.LBB487:
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8867              		.loc 1 2262 3 view .LVU2862
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8868              		.loc 1 2262 8 is_stmt 0 view .LVU2863
 8869 0334 C14B     		ldr	r3, .L1100
 8870 0336 C24E     		ldr	r6, .L1100+4
 8871 0338 DFF85083 		ldr	r8, .L1100+80
 8872              	.LVL997:
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8873              		.loc 1 2262 8 view .LVU2864
 8874 033c DFF85093 		ldr	r9, .L1100+84
 8875              	.LVL998:
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8876              		.loc 1 2262 8 view .LVU2865
 8877 0340 93E80700 		ldm	r3, {r0, r1, r2}
 8878 0344 15AB     		add	r3, sp, #84
 8879 0346 03C3     		stmia	r3!, {r0, r1}
 8880 0348 0021     		movs	r1, #0
2263:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8881              		.loc 1 2263 3 view .LVU2866
 8882 034a BE48     		ldr	r0, .L1100+8
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8883              		.loc 1 2262 8 view .LVU2867
 8884 034c 1A80     		strh	r2, [r3]	@ movhi
 8885 034e CDF85E10 		str	r1, [sp, #94]	@ unaligned
2263:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8886              		.loc 1 2263 3 is_stmt 1 view .LVU2868
 8887 0352 FFF7FEFF 		bl	set_digits_string
 8888              	.LVL999:
2264:src/display.c **** #ifndef REALBUILD
 8889              		.loc 1 2264 3 view .LVU2869
 8890              	.LBB488:
 8891              	.LBI488:
 394:src/display.c **** 	if (res) *res++ = ch;
 8892              		.loc 1 394 14 view .LVU2870
 8893              	.LBB489:
 395:src/display.c **** 	else	set_dig(base, ch);
 8894              		.loc 1 395 2 view .LVU2871
 396:src/display.c **** 	return res;
 8895              		.loc 1 396 7 view .LVU2872
 8896 0356 7221     		movs	r1, #114
 8897 0358 6C20     		movs	r0, #108
 8898 035a FFF7FEFF 		bl	set_dig
 8899              	.LVL1000:
 397:src/display.c **** }
 8900              		.loc 1 397 2 view .LVU2873
 397:src/display.c **** }
ARM GAS  /tmp/ccQmbpxO.s 			page 254


 8901              		.loc 1 397 2 is_stmt 0 view .LVU2874
 8902              	.LBE489:
 8903              	.LBE488:
2266:src/display.c **** 		scopy(LastDisplayedExponent, " ");
 8904              		.loc 1 2266 3 is_stmt 1 view .LVU2875
 8905 035e BA49     		ldr	r1, .L1100+12
 8906 0360 BA48     		ldr	r0, .L1100+16
 8907 0362 FFF7FEFF 		bl	scopy
 8908              	.LVL1001:
2267:src/display.c **** #endif
 8909              		.loc 1 2267 3 view .LVU2876
 8910 0366 BA49     		ldr	r1, .L1100+20
 8911 0368 BA48     		ldr	r0, .L1100+24
 8912 036a FFF7FEFF 		bl	scopy
 8913              	.LVL1002:
2269:src/display.c **** 		set_status(vers);
 8914              		.loc 1 2269 3 view .LVU2877
 8915 036e BA49     		ldr	r1, .L1100+28
 8916 0370 0422     		movs	r2, #4
 8917 0372 0DF15D00 		add	r0, sp, #93
 8918 0376 FFF7FEFF 		bl	xcopy
 8919              	.LVL1003:
2270:src/display.c **** 		skip = 1;
 8920              		.loc 1 2270 3 view .LVU2878
 8921 037a 15A8     		add	r0, sp, #84
 8922 037c FFF7FEFF 		bl	set_status
 8923              	.LVL1004:
2271:src/display.c **** 		goto nostk;
 8924              		.loc 1 2271 3 view .LVU2879
2272:src/display.c **** 	} else if (State2.confirm) {
 8925              		.loc 1 2272 3 view .LVU2880
2272:src/display.c **** 	} else if (State2.confirm) {
 8926              		.loc 1 2272 3 is_stmt 0 view .LVU2881
 8927              	.LBE487:
2457:src/display.c **** 	if (!skip) {
 8928              		.loc 1 2457 8 is_stmt 1 view .LVU2882
 8929 0380 FFF7FEFF 		bl	show_flags
 8930              	.LVL1005:
2458:src/display.c **** 		if (State2.runmode) {
 8931              		.loc 1 2458 2 view .LVU2883
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8932              		.loc 1 2503 2 view .LVU2884
 8933 0384 FFF7FEFF 		bl	set_annunciators
 8934              	.LVL1006:
2504:src/display.c **** 		ShowRPN = 0;
 8935              		.loc 1 2504 2 view .LVU2885
 8936 0388 00E7     		b	.L814
 8937              	.LVL1007:
 8938              	.L951:
2504:src/display.c **** 		ShowRPN = 0;
 8939              		.loc 1 2504 2 is_stmt 0 view .LVU2886
 8940 038a 0123     		movs	r3, #1
 8941 038c 14E7     		b	.L932
 8942              	.LVL1008:
 8943              	.L894:
2468:src/display.c **** 			} else {
 8944              		.loc 1 2468 6 is_stmt 1 view .LVU2887
ARM GAS  /tmp/ccQmbpxO.s 			page 255


 8945 038e B348     		ldr	r0, .L1100+32
 8946 0390 2421     		movs	r1, #36
 8947 0392 FFF7FEFF 		bl	set_digits_string
 8948              	.LVL1009:
2473:src/display.c **** 				goto finish;
 8949              		.loc 1 2473 4 view .LVU2888
2473:src/display.c **** 				goto finish;
 8950              		.loc 1 2473 7 is_stmt 0 view .LVU2889
 8951 0396 3B68     		ldr	r3, [r7]
 8952 0398 002B     		cmp	r3, #0
 8953 039a AED0     		beq	.L1054
 8954 039c B1E6     		b	.L898
 8955              	.LVL1010:
 8956              	.L1073:
2504:src/display.c **** 		ShowRPN = 0;
 8957              		.loc 1 2504 69 discriminator 3 view .LVU2890
 8958 039e B8F90030 		ldrsh	r3, [r8]
 8959 03a2 002B     		cmp	r3, #0
 8960 03a4 7FF4F2AE 		bne	.L814
2504:src/display.c **** 		ShowRPN = 0;
 8961              		.loc 1 2504 81 discriminator 4 view .LVU2891
 8962 03a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 8963 03aa 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 8964 03ac 03F00403 		and	r3, r3, #4
 8965 03b0 1343     		orrs	r3, r3, r2
 8966 03b2 7FF4EBAE 		bne	.L814
 8967 03b6 AA4F     		ldr	r7, .L1100+36
 8968 03b8 EEE6     		b	.L931
 8969              	.LVL1011:
 8970              	.L1063:
2282:src/display.c **** 		if (State2.numdigit > 0)
 8971              		.loc 1 2282 3 is_stmt 1 view .LVU2892
2282:src/display.c **** 		if (State2.numdigit > 0)
 8972              		.loc 1 2282 8 is_stmt 0 view .LVU2893
 8973 03ba 2E22     		movs	r2, #46
 8974 03bc A949     		ldr	r1, .L1100+40
 8975 03be 4046     		mov	r0, r8
 8976 03c0 FFF7FEFF 		bl	scopy_char
 8977              	.LVL1012:
2283:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 8978              		.loc 1 2283 13 view .LVU2894
 8979 03c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2282:src/display.c **** 		if (State2.numdigit > 0)
 8980              		.loc 1 2282 8 view .LVU2895
 8981 03c6 0346     		mov	r3, r0
 8982              	.LVL1013:
2283:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 8983              		.loc 1 2283 3 is_stmt 1 view .LVU2896
2283:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 8984              		.loc 1 2283 6 is_stmt 0 view .LVU2897
 8985 03c8 002A     		cmp	r2, #0
 8986 03ca 4CD1     		bne	.L1075
 8987              	.L821:
2286:src/display.c **** 		set_status(buf);
 8988              		.loc 1 2286 4 is_stmt 1 view .LVU2898
 8989              	.LVL1014:
2286:src/display.c **** 		set_status(buf);
ARM GAS  /tmp/ccQmbpxO.s 			page 256


 8990              		.loc 1 2286 10 is_stmt 0 view .LVU2899
 8991 03cc 5F22     		movs	r2, #95
 8992 03ce 1A70     		strb	r2, [r3]
2287:src/display.c **** 	} else if (State2.rarg) {
 8993              		.loc 1 2287 3 is_stmt 1 view .LVU2900
 8994              	.LVL1015:
 8995              	.L837:
 8996              	.LBB490:
2372:src/display.c **** 	} else if (State2.multi) {
 8997              		.loc 1 2372 3 view .LVU2901
 8998 03d0 1EA8     		add	r0, sp, #120
 8999 03d2 FFF7FEFF 		bl	set_status
 9000              	.LVL1016:
2372:src/display.c **** 	} else if (State2.multi) {
 9001              		.loc 1 2372 3 is_stmt 0 view .LVU2902
 9002              	.LBE490:
2456:src/display.c **** nostk:	show_flags();
 9003              		.loc 1 2456 2 is_stmt 1 view .LVU2903
 9004 03d6 9A4E     		ldr	r6, .L1100+4
 9005 03d8 DFF8B082 		ldr	r8, .L1100+80
 9006 03dc FFF7FEFF 		bl	show_stack
 9007              	.LVL1017:
2457:src/display.c **** 	if (!skip) {
 9008              		.loc 1 2457 8 view .LVU2904
 9009 03e0 FFF7FEFF 		bl	show_flags
 9010              	.LVL1018:
2458:src/display.c **** 		if (State2.runmode) {
 9011              		.loc 1 2458 2 view .LVU2905
 9012 03e4 33E7     		b	.L816
 9013              	.LVL1019:
 9014              	.L818:
2278:src/display.c **** 		set_status(buf);
 9015              		.loc 1 2278 4 view .LVU2906
2278:src/display.c **** 		set_status(buf);
 9016              		.loc 1 2278 10 is_stmt 0 view .LVU2907
 9017 03e6 9D23     		movs	r3, #157
 9018 03e8 954E     		ldr	r6, .L1100+4
 9019 03ea DFF8A082 		ldr	r8, .L1100+80
 9020 03ee 0370     		strb	r3, [r0]
 9021 03f0 FFE6     		b	.L819
 9022              	.LVL1020:
 9023              	.L1074:
 9024              	.LBB499:
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9025              		.loc 1 2482 4 discriminator 1 view .LVU2908
 9026 03f2 9D49     		ldr	r1, .L1100+44
 9027 03f4 07EB8703 		add	r3, r7, r7, lsl #2
2483:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
 9028              		.loc 1 2483 19 discriminator 1 view .LVU2909
 9029 03f8 07F00107 		and	r7, r7, #1
 9030              	.LVL1021:
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9031              		.loc 1 2482 4 discriminator 1 view .LVU2910
 9032 03fc 1944     		add	r1, r1, r3
 9033 03fe 1EA8     		add	r0, sp, #120
 9034 0400 0337     		adds	r7, r7, #3
 9035 0402 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccQmbpxO.s 			page 257


 9036 0404 FFF7FEFF 		bl	scopy_spc
 9037              	.LVL1022:
 9038 0408 3A46     		mov	r2, r7
 9039 040a 5946     		mov	r1, fp
 9040 040c FFF7FEFF 		bl	num_arg_0
 9041              	.LVL1023:
2484:src/display.c **** #ifndef REALBUILD
 9042              		.loc 1 2484 4 is_stmt 1 discriminator 1 view .LVU2911
 9043 0410 0921     		movs	r1, #9
 9044 0412 1EA8     		add	r0, sp, #120
 9045 0414 FFF7FEFF 		bl	set_digits_string
 9046              	.LVL1024:
2486:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 9047              		.loc 1 2486 4 discriminator 1 view .LVU2912
 9048 0418 2822     		movs	r2, #40
 9049 041a 5146     		mov	r1, r10
 9050 041c 1EA8     		add	r0, sp, #120
 9051 041e FFF7FEFF 		bl	xset
 9052              	.LVL1025:
2487:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9053              		.loc 1 2487 4 discriminator 1 view .LVU2913
 9054 0422 0121     		movs	r1, #1
 9055 0424 D9F80000 		ldr	r0, [r9]
 9056 0428 5246     		mov	r2, r10
 9057 042a FFF7FEFF 		bl	set_exp
 9058              	.LVL1026:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9059              		.loc 1 2488 4 discriminator 1 view .LVU2914
 9060 042e 8F49     		ldr	r1, .L1100+48
 9061 0430 019B     		ldr	r3, [sp, #4]
 9062 0432 1944     		add	r1, r1, r3
 9063 0434 42E7     		b	.L937
 9064              	.LVL1027:
 9065              	.L1065:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9066              		.loc 1 2488 4 is_stmt 0 discriminator 1 view .LVU2915
 9067              	.LBE499:
2320:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9068              		.loc 1 2320 3 is_stmt 1 view .LVU2916
2321:src/display.c **** 		*bp++ = '_';
 9069              		.loc 1 2321 32 is_stmt 0 view .LVU2917
 9070 0436 8E4B     		ldr	r3, .L1100+52
 9071 0438 814E     		ldr	r6, .L1100+4
2321:src/display.c **** 		*bp++ = '_';
 9072              		.loc 1 2321 9 view .LVU2918
 9073 043a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9074 043c 88F80130 		strb	r3, [r8, #1]
2320:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9075              		.loc 1 2320 9 view .LVU2919
 9076 0440 7823     		movs	r3, #120
2322:src/display.c **** 		*bp++ = '?';
 9077              		.loc 1 2322 9 view .LVU2920
 9078 0442 5F22     		movs	r2, #95
2320:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9079              		.loc 1 2320 9 view .LVU2921
 9080 0444 88F80030 		strb	r3, [r8]
2321:src/display.c **** 		*bp++ = '_';
ARM GAS  /tmp/ccQmbpxO.s 			page 258


 9081              		.loc 1 2321 3 is_stmt 1 view .LVU2922
 9082              	.LVL1028:
2322:src/display.c **** 		*bp++ = '?';
 9083              		.loc 1 2322 3 view .LVU2923
2323:src/display.c **** 		set_status(buf);
 9084              		.loc 1 2323 9 is_stmt 0 view .LVU2924
 9085 0448 3F23     		movs	r3, #63
2322:src/display.c **** 		*bp++ = '?';
 9086              		.loc 1 2322 9 view .LVU2925
 9087 044a 88F80220 		strb	r2, [r8, #2]
2323:src/display.c **** 		set_status(buf);
 9088              		.loc 1 2323 3 is_stmt 1 view .LVU2926
 9089              	.LVL1029:
2323:src/display.c **** 		set_status(buf);
 9090              		.loc 1 2323 9 is_stmt 0 view .LVU2927
 9091 044e 88F80330 		strb	r3, [r8, #3]
2324:src/display.c **** 	} else if (cata) {
 9092              		.loc 1 2324 3 is_stmt 1 view .LVU2928
 9093 0452 1EA8     		add	r0, sp, #120
 9094 0454 DFF83482 		ldr	r8, .L1100+80
 9095              	.LVL1030:
2324:src/display.c **** 	} else if (cata) {
 9096              		.loc 1 2324 3 is_stmt 0 view .LVU2929
 9097 0458 FFF7FEFF 		bl	set_status
 9098              	.LVL1031:
2456:src/display.c **** nostk:	show_flags();
 9099              		.loc 1 2456 2 is_stmt 1 view .LVU2930
 9100 045c FFF7FEFF 		bl	show_stack
 9101              	.LVL1032:
2457:src/display.c **** 	if (!skip) {
 9102              		.loc 1 2457 8 view .LVU2931
 9103 0460 FFF7FEFF 		bl	show_flags
 9104              	.LVL1033:
2458:src/display.c **** 		if (State2.runmode) {
 9105              		.loc 1 2458 2 view .LVU2932
 9106 0464 F3E6     		b	.L816
 9107              	.LVL1034:
 9108              	.L1075:
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9109              		.loc 1 2284 4 view .LVU2933
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9110              		.loc 1 2284 9 is_stmt 0 view .LVU2934
 9111 0466 2189     		ldrh	r1, [r4, #8]
 9112 0468 FFF7FEFF 		bl	num_arg_0
 9113              	.LVL1035:
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9114              		.loc 1 2284 9 view .LVU2935
 9115 046c 0346     		mov	r3, r0
 9116              	.LVL1036:
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9117              		.loc 1 2284 9 view .LVU2936
 9118 046e ADE7     		b	.L821
 9119              	.LVL1037:
 9120              	.L1064:
2294:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9121              		.loc 1 2294 3 is_stmt 1 view .LVU2937
2294:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
ARM GAS  /tmp/ccQmbpxO.s 			page 259


 9122              		.loc 1 2294 34 is_stmt 0 view .LVU2938
 9123 0470 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9124 0472 8049     		ldr	r1, .L1100+56
 9125 0474 0623     		movs	r3, #6
 9126 0476 03EB0213 		add	r3, r3, r2, lsl #4
2294:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9127              		.loc 1 2294 8 view .LVU2939
 9128 047a 1944     		add	r1, r1, r3
 9129 047c 4046     		mov	r0, r8
 9130 047e FFF7FEFF 		bl	scopy
 9131              	.LVL1038:
2295:src/display.c **** 		if (State2.dot) {
 9132              		.loc 1 2295 3 is_stmt 1 view .LVU2940
2295:src/display.c **** 		if (State2.dot) {
 9133              		.loc 1 2295 8 is_stmt 0 view .LVU2941
 9134 0482 7D4A     		ldr	r2, .L1100+60
 9135 0484 7D4B     		ldr	r3, .L1100+64
 9136 0486 94F91510 		ldrsb	r1, [r4, #21]
 9137 048a 12EA2101 		ands	r1, r2, r1, asr #32
 9138 048e 38BF     		it	cc
 9139 0490 1946     		movcc	r1, r3
 9140 0492 FFF7FEFF 		bl	scopy
 9141              	.LVL1039:
2296:src/display.c **** 			*bp++ = 's';
 9142              		.loc 1 2296 7 view .LVU2942
 9143 0496 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9144              	.LVL1040:
2296:src/display.c **** 			*bp++ = 's';
 9145              		.loc 1 2296 3 is_stmt 1 view .LVU2943
2296:src/display.c **** 			*bp++ = 's';
 9146              		.loc 1 2296 6 is_stmt 0 view .LVU2944
 9147 0498 5A06     		lsls	r2, r3, #25
 9148 049a 40F19A80 		bpl	.L824
2297:src/display.c **** 			*bp++ = '_';
 9149              		.loc 1 2297 4 is_stmt 1 view .LVU2945
 9150              	.LVL1041:
2297:src/display.c **** 			*bp++ = '_';
 9151              		.loc 1 2297 10 is_stmt 0 view .LVU2946
 9152 049e 7322     		movs	r2, #115
 9153              	.LVL1042:
 9154              	.L1048:
2301:src/display.c **** 		} else {
 9155              		.loc 1 2301 10 view .LVU2947
 9156 04a0 5F23     		movs	r3, #95
 9157 04a2 674E     		ldr	r6, .L1100+4
 9158 04a4 DFF8E481 		ldr	r8, .L1100+80
2300:src/display.c **** 			*bp++ = '_';
 9159              		.loc 1 2300 10 view .LVU2948
 9160 04a8 0270     		strb	r2, [r0]
2301:src/display.c **** 		} else {
 9161              		.loc 1 2301 4 is_stmt 1 view .LVU2949
2301:src/display.c **** 		} else {
 9162              		.loc 1 2301 10 is_stmt 0 view .LVU2950
 9163 04aa 4370     		strb	r3, [r0, #1]
 9164 04ac A1E6     		b	.L819
 9165              	.LVL1043:
 9166              	.L900:
ARM GAS  /tmp/ccQmbpxO.s 			page 260


 9167              	.LBB500:
 9168              	.LBB473:
 907:src/display.c **** 
 9169              		.loc 1 907 3 is_stmt 1 view .LVU2951
 9170 04ae FFF7FEFF 		bl	set_separator_decimal_modes
 9171              	.LVL1044:
 909:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9172              		.loc 1 909 3 view .LVU2952
 911:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9173              		.loc 1 911 3 view .LVU2953
 911:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9174              		.loc 1 911 6 is_stmt 0 view .LVU2954
 9175 04b2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9176              	.LBB458:
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9177              		.loc 1 918 15 view .LVU2955
 9178 04b4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9179              	.LBE458:
 911:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9180              		.loc 1 911 6 view .LVU2956
 9181 04b8 012B     		cmp	r3, #1
 9182 04ba 40F2B780 		bls	.L905
 9183              	.LVL1045:
 9184              	.LBB459:
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9185              		.loc 1 918 14 is_stmt 1 view .LVU2957
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9186              		.loc 1 918 4 is_stmt 0 view .LVU2958
 9187 04be BCF1000F 		cmp	ip, #0
 9188 04c2 72D0     		beq	.L906
 9189 04c4 0AF10103 		add	r3, r10, #1
 9190 04c8 6046     		mov	r0, ip
 9191              	.LBE459:
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9192              		.loc 1 886 6 view .LVU2959
 9193 04ca 4FF0FF31 		mov	r1, #-1
 9194 04ce 6FEA0A0E 		mvn	lr, r10
 9195              	.LVL1046:
 9196              	.L908:
 9197              	.LBB460:
 919:src/display.c **** 					gotdot = j;
 9198              		.loc 1 919 8 view .LVU2960
 9199 04d2 2E28     		cmp	r0, #46
 9200 04d4 0EEB0302 		add	r2, lr, r3
 9201              	.LVL1047:
 919:src/display.c **** 					gotdot = j;
 9202              		.loc 1 919 5 is_stmt 1 view .LVU2961
 919:src/display.c **** 					gotdot = j;
 9203              		.loc 1 919 8 is_stmt 0 view .LVU2962
 9204 04d8 03D1     		bne	.L907
 919:src/display.c **** 					gotdot = j;
 9205              		.loc 1 919 21 view .LVU2963
 9206 04da B1F1FF3F 		cmp	r1, #-1
 9207 04de 08BF     		it	eq
 9208 04e0 1146     		moveq	r1, r2
 9209              	.LVL1048:
 9210              	.L907:
ARM GAS  /tmp/ccQmbpxO.s 			page 261


 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9211              		.loc 1 918 28 is_stmt 1 view .LVU2964
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9212              		.loc 1 918 14 view .LVU2965
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9213              		.loc 1 918 15 is_stmt 0 view .LVU2966
 9214 04e2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9215              		.loc 1 918 4 view .LVU2967
 9216 04e6 0028     		cmp	r0, #0
 9217 04e8 F3D1     		bne	.L908
 926:src/display.c **** 			if (j > 0) {
 9218              		.loc 1 926 4 is_stmt 1 view .LVU2968
 926:src/display.c **** 			if (j > 0) {
 9219              		.loc 1 926 6 is_stmt 0 view .LVU2969
 9220 04ea A2F10B03 		sub	r3, r2, #11
 9221              	.LVL1049:
 927:src/display.c **** 				p += j + 1;
 9222              		.loc 1 927 4 is_stmt 1 view .LVU2970
 927:src/display.c **** 				p += j + 1;
 9223              		.loc 1 927 7 is_stmt 0 view .LVU2971
 9224 04ee 002B     		cmp	r3, #0
 9225 04f0 40F34C81 		ble	.L1076
 928:src/display.c **** 				i = SEGS_PER_DIGIT;
 9226              		.loc 1 928 5 is_stmt 1 view .LVU2972
 928:src/display.c **** 				i = SEGS_PER_DIGIT;
 9227              		.loc 1 928 7 is_stmt 0 view .LVU2973
 9228 04f4 0A3A     		subs	r2, r2, #10
 930:src/display.c **** 					gotdot = 0;
 9229              		.loc 1 930 8 view .LVU2974
 9230 04f6 8B42     		cmp	r3, r1
 928:src/display.c **** 				i = SEGS_PER_DIGIT;
 9231              		.loc 1 928 7 view .LVU2975
 9232 04f8 9244     		add	r10, r10, r2
 9233              	.LVL1050:
 929:src/display.c **** 				if (gotdot <= j) {
 9234              		.loc 1 929 5 is_stmt 1 view .LVU2976
 930:src/display.c **** 					gotdot = 0;
 9235              		.loc 1 930 5 view .LVU2977
 930:src/display.c **** 					gotdot = 0;
 9236              		.loc 1 930 8 is_stmt 0 view .LVU2978
 9237 04fa 80F26581 		bge	.L945
 935:src/display.c **** 					gotdot = 0;
 9238              		.loc 1 935 10 is_stmt 1 view .LVU2979
 935:src/display.c **** 					gotdot = 0;
 9239              		.loc 1 935 13 is_stmt 0 view .LVU2980
 9240 04fe 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9241              	.LVL1051:
 935:src/display.c **** 					gotdot = 0;
 9242              		.loc 1 935 13 view .LVU2981
 9243 0502 2E2B     		cmp	r3, #46
 9244 0504 00F0E282 		beq	.L1077
 9245              	.LVL1052:
 942:src/display.c **** 				overflow_to_left = 1;
 9246              		.loc 1 942 5 is_stmt 1 view .LVU2982
 9247 0508 3C21     		movs	r1, #60
 9248 050a FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccQmbpxO.s 			page 262


 9249              	.LVL1053:
 943:src/display.c **** 			}
 9250              		.loc 1 943 5 view .LVU2983
 943:src/display.c **** 			}
 9251              		.loc 1 943 5 is_stmt 0 view .LVU2984
 9252 050e 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 943:src/display.c **** 			}
 9253              		.loc 1 943 5 view .LVU2985
 9254              	.LBE460:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9255              		.loc 1 949 10 is_stmt 1 view .LVU2986
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9256              		.loc 1 949 3 is_stmt 0 view .LVU2987
 9257 0512 BCF1000F 		cmp	ip, #0
 9258 0516 48D0     		beq	.L906
 9259              	.LBB461:
 941:src/display.c **** 				set_dig(0, '<');
 9260              		.loc 1 941 17 view .LVU2988
 9261 0518 4FF0FF33 		mov	r3, #-1
 929:src/display.c **** 				if (gotdot <= j) {
 9262              		.loc 1 929 7 view .LVU2989
 9263 051c 4FF0090B 		mov	fp, #9
 9264              	.LVL1054:
 9265              	.L939:
 943:src/display.c **** 			}
 9266              		.loc 1 943 22 view .LVU2990
 9267 0520 4FF00109 		mov	r9, #1
 9268              	.LVL1055:
 9269              	.L918:
 943:src/display.c **** 			}
 9270              		.loc 1 943 22 view .LVU2991
 9271              	.LBE461:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9272              		.loc 1 974 7 view .LVU2992
 9273 0524 0195     		str	r5, [sp, #4]
 9274 0526 1D46     		mov	r5, r3
 9275              	.LVL1056:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9276              		.loc 1 974 7 view .LVU2993
 9277 0528 3346     		mov	r3, r6
 9278 052a 6246     		mov	r2, ip
 9279 052c 5646     		mov	r6, r10
 9280 052e 9A46     		mov	r10, r3
 9281 0530 08E0     		b	.L916
 9282              	.LVL1057:
 9283              	.L1078:
 964:src/display.c **** #  endif
 9284              		.loc 1 964 8 view .LVU2994
 9285 0532 5D45     		cmp	r5, fp
 9286 0534 11D0     		beq	.L913
 9287              	.LVL1058:
 9288              	.L912:
 988:src/display.c **** 				i += segs_per_digit;
 9289              		.loc 1 988 5 view .LVU2995
 9290 0536 FFF7FEFF 		bl	set_dig
 9291              	.LVL1059:
 989:src/display.c **** 			}
ARM GAS  /tmp/ccQmbpxO.s 			page 263


 9292              		.loc 1 989 5 is_stmt 1 view .LVU2996
 989:src/display.c **** 			}
 9293              		.loc 1 989 7 is_stmt 0 view .LVU2997
 9294 053a 0BF1090B 		add	fp, fp, #9
 9295              	.LVL1060:
 9296              	.L914:
 953:src/display.c **** 			if (*p == '.') {
 9297              		.loc 1 953 48 is_stmt 1 view .LVU2998
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9298              		.loc 1 949 10 view .LVU2999
 9299 053e 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9300              	.LVL1061:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9301              		.loc 1 949 3 is_stmt 0 view .LVU3000
 9302 0542 8AB1     		cbz	r2, .L1050
 9303              	.LVL1062:
 9304              	.L916:
 954:src/display.c **** 				if (gotdot < 0)
 9305              		.loc 1 954 4 is_stmt 1 view .LVU3001
 955:src/display.c **** 					gotdot = i;
 9306              		.loc 1 955 5 view .LVU3002
 988:src/display.c **** 				i += segs_per_digit;
 9307              		.loc 1 988 5 view .LVU3003
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9308              		.loc 1 949 21 is_stmt 0 view .LVU3004
 9309 0544 452A     		cmp	r2, #69
 988:src/display.c **** 				i += segs_per_digit;
 9310              		.loc 1 988 5 view .LVU3005
 9311 0546 1146     		mov	r1, r2
 9312 0548 5846     		mov	r0, fp
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9313              		.loc 1 949 21 view .LVU3006
 9314 054a 0DD0     		beq	.L1050
 954:src/display.c **** 				if (gotdot < 0)
 9315              		.loc 1 954 7 view .LVU3007
 9316 054c 2E2A     		cmp	r2, #46
 9317 054e F2D1     		bne	.L912
 964:src/display.c **** #  endif
 9318              		.loc 1 964 5 is_stmt 1 view .LVU3008
 966:src/display.c **** 					i += segs_per_digit;
 9319              		.loc 1 966 6 view .LVU3009
 9320              	.LVL1063:
 970:src/display.c **** 						i += segs_per_digit;
 9321              		.loc 1 970 6 view .LVU3010
 955:src/display.c **** 					gotdot = i;
 9322              		.loc 1 955 8 is_stmt 0 view .LVU3011
 9323 0550 002D     		cmp	r5, #0
 966:src/display.c **** 					i += segs_per_digit;
 9324              		.loc 1 966 6 view .LVU3012
 9325 0552 5846     		mov	r0, fp
 9326 0554 4FF02F01 		mov	r1, #47
 955:src/display.c **** 					gotdot = i;
 9327              		.loc 1 955 8 view .LVU3013
 9328 0558 EBDA     		bge	.L1078
 9329              	.L913:
 971:src/display.c **** 					}
 9330              		.loc 1 971 7 is_stmt 1 view .LVU3014
ARM GAS  /tmp/ccQmbpxO.s 			page 264


 9331              	.LVL1064:
 970:src/display.c **** 						i += segs_per_digit;
 9332              		.loc 1 970 9 is_stmt 0 view .LVU3015
 9333 055a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9334 055c 012A     		cmp	r2, #1
 9335 055e 5CD9     		bls	.L915
 9336 0560 5D46     		mov	r5, fp
 971:src/display.c **** 					}
 9337              		.loc 1 971 9 view .LVU3016
 9338 0562 0BF1090B 		add	fp, fp, #9
 9339              	.LVL1065:
 971:src/display.c **** 					}
 9340              		.loc 1 971 9 view .LVU3017
 9341 0566 EAE7     		b	.L914
 9342              	.LVL1066:
 9343              	.L1050:
 998:src/display.c **** 			gotdot = i;
 9344              		.loc 1 998 3 is_stmt 1 view .LVU3018
 9345 0568 2B46     		mov	r3, r5
 998:src/display.c **** 			gotdot = i;
 9346              		.loc 1 998 6 is_stmt 0 view .LVU3019
 9347 056a 33EA2303 		bics	r3, r3, r3, asr #32
 9348 056e 28BF     		it	cs
 9349 0570 5B46     		movcs	r3, fp
 9350              	.LVL1067:
1000:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9351              		.loc 1 1000 3 is_stmt 1 view .LVU3020
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9352              		.loc 1 1001 4 view .LVU3021
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9353              		.loc 1 1001 11 is_stmt 0 view .LVU3022
 9354 0572 A3F11B0B 		sub	fp, r3, #27
 9355              	.LVL1068:
1002:src/display.c **** 				break;
 9356              		.loc 1 1002 4 is_stmt 1 view .LVU3023
 9357 0576 5246     		mov	r2, r10
1002:src/display.c **** 				break;
 9358              		.loc 1 1002 7 is_stmt 0 view .LVU3024
 9359 0578 BBF1000F 		cmp	fp, #0
 9360 057c B246     		mov	r10, r6
 9361 057e 019D     		ldr	r5, [sp, #4]
 9362 0580 1646     		mov	r6, r2
 9363              	.LVL1069:
1002:src/display.c **** 				break;
 9364              		.loc 1 1002 7 view .LVU3025
 9365 0582 12DD     		ble	.L906
 9366 0584 4B46     		mov	r3, r9
 9367 0586 A946     		mov	r9, r5
 9368 0588 1D46     		mov	r5, r3
 9369              	.L922:
1005:src/display.c **** 				break;
 9370              		.loc 1 1005 4 is_stmt 1 view .LVU3026
1008:src/display.c **** 		}
 9371              		.loc 1 1008 4 view .LVU3027
 9372              	.LBB462:
 9373              	.LBB463:
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
ARM GAS  /tmp/ccQmbpxO.s 			page 265


 9374              		.loc 1 357 2 view .LVU3028
 9375 058a 5846     		mov	r0, fp
 9376              	.LBE463:
 9377              	.LBE462:
1005:src/display.c **** 				break;
 9378              		.loc 1 1005 7 is_stmt 0 view .LVU3029
 9379 058c 15B1     		cbz	r5, .L923
 9380              	.LVL1070:
1005:src/display.c **** 				break;
 9381              		.loc 1 1005 25 view .LVU3030
 9382 058e BBF1090F 		cmp	fp, #9
 9383 0592 09D0     		beq	.L1045
 9384              	.L923:
1008:src/display.c **** 		}
 9385              		.loc 1 1008 4 view .LVU3031
 9386 0594 3A4B     		ldr	r3, .L1100+68
 9387 0596 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9388              	.LVL1071:
 9389              	.LBB465:
 9390              	.LBI462:
 354:src/display.c **** 	if (sep == SEP_NONE)
 9391              		.loc 1 354 14 is_stmt 1 view .LVU3032
 9392              	.LBB464:
 355:src/display.c **** 		return res;
 9393              		.loc 1 355 2 view .LVU3033
 355:src/display.c **** 		return res;
 9394              		.loc 1 355 5 is_stmt 0 view .LVU3034
 9395 0598 09B1     		cbz	r1, .L924
 9396 059a FFF7FEFF 		bl	set_separator.part.0
 9397              	.LVL1072:
 9398              	.L924:
 355:src/display.c **** 		return res;
 9399              		.loc 1 355 5 view .LVU3035
 9400              	.LBE464:
 9401              	.LBE465:
1000:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9402              		.loc 1 1000 3 is_stmt 1 view .LVU3036
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9403              		.loc 1 1001 4 view .LVU3037
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9404              		.loc 1 1001 11 is_stmt 0 view .LVU3038
 9405 059e ABF11B0B 		sub	fp, fp, #27
 9406              	.LVL1073:
1002:src/display.c **** 				break;
 9407              		.loc 1 1002 4 is_stmt 1 view .LVU3039
1002:src/display.c **** 				break;
 9408              		.loc 1 1002 7 is_stmt 0 view .LVU3040
 9409 05a2 BBF1000F 		cmp	fp, #0
 9410 05a6 F0DC     		bgt	.L922
 9411              	.L1045:
1002:src/display.c **** 				break;
 9412              		.loc 1 1002 7 view .LVU3041
 9413 05a8 4D46     		mov	r5, r9
 9414              	.LVL1074:
 9415              	.L906:
1026:src/display.c **** 			p++;
 9416              		.loc 1 1026 3 is_stmt 1 view .LVU3042
ARM GAS  /tmp/ccQmbpxO.s 			page 266


1026:src/display.c **** 			p++;
 9417              		.loc 1 1026 6 is_stmt 0 view .LVU3043
 9418 05aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9419 05ae 452B     		cmp	r3, #69
 9420 05b0 00F0DC80 		beq	.L1079
 9421              	.L1056:
 9422              	.LVL1075:
1026:src/display.c **** 			p++;
 9423              		.loc 1 1026 6 view .LVU3044
 9424              	.LBE473:
 9425              	.LBE500:
2473:src/display.c **** 				goto finish;
 9426              		.loc 1 2473 4 is_stmt 1 view .LVU3045
2473:src/display.c **** 				goto finish;
 9427              		.loc 1 2473 7 is_stmt 0 view .LVU3046
 9428 05b4 3B68     		ldr	r3, [r7]
 9429 05b6 DFF8D890 		ldr	r9, .L1100+84
 9430 05ba 002B     		cmp	r3, #0
 9431 05bc 3FF4E0AD 		beq	.L903
 9432 05c0 9FE5     		b	.L898
 9433              	.LVL1076:
 9434              	.L1072:
 9435              	.LBB501:
 9436              	.LBB474:
 896:src/display.c **** 		p++;
 9437              		.loc 1 896 3 is_stmt 1 view .LVU3047
 9438              	.LBB466:
 9439              	.LBI466:
 283:src/display.c **** {
 9440              		.loc 1 283 13 view .LVU3048
 9441              	.LBB467:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 9442              		.loc 1 285 2 view .LVU3049
 285:src/display.c **** 	set_dot(MANT_SIGN);
 9443              		.loc 1 285 24 is_stmt 0 view .LVU3050
 9444 05c2 224A     		ldr	r2, .L1100+16
 286:src/display.c **** }
 9445              		.loc 1 286 2 view .LVU3051
 9446 05c4 8120     		movs	r0, #129
 9447              	.LVL1077:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 9448              		.loc 1 285 24 view .LVU3052
 9449 05c6 1370     		strb	r3, [r2]
 286:src/display.c **** }
 9450              		.loc 1 286 2 is_stmt 1 view .LVU3053
 9451              	.LBE467:
 9452              	.LBE466:
 897:src/display.c **** 	}
 9453              		.loc 1 897 4 is_stmt 0 view .LVU3054
 9454 05c8 0AF1010A 		add	r10, r10, #1
 9455              	.LVL1078:
 9456              	.LBB469:
 9457              	.LBB468:
 286:src/display.c **** }
 9458              		.loc 1 286 2 view .LVU3055
 9459 05cc FFF7FEFF 		bl	set_dot
 9460              	.LVL1079:
ARM GAS  /tmp/ccQmbpxO.s 			page 267


 9461              	.LBE468:
 9462              	.LBE469:
 897:src/display.c **** 	}
 9463              		.loc 1 897 3 is_stmt 1 view .LVU3056
 897:src/display.c **** 	}
 9464              		.loc 1 897 3 is_stmt 0 view .LVU3057
 9465 05d0 B9E5     		b	.L899
 9466              	.LVL1080:
 9467              	.L824:
 897:src/display.c **** 	}
 9468              		.loc 1 897 3 view .LVU3058
 9469              	.LBE474:
 9470              	.LBE501:
2299:src/display.c **** 			*bp++ = '\021';
 9471              		.loc 1 2299 10 is_stmt 1 view .LVU3059
2299:src/display.c **** 			*bp++ = '\021';
 9472              		.loc 1 2299 13 is_stmt 0 view .LVU3060
 9473 05d2 BAF1010F 		cmp	r10, #1
 9474 05d6 00F0D780 		beq	.L1080
2306:src/display.c **** 				*bp++ = '.';
 9475              		.loc 1 2306 4 is_stmt 1 view .LVU3061
2306:src/display.c **** 				*bp++ = '.';
 9476              		.loc 1 2306 8 is_stmt 0 view .LVU3062
 9477 05da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2306:src/display.c **** 				*bp++ = '.';
 9478              		.loc 1 2306 7 view .LVU3063
 9479 05dc DB07     		lsls	r3, r3, #31
2307:src/display.c **** 			if (State2.numdigit > 0) {
 9480              		.loc 1 2307 5 is_stmt 1 view .LVU3064
 9481              	.LVL1081:
2307:src/display.c **** 			if (State2.numdigit > 0) {
 9482              		.loc 1 2307 11 is_stmt 0 view .LVU3065
 9483 05de 44BF     		itt	mi
 9484 05e0 2E23     		movmi	r3, #46
 9485 05e2 00F8013B 		strbmi	r3, [r0], #1
 9486              	.LVL1082:
2308:src/display.c **** 				if (State2.shuffle)
 9487              		.loc 1 2308 4 is_stmt 1 view .LVU3066
2308:src/display.c **** 				if (State2.shuffle)
 9488              		.loc 1 2308 14 is_stmt 0 view .LVU3067
 9489 05e6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2308:src/display.c **** 				if (State2.shuffle)
 9490              		.loc 1 2308 7 view .LVU3068
 9491 05e8 8AB1     		cbz	r2, .L827
2309:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9492              		.loc 1 2309 5 is_stmt 1 view .LVU3069
2309:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9493              		.loc 1 2309 9 is_stmt 0 view .LVU3070
 9494 05ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2309:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9495              		.loc 1 2309 8 view .LVU3071
 9496 05ec 9E07     		lsls	r6, r3, #30
 9497 05ee 40F1D781 		bpl	.L828
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9498              		.loc 1 2310 6 is_stmt 1 view .LVU3072
 9499              	.LVL1083:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
ARM GAS  /tmp/ccQmbpxO.s 			page 268


 9500              		.loc 1 2310 20 is_stmt 0 view .LVU3073
 9501 05f2 2289     		ldrh	r2, [r4, #8]
 9502              	.LVL1084:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9503              		.loc 1 2310 37 is_stmt 1 view .LVU3074
 9504 05f4 2349     		ldr	r1, .L1100+72
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9505              		.loc 1 2310 13 is_stmt 0 view .LVU3075
 9506 05f6 0023     		movs	r3, #0
 9507              	.LVL1085:
 9508              	.L829:
2311:src/display.c **** 				else
 9509              		.loc 1 2311 7 is_stmt 1 discriminator 3 view .LVU3076
2311:src/display.c **** 				else
 9510              		.loc 1 2311 26 is_stmt 0 discriminator 3 view .LVU3077
 9511 05f8 02F00306 		and	r6, r2, #3
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9512              		.loc 1 2310 57 discriminator 3 view .LVU3078
 9513 05fc 0133     		adds	r3, r3, #1
 9514              	.LVL1086:
2311:src/display.c **** 				else
 9515              		.loc 1 2311 13 discriminator 3 view .LVU3079
 9516 05fe 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9517 0600 00F8016B 		strb	r6, [r0], #1
 9518              	.LVL1087:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9519              		.loc 1 2310 56 is_stmt 1 discriminator 3 view .LVU3080
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9520              		.loc 1 2310 45 is_stmt 0 discriminator 3 view .LVU3081
 9521 0604 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9522              		.loc 1 2310 6 discriminator 3 view .LVU3082
 9523 0606 9E42     		cmp	r6, r3
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9524              		.loc 1 2310 63 discriminator 3 view .LVU3083
 9525 0608 4FEAA202 		asr	r2, r2, #2
 9526              	.LVL1088:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9527              		.loc 1 2310 37 is_stmt 1 discriminator 3 view .LVU3084
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9528              		.loc 1 2310 6 is_stmt 0 discriminator 3 view .LVU3085
 9529 060c F4DC     		bgt	.L829
 9530              	.LVL1089:
 9531              	.L827:
2316:src/display.c **** 		}
 9532              		.loc 1 2316 5 is_stmt 1 view .LVU3086
2316:src/display.c **** 		}
 9533              		.loc 1 2316 11 is_stmt 0 view .LVU3087
 9534 060e 5F23     		movs	r3, #95
 9535 0610 0B4E     		ldr	r6, .L1100+4
 9536 0612 DFF87880 		ldr	r8, .L1100+80
 9537 0616 0370     		strb	r3, [r0]
 9538 0618 EBE5     		b	.L819
 9539              	.LVL1090:
 9540              	.L915:
 9541              	.LBB502:
 9542              	.LBB475:
ARM GAS  /tmp/ccQmbpxO.s 			page 269


 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9543              		.loc 1 974 7 is_stmt 1 view .LVU3088
 9544 061a 1B4B     		ldr	r3, .L1100+76
 9545 061c 0022     		movs	r2, #0
 9546 061e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9547 0620 ABF10900 		sub	r0, fp, #9
 9548              	.LVL1091:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9549              		.loc 1 974 7 is_stmt 0 view .LVU3089
 9550 0624 FFF7FEFF 		bl	set_decimal
 9551              	.LVL1092:
 9552 0628 5D46     		mov	r5, fp
 9553 062a 88E7     		b	.L914
 9554              	.LVL1093:
 9555              	.L905:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9556              		.loc 1 949 10 is_stmt 1 view .LVU3090
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9557              		.loc 1 949 3 is_stmt 0 view .LVU3091
 9558 062c BCF1000F 		cmp	ip, #0
 9559 0630 BBD0     		beq	.L906
 909:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9560              		.loc 1 909 5 view .LVU3092
 9561 0632 CB46     		mov	fp, r9
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9562              		.loc 1 886 6 view .LVU3093
 9563 0634 4FF0FF33 		mov	r3, #-1
 9564 0638 74E7     		b	.L918
 9565              	.L1101:
 9566 063a 00BF     		.align	2
 9567              	.L1100:
 9568 063c 0C000000 		.word	.LANCHOR17+12
 9569 0640 00000000 		.word	DispMsg
 9570 0644 08000000 		.word	.LC23
 9571 0648 18000000 		.word	.LC24
 9572 064c 00000000 		.word	LastDisplayedNumber
 9573 0650 34000000 		.word	.LC25
 9574 0654 00000000 		.word	LastDisplayedExponent
 9575 0658 00000000 		.word	.LANCHOR19
 9576 065c AC000000 		.word	.LC42
 9577 0660 00000000 		.word	ShowRPN
 9578 0664 56040000 		.word	argcmds+1110
 9579 0668 00000000 		.word	.LANCHOR21
 9580 066c 00000000 		.word	.LANCHOR23
 9581 0670 B4000000 		.word	.LC28
 9582 0674 00000000 		.word	argcmds
 9583 0678 00000000 		.word	.LC20
 9584 067c 04000000 		.word	.LC21
 9585 0680 00000000 		.word	.LANCHOR0
 9586 0684 BC000000 		.word	.LC27
 9587 0688 00000000 		.word	.LANCHOR1
 9588 068c 00000000 		.word	DispPlot
 9589 0690 00000000 		.word	ShowRegister
 9590              	.LVL1094:
 9591              	.L1066:
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9592              		.loc 1 886 6 view .LVU3094
ARM GAS  /tmp/ccQmbpxO.s 			page 270


 9593              	.LBE475:
 9594              	.LBE502:
 9595              	.LBB503:
2326:src/display.c **** 		char b2[16];
 9596              		.loc 1 2326 3 is_stmt 1 view .LVU3095
2326:src/display.c **** 		char b2[16];
 9597              		.loc 1 2326 44 is_stmt 0 view .LVU3096
 9598 0694 CC4B     		ldr	r3, .L1102
 9599 0696 1B68     		ldr	r3, [r3]
 9600 0698 B3F8DC07 		ldrh	r0, [r3, #2012]
2326:src/display.c **** 		char b2[16];
 9601              		.loc 1 2326 21 view .LVU3097
 9602 069c C0F34610 		ubfx	r0, r0, #5, #7
 9603 06a0 FFF7FEFF 		bl	current_catalogue
 9604              	.LVL1095:
2330:src/display.c **** 		p = catcmd(op, b2);
 9605              		.loc 1 2330 8 view .LVU3098
 9606 06a4 C949     		ldr	r1, .L1102+4
2326:src/display.c **** 		char b2[16];
 9607              		.loc 1 2326 21 view .LVU3099
 9608 06a6 8246     		mov	r10, r0
 9609              	.LVL1096:
2327:src/display.c **** 		const char *p;
 9610              		.loc 1 2327 3 is_stmt 1 view .LVU3100
2328:src/display.c **** 
 9611              		.loc 1 2328 3 view .LVU3101
2330:src/display.c **** 		p = catcmd(op, b2);
 9612              		.loc 1 2330 3 view .LVU3102
2330:src/display.c **** 		p = catcmd(op, b2);
 9613              		.loc 1 2330 8 is_stmt 0 view .LVU3103
 9614 06a8 4046     		mov	r0, r8
 9615              	.LVL1097:
2330:src/display.c **** 		p = catcmd(op, b2);
 9616              		.loc 1 2330 8 view .LVU3104
 9617 06aa FFF7FEFF 		bl	scopy
 9618              	.LVL1098:
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9619              		.loc 1 2331 7 view .LVU3105
 9620 06ae 08A9     		add	r1, sp, #32
2330:src/display.c **** 		p = catcmd(op, b2);
 9621              		.loc 1 2330 8 view .LVU3106
 9622 06b0 0646     		mov	r6, r0
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9623              		.loc 1 2331 7 view .LVU3107
 9624 06b2 5046     		mov	r0, r10
 9625              	.LVL1099:
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9626              		.loc 1 2331 3 is_stmt 1 view .LVU3108
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9627              		.loc 1 2331 7 is_stmt 0 view .LVU3109
 9628 06b4 FFF7FEFF 		bl	catcmd
 9629              	.LVL1100:
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9630              		.loc 1 2332 6 view .LVU3110
 9631 06b8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9632 06ba 142B     		cmp	r3, #20
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
ARM GAS  /tmp/ccQmbpxO.s 			page 271


 9633              		.loc 1 2331 7 view .LVU3111
 9634 06bc 0146     		mov	r1, r0
 9635              	.LVL1101:
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9636              		.loc 1 2332 3 is_stmt 1 view .LVU3112
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9637              		.loc 1 2332 6 is_stmt 0 view .LVU3113
 9638 06be 05D0     		beq	.L832
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9639              		.loc 1 2332 28 discriminator 1 view .LVU3114
 9640 06c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9641 06c2 9807     		lsls	r0, r3, #30
 9642              	.LVL1102:
2333:src/display.c **** 		bp = scopy(bp, p);
 9643              		.loc 1 2333 4 is_stmt 1 discriminator 1 view .LVU3115
2333:src/display.c **** 		bp = scopy(bp, p);
 9644              		.loc 1 2333 10 is_stmt 0 discriminator 1 view .LVU3116
 9645 06c4 44BF     		itt	mi
 9646 06c6 1423     		movmi	r3, #20
 9647 06c8 06F8013B 		strbmi	r3, [r6], #1
 9648              	.LVL1103:
 9649              	.L832:
2334:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9650              		.loc 1 2334 3 is_stmt 1 view .LVU3117
2334:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9651              		.loc 1 2334 8 is_stmt 0 view .LVU3118
 9652 06cc 3046     		mov	r0, r6
 9653 06ce FFF7FEFF 		bl	scopy
 9654              	.LVL1104:
2335:src/display.c **** 			// State2.disp_small = 1;
 9655              		.loc 1 2335 3 is_stmt 1 view .LVU3119
2335:src/display.c **** 			// State2.disp_small = 1;
 9656              		.loc 1 2335 6 is_stmt 0 view .LVU3120
 9657 06d2 A9F11003 		sub	r3, r9, #16
 9658 06d6 012B     		cmp	r3, #1
 9659 06d8 5DD9     		bls	.L1081
2342:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9660              		.loc 1 2342 10 is_stmt 1 view .LVU3121
2342:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9661              		.loc 1 2342 14 is_stmt 0 view .LVU3122
 9662 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2342:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9663              		.loc 1 2342 13 view .LVU3123
 9664 06dc 5906     		lsls	r1, r3, #25
 9665 06de 7FF577AE 		bpl	.L837
2343:src/display.c **** 				decNumber x, r;
 9666              		.loc 1 2343 4 is_stmt 1 view .LVU3124
2343:src/display.c **** 				decNumber x, r;
 9667              		.loc 1 2343 7 is_stmt 0 view .LVU3125
 9668 06e2 B9F1120F 		cmp	r9, #18
 9669 06e6 00F00682 		beq	.L1082
2363:src/display.c **** 				REGISTER z, *const x = StackBase;
 9670              		.loc 1 2363 11 is_stmt 1 view .LVU3126
2363:src/display.c **** 				REGISTER z, *const x = StackBase;
 9671              		.loc 1 2363 44 is_stmt 0 view .LVU3127
 9672 06ea AAF58873 		sub	r3, r10, #272
2363:src/display.c **** 				REGISTER z, *const x = StackBase;
ARM GAS  /tmp/ccQmbpxO.s 			page 272


 9673              		.loc 1 2363 14 view .LVU3128
 9674 06ee 0D2B     		cmp	r3, #13
 9675 06f0 3FF66EAE 		bhi	.L837
 9676              	.LBB491:
2364:src/display.c **** 				copyreg(&z, x);
 9677              		.loc 1 2364 5 is_stmt 1 discriminator 3 view .LVU3129
2364:src/display.c **** 				copyreg(&z, x);
 9678              		.loc 1 2364 24 is_stmt 0 discriminator 3 view .LVU3130
 9679 06f4 B64B     		ldr	r3, .L1102+8
 9680 06f6 1E68     		ldr	r6, [r3]
 9681              	.LVL1105:
2365:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
 9682              		.loc 1 2365 5 is_stmt 1 discriminator 3 view .LVU3131
 9683 06f8 15A8     		add	r0, sp, #84
 9684 06fa 3146     		mov	r1, r6
 9685 06fc FFF7FEFF 		bl	copyreg
 9686              	.LVL1106:
2366:src/display.c **** 				set_x(x, CNULL, is_dblmode());
 9687              		.loc 1 2366 5 discriminator 3 view .LVU3132
 9688 0700 5FFA8AF0 		uxtb	r0, r10
 9689 0704 FFF7FEFF 		bl	sigma_val
 9690              	.LVL1107:
2367:src/display.c **** 				copyreg(x, &z);
 9691              		.loc 1 2367 5 discriminator 3 view .LVU3133
 9692 0708 FFF7FEFF 		bl	is_dblmode
 9693              	.LVL1108:
 9694 070c 0021     		movs	r1, #0
 9695 070e 0246     		mov	r2, r0
 9696 0710 3046     		mov	r0, r6
 9697 0712 FFF7FEFF 		bl	set_x
 9698              	.LVL1109:
2368:src/display.c **** 				skip = 1;
 9699              		.loc 1 2368 5 discriminator 3 view .LVU3134
 9700 0716 15A9     		add	r1, sp, #84
 9701 0718 3046     		mov	r0, r6
 9702 071a FFF7FEFF 		bl	copyreg
 9703              	.LVL1110:
2369:src/display.c **** 			}
 9704              		.loc 1 2369 5 discriminator 3 view .LVU3135
2369:src/display.c **** 			}
 9705              		.loc 1 2369 5 is_stmt 0 discriminator 3 view .LVU3136
 9706              	.LBE491:
2372:src/display.c **** 	} else if (State2.multi) {
 9707              		.loc 1 2372 3 is_stmt 1 discriminator 3 view .LVU3137
 9708 071e 1EA8     		add	r0, sp, #120
 9709 0720 FFF7FEFF 		bl	set_status
 9710              	.LVL1111:
2372:src/display.c **** 	} else if (State2.multi) {
 9711              		.loc 1 2372 3 is_stmt 0 discriminator 3 view .LVU3138
 9712              	.LBE503:
2456:src/display.c **** nostk:	show_flags();
 9713              		.loc 1 2456 2 is_stmt 1 discriminator 3 view .LVU3139
 9714 0724 FFF7FEFF 		bl	show_stack
 9715              	.LVL1112:
2457:src/display.c **** 	if (!skip) {
 9716              		.loc 1 2457 8 discriminator 3 view .LVU3140
 9717 0728 FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/ccQmbpxO.s 			page 273


 9718              	.LVL1113:
2458:src/display.c **** 		if (State2.runmode) {
 9719              		.loc 1 2458 2 discriminator 3 view .LVU3141
 9720              	.L836:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9721              		.loc 1 2503 2 view .LVU3142
 9722 072c FFF7FEFF 		bl	set_annunciators
 9723              	.LVL1114:
2504:src/display.c **** 		ShowRPN = 0;
 9724              		.loc 1 2504 2 view .LVU3143
 9725 0730 A84E     		ldr	r6, .L1102+12
 9726 0732 DFF8BC82 		ldr	r8, .L1102+40
 9727 0736 DFF8BC92 		ldr	r9, .L1102+44
 9728 073a 27E5     		b	.L814
 9729              	.LVL1115:
 9730              	.L1067:
2374:src/display.c **** 		if (State2.numdigit > 0) {
 9731              		.loc 1 2374 3 view .LVU3144
2374:src/display.c **** 		if (State2.numdigit > 0) {
 9732              		.loc 1 2374 41 is_stmt 0 view .LVU3145
 9733 073c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9734 073e A649     		ldr	r1, .L1102+16
 9735 0740 0423     		movs	r3, #4
 9736 0742 03EB0213 		add	r3, r3, r2, lsl #4
2374:src/display.c **** 		if (State2.numdigit > 0) {
 9737              		.loc 1 2374 8 view .LVU3146
 9738 0746 1944     		add	r1, r1, r3
 9739 0748 4046     		mov	r0, r8
 9740 074a 2722     		movs	r2, #39
 9741 074c FFF7FEFF 		bl	scopy_char
 9742              	.LVL1116:
2375:src/display.c **** 			*bp++ = (char) State2.digval;
 9743              		.loc 1 2375 6 view .LVU3147
 9744 0750 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9745              	.LVL1117:
2375:src/display.c **** 			*bp++ = (char) State2.digval;
 9746              		.loc 1 2375 3 is_stmt 1 view .LVU3148
2375:src/display.c **** 			*bp++ = (char) State2.digval;
 9747              		.loc 1 2375 6 is_stmt 0 view .LVU3149
 9748 0752 002B     		cmp	r3, #0
 9749 0754 3FF44AAD 		beq	.L1049
2376:src/display.c **** 			if (State2.numdigit > 1)
 9750              		.loc 1 2376 4 is_stmt 1 view .LVU3150
 9751              	.LVL1118:
2376:src/display.c **** 			if (State2.numdigit > 1)
 9752              		.loc 1 2376 12 is_stmt 0 view .LVU3151
 9753 0758 2389     		ldrh	r3, [r4, #8]
 9754 075a 0370     		strb	r3, [r0]
2377:src/display.c **** 				*bp++ = State2.digval2;
 9755              		.loc 1 2377 4 is_stmt 1 view .LVU3152
2377:src/display.c **** 				*bp++ = State2.digval2;
 9756              		.loc 1 2377 7 is_stmt 0 view .LVU3153
 9757 075c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9758 075e 012B     		cmp	r3, #1
2378:src/display.c **** 		}
 9759              		.loc 1 2378 5 is_stmt 1 view .LVU3154
 9760              	.LVL1119:
ARM GAS  /tmp/ccQmbpxO.s 			page 274


2378:src/display.c **** 		}
 9761              		.loc 1 2378 19 is_stmt 0 view .LVU3155
 9762 0760 84BF     		itt	hi
 9763 0762 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2378:src/display.c **** 		}
 9764              		.loc 1 2378 11 view .LVU3156
 9765 0764 4370     		strbhi	r3, [r0, #1]
 9766 0766 41E5     		b	.L1049
 9767              	.LVL1120:
 9768              	.L948:
 9769              	.LBB504:
 9770              	.LBB486:
2493:src/display.c **** 			  while(*b) {
 9771              		.loc 1 2493 8 view .LVU3157
 9772 0768 5A1C     		adds	r2, r3, #1
 9773 076a C2E5     		b	.L929
 9774              	.LVL1121:
 9775              	.L1079:
2493:src/display.c **** 			  while(*b) {
 9776              		.loc 1 2493 8 view .LVU3158
 9777              	.LBE486:
 9778              	.LBE504:
 9779              	.LBB505:
 9780              	.LBB476:
1027:src/display.c **** 			// set_exp() takes care of setting the exponent sign
 9781              		.loc 1 1027 4 is_stmt 1 view .LVU3159
1032:src/display.c **** #  endif
 9782              		.loc 1 1032 4 view .LVU3160
 9783 076c 0AF10100 		add	r0, r10, #1
 9784              	.LVL1122:
1032:src/display.c **** #  endif
 9785              		.loc 1 1032 4 is_stmt 0 view .LVU3161
 9786 0770 FFF7FEFF 		bl	s_to_i
 9787              	.LVL1123:
1032:src/display.c **** #  endif
 9788              		.loc 1 1032 4 view .LVU3162
 9789 0774 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9790 0778 2D2B     		cmp	r3, #45
 9791 077a 0CBF     		ite	eq
 9792 077c 0621     		moveq	r1, #6
 9793 077e 0421     		movne	r1, #4
 9794 0780 0022     		movs	r2, #0
 9795 0782 FFF7FEFF 		bl	set_exp
 9796              	.LVL1124:
 9797 0786 15E7     		b	.L1056
 9798              	.LVL1125:
 9799              	.L1080:
1032:src/display.c **** #  endif
 9800              		.loc 1 1032 4 view .LVU3163
 9801              	.LBE476:
 9802              	.LBE505:
2300:src/display.c **** 			*bp++ = '_';
 9803              		.loc 1 2300 4 is_stmt 1 view .LVU3164
2300:src/display.c **** 			*bp++ = '_';
 9804              		.loc 1 2300 10 is_stmt 0 view .LVU3165
 9805 0788 1122     		movs	r2, #17
 9806 078a 89E6     		b	.L1048
ARM GAS  /tmp/ccQmbpxO.s 			page 275


 9807              	.LVL1126:
 9808              	.L1076:
 9809              	.LBB506:
 9810              	.LBB477:
 892:src/display.c **** #endif
 9811              		.loc 1 892 6 view .LVU3166
 9812 078c 8146     		mov	r9, r0
 909:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9813              		.loc 1 909 5 view .LVU3167
 9814 078e 8346     		mov	fp, r0
 9815              	.LBB470:
 945:src/display.c **** 		}
 9816              		.loc 1 945 16 view .LVU3168
 9817 0790 4FF0FF33 		mov	r3, #-1
 9818              	.LVL1127:
 945:src/display.c **** 		}
 9819              		.loc 1 945 16 view .LVU3169
 9820 0794 C6E6     		b	.L918
 9821              	.LVL1128:
 9822              	.L1081:
 945:src/display.c **** 		}
 9823              		.loc 1 945 16 view .LVU3170
 9824              	.LBE470:
 9825              	.LBE477:
 9826              	.LBE506:
 9827              	.LBB507:
2337:src/display.c **** 				set_digits_string("0 to 255", 0);
 9828              		.loc 1 2337 4 is_stmt 1 view .LVU3171
2337:src/display.c **** 				set_digits_string("0 to 255", 0);
 9829              		.loc 1 2337 7 is_stmt 0 view .LVU3172
 9830 0796 BAF5274F 		cmp	r10, #42752
 9831 079a 00F09C81 		beq	.L834
2337:src/display.c **** 				set_digits_string("0 to 255", 0);
 9832              		.loc 1 2337 39 discriminator 1 view .LVU3173
 9833 079e BAF5284F 		cmp	r10, #43008
 9834 07a2 00F09881 		beq	.L834
2340:src/display.c **** 			skip = 1;
 9835              		.loc 1 2340 5 is_stmt 1 view .LVU3174
2340:src/display.c **** 			skip = 1;
 9836              		.loc 1 2340 11 is_stmt 0 view .LVU3175
 9837 07a6 0AF07F00 		and	r0, r10, #127
 9838 07aa 0021     		movs	r1, #0
 9839 07ac FFF7FEFF 		bl	get_const
 9840              	.LVL1129:
2340:src/display.c **** 			skip = 1;
 9841              		.loc 1 2340 5 view .LVU3176
 9842 07b0 0022     		movs	r2, #0
 9843              	.LVL1130:
 9844              	.L1052:
 9845              	.LBB492:
2361:src/display.c **** 				skip = 1;
 9846              		.loc 1 2361 5 discriminator 1 view .LVU3177
 9847 07b2 1146     		mov	r1, r2
 9848 07b4 FFF7FEFF 		bl	set_x
 9849              	.LVL1131:
2362:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9850              		.loc 1 2362 5 is_stmt 1 discriminator 1 view .LVU3178
ARM GAS  /tmp/ccQmbpxO.s 			page 276


2362:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9851              		.loc 1 2362 5 is_stmt 0 discriminator 1 view .LVU3179
 9852              	.LBE492:
2372:src/display.c **** 	} else if (State2.multi) {
 9853              		.loc 1 2372 3 is_stmt 1 discriminator 1 view .LVU3180
 9854 07b8 1EA8     		add	r0, sp, #120
 9855 07ba FFF7FEFF 		bl	set_status
 9856              	.LVL1132:
 9857              	.L1053:
2372:src/display.c **** 	} else if (State2.multi) {
 9858              		.loc 1 2372 3 is_stmt 0 discriminator 1 view .LVU3181
 9859              	.LBE507:
2456:src/display.c **** nostk:	show_flags();
 9860              		.loc 1 2456 2 is_stmt 1 discriminator 1 view .LVU3182
 9861 07be FFF7FEFF 		bl	show_stack
 9862              	.LVL1133:
2457:src/display.c **** 	if (!skip) {
 9863              		.loc 1 2457 8 discriminator 1 view .LVU3183
 9864 07c2 FFF7FEFF 		bl	show_flags
 9865              	.LVL1134:
2458:src/display.c **** 		if (State2.runmode) {
 9866              		.loc 1 2458 2 discriminator 1 view .LVU3184
 9867 07c6 B1E7     		b	.L836
 9868              	.LVL1135:
 9869              	.L945:
 9870              	.LBB508:
 9871              	.LBB478:
 9872              	.LBB471:
 929:src/display.c **** 				if (gotdot <= j) {
 9873              		.loc 1 929 7 is_stmt 0 view .LVU3185
 9874 07c8 4FF0090B 		mov	fp, #9
 9875              	.LVL1136:
 9876              	.L910:
 942:src/display.c **** 				overflow_to_left = 1;
 9877              		.loc 1 942 5 is_stmt 1 view .LVU3186
 9878 07cc 3C21     		movs	r1, #60
 9879 07ce 0020     		movs	r0, #0
 9880 07d0 FFF7FEFF 		bl	set_dig
 9881              	.LVL1137:
 943:src/display.c **** 			}
 9882              		.loc 1 943 5 view .LVU3187
 943:src/display.c **** 			}
 9883              		.loc 1 943 5 is_stmt 0 view .LVU3188
 9884 07d4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 943:src/display.c **** 			}
 9885              		.loc 1 943 5 view .LVU3189
 9886              	.LBE471:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9887              		.loc 1 949 10 is_stmt 1 view .LVU3190
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9888              		.loc 1 949 3 is_stmt 0 view .LVU3191
 9889 07d8 0023     		movs	r3, #0
 9890 07da BCF1000F 		cmp	ip, #0
 9891 07de 7FF49FAE 		bne	.L939
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9892              		.loc 1 949 3 view .LVU3192
 9893 07e2 E7E6     		b	.L1056
ARM GAS  /tmp/ccQmbpxO.s 			page 277


 9894              	.LVL1138:
 9895              	.L1069:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9896              		.loc 1 949 3 view .LVU3193
 9897              	.LBE478:
 9898              	.LBE508:
2385:src/display.c **** 		skip = 1;
 9899              		.loc 1 2385 3 is_stmt 1 view .LVU3194
 9900              	.LBB509:
 9901              	.LBI509:
2091:src/display.c **** 	char buf[16];
 9902              		.loc 1 2091 13 view .LVU3195
 9903              	.LBB510:
2092:src/display.c **** 	unsigned short int pc = State2.digval;
 9904              		.loc 1 2092 2 view .LVU3196
2093:src/display.c **** 	unsigned int op = getprog(pc);
 9905              		.loc 1 2093 2 view .LVU3197
2093:src/display.c **** 	unsigned int op = getprog(pc);
 9906              		.loc 1 2093 21 is_stmt 0 view .LVU3198
 9907 07e4 B4F80890 		ldrh	r9, [r4, #8]
 9908              	.LVL1139:
2094:src/display.c **** 	int n = nLIB(pc);
 9909              		.loc 1 2094 2 is_stmt 1 view .LVU3199
2099:src/display.c **** #ifndef REALBUILD
 9910              		.loc 1 2099 27 is_stmt 0 view .LVU3200
 9911 07e8 DFF80C82 		ldr	r8, .L1102+48
 9912              	.LVL1140:
2101:src/display.c **** #endif
 9913              		.loc 1 2101 41 view .LVU3201
 9914 07ec 7B4F     		ldr	r7, .L1102+20
2094:src/display.c **** 	int n = nLIB(pc);
 9915              		.loc 1 2094 20 view .LVU3202
 9916 07ee 4846     		mov	r0, r9
 9917 07f0 FFF7FEFF 		bl	getprog
 9918              	.LVL1141:
 9919 07f4 4FEA9936 		lsr	r6, r9, #14
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9920              		.loc 1 2098 2 view .LVU3203
 9921 07f8 15A9     		add	r1, sp, #84
2094:src/display.c **** 	int n = nLIB(pc);
 9922              		.loc 1 2094 20 view .LVU3204
 9923 07fa 8246     		mov	r10, r0
 9924              	.LVL1142:
2095:src/display.c **** 	unsigned short int lblpc;
 9925              		.loc 1 2095 2 is_stmt 1 view .LVU3205
2096:src/display.c **** 
 9926              		.loc 1 2096 2 view .LVU3206
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9927              		.loc 1 2098 2 view .LVU3207
2099:src/display.c **** #ifndef REALBUILD
 9928              		.loc 1 2099 27 is_stmt 0 view .LVU3208
 9929 07fc 06EB8606 		add	r6, r6, r6, lsl #2
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9930              		.loc 1 2098 2 view .LVU3209
 9931 0800 FFF7FEFF 		bl	prt
 9932              	.LVL1143:
2098:src/display.c **** 	set_digits_string(libname[n], 0);
ARM GAS  /tmp/ccQmbpxO.s 			page 278


 9933              		.loc 1 2098 2 view .LVU3210
 9934 0804 FFF7FEFF 		bl	set_status
 9935              	.LVL1144:
2099:src/display.c **** #ifndef REALBUILD
 9936              		.loc 1 2099 2 is_stmt 1 view .LVU3211
 9937 0808 08EB0600 		add	r0, r8, r6
 9938 080c 0021     		movs	r1, #0
 9939 080e FFF7FEFF 		bl	set_digits_string
 9940              	.LVL1145:
2101:src/display.c **** #endif
 9941              		.loc 1 2101 2 view .LVU3212
 9942 0812 7348     		ldr	r0, .L1102+24
 9943 0814 07EB4601 		add	r1, r7, r6, lsl #1
 9944 0818 FFF7FEFF 		bl	scopy
 9945              	.LVL1146:
2104:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9946              		.loc 1 2104 2 view .LVU3213
2104:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9947              		.loc 1 2104 5 is_stmt 0 view .LVU3214
 9948 081c 1AF4704F 		tst	r10, #61440
 9949 0820 CDD0     		beq	.L1053
2105:src/display.c **** 		if (lblpc != pc) {
 9950              		.loc 1 2105 3 is_stmt 1 view .LVU3215
2105:src/display.c **** 		if (lblpc != pc) {
 9951              		.loc 1 2105 11 is_stmt 0 view .LVU3216
 9952 0822 5046     		mov	r0, r10
 9953 0824 0021     		movs	r1, #0
 9954 0826 FFF7FEFF 		bl	findmultilbl
 9955              	.LVL1147:
2105:src/display.c **** 		if (lblpc != pc) {
 9956              		.loc 1 2105 9 view .LVU3217
 9957 082a 86B2     		uxth	r6, r0
 9958              	.LVL1148:
2106:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9959              		.loc 1 2106 3 is_stmt 1 view .LVU3218
2106:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9960              		.loc 1 2106 6 is_stmt 0 view .LVU3219
 9961 082c B145     		cmp	r9, r6
2105:src/display.c **** 		if (lblpc != pc) {
 9962              		.loc 1 2105 11 view .LVU3220
 9963 082e 8246     		mov	r10, r0
 9964              	.LVL1149:
2106:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9965              		.loc 1 2106 6 view .LVU3221
 9966 0830 C5D0     		beq	.L1053
2107:src/display.c **** 			n = nLIB(lblpc);
 9967              		.loc 1 2107 4 is_stmt 1 view .LVU3222
 9968 0832 6C48     		ldr	r0, .L1102+28
 9969 0834 3F21     		movs	r1, #63
 9970 0836 FFF7FEFF 		bl	set_digits_string
 9971              	.LVL1150:
2108:src/display.c **** 			if (n == REGION_RAM)
 9972              		.loc 1 2108 4 view .LVU3223
2109:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 9973              		.loc 1 2109 4 view .LVU3224
2109:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 9974              		.loc 1 2109 7 is_stmt 0 view .LVU3225
ARM GAS  /tmp/ccQmbpxO.s 			page 279


 9975 083a B60B     		lsrs	r6, r6, #14
 9976              	.LVL1151:
2109:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 9977              		.loc 1 2109 7 view .LVU3226
 9978 083c 40F07D81 		bne	.L865
2110:src/display.c **** 			else {
 9979              		.loc 1 2110 5 is_stmt 1 view .LVU3227
 9980 0840 3246     		mov	r2, r6
 9981 0842 1FFA8AF0 		uxth	r0, r10
 9982 0846 0121     		movs	r1, #1
 9983 0848 FFF7FEFF 		bl	set_exp
 9984              	.LVL1152:
 9985 084c B7E7     		b	.L1053
 9986              	.LVL1153:
 9987              	.L1068:
2110:src/display.c **** 			else {
 9988              		.loc 1 2110 5 is_stmt 0 view .LVU3228
 9989              	.LBE510:
 9990              	.LBE509:
2382:src/display.c **** 		skip = 1;
 9991              		.loc 1 2382 3 is_stmt 1 view .LVU3229
 9992              	.LBB512:
 9993              	.LBI512:
1989:src/display.c **** 	int i, n;
 9994              		.loc 1 1989 13 view .LVU3230
 9995              	.LBB513:
1990:src/display.c **** 	int j = SEGS_EXP_BASE;
 9996              		.loc 1 1990 2 view .LVU3231
1991:src/display.c **** 	const int status = State2.status - 3;
 9997              		.loc 1 1991 2 view .LVU3232
1992:src/display.c **** 	char buf[16], *p = buf;
 9998              		.loc 1 1992 2 view .LVU3233
1996:src/display.c **** 		set_status("Free:");
 9999              		.loc 1 1996 5 is_stmt 0 view .LVU3234
 10000 084e 012B     		cmp	r3, #1
1992:src/display.c **** 	char buf[16], *p = buf;
 10001              		.loc 1 1992 12 view .LVU3235
 10002 0850 A3F10307 		sub	r7, r3, #3
 10003              	.LVL1154:
1993:src/display.c **** 	unsigned int pc;
 10004              		.loc 1 1993 2 is_stmt 1 view .LVU3236
1994:src/display.c **** 
 10005              		.loc 1 1994 2 view .LVU3237
1996:src/display.c **** 		set_status("Free:");
 10006              		.loc 1 1996 2 view .LVU3238
1996:src/display.c **** 		set_status("Free:");
 10007              		.loc 1 1996 5 is_stmt 0 view .LVU3239
 10008 0854 00F01782 		beq	.L1083
2004:src/display.c **** 		/* Top line */
 10009              		.loc 1 2004 7 is_stmt 1 view .LVU3240
2004:src/display.c **** 		/* Top line */
 10010              		.loc 1 2004 10 is_stmt 0 view .LVU3241
 10011 0858 7B1C     		adds	r3, r7, #1
 10012 085a 00F07782 		beq	.L1084
 10013              	.LBB514:
2021:src/display.c **** 		int end;
 10014              		.loc 1 2021 3 is_stmt 1 view .LVU3242
ARM GAS  /tmp/ccQmbpxO.s 			page 280


2022:src/display.c **** 		int group = 10;
 10015              		.loc 1 2022 3 view .LVU3243
2023:src/display.c **** 		int start = 0;
 10016              		.loc 1 2023 3 view .LVU3244
 10017              	.LVL1155:
2024:src/display.c **** 		
 10018              		.loc 1 2024 3 view .LVU3245
2026:src/display.c **** 			base = 10 * status;
 10019              		.loc 1 2026 3 view .LVU3246
2026:src/display.c **** 			base = 10 * status;
 10020              		.loc 1 2026 6 is_stmt 0 view .LVU3247
 10021 085e 092F     		cmp	r7, #9
 10022 0860 40F32C82 		ble	.L1085
2036:src/display.c **** 			base = regX_idx;
 10023              		.loc 1 2036 8 is_stmt 1 view .LVU3248
2036:src/display.c **** 			base = regX_idx;
 10024              		.loc 1 2036 11 is_stmt 0 view .LVU3249
 10025 0864 0A2F     		cmp	r7, #10
 10026 0866 00F0FE81 		beq	.L1086
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10027              		.loc 1 2044 4 is_stmt 1 view .LVU3250
 10028              	.LVL1156:
2045:src/display.c **** 			set_status("FL.00-.15");
 10029              		.loc 1 2045 4 view .LVU3251
2046:src/display.c **** 		}
 10030              		.loc 1 2046 4 view .LVU3252
 10031 086a 5F48     		ldr	r0, .L1102+32
 10032 086c 4FF00A0A 		mov	r10, #10
 10033 0870 FFF7FEFF 		bl	set_status
 10034              	.LVL1157:
2023:src/display.c **** 		int start = 0;
 10035              		.loc 1 2023 7 is_stmt 0 view .LVU3253
 10036 0874 5646     		mov	r6, r10
2024:src/display.c **** 		
 10037              		.loc 1 2024 7 view .LVU3254
 10038 0876 4FF0000B 		mov	fp, #0
2046:src/display.c **** 		}
 10039              		.loc 1 2046 4 view .LVU3255
 10040 087a 0222     		movs	r2, #2
 10041 087c 4FF00908 		mov	r8, #9
 10042              	.LVL1158:
2046:src/display.c **** 		}
 10043              		.loc 1 2046 4 view .LVU3256
 10044 0880 0720     		movs	r0, #7
2045:src/display.c **** 			set_status("FL.00-.15");
 10045              		.loc 1 2045 8 view .LVU3257
 10046 0882 4FF07F09 		mov	r9, #127
 10047              	.LVL1159:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10048              		.loc 1 2044 9 view .LVU3258
 10049 0886 7027     		movs	r7, #112
 10050              	.LVL1160:
 10051              	.L851:
2048:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
 10052              		.loc 1 2048 3 is_stmt 1 view .LVU3259
2049:src/display.c **** 		j += SEGS_PER_DIGIT;
 10053              		.loc 1 2049 3 view .LVU3260
ARM GAS  /tmp/ccQmbpxO.s 			page 281


 10054              	.LBB515:
 10055              	.LBI515:
 336:src/display.c **** 	if (res) {
 10056              		.loc 1 336 14 view .LVU3261
 10057              	.LBB516:
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10058              		.loc 1 337 2 view .LVU3262
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10059              		.loc 1 340 3 view .LVU3263
 10060 0888 0192     		str	r2, [sp, #4]
 10061 088a FFF7FEFF 		bl	set_dot
 10062              	.LVL1161:
 341:src/display.c **** 			set_dot(posn+8);
 10063              		.loc 1 341 3 view .LVU3264
 10064              	.LBB517:
 10065              	.LBI517:
 336:src/display.c **** 	if (res) {
 10066              		.loc 1 336 14 view .LVU3265
 10067              	.LBB518:
 344:src/display.c **** #endif
 10068              		.loc 1 344 2 view .LVU3266
 344:src/display.c **** #endif
 10069              		.loc 1 344 35 is_stmt 0 view .LVU3267
 10070 088e 019A     		ldr	r2, [sp, #4]
 10071 0890 534B     		ldr	r3, .L1102+24
 10072 0892 2E21     		movs	r1, #46
 10073 0894 9954     		strb	r1, [r3, r2]
 347:src/display.c **** }
 10074              		.loc 1 347 2 is_stmt 1 view .LVU3268
 10075              	.LVL1162:
 347:src/display.c **** }
 10076              		.loc 1 347 2 is_stmt 0 view .LVU3269
 10077              	.LBE518:
 10078              	.LBE517:
 347:src/display.c **** }
 10079              		.loc 1 347 2 is_stmt 1 view .LVU3270
 347:src/display.c **** }
 10080              		.loc 1 347 2 is_stmt 0 view .LVU3271
 10081              	.LBE516:
 10082              	.LBE515:
2050:src/display.c **** 		for (i = start; i < group + start; i++) {
 10083              		.loc 1 2050 3 is_stmt 1 view .LVU3272
2051:src/display.c **** 			int k = i + base - start;
 10084              		.loc 1 2051 3 view .LVU3273
2051:src/display.c **** 			int k = i + base - start;
 10085              		.loc 1 2051 19 view .LVU3274
 10086 0896 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10087 089a D319     		adds	r3, r2, r7
 10088 089c 0293     		str	r3, [sp, #8]
 10089 089e A7EB0B03 		sub	r3, r7, fp
 10090 08a2 CDE90335 		strd	r3, r5, [sp, #12]
 10091              	.LBB519:
 10092              	.LBB520:
 10093              	.LBB521:
 10094              	.LBB522:
 10095              	.LBB523:
 344:src/display.c **** #endif
ARM GAS  /tmp/ccQmbpxO.s 			page 282


 10096              		.loc 1 344 35 is_stmt 0 view .LVU3275
 10097 08a6 0191     		str	r1, [sp, #4]
 10098 08a8 3E44     		add	r6, r6, r7
 10099              	.LVL1163:
 10100              	.L856:
 344:src/display.c **** #endif
 10101              		.loc 1 344 35 view .LVU3276
 10102              	.LBE523:
 10103              	.LBE522:
 10104              	.LBE521:
 10105              	.LBE520:
2052:src/display.c **** 			int l = get_user_flag(k);
 10106              		.loc 1 2052 4 is_stmt 1 view .LVU3277
2053:src/display.c **** 			k += group;
 10107              		.loc 1 2053 4 view .LVU3278
2053:src/display.c **** 			k += group;
 10108              		.loc 1 2053 12 is_stmt 0 view .LVU3279
 10109 08aa 039B     		ldr	r3, [sp, #12]
 10110 08ac 03EB0B00 		add	r0, r3, fp
 10111 08b0 FFF7FEFF 		bl	get_user_flag
 10112              	.LVL1164:
2055:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10113              		.loc 1 2055 7 view .LVU3280
 10114 08b4 4E45     		cmp	r6, r9
2053:src/display.c **** 			k += group;
 10115              		.loc 1 2053 12 view .LVU3281
 10116 08b6 0546     		mov	r5, r0
 10117              	.LVL1165:
2054:src/display.c **** 			if (end >= k) {
 10118              		.loc 1 2054 4 is_stmt 1 view .LVU3282
2055:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10119              		.loc 1 2055 4 view .LVU3283
2063:src/display.c **** 			if (i == 4) {
 10120              		.loc 1 2063 6 is_stmt 0 view .LVU3284
 10121 08b8 08F10907 		add	r7, r8, #9
2055:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10122              		.loc 1 2055 7 view .LVU3285
 10123 08bc 3FDD     		ble	.L1087
 10124              	.LVL1166:
 10125              	.L853:
2061:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
 10126              		.loc 1 2061 4 is_stmt 1 view .LVU3286
 10127 08be 2946     		mov	r1, r5
 10128 08c0 4046     		mov	r0, r8
 10129 08c2 FFF7FEFF 		bl	set_dig
 10130              	.LVL1167:
2062:src/display.c **** 			j += SEGS_PER_DIGIT;
 10131              		.loc 1 2062 4 view .LVU3287
 10132              	.LBB533:
 10133              	.LBI520:
 336:src/display.c **** 	if (res) {
 10134              		.loc 1 336 14 view .LVU3288
 10135              	.LBB530:
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10136              		.loc 1 337 2 view .LVU3289
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10137              		.loc 1 340 3 view .LVU3290
ARM GAS  /tmp/ccQmbpxO.s 			page 283


 10138 08c6 08F10700 		add	r0, r8, #7
 10139 08ca FFF7FEFF 		bl	set_dot
 10140              	.LVL1168:
 341:src/display.c **** 			set_dot(posn+8);
 10141              		.loc 1 341 3 view .LVU3291
 10142              	.LBB527:
 10143              	.LBI522:
 336:src/display.c **** 	if (res) {
 10144              		.loc 1 336 14 view .LVU3292
 10145              	.LBB524:
 344:src/display.c **** #endif
 10146              		.loc 1 344 2 view .LVU3293
 344:src/display.c **** #endif
 10147              		.loc 1 344 2 is_stmt 0 view .LVU3294
 10148              	.LBE524:
 10149              	.LBE527:
 10150              	.LBE530:
 10151              	.LBE533:
 10152              	.LBE519:
2051:src/display.c **** 			int k = i + base - start;
 10153              		.loc 1 2051 38 is_stmt 1 view .LVU3295
 10154              	.LBB544:
 10155              	.LBB534:
 10156              	.LBB531:
 10157              	.LBB528:
 10158              	.LBB525:
 344:src/display.c **** #endif
 10159              		.loc 1 344 27 is_stmt 0 view .LVU3296
 10160 08ce 474B     		ldr	r3, .L1102+36
 344:src/display.c **** #endif
 10161              		.loc 1 344 35 view .LVU3297
 10162 08d0 0199     		ldr	r1, [sp, #4]
 344:src/display.c **** #endif
 10163              		.loc 1 344 27 view .LVU3298
 10164 08d2 A3FB0832 		umull	r3, r2, r3, r8
 10165 08d6 5208     		lsrs	r2, r2, #1
 344:src/display.c **** #endif
 10166              		.loc 1 344 35 view .LVU3299
 10167 08d8 414B     		ldr	r3, .L1102+24
 344:src/display.c **** #endif
 10168              		.loc 1 344 32 view .LVU3300
 10169 08da 0132     		adds	r2, r2, #1
 10170              	.LBE525:
 10171              	.LBE528:
 10172              	.LBE531:
 10173              	.LBE534:
2064:src/display.c **** 				set_dig(j, 8);
 10174              		.loc 1 2064 7 view .LVU3301
 10175 08dc BBF1040F 		cmp	fp, #4
 10176              	.LBB535:
 10177              	.LBB532:
 10178              	.LBB529:
 10179              	.LBB526:
 344:src/display.c **** #endif
 10180              		.loc 1 344 35 view .LVU3302
 10181 08e0 03F81210 		strb	r1, [r3, r2, lsl #1]
 347:src/display.c **** }
ARM GAS  /tmp/ccQmbpxO.s 			page 284


 10182              		.loc 1 347 2 is_stmt 1 view .LVU3303
 10183              	.LVL1169:
 347:src/display.c **** }
 10184              		.loc 1 347 2 is_stmt 0 view .LVU3304
 10185              	.LBE526:
 10186              	.LBE529:
 347:src/display.c **** }
 10187              		.loc 1 347 2 is_stmt 1 view .LVU3305
 347:src/display.c **** }
 10188              		.loc 1 347 2 is_stmt 0 view .LVU3306
 10189              	.LBE532:
 10190              	.LBE535:
2063:src/display.c **** 			if (i == 4) {
 10191              		.loc 1 2063 4 is_stmt 1 view .LVU3307
2064:src/display.c **** 				set_dig(j, 8);
 10192              		.loc 1 2064 4 view .LVU3308
 10193              	.LBE544:
2051:src/display.c **** 			int k = i + base - start;
 10194              		.loc 1 2051 39 is_stmt 0 view .LVU3309
 10195 08e4 0BF1010B 		add	fp, fp, #1
 10196              	.LVL1170:
2051:src/display.c **** 			int k = i + base - start;
 10197              		.loc 1 2051 19 is_stmt 1 view .LVU3310
 10198              	.LBB545:
2064:src/display.c **** 				set_dig(j, 8);
 10199              		.loc 1 2064 7 is_stmt 0 view .LVU3311
 10200 08e8 42D0     		beq	.L1088
2064:src/display.c **** 				set_dig(j, 8);
 10201              		.loc 1 2064 7 view .LVU3312
 10202              	.LBE545:
2051:src/display.c **** 			int k = i + base - start;
 10203              		.loc 1 2051 3 view .LVU3313
 10204 08ea D345     		cmp	fp, r10
 10205 08ec 06F10106 		add	r6, r6, #1
 10206 08f0 01D0     		beq	.L1089
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10207              		.loc 1 2044 9 view .LVU3314
 10208 08f2 B846     		mov	r8, r7
 10209 08f4 D9E7     		b	.L856
 10210              	.L1089:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10211              		.loc 1 2044 9 view .LVU3315
 10212 08f6 049D     		ldr	r5, [sp, #16]
 10213              	.LVL1171:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10214              		.loc 1 2044 9 view .LVU3316
 10215 08f8 334F     		ldr	r7, .L1102
 10216              	.LVL1172:
 10217              	.L846:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10218              		.loc 1 2044 9 view .LVU3317
 10219              	.LBE514:
2072:src/display.c **** 	pc = state_pc();
 10220              		.loc 1 2072 2 is_stmt 1 view .LVU3318
2073:src/display.c **** 	if (isXROM(pc))
 10221              		.loc 1 2073 2 view .LVU3319
2073:src/display.c **** 	if (isXROM(pc))
ARM GAS  /tmp/ccQmbpxO.s 			page 285


 10222              		.loc 1 2073 7 is_stmt 0 view .LVU3320
 10223 08fa 3B68     		ldr	r3, [r7]
2073:src/display.c **** 	if (isXROM(pc))
 10224              		.loc 1 2073 5 view .LVU3321
 10225 08fc B3F8E077 		ldrh	r7, [r3, #2016]
 10226              	.LVL1173:
2074:src/display.c **** 		pc = 1;
 10227              		.loc 1 2074 2 is_stmt 1 view .LVU3322
2074:src/display.c **** 		pc = 1;
 10228              		.loc 1 2074 6 is_stmt 0 view .LVU3323
 10229 0900 BB0B     		lsrs	r3, r7, #14
2075:src/display.c **** 	for (n=i=0; i<4; i++) {
 10230              		.loc 1 2075 6 view .LVU3324
 10231 0902 032B     		cmp	r3, #3
 10232 0904 08BF     		it	eq
 10233 0906 0127     		moveq	r7, #1
 10234              	.LVL1174:
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10235              		.loc 1 2076 2 is_stmt 1 view .LVU3325
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10236              		.loc 1 2076 14 view .LVU3326
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10237              		.loc 1 2076 8 is_stmt 0 view .LVU3327
 10238 0908 4FF00009 		mov	r9, #0
 10239 090c 6426     		movs	r6, #100
2072:src/display.c **** 	pc = state_pc();
 10240              		.loc 1 2072 4 view .LVU3328
 10241 090e 4FF06C08 		mov	r8, #108
 10242              	.LVL1175:
 10243              	.L860:
2077:src/display.c **** 			if (++n == 4) {
 10244              		.loc 1 2077 3 is_stmt 1 view .LVU3329
2077:src/display.c **** 			if (++n == 4) {
 10245              		.loc 1 2077 7 is_stmt 0 view .LVU3330
 10246 0912 0222     		movs	r2, #2
 10247 0914 3146     		mov	r1, r6
 10248 0916 3846     		mov	r0, r7
 10249 0918 FFF7FEFF 		bl	find_label_from
 10250              	.LVL1176:
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10251              		.loc 1 2078 4 is_stmt 1 view .LVU3331
2077:src/display.c **** 			if (++n == 4) {
 10252              		.loc 1 2077 6 is_stmt 0 view .LVU3332
 10253 091c 58B1     		cbz	r0, .L858
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10254              		.loc 1 2078 7 view .LVU3333
 10255 091e 09F10109 		add	r9, r9, #1
 10256              	.LVL1177:
2082:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10257              		.loc 1 2082 5 is_stmt 1 view .LVU3334
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10258              		.loc 1 2078 7 is_stmt 0 view .LVU3335
 10259 0922 B9F1040F 		cmp	r9, #4
2082:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10260              		.loc 1 2082 5 view .LVU3336
 10261 0926 A6F12301 		sub	r1, r6, #35
 10262 092a 4046     		mov	r0, r8
ARM GAS  /tmp/ccQmbpxO.s 			page 286


2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10263              		.loc 1 2078 7 view .LVU3337
 10264 092c 17D0     		beq	.L1090
2082:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10265              		.loc 1 2082 5 view .LVU3338
 10266 092e FFF7FEFF 		bl	set_dig
 10267              	.LVL1178:
2083:src/display.c **** 			}
 10268              		.loc 1 2083 5 is_stmt 1 view .LVU3339
2083:src/display.c **** 			}
 10269              		.loc 1 2083 7 is_stmt 0 view .LVU3340
 10270 0932 08F10708 		add	r8, r8, #7
 10271              	.LVL1179:
 10272              	.L858:
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10273              		.loc 1 2076 19 is_stmt 1 view .LVU3341
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10274              		.loc 1 2076 14 view .LVU3342
 10275 0936 0136     		adds	r6, r6, #1
 10276              	.LVL1180:
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10277              		.loc 1 2076 2 is_stmt 0 view .LVU3343
 10278 0938 682E     		cmp	r6, #104
 10279 093a EAD1     		bne	.L860
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10280              		.loc 1 2076 2 view .LVU3344
 10281 093c 3FE7     		b	.L1053
 10282              	.LVL1181:
 10283              	.L1087:
 10284              	.LBB548:
 10285              	.LBB546:
2056:src/display.c **** 				k += group;
 10286              		.loc 1 2056 5 is_stmt 1 view .LVU3345
2056:src/display.c **** 				k += group;
 10287              		.loc 1 2056 11 is_stmt 0 view .LVU3346
 10288 093e 3046     		mov	r0, r6
 10289              	.LVL1182:
2056:src/display.c **** 				k += group;
 10290              		.loc 1 2056 11 view .LVU3347
 10291 0940 FFF7FEFF 		bl	get_user_flag
 10292              	.LVL1183:
 10293 0944 029B     		ldr	r3, [sp, #8]
 10294 0946 03EB0B02 		add	r2, r3, fp
2058:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10295              		.loc 1 2058 8 view .LVU3348
 10296 094a 4A45     		cmp	r2, r9
2056:src/display.c **** 				k += group;
 10297              		.loc 1 2056 7 view .LVU3349
 10298 094c 45EA4005 		orr	r5, r5, r0, lsl #1
 10299              	.LVL1184:
2057:src/display.c **** 				if (end >= k)
 10300              		.loc 1 2057 5 is_stmt 1 view .LVU3350
2058:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10301              		.loc 1 2058 5 view .LVU3351
2058:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10302              		.loc 1 2058 8 is_stmt 0 view .LVU3352
 10303 0950 B5DC     		bgt	.L853
ARM GAS  /tmp/ccQmbpxO.s 			page 287


2059:src/display.c **** 			}
 10304              		.loc 1 2059 6 is_stmt 1 view .LVU3353
2059:src/display.c **** 			}
 10305              		.loc 1 2059 12 is_stmt 0 view .LVU3354
 10306 0952 1046     		mov	r0, r2
 10307 0954 FFF7FEFF 		bl	get_user_flag
 10308              	.LVL1185:
2059:src/display.c **** 			}
 10309              		.loc 1 2059 8 view .LVU3355
 10310 0958 45EA8005 		orr	r5, r5, r0, lsl #2
 10311              	.LVL1186:
2059:src/display.c **** 			}
 10312              		.loc 1 2059 8 view .LVU3356
 10313 095c AFE7     		b	.L853
 10314              	.LVL1187:
 10315              	.L1090:
2059:src/display.c **** 			}
 10316              		.loc 1 2059 8 view .LVU3357
 10317              	.LBE546:
 10318              	.LBE548:
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10319              		.loc 1 2079 5 is_stmt 1 view .LVU3358
 10320 095e 4C21     		movs	r1, #76
 10321 0960 7320     		movs	r0, #115
 10322              	.LVL1188:
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10323              		.loc 1 2079 5 is_stmt 0 view .LVU3359
 10324 0962 FFF7FEFF 		bl	set_dig
 10325              	.LVL1189:
2080:src/display.c **** 			} else {
 10326              		.loc 1 2080 5 is_stmt 1 view .LVU3360
 10327 0966 4C21     		movs	r1, #76
 10328 0968 7A20     		movs	r0, #122
 10329 096a FFF7FEFF 		bl	set_dig
 10330              	.LVL1190:
 10331 096e E2E7     		b	.L858
 10332              	.LVL1191:
 10333              	.L1088:
 10334              	.LBB549:
 10335              	.LBB547:
2065:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
 10336              		.loc 1 2065 5 view .LVU3361
 10337 0970 0821     		movs	r1, #8
 10338 0972 3846     		mov	r0, r7
 10339 0974 FFF7FEFF 		bl	set_dig
 10340              	.LVL1192:
2066:src/display.c **** 				j += SEGS_PER_DIGIT;
 10341              		.loc 1 2066 5 view .LVU3362
 10342              	.LBB536:
 10343              	.LBI536:
 336:src/display.c **** 	if (res) {
 10344              		.loc 1 336 14 view .LVU3363
 10345              	.LBB537:
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10346              		.loc 1 337 2 view .LVU3364
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10347              		.loc 1 340 3 view .LVU3365
ARM GAS  /tmp/ccQmbpxO.s 			page 288


 10348 0978 08F11000 		add	r0, r8, #16
 10349 097c FFF7FEFF 		bl	set_dot
 10350              	.LVL1193:
 341:src/display.c **** 			set_dot(posn+8);
 10351              		.loc 1 341 3 view .LVU3366
 10352              	.LBB538:
 10353              	.LBI538:
 336:src/display.c **** 	if (res) {
 10354              		.loc 1 336 14 view .LVU3367
 10355              	.LBB539:
 344:src/display.c **** #endif
 10356              		.loc 1 344 2 view .LVU3368
 344:src/display.c **** #endif
 10357              		.loc 1 344 27 is_stmt 0 view .LVU3369
 10358 0980 1A4B     		ldr	r3, .L1102+36
 344:src/display.c **** #endif
 10359              		.loc 1 344 35 view .LVU3370
 10360 0982 0199     		ldr	r1, [sp, #4]
 344:src/display.c **** #endif
 10361              		.loc 1 344 27 view .LVU3371
 10362 0984 A3FB0723 		umull	r2, r3, r3, r7
 10363 0988 5B08     		lsrs	r3, r3, #1
 344:src/display.c **** #endif
 10364              		.loc 1 344 35 view .LVU3372
 10365 098a 154A     		ldr	r2, .L1102+24
 344:src/display.c **** #endif
 10366              		.loc 1 344 32 view .LVU3373
 10367 098c 0133     		adds	r3, r3, #1
 10368              	.LBE539:
 10369              	.LBE538:
 10370              	.LBE537:
 10371              	.LBE536:
2067:src/display.c **** 			}
 10372              		.loc 1 2067 7 view .LVU3374
 10373 098e 08F11207 		add	r7, r8, #18
 10374              	.LVL1194:
 10375              	.LBB543:
 10376              	.LBB542:
 10377              	.LBB541:
 10378              	.LBB540:
 344:src/display.c **** #endif
 10379              		.loc 1 344 35 view .LVU3375
 10380 0992 02F81310 		strb	r1, [r2, r3, lsl #1]
 347:src/display.c **** }
 10381              		.loc 1 347 2 is_stmt 1 view .LVU3376
 10382              	.LVL1195:
 347:src/display.c **** }
 10383              		.loc 1 347 2 is_stmt 0 view .LVU3377
 10384              	.LBE540:
 10385              	.LBE541:
 347:src/display.c **** }
 10386              		.loc 1 347 2 is_stmt 1 view .LVU3378
 347:src/display.c **** }
 10387              		.loc 1 347 2 is_stmt 0 view .LVU3379
 10388              	.LBE542:
 10389              	.LBE543:
2067:src/display.c **** 			}
ARM GAS  /tmp/ccQmbpxO.s 			page 289


 10390              		.loc 1 2067 5 is_stmt 1 view .LVU3380
2067:src/display.c **** 			}
 10391              		.loc 1 2067 5 is_stmt 0 view .LVU3381
 10392              	.LBE547:
2051:src/display.c **** 			int k = i + base - start;
 10393              		.loc 1 2051 38 is_stmt 1 view .LVU3382
2051:src/display.c **** 			int k = i + base - start;
 10394              		.loc 1 2051 19 view .LVU3383
 10395 0996 0136     		adds	r6, r6, #1
2051:src/display.c **** 			int k = i + base - start;
 10396              		.loc 1 2051 39 is_stmt 0 view .LVU3384
 10397 0998 4FF0050B 		mov	fp, #5
 10398              	.LVL1196:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10399              		.loc 1 2044 9 view .LVU3385
 10400 099c B846     		mov	r8, r7
 10401 099e 84E7     		b	.L856
 10402              	.LVL1197:
 10403              	.L828:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10404              		.loc 1 2044 9 view .LVU3386
 10405              	.LBE549:
 10406              	.LBE513:
 10407              	.LBE512:
2313:src/display.c **** 			}
 10408              		.loc 1 2313 6 is_stmt 1 view .LVU3387
2313:src/display.c **** 			}
 10409              		.loc 1 2313 11 is_stmt 0 view .LVU3388
 10410 09a0 2189     		ldrh	r1, [r4, #8]
 10411 09a2 FFF7FEFF 		bl	num_arg_0
 10412              	.LVL1198:
2313:src/display.c **** 			}
 10413              		.loc 1 2313 11 view .LVU3389
 10414 09a6 32E6     		b	.L827
 10415              	.LVL1199:
 10416              	.L878:
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10417              		.loc 1 2400 10 is_stmt 1 view .LVU3390
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10418              		.loc 1 2400 14 is_stmt 0 view .LVU3391
 10419 09a8 DFF84480 		ldr	r8, .L1102+40
 10420              	.LVL1200:
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10421              		.loc 1 2400 14 view .LVU3392
 10422 09ac B8F90030 		ldrsh	r3, [r8]
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10423              		.loc 1 2400 13 view .LVU3393
 10424 09b0 002B     		cmp	r3, #0
 10425 09b2 40F01381 		bne	.L1091
2402:src/display.c **** #if 0
 10426              		.loc 1 2402 10 is_stmt 1 view .LVU3394
2402:src/display.c **** #if 0
 10427              		.loc 1 2402 13 is_stmt 0 view .LVU3395
 10428 09b6 0907     		lsls	r1, r1, #28
 10429 09b8 00F1D880 		bmi	.L1092
 10430              	.LVL1201:
2456:src/display.c **** nostk:	show_flags();
ARM GAS  /tmp/ccQmbpxO.s 			page 290


 10431              		.loc 1 2456 2 is_stmt 1 view .LVU3396
 10432 09bc FFF7FEFF 		bl	show_stack
 10433              	.LVL1202:
2457:src/display.c **** 	if (!skip) {
 10434              		.loc 1 2457 8 view .LVU3397
2426:src/display.c **** 		}
 10435              		.loc 1 2426 10 is_stmt 0 view .LVU3398
 10436 09c0 0125     		movs	r5, #1
2457:src/display.c **** 	if (!skip) {
 10437              		.loc 1 2457 8 view .LVU3399
 10438 09c2 FFF7FEFF 		bl	show_flags
 10439              	.LVL1203:
2458:src/display.c **** 		if (State2.runmode) {
 10440              		.loc 1 2458 2 is_stmt 1 view .LVU3400
 10441 09c6 42E4     		b	.L816
 10442              	.L1103:
 10443              		.align	2
 10444              	.L1102:
 10445 09c8 00000000 		.word	main_ram
 10446 09cc 3C000000 		.word	.LC29
 10447 09d0 00000000 		.word	StackBase
 10448 09d4 00000000 		.word	DispMsg
 10449 09d8 00000000 		.word	multicmds
 10450 09dc 00000000 		.word	.LANCHOR22
 10451 09e0 00000000 		.word	LastDisplayedNumber
 10452 09e4 98000000 		.word	.LC39
 10453 09e8 8C000000 		.word	.LC38
 10454 09ec 398EE338 		.word	954437177
 10455 09f0 00000000 		.word	DispPlot
 10456 09f4 00000000 		.word	ShowRegister
 10457 09f8 00000000 		.word	.LANCHOR21
 10458              	.LVL1204:
 10459              	.L877:
2432:src/display.c **** 		if (i > 0)
 10460              		.loc 1 2432 3 view .LVU3401
2432:src/display.c **** 		if (i > 0)
 10461              		.loc 1 2432 7 is_stmt 0 view .LVU3402
 10462 09fc C44B     		ldr	r3, .L1104
 10463 09fe 1B68     		ldr	r3, [r3]
 10464 0a00 B3F8E007 		ldrh	r0, [r3, #2016]
 10465              	.LVL1205:
2433:src/display.c **** 			set_status(prt(getprog(i), buf));
 10466              		.loc 1 2433 3 is_stmt 1 view .LVU3403
2433:src/display.c **** 			set_status(prt(getprog(i), buf));
 10467              		.loc 1 2433 6 is_stmt 0 view .LVU3404
 10468 0a04 0028     		cmp	r0, #0
 10469 0a06 72D0     		beq	.L888
2434:src/display.c **** 		else
 10470              		.loc 1 2434 4 is_stmt 1 view .LVU3405
 10471 0a08 FFF7FEFF 		bl	getprog
 10472              	.LVL1206:
2434:src/display.c **** 		else
 10473              		.loc 1 2434 4 is_stmt 0 view .LVU3406
 10474 0a0c 1EA9     		add	r1, sp, #120
 10475 0a0e FFF7FEFF 		bl	prt
 10476              	.LVL1207:
 10477 0a12 FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccQmbpxO.s 			page 291


 10478              	.LVL1208:
 10479              	.L889:
2437:src/display.c **** #if 0
 10480              		.loc 1 2437 3 is_stmt 1 view .LVU3407
 10481 0a16 8920     		movs	r0, #137
 10482 0a18 FFF7FEFF 		bl	set_dot
 10483              	.LVL1209:
2452:src/display.c **** 			annuc = 1;
 10484              		.loc 1 2452 3 view .LVU3408
2452:src/display.c **** 			annuc = 1;
 10485              		.loc 1 2452 7 is_stmt 0 view .LVU3409
 10486 0a1c FFF7FEFF 		bl	cur_shift
 10487              	.LVL1210:
2452:src/display.c **** 			annuc = 1;
 10488              		.loc 1 2452 46 view .LVU3410
 10489 0a20 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10490 0a22 03F00603 		and	r3, r3, #6
 10491 0a26 1843     		orrs	r0, r0, r3
 10492 0a28 10F0FF0F 		tst	r0, #255
 10493 0a2c 46D1     		bne	.L890
2457:src/display.c **** 	if (!skip) {
 10494              		.loc 1 2457 8 is_stmt 1 view .LVU3411
 10495 0a2e FFF7FEFF 		bl	show_flags
 10496              	.LVL1211:
2458:src/display.c **** 		if (State2.runmode) {
 10497              		.loc 1 2458 2 view .LVU3412
 10498 0a32 B84E     		ldr	r6, .L1104+4
 10499 0a34 DFF81083 		ldr	r8, .L1104+56
 10500              	.LVL1212:
2458:src/display.c **** 		if (State2.runmode) {
 10501              		.loc 1 2458 2 is_stmt 0 view .LVU3413
 10502 0a38 09E4     		b	.L816
 10503              	.LVL1213:
 10504              	.L1070:
2388:src/display.c **** 		skip = 1;
 10505              		.loc 1 2388 3 is_stmt 1 view .LVU3414
 10506              	.LBB553:
 10507              	.LBI553:
2122:src/display.c **** 	char buf[16], *bp;
 10508              		.loc 1 2122 13 view .LVU3415
 10509              	.LBB554:
2123:src/display.c **** 	int n = State2.digval;
 10510              		.loc 1 2123 2 view .LVU3416
2124:src/display.c **** 	
 10511              		.loc 1 2124 2 view .LVU3417
2124:src/display.c **** 	
 10512              		.loc 1 2124 6 is_stmt 0 view .LVU3418
 10513 0a3a B4F80880 		ldrh	r8, [r4, #8]
 10514              	.LVL1214:
2131:src/display.c **** 			n;
 10515              		.loc 1 2131 2 is_stmt 1 view .LVU3419
2131:src/display.c **** 			n;
 10516              		.loc 1 2131 54 is_stmt 0 view .LVU3420
 10517 0a3e CA07     		lsls	r2, r1, #31
 10518 0a40 4CBF     		ite	mi
 10519 0a42 08F17007 		addmi	r7, r8, #112
2124:src/display.c **** 	
ARM GAS  /tmp/ccQmbpxO.s 			page 292


 10520              		.loc 1 2124 6 view .LVU3421
 10521 0a46 4746     		movpl	r7, r8
 10522              	.LVL1215:
2135:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10523              		.loc 1 2135 2 is_stmt 1 view .LVU3422
2135:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10524              		.loc 1 2135 5 is_stmt 0 view .LVU3423
 10525 0a48 11F00401 		ands	r1, r1, #4
 10526 0a4c 1AD0     		beq	.L868
2136:src/display.c **** 	}
 10527              		.loc 1 2136 3 is_stmt 1 view .LVU3424
2136:src/display.c **** 	}
 10528              		.loc 1 2136 14 is_stmt 0 view .LVU3425
 10529 0a4e 15A9     		add	r1, sp, #84
 10530 0a50 3846     		mov	r0, r7
 10531 0a52 FFF7FEFF 		bl	alpha_rcl_s
 10532              	.LVL1216:
2136:src/display.c **** 	}
 10533              		.loc 1 2136 3 view .LVU3426
 10534 0a56 FFF7FEFF 		bl	set_status
 10535              	.LVL1217:
 10536              	.L869:
2158:src/display.c **** }
 10537              		.loc 1 2158 2 is_stmt 1 view .LVU3427
 10538 0a5a 3846     		mov	r0, r7
 10539 0a5c 0021     		movs	r1, #0
 10540 0a5e FFF7FEFF 		bl	format_reg
 10541              	.LVL1218:
 10542              	.LBE554:
 10543              	.LBE553:
2389:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10544              		.loc 1 2389 3 view .LVU3428
2390:src/display.c **** 			annunciators();
 10545              		.loc 1 2390 3 view .LVU3429
2390:src/display.c **** 			annunciators();
 10546              		.loc 1 2390 6 is_stmt 0 view .LVU3430
 10547 0a62 BAF1000F 		cmp	r10, #0
 10548 0a66 0AD1     		bne	.L875
2390:src/display.c **** 			annunciators();
 10549              		.loc 1 2390 24 discriminator 1 view .LVU3431
 10550 0a68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10551 0a6a 012B     		cmp	r3, #1
 10552 0a6c 7FF4A7AE 		bne	.L1053
2390:src/display.c **** 			annunciators();
 10553              		.loc 1 2390 55 discriminator 2 view .LVU3432
 10554 0a70 A74B     		ldr	r3, .L1104
 10555 0a72 1B68     		ldr	r3, [r3]
 10556 0a74 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10557 0a78 DE07     		lsls	r6, r3, #31
 10558 0a7a 7FF5A0AE 		bpl	.L1053
 10559              	.L875:
2391:src/display.c **** 		}
 10560              		.loc 1 2391 4 is_stmt 1 view .LVU3433
 10561 0a7e FFF7FEFF 		bl	annunciators
 10562              	.LVL1219:
2456:src/display.c **** nostk:	show_flags();
 10563              		.loc 1 2456 2 view .LVU3434
ARM GAS  /tmp/ccQmbpxO.s 			page 293


 10564 0a82 9CE6     		b	.L1053
 10565              	.LVL1220:
 10566              	.L868:
 10567              	.LBB557:
 10568              	.LBB555:
2139:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10569              		.loc 1 2139 3 view .LVU3435
 10570 0a84 15AE     		add	r6, sp, #84
 10571 0a86 1022     		movs	r2, #16
 10572 0a88 3046     		mov	r0, r6
 10573 0a8a FFF7FEFF 		bl	xset
 10574              	.LVL1221:
2143:src/display.c **** #endif
 10575              		.loc 1 2143 3 view .LVU3436
2143:src/display.c **** #endif
 10576              		.loc 1 2143 8 is_stmt 0 view .LVU3437
 10577 0a8e A249     		ldr	r1, .L1104+8
 10578 0a90 3046     		mov	r0, r6
 10579 0a92 FFF7FEFF 		bl	scopy_spc
 10580              	.LVL1222:
2145:src/display.c **** 			*bp++ = '.';
 10581              		.loc 1 2145 7 view .LVU3438
 10582 0a96 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10583              	.LVL1223:
2145:src/display.c **** 			*bp++ = '.';
 10584              		.loc 1 2145 3 is_stmt 1 view .LVU3439
2145:src/display.c **** 			*bp++ = '.';
 10585              		.loc 1 2145 6 is_stmt 0 view .LVU3440
 10586 0a98 DB07     		lsls	r3, r3, #31
 10587 0a9a 40F1DA80 		bpl	.L870
2146:src/display.c **** 			if (n >= 100) {
 10588              		.loc 1 2146 4 is_stmt 1 view .LVU3441
 10589              	.LVL1224:
2146:src/display.c **** 			if (n >= 100) {
 10590              		.loc 1 2146 10 is_stmt 0 view .LVU3442
 10591 0a9e 2E23     		movs	r3, #46
2147:src/display.c **** 				*bp++ = '1';
 10592              		.loc 1 2147 7 view .LVU3443
 10593 0aa0 B8F1630F 		cmp	r8, #99
2146:src/display.c **** 			if (n >= 100) {
 10594              		.loc 1 2146 10 view .LVU3444
 10595 0aa4 0370     		strb	r3, [r0]
2147:src/display.c **** 				*bp++ = '1';
 10596              		.loc 1 2147 4 is_stmt 1 view .LVU3445
2147:src/display.c **** 				*bp++ = '1';
 10597              		.loc 1 2147 7 is_stmt 0 view .LVU3446
 10598 0aa6 00F3CF80 		bgt	.L871
2146:src/display.c **** 			if (n >= 100) {
 10599              		.loc 1 2146 7 view .LVU3447
 10600 0aaa 0130     		adds	r0, r0, #1
 10601              	.LVL1225:
 10602              	.L872:
2153:src/display.c **** 		else
 10603              		.loc 1 2153 4 is_stmt 1 view .LVU3448
2153:src/display.c **** 		else
 10604              		.loc 1 2153 9 is_stmt 0 view .LVU3449
 10605 0aac 4146     		mov	r1, r8
ARM GAS  /tmp/ccQmbpxO.s 			page 294


 10606 0aae 0222     		movs	r2, #2
 10607 0ab0 FFF7FEFF 		bl	num_arg_0
 10608              	.LVL1226:
 10609              	.L874:
2156:src/display.c **** 	}
 10610              		.loc 1 2156 3 is_stmt 1 view .LVU3450
 10611 0ab4 3046     		mov	r0, r6
 10612 0ab6 FFF7FEFF 		bl	set_status
 10613              	.LVL1227:
 10614 0aba CEE7     		b	.L869
 10615              	.LVL1228:
 10616              	.L890:
2156:src/display.c **** 	}
 10617              		.loc 1 2156 3 is_stmt 0 view .LVU3451
 10618              	.LBE555:
 10619              	.LBE557:
2453:src/display.c **** 		goto nostk;
 10620              		.loc 1 2453 4 is_stmt 1 view .LVU3452
2457:src/display.c **** 	if (!skip) {
 10621              		.loc 1 2457 8 view .LVU3453
 10622 0abc FFF7FEFF 		bl	show_flags
 10623              	.LVL1229:
2458:src/display.c **** 		if (State2.runmode) {
 10624              		.loc 1 2458 2 view .LVU3454
 10625 0ac0 944E     		ldr	r6, .L1104+4
 10626 0ac2 DFF88482 		ldr	r8, .L1104+56
 10627              	.LVL1230:
2453:src/display.c **** 		goto nostk;
 10628              		.loc 1 2453 10 is_stmt 0 view .LVU3455
 10629 0ac6 0125     		movs	r5, #1
 10630 0ac8 FFF7C1BB 		b	.L816
 10631              	.LVL1231:
 10632              	.L1077:
 10633              	.LBB558:
 10634              	.LBB479:
 10635              	.LBB472:
 936:src/display.c **** 					p++;
 10636              		.loc 1 936 6 is_stmt 1 view .LVU3456
 937:src/display.c **** 					if (!double_dot)
 10637              		.loc 1 937 6 view .LVU3457
 937:src/display.c **** 					if (!double_dot)
 10638              		.loc 1 937 7 is_stmt 0 view .LVU3458
 10639 0acc 0AF1010A 		add	r10, r10, #1
 10640              	.LVL1232:
 938:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 10641              		.loc 1 938 6 is_stmt 1 view .LVU3459
 939:src/display.c **** 				}
 10642              		.loc 1 939 7 view .LVU3460
 939:src/display.c **** 				}
 10643              		.loc 1 939 9 is_stmt 0 view .LVU3461
 10644 0ad0 4FF0120B 		mov	fp, #18
 10645 0ad4 7AE6     		b	.L910
 10646              	.LVL1233:
 10647              	.L834:
 939:src/display.c **** 				}
 10648              		.loc 1 939 9 view .LVU3462
 10649              	.LBE472:
ARM GAS  /tmp/ccQmbpxO.s 			page 295


 10650              	.LBE479:
 10651              	.LBE558:
 10652              	.LBB559:
2338:src/display.c **** 			else
 10653              		.loc 1 2338 5 is_stmt 1 view .LVU3463
 10654 0ad6 0021     		movs	r1, #0
 10655 0ad8 9048     		ldr	r0, .L1104+12
 10656 0ada FFF7FEFF 		bl	set_digits_string
 10657              	.LVL1234:
2372:src/display.c **** 	} else if (State2.multi) {
 10658              		.loc 1 2372 3 view .LVU3464
 10659 0ade 1EA8     		add	r0, sp, #120
 10660 0ae0 FFF7FEFF 		bl	set_status
 10661              	.LVL1235:
2372:src/display.c **** 	} else if (State2.multi) {
 10662              		.loc 1 2372 3 is_stmt 0 view .LVU3465
 10663              	.LBE559:
2456:src/display.c **** nostk:	show_flags();
 10664              		.loc 1 2456 2 is_stmt 1 view .LVU3466
 10665 0ae4 FFF7FEFF 		bl	show_stack
 10666              	.LVL1236:
2457:src/display.c **** 	if (!skip) {
 10667              		.loc 1 2457 8 view .LVU3467
 10668 0ae8 FFF7FEFF 		bl	show_flags
 10669              	.LVL1237:
2458:src/display.c **** 		if (State2.runmode) {
 10670              		.loc 1 2458 2 view .LVU3468
 10671 0aec 1EE6     		b	.L836
 10672              	.LVL1238:
 10673              	.L888:
2436:src/display.c **** 		set_dot(STO_annun);
 10674              		.loc 1 2436 4 view .LVU3469
 10675 0aee 8C48     		ldr	r0, .L1104+16
 10676              	.LVL1239:
2436:src/display.c **** 		set_dot(STO_annun);
 10677              		.loc 1 2436 4 is_stmt 0 view .LVU3470
 10678 0af0 FFF7FEFF 		bl	set_status
 10679              	.LVL1240:
2436:src/display.c **** 		set_dot(STO_annun);
 10680              		.loc 1 2436 4 view .LVU3471
 10681 0af4 8FE7     		b	.L889
 10682              	.LVL1241:
 10683              	.L1082:
 10684              	.LBB560:
 10685              	.LBB497:
2344:src/display.c **** 				decimal64 z;
 10686              		.loc 1 2344 5 is_stmt 1 view .LVU3472
2345:src/display.c **** 
 10687              		.loc 1 2345 5 view .LVU3473
2347:src/display.c **** 				if (opKIND(op) == KIND_MON) {
 10688              		.loc 1 2347 5 view .LVU3474
 10689 0af6 0CA8     		add	r0, sp, #48
 10690 0af8 FFF7FEFF 		bl	getX
 10691              	.LVL1242:
2348:src/display.c **** 					const unsigned int f = argKIND(op);
 10692              		.loc 1 2348 5 view .LVU3475
2348:src/display.c **** 					const unsigned int f = argKIND(op);
ARM GAS  /tmp/ccQmbpxO.s 			page 296


 10693              		.loc 1 2348 8 is_stmt 0 view .LVU3476
 10694 0afc CAF30723 		ubfx	r3, r10, #8, #8
 10695 0b00 022B     		cmp	r3, #2
 10696 0b02 2BD1     		bne	.L839
 10697              	.LBB493:
2349:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10698              		.loc 1 2349 6 is_stmt 1 view .LVU3477
2349:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10699              		.loc 1 2349 25 is_stmt 0 view .LVU3478
 10700 0b04 5FFA8AFA 		uxtb	r10, r10
 10701              	.LVL1243:
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10702              		.loc 1 2350 6 is_stmt 1 view .LVU3479
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10703              		.loc 1 2350 9 is_stmt 0 view .LVU3480
 10704 0b08 BAF1980F 		cmp	r10, #152
 10705              	.LBB494:
2353:src/display.c **** 					}
 10706              		.loc 1 2353 7 view .LVU3481
 10707 0b0c 15AE     		add	r6, sp, #84
 10708              	.LBE494:
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10709              		.loc 1 2350 9 view .LVU3482
 10710 0b0e 21D8     		bhi	.L840
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10711              		.loc 1 2350 31 discriminator 1 view .LVU3483
 10712 0b10 1823     		movs	r3, #24
 10713 0b12 844A     		ldr	r2, .L1104+20
 10714 0b14 03FB0AF3 		mul	r3, r3, r10
 10715 0b18 D358     		ldr	r3, [r2, r3]
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10716              		.loc 1 2350 26 discriminator 1 view .LVU3484
 10717 0b1a DBB1     		cbz	r3, .L840
 10718              	.LBB495:
2351:src/display.c **** 						update_speed(0);
 10719              		.loc 1 2351 7 is_stmt 1 view .LVU3485
 10720              	.LVL1244:
2352:src/display.c **** 						fp(&r, &x);
 10721              		.loc 1 2352 22 view .LVU3486
2353:src/display.c **** 					}
 10722              		.loc 1 2353 7 view .LVU3487
 10723 0b1c 0CA9     		add	r1, sp, #48
 10724 0b1e 3046     		mov	r0, r6
 10725 0b20 9847     		blx	r3
 10726              	.LVL1245:
 10727              	.L841:
2353:src/display.c **** 					}
 10728              		.loc 1 2353 7 is_stmt 0 view .LVU3488
 10729              	.LBE495:
 10730              	.LBE493:
2359:src/display.c **** 				packed_from_number(&z, &r);
 10731              		.loc 1 2359 5 is_stmt 1 discriminator 1 view .LVU3489
 10732 0b22 814A     		ldr	r2, .L1104+24
 10733 0b24 3146     		mov	r1, r6
 10734 0b26 3046     		mov	r0, r6
 10735 0b28 FFF7FEFF 		bl	decNumberNormalize
 10736              	.LVL1246:
ARM GAS  /tmp/ccQmbpxO.s 			page 297


2360:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
 10737              		.loc 1 2360 5 discriminator 1 view .LVU3490
 10738 0b2c 06A8     		add	r0, sp, #24
 10739 0b2e 3146     		mov	r1, r6
 10740 0b30 FFF7FEFF 		bl	packed_from_number
 10741              	.LVL1247:
2361:src/display.c **** 				skip = 1;
 10742              		.loc 1 2361 5 discriminator 1 view .LVU3491
 10743 0b34 0022     		movs	r2, #0
 10744 0b36 06A8     		add	r0, sp, #24
 10745 0b38 3BE6     		b	.L1052
 10746              	.LVL1248:
 10747              	.L865:
2361:src/display.c **** 				skip = 1;
 10748              		.loc 1 2361 5 is_stmt 0 discriminator 1 view .LVU3492
 10749              	.LBE497:
 10750              	.LBE560:
 10751              	.LBB561:
 10752              	.LBB511:
2112:src/display.c **** #ifndef REALBUILD
 10753              		.loc 1 2112 5 is_stmt 1 view .LVU3493
2112:src/display.c **** #ifndef REALBUILD
 10754              		.loc 1 2112 34 is_stmt 0 view .LVU3494
 10755 0b3a 06EB8600 		add	r0, r6, r6, lsl #2
2112:src/display.c **** #ifndef REALBUILD
 10756              		.loc 1 2112 5 view .LVU3495
 10757 0b3e 4044     		add	r0, r0, r8
 10758 0b40 0021     		movs	r1, #0
 10759 0b42 FFF7FEFF 		bl	set_exp_digits_string
 10760              	.LVL1249:
2114:src/display.c **** #endif
 10761              		.loc 1 2114 5 is_stmt 1 view .LVU3496
2114:src/display.c **** #endif
 10762              		.loc 1 2114 44 is_stmt 0 view .LVU3497
 10763 0b46 0A21     		movs	r1, #10
2114:src/display.c **** #endif
 10764              		.loc 1 2114 5 view .LVU3498
 10765 0b48 01FB0671 		mla	r1, r1, r6, r7
 10766 0b4c 7748     		ldr	r0, .L1104+28
 10767 0b4e FFF7FEFF 		bl	scopy
 10768              	.LVL1250:
2114:src/display.c **** #endif
 10769              		.loc 1 2114 5 view .LVU3499
 10770              	.LBE511:
 10771              	.LBE561:
2456:src/display.c **** nostk:	show_flags();
 10772              		.loc 1 2456 2 is_stmt 1 view .LVU3500
 10773 0b52 34E6     		b	.L1053
 10774              	.LVL1251:
 10775              	.L840:
 10776              	.LBB562:
 10777              	.LBB498:
 10778              	.LBB496:
2356:src/display.c **** 				} else
 10779              		.loc 1 2356 7 view .LVU3501
 10780 0b54 3046     		mov	r0, r6
 10781 0b56 FFF7FEFF 		bl	set_NaN
ARM GAS  /tmp/ccQmbpxO.s 			page 298


 10782              	.LVL1252:
 10783 0b5a E2E7     		b	.L841
 10784              	.LVL1253:
 10785              	.L839:
2356:src/display.c **** 				} else
 10786              		.loc 1 2356 7 is_stmt 0 view .LVU3502
 10787              	.LBE496:
2358:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10788              		.loc 1 2358 6 is_stmt 1 view .LVU3503
 10789 0b5c 15AE     		add	r6, sp, #84
 10790 0b5e 0CAA     		add	r2, sp, #48
 10791 0b60 0AF07F01 		and	r1, r10, #127
 10792 0b64 3046     		mov	r0, r6
 10793 0b66 FFF7FEFF 		bl	do_conv
 10794              	.LVL1254:
 10795 0b6a DAE7     		b	.L841
 10796              	.LVL1255:
 10797              	.L1092:
2358:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10798              		.loc 1 2358 6 is_stmt 0 view .LVU3504
 10799              	.LBE498:
 10800              	.LBE562:
2406:src/display.c **** 			j = State2.alpha_pos;
 10801              		.loc 1 2406 4 is_stmt 1 view .LVU3505
2406:src/display.c **** 			j = State2.alpha_pos;
 10802              		.loc 1 2406 20 is_stmt 0 view .LVU3506
 10803 0b6c 684A     		ldr	r2, .L1104
 10804 0b6e 0193     		str	r3, [sp, #4]
 10805 0b70 1168     		ldr	r1, [r2]
2406:src/display.c **** 			j = State2.alpha_pos;
 10806              		.loc 1 2406 9 view .LVU3507
 10807 0b72 1EA8     		add	r0, sp, #120
 10808 0b74 01F5F661 		add	r1, r1, #1968
 10809 0b78 FFF7FEFF 		bl	scopy
 10810              	.LVL1256:
2407:src/display.c **** 			if (j != 0) {
 10811              		.loc 1 2407 14 view .LVU3508
 10812 0b7c 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 10813              	.LVL1257:
2407:src/display.c **** 			if (j != 0) {
 10814              		.loc 1 2407 4 is_stmt 1 view .LVU3509
2408:src/display.c **** 				i = slen(buf);
 10815              		.loc 1 2408 4 view .LVU3510
2408:src/display.c **** 				i = slen(buf);
 10816              		.loc 1 2408 7 is_stmt 0 view .LVU3511
 10817 0b80 BBF1000F 		cmp	fp, #0
 10818 0b84 12D1     		bne	.L1093
2419:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10819              		.loc 1 2419 5 is_stmt 1 view .LVU3512
2419:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10820              		.loc 1 2419 8 is_stmt 0 view .LVU3513
 10821 0b86 BAF1000F 		cmp	r10, #0
 10822 0b8a 05D0     		beq	.L887
2420:src/display.c **** 					*bp++ = '\0';
 10823              		.loc 1 2420 6 is_stmt 1 view .LVU3514
 10824              	.LVL1258:
2420:src/display.c **** 					*bp++ = '\0';
ARM GAS  /tmp/ccQmbpxO.s 			page 299


 10825              		.loc 1 2420 26 is_stmt 0 view .LVU3515
 10826 0b8c 0AF1100A 		add	r10, r10, #16
2420:src/display.c **** 					*bp++ = '\0';
 10827              		.loc 1 2420 12 view .LVU3516
 10828 0b90 80F800A0 		strb	r10, [r0]
2421:src/display.c **** 				}
 10829              		.loc 1 2421 6 is_stmt 1 view .LVU3517
 10830              	.LVL1259:
2421:src/display.c **** 				}
 10831              		.loc 1 2421 12 is_stmt 0 view .LVU3518
 10832 0b94 80F801B0 		strb	fp, [r0, #1]
 10833              	.LVL1260:
 10834              	.L887:
2423:src/display.c **** 			}
 10835              		.loc 1 2423 5 is_stmt 1 view .LVU3519
 10836 0b98 1EA8     		add	r0, sp, #120
 10837 0b9a FFF7FEFF 		bl	set_status_right
 10838              	.LVL1261:
2456:src/display.c **** nostk:	show_flags();
 10839              		.loc 1 2456 2 view .LVU3520
2219:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10840              		.loc 1 2219 6 is_stmt 0 view .LVU3521
 10841 0b9e 0025     		movs	r5, #0
2456:src/display.c **** nostk:	show_flags();
 10842              		.loc 1 2456 2 view .LVU3522
 10843 0ba0 FFF7FEFF 		bl	show_stack
 10844              	.LVL1262:
2457:src/display.c **** 	if (!skip) {
 10845              		.loc 1 2457 8 is_stmt 1 view .LVU3523
 10846 0ba4 FFF7FEFF 		bl	show_flags
 10847              	.LVL1263:
2458:src/display.c **** 		if (State2.runmode) {
 10848              		.loc 1 2458 2 view .LVU3524
 10849 0ba8 FFF751BB 		b	.L816
 10850              	.LVL1264:
 10851              	.L1093:
2409:src/display.c **** 				j *= 6;
 10852              		.loc 1 2409 5 view .LVU3525
2409:src/display.c **** 				j *= 6;
 10853              		.loc 1 2409 9 is_stmt 0 view .LVU3526
 10854 0bac 1EA8     		add	r0, sp, #120
 10855              	.LVL1265:
2409:src/display.c **** 				j *= 6;
 10856              		.loc 1 2409 9 view .LVU3527
 10857 0bae FFF7FEFF 		bl	slen
 10858              	.LVL1266:
2410:src/display.c **** 				if ( i - j >= 12 ) {
 10859              		.loc 1 2410 5 is_stmt 1 view .LVU3528
2411:src/display.c **** 					buf[ (i - j) ] = '\0';
 10860              		.loc 1 2411 5 view .LVU3529
2410:src/display.c **** 				if ( i - j >= 12 ) {
 10861              		.loc 1 2410 7 is_stmt 0 view .LVU3530
 10862 0bb2 0BEB4B0B 		add	fp, fp, fp, lsl #1
 10863              	.LVL1267:
2411:src/display.c **** 					buf[ (i - j) ] = '\0';
 10864              		.loc 1 2411 12 view .LVU3531
 10865 0bb6 A0EB4B00 		sub	r0, r0, fp, lsl #1
ARM GAS  /tmp/ccQmbpxO.s 			page 300


 10866              	.LVL1268:
2411:src/display.c **** 					buf[ (i - j) ] = '\0';
 10867              		.loc 1 2411 8 view .LVU3532
 10868 0bba 0B28     		cmp	r0, #11
 10869 0bbc 7FF719AB 		ble	.L819
2412:src/display.c **** 					set_status_right(buf);
 10870              		.loc 1 2412 6 is_stmt 1 view .LVU3533
2412:src/display.c **** 					set_status_right(buf);
 10871              		.loc 1 2412 21 is_stmt 0 view .LVU3534
 10872 0bc0 28AB     		add	r3, sp, #160
 10873 0bc2 1A18     		adds	r2, r3, r0
 10874 0bc4 019B     		ldr	r3, [sp, #4]
 10875 0bc6 02F8283C 		strb	r3, [r2, #-40]
2413:src/display.c **** 				}
 10876              		.loc 1 2413 6 is_stmt 1 view .LVU3535
 10877 0bca 1EA8     		add	r0, sp, #120
 10878 0bcc FFF7FEFF 		bl	set_status_right
 10879              	.LVL1269:
2456:src/display.c **** nostk:	show_flags();
 10880              		.loc 1 2456 2 view .LVU3536
 10881 0bd0 FFF7FEFF 		bl	show_stack
 10882              	.LVL1270:
2457:src/display.c **** 	if (!skip) {
 10883              		.loc 1 2457 8 view .LVU3537
 10884 0bd4 FFF7FEFF 		bl	show_flags
 10885              	.LVL1271:
2458:src/display.c **** 		if (State2.runmode) {
 10886              		.loc 1 2458 2 view .LVU3538
 10887 0bd8 FFF739BB 		b	.L816
 10888              	.L1091:
2401:src/display.c **** 		} else if (State2.alphas) {
 10889              		.loc 1 2401 4 view .LVU3539
2401:src/display.c **** 		} else if (State2.alphas) {
 10890              		.loc 1 2401 46 is_stmt 0 view .LVU3540
 10891 0bdc 581E     		subs	r0, r3, #1
 10892 0bde FFF7FEFF 		bl	get_reg_n
 10893              	.LVL1272:
 10894              	.LBB563:
 10895              	.LBI563:
2550:src/display.c **** 	int glen = *graphic++;
 10896              		.loc 1 2550 13 is_stmt 1 view .LVU3541
 10897              	.LBB564:
2551:src/display.c **** 	int i, j;
 10898              		.loc 1 2551 2 view .LVU3542
2559:src/display.c **** #endif
 10899              		.loc 1 2559 15 is_stmt 0 view .LVU3543
 10900 0be2 5349     		ldr	r1, .L1104+32
2551:src/display.c **** 	int i, j;
 10901              		.loc 1 2551 6 view .LVU3544
 10902 0be4 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 10903              	.LVL1273:
2552:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10904              		.loc 1 2552 2 is_stmt 1 view .LVU3545
2559:src/display.c **** #endif
 10905              		.loc 1 2559 2 view .LVU3546
2559:src/display.c **** #endif
 10906              		.loc 1 2559 15 is_stmt 0 view .LVU3547
ARM GAS  /tmp/ccQmbpxO.s 			page 301


 10907 0be6 0123     		movs	r3, #1
 10908 0be8 0B70     		strb	r3, [r1]
2561:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10909              		.loc 1 2561 2 is_stmt 1 view .LVU3548
2561:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10910              		.loc 1 2561 5 is_stmt 0 view .LVU3549
 10911 0bea 3AB3     		cbz	r2, .L880
2562:src/display.c **** 
 10912              		.loc 1 2562 2 is_stmt 1 view .LVU3550
 10913              	.LVL1274:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10914              		.loc 1 2564 2 view .LVU3551
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10915              		.loc 1 2564 12 view .LVU3552
 10916 0bec C118     		adds	r1, r0, r3
 10917 0bee 0391     		str	r1, [sp, #12]
 10918 0bf0 2B2A     		cmp	r2, #43
 10919 0bf2 D4BF     		ite	le
 10920 0bf4 8918     		addle	r1, r1, r2
 10921 0bf6 2B31     		addgt	r1, r1, #43
 10922 0bf8 CDE90113 		strd	r1, r3, [sp, #4]
 10923 0bfc CDE90456 		strd	r5, r6, [sp, #16]
 10924              	.LVL1275:
 10925              	.L881:
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10926              		.loc 1 2565 13 view .LVU3553
 10927 0c00 029B     		ldr	r3, [sp, #8]
 10928 0c02 039E     		ldr	r6, [sp, #12]
 10929 0c04 03FA0BFA 		lsl	r10, r3, fp
 10930 0c08 0BF19405 		add	r5, fp, #148
 10931 0c0c 06E0     		b	.L884
 10932              	.LVL1276:
 10933              	.L1095:
 10934              	.LBB565:
 10935              	.LBB566:
 327:src/display.c **** 	else	clr_dot(n);
 10936              		.loc 1 327 10 is_stmt 0 view .LVU3554
 10937 0c0e FFF7FEFF 		bl	set_dot
 10938              	.LVL1277:
 10939              	.L883:
 327:src/display.c **** 	else	clr_dot(n);
 10940              		.loc 1 327 10 view .LVU3555
 10941              	.LBE566:
 10942              	.LBE565:
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10943              		.loc 1 2565 22 is_stmt 1 view .LVU3556
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10944              		.loc 1 2565 13 view .LVU3557
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10945              		.loc 1 2565 3 is_stmt 0 view .LVU3558
 10946 0c12 019B     		ldr	r3, [sp, #4]
 10947 0c14 9E42     		cmp	r6, r3
 10948 0c16 05F10605 		add	r5, r5, #6
 10949 0c1a 08D0     		beq	.L1094
 10950              	.LVL1278:
 10951              	.L884:
2570:src/display.c **** #endif
ARM GAS  /tmp/ccQmbpxO.s 			page 302


 10952              		.loc 1 2570 4 is_stmt 1 view .LVU3559
 10953              	.LBB569:
 10954              	.LBI565:
 326:src/display.c **** 	if (on)	set_dot(n);
 10955              		.loc 1 326 6 view .LVU3560
 10956              	.LBB567:
 327:src/display.c **** 	else	clr_dot(n);
 10957              		.loc 1 327 2 view .LVU3561
 327:src/display.c **** 	else	clr_dot(n);
 10958              		.loc 1 327 10 view .LVU3562
 328:src/display.c **** }
 10959              		.loc 1 328 7 view .LVU3563
 10960              	.LBE567:
 10961              	.LBE569:
2570:src/display.c **** #endif
 10962              		.loc 1 2570 35 is_stmt 0 view .LVU3564
 10963 0c1c 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 10964              	.LVL1279:
 10965              	.LBB570:
 10966              	.LBB568:
 327:src/display.c **** 	else	clr_dot(n);
 10967              		.loc 1 327 5 view .LVU3565
 10968 0c20 13EA0A0F 		tst	r3, r10
 327:src/display.c **** 	else	clr_dot(n);
 10969              		.loc 1 327 10 view .LVU3566
 10970 0c24 2846     		mov	r0, r5
 327:src/display.c **** 	else	clr_dot(n);
 10971              		.loc 1 327 5 view .LVU3567
 10972 0c26 F2D1     		bne	.L1095
 328:src/display.c **** }
 10973              		.loc 1 328 7 view .LVU3568
 10974 0c28 FFF7FEFF 		bl	clr_dot
 10975              	.LVL1280:
 10976 0c2c F1E7     		b	.L883
 10977              	.LVL1281:
 10978              	.L1094:
 328:src/display.c **** }
 10979              		.loc 1 328 7 view .LVU3569
 10980              	.LBE568:
 10981              	.LBE570:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10982              		.loc 1 2564 17 is_stmt 1 view .LVU3570
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10983              		.loc 1 2564 18 is_stmt 0 view .LVU3571
 10984 0c2e 0BF1010B 		add	fp, fp, #1
 10985              	.LVL1282:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10986              		.loc 1 2564 12 is_stmt 1 view .LVU3572
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10987              		.loc 1 2564 2 is_stmt 0 view .LVU3573
 10988 0c32 BBF1060F 		cmp	fp, #6
 10989 0c36 E3D1     		bne	.L881
 10990 0c38 DDE90456 		ldrd	r5, r6, [sp, #16]
 10991              	.LVL1283:
 10992              	.L880:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10993              		.loc 1 2564 2 view .LVU3574
ARM GAS  /tmp/ccQmbpxO.s 			page 303


 10994              	.LBE564:
 10995              	.LBE563:
2456:src/display.c **** nostk:	show_flags();
 10996              		.loc 1 2456 2 is_stmt 1 view .LVU3575
 10997 0c3c FFF7FEFF 		bl	show_stack
 10998              	.LVL1284:
2457:src/display.c **** 	if (!skip) {
 10999              		.loc 1 2457 8 view .LVU3576
 11000 0c40 FFF7FEFF 		bl	show_flags
 11001              	.LVL1285:
2458:src/display.c **** 		if (State2.runmode) {
 11002              		.loc 1 2458 2 view .LVU3577
 11003 0c44 FFF703BB 		b	.L816
 11004              	.LVL1286:
 11005              	.L871:
 11006              	.LBB571:
 11007              	.LBB556:
2148:src/display.c **** 				n -= 100;
 11008              		.loc 1 2148 5 view .LVU3578
2148:src/display.c **** 				n -= 100;
 11009              		.loc 1 2148 11 is_stmt 0 view .LVU3579
 11010 0c48 3123     		movs	r3, #49
 11011 0c4a 4370     		strb	r3, [r0, #1]
2149:src/display.c **** 			}
 11012              		.loc 1 2149 5 is_stmt 1 view .LVU3580
2149:src/display.c **** 			}
 11013              		.loc 1 2149 7 is_stmt 0 view .LVU3581
 11014 0c4c A8F16408 		sub	r8, r8, #100
 11015              	.LVL1287:
2148:src/display.c **** 				n -= 100;
 11016              		.loc 1 2148 8 view .LVU3582
 11017 0c50 0230     		adds	r0, r0, #2
 11018              	.LVL1288:
 11019              	.L870:
2152:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 11020              		.loc 1 2152 3 is_stmt 1 view .LVU3583
2152:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 11021              		.loc 1 2152 6 is_stmt 0 view .LVU3584
 11022 0c52 B8F1630F 		cmp	r8, #99
 11023 0c56 7FF729AF 		ble	.L872
2155:src/display.c **** 		set_status(buf);
 11024              		.loc 1 2155 4 is_stmt 1 view .LVU3585
 11025              	.LVL1289:
2155:src/display.c **** 		set_status(buf);
 11026              		.loc 1 2155 20 is_stmt 0 view .LVU3586
 11027 0c5a 364B     		ldr	r3, .L1104+36
 11028 0c5c 9844     		add	r8, r8, r3
 11029              	.LVL1290:
2155:src/display.c **** 		set_status(buf);
 11030              		.loc 1 2155 10 view .LVU3587
 11031 0c5e 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11032 0c62 0370     		strb	r3, [r0]
 11033 0c64 26E7     		b	.L874
 11034              	.LVL1291:
 11035              	.L1086:
2155:src/display.c **** 		set_status(buf);
 11036              		.loc 1 2155 10 view .LVU3588
ARM GAS  /tmp/ccQmbpxO.s 			page 304


 11037              	.LBE556:
 11038              	.LBE571:
 11039              	.LBB572:
 11040              	.LBB552:
 11041              	.LBB550:
2037:src/display.c **** 			end = regK_idx;
 11042              		.loc 1 2037 4 is_stmt 1 view .LVU3589
2038:src/display.c **** 			start = 3;
 11043              		.loc 1 2038 4 view .LVU3590
2039:src/display.c **** 			group = 4;
 11044              		.loc 1 2039 4 view .LVU3591
2040:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11045              		.loc 1 2040 4 view .LVU3592
2041:src/display.c **** 		}
 11046              		.loc 1 2041 4 view .LVU3593
 11047 0c66 3448     		ldr	r0, .L1104+40
 11048 0c68 FFF7FEFF 		bl	set_status
 11049              	.LVL1292:
 11050 0c6c 4FF0070A 		mov	r10, #7
 11051 0c70 0822     		movs	r2, #8
 11052 0c72 4FF02408 		mov	r8, #36
 11053              	.LVL1293:
2041:src/display.c **** 		}
 11054              		.loc 1 2041 4 is_stmt 0 view .LVU3594
 11055 0c76 2220     		movs	r0, #34
2039:src/display.c **** 			group = 4;
 11056              		.loc 1 2039 10 view .LVU3595
 11057 0c78 4FF0030B 		mov	fp, #3
2040:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11058              		.loc 1 2040 10 view .LVU3596
 11059 0c7c 0426     		movs	r6, #4
2038:src/display.c **** 			start = 3;
 11060              		.loc 1 2038 8 view .LVU3597
 11061 0c7e 4FF06F09 		mov	r9, #111
 11062              	.LVL1294:
2037:src/display.c **** 			end = regK_idx;
 11063              		.loc 1 2037 9 view .LVU3598
 11064 0c82 6427     		movs	r7, #100
 11065              	.LVL1295:
2037:src/display.c **** 			end = regK_idx;
 11066              		.loc 1 2037 9 view .LVU3599
 11067 0c84 00E6     		b	.L851
 11068              	.LVL1296:
 11069              	.L1083:
2037:src/display.c **** 			end = regK_idx;
 11070              		.loc 1 2037 9 view .LVU3600
 11071              	.LBE550:
1997:src/display.c **** 		p = num_arg(buf, free_mem());
 11072              		.loc 1 1997 3 is_stmt 1 view .LVU3601
 11073 0c86 2D48     		ldr	r0, .L1104+44
 11074 0c88 214F     		ldr	r7, .L1104
 11075              	.LVL1297:
1997:src/display.c **** 		p = num_arg(buf, free_mem());
 11076              		.loc 1 1997 3 is_stmt 0 view .LVU3602
 11077 0c8a FFF7FEFF 		bl	set_status
 11078              	.LVL1298:
1998:src/display.c **** 		p = scopy(p, " , FL. ");
ARM GAS  /tmp/ccQmbpxO.s 			page 305


 11079              		.loc 1 1998 3 is_stmt 1 view .LVU3603
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11080              		.loc 1 1998 20 is_stmt 0 view .LVU3604
 11081 0c8e FFF7FEFF 		bl	free_mem
 11082              	.LVL1299:
 11083 0c92 0146     		mov	r1, r0
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11084              		.loc 1 1998 7 view .LVU3605
 11085 0c94 15A8     		add	r0, sp, #84
 11086              	.LVL1300:
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11087              		.loc 1 1998 7 view .LVU3606
 11088 0c96 FFF7FEFF 		bl	num_arg
 11089              	.LVL1301:
1999:src/display.c **** 		p = num_arg(p, free_flash());
 11090              		.loc 1 1999 3 is_stmt 1 view .LVU3607
1999:src/display.c **** 		p = num_arg(p, free_flash());
 11091              		.loc 1 1999 7 is_stmt 0 view .LVU3608
 11092 0c9a 2949     		ldr	r1, .L1104+48
 11093 0c9c FFF7FEFF 		bl	scopy
 11094              	.LVL1302:
1999:src/display.c **** 		p = num_arg(p, free_flash());
 11095              		.loc 1 1999 7 view .LVU3609
 11096 0ca0 0646     		mov	r6, r0
 11097              	.LVL1303:
2000:src/display.c **** 		*p = '\0';
 11098              		.loc 1 2000 3 is_stmt 1 view .LVU3610
2000:src/display.c **** 		*p = '\0';
 11099              		.loc 1 2000 18 is_stmt 0 view .LVU3611
 11100 0ca2 FFF7FEFF 		bl	free_flash
 11101              	.LVL1304:
2000:src/display.c **** 		*p = '\0';
 11102              		.loc 1 2000 18 view .LVU3612
 11103 0ca6 0146     		mov	r1, r0
2000:src/display.c **** 		*p = '\0';
 11104              		.loc 1 2000 7 view .LVU3613
 11105 0ca8 3046     		mov	r0, r6
 11106 0caa FFF7FEFF 		bl	num_arg
 11107              	.LVL1305:
 11108 0cae 0346     		mov	r3, r0
 11109              	.LVL1306:
2001:src/display.c **** 		set_digits_string(buf, 0);
 11110              		.loc 1 2001 3 is_stmt 1 view .LVU3614
2001:src/display.c **** 		set_digits_string(buf, 0);
 11111              		.loc 1 2001 6 is_stmt 0 view .LVU3615
 11112 0cb0 0021     		movs	r1, #0
2002:src/display.c **** 	}
 11113              		.loc 1 2002 3 view .LVU3616
 11114 0cb2 15A8     		add	r0, sp, #84
 11115              	.LVL1307:
2001:src/display.c **** 		set_digits_string(buf, 0);
 11116              		.loc 1 2001 6 view .LVU3617
 11117 0cb4 1970     		strb	r1, [r3]
2002:src/display.c **** 	}
 11118              		.loc 1 2002 3 is_stmt 1 view .LVU3618
 11119 0cb6 FFF7FEFF 		bl	set_digits_string
 11120              	.LVL1308:
ARM GAS  /tmp/ccQmbpxO.s 			page 306


2002:src/display.c **** 	}
 11121              		.loc 1 2002 3 is_stmt 0 view .LVU3619
 11122 0cba 1EE6     		b	.L846
 11123              	.LVL1309:
 11124              	.L1085:
 11125              	.LBB551:
2027:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11126              		.loc 1 2027 4 is_stmt 1 view .LVU3620
2027:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11127              		.loc 1 2027 9 is_stmt 0 view .LVU3621
 11128 0cbc 07EB8707 		add	r7, r7, r7, lsl #2
 11129              	.LVL1310:
2027:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11130              		.loc 1 2027 9 view .LVU3622
 11131 0cc0 7F00     		lsls	r7, r7, #1
 11132              	.LVL1311:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11133              		.loc 1 2028 4 is_stmt 1 view .LVU3623
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11134              		.loc 1 2028 26 is_stmt 0 view .LVU3624
 11135 0cc2 462F     		cmp	r7, #70
2029:src/display.c **** 			p = num_arg_0(p, base, 2);
 11136              		.loc 1 2029 8 view .LVU3625
 11137 0cc4 1F49     		ldr	r1, .L1104+52
 11138 0cc6 15A8     		add	r0, sp, #84
 11139              	.LVL1312:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11140              		.loc 1 2028 26 view .LVU3626
 11141 0cc8 B946     		mov	r9, r7
 11142              	.LVL1313:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11143              		.loc 1 2028 26 view .LVU3627
 11144 0cca A8BF     		it	ge
 11145 0ccc 4FF04609 		movge	r9, #70
2029:src/display.c **** 			p = num_arg_0(p, base, 2);
 11146              		.loc 1 2029 8 view .LVU3628
 11147 0cd0 FFF7FEFF 		bl	scopy
 11148              	.LVL1314:
2030:src/display.c **** 			*p++ = '-';
 11149              		.loc 1 2030 8 view .LVU3629
 11150 0cd4 3946     		mov	r1, r7
 11151 0cd6 0222     		movs	r2, #2
 11152 0cd8 FFF7FEFF 		bl	num_arg_0
 11153              	.LVL1315:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11154              		.loc 1 2028 8 view .LVU3630
 11155 0cdc 09F11D09 		add	r9, r9, #29
 11156              	.LVL1316:
2029:src/display.c **** 			p = num_arg_0(p, base, 2);
 11157              		.loc 1 2029 4 is_stmt 1 view .LVU3631
2030:src/display.c **** 			*p++ = '-';
 11158              		.loc 1 2030 4 view .LVU3632
2031:src/display.c **** 			p = num_arg_0(p, end, 2);
 11159              		.loc 1 2031 4 view .LVU3633
2031:src/display.c **** 			p = num_arg_0(p, end, 2);
 11160              		.loc 1 2031 9 is_stmt 0 view .LVU3634
 11161 0ce0 2D23     		movs	r3, #45
ARM GAS  /tmp/ccQmbpxO.s 			page 307


 11162 0ce2 00F8013B 		strb	r3, [r0], #1
 11163              	.LVL1317:
2032:src/display.c **** 			*p = '\0';
 11164              		.loc 1 2032 4 is_stmt 1 view .LVU3635
2032:src/display.c **** 			*p = '\0';
 11165              		.loc 1 2032 8 is_stmt 0 view .LVU3636
 11166 0ce6 4946     		mov	r1, r9
 11167 0ce8 0222     		movs	r2, #2
 11168 0cea FFF7FEFF 		bl	num_arg_0
 11169              	.LVL1318:
2032:src/display.c **** 			*p = '\0';
 11170              		.loc 1 2032 8 view .LVU3637
 11171 0cee 0246     		mov	r2, r0
 11172              	.LVL1319:
2033:src/display.c **** 			set_status(buf);
 11173              		.loc 1 2033 4 is_stmt 1 view .LVU3638
2033:src/display.c **** 			set_status(buf);
 11174              		.loc 1 2033 7 is_stmt 0 view .LVU3639
 11175 0cf0 4FF0000B 		mov	fp, #0
2034:src/display.c **** 		}
 11176              		.loc 1 2034 4 view .LVU3640
 11177 0cf4 15A8     		add	r0, sp, #84
 11178              	.LVL1320:
2033:src/display.c **** 			set_status(buf);
 11179              		.loc 1 2033 7 view .LVU3641
 11180 0cf6 82F800B0 		strb	fp, [r2]
2034:src/display.c **** 		}
 11181              		.loc 1 2034 4 is_stmt 1 view .LVU3642
 11182 0cfa 4FF00A0A 		mov	r10, #10
 11183 0cfe FFF7FEFF 		bl	set_status
 11184              	.LVL1321:
2023:src/display.c **** 		int start = 0;
 11185              		.loc 1 2023 7 is_stmt 0 view .LVU3643
 11186 0d02 5646     		mov	r6, r10
 11187 0d04 0222     		movs	r2, #2
 11188 0d06 4FF00908 		mov	r8, #9
 11189              	.LVL1322:
2023:src/display.c **** 		int start = 0;
 11190              		.loc 1 2023 7 view .LVU3644
 11191 0d0a 0720     		movs	r0, #7
 11192 0d0c BCE5     		b	.L851
 11193              	.L1105:
 11194 0d0e 00BF     		.align	2
 11195              	.L1104:
 11196 0d10 00000000 		.word	main_ram
 11197 0d14 00000000 		.word	DispMsg
 11198 0d18 A0000000 		.word	.LC40
 11199 0d1c 40000000 		.word	.LC30
 11200 0d20 A8000000 		.word	.LC41
 11201 0d24 00000000 		.word	monfuncs
 11202 0d28 00000000 		.word	Ctx
 11203 0d2c 00000000 		.word	LastDisplayedNumber
 11204 0d30 00000000 		.word	forceDispPlot
 11205 0d34 BC000000 		.word	.LC27
 11206 0d38 7C000000 		.word	.LC37
 11207 0d3c 4C000000 		.word	.LC31
 11208 0d40 54000000 		.word	.LC32
ARM GAS  /tmp/ccQmbpxO.s 			page 308


 11209 0d44 78000000 		.word	.LC36
 11210 0d48 00000000 		.word	DispPlot
 11211              	.LVL1323:
 11212              	.L1084:
2023:src/display.c **** 		int start = 0;
 11213              		.loc 1 2023 7 view .LVU3645
 11214              	.LBE551:
2006:src/display.c **** 		if (SizeStatRegs)
 11215              		.loc 1 2006 3 is_stmt 1 view .LVU3646
2006:src/display.c **** 		if (SizeStatRegs)
 11216              		.loc 1 2006 7 is_stmt 0 view .LVU3647
 11217 0d4c 15AE     		add	r6, sp, #84
 11218              	.LVL1324:
2006:src/display.c **** 		if (SizeStatRegs)
 11219              		.loc 1 2006 7 view .LVU3648
 11220 0d4e 1849     		ldr	r1, .L1106
 11221 0d50 3046     		mov	r0, r6
 11222 0d52 FFF7FEFF 		bl	scopy
 11223              	.LVL1325:
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11224              		.loc 1 2007 7 view .LVU3649
 11225 0d56 174A     		ldr	r2, .L1106+4
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11226              		.loc 1 2007 6 view .LVU3650
 11227 0d58 1268     		ldr	r2, [r2]
2006:src/display.c **** 		if (SizeStatRegs)
 11228              		.loc 1 2006 7 view .LVU3651
 11229 0d5a 0346     		mov	r3, r0
 11230              	.LVL1326:
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11231              		.loc 1 2007 3 is_stmt 1 view .LVU3652
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11232              		.loc 1 2007 6 is_stmt 0 view .LVU3653
 11233 0d5c BAB9     		cbnz	r2, .L1096
 11234              	.L848:
2009:src/display.c **** 		set_status(buf);
 11235              		.loc 1 2009 3 is_stmt 1 view .LVU3654
2009:src/display.c **** 		set_status(buf);
 11236              		.loc 1 2009 6 is_stmt 0 view .LVU3655
 11237 0d5e 0022     		movs	r2, #0
 11238 0d60 1A70     		strb	r2, [r3]
2010:src/display.c **** 
 11239              		.loc 1 2010 3 is_stmt 1 view .LVU3656
 11240 0d62 3046     		mov	r0, r6
 11241              	.LVL1327:
2010:src/display.c **** 
 11242              		.loc 1 2010 3 is_stmt 0 view .LVU3657
 11243 0d64 FFF7FEFF 		bl	set_status
 11244              	.LVL1328:
2013:src/display.c **** 		if (LocalRegs < 0) {
 11245              		.loc 1 2013 3 is_stmt 1 view .LVU3658
2013:src/display.c **** 		if (LocalRegs < 0) {
 11246              		.loc 1 2013 7 is_stmt 0 view .LVU3659
 11247 0d68 FFF7FEFF 		bl	global_regs
 11248              	.LVL1329:
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11249              		.loc 1 2014 7 view .LVU3660
ARM GAS  /tmp/ccQmbpxO.s 			page 309


 11250 0d6c 124F     		ldr	r7, .L1106+8
 11251              	.LVL1330:
2013:src/display.c **** 		if (LocalRegs < 0) {
 11252              		.loc 1 2013 7 view .LVU3661
 11253 0d6e 0146     		mov	r1, r0
 11254 0d70 3046     		mov	r0, r6
 11255 0d72 FFF7FEFF 		bl	num_arg
 11256              	.LVL1331:
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11257              		.loc 1 2014 7 view .LVU3662
 11258 0d76 3A68     		ldr	r2, [r7]
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11259              		.loc 1 2014 6 view .LVU3663
 11260 0d78 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11261 0d7c 002A     		cmp	r2, #0
2013:src/display.c **** 		if (LocalRegs < 0) {
 11262              		.loc 1 2013 7 view .LVU3664
 11263 0d7e 0346     		mov	r3, r0
 11264              	.LVL1332:
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11265              		.loc 1 2014 3 is_stmt 1 view .LVU3665
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11266              		.loc 1 2014 6 is_stmt 0 view .LVU3666
 11267 0d80 0ADB     		blt	.L1097
 11268              	.LVL1333:
 11269              	.L849:
2018:src/display.c **** 		set_digits_string(buf, 0);
 11270              		.loc 1 2018 3 is_stmt 1 view .LVU3667
2018:src/display.c **** 		set_digits_string(buf, 0);
 11271              		.loc 1 2018 6 is_stmt 0 view .LVU3668
 11272 0d82 0021     		movs	r1, #0
2019:src/display.c **** 	} else {
 11273              		.loc 1 2019 3 view .LVU3669
 11274 0d84 3046     		mov	r0, r6
 11275              	.LVL1334:
2018:src/display.c **** 		set_digits_string(buf, 0);
 11276              		.loc 1 2018 6 view .LVU3670
 11277 0d86 1970     		strb	r1, [r3]
2019:src/display.c **** 	} else {
 11278              		.loc 1 2019 3 is_stmt 1 view .LVU3671
 11279 0d88 FFF7FEFF 		bl	set_digits_string
 11280              	.LVL1335:
2019:src/display.c **** 	} else {
 11281              		.loc 1 2019 3 is_stmt 0 view .LVU3672
 11282 0d8c B5E5     		b	.L846
 11283              	.LVL1336:
 11284              	.L1096:
2008:src/display.c **** 		*p = '\0';
 11285              		.loc 1 2008 4 is_stmt 1 view .LVU3673
2008:src/display.c **** 		*p = '\0';
 11286              		.loc 1 2008 8 is_stmt 0 view .LVU3674
 11287 0d8e 0B49     		ldr	r1, .L1106+12
 11288 0d90 FFF7FEFF 		bl	scopy
 11289              	.LVL1337:
2008:src/display.c **** 		*p = '\0';
 11290              		.loc 1 2008 8 view .LVU3675
 11291 0d94 0346     		mov	r3, r0
ARM GAS  /tmp/ccQmbpxO.s 			page 310


 11292              	.LVL1338:
2008:src/display.c **** 		*p = '\0';
 11293              		.loc 1 2008 8 view .LVU3676
 11294 0d96 E2E7     		b	.L848
 11295              	.LVL1339:
 11296              	.L1097:
2015:src/display.c **** 			p = num_arg(p, local_regs());
 11297              		.loc 1 2015 4 is_stmt 1 view .LVU3677
2015:src/display.c **** 			p = num_arg(p, local_regs());
 11298              		.loc 1 2015 8 is_stmt 0 view .LVU3678
 11299 0d98 0949     		ldr	r1, .L1106+16
 11300 0d9a FFF7FEFF 		bl	scopy
 11301              	.LVL1340:
2015:src/display.c **** 			p = num_arg(p, local_regs());
 11302              		.loc 1 2015 8 view .LVU3679
 11303 0d9e 8046     		mov	r8, r0
 11304              	.LVL1341:
2016:src/display.c **** 		}
 11305              		.loc 1 2016 4 is_stmt 1 view .LVU3680
2016:src/display.c **** 		}
 11306              		.loc 1 2016 19 is_stmt 0 view .LVU3681
 11307 0da0 FFF7FEFF 		bl	local_regs
 11308              	.LVL1342:
2016:src/display.c **** 		}
 11309              		.loc 1 2016 19 view .LVU3682
 11310 0da4 0146     		mov	r1, r0
2016:src/display.c **** 		}
 11311              		.loc 1 2016 8 view .LVU3683
 11312 0da6 4046     		mov	r0, r8
 11313 0da8 FFF7FEFF 		bl	num_arg
 11314              	.LVL1343:
 11315 0dac 0346     		mov	r3, r0
 11316              	.LVL1344:
2016:src/display.c **** 		}
 11317              		.loc 1 2016 8 view .LVU3684
 11318 0dae E8E7     		b	.L849
 11319              	.L1107:
 11320              		.align	2
 11321              	.L1106:
 11322 0db0 5C000000 		.word	.LC33
 11323 0db4 00000000 		.word	SizeStatRegs
 11324 0db8 00000000 		.word	main_ram
 11325 0dbc 64000000 		.word	.LC34
 11326 0dc0 6C000000 		.word	.LC35
 11327              	.LBE552:
 11328              	.LBE572:
 11329              		.cfi_endproc
 11330              	.LFE34:
 11332              		.section	.text.frozen_display,"ax",%progbits
 11333              		.align	1
 11334              		.p2align 2,,3
 11335              		.global	frozen_display
 11336              		.syntax unified
 11337              		.thumb
 11338              		.thumb_func
 11339              		.fpu fpv4-sp-d16
 11341              	frozen_display:
ARM GAS  /tmp/ccQmbpxO.s 			page 311


 11342              	.LFB35:
2544:src/display.c **** 	State2.disp_freeze = 0;
 11343              		.loc 1 2544 1 is_stmt 1 view -0
 11344              		.cfi_startproc
 11345              		@ args = 0, pretend = 0, frame = 0
 11346              		@ frame_needed = 0, uses_anonymous_args = 0
2545:src/display.c **** 	display();
 11347              		.loc 1 2545 2 view .LVU3686
2544:src/display.c **** 	State2.disp_freeze = 0;
 11348              		.loc 1 2544 1 is_stmt 0 view .LVU3687
 11349 0000 10B5     		push	{r4, lr}
 11350              		.cfi_def_cfa_offset 8
 11351              		.cfi_offset 4, -8
 11352              		.cfi_offset 14, -4
2545:src/display.c **** 	display();
 11353              		.loc 1 2545 21 view .LVU3688
 11354 0002 064C     		ldr	r4, .L1110
 11355 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11356 0006 6FF30413 		bfc	r3, #4, #1
 11357 000a E375     		strb	r3, [r4, #23]
2546:src/display.c **** 	State2.disp_freeze = 1;
 11358              		.loc 1 2546 2 is_stmt 1 view .LVU3689
 11359 000c FFF7FEFF 		bl	display
 11360              	.LVL1345:
2547:src/display.c **** }
 11361              		.loc 1 2547 2 view .LVU3690
2547:src/display.c **** }
 11362              		.loc 1 2547 21 is_stmt 0 view .LVU3691
 11363 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11364 0012 43F01003 		orr	r3, r3, #16
 11365 0016 E375     		strb	r3, [r4, #23]
2548:src/display.c **** 
 11366              		.loc 1 2548 1 view .LVU3692
 11367 0018 10BD     		pop	{r4, pc}
 11368              	.L1111:
 11369 001a 00BF     		.align	2
 11370              	.L1110:
 11371 001c 00000000 		.word	StateWhileOn
 11372              		.cfi_endproc
 11373              	.LFE35:
 11375              		.section	.text.message,"ax",%progbits
 11376              		.align	1
 11377              		.p2align 2,,3
 11378              		.global	message
 11379              		.syntax unified
 11380              		.thumb
 11381              		.thumb_func
 11382              		.fpu fpv4-sp-d16
 11384              	message:
 11385              	.LVL1346:
 11386              	.LFB41:
2740:src/display.c **** 	State2.disp_freeze = 0;
 11387              		.loc 1 2740 1 is_stmt 1 view -0
 11388              		.cfi_startproc
 11389              		@ args = 0, pretend = 0, frame = 0
 11390              		@ frame_needed = 0, uses_anonymous_args = 0
2741:src/display.c **** 	State2.disp_small = 0;
ARM GAS  /tmp/ccQmbpxO.s 			page 312


 11391              		.loc 1 2741 2 view .LVU3694
2742:src/display.c **** 	WasDataEntry = 0;
 11392              		.loc 1 2742 2 view .LVU3695
2742:src/display.c **** 	WasDataEntry = 0;
 11393              		.loc 1 2742 20 is_stmt 0 view .LVU3696
 11394 0000 174A     		ldr	r2, .L1122
2740:src/display.c **** 	State2.disp_freeze = 0;
 11395              		.loc 1 2740 1 view .LVU3697
 11396 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11397              		.cfi_def_cfa_offset 24
 11398              		.cfi_offset 3, -24
 11399              		.cfi_offset 4, -20
 11400              		.cfi_offset 5, -16
 11401              		.cfi_offset 6, -12
 11402              		.cfi_offset 7, -8
 11403              		.cfi_offset 14, -4
2742:src/display.c **** 	WasDataEntry = 0;
 11404              		.loc 1 2742 20 view .LVU3698
 11405 0004 D38A     		ldrh	r3, [r2, #22]
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11406              		.loc 1 2743 15 view .LVU3699
 11407 0006 174E     		ldr	r6, .L1122+4
2742:src/display.c **** 	WasDataEntry = 0;
 11408              		.loc 1 2742 20 view .LVU3700
 11409 0008 23F48453 		bic	r3, r3, #4224
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11410              		.loc 1 2743 15 view .LVU3701
 11411 000c 0027     		movs	r7, #0
2742:src/display.c **** 	WasDataEntry = 0;
 11412              		.loc 1 2742 20 view .LVU3702
 11413 000e D382     		strh	r3, [r2, #22]	@ movhi
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11414              		.loc 1 2743 2 is_stmt 1 view .LVU3703
2744:src/display.c **** 		// Complete redraw necessary
 11415              		.loc 1 2744 5 is_stmt 0 view .LVU3704
 11416 0010 9B05     		lsls	r3, r3, #22
2740:src/display.c **** 	State2.disp_freeze = 0;
 11417              		.loc 1 2740 1 view .LVU3705
 11418 0012 0546     		mov	r5, r0
 11419 0014 0C46     		mov	r4, r1
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11420              		.loc 1 2743 15 view .LVU3706
 11421 0016 3760     		str	r7, [r6]
2744:src/display.c **** 		// Complete redraw necessary
 11422              		.loc 1 2744 2 is_stmt 1 view .LVU3707
2744:src/display.c **** 		// Complete redraw necessary
 11423              		.loc 1 2744 5 is_stmt 0 view .LVU3708
 11424 0018 12D5     		bpl	.L1113
2744:src/display.c **** 		// Complete redraw necessary
 11425              		.loc 1 2744 27 discriminator 1 view .LVU3709
 11426 001a D1B1     		cbz	r1, .L1121
 11427              	.L1114:
2751:src/display.c **** 			ShowRPN = 0;
 11428              		.loc 1 2751 4 is_stmt 1 view .LVU3710
 11429 001c FFF7FEFF 		bl	reset_disp
 11430              	.LVL1347:
2752:src/display.c **** 			set_annunciators();
ARM GAS  /tmp/ccQmbpxO.s 			page 313


 11431              		.loc 1 2752 4 view .LVU3711
2752:src/display.c **** 			set_annunciators();
 11432              		.loc 1 2752 12 is_stmt 0 view .LVU3712
 11433 0020 114B     		ldr	r3, .L1122+8
 11434 0022 0026     		movs	r6, #0
 11435 0024 1E60     		str	r6, [r3]
2753:src/display.c **** 			set_digits_string( str2, 0 );
 11436              		.loc 1 2753 4 is_stmt 1 view .LVU3713
 11437 0026 FFF7FEFF 		bl	set_annunciators
 11438              	.LVL1348:
2754:src/display.c **** 		}
 11439              		.loc 1 2754 4 view .LVU3714
 11440 002a 3146     		mov	r1, r6
 11441 002c 2046     		mov	r0, r4
 11442 002e FFF7FEFF 		bl	set_digits_string
 11443              	.LVL1349:
2756:src/display.c **** 		finish_display();
 11444              		.loc 1 2756 3 view .LVU3715
 11445 0032 2846     		mov	r0, r5
 11446 0034 FFF7FEFF 		bl	set_status
 11447              	.LVL1350:
2757:src/display.c **** 	}
 11448              		.loc 1 2757 3 view .LVU3716
2759:src/display.c **** 
 11449              		.loc 1 2759 1 is_stmt 0 view .LVU3717
 11450 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11451              		.cfi_remember_state
 11452              		.cfi_restore 14
 11453              		.cfi_restore 7
 11454              		.cfi_restore 6
 11455              		.cfi_restore 5
 11456              		.cfi_restore 4
 11457              		.cfi_restore 3
 11458              		.cfi_def_cfa_offset 0
 11459              	.LVL1351:
2757:src/display.c **** 	}
 11460              		.loc 1 2757 3 view .LVU3718
 11461 003c FFF7FEBF 		b	finish_display
 11462              	.LVL1352:
 11463              	.L1113:
 11464              		.cfi_restore_state
2750:src/display.c **** 			reset_disp();
 11465              		.loc 1 2750 3 is_stmt 1 view .LVU3719
2750:src/display.c **** 			reset_disp();
 11466              		.loc 1 2750 6 is_stmt 0 view .LVU3720
 11467 0040 0029     		cmp	r1, #0
 11468 0042 EBD1     		bne	.L1114
2756:src/display.c **** 		finish_display();
 11469              		.loc 1 2756 3 is_stmt 1 view .LVU3721
 11470 0044 2846     		mov	r0, r5
 11471              	.LVL1353:
2756:src/display.c **** 		finish_display();
 11472              		.loc 1 2756 3 is_stmt 0 view .LVU3722
 11473 0046 FFF7FEFF 		bl	set_status
 11474              	.LVL1354:
2757:src/display.c **** 	}
 11475              		.loc 1 2757 3 is_stmt 1 view .LVU3723
ARM GAS  /tmp/ccQmbpxO.s 			page 314


2759:src/display.c **** 
 11476              		.loc 1 2759 1 is_stmt 0 view .LVU3724
 11477 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11478              		.cfi_remember_state
 11479              		.cfi_restore 14
 11480              		.cfi_restore 7
 11481              		.cfi_restore 6
 11482              		.cfi_restore 5
 11483              		.cfi_restore 4
 11484              		.cfi_restore 3
 11485              		.cfi_def_cfa_offset 0
 11486              	.LVL1355:
2757:src/display.c **** 	}
 11487              		.loc 1 2757 3 view .LVU3725
 11488 004e FFF7FEBF 		b	finish_display
 11489              	.LVL1356:
 11490              	.L1121:
 11491              		.cfi_restore_state
2746:src/display.c **** 		display();
 11492              		.loc 1 2746 3 is_stmt 1 view .LVU3726
2746:src/display.c **** 		display();
 11493              		.loc 1 2746 11 is_stmt 0 view .LVU3727
 11494 0052 064B     		ldr	r3, .L1122+12
 11495 0054 1860     		str	r0, [r3]
2747:src/display.c **** 	}
 11496              		.loc 1 2747 3 is_stmt 1 view .LVU3728
2759:src/display.c **** 
 11497              		.loc 1 2759 1 is_stmt 0 view .LVU3729
 11498 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11499              		.cfi_restore 14
 11500              		.cfi_restore 7
 11501              		.cfi_restore 6
 11502              		.cfi_restore 5
 11503              		.cfi_restore 4
 11504              		.cfi_restore 3
 11505              		.cfi_def_cfa_offset 0
2747:src/display.c **** 	}
 11506              		.loc 1 2747 3 view .LVU3730
 11507 005a FFF7FEBF 		b	display
 11508              	.LVL1357:
 11509              	.L1123:
2747:src/display.c **** 	}
 11510              		.loc 1 2747 3 view .LVU3731
 11511 005e 00BF     		.align	2
 11512              	.L1122:
 11513 0060 00000000 		.word	StateWhileOn
 11514 0064 00000000 		.word	WasDataEntry
 11515 0068 00000000 		.word	ShowRPN
 11516 006c 00000000 		.word	DispMsg
 11517              		.cfi_endproc
 11518              	.LFE41:
 11520              		.section	.text.error_message,"ax",%progbits
 11521              		.align	1
 11522              		.p2align 2,,3
 11523              		.global	error_message
 11524              		.syntax unified
 11525              		.thumb
ARM GAS  /tmp/ccQmbpxO.s 			page 315


 11526              		.thumb_func
 11527              		.fpu fpv4-sp-d16
 11529              	error_message:
 11530              	.LVL1358:
 11531              	.LFB1:
 121:src/display.c **** #define MSG1(top) top "\0"
 11532              		.loc 1 121 1 is_stmt 1 view -0
 11533              		.cfi_startproc
 11534              		@ args = 0, pretend = 0, frame = 0
 11535              		@ frame_needed = 0, uses_anonymous_args = 0
 126:src/display.c **** 	{
 11536              		.loc 1 126 2 view .LVU3733
 184:src/display.c **** 	{
 11537              		.loc 1 184 2 view .LVU3734
 219:src/display.c **** 		const char *p = error_table[e];
 11538              		.loc 1 219 2 view .LVU3735
 121:src/display.c **** #define MSG1(top) top "\0"
 11539              		.loc 1 121 1 is_stmt 0 view .LVU3736
 11540 0000 38B5     		push	{r3, r4, r5, lr}
 11541              		.cfi_def_cfa_offset 16
 11542              		.cfi_offset 3, -16
 11543              		.cfi_offset 4, -12
 11544              		.cfi_offset 5, -8
 11545              		.cfi_offset 14, -4
 219:src/display.c **** 		const char *p = error_table[e];
 11546              		.loc 1 219 20 view .LVU3737
 11547 0002 1A4B     		ldr	r3, .L1135
 11548 0004 1B68     		ldr	r3, [r3]
 11549 0006 0343     		orrs	r3, r0, r3
 11550 0008 2CD0     		beq	.L1124
 11551              	.LBB573:
 220:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11552              		.loc 1 220 3 is_stmt 1 view .LVU3738
 220:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11553              		.loc 1 220 15 is_stmt 0 view .LVU3739
 11554 000a 194B     		ldr	r3, .L1135+4
 11555 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11556              	.LVL1359:
 221:src/display.c **** 		if (*q == '\0')
 11557              		.loc 1 221 3 is_stmt 1 view .LVU3740
 11558 0010 0446     		mov	r4, r0
 221:src/display.c **** 		if (*q == '\0')
 11559              		.loc 1 221 19 is_stmt 0 view .LVU3741
 11560 0012 0021     		movs	r1, #0
 11561 0014 2846     		mov	r0, r5
 11562              	.LVL1360:
 221:src/display.c **** 		if (*q == '\0')
 11563              		.loc 1 221 19 view .LVU3742
 11564 0016 FFF7FEFF 		bl	find_char
 11565              	.LVL1361:
 222:src/display.c **** 			q = S7_ERROR;
 11566              		.loc 1 222 3 is_stmt 1 view .LVU3743
 222:src/display.c **** 			q = S7_ERROR;
 11567              		.loc 1 222 7 is_stmt 0 view .LVU3744
 11568 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 222:src/display.c **** 			q = S7_ERROR;
 11569              		.loc 1 222 6 view .LVU3745
ARM GAS  /tmp/ccQmbpxO.s 			page 316


 11570 001c 9BB9     		cbnz	r3, .L1133
 223:src/display.c **** 		if (*q == 'X') {
 11571              		.loc 1 223 6 view .LVU3746
 11572 001e 1549     		ldr	r1, .L1135+8
 11573              	.L1126:
 11574              	.LVL1362:
 233:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 11575              		.loc 1 233 4 is_stmt 1 view .LVU3747
 11576 0020 2846     		mov	r0, r5
 11577 0022 FFF7FEFF 		bl	message
 11578              	.LVL1363:
 234:src/display.c **** #ifndef REALBUILD
 11579              		.loc 1 234 4 view .LVU3748
 234:src/display.c **** #ifndef REALBUILD
 11580              		.loc 1 234 23 is_stmt 0 view .LVU3749
 11581 0026 144B     		ldr	r3, .L1135+12
 236:src/display.c **** #endif
 11582              		.loc 1 236 4 view .LVU3750
 11583 0028 1449     		ldr	r1, .L1135+16
 234:src/display.c **** #ifndef REALBUILD
 11584              		.loc 1 234 23 view .LVU3751
 11585 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 236:src/display.c **** #endif
 11586              		.loc 1 236 4 view .LVU3752
 11587 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11588 0030 1348     		ldr	r0, .L1135+20
 234:src/display.c **** #ifndef REALBUILD
 11589              		.loc 1 234 28 view .LVU3753
 11590 0032 003C     		subs	r4, r4, #0
 234:src/display.c **** #ifndef REALBUILD
 11591              		.loc 1 234 28 view .LVU3754
 11592 0034 18BF     		it	ne
 11593 0036 0124     		movne	r4, #1
 11594              	.LVL1364:
 234:src/display.c **** #ifndef REALBUILD
 11595              		.loc 1 234 23 view .LVU3755
 11596 0038 64F30412 		bfi	r2, r4, #4, #1
 11597 003c DA75     		strb	r2, [r3, #23]
 236:src/display.c **** #endif
 11598              		.loc 1 236 4 is_stmt 1 view .LVU3756
 11599              	.LBE573:
 261:src/display.c **** 
 11600              		.loc 1 261 1 is_stmt 0 view .LVU3757
 11601 003e BDE83840 		pop	{r3, r4, r5, lr}
 11602              		.cfi_remember_state
 11603              		.cfi_restore 14
 11604              		.cfi_restore 5
 11605              		.cfi_restore 4
 11606              		.cfi_restore 3
 11607              		.cfi_def_cfa_offset 0
 11608              	.LVL1365:
 11609              	.LBB580:
 236:src/display.c **** #endif
 11610              		.loc 1 236 4 view .LVU3758
 11611 0042 FFF7FEBF 		b	scopy
 11612              	.LVL1366:
 11613              	.L1133:
ARM GAS  /tmp/ccQmbpxO.s 			page 317


 11614              		.cfi_restore_state
 224:src/display.c **** 			DispMsg = p;
 11615              		.loc 1 224 3 is_stmt 1 view .LVU3759
 224:src/display.c **** 			DispMsg = p;
 11616              		.loc 1 224 6 is_stmt 0 view .LVU3760
 11617 0046 582B     		cmp	r3, #88
 11618 0048 0DD1     		bne	.L1134
 225:src/display.c **** 			frozen_display();
 11619              		.loc 1 225 4 is_stmt 1 view .LVU3761
 11620              	.LBB574:
 11621              	.LBB575:
2545:src/display.c **** 	display();
 11622              		.loc 1 2545 21 is_stmt 0 view .LVU3762
 11623 004a 0B4C     		ldr	r4, .L1135+12
 11624              	.LVL1367:
2545:src/display.c **** 	display();
 11625              		.loc 1 2545 21 view .LVU3763
 11626              	.LBE575:
 11627              	.LBE574:
 225:src/display.c **** 			frozen_display();
 11628              		.loc 1 225 12 view .LVU3764
 11629 004c 0D4A     		ldr	r2, .L1135+24
 11630              	.LBB578:
 11631              	.LBB576:
2545:src/display.c **** 	display();
 11632              		.loc 1 2545 21 view .LVU3765
 11633 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11634              	.LBE576:
 11635              	.LBE578:
 225:src/display.c **** 			frozen_display();
 11636              		.loc 1 225 12 view .LVU3766
 11637 0050 1560     		str	r5, [r2]
 226:src/display.c **** 		}
 11638              		.loc 1 226 4 is_stmt 1 view .LVU3767
 11639              	.LBB579:
 11640              	.LBI574:
2543:src/display.c **** {
 11641              		.loc 1 2543 6 view .LVU3768
 11642              	.LBB577:
2545:src/display.c **** 	display();
 11643              		.loc 1 2545 2 view .LVU3769
2545:src/display.c **** 	display();
 11644              		.loc 1 2545 21 is_stmt 0 view .LVU3770
 11645 0052 6FF30413 		bfc	r3, #4, #1
 11646 0056 E375     		strb	r3, [r4, #23]
2546:src/display.c **** 	State2.disp_freeze = 1;
 11647              		.loc 1 2546 2 is_stmt 1 view .LVU3771
 11648 0058 FFF7FEFF 		bl	display
 11649              	.LVL1368:
2547:src/display.c **** }
 11650              		.loc 1 2547 2 view .LVU3772
2547:src/display.c **** }
 11651              		.loc 1 2547 21 is_stmt 0 view .LVU3773
 11652 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11653 005e 43F01003 		orr	r3, r3, #16
 11654 0062 E375     		strb	r3, [r4, #23]
 11655              	.LVL1369:
ARM GAS  /tmp/ccQmbpxO.s 			page 318


 11656              	.L1124:
2547:src/display.c **** }
 11657              		.loc 1 2547 21 view .LVU3774
 11658              	.LBE577:
 11659              	.LBE579:
 11660              	.LBE580:
 261:src/display.c **** 
 11661              		.loc 1 261 1 view .LVU3775
 11662 0064 38BD     		pop	{r3, r4, r5, pc}
 11663              	.LVL1370:
 11664              	.L1134:
 11665              	.LBB581:
 221:src/display.c **** 		if (*q == '\0')
 11666              		.loc 1 221 15 view .LVU3776
 11667 0066 411C     		adds	r1, r0, #1
 11668 0068 DAE7     		b	.L1126
 11669              	.L1136:
 11670 006a 00BF     		.align	2
 11671              	.L1135:
 11672 006c 00000000 		.word	Running
 11673 0070 00000000 		.word	.LANCHOR26
 11674 0074 00000000 		.word	.LANCHOR25
 11675 0078 00000000 		.word	StateWhileOn
 11676 007c 00000000 		.word	.LANCHOR27
 11677 0080 00000000 		.word	LastDisplayedNumber
 11678 0084 00000000 		.word	DispMsg
 11679              	.LBE581:
 11680              		.cfi_endproc
 11681              	.LFE1:
 11683              		.section	.rodata.str1.4,"aMS",%progbits,1
 11684              		.align	2
 11685              	.LC43:
 11686 0000 06316306 		.ascii	"\0061c\006\006\000"
 11686      0600
 11687 0006 0000     		.align	2
 11688              	.LC44:
 11689 0008 756E0600 		.ascii	"un\006\000"
 11690              		.align	2
 11691              	.LC45:
 11692 000c 736D00   		.ascii	"sm\000"
 11693              		.set	CSWTCH.306,CSWTCH.304
 11694 000f 00       		.align	2
 11695              	.LC46:
 11696 0010 20502072 		.ascii	" P r o g r a m \000"
 11696      206F2067 
 11696      20722061 
 11696      206D2000 
 11697              		.align	2
 11698              	.LC47:
 11699 0020 206F2072 		.ascii	" o r   d a t e \000"
 11699      20202064 
 11699      20612074 
 11699      20652000 
 11700              		.align	2
 11701              	.LC48:
 11702 0030 204F2070 		.ascii	" O p - c o d e \000"
 11702      202D2063 
ARM GAS  /tmp/ccQmbpxO.s 			page 319


 11702      206F2064 
 11702      20652000 
 11703              		.align	2
 11704              	.LC49:
 11705 0040 204C2061 		.ascii	" L a b e l \000"
 11705      20622065 
 11705      206C2000 
 11706              		.align	2
 11707              	.LC50:
 11708 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11708      20652072 
 11708      20612074 
 11708      2069206F 
 11708      206E2000 
 11709              		.align	2
 11710              	.LC51:
 11711 0060 20462075 		.ascii	" F u l l \000"
 11711      206C206C 
 11711      2000
 11712 006a 0000     		.align	2
 11713              	.LC52:
 11714 006c 2043206C 		.ascii	" C l a s h \000"
 11714      20612073 
 11714      20682000 
 11715              		.align	2
 11716              	.LC53:
 11717 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11717      206F2020 
 11717      2073206D 
 11717      2061206C 
 11717      206C2000 
 11718              		.align	2
 11719              	.LC54:
 11720 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11720      20742061 
 11720      20202070 
 11720      206F2069 
 11720      206E2074 
 11721              		.align	2
 11722              	.LC55:
 11723 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11723      20722061 
 11723      206D2065 
 11723      20742065 
 11723      20722000 
 11724              		.align	2
 11725              	.LC56:
 11726 00b8 20442061 		.ascii	" D a t a \000"
 11726      20742061 
 11726      2000
 11727 00c2 0000     		.align	2
 11728              	.LC57:
 11729 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11729      206F2074 
 11729      20652063 
 11729      20742065 
 11729      20642000 
ARM GAS  /tmp/ccQmbpxO.s 			page 320


 11730              		.align	2
 11731              	.LC58:
 11732 00d8 2046206F 		.ascii	" F o u n d \000"
 11732      2075206E 
 11732      20642000 
 11733              		.align	2
 11734              	.LC59:
 11735 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11735      2073206D 
 11735      20612074 
 11735      20632068 
 11735      2000
 11736 00f6 0000     		.align	2
 11737              	.LC60:
 11738 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11738      20732074 
 11738      2061206C 
 11738      206C2065 
 11738      20642000 
 11739              		.global	DIGITS
 11740              		.comm	IoAnnunciator,4,4
 11741              		.comm	IntMaxWindow,4,4
 11742              		.comm	JustDisplayed,4,4
 11743              		.comm	ShowRPN,4,4
 11744              		.comm	forceDispPlot,1,1
 11745              		.comm	LastDisplayedExponent,5,4
 11746              		.comm	LastDisplayedNumber,26,4
 11747              		.comm	LastDisplayedText,31,4
 11748              		.comm	DispPlot,2,2
 11749              		.comm	DispMsg,4,4
 11750              		.global	SvnRevision
 11751              		.section	.rodata
 11752              		.align	2
 11753              		.set	.LANCHOR17,. + 0
 11754              	.LC18:
 11755 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 11755      22002E00 
 11755      00
 11756 0009 000000   		.space	3
 11757              	.LC22:
 11758 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11758      332E3306 
 11758      0600
 11759 0016 00000000 		.space	4
 11760 001a 0000     		.space	2
 11761              	.LC61:
 11762 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11762      696E6700 
 11762      50726F47 
 11762      72614D6D 
 11762      00
 11763 002d 000000   		.space	3
 11764              	.LC62:
 11765 0030 446F6D61 		.ascii	"Domain\000\000"
 11765      696E0000 
 11766              	.LC63:
 11767 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
ARM GAS  /tmp/ccQmbpxO.s 			page 321


 11767      74696D65 
 11767      006F7220 
 11767      64417445 
 11767      00
 11768 0049 000000   		.space	3
 11769              	.LC64:
 11770 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11770      66696E65 
 11770      64004F70 
 11770      2D434F64 
 11770      4500
 11771 005e 0000     		.space	2
 11772              	.LC65:
 11773 0060 2B9F0000 		.ascii	"+\237\000\000"
 11774              	.LC66:
 11775 0064 2D9F0000 		.ascii	"-\237\000\000"
 11776              	.LC67:
 11777 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11777      75636800 
 11777      4C416245 
 11777      4C00
 11778 0076 0000     		.space	2
 11779              	.LC68:
 11780 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11780      67616C00 
 11780      4F504572 
 11780      4174696F 
 11780      6E00
 11781 008a 0000     		.space	2
 11782              	.LC69:
 11783 008c 4F757420 		.ascii	"Out of range\000\000"
 11783      6F662072 
 11783      616E6765 
 11783      0000
 11784 009a 0000     		.space	2
 11785              	.LC70:
 11786 009c 42616420 		.ascii	"Bad digit\000\000"
 11786      64696769 
 11786      740000
 11787 00a7 00       		.space	1
 11788              	.LC71:
 11789 00a8 546F6F20 		.ascii	"Too long\000\000"
 11789      6C6F6E67 
 11789      0000
 11790 00b2 0000     		.space	2
 11791              	.LC72:
 11792 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11792      69730046 
 11792      754C4C00 
 11793              	.LC73:
 11794 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11794      6B00434C 
 11794      41534800 
 11795              	.LC74:
 11796 00cc 42616420 		.ascii	"Bad mode\000\000"
 11796      6D6F6465 
 11796      0000
ARM GAS  /tmp/ccQmbpxO.s 			page 322


 11797 00d6 0000     		.space	2
 11798              	.LC75:
 11799 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 11799      06060673 
 11799      697A6500 
 11799      746F6F20 
 11799      534D6D41 
 11800 00ef 00       		.space	1
 11801              	.LC76:
 11802 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 11802      66657700 
 11802      64417441 
 11802      20506F69 
 11802      6E745300 
 11803              	.LC77:
 11804 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 11804      6C696400 
 11804      50617261 
 11804      4D6D4574 
 11804      457200
 11805 0117 00       		.space	1
 11806              	.LC78:
 11807 0118 492F4F00 		.ascii	"I/O\000\000"
 11807      00
 11808 011d 000000   		.space	3
 11809              	.LC79:
 11810 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 11810      6C696400 
 11810      64417441 
 11810      00
 11811 012d 000000   		.space	3
 11812              	.LC80:
 11813 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 11813      65005072 
 11813      6F744563 
 11813      74456400 
 11814              	.LC81:
 11815 0140 4E6F2072 		.ascii	"No root\000Found\000"
 11815      6F6F7400 
 11815      466F756E 
 11815      6400
 11816 014e 0000     		.space	2
 11817              	.LC82:
 11818 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 11818      6978004D 
 11818      6D49534D 
 11818      6D417443 
 11818      4800
 11819 0162 0000     		.space	2
 11820              	.LC83:
 11821 0164 53696E67 		.ascii	"Singular\000\000"
 11821      756C6172 
 11821      0000
 11822 016e 0000     		.space	2
 11823              	.LC84:
 11824 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 11824      68206973 
ARM GAS  /tmp/ccQmbpxO.s 			page 323


 11824      0046754C 
 11824      4C00
 11825 017e 0000     		.space	2
 11826              	.LC85:
 11827 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 11827      72797374 
 11827      616C0049 
 11827      6E537461 
 11827      4C4C4564 
 11828 0195 000000   		.space	3
 11829              	.LC86:
 11830 0198 04201D00 		.ascii	"\004 \035\000X\000"
 11830      5800
 11831              		.section	.bss.DecimalMode,"aw",%nobits
 11832              		.set	.LANCHOR1,. + 0
 11835              	DecimalMode:
 11836 0000 00       		.space	1
 11837              		.section	.bss.SeparatorMode,"aw",%nobits
 11838              		.set	.LANCHOR0,. + 0
 11841              	SeparatorMode:
 11842 0000 00       		.space	1
 11843              		.section	.rodata.CSWTCH.304,"a"
 11844              		.align	2
 11845              		.set	.LANCHOR11,. + 0
 11848              	CSWTCH.304:
 11849 0000 02000000 		.word	2
 11850 0004 08000000 		.word	8
 11851 0008 0A000000 		.word	10
 11852 000c 10000000 		.word	16
 11853              		.section	.rodata.CSWTCH.326,"a"
 11854              		.align	2
 11855              		.set	.LANCHOR16,. + 0
 11858              	CSWTCH.326:
 11859 0000 00000000 		.word	.LC43
 11860 0004 08000000 		.word	.LC44
 11861 0008 0C000000 		.word	.LC45
 11862              		.section	.rodata.DIGITS,"a"
 11863              		.align	2
 11864              		.set	.LANCHOR12,. + 0
 11867              	DIGITS:
 11868 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 11868      34353637 
 11868      38394142 
 11868      43444546 
 11868      00
 11869              		.section	.rodata.S7_ERROR,"a"
 11870              		.align	2
 11871              		.set	.LANCHOR25,. + 0
 11874              	S7_ERROR:
 11875 0000 4572726F 		.ascii	"Error\000"
 11875      7200
 11876              		.section	.rodata.S7_INF,"a"
 11877              		.align	2
 11878              		.set	.LANCHOR5,. + 0
 11881              	S7_INF:
 11882 0000 496E6669 		.ascii	"Infinity\000"
 11882      6E697479 
ARM GAS  /tmp/ccQmbpxO.s 			page 324


 11882      00
 11883              		.section	.rodata.S7_INF_Text,"a"
 11884              		.align	2
 11885              		.set	.LANCHOR7,. + 0
 11888              	S7_INF_Text:
 11889 0000 2049206E 		.ascii	" I n f i n i t y \000"
 11889      20662069 
 11889      206E2069 
 11889      20742079 
 11889      2000
 11890              		.section	.rodata.S7_NEG_INF_Text,"a"
 11891              		.align	2
 11892              		.set	.LANCHOR6,. + 0
 11895              	S7_NEG_INF_Text:
 11896 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 11896      20662069 
 11896      206E2069 
 11896      20742079 
 11896      2000
 11897              		.section	.rodata.S7_NaN,"a"
 11898              		.align	2
 11899              		.set	.LANCHOR3,. + 0
 11902              	S7_NaN:
 11903 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 11903      6E754D6D 
 11903      45726963 
 11903      00
 11904              		.section	.rodata.S7_NaN_Text,"a"
 11905              		.align	2
 11906              		.set	.LANCHOR4,. + 0
 11909              	S7_NaN_Text:
 11910 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 11910      20742020 
 11910      206E2075 
 11910      206D2065 
 11910      20722069 
 11911              		.section	.rodata.S7_STEP,"a"
 11912              		.align	2
 11913              		.set	.LANCHOR24,. + 0
 11916              	S7_STEP:
 11917 0000 53744550 		.ascii	"StEP \000"
 11917      2000
 11918              		.section	.rodata.S7_STEP_ShortText,"a"
 11919              		.align	2
 11920              		.set	.LANCHOR18,. + 0
 11923              	S7_STEP_ShortText:
 11924 0000 53544550 		.ascii	"STEP\000"
 11924      00
 11925              		.section	.rodata.S7_fract_EQ,"a"
 11926              		.align	2
 11927              		.set	.LANCHOR9,. + 0
 11930              	S7_fract_EQ:
 11931 0000 203D2000 		.ascii	" = \000"
 11932              		.section	.rodata.S7_fract_GT,"a"
 11933              		.align	2
 11934              		.set	.LANCHOR10,. + 0
 11937              	S7_fract_GT:
ARM GAS  /tmp/ccQmbpxO.s 			page 325


 11938 0000 20477400 		.ascii	" Gt\000"
 11939              		.section	.rodata.S7_fract_LT,"a"
 11940              		.align	2
 11941              		.set	.LANCHOR8,. + 0
 11944              	S7_fract_LT:
 11945 0000 204C7400 		.ascii	" Lt\000"
 11946              		.section	.rodata.S_SURE,"a"
 11947              		.align	2
 11948              		.set	.LANCHOR20,. + 0
 11951              	S_SURE:
 11952 0000 53757265 		.ascii	"Sure?\000"
 11952      3F00
 11953              		.section	.rodata.SvnRevision,"a"
 11954              		.align	2
 11955              		.set	.LANCHOR19,. + 0
 11958              	SvnRevision:
 11959 0000 30202020 		.ascii	"0   "
 11960              		.section	.rodata.digtbl,"a"
 11961              		.align	2
 11962              		.set	.LANCHOR2,. + 0
 11965              	digtbl:
 11966 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 11966      02421252 
 11966      2D000000 
 11966      00000000 
 11966      00
 11967 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 11967      00000017 
 11967      01000000 
 11967      00
 11968 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 11968      28000000 
 11968      0020664B 
 11968      00000010 
 11969 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 11969      5E5B3973 
 11969      77497F7B 
 11969      00000612 
 11969      0300787D 
 11970 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 11970      673D240F 
 11970      75266C6D 
 11970      6F7C7914 
 11970      73362F00 
 11971 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 11971      161F7674 
 11971      6735040F 
 11971      75266915 
 11971      177C7914 
 11972 0076 000F003B 		.ascii	"\000\017\000;"
 11973              		.section	.rodata.error_table.8501,"a"
 11974              		.align	2
 11975              		.set	.LANCHOR26,. + 0
 11978              	error_table.8501:
 11979 0000 1C000000 		.word	.LC61
 11980 0004 30000000 		.word	.LC62
 11981 0008 38000000 		.word	.LC63
ARM GAS  /tmp/ccQmbpxO.s 			page 326


 11982 000c 4C000000 		.word	.LC64
 11983 0010 60000000 		.word	.LC65
 11984 0014 64000000 		.word	.LC66
 11985 0018 68000000 		.word	.LC67
 11986 001c 78000000 		.word	.LC68
 11987 0020 8C000000 		.word	.LC69
 11988 0024 9C000000 		.word	.LC70
 11989 0028 A8000000 		.word	.LC71
 11990 002c B4000000 		.word	.LC72
 11991 0030 C0000000 		.word	.LC73
 11992 0034 CC000000 		.word	.LC74
 11993 0038 D8000000 		.word	.LC75
 11994 003c F0000000 		.word	.LC76
 11995 0040 04010000 		.word	.LC77
 11996 0044 18010000 		.word	.LC78
 11997 0048 20010000 		.word	.LC79
 11998 004c 30010000 		.word	.LC80
 11999 0050 40010000 		.word	.LC81
 12000 0054 50010000 		.word	.LC82
 12001 0058 64010000 		.word	.LC83
 12002 005c 70010000 		.word	.LC84
 12003 0060 80010000 		.word	.LC85
 12004 0064 98010000 		.word	.LC86
 12005              		.section	.rodata.error_table_text.8502,"a"
 12006              		.align	2
 12007              		.set	.LANCHOR27,. + 0
 12010              	error_table_text.8502:
 12011 0000 10000000 		.word	.LC46
 12012 0004 A8000000 		.word	.LC41
 12013 0008 20000000 		.word	.LC47
 12014 000c 30000000 		.word	.LC48
 12015 0010 A8000000 		.word	.LC41
 12016 0014 A8000000 		.word	.LC41
 12017 0018 40000000 		.word	.LC49
 12018 001c 4C000000 		.word	.LC50
 12019 0020 A8000000 		.word	.LC41
 12020 0024 A8000000 		.word	.LC41
 12021 0028 A8000000 		.word	.LC41
 12022 002c 60000000 		.word	.LC51
 12023 0030 6C000000 		.word	.LC52
 12024 0034 A8000000 		.word	.LC41
 12025 0038 78000000 		.word	.LC53
 12026 003c 8C000000 		.word	.LC54
 12027 0040 A4000000 		.word	.LC55
 12028 0044 A8000000 		.word	.LC41
 12029 0048 B8000000 		.word	.LC56
 12030 004c C4000000 		.word	.LC57
 12031 0050 D8000000 		.word	.LC58
 12032 0054 E4000000 		.word	.LC59
 12033 0058 A8000000 		.word	.LC41
 12034 005c 60000000 		.word	.LC51
 12035 0060 F8000000 		.word	.LC60
 12036 0064 A8000000 		.word	.LC41
 12037              		.section	.rodata.libname,"a"
 12038              		.align	2
 12039              		.set	.LANCHOR21,. + 0
 12042              	libname:
ARM GAS  /tmp/ccQmbpxO.s 			page 327


 12043 0000 72414D6D 		.ascii	"rAMm\000"
 12043      00
 12044 0005 4C696220 		.ascii	"Lib \000"
 12044      00
 12045 000a 42757020 		.ascii	"Bup \000"
 12045      00
 12046 000f 726F4D6D 		.ascii	"roMm\000"
 12046      00
 12047              		.section	.rodata.libname_shorttext,"a"
 12048              		.align	2
 12049              		.set	.LANCHOR23,. + 0
 12052              	libname_shorttext:
 12053 0000 52616D00 		.ascii	"Ram\000"
 12054 0004 00       		.space	1
 12055 0005 4C696200 		.ascii	"Lib\000"
 12056 0009 00       		.space	1
 12057 000a 42757000 		.ascii	"Bup\000"
 12058 000e 00       		.space	1
 12059 000f 526F6D00 		.ascii	"Rom\000"
 12060 0013 00       		.space	1
 12061              		.section	.rodata.libname_text,"a"
 12062              		.align	2
 12063              		.set	.LANCHOR22,. + 0
 12066              	libname_text:
 12067 0000 20522061 		.ascii	" R a m \000"
 12067      206D2000 
 12068 0008 0000     		.space	2
 12069 000a 204C2069 		.ascii	" L i b \000"
 12069      20622000 
 12070 0012 0000     		.space	2
 12071 0014 20422075 		.ascii	" B u p \000"
 12071      20702000 
 12072 001c 0000     		.space	2
 12073 001e 2052206F 		.ascii	" R o m \000"
 12073      206D2000 
 12074 0026 0000     		.space	2
 12075              		.section	.rodata.shift_chars.8598,"a"
 12076              		.align	2
 12077              		.set	.LANCHOR15,. + 0
 12080              	shift_chars.8598:
 12081 0000 20111213 		.ascii	" \021\022\023"
 12082              		.section	.rodata.small_dots.8785,"a"
 12083              		.align	2
 12084              		.set	.LANCHOR14,. + 0
 12087              	small_dots.8785:
 12088 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12088      07E12C06 
 12088      07E12C06 
 12088      06
 12089              		.section	.rodata.small_minus.8784,"a"
 12090              		.align	2
 12091              		.set	.LANCHOR13,. + 0
 12094              	small_minus.8784:
 12095 0000 07C22D06 		.ascii	"\007\302-\006"
 12096              		.text
 12097              	.Letext0:
 12098              		.file 2 "src/decNumber/decContext.h"
ARM GAS  /tmp/ccQmbpxO.s 			page 328


 12099              		.file 3 "src/decNumber/decNumber.h"
 12100              		.file 4 "src/decNumber/decimal64.h"
 12101              		.file 5 "src/decNumber/decimal128.h"
 12102              		.file 6 "src/xeq.h"
 12103              		.file 7 "src/data.h"
 12104              		.file 8 "src/storage.h"
 12105              		.file 9 "src/display.h"
 12106              		.file 10 "src/consts.h"
 12107              		.file 11 "src/stats.h"
 12108              		.file 12 "src/revision.h"
 12109              		.file 13 "src/charset7.h"
 12110              		.file 14 "src/lcd.h"
 12111              		.file 15 "src/decn.h"
 12112              		.file 16 "src/alpha.h"
 12113              		.file 17 "src/int.h"
ARM GAS  /tmp/ccQmbpxO.s 			page 329


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccQmbpxO.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccQmbpxO.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccQmbpxO.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccQmbpxO.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccQmbpxO.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccQmbpxO.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccQmbpxO.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccQmbpxO.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccQmbpxO.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccQmbpxO.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccQmbpxO.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccQmbpxO.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccQmbpxO.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccQmbpxO.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccQmbpxO.s:669    .text.set_status_sized:0000000000000000 $t
     /tmp/ccQmbpxO.s:676    .text.set_status_sized:0000000000000000 set_status_sized
     /tmp/ccQmbpxO.s:1121   .text.set_status_sized:0000000000000190 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccQmbpxO.s:1129   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccQmbpxO.s:1133   .text.set_exp:0000000000000000 $t
     /tmp/ccQmbpxO.s:1140   .text.set_exp:0000000000000000 set_exp
     /tmp/ccQmbpxO.s:1361   .text.set_exp:00000000000000b0 $d
     /tmp/ccQmbpxO.s:1367   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccQmbpxO.s:1374   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccQmbpxO.s:1442   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccQmbpxO.s:1448   .text.set_decimal:0000000000000000 $t
     /tmp/ccQmbpxO.s:1455   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccQmbpxO.s:1551   .text.set_decimal:000000000000004c $d
     /tmp/ccQmbpxO.s:1559   .text.set_digits_string:0000000000000000 $t
     /tmp/ccQmbpxO.s:1566   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccQmbpxO.s:1660   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccQmbpxO.s:1664   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccQmbpxO.s:1671   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccQmbpxO.s:1818   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccQmbpxO.s:1830   .text.set_x_hms:0000000000000000 $t
     /tmp/ccQmbpxO.s:1837   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccQmbpxO.s:2338   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccQmbpxO.s:2348   .text.set_x_fract:0000000000000000 $t
     /tmp/ccQmbpxO.s:2355   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccQmbpxO.s:2791   .text.set_x_fract:0000000000000198 $d
     /tmp/ccQmbpxO.s:2806   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccQmbpxO.s:2807   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccQmbpxO.s:2810   .text.carry_overflow:0000000000000000 $t
     /tmp/ccQmbpxO.s:2817   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccQmbpxO.s:2954   .text.carry_overflow:0000000000000070 $d
     /tmp/ccQmbpxO.s:2964   .text.set_int_x:0000000000000000 $t
     /tmp/ccQmbpxO.s:2971   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccQmbpxO.s:3728   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.304:0000000000000000 CSWTCH.306
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccQmbpxO.s:3738   .text.set_int_x:0000000000000360 $t
     /tmp/ccQmbpxO.s:3788   .text.set_int_x:0000000000000390 $d
ARM GAS  /tmp/ccQmbpxO.s 			page 330


     /tmp/ccQmbpxO.s:3794   .text.set_annunciators:0000000000000000 $t
     /tmp/ccQmbpxO.s:3801   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccQmbpxO.s:4141   .text.set_annunciators:00000000000000d0 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccQmbpxO.s:4153   .text.getdig:0000000000000000 $t
     /tmp/ccQmbpxO.s:4161   .text.getdig:0000000000000000 getdig
     /tmp/ccQmbpxO.s:4181   .text.getdig:0000000000000008 $d
     /tmp/ccQmbpxO.s:4186   .text.dot:0000000000000000 $t
     /tmp/ccQmbpxO.s:4194   .text.dot:0000000000000000 dot
     /tmp/ccQmbpxO.s:4217   .text.std_round_fix:0000000000000000 $t
     /tmp/ccQmbpxO.s:4225   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccQmbpxO.s:4307   .text.std_round_fix:000000000000004c $d
     /tmp/ccQmbpxO.s:4313   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccQmbpxO.s:4321   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccQmbpxO.s:4382   .text.set_IO_annunciator:0000000000000020 $d
     /tmp/ccQmbpxO.s:4389   .text.pixel_length:0000000000000000 $t
     /tmp/ccQmbpxO.s:4397   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccQmbpxO.s:4488   .text.set_status:0000000000000000 $t
     /tmp/ccQmbpxO.s:4495   .text.set_status:0000000000000000 set_status
     /tmp/ccQmbpxO.s:4563   .text.set_status:0000000000000034 $d
     /tmp/ccQmbpxO.s:4568   .text.set_x_dn:0000000000000000 $t
     /tmp/ccQmbpxO.s:4576   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccQmbpxO.s:5344   .text.set_x_dn:0000000000000328 $d
     /tmp/ccQmbpxO.s:5353   .text.set_x_dn:000000000000033c $t
     /tmp/ccQmbpxO.s:5472   .text.set_x_dn:00000000000003dc $d
     /tmp/ccQmbpxO.s:5478   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccQmbpxO.s:5505   .text.set_x_dn:000000000000041c $d
     /tmp/ccQmbpxO.s:5511   .text.set_x_dn:0000000000000426 $t
     /tmp/ccQmbpxO.s:6016   .text.set_x_dn:0000000000000644 $d
     /tmp/ccQmbpxO.s:6032   .text.set_x_dn:0000000000000660 $t
     /tmp/ccQmbpxO.s:6746   .text.set_x_dn:0000000000000950 $d
     /tmp/ccQmbpxO.s:6755   .text.set_x:0000000000000000 $t
     /tmp/ccQmbpxO.s:6762   .text.set_x:0000000000000000 set_x
     /tmp/ccQmbpxO.s:6830   .text.format_reg:0000000000000000 $t
     /tmp/ccQmbpxO.s:6838   .text.format_reg:0000000000000000 format_reg
     /tmp/ccQmbpxO.s:6957   .text.format_reg:0000000000000064 $d
     /tmp/ccQmbpxO.s:6963   .text.set_status_right:0000000000000000 $t
     /tmp/ccQmbpxO.s:6970   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccQmbpxO.s:7107   .text.set_status_right:0000000000000060 $d
     /tmp/ccQmbpxO.s:7112   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccQmbpxO.s:7161   .text.annunciators:0000000000000000 $t
     /tmp/ccQmbpxO.s:7168   .text.annunciators:0000000000000000 annunciators
     /tmp/ccQmbpxO.s:7870   .text.annunciators:0000000000000308 $d
     /tmp/ccQmbpxO.s:7893   .text.annunciators:000000000000034c $t
     /tmp/ccQmbpxO.s:8087   .text.annunciators:0000000000000420 $d
     /tmp/ccQmbpxO.s:8102   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccQmbpxO.s:8169   .text.display:0000000000000000 $t
     /tmp/ccQmbpxO.s:8177   .text.display:0000000000000000 display
     /tmp/ccQmbpxO.s:8851   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccQmbpxO.s:8869   .text.display:0000000000000334 $t
     /tmp/ccQmbpxO.s:9568   .text.display:000000000000063c $d
     /tmp/ccQmbpxO.s:9598   .text.display:0000000000000694 $t
     /tmp/ccQmbpxO.s:10445  .text.display:00000000000009c8 $d
     /tmp/ccQmbpxO.s:10462  .text.display:00000000000009fc $t
ARM GAS  /tmp/ccQmbpxO.s 			page 331


     /tmp/ccQmbpxO.s:11196  .text.display:0000000000000d10 $d
     /tmp/ccQmbpxO.s:11217  .text.display:0000000000000d4c $t
     /tmp/ccQmbpxO.s:11322  .text.display:0000000000000db0 $d
     /tmp/ccQmbpxO.s:11333  .text.frozen_display:0000000000000000 $t
     /tmp/ccQmbpxO.s:11341  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccQmbpxO.s:11371  .text.frozen_display:000000000000001c $d
     /tmp/ccQmbpxO.s:11376  .text.message:0000000000000000 $t
     /tmp/ccQmbpxO.s:11384  .text.message:0000000000000000 message
     /tmp/ccQmbpxO.s:11513  .text.message:0000000000000060 $d
     /tmp/ccQmbpxO.s:11521  .text.error_message:0000000000000000 $t
     /tmp/ccQmbpxO.s:11529  .text.error_message:0000000000000000 error_message
     /tmp/ccQmbpxO.s:11672  .text.error_message:000000000000006c $d
     /tmp/ccQmbpxO.s:11684  .rodata.str1.4:0000000000000000 $d
     /tmp/ccQmbpxO.s:11848  .rodata.CSWTCH.304:0000000000000000 CSWTCH.304
     /tmp/ccQmbpxO.s:11867  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccQmbpxO.s:11958  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccQmbpxO.s:11752  .rodata:0000000000000000 $d
     /tmp/ccQmbpxO.s:11835  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccQmbpxO.s:11836  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccQmbpxO.s:11841  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccQmbpxO.s:11842  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccQmbpxO.s:11844  .rodata.CSWTCH.304:0000000000000000 $d
     /tmp/ccQmbpxO.s:11854  .rodata.CSWTCH.326:0000000000000000 $d
     /tmp/ccQmbpxO.s:11858  .rodata.CSWTCH.326:0000000000000000 CSWTCH.326
     /tmp/ccQmbpxO.s:11863  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccQmbpxO.s:11870  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccQmbpxO.s:11874  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccQmbpxO.s:11877  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccQmbpxO.s:11881  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccQmbpxO.s:11884  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccQmbpxO.s:11888  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccQmbpxO.s:11891  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccQmbpxO.s:11895  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccQmbpxO.s:11898  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccQmbpxO.s:11902  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccQmbpxO.s:11905  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccQmbpxO.s:11909  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccQmbpxO.s:11912  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccQmbpxO.s:11916  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccQmbpxO.s:11919  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccQmbpxO.s:11923  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccQmbpxO.s:11926  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccQmbpxO.s:11930  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccQmbpxO.s:11933  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccQmbpxO.s:11937  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccQmbpxO.s:11940  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccQmbpxO.s:11944  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccQmbpxO.s:11947  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccQmbpxO.s:11951  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccQmbpxO.s:11954  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccQmbpxO.s:11961  .rodata.digtbl:0000000000000000 $d
     /tmp/ccQmbpxO.s:11965  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccQmbpxO.s:11974  .rodata.error_table.8501:0000000000000000 $d
     /tmp/ccQmbpxO.s:11978  .rodata.error_table.8501:0000000000000000 error_table.8501
     /tmp/ccQmbpxO.s:12006  .rodata.error_table_text.8502:0000000000000000 $d
     /tmp/ccQmbpxO.s:12010  .rodata.error_table_text.8502:0000000000000000 error_table_text.8502
ARM GAS  /tmp/ccQmbpxO.s 			page 332


     /tmp/ccQmbpxO.s:12038  .rodata.libname:0000000000000000 $d
     /tmp/ccQmbpxO.s:12042  .rodata.libname:0000000000000000 libname
     /tmp/ccQmbpxO.s:12048  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccQmbpxO.s:12052  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccQmbpxO.s:12062  .rodata.libname_text:0000000000000000 $d
     /tmp/ccQmbpxO.s:12066  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccQmbpxO.s:12076  .rodata.shift_chars.8598:0000000000000000 $d
     /tmp/ccQmbpxO.s:12080  .rodata.shift_chars.8598:0000000000000000 shift_chars.8598
     /tmp/ccQmbpxO.s:12083  .rodata.small_dots.8785:0000000000000000 $d
     /tmp/ccQmbpxO.s:12087  .rodata.small_dots.8785:0000000000000000 small_dots.8785
     /tmp/ccQmbpxO.s:12090  .rodata.small_minus.8784:0000000000000000 $d
     /tmp/ccQmbpxO.s:12094  .rodata.small_minus.8784:0000000000000000 small_minus.8784

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
ARM GAS  /tmp/ccQmbpxO.s 			page 333


get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
global_regs
local_regs
ARM GAS  /tmp/ccQmbpxO.s 			page 334


SizeStatRegs

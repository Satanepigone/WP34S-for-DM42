ARM GAS  /tmp/ccobNVTR.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccobNVTR.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** 
  43:src/display.c **** static void set_status_right(const char *);
  44:src/display.c **** static void set_status_graphic(const unsigned char *);
  45:src/display.c **** 
  46:src/display.c **** static void set_int_x(const long long int value, char *res);
  47:src/display.c **** 
  48:src/display.c **** const char *DispMsg; // What to display in message area
  49:src/display.c **** 
  50:src/display.c **** short int DispPlot;
  51:src/display.c **** #ifndef REALBUILD
  52:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  53:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  54:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  55:src/display.c **** char forceDispPlot;
  56:src/display.c **** #endif
  57:src/display.c **** 
  58:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  59:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  60:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  61:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  62:src/display.c **** 
  63:src/display.c **** /* Message strings
  64:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  65:src/display.c ****  * are for the upper dot matrix line.
  66:src/display.c ****  */
  67:src/display.c **** static const char S_SURE[] = "Sure?";
  68:src/display.c **** 
  69:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  70:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  71:src/display.c **** #ifndef REALBUILD
  72:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  73:src/display.c **** #endif
  74:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  75:src/display.c **** #ifndef REALBUILD
  76:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  77:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  78:src/display.c **** #endif
  79:src/display.c **** 
  80:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  81:src/display.c **** #ifndef REALBUILD
  82:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  83:src/display.c **** #endif
  84:src/display.c **** 
  85:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  86:src/display.c **** static const char S7_fract_LT[] = " Lt";
  87:src/display.c **** static const char S7_fract_GT[] = " Gt";
ARM GAS  /tmp/ccobNVTR.s 			page 3


  88:src/display.c **** 
  89:src/display.c **** static const char libname[][5] = {
  90:src/display.c ****   "rAMm", "Lib ", "Bup ",
  91:src/display.c **** #ifndef REALBUILD
  92:src/display.c ****   "roMm"
  93:src/display.c **** #endif
  94:src/display.c **** };
  95:src/display.c **** 
  96:src/display.c **** #ifndef REALBUILD
  97:src/display.c **** static const char libname_text[][10] = {
  98:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
  99:src/display.c **** };
 100:src/display.c **** static const char libname_shorttext[][5] = {
 101:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 102:src/display.c **** };
 103:src/display.c **** #endif
 104:src/display.c **** 
 105:src/display.c **** 
 106:src/display.c **** /* Set the separator and decimal mode globals
 107:src/display.c ****  */
 108:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 108 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 109:src/display.c ****   // Separators used by various modes
 110:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 110 3 view .LVU1
  35              		.loc 1 110 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 111:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 111 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 110:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 110 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 110:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 110 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 108:src/display.c ****   // Separators used by various modes
  44              		.loc 1 108 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 110:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 110 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 111 5 is_stmt 1 view .LVU8
 112:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 112 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 113:src/display.c ****   }
 114:src/display.c ****   else {
 115:src/display.c ****     SeparatorMode = SEP_COMMA;
ARM GAS  /tmp/ccobNVTR.s 			page 4


 116:src/display.c ****     DecimalMode = DECIMAL_DOT;
 117:src/display.c ****   }
 118:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 118 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 112:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 112 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 111:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 111 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 112:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 112 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 118 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 111:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 111 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 112:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 112 5 is_stmt 1 view .LVU16
  67              		.loc 1 118 3 view .LVU17
  68              		.loc 1 118 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 118 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 119:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 119 5 is_stmt 1 view .LVU20
  76              		.loc 1 119 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 120:src/display.c **** }
  80              		.loc 1 120 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 115:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 115 5 is_stmt 1 view .LVU23
 116:src/display.c ****   }
  90              		.loc 1 116 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 118:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 118 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 116:src/display.c ****   }
  94              		.loc 1 116 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 115:src/display.c ****     DecimalMode = DECIMAL_DOT;
ARM GAS  /tmp/ccobNVTR.s 			page 5


  96              		.loc 1 115 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 118:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 118 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 115:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 115 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 116:src/display.c ****   }
 102              		.loc 1 116 5 is_stmt 1 view .LVU30
 118:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 118 3 view .LVU31
 118:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 118 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 118:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 118 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 120 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 121:src/display.c **** 
 122:src/display.c **** 
 123:src/display.c **** /* Table of error messages.
 124:src/display.c ****  * These consist of a double string.  The first is displayed in the
 125:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 126:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 127:src/display.c ****  */
 128:src/display.c **** void error_message(const unsigned int e) 
 129:src/display.c **** {
 130:src/display.c **** #define MSG1(top) top "\0"
 131:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 132:src/display.c **** 
 133:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
ARM GAS  /tmp/ccobNVTR.s 			page 6


 134:src/display.c ****   static const char *const error_table[] = 
 135:src/display.c ****     {
 136:src/display.c ****       // manually get the order correct!
 137:src/display.c ****       MSG2("Running", "ProGraMm"),
 138:src/display.c ****       MSG1("Domain"),
 139:src/display.c ****       MSG2("Bad time", "or dAtE"),
 140:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 141:src/display.c ****       MSG1("+\237"),
 142:src/display.c ****       MSG1("-\237"),
 143:src/display.c ****       MSG2("No such", "LAbEL"),
 144:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 145:src/display.c ****       MSG1("Out of range"),
 146:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 147:src/display.c ****       MSG2("Bad digit", "1"),
 148:src/display.c ****       MSG2("Too long", "1"),
 149:src/display.c **** #else
 150:src/display.c ****       MSG1("Bad digit"),
 151:src/display.c ****       MSG1("Too long"),
 152:src/display.c **** #endif
 153:src/display.c ****       MSG2("RAM is", "FuLL"),
 154:src/display.c ****       MSG2("Stack", "CLASH"),
 155:src/display.c ****       MSG1("Bad mode"),
 156:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 157:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 158:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 159:src/display.c ****       MSG1("I/O"),
 160:src/display.c ****       MSG2("Invalid", "dAtA"),
 161:src/display.c ****       MSG2("Write", "ProtEctEd"),
 162:src/display.c ****       MSG2("No root", "Found"),
 163:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 164:src/display.c ****       MSG1("Singular"),
 165:src/display.c ****       MSG2("Flash is", "FuLL"),
 166:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 167:src/display.c **** #ifndef SHIFT_EXPONENT
 168:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 169:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 170:src/display.c ****       MSG2("Too\007\304 small", "1"),
 171:src/display.c **** #     else
 172:src/display.c ****       MSG2("Too small", "1"),
 173:src/display.c **** #     endif
 174:src/display.c ****       MSG2("Too big", "1"),
 175:src/display.c **** #  else
 176:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 177:src/display.c ****       MSG1("Too\007\304 small"),
 178:src/display.c **** #     else
 179:src/display.c ****       MSG1("Too small"),
 180:src/display.c **** #     endif
 181:src/display.c ****       MSG1("Too big"),
 182:src/display.c **** #  endif
 183:src/display.c **** #endif
 184:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 185:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 186:src/display.c ****       MSG2("Interrupted", "X"),
 187:src/display.c **** #endif
 188:src/display.c ****     };
 189:src/display.c **** #undef MSG1
 190:src/display.c **** #undef MSG2
ARM GAS  /tmp/ccobNVTR.s 			page 7


 191:src/display.c **** #ifndef REALBUILD
 192:src/display.c ****   static const char *const error_table_text[] =
 193:src/display.c ****     {
 194:src/display.c ****       " P r o g r a m ",
 195:src/display.c ****       "",
 196:src/display.c ****       " o r   d a t e ",
 197:src/display.c ****       " O p - c o d e ",
 198:src/display.c ****       "",
 199:src/display.c ****       "",
 200:src/display.c ****       " L a b e l ",
 201:src/display.c ****       " O p e r a t i o n ",
 202:src/display.c ****       "",
 203:src/display.c ****       "",
 204:src/display.c ****       "",
 205:src/display.c ****       " F u l l ",
 206:src/display.c ****       " C l a s h ",
 207:src/display.c ****       "",
 208:src/display.c ****       " T o o   s m a l l ",
 209:src/display.c ****       " D a t a   p o i n t s ",
 210:src/display.c ****       " P a r a m e t e r ",
 211:src/display.c ****       "",
 212:src/display.c ****       " D a t a ",
 213:src/display.c ****       " P r o t e c t e d ",
 214:src/display.c ****       " F o u n d ",
 215:src/display.c ****       " M i s m a t c h ",
 216:src/display.c ****       "",
 217:src/display.c ****       " F u l l ",
 218:src/display.c ****       " I n s t a l l e d ",
 219:src/display.c **** #ifndef SHIFT_EXPONENT
 220:src/display.c ****       "",
 221:src/display.c ****       "",
 222:src/display.c **** #endif
 223:src/display.c ****       "",
 224:src/display.c ****     };
 225:src/display.c **** #endif
 226:src/display.c **** 
 227:src/display.c ****   if (e != ERR_NONE || Running) {
 228:src/display.c ****     const char *p = error_table[e];
 229:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 230:src/display.c ****     if (*q == '\0')
 231:src/display.c ****       q = S7_ERROR;
 232:src/display.c ****     if (*q == 'X') {
 233:src/display.c ****       DispMsg = p;
 234:src/display.c ****       frozen_display();
 235:src/display.c ****     }
 236:src/display.c ****     else {
 237:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 238:src/display.c ****       if (*q == '1')
 239:src/display.c **** 	q = CNULL;
 240:src/display.c **** #endif
 241:src/display.c ****       message(p, q);
 242:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 243:src/display.c **** #ifndef REALBUILD
 244:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 245:src/display.c **** #endif
 246:src/display.c ****     }
 247:src/display.c **** #ifdef INFRARED
ARM GAS  /tmp/ccobNVTR.s 			page 8


 248:src/display.c ****     if (Tracing) {
 249:src/display.c ****       if (*q == 'X')
 250:src/display.c **** 	print_reg(regX_idx, p, 0);
 251:src/display.c ****       else {
 252:src/display.c **** 	print_tab(0);
 253:src/display.c **** 	print_line(p, 0);
 254:src/display.c **** 	print(' ');
 255:src/display.c **** 	while (*q != '\0') {
 256:src/display.c **** 	  int c = *q;
 257:src/display.c **** 	  if (c >= 'A')
 258:src/display.c **** 	    c |= 0x60; // ASCII lower case
 259:src/display.c **** 	  print(c);
 260:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 261:src/display.c **** 	    ++q;
 262:src/display.c **** 	  ++q;
 263:src/display.c **** 	}
 264:src/display.c **** 	print_advance( 0 );
 265:src/display.c ****       }
 266:src/display.c ****     }
 267:src/display.c **** #endif
 268:src/display.c ****   }
 269:src/display.c **** }
 270:src/display.c **** 
 271:src/display.c **** 
 272:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 273:src/display.c ****  * display.
 274:src/display.c ****  */
 275:src/display.c **** #define D_TOP 64
 276:src/display.c **** #define D_TL 32
 277:src/display.c **** #define D_TR 8
 278:src/display.c **** #define D_MIDDLE 16
 279:src/display.c **** #define D_BL 4
 280:src/display.c **** #define D_BR 1
 281:src/display.c **** #define D_BOTTOM 2
 282:src/display.c **** 
 283:src/display.c **** #include "charset7.h"
 284:src/display.c **** 
 285:src/display.c **** #ifndef REALBUILD
 286:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 287:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 288:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 289:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 290:src/display.c **** 
 291:src/display.c **** static void set_mant_sign_dot()
 292:src/display.c **** {
 293:src/display.c ****   LastDisplayedNumber[0]='-';
 294:src/display.c ****   set_dot(MANT_SIGN);
 295:src/display.c **** }
 296:src/display.c **** 
 297:src/display.c **** static void clr_mant_sign_dot()
 298:src/display.c **** {
 299:src/display.c ****   LastDisplayedNumber[0]=' ';
 300:src/display.c ****   clr_dot(MANT_SIGN);
 301:src/display.c **** }
 302:src/display.c **** 
 303:src/display.c **** static void set_exp_sign_dot()
 304:src/display.c **** {
ARM GAS  /tmp/ccobNVTR.s 			page 9


 305:src/display.c ****   LastDisplayedExponent[0]='-';
 306:src/display.c ****   set_dot(EXP_SIGN);
 307:src/display.c **** }
 308:src/display.c **** 
 309:src/display.c **** static void clr_exp_sign_dot()
 310:src/display.c **** {
 311:src/display.c ****   LastDisplayedExponent[0]=' ';
 312:src/display.c ****   clr_dot(EXP_SIGN);
 313:src/display.c **** }
 314:src/display.c **** 
 315:src/display.c **** #else
 316:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 317:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 318:src/display.c **** 
 319:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 320:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 321:src/display.c **** 
 322:src/display.c **** #endif
 323:src/display.c **** 
 324:src/display.c **** #ifndef REALBUILD
 325:src/display.c **** int getdig(int ch)
 326:src/display.c **** #else
 327:src/display.c ****   static int getdig(int ch)
 328:src/display.c **** #endif
 329:src/display.c **** {
 330:src/display.c ****   // perform index lookup
 331:src/display.c ****   return digtbl[ch&0xff];
 332:src/display.c **** }
 333:src/display.c **** 
 334:src/display.c **** void dot(int n, int on) {
 335:src/display.c ****   if (on)	set_dot(n);
 336:src/display.c ****   else	clr_dot(n);
 337:src/display.c **** }
 338:src/display.c **** 
 339:src/display.c **** 
 340:src/display.c **** /* Set the decimal point *after* the indicated digit
 341:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 342:src/display.c ****  * of decimal.
 343:src/display.c ****  */
 344:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 345:src/display.c ****   if (res) {
 346:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 347:src/display.c ****   } else {
 348:src/display.c ****     set_dot(posn+7);
 349:src/display.c ****     if (decimal != DECIMAL_DOT)
 350:src/display.c ****       set_dot(posn+8);
 351:src/display.c **** #ifndef REALBUILD
 352:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 353:src/display.c **** #endif
 354:src/display.c ****   }
 355:src/display.c ****   return res;
 356:src/display.c **** }
 357:src/display.c **** 
 358:src/display.c **** /* Set the digit group separator *before* the specified digit.
 359:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 360:src/display.c ****  * sep argument.
 361:src/display.c ****  */
ARM GAS  /tmp/ccobNVTR.s 			page 10


 362:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 363:src/display.c ****   if (sep == SEP_NONE)
 364:src/display.c ****     return res;
 365:src/display.c ****   if (res) {
 366:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 367:src/display.c ****     else *res++ = '.';
 368:src/display.c ****   } else {
 369:src/display.c ****     posn -= SEGS_PER_DIGIT;
 370:src/display.c ****     set_dot(posn+7);
 371:src/display.c ****     if (sep == SEP_COMMA)
 372:src/display.c ****       set_dot(posn+8);
 373:src/display.c **** #ifndef REALBUILD
 374:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 375:src/display.c **** #endif
 376:src/display.c ****   }
 377:src/display.c ****   return res;
 378:src/display.c **** }
 379:src/display.c **** 
 380:src/display.c **** /* Set a digit in positions [base, base+6] */
 381:src/display.c **** static void set_dig(int base, int ch)
 382:src/display.c **** {
 136              		.loc 1 382 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 383:src/display.c ****   int i;
 140              		.loc 1 383 3 view .LVU36
 384:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 384 3 view .LVU37
 142              	.LBB136:
 143              	.LBI136:
 325:src/display.c **** #else
 144              		.loc 1 325 5 view .LVU38
 145              	.LBB137:
 331:src/display.c **** }
 146              		.loc 1 331 3 view .LVU39
 331:src/display.c **** }
 147              		.loc 1 331 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 331:src/display.c **** }
 149              		.loc 1 331 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE137:
 152              	.LBE136:
 385:src/display.c **** #ifndef REALBUILD
 386:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 386 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 382:src/display.c ****   int i;
 155              		.loc 1 382 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB139:
ARM GAS  /tmp/ccobNVTR.s 			page 11


 163              	.LBB138:
 331:src/display.c **** }
 164              		.loc 1 331 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 331:src/display.c **** }
 167              		.loc 1 331 16 view .LVU45
 168              	.LBE138:
 169              	.LBE139:
 170              		.loc 1 386 3 is_stmt 1 view .LVU46
 171              		.loc 1 386 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 387:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 387 5 is_stmt 1 view .LVU48
 174              		.loc 1 387 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 387 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 387 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 387 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 387 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 388:src/display.c ****   else
 389:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 390:src/display.c **** #endif
 391:src/display.c ****   for (i=6; i>=0; i--)
 392:src/display.c ****     {
 393:src/display.c ****       //		dot(base, c & (1 << i));
 394:src/display.c ****       if (c & (1 << i))
 395:src/display.c **** 	set_dot(base);
 196              		.loc 1 395 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 396:src/display.c ****       else
 397:src/display.c **** 	clr_dot(base);
 398:src/display.c ****       base++;
 199              		.loc 1 398 7 is_stmt 1 view .LVU55
 391:src/display.c ****     {
 200              		.loc 1 391 19 view .LVU56
 391:src/display.c ****     {
 201              		.loc 1 391 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
ARM GAS  /tmp/ccobNVTR.s 			page 12


 391:src/display.c ****     {
 204              		.loc 1 391 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 395:src/display.c ****       else
 208              		.loc 1 395 2 is_stmt 1 view .LVU59
 397:src/display.c ****       base++;
 209              		.loc 1 397 2 view .LVU60
 394:src/display.c **** 	set_dot(base);
 210              		.loc 1 394 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 394:src/display.c **** 	set_dot(base);
 212              		.loc 1 394 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 394:src/display.c **** 	set_dot(base);
 216              		.loc 1 394 7 is_stmt 1 view .LVU63
 394:src/display.c **** 	set_dot(base);
 217              		.loc 1 394 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 397:src/display.c ****       base++;
 219              		.loc 1 397 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 398 7 is_stmt 1 view .LVU66
 391:src/display.c ****     {
 223              		.loc 1 391 19 view .LVU67
 391:src/display.c ****     {
 224              		.loc 1 391 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 391:src/display.c ****     {
 227              		.loc 1 391 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 399:src/display.c ****     }
 400:src/display.c **** }
 231              		.loc 1 400 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 389:src/display.c **** #endif
 235              		.loc 1 389 5 is_stmt 1 view .LVU71
 389:src/display.c **** #endif
 236              		.loc 1 389 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 389:src/display.c **** #endif
 238              		.loc 1 389 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 389:src/display.c **** #endif
 240              		.loc 1 389 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 389:src/display.c **** #endif
 242              		.loc 1 389 47 view .LVU75
ARM GAS  /tmp/ccobNVTR.s 			page 13


 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 389:src/display.c **** #endif
 246              		.loc 1 389 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 401:src/display.c **** 
 402:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 403:src/display.c ****   if (res) *res++ = ch;
 404:src/display.c ****   else	set_dig(base, ch);
 405:src/display.c ****   return res;
 406:src/display.c **** }
 407:src/display.c **** 
 408:src/display.c **** 
 409:src/display.c **** static void set_digits_string(const char *msg, int j) {
 410:src/display.c ****   for (; *msg != '\0'; msg++) {
 411:src/display.c ****     if (*msg == '.' || *msg == ',')
 412:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 413:src/display.c ****     else {
 414:src/display.c ****       set_dig_s(j, *msg, CNULL);
 415:src/display.c ****       j += SEGS_PER_DIGIT;
 416:src/display.c ****     }
 417:src/display.c ****   }
 418:src/display.c **** }
 419:src/display.c **** 
 420:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 421:src/display.c ****   int i;
 422:src/display.c ****   const int n = res == NULL ? 3 : 4;
 423:src/display.c **** 
 424:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 425:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 426:src/display.c **** }
 427:src/display.c **** 
 428:src/display.c **** /* Force the exponent display
 429:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
ARM GAS  /tmp/ccobNVTR.s 			page 14


 430:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 431:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 432:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 433:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 434:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 435:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 436:src/display.c ****  */
 437:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 438:src/display.c ****   union {
 439:src/display.c ****     char buf[4];
 440:src/display.c ****     int i;
 441:src/display.c ****   } u;
 442:src/display.c ****   int negative;
 443:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 444:src/display.c ****   int thousands;
 445:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 446:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 447:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 448:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 449:src/display.c **** #  else
 450:src/display.c ****   const int show_large_exponent = 1;
 451:src/display.c **** #  endif
 452:src/display.c **** #else
 453:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 454:src/display.c ****   int thousands;
 455:src/display.c **** #  endif
 456:src/display.c ****   const int show_large_exponent = 0;
 457:src/display.c **** #endif
 458:src/display.c **** 
 459:src/display.c ****   negative = flags & 2;
 460:src/display.c ****   if (exp < 0) {
 461:src/display.c ****     negative = 1;
 462:src/display.c ****     exp = -exp;
 463:src/display.c ****   }
 464:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 465:src/display.c ****   thousands = exp / 1000;
 466:src/display.c **** #endif
 467:src/display.c ****   if (res) {
 468:src/display.c **** #ifdef INCLUDE_YREG_CODE
 469:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 470:src/display.c ****     if (thousands != 0) {
 471:src/display.c **** #else
 472:src/display.c ****       if (exp > 999) {
 473:src/display.c **** #endif
 474:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 475:src/display.c **** 	// No exponent separator for large -ve exponents
 476:src/display.c ****       }
 477:src/display.c ****       else *res++ = 'e'; // Normal separator
 478:src/display.c **** #else
 479:src/display.c ****       *res++ = 'e';
 480:src/display.c **** #endif
 481:src/display.c ****       if (negative) *res++ = '-';
 482:src/display.c ****     }
 483:src/display.c ****     else {
 484:src/display.c ****       if (negative) SET_EXP_SIGN;
 485:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 486:src/display.c ****       if (thousands != 0) {
ARM GAS  /tmp/ccobNVTR.s 			page 15


 487:src/display.c **** #else
 488:src/display.c **** 	if (exp > 999) {
 489:src/display.c **** #endif
 490:src/display.c **** 	  if (!show_large_exponent
 491:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 492:src/display.c **** 	      && (flags & 8) == 0
 493:src/display.c **** #endif
 494:src/display.c **** 	      ) {
 495:src/display.c **** #ifdef REALBUILD
 496:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 497:src/display.c **** #else
 498:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 499:src/display.c **** #endif
 500:src/display.c **** 	    goto no_number;
 501:src/display.c **** 	  }
 502:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 503:src/display.c **** 	  else {
 504:src/display.c **** 	    exp -= thousands * 1000;
 505:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 506:src/display.c **** 	    if (flags & 16) {
 507:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 508:src/display.c **** 	      int i;
 509:src/display.c **** 
 510:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 511:src/display.c **** 		// Clear digits and separators
 512:src/display.c **** 		clr_dot(i);
 513:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 514:src/display.c **** 	    }
 515:src/display.c **** #  endif
 516:src/display.c **** 	    if (negative) {
 517:src/display.c **** 	      CLR_EXP_SIGN;
 518:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 519:src/display.c **** 	    }
 520:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 521:src/display.c **** 	    flags = 1;
 522:src/display.c **** 	  }
 523:src/display.c **** #endif
 524:src/display.c **** 	}
 525:src/display.c ****       }
 526:src/display.c **** #ifdef REALBUILD
 527:src/display.c ****       u.i = 0; // Smaller ARM code
 528:src/display.c **** #else
 529:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 530:src/display.c **** #endif
 531:src/display.c ****       if (flags & 5) {
 532:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 533:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 534:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 535:src/display.c **** 	  int i;
 536:src/display.c **** 
 537:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 538:src/display.c **** 	    if (u.buf[i] == '0')
 539:src/display.c **** 	      u.buf[i] = ' ';
 540:src/display.c **** 	    else
 541:src/display.c **** 	      break;
 542:src/display.c **** 	  }
 543:src/display.c **** 	  if (i != 0 && negative) {
ARM GAS  /tmp/ccobNVTR.s 			page 16


 544:src/display.c **** 	    // Move minus sign to right in front of exponent
 545:src/display.c **** 	    CLR_EXP_SIGN;
 546:src/display.c **** 	    u.buf[i - 1] = '-';
 547:src/display.c **** 	  }
 548:src/display.c **** 	}
 549:src/display.c **** #endif
 550:src/display.c ****       }
 551:src/display.c ****       else
 552:src/display.c **** 	num_arg(u.buf, exp);
 553:src/display.c ****     no_number:
 554:src/display.c ****       set_exp_digits_string(u.buf, res);
 555:src/display.c ****     }
 556:src/display.c **** 
 557:src/display.c ****     static void carry_overflow(void) {
 558:src/display.c ****       const int base = SEGS_EXP_BASE;
 559:src/display.c ****       int c;
 560:src/display.c ****       unsigned int b;
 561:src/display.c **** 
 562:src/display.c ****       // Figure out the base
 563:src/display.c ****       switch (State2.smode) {
 564:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 565:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 566:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 567:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 568:src/display.c ****       default:	b = UState.int_base+1;	break;
 569:src/display.c ****       }
 570:src/display.c **** 
 571:src/display.c ****       // Display the base as the first exponent digit
 572:src/display.c ****       if (b > 10 && b < 16)
 573:src/display.c **** 	SET_EXP_SIGN;
 574:src/display.c ****       c = "B34567o9D12345h"[b-2];
 575:src/display.c ****       set_dig(base, c);
 576:src/display.c **** 
 577:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 578:src/display.c ****       if (get_carry())
 579:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 580:src/display.c ****       if (get_overflow())
 581:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 582:src/display.c ****     }
 583:src/display.c **** 
 584:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 585:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 586:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 587:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 588:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 589:src/display.c **** #endif
 590:src/display.c **** 
 591:src/display.c ****     /* Display the annunicator text line.
 592:src/display.c ****      * Care needs to be taken to keep things aligned.
 593:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 594:src/display.c ****      */
 595:src/display.c **** #ifdef TOP_ROW
 596:src/display.c ****     static void annunciators(void) {
 597:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 598:src/display.c ****       char buf[42], *p = buf, *q="";
 599:src/display.c ****       char buf2[42], *p2 = buf2;
 600:src/display.c ****       int n;
ARM GAS  /tmp/ccobNVTR.s 			page 17


 601:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 602:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 603:src/display.c ****       // Constant variables and code branches depending on a constant variable
 604:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 605:src/display.c ****       // feature run-time configurable if needed.
 606:src/display.c **** #ifdef INCLUDE_YREG_CODE
 607:src/display.c **** #  ifdef YREG_ALWAYS_ON
 608:src/display.c ****       const int yreg_enabled = 1;
 609:src/display.c **** #  else
 610:src/display.c ****       const int yreg_enabled = UState.show_y;
 611:src/display.c **** #  endif
 612:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 613:src/display.c ****       const int yreg_hms = 1;
 614:src/display.c **** #  else
 615:src/display.c ****       const int yreg_hms = 0;
 616:src/display.c **** #  endif
 617:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 618:src/display.c ****       const int yreg_fract = 1;
 619:src/display.c **** #  else
 620:src/display.c ****       const int yreg_fract = 0;
 621:src/display.c **** #  endif
 622:src/display.c **** #else
 623:src/display.c ****       const int yreg_enabled = 0;
 624:src/display.c ****       const int yreg_hms = 0;
 625:src/display.c ****       const int yreg_fract = 0;
 626:src/display.c **** #endif
 627:src/display.c **** #ifdef RP_PREFIX
 628:src/display.c ****       const int rp_prefix = 1;
 629:src/display.c **** #else
 630:src/display.c ****       const int rp_prefix = 0;
 631:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 632:src/display.c **** #endif
 633:src/display.c ****       // Indicates whether font escape code is compiled in.
 634:src/display.c ****       // This variable will always be set at compile time.
 635:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 636:src/display.c ****       const int has_FONT_ESCAPE = 1;
 637:src/display.c **** #else
 638:src/display.c ****       const int has_FONT_ESCAPE = 0;
 639:src/display.c **** #endif
 640:src/display.c **** 
 641:src/display.c ****       xset(buf, '\0', sizeof(buf));
 642:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 643:src/display.c ****       
 644:src/display.c ****       if (is_intmode()) {
 645:src/display.c **** #ifdef SHOW_STACK_SIZE
 646:src/display.c **** 	if (shift_char == ' ') {
 647:src/display.c **** 	  *p2++ = '\007';
 648:src/display.c **** 	  *p2++ = '\346';
 649:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 650:src/display.c **** 	}
 651:src/display.c **** 	else
 652:src/display.c **** #endif
 653:src/display.c **** 	  {
 654:src/display.c **** 	    *p2++ = shift_char;
 655:src/display.c **** 	    *p2++ = '\006';
 656:src/display.c **** 	  }
 657:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 18


 658:src/display.c **** 	switch(int_mode()) {
 659:src/display.c **** 	default:
 660:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 661:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 662:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 663:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 664:src/display.c **** 	}
 665:src/display.c **** 	q = scopy(p2, q);
 666:src/display.c **** 	*q++ = '\006';
 667:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 668:src/display.c **** 
 669:src/display.c **** 	if (IntMaxWindow > 0) {
 670:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 671:src/display.c **** 	  if (*q == '1')
 672:src/display.c **** 	    n += 2;
 673:src/display.c **** 	  if (q[1] == '1')
 674:src/display.c **** 	    n += 2;
 675:src/display.c **** 	  while (n-- > 0)
 676:src/display.c **** 	    *p2++ = '\006';
 677:src/display.c **** 
 678:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 679:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 680:src/display.c **** 	}
 681:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 682:src/display.c ****       }
 683:src/display.c ****       else if (!yreg_enabled
 684:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 685:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 686:src/display.c **** #endif
 687:src/display.c **** 	       ) {
 688:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 689:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 690:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 691:src/display.c **** 	if (shift_char == ' ') {
 692:src/display.c **** 	  *p2++ = '\007';
 693:src/display.c **** 	  *p2++ = '\342';
 694:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 695:src/display.c **** 	  *p2++ = '\007';
 696:src/display.c **** 	  *p2++ = '\344';
 697:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 698:src/display.c **** 	}
 699:src/display.c **** 	else
 700:src/display.c **** #endif
 701:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 702:src/display.c **** 	    *p2++ = shift_char;
 703:src/display.c **** 	    *p2++ = '\006';
 704:src/display.c **** 	  }
 705:src/display.c **** 	  else {
 706:src/display.c **** 	    *p2++ = 'D';
 707:src/display.c **** 	  }
 708:src/display.c **** 
 709:src/display.c **** 	if (State2.cmplx) {
 710:src/display.c **** 	  *p2++ = ' ';
 711:src/display.c **** 	  *p2 = '\024';
 712:src/display.c **** 	  goto skip;
 713:src/display.c **** 	}
 714:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccobNVTR.s 			page 19


 715:src/display.c **** 	  *p2++ = ' ';
 716:src/display.c **** 	  *p2 = '\015';
 717:src/display.c **** 	  goto skip;
 718:src/display.c **** 	}
 719:src/display.c **** 
 720:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 721:src/display.c **** 	  if (State2.wascomplex) {
 722:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 723:src/display.c **** 	  }
 724:src/display.c **** 	  else if (rp_prefix) {
 725:src/display.c **** 	    if (RectPolConv == 1) {
 726:src/display.c **** 	      q = "\007\306<";
 727:src/display.c **** 	    }
 728:src/display.c **** 	    else {
 729:src/display.c **** 	      q = "\007\306y";
 730:src/display.c **** 	    }
 731:src/display.c **** 	  }
 732:src/display.c **** 	  p = scopy(buf, q);
 733:src/display.c **** 
 734:src/display.c **** 	  goto display_yreg;
 735:src/display.c **** 	}
 736:src/display.c **** 
 737:src/display.c **** 	switch (UState.date_mode) {
 738:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 739:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 740:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 741:src/display.c **** #endif
 742:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 743:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 744:src/display.c **** #endif
 745:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 746:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 747:src/display.c **** #endif
 748:src/display.c **** #endif
 749:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 750:src/display.c **** 	}
 751:src/display.c **** 	p2 = scopy(p2, q);
 752:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 753:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 754:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 755:src/display.c **** 	}
 756:src/display.c **** #else
 757:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 758:src/display.c **** 	*p2++ = '\007';
 759:src/display.c **** 	*p2++ = '\342';
 760:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 761:src/display.c **** #endif
 762:src/display.c ****       }
 763:src/display.c ****       else { // yreg_enabled
 764:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 765:src/display.c **** 	if (State2.cmplx) {
 766:src/display.c **** 	  *p2++ = '\007';
 767:src/display.c **** 	  *p2++ = '\344';
 768:src/display.c **** 	  *p2++ = shift_char;
 769:src/display.c **** 	  q = "\024";
 770:src/display.c **** 	}
 771:src/display.c **** 	else if (shift_char != ' ') {
ARM GAS  /tmp/ccobNVTR.s 			page 20


 772:src/display.c **** 	  *p2++ = '\007';
 773:src/display.c **** 	  *p2++ = '\307';
 774:src/display.c **** 	  *p2++ = shift_char;
 775:src/display.c **** 	  goto no_copy;
 776:src/display.c **** 	}
 777:src/display.c **** 	else
 778:src/display.c **** #endif
 779:src/display.c **** 	  if (State2.wascomplex) {
 780:src/display.c **** 	    q = "\007\207i";
 781:src/display.c **** 	    p = scopy(p, q);
 782:src/display.c **** 	    goto no_copy;
 783:src/display.c **** 	  }
 784:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 785:src/display.c **** 	    q = "\007\307<";
 786:src/display.c **** 	    p = scopy(p, q);
 787:src/display.c **** 	    goto no_copy;
 788:src/display.c **** 	  }
 789:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 790:src/display.c **** 	    q = "\007\307y";
 791:src/display.c **** 	    p = scopy(p, q);
 792:src/display.c **** 	    goto no_copy;
 793:src/display.c **** 	  }
 794:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 795:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
 796:src/display.c **** 	    q = "\007\207\007";
 797:src/display.c **** 	  }
 798:src/display.c **** #endif
 799:src/display.c **** 	  else {
 800:src/display.c **** #ifndef SHOW_STACK_SIZE
 801:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 802:src/display.c **** #else
 803:src/display.c **** 	    if (is_dblmode()) {
 804:src/display.c **** 	      *p++ = '\007';
 805:src/display.c **** 	      *p++ = '\342';
 806:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
 807:src/display.c **** 	      q = "\007\345D";
 808:src/display.c **** 	    }
 809:src/display.c **** 	    else {
 810:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 811:src/display.c **** 	    }
 812:src/display.c **** #endif
 813:src/display.c **** 	  }
 814:src/display.c **** 	p2 = scopy(p2, q);
 815:src/display.c **** 
 816:src/display.c ****       no_copy:
 817:src/display.c **** 
 818:src/display.c **** 
 819:src/display.c **** 	if (State2.arrow) {
 820:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 821:src/display.c **** 	} else if (State2.runmode) {
 822:src/display.c **** 	  decNumber y;
 823:src/display.c **** 	display_yreg:
 824:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 825:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 826:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 827:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 828:src/display.c **** 	   */
ARM GAS  /tmp/ccobNVTR.s 			page 21


 829:src/display.c **** 	  if (is_intmode()) {
 830:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 831:src/display.c **** 	    goto skip;
 832:src/display.c **** 	  }
 833:src/display.c **** 		      
 834:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 835:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 836:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 837:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 838:src/display.c **** 	    if (yreg_hms && State2.hms) {
 839:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 840:src/display.c **** 
 841:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 842:src/display.c **** 	      UState.nothousands = 1;
 843:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 844:src/display.c **** 	      UState.nothousands = saved_nothousands;
 845:src/display.c **** 	      // First replace the '@' character with the degree symbol
 846:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 847:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 848:src/display.c **** 	      // then remove the fractional part of the seconds.
 849:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 850:src/display.c **** 	      while (*p) {
 851:src/display.c **** 		replace_char(buf, p[0], p[1]);
 852:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 853:src/display.c **** 		  goto skip;
 854:src/display.c **** 		}
 855:src/display.c **** 		p += 2;
 856:src/display.c **** 	      }
 857:src/display.c **** 	      goto skip;
 858:src/display.c **** 	    }
 859:src/display.c **** 	    if (yreg_fract && UState.fract
 860:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 861:src/display.c **** 		&& !State2.cmplx
 862:src/display.c **** #endif
 863:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 864:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 865:src/display.c **** #endif
 866:src/display.c **** 		&& set_x_fract(&y, p)) {
 867:src/display.c **** 	      char ltgteq;
 868:src/display.c **** 
 869:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 870:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 871:src/display.c **** 	      ltgteq = *q;
 872:src/display.c **** 	      switch (ltgteq) {
 873:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 874:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 875:src/display.c **** 	      }
 876:src/display.c **** 	      scopy(q, "\007\344?");
 877:src/display.c **** 	      q[2] = ltgteq;
 878:src/display.c **** 
 879:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 880:src/display.c **** 		goto skip;
 881:src/display.c **** 	      }
 882:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 883:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 884:src/display.c **** 		goto skip;
 885:src/display.c **** 	      }
ARM GAS  /tmp/ccobNVTR.s 			page 22


 886:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 887:src/display.c **** 	    }
 888:src/display.c **** 	  }
 889:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 890:src/display.c **** 	    int extra_pixels;
 891:src/display.c **** 
 892:src/display.c **** 	    set_x_dn(&y, p, &n);
 893:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 894:src/display.c **** 	    if (extra_pixels <= 0)
 895:src/display.c **** 	      break;
 896:src/display.c **** 
 897:src/display.c **** 	    xset(p, '\0', n+10);
 898:src/display.c **** 
 899:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 900:src/display.c **** 	  }
 901:src/display.c **** 	}
 902:src/display.c ****       }
 903:src/display.c ****       
 904:src/display.c ****     skip:	set_status(buf);
 905:src/display.c ****       set_status_top(buf2);
 906:src/display.c ****       
 907:src/display.c ****     }
 908:src/display.c **** #else
 909:src/display.c ****     static void annunciators(void) {
 910:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 911:src/display.c ****       char buf[42], *p = buf, *q="";
 912:src/display.c ****       int n;
 913:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 914:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 915:src/display.c ****       // Constant variables and code branches depending on a constant variable
 916:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 917:src/display.c ****       // feature run-time configurable if needed.
 918:src/display.c **** #ifdef INCLUDE_YREG_CODE
 919:src/display.c **** #  ifdef YREG_ALWAYS_ON
 920:src/display.c ****       const int yreg_enabled = 1;
 921:src/display.c **** #  else
 922:src/display.c ****       const int yreg_enabled = UState.show_y;
 923:src/display.c **** #  endif
 924:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 925:src/display.c ****       const int yreg_hms = 1;
 926:src/display.c **** #  else
 927:src/display.c ****       const int yreg_hms = 0;
 928:src/display.c **** #  endif
 929:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 930:src/display.c ****       const int yreg_fract = 1;
 931:src/display.c **** #  else
 932:src/display.c ****       const int yreg_fract = 0;
 933:src/display.c **** #  endif
 934:src/display.c **** #else
 935:src/display.c ****       const int yreg_enabled = 0;
 936:src/display.c ****       const int yreg_hms = 0;
 937:src/display.c ****       const int yreg_fract = 0;
 938:src/display.c **** #endif
 939:src/display.c **** #ifdef RP_PREFIX
 940:src/display.c ****       const int rp_prefix = 1;
 941:src/display.c **** #else
 942:src/display.c ****       const int rp_prefix = 0;
ARM GAS  /tmp/ccobNVTR.s 			page 23


 943:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 944:src/display.c **** #endif
 945:src/display.c ****       // Indicates whether font escape code is compiled in.
 946:src/display.c ****       // This variable will always be set at compile time.
 947:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 948:src/display.c ****       const int has_FONT_ESCAPE = 1;
 949:src/display.c **** #else
 950:src/display.c ****       const int has_FONT_ESCAPE = 0;
 951:src/display.c **** #endif
 952:src/display.c **** 
 953:src/display.c ****       xset(buf, '\0', sizeof(buf));
 954:src/display.c **** #ifdef TOP_ROW
 955:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 956:src/display.c **** #endif
 957:src/display.c ****       
 958:src/display.c ****       if (is_intmode()) {
 959:src/display.c **** #ifdef SHOW_STACK_SIZE
 960:src/display.c **** 	if (shift_char == ' ') {
 961:src/display.c **** 	  *p++ = '\007';
 962:src/display.c **** 	  *p++ = '\346';
 963:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 964:src/display.c **** 	}
 965:src/display.c **** 	else
 966:src/display.c **** #endif
 967:src/display.c **** 	  {
 968:src/display.c **** 	    *p++ = shift_char;
 969:src/display.c **** 	    *p++ = '\006';
 970:src/display.c **** 	  }
 971:src/display.c **** 
 972:src/display.c **** 	switch(int_mode()) {
 973:src/display.c **** 	default:
 974:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 975:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 976:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 977:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 978:src/display.c **** 	}
 979:src/display.c **** 	q = scopy(p, q);
 980:src/display.c **** 	*q++ = '\006';
 981:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 982:src/display.c **** 
 983:src/display.c **** 	if (IntMaxWindow > 0) {
 984:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 985:src/display.c **** 	  if (*q == '1')
 986:src/display.c **** 	    n += 2;
 987:src/display.c **** 	  if (q[1] == '1')
 988:src/display.c **** 	    n += 2;
 989:src/display.c **** 	  while (n-- > 0)
 990:src/display.c **** 	    *p++ = '\006';
 991:src/display.c **** 
 992:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 993:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 994:src/display.c **** 	}
 995:src/display.c ****       }
 996:src/display.c ****       else if (!yreg_enabled
 997:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 998:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 999:src/display.c **** #endif
ARM GAS  /tmp/ccobNVTR.s 			page 24


1000:src/display.c **** 	       ) {
1001:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1002:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1003:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1004:src/display.c **** 	if (shift_char == ' ') {
1005:src/display.c **** 	  *p++ = '\007';
1006:src/display.c **** 	  *p++ = '\342';
1007:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1008:src/display.c **** 	  *p++ = '\007';
1009:src/display.c **** 	  *p++ = '\344';
1010:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1011:src/display.c **** 	}
1012:src/display.c **** 	else
1013:src/display.c **** #endif
1014:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1015:src/display.c **** 	    *p++ = shift_char;
1016:src/display.c **** 	    *p++ = '\006';
1017:src/display.c **** 	  }
1018:src/display.c **** 	  else {
1019:src/display.c **** 	    *p++ = 'D';
1020:src/display.c **** 	  }
1021:src/display.c **** 
1022:src/display.c **** 	if (State2.cmplx) {
1023:src/display.c **** 	  *p++ = ' ';
1024:src/display.c **** 	  *p = '\024';
1025:src/display.c **** 	  goto skip;
1026:src/display.c **** 	}
1027:src/display.c **** 	if (State2.arrow) {
1028:src/display.c **** 	  *p++ = ' ';
1029:src/display.c **** 	  *p = '\015';
1030:src/display.c **** 	  goto skip;
1031:src/display.c **** 	}
1032:src/display.c **** 
1033:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1034:src/display.c **** 	  if (State2.wascomplex) {
1035:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1036:src/display.c **** 	  }
1037:src/display.c **** 	  else if (rp_prefix) {
1038:src/display.c **** 	    if (RectPolConv == 1) {
1039:src/display.c **** 	      q = "\007\306<";
1040:src/display.c **** 	    }
1041:src/display.c **** 	    else {
1042:src/display.c **** 	      q = "\007\306y";
1043:src/display.c **** 	    }
1044:src/display.c **** 	  }
1045:src/display.c **** 	  p = scopy(buf, q);
1046:src/display.c **** 
1047:src/display.c **** 	  goto display_yreg;
1048:src/display.c **** 	}
1049:src/display.c **** 
1050:src/display.c **** 	switch (UState.date_mode) {
1051:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1052:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1053:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1054:src/display.c **** #endif
1055:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1056:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
ARM GAS  /tmp/ccobNVTR.s 			page 25


1057:src/display.c **** #endif
1058:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1059:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1060:src/display.c **** #endif
1061:src/display.c **** #endif
1062:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1063:src/display.c **** 	}
1064:src/display.c **** 	p = scopy(p, q);
1065:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1066:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1067:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1068:src/display.c **** 	}
1069:src/display.c **** #else
1070:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1071:src/display.c **** 	*p++ = '\007';
1072:src/display.c **** 	*p++ = '\342';
1073:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1074:src/display.c **** #endif
1075:src/display.c ****       }
1076:src/display.c ****       else { // yreg_enabled
1077:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1078:src/display.c **** 	if (State2.cmplx) {
1079:src/display.c **** 	  *p++ = '\007';
1080:src/display.c **** 	  *p++ = '\344';
1081:src/display.c **** 	  *p++ = shift_char;
1082:src/display.c **** 	  q = "\024";
1083:src/display.c **** 	}
1084:src/display.c **** 	else if (shift_char != ' ') {
1085:src/display.c **** 	  *p++ = '\007';
1086:src/display.c **** 	  *p++ = '\307';
1087:src/display.c **** 	  *p++ = shift_char;
1088:src/display.c **** 	  goto no_copy;
1089:src/display.c **** 	}
1090:src/display.c **** 	else
1091:src/display.c **** #endif
1092:src/display.c **** 	  if (State2.wascomplex) {
1093:src/display.c **** 	    q = "\007\207i";
1094:src/display.c **** 	  }
1095:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1096:src/display.c **** 	    q = "\007\307<";
1097:src/display.c **** 	  }
1098:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1099:src/display.c **** 	    q = "\007\307y";
1100:src/display.c **** 	  }
1101:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1102:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1103:src/display.c **** 	    q = "\007\207\007";
1104:src/display.c **** 	  }
1105:src/display.c **** #endif
1106:src/display.c **** 	  else {
1107:src/display.c **** #ifndef SHOW_STACK_SIZE
1108:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1109:src/display.c **** #else
1110:src/display.c **** 	    if (is_dblmode()) {
1111:src/display.c **** 	      *p++ = '\007';
1112:src/display.c **** 	      *p++ = '\342';
1113:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
ARM GAS  /tmp/ccobNVTR.s 			page 26


1114:src/display.c **** 	      q = "\007\345D";
1115:src/display.c **** 	    }
1116:src/display.c **** 	    else {
1117:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1118:src/display.c **** 	    }
1119:src/display.c **** #endif
1120:src/display.c **** 	  }
1121:src/display.c **** 	p = scopy(p, q);
1122:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1123:src/display.c ****       no_copy:
1124:src/display.c **** #endif
1125:src/display.c **** 
1126:src/display.c **** 	if (State2.arrow) {
1127:src/display.c **** 	  scopy(p, "\007\204\006\015");
1128:src/display.c **** 	} else if (State2.runmode) {
1129:src/display.c **** 	  decNumber y;
1130:src/display.c **** 	display_yreg:
1131:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1132:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1133:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1134:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1135:src/display.c **** 	   */
1136:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1137:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1138:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1139:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1140:src/display.c **** 	    if (yreg_hms && State2.hms) {
1141:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1142:src/display.c **** 
1143:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1144:src/display.c **** 	      UState.nothousands = 1;
1145:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1146:src/display.c **** 	      UState.nothousands = saved_nothousands;
1147:src/display.c **** 	      // First replace the '@' character with the degree symbol
1148:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1149:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1150:src/display.c **** 	      // then remove the fractional part of the seconds.
1151:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1152:src/display.c **** 	      while (*p) {
1153:src/display.c **** 		replace_char(buf, p[0], p[1]);
1154:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1155:src/display.c **** 		  goto skip;
1156:src/display.c **** 		}
1157:src/display.c **** 		p += 2;
1158:src/display.c **** 	      }
1159:src/display.c **** 	      goto skip;
1160:src/display.c **** 	    }
1161:src/display.c **** 	    if (yreg_fract && UState.fract
1162:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1163:src/display.c **** 		&& !State2.cmplx
1164:src/display.c **** #endif
1165:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1166:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1167:src/display.c **** #endif
1168:src/display.c **** 		&& set_x_fract(&y, p)) {
1169:src/display.c **** 	      char ltgteq;
1170:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 27


1171:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1172:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1173:src/display.c **** 	      ltgteq = *q;
1174:src/display.c **** 	      switch (ltgteq) {
1175:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1176:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1177:src/display.c **** 	      }
1178:src/display.c **** 	      scopy(q, "\007\344?");
1179:src/display.c **** 	      q[2] = ltgteq;
1180:src/display.c **** 
1181:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1182:src/display.c **** 		goto skip;
1183:src/display.c **** 	      }
1184:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1185:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1186:src/display.c **** 		goto skip;
1187:src/display.c **** 	      }
1188:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1189:src/display.c **** 	    }
1190:src/display.c **** 	  }
1191:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1192:src/display.c **** 	    int extra_pixels;
1193:src/display.c **** 
1194:src/display.c **** 	    set_x_dn(&y, p, &n);
1195:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1196:src/display.c **** 	    if (extra_pixels <= 0)
1197:src/display.c **** 	      break;
1198:src/display.c **** 
1199:src/display.c **** 	    xset(p, '\0', n+10);
1200:src/display.c **** 
1201:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1202:src/display.c **** 	  }
1203:src/display.c **** 	}
1204:src/display.c ****       }
1205:src/display.c ****       
1206:src/display.c ****     skip:	set_status_top(buf);
1207:src/display.c ****     }
1208:src/display.c **** #endif //top_row
1209:src/display.c ****     static void disp_x(const char *p) {
1210:src/display.c ****       int i;
1211:src/display.c ****       int gotdot = -1;
1212:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1213:src/display.c ****       const
1214:src/display.c **** #endif
1215:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1216:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1217:src/display.c ****       int overflow_to_left = 0;
1218:src/display.c **** #endif
1219:src/display.c **** 
1220:src/display.c ****       if (*p == '-') {
1221:src/display.c **** 	SET_MANT_SIGN;
1222:src/display.c **** 	p++;
1223:src/display.c ****       }
1224:src/display.c **** 
1225:src/display.c ****       if (is_intmode()) {
1226:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1227:src/display.c **** 	  set_dig(i, *p);
ARM GAS  /tmp/ccobNVTR.s 			page 28


1228:src/display.c **** 	  i += SEGS_PER_DIGIT;
1229:src/display.c **** 	}
1230:src/display.c **** 	carry_overflow();
1231:src/display.c ****       } else {
1232:src/display.c **** 	set_separator_decimal_modes();
1233:src/display.c **** 
1234:src/display.c **** 	i = 0;
1235:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1236:src/display.c **** 	if ( CmdLineDot > 1 ) {
1237:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1238:src/display.c **** 	  const
1239:src/display.c **** #  endif
1240:src/display.c **** 	    int double_dot = 0;
1241:src/display.c **** 	  int j;
1242:src/display.c **** 
1243:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1244:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1245:src/display.c **** 	      gotdot = j;
1246:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1247:src/display.c **** 	      double_dot = (p[j+1] == '.');
1248:src/display.c **** #  endif
1249:src/display.c **** 	    }
1250:src/display.c **** 	  }
1251:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1252:src/display.c **** 	  if (j > 0) {
1253:src/display.c **** 	    p += j + 1;
1254:src/display.c **** 	    i = SEGS_PER_DIGIT;
1255:src/display.c **** 	    if (gotdot <= j) {
1256:src/display.c **** 	      gotdot = 0;
1257:src/display.c **** 	      if (double_dot)
1258:src/display.c **** 		p++;
1259:src/display.c **** 	    }
1260:src/display.c **** 	    else if (*p == '.') {
1261:src/display.c **** 	      gotdot = 0;
1262:src/display.c **** 	      p++;
1263:src/display.c **** 	      if (!double_dot)
1264:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1265:src/display.c **** 	    }
1266:src/display.c **** 	    else gotdot = -1;
1267:src/display.c **** 	    set_dig(0, '<');
1268:src/display.c **** 	    overflow_to_left = 1;
1269:src/display.c **** 	  }
1270:src/display.c **** 	  else gotdot = -1;
1271:src/display.c **** 	}
1272:src/display.c **** #endif
1273:src/display.c **** 
1274:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1275:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1276:src/display.c **** 	       && *p != 'D'
1277:src/display.c **** #endif
1278:src/display.c **** 	       ; p++) {
1279:src/display.c **** 	  if (*p == '.') {
1280:src/display.c **** 	    if (gotdot < 0)
1281:src/display.c **** 	      gotdot = i;
1282:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1283:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1284:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
ARM GAS  /tmp/ccobNVTR.s 			page 29


1285:src/display.c **** 	      if ( *(p+1) == '.' ) {
1286:src/display.c **** 		p++;
1287:src/display.c **** 	      }
1288:src/display.c **** #  else
1289:src/display.c **** 	      if ( i != gotdot ) {
1290:src/display.c **** #  endif
1291:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1292:src/display.c **** 		i += segs_per_digit;
1293:src/display.c **** 	      }
1294:src/display.c **** 	      else {
1295:src/display.c **** 		if ( CmdLineDot > 1 ) {
1296:src/display.c **** 		  i += segs_per_digit;
1297:src/display.c **** 		}
1298:src/display.c **** 		else {
1299:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1300:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1301:src/display.c **** 		}
1302:src/display.c **** 	      }
1303:src/display.c **** #else
1304:src/display.c **** 	      if (i > 0)
1305:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1306:src/display.c **** 	      else {
1307:src/display.c **** 		set_dig(i, '0');
1308:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1309:src/display.c **** 		i += segs_per_digit;
1310:src/display.c **** 	      }
1311:src/display.c **** #endif
1312:src/display.c **** 	    } else {
1313:src/display.c **** 	      set_dig(i, *p);
1314:src/display.c **** 	      i += segs_per_digit;
1315:src/display.c **** 	    }
1316:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1317:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1318:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1319:src/display.c **** #endif
1320:src/display.c **** 	  }
1321:src/display.c **** 
1322:src/display.c **** 	  /* Implement a floating comma */
1323:src/display.c **** 	  if (gotdot < 0)
1324:src/display.c **** 	    gotdot = i;
1325:src/display.c **** 	  for (;;) {
1326:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1327:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1328:src/display.c **** 	      break;
1329:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1330:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1331:src/display.c **** 	      break;
1332:src/display.c **** #endif
1333:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1334:src/display.c **** 	  }
1335:src/display.c **** 
1336:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1337:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1338:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1339:src/display.c **** 	    int flags = 8;
1340:src/display.c **** #  else
1341:src/display.c **** 	    int flags = 12;
ARM GAS  /tmp/ccobNVTR.s 			page 30


1342:src/display.c **** #  endif
1343:src/display.c **** 
1344:src/display.c **** 	    if (*p == 'D')
1345:src/display.c **** 	      flags |= 2;
1346:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1347:src/display.c **** 	      flags |= 16;
1348:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1349:src/display.c **** 	  }
1350:src/display.c **** #else
1351:src/display.c **** 	  if (*p == 'E') {
1352:src/display.c **** 	    p++;
1353:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1354:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1355:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1356:src/display.c **** #  else
1357:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1358:src/display.c **** #  endif
1359:src/display.c **** 	  } 
1360:src/display.c **** #endif
1361:src/display.c **** 	}
1362:src/display.c ****       }
1363:src/display.c **** 
1364:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1365:src/display.c **** 
1366:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1367:src/display.c **** 	const int ws = word_size();
1368:src/display.c **** 	unsigned int b;
1369:src/display.c **** 	long long int vs = value;
1370:src/display.c **** 	unsigned long long int v;
1371:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1372:src/display.c **** 	int i, j, k;
1373:src/display.c **** 	int sign = 0;
1374:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1375:src/display.c **** 
1376:src/display.c **** 	switch (State2.smode) {
1377:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1378:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1379:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1380:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1381:src/display.c **** 	default:	b = int_base();	break;
1382:src/display.c **** 	}
1383:src/display.c **** 
1384:src/display.c **** 	if (!res) {
1385:src/display.c **** 	  IntMaxWindow = 0;
1386:src/display.c **** 	  carry_overflow();
1387:src/display.c **** 	}
1388:src/display.c **** 
1389:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) {
1390:src/display.c **** 	  v = extract_value(value, &sign);
1391:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1392:src/display.c **** 	    v = value;
1393:src/display.c **** 	  if (v == 0) {
1394:src/display.c **** 	    if (sign)
1395:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1396:src/display.c **** 	    set_dig_s(dig, '0', res);
1397:src/display.c **** 	    return;
1398:src/display.c **** 	  } else
ARM GAS  /tmp/ccobNVTR.s 			page 31


1399:src/display.c **** 	    for (i=0; v != 0; i++) {
1400:src/display.c **** 	      const int r = v % b;
1401:src/display.c **** 	      v /= b;
1402:src/display.c **** 	      buf[i] = DIGITS[r];
1403:src/display.c **** 	    }
1404:src/display.c **** 	} else {
1405:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1406:src/display.c **** 	  if (ws < 64) {
1407:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1408:src/display.c **** 	    vs &= mask;
1409:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1410:src/display.c **** 	      vs |= ~mask;
1411:src/display.c **** 	  }
1412:src/display.c **** 
1413:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1414:src/display.c **** 	    set_dig_s(dig, '0', res);
1415:src/display.c **** 	    return;
1416:src/display.c **** 	  } else if (!UState.leadzero) {
1417:src/display.c **** 	    v = (unsigned long long int)vs;
1418:src/display.c **** 	    for (i=0; v != 0; i++) {
1419:src/display.c **** 	      const int r = v % b;
1420:src/display.c **** 	      v /= b;
1421:src/display.c **** 	      buf[i] = DIGITS[r];
1422:src/display.c **** 	    }
1423:src/display.c **** 	  } else {
1424:src/display.c **** 	    int n;
1425:src/display.c **** 	    const unsigned int b1 = b >> 1;
1426:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1427:src/display.c **** 	    v = (unsigned long long int)vs;
1428:src/display.c **** 
1429:src/display.c **** 	    n = (ws + fac) / (fac+1);
1430:src/display.c **** 	    for (i=0; i<n; i++) {
1431:src/display.c **** 	      const int r = v % b;
1432:src/display.c **** 	      v /= b;
1433:src/display.c **** 	      buf[i] = DIGITS[r];
1434:src/display.c **** 	    }
1435:src/display.c **** 	  }
1436:src/display.c **** 	}
1437:src/display.c **** 
1438:src/display.c **** 	/* At this point i is the number of digits in the output */
1439:src/display.c **** 	if (res) {
1440:src/display.c **** 	  if (sign) *res++ = '-';
1441:src/display.c **** 	  while (--i >= 0)
1442:src/display.c **** 	    *res++ = buf[i];
1443:src/display.c **** 	} else {
1444:src/display.c **** #if 0
1445:src/display.c **** 	  set_separator_decimal_modes();
1446:src/display.c **** 
1447:src/display.c **** 	  // Allows configuration of digit grouping per base
1448:src/display.c **** 	  static const char grouping[] = 
1449:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1450:src/display.c **** 		    //	   2     3     4     5     6     7     8
1451:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1452:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1453:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1454:src/display.c **** 	    : grouping[b - 2] >> 4;
1455:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
ARM GAS  /tmp/ccobNVTR.s 			page 32


1456:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1457:src/display.c **** #else
1458:src/display.c **** 	  // Less flexible but shorter
1459:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1460:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1461:src/display.c **** 	    : b == 16 ? 2 : 3;
1462:src/display.c **** 	  set_separator_decimal_modes();
1463:src/display.c **** #endif
1464:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1465:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1466:src/display.c **** 	    State2.window = 0;
1467:src/display.c **** 	  buf[i] = '\0';
1468:src/display.c **** 
1469:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1470:src/display.c **** 	  for (k = 0; k < 12; k++)
1471:src/display.c **** 	    if (buf[j + k] == '\0')
1472:src/display.c **** 	      break;
1473:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1474:src/display.c **** 	    int ch = buf[j++];
1475:src/display.c **** 	    if (i >= shift)
1476:src/display.c **** 	      ch -= 030;
1477:src/display.c **** 	    set_dig(dig, ch);
1478:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1479:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1480:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1481:src/display.c **** 	  }
1482:src/display.c **** 	  if (sign) {
1483:src/display.c **** 	    if (dig >= 0)
1484:src/display.c **** 	      set_dig(dig, '-');
1485:src/display.c **** 	    else	SET_MANT_SIGN;
1486:src/display.c **** 	  }
1487:src/display.c **** 	}
1488:src/display.c ****       }
1489:src/display.c **** 
1490:src/display.c ****       /* Handle special cases.
1491:src/display.c ****        * return non-zero if the number is special.
1492:src/display.c ****        */
1493:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1494:src/display.c **** 	if (decNumberIsSpecial(x)) {
1495:src/display.c **** 	  if (decNumberIsNaN(x)) {
1496:src/display.c **** 	    if (res) {
1497:src/display.c **** 	      scopy(res, "NaN");
1498:src/display.c **** 	    } else {
1499:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1500:src/display.c **** #ifndef REALBUILD
1501:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1502:src/display.c **** 	      forceDispPlot=0;
1503:src/display.c **** #endif
1504:src/display.c **** 	    }
1505:src/display.c **** 	    return 1;
1506:src/display.c **** 	  } else {
1507:src/display.c **** 	    if (decNumberIsNegative(x)) {
1508:src/display.c **** 	      if (res) *res++ = '-';
1509:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1510:src/display.c **** 	    }
1511:src/display.c **** 	    if (res)
1512:src/display.c **** 	      *res++ = '\237';
ARM GAS  /tmp/ccobNVTR.s 			page 33


1513:src/display.c **** 	    else {
1514:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1515:src/display.c **** #ifndef REALBUILD
1516:src/display.c **** 	      if (decNumberIsNegative(x)) {
1517:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1518:src/display.c **** 	      }
1519:src/display.c **** 	      else {
1520:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1521:src/display.c **** 	      }
1522:src/display.c **** 	      forceDispPlot=0;
1523:src/display.c **** #endif
1524:src/display.c **** 	    }
1525:src/display.c **** 	    return 1;
1526:src/display.c **** 	  }
1527:src/display.c **** 	}
1528:src/display.c **** 	return 0;
1529:src/display.c ****       }
1530:src/display.c **** 
1531:src/display.c **** 
1532:src/display.c ****       /* Extract the two lowest integral digits from the number
1533:src/display.c ****        */
1534:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1535:src/display.c **** 	decNumber n;
1536:src/display.c **** 
1537:src/display.c **** 	decNumberMod(&n, x, &const_100);
1538:src/display.c **** 	*v = dn_to_int(&n);
1539:src/display.c **** 	dn_mulpow10(&n, x, -2);
1540:src/display.c **** 	decNumberTrunc(res, &n);
1541:src/display.c ****       }
1542:src/display.c **** 
1543:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1543 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1544:src/display.c **** 	char b[32];
 276              		.loc 1 1544 2 view .LVU78
1545:src/display.c **** 	int i, j;
 277              		.loc 1 1545 2 view .LVU79
1546:src/display.c **** 
1547:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1547 2 view .LVU80
 279              		.loc 1 1547 12 view .LVU81
1543:src/display.c **** 	char b[32];
 280              		.loc 1 1543 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1548:src/display.c **** 	  if (v == 0)
1549:src/display.c **** 	    b[i] = spaces?' ':'0';
1550:src/display.c **** 	  else {
ARM GAS  /tmp/ccobNVTR.s 			page 34


1551:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1551 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1543:src/display.c **** 	char b[32];
 292              		.loc 1 1543 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1543:src/display.c **** 	char b[32];
 295              		.loc 1 1543 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1547:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1547 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1548:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1548 4 is_stmt 1 view .LVU87
 303              		.loc 1 1551 6 view .LVU88
 304              		.loc 1 1551 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1552:src/display.c **** 	    v /= 10;
 311              		.loc 1 1552 6 is_stmt 1 view .LVU90
1553:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1553 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1547:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1547 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1548:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1548 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1547:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1547 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1553 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1552:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1552 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1553 6 is_stmt 1 view .LVU97
1547:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1547 17 view .LVU98
1547:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1547 12 view .LVU99
1547:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1547 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
ARM GAS  /tmp/ccobNVTR.s 			page 35


 333              	.LVL17:
 334              	.L44:
1547:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1547 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1547:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1547 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1548:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1548 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1549:src/display.c **** 	  else {
 349              		.loc 1 1549 6 is_stmt 1 view .LVU104
1547:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1547 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1547:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1547 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1549:src/display.c **** 	  else {
 355              		.loc 1 1549 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1547:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1547 17 is_stmt 1 view .LVU108
1547:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1547 12 view .LVU109
1547:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1547 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1547:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1547 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1554:src/display.c **** 	  }
1555:src/display.c **** 	}
1556:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1556 2 is_stmt 1 view .LVU112
 371              		.loc 1 1556 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1557:src/display.c **** 	  b[0] = '0';
1558:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 36


1559:src/display.c **** 	/* Copy across and appropriately leading space things
1560:src/display.c **** 	 */
1561:src/display.c **** 	j = *jin;
 374              		.loc 1 1561 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1556:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1556 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1557:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1557 4 is_stmt 1 view .LVU116
1557:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1557 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1561 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1562:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1562 2 view .LVU119
 386              		.loc 1 1562 8 view .LVU120
1561:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1561 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1562 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1563:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1563 4 is_stmt 1 view .LVU123
 395              	.LBB140:
 396              	.LBB141:
 403:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 403 12 view .LVU124
 398              	.LBE141:
 399              	.LBE140:
 400              		.loc 1 1563 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB145:
 403              	.LBB142:
 403:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 403 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 403:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 403 16 view .LVU127
 408              	.LBE142:
 409              	.LBI140:
 402:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 402 14 is_stmt 1 view .LVU128
 411              	.LBB143:
 403:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 403 3 view .LVU129
 403:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 403 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
ARM GAS  /tmp/ccobNVTR.s 			page 37


 403:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 403 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 403:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 403 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 405:src/display.c **** }
 423              		.loc 1 405 3 is_stmt 1 view .LVU133
 405:src/display.c **** }
 424              		.loc 1 405 3 is_stmt 0 view .LVU134
 425              	.LBE143:
 426              	.LBE145:
1564:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1564 4 is_stmt 1 view .LVU135
1562:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1562 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1564 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1562:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1562 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1565:src/display.c **** 	}
1566:src/display.c **** 	*jin = j;
 436              		.loc 1 1566 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1566 2 is_stmt 1 view .LVU140
 440              		.loc 1 1566 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1567:src/display.c **** 	return str;
1568:src/display.c ****       }
 443              		.loc 1 1568 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1566:src/display.c **** 	return str;
 445              		.loc 1 1566 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1567:src/display.c **** 	return str;
 447              		.loc 1 1567 2 is_stmt 1 view .LVU144
 448              		.loc 1 1568 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB146:
 458              	.LBB144:
 404:src/display.c ****   return res;
ARM GAS  /tmp/ccobNVTR.s 			page 38


 459              		.loc 1 404 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 404:src/display.c ****   return res;
 463              		.loc 1 404 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE144:
 470              	.LBE146:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 420:src/display.c ****   int i;
 485              		.loc 1 420 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 421:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 421 3 view .LVU149
 422:src/display.c **** 
 490              		.loc 1 422 3 view .LVU150
 420:src/display.c ****   int i;
 491              		.loc 1 420 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 422:src/display.c **** 
 500              		.loc 1 422 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 424 3 is_stmt 1 view .LVU153
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 424 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
ARM GAS  /tmp/ccobNVTR.s 			page 39


 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB147:
 513              	.LBB148:
 404:src/display.c ****   return res;
 514              		.loc 1 404 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 403:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 403 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 403:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 403 19 view .LVU157
 523              	.LBE148:
 524              	.LBE147:
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 424 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB154:
 528              	.LBB149:
 403:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 403 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 405:src/display.c **** }
 532              		.loc 1 405 3 is_stmt 1 view .LVU160
 405:src/display.c **** }
 533              		.loc 1 405 3 is_stmt 0 view .LVU161
 534              	.LBE149:
 535              	.LBE154:
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 424 36 is_stmt 1 view .LVU162
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 424 13 view .LVU163
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 424 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 425:src/display.c **** }
 542              		.loc 1 425 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB155:
 544              	.LBB150:
 403:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 403 12 discriminator 3 view .LVU166
 403:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 403 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE150:
 548              	.LBE155:
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 424 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB156:
ARM GAS  /tmp/ccobNVTR.s 			page 40


 553              	.LBB151:
 403:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 403 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 403:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 403 16 discriminator 3 view .LVU170
 558              	.LBE151:
 559              	.LBI147:
 402:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 402 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB152:
 403:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 403 3 discriminator 3 view .LVU172
 563              	.LBE152:
 564              	.LBE156:
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 424 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB157:
 569              	.LBB153:
 403:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 403 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 404:src/display.c ****   return res;
 573              		.loc 1 404 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 405:src/display.c **** }
 578              		.loc 1 405 3 view .LVU176
 405:src/display.c **** }
 579              		.loc 1 405 3 is_stmt 0 view .LVU177
 580              	.LBE153:
 581              	.LBE157:
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 424 36 is_stmt 1 view .LVU178
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 424 13 view .LVU179
 424:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 424 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 426:src/display.c **** 
 589              		.loc 1 426 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 426:src/display.c **** 
 591              		.loc 1 426 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
ARM GAS  /tmp/ccobNVTR.s 			page 41


 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1534:src/display.c **** 	decNumber n;
 606              		.loc 1 1534 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1535:src/display.c **** 
 610              		.loc 1 1535 2 view .LVU184
1537:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1537 2 view .LVU185
1534:src/display.c **** 	decNumber n;
 612              		.loc 1 1534 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1534:src/display.c **** 	decNumber n;
 621              		.loc 1 1534 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1537:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1537 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1537:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1537 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1534:src/display.c **** 	decNumber n;
 630              		.loc 1 1534 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1537:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1537 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1538:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1538 2 is_stmt 1 view .LVU192
1538:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1538 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1539:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1539 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1538:src/display.c **** 	dn_mulpow10(&n, x, -2);
ARM GAS  /tmp/ccobNVTR.s 			page 42


 642              		.loc 1 1538 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1539:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1539 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1540:src/display.c ****       }
 649              		.loc 1 1540 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1541:src/display.c **** 
 654              		.loc 1 1541 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1541:src/display.c **** 
 661              		.loc 1 1541 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1569:src/display.c **** 
1570:src/display.c **** 
1571:src/display.c ****       /* Display the number in H.MS mode.
1572:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1573:src/display.c ****        */
1574:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1575:src/display.c **** 	decNumber x, y, a, t, u;
1576:src/display.c **** 	int j=0;
1577:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1578:src/display.c **** 	unsigned int hr, min, sec, fs;
1579:src/display.c **** 
1580:src/display.c **** 	if (check_special_dn(rgx, res)) {
1581:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1582:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1583:src/display.c **** 	  return;
1584:src/display.c **** 	}
1585:src/display.c **** 
1586:src/display.c **** 	set_separator_decimal_modes();
ARM GAS  /tmp/ccobNVTR.s 			page 43


1587:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1588:src/display.c **** 	dn_abs(&a, rgx);
1589:src/display.c **** 	if (decNumberIsNegative(&x)) {
1590:src/display.c **** 	  if (res != NULL)
1591:src/display.c **** 	    *res++ += '-';
1592:src/display.c **** 	  else
1593:src/display.c **** 	    SET_MANT_SIGN;
1594:src/display.c **** 	  dn_minus(&x, &x);
1595:src/display.c **** 	}
1596:src/display.c **** 
1597:src/display.c **** 	decNumberHR2HMS(&y, &x);
1598:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1599:src/display.c **** 	decNumberRound(&u, &t);
1600:src/display.c **** 
1601:src/display.c **** 	hms_step(&t, &u, &fs);
1602:src/display.c **** 	hms_step(&u, &t, &sec);
1603:src/display.c **** 	hms_step(&t, &u, &min);
1604:src/display.c **** 	hr = dn_to_int(&t);
1605:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1606:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1607:src/display.c **** 
1608:src/display.c **** 	// degrees
1609:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1610:src/display.c **** 	res = set_dig_s(j, '@', res);
1611:src/display.c **** 	j += SEGS_PER_DIGIT;
1612:src/display.c **** 
1613:src/display.c **** 	// minutes
1614:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1615:src/display.c **** 	res = set_dig_s(j, '\'', res);
1616:src/display.c **** 	j += SEGS_PER_DIGIT;
1617:src/display.c **** 
1618:src/display.c **** 	// seconds
1619:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1620:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1621:src/display.c **** 
1622:src/display.c **** 	// Fractional seconds
1623:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1624:src/display.c **** 
1625:src/display.c **** 	// We're now pointing at the exponent's first digit...
1626:src/display.c **** 	res = set_dig_s(j, '"', res);
1627:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1628:src/display.c **** 
1629:src/display.c **** 	// Check for values too big or small
1630:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1631:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1632:src/display.c **** 	} else if (! dn_eq0(&a)) {
1633:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1634:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1635:src/display.c **** 	  }
1636:src/display.c **** 	}
1637:src/display.c ****       }
1638:src/display.c **** 
1639:src/display.c **** 
1640:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1641:src/display.c **** 	decNumber x, w, n, d, t;
1642:src/display.c **** 	char buf[32], *p = buf;
1643:src/display.c **** 	int j;
ARM GAS  /tmp/ccobNVTR.s 			page 44


1644:src/display.c **** 
1645:src/display.c **** 	if (check_special_dn(rgx, res))
1646:src/display.c **** 	  return 1;
1647:src/display.c **** 	dn_abs(&x, rgx);
1648:src/display.c **** 	if (dn_ge(&x, &const_100000))
1649:src/display.c **** 	  return 0;
1650:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1651:src/display.c **** 	  return 0;
1652:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1653:src/display.c **** 	  if (res != NULL)
1654:src/display.c **** 	    *res++ += '-';
1655:src/display.c **** 	  else
1656:src/display.c **** 	    SET_MANT_SIGN;
1657:src/display.c **** 	}
1658:src/display.c **** 	decNumberFrac(&w, &x);
1659:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1660:src/display.c **** 
1661:src/display.c **** 	dn_divide(&t, &n, &d);
1662:src/display.c **** 	dn_compare(&t, &t, &w);
1663:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1664:src/display.c **** 
1665:src/display.c **** 	if (dn_eq(&n, &d)) {
1666:src/display.c **** 	  dn_inc(&w);
1667:src/display.c **** 	  decNumberZero(&n);
1668:src/display.c **** 	}
1669:src/display.c **** 
1670:src/display.c **** 	if (!UState.improperfrac) {
1671:src/display.c **** 	  if (!dn_eq0(&w)) {
1672:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1673:src/display.c **** 	    *p++ = ' ';
1674:src/display.c **** 	  }
1675:src/display.c **** 	} else {
1676:src/display.c **** 	  dn_multiply(&x, &w, &d);
1677:src/display.c **** 	  dn_add(&n, &n, &x);
1678:src/display.c **** 	}
1679:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1680:src/display.c **** 	*p++ = '/';
1681:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1682:src/display.c **** 	*p = '\0';
1683:src/display.c **** 	if ((p - 12) > buf) {
1684:src/display.c **** 	  p -= 12;
1685:src/display.c **** 	  *p = '<';
1686:src/display.c **** 	} else	p = buf;
1687:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1688:src/display.c **** 	  res = set_dig_s(j, *p, res);
1689:src/display.c **** 	  j += SEGS_PER_DIGIT;
1690:src/display.c **** 	}
1691:src/display.c **** 
1692:src/display.c **** 	if (dn_eq0(&t))
1693:src/display.c **** 	  p = (char *)S7_fract_EQ;
1694:src/display.c **** 	else if (decNumberIsNegative(&t))
1695:src/display.c **** 	  p = (char *)S7_fract_LT;
1696:src/display.c **** 	else
1697:src/display.c **** 	  p = (char *)S7_fract_GT;
1698:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1699:src/display.c **** 	  res = set_dig_s(j, *p, res);
1700:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccobNVTR.s 			page 45


1701:src/display.c **** 	}
1702:src/display.c **** 	return 1;
1703:src/display.c ****       }
1704:src/display.c **** 
1705:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1706:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1707:src/display.c **** 	decNumber c;
1708:src/display.c **** 	int true_exp, x=0;
1709:src/display.c **** 	int min_pos_exp, max_neg_exp;
1710:src/display.c **** 
1711:src/display.c **** 	if ( mode != MODE_STD ) {
1712:src/display.c **** 	  min_pos_exp = 9;
1713:src/display.c **** 	  max_neg_exp = -5;
1714:src/display.c **** 	}
1715:src/display.c **** 	else {
1716:src/display.c **** 	  min_pos_exp = 12;
1717:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1718:src/display.c **** 	}
1719:src/display.c **** 
1720:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1721:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1722:src/display.c **** 
1723:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1724:src/display.c **** 	  x = *dd;
1725:src/display.c **** 	}
1726:src/display.c **** 
1727:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1728:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1729:src/display.c **** 	  *dd += -true_exp;
1730:src/display.c **** 	  return MODE_FIX;
1731:src/display.c **** 	}
1732:src/display.c **** 
1733:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1734:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1735:src/display.c **** 	}
1736:src/display.c **** 	else {
1737:src/display.c **** 	  return MODE_STD;
1738:src/display.c **** 	}
1739:src/display.c ****       }
1740:src/display.c **** #else
1741:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1742:src/display.c **** 	decNumber b, c;
1743:src/display.c **** 
1744:src/display.c **** 	dn_1(&b);
1745:src/display.c **** 	b.exponent -= UState.dispdigs;
1746:src/display.c **** 	dn_abs(&c, z);
1747:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1748:src/display.c **** 	  return MODE_FIX;
1749:src/display.c **** 	return MODE_STD;
1750:src/display.c ****       }
1751:src/display.c **** #endif
1752:src/display.c **** 
1753:src/display.c ****       /* SHOW display mode
1754:src/display.c ****        * in double precision show left or right part
1755:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1756:src/display.c ****        */
1757:src/display.c ****       static void show_x(char *x, int exp) {
ARM GAS  /tmp/ccobNVTR.s 			page 46


1758:src/display.c **** 	const int dbl = is_dblmode();
1759:src/display.c **** 	char *p;
1760:src/display.c **** 	int i, j;
1761:src/display.c **** 	char *upper_str;
1762:src/display.c **** 	enum separator_modes separator_mode;
1763:src/display.c **** 	char decimal_mark;
1764:src/display.c **** 	char thousands_sep;
1765:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1766:src/display.c **** 	const int grouping = 0;
1767:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1768:src/display.c **** 	const int grouping = !UState.nothousands;
1769:src/display.c **** #else
1770:src/display.c **** 	const int grouping = 1;
1771:src/display.c **** #endif
1772:src/display.c **** 	int negative;
1773:src/display.c **** 
1774:src/display.c **** 	if (x[0] == '-') {
1775:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1776:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1777:src/display.c **** 
1778:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1779:src/display.c **** 	  xcopy(x, small_minus, 4);
1780:src/display.c **** 	  x += 4;
1781:src/display.c **** 	  negative = 4;
1782:src/display.c **** #else
1783:src/display.c **** 	  ++x;
1784:src/display.c **** 	  negative = 1;
1785:src/display.c **** #endif
1786:src/display.c **** 	}
1787:src/display.c **** 	else negative = 0;
1788:src/display.c **** 
1789:src/display.c **** 	p = find_char(x, '\0');
1790:src/display.c **** 	xset(p, '0', 34 - (p - x));
1791:src/display.c **** 
1792:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1793:src/display.c **** 	  separator_mode = SEP_COMMA;
1794:src/display.c **** 	  decimal_mark = '.';
1795:src/display.c **** 	  thousands_sep = ',';
1796:src/display.c **** 	}
1797:src/display.c **** 	else {
1798:src/display.c **** 	  separator_mode = SEP_DOT;
1799:src/display.c **** 	  decimal_mark = ',';
1800:src/display.c **** 	  thousands_sep = '.';
1801:src/display.c **** 	}
1802:src/display.c **** 
1803:src/display.c **** 	if (State2.window) { // right half in double precision mode
1804:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1805:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1806:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1807:src/display.c **** 
1808:src/display.c **** 	  upper_str = x + 3;
1809:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1810:src/display.c **** 	  if (grouping) {
1811:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1812:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1813:src/display.c **** 	    x += 3 + 13 + 7;
1814:src/display.c **** 	  }
ARM GAS  /tmp/ccobNVTR.s 			page 47


1815:src/display.c **** 	  else x += 3 + 13 + 6;
1816:src/display.c **** #else
1817:src/display.c **** 	  upper_str = x + 13;
1818:src/display.c **** 	  xset(upper_str, '.', 3);
1819:src/display.c **** 	  if (grouping) {
1820:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1821:src/display.c **** 	    upper_str[6] = thousands_sep;
1822:src/display.c **** 	    x += 13 + 3 + 7;
1823:src/display.c **** 	  }
1824:src/display.c **** 	  else x += 13 + 3 + 6;
1825:src/display.c **** #endif
1826:src/display.c **** 	  negative = 0;
1827:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1828:src/display.c **** 	}
1829:src/display.c **** 	else {
1830:src/display.c **** 	  upper_str = x;
1831:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1832:src/display.c **** 	  x[1] = decimal_mark;
1833:src/display.c **** 	  if (grouping) {
1834:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1835:src/display.c **** 	    x[5] = thousands_sep;
1836:src/display.c **** 	    x += 9;
1837:src/display.c **** 	  }
1838:src/display.c **** 	  else x += 8;
1839:src/display.c **** 	  if (dbl) {
1840:src/display.c **** 	    if (exp < 0) {
1841:src/display.c **** 	      x[9] = '-';
1842:src/display.c **** 	      exp = -exp;
1843:src/display.c **** 	    }
1844:src/display.c **** 	    else
1845:src/display.c **** 	      x[9] = ' ';
1846:src/display.c **** 	    j = exp / 1000;
1847:src/display.c **** 	    x[10] = '0' + j;
1848:src/display.c **** 	    exp -= 1000 * j;
1849:src/display.c **** 	  }
1850:src/display.c **** 	  else {
1851:src/display.c **** 	    x[9] = '\0';
1852:src/display.c **** 	    x[10] = '\0';
1853:src/display.c **** 	  }
1854:src/display.c **** 	  xcopy(x + 1, x, 11);
1855:src/display.c **** 	  *x = 0;
1856:src/display.c **** 	  set_exp(exp, 1, CNULL);
1857:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1858:src/display.c **** 	}
1859:src/display.c **** 	if (grouping) {
1860:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1861:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1862:src/display.c **** 	  }
1863:src/display.c **** 	}
1864:src/display.c **** 
1865:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1866:src/display.c **** 	  set_dig(j, x[i]);
1867:src/display.c **** 
1868:src/display.c **** 	*x = '\0';
1869:src/display.c **** 	set_status(upper_str - negative);
1870:src/display.c ****       }
1871:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 48


1872:src/display.c **** 
1873:src/display.c ****       /* Display the X register in the numeric portion of the display.
1874:src/display.c ****        * We have to account for the various display modes and numbers of
1875:src/display.c ****        * digits.
1876:src/display.c ****        */
1877:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1878:src/display.c **** 	decNumber z;
1879:src/display.c **** 	int digits = DISPLAY_DIGITS;
1880:src/display.c **** 
1881:src/display.c **** 	if (dbl)
1882:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1883:src/display.c **** 	else
1884:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1885:src/display.c **** 	set_x_dn(&z, res, &digits);
1886:src/display.c ****       }
1887:src/display.c **** 
1888:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1889:src/display.c **** 	char x[50], *obp = x;
1890:src/display.c **** 	int odig = 0;
1891:src/display.c **** 	int show_exp = 0;
1892:src/display.c **** 	int j;
1893:src/display.c **** 	char mantissa[64];
1894:src/display.c **** 	int exp = 0;
1895:src/display.c **** 	char *p = mantissa;
1896:src/display.c **** 	char *r;
1897:src/display.c **** 	const char *q;
1898:src/display.c **** 	int count, i;
1899:src/display.c **** 	int extra_digits = 0;
1900:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1901:src/display.c **** 	int dd;
1902:src/display.c **** 	int dispdigs;
1903:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1904:src/display.c **** #else
1905:src/display.c **** 	int dd = UState.dispdigs;
1906:src/display.c **** 	int mode = UState.dispmode;
1907:src/display.c **** #endif
1908:src/display.c **** 	int c;
1909:src/display.c **** 	int negative = 0;
1910:src/display.c **** 	int trimzeros = 0;
1911:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1912:src/display.c **** 	const int show_large_exponent = 0;
1913:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1914:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1915:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1916:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1917:src/display.c **** #else
1918:src/display.c **** 	const int show_large_exponent = 1;
1919:src/display.c **** #endif
1920:src/display.c **** 
1921:src/display.c **** 	set_separator_decimal_modes();
1922:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1923:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1924:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1925:src/display.c **** 	    if (State2.hms) {
1926:src/display.c **** 	      set_x_hms(z, res);
1927:src/display.c **** 	      return;
1928:src/display.c **** 	    }
ARM GAS  /tmp/ccobNVTR.s 			page 49


1929:src/display.c **** 	    else if (UState.fract) {
1930:src/display.c **** 	      if (set_x_fract(z, res))
1931:src/display.c **** 		return;
1932:src/display.c **** 	    }
1933:src/display.c **** 	  }
1934:src/display.c **** 	}		
1935:src/display.c **** #else
1936:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1937:src/display.c **** 	  if (State2.hms) {
1938:src/display.c **** 	    set_x_hms(z, res);
1939:src/display.c **** 	    State2.hms = 0;
1940:src/display.c **** 	    return;
1941:src/display.c **** 	  } else if (UState.fract) {
1942:src/display.c **** 	    if (set_x_fract(z, res))
1943:src/display.c **** 	      return;
1944:src/display.c **** 	  }
1945:src/display.c **** 	}
1946:src/display.c **** #endif
1947:src/display.c **** 
1948:src/display.c **** 	if (check_special_dn(z, res))
1949:src/display.c **** 	  return;
1950:src/display.c **** 
1951:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1952:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1953:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1954:src/display.c **** 	  z->exponent = 0;
1955:src/display.c **** 	}
1956:src/display.c **** 
1957:src/display.c **** 	xset(x, '\0', sizeof(x));
1958:src/display.c **** 
1959:src/display.c **** 	if (dn_eq0(z)) {
1960:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1961:src/display.c **** 	    x[0] = '-';
1962:src/display.c **** 	    x[1] = '0';
1963:src/display.c **** 	  } else
1964:src/display.c **** 	    x[0] = '0';
1965:src/display.c **** 	} else
1966:src/display.c **** 	  decNumberToString(z, x);
1967:src/display.c **** 
1968:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1969:src/display.c **** 	  show_x(x, exp);
1970:src/display.c **** 	  return;
1971:src/display.c **** 	}
1972:src/display.c **** 
1973:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1974:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1975:src/display.c **** 	  //  ALL mode: fill the display
1976:src/display.c **** 	  dd = *display_digits - 1;
1977:src/display.c **** 	else
1978:src/display.c **** 	  dd = dispdigs;
1979:src/display.c **** 
1980:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1981:src/display.c **** 	  int orig_mode = mode;
1982:src/display.c **** 
1983:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1984:src/display.c **** 	  if (orig_mode != MODE_SIG0)
1985:src/display.c **** 	    // allow zeros to be trimmed
ARM GAS  /tmp/ccobNVTR.s 			page 50


1986:src/display.c **** 	    trimzeros = 1;
1987:src/display.c **** 	  if (orig_mode == MODE_STD)
1988:src/display.c **** 	    dd = *display_digits - 1;
1989:src/display.c ****  	}
1990:src/display.c **** #else
1991:src/display.c **** 	if (mode == MODE_STD) {
1992:src/display.c **** 	  mode = std_round_fix(z);
1993:src/display.c **** 	  trimzeros = 1;
1994:src/display.c **** 	  dd = *display_digits - 1;
1995:src/display.c **** 	} else if (dd >= *display_digits)
1996:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
1997:src/display.c **** 	  dd = *display_digits - 1;
1998:src/display.c **** #endif
1999:src/display.c **** 
2000:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2001:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2002:src/display.c **** 
2003:src/display.c **** 	q = find_char(x, 'E');
2004:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2005:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2006:src/display.c **** 	if (q == NULL) exp = 0;
2007:src/display.c **** 	else {
2008:src/display.c **** 	  exp = s_to_i(q+1);
2009:src/display.c **** 	  if (*q == 'D') exp = -exp;
2010:src/display.c **** 	}
2011:src/display.c **** #else
2012:src/display.c **** 	if (q == NULL) exp = 0;
2013:src/display.c **** 	else exp = s_to_i(q+1);
2014:src/display.c **** #endif
2015:src/display.c **** 
2016:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2017:src/display.c **** 	for (q=x; *q == ' '; q++);
2018:src/display.c **** 	if (!res) {
2019:src/display.c **** 	  CLR_EXP_SIGN;
2020:src/display.c **** 	  CLR_MANT_SIGN;
2021:src/display.c **** 	}
2022:src/display.c **** 	if (*q == '-') {
2023:src/display.c **** 	  negative = 1;
2024:src/display.c **** 	  q++;
2025:src/display.c **** 	} else if (*q == '+')
2026:src/display.c **** 	  q++;
2027:src/display.c **** 	for (; *q == '0'; q++);
2028:src/display.c **** 	if (*q == '.') {
2029:src/display.c **** 	  do
2030:src/display.c **** 	    exp--;
2031:src/display.c **** 	  while (*++q == '0');
2032:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2033:src/display.c **** 	    *p++ = *q++;
2034:src/display.c **** 	} else {
2035:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2036:src/display.c **** 	    *p++ = *q++;
2037:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2038:src/display.c **** 	    *p++ = *q++;
2039:src/display.c **** 	    exp++;
2040:src/display.c **** 	  }
2041:src/display.c **** 	  if (*q == '.') {
2042:src/display.c **** 	    q++;
ARM GAS  /tmp/ccobNVTR.s 			page 51


2043:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2044:src/display.c **** 	      *p++ = *q++;
2045:src/display.c **** 	  }
2046:src/display.c **** 	}
2047:src/display.c **** 
2048:src/display.c **** 	if (mode == MODE_FIX) {
2049:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2050:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2051:src/display.c **** 	  else {
2052:src/display.c **** 	    extra_digits = exp;
2053:src/display.c **** 	    /* We might have push the fixed decimals off the
2054:src/display.c **** 	     * screen so adjust if so.
2055:src/display.c **** 	     */
2056:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2057:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2058:src/display.c **** 	  }
2059:src/display.c **** 	}
2060:src/display.c **** 
2061:src/display.c **** 	// Round the mantissa to the number of digits desired
2062:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2063:src/display.c **** 	if (*p >= '5') {	// Round up
2064:src/display.c **** 	  *p = '0';
2065:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2066:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2067:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2068:src/display.c **** 	    mantissa[0] = '1';
2069:src/display.c **** 	    exp++;
2070:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2071:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2072:src/display.c **** 	      extra_digits = 0;
2073:src/display.c **** 	    }
2074:src/display.c **** 	  } else {
2075:src/display.c **** 	    while (*--p == '9')
2076:src/display.c **** 	      *p = '0';
2077:src/display.c **** 	    (*p)++;
2078:src/display.c **** 	  }
2079:src/display.c **** 	}
2080:src/display.c **** 
2081:src/display.c **** 	// Zap what is left
2082:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2083:src/display.c **** 
2084:src/display.c **** 	p = mantissa;
2085:src/display.c **** 	switch (mode) {
2086:src/display.c **** 	default:
2087:src/display.c **** 	case MODE_STD:   
2088:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2089:src/display.c **** 	  if (count != *display_digits)
2090:src/display.c **** 	    count++;
2091:src/display.c **** 	  // Too big or too small to fit on display
2092:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2093:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2094:src/display.c **** 	    case -1:
2095:src/display.c **** 	    case 2:
2096:src/display.c **** 	      *obp++ = *p++;
2097:src/display.c **** 	      odig++;
2098:src/display.c **** 	      dd--;
2099:src/display.c **** 	      exp--;
ARM GAS  /tmp/ccobNVTR.s 			page 52


2100:src/display.c **** 	    case -2:
2101:src/display.c **** 	    case 1:
2102:src/display.c **** 	      *obp++ = *p++;
2103:src/display.c **** 	      odig++;
2104:src/display.c **** 	      dd--;
2105:src/display.c **** 	      exp--;
2106:src/display.c **** 	    case 0:
2107:src/display.c **** 	      ;
2108:src/display.c **** 	    };
2109:src/display.c **** 	    *obp++ = *p++;
2110:src/display.c **** 	    odig++;
2111:src/display.c **** 	    *obp++ = '.';
2112:src/display.c **** 	    for (i=1; i<count; i++) {
2113:src/display.c **** 	      *obp++ = *p++;
2114:src/display.c **** 	      odig++;
2115:src/display.c **** 	    }
2116:src/display.c **** 	    show_exp = 1;
2117:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2118:src/display.c **** 	    for(i=0; i<=exp; i++) {
2119:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2120:src/display.c **** 		*obp++ = ',';
2121:src/display.c **** 	      *obp++ = *p++;
2122:src/display.c **** 	      odig++;
2123:src/display.c **** 	    }
2124:src/display.c **** 	    *obp++ = '.';
2125:src/display.c **** 	    if (count > (exp + 1)) {
2126:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2127:src/display.c **** 		*obp++ = *p++;
2128:src/display.c **** 		odig++;
2129:src/display.c **** 	      }
2130:src/display.c **** 	    }
2131:src/display.c **** 	  } else {		// All digits to right of decimal point
2132:src/display.c **** 	    *obp++ = '0';
2133:src/display.c **** 	    odig++;
2134:src/display.c **** 	    *obp++ = '.';
2135:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2136:src/display.c **** 	      *obp++ = '0';
2137:src/display.c **** 	      odig++;
2138:src/display.c **** 	    }
2139:src/display.c **** 	    for (i=0; i<count; i++) {
2140:src/display.c **** 	      *obp++ = *p++;
2141:src/display.c **** 	      odig++;
2142:src/display.c **** 	    }
2143:src/display.c **** 	  }
2144:src/display.c **** 	  break;
2145:src/display.c **** 
2146:src/display.c **** 	case MODE_FIX:
2147:src/display.c **** 	  j = 0;
2148:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2149:src/display.c **** 	    for (i=0; i<=exp; i++) {
2150:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2151:src/display.c **** 		*obp++ = ',';
2152:src/display.c **** 	      *obp++ = *p++;
2153:src/display.c **** 	      odig++;
2154:src/display.c **** 	    }
2155:src/display.c **** 	    *obp++ = '.';
2156:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
ARM GAS  /tmp/ccobNVTR.s 			page 53


2157:src/display.c **** 	      *obp++ = *p++;
2158:src/display.c **** 	      odig++;
2159:src/display.c **** 	    }
2160:src/display.c **** 	  } else {		// All digits to right of decimal point
2161:src/display.c **** 	    *obp++ = '0';
2162:src/display.c **** 	    odig++;
2163:src/display.c **** 	    *obp++ = '.';
2164:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2165:src/display.c **** 	      *obp++ = '0';
2166:src/display.c **** 	      odig++;
2167:src/display.c **** 	      dd--;
2168:src/display.c **** 	    }
2169:src/display.c **** 	    while (dd-- > 0) {
2170:src/display.c **** 	      *obp++ = *p++;
2171:src/display.c **** 	      odig++;
2172:src/display.c **** 	    }
2173:src/display.c **** 	  }
2174:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2175:src/display.c **** 	  if (trimzeros)
2176:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2177:src/display.c **** 	      obp--;
2178:src/display.c **** 	      odig--;
2179:src/display.c **** 	    }
2180:src/display.c **** #endif			
2181:src/display.c **** 	  break;
2182:src/display.c **** 
2183:src/display.c **** 	case MODE_ENG:
2184:src/display.c **** 	  switch (exp % 3) {
2185:src/display.c **** 	  case -1:
2186:src/display.c **** 	  case 2:
2187:src/display.c **** 	    *obp++ = *p++;
2188:src/display.c **** 	    odig++;
2189:src/display.c **** 	    dd--;
2190:src/display.c **** 	    exp--;
2191:src/display.c **** 	  case -2:
2192:src/display.c **** 	  case 1:
2193:src/display.c **** 	    *obp++ = *p++;
2194:src/display.c **** 	    odig++;
2195:src/display.c **** 	    dd--;
2196:src/display.c **** 	    exp--;
2197:src/display.c **** 	  case 0:
2198:src/display.c **** 	    ;
2199:src/display.c **** 	  };
2200:src/display.c **** 	  // Falling through
2201:src/display.c **** 
2202:src/display.c **** 	case MODE_SCI:
2203:src/display.c **** 	  *obp++ = *p++;
2204:src/display.c **** 	  odig++;
2205:src/display.c **** 	  *obp++ = '.';
2206:src/display.c **** 	  dd--;
2207:src/display.c **** 	  while (dd-- >= 0) {
2208:src/display.c **** 	    *obp++ = *p++;
2209:src/display.c **** 	    odig++;
2210:src/display.c **** 	  }
2211:src/display.c **** 	  show_exp = 1;
2212:src/display.c **** 	}
2213:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
ARM GAS  /tmp/ccobNVTR.s 			page 54


2214:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2215:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2216:src/display.c **** 	    obp--;
2217:src/display.c **** 	    odig--;
2218:src/display.c **** 	  }
2219:src/display.c **** #endif	
2220:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2221:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2222:src/display.c **** 	  set_x_dn(z, res, display_digits);
2223:src/display.c **** 	  return;
2224:src/display.c **** 	}
2225:src/display.c **** 	/* Finally, send the output to the display */
2226:src/display.c **** 	*obp = '\0';
2227:src/display.c **** 	if (odig > *display_digits)
2228:src/display.c **** 	  odig = *display_digits;
2229:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2230:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2231:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2232:src/display.c **** 	if (negative) {
2233:src/display.c **** 	  if (res) *res++ = '-';
2234:src/display.c **** 	  else {
2235:src/display.c **** 	    if (j == 0)
2236:src/display.c **** 	      SET_MANT_SIGN;
2237:src/display.c **** 	    else
2238:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2239:src/display.c **** 	  }
2240:src/display.c **** 	}
2241:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2242:src/display.c **** 	  if (c == '.') {
2243:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2244:src/display.c **** 	  } else if (c == ',') {
2245:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2246:src/display.c **** 	  } else {
2247:src/display.c **** 	    res = set_dig_s(j, c, res);
2248:src/display.c **** 	    j += SEGS_PER_DIGIT;
2249:src/display.c **** 	  }
2250:src/display.c **** 	}
2251:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2252:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2253:src/display.c **** 	  if ( !res ) {
2254:src/display.c **** 	    set_exp(exp, 4, res);
2255:src/display.c **** 	  }
2256:src/display.c **** 	  else {
2257:src/display.c **** 	    set_exp(exp, 0, res);
2258:src/display.c **** 	  }
2259:src/display.c **** 	}
2260:src/display.c **** #else
2261:src/display.c **** 	if (show_exp)
2262:src/display.c **** 	  set_exp(exp, 0, res);
2263:src/display.c **** #endif
2264:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2265:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2266:src/display.c **** 	*display_digits = odig;
2267:src/display.c ****       }
2268:src/display.c **** 
2269:src/display.c **** #if defined(QTGUI) || defined(IOS)
2270:src/display.c ****       void format_display(char *buf) {
ARM GAS  /tmp/ccobNVTR.s 			page 55


2271:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2272:src/display.c **** 	  {
2273:src/display.c **** 	    const char *p = get_cmdline();
2274:src/display.c **** 	    if (p == NULL) {
2275:src/display.c **** 	      format_reg(regX_idx, buf);
2276:src/display.c **** 	    } else {
2277:src/display.c **** 	      scopy(buf, p);
2278:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2279:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2280:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2281:src/display.c **** 		buf[CmdLineEex] = 'E';
2282:src/display.c **** 		buf[CmdLineEex+1] = '-';
2283:src/display.c **** 	      }
2284:src/display.c **** #  endif
2285:src/display.c **** 	    }
2286:src/display.c **** 	  }
2287:src/display.c **** 	else {
2288:src/display.c **** 	  buf[0]=0;
2289:src/display.c **** 	}
2290:src/display.c ****       }
2291:src/display.c **** #endif
2292:src/display.c **** 
2293:src/display.c ****       void format_reg(int index, char *buf) {
2294:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2295:src/display.c **** 
2296:src/display.c **** 	if (is_intmode())
2297:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2298:src/display.c **** #ifndef HP16C_MODE_CHANGE
2299:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2300:src/display.c **** 	  decNumber x;
2301:src/display.c **** 	  int s;
2302:src/display.c **** 	  unsigned long long int v;
2303:src/display.c **** 
2304:src/display.c **** 	  getRegister(&x, index);
2305:src/display.c **** 	  v = dn_to_ull(&x, &s);
2306:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2307:src/display.c **** 	}
2308:src/display.c **** #endif
2309:src/display.c **** 	else
2310:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2311:src/display.c ****       }
2312:src/display.c **** 
2313:src/display.c ****       /* Display the status screen */
2314:src/display.c ****       static void show_status(void) {
2315:src/display.c **** 	int i, n;
2316:src/display.c **** 	int j = SEGS_EXP_BASE;
2317:src/display.c **** 	const int status = State2.status - 3;
2318:src/display.c **** 	char buf[16], *p = buf;
2319:src/display.c **** 	unsigned int pc;
2320:src/display.c **** 
2321:src/display.c **** 	if (status == -2) {
2322:src/display.c **** 	  set_status("Free:");
2323:src/display.c **** 	  p = num_arg(buf, free_mem());
2324:src/display.c **** 	  p = scopy(p, " , FL. ");
2325:src/display.c **** 	  p = num_arg(p, free_flash());
2326:src/display.c **** 	  *p = '\0';
2327:src/display.c **** 	  set_digits_string(buf, 0);
ARM GAS  /tmp/ccobNVTR.s 			page 56


2328:src/display.c **** 	}
2329:src/display.c **** 	else if (status == -1) {
2330:src/display.c **** 	  /* Top line */
2331:src/display.c **** 	  p = scopy(buf, "Regs:");
2332:src/display.c **** 	  if (SizeStatRegs)
2333:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2334:src/display.c **** 	  *p = '\0';
2335:src/display.c **** 	  set_status(buf);
2336:src/display.c **** 
2337:src/display.c **** 	  /* Bottom line */
2338:src/display.c **** 	  p = num_arg(buf, global_regs());
2339:src/display.c **** 	  if (LocalRegs < 0) {
2340:src/display.c **** 	    p = scopy(p, " , Loc. ");
2341:src/display.c **** 	    p = num_arg(p, local_regs());
2342:src/display.c **** 	  }
2343:src/display.c **** 	  *p = '\0';
2344:src/display.c **** 	  set_digits_string(buf, 0);
2345:src/display.c **** 	} else {
2346:src/display.c **** 	  int base;
2347:src/display.c **** 	  int end;
2348:src/display.c **** 	  int group = 10;
2349:src/display.c **** 	  int start = 0;
2350:src/display.c **** 		
2351:src/display.c **** 	  if (status <= 9) {
2352:src/display.c **** 	    base = 10 * status;
2353:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2354:src/display.c **** 	    p = scopy(buf, "FL ");
2355:src/display.c **** 	    p = num_arg_0(p, base, 2);
2356:src/display.c **** 	    *p++ = '-';
2357:src/display.c **** 	    p = num_arg_0(p, end, 2);
2358:src/display.c **** 	    *p = '\0';
2359:src/display.c **** 	    set_status(buf);
2360:src/display.c **** 	  }
2361:src/display.c **** 	  else if (status == 10) {
2362:src/display.c **** 	    base = regX_idx;
2363:src/display.c **** 	    end = regK_idx;
2364:src/display.c **** 	    start = 3;
2365:src/display.c **** 	    group = 4;
2366:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2367:src/display.c **** 	  }
2368:src/display.c **** 	  else { // status == 11
2369:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2370:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2371:src/display.c **** 	    set_status("FL.00-.15");
2372:src/display.c **** 	  }
2373:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2374:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2375:src/display.c **** 	  j += SEGS_PER_DIGIT;
2376:src/display.c **** 	  for (i = start; i < group + start; i++) {
2377:src/display.c **** 	    int k = i + base - start;
2378:src/display.c **** 	    int l = get_user_flag(k);
2379:src/display.c **** 	    k += group;
2380:src/display.c **** 	    if (end >= k) {
2381:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2382:src/display.c **** 	      k += group;
2383:src/display.c **** 	      if (end >= k)
2384:src/display.c **** 		l |= (get_user_flag(k) << 2);
ARM GAS  /tmp/ccobNVTR.s 			page 57


2385:src/display.c **** 	    }
2386:src/display.c **** 	    set_dig(j, l);
2387:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2388:src/display.c **** 	    j += SEGS_PER_DIGIT;
2389:src/display.c **** 	    if (i == 4) {
2390:src/display.c **** 	      set_dig(j, 8);
2391:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2392:src/display.c **** 	      j += SEGS_PER_DIGIT;
2393:src/display.c **** 	    }
2394:src/display.c **** 	  }
2395:src/display.c **** 	}
2396:src/display.c **** 
2397:src/display.c **** 	j = SEGS_EXP_BASE;
2398:src/display.c **** 	pc = state_pc();
2399:src/display.c **** 	if (isXROM(pc))
2400:src/display.c **** 	  pc = 1;
2401:src/display.c **** 	for (n=i=0; i<4; i++) {
2402:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2403:src/display.c **** 	    if (++n == 4) {
2404:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2405:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2406:src/display.c **** 	    } else {
2407:src/display.c **** 	      set_dig(j, 'A'+i);
2408:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2409:src/display.c **** 	    }
2410:src/display.c **** 	  }
2411:src/display.c **** 	}
2412:src/display.c ****       }
2413:src/display.c **** 
2414:src/display.c **** 
2415:src/display.c ****       /* Display the list of alpha labels */
2416:src/display.c ****       static void show_label(void) {
2417:src/display.c **** 	char buf[16];
2418:src/display.c **** 	unsigned short int pc = State2.digval;
2419:src/display.c **** 	unsigned int op = getprog(pc);
2420:src/display.c **** 	int n = nLIB(pc);
2421:src/display.c **** 	unsigned short int lblpc;
2422:src/display.c **** 
2423:src/display.c **** 	set_status(prt((opcode)op, buf));
2424:src/display.c **** 	set_digits_string(libname[n], 0);
2425:src/display.c **** #ifndef REALBUILD
2426:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2427:src/display.c **** #endif
2428:src/display.c **** 
2429:src/display.c **** 	if (op & OP_DBL) {
2430:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2431:src/display.c **** 	  if (lblpc != pc) {
2432:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2433:src/display.c **** 	    n = nLIB(lblpc);
2434:src/display.c **** 	    if (n == REGION_RAM)
2435:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2436:src/display.c **** 	    else {
2437:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2438:src/display.c **** #ifndef REALBUILD
2439:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2440:src/display.c **** #endif
2441:src/display.c **** 	    }
ARM GAS  /tmp/ccobNVTR.s 			page 58


2442:src/display.c **** 	  }
2443:src/display.c **** 	}
2444:src/display.c ****       }
2445:src/display.c **** 
2446:src/display.c ****       /* Display a list of register contents */
2447:src/display.c ****       static void show_registers(void) {
2448:src/display.c **** 	char buf[16], *bp;
2449:src/display.c **** 	int n = State2.digval;
2450:src/display.c **** 	
2451:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2452:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2453:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2454:src/display.c **** 	  n;
2455:src/display.c **** #else
2456:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2457:src/display.c **** 	  n;
2458:src/display.c **** #endif
2459:src/display.c **** 
2460:src/display.c **** 	if (State2.disp_as_alpha) {
2461:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2462:src/display.c **** 	}
2463:src/display.c **** 	else {
2464:src/display.c **** 	  xset(buf, '\0', 16);
2465:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2466:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2467:src/display.c **** #else
2468:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2469:src/display.c **** #endif
2470:src/display.c **** 	  if (State2.local) {
2471:src/display.c **** 	    *bp++ = '.';
2472:src/display.c **** 	    if (n >= 100) {
2473:src/display.c **** 	      *bp++ = '1';
2474:src/display.c **** 	      n -= 100;
2475:src/display.c **** 	    }
2476:src/display.c **** 	  }
2477:src/display.c **** 	  if (n < 100)
2478:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2479:src/display.c **** 	  else
2480:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2481:src/display.c **** 	  set_status(buf);
2482:src/display.c **** 	}
2483:src/display.c **** 	format_reg(reg, CNULL);
2484:src/display.c ****       }
2485:src/display.c **** 
2486:src/display.c **** 
2487:src/display.c ****       static void set_annunciators(void)
2488:src/display.c ****       {
2489:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2490:src/display.c **** 
2491:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2492:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2493:src/display.c **** 	 * browsing constants.
2494:src/display.c **** 	 */
2495:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2496:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2497:src/display.c **** #else
2498:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
ARM GAS  /tmp/ccobNVTR.s 			page 59


2499:src/display.c **** #endif
2500:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2501:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2502:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2503:src/display.c **** 	set_IO_annunciator();
2504:src/display.c **** 
2505:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2506:src/display.c **** 	 */
2507:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2508:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2509:src/display.c ****       }
2510:src/display.c **** 
2511:src/display.c **** 
2512:src/display.c ****       /*
2513:src/display.c ****        *  Toggle the little "=" sign
2514:src/display.c ****        */
2515:src/display.c ****       void set_IO_annunciator(void) {
2516:src/display.c **** #ifndef DM42
2517:src/display.c **** 	int on = SerialOn
2518:src/display.c **** #endif
2519:src/display.c **** #ifdef DM42
2520:src/display.c **** 	  int on = 0
2521:src/display.c **** #endif
2522:src/display.c **** #ifdef REALBUILD
2523:src/display.c **** 	  || DebugFlag
2524:src/display.c **** #endif
2525:src/display.c **** #ifdef INFRARED
2526:src/display.c **** 	  || PrinterColumn != 0
2527:src/display.c **** #endif
2528:src/display.c **** 	  ;
2529:src/display.c **** 
2530:src/display.c **** 	if (on != IoAnnunciator) {
2531:src/display.c **** 	  dot(LIT_EQ, on);
2532:src/display.c **** 	  IoAnnunciator = on;
2533:src/display.c **** 	  finish_display(); //LIT_EQ
2534:src/display.c **** 	}
2535:src/display.c ****       }
2536:src/display.c **** 
2537:src/display.c ****       /*
2538:src/display.c ****        *  Update the display
2539:src/display.c ****        */
2540:src/display.c ****       void display(void) {
2541:src/display.c **** 	int i, j;
2542:src/display.c **** 	char buf[40], *bp = buf;
2543:src/display.c **** 	const char *p;
2544:src/display.c **** 	int annuc = 0;
2545:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2546:src/display.c **** 	int skip = 0;
2547:src/display.c **** 	int x_disp = 0;
2548:src/display.c **** 	const int shift = cur_shift();
2549:src/display.c **** 
2550:src/display.c **** 
2551:src/display.c **** 
2552:src/display.c **** 	if (State2.disp_freeze) {
2553:src/display.c **** 	  State2.disp_freeze = 0;
2554:src/display.c **** 	  State2.disp_temp = 1;
2555:src/display.c **** #ifdef CONSOLE
ARM GAS  /tmp/ccobNVTR.s 			page 60


2556:src/display.c **** 	  JustDisplayed = 1;
2557:src/display.c **** #endif
2558:src/display.c **** 	  ShowRPN = 0;
2559:src/display.c **** 	  return;
2560:src/display.c **** 	}
2561:src/display.c **** 
2562:src/display.c **** 	if (WasDataEntry) {
2563:src/display.c **** #if defined(QTGUI) || defined(IOS)
2564:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2565:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2566:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2567:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2568:src/display.c **** #endif
2569:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2570:src/display.c **** 
2571:src/display.c **** 	  // Erase 7-segment display
2572:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2573:src/display.c **** 	    clr_dot(i);
2574:src/display.c **** 	  }
2575:src/display.c **** 	  goto only_update_x;
2576:src/display.c **** 	}
2577:src/display.c **** 
2578:src/display.c **** 	// Clear display
2579:src/display.c **** 	reset_disp();
2580:src/display.c **** 
2581:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2582:src/display.c **** 	if (State2.cmplx  && !cata) {
2583:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
2584:src/display.c **** 	  set_status(buf);
2585:src/display.c **** 	}
2586:src/display.c **** 	if (State2.version) {
2587:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2588:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2589:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2590:src/display.c **** #ifndef REALBUILD
2591:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2592:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2593:src/display.c **** #endif
2594:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2595:src/display.c **** 	  set_status(vers);
2596:src/display.c **** 	  skip = 1;
2597:src/display.c **** 	  goto nostk;
2598:src/display.c **** 	} else if (State2.confirm) {
2599:src/display.c **** 	  set_status(S_SURE);
2600:src/display.c **** 	} else if (State2.hyp) {
2601:src/display.c **** 	  bp = scopy(bp, "HYP");
2602:src/display.c **** 	  if (! State2.dot)
2603:src/display.c **** 	    *bp++ = '\235';
2604:src/display.c **** 	  set_status(buf);
2605:src/display.c **** 	} else if (State2.gtodot) {
2606:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2607:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2608:src/display.c **** 	  if (State2.numdigit > 0)
2609:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2610:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2611:src/display.c **** 	  *bp++ = '_';
2612:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/ccobNVTR.s 			page 61


2613:src/display.c **** 	} else if (State2.rarg) {
2614:src/display.c **** 	  /* Commands with arguments */
2615:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2616:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2617:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2618:src/display.c **** #endif
2619:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2620:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2621:src/display.c **** 	  if (State2.dot) {
2622:src/display.c **** 	    *bp++ = 's';
2623:src/display.c **** 	    *bp++ = '_';
2624:src/display.c **** 	  } else if (shift == SHIFT_F) {
2625:src/display.c **** 	    *bp++ = '\021';
2626:src/display.c **** 	    *bp++ = '_';
2627:src/display.c **** 	  } else {
2628:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2629:src/display.c **** 	       : State2.ind ? 2 
2630:src/display.c **** 	       : num_arg_digits(CmdBase); */
2631:src/display.c **** 	    if (State2.local)
2632:src/display.c **** 	      *bp++ = '.';
2633:src/display.c **** 	    if (State2.numdigit > 0) {
2634:src/display.c **** 	      if (State2.shuffle)
2635:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2636:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2637:src/display.c **** 	      else
2638:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2639:src/display.c **** 	    }
2640:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2641:src/display.c **** 	    *bp++ = '_';
2642:src/display.c **** 	  }
2643:src/display.c **** 	  set_status(buf);
2644:src/display.c **** 	} else if (State2.test != TST_NONE) {
2645:src/display.c **** 	  *bp++ = 'x';
2646:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2647:src/display.c **** 	  *bp++ = '_';
2648:src/display.c **** 	  *bp++ = '?';
2649:src/display.c **** 	  set_status(buf);
2650:src/display.c **** 	} else if (cata) {
2651:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2652:src/display.c **** 	  char b2[16];
2653:src/display.c **** 	  const char *p;
2654:src/display.c **** 
2655:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2656:src/display.c **** 	  p = catcmd(op, b2);
2657:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2658:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2659:src/display.c **** 	  bp = scopy(bp, p);
2660:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2661:src/display.c **** 	    // State2.disp_small = 1;
2662:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2663:src/display.c **** 	      set_digits_string("0 to 255", 0);
2664:src/display.c **** 	    else
2665:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2666:src/display.c **** 	    skip = 1;
2667:src/display.c **** 	  } else if (State2.runmode) {
2668:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2669:src/display.c **** 	      decNumber x, r;
ARM GAS  /tmp/ccobNVTR.s 			page 62


2670:src/display.c **** 	      decimal64 z;
2671:src/display.c **** 
2672:src/display.c **** 	      getX(&x);
2673:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2674:src/display.c **** 		const unsigned int f = argKIND(op);
2675:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2676:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2677:src/display.c **** 		  update_speed(0);
2678:src/display.c **** 		  fp(&r, &x);
2679:src/display.c **** 		}
2680:src/display.c **** 		else
2681:src/display.c **** 		  set_NaN(&r);
2682:src/display.c **** 	      } else
2683:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2684:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2685:src/display.c **** 	      packed_from_number(&z, &r);
2686:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2687:src/display.c **** 	      skip = 1;
2688:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2689:src/display.c **** 	      REGISTER z, *const x = StackBase;
2690:src/display.c **** 	      copyreg(&z, x);
2691:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2692:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2693:src/display.c **** 	      copyreg(x, &z);
2694:src/display.c **** 	      skip = 1;
2695:src/display.c **** 	    }
2696:src/display.c **** 	  }
2697:src/display.c **** 	  set_status(buf);
2698:src/display.c **** 	} else if (State2.multi) {
2699:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2700:src/display.c **** 	  if (State2.numdigit > 0) {
2701:src/display.c **** 	    *bp++ = (char) State2.digval;
2702:src/display.c **** 	    if (State2.numdigit > 1)
2703:src/display.c **** 	      *bp++ = State2.digval2;
2704:src/display.c **** 	  }
2705:src/display.c **** 	  set_status(buf);
2706:src/display.c **** 	} else if (State2.status) {
2707:src/display.c **** 	  show_status();
2708:src/display.c **** 	  skip = 1;
2709:src/display.c **** 	} else if (State2.labellist) {
2710:src/display.c **** 	  show_label();
2711:src/display.c **** 	  skip = 1;
2712:src/display.c **** 	} else if (State2.registerlist) {
2713:src/display.c **** 	  show_registers();
2714:src/display.c **** 	  skip = 1;
2715:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2716:src/display.c **** 	    annunciators();
2717:src/display.c **** 	  }
2718:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2719:src/display.c **** 	} else if (State2.disp_as_alpha) {
2720:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2721:src/display.c **** #endif
2722:src/display.c **** 	} else if (State2.runmode) {
2723:src/display.c **** 	  if (DispMsg) { 
2724:src/display.c **** 	    set_status(DispMsg);
2725:src/display.c **** 	  } else if (DispPlot) {
2726:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
ARM GAS  /tmp/ccobNVTR.s 			page 63


2727:src/display.c **** 	  } else if (State2.alphas) {
2728:src/display.c **** #if 0
2729:src/display.c **** 	    set_digits_string("AlpHA", 0);
2730:src/display.c **** #endif
2731:src/display.c **** 	    bp = scopy(buf, Alpha);
2732:src/display.c **** 	    j = State2.alpha_pos;
2733:src/display.c **** 	    if (j != 0) {
2734:src/display.c **** 	      i = slen(buf);
2735:src/display.c **** 	      //				
2736:src/display.c **** 	      j *= 6;
2737:src/display.c **** #ifdef BIGGER_DISPLAY
2738:src/display.c **** 	      if ( i - j >= 20 )
2739:src/display.c **** #else
2740:src/display.c **** 	      if ( i - j >= 12 )
2741:src/display.c **** #endif
2742:src/display.c **** 		{
2743:src/display.c **** 		buf[ (i - j) ] = '\0';
2744:src/display.c **** 		set_status_right(buf);
2745:src/display.c **** 		}
2746:src/display.c **** 	      else {
2747:src/display.c **** 		set_status(buf);
2748:src/display.c **** 	      }
2749:src/display.c **** 	    } else {
2750:src/display.c **** 	      if (shift != SHIFT_N) {
2751:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2752:src/display.c **** 		*bp++ = '\0';
2753:src/display.c **** 	      }
2754:src/display.c **** 	      set_status_right(buf);
2755:src/display.c **** 	    }
2756:src/display.c **** 	  } else {
2757:src/display.c **** 	    annuc = 1;
2758:src/display.c **** 	  }
2759:src/display.c **** 	} else {
2760:src/display.c **** #ifndef DM42
2761:src/display.c **** 	  show_progtrace(buf);
2762:src/display.c **** #endif
2763:src/display.c **** 	  i = state_pc();
2764:src/display.c **** 	  if (i > 0)
2765:src/display.c **** 	    set_status(prt(getprog(i), buf));
2766:src/display.c **** 	  else
2767:src/display.c **** 	    set_status("");
2768:src/display.c **** 	  set_dot(STO_annun);
2769:src/display.c **** #if 0
2770:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
2771:src/display.c **** 	    unsigned short int crc;
2772:src/display.c **** 	    crc = checksum_program();
2773:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
2774:src/display.c **** 	    for (i=0; i<4; i++) {
2775:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
2776:src/display.c **** 	      crc >>= 4;
2777:src/display.c **** 	      j += SEGS_PER_DIGIT;
2778:src/display.c **** 	    }
2779:src/display.c **** 	    skip = 1;
2780:src/display.c **** 	  }
2781:src/display.c **** 	  else
2782:src/display.c **** #endif
2783:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
ARM GAS  /tmp/ccobNVTR.s 			page 64


2784:src/display.c **** 	      annuc = 1;
2785:src/display.c **** 	  goto nostk;
2786:src/display.c **** 	}
2787:src/display.c **** 	show_stack();
2788:src/display.c ****       nostk:	show_flags();
2789:src/display.c **** 	if (!skip) {
2790:src/display.c **** 	  if (State2.runmode) {
2791:src/display.c **** 	  only_update_x:
2792:src/display.c **** 	    p = get_cmdline();
2793:src/display.c **** 	    if (p == NULL || cata) {
2794:src/display.c **** 	      if (ShowRegister != -1) {
2795:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2796:src/display.c **** 		format_reg(ShowRegister, CNULL);
2797:src/display.c **** 	      }
2798:src/display.c **** 	      else
2799:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2800:src/display.c **** 	    } else {
2801:src/display.c **** 	      disp_x(p);
2802:src/display.c **** 	      x_disp = 1;
2803:src/display.c **** 	    }
2804:src/display.c **** 	    if (WasDataEntry) {
2805:src/display.c **** 	      goto finish;
2806:src/display.c **** 	    }
2807:src/display.c **** 	  } else {
2808:src/display.c **** 	    unsigned int pc = state_pc();
2809:src/display.c **** 	    unsigned int upc = user_pc(pc);
2810:src/display.c **** 	    const int n = nLIB(pc);
2811:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2812:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2813:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2814:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2815:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2816:src/display.c **** #ifndef REALBUILD
2817:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2818:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2819:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2820:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2821:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2822:src/display.c **** 	      char *b=buf;
2823:src/display.c **** 	      char *l=LastDisplayedNumber;
2824:src/display.c **** 	      *l++=' ';
2825:src/display.c **** 	      while(*b) {
2826:src/display.c **** 		*l++=*b++;
2827:src/display.c **** 		*l++=' ';
2828:src/display.c **** 	      }
2829:src/display.c **** 	      *l=0;
2830:src/display.c **** 	    }
2831:src/display.c **** #endif
2832:src/display.c **** 	  }
2833:src/display.c **** 	}
2834:src/display.c **** 	set_annunciators();
2835:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2836:src/display.c **** 	  ShowRPN = 0;
2837:src/display.c **** 	  dot(RPN, 0);
2838:src/display.c **** 	}
2839:src/display.c **** 	// disp_temp disables the <- key
2840:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
ARM GAS  /tmp/ccobNVTR.s 			page 65


2841:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2842:src/display.c **** 
2843:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2844:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2845:src/display.c **** 	  annunciators();
2846:src/display.c ****  	State2.hms = 0;
2847:src/display.c **** #else
2848:src/display.c **** 
2849:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2850:src/display.c **** 	  annunciators();
2851:src/display.c **** 	
2852:src/display.c **** 
2853:src/display.c **** 
2854:src/display.c **** #endif
2855:src/display.c **** 
2856:src/display.c ****       finish:
2857:src/display.c **** 	State2.version = 0;
2858:src/display.c **** 	State2.disp_as_alpha = 0;
2859:src/display.c **** 	State2.smode = SDISP_NORMAL;
2860:src/display.c **** 	State2.invalid_disp = 0;
2861:src/display.c **** 	ShowRegister = regX_idx;
2862:src/display.c **** 	DispMsg = CNULL;
2863:src/display.c **** 	DispPlot = 0;
2864:src/display.c **** 	State2.disp_small = 0;
2865:src/display.c **** 	finish_display();
2866:src/display.c **** #ifdef CONSOLE
2867:src/display.c **** 	JustDisplayed = 1;
2868:src/display.c **** #endif
2869:src/display.c ****       }
2870:src/display.c **** 
2871:src/display.c ****       /*
2872:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
2873:src/display.c ****        */
2874:src/display.c ****       void frozen_display()
2875:src/display.c ****       {
2876:src/display.c **** 	State2.disp_freeze = 0;
2877:src/display.c **** 	display();
2878:src/display.c **** 	State2.disp_freeze = 1;
2879:src/display.c ****       }
2880:src/display.c **** 
2881:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
2882:src/display.c **** 	int glen = *graphic++;
2883:src/display.c **** 	int i, j;
2884:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2885:src/display.c **** 	unsigned long long int mat[6];
2886:src/display.c **** 
2887:src/display.c **** 	xset(mat, 0, sizeof(mat));
2888:src/display.c **** #endif
2889:src/display.c **** #ifndef REALBUILD
2890:src/display.c **** 	forceDispPlot=1;
2891:src/display.c **** #endif
2892:src/display.c **** 	if (glen <= 0)			return;
2893:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
2894:src/display.c **** 
2895:src/display.c **** 	for (i=0; i<6; i++)
2896:src/display.c **** 	  for (j=1; j<=glen; j++) {
2897:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccobNVTR.s 			page 66


2898:src/display.c **** 	    if (graphic[j] & (1 << i))
2899:src/display.c **** 	      mat[i] |= 1LL << j;
2900:src/display.c **** #else
2901:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
2902:src/display.c **** #endif
2903:src/display.c **** 	  }
2904:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2905:src/display.c **** 	set_status_grob(mat);
2906:src/display.c **** #endif
2907:src/display.c ****       }
2908:src/display.c **** 
2909:src/display.c **** 
2910:src/display.c ****       /* Take the given string and display as much of it as possible on the top
2911:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
2912:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
2913:src/display.c ****        * column is almost always blank.
2914:src/display.c ****        */
2915:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
2916:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
2917:src/display.c ****       }
2918:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
2919:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
2920:src/display.c ****       }
2921:src/display.c **** 
2922:src/display.c ****       
2923:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 2923 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
2924:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 2924 2 view .LVU201
2925:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2926:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
2927:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 2927 2 view .LVU202
2928:src/display.c **** #endif
2929:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 2929 2 view .LVU203
2930:src/display.c **** 	int i, j;
 686              		.loc 1 2930 2 view .LVU204
2931:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 2931 2 view .LVU205
2923:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 2923 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
2932:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccobNVTR.s 			page 67


2933:src/display.c **** 	unsigned long long int mat[6];
2934:src/display.c **** 
2935:src/display.c **** 	xset(mat, 0, sizeof(mat));
2936:src/display.c **** #endif
2937:src/display.c **** #ifndef REALBUILD
2938:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 2938 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
2923:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 2923 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
2931:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 2931 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
2923:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 2923 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
2931:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 2931 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
2931:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 2931 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 2938 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 2938 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
2931:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 2931 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 2938 2 is_stmt 1 view .LVU216
2931:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 2931 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
2923:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 2923 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 2938 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
2939:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2940:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 2940 2 is_stmt 1 view .LVU220
 734              		.loc 1 2940 14 view .LVU221
 735              		.loc 1 2940 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 2940 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
ARM GAS  /tmp/ccobNVTR.s 			page 68


 741              	.L69:
 742              		.loc 1 2940 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 2940 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
2941:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 2941 4 is_stmt 1 view .LVU226
 749              		.loc 1 2941 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 2941 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 2941 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 2941 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
2942:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
2943:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
2944:src/display.c **** 	      ++i;
2945:src/display.c **** 	  }
2946:src/display.c **** 	  else {
2947:src/display.c **** 	    ++i;
2948:src/display.c **** 	  }
2949:src/display.c **** 	}
2950:src/display.c **** #endif
2951:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 2951 2 is_stmt 1 view .LVU231
2952:src/display.c **** #endif
2953:src/display.c **** #ifdef RP_PREFIX
2954:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 2954 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
2951:src/display.c **** #endif
 763              		.loc 1 2951 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 2954 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
2955:src/display.c **** #endif
2956:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
2957:src/display.c **** 	findlengths(posns, smallp);
2958:src/display.c **** #endif
2959:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 2959 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
2951:src/display.c **** #endif
 770              		.loc 1 2951 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
2954:src/display.c **** #endif
 772              		.loc 1 2954 2 is_stmt 1 view .LVU237
 773              		.loc 1 2959 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 2959 8 view .LVU239
ARM GAS  /tmp/ccobNVTR.s 			page 69


 776              		.loc 1 2959 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 2959 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
2929:src/display.c **** 	int i, j;
 781              		.loc 1 2929 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB158:
2960:src/display.c **** 	  int c;
2961:src/display.c **** 	  int width;
2962:src/display.c **** 	  unsigned char cmap[6];
2963:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2964:src/display.c **** 	  int real_width;
2965:src/display.c **** 	  int current_smallp;
2966:src/display.c **** 
2967:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
2968:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
2969:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
2970:src/display.c **** 	  //           01 -> (not used)
2971:src/display.c **** 	  //           10 -> use big font
2972:src/display.c **** 	  //           11 -> use small font
2973:src/display.c **** 	  // Bits 4-0: character will be considered this wide
2974:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 2974 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE158:
2959:src/display.c **** 	  int c;
 787              		.loc 1 2959 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
2927:src/display.c **** #endif
 790              		.loc 1 2927 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB167:
2960:src/display.c **** 	  int c;
 794              		.loc 1 2960 4 is_stmt 1 view .LVU246
2961:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 2961 4 view .LVU247
2962:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 2962 4 view .LVU248
2964:src/display.c **** 	  int current_smallp;
 797              		.loc 1 2964 4 view .LVU249
2965:src/display.c **** 
 798              		.loc 1 2965 4 view .LVU250
 799              		.loc 1 2974 4 view .LVU251
 800              		.loc 1 2974 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
2975:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 2975 6 is_stmt 1 view .LVU253
 805              		.loc 1 2975 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
ARM GAS  /tmp/ccobNVTR.s 			page 70


2976:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 2976 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
2975:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 2975 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 2976 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
2977:src/display.c **** 	    default:
2978:src/display.c **** 	    case 0x00:	current_smallp = smallp;
2979:src/display.c **** 	      break;
2980:src/display.c **** 	    case 0x40:	current_smallp = 0;
2981:src/display.c **** 	      break;
2982:src/display.c **** 	    case 0x60:	current_smallp = 1;
2983:src/display.c **** 	      break;
2984:src/display.c **** 	    }
2985:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 2985 6 view .LVU258
 820              		.loc 1 2985 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 2985 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
2986:src/display.c **** 	    str += 3;
 831              		.loc 1 2986 6 is_stmt 1 discriminator 4 view .LVU261
2987:src/display.c **** 
2988:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 2988 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
2986:src/display.c **** 	    str += 3;
 836              		.loc 1 2986 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 2988 6 is_stmt 1 discriminator 4 view .LVU264
2989:src/display.c **** 	  } else {
2990:src/display.c **** 	    c = (unsigned char) *str++ + offset;
2991:src/display.c **** 	    real_width = width = charlengths(c);
2992:src/display.c **** 	    current_smallp = smallp;
2993:src/display.c **** 	  }
2994:src/display.c **** 
2995:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 2995 4 discriminator 4 view .LVU265
 843              		.loc 1 2995 7 is_stmt 0 discriminator 4 view .LVU266
ARM GAS  /tmp/ccobNVTR.s 			page 71


 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 2995 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 2995 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
2996:src/display.c **** 	    break;
2997:src/display.c **** 
2998:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 2998 4 is_stmt 1 view .LVU269
 853              		.loc 1 2998 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
2999:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 2999 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
2998:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 2998 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 2999 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3000:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3000 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3001:src/display.c **** 	  }
3002:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3002 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3003:src/display.c **** #else
3004:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3005:src/display.c **** 
3006:src/display.c **** 	  //cmap = &charset[c][0];
3007:src/display.c **** 	  width = charlengths(c);
3008:src/display.c **** 
3009:src/display.c **** 	  if (x + width > b_w+1)
3010:src/display.c **** 	    break;
3011:src/display.c **** 
3012:src/display.c **** 	  /* Decode the packed character bytes */
3013:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3014:src/display.c **** #endif
3015:src/display.c **** 
3016:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3016 4 view .LVU276
 877              		.loc 1 3016 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
ARM GAS  /tmp/ccobNVTR.s 			page 72


 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3016 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3017:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3017 16 is_stmt 1 view .LVU279
 889              		.loc 1 3017 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3018:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3018 8 is_stmt 1 view .LVU281
 893              		.loc 1 3018 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3017:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3017 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3017:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3017 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB159:
 907              	.LBB160:
 335:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 335 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 335:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 335 11 view .LVU286
 912              	.LBE160:
 913              	.LBE159:
 914              		.loc 1 3018 8 is_stmt 1 view .LVU287
3017:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3017 25 view .LVU288
3017:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3017 16 view .LVU289
3017:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3017 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3018 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
ARM GAS  /tmp/ccobNVTR.s 			page 73


3019:src/display.c **** 		break;
3020:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3021:src/display.c **** 	      if (cmap[i] & (1 << j))
3022:src/display.c **** 		mat[i] |= 1LL << (x+j);
3023:src/display.c **** #else
3024:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3024 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB164:
 929              	.LBI159:
 334:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 334 6 discriminator 2 view .LVU293
 931              	.LBB161:
 335:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 335 3 discriminator 2 view .LVU294
 335:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 335 11 discriminator 2 view .LVU295
 336:src/display.c **** }
 934              		.loc 1 336 8 discriminator 2 view .LVU296
 935              	.LBE161:
 936              	.LBE164:
 937              		.loc 1 3024 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3024 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB165:
 942              	.LBB162:
 335:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 335 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 335:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 335 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 335:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 335 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE162:
 950              	.LBE165:
3017:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3017 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB166:
 955              	.LBB163:
 336:src/display.c **** }
 956              		.loc 1 336 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 336:src/display.c **** }
 959              		.loc 1 336 8 view .LVU304
 960              	.LBE163:
 961              	.LBE166:
3018:src/display.c **** 		break;
 962              		.loc 1 3018 8 is_stmt 1 view .LVU305
3017:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3017 25 view .LVU306
3017:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3017 16 view .LVU307
ARM GAS  /tmp/ccobNVTR.s 			page 74


3017:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3017 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3016:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3016 19 is_stmt 1 view .LVU309
3016:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3016 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3016:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3016 14 is_stmt 1 view .LVU311
3016:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3016 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3025:src/display.c **** #endif
3026:src/display.c **** 	    }
3027:src/display.c **** 	  x += width;
 980              		.loc 1 3027 4 is_stmt 1 view .LVU313
 981              	.LBE167:
2959:src/display.c **** 	  int c;
 982              		.loc 1 2959 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB168:
 986              		.loc 1 3027 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3027 6 view .LVU316
 990              	.LBE168:
2959:src/display.c **** 	  int c;
 991              		.loc 1 2959 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
2959:src/display.c **** 	  int c;
 993              		.loc 1 2959 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
2959:src/display.c **** 	  int c;
 996              		.loc 1 2959 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB169:
2974:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 2974 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE169:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB170:
2960:src/display.c **** 	  int width;
 1005              		.loc 1 2960 4 is_stmt 1 view .LVU321
2961:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 2961 4 view .LVU322
ARM GAS  /tmp/ccobNVTR.s 			page 75


2962:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 2962 4 view .LVU323
2964:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 2964 4 view .LVU324
2965:src/display.c **** 
 1009              		.loc 1 2965 4 view .LVU325
2974:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 2974 4 view .LVU326
2974:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 2974 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
2990:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 2990 6 is_stmt 1 view .LVU328
2990:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 2990 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
2991:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 2991 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
2990:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 2990 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
2991:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 2991 6 is_stmt 1 view .LVU332
2991:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 2991 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
2991:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 2991 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
2995:src/display.c **** 	    break;
 1034              		.loc 1 2995 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
2991:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 2991 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
2992:src/display.c **** 	  }
 1039              		.loc 1 2992 6 is_stmt 1 view .LVU337
2995:src/display.c **** 	    break;
 1040              		.loc 1 2995 4 view .LVU338
2995:src/display.c **** 	    break;
 1041              		.loc 1 2995 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
2995:src/display.c **** 	    break;
 1044              		.loc 1 2995 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
ARM GAS  /tmp/ccobNVTR.s 			page 76


 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
2995:src/display.c **** 	    break;
 1049              		.loc 1 2995 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
2995:src/display.c **** 	    break;
 1053              		.loc 1 2995 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
2995:src/display.c **** 	    break;
 1057              		.loc 1 2995 7 view .LVU343
 1058              	.LBE170:
3028:src/display.c **** 	}
3029:src/display.c **** 
3030:src/display.c **** 
3031:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3032:src/display.c **** 	set_status_grob(mat);
3033:src/display.c **** #else
3034:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3034 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3034 20 view .LVU345
 1061              		.loc 1 3034 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3035:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3035 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3034:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3034 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3035 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3034:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3034 27 is_stmt 1 discriminator 3 view .LVU350
3034:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3034 20 discriminator 3 view .LVU351
3034:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3034 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3036:src/display.c **** #endif
3037:src/display.c ****       }
 1081              		.loc 1 3037 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
ARM GAS  /tmp/ccobNVTR.s 			page 77


 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB171:
2982:src/display.c **** 	      break;
 1091              		.loc 1 2982 17 is_stmt 1 view .LVU354
2983:src/display.c **** 	    }
 1092              		.loc 1 2983 8 view .LVU355
2985:src/display.c **** 	    str += 3;
 1093              		.loc 1 2985 6 view .LVU356
2985:src/display.c **** 	    str += 3;
 1094              		.loc 1 2985 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
2982:src/display.c **** 	      break;
 1097              		.loc 1 2982 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
2980:src/display.c **** 	      break;
 1104              		.loc 1 2980 17 is_stmt 1 view .LVU359
2981:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 2981 8 view .LVU360
2985:src/display.c **** 	    str += 3;
 1106              		.loc 1 2985 6 view .LVU361
2985:src/display.c **** 	    str += 3;
 1107              		.loc 1 2985 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
2980:src/display.c **** 	      break;
 1110              		.loc 1 2980 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
2980:src/display.c **** 	      break;
 1116              		.loc 1 2980 32 view .LVU364
 1117              	.LBE171:
2942:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 2942 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
2943:src/display.c **** 	      ++i;
 1123              		.loc 1 2943 6 view .LVU366
2943:src/display.c **** 	      ++i;
 1124              		.loc 1 2943 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccobNVTR.s 			page 78


 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB172:
2943:src/display.c **** 	      ++i;
 1133              		.loc 1 2943 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
2943:src/display.c **** 	      ++i;
 1136              		.loc 1 2943 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
2943:src/display.c **** 	      ++i;
 1141              		.loc 1 2943 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE172:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 437:src/display.c ****   union {
 1169              		.loc 1 437 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 438:src/display.c ****     char buf[4];
 1173              		.loc 1 438 3 view .LVU372
 442:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 442 3 view .LVU373
 456:src/display.c **** #endif
 1175              		.loc 1 456 3 view .LVU374
 459:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 459 3 view .LVU375
 437:src/display.c ****   union {
 1177              		.loc 1 437 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccobNVTR.s 			page 79


 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 460:src/display.c ****     negative = 1;
 1185              		.loc 1 460 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 437:src/display.c ****   union {
 1187              		.loc 1 437 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 437:src/display.c ****   union {
 1190              		.loc 1 437 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 460:src/display.c ****     negative = 1;
 1193              		.loc 1 460 3 is_stmt 1 view .LVU380
 437:src/display.c ****   union {
 1194              		.loc 1 437 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 460:src/display.c ****     negative = 1;
 1196              		.loc 1 460 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
 459:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 459 12 view .LVU383
 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
 467:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 467 3 is_stmt 1 view .LVU384
 467:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 467 6 is_stmt 0 view .LVU385
 1203 0010 A2B3     		cbz	r2, .L126
 472:src/display.c **** #endif
 1204              		.loc 1 472 7 is_stmt 1 view .LVU386
 472:src/display.c **** #endif
 1205              		.loc 1 472 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 474:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 474 2 is_stmt 1 view .LVU388
 474:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 474 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 474:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 474 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 474:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 474 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
 1215              	.LVL110:
 474:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 474 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 481:src/display.c ****     }
ARM GAS  /tmp/ccobNVTR.s 			page 80


 1219              		.loc 1 481 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 461:src/display.c ****     exp = -exp;
 1223              		.loc 1 461 5 view .LVU394
 462:src/display.c ****   }
 1224              		.loc 1 462 5 view .LVU395
 462:src/display.c ****   }
 1225              		.loc 1 462 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 467:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 467 3 is_stmt 1 view .LVU397
 467:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 467 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 472:src/display.c **** #endif
 1231              		.loc 1 472 7 is_stmt 1 view .LVU399
 472:src/display.c **** #endif
 1232              		.loc 1 472 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
 481:src/display.c ****     }
 1237              		.loc 1 481 21 is_stmt 1 discriminator 1 view .LVU401
 481:src/display.c ****     }
 1238              		.loc 1 481 28 is_stmt 0 discriminator 1 view .LVU402
 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 481:src/display.c ****     }
 1242              		.loc 1 481 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 529:src/display.c **** #endif
 1246              		.loc 1 529 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 531:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 531 7 view .LVU405
 531:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 531 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 532:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 532 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 531:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 531 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
ARM GAS  /tmp/ccobNVTR.s 			page 81


 532:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 532 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
 554:src/display.c ****     }
 1267              		.loc 1 554 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 555:src/display.c **** 
 1272              		.loc 1 555 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 552:src/display.c ****     no_number:
 1281              		.loc 1 552 2 is_stmt 1 view .LVU412
 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
 1284              	.LVL122:
 554:src/display.c ****     }
 1285              		.loc 1 554 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
 1289              	.LVL123:
 555:src/display.c **** 
 1290              		.loc 1 555 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 477:src/display.c **** #else
 1299              		.loc 1 477 12 is_stmt 1 view .LVU415
 477:src/display.c **** #else
 1300              		.loc 1 477 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 477:src/display.c **** #else
 1303              		.loc 1 477 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 481:src/display.c ****     }
 1306              		.loc 1 481 7 is_stmt 1 view .LVU418
 481:src/display.c ****     }
ARM GAS  /tmp/ccobNVTR.s 			page 82


 1307              		.loc 1 481 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 481:src/display.c ****     }
 1311              		.loc 1 481 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 484:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 484 7 is_stmt 1 view .LVU421
 484:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 484 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 488:src/display.c **** #endif
 1321              		.loc 1 488 2 is_stmt 1 view .LVU423
 488:src/display.c **** #endif
 1322              		.loc 1 488 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 488:src/display.c **** #endif
 1325              		.loc 1 488 5 view .LVU425
 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
 488:src/display.c **** #endif
 1328              		.loc 1 488 5 view .LVU426
 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 477:src/display.c **** #else
 1332              		.loc 1 477 12 is_stmt 1 view .LVU427
 477:src/display.c **** #else
 1333              		.loc 1 477 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 481:src/display.c ****     }
 1337              		.loc 1 481 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 481:src/display.c ****     }
 1341              		.loc 1 481 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 484:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 484 21 is_stmt 1 view .LVU431
 1346              	.LBB173:
 1347              	.LBI173:
 303:src/display.c **** {
 1348              		.loc 1 303 13 view .LVU432
 1349              	.LBB174:
 305:src/display.c ****   set_dot(EXP_SIGN);
ARM GAS  /tmp/ccobNVTR.s 			page 83


 1350              		.loc 1 305 3 view .LVU433
 305:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 305 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 306:src/display.c **** }
 1355              		.loc 1 306 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 305:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 305 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 306:src/display.c **** }
 1359              		.loc 1 306 3 is_stmt 1 view .LVU437
 307:src/display.c **** 
 1360              		.loc 1 307 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 306:src/display.c **** }
 1362              		.loc 1 306 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 307:src/display.c **** 
 1365              		.loc 1 307 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
 1368              	.L148:
 307:src/display.c **** 
 1369              		.loc 1 307 1 view .LVU441
 1370              	.LBE174:
 1371              	.LBE173:
 490:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 490 4 is_stmt 1 view .LVU442
 498:src/display.c **** #endif
 1373              		.loc 1 498 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 500:src/display.c **** 	  }
 1379              		.loc 1 500 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 500:src/display.c **** 	  }
 1382              		.loc 1 500 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
ARM GAS  /tmp/ccobNVTR.s 			page 84


 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB47:
 362:src/display.c ****   if (sep == SEP_NONE)
 1403              		.loc 1 362 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 369:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 369 5 view .LVU447
 362:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 362 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 362:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 362 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
 370:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 370 5 view .LVU450
 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
 370:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 370 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
 371:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 371 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 369:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 369 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 370:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 370 5 is_stmt 1 view .LVU454
 371:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 371 5 view .LVU455
 371:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 371 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 374:src/display.c **** #endif
 1433              		.loc 1 374 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
 374:src/display.c **** #endif
 1436              		.loc 1 374 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 374:src/display.c **** #endif
 1438              		.loc 1 374 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
ARM GAS  /tmp/ccobNVTR.s 			page 85


 374:src/display.c **** #endif
 1440              		.loc 1 374 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 374:src/display.c **** #endif
 1444              		.loc 1 374 30 view .LVU461
 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 374:src/display.c **** #endif
 1446              		.loc 1 374 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 378:src/display.c **** 
 1448              		.loc 1 378 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 374:src/display.c **** #endif
 1450              		.loc 1 374 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 378:src/display.c **** 
 1453              		.loc 1 378 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 372:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 372 7 is_stmt 1 view .LVU466
 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
 1460              	.LVL146:
 374:src/display.c **** #endif
 1461              		.loc 1 374 5 view .LVU467
 374:src/display.c **** #endif
 1462              		.loc 1 374 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE47:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
 344:src/display.c ****   if (res) {
 1484              		.loc 1 344 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 345:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
ARM GAS  /tmp/ccobNVTR.s 			page 86


 1488              		.loc 1 345 3 view .LVU470
 345:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 345 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 346:src/display.c ****   } else {
 1491              		.loc 1 346 5 is_stmt 1 view .LVU472
 346:src/display.c ****   } else {
 1492              		.loc 1 346 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 346:src/display.c ****   } else {
 1494              		.loc 1 346 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 346:src/display.c ****   } else {
 1497              		.loc 1 346 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 356:src/display.c **** 
 1503              		.loc 1 356 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
 348:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 348 5 is_stmt 1 view .LVU477
 344:src/display.c ****   if (res) {
 1508              		.loc 1 344 87 is_stmt 0 view .LVU478
 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 348:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 348 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 348:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 348 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 349:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 349 5 is_stmt 1 view .LVU481
 349:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 349 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
 1527              	.LBB177:
 1528              	.LBB178:
 352:src/display.c **** #endif
 1529              		.loc 1 352 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
ARM GAS  /tmp/ccobNVTR.s 			page 87


 352:src/display.c **** #endif
 1532              		.loc 1 352 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 352:src/display.c **** #endif
 1534              		.loc 1 352 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 352:src/display.c **** #endif
 1536              		.loc 1 352 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 352:src/display.c **** #endif
 1540              		.loc 1 352 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 352:src/display.c **** #endif
 1542              		.loc 1 352 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 352:src/display.c **** #endif
 1544              		.loc 1 352 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 355:src/display.c **** }
 1548              		.loc 1 355 3 is_stmt 1 view .LVU490
 355:src/display.c **** }
 1549              		.loc 1 355 3 is_stmt 0 view .LVU491
 1550              	.LBE178:
 1551              	.LBE177:
 355:src/display.c **** }
 1552              		.loc 1 355 3 is_stmt 1 view .LVU492
 356:src/display.c **** 
 1553              		.loc 1 356 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 350:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 350 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB180:
 1567              	.LBI177:
 344:src/display.c ****   if (res) {
 1568              		.loc 1 344 14 view .LVU495
 1569              	.LBB179:
 352:src/display.c **** #endif
 1570              		.loc 1 352 5 view .LVU496
 352:src/display.c **** #endif
 1571              		.loc 1 352 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
ARM GAS  /tmp/ccobNVTR.s 			page 88


 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE179:
 1580              	.LBE180:
 1581              		.cfi_endproc
 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 409:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 409 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 410 3 view .LVU499
 409:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 409 55 is_stmt 0 view .LVU500
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 410 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 410 10 is_stmt 1 view .LVU502
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 410 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB181:
 1618              	.LBB182:
 404:src/display.c ****   return res;
 1619              		.loc 1 404 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 405:src/display.c **** }
 1623              		.loc 1 405 3 is_stmt 1 view .LVU505
 405:src/display.c **** }
 1624              		.loc 1 405 3 is_stmt 0 view .LVU506
ARM GAS  /tmp/ccobNVTR.s 			page 89


 1625              	.LBE182:
 1626              	.LBE181:
 415:src/display.c ****     }
 1627              		.loc 1 415 7 is_stmt 1 view .LVU507
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 410 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1630              	.LVL160:
 415:src/display.c ****     }
 1631              		.loc 1 415 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 410 24 is_stmt 1 view .LVU510
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 410 10 view .LVU511
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 410 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 411:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 411 5 is_stmt 1 view .LVU513
 412:src/display.c ****     else {
 1641              		.loc 1 412 7 view .LVU514
 414:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 414 7 view .LVU515
 1643              	.LBB185:
 1644              	.LBI181:
 402:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 402 14 view .LVU516
 1646              	.LBB183:
 403:src/display.c ****   else	set_dig(base, ch);
 1647              		.loc 1 403 3 view .LVU517
 404:src/display.c ****   return res;
 1648              		.loc 1 404 8 view .LVU518
 1649              	.LBE183:
 1650              	.LBE185:
 411:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 411 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 412:src/display.c ****     else {
 1654              		.loc 1 412 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB186:
 1658              	.LBB184:
 404:src/display.c ****   return res;
 1659              		.loc 1 404 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
 1661              	.LBE184:
 1662              	.LBE186:
 411:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 411 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 412:src/display.c ****     else {
ARM GAS  /tmp/ccobNVTR.s 			page 90


 1665              		.loc 1 412 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1671              		.loc 1 410 24 is_stmt 1 view .LVU524
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 410 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 410:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 410 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 418:src/display.c **** 
 1680              		.loc 1 418 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB49:
1493:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1493 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1494:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1494 2 view .LVU529
1493:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1493 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
1494:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1494 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1493:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1493 18 view .LVU532
ARM GAS  /tmp/ccobNVTR.s 			page 91


 1715 0004 0546     		mov	r5, r0
1494:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1494 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1495:src/display.c **** 	    if (res) {
 1719              		.loc 1 1495 4 is_stmt 1 view .LVU534
1495:src/display.c **** 	    if (res) {
 1720              		.loc 1 1495 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB189:
 1726              	.LBI189:
1493:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1493 18 is_stmt 1 view .LVU536
 1728              	.LBB190:
1496:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1496 6 view .LVU537
1496:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1496 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1497:src/display.c **** 	    } else {
 1732              		.loc 1 1497 8 is_stmt 1 view .LVU539
 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
 1735              	.LVL168:
1497:src/display.c **** 	    } else {
 1736              		.loc 1 1497 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1497:src/display.c **** 	    } else {
 1739              		.loc 1 1497 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1497:src/display.c **** 	    } else {
 1743              		.loc 1 1497 8 view .LVU542
 1744              	.LBE190:
 1745              	.LBE189:
1529:src/display.c **** 
 1746              		.loc 1 1529 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1507:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1507 6 is_stmt 1 view .LVU544
1507:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1507 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
 1753 0024 04D4     		bmi	.L196
1511:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1511 6 is_stmt 1 view .LVU546
1511:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1511 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
ARM GAS  /tmp/ccobNVTR.s 			page 92


 1757              	.LVL172:
 1758              	.L187:
1512:src/display.c **** 	    else {
 1759              		.loc 1 1512 8 is_stmt 1 view .LVU548
1512:src/display.c **** 	    else {
 1760              		.loc 1 1512 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
 1762 002a 2370     		strb	r3, [r4]
1525:src/display.c **** 	  }
 1763              		.loc 1 1525 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1529:src/display.c **** 
 1765              		.loc 1 1529 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1508:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1508 8 is_stmt 1 view .LVU552
1508:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1508 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1508:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1508 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1508:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1774              		.loc 1 1508 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
1511:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1511 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
 1781              	.L184:
 1782              	.LBB192:
 1783              	.LBB191:
1499:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1499 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1501:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1501 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1502:src/display.c **** #endif
 1793              		.loc 1 1502 8 view .LVU559
1502:src/display.c **** #endif
 1794              		.loc 1 1502 21 is_stmt 0 view .LVU560
 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE191:
 1799              	.LBE192:
1529:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 93


 1800              		.loc 1 1529 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1509:src/display.c **** 	    }
 1804              		.loc 1 1509 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
 1806              	.LVL180:
1509:src/display.c **** 	    }
 1807              		.loc 1 1509 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1511:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1511 6 is_stmt 1 view .LVU564
 1812              	.L188:
1514:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1514 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1516:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1516 8 view .LVU566
1516:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1819              		.loc 1 1516 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
1520:src/display.c **** 	      }
 1821              		.loc 1 1520 3 view .LVU568
 1822 0064 0848     		ldr	r0, .L197+12
1516:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1516 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
1517:src/display.c **** 	      }
 1825              		.loc 1 1517 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1520:src/display.c **** 	      }
 1828              		.loc 1 1520 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1522:src/display.c **** #endif
 1832              		.loc 1 1522 8 view .LVU572
1522:src/display.c **** #endif
 1833              		.loc 1 1522 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1525:src/display.c **** 	  }
 1837              		.loc 1 1525 13 view .LVU574
 1838 0078 0120     		movs	r0, #1
1529:src/display.c **** 
 1839              		.loc 1 1529 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
ARM GAS  /tmp/ccobNVTR.s 			page 94


 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE49:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1574:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1574 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1575:src/display.c **** 	int j=0;
 1870              		.loc 1 1575 2 view .LVU577
1576:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1871              		.loc 1 1576 2 view .LVU578
1574:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1574 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1574:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1574 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1576:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1576 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1580:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1580 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1574:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1574 62 view .LVU583
 1888 000a 0D46     		mov	r5, r1
1576:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1576 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1577:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1577 2 is_stmt 1 view .LVU585
ARM GAS  /tmp/ccobNVTR.s 			page 95


 1892              	.LVL186:
1578:src/display.c **** 
 1893              		.loc 1 1578 2 view .LVU586
1580:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1580 2 view .LVU587
1580:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1580 6 is_stmt 0 view .LVU588
 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1580:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1580 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1581:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1581 4 is_stmt 1 view .LVU590
1581:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1581 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1582:src/display.c **** 	  return;
 1905              		.loc 1 1582 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB193:
 1908              	.LBI193:
 402:src/display.c ****   if (res) *res++ = ch;
 1909              		.loc 1 402 14 view .LVU593
 1910              	.LBB194:
 403:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 403 3 view .LVU594
 403:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 403 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
 403:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 403 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 403:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 403 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 403:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 403 19 view .LVU598
 1923              	.LBE194:
 1924              	.LBE193:
1637:src/display.c **** 
 1925              		.loc 1 1637 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1586:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
ARM GAS  /tmp/ccobNVTR.s 			page 96


 1934              		.loc 1 1586 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1587:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1587 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1588:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1588 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1589:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1589 2 view .LVU603
1589:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1589 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1597:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1954              		.loc 1 1597 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
 1958              	.LVL195:
1598:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1598 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1599:src/display.c **** 
 1965              		.loc 1 1599 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1601:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1601 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1602:src/display.c **** 	hms_step(&t, &u, &min);
 1976              		.loc 1 1602 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
ARM GAS  /tmp/ccobNVTR.s 			page 97


1603:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1603 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
1604:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1604 2 view .LVU611
1604:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1604 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1605:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1605 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1605:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1605 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1605:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1605 19 is_stmt 1 view .LVU615
1605:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1605 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
 2000 008c 3C3A     		subhi	r2, r2, #60
1605:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2001              		.loc 1 1605 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1606:src/display.c **** 
 2004              		.loc 1 1606 2 is_stmt 1 view .LVU618
1606:src/display.c **** 
 2005              		.loc 1 1606 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1606:src/display.c **** 
 2008              		.loc 1 1606 19 is_stmt 1 discriminator 1 view .LVU620
1606:src/display.c **** 
 2009              		.loc 1 1606 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1606:src/display.c **** 
 2012              		.loc 1 1606 30 is_stmt 1 discriminator 1 view .LVU622
1606:src/display.c **** 
 2013              		.loc 1 1606 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1609:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1609 2 is_stmt 1 view .LVU624
1609:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1609 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
ARM GAS  /tmp/ccobNVTR.s 			page 98


 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1610:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1610 2 is_stmt 1 view .LVU626
 2027              	.LBB196:
 2028              	.LBI196:
 402:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 402 14 view .LVU627
 2030              	.LBB197:
 403:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 403 3 view .LVU628
 403:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 403 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 403:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 403 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 403:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 403 12 is_stmt 1 view .LVU631
 403:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 403 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
 2041              	.LVL205:
 403:src/display.c ****   else	set_dig(base, ch);
 2042              		.loc 1 403 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 405:src/display.c **** }
 2047              		.loc 1 405 3 is_stmt 1 view .LVU634
 405:src/display.c **** }
 2048              		.loc 1 405 3 is_stmt 0 view .LVU635
 2049              	.LBE197:
 2050              	.LBE196:
1611:src/display.c **** 
 2051              		.loc 1 1611 2 is_stmt 1 view .LVU636
1614:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1614 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1611:src/display.c **** 
 2055              		.loc 1 1611 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1614:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1614 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
 2060 00c8 03AA     		add	r2, sp, #12
1611:src/display.c **** 
 2061              		.loc 1 1611 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1614:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1614 2 is_stmt 1 view .LVU641
ARM GAS  /tmp/ccobNVTR.s 			page 99


1614:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1614 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1615:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1615 2 is_stmt 1 view .LVU643
 2068              	.LBB199:
 2069              	.LBI199:
 402:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 402 14 view .LVU644
 2071              	.LBB200:
 403:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 403 3 view .LVU645
 403:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 403 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 403:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 403 12 is_stmt 1 view .LVU647
 403:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 403 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 403:src/display.c ****   else	set_dig(base, ch);
 2081              		.loc 1 403 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
 2085              	.L213:
 405:src/display.c **** }
 2086              		.loc 1 405 3 is_stmt 1 view .LVU650
 405:src/display.c **** }
 2087              		.loc 1 405 3 is_stmt 0 view .LVU651
 2088              	.LBE200:
 2089              	.LBE199:
1616:src/display.c **** 
 2090              		.loc 1 1616 2 is_stmt 1 view .LVU652
1616:src/display.c **** 
 2091              		.loc 1 1616 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1619:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1619 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1616:src/display.c **** 
 2096              		.loc 1 1616 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1619:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1619 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1616:src/display.c **** 
 2102              		.loc 1 1616 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1619:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
ARM GAS  /tmp/ccobNVTR.s 			page 100


 2104              		.loc 1 1619 2 is_stmt 1 view .LVU658
1619:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1619 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1620:src/display.c **** 
 2108              		.loc 1 1620 8 view .LVU660
 2109 00f4 3149     		ldr	r1, .L230+4
1619:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1619 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1620:src/display.c **** 
 2113              		.loc 1 1620 2 is_stmt 1 view .LVU662
1620:src/display.c **** 
 2114              		.loc 1 1620 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1620:src/display.c **** 
 2117              		.loc 1 1620 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1623:src/display.c **** 
 2122              		.loc 1 1623 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
1620:src/display.c **** 
 2124              		.loc 1 1620 8 view .LVU666
 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1623:src/display.c **** 
 2127              		.loc 1 1623 2 is_stmt 1 view .LVU667
1623:src/display.c **** 
 2128              		.loc 1 1623 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1623:src/display.c **** 
 2132              		.loc 1 1623 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1626:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1626 2 is_stmt 1 view .LVU670
 2138              	.LBB202:
 2139              	.LBI202:
 402:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 402 14 view .LVU671
 2141              	.LBB203:
 403:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 403 3 view .LVU672
 403:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 403 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
ARM GAS  /tmp/ccobNVTR.s 			page 101


 403:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 403 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 403:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 403 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
 2151              	.LVL218:
 405:src/display.c **** }
 2152              		.loc 1 405 3 is_stmt 1 view .LVU676
 405:src/display.c **** }
 2153              		.loc 1 405 3 is_stmt 0 view .LVU677
 2154              	.LBE203:
 2155              	.LBE202:
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1630 2 is_stmt 1 view .LVU678
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1630 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1630 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1630 5 view .LVU681
 2165 0122 78B9     		cbnz	r0, .L229
1631:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2166              		.loc 1 1631 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB206:
 2169              	.LBI206:
 402:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 402 14 view .LVU683
 2171              	.LBB207:
 403:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 403 3 view .LVU684
 403:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 403 12 view .LVU685
 403:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 403 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE207:
 2178              	.LBE206:
1637:src/display.c **** 
 2179              		.loc 1 1637 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1590:src/display.c **** 	    *res++ += '-';
ARM GAS  /tmp/ccobNVTR.s 			page 102


 2188              		.loc 1 1590 4 is_stmt 1 view .LVU688
1590:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1590 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1591:src/display.c **** 	  else
 2191              		.loc 1 1591 6 is_stmt 1 view .LVU690
1591:src/display.c **** 	  else
 2192              		.loc 1 1591 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1591:src/display.c **** 	  else
 2195              		.loc 1 1591 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1591:src/display.c **** 	  else
 2198              		.loc 1 1591 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1591:src/display.c **** 	  else
 2201              		.loc 1 1591 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1594:src/display.c **** 	}
 2205              		.loc 1 1594 4 is_stmt 1 view .LVU695
 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB208:
 2214              	.LBB204:
 403:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 403 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 403:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 403 16 view .LVU697
 2220              	.LBE204:
 2221              	.LBE208:
1632:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1632 9 is_stmt 1 view .LVU698
1632:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1632 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1632:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2227              		.loc 1 1632 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1633:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1633 4 is_stmt 1 view .LVU701
1633:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
ARM GAS  /tmp/ccobNVTR.s 			page 103


 2231              		.loc 1 1633 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1633:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1633 7 view .LVU703
 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1634:src/display.c **** 	  }
 2239              		.loc 1 1634 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB209:
 2242              	.LBI209:
 402:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 402 14 view .LVU705
 2244              	.LBB210:
 403:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 403 3 view .LVU706
 403:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 403 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 403:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 403 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
 403:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 403 19 is_stmt 0 view .LVU709
 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 403:src/display.c ****   else	set_dig(base, ch);
 2256              		.loc 1 403 19 view .LVU710
 2257              	.LBE210:
 2258              	.LBE209:
1593:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1593 6 is_stmt 1 view .LVU711
 2260              	.LBB212:
 2261              	.LBI212:
 291:src/display.c **** {
 2262              		.loc 1 291 13 view .LVU712
 2263              	.LBB213:
 293:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 293 3 view .LVU713
 293:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 293 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 294:src/display.c **** }
 2268              		.loc 1 294 3 view .LVU715
 2269 016c 8120     		movs	r0, #129
 293:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 293 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 294:src/display.c **** }
 2272              		.loc 1 294 3 is_stmt 1 view .LVU717
ARM GAS  /tmp/ccobNVTR.s 			page 104


 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 295:src/display.c **** 
 2275              		.loc 1 295 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
 295:src/display.c **** 
 2279              		.loc 1 295 1 view .LVU719
 2280              	.LBE213:
 2281              	.LBE212:
 2282              	.LBB214:
 2283              	.LBB205:
 404:src/display.c ****   return res;
 2284              		.loc 1 404 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 404:src/display.c ****   return res;
 2287              		.loc 1 404 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 405:src/display.c **** }
 2291              		.loc 1 405 3 is_stmt 1 view .LVU722
 405:src/display.c **** }
 2292              		.loc 1 405 3 is_stmt 0 view .LVU723
 2293              	.LBE205:
 2294              	.LBE214:
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2295              		.loc 1 1630 2 is_stmt 1 view .LVU724
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1630 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1630:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1630 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB215:
 2307              	.LBB195:
 404:src/display.c ****   return res;
 2308              		.loc 1 404 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE195:
 2314              	.LBE215:
1583:src/display.c **** 	}
 2315              		.loc 1 1583 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
ARM GAS  /tmp/ccobNVTR.s 			page 105


 2319              	.LBB216:
 2320              	.LBB201:
 404:src/display.c ****   return res;
 2321              		.loc 1 404 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
 404:src/display.c ****   return res;
 2325              		.loc 1 404 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 404:src/display.c ****   return res;
 2328              		.loc 1 404 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 404:src/display.c ****   return res;
 2333              		.loc 1 404 8 view .LVU732
 2334              	.LBE201:
 2335              	.LBE216:
 2336              	.LBB217:
 2337              	.LBB198:
 404:src/display.c ****   return res;
 2338              		.loc 1 404 8 is_stmt 1 view .LVU733
 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
 2341              	.LVL245:
 404:src/display.c ****   return res;
 2342              		.loc 1 404 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 404:src/display.c ****   return res;
 2345              		.loc 1 404 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 404:src/display.c ****   return res;
 2350              		.loc 1 404 8 view .LVU736
 2351              	.LBE198:
 2352              	.LBE217:
 2353              	.LBB218:
 2354              	.LBB211:
 404:src/display.c ****   return res;
 2355              		.loc 1 404 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
ARM GAS  /tmp/ccobNVTR.s 			page 106


 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE211:
 2369              	.LBE218:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1640:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1640 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1641:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1641 2 view .LVU739
1642:src/display.c **** 	int j;
 2389              		.loc 1 1642 2 view .LVU740
1643:src/display.c **** 
 2390              		.loc 1 1643 2 view .LVU741
1645:src/display.c **** 	  return 1;
 2391              		.loc 1 1645 2 view .LVU742
1640:src/display.c **** 	decNumber x, w, n, d, t;
 2392              		.loc 1 1640 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1645:src/display.c **** 	  return 1;
 2403              		.loc 1 1645 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1640:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1640 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1645:src/display.c **** 	  return 1;
 2408              		.loc 1 1645 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
1645:src/display.c **** 	  return 1;
 2411              		.loc 1 1645 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1646:src/display.c **** 	dn_abs(&x, rgx);
ARM GAS  /tmp/ccobNVTR.s 			page 107


 2415              		.loc 1 1646 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1703:src/display.c **** 
 2418              		.loc 1 1703 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB227:
 2429              	.LBI227:
1640:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1640 18 is_stmt 1 view .LVU750
 2431              	.LBB228:
1647:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1647 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
 2437              	.LVL254:
1648:src/display.c **** 	  return 0;
 2438              		.loc 1 1648 2 view .LVU752
1648:src/display.c **** 	  return 0;
 2439              		.loc 1 1648 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
 2443              	.LVL255:
1648:src/display.c **** 	  return 0;
 2444              		.loc 1 1648 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1650:src/display.c **** 	  return 0;
 2447              		.loc 1 1650 2 is_stmt 1 view .LVU755
1650:src/display.c **** 	  return 0;
 2448              		.loc 1 1650 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1650:src/display.c **** 	  return 0;
 2453              		.loc 1 1650 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
1652:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1652 2 is_stmt 1 view .LVU758
1652:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1652 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
ARM GAS  /tmp/ccobNVTR.s 			page 108


 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1658:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1658 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1659:src/display.c **** 
 2469              		.loc 1 1659 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1661:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1661 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1662:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1662 2 view .LVU763
 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
 2486              	.LVL261:
1663:src/display.c **** 
 2487              		.loc 1 1663 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1665:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1665 2 view .LVU765
1665:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1665 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1665:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1665 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1670:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1670 2 is_stmt 1 view .LVU768
1670:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1670 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1670:src/display.c **** 	  if (!dn_eq0(&w)) {
ARM GAS  /tmp/ccobNVTR.s 			page 109


 2507              		.loc 1 1670 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1671:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1671 4 is_stmt 1 view .LVU771
1671:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1671 9 is_stmt 0 view .LVU772
 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1671:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1671 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1642:src/display.c **** 	int j;
 2518              		.loc 1 1642 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1642:src/display.c **** 	int j;
 2521              		.loc 1 1642 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1679:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1679 2 is_stmt 1 view .LVU776
1679:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1679 17 is_stmt 0 view .LVU777
 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1679:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1679 6 view .LVU778
 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1680:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1680 2 is_stmt 1 view .LVU779
1680:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1680 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1680:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1680 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1681:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1681 2 is_stmt 1 view .LVU782
1681:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1681 17 is_stmt 0 view .LVU783
 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1681:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1681 6 view .LVU784
ARM GAS  /tmp/ccobNVTR.s 			page 110


 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1682:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1682 2 is_stmt 1 view .LVU785
1682:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1682 5 is_stmt 0 view .LVU786
 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1683:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1683 2 is_stmt 1 view .LVU787
1683:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1683 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1687 12 is_stmt 1 view .LVU789
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1687 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1686:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1686 11 view .LVU791
 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
 2570              	.L247:
1688:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2571              		.loc 1 1688 4 is_stmt 1 view .LVU792
 2572              	.LBB229:
 2573              	.LBI229:
 402:src/display.c ****   if (res) *res++ = ch;
 2574              		.loc 1 402 14 view .LVU793
 2575              	.LBB230:
 403:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 403 3 view .LVU794
 403:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 403 12 view .LVU795
 403:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 403 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 403:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 403 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 403:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 403 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
 403:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 403 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 405:src/display.c **** }
ARM GAS  /tmp/ccobNVTR.s 			page 111


 2591              		.loc 1 405 3 is_stmt 1 view .LVU800
 405:src/display.c **** }
 2592              		.loc 1 405 3 is_stmt 0 view .LVU801
 2593              	.LBE230:
 2594              	.LBE229:
1689:src/display.c **** 	}
 2595              		.loc 1 1689 4 is_stmt 1 view .LVU802
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1687 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1689:src/display.c **** 	}
 2599              		.loc 1 1689 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1687 24 is_stmt 1 view .LVU805
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1687 12 view .LVU806
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1687 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
1692:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1692 2 is_stmt 1 view .LVU808
1692:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1692 6 is_stmt 0 view .LVU809
 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1692:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2614              		.loc 1 1692 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1694:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1694 7 is_stmt 1 view .LVU811
1694:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1694 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1697:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1697 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1698:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1698 26 is_stmt 1 view .LVU814
 2628              	.LBB233:
 2629              	.LBB231:
 403:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 403 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
ARM GAS  /tmp/ccobNVTR.s 			page 112


 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 403:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 403 16 view .LVU816
 2637              	.LBE231:
 2638              	.LBE233:
 2639              	.LBB234:
 2640              	.LBB235:
 403:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 403 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 403:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 403 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 405:src/display.c **** }
 2648              		.loc 1 405 3 is_stmt 1 view .LVU819
 405:src/display.c **** }
 2649              		.loc 1 405 3 is_stmt 0 view .LVU820
 2650              	.LBE235:
 2651              	.LBE234:
1700:src/display.c **** 	}
 2652              		.loc 1 1700 4 is_stmt 1 view .LVU821
1698:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2653              		.loc 1 1698 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2655              	.LVL287:
1700:src/display.c **** 	}
 2656              		.loc 1 1700 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
 2658              	.LVL288:
1698:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1698 38 is_stmt 1 view .LVU824
1698:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1698 26 view .LVU825
1698:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1698 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1699:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1699 4 is_stmt 1 view .LVU827
 2667              	.LBB237:
 2668              	.LBI234:
 402:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 402 14 view .LVU828
 2670              	.LBB236:
 403:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 403 3 view .LVU829
 403:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 403 12 view .LVU830
 403:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 403 16 is_stmt 0 view .LVU831
ARM GAS  /tmp/ccobNVTR.s 			page 113


 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 403:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 403 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
 404:src/display.c ****   return res;
 2680              		.loc 1 404 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 404:src/display.c ****   return res;
 2684              		.loc 1 404 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 404:src/display.c ****   return res;
 2688              		.loc 1 404 8 view .LVU835
 2689              	.LBE236:
 2690              	.LBE237:
 2691              	.LBB238:
 2692              	.LBB232:
 404:src/display.c ****   return res;
 2693              		.loc 1 404 8 is_stmt 1 view .LVU836
 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
 2696              	.LVL294:
 404:src/display.c ****   return res;
 2697              		.loc 1 404 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
 404:src/display.c ****   return res;
 2701              		.loc 1 404 8 view .LVU838
 2702              	.LBE232:
 2703              	.LBE238:
1693:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1693 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1684:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1684 4 is_stmt 1 view .LVU840
1685:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1685 4 view .LVU841
1685:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1685 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
 2714              	.LVL297:
1687:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1687 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
ARM GAS  /tmp/ccobNVTR.s 			page 114


1676:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1676 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
1677:src/display.c **** 	}
 2725              		.loc 1 1677 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1642:src/display.c **** 	int j;
 2729              		.loc 1 1642 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1677:src/display.c **** 	}
 2732              		.loc 1 1677 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1642:src/display.c **** 	int j;
 2735              		.loc 1 1642 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
 2739              	.L264:
1653:src/display.c **** 	    *res++ += '-';
 2740              		.loc 1 1653 4 is_stmt 1 view .LVU849
1653:src/display.c **** 	    *res++ += '-';
 2741              		.loc 1 1653 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1654:src/display.c **** 	  else
 2743              		.loc 1 1654 6 is_stmt 1 view .LVU851
1654:src/display.c **** 	  else
 2744              		.loc 1 1654 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1654:src/display.c **** 	  else
 2747              		.loc 1 1654 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1654:src/display.c **** 	  else
 2750              		.loc 1 1654 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1654:src/display.c **** 	  else
 2753              		.loc 1 1654 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1654:src/display.c **** 	  else
 2756              		.loc 1 1654 10 view .LVU856
 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1666:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1666 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
ARM GAS  /tmp/ccobNVTR.s 			page 115


 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1667:src/display.c **** 	}
 2764              		.loc 1 1667 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
 2768 016e 87E7     		b	.L239
 2769              	.L266:
1672:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1672 6 view .LVU859
1672:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1672 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1672:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1672 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1672:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1672 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1672:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1672 10 view .LVU863
 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
 2783              	.LVL311:
1673:src/display.c **** 	  }
 2784              		.loc 1 1673 6 is_stmt 1 view .LVU864
1673:src/display.c **** 	  }
 2785              		.loc 1 1673 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
 2787              	.LVL312:
1673:src/display.c **** 	  }
 2788              		.loc 1 1673 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1673:src/display.c **** 	  }
 2792              		.loc 1 1673 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1656:src/display.c **** 	}
 2796              		.loc 1 1656 6 is_stmt 1 view .LVU868
 2797              	.LBB239:
 2798              	.LBI239:
 291:src/display.c **** {
 2799              		.loc 1 291 13 view .LVU869
 2800              	.LBB240:
 293:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 293 3 view .LVU870
 293:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 293 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
ARM GAS  /tmp/ccobNVTR.s 			page 116


 294:src/display.c **** }
 2805              		.loc 1 294 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 293:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 293 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 294:src/display.c **** }
 2809              		.loc 1 294 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 295:src/display.c **** 
 2812              		.loc 1 295 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE240:
 2825              	.LBE239:
 2826              	.LBE228:
 2827              	.LBE227:
 2828              		.cfi_endproc
 2829              	.LFE23:
 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 557:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 557 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 558:src/display.c ****       int c;
 2849              		.loc 1 558 7 view .LVU877
 2850              	.LVL316:
 559:src/display.c ****       unsigned int b;
 2851              		.loc 1 559 7 view .LVU878
 560:src/display.c **** 
 2852              		.loc 1 560 7 view .LVU879
ARM GAS  /tmp/ccobNVTR.s 			page 117


 563:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 563 7 view .LVU880
 557:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 557 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
 2858              		.cfi_offset 14, -4
 563:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 563 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 572:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 572 7 is_stmt 1 view .LVU883
 572:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 572 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 572:src/display.c **** 	SET_EXP_SIGN;
 2872              		.loc 1 572 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
 2874 001a 17D9     		bls	.L280
 2875              	.L273:
 574:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 574 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 575:src/display.c **** 
 2878              		.loc 1 575 7 view .LVU887
 574:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 574 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 575:src/display.c **** 
 2883              		.loc 1 575 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 578:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 578 7 is_stmt 1 view .LVU890
 578:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 578 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
 578:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 578 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 580:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 580 7 is_stmt 1 view .LVU893
ARM GAS  /tmp/ccobNVTR.s 			page 118


 580:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 580 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 580:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 580 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
 582:src/display.c **** 
 2901              		.loc 1 582 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 568:src/display.c ****       }
 2905              		.loc 1 568 16 is_stmt 1 view .LVU897
 568:src/display.c ****       }
 2906              		.loc 1 568 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 568:src/display.c ****       }
 2911              		.loc 1 568 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 568:src/display.c ****       }
 2914              		.loc 1 568 39 is_stmt 1 view .LVU900
 572:src/display.c **** 	SET_EXP_SIGN;
 2915              		.loc 1 572 7 view .LVU901
 572:src/display.c **** 	SET_EXP_SIGN;
 2916              		.loc 1 572 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 572:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 572 10 view .LVU903
 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 573:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 573 2 is_stmt 1 view .LVU904
 2923              	.LBB247:
 2924              	.LBI247:
 303:src/display.c **** {
 2925              		.loc 1 303 13 view .LVU905
 2926              	.LBB248:
 305:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 305 3 view .LVU906
 305:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 305 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 306:src/display.c **** }
 2931              		.loc 1 306 3 view .LVU908
 2932 0050 8220     		movs	r0, #130
 305:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 305 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 306:src/display.c **** }
 2935              		.loc 1 306 3 is_stmt 1 view .LVU910
ARM GAS  /tmp/ccobNVTR.s 			page 119


 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 307:src/display.c **** 
 2938              		.loc 1 307 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
 307:src/display.c **** 
 2942              		.loc 1 307 1 view .LVU912
 2943              	.LBE248:
 2944              	.LBE247:
 2945              	.LBB249:
 2946              	.LBI249:
 557:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 557 17 is_stmt 1 view .LVU913
 2948              	.LBB250:
 581:src/display.c ****     }
 2949              		.loc 1 581 2 view .LVU914
 2950              	.LBE250:
 2951              	.LBE249:
 582:src/display.c **** 
 2952              		.loc 1 582 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958              	.LVL327:
 2959              	.LBB252:
 2960              	.LBB251:
 581:src/display.c ****     }
 2961              		.loc 1 581 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 581:src/display.c ****     }
 2968              		.loc 1 581 2 view .LVU917
 2969              	.LBE251:
 2970              	.LBE252:
 579:src/display.c ****       if (get_overflow())
 2971              		.loc 1 579 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
ARM GAS  /tmp/ccobNVTR.s 			page 120


 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1366:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1366 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1366:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1366 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
1366:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1366 67 view .LVU921
 3019 0006 9246     		mov	r10, r2
 3020 0008 8046     		mov	r8, r0
 3021 000a 8946     		mov	r9, r1
1367:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1367 2 is_stmt 1 view .LVU922
1367:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1367 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1367:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1367 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L374
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1373:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3031              		.loc 1 1373 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1367:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1367 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
ARM GAS  /tmp/ccobNVTR.s 			page 121


 3036              	.LVL332:
1368:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1368 2 is_stmt 1 view .LVU927
1369:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1369 2 view .LVU928
1370:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1370 2 view .LVU929
1371:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1371 2 view .LVU930
1372:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1372 2 view .LVU931
1373:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1373 2 view .LVU932
1373:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1373 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1374:src/display.c **** 
 3045              		.loc 1 1374 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1376:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1376 2 view .LVU935
 3048 0020 00F24481 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L374+4
 3050 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 3051              	.LVL334:
1384:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1384 2 view .LVU936
1384:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1384 5 is_stmt 0 view .LVU937
 3054 002a BAF1000F 		cmp	r10, #0
 3055 002e 00F04481 		beq	.L365
 3056              	.LVL335:
 3057              	.L288:
1389:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1389 2 is_stmt 1 view .LVU938
1389:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1389 24 is_stmt 0 view .LVU939
 3060 0032 6B1E     		subs	r3, r5, #1
1389:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1389 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1389:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1389 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F080 		bne	.L366
1406:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1406 4 is_stmt 1 view .LVU942
1406:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1406 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
 3070 0046 18DC     		bgt	.L299
 3071              	.LBB253:
1407:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1407 6 is_stmt 1 view .LVU944
1407:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1407 38 is_stmt 0 view .LVU945
ARM GAS  /tmp/ccobNVTR.s 			page 122


 3074 0048 0121     		movs	r1, #1
 3075 004a ABF12006 		sub	r6, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA06F3 		lsl	r3, r1, r6
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
 3081              	.LVL336:
1408:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1408 6 is_stmt 1 view .LVU946
1407:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1407 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1408:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1408 9 view .LVU948
 3087 0068 00EA0800 		and	r0, r0, r8
 3088 006c 01EA0901 		and	r1, r1, r9
 3089              	.LVL337:
1409:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1409 9 view .LVU949
 3091 0070 0A2D     		cmp	r5, #10
1408:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1408 9 view .LVU950
 3093 0072 8046     		mov	r8, r0
 3094              	.LVL338:
1408:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3095              		.loc 1 1408 9 view .LVU951
 3096 0074 8946     		mov	r9, r1
1409:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1409 6 is_stmt 1 view .LVU952
1409:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1409 9 is_stmt 0 view .LVU953
 3099 0076 00F02681 		beq	.L367
 3100              	.LVL339:
 3101              	.L299:
1409:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1409 9 view .LVU954
 3103              	.LBE253:
1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1413 4 is_stmt 1 view .LVU955
1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1413 8 is_stmt 0 view .LVU956
 3106 007a B54B     		ldr	r3, .L374+8
 3107 007c 1B68     		ldr	r3, [r3]
 3108 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1413 7 view .LVU957
 3110 0082 9907     		lsls	r1, r3, #30
 3111 0084 3FD5     		bpl	.L328
1416:src/display.c **** 	    v = (unsigned long long int)vs;
 3112              		.loc 1 1416 11 is_stmt 1 view .LVU958
 3113              	.LBB254:
1424:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1424 6 view .LVU959
1425:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1425 6 view .LVU960
ARM GAS  /tmp/ccobNVTR.s 			page 123


1425:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1425 25 is_stmt 0 view .LVU961
 3117 0086 6A08     		lsrs	r2, r5, #1
 3118              	.LVL340:
1426:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1426 6 is_stmt 1 view .LVU962
1426:src/display.c **** 	    v = (unsigned long long int)vs;
 3120              		.loc 1 1426 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1426:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1426 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1427:src/display.c **** 
 3131              		.loc 1 1427 6 is_stmt 1 discriminator 4 view .LVU965
1429:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1429 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0306 		add	r6, fp, r3
1429:src/display.c **** 	    for (i=0; i<n; i++) {
 3134              		.loc 1 1429 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
 3136              	.LVL342:
1429:src/display.c **** 	    for (i=0; i<n; i++) {
 3137              		.loc 1 1429 21 discriminator 4 view .LVU968
 3138 00a2 B6FBF3F6 		udiv	r6, r6, r3
1430:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1430 6 discriminator 4 view .LVU969
 3140 00a6 002E     		cmp	r6, #0
1427:src/display.c **** 
 3141              		.loc 1 1427 8 discriminator 4 view .LVU970
 3142 00a8 4046     		mov	r0, r8
 3143 00aa 4946     		mov	r1, r9
 3144              	.LVL343:
1429:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1429 6 is_stmt 1 discriminator 4 view .LVU971
1430:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1430 6 discriminator 4 view .LVU972
1430:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1430 16 discriminator 4 view .LVU973
1430:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1430 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ac 40F36D81 		ble	.L329
 3150 00b0 05AC     		add	r4, sp, #20
 3151 00b2 DFF8A8B2 		ldr	fp, .L374+20
 3152              	.LVL344:
1430:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1430 6 discriminator 4 view .LVU975
 3154 00b6 3719     		adds	r7, r6, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB255:
ARM GAS  /tmp/ccobNVTR.s 			page 124


1431:src/display.c **** 	      v /= b;
 3158              		.loc 1 1431 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00b8 2A46     		mov	r2, r5
 3160 00ba 0023     		movs	r3, #0
 3161 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1432:src/display.c **** 	      buf[i] = DIGITS[r];
 3163              		.loc 1 1432 8 discriminator 3 view .LVU977
1433:src/display.c **** 	    }
 3164              		.loc 1 1433 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c4 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1433:src/display.c **** 	    }
 3168              		.loc 1 1433 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE255:
1430:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1430 21 discriminator 3 view .LVU980
1430:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1430 16 discriminator 3 view .LVU981
1430:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1430 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00c8 BC42     		cmp	r4, r7
 3174 00ca F5D1     		bne	.L306
 3175 00cc 06F1FF39 		add	r9, r6, #-1
1430:src/display.c **** 	      const int r = v % b;
 3176              		.loc 1 1430 6 view .LVU983
 3177 00d0 3446     		mov	r4, r6
 3178              	.LVL348:
 3179              	.L298:
1430:src/display.c **** 	      const int r = v % b;
 3180              		.loc 1 1430 6 view .LVU984
 3181              	.LBE254:
1439:src/display.c **** 	  if (sign) *res++ = '-';
 3182              		.loc 1 1439 2 is_stmt 1 view .LVU985
1439:src/display.c **** 	  if (sign) *res++ = '-';
 3183              		.loc 1 1439 5 is_stmt 0 view .LVU986
 3184 00d2 BAF1000F 		cmp	r10, #0
 3185 00d6 41D0     		beq	.L307
 3186              	.LVL349:
 3187              	.L368:
1440:src/display.c **** 	  while (--i >= 0)
 3188              		.loc 1 1440 4 is_stmt 1 view .LVU987
1440:src/display.c **** 	  while (--i >= 0)
 3189              		.loc 1 1440 7 is_stmt 0 view .LVU988
 3190 00d8 049B     		ldr	r3, [sp, #16]
 3191 00da 13B1     		cbz	r3, .L308
1440:src/display.c **** 	  while (--i >= 0)
 3192              		.loc 1 1440 14 is_stmt 1 discriminator 1 view .LVU989
 3193              	.LVL350:
1440:src/display.c **** 	  while (--i >= 0)
 3194              		.loc 1 1440 21 is_stmt 0 discriminator 1 view .LVU990
 3195 00dc 2D23     		movs	r3, #45
 3196 00de 0AF8013B 		strb	r3, [r10], #1
 3197              	.LVL351:
 3198              	.L308:
1441:src/display.c **** 	    *res++ = buf[i];
ARM GAS  /tmp/ccobNVTR.s 			page 125


 3199              		.loc 1 1441 10 is_stmt 1 view .LVU991
1441:src/display.c **** 	    *res++ = buf[i];
 3200              		.loc 1 1441 10 is_stmt 0 view .LVU992
 3201 00e2 B9F1FF3F 		cmp	r9, #-1
 3202 00e6 0BD0     		beq	.L285
 3203 00e8 09F10103 		add	r3, r9, #1
 3204 00ec 05A9     		add	r1, sp, #20
 3205 00ee 0AF1FF3A 		add	r10, r10, #-1
 3206 00f2 0B44     		add	r3, r3, r1
 3207              	.LVL352:
 3208              	.L310:
1442:src/display.c **** 	} else {
 3209              		.loc 1 1442 6 is_stmt 1 view .LVU993
1442:src/display.c **** 	} else {
 3210              		.loc 1 1442 13 is_stmt 0 view .LVU994
 3211 00f4 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 3212              	.LVL353:
1442:src/display.c **** 	} else {
 3213              		.loc 1 1442 13 view .LVU995
 3214 00f8 0AF8012F 		strb	r2, [r10, #1]!
 3215              	.LVL354:
1441:src/display.c **** 	    *res++ = buf[i];
 3216              		.loc 1 1441 10 is_stmt 1 view .LVU996
1441:src/display.c **** 	    *res++ = buf[i];
 3217              		.loc 1 1441 10 is_stmt 0 view .LVU997
 3218 00fc 9942     		cmp	r1, r3
 3219 00fe F9D1     		bne	.L310
 3220              	.LVL355:
 3221              	.L285:
1488:src/display.c **** 
 3222              		.loc 1 1488 7 view .LVU998
 3223 0100 17B0     		add	sp, sp, #92
 3224              		.cfi_remember_state
 3225              		.cfi_def_cfa_offset 36
 3226              		@ sp needed
 3227 0102 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3228              	.LVL356:
 3229              	.L328:
 3230              		.cfi_restore_state
1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3231              		.loc 1 1413 25 discriminator 1 view .LVU999
 3232 0106 58EA0903 		orrs	r3, r8, r9
 3233 010a 00F0C680 		beq	.L293
1416:src/display.c **** 	    v = (unsigned long long int)vs;
 3234              		.loc 1 1416 11 is_stmt 1 view .LVU1000
1417:src/display.c **** 	    for (i=0; v != 0; i++) {
 3235              		.loc 1 1417 6 view .LVU1001
 3236 010e 2A46     		mov	r2, r5
1417:src/display.c **** 	    for (i=0; v != 0; i++) {
 3237              		.loc 1 1417 8 is_stmt 0 view .LVU1002
 3238 0110 4746     		mov	r7, r8
 3239 0112 0023     		movs	r3, #0
 3240 0114 0DF11408 		add	r8, sp, #20
 3241 0118 DFF840B2 		ldr	fp, .L374+20
 3242              	.LVL357:
1417:src/display.c **** 	    for (i=0; v != 0; i++) {
 3243              		.loc 1 1417 8 view .LVU1003
ARM GAS  /tmp/ccobNVTR.s 			page 126


 3244 011c 0095     		str	r5, [sp]
 3245 011e 4E46     		mov	r6, r9
1418:src/display.c **** 	      const int r = v % b;
 3246              		.loc 1 1418 6 is_stmt 1 view .LVU1004
 3247              	.LVL358:
1418:src/display.c **** 	      const int r = v % b;
 3248              		.loc 1 1418 16 view .LVU1005
 3249 0120 4546     		mov	r5, r8
 3250              	.LVL359:
1418:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1418 16 is_stmt 0 view .LVU1006
 3252 0122 9946     		mov	r9, r3
 3253 0124 9046     		mov	r8, r2
 3254              	.LVL360:
 3255              	.L304:
 3256              	.LBB256:
1419:src/display.c **** 	      v /= b;
 3257              		.loc 1 1419 8 is_stmt 1 discriminator 3 view .LVU1007
 3258 0126 3846     		mov	r0, r7
 3259 0128 3146     		mov	r1, r6
 3260 012a 4246     		mov	r2, r8
 3261 012c 4B46     		mov	r3, r9
 3262 012e FFF7FEFF 		bl	__aeabi_uldivmod
 3263              	.LVL361:
 3264 0132 3346     		mov	r3, r6
 3265 0134 9446     		mov	ip, r2
 3266              	.LVL362:
1420:src/display.c **** 	      buf[i] = DIGITS[r];
 3267              		.loc 1 1420 8 discriminator 3 view .LVU1008
 3268              	.LBE256:
1418:src/display.c **** 	      const int r = v % b;
 3269              		.loc 1 1418 6 is_stmt 0 discriminator 3 view .LVU1009
 3270 0136 4B45     		cmp	r3, r9
 3271 0138 3A46     		mov	r2, r7
 3272              	.LVL363:
1418:src/display.c **** 	      const int r = v % b;
 3273              		.loc 1 1418 6 discriminator 3 view .LVU1010
 3274 013a 08BF     		it	eq
 3275 013c 4245     		cmpeq	r2, r8
 3276              	.LBB257:
1421:src/display.c **** 	    }
 3277              		.loc 1 1421 15 discriminator 3 view .LVU1011
 3278 013e 1BF80C70 		ldrb	r7, [fp, ip]	@ zero_extendqisi2
 3279              	.LVL364:
1421:src/display.c **** 	    }
 3280              		.loc 1 1421 15 discriminator 3 view .LVU1012
 3281 0142 05F8017B 		strb	r7, [r5], #1
1420:src/display.c **** 	      buf[i] = DIGITS[r];
 3282              		.loc 1 1420 10 discriminator 3 view .LVU1013
 3283 0146 0E46     		mov	r6, r1
 3284              	.LVL365:
1421:src/display.c **** 	    }
 3285              		.loc 1 1421 8 is_stmt 1 discriminator 3 view .LVU1014
 3286              	.LBE257:
1418:src/display.c **** 	      const int r = v % b;
 3287              		.loc 1 1418 24 discriminator 3 view .LVU1015
 3288              	.LBB258:
ARM GAS  /tmp/ccobNVTR.s 			page 127


1420:src/display.c **** 	      buf[i] = DIGITS[r];
 3289              		.loc 1 1420 10 is_stmt 0 discriminator 3 view .LVU1016
 3290 0148 0746     		mov	r7, r0
 3291 014a 2146     		mov	r1, r4
 3292              	.LVL366:
1420:src/display.c **** 	      buf[i] = DIGITS[r];
 3293              		.loc 1 1420 10 discriminator 3 view .LVU1017
 3294              	.LBE258:
1418:src/display.c **** 	      const int r = v % b;
 3295              		.loc 1 1418 25 discriminator 3 view .LVU1018
 3296 014c 04F10104 		add	r4, r4, #1
 3297              	.LVL367:
1418:src/display.c **** 	      const int r = v % b;
 3298              		.loc 1 1418 16 is_stmt 1 discriminator 3 view .LVU1019
1418:src/display.c **** 	      const int r = v % b;
 3299              		.loc 1 1418 6 is_stmt 0 discriminator 3 view .LVU1020
 3300 0150 E9D2     		bcs	.L304
 3301 0152 009D     		ldr	r5, [sp]
 3302 0154 8946     		mov	r9, r1
1439:src/display.c **** 	  if (sign) *res++ = '-';
 3303              		.loc 1 1439 2 is_stmt 1 view .LVU1021
1439:src/display.c **** 	  if (sign) *res++ = '-';
 3304              		.loc 1 1439 5 is_stmt 0 view .LVU1022
 3305 0156 BAF1000F 		cmp	r10, #0
 3306 015a BDD1     		bne	.L368
 3307              	.LVL368:
 3308              	.L307:
 3309              	.LBB259:
1459:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3310              		.loc 1 1459 4 is_stmt 1 view .LVU1023
1459:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3311              		.loc 1 1459 33 is_stmt 0 view .LVU1024
 3312 015c 022D     		cmp	r5, #2
 3313 015e 00F0D880 		beq	.L369
 3314              	.LVL369:
1460:src/display.c **** 	    : b == 16 ? 2 : 3;
 3315              		.loc 1 1460 4 is_stmt 1 view .LVU1025
1460:src/display.c **** 	    : b == 16 ? 2 : 3;
 3316              		.loc 1 1460 30 is_stmt 0 view .LVU1026
 3317 0162 042D     		cmp	r5, #4
 3318 0164 00F00881 		beq	.L370
1459:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3319              		.loc 1 1459 33 view .LVU1027
 3320 0168 102D     		cmp	r5, #16
 3321 016a 0CBF     		ite	eq
 3322 016c 0225     		moveq	r5, #2
 3323 016e 0325     		movne	r5, #3
 3324 0170 0C27     		movs	r7, #12
 3325              	.LVL370:
 3326              	.L312:
1462:src/display.c **** #endif
 3327              		.loc 1 1462 4 is_stmt 1 view .LVU1028
 3328 0172 FFF7FEFF 		bl	set_separator_decimal_modes
 3329              	.LVL371:
1464:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3330              		.loc 1 1464 4 view .LVU1029
1464:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
ARM GAS  /tmp/ccobNVTR.s 			page 128


 3331              		.loc 1 1464 27 is_stmt 0 view .LVU1030
 3332 0176 99FBF7F3 		sdiv	r3, r9, r7
1465:src/display.c **** 	    State2.window = 0;
 3333              		.loc 1 1465 26 view .LVU1031
 3334 017a 734A     		ldr	r2, .L374
1464:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3335              		.loc 1 1464 17 view .LVU1032
 3336 017c 7549     		ldr	r1, .L374+12
1465:src/display.c **** 	    State2.window = 0;
 3337              		.loc 1 1465 26 view .LVU1033
 3338 017e 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1464:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3339              		.loc 1 1464 17 view .LVU1034
 3340 0180 0B60     		str	r3, [r1]
1465:src/display.c **** 	    State2.window = 0;
 3341              		.loc 1 1465 4 is_stmt 1 view .LVU1035
1465:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1465 8 is_stmt 0 view .LVU1036
 3343 0182 C2F3C208 		ubfx	r8, r2, #3, #3
1465:src/display.c **** 	    State2.window = 0;
 3344              		.loc 1 1465 7 view .LVU1037
 3345 0186 4345     		cmp	r3, r8
 3346 0188 C0F2D780 		blt	.L314
 3347 018c 07FB08F8 		mul	r8, r7, r8
 3348              	.L315:
1467:src/display.c **** 
 3349              		.loc 1 1467 4 is_stmt 1 view .LVU1038
1467:src/display.c **** 
 3350              		.loc 1 1467 11 is_stmt 0 view .LVU1039
 3351 0190 16AB     		add	r3, sp, #88
 3352 0192 16AA     		add	r2, sp, #88
 3353 0194 1C44     		add	r4, r4, r3
 3354              	.LVL372:
1467:src/display.c **** 
 3355              		.loc 1 1467 11 view .LVU1040
 3356 0196 02EB0806 		add	r6, r2, r8
 3357 019a 0023     		movs	r3, #0
 3358 019c 453E     		subs	r6, r6, #69
 3359 019e 04F8443C 		strb	r3, [r4, #-68]
1469:src/display.c **** 	  for (k = 0; k < 12; k++)
 3360              		.loc 1 1469 4 is_stmt 1 view .LVU1041
 3361              	.LVL373:
1470:src/display.c **** 	    if (buf[j + k] == '\0')
 3362              		.loc 1 1470 4 view .LVU1042
1470:src/display.c **** 	    if (buf[j + k] == '\0')
 3363              		.loc 1 1470 16 view .LVU1043
1467:src/display.c **** 
 3364              		.loc 1 1467 11 is_stmt 0 view .LVU1044
 3365 01a2 3246     		mov	r2, r6
 3366              	.LVL374:
 3367              	.L317:
1471:src/display.c **** 	      break;
 3368              		.loc 1 1471 6 is_stmt 1 view .LVU1045
1470:src/display.c **** 	    if (buf[j + k] == '\0')
 3369              		.loc 1 1470 24 view .LVU1046
1471:src/display.c **** 	      break;
 3370              		.loc 1 1471 9 is_stmt 0 view .LVU1047
ARM GAS  /tmp/ccobNVTR.s 			page 129


 3371 01a4 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3372 01a8 0029     		cmp	r1, #0
 3373 01aa 00F0D980 		beq	.L316
1470:src/display.c **** 	    if (buf[j + k] == '\0')
 3374              		.loc 1 1470 25 discriminator 2 view .LVU1048
 3375 01ae 0133     		adds	r3, r3, #1
 3376              	.LVL375:
1470:src/display.c **** 	    if (buf[j + k] == '\0')
 3377              		.loc 1 1470 16 is_stmt 1 discriminator 2 view .LVU1049
1470:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1470 4 is_stmt 0 discriminator 2 view .LVU1050
 3379 01b0 0C2B     		cmp	r3, #12
 3380 01b2 F7D1     		bne	.L317
1473:src/display.c **** 	    int ch = buf[j++];
 3381              		.loc 1 1473 4 view .LVU1051
 3382 01b4 4FF00B09 		mov	r9, #11
 3383              	.LVL376:
 3384              	.L318:
1473:src/display.c **** 	    int ch = buf[j++];
 3385              		.loc 1 1473 4 view .LVU1052
 3386 01b8 08F10108 		add	r8, r8, #1
 3387 01bc C844     		add	r8, r8, r9
 3388 01be 4C46     		mov	r4, r9
 3389 01c0 4FF0630B 		mov	fp, #99
 3390 01c4 09E0     		b	.L323
 3391              	.LVL377:
 3392              	.L371:
 3393              	.LBB260:
1479:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3394              		.loc 1 1479 8 view .LVU1053
 3395 01c6 644B     		ldr	r3, .L374+16
 3396 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3397              	.LVL378:
 3398              	.LBB261:
 3399              	.LBI261:
 362:src/display.c ****   if (sep == SEP_NONE)
 3400              		.loc 1 362 14 is_stmt 1 view .LVU1054
 3401              	.LBB262:
 363:src/display.c ****     return res;
 3402              		.loc 1 363 3 view .LVU1055
 363:src/display.c ****     return res;
 3403              		.loc 1 363 6 is_stmt 0 view .LVU1056
 3404 01ca 09B1     		cbz	r1, .L321
 363:src/display.c ****     return res;
 3405              		.loc 1 363 6 view .LVU1057
 3406 01cc FFF7FEFF 		bl	set_separator.part.0
 3407              	.LVL379:
 3408              	.L321:
 363:src/display.c ****     return res;
 3409              		.loc 1 363 6 view .LVU1058
 3410              	.LBE262:
 3411              	.LBE261:
1480:src/display.c **** 	  }
 3412              		.loc 1 1480 6 is_stmt 1 discriminator 2 view .LVU1059
 3413              	.LBE260:
1473:src/display.c **** 	    int ch = buf[j++];
 3414              		.loc 1 1473 4 is_stmt 0 discriminator 2 view .LVU1060
ARM GAS  /tmp/ccobNVTR.s 			page 130


 3415 01d0 013C     		subs	r4, r4, #1
1473:src/display.c **** 	    int ch = buf[j++];
 3416              		.loc 1 1473 4 discriminator 2 view .LVU1061
 3417 01d2 621C     		adds	r2, r4, #1
 3418              	.LBB265:
1480:src/display.c **** 	  }
 3419              		.loc 1 1480 10 discriminator 2 view .LVU1062
 3420 01d4 ABF1090B 		sub	fp, fp, #9
 3421              	.LVL380:
1480:src/display.c **** 	  }
 3422              		.loc 1 1480 10 discriminator 2 view .LVU1063
 3423              	.LBE265:
1473:src/display.c **** 	    int ch = buf[j++];
 3424              		.loc 1 1473 24 is_stmt 1 discriminator 2 view .LVU1064
1473:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1473 14 discriminator 2 view .LVU1065
1473:src/display.c **** 	    int ch = buf[j++];
 3426              		.loc 1 1473 4 is_stmt 0 discriminator 2 view .LVU1066
 3427 01d8 16D0     		beq	.L327
 3428              	.LVL381:
 3429              	.L323:
 3430              	.LBB266:
1474:src/display.c **** 	    if (i >= shift)
 3431              		.loc 1 1474 6 is_stmt 1 view .LVU1067
1476:src/display.c **** 	    set_dig(dig, ch);
 3432              		.loc 1 1476 8 view .LVU1068
1474:src/display.c **** 	    if (i >= shift)
 3433              		.loc 1 1474 10 is_stmt 0 view .LVU1069
 3434 01da 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1475:src/display.c **** 	      ch -= 030;
 3435              		.loc 1 1475 9 view .LVU1070
 3436 01de A9EB0402 		sub	r2, r9, r4
 3437 01e2 BA42     		cmp	r2, r7
 3438 01e4 A8EB040A 		sub	r10, r8, r4
 3439              	.LVL382:
1475:src/display.c **** 	      ch -= 030;
 3440              		.loc 1 1475 6 is_stmt 1 view .LVU1071
1477:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3441              		.loc 1 1477 6 is_stmt 0 view .LVU1072
 3442 01e8 5846     		mov	r0, fp
1476:src/display.c **** 	    set_dig(dig, ch);
 3443              		.loc 1 1476 11 view .LVU1073
 3444 01ea A8BF     		it	ge
 3445 01ec 1839     		subge	r1, r1, #24
 3446              	.LVL383:
1477:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3447              		.loc 1 1477 6 is_stmt 1 view .LVU1074
 3448 01ee FFF7FEFF 		bl	set_dig
 3449              	.LVL384:
1478:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3450              		.loc 1 1478 6 view .LVU1075
1478:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3451              		.loc 1 1478 13 is_stmt 0 view .LVU1076
 3452 01f2 9AFBF5F3 		sdiv	r3, r10, r5
 3453 01f6 05FB13A3 		mls	r3, r5, r3, r10
1478:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3454              		.loc 1 1478 9 view .LVU1077
ARM GAS  /tmp/ccobNVTR.s 			page 131


 3455 01fa 002B     		cmp	r3, #0
 3456 01fc E8D1     		bne	.L321
1479:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3457              		.loc 1 1479 8 is_stmt 1 discriminator 1 view .LVU1078
 3458              	.LBB264:
 3459              	.LBB263:
 365:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3460              		.loc 1 365 3 discriminator 1 view .LVU1079
 3461 01fe 5846     		mov	r0, fp
 3462              	.LBE263:
 3463              	.LBE264:
1478:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3464              		.loc 1 1478 27 is_stmt 0 discriminator 1 view .LVU1080
 3465 0200 002C     		cmp	r4, #0
 3466 0202 E0D1     		bne	.L371
1480:src/display.c **** 	  }
 3467              		.loc 1 1480 6 is_stmt 1 view .LVU1081
1480:src/display.c **** 	  }
 3468              		.loc 1 1480 10 is_stmt 0 view .LVU1082
 3469 0204 ABF1090B 		sub	fp, fp, #9
 3470              	.LVL385:
1480:src/display.c **** 	  }
 3471              		.loc 1 1480 10 view .LVU1083
 3472              	.LBE266:
1473:src/display.c **** 	    int ch = buf[j++];
 3473              		.loc 1 1473 24 is_stmt 1 view .LVU1084
1473:src/display.c **** 	    int ch = buf[j++];
 3474              		.loc 1 1473 14 view .LVU1085
 3475              	.L327:
1482:src/display.c **** 	    if (dig >= 0)
 3476              		.loc 1 1482 4 view .LVU1086
1482:src/display.c **** 	    if (dig >= 0)
 3477              		.loc 1 1482 7 is_stmt 0 view .LVU1087
 3478 0208 049B     		ldr	r3, [sp, #16]
 3479 020a 002B     		cmp	r3, #0
 3480 020c 3FF478AF 		beq	.L285
1483:src/display.c **** 	      set_dig(dig, '-');
 3481              		.loc 1 1483 6 is_stmt 1 view .LVU1088
1483:src/display.c **** 	      set_dig(dig, '-');
 3482              		.loc 1 1483 9 is_stmt 0 view .LVU1089
 3483 0210 BBF1000F 		cmp	fp, #0
 3484 0214 C0F2B280 		blt	.L372
 3485              	.LVL386:
 3486              	.L326:
1484:src/display.c **** 	    else	SET_MANT_SIGN;
 3487              		.loc 1 1484 8 is_stmt 1 view .LVU1090
 3488 0218 5846     		mov	r0, fp
 3489 021a 2D21     		movs	r1, #45
 3490 021c FFF7FEFF 		bl	set_dig
 3491              	.LVL387:
 3492 0220 6EE7     		b	.L285
 3493              	.LVL388:
 3494              	.L366:
1484:src/display.c **** 	    else	SET_MANT_SIGN;
 3495              		.loc 1 1484 8 is_stmt 0 view .LVU1091
 3496              	.LBE259:
1390:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
ARM GAS  /tmp/ccobNVTR.s 			page 132


 3497              		.loc 1 1390 4 is_stmt 1 view .LVU1092
1390:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3498              		.loc 1 1390 8 is_stmt 0 view .LVU1093
 3499 0222 04AA     		add	r2, sp, #16
 3500 0224 4046     		mov	r0, r8
 3501 0226 4946     		mov	r1, r9
 3502 0228 FFF7FEFF 		bl	extract_value
 3503              	.LVL389:
 3504 022c 0646     		mov	r6, r0
 3505 022e 0F46     		mov	r7, r1
 3506              	.LVL390:
1391:src/display.c **** 	    v = value;
 3507              		.loc 1 1391 4 is_stmt 1 view .LVU1094
1391:src/display.c **** 	    v = value;
 3508              		.loc 1 1391 8 is_stmt 0 view .LVU1095
 3509 0230 FFF7FEFF 		bl	int_mode
 3510              	.LVL391:
1391:src/display.c **** 	    v = value;
 3511              		.loc 1 1391 7 view .LVU1096
 3512 0234 58BB     		cbnz	r0, .L290
1391:src/display.c **** 	    v = value;
 3513              		.loc 1 1391 33 discriminator 1 view .LVU1097
 3514 0236 049B     		ldr	r3, [sp, #16]
 3515 0238 012B     		cmp	r3, #1
 3516 023a 28D1     		bne	.L290
1391:src/display.c **** 	    v = value;
 3517              		.loc 1 1391 46 discriminator 2 view .LVU1098
 3518 023c 56EA0703 		orrs	r3, r6, r7
 3519 0240 6AD0     		beq	.L373
 3520              	.LVL392:
 3521              	.L291:
1391:src/display.c **** 	    v = value;
 3522              		.loc 1 1391 46 discriminator 2 view .LVU1099
 3523 0242 DFF818B1 		ldr	fp, .L374+20
 3524              	.LVL393:
1366:src/display.c **** 	const int ws = word_size();
 3525              		.loc 1 1366 67 discriminator 3 view .LVU1100
 3526 0246 CDF80CA0 		str	r10, [sp, #12]
 3527 024a 0023     		movs	r3, #0
 3528 024c D946     		mov	r9, fp
 3529 024e 0DF11408 		add	r8, sp, #20
 3530 0252 0024     		movs	r4, #0
 3531 0254 AA46     		mov	r10, r5
 3532              	.LVL394:
1366:src/display.c **** 	const int ws = word_size();
 3533              		.loc 1 1366 67 discriminator 3 view .LVU1101
 3534 0256 9B46     		mov	fp, r3
 3535              	.L297:
 3536              	.LVL395:
 3537              	.LBB269:
1400:src/display.c **** 	      v /= b;
 3538              		.loc 1 1400 8 is_stmt 1 discriminator 3 view .LVU1102
 3539 0258 3046     		mov	r0, r6
 3540 025a 3946     		mov	r1, r7
 3541 025c 5246     		mov	r2, r10
 3542 025e 5B46     		mov	r3, fp
 3543 0260 FFF7FEFF 		bl	__aeabi_uldivmod
ARM GAS  /tmp/ccobNVTR.s 			page 133


 3544              	.LVL396:
1401:src/display.c **** 	      buf[i] = DIGITS[r];
 3545              		.loc 1 1401 8 discriminator 3 view .LVU1103
 3546 0264 CDE90067 		strd	r6, [sp]
1402:src/display.c **** 	    }
 3547              		.loc 1 1402 15 is_stmt 0 discriminator 3 view .LVU1104
 3548 0268 19F80230 		ldrb	r3, [r9, r2]	@ zero_extendqisi2
 3549 026c 08F8013B 		strb	r3, [r8], #1
1401:src/display.c **** 	      buf[i] = DIGITS[r];
 3550              		.loc 1 1401 10 discriminator 3 view .LVU1105
 3551 0270 0F46     		mov	r7, r1
 3552              	.LVL397:
1402:src/display.c **** 	    }
 3553              		.loc 1 1402 8 is_stmt 1 discriminator 3 view .LVU1106
 3554              	.LBE269:
1399:src/display.c **** 	      const int r = v % b;
 3555              		.loc 1 1399 24 discriminator 3 view .LVU1107
1399:src/display.c **** 	      const int r = v % b;
 3556              		.loc 1 1399 6 is_stmt 0 discriminator 3 view .LVU1108
 3557 0272 DDE90012 		ldrd	r1, [sp]
 3558              	.LVL398:
1399:src/display.c **** 	      const int r = v % b;
 3559              		.loc 1 1399 6 discriminator 3 view .LVU1109
 3560 0276 5A45     		cmp	r2, fp
 3561 0278 08BF     		it	eq
 3562 027a 5145     		cmpeq	r1, r10
 3563 027c 2346     		mov	r3, r4
 3564              	.LVL399:
 3565              	.LBB270:
1401:src/display.c **** 	      buf[i] = DIGITS[r];
 3566              		.loc 1 1401 10 discriminator 3 view .LVU1110
 3567 027e 0646     		mov	r6, r0
 3568              	.LBE270:
1399:src/display.c **** 	      const int r = v % b;
 3569              		.loc 1 1399 25 discriminator 3 view .LVU1111
 3570 0280 04F10104 		add	r4, r4, #1
 3571              	.LVL400:
1399:src/display.c **** 	      const int r = v % b;
 3572              		.loc 1 1399 16 is_stmt 1 discriminator 3 view .LVU1112
1399:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1399 6 is_stmt 0 discriminator 3 view .LVU1113
 3574 0284 E8D2     		bcs	.L297
 3575 0286 DDF80CA0 		ldr	r10, [sp, #12]
 3576 028a 9946     		mov	r9, r3
 3577 028c 21E7     		b	.L298
 3578              	.LVL401:
 3579              	.L290:
1393:src/display.c **** 	    if (sign)
 3580              		.loc 1 1393 4 is_stmt 1 view .LVU1114
1393:src/display.c **** 	    if (sign)
 3581              		.loc 1 1393 7 is_stmt 0 view .LVU1115
 3582 028e 56EA0703 		orrs	r3, r6, r7
 3583 0292 D6D1     		bne	.L291
1394:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3584              		.loc 1 1394 6 is_stmt 1 view .LVU1116
1394:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3585              		.loc 1 1394 9 is_stmt 0 view .LVU1117
ARM GAS  /tmp/ccobNVTR.s 			page 134


 3586 0294 049B     		ldr	r3, [sp, #16]
 3587 0296 002B     		cmp	r3, #0
 3588 0298 43D1     		bne	.L292
 3589              	.LVL402:
 3590              	.L293:
1396:src/display.c **** 	    return;
 3591              		.loc 1 1396 6 is_stmt 1 view .LVU1118
 3592              	.LBB271:
 3593              	.LBI271:
 402:src/display.c ****   if (res) *res++ = ch;
 3594              		.loc 1 402 14 view .LVU1119
 3595              	.LBB272:
 403:src/display.c ****   else	set_dig(base, ch);
 3596              		.loc 1 403 3 view .LVU1120
 403:src/display.c ****   else	set_dig(base, ch);
 3597              		.loc 1 403 6 is_stmt 0 view .LVU1121
 3598 029a BAF1000F 		cmp	r10, #0
 3599 029e 47D0     		beq	.L295
 3600              	.LVL403:
 3601              	.L294:
 403:src/display.c ****   else	set_dig(base, ch);
 3602              		.loc 1 403 12 is_stmt 1 view .LVU1122
 403:src/display.c ****   else	set_dig(base, ch);
 3603              		.loc 1 403 19 is_stmt 0 view .LVU1123
 3604 02a0 3023     		movs	r3, #48
 3605 02a2 8AF80030 		strb	r3, [r10]
 3606              	.LBE272:
 3607              	.LBE271:
1488:src/display.c **** 
 3608              		.loc 1 1488 7 view .LVU1124
 3609 02a6 17B0     		add	sp, sp, #92
 3610              		.cfi_remember_state
 3611              		.cfi_def_cfa_offset 36
 3612              		@ sp needed
 3613 02a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3614              	.LVL404:
 3615              	.L286:
 3616              		.cfi_restore_state
1381:src/display.c **** 	}
 3617              		.loc 1 1381 11 is_stmt 1 view .LVU1125
1381:src/display.c **** 	}
 3618              		.loc 1 1381 15 is_stmt 0 view .LVU1126
 3619 02ac FFF7FEFF 		bl	int_base
 3620              	.LVL405:
1381:src/display.c **** 	}
 3621              		.loc 1 1381 15 view .LVU1127
 3622 02b0 0546     		mov	r5, r0
 3623              	.LVL406:
1381:src/display.c **** 	}
 3624              		.loc 1 1381 27 is_stmt 1 view .LVU1128
1384:src/display.c **** 	  IntMaxWindow = 0;
 3625              		.loc 1 1384 2 view .LVU1129
1384:src/display.c **** 	  IntMaxWindow = 0;
 3626              		.loc 1 1384 5 is_stmt 0 view .LVU1130
 3627 02b2 BAF1000F 		cmp	r10, #0
 3628 02b6 7FF4BCAE 		bne	.L288
 3629              	.LVL407:
ARM GAS  /tmp/ccobNVTR.s 			page 135


 3630              	.L365:
1385:src/display.c **** 	  carry_overflow();
 3631              		.loc 1 1385 4 is_stmt 1 view .LVU1131
1385:src/display.c **** 	  carry_overflow();
 3632              		.loc 1 1385 17 is_stmt 0 view .LVU1132
 3633 02ba 264B     		ldr	r3, .L374+12
 3634 02bc C3F800A0 		str	r10, [r3]
1386:src/display.c **** 	}
 3635              		.loc 1 1386 4 is_stmt 1 view .LVU1133
 3636 02c0 FFF7FEFF 		bl	carry_overflow
 3637              	.LVL408:
 3638 02c4 B5E6     		b	.L288
 3639              	.LVL409:
 3640              	.L367:
 3641              	.LBB274:
1409:src/display.c **** 	      vs |= ~mask;
 3642              		.loc 1 1409 38 is_stmt 0 discriminator 1 view .LVU1134
 3643 02c6 0BF1FF31 		add	r1, fp, #-1
1409:src/display.c **** 	      vs |= ~mask;
 3644              		.loc 1 1409 18 discriminator 1 view .LVU1135
 3645 02ca CBF12106 		rsb	r6, fp, #33
 3646 02ce C840     		lsrs	r0, r0, r1
 3647 02d0 09FA06F6 		lsl	r6, r9, r6
 3648 02d4 2039     		subs	r1, r1, #32
 3649 02d6 40EA0600 		orr	r0, r0, r6
 3650 02da 5CBF     		itt	pl
 3651 02dc 49FA01F1 		asrpl	r1, r9, r1
 3652 02e0 0843     		orrpl	r0, r0, r1
 3653 02e2 00F00106 		and	r6, r0, #1
 3654 02e6 0027     		movs	r7, #0
 3655 02e8 56EA0701 		orrs	r1, r6, r7
 3656 02ec 08D0     		beq	.L300
1410:src/display.c **** 	  }
 3657              		.loc 1 1410 8 is_stmt 1 view .LVU1136
1410:src/display.c **** 	  }
 3658              		.loc 1 1410 11 is_stmt 0 view .LVU1137
 3659 02ee 5042     		rsbs	r0, r2, #0
 3660 02f0 63EB4301 		sbc	r1, r3, r3, lsl #1
 3661 02f4 40EA0802 		orr	r2, r0, r8
 3662              	.LVL410:
1410:src/display.c **** 	  }
 3663              		.loc 1 1410 11 view .LVU1138
 3664 02f8 41EA0903 		orr	r3, r1, r9
 3665              	.LVL411:
1410:src/display.c **** 	  }
 3666              		.loc 1 1410 11 view .LVU1139
 3667 02fc 9046     		mov	r8, r2
 3668              	.LVL412:
1410:src/display.c **** 	  }
 3669              		.loc 1 1410 11 view .LVU1140
 3670 02fe 9946     		mov	r9, r3
 3671              	.L300:
1410:src/display.c **** 	  }
 3672              		.loc 1 1410 11 view .LVU1141
 3673              	.LBE274:
1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3674              		.loc 1 1413 4 is_stmt 1 view .LVU1142
ARM GAS  /tmp/ccobNVTR.s 			page 136


1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3675              		.loc 1 1413 8 is_stmt 0 view .LVU1143
 3676 0300 134B     		ldr	r3, .L374+8
 3677 0302 1B68     		ldr	r3, [r3]
 3678 0304 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1413:src/display.c **** 	    set_dig_s(dig, '0', res);
 3679              		.loc 1 1413 7 view .LVU1144
 3680 0308 9B07     		lsls	r3, r3, #30
 3681 030a 7FF5FCAE 		bpl	.L328
 3682 030e 0223     		movs	r3, #2
 3683 0310 C4E6     		b	.L305
 3684              	.LVL413:
 3685              	.L369:
 3686              	.LBB275:
1459:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3687              		.loc 1 1459 33 view .LVU1145
 3688 0312 0827     		movs	r7, #8
1461:src/display.c **** 	  set_separator_decimal_modes();
 3689              		.loc 1 1461 6 view .LVU1146
 3690 0314 0425     		movs	r5, #4
 3691 0316 2CE7     		b	.L312
 3692              	.LVL414:
 3693              	.L373:
1461:src/display.c **** 	  set_separator_decimal_modes();
 3694              		.loc 1 1461 6 view .LVU1147
 3695              	.LBE275:
1392:src/display.c **** 	  if (v == 0) {
 3696              		.loc 1 1392 6 is_stmt 1 view .LVU1148
1392:src/display.c **** 	  if (v == 0) {
 3697              		.loc 1 1392 8 is_stmt 0 view .LVU1149
 3698 0318 4646     		mov	r6, r8
 3699              	.LVL415:
1392:src/display.c **** 	  if (v == 0) {
 3700              		.loc 1 1392 8 view .LVU1150
 3701 031a 4F46     		mov	r7, r9
 3702              	.LVL416:
1393:src/display.c **** 	    if (sign)
 3703              		.loc 1 1393 4 is_stmt 1 view .LVU1151
1393:src/display.c **** 	    if (sign)
 3704              		.loc 1 1393 7 is_stmt 0 view .LVU1152
 3705 031c 56EA0703 		orrs	r3, r6, r7
 3706 0320 8FD1     		bne	.L291
 3707              	.LVL417:
 3708              	.L292:
1395:src/display.c **** 	    set_dig_s(dig, '0', res);
 3709              		.loc 1 1395 8 is_stmt 1 view .LVU1153
 3710              	.LBB276:
 3711              	.LBI276:
 402:src/display.c ****   if (res) *res++ = ch;
 3712              		.loc 1 402 14 view .LVU1154
 3713              	.LBB277:
 403:src/display.c ****   else	set_dig(base, ch);
 3714              		.loc 1 403 3 view .LVU1155
 403:src/display.c ****   else	set_dig(base, ch);
 3715              		.loc 1 403 6 is_stmt 0 view .LVU1156
 3716 0322 BAF1000F 		cmp	r10, #0
 3717 0326 BBD1     		bne	.L294
ARM GAS  /tmp/ccobNVTR.s 			page 137


 404:src/display.c ****   return res;
 3718              		.loc 1 404 8 is_stmt 1 view .LVU1157
 3719 0328 2D21     		movs	r1, #45
 3720 032a 5A20     		movs	r0, #90
 3721 032c FFF7FEFF 		bl	set_dig
 3722              	.LVL418:
 404:src/display.c ****   return res;
 3723              		.loc 1 404 8 is_stmt 0 view .LVU1158
 3724              	.LBE277:
 3725              	.LBE276:
1396:src/display.c **** 	    return;
 3726              		.loc 1 1396 6 is_stmt 1 view .LVU1159
 3727              	.LBB278:
 402:src/display.c ****   if (res) *res++ = ch;
 3728              		.loc 1 402 14 view .LVU1160
 3729              	.LBB273:
 403:src/display.c ****   else	set_dig(base, ch);
 3730              		.loc 1 403 3 view .LVU1161
 3731              	.L295:
 404:src/display.c ****   return res;
 3732              		.loc 1 404 8 view .LVU1162
 3733 0330 3021     		movs	r1, #48
 3734 0332 6320     		movs	r0, #99
 3735 0334 FFF7FEFF 		bl	set_dig
 3736              	.LVL419:
 3737 0338 E2E6     		b	.L285
 3738              	.LVL420:
 3739              	.L314:
 404:src/display.c ****   return res;
 3740              		.loc 1 404 8 is_stmt 0 view .LVU1163
 3741              	.LBE273:
 3742              	.LBE278:
 3743              	.LBB279:
1466:src/display.c **** 	  buf[i] = '\0';
 3744              		.loc 1 1466 6 is_stmt 1 view .LVU1164
1466:src/display.c **** 	  buf[i] = '\0';
 3745              		.loc 1 1466 20 is_stmt 0 view .LVU1165
 3746 033a 034B     		ldr	r3, .L374
 3747 033c 6FF3C502 		bfc	r2, #3, #3
 3748 0340 1A75     		strb	r2, [r3, #20]
 3749 0342 4FF00008 		mov	r8, #0
 3750 0346 23E7     		b	.L315
 3751              	.L375:
 3752              		.align	2
 3753              	.L374:
 3754 0348 00000000 		.word	StateWhileOn
 3755 034c 00000000 		.word	CSWTCH.311
 3756 0350 00000000 		.word	main_ram
 3757 0354 00000000 		.word	IntMaxWindow
 3758 0358 00000000 		.word	.LANCHOR0
 3759 035c 00000000 		.word	.LANCHOR12
 3760              	.LVL421:
 3761              	.L316:
1473:src/display.c **** 	    int ch = buf[j++];
 3762              		.loc 1 1473 14 is_stmt 1 discriminator 1 view .LVU1166
1473:src/display.c **** 	    int ch = buf[j++];
 3763              		.loc 1 1473 4 is_stmt 0 discriminator 1 view .LVU1167
ARM GAS  /tmp/ccobNVTR.s 			page 138


 3764 0360 03F1FF39 		add	r9, r3, #-1
 3765              	.LVL422:
1473:src/display.c **** 	    int ch = buf[j++];
 3766              		.loc 1 1473 4 discriminator 1 view .LVU1168
 3767 0364 002B     		cmp	r3, #0
 3768 0366 7FF427AF 		bne	.L318
1482:src/display.c **** 	    if (dig >= 0)
 3769              		.loc 1 1482 4 is_stmt 1 view .LVU1169
1482:src/display.c **** 	    if (dig >= 0)
 3770              		.loc 1 1482 7 is_stmt 0 view .LVU1170
 3771 036a 049B     		ldr	r3, [sp, #16]
 3772 036c 002B     		cmp	r3, #0
 3773 036e 3FF4C7AE 		beq	.L285
 3774 0372 4FF0630B 		mov	fp, #99
 3775 0376 4FE7     		b	.L326
 3776              	.LVL423:
 3777              	.L370:
1459:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3778              		.loc 1 1459 33 view .LVU1171
 3779 0378 0C27     		movs	r7, #12
 3780 037a FAE6     		b	.L312
 3781              	.LVL424:
 3782              	.L372:
1485:src/display.c **** 	  }
 3783              		.loc 1 1485 11 is_stmt 1 view .LVU1172
 3784              	.LBB267:
 3785              	.LBI267:
 291:src/display.c **** {
 3786              		.loc 1 291 13 view .LVU1173
 3787              	.LBB268:
 293:src/display.c ****   set_dot(MANT_SIGN);
 3788              		.loc 1 293 3 view .LVU1174
 293:src/display.c ****   set_dot(MANT_SIGN);
 3789              		.loc 1 293 25 is_stmt 0 view .LVU1175
 3790 037c 044B     		ldr	r3, .L376
 3791 037e 2D22     		movs	r2, #45
 294:src/display.c **** }
 3792              		.loc 1 294 3 view .LVU1176
 3793 0380 8120     		movs	r0, #129
 293:src/display.c ****   set_dot(MANT_SIGN);
 3794              		.loc 1 293 25 view .LVU1177
 3795 0382 1A70     		strb	r2, [r3]
 294:src/display.c **** }
 3796              		.loc 1 294 3 is_stmt 1 view .LVU1178
 3797 0384 FFF7FEFF 		bl	set_dot
 3798              	.LVL425:
 295:src/display.c **** 
 3799              		.loc 1 295 1 is_stmt 0 view .LVU1179
 3800 0388 BAE6     		b	.L285
 3801              	.LVL426:
 3802              	.L329:
 295:src/display.c **** 
 3803              		.loc 1 295 1 view .LVU1180
 3804              	.LBE268:
 3805              	.LBE267:
 3806              	.LBE279:
 3807              	.LBB280:
ARM GAS  /tmp/ccobNVTR.s 			page 139


1430:src/display.c **** 	      const int r = v % b;
 3808              		.loc 1 1430 6 view .LVU1181
 3809 038a 4FF0FF39 		mov	r9, #-1
 3810 038e A0E6     		b	.L298
 3811              	.L377:
 3812              		.align	2
 3813              	.L376:
 3814 0390 00000000 		.word	LastDisplayedNumber
 3815              	.LBE280:
 3816              		.cfi_endproc
 3817              	.LFE18:
 3819              		.section	.text.set_annunciators,"ax",%progbits
 3820              		.align	1
 3821              		.p2align 2,,3
 3822              		.syntax unified
 3823              		.thumb
 3824              		.thumb_func
 3825              		.fpu fpv4-sp-d16
 3827              	set_annunciators:
 3828              	.LFB32:
2488:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3829              		.loc 1 2488 7 is_stmt 1 view -0
 3830              		.cfi_startproc
 3831              		@ args = 0, pretend = 0, frame = 0
 3832              		@ frame_needed = 0, uses_anonymous_args = 0
2489:src/display.c **** 
 3833              		.loc 1 2489 2 view .LVU1183
2488:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3834              		.loc 1 2488 7 is_stmt 0 view .LVU1184
 3835 0000 70B5     		push	{r4, r5, r6, lr}
 3836              		.cfi_def_cfa_offset 16
 3837              		.cfi_offset 4, -16
 3838              		.cfi_offset 5, -12
 3839              		.cfi_offset 6, -8
 3840              		.cfi_offset 14, -4
2498:src/display.c **** #endif
 3841              		.loc 1 2498 11 view .LVU1185
 3842 0002 344E     		ldr	r6, .L404
2489:src/display.c **** 
 3843              		.loc 1 2489 29 view .LVU1186
 3844 0004 FFF7FEFF 		bl	get_trig_mode
 3845              	.LVL427:
2498:src/display.c **** #endif
 3846              		.loc 1 2498 11 view .LVU1187
 3847 0008 3368     		ldr	r3, [r6]
2498:src/display.c **** #endif
 3848              		.loc 1 2498 2 view .LVU1188
 3849 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3850 000e 012B     		cmp	r3, #1
2489:src/display.c **** 
 3851              		.loc 1 2489 29 view .LVU1189
 3852 0010 0446     		mov	r4, r0
 3853              	.LVL428:
2498:src/display.c **** #endif
 3854              		.loc 1 2498 2 is_stmt 1 view .LVU1190
 3855              	.LBB299:
 3856              	.LBB300:
ARM GAS  /tmp/ccobNVTR.s 			page 140


 335:src/display.c ****   else	clr_dot(n);
 3857              		.loc 1 335 11 is_stmt 0 view .LVU1191
 3858 0012 4FF08800 		mov	r0, #136
 3859              	.LBE300:
 3860              	.LBE299:
2498:src/display.c **** #endif
 3861              		.loc 1 2498 2 view .LVU1192
 3862 0016 03D8     		bhi	.L379
2498:src/display.c **** #endif
 3863              		.loc 1 2498 30 discriminator 1 view .LVU1193
 3864 0018 2F4B     		ldr	r3, .L404+4
2498:src/display.c **** #endif
 3865              		.loc 1 2498 2 discriminator 1 view .LVU1194
 3866 001a 1B68     		ldr	r3, [r3]
 3867 001c 002B     		cmp	r3, #0
 3868 001e 56D0     		beq	.L400
 3869              	.L379:
 3870              	.LVL429:
 3871              	.LBB303:
 3872              	.LBI299:
 334:src/display.c ****   if (on)	set_dot(n);
 3873              		.loc 1 334 6 is_stmt 1 view .LVU1195
 3874              	.LBB301:
 335:src/display.c ****   else	clr_dot(n);
 3875              		.loc 1 335 3 view .LVU1196
 336:src/display.c **** }
 3876              		.loc 1 336 8 view .LVU1197
 3877 0020 FFF7FEFF 		bl	clr_dot
 3878              	.LVL430:
 3879              	.L380:
 336:src/display.c **** }
 3880              		.loc 1 336 8 is_stmt 0 view .LVU1198
 3881              	.LBE301:
 3882              	.LBE303:
2500:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3883              		.loc 1 2500 2 is_stmt 1 view .LVU1199
2500:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3884              		.loc 1 2500 19 is_stmt 0 view .LVU1200
 3885 0024 2D4D     		ldr	r5, .L404+8
2500:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3886              		.loc 1 2500 2 view .LVU1201
 3887 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3888              	.LBB304:
 3889              	.LBB305:
 335:src/display.c ****   else	clr_dot(n);
 3890              		.loc 1 335 11 view .LVU1202
 3891 0028 8620     		movs	r0, #134
 3892              	.LBE305:
 3893              	.LBE304:
2500:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3894              		.loc 1 2500 2 view .LVU1203
 3895 002a 23B9     		cbnz	r3, .L381
2500:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3896              		.loc 1 2500 47 discriminator 2 view .LVU1204
 3897 002c 6A69     		ldr	r2, [r5, #20]
 3898 002e 2C4B     		ldr	r3, .L404+12
 3899 0030 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccobNVTR.s 			page 141


2500:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3900              		.loc 1 2500 2 discriminator 2 view .LVU1205
 3901 0032 002B     		cmp	r3, #0
 3902 0034 48D0     		beq	.L401
 3903              	.L381:
 3904              	.LBB308:
 3905              	.LBB306:
 335:src/display.c ****   else	clr_dot(n);
 3906              		.loc 1 335 11 is_stmt 1 view .LVU1206
 3907 0036 FFF7FEFF 		bl	set_dot
 3908              	.LVL431:
 3909              	.L382:
 3910              	.LBE306:
 3911              	.LBE308:
2501:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3912              		.loc 1 2501 2 view .LVU1207
2501:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3913              		.loc 1 2501 31 is_stmt 0 view .LVU1208
 3914 003a 2A4A     		ldr	r2, .L404+16
 3915 003c 6B69     		ldr	r3, [r5, #20]
2501:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3916              		.loc 1 2501 2 view .LVU1209
 3917 003e 1A42     		tst	r2, r3
 3918              	.LBB309:
 3919              	.LBB310:
 335:src/display.c ****   else	clr_dot(n);
 3920              		.loc 1 335 11 view .LVU1210
 3921 0040 4FF08500 		mov	r0, #133
 3922              	.LBE310:
 3923              	.LBE309:
2501:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3924              		.loc 1 2501 2 view .LVU1211
 3925 0044 02D0     		beq	.L383
2501:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3926              		.loc 1 2501 48 discriminator 1 view .LVU1212
 3927 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2501:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3928              		.loc 1 2501 2 discriminator 1 view .LVU1213
 3929 0048 DA06     		lsls	r2, r3, #27
 3930 004a 3AD4     		bmi	.L384
 3931              	.L383:
 3932              	.LVL432:
 3933              	.LBB313:
 3934              	.LBI309:
 334:src/display.c ****   if (on)	set_dot(n);
 3935              		.loc 1 334 6 is_stmt 1 view .LVU1214
 3936              	.LBB311:
 335:src/display.c ****   else	clr_dot(n);
 3937              		.loc 1 335 3 view .LVU1215
 336:src/display.c **** }
 3938              		.loc 1 336 8 view .LVU1216
 3939 004c FFF7FEFF 		bl	clr_dot
 3940              	.LVL433:
 3941              	.L385:
 336:src/display.c **** }
 3942              		.loc 1 336 8 is_stmt 0 view .LVU1217
 3943              	.LBE311:
ARM GAS  /tmp/ccobNVTR.s 			page 142


 3944              	.LBE313:
2502:src/display.c **** 	set_IO_annunciator();
 3945              		.loc 1 2502 2 is_stmt 1 view .LVU1218
 3946 0050 6820     		movs	r0, #104
 3947 0052 FFF7FEFF 		bl	get_user_flag
 3948              	.LVL434:
 3949              	.LBB314:
 3950              	.LBI314:
 334:src/display.c ****   if (on)	set_dot(n);
 3951              		.loc 1 334 6 view .LVU1219
 3952              	.LBB315:
 335:src/display.c ****   else	clr_dot(n);
 3953              		.loc 1 335 3 view .LVU1220
 335:src/display.c ****   else	clr_dot(n);
 3954              		.loc 1 335 6 is_stmt 0 view .LVU1221
 3955 0056 28B3     		cbz	r0, .L386
 335:src/display.c ****   else	clr_dot(n);
 3956              		.loc 1 335 11 is_stmt 1 view .LVU1222
 3957              	.LBE315:
 3958              	.LBE314:
 3959              	.LBB319:
 3960              	.LBB320:
2530:src/display.c **** 	  dot(LIT_EQ, on);
 3961              		.loc 1 2530 9 is_stmt 0 view .LVU1223
 3962 0058 234D     		ldr	r5, .L404+20
 3963              	.LBE320:
 3964              	.LBE319:
 3965              	.LBB328:
 3966              	.LBB316:
 335:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 335 11 view .LVU1224
 3968 005a 8320     		movs	r0, #131
 3969              	.LVL435:
 335:src/display.c ****   else	clr_dot(n);
 3970              		.loc 1 335 11 view .LVU1225
 3971 005c FFF7FEFF 		bl	set_dot
 3972              	.LVL436:
 335:src/display.c ****   else	clr_dot(n);
 3973              		.loc 1 335 11 view .LVU1226
 3974              	.LBE316:
 3975              	.LBE328:
2503:src/display.c **** 
 3976              		.loc 1 2503 2 is_stmt 1 view .LVU1227
 3977              	.LBB329:
 3978              	.LBI319:
2515:src/display.c **** #ifndef DM42
 3979              		.loc 1 2515 12 view .LVU1228
 3980              	.LBB325:
2520:src/display.c **** #endif
 3981              		.loc 1 2520 4 view .LVU1229
2530:src/display.c **** 	  dot(LIT_EQ, on);
 3982              		.loc 1 2530 2 view .LVU1230
2530:src/display.c **** 	  dot(LIT_EQ, on);
 3983              		.loc 1 2530 5 is_stmt 0 view .LVU1231
 3984 0060 2B68     		ldr	r3, [r5]
 3985 0062 33BB     		cbnz	r3, .L402
 3986              	.L388:
ARM GAS  /tmp/ccobNVTR.s 			page 143


 3987              	.LBE325:
 3988              	.LBE329:
2507:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3989              		.loc 1 2507 2 is_stmt 1 view .LVU1232
2507:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3990              		.loc 1 2507 11 is_stmt 0 view .LVU1233
 3991 0064 3368     		ldr	r3, [r6]
 3992 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 3993 006a 03F00103 		and	r3, r3, #1
2507:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3994              		.loc 1 2507 2 view .LVU1234
 3995 006e 2343     		orrs	r3, r3, r4
 3996 0070 13F0FF0F 		tst	r3, #255
 3997              	.LBB330:
 3998              	.LBB331:
 335:src/display.c ****   else	clr_dot(n);
 3999              		.loc 1 335 11 view .LVU1235
 4000 0074 4FF08C00 		mov	r0, #140
 4001              	.LBE331:
 4002              	.LBE330:
2507:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4003              		.loc 1 2507 2 view .LVU1236
 4004 0078 06D1     		bne	.L403
 4005              	.LVL437:
 4006              	.LBB334:
 4007              	.LBI330:
 334:src/display.c ****   if (on)	set_dot(n);
 4008              		.loc 1 334 6 is_stmt 1 view .LVU1237
 4009              	.LBB332:
 335:src/display.c ****   else	clr_dot(n);
 4010              		.loc 1 335 3 view .LVU1238
 335:src/display.c ****   else	clr_dot(n);
 4011              		.loc 1 335 11 view .LVU1239
 4012 007a FFF7FEFF 		bl	set_dot
 4013              	.LVL438:
 335:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 335 11 is_stmt 0 view .LVU1240
 4015              	.LBE332:
 4016              	.LBE334:
2508:src/display.c ****       }
 4017              		.loc 1 2508 2 is_stmt 1 view .LVU1241
 4018              	.L391:
 4019              	.LBB335:
 4020              	.LBI335:
 334:src/display.c ****   if (on)	set_dot(n);
 4021              		.loc 1 334 6 view .LVU1242
 4022              	.LBB336:
 335:src/display.c ****   else	clr_dot(n);
 4023              		.loc 1 335 3 view .LVU1243
 336:src/display.c **** }
 4024              		.loc 1 336 8 view .LVU1244
 4025              	.LBE336:
 4026              	.LBE335:
2509:src/display.c **** 
 4027              		.loc 1 2509 7 is_stmt 0 view .LVU1245
 4028 007e BDE87040 		pop	{r4, r5, r6, lr}
 4029              		.cfi_remember_state
ARM GAS  /tmp/ccobNVTR.s 			page 144


 4030              		.cfi_restore 14
 4031              		.cfi_restore 6
 4032              		.cfi_restore 5
 4033              		.cfi_restore 4
 4034              		.cfi_def_cfa_offset 0
 4035              	.LVL439:
 4036              	.LBB340:
 4037              	.LBB337:
 336:src/display.c **** }
 4038              		.loc 1 336 8 view .LVU1246
 4039 0082 8B20     		movs	r0, #139
 4040 0084 FFF7FEBF 		b	clr_dot
 4041              	.LVL440:
 4042              	.L403:
 4043              		.cfi_restore_state
 336:src/display.c **** }
 4044              		.loc 1 336 8 view .LVU1247
 4045              	.LBE337:
 4046              	.LBE340:
 4047              	.LBB341:
 334:src/display.c ****   if (on)	set_dot(n);
 4048              		.loc 1 334 6 is_stmt 1 view .LVU1248
 4049              	.LBB333:
 335:src/display.c ****   else	clr_dot(n);
 4050              		.loc 1 335 3 view .LVU1249
 336:src/display.c **** }
 4051              		.loc 1 336 8 view .LVU1250
 4052 0088 FFF7FEFF 		bl	clr_dot
 4053              	.LVL441:
 336:src/display.c **** }
 4054              		.loc 1 336 8 is_stmt 0 view .LVU1251
 4055              	.LBE333:
 4056              	.LBE341:
2508:src/display.c ****       }
 4057              		.loc 1 2508 2 is_stmt 1 view .LVU1252
2508:src/display.c ****       }
 4058              		.loc 1 2508 11 is_stmt 0 view .LVU1253
 4059 008c 3368     		ldr	r3, [r6]
 4060 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2508:src/display.c ****       }
 4061              		.loc 1 2508 2 view .LVU1254
 4062 0092 DB07     		lsls	r3, r3, #31
 4063 0094 F3D4     		bmi	.L391
2508:src/display.c ****       }
 4064              		.loc 1 2508 2 discriminator 1 view .LVU1255
 4065 0096 012C     		cmp	r4, #1
 4066 0098 F1D1     		bne	.L391
 4067              	.LVL442:
 4068              	.LBB342:
 334:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 334 6 is_stmt 1 view .LVU1256
 4070              	.LBB338:
 335:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 335 3 view .LVU1257
 335:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 335 11 view .LVU1258
 4073              	.LBE338:
ARM GAS  /tmp/ccobNVTR.s 			page 145


 4074              	.LBE342:
2509:src/display.c **** 
 4075              		.loc 1 2509 7 is_stmt 0 view .LVU1259
 4076 009a BDE87040 		pop	{r4, r5, r6, lr}
 4077              		.cfi_remember_state
 4078              		.cfi_restore 14
 4079              		.cfi_restore 6
 4080              		.cfi_restore 5
 4081              		.cfi_restore 4
 4082              		.cfi_def_cfa_offset 0
 4083              	.LVL443:
 4084              	.LBB343:
 4085              	.LBB339:
 335:src/display.c ****   else	clr_dot(n);
 4086              		.loc 1 335 11 view .LVU1260
 4087 009e 8B20     		movs	r0, #139
 4088 00a0 FFF7FEBF 		b	set_dot
 4089              	.LVL444:
 4090              	.L386:
 4091              		.cfi_restore_state
 335:src/display.c ****   else	clr_dot(n);
 4092              		.loc 1 335 11 view .LVU1261
 4093              	.LBE339:
 4094              	.LBE343:
 4095              	.LBB344:
 4096              	.LBB317:
 336:src/display.c **** }
 4097              		.loc 1 336 8 is_stmt 1 view .LVU1262
 4098              	.LBE317:
 4099              	.LBE344:
 4100              	.LBB345:
 4101              	.LBB326:
2530:src/display.c **** 	  dot(LIT_EQ, on);
 4102              		.loc 1 2530 9 is_stmt 0 view .LVU1263
 4103 00a4 104D     		ldr	r5, .L404+20
 4104              	.LBE326:
 4105              	.LBE345:
 4106              	.LBB346:
 4107              	.LBB318:
 336:src/display.c **** }
 4108              		.loc 1 336 8 view .LVU1264
 4109 00a6 8320     		movs	r0, #131
 4110              	.LVL445:
 336:src/display.c **** }
 4111              		.loc 1 336 8 view .LVU1265
 4112 00a8 FFF7FEFF 		bl	clr_dot
 4113              	.LVL446:
 336:src/display.c **** }
 4114              		.loc 1 336 8 view .LVU1266
 4115              	.LBE318:
 4116              	.LBE346:
2503:src/display.c **** 
 4117              		.loc 1 2503 2 is_stmt 1 view .LVU1267
 4118              	.LBB347:
2515:src/display.c **** #ifndef DM42
 4119              		.loc 1 2515 12 view .LVU1268
 4120              	.LBB327:
ARM GAS  /tmp/ccobNVTR.s 			page 146


2520:src/display.c **** #endif
 4121              		.loc 1 2520 4 view .LVU1269
2530:src/display.c **** 	  dot(LIT_EQ, on);
 4122              		.loc 1 2530 2 view .LVU1270
2530:src/display.c **** 	  dot(LIT_EQ, on);
 4123              		.loc 1 2530 5 is_stmt 0 view .LVU1271
 4124 00ac 2B68     		ldr	r3, [r5]
 4125 00ae 002B     		cmp	r3, #0
 4126 00b0 D8D0     		beq	.L388
 4127              	.L402:
 4128              	.LBB321:
 4129              	.LBI321:
2515:src/display.c **** #ifndef DM42
 4130              		.loc 1 2515 12 is_stmt 1 view .LVU1272
 4131              	.LBB322:
2531:src/display.c **** 	  IoAnnunciator = on;
 4132              		.loc 1 2531 4 view .LVU1273
 4133              	.LVL447:
 4134              	.LBB323:
 4135              	.LBI323:
 334:src/display.c ****   if (on)	set_dot(n);
 4136              		.loc 1 334 6 view .LVU1274
 4137              	.LBB324:
 335:src/display.c ****   else	clr_dot(n);
 4138              		.loc 1 335 3 view .LVU1275
 336:src/display.c **** }
 4139              		.loc 1 336 8 view .LVU1276
 4140 00b2 8420     		movs	r0, #132
 4141 00b4 FFF7FEFF 		bl	clr_dot
 4142              	.LVL448:
 336:src/display.c **** }
 4143              		.loc 1 336 8 is_stmt 0 view .LVU1277
 4144              	.LBE324:
 4145              	.LBE323:
2532:src/display.c **** 	  finish_display(); //LIT_EQ
 4146              		.loc 1 2532 4 is_stmt 1 view .LVU1278
2532:src/display.c **** 	  finish_display(); //LIT_EQ
 4147              		.loc 1 2532 18 is_stmt 0 view .LVU1279
 4148 00b8 0023     		movs	r3, #0
 4149 00ba 2B60     		str	r3, [r5]
2533:src/display.c **** 	}
 4150              		.loc 1 2533 4 is_stmt 1 view .LVU1280
 4151 00bc FFF7FEFF 		bl	finish_display
 4152              	.LVL449:
2535:src/display.c **** 
 4153              		.loc 1 2535 7 is_stmt 0 view .LVU1281
 4154 00c0 D0E7     		b	.L388
 4155              	.LVL450:
 4156              	.L384:
2535:src/display.c **** 
 4157              		.loc 1 2535 7 view .LVU1282
 4158              	.LBE322:
 4159              	.LBE321:
 4160              	.LBE327:
 4161              	.LBE347:
 4162              	.LBB348:
 334:src/display.c ****   if (on)	set_dot(n);
ARM GAS  /tmp/ccobNVTR.s 			page 147


 4163              		.loc 1 334 6 is_stmt 1 view .LVU1283
 4164              	.LBB312:
 335:src/display.c ****   else	clr_dot(n);
 4165              		.loc 1 335 3 view .LVU1284
 335:src/display.c ****   else	clr_dot(n);
 4166              		.loc 1 335 11 view .LVU1285
 4167 00c2 FFF7FEFF 		bl	set_dot
 4168              	.LVL451:
 4169 00c6 C3E7     		b	.L385
 4170              	.LVL452:
 4171              	.L401:
 335:src/display.c ****   else	clr_dot(n);
 4172              		.loc 1 335 11 is_stmt 0 view .LVU1286
 4173              	.LBE312:
 4174              	.LBE348:
 4175              	.LBB349:
 4176              	.LBI304:
 334:src/display.c ****   if (on)	set_dot(n);
 4177              		.loc 1 334 6 is_stmt 1 view .LVU1287
 4178              	.LBB307:
 335:src/display.c ****   else	clr_dot(n);
 4179              		.loc 1 335 3 view .LVU1288
 336:src/display.c **** }
 4180              		.loc 1 336 8 view .LVU1289
 4181 00c8 FFF7FEFF 		bl	clr_dot
 4182              	.LVL453:
 4183 00cc B5E7     		b	.L382
 4184              	.LVL454:
 4185              	.L400:
 336:src/display.c **** }
 4186              		.loc 1 336 8 is_stmt 0 view .LVU1290
 4187              	.LBE307:
 4188              	.LBE349:
 4189              	.LBB350:
 334:src/display.c ****   if (on)	set_dot(n);
 4190              		.loc 1 334 6 is_stmt 1 view .LVU1291
 4191              	.LBB302:
 335:src/display.c ****   else	clr_dot(n);
 4192              		.loc 1 335 3 view .LVU1292
 335:src/display.c ****   else	clr_dot(n);
 4193              		.loc 1 335 11 view .LVU1293
 4194 00ce FFF7FEFF 		bl	set_dot
 4195              	.LVL455:
 4196 00d2 A7E7     		b	.L380
 4197              	.L405:
 4198              		.align	2
 4199              	.L404:
 4200 00d4 00000000 		.word	main_ram
 4201 00d8 00000000 		.word	Running
 4202 00dc 00000000 		.word	StateWhileOn
 4203 00e0 07000800 		.word	524295
 4204 00e4 00080800 		.word	526336
 4205 00e8 00000000 		.word	IoAnnunciator
 4206              	.LBE302:
 4207              	.LBE350:
 4208              		.cfi_endproc
 4209              	.LFE32:
ARM GAS  /tmp/ccobNVTR.s 			page 148


 4211              		.section	.text.getdig,"ax",%progbits
 4212              		.align	1
 4213              		.p2align 2,,3
 4214              		.global	getdig
 4215              		.syntax unified
 4216              		.thumb
 4217              		.thumb_func
 4218              		.fpu fpv4-sp-d16
 4220              	getdig:
 4221              	.LVL456:
 4222              	.LFB6:
 329:src/display.c ****   // perform index lookup
 4223              		.loc 1 329 1 view -0
 4224              		.cfi_startproc
 4225              		@ args = 0, pretend = 0, frame = 0
 4226              		@ frame_needed = 0, uses_anonymous_args = 0
 4227              		@ link register save eliminated.
 331:src/display.c **** }
 4228              		.loc 1 331 3 view .LVU1295
 331:src/display.c **** }
 4229              		.loc 1 331 16 is_stmt 0 view .LVU1296
 4230 0000 014B     		ldr	r3, .L407
 331:src/display.c **** }
 4231              		.loc 1 331 19 view .LVU1297
 4232 0002 C0B2     		uxtb	r0, r0
 4233              	.LVL457:
 332:src/display.c **** 
 4234              		.loc 1 332 1 view .LVU1298
 4235 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4236 0006 7047     		bx	lr
 4237              	.L408:
 4238              		.align	2
 4239              	.L407:
 4240 0008 00000000 		.word	.LANCHOR2
 4241              		.cfi_endproc
 4242              	.LFE6:
 4244              		.section	.text.dot,"ax",%progbits
 4245              		.align	1
 4246              		.p2align 2,,3
 4247              		.global	dot
 4248              		.syntax unified
 4249              		.thumb
 4250              		.thumb_func
 4251              		.fpu fpv4-sp-d16
 4253              	dot:
 4254              	.LVL458:
 4255              	.LFB7:
 334:src/display.c ****   if (on)	set_dot(n);
 4256              		.loc 1 334 25 is_stmt 1 view -0
 4257              		.cfi_startproc
 4258              		@ args = 0, pretend = 0, frame = 0
 4259              		@ frame_needed = 0, uses_anonymous_args = 0
 4260              		@ link register save eliminated.
 335:src/display.c ****   else	clr_dot(n);
 4261              		.loc 1 335 3 view .LVU1300
 335:src/display.c ****   else	clr_dot(n);
 4262              		.loc 1 335 6 is_stmt 0 view .LVU1301
ARM GAS  /tmp/ccobNVTR.s 			page 149


 4263 0000 09B1     		cbz	r1, .L410
 335:src/display.c ****   else	clr_dot(n);
 4264              		.loc 1 335 11 is_stmt 1 discriminator 1 view .LVU1302
 4265 0002 FFF7FEBF 		b	set_dot
 4266              	.LVL459:
 4267              	.L410:
 336:src/display.c **** }
 4268              		.loc 1 336 8 view .LVU1303
 4269 0006 FFF7FEBF 		b	clr_dot
 4270              	.LVL460:
 336:src/display.c **** }
 4271              		.loc 1 336 8 is_stmt 0 view .LVU1304
 4272              		.cfi_endproc
 4273              	.LFE7:
 4275 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4276              		.align	1
 4277              		.p2align 2,,3
 4278              		.global	std_round_fix
 4279              		.syntax unified
 4280              		.thumb
 4281              		.thumb_func
 4282              		.fpu fpv4-sp-d16
 4284              	std_round_fix:
 4285              	.LVL461:
 4286              	.LFB24:
1741:src/display.c **** 	decNumber b, c;
 4287              		.loc 1 1741 60 is_stmt 1 view -0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 80
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
1742:src/display.c **** 
 4291              		.loc 1 1742 2 view .LVU1306
1744:src/display.c **** 	b.exponent -= UState.dispdigs;
 4292              		.loc 1 1744 2 view .LVU1307
1741:src/display.c **** 	decNumber b, c;
 4293              		.loc 1 1741 60 is_stmt 0 view .LVU1308
 4294 0000 00B5     		push	{lr}
 4295              		.cfi_def_cfa_offset 4
 4296              		.cfi_offset 14, -4
 4297 0002 95B0     		sub	sp, sp, #84
 4298              		.cfi_def_cfa_offset 88
1741:src/display.c **** 	decNumber b, c;
 4299              		.loc 1 1741 60 view .LVU1309
 4300 0004 0146     		mov	r1, r0
1744:src/display.c **** 	b.exponent -= UState.dispdigs;
 4301              		.loc 1 1744 2 view .LVU1310
 4302 0006 02A8     		add	r0, sp, #8
 4303              	.LVL462:
1741:src/display.c **** 	decNumber b, c;
 4304              		.loc 1 1741 60 view .LVU1311
 4305 0008 0191     		str	r1, [sp, #4]
1744:src/display.c **** 	b.exponent -= UState.dispdigs;
 4306              		.loc 1 1744 2 view .LVU1312
 4307 000a FFF7FEFF 		bl	dn_1
 4308              	.LVL463:
1745:src/display.c **** 	dn_abs(&c, z);
 4309              		.loc 1 1745 2 is_stmt 1 view .LVU1313
ARM GAS  /tmp/ccobNVTR.s 			page 150


1745:src/display.c **** 	dn_abs(&c, z);
 4310              		.loc 1 1745 22 is_stmt 0 view .LVU1314
 4311 000e 0F4A     		ldr	r2, .L416
1745:src/display.c **** 	dn_abs(&c, z);
 4312              		.loc 1 1745 13 view .LVU1315
 4313 0010 039B     		ldr	r3, [sp, #12]
1745:src/display.c **** 	dn_abs(&c, z);
 4314              		.loc 1 1745 22 view .LVU1316
 4315 0012 1268     		ldr	r2, [r2]
1746:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4316              		.loc 1 1746 2 view .LVU1317
 4317 0014 0199     		ldr	r1, [sp, #4]
1745:src/display.c **** 	dn_abs(&c, z);
 4318              		.loc 1 1745 22 view .LVU1318
 4319 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4320 001a 02F00F02 		and	r2, r2, #15
1745:src/display.c **** 	dn_abs(&c, z);
 4321              		.loc 1 1745 13 view .LVU1319
 4322 001e 9B1A     		subs	r3, r3, r2
1746:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4323              		.loc 1 1746 2 view .LVU1320
 4324 0020 0BA8     		add	r0, sp, #44
1745:src/display.c **** 	dn_abs(&c, z);
 4325              		.loc 1 1745 13 view .LVU1321
 4326 0022 0393     		str	r3, [sp, #12]
1746:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4327              		.loc 1 1746 2 is_stmt 1 view .LVU1322
 4328 0024 FFF7FEFF 		bl	dn_abs
 4329              	.LVL464:
1747:src/display.c **** 	  return MODE_FIX;
 4330              		.loc 1 1747 2 view .LVU1323
1747:src/display.c **** 	  return MODE_FIX;
 4331              		.loc 1 1747 6 is_stmt 0 view .LVU1324
 4332 0028 0BA9     		add	r1, sp, #44
 4333 002a 02A8     		add	r0, sp, #8
 4334 002c FFF7FEFF 		bl	dn_lt
 4335              	.LVL465:
1747:src/display.c **** 	  return MODE_FIX;
 4336              		.loc 1 1747 5 view .LVU1325
 4337 0030 10B9     		cbnz	r0, .L415
1750:src/display.c **** #endif
 4338              		.loc 1 1750 7 view .LVU1326
 4339 0032 15B0     		add	sp, sp, #84
 4340              		.cfi_remember_state
 4341              		.cfi_def_cfa_offset 4
 4342              		@ sp needed
 4343 0034 5DF804FB 		ldr	pc, [sp], #4
 4344              	.LVL466:
 4345              	.L415:
 4346              		.cfi_restore_state
1747:src/display.c **** 	  return MODE_FIX;
 4347              		.loc 1 1747 23 discriminator 1 view .LVU1327
 4348 0038 0549     		ldr	r1, .L416+4
 4349 003a 0BA8     		add	r0, sp, #44
 4350 003c FFF7FEFF 		bl	dn_lt
 4351              	.LVL467:
1748:src/display.c **** 	return MODE_STD;
ARM GAS  /tmp/ccobNVTR.s 			page 151


 4352              		.loc 1 1748 11 discriminator 1 view .LVU1328
 4353 0040 0038     		subs	r0, r0, #0
 4354 0042 18BF     		it	ne
 4355 0044 0120     		movne	r0, #1
1750:src/display.c **** #endif
 4356              		.loc 1 1750 7 discriminator 1 view .LVU1329
 4357 0046 15B0     		add	sp, sp, #84
 4358              		.cfi_def_cfa_offset 4
 4359              		@ sp needed
 4360 0048 5DF804FB 		ldr	pc, [sp], #4
 4361              	.LVL468:
 4362              	.L417:
1750:src/display.c **** #endif
 4363              		.loc 1 1750 7 discriminator 1 view .LVU1330
 4364              		.align	2
 4365              	.L416:
 4366 004c 00000000 		.word	main_ram
 4367 0050 00000000 		.word	const_1
 4368              		.cfi_endproc
 4369              	.LFE24:
 4371              		.section	.text.set_IO_annunciator,"ax",%progbits
 4372              		.align	1
 4373              		.p2align 2,,3
 4374              		.global	set_IO_annunciator
 4375              		.syntax unified
 4376              		.thumb
 4377              		.thumb_func
 4378              		.fpu fpv4-sp-d16
 4380              	set_IO_annunciator:
 4381              	.LFB33:
2515:src/display.c **** #ifndef DM42
 4382              		.loc 1 2515 37 is_stmt 1 view -0
 4383              		.cfi_startproc
 4384              		@ args = 0, pretend = 0, frame = 0
 4385              		@ frame_needed = 0, uses_anonymous_args = 0
2520:src/display.c **** #endif
 4386              		.loc 1 2520 4 view .LVU1332
 4387              	.LVL469:
2530:src/display.c **** 	  dot(LIT_EQ, on);
 4388              		.loc 1 2530 2 view .LVU1333
2515:src/display.c **** #ifndef DM42
 4389              		.loc 1 2515 37 is_stmt 0 view .LVU1334
 4390 0000 10B5     		push	{r4, lr}
 4391              		.cfi_def_cfa_offset 8
 4392              		.cfi_offset 4, -8
 4393              		.cfi_offset 14, -4
2530:src/display.c **** 	  dot(LIT_EQ, on);
 4394              		.loc 1 2530 9 view .LVU1335
 4395 0002 064C     		ldr	r4, .L422
2530:src/display.c **** 	  dot(LIT_EQ, on);
 4396              		.loc 1 2530 5 view .LVU1336
 4397 0004 2368     		ldr	r3, [r4]
 4398 0006 03B9     		cbnz	r3, .L421
2535:src/display.c **** 
 4399              		.loc 1 2535 7 view .LVU1337
 4400 0008 10BD     		pop	{r4, pc}
 4401              	.L421:
ARM GAS  /tmp/ccobNVTR.s 			page 152


 4402              	.LBB355:
 4403              	.LBI355:
2515:src/display.c **** #ifndef DM42
 4404              		.loc 1 2515 12 is_stmt 1 view .LVU1338
 4405              	.LBB356:
2531:src/display.c **** 	  IoAnnunciator = on;
 4406              		.loc 1 2531 4 view .LVU1339
 4407              	.LVL470:
 4408              	.LBB357:
 4409              	.LBI357:
 334:src/display.c ****   if (on)	set_dot(n);
 4410              		.loc 1 334 6 view .LVU1340
 4411              	.LBB358:
 335:src/display.c ****   else	clr_dot(n);
 4412              		.loc 1 335 3 view .LVU1341
 336:src/display.c **** }
 4413              		.loc 1 336 8 view .LVU1342
 4414 000a 8420     		movs	r0, #132
 4415 000c FFF7FEFF 		bl	clr_dot
 4416              	.LVL471:
 336:src/display.c **** }
 4417              		.loc 1 336 8 is_stmt 0 view .LVU1343
 4418              	.LBE358:
 4419              	.LBE357:
2532:src/display.c **** 	  finish_display(); //LIT_EQ
 4420              		.loc 1 2532 4 is_stmt 1 view .LVU1344
2532:src/display.c **** 	  finish_display(); //LIT_EQ
 4421              		.loc 1 2532 18 is_stmt 0 view .LVU1345
 4422 0010 0023     		movs	r3, #0
 4423 0012 2360     		str	r3, [r4]
2533:src/display.c **** 	}
 4424              		.loc 1 2533 4 is_stmt 1 view .LVU1346
 4425              	.LBE356:
 4426              	.LBE355:
2535:src/display.c **** 
 4427              		.loc 1 2535 7 is_stmt 0 view .LVU1347
 4428 0014 BDE81040 		pop	{r4, lr}
 4429              		.cfi_restore 14
 4430              		.cfi_restore 4
 4431              		.cfi_def_cfa_offset 0
 4432              	.LBB360:
 4433              	.LBB359:
2533:src/display.c **** 	}
 4434              		.loc 1 2533 4 view .LVU1348
 4435 0018 FFF7FEBF 		b	finish_display
 4436              	.LVL472:
 4437              	.L423:
 4438              		.align	2
 4439              	.L422:
 4440 001c 00000000 		.word	IoAnnunciator
 4441              	.LBE359:
 4442              	.LBE360:
 4443              		.cfi_endproc
 4444              	.LFE33:
 4446              		.section	.text.pixel_length,"ax",%progbits
 4447              		.align	1
 4448              		.p2align 2,,3
ARM GAS  /tmp/ccobNVTR.s 			page 153


 4449              		.global	pixel_length
 4450              		.syntax unified
 4451              		.thumb
 4452              		.thumb_func
 4453              		.fpu fpv4-sp-d16
 4455              	pixel_length:
 4456              	.LVL473:
 4457              	.LFB40:
3038:src/display.c **** 
3039:src/display.c **** 
3040:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3041:src/display.c ****        */
3042:src/display.c ****       int pixel_length(const char *s, int smallp)
3043:src/display.c ****       {
 4458              		.loc 1 3043 7 is_stmt 1 view -0
 4459              		.cfi_startproc
 4460              		@ args = 0, pretend = 0, frame = 0
 4461              		@ frame_needed = 0, uses_anonymous_args = 0
3044:src/display.c **** 	int len = 0;
 4462              		.loc 1 3044 2 view .LVU1350
3045:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4463              		.loc 1 3045 2 view .LVU1351
3043:src/display.c **** 	int len = 0;
 4464              		.loc 1 3043 7 is_stmt 0 view .LVU1352
 4465 0000 70B5     		push	{r4, r5, r6, lr}
 4466              		.cfi_def_cfa_offset 16
 4467              		.cfi_offset 4, -16
 4468              		.cfi_offset 5, -12
 4469              		.cfi_offset 6, -8
 4470              		.cfi_offset 14, -4
3043:src/display.c **** 	int len = 0;
 4471              		.loc 1 3043 7 view .LVU1353
 4472 0002 0446     		mov	r4, r0
3046:src/display.c **** 	while (*s != '\0') {
 4473              		.loc 1 3046 9 view .LVU1354
 4474 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4475              	.LVL474:
3045:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4476              		.loc 1 3045 34 view .LVU1355
 4477 0006 0E1E     		subs	r6, r1, #0
 4478 0008 18BF     		it	ne
 4479 000a 4FF48076 		movne	r6, #256
 4480              	.LVL475:
 4481              		.loc 1 3046 2 is_stmt 1 view .LVU1356
 4482              		.loc 1 3046 8 view .LVU1357
 4483 000e A0B1     		cbz	r0, .L431
3044:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4484              		.loc 1 3044 6 is_stmt 0 view .LVU1358
 4485 0010 0025     		movs	r5, #0
 4486 0012 06E0     		b	.L429
 4487              	.LVL476:
 4488              	.L427:
3047:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3048:src/display.c **** 	  if (s[0] == '\007') {
3049:src/display.c **** 	    len += s[1] & 0x1F;
3050:src/display.c **** 	    s += 3;
3051:src/display.c **** 	    continue;
ARM GAS  /tmp/ccobNVTR.s 			page 154


3052:src/display.c **** 	  }
3053:src/display.c **** #endif
3054:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4489              		.loc 1 3054 11 view .LVU1359
 4490 0014 3044     		add	r0, r0, r6
 4491 0016 FFF7FEFF 		bl	charlengths
 4492              	.LVL477:
 4493              		.loc 1 3054 42 view .LVU1360
 4494 001a 0134     		adds	r4, r4, #1
 4495              	.LVL478:
 4496              		.loc 1 3054 8 view .LVU1361
 4497 001c 0544     		add	r5, r5, r0
 4498              	.LVL479:
3046:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4499              		.loc 1 3046 8 is_stmt 1 view .LVU1362
3046:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4500              		.loc 1 3046 9 is_stmt 0 view .LVU1363
 4501 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3046:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4502              		.loc 1 3046 8 view .LVU1364
 4503 0020 48B1     		cbz	r0, .L424
 4504              	.LVL480:
 4505              	.L429:
3048:src/display.c **** 	    len += s[1] & 0x1F;
 4506              		.loc 1 3048 4 is_stmt 1 view .LVU1365
 4507              		.loc 1 3054 4 view .LVU1366
3048:src/display.c **** 	    len += s[1] & 0x1F;
 4508              		.loc 1 3048 7 is_stmt 0 view .LVU1367
 4509 0022 0728     		cmp	r0, #7
 4510 0024 F6D1     		bne	.L427
3049:src/display.c **** 	    s += 3;
 4511              		.loc 1 3049 6 is_stmt 1 view .LVU1368
3049:src/display.c **** 	    s += 3;
 4512              		.loc 1 3049 18 is_stmt 0 view .LVU1369
 4513 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3046:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4514              		.loc 1 3046 9 view .LVU1370
 4515 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3049:src/display.c **** 	    s += 3;
 4516              		.loc 1 3049 18 view .LVU1371
 4517 002a 03F01F03 		and	r3, r3, #31
3050:src/display.c **** 	    continue;
 4518              		.loc 1 3050 8 view .LVU1372
 4519 002e 0334     		adds	r4, r4, #3
 4520              	.LVL481:
3049:src/display.c **** 	    s += 3;
 4521              		.loc 1 3049 10 view .LVU1373
 4522 0030 1D44     		add	r5, r5, r3
 4523              	.LVL482:
3050:src/display.c **** 	    continue;
 4524              		.loc 1 3050 6 is_stmt 1 view .LVU1374
3051:src/display.c **** 	  }
 4525              		.loc 1 3051 6 view .LVU1375
3046:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4526              		.loc 1 3046 8 view .LVU1376
 4527 0032 0028     		cmp	r0, #0
 4528 0034 F5D1     		bne	.L429
ARM GAS  /tmp/ccobNVTR.s 			page 155


 4529              	.L424:
3055:src/display.c **** 	}
3056:src/display.c **** 	return len;
3057:src/display.c ****       }
 4530              		.loc 1 3057 7 is_stmt 0 view .LVU1377
 4531 0036 2846     		mov	r0, r5
 4532 0038 70BD     		pop	{r4, r5, r6, pc}
 4533              	.LVL483:
 4534              	.L431:
3044:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4535              		.loc 1 3044 6 view .LVU1378
 4536 003a 0546     		mov	r5, r0
3056:src/display.c ****       }
 4537              		.loc 1 3056 2 is_stmt 1 view .LVU1379
 4538              		.loc 1 3057 7 is_stmt 0 view .LVU1380
 4539 003c 2846     		mov	r0, r5
 4540 003e 70BD     		pop	{r4, r5, r6, pc}
 4541              		.loc 1 3057 7 view .LVU1381
 4542              		.cfi_endproc
 4543              	.LFE40:
 4545              		.section	.text.set_status,"ax",%progbits
 4546              		.align	1
 4547              		.p2align 2,,3
 4548              		.syntax unified
 4549              		.thumb
 4550              		.thumb_func
 4551              		.fpu fpv4-sp-d16
 4553              	set_status:
 4554              	.LVL484:
 4555              	.LFB43:
3058:src/display.c **** 
3059:src/display.c **** 
3060:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3061:src/display.c ****        * If this is larger than the display, return true.
3062:src/display.c ****        */
3063:src/display.c ****       static int string_too_large(const char *s) {
3064:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3065:src/display.c ****       }
3066:src/display.c ****       static int string_too_large_top(const char *s) {
3067:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3068:src/display.c ****       }
3069:src/display.c **** 
3070:src/display.c **** 
3071:src/display.c ****       /* Display the given string on the screen.
3072:src/display.c ****        */
3073:src/display.c ****       static void set_status(const char *str) {
 4556              		.loc 1 3073 47 is_stmt 1 view -0
 4557              		.cfi_startproc
 4558              		@ args = 0, pretend = 0, frame = 0
 4559              		@ frame_needed = 0, uses_anonymous_args = 0
3074:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4560              		.loc 1 3074 2 view .LVU1383
3073:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4561              		.loc 1 3073 47 is_stmt 0 view .LVU1384
 4562 0000 10B5     		push	{r4, lr}
 4563              		.cfi_def_cfa_offset 8
 4564              		.cfi_offset 4, -8
ARM GAS  /tmp/ccobNVTR.s 			page 156


 4565              		.cfi_offset 14, -4
 4566              		.loc 1 3074 24 view .LVU1385
 4567 0002 0D4B     		ldr	r3, .L439
 4568              		.loc 1 3074 2 view .LVU1386
 4569 0004 93F91630 		ldrsb	r3, [r3, #22]
 4570 0008 002B     		cmp	r3, #0
3073:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4571              		.loc 1 3073 47 view .LVU1387
 4572 000a 82B0     		sub	sp, sp, #8
 4573              		.cfi_def_cfa_offset 16
3073:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4574              		.loc 1 3073 47 view .LVU1388
 4575 000c 0446     		mov	r4, r0
 4576              		.loc 1 3074 2 view .LVU1389
 4577 000e 0ADA     		bge	.L438
 4578 0010 0121     		movs	r1, #1
 4579              	.LVL485:
 4580              	.L435:
 4581              	.LBB361:
 4582              	.LBI361:
2915:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4583              		.loc 1 2915 19 is_stmt 1 discriminator 6 view .LVU1390
 4584              	.LBB362:
2916:src/display.c ****       }
 4585              		.loc 1 2916 2 discriminator 6 view .LVU1391
 4586 0012 40F24A23 		movw	r3, #586
 4587 0016 0093     		str	r3, [sp]
 4588 0018 2046     		mov	r0, r4
 4589 001a 8E23     		movs	r3, #142
 4590 001c 4A22     		movs	r2, #74
 4591 001e FFF7FEFF 		bl	s_s_sized
 4592              	.LVL486:
2916:src/display.c ****       }
 4593              		.loc 1 2916 2 is_stmt 0 discriminator 6 view .LVU1392
 4594              	.LBE362:
 4595              	.LBE361:
3075:src/display.c ****       }
 4596              		.loc 1 3075 7 discriminator 6 view .LVU1393
 4597 0022 02B0     		add	sp, sp, #8
 4598              		.cfi_remember_state
 4599              		.cfi_def_cfa_offset 8
 4600              		@ sp needed
 4601 0024 10BD     		pop	{r4, pc}
 4602              	.LVL487:
 4603              	.L438:
 4604              		.cfi_restore_state
 4605              	.LBB363:
 4606              	.LBI363:
3063:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4607              		.loc 1 3063 18 is_stmt 1 view .LVU1394
 4608              	.LBB364:
3064:src/display.c ****       }
 4609              		.loc 1 3064 2 view .LVU1395
3064:src/display.c ****       }
 4610              		.loc 1 3064 9 is_stmt 0 view .LVU1396
 4611 0026 0021     		movs	r1, #0
 4612 0028 FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/ccobNVTR.s 			page 157


 4613              	.LVL488:
3064:src/display.c ****       }
 4614              		.loc 1 3064 9 view .LVU1397
 4615              	.LBE364:
 4616              	.LBE363:
3074:src/display.c ****       }
 4617              		.loc 1 3074 2 view .LVU1398
 4618 002c 4B28     		cmp	r0, #75
 4619 002e D4BF     		ite	le
 4620 0030 0021     		movle	r1, #0
 4621 0032 0121     		movgt	r1, #1
 4622 0034 EDE7     		b	.L435
 4623              	.L440:
 4624 0036 00BF     		.align	2
 4625              	.L439:
 4626 0038 00000000 		.word	StateWhileOn
 4627              		.cfi_endproc
 4628              	.LFE43:
 4630              		.section	.text.set_x_dn,"ax",%progbits
 4631              		.align	1
 4632              		.p2align 2,,3
 4633              		.global	set_x_dn
 4634              		.syntax unified
 4635              		.thumb
 4636              		.thumb_func
 4637              		.fpu fpv4-sp-d16
 4639              	set_x_dn:
 4640              	.LVL489:
 4641              	.LFB27:
1888:src/display.c **** 	char x[50], *obp = x;
 4642              		.loc 1 1888 67 is_stmt 1 view -0
 4643              		.cfi_startproc
 4644              		@ args = 0, pretend = 0, frame = 136
 4645              		@ frame_needed = 0, uses_anonymous_args = 0
1889:src/display.c **** 	int odig = 0;
 4646              		.loc 1 1889 2 view .LVU1400
1888:src/display.c **** 	char x[50], *obp = x;
 4647              		.loc 1 1888 67 is_stmt 0 view .LVU1401
 4648 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4649              		.cfi_def_cfa_offset 36
 4650              		.cfi_offset 4, -36
 4651              		.cfi_offset 5, -32
 4652              		.cfi_offset 6, -28
 4653              		.cfi_offset 7, -24
 4654              		.cfi_offset 8, -20
 4655              		.cfi_offset 9, -16
 4656              		.cfi_offset 10, -12
 4657              		.cfi_offset 11, -8
 4658              		.cfi_offset 14, -4
1905:src/display.c **** 	int mode = UState.dispmode;
 4659              		.loc 1 1905 11 view .LVU1402
 4660 0004 C84B     		ldr	r3, .L676
 4661 0006 1B68     		ldr	r3, [r3]
1888:src/display.c **** 	char x[50], *obp = x;
 4662              		.loc 1 1888 67 view .LVU1403
 4663 0008 A3B0     		sub	sp, sp, #140
 4664              		.cfi_def_cfa_offset 176
ARM GAS  /tmp/ccobNVTR.s 			page 158


 4665              	.LVL490:
1890:src/display.c **** 	int show_exp = 0;
 4666              		.loc 1 1890 2 is_stmt 1 view .LVU1404
1891:src/display.c **** 	int j;
 4667              		.loc 1 1891 2 view .LVU1405
1892:src/display.c **** 	char mantissa[64];
 4668              		.loc 1 1892 2 view .LVU1406
1893:src/display.c **** 	int exp = 0;
 4669              		.loc 1 1893 2 view .LVU1407
1894:src/display.c **** 	char *p = mantissa;
 4670              		.loc 1 1894 2 view .LVU1408
1895:src/display.c **** 	char *r;
 4671              		.loc 1 1895 2 view .LVU1409
1896:src/display.c **** 	const char *q;
 4672              		.loc 1 1896 2 view .LVU1410
1897:src/display.c **** 	int count, i;
 4673              		.loc 1 1897 2 view .LVU1411
1898:src/display.c **** 	int extra_digits = 0;
 4674              		.loc 1 1898 2 view .LVU1412
1899:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4675              		.loc 1 1899 2 view .LVU1413
1905:src/display.c **** 	int mode = UState.dispmode;
 4676              		.loc 1 1905 2 view .LVU1414
1905:src/display.c **** 	int mode = UState.dispmode;
 4677              		.loc 1 1905 17 is_stmt 0 view .LVU1415
 4678 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1906:src/display.c **** #endif
 4679              		.loc 1 1906 19 view .LVU1416
 4680 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1888:src/display.c **** 	char x[50], *obp = x;
 4681              		.loc 1 1888 67 view .LVU1417
 4682 0012 0092     		str	r2, [sp]
 4683 0014 0C46     		mov	r4, r1
 4684 0016 0646     		mov	r6, r0
1905:src/display.c **** 	int mode = UState.dispmode;
 4685              		.loc 1 1905 17 view .LVU1418
 4686 0018 05F00F05 		and	r5, r5, #15
 4687              	.LVL491:
1906:src/display.c **** #endif
 4688              		.loc 1 1906 2 is_stmt 1 view .LVU1419
1906:src/display.c **** #endif
 4689              		.loc 1 1906 19 is_stmt 0 view .LVU1420
 4690 001c BF09     		lsrs	r7, r7, #6
 4691              	.LVL492:
1908:src/display.c **** 	int negative = 0;
 4692              		.loc 1 1908 2 is_stmt 1 view .LVU1421
1909:src/display.c **** 	int trimzeros = 0;
 4693              		.loc 1 1909 2 view .LVU1422
1910:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4694              		.loc 1 1910 2 view .LVU1423
1912:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4695              		.loc 1 1912 2 view .LVU1424
1921:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4696              		.loc 1 1921 2 view .LVU1425
 4697 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4698              	.LVL493:
1923:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
ARM GAS  /tmp/ccobNVTR.s 			page 159


 4699              		.loc 1 1923 2 view .LVU1426
1923:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4700              		.loc 1 1923 5 is_stmt 0 view .LVU1427
 4701 0022 002C     		cmp	r4, #0
 4702 0024 00F08A81 		beq	.L442
 4703              	.L445:
1948:src/display.c **** 	  return;
 4704              		.loc 1 1948 2 is_stmt 1 view .LVU1428
1948:src/display.c **** 	  return;
 4705              		.loc 1 1948 6 is_stmt 0 view .LVU1429
 4706 0028 2146     		mov	r1, r4
 4707 002a 06F10800 		add	r0, r6, #8
 4708 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4709              	.LVL494:
1948:src/display.c **** 	  return;
 4710              		.loc 1 1948 5 view .LVU1430
 4711 0032 8346     		mov	fp, r0
 4712 0034 0028     		cmp	r0, #0
 4713 0036 40F06F81 		bne	.L441
1951:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4714              		.loc 1 1951 2 is_stmt 1 view .LVU1431
1951:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4715              		.loc 1 1951 12 is_stmt 0 view .LVU1432
 4716 003a DFF8F092 		ldr	r9, .L676+4
1951:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4717              		.loc 1 1951 5 view .LVU1433
 4718 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4719 0042 012B     		cmp	r3, #1
 4720 0044 00F0AF82 		beq	.L657
1894:src/display.c **** 	char *p = mantissa;
 4721              		.loc 1 1894 6 view .LVU1434
 4722 0048 0190     		str	r0, [sp, #4]
 4723              	.LVL495:
 4724              	.L448:
1957:src/display.c **** 
 4725              		.loc 1 1957 2 is_stmt 1 view .LVU1435
 4726 004a 0DF11408 		add	r8, sp, #20
 4727              	.LVL496:
1957:src/display.c **** 
 4728              		.loc 1 1957 2 is_stmt 0 view .LVU1436
 4729 004e 4046     		mov	r0, r8
 4730 0050 3222     		movs	r2, #50
 4731 0052 0021     		movs	r1, #0
 4732 0054 FFF7FEFF 		bl	xset
 4733              	.LVL497:
1959:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4734              		.loc 1 1959 2 is_stmt 1 view .LVU1437
1959:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4735              		.loc 1 1959 6 is_stmt 0 view .LVU1438
 4736 0058 3046     		mov	r0, r6
 4737 005a FFF7FEFF 		bl	dn_eq0
 4738              	.LVL498:
1959:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4739              		.loc 1 1959 5 view .LVU1439
 4740 005e 0028     		cmp	r0, #0
 4741 0060 00F05D81 		beq	.L449
1960:src/display.c **** 	    x[0] = '-';
ARM GAS  /tmp/ccobNVTR.s 			page 160


 4742              		.loc 1 1960 4 is_stmt 1 view .LVU1440
1960:src/display.c **** 	    x[0] = '-';
 4743              		.loc 1 1960 7 is_stmt 0 view .LVU1441
 4744 0064 96F90830 		ldrsb	r3, [r6, #8]
 4745 0068 002B     		cmp	r3, #0
 4746 006a C0F2C182 		blt	.L658
 4747              	.L450:
1964:src/display.c **** 	} else
 4748              		.loc 1 1964 6 is_stmt 1 view .LVU1442
1964:src/display.c **** 	} else
 4749              		.loc 1 1964 11 is_stmt 0 view .LVU1443
 4750 006e 3023     		movs	r3, #48
 4751 0070 8DF81430 		strb	r3, [sp, #20]
 4752              	.L451:
1968:src/display.c **** 	  show_x(x, exp);
 4753              		.loc 1 1968 2 is_stmt 1 view .LVU1444
1968:src/display.c **** 	  show_x(x, exp);
 4754              		.loc 1 1968 12 is_stmt 0 view .LVU1445
 4755 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1968:src/display.c **** 	  show_x(x, exp);
 4756              		.loc 1 1968 5 view .LVU1446
 4757 0078 BAF1010F 		cmp	r10, #1
 4758 007c 00F0F082 		beq	.L659
1991:src/display.c **** 	  mode = std_round_fix(z);
 4759              		.loc 1 1991 2 is_stmt 1 view .LVU1447
1991:src/display.c **** 	  mode = std_round_fix(z);
 4760              		.loc 1 1991 5 is_stmt 0 view .LVU1448
 4761 0080 002F     		cmp	r7, #0
 4762 0082 00F0FD81 		beq	.L660
1995:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4763              		.loc 1 1995 19 view .LVU1449
 4764 0086 009B     		ldr	r3, [sp]
 4765 0088 1B68     		ldr	r3, [r3]
1995:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4766              		.loc 1 1995 12 view .LVU1450
 4767 008a AB42     		cmp	r3, r5
1905:src/display.c **** 	int mode = UState.dispmode;
 4768              		.loc 1 1905 6 view .LVU1451
 4769 008c AA46     		mov	r10, r5
1995:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4770              		.loc 1 1995 9 is_stmt 1 view .LVU1452
1997:src/display.c **** #endif
 4771              		.loc 1 1997 4 view .LVU1453
1997:src/display.c **** #endif
 4772              		.loc 1 1997 7 is_stmt 0 view .LVU1454
 4773 008e D8BF     		it	le
 4774 0090 03F1FF3A 		addle	r10, r3, #-1
1910:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4775              		.loc 1 1910 6 view .LVU1455
 4776 0094 0023     		movs	r3, #0
 4777 0096 0193     		str	r3, [sp, #4]
 4778              	.LVL499:
 4779              	.L464:
2000:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4780              		.loc 1 2000 2 is_stmt 1 view .LVU1456
 4781 0098 0DF14809 		add	r9, sp, #72
 4782              	.LVL500:
ARM GAS  /tmp/ccobNVTR.s 			page 161


2000:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4783              		.loc 1 2000 2 is_stmt 0 view .LVU1457
 4784 009c 3021     		movs	r1, #48
 4785 009e 4846     		mov	r0, r9
 4786 00a0 3F22     		movs	r2, #63
 4787 00a2 FFF7FEFF 		bl	xset
 4788              	.LVL501:
2001:src/display.c **** 
 4789              		.loc 1 2001 2 is_stmt 1 view .LVU1458
2001:src/display.c **** 
 4790              		.loc 1 2001 31 is_stmt 0 view .LVU1459
 4791 00a6 0023     		movs	r3, #0
2003:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4792              		.loc 1 2003 6 view .LVU1460
 4793 00a8 4521     		movs	r1, #69
 4794 00aa 4046     		mov	r0, r8
2001:src/display.c **** 
 4795              		.loc 1 2001 31 view .LVU1461
 4796 00ac 8DF88730 		strb	r3, [sp, #135]
2003:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4797              		.loc 1 2003 2 is_stmt 1 view .LVU1462
2003:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4798              		.loc 1 2003 6 is_stmt 0 view .LVU1463
 4799 00b0 FFF7FEFF 		bl	find_char
 4800              	.LVL502:
2012:src/display.c **** 	else exp = s_to_i(q+1);
 4801              		.loc 1 2012 2 is_stmt 1 view .LVU1464
2012:src/display.c **** 	else exp = s_to_i(q+1);
 4802              		.loc 1 2012 5 is_stmt 0 view .LVU1465
 4803 00b4 0028     		cmp	r0, #0
 4804 00b6 00F05C81 		beq	.L565
2013:src/display.c **** #endif
 4805              		.loc 1 2013 7 is_stmt 1 view .LVU1466
2013:src/display.c **** #endif
 4806              		.loc 1 2013 13 is_stmt 0 view .LVU1467
 4807 00ba 0130     		adds	r0, r0, #1
 4808              	.LVL503:
2013:src/display.c **** #endif
 4809              		.loc 1 2013 13 view .LVU1468
 4810 00bc FFF7FEFF 		bl	s_to_i
 4811              	.LVL504:
2013:src/display.c **** #endif
 4812              		.loc 1 2013 13 view .LVU1469
 4813 00c0 0546     		mov	r5, r0
 4814              	.LVL505:
 4815              	.L465:
2017:src/display.c **** 	if (!res) {
 4816              		.loc 1 2017 2 is_stmt 1 view .LVU1470
2017:src/display.c **** 	if (!res) {
 4817              		.loc 1 2017 12 view .LVU1471
2017:src/display.c **** 	if (!res) {
 4818              		.loc 1 2017 2 is_stmt 0 view .LVU1472
 4819 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4820 00c6 202B     		cmp	r3, #32
2017:src/display.c **** 	if (!res) {
 4821              		.loc 1 2017 8 view .LVU1473
 4822 00c8 4646     		mov	r6, r8
ARM GAS  /tmp/ccobNVTR.s 			page 162


 4823              	.LVL506:
2017:src/display.c **** 	if (!res) {
 4824              		.loc 1 2017 2 view .LVU1474
 4825 00ca 03D1     		bne	.L466
 4826              	.LVL507:
 4827              	.L467:
2017:src/display.c **** 	if (!res) {
 4828              		.loc 1 2017 27 is_stmt 1 discriminator 3 view .LVU1475
2017:src/display.c **** 	if (!res) {
 4829              		.loc 1 2017 23 discriminator 3 view .LVU1476
2017:src/display.c **** 	if (!res) {
 4830              		.loc 1 2017 12 discriminator 3 view .LVU1477
2017:src/display.c **** 	if (!res) {
 4831              		.loc 1 2017 2 is_stmt 0 discriminator 3 view .LVU1478
 4832 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4833              	.LVL508:
2017:src/display.c **** 	if (!res) {
 4834              		.loc 1 2017 2 discriminator 3 view .LVU1479
 4835 00d0 202B     		cmp	r3, #32
 4836 00d2 FBD0     		beq	.L467
 4837              	.LVL509:
 4838              	.L466:
2018:src/display.c **** 	  CLR_EXP_SIGN;
 4839              		.loc 1 2018 2 is_stmt 1 view .LVU1480
2018:src/display.c **** 	  CLR_EXP_SIGN;
 4840              		.loc 1 2018 5 is_stmt 0 view .LVU1481
 4841 00d4 002C     		cmp	r4, #0
 4842 00d6 00F09682 		beq	.L661
 4843              	.L468:
2022:src/display.c **** 	  negative = 1;
 4844              		.loc 1 2022 2 is_stmt 1 view .LVU1482
2022:src/display.c **** 	  negative = 1;
 4845              		.loc 1 2022 6 is_stmt 0 view .LVU1483
 4846 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2022:src/display.c **** 	  negative = 1;
 4847              		.loc 1 2022 5 view .LVU1484
 4848 00dc 2D2B     		cmp	r3, #45
 4849 00de 00F0CA81 		beq	.L662
2025:src/display.c **** 	  q++;
 4850              		.loc 1 2025 9 is_stmt 1 view .LVU1485
2025:src/display.c **** 	  q++;
 4851              		.loc 1 2025 12 is_stmt 0 view .LVU1486
 4852 00e2 2B2B     		cmp	r3, #43
 4853 00e4 00F06E82 		beq	.L663
1909:src/display.c **** 	int trimzeros = 0;
 4854              		.loc 1 1909 6 view .LVU1487
 4855 00e8 4FF0000E 		mov	lr, #0
 4856              	.LVL510:
 4857              	.L470:
2027:src/display.c **** 	if (*q == '.') {
 4858              		.loc 1 2027 9 is_stmt 1 discriminator 1 view .LVU1488
2027:src/display.c **** 	if (*q == '.') {
 4859              		.loc 1 2027 2 is_stmt 0 discriminator 1 view .LVU1489
 4860 00ec 302B     		cmp	r3, #48
 4861 00ee 03D1     		bne	.L472
 4862              	.LVL511:
 4863              	.L471:
ARM GAS  /tmp/ccobNVTR.s 			page 163


2027:src/display.c **** 	if (*q == '.') {
 4864              		.loc 1 2027 24 is_stmt 1 discriminator 2 view .LVU1490
2027:src/display.c **** 	if (*q == '.') {
 4865              		.loc 1 2027 20 discriminator 2 view .LVU1491
2027:src/display.c **** 	if (*q == '.') {
 4866              		.loc 1 2027 9 discriminator 2 view .LVU1492
 4867 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4868              	.LVL512:
2027:src/display.c **** 	if (*q == '.') {
 4869              		.loc 1 2027 2 is_stmt 0 discriminator 2 view .LVU1493
 4870 00f4 302B     		cmp	r3, #48
 4871 00f6 FBD0     		beq	.L471
 4872              	.LVL513:
 4873              	.L472:
2028:src/display.c **** 	  do
 4874              		.loc 1 2028 2 is_stmt 1 view .LVU1494
2028:src/display.c **** 	  do
 4875              		.loc 1 2028 5 is_stmt 0 view .LVU1495
 4876 00f8 2E2B     		cmp	r3, #46
 4877 00fa 00F0A681 		beq	.L664
2035:src/display.c **** 	    *p++ = *q++;
 4878              		.loc 1 2035 4 is_stmt 1 view .LVU1496
2035:src/display.c **** 	    *p++ = *q++;
 4879              		.loc 1 2035 7 is_stmt 0 view .LVU1497
 4880 00fe A3F13002 		sub	r2, r3, #48
 4881 0102 092A     		cmp	r2, #9
2036:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4882              		.loc 1 2036 6 is_stmt 1 view .LVU1498
 4883              	.LVL514:
2036:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4884              		.loc 1 2036 15 is_stmt 0 view .LVU1499
 4885 0104 9CBF     		itt	ls
 4886 0106 0136     		addls	r6, r6, #1
 4887              	.LVL515:
2036:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4888              		.loc 1 2036 11 view .LVU1500
 4889 0108 8DF84830 		strbls	r3, [sp, #72]
2037:src/display.c **** 	    *p++ = *q++;
 4890              		.loc 1 2037 11 view .LVU1501
 4891 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2037:src/display.c **** 	    *p++ = *q++;
 4892              		.loc 1 2037 10 view .LVU1502
 4893 010e A2F13003 		sub	r3, r2, #48
2036:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4894              		.loc 1 2036 8 view .LVU1503
 4895 0112 94BF     		ite	ls
 4896 0114 0DF14901 		addls	r1, sp, #73
1895:src/display.c **** 	char *r;
 4897              		.loc 1 1895 8 view .LVU1504
 4898 0118 4946     		movhi	r1, r9
 4899              	.LVL516:
2037:src/display.c **** 	    *p++ = *q++;
 4900              		.loc 1 2037 10 is_stmt 1 view .LVU1505
 4901 011a 092B     		cmp	r3, #9
 4902 011c 0CD8     		bhi	.L478
 4903 011e A81B     		subs	r0, r5, r6
 4904 0120 731C     		adds	r3, r6, #1
ARM GAS  /tmp/ccobNVTR.s 			page 164


 4905              	.L479:
 4906              	.LVL517:
2038:src/display.c **** 	    exp++;
 4907              		.loc 1 2038 6 view .LVU1506
2038:src/display.c **** 	    exp++;
 4908              		.loc 1 2038 11 is_stmt 0 view .LVU1507
 4909 0122 01F8012B 		strb	r2, [r1], #1
 4910              	.LVL518:
2038:src/display.c **** 	    exp++;
 4911              		.loc 1 2038 15 view .LVU1508
 4912 0126 1E46     		mov	r6, r3
 4913              	.LVL519:
2039:src/display.c **** 	  }
 4914              		.loc 1 2039 6 is_stmt 1 view .LVU1509
 4915 0128 C518     		adds	r5, r0, r3
 4916              	.LVL520:
2037:src/display.c **** 	    *p++ = *q++;
 4917              		.loc 1 2037 10 view .LVU1510
2037:src/display.c **** 	    *p++ = *q++;
 4918              		.loc 1 2037 11 is_stmt 0 view .LVU1511
 4919 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4920              	.LVL521:
2037:src/display.c **** 	    *p++ = *q++;
 4921              		.loc 1 2037 10 view .LVU1512
 4922 012e A2F1300C 		sub	ip, r2, #48
 4923 0132 BCF1090F 		cmp	ip, #9
 4924 0136 F4D9     		bls	.L479
 4925              	.LVL522:
 4926              	.L478:
2041:src/display.c **** 	    q++;
 4927              		.loc 1 2041 4 is_stmt 1 view .LVU1513
2041:src/display.c **** 	    q++;
 4928              		.loc 1 2041 7 is_stmt 0 view .LVU1514
 4929 0138 2E2A     		cmp	r2, #46
 4930 013a 00F04882 		beq	.L665
 4931              	.LVL523:
 4932              	.L475:
2048:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4933              		.loc 1 2048 2 is_stmt 1 view .LVU1515
2049:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4934              		.loc 1 2049 12 is_stmt 0 view .LVU1516
 4935 013e 009B     		ldr	r3, [sp]
2048:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4936              		.loc 1 2048 5 view .LVU1517
 4937 0140 012F     		cmp	r7, #1
2049:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4938              		.loc 1 2049 12 view .LVU1518
 4939 0142 1E68     		ldr	r6, [r3]
2048:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4940              		.loc 1 2048 5 view .LVU1519
 4941 0144 00F06F81 		beq	.L666
 4942 0148 0022     		movs	r2, #0
 4943              	.LVL524:
 4944              	.L481:
2062:src/display.c **** 	if (*p >= '5') {	// Round up
 4945              		.loc 1 2062 2 is_stmt 1 view .LVU1520
2062:src/display.c **** 	if (*p >= '5') {	// Round up
ARM GAS  /tmp/ccobNVTR.s 			page 165


 4946              		.loc 1 2062 20 is_stmt 0 view .LVU1521
 4947 014a 5244     		add	r2, r2, r10
2062:src/display.c **** 	if (*p >= '5') {	// Round up
 4948              		.loc 1 2062 35 view .LVU1522
 4949 014c 501C     		adds	r0, r2, #1
2062:src/display.c **** 	if (*p >= '5') {	// Round up
 4950              		.loc 1 2062 4 view .LVU1523
 4951 014e 09EB0003 		add	r3, r9, r0
 4952              	.LVL525:
2063:src/display.c **** 	  *p = '0';
 4953              		.loc 1 2063 2 is_stmt 1 view .LVU1524
2063:src/display.c **** 	  *p = '0';
 4954              		.loc 1 2063 6 is_stmt 0 view .LVU1525
 4955 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2063:src/display.c **** 	  *p = '0';
 4956              		.loc 1 2063 5 view .LVU1526
 4957 0156 3429     		cmp	r1, #52
 4958 0158 21D9     		bls	.L485
2064:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4959              		.loc 1 2064 4 is_stmt 1 view .LVU1527
2064:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4960              		.loc 1 2064 7 is_stmt 0 view .LVU1528
 4961 015a 3021     		movs	r1, #48
 4962 015c 09F80010 		strb	r1, [r9, r0]
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4963              		.loc 1 2065 4 is_stmt 1 view .LVU1529
 4964              	.LVL526:
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4965              		.loc 1 2065 23 view .LVU1530
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4966              		.loc 1 2065 4 is_stmt 0 view .LVU1531
 4967 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 4968 0164 3929     		cmp	r1, #57
 4969 0166 40F0A683 		bne	.L486
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4970              		.loc 1 2065 11 view .LVU1532
 4971 016a 4946     		mov	r1, r9
 4972              	.LVL527:
 4973              	.L487:
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4974              		.loc 1 2065 38 is_stmt 1 discriminator 3 view .LVU1533
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4975              		.loc 1 2065 34 discriminator 3 view .LVU1534
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4976              		.loc 1 2065 23 discriminator 3 view .LVU1535
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4977              		.loc 1 2065 4 is_stmt 0 discriminator 3 view .LVU1536
 4978 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 4979              	.LVL528:
2065:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4980              		.loc 1 2065 4 discriminator 3 view .LVU1537
 4981 0170 BCF1390F 		cmp	ip, #57
 4982 0174 FAD0     		beq	.L487
2066:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4983              		.loc 1 2066 4 is_stmt 1 view .LVU1538
2066:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4984              		.loc 1 2066 7 is_stmt 0 view .LVU1539
ARM GAS  /tmp/ccobNVTR.s 			page 166


 4985 0176 8B42     		cmp	r3, r1
 4986 0178 00F0FD80 		beq	.L667
 4987              	.LVL529:
 4988              	.L557:
2075:src/display.c **** 	      *p = '0';
 4989              		.loc 1 2075 12 is_stmt 1 view .LVU1540
2075:src/display.c **** 	      *p = '0';
 4990              		.loc 1 2075 13 is_stmt 0 view .LVU1541
 4991 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2075:src/display.c **** 	      *p = '0';
 4992              		.loc 1 2075 12 view .LVU1542
 4993 0180 3929     		cmp	r1, #57
 4994 0182 4A44     		add	r2, r2, r9
 4995              	.LVL530:
2075:src/display.c **** 	      *p = '0';
 4996              		.loc 1 2075 12 view .LVU1543
 4997 0184 07D1     		bne	.L490
2076:src/display.c **** 	    (*p)++;
 4998              		.loc 1 2076 11 view .LVU1544
 4999 0186 4FF0300C 		mov	ip, #48
 5000              	.L489:
2076:src/display.c **** 	    (*p)++;
 5001              		.loc 1 2076 8 is_stmt 1 view .LVU1545
2076:src/display.c **** 	    (*p)++;
 5002              		.loc 1 2076 11 is_stmt 0 view .LVU1546
 5003 018a 82F800C0 		strb	ip, [r2]
2075:src/display.c **** 	      *p = '0';
 5004              		.loc 1 2075 12 is_stmt 1 view .LVU1547
 5005              	.LVL531:
2075:src/display.c **** 	      *p = '0';
 5006              		.loc 1 2075 13 is_stmt 0 view .LVU1548
 5007 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5008              	.LVL532:
2075:src/display.c **** 	      *p = '0';
 5009              		.loc 1 2075 12 view .LVU1549
 5010 0192 3929     		cmp	r1, #57
 5011 0194 F9D0     		beq	.L489
 5012              	.L490:
2077:src/display.c **** 	  }
 5013              		.loc 1 2077 6 is_stmt 1 view .LVU1550
2077:src/display.c **** 	  }
 5014              		.loc 1 2077 10 is_stmt 0 view .LVU1551
 5015 0196 0131     		adds	r1, r1, #1
 5016 0198 1170     		strb	r1, [r2]
 5017              	.LVL533:
 5018              	.L654:
2077:src/display.c **** 	  }
 5019              		.loc 1 2077 10 view .LVU1552
 5020 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5021              	.L485:
2082:src/display.c **** 
 5022              		.loc 1 2082 2 is_stmt 1 view .LVU1553
 5023              	.LVL534:
2082:src/display.c **** 
 5024              		.loc 1 2082 45 view .LVU1554
2082:src/display.c **** 
 5025              		.loc 1 2082 2 is_stmt 0 view .LVU1555
ARM GAS  /tmp/ccobNVTR.s 			page 167


 5026 019e 29B1     		cbz	r1, .L496
 5027              	.LVL535:
 5028              	.L556:
2082:src/display.c **** 
 5029              		.loc 1 2082 62 view .LVU1556
 5030 01a0 3021     		movs	r1, #48
 5031              	.L497:
2082:src/display.c **** 
 5032              		.loc 1 2082 68 is_stmt 1 discriminator 3 view .LVU1557
2082:src/display.c **** 
 5033              		.loc 1 2082 57 discriminator 3 view .LVU1558
 5034              	.LVL536:
2082:src/display.c **** 
 5035              		.loc 1 2082 62 is_stmt 0 discriminator 3 view .LVU1559
 5036 01a2 03F8011B 		strb	r1, [r3], #1
 5037              	.LVL537:
2082:src/display.c **** 
 5038              		.loc 1 2082 45 is_stmt 1 discriminator 3 view .LVU1560
2082:src/display.c **** 
 5039              		.loc 1 2082 2 is_stmt 0 discriminator 3 view .LVU1561
 5040 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5041 01a8 002A     		cmp	r2, #0
 5042 01aa FAD1     		bne	.L497
 5043              	.L496:
2084:src/display.c **** 	switch (mode) {
 5044              		.loc 1 2084 2 is_stmt 1 view .LVU1562
 5045              	.LVL538:
2085:src/display.c **** 	default:
 5046              		.loc 1 2085 2 view .LVU1563
 5047 01ac 022F     		cmp	r7, #2
 5048 01ae 5AD0     		beq	.L579
 5049 01b0 032F     		cmp	r7, #3
 5050 01b2 00F00481 		beq	.L499
 5051 01b6 012F     		cmp	r7, #1
 5052 01b8 00F0B681 		beq	.L500
2088:src/display.c **** 	  if (count != *display_digits)
 5053              		.loc 1 2088 4 view .LVU1564
 5054              	.LVL539:
2088:src/display.c **** 	  if (count != *display_digits)
 5055              		.loc 1 2088 34 view .LVU1565
2088:src/display.c **** 	  if (count != *display_digits)
 5056              		.loc 1 2088 42 is_stmt 0 view .LVU1566
 5057 01bc 22AB     		add	r3, sp, #136
 5058 01be 3344     		add	r3, r3, r6
2088:src/display.c **** 	  if (count != *display_digits)
 5059              		.loc 1 2088 4 view .LVU1567
 5060 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5061 01c4 302B     		cmp	r3, #48
 5062 01c6 40F06783 		bne	.L573
 5063 01ca 711E     		subs	r1, r6, #1
 5064 01cc 4944     		add	r1, r1, r9
2088:src/display.c **** 	  if (count != *display_digits)
 5065              		.loc 1 2088 15 view .LVU1568
 5066 01ce 3346     		mov	r3, r6
 5067              	.LVL540:
 5068              	.L502:
2088:src/display.c **** 	  if (count != *display_digits)
ARM GAS  /tmp/ccobNVTR.s 			page 168


 5069              		.loc 1 2088 66 is_stmt 1 discriminator 3 view .LVU1569
2088:src/display.c **** 	  if (count != *display_digits)
 5070              		.loc 1 2088 58 discriminator 3 view .LVU1570
2088:src/display.c **** 	  if (count != *display_digits)
 5071              		.loc 1 2088 42 is_stmt 0 discriminator 3 view .LVU1571
 5072 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
2088:src/display.c **** 	  if (count != *display_digits)
 5073              		.loc 1 2088 4 discriminator 3 view .LVU1572
 5074 01d4 3028     		cmp	r0, #48
 5075 01d6 1A46     		mov	r2, r3
2088:src/display.c **** 	  if (count != *display_digits)
 5076              		.loc 1 2088 63 discriminator 3 view .LVU1573
 5077 01d8 03F1FF33 		add	r3, r3, #-1
 5078              	.LVL541:
2088:src/display.c **** 	  if (count != *display_digits)
 5079              		.loc 1 2088 34 is_stmt 1 discriminator 3 view .LVU1574
2088:src/display.c **** 	  if (count != *display_digits)
 5080              		.loc 1 2088 4 is_stmt 0 discriminator 3 view .LVU1575
 5081 01dc F8D0     		beq	.L502
2089:src/display.c **** 	    count++;
 5082              		.loc 1 2089 4 is_stmt 1 view .LVU1576
2089:src/display.c **** 	    count++;
 5083              		.loc 1 2089 7 is_stmt 0 view .LVU1577
 5084 01de 9E42     		cmp	r6, r3
 5085 01e0 08BF     		it	eq
 5086 01e2 1A46     		moveq	r2, r3
 5087              	.LVL542:
 5088              	.L501:
2092:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5089              		.loc 1 2092 4 is_stmt 1 view .LVU1578
2092:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5090              		.loc 1 2092 7 is_stmt 0 view .LVU1579
 5091 01e4 B542     		cmp	r5, r6
 5092 01e6 80F20381 		bge	.L503
2092:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5093              		.loc 1 2092 47 discriminator 1 view .LVU1580
 5094 01ea 931B     		subs	r3, r2, r6
2092:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5095              		.loc 1 2092 31 discriminator 1 view .LVU1581
 5096 01ec AB42     		cmp	r3, r5
 5097 01ee 00F3FF80 		bgt	.L503
2117:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5098              		.loc 1 2117 11 is_stmt 1 view .LVU1582
2117:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5099              		.loc 1 2117 14 is_stmt 0 view .LVU1583
 5100 01f2 002D     		cmp	r5, #0
 5101 01f4 C0F27583 		blt	.L511
 5102 01f8 6B1C     		adds	r3, r5, #1
2119:src/display.c **** 		*obp++ = ',';
 5103              		.loc 1 2119 31 view .LVU1584
 5104 01fa DFF834A1 		ldr	r10, .L676+8
 5105 01fe 0293     		str	r3, [sp, #8]
 5106 0200 09EB0300 		add	r0, r9, r3
2084:src/display.c **** 	switch (mode) {
 5107              		.loc 1 2084 4 view .LVU1585
 5108 0204 CC46     		mov	ip, r9
1889:src/display.c **** 	int odig = 0;
ARM GAS  /tmp/ccobNVTR.s 			page 169


 5109              		.loc 1 1889 15 view .LVU1586
 5110 0206 4146     		mov	r1, r8
 5111 0208 0192     		str	r2, [sp, #4]
 5112              	.LVL543:
1889:src/display.c **** 	int odig = 0;
 5113              		.loc 1 1889 15 view .LVU1587
 5114 020a 05E0     		b	.L512
 5115              	.LVL544:
 5116              	.L515:
2120:src/display.c **** 	      *obp++ = *p++;
 5117              		.loc 1 2120 3 is_stmt 1 view .LVU1588
2119:src/display.c **** 		*obp++ = ',';
 5118              		.loc 1 2119 18 is_stmt 0 view .LVU1589
 5119 020c 022F     		cmp	r7, #2
2120:src/display.c **** 	      *obp++ = *p++;
 5120              		.loc 1 2120 10 view .LVU1590
 5121 020e 05BF     		ittet	eq
 5122 0210 2C23     		moveq	r3, #44
 5123 0212 4B70     		strbeq	r3, [r1, #1]
2121:src/display.c **** 	      odig++;
 5124              		.loc 1 2121 12 view .LVU1591
 5125 0214 0131     		addne	r1, r1, #1
 5126              	.LVL545:
2120:src/display.c **** 	      *obp++ = *p++;
 5127              		.loc 1 2120 7 view .LVU1592
 5128 0216 0231     		addeq	r1, r1, #2
 5129              	.LVL546:
 5130              	.L512:
2121:src/display.c **** 	      odig++;
 5131              		.loc 1 2121 8 is_stmt 1 discriminator 2 view .LVU1593
2121:src/display.c **** 	      odig++;
 5132              		.loc 1 2121 15 is_stmt 0 discriminator 2 view .LVU1594
 5133 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5134              	.LVL547:
2119:src/display.c **** 		*obp++ = ',';
 5135              		.loc 1 2119 8 is_stmt 1 discriminator 2 view .LVU1595
2121:src/display.c **** 	      odig++;
 5136              		.loc 1 2121 15 is_stmt 0 discriminator 2 view .LVU1596
 5137 021c 0B70     		strb	r3, [r1]
2122:src/display.c **** 	    }
 5138              		.loc 1 2122 8 is_stmt 1 discriminator 2 view .LVU1597
 5139              	.LVL548:
2118:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5140              		.loc 1 2118 23 discriminator 2 view .LVU1598
2118:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5141              		.loc 1 2118 15 discriminator 2 view .LVU1599
2119:src/display.c **** 		*obp++ = ',';
 5142              		.loc 1 2119 31 is_stmt 0 discriminator 2 view .LVU1600
 5143 021e A9EB0C03 		sub	r3, r9, ip
 5144 0222 2B44     		add	r3, r3, r5
 5145 0224 8AFB0327 		smull	r2, r7, r10, r3
 5146 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5147 022c 07EB4707 		add	r7, r7, r7, lsl #1
2118:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5148              		.loc 1 2118 6 discriminator 2 view .LVU1601
 5149 0230 6045     		cmp	r0, ip
2119:src/display.c **** 		*obp++ = ',';
ARM GAS  /tmp/ccobNVTR.s 			page 170


 5150              		.loc 1 2119 31 discriminator 2 view .LVU1602
 5151 0232 A3EB0707 		sub	r7, r3, r7
2118:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5152              		.loc 1 2118 6 discriminator 2 view .LVU1603
 5153 0236 E9D1     		bne	.L515
 5154 0238 019A     		ldr	r2, [sp, #4]
 5155 023a 029F     		ldr	r7, [sp, #8]
2124:src/display.c **** 	    if (count > (exp + 1)) {
 5156              		.loc 1 2124 6 is_stmt 1 view .LVU1604
2124:src/display.c **** 	    if (count > (exp + 1)) {
 5157              		.loc 1 2124 13 is_stmt 0 view .LVU1605
 5158 023c 2E23     		movs	r3, #46
2125:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5159              		.loc 1 2125 9 view .LVU1606
 5160 023e BA42     		cmp	r2, r7
2124:src/display.c **** 	    if (count > (exp + 1)) {
 5161              		.loc 1 2124 13 view .LVU1607
 5162 0240 4B70     		strb	r3, [r1, #1]
2124:src/display.c **** 	    if (count > (exp + 1)) {
 5163              		.loc 1 2124 10 view .LVU1608
 5164 0242 01F10203 		add	r3, r1, #2
 5165              	.LVL549:
2125:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5166              		.loc 1 2125 6 is_stmt 1 view .LVU1609
2125:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5167              		.loc 1 2125 9 is_stmt 0 view .LVU1610
 5168 0246 2BDD     		ble	.L509
 5169 0248 A2EB050C 		sub	ip, r2, r5
 5170              	.LVL550:
2125:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5171              		.loc 1 2125 9 view .LVU1611
 5172 024c 8C44     		add	ip, ip, r1
 5173 024e 0131     		adds	r1, r1, #1
 5174              	.LVL551:
 5175              	.L516:
2127:src/display.c **** 		odig++;
 5176              		.loc 1 2127 3 is_stmt 1 discriminator 3 view .LVU1612
2127:src/display.c **** 		odig++;
 5177              		.loc 1 2127 10 is_stmt 0 discriminator 3 view .LVU1613
 5178 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5179              	.LVL552:
2127:src/display.c **** 		odig++;
 5180              		.loc 1 2127 10 discriminator 3 view .LVU1614
 5181 0254 01F8017F 		strb	r7, [r1, #1]!
2128:src/display.c **** 	      }
 5182              		.loc 1 2128 3 is_stmt 1 discriminator 3 view .LVU1615
2126:src/display.c **** 		*obp++ = *p++;
 5183              		.loc 1 2126 31 discriminator 3 view .LVU1616
2126:src/display.c **** 		*obp++ = *p++;
 5184              		.loc 1 2126 22 discriminator 3 view .LVU1617
2126:src/display.c **** 		*obp++ = *p++;
 5185              		.loc 1 2126 8 is_stmt 0 discriminator 3 view .LVU1618
 5186 0258 8C45     		cmp	ip, r1
 5187 025a F9D1     		bne	.L516
 5188 025c E943     		mvns	r1, r5
 5189 025e 1144     		add	r1, r1, r2
 5190 0260 0B44     		add	r3, r3, r1
ARM GAS  /tmp/ccobNVTR.s 			page 171


 5191              	.LVL553:
2128:src/display.c **** 	      }
 5192              		.loc 1 2128 7 view .LVU1619
 5193 0262 1746     		mov	r7, r2
 5194 0264 1CE0     		b	.L509
 5195              	.LVL554:
 5196              	.L579:
2184:src/display.c **** 	  case -1:
 5197              		.loc 1 2184 16 view .LVU1620
 5198 0266 0127     		movs	r7, #1
 5199              	.LVL555:
 5200              	.L655:
2184:src/display.c **** 	  case -1:
 5201              		.loc 1 2184 16 view .LVU1621
 5202 0268 4146     		mov	r1, r8
 5203              	.LVL556:
 5204              	.L498:
2198:src/display.c **** 	  };
 5205              		.loc 1 2198 6 is_stmt 1 view .LVU1622
2199:src/display.c **** 	  // Falling through
 5206              		.loc 1 2199 5 view .LVU1623
2203:src/display.c **** 	  odig++;
 5207              		.loc 1 2203 4 view .LVU1624
2203:src/display.c **** 	  odig++;
 5208              		.loc 1 2203 15 is_stmt 0 view .LVU1625
 5209 026a 4A46     		mov	r2, r9
 5210              	.LVL557:
2203:src/display.c **** 	  odig++;
 5211              		.loc 1 2203 11 view .LVU1626
 5212 026c 0B46     		mov	r3, r1
 5213 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5214              	.LVL558:
2203:src/display.c **** 	  odig++;
 5215              		.loc 1 2203 11 view .LVU1627
 5216 0272 03F8020B 		strb	r0, [r3], #2
2204:src/display.c **** 	  *obp++ = '.';
 5217              		.loc 1 2204 4 is_stmt 1 view .LVU1628
2205:src/display.c **** 	  dd--;
 5218              		.loc 1 2205 4 view .LVU1629
 5219              	.LVL559:
2207:src/display.c **** 	    *obp++ = *p++;
 5220              		.loc 1 2207 10 is_stmt 0 view .LVU1630
 5221 0276 BAF1000F 		cmp	r10, #0
2205:src/display.c **** 	  dd--;
 5222              		.loc 1 2205 11 view .LVU1631
 5223 027a 4FF02E00 		mov	r0, #46
 5224 027e 4870     		strb	r0, [r1, #1]
2206:src/display.c **** 	  while (dd-- >= 0) {
 5225              		.loc 1 2206 4 is_stmt 1 view .LVU1632
2207:src/display.c **** 	    *obp++ = *p++;
 5226              		.loc 1 2207 4 view .LVU1633
2207:src/display.c **** 	    *obp++ = *p++;
 5227              		.loc 1 2207 10 view .LVU1634
2207:src/display.c **** 	    *obp++ = *p++;
 5228              		.loc 1 2207 10 is_stmt 0 view .LVU1635
 5229 0280 40F30F83 		ble	.L576
2207:src/display.c **** 	    *obp++ = *p++;
ARM GAS  /tmp/ccobNVTR.s 			page 172


 5230              		.loc 1 2207 10 view .LVU1636
 5231 0284 0AF10100 		add	r0, r10, #1
 5232 0288 0131     		adds	r1, r1, #1
 5233 028a 8144     		add	r9, r9, r0
 5234              	.LVL560:
 5235              	.L539:
2208:src/display.c **** 	    odig++;
 5236              		.loc 1 2208 6 is_stmt 1 view .LVU1637
2208:src/display.c **** 	    odig++;
 5237              		.loc 1 2208 13 is_stmt 0 view .LVU1638
 5238 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5239              	.LVL561:
2208:src/display.c **** 	    odig++;
 5240              		.loc 1 2208 13 view .LVU1639
 5241 0290 01F8010F 		strb	r0, [r1, #1]!
2209:src/display.c **** 	  }
 5242              		.loc 1 2209 6 is_stmt 1 view .LVU1640
2207:src/display.c **** 	    *obp++ = *p++;
 5243              		.loc 1 2207 10 view .LVU1641
2207:src/display.c **** 	    *obp++ = *p++;
 5244              		.loc 1 2207 10 is_stmt 0 view .LVU1642
 5245 0294 4A45     		cmp	r2, r9
 5246 0296 F9D1     		bne	.L539
 5247 0298 5344     		add	r3, r3, r10
 5248 029a 5744     		add	r7, r7, r10
2211:src/display.c **** 	}
 5249              		.loc 1 2211 13 view .LVU1643
 5250 029c 4FF0010B 		mov	fp, #1
 5251              	.LVL562:
 5252              	.L509:
2220:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5253              		.loc 1 2220 2 is_stmt 1 view .LVU1644
2226:src/display.c **** 	if (odig > *display_digits)
 5254              		.loc 1 2226 2 view .LVU1645
 5255 02a0 B742     		cmp	r7, r6
 5256 02a2 A8BF     		it	ge
 5257 02a4 3746     		movge	r7, r6
 5258              	.LVL563:
2229:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5259              		.loc 1 2229 23 is_stmt 0 view .LVU1646
 5260 02a6 F61B     		subs	r6, r6, r7
2226:src/display.c **** 	if (odig > *display_digits)
 5261              		.loc 1 2226 7 view .LVU1647
 5262 02a8 0022     		movs	r2, #0
2229:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5263              		.loc 1 2229 4 view .LVU1648
 5264 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2226:src/display.c **** 	if (odig > *display_digits)
 5265              		.loc 1 2226 7 view .LVU1649
 5266 02ae 1A70     		strb	r2, [r3]
2227:src/display.c **** 	  odig = *display_digits;
 5267              		.loc 1 2227 2 is_stmt 1 view .LVU1650
 5268              	.LVL564:
2229:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5269              		.loc 1 2229 2 view .LVU1651
2230:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5270              		.loc 1 2230 2 view .LVU1652
ARM GAS  /tmp/ccobNVTR.s 			page 173


2232:src/display.c **** 	  if (res) *res++ = '-';
 5271              		.loc 1 2232 2 view .LVU1653
2232:src/display.c **** 	  if (res) *res++ = '-';
 5272              		.loc 1 2232 5 is_stmt 0 view .LVU1654
 5273 02b0 BEF1000F 		cmp	lr, #0
 5274 02b4 05D0     		beq	.L540
2233:src/display.c **** 	  else {
 5275              		.loc 1 2233 4 is_stmt 1 view .LVU1655
2233:src/display.c **** 	  else {
 5276              		.loc 1 2233 7 is_stmt 0 view .LVU1656
 5277 02b6 002C     		cmp	r4, #0
 5278 02b8 00F0B281 		beq	.L541
2233:src/display.c **** 	  else {
 5279              		.loc 1 2233 13 is_stmt 1 discriminator 1 view .LVU1657
 5280              	.LVL565:
2233:src/display.c **** 	  else {
 5281              		.loc 1 2233 20 is_stmt 0 discriminator 1 view .LVU1658
 5282 02bc 2D22     		movs	r2, #45
 5283 02be 04F8012B 		strb	r2, [r4], #1
 5284              	.LVL566:
 5285              	.L540:
2241:src/display.c **** 	  if (c == '.') {
 5286              		.loc 1 2241 12 is_stmt 1 discriminator 1 view .LVU1659
2241:src/display.c **** 	  if (c == '.') {
 5287              		.loc 1 2241 18 is_stmt 0 discriminator 1 view .LVU1660
 5288 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5289              	.LVL567:
2241:src/display.c **** 	  if (c == '.') {
 5290              		.loc 1 2241 2 discriminator 1 view .LVU1661
 5291 02c6 E2B1     		cbz	r2, .L542
2241:src/display.c **** 	  if (c == '.') {
 5292              		.loc 1 2241 31 view .LVU1662
 5293 02c8 6B2E     		cmp	r6, #107
 5294 02ca 1ADC     		bgt	.L542
 5295              	.LVL568:
 5296              	.L543:
 5297              	.LBB381:
 5298              	.LBB382:
 367:src/display.c ****   } else {
 5299              		.loc 1 367 17 view .LVU1663
 5300 02cc 3946     		mov	r1, r7
 5301              	.LBE382:
 5302              	.LBE381:
2245:src/display.c **** 	  } else {
 5303              		.loc 1 2245 12 view .LVU1664
 5304 02ce DFF864A0 		ldr	r10, .L676+12
2243:src/display.c **** 	  } else if (c == ',') {
 5305              		.loc 1 2243 12 view .LVU1665
 5306 02d2 DFF86490 		ldr	r9, .L676+16
 5307              	.LBB386:
 5308              	.LBB383:
 367:src/display.c ****   } else {
 5309              		.loc 1 367 17 view .LVU1666
 5310 02d6 1F46     		mov	r7, r3
 5311              	.LVL569:
 367:src/display.c ****   } else {
 5312              		.loc 1 367 17 view .LVU1667
ARM GAS  /tmp/ccobNVTR.s 			page 174


 5313 02d8 0B46     		mov	r3, r1
 5314              	.LVL570:
 5315              	.L552:
 367:src/display.c ****   } else {
 5316              		.loc 1 367 17 view .LVU1668
 5317              	.LBE383:
 5318              	.LBE386:
2242:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5319              		.loc 1 2242 4 is_stmt 1 view .LVU1669
2242:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5320              		.loc 1 2242 7 is_stmt 0 view .LVU1670
 5321 02da 2E2A     		cmp	r2, #46
 5322 02dc 00F0DB80 		beq	.L668
2244:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5323              		.loc 1 2244 11 is_stmt 1 view .LVU1671
2244:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5324              		.loc 1 2244 14 is_stmt 0 view .LVU1672
 5325 02e0 2C2A     		cmp	r2, #44
 5326 02e2 00F0E880 		beq	.L669
2247:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5327              		.loc 1 2247 6 is_stmt 1 view .LVU1673
 5328              	.LVL571:
 5329              	.LBB387:
 5330              	.LBI387:
 402:src/display.c ****   if (res) *res++ = ch;
 5331              		.loc 1 402 14 view .LVU1674
 5332              	.LBB388:
 403:src/display.c ****   else	set_dig(base, ch);
 5333              		.loc 1 403 3 view .LVU1675
 403:src/display.c ****   else	set_dig(base, ch);
 5334              		.loc 1 403 6 is_stmt 0 view .LVU1676
 5335 02e6 002C     		cmp	r4, #0
 5336 02e8 00F0F280 		beq	.L550
 403:src/display.c ****   else	set_dig(base, ch);
 5337              		.loc 1 403 12 is_stmt 1 view .LVU1677
 5338              	.LVL572:
 403:src/display.c ****   else	set_dig(base, ch);
 5339              		.loc 1 403 19 is_stmt 0 view .LVU1678
 5340 02ec 04F8012B 		strb	r2, [r4], #1
 5341              	.LVL573:
 5342              	.L551:
 405:src/display.c **** }
 5343              		.loc 1 405 3 is_stmt 1 view .LVU1679
 405:src/display.c **** }
 5344              		.loc 1 405 3 is_stmt 0 view .LVU1680
 5345              	.LBE388:
 5346              	.LBE387:
2248:src/display.c **** 	  }
 5347              		.loc 1 2248 6 is_stmt 1 view .LVU1681
2241:src/display.c **** 	  if (c == '.') {
 5348              		.loc 1 2241 18 is_stmt 0 view .LVU1682
 5349 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5350              	.LVL574:
2248:src/display.c **** 	  }
 5351              		.loc 1 2248 8 view .LVU1683
 5352 02f4 0936     		adds	r6, r6, #9
 5353              	.LVL575:
ARM GAS  /tmp/ccobNVTR.s 			page 175


2241:src/display.c **** 	  if (c == '.') {
 5354              		.loc 1 2241 53 is_stmt 1 view .LVU1684
2241:src/display.c **** 	  if (c == '.') {
 5355              		.loc 1 2241 12 view .LVU1685
2241:src/display.c **** 	  if (c == '.') {
 5356              		.loc 1 2241 2 is_stmt 0 view .LVU1686
 5357 02f6 0AB1     		cbz	r2, .L651
2241:src/display.c **** 	  if (c == '.') {
 5358              		.loc 1 2241 31 discriminator 3 view .LVU1687
 5359 02f8 6B2E     		cmp	r6, #107
 5360 02fa EEDD     		ble	.L552
 5361              	.L651:
2241:src/display.c **** 	  if (c == '.') {
 5362              		.loc 1 2241 31 discriminator 3 view .LVU1688
 5363 02fc 1A46     		mov	r2, r3
 5364              	.LVL576:
2241:src/display.c **** 	  if (c == '.') {
 5365              		.loc 1 2241 31 discriminator 3 view .LVU1689
 5366 02fe 3B46     		mov	r3, r7
 5367 0300 1746     		mov	r7, r2
 5368              	.LVL577:
 5369              	.L542:
2261:src/display.c **** 	  set_exp(exp, 0, res);
 5370              		.loc 1 2261 2 is_stmt 1 view .LVU1690
2261:src/display.c **** 	  set_exp(exp, 0, res);
 5371              		.loc 1 2261 5 is_stmt 0 view .LVU1691
 5372 0302 BBF1000F 		cmp	fp, #0
 5373 0306 40F0F880 		bne	.L670
 5374              	.L553:
2264:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5375              		.loc 1 2264 2 is_stmt 1 view .LVU1692
2264:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5376              		.loc 1 2264 5 is_stmt 0 view .LVU1693
 5377 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5378 030e 2E2B     		cmp	r3, #46
 5379 0310 00F0E580 		beq	.L671
 5380              	.L554:
2266:src/display.c ****       }
 5381              		.loc 1 2266 2 is_stmt 1 view .LVU1694
2266:src/display.c ****       }
 5382              		.loc 1 2266 18 is_stmt 0 view .LVU1695
 5383 0314 009B     		ldr	r3, [sp]
 5384 0316 1F60     		str	r7, [r3]
 5385              	.LVL578:
 5386              	.L441:
2267:src/display.c **** 
 5387              		.loc 1 2267 7 view .LVU1696
 5388 0318 23B0     		add	sp, sp, #140
 5389              		.cfi_remember_state
 5390              		.cfi_def_cfa_offset 36
 5391              	.LVL579:
2267:src/display.c **** 
 5392              		.loc 1 2267 7 view .LVU1697
 5393              		@ sp needed
 5394 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5395              	.LVL580:
 5396              	.L449:
ARM GAS  /tmp/ccobNVTR.s 			page 176


 5397              		.cfi_restore_state
1966:src/display.c **** 
 5398              		.loc 1 1966 4 is_stmt 1 view .LVU1698
 5399 031e 4146     		mov	r1, r8
 5400 0320 3046     		mov	r0, r6
 5401 0322 FFF7FEFF 		bl	decNumberToString
 5402              	.LVL581:
 5403 0326 A5E6     		b	.L451
 5404              	.L677:
 5405              		.align	2
 5406              	.L676:
 5407 0328 00000000 		.word	main_ram
 5408 032c 00000000 		.word	StateWhileOn
 5409 0330 56555555 		.word	1431655766
 5410 0334 00000000 		.word	.LANCHOR0
 5411 0338 00000000 		.word	.LANCHOR1
 5412              	.LVL582:
 5413              	.L442:
1924:src/display.c **** 	    if (State2.hms) {
 5414              		.loc 1 1924 4 view .LVU1699
1924:src/display.c **** 	    if (State2.hms) {
 5415              		.loc 1 1924 25 is_stmt 0 view .LVU1700
 5416 033c C14B     		ldr	r3, .L678
 5417 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1924:src/display.c **** 	    if (State2.hms) {
 5418              		.loc 1 1924 22 view .LVU1701
 5419 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1924:src/display.c **** 	    if (State2.hms) {
 5420              		.loc 1 1924 25 view .LVU1702
 5421 0342 01F00201 		and	r1, r1, #2
1924:src/display.c **** 	    if (State2.hms) {
 5422              		.loc 1 1924 22 view .LVU1703
 5423 0346 1143     		orrs	r1, r1, r2
 5424 0348 7FF46EAE 		bne	.L445
1925:src/display.c **** 	      set_x_hms(z, res);
 5425              		.loc 1 1925 6 is_stmt 1 view .LVU1704
1925:src/display.c **** 	      set_x_hms(z, res);
 5426              		.loc 1 1925 10 is_stmt 0 view .LVU1705
 5427 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1925:src/display.c **** 	      set_x_hms(z, res);
 5428              		.loc 1 1925 9 view .LVU1706
 5429 034e DA07     		lsls	r2, r3, #31
 5430 0350 00F19E82 		bmi	.L672
1929:src/display.c **** 	      if (set_x_fract(z, res))
 5431              		.loc 1 1929 11 is_stmt 1 view .LVU1707
1929:src/display.c **** 	      if (set_x_fract(z, res))
 5432              		.loc 1 1929 15 is_stmt 0 view .LVU1708
 5433 0354 BC4B     		ldr	r3, .L678+4
 5434 0356 1B68     		ldr	r3, [r3]
 5435 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1929:src/display.c **** 	      if (set_x_fract(z, res))
 5436              		.loc 1 1929 14 view .LVU1709
 5437 035c 9B06     		lsls	r3, r3, #26
 5438 035e 7FF563AE 		bpl	.L445
1930:src/display.c **** 		return;
 5439              		.loc 1 1930 8 is_stmt 1 view .LVU1710
1930:src/display.c **** 		return;
ARM GAS  /tmp/ccobNVTR.s 			page 177


 5440              		.loc 1 1930 12 is_stmt 0 view .LVU1711
 5441 0362 2146     		mov	r1, r4
 5442 0364 3046     		mov	r0, r6
 5443 0366 FFF7FEFF 		bl	set_x_fract
 5444              	.LVL583:
1930:src/display.c **** 		return;
 5445              		.loc 1 1930 11 view .LVU1712
 5446 036a 0028     		cmp	r0, #0
 5447 036c 3FF45CAE 		beq	.L445
 5448 0370 D2E7     		b	.L441
 5449              	.LVL584:
 5450              	.L565:
2012:src/display.c **** 	else exp = s_to_i(q+1);
 5451              		.loc 1 2012 21 view .LVU1713
 5452 0372 0546     		mov	r5, r0
 5453 0374 A5E6     		b	.L465
 5454              	.LVL585:
 5455              	.L667:
2066:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5456              		.loc 1 2066 7 view .LVU1714
 5457 0376 4A46     		mov	r2, r9
2067:src/display.c **** 	    mantissa[0] = '1';
 5458              		.loc 1 2067 41 view .LVU1715
 5459 0378 4FF0300C 		mov	ip, #48
 5460              	.LVL586:
 5461              	.L491:
2067:src/display.c **** 	    mantissa[0] = '1';
 5462              		.loc 1 2067 47 is_stmt 1 discriminator 3 view .LVU1716
2067:src/display.c **** 	    mantissa[0] = '1';
 5463              		.loc 1 2067 36 discriminator 3 view .LVU1717
2067:src/display.c **** 	    mantissa[0] = '1';
 5464              		.loc 1 2067 41 is_stmt 0 discriminator 3 view .LVU1718
 5465 037c 02F801CB 		strb	ip, [r2], #1
 5466              	.LVL587:
2067:src/display.c **** 	    mantissa[0] = '1';
 5467              		.loc 1 2067 25 is_stmt 1 discriminator 3 view .LVU1719
2067:src/display.c **** 	    mantissa[0] = '1';
 5468              		.loc 1 2067 6 is_stmt 0 discriminator 3 view .LVU1720
 5469 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5470 0382 3929     		cmp	r1, #57
 5471 0384 FAD0     		beq	.L491
 5472              	.LVL588:
 5473              	.L558:
2068:src/display.c **** 	    exp++;
 5474              		.loc 1 2068 6 is_stmt 1 view .LVU1721
2068:src/display.c **** 	    exp++;
 5475              		.loc 1 2068 18 is_stmt 0 view .LVU1722
 5476 0386 3122     		movs	r2, #49
2070:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5477              		.loc 1 2070 9 view .LVU1723
 5478 0388 012F     		cmp	r7, #1
2069:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5479              		.loc 1 2069 9 view .LVU1724
 5480 038a 05F10105 		add	r5, r5, #1
 5481              	.LVL589:
2068:src/display.c **** 	    exp++;
 5482              		.loc 1 2068 18 view .LVU1725
ARM GAS  /tmp/ccobNVTR.s 			page 178


 5483 038e 8DF84820 		strb	r2, [sp, #72]
2069:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5484              		.loc 1 2069 6 is_stmt 1 view .LVU1726
 5485              	.LVL590:
2070:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5486              		.loc 1 2070 6 view .LVU1727
2070:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5487              		.loc 1 2070 9 is_stmt 0 view .LVU1728
 5488 0392 7FF402AF 		bne	.L654
2070:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5489              		.loc 1 2070 27 discriminator 1 view .LVU1729
 5490 0396 AE42     		cmp	r6, r5
 5491 0398 00F3C180 		bgt	.L493
2071:src/display.c **** 	      extra_digits = 0;
 5492              		.loc 1 2071 8 is_stmt 1 view .LVU1730
2071:src/display.c **** 	      extra_digits = 0;
 5493              		.loc 1 2071 28 is_stmt 0 view .LVU1731
 5494 039c AA4B     		ldr	r3, .L678+4
 5495              	.LVL591:
2071:src/display.c **** 	      extra_digits = 0;
 5496              		.loc 1 2071 28 view .LVU1732
 5497 039e 1B68     		ldr	r3, [r3]
 5498 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2071:src/display.c **** 	      extra_digits = 0;
 5499              		.loc 1 2071 37 view .LVU1733
 5500 03a4 D806     		lsls	r0, r3, #27
 5501              	.LVL592:
2071:src/display.c **** 	      extra_digits = 0;
 5502              		.loc 1 2071 37 view .LVU1734
 5503 03a6 40F1C082 		bpl	.L673
 5504              	.LVL593:
2082:src/display.c **** 
 5505              		.loc 1 2082 2 is_stmt 1 view .LVU1735
2082:src/display.c **** 
 5506              		.loc 1 2082 40 is_stmt 0 view .LVU1736
 5507 03aa 0AF10102 		add	r2, r10, #1
2082:src/display.c **** 
 5508              		.loc 1 2082 9 view .LVU1737
 5509 03ae 09EB0203 		add	r3, r9, r2
 5510              	.LVL594:
2082:src/display.c **** 
 5511              		.loc 1 2082 45 is_stmt 1 view .LVU1738
2082:src/display.c **** 
 5512              		.loc 1 2082 2 is_stmt 0 view .LVU1739
 5513 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2071:src/display.c **** 	      extra_digits = 0;
 5514              		.loc 1 2071 37 view .LVU1740
 5515 03b6 0327     		movs	r7, #3
2082:src/display.c **** 
 5516              		.loc 1 2082 2 view .LVU1741
 5517 03b8 002A     		cmp	r2, #0
 5518 03ba 7FF4F1AE 		bne	.L556
 5519              	.LVL595:
 5520              	.L499:
2184:src/display.c **** 	  case -1:
 5521              		.loc 1 2184 4 is_stmt 1 view .LVU1742
2184:src/display.c **** 	  case -1:
ARM GAS  /tmp/ccobNVTR.s 			page 179


 5522              		.loc 1 2184 16 is_stmt 0 view .LVU1743
 5523 03be A34B     		ldr	r3, .L678+8
 5524 03c0 83FB0523 		smull	r2, r3, r3, r5
 5525 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5526 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5527 03cc EB1A     		subs	r3, r5, r3
 5528 03ce 0233     		adds	r3, r3, #2
 5529 03d0 042B     		cmp	r3, #4
 5530 03d2 3FF648AF 		bhi	.L579
 5531 03d6 01A2     		adr	r2, .L536
 5532 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5533              		.p2align 2
 5534              	.L536:
 5535 03dc 0B050000 		.word	.L580+1
 5536 03e0 A7070000 		.word	.L535+1
 5537 03e4 67020000 		.word	.L579+1
 5538 03e8 0B050000 		.word	.L580+1
 5539 03ec A7070000 		.word	.L535+1
 5540              	.LVL596:
 5541              		.p2align 1
 5542              	.L503:
2093:src/display.c **** 	    case -1:
 5543              		.loc 1 2093 6 is_stmt 1 view .LVU1744
2093:src/display.c **** 	    case -1:
 5544              		.loc 1 2093 32 is_stmt 0 view .LVU1745
 5545 03f0 9549     		ldr	r1, .L678+4
2093:src/display.c **** 	    case -1:
 5546              		.loc 1 2093 19 view .LVU1746
 5547 03f2 964B     		ldr	r3, .L678+8
2093:src/display.c **** 	    case -1:
 5548              		.loc 1 2093 32 view .LVU1747
 5549 03f4 0968     		ldr	r1, [r1]
2093:src/display.c **** 	    case -1:
 5550              		.loc 1 2093 19 view .LVU1748
 5551 03f6 83FB0503 		smull	r0, r3, r3, r5
2093:src/display.c **** 	    case -1:
 5552              		.loc 1 2093 32 view .LVU1749
 5553 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2093:src/display.c **** 	    case -1:
 5554              		.loc 1 2093 19 view .LVU1750
 5555 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5556 0402 03EB4303 		add	r3, r3, r3, lsl #1
2093:src/display.c **** 	    case -1:
 5557              		.loc 1 2093 32 view .LVU1751
 5558 0406 C1F30011 		ubfx	r1, r1, #4, #1
2093:src/display.c **** 	    case -1:
 5559              		.loc 1 2093 19 view .LVU1752
 5560 040a EB1A     		subs	r3, r5, r3
2093:src/display.c **** 	    case -1:
 5561              		.loc 1 2093 24 view .LVU1753
 5562 040c 03FB01F3 		mul	r3, r3, r1
 5563 0410 0233     		adds	r3, r3, #2
 5564 0412 042B     		cmp	r3, #4
 5565 0414 00F24282 		bhi	.L574
 5566 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5567              	.L507:
 5568 041c DC01     		.2byte	(.L575-.L507)/2
ARM GAS  /tmp/ccobNVTR.s 			page 180


 5569 041e FD01     		.2byte	(.L506-.L507)/2
 5570 0420 4002     		.2byte	(.L574-.L507)/2
 5571 0422 DC01     		.2byte	(.L575-.L507)/2
 5572 0424 FD01     		.2byte	(.L506-.L507)/2
 5573              	.LVL597:
 5574              		.p2align 1
 5575              	.L666:
2049:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5576              		.loc 1 2049 4 is_stmt 1 view .LVU1754
2049:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5577              		.loc 1 2049 7 is_stmt 0 view .LVU1755
 5578 0426 AE42     		cmp	r6, r5
 5579 0428 04DD     		ble	.L482
2049:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5580              		.loc 1 2049 45 discriminator 1 view .LVU1756
 5581 042a CAF10003 		rsb	r3, r10, #0
2049:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5582              		.loc 1 2049 36 discriminator 1 view .LVU1757
 5583 042e AB42     		cmp	r3, r5
 5584 0430 40F3C681 		ble	.L483
 5585              	.L482:
2050:src/display.c **** 	  else {
 5586              		.loc 1 2050 6 is_stmt 1 view .LVU1758
2050:src/display.c **** 	  else {
 5587              		.loc 1 2050 26 is_stmt 0 view .LVU1759
 5588 0434 844B     		ldr	r3, .L678+4
 5589 0436 1B68     		ldr	r3, [r3]
 5590 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2050:src/display.c **** 	  else {
 5591              		.loc 1 2050 35 view .LVU1760
 5592 043c 13F0100F 		tst	r3, #16
 5593 0440 14BF     		ite	ne
 5594 0442 0327     		movne	r7, #3
 5595              	.LVL598:
2050:src/display.c **** 	  else {
 5596              		.loc 1 2050 35 view .LVU1761
 5597 0444 0227     		moveq	r7, #2
 5598 0446 0022     		movs	r2, #0
 5599 0448 7FE6     		b	.L481
 5600              	.LVL599:
 5601              	.L664:
2050:src/display.c **** 	  else {
 5602              		.loc 1 2050 35 view .LVU1762
 5603 044a 013D     		subs	r5, r5, #1
 5604 044c 7219     		adds	r2, r6, r5
 5605              	.L474:
2029:src/display.c **** 	    exp--;
 5606              		.loc 1 2029 4 is_stmt 1 discriminator 1 view .LVU1763
2030:src/display.c **** 	  while (*++q == '0');
 5607              		.loc 1 2030 6 discriminator 1 view .LVU1764
 5608 044e 951B     		subs	r5, r2, r6
 5609              	.LVL600:
2031:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5610              		.loc 1 2031 10 discriminator 1 view .LVU1765
2031:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5611              		.loc 1 2031 11 is_stmt 0 discriminator 1 view .LVU1766
 5612 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccobNVTR.s 			page 181


 5613              	.LVL601:
2031:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5614              		.loc 1 2031 4 discriminator 1 view .LVU1767
 5615 0454 302B     		cmp	r3, #48
 5616 0456 FAD0     		beq	.L474
2032:src/display.c **** 	    *p++ = *q++;
 5617              		.loc 1 2032 10 is_stmt 1 view .LVU1768
 5618 0458 A3F13002 		sub	r2, r3, #48
 5619 045c 092A     		cmp	r2, #9
 5620 045e 3FF66EAE 		bhi	.L475
1895:src/display.c **** 	char *r;
 5621              		.loc 1 1895 8 is_stmt 0 view .LVU1769
 5622 0462 4A46     		mov	r2, r9
 5623              	.LVL602:
 5624              	.L476:
2033:src/display.c **** 	} else {
 5625              		.loc 1 2033 6 is_stmt 1 view .LVU1770
2033:src/display.c **** 	} else {
 5626              		.loc 1 2033 11 is_stmt 0 view .LVU1771
 5627 0464 02F8013B 		strb	r3, [r2], #1
 5628              	.LVL603:
2032:src/display.c **** 	    *p++ = *q++;
 5629              		.loc 1 2032 10 is_stmt 1 view .LVU1772
2032:src/display.c **** 	    *p++ = *q++;
 5630              		.loc 1 2032 11 is_stmt 0 view .LVU1773
 5631 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2032:src/display.c **** 	    *p++ = *q++;
 5632              		.loc 1 2032 10 view .LVU1774
 5633 046c A3F13001 		sub	r1, r3, #48
 5634 0470 0929     		cmp	r1, #9
 5635 0472 F7D9     		bls	.L476
 5636 0474 63E6     		b	.L475
 5637              	.LVL604:
 5638              	.L662:
2023:src/display.c **** 	  q++;
 5639              		.loc 1 2023 4 is_stmt 1 view .LVU1775
2024:src/display.c **** 	} else if (*q == '+')
 5640              		.loc 1 2024 4 view .LVU1776
2023:src/display.c **** 	  q++;
 5641              		.loc 1 2023 13 is_stmt 0 view .LVU1777
 5642 0476 4FF0010E 		mov	lr, #1
 5643 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2024:src/display.c **** 	} else if (*q == '+')
 5644              		.loc 1 2024 5 view .LVU1778
 5645 047c 7644     		add	r6, r6, lr
 5646              	.LVL605:
2024:src/display.c **** 	} else if (*q == '+')
 5647              		.loc 1 2024 5 view .LVU1779
 5648 047e 35E6     		b	.L470
 5649              	.LVL606:
 5650              	.L660:
1992:src/display.c **** 	  trimzeros = 1;
 5651              		.loc 1 1992 4 is_stmt 1 view .LVU1780
1992:src/display.c **** 	  trimzeros = 1;
 5652              		.loc 1 1992 11 is_stmt 0 view .LVU1781
 5653 0480 3046     		mov	r0, r6
 5654 0482 FFF7FEFF 		bl	std_round_fix
ARM GAS  /tmp/ccobNVTR.s 			page 182


 5655              	.LVL607:
1994:src/display.c **** 	} else if (dd >= *display_digits)
 5656              		.loc 1 1994 7 view .LVU1782
 5657 0486 009B     		ldr	r3, [sp]
 5658 0488 1D68     		ldr	r5, [r3]
1993:src/display.c **** 	  dd = *display_digits - 1;
 5659              		.loc 1 1993 14 view .LVU1783
 5660 048a 0123     		movs	r3, #1
1992:src/display.c **** 	  trimzeros = 1;
 5661              		.loc 1 1992 11 view .LVU1784
 5662 048c 0746     		mov	r7, r0
 5663              	.LVL608:
1993:src/display.c **** 	  dd = *display_digits - 1;
 5664              		.loc 1 1993 4 is_stmt 1 view .LVU1785
1994:src/display.c **** 	} else if (dd >= *display_digits)
 5665              		.loc 1 1994 4 view .LVU1786
1994:src/display.c **** 	} else if (dd >= *display_digits)
 5666              		.loc 1 1994 7 is_stmt 0 view .LVU1787
 5667 048e 05F1FF3A 		add	r10, r5, #-1
 5668              	.LVL609:
1993:src/display.c **** 	  dd = *display_digits - 1;
 5669              		.loc 1 1993 14 view .LVU1788
 5670 0492 0193     		str	r3, [sp, #4]
 5671              	.LVL610:
1993:src/display.c **** 	  dd = *display_digits - 1;
 5672              		.loc 1 1993 14 view .LVU1789
 5673 0494 00E6     		b	.L464
 5674              	.LVL611:
 5675              	.L668:
2243:src/display.c **** 	  } else if (c == ',') {
 5676              		.loc 1 2243 6 is_stmt 1 view .LVU1790
2243:src/display.c **** 	  } else if (c == ',') {
 5677              		.loc 1 2243 12 is_stmt 0 view .LVU1791
 5678 0496 2246     		mov	r2, r4
 5679              	.LVL612:
2243:src/display.c **** 	  } else if (c == ',') {
 5680              		.loc 1 2243 12 view .LVU1792
 5681 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5682 049c 0193     		str	r3, [sp, #4]
 5683 049e A6F10900 		sub	r0, r6, #9
 5684 04a2 FFF7FEFF 		bl	set_decimal
 5685              	.LVL613:
 5686 04a6 019B     		ldr	r3, [sp, #4]
 5687 04a8 0446     		mov	r4, r0
 5688              	.LVL614:
 5689              	.L546:
2241:src/display.c **** 	  if (c == '.') {
 5690              		.loc 1 2241 53 is_stmt 1 view .LVU1793
2241:src/display.c **** 	  if (c == '.') {
 5691              		.loc 1 2241 12 view .LVU1794
2241:src/display.c **** 	  if (c == '.') {
 5692              		.loc 1 2241 18 is_stmt 0 view .LVU1795
 5693 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5694              	.LVL615:
2241:src/display.c **** 	  if (c == '.') {
 5695              		.loc 1 2241 2 view .LVU1796
 5696 04ae 002A     		cmp	r2, #0
ARM GAS  /tmp/ccobNVTR.s 			page 183


 5697 04b0 7FF413AF 		bne	.L552
 5698 04b4 22E7     		b	.L651
 5699              	.L669:
2245:src/display.c **** 	  } else {
 5700              		.loc 1 2245 6 is_stmt 1 view .LVU1797
2245:src/display.c **** 	  } else {
 5701              		.loc 1 2245 12 is_stmt 0 view .LVU1798
 5702 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5703              	.LVL616:
 5704              	.LBB390:
 5705              	.LBI381:
 362:src/display.c ****   if (sep == SEP_NONE)
 5706              		.loc 1 362 14 is_stmt 1 view .LVU1799
 5707              	.LBB384:
 363:src/display.c ****     return res;
 5708              		.loc 1 363 3 view .LVU1800
 363:src/display.c ****     return res;
 5709              		.loc 1 363 6 is_stmt 0 view .LVU1801
 5710 04ba 0029     		cmp	r1, #0
 5711 04bc F5D0     		beq	.L546
 365:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5712              		.loc 1 365 3 is_stmt 1 view .LVU1802
 365:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5713              		.loc 1 365 6 is_stmt 0 view .LVU1803
 5714 04be 002C     		cmp	r4, #0
 5715 04c0 00F0F281 		beq	.L548
 366:src/display.c ****     else *res++ = '.';
 5716              		.loc 1 366 5 is_stmt 1 view .LVU1804
 366:src/display.c ****     else *res++ = '.';
 5717              		.loc 1 366 8 is_stmt 0 view .LVU1805
 5718 04c4 0129     		cmp	r1, #1
 366:src/display.c ****     else *res++ = '.';
 5719              		.loc 1 366 27 is_stmt 1 view .LVU1806
 5720              	.LVL617:
 367:src/display.c ****   } else {
 5721              		.loc 1 367 10 view .LVU1807
 367:src/display.c ****   } else {
 5722              		.loc 1 367 17 is_stmt 0 view .LVU1808
 5723 04c6 18BF     		it	ne
 5724 04c8 2E22     		movne	r2, #46
 5725              	.LVL618:
 367:src/display.c ****   } else {
 5726              		.loc 1 367 17 view .LVU1809
 5727 04ca 04F8012B 		strb	r2, [r4], #1
 5728              	.LVL619:
 367:src/display.c ****   } else {
 5729              		.loc 1 367 17 view .LVU1810
 5730 04ce ECE7     		b	.L546
 5731              	.LVL620:
 5732              	.L550:
 367:src/display.c ****   } else {
 5733              		.loc 1 367 17 view .LVU1811
 5734              	.LBE384:
 5735              	.LBE390:
 5736              	.LBB391:
 5737              	.LBB389:
 404:src/display.c ****   return res;
ARM GAS  /tmp/ccobNVTR.s 			page 184


 5738              		.loc 1 404 8 view .LVU1812
 5739 04d0 1146     		mov	r1, r2
 5740 04d2 3046     		mov	r0, r6
 5741 04d4 0193     		str	r3, [sp, #4]
 404:src/display.c ****   return res;
 5742              		.loc 1 404 8 is_stmt 1 view .LVU1813
 5743 04d6 FFF7FEFF 		bl	set_dig
 5744              	.LVL621:
 404:src/display.c ****   return res;
 5745              		.loc 1 404 8 is_stmt 0 view .LVU1814
 5746 04da 019B     		ldr	r3, [sp, #4]
 5747 04dc 08E7     		b	.L551
 5748              	.LVL622:
 5749              	.L671:
 404:src/display.c ****   return res;
 5750              		.loc 1 404 8 view .LVU1815
 5751              	.LBE389:
 5752              	.LBE391:
2264:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5753              		.loc 1 2264 21 discriminator 1 view .LVU1816
 5754 04de 002C     		cmp	r4, #0
 5755 04e0 7FF418AF 		bne	.L554
2265:src/display.c **** 	*display_digits = odig;
 5756              		.loc 1 2265 4 is_stmt 1 view .LVU1817
2265:src/display.c **** 	*display_digits = odig;
 5757              		.loc 1 2265 33 is_stmt 0 view .LVU1818
 5758 04e4 009B     		ldr	r3, [sp]
 5759 04e6 1868     		ldr	r0, [r3]
2265:src/display.c **** 	*display_digits = odig;
 5760              		.loc 1 2265 4 view .LVU1819
 5761 04e8 594B     		ldr	r3, .L678+12
2265:src/display.c **** 	*display_digits = odig;
 5762              		.loc 1 2265 33 view .LVU1820
 5763 04ea 0138     		subs	r0, r0, #1
2265:src/display.c **** 	*display_digits = odig;
 5764              		.loc 1 2265 4 view .LVU1821
 5765 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5766 04ee 2246     		mov	r2, r4
 5767 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5768 04f4 FFF7FEFF 		bl	set_decimal
 5769              	.LVL623:
 5770 04f8 0CE7     		b	.L554
 5771              	.L670:
2262:src/display.c **** #endif
 5772              		.loc 1 2262 4 view .LVU1822
 5773 04fa 2846     		mov	r0, r5
 5774 04fc 2246     		mov	r2, r4
 5775 04fe 0021     		movs	r1, #0
 5776 0500 0193     		str	r3, [sp, #4]
2262:src/display.c **** #endif
 5777              		.loc 1 2262 4 is_stmt 1 view .LVU1823
 5778 0502 FFF7FEFF 		bl	set_exp
 5779              	.LVL624:
 5780 0506 019B     		ldr	r3, [sp, #4]
 5781 0508 FFE6     		b	.L553
 5782              	.LVL625:
 5783              	.L580:
ARM GAS  /tmp/ccobNVTR.s 			page 185


2184:src/display.c **** 	  case -1:
 5784              		.loc 1 2184 16 is_stmt 0 view .LVU1824
 5785 050a 0227     		movs	r7, #2
 5786 050c 4146     		mov	r1, r8
 5787              	.LVL626:
 5788              	.L537:
2193:src/display.c **** 	    odig++;
 5789              		.loc 1 2193 6 is_stmt 1 view .LVU1825
2193:src/display.c **** 	    odig++;
 5790              		.loc 1 2193 13 is_stmt 0 view .LVU1826
 5791 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5792              	.LVL627:
2193:src/display.c **** 	    odig++;
 5793              		.loc 1 2193 13 view .LVU1827
 5794 0512 01F8013B 		strb	r3, [r1], #1
 5795              	.LVL628:
2194:src/display.c **** 	    dd--;
 5796              		.loc 1 2194 6 is_stmt 1 view .LVU1828
2195:src/display.c **** 	    exp--;
 5797              		.loc 1 2195 6 view .LVU1829
2195:src/display.c **** 	    exp--;
 5798              		.loc 1 2195 8 is_stmt 0 view .LVU1830
 5799 0516 0AF1FF3A 		add	r10, r10, #-1
 5800              	.LVL629:
2196:src/display.c **** 	  case 0:
 5801              		.loc 1 2196 6 is_stmt 1 view .LVU1831
2196:src/display.c **** 	  case 0:
 5802              		.loc 1 2196 9 is_stmt 0 view .LVU1832
 5803 051a 013D     		subs	r5, r5, #1
 5804              	.LVL630:
2196:src/display.c **** 	  case 0:
 5805              		.loc 1 2196 9 view .LVU1833
 5806 051c A5E6     		b	.L498
 5807              	.LVL631:
 5808              	.L493:
2082:src/display.c **** 
 5809              		.loc 1 2082 2 is_stmt 1 view .LVU1834
2082:src/display.c **** 
 5810              		.loc 1 2082 45 view .LVU1835
2082:src/display.c **** 
 5811              		.loc 1 2082 2 is_stmt 0 view .LVU1836
 5812 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5813 0522 002A     		cmp	r2, #0
 5814 0524 7FF43CAE 		bne	.L556
 5815              	.LVL632:
 5816              	.L500:
2147:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5817              		.loc 1 2147 4 is_stmt 1 view .LVU1837
2148:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5818              		.loc 1 2148 4 view .LVU1838
2148:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5819              		.loc 1 2148 7 is_stmt 0 view .LVU1839
 5820 0528 002D     		cmp	r5, #0
 5821 052a C0F21081 		blt	.L520
2148:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5822              		.loc 1 2148 7 view .LVU1840
 5823 052e 6B1C     		adds	r3, r5, #1
ARM GAS  /tmp/ccobNVTR.s 			page 186


2150:src/display.c **** 		*obp++ = ',';
 5824              		.loc 1 2150 31 view .LVU1841
 5825 0530 DFF818C1 		ldr	ip, .L678+8
 5826 0534 0293     		str	r3, [sp, #8]
 5827 0536 09EB0300 		add	r0, r9, r3
2084:src/display.c **** 	switch (mode) {
 5828              		.loc 1 2084 4 view .LVU1842
 5829 053a 4F46     		mov	r7, r9
1889:src/display.c **** 	int odig = 0;
 5830              		.loc 1 1889 15 view .LVU1843
 5831 053c 4146     		mov	r1, r8
 5832 053e 0394     		str	r4, [sp, #12]
 5833 0540 05E0     		b	.L521
 5834              	.LVL633:
 5835              	.L524:
2151:src/display.c **** 	      *obp++ = *p++;
 5836              		.loc 1 2151 3 is_stmt 1 view .LVU1844
2150:src/display.c **** 		*obp++ = ',';
 5837              		.loc 1 2150 18 is_stmt 0 view .LVU1845
 5838 0542 022A     		cmp	r2, #2
2151:src/display.c **** 	      *obp++ = *p++;
 5839              		.loc 1 2151 10 view .LVU1846
 5840 0544 05BF     		ittet	eq
 5841 0546 2C23     		moveq	r3, #44
 5842 0548 4B70     		strbeq	r3, [r1, #1]
2152:src/display.c **** 	      odig++;
 5843              		.loc 1 2152 12 view .LVU1847
 5844 054a 0131     		addne	r1, r1, #1
 5845              	.LVL634:
2151:src/display.c **** 	      *obp++ = *p++;
 5846              		.loc 1 2151 7 view .LVU1848
 5847 054c 0231     		addeq	r1, r1, #2
 5848              	.LVL635:
 5849              	.L521:
2152:src/display.c **** 	      odig++;
 5850              		.loc 1 2152 8 is_stmt 1 discriminator 2 view .LVU1849
2152:src/display.c **** 	      odig++;
 5851              		.loc 1 2152 15 is_stmt 0 discriminator 2 view .LVU1850
 5852 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5853              	.LVL636:
2150:src/display.c **** 		*obp++ = ',';
 5854              		.loc 1 2150 8 is_stmt 1 discriminator 2 view .LVU1851
2152:src/display.c **** 	      odig++;
 5855              		.loc 1 2152 15 is_stmt 0 discriminator 2 view .LVU1852
 5856 0552 0B70     		strb	r3, [r1]
2153:src/display.c **** 	    }
 5857              		.loc 1 2153 8 is_stmt 1 discriminator 2 view .LVU1853
 5858              	.LVL637:
2149:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5859              		.loc 1 2149 24 discriminator 2 view .LVU1854
2149:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5860              		.loc 1 2149 16 discriminator 2 view .LVU1855
2150:src/display.c **** 		*obp++ = ',';
 5861              		.loc 1 2150 31 is_stmt 0 discriminator 2 view .LVU1856
 5862 0554 A9EB0703 		sub	r3, r9, r7
 5863 0558 2B44     		add	r3, r3, r5
 5864 055a 8CFB0342 		smull	r4, r2, ip, r3
ARM GAS  /tmp/ccobNVTR.s 			page 187


 5865 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5866 0562 02EB4202 		add	r2, r2, r2, lsl #1
2149:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5867              		.loc 1 2149 6 discriminator 2 view .LVU1857
 5868 0566 B842     		cmp	r0, r7
2150:src/display.c **** 		*obp++ = ',';
 5869              		.loc 1 2150 31 discriminator 2 view .LVU1858
 5870 0568 A3EB0202 		sub	r2, r3, r2
2149:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5871              		.loc 1 2149 6 discriminator 2 view .LVU1859
 5872 056c E9D1     		bne	.L524
2155:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5873              		.loc 1 2155 13 view .LVU1860
 5874 056e 2E23     		movs	r3, #46
2156:src/display.c **** 	      *obp++ = *p++;
 5875              		.loc 1 2156 6 view .LVU1861
 5876 0570 BAF1000F 		cmp	r10, #0
2155:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5877              		.loc 1 2155 13 view .LVU1862
 5878 0574 4B70     		strb	r3, [r1, #1]
 5879 0576 039C     		ldr	r4, [sp, #12]
 5880 0578 029F     		ldr	r7, [sp, #8]
 5881              	.LVL638:
2155:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5882              		.loc 1 2155 6 is_stmt 1 view .LVU1863
2155:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5883              		.loc 1 2155 10 is_stmt 0 view .LVU1864
 5884 057a 01F10203 		add	r3, r1, #2
 5885              	.LVL639:
2156:src/display.c **** 	      *obp++ = *p++;
 5886              		.loc 1 2156 6 is_stmt 1 view .LVU1865
2156:src/display.c **** 	      *obp++ = *p++;
 5887              		.loc 1 2156 16 view .LVU1866
2156:src/display.c **** 	      *obp++ = *p++;
 5888              		.loc 1 2156 6 is_stmt 0 view .LVU1867
 5889 057e 0CDD     		ble	.L525
 5890 0580 0131     		adds	r1, r1, #1
 5891 0582 00EB0A07 		add	r7, r0, r10
 5892              	.LVL640:
 5893              	.L526:
2157:src/display.c **** 	      odig++;
 5894              		.loc 1 2157 8 is_stmt 1 discriminator 4 view .LVU1868
2157:src/display.c **** 	      odig++;
 5895              		.loc 1 2157 15 is_stmt 0 discriminator 4 view .LVU1869
 5896 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5897              	.LVL641:
2157:src/display.c **** 	      odig++;
 5898              		.loc 1 2157 15 discriminator 4 view .LVU1870
 5899 058a 01F8012F 		strb	r2, [r1, #1]!
2158:src/display.c **** 	    }
 5900              		.loc 1 2158 8 is_stmt 1 discriminator 4 view .LVU1871
2156:src/display.c **** 	      *obp++ = *p++;
 5901              		.loc 1 2156 43 discriminator 4 view .LVU1872
2156:src/display.c **** 	      *obp++ = *p++;
 5902              		.loc 1 2156 16 discriminator 4 view .LVU1873
2156:src/display.c **** 	      *obp++ = *p++;
 5903              		.loc 1 2156 6 is_stmt 0 discriminator 4 view .LVU1874
ARM GAS  /tmp/ccobNVTR.s 			page 188


 5904 058e 8742     		cmp	r7, r0
 5905 0590 F9D1     		bne	.L526
 5906 0592 029A     		ldr	r2, [sp, #8]
 5907 0594 5244     		add	r2, r2, r10
 5908 0596 5344     		add	r3, r3, r10
 5909              	.LVL642:
2156:src/display.c **** 	      *obp++ = *p++;
 5910              		.loc 1 2156 6 discriminator 4 view .LVU1875
 5911 0598 1746     		mov	r7, r2
 5912              	.LVL643:
 5913              	.L525:
2175:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5914              		.loc 1 2175 4 is_stmt 1 view .LVU1876
2175:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5915              		.loc 1 2175 7 is_stmt 0 view .LVU1877
 5916 059a 019A     		ldr	r2, [sp, #4]
 5917 059c 002A     		cmp	r2, #0
 5918 059e 40F0C480 		bne	.L531
1891:src/display.c **** 	int j;
 5919              		.loc 1 1891 6 view .LVU1878
 5920 05a2 9346     		mov	fp, r2
 5921 05a4 7CE6     		b	.L509
 5922              	.LVL644:
 5923              	.L657:
1952:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5924              		.loc 1 1952 4 is_stmt 1 view .LVU1879
 5925 05a6 2B4A     		ldr	r2, .L678+16
 5926 05a8 3146     		mov	r1, r6
 5927 05aa 3046     		mov	r0, r6
 5928 05ac FFF7FEFF 		bl	decNumberNormalize
 5929              	.LVL645:
1953:src/display.c **** 	  z->exponent = 0;
 5930              		.loc 1 1953 4 view .LVU1880
1953:src/display.c **** 	  z->exponent = 0;
 5931              		.loc 1 1953 22 is_stmt 0 view .LVU1881
 5932 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5933 05b4 03EB020A 		add	r10, r3, r2
1953:src/display.c **** 	  z->exponent = 0;
 5934              		.loc 1 1953 8 view .LVU1882
 5935 05b8 0AF1FF33 		add	r3, r10, #-1
1954:src/display.c **** 	}
 5936              		.loc 1 1954 16 view .LVU1883
 5937 05bc C6F804B0 		str	fp, [r6, #4]
1953:src/display.c **** 	  z->exponent = 0;
 5938              		.loc 1 1953 8 view .LVU1884
 5939 05c0 0193     		str	r3, [sp, #4]
 5940              	.LVL646:
1954:src/display.c **** 	}
 5941              		.loc 1 1954 4 is_stmt 1 view .LVU1885
 5942 05c2 42E5     		b	.L448
 5943              	.LVL647:
 5944              	.L663:
2026:src/display.c **** 	for (; *q == '0'; q++);
 5945              		.loc 1 2026 4 view .LVU1886
2026:src/display.c **** 	for (; *q == '0'; q++);
 5946              		.loc 1 2026 4 is_stmt 0 view .LVU1887
 5947 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccobNVTR.s 			page 189


1909:src/display.c **** 	int trimzeros = 0;
 5948              		.loc 1 1909 6 view .LVU1888
 5949 05c6 4FF0000E 		mov	lr, #0
2026:src/display.c **** 	for (; *q == '0'; q++);
 5950              		.loc 1 2026 5 view .LVU1889
 5951 05ca 0136     		adds	r6, r6, #1
 5952              	.LVL648:
2026:src/display.c **** 	for (; *q == '0'; q++);
 5953              		.loc 1 2026 5 view .LVU1890
 5954 05cc 8EE5     		b	.L470
 5955              	.LVL649:
 5956              	.L665:
2042:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5957              		.loc 1 2042 6 is_stmt 1 view .LVU1891
2043:src/display.c **** 	      *p++ = *q++;
 5958              		.loc 1 2043 13 is_stmt 0 view .LVU1892
 5959 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2043:src/display.c **** 	      *p++ = *q++;
 5960              		.loc 1 2043 12 view .LVU1893
 5961 05d0 A3F13002 		sub	r2, r3, #48
 5962 05d4 092A     		cmp	r2, #9
2042:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5963              		.loc 1 2042 7 view .LVU1894
 5964 05d6 06F10106 		add	r6, r6, #1
 5965              	.LVL650:
2043:src/display.c **** 	      *p++ = *q++;
 5966              		.loc 1 2043 6 is_stmt 1 view .LVU1895
2043:src/display.c **** 	      *p++ = *q++;
 5967              		.loc 1 2043 12 view .LVU1896
 5968 05da 3FF6B0AD 		bhi	.L475
 5969              	.LVL651:
 5970              	.L480:
2044:src/display.c **** 	  }
 5971              		.loc 1 2044 8 view .LVU1897
2044:src/display.c **** 	  }
 5972              		.loc 1 2044 13 is_stmt 0 view .LVU1898
 5973 05de 01F8013B 		strb	r3, [r1], #1
 5974              	.LVL652:
2043:src/display.c **** 	      *p++ = *q++;
 5975              		.loc 1 2043 12 is_stmt 1 view .LVU1899
2043:src/display.c **** 	      *p++ = *q++;
 5976              		.loc 1 2043 13 is_stmt 0 view .LVU1900
 5977 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2043:src/display.c **** 	      *p++ = *q++;
 5978              		.loc 1 2043 12 view .LVU1901
 5979 05e6 A3F13002 		sub	r2, r3, #48
 5980 05ea 092A     		cmp	r2, #9
 5981 05ec F7D9     		bls	.L480
 5982 05ee A6E5     		b	.L475
 5983              	.LVL653:
 5984              	.L658:
1960:src/display.c **** 	    x[0] = '-';
 5985              		.loc 1 1960 34 discriminator 1 view .LVU1902
 5986 05f0 6B20     		movs	r0, #107
 5987 05f2 FFF7FEFF 		bl	get_user_flag
 5988              	.LVL654:
1960:src/display.c **** 	    x[0] = '-';
ARM GAS  /tmp/ccobNVTR.s 			page 190


 5989              		.loc 1 1960 31 discriminator 1 view .LVU1903
 5990 05f6 0028     		cmp	r0, #0
 5991 05f8 3FF439AD 		beq	.L450
1961:src/display.c **** 	    x[1] = '0';
 5992              		.loc 1 1961 6 is_stmt 1 view .LVU1904
1962:src/display.c **** 	  } else
 5993              		.loc 1 1962 6 view .LVU1905
1961:src/display.c **** 	    x[1] = '0';
 5994              		.loc 1 1961 11 is_stmt 0 view .LVU1906
 5995 05fc 43F22D03 		movw	r3, #12333
 5996 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
1962:src/display.c **** 	  } else
 5997              		.loc 1 1962 11 view .LVU1907
 5998 0604 36E5     		b	.L451
 5999              	.LVL655:
 6000              	.L661:
2019:src/display.c **** 	  CLR_MANT_SIGN;
 6001              		.loc 1 2019 4 is_stmt 1 view .LVU1908
 6002              	.LBB392:
 6003              	.LBI392:
 309:src/display.c **** {
 6004              		.loc 1 309 13 view .LVU1909
 6005              	.LBB393:
 311:src/display.c ****   clr_dot(EXP_SIGN);
 6006              		.loc 1 311 3 view .LVU1910
 312:src/display.c **** }
 6007              		.loc 1 312 3 view .LVU1911
 311:src/display.c ****   clr_dot(EXP_SIGN);
 6008              		.loc 1 311 27 is_stmt 0 view .LVU1912
 6009 0606 144B     		ldr	r3, .L678+20
 6010 0608 2022     		movs	r2, #32
 312:src/display.c **** }
 6011              		.loc 1 312 3 view .LVU1913
 6012 060a 8220     		movs	r0, #130
 311:src/display.c ****   clr_dot(EXP_SIGN);
 6013              		.loc 1 311 27 view .LVU1914
 6014 060c 1A70     		strb	r2, [r3]
 312:src/display.c **** }
 6015              		.loc 1 312 3 view .LVU1915
 6016 060e FFF7FEFF 		bl	clr_dot
 6017              	.LVL656:
 6018              	.LBE393:
 6019              	.LBE392:
2020:src/display.c **** 	}
 6020              		.loc 1 2020 4 is_stmt 1 view .LVU1916
 6021              	.LBB394:
 6022              	.LBI394:
 297:src/display.c **** {
 6023              		.loc 1 297 13 view .LVU1917
 6024              	.LBB395:
 299:src/display.c ****   clr_dot(MANT_SIGN);
 6025              		.loc 1 299 3 view .LVU1918
 299:src/display.c ****   clr_dot(MANT_SIGN);
 6026              		.loc 1 299 25 is_stmt 0 view .LVU1919
 6027 0612 124B     		ldr	r3, .L678+24
 6028 0614 2022     		movs	r2, #32
 300:src/display.c **** }
ARM GAS  /tmp/ccobNVTR.s 			page 191


 6029              		.loc 1 300 3 view .LVU1920
 6030 0616 8120     		movs	r0, #129
 299:src/display.c ****   clr_dot(MANT_SIGN);
 6031              		.loc 1 299 25 view .LVU1921
 6032 0618 1A70     		strb	r2, [r3]
 300:src/display.c **** }
 6033              		.loc 1 300 3 is_stmt 1 view .LVU1922
 6034 061a FFF7FEFF 		bl	clr_dot
 6035              	.LVL657:
 301:src/display.c **** 
 6036              		.loc 1 301 1 is_stmt 0 view .LVU1923
 6037 061e 5CE5     		b	.L468
 6038              	.LVL658:
 6039              	.L541:
 301:src/display.c **** 
 6040              		.loc 1 301 1 view .LVU1924
 6041              	.LBE395:
 6042              	.LBE394:
2235:src/display.c **** 	      SET_MANT_SIGN;
 6043              		.loc 1 2235 6 is_stmt 1 view .LVU1925
 6044 0620 0193     		str	r3, [sp, #4]
2235:src/display.c **** 	      SET_MANT_SIGN;
 6045              		.loc 1 2235 9 is_stmt 0 view .LVU1926
 6046 0622 002E     		cmp	r6, #0
 6047 0624 40F00281 		bne	.L544
2236:src/display.c **** 	    else
 6048              		.loc 1 2236 8 is_stmt 1 view .LVU1927
 6049              	.LBB396:
 6050              	.LBI396:
 291:src/display.c **** {
 6051              		.loc 1 291 13 view .LVU1928
 6052              	.LBB397:
 293:src/display.c ****   set_dot(MANT_SIGN);
 6053              		.loc 1 293 3 view .LVU1929
 293:src/display.c ****   set_dot(MANT_SIGN);
 6054              		.loc 1 293 25 is_stmt 0 view .LVU1930
 6055 0628 0C4A     		ldr	r2, .L678+24
 6056 062a 2D21     		movs	r1, #45
 294:src/display.c **** }
 6057              		.loc 1 294 3 view .LVU1931
 6058 062c 8120     		movs	r0, #129
 293:src/display.c ****   set_dot(MANT_SIGN);
 6059              		.loc 1 293 25 view .LVU1932
 6060 062e 1170     		strb	r1, [r2]
 294:src/display.c **** }
 6061              		.loc 1 294 3 is_stmt 1 view .LVU1933
 6062 0630 FFF7FEFF 		bl	set_dot
 6063              	.LVL659:
 294:src/display.c **** }
 6064              		.loc 1 294 3 is_stmt 0 view .LVU1934
 6065              	.LBE397:
 6066              	.LBE396:
2241:src/display.c **** 	  if (c == '.') {
 6067              		.loc 1 2241 12 is_stmt 1 view .LVU1935
2241:src/display.c **** 	  if (c == '.') {
 6068              		.loc 1 2241 18 is_stmt 0 view .LVU1936
 6069 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccobNVTR.s 			page 192


 6070              	.LVL660:
2241:src/display.c **** 	  if (c == '.') {
 6071              		.loc 1 2241 2 view .LVU1937
 6072 0638 019B     		ldr	r3, [sp, #4]
 6073 063a 002A     		cmp	r2, #0
 6074 063c 7FF446AE 		bne	.L543
 6075 0640 5FE6     		b	.L542
 6076              	.L679:
 6077 0642 00BF     		.align	2
 6078              	.L678:
 6079 0644 00000000 		.word	StateWhileOn
 6080 0648 00000000 		.word	main_ram
 6081 064c 56555555 		.word	1431655766
 6082 0650 00000000 		.word	.LANCHOR1
 6083 0654 00000000 		.word	Ctx
 6084 0658 00000000 		.word	LastDisplayedExponent
 6085 065c 00000000 		.word	LastDisplayedNumber
 6086              	.LVL661:
 6087              	.L659:
1969:src/display.c **** 	  return;
 6088              		.loc 1 1969 4 is_stmt 1 view .LVU1938
 6089              	.LBB398:
 6090              	.LBI398:
1757:src/display.c **** 	const int dbl = is_dblmode();
 6091              		.loc 1 1757 19 view .LVU1939
 6092              	.LBB399:
1758:src/display.c **** 	char *p;
 6093              		.loc 1 1758 2 view .LVU1940
1758:src/display.c **** 	char *p;
 6094              		.loc 1 1758 18 is_stmt 0 view .LVU1941
 6095 0660 FFF7FEFF 		bl	is_dblmode
 6096              	.LVL662:
1774:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6097              		.loc 1 1774 5 view .LVU1942
 6098 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6099 0668 2D2B     		cmp	r3, #45
1758:src/display.c **** 	char *p;
 6100              		.loc 1 1758 18 view .LVU1943
 6101 066a 0446     		mov	r4, r0
 6102              	.LVL663:
1759:src/display.c **** 	int i, j;
 6103              		.loc 1 1759 2 is_stmt 1 view .LVU1944
1760:src/display.c **** 	char *upper_str;
 6104              		.loc 1 1760 2 view .LVU1945
1761:src/display.c **** 	enum separator_modes separator_mode;
 6105              		.loc 1 1761 2 view .LVU1946
1762:src/display.c **** 	char decimal_mark;
 6106              		.loc 1 1762 2 view .LVU1947
1763:src/display.c **** 	char thousands_sep;
 6107              		.loc 1 1763 2 view .LVU1948
1764:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6108              		.loc 1 1764 2 view .LVU1949
1770:src/display.c **** #endif
 6109              		.loc 1 1770 2 view .LVU1950
1772:src/display.c **** 
 6110              		.loc 1 1772 2 view .LVU1951
1774:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
ARM GAS  /tmp/ccobNVTR.s 			page 193


 6111              		.loc 1 1774 2 view .LVU1952
1774:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6112              		.loc 1 1774 5 is_stmt 0 view .LVU1953
 6113 066c 00F02A81 		beq	.L674
1787:src/display.c **** 
 6114              		.loc 1 1787 16 view .LVU1954
 6115 0670 0026     		movs	r6, #0
 6116              	.LVL664:
 6117              	.L453:
1789:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6118              		.loc 1 1789 2 is_stmt 1 view .LVU1955
1789:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6119              		.loc 1 1789 6 is_stmt 0 view .LVU1956
 6120 0672 0021     		movs	r1, #0
 6121 0674 4046     		mov	r0, r8
 6122 0676 FFF7FEFF 		bl	find_char
 6123              	.LVL665:
1790:src/display.c **** 
 6124              		.loc 1 1790 2 is_stmt 1 view .LVU1957
1790:src/display.c **** 
 6125              		.loc 1 1790 23 is_stmt 0 view .LVU1958
 6126 067a A0EB0802 		sub	r2, r0, r8
1790:src/display.c **** 
 6127              		.loc 1 1790 2 view .LVU1959
 6128 067e C2F12202 		rsb	r2, r2, #34
 6129 0682 3021     		movs	r1, #48
 6130 0684 FFF7FEFF 		bl	xset
 6131              	.LVL666:
1792:src/display.c **** 	  separator_mode = SEP_COMMA;
 6132              		.loc 1 1792 2 is_stmt 1 view .LVU1960
1792:src/display.c **** 	  separator_mode = SEP_COMMA;
 6133              		.loc 1 1792 18 is_stmt 0 view .LVU1961
 6134 0688 B14A     		ldr	r2, .L680
1803:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6135              		.loc 1 1803 6 view .LVU1962
 6136 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1792:src/display.c **** 	  separator_mode = SEP_COMMA;
 6137              		.loc 1 1792 5 view .LVU1963
 6138 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1800:src/display.c **** 	}
 6139              		.loc 1 1800 18 view .LVU1964
 6140 0690 002A     		cmp	r2, #0
 6141 0692 15BF     		itete	ne
 6142 0694 4FF0020A 		movne	r10, #2
 6143 0698 2C27     		moveq	r7, #44
 6144 069a 2E27     		movne	r7, #46
 6145              	.LVL667:
1800:src/display.c **** 	}
 6146              		.loc 1 1800 18 view .LVU1965
 6147 069c 2E25     		moveq	r5, #46
 6148 069e 18BF     		it	ne
 6149 06a0 2C25     		movne	r5, #44
 6150              	.LVL668:
1803:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6151              		.loc 1 1803 2 is_stmt 1 view .LVU1966
1803:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6152              		.loc 1 1803 5 is_stmt 0 view .LVU1967
ARM GAS  /tmp/ccobNVTR.s 			page 194


 6153 06a2 13F0380F 		tst	r3, #56
 6154 06a6 40F0C880 		bne	.L675
1830:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6155              		.loc 1 1830 4 is_stmt 1 view .LVU1968
 6156              	.LVL669:
1831:src/display.c **** 	  x[1] = decimal_mark;
 6157              		.loc 1 1831 4 view .LVU1969
 6158 06aa 1022     		movs	r2, #16
 6159 06ac 08F10101 		add	r1, r8, #1
 6160 06b0 08F10200 		add	r0, r8, #2
 6161 06b4 FFF7FEFF 		bl	xcopy
 6162              	.LVL670:
1832:src/display.c **** 	  if (grouping) {
 6163              		.loc 1 1832 4 view .LVU1970
1834:src/display.c **** 	    x[5] = thousands_sep;
 6164              		.loc 1 1834 6 is_stmt 0 view .LVU1971
 6165 06b8 0D22     		movs	r2, #13
 6166 06ba 08F10501 		add	r1, r8, #5
 6167 06be 08F10600 		add	r0, r8, #6
1832:src/display.c **** 	  if (grouping) {
 6168              		.loc 1 1832 9 view .LVU1972
 6169 06c2 88F80150 		strb	r5, [r8, #1]
1833:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6170              		.loc 1 1833 4 is_stmt 1 view .LVU1973
1834:src/display.c **** 	    x[5] = thousands_sep;
 6171              		.loc 1 1834 6 view .LVU1974
 6172 06c6 FFF7FEFF 		bl	xcopy
 6173              	.LVL671:
1835:src/display.c **** 	    x += 9;
 6174              		.loc 1 1835 6 view .LVU1975
1836:src/display.c **** 	  }
 6175              		.loc 1 1836 8 is_stmt 0 view .LVU1976
 6176 06ca 08F10905 		add	r5, r8, #9
 6177              	.LVL672:
1835:src/display.c **** 	    x += 9;
 6178              		.loc 1 1835 11 view .LVU1977
 6179 06ce 88F80570 		strb	r7, [r8, #5]
1836:src/display.c **** 	  }
 6180              		.loc 1 1836 6 is_stmt 1 view .LVU1978
 6181              	.LVL673:
1839:src/display.c **** 	    if (exp < 0) {
 6182              		.loc 1 1839 4 view .LVU1979
1839:src/display.c **** 	    if (exp < 0) {
 6183              		.loc 1 1839 7 is_stmt 0 view .LVU1980
 6184 06d2 002C     		cmp	r4, #0
 6185 06d4 00F0F380 		beq	.L457
1840:src/display.c **** 	      x[9] = '-';
 6186              		.loc 1 1840 6 is_stmt 1 view .LVU1981
1840:src/display.c **** 	      x[9] = '-';
 6187              		.loc 1 1840 9 is_stmt 0 view .LVU1982
 6188 06d8 019B     		ldr	r3, [sp, #4]
1848:src/display.c **** 	  }
 6189              		.loc 1 1848 18 view .LVU1983
 6190 06da 9E49     		ldr	r1, .L680+4
1840:src/display.c **** 	      x[9] = '-';
 6191              		.loc 1 1840 9 view .LVU1984
 6192 06dc 002B     		cmp	r3, #0
ARM GAS  /tmp/ccobNVTR.s 			page 195


1841:src/display.c **** 	      exp = -exp;
 6193              		.loc 1 1841 8 is_stmt 1 view .LVU1985
1842:src/display.c **** 	    }
 6194              		.loc 1 1842 8 view .LVU1986
1842:src/display.c **** 	    }
 6195              		.loc 1 1842 12 is_stmt 0 view .LVU1987
 6196 06de BCBF     		itt	lt
 6197 06e0 5B42     		rsblt	r3, r3, #0
 6198 06e2 0193     		strlt	r3, [sp, #4]
 6199              	.LVL674:
1846:src/display.c **** 	    x[10] = '0' + j;
 6200              		.loc 1 1846 8 view .LVU1988
 6201 06e4 0198     		ldr	r0, [sp, #4]
 6202 06e6 9C4B     		ldr	r3, .L680+8
1841:src/display.c **** 	      exp = -exp;
 6203              		.loc 1 1841 13 view .LVU1989
 6204 06e8 B4BF     		ite	lt
 6205 06ea 2D22     		movlt	r2, #45
1845:src/display.c **** 	    j = exp / 1000;
 6206              		.loc 1 1845 13 view .LVU1990
 6207 06ec 2022     		movge	r2, #32
 6208 06ee 88F81220 		strb	r2, [r8, #18]
1846:src/display.c **** 	    x[10] = '0' + j;
 6209              		.loc 1 1846 6 is_stmt 1 view .LVU1991
1846:src/display.c **** 	    x[10] = '0' + j;
 6210              		.loc 1 1846 8 is_stmt 0 view .LVU1992
 6211 06f2 0246     		mov	r2, r0
 6212 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6213 06f8 9B09     		lsrs	r3, r3, #6
 6214              	.LVL675:
1847:src/display.c **** 	    exp -= 1000 * j;
 6215              		.loc 1 1847 6 is_stmt 1 view .LVU1993
1847:src/display.c **** 	    exp -= 1000 * j;
 6216              		.loc 1 1847 18 is_stmt 0 view .LVU1994
 6217 06fa 03F13002 		add	r2, r3, #48
1848:src/display.c **** 	  }
 6218              		.loc 1 1848 10 view .LVU1995
 6219 06fe 01FB0303 		mla	r3, r1, r3, r0
 6220              	.LVL676:
1848:src/display.c **** 	  }
 6221              		.loc 1 1848 10 view .LVU1996
 6222 0702 0193     		str	r3, [sp, #4]
 6223              	.LVL677:
1847:src/display.c **** 	    exp -= 1000 * j;
 6224              		.loc 1 1847 12 view .LVU1997
 6225 0704 88F81320 		strb	r2, [r8, #19]
1848:src/display.c **** 	  }
 6226              		.loc 1 1848 6 is_stmt 1 view .LVU1998
 6227              	.LVL678:
 6228              	.L459:
1854:src/display.c **** 	  *x = 0;
 6229              		.loc 1 1854 4 view .LVU1999
 6230 0708 0B22     		movs	r2, #11
 6231 070a 2946     		mov	r1, r5
 6232 070c 08F10A00 		add	r0, r8, #10
 6233 0710 FFF7FEFF 		bl	xcopy
 6234              	.LVL679:
ARM GAS  /tmp/ccobNVTR.s 			page 196


1855:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6235              		.loc 1 1855 4 view .LVU2000
1855:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6236              		.loc 1 1855 7 is_stmt 0 view .LVU2001
 6237 0714 0022     		movs	r2, #0
1856:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6238              		.loc 1 1856 4 view .LVU2002
 6239 0716 0198     		ldr	r0, [sp, #4]
1855:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6240              		.loc 1 1855 7 view .LVU2003
 6241 0718 88F80920 		strb	r2, [r8, #9]
1856:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6242              		.loc 1 1856 4 is_stmt 1 view .LVU2004
 6243 071c 0121     		movs	r1, #1
 6244 071e FFF7FEFF 		bl	set_exp
 6245              	.LVL680:
1857:src/display.c **** 	}
 6246              		.loc 1 1857 4 view .LVU2005
1857:src/display.c **** 	}
 6247              		.loc 1 1857 4 is_stmt 0 view .LVU2006
 6248 0722 A8EB0606 		sub	r6, r8, r6
 6249              	.LVL681:
1857:src/display.c **** 	}
 6250              		.loc 1 1857 6 view .LVU2007
 6251 0726 0924     		movs	r4, #9
 6252              	.LVL682:
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6253              		.loc 1 1860 11 is_stmt 1 view .LVU2008
 6254 0728 9AE0     		b	.L460
 6255              	.LVL683:
 6256              	.L531:
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6257              		.loc 1 1860 11 is_stmt 0 view .LVU2009
 6258              	.LBE399:
 6259              	.LBE398:
2176:src/display.c **** 	      obp--;
 6260              		.loc 1 2176 12 is_stmt 1 view .LVU2010
 6261 072a 4345     		cmp	r3, r8
 6262 072c 88BF     		it	hi
 6263 072e 1A46     		movhi	r2, r3
 6264 0730 7FF6B6AD 		bls	.L509
 6265              	.L533:
2177:src/display.c **** 	      odig--;
 6266              		.loc 1 2177 8 discriminator 1 view .LVU2011
 6267 0734 1346     		mov	r3, r2
 6268              	.LVL684:
2177:src/display.c **** 	      odig--;
 6269              		.loc 1 2177 8 is_stmt 0 discriminator 1 view .LVU2012
 6270 0736 013A     		subs	r2, r2, #1
 6271              	.LVL685:
2178:src/display.c **** 	    }
 6272              		.loc 1 2178 8 is_stmt 1 discriminator 1 view .LVU2013
2176:src/display.c **** 	      obp--;
 6273              		.loc 1 2176 21 is_stmt 0 discriminator 1 view .LVU2014
 6274 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6275 073c 3029     		cmp	r1, #48
 6276 073e 7FF4AFAD 		bne	.L509
ARM GAS  /tmp/ccobNVTR.s 			page 197


2176:src/display.c **** 	      obp--;
 6277              		.loc 1 2176 12 view .LVU2015
 6278 0742 9045     		cmp	r8, r2
2178:src/display.c **** 	    }
 6279              		.loc 1 2178 12 view .LVU2016
 6280 0744 07F1FF37 		add	r7, r7, #-1
 6281              	.LVL686:
2176:src/display.c **** 	      obp--;
 6282              		.loc 1 2176 12 is_stmt 1 view .LVU2017
 6283 0748 F4D1     		bne	.L533
 6284 074a 4346     		mov	r3, r8
 6285 074c A8E5     		b	.L509
 6286              	.LVL687:
 6287              	.L520:
2161:src/display.c **** 	    odig++;
 6288              		.loc 1 2161 6 view .LVU2018
2162:src/display.c **** 	    *obp++ = '.';
 6289              		.loc 1 2162 6 view .LVU2019
2163:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6290              		.loc 1 2163 6 view .LVU2020
2161:src/display.c **** 	    odig++;
 6291              		.loc 1 2161 13 is_stmt 0 view .LVU2021
 6292 074e 42F63063 		movw	r3, #11824
 6293 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2164:src/display.c **** 	      *obp++ = '0';
 6294              		.loc 1 2164 6 is_stmt 1 view .LVU2022
 6295              	.LVL688:
2164:src/display.c **** 	      *obp++ = '0';
 6296              		.loc 1 2164 20 view .LVU2023
2164:src/display.c **** 	      *obp++ = '0';
 6297              		.loc 1 2164 6 is_stmt 0 view .LVU2024
 6298 0756 6B1C     		adds	r3, r5, #1
 6299              	.LVL689:
2164:src/display.c **** 	      *obp++ = '0';
 6300              		.loc 1 2164 6 view .LVU2025
 6301 0758 00F0F280 		beq	.L578
 6302 075c C5F10101 		rsb	r1, r5, #1
2163:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6303              		.loc 1 2163 10 view .LVU2026
 6304 0760 0DF11603 		add	r3, sp, #22
 6305              	.LVL690:
2163:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6306              		.loc 1 2163 10 view .LVU2027
 6307 0764 4144     		add	r1, r1, r8
 6308 0766 1A46     		mov	r2, r3
2165:src/display.c **** 	      odig++;
 6309              		.loc 1 2165 15 view .LVU2028
 6310 0768 3020     		movs	r0, #48
 6311              	.LVL691:
 6312              	.L529:
2165:src/display.c **** 	      odig++;
 6313              		.loc 1 2165 8 is_stmt 1 discriminator 3 view .LVU2029
2165:src/display.c **** 	      odig++;
 6314              		.loc 1 2165 15 is_stmt 0 discriminator 3 view .LVU2030
 6315 076a 02F8010B 		strb	r0, [r2], #1
 6316              	.LVL692:
2166:src/display.c **** 	      dd--;
ARM GAS  /tmp/ccobNVTR.s 			page 198


 6317              		.loc 1 2166 8 is_stmt 1 discriminator 3 view .LVU2031
2167:src/display.c **** 	    }
 6318              		.loc 1 2167 8 discriminator 3 view .LVU2032
2164:src/display.c **** 	      *obp++ = '0';
 6319              		.loc 1 2164 25 discriminator 3 view .LVU2033
2164:src/display.c **** 	      *obp++ = '0';
 6320              		.loc 1 2164 20 discriminator 3 view .LVU2034
2164:src/display.c **** 	      *obp++ = '0';
 6321              		.loc 1 2164 6 is_stmt 0 discriminator 3 view .LVU2035
 6322 076e 8A42     		cmp	r2, r1
 6323 0770 FBD1     		bne	.L529
 6324 0772 AA44     		add	r10, r10, r5
 6325 0774 EA43     		mvns	r2, r5
 6326              	.LVL693:
2164:src/display.c **** 	      *obp++ = '0';
 6327              		.loc 1 2164 6 discriminator 3 view .LVU2036
 6328 0776 0AF1010A 		add	r10, r10, #1
 6329 077a 1344     		add	r3, r3, r2
 6330 077c 6F42     		rsbs	r7, r5, #0
 6331              	.L528:
 6332              	.LVL694:
2169:src/display.c **** 	      *obp++ = *p++;
 6333              		.loc 1 2169 12 is_stmt 1 view .LVU2037
 6334 077e BAF1000F 		cmp	r10, #0
2169:src/display.c **** 	      *obp++ = *p++;
 6335              		.loc 1 2169 15 is_stmt 0 view .LVU2038
 6336 0782 0AF1FF32 		add	r2, r10, #-1
 6337              	.LVL695:
2169:src/display.c **** 	      *obp++ = *p++;
 6338              		.loc 1 2169 12 view .LVU2039
 6339 0786 7FF708AF 		ble	.L525
 6340 078a 9A44     		add	r10, r10, r3
 6341 078c 0AF1FF30 		add	r0, r10, #-1
 6342 0790 013B     		subs	r3, r3, #1
 6343              	.LVL696:
 6344              	.L530:
2170:src/display.c **** 	      odig++;
 6345              		.loc 1 2170 8 is_stmt 1 view .LVU2040
2170:src/display.c **** 	      odig++;
 6346              		.loc 1 2170 15 is_stmt 0 view .LVU2041
 6347 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6348              	.LVL697:
2170:src/display.c **** 	      odig++;
 6349              		.loc 1 2170 15 view .LVU2042
 6350 0796 03F8011F 		strb	r1, [r3, #1]!
2171:src/display.c **** 	    }
 6351              		.loc 1 2171 8 is_stmt 1 view .LVU2043
2169:src/display.c **** 	      *obp++ = *p++;
 6352              		.loc 1 2169 12 view .LVU2044
2169:src/display.c **** 	      *obp++ = *p++;
 6353              		.loc 1 2169 12 is_stmt 0 view .LVU2045
 6354 079a 8342     		cmp	r3, r0
 6355 079c F9D1     		bne	.L530
 6356              	.LVL698:
2169:src/display.c **** 	      *obp++ = *p++;
 6357              		.loc 1 2169 12 view .LVU2046
 6358 079e 0137     		adds	r7, r7, #1
ARM GAS  /tmp/ccobNVTR.s 			page 199


 6359 07a0 1744     		add	r7, r7, r2
 6360 07a2 5346     		mov	r3, r10
 6361 07a4 F9E6     		b	.L525
 6362              	.LVL699:
 6363              	.L535:
2187:src/display.c **** 	    odig++;
 6364              		.loc 1 2187 6 is_stmt 1 view .LVU2047
2187:src/display.c **** 	    odig++;
 6365              		.loc 1 2187 13 is_stmt 0 view .LVU2048
 6366 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6367 07aa 8DF81430 		strb	r3, [sp, #20]
2188:src/display.c **** 	    dd--;
 6368              		.loc 1 2188 6 is_stmt 1 view .LVU2049
 6369              	.LVL700:
2189:src/display.c **** 	    exp--;
 6370              		.loc 1 2189 6 view .LVU2050
2189:src/display.c **** 	    exp--;
 6371              		.loc 1 2189 8 is_stmt 0 view .LVU2051
 6372 07ae 0AF1FF3A 		add	r10, r10, #-1
 6373              	.LVL701:
2190:src/display.c **** 	  case -2:
 6374              		.loc 1 2190 6 is_stmt 1 view .LVU2052
2190:src/display.c **** 	  case -2:
 6375              		.loc 1 2190 9 is_stmt 0 view .LVU2053
 6376 07b2 013D     		subs	r5, r5, #1
 6377              	.LVL702:
2190:src/display.c **** 	  case -2:
 6378              		.loc 1 2190 9 view .LVU2054
 6379 07b4 0327     		movs	r7, #3
2187:src/display.c **** 	    odig++;
 6380              		.loc 1 2187 17 view .LVU2055
 6381 07b6 0DF14909 		add	r9, sp, #73
 6382              	.LVL703:
2187:src/display.c **** 	    odig++;
 6383              		.loc 1 2187 10 view .LVU2056
 6384 07ba 0DF11501 		add	r1, sp, #21
 6385              	.LVL704:
2187:src/display.c **** 	    odig++;
 6386              		.loc 1 2187 10 view .LVU2057
 6387 07be A6E6     		b	.L537
 6388              	.LVL705:
 6389              	.L483:
2052:src/display.c **** 	    /* We might have push the fixed decimals off the
 6390              		.loc 1 2052 6 is_stmt 1 view .LVU2058
2056:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6391              		.loc 1 2056 6 view .LVU2059
2056:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6392              		.loc 1 2056 23 is_stmt 0 view .LVU2060
 6393 07c0 05EB0A03 		add	r3, r5, r10
2056:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6394              		.loc 1 2056 9 view .LVU2061
 6395 07c4 9E42     		cmp	r6, r3
2057:src/display.c **** 	  }
 6396              		.loc 1 2057 8 is_stmt 1 view .LVU2062
2057:src/display.c **** 	  }
 6397              		.loc 1 2057 30 is_stmt 0 view .LVU2063
 6398 07c6 DCBF     		itt	le
ARM GAS  /tmp/ccobNVTR.s 			page 200


 6399 07c8 06F1FF3A 		addle	r10, r6, #-1
 6400              	.LVL706:
2057:src/display.c **** 	  }
 6401              		.loc 1 2057 11 view .LVU2064
 6402 07cc AAEB050A 		suble	r10, r10, r5
 6403              	.LVL707:
2057:src/display.c **** 	  }
 6404              		.loc 1 2057 11 view .LVU2065
 6405 07d0 2A46     		mov	r2, r5
 6406 07d2 BAE4     		b	.L481
 6407              	.LVL708:
 6408              	.L575:
2093:src/display.c **** 	    case -1:
 6409              		.loc 1 2093 24 view .LVU2066
 6410 07d4 0227     		movs	r7, #2
 6411 07d6 4046     		mov	r0, r8
 6412              	.LVL709:
 6413              	.L508:
2102:src/display.c **** 	      odig++;
 6414              		.loc 1 2102 8 is_stmt 1 view .LVU2067
2102:src/display.c **** 	      odig++;
 6415              		.loc 1 2102 15 is_stmt 0 view .LVU2068
 6416 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6417              	.LVL710:
2102:src/display.c **** 	      odig++;
 6418              		.loc 1 2102 15 view .LVU2069
 6419 07dc 00F8013B 		strb	r3, [r0], #1
 6420              	.LVL711:
2103:src/display.c **** 	      dd--;
 6421              		.loc 1 2103 8 is_stmt 1 view .LVU2070
2104:src/display.c **** 	      exp--;
 6422              		.loc 1 2104 8 view .LVU2071
2105:src/display.c **** 	    case 0:
 6423              		.loc 1 2105 8 view .LVU2072
2105:src/display.c **** 	    case 0:
 6424              		.loc 1 2105 11 is_stmt 0 view .LVU2073
 6425 07e0 013D     		subs	r5, r5, #1
 6426              	.LVL712:
 6427              	.L505:
2107:src/display.c **** 	    };
 6428              		.loc 1 2107 8 is_stmt 1 view .LVU2074
2108:src/display.c **** 	    *obp++ = *p++;
 6429              		.loc 1 2108 7 view .LVU2075
2109:src/display.c **** 	    odig++;
 6430              		.loc 1 2109 6 view .LVU2076
2109:src/display.c **** 	    odig++;
 6431              		.loc 1 2109 17 is_stmt 0 view .LVU2077
 6432 07e2 4946     		mov	r1, r9
 6433              	.LVL713:
2109:src/display.c **** 	    odig++;
 6434              		.loc 1 2109 13 view .LVU2078
 6435 07e4 0346     		mov	r3, r0
 6436 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6437              	.LVL714:
2109:src/display.c **** 	    odig++;
 6438              		.loc 1 2109 13 view .LVU2079
 6439 07ea 03F802CB 		strb	ip, [r3], #2
ARM GAS  /tmp/ccobNVTR.s 			page 201


2110:src/display.c **** 	    *obp++ = '.';
 6440              		.loc 1 2110 6 is_stmt 1 view .LVU2080
2111:src/display.c **** 	    for (i=1; i<count; i++) {
 6441              		.loc 1 2111 6 view .LVU2081
 6442              	.LVL715:
2112:src/display.c **** 	      *obp++ = *p++;
 6443              		.loc 1 2112 6 is_stmt 0 view .LVU2082
 6444 07ee 012A     		cmp	r2, #1
2111:src/display.c **** 	    for (i=1; i<count; i++) {
 6445              		.loc 1 2111 13 view .LVU2083
 6446 07f0 4FF02E0C 		mov	ip, #46
 6447 07f4 80F801C0 		strb	ip, [r0, #1]
2112:src/display.c **** 	      *obp++ = *p++;
 6448              		.loc 1 2112 6 is_stmt 1 view .LVU2084
 6449              	.LVL716:
2112:src/display.c **** 	      *obp++ = *p++;
 6450              		.loc 1 2112 16 view .LVU2085
2112:src/display.c **** 	      *obp++ = *p++;
 6451              		.loc 1 2112 6 is_stmt 0 view .LVU2086
 6452 07f8 53DD     		ble	.L576
2112:src/display.c **** 	      *obp++ = *p++;
 6453              		.loc 1 2112 6 view .LVU2087
 6454 07fa 0130     		adds	r0, r0, #1
 6455 07fc 9144     		add	r9, r9, r2
 6456              	.LVL717:
 6457              	.L510:
2113:src/display.c **** 	      odig++;
 6458              		.loc 1 2113 8 is_stmt 1 discriminator 3 view .LVU2088
2113:src/display.c **** 	      odig++;
 6459              		.loc 1 2113 15 is_stmt 0 discriminator 3 view .LVU2089
 6460 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6461              	.LVL718:
2113:src/display.c **** 	      odig++;
 6462              		.loc 1 2113 15 discriminator 3 view .LVU2090
 6463 0802 00F801CF 		strb	ip, [r0, #1]!
2114:src/display.c **** 	    }
 6464              		.loc 1 2114 8 is_stmt 1 discriminator 3 view .LVU2091
2112:src/display.c **** 	      *obp++ = *p++;
 6465              		.loc 1 2112 25 discriminator 3 view .LVU2092
2112:src/display.c **** 	      *obp++ = *p++;
 6466              		.loc 1 2112 16 discriminator 3 view .LVU2093
2112:src/display.c **** 	      *obp++ = *p++;
 6467              		.loc 1 2112 6 is_stmt 0 discriminator 3 view .LVU2094
 6468 0806 4945     		cmp	r1, r9
 6469 0808 F9D1     		bne	.L510
 6470 080a 013A     		subs	r2, r2, #1
 6471              	.LVL719:
2112:src/display.c **** 	      *obp++ = *p++;
 6472              		.loc 1 2112 6 discriminator 3 view .LVU2095
 6473 080c 1344     		add	r3, r3, r2
 6474 080e 1744     		add	r7, r7, r2
2116:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6475              		.loc 1 2116 15 view .LVU2096
 6476 0810 4FF0010B 		mov	fp, #1
 6477 0814 44E5     		b	.L509
 6478              	.LVL720:
 6479              	.L506:
ARM GAS  /tmp/ccobNVTR.s 			page 202


2096:src/display.c **** 	      odig++;
 6480              		.loc 1 2096 8 is_stmt 1 view .LVU2097
2096:src/display.c **** 	      odig++;
 6481              		.loc 1 2096 15 is_stmt 0 view .LVU2098
 6482 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6483 081a 8DF81430 		strb	r3, [sp, #20]
2097:src/display.c **** 	      dd--;
 6484              		.loc 1 2097 8 is_stmt 1 view .LVU2099
 6485              	.LVL721:
2098:src/display.c **** 	      exp--;
 6486              		.loc 1 2098 8 view .LVU2100
2099:src/display.c **** 	    case -2:
 6487              		.loc 1 2099 8 view .LVU2101
2099:src/display.c **** 	    case -2:
 6488              		.loc 1 2099 11 is_stmt 0 view .LVU2102
 6489 081e 013D     		subs	r5, r5, #1
 6490              	.LVL722:
2099:src/display.c **** 	    case -2:
 6491              		.loc 1 2099 11 view .LVU2103
 6492 0820 0327     		movs	r7, #3
2096:src/display.c **** 	      odig++;
 6493              		.loc 1 2096 19 view .LVU2104
 6494 0822 0DF14909 		add	r9, sp, #73
 6495              	.LVL723:
2096:src/display.c **** 	      odig++;
 6496              		.loc 1 2096 12 view .LVU2105
 6497 0826 0DF11500 		add	r0, sp, #21
 6498              	.LVL724:
2096:src/display.c **** 	      odig++;
 6499              		.loc 1 2096 12 view .LVU2106
 6500 082a D5E7     		b	.L508
 6501              	.LVL725:
 6502              	.L544:
2238:src/display.c **** 	  }
 6503              		.loc 1 2238 8 is_stmt 1 view .LVU2107
 6504 082c 2D21     		movs	r1, #45
 6505 082e A6F10900 		sub	r0, r6, #9
 6506 0832 FFF7FEFF 		bl	set_dig
 6507              	.LVL726:
 6508 0836 019B     		ldr	r3, [sp, #4]
 6509 0838 43E5     		b	.L540
 6510              	.LVL727:
 6511              	.L675:
 6512              	.LBB408:
 6513              	.LBB406:
 6514              	.LBB400:
1805:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6515              		.loc 1 1805 4 view .LVU2108
1808:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6516              		.loc 1 1808 4 view .LVU2109
1808:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6517              		.loc 1 1808 14 is_stmt 0 view .LVU2110
 6518 083a 08F10306 		add	r6, r8, #3
 6519              	.LVL728:
1809:src/display.c **** 	  if (grouping) {
 6520              		.loc 1 1809 4 is_stmt 1 view .LVU2111
 6521 083e 4749     		ldr	r1, .L680+12
ARM GAS  /tmp/ccobNVTR.s 			page 203


 6522 0840 0D22     		movs	r2, #13
 6523 0842 3046     		mov	r0, r6
 6524 0844 FFF7FEFF 		bl	xcopy
 6525              	.LVL729:
1810:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6526              		.loc 1 1810 4 view .LVU2112
1811:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6527              		.loc 1 1811 6 view .LVU2113
 6528 0848 1322     		movs	r2, #19
 6529 084a 08EB0201 		add	r1, r8, r2
 6530 084e 08F11400 		add	r0, r8, #20
 6531 0852 FFF7FEFF 		bl	xcopy
 6532              	.LVL730:
1812:src/display.c **** 	    x += 3 + 13 + 7;
 6533              		.loc 1 1812 6 view .LVU2114
1813:src/display.c **** 	  }
 6534              		.loc 1 1813 8 is_stmt 0 view .LVU2115
 6535 0856 08F11705 		add	r5, r8, #23
 6536              	.LVL731:
1812:src/display.c **** 	    x += 3 + 13 + 7;
 6537              		.loc 1 1812 24 view .LVU2116
 6538 085a 88F81370 		strb	r7, [r8, #19]
1813:src/display.c **** 	  }
 6539              		.loc 1 1813 6 is_stmt 1 view .LVU2117
 6540              	.LVL732:
1826:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6541              		.loc 1 1826 4 view .LVU2118
1827:src/display.c **** 	}
 6542              		.loc 1 1827 4 view .LVU2119
1827:src/display.c **** 	}
 6543              		.loc 1 1827 6 is_stmt 0 view .LVU2120
 6544 085e 1B24     		movs	r4, #27
 6545              	.LVL733:
 6546              	.L460:
1827:src/display.c **** 	}
 6547              		.loc 1 1827 6 view .LVU2121
 6548              	.LBE400:
1861:src/display.c **** 	  }
 6549              		.loc 1 1861 6 is_stmt 1 view .LVU2122
 6550              	.LBB401:
 6551              	.LBI401:
 362:src/display.c ****   if (sep == SEP_NONE)
 6552              		.loc 1 362 14 view .LVU2123
 6553              	.LBB402:
 363:src/display.c ****     return res;
 6554              		.loc 1 363 3 view .LVU2124
 365:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6555              		.loc 1 365 3 view .LVU2125
 6556 0860 2046     		mov	r0, r4
 6557 0862 5146     		mov	r1, r10
 6558              	.LBE402:
 6559              	.LBE401:
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6560              		.loc 1 1860 38 is_stmt 0 view .LVU2126
 6561 0864 1B34     		adds	r4, r4, #27
 6562              	.LVL734:
 6563              	.LBB404:
ARM GAS  /tmp/ccobNVTR.s 			page 204


 6564              	.LBB403:
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6565              		.loc 1 1860 38 view .LVU2127
 6566 0866 FFF7FEFF 		bl	set_separator.part.0
 6567              	.LVL735:
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6568              		.loc 1 1860 38 view .LVU2128
 6569              	.LBE403:
 6570              	.LBE404:
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6571              		.loc 1 1860 36 is_stmt 1 view .LVU2129
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6572              		.loc 1 1860 11 view .LVU2130
1860:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6573              		.loc 1 1860 4 is_stmt 0 view .LVU2131
 6574 086a 512C     		cmp	r4, #81
 6575 086c F8DD     		ble	.L460
 6576 086e 6C1E     		subs	r4, r5, #1
 6577              	.LVL736:
 6578              	.L462:
1866:src/display.c **** 
 6579              		.loc 1 1866 4 is_stmt 1 view .LVU2132
 6580 0870 5846     		mov	r0, fp
 6581 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1865:src/display.c **** 	  set_dig(j, x[i]);
 6582              		.loc 1 1865 33 is_stmt 0 view .LVU2133
 6583 0876 0BF1090B 		add	fp, fp, #9
 6584              	.LVL737:
1866:src/display.c **** 
 6585              		.loc 1 1866 4 view .LVU2134
 6586 087a FFF7FEFF 		bl	set_dig
 6587              	.LVL738:
1865:src/display.c **** 	  set_dig(j, x[i]);
 6588              		.loc 1 1865 26 is_stmt 1 view .LVU2135
1865:src/display.c **** 	  set_dig(j, x[i]);
 6589              		.loc 1 1865 18 view .LVU2136
1865:src/display.c **** 	  set_dig(j, x[i]);
 6590              		.loc 1 1865 2 is_stmt 0 view .LVU2137
 6591 087e BBF16C0F 		cmp	fp, #108
 6592 0882 F5D1     		bne	.L462
1868:src/display.c **** 	set_status(upper_str - negative);
 6593              		.loc 1 1868 2 is_stmt 1 view .LVU2138
1868:src/display.c **** 	set_status(upper_str - negative);
 6594              		.loc 1 1868 5 is_stmt 0 view .LVU2139
 6595 0884 0023     		movs	r3, #0
1869:src/display.c ****       }
 6596              		.loc 1 1869 2 view .LVU2140
 6597 0886 3046     		mov	r0, r6
1868:src/display.c **** 	set_status(upper_str - negative);
 6598              		.loc 1 1868 5 view .LVU2141
 6599 0888 2B70     		strb	r3, [r5]
1869:src/display.c ****       }
 6600              		.loc 1 1869 2 is_stmt 1 view .LVU2142
 6601 088a FFF7FEFF 		bl	set_status
 6602              	.LVL739:
1870:src/display.c **** 
 6603              		.loc 1 1870 7 is_stmt 0 view .LVU2143
ARM GAS  /tmp/ccobNVTR.s 			page 205


 6604 088e 43E5     		b	.L441
 6605              	.LVL740:
 6606              	.L672:
1870:src/display.c **** 
 6607              		.loc 1 1870 7 view .LVU2144
 6608              	.LBE406:
 6609              	.LBE408:
1926:src/display.c **** 	      return;
 6610              		.loc 1 1926 8 is_stmt 1 view .LVU2145
 6611 0890 3046     		mov	r0, r6
 6612 0892 FFF7FEFF 		bl	set_x_hms
 6613              	.LVL741:
1927:src/display.c **** 	    }
 6614              		.loc 1 1927 8 view .LVU2146
 6615 0896 3FE5     		b	.L441
 6616              	.LVL742:
 6617              	.L573:
2088:src/display.c **** 	  if (count != *display_digits)
 6618              		.loc 1 2088 15 is_stmt 0 view .LVU2147
 6619 0898 3246     		mov	r2, r6
 6620 089a A3E4     		b	.L501
 6621              	.LVL743:
 6622              	.L574:
2093:src/display.c **** 	    case -1:
 6623              		.loc 1 2093 24 view .LVU2148
 6624 089c 0127     		movs	r7, #1
 6625 089e 4046     		mov	r0, r8
 6626 08a0 9FE7     		b	.L505
 6627              	.LVL744:
 6628              	.L576:
2116:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6629              		.loc 1 2116 15 view .LVU2149
 6630 08a2 4FF0010B 		mov	fp, #1
 6631 08a6 FBE4     		b	.L509
 6632              	.LVL745:
 6633              	.L548:
 6634              	.LBB409:
 6635              	.LBB385:
2116:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6636              		.loc 1 2116 15 view .LVU2150
 6637 08a8 3046     		mov	r0, r6
 6638 08aa 0193     		str	r3, [sp, #4]
 6639 08ac FFF7FEFF 		bl	set_separator.part.0
 6640              	.LVL746:
2116:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6641              		.loc 1 2116 15 view .LVU2151
 6642 08b0 019B     		ldr	r3, [sp, #4]
 6643 08b2 0446     		mov	r4, r0
 6644              	.LVL747:
2116:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6645              		.loc 1 2116 15 view .LVU2152
 6646 08b4 F9E5     		b	.L546
 6647              	.LVL748:
 6648              	.L486:
2116:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6649              		.loc 1 2116 15 view .LVU2153
 6650              	.LBE385:
ARM GAS  /tmp/ccobNVTR.s 			page 206


 6651              	.LBE409:
2066:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6652              		.loc 1 2066 4 is_stmt 1 view .LVU2154
2066:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6653              		.loc 1 2066 7 is_stmt 0 view .LVU2155
 6654 08b6 4B45     		cmp	r3, r9
 6655 08b8 7FF460AC 		bne	.L557
 6656 08bc 63E5     		b	.L558
 6657              	.LVL749:
 6658              	.L457:
 6659              	.LBB410:
 6660              	.LBB407:
1851:src/display.c **** 	    x[10] = '\0';
 6661              		.loc 1 1851 6 is_stmt 1 view .LVU2156
1852:src/display.c **** 	  }
 6662              		.loc 1 1852 6 view .LVU2157
1851:src/display.c **** 	    x[10] = '\0';
 6663              		.loc 1 1851 11 is_stmt 0 view .LVU2158
 6664 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6665 08c2 21E7     		b	.L459
 6666              	.LVL750:
 6667              	.L674:
 6668              	.LBB405:
1776:src/display.c **** 
 6669              		.loc 1 1776 4 is_stmt 1 view .LVU2159
1778:src/display.c **** 	  xcopy(x, small_minus, 4);
 6670              		.loc 1 1778 4 view .LVU2160
 6671 08c4 2222     		movs	r2, #34
 6672 08c6 0DF11501 		add	r1, sp, #21
 6673 08ca 06A8     		add	r0, sp, #24
 6674              	.LVL751:
1778:src/display.c **** 	  xcopy(x, small_minus, 4);
 6675              		.loc 1 1778 4 is_stmt 0 view .LVU2161
 6676 08cc FFF7FEFF 		bl	xcopy
 6677              	.LVL752:
1779:src/display.c **** 	  x += 4;
 6678              		.loc 1 1779 4 is_stmt 1 view .LVU2162
 6679 08d0 4046     		mov	r0, r8
 6680 08d2 2349     		ldr	r1, .L680+16
 6681 08d4 0422     		movs	r2, #4
 6682 08d6 FFF7FEFF 		bl	xcopy
 6683              	.LVL753:
1780:src/display.c **** 	  negative = 4;
 6684              		.loc 1 1780 4 view .LVU2163
1781:src/display.c **** #else
 6685              		.loc 1 1781 4 view .LVU2164
1780:src/display.c **** 	  negative = 4;
 6686              		.loc 1 1780 6 is_stmt 0 view .LVU2165
 6687 08da 0DF11808 		add	r8, sp, #24
 6688              	.LVL754:
1781:src/display.c **** #else
 6689              		.loc 1 1781 13 view .LVU2166
 6690 08de 0426     		movs	r6, #4
 6691              	.LVL755:
1781:src/display.c **** #else
 6692              		.loc 1 1781 13 view .LVU2167
 6693              	.LBE405:
ARM GAS  /tmp/ccobNVTR.s 			page 207


 6694 08e0 C7E6     		b	.L453
 6695              	.LVL756:
 6696              	.L511:
1781:src/display.c **** #else
 6697              		.loc 1 1781 13 view .LVU2168
 6698              	.LBE407:
 6699              	.LBE410:
2132:src/display.c **** 	    odig++;
 6700              		.loc 1 2132 6 is_stmt 1 view .LVU2169
2133:src/display.c **** 	    *obp++ = '.';
 6701              		.loc 1 2133 6 view .LVU2170
2134:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6702              		.loc 1 2134 6 view .LVU2171
2132:src/display.c **** 	    odig++;
 6703              		.loc 1 2132 13 is_stmt 0 view .LVU2172
 6704 08e2 42F63063 		movw	r3, #11824
2135:src/display.c **** 	      *obp++ = '0';
 6705              		.loc 1 2135 6 view .LVU2173
 6706 08e6 691C     		adds	r1, r5, #1
2132:src/display.c **** 	    odig++;
 6707              		.loc 1 2132 13 view .LVU2174
 6708 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2135:src/display.c **** 	      *obp++ = '0';
 6709              		.loc 1 2135 6 is_stmt 1 view .LVU2175
 6710              	.LVL757:
2135:src/display.c **** 	      *obp++ = '0';
 6711              		.loc 1 2135 20 view .LVU2176
2135:src/display.c **** 	      *obp++ = '0';
 6712              		.loc 1 2135 6 is_stmt 0 view .LVU2177
 6713 08ec 2CD0     		beq	.L577
 6714 08ee C5F10100 		rsb	r0, r5, #1
2134:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6715              		.loc 1 2134 10 view .LVU2178
 6716 08f2 0DF11603 		add	r3, sp, #22
 6717              	.LVL758:
2134:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6718              		.loc 1 2134 10 view .LVU2179
 6719 08f6 4044     		add	r0, r0, r8
 6720 08f8 1946     		mov	r1, r3
 6721              	.LVL759:
2136:src/display.c **** 	      odig++;
 6722              		.loc 1 2136 15 view .LVU2180
 6723 08fa 3027     		movs	r7, #48
 6724              	.LVL760:
 6725              	.L518:
2136:src/display.c **** 	      odig++;
 6726              		.loc 1 2136 8 is_stmt 1 discriminator 3 view .LVU2181
2136:src/display.c **** 	      odig++;
 6727              		.loc 1 2136 15 is_stmt 0 discriminator 3 view .LVU2182
 6728 08fc 01F8017B 		strb	r7, [r1], #1
 6729              	.LVL761:
2137:src/display.c **** 	    }
 6730              		.loc 1 2137 8 is_stmt 1 discriminator 3 view .LVU2183
2135:src/display.c **** 	      *obp++ = '0';
 6731              		.loc 1 2135 25 discriminator 3 view .LVU2184
2135:src/display.c **** 	      *obp++ = '0';
 6732              		.loc 1 2135 20 discriminator 3 view .LVU2185
ARM GAS  /tmp/ccobNVTR.s 			page 208


2135:src/display.c **** 	      *obp++ = '0';
 6733              		.loc 1 2135 6 is_stmt 0 discriminator 3 view .LVU2186
 6734 0900 8142     		cmp	r1, r0
 6735 0902 FBD1     		bne	.L518
 6736 0904 E943     		mvns	r1, r5
 6737              	.LVL762:
2135:src/display.c **** 	      *obp++ = '0';
 6738              		.loc 1 2135 6 discriminator 3 view .LVU2187
 6739 0906 0B44     		add	r3, r3, r1
 6740 0908 6F42     		rsbs	r7, r5, #0
 6741              	.L517:
 6742              	.LVL763:
2139:src/display.c **** 	      *obp++ = *p++;
 6743              		.loc 1 2139 16 is_stmt 1 view .LVU2188
2139:src/display.c **** 	      *obp++ = *p++;
 6744              		.loc 1 2139 6 is_stmt 0 view .LVU2189
 6745 090a 002A     		cmp	r2, #0
 6746 090c 7FF7C8AC 		ble	.L509
 6747 0910 02F1FF3C 		add	ip, r2, #-1
 6748 0914 9C44     		add	ip, ip, r3
 6749 0916 591E     		subs	r1, r3, #1
 6750              	.LVL764:
 6751              	.L519:
2140:src/display.c **** 	      odig++;
 6752              		.loc 1 2140 8 is_stmt 1 discriminator 3 view .LVU2190
2140:src/display.c **** 	      odig++;
 6753              		.loc 1 2140 15 is_stmt 0 discriminator 3 view .LVU2191
 6754 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6755              	.LVL765:
2140:src/display.c **** 	      odig++;
 6756              		.loc 1 2140 15 discriminator 3 view .LVU2192
 6757 091c 01F8010F 		strb	r0, [r1, #1]!
2141:src/display.c **** 	    }
 6758              		.loc 1 2141 8 is_stmt 1 discriminator 3 view .LVU2193
2139:src/display.c **** 	      *obp++ = *p++;
 6759              		.loc 1 2139 25 discriminator 3 view .LVU2194
 6760              	.LVL766:
2139:src/display.c **** 	      *obp++ = *p++;
 6761              		.loc 1 2139 16 discriminator 3 view .LVU2195
2139:src/display.c **** 	      *obp++ = *p++;
 6762              		.loc 1 2139 6 is_stmt 0 discriminator 3 view .LVU2196
 6763 0920 8C45     		cmp	ip, r1
 6764 0922 F9D1     		bne	.L519
 6765              	.LVL767:
2139:src/display.c **** 	      *obp++ = *p++;
 6766              		.loc 1 2139 6 discriminator 3 view .LVU2197
 6767 0924 1344     		add	r3, r3, r2
 6768              	.LVL768:
2139:src/display.c **** 	      *obp++ = *p++;
 6769              		.loc 1 2139 6 discriminator 3 view .LVU2198
 6770 0926 1744     		add	r7, r7, r2
 6771 0928 BAE4     		b	.L509
 6772              	.LVL769:
 6773              	.L673:
2082:src/display.c **** 
 6774              		.loc 1 2082 2 is_stmt 1 view .LVU2199
2082:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 209


 6775              		.loc 1 2082 40 is_stmt 0 view .LVU2200
 6776 092a 0AF10102 		add	r2, r10, #1
2082:src/display.c **** 
 6777              		.loc 1 2082 9 view .LVU2201
 6778 092e 09EB0203 		add	r3, r9, r2
 6779              	.LVL770:
2082:src/display.c **** 
 6780              		.loc 1 2082 45 is_stmt 1 view .LVU2202
2082:src/display.c **** 
 6781              		.loc 1 2082 2 is_stmt 0 view .LVU2203
 6782 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6783 0936 002A     		cmp	r2, #0
 6784 0938 3FF496AC 		beq	.L655
2071:src/display.c **** 	      extra_digits = 0;
 6785              		.loc 1 2071 37 view .LVU2204
 6786 093c 0227     		movs	r7, #2
 6787 093e 2FE4     		b	.L556
 6788              	.LVL771:
 6789              	.L578:
2162:src/display.c **** 	    *obp++ = '.';
 6790              		.loc 1 2162 10 view .LVU2205
 6791 0940 0127     		movs	r7, #1
2163:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6792              		.loc 1 2163 10 view .LVU2206
 6793 0942 0DF11603 		add	r3, sp, #22
 6794              	.LVL772:
2163:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6795              		.loc 1 2163 10 view .LVU2207
 6796 0946 1AE7     		b	.L528
 6797              	.LVL773:
 6798              	.L577:
2133:src/display.c **** 	    *obp++ = '.';
 6799              		.loc 1 2133 10 view .LVU2208
 6800 0948 0127     		movs	r7, #1
2134:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6801              		.loc 1 2134 10 view .LVU2209
 6802 094a 0DF11603 		add	r3, sp, #22
 6803              	.LVL774:
2134:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6804              		.loc 1 2134 10 view .LVU2210
 6805 094e DCE7     		b	.L517
 6806              	.L681:
 6807              		.align	2
 6808              	.L680:
 6809 0950 00000000 		.word	.LANCHOR1
 6810 0954 18FCFFFF 		.word	-1000
 6811 0958 D34D6210 		.word	274877907
 6812 095c 00000000 		.word	.LANCHOR14
 6813 0960 00000000 		.word	.LANCHOR13
 6814              		.cfi_endproc
 6815              	.LFE27:
 6817              		.section	.text.set_x,"ax",%progbits
 6818              		.align	1
 6819              		.p2align 2,,3
 6820              		.syntax unified
 6821              		.thumb
 6822              		.thumb_func
ARM GAS  /tmp/ccobNVTR.s 			page 210


 6823              		.fpu fpv4-sp-d16
 6825              	set_x:
 6826              	.LVL775:
 6827              	.LFB26:
1877:src/display.c **** 	decNumber z;
 6828              		.loc 1 1877 66 is_stmt 1 view -0
 6829              		.cfi_startproc
 6830              		@ args = 0, pretend = 0, frame = 40
 6831              		@ frame_needed = 0, uses_anonymous_args = 0
1878:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6832              		.loc 1 1878 2 view .LVU2212
1879:src/display.c **** 
 6833              		.loc 1 1879 2 view .LVU2213
1877:src/display.c **** 	decNumber z;
 6834              		.loc 1 1877 66 is_stmt 0 view .LVU2214
 6835 0000 30B5     		push	{r4, r5, lr}
 6836              		.cfi_def_cfa_offset 12
 6837              		.cfi_offset 4, -12
 6838              		.cfi_offset 5, -8
 6839              		.cfi_offset 14, -4
 6840 0002 8BB0     		sub	sp, sp, #44
 6841              		.cfi_def_cfa_offset 56
1879:src/display.c **** 
 6842              		.loc 1 1879 6 view .LVU2215
 6843 0004 0C23     		movs	r3, #12
1882:src/display.c **** 	else
 6844              		.loc 1 1882 4 view .LVU2216
 6845 0006 01AD     		add	r5, sp, #4
1877:src/display.c **** 	decNumber z;
 6846              		.loc 1 1877 66 view .LVU2217
 6847 0008 0C46     		mov	r4, r1
1879:src/display.c **** 
 6848              		.loc 1 1879 6 view .LVU2218
 6849 000a 0093     		str	r3, [sp]
1881:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6850              		.loc 1 1881 2 is_stmt 1 view .LVU2219
1882:src/display.c **** 	else
 6851              		.loc 1 1882 4 is_stmt 0 view .LVU2220
 6852 000c 2946     		mov	r1, r5
 6853              	.LVL776:
1881:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6854              		.loc 1 1881 5 view .LVU2221
 6855 000e 42B1     		cbz	r2, .L683
1882:src/display.c **** 	else
 6856              		.loc 1 1882 4 is_stmt 1 view .LVU2222
 6857 0010 FFF7FEFF 		bl	decimal128ToNumber
 6858              	.LVL777:
1885:src/display.c ****       }
 6859              		.loc 1 1885 2 view .LVU2223
 6860 0014 2146     		mov	r1, r4
 6861 0016 2846     		mov	r0, r5
 6862 0018 6A46     		mov	r2, sp
 6863 001a FFF7FEFF 		bl	set_x_dn
 6864              	.LVL778:
1886:src/display.c **** 
 6865              		.loc 1 1886 7 is_stmt 0 view .LVU2224
 6866 001e 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccobNVTR.s 			page 211


 6867              		.cfi_remember_state
 6868              		.cfi_def_cfa_offset 12
 6869              		@ sp needed
 6870 0020 30BD     		pop	{r4, r5, pc}
 6871              	.LVL779:
 6872              	.L683:
 6873              		.cfi_restore_state
1884:src/display.c **** 	set_x_dn(&z, res, &digits);
 6874              		.loc 1 1884 4 is_stmt 1 view .LVU2225
 6875 0022 FFF7FEFF 		bl	decimal64ToNumber
 6876              	.LVL780:
1885:src/display.c ****       }
 6877              		.loc 1 1885 2 view .LVU2226
 6878 0026 2146     		mov	r1, r4
 6879 0028 2846     		mov	r0, r5
 6880 002a 6A46     		mov	r2, sp
 6881 002c FFF7FEFF 		bl	set_x_dn
 6882              	.LVL781:
1886:src/display.c **** 
 6883              		.loc 1 1886 7 is_stmt 0 view .LVU2227
 6884 0030 0BB0     		add	sp, sp, #44
 6885              		.cfi_def_cfa_offset 12
 6886              		@ sp needed
 6887 0032 30BD     		pop	{r4, r5, pc}
1886:src/display.c **** 
 6888              		.loc 1 1886 7 view .LVU2228
 6889              		.cfi_endproc
 6890              	.LFE26:
 6892              		.section	.text.format_reg,"ax",%progbits
 6893              		.align	1
 6894              		.p2align 2,,3
 6895              		.global	format_reg
 6896              		.syntax unified
 6897              		.thumb
 6898              		.thumb_func
 6899              		.fpu fpv4-sp-d16
 6901              	format_reg:
 6902              	.LVL782:
 6903              	.LFB28:
2293:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6904              		.loc 1 2293 45 is_stmt 1 view -0
 6905              		.cfi_startproc
 6906              		@ args = 0, pretend = 0, frame = 40
 6907              		@ frame_needed = 0, uses_anonymous_args = 0
2294:src/display.c **** 
 6908              		.loc 1 2294 2 view .LVU2230
2293:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6909              		.loc 1 2293 45 is_stmt 0 view .LVU2231
 6910 0000 30B5     		push	{r4, r5, lr}
 6911              		.cfi_def_cfa_offset 12
 6912              		.cfi_offset 4, -12
 6913              		.cfi_offset 5, -8
 6914              		.cfi_offset 14, -4
 6915 0002 8BB0     		sub	sp, sp, #44
 6916              		.cfi_def_cfa_offset 56
2293:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6917              		.loc 1 2293 45 view .LVU2232
ARM GAS  /tmp/ccobNVTR.s 			page 212


 6918 0004 0C46     		mov	r4, r1
 6919 0006 0546     		mov	r5, r0
2294:src/display.c **** 
 6920              		.loc 1 2294 28 view .LVU2233
 6921 0008 FFF7FEFF 		bl	get_reg_n
 6922              	.LVL783:
2296:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6923              		.loc 1 2296 6 view .LVU2234
 6924 000c 154B     		ldr	r3, .L693
 6925 000e 1B68     		ldr	r3, [r3]
 6926 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6927              	.LVL784:
2296:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6928              		.loc 1 2296 2 is_stmt 1 view .LVU2235
2296:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6929              		.loc 1 2296 5 is_stmt 0 view .LVU2236
 6930 0014 D207     		lsls	r2, r2, #31
 6931 0016 1DD4     		bmi	.L691
2299:src/display.c **** 	  decNumber x;
 6932              		.loc 1 2299 7 is_stmt 1 view .LVU2237
2299:src/display.c **** 	  decNumber x;
 6933              		.loc 1 2299 10 is_stmt 0 view .LVU2238
 6934 0018 44B1     		cbz	r4, .L692
 6935              	.L689:
2310:src/display.c ****       }
 6936              		.loc 1 2310 4 is_stmt 1 view .LVU2239
2310:src/display.c ****       }
 6937              		.loc 1 2310 24 is_stmt 0 view .LVU2240
 6938 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2310:src/display.c ****       }
 6939              		.loc 1 2310 4 view .LVU2241
 6940 001e 2146     		mov	r1, r4
 6941 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6942 0024 FFF7FEFF 		bl	set_x
 6943              	.LVL785:
2311:src/display.c **** 
 6944              		.loc 1 2311 7 view .LVU2242
 6945 0028 0BB0     		add	sp, sp, #44
 6946              		.cfi_remember_state
 6947              		.cfi_def_cfa_offset 12
 6948              		@ sp needed
 6949 002a 30BD     		pop	{r4, r5, pc}
 6950              	.LVL786:
 6951              	.L692:
 6952              		.cfi_restore_state
2299:src/display.c **** 	  decNumber x;
 6953              		.loc 1 2299 32 discriminator 1 view .LVU2243
 6954 002c 0E4A     		ldr	r2, .L693+4
2299:src/display.c **** 	  decNumber x;
 6955              		.loc 1 2299 23 discriminator 1 view .LVU2244
 6956 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6957 0030 012A     		cmp	r2, #1
 6958 0032 F2D9     		bls	.L689
 6959              	.LVL787:
 6960              	.LBB414:
 6961              	.LBI414:
2293:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
ARM GAS  /tmp/ccobNVTR.s 			page 213


 6962              		.loc 1 2293 12 is_stmt 1 view .LVU2245
 6963              	.LBB415:
 6964              	.LBB416:
2300:src/display.c **** 	  int s;
 6965              		.loc 1 2300 4 view .LVU2246
2301:src/display.c **** 	  unsigned long long int v;
 6966              		.loc 1 2301 4 view .LVU2247
2302:src/display.c **** 
 6967              		.loc 1 2302 4 view .LVU2248
2304:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6968              		.loc 1 2304 4 view .LVU2249
 6969 0034 2946     		mov	r1, r5
 6970 0036 01A8     		add	r0, sp, #4
 6971              	.LVL788:
2304:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6972              		.loc 1 2304 4 is_stmt 0 view .LVU2250
 6973 0038 FFF7FEFF 		bl	getRegister
 6974              	.LVL789:
2305:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6975              		.loc 1 2305 4 is_stmt 1 view .LVU2251
2305:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6976              		.loc 1 2305 8 is_stmt 0 view .LVU2252
 6977 003c 01A8     		add	r0, sp, #4
 6978 003e 6946     		mov	r1, sp
 6979 0040 FFF7FEFF 		bl	dn_to_ull
 6980              	.LVL790:
2306:src/display.c **** 	}
 6981              		.loc 1 2306 4 is_stmt 1 view .LVU2253
 6982 0044 009A     		ldr	r2, [sp]
 6983 0046 FFF7FEFF 		bl	build_value
 6984              	.LVL791:
2306:src/display.c **** 	}
 6985              		.loc 1 2306 4 is_stmt 0 view .LVU2254
 6986 004a 2246     		mov	r2, r4
 6987 004c FFF7FEFF 		bl	set_int_x
 6988              	.LVL792:
 6989              	.LBE416:
 6990              	.LBE415:
 6991              	.LBE414:
2311:src/display.c **** 
 6992              		.loc 1 2311 7 view .LVU2255
 6993 0050 0BB0     		add	sp, sp, #44
 6994              		.cfi_remember_state
 6995              		.cfi_def_cfa_offset 12
 6996              		@ sp needed
 6997 0052 30BD     		pop	{r4, r5, pc}
 6998              	.LVL793:
 6999              	.L691:
 7000              		.cfi_restore_state
2297:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7001              		.loc 1 2297 4 is_stmt 1 view .LVU2256
 7002 0054 2846     		mov	r0, r5
 7003              	.LVL794:
2297:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7004              		.loc 1 2297 4 is_stmt 0 view .LVU2257
 7005 0056 FFF7FEFF 		bl	get_reg_n_int
 7006              	.LVL795:
ARM GAS  /tmp/ccobNVTR.s 			page 214


 7007 005a 2246     		mov	r2, r4
 7008 005c FFF7FEFF 		bl	set_int_x
 7009              	.LVL796:
2311:src/display.c **** 
 7010              		.loc 1 2311 7 view .LVU2258
 7011 0060 0BB0     		add	sp, sp, #44
 7012              		.cfi_def_cfa_offset 12
 7013              		@ sp needed
 7014 0062 30BD     		pop	{r4, r5, pc}
 7015              	.LVL797:
 7016              	.L694:
2311:src/display.c **** 
 7017              		.loc 1 2311 7 view .LVU2259
 7018              		.align	2
 7019              	.L693:
 7020 0064 00000000 		.word	main_ram
 7021 0068 00000000 		.word	StateWhileOn
 7022              		.cfi_endproc
 7023              	.LFE28:
 7025              		.section	.text.set_status_right,"ax",%progbits
 7026              		.align	1
 7027              		.p2align 2,,3
 7028              		.syntax unified
 7029              		.thumb
 7030              		.thumb_func
 7031              		.fpu fpv4-sp-d16
 7033              	set_status_right:
 7034              	.LVL798:
 7035              	.LFB46:
3076:src/display.c ****       static void set_status_top(const char *str) {
3077:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3078:src/display.c ****       }
3079:src/display.c **** 
3080:src/display.c **** 
3081:src/display.c ****       /*
3082:src/display.c ****        *  Display messages (global function)
3083:src/display.c ****        */
3084:src/display.c ****       extern void message(const char *str1, const char *str2)
3085:src/display.c ****       {
3086:src/display.c **** 	State2.disp_freeze = 0;
3087:src/display.c **** 	State2.disp_small = 0;
3088:src/display.c **** 	WasDataEntry = 0;
3089:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3090:src/display.c **** 	  // Complete redraw necessary
3091:src/display.c **** 	  DispMsg = str1;
3092:src/display.c **** 	  display();
3093:src/display.c **** 	}
3094:src/display.c **** 	else {
3095:src/display.c **** 	  if ( str2 != NULL ) {
3096:src/display.c **** 	    reset_disp();
3097:src/display.c **** 	    ShowRPN = 0;
3098:src/display.c **** 	    set_annunciators();
3099:src/display.c **** 	    set_digits_string( str2, 0 );
3100:src/display.c **** 	  }
3101:src/display.c **** 	  set_status( str1 );
3102:src/display.c **** 	  finish_display();// message
3103:src/display.c **** 	}
ARM GAS  /tmp/ccobNVTR.s 			page 215


3104:src/display.c ****       }
3105:src/display.c **** 
3106:src/display.c **** #ifdef INCLUDE_STOPWATCH
3107:src/display.c **** 
3108:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3109:src/display.c **** 	int j = SEGS_EXP_BASE;
3110:src/display.c **** 	for (; *exponent!=0; exponent++) {
3111:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3112:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3113:src/display.c **** 	}
3114:src/display.c ****       }
3115:src/display.c **** 
3116:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3117:src/display.c ****       {
3118:src/display.c **** #ifndef REALBUILD
3119:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3120:src/display.c **** #endif
3121:src/display.c **** 	reset_disp();
3122:src/display.c **** 	set_dot(DEG);
3123:src/display.c **** 	set_digits_string( str2, 0 );
3124:src/display.c **** 	State2.disp_small = force_small;
3125:src/display.c **** 	if( exponent!=NULL ) {
3126:src/display.c **** 	  stopwatch_exponent(exponent);
3127:src/display.c **** 	}
3128:src/display.c **** 	set_status( str1 );
3129:src/display.c **** 	finish_display();
3130:src/display.c ****       }
3131:src/display.c **** 
3132:src/display.c **** 
3133:src/display.c **** #endif // INCLUDE_STOPWATCH
3134:src/display.c **** 
3135:src/display.c ****       /* Display the right hand characters from the given string.
3136:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3137:src/display.c ****        * and reduce font size if required.
3138:src/display.c ****        */
3139:src/display.c ****       static void set_status_right(const char *str) {
 7036              		.loc 1 3139 53 is_stmt 1 view -0
 7037              		.cfi_startproc
 7038              		@ args = 0, pretend = 0, frame = 0
 7039              		@ frame_needed = 0, uses_anonymous_args = 0
3140:src/display.c **** 	unsigned int x = 0;
 7040              		.loc 1 3140 2 view .LVU2261
3141:src/display.c **** 	const char *p;
 7041              		.loc 1 3141 2 view .LVU2262
3142:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7042              		.loc 1 3142 2 view .LVU2263
3139:src/display.c **** 	unsigned int x = 0;
 7043              		.loc 1 3139 53 is_stmt 0 view .LVU2264
 7044 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7045              		.cfi_def_cfa_offset 28
 7046              		.cfi_offset 4, -28
 7047              		.cfi_offset 5, -24
 7048              		.cfi_offset 6, -20
 7049              		.cfi_offset 7, -16
 7050              		.cfi_offset 8, -12
 7051              		.cfi_offset 9, -8
 7052              		.cfi_offset 14, -4
ARM GAS  /tmp/ccobNVTR.s 			page 216


 7053              		.loc 1 3142 23 view .LVU2265
 7054 0004 194B     		ldr	r3, .L710
 7055              		.loc 1 3142 41 view .LVU2266
 7056 0006 93F91630 		ldrsb	r3, [r3, #22]
 7057 000a 002B     		cmp	r3, #0
3139:src/display.c **** 	unsigned int x = 0;
 7058              		.loc 1 3139 53 view .LVU2267
 7059 000c 83B0     		sub	sp, sp, #12
 7060              		.cfi_def_cfa_offset 40
3139:src/display.c **** 	unsigned int x = 0;
 7061              		.loc 1 3139 53 view .LVU2268
 7062 000e 0646     		mov	r6, r0
 7063              		.loc 1 3142 41 view .LVU2269
 7064 0010 23DA     		bge	.L709
 7065              	.LVL799:
 7066              	.L696:
 7067              		.loc 1 3142 12 view .LVU2270
 7068 0012 4FF00108 		mov	r8, #1
3143:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7069              		.loc 1 3143 36 view .LVU2271
 7070 0016 4FF48077 		mov	r7, #256
 7071              	.L697:
 7072              	.LVL800:
3144:src/display.c **** 
3145:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7073              		.loc 1 3145 2 is_stmt 1 discriminator 4 view .LVU2272
 7074              		.loc 1 3145 14 discriminator 4 view .LVU2273
 7075              		.loc 1 3145 2 is_stmt 0 discriminator 4 view .LVU2274
 7076 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7077 001c 3446     		mov	r4, r6
 7078 001e 1BB1     		cbz	r3, .L698
 7079              	.LVL801:
 7080              	.L699:
 7081              		.loc 1 3145 30 is_stmt 1 discriminator 3 view .LVU2275
 7082              		.loc 1 3145 26 discriminator 3 view .LVU2276
 7083              		.loc 1 3145 14 discriminator 3 view .LVU2277
 7084              		.loc 1 3145 2 is_stmt 0 discriminator 3 view .LVU2278
 7085 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7086              	.LVL802:
 7087              		.loc 1 3145 2 discriminator 3 view .LVU2279
 7088 0024 002B     		cmp	r3, #0
 7089 0026 FBD1     		bne	.L699
 7090              	.L698:
3140:src/display.c **** 	const char *p;
 7091              		.loc 1 3140 15 view .LVU2280
 7092 0028 0025     		movs	r5, #0
 7093 002a 06E0     		b	.L700
 7094              	.LVL803:
 7095              	.L701:
 7096              	.LBB417:
3146:src/display.c **** 	while (--p >= str) {
3147:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7097              		.loc 1 3147 27 view .LVU2281
 7098 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3148:src/display.c **** 
3149:src/display.c **** 	  x += charlengths(c);
 7099              		.loc 1 3149 9 view .LVU2282
ARM GAS  /tmp/ccobNVTR.s 			page 217


 7100 002e 3844     		add	r0, r0, r7
 7101 0030 FFF7FEFF 		bl	charlengths
 7102              	.LVL804:
 7103              		.loc 1 3149 6 view .LVU2283
 7104 0034 0544     		add	r5, r5, r0
 7105              	.LVL805:
3150:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7106              		.loc 1 3150 4 is_stmt 1 view .LVU2284
 7107              		.loc 1 3150 7 is_stmt 0 view .LVU2285
 7108 0036 4B2D     		cmp	r5, #75
 7109 0038 03D8     		bhi	.L702
 7110              	.LVL806:
 7111              	.L700:
3147:src/display.c **** 
 7112              		.loc 1 3147 4 is_stmt 1 view .LVU2286
3147:src/display.c **** 
 7113              		.loc 1 3147 4 is_stmt 0 view .LVU2287
 7114              	.LBE417:
3146:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7115              		.loc 1 3146 8 is_stmt 1 view .LVU2288
 7116 003a A146     		mov	r9, r4
 7117 003c 013C     		subs	r4, r4, #1
 7118              	.LVL807:
 7119              	.LBB418:
3149:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7120              		.loc 1 3149 4 view .LVU2289
3149:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7121              		.loc 1 3149 4 is_stmt 0 view .LVU2290
 7122              	.LBE418:
3146:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7123              		.loc 1 3146 8 view .LVU2291
 7124 003e A642     		cmp	r6, r4
 7125 0040 F4D9     		bls	.L701
 7126              	.LVL808:
 7127              	.L702:
3151:src/display.c **** 	    break;
3152:src/display.c **** 	}
3153:src/display.c **** 	set_status_sized(p+1, toolarge);
 7128              		.loc 1 3153 2 is_stmt 1 view .LVU2292
 7129              	.LBB419:
 7130              	.LBI419:
2915:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7131              		.loc 1 2915 19 view .LVU2293
 7132              	.LBB420:
2916:src/display.c ****       }
 7133              		.loc 1 2916 2 view .LVU2294
 7134 0042 40F24A23 		movw	r3, #586
 7135 0046 0093     		str	r3, [sp]
 7136 0048 4146     		mov	r1, r8
 7137 004a 4846     		mov	r0, r9
 7138 004c 8E23     		movs	r3, #142
 7139 004e 4A22     		movs	r2, #74
 7140 0050 FFF7FEFF 		bl	s_s_sized
 7141              	.LVL809:
2916:src/display.c ****       }
 7142              		.loc 1 2916 2 is_stmt 0 view .LVU2295
 7143              	.LBE420:
ARM GAS  /tmp/ccobNVTR.s 			page 218


 7144              	.LBE419:
3154:src/display.c ****       }
 7145              		.loc 1 3154 7 view .LVU2296
 7146 0054 03B0     		add	sp, sp, #12
 7147              		.cfi_remember_state
 7148              		.cfi_def_cfa_offset 28
 7149              		@ sp needed
 7150 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7151              	.LVL810:
 7152              	.L709:
 7153              		.cfi_restore_state
 7154              	.LBB421:
 7155              	.LBI421:
3063:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7156              		.loc 1 3063 18 is_stmt 1 view .LVU2297
 7157              	.LBB422:
3064:src/display.c ****       }
 7158              		.loc 1 3064 2 view .LVU2298
3064:src/display.c ****       }
 7159              		.loc 1 3064 9 is_stmt 0 view .LVU2299
 7160 005a 0021     		movs	r1, #0
 7161 005c FFF7FEFF 		bl	pixel_length
 7162              	.LVL811:
3064:src/display.c ****       }
 7163              		.loc 1 3064 9 view .LVU2300
 7164              	.LBE422:
 7165              	.LBE421:
3142:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7166              		.loc 1 3142 41 view .LVU2301
 7167 0060 4B28     		cmp	r0, #75
 7168 0062 D6DC     		bgt	.L696
3142:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7169              		.loc 1 3142 12 view .LVU2302
 7170 0064 4FF00008 		mov	r8, #0
3143:src/display.c **** 
 7171              		.loc 1 3143 36 view .LVU2303
 7172 0068 4746     		mov	r7, r8
 7173 006a D6E7     		b	.L697
 7174              	.L711:
 7175              		.align	2
 7176              	.L710:
 7177 006c 00000000 		.word	StateWhileOn
 7178              		.cfi_endproc
 7179              	.LFE46:
 7181              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7182              		.align	2
 7183              	.LC3:
 7184 0000 32630600 		.ascii	"2c\006\000"
 7185              		.align	2
 7186              	.LC4:
 7187 0004 07C63C00 		.ascii	"\007\306<\000"
 7188              		.align	2
 7189              	.LC5:
 7190 0008 07876900 		.ascii	"\007\207i\000"
 7191              		.align	2
 7192              	.LC6:
 7193 000c 07C67900 		.ascii	"\007\306y\000"
ARM GAS  /tmp/ccobNVTR.s 			page 219


 7194              		.align	2
 7195              	.LC7:
 7196 0010 07950600 		.ascii	"\007\225\006\000"
 7197              		.align	2
 7198              	.LC8:
 7199 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7199      060600
 7200 001b 00       		.align	2
 7201              	.LC9:
 7202 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7202      060600
 7203 0023 00       		.align	2
 7204              	.LC10:
 7205 0024 1400     		.ascii	"\024\000"
 7206 0026 0000     		.align	2
 7207              	.LC11:
 7208 0028 07C74400 		.ascii	"\007\307D\000"
 7209              		.align	2
 7210              	.LC12:
 7211 002c 07870700 		.ascii	"\007\207\007\000"
 7212              		.align	2
 7213              	.LC13:
 7214 0030 07872000 		.ascii	"\007\207 \000"
 7215              		.align	2
 7216              	.LC14:
 7217 0034 06060788 		.ascii	"\006\006\007\210\007\000"
 7217      0700
 7218 003a 0000     		.align	2
 7219              	.LC15:
 7220 003c 07C73C00 		.ascii	"\007\307<\000"
 7221              		.align	2
 7222              	.LC16:
 7223 0040 07C77900 		.ascii	"\007\307y\000"
 7224              		.align	2
 7225              	.LC17:
 7226 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7226      00
 7227 0049 000000   		.align	2
 7228              	.LC19:
 7229 004c 07E43F00 		.ascii	"\007\344?\000"
 7230              		.section	.text.annunciators,"ax",%progbits
 7231              		.align	1
 7232              		.p2align 2,,3
 7233              		.syntax unified
 7234              		.thumb
 7235              		.thumb_func
 7236              		.fpu fpv4-sp-d16
 7238              	annunciators:
 7239              	.LFB16:
 596:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7240              		.loc 1 596 36 is_stmt 1 view -0
 7241              		.cfi_startproc
 7242              		@ args = 0, pretend = 0, frame = 128
 7243              		@ frame_needed = 0, uses_anonymous_args = 0
 598:src/display.c ****       char buf2[42], *p2 = buf2;
 7244              		.loc 1 598 7 view .LVU2305
 596:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
ARM GAS  /tmp/ccobNVTR.s 			page 220


 7245              		.loc 1 596 36 is_stmt 0 view .LVU2306
 7246 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7247              		.cfi_def_cfa_offset 28
 7248              		.cfi_offset 4, -28
 7249              		.cfi_offset 5, -24
 7250              		.cfi_offset 6, -20
 7251              		.cfi_offset 7, -16
 7252              		.cfi_offset 8, -12
 7253              		.cfi_offset 9, -8
 7254              		.cfi_offset 14, -4
 610:src/display.c **** #  endif
 7255              		.loc 1 610 38 view .LVU2307
 7256 0004 BD4F     		ldr	r7, .L828
 596:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7257              		.loc 1 596 36 view .LVU2308
 7258 0006 A3B0     		sub	sp, sp, #140
 7259              		.cfi_def_cfa_offset 168
 7260              	.LVL812:
 599:src/display.c ****       int n;
 7261              		.loc 1 599 7 is_stmt 1 view .LVU2309
 600:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7262              		.loc 1 600 7 view .LVU2310
 601:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7263              		.loc 1 601 7 view .LVU2311
 602:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7264              		.loc 1 602 7 view .LVU2312
 602:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7265              		.loc 1 602 43 is_stmt 0 view .LVU2313
 7266 0008 FFF7FEFF 		bl	cur_shift
 7267              	.LVL813:
 602:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7268              		.loc 1 602 18 view .LVU2314
 7269 000c BC4B     		ldr	r3, .L828+4
 610:src/display.c **** #  endif
 7270              		.loc 1 610 38 view .LVU2315
 7271 000e 3A68     		ldr	r2, [r7]
 602:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7272              		.loc 1 602 18 view .LVU2316
 7273 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7274              	.LVL814:
 610:src/display.c **** #  endif
 7275              		.loc 1 610 7 is_stmt 1 view .LVU2317
 610:src/display.c **** #  endif
 7276              		.loc 1 610 38 is_stmt 0 view .LVU2318
 7277 0014 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 641:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7278              		.loc 1 641 7 view .LVU2319
 7279 0018 0CAD     		add	r5, sp, #48
 7280              	.LVL815:
 641:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7281              		.loc 1 641 7 view .LVU2320
 7282 001a 2A22     		movs	r2, #42
 7283 001c 0021     		movs	r1, #0
 7284 001e 2846     		mov	r0, r5
 7285 0020 FFF7FEFF 		bl	xset
 7286              	.LVL816:
 642:src/display.c ****       
ARM GAS  /tmp/ccobNVTR.s 			page 221


 7287              		.loc 1 642 7 view .LVU2321
 7288 0024 0021     		movs	r1, #0
 7289 0026 17A8     		add	r0, sp, #92
 7290              	.LVL817:
 642:src/display.c ****       
 7291              		.loc 1 642 7 view .LVU2322
 7292 0028 2A22     		movs	r2, #42
 7293 002a FFF7FEFF 		bl	xset
 7294              	.LVL818:
 644:src/display.c **** #ifdef SHOW_STACK_SIZE
 7295              		.loc 1 644 11 view .LVU2323
 7296 002e 3B68     		ldr	r3, [r7]
 7297 0030 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 644:src/display.c **** #ifdef SHOW_STACK_SIZE
 7298              		.loc 1 644 10 view .LVU2324
 7299 0034 D907     		lsls	r1, r3, #31
 610:src/display.c **** #  endif
 7300              		.loc 1 610 17 view .LVU2325
 7301 0036 C4F38004 		ubfx	r4, r4, #2, #1
 7302              	.LVL819:
 613:src/display.c **** #  else
 7303              		.loc 1 613 7 is_stmt 1 view .LVU2326
 618:src/display.c **** #  else
 7304              		.loc 1 618 7 view .LVU2327
 628:src/display.c **** #else
 7305              		.loc 1 628 7 view .LVU2328
 636:src/display.c **** #else
 7306              		.loc 1 636 7 view .LVU2329
 641:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7307              		.loc 1 641 7 view .LVU2330
 642:src/display.c ****       
 7308              		.loc 1 642 7 view .LVU2331
 644:src/display.c **** #ifdef SHOW_STACK_SIZE
 7309              		.loc 1 644 7 view .LVU2332
 644:src/display.c **** #ifdef SHOW_STACK_SIZE
 7310              		.loc 1 644 10 is_stmt 0 view .LVU2333
 7311 003a 00F1C480 		bmi	.L812
 683:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7312              		.loc 1 683 12 is_stmt 1 view .LVU2334
 683:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7313              		.loc 1 683 15 is_stmt 0 view .LVU2335
 7314 003e 84BB     		cbnz	r4, .L727
 701:src/display.c **** 	    *p2++ = shift_char;
 7315              		.loc 1 701 4 is_stmt 1 view .LVU2336
 701:src/display.c **** 	    *p2++ = shift_char;
 7316              		.loc 1 701 7 is_stmt 0 view .LVU2337
 7317 0040 B8F1200F 		cmp	r8, #32
 7318 0044 00F08F81 		beq	.L728
 7319              	.L730:
 702:src/display.c **** 	    *p2++ = '\006';
 7320              		.loc 1 702 6 is_stmt 1 view .LVU2338
 7321              	.LVL820:
 703:src/display.c **** 	  }
 7322              		.loc 1 703 12 is_stmt 0 view .LVU2339
 7323 0048 0623     		movs	r3, #6
 702:src/display.c **** 	    *p2++ = '\006';
 7324              		.loc 1 702 12 view .LVU2340
ARM GAS  /tmp/ccobNVTR.s 			page 222


 7325 004a 8DF85C80 		strb	r8, [sp, #92]
 703:src/display.c **** 	  }
 7326              		.loc 1 703 6 is_stmt 1 view .LVU2341
 7327              	.LVL821:
 703:src/display.c **** 	  }
 7328              		.loc 1 703 12 is_stmt 0 view .LVU2342
 7329 004e 8DF85D30 		strb	r3, [sp, #93]
 703:src/display.c **** 	  }
 7330              		.loc 1 703 9 view .LVU2343
 7331 0052 0DF15E00 		add	r0, sp, #94
 7332              	.LVL822:
 7333              	.L729:
 709:src/display.c **** 	  *p2++ = ' ';
 7334              		.loc 1 709 2 is_stmt 1 view .LVU2344
 709:src/display.c **** 	  *p2++ = ' ';
 7335              		.loc 1 709 6 is_stmt 0 view .LVU2345
 7336 0056 AB4E     		ldr	r6, .L828+8
 7337 0058 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 709:src/display.c **** 	  *p2++ = ' ';
 7338              		.loc 1 709 5 view .LVU2346
 7339 005a 9A07     		lsls	r2, r3, #30
 7340 005c 00F14981 		bmi	.L813
 714:src/display.c **** 	  *p2++ = ' ';
 7341              		.loc 1 714 2 is_stmt 1 view .LVU2347
 714:src/display.c **** 	  *p2++ = ' ';
 7342              		.loc 1 714 5 is_stmt 0 view .LVU2348
 7343 0060 5907     		lsls	r1, r3, #29
 7344 0062 00F14181 		bmi	.L814
 720:src/display.c **** 	  if (State2.wascomplex) {
 7345              		.loc 1 720 2 is_stmt 1 view .LVU2349
 720:src/display.c **** 	  if (State2.wascomplex) {
 7346              		.loc 1 720 5 is_stmt 0 view .LVU2350
 7347 0066 B8F1200F 		cmp	r8, #32
 7348 006a 00F0A981 		beq	.L815
 7349              	.L733:
 737:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7350              		.loc 1 737 2 is_stmt 1 view .LVU2351
 737:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7351              		.loc 1 737 16 is_stmt 0 view .LVU2352
 7352 006e 3B68     		ldr	r3, [r7]
 7353 0070 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7354 0074 C3F30113 		ubfx	r3, r3, #4, #2
 737:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7355              		.loc 1 737 2 view .LVU2353
 7356 0078 012B     		cmp	r3, #1
 7357 007a 00F0B481 		beq	.L767
 7358 007e A249     		ldr	r1, .L828+12
 7359 0080 A24A     		ldr	r2, .L828+16
 7360 0082 022B     		cmp	r3, #2
 7361 0084 08BF     		it	eq
 7362 0086 1146     		moveq	r1, r2
 7363              	.L735:
 7364              	.LVL823:
 751:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7365              		.loc 1 751 2 is_stmt 1 view .LVU2354
 751:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7366              		.loc 1 751 7 is_stmt 0 view .LVU2355
ARM GAS  /tmp/ccobNVTR.s 			page 223


 7367 0088 FFF7FEFF 		bl	scopy
 7368              	.LVL824:
 751:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7369              		.loc 1 751 7 view .LVU2356
 7370 008c 0446     		mov	r4, r0
 7371              	.LVL825:
 753:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7372              		.loc 1 753 2 is_stmt 1 view .LVU2357
 753:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7373              		.loc 1 753 6 is_stmt 0 view .LVU2358
 7374 008e FFF7FEFF 		bl	get_trig_mode
 7375              	.LVL826:
 753:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7376              		.loc 1 753 5 view .LVU2359
 7377 0092 0228     		cmp	r0, #2
 7378 0094 40F0EC80 		bne	.L726
 754:src/display.c **** 	}
 7379              		.loc 1 754 4 is_stmt 1 view .LVU2360
 7380 0098 9D49     		ldr	r1, .L828+20
 7381 009a 2046     		mov	r0, r4
 7382 009c FFF7FEFF 		bl	scopy
 7383              	.LVL827:
 7384 00a0 E6E0     		b	.L726
 7385              	.LVL828:
 7386              	.L727:
 765:src/display.c **** 	  *p2++ = '\007';
 7387              		.loc 1 765 2 view .LVU2361
 765:src/display.c **** 	  *p2++ = '\007';
 7388              		.loc 1 765 6 is_stmt 0 view .LVU2362
 7389 00a2 984E     		ldr	r6, .L828+8
 7390 00a4 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 765:src/display.c **** 	  *p2++ = '\007';
 7391              		.loc 1 765 5 view .LVU2363
 7392 00a6 9A07     		lsls	r2, r3, #30
 7393 00a8 00F1F680 		bmi	.L816
 771:src/display.c **** 	  *p2++ = '\007';
 7394              		.loc 1 771 7 is_stmt 1 view .LVU2364
 771:src/display.c **** 	  *p2++ = '\007';
 7395              		.loc 1 771 10 is_stmt 0 view .LVU2365
 7396 00ac B8F1200F 		cmp	r8, #32
 7397 00b0 00F04081 		beq	.L738
 772:src/display.c **** 	  *p2++ = '\307';
 7398              		.loc 1 772 4 is_stmt 1 view .LVU2366
 7399              	.LVL829:
 773:src/display.c **** 	  *p2++ = shift_char;
 7400              		.loc 1 773 4 view .LVU2367
 772:src/display.c **** 	  *p2++ = '\307';
 7401              		.loc 1 772 10 is_stmt 0 view .LVU2368
 7402 00b4 4CF20772 		movw	r2, #50951
 774:src/display.c **** 	  goto no_copy;
 7403              		.loc 1 774 10 view .LVU2369
 7404 00b8 8DF85E80 		strb	r8, [sp, #94]
 772:src/display.c **** 	  *p2++ = '\307';
 7405              		.loc 1 772 10 view .LVU2370
 7406 00bc ADF85C20 		strh	r2, [sp, #92]	@ movhi
 774:src/display.c **** 	  goto no_copy;
 7407              		.loc 1 774 4 is_stmt 1 view .LVU2371
ARM GAS  /tmp/ccobNVTR.s 			page 224


 7408              	.LVL830:
 775:src/display.c **** 	}
 7409              		.loc 1 775 4 view .LVU2372
 774:src/display.c **** 	  goto no_copy;
 7410              		.loc 1 774 7 is_stmt 0 view .LVU2373
 7411 00c0 0DF15F00 		add	r0, sp, #95
 7412              	.LVL831:
 598:src/display.c ****       char buf2[42], *p2 = buf2;
 7413              		.loc 1 598 22 view .LVU2374
 7414 00c4 A846     		mov	r8, r5
 7415              	.LVL832:
 7416              	.L739:
 819:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7417              		.loc 1 819 2 is_stmt 1 view .LVU2375
 819:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7418              		.loc 1 819 5 is_stmt 0 view .LVU2376
 7419 00c6 5B07     		lsls	r3, r3, #29
 7420 00c8 00F1F680 		bmi	.L817
 7421              	.L743:
 821:src/display.c **** 	  decNumber y;
 7422              		.loc 1 821 9 is_stmt 1 view .LVU2377
 821:src/display.c **** 	  decNumber y;
 7423              		.loc 1 821 13 is_stmt 0 view .LVU2378
 7424 00cc B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
 821:src/display.c **** 	  decNumber y;
 7425              		.loc 1 821 12 view .LVU2379
 7426 00ce 5806     		lsls	r0, r3, #25
 7427              	.LVL833:
 821:src/display.c **** 	  decNumber y;
 7428              		.loc 1 821 12 view .LVU2380
 7429 00d0 40F1CE80 		bpl	.L726
 7430              	.L716:
 7431              	.LBB433:
 822:src/display.c **** 	display_yreg:
 7432              		.loc 1 822 4 is_stmt 1 view .LVU2381
 829:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7433              		.loc 1 829 4 view .LVU2382
 829:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7434              		.loc 1 829 8 is_stmt 0 view .LVU2383
 7435 00d4 3B68     		ldr	r3, [r7]
 7436 00d6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 829:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7437              		.loc 1 829 7 view .LVU2384
 7438 00da D907     		lsls	r1, r3, #31
 7439 00dc 00F16181 		bmi	.L818
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7440              		.loc 1 834 4 is_stmt 1 view .LVU2385
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7441              		.loc 1 834 34 is_stmt 0 view .LVU2386
 7442 00e0 DFF84892 		ldr	r9, .L828+48
 7443 00e4 D9F80010 		ldr	r1, [r9]
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7444              		.loc 1 834 4 view .LVU2387
 7445 00e8 6329     		cmp	r1, #99
 7446 00ea 00F34781 		bgt	.L819
 7447              	.L746:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
ARM GAS  /tmp/ccobNVTR.s 			page 225


 7448              		.loc 1 834 4 discriminator 5 view .LVU2388
 7449 00ee 0131     		adds	r1, r1, #1
 7450              	.L750:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7451              		.loc 1 834 4 discriminator 6 view .LVU2389
 7452 00f0 03A8     		add	r0, sp, #12
 7453 00f2 FFF7FEFF 		bl	getRegister
 7454              	.LVL834:
 837:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7455              		.loc 1 837 4 is_stmt 1 discriminator 6 view .LVU2390
 837:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7456              		.loc 1 837 7 is_stmt 0 discriminator 6 view .LVU2391
 7457 00f6 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 7458 00fa 11F07001 		ands	r1, r1, #112
 7459 00fe 40D1     		bne	.L752
 838:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7460              		.loc 1 838 6 is_stmt 1 view .LVU2392
 838:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7461              		.loc 1 838 19 is_stmt 0 view .LVU2393
 7462 0100 F37D     		ldrb	r3, [r6, #23]	@ zero_extendqisi2
 838:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7463              		.loc 1 838 9 view .LVU2394
 7464 0102 13F0010F 		tst	r3, #1
 7465              	.LBB434:
 839:src/display.c **** 
 7466              		.loc 1 839 44 view .LVU2395
 7467 0106 3B68     		ldr	r3, [r7]
 7468              	.LBE434:
 838:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7469              		.loc 1 838 9 view .LVU2396
 7470 0108 40F06F81 		bne	.L820
 859:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7471              		.loc 1 859 6 is_stmt 1 view .LVU2397
 859:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7472              		.loc 1 859 21 is_stmt 0 view .LVU2398
 7473 010c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 859:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7474              		.loc 1 859 9 view .LVU2399
 7475 0110 9B06     		lsls	r3, r3, #26
 7476 0112 36D5     		bpl	.L752
 861:src/display.c **** #endif
 7477              		.loc 1 861 6 view .LVU2400
 7478 0114 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 861:src/display.c **** #endif
 7479              		.loc 1 861 3 view .LVU2401
 7480 0116 13F00204 		ands	r4, r3, #2
 7481              	.LVL835:
 861:src/display.c **** #endif
 7482              		.loc 1 861 3 view .LVU2402
 7483 011a 32D1     		bne	.L752
 864:src/display.c **** #endif
 7484              		.loc 1 864 6 view .LVU2403
 7485 011c 7D4B     		ldr	r3, .L828+24
 864:src/display.c **** #endif
 7486              		.loc 1 864 3 view .LVU2404
 7487 011e 1B68     		ldr	r3, [r3]
 7488 0120 012B     		cmp	r3, #1
ARM GAS  /tmp/ccobNVTR.s 			page 226


 7489 0122 2ED0     		beq	.L752
 866:src/display.c **** 	      char ltgteq;
 7490              		.loc 1 866 6 view .LVU2405
 7491 0124 4146     		mov	r1, r8
 7492 0126 03A8     		add	r0, sp, #12
 7493 0128 FFF7FEFF 		bl	set_x_fract
 7494              	.LVL836:
 866:src/display.c **** 	      char ltgteq;
 7495              		.loc 1 866 3 view .LVU2406
 7496 012c 48B3     		cbz	r0, .L752
 7497              	.LBB435:
 867:src/display.c **** 
 7498              		.loc 1 867 8 is_stmt 1 view .LVU2407
 869:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7499              		.loc 1 869 8 view .LVU2408
 869:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7500              		.loc 1 869 12 is_stmt 0 view .LVU2409
 7501 012e 2146     		mov	r1, r4
 7502 0130 2846     		mov	r0, r5
 7503 0132 FFF7FEFF 		bl	find_char
 7504              	.LVL837:
 7505 0136 0446     		mov	r4, r0
 869:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7506              		.loc 1 869 10 view .LVU2410
 7507 0138 0238     		subs	r0, r0, #2
 7508              	.LVL838:
 871:src/display.c **** 	      switch (ltgteq) {
 7509              		.loc 1 871 8 is_stmt 1 view .LVU2411
 871:src/display.c **** 	      switch (ltgteq) {
 7510              		.loc 1 871 15 is_stmt 0 view .LVU2412
 7511 013a 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7512              	.LVL839:
 872:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7513              		.loc 1 872 8 is_stmt 1 view .LVU2413
 7514 013e 472F     		cmp	r7, #71
 7515 0140 00F08F81 		beq	.L771
 874:src/display.c **** 	      }
 7516              		.loc 1 874 25 is_stmt 0 view .LVU2414
 7517 0144 4C2F     		cmp	r7, #76
 7518 0146 08BF     		it	eq
 7519 0148 3C27     		moveq	r7, #60
 7520              	.LVL840:
 7521              	.L757:
 876:src/display.c **** 	      q[2] = ltgteq;
 7522              		.loc 1 876 8 is_stmt 1 view .LVU2415
 7523 014a 7349     		ldr	r1, .L828+28
 7524 014c FFF7FEFF 		bl	scopy
 7525              	.LVL841:
 877:src/display.c **** 
 7526              		.loc 1 877 8 view .LVU2416
 877:src/display.c **** 
 7527              		.loc 1 877 13 is_stmt 0 view .LVU2417
 7528 0150 2770     		strb	r7, [r4]
 879:src/display.c **** 		goto skip;
 7529              		.loc 1 879 8 is_stmt 1 view .LVU2418
 879:src/display.c **** 		goto skip;
 7530              		.loc 1 879 12 is_stmt 0 view .LVU2419
ARM GAS  /tmp/ccobNVTR.s 			page 227


 7531 0152 0121     		movs	r1, #1
 7532 0154 2846     		mov	r0, r5
 7533 0156 FFF7FEFF 		bl	pixel_length
 7534              	.LVL842:
 879:src/display.c **** 		goto skip;
 7535              		.loc 1 879 11 view .LVU2420
 7536 015a 1A28     		cmp	r0, #26
 7537 015c 40F38880 		ble	.L726
 882:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7538              		.loc 1 882 8 is_stmt 1 view .LVU2421
 882:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7539              		.loc 1 882 14 is_stmt 0 view .LVU2422
 7540 0160 0027     		movs	r7, #0
 7541              	.LVL843:
 882:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7542              		.loc 1 882 14 view .LVU2423
 7543 0162 04F8037C 		strb	r7, [r4, #-3]
 883:src/display.c **** 		goto skip;
 7544              		.loc 1 883 8 is_stmt 1 view .LVU2424
 883:src/display.c **** 		goto skip;
 7545              		.loc 1 883 12 is_stmt 0 view .LVU2425
 7546 0166 0121     		movs	r1, #1
 7547 0168 2846     		mov	r0, r5
 7548 016a FFF7FEFF 		bl	pixel_length
 7549              	.LVL844:
 883:src/display.c **** 		goto skip;
 7550              		.loc 1 883 11 view .LVU2426
 7551 016e 1A28     		cmp	r0, #26
 7552 0170 7EDD     		ble	.L726
 886:src/display.c **** 	    }
 7553              		.loc 1 886 8 is_stmt 1 view .LVU2427
 886:src/display.c **** 	    }
 7554              		.loc 1 886 39 is_stmt 0 view .LVU2428
 7555 0172 A8EB0502 		sub	r2, r8, r5
 886:src/display.c **** 	    }
 7556              		.loc 1 886 8 view .LVU2429
 7557 0176 3946     		mov	r1, r7
 7558 0178 C2F12A02 		rsb	r2, r2, #42
 7559 017c 4046     		mov	r0, r8
 7560 017e FFF7FEFF 		bl	xset
 7561              	.LVL845:
 7562              	.L752:
 886:src/display.c **** 	    }
 7563              		.loc 1 886 8 view .LVU2430
 7564              	.LBE435:
 889:src/display.c **** 	    int extra_pixels;
 7565              		.loc 1 889 4 is_stmt 1 view .LVU2431
 889:src/display.c **** 	    int extra_pixels;
 7566              		.loc 1 889 10 is_stmt 0 view .LVU2432
 7567 0182 0C23     		movs	r3, #12
 7568 0184 0293     		str	r3, [sp, #8]
 889:src/display.c **** 	    int extra_pixels;
 7569              		.loc 1 889 27 is_stmt 1 view .LVU2433
 7570 0186 0EE0     		b	.L759
 7571              	.LVL846:
 7572              	.L821:
 7573              	.LBB436:
ARM GAS  /tmp/ccobNVTR.s 			page 228


 897:src/display.c **** 
 7574              		.loc 1 897 6 is_stmt 0 view .LVU2434
 7575 0188 029A     		ldr	r2, [sp, #8]
 7576 018a 0A32     		adds	r2, r2, #10
 7577 018c FFF7FEFF 		bl	xset
 7578              	.LVL847:
 899:src/display.c **** 	  }
 7579              		.loc 1 899 6 is_stmt 1 view .LVU2435
 899:src/display.c **** 	  }
 7580              		.loc 1 899 30 is_stmt 0 view .LVU2436
 7581 0190 B4F14802 		subs	r2, r4, #72
 899:src/display.c **** 	  }
 7582              		.loc 1 899 8 view .LVU2437
 7583 0194 029B     		ldr	r3, [sp, #8]
 899:src/display.c **** 	  }
 7584              		.loc 1 899 30 view .LVU2438
 7585 0196 48BF     		it	mi
 7586 0198 A4F14502 		submi	r2, r4, #69
 899:src/display.c **** 	  }
 7587              		.loc 1 899 8 view .LVU2439
 7588 019c A3EBA203 		sub	r3, r3, r2, asr #2
 7589              	.LBE436:
 889:src/display.c **** 	    int extra_pixels;
 7590              		.loc 1 889 4 view .LVU2440
 7591 01a0 012B     		cmp	r3, #1
 7592              	.LBB437:
 899:src/display.c **** 	  }
 7593              		.loc 1 899 8 view .LVU2441
 7594 01a2 0293     		str	r3, [sp, #8]
 7595              	.LBE437:
 889:src/display.c **** 	    int extra_pixels;
 7596              		.loc 1 889 27 is_stmt 1 view .LVU2442
 889:src/display.c **** 	    int extra_pixels;
 7597              		.loc 1 889 4 is_stmt 0 view .LVU2443
 7598 01a4 64DD     		ble	.L726
 7599              	.LVL848:
 7600              	.L759:
 7601              	.LBB438:
 890:src/display.c **** 
 7602              		.loc 1 890 6 is_stmt 1 view .LVU2444
 892:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7603              		.loc 1 892 6 view .LVU2445
 7604 01a6 02AA     		add	r2, sp, #8
 7605 01a8 4146     		mov	r1, r8
 7606 01aa 03A8     		add	r0, sp, #12
 7607 01ac FFF7FEFF 		bl	set_x_dn
 7608              	.LVL849:
 893:src/display.c **** 	    if (extra_pixels <= 0)
 7609              		.loc 1 893 6 view .LVU2446
 893:src/display.c **** 	    if (extra_pixels <= 0)
 7610              		.loc 1 893 21 is_stmt 0 view .LVU2447
 7611 01b0 0121     		movs	r1, #1
 7612 01b2 2846     		mov	r0, r5
 7613 01b4 FFF7FEFF 		bl	pixel_length
 7614              	.LVL850:
 897:src/display.c **** 
 7615              		.loc 1 897 6 is_stmt 1 view .LVU2448
ARM GAS  /tmp/ccobNVTR.s 			page 229


 893:src/display.c **** 	    if (extra_pixels <= 0)
 7616              		.loc 1 893 21 is_stmt 0 view .LVU2449
 7617 01b8 0446     		mov	r4, r0
 7618              	.LVL851:
 894:src/display.c **** 	      break;
 7619              		.loc 1 894 6 is_stmt 1 view .LVU2450
 894:src/display.c **** 	      break;
 7620              		.loc 1 894 9 is_stmt 0 view .LVU2451
 7621 01ba 4B2C     		cmp	r4, #75
 897:src/display.c **** 
 7622              		.loc 1 897 6 view .LVU2452
 7623 01bc 4FF00001 		mov	r1, #0
 7624 01c0 4046     		mov	r0, r8
 7625              	.LVL852:
 894:src/display.c **** 	      break;
 7626              		.loc 1 894 9 view .LVU2453
 7627 01c2 E1DC     		bgt	.L821
 7628              	.LVL853:
 894:src/display.c **** 	      break;
 7629              		.loc 1 894 9 view .LVU2454
 7630              	.LBE438:
 7631 01c4 54E0     		b	.L726
 7632              	.LVL854:
 7633              	.L812:
 894:src/display.c **** 	      break;
 7634              		.loc 1 894 9 view .LVU2455
 7635              	.LBE433:
 654:src/display.c **** 	    *p2++ = '\006';
 7636              		.loc 1 654 6 is_stmt 1 view .LVU2456
 655:src/display.c **** 	  }
 7637              		.loc 1 655 12 is_stmt 0 view .LVU2457
 7638 01c6 0623     		movs	r3, #6
 7639 01c8 8DF85D30 		strb	r3, [sp, #93]
 654:src/display.c **** 	    *p2++ = '\006';
 7640              		.loc 1 654 12 view .LVU2458
 7641 01cc 8DF85C80 		strb	r8, [sp, #92]
 655:src/display.c **** 	  }
 7642              		.loc 1 655 6 is_stmt 1 view .LVU2459
 7643              	.LVL855:
 658:src/display.c **** 	default:
 7644              		.loc 1 658 2 view .LVU2460
 658:src/display.c **** 	default:
 7645              		.loc 1 658 9 is_stmt 0 view .LVU2461
 7646 01d0 FFF7FEFF 		bl	int_mode
 7647              	.LVL856:
 7648 01d4 0138     		subs	r0, r0, #1
 7649 01d6 C0B2     		uxtb	r0, r0
 7650 01d8 0228     		cmp	r0, #2
 7651 01da 96BF     		itet	ls
 7652 01dc 4F4B     		ldrls	r3, .L828+32
 7653 01de 5049     		ldrhi	r1, .L828+36
 7654 01e0 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7655              	.LVL857:
 665:src/display.c **** 	*q++ = '\006';
 7656              		.loc 1 665 2 is_stmt 1 view .LVU2462
 665:src/display.c **** 	*q++ = '\006';
 7657              		.loc 1 665 6 is_stmt 0 view .LVU2463
ARM GAS  /tmp/ccobNVTR.s 			page 230


 7658 01e4 0DF15E00 		add	r0, sp, #94
 7659              	.LVL858:
 665:src/display.c **** 	*q++ = '\006';
 7660              		.loc 1 665 6 view .LVU2464
 7661 01e8 FFF7FEFF 		bl	scopy
 7662              	.LVL859:
 666:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7663              		.loc 1 666 7 view .LVU2465
 7664 01ec 8046     		mov	r8, r0
 7665              	.LVL860:
 666:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7666              		.loc 1 666 7 view .LVU2466
 7667 01ee 0623     		movs	r3, #6
 7668 01f0 08F8013B 		strb	r3, [r8], #1
 665:src/display.c **** 	*q++ = '\006';
 7669              		.loc 1 665 6 view .LVU2467
 7670 01f4 0646     		mov	r6, r0
 7671              	.LVL861:
 666:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7672              		.loc 1 666 2 is_stmt 1 view .LVU2468
 667:src/display.c **** 
 7673              		.loc 1 667 2 view .LVU2469
 667:src/display.c **** 
 7674              		.loc 1 667 7 is_stmt 0 view .LVU2470
 7675 01f6 FFF7FEFF 		bl	word_size
 7676              	.LVL862:
 7677 01fa 0222     		movs	r2, #2
 7678 01fc 0146     		mov	r1, r0
 7679 01fe 4046     		mov	r0, r8
 7680 0200 FFF7FEFF 		bl	num_arg_0
 7681              	.LVL863:
 669:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7682              		.loc 1 669 19 view .LVU2471
 7683 0204 DFF828C1 		ldr	ip, .L828+52
 7684 0208 DCF80030 		ldr	r3, [ip]
 7685              	.LVL864:
 669:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7686              		.loc 1 669 2 is_stmt 1 view .LVU2472
 669:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7687              		.loc 1 669 5 is_stmt 0 view .LVU2473
 7688 020c 002B     		cmp	r3, #0
 7689 020e 66DD     		ble	.L810
 670:src/display.c **** 	  if (*q == '1')
 7690              		.loc 1 670 4 is_stmt 1 view .LVU2474
 670:src/display.c **** 	  if (*q == '1')
 7691              		.loc 1 670 10 is_stmt 0 view .LVU2475
 7692 0210 C3F10702 		rsb	r2, r3, #7
 7693 0214 5200     		lsls	r2, r2, #1
 670:src/display.c **** 	  if (*q == '1')
 7694              		.loc 1 670 6 view .LVU2476
 7695 0216 0292     		str	r2, [sp, #8]
 671:src/display.c **** 	    n += 2;
 7696              		.loc 1 671 4 is_stmt 1 view .LVU2477
 671:src/display.c **** 	    n += 2;
 7697              		.loc 1 671 7 is_stmt 0 view .LVU2478
 7698 0218 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 7699 021a 3129     		cmp	r1, #49
ARM GAS  /tmp/ccobNVTR.s 			page 231


 672:src/display.c **** 	  if (q[1] == '1')
 7700              		.loc 1 672 6 is_stmt 1 view .LVU2479
 672:src/display.c **** 	  if (q[1] == '1')
 7701              		.loc 1 672 8 is_stmt 0 view .LVU2480
 7702 021c 04BF     		itt	eq
 7703 021e 0232     		addeq	r2, r2, #2
 7704 0220 0292     		streq	r2, [sp, #8]
 673:src/display.c **** 	    n += 2;
 7705              		.loc 1 673 4 is_stmt 1 view .LVU2481
 673:src/display.c **** 	    n += 2;
 7706              		.loc 1 673 7 is_stmt 0 view .LVU2482
 7707 0222 B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 7708 0224 3129     		cmp	r1, #49
 7709 0226 00D1     		bne	.L719
 674:src/display.c **** 	  while (n-- > 0)
 7710              		.loc 1 674 6 is_stmt 1 view .LVU2483
 674:src/display.c **** 	  while (n-- > 0)
 7711              		.loc 1 674 8 is_stmt 0 view .LVU2484
 7712 0228 0232     		adds	r2, r2, #2
 7713              	.L719:
 675:src/display.c **** 	    *p2++ = '\006';
 7714              		.loc 1 675 10 is_stmt 1 view .LVU2485
 675:src/display.c **** 	    *p2++ = '\006';
 7715              		.loc 1 675 12 is_stmt 0 view .LVU2486
 7716 022a 511E     		subs	r1, r2, #1
 675:src/display.c **** 	    *p2++ = '\006';
 7717              		.loc 1 675 10 view .LVU2487
 7718 022c 002A     		cmp	r2, #0
 675:src/display.c **** 	    *p2++ = '\006';
 7719              		.loc 1 675 12 view .LVU2488
 7720 022e 0291     		str	r1, [sp, #8]
 675:src/display.c **** 	    *p2++ = '\006';
 7721              		.loc 1 675 10 view .LVU2489
 7722 0230 40F30C81 		ble	.L807
 676:src/display.c **** 
 7723              		.loc 1 676 12 view .LVU2490
 7724 0234 0621     		movs	r1, #6
 7725              	.L720:
 676:src/display.c **** 
 7726              		.loc 1 676 6 is_stmt 1 view .LVU2491
 7727              	.LVL865:
 676:src/display.c **** 
 7728              		.loc 1 676 12 is_stmt 0 view .LVU2492
 7729 0236 00F8011B 		strb	r1, [r0], #1
 7730              	.LVL866:
 675:src/display.c **** 	    *p2++ = '\006';
 7731              		.loc 1 675 10 is_stmt 1 view .LVU2493
 675:src/display.c **** 	    *p2++ = '\006';
 7732              		.loc 1 675 12 is_stmt 0 view .LVU2494
 7733 023a 029B     		ldr	r3, [sp, #8]
 7734 023c 5A1E     		subs	r2, r3, #1
 675:src/display.c **** 	    *p2++ = '\006';
 7735              		.loc 1 675 10 view .LVU2495
 7736 023e 002B     		cmp	r3, #0
 675:src/display.c **** 	    *p2++ = '\006';
 7737              		.loc 1 675 12 view .LVU2496
 7738 0240 0292     		str	r2, [sp, #8]
ARM GAS  /tmp/ccobNVTR.s 			page 232


 675:src/display.c **** 	    *p2++ = '\006';
 7739              		.loc 1 675 10 view .LVU2497
 7740 0242 F8DC     		bgt	.L720
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7741              		.loc 1 678 4 is_stmt 1 view .LVU2498
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7742              		.loc 1 678 11 is_stmt 0 view .LVU2499
 7743 0244 DCF80030 		ldr	r3, [ip]
 7744 0248 0293     		str	r3, [sp, #8]
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7745              		.loc 1 678 27 is_stmt 1 view .LVU2500
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7746              		.loc 1 678 4 is_stmt 0 view .LVU2501
 7747 024a 002B     		cmp	r3, #0
 7748 024c 47DB     		blt	.L810
 7749              	.L761:
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7750              		.loc 1 678 4 view .LVU2502
 7751 024e 2D4E     		ldr	r6, .L828+8
 7752              	.L725:
 679:src/display.c **** 	}
 7753              		.loc 1 679 6 is_stmt 1 view .LVU2503
 679:src/display.c **** 	}
 7754              		.loc 1 679 20 is_stmt 0 view .LVU2504
 7755 0250 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 7756 0252 C2F3C202 		ubfx	r2, r2, #3, #3
 679:src/display.c **** 	}
 7757              		.loc 1 679 12 view .LVU2505
 7758 0256 9A42     		cmp	r2, r3
 7759 0258 0CBF     		ite	eq
 7760 025a 7C23     		moveq	r3, #124
 7761 025c 2723     		movne	r3, #39
 7762              	.LVL867:
 679:src/display.c **** 	}
 7763              		.loc 1 679 12 view .LVU2506
 7764 025e 00F8013B 		strb	r3, [r0], #1
 7765              	.LVL868:
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7766              		.loc 1 678 35 is_stmt 1 view .LVU2507
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7767              		.loc 1 678 36 is_stmt 0 view .LVU2508
 7768 0262 029B     		ldr	r3, [sp, #8]
 7769 0264 013B     		subs	r3, r3, #1
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7770              		.loc 1 678 4 view .LVU2509
 7771 0266 002B     		cmp	r3, #0
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7772              		.loc 1 678 36 view .LVU2510
 7773 0268 0293     		str	r3, [sp, #8]
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7774              		.loc 1 678 27 is_stmt 1 view .LVU2511
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7775              		.loc 1 678 4 is_stmt 0 view .LVU2512
 7776 026a F1DA     		bge	.L725
 681:src/display.c ****       }
 7777              		.loc 1 681 2 is_stmt 1 view .LVU2513
 681:src/display.c ****       }
ARM GAS  /tmp/ccobNVTR.s 			page 233


 7778              		.loc 1 681 5 is_stmt 0 view .LVU2514
 7779 026c 002C     		cmp	r4, #0
 7780 026e 39D1     		bne	.L822
 7781              	.LVL869:
 7782              	.L726:
 904:src/display.c ****       set_status_top(buf2);
 7783              		.loc 1 904 11 is_stmt 1 view .LVU2515
 7784 0270 2846     		mov	r0, r5
 7785 0272 FFF7FEFF 		bl	set_status
 7786              	.LVL870:
 905:src/display.c ****       
 7787              		.loc 1 905 7 view .LVU2516
 7788              	.LBB441:
 7789              	.LBI441:
3076:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7790              		.loc 1 3076 19 view .LVU2517
 7791              	.LBB442:
3077:src/display.c ****       }
 7792              		.loc 1 3077 2 view .LVU2518
 7793 0276 96F91630 		ldrsb	r3, [r6, #22]
 7794 027a 002B     		cmp	r3, #0
 7795 027c 26DA     		bge	.L823
 7796              	.L773:
 7797 027e 0121     		movs	r1, #1
 7798              	.L760:
 7799              	.LVL871:
 7800              	.LBB443:
 7801              	.LBI443:
2918:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7802              		.loc 1 2918 19 view .LVU2519
 7803              	.LBB444:
2919:src/display.c ****       }
 7804              		.loc 1 2919 2 view .LVU2520
 7805 0280 4FF43873 		mov	r3, #736
 7806 0284 0093     		str	r3, [sp]
 7807 0286 17A8     		add	r0, sp, #92
 7808              	.LVL872:
2919:src/display.c ****       }
 7809              		.loc 1 2919 2 is_stmt 0 view .LVU2521
 7810 0288 40F24A23 		movw	r3, #586
 7811 028c 1922     		movs	r2, #25
 7812 028e FFF7FEFF 		bl	s_s_sized
 7813              	.LVL873:
2919:src/display.c ****       }
 7814              		.loc 1 2919 2 view .LVU2522
 7815              	.LBE444:
 7816              	.LBE443:
 7817              	.LBE442:
 7818              	.LBE441:
 907:src/display.c **** #else
 7819              		.loc 1 907 5 view .LVU2523
 7820 0292 23B0     		add	sp, sp, #140
 7821              		.cfi_remember_state
 7822              		.cfi_def_cfa_offset 28
 7823              		@ sp needed
 7824 0294 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7825              	.LVL874:
ARM GAS  /tmp/ccobNVTR.s 			page 234


 7826              	.L816:
 7827              		.cfi_restore_state
 766:src/display.c **** 	  *p2++ = '\344';
 7828              		.loc 1 766 4 is_stmt 1 view .LVU2524
 767:src/display.c **** 	  *p2++ = shift_char;
 7829              		.loc 1 767 4 view .LVU2525
 766:src/display.c **** 	  *p2++ = '\344';
 7830              		.loc 1 766 10 is_stmt 0 view .LVU2526
 7831 0298 4EF20743 		movw	r3, #58375
 769:src/display.c **** 	}
 7832              		.loc 1 769 6 view .LVU2527
 7833 029c 2149     		ldr	r1, .L828+40
 768:src/display.c **** 	  q = "\024";
 7834              		.loc 1 768 10 view .LVU2528
 7835 029e 8DF85E80 		strb	r8, [sp, #94]
 766:src/display.c **** 	  *p2++ = '\344';
 7836              		.loc 1 766 10 view .LVU2529
 7837 02a2 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 768:src/display.c **** 	  q = "\024";
 7838              		.loc 1 768 4 is_stmt 1 view .LVU2530
 7839              	.LVL875:
 769:src/display.c **** 	}
 7840              		.loc 1 769 4 view .LVU2531
 768:src/display.c **** 	  q = "\024";
 7841              		.loc 1 768 7 is_stmt 0 view .LVU2532
 7842 02a6 0DF15F00 		add	r0, sp, #95
 7843              	.LVL876:
 7844              	.L737:
 814:src/display.c **** 
 7845              		.loc 1 814 2 is_stmt 1 view .LVU2533
 814:src/display.c **** 
 7846              		.loc 1 814 7 is_stmt 0 view .LVU2534
 7847 02aa FFF7FEFF 		bl	scopy
 7848              	.LVL877:
 814:src/display.c **** 
 7849              		.loc 1 814 7 view .LVU2535
 7850 02ae 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 7851              	.LVL878:
 819:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7852              		.loc 1 819 5 view .LVU2536
 7853 02b0 5B07     		lsls	r3, r3, #29
 598:src/display.c ****       char buf2[42], *p2 = buf2;
 7854              		.loc 1 598 22 view .LVU2537
 7855 02b2 A846     		mov	r8, r5
 7856              	.LVL879:
 819:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7857              		.loc 1 819 2 is_stmt 1 view .LVU2538
 819:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7858              		.loc 1 819 5 is_stmt 0 view .LVU2539
 7859 02b4 7FF50AAF 		bpl	.L743
 7860              	.L817:
 820:src/display.c **** 	} else if (State2.runmode) {
 7861              		.loc 1 820 4 is_stmt 1 view .LVU2540
 7862 02b8 1B49     		ldr	r1, .L828+44
 7863 02ba FFF7FEFF 		bl	scopy
 7864              	.LVL880:
 904:src/display.c ****       set_status_top(buf2);
ARM GAS  /tmp/ccobNVTR.s 			page 235


 7865              		.loc 1 904 11 view .LVU2541
 7866 02be 2846     		mov	r0, r5
 7867 02c0 FFF7FEFF 		bl	set_status
 7868              	.LVL881:
 905:src/display.c ****       
 7869              		.loc 1 905 7 view .LVU2542
 7870              	.LBB448:
3076:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7871              		.loc 1 3076 19 view .LVU2543
 7872              	.LBB447:
3077:src/display.c ****       }
 7873              		.loc 1 3077 2 view .LVU2544
 7874 02c4 96F91630 		ldrsb	r3, [r6, #22]
 7875 02c8 002B     		cmp	r3, #0
 7876 02ca D8DB     		blt	.L773
 7877              	.LVL882:
 7878              	.L823:
 7879              	.LBB445:
 7880              	.LBI445:
3066:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7881              		.loc 1 3066 18 view .LVU2545
 7882              	.LBB446:
3067:src/display.c ****       }
 7883              		.loc 1 3067 2 view .LVU2546
3067:src/display.c ****       }
 7884              		.loc 1 3067 9 is_stmt 0 view .LVU2547
 7885 02cc 0021     		movs	r1, #0
 7886 02ce 17A8     		add	r0, sp, #92
 7887              	.LVL883:
3067:src/display.c ****       }
 7888              		.loc 1 3067 9 view .LVU2548
 7889 02d0 FFF7FEFF 		bl	pixel_length
 7890              	.LVL884:
3067:src/display.c ****       }
 7891              		.loc 1 3067 9 view .LVU2549
 7892              	.LBE446:
 7893              	.LBE445:
3077:src/display.c ****       }
 7894              		.loc 1 3077 2 view .LVU2550
 7895 02d4 1A28     		cmp	r0, #26
 7896 02d6 D4BF     		ite	le
 7897 02d8 0021     		movle	r1, #0
 7898 02da 0121     		movgt	r1, #1
 7899 02dc D0E7     		b	.L760
 7900              	.LVL885:
 7901              	.L810:
3077:src/display.c ****       }
 7902              		.loc 1 3077 2 view .LVU2551
 7903 02de 094E     		ldr	r6, .L828+8
 7904              	.LBE447:
 7905              	.LBE448:
 681:src/display.c ****       }
 7906              		.loc 1 681 2 is_stmt 1 view .LVU2552
 681:src/display.c ****       }
 7907              		.loc 1 681 5 is_stmt 0 view .LVU2553
 7908 02e0 002C     		cmp	r4, #0
 7909 02e2 C5D0     		beq	.L726
ARM GAS  /tmp/ccobNVTR.s 			page 236


 7910              	.L822:
 598:src/display.c ****       char buf2[42], *p2 = buf2;
 7911              		.loc 1 598 22 view .LVU2554
 7912 02e4 A846     		mov	r8, r5
 7913              	.LVL886:
 598:src/display.c ****       char buf2[42], *p2 = buf2;
 7914              		.loc 1 598 22 view .LVU2555
 7915 02e6 F5E6     		b	.L716
 7916              	.LVL887:
 7917              	.L814:
 715:src/display.c **** 	  *p2 = '\015';
 7918              		.loc 1 715 4 is_stmt 1 view .LVU2556
 715:src/display.c **** 	  *p2 = '\015';
 7919              		.loc 1 715 10 is_stmt 0 view .LVU2557
 7920 02e8 2022     		movs	r2, #32
 716:src/display.c **** 	  goto skip;
 7921              		.loc 1 716 8 view .LVU2558
 7922 02ea 0D23     		movs	r3, #13
 715:src/display.c **** 	  *p2 = '\015';
 7923              		.loc 1 715 10 view .LVU2559
 7924 02ec 0270     		strb	r2, [r0]
 716:src/display.c **** 	  goto skip;
 7925              		.loc 1 716 4 is_stmt 1 view .LVU2560
 716:src/display.c **** 	  goto skip;
 7926              		.loc 1 716 8 is_stmt 0 view .LVU2561
 7927 02ee 4370     		strb	r3, [r0, #1]
 717:src/display.c **** 	}
 7928              		.loc 1 717 4 is_stmt 1 view .LVU2562
 7929 02f0 BEE7     		b	.L726
 7930              	.LVL888:
 7931              	.L813:
 710:src/display.c **** 	  *p2 = '\024';
 7932              		.loc 1 710 4 view .LVU2563
 710:src/display.c **** 	  *p2 = '\024';
 7933              		.loc 1 710 10 is_stmt 0 view .LVU2564
 7934 02f2 2022     		movs	r2, #32
 711:src/display.c **** 	  goto skip;
 7935              		.loc 1 711 8 view .LVU2565
 7936 02f4 1423     		movs	r3, #20
 710:src/display.c **** 	  *p2 = '\024';
 7937              		.loc 1 710 10 view .LVU2566
 7938 02f6 0270     		strb	r2, [r0]
 711:src/display.c **** 	  goto skip;
 7939              		.loc 1 711 4 is_stmt 1 view .LVU2567
 711:src/display.c **** 	  goto skip;
 7940              		.loc 1 711 8 is_stmt 0 view .LVU2568
 7941 02f8 4370     		strb	r3, [r0, #1]
 712:src/display.c **** 	}
 7942              		.loc 1 712 4 is_stmt 1 view .LVU2569
 7943 02fa B9E7     		b	.L726
 7944              	.L829:
 7945              		.align	2
 7946              	.L828:
 7947 02fc 00000000 		.word	main_ram
 7948 0300 00000000 		.word	.LANCHOR15
 7949 0304 00000000 		.word	StateWhileOn
 7950 0308 10000000 		.word	.LC7
ARM GAS  /tmp/ccobNVTR.s 			page 237


 7951 030c 1C000000 		.word	.LC9
 7952 0310 34000000 		.word	.LC14
 7953 0314 00000000 		.word	RectPolConv
 7954 0318 4C000000 		.word	.LC19
 7955 031c 00000000 		.word	.LANCHOR16
 7956 0320 00000000 		.word	.LC3
 7957 0324 24000000 		.word	.LC10
 7958 0328 44000000 		.word	.LC17
 7959 032c 00000000 		.word	ShowRegister
 7960 0330 00000000 		.word	IntMaxWindow
 7961              	.LVL889:
 7962              	.L738:
 779:src/display.c **** 	    q = "\007\207i";
 7963              		.loc 1 779 4 view .LVU2570
 779:src/display.c **** 	    q = "\007\207i";
 7964              		.loc 1 779 8 is_stmt 0 view .LVU2571
 7965 0334 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
 779:src/display.c **** 	    q = "\007\207i";
 7966              		.loc 1 779 7 view .LVU2572
 7967 0336 13F0C00F 		tst	r3, #192
 7968 033a 40F08980 		bne	.L824
 784:src/display.c **** 	    q = "\007\307<";
 7969              		.loc 1 784 9 is_stmt 1 view .LVU2573
 784:src/display.c **** 	    q = "\007\307<";
 7970              		.loc 1 784 23 is_stmt 0 view .LVU2574
 7971 033e 4A4B     		ldr	r3, .L830
 7972 0340 1B68     		ldr	r3, [r3]
 784:src/display.c **** 	    q = "\007\307<";
 7973              		.loc 1 784 12 view .LVU2575
 7974 0342 012B     		cmp	r3, #1
 7975 0344 00F08B80 		beq	.L825
 789:src/display.c **** 	    q = "\007\307y";
 7976              		.loc 1 789 9 is_stmt 1 view .LVU2576
 789:src/display.c **** 	    q = "\007\307y";
 7977              		.loc 1 789 12 is_stmt 0 view .LVU2577
 7978 0348 022B     		cmp	r3, #2
 7979 034a 31D0     		beq	.L826
 795:src/display.c **** 	    q = "\007\207\007";
 7980              		.loc 1 795 9 is_stmt 1 view .LVU2578
 795:src/display.c **** 	    q = "\007\207\007";
 7981              		.loc 1 795 13 is_stmt 0 view .LVU2579
 7982 034c FFF7FEFF 		bl	get_trig_mode
 7983              	.LVL890:
 795:src/display.c **** 	    q = "\007\207\007";
 7984              		.loc 1 795 12 view .LVU2580
 7985 0350 0228     		cmp	r0, #2
 7986 0352 78D0     		beq	.L769
 801:src/display.c **** #else
 7987              		.loc 1 801 6 is_stmt 1 view .LVU2581
 801:src/display.c **** #else
 7988              		.loc 1 801 11 is_stmt 0 view .LVU2582
 7989 0354 FFF7FEFF 		bl	is_dblmode
 7990              	.LVL891:
 599:src/display.c ****       int n;
 7991              		.loc 1 599 23 view .LVU2583
 7992 0358 444B     		ldr	r3, .L830+4
 7993 035a 4549     		ldr	r1, .L830+8
ARM GAS  /tmp/ccobNVTR.s 			page 238


 7994 035c 0028     		cmp	r0, #0
 7995 035e 18BF     		it	ne
 7996 0360 1946     		movne	r1, r3
 7997 0362 17A8     		add	r0, sp, #92
 7998              	.LVL892:
 599:src/display.c ****       int n;
 7999              		.loc 1 599 23 view .LVU2584
 8000 0364 A1E7     		b	.L737
 8001              	.LVL893:
 8002              	.L728:
 701:src/display.c **** 	    *p2++ = shift_char;
 8003              		.loc 1 701 30 discriminator 1 view .LVU2585
 8004 0366 FFF7FEFF 		bl	is_dblmode
 8005              	.LVL894:
 701:src/display.c **** 	    *p2++ = shift_char;
 8006              		.loc 1 701 26 discriminator 1 view .LVU2586
 8007 036a 0028     		cmp	r0, #0
 8008 036c 3FF46CAE 		beq	.L730
 706:src/display.c **** 	  }
 8009              		.loc 1 706 6 is_stmt 1 view .LVU2587
 8010              	.LVL895:
 706:src/display.c **** 	  }
 8011              		.loc 1 706 12 is_stmt 0 view .LVU2588
 8012 0370 4423     		movs	r3, #68
 8013 0372 8DF85C30 		strb	r3, [sp, #92]
 706:src/display.c **** 	  }
 8014              		.loc 1 706 9 view .LVU2589
 8015 0376 0DF15D00 		add	r0, sp, #93
 8016              	.LVL896:
 706:src/display.c **** 	  }
 8017              		.loc 1 706 9 view .LVU2590
 8018 037a 6CE6     		b	.L729
 8019              	.LVL897:
 8020              	.L819:
 8021              	.LBB449:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8022              		.loc 1 834 75 discriminator 2 view .LVU2591
 8023 037c FFF7FEFF 		bl	stack_size
 8024              	.LVL898:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8025              		.loc 1 834 62 discriminator 2 view .LVU2592
 8026 0380 D9F80010 		ldr	r1, [r9]
 8027 0384 6330     		adds	r0, r0, #99
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8028              		.loc 1 834 46 discriminator 2 view .LVU2593
 8029 0386 8842     		cmp	r0, r1
 8030 0388 FFF6B1AE 		blt	.L746
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8031              		.loc 1 834 91 discriminator 4 view .LVU2594
 8032 038c FFF7FEFF 		bl	get_cmdline
 8033              	.LVL899:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8034              		.loc 1 834 88 discriminator 4 view .LVU2595
 8035 0390 20B1     		cbz	r0, .L749
 835:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8036              		.loc 1 835 7 view .LVU2596
 8037 0392 002C     		cmp	r4, #0
ARM GAS  /tmp/ccobNVTR.s 			page 239


 8038 0394 60D0     		beq	.L748
 835:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8039              		.loc 1 835 28 discriminator 1 view .LVU2597
 8040 0396 F37D     		ldrb	r3, [r6, #23]	@ zero_extendqisi2
 835:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8041              		.loc 1 835 10 discriminator 1 view .LVU2598
 8042 0398 5A06     		lsls	r2, r3, #25
 8043 039a 5DD4     		bmi	.L748
 8044              	.L749:
 8045 039c D9F80010 		ldr	r1, [r9]
 8046 03a0 A5E6     		b	.L746
 8047              	.L818:
 830:src/display.c **** 	    goto skip;
 8048              		.loc 1 830 6 is_stmt 1 view .LVU2599
 8049 03a2 6520     		movs	r0, #101
 8050 03a4 FFF7FEFF 		bl	get_reg_n_int
 8051              	.LVL900:
 8052 03a8 4246     		mov	r2, r8
 8053 03aa FFF7FEFF 		bl	set_int_x
 8054              	.LVL901:
 831:src/display.c **** 	  }
 8055              		.loc 1 831 6 view .LVU2600
 8056 03ae 5FE7     		b	.L726
 8057              	.LVL902:
 8058              	.L826:
 831:src/display.c **** 	  }
 8059              		.loc 1 831 6 is_stmt 0 view .LVU2601
 8060              	.LBE449:
 790:src/display.c **** 	    p = scopy(p, q);
 8061              		.loc 1 790 6 is_stmt 1 view .LVU2602
 791:src/display.c **** 	    goto no_copy;
 8062              		.loc 1 791 6 view .LVU2603
 791:src/display.c **** 	    goto no_copy;
 8063              		.loc 1 791 10 is_stmt 0 view .LVU2604
 8064 03b0 3049     		ldr	r1, .L830+12
 8065              	.LVL903:
 8066              	.L811:
 786:src/display.c **** 	    goto no_copy;
 8067              		.loc 1 786 10 view .LVU2605
 8068 03b2 2846     		mov	r0, r5
 8069 03b4 FFF7FEFF 		bl	scopy
 8070              	.LVL904:
 8071 03b8 737D     		ldrb	r3, [r6, #21]	@ zero_extendqisi2
 8072 03ba 8046     		mov	r8, r0
 8073              	.LVL905:
 787:src/display.c **** 	  }
 8074              		.loc 1 787 6 is_stmt 1 view .LVU2606
 599:src/display.c ****       int n;
 8075              		.loc 1 599 23 is_stmt 0 view .LVU2607
 8076 03bc 17A8     		add	r0, sp, #92
 8077              	.LVL906:
 787:src/display.c **** 	  }
 8078              		.loc 1 787 6 view .LVU2608
 8079 03be 82E6     		b	.L739
 8080              	.LVL907:
 8081              	.L815:
 720:src/display.c **** 	  if (State2.wascomplex) {
ARM GAS  /tmp/ccobNVTR.s 			page 240


 8082              		.loc 1 720 28 discriminator 1 view .LVU2609
 8083 03c0 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
 720:src/display.c **** 	  if (State2.wascomplex) {
 8084              		.loc 1 720 24 discriminator 1 view .LVU2610
 8085 03c2 13F0C00F 		tst	r3, #192
 8086 03c6 45D1     		bne	.L765
 720:src/display.c **** 	  if (State2.wascomplex) {
 8087              		.loc 1 720 60 discriminator 2 view .LVU2611
 8088 03c8 274B     		ldr	r3, .L830
 8089 03ca 1B68     		ldr	r3, [r3]
 720:src/display.c **** 	  if (State2.wascomplex) {
 8090              		.loc 1 720 46 discriminator 2 view .LVU2612
 8091 03cc 002B     		cmp	r3, #0
 8092 03ce 3FF44EAE 		beq	.L733
 721:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8093              		.loc 1 721 4 is_stmt 1 view .LVU2613
 724:src/display.c **** 	    if (RectPolConv == 1) {
 8094              		.loc 1 724 9 view .LVU2614
 725:src/display.c **** 	      q = "\007\306<";
 8095              		.loc 1 725 6 view .LVU2615
 729:src/display.c **** 	    }
 8096              		.loc 1 729 10 is_stmt 0 view .LVU2616
 8097 03d2 2949     		ldr	r1, .L830+16
 8098 03d4 294A     		ldr	r2, .L830+20
 8099 03d6 012B     		cmp	r3, #1
 8100 03d8 18BF     		it	ne
 8101 03da 1146     		movne	r1, r2
 8102              	.L734:
 8103              	.LVL908:
 732:src/display.c **** 
 8104              		.loc 1 732 4 is_stmt 1 view .LVU2617
 732:src/display.c **** 
 8105              		.loc 1 732 8 is_stmt 0 view .LVU2618
 8106 03dc 2846     		mov	r0, r5
 8107              	.LVL909:
 732:src/display.c **** 
 8108              		.loc 1 732 8 view .LVU2619
 8109 03de FFF7FEFF 		bl	scopy
 8110              	.LVL910:
 732:src/display.c **** 
 8111              		.loc 1 732 8 view .LVU2620
 8112 03e2 8046     		mov	r8, r0
 8113              	.LVL911:
 734:src/display.c **** 	}
 8114              		.loc 1 734 4 is_stmt 1 view .LVU2621
 8115 03e4 76E6     		b	.L716
 8116              	.LVL912:
 8117              	.L767:
 743:src/display.c **** #endif
 8118              		.loc 1 743 19 is_stmt 0 view .LVU2622
 8119 03e6 2649     		ldr	r1, .L830+24
 8120 03e8 4EE6     		b	.L735
 8121              	.LVL913:
 8122              	.L820:
 8123              	.LBB450:
 8124              	.LBB439:
 839:src/display.c **** 
ARM GAS  /tmp/ccobNVTR.s 			page 241


 8125              		.loc 1 839 8 is_stmt 1 view .LVU2623
 841:src/display.c **** 	      UState.nothousands = 1;
 8126              		.loc 1 841 8 is_stmt 0 view .LVU2624
 8127 03ea 2A22     		movs	r2, #42
 8128 03ec 2846     		mov	r0, r5
 839:src/display.c **** 
 8129              		.loc 1 839 44 view .LVU2625
 8130 03ee 93F8E787 		ldrb	r8, [r3, #2023]	@ zero_extendqisi2
 8131              	.LVL914:
 839:src/display.c **** 
 8132              		.loc 1 839 44 view .LVU2626
 8133 03f2 244C     		ldr	r4, .L830+28
 8134              	.LVL915:
 841:src/display.c **** 	      UState.nothousands = 1;
 8135              		.loc 1 841 8 view .LVU2627
 8136 03f4 FFF7FEFF 		bl	xset
 8137              	.LVL916:
 842:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8138              		.loc 1 842 27 view .LVU2628
 8139 03f8 3A68     		ldr	r2, [r7]
 8140 03fa 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8141 03fe 43F04003 		orr	r3, r3, #64
 8142 0402 82F8E737 		strb	r3, [r2, #2023]
 843:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8143              		.loc 1 843 8 view .LVU2629
 8144 0406 2946     		mov	r1, r5
 8145 0408 03A8     		add	r0, sp, #12
 8146 040a FFF7FEFF 		bl	set_x_hms
 8147              	.LVL917:
 844:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8148              		.loc 1 844 27 view .LVU2630
 8149 040e 3B68     		ldr	r3, [r7]
 8150 0410 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 839:src/display.c **** 
 8151              		.loc 1 839 44 view .LVU2631
 8152 0414 C8F38018 		ubfx	r8, r8, #6, #1
 8153              	.LVL918:
 841:src/display.c **** 	      UState.nothousands = 1;
 8154              		.loc 1 841 8 is_stmt 1 view .LVU2632
 842:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8155              		.loc 1 842 8 view .LVU2633
 843:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8156              		.loc 1 843 8 view .LVU2634
 844:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8157              		.loc 1 844 8 view .LVU2635
 844:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8158              		.loc 1 844 27 is_stmt 0 view .LVU2636
 8159 0418 68F38612 		bfi	r2, r8, #6, #1
 8160 041c 83F8E727 		strb	r2, [r3, #2023]
 849:src/display.c **** 	      while (*p) {
 8161              		.loc 1 849 8 is_stmt 1 view .LVU2637
 8162              	.LVL919:
 850:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8163              		.loc 1 850 8 view .LVU2638
 850:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8164              		.loc 1 850 14 view .LVU2639
 850:src/display.c **** 		replace_char(buf, p[0], p[1]);
ARM GAS  /tmp/ccobNVTR.s 			page 242


 8165              		.loc 1 850 15 is_stmt 0 view .LVU2640
 8166 0420 4021     		movs	r1, #64
 844:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8167              		.loc 1 844 27 view .LVU2641
 8168 0422 0522     		movs	r2, #5
 8169 0424 05E0     		b	.L755
 8170              	.LVL920:
 8171              	.L827:
 850:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8172              		.loc 1 850 15 view .LVU2642
 8173 0426 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8174              	.LVL921:
 850:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8175              		.loc 1 850 14 view .LVU2643
 8176 042a 0029     		cmp	r1, #0
 8177 042c 3FF420AF 		beq	.L726
 8178 0430 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8179              	.LVL922:
 8180              	.L755:
 851:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8181              		.loc 1 851 3 is_stmt 1 view .LVU2644
 8182 0432 2846     		mov	r0, r5
 8183 0434 FFF7FEFF 		bl	replace_char
 8184              	.LVL923:
 852:src/display.c **** 		  goto skip;
 8185              		.loc 1 852 3 view .LVU2645
 852:src/display.c **** 		  goto skip;
 8186              		.loc 1 852 7 is_stmt 0 view .LVU2646
 8187 0438 0121     		movs	r1, #1
 8188 043a 2846     		mov	r0, r5
 8189 043c FFF7FEFF 		bl	pixel_length
 8190              	.LVL924:
 855:src/display.c **** 	      }
 8191              		.loc 1 855 3 is_stmt 1 view .LVU2647
 850:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8192              		.loc 1 850 14 view .LVU2648
 852:src/display.c **** 		  goto skip;
 8193              		.loc 1 852 6 is_stmt 0 view .LVU2649
 8194 0440 1A28     		cmp	r0, #26
 8195 0442 F0DC     		bgt	.L827
 8196 0444 14E7     		b	.L726
 8197              	.LVL925:
 8198              	.L769:
 852:src/display.c **** 		  goto skip;
 8199              		.loc 1 852 6 view .LVU2650
 8200              	.LBE439:
 8201              	.LBE450:
 796:src/display.c **** 	  }
 8202              		.loc 1 796 8 view .LVU2651
 8203 0446 1049     		ldr	r1, .L830+32
 599:src/display.c ****       int n;
 8204              		.loc 1 599 23 view .LVU2652
 8205 0448 17A8     		add	r0, sp, #92
 8206              	.LVL926:
 599:src/display.c ****       int n;
 8207              		.loc 1 599 23 view .LVU2653
 8208 044a 2EE7     		b	.L737
ARM GAS  /tmp/ccobNVTR.s 			page 243


 8209              	.LVL927:
 8210              	.L807:
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8211              		.loc 1 678 4 is_stmt 1 view .LVU2654
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8212              		.loc 1 678 11 is_stmt 0 view .LVU2655
 8213 044c 0293     		str	r3, [sp, #8]
 678:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8214              		.loc 1 678 27 is_stmt 1 view .LVU2656
 8215 044e FEE6     		b	.L761
 8216              	.LVL928:
 8217              	.L824:
 780:src/display.c **** 	    p = scopy(p, q);
 8218              		.loc 1 780 6 view .LVU2657
 781:src/display.c **** 	    goto no_copy;
 8219              		.loc 1 781 6 view .LVU2658
 781:src/display.c **** 	    goto no_copy;
 8220              		.loc 1 781 10 is_stmt 0 view .LVU2659
 8221 0450 0E49     		ldr	r1, .L830+36
 8222 0452 AEE7     		b	.L811
 8223              	.LVL929:
 8224              	.L765:
 722:src/display.c **** 	  }
 8225              		.loc 1 722 8 view .LVU2660
 8226 0454 0D49     		ldr	r1, .L830+36
 8227 0456 C1E7     		b	.L734
 8228              	.LVL930:
 8229              	.L748:
 8230              	.LBB451:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8231              		.loc 1 834 4 discriminator 7 view .LVU2661
 8232 0458 D9F80010 		ldr	r1, [r9]
 8233 045c 48E6     		b	.L750
 8234              	.LVL931:
 8235              	.L825:
 834:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8236              		.loc 1 834 4 discriminator 7 view .LVU2662
 8237              	.LBE451:
 785:src/display.c **** 	    p = scopy(p, q);
 8238              		.loc 1 785 6 is_stmt 1 view .LVU2663
 786:src/display.c **** 	    goto no_copy;
 8239              		.loc 1 786 6 view .LVU2664
 786:src/display.c **** 	    goto no_copy;
 8240              		.loc 1 786 10 is_stmt 0 view .LVU2665
 8241 045e 0C49     		ldr	r1, .L830+40
 8242 0460 A7E7     		b	.L811
 8243              	.LVL932:
 8244              	.L771:
 8245              	.LBB452:
 8246              	.LBB440:
 873:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8247              		.loc 1 873 25 view .LVU2666
 8248 0462 3E27     		movs	r7, #62
 8249              	.LVL933:
 873:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8250              		.loc 1 873 25 view .LVU2667
 8251 0464 71E6     		b	.L757
ARM GAS  /tmp/ccobNVTR.s 			page 244


 8252              	.L831:
 8253 0466 00BF     		.align	2
 8254              	.L830:
 8255 0468 00000000 		.word	RectPolConv
 8256 046c 28000000 		.word	.LC11
 8257 0470 30000000 		.word	.LC13
 8258 0474 40000000 		.word	.LC16
 8259 0478 04000000 		.word	.LC4
 8260 047c 0C000000 		.word	.LC6
 8261 0480 14000000 		.word	.LC8
 8262 0484 00000000 		.word	.LANCHOR17
 8263 0488 2C000000 		.word	.LC12
 8264 048c 08000000 		.word	.LC5
 8265 0490 3C000000 		.word	.LC15
 8266              	.LBE440:
 8267              	.LBE452:
 8268              		.cfi_endproc
 8269              	.LFE16:
 8271              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8272              		.align	2
 8273              	.LC20:
 8274 0000 0D00     		.ascii	"\015\000"
 8275 0002 0000     		.align	2
 8276              	.LC21:
 8277 0004 060600   		.ascii	"\006\006\000"
 8278 0007 00       		.align	2
 8279              	.LC23:
 8280 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8280      492C2057 
 8280      77414C74 
 8280      4500
 8281 0016 0000     		.align	2
 8282              	.LC24:
 8283 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8283      2055204C 
 8283      20492C20 
 8283      20572041 
 8283      204C2054 
 8284 0032 0000     		.align	2
 8285              	.LC25:
 8286 0034 2000     		.ascii	" \000"
 8287 0036 0000     		.align	2
 8288              	.LC26:
 8289 0038 48595000 		.ascii	"HYP\000"
 8290              		.align	2
 8291              	.LC29:
 8292 003c 7F060600 		.ascii	"\177\006\006\000"
 8293              		.align	2
 8294              	.LC30:
 8295 0040 3020746F 		.ascii	"0 to 255\000"
 8295      20323535 
 8295      00
 8296 0049 000000   		.align	2
 8297              	.LC31:
 8298 004c 46726565 		.ascii	"Free:\000"
 8298      3A00
 8299 0052 0000     		.align	2
ARM GAS  /tmp/ccobNVTR.s 			page 245


 8300              	.LC32:
 8301 0054 202C2046 		.ascii	" , FL. \000"
 8301      4C2E2000 
 8302              		.align	2
 8303              	.LC33:
 8304 005c 52656773 		.ascii	"Regs:\000"
 8304      3A00
 8305 0062 0000     		.align	2
 8306              	.LC34:
 8307 0064 20910606 		.ascii	" \221\006\006+\000"
 8307      2B00
 8308 006a 0000     		.align	2
 8309              	.LC35:
 8310 006c 202C204C 		.ascii	" , Loc. \000"
 8310      6F632E20 
 8310      00
 8311 0075 000000   		.align	2
 8312              	.LC36:
 8313 0078 464C2000 		.ascii	"FL \000"
 8314              		.align	2
 8315              	.LC37:
 8316 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8316      06413A44 
 8316      064C494A 
 8316      4B00
 8317 008a 0000     		.align	2
 8318              	.LC38:
 8319 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8319      302D2E31 
 8319      3500
 8320 0096 0000     		.align	2
 8321              	.LC39:
 8322 0098 43414C4C 		.ascii	"CALLS\000"
 8322      5300
 8323 009e 0000     		.align	2
 8324              	.LC40:
 8325 00a0 52656720 		.ascii	"Reg \000"
 8325      00
 8326 00a5 000000   		.align	2
 8327              	.LC41:
 8328 00a8 00       		.ascii	"\000"
 8329 00a9 000000   		.align	2
 8330              	.LC42:
 8331 00ac 202D2D2D 		.ascii	" ---\000"
 8331      00
 8332 00b1 000000   		.align	2
 8333              	.LC28:
 8334 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8334      093E0A00 
 8335              		.align	2
 8336              	.LC27:
 8337 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8337      41424344 
 8337      4C494A4B 
 8337      00
 8338              		.section	.text.display,"ax",%progbits
 8339              		.align	1
ARM GAS  /tmp/ccobNVTR.s 			page 246


 8340              		.p2align 2,,3
 8341              		.global	display
 8342              		.syntax unified
 8343              		.thumb
 8344              		.thumb_func
 8345              		.fpu fpv4-sp-d16
 8347              	display:
 8348              	.LFB34:
2540:src/display.c **** 	int i, j;
 8349              		.loc 1 2540 26 is_stmt 1 view -0
 8350              		.cfi_startproc
 8351              		@ args = 0, pretend = 0, frame = 160
 8352              		@ frame_needed = 0, uses_anonymous_args = 0
2541:src/display.c **** 	char buf[40], *bp = buf;
 8353              		.loc 1 2541 2 view .LVU2669
2542:src/display.c **** 	const char *p;
 8354              		.loc 1 2542 2 view .LVU2670
2540:src/display.c **** 	int i, j;
 8355              		.loc 1 2540 26 is_stmt 0 view .LVU2671
 8356 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8357              		.cfi_def_cfa_offset 36
 8358              		.cfi_offset 4, -36
 8359              		.cfi_offset 5, -32
 8360              		.cfi_offset 6, -28
 8361              		.cfi_offset 7, -24
 8362              		.cfi_offset 8, -20
 8363              		.cfi_offset 9, -16
 8364              		.cfi_offset 10, -12
 8365              		.cfi_offset 11, -8
 8366              		.cfi_offset 14, -4
2545:src/display.c **** 	int skip = 0;
 8367              		.loc 1 2545 24 view .LVU2672
 8368 0004 BE4C     		ldr	r4, .L1124
2540:src/display.c **** 	int i, j;
 8369              		.loc 1 2540 26 view .LVU2673
 8370 0006 A9B0     		sub	sp, sp, #164
 8371              		.cfi_def_cfa_offset 200
 8372              	.LVL934:
2543:src/display.c **** 	int annuc = 0;
 8373              		.loc 1 2543 2 is_stmt 1 view .LVU2674
2544:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8374              		.loc 1 2544 2 view .LVU2675
2545:src/display.c **** 	int skip = 0;
 8375              		.loc 1 2545 2 view .LVU2676
2545:src/display.c **** 	int skip = 0;
 8376              		.loc 1 2545 24 is_stmt 0 view .LVU2677
 8377 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8378              	.LVL935:
2546:src/display.c **** 	int x_disp = 0;
 8379              		.loc 1 2546 2 is_stmt 1 view .LVU2678
2547:src/display.c **** 	const int shift = cur_shift();
 8380              		.loc 1 2547 2 view .LVU2679
2548:src/display.c **** 
 8381              		.loc 1 2548 2 view .LVU2680
2548:src/display.c **** 
 8382              		.loc 1 2548 20 is_stmt 0 view .LVU2681
 8383 000c FFF7FEFF 		bl	cur_shift
ARM GAS  /tmp/ccobNVTR.s 			page 247


 8384              	.LVL936:
2552:src/display.c **** 	  State2.disp_freeze = 0;
 8385              		.loc 1 2552 6 view .LVU2682
 8386 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8387              	.LVL937:
2552:src/display.c **** 	  State2.disp_freeze = 0;
 8388              		.loc 1 2552 2 is_stmt 1 view .LVU2683
2552:src/display.c **** 	  State2.disp_freeze = 0;
 8389              		.loc 1 2552 5 is_stmt 0 view .LVU2684
 8390 0012 13F01006 		ands	r6, r3, #16
 8391 0016 40F08780 		bne	.L1083
2562:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8392              		.loc 1 2562 2 is_stmt 1 view .LVU2685
2562:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8393              		.loc 1 2562 6 is_stmt 0 view .LVU2686
 8394 001a BA4F     		ldr	r7, .L1124+4
 8395 001c 3D68     		ldr	r5, [r7]
2562:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8396              		.loc 1 2562 5 view .LVU2687
 8397 001e 002D     		cmp	r5, #0
 8398 0020 4BD1     		bne	.L1084
2579:src/display.c **** 
 8399              		.loc 1 2579 2 is_stmt 1 view .LVU2688
 8400 0022 8246     		mov	r10, r0
 8401 0024 FFF7FEFF 		bl	reset_disp
 8402              	.LVL938:
2581:src/display.c **** 	if (State2.cmplx  && !cata) {
 8403              		.loc 1 2581 2 view .LVU2689
 8404 0028 1EA8     		add	r0, sp, #120
 8405              	.LVL939:
2581:src/display.c **** 	if (State2.cmplx  && !cata) {
 8406              		.loc 1 2581 2 is_stmt 0 view .LVU2690
 8407 002a 2822     		movs	r2, #40
 8408 002c 2946     		mov	r1, r5
 8409 002e FFF7FEFF 		bl	xset
 8410              	.LVL940:
2582:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8411              		.loc 1 2582 2 is_stmt 1 view .LVU2691
2582:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8412              		.loc 1 2582 6 is_stmt 0 view .LVU2692
 8413 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2582:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8414              		.loc 1 2582 5 view .LVU2693
 8415 0034 9E07     		lsls	r6, r3, #30
 8416 0036 03D5     		bpl	.L967
2582:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8417              		.loc 1 2582 20 discriminator 1 view .LVU2694
 8418 0038 B9F1000F 		cmp	r9, #0
 8419 003c 00F0EC80 		beq	.L1085
 8420              	.L967:
2542:src/display.c **** 	const char *p;
 8421              		.loc 1 2542 17 view .LVU2695
 8422 0040 0DF17808 		add	r8, sp, #120
 8423              	.LVL941:
 8424              	.L838:
2586:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8425              		.loc 1 2586 2 is_stmt 1 view .LVU2696
ARM GAS  /tmp/ccobNVTR.s 			page 248


2586:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8426              		.loc 1 2586 5 is_stmt 0 view .LVU2697
 8427 0044 D806     		lsls	r0, r3, #27
 8428 0046 00F17581 		bmi	.L1086
2598:src/display.c **** 	  set_status(S_SURE);
 8429              		.loc 1 2598 9 is_stmt 1 view .LVU2698
2598:src/display.c **** 	  set_status(S_SURE);
 8430              		.loc 1 2598 13 is_stmt 0 view .LVU2699
 8431 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2598:src/display.c **** 	  set_status(S_SURE);
 8432              		.loc 1 2598 12 view .LVU2700
 8433 004c 5107     		lsls	r1, r2, #29
 8434 004e 40F0F480 		bne	.L1087
2600:src/display.c **** 	  bp = scopy(bp, "HYP");
 8435              		.loc 1 2600 9 is_stmt 1 view .LVU2701
2600:src/display.c **** 	  bp = scopy(bp, "HYP");
 8436              		.loc 1 2600 12 is_stmt 0 view .LVU2702
 8437 0052 9A06     		lsls	r2, r3, #26
 8438 0054 00F1C280 		bmi	.L1088
2605:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8439              		.loc 1 2605 9 is_stmt 1 view .LVU2703
2605:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8440              		.loc 1 2605 12 is_stmt 0 view .LVU2704
 8441 0058 DE07     		lsls	r6, r3, #31
 8442 005a 00F1AE81 		bmi	.L1089
2613:src/display.c **** 	  /* Commands with arguments */
 8443              		.loc 1 2613 9 is_stmt 1 view .LVU2705
2613:src/display.c **** 	  /* Commands with arguments */
 8444              		.loc 1 2613 13 is_stmt 0 view .LVU2706
 8445 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2613:src/display.c **** 	  /* Commands with arguments */
 8446              		.loc 1 2613 12 view .LVU2707
 8447 0060 8806     		lsls	r0, r1, #26
 8448 0062 00F10582 		bmi	.L1090
2644:src/display.c **** 	  *bp++ = 'x';
 8449              		.loc 1 2644 9 is_stmt 1 view .LVU2708
2644:src/display.c **** 	  *bp++ = 'x';
 8450              		.loc 1 2644 19 is_stmt 0 view .LVU2709
 8451 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2644:src/display.c **** 	  *bp++ = 'x';
 8452              		.loc 1 2644 12 view .LVU2710
 8453 0068 072A     		cmp	r2, #7
 8454 006a 40F0E481 		bne	.L1091
2650:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 8455              		.loc 1 2650 9 is_stmt 1 view .LVU2711
2650:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 8456              		.loc 1 2650 12 is_stmt 0 view .LVU2712
 8457 006e B9F1000F 		cmp	r9, #0
 8458 0072 40F00F83 		bne	.L1092
2698:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8459              		.loc 1 2698 9 is_stmt 1 view .LVU2713
2698:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8460              		.loc 1 2698 12 is_stmt 0 view .LVU2714
 8461 0076 1A07     		lsls	r2, r3, #28
 8462 0078 00F16083 		bmi	.L1093
2706:src/display.c **** 	  show_status();
 8463              		.loc 1 2706 9 is_stmt 1 view .LVU2715
ARM GAS  /tmp/ccobNVTR.s 			page 249


2706:src/display.c **** 	  show_status();
 8464              		.loc 1 2706 19 is_stmt 0 view .LVU2716
 8465 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
2706:src/display.c **** 	  show_status();
 8466              		.loc 1 2706 12 view .LVU2717
 8467 007e 002B     		cmp	r3, #0
 8468 0080 40F0E583 		bne	.L1094
2709:src/display.c **** 	  show_label();
 8469              		.loc 1 2709 9 is_stmt 1 view .LVU2718
2709:src/display.c **** 	  show_label();
 8470              		.loc 1 2709 13 is_stmt 0 view .LVU2719
 8471 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2709:src/display.c **** 	  show_label();
 8472              		.loc 1 2709 12 view .LVU2720
 8473 0086 5E07     		lsls	r6, r3, #29
 8474 0088 00F1AC83 		bmi	.L1095
2712:src/display.c **** 	  show_registers();
 8475              		.loc 1 2712 9 is_stmt 1 view .LVU2721
2712:src/display.c **** 	  show_registers();
 8476              		.loc 1 2712 12 is_stmt 0 view .LVU2722
 8477 008c 1807     		lsls	r0, r3, #28
 8478 008e 00F1D484 		bmi	.L1096
2722:src/display.c **** 	  if (DispMsg) { 
 8479              		.loc 1 2722 9 is_stmt 1 view .LVU2723
2722:src/display.c **** 	  if (DispMsg) { 
 8480              		.loc 1 2722 12 is_stmt 0 view .LVU2724
 8481 0092 4806     		lsls	r0, r1, #25
 8482 0094 40F1B284 		bpl	.L903
2723:src/display.c **** 	    set_status(DispMsg);
 8483              		.loc 1 2723 4 is_stmt 1 view .LVU2725
2723:src/display.c **** 	    set_status(DispMsg);
 8484              		.loc 1 2723 8 is_stmt 0 view .LVU2726
 8485 0098 9B4E     		ldr	r6, .L1124+8
 8486 009a D6F800B0 		ldr	fp, [r6]
2723:src/display.c **** 	    set_status(DispMsg);
 8487              		.loc 1 2723 7 view .LVU2727
 8488 009e BBF1000F 		cmp	fp, #0
 8489 00a2 00F08184 		beq	.L904
2724:src/display.c **** 	  } else if (DispPlot) {
 8490              		.loc 1 2724 6 is_stmt 1 view .LVU2728
 8491 00a6 5846     		mov	r0, fp
 8492 00a8 FFF7FEFF 		bl	set_status
 8493              	.LVL942:
2787:src/display.c ****       nostk:	show_flags();
 8494              		.loc 1 2787 2 view .LVU2729
 8495 00ac DFF87882 		ldr	r8, .L1124+40
 8496              	.LVL943:
2787:src/display.c ****       nostk:	show_flags();
 8497              		.loc 1 2787 2 is_stmt 0 view .LVU2730
 8498 00b0 FFF7FEFF 		bl	show_stack
 8499              	.LVL944:
2788:src/display.c **** 	if (!skip) {
 8500              		.loc 1 2788 14 is_stmt 1 view .LVU2731
 8501 00b4 FFF7FEFF 		bl	show_flags
 8502              	.LVL945:
2789:src/display.c **** 	  if (State2.runmode) {
 8503              		.loc 1 2789 2 view .LVU2732
ARM GAS  /tmp/ccobNVTR.s 			page 250


 8504 00b8 C9E0     		b	.L842
 8505              	.LVL946:
 8506              	.L1084:
2569:src/display.c **** 
 8507              		.loc 1 2569 4 view .LVU2733
 8508 00ba FFF7FEFF 		bl	wait_for_display
 8509              	.LVL947:
2572:src/display.c **** 	    clr_dot(i);
 8510              		.loc 1 2572 4 view .LVU2734
2572:src/display.c **** 	    clr_dot(i);
 8511              		.loc 1 2572 16 view .LVU2735
 8512              	.L836:
2573:src/display.c **** 	  }
 8513              		.loc 1 2573 6 discriminator 3 view .LVU2736
 8514 00be 3046     		mov	r0, r6
2572:src/display.c **** 	    clr_dot(i);
 8515              		.loc 1 2572 31 is_stmt 0 discriminator 3 view .LVU2737
 8516 00c0 0136     		adds	r6, r6, #1
 8517              	.LVL948:
2573:src/display.c **** 	  }
 8518              		.loc 1 2573 6 discriminator 3 view .LVU2738
 8519 00c2 FFF7FEFF 		bl	clr_dot
 8520              	.LVL949:
2572:src/display.c **** 	    clr_dot(i);
 8521              		.loc 1 2572 31 is_stmt 1 discriminator 3 view .LVU2739
2572:src/display.c **** 	    clr_dot(i);
 8522              		.loc 1 2572 16 discriminator 3 view .LVU2740
2572:src/display.c **** 	    clr_dot(i);
 8523              		.loc 1 2572 4 is_stmt 0 discriminator 3 view .LVU2741
 8524 00c6 832E     		cmp	r6, #131
 8525 00c8 F9D1     		bne	.L836
 8526 00ca 8F4E     		ldr	r6, .L1124+8
 8527              	.LVL950:
2572:src/display.c **** 	    clr_dot(i);
 8528              		.loc 1 2572 4 discriminator 3 view .LVU2742
 8529 00cc DFF85882 		ldr	r8, .L1124+40
2544:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8530              		.loc 1 2544 6 view .LVU2743
 8531 00d0 0025     		movs	r5, #0
 8532              	.LVL951:
 8533              	.L837:
2792:src/display.c **** 	    if (p == NULL || cata) {
 8534              		.loc 1 2792 6 is_stmt 1 view .LVU2744
2792:src/display.c **** 	    if (p == NULL || cata) {
 8535              		.loc 1 2792 10 is_stmt 0 view .LVU2745
 8536 00d2 FFF7FEFF 		bl	get_cmdline
 8537              	.LVL952:
2793:src/display.c **** 	      if (ShowRegister != -1) {
 8538              		.loc 1 2793 6 is_stmt 1 view .LVU2746
2793:src/display.c **** 	      if (ShowRegister != -1) {
 8539              		.loc 1 2793 9 is_stmt 0 view .LVU2747
 8540 00d6 8246     		mov	r10, r0
 8541 00d8 10B1     		cbz	r0, .L918
2793:src/display.c **** 	      if (ShowRegister != -1) {
 8542              		.loc 1 2793 20 discriminator 1 view .LVU2748
 8543 00da B9F1000F 		cmp	r9, #0
 8544 00de 2ED0     		beq	.L919
ARM GAS  /tmp/ccobNVTR.s 			page 251


 8545              	.L918:
2794:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8546              		.loc 1 2794 8 is_stmt 1 view .LVU2749
2794:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8547              		.loc 1 2794 25 is_stmt 0 view .LVU2750
 8548 00e0 DFF84892 		ldr	r9, .L1124+44
 8549              	.LVL953:
2794:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8550              		.loc 1 2794 25 view .LVU2751
 8551 00e4 D9F80000 		ldr	r0, [r9]
 8552              	.LVL954:
2794:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8553              		.loc 1 2794 11 view .LVU2752
 8554 00e8 421C     		adds	r2, r0, #1
 8555 00ea 00F05081 		beq	.L920
2795:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8556              		.loc 1 2795 3 is_stmt 1 view .LVU2753
2795:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8557              		.loc 1 2795 39 is_stmt 0 view .LVU2754
 8558 00ee 6428     		cmp	r0, #100
 8559 00f0 00F08780 		beq	.L1097
 8560              	.L921:
2796:src/display.c **** 	      }
 8561              		.loc 1 2796 3 is_stmt 1 view .LVU2755
 8562 00f4 0021     		movs	r1, #0
 8563 00f6 FFF7FEFF 		bl	format_reg
 8564              	.LVL955:
2804:src/display.c **** 	      goto finish;
 8565              		.loc 1 2804 6 view .LVU2756
2804:src/display.c **** 	      goto finish;
 8566              		.loc 1 2804 9 is_stmt 0 view .LVU2757
 8567 00fa 3B68     		ldr	r3, [r7]
 8568 00fc 002B     		cmp	r3, #0
 8569 00fe 00F0FC80 		beq	.L1080
 8570              	.LVL956:
 8571              	.L924:
2857:src/display.c **** 	State2.disp_as_alpha = 0;
 8572              		.loc 1 2857 2 is_stmt 1 view .LVU2758
2858:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8573              		.loc 1 2858 2 view .LVU2759
2859:src/display.c **** 	State2.invalid_disp = 0;
 8574              		.loc 1 2859 2 view .LVU2760
2857:src/display.c **** 	State2.disp_as_alpha = 0;
 8575              		.loc 1 2857 17 is_stmt 0 view .LVU2761
 8576 0102 6369     		ldr	r3, [r4, #20]
 8577 0104 23F02173 		bic	r3, r3, #42205184
 8578 0108 23F48053 		bic	r3, r3, #4096
2859:src/display.c **** 	State2.invalid_disp = 0;
 8579              		.loc 1 2859 15 view .LVU2762
 8580 010c 0022     		movs	r2, #0
2857:src/display.c **** 	State2.disp_as_alpha = 0;
 8581              		.loc 1 2857 17 view .LVU2763
 8582 010e 6361     		str	r3, [r4, #20]
2861:src/display.c **** 	DispMsg = CNULL;
 8583              		.loc 1 2861 15 view .LVU2764
 8584 0110 6423     		movs	r3, #100
2859:src/display.c **** 	State2.invalid_disp = 0;
ARM GAS  /tmp/ccobNVTR.s 			page 252


 8585              		.loc 1 2859 15 view .LVU2765
 8586 0112 6274     		strb	r2, [r4, #17]
2860:src/display.c **** 	ShowRegister = regX_idx;
 8587              		.loc 1 2860 2 is_stmt 1 view .LVU2766
2861:src/display.c **** 	DispMsg = CNULL;
 8588              		.loc 1 2861 2 view .LVU2767
2862:src/display.c **** 	DispPlot = 0;
 8589              		.loc 1 2862 10 is_stmt 0 view .LVU2768
 8590 0114 3260     		str	r2, [r6]
2863:src/display.c **** 	State2.disp_small = 0;
 8591              		.loc 1 2863 11 view .LVU2769
 8592 0116 A8F80020 		strh	r2, [r8]	@ movhi
2861:src/display.c **** 	DispMsg = CNULL;
 8593              		.loc 1 2861 15 view .LVU2770
 8594 011a C9F80030 		str	r3, [r9]
2862:src/display.c **** 	DispPlot = 0;
 8595              		.loc 1 2862 2 is_stmt 1 view .LVU2771
2863:src/display.c **** 	State2.disp_small = 0;
 8596              		.loc 1 2863 2 view .LVU2772
2864:src/display.c **** 	finish_display();
 8597              		.loc 1 2864 2 view .LVU2773
2865:src/display.c **** #ifdef CONSOLE
 8598              		.loc 1 2865 2 view .LVU2774
 8599 011e FFF7FEFF 		bl	finish_display
 8600              	.LVL957:
2869:src/display.c **** 
 8601              		.loc 1 2869 7 is_stmt 0 view .LVU2775
 8602 0122 29B0     		add	sp, sp, #164
 8603              		.cfi_remember_state
 8604              		.cfi_def_cfa_offset 36
 8605              		@ sp needed
 8606 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8607              	.LVL958:
 8608              	.L1083:
 8609              		.cfi_restore_state
2553:src/display.c **** 	  State2.disp_temp = 1;
 8610              		.loc 1 2553 4 is_stmt 1 view .LVU2776
2554:src/display.c **** #ifdef CONSOLE
 8611              		.loc 1 2554 4 view .LVU2777
2558:src/display.c **** 	  return;
 8612              		.loc 1 2558 12 is_stmt 0 view .LVU2778
 8613 0128 784A     		ldr	r2, .L1124+12
2553:src/display.c **** 	  State2.disp_temp = 1;
 8614              		.loc 1 2553 23 view .LVU2779
 8615 012a 23F03003 		bic	r3, r3, #48
 8616 012e 43F02003 		orr	r3, r3, #32
2558:src/display.c **** 	  return;
 8617              		.loc 1 2558 12 view .LVU2780
 8618 0132 0021     		movs	r1, #0
2553:src/display.c **** 	  State2.disp_temp = 1;
 8619              		.loc 1 2553 23 view .LVU2781
 8620 0134 E375     		strb	r3, [r4, #23]
2558:src/display.c **** 	  return;
 8621              		.loc 1 2558 4 is_stmt 1 view .LVU2782
2558:src/display.c **** 	  return;
 8622              		.loc 1 2558 12 is_stmt 0 view .LVU2783
 8623 0136 1160     		str	r1, [r2]
ARM GAS  /tmp/ccobNVTR.s 			page 253


2559:src/display.c **** 	}
 8624              		.loc 1 2559 4 is_stmt 1 view .LVU2784
2869:src/display.c **** 
 8625              		.loc 1 2869 7 is_stmt 0 view .LVU2785
 8626 0138 29B0     		add	sp, sp, #164
 8627              		.cfi_remember_state
 8628              		.cfi_def_cfa_offset 36
 8629              		@ sp needed
 8630 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8631              	.LVL959:
 8632              	.L919:
 8633              		.cfi_restore_state
2801:src/display.c **** 	      x_disp = 1;
 8634              		.loc 1 2801 8 is_stmt 1 view .LVU2786
 8635              	.LBB496:
 8636              	.LBI496:
1209:src/display.c ****       int i;
 8637              		.loc 1 1209 17 view .LVU2787
 8638              	.LBB497:
1210:src/display.c ****       int gotdot = -1;
 8639              		.loc 1 1210 7 view .LVU2788
1211:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8640              		.loc 1 1211 7 view .LVU2789
1213:src/display.c **** #endif
 8641              		.loc 1 1213 7 view .LVU2790
1217:src/display.c **** #endif
 8642              		.loc 1 1217 7 view .LVU2791
1220:src/display.c **** 	SET_MANT_SIGN;
 8643              		.loc 1 1220 7 view .LVU2792
1220:src/display.c **** 	SET_MANT_SIGN;
 8644              		.loc 1 1220 10 is_stmt 0 view .LVU2793
 8645 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8646 0140 2D2B     		cmp	r3, #45
 8647 0142 00F03E82 		beq	.L1098
 8648              	.LVL960:
 8649              	.L925:
1225:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8650              		.loc 1 1225 7 is_stmt 1 view .LVU2794
1225:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8651              		.loc 1 1225 11 is_stmt 0 view .LVU2795
 8652 0146 724B     		ldr	r3, .L1124+16
 8653 0148 1B68     		ldr	r3, [r3]
 8654 014a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1225:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8655              		.loc 1 1225 10 view .LVU2796
 8656 014e 13F00109 		ands	r9, r3, #1
 8657              	.LVL961:
1225:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8658              		.loc 1 1225 10 view .LVU2797
 8659 0152 00F0AC81 		beq	.L926
 8660              	.LVL962:
1226:src/display.c **** 	  set_dig(i, *p);
 8661              		.loc 1 1226 12 is_stmt 1 view .LVU2798
 8662 0156 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1226:src/display.c **** 	  set_dig(i, *p);
 8663              		.loc 1 1226 8 is_stmt 0 view .LVU2799
 8664 015a 4FF00009 		mov	r9, #0
ARM GAS  /tmp/ccobNVTR.s 			page 254


1226:src/display.c **** 	  set_dig(i, *p);
 8665              		.loc 1 1226 2 view .LVU2800
 8666 015e 41B1     		cbz	r1, .L930
 8667              	.LVL963:
 8668              	.L927:
1227:src/display.c **** 	  i += SEGS_PER_DIGIT;
 8669              		.loc 1 1227 4 is_stmt 1 view .LVU2801
 8670 0160 4846     		mov	r0, r9
 8671 0162 FFF7FEFF 		bl	set_dig
 8672              	.LVL964:
1228:src/display.c **** 	}
 8673              		.loc 1 1228 4 view .LVU2802
1226:src/display.c **** 	  set_dig(i, *p);
 8674              		.loc 1 1226 12 is_stmt 0 view .LVU2803
 8675 0166 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8676              	.LVL965:
1228:src/display.c **** 	}
 8677              		.loc 1 1228 6 view .LVU2804
 8678 016a 09F10909 		add	r9, r9, #9
 8679              	.LVL966:
1226:src/display.c **** 	  set_dig(i, *p);
 8680              		.loc 1 1226 24 is_stmt 1 view .LVU2805
1226:src/display.c **** 	  set_dig(i, *p);
 8681              		.loc 1 1226 12 view .LVU2806
1226:src/display.c **** 	  set_dig(i, *p);
 8682              		.loc 1 1226 2 is_stmt 0 view .LVU2807
 8683 016e 0029     		cmp	r1, #0
 8684 0170 F6D1     		bne	.L927
 8685              	.LVL967:
 8686              	.L930:
1230:src/display.c ****       } else {
 8687              		.loc 1 1230 2 is_stmt 1 view .LVU2808
 8688 0172 FFF7FEFF 		bl	carry_overflow
 8689              	.LVL968:
1230:src/display.c ****       } else {
 8690              		.loc 1 1230 2 is_stmt 0 view .LVU2809
 8691              	.LBE497:
 8692              	.LBE496:
2804:src/display.c **** 	      goto finish;
 8693              		.loc 1 2804 6 is_stmt 1 view .LVU2810
2804:src/display.c **** 	      goto finish;
 8694              		.loc 1 2804 9 is_stmt 0 view .LVU2811
 8695 0176 3B68     		ldr	r3, [r7]
 8696 0178 DFF8B091 		ldr	r9, .L1124+44
 8697 017c 002B     		cmp	r3, #0
 8698 017e C0D1     		bne	.L924
 8699              	.LVL969:
 8700              	.L929:
2834:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8701              		.loc 1 2834 2 is_stmt 1 view .LVU2812
 8702 0180 FFF7FEFF 		bl	set_annunciators
 8703              	.LVL970:
2835:src/display.c **** 	  ShowRPN = 0;
 8704              		.loc 1 2835 2 view .LVU2813
2835:src/display.c **** 	  ShowRPN = 0;
 8705              		.loc 1 2835 50 is_stmt 0 view .LVU2814
 8706 0184 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccobNVTR.s 			page 255


 8707 0186 002B     		cmp	r3, #0
 8708 0188 00F00981 		beq	.L1099
 8709              	.LVL971:
 8710              	.L840:
2836:src/display.c **** 	  dot(RPN, 0);
 8711              		.loc 1 2836 4 is_stmt 1 view .LVU2815
2836:src/display.c **** 	  dot(RPN, 0);
 8712              		.loc 1 2836 12 is_stmt 0 view .LVU2816
 8713 018c 5F4F     		ldr	r7, .L1124+12
 8714 018e 0023     		movs	r3, #0
 8715              	.LBB520:
 8716              	.LBB521:
 336:src/display.c **** }
 8717              		.loc 1 336 8 view .LVU2817
 8718 0190 8D20     		movs	r0, #141
 8719              	.LBE521:
 8720              	.LBE520:
2836:src/display.c **** 	  dot(RPN, 0);
 8721              		.loc 1 2836 12 view .LVU2818
 8722 0192 3B60     		str	r3, [r7]
2837:src/display.c **** 	}
 8723              		.loc 1 2837 4 is_stmt 1 view .LVU2819
 8724              	.LVL972:
 8725              	.LBB523:
 8726              	.LBI520:
 334:src/display.c ****   if (on)	set_dot(n);
 8727              		.loc 1 334 6 view .LVU2820
 8728              	.LBB522:
 335:src/display.c ****   else	clr_dot(n);
 8729              		.loc 1 335 3 view .LVU2821
 336:src/display.c **** }
 8730              		.loc 1 336 8 view .LVU2822
 8731 0194 FFF7FEFF 		bl	clr_dot
 8732              	.LVL973:
 8733              	.L957:
 336:src/display.c **** }
 8734              		.loc 1 336 8 is_stmt 0 view .LVU2823
 8735              	.LBE522:
 8736              	.LBE523:
2840:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8737              		.loc 1 2840 2 is_stmt 1 view .LVU2824
2841:src/display.c **** 
 8738              		.loc 1 2841 4 is_stmt 0 view .LVU2825
 8739 0198 3B68     		ldr	r3, [r7]
 8740 019a 002B     		cmp	r3, #0
 8741 019c 4BD1     		bne	.L975
2840:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8742              		.loc 1 2840 31 view .LVU2826
 8743 019e A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8744 01a0 12F04003 		ands	r3, r2, #64
 8745 01a4 08D0     		beq	.L958
2841:src/display.c **** 
 8746              		.loc 1 2841 8 view .LVU2827
 8747 01a6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2841:src/display.c **** 
 8748              		.loc 1 2841 4 view .LVU2828
 8749 01a8 1B07     		lsls	r3, r3, #28
ARM GAS  /tmp/ccobNVTR.s 			page 256


 8750 01aa 40F1EE80 		bpl	.L977
2841:src/display.c **** 
 8751              		.loc 1 2841 30 discriminator 3 view .LVU2829
 8752 01ae 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8753 01b0 012B     		cmp	r3, #1
 8754 01b2 01D0     		beq	.L958
2841:src/display.c **** 
 8755              		.loc 1 2841 60 discriminator 5 view .LVU2830
 8756 01b4 C2F38003 		ubfx	r3, r2, #2, #1
 8757              	.L958:
2840:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8758              		.loc 1 2840 19 discriminator 9 view .LVU2831
 8759 01b8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8760 01ba 63F34512 		bfi	r2, r3, #5, #1
 8761 01be E275     		strb	r2, [r4, #23]
2844:src/display.c **** 	  annunciators();
 8762              		.loc 1 2844 2 is_stmt 1 discriminator 9 view .LVU2832
2844:src/display.c **** 	  annunciators();
 8763              		.loc 1 2844 5 is_stmt 0 discriminator 9 view .LVU2833
 8764 01c0 002D     		cmp	r5, #0
 8765 01c2 33D0     		beq	.L959
2844:src/display.c **** 	  annunciators();
 8766              		.loc 1 2844 36 discriminator 1 view .LVU2834
 8767 01c4 D3B2     		uxtb	r3, r2
2844:src/display.c **** 	  annunciators();
 8768              		.loc 1 2844 13 discriminator 1 view .LVU2835
 8769 01c6 03F02103 		and	r3, r3, #33
 8770 01ca 202B     		cmp	r3, #32
 8771 01cc 2ED0     		beq	.L959
 8772              	.L960:
2845:src/display.c ****  	State2.hms = 0;
 8773              		.loc 1 2845 4 is_stmt 1 view .LVU2836
 8774 01ce FFF7FEFF 		bl	annunciators
 8775              	.LVL974:
 8776              	.L961:
2846:src/display.c **** #else
 8777              		.loc 1 2846 3 view .LVU2837
2846:src/display.c **** #else
 8778              		.loc 1 2846 14 is_stmt 0 view .LVU2838
 8779 01d2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8780 01d4 6FF30003 		bfc	r3, #0, #1
 8781 01d8 E375     		strb	r3, [r4, #23]
 8782 01da 92E7     		b	.L924
 8783              	.LVL975:
 8784              	.L1088:
2601:src/display.c **** 	  if (! State2.dot)
 8785              		.loc 1 2601 4 is_stmt 1 view .LVU2839
2601:src/display.c **** 	  if (! State2.dot)
 8786              		.loc 1 2601 9 is_stmt 0 view .LVU2840
 8787 01dc 4D49     		ldr	r1, .L1124+20
 8788 01de 4046     		mov	r0, r8
 8789 01e0 FFF7FEFF 		bl	scopy
 8790              	.LVL976:
2602:src/display.c **** 	    *bp++ = '\235';
 8791              		.loc 1 2602 8 view .LVU2841
 8792 01e4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8793              	.LVL977:
ARM GAS  /tmp/ccobNVTR.s 			page 257


2602:src/display.c **** 	    *bp++ = '\235';
 8794              		.loc 1 2602 4 is_stmt 1 view .LVU2842
2602:src/display.c **** 	    *bp++ = '\235';
 8795              		.loc 1 2602 7 is_stmt 0 view .LVU2843
 8796 01e6 5B06     		lsls	r3, r3, #25
 8797 01e8 40F1FD80 		bpl	.L844
 8798              	.LVL978:
 8799              	.L1075:
2602:src/display.c **** 	    *bp++ = '\235';
 8800              		.loc 1 2602 7 view .LVU2844
 8801 01ec 464E     		ldr	r6, .L1124+8
 8802 01ee DFF83881 		ldr	r8, .L1124+40
 8803              	.L845:
2604:src/display.c **** 	} else if (State2.gtodot) {
 8804              		.loc 1 2604 4 is_stmt 1 view .LVU2845
 8805 01f2 1EA8     		add	r0, sp, #120
 8806 01f4 FFF7FEFF 		bl	set_status
 8807              	.LVL979:
2787:src/display.c ****       nostk:	show_flags();
 8808              		.loc 1 2787 2 view .LVU2846
 8809 01f8 FFF7FEFF 		bl	show_stack
 8810              	.LVL980:
2788:src/display.c **** 	if (!skip) {
 8811              		.loc 1 2788 14 view .LVU2847
 8812 01fc FFF7FEFF 		bl	show_flags
 8813              	.LVL981:
2789:src/display.c **** 	  if (State2.runmode) {
 8814              		.loc 1 2789 2 view .LVU2848
 8815 0200 25E0     		b	.L842
 8816              	.LVL982:
 8817              	.L1097:
2795:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8818              		.loc 1 2795 42 is_stmt 0 discriminator 1 view .LVU2849
 8819 0202 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2795:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8820              		.loc 1 2795 39 discriminator 1 view .LVU2850
 8821 0204 13F00101 		ands	r1, r3, #1
 8822 0208 7FF474AF 		bne	.L921
 8823              	.LVL983:
2796:src/display.c **** 	      }
 8824              		.loc 1 2796 3 is_stmt 1 view .LVU2851
 8825 020c FFF7FEFF 		bl	format_reg
 8826              	.LVL984:
2804:src/display.c **** 	      goto finish;
 8827              		.loc 1 2804 6 view .LVU2852
2804:src/display.c **** 	      goto finish;
 8828              		.loc 1 2804 9 is_stmt 0 view .LVU2853
 8829 0210 3B68     		ldr	r3, [r7]
 8830 0212 002B     		cmp	r3, #0
 8831 0214 B4D0     		beq	.L929
 8832 0216 74E7     		b	.L924
 8833              	.LVL985:
 8834              	.L1085:
2583:src/display.c **** 	  set_status(buf);
 8835              		.loc 1 2583 4 is_stmt 1 view .LVU2854
2583:src/display.c **** 	  set_status(buf);
 8836              		.loc 1 2583 10 is_stmt 0 view .LVU2855
ARM GAS  /tmp/ccobNVTR.s 			page 258


 8837 0218 1423     		movs	r3, #20
2584:src/display.c **** 	}
 8838              		.loc 1 2584 4 view .LVU2856
 8839 021a 1EA8     		add	r0, sp, #120
2583:src/display.c **** 	  set_status(buf);
 8840              		.loc 1 2583 10 view .LVU2857
 8841 021c 8DF87830 		strb	r3, [sp, #120]
2584:src/display.c **** 	}
 8842              		.loc 1 2584 4 is_stmt 1 view .LVU2858
2583:src/display.c **** 	  set_status(buf);
 8843              		.loc 1 2583 7 is_stmt 0 view .LVU2859
 8844 0220 0DF17908 		add	r8, sp, #121
 8845              	.LVL986:
2584:src/display.c **** 	}
 8846              		.loc 1 2584 4 view .LVU2860
 8847 0224 FFF7FEFF 		bl	set_status
 8848              	.LVL987:
 8849 0228 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8850 022a 0BE7     		b	.L838
 8851              	.LVL988:
 8852              	.L959:
2844:src/display.c **** 	  annunciators();
 8853              		.loc 1 2844 52 discriminator 3 view .LVU2861
 8854 022c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8855 022e 13F0C00F 		tst	r3, #192
 8856 0232 CED0     		beq	.L961
 8857 0234 CBE7     		b	.L960
 8858              	.L975:
 8859 0236 0023     		movs	r3, #0
 8860 0238 BEE7     		b	.L958
 8861              	.LVL989:
 8862              	.L1087:
2599:src/display.c **** 	} else if (State2.hyp) {
 8863              		.loc 1 2599 4 is_stmt 1 view .LVU2862
 8864 023a 3748     		ldr	r0, .L1124+24
 8865 023c 324E     		ldr	r6, .L1124+8
 8866 023e DFF8E880 		ldr	r8, .L1124+40
 8867              	.LVL990:
2599:src/display.c **** 	} else if (State2.hyp) {
 8868              		.loc 1 2599 4 is_stmt 0 view .LVU2863
 8869 0242 FFF7FEFF 		bl	set_status
 8870              	.LVL991:
2787:src/display.c ****       nostk:	show_flags();
 8871              		.loc 1 2787 2 is_stmt 1 view .LVU2864
 8872 0246 FFF7FEFF 		bl	show_stack
 8873              	.LVL992:
2788:src/display.c **** 	if (!skip) {
 8874              		.loc 1 2788 14 view .LVU2865
 8875 024a FFF7FEFF 		bl	show_flags
 8876              	.LVL993:
2789:src/display.c **** 	  if (State2.runmode) {
 8877              		.loc 1 2789 2 view .LVU2866
 8878              	.L842:
2790:src/display.c **** 	  only_update_x:
 8879              		.loc 1 2790 4 view .LVU2867
2790:src/display.c **** 	  only_update_x:
 8880              		.loc 1 2790 8 is_stmt 0 view .LVU2868
ARM GAS  /tmp/ccobNVTR.s 			page 259


 8881 024e A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2790:src/display.c **** 	  only_update_x:
 8882              		.loc 1 2790 7 view .LVU2869
 8883 0250 13F0400A 		ands	r10, r3, #64
 8884 0254 7FF43DAF 		bne	.L837
 8885              	.LBB524:
2808:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8886              		.loc 1 2808 6 is_stmt 1 view .LVU2870
2808:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8887              		.loc 1 2808 24 is_stmt 0 view .LVU2871
 8888 0258 2D4B     		ldr	r3, .L1124+16
2812:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8889              		.loc 1 2812 6 view .LVU2872
 8890 025a DFF8D490 		ldr	r9, .L1124+48
 8891              	.LVL994:
2808:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8892              		.loc 1 2808 24 view .LVU2873
 8893 025e 1B68     		ldr	r3, [r3]
2808:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8894              		.loc 1 2808 19 view .LVU2874
 8895 0260 B3F8E077 		ldrh	r7, [r3, #2016]
 8896              	.LVL995:
2809:src/display.c **** 	    const int n = nLIB(pc);
 8897              		.loc 1 2809 6 is_stmt 1 view .LVU2875
2809:src/display.c **** 	    const int n = nLIB(pc);
 8898              		.loc 1 2809 25 is_stmt 0 view .LVU2876
 8899 0264 3846     		mov	r0, r7
 8900 0266 FFF7FEFF 		bl	user_pc
 8901              	.LVL996:
2811:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8902              		.loc 1 2811 6 view .LVU2877
 8903 026a 2822     		movs	r2, #40
 8904 026c 5146     		mov	r1, r10
2809:src/display.c **** 	    const int n = nLIB(pc);
 8905              		.loc 1 2809 25 view .LVU2878
 8906 026e 8346     		mov	fp, r0
2811:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8907              		.loc 1 2811 6 view .LVU2879
 8908 0270 1EA8     		add	r0, sp, #120
 8909 0272 FFF7FEFF 		bl	xset
 8910              	.LVL997:
2810:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8911              		.loc 1 2810 20 view .LVU2880
 8912 0276 BF0B     		lsrs	r7, r7, #14
 8913              	.LVL998:
2810:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8914              		.loc 1 2810 6 is_stmt 1 view .LVU2881
2811:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8915              		.loc 1 2811 6 view .LVU2882
2812:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8916              		.loc 1 2812 6 view .LVU2883
 8917 0278 D9F80000 		ldr	r0, [r9]
 8918 027c 5246     		mov	r2, r10
 8919 027e 0121     		movs	r1, #1
 8920 0280 FFF7FEFF 		bl	set_exp
 8921              	.LVL999:
2813:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
ARM GAS  /tmp/ccobNVTR.s 			page 260


 8922              		.loc 1 2813 6 view .LVU2884
 8923 0284 002F     		cmp	r7, #0
 8924 0286 40F0B480 		bne	.L1100
 8925 028a 2449     		ldr	r1, .L1124+28
 8926 028c 1EA8     		add	r0, sp, #120
 8927 028e FFF7FEFF 		bl	scopy_spc
 8928              	.LVL1000:
 8929 0292 0322     		movs	r2, #3
 8930 0294 5946     		mov	r1, fp
 8931 0296 FFF7FEFF 		bl	num_arg_0
 8932              	.LVL1001:
2815:src/display.c **** #ifndef REALBUILD
 8933              		.loc 1 2815 6 view .LVU2885
 8934 029a 0921     		movs	r1, #9
 8935 029c 1EA8     		add	r0, sp, #120
 8936 029e FFF7FEFF 		bl	set_digits_string
 8937              	.LVL1002:
2817:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8938              		.loc 1 2817 6 view .LVU2886
 8939 02a2 3946     		mov	r1, r7
 8940 02a4 2822     		movs	r2, #40
 8941 02a6 1EA8     		add	r0, sp, #120
 8942 02a8 FFF7FEFF 		bl	xset
 8943              	.LVL1003:
2818:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8944              		.loc 1 2818 6 view .LVU2887
 8945 02ac 3A46     		mov	r2, r7
 8946 02ae 0121     		movs	r1, #1
 8947 02b0 D9F80000 		ldr	r0, [r9]
 8948 02b4 FFF7FEFF 		bl	set_exp
 8949              	.LVL1004:
2819:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8950              		.loc 1 2819 6 view .LVU2888
 8951 02b8 1949     		ldr	r1, .L1124+32
2813:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8952              		.loc 1 2813 6 is_stmt 0 view .LVU2889
 8953 02ba 0327     		movs	r7, #3
 8954              	.LVL1005:
 8955              	.L963:
2819:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8956              		.loc 1 2819 6 discriminator 4 view .LVU2890
 8957 02bc 1EA8     		add	r0, sp, #120
 8958 02be FFF7FEFF 		bl	scopy_spc
 8959              	.LVL1006:
 8960 02c2 3A46     		mov	r2, r7
 8961 02c4 5946     		mov	r1, fp
 8962 02c6 FFF7FEFF 		bl	num_arg_0
 8963              	.LVL1007:
 8964              	.LBB525:
2822:src/display.c **** 	      char *l=LastDisplayedNumber;
 8965              		.loc 1 2822 8 is_stmt 1 discriminator 4 view .LVU2891
2823:src/display.c **** 	      *l++=' ';
 8966              		.loc 1 2823 8 discriminator 4 view .LVU2892
2824:src/display.c **** 	      while(*b) {
 8967              		.loc 1 2824 8 discriminator 4 view .LVU2893
2824:src/display.c **** 	      while(*b) {
 8968              		.loc 1 2824 12 is_stmt 0 discriminator 4 view .LVU2894
ARM GAS  /tmp/ccobNVTR.s 			page 261


 8969 02ca 164B     		ldr	r3, .L1124+36
2825:src/display.c **** 		*l++=*b++;
 8970              		.loc 1 2825 14 discriminator 4 view .LVU2895
 8971 02cc 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2824:src/display.c **** 	      while(*b) {
 8972              		.loc 1 2824 12 discriminator 4 view .LVU2896
 8973 02d0 2027     		movs	r7, #32
 8974 02d2 1F70     		strb	r7, [r3]
2825:src/display.c **** 		*l++=*b++;
 8975              		.loc 1 2825 8 is_stmt 1 discriminator 4 view .LVU2897
2825:src/display.c **** 		*l++=*b++;
 8976              		.loc 1 2825 13 discriminator 4 view .LVU2898
 8977 02d4 0029     		cmp	r1, #0
 8978 02d6 00F04782 		beq	.L974
 8979 02da 0333     		adds	r3, r3, #3
 8980 02dc 1EA8     		add	r0, sp, #120
 8981              	.LVL1008:
 8982              	.L956:
2826:src/display.c **** 		*l++=' ';
 8983              		.loc 1 2826 3 view .LVU2899
2826:src/display.c **** 		*l++=' ';
 8984              		.loc 1 2826 7 is_stmt 0 view .LVU2900
 8985 02de 03F8021C 		strb	r1, [r3, #-2]
2827:src/display.c **** 	      }
 8986              		.loc 1 2827 3 is_stmt 1 view .LVU2901
 8987              	.LVL1009:
2825:src/display.c **** 		*l++=*b++;
 8988              		.loc 1 2825 14 is_stmt 0 view .LVU2902
 8989 02e2 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8990              	.LVL1010:
2827:src/display.c **** 	      }
 8991              		.loc 1 2827 7 view .LVU2903
 8992 02e6 03F8017C 		strb	r7, [r3, #-1]
2825:src/display.c **** 		*l++=*b++;
 8993              		.loc 1 2825 13 is_stmt 1 view .LVU2904
 8994 02ea 1A46     		mov	r2, r3
 8995 02ec 0233     		adds	r3, r3, #2
 8996              	.LVL1011:
2825:src/display.c **** 		*l++=*b++;
 8997              		.loc 1 2825 13 is_stmt 0 view .LVU2905
 8998 02ee 0029     		cmp	r1, #0
 8999 02f0 F5D1     		bne	.L956
 9000              	.LVL1012:
 9001              	.L955:
2829:src/display.c **** 	    }
 9002              		.loc 1 2829 8 is_stmt 1 view .LVU2906
2829:src/display.c **** 	    }
 9003              		.loc 1 2829 10 is_stmt 0 view .LVU2907
 9004 02f2 0023     		movs	r3, #0
 9005 02f4 DFF83490 		ldr	r9, .L1124+44
 9006 02f8 1370     		strb	r3, [r2]
 9007              	.LVL1013:
2829:src/display.c **** 	    }
 9008              		.loc 1 2829 10 view .LVU2908
 9009              	.LBE525:
 9010              	.LBE524:
2834:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
ARM GAS  /tmp/ccobNVTR.s 			page 262


 9011              		.loc 1 2834 2 is_stmt 1 view .LVU2909
 9012              	.L1080:
2834:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9013              		.loc 1 2834 2 is_stmt 0 view .LVU2910
 9014 02fa FFF7FEFF 		bl	set_annunciators
 9015              	.LVL1014:
2835:src/display.c **** 	  ShowRPN = 0;
 9016              		.loc 1 2835 2 is_stmt 1 view .LVU2911
 9017 02fe 45E7     		b	.L840
 9018              	.L1125:
 9019              		.align	2
 9020              	.L1124:
 9021 0300 00000000 		.word	StateWhileOn
 9022 0304 00000000 		.word	WasDataEntry
 9023 0308 00000000 		.word	DispMsg
 9024 030c 00000000 		.word	ShowRPN
 9025 0310 00000000 		.word	main_ram
 9026 0314 38000000 		.word	.LC26
 9027 0318 00000000 		.word	.LANCHOR20
 9028 031c 00000000 		.word	.LANCHOR24
 9029 0320 00000000 		.word	.LANCHOR18
 9030 0324 00000000 		.word	LastDisplayedNumber
 9031 0328 00000000 		.word	DispPlot
 9032 032c 00000000 		.word	ShowRegister
 9033 0330 00000000 		.word	ProgFree
 9034              	.LVL1015:
 9035              	.L1086:
 9036              	.LBB527:
2587:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9037              		.loc 1 2587 4 view .LVU2912
2587:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9038              		.loc 1 2587 9 is_stmt 0 view .LVU2913
 9039 0334 C14B     		ldr	r3, .L1126
 9040 0336 C24E     		ldr	r6, .L1126+4
 9041 0338 DFF85083 		ldr	r8, .L1126+80
 9042              	.LVL1016:
2587:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9043              		.loc 1 2587 9 view .LVU2914
 9044 033c DFF85093 		ldr	r9, .L1126+84
 9045              	.LVL1017:
2587:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9046              		.loc 1 2587 9 view .LVU2915
 9047 0340 93E80700 		ldm	r3, {r0, r1, r2}
 9048 0344 15AB     		add	r3, sp, #84
 9049 0346 03C3     		stmia	r3!, {r0, r1}
 9050 0348 0021     		movs	r1, #0
2588:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9051              		.loc 1 2588 4 view .LVU2916
 9052 034a BE48     		ldr	r0, .L1126+8
2587:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9053              		.loc 1 2587 9 view .LVU2917
 9054 034c 1A80     		strh	r2, [r3]	@ movhi
 9055 034e CDF85E10 		str	r1, [sp, #94]	@ unaligned
2588:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9056              		.loc 1 2588 4 is_stmt 1 view .LVU2918
 9057 0352 FFF7FEFF 		bl	set_digits_string
 9058              	.LVL1018:
ARM GAS  /tmp/ccobNVTR.s 			page 263


2589:src/display.c **** #ifndef REALBUILD
 9059              		.loc 1 2589 4 view .LVU2919
 9060              	.LBB528:
 9061              	.LBI528:
 402:src/display.c ****   if (res) *res++ = ch;
 9062              		.loc 1 402 14 view .LVU2920
 9063              	.LBB529:
 403:src/display.c ****   else	set_dig(base, ch);
 9064              		.loc 1 403 3 view .LVU2921
 404:src/display.c ****   return res;
 9065              		.loc 1 404 8 view .LVU2922
 9066 0356 7221     		movs	r1, #114
 9067 0358 6C20     		movs	r0, #108
 9068 035a FFF7FEFF 		bl	set_dig
 9069              	.LVL1019:
 405:src/display.c **** }
 9070              		.loc 1 405 3 view .LVU2923
 405:src/display.c **** }
 9071              		.loc 1 405 3 is_stmt 0 view .LVU2924
 9072              	.LBE529:
 9073              	.LBE528:
2591:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9074              		.loc 1 2591 4 is_stmt 1 view .LVU2925
 9075 035e BA49     		ldr	r1, .L1126+12
 9076 0360 BA48     		ldr	r0, .L1126+16
 9077 0362 FFF7FEFF 		bl	scopy
 9078              	.LVL1020:
2592:src/display.c **** #endif
 9079              		.loc 1 2592 4 view .LVU2926
 9080 0366 BA49     		ldr	r1, .L1126+20
 9081 0368 BA48     		ldr	r0, .L1126+24
 9082 036a FFF7FEFF 		bl	scopy
 9083              	.LVL1021:
2594:src/display.c **** 	  set_status(vers);
 9084              		.loc 1 2594 4 view .LVU2927
 9085 036e BA49     		ldr	r1, .L1126+28
 9086 0370 0422     		movs	r2, #4
 9087 0372 0DF15D00 		add	r0, sp, #93
 9088 0376 FFF7FEFF 		bl	xcopy
 9089              	.LVL1022:
2595:src/display.c **** 	  skip = 1;
 9090              		.loc 1 2595 4 view .LVU2928
 9091 037a 15A8     		add	r0, sp, #84
 9092 037c FFF7FEFF 		bl	set_status
 9093              	.LVL1023:
2596:src/display.c **** 	  goto nostk;
 9094              		.loc 1 2596 4 view .LVU2929
2597:src/display.c **** 	} else if (State2.confirm) {
 9095              		.loc 1 2597 4 view .LVU2930
2597:src/display.c **** 	} else if (State2.confirm) {
 9096              		.loc 1 2597 4 is_stmt 0 view .LVU2931
 9097              	.LBE527:
2788:src/display.c **** 	if (!skip) {
 9098              		.loc 1 2788 14 is_stmt 1 view .LVU2932
 9099 0380 FFF7FEFF 		bl	show_flags
 9100              	.LVL1024:
2789:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/ccobNVTR.s 			page 264


 9101              		.loc 1 2789 2 view .LVU2933
2834:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9102              		.loc 1 2834 2 view .LVU2934
 9103 0384 FFF7FEFF 		bl	set_annunciators
 9104              	.LVL1025:
2835:src/display.c **** 	  ShowRPN = 0;
 9105              		.loc 1 2835 2 view .LVU2935
 9106 0388 00E7     		b	.L840
 9107              	.LVL1026:
 9108              	.L977:
2835:src/display.c **** 	  ShowRPN = 0;
 9109              		.loc 1 2835 2 is_stmt 0 view .LVU2936
 9110 038a 0123     		movs	r3, #1
 9111 038c 14E7     		b	.L958
 9112              	.LVL1027:
 9113              	.L920:
2799:src/display.c **** 	    } else {
 9114              		.loc 1 2799 3 is_stmt 1 view .LVU2937
 9115 038e B348     		ldr	r0, .L1126+32
 9116 0390 2421     		movs	r1, #36
 9117 0392 FFF7FEFF 		bl	set_digits_string
 9118              	.LVL1028:
2804:src/display.c **** 	      goto finish;
 9119              		.loc 1 2804 6 view .LVU2938
2804:src/display.c **** 	      goto finish;
 9120              		.loc 1 2804 9 is_stmt 0 view .LVU2939
 9121 0396 3B68     		ldr	r3, [r7]
 9122 0398 002B     		cmp	r3, #0
 9123 039a AED0     		beq	.L1080
 9124 039c B1E6     		b	.L924
 9125              	.LVL1029:
 9126              	.L1099:
2835:src/display.c **** 	  ShowRPN = 0;
 9127              		.loc 1 2835 69 discriminator 3 view .LVU2940
 9128 039e B8F90030 		ldrsh	r3, [r8]
 9129 03a2 002B     		cmp	r3, #0
 9130 03a4 7FF4F2AE 		bne	.L840
2835:src/display.c **** 	  ShowRPN = 0;
 9131              		.loc 1 2835 81 discriminator 4 view .LVU2941
 9132 03a8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9133 03aa 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9134 03ac 03F00403 		and	r3, r3, #4
 9135 03b0 1343     		orrs	r3, r3, r2
 9136 03b2 7FF4EBAE 		bne	.L840
 9137 03b6 AA4F     		ldr	r7, .L1126+36
 9138 03b8 EEE6     		b	.L957
 9139              	.LVL1030:
 9140              	.L1089:
2607:src/display.c **** 	  if (State2.numdigit > 0)
 9141              		.loc 1 2607 4 is_stmt 1 view .LVU2942
2607:src/display.c **** 	  if (State2.numdigit > 0)
 9142              		.loc 1 2607 9 is_stmt 0 view .LVU2943
 9143 03ba 2E22     		movs	r2, #46
 9144 03bc A949     		ldr	r1, .L1126+40
 9145 03be 4046     		mov	r0, r8
 9146 03c0 FFF7FEFF 		bl	scopy_char
 9147              	.LVL1031:
ARM GAS  /tmp/ccobNVTR.s 			page 265


2608:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9148              		.loc 1 2608 14 view .LVU2944
 9149 03c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2607:src/display.c **** 	  if (State2.numdigit > 0)
 9150              		.loc 1 2607 9 view .LVU2945
 9151 03c6 0346     		mov	r3, r0
 9152              	.LVL1032:
2608:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9153              		.loc 1 2608 4 is_stmt 1 view .LVU2946
2608:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9154              		.loc 1 2608 7 is_stmt 0 view .LVU2947
 9155 03c8 002A     		cmp	r2, #0
 9156 03ca 4CD1     		bne	.L1101
 9157              	.L847:
2611:src/display.c **** 	  set_status(buf);
 9158              		.loc 1 2611 4 is_stmt 1 view .LVU2948
 9159              	.LVL1033:
2611:src/display.c **** 	  set_status(buf);
 9160              		.loc 1 2611 10 is_stmt 0 view .LVU2949
 9161 03cc 5F22     		movs	r2, #95
 9162 03ce 1A70     		strb	r2, [r3]
2612:src/display.c **** 	} else if (State2.rarg) {
 9163              		.loc 1 2612 4 is_stmt 1 view .LVU2950
 9164              	.LVL1034:
 9165              	.L863:
 9166              	.LBB530:
2697:src/display.c **** 	} else if (State2.multi) {
 9167              		.loc 1 2697 4 view .LVU2951
 9168 03d0 1EA8     		add	r0, sp, #120
 9169 03d2 FFF7FEFF 		bl	set_status
 9170              	.LVL1035:
2697:src/display.c **** 	} else if (State2.multi) {
 9171              		.loc 1 2697 4 is_stmt 0 view .LVU2952
 9172              	.LBE530:
2787:src/display.c ****       nostk:	show_flags();
 9173              		.loc 1 2787 2 is_stmt 1 view .LVU2953
 9174 03d6 9A4E     		ldr	r6, .L1126+4
 9175 03d8 DFF8B082 		ldr	r8, .L1126+80
 9176 03dc FFF7FEFF 		bl	show_stack
 9177              	.LVL1036:
2788:src/display.c **** 	if (!skip) {
 9178              		.loc 1 2788 14 view .LVU2954
 9179 03e0 FFF7FEFF 		bl	show_flags
 9180              	.LVL1037:
2789:src/display.c **** 	  if (State2.runmode) {
 9181              		.loc 1 2789 2 view .LVU2955
 9182 03e4 33E7     		b	.L842
 9183              	.LVL1038:
 9184              	.L844:
2603:src/display.c **** 	  set_status(buf);
 9185              		.loc 1 2603 6 view .LVU2956
2603:src/display.c **** 	  set_status(buf);
 9186              		.loc 1 2603 12 is_stmt 0 view .LVU2957
 9187 03e6 9D23     		movs	r3, #157
 9188 03e8 954E     		ldr	r6, .L1126+4
 9189 03ea DFF8A082 		ldr	r8, .L1126+80
 9190 03ee 0370     		strb	r3, [r0]
ARM GAS  /tmp/ccobNVTR.s 			page 266


 9191 03f0 FFE6     		b	.L845
 9192              	.LVL1039:
 9193              	.L1100:
 9194              	.LBB539:
2813:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9195              		.loc 1 2813 6 discriminator 1 view .LVU2958
 9196 03f2 9D49     		ldr	r1, .L1126+44
 9197 03f4 07EB8703 		add	r3, r7, r7, lsl #2
2814:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9198              		.loc 1 2814 21 discriminator 1 view .LVU2959
 9199 03f8 07F00107 		and	r7, r7, #1
 9200              	.LVL1040:
2813:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9201              		.loc 1 2813 6 discriminator 1 view .LVU2960
 9202 03fc 1944     		add	r1, r1, r3
 9203 03fe 1EA8     		add	r0, sp, #120
 9204 0400 0337     		adds	r7, r7, #3
 9205 0402 0193     		str	r3, [sp, #4]
 9206 0404 FFF7FEFF 		bl	scopy_spc
 9207              	.LVL1041:
 9208 0408 3A46     		mov	r2, r7
 9209 040a 5946     		mov	r1, fp
 9210 040c FFF7FEFF 		bl	num_arg_0
 9211              	.LVL1042:
2815:src/display.c **** #ifndef REALBUILD
 9212              		.loc 1 2815 6 is_stmt 1 discriminator 1 view .LVU2961
 9213 0410 0921     		movs	r1, #9
 9214 0412 1EA8     		add	r0, sp, #120
 9215 0414 FFF7FEFF 		bl	set_digits_string
 9216              	.LVL1043:
2817:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9217              		.loc 1 2817 6 discriminator 1 view .LVU2962
 9218 0418 2822     		movs	r2, #40
 9219 041a 5146     		mov	r1, r10
 9220 041c 1EA8     		add	r0, sp, #120
 9221 041e FFF7FEFF 		bl	xset
 9222              	.LVL1044:
2818:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9223              		.loc 1 2818 6 discriminator 1 view .LVU2963
 9224 0422 0121     		movs	r1, #1
 9225 0424 D9F80000 		ldr	r0, [r9]
 9226 0428 5246     		mov	r2, r10
 9227 042a FFF7FEFF 		bl	set_exp
 9228              	.LVL1045:
2819:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9229              		.loc 1 2819 6 discriminator 1 view .LVU2964
 9230 042e 8F49     		ldr	r1, .L1126+48
 9231 0430 019B     		ldr	r3, [sp, #4]
 9232 0432 1944     		add	r1, r1, r3
 9233 0434 42E7     		b	.L963
 9234              	.LVL1046:
 9235              	.L1091:
2819:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9236              		.loc 1 2819 6 is_stmt 0 discriminator 1 view .LVU2965
 9237              	.LBE539:
2645:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9238              		.loc 1 2645 4 is_stmt 1 view .LVU2966
ARM GAS  /tmp/ccobNVTR.s 			page 267


2646:src/display.c **** 	  *bp++ = '_';
 9239              		.loc 1 2646 33 is_stmt 0 view .LVU2967
 9240 0436 8E4B     		ldr	r3, .L1126+52
 9241 0438 814E     		ldr	r6, .L1126+4
2646:src/display.c **** 	  *bp++ = '_';
 9242              		.loc 1 2646 10 view .LVU2968
 9243 043a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9244 043c 88F80130 		strb	r3, [r8, #1]
2645:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9245              		.loc 1 2645 10 view .LVU2969
 9246 0440 7823     		movs	r3, #120
2647:src/display.c **** 	  *bp++ = '?';
 9247              		.loc 1 2647 10 view .LVU2970
 9248 0442 5F22     		movs	r2, #95
2645:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9249              		.loc 1 2645 10 view .LVU2971
 9250 0444 88F80030 		strb	r3, [r8]
2646:src/display.c **** 	  *bp++ = '_';
 9251              		.loc 1 2646 4 is_stmt 1 view .LVU2972
 9252              	.LVL1047:
2647:src/display.c **** 	  *bp++ = '?';
 9253              		.loc 1 2647 4 view .LVU2973
2648:src/display.c **** 	  set_status(buf);
 9254              		.loc 1 2648 10 is_stmt 0 view .LVU2974
 9255 0448 3F23     		movs	r3, #63
2647:src/display.c **** 	  *bp++ = '?';
 9256              		.loc 1 2647 10 view .LVU2975
 9257 044a 88F80220 		strb	r2, [r8, #2]
2648:src/display.c **** 	  set_status(buf);
 9258              		.loc 1 2648 4 is_stmt 1 view .LVU2976
 9259              	.LVL1048:
2648:src/display.c **** 	  set_status(buf);
 9260              		.loc 1 2648 10 is_stmt 0 view .LVU2977
 9261 044e 88F80330 		strb	r3, [r8, #3]
2649:src/display.c **** 	} else if (cata) {
 9262              		.loc 1 2649 4 is_stmt 1 view .LVU2978
 9263 0452 1EA8     		add	r0, sp, #120
 9264 0454 DFF83482 		ldr	r8, .L1126+80
 9265              	.LVL1049:
2649:src/display.c **** 	} else if (cata) {
 9266              		.loc 1 2649 4 is_stmt 0 view .LVU2979
 9267 0458 FFF7FEFF 		bl	set_status
 9268              	.LVL1050:
2787:src/display.c ****       nostk:	show_flags();
 9269              		.loc 1 2787 2 is_stmt 1 view .LVU2980
 9270 045c FFF7FEFF 		bl	show_stack
 9271              	.LVL1051:
2788:src/display.c **** 	if (!skip) {
 9272              		.loc 1 2788 14 view .LVU2981
 9273 0460 FFF7FEFF 		bl	show_flags
 9274              	.LVL1052:
2789:src/display.c **** 	  if (State2.runmode) {
 9275              		.loc 1 2789 2 view .LVU2982
 9276 0464 F3E6     		b	.L842
 9277              	.LVL1053:
 9278              	.L1101:
2609:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
ARM GAS  /tmp/ccobNVTR.s 			page 268


 9279              		.loc 1 2609 6 view .LVU2983
2609:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9280              		.loc 1 2609 11 is_stmt 0 view .LVU2984
 9281 0466 2189     		ldrh	r1, [r4, #8]
 9282 0468 FFF7FEFF 		bl	num_arg_0
 9283              	.LVL1054:
2609:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9284              		.loc 1 2609 11 view .LVU2985
 9285 046c 0346     		mov	r3, r0
 9286              	.LVL1055:
2609:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9287              		.loc 1 2609 11 view .LVU2986
 9288 046e ADE7     		b	.L847
 9289              	.LVL1056:
 9290              	.L1090:
2619:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9291              		.loc 1 2619 4 is_stmt 1 view .LVU2987
2619:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9292              		.loc 1 2619 35 is_stmt 0 view .LVU2988
 9293 0470 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9294 0472 8049     		ldr	r1, .L1126+56
 9295 0474 0623     		movs	r3, #6
 9296 0476 03EB0213 		add	r3, r3, r2, lsl #4
2619:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9297              		.loc 1 2619 9 view .LVU2989
 9298 047a 1944     		add	r1, r1, r3
 9299 047c 4046     		mov	r0, r8
 9300 047e FFF7FEFF 		bl	scopy
 9301              	.LVL1057:
2620:src/display.c **** 	  if (State2.dot) {
 9302              		.loc 1 2620 4 is_stmt 1 view .LVU2990
2620:src/display.c **** 	  if (State2.dot) {
 9303              		.loc 1 2620 9 is_stmt 0 view .LVU2991
 9304 0482 7D4A     		ldr	r2, .L1126+60
 9305 0484 7D4B     		ldr	r3, .L1126+64
 9306 0486 94F91510 		ldrsb	r1, [r4, #21]
 9307 048a 12EA2101 		ands	r1, r2, r1, asr #32
 9308 048e 38BF     		it	cc
 9309 0490 1946     		movcc	r1, r3
 9310 0492 FFF7FEFF 		bl	scopy
 9311              	.LVL1058:
2621:src/display.c **** 	    *bp++ = 's';
 9312              		.loc 1 2621 8 view .LVU2992
 9313 0496 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9314              	.LVL1059:
2621:src/display.c **** 	    *bp++ = 's';
 9315              		.loc 1 2621 4 is_stmt 1 view .LVU2993
2621:src/display.c **** 	    *bp++ = 's';
 9316              		.loc 1 2621 7 is_stmt 0 view .LVU2994
 9317 0498 5A06     		lsls	r2, r3, #25
 9318 049a 40F19A80 		bpl	.L850
2622:src/display.c **** 	    *bp++ = '_';
 9319              		.loc 1 2622 6 is_stmt 1 view .LVU2995
 9320              	.LVL1060:
2622:src/display.c **** 	    *bp++ = '_';
 9321              		.loc 1 2622 12 is_stmt 0 view .LVU2996
 9322 049e 7322     		movs	r2, #115
ARM GAS  /tmp/ccobNVTR.s 			page 269


 9323              	.LVL1061:
 9324              	.L1074:
2626:src/display.c **** 	  } else {
 9325              		.loc 1 2626 12 view .LVU2997
 9326 04a0 5F23     		movs	r3, #95
 9327 04a2 674E     		ldr	r6, .L1126+4
 9328 04a4 DFF8E481 		ldr	r8, .L1126+80
2625:src/display.c **** 	    *bp++ = '_';
 9329              		.loc 1 2625 12 view .LVU2998
 9330 04a8 0270     		strb	r2, [r0]
2626:src/display.c **** 	  } else {
 9331              		.loc 1 2626 6 is_stmt 1 view .LVU2999
2626:src/display.c **** 	  } else {
 9332              		.loc 1 2626 12 is_stmt 0 view .LVU3000
 9333 04aa 4370     		strb	r3, [r0, #1]
 9334 04ac A1E6     		b	.L845
 9335              	.LVL1062:
 9336              	.L926:
 9337              	.LBB540:
 9338              	.LBB513:
1232:src/display.c **** 
 9339              		.loc 1 1232 2 is_stmt 1 view .LVU3001
 9340 04ae FFF7FEFF 		bl	set_separator_decimal_modes
 9341              	.LVL1063:
1234:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9342              		.loc 1 1234 2 view .LVU3002
1236:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9343              		.loc 1 1236 2 view .LVU3003
1236:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9344              		.loc 1 1236 5 is_stmt 0 view .LVU3004
 9345 04b2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9346              	.LBB498:
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9347              		.loc 1 1243 15 view .LVU3005
 9348 04b4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9349              	.LBE498:
1236:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9350              		.loc 1 1236 5 view .LVU3006
 9351 04b8 012B     		cmp	r3, #1
 9352 04ba 40F2B780 		bls	.L931
 9353              	.LVL1064:
 9354              	.LBB499:
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9355              		.loc 1 1243 14 is_stmt 1 view .LVU3007
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9356              		.loc 1 1243 4 is_stmt 0 view .LVU3008
 9357 04be BCF1000F 		cmp	ip, #0
 9358 04c2 72D0     		beq	.L932
 9359 04c4 0AF10103 		add	r3, r10, #1
 9360 04c8 6046     		mov	r0, ip
 9361              	.LBE499:
1211:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9362              		.loc 1 1211 11 view .LVU3009
 9363 04ca 4FF0FF31 		mov	r1, #-1
 9364 04ce 6FEA0A0E 		mvn	lr, r10
 9365              	.LVL1065:
 9366              	.L934:
ARM GAS  /tmp/ccobNVTR.s 			page 270


 9367              	.LBB500:
1244:src/display.c **** 	      gotdot = j;
 9368              		.loc 1 1244 9 view .LVU3010
 9369 04d2 2E28     		cmp	r0, #46
 9370 04d4 0EEB0302 		add	r2, lr, r3
 9371              	.LVL1066:
1244:src/display.c **** 	      gotdot = j;
 9372              		.loc 1 1244 6 is_stmt 1 view .LVU3011
1244:src/display.c **** 	      gotdot = j;
 9373              		.loc 1 1244 9 is_stmt 0 view .LVU3012
 9374 04d8 03D1     		bne	.L933
1244:src/display.c **** 	      gotdot = j;
 9375              		.loc 1 1244 22 view .LVU3013
 9376 04da B1F1FF3F 		cmp	r1, #-1
 9377 04de 08BF     		it	eq
 9378 04e0 1146     		moveq	r1, r2
 9379              	.LVL1067:
 9380              	.L933:
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9381              		.loc 1 1243 28 is_stmt 1 view .LVU3014
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9382              		.loc 1 1243 14 view .LVU3015
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9383              		.loc 1 1243 15 is_stmt 0 view .LVU3016
 9384 04e2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
1243:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9385              		.loc 1 1243 4 view .LVU3017
 9386 04e6 0028     		cmp	r0, #0
 9387 04e8 F3D1     		bne	.L934
1251:src/display.c **** 	  if (j > 0) {
 9388              		.loc 1 1251 4 is_stmt 1 view .LVU3018
1251:src/display.c **** 	  if (j > 0) {
 9389              		.loc 1 1251 6 is_stmt 0 view .LVU3019
 9390 04ea A2F10B03 		sub	r3, r2, #11
 9391              	.LVL1068:
1252:src/display.c **** 	    p += j + 1;
 9392              		.loc 1 1252 4 is_stmt 1 view .LVU3020
1252:src/display.c **** 	    p += j + 1;
 9393              		.loc 1 1252 7 is_stmt 0 view .LVU3021
 9394 04ee 002B     		cmp	r3, #0
 9395 04f0 40F34C81 		ble	.L1102
1253:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9396              		.loc 1 1253 6 is_stmt 1 view .LVU3022
1253:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9397              		.loc 1 1253 8 is_stmt 0 view .LVU3023
 9398 04f4 0A3A     		subs	r2, r2, #10
1255:src/display.c **** 	      gotdot = 0;
 9399              		.loc 1 1255 9 view .LVU3024
 9400 04f6 8B42     		cmp	r3, r1
1253:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9401              		.loc 1 1253 8 view .LVU3025
 9402 04f8 9244     		add	r10, r10, r2
 9403              	.LVL1069:
1254:src/display.c **** 	    if (gotdot <= j) {
 9404              		.loc 1 1254 6 is_stmt 1 view .LVU3026
1255:src/display.c **** 	      gotdot = 0;
 9405              		.loc 1 1255 6 view .LVU3027
ARM GAS  /tmp/ccobNVTR.s 			page 271


1255:src/display.c **** 	      gotdot = 0;
 9406              		.loc 1 1255 9 is_stmt 0 view .LVU3028
 9407 04fa 80F26581 		bge	.L971
1260:src/display.c **** 	      gotdot = 0;
 9408              		.loc 1 1260 11 is_stmt 1 view .LVU3029
1260:src/display.c **** 	      gotdot = 0;
 9409              		.loc 1 1260 14 is_stmt 0 view .LVU3030
 9410 04fe 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9411              	.LVL1070:
1260:src/display.c **** 	      gotdot = 0;
 9412              		.loc 1 1260 14 view .LVU3031
 9413 0502 2E2B     		cmp	r3, #46
 9414 0504 00F0E282 		beq	.L1103
 9415              	.LVL1071:
1267:src/display.c **** 	    overflow_to_left = 1;
 9416              		.loc 1 1267 6 is_stmt 1 view .LVU3032
 9417 0508 3C21     		movs	r1, #60
 9418 050a FFF7FEFF 		bl	set_dig
 9419              	.LVL1072:
1268:src/display.c **** 	  }
 9420              		.loc 1 1268 6 view .LVU3033
1268:src/display.c **** 	  }
 9421              		.loc 1 1268 6 is_stmt 0 view .LVU3034
 9422 050e 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1268:src/display.c **** 	  }
 9423              		.loc 1 1268 6 view .LVU3035
 9424              	.LBE500:
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9425              		.loc 1 1274 9 is_stmt 1 view .LVU3036
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9426              		.loc 1 1274 2 is_stmt 0 view .LVU3037
 9427 0512 BCF1000F 		cmp	ip, #0
 9428 0516 48D0     		beq	.L932
 9429              	.LBB501:
1266:src/display.c **** 	    set_dig(0, '<');
 9430              		.loc 1 1266 18 view .LVU3038
 9431 0518 4FF0FF33 		mov	r3, #-1
1254:src/display.c **** 	    if (gotdot <= j) {
 9432              		.loc 1 1254 8 view .LVU3039
 9433 051c 4FF0090B 		mov	fp, #9
 9434              	.LVL1073:
 9435              	.L965:
1268:src/display.c **** 	  }
 9436              		.loc 1 1268 23 view .LVU3040
 9437 0520 4FF00109 		mov	r9, #1
 9438              	.LVL1074:
 9439              	.L944:
1268:src/display.c **** 	  }
 9440              		.loc 1 1268 23 view .LVU3041
 9441              	.LBE501:
1299:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9442              		.loc 1 1299 5 view .LVU3042
 9443 0524 0195     		str	r5, [sp, #4]
 9444 0526 1D46     		mov	r5, r3
 9445              	.LVL1075:
1299:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9446              		.loc 1 1299 5 view .LVU3043
ARM GAS  /tmp/ccobNVTR.s 			page 272


 9447 0528 3346     		mov	r3, r6
 9448 052a 6246     		mov	r2, ip
 9449 052c 5646     		mov	r6, r10
 9450 052e 9A46     		mov	r10, r3
 9451 0530 08E0     		b	.L942
 9452              	.LVL1076:
 9453              	.L1104:
1289:src/display.c **** #  endif
 9454              		.loc 1 1289 11 view .LVU3044
 9455 0532 5D45     		cmp	r5, fp
 9456 0534 11D0     		beq	.L939
 9457              	.LVL1077:
 9458              	.L938:
1313:src/display.c **** 	      i += segs_per_digit;
 9459              		.loc 1 1313 8 view .LVU3045
 9460 0536 FFF7FEFF 		bl	set_dig
 9461              	.LVL1078:
1314:src/display.c **** 	    }
 9462              		.loc 1 1314 8 is_stmt 1 view .LVU3046
1314:src/display.c **** 	    }
 9463              		.loc 1 1314 10 is_stmt 0 view .LVU3047
 9464 053a 0BF1090B 		add	fp, fp, #9
 9465              	.LVL1079:
 9466              	.L940:
1278:src/display.c **** 	  if (*p == '.') {
 9467              		.loc 1 1278 11 is_stmt 1 view .LVU3048
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9468              		.loc 1 1274 9 view .LVU3049
 9469 053e 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9470              	.LVL1080:
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9471              		.loc 1 1274 2 is_stmt 0 view .LVU3050
 9472 0542 8AB1     		cbz	r2, .L1076
 9473              	.LVL1081:
 9474              	.L942:
1279:src/display.c **** 	    if (gotdot < 0)
 9475              		.loc 1 1279 4 is_stmt 1 view .LVU3051
1280:src/display.c **** 	      gotdot = i;
 9476              		.loc 1 1280 6 view .LVU3052
1313:src/display.c **** 	      i += segs_per_digit;
 9477              		.loc 1 1313 8 view .LVU3053
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9478              		.loc 1 1274 20 is_stmt 0 view .LVU3054
 9479 0544 452A     		cmp	r2, #69
1313:src/display.c **** 	      i += segs_per_digit;
 9480              		.loc 1 1313 8 view .LVU3055
 9481 0546 1146     		mov	r1, r2
 9482 0548 5846     		mov	r0, fp
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9483              		.loc 1 1274 20 view .LVU3056
 9484 054a 0DD0     		beq	.L1076
1279:src/display.c **** 	    if (gotdot < 0)
 9485              		.loc 1 1279 7 view .LVU3057
 9486 054c 2E2A     		cmp	r2, #46
 9487 054e F2D1     		bne	.L938
1289:src/display.c **** #  endif
 9488              		.loc 1 1289 8 is_stmt 1 view .LVU3058
ARM GAS  /tmp/ccobNVTR.s 			page 273


1291:src/display.c **** 		i += segs_per_digit;
 9489              		.loc 1 1291 3 view .LVU3059
 9490              	.LVL1082:
1295:src/display.c **** 		  i += segs_per_digit;
 9491              		.loc 1 1295 3 view .LVU3060
1280:src/display.c **** 	      gotdot = i;
 9492              		.loc 1 1280 9 is_stmt 0 view .LVU3061
 9493 0550 002D     		cmp	r5, #0
1291:src/display.c **** 		i += segs_per_digit;
 9494              		.loc 1 1291 3 view .LVU3062
 9495 0552 5846     		mov	r0, fp
 9496 0554 4FF02F01 		mov	r1, #47
1280:src/display.c **** 	      gotdot = i;
 9497              		.loc 1 1280 9 view .LVU3063
 9498 0558 EBDA     		bge	.L1104
 9499              	.L939:
1296:src/display.c **** 		}
 9500              		.loc 1 1296 5 is_stmt 1 view .LVU3064
 9501              	.LVL1083:
1295:src/display.c **** 		  i += segs_per_digit;
 9502              		.loc 1 1295 6 is_stmt 0 view .LVU3065
 9503 055a A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9504 055c 012A     		cmp	r2, #1
 9505 055e 5CD9     		bls	.L941
 9506 0560 5D46     		mov	r5, fp
1296:src/display.c **** 		}
 9507              		.loc 1 1296 7 view .LVU3066
 9508 0562 0BF1090B 		add	fp, fp, #9
 9509              	.LVL1084:
1296:src/display.c **** 		}
 9510              		.loc 1 1296 7 view .LVU3067
 9511 0566 EAE7     		b	.L940
 9512              	.LVL1085:
 9513              	.L1076:
1323:src/display.c **** 	    gotdot = i;
 9514              		.loc 1 1323 4 is_stmt 1 view .LVU3068
 9515 0568 2B46     		mov	r3, r5
1323:src/display.c **** 	    gotdot = i;
 9516              		.loc 1 1323 7 is_stmt 0 view .LVU3069
 9517 056a 33EA2303 		bics	r3, r3, r3, asr #32
 9518 056e 28BF     		it	cs
 9519 0570 5B46     		movcs	r3, fp
 9520              	.LVL1086:
1325:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9521              		.loc 1 1325 4 is_stmt 1 view .LVU3070
1326:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9522              		.loc 1 1326 6 view .LVU3071
1326:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9523              		.loc 1 1326 13 is_stmt 0 view .LVU3072
 9524 0572 A3F11B0B 		sub	fp, r3, #27
 9525              	.LVL1087:
1327:src/display.c **** 	      break;
 9526              		.loc 1 1327 6 is_stmt 1 view .LVU3073
 9527 0576 5246     		mov	r2, r10
1327:src/display.c **** 	      break;
 9528              		.loc 1 1327 9 is_stmt 0 view .LVU3074
 9529 0578 BBF1000F 		cmp	fp, #0
ARM GAS  /tmp/ccobNVTR.s 			page 274


 9530 057c B246     		mov	r10, r6
 9531 057e 019D     		ldr	r5, [sp, #4]
 9532 0580 1646     		mov	r6, r2
 9533              	.LVL1088:
1327:src/display.c **** 	      break;
 9534              		.loc 1 1327 9 view .LVU3075
 9535 0582 12DD     		ble	.L932
 9536 0584 4B46     		mov	r3, r9
 9537 0586 A946     		mov	r9, r5
 9538 0588 1D46     		mov	r5, r3
 9539              	.L948:
1330:src/display.c **** 	      break;
 9540              		.loc 1 1330 6 is_stmt 1 view .LVU3076
1333:src/display.c **** 	  }
 9541              		.loc 1 1333 6 view .LVU3077
 9542              	.LBB502:
 9543              	.LBB503:
 365:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9544              		.loc 1 365 3 view .LVU3078
 9545 058a 5846     		mov	r0, fp
 9546              	.LBE503:
 9547              	.LBE502:
1330:src/display.c **** 	      break;
 9548              		.loc 1 1330 9 is_stmt 0 view .LVU3079
 9549 058c 15B1     		cbz	r5, .L949
 9550              	.LVL1089:
1330:src/display.c **** 	      break;
 9551              		.loc 1 1330 27 view .LVU3080
 9552 058e BBF1090F 		cmp	fp, #9
 9553 0592 09D0     		beq	.L1071
 9554              	.L949:
1333:src/display.c **** 	  }
 9555              		.loc 1 1333 6 view .LVU3081
 9556 0594 3A4B     		ldr	r3, .L1126+68
 9557 0596 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9558              	.LVL1090:
 9559              	.LBB505:
 9560              	.LBI502:
 362:src/display.c ****   if (sep == SEP_NONE)
 9561              		.loc 1 362 14 is_stmt 1 view .LVU3082
 9562              	.LBB504:
 363:src/display.c ****     return res;
 9563              		.loc 1 363 3 view .LVU3083
 363:src/display.c ****     return res;
 9564              		.loc 1 363 6 is_stmt 0 view .LVU3084
 9565 0598 09B1     		cbz	r1, .L950
 9566 059a FFF7FEFF 		bl	set_separator.part.0
 9567              	.LVL1091:
 9568              	.L950:
 363:src/display.c ****     return res;
 9569              		.loc 1 363 6 view .LVU3085
 9570              	.LBE504:
 9571              	.LBE505:
1325:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9572              		.loc 1 1325 4 is_stmt 1 view .LVU3086
1326:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9573              		.loc 1 1326 6 view .LVU3087
ARM GAS  /tmp/ccobNVTR.s 			page 275


1326:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9574              		.loc 1 1326 13 is_stmt 0 view .LVU3088
 9575 059e ABF11B0B 		sub	fp, fp, #27
 9576              	.LVL1092:
1327:src/display.c **** 	      break;
 9577              		.loc 1 1327 6 is_stmt 1 view .LVU3089
1327:src/display.c **** 	      break;
 9578              		.loc 1 1327 9 is_stmt 0 view .LVU3090
 9579 05a2 BBF1000F 		cmp	fp, #0
 9580 05a6 F0DC     		bgt	.L948
 9581              	.L1071:
1327:src/display.c **** 	      break;
 9582              		.loc 1 1327 9 view .LVU3091
 9583 05a8 4D46     		mov	r5, r9
 9584              	.LVL1093:
 9585              	.L932:
1351:src/display.c **** 	    p++;
 9586              		.loc 1 1351 4 is_stmt 1 view .LVU3092
1351:src/display.c **** 	    p++;
 9587              		.loc 1 1351 7 is_stmt 0 view .LVU3093
 9588 05aa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9589 05ae 452B     		cmp	r3, #69
 9590 05b0 00F0DC80 		beq	.L1105
 9591              	.L1082:
 9592              	.LVL1094:
1351:src/display.c **** 	    p++;
 9593              		.loc 1 1351 7 view .LVU3094
 9594              	.LBE513:
 9595              	.LBE540:
2804:src/display.c **** 	      goto finish;
 9596              		.loc 1 2804 6 is_stmt 1 view .LVU3095
2804:src/display.c **** 	      goto finish;
 9597              		.loc 1 2804 9 is_stmt 0 view .LVU3096
 9598 05b4 3B68     		ldr	r3, [r7]
 9599 05b6 DFF8D890 		ldr	r9, .L1126+84
 9600 05ba 002B     		cmp	r3, #0
 9601 05bc 3FF4E0AD 		beq	.L929
 9602 05c0 9FE5     		b	.L924
 9603              	.LVL1095:
 9604              	.L1098:
 9605              	.LBB541:
 9606              	.LBB514:
1221:src/display.c **** 	p++;
 9607              		.loc 1 1221 2 is_stmt 1 view .LVU3097
 9608              	.LBB506:
 9609              	.LBI506:
 291:src/display.c **** {
 9610              		.loc 1 291 13 view .LVU3098
 9611              	.LBB507:
 293:src/display.c ****   set_dot(MANT_SIGN);
 9612              		.loc 1 293 3 view .LVU3099
 293:src/display.c ****   set_dot(MANT_SIGN);
 9613              		.loc 1 293 25 is_stmt 0 view .LVU3100
 9614 05c2 224A     		ldr	r2, .L1126+16
 294:src/display.c **** }
 9615              		.loc 1 294 3 view .LVU3101
 9616 05c4 8120     		movs	r0, #129
ARM GAS  /tmp/ccobNVTR.s 			page 276


 9617              	.LVL1096:
 293:src/display.c ****   set_dot(MANT_SIGN);
 9618              		.loc 1 293 25 view .LVU3102
 9619 05c6 1370     		strb	r3, [r2]
 294:src/display.c **** }
 9620              		.loc 1 294 3 is_stmt 1 view .LVU3103
 9621              	.LBE507:
 9622              	.LBE506:
1222:src/display.c ****       }
 9623              		.loc 1 1222 3 is_stmt 0 view .LVU3104
 9624 05c8 0AF1010A 		add	r10, r10, #1
 9625              	.LVL1097:
 9626              	.LBB509:
 9627              	.LBB508:
 294:src/display.c **** }
 9628              		.loc 1 294 3 view .LVU3105
 9629 05cc FFF7FEFF 		bl	set_dot
 9630              	.LVL1098:
 9631              	.LBE508:
 9632              	.LBE509:
1222:src/display.c ****       }
 9633              		.loc 1 1222 2 is_stmt 1 view .LVU3106
1222:src/display.c ****       }
 9634              		.loc 1 1222 2 is_stmt 0 view .LVU3107
 9635 05d0 B9E5     		b	.L925
 9636              	.LVL1099:
 9637              	.L850:
1222:src/display.c ****       }
 9638              		.loc 1 1222 2 view .LVU3108
 9639              	.LBE514:
 9640              	.LBE541:
2624:src/display.c **** 	    *bp++ = '\021';
 9641              		.loc 1 2624 11 is_stmt 1 view .LVU3109
2624:src/display.c **** 	    *bp++ = '\021';
 9642              		.loc 1 2624 14 is_stmt 0 view .LVU3110
 9643 05d2 BAF1010F 		cmp	r10, #1
 9644 05d6 00F0D780 		beq	.L1106
2631:src/display.c **** 	      *bp++ = '.';
 9645              		.loc 1 2631 6 is_stmt 1 view .LVU3111
2631:src/display.c **** 	      *bp++ = '.';
 9646              		.loc 1 2631 10 is_stmt 0 view .LVU3112
 9647 05da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2631:src/display.c **** 	      *bp++ = '.';
 9648              		.loc 1 2631 9 view .LVU3113
 9649 05dc DB07     		lsls	r3, r3, #31
2632:src/display.c **** 	    if (State2.numdigit > 0) {
 9650              		.loc 1 2632 8 is_stmt 1 view .LVU3114
 9651              	.LVL1100:
2632:src/display.c **** 	    if (State2.numdigit > 0) {
 9652              		.loc 1 2632 14 is_stmt 0 view .LVU3115
 9653 05de 44BF     		itt	mi
 9654 05e0 2E23     		movmi	r3, #46
 9655 05e2 00F8013B 		strbmi	r3, [r0], #1
 9656              	.LVL1101:
2633:src/display.c **** 	      if (State2.shuffle)
 9657              		.loc 1 2633 6 is_stmt 1 view .LVU3116
2633:src/display.c **** 	      if (State2.shuffle)
ARM GAS  /tmp/ccobNVTR.s 			page 277


 9658              		.loc 1 2633 16 is_stmt 0 view .LVU3117
 9659 05e6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2633:src/display.c **** 	      if (State2.shuffle)
 9660              		.loc 1 2633 9 view .LVU3118
 9661 05e8 8AB1     		cbz	r2, .L853
2634:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9662              		.loc 1 2634 8 is_stmt 1 view .LVU3119
2634:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9663              		.loc 1 2634 12 is_stmt 0 view .LVU3120
 9664 05ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2634:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9665              		.loc 1 2634 11 view .LVU3121
 9666 05ec 9E07     		lsls	r6, r3, #30
 9667 05ee 40F1D781 		bpl	.L854
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9668              		.loc 1 2635 3 is_stmt 1 view .LVU3122
 9669              	.LVL1102:
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9670              		.loc 1 2635 17 is_stmt 0 view .LVU3123
 9671 05f2 2289     		ldrh	r2, [r4, #8]
 9672              	.LVL1103:
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9673              		.loc 1 2635 34 is_stmt 1 view .LVU3124
 9674 05f4 2349     		ldr	r1, .L1126+72
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9675              		.loc 1 2635 10 is_stmt 0 view .LVU3125
 9676 05f6 0023     		movs	r3, #0
 9677              	.LVL1104:
 9678              	.L855:
2636:src/display.c **** 	      else
 9679              		.loc 1 2636 5 is_stmt 1 discriminator 3 view .LVU3126
2636:src/display.c **** 	      else
 9680              		.loc 1 2636 24 is_stmt 0 discriminator 3 view .LVU3127
 9681 05f8 02F00306 		and	r6, r2, #3
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9682              		.loc 1 2635 54 discriminator 3 view .LVU3128
 9683 05fc 0133     		adds	r3, r3, #1
 9684              	.LVL1105:
2636:src/display.c **** 	      else
 9685              		.loc 1 2636 11 discriminator 3 view .LVU3129
 9686 05fe 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9687 0600 00F8016B 		strb	r6, [r0], #1
 9688              	.LVL1106:
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9689              		.loc 1 2635 53 is_stmt 1 discriminator 3 view .LVU3130
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9690              		.loc 1 2635 42 is_stmt 0 discriminator 3 view .LVU3131
 9691 0604 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9692              		.loc 1 2635 3 discriminator 3 view .LVU3132
 9693 0606 9E42     		cmp	r6, r3
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9694              		.loc 1 2635 60 discriminator 3 view .LVU3133
 9695 0608 4FEAA202 		asr	r2, r2, #2
 9696              	.LVL1107:
2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9697              		.loc 1 2635 34 is_stmt 1 discriminator 3 view .LVU3134
ARM GAS  /tmp/ccobNVTR.s 			page 278


2635:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9698              		.loc 1 2635 3 is_stmt 0 discriminator 3 view .LVU3135
 9699 060c F4DC     		bgt	.L855
 9700              	.LVL1108:
 9701              	.L853:
2641:src/display.c **** 	  }
 9702              		.loc 1 2641 6 is_stmt 1 view .LVU3136
2641:src/display.c **** 	  }
 9703              		.loc 1 2641 12 is_stmt 0 view .LVU3137
 9704 060e 5F23     		movs	r3, #95
 9705 0610 0B4E     		ldr	r6, .L1126+4
 9706 0612 DFF87880 		ldr	r8, .L1126+80
 9707 0616 0370     		strb	r3, [r0]
 9708 0618 EBE5     		b	.L845
 9709              	.LVL1109:
 9710              	.L941:
 9711              	.LBB542:
 9712              	.LBB515:
1299:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9713              		.loc 1 1299 5 is_stmt 1 view .LVU3138
 9714 061a 1B4B     		ldr	r3, .L1126+76
 9715 061c 0022     		movs	r2, #0
 9716 061e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9717 0620 ABF10900 		sub	r0, fp, #9
 9718              	.LVL1110:
1299:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9719              		.loc 1 1299 5 is_stmt 0 view .LVU3139
 9720 0624 FFF7FEFF 		bl	set_decimal
 9721              	.LVL1111:
 9722 0628 5D46     		mov	r5, fp
 9723 062a 88E7     		b	.L940
 9724              	.LVL1112:
 9725              	.L931:
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9726              		.loc 1 1274 9 is_stmt 1 view .LVU3140
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9727              		.loc 1 1274 2 is_stmt 0 view .LVU3141
 9728 062c BCF1000F 		cmp	ip, #0
 9729 0630 BBD0     		beq	.L932
1234:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9730              		.loc 1 1234 4 view .LVU3142
 9731 0632 CB46     		mov	fp, r9
1211:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9732              		.loc 1 1211 11 view .LVU3143
 9733 0634 4FF0FF33 		mov	r3, #-1
 9734 0638 74E7     		b	.L944
 9735              	.L1127:
 9736 063a 00BF     		.align	2
 9737              	.L1126:
 9738 063c 0C000000 		.word	.LANCHOR17+12
 9739 0640 00000000 		.word	DispMsg
 9740 0644 08000000 		.word	.LC23
 9741 0648 18000000 		.word	.LC24
 9742 064c 00000000 		.word	LastDisplayedNumber
 9743 0650 34000000 		.word	.LC25
 9744 0654 00000000 		.word	LastDisplayedExponent
 9745 0658 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/ccobNVTR.s 			page 279


 9746 065c AC000000 		.word	.LC42
 9747 0660 00000000 		.word	ShowRPN
 9748 0664 56040000 		.word	argcmds+1110
 9749 0668 00000000 		.word	.LANCHOR21
 9750 066c 00000000 		.word	.LANCHOR23
 9751 0670 B4000000 		.word	.LC28
 9752 0674 00000000 		.word	argcmds
 9753 0678 00000000 		.word	.LC20
 9754 067c 04000000 		.word	.LC21
 9755 0680 00000000 		.word	.LANCHOR0
 9756 0684 BC000000 		.word	.LC27
 9757 0688 00000000 		.word	.LANCHOR1
 9758 068c 00000000 		.word	DispPlot
 9759 0690 00000000 		.word	ShowRegister
 9760              	.LVL1113:
 9761              	.L1092:
1211:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9762              		.loc 1 1211 11 view .LVU3144
 9763              	.LBE515:
 9764              	.LBE542:
 9765              	.LBB543:
2651:src/display.c **** 	  char b2[16];
 9766              		.loc 1 2651 4 is_stmt 1 view .LVU3145
2651:src/display.c **** 	  char b2[16];
 9767              		.loc 1 2651 45 is_stmt 0 view .LVU3146
 9768 0694 CC4B     		ldr	r3, .L1128
 9769 0696 1B68     		ldr	r3, [r3]
 9770 0698 B3F8DC07 		ldrh	r0, [r3, #2012]
2651:src/display.c **** 	  char b2[16];
 9771              		.loc 1 2651 22 view .LVU3147
 9772 069c C0F34610 		ubfx	r0, r0, #5, #7
 9773 06a0 FFF7FEFF 		bl	current_catalogue
 9774              	.LVL1114:
2655:src/display.c **** 	  p = catcmd(op, b2);
 9775              		.loc 1 2655 9 view .LVU3148
 9776 06a4 C949     		ldr	r1, .L1128+4
2651:src/display.c **** 	  char b2[16];
 9777              		.loc 1 2651 22 view .LVU3149
 9778 06a6 8246     		mov	r10, r0
 9779              	.LVL1115:
2652:src/display.c **** 	  const char *p;
 9780              		.loc 1 2652 4 is_stmt 1 view .LVU3150
2653:src/display.c **** 
 9781              		.loc 1 2653 4 view .LVU3151
2655:src/display.c **** 	  p = catcmd(op, b2);
 9782              		.loc 1 2655 4 view .LVU3152
2655:src/display.c **** 	  p = catcmd(op, b2);
 9783              		.loc 1 2655 9 is_stmt 0 view .LVU3153
 9784 06a8 4046     		mov	r0, r8
 9785              	.LVL1116:
2655:src/display.c **** 	  p = catcmd(op, b2);
 9786              		.loc 1 2655 9 view .LVU3154
 9787 06aa FFF7FEFF 		bl	scopy
 9788              	.LVL1117:
2656:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9789              		.loc 1 2656 8 view .LVU3155
 9790 06ae 08A9     		add	r1, sp, #32
ARM GAS  /tmp/ccobNVTR.s 			page 280


2655:src/display.c **** 	  p = catcmd(op, b2);
 9791              		.loc 1 2655 9 view .LVU3156
 9792 06b0 0646     		mov	r6, r0
2656:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9793              		.loc 1 2656 8 view .LVU3157
 9794 06b2 5046     		mov	r0, r10
 9795              	.LVL1118:
2656:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9796              		.loc 1 2656 4 is_stmt 1 view .LVU3158
2656:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9797              		.loc 1 2656 8 is_stmt 0 view .LVU3159
 9798 06b4 FFF7FEFF 		bl	catcmd
 9799              	.LVL1119:
2657:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9800              		.loc 1 2657 7 view .LVU3160
 9801 06b8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9802 06ba 142B     		cmp	r3, #20
2656:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 9803              		.loc 1 2656 8 view .LVU3161
 9804 06bc 0146     		mov	r1, r0
 9805              	.LVL1120:
2657:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9806              		.loc 1 2657 4 is_stmt 1 view .LVU3162
2657:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9807              		.loc 1 2657 7 is_stmt 0 view .LVU3163
 9808 06be 05D0     		beq	.L858
2657:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 9809              		.loc 1 2657 29 discriminator 1 view .LVU3164
 9810 06c0 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9811 06c2 9807     		lsls	r0, r3, #30
 9812              	.LVL1121:
2658:src/display.c **** 	  bp = scopy(bp, p);
 9813              		.loc 1 2658 6 is_stmt 1 discriminator 1 view .LVU3165
2658:src/display.c **** 	  bp = scopy(bp, p);
 9814              		.loc 1 2658 12 is_stmt 0 discriminator 1 view .LVU3166
 9815 06c4 44BF     		itt	mi
 9816 06c6 1423     		movmi	r3, #20
 9817 06c8 06F8013B 		strbmi	r3, [r6], #1
 9818              	.LVL1122:
 9819              	.L858:
2659:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9820              		.loc 1 2659 4 is_stmt 1 view .LVU3167
2659:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9821              		.loc 1 2659 9 is_stmt 0 view .LVU3168
 9822 06cc 3046     		mov	r0, r6
 9823 06ce FFF7FEFF 		bl	scopy
 9824              	.LVL1123:
2660:src/display.c **** 	    // State2.disp_small = 1;
 9825              		.loc 1 2660 4 is_stmt 1 view .LVU3169
2660:src/display.c **** 	    // State2.disp_small = 1;
 9826              		.loc 1 2660 7 is_stmt 0 view .LVU3170
 9827 06d2 A9F11003 		sub	r3, r9, #16
 9828 06d6 012B     		cmp	r3, #1
 9829 06d8 5DD9     		bls	.L1107
2667:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9830              		.loc 1 2667 11 is_stmt 1 view .LVU3171
2667:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
ARM GAS  /tmp/ccobNVTR.s 			page 281


 9831              		.loc 1 2667 15 is_stmt 0 view .LVU3172
 9832 06da A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2667:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 9833              		.loc 1 2667 14 view .LVU3173
 9834 06dc 5906     		lsls	r1, r3, #25
 9835 06de 7FF577AE 		bpl	.L863
2668:src/display.c **** 	      decNumber x, r;
 9836              		.loc 1 2668 6 is_stmt 1 view .LVU3174
2668:src/display.c **** 	      decNumber x, r;
 9837              		.loc 1 2668 9 is_stmt 0 view .LVU3175
 9838 06e2 B9F1120F 		cmp	r9, #18
 9839 06e6 00F00682 		beq	.L1108
2688:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9840              		.loc 1 2688 13 is_stmt 1 view .LVU3176
2688:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9841              		.loc 1 2688 46 is_stmt 0 view .LVU3177
 9842 06ea AAF58873 		sub	r3, r10, #272
2688:src/display.c **** 	      REGISTER z, *const x = StackBase;
 9843              		.loc 1 2688 16 view .LVU3178
 9844 06ee 0D2B     		cmp	r3, #13
 9845 06f0 3FF66EAE 		bhi	.L863
 9846              	.LBB531:
2689:src/display.c **** 	      copyreg(&z, x);
 9847              		.loc 1 2689 8 is_stmt 1 discriminator 3 view .LVU3179
2689:src/display.c **** 	      copyreg(&z, x);
 9848              		.loc 1 2689 27 is_stmt 0 discriminator 3 view .LVU3180
 9849 06f4 B64B     		ldr	r3, .L1128+8
 9850 06f6 1E68     		ldr	r6, [r3]
 9851              	.LVL1124:
2690:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 9852              		.loc 1 2690 8 is_stmt 1 discriminator 3 view .LVU3181
 9853 06f8 15A8     		add	r0, sp, #84
 9854 06fa 3146     		mov	r1, r6
 9855 06fc FFF7FEFF 		bl	copyreg
 9856              	.LVL1125:
2691:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 9857              		.loc 1 2691 8 discriminator 3 view .LVU3182
 9858 0700 5FFA8AF0 		uxtb	r0, r10
 9859 0704 FFF7FEFF 		bl	sigma_val
 9860              	.LVL1126:
2692:src/display.c **** 	      copyreg(x, &z);
 9861              		.loc 1 2692 8 discriminator 3 view .LVU3183
 9862 0708 FFF7FEFF 		bl	is_dblmode
 9863              	.LVL1127:
 9864 070c 0021     		movs	r1, #0
 9865 070e 0246     		mov	r2, r0
 9866 0710 3046     		mov	r0, r6
 9867 0712 FFF7FEFF 		bl	set_x
 9868              	.LVL1128:
2693:src/display.c **** 	      skip = 1;
 9869              		.loc 1 2693 8 discriminator 3 view .LVU3184
 9870 0716 15A9     		add	r1, sp, #84
 9871 0718 3046     		mov	r0, r6
 9872 071a FFF7FEFF 		bl	copyreg
 9873              	.LVL1129:
2694:src/display.c **** 	    }
 9874              		.loc 1 2694 8 discriminator 3 view .LVU3185
ARM GAS  /tmp/ccobNVTR.s 			page 282


2694:src/display.c **** 	    }
 9875              		.loc 1 2694 8 is_stmt 0 discriminator 3 view .LVU3186
 9876              	.LBE531:
2697:src/display.c **** 	} else if (State2.multi) {
 9877              		.loc 1 2697 4 is_stmt 1 discriminator 3 view .LVU3187
 9878 071e 1EA8     		add	r0, sp, #120
 9879 0720 FFF7FEFF 		bl	set_status
 9880              	.LVL1130:
2697:src/display.c **** 	} else if (State2.multi) {
 9881              		.loc 1 2697 4 is_stmt 0 discriminator 3 view .LVU3188
 9882              	.LBE543:
2787:src/display.c ****       nostk:	show_flags();
 9883              		.loc 1 2787 2 is_stmt 1 discriminator 3 view .LVU3189
 9884 0724 FFF7FEFF 		bl	show_stack
 9885              	.LVL1131:
2788:src/display.c **** 	if (!skip) {
 9886              		.loc 1 2788 14 discriminator 3 view .LVU3190
 9887 0728 FFF7FEFF 		bl	show_flags
 9888              	.LVL1132:
2789:src/display.c **** 	  if (State2.runmode) {
 9889              		.loc 1 2789 2 discriminator 3 view .LVU3191
 9890              	.L862:
2834:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9891              		.loc 1 2834 2 view .LVU3192
 9892 072c FFF7FEFF 		bl	set_annunciators
 9893              	.LVL1133:
2835:src/display.c **** 	  ShowRPN = 0;
 9894              		.loc 1 2835 2 view .LVU3193
 9895 0730 A84E     		ldr	r6, .L1128+12
 9896 0732 DFF8BC82 		ldr	r8, .L1128+40
 9897 0736 DFF8BC92 		ldr	r9, .L1128+44
 9898 073a 27E5     		b	.L840
 9899              	.LVL1134:
 9900              	.L1093:
2699:src/display.c **** 	  if (State2.numdigit > 0) {
 9901              		.loc 1 2699 4 view .LVU3194
2699:src/display.c **** 	  if (State2.numdigit > 0) {
 9902              		.loc 1 2699 42 is_stmt 0 view .LVU3195
 9903 073c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9904 073e A649     		ldr	r1, .L1128+16
 9905 0740 0423     		movs	r3, #4
 9906 0742 03EB0213 		add	r3, r3, r2, lsl #4
2699:src/display.c **** 	  if (State2.numdigit > 0) {
 9907              		.loc 1 2699 9 view .LVU3196
 9908 0746 1944     		add	r1, r1, r3
 9909 0748 4046     		mov	r0, r8
 9910 074a 2722     		movs	r2, #39
 9911 074c FFF7FEFF 		bl	scopy_char
 9912              	.LVL1135:
2700:src/display.c **** 	    *bp++ = (char) State2.digval;
 9913              		.loc 1 2700 7 view .LVU3197
 9914 0750 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9915              	.LVL1136:
2700:src/display.c **** 	    *bp++ = (char) State2.digval;
 9916              		.loc 1 2700 4 is_stmt 1 view .LVU3198
2700:src/display.c **** 	    *bp++ = (char) State2.digval;
 9917              		.loc 1 2700 7 is_stmt 0 view .LVU3199
ARM GAS  /tmp/ccobNVTR.s 			page 283


 9918 0752 002B     		cmp	r3, #0
 9919 0754 3FF44AAD 		beq	.L1075
2701:src/display.c **** 	    if (State2.numdigit > 1)
 9920              		.loc 1 2701 6 is_stmt 1 view .LVU3200
 9921              	.LVL1137:
2701:src/display.c **** 	    if (State2.numdigit > 1)
 9922              		.loc 1 2701 14 is_stmt 0 view .LVU3201
 9923 0758 2389     		ldrh	r3, [r4, #8]
 9924 075a 0370     		strb	r3, [r0]
2702:src/display.c **** 	      *bp++ = State2.digval2;
 9925              		.loc 1 2702 6 is_stmt 1 view .LVU3202
2702:src/display.c **** 	      *bp++ = State2.digval2;
 9926              		.loc 1 2702 9 is_stmt 0 view .LVU3203
 9927 075c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9928 075e 012B     		cmp	r3, #1
2703:src/display.c **** 	  }
 9929              		.loc 1 2703 8 is_stmt 1 view .LVU3204
 9930              	.LVL1138:
2703:src/display.c **** 	  }
 9931              		.loc 1 2703 22 is_stmt 0 view .LVU3205
 9932 0760 84BF     		itt	hi
 9933 0762 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2703:src/display.c **** 	  }
 9934              		.loc 1 2703 14 view .LVU3206
 9935 0764 4370     		strbhi	r3, [r0, #1]
 9936 0766 41E5     		b	.L1075
 9937              	.LVL1139:
 9938              	.L974:
 9939              	.LBB544:
 9940              	.LBB526:
2824:src/display.c **** 	      while(*b) {
 9941              		.loc 1 2824 10 view .LVU3207
 9942 0768 5A1C     		adds	r2, r3, #1
 9943 076a C2E5     		b	.L955
 9944              	.LVL1140:
 9945              	.L1105:
2824:src/display.c **** 	      while(*b) {
 9946              		.loc 1 2824 10 view .LVU3208
 9947              	.LBE526:
 9948              	.LBE544:
 9949              	.LBB545:
 9950              	.LBB516:
1352:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 9951              		.loc 1 1352 6 is_stmt 1 view .LVU3209
1357:src/display.c **** #  endif
 9952              		.loc 1 1357 6 view .LVU3210
 9953 076c 0AF10100 		add	r0, r10, #1
 9954              	.LVL1141:
1357:src/display.c **** #  endif
 9955              		.loc 1 1357 6 is_stmt 0 view .LVU3211
 9956 0770 FFF7FEFF 		bl	s_to_i
 9957              	.LVL1142:
1357:src/display.c **** #  endif
 9958              		.loc 1 1357 6 view .LVU3212
 9959 0774 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9960 0778 2D2B     		cmp	r3, #45
 9961 077a 0CBF     		ite	eq
ARM GAS  /tmp/ccobNVTR.s 			page 284


 9962 077c 0621     		moveq	r1, #6
 9963 077e 0421     		movne	r1, #4
 9964 0780 0022     		movs	r2, #0
 9965 0782 FFF7FEFF 		bl	set_exp
 9966              	.LVL1143:
 9967 0786 15E7     		b	.L1082
 9968              	.LVL1144:
 9969              	.L1106:
1357:src/display.c **** #  endif
 9970              		.loc 1 1357 6 view .LVU3213
 9971              	.LBE516:
 9972              	.LBE545:
2625:src/display.c **** 	    *bp++ = '_';
 9973              		.loc 1 2625 6 is_stmt 1 view .LVU3214
2625:src/display.c **** 	    *bp++ = '_';
 9974              		.loc 1 2625 12 is_stmt 0 view .LVU3215
 9975 0788 1122     		movs	r2, #17
 9976 078a 89E6     		b	.L1074
 9977              	.LVL1145:
 9978              	.L1102:
 9979              	.LBB546:
 9980              	.LBB517:
1217:src/display.c **** #endif
 9981              		.loc 1 1217 11 view .LVU3216
 9982 078c 8146     		mov	r9, r0
1234:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9983              		.loc 1 1234 4 view .LVU3217
 9984 078e 8346     		mov	fp, r0
 9985              	.LBB510:
1270:src/display.c **** 	}
 9986              		.loc 1 1270 16 view .LVU3218
 9987 0790 4FF0FF33 		mov	r3, #-1
 9988              	.LVL1146:
1270:src/display.c **** 	}
 9989              		.loc 1 1270 16 view .LVU3219
 9990 0794 C6E6     		b	.L944
 9991              	.LVL1147:
 9992              	.L1107:
1270:src/display.c **** 	}
 9993              		.loc 1 1270 16 view .LVU3220
 9994              	.LBE510:
 9995              	.LBE517:
 9996              	.LBE546:
 9997              	.LBB547:
2662:src/display.c **** 	      set_digits_string("0 to 255", 0);
 9998              		.loc 1 2662 6 is_stmt 1 view .LVU3221
2662:src/display.c **** 	      set_digits_string("0 to 255", 0);
 9999              		.loc 1 2662 9 is_stmt 0 view .LVU3222
 10000 0796 BAF5274F 		cmp	r10, #42752
 10001 079a 00F09C81 		beq	.L860
2662:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10002              		.loc 1 2662 41 discriminator 1 view .LVU3223
 10003 079e BAF5284F 		cmp	r10, #43008
 10004 07a2 00F09881 		beq	.L860
2665:src/display.c **** 	    skip = 1;
 10005              		.loc 1 2665 8 is_stmt 1 view .LVU3224
2665:src/display.c **** 	    skip = 1;
ARM GAS  /tmp/ccobNVTR.s 			page 285


 10006              		.loc 1 2665 14 is_stmt 0 view .LVU3225
 10007 07a6 0AF07F00 		and	r0, r10, #127
 10008 07aa 0021     		movs	r1, #0
 10009 07ac FFF7FEFF 		bl	get_const
 10010              	.LVL1148:
2665:src/display.c **** 	    skip = 1;
 10011              		.loc 1 2665 8 view .LVU3226
 10012 07b0 0022     		movs	r2, #0
 10013              	.LVL1149:
 10014              	.L1078:
 10015              	.LBB532:
2686:src/display.c **** 	      skip = 1;
 10016              		.loc 1 2686 8 discriminator 1 view .LVU3227
 10017 07b2 1146     		mov	r1, r2
 10018 07b4 FFF7FEFF 		bl	set_x
 10019              	.LVL1150:
2687:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10020              		.loc 1 2687 8 is_stmt 1 discriminator 1 view .LVU3228
2687:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10021              		.loc 1 2687 8 is_stmt 0 discriminator 1 view .LVU3229
 10022              	.LBE532:
2697:src/display.c **** 	} else if (State2.multi) {
 10023              		.loc 1 2697 4 is_stmt 1 discriminator 1 view .LVU3230
 10024 07b8 1EA8     		add	r0, sp, #120
 10025 07ba FFF7FEFF 		bl	set_status
 10026              	.LVL1151:
 10027              	.L1079:
2697:src/display.c **** 	} else if (State2.multi) {
 10028              		.loc 1 2697 4 is_stmt 0 discriminator 1 view .LVU3231
 10029              	.LBE547:
2787:src/display.c ****       nostk:	show_flags();
 10030              		.loc 1 2787 2 is_stmt 1 discriminator 1 view .LVU3232
 10031 07be FFF7FEFF 		bl	show_stack
 10032              	.LVL1152:
2788:src/display.c **** 	if (!skip) {
 10033              		.loc 1 2788 14 discriminator 1 view .LVU3233
 10034 07c2 FFF7FEFF 		bl	show_flags
 10035              	.LVL1153:
2789:src/display.c **** 	  if (State2.runmode) {
 10036              		.loc 1 2789 2 discriminator 1 view .LVU3234
 10037 07c6 B1E7     		b	.L862
 10038              	.LVL1154:
 10039              	.L971:
 10040              	.LBB548:
 10041              	.LBB518:
 10042              	.LBB511:
1254:src/display.c **** 	    if (gotdot <= j) {
 10043              		.loc 1 1254 8 is_stmt 0 view .LVU3235
 10044 07c8 4FF0090B 		mov	fp, #9
 10045              	.LVL1155:
 10046              	.L936:
1267:src/display.c **** 	    overflow_to_left = 1;
 10047              		.loc 1 1267 6 is_stmt 1 view .LVU3236
 10048 07cc 3C21     		movs	r1, #60
 10049 07ce 0020     		movs	r0, #0
 10050 07d0 FFF7FEFF 		bl	set_dig
 10051              	.LVL1156:
ARM GAS  /tmp/ccobNVTR.s 			page 286


1268:src/display.c **** 	  }
 10052              		.loc 1 1268 6 view .LVU3237
1268:src/display.c **** 	  }
 10053              		.loc 1 1268 6 is_stmt 0 view .LVU3238
 10054 07d4 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
1268:src/display.c **** 	  }
 10055              		.loc 1 1268 6 view .LVU3239
 10056              	.LBE511:
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10057              		.loc 1 1274 9 is_stmt 1 view .LVU3240
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10058              		.loc 1 1274 2 is_stmt 0 view .LVU3241
 10059 07d8 0023     		movs	r3, #0
 10060 07da BCF1000F 		cmp	ip, #0
 10061 07de 7FF49FAE 		bne	.L965
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10062              		.loc 1 1274 2 view .LVU3242
 10063 07e2 E7E6     		b	.L1082
 10064              	.LVL1157:
 10065              	.L1095:
1274:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10066              		.loc 1 1274 2 view .LVU3243
 10067              	.LBE518:
 10068              	.LBE548:
2710:src/display.c **** 	  skip = 1;
 10069              		.loc 1 2710 4 is_stmt 1 view .LVU3244
 10070              	.LBB549:
 10071              	.LBI549:
2416:src/display.c **** 	char buf[16];
 10072              		.loc 1 2416 19 view .LVU3245
 10073              	.LBB550:
2417:src/display.c **** 	unsigned short int pc = State2.digval;
 10074              		.loc 1 2417 2 view .LVU3246
2418:src/display.c **** 	unsigned int op = getprog(pc);
 10075              		.loc 1 2418 2 view .LVU3247
2418:src/display.c **** 	unsigned int op = getprog(pc);
 10076              		.loc 1 2418 21 is_stmt 0 view .LVU3248
 10077 07e4 B4F80890 		ldrh	r9, [r4, #8]
 10078              	.LVL1158:
2419:src/display.c **** 	int n = nLIB(pc);
 10079              		.loc 1 2419 2 is_stmt 1 view .LVU3249
2424:src/display.c **** #ifndef REALBUILD
 10080              		.loc 1 2424 27 is_stmt 0 view .LVU3250
 10081 07e8 DFF80C82 		ldr	r8, .L1128+48
 10082              	.LVL1159:
2426:src/display.c **** #endif
 10083              		.loc 1 2426 41 view .LVU3251
 10084 07ec 7B4F     		ldr	r7, .L1128+20
2419:src/display.c **** 	int n = nLIB(pc);
 10085              		.loc 1 2419 20 view .LVU3252
 10086 07ee 4846     		mov	r0, r9
 10087 07f0 FFF7FEFF 		bl	getprog
 10088              	.LVL1160:
 10089 07f4 4FEA9936 		lsr	r6, r9, #14
2423:src/display.c **** 	set_digits_string(libname[n], 0);
 10090              		.loc 1 2423 2 view .LVU3253
 10091 07f8 15A9     		add	r1, sp, #84
ARM GAS  /tmp/ccobNVTR.s 			page 287


2419:src/display.c **** 	int n = nLIB(pc);
 10092              		.loc 1 2419 20 view .LVU3254
 10093 07fa 8246     		mov	r10, r0
 10094              	.LVL1161:
2420:src/display.c **** 	unsigned short int lblpc;
 10095              		.loc 1 2420 2 is_stmt 1 view .LVU3255
2421:src/display.c **** 
 10096              		.loc 1 2421 2 view .LVU3256
2423:src/display.c **** 	set_digits_string(libname[n], 0);
 10097              		.loc 1 2423 2 view .LVU3257
2424:src/display.c **** #ifndef REALBUILD
 10098              		.loc 1 2424 27 is_stmt 0 view .LVU3258
 10099 07fc 06EB8606 		add	r6, r6, r6, lsl #2
2423:src/display.c **** 	set_digits_string(libname[n], 0);
 10100              		.loc 1 2423 2 view .LVU3259
 10101 0800 FFF7FEFF 		bl	prt
 10102              	.LVL1162:
2423:src/display.c **** 	set_digits_string(libname[n], 0);
 10103              		.loc 1 2423 2 view .LVU3260
 10104 0804 FFF7FEFF 		bl	set_status
 10105              	.LVL1163:
2424:src/display.c **** #ifndef REALBUILD
 10106              		.loc 1 2424 2 is_stmt 1 view .LVU3261
 10107 0808 08EB0600 		add	r0, r8, r6
 10108 080c 0021     		movs	r1, #0
 10109 080e FFF7FEFF 		bl	set_digits_string
 10110              	.LVL1164:
2426:src/display.c **** #endif
 10111              		.loc 1 2426 2 view .LVU3262
 10112 0812 7348     		ldr	r0, .L1128+24
 10113 0814 07EB4601 		add	r1, r7, r6, lsl #1
 10114 0818 FFF7FEFF 		bl	scopy
 10115              	.LVL1165:
2429:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10116              		.loc 1 2429 2 view .LVU3263
2429:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10117              		.loc 1 2429 5 is_stmt 0 view .LVU3264
 10118 081c 1AF4704F 		tst	r10, #61440
 10119 0820 CDD0     		beq	.L1079
2430:src/display.c **** 	  if (lblpc != pc) {
 10120              		.loc 1 2430 4 is_stmt 1 view .LVU3265
2430:src/display.c **** 	  if (lblpc != pc) {
 10121              		.loc 1 2430 12 is_stmt 0 view .LVU3266
 10122 0822 5046     		mov	r0, r10
 10123 0824 0021     		movs	r1, #0
 10124 0826 FFF7FEFF 		bl	findmultilbl
 10125              	.LVL1166:
2430:src/display.c **** 	  if (lblpc != pc) {
 10126              		.loc 1 2430 10 view .LVU3267
 10127 082a 86B2     		uxth	r6, r0
 10128              	.LVL1167:
2431:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10129              		.loc 1 2431 4 is_stmt 1 view .LVU3268
2431:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10130              		.loc 1 2431 7 is_stmt 0 view .LVU3269
 10131 082c B145     		cmp	r9, r6
2430:src/display.c **** 	  if (lblpc != pc) {
ARM GAS  /tmp/ccobNVTR.s 			page 288


 10132              		.loc 1 2430 12 view .LVU3270
 10133 082e 8246     		mov	r10, r0
 10134              	.LVL1168:
2431:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10135              		.loc 1 2431 7 view .LVU3271
 10136 0830 C5D0     		beq	.L1079
2432:src/display.c **** 	    n = nLIB(lblpc);
 10137              		.loc 1 2432 6 is_stmt 1 view .LVU3272
 10138 0832 6C48     		ldr	r0, .L1128+28
 10139 0834 3F21     		movs	r1, #63
 10140 0836 FFF7FEFF 		bl	set_digits_string
 10141              	.LVL1169:
2433:src/display.c **** 	    if (n == REGION_RAM)
 10142              		.loc 1 2433 6 view .LVU3273
2434:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10143              		.loc 1 2434 6 view .LVU3274
2434:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10144              		.loc 1 2434 9 is_stmt 0 view .LVU3275
 10145 083a B60B     		lsrs	r6, r6, #14
 10146              	.LVL1170:
2434:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10147              		.loc 1 2434 9 view .LVU3276
 10148 083c 40F07D81 		bne	.L891
2435:src/display.c **** 	    else {
 10149              		.loc 1 2435 8 is_stmt 1 view .LVU3277
 10150 0840 3246     		mov	r2, r6
 10151 0842 1FFA8AF0 		uxth	r0, r10
 10152 0846 0121     		movs	r1, #1
 10153 0848 FFF7FEFF 		bl	set_exp
 10154              	.LVL1171:
 10155 084c B7E7     		b	.L1079
 10156              	.LVL1172:
 10157              	.L1094:
2435:src/display.c **** 	    else {
 10158              		.loc 1 2435 8 is_stmt 0 view .LVU3278
 10159              	.LBE550:
 10160              	.LBE549:
2707:src/display.c **** 	  skip = 1;
 10161              		.loc 1 2707 4 is_stmt 1 view .LVU3279
 10162              	.LBB552:
 10163              	.LBI552:
2314:src/display.c **** 	int i, n;
 10164              		.loc 1 2314 19 view .LVU3280
 10165              	.LBB553:
2315:src/display.c **** 	int j = SEGS_EXP_BASE;
 10166              		.loc 1 2315 2 view .LVU3281
2316:src/display.c **** 	const int status = State2.status - 3;
 10167              		.loc 1 2316 2 view .LVU3282
2317:src/display.c **** 	char buf[16], *p = buf;
 10168              		.loc 1 2317 2 view .LVU3283
2321:src/display.c **** 	  set_status("Free:");
 10169              		.loc 1 2321 5 is_stmt 0 view .LVU3284
 10170 084e 012B     		cmp	r3, #1
2317:src/display.c **** 	char buf[16], *p = buf;
 10171              		.loc 1 2317 12 view .LVU3285
 10172 0850 A3F10307 		sub	r7, r3, #3
 10173              	.LVL1173:
ARM GAS  /tmp/ccobNVTR.s 			page 289


2318:src/display.c **** 	unsigned int pc;
 10174              		.loc 1 2318 2 is_stmt 1 view .LVU3286
2319:src/display.c **** 
 10175              		.loc 1 2319 2 view .LVU3287
2321:src/display.c **** 	  set_status("Free:");
 10176              		.loc 1 2321 2 view .LVU3288
2321:src/display.c **** 	  set_status("Free:");
 10177              		.loc 1 2321 5 is_stmt 0 view .LVU3289
 10178 0854 00F01782 		beq	.L1109
2329:src/display.c **** 	  /* Top line */
 10179              		.loc 1 2329 7 is_stmt 1 view .LVU3290
2329:src/display.c **** 	  /* Top line */
 10180              		.loc 1 2329 10 is_stmt 0 view .LVU3291
 10181 0858 7B1C     		adds	r3, r7, #1
 10182 085a 00F07782 		beq	.L1110
 10183              	.LBB554:
2346:src/display.c **** 	  int end;
 10184              		.loc 1 2346 4 is_stmt 1 view .LVU3292
2347:src/display.c **** 	  int group = 10;
 10185              		.loc 1 2347 4 view .LVU3293
2348:src/display.c **** 	  int start = 0;
 10186              		.loc 1 2348 4 view .LVU3294
 10187              	.LVL1174:
2349:src/display.c **** 		
 10188              		.loc 1 2349 4 view .LVU3295
2351:src/display.c **** 	    base = 10 * status;
 10189              		.loc 1 2351 4 view .LVU3296
2351:src/display.c **** 	    base = 10 * status;
 10190              		.loc 1 2351 7 is_stmt 0 view .LVU3297
 10191 085e 092F     		cmp	r7, #9
 10192 0860 40F32C82 		ble	.L1111
2361:src/display.c **** 	    base = regX_idx;
 10193              		.loc 1 2361 9 is_stmt 1 view .LVU3298
2361:src/display.c **** 	    base = regX_idx;
 10194              		.loc 1 2361 12 is_stmt 0 view .LVU3299
 10195 0864 0A2F     		cmp	r7, #10
 10196 0866 00F0FE81 		beq	.L1112
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10197              		.loc 1 2369 6 is_stmt 1 view .LVU3300
 10198              	.LVL1175:
2370:src/display.c **** 	    set_status("FL.00-.15");
 10199              		.loc 1 2370 6 view .LVU3301
2371:src/display.c **** 	  }
 10200              		.loc 1 2371 6 view .LVU3302
 10201 086a 5F48     		ldr	r0, .L1128+32
 10202 086c 4FF00A0A 		mov	r10, #10
 10203 0870 FFF7FEFF 		bl	set_status
 10204              	.LVL1176:
2348:src/display.c **** 	  int start = 0;
 10205              		.loc 1 2348 8 is_stmt 0 view .LVU3303
 10206 0874 5646     		mov	r6, r10
2349:src/display.c **** 		
 10207              		.loc 1 2349 8 view .LVU3304
 10208 0876 4FF0000B 		mov	fp, #0
2371:src/display.c **** 	  }
 10209              		.loc 1 2371 6 view .LVU3305
 10210 087a 0222     		movs	r2, #2
ARM GAS  /tmp/ccobNVTR.s 			page 290


 10211 087c 4FF00908 		mov	r8, #9
 10212              	.LVL1177:
2371:src/display.c **** 	  }
 10213              		.loc 1 2371 6 view .LVU3306
 10214 0880 0720     		movs	r0, #7
2370:src/display.c **** 	    set_status("FL.00-.15");
 10215              		.loc 1 2370 10 view .LVU3307
 10216 0882 4FF07F09 		mov	r9, #127
 10217              	.LVL1178:
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10218              		.loc 1 2369 11 view .LVU3308
 10219 0886 7027     		movs	r7, #112
 10220              	.LVL1179:
 10221              	.L877:
2373:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10222              		.loc 1 2373 4 is_stmt 1 view .LVU3309
2374:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10223              		.loc 1 2374 4 view .LVU3310
 10224              	.LBB555:
 10225              	.LBI555:
 344:src/display.c ****   if (res) {
 10226              		.loc 1 344 14 view .LVU3311
 10227              	.LBB556:
 345:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10228              		.loc 1 345 3 view .LVU3312
 348:src/display.c ****     if (decimal != DECIMAL_DOT)
 10229              		.loc 1 348 5 view .LVU3313
 10230 0888 0192     		str	r2, [sp, #4]
 10231 088a FFF7FEFF 		bl	set_dot
 10232              	.LVL1180:
 349:src/display.c ****       set_dot(posn+8);
 10233              		.loc 1 349 5 view .LVU3314
 10234              	.LBB557:
 10235              	.LBI557:
 344:src/display.c ****   if (res) {
 10236              		.loc 1 344 14 view .LVU3315
 10237              	.LBB558:
 352:src/display.c **** #endif
 10238              		.loc 1 352 5 view .LVU3316
 352:src/display.c **** #endif
 10239              		.loc 1 352 38 is_stmt 0 view .LVU3317
 10240 088e 019A     		ldr	r2, [sp, #4]
 10241 0890 534B     		ldr	r3, .L1128+24
 10242 0892 2E21     		movs	r1, #46
 10243 0894 9954     		strb	r1, [r3, r2]
 355:src/display.c **** }
 10244              		.loc 1 355 3 is_stmt 1 view .LVU3318
 10245              	.LVL1181:
 355:src/display.c **** }
 10246              		.loc 1 355 3 is_stmt 0 view .LVU3319
 10247              	.LBE558:
 10248              	.LBE557:
 355:src/display.c **** }
 10249              		.loc 1 355 3 is_stmt 1 view .LVU3320
 355:src/display.c **** }
 10250              		.loc 1 355 3 is_stmt 0 view .LVU3321
 10251              	.LBE556:
ARM GAS  /tmp/ccobNVTR.s 			page 291


 10252              	.LBE555:
2375:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10253              		.loc 1 2375 4 is_stmt 1 view .LVU3322
2376:src/display.c **** 	    int k = i + base - start;
 10254              		.loc 1 2376 4 view .LVU3323
2376:src/display.c **** 	    int k = i + base - start;
 10255              		.loc 1 2376 20 view .LVU3324
 10256 0896 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10257 089a D319     		adds	r3, r2, r7
 10258 089c 0293     		str	r3, [sp, #8]
 10259 089e A7EB0B03 		sub	r3, r7, fp
 10260 08a2 CDE90335 		strd	r3, r5, [sp, #12]
 10261              	.LBB559:
 10262              	.LBB560:
 10263              	.LBB561:
 10264              	.LBB562:
 10265              	.LBB563:
 352:src/display.c **** #endif
 10266              		.loc 1 352 38 is_stmt 0 view .LVU3325
 10267 08a6 0191     		str	r1, [sp, #4]
 10268 08a8 3E44     		add	r6, r6, r7
 10269              	.LVL1182:
 10270              	.L882:
 352:src/display.c **** #endif
 10271              		.loc 1 352 38 view .LVU3326
 10272              	.LBE563:
 10273              	.LBE562:
 10274              	.LBE561:
 10275              	.LBE560:
2377:src/display.c **** 	    int l = get_user_flag(k);
 10276              		.loc 1 2377 6 is_stmt 1 view .LVU3327
2378:src/display.c **** 	    k += group;
 10277              		.loc 1 2378 6 view .LVU3328
2378:src/display.c **** 	    k += group;
 10278              		.loc 1 2378 14 is_stmt 0 view .LVU3329
 10279 08aa 039B     		ldr	r3, [sp, #12]
 10280 08ac 03EB0B00 		add	r0, r3, fp
 10281 08b0 FFF7FEFF 		bl	get_user_flag
 10282              	.LVL1183:
2380:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10283              		.loc 1 2380 9 view .LVU3330
 10284 08b4 4E45     		cmp	r6, r9
2378:src/display.c **** 	    k += group;
 10285              		.loc 1 2378 14 view .LVU3331
 10286 08b6 0546     		mov	r5, r0
 10287              	.LVL1184:
2379:src/display.c **** 	    if (end >= k) {
 10288              		.loc 1 2379 6 is_stmt 1 view .LVU3332
2380:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10289              		.loc 1 2380 6 view .LVU3333
2388:src/display.c **** 	    if (i == 4) {
 10290              		.loc 1 2388 8 is_stmt 0 view .LVU3334
 10291 08b8 08F10907 		add	r7, r8, #9
2380:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10292              		.loc 1 2380 9 view .LVU3335
 10293 08bc 3FDD     		ble	.L1113
 10294              	.LVL1185:
ARM GAS  /tmp/ccobNVTR.s 			page 292


 10295              	.L879:
2386:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10296              		.loc 1 2386 6 is_stmt 1 view .LVU3336
 10297 08be 2946     		mov	r1, r5
 10298 08c0 4046     		mov	r0, r8
 10299 08c2 FFF7FEFF 		bl	set_dig
 10300              	.LVL1186:
2387:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10301              		.loc 1 2387 6 view .LVU3337
 10302              	.LBB573:
 10303              	.LBI560:
 344:src/display.c ****   if (res) {
 10304              		.loc 1 344 14 view .LVU3338
 10305              	.LBB570:
 345:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10306              		.loc 1 345 3 view .LVU3339
 348:src/display.c ****     if (decimal != DECIMAL_DOT)
 10307              		.loc 1 348 5 view .LVU3340
 10308 08c6 08F10700 		add	r0, r8, #7
 10309 08ca FFF7FEFF 		bl	set_dot
 10310              	.LVL1187:
 349:src/display.c ****       set_dot(posn+8);
 10311              		.loc 1 349 5 view .LVU3341
 10312              	.LBB567:
 10313              	.LBI562:
 344:src/display.c ****   if (res) {
 10314              		.loc 1 344 14 view .LVU3342
 10315              	.LBB564:
 352:src/display.c **** #endif
 10316              		.loc 1 352 5 view .LVU3343
 352:src/display.c **** #endif
 10317              		.loc 1 352 5 is_stmt 0 view .LVU3344
 10318              	.LBE564:
 10319              	.LBE567:
 10320              	.LBE570:
 10321              	.LBE573:
 10322              	.LBE559:
2376:src/display.c **** 	    int k = i + base - start;
 10323              		.loc 1 2376 39 is_stmt 1 view .LVU3345
 10324              	.LBB584:
 10325              	.LBB574:
 10326              	.LBB571:
 10327              	.LBB568:
 10328              	.LBB565:
 352:src/display.c **** #endif
 10329              		.loc 1 352 30 is_stmt 0 view .LVU3346
 10330 08ce 474B     		ldr	r3, .L1128+36
 352:src/display.c **** #endif
 10331              		.loc 1 352 38 view .LVU3347
 10332 08d0 0199     		ldr	r1, [sp, #4]
 352:src/display.c **** #endif
 10333              		.loc 1 352 30 view .LVU3348
 10334 08d2 A3FB0832 		umull	r3, r2, r3, r8
 10335 08d6 5208     		lsrs	r2, r2, #1
 352:src/display.c **** #endif
 10336              		.loc 1 352 38 view .LVU3349
 10337 08d8 414B     		ldr	r3, .L1128+24
ARM GAS  /tmp/ccobNVTR.s 			page 293


 352:src/display.c **** #endif
 10338              		.loc 1 352 35 view .LVU3350
 10339 08da 0132     		adds	r2, r2, #1
 10340              	.LBE565:
 10341              	.LBE568:
 10342              	.LBE571:
 10343              	.LBE574:
2389:src/display.c **** 	      set_dig(j, 8);
 10344              		.loc 1 2389 9 view .LVU3351
 10345 08dc BBF1040F 		cmp	fp, #4
 10346              	.LBB575:
 10347              	.LBB572:
 10348              	.LBB569:
 10349              	.LBB566:
 352:src/display.c **** #endif
 10350              		.loc 1 352 38 view .LVU3352
 10351 08e0 03F81210 		strb	r1, [r3, r2, lsl #1]
 355:src/display.c **** }
 10352              		.loc 1 355 3 is_stmt 1 view .LVU3353
 10353              	.LVL1188:
 355:src/display.c **** }
 10354              		.loc 1 355 3 is_stmt 0 view .LVU3354
 10355              	.LBE566:
 10356              	.LBE569:
 355:src/display.c **** }
 10357              		.loc 1 355 3 is_stmt 1 view .LVU3355
 355:src/display.c **** }
 10358              		.loc 1 355 3 is_stmt 0 view .LVU3356
 10359              	.LBE572:
 10360              	.LBE575:
2388:src/display.c **** 	    if (i == 4) {
 10361              		.loc 1 2388 6 is_stmt 1 view .LVU3357
2389:src/display.c **** 	      set_dig(j, 8);
 10362              		.loc 1 2389 6 view .LVU3358
 10363              	.LBE584:
2376:src/display.c **** 	    int k = i + base - start;
 10364              		.loc 1 2376 40 is_stmt 0 view .LVU3359
 10365 08e4 0BF1010B 		add	fp, fp, #1
 10366              	.LVL1189:
2376:src/display.c **** 	    int k = i + base - start;
 10367              		.loc 1 2376 20 is_stmt 1 view .LVU3360
 10368              	.LBB585:
2389:src/display.c **** 	      set_dig(j, 8);
 10369              		.loc 1 2389 9 is_stmt 0 view .LVU3361
 10370 08e8 42D0     		beq	.L1114
2389:src/display.c **** 	      set_dig(j, 8);
 10371              		.loc 1 2389 9 view .LVU3362
 10372              	.LBE585:
2376:src/display.c **** 	    int k = i + base - start;
 10373              		.loc 1 2376 4 view .LVU3363
 10374 08ea D345     		cmp	fp, r10
 10375 08ec 06F10106 		add	r6, r6, #1
 10376 08f0 01D0     		beq	.L1115
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10377              		.loc 1 2369 11 view .LVU3364
 10378 08f2 B846     		mov	r8, r7
 10379 08f4 D9E7     		b	.L882
ARM GAS  /tmp/ccobNVTR.s 			page 294


 10380              	.L1115:
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10381              		.loc 1 2369 11 view .LVU3365
 10382 08f6 049D     		ldr	r5, [sp, #16]
 10383              	.LVL1190:
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10384              		.loc 1 2369 11 view .LVU3366
 10385 08f8 334F     		ldr	r7, .L1128
 10386              	.LVL1191:
 10387              	.L872:
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10388              		.loc 1 2369 11 view .LVU3367
 10389              	.LBE554:
2397:src/display.c **** 	pc = state_pc();
 10390              		.loc 1 2397 2 is_stmt 1 view .LVU3368
2398:src/display.c **** 	if (isXROM(pc))
 10391              		.loc 1 2398 2 view .LVU3369
2398:src/display.c **** 	if (isXROM(pc))
 10392              		.loc 1 2398 7 is_stmt 0 view .LVU3370
 10393 08fa 3B68     		ldr	r3, [r7]
2398:src/display.c **** 	if (isXROM(pc))
 10394              		.loc 1 2398 5 view .LVU3371
 10395 08fc B3F8E077 		ldrh	r7, [r3, #2016]
 10396              	.LVL1192:
2399:src/display.c **** 	  pc = 1;
 10397              		.loc 1 2399 2 is_stmt 1 view .LVU3372
2399:src/display.c **** 	  pc = 1;
 10398              		.loc 1 2399 6 is_stmt 0 view .LVU3373
 10399 0900 BB0B     		lsrs	r3, r7, #14
2400:src/display.c **** 	for (n=i=0; i<4; i++) {
 10400              		.loc 1 2400 7 view .LVU3374
 10401 0902 032B     		cmp	r3, #3
 10402 0904 08BF     		it	eq
 10403 0906 0127     		moveq	r7, #1
 10404              	.LVL1193:
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10405              		.loc 1 2401 2 is_stmt 1 view .LVU3375
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10406              		.loc 1 2401 14 view .LVU3376
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10407              		.loc 1 2401 8 is_stmt 0 view .LVU3377
 10408 0908 4FF00009 		mov	r9, #0
 10409 090c 6426     		movs	r6, #100
2397:src/display.c **** 	pc = state_pc();
 10410              		.loc 1 2397 4 view .LVU3378
 10411 090e 4FF06C08 		mov	r8, #108
 10412              	.LVL1194:
 10413              	.L886:
2402:src/display.c **** 	    if (++n == 4) {
 10414              		.loc 1 2402 4 is_stmt 1 view .LVU3379
2402:src/display.c **** 	    if (++n == 4) {
 10415              		.loc 1 2402 8 is_stmt 0 view .LVU3380
 10416 0912 0222     		movs	r2, #2
 10417 0914 3146     		mov	r1, r6
 10418 0916 3846     		mov	r0, r7
 10419 0918 FFF7FEFF 		bl	find_label_from
 10420              	.LVL1195:
ARM GAS  /tmp/ccobNVTR.s 			page 295


2403:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10421              		.loc 1 2403 6 is_stmt 1 view .LVU3381
2402:src/display.c **** 	    if (++n == 4) {
 10422              		.loc 1 2402 7 is_stmt 0 view .LVU3382
 10423 091c 58B1     		cbz	r0, .L884
2403:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10424              		.loc 1 2403 9 view .LVU3383
 10425 091e 09F10109 		add	r9, r9, #1
 10426              	.LVL1196:
2407:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10427              		.loc 1 2407 8 is_stmt 1 view .LVU3384
2403:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10428              		.loc 1 2403 9 is_stmt 0 view .LVU3385
 10429 0922 B9F1040F 		cmp	r9, #4
2407:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10430              		.loc 1 2407 8 view .LVU3386
 10431 0926 A6F12301 		sub	r1, r6, #35
 10432 092a 4046     		mov	r0, r8
2403:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10433              		.loc 1 2403 9 view .LVU3387
 10434 092c 17D0     		beq	.L1116
2407:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10435              		.loc 1 2407 8 view .LVU3388
 10436 092e FFF7FEFF 		bl	set_dig
 10437              	.LVL1197:
2408:src/display.c **** 	    }
 10438              		.loc 1 2408 8 is_stmt 1 view .LVU3389
2408:src/display.c **** 	    }
 10439              		.loc 1 2408 10 is_stmt 0 view .LVU3390
 10440 0932 08F10708 		add	r8, r8, #7
 10441              	.LVL1198:
 10442              	.L884:
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10443              		.loc 1 2401 19 is_stmt 1 view .LVU3391
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10444              		.loc 1 2401 14 view .LVU3392
 10445 0936 0136     		adds	r6, r6, #1
 10446              	.LVL1199:
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10447              		.loc 1 2401 2 is_stmt 0 view .LVU3393
 10448 0938 682E     		cmp	r6, #104
 10449 093a EAD1     		bne	.L886
2401:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10450              		.loc 1 2401 2 view .LVU3394
 10451 093c 3FE7     		b	.L1079
 10452              	.LVL1200:
 10453              	.L1113:
 10454              	.LBB588:
 10455              	.LBB586:
2381:src/display.c **** 	      k += group;
 10456              		.loc 1 2381 8 is_stmt 1 view .LVU3395
2381:src/display.c **** 	      k += group;
 10457              		.loc 1 2381 14 is_stmt 0 view .LVU3396
 10458 093e 3046     		mov	r0, r6
 10459              	.LVL1201:
2381:src/display.c **** 	      k += group;
 10460              		.loc 1 2381 14 view .LVU3397
ARM GAS  /tmp/ccobNVTR.s 			page 296


 10461 0940 FFF7FEFF 		bl	get_user_flag
 10462              	.LVL1202:
 10463 0944 029B     		ldr	r3, [sp, #8]
 10464 0946 03EB0B02 		add	r2, r3, fp
2383:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10465              		.loc 1 2383 11 view .LVU3398
 10466 094a 4A45     		cmp	r2, r9
2381:src/display.c **** 	      k += group;
 10467              		.loc 1 2381 10 view .LVU3399
 10468 094c 45EA4005 		orr	r5, r5, r0, lsl #1
 10469              	.LVL1203:
2382:src/display.c **** 	      if (end >= k)
 10470              		.loc 1 2382 8 is_stmt 1 view .LVU3400
2383:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10471              		.loc 1 2383 8 view .LVU3401
2383:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10472              		.loc 1 2383 11 is_stmt 0 view .LVU3402
 10473 0950 B5DC     		bgt	.L879
2384:src/display.c **** 	    }
 10474              		.loc 1 2384 3 is_stmt 1 view .LVU3403
2384:src/display.c **** 	    }
 10475              		.loc 1 2384 9 is_stmt 0 view .LVU3404
 10476 0952 1046     		mov	r0, r2
 10477 0954 FFF7FEFF 		bl	get_user_flag
 10478              	.LVL1204:
2384:src/display.c **** 	    }
 10479              		.loc 1 2384 5 view .LVU3405
 10480 0958 45EA8005 		orr	r5, r5, r0, lsl #2
 10481              	.LVL1205:
2384:src/display.c **** 	    }
 10482              		.loc 1 2384 5 view .LVU3406
 10483 095c AFE7     		b	.L879
 10484              	.LVL1206:
 10485              	.L1116:
2384:src/display.c **** 	    }
 10486              		.loc 1 2384 5 view .LVU3407
 10487              	.LBE586:
 10488              	.LBE588:
2404:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10489              		.loc 1 2404 8 is_stmt 1 view .LVU3408
 10490 095e 4C21     		movs	r1, #76
 10491 0960 7320     		movs	r0, #115
 10492              	.LVL1207:
2404:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10493              		.loc 1 2404 8 is_stmt 0 view .LVU3409
 10494 0962 FFF7FEFF 		bl	set_dig
 10495              	.LVL1208:
2405:src/display.c **** 	    } else {
 10496              		.loc 1 2405 8 is_stmt 1 view .LVU3410
 10497 0966 4C21     		movs	r1, #76
 10498 0968 7A20     		movs	r0, #122
 10499 096a FFF7FEFF 		bl	set_dig
 10500              	.LVL1209:
 10501 096e E2E7     		b	.L884
 10502              	.LVL1210:
 10503              	.L1114:
 10504              	.LBB589:
ARM GAS  /tmp/ccobNVTR.s 			page 297


 10505              	.LBB587:
2390:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10506              		.loc 1 2390 8 view .LVU3411
 10507 0970 0821     		movs	r1, #8
 10508 0972 3846     		mov	r0, r7
 10509 0974 FFF7FEFF 		bl	set_dig
 10510              	.LVL1211:
2391:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10511              		.loc 1 2391 8 view .LVU3412
 10512              	.LBB576:
 10513              	.LBI576:
 344:src/display.c ****   if (res) {
 10514              		.loc 1 344 14 view .LVU3413
 10515              	.LBB577:
 345:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10516              		.loc 1 345 3 view .LVU3414
 348:src/display.c ****     if (decimal != DECIMAL_DOT)
 10517              		.loc 1 348 5 view .LVU3415
 10518 0978 08F11000 		add	r0, r8, #16
 10519 097c FFF7FEFF 		bl	set_dot
 10520              	.LVL1212:
 349:src/display.c ****       set_dot(posn+8);
 10521              		.loc 1 349 5 view .LVU3416
 10522              	.LBB578:
 10523              	.LBI578:
 344:src/display.c ****   if (res) {
 10524              		.loc 1 344 14 view .LVU3417
 10525              	.LBB579:
 352:src/display.c **** #endif
 10526              		.loc 1 352 5 view .LVU3418
 352:src/display.c **** #endif
 10527              		.loc 1 352 30 is_stmt 0 view .LVU3419
 10528 0980 1A4B     		ldr	r3, .L1128+36
 352:src/display.c **** #endif
 10529              		.loc 1 352 38 view .LVU3420
 10530 0982 0199     		ldr	r1, [sp, #4]
 352:src/display.c **** #endif
 10531              		.loc 1 352 30 view .LVU3421
 10532 0984 A3FB0723 		umull	r2, r3, r3, r7
 10533 0988 5B08     		lsrs	r3, r3, #1
 352:src/display.c **** #endif
 10534              		.loc 1 352 38 view .LVU3422
 10535 098a 154A     		ldr	r2, .L1128+24
 352:src/display.c **** #endif
 10536              		.loc 1 352 35 view .LVU3423
 10537 098c 0133     		adds	r3, r3, #1
 10538              	.LBE579:
 10539              	.LBE578:
 10540              	.LBE577:
 10541              	.LBE576:
2392:src/display.c **** 	    }
 10542              		.loc 1 2392 10 view .LVU3424
 10543 098e 08F11207 		add	r7, r8, #18
 10544              	.LVL1213:
 10545              	.LBB583:
 10546              	.LBB582:
 10547              	.LBB581:
ARM GAS  /tmp/ccobNVTR.s 			page 298


 10548              	.LBB580:
 352:src/display.c **** #endif
 10549              		.loc 1 352 38 view .LVU3425
 10550 0992 02F81310 		strb	r1, [r2, r3, lsl #1]
 355:src/display.c **** }
 10551              		.loc 1 355 3 is_stmt 1 view .LVU3426
 10552              	.LVL1214:
 355:src/display.c **** }
 10553              		.loc 1 355 3 is_stmt 0 view .LVU3427
 10554              	.LBE580:
 10555              	.LBE581:
 355:src/display.c **** }
 10556              		.loc 1 355 3 is_stmt 1 view .LVU3428
 355:src/display.c **** }
 10557              		.loc 1 355 3 is_stmt 0 view .LVU3429
 10558              	.LBE582:
 10559              	.LBE583:
2392:src/display.c **** 	    }
 10560              		.loc 1 2392 8 is_stmt 1 view .LVU3430
2392:src/display.c **** 	    }
 10561              		.loc 1 2392 8 is_stmt 0 view .LVU3431
 10562              	.LBE587:
2376:src/display.c **** 	    int k = i + base - start;
 10563              		.loc 1 2376 39 is_stmt 1 view .LVU3432
2376:src/display.c **** 	    int k = i + base - start;
 10564              		.loc 1 2376 20 view .LVU3433
 10565 0996 0136     		adds	r6, r6, #1
2376:src/display.c **** 	    int k = i + base - start;
 10566              		.loc 1 2376 40 is_stmt 0 view .LVU3434
 10567 0998 4FF0050B 		mov	fp, #5
 10568              	.LVL1215:
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10569              		.loc 1 2369 11 view .LVU3435
 10570 099c B846     		mov	r8, r7
 10571 099e 84E7     		b	.L882
 10572              	.LVL1216:
 10573              	.L854:
2369:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10574              		.loc 1 2369 11 view .LVU3436
 10575              	.LBE589:
 10576              	.LBE553:
 10577              	.LBE552:
2638:src/display.c **** 	    }
 10578              		.loc 1 2638 3 is_stmt 1 view .LVU3437
2638:src/display.c **** 	    }
 10579              		.loc 1 2638 8 is_stmt 0 view .LVU3438
 10580 09a0 2189     		ldrh	r1, [r4, #8]
 10581 09a2 FFF7FEFF 		bl	num_arg_0
 10582              	.LVL1217:
2638:src/display.c **** 	    }
 10583              		.loc 1 2638 8 view .LVU3439
 10584 09a6 32E6     		b	.L853
 10585              	.LVL1218:
 10586              	.L904:
2725:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10587              		.loc 1 2725 11 is_stmt 1 view .LVU3440
2725:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
ARM GAS  /tmp/ccobNVTR.s 			page 299


 10588              		.loc 1 2725 15 is_stmt 0 view .LVU3441
 10589 09a8 DFF84480 		ldr	r8, .L1128+40
 10590              	.LVL1219:
2725:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10591              		.loc 1 2725 15 view .LVU3442
 10592 09ac B8F90030 		ldrsh	r3, [r8]
2725:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10593              		.loc 1 2725 14 view .LVU3443
 10594 09b0 002B     		cmp	r3, #0
 10595 09b2 40F01381 		bne	.L1117
2727:src/display.c **** #if 0
 10596              		.loc 1 2727 11 is_stmt 1 view .LVU3444
2727:src/display.c **** #if 0
 10597              		.loc 1 2727 14 is_stmt 0 view .LVU3445
 10598 09b6 0907     		lsls	r1, r1, #28
 10599 09b8 00F1D880 		bmi	.L1118
 10600              	.LVL1220:
2787:src/display.c ****       nostk:	show_flags();
 10601              		.loc 1 2787 2 is_stmt 1 view .LVU3446
 10602 09bc FFF7FEFF 		bl	show_stack
 10603              	.LVL1221:
2788:src/display.c **** 	if (!skip) {
 10604              		.loc 1 2788 14 view .LVU3447
2757:src/display.c **** 	  }
 10605              		.loc 1 2757 12 is_stmt 0 view .LVU3448
 10606 09c0 0125     		movs	r5, #1
2788:src/display.c **** 	if (!skip) {
 10607              		.loc 1 2788 14 view .LVU3449
 10608 09c2 FFF7FEFF 		bl	show_flags
 10609              	.LVL1222:
2789:src/display.c **** 	  if (State2.runmode) {
 10610              		.loc 1 2789 2 is_stmt 1 view .LVU3450
 10611 09c6 42E4     		b	.L842
 10612              	.L1129:
 10613              		.align	2
 10614              	.L1128:
 10615 09c8 00000000 		.word	main_ram
 10616 09cc 3C000000 		.word	.LC29
 10617 09d0 00000000 		.word	StackBase
 10618 09d4 00000000 		.word	DispMsg
 10619 09d8 00000000 		.word	multicmds
 10620 09dc 00000000 		.word	.LANCHOR22
 10621 09e0 00000000 		.word	LastDisplayedNumber
 10622 09e4 98000000 		.word	.LC39
 10623 09e8 8C000000 		.word	.LC38
 10624 09ec 398EE338 		.word	954437177
 10625 09f0 00000000 		.word	DispPlot
 10626 09f4 00000000 		.word	ShowRegister
 10627 09f8 00000000 		.word	.LANCHOR21
 10628              	.LVL1223:
 10629              	.L903:
2763:src/display.c **** 	  if (i > 0)
 10630              		.loc 1 2763 4 view .LVU3451
2763:src/display.c **** 	  if (i > 0)
 10631              		.loc 1 2763 8 is_stmt 0 view .LVU3452
 10632 09fc C44B     		ldr	r3, .L1130
 10633 09fe 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccobNVTR.s 			page 300


 10634 0a00 B3F8E007 		ldrh	r0, [r3, #2016]
 10635              	.LVL1224:
2764:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10636              		.loc 1 2764 4 is_stmt 1 view .LVU3453
2764:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10637              		.loc 1 2764 7 is_stmt 0 view .LVU3454
 10638 0a04 0028     		cmp	r0, #0
 10639 0a06 72D0     		beq	.L914
2765:src/display.c **** 	  else
 10640              		.loc 1 2765 6 is_stmt 1 view .LVU3455
 10641 0a08 FFF7FEFF 		bl	getprog
 10642              	.LVL1225:
2765:src/display.c **** 	  else
 10643              		.loc 1 2765 6 is_stmt 0 view .LVU3456
 10644 0a0c 1EA9     		add	r1, sp, #120
 10645 0a0e FFF7FEFF 		bl	prt
 10646              	.LVL1226:
 10647 0a12 FFF7FEFF 		bl	set_status
 10648              	.LVL1227:
 10649              	.L915:
2768:src/display.c **** #if 0
 10650              		.loc 1 2768 4 is_stmt 1 view .LVU3457
 10651 0a16 8920     		movs	r0, #137
 10652 0a18 FFF7FEFF 		bl	set_dot
 10653              	.LVL1228:
2783:src/display.c **** 	      annuc = 1;
 10654              		.loc 1 2783 6 view .LVU3458
2783:src/display.c **** 	      annuc = 1;
 10655              		.loc 1 2783 10 is_stmt 0 view .LVU3459
 10656 0a1c FFF7FEFF 		bl	cur_shift
 10657              	.LVL1229:
2783:src/display.c **** 	      annuc = 1;
 10658              		.loc 1 2783 49 view .LVU3460
 10659 0a20 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10660 0a22 03F00603 		and	r3, r3, #6
 10661 0a26 1843     		orrs	r0, r0, r3
 10662 0a28 10F0FF0F 		tst	r0, #255
 10663 0a2c 46D1     		bne	.L916
2788:src/display.c **** 	if (!skip) {
 10664              		.loc 1 2788 14 is_stmt 1 view .LVU3461
 10665 0a2e FFF7FEFF 		bl	show_flags
 10666              	.LVL1230:
2789:src/display.c **** 	  if (State2.runmode) {
 10667              		.loc 1 2789 2 view .LVU3462
 10668 0a32 B84E     		ldr	r6, .L1130+4
 10669 0a34 DFF81083 		ldr	r8, .L1130+56
 10670              	.LVL1231:
2789:src/display.c **** 	  if (State2.runmode) {
 10671              		.loc 1 2789 2 is_stmt 0 view .LVU3463
 10672 0a38 09E4     		b	.L842
 10673              	.LVL1232:
 10674              	.L1096:
2713:src/display.c **** 	  skip = 1;
 10675              		.loc 1 2713 4 is_stmt 1 view .LVU3464
 10676              	.LBB593:
 10677              	.LBI593:
2447:src/display.c **** 	char buf[16], *bp;
ARM GAS  /tmp/ccobNVTR.s 			page 301


 10678              		.loc 1 2447 19 view .LVU3465
 10679              	.LBB594:
2448:src/display.c **** 	int n = State2.digval;
 10680              		.loc 1 2448 2 view .LVU3466
2449:src/display.c **** 	
 10681              		.loc 1 2449 2 view .LVU3467
2449:src/display.c **** 	
 10682              		.loc 1 2449 6 is_stmt 0 view .LVU3468
 10683 0a3a B4F80880 		ldrh	r8, [r4, #8]
 10684              	.LVL1233:
2456:src/display.c **** 	  n;
 10685              		.loc 1 2456 2 is_stmt 1 view .LVU3469
2456:src/display.c **** 	  n;
 10686              		.loc 1 2456 54 is_stmt 0 view .LVU3470
 10687 0a3e CA07     		lsls	r2, r1, #31
 10688 0a40 4CBF     		ite	mi
 10689 0a42 08F17007 		addmi	r7, r8, #112
2449:src/display.c **** 	
 10690              		.loc 1 2449 6 view .LVU3471
 10691 0a46 4746     		movpl	r7, r8
 10692              	.LVL1234:
2460:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10693              		.loc 1 2460 2 is_stmt 1 view .LVU3472
2460:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10694              		.loc 1 2460 5 is_stmt 0 view .LVU3473
 10695 0a48 11F00401 		ands	r1, r1, #4
 10696 0a4c 1AD0     		beq	.L894
2461:src/display.c **** 	}
 10697              		.loc 1 2461 4 is_stmt 1 view .LVU3474
2461:src/display.c **** 	}
 10698              		.loc 1 2461 15 is_stmt 0 view .LVU3475
 10699 0a4e 15A9     		add	r1, sp, #84
 10700 0a50 3846     		mov	r0, r7
 10701 0a52 FFF7FEFF 		bl	alpha_rcl_s
 10702              	.LVL1235:
2461:src/display.c **** 	}
 10703              		.loc 1 2461 4 view .LVU3476
 10704 0a56 FFF7FEFF 		bl	set_status
 10705              	.LVL1236:
 10706              	.L895:
2483:src/display.c ****       }
 10707              		.loc 1 2483 2 is_stmt 1 view .LVU3477
 10708 0a5a 3846     		mov	r0, r7
 10709 0a5c 0021     		movs	r1, #0
 10710 0a5e FFF7FEFF 		bl	format_reg
 10711              	.LVL1237:
 10712              	.LBE594:
 10713              	.LBE593:
2714:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10714              		.loc 1 2714 4 view .LVU3478
2715:src/display.c **** 	    annunciators();
 10715              		.loc 1 2715 4 view .LVU3479
2715:src/display.c **** 	    annunciators();
 10716              		.loc 1 2715 7 is_stmt 0 view .LVU3480
 10717 0a62 BAF1000F 		cmp	r10, #0
 10718 0a66 0AD1     		bne	.L901
2715:src/display.c **** 	    annunciators();
ARM GAS  /tmp/ccobNVTR.s 			page 302


 10719              		.loc 1 2715 25 discriminator 1 view .LVU3481
 10720 0a68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10721 0a6a 012B     		cmp	r3, #1
 10722 0a6c 7FF4A7AE 		bne	.L1079
2715:src/display.c **** 	    annunciators();
 10723              		.loc 1 2715 56 discriminator 2 view .LVU3482
 10724 0a70 A74B     		ldr	r3, .L1130
 10725 0a72 1B68     		ldr	r3, [r3]
 10726 0a74 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10727 0a78 DE07     		lsls	r6, r3, #31
 10728 0a7a 7FF5A0AE 		bpl	.L1079
 10729              	.L901:
2716:src/display.c **** 	  }
 10730              		.loc 1 2716 6 is_stmt 1 view .LVU3483
 10731 0a7e FFF7FEFF 		bl	annunciators
 10732              	.LVL1238:
2787:src/display.c ****       nostk:	show_flags();
 10733              		.loc 1 2787 2 view .LVU3484
 10734 0a82 9CE6     		b	.L1079
 10735              	.LVL1239:
 10736              	.L894:
 10737              	.LBB597:
 10738              	.LBB595:
2464:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10739              		.loc 1 2464 4 view .LVU3485
 10740 0a84 15AE     		add	r6, sp, #84
 10741 0a86 1022     		movs	r2, #16
 10742 0a88 3046     		mov	r0, r6
 10743 0a8a FFF7FEFF 		bl	xset
 10744              	.LVL1240:
2468:src/display.c **** #endif
 10745              		.loc 1 2468 4 view .LVU3486
2468:src/display.c **** #endif
 10746              		.loc 1 2468 9 is_stmt 0 view .LVU3487
 10747 0a8e A249     		ldr	r1, .L1130+8
 10748 0a90 3046     		mov	r0, r6
 10749 0a92 FFF7FEFF 		bl	scopy_spc
 10750              	.LVL1241:
2470:src/display.c **** 	    *bp++ = '.';
 10751              		.loc 1 2470 8 view .LVU3488
 10752 0a96 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10753              	.LVL1242:
2470:src/display.c **** 	    *bp++ = '.';
 10754              		.loc 1 2470 4 is_stmt 1 view .LVU3489
2470:src/display.c **** 	    *bp++ = '.';
 10755              		.loc 1 2470 7 is_stmt 0 view .LVU3490
 10756 0a98 DB07     		lsls	r3, r3, #31
 10757 0a9a 40F1DA80 		bpl	.L896
2471:src/display.c **** 	    if (n >= 100) {
 10758              		.loc 1 2471 6 is_stmt 1 view .LVU3491
 10759              	.LVL1243:
2471:src/display.c **** 	    if (n >= 100) {
 10760              		.loc 1 2471 12 is_stmt 0 view .LVU3492
 10761 0a9e 2E23     		movs	r3, #46
2472:src/display.c **** 	      *bp++ = '1';
 10762              		.loc 1 2472 9 view .LVU3493
 10763 0aa0 B8F1630F 		cmp	r8, #99
ARM GAS  /tmp/ccobNVTR.s 			page 303


2471:src/display.c **** 	    if (n >= 100) {
 10764              		.loc 1 2471 12 view .LVU3494
 10765 0aa4 0370     		strb	r3, [r0]
2472:src/display.c **** 	      *bp++ = '1';
 10766              		.loc 1 2472 6 is_stmt 1 view .LVU3495
2472:src/display.c **** 	      *bp++ = '1';
 10767              		.loc 1 2472 9 is_stmt 0 view .LVU3496
 10768 0aa6 00F3CF80 		bgt	.L897
2471:src/display.c **** 	    if (n >= 100) {
 10769              		.loc 1 2471 9 view .LVU3497
 10770 0aaa 0130     		adds	r0, r0, #1
 10771              	.LVL1244:
 10772              	.L898:
2478:src/display.c **** 	  else
 10773              		.loc 1 2478 6 is_stmt 1 view .LVU3498
2478:src/display.c **** 	  else
 10774              		.loc 1 2478 11 is_stmt 0 view .LVU3499
 10775 0aac 4146     		mov	r1, r8
 10776 0aae 0222     		movs	r2, #2
 10777 0ab0 FFF7FEFF 		bl	num_arg_0
 10778              	.LVL1245:
 10779              	.L900:
2481:src/display.c **** 	}
 10780              		.loc 1 2481 4 is_stmt 1 view .LVU3500
 10781 0ab4 3046     		mov	r0, r6
 10782 0ab6 FFF7FEFF 		bl	set_status
 10783              	.LVL1246:
 10784 0aba CEE7     		b	.L895
 10785              	.LVL1247:
 10786              	.L916:
2481:src/display.c **** 	}
 10787              		.loc 1 2481 4 is_stmt 0 view .LVU3501
 10788              	.LBE595:
 10789              	.LBE597:
2784:src/display.c **** 	  goto nostk;
 10790              		.loc 1 2784 8 is_stmt 1 view .LVU3502
2788:src/display.c **** 	if (!skip) {
 10791              		.loc 1 2788 14 view .LVU3503
 10792 0abc FFF7FEFF 		bl	show_flags
 10793              	.LVL1248:
2789:src/display.c **** 	  if (State2.runmode) {
 10794              		.loc 1 2789 2 view .LVU3504
 10795 0ac0 944E     		ldr	r6, .L1130+4
 10796 0ac2 DFF88482 		ldr	r8, .L1130+56
 10797              	.LVL1249:
2784:src/display.c **** 	  goto nostk;
 10798              		.loc 1 2784 14 is_stmt 0 view .LVU3505
 10799 0ac6 0125     		movs	r5, #1
 10800 0ac8 FFF7C1BB 		b	.L842
 10801              	.LVL1250:
 10802              	.L1103:
 10803              	.LBB598:
 10804              	.LBB519:
 10805              	.LBB512:
1261:src/display.c **** 	      p++;
 10806              		.loc 1 1261 8 is_stmt 1 view .LVU3506
1262:src/display.c **** 	      if (!double_dot)
ARM GAS  /tmp/ccobNVTR.s 			page 304


 10807              		.loc 1 1262 8 view .LVU3507
1262:src/display.c **** 	      if (!double_dot)
 10808              		.loc 1 1262 9 is_stmt 0 view .LVU3508
 10809 0acc 0AF1010A 		add	r10, r10, #1
 10810              	.LVL1251:
1263:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10811              		.loc 1 1263 8 is_stmt 1 view .LVU3509
1264:src/display.c **** 	    }
 10812              		.loc 1 1264 3 view .LVU3510
1264:src/display.c **** 	    }
 10813              		.loc 1 1264 5 is_stmt 0 view .LVU3511
 10814 0ad0 4FF0120B 		mov	fp, #18
 10815 0ad4 7AE6     		b	.L936
 10816              	.LVL1252:
 10817              	.L860:
1264:src/display.c **** 	    }
 10818              		.loc 1 1264 5 view .LVU3512
 10819              	.LBE512:
 10820              	.LBE519:
 10821              	.LBE598:
 10822              	.LBB599:
2663:src/display.c **** 	    else
 10823              		.loc 1 2663 8 is_stmt 1 view .LVU3513
 10824 0ad6 0021     		movs	r1, #0
 10825 0ad8 9048     		ldr	r0, .L1130+12
 10826 0ada FFF7FEFF 		bl	set_digits_string
 10827              	.LVL1253:
2697:src/display.c **** 	} else if (State2.multi) {
 10828              		.loc 1 2697 4 view .LVU3514
 10829 0ade 1EA8     		add	r0, sp, #120
 10830 0ae0 FFF7FEFF 		bl	set_status
 10831              	.LVL1254:
2697:src/display.c **** 	} else if (State2.multi) {
 10832              		.loc 1 2697 4 is_stmt 0 view .LVU3515
 10833              	.LBE599:
2787:src/display.c ****       nostk:	show_flags();
 10834              		.loc 1 2787 2 is_stmt 1 view .LVU3516
 10835 0ae4 FFF7FEFF 		bl	show_stack
 10836              	.LVL1255:
2788:src/display.c **** 	if (!skip) {
 10837              		.loc 1 2788 14 view .LVU3517
 10838 0ae8 FFF7FEFF 		bl	show_flags
 10839              	.LVL1256:
2789:src/display.c **** 	  if (State2.runmode) {
 10840              		.loc 1 2789 2 view .LVU3518
 10841 0aec 1EE6     		b	.L862
 10842              	.LVL1257:
 10843              	.L914:
2767:src/display.c **** 	  set_dot(STO_annun);
 10844              		.loc 1 2767 6 view .LVU3519
 10845 0aee 8C48     		ldr	r0, .L1130+16
 10846              	.LVL1258:
2767:src/display.c **** 	  set_dot(STO_annun);
 10847              		.loc 1 2767 6 is_stmt 0 view .LVU3520
 10848 0af0 FFF7FEFF 		bl	set_status
 10849              	.LVL1259:
2767:src/display.c **** 	  set_dot(STO_annun);
ARM GAS  /tmp/ccobNVTR.s 			page 305


 10850              		.loc 1 2767 6 view .LVU3521
 10851 0af4 8FE7     		b	.L915
 10852              	.LVL1260:
 10853              	.L1108:
 10854              	.LBB600:
 10855              	.LBB537:
2669:src/display.c **** 	      decimal64 z;
 10856              		.loc 1 2669 8 is_stmt 1 view .LVU3522
2670:src/display.c **** 
 10857              		.loc 1 2670 8 view .LVU3523
2672:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 10858              		.loc 1 2672 8 view .LVU3524
 10859 0af6 0CA8     		add	r0, sp, #48
 10860 0af8 FFF7FEFF 		bl	getX
 10861              	.LVL1261:
2673:src/display.c **** 		const unsigned int f = argKIND(op);
 10862              		.loc 1 2673 8 view .LVU3525
2673:src/display.c **** 		const unsigned int f = argKIND(op);
 10863              		.loc 1 2673 11 is_stmt 0 view .LVU3526
 10864 0afc CAF30723 		ubfx	r3, r10, #8, #8
 10865 0b00 022B     		cmp	r3, #2
 10866 0b02 2BD1     		bne	.L865
 10867              	.LBB533:
2674:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10868              		.loc 1 2674 3 is_stmt 1 view .LVU3527
2674:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10869              		.loc 1 2674 22 is_stmt 0 view .LVU3528
 10870 0b04 5FFA8AFA 		uxtb	r10, r10
 10871              	.LVL1262:
2675:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10872              		.loc 1 2675 3 is_stmt 1 view .LVU3529
2675:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10873              		.loc 1 2675 6 is_stmt 0 view .LVU3530
 10874 0b08 BAF1980F 		cmp	r10, #152
 10875              	.LBB534:
2678:src/display.c **** 		}
 10876              		.loc 1 2678 5 view .LVU3531
 10877 0b0c 15AE     		add	r6, sp, #84
 10878              	.LBE534:
2675:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10879              		.loc 1 2675 6 view .LVU3532
 10880 0b0e 21D8     		bhi	.L866
2675:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10881              		.loc 1 2675 28 discriminator 1 view .LVU3533
 10882 0b10 1823     		movs	r3, #24
 10883 0b12 844A     		ldr	r2, .L1130+20
 10884 0b14 03FB0AF3 		mul	r3, r3, r10
 10885 0b18 D358     		ldr	r3, [r2, r3]
2675:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10886              		.loc 1 2675 23 discriminator 1 view .LVU3534
 10887 0b1a DBB1     		cbz	r3, .L866
 10888              	.LBB535:
2676:src/display.c **** 		  update_speed(0);
 10889              		.loc 1 2676 5 is_stmt 1 view .LVU3535
 10890              	.LVL1263:
2677:src/display.c **** 		  fp(&r, &x);
 10891              		.loc 1 2677 20 view .LVU3536
ARM GAS  /tmp/ccobNVTR.s 			page 306


2678:src/display.c **** 		}
 10892              		.loc 1 2678 5 view .LVU3537
 10893 0b1c 0CA9     		add	r1, sp, #48
 10894 0b1e 3046     		mov	r0, r6
 10895 0b20 9847     		blx	r3
 10896              	.LVL1264:
 10897              	.L867:
2678:src/display.c **** 		}
 10898              		.loc 1 2678 5 is_stmt 0 view .LVU3538
 10899              	.LBE535:
 10900              	.LBE533:
2684:src/display.c **** 	      packed_from_number(&z, &r);
 10901              		.loc 1 2684 8 is_stmt 1 discriminator 1 view .LVU3539
 10902 0b22 814A     		ldr	r2, .L1130+24
 10903 0b24 3146     		mov	r1, r6
 10904 0b26 3046     		mov	r0, r6
 10905 0b28 FFF7FEFF 		bl	decNumberNormalize
 10906              	.LVL1265:
2685:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 10907              		.loc 1 2685 8 discriminator 1 view .LVU3540
 10908 0b2c 06A8     		add	r0, sp, #24
 10909 0b2e 3146     		mov	r1, r6
 10910 0b30 FFF7FEFF 		bl	packed_from_number
 10911              	.LVL1266:
2686:src/display.c **** 	      skip = 1;
 10912              		.loc 1 2686 8 discriminator 1 view .LVU3541
 10913 0b34 0022     		movs	r2, #0
 10914 0b36 06A8     		add	r0, sp, #24
 10915 0b38 3BE6     		b	.L1078
 10916              	.LVL1267:
 10917              	.L891:
2686:src/display.c **** 	      skip = 1;
 10918              		.loc 1 2686 8 is_stmt 0 discriminator 1 view .LVU3542
 10919              	.LBE537:
 10920              	.LBE600:
 10921              	.LBB601:
 10922              	.LBB551:
2437:src/display.c **** #ifndef REALBUILD
 10923              		.loc 1 2437 8 is_stmt 1 view .LVU3543
2437:src/display.c **** #ifndef REALBUILD
 10924              		.loc 1 2437 37 is_stmt 0 view .LVU3544
 10925 0b3a 06EB8600 		add	r0, r6, r6, lsl #2
2437:src/display.c **** #ifndef REALBUILD
 10926              		.loc 1 2437 8 view .LVU3545
 10927 0b3e 4044     		add	r0, r0, r8
 10928 0b40 0021     		movs	r1, #0
 10929 0b42 FFF7FEFF 		bl	set_exp_digits_string
 10930              	.LVL1268:
2439:src/display.c **** #endif
 10931              		.loc 1 2439 8 is_stmt 1 view .LVU3546
2439:src/display.c **** #endif
 10932              		.loc 1 2439 47 is_stmt 0 view .LVU3547
 10933 0b46 0A21     		movs	r1, #10
2439:src/display.c **** #endif
 10934              		.loc 1 2439 8 view .LVU3548
 10935 0b48 01FB0671 		mla	r1, r1, r6, r7
 10936 0b4c 7748     		ldr	r0, .L1130+28
ARM GAS  /tmp/ccobNVTR.s 			page 307


 10937 0b4e FFF7FEFF 		bl	scopy
 10938              	.LVL1269:
2439:src/display.c **** #endif
 10939              		.loc 1 2439 8 view .LVU3549
 10940              	.LBE551:
 10941              	.LBE601:
2787:src/display.c ****       nostk:	show_flags();
 10942              		.loc 1 2787 2 is_stmt 1 view .LVU3550
 10943 0b52 34E6     		b	.L1079
 10944              	.LVL1270:
 10945              	.L866:
 10946              	.LBB602:
 10947              	.LBB538:
 10948              	.LBB536:
2681:src/display.c **** 	      } else
 10949              		.loc 1 2681 5 view .LVU3551
 10950 0b54 3046     		mov	r0, r6
 10951 0b56 FFF7FEFF 		bl	set_NaN
 10952              	.LVL1271:
 10953 0b5a E2E7     		b	.L867
 10954              	.LVL1272:
 10955              	.L865:
2681:src/display.c **** 	      } else
 10956              		.loc 1 2681 5 is_stmt 0 view .LVU3552
 10957              	.LBE536:
2683:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 10958              		.loc 1 2683 3 is_stmt 1 view .LVU3553
 10959 0b5c 15AE     		add	r6, sp, #84
 10960 0b5e 0CAA     		add	r2, sp, #48
 10961 0b60 0AF07F01 		and	r1, r10, #127
 10962 0b64 3046     		mov	r0, r6
 10963 0b66 FFF7FEFF 		bl	do_conv
 10964              	.LVL1273:
 10965 0b6a DAE7     		b	.L867
 10966              	.LVL1274:
 10967              	.L1118:
2683:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 10968              		.loc 1 2683 3 is_stmt 0 view .LVU3554
 10969              	.LBE538:
 10970              	.LBE602:
2731:src/display.c **** 	    j = State2.alpha_pos;
 10971              		.loc 1 2731 6 is_stmt 1 view .LVU3555
2731:src/display.c **** 	    j = State2.alpha_pos;
 10972              		.loc 1 2731 22 is_stmt 0 view .LVU3556
 10973 0b6c 684A     		ldr	r2, .L1130
 10974 0b6e 0193     		str	r3, [sp, #4]
 10975 0b70 1168     		ldr	r1, [r2]
2731:src/display.c **** 	    j = State2.alpha_pos;
 10976              		.loc 1 2731 11 view .LVU3557
 10977 0b72 1EA8     		add	r0, sp, #120
 10978 0b74 01F5F661 		add	r1, r1, #1968
 10979 0b78 FFF7FEFF 		bl	scopy
 10980              	.LVL1275:
2732:src/display.c **** 	    if (j != 0) {
 10981              		.loc 1 2732 16 view .LVU3558
 10982 0b7c 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 10983              	.LVL1276:
ARM GAS  /tmp/ccobNVTR.s 			page 308


2732:src/display.c **** 	    if (j != 0) {
 10984              		.loc 1 2732 6 is_stmt 1 view .LVU3559
2733:src/display.c **** 	      i = slen(buf);
 10985              		.loc 1 2733 6 view .LVU3560
2733:src/display.c **** 	      i = slen(buf);
 10986              		.loc 1 2733 9 is_stmt 0 view .LVU3561
 10987 0b80 BBF1000F 		cmp	fp, #0
 10988 0b84 12D1     		bne	.L1119
2750:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 10989              		.loc 1 2750 8 is_stmt 1 view .LVU3562
2750:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 10990              		.loc 1 2750 11 is_stmt 0 view .LVU3563
 10991 0b86 BAF1000F 		cmp	r10, #0
 10992 0b8a 05D0     		beq	.L913
2751:src/display.c **** 		*bp++ = '\0';
 10993              		.loc 1 2751 3 is_stmt 1 view .LVU3564
 10994              	.LVL1277:
2751:src/display.c **** 		*bp++ = '\0';
 10995              		.loc 1 2751 23 is_stmt 0 view .LVU3565
 10996 0b8c 0AF1100A 		add	r10, r10, #16
2751:src/display.c **** 		*bp++ = '\0';
 10997              		.loc 1 2751 9 view .LVU3566
 10998 0b90 80F800A0 		strb	r10, [r0]
2752:src/display.c **** 	      }
 10999              		.loc 1 2752 3 is_stmt 1 view .LVU3567
 11000              	.LVL1278:
2752:src/display.c **** 	      }
 11001              		.loc 1 2752 9 is_stmt 0 view .LVU3568
 11002 0b94 80F801B0 		strb	fp, [r0, #1]
 11003              	.LVL1279:
 11004              	.L913:
2754:src/display.c **** 	    }
 11005              		.loc 1 2754 8 is_stmt 1 view .LVU3569
 11006 0b98 1EA8     		add	r0, sp, #120
 11007 0b9a FFF7FEFF 		bl	set_status_right
 11008              	.LVL1280:
2787:src/display.c ****       nostk:	show_flags();
 11009              		.loc 1 2787 2 view .LVU3570
2544:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11010              		.loc 1 2544 6 is_stmt 0 view .LVU3571
 11011 0b9e 0025     		movs	r5, #0
2787:src/display.c ****       nostk:	show_flags();
 11012              		.loc 1 2787 2 view .LVU3572
 11013 0ba0 FFF7FEFF 		bl	show_stack
 11014              	.LVL1281:
2788:src/display.c **** 	if (!skip) {
 11015              		.loc 1 2788 14 is_stmt 1 view .LVU3573
 11016 0ba4 FFF7FEFF 		bl	show_flags
 11017              	.LVL1282:
2789:src/display.c **** 	  if (State2.runmode) {
 11018              		.loc 1 2789 2 view .LVU3574
 11019 0ba8 FFF751BB 		b	.L842
 11020              	.LVL1283:
 11021              	.L1119:
2734:src/display.c **** 	      //				
 11022              		.loc 1 2734 8 view .LVU3575
2734:src/display.c **** 	      //				
ARM GAS  /tmp/ccobNVTR.s 			page 309


 11023              		.loc 1 2734 12 is_stmt 0 view .LVU3576
 11024 0bac 1EA8     		add	r0, sp, #120
 11025              	.LVL1284:
2734:src/display.c **** 	      //				
 11026              		.loc 1 2734 12 view .LVU3577
 11027 0bae FFF7FEFF 		bl	slen
 11028              	.LVL1285:
2736:src/display.c **** #ifdef BIGGER_DISPLAY
 11029              		.loc 1 2736 8 is_stmt 1 view .LVU3578
2738:src/display.c **** #else
 11030              		.loc 1 2738 8 view .LVU3579
2736:src/display.c **** #ifdef BIGGER_DISPLAY
 11031              		.loc 1 2736 10 is_stmt 0 view .LVU3580
 11032 0bb2 0BEB4B0B 		add	fp, fp, fp, lsl #1
 11033              	.LVL1286:
2738:src/display.c **** #else
 11034              		.loc 1 2738 15 view .LVU3581
 11035 0bb6 A0EB4B00 		sub	r0, r0, fp, lsl #1
 11036              	.LVL1287:
2738:src/display.c **** #else
 11037              		.loc 1 2738 11 view .LVU3582
 11038 0bba 1328     		cmp	r0, #19
 11039 0bbc 7FF719AB 		ble	.L845
2743:src/display.c **** 		set_status_right(buf);
 11040              		.loc 1 2743 3 is_stmt 1 view .LVU3583
2743:src/display.c **** 		set_status_right(buf);
 11041              		.loc 1 2743 18 is_stmt 0 view .LVU3584
 11042 0bc0 28AB     		add	r3, sp, #160
 11043 0bc2 1A18     		adds	r2, r3, r0
 11044 0bc4 019B     		ldr	r3, [sp, #4]
 11045 0bc6 02F8283C 		strb	r3, [r2, #-40]
2744:src/display.c **** 		}
 11046              		.loc 1 2744 3 is_stmt 1 view .LVU3585
 11047 0bca 1EA8     		add	r0, sp, #120
 11048 0bcc FFF7FEFF 		bl	set_status_right
 11049              	.LVL1288:
2787:src/display.c ****       nostk:	show_flags();
 11050              		.loc 1 2787 2 view .LVU3586
 11051 0bd0 FFF7FEFF 		bl	show_stack
 11052              	.LVL1289:
2788:src/display.c **** 	if (!skip) {
 11053              		.loc 1 2788 14 view .LVU3587
 11054 0bd4 FFF7FEFF 		bl	show_flags
 11055              	.LVL1290:
2789:src/display.c **** 	  if (State2.runmode) {
 11056              		.loc 1 2789 2 view .LVU3588
 11057 0bd8 FFF739BB 		b	.L842
 11058              	.L1117:
2726:src/display.c **** 	  } else if (State2.alphas) {
 11059              		.loc 1 2726 6 view .LVU3589
2726:src/display.c **** 	  } else if (State2.alphas) {
 11060              		.loc 1 2726 48 is_stmt 0 view .LVU3590
 11061 0bdc 581E     		subs	r0, r3, #1
 11062 0bde FFF7FEFF 		bl	get_reg_n
 11063              	.LVL1291:
 11064              	.LBB603:
 11065              	.LBI603:
ARM GAS  /tmp/ccobNVTR.s 			page 310


2881:src/display.c **** 	int glen = *graphic++;
 11066              		.loc 1 2881 19 is_stmt 1 view .LVU3591
 11067              	.LBB604:
2882:src/display.c **** 	int i, j;
 11068              		.loc 1 2882 2 view .LVU3592
2890:src/display.c **** #endif
 11069              		.loc 1 2890 15 is_stmt 0 view .LVU3593
 11070 0be2 5349     		ldr	r1, .L1130+32
2882:src/display.c **** 	int i, j;
 11071              		.loc 1 2882 6 view .LVU3594
 11072 0be4 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 11073              	.LVL1292:
2883:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11074              		.loc 1 2883 2 is_stmt 1 view .LVU3595
2890:src/display.c **** #endif
 11075              		.loc 1 2890 2 view .LVU3596
2890:src/display.c **** #endif
 11076              		.loc 1 2890 15 is_stmt 0 view .LVU3597
 11077 0be6 0123     		movs	r3, #1
 11078 0be8 0B70     		strb	r3, [r1]
2892:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11079              		.loc 1 2892 2 is_stmt 1 view .LVU3598
2892:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11080              		.loc 1 2892 5 is_stmt 0 view .LVU3599
 11081 0bea 3AB3     		cbz	r2, .L906
2893:src/display.c **** 
 11082              		.loc 1 2893 2 is_stmt 1 view .LVU3600
 11083              	.LVL1293:
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11084              		.loc 1 2895 2 view .LVU3601
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11085              		.loc 1 2895 12 view .LVU3602
 11086 0bec C118     		adds	r1, r0, r3
 11087 0bee 0391     		str	r1, [sp, #12]
 11088 0bf0 4A2A     		cmp	r2, #74
 11089 0bf2 D4BF     		ite	le
 11090 0bf4 8918     		addle	r1, r1, r2
 11091 0bf6 4A31     		addgt	r1, r1, #74
 11092 0bf8 CDE90113 		strd	r1, r3, [sp, #4]
 11093 0bfc CDE90456 		strd	r5, r6, [sp, #16]
 11094              	.LVL1294:
 11095              	.L907:
2896:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11096              		.loc 1 2896 14 view .LVU3603
 11097 0c00 029B     		ldr	r3, [sp, #8]
 11098 0c02 039E     		ldr	r6, [sp, #12]
 11099 0c04 03FA0BFA 		lsl	r10, r3, fp
 11100 0c08 0BF19405 		add	r5, fp, #148
 11101 0c0c 06E0     		b	.L910
 11102              	.LVL1295:
 11103              	.L1121:
 11104              	.LBB605:
 11105              	.LBB606:
 335:src/display.c ****   else	clr_dot(n);
 11106              		.loc 1 335 11 is_stmt 0 view .LVU3604
 11107 0c0e FFF7FEFF 		bl	set_dot
 11108              	.LVL1296:
ARM GAS  /tmp/ccobNVTR.s 			page 311


 11109              	.L909:
 335:src/display.c ****   else	clr_dot(n);
 11110              		.loc 1 335 11 view .LVU3605
 11111              	.LBE606:
 11112              	.LBE605:
2896:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11113              		.loc 1 2896 23 is_stmt 1 view .LVU3606
2896:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11114              		.loc 1 2896 14 view .LVU3607
2896:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11115              		.loc 1 2896 4 is_stmt 0 view .LVU3608
 11116 0c12 019B     		ldr	r3, [sp, #4]
 11117 0c14 9E42     		cmp	r6, r3
 11118 0c16 05F10605 		add	r5, r5, #6
 11119 0c1a 08D0     		beq	.L1120
 11120              	.LVL1297:
 11121              	.L910:
2901:src/display.c **** #endif
 11122              		.loc 1 2901 6 is_stmt 1 view .LVU3609
 11123              	.LBB609:
 11124              	.LBI605:
 334:src/display.c ****   if (on)	set_dot(n);
 11125              		.loc 1 334 6 view .LVU3610
 11126              	.LBB607:
 335:src/display.c ****   else	clr_dot(n);
 11127              		.loc 1 335 3 view .LVU3611
 335:src/display.c ****   else	clr_dot(n);
 11128              		.loc 1 335 11 view .LVU3612
 336:src/display.c **** }
 11129              		.loc 1 336 8 view .LVU3613
 11130              	.LBE607:
 11131              	.LBE609:
2901:src/display.c **** #endif
 11132              		.loc 1 2901 37 is_stmt 0 view .LVU3614
 11133 0c1c 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11134              	.LVL1298:
 11135              	.LBB610:
 11136              	.LBB608:
 335:src/display.c ****   else	clr_dot(n);
 11137              		.loc 1 335 6 view .LVU3615
 11138 0c20 13EA0A0F 		tst	r3, r10
 335:src/display.c ****   else	clr_dot(n);
 11139              		.loc 1 335 11 view .LVU3616
 11140 0c24 2846     		mov	r0, r5
 335:src/display.c ****   else	clr_dot(n);
 11141              		.loc 1 335 6 view .LVU3617
 11142 0c26 F2D1     		bne	.L1121
 336:src/display.c **** }
 11143              		.loc 1 336 8 view .LVU3618
 11144 0c28 FFF7FEFF 		bl	clr_dot
 11145              	.LVL1299:
 11146 0c2c F1E7     		b	.L909
 11147              	.LVL1300:
 11148              	.L1120:
 336:src/display.c **** }
 11149              		.loc 1 336 8 view .LVU3619
 11150              	.LBE608:
ARM GAS  /tmp/ccobNVTR.s 			page 312


 11151              	.LBE610:
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11152              		.loc 1 2895 17 is_stmt 1 view .LVU3620
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11153              		.loc 1 2895 18 is_stmt 0 view .LVU3621
 11154 0c2e 0BF1010B 		add	fp, fp, #1
 11155              	.LVL1301:
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11156              		.loc 1 2895 12 is_stmt 1 view .LVU3622
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11157              		.loc 1 2895 2 is_stmt 0 view .LVU3623
 11158 0c32 BBF1060F 		cmp	fp, #6
 11159 0c36 E3D1     		bne	.L907
 11160 0c38 DDE90456 		ldrd	r5, r6, [sp, #16]
 11161              	.LVL1302:
 11162              	.L906:
2895:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11163              		.loc 1 2895 2 view .LVU3624
 11164              	.LBE604:
 11165              	.LBE603:
2787:src/display.c ****       nostk:	show_flags();
 11166              		.loc 1 2787 2 is_stmt 1 view .LVU3625
 11167 0c3c FFF7FEFF 		bl	show_stack
 11168              	.LVL1303:
2788:src/display.c **** 	if (!skip) {
 11169              		.loc 1 2788 14 view .LVU3626
 11170 0c40 FFF7FEFF 		bl	show_flags
 11171              	.LVL1304:
2789:src/display.c **** 	  if (State2.runmode) {
 11172              		.loc 1 2789 2 view .LVU3627
 11173 0c44 FFF703BB 		b	.L842
 11174              	.LVL1305:
 11175              	.L897:
 11176              	.LBB611:
 11177              	.LBB596:
2473:src/display.c **** 	      n -= 100;
 11178              		.loc 1 2473 8 view .LVU3628
2473:src/display.c **** 	      n -= 100;
 11179              		.loc 1 2473 14 is_stmt 0 view .LVU3629
 11180 0c48 3123     		movs	r3, #49
 11181 0c4a 4370     		strb	r3, [r0, #1]
2474:src/display.c **** 	    }
 11182              		.loc 1 2474 8 is_stmt 1 view .LVU3630
2474:src/display.c **** 	    }
 11183              		.loc 1 2474 10 is_stmt 0 view .LVU3631
 11184 0c4c A8F16408 		sub	r8, r8, #100
 11185              	.LVL1306:
2473:src/display.c **** 	      n -= 100;
 11186              		.loc 1 2473 11 view .LVU3632
 11187 0c50 0230     		adds	r0, r0, #2
 11188              	.LVL1307:
 11189              	.L896:
2477:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11190              		.loc 1 2477 4 is_stmt 1 view .LVU3633
2477:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11191              		.loc 1 2477 7 is_stmt 0 view .LVU3634
 11192 0c52 B8F1630F 		cmp	r8, #99
ARM GAS  /tmp/ccobNVTR.s 			page 313


 11193 0c56 7FF729AF 		ble	.L898
2480:src/display.c **** 	  set_status(buf);
 11194              		.loc 1 2480 6 is_stmt 1 view .LVU3635
 11195              	.LVL1308:
2480:src/display.c **** 	  set_status(buf);
 11196              		.loc 1 2480 22 is_stmt 0 view .LVU3636
 11197 0c5a 364B     		ldr	r3, .L1130+36
 11198 0c5c 9844     		add	r8, r8, r3
 11199              	.LVL1309:
2480:src/display.c **** 	  set_status(buf);
 11200              		.loc 1 2480 12 view .LVU3637
 11201 0c5e 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11202 0c62 0370     		strb	r3, [r0]
 11203 0c64 26E7     		b	.L900
 11204              	.LVL1310:
 11205              	.L1112:
2480:src/display.c **** 	  set_status(buf);
 11206              		.loc 1 2480 12 view .LVU3638
 11207              	.LBE596:
 11208              	.LBE611:
 11209              	.LBB612:
 11210              	.LBB592:
 11211              	.LBB590:
2362:src/display.c **** 	    end = regK_idx;
 11212              		.loc 1 2362 6 is_stmt 1 view .LVU3639
2363:src/display.c **** 	    start = 3;
 11213              		.loc 1 2363 6 view .LVU3640
2364:src/display.c **** 	    group = 4;
 11214              		.loc 1 2364 6 view .LVU3641
2365:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11215              		.loc 1 2365 6 view .LVU3642
2366:src/display.c **** 	  }
 11216              		.loc 1 2366 6 view .LVU3643
 11217 0c66 3448     		ldr	r0, .L1130+40
 11218 0c68 FFF7FEFF 		bl	set_status
 11219              	.LVL1311:
 11220 0c6c 4FF0070A 		mov	r10, #7
 11221 0c70 0822     		movs	r2, #8
 11222 0c72 4FF02408 		mov	r8, #36
 11223              	.LVL1312:
2366:src/display.c **** 	  }
 11224              		.loc 1 2366 6 is_stmt 0 view .LVU3644
 11225 0c76 2220     		movs	r0, #34
2364:src/display.c **** 	    group = 4;
 11226              		.loc 1 2364 12 view .LVU3645
 11227 0c78 4FF0030B 		mov	fp, #3
2365:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11228              		.loc 1 2365 12 view .LVU3646
 11229 0c7c 0426     		movs	r6, #4
2363:src/display.c **** 	    start = 3;
 11230              		.loc 1 2363 10 view .LVU3647
 11231 0c7e 4FF06F09 		mov	r9, #111
 11232              	.LVL1313:
2362:src/display.c **** 	    end = regK_idx;
 11233              		.loc 1 2362 11 view .LVU3648
 11234 0c82 6427     		movs	r7, #100
 11235              	.LVL1314:
ARM GAS  /tmp/ccobNVTR.s 			page 314


2362:src/display.c **** 	    end = regK_idx;
 11236              		.loc 1 2362 11 view .LVU3649
 11237 0c84 00E6     		b	.L877
 11238              	.LVL1315:
 11239              	.L1109:
2362:src/display.c **** 	    end = regK_idx;
 11240              		.loc 1 2362 11 view .LVU3650
 11241              	.LBE590:
2322:src/display.c **** 	  p = num_arg(buf, free_mem());
 11242              		.loc 1 2322 4 is_stmt 1 view .LVU3651
 11243 0c86 2D48     		ldr	r0, .L1130+44
 11244 0c88 214F     		ldr	r7, .L1130
 11245              	.LVL1316:
2322:src/display.c **** 	  p = num_arg(buf, free_mem());
 11246              		.loc 1 2322 4 is_stmt 0 view .LVU3652
 11247 0c8a FFF7FEFF 		bl	set_status
 11248              	.LVL1317:
2323:src/display.c **** 	  p = scopy(p, " , FL. ");
 11249              		.loc 1 2323 4 is_stmt 1 view .LVU3653
2323:src/display.c **** 	  p = scopy(p, " , FL. ");
 11250              		.loc 1 2323 21 is_stmt 0 view .LVU3654
 11251 0c8e FFF7FEFF 		bl	free_mem
 11252              	.LVL1318:
 11253 0c92 0146     		mov	r1, r0
2323:src/display.c **** 	  p = scopy(p, " , FL. ");
 11254              		.loc 1 2323 8 view .LVU3655
 11255 0c94 15A8     		add	r0, sp, #84
 11256              	.LVL1319:
2323:src/display.c **** 	  p = scopy(p, " , FL. ");
 11257              		.loc 1 2323 8 view .LVU3656
 11258 0c96 FFF7FEFF 		bl	num_arg
 11259              	.LVL1320:
2324:src/display.c **** 	  p = num_arg(p, free_flash());
 11260              		.loc 1 2324 4 is_stmt 1 view .LVU3657
2324:src/display.c **** 	  p = num_arg(p, free_flash());
 11261              		.loc 1 2324 8 is_stmt 0 view .LVU3658
 11262 0c9a 2949     		ldr	r1, .L1130+48
 11263 0c9c FFF7FEFF 		bl	scopy
 11264              	.LVL1321:
2324:src/display.c **** 	  p = num_arg(p, free_flash());
 11265              		.loc 1 2324 8 view .LVU3659
 11266 0ca0 0646     		mov	r6, r0
 11267              	.LVL1322:
2325:src/display.c **** 	  *p = '\0';
 11268              		.loc 1 2325 4 is_stmt 1 view .LVU3660
2325:src/display.c **** 	  *p = '\0';
 11269              		.loc 1 2325 19 is_stmt 0 view .LVU3661
 11270 0ca2 FFF7FEFF 		bl	free_flash
 11271              	.LVL1323:
2325:src/display.c **** 	  *p = '\0';
 11272              		.loc 1 2325 19 view .LVU3662
 11273 0ca6 0146     		mov	r1, r0
2325:src/display.c **** 	  *p = '\0';
 11274              		.loc 1 2325 8 view .LVU3663
 11275 0ca8 3046     		mov	r0, r6
 11276 0caa FFF7FEFF 		bl	num_arg
 11277              	.LVL1324:
ARM GAS  /tmp/ccobNVTR.s 			page 315


 11278 0cae 0346     		mov	r3, r0
 11279              	.LVL1325:
2326:src/display.c **** 	  set_digits_string(buf, 0);
 11280              		.loc 1 2326 4 is_stmt 1 view .LVU3664
2326:src/display.c **** 	  set_digits_string(buf, 0);
 11281              		.loc 1 2326 7 is_stmt 0 view .LVU3665
 11282 0cb0 0021     		movs	r1, #0
2327:src/display.c **** 	}
 11283              		.loc 1 2327 4 view .LVU3666
 11284 0cb2 15A8     		add	r0, sp, #84
 11285              	.LVL1326:
2326:src/display.c **** 	  set_digits_string(buf, 0);
 11286              		.loc 1 2326 7 view .LVU3667
 11287 0cb4 1970     		strb	r1, [r3]
2327:src/display.c **** 	}
 11288              		.loc 1 2327 4 is_stmt 1 view .LVU3668
 11289 0cb6 FFF7FEFF 		bl	set_digits_string
 11290              	.LVL1327:
2327:src/display.c **** 	}
 11291              		.loc 1 2327 4 is_stmt 0 view .LVU3669
 11292 0cba 1EE6     		b	.L872
 11293              	.LVL1328:
 11294              	.L1111:
 11295              	.LBB591:
2352:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11296              		.loc 1 2352 6 is_stmt 1 view .LVU3670
2352:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11297              		.loc 1 2352 11 is_stmt 0 view .LVU3671
 11298 0cbc 07EB8707 		add	r7, r7, r7, lsl #2
 11299              	.LVL1329:
2352:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11300              		.loc 1 2352 11 view .LVU3672
 11301 0cc0 7F00     		lsls	r7, r7, #1
 11302              	.LVL1330:
2353:src/display.c **** 	    p = scopy(buf, "FL ");
 11303              		.loc 1 2353 6 is_stmt 1 view .LVU3673
2353:src/display.c **** 	    p = scopy(buf, "FL ");
 11304              		.loc 1 2353 28 is_stmt 0 view .LVU3674
 11305 0cc2 462F     		cmp	r7, #70
2354:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11306              		.loc 1 2354 10 view .LVU3675
 11307 0cc4 1F49     		ldr	r1, .L1130+52
 11308 0cc6 15A8     		add	r0, sp, #84
 11309              	.LVL1331:
2353:src/display.c **** 	    p = scopy(buf, "FL ");
 11310              		.loc 1 2353 28 view .LVU3676
 11311 0cc8 B946     		mov	r9, r7
 11312              	.LVL1332:
2353:src/display.c **** 	    p = scopy(buf, "FL ");
 11313              		.loc 1 2353 28 view .LVU3677
 11314 0cca A8BF     		it	ge
 11315 0ccc 4FF04609 		movge	r9, #70
2354:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11316              		.loc 1 2354 10 view .LVU3678
 11317 0cd0 FFF7FEFF 		bl	scopy
 11318              	.LVL1333:
2355:src/display.c **** 	    *p++ = '-';
ARM GAS  /tmp/ccobNVTR.s 			page 316


 11319              		.loc 1 2355 10 view .LVU3679
 11320 0cd4 3946     		mov	r1, r7
 11321 0cd6 0222     		movs	r2, #2
 11322 0cd8 FFF7FEFF 		bl	num_arg_0
 11323              	.LVL1334:
2353:src/display.c **** 	    p = scopy(buf, "FL ");
 11324              		.loc 1 2353 10 view .LVU3680
 11325 0cdc 09F11D09 		add	r9, r9, #29
 11326              	.LVL1335:
2354:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11327              		.loc 1 2354 6 is_stmt 1 view .LVU3681
2355:src/display.c **** 	    *p++ = '-';
 11328              		.loc 1 2355 6 view .LVU3682
2356:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11329              		.loc 1 2356 6 view .LVU3683
2356:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11330              		.loc 1 2356 11 is_stmt 0 view .LVU3684
 11331 0ce0 2D23     		movs	r3, #45
 11332 0ce2 00F8013B 		strb	r3, [r0], #1
 11333              	.LVL1336:
2357:src/display.c **** 	    *p = '\0';
 11334              		.loc 1 2357 6 is_stmt 1 view .LVU3685
2357:src/display.c **** 	    *p = '\0';
 11335              		.loc 1 2357 10 is_stmt 0 view .LVU3686
 11336 0ce6 4946     		mov	r1, r9
 11337 0ce8 0222     		movs	r2, #2
 11338 0cea FFF7FEFF 		bl	num_arg_0
 11339              	.LVL1337:
2357:src/display.c **** 	    *p = '\0';
 11340              		.loc 1 2357 10 view .LVU3687
 11341 0cee 0246     		mov	r2, r0
 11342              	.LVL1338:
2358:src/display.c **** 	    set_status(buf);
 11343              		.loc 1 2358 6 is_stmt 1 view .LVU3688
2358:src/display.c **** 	    set_status(buf);
 11344              		.loc 1 2358 9 is_stmt 0 view .LVU3689
 11345 0cf0 4FF0000B 		mov	fp, #0
2359:src/display.c **** 	  }
 11346              		.loc 1 2359 6 view .LVU3690
 11347 0cf4 15A8     		add	r0, sp, #84
 11348              	.LVL1339:
2358:src/display.c **** 	    set_status(buf);
 11349              		.loc 1 2358 9 view .LVU3691
 11350 0cf6 82F800B0 		strb	fp, [r2]
2359:src/display.c **** 	  }
 11351              		.loc 1 2359 6 is_stmt 1 view .LVU3692
 11352 0cfa 4FF00A0A 		mov	r10, #10
 11353 0cfe FFF7FEFF 		bl	set_status
 11354              	.LVL1340:
2348:src/display.c **** 	  int start = 0;
 11355              		.loc 1 2348 8 is_stmt 0 view .LVU3693
 11356 0d02 5646     		mov	r6, r10
 11357 0d04 0222     		movs	r2, #2
 11358 0d06 4FF00908 		mov	r8, #9
 11359              	.LVL1341:
2348:src/display.c **** 	  int start = 0;
 11360              		.loc 1 2348 8 view .LVU3694
ARM GAS  /tmp/ccobNVTR.s 			page 317


 11361 0d0a 0720     		movs	r0, #7
 11362 0d0c BCE5     		b	.L877
 11363              	.L1131:
 11364 0d0e 00BF     		.align	2
 11365              	.L1130:
 11366 0d10 00000000 		.word	main_ram
 11367 0d14 00000000 		.word	DispMsg
 11368 0d18 A0000000 		.word	.LC40
 11369 0d1c 40000000 		.word	.LC30
 11370 0d20 A8000000 		.word	.LC41
 11371 0d24 00000000 		.word	monfuncs
 11372 0d28 00000000 		.word	Ctx
 11373 0d2c 00000000 		.word	LastDisplayedNumber
 11374 0d30 00000000 		.word	forceDispPlot
 11375 0d34 BC000000 		.word	.LC27
 11376 0d38 7C000000 		.word	.LC37
 11377 0d3c 4C000000 		.word	.LC31
 11378 0d40 54000000 		.word	.LC32
 11379 0d44 78000000 		.word	.LC36
 11380 0d48 00000000 		.word	DispPlot
 11381              	.LVL1342:
 11382              	.L1110:
2348:src/display.c **** 	  int start = 0;
 11383              		.loc 1 2348 8 view .LVU3695
 11384              	.LBE591:
2331:src/display.c **** 	  if (SizeStatRegs)
 11385              		.loc 1 2331 4 is_stmt 1 view .LVU3696
2331:src/display.c **** 	  if (SizeStatRegs)
 11386              		.loc 1 2331 8 is_stmt 0 view .LVU3697
 11387 0d4c 15AE     		add	r6, sp, #84
 11388              	.LVL1343:
2331:src/display.c **** 	  if (SizeStatRegs)
 11389              		.loc 1 2331 8 view .LVU3698
 11390 0d4e 1849     		ldr	r1, .L1132
 11391 0d50 3046     		mov	r0, r6
 11392 0d52 FFF7FEFF 		bl	scopy
 11393              	.LVL1344:
2332:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11394              		.loc 1 2332 8 view .LVU3699
 11395 0d56 174A     		ldr	r2, .L1132+4
2332:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11396              		.loc 1 2332 7 view .LVU3700
 11397 0d58 1268     		ldr	r2, [r2]
2331:src/display.c **** 	  if (SizeStatRegs)
 11398              		.loc 1 2331 8 view .LVU3701
 11399 0d5a 0346     		mov	r3, r0
 11400              	.LVL1345:
2332:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11401              		.loc 1 2332 4 is_stmt 1 view .LVU3702
2332:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11402              		.loc 1 2332 7 is_stmt 0 view .LVU3703
 11403 0d5c BAB9     		cbnz	r2, .L1122
 11404              	.L874:
2334:src/display.c **** 	  set_status(buf);
 11405              		.loc 1 2334 4 is_stmt 1 view .LVU3704
2334:src/display.c **** 	  set_status(buf);
 11406              		.loc 1 2334 7 is_stmt 0 view .LVU3705
ARM GAS  /tmp/ccobNVTR.s 			page 318


 11407 0d5e 0022     		movs	r2, #0
 11408 0d60 1A70     		strb	r2, [r3]
2335:src/display.c **** 
 11409              		.loc 1 2335 4 is_stmt 1 view .LVU3706
 11410 0d62 3046     		mov	r0, r6
 11411              	.LVL1346:
2335:src/display.c **** 
 11412              		.loc 1 2335 4 is_stmt 0 view .LVU3707
 11413 0d64 FFF7FEFF 		bl	set_status
 11414              	.LVL1347:
2338:src/display.c **** 	  if (LocalRegs < 0) {
 11415              		.loc 1 2338 4 is_stmt 1 view .LVU3708
2338:src/display.c **** 	  if (LocalRegs < 0) {
 11416              		.loc 1 2338 8 is_stmt 0 view .LVU3709
 11417 0d68 FFF7FEFF 		bl	global_regs
 11418              	.LVL1348:
2339:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11419              		.loc 1 2339 8 view .LVU3710
 11420 0d6c 124F     		ldr	r7, .L1132+8
 11421              	.LVL1349:
2338:src/display.c **** 	  if (LocalRegs < 0) {
 11422              		.loc 1 2338 8 view .LVU3711
 11423 0d6e 0146     		mov	r1, r0
 11424 0d70 3046     		mov	r0, r6
 11425 0d72 FFF7FEFF 		bl	num_arg
 11426              	.LVL1350:
2339:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11427              		.loc 1 2339 8 view .LVU3712
 11428 0d76 3A68     		ldr	r2, [r7]
2339:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11429              		.loc 1 2339 7 view .LVU3713
 11430 0d78 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11431 0d7c 002A     		cmp	r2, #0
2338:src/display.c **** 	  if (LocalRegs < 0) {
 11432              		.loc 1 2338 8 view .LVU3714
 11433 0d7e 0346     		mov	r3, r0
 11434              	.LVL1351:
2339:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11435              		.loc 1 2339 4 is_stmt 1 view .LVU3715
2339:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11436              		.loc 1 2339 7 is_stmt 0 view .LVU3716
 11437 0d80 0ADB     		blt	.L1123
 11438              	.LVL1352:
 11439              	.L875:
2343:src/display.c **** 	  set_digits_string(buf, 0);
 11440              		.loc 1 2343 4 is_stmt 1 view .LVU3717
2343:src/display.c **** 	  set_digits_string(buf, 0);
 11441              		.loc 1 2343 7 is_stmt 0 view .LVU3718
 11442 0d82 0021     		movs	r1, #0
2344:src/display.c **** 	} else {
 11443              		.loc 1 2344 4 view .LVU3719
 11444 0d84 3046     		mov	r0, r6
 11445              	.LVL1353:
2343:src/display.c **** 	  set_digits_string(buf, 0);
 11446              		.loc 1 2343 7 view .LVU3720
 11447 0d86 1970     		strb	r1, [r3]
2344:src/display.c **** 	} else {
ARM GAS  /tmp/ccobNVTR.s 			page 319


 11448              		.loc 1 2344 4 is_stmt 1 view .LVU3721
 11449 0d88 FFF7FEFF 		bl	set_digits_string
 11450              	.LVL1354:
2344:src/display.c **** 	} else {
 11451              		.loc 1 2344 4 is_stmt 0 view .LVU3722
 11452 0d8c B5E5     		b	.L872
 11453              	.LVL1355:
 11454              	.L1122:
2333:src/display.c **** 	  *p = '\0';
 11455              		.loc 1 2333 6 is_stmt 1 view .LVU3723
2333:src/display.c **** 	  *p = '\0';
 11456              		.loc 1 2333 10 is_stmt 0 view .LVU3724
 11457 0d8e 0B49     		ldr	r1, .L1132+12
 11458 0d90 FFF7FEFF 		bl	scopy
 11459              	.LVL1356:
2333:src/display.c **** 	  *p = '\0';
 11460              		.loc 1 2333 10 view .LVU3725
 11461 0d94 0346     		mov	r3, r0
 11462              	.LVL1357:
2333:src/display.c **** 	  *p = '\0';
 11463              		.loc 1 2333 10 view .LVU3726
 11464 0d96 E2E7     		b	.L874
 11465              	.LVL1358:
 11466              	.L1123:
2340:src/display.c **** 	    p = num_arg(p, local_regs());
 11467              		.loc 1 2340 6 is_stmt 1 view .LVU3727
2340:src/display.c **** 	    p = num_arg(p, local_regs());
 11468              		.loc 1 2340 10 is_stmt 0 view .LVU3728
 11469 0d98 0949     		ldr	r1, .L1132+16
 11470 0d9a FFF7FEFF 		bl	scopy
 11471              	.LVL1359:
2340:src/display.c **** 	    p = num_arg(p, local_regs());
 11472              		.loc 1 2340 10 view .LVU3729
 11473 0d9e 8046     		mov	r8, r0
 11474              	.LVL1360:
2341:src/display.c **** 	  }
 11475              		.loc 1 2341 6 is_stmt 1 view .LVU3730
2341:src/display.c **** 	  }
 11476              		.loc 1 2341 21 is_stmt 0 view .LVU3731
 11477 0da0 FFF7FEFF 		bl	local_regs
 11478              	.LVL1361:
2341:src/display.c **** 	  }
 11479              		.loc 1 2341 21 view .LVU3732
 11480 0da4 0146     		mov	r1, r0
2341:src/display.c **** 	  }
 11481              		.loc 1 2341 10 view .LVU3733
 11482 0da6 4046     		mov	r0, r8
 11483 0da8 FFF7FEFF 		bl	num_arg
 11484              	.LVL1362:
 11485 0dac 0346     		mov	r3, r0
 11486              	.LVL1363:
2341:src/display.c **** 	  }
 11487              		.loc 1 2341 10 view .LVU3734
 11488 0dae E8E7     		b	.L875
 11489              	.L1133:
 11490              		.align	2
 11491              	.L1132:
ARM GAS  /tmp/ccobNVTR.s 			page 320


 11492 0db0 5C000000 		.word	.LC33
 11493 0db4 00000000 		.word	SizeStatRegs
 11494 0db8 00000000 		.word	main_ram
 11495 0dbc 64000000 		.word	.LC34
 11496 0dc0 6C000000 		.word	.LC35
 11497              	.LBE592:
 11498              	.LBE612:
 11499              		.cfi_endproc
 11500              	.LFE34:
 11502              		.section	.text.frozen_display,"ax",%progbits
 11503              		.align	1
 11504              		.p2align 2,,3
 11505              		.global	frozen_display
 11506              		.syntax unified
 11507              		.thumb
 11508              		.thumb_func
 11509              		.fpu fpv4-sp-d16
 11511              	frozen_display:
 11512              	.LFB35:
2875:src/display.c **** 	State2.disp_freeze = 0;
 11513              		.loc 1 2875 7 is_stmt 1 view -0
 11514              		.cfi_startproc
 11515              		@ args = 0, pretend = 0, frame = 0
 11516              		@ frame_needed = 0, uses_anonymous_args = 0
2876:src/display.c **** 	display();
 11517              		.loc 1 2876 2 view .LVU3736
2875:src/display.c **** 	State2.disp_freeze = 0;
 11518              		.loc 1 2875 7 is_stmt 0 view .LVU3737
 11519 0000 10B5     		push	{r4, lr}
 11520              		.cfi_def_cfa_offset 8
 11521              		.cfi_offset 4, -8
 11522              		.cfi_offset 14, -4
2876:src/display.c **** 	display();
 11523              		.loc 1 2876 21 view .LVU3738
 11524 0002 064C     		ldr	r4, .L1136
 11525 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11526 0006 6FF30413 		bfc	r3, #4, #1
 11527 000a E375     		strb	r3, [r4, #23]
2877:src/display.c **** 	State2.disp_freeze = 1;
 11528              		.loc 1 2877 2 is_stmt 1 view .LVU3739
 11529 000c FFF7FEFF 		bl	display
 11530              	.LVL1364:
2878:src/display.c ****       }
 11531              		.loc 1 2878 2 view .LVU3740
2878:src/display.c ****       }
 11532              		.loc 1 2878 21 is_stmt 0 view .LVU3741
 11533 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11534 0012 43F01003 		orr	r3, r3, #16
 11535 0016 E375     		strb	r3, [r4, #23]
2879:src/display.c **** 
 11536              		.loc 1 2879 7 view .LVU3742
 11537 0018 10BD     		pop	{r4, pc}
 11538              	.L1137:
 11539 001a 00BF     		.align	2
 11540              	.L1136:
 11541 001c 00000000 		.word	StateWhileOn
 11542              		.cfi_endproc
ARM GAS  /tmp/ccobNVTR.s 			page 321


 11543              	.LFE35:
 11545              		.section	.text.message,"ax",%progbits
 11546              		.align	1
 11547              		.p2align 2,,3
 11548              		.global	message
 11549              		.syntax unified
 11550              		.thumb
 11551              		.thumb_func
 11552              		.fpu fpv4-sp-d16
 11554              	message:
 11555              	.LVL1365:
 11556              	.LFB45:
3085:src/display.c **** 	State2.disp_freeze = 0;
 11557              		.loc 1 3085 7 is_stmt 1 view -0
 11558              		.cfi_startproc
 11559              		@ args = 0, pretend = 0, frame = 0
 11560              		@ frame_needed = 0, uses_anonymous_args = 0
3086:src/display.c **** 	State2.disp_small = 0;
 11561              		.loc 1 3086 2 view .LVU3744
3087:src/display.c **** 	WasDataEntry = 0;
 11562              		.loc 1 3087 2 view .LVU3745
3087:src/display.c **** 	WasDataEntry = 0;
 11563              		.loc 1 3087 20 is_stmt 0 view .LVU3746
 11564 0000 174A     		ldr	r2, .L1148
3085:src/display.c **** 	State2.disp_freeze = 0;
 11565              		.loc 1 3085 7 view .LVU3747
 11566 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11567              		.cfi_def_cfa_offset 24
 11568              		.cfi_offset 3, -24
 11569              		.cfi_offset 4, -20
 11570              		.cfi_offset 5, -16
 11571              		.cfi_offset 6, -12
 11572              		.cfi_offset 7, -8
 11573              		.cfi_offset 14, -4
3087:src/display.c **** 	WasDataEntry = 0;
 11574              		.loc 1 3087 20 view .LVU3748
 11575 0004 D38A     		ldrh	r3, [r2, #22]
3088:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11576              		.loc 1 3088 15 view .LVU3749
 11577 0006 174E     		ldr	r6, .L1148+4
3087:src/display.c **** 	WasDataEntry = 0;
 11578              		.loc 1 3087 20 view .LVU3750
 11579 0008 23F48453 		bic	r3, r3, #4224
3088:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11580              		.loc 1 3088 15 view .LVU3751
 11581 000c 0027     		movs	r7, #0
3087:src/display.c **** 	WasDataEntry = 0;
 11582              		.loc 1 3087 20 view .LVU3752
 11583 000e D382     		strh	r3, [r2, #22]	@ movhi
3088:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11584              		.loc 1 3088 2 is_stmt 1 view .LVU3753
3089:src/display.c **** 	  // Complete redraw necessary
 11585              		.loc 1 3089 5 is_stmt 0 view .LVU3754
 11586 0010 9B05     		lsls	r3, r3, #22
3085:src/display.c **** 	State2.disp_freeze = 0;
 11587              		.loc 1 3085 7 view .LVU3755
 11588 0012 0546     		mov	r5, r0
ARM GAS  /tmp/ccobNVTR.s 			page 322


 11589 0014 0C46     		mov	r4, r1
3088:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11590              		.loc 1 3088 15 view .LVU3756
 11591 0016 3760     		str	r7, [r6]
3089:src/display.c **** 	  // Complete redraw necessary
 11592              		.loc 1 3089 2 is_stmt 1 view .LVU3757
3089:src/display.c **** 	  // Complete redraw necessary
 11593              		.loc 1 3089 5 is_stmt 0 view .LVU3758
 11594 0018 12D5     		bpl	.L1139
3089:src/display.c **** 	  // Complete redraw necessary
 11595              		.loc 1 3089 27 discriminator 1 view .LVU3759
 11596 001a D1B1     		cbz	r1, .L1147
 11597              	.L1140:
3096:src/display.c **** 	    ShowRPN = 0;
 11598              		.loc 1 3096 6 is_stmt 1 view .LVU3760
 11599 001c FFF7FEFF 		bl	reset_disp
 11600              	.LVL1366:
3097:src/display.c **** 	    set_annunciators();
 11601              		.loc 1 3097 6 view .LVU3761
3097:src/display.c **** 	    set_annunciators();
 11602              		.loc 1 3097 14 is_stmt 0 view .LVU3762
 11603 0020 114B     		ldr	r3, .L1148+8
 11604 0022 0026     		movs	r6, #0
 11605 0024 1E60     		str	r6, [r3]
3098:src/display.c **** 	    set_digits_string( str2, 0 );
 11606              		.loc 1 3098 6 is_stmt 1 view .LVU3763
 11607 0026 FFF7FEFF 		bl	set_annunciators
 11608              	.LVL1367:
3099:src/display.c **** 	  }
 11609              		.loc 1 3099 6 view .LVU3764
 11610 002a 3146     		mov	r1, r6
 11611 002c 2046     		mov	r0, r4
 11612 002e FFF7FEFF 		bl	set_digits_string
 11613              	.LVL1368:
3101:src/display.c **** 	  finish_display();// message
 11614              		.loc 1 3101 4 view .LVU3765
 11615 0032 2846     		mov	r0, r5
 11616 0034 FFF7FEFF 		bl	set_status
 11617              	.LVL1369:
3102:src/display.c **** 	}
 11618              		.loc 1 3102 4 view .LVU3766
3104:src/display.c **** 
 11619              		.loc 1 3104 7 is_stmt 0 view .LVU3767
 11620 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11621              		.cfi_remember_state
 11622              		.cfi_restore 14
 11623              		.cfi_restore 7
 11624              		.cfi_restore 6
 11625              		.cfi_restore 5
 11626              		.cfi_restore 4
 11627              		.cfi_restore 3
 11628              		.cfi_def_cfa_offset 0
 11629              	.LVL1370:
3102:src/display.c **** 	}
 11630              		.loc 1 3102 4 view .LVU3768
 11631 003c FFF7FEBF 		b	finish_display
 11632              	.LVL1371:
ARM GAS  /tmp/ccobNVTR.s 			page 323


 11633              	.L1139:
 11634              		.cfi_restore_state
3095:src/display.c **** 	    reset_disp();
 11635              		.loc 1 3095 4 is_stmt 1 view .LVU3769
3095:src/display.c **** 	    reset_disp();
 11636              		.loc 1 3095 7 is_stmt 0 view .LVU3770
 11637 0040 0029     		cmp	r1, #0
 11638 0042 EBD1     		bne	.L1140
3101:src/display.c **** 	  finish_display();// message
 11639              		.loc 1 3101 4 is_stmt 1 view .LVU3771
 11640 0044 2846     		mov	r0, r5
 11641              	.LVL1372:
3101:src/display.c **** 	  finish_display();// message
 11642              		.loc 1 3101 4 is_stmt 0 view .LVU3772
 11643 0046 FFF7FEFF 		bl	set_status
 11644              	.LVL1373:
3102:src/display.c **** 	}
 11645              		.loc 1 3102 4 is_stmt 1 view .LVU3773
3104:src/display.c **** 
 11646              		.loc 1 3104 7 is_stmt 0 view .LVU3774
 11647 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11648              		.cfi_remember_state
 11649              		.cfi_restore 14
 11650              		.cfi_restore 7
 11651              		.cfi_restore 6
 11652              		.cfi_restore 5
 11653              		.cfi_restore 4
 11654              		.cfi_restore 3
 11655              		.cfi_def_cfa_offset 0
 11656              	.LVL1374:
3102:src/display.c **** 	}
 11657              		.loc 1 3102 4 view .LVU3775
 11658 004e FFF7FEBF 		b	finish_display
 11659              	.LVL1375:
 11660              	.L1147:
 11661              		.cfi_restore_state
3091:src/display.c **** 	  display();
 11662              		.loc 1 3091 4 is_stmt 1 view .LVU3776
3091:src/display.c **** 	  display();
 11663              		.loc 1 3091 12 is_stmt 0 view .LVU3777
 11664 0052 064B     		ldr	r3, .L1148+12
 11665 0054 1860     		str	r0, [r3]
3092:src/display.c **** 	}
 11666              		.loc 1 3092 4 is_stmt 1 view .LVU3778
3104:src/display.c **** 
 11667              		.loc 1 3104 7 is_stmt 0 view .LVU3779
 11668 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11669              		.cfi_restore 14
 11670              		.cfi_restore 7
 11671              		.cfi_restore 6
 11672              		.cfi_restore 5
 11673              		.cfi_restore 4
 11674              		.cfi_restore 3
 11675              		.cfi_def_cfa_offset 0
3092:src/display.c **** 	}
 11676              		.loc 1 3092 4 view .LVU3780
 11677 005a FFF7FEBF 		b	display
ARM GAS  /tmp/ccobNVTR.s 			page 324


 11678              	.LVL1376:
 11679              	.L1149:
3092:src/display.c **** 	}
 11680              		.loc 1 3092 4 view .LVU3781
 11681 005e 00BF     		.align	2
 11682              	.L1148:
 11683 0060 00000000 		.word	StateWhileOn
 11684 0064 00000000 		.word	WasDataEntry
 11685 0068 00000000 		.word	ShowRPN
 11686 006c 00000000 		.word	DispMsg
 11687              		.cfi_endproc
 11688              	.LFE45:
 11690              		.section	.text.error_message,"ax",%progbits
 11691              		.align	1
 11692              		.p2align 2,,3
 11693              		.global	error_message
 11694              		.syntax unified
 11695              		.thumb
 11696              		.thumb_func
 11697              		.fpu fpv4-sp-d16
 11699              	error_message:
 11700              	.LVL1377:
 11701              	.LFB1:
 129:src/display.c **** #define MSG1(top) top "\0"
 11702              		.loc 1 129 1 is_stmt 1 view -0
 11703              		.cfi_startproc
 11704              		@ args = 0, pretend = 0, frame = 0
 11705              		@ frame_needed = 0, uses_anonymous_args = 0
 134:src/display.c ****     {
 11706              		.loc 1 134 3 view .LVU3783
 192:src/display.c ****     {
 11707              		.loc 1 192 3 view .LVU3784
 227:src/display.c ****     const char *p = error_table[e];
 11708              		.loc 1 227 3 view .LVU3785
 129:src/display.c **** #define MSG1(top) top "\0"
 11709              		.loc 1 129 1 is_stmt 0 view .LVU3786
 11710 0000 38B5     		push	{r3, r4, r5, lr}
 11711              		.cfi_def_cfa_offset 16
 11712              		.cfi_offset 3, -16
 11713              		.cfi_offset 4, -12
 11714              		.cfi_offset 5, -8
 11715              		.cfi_offset 14, -4
 227:src/display.c ****     const char *p = error_table[e];
 11716              		.loc 1 227 21 view .LVU3787
 11717 0002 1A4B     		ldr	r3, .L1161
 11718 0004 1B68     		ldr	r3, [r3]
 11719 0006 0343     		orrs	r3, r0, r3
 11720 0008 2CD0     		beq	.L1150
 11721              	.LBB613:
 228:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11722              		.loc 1 228 5 is_stmt 1 view .LVU3788
 228:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11723              		.loc 1 228 17 is_stmt 0 view .LVU3789
 11724 000a 194B     		ldr	r3, .L1161+4
 11725 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11726              	.LVL1378:
 229:src/display.c ****     if (*q == '\0')
ARM GAS  /tmp/ccobNVTR.s 			page 325


 11727              		.loc 1 229 5 is_stmt 1 view .LVU3790
 11728 0010 0446     		mov	r4, r0
 229:src/display.c ****     if (*q == '\0')
 11729              		.loc 1 229 21 is_stmt 0 view .LVU3791
 11730 0012 0021     		movs	r1, #0
 11731 0014 2846     		mov	r0, r5
 11732              	.LVL1379:
 229:src/display.c ****     if (*q == '\0')
 11733              		.loc 1 229 21 view .LVU3792
 11734 0016 FFF7FEFF 		bl	find_char
 11735              	.LVL1380:
 230:src/display.c ****       q = S7_ERROR;
 11736              		.loc 1 230 5 is_stmt 1 view .LVU3793
 230:src/display.c ****       q = S7_ERROR;
 11737              		.loc 1 230 9 is_stmt 0 view .LVU3794
 11738 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 230:src/display.c ****       q = S7_ERROR;
 11739              		.loc 1 230 8 view .LVU3795
 11740 001c 9BB9     		cbnz	r3, .L1159
 231:src/display.c ****     if (*q == 'X') {
 11741              		.loc 1 231 9 view .LVU3796
 11742 001e 1549     		ldr	r1, .L1161+8
 11743              	.L1152:
 11744              	.LVL1381:
 241:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 11745              		.loc 1 241 7 is_stmt 1 view .LVU3797
 11746 0020 2846     		mov	r0, r5
 11747 0022 FFF7FEFF 		bl	message
 11748              	.LVL1382:
 242:src/display.c **** #ifndef REALBUILD
 11749              		.loc 1 242 7 view .LVU3798
 242:src/display.c **** #ifndef REALBUILD
 11750              		.loc 1 242 26 is_stmt 0 view .LVU3799
 11751 0026 144B     		ldr	r3, .L1161+12
 244:src/display.c **** #endif
 11752              		.loc 1 244 7 view .LVU3800
 11753 0028 1449     		ldr	r1, .L1161+16
 242:src/display.c **** #ifndef REALBUILD
 11754              		.loc 1 242 26 view .LVU3801
 11755 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 244:src/display.c **** #endif
 11756              		.loc 1 244 7 view .LVU3802
 11757 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11758 0030 1348     		ldr	r0, .L1161+20
 242:src/display.c **** #ifndef REALBUILD
 11759              		.loc 1 242 31 view .LVU3803
 11760 0032 003C     		subs	r4, r4, #0
 242:src/display.c **** #ifndef REALBUILD
 11761              		.loc 1 242 31 view .LVU3804
 11762 0034 18BF     		it	ne
 11763 0036 0124     		movne	r4, #1
 11764              	.LVL1383:
 242:src/display.c **** #ifndef REALBUILD
 11765              		.loc 1 242 26 view .LVU3805
 11766 0038 64F30412 		bfi	r2, r4, #4, #1
 11767 003c DA75     		strb	r2, [r3, #23]
 244:src/display.c **** #endif
ARM GAS  /tmp/ccobNVTR.s 			page 326


 11768              		.loc 1 244 7 is_stmt 1 view .LVU3806
 11769              	.LBE613:
 269:src/display.c **** 
 11770              		.loc 1 269 1 is_stmt 0 view .LVU3807
 11771 003e BDE83840 		pop	{r3, r4, r5, lr}
 11772              		.cfi_remember_state
 11773              		.cfi_restore 14
 11774              		.cfi_restore 5
 11775              		.cfi_restore 4
 11776              		.cfi_restore 3
 11777              		.cfi_def_cfa_offset 0
 11778              	.LVL1384:
 11779              	.LBB620:
 244:src/display.c **** #endif
 11780              		.loc 1 244 7 view .LVU3808
 11781 0042 FFF7FEBF 		b	scopy
 11782              	.LVL1385:
 11783              	.L1159:
 11784              		.cfi_restore_state
 232:src/display.c ****       DispMsg = p;
 11785              		.loc 1 232 5 is_stmt 1 view .LVU3809
 232:src/display.c ****       DispMsg = p;
 11786              		.loc 1 232 8 is_stmt 0 view .LVU3810
 11787 0046 582B     		cmp	r3, #88
 11788 0048 0DD1     		bne	.L1160
 233:src/display.c ****       frozen_display();
 11789              		.loc 1 233 7 is_stmt 1 view .LVU3811
 11790              	.LBB614:
 11791              	.LBB615:
2876:src/display.c **** 	display();
 11792              		.loc 1 2876 21 is_stmt 0 view .LVU3812
 11793 004a 0B4C     		ldr	r4, .L1161+12
 11794              	.LVL1386:
2876:src/display.c **** 	display();
 11795              		.loc 1 2876 21 view .LVU3813
 11796              	.LBE615:
 11797              	.LBE614:
 233:src/display.c ****       frozen_display();
 11798              		.loc 1 233 15 view .LVU3814
 11799 004c 0D4A     		ldr	r2, .L1161+24
 11800              	.LBB618:
 11801              	.LBB616:
2876:src/display.c **** 	display();
 11802              		.loc 1 2876 21 view .LVU3815
 11803 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11804              	.LBE616:
 11805              	.LBE618:
 233:src/display.c ****       frozen_display();
 11806              		.loc 1 233 15 view .LVU3816
 11807 0050 1560     		str	r5, [r2]
 234:src/display.c ****     }
 11808              		.loc 1 234 7 is_stmt 1 view .LVU3817
 11809              	.LBB619:
 11810              	.LBI614:
2874:src/display.c ****       {
 11811              		.loc 1 2874 12 view .LVU3818
 11812              	.LBB617:
ARM GAS  /tmp/ccobNVTR.s 			page 327


2876:src/display.c **** 	display();
 11813              		.loc 1 2876 2 view .LVU3819
2876:src/display.c **** 	display();
 11814              		.loc 1 2876 21 is_stmt 0 view .LVU3820
 11815 0052 6FF30413 		bfc	r3, #4, #1
 11816 0056 E375     		strb	r3, [r4, #23]
2877:src/display.c **** 	State2.disp_freeze = 1;
 11817              		.loc 1 2877 2 is_stmt 1 view .LVU3821
 11818 0058 FFF7FEFF 		bl	display
 11819              	.LVL1387:
2878:src/display.c ****       }
 11820              		.loc 1 2878 2 view .LVU3822
2878:src/display.c ****       }
 11821              		.loc 1 2878 21 is_stmt 0 view .LVU3823
 11822 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11823 005e 43F01003 		orr	r3, r3, #16
 11824 0062 E375     		strb	r3, [r4, #23]
 11825              	.LVL1388:
 11826              	.L1150:
2878:src/display.c ****       }
 11827              		.loc 1 2878 21 view .LVU3824
 11828              	.LBE617:
 11829              	.LBE619:
 11830              	.LBE620:
 269:src/display.c **** 
 11831              		.loc 1 269 1 view .LVU3825
 11832 0064 38BD     		pop	{r3, r4, r5, pc}
 11833              	.LVL1389:
 11834              	.L1160:
 11835              	.LBB621:
 229:src/display.c ****     if (*q == '\0')
 11836              		.loc 1 229 17 view .LVU3826
 11837 0066 411C     		adds	r1, r0, #1
 11838 0068 DAE7     		b	.L1152
 11839              	.L1162:
 11840 006a 00BF     		.align	2
 11841              	.L1161:
 11842 006c 00000000 		.word	Running
 11843 0070 00000000 		.word	.LANCHOR26
 11844 0074 00000000 		.word	.LANCHOR25
 11845 0078 00000000 		.word	StateWhileOn
 11846 007c 00000000 		.word	.LANCHOR27
 11847 0080 00000000 		.word	LastDisplayedNumber
 11848 0084 00000000 		.word	DispMsg
 11849              	.LBE621:
 11850              		.cfi_endproc
 11851              	.LFE1:
 11853              		.section	.rodata.str1.4,"aMS",%progbits,1
 11854              		.align	2
 11855              	.LC43:
 11856 0000 06316306 		.ascii	"\0061c\006\006\000"
 11856      0600
 11857 0006 0000     		.align	2
 11858              	.LC44:
 11859 0008 756E0600 		.ascii	"un\006\000"
 11860              		.align	2
 11861              	.LC45:
ARM GAS  /tmp/ccobNVTR.s 			page 328


 11862 000c 736D00   		.ascii	"sm\000"
 11863              		.set	CSWTCH.311,CSWTCH.309
 11864 000f 00       		.align	2
 11865              	.LC46:
 11866 0010 20502072 		.ascii	" P r o g r a m \000"
 11866      206F2067 
 11866      20722061 
 11866      206D2000 
 11867              		.align	2
 11868              	.LC47:
 11869 0020 206F2072 		.ascii	" o r   d a t e \000"
 11869      20202064 
 11869      20612074 
 11869      20652000 
 11870              		.align	2
 11871              	.LC48:
 11872 0030 204F2070 		.ascii	" O p - c o d e \000"
 11872      202D2063 
 11872      206F2064 
 11872      20652000 
 11873              		.align	2
 11874              	.LC49:
 11875 0040 204C2061 		.ascii	" L a b e l \000"
 11875      20622065 
 11875      206C2000 
 11876              		.align	2
 11877              	.LC50:
 11878 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11878      20652072 
 11878      20612074 
 11878      2069206F 
 11878      206E2000 
 11879              		.align	2
 11880              	.LC51:
 11881 0060 20462075 		.ascii	" F u l l \000"
 11881      206C206C 
 11881      2000
 11882 006a 0000     		.align	2
 11883              	.LC52:
 11884 006c 2043206C 		.ascii	" C l a s h \000"
 11884      20612073 
 11884      20682000 
 11885              		.align	2
 11886              	.LC53:
 11887 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11887      206F2020 
 11887      2073206D 
 11887      2061206C 
 11887      206C2000 
 11888              		.align	2
 11889              	.LC54:
 11890 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11890      20742061 
 11890      20202070 
 11890      206F2069 
 11890      206E2074 
 11891              		.align	2
ARM GAS  /tmp/ccobNVTR.s 			page 329


 11892              	.LC55:
 11893 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11893      20722061 
 11893      206D2065 
 11893      20742065 
 11893      20722000 
 11894              		.align	2
 11895              	.LC56:
 11896 00b8 20442061 		.ascii	" D a t a \000"
 11896      20742061 
 11896      2000
 11897 00c2 0000     		.align	2
 11898              	.LC57:
 11899 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11899      206F2074 
 11899      20652063 
 11899      20742065 
 11899      20642000 
 11900              		.align	2
 11901              	.LC58:
 11902 00d8 2046206F 		.ascii	" F o u n d \000"
 11902      2075206E 
 11902      20642000 
 11903              		.align	2
 11904              	.LC59:
 11905 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11905      2073206D 
 11905      20612074 
 11905      20632068 
 11905      2000
 11906 00f6 0000     		.align	2
 11907              	.LC60:
 11908 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11908      20732074 
 11908      2061206C 
 11908      206C2065 
 11908      20642000 
 11909              		.global	DIGITS
 11910              		.comm	IoAnnunciator,4,4
 11911              		.comm	IntMaxWindow,4,4
 11912              		.comm	JustDisplayed,4,4
 11913              		.comm	ShowRPN,4,4
 11914              		.comm	forceDispPlot,1,1
 11915              		.comm	LastDisplayedExponent,5,4
 11916              		.comm	LastDisplayedNumber,26,4
 11917              		.comm	LastDisplayedText,31,4
 11918              		.comm	DispPlot,2,2
 11919              		.comm	DispMsg,4,4
 11920              		.global	SvnRevision
 11921              		.section	.rodata
 11922              		.align	2
 11923              		.set	.LANCHOR17,. + 0
 11924              	.LC18:
 11925 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 11925      22002E00 
 11925      00
 11926 0009 000000   		.space	3
ARM GAS  /tmp/ccobNVTR.s 			page 330


 11927              	.LC22:
 11928 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11928      332E3306 
 11928      0600
 11929 0016 00000000 		.space	4
 11930 001a 0000     		.space	2
 11931              	.LC61:
 11932 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11932      696E6700 
 11932      50726F47 
 11932      72614D6D 
 11932      00
 11933 002d 000000   		.space	3
 11934              	.LC62:
 11935 0030 446F6D61 		.ascii	"Domain\000\000"
 11935      696E0000 
 11936              	.LC63:
 11937 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 11937      74696D65 
 11937      006F7220 
 11937      64417445 
 11937      00
 11938 0049 000000   		.space	3
 11939              	.LC64:
 11940 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11940      66696E65 
 11940      64004F70 
 11940      2D434F64 
 11940      4500
 11941 005e 0000     		.space	2
 11942              	.LC65:
 11943 0060 2B9F0000 		.ascii	"+\237\000\000"
 11944              	.LC66:
 11945 0064 2D9F0000 		.ascii	"-\237\000\000"
 11946              	.LC67:
 11947 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11947      75636800 
 11947      4C416245 
 11947      4C00
 11948 0076 0000     		.space	2
 11949              	.LC68:
 11950 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11950      67616C00 
 11950      4F504572 
 11950      4174696F 
 11950      6E00
 11951 008a 0000     		.space	2
 11952              	.LC69:
 11953 008c 4F757420 		.ascii	"Out of range\000\000"
 11953      6F662072 
 11953      616E6765 
 11953      0000
 11954 009a 0000     		.space	2
 11955              	.LC70:
 11956 009c 42616420 		.ascii	"Bad digit\000\000"
 11956      64696769 
 11956      740000
ARM GAS  /tmp/ccobNVTR.s 			page 331


 11957 00a7 00       		.space	1
 11958              	.LC71:
 11959 00a8 546F6F20 		.ascii	"Too long\000\000"
 11959      6C6F6E67 
 11959      0000
 11960 00b2 0000     		.space	2
 11961              	.LC72:
 11962 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11962      69730046 
 11962      754C4C00 
 11963              	.LC73:
 11964 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11964      6B00434C 
 11964      41534800 
 11965              	.LC74:
 11966 00cc 42616420 		.ascii	"Bad mode\000\000"
 11966      6D6F6465 
 11966      0000
 11967 00d6 0000     		.space	2
 11968              	.LC75:
 11969 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 11969      06060673 
 11969      697A6500 
 11969      746F6F20 
 11969      534D6D41 
 11970 00ef 00       		.space	1
 11971              	.LC76:
 11972 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 11972      66657700 
 11972      64417441 
 11972      20506F69 
 11972      6E745300 
 11973              	.LC77:
 11974 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 11974      6C696400 
 11974      50617261 
 11974      4D6D4574 
 11974      457200
 11975 0117 00       		.space	1
 11976              	.LC78:
 11977 0118 492F4F00 		.ascii	"I/O\000\000"
 11977      00
 11978 011d 000000   		.space	3
 11979              	.LC79:
 11980 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 11980      6C696400 
 11980      64417441 
 11980      00
 11981 012d 000000   		.space	3
 11982              	.LC80:
 11983 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 11983      65005072 
 11983      6F744563 
 11983      74456400 
 11984              	.LC81:
 11985 0140 4E6F2072 		.ascii	"No root\000Found\000"
 11985      6F6F7400 
ARM GAS  /tmp/ccobNVTR.s 			page 332


 11985      466F756E 
 11985      6400
 11986 014e 0000     		.space	2
 11987              	.LC82:
 11988 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 11988      6978004D 
 11988      6D49534D 
 11988      6D417443 
 11988      4800
 11989 0162 0000     		.space	2
 11990              	.LC83:
 11991 0164 53696E67 		.ascii	"Singular\000\000"
 11991      756C6172 
 11991      0000
 11992 016e 0000     		.space	2
 11993              	.LC84:
 11994 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 11994      68206973 
 11994      0046754C 
 11994      4C00
 11995 017e 0000     		.space	2
 11996              	.LC85:
 11997 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 11997      72797374 
 11997      616C0049 
 11997      6E537461 
 11997      4C4C4564 
 11998 0195 000000   		.space	3
 11999              	.LC86:
 12000 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12000      5800
 12001              		.section	.bss.DecimalMode,"aw",%nobits
 12002              		.set	.LANCHOR1,. + 0
 12005              	DecimalMode:
 12006 0000 00       		.space	1
 12007              		.section	.bss.SeparatorMode,"aw",%nobits
 12008              		.set	.LANCHOR0,. + 0
 12011              	SeparatorMode:
 12012 0000 00       		.space	1
 12013              		.section	.rodata.CSWTCH.309,"a"
 12014              		.align	2
 12015              		.set	.LANCHOR11,. + 0
 12018              	CSWTCH.309:
 12019 0000 02000000 		.word	2
 12020 0004 08000000 		.word	8
 12021 0008 0A000000 		.word	10
 12022 000c 10000000 		.word	16
 12023              		.section	.rodata.CSWTCH.335,"a"
 12024              		.align	2
 12025              		.set	.LANCHOR16,. + 0
 12028              	CSWTCH.335:
 12029 0000 00000000 		.word	.LC43
 12030 0004 08000000 		.word	.LC44
 12031 0008 0C000000 		.word	.LC45
 12032              		.section	.rodata.DIGITS,"a"
 12033              		.align	2
 12034              		.set	.LANCHOR12,. + 0
ARM GAS  /tmp/ccobNVTR.s 			page 333


 12037              	DIGITS:
 12038 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12038      34353637 
 12038      38394142 
 12038      43444546 
 12038      00
 12039              		.section	.rodata.S7_ERROR,"a"
 12040              		.align	2
 12041              		.set	.LANCHOR25,. + 0
 12044              	S7_ERROR:
 12045 0000 4572726F 		.ascii	"Error\000"
 12045      7200
 12046              		.section	.rodata.S7_INF,"a"
 12047              		.align	2
 12048              		.set	.LANCHOR5,. + 0
 12051              	S7_INF:
 12052 0000 496E6669 		.ascii	"Infinity\000"
 12052      6E697479 
 12052      00
 12053              		.section	.rodata.S7_INF_Text,"a"
 12054              		.align	2
 12055              		.set	.LANCHOR7,. + 0
 12058              	S7_INF_Text:
 12059 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12059      20662069 
 12059      206E2069 
 12059      20742079 
 12059      2000
 12060              		.section	.rodata.S7_NEG_INF_Text,"a"
 12061              		.align	2
 12062              		.set	.LANCHOR6,. + 0
 12065              	S7_NEG_INF_Text:
 12066 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12066      20662069 
 12066      206E2069 
 12066      20742079 
 12066      2000
 12067              		.section	.rodata.S7_NaN,"a"
 12068              		.align	2
 12069              		.set	.LANCHOR3,. + 0
 12072              	S7_NaN:
 12073 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12073      6E754D6D 
 12073      45726963 
 12073      00
 12074              		.section	.rodata.S7_NaN_Text,"a"
 12075              		.align	2
 12076              		.set	.LANCHOR4,. + 0
 12079              	S7_NaN_Text:
 12080 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12080      20742020 
 12080      206E2075 
 12080      206D2065 
 12080      20722069 
 12081              		.section	.rodata.S7_STEP,"a"
 12082              		.align	2
 12083              		.set	.LANCHOR24,. + 0
ARM GAS  /tmp/ccobNVTR.s 			page 334


 12086              	S7_STEP:
 12087 0000 53744550 		.ascii	"StEP \000"
 12087      2000
 12088              		.section	.rodata.S7_STEP_ShortText,"a"
 12089              		.align	2
 12090              		.set	.LANCHOR18,. + 0
 12093              	S7_STEP_ShortText:
 12094 0000 53544550 		.ascii	"STEP\000"
 12094      00
 12095              		.section	.rodata.S7_fract_EQ,"a"
 12096              		.align	2
 12097              		.set	.LANCHOR9,. + 0
 12100              	S7_fract_EQ:
 12101 0000 203D2000 		.ascii	" = \000"
 12102              		.section	.rodata.S7_fract_GT,"a"
 12103              		.align	2
 12104              		.set	.LANCHOR10,. + 0
 12107              	S7_fract_GT:
 12108 0000 20477400 		.ascii	" Gt\000"
 12109              		.section	.rodata.S7_fract_LT,"a"
 12110              		.align	2
 12111              		.set	.LANCHOR8,. + 0
 12114              	S7_fract_LT:
 12115 0000 204C7400 		.ascii	" Lt\000"
 12116              		.section	.rodata.S_SURE,"a"
 12117              		.align	2
 12118              		.set	.LANCHOR20,. + 0
 12121              	S_SURE:
 12122 0000 53757265 		.ascii	"Sure?\000"
 12122      3F00
 12123              		.section	.rodata.SvnRevision,"a"
 12124              		.align	2
 12125              		.set	.LANCHOR19,. + 0
 12128              	SvnRevision:
 12129 0000 30202020 		.ascii	"0   "
 12130              		.section	.rodata.digtbl,"a"
 12131              		.align	2
 12132              		.set	.LANCHOR2,. + 0
 12135              	digtbl:
 12136 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12136      02421252 
 12136      2D000000 
 12136      00000000 
 12136      00
 12137 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12137      00000017 
 12137      01000000 
 12137      00
 12138 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12138      28000000 
 12138      0020664B 
 12138      00000010 
 12139 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12139      5E5B3973 
 12139      77497F7B 
 12139      00000612 
 12139      0300787D 
ARM GAS  /tmp/ccobNVTR.s 			page 335


 12140 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12140      673D240F 
 12140      75266C6D 
 12140      6F7C7914 
 12140      73362F00 
 12141 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12141      161F7674 
 12141      6735040F 
 12141      75266915 
 12141      177C7914 
 12142 0076 000F003B 		.ascii	"\000\017\000;"
 12143              		.section	.rodata.error_table.8492,"a"
 12144              		.align	2
 12145              		.set	.LANCHOR26,. + 0
 12148              	error_table.8492:
 12149 0000 1C000000 		.word	.LC61
 12150 0004 30000000 		.word	.LC62
 12151 0008 38000000 		.word	.LC63
 12152 000c 4C000000 		.word	.LC64
 12153 0010 60000000 		.word	.LC65
 12154 0014 64000000 		.word	.LC66
 12155 0018 68000000 		.word	.LC67
 12156 001c 78000000 		.word	.LC68
 12157 0020 8C000000 		.word	.LC69
 12158 0024 9C000000 		.word	.LC70
 12159 0028 A8000000 		.word	.LC71
 12160 002c B4000000 		.word	.LC72
 12161 0030 C0000000 		.word	.LC73
 12162 0034 CC000000 		.word	.LC74
 12163 0038 D8000000 		.word	.LC75
 12164 003c F0000000 		.word	.LC76
 12165 0040 04010000 		.word	.LC77
 12166 0044 18010000 		.word	.LC78
 12167 0048 20010000 		.word	.LC79
 12168 004c 30010000 		.word	.LC80
 12169 0050 40010000 		.word	.LC81
 12170 0054 50010000 		.word	.LC82
 12171 0058 64010000 		.word	.LC83
 12172 005c 70010000 		.word	.LC84
 12173 0060 80010000 		.word	.LC85
 12174 0064 98010000 		.word	.LC86
 12175              		.section	.rodata.error_table_text.8493,"a"
 12176              		.align	2
 12177              		.set	.LANCHOR27,. + 0
 12180              	error_table_text.8493:
 12181 0000 10000000 		.word	.LC46
 12182 0004 A8000000 		.word	.LC41
 12183 0008 20000000 		.word	.LC47
 12184 000c 30000000 		.word	.LC48
 12185 0010 A8000000 		.word	.LC41
 12186 0014 A8000000 		.word	.LC41
 12187 0018 40000000 		.word	.LC49
 12188 001c 4C000000 		.word	.LC50
 12189 0020 A8000000 		.word	.LC41
 12190 0024 A8000000 		.word	.LC41
 12191 0028 A8000000 		.word	.LC41
 12192 002c 60000000 		.word	.LC51
ARM GAS  /tmp/ccobNVTR.s 			page 336


 12193 0030 6C000000 		.word	.LC52
 12194 0034 A8000000 		.word	.LC41
 12195 0038 78000000 		.word	.LC53
 12196 003c 8C000000 		.word	.LC54
 12197 0040 A4000000 		.word	.LC55
 12198 0044 A8000000 		.word	.LC41
 12199 0048 B8000000 		.word	.LC56
 12200 004c C4000000 		.word	.LC57
 12201 0050 D8000000 		.word	.LC58
 12202 0054 E4000000 		.word	.LC59
 12203 0058 A8000000 		.word	.LC41
 12204 005c 60000000 		.word	.LC51
 12205 0060 F8000000 		.word	.LC60
 12206 0064 A8000000 		.word	.LC41
 12207              		.section	.rodata.libname,"a"
 12208              		.align	2
 12209              		.set	.LANCHOR21,. + 0
 12212              	libname:
 12213 0000 72414D6D 		.ascii	"rAMm\000"
 12213      00
 12214 0005 4C696220 		.ascii	"Lib \000"
 12214      00
 12215 000a 42757020 		.ascii	"Bup \000"
 12215      00
 12216 000f 726F4D6D 		.ascii	"roMm\000"
 12216      00
 12217              		.section	.rodata.libname_shorttext,"a"
 12218              		.align	2
 12219              		.set	.LANCHOR23,. + 0
 12222              	libname_shorttext:
 12223 0000 52616D00 		.ascii	"Ram\000"
 12224 0004 00       		.space	1
 12225 0005 4C696200 		.ascii	"Lib\000"
 12226 0009 00       		.space	1
 12227 000a 42757000 		.ascii	"Bup\000"
 12228 000e 00       		.space	1
 12229 000f 526F6D00 		.ascii	"Rom\000"
 12230 0013 00       		.space	1
 12231              		.section	.rodata.libname_text,"a"
 12232              		.align	2
 12233              		.set	.LANCHOR22,. + 0
 12236              	libname_text:
 12237 0000 20522061 		.ascii	" R a m \000"
 12237      206D2000 
 12238 0008 0000     		.space	2
 12239 000a 204C2069 		.ascii	" L i b \000"
 12239      20622000 
 12240 0012 0000     		.space	2
 12241 0014 20422075 		.ascii	" B u p \000"
 12241      20702000 
 12242 001c 0000     		.space	2
 12243 001e 2052206F 		.ascii	" R o m \000"
 12243      206D2000 
 12244 0026 0000     		.space	2
 12245              		.section	.rodata.shift_chars.8591,"a"
 12246              		.align	2
 12247              		.set	.LANCHOR15,. + 0
ARM GAS  /tmp/ccobNVTR.s 			page 337


 12250              	shift_chars.8591:
 12251 0000 20111213 		.ascii	" \021\022\023"
 12252              		.section	.rodata.small_dots.8778,"a"
 12253              		.align	2
 12254              		.set	.LANCHOR14,. + 0
 12257              	small_dots.8778:
 12258 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12258      07E12C06 
 12258      07E12C06 
 12258      06
 12259              		.section	.rodata.small_minus.8777,"a"
 12260              		.align	2
 12261              		.set	.LANCHOR13,. + 0
 12264              	small_minus.8777:
 12265 0000 07C22D06 		.ascii	"\007\302-\006"
 12266              		.text
 12267              	.Letext0:
 12268              		.file 2 "src/decNumber/decContext.h"
 12269              		.file 3 "src/decNumber/decNumber.h"
 12270              		.file 4 "src/decNumber/decimal64.h"
 12271              		.file 5 "src/decNumber/decimal128.h"
 12272              		.file 6 "src/xeq.h"
 12273              		.file 7 "src/data.h"
 12274              		.file 8 "src/storage.h"
 12275              		.file 9 "src/display.h"
 12276              		.file 10 "src/consts.h"
 12277              		.file 11 "src/stats.h"
 12278              		.file 12 "src/revision.h"
 12279              		.file 13 "src/charset7.h"
 12280              		.file 14 "src/lcd.h"
 12281              		.file 15 "src/decn.h"
 12282              		.file 16 "src/alpha.h"
 12283              		.file 17 "src/int.h"
ARM GAS  /tmp/ccobNVTR.s 			page 338


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccobNVTR.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccobNVTR.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccobNVTR.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccobNVTR.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccobNVTR.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccobNVTR.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccobNVTR.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccobNVTR.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccobNVTR.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccobNVTR.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccobNVTR.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccobNVTR.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccobNVTR.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccobNVTR.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccobNVTR.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccobNVTR.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccobNVTR.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccobNVTR.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccobNVTR.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/ccobNVTR.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/ccobNVTR.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/ccobNVTR.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccobNVTR.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccobNVTR.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccobNVTR.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/ccobNVTR.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccobNVTR.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/ccobNVTR.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/ccobNVTR.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccobNVTR.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccobNVTR.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccobNVTR.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccobNVTR.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccobNVTR.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/ccobNVTR.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccobNVTR.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccobNVTR.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/ccobNVTR.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccobNVTR.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/ccobNVTR.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccobNVTR.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccobNVTR.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/ccobNVTR.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccobNVTR.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/ccobNVTR.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/ccobNVTR.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccobNVTR.s:3754   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.309:0000000000000000 CSWTCH.311
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccobNVTR.s:3764   .text.set_int_x:0000000000000360 $t
     /tmp/ccobNVTR.s:3814   .text.set_int_x:0000000000000390 $d
ARM GAS  /tmp/ccobNVTR.s 			page 339


     /tmp/ccobNVTR.s:3820   .text.set_annunciators:0000000000000000 $t
     /tmp/ccobNVTR.s:3827   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccobNVTR.s:4200   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccobNVTR.s:4212   .text.getdig:0000000000000000 $t
     /tmp/ccobNVTR.s:4220   .text.getdig:0000000000000000 getdig
     /tmp/ccobNVTR.s:4240   .text.getdig:0000000000000008 $d
     /tmp/ccobNVTR.s:4245   .text.dot:0000000000000000 $t
     /tmp/ccobNVTR.s:4253   .text.dot:0000000000000000 dot
     /tmp/ccobNVTR.s:4276   .text.std_round_fix:0000000000000000 $t
     /tmp/ccobNVTR.s:4284   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccobNVTR.s:4366   .text.std_round_fix:000000000000004c $d
     /tmp/ccobNVTR.s:4372   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccobNVTR.s:4380   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccobNVTR.s:4440   .text.set_IO_annunciator:000000000000001c $d
     /tmp/ccobNVTR.s:4447   .text.pixel_length:0000000000000000 $t
     /tmp/ccobNVTR.s:4455   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccobNVTR.s:4546   .text.set_status:0000000000000000 $t
     /tmp/ccobNVTR.s:4553   .text.set_status:0000000000000000 set_status
     /tmp/ccobNVTR.s:4626   .text.set_status:0000000000000038 $d
     /tmp/ccobNVTR.s:4631   .text.set_x_dn:0000000000000000 $t
     /tmp/ccobNVTR.s:4639   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccobNVTR.s:5407   .text.set_x_dn:0000000000000328 $d
     /tmp/ccobNVTR.s:5416   .text.set_x_dn:000000000000033c $t
     /tmp/ccobNVTR.s:5535   .text.set_x_dn:00000000000003dc $d
     /tmp/ccobNVTR.s:5541   .text.set_x_dn:00000000000003f0 $t
     /tmp/ccobNVTR.s:5568   .text.set_x_dn:000000000000041c $d
     /tmp/ccobNVTR.s:5574   .text.set_x_dn:0000000000000426 $t
     /tmp/ccobNVTR.s:6079   .text.set_x_dn:0000000000000644 $d
     /tmp/ccobNVTR.s:6095   .text.set_x_dn:0000000000000660 $t
     /tmp/ccobNVTR.s:6809   .text.set_x_dn:0000000000000950 $d
     /tmp/ccobNVTR.s:6818   .text.set_x:0000000000000000 $t
     /tmp/ccobNVTR.s:6825   .text.set_x:0000000000000000 set_x
     /tmp/ccobNVTR.s:6893   .text.format_reg:0000000000000000 $t
     /tmp/ccobNVTR.s:6901   .text.format_reg:0000000000000000 format_reg
     /tmp/ccobNVTR.s:7020   .text.format_reg:0000000000000064 $d
     /tmp/ccobNVTR.s:7026   .text.set_status_right:0000000000000000 $t
     /tmp/ccobNVTR.s:7033   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccobNVTR.s:7177   .text.set_status_right:000000000000006c $d
     /tmp/ccobNVTR.s:7182   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccobNVTR.s:7231   .text.annunciators:0000000000000000 $t
     /tmp/ccobNVTR.s:7238   .text.annunciators:0000000000000000 annunciators
     /tmp/ccobNVTR.s:7947   .text.annunciators:00000000000002fc $d
     /tmp/ccobNVTR.s:7965   .text.annunciators:0000000000000334 $t
     /tmp/ccobNVTR.s:8255   .text.annunciators:0000000000000468 $d
     /tmp/ccobNVTR.s:8272   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccobNVTR.s:8339   .text.display:0000000000000000 $t
     /tmp/ccobNVTR.s:8347   .text.display:0000000000000000 display
     /tmp/ccobNVTR.s:9021   .text.display:0000000000000300 $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccobNVTR.s:9039   .text.display:0000000000000334 $t
     /tmp/ccobNVTR.s:9738   .text.display:000000000000063c $d
     /tmp/ccobNVTR.s:9768   .text.display:0000000000000694 $t
     /tmp/ccobNVTR.s:10615  .text.display:00000000000009c8 $d
     /tmp/ccobNVTR.s:10632  .text.display:00000000000009fc $t
ARM GAS  /tmp/ccobNVTR.s 			page 340


     /tmp/ccobNVTR.s:11366  .text.display:0000000000000d10 $d
     /tmp/ccobNVTR.s:11387  .text.display:0000000000000d4c $t
     /tmp/ccobNVTR.s:11492  .text.display:0000000000000db0 $d
     /tmp/ccobNVTR.s:11503  .text.frozen_display:0000000000000000 $t
     /tmp/ccobNVTR.s:11511  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccobNVTR.s:11541  .text.frozen_display:000000000000001c $d
     /tmp/ccobNVTR.s:11546  .text.message:0000000000000000 $t
     /tmp/ccobNVTR.s:11554  .text.message:0000000000000000 message
     /tmp/ccobNVTR.s:11683  .text.message:0000000000000060 $d
     /tmp/ccobNVTR.s:11691  .text.error_message:0000000000000000 $t
     /tmp/ccobNVTR.s:11699  .text.error_message:0000000000000000 error_message
     /tmp/ccobNVTR.s:11842  .text.error_message:000000000000006c $d
     /tmp/ccobNVTR.s:11854  .rodata.str1.4:0000000000000000 $d
     /tmp/ccobNVTR.s:12018  .rodata.CSWTCH.309:0000000000000000 CSWTCH.309
     /tmp/ccobNVTR.s:12037  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccobNVTR.s:12128  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccobNVTR.s:11922  .rodata:0000000000000000 $d
     /tmp/ccobNVTR.s:12005  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccobNVTR.s:12006  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccobNVTR.s:12011  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccobNVTR.s:12012  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccobNVTR.s:12014  .rodata.CSWTCH.309:0000000000000000 $d
     /tmp/ccobNVTR.s:12024  .rodata.CSWTCH.335:0000000000000000 $d
     /tmp/ccobNVTR.s:12028  .rodata.CSWTCH.335:0000000000000000 CSWTCH.335
     /tmp/ccobNVTR.s:12033  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccobNVTR.s:12040  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccobNVTR.s:12044  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccobNVTR.s:12047  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccobNVTR.s:12051  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccobNVTR.s:12054  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccobNVTR.s:12058  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccobNVTR.s:12061  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccobNVTR.s:12065  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccobNVTR.s:12068  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccobNVTR.s:12072  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccobNVTR.s:12075  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccobNVTR.s:12079  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccobNVTR.s:12082  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccobNVTR.s:12086  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccobNVTR.s:12089  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccobNVTR.s:12093  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccobNVTR.s:12096  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccobNVTR.s:12100  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccobNVTR.s:12103  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccobNVTR.s:12107  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccobNVTR.s:12110  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccobNVTR.s:12114  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccobNVTR.s:12117  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccobNVTR.s:12121  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccobNVTR.s:12124  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccobNVTR.s:12131  .rodata.digtbl:0000000000000000 $d
     /tmp/ccobNVTR.s:12135  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccobNVTR.s:12144  .rodata.error_table.8492:0000000000000000 $d
     /tmp/ccobNVTR.s:12148  .rodata.error_table.8492:0000000000000000 error_table.8492
     /tmp/ccobNVTR.s:12176  .rodata.error_table_text.8493:0000000000000000 $d
     /tmp/ccobNVTR.s:12180  .rodata.error_table_text.8493:0000000000000000 error_table_text.8493
ARM GAS  /tmp/ccobNVTR.s 			page 341


     /tmp/ccobNVTR.s:12208  .rodata.libname:0000000000000000 $d
     /tmp/ccobNVTR.s:12212  .rodata.libname:0000000000000000 libname
     /tmp/ccobNVTR.s:12218  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccobNVTR.s:12222  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccobNVTR.s:12232  .rodata.libname_text:0000000000000000 $d
     /tmp/ccobNVTR.s:12236  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccobNVTR.s:12246  .rodata.shift_chars.8591:0000000000000000 $d
     /tmp/ccobNVTR.s:12250  .rodata.shift_chars.8591:0000000000000000 shift_chars.8591
     /tmp/ccobNVTR.s:12253  .rodata.small_dots.8778:0000000000000000 $d
     /tmp/ccobNVTR.s:12257  .rodata.small_dots.8778:0000000000000000 small_dots.8778
     /tmp/ccobNVTR.s:12260  .rodata.small_minus.8777:0000000000000000 $d
     /tmp/ccobNVTR.s:12264  .rodata.small_minus.8777:0000000000000000 small_minus.8777

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
ARM GAS  /tmp/ccobNVTR.s 			page 342


get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
global_regs
local_regs
ARM GAS  /tmp/ccobNVTR.s 			page 343


SizeStatRegs

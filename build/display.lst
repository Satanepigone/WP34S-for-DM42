ARM GAS  /tmp/ccKZqSeG.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #ifdef DM42
  18:src/display.c **** #include "dmcp.h"
  19:src/display.c **** #endif
  20:src/display.c **** 
  21:src/display.c **** #define DM42SAFE
  22:src/display.c **** 
  23:src/display.c **** #include "features.h"
  24:src/display.c **** #include "xeq.h" 
  25:src/display.c **** #include "storage.h"
  26:src/display.c **** #include "display.h"
  27:src/display.c **** #include "lcd.h"
  28:src/display.c **** #include "int.h"
  29:src/display.c **** #include "consts.h"
  30:src/display.c **** #include "alpha.h"
ARM GAS  /tmp/ccKZqSeG.s 			page 2


  31:src/display.c **** #include "stats.h"
  32:src/display.c **** #include "decn.h"
  33:src/display.c **** #include "revision.h"
  34:src/display.c **** #ifdef INFRARED
  35:src/display.c **** #include "printer.h"
  36:src/display.c **** #endif
  37:src/display.c **** #ifndef DM42
  38:src/display.c **** #include "serial.h"
  39:src/display.c **** #endif
  40:src/display.c **** #undef DM42SAFE
  41:src/display.c **** 
  42:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  43:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  44:src/display.c **** 
  45:src/display.c **** static void set_status_sized(const char *, int);
  46:src/display.c **** static void set_status_sized_top(const char *, int);
  47:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  48:src/display.c **** 
  49:src/display.c **** static void set_status(const char *);
  50:src/display.c **** static void set_status_top(const char *);
  51:src/display.c **** #ifdef TOP_ROW
  52:src/display.c **** static void set_status_top_always(const char *);
  53:src/display.c **** #endif
  54:src/display.c **** 
  55:src/display.c **** static void set_status_right(const char *);
  56:src/display.c **** static void set_status_graphic(const unsigned char *);
  57:src/display.c **** 
  58:src/display.c **** static void set_int_x(const long long int value, char *res);
  59:src/display.c **** 
  60:src/display.c **** const char *DispMsg; // What to display in message area
  61:src/display.c **** 
  62:src/display.c **** short int DispPlot;
  63:src/display.c **** short int no_status_top = 0;
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** //FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  79:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  80:src/display.c **** 
  81:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  82:src/display.c **** static const char S7_fract_LT[] = " Lt";
  83:src/display.c **** static const char S7_fract_GT[] = " Gt";
  84:src/display.c **** 
  85:src/display.c **** static const char libname[][5] = {
  86:src/display.c ****   "rAMm", "Lib ", "Bup ",
  87:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccKZqSeG.s 			page 3


  88:src/display.c ****   "roMm"
  89:src/display.c **** #endif
  90:src/display.c **** };
  91:src/display.c **** 
  92:src/display.c **** 
  93:src/display.c **** 
  94:src/display.c **** /* Set the separator and decimal mode globals
  95:src/display.c ****  */
  96:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 96 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  97:src/display.c ****   // Separators used by various modes
  98:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 98 3 view .LVU1
  35              		.loc 1 98 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
  99:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 99 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 98 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 98 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
  96:src/display.c ****   // Separators used by various modes
  44              		.loc 1 96 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
  98:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 98 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 99 5 is_stmt 1 view .LVU8
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 100 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 101:src/display.c ****   }
 102:src/display.c ****   else {
 103:src/display.c ****     SeparatorMode = SEP_COMMA;
 104:src/display.c ****     DecimalMode = DECIMAL_DOT;
 105:src/display.c ****   }
 106:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 106 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 100 17 view .LVU11
  57 0018 0124     		movs	r4, #1
  99:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 99 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccKZqSeG.s 			page 4


  60              		.loc 1 100 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 106 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
  99:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 99 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 100:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 100 5 is_stmt 1 view .LVU16
  67              		.loc 1 106 3 view .LVU17
  68              		.loc 1 106 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 106 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 107:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 107 5 is_stmt 1 view .LVU20
  76              		.loc 1 107 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 108:src/display.c **** }
  80              		.loc 1 108 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 103 5 is_stmt 1 view .LVU23
 104:src/display.c ****   }
  90              		.loc 1 104 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 106:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 106 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 104:src/display.c ****   }
  94              		.loc 1 104 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 103 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 106:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 106 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 103:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 103 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 104:src/display.c ****   }
 102              		.loc 1 104 5 is_stmt 1 view .LVU30
 106:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 106 3 view .LVU31
ARM GAS  /tmp/ccKZqSeG.s 			page 5


 106:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 106 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 106:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 106 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 108 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 109:src/display.c **** 
 110:src/display.c **** 
 111:src/display.c **** /* Table of error messages.
 112:src/display.c ****  * These consist of a double string.  The first is displayed in the
 113:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 114:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 115:src/display.c ****  */
 116:src/display.c **** void error_message(const unsigned int e) 
 117:src/display.c **** {
 118:src/display.c **** #define MSG1(top) top "\0"
 119:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 120:src/display.c **** 
 121:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 122:src/display.c ****   static const char *const error_table[] = 
 123:src/display.c ****     {
 124:src/display.c ****       // manually get the order correct!
 125:src/display.c ****       MSG2("Running", "ProGraMm"),
 126:src/display.c ****       MSG1("Domain"),
 127:src/display.c ****       MSG2("Bad time", "or dAtE"),
 128:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 129:src/display.c ****       MSG1("+\237"),
 130:src/display.c ****       MSG1("-\237"),
 131:src/display.c ****       MSG2("No such", "LAbEL"),
 132:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 133:src/display.c ****       MSG1("Out of range"),
ARM GAS  /tmp/ccKZqSeG.s 			page 6


 134:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 135:src/display.c ****       MSG2("Bad digit", "1"),
 136:src/display.c ****       MSG2("Too long", "1"),
 137:src/display.c **** #else
 138:src/display.c ****       MSG1("Bad digit"),
 139:src/display.c ****       MSG1("Too long"),
 140:src/display.c **** #endif
 141:src/display.c ****       MSG2("RAM is", "FuLL"),
 142:src/display.c ****       MSG2("Stack", "CLASH"),
 143:src/display.c ****       MSG1("Bad mode"),
 144:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 145:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 146:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 147:src/display.c ****       MSG1("I/O"),
 148:src/display.c ****       MSG2("Invalid", "dAtA"),
 149:src/display.c ****       MSG2("Write", "ProtEctEd"),
 150:src/display.c ****       MSG2("No root", "Found"),
 151:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 152:src/display.c ****       MSG1("Singular"),
 153:src/display.c ****       MSG2("Flash is", "FuLL"),
 154:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 155:src/display.c **** #ifndef SHIFT_EXPONENT
 156:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 157:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 158:src/display.c ****       MSG2("Too\007\304 small", "1"),
 159:src/display.c **** #     else
 160:src/display.c ****       MSG2("Too small", "1"),
 161:src/display.c **** #     endif
 162:src/display.c ****       MSG2("Too big", "1"),
 163:src/display.c **** #  else
 164:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 165:src/display.c ****       MSG1("Too\007\304 small"),
 166:src/display.c **** #     else
 167:src/display.c ****       MSG1("Too small"),
 168:src/display.c **** #     endif
 169:src/display.c ****       MSG1("Too big"),
 170:src/display.c **** #  endif
 171:src/display.c **** #endif
 172:src/display.c **** #ifdef INCLUDE_C_LOCK
 173:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 174:src/display.c **** #endif
 175:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 176:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 177:src/display.c ****       MSG2("Interrupted", "X"),
 178:src/display.c **** #endif
 179:src/display.c ****     };
 180:src/display.c **** #undef MSG1
 181:src/display.c **** #undef MSG2
 182:src/display.c **** 
 183:src/display.c ****   if (e != ERR_NONE || Running) {
 184:src/display.c ****     const char *p = error_table[e];
 185:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 186:src/display.c ****     if (*q == '\0')
 187:src/display.c ****       q = S7_ERROR;
 188:src/display.c ****     if (*q == 'X') {
 189:src/display.c ****       DispMsg = p;
 190:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccKZqSeG.s 			page 7


 191:src/display.c ****     }
 192:src/display.c ****     else {
 193:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 194:src/display.c ****       if (*q == '1')
 195:src/display.c **** 	q = CNULL;
 196:src/display.c **** #endif
 197:src/display.c ****       message(p, q);
 198:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 199:src/display.c ****     }
 200:src/display.c **** #ifdef INFRARED
 201:src/display.c ****     if (Tracing) {
 202:src/display.c ****       if (*q == 'X')
 203:src/display.c **** 	print_reg(regX_idx, p, 0);
 204:src/display.c ****       else {
 205:src/display.c **** 	print_tab(0);
 206:src/display.c **** 	print_line(p, 0);
 207:src/display.c **** 	print(' ');
 208:src/display.c **** 	while (*q != '\0') {
 209:src/display.c **** 	  int c = *q;
 210:src/display.c **** 	  if (c >= 'A')
 211:src/display.c **** 	    c |= 0x60; // ASCII lower case
 212:src/display.c **** 	  print(c);
 213:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 214:src/display.c **** 	    ++q;
 215:src/display.c **** 	  ++q;
 216:src/display.c **** 	}
 217:src/display.c **** 	print_advance( 0 );
 218:src/display.c ****       }
 219:src/display.c ****     }
 220:src/display.c **** #endif
 221:src/display.c ****   }
 222:src/display.c **** }
 223:src/display.c **** 
 224:src/display.c **** 
 225:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 226:src/display.c ****  * display.
 227:src/display.c ****  */
 228:src/display.c **** #define D_TOP 64
 229:src/display.c **** #define D_TL 32
 230:src/display.c **** #define D_TR 8
 231:src/display.c **** #define D_MIDDLE 16
 232:src/display.c **** #define D_BL 4
 233:src/display.c **** #define D_BR 1
 234:src/display.c **** #define D_BOTTOM 2
 235:src/display.c **** 
 236:src/display.c **** #include "charset7.h"
 237:src/display.c **** 
 238:src/display.c **** #ifndef REALBUILD
 239:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 240:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 241:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 242:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 243:src/display.c **** 
 244:src/display.c **** static void set_mant_sign_dot()
 245:src/display.c **** {
 246:src/display.c ****   set_dot(MANT_SIGN);
 247:src/display.c **** }
ARM GAS  /tmp/ccKZqSeG.s 			page 8


 248:src/display.c **** 
 249:src/display.c **** static void clr_mant_sign_dot()
 250:src/display.c **** {
 251:src/display.c ****   clr_dot(MANT_SIGN);
 252:src/display.c **** }
 253:src/display.c **** 
 254:src/display.c **** static void set_exp_sign_dot()
 255:src/display.c **** {
 256:src/display.c ****   set_dot(EXP_SIGN);
 257:src/display.c **** }
 258:src/display.c **** 
 259:src/display.c **** static void clr_exp_sign_dot()
 260:src/display.c **** {
 261:src/display.c ****   clr_dot(EXP_SIGN);
 262:src/display.c **** }
 263:src/display.c **** 
 264:src/display.c **** #else
 265:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 266:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 267:src/display.c **** 
 268:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 269:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 270:src/display.c **** 
 271:src/display.c **** #endif
 272:src/display.c **** 
 273:src/display.c **** #ifndef REALBUILD
 274:src/display.c **** int getdig(int ch)
 275:src/display.c **** #else
 276:src/display.c ****   static int getdig(int ch)
 277:src/display.c **** #endif
 278:src/display.c **** {
 279:src/display.c ****   // perform index lookup
 280:src/display.c ****   return digtbl[ch&0xff];
 281:src/display.c **** }
 282:src/display.c **** 
 283:src/display.c **** void dot(int n, int on) {
 284:src/display.c ****   if (on)	set_dot(n);
 285:src/display.c ****   else	clr_dot(n);
 286:src/display.c **** }
 287:src/display.c **** 
 288:src/display.c **** 
 289:src/display.c **** /* Set the decimal point *after* the indicated digit
 290:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 291:src/display.c ****  * of decimal.
 292:src/display.c ****  */
 293:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 294:src/display.c ****   if (res) {
 295:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 296:src/display.c ****   } else {
 297:src/display.c ****     set_dot(posn+7);
 298:src/display.c ****     if (decimal != DECIMAL_DOT)
 299:src/display.c ****       set_dot(posn+8);
 300:src/display.c ****   }
 301:src/display.c ****   return res;
 302:src/display.c **** }
 303:src/display.c **** 
 304:src/display.c **** /* Set the digit group separator *before* the specified digit.
ARM GAS  /tmp/ccKZqSeG.s 			page 9


 305:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 306:src/display.c ****  * sep argument.
 307:src/display.c ****  */
 308:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 309:src/display.c ****   if (sep == SEP_NONE)
 310:src/display.c ****     return res;
 311:src/display.c ****   if (res) {
 312:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 313:src/display.c ****     else *res++ = '.';
 314:src/display.c ****   } else {
 315:src/display.c ****     posn -= SEGS_PER_DIGIT;
 316:src/display.c ****     set_dot(posn+7);
 317:src/display.c ****     if (sep == SEP_COMMA)
 318:src/display.c ****       set_dot(posn+8);
 319:src/display.c ****   }
 320:src/display.c ****   return res;
 321:src/display.c **** }
 322:src/display.c **** 
 323:src/display.c **** /* Set a digit in positions [base, base+6] */
 324:src/display.c **** static void set_dig(int base, int ch)
 325:src/display.c **** {
 136              		.loc 1 325 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 326:src/display.c ****   int i;
 140              		.loc 1 326 3 view .LVU36
 327:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 327 3 view .LVU37
 142              	.LBB183:
 143              	.LBI183:
 274:src/display.c **** #else
 144              		.loc 1 274 5 view .LVU38
 145              	.LBB184:
 280:src/display.c **** }
 146              		.loc 1 280 3 view .LVU39
 280:src/display.c **** }
 147              		.loc 1 280 16 is_stmt 0 view .LVU40
 148 0000 0A4B     		ldr	r3, .L24
 280:src/display.c **** }
 149              		.loc 1 280 19 view .LVU41
 150 0002 C9B2     		uxtb	r1, r1
 151              	.LVL1:
 280:src/display.c **** }
 152              		.loc 1 280 19 view .LVU42
 153              	.LBE184:
 154              	.LBE183:
 325:src/display.c ****   int i;
 155              		.loc 1 325 1 view .LVU43
 156 0004 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB186:
 163              	.LBB185:
ARM GAS  /tmp/ccKZqSeG.s 			page 10


 280:src/display.c **** }
 164              		.loc 1 280 16 view .LVU44
 165 0006 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 166              	.LVL2:
 280:src/display.c **** }
 167              		.loc 1 280 16 view .LVU45
 168              	.LBE185:
 169              	.LBE186:
 328:src/display.c ****   for (i=6; i>=0; i--)
 170              		.loc 1 328 3 is_stmt 1 view .LVU46
 171              		.loc 1 328 13 view .LVU47
 172 0008 851D     		adds	r5, r0, #6
 173              		.loc 1 328 9 is_stmt 0 view .LVU48
 174 000a 0624     		movs	r4, #6
 175 000c 03E0     		b	.L19
 176              	.LVL3:
 177              	.L23:
 329:src/display.c ****     {
 330:src/display.c ****       //		dot(base, c & (1 << i));
 331:src/display.c ****       if (c & (1 << i))
 332:src/display.c **** 	set_dot(base);
 178              		.loc 1 332 2 view .LVU49
 179 000e FFF7FEFF 		bl	set_dot
 180              	.LVL4:
 333:src/display.c ****       else
 334:src/display.c **** 	clr_dot(base);
 335:src/display.c ****       base++;
 181              		.loc 1 335 7 is_stmt 1 view .LVU50
 328:src/display.c ****     {
 182              		.loc 1 328 19 view .LVU51
 328:src/display.c ****     {
 183              		.loc 1 328 3 is_stmt 0 view .LVU52
 184 0012 013C     		subs	r4, r4, #1
 185              	.LVL5:
 328:src/display.c ****     {
 186              		.loc 1 328 3 view .LVU53
 187 0014 09D3     		bcc	.L22
 188              	.LVL6:
 189              	.L19:
 332:src/display.c ****       else
 190              		.loc 1 332 2 is_stmt 1 view .LVU54
 334:src/display.c ****       base++;
 191              		.loc 1 334 2 view .LVU55
 331:src/display.c **** 	set_dot(base);
 192              		.loc 1 331 11 is_stmt 0 view .LVU56
 193 0016 46FA04F3 		asr	r3, r6, r4
 331:src/display.c **** 	set_dot(base);
 194              		.loc 1 331 10 view .LVU57
 195 001a DB07     		lsls	r3, r3, #31
 196 001c A5EB0400 		sub	r0, r5, r4
 197              	.LVL7:
 331:src/display.c **** 	set_dot(base);
 198              		.loc 1 331 7 is_stmt 1 view .LVU58
 331:src/display.c **** 	set_dot(base);
 199              		.loc 1 331 10 is_stmt 0 view .LVU59
 200 0020 F5D4     		bmi	.L23
 334:src/display.c ****       base++;
ARM GAS  /tmp/ccKZqSeG.s 			page 11


 201              		.loc 1 334 2 view .LVU60
 202 0022 FFF7FEFF 		bl	clr_dot
 203              	.LVL8:
 204              		.loc 1 335 7 is_stmt 1 view .LVU61
 328:src/display.c ****     {
 205              		.loc 1 328 19 view .LVU62
 328:src/display.c ****     {
 206              		.loc 1 328 3 is_stmt 0 view .LVU63
 207 0026 013C     		subs	r4, r4, #1
 208              	.LVL9:
 328:src/display.c ****     {
 209              		.loc 1 328 3 view .LVU64
 210 0028 F5D2     		bcs	.L19
 211              	.LVL10:
 212              	.L22:
 336:src/display.c ****     }
 337:src/display.c **** }
 213              		.loc 1 337 1 view .LVU65
 214 002a 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL11:
 216              	.L25:
 217              		.loc 1 337 1 view .LVU66
 218              		.align	2
 219              	.L24:
 220 002c 00000000 		.word	.LANCHOR2
 221              		.cfi_endproc
 222              	.LFE10:
 224              		.section	.text.hms_render,"ax",%progbits
 225              		.align	1
 226              		.p2align 2,,3
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	hms_render:
 233              	.LVL12:
 234              	.LFB21:
 338:src/display.c **** 
 339:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 340:src/display.c ****   if (res) *res++ = ch;
 341:src/display.c ****   else	set_dig(base, ch);
 342:src/display.c ****   return res;
 343:src/display.c **** }
 344:src/display.c **** 
 345:src/display.c **** 
 346:src/display.c **** static void set_digits_string(const char *msg, int j) {
 347:src/display.c ****   for (; *msg != '\0'; msg++) {
 348:src/display.c ****     if (*msg == '.' || *msg == ',')
 349:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 350:src/display.c ****     else {
 351:src/display.c ****       set_dig_s(j, *msg, CNULL);
 352:src/display.c ****       j += SEGS_PER_DIGIT;
 353:src/display.c ****     }
 354:src/display.c ****   }
 355:src/display.c **** }
 356:src/display.c **** 
 357:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
ARM GAS  /tmp/ccKZqSeG.s 			page 12


 358:src/display.c ****   int i;
 359:src/display.c ****   const int n = res == NULL ? 3 : 4;
 360:src/display.c **** 
 361:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 362:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 363:src/display.c **** }
 364:src/display.c **** 
 365:src/display.c **** /* Force the exponent display
 366:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 367:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 368:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 369:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 370:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 371:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 372:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 373:src/display.c ****  */
 374:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 375:src/display.c ****   union {
 376:src/display.c ****     char buf[4];
 377:src/display.c ****     int i;
 378:src/display.c ****   } u;
 379:src/display.c ****   int negative;
 380:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 381:src/display.c ****   int thousands;
 382:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 383:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 384:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 385:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 386:src/display.c **** #  else
 387:src/display.c ****   const int show_large_exponent = 1;
 388:src/display.c **** #  endif
 389:src/display.c **** #else
 390:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 391:src/display.c ****   int thousands;
 392:src/display.c **** #  endif
 393:src/display.c ****   const int show_large_exponent = 0;
 394:src/display.c **** #endif
 395:src/display.c **** 
 396:src/display.c ****   negative = flags & 2;
 397:src/display.c ****   if (exp < 0) {
 398:src/display.c ****     negative = 1;
 399:src/display.c ****     exp = -exp;
 400:src/display.c ****   }
 401:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 402:src/display.c ****   thousands = exp / 1000;
 403:src/display.c **** #endif
 404:src/display.c ****   if (res) {
 405:src/display.c **** #ifdef INCLUDE_YREG_CODE
 406:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 407:src/display.c ****     if (thousands != 0) {
 408:src/display.c **** #else
 409:src/display.c ****       if (exp > 999) {
 410:src/display.c **** #endif
 411:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 412:src/display.c **** 	// No exponent separator for large -ve exponents
 413:src/display.c ****       }
 414:src/display.c ****       else *res++ = 'e'; // Normal separator
ARM GAS  /tmp/ccKZqSeG.s 			page 13


 415:src/display.c **** #else
 416:src/display.c ****       *res++ = 'e';
 417:src/display.c **** #endif
 418:src/display.c ****       if (negative) *res++ = '-';
 419:src/display.c ****     }
 420:src/display.c ****     else {
 421:src/display.c ****       if (negative) SET_EXP_SIGN;
 422:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 423:src/display.c ****       if (thousands != 0) {
 424:src/display.c **** #else
 425:src/display.c **** 	if (exp > 999) {
 426:src/display.c **** #endif
 427:src/display.c **** 	  if (!show_large_exponent
 428:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 429:src/display.c **** 	      && (flags & 8) == 0
 430:src/display.c **** #endif
 431:src/display.c **** 	      ) {
 432:src/display.c **** #ifdef REALBUILD
 433:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 434:src/display.c **** #else
 435:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 436:src/display.c **** #endif
 437:src/display.c **** 	    goto no_number;
 438:src/display.c **** 	  }
 439:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 440:src/display.c **** 	  else {
 441:src/display.c **** 	    exp -= thousands * 1000;
 442:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 443:src/display.c **** 	    if (flags & 16) {
 444:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 445:src/display.c **** 	      int i;
 446:src/display.c **** 
 447:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 448:src/display.c **** 		// Clear digits and separators
 449:src/display.c **** 		clr_dot(i);
 450:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 451:src/display.c **** 	    }
 452:src/display.c **** #  endif
 453:src/display.c **** 	    if (negative) {
 454:src/display.c **** 	      CLR_EXP_SIGN;
 455:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 456:src/display.c **** 	    }
 457:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 458:src/display.c **** 	    flags = 1;
 459:src/display.c **** 	  }
 460:src/display.c **** #endif
 461:src/display.c **** 	}
 462:src/display.c ****       }
 463:src/display.c **** #ifdef REALBUILD
 464:src/display.c ****       u.i = 0; // Smaller ARM code
 465:src/display.c **** #else
 466:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 467:src/display.c **** #endif
 468:src/display.c ****       if (flags & 5) {
 469:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 470:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 471:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
ARM GAS  /tmp/ccKZqSeG.s 			page 14


 472:src/display.c **** 	  int i;
 473:src/display.c **** 
 474:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 475:src/display.c **** 	    if (u.buf[i] == '0')
 476:src/display.c **** 	      u.buf[i] = ' ';
 477:src/display.c **** 	    else
 478:src/display.c **** 	      break;
 479:src/display.c **** 	  }
 480:src/display.c **** 	  if (i != 0 && negative) {
 481:src/display.c **** 	    // Move minus sign to right in front of exponent
 482:src/display.c **** 	    CLR_EXP_SIGN;
 483:src/display.c **** 	    u.buf[i - 1] = '-';
 484:src/display.c **** 	  }
 485:src/display.c **** 	}
 486:src/display.c **** #endif
 487:src/display.c ****       }
 488:src/display.c ****       else
 489:src/display.c **** 	num_arg(u.buf, exp);
 490:src/display.c ****     no_number:
 491:src/display.c ****       set_exp_digits_string(u.buf, res);
 492:src/display.c ****     }
 493:src/display.c **** 
 494:src/display.c ****     static void carry_overflow(void) {
 495:src/display.c ****       const int base = SEGS_EXP_BASE;
 496:src/display.c ****       int c;
 497:src/display.c ****       unsigned int b;
 498:src/display.c **** 
 499:src/display.c ****       // Figure out the base
 500:src/display.c ****       switch (State2.smode) {
 501:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 502:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 503:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 504:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 505:src/display.c ****       default:	b = UState.int_base+1;	break;
 506:src/display.c ****       }
 507:src/display.c **** 
 508:src/display.c ****       // Display the base as the first exponent digit
 509:src/display.c ****       if (b > 10 && b < 16)
 510:src/display.c **** 	SET_EXP_SIGN;
 511:src/display.c ****       c = "B34567o9D12345h"[b-2];
 512:src/display.c ****       set_dig(base, c);
 513:src/display.c **** 
 514:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 515:src/display.c ****       if (get_carry())
 516:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 517:src/display.c ****       if (get_overflow())
 518:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 519:src/display.c ****     }
 520:src/display.c **** 
 521:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 522:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 523:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 524:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 525:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 526:src/display.c **** #endif
 527:src/display.c **** 
 528:src/display.c ****     /* Display the annunicator text line.
ARM GAS  /tmp/ccKZqSeG.s 			page 15


 529:src/display.c ****      * Care needs to be taken to keep things aligned.
 530:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 531:src/display.c ****      */
 532:src/display.c **** #ifdef TOP_ROW
 533:src/display.c ****     static void annunciators(void) {
 534:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 535:src/display.c ****       char buf[42], *p = buf, *q="";
 536:src/display.c ****       char buf2[42], *p2 = buf2;
 537:src/display.c ****       int n;
 538:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 539:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 540:src/display.c ****       // Constant variables and code branches depending on a constant variable
 541:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 542:src/display.c ****       // feature run-time configurable if needed.
 543:src/display.c **** #ifdef INCLUDE_YREG_CODE
 544:src/display.c **** #  ifdef YREG_ALWAYS_ON
 545:src/display.c ****       const int yreg_enabled = 1;
 546:src/display.c **** #  else
 547:src/display.c ****       const int yreg_enabled = UState.show_y;
 548:src/display.c **** #  endif
 549:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 550:src/display.c ****       const int yreg_hms = 1;
 551:src/display.c **** #  else
 552:src/display.c ****       const int yreg_hms = 0;
 553:src/display.c **** #  endif
 554:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 555:src/display.c ****       const int yreg_fract = 1;
 556:src/display.c **** #  else
 557:src/display.c ****       const int yreg_fract = 0;
 558:src/display.c **** #  endif
 559:src/display.c **** #else
 560:src/display.c ****       const int yreg_enabled = 0;
 561:src/display.c ****       const int yreg_hms = 0;
 562:src/display.c ****       const int yreg_fract = 0;
 563:src/display.c **** #endif
 564:src/display.c **** #ifdef RP_PREFIX
 565:src/display.c ****       const int rp_prefix = 1;
 566:src/display.c **** #else
 567:src/display.c ****       const int rp_prefix = 0;
 568:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 569:src/display.c **** #endif
 570:src/display.c ****       // Indicates whether font escape code is compiled in.
 571:src/display.c ****       // This variable will always be set at compile time.
 572:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 573:src/display.c ****       const int has_FONT_ESCAPE = 1;
 574:src/display.c **** #else
 575:src/display.c ****       const int has_FONT_ESCAPE = 0;
 576:src/display.c **** #endif
 577:src/display.c **** 
 578:src/display.c ****       xset(buf, '\0', sizeof(buf));
 579:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 580:src/display.c ****       
 581:src/display.c ****       if (is_intmode()) {
 582:src/display.c **** #ifdef SHOW_STACK_SIZE
 583:src/display.c **** 	if (shift_char == ' ') {
 584:src/display.c **** 	  *p2++ = '\007';
 585:src/display.c **** 	  *p2++ = '\346';
ARM GAS  /tmp/ccKZqSeG.s 			page 16


 586:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 587:src/display.c **** 	}
 588:src/display.c **** 	else
 589:src/display.c **** #endif
 590:src/display.c **** 	  {
 591:src/display.c **** 	    *p2++ = shift_char;
 592:src/display.c **** 	    *p2++ = '\006';
 593:src/display.c **** 	  }
 594:src/display.c **** 
 595:src/display.c **** 	switch(int_mode()) {
 596:src/display.c **** 	default:
 597:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 598:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 599:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 600:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 601:src/display.c **** 	}
 602:src/display.c **** 	q = scopy(p2, q);
 603:src/display.c **** 	*q++ = '\006';
 604:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 605:src/display.c **** 
 606:src/display.c **** 	if (IntMaxWindow > 0) {
 607:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 608:src/display.c **** 	  if (*q == '1')
 609:src/display.c **** 	    n += 2;
 610:src/display.c **** 	  if (q[1] == '1')
 611:src/display.c **** 	    n += 2;
 612:src/display.c **** 	  while (n-- > 0)
 613:src/display.c **** 	    *p2++ = '\006';
 614:src/display.c **** 
 615:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 616:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 617:src/display.c **** 	}
 618:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 619:src/display.c ****       }
 620:src/display.c **** #ifdef INCLUDE_C_LOCK
 621:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 622:src/display.c **** #else
 623:src/display.c ****       else if (!yreg_enabled
 624:src/display.c **** #endif
 625:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 626:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 627:src/display.c **** #endif
 628:src/display.c **** 	       ) {
 629:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 630:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 631:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 632:src/display.c **** 	if (shift_char == ' ') {
 633:src/display.c **** 	  *p2++ = '\007';
 634:src/display.c **** 	  *p2++ = '\342';
 635:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 636:src/display.c **** 	  *p2++ = '\007';
 637:src/display.c **** 	  *p2++ = '\344';
 638:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 639:src/display.c **** 	}
 640:src/display.c **** 	else
 641:src/display.c **** #endif
 642:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
ARM GAS  /tmp/ccKZqSeG.s 			page 17


 643:src/display.c **** 	    *p2++ = shift_char;
 644:src/display.c **** 	    *p2++ = '\006';
 645:src/display.c **** 	  }
 646:src/display.c **** 	  else {
 647:src/display.c **** 	    *p2++ = 'D';
 648:src/display.c **** 	  }
 649:src/display.c **** 
 650:src/display.c **** 	if (State2.cmplx) {
 651:src/display.c **** 	  *p2++ = ' ';
 652:src/display.c **** 	  *p2 = '\024';
 653:src/display.c **** 	  goto skip;
 654:src/display.c **** 	}
 655:src/display.c **** 	if (State2.arrow) {
 656:src/display.c **** 	  *p2++ = ' ';
 657:src/display.c **** 	  *p2 = '\015';
 658:src/display.c **** 	  goto skip;
 659:src/display.c **** 	}
 660:src/display.c **** 
 661:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 662:src/display.c **** 	  if (State2.wascomplex) {
 663:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 664:src/display.c **** 	  }
 665:src/display.c **** 	  else if (rp_prefix) {
 666:src/display.c **** 	    if (RectPolConv == 1) {
 667:src/display.c **** 	      q = "\007\306<";
 668:src/display.c **** 	    }
 669:src/display.c **** 	    else {
 670:src/display.c **** 	      q = "\007\306y";
 671:src/display.c **** 	    }
 672:src/display.c **** 	  }
 673:src/display.c **** 	  p = scopy(buf, q);
 674:src/display.c **** 
 675:src/display.c **** 	  goto display_yreg;
 676:src/display.c **** 	}
 677:src/display.c **** 
 678:src/display.c **** 	switch (UState.date_mode) {
 679:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 680:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 681:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 682:src/display.c **** #endif
 683:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 684:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 685:src/display.c **** #endif
 686:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 687:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 688:src/display.c **** #endif
 689:src/display.c **** #endif
 690:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 691:src/display.c **** 	}
 692:src/display.c **** 	p2 = scopy(p2, q);
 693:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 694:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 695:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 696:src/display.c **** 	}
 697:src/display.c **** #else
 698:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 699:src/display.c **** 	*p2++ = '\007';
ARM GAS  /tmp/ccKZqSeG.s 			page 18


 700:src/display.c **** 	*p2++ = '\342';
 701:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 702:src/display.c **** #endif
 703:src/display.c ****       }
 704:src/display.c ****       else { // yreg_enabled
 705:src/display.c **** 	// do top-related things first
 706:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 707:src/display.c **** 	if (State2.cmplx) {
 708:src/display.c **** 	  *p2++ = '\007';
 709:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 710:src/display.c **** 	  *p2++ = shift_char;
 711:src/display.c **** 	  *p2++ = '\024';
 712:src/display.c **** 	}
 713:src/display.c **** 	else {// if (shift_char != ' ') {
 714:src/display.c **** 	  *p2++ = '\007';
 715:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 716:src/display.c **** 	  *p2++ = shift_char;
 717:src/display.c **** 	}
 718:src/display.c **** #endif
 719:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 720:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 721:src/display.c **** 	  *p2++ = '\007';
 722:src/display.c **** 	  *p2++ = '\207';
 723:src/display.c **** 	  *p2++ = '\007';	    
 724:src/display.c **** 	}
 725:src/display.c **** 	else {
 726:src/display.c **** 	  *p2++ = '\007';
 727:src/display.c **** 	  *p2++ = '\207';
 728:src/display.c **** 	  *p2++ = ' ';
 729:src/display.c **** 	}
 730:src/display.c **** #endif
 731:src/display.c **** #ifndef SHOW_STACK_SIZE
 732:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 733:src/display.c **** 	p2 = scopy(p2, q);
 734:src/display.c **** #else
 735:src/display.c **** 	if (is_dblmode()) {
 736:src/display.c **** 	  *p2++ = '\007';
 737:src/display.c **** 	  *p2++ = '\342';
 738:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 739:src/display.c **** 	  *p2++ = '\007';
 740:src/display.c **** 	  *p2++ = '\345';
 741:src/display.c **** 	  *p2++ = 'D';
 742:src/display.c **** 	}
 743:src/display.c **** 	else {
 744:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 745:src/display.c **** 	  p2 = scopy(p2, q);
 746:src/display.c **** 	}
 747:src/display.c **** #endif
 748:src/display.c **** 
 749:src/display.c **** 	switch (UState.date_mode) {
 750:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 751:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 752:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 753:src/display.c **** #endif
 754:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 755:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 756:src/display.c **** #endif
ARM GAS  /tmp/ccKZqSeG.s 			page 19


 757:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 758:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 759:src/display.c **** #endif
 760:src/display.c **** #endif
 761:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 762:src/display.c **** 	}
 763:src/display.c **** 	  
 764:src/display.c **** 	//      no_copy:
 765:src/display.c **** 	// display either arrow or datemode
 766:src/display.c **** 	if (State2.arrow) {
 767:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 768:src/display.c **** 	} // no need to skip y display with arrow here
 769:src/display.c **** 	else {
 770:src/display.c **** 	  p2 = scopy(p2, q);
 771:src/display.c **** 	}
 772:src/display.c **** 	// now do the annotations, if any, for the middle row:
 773:src/display.c **** #ifdef INCLUDE_C_LOCK
 774:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 775:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 776:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 777:src/display.c **** 	  }
 778:src/display.c **** 	  else {
 779:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 780:src/display.c **** 	  }
 781:src/display.c **** 	  scopy(p, q);
 782:src/display.c **** 	  goto skip;
 783:src/display.c **** 	}
 784:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 785:src/display.c **** 	  q = "\007\307<";
 786:src/display.c **** 	  p = scopy(p, q);
 787:src/display.c **** 	}
 788:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 789:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 790:src/display.c **** 	  p = scopy(p, q);
 791:src/display.c **** 	}
 792:src/display.c **** #else
 793:src/display.c **** 	
 794:src/display.c **** 	if (State2.wascomplex) {
 795:src/display.c **** 	  q = "\007\207i";
 796:src/display.c **** 	  p = scopy(p, q);
 797:src/display.c **** 	  //	    goto no_copy;
 798:src/display.c **** 	}
 799:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 800:src/display.c **** 	  q = "\007\307<";
 801:src/display.c **** 	  p = scopy(p, q);
 802:src/display.c **** 	  //	    goto no_copy;
 803:src/display.c **** 	}
 804:src/display.c **** 	else
 805:src/display.c **** #endif
 806:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 807:src/display.c **** 	    q = "\007\307y";
 808:src/display.c **** 	    p = scopy(p, q);
 809:src/display.c **** 	    //	    goto no_copy;
 810:src/display.c **** 	  }
 811:src/display.c ****       
 812:src/display.c **** 	if (State2.runmode) {
 813:src/display.c **** 	  decNumber y;
ARM GAS  /tmp/ccKZqSeG.s 			page 20


 814:src/display.c **** 	display_yreg:
 815:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 816:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 817:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 818:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 819:src/display.c **** 	   */
 820:src/display.c **** 	  if (is_intmode()) {
 821:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 822:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 823:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 824:src/display.c **** 	    goto skip;
 825:src/display.c **** 	  }
 826:src/display.c **** #ifdef INCLUDE_C_LOCK
 827:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 828:src/display.c **** 	    getRegister(&y, regK_idx);
 829:src/display.c **** 	  }
 830:src/display.c **** 	  else {
 831:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 832:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 833:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 834:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 835:src/display.c **** 	  }
 836:src/display.c **** #else
 837:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 838:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 839:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 840:src/display.c **** #endif
 841:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 842:src/display.c **** #ifdef INCLUDE_C_LOCK
 843:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 844:src/display.c **** #else
 845:src/display.c **** 	    if (yreg_hms && State2.hms) {
 846:src/display.c **** #endif
 847:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 848:src/display.c **** 
 849:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 850:src/display.c **** 	      UState.nothousands = 1;
 851:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 852:src/display.c **** 	      UState.nothousands = saved_nothousands;
 853:src/display.c **** 	      // First replace the '@' character with the degree symbol
 854:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 855:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 856:src/display.c **** 	      // then remove the fractional part of the seconds.
 857:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 858:src/display.c **** 	      while (*p) {
 859:src/display.c **** 		replace_char(buf, p[0], p[1]);
 860:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 861:src/display.c **** 		  goto skip;
 862:src/display.c **** 		}
 863:src/display.c **** 		p += 2;
 864:src/display.c **** 	      }
 865:src/display.c **** 	      goto skip;
 866:src/display.c **** 	    }
 867:src/display.c **** 	    if (yreg_fract && UState.fract
 868:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 869:src/display.c **** 		&& !State2.cmplx
 870:src/display.c **** #endif
ARM GAS  /tmp/ccKZqSeG.s 			page 21


 871:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 872:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 873:src/display.c **** #endif
 874:src/display.c **** 		&& set_x_fract(&y, p)) {
 875:src/display.c **** 	      char ltgteq;
 876:src/display.c **** 
 877:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 878:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 879:src/display.c **** 	      ltgteq = *q;
 880:src/display.c **** 	      switch (ltgteq) {
 881:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 882:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 883:src/display.c **** 	      }
 884:src/display.c **** 	      scopy(q, "\007\344?");
 885:src/display.c **** 	      q[2] = ltgteq;
 886:src/display.c **** 
 887:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 888:src/display.c **** 		goto skip;
 889:src/display.c **** 	      }
 890:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 891:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 892:src/display.c **** 		goto skip;
 893:src/display.c **** 	      }
 894:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 895:src/display.c **** 	    }
 896:src/display.c **** 	  }
 897:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 898:src/display.c **** 	    int extra_pixels;
 899:src/display.c **** 
 900:src/display.c **** 	    set_x_dn(&y, p, &n);
 901:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 902:src/display.c **** 	    if (extra_pixels <= 0)
 903:src/display.c **** 	      break;
 904:src/display.c **** 
 905:src/display.c **** 	    xset(p, '\0', n+10);
 906:src/display.c **** 
 907:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 908:src/display.c **** 	  }
 909:src/display.c **** 	}
 910:src/display.c ****       }
 911:src/display.c ****       
 912:src/display.c ****     skip:
 913:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 914:src/display.c ****       set_status_top_always(buf2);
 915:src/display.c ****       
 916:src/display.c ****     }
 917:src/display.c **** #else
 918:src/display.c ****     static void annunciators(void) {
 919:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 920:src/display.c ****       char buf[42], *p = buf, *q="";
 921:src/display.c ****       int n;
 922:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 923:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 924:src/display.c ****       // Constant variables and code branches depending on a constant variable
 925:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 926:src/display.c ****       // feature run-time configurable if needed.
 927:src/display.c **** #ifdef INCLUDE_YREG_CODE
ARM GAS  /tmp/ccKZqSeG.s 			page 22


 928:src/display.c **** #  ifdef YREG_ALWAYS_ON
 929:src/display.c ****       const int yreg_enabled = 1;
 930:src/display.c **** #  else
 931:src/display.c ****       const int yreg_enabled = UState.show_y;
 932:src/display.c **** #  endif
 933:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 934:src/display.c ****       const int yreg_hms = 1;
 935:src/display.c **** #  else
 936:src/display.c ****       const int yreg_hms = 0;
 937:src/display.c **** #  endif
 938:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 939:src/display.c ****       const int yreg_fract = 1;
 940:src/display.c **** #  else
 941:src/display.c ****       const int yreg_fract = 0;
 942:src/display.c **** #  endif
 943:src/display.c **** #else
 944:src/display.c ****       const int yreg_enabled = 0;
 945:src/display.c ****       const int yreg_hms = 0;
 946:src/display.c ****       const int yreg_fract = 0;
 947:src/display.c **** #endif
 948:src/display.c **** #ifdef RP_PREFIX
 949:src/display.c ****       const int rp_prefix = 1;
 950:src/display.c **** #else
 951:src/display.c ****       const int rp_prefix = 0;
 952:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 953:src/display.c **** #endif
 954:src/display.c ****       // Indicates whether font escape code is compiled in.
 955:src/display.c ****       // This variable will always be set at compile time.
 956:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 957:src/display.c ****       const int has_FONT_ESCAPE = 1;
 958:src/display.c **** #else
 959:src/display.c ****       const int has_FONT_ESCAPE = 0;
 960:src/display.c **** #endif
 961:src/display.c **** 
 962:src/display.c ****       xset(buf, '\0', sizeof(buf));
 963:src/display.c ****       
 964:src/display.c ****       if (is_intmode()) {
 965:src/display.c **** #ifdef SHOW_STACK_SIZE
 966:src/display.c **** 	if (shift_char == ' ') {
 967:src/display.c **** 	  *p++ = '\007';
 968:src/display.c **** 	  *p++ = '\346';
 969:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 970:src/display.c **** 	}
 971:src/display.c **** 	else
 972:src/display.c **** #endif
 973:src/display.c **** 	  {
 974:src/display.c **** 	    *p++ = shift_char;
 975:src/display.c **** 	    *p++ = '\006';
 976:src/display.c **** 	  }
 977:src/display.c **** 
 978:src/display.c **** 	switch(int_mode()) {
 979:src/display.c **** 	default:
 980:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 981:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 982:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 983:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 984:src/display.c **** 	}
ARM GAS  /tmp/ccKZqSeG.s 			page 23


 985:src/display.c **** 	q = scopy(p, q);
 986:src/display.c **** 	*q++ = '\006';
 987:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 988:src/display.c **** 
 989:src/display.c **** 	if (IntMaxWindow > 0) {
 990:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 991:src/display.c **** 	  if (*q == '1')
 992:src/display.c **** 	    n += 2;
 993:src/display.c **** 	  if (q[1] == '1')
 994:src/display.c **** 	    n += 2;
 995:src/display.c **** 	  while (n-- > 0)
 996:src/display.c **** 	    *p++ = '\006';
 997:src/display.c **** 
 998:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 999:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1000:src/display.c **** 	}
1001:src/display.c ****       }
1002:src/display.c **** #ifdef INCLUDE_C_LOCK
1003:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1004:src/display.c **** #else
1005:src/display.c ****       else if (!yreg_enabled
1006:src/display.c **** #endif
1007:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1008:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1009:src/display.c **** #endif
1010:src/display.c **** 	       ) {
1011:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1012:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1013:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1014:src/display.c **** 	if (shift_char == ' ') {
1015:src/display.c **** 	  *p++ = '\007';
1016:src/display.c **** 	  *p++ = '\342';
1017:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1018:src/display.c **** 	  *p++ = '\007';
1019:src/display.c **** 	  *p++ = '\344';
1020:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1021:src/display.c **** 	}
1022:src/display.c **** 	else
1023:src/display.c **** #endif
1024:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1025:src/display.c **** 	    *p++ = shift_char;
1026:src/display.c **** 	    *p++ = '\006';
1027:src/display.c **** 	  }
1028:src/display.c **** 	  else {
1029:src/display.c **** 	    *p++ = 'D';
1030:src/display.c **** 	  }
1031:src/display.c **** 
1032:src/display.c **** 	if (State2.cmplx) {
1033:src/display.c **** 	  *p++ = ' ';
1034:src/display.c **** 	  *p = '\024';
1035:src/display.c **** 	  goto skip;
1036:src/display.c **** 	}
1037:src/display.c **** 	if (State2.arrow) {
1038:src/display.c **** 	  *p++ = ' ';
1039:src/display.c **** 	  *p = '\015';
1040:src/display.c **** 	  goto skip;
1041:src/display.c **** 	}
ARM GAS  /tmp/ccKZqSeG.s 			page 24


1042:src/display.c **** 
1043:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1044:src/display.c **** 	  if (State2.wascomplex) {
1045:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1046:src/display.c **** 	  }
1047:src/display.c **** 	  else if (rp_prefix) {
1048:src/display.c **** 	    if (RectPolConv == 1) {
1049:src/display.c **** 	      q = "\007\306<";
1050:src/display.c **** 	    }
1051:src/display.c **** 	    else {
1052:src/display.c **** 	      q = "\007\306y";
1053:src/display.c **** 	    }
1054:src/display.c **** 	  }
1055:src/display.c **** 	  p = scopy(buf, q);
1056:src/display.c **** 
1057:src/display.c **** 	  goto display_yreg;
1058:src/display.c **** 	}
1059:src/display.c **** 
1060:src/display.c **** 	switch (UState.date_mode) {
1061:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1062:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1063:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1064:src/display.c **** #endif
1065:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1066:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1067:src/display.c **** #endif
1068:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1069:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1070:src/display.c **** #endif
1071:src/display.c **** #endif
1072:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1073:src/display.c **** 	}
1074:src/display.c **** 	p = scopy(p, q);
1075:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1076:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1077:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1078:src/display.c **** 	}
1079:src/display.c **** #else
1080:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1081:src/display.c **** 	*p++ = '\007';
1082:src/display.c **** 	*p++ = '\342';
1083:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1084:src/display.c **** #endif
1085:src/display.c ****       }
1086:src/display.c ****       else { // yreg_enabled
1087:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1088:src/display.c **** 	if (State2.cmplx) {
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\344';
1091:src/display.c **** 	  *p++ = shift_char;
1092:src/display.c **** 	  q = "\024";
1093:src/display.c **** 	}
1094:src/display.c **** 	else if (shift_char != ' ') {
1095:src/display.c **** 	  *p++ = '\007';
1096:src/display.c **** 	  *p++ = '\307';
1097:src/display.c **** 	  *p++ = shift_char;
1098:src/display.c **** 	  goto no_copy;
ARM GAS  /tmp/ccKZqSeG.s 			page 25


1099:src/display.c **** 	}
1100:src/display.c **** 	else
1101:src/display.c **** #endif
1102:src/display.c **** #ifdef INCLUDE_C_LOCK
1103:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1104:src/display.c **** 			if ( POLAR_DISPLAY ) {
1105:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1106:src/display.c **** 			}
1107:src/display.c **** 			else {
1108:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1109:src/display.c **** 			}
1110:src/display.c **** 			scopy(p, q);
1111:src/display.c **** 			goto skip;
1112:src/display.c **** 		}
1113:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1114:src/display.c **** 			q = "\007\307<";
1115:src/display.c **** 		}
1116:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1117:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1118:src/display.c **** 		}
1119:src/display.c **** #else
1120:src/display.c **** 	  if (State2.wascomplex) {
1121:src/display.c **** 	    q = "\007\207i";
1122:src/display.c **** 	  }
1123:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1124:src/display.c **** 	    q = "\007\307<";
1125:src/display.c **** 	  }
1126:src/display.c **** #endif
1127:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1128:src/display.c **** 	    q = "\007\307y";
1129:src/display.c **** 	  }
1130:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1131:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1132:src/display.c **** 	    q = "\007\207\007";
1133:src/display.c **** 	  }
1134:src/display.c **** #endif
1135:src/display.c **** 	  else {
1136:src/display.c **** #ifndef SHOW_STACK_SIZE
1137:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1138:src/display.c **** #else
1139:src/display.c **** 	    if (is_dblmode()) {
1140:src/display.c **** 	      *p++ = '\007';
1141:src/display.c **** 	      *p++ = '\342';
1142:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1143:src/display.c **** 	      q = "\007\345D";
1144:src/display.c **** 	    }
1145:src/display.c **** 	    else {
1146:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1147:src/display.c **** 	    }
1148:src/display.c **** #endif
1149:src/display.c **** 	  }
1150:src/display.c **** 	p = scopy(p, q);
1151:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1152:src/display.c ****       no_copy:
1153:src/display.c **** #endif
1154:src/display.c **** 
1155:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccKZqSeG.s 			page 26


1156:src/display.c **** 	  scopy(p, "\007\204\006\015");
1157:src/display.c **** 	} else if (State2.runmode) {
1158:src/display.c **** 	  decNumber y;
1159:src/display.c **** 	display_yreg:
1160:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1161:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1162:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1163:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1164:src/display.c **** 	   */
1165:src/display.c **** #ifdef INCLUDE_C_LOCK
1166:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1167:src/display.c **** 		    getRegister(&y, regK_idx);
1168:src/display.c **** 		  }
1169:src/display.c **** 		  else {
1170:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1171:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1172:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1173:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1174:src/display.c **** 		  }
1175:src/display.c **** #else
1176:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1177:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1178:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1179:src/display.c **** #endif
1180:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1181:src/display.c **** #ifdef INCLUDE_C_LOCK
1182:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1183:src/display.c **** #else
1184:src/display.c **** 	    if (yreg_hms && State2.hms) {
1185:src/display.c **** #endif
1186:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1187:src/display.c **** 
1188:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1189:src/display.c **** 	      UState.nothousands = 1;
1190:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1191:src/display.c **** 	      UState.nothousands = saved_nothousands;
1192:src/display.c **** 	      // First replace the '@' character with the degree symbol
1193:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1194:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1195:src/display.c **** 	      // then remove the fractional part of the seconds.
1196:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1197:src/display.c **** 	      while (*p) {
1198:src/display.c **** 		replace_char(buf, p[0], p[1]);
1199:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1200:src/display.c **** 		  goto skip;
1201:src/display.c **** 		}
1202:src/display.c **** 		p += 2;
1203:src/display.c **** 	      }
1204:src/display.c **** 	      goto skip;
1205:src/display.c **** 	    }
1206:src/display.c **** 	    if (yreg_fract && UState.fract
1207:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1208:src/display.c **** 		&& !State2.cmplx
1209:src/display.c **** #endif
1210:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1211:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1212:src/display.c **** #endif
ARM GAS  /tmp/ccKZqSeG.s 			page 27


1213:src/display.c **** 		&& set_x_fract(&y, p)) {
1214:src/display.c **** 	      char ltgteq;
1215:src/display.c **** 
1216:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1217:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1218:src/display.c **** 	      ltgteq = *q;
1219:src/display.c **** 	      switch (ltgteq) {
1220:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1221:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1222:src/display.c **** 	      }
1223:src/display.c **** 	      scopy(q, "\007\344?");
1224:src/display.c **** 	      q[2] = ltgteq;
1225:src/display.c **** 
1226:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1227:src/display.c **** 		goto skip;
1228:src/display.c **** 	      }
1229:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1230:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1231:src/display.c **** 		goto skip;
1232:src/display.c **** 	      }
1233:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1234:src/display.c **** 	    }
1235:src/display.c **** 	  }
1236:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1237:src/display.c **** 	    int extra_pixels;
1238:src/display.c **** 
1239:src/display.c **** 	    set_x_dn(&y, p, &n);
1240:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1241:src/display.c **** 	    if (extra_pixels <= 0)
1242:src/display.c **** 	      break;
1243:src/display.c **** 
1244:src/display.c **** 	    xset(p, '\0', n+10);
1245:src/display.c **** 
1246:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1247:src/display.c **** 	  }
1248:src/display.c **** 	}
1249:src/display.c ****       }
1250:src/display.c ****       
1251:src/display.c ****     skip:	set_status_top(buf);
1252:src/display.c ****     }
1253:src/display.c **** #endif //top_row
1254:src/display.c ****     static void disp_x(const char *p) {
1255:src/display.c ****       int i;
1256:src/display.c ****       int gotdot = -1;
1257:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1258:src/display.c ****       const
1259:src/display.c **** #endif
1260:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1261:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1262:src/display.c ****       int overflow_to_left = 0;
1263:src/display.c **** #endif
1264:src/display.c **** 
1265:src/display.c ****       if (*p == '-') {
1266:src/display.c **** 	SET_MANT_SIGN;
1267:src/display.c **** 	p++;
1268:src/display.c ****       }
1269:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 28


1270:src/display.c ****       if (is_intmode()) {
1271:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1272:src/display.c **** 	  set_dig(i, *p);
1273:src/display.c **** 	  i += SEGS_PER_DIGIT;
1274:src/display.c **** 	}
1275:src/display.c **** 	carry_overflow();
1276:src/display.c ****       } else {
1277:src/display.c **** 	set_separator_decimal_modes();
1278:src/display.c **** 
1279:src/display.c **** 	i = 0;
1280:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1281:src/display.c **** 	if ( CmdLineDot > 1 ) {
1282:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1283:src/display.c **** 	  const
1284:src/display.c **** #  endif
1285:src/display.c **** 	    int double_dot = 0;
1286:src/display.c **** 	  int j;
1287:src/display.c **** 
1288:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1289:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1290:src/display.c **** 	      gotdot = j;
1291:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1292:src/display.c **** 	      double_dot = (p[j+1] == '.');
1293:src/display.c **** #  endif
1294:src/display.c **** 	    }
1295:src/display.c **** 	  }
1296:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1297:src/display.c **** 	  if (j > 0) {
1298:src/display.c **** 	    p += j + 1;
1299:src/display.c **** 	    i = SEGS_PER_DIGIT;
1300:src/display.c **** 	    if (gotdot <= j) {
1301:src/display.c **** 	      gotdot = 0;
1302:src/display.c **** 	      if (double_dot)
1303:src/display.c **** 		p++;
1304:src/display.c **** 	    }
1305:src/display.c **** 	    else if (*p == '.') {
1306:src/display.c **** 	      gotdot = 0;
1307:src/display.c **** 	      p++;
1308:src/display.c **** 	      if (!double_dot)
1309:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1310:src/display.c **** 	    }
1311:src/display.c **** 	    else gotdot = -1;
1312:src/display.c **** 	    set_dig(0, '<');
1313:src/display.c **** 	    overflow_to_left = 1;
1314:src/display.c **** 	  }
1315:src/display.c **** 	  else gotdot = -1;
1316:src/display.c **** 	}
1317:src/display.c **** #endif
1318:src/display.c **** 
1319:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1320:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1321:src/display.c **** 	       && *p != 'D'
1322:src/display.c **** #endif
1323:src/display.c **** 	       ; p++) {
1324:src/display.c **** 	  if (*p == '.') {
1325:src/display.c **** 	    if (gotdot < 0)
1326:src/display.c **** 	      gotdot = i;
ARM GAS  /tmp/ccKZqSeG.s 			page 29


1327:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1328:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1329:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1330:src/display.c **** 	      if ( *(p+1) == '.' ) {
1331:src/display.c **** 		p++;
1332:src/display.c **** 	      }
1333:src/display.c **** #  else
1334:src/display.c **** 	      if ( i != gotdot ) {
1335:src/display.c **** #  endif
1336:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1337:src/display.c **** 		i += segs_per_digit;
1338:src/display.c **** 	      }
1339:src/display.c **** 	      else {
1340:src/display.c **** 		if ( CmdLineDot > 1 ) {
1341:src/display.c **** 		  i += segs_per_digit;
1342:src/display.c **** 		}
1343:src/display.c **** 		else {
1344:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1345:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1346:src/display.c **** 		}
1347:src/display.c **** 	      }
1348:src/display.c **** #else
1349:src/display.c **** 	      if (i > 0)
1350:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1351:src/display.c **** 	      else {
1352:src/display.c **** 		set_dig(i, '0');
1353:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1354:src/display.c **** 		i += segs_per_digit;
1355:src/display.c **** 	      }
1356:src/display.c **** #endif
1357:src/display.c **** 	    } else {
1358:src/display.c **** 	      set_dig(i, *p);
1359:src/display.c **** 	      i += segs_per_digit;
1360:src/display.c **** 	    }
1361:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1362:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1363:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1364:src/display.c **** #endif
1365:src/display.c **** 	  }
1366:src/display.c **** 
1367:src/display.c **** 	  /* Implement a floating comma */
1368:src/display.c **** 	  if (gotdot < 0)
1369:src/display.c **** 	    gotdot = i;
1370:src/display.c **** 	  for (;;) {
1371:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1372:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1373:src/display.c **** 	      break;
1374:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1375:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1376:src/display.c **** 	      break;
1377:src/display.c **** #endif
1378:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1379:src/display.c **** 	  }
1380:src/display.c **** 
1381:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1382:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1383:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
ARM GAS  /tmp/ccKZqSeG.s 			page 30


1384:src/display.c **** 	    int flags = 8;
1385:src/display.c **** #  else
1386:src/display.c **** 	    int flags = 12;
1387:src/display.c **** #  endif
1388:src/display.c **** 
1389:src/display.c **** 	    if (*p == 'D')
1390:src/display.c **** 	      flags |= 2;
1391:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1392:src/display.c **** 	      flags |= 16;
1393:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1394:src/display.c **** 	  }
1395:src/display.c **** #else
1396:src/display.c **** 	  if (*p == 'E') {
1397:src/display.c **** 	    p++;
1398:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1399:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1400:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1401:src/display.c **** #  else
1402:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1403:src/display.c **** #  endif
1404:src/display.c **** 	  } 
1405:src/display.c **** #endif
1406:src/display.c **** 	}
1407:src/display.c ****       }
1408:src/display.c **** 
1409:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1410:src/display.c **** 
1411:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1412:src/display.c **** 	const int ws = word_size();
1413:src/display.c **** 	unsigned int b;
1414:src/display.c **** 	long long int vs = value;
1415:src/display.c **** 	unsigned long long int v;
1416:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1417:src/display.c **** 	int i, j, k;
1418:src/display.c **** 	int sign = 0;
1419:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1420:src/display.c **** 
1421:src/display.c **** 	switch (State2.smode) {
1422:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1423:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1424:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1425:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1426:src/display.c **** 	default:	b = int_base();	break;
1427:src/display.c **** 	}
1428:src/display.c **** 
1429:src/display.c **** 	if (!res) {
1430:src/display.c **** 	  IntMaxWindow = 0;
1431:src/display.c **** 	  carry_overflow();
1432:src/display.c **** 	}
1433:src/display.c **** 
1434:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1435:src/display.c **** 	  v = extract_value(value, &sign);
1436:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1437:src/display.c **** 	    v = value;
1438:src/display.c **** 	  if (v == 0) {
1439:src/display.c **** 	    if (sign)
1440:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
ARM GAS  /tmp/ccKZqSeG.s 			page 31


1441:src/display.c **** 	    set_dig_s(dig, '0', res);
1442:src/display.c **** 	    return;
1443:src/display.c **** 	  } else
1444:src/display.c **** 	    for (i=0; v != 0; i++) {
1445:src/display.c **** 	      const int r = v % b;
1446:src/display.c **** 	      v /= b;
1447:src/display.c **** 	      buf[i] = DIGITS[r];
1448:src/display.c **** 	    }
1449:src/display.c **** 	} else {
1450:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1451:src/display.c **** 	  if (ws < 64) {
1452:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1453:src/display.c **** 	    vs &= mask;
1454:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1455:src/display.c **** 	      vs |= ~mask;
1456:src/display.c **** 	  }
1457:src/display.c **** 
1458:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1459:src/display.c **** 	    set_dig_s(dig, '0', res);
1460:src/display.c **** 	    return;
1461:src/display.c **** 	  } else if (!UState.leadzero) {
1462:src/display.c **** 	    v = (unsigned long long int)vs;
1463:src/display.c **** 	    for (i=0; v != 0; i++) {
1464:src/display.c **** 	      const int r = v % b;
1465:src/display.c **** 	      v /= b;
1466:src/display.c **** 	      buf[i] = DIGITS[r];
1467:src/display.c **** 	    }
1468:src/display.c **** 	  } else {
1469:src/display.c **** 	    int n;
1470:src/display.c **** 	    const unsigned int b1 = b >> 1;
1471:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1472:src/display.c **** 	    v = (unsigned long long int)vs;
1473:src/display.c **** 
1474:src/display.c **** 	    n = (ws + fac) / (fac+1);
1475:src/display.c **** 	    for (i=0; i<n; i++) {
1476:src/display.c **** 	      const int r = v % b;
1477:src/display.c **** 	      v /= b;
1478:src/display.c **** 	      buf[i] = DIGITS[r];
1479:src/display.c **** 	    }
1480:src/display.c **** 	  }
1481:src/display.c **** 	}
1482:src/display.c **** #ifdef BIGGER_DISPLAY
1483:src/display.c **** #define MAX_INT_Y_DIG 13
1484:src/display.c **** #else
1485:src/display.c **** #define MAX_INT_Y_DIG 7
1486:src/display.c **** #endif
1487:src/display.c **** 	/* At this point i is the number of digits in the output */
1488:src/display.c **** 	int nd = i;
1489:src/display.c **** 	if (res) {
1490:src/display.c **** 	  if (sign) *res++ = '-';
1491:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1492:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1493:src/display.c **** 	      *res++ = buf[i];
1494:src/display.c **** 	    *res++ = '.';
1495:src/display.c **** 	    *res++ = '.';
1496:src/display.c **** 	  }
1497:src/display.c **** 	  else {
ARM GAS  /tmp/ccKZqSeG.s 			page 32


1498:src/display.c **** 	    while (--i >= 0)
1499:src/display.c **** 	      *res++ = buf[i];
1500:src/display.c **** 	  }
1501:src/display.c **** 	} else {
1502:src/display.c **** #if 0
1503:src/display.c **** 	  set_separator_decimal_modes();
1504:src/display.c **** 
1505:src/display.c **** 	  // Allows configuration of digit grouping per base
1506:src/display.c **** 	  static const char grouping[] = 
1507:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1508:src/display.c **** 		    //	   2     3     4     5     6     7     8
1509:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1510:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1511:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1512:src/display.c **** 	    : grouping[b - 2] >> 4;
1513:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1514:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1515:src/display.c **** #else
1516:src/display.c **** 	  // Less flexible but shorter
1517:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1518:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1519:src/display.c **** 	    : b == 16 ? 2 : 3;
1520:src/display.c **** 	  set_separator_decimal_modes();
1521:src/display.c **** #endif
1522:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1523:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1524:src/display.c **** 	    State2.window = 0;
1525:src/display.c **** 	  buf[i] = '\0';
1526:src/display.c **** 
1527:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1528:src/display.c **** 	  for (k = 0; k < 12; k++)
1529:src/display.c **** 	    if (buf[j + k] == '\0')
1530:src/display.c **** 	      break;
1531:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1532:src/display.c **** 	    int ch = buf[j++];
1533:src/display.c **** 	    if (i >= shift)
1534:src/display.c **** 	      ch -= 030;
1535:src/display.c **** 	    set_dig(dig, ch);
1536:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1537:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1538:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1539:src/display.c **** 	  }
1540:src/display.c **** 	  if (sign) {
1541:src/display.c **** 	    if (dig >= 0)
1542:src/display.c **** 	      set_dig(dig, '-');
1543:src/display.c **** 	    else	SET_MANT_SIGN;
1544:src/display.c **** 	  }
1545:src/display.c **** 	}
1546:src/display.c ****       }
1547:src/display.c **** 
1548:src/display.c ****       /* Handle special cases.
1549:src/display.c ****        * return non-zero if the number is special.
1550:src/display.c ****        */
1551:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1552:src/display.c **** 	if (decNumberIsSpecial(x)) {
1553:src/display.c **** 	  if (decNumberIsNaN(x)) {
1554:src/display.c **** 	    if (res) {
ARM GAS  /tmp/ccKZqSeG.s 			page 33


1555:src/display.c **** 	      scopy(res, "NaN");
1556:src/display.c **** 	    } else {
1557:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1558:src/display.c **** 	    }
1559:src/display.c **** 	    return 1;
1560:src/display.c **** 	  } else {
1561:src/display.c **** 	    if (decNumberIsNegative(x)) {
1562:src/display.c **** 	      if (res) *res++ = '-';
1563:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1564:src/display.c **** 	    }
1565:src/display.c **** 	    if (res)
1566:src/display.c **** 	      *res++ = '\237';
1567:src/display.c **** 	    else {
1568:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1569:src/display.c **** 	    }
1570:src/display.c **** 	    return 1;
1571:src/display.c **** 	  }
1572:src/display.c **** 	}
1573:src/display.c **** 	return 0;
1574:src/display.c ****       }
1575:src/display.c **** 
1576:src/display.c **** 
1577:src/display.c ****       /* Extract the two lowest integral digits from the number
1578:src/display.c ****        */
1579:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1580:src/display.c **** 	decNumber n;
1581:src/display.c **** 
1582:src/display.c **** 	decNumberMod(&n, x, &const_100);
1583:src/display.c **** 	*v = dn_to_int(&n);
1584:src/display.c **** 	dn_mulpow10(&n, x, -2);
1585:src/display.c **** 	decNumberTrunc(res, &n);
1586:src/display.c ****       }
1587:src/display.c **** 
1588:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 235              		.loc 1 1588 87 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 32
 238              		@ frame_needed = 0, uses_anonymous_args = 0
1589:src/display.c **** 	char b[32];
 239              		.loc 1 1589 2 view .LVU68
1590:src/display.c **** 	int i, j;
 240              		.loc 1 1590 2 view .LVU69
1591:src/display.c **** 
1592:src/display.c **** 	for (i=0; i<n; i++) {
 241              		.loc 1 1592 2 view .LVU70
 242              		.loc 1 1592 12 view .LVU71
1588:src/display.c **** 	char b[32];
 243              		.loc 1 1588 87 is_stmt 0 view .LVU72
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              		.cfi_def_cfa_offset 28
 246              		.cfi_offset 4, -28
 247              		.cfi_offset 5, -24
 248              		.cfi_offset 6, -20
 249              		.cfi_offset 7, -16
 250              		.cfi_offset 8, -12
 251              		.cfi_offset 9, -8
 252              		.cfi_offset 14, -4
ARM GAS  /tmp/ccKZqSeG.s 			page 34


1593:src/display.c **** 	  if (v == 0)
1594:src/display.c **** 	    b[i] = spaces?' ':'0';
1595:src/display.c **** 	  else {
1596:src/display.c **** 	    j = v % 10;
 253              		.loc 1 1596 12 view .LVU73
 254 0004 DFF89CE0 		ldr	lr, .L42
1588:src/display.c **** 	char b[32];
 255              		.loc 1 1588 87 view .LVU74
 256 0008 89B0     		sub	sp, sp, #36
 257              		.cfi_def_cfa_offset 64
1588:src/display.c **** 	char b[32];
 258              		.loc 1 1588 87 view .LVU75
 259 000a 1746     		mov	r7, r2
 260 000c EC46     		mov	ip, sp
1592:src/display.c **** 	  if (v == 0)
 261              		.loc 1 1592 8 view .LVU76
 262 000e 0026     		movs	r6, #0
 263              	.LVL13:
 264              	.L30:
1593:src/display.c **** 	  if (v == 0)
 265              		.loc 1 1593 4 is_stmt 1 view .LVU77
 266              		.loc 1 1596 6 view .LVU78
 267              		.loc 1 1596 12 is_stmt 0 view .LVU79
 268 0010 AEFB0024 		umull	r2, r4, lr, r0
 269 0014 E408     		lsrs	r4, r4, #3
 270 0016 04EB8402 		add	r2, r4, r4, lsl #2
 271 001a 2546     		mov	r5, r4
 272 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 273              	.LVL14:
1597:src/display.c **** 	    v /= 10;
 274              		.loc 1 1597 6 is_stmt 1 view .LVU80
1598:src/display.c **** 	    b[i] = j + '0';
 275              		.loc 1 1598 15 is_stmt 0 view .LVU81
 276 0020 3034     		adds	r4, r4, #48
 277              	.LVL15:
1592:src/display.c **** 	  if (v == 0)
 278              		.loc 1 1592 18 view .LVU82
 279 0022 721C     		adds	r2, r6, #1
1593:src/display.c **** 	    b[i] = spaces?' ':'0';
 280              		.loc 1 1593 7 view .LVU83
 281 0024 30B1     		cbz	r0, .L41
1592:src/display.c **** 	  if (v == 0)
 282              		.loc 1 1592 2 view .LVU84
 283 0026 9342     		cmp	r3, r2
 284              		.loc 1 1598 11 view .LVU85
 285 0028 0CF8014B 		strb	r4, [ip], #1
1597:src/display.c **** 	    b[i] = j + '0';
 286              		.loc 1 1597 8 view .LVU86
 287 002c 2846     		mov	r0, r5
 288              	.LVL16:
 289              		.loc 1 1598 6 is_stmt 1 view .LVU87
1592:src/display.c **** 	  if (v == 0)
 290              		.loc 1 1592 17 view .LVU88
1592:src/display.c **** 	  if (v == 0)
 291              		.loc 1 1592 12 view .LVU89
1592:src/display.c **** 	  if (v == 0)
 292              		.loc 1 1592 2 is_stmt 0 view .LVU90
ARM GAS  /tmp/ccKZqSeG.s 			page 35


 293 002e 12D0     		beq	.L31
 294 0030 1646     		mov	r6, r2
 295 0032 EDE7     		b	.L30
 296              	.LVL17:
 297              	.L41:
1592:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1592 2 view .LVU91
 299 0034 109A     		ldr	r2, [sp, #64]
 300 0036 002A     		cmp	r2, #0
 301 0038 14BF     		ite	ne
 302 003a 2024     		movne	r4, #32
 303              	.LVL18:
1592:src/display.c **** 	  if (v == 0)
 304              		.loc 1 1592 2 view .LVU92
 305 003c 3024     		moveq	r4, #48
 306 003e 0DEB0600 		add	r0, sp, r6
 307              	.LVL19:
1593:src/display.c **** 	    b[i] = spaces?' ':'0';
 308              		.loc 1 1593 7 view .LVU93
 309 0042 3246     		mov	r2, r6
 310              	.LVL20:
 311              	.L28:
1594:src/display.c **** 	  else {
 312              		.loc 1 1594 6 is_stmt 1 view .LVU94
1592:src/display.c **** 	  if (v == 0)
 313              		.loc 1 1592 18 is_stmt 0 view .LVU95
 314 0044 0132     		adds	r2, r2, #1
 315              	.LVL21:
1592:src/display.c **** 	  if (v == 0)
 316              		.loc 1 1592 2 view .LVU96
 317 0046 9342     		cmp	r3, r2
1594:src/display.c **** 	  else {
 318              		.loc 1 1594 11 view .LVU97
 319 0048 00F8014B 		strb	r4, [r0], #1
 320              	.LVL22:
1592:src/display.c **** 	  if (v == 0)
 321              		.loc 1 1592 17 is_stmt 1 view .LVU98
1592:src/display.c **** 	  if (v == 0)
 322              		.loc 1 1592 12 view .LVU99
1592:src/display.c **** 	  if (v == 0)
 323              		.loc 1 1592 2 is_stmt 0 view .LVU100
 324 004c FADC     		bgt	.L28
 325 004e 5A1E     		subs	r2, r3, #1
 326              	.LVL23:
1592:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1592 2 view .LVU101
 328 0050 B342     		cmp	r3, r6
 329 0052 C8BF     		it	gt
 330 0054 1646     		movgt	r6, r2
 331              	.LVL24:
 332              	.L31:
1599:src/display.c **** 	  }
1600:src/display.c **** 	}
1601:src/display.c **** 	if (b[0] == ' ')
 333              		.loc 1 1601 2 is_stmt 1 view .LVU102
 334              		.loc 1 1601 5 is_stmt 0 view .LVU103
 335 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
ARM GAS  /tmp/ccKZqSeG.s 			page 36


 336              	.LVL25:
1602:src/display.c **** 	  b[0] = '0';
1603:src/display.c **** 
1604:src/display.c **** 	/* Copy across and appropriately leading space things
1605:src/display.c **** 	 */
1606:src/display.c **** 	j = *jin;
 337              		.loc 1 1606 4 view .LVU104
 338 005a D7F80090 		ldr	r9, [r7]
1601:src/display.c **** 	  b[0] = '0';
 339              		.loc 1 1601 5 view .LVU105
 340 005e 202B     		cmp	r3, #32
1602:src/display.c **** 	  b[0] = '0';
 341              		.loc 1 1602 4 is_stmt 1 view .LVU106
1602:src/display.c **** 	  b[0] = '0';
 342              		.loc 1 1602 9 is_stmt 0 view .LVU107
 343 0060 04BF     		itt	eq
 344 0062 3023     		moveq	r3, #48
 345 0064 8DF80030 		strbeq	r3, [sp]
 346              		.loc 1 1606 2 is_stmt 1 view .LVU108
 347              	.LVL26:
1607:src/display.c **** 	while (--i >= 0) {
 348              		.loc 1 1607 2 view .LVU109
 349              		.loc 1 1607 8 view .LVU110
1606:src/display.c **** 	while (--i >= 0) {
 350              		.loc 1 1606 4 is_stmt 0 view .LVU111
 351 0068 0D46     		mov	r5, r1
 352 006a C846     		mov	r8, r9
 353              		.loc 1 1607 8 view .LVU112
 354 006c 3446     		mov	r4, r6
 355              	.LVL27:
 356              	.L35:
1608:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 357              		.loc 1 1608 4 is_stmt 1 view .LVU113
 358              	.LBB187:
 359              	.LBB188:
 340:src/display.c ****   else	set_dig(base, ch);
 360              		.loc 1 340 12 view .LVU114
 361              	.LBE188:
 362              	.LBE187:
 363              		.loc 1 1608 24 is_stmt 0 view .LVU115
 364 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 365              	.LBB192:
 366              	.LBB189:
 340:src/display.c ****   else	set_dig(base, ch);
 367              		.loc 1 340 16 view .LVU116
 368 0072 2B46     		mov	r3, r5
 369              	.LVL28:
 340:src/display.c ****   else	set_dig(base, ch);
 370              		.loc 1 340 16 view .LVU117
 371              	.LBE189:
 372              	.LBI187:
 339:src/display.c ****   if (res) *res++ = ch;
 373              		.loc 1 339 14 is_stmt 1 view .LVU118
 374              	.LBB190:
 340:src/display.c ****   else	set_dig(base, ch);
 375              		.loc 1 340 3 view .LVU119
 340:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccKZqSeG.s 			page 37


 376              		.loc 1 340 6 is_stmt 0 view .LVU120
 377 0074 95B1     		cbz	r5, .L33
 378              	.LVL29:
 340:src/display.c ****   else	set_dig(base, ch);
 379              		.loc 1 340 19 view .LVU121
 380 0076 03F8011B 		strb	r1, [r3], #1
 381              	.LVL30:
 340:src/display.c ****   else	set_dig(base, ch);
 382              		.loc 1 340 16 view .LVU122
 383 007a 1D46     		mov	r5, r3
 384              	.LVL31:
 385              	.L34:
 342:src/display.c **** }
 386              		.loc 1 342 3 is_stmt 1 view .LVU123
 342:src/display.c **** }
 387              		.loc 1 342 3 is_stmt 0 view .LVU124
 388              	.LBE190:
 389              	.LBE192:
1609:src/display.c **** 	  j += SEGS_PER_DIGIT;
 390              		.loc 1 1609 4 is_stmt 1 view .LVU125
1607:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 391              		.loc 1 1607 8 is_stmt 0 view .LVU126
 392 007c 013C     		subs	r4, r4, #1
 393              	.LVL32:
 394              		.loc 1 1609 6 view .LVU127
 395 007e 08F10908 		add	r8, r8, #9
 396              	.LVL33:
1607:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 397              		.loc 1 1607 8 is_stmt 1 view .LVU128
 398 0082 F4D5     		bpl	.L35
1610:src/display.c **** 	}
1611:src/display.c **** 	*jin = j;
 399              		.loc 1 1611 7 is_stmt 0 view .LVU129
 400 0084 26EAE676 		bic	r6, r6, r6, asr #31
 401 0088 09F10909 		add	r9, r9, #9
 402              		.loc 1 1611 2 is_stmt 1 view .LVU130
 403              		.loc 1 1611 7 is_stmt 0 view .LVU131
 404 008c 06EBC606 		add	r6, r6, r6, lsl #3
 405 0090 4E44     		add	r6, r6, r9
1612:src/display.c **** 	return str;
1613:src/display.c ****       }
 406              		.loc 1 1613 7 view .LVU132
 407 0092 2846     		mov	r0, r5
1611:src/display.c **** 	return str;
 408              		.loc 1 1611 7 view .LVU133
 409 0094 3E60     		str	r6, [r7]
1612:src/display.c **** 	return str;
 410              		.loc 1 1612 2 is_stmt 1 view .LVU134
 411              		.loc 1 1613 7 is_stmt 0 view .LVU135
 412 0096 09B0     		add	sp, sp, #36
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.LVL34:
 418              	.L33:
 419              		.cfi_restore_state
ARM GAS  /tmp/ccKZqSeG.s 			page 38


 420              	.LBB193:
 421              	.LBB191:
 341:src/display.c ****   return res;
 422              		.loc 1 341 8 is_stmt 1 view .LVU136
 423 009c 4046     		mov	r0, r8
 424 009e FFF7FEFF 		bl	set_dig
 425              	.LVL35:
 341:src/display.c ****   return res;
 426              		.loc 1 341 8 is_stmt 0 view .LVU137
 427 00a2 EBE7     		b	.L34
 428              	.L43:
 429              		.align	2
 430              	.L42:
 431 00a4 CDCCCCCC 		.word	-858993459
 432              	.LBE191:
 433              	.LBE193:
 434              		.cfi_endproc
 435              	.LFE21:
 437              		.section	.text.set_exp_digits_string,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	set_exp_digits_string:
 446              	.LVL36:
 447              	.LFB13:
 357:src/display.c ****   int i;
 448              		.loc 1 357 63 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****   const int n = res == NULL ? 3 : 4;
 452              		.loc 1 358 3 view .LVU139
 359:src/display.c **** 
 453              		.loc 1 359 3 view .LVU140
 357:src/display.c ****   int i;
 454              		.loc 1 357 63 is_stmt 0 view .LVU141
 455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 456              		.cfi_def_cfa_offset 24
 457              		.cfi_offset 3, -24
 458              		.cfi_offset 4, -20
 459              		.cfi_offset 5, -16
 460              		.cfi_offset 6, -12
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 359:src/display.c **** 
 463              		.loc 1 359 33 view .LVU142
 464 0002 0D1E     		subs	r5, r1, #0
 465 0004 0CBF     		ite	eq
 466 0006 0326     		moveq	r6, #3
 467 0008 0426     		movne	r6, #4
 468              	.LVL37:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 469              		.loc 1 361 3 is_stmt 1 view .LVU143
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccKZqSeG.s 			page 39


 470              		.loc 1 361 13 view .LVU144
 471 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 472 000e 0446     		mov	r4, r0
 473 0010 0644     		add	r6, r6, r0
 474              	.LVL38:
 475              	.LBB194:
 476              	.LBB195:
 341:src/display.c ****   return res;
 477              		.loc 1 341 8 is_stmt 0 view .LVU145
 478 0012 03F16507 		add	r7, r3, #101
 479 0016 04E0     		b	.L46
 480              	.LVL39:
 481              	.L54:
 340:src/display.c ****   else	set_dig(base, ch);
 482              		.loc 1 340 19 view .LVU146
 483 0018 03F8011B 		strb	r1, [r3], #1
 484              	.LVL40:
 340:src/display.c ****   else	set_dig(base, ch);
 485              		.loc 1 340 19 view .LVU147
 486              	.LBE195:
 487              	.LBE194:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 488              		.loc 1 361 3 view .LVU148
 489 001c B442     		cmp	r4, r6
 490              	.LBB201:
 491              	.LBB196:
 340:src/display.c ****   else	set_dig(base, ch);
 492              		.loc 1 340 16 view .LVU149
 493 001e 1D46     		mov	r5, r3
 494              	.LVL41:
 342:src/display.c **** }
 495              		.loc 1 342 3 is_stmt 1 view .LVU150
 342:src/display.c **** }
 496              		.loc 1 342 3 is_stmt 0 view .LVU151
 497              	.LBE196:
 498              	.LBE201:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 499              		.loc 1 361 36 is_stmt 1 view .LVU152
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 500              		.loc 1 361 13 view .LVU153
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 501              		.loc 1 361 3 is_stmt 0 view .LVU154
 502 0020 0CD0     		beq	.L44
 503              	.LVL42:
 504              	.L46:
 362:src/display.c **** }
 505              		.loc 1 362 5 is_stmt 1 discriminator 3 view .LVU155
 506              	.LBB202:
 507              	.LBB197:
 340:src/display.c ****   else	set_dig(base, ch);
 508              		.loc 1 340 12 discriminator 3 view .LVU156
 340:src/display.c ****   else	set_dig(base, ch);
 509              		.loc 1 340 12 is_stmt 0 discriminator 3 view .LVU157
 510              	.LBE197:
 511              	.LBE202:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 512              		.loc 1 361 23 discriminator 3 view .LVU158
ARM GAS  /tmp/ccKZqSeG.s 			page 40


 513 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 514              	.LVL43:
 515              	.LBB203:
 516              	.LBB198:
 340:src/display.c ****   else	set_dig(base, ch);
 517              		.loc 1 340 16 discriminator 3 view .LVU159
 518 0026 2B46     		mov	r3, r5
 519              	.LVL44:
 340:src/display.c ****   else	set_dig(base, ch);
 520              		.loc 1 340 16 discriminator 3 view .LVU160
 521              	.LBE198:
 522              	.LBI194:
 339:src/display.c ****   if (res) *res++ = ch;
 523              		.loc 1 339 14 is_stmt 1 discriminator 3 view .LVU161
 524              	.LBB199:
 340:src/display.c ****   else	set_dig(base, ch);
 525              		.loc 1 340 3 discriminator 3 view .LVU162
 526              	.LBE199:
 527              	.LBE203:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 528              		.loc 1 361 17 is_stmt 0 discriminator 3 view .LVU163
 529 0028 41B1     		cbz	r1, .L44
 530              	.LVL45:
 531              	.LBB204:
 532              	.LBB200:
 340:src/display.c ****   else	set_dig(base, ch);
 533              		.loc 1 340 6 discriminator 4 view .LVU164
 534 002a 002D     		cmp	r5, #0
 535 002c F4D1     		bne	.L54
 341:src/display.c ****   return res;
 536              		.loc 1 341 8 is_stmt 1 view .LVU165
 537 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 538 0032 3844     		add	r0, r0, r7
 539 0034 FFF7FEFF 		bl	set_dig
 540              	.LVL46:
 342:src/display.c **** }
 541              		.loc 1 342 3 view .LVU166
 342:src/display.c **** }
 542              		.loc 1 342 3 is_stmt 0 view .LVU167
 543              	.LBE200:
 544              	.LBE204:
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 545              		.loc 1 361 36 is_stmt 1 view .LVU168
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 546              		.loc 1 361 13 view .LVU169
 361:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 547              		.loc 1 361 3 is_stmt 0 view .LVU170
 548 0038 B442     		cmp	r4, r6
 549 003a F2D1     		bne	.L46
 550              	.LVL47:
 551              	.L44:
 363:src/display.c **** 
 552              		.loc 1 363 1 view .LVU171
 553 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 363:src/display.c **** 
 554              		.loc 1 363 1 view .LVU172
 555              		.cfi_endproc
ARM GAS  /tmp/ccKZqSeG.s 			page 41


 556              	.LFE13:
 558 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 559              		.align	1
 560              		.p2align 2,,3
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	hms_step:
 567              	.LVL48:
 568              	.LFB20:
1579:src/display.c **** 	decNumber n;
 569              		.loc 1 1579 75 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 40
 572              		@ frame_needed = 0, uses_anonymous_args = 0
1580:src/display.c **** 
 573              		.loc 1 1580 2 view .LVU174
1582:src/display.c **** 	*v = dn_to_int(&n);
 574              		.loc 1 1582 2 view .LVU175
1579:src/display.c **** 	decNumber n;
 575              		.loc 1 1579 75 is_stmt 0 view .LVU176
 576 0000 70B5     		push	{r4, r5, r6, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 8AB0     		sub	sp, sp, #40
 583              		.cfi_def_cfa_offset 56
1579:src/display.c **** 	decNumber n;
 584              		.loc 1 1579 75 view .LVU177
 585 0004 0446     		mov	r4, r0
 586 0006 1646     		mov	r6, r2
1582:src/display.c **** 	*v = dn_to_int(&n);
 587              		.loc 1 1582 2 view .LVU178
 588 0008 01A8     		add	r0, sp, #4
 589              	.LVL49:
1582:src/display.c **** 	*v = dn_to_int(&n);
 590              		.loc 1 1582 2 view .LVU179
 591 000a 0A4A     		ldr	r2, .L57
 592              	.LVL50:
1579:src/display.c **** 	decNumber n;
 593              		.loc 1 1579 75 view .LVU180
 594 000c 0D46     		mov	r5, r1
1582:src/display.c **** 	*v = dn_to_int(&n);
 595              		.loc 1 1582 2 view .LVU181
 596 000e FFF7FEFF 		bl	decNumberMod
 597              	.LVL51:
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 598              		.loc 1 1583 2 is_stmt 1 view .LVU182
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 599              		.loc 1 1583 7 is_stmt 0 view .LVU183
 600 0012 01A8     		add	r0, sp, #4
 601 0014 FFF7FEFF 		bl	dn_to_int
 602              	.LVL52:
1584:src/display.c **** 	decNumberTrunc(res, &n);
ARM GAS  /tmp/ccKZqSeG.s 			page 42


 603              		.loc 1 1584 2 view .LVU184
 604 0018 2946     		mov	r1, r5
1583:src/display.c **** 	dn_mulpow10(&n, x, -2);
 605              		.loc 1 1583 5 view .LVU185
 606 001a 3060     		str	r0, [r6]
1584:src/display.c **** 	decNumberTrunc(res, &n);
 607              		.loc 1 1584 2 is_stmt 1 view .LVU186
 608 001c 6FF00102 		mvn	r2, #1
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	dn_mulpow10
 611              	.LVL53:
1585:src/display.c ****       }
 612              		.loc 1 1585 2 view .LVU187
 613 0026 01A9     		add	r1, sp, #4
 614 0028 2046     		mov	r0, r4
 615 002a FFF7FEFF 		bl	decNumberTrunc
 616              	.LVL54:
1586:src/display.c **** 
 617              		.loc 1 1586 7 is_stmt 0 view .LVU188
 618 002e 0AB0     		add	sp, sp, #40
 619              		.cfi_def_cfa_offset 16
 620              		@ sp needed
 621 0030 70BD     		pop	{r4, r5, r6, pc}
 622              	.LVL55:
 623              	.L58:
1586:src/display.c **** 
 624              		.loc 1 1586 7 view .LVU189
 625 0032 00BF     		.align	2
 626              	.L57:
 627 0034 00000000 		.word	const_100
 628              		.cfi_endproc
 629              	.LFE20:
 631              		.section	.text.s_s_sized,"ax",%progbits
 632              		.align	1
 633              		.p2align 2,,3
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	s_s_sized:
 640              	.LVL56:
 641              	.LFB38:
1614:src/display.c **** 
1615:src/display.c **** 
1616:src/display.c ****       /* Display the number in H.MS mode.
1617:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1618:src/display.c ****        */
1619:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1620:src/display.c **** 	decNumber x, y, a, t, u;
1621:src/display.c **** 	int j=0;
1622:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1623:src/display.c **** 	unsigned int hr, min, sec, fs;
1624:src/display.c **** 
1625:src/display.c **** 	if (check_special_dn(rgx, res)) {
1626:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1627:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1628:src/display.c **** 	  return;
ARM GAS  /tmp/ccKZqSeG.s 			page 43


1629:src/display.c **** 	}
1630:src/display.c **** 
1631:src/display.c **** 	set_separator_decimal_modes();
1632:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1633:src/display.c **** 	dn_abs(&a, rgx);
1634:src/display.c **** 	if (decNumberIsNegative(&x)) {
1635:src/display.c **** 	  if (res != NULL)
1636:src/display.c **** 	    *res++ += '-';
1637:src/display.c **** 	  else
1638:src/display.c **** 	    SET_MANT_SIGN;
1639:src/display.c **** 	  dn_minus(&x, &x);
1640:src/display.c **** 	}
1641:src/display.c **** 
1642:src/display.c **** 	decNumberHR2HMS(&y, &x);
1643:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1644:src/display.c **** 	decNumberRound(&u, &t);
1645:src/display.c **** 
1646:src/display.c **** 	hms_step(&t, &u, &fs);
1647:src/display.c **** 	hms_step(&u, &t, &sec);
1648:src/display.c **** 	hms_step(&t, &u, &min);
1649:src/display.c **** 	hr = dn_to_int(&t);
1650:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1651:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1652:src/display.c **** 
1653:src/display.c **** 	// degrees
1654:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1655:src/display.c **** 	res = set_dig_s(j, '@', res);
1656:src/display.c **** 	j += SEGS_PER_DIGIT;
1657:src/display.c **** 
1658:src/display.c **** 	// minutes
1659:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1660:src/display.c **** 	res = set_dig_s(j, '\'', res);
1661:src/display.c **** 	j += SEGS_PER_DIGIT;
1662:src/display.c **** 
1663:src/display.c **** 	// seconds
1664:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1665:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1666:src/display.c **** 
1667:src/display.c **** 	// Fractional seconds
1668:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1669:src/display.c **** 
1670:src/display.c **** 	// We're now pointing at the exponent's first digit...
1671:src/display.c **** 	res = set_dig_s(j, '"', res);
1672:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1673:src/display.c **** 
1674:src/display.c **** 	// Check for values too big or small
1675:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1676:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1677:src/display.c **** 	} else if (! dn_eq0(&a)) {
1678:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1679:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1680:src/display.c **** 	  }
1681:src/display.c **** 	}
1682:src/display.c ****       }
1683:src/display.c **** 
1684:src/display.c **** 
1685:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
ARM GAS  /tmp/ccKZqSeG.s 			page 44


1686:src/display.c **** 	decNumber x, w, n, d, t;
1687:src/display.c **** 	char buf[32], *p = buf;
1688:src/display.c **** 	int j;
1689:src/display.c **** 
1690:src/display.c **** 	if (check_special_dn(rgx, res))
1691:src/display.c **** 	  return 1;
1692:src/display.c **** 	dn_abs(&x, rgx);
1693:src/display.c **** 	if (dn_ge(&x, &const_100000))
1694:src/display.c **** 	  return 0;
1695:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1696:src/display.c **** 	  return 0;
1697:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1698:src/display.c **** 	  if (res != NULL)
1699:src/display.c **** 	    *res++ += '-';
1700:src/display.c **** 	  else
1701:src/display.c **** 	    SET_MANT_SIGN;
1702:src/display.c **** 	}
1703:src/display.c **** 	decNumberFrac(&w, &x);
1704:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1705:src/display.c **** 
1706:src/display.c **** 	dn_divide(&t, &n, &d);
1707:src/display.c **** 	dn_compare(&t, &t, &w);
1708:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1709:src/display.c **** 
1710:src/display.c **** 	if (dn_eq(&n, &d)) {
1711:src/display.c **** 	  dn_inc(&w);
1712:src/display.c **** 	  decNumberZero(&n);
1713:src/display.c **** 	}
1714:src/display.c **** 
1715:src/display.c **** 	if (!UState.improperfrac) {
1716:src/display.c **** 	  if (!dn_eq0(&w)) {
1717:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1718:src/display.c **** 	    *p++ = ' ';
1719:src/display.c **** 	  }
1720:src/display.c **** 	} else {
1721:src/display.c **** 	  dn_multiply(&x, &w, &d);
1722:src/display.c **** 	  dn_add(&n, &n, &x);
1723:src/display.c **** 	}
1724:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1725:src/display.c **** 	*p++ = '/';
1726:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1727:src/display.c **** 	*p = '\0';
1728:src/display.c **** 	if ((p - 12) > buf) {
1729:src/display.c **** 	  p -= 12;
1730:src/display.c **** 	  *p = '<';
1731:src/display.c **** 	} else	p = buf;
1732:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1733:src/display.c **** 	  res = set_dig_s(j, *p, res);
1734:src/display.c **** 	  j += SEGS_PER_DIGIT;
1735:src/display.c **** 	}
1736:src/display.c **** 
1737:src/display.c **** 	if (dn_eq0(&t))
1738:src/display.c **** 	  p = (char *)S7_fract_EQ;
1739:src/display.c **** 	else if (decNumberIsNegative(&t))
1740:src/display.c **** 	  p = (char *)S7_fract_LT;
1741:src/display.c **** 	else
1742:src/display.c **** 	  p = (char *)S7_fract_GT;
ARM GAS  /tmp/ccKZqSeG.s 			page 45


1743:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1744:src/display.c **** 	  res = set_dig_s(j, *p, res);
1745:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1746:src/display.c **** 	}
1747:src/display.c **** 	return 1;
1748:src/display.c ****       }
1749:src/display.c **** 
1750:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1751:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1752:src/display.c **** 	decNumber c;
1753:src/display.c **** 	int true_exp, x=0;
1754:src/display.c **** 	int min_pos_exp, max_neg_exp;
1755:src/display.c **** 
1756:src/display.c **** 	if ( mode != MODE_STD ) {
1757:src/display.c **** 	  min_pos_exp = 9;
1758:src/display.c **** 	  max_neg_exp = -5;
1759:src/display.c **** 	}
1760:src/display.c **** 	else {
1761:src/display.c **** 	  min_pos_exp = 12;
1762:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1763:src/display.c **** 	}
1764:src/display.c **** 
1765:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1766:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1767:src/display.c **** 
1768:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1769:src/display.c **** 	  x = *dd;
1770:src/display.c **** 	}
1771:src/display.c **** 
1772:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1773:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1774:src/display.c **** 	  *dd += -true_exp;
1775:src/display.c **** 	  return MODE_FIX;
1776:src/display.c **** 	}
1777:src/display.c **** 
1778:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1779:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1780:src/display.c **** 	}
1781:src/display.c **** 	else {
1782:src/display.c **** 	  return MODE_STD;
1783:src/display.c **** 	}
1784:src/display.c ****       }
1785:src/display.c **** #else
1786:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1787:src/display.c **** 	decNumber b, c;
1788:src/display.c **** 
1789:src/display.c **** 	dn_1(&b);
1790:src/display.c **** 	b.exponent -= UState.dispdigs;
1791:src/display.c **** 	dn_abs(&c, z);
1792:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1793:src/display.c **** 	  return MODE_FIX;
1794:src/display.c **** 	return MODE_STD;
1795:src/display.c ****       }
1796:src/display.c **** #endif
1797:src/display.c **** 
1798:src/display.c ****       /* SHOW display mode
1799:src/display.c ****        * in double precision show left or right part
ARM GAS  /tmp/ccKZqSeG.s 			page 46


1800:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1801:src/display.c ****        */
1802:src/display.c ****       static void show_x(char *x, int exp) {
1803:src/display.c **** 	const int dbl = is_dblmode();
1804:src/display.c **** 	char *p;
1805:src/display.c **** 	int i, j;
1806:src/display.c **** 	char *upper_str;
1807:src/display.c **** 	enum separator_modes separator_mode;
1808:src/display.c **** 	char decimal_mark;
1809:src/display.c **** 	char thousands_sep;
1810:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1811:src/display.c **** 	const int grouping = 0;
1812:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1813:src/display.c **** 	const int grouping = !UState.nothousands;
1814:src/display.c **** #else
1815:src/display.c **** 	const int grouping = 1;
1816:src/display.c **** #endif
1817:src/display.c **** 	int negative;
1818:src/display.c **** 
1819:src/display.c **** 	if (x[0] == '-') {
1820:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1821:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1822:src/display.c **** 
1823:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1824:src/display.c **** 	  xcopy(x, small_minus, 4);
1825:src/display.c **** 	  x += 4;
1826:src/display.c **** 	  negative = 4;
1827:src/display.c **** #else
1828:src/display.c **** 	  ++x;
1829:src/display.c **** 	  negative = 1;
1830:src/display.c **** #endif
1831:src/display.c **** 	}
1832:src/display.c **** 	else negative = 0;
1833:src/display.c **** 
1834:src/display.c **** 	p = find_char(x, '\0');
1835:src/display.c **** 	xset(p, '0', 34 - (p - x));
1836:src/display.c **** 
1837:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1838:src/display.c **** 	  separator_mode = SEP_COMMA;
1839:src/display.c **** 	  decimal_mark = '.';
1840:src/display.c **** 	  thousands_sep = ',';
1841:src/display.c **** 	}
1842:src/display.c **** 	else {
1843:src/display.c **** 	  separator_mode = SEP_DOT;
1844:src/display.c **** 	  decimal_mark = ',';
1845:src/display.c **** 	  thousands_sep = '.';
1846:src/display.c **** 	}
1847:src/display.c **** 
1848:src/display.c **** 	if (State2.window) { // right half in double precision mode
1849:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1850:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1851:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1852:src/display.c **** 
1853:src/display.c **** 	  upper_str = x + 3;
1854:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1855:src/display.c **** 	  if (grouping) {
1856:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
ARM GAS  /tmp/ccKZqSeG.s 			page 47


1857:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1858:src/display.c **** 	    x += 3 + 13 + 7;
1859:src/display.c **** 	  }
1860:src/display.c **** 	  else x += 3 + 13 + 6;
1861:src/display.c **** #else
1862:src/display.c **** 	  upper_str = x + 13;
1863:src/display.c **** 	  xset(upper_str, '.', 3);
1864:src/display.c **** 	  if (grouping) {
1865:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1866:src/display.c **** 	    upper_str[6] = thousands_sep;
1867:src/display.c **** 	    x += 13 + 3 + 7;
1868:src/display.c **** 	  }
1869:src/display.c **** 	  else x += 13 + 3 + 6;
1870:src/display.c **** #endif
1871:src/display.c **** 	  negative = 0;
1872:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1873:src/display.c **** 	}
1874:src/display.c **** 	else {
1875:src/display.c **** 	  upper_str = x;
1876:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1877:src/display.c **** 	  x[1] = decimal_mark;
1878:src/display.c **** 	  if (grouping) {
1879:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1880:src/display.c **** 	    x[5] = thousands_sep;
1881:src/display.c **** 	    x += 9;
1882:src/display.c **** 	  }
1883:src/display.c **** 	  else x += 8;
1884:src/display.c **** 	  if (dbl) {
1885:src/display.c **** 	    if (exp < 0) {
1886:src/display.c **** 	      x[9] = '-';
1887:src/display.c **** 	      exp = -exp;
1888:src/display.c **** 	    }
1889:src/display.c **** 	    else
1890:src/display.c **** 	      x[9] = ' ';
1891:src/display.c **** 	    j = exp / 1000;
1892:src/display.c **** 	    x[10] = '0' + j;
1893:src/display.c **** 	    exp -= 1000 * j;
1894:src/display.c **** 	  }
1895:src/display.c **** 	  else {
1896:src/display.c **** 	    x[9] = '\0';
1897:src/display.c **** 	    x[10] = '\0';
1898:src/display.c **** 	  }
1899:src/display.c **** 	  xcopy(x + 1, x, 11);
1900:src/display.c **** 	  *x = 0;
1901:src/display.c **** 	  set_exp(exp, 1, CNULL);
1902:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1903:src/display.c **** 	}
1904:src/display.c **** 	if (grouping) {
1905:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1906:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1907:src/display.c **** 	  }
1908:src/display.c **** 	}
1909:src/display.c **** 
1910:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1911:src/display.c **** 	  set_dig(j, x[i]);
1912:src/display.c **** 
1913:src/display.c **** 	*x = '\0';
ARM GAS  /tmp/ccKZqSeG.s 			page 48


1914:src/display.c **** 	set_status(upper_str - negative);
1915:src/display.c ****       }
1916:src/display.c **** 
1917:src/display.c **** 
1918:src/display.c ****       /* Display the X register in the numeric portion of the display.
1919:src/display.c ****        * We have to account for the various display modes and numbers of
1920:src/display.c ****        * digits.
1921:src/display.c ****        */
1922:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1923:src/display.c **** 	decNumber z;
1924:src/display.c **** 	int digits = DISPLAY_DIGITS;
1925:src/display.c **** 
1926:src/display.c **** 	if (dbl)
1927:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1928:src/display.c **** 	else
1929:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1930:src/display.c **** 	set_x_dn(&z, res, &digits);
1931:src/display.c ****       }
1932:src/display.c **** 
1933:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1934:src/display.c **** 	char x[50], *obp = x;
1935:src/display.c **** 	int odig = 0;
1936:src/display.c **** 	int show_exp = 0;
1937:src/display.c **** 	int j;
1938:src/display.c **** 	char mantissa[64];
1939:src/display.c **** 	int exp = 0;
1940:src/display.c **** 	char *p = mantissa;
1941:src/display.c **** 	char *r;
1942:src/display.c **** 	const char *q;
1943:src/display.c **** 	int count, i;
1944:src/display.c **** 	int extra_digits = 0;
1945:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1946:src/display.c **** 	int dd;
1947:src/display.c **** 	int dispdigs;
1948:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1949:src/display.c **** #else
1950:src/display.c **** 	int dd = UState.dispdigs;
1951:src/display.c **** 	int mode = UState.dispmode;
1952:src/display.c **** #endif
1953:src/display.c **** 	int c;
1954:src/display.c **** 	int negative = 0;
1955:src/display.c **** 	int trimzeros = 0;
1956:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1957:src/display.c **** 	const int show_large_exponent = 0;
1958:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1959:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1960:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1961:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1962:src/display.c **** #else
1963:src/display.c **** 	const int show_large_exponent = 1;
1964:src/display.c **** #endif
1965:src/display.c **** 
1966:src/display.c **** 	set_separator_decimal_modes();
1967:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1968:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1969:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1970:src/display.c **** 	    if (State2.hms) {
ARM GAS  /tmp/ccKZqSeG.s 			page 49


1971:src/display.c **** 	      set_x_hms(z, res);
1972:src/display.c **** 	      return;
1973:src/display.c **** 	    }
1974:src/display.c **** 	    else if (UState.fract) {
1975:src/display.c **** 	      if (set_x_fract(z, res))
1976:src/display.c **** 		return;
1977:src/display.c **** 	    }
1978:src/display.c **** 	  }
1979:src/display.c **** 	}		
1980:src/display.c **** #else
1981:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1982:src/display.c **** 	  if (State2.hms) {
1983:src/display.c **** 	    set_x_hms(z, res);
1984:src/display.c **** 	    State2.hms = 0;
1985:src/display.c **** 	    return;
1986:src/display.c **** 	  } else if (UState.fract) {
1987:src/display.c **** 	    if (set_x_fract(z, res))
1988:src/display.c **** 	      return;
1989:src/display.c **** 	  }
1990:src/display.c **** 	}
1991:src/display.c **** #endif
1992:src/display.c **** 
1993:src/display.c **** 	if (check_special_dn(z, res))
1994:src/display.c **** 	  return;
1995:src/display.c **** 
1996:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1997:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1998:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1999:src/display.c **** 	  z->exponent = 0;
2000:src/display.c **** 	}
2001:src/display.c **** 
2002:src/display.c **** 	xset(x, '\0', sizeof(x));
2003:src/display.c **** 
2004:src/display.c **** 	if (dn_eq0(z)) {
2005:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2006:src/display.c **** 	    x[0] = '-';
2007:src/display.c **** 	    x[1] = '0';
2008:src/display.c **** 	  } else
2009:src/display.c **** 	    x[0] = '0';
2010:src/display.c **** 	} else
2011:src/display.c **** 	  decNumberToString(z, x);
2012:src/display.c **** 
2013:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2014:src/display.c **** 	  show_x(x, exp);
2015:src/display.c **** 	  return;
2016:src/display.c **** 	}
2017:src/display.c **** 
2018:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2019:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2020:src/display.c **** 	  //  ALL mode: fill the display
2021:src/display.c **** 	  dd = *display_digits - 1;
2022:src/display.c **** 	else
2023:src/display.c **** 	  dd = dispdigs;
2024:src/display.c **** 
2025:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2026:src/display.c **** 	  int orig_mode = mode;
2027:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 50


2028:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2029:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2030:src/display.c **** 	    // allow zeros to be trimmed
2031:src/display.c **** 	    trimzeros = 1;
2032:src/display.c **** 	  if (orig_mode == MODE_STD)
2033:src/display.c **** 	    dd = *display_digits - 1;
2034:src/display.c ****  	}
2035:src/display.c **** #else
2036:src/display.c **** 	if (mode == MODE_STD) {
2037:src/display.c **** 	  mode = std_round_fix(z);
2038:src/display.c **** 	  trimzeros = 1;
2039:src/display.c **** 	  dd = *display_digits - 1;
2040:src/display.c **** 	} else if (dd >= *display_digits)
2041:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2042:src/display.c **** 	  dd = *display_digits - 1;
2043:src/display.c **** #endif
2044:src/display.c **** 
2045:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2046:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2047:src/display.c **** 
2048:src/display.c **** 	q = find_char(x, 'E');
2049:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2050:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2051:src/display.c **** 	if (q == NULL) exp = 0;
2052:src/display.c **** 	else {
2053:src/display.c **** 	  exp = s_to_i(q+1);
2054:src/display.c **** 	  if (*q == 'D') exp = -exp;
2055:src/display.c **** 	}
2056:src/display.c **** #else
2057:src/display.c **** 	if (q == NULL) exp = 0;
2058:src/display.c **** 	else exp = s_to_i(q+1);
2059:src/display.c **** #endif
2060:src/display.c **** 
2061:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2062:src/display.c **** 	for (q=x; *q == ' '; q++);
2063:src/display.c **** 	if (!res) {
2064:src/display.c **** 	  CLR_EXP_SIGN;
2065:src/display.c **** 	  CLR_MANT_SIGN;
2066:src/display.c **** 	}
2067:src/display.c **** 	if (*q == '-') {
2068:src/display.c **** 	  negative = 1;
2069:src/display.c **** 	  q++;
2070:src/display.c **** 	} else if (*q == '+')
2071:src/display.c **** 	  q++;
2072:src/display.c **** 	for (; *q == '0'; q++);
2073:src/display.c **** 	if (*q == '.') {
2074:src/display.c **** 	  do
2075:src/display.c **** 	    exp--;
2076:src/display.c **** 	  while (*++q == '0');
2077:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2078:src/display.c **** 	    *p++ = *q++;
2079:src/display.c **** 	} else {
2080:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2081:src/display.c **** 	    *p++ = *q++;
2082:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2083:src/display.c **** 	    *p++ = *q++;
2084:src/display.c **** 	    exp++;
ARM GAS  /tmp/ccKZqSeG.s 			page 51


2085:src/display.c **** 	  }
2086:src/display.c **** 	  if (*q == '.') {
2087:src/display.c **** 	    q++;
2088:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2089:src/display.c **** 	      *p++ = *q++;
2090:src/display.c **** 	  }
2091:src/display.c **** 	}
2092:src/display.c **** 
2093:src/display.c **** 	if (mode == MODE_FIX) {
2094:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2095:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2096:src/display.c **** 	  else {
2097:src/display.c **** 	    extra_digits = exp;
2098:src/display.c **** 	    /* We might have push the fixed decimals off the
2099:src/display.c **** 	     * screen so adjust if so.
2100:src/display.c **** 	     */
2101:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2102:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2103:src/display.c **** 	  }
2104:src/display.c **** 	}
2105:src/display.c **** 
2106:src/display.c **** 	// Round the mantissa to the number of digits desired
2107:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2108:src/display.c **** 	if (*p >= '5') {	// Round up
2109:src/display.c **** 	  *p = '0';
2110:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2111:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2112:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2113:src/display.c **** 	    mantissa[0] = '1';
2114:src/display.c **** 	    exp++;
2115:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2116:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2117:src/display.c **** 	      extra_digits = 0;
2118:src/display.c **** 	    }
2119:src/display.c **** 	  } else {
2120:src/display.c **** 	    while (*--p == '9')
2121:src/display.c **** 	      *p = '0';
2122:src/display.c **** 	    (*p)++;
2123:src/display.c **** 	  }
2124:src/display.c **** 	}
2125:src/display.c **** 
2126:src/display.c **** 	// Zap what is left
2127:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2128:src/display.c **** 
2129:src/display.c **** 	p = mantissa;
2130:src/display.c **** 	switch (mode) {
2131:src/display.c **** 	default:
2132:src/display.c **** 	case MODE_STD:   
2133:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2134:src/display.c **** 	  if (count != *display_digits)
2135:src/display.c **** 	    count++;
2136:src/display.c **** 	  // Too big or too small to fit on display
2137:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2138:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2139:src/display.c **** 	    case -1:
2140:src/display.c **** 	    case 2:
2141:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccKZqSeG.s 			page 52


2142:src/display.c **** 	      odig++;
2143:src/display.c **** 	      dd--;
2144:src/display.c **** 	      exp--;
2145:src/display.c **** 	    case -2:
2146:src/display.c **** 	    case 1:
2147:src/display.c **** 	      *obp++ = *p++;
2148:src/display.c **** 	      odig++;
2149:src/display.c **** 	      dd--;
2150:src/display.c **** 	      exp--;
2151:src/display.c **** 	    case 0:
2152:src/display.c **** 	      ;
2153:src/display.c **** 	    };
2154:src/display.c **** 	    *obp++ = *p++;
2155:src/display.c **** 	    odig++;
2156:src/display.c **** 	    *obp++ = '.';
2157:src/display.c **** 	    for (i=1; i<count; i++) {
2158:src/display.c **** 	      *obp++ = *p++;
2159:src/display.c **** 	      odig++;
2160:src/display.c **** 	    }
2161:src/display.c **** 	    show_exp = 1;
2162:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2163:src/display.c **** 	    for(i=0; i<=exp; i++) {
2164:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2165:src/display.c **** 		*obp++ = ',';
2166:src/display.c **** 	      *obp++ = *p++;
2167:src/display.c **** 	      odig++;
2168:src/display.c **** 	    }
2169:src/display.c **** 	    *obp++ = '.';
2170:src/display.c **** 	    if (count > (exp + 1)) {
2171:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2172:src/display.c **** 		*obp++ = *p++;
2173:src/display.c **** 		odig++;
2174:src/display.c **** 	      }
2175:src/display.c **** 	    }
2176:src/display.c **** 	  } else {		// All digits to right of decimal point
2177:src/display.c **** 	    *obp++ = '0';
2178:src/display.c **** 	    odig++;
2179:src/display.c **** 	    *obp++ = '.';
2180:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2181:src/display.c **** 	      *obp++ = '0';
2182:src/display.c **** 	      odig++;
2183:src/display.c **** 	    }
2184:src/display.c **** 	    for (i=0; i<count; i++) {
2185:src/display.c **** 	      *obp++ = *p++;
2186:src/display.c **** 	      odig++;
2187:src/display.c **** 	    }
2188:src/display.c **** 	  }
2189:src/display.c **** 	  break;
2190:src/display.c **** 
2191:src/display.c **** 	case MODE_FIX:
2192:src/display.c **** 	  j = 0;
2193:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2194:src/display.c **** 	    for (i=0; i<=exp; i++) {
2195:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2196:src/display.c **** 		*obp++ = ',';
2197:src/display.c **** 	      *obp++ = *p++;
2198:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccKZqSeG.s 			page 53


2199:src/display.c **** 	    }
2200:src/display.c **** 	    *obp++ = '.';
2201:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2202:src/display.c **** 	      *obp++ = *p++;
2203:src/display.c **** 	      odig++;
2204:src/display.c **** 	    }
2205:src/display.c **** 	  } else {		// All digits to right of decimal point
2206:src/display.c **** 	    *obp++ = '0';
2207:src/display.c **** 	    odig++;
2208:src/display.c **** 	    *obp++ = '.';
2209:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2210:src/display.c **** 	      *obp++ = '0';
2211:src/display.c **** 	      odig++;
2212:src/display.c **** 	      dd--;
2213:src/display.c **** 	    }
2214:src/display.c **** 	    while (dd-- > 0) {
2215:src/display.c **** 	      *obp++ = *p++;
2216:src/display.c **** 	      odig++;
2217:src/display.c **** 	    }
2218:src/display.c **** 	  }
2219:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2220:src/display.c **** 	  if (trimzeros)
2221:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2222:src/display.c **** 	      obp--;
2223:src/display.c **** 	      odig--;
2224:src/display.c **** 	    }
2225:src/display.c **** #endif			
2226:src/display.c **** 	  break;
2227:src/display.c **** 
2228:src/display.c **** 	case MODE_ENG:
2229:src/display.c **** 	  switch (exp % 3) {
2230:src/display.c **** 	  case -1:
2231:src/display.c **** 	  case 2:
2232:src/display.c **** 	    *obp++ = *p++;
2233:src/display.c **** 	    odig++;
2234:src/display.c **** 	    dd--;
2235:src/display.c **** 	    exp--;
2236:src/display.c **** 	  case -2:
2237:src/display.c **** 	  case 1:
2238:src/display.c **** 	    *obp++ = *p++;
2239:src/display.c **** 	    odig++;
2240:src/display.c **** 	    dd--;
2241:src/display.c **** 	    exp--;
2242:src/display.c **** 	  case 0:
2243:src/display.c **** 	    ;
2244:src/display.c **** 	  };
2245:src/display.c **** 	  // Falling through
2246:src/display.c **** 
2247:src/display.c **** 	case MODE_SCI:
2248:src/display.c **** 	  *obp++ = *p++;
2249:src/display.c **** 	  odig++;
2250:src/display.c **** 	  *obp++ = '.';
2251:src/display.c **** 	  dd--;
2252:src/display.c **** 	  while (dd-- >= 0) {
2253:src/display.c **** 	    *obp++ = *p++;
2254:src/display.c **** 	    odig++;
2255:src/display.c **** 	  }
ARM GAS  /tmp/ccKZqSeG.s 			page 54


2256:src/display.c **** 	  show_exp = 1;
2257:src/display.c **** 	}
2258:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2259:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2260:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2261:src/display.c **** 	    obp--;
2262:src/display.c **** 	    odig--;
2263:src/display.c **** 	  }
2264:src/display.c **** #endif	
2265:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2266:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2267:src/display.c **** 	  set_x_dn(z, res, display_digits);
2268:src/display.c **** 	  return;
2269:src/display.c **** 	}
2270:src/display.c **** 	/* Finally, send the output to the display */
2271:src/display.c **** 	*obp = '\0';
2272:src/display.c **** 	if (odig > *display_digits)
2273:src/display.c **** 	  odig = *display_digits;
2274:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2275:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2276:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2277:src/display.c **** 	if (negative) {
2278:src/display.c **** 	  if (res) *res++ = '-';
2279:src/display.c **** 	  else {
2280:src/display.c **** 	    if (j == 0)
2281:src/display.c **** 	      SET_MANT_SIGN;
2282:src/display.c **** 	    else
2283:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2284:src/display.c **** 	  }
2285:src/display.c **** 	}
2286:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2287:src/display.c **** 	  if (c == '.') {
2288:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2289:src/display.c **** 	  } else if (c == ',') {
2290:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2291:src/display.c **** 	  } else {
2292:src/display.c **** 	    res = set_dig_s(j, c, res);
2293:src/display.c **** 	    j += SEGS_PER_DIGIT;
2294:src/display.c **** 	  }
2295:src/display.c **** 	}
2296:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2297:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2298:src/display.c **** 	  if ( !res ) {
2299:src/display.c **** 	    set_exp(exp, 4, res);
2300:src/display.c **** 	  }
2301:src/display.c **** 	  else {
2302:src/display.c **** 	    set_exp(exp, 0, res);
2303:src/display.c **** 	  }
2304:src/display.c **** 	}
2305:src/display.c **** #else
2306:src/display.c **** 	if (show_exp)
2307:src/display.c **** 	  set_exp(exp, 0, res);
2308:src/display.c **** #endif
2309:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2310:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2311:src/display.c **** 	*display_digits = odig;
2312:src/display.c ****       }
ARM GAS  /tmp/ccKZqSeG.s 			page 55


2313:src/display.c **** 
2314:src/display.c **** #if defined(QTGUI) || defined(IOS)
2315:src/display.c ****       void format_display(char *buf) {
2316:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2317:src/display.c **** 	  {
2318:src/display.c **** 	    const char *p = get_cmdline();
2319:src/display.c **** 	    if (p == NULL) {
2320:src/display.c **** 	      format_reg(regX_idx, buf);
2321:src/display.c **** 	    } else {
2322:src/display.c **** 	      scopy(buf, p);
2323:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2324:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2325:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2326:src/display.c **** 		buf[CmdLineEex] = 'E';
2327:src/display.c **** 		buf[CmdLineEex+1] = '-';
2328:src/display.c **** 	      }
2329:src/display.c **** #  endif
2330:src/display.c **** 	    }
2331:src/display.c **** 	  }
2332:src/display.c **** 	else {
2333:src/display.c **** 	  buf[0]=0;
2334:src/display.c **** 	}
2335:src/display.c ****       }
2336:src/display.c **** #endif
2337:src/display.c **** 
2338:src/display.c ****       void format_reg(int index, char *buf) {
2339:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2340:src/display.c **** 
2341:src/display.c **** 	if (is_intmode())
2342:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2343:src/display.c **** #ifndef HP16C_MODE_CHANGE
2344:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2345:src/display.c **** 	  decNumber x;
2346:src/display.c **** 	  int s;
2347:src/display.c **** 	  unsigned long long int v;
2348:src/display.c **** 
2349:src/display.c **** 	  getRegister(&x, index);
2350:src/display.c **** 	  v = dn_to_ull(&x, &s);
2351:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2352:src/display.c **** 	}
2353:src/display.c **** #endif
2354:src/display.c **** 	else
2355:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2356:src/display.c ****       }
2357:src/display.c **** 
2358:src/display.c ****       /* Display the status screen */
2359:src/display.c ****       static void show_status(void) {
2360:src/display.c **** 	int i, n;
2361:src/display.c **** 	int j = SEGS_EXP_BASE;
2362:src/display.c **** 	const int status = State2.status - 3;
2363:src/display.c **** 	char buf[16], *p = buf;
2364:src/display.c **** 	unsigned int pc;
2365:src/display.c **** 
2366:src/display.c **** 	if (status == -2) {
2367:src/display.c **** 	  set_status("Free:");
2368:src/display.c **** 	  p = num_arg(buf, free_mem());
2369:src/display.c **** 	  p = scopy(p, " , FL. ");
ARM GAS  /tmp/ccKZqSeG.s 			page 56


2370:src/display.c **** 	  p = num_arg(p, free_flash());
2371:src/display.c **** 	  *p = '\0';
2372:src/display.c **** 	  set_digits_string(buf, 0);
2373:src/display.c **** 	}
2374:src/display.c **** 	else if (status == -1) {
2375:src/display.c **** 	  /* Top line */
2376:src/display.c **** 	  p = scopy(buf, "Regs:");
2377:src/display.c **** 	  if (SizeStatRegs)
2378:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2379:src/display.c **** 	  *p = '\0';
2380:src/display.c **** 	  set_status(buf);
2381:src/display.c **** 
2382:src/display.c **** 	  /* Bottom line */
2383:src/display.c **** 	  p = num_arg(buf, global_regs());
2384:src/display.c **** 	  if (LocalRegs < 0) {
2385:src/display.c **** 	    p = scopy(p, " , Loc. ");
2386:src/display.c **** 	    p = num_arg(p, local_regs());
2387:src/display.c **** 	  }
2388:src/display.c **** 	  *p = '\0';
2389:src/display.c **** 	  set_digits_string(buf, 0);
2390:src/display.c **** 	} else {
2391:src/display.c **** 	  int base;
2392:src/display.c **** 	  int end;
2393:src/display.c **** 	  int group = 10;
2394:src/display.c **** 	  int start = 0;
2395:src/display.c **** 		
2396:src/display.c **** 	  if (status <= 9) {
2397:src/display.c **** 	    base = 10 * status;
2398:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2399:src/display.c **** 	    p = scopy(buf, "FL ");
2400:src/display.c **** 	    p = num_arg_0(p, base, 2);
2401:src/display.c **** 	    *p++ = '-';
2402:src/display.c **** 	    p = num_arg_0(p, end, 2);
2403:src/display.c **** 	    *p = '\0';
2404:src/display.c **** 	    set_status(buf);
2405:src/display.c **** 	  }
2406:src/display.c **** 	  else if (status == 10) {
2407:src/display.c **** 	    base = regX_idx;
2408:src/display.c **** 	    end = regK_idx;
2409:src/display.c **** 	    start = 3;
2410:src/display.c **** 	    group = 4;
2411:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2412:src/display.c **** 	  }
2413:src/display.c **** 	  else { // status == 11
2414:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2415:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2416:src/display.c **** 	    set_status("FL.00-.15");
2417:src/display.c **** 	  }
2418:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2419:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2420:src/display.c **** 	  j += SEGS_PER_DIGIT;
2421:src/display.c **** 	  for (i = start; i < group + start; i++) {
2422:src/display.c **** 	    int k = i + base - start;
2423:src/display.c **** 	    int l = get_user_flag(k);
2424:src/display.c **** 	    k += group;
2425:src/display.c **** 	    if (end >= k) {
2426:src/display.c **** 	      l |= (get_user_flag(k) << 1);
ARM GAS  /tmp/ccKZqSeG.s 			page 57


2427:src/display.c **** 	      k += group;
2428:src/display.c **** 	      if (end >= k)
2429:src/display.c **** 		l |= (get_user_flag(k) << 2);
2430:src/display.c **** 	    }
2431:src/display.c **** 	    set_dig(j, l);
2432:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2433:src/display.c **** 	    j += SEGS_PER_DIGIT;
2434:src/display.c **** 	    if (i == 4) {
2435:src/display.c **** 	      set_dig(j, 8);
2436:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2437:src/display.c **** 	      j += SEGS_PER_DIGIT;
2438:src/display.c **** 	    }
2439:src/display.c **** 	  }
2440:src/display.c **** 	}
2441:src/display.c **** 
2442:src/display.c **** 	j = SEGS_EXP_BASE;
2443:src/display.c **** 	pc = state_pc();
2444:src/display.c **** 	if (isXROM(pc))
2445:src/display.c **** 	  pc = 1;
2446:src/display.c **** 	for (n=i=0; i<4; i++) {
2447:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2448:src/display.c **** 	    if (++n == 4) {
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2451:src/display.c **** 	    } else {
2452:src/display.c **** 	      set_dig(j, 'A'+i);
2453:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2454:src/display.c **** 	    }
2455:src/display.c **** 	  }
2456:src/display.c **** 	}
2457:src/display.c ****       }
2458:src/display.c **** 
2459:src/display.c **** 
2460:src/display.c ****       /* Display the list of alpha labels */
2461:src/display.c ****       static void show_label(void) {
2462:src/display.c **** 	char buf[16];
2463:src/display.c **** 	unsigned short int pc = State2.digval;
2464:src/display.c **** 	unsigned int op = getprog(pc);
2465:src/display.c **** 	int n = nLIB(pc);
2466:src/display.c **** 	unsigned short int lblpc;
2467:src/display.c **** 
2468:src/display.c **** 	set_status(prt((opcode)op, buf));
2469:src/display.c **** 	set_digits_string(libname[n], 0);
2470:src/display.c **** 
2471:src/display.c **** 	if (op & OP_DBL) {
2472:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2473:src/display.c **** 	  if (lblpc != pc) {
2474:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2475:src/display.c **** 	    n = nLIB(lblpc);
2476:src/display.c **** 	    if (n == REGION_RAM)
2477:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2478:src/display.c **** 	    else {
2479:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2480:src/display.c **** 	    }
2481:src/display.c **** 	  }
2482:src/display.c **** 	}
2483:src/display.c ****       }
ARM GAS  /tmp/ccKZqSeG.s 			page 58


2484:src/display.c **** 
2485:src/display.c ****       /* Display a list of register contents */
2486:src/display.c ****       static void show_registers(void) {
2487:src/display.c **** 	char buf[16], *bp;
2488:src/display.c **** 	int n = State2.digval;
2489:src/display.c **** 	
2490:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2491:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2492:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2493:src/display.c **** 	  n;
2494:src/display.c **** #else
2495:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2496:src/display.c **** 	  n;
2497:src/display.c **** #endif
2498:src/display.c **** 
2499:src/display.c **** 	if (State2.disp_as_alpha) {
2500:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2501:src/display.c **** 	}
2502:src/display.c **** 	else {
2503:src/display.c **** 	  xset(buf, '\0', 16);
2504:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2505:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2506:src/display.c **** #else
2507:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2508:src/display.c **** #endif
2509:src/display.c **** 	  if (State2.local) {
2510:src/display.c **** 	    *bp++ = '.';
2511:src/display.c **** 	    if (n >= 100) {
2512:src/display.c **** 	      *bp++ = '1';
2513:src/display.c **** 	      n -= 100;
2514:src/display.c **** 	    }
2515:src/display.c **** 	  }
2516:src/display.c **** 	  if (n < 100)
2517:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2518:src/display.c **** 	  else
2519:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2520:src/display.c **** 	  set_status(buf);
2521:src/display.c **** 	}
2522:src/display.c **** 	format_reg(reg, CNULL);
2523:src/display.c ****       }
2524:src/display.c **** 
2525:src/display.c **** 
2526:src/display.c ****       static void set_annunciators(void)
2527:src/display.c ****       {
2528:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2529:src/display.c **** 
2530:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2531:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2532:src/display.c **** 	 * browsing constants.
2533:src/display.c **** 	 */
2534:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2535:src/display.c **** 	//	dot(BEG, UState.stack_depth && ! Running);
2536:src/display.c **** 	draw_dot(BEG);
2537:src/display.c **** #else
2538:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2539:src/display.c **** #endif
2540:src/display.c **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccKZqSeG.s 			page 59


2541:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2542:src/display.c **** #endif
2543:src/display.c **** 
2544:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2545:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2546:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2547:src/display.c **** 	//	set_IO_annunciator();
2548:src/display.c **** 
2549:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2550:src/display.c **** 	 */
2551:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2552:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2553:src/display.c ****       }
2554:src/display.c **** 
2555:src/display.c **** 
2556:src/display.c ****       /*
2557:src/display.c ****        *  Toggle the little "=" sign
2558:src/display.c ****        */
2559:src/display.c **** /*       void set_IO_annunciator(void) { */
2560:src/display.c **** /* #ifndef DM42 */
2561:src/display.c **** /* 	int on = SerialOn */
2562:src/display.c **** /* #endif */
2563:src/display.c **** /* #ifdef DM42 */
2564:src/display.c **** /* 	  int on = 0 */
2565:src/display.c **** /* #endif */
2566:src/display.c **** /* #ifdef REALBUILD */
2567:src/display.c **** /* 	  || DebugFlag */
2568:src/display.c **** /* #endif */
2569:src/display.c **** /* #ifdef INFRARED */
2570:src/display.c **** /* 	  || PrinterColumn != 0 */
2571:src/display.c **** /* #endif */
2572:src/display.c **** /* 	  ; */
2573:src/display.c **** 
2574:src/display.c **** /* 	if (on != IoAnnunciator) { */
2575:src/display.c **** /* 	  dot(LIT_EQ, on); */
2576:src/display.c **** /* 	  IoAnnunciator = on; */
2577:src/display.c **** /* 	  finish_display(); //LIT_EQ */
2578:src/display.c **** /* 	} */
2579:src/display.c **** /*       } */
2580:src/display.c **** 
2581:src/display.c **** #ifdef TOP_ROW
2582:src/display.c ****       /*
2583:src/display.c ****        *  Update the display
2584:src/display.c ****        */
2585:src/display.c ****       void display(void) {
2586:src/display.c **** 	int i, j;
2587:src/display.c **** 	char buf[40], *bp = buf;
2588:src/display.c **** 	const char *p;
2589:src/display.c **** 	int annuc = 0;
2590:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2591:src/display.c **** 	int skip = 0;
2592:src/display.c **** 	int x_disp = 0;
2593:src/display.c **** 	const int shift = cur_shift();
2594:src/display.c **** 
2595:src/display.c **** 	no_status_top = 0;
2596:src/display.c **** 	if (State2.disp_freeze) {
2597:src/display.c **** 	  State2.disp_freeze = 0;
ARM GAS  /tmp/ccKZqSeG.s 			page 60


2598:src/display.c **** 	  State2.disp_temp = 1;
2599:src/display.c **** #ifdef CONSOLE
2600:src/display.c **** 	  JustDisplayed = 1;
2601:src/display.c **** #endif
2602:src/display.c **** 	  ShowRPN = 0;
2603:src/display.c **** 	  return;
2604:src/display.c **** 	}
2605:src/display.c **** 
2606:src/display.c **** 	if (WasDataEntry) {
2607:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2608:src/display.c **** 
2609:src/display.c **** 	  // Erase 7-segment display
2610:src/display.c **** 	  //	  for (i = 0; i <= EXP_SIGN; ++i) {
2611:src/display.c **** 	  //	    clr_dot(i);
2612:src/display.c **** 	  //	  }
2613:src/display.c **** 	  reset_7_segment();
2614:src/display.c **** 	  goto only_update_x;
2615:src/display.c **** 	}
2616:src/display.c **** #ifdef INCLUDE_YREG_CODE
2617:src/display.c **** #  ifdef YREG_ALWAYS_ON
2618:src/display.c **** 	const int yreg_enabled = 1;
2619:src/display.c **** #  else
2620:src/display.c **** 	const int yreg_enabled = UState.show_y;
2621:src/display.c **** #  endif
2622:src/display.c **** #else
2623:src/display.c **** 	const int yreg_enabled = 0;
2624:src/display.c **** #endif
2625:src/display.c **** 	// Clear display
2626:src/display.c **** 	reset_disp();
2627:src/display.c **** 
2628:src/display.c **** 	
2629:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2630:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2631:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2632:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2633:src/display.c **** 	/*   set_status(buf); */
2634:src/display.c **** 	/* } */
2635:src/display.c **** 	if (State2.version) {
2636:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2637:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2638:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2639:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2640:src/display.c **** 	  set_status(vers);
2641:src/display.c **** 	  skip = 1;
2642:src/display.c **** 	  goto nostk;
2643:src/display.c **** 	} else if (State2.confirm) {
2644:src/display.c **** 	  if (yreg_enabled) {
2645:src/display.c **** 	    set_status_top(S_SURE);
2646:src/display.c **** 	    no_status_top = 1;
2647:src/display.c **** 	    annuc = 1;
2648:src/display.c **** 	  }
2649:src/display.c **** 	  else {
2650:src/display.c **** 	    set_status(S_SURE);
2651:src/display.c **** 	  }
2652:src/display.c **** 	} else if (State2.hyp) {
2653:src/display.c **** 	  bp = scopy(bp, "HYP");
2654:src/display.c **** 	  if (! State2.dot)
ARM GAS  /tmp/ccKZqSeG.s 			page 61


2655:src/display.c **** 	    *bp++ = '\235';
2656:src/display.c **** 	  if (yreg_enabled) {
2657:src/display.c **** 	    set_status_top(buf);
2658:src/display.c **** 	    no_status_top = 1;
2659:src/display.c **** 	    annuc = 1;
2660:src/display.c **** 	  }
2661:src/display.c **** 	  else {
2662:src/display.c **** 	    set_status(buf);
2663:src/display.c **** 	  }
2664:src/display.c **** 	} else if (State2.gtodot) {
2665:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2666:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2667:src/display.c **** 	  if (State2.numdigit > 0)
2668:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2669:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2670:src/display.c **** 	  *bp++ = '_';
2671:src/display.c **** 	  if (yreg_enabled) {
2672:src/display.c **** 	    set_status_top(buf);
2673:src/display.c **** 	    no_status_top = 1;
2674:src/display.c **** 	    annuc = 1;
2675:src/display.c **** 	  }
2676:src/display.c **** 	  else {
2677:src/display.c **** 	    set_status(buf);
2678:src/display.c **** 	  }
2679:src/display.c **** 	} else if (State2.rarg) {
2680:src/display.c **** 	  /* Commands with arguments */
2681:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2682:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2683:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2684:src/display.c **** #endif
2685:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2686:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2687:src/display.c **** 	  if (State2.dot) {
2688:src/display.c **** 	    *bp++ = 's';
2689:src/display.c **** 	    *bp++ = '_';
2690:src/display.c **** 	  } else if (shift == SHIFT_F) {
2691:src/display.c **** 	    *bp++ = '\021';
2692:src/display.c **** 	    *bp++ = '_';
2693:src/display.c **** 	  } else {
2694:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2695:src/display.c **** 	       : State2.ind ? 2 
2696:src/display.c **** 	       : num_arg_digits(CmdBase); */
2697:src/display.c **** 	    if (State2.local)
2698:src/display.c **** 	      *bp++ = '.';
2699:src/display.c **** 	    if (State2.numdigit > 0) {
2700:src/display.c **** 	      if (State2.shuffle)
2701:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2702:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2703:src/display.c **** 	      else
2704:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2705:src/display.c **** 	    }
2706:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2707:src/display.c **** 	    *bp++ = '_';
2708:src/display.c **** 	  }
2709:src/display.c **** 	  if (yreg_enabled) {
2710:src/display.c **** 	    set_status_top(buf);
2711:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/ccKZqSeG.s 			page 62


2712:src/display.c **** 	    annuc = 1;
2713:src/display.c **** 	  }
2714:src/display.c **** 	  else {
2715:src/display.c **** 	    set_status(buf);
2716:src/display.c **** 	  }
2717:src/display.c **** 	} else if (State2.test != TST_NONE) {
2718:src/display.c **** 	  *bp++ = 'x';
2719:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2720:src/display.c **** 	  *bp++ = '_';
2721:src/display.c **** 	  *bp++ = '?';
2722:src/display.c **** 	  if (yreg_enabled) {
2723:src/display.c **** 	    set_status_top(buf);
2724:src/display.c **** 	    no_status_top = 1;
2725:src/display.c **** 	    annuc = 1;
2726:src/display.c **** 	  }
2727:src/display.c **** 	  else {
2728:src/display.c **** 	    set_status(buf);
2729:src/display.c **** 	  }
2730:src/display.c **** 	} else if (cata) {
2731:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2732:src/display.c **** 	  char b2[16];
2733:src/display.c **** 	  const char *p;
2734:src/display.c **** 
2735:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2736:src/display.c **** 	  p = catcmd(op, b2);
2737:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2738:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2739:src/display.c **** 	  bp = scopy(bp, p);
2740:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2741:src/display.c **** 	    // State2.disp_small = 1;
2742:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2743:src/display.c **** 	      set_digits_string("0 to 255", 0);
2744:src/display.c **** 	    else
2745:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2746:src/display.c **** 	    skip = 1;
2747:src/display.c **** 	  } else if (State2.runmode) {
2748:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2749:src/display.c **** 	      decNumber x, r;
2750:src/display.c **** 	      decimal64 z;
2751:src/display.c **** 
2752:src/display.c **** 	      getX(&x);
2753:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2754:src/display.c **** 		const unsigned int f = argKIND(op);
2755:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2756:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2757:src/display.c **** 		  update_speed(0);
2758:src/display.c **** 		  fp(&r, &x);
2759:src/display.c **** 		}
2760:src/display.c **** 		else
2761:src/display.c **** 		  set_NaN(&r);
2762:src/display.c **** 	      } else
2763:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2764:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2765:src/display.c **** 	      packed_from_number(&z, &r);
2766:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2767:src/display.c **** 	      skip = 1;
2768:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
ARM GAS  /tmp/ccKZqSeG.s 			page 63


2769:src/display.c **** 	      REGISTER z, *const x = StackBase;
2770:src/display.c **** 	      copyreg(&z, x);
2771:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2772:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2773:src/display.c **** 	      copyreg(x, &z);
2774:src/display.c **** 	      skip = 1;
2775:src/display.c **** 	    }
2776:src/display.c **** 	  }
2777:src/display.c **** 	  if (yreg_enabled) {
2778:src/display.c **** 	    set_status_top(buf);
2779:src/display.c **** 	    no_status_top = 1;
2780:src/display.c **** 	    annuc = 1;
2781:src/display.c **** 	  }
2782:src/display.c **** 	  else {
2783:src/display.c **** 	    set_status(buf);
2784:src/display.c **** 	  }
2785:src/display.c **** 	} else if (State2.multi) {
2786:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2787:src/display.c **** 	  if (State2.numdigit > 0) {
2788:src/display.c **** 	    *bp++ = (char) State2.digval;
2789:src/display.c **** 	    if (State2.numdigit > 1)
2790:src/display.c **** 	      *bp++ = State2.digval2;
2791:src/display.c **** 	  }
2792:src/display.c **** 	  if (yreg_enabled) {
2793:src/display.c **** 	    set_status_top(buf);
2794:src/display.c **** 	    no_status_top = 1;
2795:src/display.c **** 	    annuc = 1;
2796:src/display.c **** 	  }
2797:src/display.c **** 	  else {
2798:src/display.c **** 	    set_status(buf);
2799:src/display.c **** 	  }
2800:src/display.c **** 	} else if (State2.status) {
2801:src/display.c **** 	  show_status();
2802:src/display.c **** 	  skip = 1;
2803:src/display.c **** 	} else if (State2.labellist) {
2804:src/display.c **** 	  show_label();
2805:src/display.c **** 	  skip = 1;
2806:src/display.c **** 	} else if (State2.registerlist) {
2807:src/display.c **** 	  show_registers();
2808:src/display.c **** 	  skip = 1;
2809:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2810:src/display.c **** 	    annunciators();
2811:src/display.c **** 	  }
2812:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2813:src/display.c **** 	} else if (State2.disp_as_alpha) {
2814:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2815:src/display.c **** #endif
2816:src/display.c **** 	} else if (State2.runmode) {
2817:src/display.c **** 	  if (DispMsg) { 
2818:src/display.c **** 	    set_status(DispMsg);
2819:src/display.c **** 	  } else if (DispPlot) {
2820:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2821:src/display.c **** 	  } else if (State2.alphas) {
2822:src/display.c **** 	    bp = scopy(buf, Alpha);
2823:src/display.c **** 	    j = State2.alpha_pos;
2824:src/display.c **** 	    if (j != 0) {
2825:src/display.c **** 	      i = slen(buf);
ARM GAS  /tmp/ccKZqSeG.s 			page 64


2826:src/display.c **** 	      j *= 6;
2827:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2828:src/display.c **** 		{
2829:src/display.c **** 		  buf[ (i - j) ] = '\0';
2830:src/display.c **** 		  set_status_right(buf);
2831:src/display.c **** 		}
2832:src/display.c **** 	      else {
2833:src/display.c **** 		set_status(buf);
2834:src/display.c **** 	      }
2835:src/display.c **** 	    }
2836:src/display.c **** 	    else {
2837:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2838:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2839:src/display.c **** 		*bp++ = '\0';
2840:src/display.c **** 	      }
2841:src/display.c **** 	      set_status_right(buf);
2842:src/display.c **** 	    }
2843:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2844:src/display.c **** 	      bp = buf;
2845:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2846:src/display.c **** 	      *bp++ = '\0';
2847:src/display.c **** 	      set_status_top(buf);
2848:src/display.c **** 	      no_status_top = 1;
2849:src/display.c **** 	      //annuc = 1;
2850:src/display.c **** 	    }
2851:src/display.c **** 	  }
2852:src/display.c **** 	  else {
2853:src/display.c **** 	    annuc = 1;
2854:src/display.c **** 	  }
2855:src/display.c **** 	}
2856:src/display.c **** 	else {
2857:src/display.c **** #ifndef DM42
2858:src/display.c **** 	  show_progtrace(buf);
2859:src/display.c **** #endif
2860:src/display.c **** 	  i = state_pc();
2861:src/display.c **** 	  if (i > 0)
2862:src/display.c **** 	    set_status(prt(getprog(i), buf));
2863:src/display.c **** 	  else
2864:src/display.c **** 	    set_status("");
2865:src/display.c **** 	  set_dot(STO_annun);
2866:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2867:src/display.c **** 	    annuc = 1;
2868:src/display.c **** 	  goto nostk;
2869:src/display.c **** 	}
2870:src/display.c **** 	show_stack();
2871:src/display.c ****       nostk:
2872:src/display.c **** 	show_flags();
2873:src/display.c **** 	if (!skip) {
2874:src/display.c **** 	  if (State2.runmode) {
2875:src/display.c **** 	  only_update_x:
2876:src/display.c **** 	    p = get_cmdline();
2877:src/display.c **** 	    if (p == NULL || cata) {
2878:src/display.c **** 	      if (ShowRegister != -1) {
2879:src/display.c **** #ifdef INCLUDE_C_LOCK
2880:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2881:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2882:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
ARM GAS  /tmp/ccKZqSeG.s 			page 65


2883:src/display.c **** 		    SET_POLAR_READY;
2884:src/display.c **** 		  }
2885:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2886:src/display.c **** 		    State2.hms = 0;
2887:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2888:src/display.c **** 		    State2.hms = 1;
2889:src/display.c **** 		  }
2890:src/display.c **** 		  else {
2891:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2892:src/display.c **** 		  }
2893:src/display.c **** 		  x_disp = 1;
2894:src/display.c **** 		}
2895:src/display.c **** 		else {
2896:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2897:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2898:src/display.c **** 		}
2899:src/display.c **** #else		
2900:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2901:src/display.c **** 		format_reg(ShowRegister, CNULL);
2902:src/display.c **** #endif
2903:src/display.c **** 	      }
2904:src/display.c **** 	      else
2905:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2906:src/display.c **** 	    } else {
2907:src/display.c **** 	      disp_x(p);
2908:src/display.c **** 	      x_disp = 1;
2909:src/display.c **** 	    }
2910:src/display.c **** 	    if (WasDataEntry) {
2911:src/display.c **** 	      goto finish;
2912:src/display.c **** 	    }
2913:src/display.c **** 	  } else {
2914:src/display.c **** 	    unsigned int pc = state_pc();
2915:src/display.c **** 	    unsigned int upc = user_pc(pc);
2916:src/display.c **** 	    const int n = nLIB(pc);
2917:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2918:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2919:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2920:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2921:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2922:src/display.c **** #if 0
2923:src/display.c **** #ifndef REALBUILD
2924:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2925:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2926:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2927:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2928:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2929:src/display.c **** 	      char *b=buf;
2930:src/display.c **** 	      char *l=LastDisplayedNumber;
2931:src/display.c **** 	      *l++=' ';
2932:src/display.c **** 	      while(*b) {
2933:src/display.c **** 		*l++=*b++;
2934:src/display.c **** 		*l++=' ';
2935:src/display.c **** 	      }
2936:src/display.c **** 	      *l=0;
2937:src/display.c **** 	    }
2938:src/display.c **** #endif
2939:src/display.c **** #endif
ARM GAS  /tmp/ccKZqSeG.s 			page 66


2940:src/display.c **** 	  }
2941:src/display.c **** 	}
2942:src/display.c **** 	set_annunciators();
2943:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2944:src/display.c **** 	  ShowRPN = 0;
2945:src/display.c **** 	  dot(RPN, 0);
2946:src/display.c **** 	}
2947:src/display.c **** 	// disp_temp disables the <- key
2948:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2949:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2950:src/display.c **** 
2951:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2952:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2953:src/display.c **** 	  annunciators();
2954:src/display.c ****  	State2.hms = 0;
2955:src/display.c **** #else
2956:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2957:src/display.c **** 	  annunciators();
2958:src/display.c **** #endif
2959:src/display.c **** 
2960:src/display.c ****       finish:
2961:src/display.c **** 	State2.version = 0;
2962:src/display.c **** 	State2.disp_as_alpha = 0;
2963:src/display.c **** 	State2.smode = SDISP_NORMAL;
2964:src/display.c **** 	State2.invalid_disp = 0;
2965:src/display.c **** 	ShowRegister = regX_idx;
2966:src/display.c **** 	DispMsg = CNULL;
2967:src/display.c **** 	DispPlot = 0;
2968:src/display.c **** 	State2.disp_small = 0;
2969:src/display.c **** 	if (WasDataEntry) {
2970:src/display.c **** 	  finish_7_segment();
2971:src/display.c **** 	  lcd_refresh();
2972:src/display.c **** 	}
2973:src/display.c **** 	else {
2974:src/display.c **** 	  finish_display();
2975:src/display.c **** 	}
2976:src/display.c **** 	no_status_top = 0;
2977:src/display.c **** #ifdef CONSOLE
2978:src/display.c **** 	JustDisplayed = 1;
2979:src/display.c **** #endif
2980:src/display.c ****       }
2981:src/display.c **** #else
2982:src/display.c ****       /*
2983:src/display.c ****        *  Update the display
2984:src/display.c ****        */
2985:src/display.c ****       void display(void) {
2986:src/display.c **** 	int i, j;
2987:src/display.c **** 	char buf[40], *bp = buf;
2988:src/display.c **** 	const char *p;
2989:src/display.c **** 	int annuc = 0;
2990:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2991:src/display.c **** 	int skip = 0;
2992:src/display.c **** 	int x_disp = 0;
2993:src/display.c **** 	const int shift = cur_shift();
2994:src/display.c **** 
2995:src/display.c **** 
2996:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 67


2997:src/display.c **** 	if (State2.disp_freeze) {
2998:src/display.c **** 	  State2.disp_freeze = 0;
2999:src/display.c **** 	  State2.disp_temp = 1;
3000:src/display.c **** #ifdef CONSOLE
3001:src/display.c **** 	  JustDisplayed = 1;
3002:src/display.c **** #endif
3003:src/display.c **** 	  ShowRPN = 0;
3004:src/display.c **** 	  return;
3005:src/display.c **** 	}
3006:src/display.c **** 
3007:src/display.c **** 	if (WasDataEntry) {
3008:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3009:src/display.c **** 
3010:src/display.c **** 	  // Erase 7-segment display
3011:src/display.c **** 	  //	  for (i = 0; i <= EXP_SIGN; ++i) {
3012:src/display.c **** 	  //	    clr_dot(i);
3013:src/display.c **** 	  //	  }
3014:src/display.c **** 	  reset_7_segment();
3015:src/display.c **** 	  goto only_update_x;
3016:src/display.c **** 	}
3017:src/display.c **** 
3018:src/display.c **** 	// Clear display
3019:src/display.c **** 	reset_disp();
3020:src/display.c **** 
3021:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3022:src/display.c **** 	if (State2.cmplx  && !cata) {
3023:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3024:src/display.c **** 	  set_status(buf);
3025:src/display.c **** 	}
3026:src/display.c **** 	if (State2.version) {
3027:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3028:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3029:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3030:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3031:src/display.c **** 	  set_status(vers);
3032:src/display.c **** 	  skip = 1;
3033:src/display.c **** 	  goto nostk;
3034:src/display.c **** 	} else if (State2.confirm) {
3035:src/display.c **** 	  set_status(S_SURE);
3036:src/display.c **** 	} else if (State2.hyp) {
3037:src/display.c **** 	  bp = scopy(bp, "HYP");
3038:src/display.c **** 	  if (! State2.dot)
3039:src/display.c **** 	    *bp++ = '\235';
3040:src/display.c **** 	  set_status(buf);
3041:src/display.c **** 	} else if (State2.gtodot) {
3042:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3043:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3044:src/display.c **** 	  if (State2.numdigit > 0)
3045:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3046:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3047:src/display.c **** 	  *bp++ = '_';
3048:src/display.c **** 	  set_status(buf);
3049:src/display.c **** 	} else if (State2.rarg) {
3050:src/display.c **** 	  /* Commands with arguments */
3051:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3052:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3053:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
ARM GAS  /tmp/ccKZqSeG.s 			page 68


3054:src/display.c **** #endif
3055:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3056:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3057:src/display.c **** 	  if (State2.dot) {
3058:src/display.c **** 	    *bp++ = 's';
3059:src/display.c **** 	    *bp++ = '_';
3060:src/display.c **** 	  } else if (shift == SHIFT_F) {
3061:src/display.c **** 	    *bp++ = '\021';
3062:src/display.c **** 	    *bp++ = '_';
3063:src/display.c **** 	  } else {
3064:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3065:src/display.c **** 	       : State2.ind ? 2 
3066:src/display.c **** 	       : num_arg_digits(CmdBase); */
3067:src/display.c **** 	    if (State2.local)
3068:src/display.c **** 	      *bp++ = '.';
3069:src/display.c **** 	    if (State2.numdigit > 0) {
3070:src/display.c **** 	      if (State2.shuffle)
3071:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3072:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3073:src/display.c **** 	      else
3074:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3075:src/display.c **** 	    }
3076:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3077:src/display.c **** 	    *bp++ = '_';
3078:src/display.c **** 	  }
3079:src/display.c **** 	  set_status(buf);
3080:src/display.c **** 	} else if (State2.test != TST_NONE) {
3081:src/display.c **** 	  *bp++ = 'x';
3082:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3083:src/display.c **** 	  *bp++ = '_';
3084:src/display.c **** 	  *bp++ = '?';
3085:src/display.c **** 	  set_status(buf);
3086:src/display.c **** 	} else if (cata) {
3087:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3088:src/display.c **** 	  char b2[16];
3089:src/display.c **** 	  const char *p;
3090:src/display.c **** 
3091:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3092:src/display.c **** 	  p = catcmd(op, b2);
3093:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3094:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3095:src/display.c **** 	  bp = scopy(bp, p);
3096:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3097:src/display.c **** 	    // State2.disp_small = 1;
3098:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3099:src/display.c **** 	      set_digits_string("0 to 255", 0);
3100:src/display.c **** 	    else
3101:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3102:src/display.c **** 	    skip = 1;
3103:src/display.c **** 	  } else if (State2.runmode) {
3104:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3105:src/display.c **** 	      decNumber x, r;
3106:src/display.c **** 	      decimal64 z;
3107:src/display.c **** 
3108:src/display.c **** 	      getX(&x);
3109:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3110:src/display.c **** 		const unsigned int f = argKIND(op);
ARM GAS  /tmp/ccKZqSeG.s 			page 69


3111:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3112:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3113:src/display.c **** 		  update_speed(0);
3114:src/display.c **** 		  fp(&r, &x);
3115:src/display.c **** 		}
3116:src/display.c **** 		else
3117:src/display.c **** 		  set_NaN(&r);
3118:src/display.c **** 	      } else
3119:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3120:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3121:src/display.c **** 	      packed_from_number(&z, &r);
3122:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3123:src/display.c **** 	      skip = 1;
3124:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3125:src/display.c **** 	      REGISTER z, *const x = StackBase;
3126:src/display.c **** 	      copyreg(&z, x);
3127:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3128:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3129:src/display.c **** 	      copyreg(x, &z);
3130:src/display.c **** 	      skip = 1;
3131:src/display.c **** 	    }
3132:src/display.c **** 	  }
3133:src/display.c **** 	  set_status(buf);
3134:src/display.c **** 	} else if (State2.multi) {
3135:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3136:src/display.c **** 	  if (State2.numdigit > 0) {
3137:src/display.c **** 	    *bp++ = (char) State2.digval;
3138:src/display.c **** 	    if (State2.numdigit > 1)
3139:src/display.c **** 	      *bp++ = State2.digval2;
3140:src/display.c **** 	  }
3141:src/display.c **** 	  set_status(buf);
3142:src/display.c **** 	} else if (State2.status) {
3143:src/display.c **** 	  show_status();
3144:src/display.c **** 	  skip = 1;
3145:src/display.c **** 	} else if (State2.labellist) {
3146:src/display.c **** 	  show_label();
3147:src/display.c **** 	  skip = 1;
3148:src/display.c **** 	} else if (State2.registerlist) {
3149:src/display.c **** 	  show_registers();
3150:src/display.c **** 	  skip = 1;
3151:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3152:src/display.c **** 	    annunciators();
3153:src/display.c **** 	  }
3154:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3155:src/display.c **** 	} else if (State2.disp_as_alpha) {
3156:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3157:src/display.c **** #endif
3158:src/display.c **** 	} else if (State2.runmode) {
3159:src/display.c **** 	  if (DispMsg) { 
3160:src/display.c **** 	    set_status(DispMsg);
3161:src/display.c **** 	  } else if (DispPlot) {
3162:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3163:src/display.c **** 	  } else if (State2.alphas) {
3164:src/display.c **** #if 0
3165:src/display.c **** 	    set_digits_string("AlpHA", 0);
3166:src/display.c **** #endif
3167:src/display.c **** 	    bp = scopy(buf, Alpha);
ARM GAS  /tmp/ccKZqSeG.s 			page 70


3168:src/display.c **** 	    j = State2.alpha_pos;
3169:src/display.c **** 	    if (j != 0) {
3170:src/display.c **** 	      i = slen(buf);
3171:src/display.c **** 	      //				
3172:src/display.c **** 	      j *= 6;
3173:src/display.c **** #ifdef BIGGER_DISPLAY
3174:src/display.c **** 	      if ( i - j >= 20 )
3175:src/display.c **** #else
3176:src/display.c **** 	      if ( i - j >= 12 )
3177:src/display.c **** #endif
3178:src/display.c **** 		{
3179:src/display.c **** 		buf[ (i - j) ] = '\0';
3180:src/display.c **** 		set_status_right(buf);
3181:src/display.c **** 		}
3182:src/display.c **** 	      else {
3183:src/display.c **** 		set_status(buf);
3184:src/display.c **** 	      }
3185:src/display.c **** 	    } else {
3186:src/display.c **** 	      if (shift != SHIFT_N) {
3187:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3188:src/display.c **** 		*bp++ = '\0';
3189:src/display.c **** 	      }
3190:src/display.c **** 	      set_status_right(buf);
3191:src/display.c **** 	    }
3192:src/display.c **** 	  } else {
3193:src/display.c **** 	    annuc = 1;
3194:src/display.c **** 	  }
3195:src/display.c **** 	} else {
3196:src/display.c **** #ifndef DM42
3197:src/display.c **** 	  show_progtrace(buf);
3198:src/display.c **** #endif
3199:src/display.c **** 	  i = state_pc();
3200:src/display.c **** 	  if (i > 0)
3201:src/display.c **** 	    set_status(prt(getprog(i), buf));
3202:src/display.c **** 	  else
3203:src/display.c **** 	    set_status("");
3204:src/display.c **** 	  set_dot(STO_annun);
3205:src/display.c **** #if 0
3206:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3207:src/display.c **** 	    unsigned short int crc;
3208:src/display.c **** 	    crc = checksum_program();
3209:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3210:src/display.c **** 	    for (i=0; i<4; i++) {
3211:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3212:src/display.c **** 	      crc >>= 4;
3213:src/display.c **** 	      j += SEGS_PER_DIGIT;
3214:src/display.c **** 	    }
3215:src/display.c **** 	    skip = 1;
3216:src/display.c **** 	  }
3217:src/display.c **** 	  else
3218:src/display.c **** #endif
3219:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3220:src/display.c **** 	      annuc = 1;
3221:src/display.c **** 	  goto nostk;
3222:src/display.c **** 	}
3223:src/display.c **** 	show_stack();
3224:src/display.c ****       nostk:	show_flags();
ARM GAS  /tmp/ccKZqSeG.s 			page 71


3225:src/display.c **** 	if (!skip) {
3226:src/display.c **** 	  if (State2.runmode) {
3227:src/display.c **** 	  only_update_x:
3228:src/display.c **** 	    p = get_cmdline();
3229:src/display.c **** 	    if (p == NULL || cata) {
3230:src/display.c **** 	      if (ShowRegister != -1) {
3231:src/display.c **** #ifdef INCLUDE_C_LOCK
3232:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3233:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3234:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3235:src/display.c **** 		    SET_POLAR_READY;
3236:src/display.c **** 		  }
3237:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3238:src/display.c **** 		    State2.hms = 0;
3239:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3240:src/display.c **** 		    State2.hms = 1;
3241:src/display.c **** 		  }
3242:src/display.c **** 		  else {
3243:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3244:src/display.c **** 		  }
3245:src/display.c **** 		  x_disp = 1;
3246:src/display.c **** 		}
3247:src/display.c **** 		else {
3248:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3249:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3250:src/display.c **** 		}
3251:src/display.c **** #else
3252:src/display.c **** 
3253:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3254:src/display.c **** 		format_reg(ShowRegister, CNULL);
3255:src/display.c **** #endif
3256:src/display.c **** 	      }
3257:src/display.c **** 	      else
3258:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3259:src/display.c **** 	    } else {
3260:src/display.c **** 	      disp_x(p);
3261:src/display.c **** 	      x_disp = 1;
3262:src/display.c **** 	    }
3263:src/display.c **** 	    if (WasDataEntry) {
3264:src/display.c **** 	      goto finish;
3265:src/display.c **** 	    }
3266:src/display.c **** 	  } else {
3267:src/display.c **** 	    unsigned int pc = state_pc();
3268:src/display.c **** 	    unsigned int upc = user_pc(pc);
3269:src/display.c **** 	    const int n = nLIB(pc);
3270:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3271:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3272:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3273:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3274:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3275:src/display.c **** #if 0
3276:src/display.c **** #ifndef REALBUILD
3277:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3278:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3279:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3280:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3281:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
ARM GAS  /tmp/ccKZqSeG.s 			page 72


3282:src/display.c **** 	      char *b=buf;
3283:src/display.c **** 	      char *l=LastDisplayedNumber;
3284:src/display.c **** 	      *l++=' ';
3285:src/display.c **** 	      while(*b) {
3286:src/display.c **** 		*l++=*b++;
3287:src/display.c **** 		*l++=' ';
3288:src/display.c **** 	      }
3289:src/display.c **** 	      *l=0;
3290:src/display.c **** 	    }
3291:src/display.c **** #endif
3292:src/display.c **** #endif
3293:src/display.c **** 	  }
3294:src/display.c **** 	}
3295:src/display.c **** 	set_annunciators();
3296:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3297:src/display.c **** 	  ShowRPN = 0;
3298:src/display.c **** 	  dot(RPN, 0);
3299:src/display.c **** 	}
3300:src/display.c **** 	// disp_temp disables the <- key
3301:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3302:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3303:src/display.c **** 
3304:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3305:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3306:src/display.c **** 	  annunciators();
3307:src/display.c ****  	State2.hms = 0;
3308:src/display.c **** #else
3309:src/display.c **** 
3310:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3311:src/display.c **** 	  annunciators();
3312:src/display.c **** 	
3313:src/display.c **** 
3314:src/display.c **** 
3315:src/display.c **** #endif
3316:src/display.c **** 
3317:src/display.c ****       finish:
3318:src/display.c **** 	State2.version = 0;
3319:src/display.c **** 	State2.disp_as_alpha = 0;
3320:src/display.c **** 	State2.smode = SDISP_NORMAL;
3321:src/display.c **** 	State2.invalid_disp = 0;
3322:src/display.c **** 	ShowRegister = regX_idx;
3323:src/display.c **** 	DispMsg = CNULL;
3324:src/display.c **** 	DispPlot = 0;
3325:src/display.c **** 	State2.disp_small = 0;
3326:src/display.c **** 	if (WasDataEntry) {
3327:src/display.c **** 	  finish_7_segment();
3328:src/display.c **** 	  lcd_refresh();
3329:src/display.c **** 	}
3330:src/display.c **** 	else {
3331:src/display.c **** 	  finish_display();
3332:src/display.c **** 	}
3333:src/display.c **** #ifdef CONSOLE
3334:src/display.c **** 	JustDisplayed = 1;
3335:src/display.c **** #endif
3336:src/display.c ****       }
3337:src/display.c **** #endif
3338:src/display.c ****       /*
ARM GAS  /tmp/ccKZqSeG.s 			page 73


3339:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3340:src/display.c ****        */
3341:src/display.c ****       void frozen_display()
3342:src/display.c ****       {
3343:src/display.c **** 	State2.disp_freeze = 0;
3344:src/display.c **** 	display();
3345:src/display.c **** 	State2.disp_freeze = 1;
3346:src/display.c ****       }
3347:src/display.c **** 
3348:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3349:src/display.c **** 	int glen = *graphic++;
3350:src/display.c **** 	int i, j;
3351:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3352:src/display.c **** 	unsigned long long int mat[6];
3353:src/display.c **** 
3354:src/display.c **** 	xset(mat, 0, sizeof(mat));
3355:src/display.c **** #endif
3356:src/display.c **** 	if (glen <= 0)			return;
3357:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3358:src/display.c **** 
3359:src/display.c **** 	for (i=0; i<6; i++)
3360:src/display.c **** 	  for (j=1; j<=glen; j++) {
3361:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3362:src/display.c **** 	    if (graphic[j] & (1 << i))
3363:src/display.c **** 	      mat[i] |= 1LL << j;
3364:src/display.c **** #else
3365:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3366:src/display.c **** #endif
3367:src/display.c **** 	  }
3368:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3369:src/display.c **** 	set_status_grob(mat);
3370:src/display.c **** #endif
3371:src/display.c ****       }
3372:src/display.c **** 
3373:src/display.c **** 
3374:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3375:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3376:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3377:src/display.c ****        * column is almost always blank.
3378:src/display.c ****        */
3379:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3380:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3381:src/display.c ****       }
3382:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3383:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3384:src/display.c ****       }
3385:src/display.c **** 
3386:src/display.c ****       
3387:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 642              		.loc 1 3387 85 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 4, pretend = 0, frame = 560
 645              		@ frame_needed = 0, uses_anonymous_args = 0
3388:src/display.c **** 	unsigned short int posns[257];
 646              		.loc 1 3388 2 view .LVU191
3389:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3390:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
ARM GAS  /tmp/ccKZqSeG.s 			page 74


3391:src/display.c **** 	int posns_state = 255;
 647              		.loc 1 3391 2 view .LVU192
3392:src/display.c **** #endif
3393:src/display.c **** 	unsigned int x = 0;
 648              		.loc 1 3393 2 view .LVU193
3394:src/display.c **** 	int i, j;
 649              		.loc 1 3394 2 view .LVU194
3395:src/display.c **** 	const int offset = smallp ? 256 : 0;
 650              		.loc 1 3395 2 view .LVU195
3387:src/display.c **** 	unsigned short int posns[257];
 651              		.loc 1 3387 85 is_stmt 0 view .LVU196
 652 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 653              		.cfi_def_cfa_offset 36
 654              		.cfi_offset 4, -36
 655              		.cfi_offset 5, -32
 656              		.cfi_offset 6, -28
 657              		.cfi_offset 7, -24
 658              		.cfi_offset 8, -20
 659              		.cfi_offset 9, -16
 660              		.cfi_offset 10, -12
 661              		.cfi_offset 11, -8
 662              		.cfi_offset 14, -4
 663 0004 ADF50D7D 		sub	sp, sp, #564
 664              		.cfi_def_cfa_offset 600
3396:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3397:src/display.c **** 	unsigned long long int mat[6];
3398:src/display.c **** 
3399:src/display.c **** 	xset(mat, 0, sizeof(mat));
3400:src/display.c **** #endif
3401:src/display.c **** #ifdef RP_PREFIX
3402:src/display.c **** 	RectPolConv = 0;
 665              		.loc 1 3402 14 view .LVU197
 666 0008 5B4C     		ldr	r4, .L99
3387:src/display.c **** 	unsigned short int posns[257];
 667              		.loc 1 3387 85 view .LVU198
 668 000a 0390     		str	r0, [sp, #12]
 669 000c 0546     		mov	r5, r0
 670              		.loc 1 3402 14 view .LVU199
 671 000e 0020     		movs	r0, #0
 672              	.LVL57:
 673              		.loc 1 3402 14 view .LVU200
 674 0010 2060     		str	r0, [r4]
3395:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 675              		.loc 1 3395 34 view .LVU201
 676 0012 0029     		cmp	r1, #0
3403:src/display.c **** #endif
3404:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3405:src/display.c **** 	findlengths(posns, smallp);
3406:src/display.c **** #endif
3407:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 677              		.loc 1 3407 9 view .LVU202
 678 0014 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
3387:src/display.c **** 	unsigned short int posns[257];
 679              		.loc 1 3387 85 view .LVU203
 680 0016 CDE90531 		strd	r3, r1, [sp, #20]
3395:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 681              		.loc 1 3395 34 view .LVU204
ARM GAS  /tmp/ccKZqSeG.s 			page 75


 682 001a 14BF     		ite	ne
 683 001c 4FF48073 		movne	r3, #256
 684              	.LVL58:
3395:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 685              		.loc 1 3395 34 view .LVU205
 686 0020 0346     		moveq	r3, r0
 687 0022 0793     		str	r3, [sp, #28]
 688              	.LVL59:
3402:src/display.c **** #endif
 689              		.loc 1 3402 2 is_stmt 1 view .LVU206
 690              		.loc 1 3407 2 view .LVU207
 691              		.loc 1 3407 8 view .LVU208
 692 0024 002E     		cmp	r6, #0
 693 0026 00F0A480 		beq	.L95
 694              		.loc 1 3407 33 is_stmt 0 view .LVU209
 695 002a 531C     		adds	r3, r2, #1
 696              	.LVL60:
 697              	.LBB205:
3408:src/display.c **** 	  int c;
3409:src/display.c **** 	  int width;
3410:src/display.c **** 	  unsigned char cmap[6];
3411:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3412:src/display.c **** 	  int real_width;
3413:src/display.c **** 	  int current_smallp;
3414:src/display.c **** 
3415:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3416:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3417:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3418:src/display.c **** 	  //           01 -> (not used)
3419:src/display.c **** 	  //           10 -> use big font
3420:src/display.c **** 	  //           11 -> use small font
3421:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3422:src/display.c **** 	  if (str[0] == '\007') {
 698              		.loc 1 3422 7 view .LVU210
 699 002c 072E     		cmp	r6, #7
 700 002e 9246     		mov	r10, r2
 701              	.LBE205:
3393:src/display.c **** 	int i, j;
 702              		.loc 1 3393 15 view .LVU211
 703 0030 8046     		mov	r8, r0
3407:src/display.c **** 	  int c;
 704              		.loc 1 3407 33 view .LVU212
 705 0032 0493     		str	r3, [sp, #16]
3391:src/display.c **** #endif
 706              		.loc 1 3391 6 view .LVU213
 707 0034 4FF0FF04 		mov	r4, #255
 708              	.LVL61:
 709              	.LBB214:
3408:src/display.c **** 	  int width;
 710              		.loc 1 3408 4 is_stmt 1 view .LVU214
3409:src/display.c **** 	  unsigned char cmap[6];
 711              		.loc 1 3409 4 view .LVU215
3410:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 712              		.loc 1 3410 4 view .LVU216
3412:src/display.c **** 	  int current_smallp;
 713              		.loc 1 3412 4 view .LVU217
3413:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 76


 714              		.loc 1 3413 4 view .LVU218
 715              		.loc 1 3422 4 view .LVU219
 716              		.loc 1 3422 7 is_stmt 0 view .LVU220
 717 0038 69D1     		bne	.L63
 718              	.LVL62:
 719              	.L97:
3423:src/display.c **** 	    width = str[1] & 0x1F;
 720              		.loc 1 3423 6 is_stmt 1 view .LVU221
 721              		.loc 1 3423 17 is_stmt 0 view .LVU222
 722 003a 039B     		ldr	r3, [sp, #12]
 723 003c 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 724 003e 05F06003 		and	r3, r5, #96
3424:src/display.c **** 	    switch (str[1] & 0x60) {
 725              		.loc 1 3424 6 view .LVU223
 726 0042 402B     		cmp	r3, #64
3423:src/display.c **** 	    width = str[1] & 0x1F;
 727              		.loc 1 3423 12 view .LVU224
 728 0044 05F01F05 		and	r5, r5, #31
 729              	.LVL63:
 730              		.loc 1 3424 6 is_stmt 1 view .LVU225
 731 0048 00F08480 		beq	.L64
 732 004c 602B     		cmp	r3, #96
 733 004e 00F08680 		beq	.L65
 734              	.LVL64:
3425:src/display.c **** 	    default:
3426:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3427:src/display.c **** 	      break;
3428:src/display.c **** 	    case 0x40:	current_smallp = 0;
3429:src/display.c **** 	      break;
3430:src/display.c **** 	    case 0x60:	current_smallp = 1;
3431:src/display.c **** 	      break;
3432:src/display.c **** 	    }
3433:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 735              		.loc 1 3433 6 view .LVU226
 736              		.loc 1 3433 10 is_stmt 0 view .LVU227
 737 0052 039B     		ldr	r3, [sp, #12]
 738 0054 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 739              		.loc 1 3433 57 view .LVU228
 740 0056 069B     		ldr	r3, [sp, #24]
 741 0058 002B     		cmp	r3, #0
 742 005a 00F08780 		beq	.L83
 743 005e 06F58076 		add	r6, r6, #256
 744 0062 0293     		str	r3, [sp, #8]
 745              	.LVL65:
 746              	.L67:
3434:src/display.c **** 	    str += 3;
 747              		.loc 1 3434 6 is_stmt 1 discriminator 4 view .LVU229
3435:src/display.c **** 
3436:src/display.c **** 	    real_width = charlengths(c);
 748              		.loc 1 3436 19 is_stmt 0 discriminator 4 view .LVU230
 749 0064 3046     		mov	r0, r6
 750 0066 FFF7FEFF 		bl	charlengths
 751              	.LVL66:
3434:src/display.c **** 	    str += 3;
 752              		.loc 1 3434 10 discriminator 4 view .LVU231
 753 006a 039B     		ldr	r3, [sp, #12]
 754 006c 0333     		adds	r3, r3, #3
ARM GAS  /tmp/ccKZqSeG.s 			page 77


 755 006e 0393     		str	r3, [sp, #12]
 756              	.LVL67:
 757              		.loc 1 3436 6 is_stmt 1 discriminator 4 view .LVU232
3437:src/display.c **** 	  } else {
3438:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3439:src/display.c **** 	    real_width = width = charlengths(c);
3440:src/display.c **** 	    current_smallp = smallp;
3441:src/display.c **** 	  }
3442:src/display.c **** 
3443:src/display.c **** 	  if (x + real_width > b_w + 1)
 758              		.loc 1 3443 4 discriminator 4 view .LVU233
 759              		.loc 1 3443 7 is_stmt 0 discriminator 4 view .LVU234
 760 0070 049B     		ldr	r3, [sp, #16]
 761              	.LVL68:
 762              		.loc 1 3443 10 discriminator 4 view .LVU235
 763 0072 4044     		add	r0, r0, r8
 764              		.loc 1 3443 7 discriminator 4 view .LVU236
 765 0074 9842     		cmp	r0, r3
 766 0076 59D8     		bhi	.L94
 767              	.L98:
3444:src/display.c **** 	    break;
3445:src/display.c **** 
3446:src/display.c **** 	  if (posns_state != current_smallp) {
 768              		.loc 1 3446 4 is_stmt 1 view .LVU237
 769              		.loc 1 3446 7 is_stmt 0 view .LVU238
 770 0078 029B     		ldr	r3, [sp, #8]
 771 007a A342     		cmp	r3, r4
3447:src/display.c **** 	    findlengths(posns, current_smallp);
 772              		.loc 1 3447 6 view .LVU239
 773 007c 0BAB     		add	r3, sp, #44
3446:src/display.c **** 	    findlengths(posns, current_smallp);
 774              		.loc 1 3446 7 view .LVU240
 775 007e 05D0     		beq	.L70
 776              		.loc 1 3447 6 is_stmt 1 view .LVU241
 777 0080 1846     		mov	r0, r3
 778 0082 0299     		ldr	r1, [sp, #8]
 779 0084 0193     		str	r3, [sp, #4]
 780 0086 FFF7FEFF 		bl	findlengths
 781              	.LVL69:
 782 008a 019B     		ldr	r3, [sp, #4]
3448:src/display.c **** 	    posns_state = current_smallp;
 783              		.loc 1 3448 6 view .LVU242
 784              	.LVL70:
 785              	.L70:
3449:src/display.c **** 	  }
3450:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 786              		.loc 1 3450 4 view .LVU243
 787 008c 029A     		ldr	r2, [sp, #8]
 788 008e 3046     		mov	r0, r6
 789 0090 09A9     		add	r1, sp, #36
 790 0092 FFF7FEFF 		bl	unpackchar
 791              	.LVL71:
3451:src/display.c **** #else
3452:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3453:src/display.c **** 
3454:src/display.c **** 	  //cmap = &charset[c][0];
3455:src/display.c **** 	  width = charlengths(c);
ARM GAS  /tmp/ccKZqSeG.s 			page 78


3456:src/display.c **** 
3457:src/display.c **** 	  if (x + width > b_w+1)
3458:src/display.c **** 	    break;
3459:src/display.c **** 
3460:src/display.c **** 	  /* Decode the packed character bytes */
3461:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3462:src/display.c **** #endif
3463:src/display.c **** 
3464:src/display.c **** 	  for (i=0; i<6; i++)
 792              		.loc 1 3464 4 view .LVU244
 793              		.loc 1 3464 14 view .LVU245
 794 0096 059B     		ldr	r3, [sp, #20]
 795 0098 08EB4809 		add	r9, r8, r8, lsl #1
 796 009c 03EB4903 		add	r3, r3, r9, lsl #1
 797 00a0 09AC     		add	r4, sp, #36
 798 00a2 0193     		str	r3, [sp, #4]
 799              		.loc 1 3464 10 is_stmt 0 view .LVU246
 800 00a4 0027     		movs	r7, #0
 801 00a6 AAEB0806 		sub	r6, r10, r8
 802              	.LVL72:
 803              	.L71:
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 804              		.loc 1 3465 16 is_stmt 1 view .LVU247
 805              		.loc 1 3465 6 is_stmt 0 view .LVU248
 806 00aa 002D     		cmp	r5, #0
 807 00ac 20DD     		ble	.L77
3466:src/display.c **** 	      if (x+j >= b_w)
 808              		.loc 1 3466 8 is_stmt 1 view .LVU249
 809              		.loc 1 3466 11 is_stmt 0 view .LVU250
 810 00ae C245     		cmp	r10, r8
 811 00b0 1ED9     		bls	.L77
 812 00b2 019B     		ldr	r3, [sp, #4]
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 813              		.loc 1 3465 12 view .LVU251
 814 00b4 4FF00009 		mov	r9, #0
 815 00b8 07EB030B 		add	fp, r7, r3
 816 00bc 09E0     		b	.L72
 817              	.LVL73:
 818              	.L96:
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 819              		.loc 1 3465 26 view .LVU252
 820 00be 09F10109 		add	r9, r9, #1
 821              	.LVL74:
 822              	.LBB206:
 823              	.LBB207:
 284:src/display.c ****   else	clr_dot(n);
 824              		.loc 1 284 11 view .LVU253
 825 00c2 FFF7FEFF 		bl	set_dot
 826              	.LVL75:
 284:src/display.c ****   else	clr_dot(n);
 827              		.loc 1 284 11 view .LVU254
 828              	.LBE207:
 829              	.LBE206:
 830              		.loc 1 3466 8 is_stmt 1 view .LVU255
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 831              		.loc 1 3465 25 view .LVU256
3465:src/display.c **** 	    for (j=0; j<width; j++) {
ARM GAS  /tmp/ccKZqSeG.s 			page 79


 832              		.loc 1 3465 16 view .LVU257
3465:src/display.c **** 	    for (j=0; j<width; j++) {
 833              		.loc 1 3465 6 is_stmt 0 view .LVU258
 834 00c6 4D45     		cmp	r5, r9
 835 00c8 0BF1060B 		add	fp, fp, #6
 836 00cc 10D0     		beq	.L77
 837              	.L76:
 838              		.loc 1 3466 11 view .LVU259
 839 00ce 4E45     		cmp	r6, r9
 840 00d0 0ED0     		beq	.L77
 841              	.LVL76:
 842              	.L72:
3467:src/display.c **** 		break;
3468:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3469:src/display.c **** 	      if (cmap[i] & (1 << j))
3470:src/display.c **** 		mat[i] |= 1LL << (x+j);
3471:src/display.c **** #else
3472:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 843              		.loc 1 3472 8 is_stmt 1 discriminator 2 view .LVU260
 844              	.LBB211:
 845              	.LBI206:
 283:src/display.c ****   if (on)	set_dot(n);
 846              		.loc 1 283 6 discriminator 2 view .LVU261
 847              	.LBB208:
 284:src/display.c ****   else	clr_dot(n);
 848              		.loc 1 284 3 discriminator 2 view .LVU262
 284:src/display.c ****   else	clr_dot(n);
 849              		.loc 1 284 11 discriminator 2 view .LVU263
 285:src/display.c **** }
 850              		.loc 1 285 8 discriminator 2 view .LVU264
 851              	.LBE208:
 852              	.LBE211:
 853              		.loc 1 3472 32 is_stmt 0 discriminator 2 view .LVU265
 854 00d2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 855              		.loc 1 3472 47 discriminator 2 view .LVU266
 856 00d4 43FA09F3 		asr	r3, r3, r9
 857              	.LBB212:
 858              	.LBB209:
 284:src/display.c ****   else	clr_dot(n);
 859              		.loc 1 284 6 discriminator 2 view .LVU267
 860 00d8 13F0010F 		tst	r3, #1
 284:src/display.c ****   else	clr_dot(n);
 861              		.loc 1 284 11 discriminator 2 view .LVU268
 862 00dc 5846     		mov	r0, fp
 284:src/display.c ****   else	clr_dot(n);
 863              		.loc 1 284 6 discriminator 2 view .LVU269
 864 00de EED1     		bne	.L96
 865              	.LBE209:
 866              	.LBE212:
3465:src/display.c **** 	      if (x+j >= b_w)
 867              		.loc 1 3465 26 view .LVU270
 868 00e0 09F10109 		add	r9, r9, #1
 869              	.LVL77:
 870              	.LBB213:
 871              	.LBB210:
 285:src/display.c **** }
 872              		.loc 1 285 8 view .LVU271
ARM GAS  /tmp/ccKZqSeG.s 			page 80


 873 00e4 FFF7FEFF 		bl	clr_dot
 874              	.LVL78:
 285:src/display.c **** }
 875              		.loc 1 285 8 view .LVU272
 876              	.LBE210:
 877              	.LBE213:
3466:src/display.c **** 		break;
 878              		.loc 1 3466 8 is_stmt 1 view .LVU273
3465:src/display.c **** 	      if (x+j >= b_w)
 879              		.loc 1 3465 25 view .LVU274
3465:src/display.c **** 	      if (x+j >= b_w)
 880              		.loc 1 3465 16 view .LVU275
3465:src/display.c **** 	      if (x+j >= b_w)
 881              		.loc 1 3465 6 is_stmt 0 view .LVU276
 882 00e8 4D45     		cmp	r5, r9
 883 00ea 0BF1060B 		add	fp, fp, #6
 884 00ee EED1     		bne	.L76
 885              	.LVL79:
 886              	.L77:
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 887              		.loc 1 3464 19 is_stmt 1 view .LVU277
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3464 20 is_stmt 0 view .LVU278
 889 00f0 0137     		adds	r7, r7, #1
 890              	.LVL80:
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 891              		.loc 1 3464 14 is_stmt 1 view .LVU279
3464:src/display.c **** 	    for (j=0; j<width; j++) {
 892              		.loc 1 3464 4 is_stmt 0 view .LVU280
 893 00f2 062F     		cmp	r7, #6
 894 00f4 04F10104 		add	r4, r4, #1
 895 00f8 D7D1     		bne	.L71
3473:src/display.c **** #endif
3474:src/display.c **** 	    }
3475:src/display.c **** 	  x += width;
 896              		.loc 1 3475 4 is_stmt 1 view .LVU281
 897              	.LBE214:
3407:src/display.c **** 	  int c;
 898              		.loc 1 3407 9 is_stmt 0 view .LVU282
 899 00fa 039B     		ldr	r3, [sp, #12]
 900 00fc 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 901              	.LBB215:
 902              		.loc 1 3475 6 view .LVU283
 903 00fe A844     		add	r8, r8, r5
 904              	.LVL81:
 905              		.loc 1 3475 6 view .LVU284
 906              	.LBE215:
3407:src/display.c **** 	  int c;
 907              		.loc 1 3407 8 is_stmt 1 view .LVU285
 908 0100 A6B1     		cbz	r6, .L94
3407:src/display.c **** 	  int c;
 909              		.loc 1 3407 22 is_stmt 0 discriminator 1 view .LVU286
 910 0102 049B     		ldr	r3, [sp, #16]
 911              	.LVL82:
3407:src/display.c **** 	  int c;
 912              		.loc 1 3407 22 discriminator 1 view .LVU287
 913 0104 9845     		cmp	r8, r3
ARM GAS  /tmp/ccKZqSeG.s 			page 81


 914 0106 11D8     		bhi	.L94
 915              	.LBB216:
3422:src/display.c **** 	    width = str[1] & 0x1F;
 916              		.loc 1 3422 7 view .LVU288
 917 0108 072E     		cmp	r6, #7
 918              	.LBE216:
 919 010a 029C     		ldr	r4, [sp, #8]
 920              	.LBB217:
3408:src/display.c **** 	  int width;
 921              		.loc 1 3408 4 is_stmt 1 view .LVU289
3409:src/display.c **** 	  unsigned char cmap[6];
 922              		.loc 1 3409 4 view .LVU290
3410:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 923              		.loc 1 3410 4 view .LVU291
3412:src/display.c **** 	  int current_smallp;
 924              		.loc 1 3412 4 view .LVU292
3413:src/display.c **** 
 925              		.loc 1 3413 4 view .LVU293
3422:src/display.c **** 	    width = str[1] & 0x1F;
 926              		.loc 1 3422 4 view .LVU294
3422:src/display.c **** 	    width = str[1] & 0x1F;
 927              		.loc 1 3422 7 is_stmt 0 view .LVU295
 928 010c 95D0     		beq	.L97
 929              	.LVL83:
 930              	.L63:
3438:src/display.c **** 	    real_width = width = charlengths(c);
 931              		.loc 1 3438 6 is_stmt 1 view .LVU296
3438:src/display.c **** 	    real_width = width = charlengths(c);
 932              		.loc 1 3438 8 is_stmt 0 view .LVU297
 933 010e 079B     		ldr	r3, [sp, #28]
 934 0110 1E44     		add	r6, r6, r3
3439:src/display.c **** 	    current_smallp = smallp;
 935              		.loc 1 3439 27 view .LVU298
 936 0112 3046     		mov	r0, r6
 937 0114 FFF7FEFF 		bl	charlengths
 938              	.LVL84:
3438:src/display.c **** 	    real_width = width = charlengths(c);
 939              		.loc 1 3438 30 view .LVU299
 940 0118 039B     		ldr	r3, [sp, #12]
 941 011a 0133     		adds	r3, r3, #1
 942 011c 0393     		str	r3, [sp, #12]
 943              	.LVL85:
3439:src/display.c **** 	    current_smallp = smallp;
 944              		.loc 1 3439 6 is_stmt 1 view .LVU300
3439:src/display.c **** 	    current_smallp = smallp;
 945              		.loc 1 3439 25 is_stmt 0 view .LVU301
 946 011e 069B     		ldr	r3, [sp, #24]
 947              	.LVL86:
3439:src/display.c **** 	    current_smallp = smallp;
 948              		.loc 1 3439 25 view .LVU302
 949 0120 0293     		str	r3, [sp, #8]
3443:src/display.c **** 	    break;
 950              		.loc 1 3443 7 view .LVU303
 951 0122 049B     		ldr	r3, [sp, #16]
3439:src/display.c **** 	    current_smallp = smallp;
 952              		.loc 1 3439 25 view .LVU304
 953 0124 0546     		mov	r5, r0
ARM GAS  /tmp/ccKZqSeG.s 			page 82


 954              	.LVL87:
3440:src/display.c **** 	  }
 955              		.loc 1 3440 6 is_stmt 1 view .LVU305
3443:src/display.c **** 	    break;
 956              		.loc 1 3443 4 view .LVU306
3443:src/display.c **** 	    break;
 957              		.loc 1 3443 10 is_stmt 0 view .LVU307
 958 0126 4044     		add	r0, r0, r8
 959              	.LVL88:
3443:src/display.c **** 	    break;
 960              		.loc 1 3443 7 view .LVU308
 961 0128 9842     		cmp	r0, r3
 962 012a A5D9     		bls	.L98
 963              	.LVL89:
 964              	.L94:
3443:src/display.c **** 	    break;
 965              		.loc 1 3443 7 view .LVU309
 966 012c 059B     		ldr	r3, [sp, #20]
 967 012e 08EB4808 		add	r8, r8, r8, lsl #1
 968              	.LVL90:
3443:src/display.c **** 	    break;
 969              		.loc 1 3443 7 view .LVU310
 970 0132 03EB4808 		add	r8, r3, r8, lsl #1
 971              	.LVL91:
 972              	.L62:
3443:src/display.c **** 	    break;
 973              		.loc 1 3443 7 view .LVU311
 974              	.LBE217:
3476:src/display.c **** 	}
3477:src/display.c **** 
3478:src/display.c **** 
3479:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3480:src/display.c **** 	set_status_grob(mat);
3481:src/display.c **** #else
3482:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 975              		.loc 1 3482 2 is_stmt 1 view .LVU312
 976              		.loc 1 3482 20 view .LVU313
 977              		.loc 1 3482 2 is_stmt 0 view .LVU314
 978 0136 969B     		ldr	r3, [sp, #600]
 979 0138 9845     		cmp	r8, r3
 980 013a 07DA     		bge	.L59
 981 013c 1C46     		mov	r4, r3
 982              	.L80:
3483:src/display.c **** 	  clr_dot(i);
 983              		.loc 1 3483 4 is_stmt 1 discriminator 3 view .LVU315
 984 013e 4046     		mov	r0, r8
3482:src/display.c **** 	  clr_dot(i);
 985              		.loc 1 3482 28 is_stmt 0 discriminator 3 view .LVU316
 986 0140 08F10108 		add	r8, r8, #1
 987              	.LVL92:
 988              		.loc 1 3483 4 discriminator 3 view .LVU317
 989 0144 FFF7FEFF 		bl	clr_dot
 990              	.LVL93:
3482:src/display.c **** 	  clr_dot(i);
 991              		.loc 1 3482 27 is_stmt 1 discriminator 3 view .LVU318
3482:src/display.c **** 	  clr_dot(i);
 992              		.loc 1 3482 20 discriminator 3 view .LVU319
ARM GAS  /tmp/ccKZqSeG.s 			page 83


3482:src/display.c **** 	  clr_dot(i);
 993              		.loc 1 3482 2 is_stmt 0 discriminator 3 view .LVU320
 994 0148 4445     		cmp	r4, r8
 995 014a F8D1     		bne	.L80
 996              	.L59:
3484:src/display.c **** #endif
3485:src/display.c ****       }
 997              		.loc 1 3485 7 view .LVU321
 998 014c 0DF50D7D 		add	sp, sp, #564
 999              		.cfi_remember_state
 1000              		.cfi_def_cfa_offset 36
 1001              		@ sp needed
 1002 0150 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1003              	.LVL94:
 1004              	.L64:
 1005              		.cfi_restore_state
 1006              	.LBB218:
3428:src/display.c **** 	      break;
 1007              		.loc 1 3428 17 is_stmt 1 view .LVU322
3429:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1008              		.loc 1 3429 8 view .LVU323
3433:src/display.c **** 	    str += 3;
 1009              		.loc 1 3433 6 view .LVU324
3433:src/display.c **** 	    str += 3;
 1010              		.loc 1 3433 10 is_stmt 0 view .LVU325
 1011 0154 039B     		ldr	r3, [sp, #12]
 1012 0156 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3428:src/display.c **** 	      break;
 1013              		.loc 1 3428 32 view .LVU326
 1014 0158 0023     		movs	r3, #0
 1015 015a 0293     		str	r3, [sp, #8]
 1016 015c 82E7     		b	.L67
 1017              	.LVL95:
 1018              	.L65:
3430:src/display.c **** 	      break;
 1019              		.loc 1 3430 17 is_stmt 1 view .LVU327
3431:src/display.c **** 	    }
 1020              		.loc 1 3431 8 view .LVU328
3433:src/display.c **** 	    str += 3;
 1021              		.loc 1 3433 6 view .LVU329
3433:src/display.c **** 	    str += 3;
 1022              		.loc 1 3433 10 is_stmt 0 view .LVU330
 1023 015e 039B     		ldr	r3, [sp, #12]
 1024 0160 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3430:src/display.c **** 	      break;
 1025              		.loc 1 3430 32 view .LVU331
 1026 0162 0123     		movs	r3, #1
 1027 0164 0293     		str	r3, [sp, #8]
 1028 0166 06F58076 		add	r6, r6, #256
 1029 016a 7BE7     		b	.L67
 1030              	.LVL96:
 1031              	.L83:
3430:src/display.c **** 	      break;
 1032              		.loc 1 3430 32 view .LVU332
 1033 016c 069B     		ldr	r3, [sp, #24]
 1034              	.LVL97:
3430:src/display.c **** 	      break;
ARM GAS  /tmp/ccKZqSeG.s 			page 84


 1035              		.loc 1 3430 32 view .LVU333
 1036 016e 0293     		str	r3, [sp, #8]
 1037 0170 78E7     		b	.L67
 1038              	.LVL98:
 1039              	.L95:
3430:src/display.c **** 	      break;
 1040              		.loc 1 3430 32 view .LVU334
 1041 0172 DDF81480 		ldr	r8, [sp, #20]
 1042 0176 DEE7     		b	.L62
 1043              	.L100:
 1044              		.align	2
 1045              	.L99:
 1046 0178 00000000 		.word	RectPolConv
 1047              	.LBE218:
 1048              		.cfi_endproc
 1049              	.LFE38:
 1051              		.section	.text.set_exp,"ax",%progbits
 1052              		.align	1
 1053              		.p2align 2,,3
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	set_exp:
 1060              	.LVL99:
 1061              	.LFB14:
 374:src/display.c ****   union {
 1062              		.loc 1 374 52 is_stmt 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 8
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 375:src/display.c ****     char buf[4];
 1066              		.loc 1 375 3 view .LVU336
 379:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1067              		.loc 1 379 3 view .LVU337
 381:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1068              		.loc 1 381 3 view .LVU338
 387:src/display.c **** #  endif
 1069              		.loc 1 387 3 view .LVU339
 396:src/display.c ****   if (exp < 0) {
 1070              		.loc 1 396 3 view .LVU340
 374:src/display.c ****   union {
 1071              		.loc 1 374 52 is_stmt 0 view .LVU341
 1072 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1073              		.cfi_def_cfa_offset 20
 1074              		.cfi_offset 4, -20
 1075              		.cfi_offset 5, -16
 1076              		.cfi_offset 6, -12
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 397:src/display.c ****     negative = 1;
 1079              		.loc 1 397 6 view .LVU342
 1080 0002 051E     		subs	r5, r0, #0
 374:src/display.c ****   union {
 1081              		.loc 1 374 52 view .LVU343
 1082 0004 83B0     		sub	sp, sp, #12
 1083              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccKZqSeG.s 			page 85


 374:src/display.c ****   union {
 1084              		.loc 1 374 52 view .LVU344
 1085 0006 0E46     		mov	r6, r1
 1086              	.LVL100:
 397:src/display.c ****     negative = 1;
 1087              		.loc 1 397 3 is_stmt 1 view .LVU345
 397:src/display.c ****     negative = 1;
 1088              		.loc 1 397 6 is_stmt 0 view .LVU346
 1089 0008 5BDB     		blt	.L133
 402:src/display.c **** #endif
 1090              		.loc 1 402 13 view .LVU347
 1091 000a 3B4B     		ldr	r3, .L135
 1092 000c EC17     		asrs	r4, r5, #31
 1093 000e 83FB0513 		smull	r1, r3, r3, r5
 1094              	.LVL101:
 402:src/display.c **** #endif
 1095              		.loc 1 402 13 view .LVU348
 1096 0012 C4EBA314 		rsb	r4, r4, r3, asr #6
 396:src/display.c ****   if (exp < 0) {
 1097              		.loc 1 396 12 view .LVU349
 1098 0016 06F00207 		and	r7, r6, #2
 1099              	.LVL102:
 402:src/display.c **** #endif
 1100              		.loc 1 402 3 is_stmt 1 view .LVU350
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1101              		.loc 1 404 3 view .LVU351
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1102              		.loc 1 404 6 is_stmt 0 view .LVU352
 1103 001a 002A     		cmp	r2, #0
 1104 001c 60D0     		beq	.L106
 407:src/display.c **** #else
 1105              		.loc 1 407 5 is_stmt 1 view .LVU353
 407:src/display.c **** #else
 1106              		.loc 1 407 8 is_stmt 0 view .LVU354
 1107 001e 2CB1     		cbz	r4, .L107
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1108              		.loc 1 411 2 is_stmt 1 view .LVU355
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1109              		.loc 1 411 5 is_stmt 0 view .LVU356
 1110 0020 57B9     		cbnz	r7, .L104
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1111              		.loc 1 411 17 is_stmt 1 discriminator 1 view .LVU357
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1112              		.loc 1 411 21 is_stmt 0 discriminator 1 view .LVU358
 1113 0022 1446     		mov	r4, r2
 1114              	.LVL103:
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1115              		.loc 1 411 24 discriminator 1 view .LVU359
 1116 0024 3A23     		movs	r3, #58
 1117              	.LVL104:
 411:src/display.c **** 	// No exponent separator for large -ve exponents
 1118              		.loc 1 411 24 discriminator 1 view .LVU360
 1119 0026 04F8013B 		strb	r3, [r4], #1
 1120              	.LVL105:
 418:src/display.c ****     }
 1121              		.loc 1 418 7 is_stmt 1 discriminator 1 view .LVU361
 1122 002a 09E0     		b	.L108
ARM GAS  /tmp/ccKZqSeG.s 			page 86


 1123              	.LVL106:
 1124              	.L107:
 414:src/display.c **** #else
 1125              		.loc 1 414 12 view .LVU362
 414:src/display.c **** #else
 1126              		.loc 1 414 16 is_stmt 0 view .LVU363
 1127 002c 1446     		mov	r4, r2
 1128              	.LVL107:
 414:src/display.c **** #else
 1129              		.loc 1 414 19 view .LVU364
 1130 002e 6523     		movs	r3, #101
 1131              	.LVL108:
 414:src/display.c **** #else
 1132              		.loc 1 414 19 view .LVU365
 1133 0030 04F8013B 		strb	r3, [r4], #1
 1134              	.LVL109:
 418:src/display.c ****     }
 1135              		.loc 1 418 7 is_stmt 1 view .LVU366
 418:src/display.c ****     }
 1136              		.loc 1 418 10 is_stmt 0 view .LVU367
 1137 0034 27B1     		cbz	r7, .L108
 414:src/display.c **** #else
 1138              		.loc 1 414 16 view .LVU368
 1139 0036 2246     		mov	r2, r4
 1140              	.LVL110:
 1141              	.L104:
 418:src/display.c ****     }
 1142              		.loc 1 418 21 is_stmt 1 discriminator 1 view .LVU369
 418:src/display.c ****     }
 1143              		.loc 1 418 25 is_stmt 0 discriminator 1 view .LVU370
 1144 0038 1446     		mov	r4, r2
 1145              	.LVL111:
 418:src/display.c ****     }
 1146              		.loc 1 418 28 discriminator 1 view .LVU371
 1147 003a 2D23     		movs	r3, #45
 1148 003c 04F8013B 		strb	r3, [r4], #1
 1149              	.LVL112:
 1150              	.L108:
 466:src/display.c **** #endif
 1151              		.loc 1 466 7 is_stmt 1 view .LVU372
 1152 0040 01AF     		add	r7, sp, #4
 1153 0042 3846     		mov	r0, r7
 1154 0044 0422     		movs	r2, #4
 1155 0046 0021     		movs	r1, #0
 1156 0048 FFF7FEFF 		bl	xset
 1157              	.LVL113:
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1158              		.loc 1 468 7 view .LVU373
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1159              		.loc 1 468 10 is_stmt 0 view .LVU374
 1160 004c 16F0050F 		tst	r6, #5
 1161 0050 2CD1     		bne	.L113
 1162              	.L115:
 489:src/display.c ****     no_number:
 1163              		.loc 1 489 2 is_stmt 1 view .LVU375
 1164 0052 2946     		mov	r1, r5
 1165 0054 3846     		mov	r0, r7
ARM GAS  /tmp/ccKZqSeG.s 			page 87


 1166 0056 FFF7FEFF 		bl	num_arg
 1167              	.LVL114:
 491:src/display.c ****     }
 1168              		.loc 1 491 7 view .LVU376
 1169 005a 2146     		mov	r1, r4
 1170 005c 3846     		mov	r0, r7
 1171 005e FFF7FEFF 		bl	set_exp_digits_string
 1172              	.LVL115:
 492:src/display.c **** 
 1173              		.loc 1 492 5 is_stmt 0 view .LVU377
 1174 0062 03B0     		add	sp, sp, #12
 1175              		.cfi_remember_state
 1176              		.cfi_def_cfa_offset 20
 1177              		@ sp needed
 1178 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 1179              	.LVL116:
 1180              	.L116:
 1181              		.cfi_restore_state
 398:src/display.c ****     exp = -exp;
 1182              		.loc 1 398 14 view .LVU378
 1183 0066 0127     		movs	r7, #1
 1184              	.LVL117:
 1185              	.L103:
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1186              		.loc 1 421 21 is_stmt 1 view .LVU379
 1187              	.LBB219:
 1188              	.LBI219:
 254:src/display.c **** {
 1189              		.loc 1 254 13 view .LVU380
 1190              	.LBB220:
 256:src/display.c **** }
 1191              		.loc 1 256 3 view .LVU381
 1192 0068 8220     		movs	r0, #130
 1193 006a FFF7FEFF 		bl	set_dot
 1194              	.LVL118:
 1195              	.L109:
 256:src/display.c **** }
 1196              		.loc 1 256 3 is_stmt 0 view .LVU382
 1197              	.LBE220:
 1198              	.LBE219:
 423:src/display.c **** #else
 1199              		.loc 1 423 7 is_stmt 1 view .LVU383
 423:src/display.c **** #else
 1200              		.loc 1 423 10 is_stmt 0 view .LVU384
 1201 006e 002C     		cmp	r4, #0
 1202 0070 E6D0     		beq	.L108
 427:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1203              		.loc 1 427 4 is_stmt 1 view .LVU385
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1204              		.loc 1 441 6 view .LVU386
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1205              		.loc 1 441 23 is_stmt 0 view .LVU387
 1206 0072 224B     		ldr	r3, .L135+4
 441:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1207              		.loc 1 441 10 view .LVU388
 1208 0074 03FB0455 		mla	r5, r3, r4, r5
 1209              	.LVL119:
ARM GAS  /tmp/ccKZqSeG.s 			page 88


 443:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1210              		.loc 1 443 6 is_stmt 1 view .LVU389
 443:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1211              		.loc 1 443 9 is_stmt 0 view .LVU390
 1212 0078 F306     		lsls	r3, r6, #27
 1213 007a 0AD5     		bpl	.L110
 1214              	.LBB221:
 447:src/display.c **** 		// Clear digits and separators
 1215              		.loc 1 447 15 view .LVU391
 1216 007c 4F26     		movs	r6, #79
 1217              	.LVL120:
 1218              	.L111:
 449:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1219              		.loc 1 449 3 is_stmt 1 discriminator 3 view .LVU392
 1220 007e 3046     		mov	r0, r6
 447:src/display.c **** 		// Clear digits and separators
 1221              		.loc 1 447 66 is_stmt 0 discriminator 3 view .LVU393
 1222 0080 0136     		adds	r6, r6, #1
 1223              	.LVL121:
 449:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1224              		.loc 1 449 3 discriminator 3 view .LVU394
 1225 0082 FFF7FEFF 		bl	clr_dot
 1226              	.LVL122:
 447:src/display.c **** 		// Clear digits and separators
 1227              		.loc 1 447 66 is_stmt 1 discriminator 3 view .LVU395
 447:src/display.c **** 		// Clear digits and separators
 1228              		.loc 1 447 41 discriminator 3 view .LVU396
 447:src/display.c **** 		// Clear digits and separators
 1229              		.loc 1 447 8 is_stmt 0 discriminator 3 view .LVU397
 1230 0086 632E     		cmp	r6, #99
 1231 0088 F9D1     		bne	.L111
 450:src/display.c **** 	    }
 1232              		.loc 1 450 8 is_stmt 1 view .LVU398
 1233 008a 3E21     		movs	r1, #62
 1234 008c 5120     		movs	r0, #81
 1235 008e FFF7FEFF 		bl	set_dig
 1236              	.LVL123:
 1237              	.L110:
 450:src/display.c **** 	    }
 1238              		.loc 1 450 8 is_stmt 0 view .LVU399
 1239              	.LBE221:
 453:src/display.c **** 	      CLR_EXP_SIGN;
 1240              		.loc 1 453 6 is_stmt 1 view .LVU400
 453:src/display.c **** 	      CLR_EXP_SIGN;
 1241              		.loc 1 453 9 is_stmt 0 view .LVU401
 1242 0092 47BB     		cbnz	r7, .L134
 1243              	.L112:
 457:src/display.c **** 	    flags = 1;
 1244              		.loc 1 457 6 is_stmt 1 view .LVU402
 1245 0094 04F13001 		add	r1, r4, #48
 1246 0098 6320     		movs	r0, #99
 466:src/display.c **** #endif
 1247              		.loc 1 466 7 is_stmt 0 view .LVU403
 1248 009a 01AF     		add	r7, sp, #4
 457:src/display.c **** 	    flags = 1;
 1249              		.loc 1 457 6 view .LVU404
 1250 009c FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccKZqSeG.s 			page 89


 1251              	.LVL124:
 458:src/display.c **** 	  }
 1252              		.loc 1 458 6 is_stmt 1 view .LVU405
 466:src/display.c **** #endif
 1253              		.loc 1 466 7 view .LVU406
 1254 00a0 3846     		mov	r0, r7
 1255 00a2 0422     		movs	r2, #4
 1256 00a4 0021     		movs	r1, #0
 1257 00a6 FFF7FEFF 		bl	xset
 1258              	.LVL125:
 468:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1259              		.loc 1 468 7 view .LVU407
 466:src/display.c **** #endif
 1260              		.loc 1 466 7 is_stmt 0 view .LVU408
 1261 00aa 0024     		movs	r4, #0
 1262              	.LVL126:
 1263              	.L113:
 469:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1264              		.loc 1 469 2 is_stmt 1 view .LVU409
 1265 00ac 2946     		mov	r1, r5
 1266 00ae 0322     		movs	r2, #3
 1267 00b0 3846     		mov	r0, r7
 1268 00b2 FFF7FEFF 		bl	num_arg_0
 1269              	.LVL127:
 491:src/display.c ****     }
 1270              		.loc 1 491 7 view .LVU410
 1271 00b6 2146     		mov	r1, r4
 1272 00b8 3846     		mov	r0, r7
 1273 00ba FFF7FEFF 		bl	set_exp_digits_string
 1274              	.LVL128:
 492:src/display.c **** 
 1275              		.loc 1 492 5 is_stmt 0 view .LVU411
 1276 00be 03B0     		add	sp, sp, #12
 1277              		.cfi_remember_state
 1278              		.cfi_def_cfa_offset 20
 1279              		@ sp needed
 1280 00c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1281              	.LVL129:
 1282              	.L133:
 1283              		.cfi_restore_state
 398:src/display.c ****     exp = -exp;
 1284              		.loc 1 398 5 is_stmt 1 view .LVU412
 399:src/display.c ****   }
 1285              		.loc 1 399 5 view .LVU413
 402:src/display.c **** #endif
 1286              		.loc 1 402 13 is_stmt 0 view .LVU414
 1287 00c2 0D4C     		ldr	r4, .L135
 399:src/display.c ****   }
 1288              		.loc 1 399 9 view .LVU415
 1289 00c4 6D42     		rsbs	r5, r5, #0
 1290              	.LVL130:
 402:src/display.c **** #endif
 1291              		.loc 1 402 3 is_stmt 1 view .LVU416
 402:src/display.c **** #endif
 1292              		.loc 1 402 13 is_stmt 0 view .LVU417
 1293 00c6 A4FB0534 		umull	r3, r4, r4, r5
 1294 00ca A409     		lsrs	r4, r4, #6
ARM GAS  /tmp/ccKZqSeG.s 			page 90


 1295              	.LVL131:
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1296              		.loc 1 404 3 is_stmt 1 view .LVU418
 404:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1297              		.loc 1 404 6 is_stmt 0 view .LVU419
 1298 00cc 002A     		cmp	r2, #0
 1299 00ce CAD0     		beq	.L116
 407:src/display.c **** #else
 1300              		.loc 1 407 5 is_stmt 1 view .LVU420
 407:src/display.c **** #else
 1301              		.loc 1 407 8 is_stmt 0 view .LVU421
 1302 00d0 002C     		cmp	r4, #0
 1303 00d2 B1D1     		bne	.L104
 414:src/display.c **** #else
 1304              		.loc 1 414 12 is_stmt 1 view .LVU422
 414:src/display.c **** #else
 1305              		.loc 1 414 16 is_stmt 0 view .LVU423
 1306 00d4 1446     		mov	r4, r2
 1307              	.LVL132:
 414:src/display.c **** #else
 1308              		.loc 1 414 19 view .LVU424
 1309 00d6 6523     		movs	r3, #101
 1310 00d8 04F8013B 		strb	r3, [r4], #1
 1311              	.LVL133:
 418:src/display.c ****     }
 1312              		.loc 1 418 7 is_stmt 1 view .LVU425
 414:src/display.c **** #else
 1313              		.loc 1 414 16 is_stmt 0 view .LVU426
 1314 00dc 2246     		mov	r2, r4
 1315 00de ABE7     		b	.L104
 1316              	.LVL134:
 1317              	.L106:
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1318              		.loc 1 421 7 is_stmt 1 view .LVU427
 421:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1319              		.loc 1 421 10 is_stmt 0 view .LVU428
 1320 00e0 002F     		cmp	r7, #0
 1321 00e2 C4D0     		beq	.L109
 1322 00e4 C0E7     		b	.L103
 1323              	.LVL135:
 1324              	.L134:
 454:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1325              		.loc 1 454 8 is_stmt 1 view .LVU429
 1326              	.LBB222:
 1327              	.LBI222:
 259:src/display.c **** {
 1328              		.loc 1 259 13 view .LVU430
 1329              	.LBB223:
 261:src/display.c **** }
 1330              		.loc 1 261 3 view .LVU431
 1331 00e6 8220     		movs	r0, #130
 1332 00e8 FFF7FEFF 		bl	clr_dot
 1333              	.LVL136:
 1334              	.LBE223:
 1335              	.LBE222:
 455:src/display.c **** 	    }
 1336              		.loc 1 455 8 view .LVU432
ARM GAS  /tmp/ccKZqSeG.s 			page 91


 1337 00ec 2D21     		movs	r1, #45
 1338 00ee 5A20     		movs	r0, #90
 1339 00f0 FFF7FEFF 		bl	set_dig
 1340              	.LVL137:
 1341 00f4 CEE7     		b	.L112
 1342              	.L136:
 1343 00f6 00BF     		.align	2
 1344              	.L135:
 1345 00f8 D34D6210 		.word	274877907
 1346 00fc 18FCFFFF 		.word	-1000
 1347              		.cfi_endproc
 1348              	.LFE14:
 1350              		.section	.text.set_annunciators,"ax",%progbits
 1351              		.align	1
 1352              		.p2align 2,,3
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	set_annunciators:
 1359              	.LFB32:
2527:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 1360              		.loc 1 2527 7 view -0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
2528:src/display.c **** 
 1364              		.loc 1 2528 2 view .LVU434
2527:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 1365              		.loc 1 2527 7 is_stmt 0 view .LVU435
 1366 0000 70B5     		push	{r4, r5, r6, lr}
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 4, -16
 1369              		.cfi_offset 5, -12
 1370              		.cfi_offset 6, -8
 1371              		.cfi_offset 14, -4
2528:src/display.c **** 
 1372              		.loc 1 2528 29 view .LVU436
 1373 0002 FFF7FEFF 		bl	get_trig_mode
 1374              	.LVL138:
2541:src/display.c **** #endif
 1375              		.loc 1 2541 14 view .LVU437
 1376 0006 2E4E     		ldr	r6, .L164
2528:src/display.c **** 
 1377              		.loc 1 2528 29 view .LVU438
 1378 0008 0446     		mov	r4, r0
2536:src/display.c **** #else
 1379              		.loc 1 2536 2 view .LVU439
 1380 000a 8820     		movs	r0, #136
 1381              	.LVL139:
2536:src/display.c **** #else
 1382              		.loc 1 2536 2 is_stmt 1 view .LVU440
 1383 000c FFF7FEFF 		bl	draw_dot
 1384              	.LVL140:
2541:src/display.c **** #endif
 1385              		.loc 1 2541 2 view .LVU441
2541:src/display.c **** #endif
ARM GAS  /tmp/ccKZqSeG.s 			page 92


 1386              		.loc 1 2541 14 is_stmt 0 view .LVU442
 1387 0010 3368     		ldr	r3, [r6]
 1388 0012 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2541:src/display.c **** #endif
 1389              		.loc 1 2541 2 view .LVU443
 1390 0016 5507     		lsls	r5, r2, #29
 1391              	.LBB224:
 1392              	.LBB225:
 284:src/display.c ****   else	clr_dot(n);
 1393              		.loc 1 284 11 view .LVU444
 1394 0018 4FF08400 		mov	r0, #132
 1395              	.LBE225:
 1396              	.LBE224:
2541:src/display.c **** #endif
 1397              		.loc 1 2541 2 view .LVU445
 1398 001c 03D5     		bpl	.L138
2541:src/display.c **** #endif
 1399              		.loc 1 2541 14 discriminator 1 view .LVU446
 1400 001e 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
2541:src/display.c **** #endif
 1401              		.loc 1 2541 2 discriminator 1 view .LVU447
 1402 0022 5907     		lsls	r1, r3, #29
 1403 0024 48D4     		bmi	.L161
 1404              	.L138:
 1405              	.LVL141:
 1406              	.LBB228:
 1407              	.LBI224:
 283:src/display.c ****   if (on)	set_dot(n);
 1408              		.loc 1 283 6 is_stmt 1 view .LVU448
 1409              	.LBB226:
 284:src/display.c ****   else	clr_dot(n);
 1410              		.loc 1 284 3 view .LVU449
 285:src/display.c **** }
 1411              		.loc 1 285 8 view .LVU450
 1412 0026 FFF7FEFF 		bl	clr_dot
 1413              	.LVL142:
 1414              	.L139:
 285:src/display.c **** }
 1415              		.loc 1 285 8 is_stmt 0 view .LVU451
 1416              	.LBE226:
 1417              	.LBE228:
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1418              		.loc 1 2544 2 is_stmt 1 view .LVU452
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1419              		.loc 1 2544 19 is_stmt 0 view .LVU453
 1420 002a 264D     		ldr	r5, .L164+4
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1421              		.loc 1 2544 2 view .LVU454
 1422 002c AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 1423              	.LBB229:
 1424              	.LBB230:
 284:src/display.c ****   else	clr_dot(n);
 1425              		.loc 1 284 11 view .LVU455
 1426 002e 8620     		movs	r0, #134
 1427              	.LBE230:
 1428              	.LBE229:
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
ARM GAS  /tmp/ccKZqSeG.s 			page 93


 1429              		.loc 1 2544 2 view .LVU456
 1430 0030 23B9     		cbnz	r3, .L140
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1431              		.loc 1 2544 47 discriminator 2 view .LVU457
 1432 0032 6A69     		ldr	r2, [r5, #20]
 1433 0034 244B     		ldr	r3, .L164+8
 1434 0036 1340     		ands	r3, r3, r2
2544:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 1435              		.loc 1 2544 2 discriminator 2 view .LVU458
 1436 0038 002B     		cmp	r3, #0
 1437 003a 3AD0     		beq	.L162
 1438              	.L140:
 1439              	.LBB233:
 1440              	.LBB231:
 284:src/display.c ****   else	clr_dot(n);
 1441              		.loc 1 284 11 is_stmt 1 view .LVU459
 1442 003c FFF7FEFF 		bl	set_dot
 1443              	.LVL143:
 1444              	.L141:
 1445              	.LBE231:
 1446              	.LBE233:
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1447              		.loc 1 2545 2 view .LVU460
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1448              		.loc 1 2545 31 is_stmt 0 view .LVU461
 1449 0040 224A     		ldr	r2, .L164+12
 1450 0042 6B69     		ldr	r3, [r5, #20]
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1451              		.loc 1 2545 2 view .LVU462
 1452 0044 1A42     		tst	r2, r3
 1453              	.LBB234:
 1454              	.LBB235:
 284:src/display.c ****   else	clr_dot(n);
 1455              		.loc 1 284 11 view .LVU463
 1456 0046 4FF08500 		mov	r0, #133
 1457              	.LBE235:
 1458              	.LBE234:
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1459              		.loc 1 2545 2 view .LVU464
 1460 004a 02D0     		beq	.L142
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1461              		.loc 1 2545 48 discriminator 1 view .LVU465
 1462 004c AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2545:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 1463              		.loc 1 2545 2 discriminator 1 view .LVU466
 1464 004e DA06     		lsls	r2, r3, #27
 1465 0050 2CD4     		bmi	.L143
 1466              	.L142:
 1467              	.LVL144:
 1468              	.LBB238:
 1469              	.LBI234:
 283:src/display.c ****   if (on)	set_dot(n);
 1470              		.loc 1 283 6 is_stmt 1 view .LVU467
 1471              	.LBB236:
 284:src/display.c ****   else	clr_dot(n);
 1472              		.loc 1 284 3 view .LVU468
 285:src/display.c **** }
ARM GAS  /tmp/ccKZqSeG.s 			page 94


 1473              		.loc 1 285 8 view .LVU469
 1474 0052 FFF7FEFF 		bl	clr_dot
 1475              	.LVL145:
 1476              	.L144:
 285:src/display.c **** }
 1477              		.loc 1 285 8 is_stmt 0 view .LVU470
 1478              	.LBE236:
 1479              	.LBE238:
2546:src/display.c **** 	//	set_IO_annunciator();
 1480              		.loc 1 2546 2 is_stmt 1 view .LVU471
 1481 0056 6820     		movs	r0, #104
 1482 0058 FFF7FEFF 		bl	get_user_flag
 1483              	.LVL146:
 1484              	.LBB239:
 1485              	.LBI239:
 283:src/display.c ****   if (on)	set_dot(n);
 1486              		.loc 1 283 6 view .LVU472
 1487              	.LBB240:
 284:src/display.c ****   else	clr_dot(n);
 1488              		.loc 1 284 3 view .LVU473
 284:src/display.c ****   else	clr_dot(n);
 1489              		.loc 1 284 6 is_stmt 0 view .LVU474
 1490 005c 10B3     		cbz	r0, .L145
 284:src/display.c ****   else	clr_dot(n);
 1491              		.loc 1 284 11 is_stmt 1 view .LVU475
 1492 005e 8320     		movs	r0, #131
 1493              	.LVL147:
 284:src/display.c ****   else	clr_dot(n);
 1494              		.loc 1 284 11 is_stmt 0 view .LVU476
 1495 0060 FFF7FEFF 		bl	set_dot
 1496              	.LVL148:
 1497              	.L146:
 284:src/display.c ****   else	clr_dot(n);
 1498              		.loc 1 284 11 view .LVU477
 1499              	.LBE240:
 1500              	.LBE239:
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1501              		.loc 1 2551 2 is_stmt 1 view .LVU478
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1502              		.loc 1 2551 11 is_stmt 0 view .LVU479
 1503 0064 3368     		ldr	r3, [r6]
 1504 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 1505 006a 03F00103 		and	r3, r3, #1
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1506              		.loc 1 2551 2 view .LVU480
 1507 006e 2343     		orrs	r3, r3, r4
 1508 0070 13F0FF0F 		tst	r3, #255
 1509              	.LBB242:
 1510              	.LBB243:
 284:src/display.c ****   else	clr_dot(n);
 1511              		.loc 1 284 11 view .LVU481
 1512 0074 4FF08C00 		mov	r0, #140
 1513              	.LBE243:
 1514              	.LBE242:
2551:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 1515              		.loc 1 2551 2 view .LVU482
 1516 0078 06D1     		bne	.L163
ARM GAS  /tmp/ccKZqSeG.s 			page 95


 1517              	.LVL149:
 1518              	.LBB246:
 1519              	.LBI242:
 283:src/display.c ****   if (on)	set_dot(n);
 1520              		.loc 1 283 6 is_stmt 1 view .LVU483
 1521              	.LBB244:
 284:src/display.c ****   else	clr_dot(n);
 1522              		.loc 1 284 3 view .LVU484
 284:src/display.c ****   else	clr_dot(n);
 1523              		.loc 1 284 11 view .LVU485
 1524 007a FFF7FEFF 		bl	set_dot
 1525              	.LVL150:
 284:src/display.c ****   else	clr_dot(n);
 1526              		.loc 1 284 11 is_stmt 0 view .LVU486
 1527              	.LBE244:
 1528              	.LBE246:
2552:src/display.c ****       }
 1529              		.loc 1 2552 2 is_stmt 1 view .LVU487
 1530              	.L149:
 1531              	.LBB247:
 1532              	.LBI247:
 283:src/display.c ****   if (on)	set_dot(n);
 1533              		.loc 1 283 6 view .LVU488
 1534              	.LBB248:
 284:src/display.c ****   else	clr_dot(n);
 1535              		.loc 1 284 3 view .LVU489
 285:src/display.c **** }
 1536              		.loc 1 285 8 view .LVU490
 1537              	.LBE248:
 1538              	.LBE247:
2553:src/display.c **** 
 1539              		.loc 1 2553 7 is_stmt 0 view .LVU491
 1540 007e BDE87040 		pop	{r4, r5, r6, lr}
 1541              		.cfi_remember_state
 1542              		.cfi_restore 14
 1543              		.cfi_restore 6
 1544              		.cfi_restore 5
 1545              		.cfi_restore 4
 1546              		.cfi_def_cfa_offset 0
 1547              	.LVL151:
 1548              	.LBB252:
 1549              	.LBB249:
 285:src/display.c **** }
 1550              		.loc 1 285 8 view .LVU492
 1551 0082 8B20     		movs	r0, #139
 1552 0084 FFF7FEBF 		b	clr_dot
 1553              	.LVL152:
 1554              	.L163:
 1555              		.cfi_restore_state
 285:src/display.c **** }
 1556              		.loc 1 285 8 view .LVU493
 1557              	.LBE249:
 1558              	.LBE252:
 1559              	.LBB253:
 283:src/display.c ****   if (on)	set_dot(n);
 1560              		.loc 1 283 6 is_stmt 1 view .LVU494
 1561              	.LBB245:
ARM GAS  /tmp/ccKZqSeG.s 			page 96


 284:src/display.c ****   else	clr_dot(n);
 1562              		.loc 1 284 3 view .LVU495
 285:src/display.c **** }
 1563              		.loc 1 285 8 view .LVU496
 1564 0088 FFF7FEFF 		bl	clr_dot
 1565              	.LVL153:
 285:src/display.c **** }
 1566              		.loc 1 285 8 is_stmt 0 view .LVU497
 1567              	.LBE245:
 1568              	.LBE253:
2552:src/display.c ****       }
 1569              		.loc 1 2552 2 is_stmt 1 view .LVU498
2552:src/display.c ****       }
 1570              		.loc 1 2552 11 is_stmt 0 view .LVU499
 1571 008c 3368     		ldr	r3, [r6]
 1572 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2552:src/display.c ****       }
 1573              		.loc 1 2552 2 view .LVU500
 1574 0092 DB07     		lsls	r3, r3, #31
 1575 0094 F3D4     		bmi	.L149
2552:src/display.c ****       }
 1576              		.loc 1 2552 2 discriminator 1 view .LVU501
 1577 0096 012C     		cmp	r4, #1
 1578 0098 F1D1     		bne	.L149
 1579              	.LVL154:
 1580              	.LBB254:
 283:src/display.c ****   if (on)	set_dot(n);
 1581              		.loc 1 283 6 is_stmt 1 view .LVU502
 1582              	.LBB250:
 284:src/display.c ****   else	clr_dot(n);
 1583              		.loc 1 284 3 view .LVU503
 284:src/display.c ****   else	clr_dot(n);
 1584              		.loc 1 284 11 view .LVU504
 1585              	.LBE250:
 1586              	.LBE254:
2553:src/display.c **** 
 1587              		.loc 1 2553 7 is_stmt 0 view .LVU505
 1588 009a BDE87040 		pop	{r4, r5, r6, lr}
 1589              		.cfi_remember_state
 1590              		.cfi_restore 14
 1591              		.cfi_restore 6
 1592              		.cfi_restore 5
 1593              		.cfi_restore 4
 1594              		.cfi_def_cfa_offset 0
 1595              	.LVL155:
 1596              	.LBB255:
 1597              	.LBB251:
 284:src/display.c ****   else	clr_dot(n);
 1598              		.loc 1 284 11 view .LVU506
 1599 009e 8B20     		movs	r0, #139
 1600 00a0 FFF7FEBF 		b	set_dot
 1601              	.LVL156:
 1602              	.L145:
 1603              		.cfi_restore_state
 284:src/display.c ****   else	clr_dot(n);
 1604              		.loc 1 284 11 view .LVU507
 1605              	.LBE251:
ARM GAS  /tmp/ccKZqSeG.s 			page 97


 1606              	.LBE255:
 1607              	.LBB256:
 1608              	.LBB241:
 285:src/display.c **** }
 1609              		.loc 1 285 8 is_stmt 1 view .LVU508
 1610 00a4 8320     		movs	r0, #131
 1611              	.LVL157:
 285:src/display.c **** }
 1612              		.loc 1 285 8 is_stmt 0 view .LVU509
 1613 00a6 FFF7FEFF 		bl	clr_dot
 1614              	.LVL158:
 1615 00aa DBE7     		b	.L146
 1616              	.LVL159:
 1617              	.L143:
 285:src/display.c **** }
 1618              		.loc 1 285 8 view .LVU510
 1619              	.LBE241:
 1620              	.LBE256:
 1621              	.LBB257:
 283:src/display.c ****   if (on)	set_dot(n);
 1622              		.loc 1 283 6 is_stmt 1 view .LVU511
 1623              	.LBB237:
 284:src/display.c ****   else	clr_dot(n);
 1624              		.loc 1 284 3 view .LVU512
 284:src/display.c ****   else	clr_dot(n);
 1625              		.loc 1 284 11 view .LVU513
 1626 00ac FFF7FEFF 		bl	set_dot
 1627              	.LVL160:
 1628 00b0 D1E7     		b	.L144
 1629              	.LVL161:
 1630              	.L162:
 284:src/display.c ****   else	clr_dot(n);
 1631              		.loc 1 284 11 is_stmt 0 view .LVU514
 1632              	.LBE237:
 1633              	.LBE257:
 1634              	.LBB258:
 1635              	.LBI229:
 283:src/display.c ****   if (on)	set_dot(n);
 1636              		.loc 1 283 6 is_stmt 1 view .LVU515
 1637              	.LBB232:
 284:src/display.c ****   else	clr_dot(n);
 1638              		.loc 1 284 3 view .LVU516
 285:src/display.c **** }
 1639              		.loc 1 285 8 view .LVU517
 1640 00b2 FFF7FEFF 		bl	clr_dot
 1641              	.LVL162:
 1642 00b6 C3E7     		b	.L141
 1643              	.LVL163:
 1644              	.L161:
 285:src/display.c **** }
 1645              		.loc 1 285 8 is_stmt 0 view .LVU518
 1646              	.LBE232:
 1647              	.LBE258:
 1648              	.LBB259:
 283:src/display.c ****   if (on)	set_dot(n);
 1649              		.loc 1 283 6 is_stmt 1 view .LVU519
 1650              	.LBB227:
ARM GAS  /tmp/ccKZqSeG.s 			page 98


 284:src/display.c ****   else	clr_dot(n);
 1651              		.loc 1 284 3 view .LVU520
 284:src/display.c ****   else	clr_dot(n);
 1652              		.loc 1 284 11 view .LVU521
 1653 00b8 FFF7FEFF 		bl	set_dot
 1654              	.LVL164:
 1655 00bc B5E7     		b	.L139
 1656              	.L165:
 1657 00be 00BF     		.align	2
 1658              	.L164:
 1659 00c0 00000000 		.word	main_ram
 1660 00c4 00000000 		.word	StateWhileOn
 1661 00c8 07000800 		.word	524295
 1662 00cc 00080800 		.word	526336
 1663              	.LBE227:
 1664              	.LBE259:
 1665              		.cfi_endproc
 1666              	.LFE32:
 1668              		.section	.text.set_separator.part.0,"ax",%progbits
 1669              		.align	1
 1670              		.p2align 2,,3
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1674              		.fpu fpv4-sp-d16
 1676              	set_separator.part.0:
 1677              	.LVL165:
 1678              	.LFB49:
 308:src/display.c ****   if (sep == SEP_NONE)
 1679              		.loc 1 308 14 view -0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 315:src/display.c ****     set_dot(posn+7);
 1683              		.loc 1 315 5 view .LVU523
 308:src/display.c ****   if (sep == SEP_NONE)
 1684              		.loc 1 308 14 is_stmt 0 view .LVU524
 1685 0000 38B5     		push	{r3, r4, r5, lr}
 1686              		.cfi_def_cfa_offset 16
 1687              		.cfi_offset 3, -16
 1688              		.cfi_offset 4, -12
 1689              		.cfi_offset 5, -8
 1690              		.cfi_offset 14, -4
 308:src/display.c ****   if (sep == SEP_NONE)
 1691              		.loc 1 308 14 view .LVU525
 1692 0002 0D46     		mov	r5, r1
 1693 0004 0446     		mov	r4, r0
 1694              	.LVL166:
 316:src/display.c ****     if (sep == SEP_COMMA)
 1695              		.loc 1 316 5 is_stmt 1 view .LVU526
 1696 0006 0238     		subs	r0, r0, #2
 1697              	.LVL167:
 316:src/display.c ****     if (sep == SEP_COMMA)
 1698              		.loc 1 316 5 is_stmt 0 view .LVU527
 1699 0008 FFF7FEFF 		bl	set_dot
 1700              	.LVL168:
 317:src/display.c ****       set_dot(posn+8);
ARM GAS  /tmp/ccKZqSeG.s 			page 99


 1701              		.loc 1 317 5 is_stmt 1 view .LVU528
 317:src/display.c ****       set_dot(posn+8);
 1702              		.loc 1 317 8 is_stmt 0 view .LVU529
 1703 000c 012D     		cmp	r5, #1
 1704 000e 01D0     		beq	.L169
 1705              	.LVL169:
 321:src/display.c **** 
 1706              		.loc 1 321 1 view .LVU530
 1707 0010 0020     		movs	r0, #0
 1708 0012 38BD     		pop	{r3, r4, r5, pc}
 1709              	.LVL170:
 1710              	.L169:
 318:src/display.c ****   }
 1711              		.loc 1 318 7 is_stmt 1 view .LVU531
 1712 0014 601E     		subs	r0, r4, #1
 1713 0016 FFF7FEFF 		bl	set_dot
 1714              	.LVL171:
 321:src/display.c **** 
 1715              		.loc 1 321 1 is_stmt 0 view .LVU532
 1716 001a 0020     		movs	r0, #0
 1717 001c 38BD     		pop	{r3, r4, r5, pc}
 321:src/display.c **** 
 1718              		.loc 1 321 1 view .LVU533
 1719              		.cfi_endproc
 1720              	.LFE49:
 1722 001e 00BF     		.section	.text.set_decimal.part.0,"ax",%progbits
 1723              		.align	1
 1724              		.p2align 2,,3
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1728              		.fpu fpv4-sp-d16
 1730              	set_decimal.part.0:
 1731              	.LVL172:
 1732              	.LFB50:
 293:src/display.c ****   if (res) {
 1733              		.loc 1 293 14 is_stmt 1 view -0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 0
 1736              		@ frame_needed = 0, uses_anonymous_args = 0
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1737              		.loc 1 297 5 view .LVU535
 293:src/display.c ****   if (res) {
 1738              		.loc 1 293 14 is_stmt 0 view .LVU536
 1739 0000 38B5     		push	{r3, r4, r5, lr}
 1740              		.cfi_def_cfa_offset 16
 1741              		.cfi_offset 3, -16
 1742              		.cfi_offset 4, -12
 1743              		.cfi_offset 5, -8
 1744              		.cfi_offset 14, -4
 293:src/display.c ****   if (res) {
 1745              		.loc 1 293 14 view .LVU537
 1746 0002 0446     		mov	r4, r0
 1747 0004 0D46     		mov	r5, r1
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1748              		.loc 1 297 5 view .LVU538
 1749 0006 0730     		adds	r0, r0, #7
ARM GAS  /tmp/ccKZqSeG.s 			page 100


 1750              	.LVL173:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 1751              		.loc 1 297 5 view .LVU539
 1752 0008 FFF7FEFF 		bl	set_dot
 1753              	.LVL174:
 298:src/display.c ****       set_dot(posn+8);
 1754              		.loc 1 298 5 is_stmt 1 view .LVU540
 298:src/display.c ****       set_dot(posn+8);
 1755              		.loc 1 298 8 is_stmt 0 view .LVU541
 1756 000c 0DB9     		cbnz	r5, .L176
 1757              	.LVL175:
 301:src/display.c **** }
 1758              		.loc 1 301 3 is_stmt 1 view .LVU542
 302:src/display.c **** 
 1759              		.loc 1 302 1 is_stmt 0 view .LVU543
 1760 000e 0020     		movs	r0, #0
 1761 0010 38BD     		pop	{r3, r4, r5, pc}
 1762              	.LVL176:
 1763              	.L176:
 299:src/display.c ****   }
 1764              		.loc 1 299 7 is_stmt 1 view .LVU544
 1765 0012 04F10800 		add	r0, r4, #8
 1766 0016 FFF7FEFF 		bl	set_dot
 1767              	.LVL177:
 301:src/display.c **** }
 1768              		.loc 1 301 3 view .LVU545
 302:src/display.c **** 
 1769              		.loc 1 302 1 is_stmt 0 view .LVU546
 1770 001a 0020     		movs	r0, #0
 1771 001c 38BD     		pop	{r3, r4, r5, pc}
 302:src/display.c **** 
 1772              		.loc 1 302 1 view .LVU547
 1773              		.cfi_endproc
 1774              	.LFE50:
 1776 001e 00BF     		.section	.text.set_digits_string,"ax",%progbits
 1777              		.align	1
 1778              		.p2align 2,,3
 1779              		.syntax unified
 1780              		.thumb
 1781              		.thumb_func
 1782              		.fpu fpv4-sp-d16
 1784              	set_digits_string:
 1785              	.LVL178:
 1786              	.LFB12:
 346:src/display.c ****   for (; *msg != '\0'; msg++) {
 1787              		.loc 1 346 55 is_stmt 1 view -0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1791              		.loc 1 347 3 view .LVU549
 346:src/display.c ****   for (; *msg != '\0'; msg++) {
 1792              		.loc 1 346 55 is_stmt 0 view .LVU550
 1793 0000 38B5     		push	{r3, r4, r5, lr}
 1794              		.cfi_def_cfa_offset 16
 1795              		.cfi_offset 3, -16
 1796              		.cfi_offset 4, -12
ARM GAS  /tmp/ccKZqSeG.s 			page 101


 1797              		.cfi_offset 5, -8
 1798              		.cfi_offset 14, -4
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1799              		.loc 1 347 10 view .LVU551
 1800 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1801              		.loc 1 347 10 is_stmt 1 view .LVU552
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1802              		.loc 1 347 3 is_stmt 0 view .LVU553
 1803 0004 D3B1     		cbz	r3, .L177
 1804 0006 0546     		mov	r5, r0
 1805 0008 0C46     		mov	r4, r1
 1806 000a 06E0     		b	.L181
 1807              	.LVL179:
 1808              	.L179:
 1809              	.LBB260:
 1810              	.LBB261:
 341:src/display.c ****   return res;
 1811              		.loc 1 341 8 view .LVU554
 1812 000c 2046     		mov	r0, r4
 1813              	.LVL180:
 341:src/display.c ****   return res;
 1814              		.loc 1 341 8 view .LVU555
 1815 000e FFF7FEFF 		bl	set_dig
 1816              	.LVL181:
 342:src/display.c **** }
 1817              		.loc 1 342 3 is_stmt 1 view .LVU556
 342:src/display.c **** }
 1818              		.loc 1 342 3 is_stmt 0 view .LVU557
 1819              	.LBE261:
 1820              	.LBE260:
 352:src/display.c ****     }
 1821              		.loc 1 352 7 is_stmt 1 view .LVU558
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1822              		.loc 1 347 10 is_stmt 0 view .LVU559
 1823 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1824              	.LVL182:
 352:src/display.c ****     }
 1825              		.loc 1 352 9 view .LVU560
 1826 0016 0934     		adds	r4, r4, #9
 1827              	.LVL183:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1828              		.loc 1 347 24 is_stmt 1 view .LVU561
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1829              		.loc 1 347 10 view .LVU562
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1830              		.loc 1 347 3 is_stmt 0 view .LVU563
 1831 0018 83B1     		cbz	r3, .L177
 1832              	.LVL184:
 1833              	.L181:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1834              		.loc 1 348 5 is_stmt 1 view .LVU564
 349:src/display.c ****     else {
 1835              		.loc 1 349 7 view .LVU565
 1836              	.LBB264:
 1837              	.LBI264:
 293:src/display.c ****   if (res) {
ARM GAS  /tmp/ccKZqSeG.s 			page 102


 1838              		.loc 1 293 14 view .LVU566
 1839              	.LBB265:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1840              		.loc 1 294 3 view .LVU567
 1841              	.LBE265:
 1842              	.LBE264:
 351:src/display.c ****       j += SEGS_PER_DIGIT;
 1843              		.loc 1 351 7 view .LVU568
 1844              	.LBB268:
 1845              	.LBI260:
 339:src/display.c ****   if (res) *res++ = ch;
 1846              		.loc 1 339 14 view .LVU569
 1847              	.LBB262:
 340:src/display.c ****   else	set_dig(base, ch);
 1848              		.loc 1 340 3 view .LVU570
 341:src/display.c ****   return res;
 1849              		.loc 1 341 8 view .LVU571
 1850              	.LBE262:
 1851              	.LBE268:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1852              		.loc 1 348 21 is_stmt 0 view .LVU572
 1853 001a 03F0FD02 		and	r2, r3, #253
 1854 001e 2C2A     		cmp	r2, #44
 1855              	.LBB269:
 1856              	.LBB266:
 1857 0020 A4F10900 		sub	r0, r4, #9
 1858              	.LVL185:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1859              		.loc 1 348 21 view .LVU573
 1860              	.LBE266:
 1861              	.LBE269:
 1862              	.LBB270:
 1863              	.LBB263:
 341:src/display.c ****   return res;
 1864              		.loc 1 341 8 view .LVU574
 1865 0024 1946     		mov	r1, r3
 1866              	.LBE263:
 1867              	.LBE270:
 348:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1868              		.loc 1 348 21 view .LVU575
 1869 0026 F1D1     		bne	.L179
 1870              	.LBB271:
 1871              	.LBB267:
 1872 0028 B3F12E01 		subs	r1, r3, #46
 1873 002c 18BF     		it	ne
 1874 002e 0121     		movne	r1, #1
 1875 0030 FFF7FEFF 		bl	set_decimal.part.0
 1876              	.LVL186:
 301:src/display.c **** }
 1877              		.loc 1 301 3 is_stmt 1 view .LVU576
 301:src/display.c **** }
 1878              		.loc 1 301 3 is_stmt 0 view .LVU577
 1879              	.LBE267:
 1880              	.LBE271:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1881              		.loc 1 347 24 is_stmt 1 view .LVU578
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
ARM GAS  /tmp/ccKZqSeG.s 			page 103


 1882              		.loc 1 347 10 view .LVU579
 1883 0034 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1884              	.LVL187:
 347:src/display.c ****     if (*msg == '.' || *msg == ',')
 1885              		.loc 1 347 3 is_stmt 0 view .LVU580
 1886 0038 002B     		cmp	r3, #0
 1887 003a EED1     		bne	.L181
 1888              	.LVL188:
 1889              	.L177:
 355:src/display.c **** 
 1890              		.loc 1 355 1 view .LVU581
 1891 003c 38BD     		pop	{r3, r4, r5, pc}
 1892              		.cfi_endproc
 1893              	.LFE12:
 1895 003e 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1896              		.align	2
 1897              	.LC0:
 1898 0000 4E614E00 		.ascii	"NaN\000"
 1899              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1900              		.align	1
 1901              		.p2align 2,,3
 1902              		.syntax unified
 1903              		.thumb
 1904              		.thumb_func
 1905              		.fpu fpv4-sp-d16
 1907              	check_special_dn.isra.0:
 1908              	.LVL189:
 1909              	.LFB51:
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1910              		.loc 1 1551 18 is_stmt 1 view -0
 1911              		.cfi_startproc
 1912              		@ args = 0, pretend = 0, frame = 0
 1913              		@ frame_needed = 0, uses_anonymous_args = 0
1552:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1914              		.loc 1 1552 2 view .LVU583
1552:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1915              		.loc 1 1552 5 is_stmt 0 view .LVU584
 1916 0000 10F07002 		ands	r2, r0, #112
 1917 0004 0BD0     		beq	.L195
1553:src/display.c **** 	    if (res) {
 1918              		.loc 1 1553 4 is_stmt 1 view .LVU585
1553:src/display.c **** 	    if (res) {
 1919              		.loc 1 1553 7 is_stmt 0 view .LVU586
 1920 0006 10F0300F 		tst	r0, #48
1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1921              		.loc 1 1551 18 view .LVU587
 1922 000a 08B5     		push	{r3, lr}
 1923              		.cfi_def_cfa_offset 8
 1924              		.cfi_offset 3, -8
 1925              		.cfi_offset 14, -4
 1926 000c 0B46     		mov	r3, r1
1553:src/display.c **** 	    if (res) {
 1927              		.loc 1 1553 7 view .LVU588
 1928 000e 08D0     		beq	.L189
 1929              	.LVL190:
 1930              	.LBB274:
 1931              	.LBI274:
ARM GAS  /tmp/ccKZqSeG.s 			page 104


1551:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1932              		.loc 1 1551 18 is_stmt 1 view .LVU589
 1933              	.LBB275:
1554:src/display.c **** 	      scopy(res, "NaN");
 1934              		.loc 1 1554 6 view .LVU590
1554:src/display.c **** 	      scopy(res, "NaN");
 1935              		.loc 1 1554 9 is_stmt 0 view .LVU591
 1936 0010 99B1     		cbz	r1, .L190
1555:src/display.c **** 	    } else {
 1937              		.loc 1 1555 8 is_stmt 1 view .LVU592
 1938 0012 0846     		mov	r0, r1
 1939 0014 1049     		ldr	r1, .L204
 1940              	.LVL191:
1555:src/display.c **** 	    } else {
 1941              		.loc 1 1555 8 is_stmt 0 view .LVU593
 1942 0016 FFF7FEFF 		bl	scopy
 1943              	.LVL192:
1555:src/display.c **** 	    } else {
 1944              		.loc 1 1555 8 view .LVU594
 1945 001a 0120     		movs	r0, #1
 1946              	.LBE275:
 1947              	.LBE274:
1574:src/display.c **** 
 1948              		.loc 1 1574 7 view .LVU595
 1949 001c 08BD     		pop	{r3, pc}
 1950              	.LVL193:
 1951              	.L195:
 1952              		.cfi_def_cfa_offset 0
 1953              		.cfi_restore 3
 1954              		.cfi_restore 14
1573:src/display.c ****       }
 1955              		.loc 1 1573 9 view .LVU596
 1956 001e 1046     		mov	r0, r2
1574:src/display.c **** 
 1957              		.loc 1 1574 7 view .LVU597
 1958 0020 7047     		bx	lr
 1959              	.L189:
 1960              		.cfi_def_cfa_offset 8
 1961              		.cfi_offset 3, -8
 1962              		.cfi_offset 14, -4
1561:src/display.c **** 	      if (res) *res++ = '-';
 1963              		.loc 1 1561 6 is_stmt 1 view .LVU598
1561:src/display.c **** 	      if (res) *res++ = '-';
 1964              		.loc 1 1561 9 is_stmt 0 view .LVU599
 1965 0022 0206     		lsls	r2, r0, #24
 1966 0024 04D4     		bmi	.L203
1565:src/display.c **** 	      *res++ = '\237';
 1967              		.loc 1 1565 6 is_stmt 1 view .LVU600
1565:src/display.c **** 	      *res++ = '\237';
 1968              		.loc 1 1565 9 is_stmt 0 view .LVU601
 1969 0026 89B1     		cbz	r1, .L194
 1970              	.LVL194:
 1971              	.L193:
1566:src/display.c **** 	    else {
 1972              		.loc 1 1566 8 is_stmt 1 view .LVU602
1566:src/display.c **** 	    else {
 1973              		.loc 1 1566 15 is_stmt 0 view .LVU603
ARM GAS  /tmp/ccKZqSeG.s 			page 105


 1974 0028 9F22     		movs	r2, #159
 1975 002a 1A70     		strb	r2, [r3]
1570:src/display.c **** 	  }
 1976              		.loc 1 1570 13 view .LVU604
 1977 002c 0120     		movs	r0, #1
1574:src/display.c **** 
 1978              		.loc 1 1574 7 view .LVU605
 1979 002e 08BD     		pop	{r3, pc}
 1980              	.LVL195:
 1981              	.L203:
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1982              		.loc 1 1562 8 is_stmt 1 view .LVU606
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1983              		.loc 1 1562 11 is_stmt 0 view .LVU607
 1984 0030 41B1     		cbz	r1, .L192
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1985              		.loc 1 1562 17 is_stmt 1 view .LVU608
 1986              	.LVL196:
1562:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1987              		.loc 1 1562 24 is_stmt 0 view .LVU609
 1988 0032 2D22     		movs	r2, #45
 1989 0034 03F8012B 		strb	r2, [r3], #1
 1990              	.LVL197:
1565:src/display.c **** 	      *res++ = '\237';
 1991              		.loc 1 1565 6 is_stmt 1 view .LVU610
 1992 0038 F6E7     		b	.L193
 1993              	.LVL198:
 1994              	.L190:
 1995              	.LBB277:
 1996              	.LBB276:
1557:src/display.c **** 	    }
 1997              		.loc 1 1557 8 view .LVU611
 1998 003a 0848     		ldr	r0, .L204+4
 1999 003c FFF7FEFF 		bl	set_digits_string
 2000              	.LVL199:
1557:src/display.c **** 	    }
 2001              		.loc 1 1557 8 is_stmt 0 view .LVU612
 2002 0040 0120     		movs	r0, #1
 2003              	.LBE276:
 2004              	.LBE277:
1574:src/display.c **** 
 2005              		.loc 1 1574 7 view .LVU613
 2006 0042 08BD     		pop	{r3, pc}
 2007              	.LVL200:
 2008              	.L192:
1563:src/display.c **** 	    }
 2009              		.loc 1 1563 13 is_stmt 1 view .LVU614
 2010 0044 2D21     		movs	r1, #45
 2011              	.LVL201:
1563:src/display.c **** 	    }
 2012              		.loc 1 1563 13 is_stmt 0 view .LVU615
 2013 0046 0920     		movs	r0, #9
 2014 0048 FFF7FEFF 		bl	set_dig
 2015              	.LVL202:
1565:src/display.c **** 	      *res++ = '\237';
 2016              		.loc 1 1565 6 is_stmt 1 view .LVU616
 2017              	.L194:
ARM GAS  /tmp/ccKZqSeG.s 			page 106


1568:src/display.c **** 	    }
 2018              		.loc 1 1568 8 view .LVU617
 2019 004c 0448     		ldr	r0, .L204+8
 2020 004e 1221     		movs	r1, #18
 2021 0050 FFF7FEFF 		bl	set_digits_string
 2022              	.LVL203:
1570:src/display.c **** 	  }
 2023              		.loc 1 1570 13 is_stmt 0 view .LVU618
 2024 0054 0120     		movs	r0, #1
1574:src/display.c **** 
 2025              		.loc 1 1574 7 view .LVU619
 2026 0056 08BD     		pop	{r3, pc}
 2027              	.L205:
 2028              		.align	2
 2029              	.L204:
 2030 0058 00000000 		.word	.LC0
 2031 005c 00000000 		.word	.LANCHOR3
 2032 0060 00000000 		.word	.LANCHOR4
 2033              		.cfi_endproc
 2034              	.LFE51:
 2036              		.section	.text.set_x_hms,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.syntax unified
 2040              		.thumb
 2041              		.thumb_func
 2042              		.fpu fpv4-sp-d16
 2044              	set_x_hms:
 2045              	.LVL204:
 2046              	.LFB22:
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2047              		.loc 1 1619 62 is_stmt 1 view -0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 200
 2050              		@ frame_needed = 0, uses_anonymous_args = 0
1620:src/display.c **** 	int j=0;
 2051              		.loc 1 1620 2 view .LVU621
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 2052              		.loc 1 1621 2 view .LVU622
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2053              		.loc 1 1619 62 is_stmt 0 view .LVU623
 2054 0000 30B5     		push	{r4, r5, lr}
 2055              		.cfi_def_cfa_offset 12
 2056              		.cfi_offset 4, -12
 2057              		.cfi_offset 5, -8
 2058              		.cfi_offset 14, -4
 2059 0002 B5B0     		sub	sp, sp, #212
 2060              		.cfi_def_cfa_offset 224
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2061              		.loc 1 1619 62 view .LVU624
 2062 0004 0446     		mov	r4, r0
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 2063              		.loc 1 1621 6 view .LVU625
 2064 0006 0023     		movs	r3, #0
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2065              		.loc 1 1625 6 view .LVU626
 2066 0008 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
ARM GAS  /tmp/ccKZqSeG.s 			page 107


 2067              	.LVL205:
1621:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 2068              		.loc 1 1621 6 view .LVU627
 2069 000a 0393     		str	r3, [sp, #12]
1622:src/display.c **** 	unsigned int hr, min, sec, fs;
 2070              		.loc 1 1622 2 is_stmt 1 view .LVU628
 2071              	.LVL206:
1623:src/display.c **** 
 2072              		.loc 1 1623 2 view .LVU629
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2073              		.loc 1 1625 2 view .LVU630
1619:src/display.c **** 	decNumber x, y, a, t, u;
 2074              		.loc 1 1619 62 is_stmt 0 view .LVU631
 2075 000c 0D46     		mov	r5, r1
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2076              		.loc 1 1625 6 view .LVU632
 2077 000e FFF7FEFF 		bl	check_special_dn.isra.0
 2078              	.LVL207:
1625:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 2079              		.loc 1 1625 5 view .LVU633
 2080 0012 48B1     		cbz	r0, .L207
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 2081              		.loc 1 1626 4 is_stmt 1 view .LVU634
1626:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 2082              		.loc 1 1626 7 is_stmt 0 view .LVU635
 2083 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 2084 0016 5B06     		lsls	r3, r3, #25
 2085 0018 04D5     		bpl	.L206
1627:src/display.c **** 	  return;
 2086              		.loc 1 1627 6 is_stmt 1 view .LVU636
 2087              	.LVL208:
 2088              	.LBB278:
 2089              	.LBI278:
 339:src/display.c ****   if (res) *res++ = ch;
 2090              		.loc 1 339 14 view .LVU637
 2091              	.LBB279:
 340:src/display.c ****   else	set_dig(base, ch);
 2092              		.loc 1 340 3 view .LVU638
 340:src/display.c ****   else	set_dig(base, ch);
 2093              		.loc 1 340 6 is_stmt 0 view .LVU639
 2094 001a 002D     		cmp	r5, #0
 2095 001c 00F0BB80 		beq	.L210
 340:src/display.c ****   else	set_dig(base, ch);
 2096              		.loc 1 340 12 is_stmt 1 view .LVU640
 2097              	.LVL209:
 340:src/display.c ****   else	set_dig(base, ch);
 2098              		.loc 1 340 19 is_stmt 0 view .LVU641
 2099 0020 6F23     		movs	r3, #111
 2100 0022 2B70     		strb	r3, [r5]
 2101              	.LVL210:
 2102              	.L206:
 340:src/display.c ****   else	set_dig(base, ch);
 2103              		.loc 1 340 19 view .LVU642
 2104              	.LBE279:
 2105              	.LBE278:
1682:src/display.c **** 
 2106              		.loc 1 1682 7 view .LVU643
ARM GAS  /tmp/ccKZqSeG.s 			page 108


 2107 0024 35B0     		add	sp, sp, #212
 2108              		.cfi_remember_state
 2109              		.cfi_def_cfa_offset 12
 2110              		@ sp needed
 2111 0026 30BD     		pop	{r4, r5, pc}
 2112              	.LVL211:
 2113              	.L207:
 2114              		.cfi_restore_state
1631:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2115              		.loc 1 1631 2 is_stmt 1 view .LVU644
 2116 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2117              	.LVL212:
1632:src/display.c **** 	dn_abs(&a, rgx);
 2118              		.loc 1 1632 2 view .LVU645
 2119 002c 654A     		ldr	r2, .L241
 2120 002e 2146     		mov	r1, r4
 2121 0030 07A8     		add	r0, sp, #28
 2122 0032 FFF7FEFF 		bl	decNumberMod
 2123              	.LVL213:
1633:src/display.c **** 	if (decNumberIsNegative(&x)) {
 2124              		.loc 1 1633 2 view .LVU646
 2125 0036 2146     		mov	r1, r4
 2126 0038 19A8     		add	r0, sp, #100
 2127 003a FFF7FEFF 		bl	dn_abs
 2128              	.LVL214:
1634:src/display.c **** 	  if (res != NULL)
 2129              		.loc 1 1634 2 view .LVU647
1634:src/display.c **** 	  if (res != NULL)
 2130              		.loc 1 1634 5 is_stmt 0 view .LVU648
 2131 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2132 0042 002B     		cmp	r3, #0
 2133 0044 75DB     		blt	.L239
 2134              	.L211:
1642:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2135              		.loc 1 1642 2 is_stmt 1 view .LVU649
 2136 0046 07A9     		add	r1, sp, #28
 2137 0048 10A8     		add	r0, sp, #64
 2138 004a FFF7FEFF 		bl	decNumberHR2HMS
 2139              	.LVL215:
1643:src/display.c **** 	decNumberRound(&u, &t);
 2140              		.loc 1 1643 2 view .LVU650
 2141 004e 0622     		movs	r2, #6
 2142 0050 10A9     		add	r1, sp, #64
 2143 0052 22A8     		add	r0, sp, #136
 2144 0054 FFF7FEFF 		bl	dn_mulpow10
 2145              	.LVL216:
1644:src/display.c **** 
 2146              		.loc 1 1644 2 view .LVU651
 2147 0058 22A9     		add	r1, sp, #136
 2148 005a 2BA8     		add	r0, sp, #172
 2149 005c FFF7FEFF 		bl	decNumberRound
 2150              	.LVL217:
1646:src/display.c **** 	hms_step(&u, &t, &sec);
 2151              		.loc 1 1646 2 view .LVU652
 2152 0060 2BA9     		add	r1, sp, #172
 2153 0062 22A8     		add	r0, sp, #136
 2154 0064 06AA     		add	r2, sp, #24
ARM GAS  /tmp/ccKZqSeG.s 			page 109


 2155 0066 FFF7FEFF 		bl	hms_step
 2156              	.LVL218:
1647:src/display.c **** 	hms_step(&t, &u, &min);
 2157              		.loc 1 1647 2 view .LVU653
 2158 006a 22A9     		add	r1, sp, #136
 2159 006c 2BA8     		add	r0, sp, #172
 2160 006e 05AA     		add	r2, sp, #20
 2161 0070 FFF7FEFF 		bl	hms_step
 2162              	.LVL219:
1648:src/display.c **** 	hr = dn_to_int(&t);
 2163              		.loc 1 1648 2 view .LVU654
 2164 0074 04AA     		add	r2, sp, #16
 2165 0076 2BA9     		add	r1, sp, #172
 2166 0078 22A8     		add	r0, sp, #136
 2167 007a FFF7FEFF 		bl	hms_step
 2168              	.LVL220:
1649:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2169              		.loc 1 1649 2 view .LVU655
1649:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2170              		.loc 1 1649 7 is_stmt 0 view .LVU656
 2171 007e 22A8     		add	r0, sp, #136
 2172 0080 FFF7FEFF 		bl	dn_to_int
 2173              	.LVL221:
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2174              		.loc 1 1650 33 view .LVU657
 2175 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2176              		.loc 1 1650 5 view .LVU658
 2177 0088 3B2A     		cmp	r2, #59
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2178              		.loc 1 1650 19 is_stmt 1 view .LVU659
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2179              		.loc 1 1650 23 is_stmt 0 view .LVU660
 2180 008a 82BF     		ittt	hi
 2181 008c 3C3A     		subhi	r2, r2, #60
1650:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2182              		.loc 1 1650 33 view .LVU661
 2183 008e 0133     		addhi	r3, r3, #1
 2184 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1651:src/display.c **** 
 2185              		.loc 1 1651 2 is_stmt 1 view .LVU662
1651:src/display.c **** 
 2186              		.loc 1 1651 5 is_stmt 0 view .LVU663
 2187 0094 3B2B     		cmp	r3, #59
 2188 0096 02D9     		bls	.L216
1651:src/display.c **** 
 2189              		.loc 1 1651 19 is_stmt 1 discriminator 1 view .LVU664
1651:src/display.c **** 
 2190              		.loc 1 1651 23 is_stmt 0 discriminator 1 view .LVU665
 2191 0098 3C3B     		subs	r3, r3, #60
 2192 009a 0493     		str	r3, [sp, #16]
1651:src/display.c **** 
 2193              		.loc 1 1651 30 is_stmt 1 discriminator 1 view .LVU666
1651:src/display.c **** 
 2194              		.loc 1 1651 32 is_stmt 0 discriminator 1 view .LVU667
 2195 009c 0130     		adds	r0, r0, #1
 2196              	.LVL222:
ARM GAS  /tmp/ccKZqSeG.s 			page 110


 2197              	.L216:
1654:src/display.c **** 	res = set_dig_s(j, '@', res);
 2198              		.loc 1 1654 2 is_stmt 1 view .LVU668
1654:src/display.c **** 	res = set_dig_s(j, '@', res);
 2199              		.loc 1 1654 8 is_stmt 0 view .LVU669
 2200 009e 0123     		movs	r3, #1
 2201 00a0 0093     		str	r3, [sp]
 2202 00a2 2946     		mov	r1, r5
 2203 00a4 03AA     		add	r2, sp, #12
 2204 00a6 0423     		movs	r3, #4
 2205 00a8 FFF7FEFF 		bl	hms_render
 2206              	.LVL223:
1655:src/display.c **** 	j += SEGS_PER_DIGIT;
 2207              		.loc 1 1655 2 is_stmt 1 view .LVU670
 2208              	.LBB281:
 2209              	.LBI281:
 339:src/display.c ****   if (res) *res++ = ch;
 2210              		.loc 1 339 14 view .LVU671
 2211              	.LBB282:
 340:src/display.c ****   else	set_dig(base, ch);
 2212              		.loc 1 340 3 view .LVU672
 340:src/display.c ****   else	set_dig(base, ch);
 2213              		.loc 1 340 6 is_stmt 0 view .LVU673
 2214 00ac 0446     		mov	r4, r0
 2215              	.LVL224:
 340:src/display.c ****   else	set_dig(base, ch);
 2216              		.loc 1 340 6 view .LVU674
 2217 00ae 0028     		cmp	r0, #0
 2218 00b0 7CD0     		beq	.L217
 340:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 340 12 is_stmt 1 view .LVU675
 340:src/display.c ****   else	set_dig(base, ch);
 2220              		.loc 1 340 16 is_stmt 0 view .LVU676
 2221 00b2 0146     		mov	r1, r0
 2222              	.LVL225:
 340:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 340 19 view .LVU677
 2224 00b4 4023     		movs	r3, #64
 2225 00b6 01F8013B 		strb	r3, [r1], #1
 2226              	.LVL226:
 2227              	.L218:
 342:src/display.c **** }
 2228              		.loc 1 342 3 is_stmt 1 view .LVU678
 342:src/display.c **** }
 2229              		.loc 1 342 3 is_stmt 0 view .LVU679
 2230              	.LBE282:
 2231              	.LBE281:
1656:src/display.c **** 
 2232              		.loc 1 1656 2 is_stmt 1 view .LVU680
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2233              		.loc 1 1659 8 is_stmt 0 view .LVU681
 2234 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2235 00be 0122     		movs	r2, #1
1656:src/display.c **** 
 2236              		.loc 1 1656 4 view .LVU682
 2237 00c0 03F10904 		add	r4, r3, #9
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
ARM GAS  /tmp/ccKZqSeG.s 			page 111


 2238              		.loc 1 1659 8 view .LVU683
 2239 00c4 0092     		str	r2, [sp]
 2240 00c6 0223     		movs	r3, #2
 2241 00c8 03AA     		add	r2, sp, #12
1656:src/display.c **** 
 2242              		.loc 1 1656 4 view .LVU684
 2243 00ca 0394     		str	r4, [sp, #12]
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2244              		.loc 1 1659 2 is_stmt 1 view .LVU685
1659:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2245              		.loc 1 1659 8 is_stmt 0 view .LVU686
 2246 00cc FFF7FEFF 		bl	hms_render
 2247              	.LVL227:
1660:src/display.c **** 	j += SEGS_PER_DIGIT;
 2248              		.loc 1 1660 2 is_stmt 1 view .LVU687
 2249              	.LBB284:
 2250              	.LBI284:
 339:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 339 14 view .LVU688
 2252              	.LBB285:
 340:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 340 3 view .LVU689
 340:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 340 6 is_stmt 0 view .LVU690
 2255 00d0 0446     		mov	r4, r0
 2256 00d2 0028     		cmp	r0, #0
 2257 00d4 64D0     		beq	.L219
 340:src/display.c ****   else	set_dig(base, ch);
 2258              		.loc 1 340 12 is_stmt 1 view .LVU691
 340:src/display.c ****   else	set_dig(base, ch);
 2259              		.loc 1 340 16 is_stmt 0 view .LVU692
 2260 00d6 0146     		mov	r1, r0
 2261              	.LVL228:
 340:src/display.c ****   else	set_dig(base, ch);
 2262              		.loc 1 340 19 view .LVU693
 2263 00d8 2723     		movs	r3, #39
 2264 00da 01F8013B 		strb	r3, [r1], #1
 2265              	.LVL229:
 2266              	.L220:
 342:src/display.c **** }
 2267              		.loc 1 342 3 is_stmt 1 view .LVU694
 342:src/display.c **** }
 2268              		.loc 1 342 3 is_stmt 0 view .LVU695
 2269              	.LBE285:
 2270              	.LBE284:
1661:src/display.c **** 
 2271              		.loc 1 1661 2 is_stmt 1 view .LVU696
1661:src/display.c **** 
 2272              		.loc 1 1661 4 is_stmt 0 view .LVU697
 2273 00de 039B     		ldr	r3, [sp, #12]
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2274              		.loc 1 1664 8 view .LVU698
 2275 00e0 0598     		ldr	r0, [sp, #20]
 2276 00e2 0122     		movs	r2, #1
1661:src/display.c **** 
 2277              		.loc 1 1661 4 view .LVU699
 2278 00e4 03F10904 		add	r4, r3, #9
ARM GAS  /tmp/ccKZqSeG.s 			page 112


1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2279              		.loc 1 1664 8 view .LVU700
 2280 00e8 0092     		str	r2, [sp]
 2281 00ea 0223     		movs	r3, #2
 2282 00ec 03AA     		add	r2, sp, #12
1661:src/display.c **** 
 2283              		.loc 1 1661 4 view .LVU701
 2284 00ee 0394     		str	r4, [sp, #12]
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2285              		.loc 1 1664 2 is_stmt 1 view .LVU702
1664:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2286              		.loc 1 1664 8 is_stmt 0 view .LVU703
 2287 00f0 FFF7FEFF 		bl	hms_render
 2288              	.LVL230:
1665:src/display.c **** 
 2289              		.loc 1 1665 2 is_stmt 1 view .LVU704
1665:src/display.c **** 
 2290              		.loc 1 1665 8 is_stmt 0 view .LVU705
 2291 00f4 344B     		ldr	r3, .L241+4
 2292 00f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2293              	.LVL231:
 2294              	.LBB287:
 2295              	.LBI287:
 293:src/display.c ****   if (res) {
 2296              		.loc 1 293 14 is_stmt 1 view .LVU706
 2297              	.LBB288:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 2298              		.loc 1 294 3 view .LVU707
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 2299              		.loc 1 294 6 is_stmt 0 view .LVU708
 2300 00f8 0028     		cmp	r0, #0
 2301 00fa 38D0     		beq	.L221
 295:src/display.c ****   } else {
 2302              		.loc 1 295 5 is_stmt 1 view .LVU709
 295:src/display.c ****   } else {
 2303              		.loc 1 295 12 is_stmt 0 view .LVU710
 2304 00fc 0029     		cmp	r1, #0
 295:src/display.c ****   } else {
 2305              		.loc 1 295 9 view .LVU711
 2306 00fe 0146     		mov	r1, r0
 2307              	.LVL232:
 295:src/display.c ****   } else {
 2308              		.loc 1 295 12 view .LVU712
 2309 0100 0CBF     		ite	eq
 2310 0102 2E23     		moveq	r3, #46
 2311 0104 2C23     		movne	r3, #44
 2312 0106 01F8013B 		strb	r3, [r1], #1
 2313              	.LVL233:
 2314              	.L223:
 301:src/display.c **** }
 2315              		.loc 1 301 3 is_stmt 1 view .LVU713
 301:src/display.c **** }
 2316              		.loc 1 301 3 is_stmt 0 view .LVU714
 2317              	.LBE288:
 2318              	.LBE287:
1668:src/display.c **** 
 2319              		.loc 1 1668 2 is_stmt 1 view .LVU715
ARM GAS  /tmp/ccKZqSeG.s 			page 113


1668:src/display.c **** 
 2320              		.loc 1 1668 8 is_stmt 0 view .LVU716
 2321 010a 0023     		movs	r3, #0
 2322 010c 0093     		str	r3, [sp]
 2323 010e 0698     		ldr	r0, [sp, #24]
 2324 0110 03AA     		add	r2, sp, #12
 2325 0112 0223     		movs	r3, #2
 2326 0114 FFF7FEFF 		bl	hms_render
 2327              	.LVL234:
1671:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2328              		.loc 1 1671 2 is_stmt 1 view .LVU717
 2329              	.LBB290:
 2330              	.LBI290:
 339:src/display.c ****   if (res) *res++ = ch;
 2331              		.loc 1 339 14 view .LVU718
 2332              	.LBB291:
 340:src/display.c ****   else	set_dig(base, ch);
 2333              		.loc 1 340 3 view .LVU719
 340:src/display.c ****   else	set_dig(base, ch);
 2334              		.loc 1 340 6 is_stmt 0 view .LVU720
 2335 0118 0446     		mov	r4, r0
 2336 011a 90B3     		cbz	r0, .L224
 340:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 340 12 is_stmt 1 view .LVU721
 2338              	.LVL235:
 340:src/display.c ****   else	set_dig(base, ch);
 2339              		.loc 1 340 19 is_stmt 0 view .LVU722
 2340 011c 2223     		movs	r3, #34
 2341 011e 0370     		strb	r3, [r0]
 2342              	.LVL236:
 342:src/display.c **** }
 2343              		.loc 1 342 3 is_stmt 1 view .LVU723
 342:src/display.c **** }
 2344              		.loc 1 342 3 is_stmt 0 view .LVU724
 2345              	.LBE291:
 2346              	.LBE290:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2347              		.loc 1 1675 2 is_stmt 1 view .LVU725
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2348              		.loc 1 1675 6 is_stmt 0 view .LVU726
 2349 0120 2849     		ldr	r1, .L241
 2350 0122 19A8     		add	r0, sp, #100
 2351              	.LVL237:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2352              		.loc 1 1675 6 view .LVU727
 2353 0124 FFF7FEFF 		bl	dn_lt
 2354              	.LVL238:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2355              		.loc 1 1675 5 view .LVU728
 2356 0128 78B9     		cbnz	r0, .L240
1676:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2357              		.loc 1 1676 4 is_stmt 1 view .LVU729
 2358              	.LVL239:
 2359              	.LBB294:
 2360              	.LBI294:
 339:src/display.c ****   if (res) *res++ = ch;
 2361              		.loc 1 339 14 view .LVU730
ARM GAS  /tmp/ccKZqSeG.s 			page 114


 2362              	.LBB295:
 340:src/display.c ****   else	set_dig(base, ch);
 2363              		.loc 1 340 3 view .LVU731
 340:src/display.c ****   else	set_dig(base, ch);
 2364              		.loc 1 340 12 view .LVU732
 340:src/display.c ****   else	set_dig(base, ch);
 2365              		.loc 1 340 19 is_stmt 0 view .LVU733
 2366 012a 6F23     		movs	r3, #111
 2367 012c 6370     		strb	r3, [r4, #1]
 2368              	.LBE295:
 2369              	.LBE294:
1682:src/display.c **** 
 2370              		.loc 1 1682 7 view .LVU734
 2371 012e 35B0     		add	sp, sp, #212
 2372              		.cfi_remember_state
 2373              		.cfi_def_cfa_offset 12
 2374              		@ sp needed
 2375 0130 30BD     		pop	{r4, r5, pc}
 2376              	.LVL240:
 2377              	.L239:
 2378              		.cfi_restore_state
1635:src/display.c **** 	    *res++ += '-';
 2379              		.loc 1 1635 4 is_stmt 1 view .LVU735
1635:src/display.c **** 	    *res++ += '-';
 2380              		.loc 1 1635 7 is_stmt 0 view .LVU736
 2381 0132 15B3     		cbz	r5, .L212
1636:src/display.c **** 	  else
 2382              		.loc 1 1636 6 is_stmt 1 view .LVU737
1636:src/display.c **** 	  else
 2383              		.loc 1 1636 10 is_stmt 0 view .LVU738
 2384 0134 2B46     		mov	r3, r5
 2385              	.LVL241:
1636:src/display.c **** 	  else
 2386              		.loc 1 1636 13 view .LVU739
 2387 0136 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2388              	.LVL242:
1636:src/display.c **** 	  else
 2389              		.loc 1 1636 13 view .LVU740
 2390 013a 2D32     		adds	r2, r2, #45
 2391 013c 2A70     		strb	r2, [r5]
1636:src/display.c **** 	  else
 2392              		.loc 1 1636 10 view .LVU741
 2393 013e 1D46     		mov	r5, r3
 2394              	.LVL243:
 2395              	.L213:
1639:src/display.c **** 	}
 2396              		.loc 1 1639 4 is_stmt 1 view .LVU742
 2397 0140 07A9     		add	r1, sp, #28
 2398 0142 0846     		mov	r0, r1
 2399 0144 FFF7FEFF 		bl	dn_minus
 2400              	.LVL244:
 2401 0148 7DE7     		b	.L211
 2402              	.LVL245:
 2403              	.L240:
 2404              	.LBB296:
 2405              	.LBB292:
 340:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccKZqSeG.s 			page 115


 2406              		.loc 1 340 16 is_stmt 0 view .LVU743
 2407 014a 0134     		adds	r4, r4, #1
 2408              	.LVL246:
 2409              	.L227:
 340:src/display.c ****   else	set_dig(base, ch);
 2410              		.loc 1 340 16 view .LVU744
 2411              	.LBE292:
 2412              	.LBE296:
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2413              		.loc 1 1677 9 is_stmt 1 view .LVU745
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2414              		.loc 1 1677 15 is_stmt 0 view .LVU746
 2415 014c 19A8     		add	r0, sp, #100
 2416 014e FFF7FEFF 		bl	dn_eq0
 2417              	.LVL247:
1677:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2418              		.loc 1 1677 12 view .LVU747
 2419 0152 0028     		cmp	r0, #0
 2420 0154 7FF466AF 		bne	.L206
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2421              		.loc 1 1678 4 is_stmt 1 view .LVU748
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2422              		.loc 1 1678 8 is_stmt 0 view .LVU749
 2423 0158 1C48     		ldr	r0, .L241+8
 2424 015a 19A9     		add	r1, sp, #100
 2425 015c FFF7FEFF 		bl	dn_lt
 2426              	.LVL248:
1678:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2427              		.loc 1 1678 7 view .LVU750
 2428 0160 0028     		cmp	r0, #0
 2429 0162 7FF45FAF 		bne	.L206
1679:src/display.c **** 	  }
 2430              		.loc 1 1679 6 is_stmt 1 view .LVU751
 2431              	.LVL249:
 2432              	.LBB297:
 2433              	.LBI297:
 339:src/display.c ****   if (res) *res++ = ch;
 2434              		.loc 1 339 14 view .LVU752
 2435              	.LBB298:
 340:src/display.c ****   else	set_dig(base, ch);
 2436              		.loc 1 340 3 view .LVU753
 340:src/display.c ****   else	set_dig(base, ch);
 2437              		.loc 1 340 6 is_stmt 0 view .LVU754
 2438 0166 3CB3     		cbz	r4, .L229
 340:src/display.c ****   else	set_dig(base, ch);
 2439              		.loc 1 340 12 is_stmt 1 view .LVU755
 2440              	.LVL250:
 340:src/display.c ****   else	set_dig(base, ch);
 2441              		.loc 1 340 19 is_stmt 0 view .LVU756
 2442 0168 7523     		movs	r3, #117
 2443 016a 2370     		strb	r3, [r4]
 2444 016c 5AE7     		b	.L206
 2445              	.LVL251:
 2446              	.L221:
 340:src/display.c ****   else	set_dig(base, ch);
 2447              		.loc 1 340 19 view .LVU757
 2448              	.LBE298:
ARM GAS  /tmp/ccKZqSeG.s 			page 116


 2449              	.LBE297:
1665:src/display.c **** 
 2450              		.loc 1 1665 8 view .LVU758
 2451 016e 0398     		ldr	r0, [sp, #12]
 2452              	.LVL252:
 2453              	.LBB300:
 2454              	.LBB289:
1665:src/display.c **** 
 2455              		.loc 1 1665 8 view .LVU759
 2456 0170 0938     		subs	r0, r0, #9
 2457 0172 FFF7FEFF 		bl	set_decimal.part.0
 2458              	.LVL253:
1665:src/display.c **** 
 2459              		.loc 1 1665 8 view .LVU760
 2460 0176 0146     		mov	r1, r0
 2461 0178 C7E7     		b	.L223
 2462              	.LVL254:
 2463              	.L212:
1665:src/display.c **** 
 2464              		.loc 1 1665 8 view .LVU761
 2465              	.LBE289:
 2466              	.LBE300:
1638:src/display.c **** 	  dn_minus(&x, &x);
 2467              		.loc 1 1638 6 is_stmt 1 view .LVU762
 2468              	.LBB301:
 2469              	.LBI301:
 244:src/display.c **** {
 2470              		.loc 1 244 13 view .LVU763
 2471              	.LBB302:
 246:src/display.c **** }
 2472              		.loc 1 246 3 view .LVU764
 2473 017a 8120     		movs	r0, #129
 2474 017c FFF7FEFF 		bl	set_dot
 2475              	.LVL255:
 247:src/display.c **** 
 2476              		.loc 1 247 1 is_stmt 0 view .LVU765
 2477 0180 DEE7     		b	.L213
 2478              	.LVL256:
 2479              	.L224:
 247:src/display.c **** 
 2480              		.loc 1 247 1 view .LVU766
 2481              	.LBE302:
 2482              	.LBE301:
 2483              	.LBB303:
 2484              	.LBB293:
 341:src/display.c ****   return res;
 2485              		.loc 1 341 8 is_stmt 1 view .LVU767
 2486 0182 0398     		ldr	r0, [sp, #12]
 2487              	.LVL257:
 341:src/display.c ****   return res;
 2488              		.loc 1 341 8 is_stmt 0 view .LVU768
 2489 0184 2221     		movs	r1, #34
 2490 0186 FFF7FEFF 		bl	set_dig
 2491              	.LVL258:
 342:src/display.c **** }
 2492              		.loc 1 342 3 is_stmt 1 view .LVU769
 342:src/display.c **** }
ARM GAS  /tmp/ccKZqSeG.s 			page 117


 2493              		.loc 1 342 3 is_stmt 0 view .LVU770
 2494              	.LBE293:
 2495              	.LBE303:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2496              		.loc 1 1675 2 is_stmt 1 view .LVU771
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2497              		.loc 1 1675 6 is_stmt 0 view .LVU772
 2498 018a 0E49     		ldr	r1, .L241
 2499 018c 19A8     		add	r0, sp, #100
 2500 018e FFF7FEFF 		bl	dn_lt
 2501              	.LVL259:
1675:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2502              		.loc 1 1675 5 view .LVU773
 2503 0192 0028     		cmp	r0, #0
 2504 0194 DAD1     		bne	.L227
 2505              	.LVL260:
 2506              	.L210:
 2507              	.LBB304:
 2508              	.LBB280:
 341:src/display.c ****   return res;
 2509              		.loc 1 341 8 is_stmt 1 view .LVU774
 2510 0196 6F21     		movs	r1, #111
 2511 0198 7A20     		movs	r0, #122
 2512 019a FFF7FEFF 		bl	set_dig
 2513              	.LVL261:
 2514              	.LBE280:
 2515              	.LBE304:
1628:src/display.c **** 	}
 2516              		.loc 1 1628 4 view .LVU775
 2517 019e 41E7     		b	.L206
 2518              	.LVL262:
 2519              	.L219:
 2520              	.LBB305:
 2521              	.LBB286:
 341:src/display.c ****   return res;
 2522              		.loc 1 341 8 view .LVU776
 2523 01a0 2721     		movs	r1, #39
 2524 01a2 0398     		ldr	r0, [sp, #12]
 2525              	.LVL263:
 341:src/display.c ****   return res;
 2526              		.loc 1 341 8 is_stmt 0 view .LVU777
 2527 01a4 FFF7FEFF 		bl	set_dig
 2528              	.LVL264:
 341:src/display.c ****   return res;
 2529              		.loc 1 341 8 view .LVU778
 2530 01a8 2146     		mov	r1, r4
 2531 01aa 98E7     		b	.L220
 2532              	.LVL265:
 2533              	.L217:
 341:src/display.c ****   return res;
 2534              		.loc 1 341 8 view .LVU779
 2535              	.LBE286:
 2536              	.LBE305:
 2537              	.LBB306:
 2538              	.LBB283:
 341:src/display.c ****   return res;
 2539              		.loc 1 341 8 is_stmt 1 view .LVU780
ARM GAS  /tmp/ccKZqSeG.s 			page 118


 2540 01ac 4021     		movs	r1, #64
 2541 01ae 0398     		ldr	r0, [sp, #12]
 2542              	.LVL266:
 341:src/display.c ****   return res;
 2543              		.loc 1 341 8 is_stmt 0 view .LVU781
 2544 01b0 FFF7FEFF 		bl	set_dig
 2545              	.LVL267:
 341:src/display.c ****   return res;
 2546              		.loc 1 341 8 view .LVU782
 2547 01b4 2146     		mov	r1, r4
 2548 01b6 80E7     		b	.L218
 2549              	.LVL268:
 2550              	.L229:
 341:src/display.c ****   return res;
 2551              		.loc 1 341 8 view .LVU783
 2552              	.LBE283:
 2553              	.LBE306:
 2554              	.LBB307:
 2555              	.LBB299:
 341:src/display.c ****   return res;
 2556              		.loc 1 341 8 is_stmt 1 view .LVU784
 2557 01b8 7521     		movs	r1, #117
 2558 01ba 7A20     		movs	r0, #122
 2559 01bc FFF7FEFF 		bl	set_dig
 2560              	.LVL269:
 2561 01c0 30E7     		b	.L206
 2562              	.L242:
 2563 01c2 00BF     		.align	2
 2564              	.L241:
 2565 01c4 00000000 		.word	const_9000
 2566 01c8 00000000 		.word	.LANCHOR1
 2567 01cc 00000000 		.word	const_hms_threshold
 2568              	.LBE299:
 2569              	.LBE307:
 2570              		.cfi_endproc
 2571              	.LFE22:
 2573              		.section	.text.set_x_fract,"ax",%progbits
 2574              		.align	1
 2575              		.p2align 2,,3
 2576              		.syntax unified
 2577              		.thumb
 2578              		.thumb_func
 2579              		.fpu fpv4-sp-d16
 2581              	set_x_fract:
 2582              	.LVL270:
 2583              	.LFB23:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2584              		.loc 1 1685 63 view -0
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 216
 2587              		@ frame_needed = 0, uses_anonymous_args = 0
1686:src/display.c **** 	char buf[32], *p = buf;
 2588              		.loc 1 1686 2 view .LVU786
1687:src/display.c **** 	int j;
 2589              		.loc 1 1687 2 view .LVU787
1688:src/display.c **** 
 2590              		.loc 1 1688 2 view .LVU788
ARM GAS  /tmp/ccKZqSeG.s 			page 119


1690:src/display.c **** 	  return 1;
 2591              		.loc 1 1690 2 view .LVU789
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2592              		.loc 1 1685 63 is_stmt 0 view .LVU790
 2593 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2594              		.cfi_def_cfa_offset 20
 2595              		.cfi_offset 4, -20
 2596              		.cfi_offset 5, -16
 2597              		.cfi_offset 6, -12
 2598              		.cfi_offset 7, -8
 2599              		.cfi_offset 14, -4
 2600 0002 0646     		mov	r6, r0
 2601 0004 B7B0     		sub	sp, sp, #220
 2602              		.cfi_def_cfa_offset 240
1690:src/display.c **** 	  return 1;
 2603              		.loc 1 1690 6 view .LVU791
 2604 0006 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 2605              	.LVL271:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2606              		.loc 1 1685 63 view .LVU792
 2607 0008 0C46     		mov	r4, r1
1690:src/display.c **** 	  return 1;
 2608              		.loc 1 1690 6 view .LVU793
 2609 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2610              	.LVL272:
1690:src/display.c **** 	  return 1;
 2611              		.loc 1 1690 5 view .LVU794
 2612 000e 18B1     		cbz	r0, .L274
 2613              	.LVL273:
 2614              	.L263:
1691:src/display.c **** 	dn_abs(&x, rgx);
 2615              		.loc 1 1691 11 view .LVU795
 2616 0010 0125     		movs	r5, #1
 2617              	.L243:
1748:src/display.c **** 
 2618              		.loc 1 1748 7 view .LVU796
 2619 0012 2846     		mov	r0, r5
 2620 0014 37B0     		add	sp, sp, #220
 2621              		.cfi_remember_state
 2622              		.cfi_def_cfa_offset 20
 2623              		@ sp needed
 2624 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2625              	.LVL274:
 2626              	.L274:
 2627              		.cfi_restore_state
 2628              	.LBB316:
 2629              	.LBI316:
1685:src/display.c **** 	decNumber x, w, n, d, t;
 2630              		.loc 1 1685 18 is_stmt 1 view .LVU797
 2631              	.LBB317:
1692:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2632              		.loc 1 1692 2 view .LVU798
 2633 0018 3146     		mov	r1, r6
 2634 001a 0546     		mov	r5, r0
 2635 001c 09A8     		add	r0, sp, #36
 2636 001e FFF7FEFF 		bl	dn_abs
 2637              	.LVL275:
ARM GAS  /tmp/ccKZqSeG.s 			page 120


1693:src/display.c **** 	  return 0;
 2638              		.loc 1 1693 2 view .LVU799
1693:src/display.c **** 	  return 0;
 2639              		.loc 1 1693 6 is_stmt 0 view .LVU800
 2640 0022 5C49     		ldr	r1, .L279
 2641 0024 09A8     		add	r0, sp, #36
 2642 0026 FFF7FEFF 		bl	dn_lt
 2643              	.LVL276:
1693:src/display.c **** 	  return 0;
 2644              		.loc 1 1693 5 view .LVU801
 2645 002a 0028     		cmp	r0, #0
 2646 002c F1D0     		beq	.L243
1695:src/display.c **** 	  return 0;
 2647              		.loc 1 1695 2 is_stmt 1 view .LVU802
1695:src/display.c **** 	  return 0;
 2648              		.loc 1 1695 6 is_stmt 0 view .LVU803
 2649 002e 5A49     		ldr	r1, .L279+4
 2650 0030 09A8     		add	r0, sp, #36
 2651 0032 FFF7FEFF 		bl	dn_lt
 2652              	.LVL277:
1695:src/display.c **** 	  return 0;
 2653              		.loc 1 1695 5 view .LVU804
 2654 0036 0746     		mov	r7, r0
 2655 0038 0028     		cmp	r0, #0
 2656 003a EAD1     		bne	.L243
1697:src/display.c **** 	  if (res != NULL)
 2657              		.loc 1 1697 2 is_stmt 1 view .LVU805
1697:src/display.c **** 	  if (res != NULL)
 2658              		.loc 1 1697 5 is_stmt 0 view .LVU806
 2659 003c 96F90830 		ldrsb	r3, [r6, #8]
 2660 0040 002B     		cmp	r3, #0
 2661 0042 C0F28680 		blt	.L275
 2662              	.LVL278:
 2663              	.L248:
1703:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2664              		.loc 1 1703 2 is_stmt 1 view .LVU807
 2665 0046 09A9     		add	r1, sp, #36
 2666 0048 12A8     		add	r0, sp, #72
 2667 004a FFF7FEFF 		bl	decNumberFrac
 2668              	.LVL279:
1704:src/display.c **** 
 2669              		.loc 1 1704 2 view .LVU808
 2670 004e 12AA     		add	r2, sp, #72
 2671 0050 24A9     		add	r1, sp, #144
 2672 0052 1BA8     		add	r0, sp, #108
 2673 0054 FFF7FEFF 		bl	decNumber2Fraction
 2674              	.LVL280:
1706:src/display.c **** 	dn_compare(&t, &t, &w);
 2675              		.loc 1 1706 2 view .LVU809
 2676 0058 24AA     		add	r2, sp, #144
 2677 005a 1BA9     		add	r1, sp, #108
 2678 005c 2DA8     		add	r0, sp, #180
 2679 005e FFF7FEFF 		bl	dn_divide
 2680              	.LVL281:
1707:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2681              		.loc 1 1707 2 view .LVU810
 2682 0062 2DA9     		add	r1, sp, #180
ARM GAS  /tmp/ccKZqSeG.s 			page 121


 2683 0064 12AA     		add	r2, sp, #72
 2684 0066 0846     		mov	r0, r1
 2685 0068 FFF7FEFF 		bl	dn_compare
 2686              	.LVL282:
1708:src/display.c **** 
 2687              		.loc 1 1708 2 view .LVU811
 2688 006c 09A9     		add	r1, sp, #36
 2689 006e 12A8     		add	r0, sp, #72
 2690 0070 FFF7FEFF 		bl	decNumberTrunc
 2691              	.LVL283:
1710:src/display.c **** 	  dn_inc(&w);
 2692              		.loc 1 1710 2 view .LVU812
1710:src/display.c **** 	  dn_inc(&w);
 2693              		.loc 1 1710 6 is_stmt 0 view .LVU813
 2694 0074 24A9     		add	r1, sp, #144
 2695 0076 1BA8     		add	r0, sp, #108
 2696 0078 FFF7FEFF 		bl	dn_eq
 2697              	.LVL284:
1710:src/display.c **** 	  dn_inc(&w);
 2698              		.loc 1 1710 5 view .LVU814
 2699 007c 0028     		cmp	r0, #0
 2700 007e 70D1     		bne	.L276
 2701              	.L250:
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2702              		.loc 1 1715 2 is_stmt 1 view .LVU815
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2703              		.loc 1 1715 6 is_stmt 0 view .LVU816
 2704 0080 464B     		ldr	r3, .L279+8
 2705 0082 1B68     		ldr	r3, [r3]
 2706 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1715:src/display.c **** 	  if (!dn_eq0(&w)) {
 2707              		.loc 1 1715 5 view .LVU817
 2708 0088 DB06     		lsls	r3, r3, #27
 2709 008a 55D4     		bmi	.L251
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2710              		.loc 1 1716 4 is_stmt 1 view .LVU818
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2711              		.loc 1 1716 9 is_stmt 0 view .LVU819
 2712 008c 12A8     		add	r0, sp, #72
 2713 008e FFF7FEFF 		bl	dn_eq0
 2714              	.LVL285:
1716:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2715              		.loc 1 1716 7 view .LVU820
 2716 0092 0028     		cmp	r0, #0
 2717 0094 6CD0     		beq	.L277
1687:src/display.c **** 	int j;
 2718              		.loc 1 1687 17 view .LVU821
 2719 0096 01AE     		add	r6, sp, #4
 2720              	.LVL286:
1687:src/display.c **** 	int j;
 2721              		.loc 1 1687 17 view .LVU822
 2722 0098 3546     		mov	r5, r6
 2723              	.L252:
 2724              	.LVL287:
1724:src/display.c **** 	*p++ = '/';
 2725              		.loc 1 1724 2 is_stmt 1 view .LVU823
1724:src/display.c **** 	*p++ = '/';
ARM GAS  /tmp/ccKZqSeG.s 			page 122


 2726              		.loc 1 1724 17 is_stmt 0 view .LVU824
 2727 009a 1BA8     		add	r0, sp, #108
 2728 009c FFF7FEFF 		bl	dn_to_int
 2729              	.LVL288:
 2730 00a0 0146     		mov	r1, r0
1724:src/display.c **** 	*p++ = '/';
 2731              		.loc 1 1724 6 view .LVU825
 2732 00a2 2846     		mov	r0, r5
 2733 00a4 FFF7FEFF 		bl	num_arg
 2734              	.LVL289:
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2735              		.loc 1 1725 2 is_stmt 1 view .LVU826
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2736              		.loc 1 1725 4 is_stmt 0 view .LVU827
 2737 00a8 0546     		mov	r5, r0
 2738              	.LVL290:
1725:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2739              		.loc 1 1725 7 view .LVU828
 2740 00aa 2F23     		movs	r3, #47
 2741 00ac 05F8013B 		strb	r3, [r5], #1
 2742              	.LVL291:
1726:src/display.c **** 	*p = '\0';
 2743              		.loc 1 1726 2 is_stmt 1 view .LVU829
1726:src/display.c **** 	*p = '\0';
 2744              		.loc 1 1726 17 is_stmt 0 view .LVU830
 2745 00b0 24A8     		add	r0, sp, #144
 2746 00b2 FFF7FEFF 		bl	dn_to_int
 2747              	.LVL292:
 2748 00b6 0146     		mov	r1, r0
1726:src/display.c **** 	*p = '\0';
 2749              		.loc 1 1726 6 view .LVU831
 2750 00b8 2846     		mov	r0, r5
 2751 00ba FFF7FEFF 		bl	num_arg
 2752              	.LVL293:
1727:src/display.c **** 	if ((p - 12) > buf) {
 2753              		.loc 1 1727 2 is_stmt 1 view .LVU832
1727:src/display.c **** 	if ((p - 12) > buf) {
 2754              		.loc 1 1727 5 is_stmt 0 view .LVU833
 2755 00be 0546     		mov	r5, r0
 2756 00c0 0023     		movs	r3, #0
 2757 00c2 05F80C39 		strb	r3, [r5], #-12
1728:src/display.c **** 	  p -= 12;
 2758              		.loc 1 1728 2 is_stmt 1 view .LVU834
1728:src/display.c **** 	  p -= 12;
 2759              		.loc 1 1728 5 is_stmt 0 view .LVU835
 2760 00c6 B542     		cmp	r5, r6
 2761 00c8 32D8     		bhi	.L253
 2762 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2763              	.LVL294:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2764              		.loc 1 1732 12 is_stmt 1 view .LVU836
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2765              		.loc 1 1732 2 is_stmt 0 view .LVU837
 2766 00ce 51B1     		cbz	r1, .L255
1731:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2767              		.loc 1 1731 11 view .LVU838
 2768 00d0 3546     		mov	r5, r6
ARM GAS  /tmp/ccKZqSeG.s 			page 123


 2769              	.LVL295:
 2770              	.L258:
1733:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2771              		.loc 1 1733 4 is_stmt 1 view .LVU839
 2772              	.LBB318:
 2773              	.LBI318:
 339:src/display.c ****   if (res) *res++ = ch;
 2774              		.loc 1 339 14 view .LVU840
 2775              	.LBB319:
 340:src/display.c ****   else	set_dig(base, ch);
 2776              		.loc 1 340 3 view .LVU841
 340:src/display.c ****   else	set_dig(base, ch);
 2777              		.loc 1 340 12 view .LVU842
 340:src/display.c ****   else	set_dig(base, ch);
 2778              		.loc 1 340 16 is_stmt 0 view .LVU843
 2779 00d2 2346     		mov	r3, r4
 2780              	.LVL296:
 340:src/display.c ****   else	set_dig(base, ch);
 2781              		.loc 1 340 6 view .LVU844
 2782 00d4 34B3     		cbz	r4, .L256
 2783              	.LVL297:
 340:src/display.c ****   else	set_dig(base, ch);
 2784              		.loc 1 340 19 view .LVU845
 2785 00d6 03F8011B 		strb	r1, [r3], #1
 2786              	.LVL298:
 340:src/display.c ****   else	set_dig(base, ch);
 2787              		.loc 1 340 16 view .LVU846
 2788 00da 1C46     		mov	r4, r3
 2789              	.LVL299:
 2790              	.L257:
 342:src/display.c **** }
 2791              		.loc 1 342 3 is_stmt 1 view .LVU847
 342:src/display.c **** }
 2792              		.loc 1 342 3 is_stmt 0 view .LVU848
 2793              	.LBE319:
 2794              	.LBE318:
1734:src/display.c **** 	}
 2795              		.loc 1 1734 4 is_stmt 1 view .LVU849
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1732 12 is_stmt 0 view .LVU850
 2797 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2798              	.LVL300:
1734:src/display.c **** 	}
 2799              		.loc 1 1734 6 view .LVU851
 2800 00e0 0937     		adds	r7, r7, #9
 2801              	.LVL301:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2802              		.loc 1 1732 24 is_stmt 1 view .LVU852
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2803              		.loc 1 1732 12 view .LVU853
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2804              		.loc 1 1732 2 is_stmt 0 view .LVU854
 2805 00e2 0029     		cmp	r1, #0
 2806 00e4 F5D1     		bne	.L258
 2807              	.LVL302:
 2808              	.L255:
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
ARM GAS  /tmp/ccKZqSeG.s 			page 124


 2809              		.loc 1 1737 2 is_stmt 1 view .LVU855
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2810              		.loc 1 1737 6 is_stmt 0 view .LVU856
 2811 00e6 2DA8     		add	r0, sp, #180
 2812 00e8 FFF7FEFF 		bl	dn_eq0
 2813              	.LVL303:
1737:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2814              		.loc 1 1737 5 view .LVU857
 2815 00ec F0B9     		cbnz	r0, .L266
1739:src/display.c **** 	  p = (char *)S7_fract_LT;
 2816              		.loc 1 1739 7 is_stmt 1 view .LVU858
1739:src/display.c **** 	  p = (char *)S7_fract_LT;
 2817              		.loc 1 1739 10 is_stmt 0 view .LVU859
 2818 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1742:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2819              		.loc 1 1742 6 view .LVU860
 2820 00f2 2B4D     		ldr	r5, .L279+12
 2821 00f4 2B4B     		ldr	r3, .L279+16
 2822 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2823 00fa 38BF     		it	cc
 2824 00fc 1D46     		movcc	r5, r3
 2825              	.L259:
 2826              	.LVL304:
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2827              		.loc 1 1743 26 is_stmt 1 view .LVU861
 2828              	.LBB322:
 2829              	.LBB320:
 340:src/display.c ****   else	set_dig(base, ch);
 2830              		.loc 1 340 16 is_stmt 0 view .LVU862
 2831 00fe 6C26     		movs	r6, #108
 2832 0100 2021     		movs	r1, #32
 2833 0102 08E0     		b	.L262
 2834              	.LVL305:
 2835              	.L278:
 340:src/display.c ****   else	set_dig(base, ch);
 2836              		.loc 1 340 16 view .LVU863
 2837              	.LBE320:
 2838              	.LBE322:
 2839              	.LBB323:
 2840              	.LBB324:
 340:src/display.c ****   else	set_dig(base, ch);
 2841              		.loc 1 340 19 view .LVU864
 2842 0104 03F8011B 		strb	r1, [r3], #1
 2843              	.LVL306:
 340:src/display.c ****   else	set_dig(base, ch);
 2844              		.loc 1 340 16 view .LVU865
 2845 0108 1C46     		mov	r4, r3
 2846              	.LVL307:
 2847              	.L261:
 342:src/display.c **** }
 2848              		.loc 1 342 3 is_stmt 1 view .LVU866
 342:src/display.c **** }
 2849              		.loc 1 342 3 is_stmt 0 view .LVU867
 2850              	.LBE324:
 2851              	.LBE323:
1745:src/display.c **** 	}
 2852              		.loc 1 1745 4 is_stmt 1 view .LVU868
ARM GAS  /tmp/ccKZqSeG.s 			page 125


1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2853              		.loc 1 1743 26 is_stmt 0 view .LVU869
 2854 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2855              	.LVL308:
1745:src/display.c **** 	}
 2856              		.loc 1 1745 6 view .LVU870
 2857 010e 0736     		adds	r6, r6, #7
 2858              	.LVL309:
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2859              		.loc 1 1743 38 is_stmt 1 view .LVU871
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2860              		.loc 1 1743 26 view .LVU872
1743:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2861              		.loc 1 1743 2 is_stmt 0 view .LVU873
 2862 0110 0029     		cmp	r1, #0
 2863 0112 3FF47DAF 		beq	.L263
 2864              	.LVL310:
 2865              	.L262:
1744:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2866              		.loc 1 1744 4 is_stmt 1 view .LVU874
 2867              	.LBB326:
 2868              	.LBI323:
 339:src/display.c ****   if (res) *res++ = ch;
 2869              		.loc 1 339 14 view .LVU875
 2870              	.LBB325:
 340:src/display.c ****   else	set_dig(base, ch);
 2871              		.loc 1 340 3 view .LVU876
 340:src/display.c ****   else	set_dig(base, ch);
 2872              		.loc 1 340 12 view .LVU877
 340:src/display.c ****   else	set_dig(base, ch);
 2873              		.loc 1 340 16 is_stmt 0 view .LVU878
 2874 0116 2346     		mov	r3, r4
 2875              	.LVL311:
 340:src/display.c ****   else	set_dig(base, ch);
 2876              		.loc 1 340 6 view .LVU879
 2877 0118 002C     		cmp	r4, #0
 2878 011a F3D1     		bne	.L278
 2879              	.LVL312:
 341:src/display.c ****   return res;
 2880              		.loc 1 341 8 is_stmt 1 view .LVU880
 2881 011c 3046     		mov	r0, r6
 2882 011e FFF7FEFF 		bl	set_dig
 2883              	.LVL313:
 341:src/display.c ****   return res;
 2884              		.loc 1 341 8 is_stmt 0 view .LVU881
 2885 0122 F2E7     		b	.L261
 2886              	.LVL314:
 2887              	.L256:
 341:src/display.c ****   return res;
 2888              		.loc 1 341 8 view .LVU882
 2889              	.LBE325:
 2890              	.LBE326:
 2891              	.LBB327:
 2892              	.LBB321:
 341:src/display.c ****   return res;
 2893              		.loc 1 341 8 is_stmt 1 view .LVU883
 2894 0124 3846     		mov	r0, r7
ARM GAS  /tmp/ccKZqSeG.s 			page 126


 2895 0126 FFF7FEFF 		bl	set_dig
 2896              	.LVL315:
 341:src/display.c ****   return res;
 2897              		.loc 1 341 8 is_stmt 0 view .LVU884
 2898 012a D7E7     		b	.L257
 2899              	.LVL316:
 2900              	.L266:
 341:src/display.c ****   return res;
 2901              		.loc 1 341 8 view .LVU885
 2902              	.LBE321:
 2903              	.LBE327:
1738:src/display.c **** 	else if (decNumberIsNegative(&t))
 2904              		.loc 1 1738 6 view .LVU886
 2905 012c 1E4D     		ldr	r5, .L279+20
 2906 012e E6E7     		b	.L259
 2907              	.LVL317:
 2908              	.L253:
1729:src/display.c **** 	  *p = '<';
 2909              		.loc 1 1729 4 is_stmt 1 view .LVU887
1730:src/display.c **** 	} else	p = buf;
 2910              		.loc 1 1730 4 view .LVU888
1730:src/display.c **** 	} else	p = buf;
 2911              		.loc 1 1730 7 is_stmt 0 view .LVU889
 2912 0130 3C21     		movs	r1, #60
 2913 0132 00F80C1C 		strb	r1, [r0, #-12]
 2914              	.LVL318:
1732:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2915              		.loc 1 1732 12 is_stmt 1 view .LVU890
 2916 0136 CCE7     		b	.L258
 2917              	.LVL319:
 2918              	.L251:
1721:src/display.c **** 	  dn_add(&n, &n, &x);
 2919              		.loc 1 1721 4 view .LVU891
 2920 0138 12A9     		add	r1, sp, #72
 2921 013a 24AA     		add	r2, sp, #144
 2922 013c 09A8     		add	r0, sp, #36
 2923 013e FFF7FEFF 		bl	dn_multiply
 2924              	.LVL320:
1722:src/display.c **** 	}
 2925              		.loc 1 1722 4 view .LVU892
 2926 0142 1BA9     		add	r1, sp, #108
 2927 0144 09AA     		add	r2, sp, #36
 2928 0146 0846     		mov	r0, r1
1687:src/display.c **** 	int j;
 2929              		.loc 1 1687 17 is_stmt 0 view .LVU893
 2930 0148 01AE     		add	r6, sp, #4
 2931              	.LVL321:
1722:src/display.c **** 	}
 2932              		.loc 1 1722 4 view .LVU894
 2933 014a FFF7FEFF 		bl	dn_add
 2934              	.LVL322:
1687:src/display.c **** 	int j;
 2935              		.loc 1 1687 17 view .LVU895
 2936 014e 3546     		mov	r5, r6
 2937 0150 A3E7     		b	.L252
 2938              	.LVL323:
 2939              	.L275:
ARM GAS  /tmp/ccKZqSeG.s 			page 127


1698:src/display.c **** 	    *res++ += '-';
 2940              		.loc 1 1698 4 is_stmt 1 view .LVU896
1698:src/display.c **** 	    *res++ += '-';
 2941              		.loc 1 1698 7 is_stmt 0 view .LVU897
 2942 0152 D4B1     		cbz	r4, .L249
1699:src/display.c **** 	  else
 2943              		.loc 1 1699 6 is_stmt 1 view .LVU898
1699:src/display.c **** 	  else
 2944              		.loc 1 1699 10 is_stmt 0 view .LVU899
 2945 0154 2346     		mov	r3, r4
 2946              	.LVL324:
1699:src/display.c **** 	  else
 2947              		.loc 1 1699 13 view .LVU900
 2948 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2949              	.LVL325:
1699:src/display.c **** 	  else
 2950              		.loc 1 1699 13 view .LVU901
 2951 015a 2D32     		adds	r2, r2, #45
 2952 015c 2270     		strb	r2, [r4]
1699:src/display.c **** 	  else
 2953              		.loc 1 1699 10 view .LVU902
 2954 015e 1C46     		mov	r4, r3
 2955              	.LVL326:
1699:src/display.c **** 	  else
 2956              		.loc 1 1699 10 view .LVU903
 2957 0160 71E7     		b	.L248
 2958              	.LVL327:
 2959              	.L276:
1711:src/display.c **** 	  decNumberZero(&n);
 2960              		.loc 1 1711 4 is_stmt 1 view .LVU904
 2961 0162 12A8     		add	r0, sp, #72
 2962 0164 FFF7FEFF 		bl	dn_inc
 2963              	.LVL328:
1712:src/display.c **** 	}
 2964              		.loc 1 1712 4 view .LVU905
 2965 0168 1BA8     		add	r0, sp, #108
 2966 016a FFF7FEFF 		bl	decNumberZero
 2967              	.LVL329:
 2968 016e 87E7     		b	.L250
 2969              	.L277:
1717:src/display.c **** 	    *p++ = ' ';
 2970              		.loc 1 1717 6 view .LVU906
1717:src/display.c **** 	    *p++ = ' ';
 2971              		.loc 1 1717 21 is_stmt 0 view .LVU907
 2972 0170 12A8     		add	r0, sp, #72
 2973 0172 FFF7FEFF 		bl	dn_to_int
 2974              	.LVL330:
1717:src/display.c **** 	    *p++ = ' ';
 2975              		.loc 1 1717 10 view .LVU908
 2976 0176 01AE     		add	r6, sp, #4
 2977              	.LVL331:
1717:src/display.c **** 	    *p++ = ' ';
 2978              		.loc 1 1717 21 view .LVU909
 2979 0178 0146     		mov	r1, r0
1717:src/display.c **** 	    *p++ = ' ';
 2980              		.loc 1 1717 10 view .LVU910
 2981 017a 3046     		mov	r0, r6
ARM GAS  /tmp/ccKZqSeG.s 			page 128


 2982 017c FFF7FEFF 		bl	num_arg
 2983              	.LVL332:
1718:src/display.c **** 	  }
 2984              		.loc 1 1718 6 is_stmt 1 view .LVU911
1718:src/display.c **** 	  }
 2985              		.loc 1 1718 8 is_stmt 0 view .LVU912
 2986 0180 0546     		mov	r5, r0
 2987              	.LVL333:
1718:src/display.c **** 	  }
 2988              		.loc 1 1718 11 view .LVU913
 2989 0182 2023     		movs	r3, #32
 2990 0184 05F8013B 		strb	r3, [r5], #1
 2991              	.LVL334:
1718:src/display.c **** 	  }
 2992              		.loc 1 1718 11 view .LVU914
 2993 0188 87E7     		b	.L252
 2994              	.LVL335:
 2995              	.L249:
1701:src/display.c **** 	}
 2996              		.loc 1 1701 6 is_stmt 1 view .LVU915
 2997              	.LBB328:
 2998              	.LBI328:
 244:src/display.c **** {
 2999              		.loc 1 244 13 view .LVU916
 3000              	.LBB329:
 246:src/display.c **** }
 3001              		.loc 1 246 3 view .LVU917
 3002 018a 8120     		movs	r0, #129
 3003 018c FFF7FEFF 		bl	set_dot
 3004              	.LVL336:
 247:src/display.c **** 
 3005              		.loc 1 247 1 is_stmt 0 view .LVU918
 3006 0190 59E7     		b	.L248
 3007              	.L280:
 3008 0192 00BF     		.align	2
 3009              	.L279:
 3010 0194 00000000 		.word	const_100000
 3011 0198 00000000 		.word	const_0_0001
 3012 019c 00000000 		.word	main_ram
 3013 01a0 00000000 		.word	.LANCHOR5
 3014 01a4 00000000 		.word	.LANCHOR7
 3015 01a8 00000000 		.word	.LANCHOR6
 3016              	.LBE329:
 3017              	.LBE328:
 3018              	.LBE317:
 3019              	.LBE316:
 3020              		.cfi_endproc
 3021              	.LFE23:
 3023              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 3024              		.align	2
 3025              	.LC1:
 3026 0000 42333435 		.ascii	"B34567o9D12345h\000"
 3026      36376F39 
 3026      44313233 
 3026      34356800 
 3027              		.section	.text.carry_overflow,"ax",%progbits
 3028              		.align	1
ARM GAS  /tmp/ccKZqSeG.s 			page 129


 3029              		.p2align 2,,3
 3030              		.syntax unified
 3031              		.thumb
 3032              		.thumb_func
 3033              		.fpu fpv4-sp-d16
 3035              	carry_overflow:
 3036              	.LFB15:
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 3037              		.loc 1 494 38 is_stmt 1 view -0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 0
 3040              		@ frame_needed = 0, uses_anonymous_args = 0
 495:src/display.c ****       int c;
 3041              		.loc 1 495 7 view .LVU920
 3042              	.LVL337:
 496:src/display.c ****       unsigned int b;
 3043              		.loc 1 496 7 view .LVU921
 497:src/display.c **** 
 3044              		.loc 1 497 7 view .LVU922
 500:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 3045              		.loc 1 500 7 view .LVU923
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 3046              		.loc 1 494 38 is_stmt 0 view .LVU924
 3047 0000 10B5     		push	{r4, lr}
 3048              		.cfi_def_cfa_offset 8
 3049              		.cfi_offset 4, -8
 3050              		.cfi_offset 14, -4
 500:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 3051              		.loc 1 500 21 view .LVU925
 3052 0002 1A4B     		ldr	r3, .L294
 3053 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3054 0006 023B     		subs	r3, r3, #2
 3055 0008 DBB2     		uxtb	r3, r3
 3056 000a 032B     		cmp	r3, #3
 3057 000c 14D8     		bhi	.L282
 3058 000e 184A     		ldr	r2, .L294+4
 3059 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 3060              	.LVL338:
 509:src/display.c **** 	SET_EXP_SIGN;
 3061              		.loc 1 509 7 is_stmt 1 view .LVU926
 509:src/display.c **** 	SET_EXP_SIGN;
 3062              		.loc 1 509 18 is_stmt 0 view .LVU927
 3063 0014 A4F10B03 		sub	r3, r4, #11
 509:src/display.c **** 	SET_EXP_SIGN;
 3064              		.loc 1 509 10 view .LVU928
 3065 0018 042B     		cmp	r3, #4
 3066 001a 17D9     		bls	.L291
 3067              	.L284:
 511:src/display.c ****       set_dig(base, c);
 3068              		.loc 1 511 7 is_stmt 1 view .LVU929
 3069              	.LVL339:
 512:src/display.c **** 
 3070              		.loc 1 512 7 view .LVU930
 511:src/display.c ****       set_dig(base, c);
 3071              		.loc 1 511 28 is_stmt 0 view .LVU931
 3072 001c 154B     		ldr	r3, .L294+8
 3073 001e 1C44     		add	r4, r4, r3
ARM GAS  /tmp/ccKZqSeG.s 			page 130


 3074              	.LVL340:
 512:src/display.c **** 
 3075              		.loc 1 512 7 view .LVU932
 3076 0020 6C20     		movs	r0, #108
 3077 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 3078 0026 FFF7FEFF 		bl	set_dig
 3079              	.LVL341:
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 3080              		.loc 1 515 7 is_stmt 1 view .LVU933
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 3081              		.loc 1 515 11 is_stmt 0 view .LVU934
 3082 002a FFF7FEFF 		bl	get_carry
 3083              	.LVL342:
 515:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 3084              		.loc 1 515 10 view .LVU935
 3085 002e B8B9     		cbnz	r0, .L292
 3086              	.L285:
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 3087              		.loc 1 517 7 is_stmt 1 view .LVU936
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 3088              		.loc 1 517 11 is_stmt 0 view .LVU937
 3089 0030 FFF7FEFF 		bl	get_overflow
 3090              	.LVL343:
 517:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 3091              		.loc 1 517 10 view .LVU938
 3092 0034 70B9     		cbnz	r0, .L293
 519:src/display.c **** 
 3093              		.loc 1 519 5 view .LVU939
 3094 0036 10BD     		pop	{r4, pc}
 3095              	.LVL344:
 3096              	.L282:
 505:src/display.c ****       }
 3097              		.loc 1 505 16 is_stmt 1 view .LVU940
 505:src/display.c ****       }
 3098              		.loc 1 505 26 is_stmt 0 view .LVU941
 3099 0038 0F4B     		ldr	r3, .L294+12
 3100 003a 1B68     		ldr	r3, [r3]
 3101 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 3102 0040 2409     		lsrs	r4, r4, #4
 505:src/display.c ****       }
 3103              		.loc 1 505 35 view .LVU942
 3104 0042 0134     		adds	r4, r4, #1
 3105              	.LVL345:
 505:src/display.c ****       }
 3106              		.loc 1 505 39 is_stmt 1 view .LVU943
 509:src/display.c **** 	SET_EXP_SIGN;
 3107              		.loc 1 509 7 view .LVU944
 509:src/display.c **** 	SET_EXP_SIGN;
 3108              		.loc 1 509 18 is_stmt 0 view .LVU945
 3109 0044 A4F10B03 		sub	r3, r4, #11
 509:src/display.c **** 	SET_EXP_SIGN;
 3110              		.loc 1 509 10 view .LVU946
 3111 0048 042B     		cmp	r3, #4
 3112 004a E7D8     		bhi	.L284
 3113              	.L291:
 510:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3114              		.loc 1 510 2 is_stmt 1 view .LVU947
ARM GAS  /tmp/ccKZqSeG.s 			page 131


 3115              	.LBB336:
 3116              	.LBI336:
 254:src/display.c **** {
 3117              		.loc 1 254 13 view .LVU948
 3118              	.LBB337:
 256:src/display.c **** }
 3119              		.loc 1 256 3 view .LVU949
 3120 004c 8220     		movs	r0, #130
 3121 004e FFF7FEFF 		bl	set_dot
 3122              	.LVL346:
 257:src/display.c **** 
 3123              		.loc 1 257 1 is_stmt 0 view .LVU950
 3124 0052 E3E7     		b	.L284
 3125              	.LVL347:
 3126              	.L293:
 257:src/display.c **** 
 3127              		.loc 1 257 1 view .LVU951
 3128              	.LBE337:
 3129              	.LBE336:
 3130              	.LBB338:
 3131              	.LBI338:
 494:src/display.c ****       const int base = SEGS_EXP_BASE;
 3132              		.loc 1 494 17 is_stmt 1 view .LVU952
 3133              	.LBB339:
 518:src/display.c ****     }
 3134              		.loc 1 518 2 view .LVU953
 3135              	.LBE339:
 3136              	.LBE338:
 519:src/display.c **** 
 3137              		.loc 1 519 5 is_stmt 0 view .LVU954
 3138 0054 BDE81040 		pop	{r4, lr}
 3139              		.cfi_remember_state
 3140              		.cfi_restore 14
 3141              		.cfi_restore 4
 3142              		.cfi_def_cfa_offset 0
 3143              	.LVL348:
 3144              	.LBB341:
 3145              	.LBB340:
 518:src/display.c ****     }
 3146              		.loc 1 518 2 view .LVU955
 3147 0058 6F21     		movs	r1, #111
 3148 005a 7A20     		movs	r0, #122
 3149 005c FFF7FEBF 		b	set_dig
 3150              	.LVL349:
 3151              	.L292:
 3152              		.cfi_restore_state
 518:src/display.c ****     }
 3153              		.loc 1 518 2 view .LVU956
 3154              	.LBE340:
 3155              	.LBE341:
 516:src/display.c ****       if (get_overflow())
 3156              		.loc 1 516 2 is_stmt 1 view .LVU957
 3157 0060 6321     		movs	r1, #99
 3158 0062 7320     		movs	r0, #115
 3159 0064 FFF7FEFF 		bl	set_dig
 3160              	.LVL350:
 3161 0068 E2E7     		b	.L285
ARM GAS  /tmp/ccKZqSeG.s 			page 132


 3162              	.L295:
 3163 006a 00BF     		.align	2
 3164              	.L294:
 3165 006c 00000000 		.word	StateWhileOn
 3166 0070 00000000 		.word	.LANCHOR8
 3167 0074 00000000 		.word	.LC1
 3168 0078 00000000 		.word	main_ram
 3169              		.cfi_endproc
 3170              	.LFE15:
 3172              		.global	__aeabi_uldivmod
 3173              		.section	.text.set_int_x,"ax",%progbits
 3174              		.align	1
 3175              		.p2align 2,,3
 3176              		.syntax unified
 3177              		.thumb
 3178              		.thumb_func
 3179              		.fpu fpv4-sp-d16
 3181              	set_int_x:
 3182              	.LVL351:
 3183              	.LFB18:
1411:src/display.c **** 	const int ws = word_size();
 3184              		.loc 1 1411 67 view -0
 3185              		.cfi_startproc
 3186              		@ args = 0, pretend = 0, frame = 88
 3187              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/display.c **** 	const int ws = word_size();
 3188              		.loc 1 1411 67 is_stmt 0 view .LVU959
 3189 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3190              		.cfi_def_cfa_offset 36
 3191              		.cfi_offset 4, -36
 3192              		.cfi_offset 5, -32
 3193              		.cfi_offset 6, -28
 3194              		.cfi_offset 7, -24
 3195              		.cfi_offset 8, -20
 3196              		.cfi_offset 9, -16
 3197              		.cfi_offset 10, -12
 3198              		.cfi_offset 11, -8
 3199              		.cfi_offset 14, -4
 3200 0004 97B0     		sub	sp, sp, #92
 3201              		.cfi_def_cfa_offset 128
1411:src/display.c **** 	const int ws = word_size();
 3202              		.loc 1 1411 67 view .LVU960
 3203 0006 1546     		mov	r5, r2
 3204 0008 0646     		mov	r6, r0
 3205 000a 0F46     		mov	r7, r1
1412:src/display.c **** 	unsigned int b;
 3206              		.loc 1 1412 2 is_stmt 1 view .LVU961
1412:src/display.c **** 	unsigned int b;
 3207              		.loc 1 1412 17 is_stmt 0 view .LVU962
 3208 000c FFF7FEFF 		bl	word_size
 3209              	.LVL352:
1412:src/display.c **** 	unsigned int b;
 3210              		.loc 1 1412 17 view .LVU963
 3211 0010 CD4B     		ldr	r3, .L388
 3212 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3213 0014 023B     		subs	r3, r3, #2
 3214 0016 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccKZqSeG.s 			page 133


1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3215              		.loc 1 1418 6 view .LVU964
 3216 0018 0022     		movs	r2, #0
 3217 001a 032B     		cmp	r3, #3
1412:src/display.c **** 	unsigned int b;
 3218              		.loc 1 1412 17 view .LVU965
 3219 001c 8346     		mov	fp, r0
 3220              	.LVL353:
1413:src/display.c **** 	long long int vs = value;
 3221              		.loc 1 1413 2 is_stmt 1 view .LVU966
1414:src/display.c **** 	unsigned long long int v;
 3222              		.loc 1 1414 2 view .LVU967
1415:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3223              		.loc 1 1415 2 view .LVU968
1416:src/display.c **** 	int i, j, k;
 3224              		.loc 1 1416 2 view .LVU969
1417:src/display.c **** 	int sign = 0;
 3225              		.loc 1 1417 2 view .LVU970
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3226              		.loc 1 1418 2 view .LVU971
1418:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3227              		.loc 1 1418 6 is_stmt 0 view .LVU972
 3228 001e 0492     		str	r2, [sp, #16]
1419:src/display.c **** 
 3229              		.loc 1 1419 2 is_stmt 1 view .LVU973
 3230              	.LVL354:
1421:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3231              		.loc 1 1421 2 view .LVU974
 3232 0020 00F24181 		bhi	.L297
 3233 0024 C94A     		ldr	r2, .L388+4
 3234 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3235              	.LVL355:
1429:src/display.c **** 	  IntMaxWindow = 0;
 3236              		.loc 1 1429 2 view .LVU975
1429:src/display.c **** 	  IntMaxWindow = 0;
 3237              		.loc 1 1429 5 is_stmt 0 view .LVU976
 3238 002a 002D     		cmp	r5, #0
 3239 002c 00F04181 		beq	.L379
 3240              	.LVL356:
 3241              	.L299:
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3242              		.loc 1 1434 2 is_stmt 1 view .LVU977
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3243              		.loc 1 1434 24 is_stmt 0 view .LVU978
 3244 0030 0AF1FF33 		add	r3, r10, #-1
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3245              		.loc 1 1434 30 view .LVU979
 3246 0034 47F67574 		movw	r4, #32629
 3247 0038 1C41     		asrs	r4, r4, r3
1434:src/display.c **** 	  v = extract_value(value, &sign);
 3248              		.loc 1 1434 5 view .LVU980
 3249 003a 14F00104 		ands	r4, r4, #1
 3250 003e 40F0F380 		bne	.L380
1451:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3251              		.loc 1 1451 4 is_stmt 1 view .LVU981
1451:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3252              		.loc 1 1451 7 is_stmt 0 view .LVU982
ARM GAS  /tmp/ccKZqSeG.s 			page 134


 3253 0042 BBF13F0F 		cmp	fp, #63
 3254 0046 17DC     		bgt	.L310
 3255              	.LBB342:
1452:src/display.c **** 	    vs &= mask;
 3256              		.loc 1 1452 6 is_stmt 1 view .LVU983
1452:src/display.c **** 	    vs &= mask;
 3257              		.loc 1 1452 38 is_stmt 0 view .LVU984
 3258 0048 0121     		movs	r1, #1
 3259 004a ABF1200C 		sub	ip, fp, #32
 3260 004e CBF12000 		rsb	r0, fp, #32
 3261 0052 21FA00F0 		lsr	r0, r1, r0
 3262 0056 01FA0CF3 		lsl	r3, r1, ip
 3263 005a 01FA0BF2 		lsl	r2, r1, fp
 3264 005e 0343     		orrs	r3, r3, r0
 3265              	.LVL357:
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3266              		.loc 1 1453 6 is_stmt 1 view .LVU985
1452:src/display.c **** 	    vs &= mask;
 3267              		.loc 1 1452 26 is_stmt 0 view .LVU986
 3268 0060 12F1FF30 		adds	r0, r2, #-1
 3269 0064 43F1FF31 		adc	r1, r3, #-1
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3270              		.loc 1 1453 9 view .LVU987
 3271 0068 3040     		ands	r0, r0, r6
 3272 006a 3940     		ands	r1, r1, r7
 3273              	.LVL358:
1454:src/display.c **** 	      vs |= ~mask;
 3274              		.loc 1 1454 9 view .LVU988
 3275 006c BAF10A0F 		cmp	r10, #10
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3276              		.loc 1 1453 9 view .LVU989
 3277 0070 0646     		mov	r6, r0
 3278              	.LVL359:
1453:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3279              		.loc 1 1453 9 view .LVU990
 3280 0072 0F46     		mov	r7, r1
1454:src/display.c **** 	      vs |= ~mask;
 3281              		.loc 1 1454 6 is_stmt 1 view .LVU991
1454:src/display.c **** 	      vs |= ~mask;
 3282              		.loc 1 1454 9 is_stmt 0 view .LVU992
 3283 0074 00F03D81 		beq	.L381
 3284              	.LVL360:
 3285              	.L310:
1454:src/display.c **** 	      vs |= ~mask;
 3286              		.loc 1 1454 9 view .LVU993
 3287              	.LBE342:
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3288              		.loc 1 1458 4 is_stmt 1 view .LVU994
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3289              		.loc 1 1458 8 is_stmt 0 view .LVU995
 3290 0078 B54B     		ldr	r3, .L388+8
 3291 007a 1B68     		ldr	r3, [r3]
 3292 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3293              		.loc 1 1458 7 view .LVU996
 3294 0080 9A07     		lsls	r2, r3, #30
 3295 0082 41D5     		bpl	.L341
ARM GAS  /tmp/ccKZqSeG.s 			page 135


1461:src/display.c **** 	    v = (unsigned long long int)vs;
 3296              		.loc 1 1461 11 is_stmt 1 view .LVU997
 3297              	.LBB343:
1469:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3298              		.loc 1 1469 6 view .LVU998
1470:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3299              		.loc 1 1470 6 view .LVU999
1470:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3300              		.loc 1 1470 25 is_stmt 0 view .LVU1000
 3301 0084 4FEA5A02 		lsr	r2, r10, #1
 3302              	.LVL361:
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 3303              		.loc 1 1471 6 is_stmt 1 view .LVU1001
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 3304              		.loc 1 1471 43 is_stmt 0 view .LVU1002
 3305 0088 12F00A0F 		tst	r2, #10
 3306 008c 14BF     		ite	ne
 3307 008e 0123     		movne	r3, #1
 3308 0090 0023     		moveq	r3, #0
1471:src/display.c **** 	    v = (unsigned long long int)vs;
 3309              		.loc 1 1471 70 view .LVU1003
 3310 0092 12F00C0F 		tst	r2, #12
 3311 0096 18BF     		it	ne
 3312 0098 43F00203 		orrne	r3, r3, #2
 3313              	.LVL362:
 3314              	.L316:
1472:src/display.c **** 
 3315              		.loc 1 1472 6 is_stmt 1 discriminator 4 view .LVU1004
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3316              		.loc 1 1474 14 is_stmt 0 discriminator 4 view .LVU1005
 3317 009c 0BEB0308 		add	r8, fp, r3
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3318              		.loc 1 1474 27 discriminator 4 view .LVU1006
 3319 00a0 0133     		adds	r3, r3, #1
 3320              	.LVL363:
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3321              		.loc 1 1474 21 discriminator 4 view .LVU1007
 3322 00a2 B8FBF3F8 		udiv	r8, r8, r3
1475:src/display.c **** 	      const int r = v % b;
 3323              		.loc 1 1475 6 discriminator 4 view .LVU1008
 3324 00a6 B8F1000F 		cmp	r8, #0
1472:src/display.c **** 
 3325              		.loc 1 1472 8 discriminator 4 view .LVU1009
 3326 00aa 3046     		mov	r0, r6
 3327 00ac 3946     		mov	r1, r7
 3328              	.LVL364:
1474:src/display.c **** 	    for (i=0; i<n; i++) {
 3329              		.loc 1 1474 6 is_stmt 1 discriminator 4 view .LVU1010
1475:src/display.c **** 	      const int r = v % b;
 3330              		.loc 1 1475 6 discriminator 4 view .LVU1011
1475:src/display.c **** 	      const int r = v % b;
 3331              		.loc 1 1475 16 discriminator 4 view .LVU1012
1475:src/display.c **** 	      const int r = v % b;
 3332              		.loc 1 1475 6 is_stmt 0 discriminator 4 view .LVU1013
 3333 00ae 40F38081 		ble	.L342
 3334 00b2 05AC     		add	r4, sp, #20
 3335 00b4 DFF8A4B2 		ldr	fp, .L388+20
ARM GAS  /tmp/ccKZqSeG.s 			page 136


 3336              	.LVL365:
1475:src/display.c **** 	      const int r = v % b;
 3337              		.loc 1 1475 6 discriminator 4 view .LVU1014
 3338 00b8 08EB0406 		add	r6, r8, r4
 3339              	.LVL366:
 3340              	.L317:
 3341              	.LBB344:
1476:src/display.c **** 	      v /= b;
 3342              		.loc 1 1476 8 is_stmt 1 discriminator 3 view .LVU1015
 3343 00bc 5246     		mov	r2, r10
 3344 00be 0023     		movs	r3, #0
 3345 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3346              	.LVL367:
1477:src/display.c **** 	      buf[i] = DIGITS[r];
 3347              		.loc 1 1477 8 discriminator 3 view .LVU1016
1478:src/display.c **** 	    }
 3348              		.loc 1 1478 15 is_stmt 0 discriminator 3 view .LVU1017
 3349 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3350 00c8 04F8013B 		strb	r3, [r4], #1
 3351              	.LVL368:
1478:src/display.c **** 	    }
 3352              		.loc 1 1478 8 is_stmt 1 discriminator 3 view .LVU1018
 3353              	.LBE344:
1475:src/display.c **** 	      const int r = v % b;
 3354              		.loc 1 1475 21 discriminator 3 view .LVU1019
1475:src/display.c **** 	      const int r = v % b;
 3355              		.loc 1 1475 16 discriminator 3 view .LVU1020
1475:src/display.c **** 	      const int r = v % b;
 3356              		.loc 1 1475 6 is_stmt 0 discriminator 3 view .LVU1021
 3357 00cc B442     		cmp	r4, r6
 3358 00ce F5D1     		bne	.L317
 3359 00d0 08F1FF31 		add	r1, r8, #-1
 3360              	.LVL369:
1475:src/display.c **** 	      const int r = v % b;
 3361              		.loc 1 1475 6 view .LVU1022
 3362 00d4 4446     		mov	r4, r8
 3363              	.LVL370:
 3364              	.L309:
1475:src/display.c **** 	      const int r = v % b;
 3365              		.loc 1 1475 6 view .LVU1023
 3366              	.LBE343:
1488:src/display.c **** 	if (res) {
 3367              		.loc 1 1488 2 is_stmt 1 view .LVU1024
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3368              		.loc 1 1489 2 view .LVU1025
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3369              		.loc 1 1489 5 is_stmt 0 view .LVU1026
 3370 00d6 002D     		cmp	r5, #0
 3371 00d8 3ED0     		beq	.L318
 3372              	.LVL371:
 3373              	.L382:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3374              		.loc 1 1490 4 is_stmt 1 view .LVU1027
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3375              		.loc 1 1490 7 is_stmt 0 view .LVU1028
 3376 00da 049B     		ldr	r3, [sp, #16]
 3377 00dc 13B1     		cbz	r3, .L319
ARM GAS  /tmp/ccKZqSeG.s 			page 137


1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3378              		.loc 1 1490 14 is_stmt 1 discriminator 1 view .LVU1029
 3379              	.LVL372:
1490:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3380              		.loc 1 1490 21 is_stmt 0 discriminator 1 view .LVU1030
 3381 00de 2D23     		movs	r3, #45
 3382 00e0 05F8013B 		strb	r3, [r5], #1
 3383              	.LVL373:
 3384              	.L319:
1491:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3385              		.loc 1 1491 4 is_stmt 1 view .LVU1031
1491:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3386              		.loc 1 1491 7 is_stmt 0 view .LVU1032
 3387 00e4 0D2C     		cmp	r4, #13
 3388 00e6 00F3E980 		bgt	.L320
1498:src/display.c **** 	      *res++ = buf[i];
 3389              		.loc 1 1498 12 is_stmt 1 view .LVU1033
 3390              	.LVL374:
1498:src/display.c **** 	      *res++ = buf[i];
 3391              		.loc 1 1498 12 is_stmt 0 view .LVU1034
 3392 00ea 481C     		adds	r0, r1, #1
 3393 00ec 09D0     		beq	.L296
 3394 00ee 0131     		adds	r1, r1, #1
 3395 00f0 05AA     		add	r2, sp, #20
 3396 00f2 013D     		subs	r5, r5, #1
 3397 00f4 1144     		add	r1, r1, r2
 3398              	.LVL375:
 3399              	.L323:
1499:src/display.c **** 	  }
 3400              		.loc 1 1499 8 is_stmt 1 view .LVU1035
1499:src/display.c **** 	  }
 3401              		.loc 1 1499 15 is_stmt 0 view .LVU1036
 3402 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3403              	.LVL376:
1499:src/display.c **** 	  }
 3404              		.loc 1 1499 15 view .LVU1037
 3405 00fa 05F8013F 		strb	r3, [r5, #1]!
 3406              	.LVL377:
1498:src/display.c **** 	      *res++ = buf[i];
 3407              		.loc 1 1498 12 is_stmt 1 view .LVU1038
1498:src/display.c **** 	      *res++ = buf[i];
 3408              		.loc 1 1498 12 is_stmt 0 view .LVU1039
 3409 00fe 9142     		cmp	r1, r2
 3410 0100 F9D1     		bne	.L323
 3411              	.LVL378:
 3412              	.L296:
1546:src/display.c **** 
 3413              		.loc 1 1546 7 view .LVU1040
 3414 0102 17B0     		add	sp, sp, #92
 3415              		.cfi_remember_state
 3416              		.cfi_def_cfa_offset 36
 3417              		@ sp needed
 3418 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3419              	.LVL379:
 3420              	.L341:
 3421              		.cfi_restore_state
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
ARM GAS  /tmp/ccKZqSeG.s 			page 138


 3422              		.loc 1 1458 25 discriminator 1 view .LVU1041
 3423 0108 56EA0703 		orrs	r3, r6, r7
 3424 010c 00F0C480 		beq	.L304
1461:src/display.c **** 	    v = (unsigned long long int)vs;
 3425              		.loc 1 1461 11 is_stmt 1 view .LVU1042
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3426              		.loc 1 1462 6 view .LVU1043
 3427 0110 DFF848B2 		ldr	fp, .L388+20
 3428              	.LVL380:
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3429              		.loc 1 1462 6 is_stmt 0 view .LVU1044
 3430 0114 CDF800A0 		str	r10, [sp]
 3431 0118 0023     		movs	r3, #0
1462:src/display.c **** 	    for (i=0; v != 0; i++) {
 3432              		.loc 1 1462 8 view .LVU1045
 3433 011a B046     		mov	r8, r6
 3434 011c D946     		mov	r9, fp
 3435 011e 3E46     		mov	r6, r7
1463:src/display.c **** 	      const int r = v % b;
 3436              		.loc 1 1463 6 is_stmt 1 view .LVU1046
 3437              	.LVL381:
1463:src/display.c **** 	      const int r = v % b;
 3438              		.loc 1 1463 16 view .LVU1047
 3439 0120 9B46     		mov	fp, r3
 3440 0122 05AF     		add	r7, sp, #20
 3441              	.LVL382:
 3442              	.L315:
 3443              	.LBB345:
1464:src/display.c **** 	      v /= b;
 3444              		.loc 1 1464 8 discriminator 3 view .LVU1048
 3445 0124 4046     		mov	r0, r8
 3446 0126 3146     		mov	r1, r6
 3447 0128 5246     		mov	r2, r10
 3448 012a 5B46     		mov	r3, fp
 3449 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3450              	.LVL383:
 3451 0130 3346     		mov	r3, r6
 3452 0132 9446     		mov	ip, r2
 3453              	.LVL384:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3454              		.loc 1 1465 8 discriminator 3 view .LVU1049
 3455              	.LBE345:
1463:src/display.c **** 	      const int r = v % b;
 3456              		.loc 1 1463 6 is_stmt 0 discriminator 3 view .LVU1050
 3457 0134 5B45     		cmp	r3, fp
 3458 0136 4246     		mov	r2, r8
 3459              	.LVL385:
 3460              	.LBB346:
1466:src/display.c **** 	    }
 3461              		.loc 1 1466 15 discriminator 3 view .LVU1051
 3462 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3463              	.LVL386:
1466:src/display.c **** 	    }
 3464              		.loc 1 1466 15 discriminator 3 view .LVU1052
 3465 013c 07F801CB 		strb	ip, [r7], #1
 3466              	.LBE346:
1463:src/display.c **** 	      const int r = v % b;
ARM GAS  /tmp/ccKZqSeG.s 			page 139


 3467              		.loc 1 1463 6 discriminator 3 view .LVU1053
 3468 0140 08BF     		it	eq
 3469 0142 5245     		cmpeq	r2, r10
 3470              	.LBB347:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3471              		.loc 1 1465 10 discriminator 3 view .LVU1054
 3472 0144 0E46     		mov	r6, r1
 3473              	.LVL387:
1466:src/display.c **** 	    }
 3474              		.loc 1 1466 8 is_stmt 1 discriminator 3 view .LVU1055
 3475              	.LBE347:
1463:src/display.c **** 	      const int r = v % b;
 3476              		.loc 1 1463 24 discriminator 3 view .LVU1056
 3477              	.LBB348:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3478              		.loc 1 1465 10 is_stmt 0 discriminator 3 view .LVU1057
 3479 0146 8046     		mov	r8, r0
 3480 0148 2146     		mov	r1, r4
 3481              	.LVL388:
1465:src/display.c **** 	      buf[i] = DIGITS[r];
 3482              		.loc 1 1465 10 discriminator 3 view .LVU1058
 3483              	.LBE348:
1463:src/display.c **** 	      const int r = v % b;
 3484              		.loc 1 1463 25 discriminator 3 view .LVU1059
 3485 014a 04F10104 		add	r4, r4, #1
 3486              	.LVL389:
1463:src/display.c **** 	      const int r = v % b;
 3487              		.loc 1 1463 16 is_stmt 1 discriminator 3 view .LVU1060
1463:src/display.c **** 	      const int r = v % b;
 3488              		.loc 1 1463 6 is_stmt 0 discriminator 3 view .LVU1061
 3489 014e E9D2     		bcs	.L315
 3490 0150 DDF800A0 		ldr	r10, [sp]
 3491              	.LVL390:
1488:src/display.c **** 	if (res) {
 3492              		.loc 1 1488 2 is_stmt 1 view .LVU1062
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3493              		.loc 1 1489 2 view .LVU1063
1489:src/display.c **** 	  if (sign) *res++ = '-';
 3494              		.loc 1 1489 5 is_stmt 0 view .LVU1064
 3495 0154 002D     		cmp	r5, #0
 3496 0156 C0D1     		bne	.L382
 3497              	.LVL391:
 3498              	.L318:
 3499              	.LBB349:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3500              		.loc 1 1517 4 is_stmt 1 view .LVU1065
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3501              		.loc 1 1517 33 is_stmt 0 view .LVU1066
 3502 0158 BAF1020F 		cmp	r10, #2
 3503 015c 00F0F080 		beq	.L383
 3504              	.LVL392:
1518:src/display.c **** 	    : b == 16 ? 2 : 3;
 3505              		.loc 1 1518 4 is_stmt 1 view .LVU1067
1518:src/display.c **** 	    : b == 16 ? 2 : 3;
 3506              		.loc 1 1518 30 is_stmt 0 view .LVU1068
 3507 0160 BAF1040F 		cmp	r10, #4
 3508 0164 00F01F81 		beq	.L384
ARM GAS  /tmp/ccKZqSeG.s 			page 140


1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3509              		.loc 1 1517 33 view .LVU1069
 3510 0168 BAF1100F 		cmp	r10, #16
 3511 016c 0CBF     		ite	eq
 3512 016e 4FF0020A 		moveq	r10, #2
 3513 0172 4FF0030A 		movne	r10, #3
 3514 0176 0C26     		movs	r6, #12
 3515              	.LVL393:
 3516              	.L325:
1520:src/display.c **** #endif
 3517              		.loc 1 1520 4 is_stmt 1 view .LVU1070
 3518 0178 0091     		str	r1, [sp]
 3519 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3520              	.LVL394:
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3521              		.loc 1 1522 4 view .LVU1071
1523:src/display.c **** 	    State2.window = 0;
 3522              		.loc 1 1523 26 is_stmt 0 view .LVU1072
 3523 017e 724B     		ldr	r3, .L388
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3524              		.loc 1 1522 17 view .LVU1073
 3525 0180 744A     		ldr	r2, .L388+12
1523:src/display.c **** 	    State2.window = 0;
 3526              		.loc 1 1523 26 view .LVU1074
 3527 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3528              		.loc 1 1522 27 view .LVU1075
 3529 0184 0099     		ldr	r1, [sp]
 3530 0186 91FBF6F1 		sdiv	r1, r1, r6
1523:src/display.c **** 	    State2.window = 0;
 3531              		.loc 1 1523 8 view .LVU1076
 3532 018a C3F3C207 		ubfx	r7, r3, #3, #3
1523:src/display.c **** 	    State2.window = 0;
 3533              		.loc 1 1523 7 view .LVU1077
 3534 018e B942     		cmp	r1, r7
1522:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3535              		.loc 1 1522 17 view .LVU1078
 3536 0190 1160     		str	r1, [r2]
1523:src/display.c **** 	    State2.window = 0;
 3537              		.loc 1 1523 4 is_stmt 1 view .LVU1079
1523:src/display.c **** 	    State2.window = 0;
 3538              		.loc 1 1523 7 is_stmt 0 view .LVU1080
 3539 0192 C0F2F680 		blt	.L327
 3540 0196 06FB07F7 		mul	r7, r6, r7
 3541              	.L328:
1525:src/display.c **** 
 3542              		.loc 1 1525 4 is_stmt 1 view .LVU1081
1525:src/display.c **** 
 3543              		.loc 1 1525 11 is_stmt 0 view .LVU1082
 3544 019a 16AB     		add	r3, sp, #88
 3545 019c 16AA     		add	r2, sp, #88
 3546 019e 1C44     		add	r4, r4, r3
 3547              	.LVL395:
1525:src/display.c **** 
 3548              		.loc 1 1525 11 view .LVU1083
 3549 01a0 D519     		adds	r5, r2, r7
 3550 01a2 0023     		movs	r3, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 141


 3551 01a4 453D     		subs	r5, r5, #69
 3552 01a6 04F8443C 		strb	r3, [r4, #-68]
1527:src/display.c **** 	  for (k = 0; k < 12; k++)
 3553              		.loc 1 1527 4 is_stmt 1 view .LVU1084
 3554              	.LVL396:
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3555              		.loc 1 1528 4 view .LVU1085
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3556              		.loc 1 1528 16 view .LVU1086
1525:src/display.c **** 
 3557              		.loc 1 1525 11 is_stmt 0 view .LVU1087
 3558 01aa 2A46     		mov	r2, r5
 3559              	.LVL397:
 3560              	.L330:
1529:src/display.c **** 	      break;
 3561              		.loc 1 1529 6 is_stmt 1 view .LVU1088
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3562              		.loc 1 1528 24 view .LVU1089
1529:src/display.c **** 	      break;
 3563              		.loc 1 1529 9 is_stmt 0 view .LVU1090
 3564 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3565 01b0 0029     		cmp	r1, #0
 3566 01b2 00F0EC80 		beq	.L329
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3567              		.loc 1 1528 25 discriminator 2 view .LVU1091
 3568 01b6 0133     		adds	r3, r3, #1
 3569              	.LVL398:
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3570              		.loc 1 1528 16 is_stmt 1 discriminator 2 view .LVU1092
1528:src/display.c **** 	    if (buf[j + k] == '\0')
 3571              		.loc 1 1528 4 is_stmt 0 discriminator 2 view .LVU1093
 3572 01b8 0C2B     		cmp	r3, #12
 3573 01ba F7D1     		bne	.L330
1531:src/display.c **** 	    int ch = buf[j++];
 3574              		.loc 1 1531 4 view .LVU1094
 3575 01bc 4FF00B08 		mov	r8, #11
 3576              	.LVL399:
 3577              	.L331:
1531:src/display.c **** 	    int ch = buf[j++];
 3578              		.loc 1 1531 4 view .LVU1095
 3579 01c0 0137     		adds	r7, r7, #1
 3580 01c2 4744     		add	r7, r7, r8
 3581 01c4 4446     		mov	r4, r8
 3582 01c6 4FF0630B 		mov	fp, #99
 3583 01ca 09E0     		b	.L336
 3584              	.LVL400:
 3585              	.L385:
 3586              	.LBB350:
1537:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3587              		.loc 1 1537 8 view .LVU1096
 3588 01cc 624B     		ldr	r3, .L388+16
 3589 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3590              	.LVL401:
 3591              	.LBB351:
 3592              	.LBI351:
 308:src/display.c ****   if (sep == SEP_NONE)
 3593              		.loc 1 308 14 is_stmt 1 view .LVU1097
ARM GAS  /tmp/ccKZqSeG.s 			page 142


 3594              	.LBB352:
 309:src/display.c ****     return res;
 3595              		.loc 1 309 3 view .LVU1098
 309:src/display.c ****     return res;
 3596              		.loc 1 309 6 is_stmt 0 view .LVU1099
 3597 01d0 09B1     		cbz	r1, .L334
 309:src/display.c ****     return res;
 3598              		.loc 1 309 6 view .LVU1100
 3599 01d2 FFF7FEFF 		bl	set_separator.part.0
 3600              	.LVL402:
 3601              	.L334:
 309:src/display.c ****     return res;
 3602              		.loc 1 309 6 view .LVU1101
 3603              	.LBE352:
 3604              	.LBE351:
1538:src/display.c **** 	  }
 3605              		.loc 1 1538 6 is_stmt 1 discriminator 2 view .LVU1102
 3606              	.LBE350:
1531:src/display.c **** 	    int ch = buf[j++];
 3607              		.loc 1 1531 4 is_stmt 0 discriminator 2 view .LVU1103
 3608 01d6 013C     		subs	r4, r4, #1
1531:src/display.c **** 	    int ch = buf[j++];
 3609              		.loc 1 1531 4 discriminator 2 view .LVU1104
 3610 01d8 621C     		adds	r2, r4, #1
 3611              	.LBB355:
1538:src/display.c **** 	  }
 3612              		.loc 1 1538 10 discriminator 2 view .LVU1105
 3613 01da ABF1090B 		sub	fp, fp, #9
 3614              	.LVL403:
1538:src/display.c **** 	  }
 3615              		.loc 1 1538 10 discriminator 2 view .LVU1106
 3616              	.LBE355:
1531:src/display.c **** 	    int ch = buf[j++];
 3617              		.loc 1 1531 24 is_stmt 1 discriminator 2 view .LVU1107
1531:src/display.c **** 	    int ch = buf[j++];
 3618              		.loc 1 1531 14 discriminator 2 view .LVU1108
1531:src/display.c **** 	    int ch = buf[j++];
 3619              		.loc 1 1531 4 is_stmt 0 discriminator 2 view .LVU1109
 3620 01de 16D0     		beq	.L340
 3621              	.LVL404:
 3622              	.L336:
 3623              	.LBB356:
1532:src/display.c **** 	    if (i >= shift)
 3624              		.loc 1 1532 6 is_stmt 1 view .LVU1110
1534:src/display.c **** 	    set_dig(dig, ch);
 3625              		.loc 1 1534 8 view .LVU1111
1532:src/display.c **** 	    if (i >= shift)
 3626              		.loc 1 1532 10 is_stmt 0 view .LVU1112
 3627 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1533:src/display.c **** 	      ch -= 030;
 3628              		.loc 1 1533 9 view .LVU1113
 3629 01e4 A8EB0402 		sub	r2, r8, r4
 3630 01e8 B242     		cmp	r2, r6
 3631 01ea A7EB0409 		sub	r9, r7, r4
 3632              	.LVL405:
1533:src/display.c **** 	      ch -= 030;
 3633              		.loc 1 1533 6 is_stmt 1 view .LVU1114
ARM GAS  /tmp/ccKZqSeG.s 			page 143


1535:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3634              		.loc 1 1535 6 is_stmt 0 view .LVU1115
 3635 01ee 5846     		mov	r0, fp
1534:src/display.c **** 	    set_dig(dig, ch);
 3636              		.loc 1 1534 11 view .LVU1116
 3637 01f0 A8BF     		it	ge
 3638 01f2 1839     		subge	r1, r1, #24
 3639              	.LVL406:
1535:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3640              		.loc 1 1535 6 is_stmt 1 view .LVU1117
 3641 01f4 FFF7FEFF 		bl	set_dig
 3642              	.LVL407:
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3643              		.loc 1 1536 6 view .LVU1118
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3644              		.loc 1 1536 13 is_stmt 0 view .LVU1119
 3645 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3646 01fc 0AFB1393 		mls	r3, r10, r3, r9
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3647              		.loc 1 1536 9 view .LVU1120
 3648 0200 002B     		cmp	r3, #0
 3649 0202 E8D1     		bne	.L334
1537:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3650              		.loc 1 1537 8 is_stmt 1 discriminator 1 view .LVU1121
 3651              	.LBB354:
 3652              	.LBB353:
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3653              		.loc 1 311 3 discriminator 1 view .LVU1122
 3654 0204 5846     		mov	r0, fp
 3655              	.LBE353:
 3656              	.LBE354:
1536:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3657              		.loc 1 1536 27 is_stmt 0 discriminator 1 view .LVU1123
 3658 0206 002C     		cmp	r4, #0
 3659 0208 E0D1     		bne	.L385
1538:src/display.c **** 	  }
 3660              		.loc 1 1538 6 is_stmt 1 view .LVU1124
1538:src/display.c **** 	  }
 3661              		.loc 1 1538 10 is_stmt 0 view .LVU1125
 3662 020a ABF1090B 		sub	fp, fp, #9
 3663              	.LVL408:
1538:src/display.c **** 	  }
 3664              		.loc 1 1538 10 view .LVU1126
 3665              	.LBE356:
1531:src/display.c **** 	    int ch = buf[j++];
 3666              		.loc 1 1531 24 is_stmt 1 view .LVU1127
1531:src/display.c **** 	    int ch = buf[j++];
 3667              		.loc 1 1531 14 view .LVU1128
 3668              	.L340:
1540:src/display.c **** 	    if (dig >= 0)
 3669              		.loc 1 1540 4 view .LVU1129
1540:src/display.c **** 	    if (dig >= 0)
 3670              		.loc 1 1540 7 is_stmt 0 view .LVU1130
 3671 020e 049B     		ldr	r3, [sp, #16]
 3672 0210 002B     		cmp	r3, #0
 3673 0212 3FF476AF 		beq	.L296
1541:src/display.c **** 	      set_dig(dig, '-');
ARM GAS  /tmp/ccKZqSeG.s 			page 144


 3674              		.loc 1 1541 6 is_stmt 1 view .LVU1131
1541:src/display.c **** 	      set_dig(dig, '-');
 3675              		.loc 1 1541 9 is_stmt 0 view .LVU1132
 3676 0216 BBF1000F 		cmp	fp, #0
 3677 021a C0F2C680 		blt	.L386
 3678              	.LVL409:
 3679              	.L339:
1542:src/display.c **** 	    else	SET_MANT_SIGN;
 3680              		.loc 1 1542 8 is_stmt 1 view .LVU1133
 3681 021e 5846     		mov	r0, fp
 3682 0220 2D21     		movs	r1, #45
 3683 0222 FFF7FEFF 		bl	set_dig
 3684              	.LVL410:
 3685 0226 6CE7     		b	.L296
 3686              	.LVL411:
 3687              	.L380:
1542:src/display.c **** 	    else	SET_MANT_SIGN;
 3688              		.loc 1 1542 8 is_stmt 0 view .LVU1134
 3689              	.LBE349:
1435:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3690              		.loc 1 1435 4 is_stmt 1 view .LVU1135
1435:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3691              		.loc 1 1435 8 is_stmt 0 view .LVU1136
 3692 0228 04AA     		add	r2, sp, #16
 3693 022a 3046     		mov	r0, r6
 3694 022c 3946     		mov	r1, r7
 3695 022e FFF7FEFF 		bl	extract_value
 3696              	.LVL412:
 3697 0232 8046     		mov	r8, r0
 3698 0234 8946     		mov	r9, r1
 3699              	.LVL413:
1436:src/display.c **** 	    v = value;
 3700              		.loc 1 1436 4 is_stmt 1 view .LVU1137
1436:src/display.c **** 	    v = value;
 3701              		.loc 1 1436 8 is_stmt 0 view .LVU1138
 3702 0236 FFF7FEFF 		bl	int_mode
 3703              	.LVL414:
1436:src/display.c **** 	    v = value;
 3704              		.loc 1 1436 7 view .LVU1139
 3705 023a 38BB     		cbnz	r0, .L301
1436:src/display.c **** 	    v = value;
 3706              		.loc 1 1436 33 discriminator 1 view .LVU1140
 3707 023c 049B     		ldr	r3, [sp, #16]
 3708 023e 012B     		cmp	r3, #1
 3709 0240 24D1     		bne	.L301
1436:src/display.c **** 	    v = value;
 3710              		.loc 1 1436 46 discriminator 2 view .LVU1141
 3711 0242 58EA0903 		orrs	r3, r8, r9
 3712 0246 00F08B80 		beq	.L387
 3713              	.LVL415:
 3714              	.L302:
1436:src/display.c **** 	    v = value;
 3715              		.loc 1 1436 46 discriminator 2 view .LVU1142
 3716 024a DFF810B1 		ldr	fp, .L388+20
 3717              	.LVL416:
1411:src/display.c **** 	const int ws = word_size();
 3718              		.loc 1 1411 67 discriminator 3 view .LVU1143
ARM GAS  /tmp/ccKZqSeG.s 			page 145


 3719 024e 0395     		str	r5, [sp, #12]
 3720 0250 05AB     		add	r3, sp, #20
 3721 0252 5D46     		mov	r5, fp
 3722              	.LVL417:
1411:src/display.c **** 	const int ws = word_size();
 3723              		.loc 1 1411 67 discriminator 3 view .LVU1144
 3724 0254 5646     		mov	r6, r10
 3725 0256 0027     		movs	r7, #0
 3726 0258 0024     		movs	r4, #0
 3727 025a 9B46     		mov	fp, r3
 3728              	.LVL418:
 3729              	.L308:
 3730              	.LBB359:
1445:src/display.c **** 	      v /= b;
 3731              		.loc 1 1445 8 is_stmt 1 discriminator 3 view .LVU1145
 3732 025c 4046     		mov	r0, r8
 3733 025e 4946     		mov	r1, r9
 3734 0260 3246     		mov	r2, r6
 3735 0262 3B46     		mov	r3, r7
 3736 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3737              	.LVL419:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3738              		.loc 1 1446 8 discriminator 3 view .LVU1146
 3739 0268 CDE90089 		strd	r8, [sp]
1447:src/display.c **** 	    }
 3740              		.loc 1 1447 15 is_stmt 0 discriminator 3 view .LVU1147
 3741 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3742 026e 0BF8013B 		strb	r3, [fp], #1
 3743              	.LBE359:
1444:src/display.c **** 	      const int r = v % b;
 3744              		.loc 1 1444 6 discriminator 3 view .LVU1148
 3745 0272 DDE90023 		ldrd	r2, [sp]
 3746              	.LVL420:
1444:src/display.c **** 	      const int r = v % b;
 3747              		.loc 1 1444 6 discriminator 3 view .LVU1149
 3748 0276 BB42     		cmp	r3, r7
 3749 0278 08BF     		it	eq
 3750 027a B242     		cmpeq	r2, r6
 3751              	.LBB360:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3752              		.loc 1 1446 10 discriminator 3 view .LVU1150
 3753 027c 8946     		mov	r9, r1
 3754              	.LVL421:
1447:src/display.c **** 	    }
 3755              		.loc 1 1447 8 is_stmt 1 discriminator 3 view .LVU1151
 3756              	.LBE360:
1444:src/display.c **** 	      const int r = v % b;
 3757              		.loc 1 1444 24 discriminator 3 view .LVU1152
 3758              	.LBB361:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3759              		.loc 1 1446 10 is_stmt 0 discriminator 3 view .LVU1153
 3760 027e 8046     		mov	r8, r0
 3761 0280 2146     		mov	r1, r4
 3762              	.LVL422:
1446:src/display.c **** 	      buf[i] = DIGITS[r];
 3763              		.loc 1 1446 10 discriminator 3 view .LVU1154
 3764              	.LBE361:
ARM GAS  /tmp/ccKZqSeG.s 			page 146


1444:src/display.c **** 	      const int r = v % b;
 3765              		.loc 1 1444 25 discriminator 3 view .LVU1155
 3766 0282 04F10104 		add	r4, r4, #1
 3767              	.LVL423:
1444:src/display.c **** 	      const int r = v % b;
 3768              		.loc 1 1444 16 is_stmt 1 discriminator 3 view .LVU1156
1444:src/display.c **** 	      const int r = v % b;
 3769              		.loc 1 1444 6 is_stmt 0 discriminator 3 view .LVU1157
 3770 0286 E9D2     		bcs	.L308
 3771 0288 039D     		ldr	r5, [sp, #12]
 3772 028a 24E7     		b	.L309
 3773              	.LVL424:
 3774              	.L301:
1438:src/display.c **** 	    if (sign)
 3775              		.loc 1 1438 4 is_stmt 1 view .LVU1158
1438:src/display.c **** 	    if (sign)
 3776              		.loc 1 1438 7 is_stmt 0 view .LVU1159
 3777 028c 58EA0903 		orrs	r3, r8, r9
 3778 0290 DBD1     		bne	.L302
1439:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3779              		.loc 1 1439 6 is_stmt 1 view .LVU1160
1439:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3780              		.loc 1 1439 9 is_stmt 0 view .LVU1161
 3781 0292 049B     		ldr	r3, [sp, #16]
 3782 0294 002B     		cmp	r3, #0
 3783 0296 69D1     		bne	.L303
 3784              	.LVL425:
 3785              	.L304:
1441:src/display.c **** 	    return;
 3786              		.loc 1 1441 6 is_stmt 1 view .LVU1162
 3787              	.LBB362:
 3788              	.LBI362:
 339:src/display.c ****   if (res) *res++ = ch;
 3789              		.loc 1 339 14 view .LVU1163
 3790              	.LBB363:
 340:src/display.c ****   else	set_dig(base, ch);
 3791              		.loc 1 340 3 view .LVU1164
 340:src/display.c ****   else	set_dig(base, ch);
 3792              		.loc 1 340 6 is_stmt 0 view .LVU1165
 3793 0298 002D     		cmp	r5, #0
 3794 029a 6DD0     		beq	.L306
 3795              	.LVL426:
 3796              	.L305:
 340:src/display.c ****   else	set_dig(base, ch);
 3797              		.loc 1 340 12 is_stmt 1 view .LVU1166
 340:src/display.c ****   else	set_dig(base, ch);
 3798              		.loc 1 340 19 is_stmt 0 view .LVU1167
 3799 029c 3023     		movs	r3, #48
 3800 029e 2B70     		strb	r3, [r5]
 3801              	.LBE363:
 3802              	.LBE362:
1546:src/display.c **** 
 3803              		.loc 1 1546 7 view .LVU1168
 3804 02a0 17B0     		add	sp, sp, #92
 3805              		.cfi_remember_state
 3806              		.cfi_def_cfa_offset 36
 3807              		@ sp needed
ARM GAS  /tmp/ccKZqSeG.s 			page 147


 3808 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3809              	.LVL427:
 3810              	.L297:
 3811              		.cfi_restore_state
1426:src/display.c **** 	}
 3812              		.loc 1 1426 11 is_stmt 1 view .LVU1169
1426:src/display.c **** 	}
 3813              		.loc 1 1426 15 is_stmt 0 view .LVU1170
 3814 02a6 FFF7FEFF 		bl	int_base
 3815              	.LVL428:
1426:src/display.c **** 	}
 3816              		.loc 1 1426 15 view .LVU1171
 3817 02aa 8246     		mov	r10, r0
 3818              	.LVL429:
1426:src/display.c **** 	}
 3819              		.loc 1 1426 27 is_stmt 1 view .LVU1172
1429:src/display.c **** 	  IntMaxWindow = 0;
 3820              		.loc 1 1429 2 view .LVU1173
1429:src/display.c **** 	  IntMaxWindow = 0;
 3821              		.loc 1 1429 5 is_stmt 0 view .LVU1174
 3822 02ac 002D     		cmp	r5, #0
 3823 02ae 7FF4BFAE 		bne	.L299
 3824              	.LVL430:
 3825              	.L379:
1430:src/display.c **** 	  carry_overflow();
 3826              		.loc 1 1430 4 is_stmt 1 view .LVU1175
1430:src/display.c **** 	  carry_overflow();
 3827              		.loc 1 1430 17 is_stmt 0 view .LVU1176
 3828 02b2 284B     		ldr	r3, .L388+12
 3829 02b4 1D60     		str	r5, [r3]
1431:src/display.c **** 	}
 3830              		.loc 1 1431 4 is_stmt 1 view .LVU1177
 3831 02b6 FFF7FEFF 		bl	carry_overflow
 3832              	.LVL431:
 3833 02ba B9E6     		b	.L299
 3834              	.LVL432:
 3835              	.L320:
1492:src/display.c **** 	      *res++ = buf[i];
 3836              		.loc 1 1492 12 view .LVU1178
1492:src/display.c **** 	      *res++ = buf[i];
 3837              		.loc 1 1492 12 is_stmt 0 view .LVU1179
 3838 02bc 05AB     		add	r3, sp, #20
 3839 02be 5818     		adds	r0, r3, r1
1492:src/display.c **** 	      *res++ = buf[i];
 3840              		.loc 1 1492 24 view .LVU1180
 3841 02c0 A4F10D06 		sub	r6, r4, #13
 3842 02c4 6A1E     		subs	r2, r5, #1
 3843              	.LVL433:
 3844              	.L322:
1493:src/display.c **** 	    *res++ = '.';
 3845              		.loc 1 1493 8 is_stmt 1 view .LVU1181
1493:src/display.c **** 	    *res++ = '.';
 3846              		.loc 1 1493 20 is_stmt 0 view .LVU1182
 3847 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3848              	.LVL434:
1493:src/display.c **** 	    *res++ = '.';
 3849              		.loc 1 1493 15 view .LVU1183
ARM GAS  /tmp/ccKZqSeG.s 			page 148


 3850 02ca 02F8013F 		strb	r3, [r2, #1]!
 3851              	.LVL435:
1492:src/display.c **** 	      *res++ = buf[i];
 3852              		.loc 1 1492 12 is_stmt 1 view .LVU1184
1492:src/display.c **** 	      *res++ = buf[i];
 3853              		.loc 1 1492 12 is_stmt 0 view .LVU1185
 3854 02ce D343     		mvns	r3, r2
 3855 02d0 0B44     		add	r3, r3, r1
 3856 02d2 2B44     		add	r3, r3, r5
 3857 02d4 9E42     		cmp	r6, r3
 3858 02d6 F6DD     		ble	.L322
 3859 02d8 01F10E03 		add	r3, r1, #14
 3860 02dc 1C1B     		subs	r4, r3, r4
 3861              	.LVL436:
1492:src/display.c **** 	      *res++ = buf[i];
 3862              		.loc 1 1492 12 view .LVU1186
 3863 02de 8E42     		cmp	r6, r1
 3864 02e0 C8BF     		it	gt
 3865 02e2 0124     		movgt	r4, #1
 3866 02e4 2A19     		adds	r2, r5, r4
 3867              	.LVL437:
1494:src/display.c **** 	    *res++ = '.';
 3868              		.loc 1 1494 6 is_stmt 1 view .LVU1187
1494:src/display.c **** 	    *res++ = '.';
 3869              		.loc 1 1494 13 is_stmt 0 view .LVU1188
 3870 02e6 2E23     		movs	r3, #46
 3871 02e8 2B55     		strb	r3, [r5, r4]
1495:src/display.c **** 	  }
 3872              		.loc 1 1495 6 is_stmt 1 view .LVU1189
 3873              	.LVL438:
1495:src/display.c **** 	  }
 3874              		.loc 1 1495 13 is_stmt 0 view .LVU1190
 3875 02ea 5370     		strb	r3, [r2, #1]
1546:src/display.c **** 
 3876              		.loc 1 1546 7 view .LVU1191
 3877 02ec 17B0     		add	sp, sp, #92
 3878              		.cfi_remember_state
 3879              		.cfi_def_cfa_offset 36
 3880              		@ sp needed
 3881 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3882              	.LVL439:
 3883              	.L381:
 3884              		.cfi_restore_state
 3885              	.LBB365:
1454:src/display.c **** 	      vs |= ~mask;
 3886              		.loc 1 1454 38 discriminator 1 view .LVU1192
 3887 02f2 0BF1FF31 		add	r1, fp, #-1
1454:src/display.c **** 	      vs |= ~mask;
 3888              		.loc 1 1454 18 discriminator 1 view .LVU1193
 3889 02f6 CBF1210C 		rsb	ip, fp, #33
 3890 02fa C840     		lsrs	r0, r0, r1
 3891 02fc 07FA0CFC 		lsl	ip, r7, ip
 3892 0300 2039     		subs	r1, r1, #32
 3893 0302 40EA0C00 		orr	r0, r0, ip
 3894 0306 5CBF     		itt	pl
 3895 0308 47FA01F1 		asrpl	r1, r7, r1
 3896 030c 0843     		orrpl	r0, r0, r1
ARM GAS  /tmp/ccKZqSeG.s 			page 149


 3897 030e 00F00108 		and	r8, r0, #1
 3898 0312 4FF00009 		mov	r9, #0
 3899 0316 58EA0901 		orrs	r1, r8, r9
 3900 031a 08D0     		beq	.L311
1455:src/display.c **** 	  }
 3901              		.loc 1 1455 8 is_stmt 1 view .LVU1194
1455:src/display.c **** 	  }
 3902              		.loc 1 1455 11 is_stmt 0 view .LVU1195
 3903 031c 5042     		rsbs	r0, r2, #0
 3904 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3905 0322 40EA0602 		orr	r2, r0, r6
 3906              	.LVL440:
1455:src/display.c **** 	  }
 3907              		.loc 1 1455 11 view .LVU1196
 3908 0326 41EA0703 		orr	r3, r1, r7
 3909              	.LVL441:
1455:src/display.c **** 	  }
 3910              		.loc 1 1455 11 view .LVU1197
 3911 032a 1646     		mov	r6, r2
 3912              	.LVL442:
1455:src/display.c **** 	  }
 3913              		.loc 1 1455 11 view .LVU1198
 3914 032c 1F46     		mov	r7, r3
 3915              	.L311:
1455:src/display.c **** 	  }
 3916              		.loc 1 1455 11 view .LVU1199
 3917              	.LBE365:
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3918              		.loc 1 1458 4 is_stmt 1 view .LVU1200
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3919              		.loc 1 1458 8 is_stmt 0 view .LVU1201
 3920 032e 084B     		ldr	r3, .L388+8
 3921 0330 1B68     		ldr	r3, [r3]
 3922 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1458:src/display.c **** 	    set_dig_s(dig, '0', res);
 3923              		.loc 1 1458 7 view .LVU1202
 3924 0336 9B07     		lsls	r3, r3, #30
 3925 0338 7FF5E6AE 		bpl	.L341
 3926 033c 0223     		movs	r3, #2
 3927 033e ADE6     		b	.L316
 3928              	.LVL443:
 3929              	.L383:
 3930              	.LBB366:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3931              		.loc 1 1517 33 view .LVU1203
 3932 0340 0826     		movs	r6, #8
1519:src/display.c **** 	  set_separator_decimal_modes();
 3933              		.loc 1 1519 6 view .LVU1204
 3934 0342 4FF0040A 		mov	r10, #4
 3935 0346 17E7     		b	.L325
 3936              	.L389:
 3937              		.align	2
 3938              	.L388:
 3939 0348 00000000 		.word	StateWhileOn
 3940 034c 00000000 		.word	CSWTCH.370
 3941 0350 00000000 		.word	main_ram
 3942 0354 00000000 		.word	IntMaxWindow
ARM GAS  /tmp/ccKZqSeG.s 			page 150


 3943 0358 00000000 		.word	.LANCHOR0
 3944 035c 00000000 		.word	.LANCHOR9
 3945              	.LVL444:
 3946              	.L387:
1519:src/display.c **** 	  set_separator_decimal_modes();
 3947              		.loc 1 1519 6 view .LVU1205
 3948              	.LBE366:
1437:src/display.c **** 	  if (v == 0) {
 3949              		.loc 1 1437 6 is_stmt 1 view .LVU1206
1437:src/display.c **** 	  if (v == 0) {
 3950              		.loc 1 1437 8 is_stmt 0 view .LVU1207
 3951 0360 B046     		mov	r8, r6
 3952              	.LVL445:
1437:src/display.c **** 	  if (v == 0) {
 3953              		.loc 1 1437 8 view .LVU1208
 3954 0362 B946     		mov	r9, r7
 3955              	.LVL446:
1438:src/display.c **** 	    if (sign)
 3956              		.loc 1 1438 4 is_stmt 1 view .LVU1209
1438:src/display.c **** 	    if (sign)
 3957              		.loc 1 1438 7 is_stmt 0 view .LVU1210
 3958 0364 58EA0903 		orrs	r3, r8, r9
 3959 0368 7FF46FAF 		bne	.L302
 3960              	.LVL447:
 3961              	.L303:
1440:src/display.c **** 	    set_dig_s(dig, '0', res);
 3962              		.loc 1 1440 8 is_stmt 1 view .LVU1211
 3963              	.LBB367:
 3964              	.LBI367:
 339:src/display.c ****   if (res) *res++ = ch;
 3965              		.loc 1 339 14 view .LVU1212
 3966              	.LBB368:
 340:src/display.c ****   else	set_dig(base, ch);
 3967              		.loc 1 340 3 view .LVU1213
 340:src/display.c ****   else	set_dig(base, ch);
 3968              		.loc 1 340 6 is_stmt 0 view .LVU1214
 3969 036c 002D     		cmp	r5, #0
 3970 036e 95D1     		bne	.L305
 341:src/display.c ****   return res;
 3971              		.loc 1 341 8 is_stmt 1 view .LVU1215
 3972 0370 2D21     		movs	r1, #45
 3973 0372 5A20     		movs	r0, #90
 3974 0374 FFF7FEFF 		bl	set_dig
 3975              	.LVL448:
 341:src/display.c ****   return res;
 3976              		.loc 1 341 8 is_stmt 0 view .LVU1216
 3977              	.LBE368:
 3978              	.LBE367:
1441:src/display.c **** 	    return;
 3979              		.loc 1 1441 6 is_stmt 1 view .LVU1217
 3980              	.LBB369:
 339:src/display.c ****   if (res) *res++ = ch;
 3981              		.loc 1 339 14 view .LVU1218
 3982              	.LBB364:
 340:src/display.c ****   else	set_dig(base, ch);
 3983              		.loc 1 340 3 view .LVU1219
 3984              	.L306:
ARM GAS  /tmp/ccKZqSeG.s 			page 151


 341:src/display.c ****   return res;
 3985              		.loc 1 341 8 view .LVU1220
 3986 0378 3021     		movs	r1, #48
 3987 037a 6320     		movs	r0, #99
 3988 037c FFF7FEFF 		bl	set_dig
 3989              	.LVL449:
 3990 0380 BFE6     		b	.L296
 3991              	.LVL450:
 3992              	.L327:
 341:src/display.c ****   return res;
 3993              		.loc 1 341 8 is_stmt 0 view .LVU1221
 3994              	.LBE364:
 3995              	.LBE369:
 3996              	.LBB370:
1524:src/display.c **** 	  buf[i] = '\0';
 3997              		.loc 1 1524 6 is_stmt 1 view .LVU1222
1524:src/display.c **** 	  buf[i] = '\0';
 3998              		.loc 1 1524 20 is_stmt 0 view .LVU1223
 3999 0382 0D4A     		ldr	r2, .L390
 4000 0384 6FF3C503 		bfc	r3, #3, #3
 4001 0388 1375     		strb	r3, [r2, #20]
 4002 038a 0027     		movs	r7, #0
 4003 038c 05E7     		b	.L328
 4004              	.LVL451:
 4005              	.L329:
1531:src/display.c **** 	    int ch = buf[j++];
 4006              		.loc 1 1531 14 is_stmt 1 discriminator 1 view .LVU1224
1531:src/display.c **** 	    int ch = buf[j++];
 4007              		.loc 1 1531 4 is_stmt 0 discriminator 1 view .LVU1225
 4008 038e 03F1FF38 		add	r8, r3, #-1
 4009              	.LVL452:
1531:src/display.c **** 	    int ch = buf[j++];
 4010              		.loc 1 1531 4 discriminator 1 view .LVU1226
 4011 0392 002B     		cmp	r3, #0
 4012 0394 7FF414AF 		bne	.L331
1540:src/display.c **** 	    if (dig >= 0)
 4013              		.loc 1 1540 4 is_stmt 1 view .LVU1227
1540:src/display.c **** 	    if (dig >= 0)
 4014              		.loc 1 1540 7 is_stmt 0 view .LVU1228
 4015 0398 049B     		ldr	r3, [sp, #16]
 4016 039a 002B     		cmp	r3, #0
 4017 039c 3FF4B1AE 		beq	.L296
 4018 03a0 4FF0630B 		mov	fp, #99
 4019 03a4 3BE7     		b	.L339
 4020              	.LVL453:
 4021              	.L384:
1517:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 4022              		.loc 1 1517 33 view .LVU1229
 4023 03a6 0C26     		movs	r6, #12
 4024 03a8 E6E6     		b	.L325
 4025              	.LVL454:
 4026              	.L386:
1543:src/display.c **** 	  }
 4027              		.loc 1 1543 11 is_stmt 1 view .LVU1230
 4028              	.LBB357:
 4029              	.LBI357:
 244:src/display.c **** {
ARM GAS  /tmp/ccKZqSeG.s 			page 152


 4030              		.loc 1 244 13 view .LVU1231
 4031              	.LBB358:
 246:src/display.c **** }
 4032              		.loc 1 246 3 view .LVU1232
 4033 03aa 8120     		movs	r0, #129
 4034 03ac FFF7FEFF 		bl	set_dot
 4035              	.LVL455:
 247:src/display.c **** 
 4036              		.loc 1 247 1 is_stmt 0 view .LVU1233
 4037 03b0 A7E6     		b	.L296
 4038              	.LVL456:
 4039              	.L342:
 247:src/display.c **** 
 4040              		.loc 1 247 1 view .LVU1234
 4041              	.LBE358:
 4042              	.LBE357:
 4043              	.LBE370:
 4044              	.LBB371:
1475:src/display.c **** 	      const int r = v % b;
 4045              		.loc 1 1475 6 view .LVU1235
 4046 03b2 4FF0FF31 		mov	r1, #-1
 4047 03b6 8EE6     		b	.L309
 4048              	.L391:
 4049              		.align	2
 4050              	.L390:
 4051 03b8 00000000 		.word	StateWhileOn
 4052              	.LBE371:
 4053              		.cfi_endproc
 4054              	.LFE18:
 4056              		.section	.text.getdig,"ax",%progbits
 4057              		.align	1
 4058              		.p2align 2,,3
 4059              		.global	getdig
 4060              		.syntax unified
 4061              		.thumb
 4062              		.thumb_func
 4063              		.fpu fpv4-sp-d16
 4065              	getdig:
 4066              	.LVL457:
 4067              	.LFB6:
 278:src/display.c ****   // perform index lookup
 4068              		.loc 1 278 1 is_stmt 1 view -0
 4069              		.cfi_startproc
 4070              		@ args = 0, pretend = 0, frame = 0
 4071              		@ frame_needed = 0, uses_anonymous_args = 0
 4072              		@ link register save eliminated.
 280:src/display.c **** }
 4073              		.loc 1 280 3 view .LVU1237
 280:src/display.c **** }
 4074              		.loc 1 280 16 is_stmt 0 view .LVU1238
 4075 0000 014B     		ldr	r3, .L393
 280:src/display.c **** }
 4076              		.loc 1 280 19 view .LVU1239
 4077 0002 C0B2     		uxtb	r0, r0
 4078              	.LVL458:
 281:src/display.c **** 
 4079              		.loc 1 281 1 view .LVU1240
ARM GAS  /tmp/ccKZqSeG.s 			page 153


 4080 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4081 0006 7047     		bx	lr
 4082              	.L394:
 4083              		.align	2
 4084              	.L393:
 4085 0008 00000000 		.word	.LANCHOR2
 4086              		.cfi_endproc
 4087              	.LFE6:
 4089              		.section	.text.dot,"ax",%progbits
 4090              		.align	1
 4091              		.p2align 2,,3
 4092              		.global	dot
 4093              		.syntax unified
 4094              		.thumb
 4095              		.thumb_func
 4096              		.fpu fpv4-sp-d16
 4098              	dot:
 4099              	.LVL459:
 4100              	.LFB7:
 283:src/display.c ****   if (on)	set_dot(n);
 4101              		.loc 1 283 25 is_stmt 1 view -0
 4102              		.cfi_startproc
 4103              		@ args = 0, pretend = 0, frame = 0
 4104              		@ frame_needed = 0, uses_anonymous_args = 0
 4105              		@ link register save eliminated.
 284:src/display.c ****   else	clr_dot(n);
 4106              		.loc 1 284 3 view .LVU1242
 284:src/display.c ****   else	clr_dot(n);
 4107              		.loc 1 284 6 is_stmt 0 view .LVU1243
 4108 0000 09B1     		cbz	r1, .L396
 284:src/display.c ****   else	clr_dot(n);
 4109              		.loc 1 284 11 is_stmt 1 discriminator 1 view .LVU1244
 4110 0002 FFF7FEBF 		b	set_dot
 4111              	.LVL460:
 4112              	.L396:
 285:src/display.c **** }
 4113              		.loc 1 285 8 view .LVU1245
 4114 0006 FFF7FEBF 		b	clr_dot
 4115              	.LVL461:
 285:src/display.c **** }
 4116              		.loc 1 285 8 is_stmt 0 view .LVU1246
 4117              		.cfi_endproc
 4118              	.LFE7:
 4120 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4121              		.align	1
 4122              		.p2align 2,,3
 4123              		.global	std_round_fix
 4124              		.syntax unified
 4125              		.thumb
 4126              		.thumb_func
 4127              		.fpu fpv4-sp-d16
 4129              	std_round_fix:
 4130              	.LVL462:
 4131              	.LFB24:
1751:src/display.c **** 	decNumber c;
 4132              		.loc 1 1751 93 is_stmt 1 view -0
 4133              		.cfi_startproc
ARM GAS  /tmp/ccKZqSeG.s 			page 154


 4134              		@ args = 0, pretend = 0, frame = 40
 4135              		@ frame_needed = 0, uses_anonymous_args = 0
1751:src/display.c **** 	decNumber c;
 4136              		.loc 1 1751 93 is_stmt 0 view .LVU1248
 4137 0000 70B5     		push	{r4, r5, r6, lr}
 4138              		.cfi_def_cfa_offset 16
 4139              		.cfi_offset 4, -16
 4140              		.cfi_offset 5, -12
 4141              		.cfi_offset 6, -8
 4142              		.cfi_offset 14, -4
 4143 0002 0E46     		mov	r6, r1
1752:src/display.c **** 	int true_exp, x=0;
 4144              		.loc 1 1752 2 is_stmt 1 view .LVU1249
1753:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4145              		.loc 1 1753 2 view .LVU1250
 4146              	.LVL463:
1754:src/display.c **** 
 4147              		.loc 1 1754 2 view .LVU1251
1756:src/display.c **** 	  min_pos_exp = 9;
 4148              		.loc 1 1756 2 view .LVU1252
1751:src/display.c **** 	decNumber c;
 4149              		.loc 1 1751 93 is_stmt 0 view .LVU1253
 4150 0004 8AB0     		sub	sp, sp, #40
 4151              		.cfi_def_cfa_offset 56
1756:src/display.c **** 	  min_pos_exp = 9;
 4152              		.loc 1 1756 5 view .LVU1254
 4153 0006 92B9     		cbnz	r2, .L398
1761:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4154              		.loc 1 1761 4 is_stmt 1 view .LVU1255
 4155              	.LVL464:
1762:src/display.c **** 	}
 4156              		.loc 1 1762 4 view .LVU1256
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4157              		.loc 1 1765 2 view .LVU1257
 4158 0008 0146     		mov	r1, r0
 4159              	.LVL465:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4160              		.loc 1 1765 2 is_stmt 0 view .LVU1258
 4161 000a 01A8     		add	r0, sp, #4
 4162              	.LVL466:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4163              		.loc 1 1765 2 view .LVU1259
 4164 000c 1D46     		mov	r5, r3
 4165 000e FFF7FEFF 		bl	dn_abs
 4166              	.LVL467:
1766:src/display.c **** 
 4167              		.loc 1 1766 2 is_stmt 1 view .LVU1260
1766:src/display.c **** 
 4168              		.loc 1 1766 24 is_stmt 0 view .LVU1261
 4169 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4170 0016 1844     		add	r0, r0, r3
 4171              	.LVL468:
1768:src/display.c **** 	  x = *dd;
 4172              		.loc 1 1768 2 is_stmt 1 view .LVU1262
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4173              		.loc 1 1772 2 view .LVU1263
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
ARM GAS  /tmp/ccKZqSeG.s 			page 155


 4174              		.loc 1 1772 5 is_stmt 0 view .LVU1264
 4175 0018 0138     		subs	r0, r0, #1
 4176 001a 1AD5     		bpl	.L402
1762:src/display.c **** 	}
 4177              		.loc 1 1762 16 view .LVU1265
 4178 001c EB43     		mvns	r3, r5
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4179              		.loc 1 1772 21 view .LVU1266
 4180 001e 8342     		cmp	r3, r0
 4181 0020 17DA     		bge	.L402
 4182              	.LVL469:
 4183              	.L404:
1774:src/display.c **** 	  return MODE_FIX;
 4184              		.loc 1 1774 4 is_stmt 1 view .LVU1267
1774:src/display.c **** 	  return MODE_FIX;
 4185              		.loc 1 1774 8 is_stmt 0 view .LVU1268
 4186 0022 3368     		ldr	r3, [r6]
 4187 0024 181A     		subs	r0, r3, r0
 4188 0026 3060     		str	r0, [r6]
1775:src/display.c **** 	}
 4189              		.loc 1 1775 4 is_stmt 1 view .LVU1269
1775:src/display.c **** 	}
 4190              		.loc 1 1775 11 is_stmt 0 view .LVU1270
 4191 0028 0120     		movs	r0, #1
1784:src/display.c **** #else
 4192              		.loc 1 1784 7 view .LVU1271
 4193 002a 0AB0     		add	sp, sp, #40
 4194              		.cfi_remember_state
 4195              		.cfi_def_cfa_offset 16
 4196              		@ sp needed
 4197 002c 70BD     		pop	{r4, r5, r6, pc}
 4198              	.LVL470:
 4199              	.L398:
 4200              		.cfi_restore_state
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4201              		.loc 1 1765 2 is_stmt 1 view .LVU1272
 4202 002e 0146     		mov	r1, r0
 4203              	.LVL471:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4204              		.loc 1 1765 2 is_stmt 0 view .LVU1273
 4205 0030 01A8     		add	r0, sp, #4
 4206              	.LVL472:
1765:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4207              		.loc 1 1765 2 view .LVU1274
 4208 0032 1446     		mov	r4, r2
 4209 0034 FFF7FEFF 		bl	dn_abs
 4210              	.LVL473:
1766:src/display.c **** 
 4211              		.loc 1 1766 2 is_stmt 1 view .LVU1275
1766:src/display.c **** 
 4212              		.loc 1 1766 24 is_stmt 0 view .LVU1276
 4213 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1768:src/display.c **** 	  x = *dd;
 4214              		.loc 1 1768 5 view .LVU1277
 4215 003c 052C     		cmp	r4, #5
1766:src/display.c **** 
 4216              		.loc 1 1766 24 view .LVU1278
ARM GAS  /tmp/ccKZqSeG.s 			page 156


 4217 003e 1344     		add	r3, r3, r2
1766:src/display.c **** 
 4218              		.loc 1 1766 11 view .LVU1279
 4219 0040 03F1FF30 		add	r0, r3, #-1
 4220              	.LVL474:
1768:src/display.c **** 	  x = *dd;
 4221              		.loc 1 1768 2 is_stmt 1 view .LVU1280
1768:src/display.c **** 	  x = *dd;
 4222              		.loc 1 1768 5 is_stmt 0 view .LVU1281
 4223 0044 15D1     		bne	.L406
1769:src/display.c **** 	}
 4224              		.loc 1 1769 4 is_stmt 1 view .LVU1282
1769:src/display.c **** 	}
 4225              		.loc 1 1769 6 is_stmt 0 view .LVU1283
 4226 0046 3268     		ldr	r2, [r6]
 4227              	.LVL475:
 4228              	.L401:
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4229              		.loc 1 1772 2 is_stmt 1 view .LVU1284
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4230              		.loc 1 1772 5 is_stmt 0 view .LVU1285
 4231 0048 8242     		cmp	r2, r0
 4232 004a 05DC     		bgt	.L410
1778:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4233              		.loc 1 1778 53 discriminator 2 view .LVU1286
 4234 004c 0333     		adds	r3, r3, #3
 4235 004e 0C2B     		cmp	r3, #12
 4236 0050 04D8     		bhi	.L405
 4237              	.LVL476:
 4238              	.L402:
1782:src/display.c **** 	}
 4239              		.loc 1 1782 11 view .LVU1287
 4240 0052 0020     		movs	r0, #0
1784:src/display.c **** #else
 4241              		.loc 1 1784 7 view .LVU1288
 4242 0054 0AB0     		add	sp, sp, #40
 4243              		.cfi_remember_state
 4244              		.cfi_def_cfa_offset 16
 4245              		@ sp needed
 4246 0056 70BD     		pop	{r4, r5, r6, pc}
 4247              	.LVL477:
 4248              	.L410:
 4249              		.cfi_restore_state
1772:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4250              		.loc 1 1772 21 view .LVU1289
 4251 0058 031D     		adds	r3, r0, #4
 4252 005a E2DA     		bge	.L404
 4253              	.L405:
 4254              	.LBB374:
 4255              	.LBI374:
1751:src/display.c **** 	decNumber c;
 4256              		.loc 1 1751 26 is_stmt 1 view .LVU1290
 4257              	.LVL478:
 4258              	.LBB375:
1779:src/display.c **** 	}
 4259              		.loc 1 1779 4 view .LVU1291
1779:src/display.c **** 	}
ARM GAS  /tmp/ccKZqSeG.s 			page 157


 4260              		.loc 1 1779 24 is_stmt 0 view .LVU1292
 4261 005c 064B     		ldr	r3, .L411
 4262 005e 1B68     		ldr	r3, [r3]
 4263 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1779:src/display.c **** 	}
 4264              		.loc 1 1779 33 view .LVU1293
 4265 0064 13F0100F 		tst	r3, #16
 4266 0068 14BF     		ite	ne
 4267 006a 0320     		movne	r0, #3
 4268 006c 0220     		moveq	r0, #2
 4269              	.LBE375:
 4270              	.LBE374:
1784:src/display.c **** #else
 4271              		.loc 1 1784 7 view .LVU1294
 4272 006e 0AB0     		add	sp, sp, #40
 4273              		.cfi_remember_state
 4274              		.cfi_def_cfa_offset 16
 4275              		@ sp needed
 4276 0070 70BD     		pop	{r4, r5, r6, pc}
 4277              	.LVL479:
 4278              	.L406:
 4279              		.cfi_restore_state
1753:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4280              		.loc 1 1753 16 view .LVU1295
 4281 0072 0022     		movs	r2, #0
 4282 0074 E8E7     		b	.L401
 4283              	.L412:
 4284 0076 00BF     		.align	2
 4285              	.L411:
 4286 0078 00000000 		.word	main_ram
 4287              		.cfi_endproc
 4288              	.LFE24:
 4290              		.section	.text.pixel_length,"ax",%progbits
 4291              		.align	1
 4292              		.p2align 2,,3
 4293              		.global	pixel_length
 4294              		.syntax unified
 4295              		.thumb
 4296              		.thumb_func
 4297              		.fpu fpv4-sp-d16
 4299              	pixel_length:
 4300              	.LVL480:
 4301              	.LFB39:
3486:src/display.c **** 
3487:src/display.c **** 
3488:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3489:src/display.c ****        */
3490:src/display.c ****       int pixel_length(const char *s, int smallp)
3491:src/display.c ****       {
 4302              		.loc 1 3491 7 is_stmt 1 view -0
 4303              		.cfi_startproc
 4304              		@ args = 0, pretend = 0, frame = 0
 4305              		@ frame_needed = 0, uses_anonymous_args = 0
3492:src/display.c **** 	int len = 0;
 4306              		.loc 1 3492 2 view .LVU1297
3493:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4307              		.loc 1 3493 2 view .LVU1298
ARM GAS  /tmp/ccKZqSeG.s 			page 158


3491:src/display.c **** 	int len = 0;
 4308              		.loc 1 3491 7 is_stmt 0 view .LVU1299
 4309 0000 70B5     		push	{r4, r5, r6, lr}
 4310              		.cfi_def_cfa_offset 16
 4311              		.cfi_offset 4, -16
 4312              		.cfi_offset 5, -12
 4313              		.cfi_offset 6, -8
 4314              		.cfi_offset 14, -4
3491:src/display.c **** 	int len = 0;
 4315              		.loc 1 3491 7 view .LVU1300
 4316 0002 0446     		mov	r4, r0
3494:src/display.c **** 	while (*s != '\0') {
 4317              		.loc 1 3494 9 view .LVU1301
 4318 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4319              	.LVL481:
3493:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4320              		.loc 1 3493 34 view .LVU1302
 4321 0006 0E1E     		subs	r6, r1, #0
 4322 0008 18BF     		it	ne
 4323 000a 4FF48076 		movne	r6, #256
 4324              	.LVL482:
 4325              		.loc 1 3494 2 is_stmt 1 view .LVU1303
 4326              		.loc 1 3494 8 view .LVU1304
 4327 000e A0B1     		cbz	r0, .L420
3492:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4328              		.loc 1 3492 6 is_stmt 0 view .LVU1305
 4329 0010 0025     		movs	r5, #0
 4330 0012 06E0     		b	.L418
 4331              	.LVL483:
 4332              	.L416:
3495:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3496:src/display.c **** 	  if (s[0] == '\007') {
3497:src/display.c **** 	    len += s[1] & 0x1F;
3498:src/display.c **** 	    s += 3;
3499:src/display.c **** 	    continue;
3500:src/display.c **** 	  }
3501:src/display.c **** #endif
3502:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4333              		.loc 1 3502 11 view .LVU1306
 4334 0014 3044     		add	r0, r0, r6
 4335 0016 FFF7FEFF 		bl	charlengths
 4336              	.LVL484:
 4337              		.loc 1 3502 42 view .LVU1307
 4338 001a 0134     		adds	r4, r4, #1
 4339              	.LVL485:
 4340              		.loc 1 3502 8 view .LVU1308
 4341 001c 0544     		add	r5, r5, r0
 4342              	.LVL486:
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4343              		.loc 1 3494 8 is_stmt 1 view .LVU1309
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4344              		.loc 1 3494 9 is_stmt 0 view .LVU1310
 4345 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4346              		.loc 1 3494 8 view .LVU1311
 4347 0020 48B1     		cbz	r0, .L413
 4348              	.LVL487:
ARM GAS  /tmp/ccKZqSeG.s 			page 159


 4349              	.L418:
3496:src/display.c **** 	    len += s[1] & 0x1F;
 4350              		.loc 1 3496 4 is_stmt 1 view .LVU1312
 4351              		.loc 1 3502 4 view .LVU1313
3496:src/display.c **** 	    len += s[1] & 0x1F;
 4352              		.loc 1 3496 7 is_stmt 0 view .LVU1314
 4353 0022 0728     		cmp	r0, #7
 4354 0024 F6D1     		bne	.L416
3497:src/display.c **** 	    s += 3;
 4355              		.loc 1 3497 6 is_stmt 1 view .LVU1315
3497:src/display.c **** 	    s += 3;
 4356              		.loc 1 3497 18 is_stmt 0 view .LVU1316
 4357 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4358              		.loc 1 3494 9 view .LVU1317
 4359 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3497:src/display.c **** 	    s += 3;
 4360              		.loc 1 3497 18 view .LVU1318
 4361 002a 03F01F03 		and	r3, r3, #31
3498:src/display.c **** 	    continue;
 4362              		.loc 1 3498 8 view .LVU1319
 4363 002e 0334     		adds	r4, r4, #3
 4364              	.LVL488:
3497:src/display.c **** 	    s += 3;
 4365              		.loc 1 3497 10 view .LVU1320
 4366 0030 1D44     		add	r5, r5, r3
 4367              	.LVL489:
3498:src/display.c **** 	    continue;
 4368              		.loc 1 3498 6 is_stmt 1 view .LVU1321
3499:src/display.c **** 	  }
 4369              		.loc 1 3499 6 view .LVU1322
3494:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4370              		.loc 1 3494 8 view .LVU1323
 4371 0032 0028     		cmp	r0, #0
 4372 0034 F5D1     		bne	.L418
 4373              	.L413:
3503:src/display.c **** 	}
3504:src/display.c **** 	return len;
3505:src/display.c ****       }
 4374              		.loc 1 3505 7 is_stmt 0 view .LVU1324
 4375 0036 2846     		mov	r0, r5
 4376 0038 70BD     		pop	{r4, r5, r6, pc}
 4377              	.LVL490:
 4378              	.L420:
3492:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4379              		.loc 1 3492 6 view .LVU1325
 4380 003a 0546     		mov	r5, r0
3504:src/display.c ****       }
 4381              		.loc 1 3504 2 is_stmt 1 view .LVU1326
 4382              		.loc 1 3505 7 is_stmt 0 view .LVU1327
 4383 003c 2846     		mov	r0, r5
 4384 003e 70BD     		pop	{r4, r5, r6, pc}
 4385              		.loc 1 3505 7 view .LVU1328
 4386              		.cfi_endproc
 4387              	.LFE39:
 4389              		.section	.text.set_status,"ax",%progbits
 4390              		.align	1
ARM GAS  /tmp/ccKZqSeG.s 			page 160


 4391              		.p2align 2,,3
 4392              		.syntax unified
 4393              		.thumb
 4394              		.thumb_func
 4395              		.fpu fpv4-sp-d16
 4397              	set_status:
 4398              	.LVL491:
 4399              	.LFB42:
3506:src/display.c **** 
3507:src/display.c **** 
3508:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3509:src/display.c ****        * If this is larger than the display, return true.
3510:src/display.c ****        */
3511:src/display.c ****       static int string_too_large(const char *s) {
3512:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3513:src/display.c ****       }
3514:src/display.c ****       static int string_too_large_top(const char *s) {
3515:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3516:src/display.c ****       }
3517:src/display.c **** 
3518:src/display.c **** 
3519:src/display.c ****       /* Display the given string on the screen.
3520:src/display.c ****        */
3521:src/display.c ****       static void set_status(const char *str) {
 4400              		.loc 1 3521 47 is_stmt 1 view -0
 4401              		.cfi_startproc
 4402              		@ args = 0, pretend = 0, frame = 0
 4403              		@ frame_needed = 0, uses_anonymous_args = 0
3522:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4404              		.loc 1 3522 2 view .LVU1330
3521:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4405              		.loc 1 3521 47 is_stmt 0 view .LVU1331
 4406 0000 10B5     		push	{r4, lr}
 4407              		.cfi_def_cfa_offset 8
 4408              		.cfi_offset 4, -8
 4409              		.cfi_offset 14, -4
 4410              		.loc 1 3522 24 view .LVU1332
 4411 0002 0D4B     		ldr	r3, .L428
 4412              		.loc 1 3522 2 view .LVU1333
 4413 0004 93F91630 		ldrsb	r3, [r3, #22]
 4414 0008 002B     		cmp	r3, #0
3521:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4415              		.loc 1 3521 47 view .LVU1334
 4416 000a 82B0     		sub	sp, sp, #8
 4417              		.cfi_def_cfa_offset 16
3521:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4418              		.loc 1 3521 47 view .LVU1335
 4419 000c 0446     		mov	r4, r0
 4420              		.loc 1 3522 2 view .LVU1336
 4421 000e 0ADA     		bge	.L427
 4422 0010 0121     		movs	r1, #1
 4423              	.LVL492:
 4424              	.L424:
 4425              	.LBB376:
 4426              	.LBI376:
3379:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4427              		.loc 1 3379 19 is_stmt 1 discriminator 6 view .LVU1337
ARM GAS  /tmp/ccKZqSeG.s 			page 161


 4428              	.LBB377:
3380:src/display.c ****       }
 4429              		.loc 1 3380 2 discriminator 6 view .LVU1338
 4430 0012 40F24A23 		movw	r3, #586
 4431 0016 0093     		str	r3, [sp]
 4432 0018 2046     		mov	r0, r4
 4433 001a 8E23     		movs	r3, #142
 4434 001c 4A22     		movs	r2, #74
 4435 001e FFF7FEFF 		bl	s_s_sized
 4436              	.LVL493:
3380:src/display.c ****       }
 4437              		.loc 1 3380 2 is_stmt 0 discriminator 6 view .LVU1339
 4438              	.LBE377:
 4439              	.LBE376:
3523:src/display.c ****       }
 4440              		.loc 1 3523 7 discriminator 6 view .LVU1340
 4441 0022 02B0     		add	sp, sp, #8
 4442              		.cfi_remember_state
 4443              		.cfi_def_cfa_offset 8
 4444              		@ sp needed
 4445 0024 10BD     		pop	{r4, pc}
 4446              	.LVL494:
 4447              	.L427:
 4448              		.cfi_restore_state
 4449              	.LBB378:
 4450              	.LBI378:
3511:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4451              		.loc 1 3511 18 is_stmt 1 view .LVU1341
 4452              	.LBB379:
3512:src/display.c ****       }
 4453              		.loc 1 3512 2 view .LVU1342
3512:src/display.c ****       }
 4454              		.loc 1 3512 9 is_stmt 0 view .LVU1343
 4455 0026 0021     		movs	r1, #0
 4456 0028 FFF7FEFF 		bl	pixel_length
 4457              	.LVL495:
3512:src/display.c ****       }
 4458              		.loc 1 3512 9 view .LVU1344
 4459              	.LBE379:
 4460              	.LBE378:
3522:src/display.c ****       }
 4461              		.loc 1 3522 2 view .LVU1345
 4462 002c 4B28     		cmp	r0, #75
 4463 002e D4BF     		ite	le
 4464 0030 0021     		movle	r1, #0
 4465 0032 0121     		movgt	r1, #1
 4466 0034 EDE7     		b	.L424
 4467              	.L429:
 4468 0036 00BF     		.align	2
 4469              	.L428:
 4470 0038 00000000 		.word	StateWhileOn
 4471              		.cfi_endproc
 4472              	.LFE42:
 4474              		.section	.text.set_x_dn,"ax",%progbits
 4475              		.align	1
 4476              		.p2align 2,,3
 4477              		.global	set_x_dn
ARM GAS  /tmp/ccKZqSeG.s 			page 162


 4478              		.syntax unified
 4479              		.thumb
 4480              		.thumb_func
 4481              		.fpu fpv4-sp-d16
 4483              	set_x_dn:
 4484              	.LVL496:
 4485              	.LFB27:
1933:src/display.c **** 	char x[50], *obp = x;
 4486              		.loc 1 1933 67 is_stmt 1 view -0
 4487              		.cfi_startproc
 4488              		@ args = 0, pretend = 0, frame = 152
 4489              		@ frame_needed = 0, uses_anonymous_args = 0
1934:src/display.c **** 	int odig = 0;
 4490              		.loc 1 1934 2 view .LVU1347
1933:src/display.c **** 	char x[50], *obp = x;
 4491              		.loc 1 1933 67 is_stmt 0 view .LVU1348
 4492 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4493              		.cfi_def_cfa_offset 36
 4494              		.cfi_offset 4, -36
 4495              		.cfi_offset 5, -32
 4496              		.cfi_offset 6, -28
 4497              		.cfi_offset 7, -24
 4498              		.cfi_offset 8, -20
 4499              		.cfi_offset 9, -16
 4500              		.cfi_offset 10, -12
 4501              		.cfi_offset 11, -8
 4502              		.cfi_offset 14, -4
 4503 0004 A7B0     		sub	sp, sp, #156
 4504              		.cfi_def_cfa_offset 192
 4505              	.LVL497:
1935:src/display.c **** 	int show_exp = 0;
 4506              		.loc 1 1935 2 is_stmt 1 view .LVU1349
1936:src/display.c **** 	int j;
 4507              		.loc 1 1936 2 view .LVU1350
1937:src/display.c **** 	char mantissa[64];
 4508              		.loc 1 1937 2 view .LVU1351
1938:src/display.c **** 	int exp = 0;
 4509              		.loc 1 1938 2 view .LVU1352
1939:src/display.c **** 	char *p = mantissa;
 4510              		.loc 1 1939 2 view .LVU1353
1940:src/display.c **** 	char *r;
 4511              		.loc 1 1940 2 view .LVU1354
1941:src/display.c **** 	const char *q;
 4512              		.loc 1 1941 2 view .LVU1355
1942:src/display.c **** 	int count, i;
 4513              		.loc 1 1942 2 view .LVU1356
1943:src/display.c **** 	int extra_digits = 0;
 4514              		.loc 1 1943 2 view .LVU1357
1944:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4515              		.loc 1 1944 2 view .LVU1358
1946:src/display.c **** 	int dispdigs;
 4516              		.loc 1 1946 2 view .LVU1359
1947:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4517              		.loc 1 1947 2 view .LVU1360
1948:src/display.c **** #else
 4518              		.loc 1 1948 2 view .LVU1361
1933:src/display.c **** 	char x[50], *obp = x;
ARM GAS  /tmp/ccKZqSeG.s 			page 163


 4519              		.loc 1 1933 67 is_stmt 0 view .LVU1362
 4520 0006 8246     		mov	r10, r0
1948:src/display.c **** #else
 4521              		.loc 1 1948 13 view .LVU1363
 4522 0008 08A8     		add	r0, sp, #32
 4523              	.LVL498:
1933:src/display.c **** 	char x[50], *obp = x;
 4524              		.loc 1 1933 67 view .LVU1364
 4525 000a 0C46     		mov	r4, r1
 4526 000c 0192     		str	r2, [sp, #4]
1948:src/display.c **** #else
 4527              		.loc 1 1948 13 view .LVU1365
 4528 000e FFF7FEFF 		bl	get_dispmode_digs
 4529              	.LVL499:
1948:src/display.c **** #else
 4530              		.loc 1 1948 13 view .LVU1366
 4531 0012 0546     		mov	r5, r0
 4532              	.LVL500:
1953:src/display.c **** 	int negative = 0;
 4533              		.loc 1 1953 2 is_stmt 1 view .LVU1367
1954:src/display.c **** 	int trimzeros = 0;
 4534              		.loc 1 1954 2 view .LVU1368
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4535              		.loc 1 1955 2 view .LVU1369
1963:src/display.c **** #endif
 4536              		.loc 1 1963 2 view .LVU1370
1966:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4537              		.loc 1 1966 2 view .LVU1371
 4538 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4539              	.LVL501:
1968:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4540              		.loc 1 1968 2 view .LVU1372
1968:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4541              		.loc 1 1968 5 is_stmt 0 view .LVU1373
 4542 0018 002C     		cmp	r4, #0
 4543 001a 00F08781 		beq	.L431
 4544              	.L434:
1993:src/display.c **** 	  return;
 4545              		.loc 1 1993 2 is_stmt 1 view .LVU1374
1993:src/display.c **** 	  return;
 4546              		.loc 1 1993 6 is_stmt 0 view .LVU1375
 4547 001e 9AF80800 		ldrb	r0, [r10, #8]	@ zero_extendqisi2
 4548 0022 2146     		mov	r1, r4
 4549 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4550              	.LVL502:
1993:src/display.c **** 	  return;
 4551              		.loc 1 1993 5 view .LVU1376
 4552 0028 8146     		mov	r9, r0
 4553 002a 0028     		cmp	r0, #0
 4554 002c 40F07681 		bne	.L430
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4555              		.loc 1 1996 2 is_stmt 1 view .LVU1377
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4556              		.loc 1 1996 12 is_stmt 0 view .LVU1378
 4557 0030 CC4E     		ldr	r6, .L682
1996:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4558              		.loc 1 1996 5 view .LVU1379
ARM GAS  /tmp/ccKZqSeG.s 			page 164


 4559 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4560 0034 012B     		cmp	r3, #1
 4561 0036 00F0FB82 		beq	.L659
1939:src/display.c **** 	char *p = mantissa;
 4562              		.loc 1 1939 6 view .LVU1380
 4563 003a 8046     		mov	r8, r0
 4564              	.LVL503:
 4565              	.L437:
2002:src/display.c **** 
 4566              		.loc 1 2002 2 is_stmt 1 view .LVU1381
 4567 003c 09AF     		add	r7, sp, #36
 4568              	.LVL504:
2002:src/display.c **** 
 4569              		.loc 1 2002 2 is_stmt 0 view .LVU1382
 4570 003e 3846     		mov	r0, r7
 4571 0040 3222     		movs	r2, #50
 4572 0042 0021     		movs	r1, #0
 4573 0044 FFF7FEFF 		bl	xset
 4574              	.LVL505:
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4575              		.loc 1 2004 2 is_stmt 1 view .LVU1383
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4576              		.loc 1 2004 6 is_stmt 0 view .LVU1384
 4577 0048 5046     		mov	r0, r10
 4578 004a FFF7FEFF 		bl	dn_eq0
 4579              	.LVL506:
2004:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4580              		.loc 1 2004 5 view .LVU1385
 4581 004e 0028     		cmp	r0, #0
 4582 0050 00F06781 		beq	.L438
2005:src/display.c **** 	    x[0] = '-';
 4583              		.loc 1 2005 4 is_stmt 1 view .LVU1386
2005:src/display.c **** 	    x[0] = '-';
 4584              		.loc 1 2005 7 is_stmt 0 view .LVU1387
 4585 0054 9AF90830 		ldrsb	r3, [r10, #8]
 4586 0058 002B     		cmp	r3, #0
 4587 005a C0F21083 		blt	.L660
 4588              	.L439:
2009:src/display.c **** 	} else
 4589              		.loc 1 2009 6 is_stmt 1 view .LVU1388
2009:src/display.c **** 	} else
 4590              		.loc 1 2009 11 is_stmt 0 view .LVU1389
 4591 005e 3023     		movs	r3, #48
 4592 0060 8DF82430 		strb	r3, [sp, #36]
 4593              	.L440:
2013:src/display.c **** 	  show_x(x, exp);
 4594              		.loc 1 2013 2 is_stmt 1 view .LVU1390
2013:src/display.c **** 	  show_x(x, exp);
 4595              		.loc 1 2013 12 is_stmt 0 view .LVU1391
 4596 0064 96F811B0 		ldrb	fp, [r6, #17]	@ zero_extendqisi2
2013:src/display.c **** 	  show_x(x, exp);
 4597              		.loc 1 2013 5 view .LVU1392
 4598 0068 BBF1010F 		cmp	fp, #1
 4599 006c 00F04883 		beq	.L661
2019:src/display.c **** 	  //  ALL mode: fill the display
 4600              		.loc 1 2019 2 is_stmt 1 view .LVU1393
2019:src/display.c **** 	  //  ALL mode: fill the display
ARM GAS  /tmp/ccKZqSeG.s 			page 165


 4601              		.loc 1 2019 5 is_stmt 0 view .LVU1394
 4602 0070 002D     		cmp	r5, #0
 4603 0072 40F08181 		bne	.L662
2021:src/display.c **** 	else
 4604              		.loc 1 2021 4 is_stmt 1 view .LVU1395
2021:src/display.c **** 	else
 4605              		.loc 1 2021 25 is_stmt 0 view .LVU1396
 4606 0076 019E     		ldr	r6, [sp, #4]
 4607              	.LBB401:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4608              		.loc 1 2028 11 view .LVU1397
 4609 0078 089B     		ldr	r3, [sp, #32]
 4610              	.LBE401:
2021:src/display.c **** 	else
 4611              		.loc 1 2021 25 view .LVU1398
 4612 007a 3168     		ldr	r1, [r6]
 4613              	.LBB402:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4614              		.loc 1 2028 11 view .LVU1399
 4615 007c 2A46     		mov	r2, r5
 4616 007e 5046     		mov	r0, r10
 4617              	.LBE402:
2021:src/display.c **** 	else
 4618              		.loc 1 2021 25 view .LVU1400
 4619 0080 4D1E     		subs	r5, r1, #1
 4620              	.LVL507:
 4621              	.LBB403:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4622              		.loc 1 2028 11 view .LVU1401
 4623 0082 07A9     		add	r1, sp, #28
 4624              	.LBE403:
2021:src/display.c **** 	else
 4625              		.loc 1 2021 7 view .LVU1402
 4626 0084 0795     		str	r5, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 4627              		.loc 1 2025 2 is_stmt 1 view .LVU1403
 4628              	.LBB404:
2026:src/display.c **** 
 4629              		.loc 1 2026 4 view .LVU1404
 4630              	.LVL508:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4631              		.loc 1 2028 4 view .LVU1405
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4632              		.loc 1 2028 11 is_stmt 0 view .LVU1406
 4633 0086 FFF7FEFF 		bl	std_round_fix
 4634              	.LVL509:
2033:src/display.c ****  	}
 4635              		.loc 1 2033 27 view .LVU1407
 4636 008a 3368     		ldr	r3, [r6]
 4637 008c 013B     		subs	r3, r3, #1
2033:src/display.c ****  	}
 4638              		.loc 1 2033 9 view .LVU1408
 4639 008e 0793     		str	r3, [sp, #28]
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4640              		.loc 1 2031 16 view .LVU1409
 4641 0090 0123     		movs	r3, #1
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
ARM GAS  /tmp/ccKZqSeG.s 			page 166


 4642              		.loc 1 2028 11 view .LVU1410
 4643 0092 0546     		mov	r5, r0
 4644              	.LVL510:
2029:src/display.c **** 	    // allow zeros to be trimmed
 4645              		.loc 1 2029 4 is_stmt 1 view .LVU1411
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4646              		.loc 1 2031 6 view .LVU1412
2032:src/display.c **** 	    dd = *display_digits - 1;
 4647              		.loc 1 2032 4 view .LVU1413
2033:src/display.c ****  	}
 4648              		.loc 1 2033 6 view .LVU1414
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4649              		.loc 1 2031 16 is_stmt 0 view .LVU1415
 4650 0094 0493     		str	r3, [sp, #16]
 4651              	.LVL511:
 4652              	.L561:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 4653              		.loc 1 2031 16 view .LVU1416
 4654              	.LBE404:
2045:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4655              		.loc 1 2045 2 is_stmt 1 view .LVU1417
 4656 0096 0DF1580B 		add	fp, sp, #88
 4657              	.LVL512:
2045:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4658              		.loc 1 2045 2 is_stmt 0 view .LVU1418
 4659 009a 3F22     		movs	r2, #63
 4660 009c 3021     		movs	r1, #48
 4661 009e 5846     		mov	r0, fp
 4662 00a0 FFF7FEFF 		bl	xset
 4663              	.LVL513:
2046:src/display.c **** 
 4664              		.loc 1 2046 2 is_stmt 1 view .LVU1419
2046:src/display.c **** 
 4665              		.loc 1 2046 31 is_stmt 0 view .LVU1420
 4666 00a4 0023     		movs	r3, #0
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4667              		.loc 1 2048 6 view .LVU1421
 4668 00a6 4521     		movs	r1, #69
 4669 00a8 3846     		mov	r0, r7
2046:src/display.c **** 
 4670              		.loc 1 2046 31 view .LVU1422
 4671 00aa 8DF89730 		strb	r3, [sp, #151]
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4672              		.loc 1 2048 2 is_stmt 1 view .LVU1423
2048:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4673              		.loc 1 2048 6 is_stmt 0 view .LVU1424
 4674 00ae FFF7FEFF 		bl	find_char
 4675              	.LVL514:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 4676              		.loc 1 2050 2 is_stmt 1 view .LVU1425
2050:src/display.c **** 	if (q == NULL) exp = 0;
 4677              		.loc 1 2050 5 is_stmt 0 view .LVU1426
 4678 00b2 0646     		mov	r6, r0
 4679 00b4 0028     		cmp	r0, #0
 4680 00b6 00F06D81 		beq	.L663
 4681              	.L456:
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
ARM GAS  /tmp/ccKZqSeG.s 			page 167


 4682              		.loc 1 2053 4 is_stmt 1 view .LVU1427
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4683              		.loc 1 2053 10 is_stmt 0 view .LVU1428
 4684 00ba 701C     		adds	r0, r6, #1
 4685              	.LVL515:
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4686              		.loc 1 2053 10 view .LVU1429
 4687 00bc FFF7FEFF 		bl	s_to_i
 4688              	.LVL516:
2054:src/display.c **** 	}
 4689              		.loc 1 2054 7 view .LVU1430
 4690 00c0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4691 00c2 442B     		cmp	r3, #68
2053:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4692              		.loc 1 2053 10 view .LVU1431
 4693 00c4 0646     		mov	r6, r0
 4694              	.LVL517:
2054:src/display.c **** 	}
 4695              		.loc 1 2054 4 is_stmt 1 view .LVU1432
2054:src/display.c **** 	}
 4696              		.loc 1 2054 19 view .LVU1433
2054:src/display.c **** 	}
 4697              		.loc 1 2054 23 is_stmt 0 view .LVU1434
 4698 00c6 08BF     		it	eq
 4699 00c8 4642     		rsbeq	r6, r0, #0
 4700              	.LVL518:
 4701              	.L457:
2062:src/display.c **** 	if (!res) {
 4702              		.loc 1 2062 2 is_stmt 1 view .LVU1435
2062:src/display.c **** 	if (!res) {
 4703              		.loc 1 2062 12 view .LVU1436
2062:src/display.c **** 	if (!res) {
 4704              		.loc 1 2062 2 is_stmt 0 view .LVU1437
 4705 00ca 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4706 00ce 202B     		cmp	r3, #32
2062:src/display.c **** 	if (!res) {
 4707              		.loc 1 2062 8 view .LVU1438
 4708 00d0 B846     		mov	r8, r7
2062:src/display.c **** 	if (!res) {
 4709              		.loc 1 2062 2 view .LVU1439
 4710 00d2 03D1     		bne	.L458
 4711              	.LVL519:
 4712              	.L459:
2062:src/display.c **** 	if (!res) {
 4713              		.loc 1 2062 27 is_stmt 1 discriminator 3 view .LVU1440
2062:src/display.c **** 	if (!res) {
 4714              		.loc 1 2062 23 discriminator 3 view .LVU1441
2062:src/display.c **** 	if (!res) {
 4715              		.loc 1 2062 12 discriminator 3 view .LVU1442
2062:src/display.c **** 	if (!res) {
 4716              		.loc 1 2062 2 is_stmt 0 discriminator 3 view .LVU1443
 4717 00d4 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4718              	.LVL520:
2062:src/display.c **** 	if (!res) {
 4719              		.loc 1 2062 2 discriminator 3 view .LVU1444
 4720 00d8 202B     		cmp	r3, #32
 4721 00da FBD0     		beq	.L459
ARM GAS  /tmp/ccKZqSeG.s 			page 168


 4722              	.LVL521:
 4723              	.L458:
2063:src/display.c **** 	  CLR_EXP_SIGN;
 4724              		.loc 1 2063 2 is_stmt 1 view .LVU1445
2063:src/display.c **** 	  CLR_EXP_SIGN;
 4725              		.loc 1 2063 5 is_stmt 0 view .LVU1446
 4726 00dc 002C     		cmp	r4, #0
 4727 00de 00F0D982 		beq	.L664
 4728              	.L460:
2067:src/display.c **** 	  negative = 1;
 4729              		.loc 1 2067 2 is_stmt 1 view .LVU1447
2067:src/display.c **** 	  negative = 1;
 4730              		.loc 1 2067 6 is_stmt 0 view .LVU1448
 4731 00e2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2067:src/display.c **** 	  negative = 1;
 4732              		.loc 1 2067 5 view .LVU1449
 4733 00e6 2D2B     		cmp	r3, #45
 4734 00e8 00F0E481 		beq	.L665
2070:src/display.c **** 	  q++;
 4735              		.loc 1 2070 9 is_stmt 1 view .LVU1450
2070:src/display.c **** 	  q++;
 4736              		.loc 1 2070 12 is_stmt 0 view .LVU1451
 4737 00ec 2B2B     		cmp	r3, #43
 4738 00ee 00F0BF82 		beq	.L666
1954:src/display.c **** 	int trimzeros = 0;
 4739              		.loc 1 1954 6 view .LVU1452
 4740 00f2 0022     		movs	r2, #0
 4741 00f4 0392     		str	r2, [sp, #12]
 4742              	.LVL522:
 4743              	.L462:
2072:src/display.c **** 	if (*q == '.') {
 4744              		.loc 1 2072 9 is_stmt 1 discriminator 1 view .LVU1453
2072:src/display.c **** 	if (*q == '.') {
 4745              		.loc 1 2072 2 is_stmt 0 discriminator 1 view .LVU1454
 4746 00f6 302B     		cmp	r3, #48
 4747 00f8 03D1     		bne	.L464
 4748              	.LVL523:
 4749              	.L463:
2072:src/display.c **** 	if (*q == '.') {
 4750              		.loc 1 2072 24 is_stmt 1 discriminator 2 view .LVU1455
2072:src/display.c **** 	if (*q == '.') {
 4751              		.loc 1 2072 20 discriminator 2 view .LVU1456
2072:src/display.c **** 	if (*q == '.') {
 4752              		.loc 1 2072 9 discriminator 2 view .LVU1457
 4753 00fa 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4754              	.LVL524:
2072:src/display.c **** 	if (*q == '.') {
 4755              		.loc 1 2072 2 is_stmt 0 discriminator 2 view .LVU1458
 4756 00fe 302B     		cmp	r3, #48
 4757 0100 FBD0     		beq	.L463
 4758              	.LVL525:
 4759              	.L464:
2073:src/display.c **** 	  do
 4760              		.loc 1 2073 2 is_stmt 1 view .LVU1459
2073:src/display.c **** 	  do
 4761              		.loc 1 2073 5 is_stmt 0 view .LVU1460
 4762 0102 2E2B     		cmp	r3, #46
ARM GAS  /tmp/ccKZqSeG.s 			page 169


 4763 0104 00F0BE81 		beq	.L667
2080:src/display.c **** 	    *p++ = *q++;
 4764              		.loc 1 2080 4 is_stmt 1 view .LVU1461
2080:src/display.c **** 	    *p++ = *q++;
 4765              		.loc 1 2080 7 is_stmt 0 view .LVU1462
 4766 0108 A3F13002 		sub	r2, r3, #48
 4767 010c 092A     		cmp	r2, #9
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4768              		.loc 1 2081 6 is_stmt 1 view .LVU1463
 4769              	.LVL526:
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4770              		.loc 1 2081 15 is_stmt 0 view .LVU1464
 4771 010e 9CBF     		itt	ls
 4772 0110 08F10108 		addls	r8, r8, #1
 4773              	.LVL527:
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4774              		.loc 1 2081 11 view .LVU1465
 4775 0114 8DF85830 		strbls	r3, [sp, #88]
2082:src/display.c **** 	    *p++ = *q++;
 4776              		.loc 1 2082 11 view .LVU1466
 4777 0118 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2082:src/display.c **** 	    *p++ = *q++;
 4778              		.loc 1 2082 10 view .LVU1467
 4779 011c A2F13003 		sub	r3, r2, #48
2081:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4780              		.loc 1 2081 8 view .LVU1468
 4781 0120 94BF     		ite	ls
 4782 0122 0DF15901 		addls	r1, sp, #89
1940:src/display.c **** 	char *r;
 4783              		.loc 1 1940 8 view .LVU1469
 4784 0126 5946     		movhi	r1, fp
 4785              	.LVL528:
2082:src/display.c **** 	    *p++ = *q++;
 4786              		.loc 1 2082 10 is_stmt 1 view .LVU1470
 4787 0128 092B     		cmp	r3, #9
 4788 012a 0ED8     		bhi	.L470
 4789 012c A6EB0800 		sub	r0, r6, r8
 4790 0130 08F10103 		add	r3, r8, #1
 4791              	.L471:
 4792              	.LVL529:
2083:src/display.c **** 	    exp++;
 4793              		.loc 1 2083 6 view .LVU1471
2083:src/display.c **** 	    exp++;
 4794              		.loc 1 2083 11 is_stmt 0 view .LVU1472
 4795 0134 01F8012B 		strb	r2, [r1], #1
 4796              	.LVL530:
2083:src/display.c **** 	    exp++;
 4797              		.loc 1 2083 15 view .LVU1473
 4798 0138 9846     		mov	r8, r3
 4799              	.LVL531:
2084:src/display.c **** 	  }
 4800              		.loc 1 2084 6 is_stmt 1 view .LVU1474
 4801 013a C618     		adds	r6, r0, r3
 4802              	.LVL532:
2082:src/display.c **** 	    *p++ = *q++;
 4803              		.loc 1 2082 10 view .LVU1475
2082:src/display.c **** 	    *p++ = *q++;
ARM GAS  /tmp/ccKZqSeG.s 			page 170


 4804              		.loc 1 2082 11 is_stmt 0 view .LVU1476
 4805 013c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4806              	.LVL533:
2082:src/display.c **** 	    *p++ = *q++;
 4807              		.loc 1 2082 10 view .LVU1477
 4808 0140 A2F1300C 		sub	ip, r2, #48
 4809 0144 BCF1090F 		cmp	ip, #9
 4810 0148 F4D9     		bls	.L471
 4811              	.LVL534:
 4812              	.L470:
2086:src/display.c **** 	    q++;
 4813              		.loc 1 2086 4 is_stmt 1 view .LVU1478
2086:src/display.c **** 	    q++;
 4814              		.loc 1 2086 7 is_stmt 0 view .LVU1479
 4815 014a 2E2A     		cmp	r2, #46
 4816 014c 00F07E82 		beq	.L668
 4817              	.LVL535:
 4818              	.L467:
2093:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4819              		.loc 1 2093 2 is_stmt 1 view .LVU1480
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4820              		.loc 1 2094 12 is_stmt 0 view .LVU1481
 4821 0150 019B     		ldr	r3, [sp, #4]
 4822 0152 079A     		ldr	r2, [sp, #28]
 4823 0154 1B68     		ldr	r3, [r3]
 4824 0156 0293     		str	r3, [sp, #8]
2093:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4825              		.loc 1 2093 5 view .LVU1482
 4826 0158 012D     		cmp	r5, #1
 4827 015a 00F08381 		beq	.L473
 4828              	.LVL536:
 4829              	.L658:
2095:src/display.c **** 	  else {
 4830              		.loc 1 2095 35 view .LVU1483
 4831 015e 0021     		movs	r1, #0
 4832              	.LVL537:
 4833              	.L474:
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4834              		.loc 1 2107 2 is_stmt 1 view .LVU1484
 4835 0160 02F1010E 		add	lr, r2, #1
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4836              		.loc 1 2107 35 is_stmt 0 view .LVU1485
 4837 0164 7144     		add	r1, r1, lr
2107:src/display.c **** 	if (*p >= '5') {	// Round up
 4838              		.loc 1 2107 4 view .LVU1486
 4839 0166 0BEB0103 		add	r3, fp, r1
 4840              	.LVL538:
2108:src/display.c **** 	  *p = '0';
 4841              		.loc 1 2108 2 is_stmt 1 view .LVU1487
2108:src/display.c **** 	  *p = '0';
 4842              		.loc 1 2108 6 is_stmt 0 view .LVU1488
 4843 016a 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
2108:src/display.c **** 	  *p = '0';
 4844              		.loc 1 2108 5 view .LVU1489
 4845 016e 3428     		cmp	r0, #52
 4846 0170 26D9     		bls	.L479
2109:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
ARM GAS  /tmp/ccKZqSeG.s 			page 171


 4847              		.loc 1 2109 4 is_stmt 1 view .LVU1490
2109:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4848              		.loc 1 2109 7 is_stmt 0 view .LVU1491
 4849 0172 3020     		movs	r0, #48
 4850 0174 0BF80100 		strb	r0, [fp, r1]
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4851              		.loc 1 2110 4 is_stmt 1 view .LVU1492
 4852              	.LVL539:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4853              		.loc 1 2110 23 view .LVU1493
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4854              		.loc 1 2110 4 is_stmt 0 view .LVU1494
 4855 0178 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 4856 017c 3928     		cmp	r0, #57
 4857 017e 40F0D783 		bne	.L480
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4858              		.loc 1 2110 11 view .LVU1495
 4859 0182 5846     		mov	r0, fp
 4860              	.LVL540:
 4861              	.L481:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4862              		.loc 1 2110 38 is_stmt 1 discriminator 3 view .LVU1496
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4863              		.loc 1 2110 34 discriminator 3 view .LVU1497
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4864              		.loc 1 2110 23 discriminator 3 view .LVU1498
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4865              		.loc 1 2110 4 is_stmt 0 discriminator 3 view .LVU1499
 4866 0184 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 4867              	.LVL541:
2110:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4868              		.loc 1 2110 4 discriminator 3 view .LVU1500
 4869 0188 BCF1390F 		cmp	ip, #57
 4870 018c FAD0     		beq	.L481
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4871              		.loc 1 2111 4 is_stmt 1 view .LVU1501
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4872              		.loc 1 2111 7 is_stmt 0 view .LVU1502
 4873 018e 8342     		cmp	r3, r0
 4874 0190 00F01681 		beq	.L669
 4875              	.LVL542:
 4876              	.L559:
2120:src/display.c **** 	      *p = '0';
 4877              		.loc 1 2120 12 is_stmt 1 view .LVU1503
2120:src/display.c **** 	      *p = '0';
 4878              		.loc 1 2120 13 is_stmt 0 view .LVU1504
 4879 0194 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2120:src/display.c **** 	      *p = '0';
 4880              		.loc 1 2120 12 view .LVU1505
 4881 0198 BCF1390F 		cmp	ip, #57
 4882 019c 03F1FF30 		add	r0, r3, #-1
 4883              	.LVL543:
2120:src/display.c **** 	      *p = '0';
 4884              		.loc 1 2120 12 view .LVU1506
 4885 01a0 08D1     		bne	.L484
2121:src/display.c **** 	    (*p)++;
 4886              		.loc 1 2121 11 view .LVU1507
ARM GAS  /tmp/ccKZqSeG.s 			page 172


 4887 01a2 4FF0300E 		mov	lr, #48
 4888              	.L483:
2121:src/display.c **** 	    (*p)++;
 4889              		.loc 1 2121 8 is_stmt 1 view .LVU1508
2121:src/display.c **** 	    (*p)++;
 4890              		.loc 1 2121 11 is_stmt 0 view .LVU1509
 4891 01a6 80F800E0 		strb	lr, [r0]
2120:src/display.c **** 	      *p = '0';
 4892              		.loc 1 2120 12 is_stmt 1 view .LVU1510
 4893              	.LVL544:
2120:src/display.c **** 	      *p = '0';
 4894              		.loc 1 2120 13 is_stmt 0 view .LVU1511
 4895 01aa 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 4896              	.LVL545:
2120:src/display.c **** 	      *p = '0';
 4897              		.loc 1 2120 12 view .LVU1512
 4898 01ae BCF1390F 		cmp	ip, #57
 4899 01b2 F8D0     		beq	.L483
 4900              	.L484:
2122:src/display.c **** 	  }
 4901              		.loc 1 2122 6 is_stmt 1 view .LVU1513
2122:src/display.c **** 	  }
 4902              		.loc 1 2122 10 is_stmt 0 view .LVU1514
 4903 01b4 0CF1010C 		add	ip, ip, #1
 4904 01b8 80F800C0 		strb	ip, [r0]
 4905              	.LVL546:
 4906              	.L657:
2122:src/display.c **** 	  }
 4907              		.loc 1 2122 10 view .LVU1515
 4908 01bc 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
 4909              	.L479:
2127:src/display.c **** 
 4910              		.loc 1 2127 2 is_stmt 1 view .LVU1516
 4911              	.LVL547:
2127:src/display.c **** 
 4912              		.loc 1 2127 45 view .LVU1517
2127:src/display.c **** 
 4913              		.loc 1 2127 2 is_stmt 0 view .LVU1518
 4914 01c0 28B1     		cbz	r0, .L490
 4915              	.LVL548:
 4916              	.L558:
2127:src/display.c **** 
 4917              		.loc 1 2127 62 view .LVU1519
 4918 01c2 3020     		movs	r0, #48
 4919              	.L491:
2127:src/display.c **** 
 4920              		.loc 1 2127 68 is_stmt 1 discriminator 3 view .LVU1520
2127:src/display.c **** 
 4921              		.loc 1 2127 57 discriminator 3 view .LVU1521
 4922              	.LVL549:
2127:src/display.c **** 
 4923              		.loc 1 2127 62 is_stmt 0 discriminator 3 view .LVU1522
 4924 01c4 03F8010B 		strb	r0, [r3], #1
 4925              	.LVL550:
2127:src/display.c **** 
 4926              		.loc 1 2127 45 is_stmt 1 discriminator 3 view .LVU1523
2127:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 173


 4927              		.loc 1 2127 2 is_stmt 0 discriminator 3 view .LVU1524
 4928 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4929 01ca 0029     		cmp	r1, #0
 4930 01cc FAD1     		bne	.L491
 4931              	.L490:
2129:src/display.c **** 	switch (mode) {
 4932              		.loc 1 2129 2 is_stmt 1 view .LVU1525
 4933              	.LVL551:
2130:src/display.c **** 	default:
 4934              		.loc 1 2130 2 view .LVU1526
 4935 01ce 022D     		cmp	r5, #2
 4936 01d0 00F07681 		beq	.L528
 4937 01d4 032D     		cmp	r5, #3
 4938 01d6 00F01881 		beq	.L493
 4939 01da 012D     		cmp	r5, #1
 4940 01dc 00F0F081 		beq	.L494
2133:src/display.c **** 	  if (count != *display_digits)
 4941              		.loc 1 2133 4 view .LVU1527
 4942              	.LVL552:
2133:src/display.c **** 	  if (count != *display_digits)
 4943              		.loc 1 2133 34 view .LVU1528
2133:src/display.c **** 	  if (count != *display_digits)
 4944              		.loc 1 2133 42 is_stmt 0 view .LVU1529
 4945 01e0 0298     		ldr	r0, [sp, #8]
 4946 01e2 26AB     		add	r3, sp, #152
 4947 01e4 0344     		add	r3, r3, r0
2133:src/display.c **** 	  if (count != *display_digits)
 4948              		.loc 1 2133 4 view .LVU1530
 4949 01e6 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 4950 01ea 302B     		cmp	r3, #48
 4951 01ec 40F09883 		bne	.L574
 4952 01f0 411E     		subs	r1, r0, #1
 4953 01f2 5944     		add	r1, r1, fp
 4954              	.LVL553:
 4955              	.L498:
2133:src/display.c **** 	  if (count != *display_digits)
 4956              		.loc 1 2133 66 is_stmt 1 discriminator 3 view .LVU1531
2133:src/display.c **** 	  if (count != *display_digits)
 4957              		.loc 1 2133 58 discriminator 3 view .LVU1532
2133:src/display.c **** 	  if (count != *display_digits)
 4958              		.loc 1 2133 42 is_stmt 0 discriminator 3 view .LVU1533
 4959 01f4 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2133:src/display.c **** 	  if (count != *display_digits)
 4960              		.loc 1 2133 4 discriminator 3 view .LVU1534
 4961 01f8 302D     		cmp	r5, #48
 4962 01fa 0346     		mov	r3, r0
2133:src/display.c **** 	  if (count != *display_digits)
 4963              		.loc 1 2133 63 discriminator 3 view .LVU1535
 4964 01fc 00F1FF30 		add	r0, r0, #-1
 4965              	.LVL554:
2133:src/display.c **** 	  if (count != *display_digits)
 4966              		.loc 1 2133 34 is_stmt 1 discriminator 3 view .LVU1536
2133:src/display.c **** 	  if (count != *display_digits)
 4967              		.loc 1 2133 4 is_stmt 0 discriminator 3 view .LVU1537
 4968 0200 F8D0     		beq	.L498
2134:src/display.c **** 	    count++;
 4969              		.loc 1 2134 4 is_stmt 1 view .LVU1538
ARM GAS  /tmp/ccKZqSeG.s 			page 174


2134:src/display.c **** 	    count++;
 4970              		.loc 1 2134 7 is_stmt 0 view .LVU1539
 4971 0202 0299     		ldr	r1, [sp, #8]
 4972 0204 8842     		cmp	r0, r1
 4973 0206 08BF     		it	eq
 4974 0208 0B46     		moveq	r3, r1
 4975              	.LVL555:
 4976              	.L497:
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4977              		.loc 1 2137 4 is_stmt 1 view .LVU1540
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4978              		.loc 1 2137 7 is_stmt 0 view .LVU1541
 4979 020a 0299     		ldr	r1, [sp, #8]
 4980 020c 8E42     		cmp	r6, r1
 4981 020e 80F20E81 		bge	.L499
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4982              		.loc 1 2137 47 discriminator 1 view .LVU1542
 4983 0212 591A     		subs	r1, r3, r1
2137:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 4984              		.loc 1 2137 31 discriminator 1 view .LVU1543
 4985 0214 B142     		cmp	r1, r6
 4986 0216 00F30A81 		bgt	.L499
2162:src/display.c **** 	    for(i=0; i<=exp; i++) {
 4987              		.loc 1 2162 11 is_stmt 1 view .LVU1544
2162:src/display.c **** 	    for(i=0; i<=exp; i++) {
 4988              		.loc 1 2162 14 is_stmt 0 view .LVU1545
 4989 021a 002E     		cmp	r6, #0
 4990 021c C0F29D83 		blt	.L508
 4991 0220 721C     		adds	r2, r6, #1
2164:src/display.c **** 		*obp++ = ',';
 4992              		.loc 1 2164 31 view .LVU1546
 4993 0222 DFF84CE1 		ldr	lr, .L682+12
 4994 0226 0592     		str	r2, [sp, #20]
 4995 0228 0BEB0200 		add	r0, fp, r2
2129:src/display.c **** 	switch (mode) {
 4996              		.loc 1 2129 4 view .LVU1547
 4997 022c DC46     		mov	ip, fp
1934:src/display.c **** 	int odig = 0;
 4998              		.loc 1 1934 15 view .LVU1548
 4999 022e 3946     		mov	r1, r7
 5000 0230 05E0     		b	.L509
 5001              	.LVL556:
 5002              	.L512:
2165:src/display.c **** 	      *obp++ = *p++;
 5003              		.loc 1 2165 3 is_stmt 1 view .LVU1549
2164:src/display.c **** 		*obp++ = ',';
 5004              		.loc 1 2164 18 is_stmt 0 view .LVU1550
 5005 0232 022D     		cmp	r5, #2
2165:src/display.c **** 	      *obp++ = *p++;
 5006              		.loc 1 2165 10 view .LVU1551
 5007 0234 05BF     		ittet	eq
 5008 0236 2C22     		moveq	r2, #44
 5009 0238 4A70     		strbeq	r2, [r1, #1]
2166:src/display.c **** 	      odig++;
 5010              		.loc 1 2166 12 view .LVU1552
 5011 023a 0131     		addne	r1, r1, #1
 5012              	.LVL557:
ARM GAS  /tmp/ccKZqSeG.s 			page 175


2165:src/display.c **** 	      *obp++ = *p++;
 5013              		.loc 1 2165 7 view .LVU1553
 5014 023c 0231     		addeq	r1, r1, #2
 5015              	.LVL558:
 5016              	.L509:
2166:src/display.c **** 	      odig++;
 5017              		.loc 1 2166 8 is_stmt 1 discriminator 2 view .LVU1554
2166:src/display.c **** 	      odig++;
 5018              		.loc 1 2166 15 is_stmt 0 discriminator 2 view .LVU1555
 5019 023e 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5020              	.LVL559:
2164:src/display.c **** 		*obp++ = ',';
 5021              		.loc 1 2164 8 is_stmt 1 discriminator 2 view .LVU1556
2166:src/display.c **** 	      odig++;
 5022              		.loc 1 2166 15 is_stmt 0 discriminator 2 view .LVU1557
 5023 0242 0A70     		strb	r2, [r1]
2167:src/display.c **** 	    }
 5024              		.loc 1 2167 8 is_stmt 1 discriminator 2 view .LVU1558
 5025              	.LVL560:
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5026              		.loc 1 2163 23 discriminator 2 view .LVU1559
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5027              		.loc 1 2163 15 discriminator 2 view .LVU1560
2164:src/display.c **** 		*obp++ = ',';
 5028              		.loc 1 2164 31 is_stmt 0 discriminator 2 view .LVU1561
 5029 0244 ABEB0C02 		sub	r2, fp, ip
 5030 0248 3244     		add	r2, r2, r6
 5031 024a 8EFB0285 		smull	r8, r5, lr, r2
 5032 024e A5EBE275 		sub	r5, r5, r2, asr #31
 5033 0252 05EB4505 		add	r5, r5, r5, lsl #1
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5034              		.loc 1 2163 6 discriminator 2 view .LVU1562
 5035 0256 6045     		cmp	r0, ip
2164:src/display.c **** 		*obp++ = ',';
 5036              		.loc 1 2164 31 discriminator 2 view .LVU1563
 5037 0258 A2EB0505 		sub	r5, r2, r5
2163:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5038              		.loc 1 2163 6 discriminator 2 view .LVU1564
 5039 025c E9D1     		bne	.L512
 5040 025e 059D     		ldr	r5, [sp, #20]
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5041              		.loc 1 2169 6 is_stmt 1 view .LVU1565
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5042              		.loc 1 2169 13 is_stmt 0 view .LVU1566
 5043 0260 2E22     		movs	r2, #46
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5044              		.loc 1 2170 9 view .LVU1567
 5045 0262 AB42     		cmp	r3, r5
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5046              		.loc 1 2169 13 view .LVU1568
 5047 0264 4A70     		strb	r2, [r1, #1]
2169:src/display.c **** 	    if (count > (exp + 1)) {
 5048              		.loc 1 2169 10 view .LVU1569
 5049 0266 01F10208 		add	r8, r1, #2
 5050              	.LVL561:
2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5051              		.loc 1 2170 6 is_stmt 1 view .LVU1570
ARM GAS  /tmp/ccKZqSeG.s 			page 176


2170:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5052              		.loc 1 2170 9 is_stmt 0 view .LVU1571
 5053 026a 40F34B81 		ble	.L506
 5054 026e 9A1B     		subs	r2, r3, r6
 5055 0270 0A44     		add	r2, r2, r1
 5056 0272 0131     		adds	r1, r1, #1
 5057              	.LVL562:
 5058              	.L513:
2172:src/display.c **** 		odig++;
 5059              		.loc 1 2172 3 is_stmt 1 discriminator 3 view .LVU1572
2172:src/display.c **** 		odig++;
 5060              		.loc 1 2172 10 is_stmt 0 discriminator 3 view .LVU1573
 5061 0274 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5062              	.LVL563:
2172:src/display.c **** 		odig++;
 5063              		.loc 1 2172 10 discriminator 3 view .LVU1574
 5064 0278 01F8015F 		strb	r5, [r1, #1]!
2173:src/display.c **** 	      }
 5065              		.loc 1 2173 3 is_stmt 1 discriminator 3 view .LVU1575
2171:src/display.c **** 		*obp++ = *p++;
 5066              		.loc 1 2171 31 discriminator 3 view .LVU1576
2171:src/display.c **** 		*obp++ = *p++;
 5067              		.loc 1 2171 22 discriminator 3 view .LVU1577
2171:src/display.c **** 		*obp++ = *p++;
 5068              		.loc 1 2171 8 is_stmt 0 discriminator 3 view .LVU1578
 5069 027c 9142     		cmp	r1, r2
 5070 027e F9D1     		bne	.L513
 5071 0280 F243     		mvns	r2, r6
 5072 0282 1A44     		add	r2, r2, r3
 5073 0284 9044     		add	r8, r8, r2
 5074              	.LVL564:
2173:src/display.c **** 	      }
 5075              		.loc 1 2173 7 view .LVU1579
 5076 0286 1D46     		mov	r5, r3
 5077 0288 3CE1     		b	.L506
 5078              	.LVL565:
 5079              	.L578:
2173:src/display.c **** 	      }
 5080              		.loc 1 2173 7 view .LVU1580
 5081 028a B846     		mov	r8, r7
 5082              	.LVL566:
 5083              	.L535:
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5084              		.loc 1 2265 2 is_stmt 1 view .LVU1581
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5085              		.loc 1 2265 5 is_stmt 0 view .LVU1582
 5086 028c 029B     		ldr	r3, [sp, #8]
 5087 028e 0A2B     		cmp	r3, #10
 5088 0290 02DD     		ble	.L538
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5089              		.loc 1 2265 50 discriminator 1 view .LVU1583
 5090 0292 002C     		cmp	r4, #0
 5091 0294 00F00E82 		beq	.L670
 5092              	.L538:
2271:src/display.c **** 	if (odig > *display_digits)
 5093              		.loc 1 2271 2 is_stmt 1 view .LVU1584
 5094 0298 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccKZqSeG.s 			page 177


 5095 029a 9D42     		cmp	r5, r3
 5096 029c A8BF     		it	ge
 5097 029e 1D46     		movge	r5, r3
 5098              	.LVL567:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5099              		.loc 1 2274 23 is_stmt 0 view .LVU1585
 5100 02a0 A3EB050A 		sub	r10, r3, r5
 5101              	.LVL568:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5102              		.loc 1 2274 23 view .LVU1586
 5103 02a4 1A46     		mov	r2, r3
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5104              		.loc 1 2274 4 view .LVU1587
 5105 02a6 0AEBCA0A 		add	r10, r10, r10, lsl #3
2271:src/display.c **** 	if (odig > *display_digits)
 5106              		.loc 1 2271 7 view .LVU1588
 5107 02aa 0023     		movs	r3, #0
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5108              		.loc 1 2275 5 view .LVU1589
 5109 02ac 9A45     		cmp	r10, r3
2271:src/display.c **** 	if (odig > *display_digits)
 5110              		.loc 1 2271 7 view .LVU1590
 5111 02ae 88F80030 		strb	r3, [r8]
2272:src/display.c **** 	  odig = *display_digits;
 5112              		.loc 1 2272 2 is_stmt 1 view .LVU1591
 5113              	.LVL569:
2274:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5114              		.loc 1 2274 2 view .LVU1592
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5115              		.loc 1 2275 2 view .LVU1593
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5116              		.loc 1 2275 5 is_stmt 0 view .LVU1594
 5117 02b2 04DD     		ble	.L539
2275:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5118              		.loc 1 2275 35 discriminator 1 view .LVU1595
 5119 02b4 16F57A7F 		cmn	r6, #1000
2276:src/display.c **** 	if (negative) {
 5120              		.loc 1 2276 4 is_stmt 1 discriminator 1 view .LVU1596
2276:src/display.c **** 	if (negative) {
 5121              		.loc 1 2276 6 is_stmt 0 discriminator 1 view .LVU1597
 5122 02b8 D8BF     		it	le
 5123 02ba AAF1090A 		suble	r10, r10, #9
 5124              	.LVL570:
 5125              	.L539:
2277:src/display.c **** 	  if (res) *res++ = '-';
 5126              		.loc 1 2277 2 is_stmt 1 view .LVU1598
2277:src/display.c **** 	  if (res) *res++ = '-';
 5127              		.loc 1 2277 5 is_stmt 0 view .LVU1599
 5128 02be 039B     		ldr	r3, [sp, #12]
 5129 02c0 2BB1     		cbz	r3, .L540
2278:src/display.c **** 	  else {
 5130              		.loc 1 2278 4 is_stmt 1 view .LVU1600
2278:src/display.c **** 	  else {
 5131              		.loc 1 2278 7 is_stmt 0 view .LVU1601
 5132 02c2 002C     		cmp	r4, #0
 5133 02c4 00F00582 		beq	.L541
2278:src/display.c **** 	  else {
ARM GAS  /tmp/ccKZqSeG.s 			page 178


 5134              		.loc 1 2278 13 is_stmt 1 discriminator 1 view .LVU1602
 5135              	.LVL571:
2278:src/display.c **** 	  else {
 5136              		.loc 1 2278 20 is_stmt 0 discriminator 1 view .LVU1603
 5137 02c8 2D23     		movs	r3, #45
 5138 02ca 04F8013B 		strb	r3, [r4], #1
 5139              	.LVL572:
 5140              	.L540:
2286:src/display.c **** 	  if (c == '.') {
 5141              		.loc 1 2286 12 is_stmt 1 discriminator 1 view .LVU1604
2286:src/display.c **** 	  if (c == '.') {
 5142              		.loc 1 2286 18 is_stmt 0 discriminator 1 view .LVU1605
 5143 02ce 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 5144              	.LVL573:
2286:src/display.c **** 	  if (c == '.') {
 5145              		.loc 1 2286 2 discriminator 1 view .LVU1606
 5146 02d2 C1B1     		cbz	r1, .L542
2286:src/display.c **** 	  if (c == '.') {
 5147              		.loc 1 2286 31 view .LVU1607
 5148 02d4 BAF16B0F 		cmp	r10, #107
 5149 02d8 15DC     		bgt	.L542
 5150              	.LVL574:
 5151              	.L543:
2290:src/display.c **** 	  } else {
 5152              		.loc 1 2290 12 view .LVU1608
 5153 02da 234B     		ldr	r3, .L682+4
2288:src/display.c **** 	  } else if (c == ',') {
 5154              		.loc 1 2288 12 view .LVU1609
 5155 02dc DFF894B0 		ldr	fp, .L682+16
 5156              	.LVL575:
 5157              	.L554:
2287:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5158              		.loc 1 2287 4 is_stmt 1 view .LVU1610
2287:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5159              		.loc 1 2287 7 is_stmt 0 view .LVU1611
 5160 02e0 2E29     		cmp	r1, #46
 5161 02e2 00F02481 		beq	.L671
2289:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5162              		.loc 1 2289 11 is_stmt 1 view .LVU1612
2289:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5163              		.loc 1 2289 14 is_stmt 0 view .LVU1613
 5164 02e6 2C29     		cmp	r1, #44
 5165 02e8 00F04B81 		beq	.L672
2292:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5166              		.loc 1 2292 6 is_stmt 1 view .LVU1614
 5167              	.LVL576:
 5168              	.LBB405:
 5169              	.LBI405:
 339:src/display.c ****   if (res) *res++ = ch;
 5170              		.loc 1 339 14 view .LVU1615
 5171              	.LBB406:
 340:src/display.c ****   else	set_dig(base, ch);
 5172              		.loc 1 340 3 view .LVU1616
 340:src/display.c ****   else	set_dig(base, ch);
 5173              		.loc 1 340 6 is_stmt 0 view .LVU1617
 5174 02ec 002C     		cmp	r4, #0
 5175 02ee 00F05D81 		beq	.L552
ARM GAS  /tmp/ccKZqSeG.s 			page 179


 340:src/display.c ****   else	set_dig(base, ch);
 5176              		.loc 1 340 12 is_stmt 1 view .LVU1618
 5177              	.LVL577:
 340:src/display.c ****   else	set_dig(base, ch);
 5178              		.loc 1 340 19 is_stmt 0 view .LVU1619
 5179 02f2 04F8011B 		strb	r1, [r4], #1
 5180              	.LVL578:
 5181              	.L553:
 342:src/display.c **** }
 5182              		.loc 1 342 3 is_stmt 1 view .LVU1620
 342:src/display.c **** }
 5183              		.loc 1 342 3 is_stmt 0 view .LVU1621
 5184              	.LBE406:
 5185              	.LBE405:
2293:src/display.c **** 	  }
 5186              		.loc 1 2293 6 is_stmt 1 view .LVU1622
2286:src/display.c **** 	  if (c == '.') {
 5187              		.loc 1 2286 18 is_stmt 0 view .LVU1623
 5188 02f6 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5189              	.LVL579:
2293:src/display.c **** 	  }
 5190              		.loc 1 2293 8 view .LVU1624
 5191 02fa 0AF1090A 		add	r10, r10, #9
 5192              	.LVL580:
2286:src/display.c **** 	  if (c == '.') {
 5193              		.loc 1 2286 53 is_stmt 1 view .LVU1625
2286:src/display.c **** 	  if (c == '.') {
 5194              		.loc 1 2286 12 view .LVU1626
2286:src/display.c **** 	  if (c == '.') {
 5195              		.loc 1 2286 2 is_stmt 0 view .LVU1627
 5196 02fe 11B1     		cbz	r1, .L542
2286:src/display.c **** 	  if (c == '.') {
 5197              		.loc 1 2286 31 discriminator 3 view .LVU1628
 5198 0300 BAF16B0F 		cmp	r10, #107
 5199 0304 ECDD     		ble	.L554
 5200              	.LVL581:
 5201              	.L542:
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5202              		.loc 1 2306 2 is_stmt 1 view .LVU1629
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5203              		.loc 1 2306 5 is_stmt 0 view .LVU1630
 5204 0306 B9F1000F 		cmp	r9, #0
 5205 030a 40F02381 		bne	.L673
 5206              	.L555:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5207              		.loc 1 2309 2 is_stmt 1 view .LVU1631
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5208              		.loc 1 2309 5 is_stmt 0 view .LVU1632
 5209 030e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5210 0312 2E2B     		cmp	r3, #46
 5211 0314 00F02881 		beq	.L674
 5212              	.LVL582:
 5213              	.L556:
2311:src/display.c ****       }
 5214              		.loc 1 2311 2 is_stmt 1 view .LVU1633
2311:src/display.c ****       }
 5215              		.loc 1 2311 18 is_stmt 0 view .LVU1634
ARM GAS  /tmp/ccKZqSeG.s 			page 180


 5216 0318 019B     		ldr	r3, [sp, #4]
 5217 031a 1D60     		str	r5, [r3]
 5218              	.LVL583:
 5219              	.L430:
2312:src/display.c **** 
 5220              		.loc 1 2312 7 view .LVU1635
 5221 031c 27B0     		add	sp, sp, #156
 5222              		.cfi_remember_state
 5223              		.cfi_def_cfa_offset 36
 5224              		@ sp needed
 5225 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5226              	.LVL584:
 5227              	.L438:
 5228              		.cfi_restore_state
2011:src/display.c **** 
 5229              		.loc 1 2011 4 is_stmt 1 view .LVU1636
 5230 0322 3946     		mov	r1, r7
 5231 0324 5046     		mov	r0, r10
 5232 0326 FFF7FEFF 		bl	decNumberToString
 5233              	.LVL585:
 5234 032a 9BE6     		b	.L440
 5235              	.LVL586:
 5236              	.L431:
1969:src/display.c **** 	    if (State2.hms) {
 5237              		.loc 1 1969 4 view .LVU1637
1969:src/display.c **** 	    if (State2.hms) {
 5238              		.loc 1 1969 25 is_stmt 0 view .LVU1638
 5239 032c 0D4B     		ldr	r3, .L682
 5240 032e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1969:src/display.c **** 	    if (State2.hms) {
 5241              		.loc 1 1969 22 view .LVU1639
 5242 0330 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1969:src/display.c **** 	    if (State2.hms) {
 5243              		.loc 1 1969 25 view .LVU1640
 5244 0332 01F00201 		and	r1, r1, #2
1969:src/display.c **** 	    if (State2.hms) {
 5245              		.loc 1 1969 22 view .LVU1641
 5246 0336 1143     		orrs	r1, r1, r2
 5247 0338 7FF471AE 		bne	.L434
1970:src/display.c **** 	      set_x_hms(z, res);
 5248              		.loc 1 1970 6 is_stmt 1 view .LVU1642
1970:src/display.c **** 	      set_x_hms(z, res);
 5249              		.loc 1 1970 10 is_stmt 0 view .LVU1643
 5250 033c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1970:src/display.c **** 	      set_x_hms(z, res);
 5251              		.loc 1 1970 9 view .LVU1644
 5252 033e DE07     		lsls	r6, r3, #31
 5253 0340 00F1EA82 		bmi	.L675
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5254              		.loc 1 1974 11 is_stmt 1 view .LVU1645
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5255              		.loc 1 1974 15 is_stmt 0 view .LVU1646
 5256 0344 094B     		ldr	r3, .L682+8
 5257 0346 1B68     		ldr	r3, [r3]
 5258 0348 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1974:src/display.c **** 	      if (set_x_fract(z, res))
 5259              		.loc 1 1974 14 view .LVU1647
ARM GAS  /tmp/ccKZqSeG.s 			page 181


 5260 034c 9806     		lsls	r0, r3, #26
 5261 034e 7FF566AE 		bpl	.L434
1975:src/display.c **** 		return;
 5262              		.loc 1 1975 8 is_stmt 1 view .LVU1648
1975:src/display.c **** 		return;
 5263              		.loc 1 1975 12 is_stmt 0 view .LVU1649
 5264 0352 2146     		mov	r1, r4
 5265 0354 5046     		mov	r0, r10
 5266 0356 FFF7FEFF 		bl	set_x_fract
 5267              	.LVL587:
1975:src/display.c **** 		return;
 5268              		.loc 1 1975 11 view .LVU1650
 5269 035a 0028     		cmp	r0, #0
 5270 035c 3FF45FAE 		beq	.L434
 5271 0360 DCE7     		b	.L430
 5272              	.L683:
 5273 0362 00BF     		.align	2
 5274              	.L682:
 5275 0364 00000000 		.word	StateWhileOn
 5276 0368 00000000 		.word	.LANCHOR0
 5277 036c 00000000 		.word	main_ram
 5278 0370 56555555 		.word	1431655766
 5279 0374 00000000 		.word	.LANCHOR1
 5280              	.LVL588:
 5281              	.L662:
2019:src/display.c **** 	  //  ALL mode: fill the display
 5282              		.loc 1 2019 38 discriminator 1 view .LVU1651
 5283 0378 019B     		ldr	r3, [sp, #4]
 5284 037a 1A68     		ldr	r2, [r3]
2019:src/display.c **** 	  //  ALL mode: fill the display
 5285              		.loc 1 2019 35 discriminator 1 view .LVU1652
 5286 037c 089B     		ldr	r3, [sp, #32]
2019:src/display.c **** 	  //  ALL mode: fill the display
 5287              		.loc 1 2019 23 discriminator 1 view .LVU1653
 5288 037e 9A42     		cmp	r2, r3
 5289 0380 11DD     		ble	.L453
2023:src/display.c **** 
 5290              		.loc 1 2023 4 is_stmt 1 view .LVU1654
2025:src/display.c **** 	  int orig_mode = mode;
 5291              		.loc 1 2025 23 is_stmt 0 view .LVU1655
 5292 0382 042D     		cmp	r5, #4
2023:src/display.c **** 
 5293              		.loc 1 2023 7 view .LVU1656
 5294 0384 0793     		str	r3, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 5295              		.loc 1 2025 2 is_stmt 1 view .LVU1657
2025:src/display.c **** 	  int orig_mode = mode;
 5296              		.loc 1 2025 23 is_stmt 0 view .LVU1658
 5297 0386 12D0     		beq	.L454
 5298              	.L676:
2025:src/display.c **** 	  int orig_mode = mode;
 5299              		.loc 1 2025 43 discriminator 2 view .LVU1659
 5300 0388 052D     		cmp	r5, #5
 5301 038a 00F08A81 		beq	.L455
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5302              		.loc 1 1955 6 view .LVU1660
 5303 038e 0023     		movs	r3, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 182


 5304 0390 0493     		str	r3, [sp, #16]
 5305 0392 80E6     		b	.L561
 5306              	.LVL589:
 5307              	.L663:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5308              		.loc 1 2050 17 is_stmt 1 discriminator 1 view .LVU1661
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5309              		.loc 1 2050 21 is_stmt 0 discriminator 1 view .LVU1662
 5310 0394 4421     		movs	r1, #68
 5311 0396 3846     		mov	r0, r7
 5312              	.LVL590:
2050:src/display.c **** 	if (q == NULL) exp = 0;
 5313              		.loc 1 2050 21 discriminator 1 view .LVU1663
 5314 0398 FFF7FEFF 		bl	find_char
 5315              	.LVL591:
2051:src/display.c **** 	else {
 5316              		.loc 1 2051 2 is_stmt 1 discriminator 1 view .LVU1664
2051:src/display.c **** 	else {
 5317              		.loc 1 2051 5 is_stmt 0 discriminator 1 view .LVU1665
 5318 039c 0646     		mov	r6, r0
 5319 039e 0028     		cmp	r0, #0
 5320 03a0 3FF493AE 		beq	.L457
 5321 03a4 89E6     		b	.L456
 5322              	.LVL592:
 5323              	.L453:
2021:src/display.c **** 	else
 5324              		.loc 1 2021 4 is_stmt 1 view .LVU1666
2021:src/display.c **** 	else
 5325              		.loc 1 2021 25 is_stmt 0 view .LVU1667
 5326 03a6 013A     		subs	r2, r2, #1
2025:src/display.c **** 	  int orig_mode = mode;
 5327              		.loc 1 2025 23 view .LVU1668
 5328 03a8 042D     		cmp	r5, #4
2021:src/display.c **** 	else
 5329              		.loc 1 2021 7 view .LVU1669
 5330 03aa 0792     		str	r2, [sp, #28]
2025:src/display.c **** 	  int orig_mode = mode;
 5331              		.loc 1 2025 2 is_stmt 1 view .LVU1670
2025:src/display.c **** 	  int orig_mode = mode;
 5332              		.loc 1 2025 23 is_stmt 0 view .LVU1671
 5333 03ac ECD1     		bne	.L676
 5334              	.L454:
 5335              	.LBB408:
2026:src/display.c **** 
 5336              		.loc 1 2026 4 is_stmt 1 view .LVU1672
 5337              	.LVL593:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5338              		.loc 1 2028 4 view .LVU1673
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5339              		.loc 1 2028 11 is_stmt 0 view .LVU1674
 5340 03ae 2A46     		mov	r2, r5
 5341 03b0 07A9     		add	r1, sp, #28
 5342 03b2 5046     		mov	r0, r10
 5343 03b4 FFF7FEFF 		bl	std_round_fix
 5344              	.LVL594:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5345              		.loc 1 2031 16 view .LVU1675
ARM GAS  /tmp/ccKZqSeG.s 			page 183


 5346 03b8 0123     		movs	r3, #1
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5347              		.loc 1 2028 11 view .LVU1676
 5348 03ba 0546     		mov	r5, r0
 5349              	.LVL595:
2029:src/display.c **** 	    // allow zeros to be trimmed
 5350              		.loc 1 2029 4 is_stmt 1 view .LVU1677
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5351              		.loc 1 2031 6 view .LVU1678
2032:src/display.c **** 	    dd = *display_digits - 1;
 5352              		.loc 1 2032 4 view .LVU1679
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5353              		.loc 1 2031 16 is_stmt 0 view .LVU1680
 5354 03bc 0493     		str	r3, [sp, #16]
 5355 03be 6AE6     		b	.L561
 5356              	.LVL596:
 5357              	.L669:
2031:src/display.c **** 	  if (orig_mode == MODE_STD)
 5358              		.loc 1 2031 16 view .LVU1681
 5359              	.LBE408:
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5360              		.loc 1 2111 7 view .LVU1682
 5361 03c0 5846     		mov	r0, fp
 5362              	.LVL597:
2112:src/display.c **** 	    mantissa[0] = '1';
 5363              		.loc 1 2112 41 view .LVU1683
 5364 03c2 4FF03008 		mov	r8, #48
 5365              	.L485:
 5366              	.LVL598:
2112:src/display.c **** 	    mantissa[0] = '1';
 5367              		.loc 1 2112 47 is_stmt 1 discriminator 3 view .LVU1684
2112:src/display.c **** 	    mantissa[0] = '1';
 5368              		.loc 1 2112 36 discriminator 3 view .LVU1685
2112:src/display.c **** 	    mantissa[0] = '1';
 5369              		.loc 1 2112 41 is_stmt 0 discriminator 3 view .LVU1686
 5370 03c6 00F8018B 		strb	r8, [r0], #1
 5371              	.LVL599:
2112:src/display.c **** 	    mantissa[0] = '1';
 5372              		.loc 1 2112 25 is_stmt 1 discriminator 3 view .LVU1687
2112:src/display.c **** 	    mantissa[0] = '1';
 5373              		.loc 1 2112 6 is_stmt 0 discriminator 3 view .LVU1688
 5374 03ca 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5375 03ce BCF1390F 		cmp	ip, #57
 5376 03d2 F8D0     		beq	.L485
 5377              	.LVL600:
 5378              	.L560:
2113:src/display.c **** 	    exp++;
 5379              		.loc 1 2113 6 is_stmt 1 view .LVU1689
2113:src/display.c **** 	    exp++;
 5380              		.loc 1 2113 18 is_stmt 0 view .LVU1690
 5381 03d4 3120     		movs	r0, #49
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5382              		.loc 1 2115 9 view .LVU1691
 5383 03d6 012D     		cmp	r5, #1
2114:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5384              		.loc 1 2114 9 view .LVU1692
 5385 03d8 06F10106 		add	r6, r6, #1
ARM GAS  /tmp/ccKZqSeG.s 			page 184


 5386              	.LVL601:
2113:src/display.c **** 	    exp++;
 5387              		.loc 1 2113 18 view .LVU1693
 5388 03dc 8DF85800 		strb	r0, [sp, #88]
2114:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5389              		.loc 1 2114 6 is_stmt 1 view .LVU1694
 5390              	.LVL602:
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5391              		.loc 1 2115 6 view .LVU1695
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5392              		.loc 1 2115 9 is_stmt 0 view .LVU1696
 5393 03e0 7FF4ECAE 		bne	.L657
2115:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5394              		.loc 1 2115 27 discriminator 1 view .LVU1697
 5395 03e4 0298     		ldr	r0, [sp, #8]
 5396 03e6 8642     		cmp	r6, r0
 5397 03e8 C0F2E580 		blt	.L487
2116:src/display.c **** 	      extra_digits = 0;
 5398              		.loc 1 2116 8 is_stmt 1 view .LVU1698
2116:src/display.c **** 	      extra_digits = 0;
 5399              		.loc 1 2116 28 is_stmt 0 view .LVU1699
 5400 03ec BF4B     		ldr	r3, .L684
 5401              	.LVL603:
2116:src/display.c **** 	      extra_digits = 0;
 5402              		.loc 1 2116 28 view .LVU1700
 5403 03ee 1B68     		ldr	r3, [r3]
 5404 03f0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2116:src/display.c **** 	      extra_digits = 0;
 5405              		.loc 1 2116 37 view .LVU1701
 5406 03f4 D906     		lsls	r1, r3, #27
 5407              	.LVL604:
2116:src/display.c **** 	      extra_digits = 0;
 5408              		.loc 1 2116 37 view .LVU1702
 5409 03f6 40F1D582 		bpl	.L677
 5410              	.LVL605:
2127:src/display.c **** 
 5411              		.loc 1 2127 2 is_stmt 1 view .LVU1703
 5412 03fa 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2127:src/display.c **** 
 5413              		.loc 1 2127 9 is_stmt 0 view .LVU1704
 5414 03fe 0BEB0E03 		add	r3, fp, lr
 5415              	.LVL606:
2127:src/display.c **** 
 5416              		.loc 1 2127 45 is_stmt 1 view .LVU1705
2116:src/display.c **** 	      extra_digits = 0;
 5417              		.loc 1 2116 37 is_stmt 0 view .LVU1706
 5418 0402 0325     		movs	r5, #3
2127:src/display.c **** 
 5419              		.loc 1 2127 2 view .LVU1707
 5420 0404 0029     		cmp	r1, #0
 5421 0406 7FF4DCAE 		bne	.L558
 5422              	.LVL607:
 5423              	.L493:
2229:src/display.c **** 	  case -1:
 5424              		.loc 1 2229 4 is_stmt 1 view .LVU1708
2229:src/display.c **** 	  case -1:
 5425              		.loc 1 2229 16 is_stmt 0 view .LVU1709
ARM GAS  /tmp/ccKZqSeG.s 			page 185


 5426 040a B94B     		ldr	r3, .L684+4
 5427 040c 83FB0613 		smull	r1, r3, r3, r6
 5428 0410 A3EBE673 		sub	r3, r3, r6, asr #31
 5429 0414 03EB4303 		add	r3, r3, r3, lsl #1
 5430 0418 F31A     		subs	r3, r6, r3
 5431 041a 0233     		adds	r3, r3, #2
 5432 041c 042B     		cmp	r3, #4
 5433 041e 4FD8     		bhi	.L528
 5434 0420 DFE813F0 		tbh	[pc, r3, lsl #1]
 5435              	.L530:
 5436 0424 2402     		.2byte	(.L531-.L530)/2
 5437 0426 1202     		.2byte	(.L529-.L530)/2
 5438 0428 4E00     		.2byte	(.L528-.L530)/2
 5439 042a 2402     		.2byte	(.L531-.L530)/2
 5440 042c 1202     		.2byte	(.L529-.L530)/2
 5441              	.LVL608:
 5442              		.p2align 1
 5443              	.L499:
2138:src/display.c **** 	    case -1:
 5444              		.loc 1 2138 6 is_stmt 1 view .LVU1710
2138:src/display.c **** 	    case -1:
 5445              		.loc 1 2138 32 is_stmt 0 view .LVU1711
 5446 042e AF48     		ldr	r0, .L684
2138:src/display.c **** 	    case -1:
 5447              		.loc 1 2138 19 view .LVU1712
 5448 0430 AF49     		ldr	r1, .L684+4
2138:src/display.c **** 	    case -1:
 5449              		.loc 1 2138 32 view .LVU1713
 5450 0432 0068     		ldr	r0, [r0]
2138:src/display.c **** 	    case -1:
 5451              		.loc 1 2138 19 view .LVU1714
 5452 0434 81FB0651 		smull	r5, r1, r1, r6
2138:src/display.c **** 	    case -1:
 5453              		.loc 1 2138 32 view .LVU1715
 5454 0438 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2138:src/display.c **** 	    case -1:
 5455              		.loc 1 2138 19 view .LVU1716
 5456 043c A1EBE671 		sub	r1, r1, r6, asr #31
 5457 0440 01EB4101 		add	r1, r1, r1, lsl #1
 5458 0444 711A     		subs	r1, r6, r1
2138:src/display.c **** 	    case -1:
 5459              		.loc 1 2138 32 view .LVU1717
 5460 0446 C0F30010 		ubfx	r0, r0, #4, #1
2138:src/display.c **** 	    case -1:
 5461              		.loc 1 2138 24 view .LVU1718
 5462 044a 01FB00F1 		mul	r1, r1, r0
 5463 044e 0231     		adds	r1, r1, #2
 5464 0450 0429     		cmp	r1, #4
 5465 0452 00F26782 		bhi	.L575
 5466 0456 DFE811F0 		tbh	[pc, r1, lsl #1]
 5467              	.L503:
 5468 045a 4302     		.2byte	(.L504-.L503)/2
 5469 045c 1802     		.2byte	(.L502-.L503)/2
 5470 045e 6502     		.2byte	(.L575-.L503)/2
 5471 0460 4302     		.2byte	(.L504-.L503)/2
 5472 0462 1802     		.2byte	(.L502-.L503)/2
 5473              	.LVL609:
ARM GAS  /tmp/ccKZqSeG.s 			page 186


 5474              		.p2align 1
 5475              	.L473:
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5476              		.loc 1 2094 4 is_stmt 1 view .LVU1719
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5477              		.loc 1 2094 7 is_stmt 0 view .LVU1720
 5478 0464 B342     		cmp	r3, r6
 5479 0466 03DD     		ble	.L476
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5480              		.loc 1 2094 45 discriminator 1 view .LVU1721
 5481 0468 5342     		rsbs	r3, r2, #0
2094:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5482              		.loc 1 2094 36 discriminator 1 view .LVU1722
 5483 046a B342     		cmp	r3, r6
 5484 046c 40F30282 		ble	.L477
 5485              	.L476:
2095:src/display.c **** 	  else {
 5486              		.loc 1 2095 6 is_stmt 1 view .LVU1723
2095:src/display.c **** 	  else {
 5487              		.loc 1 2095 26 is_stmt 0 view .LVU1724
 5488 0470 9E4B     		ldr	r3, .L684
 5489 0472 1B68     		ldr	r3, [r3]
 5490 0474 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2095:src/display.c **** 	  else {
 5491              		.loc 1 2095 35 view .LVU1725
 5492 0478 13F0100F 		tst	r3, #16
 5493 047c 14BF     		ite	ne
 5494 047e 0325     		movne	r5, #3
 5495              	.LVL610:
2095:src/display.c **** 	  else {
 5496              		.loc 1 2095 35 view .LVU1726
 5497 0480 0225     		moveq	r5, #2
 5498 0482 6CE6     		b	.L658
 5499              	.LVL611:
 5500              	.L667:
2095:src/display.c **** 	  else {
 5501              		.loc 1 2095 35 view .LVU1727
 5502 0484 013E     		subs	r6, r6, #1
 5503 0486 08EB0602 		add	r2, r8, r6
 5504              	.L466:
2074:src/display.c **** 	    exp--;
 5505              		.loc 1 2074 4 is_stmt 1 discriminator 1 view .LVU1728
2075:src/display.c **** 	  while (*++q == '0');
 5506              		.loc 1 2075 6 discriminator 1 view .LVU1729
 5507 048a A2EB0806 		sub	r6, r2, r8
 5508              	.LVL612:
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5509              		.loc 1 2076 10 discriminator 1 view .LVU1730
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5510              		.loc 1 2076 11 is_stmt 0 discriminator 1 view .LVU1731
 5511 048e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5512              	.LVL613:
2076:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5513              		.loc 1 2076 4 discriminator 1 view .LVU1732
 5514 0492 302B     		cmp	r3, #48
 5515 0494 F9D0     		beq	.L466
2077:src/display.c **** 	    *p++ = *q++;
ARM GAS  /tmp/ccKZqSeG.s 			page 187


 5516              		.loc 1 2077 10 is_stmt 1 view .LVU1733
 5517 0496 A3F13002 		sub	r2, r3, #48
 5518 049a 092A     		cmp	r2, #9
 5519 049c 3FF658AE 		bhi	.L467
1940:src/display.c **** 	char *r;
 5520              		.loc 1 1940 8 is_stmt 0 view .LVU1734
 5521 04a0 5A46     		mov	r2, fp
 5522              	.LVL614:
 5523              	.L468:
2078:src/display.c **** 	} else {
 5524              		.loc 1 2078 6 is_stmt 1 view .LVU1735
2078:src/display.c **** 	} else {
 5525              		.loc 1 2078 11 is_stmt 0 view .LVU1736
 5526 04a2 02F8013B 		strb	r3, [r2], #1
 5527              	.LVL615:
2077:src/display.c **** 	    *p++ = *q++;
 5528              		.loc 1 2077 10 is_stmt 1 view .LVU1737
2077:src/display.c **** 	    *p++ = *q++;
 5529              		.loc 1 2077 11 is_stmt 0 view .LVU1738
 5530 04a6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2077:src/display.c **** 	    *p++ = *q++;
 5531              		.loc 1 2077 10 view .LVU1739
 5532 04aa A3F13001 		sub	r1, r3, #48
 5533 04ae 0929     		cmp	r1, #9
 5534 04b0 F7D9     		bls	.L468
 5535 04b2 4DE6     		b	.L467
 5536              	.LVL616:
 5537              	.L665:
2068:src/display.c **** 	  q++;
 5538              		.loc 1 2068 4 is_stmt 1 view .LVU1740
2069:src/display.c **** 	} else if (*q == '+')
 5539              		.loc 1 2069 4 view .LVU1741
2068:src/display.c **** 	  q++;
 5540              		.loc 1 2068 13 is_stmt 0 view .LVU1742
 5541 04b4 0122     		movs	r2, #1
 5542 04b6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5543 04ba 0392     		str	r2, [sp, #12]
2069:src/display.c **** 	} else if (*q == '+')
 5544              		.loc 1 2069 5 view .LVU1743
 5545 04bc 9044     		add	r8, r8, r2
 5546              	.LVL617:
2069:src/display.c **** 	} else if (*q == '+')
 5547              		.loc 1 2069 5 view .LVU1744
 5548 04be 1AE6     		b	.L462
 5549              	.LVL618:
 5550              	.L528:
2069:src/display.c **** 	} else if (*q == '+')
 5551              		.loc 1 2069 5 view .LVU1745
 5552 04c0 079A     		ldr	r2, [sp, #28]
2229:src/display.c **** 	  case -1:
 5553              		.loc 1 2229 16 view .LVU1746
 5554 04c2 0125     		movs	r5, #1
1934:src/display.c **** 	int odig = 0;
 5555              		.loc 1 1934 15 view .LVU1747
 5556 04c4 3946     		mov	r1, r7
 5557              	.LVL619:
 5558              	.L496:
ARM GAS  /tmp/ccKZqSeG.s 			page 188


2243:src/display.c **** 	  };
 5559              		.loc 1 2243 6 is_stmt 1 view .LVU1748
2244:src/display.c **** 	  // Falling through
 5560              		.loc 1 2244 5 view .LVU1749
2248:src/display.c **** 	  odig++;
 5561              		.loc 1 2248 4 view .LVU1750
2248:src/display.c **** 	  odig++;
 5562              		.loc 1 2248 15 is_stmt 0 view .LVU1751
 5563 04c6 5B46     		mov	r3, fp
 5564              	.LVL620:
2248:src/display.c **** 	  odig++;
 5565              		.loc 1 2248 11 view .LVU1752
 5566 04c8 8846     		mov	r8, r1
 5567 04ca 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5568              	.LVL621:
2248:src/display.c **** 	  odig++;
 5569              		.loc 1 2248 11 view .LVU1753
 5570 04ce 08F8020B 		strb	r0, [r8], #2
2249:src/display.c **** 	  *obp++ = '.';
 5571              		.loc 1 2249 4 is_stmt 1 view .LVU1754
2250:src/display.c **** 	  dd--;
 5572              		.loc 1 2250 4 view .LVU1755
 5573              	.LVL622:
2250:src/display.c **** 	  dd--;
 5574              		.loc 1 2250 11 is_stmt 0 view .LVU1756
 5575 04d2 4FF02E0C 		mov	ip, #46
2252:src/display.c **** 	    *obp++ = *p++;
 5576              		.loc 1 2252 13 view .LVU1757
 5577 04d6 901E     		subs	r0, r2, #2
2252:src/display.c **** 	    *obp++ = *p++;
 5578              		.loc 1 2252 10 view .LVU1758
 5579 04d8 002A     		cmp	r2, #0
2250:src/display.c **** 	  dd--;
 5580              		.loc 1 2250 11 view .LVU1759
 5581 04da 81F801C0 		strb	ip, [r1, #1]
2251:src/display.c **** 	  while (dd-- >= 0) {
 5582              		.loc 1 2251 4 is_stmt 1 view .LVU1760
2252:src/display.c **** 	    *obp++ = *p++;
 5583              		.loc 1 2252 4 view .LVU1761
2252:src/display.c **** 	    *obp++ = *p++;
 5584              		.loc 1 2252 10 view .LVU1762
2252:src/display.c **** 	    *obp++ = *p++;
 5585              		.loc 1 2252 13 is_stmt 0 view .LVU1763
 5586 04de 0790     		str	r0, [sp, #28]
2252:src/display.c **** 	    *obp++ = *p++;
 5587              		.loc 1 2252 10 view .LVU1764
 5588 04e0 40F32382 		ble	.L576
2252:src/display.c **** 	    *obp++ = *p++;
 5589              		.loc 1 2252 10 view .LVU1765
 5590 04e4 501C     		adds	r0, r2, #1
 5591 04e6 0131     		adds	r1, r1, #1
 5592 04e8 8344     		add	fp, fp, r0
 5593              	.LVL623:
 5594              	.L534:
2253:src/display.c **** 	    odig++;
 5595              		.loc 1 2253 6 is_stmt 1 view .LVU1766
2253:src/display.c **** 	    odig++;
ARM GAS  /tmp/ccKZqSeG.s 			page 189


 5596              		.loc 1 2253 13 is_stmt 0 view .LVU1767
 5597 04ea 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5598              	.LVL624:
2253:src/display.c **** 	    odig++;
 5599              		.loc 1 2253 13 view .LVU1768
 5600 04ee 01F8010F 		strb	r0, [r1, #1]!
2254:src/display.c **** 	  }
 5601              		.loc 1 2254 6 is_stmt 1 view .LVU1769
2252:src/display.c **** 	    *obp++ = *p++;
 5602              		.loc 1 2252 10 view .LVU1770
 5603 04f2 5B45     		cmp	r3, fp
 5604 04f4 F9D1     		bne	.L534
 5605 04f6 6FF00103 		mvn	r3, #1
 5606              	.LVL625:
2252:src/display.c **** 	    *obp++ = *p++;
 5607              		.loc 1 2252 10 is_stmt 0 view .LVU1771
 5608 04fa 9044     		add	r8, r8, r2
 5609 04fc 1544     		add	r5, r5, r2
 5610 04fe 0793     		str	r3, [sp, #28]
2256:src/display.c **** 	}
 5611              		.loc 1 2256 13 view .LVU1772
 5612 0500 4FF00109 		mov	r9, #1
 5613              	.L506:
 5614              	.LVL626:
2259:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5615              		.loc 1 2259 2 is_stmt 1 view .LVU1773
2259:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5616              		.loc 1 2259 5 is_stmt 0 view .LVU1774
 5617 0504 049B     		ldr	r3, [sp, #16]
 5618 0506 002B     		cmp	r3, #0
 5619 0508 3FF4C0AE 		beq	.L535
2260:src/display.c **** 	    obp--;
 5620              		.loc 1 2260 10 is_stmt 1 view .LVU1775
 5621 050c B845     		cmp	r8, r7
 5622 050e 7FF6BDAE 		bls	.L535
 5623 0512 4346     		mov	r3, r8
 5624 0514 04E0     		b	.L536
 5625              	.LVL627:
 5626              	.L537:
2260:src/display.c **** 	    obp--;
 5627              		.loc 1 2260 10 is_stmt 0 view .LVU1776
 5628 0516 9F42     		cmp	r7, r3
2262:src/display.c **** 	  }
 5629              		.loc 1 2262 10 view .LVU1777
 5630 0518 05F1FF35 		add	r5, r5, #-1
 5631              	.LVL628:
2260:src/display.c **** 	    obp--;
 5632              		.loc 1 2260 10 is_stmt 1 view .LVU1778
 5633 051c 3FF4B5AE 		beq	.L578
 5634              	.LVL629:
 5635              	.L536:
2261:src/display.c **** 	    odig--;
 5636              		.loc 1 2261 6 discriminator 1 view .LVU1779
 5637 0520 9846     		mov	r8, r3
 5638              	.LVL630:
2261:src/display.c **** 	    odig--;
 5639              		.loc 1 2261 6 is_stmt 0 discriminator 1 view .LVU1780
ARM GAS  /tmp/ccKZqSeG.s 			page 190


 5640 0522 013B     		subs	r3, r3, #1
 5641              	.LVL631:
2262:src/display.c **** 	  }
 5642              		.loc 1 2262 6 is_stmt 1 discriminator 1 view .LVU1781
2260:src/display.c **** 	    obp--;
 5643              		.loc 1 2260 19 is_stmt 0 discriminator 1 view .LVU1782
 5644 0524 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5645 0528 302A     		cmp	r2, #48
 5646 052a F4D0     		beq	.L537
2260:src/display.c **** 	    obp--;
 5647              		.loc 1 2260 19 discriminator 1 view .LVU1783
 5648 052c AEE6     		b	.L535
 5649              	.LVL632:
 5650              	.L671:
2288:src/display.c **** 	  } else if (c == ',') {
 5651              		.loc 1 2288 6 is_stmt 1 view .LVU1784
2288:src/display.c **** 	  } else if (c == ',') {
 5652              		.loc 1 2288 12 is_stmt 0 view .LVU1785
 5653 052e 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 5654              	.LVL633:
 5655              	.LBB409:
 5656              	.LBI409:
 293:src/display.c ****   if (res) {
 5657              		.loc 1 293 14 is_stmt 1 view .LVU1786
 5658              	.LBB410:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5659              		.loc 1 294 3 view .LVU1787
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5660              		.loc 1 294 6 is_stmt 0 view .LVU1788
 5661 0532 002C     		cmp	r4, #0
 5662 0534 33D0     		beq	.L546
 295:src/display.c ****   } else {
 5663              		.loc 1 295 5 is_stmt 1 view .LVU1789
 295:src/display.c ****   } else {
 5664              		.loc 1 295 12 is_stmt 0 view .LVU1790
 5665 0536 0029     		cmp	r1, #0
 5666              	.LVL634:
 295:src/display.c ****   } else {
 5667              		.loc 1 295 12 view .LVU1791
 5668 0538 0CBF     		ite	eq
 5669 053a 2E22     		moveq	r2, #46
 5670 053c 2C22     		movne	r2, #44
 5671 053e 04F8012B 		strb	r2, [r4], #1
 5672              	.LVL635:
 5673              	.L548:
 295:src/display.c ****   } else {
 5674              		.loc 1 295 12 view .LVU1792
 5675              	.LBE410:
 5676              	.LBE409:
2286:src/display.c **** 	  if (c == '.') {
 5677              		.loc 1 2286 53 is_stmt 1 view .LVU1793
2286:src/display.c **** 	  if (c == '.') {
 5678              		.loc 1 2286 12 view .LVU1794
2286:src/display.c **** 	  if (c == '.') {
 5679              		.loc 1 2286 18 is_stmt 0 view .LVU1795
 5680 0542 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5681              	.LVL636:
ARM GAS  /tmp/ccKZqSeG.s 			page 191


2286:src/display.c **** 	  if (c == '.') {
 5682              		.loc 1 2286 2 view .LVU1796
 5683 0546 0029     		cmp	r1, #0
 5684 0548 7FF4CAAE 		bne	.L554
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5685              		.loc 1 2306 2 is_stmt 1 view .LVU1797
2306:src/display.c **** 	  set_exp(exp, 0, res);
 5686              		.loc 1 2306 5 is_stmt 0 view .LVU1798
 5687 054c B9F1000F 		cmp	r9, #0
 5688 0550 3FF4DDAE 		beq	.L555
 5689              	.LVL637:
 5690              	.L673:
2307:src/display.c **** #endif
 5691              		.loc 1 2307 4 is_stmt 1 view .LVU1799
 5692 0554 3046     		mov	r0, r6
 5693 0556 2246     		mov	r2, r4
 5694 0558 0021     		movs	r1, #0
 5695              	.LVL638:
2307:src/display.c **** #endif
 5696              		.loc 1 2307 4 is_stmt 0 view .LVU1800
 5697 055a FFF7FEFF 		bl	set_exp
 5698              	.LVL639:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5699              		.loc 1 2309 2 is_stmt 1 view .LVU1801
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5700              		.loc 1 2309 5 is_stmt 0 view .LVU1802
 5701 055e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5702 0562 2E2B     		cmp	r3, #46
 5703 0564 7FF4D8AE 		bne	.L556
 5704              	.L674:
2309:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5705              		.loc 1 2309 21 discriminator 1 view .LVU1803
 5706 0568 002C     		cmp	r4, #0
 5707 056a 7FF4D5AE 		bne	.L556
2310:src/display.c **** 	*display_digits = odig;
 5708              		.loc 1 2310 4 is_stmt 1 view .LVU1804
 5709              	.LVL640:
 5710              	.LBB412:
 5711              	.LBI412:
 293:src/display.c ****   if (res) {
 5712              		.loc 1 293 14 view .LVU1805
 5713              	.LBB413:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5714              		.loc 1 294 3 view .LVU1806
 5715              	.LBE413:
 5716              	.LBE412:
2310:src/display.c **** 	*display_digits = odig;
 5717              		.loc 1 2310 33 is_stmt 0 view .LVU1807
 5718 056e 019B     		ldr	r3, [sp, #4]
 5719 0570 1868     		ldr	r0, [r3]
2310:src/display.c **** 	*display_digits = odig;
 5720              		.loc 1 2310 4 view .LVU1808
 5721 0572 604B     		ldr	r3, .L684+8
2310:src/display.c **** 	*display_digits = odig;
 5722              		.loc 1 2310 33 view .LVU1809
 5723 0574 0138     		subs	r0, r0, #1
 5724              	.LBB415:
ARM GAS  /tmp/ccKZqSeG.s 			page 192


 5725              	.LBB414:
 5726 0576 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5727 0578 00EBC000 		add	r0, r0, r0, lsl #3
 5728 057c FFF7FEFF 		bl	set_decimal.part.0
 5729              	.LVL641:
 301:src/display.c **** }
 5730              		.loc 1 301 3 is_stmt 1 view .LVU1810
 301:src/display.c **** }
 5731              		.loc 1 301 10 is_stmt 0 view .LVU1811
 5732 0580 CAE6     		b	.L556
 5733              	.LVL642:
 5734              	.L672:
 301:src/display.c **** }
 5735              		.loc 1 301 10 view .LVU1812
 5736              	.LBE414:
 5737              	.LBE415:
2290:src/display.c **** 	  } else {
 5738              		.loc 1 2290 6 is_stmt 1 view .LVU1813
2290:src/display.c **** 	  } else {
 5739              		.loc 1 2290 12 is_stmt 0 view .LVU1814
 5740 0582 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5741              	.LVL643:
 5742              	.LBB416:
 5743              	.LBI416:
 308:src/display.c ****   if (sep == SEP_NONE)
 5744              		.loc 1 308 14 is_stmt 1 view .LVU1815
 5745              	.LBB417:
 309:src/display.c ****     return res;
 5746              		.loc 1 309 3 view .LVU1816
 309:src/display.c ****     return res;
 5747              		.loc 1 309 6 is_stmt 0 view .LVU1817
 5748 0584 002A     		cmp	r2, #0
 5749 0586 DCD0     		beq	.L548
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5750              		.loc 1 311 3 is_stmt 1 view .LVU1818
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5751              		.loc 1 311 6 is_stmt 0 view .LVU1819
 5752 0588 002C     		cmp	r4, #0
 5753 058a 00F02781 		beq	.L550
 312:src/display.c ****     else *res++ = '.';
 5754              		.loc 1 312 5 is_stmt 1 view .LVU1820
 312:src/display.c ****     else *res++ = '.';
 5755              		.loc 1 312 8 is_stmt 0 view .LVU1821
 5756 058e 012A     		cmp	r2, #1
 312:src/display.c ****     else *res++ = '.';
 5757              		.loc 1 312 27 is_stmt 1 view .LVU1822
 5758              	.LVL644:
 313:src/display.c ****   } else {
 5759              		.loc 1 313 17 is_stmt 0 view .LVU1823
 5760 0590 16BF     		itet	ne
 5761 0592 2E22     		movne	r2, #46
 5762              	.LVL645:
 312:src/display.c ****     else *res++ = '.';
 5763              		.loc 1 312 34 view .LVU1824
 5764 0594 04F8011B 		strbeq	r1, [r4], #1
 5765              	.LVL646:
 313:src/display.c ****   } else {
ARM GAS  /tmp/ccKZqSeG.s 			page 193


 5766              		.loc 1 313 10 is_stmt 1 view .LVU1825
 313:src/display.c ****   } else {
 5767              		.loc 1 313 17 is_stmt 0 view .LVU1826
 5768 0598 04F8012B 		strbne	r2, [r4], #1
 5769              	.LVL647:
 313:src/display.c ****   } else {
 5770              		.loc 1 313 17 view .LVU1827
 5771 059c D1E7     		b	.L548
 5772              	.LVL648:
 5773              	.L546:
 313:src/display.c ****   } else {
 5774              		.loc 1 313 17 view .LVU1828
 5775              	.LBE417:
 5776              	.LBE416:
 5777              	.LBB419:
 5778              	.LBB411:
 5779 059e AAF10900 		sub	r0, r10, #9
 5780 05a2 FFF7FEFF 		bl	set_decimal.part.0
 5781              	.LVL649:
 313:src/display.c ****   } else {
 5782              		.loc 1 313 17 view .LVU1829
 5783 05a6 544B     		ldr	r3, .L684+12
 5784 05a8 0446     		mov	r4, r0
 5785              	.LVL650:
 313:src/display.c ****   } else {
 5786              		.loc 1 313 17 view .LVU1830
 5787 05aa CAE7     		b	.L548
 5788              	.LVL651:
 5789              	.L552:
 313:src/display.c ****   } else {
 5790              		.loc 1 313 17 view .LVU1831
 5791              	.LBE411:
 5792              	.LBE419:
 5793              	.LBB420:
 5794              	.LBB407:
 341:src/display.c ****   return res;
 5795              		.loc 1 341 8 is_stmt 1 view .LVU1832
 5796 05ac 5046     		mov	r0, r10
 5797 05ae FFF7FEFF 		bl	set_dig
 5798              	.LVL652:
 341:src/display.c ****   return res;
 5799              		.loc 1 341 8 is_stmt 0 view .LVU1833
 5800 05b2 514B     		ldr	r3, .L684+12
 5801 05b4 9FE6     		b	.L553
 5802              	.LVL653:
 5803              	.L487:
 341:src/display.c ****   return res;
 5804              		.loc 1 341 8 view .LVU1834
 5805              	.LBE407:
 5806              	.LBE420:
2127:src/display.c **** 
 5807              		.loc 1 2127 2 is_stmt 1 view .LVU1835
2127:src/display.c **** 
 5808              		.loc 1 2127 45 view .LVU1836
2127:src/display.c **** 
 5809              		.loc 1 2127 2 is_stmt 0 view .LVU1837
 5810 05b6 1BF80110 		ldrb	r1, [fp, r1]	@ zero_extendqisi2
ARM GAS  /tmp/ccKZqSeG.s 			page 194


 5811 05ba 0029     		cmp	r1, #0
 5812 05bc 7FF401AE 		bne	.L558
 5813              	.LVL654:
 5814              	.L494:
2192:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5815              		.loc 1 2192 4 is_stmt 1 view .LVU1838
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5816              		.loc 1 2193 4 view .LVU1839
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5817              		.loc 1 2193 7 is_stmt 0 view .LVU1840
 5818 05c0 002E     		cmp	r6, #0
 5819 05c2 C0F21281 		blt	.L517
2193:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5820              		.loc 1 2193 7 view .LVU1841
 5821 05c6 731C     		adds	r3, r6, #1
2195:src/display.c **** 		*obp++ = ',';
 5822              		.loc 1 2195 31 view .LVU1842
 5823 05c8 DFF824E1 		ldr	lr, .L684+4
 5824 05cc 0593     		str	r3, [sp, #20]
 5825 05ce 0BEB030C 		add	ip, fp, r3
2129:src/display.c **** 	switch (mode) {
 5826              		.loc 1 2129 4 view .LVU1843
 5827 05d2 5D46     		mov	r5, fp
1934:src/display.c **** 	int odig = 0;
 5828              		.loc 1 1934 15 view .LVU1844
 5829 05d4 3846     		mov	r0, r7
 5830 05d6 05E0     		b	.L518
 5831              	.LVL655:
 5832              	.L521:
2196:src/display.c **** 	      *obp++ = *p++;
 5833              		.loc 1 2196 3 is_stmt 1 view .LVU1845
2195:src/display.c **** 		*obp++ = ',';
 5834              		.loc 1 2195 18 is_stmt 0 view .LVU1846
 5835 05d8 0229     		cmp	r1, #2
2196:src/display.c **** 	      *obp++ = *p++;
 5836              		.loc 1 2196 10 view .LVU1847
 5837 05da 05BF     		ittet	eq
 5838 05dc 2C23     		moveq	r3, #44
 5839 05de 4370     		strbeq	r3, [r0, #1]
2197:src/display.c **** 	      odig++;
 5840              		.loc 1 2197 12 view .LVU1848
 5841 05e0 0130     		addne	r0, r0, #1
 5842              	.LVL656:
2196:src/display.c **** 	      *obp++ = *p++;
 5843              		.loc 1 2196 7 view .LVU1849
 5844 05e2 0230     		addeq	r0, r0, #2
 5845              	.LVL657:
 5846              	.L518:
2197:src/display.c **** 	      odig++;
 5847              		.loc 1 2197 8 is_stmt 1 discriminator 2 view .LVU1850
2197:src/display.c **** 	      odig++;
 5848              		.loc 1 2197 15 is_stmt 0 discriminator 2 view .LVU1851
 5849 05e4 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 5850              	.LVL658:
2195:src/display.c **** 		*obp++ = ',';
 5851              		.loc 1 2195 8 is_stmt 1 discriminator 2 view .LVU1852
2197:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccKZqSeG.s 			page 195


 5852              		.loc 1 2197 15 is_stmt 0 discriminator 2 view .LVU1853
 5853 05e8 0370     		strb	r3, [r0]
2198:src/display.c **** 	    }
 5854              		.loc 1 2198 8 is_stmt 1 discriminator 2 view .LVU1854
 5855              	.LVL659:
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5856              		.loc 1 2194 24 discriminator 2 view .LVU1855
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5857              		.loc 1 2194 16 discriminator 2 view .LVU1856
2195:src/display.c **** 		*obp++ = ',';
 5858              		.loc 1 2195 31 is_stmt 0 discriminator 2 view .LVU1857
 5859 05ea ABEB0503 		sub	r3, fp, r5
 5860 05ee 3344     		add	r3, r3, r6
 5861 05f0 8EFB0381 		smull	r8, r1, lr, r3
 5862 05f4 A1EBE371 		sub	r1, r1, r3, asr #31
 5863 05f8 01EB4101 		add	r1, r1, r1, lsl #1
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5864              		.loc 1 2194 6 discriminator 2 view .LVU1858
 5865 05fc AC45     		cmp	ip, r5
2195:src/display.c **** 		*obp++ = ',';
 5866              		.loc 1 2195 31 discriminator 2 view .LVU1859
 5867 05fe A3EB0101 		sub	r1, r3, r1
2194:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5868              		.loc 1 2194 6 discriminator 2 view .LVU1860
 5869 0602 E9D1     		bne	.L521
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5870              		.loc 1 2200 13 view .LVU1861
 5871 0604 2E23     		movs	r3, #46
2201:src/display.c **** 	      *obp++ = *p++;
 5872              		.loc 1 2201 6 view .LVU1862
 5873 0606 002A     		cmp	r2, #0
 5874 0608 059D     		ldr	r5, [sp, #20]
 5875              	.LVL660:
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5876              		.loc 1 2200 6 is_stmt 1 view .LVU1863
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5877              		.loc 1 2200 13 is_stmt 0 view .LVU1864
 5878 060a 4370     		strb	r3, [r0, #1]
2200:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5879              		.loc 1 2200 10 view .LVU1865
 5880 060c 00F10208 		add	r8, r0, #2
 5881              	.LVL661:
2201:src/display.c **** 	      *obp++ = *p++;
 5882              		.loc 1 2201 6 is_stmt 1 view .LVU1866
2201:src/display.c **** 	      *obp++ = *p++;
 5883              		.loc 1 2201 16 view .LVU1867
2201:src/display.c **** 	      *obp++ = *p++;
 5884              		.loc 1 2201 6 is_stmt 0 view .LVU1868
 5885 0610 7FF778AF 		ble	.L506
 5886 0614 0130     		adds	r0, r0, #1
 5887 0616 0CEB0201 		add	r1, ip, r2
 5888              	.LVL662:
 5889              	.L522:
2202:src/display.c **** 	      odig++;
 5890              		.loc 1 2202 8 is_stmt 1 discriminator 4 view .LVU1869
2202:src/display.c **** 	      odig++;
 5891              		.loc 1 2202 15 is_stmt 0 discriminator 4 view .LVU1870
ARM GAS  /tmp/ccKZqSeG.s 			page 196


 5892 061a 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5893              	.LVL663:
2202:src/display.c **** 	      odig++;
 5894              		.loc 1 2202 15 discriminator 4 view .LVU1871
 5895 061e 00F8013F 		strb	r3, [r0, #1]!
2203:src/display.c **** 	    }
 5896              		.loc 1 2203 8 is_stmt 1 discriminator 4 view .LVU1872
2201:src/display.c **** 	      *obp++ = *p++;
 5897              		.loc 1 2201 43 discriminator 4 view .LVU1873
2201:src/display.c **** 	      *obp++ = *p++;
 5898              		.loc 1 2201 16 discriminator 4 view .LVU1874
2201:src/display.c **** 	      *obp++ = *p++;
 5899              		.loc 1 2201 6 is_stmt 0 discriminator 4 view .LVU1875
 5900 0622 8C45     		cmp	ip, r1
 5901 0624 F9D1     		bne	.L522
 5902 0626 059B     		ldr	r3, [sp, #20]
 5903 0628 1344     		add	r3, r3, r2
 5904 062a 9044     		add	r8, r8, r2
 5905              	.LVL664:
2201:src/display.c **** 	      *obp++ = *p++;
 5906              		.loc 1 2201 6 discriminator 4 view .LVU1876
 5907 062c 1D46     		mov	r5, r3
 5908 062e 69E7     		b	.L506
 5909              	.LVL665:
 5910              	.L659:
1997:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5911              		.loc 1 1997 4 is_stmt 1 view .LVU1877
 5912 0630 324A     		ldr	r2, .L684+16
 5913 0632 5146     		mov	r1, r10
 5914 0634 5046     		mov	r0, r10
 5915 0636 FFF7FEFF 		bl	decNumberNormalize
 5916              	.LVL666:
1998:src/display.c **** 	  z->exponent = 0;
 5917              		.loc 1 1998 4 view .LVU1878
1998:src/display.c **** 	  z->exponent = 0;
 5918              		.loc 1 1998 22 is_stmt 0 view .LVU1879
 5919 063a DAE90023 		ldrd	r2, r3, [r10]
 5920 063e 03EB0208 		add	r8, r3, r2
1999:src/display.c **** 	}
 5921              		.loc 1 1999 16 view .LVU1880
 5922 0642 CAF80490 		str	r9, [r10, #4]
1998:src/display.c **** 	  z->exponent = 0;
 5923              		.loc 1 1998 8 view .LVU1881
 5924 0646 08F1FF38 		add	r8, r8, #-1
 5925              	.LVL667:
1999:src/display.c **** 	}
 5926              		.loc 1 1999 4 is_stmt 1 view .LVU1882
 5927 064a F7E4     		b	.L437
 5928              	.LVL668:
 5929              	.L668:
2087:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5930              		.loc 1 2087 6 view .LVU1883
2088:src/display.c **** 	      *p++ = *q++;
 5931              		.loc 1 2088 13 is_stmt 0 view .LVU1884
 5932 064c 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2088:src/display.c **** 	      *p++ = *q++;
 5933              		.loc 1 2088 12 view .LVU1885
ARM GAS  /tmp/ccKZqSeG.s 			page 197


 5934 0650 A3F13002 		sub	r2, r3, #48
 5935 0654 092A     		cmp	r2, #9
2087:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 5936              		.loc 1 2087 7 view .LVU1886
 5937 0656 08F10108 		add	r8, r8, #1
 5938              	.LVL669:
2088:src/display.c **** 	      *p++ = *q++;
 5939              		.loc 1 2088 6 is_stmt 1 view .LVU1887
2088:src/display.c **** 	      *p++ = *q++;
 5940              		.loc 1 2088 12 view .LVU1888
 5941 065a 3FF679AD 		bhi	.L467
 5942              	.LVL670:
 5943              	.L472:
2089:src/display.c **** 	  }
 5944              		.loc 1 2089 8 view .LVU1889
2089:src/display.c **** 	  }
 5945              		.loc 1 2089 13 is_stmt 0 view .LVU1890
 5946 065e 01F8013B 		strb	r3, [r1], #1
 5947              	.LVL671:
2088:src/display.c **** 	      *p++ = *q++;
 5948              		.loc 1 2088 12 is_stmt 1 view .LVU1891
2088:src/display.c **** 	      *p++ = *q++;
 5949              		.loc 1 2088 13 is_stmt 0 view .LVU1892
 5950 0662 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2088:src/display.c **** 	      *p++ = *q++;
 5951              		.loc 1 2088 12 view .LVU1893
 5952 0666 A3F13002 		sub	r2, r3, #48
 5953 066a 092A     		cmp	r2, #9
 5954 066c F7D9     		bls	.L472
 5955 066e 6FE5     		b	.L467
 5956              	.LVL672:
 5957              	.L666:
2071:src/display.c **** 	for (; *q == '0'; q++);
 5958              		.loc 1 2071 4 is_stmt 1 view .LVU1894
1954:src/display.c **** 	int trimzeros = 0;
 5959              		.loc 1 1954 6 is_stmt 0 view .LVU1895
 5960 0670 0022     		movs	r2, #0
 5961 0672 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5962 0676 0392     		str	r2, [sp, #12]
2071:src/display.c **** 	for (; *q == '0'; q++);
 5963              		.loc 1 2071 5 view .LVU1896
 5964 0678 08F10108 		add	r8, r8, #1
 5965              	.LVL673:
2071:src/display.c **** 	for (; *q == '0'; q++);
 5966              		.loc 1 2071 5 view .LVU1897
 5967 067c 3BE5     		b	.L462
 5968              	.LVL674:
 5969              	.L660:
2005:src/display.c **** 	    x[0] = '-';
 5970              		.loc 1 2005 34 discriminator 1 view .LVU1898
 5971 067e 6B20     		movs	r0, #107
 5972 0680 FFF7FEFF 		bl	get_user_flag
 5973              	.LVL675:
2005:src/display.c **** 	    x[0] = '-';
 5974              		.loc 1 2005 31 discriminator 1 view .LVU1899
 5975 0684 0028     		cmp	r0, #0
 5976 0686 3FF4EAAC 		beq	.L439
ARM GAS  /tmp/ccKZqSeG.s 			page 198


2006:src/display.c **** 	    x[1] = '0';
 5977              		.loc 1 2006 6 is_stmt 1 view .LVU1900
2007:src/display.c **** 	  } else
 5978              		.loc 1 2007 6 view .LVU1901
2006:src/display.c **** 	    x[1] = '0';
 5979              		.loc 1 2006 11 is_stmt 0 view .LVU1902
 5980 068a 43F22D03 		movw	r3, #12333
 5981 068e ADF82430 		strh	r3, [sp, #36]	@ movhi
2007:src/display.c **** 	  } else
 5982              		.loc 1 2007 11 view .LVU1903
 5983 0692 E7E4     		b	.L440
 5984              	.LVL676:
 5985              	.L664:
2064:src/display.c **** 	  CLR_MANT_SIGN;
 5986              		.loc 1 2064 4 is_stmt 1 view .LVU1904
 5987              	.LBB421:
 5988              	.LBI421:
 259:src/display.c **** {
 5989              		.loc 1 259 13 view .LVU1905
 5990              	.LBB422:
 261:src/display.c **** }
 5991              		.loc 1 261 3 view .LVU1906
 5992 0694 8220     		movs	r0, #130
 5993 0696 FFF7FEFF 		bl	clr_dot
 5994              	.LVL677:
 5995              	.LBE422:
 5996              	.LBE421:
2065:src/display.c **** 	}
 5997              		.loc 1 2065 4 view .LVU1907
 5998              	.LBB423:
 5999              	.LBI423:
 249:src/display.c **** {
 6000              		.loc 1 249 13 view .LVU1908
 6001              	.LBB424:
 251:src/display.c **** }
 6002              		.loc 1 251 3 view .LVU1909
 6003 069a 8120     		movs	r0, #129
 6004 069c FFF7FEFF 		bl	clr_dot
 6005              	.LVL678:
 252:src/display.c **** 
 6006              		.loc 1 252 1 is_stmt 0 view .LVU1910
 6007 06a0 1FE5     		b	.L460
 6008              	.LVL679:
 6009              	.L455:
 252:src/display.c **** 
 6010              		.loc 1 252 1 view .LVU1911
 6011              	.LBE424:
 6012              	.LBE423:
 6013              	.LBB425:
2026:src/display.c **** 
 6014              		.loc 1 2026 4 is_stmt 1 view .LVU1912
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6015              		.loc 1 2028 4 view .LVU1913
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6016              		.loc 1 2028 11 is_stmt 0 view .LVU1914
 6017 06a2 2A46     		mov	r2, r5
 6018 06a4 07A9     		add	r1, sp, #28
ARM GAS  /tmp/ccKZqSeG.s 			page 199


 6019 06a6 5046     		mov	r0, r10
 6020 06a8 FFF7FEFF 		bl	std_round_fix
 6021              	.LVL680:
 6022              	.LBE425:
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6023              		.loc 1 1955 6 view .LVU1915
 6024 06ac 0023     		movs	r3, #0
 6025              	.LBB426:
2028:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6026              		.loc 1 2028 11 view .LVU1916
 6027 06ae 0546     		mov	r5, r0
 6028              	.LVL681:
2029:src/display.c **** 	    // allow zeros to be trimmed
 6029              		.loc 1 2029 4 is_stmt 1 view .LVU1917
 6030              	.LBE426:
1955:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6031              		.loc 1 1955 6 is_stmt 0 view .LVU1918
 6032 06b0 0493     		str	r3, [sp, #16]
 6033 06b2 F0E4     		b	.L561
 6034              	.LVL682:
 6035              	.L670:
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6036              		.loc 1 2265 72 discriminator 2 view .LVU1919
 6037 06b4 06F2E732 		addw	r2, r6, #999
2265:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6038              		.loc 1 2265 58 discriminator 2 view .LVU1920
 6039 06b8 40F2CE73 		movw	r3, #1998
 6040 06bc 9A42     		cmp	r2, r3
 6041 06be 7FF6EBAD 		bls	.L538
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6042              		.loc 1 2266 4 is_stmt 1 view .LVU1921
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6043              		.loc 1 2266 20 is_stmt 0 view .LVU1922
 6044 06c2 019A     		ldr	r2, [sp, #4]
 6045 06c4 0A23     		movs	r3, #10
2267:src/display.c **** 	  return;
 6046              		.loc 1 2267 4 view .LVU1923
 6047 06c6 2146     		mov	r1, r4
 6048 06c8 5046     		mov	r0, r10
2266:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6049              		.loc 1 2266 20 view .LVU1924
 6050 06ca 1360     		str	r3, [r2]
2267:src/display.c **** 	  return;
 6051              		.loc 1 2267 4 is_stmt 1 view .LVU1925
 6052 06cc FFF7FEFF 		bl	set_x_dn
 6053              	.LVL683:
2268:src/display.c **** 	}
 6054              		.loc 1 2268 4 view .LVU1926
 6055 06d0 24E6     		b	.L430
 6056              	.LVL684:
 6057              	.L541:
2280:src/display.c **** 	      SET_MANT_SIGN;
 6058              		.loc 1 2280 6 view .LVU1927
2280:src/display.c **** 	      SET_MANT_SIGN;
 6059              		.loc 1 2280 9 is_stmt 0 view .LVU1928
 6060 06d2 BAF1000F 		cmp	r10, #0
 6061 06d6 40F00781 		bne	.L544
ARM GAS  /tmp/ccKZqSeG.s 			page 200


2281:src/display.c **** 	    else
 6062              		.loc 1 2281 8 is_stmt 1 view .LVU1929
 6063              	.LBB427:
 6064              	.LBI427:
 244:src/display.c **** {
 6065              		.loc 1 244 13 view .LVU1930
 6066              	.LBB428:
 246:src/display.c **** }
 6067              		.loc 1 246 3 view .LVU1931
 6068 06da 8120     		movs	r0, #129
 6069 06dc FFF7FEFF 		bl	set_dot
 6070              	.LVL685:
 246:src/display.c **** }
 6071              		.loc 1 246 3 is_stmt 0 view .LVU1932
 6072              	.LBE428:
 6073              	.LBE427:
2286:src/display.c **** 	  if (c == '.') {
 6074              		.loc 1 2286 12 is_stmt 1 view .LVU1933
2286:src/display.c **** 	  if (c == '.') {
 6075              		.loc 1 2286 18 is_stmt 0 view .LVU1934
 6076 06e0 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 6077              	.LVL686:
2286:src/display.c **** 	  if (c == '.') {
 6078              		.loc 1 2286 2 view .LVU1935
 6079 06e4 0029     		cmp	r1, #0
 6080 06e6 7FF4F8AD 		bne	.L543
 6081 06ea 0CE6     		b	.L542
 6082              	.L685:
 6083              		.align	2
 6084              	.L684:
 6085 06ec 00000000 		.word	main_ram
 6086 06f0 56555555 		.word	1431655766
 6087 06f4 00000000 		.word	.LANCHOR1
 6088 06f8 00000000 		.word	.LANCHOR0
 6089 06fc 00000000 		.word	Ctx
 6090              	.LVL687:
 6091              	.L661:
2014:src/display.c **** 	  return;
 6092              		.loc 1 2014 4 is_stmt 1 view .LVU1936
 6093              	.LBB429:
 6094              	.LBI429:
1802:src/display.c **** 	const int dbl = is_dblmode();
 6095              		.loc 1 1802 19 view .LVU1937
 6096              	.LBB430:
1803:src/display.c **** 	char *p;
 6097              		.loc 1 1803 2 view .LVU1938
1803:src/display.c **** 	char *p;
 6098              		.loc 1 1803 18 is_stmt 0 view .LVU1939
 6099 0700 FFF7FEFF 		bl	is_dblmode
 6100              	.LVL688:
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6101              		.loc 1 1819 5 view .LVU1940
 6102 0704 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6103 0708 2D2B     		cmp	r3, #45
1803:src/display.c **** 	char *p;
 6104              		.loc 1 1803 18 view .LVU1941
 6105 070a 0446     		mov	r4, r0
ARM GAS  /tmp/ccKZqSeG.s 			page 201


 6106              	.LVL689:
1804:src/display.c **** 	int i, j;
 6107              		.loc 1 1804 2 is_stmt 1 view .LVU1942
1805:src/display.c **** 	char *upper_str;
 6108              		.loc 1 1805 2 view .LVU1943
1806:src/display.c **** 	enum separator_modes separator_mode;
 6109              		.loc 1 1806 2 view .LVU1944
1807:src/display.c **** 	char decimal_mark;
 6110              		.loc 1 1807 2 view .LVU1945
1808:src/display.c **** 	char thousands_sep;
 6111              		.loc 1 1808 2 view .LVU1946
1809:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6112              		.loc 1 1809 2 view .LVU1947
1815:src/display.c **** #endif
 6113              		.loc 1 1815 2 view .LVU1948
1817:src/display.c **** 
 6114              		.loc 1 1817 2 view .LVU1949
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6115              		.loc 1 1819 2 view .LVU1950
1819:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6116              		.loc 1 1819 5 is_stmt 0 view .LVU1951
 6117 070c 00F01681 		beq	.L678
1832:src/display.c **** 
 6118              		.loc 1 1832 16 view .LVU1952
 6119 0710 4FF0000A 		mov	r10, #0
 6120              	.LVL690:
 6121              	.L442:
1834:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6122              		.loc 1 1834 2 is_stmt 1 view .LVU1953
1834:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6123              		.loc 1 1834 6 is_stmt 0 view .LVU1954
 6124 0714 0021     		movs	r1, #0
 6125 0716 3846     		mov	r0, r7
 6126 0718 FFF7FEFF 		bl	find_char
 6127              	.LVL691:
1835:src/display.c **** 
 6128              		.loc 1 1835 2 is_stmt 1 view .LVU1955
1835:src/display.c **** 
 6129              		.loc 1 1835 23 is_stmt 0 view .LVU1956
 6130 071c C21B     		subs	r2, r0, r7
1835:src/display.c **** 
 6131              		.loc 1 1835 2 view .LVU1957
 6132 071e C2F12202 		rsb	r2, r2, #34
 6133 0722 3021     		movs	r1, #48
 6134 0724 FFF7FEFF 		bl	xset
 6135              	.LVL692:
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6136              		.loc 1 1837 2 is_stmt 1 view .LVU1958
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6137              		.loc 1 1837 18 is_stmt 0 view .LVU1959
 6138 0728 A74A     		ldr	r2, .L686
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6139              		.loc 1 1848 6 view .LVU1960
 6140 072a 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1837:src/display.c **** 	  separator_mode = SEP_COMMA;
 6141              		.loc 1 1837 5 view .LVU1961
 6142 072c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccKZqSeG.s 			page 202


1845:src/display.c **** 	}
 6143              		.loc 1 1845 18 view .LVU1962
 6144 072e 002A     		cmp	r2, #0
 6145 0730 15BF     		itete	ne
 6146 0732 4FF0020B 		movne	fp, #2
 6147 0736 2C26     		moveq	r6, #44
 6148 0738 2E26     		movne	r6, #46
 6149              	.LVL693:
1845:src/display.c **** 	}
 6150              		.loc 1 1845 18 view .LVU1963
 6151 073a 2E25     		moveq	r5, #46
 6152              	.LVL694:
1845:src/display.c **** 	}
 6153              		.loc 1 1845 18 view .LVU1964
 6154 073c 18BF     		it	ne
 6155 073e 2C25     		movne	r5, #44
 6156              	.LVL695:
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6157              		.loc 1 1848 2 is_stmt 1 view .LVU1965
1848:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6158              		.loc 1 1848 5 is_stmt 0 view .LVU1966
 6159 0740 13F0380F 		tst	r3, #56
 6160 0744 40F0D680 		bne	.L679
1875:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6161              		.loc 1 1875 4 is_stmt 1 view .LVU1967
 6162              	.LVL696:
1876:src/display.c **** 	  x[1] = decimal_mark;
 6163              		.loc 1 1876 4 view .LVU1968
 6164 0748 1022     		movs	r2, #16
 6165 074a 791C     		adds	r1, r7, #1
 6166 074c B81C     		adds	r0, r7, #2
 6167 074e FFF7FEFF 		bl	xcopy
 6168              	.LVL697:
1877:src/display.c **** 	  if (grouping) {
 6169              		.loc 1 1877 4 view .LVU1969
1879:src/display.c **** 	    x[5] = thousands_sep;
 6170              		.loc 1 1879 6 is_stmt 0 view .LVU1970
 6171 0752 0D22     		movs	r2, #13
 6172 0754 791D     		adds	r1, r7, #5
 6173 0756 B81D     		adds	r0, r7, #6
1877:src/display.c **** 	  if (grouping) {
 6174              		.loc 1 1877 9 view .LVU1971
 6175 0758 7D70     		strb	r5, [r7, #1]
1878:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6176              		.loc 1 1878 4 is_stmt 1 view .LVU1972
1879:src/display.c **** 	    x[5] = thousands_sep;
 6177              		.loc 1 1879 6 view .LVU1973
 6178 075a FFF7FEFF 		bl	xcopy
 6179              	.LVL698:
1880:src/display.c **** 	    x += 9;
 6180              		.loc 1 1880 6 view .LVU1974
1881:src/display.c **** 	  }
 6181              		.loc 1 1881 8 is_stmt 0 view .LVU1975
 6182 075e 07F10905 		add	r5, r7, #9
 6183              	.LVL699:
1880:src/display.c **** 	    x += 9;
 6184              		.loc 1 1880 11 view .LVU1976
ARM GAS  /tmp/ccKZqSeG.s 			page 203


 6185 0762 7E71     		strb	r6, [r7, #5]
1881:src/display.c **** 	  }
 6186              		.loc 1 1881 6 is_stmt 1 view .LVU1977
 6187              	.LVL700:
1884:src/display.c **** 	    if (exp < 0) {
 6188              		.loc 1 1884 4 view .LVU1978
1884:src/display.c **** 	    if (exp < 0) {
 6189              		.loc 1 1884 7 is_stmt 0 view .LVU1979
 6190 0764 002C     		cmp	r4, #0
 6191 0766 00F0E780 		beq	.L446
1885:src/display.c **** 	      x[9] = '-';
 6192              		.loc 1 1885 6 is_stmt 1 view .LVU1980
1885:src/display.c **** 	      x[9] = '-';
 6193              		.loc 1 1885 9 is_stmt 0 view .LVU1981
 6194 076a B8F1000F 		cmp	r8, #0
1886:src/display.c **** 	      exp = -exp;
 6195              		.loc 1 1886 8 is_stmt 1 view .LVU1982
1887:src/display.c **** 	    }
 6196              		.loc 1 1887 8 view .LVU1983
1891:src/display.c **** 	    x[10] = '0' + j;
 6197              		.loc 1 1891 8 is_stmt 0 view .LVU1984
 6198 076e 974B     		ldr	r3, .L686+4
1893:src/display.c **** 	  }
 6199              		.loc 1 1893 18 view .LVU1985
 6200 0770 9749     		ldr	r1, .L686+8
1886:src/display.c **** 	      exp = -exp;
 6201              		.loc 1 1886 13 view .LVU1986
 6202 0772 B6BF     		itet	lt
 6203 0774 2D22     		movlt	r2, #45
1890:src/display.c **** 	    j = exp / 1000;
 6204              		.loc 1 1890 13 view .LVU1987
 6205 0776 2022     		movge	r2, #32
1887:src/display.c **** 	    }
 6206              		.loc 1 1887 12 view .LVU1988
 6207 0778 C8F10008 		rsblt	r8, r8, #0
 6208              	.LVL701:
1887:src/display.c **** 	    }
 6209              		.loc 1 1887 12 view .LVU1989
 6210 077c BA74     		strb	r2, [r7, #18]
1891:src/display.c **** 	    x[10] = '0' + j;
 6211              		.loc 1 1891 6 is_stmt 1 view .LVU1990
1891:src/display.c **** 	    x[10] = '0' + j;
 6212              		.loc 1 1891 8 is_stmt 0 view .LVU1991
 6213 077e A3FB0823 		umull	r2, r3, r3, r8
 6214 0782 9B09     		lsrs	r3, r3, #6
 6215              	.LVL702:
1892:src/display.c **** 	    exp -= 1000 * j;
 6216              		.loc 1 1892 6 is_stmt 1 view .LVU1992
1892:src/display.c **** 	    exp -= 1000 * j;
 6217              		.loc 1 1892 18 is_stmt 0 view .LVU1993
 6218 0784 03F13002 		add	r2, r3, #48
1893:src/display.c **** 	  }
 6219              		.loc 1 1893 10 view .LVU1994
 6220 0788 01FB0388 		mla	r8, r1, r3, r8
 6221              	.LVL703:
1892:src/display.c **** 	    exp -= 1000 * j;
 6222              		.loc 1 1892 12 view .LVU1995
ARM GAS  /tmp/ccKZqSeG.s 			page 204


 6223 078c FA74     		strb	r2, [r7, #19]
1893:src/display.c **** 	  }
 6224              		.loc 1 1893 6 is_stmt 1 view .LVU1996
 6225              	.LVL704:
 6226              	.L448:
1899:src/display.c **** 	  *x = 0;
 6227              		.loc 1 1899 4 view .LVU1997
 6228 078e 0B22     		movs	r2, #11
 6229 0790 2946     		mov	r1, r5
 6230 0792 07F10A00 		add	r0, r7, #10
 6231 0796 FFF7FEFF 		bl	xcopy
 6232              	.LVL705:
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6233              		.loc 1 1900 4 view .LVU1998
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6234              		.loc 1 1900 7 is_stmt 0 view .LVU1999
 6235 079a 0022     		movs	r2, #0
1901:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6236              		.loc 1 1901 4 view .LVU2000
 6237 079c 4046     		mov	r0, r8
 6238 079e 0121     		movs	r1, #1
1900:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6239              		.loc 1 1900 7 view .LVU2001
 6240 07a0 7A72     		strb	r2, [r7, #9]
1901:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6241              		.loc 1 1901 4 is_stmt 1 view .LVU2002
 6242 07a2 FFF7FEFF 		bl	set_exp
 6243              	.LVL706:
1902:src/display.c **** 	}
 6244              		.loc 1 1902 4 view .LVU2003
1902:src/display.c **** 	}
 6245              		.loc 1 1902 4 is_stmt 0 view .LVU2004
 6246 07a6 A7EB0A0A 		sub	r10, r7, r10
 6247              	.LVL707:
1902:src/display.c **** 	}
 6248              		.loc 1 1902 6 view .LVU2005
 6249 07aa 0924     		movs	r4, #9
 6250              	.LVL708:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6251              		.loc 1 1905 11 is_stmt 1 view .LVU2006
 6252              	.L449:
1906:src/display.c **** 	  }
 6253              		.loc 1 1906 6 view .LVU2007
 6254              	.LBB431:
 6255              	.LBI431:
 308:src/display.c ****   if (sep == SEP_NONE)
 6256              		.loc 1 308 14 view .LVU2008
 6257              	.LBB432:
 309:src/display.c ****     return res;
 6258              		.loc 1 309 3 view .LVU2009
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6259              		.loc 1 311 3 view .LVU2010
 6260 07ac 2046     		mov	r0, r4
 6261 07ae 5946     		mov	r1, fp
 6262              	.LBE432:
 6263              	.LBE431:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
ARM GAS  /tmp/ccKZqSeG.s 			page 205


 6264              		.loc 1 1905 38 is_stmt 0 view .LVU2011
 6265 07b0 1B34     		adds	r4, r4, #27
 6266              	.LVL709:
 6267              	.LBB434:
 6268              	.LBB433:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6269              		.loc 1 1905 38 view .LVU2012
 6270 07b2 FFF7FEFF 		bl	set_separator.part.0
 6271              	.LVL710:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6272              		.loc 1 1905 38 view .LVU2013
 6273              	.LBE433:
 6274              	.LBE434:
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6275              		.loc 1 1905 36 is_stmt 1 view .LVU2014
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6276              		.loc 1 1905 11 view .LVU2015
1905:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6277              		.loc 1 1905 4 is_stmt 0 view .LVU2016
 6278 07b6 512C     		cmp	r4, #81
 6279 07b8 F8DD     		ble	.L449
 6280 07ba 6C1E     		subs	r4, r5, #1
 6281              	.LVL711:
 6282              	.L451:
1911:src/display.c **** 
 6283              		.loc 1 1911 4 is_stmt 1 view .LVU2017
 6284 07bc 4846     		mov	r0, r9
 6285 07be 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1910:src/display.c **** 	  set_dig(j, x[i]);
 6286              		.loc 1 1910 33 is_stmt 0 view .LVU2018
 6287 07c2 09F10909 		add	r9, r9, #9
 6288              	.LVL712:
1911:src/display.c **** 
 6289              		.loc 1 1911 4 view .LVU2019
 6290 07c6 FFF7FEFF 		bl	set_dig
 6291              	.LVL713:
1910:src/display.c **** 	  set_dig(j, x[i]);
 6292              		.loc 1 1910 26 is_stmt 1 view .LVU2020
1910:src/display.c **** 	  set_dig(j, x[i]);
 6293              		.loc 1 1910 18 view .LVU2021
1910:src/display.c **** 	  set_dig(j, x[i]);
 6294              		.loc 1 1910 2 is_stmt 0 view .LVU2022
 6295 07ca B9F16C0F 		cmp	r9, #108
 6296 07ce F5D1     		bne	.L451
1913:src/display.c **** 	set_status(upper_str - negative);
 6297              		.loc 1 1913 2 is_stmt 1 view .LVU2023
1913:src/display.c **** 	set_status(upper_str - negative);
 6298              		.loc 1 1913 5 is_stmt 0 view .LVU2024
 6299 07d0 0023     		movs	r3, #0
1914:src/display.c ****       }
 6300              		.loc 1 1914 2 view .LVU2025
 6301 07d2 5046     		mov	r0, r10
1913:src/display.c **** 	set_status(upper_str - negative);
 6302              		.loc 1 1913 5 view .LVU2026
 6303 07d4 2B70     		strb	r3, [r5]
1914:src/display.c ****       }
 6304              		.loc 1 1914 2 is_stmt 1 view .LVU2027
ARM GAS  /tmp/ccKZqSeG.s 			page 206


 6305 07d6 FFF7FEFF 		bl	set_status
 6306              	.LVL714:
1915:src/display.c **** 
 6307              		.loc 1 1915 7 is_stmt 0 view .LVU2028
 6308 07da 9FE5     		b	.L430
 6309              	.LVL715:
 6310              	.L550:
1915:src/display.c **** 
 6311              		.loc 1 1915 7 view .LVU2029
 6312              	.LBE430:
 6313              	.LBE429:
 6314              	.LBB439:
 6315              	.LBB418:
 6316 07dc 1146     		mov	r1, r2
 6317              	.LVL716:
1915:src/display.c **** 
 6318              		.loc 1 1915 7 view .LVU2030
 6319 07de 5046     		mov	r0, r10
 6320 07e0 FFF7FEFF 		bl	set_separator.part.0
 6321              	.LVL717:
1915:src/display.c **** 
 6322              		.loc 1 1915 7 view .LVU2031
 6323 07e4 7B4B     		ldr	r3, .L686+12
 6324 07e6 0446     		mov	r4, r0
 6325              	.LVL718:
1915:src/display.c **** 
 6326              		.loc 1 1915 7 view .LVU2032
 6327 07e8 ABE6     		b	.L548
 6328              	.LVL719:
 6329              	.L517:
1915:src/display.c **** 
 6330              		.loc 1 1915 7 view .LVU2033
 6331              	.LBE418:
 6332              	.LBE439:
2206:src/display.c **** 	    odig++;
 6333              		.loc 1 2206 6 is_stmt 1 view .LVU2034
2207:src/display.c **** 	    *obp++ = '.';
 6334              		.loc 1 2207 6 view .LVU2035
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6335              		.loc 1 2208 6 view .LVU2036
2206:src/display.c **** 	    odig++;
 6336              		.loc 1 2206 13 is_stmt 0 view .LVU2037
 6337 07ea 42F63063 		movw	r3, #11824
 6338 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2209:src/display.c **** 	      *obp++ = '0';
 6339              		.loc 1 2209 6 is_stmt 1 view .LVU2038
 6340              	.LVL720:
2209:src/display.c **** 	      *obp++ = '0';
 6341              		.loc 1 2209 20 view .LVU2039
2209:src/display.c **** 	      *obp++ = '0';
 6342              		.loc 1 2209 6 is_stmt 0 view .LVU2040
 6343 07f2 731C     		adds	r3, r6, #1
 6344              	.LVL721:
2209:src/display.c **** 	      *obp++ = '0';
 6345              		.loc 1 2209 6 view .LVU2041
 6346 07f4 00F0DD80 		beq	.L680
 6347 07f8 C6F10102 		rsb	r2, r6, #1
ARM GAS  /tmp/ccKZqSeG.s 			page 207


2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6348              		.loc 1 2208 10 view .LVU2042
 6349 07fc 0DF12600 		add	r0, sp, #38
 6350              	.LVL722:
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6351              		.loc 1 2208 10 view .LVU2043
 6352 0800 079D     		ldr	r5, [sp, #28]
 6353 0802 3A44     		add	r2, r2, r7
 6354 0804 0346     		mov	r3, r0
 6355              	.LVL723:
2210:src/display.c **** 	      odig++;
 6356              		.loc 1 2210 15 view .LVU2044
 6357 0806 3021     		movs	r1, #48
 6358              	.LVL724:
 6359              	.L525:
2210:src/display.c **** 	      odig++;
 6360              		.loc 1 2210 8 is_stmt 1 discriminator 3 view .LVU2045
2210:src/display.c **** 	      odig++;
 6361              		.loc 1 2210 15 is_stmt 0 discriminator 3 view .LVU2046
 6362 0808 03F8011B 		strb	r1, [r3], #1
 6363              	.LVL725:
2211:src/display.c **** 	      dd--;
 6364              		.loc 1 2211 8 is_stmt 1 discriminator 3 view .LVU2047
2212:src/display.c **** 	    }
 6365              		.loc 1 2212 8 discriminator 3 view .LVU2048
2209:src/display.c **** 	      *obp++ = '0';
 6366              		.loc 1 2209 25 discriminator 3 view .LVU2049
2209:src/display.c **** 	      *obp++ = '0';
 6367              		.loc 1 2209 20 discriminator 3 view .LVU2050
2209:src/display.c **** 	      *obp++ = '0';
 6368              		.loc 1 2209 6 is_stmt 0 discriminator 3 view .LVU2051
 6369 080c 9342     		cmp	r3, r2
 6370 080e FBD1     		bne	.L525
 6371 0810 7319     		adds	r3, r6, r5
 6372              	.LVL726:
2209:src/display.c **** 	      *obp++ = '0';
 6373              		.loc 1 2209 6 discriminator 3 view .LVU2052
 6374 0812 6FEA0608 		mvn	r8, r6
 6375 0816 0133     		adds	r3, r3, #1
 6376 0818 8044     		add	r8, r8, r0
 6377 081a 7542     		rsbs	r5, r6, #0
 6378              	.L524:
 6379              	.LVL727:
2214:src/display.c **** 	      *obp++ = *p++;
 6380              		.loc 1 2214 12 is_stmt 1 view .LVU2053
2214:src/display.c **** 	      *obp++ = *p++;
 6381              		.loc 1 2214 15 is_stmt 0 view .LVU2054
 6382 081c 5A1E     		subs	r2, r3, #1
2214:src/display.c **** 	      *obp++ = *p++;
 6383              		.loc 1 2214 12 view .LVU2055
 6384 081e 002B     		cmp	r3, #0
2214:src/display.c **** 	      *obp++ = *p++;
 6385              		.loc 1 2214 15 view .LVU2056
 6386 0820 0792     		str	r2, [sp, #28]
2214:src/display.c **** 	      *obp++ = *p++;
 6387              		.loc 1 2214 12 view .LVU2057
 6388 0822 7FF76FAE 		ble	.L506
ARM GAS  /tmp/ccKZqSeG.s 			page 208


 6389 0826 4344     		add	r3, r3, r8
 6390 0828 581E     		subs	r0, r3, #1
 6391 082a 08F1FF38 		add	r8, r8, #-1
 6392              	.LVL728:
 6393              	.L526:
2215:src/display.c **** 	      odig++;
 6394              		.loc 1 2215 8 is_stmt 1 view .LVU2058
2215:src/display.c **** 	      odig++;
 6395              		.loc 1 2215 15 is_stmt 0 view .LVU2059
 6396 082e 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6397              	.LVL729:
2215:src/display.c **** 	      odig++;
 6398              		.loc 1 2215 15 view .LVU2060
 6399 0832 08F8011F 		strb	r1, [r8, #1]!
2216:src/display.c **** 	    }
 6400              		.loc 1 2216 8 is_stmt 1 view .LVU2061
2214:src/display.c **** 	      *obp++ = *p++;
 6401              		.loc 1 2214 12 view .LVU2062
 6402 0836 8045     		cmp	r8, r0
 6403 0838 F9D1     		bne	.L526
 6404              	.LVL730:
2214:src/display.c **** 	      *obp++ = *p++;
 6405              		.loc 1 2214 12 is_stmt 0 view .LVU2063
 6406 083a 681C     		adds	r0, r5, #1
 6407 083c 4FF0FF31 		mov	r1, #-1
 6408 0840 1518     		adds	r5, r2, r0
 6409 0842 9846     		mov	r8, r3
 6410 0844 0791     		str	r1, [sp, #28]
 6411 0846 5DE6     		b	.L506
 6412              	.LVL731:
 6413              	.L529:
2232:src/display.c **** 	    odig++;
 6414              		.loc 1 2232 6 is_stmt 1 view .LVU2064
2232:src/display.c **** 	    odig++;
 6415              		.loc 1 2232 13 is_stmt 0 view .LVU2065
 6416 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6417 084c 8DF82430 		strb	r3, [sp, #36]
2233:src/display.c **** 	    dd--;
 6418              		.loc 1 2233 6 is_stmt 1 view .LVU2066
 6419              	.LVL732:
2234:src/display.c **** 	    exp--;
 6420              		.loc 1 2234 6 view .LVU2067
2234:src/display.c **** 	    exp--;
 6421              		.loc 1 2234 8 is_stmt 0 view .LVU2068
 6422 0850 013A     		subs	r2, r2, #1
2235:src/display.c **** 	  case -2:
 6423              		.loc 1 2235 6 is_stmt 1 view .LVU2069
2235:src/display.c **** 	  case -2:
 6424              		.loc 1 2235 9 is_stmt 0 view .LVU2070
 6425 0852 013E     		subs	r6, r6, #1
 6426              	.LVL733:
2235:src/display.c **** 	  case -2:
 6427              		.loc 1 2235 9 view .LVU2071
 6428 0854 0325     		movs	r5, #3
2232:src/display.c **** 	    odig++;
 6429              		.loc 1 2232 17 view .LVU2072
 6430 0856 0DF1590B 		add	fp, sp, #89
ARM GAS  /tmp/ccKZqSeG.s 			page 209


 6431              	.LVL734:
2232:src/display.c **** 	    odig++;
 6432              		.loc 1 2232 10 view .LVU2073
 6433 085a 0DF12501 		add	r1, sp, #37
 6434              	.LVL735:
 6435              	.L532:
2238:src/display.c **** 	    odig++;
 6436              		.loc 1 2238 6 is_stmt 1 view .LVU2074
2238:src/display.c **** 	    odig++;
 6437              		.loc 1 2238 13 is_stmt 0 view .LVU2075
 6438 085e 1BF8013B 		ldrb	r3, [fp], #1	@ zero_extendqisi2
 6439              	.LVL736:
2238:src/display.c **** 	    odig++;
 6440              		.loc 1 2238 13 view .LVU2076
 6441 0862 01F8013B 		strb	r3, [r1], #1
 6442              	.LVL737:
2239:src/display.c **** 	    dd--;
 6443              		.loc 1 2239 6 is_stmt 1 view .LVU2077
2240:src/display.c **** 	    exp--;
 6444              		.loc 1 2240 6 view .LVU2078
2240:src/display.c **** 	    exp--;
 6445              		.loc 1 2240 8 is_stmt 0 view .LVU2079
 6446 0866 013A     		subs	r2, r2, #1
2241:src/display.c **** 	  case 0:
 6447              		.loc 1 2241 6 is_stmt 1 view .LVU2080
2241:src/display.c **** 	  case 0:
 6448              		.loc 1 2241 9 is_stmt 0 view .LVU2081
 6449 0868 013E     		subs	r6, r6, #1
 6450              	.LVL738:
2241:src/display.c **** 	  case 0:
 6451              		.loc 1 2241 9 view .LVU2082
 6452 086a 2CE6     		b	.L496
 6453              	.LVL739:
 6454              	.L531:
2241:src/display.c **** 	  case 0:
 6455              		.loc 1 2241 9 view .LVU2083
 6456 086c 079A     		ldr	r2, [sp, #28]
2229:src/display.c **** 	  case -1:
 6457              		.loc 1 2229 16 view .LVU2084
 6458 086e 0225     		movs	r5, #2
1934:src/display.c **** 	int odig = 0;
 6459              		.loc 1 1934 15 view .LVU2085
 6460 0870 3946     		mov	r1, r7
 6461 0872 F4E7     		b	.L532
 6462              	.LVL740:
 6463              	.L477:
2097:src/display.c **** 	    /* We might have push the fixed decimals off the
 6464              		.loc 1 2097 6 is_stmt 1 view .LVU2086
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6465              		.loc 1 2101 6 view .LVU2087
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6466              		.loc 1 2101 9 is_stmt 0 view .LVU2088
 6467 0874 0299     		ldr	r1, [sp, #8]
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6468              		.loc 1 2101 23 view .LVU2089
 6469 0876 9319     		adds	r3, r2, r6
2101:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
ARM GAS  /tmp/ccKZqSeG.s 			page 210


 6470              		.loc 1 2101 9 view .LVU2090
 6471 0878 9942     		cmp	r1, r3
2102:src/display.c **** 	  }
 6472              		.loc 1 2102 8 is_stmt 1 view .LVU2091
2102:src/display.c **** 	  }
 6473              		.loc 1 2102 30 is_stmt 0 view .LVU2092
 6474 087a DFBF     		itttt	le
 6475 087c 029B     		ldrle	r3, [sp, #8]
 6476 087e 03F1FF32 		addle	r2, r3, #-1
2102:src/display.c **** 	  }
 6477              		.loc 1 2102 35 view .LVU2093
 6478 0882 921B     		suble	r2, r2, r6
2102:src/display.c **** 	  }
 6479              		.loc 1 2102 11 view .LVU2094
 6480 0884 0792     		strle	r2, [sp, #28]
 6481 0886 3146     		mov	r1, r6
 6482 0888 6AE4     		b	.L474
 6483              	.LVL741:
 6484              	.L502:
2141:src/display.c **** 	      odig++;
 6485              		.loc 1 2141 8 is_stmt 1 view .LVU2095
2141:src/display.c **** 	      odig++;
 6486              		.loc 1 2141 15 is_stmt 0 view .LVU2096
 6487 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6488 088e 8DF82410 		strb	r1, [sp, #36]
2142:src/display.c **** 	      dd--;
 6489              		.loc 1 2142 8 is_stmt 1 view .LVU2097
 6490              	.LVL742:
2143:src/display.c **** 	      exp--;
 6491              		.loc 1 2143 8 view .LVU2098
2143:src/display.c **** 	      exp--;
 6492              		.loc 1 2143 10 is_stmt 0 view .LVU2099
 6493 0892 013A     		subs	r2, r2, #1
2144:src/display.c **** 	    case -2:
 6494              		.loc 1 2144 8 is_stmt 1 view .LVU2100
2144:src/display.c **** 	    case -2:
 6495              		.loc 1 2144 11 is_stmt 0 view .LVU2101
 6496 0894 013E     		subs	r6, r6, #1
 6497              	.LVL743:
2144:src/display.c **** 	    case -2:
 6498              		.loc 1 2144 11 view .LVU2102
 6499 0896 0325     		movs	r5, #3
2141:src/display.c **** 	      odig++;
 6500              		.loc 1 2141 19 view .LVU2103
 6501 0898 0DF1590B 		add	fp, sp, #89
 6502              	.LVL744:
2141:src/display.c **** 	      odig++;
 6503              		.loc 1 2141 12 view .LVU2104
 6504 089c 0DF12501 		add	r1, sp, #37
 6505              	.LVL745:
 6506              	.L505:
2147:src/display.c **** 	      odig++;
 6507              		.loc 1 2147 8 is_stmt 1 view .LVU2105
2147:src/display.c **** 	      odig++;
 6508              		.loc 1 2147 15 is_stmt 0 view .LVU2106
 6509 08a0 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2
 6510              	.LVL746:
ARM GAS  /tmp/ccKZqSeG.s 			page 211


2147:src/display.c **** 	      odig++;
 6511              		.loc 1 2147 15 view .LVU2107
 6512 08a4 01F8010B 		strb	r0, [r1], #1
 6513              	.LVL747:
2148:src/display.c **** 	      dd--;
 6514              		.loc 1 2148 8 is_stmt 1 view .LVU2108
2149:src/display.c **** 	      exp--;
 6515              		.loc 1 2149 8 view .LVU2109
2150:src/display.c **** 	    case 0:
 6516              		.loc 1 2150 8 view .LVU2110
2149:src/display.c **** 	      exp--;
 6517              		.loc 1 2149 10 is_stmt 0 view .LVU2111
 6518 08a8 013A     		subs	r2, r2, #1
 6519 08aa 0792     		str	r2, [sp, #28]
2150:src/display.c **** 	    case 0:
 6520              		.loc 1 2150 11 view .LVU2112
 6521 08ac 013E     		subs	r6, r6, #1
 6522              	.LVL748:
 6523              	.L501:
2152:src/display.c **** 	    };
 6524              		.loc 1 2152 8 is_stmt 1 view .LVU2113
2153:src/display.c **** 	    *obp++ = *p++;
 6525              		.loc 1 2153 7 view .LVU2114
2154:src/display.c **** 	    odig++;
 6526              		.loc 1 2154 6 view .LVU2115
2154:src/display.c **** 	    odig++;
 6527              		.loc 1 2154 17 is_stmt 0 view .LVU2116
 6528 08ae 5A46     		mov	r2, fp
 6529              	.LVL749:
2154:src/display.c **** 	    odig++;
 6530              		.loc 1 2154 13 view .LVU2117
 6531 08b0 8846     		mov	r8, r1
 6532 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6533              	.LVL750:
2154:src/display.c **** 	    odig++;
 6534              		.loc 1 2154 13 view .LVU2118
 6535 08b6 08F8020B 		strb	r0, [r8], #2
2155:src/display.c **** 	    *obp++ = '.';
 6536              		.loc 1 2155 6 is_stmt 1 view .LVU2119
2156:src/display.c **** 	    for (i=1; i<count; i++) {
 6537              		.loc 1 2156 6 view .LVU2120
 6538              	.LVL751:
2157:src/display.c **** 	      *obp++ = *p++;
 6539              		.loc 1 2157 6 is_stmt 0 view .LVU2121
 6540 08ba 012B     		cmp	r3, #1
2156:src/display.c **** 	    for (i=1; i<count; i++) {
 6541              		.loc 1 2156 13 view .LVU2122
 6542 08bc 4FF02E00 		mov	r0, #46
 6543 08c0 4870     		strb	r0, [r1, #1]
2157:src/display.c **** 	      *obp++ = *p++;
 6544              		.loc 1 2157 6 is_stmt 1 view .LVU2123
 6545              	.LVL752:
2157:src/display.c **** 	      *obp++ = *p++;
 6546              		.loc 1 2157 16 view .LVU2124
2157:src/display.c **** 	      *obp++ = *p++;
 6547              		.loc 1 2157 6 is_stmt 0 view .LVU2125
 6548 08c2 32DD     		ble	.L576
ARM GAS  /tmp/ccKZqSeG.s 			page 212


2157:src/display.c **** 	      *obp++ = *p++;
 6549              		.loc 1 2157 6 view .LVU2126
 6550 08c4 0131     		adds	r1, r1, #1
 6551 08c6 9B44     		add	fp, fp, r3
 6552              	.LVL753:
 6553              	.L507:
2158:src/display.c **** 	      odig++;
 6554              		.loc 1 2158 8 is_stmt 1 discriminator 3 view .LVU2127
2158:src/display.c **** 	      odig++;
 6555              		.loc 1 2158 15 is_stmt 0 discriminator 3 view .LVU2128
 6556 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6557              	.LVL754:
2158:src/display.c **** 	      odig++;
 6558              		.loc 1 2158 15 discriminator 3 view .LVU2129
 6559 08cc 01F8010F 		strb	r0, [r1, #1]!
2159:src/display.c **** 	    }
 6560              		.loc 1 2159 8 is_stmt 1 discriminator 3 view .LVU2130
2157:src/display.c **** 	      *obp++ = *p++;
 6561              		.loc 1 2157 25 discriminator 3 view .LVU2131
2157:src/display.c **** 	      *obp++ = *p++;
 6562              		.loc 1 2157 16 discriminator 3 view .LVU2132
2157:src/display.c **** 	      *obp++ = *p++;
 6563              		.loc 1 2157 6 is_stmt 0 discriminator 3 view .LVU2133
 6564 08d0 5A45     		cmp	r2, fp
 6565 08d2 F9D1     		bne	.L507
 6566 08d4 013B     		subs	r3, r3, #1
 6567              	.LVL755:
2157:src/display.c **** 	      *obp++ = *p++;
 6568              		.loc 1 2157 6 discriminator 3 view .LVU2134
 6569 08d6 9844     		add	r8, r8, r3
 6570 08d8 1D44     		add	r5, r5, r3
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6571              		.loc 1 2161 15 view .LVU2135
 6572 08da 4FF00109 		mov	r9, #1
 6573 08de 11E6     		b	.L506
 6574              	.LVL756:
 6575              	.L504:
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6576              		.loc 1 2161 15 view .LVU2136
 6577 08e0 079A     		ldr	r2, [sp, #28]
2138:src/display.c **** 	    case -1:
 6578              		.loc 1 2138 24 view .LVU2137
 6579 08e2 0225     		movs	r5, #2
1934:src/display.c **** 	int odig = 0;
 6580              		.loc 1 1934 15 view .LVU2138
 6581 08e4 3946     		mov	r1, r7
 6582 08e6 DBE7     		b	.L505
 6583              	.LVL757:
 6584              	.L544:
2283:src/display.c **** 	  }
 6585              		.loc 1 2283 8 is_stmt 1 view .LVU2139
 6586 08e8 2D21     		movs	r1, #45
 6587 08ea AAF10900 		sub	r0, r10, #9
 6588 08ee FFF7FEFF 		bl	set_dig
 6589              	.LVL758:
 6590 08f2 ECE4     		b	.L540
 6591              	.LVL759:
ARM GAS  /tmp/ccKZqSeG.s 			page 213


 6592              	.L679:
 6593              	.LBB440:
 6594              	.LBB437:
 6595              	.LBB435:
1850:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6596              		.loc 1 1850 4 view .LVU2140
1853:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6597              		.loc 1 1853 4 view .LVU2141
1853:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6598              		.loc 1 1853 14 is_stmt 0 view .LVU2142
 6599 08f4 07F1030A 		add	r10, r7, #3
 6600              	.LVL760:
1854:src/display.c **** 	  if (grouping) {
 6601              		.loc 1 1854 4 is_stmt 1 view .LVU2143
 6602 08f8 3749     		ldr	r1, .L686+16
 6603 08fa 0D22     		movs	r2, #13
 6604 08fc 5046     		mov	r0, r10
 6605 08fe FFF7FEFF 		bl	xcopy
 6606              	.LVL761:
1855:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6607              		.loc 1 1855 4 view .LVU2144
1856:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6608              		.loc 1 1856 6 view .LVU2145
 6609 0902 1322     		movs	r2, #19
 6610 0904 B918     		adds	r1, r7, r2
 6611 0906 07F11400 		add	r0, r7, #20
 6612 090a FFF7FEFF 		bl	xcopy
 6613              	.LVL762:
1857:src/display.c **** 	    x += 3 + 13 + 7;
 6614              		.loc 1 1857 6 view .LVU2146
1858:src/display.c **** 	  }
 6615              		.loc 1 1858 8 is_stmt 0 view .LVU2147
 6616 090e 07F11705 		add	r5, r7, #23
 6617              	.LVL763:
1857:src/display.c **** 	    x += 3 + 13 + 7;
 6618              		.loc 1 1857 24 view .LVU2148
 6619 0912 FE74     		strb	r6, [r7, #19]
1858:src/display.c **** 	  }
 6620              		.loc 1 1858 6 is_stmt 1 view .LVU2149
 6621              	.LVL764:
1871:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6622              		.loc 1 1871 4 view .LVU2150
1872:src/display.c **** 	}
 6623              		.loc 1 1872 4 view .LVU2151
1872:src/display.c **** 	}
 6624              		.loc 1 1872 6 is_stmt 0 view .LVU2152
 6625 0914 1B24     		movs	r4, #27
 6626              	.LVL765:
1872:src/display.c **** 	}
 6627              		.loc 1 1872 6 view .LVU2153
 6628              	.LBE435:
 6629 0916 49E7     		b	.L449
 6630              	.LVL766:
 6631              	.L675:
1872:src/display.c **** 	}
 6632              		.loc 1 1872 6 view .LVU2154
 6633              	.LBE437:
ARM GAS  /tmp/ccKZqSeG.s 			page 214


 6634              	.LBE440:
1971:src/display.c **** 	      return;
 6635              		.loc 1 1971 8 is_stmt 1 view .LVU2155
 6636 0918 5046     		mov	r0, r10
 6637 091a FFF7FEFF 		bl	set_x_hms
 6638              	.LVL767:
1972:src/display.c **** 	    }
 6639              		.loc 1 1972 8 view .LVU2156
 6640 091e FDE4     		b	.L430
 6641              	.LVL768:
 6642              	.L574:
2133:src/display.c **** 	  if (count != *display_digits)
 6643              		.loc 1 2133 4 is_stmt 0 view .LVU2157
 6644 0920 029B     		ldr	r3, [sp, #8]
 6645 0922 72E4     		b	.L497
 6646              	.LVL769:
 6647              	.L575:
2138:src/display.c **** 	    case -1:
 6648              		.loc 1 2138 24 view .LVU2158
 6649 0924 0125     		movs	r5, #1
 6650 0926 3946     		mov	r1, r7
 6651 0928 C1E7     		b	.L501
 6652              	.LVL770:
 6653              	.L576:
2161:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6654              		.loc 1 2161 15 view .LVU2159
 6655 092a 4FF00109 		mov	r9, #1
 6656 092e E9E5     		b	.L506
 6657              	.LVL771:
 6658              	.L480:
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6659              		.loc 1 2111 4 is_stmt 1 view .LVU2160
2111:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6660              		.loc 1 2111 7 is_stmt 0 view .LVU2161
 6661 0930 5B45     		cmp	r3, fp
 6662 0932 7FF42FAC 		bne	.L559
 6663 0936 4DE5     		b	.L560
 6664              	.LVL772:
 6665              	.L446:
 6666              	.LBB441:
 6667              	.LBB438:
1896:src/display.c **** 	    x[10] = '\0';
 6668              		.loc 1 1896 6 is_stmt 1 view .LVU2162
1897:src/display.c **** 	  }
 6669              		.loc 1 1897 6 view .LVU2163
1896:src/display.c **** 	    x[10] = '\0';
 6670              		.loc 1 1896 11 is_stmt 0 view .LVU2164
 6671 0938 7C82     		strh	r4, [r7, #18]	@ movhi
 6672 093a 28E7     		b	.L448
 6673              	.LVL773:
 6674              	.L678:
 6675              	.LBB436:
1821:src/display.c **** 
 6676              		.loc 1 1821 4 is_stmt 1 view .LVU2165
1823:src/display.c **** 	  xcopy(x, small_minus, 4);
 6677              		.loc 1 1823 4 view .LVU2166
 6678 093c 2222     		movs	r2, #34
ARM GAS  /tmp/ccKZqSeG.s 			page 215


 6679 093e 0DF12501 		add	r1, sp, #37
 6680 0942 0AA8     		add	r0, sp, #40
 6681              	.LVL774:
1823:src/display.c **** 	  xcopy(x, small_minus, 4);
 6682              		.loc 1 1823 4 is_stmt 0 view .LVU2167
 6683 0944 FFF7FEFF 		bl	xcopy
 6684              	.LVL775:
1824:src/display.c **** 	  x += 4;
 6685              		.loc 1 1824 4 is_stmt 1 view .LVU2168
 6686 0948 3846     		mov	r0, r7
 6687 094a 2449     		ldr	r1, .L686+20
 6688 094c 0422     		movs	r2, #4
 6689 094e FFF7FEFF 		bl	xcopy
 6690              	.LVL776:
1825:src/display.c **** 	  negative = 4;
 6691              		.loc 1 1825 4 view .LVU2169
1826:src/display.c **** #else
 6692              		.loc 1 1826 4 view .LVU2170
1825:src/display.c **** 	  negative = 4;
 6693              		.loc 1 1825 6 is_stmt 0 view .LVU2171
 6694 0952 0AAF     		add	r7, sp, #40
 6695              	.LVL777:
1826:src/display.c **** #else
 6696              		.loc 1 1826 13 view .LVU2172
 6697 0954 4FF0040A 		mov	r10, #4
 6698              	.LVL778:
1826:src/display.c **** #else
 6699              		.loc 1 1826 13 view .LVU2173
 6700              	.LBE436:
 6701 0958 DCE6     		b	.L442
 6702              	.LVL779:
 6703              	.L508:
1826:src/display.c **** #else
 6704              		.loc 1 1826 13 view .LVU2174
 6705              	.LBE438:
 6706              	.LBE441:
2177:src/display.c **** 	    odig++;
 6707              		.loc 1 2177 6 is_stmt 1 view .LVU2175
2178:src/display.c **** 	    *obp++ = '.';
 6708              		.loc 1 2178 6 view .LVU2176
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6709              		.loc 1 2179 6 view .LVU2177
2177:src/display.c **** 	    odig++;
 6710              		.loc 1 2177 13 is_stmt 0 view .LVU2178
 6711 095a 42F63062 		movw	r2, #11824
 6712 095e ADF82420 		strh	r2, [sp, #36]	@ movhi
2180:src/display.c **** 	      *obp++ = '0';
 6713              		.loc 1 2180 6 is_stmt 1 view .LVU2179
 6714              	.LVL780:
2180:src/display.c **** 	      *obp++ = '0';
 6715              		.loc 1 2180 20 view .LVU2180
2180:src/display.c **** 	      *obp++ = '0';
 6716              		.loc 1 2180 6 is_stmt 0 view .LVU2181
 6717 0962 721C     		adds	r2, r6, #1
 6718              	.LVL781:
2180:src/display.c **** 	      *obp++ = '0';
 6719              		.loc 1 2180 6 view .LVU2182
ARM GAS  /tmp/ccKZqSeG.s 			page 216


 6720 0964 2AD0     		beq	.L577
 6721 0966 C6F10101 		rsb	r1, r6, #1
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6722              		.loc 1 2179 10 view .LVU2183
 6723 096a 0DF12600 		add	r0, sp, #38
 6724              	.LVL782:
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6725              		.loc 1 2179 10 view .LVU2184
 6726 096e 3944     		add	r1, r1, r7
 6727 0970 0246     		mov	r2, r0
 6728              	.LVL783:
2181:src/display.c **** 	      odig++;
 6729              		.loc 1 2181 15 view .LVU2185
 6730 0972 3025     		movs	r5, #48
 6731              	.LVL784:
 6732              	.L515:
2181:src/display.c **** 	      odig++;
 6733              		.loc 1 2181 8 is_stmt 1 discriminator 3 view .LVU2186
2181:src/display.c **** 	      odig++;
 6734              		.loc 1 2181 15 is_stmt 0 discriminator 3 view .LVU2187
 6735 0974 02F8015B 		strb	r5, [r2], #1
 6736              	.LVL785:
2182:src/display.c **** 	    }
 6737              		.loc 1 2182 8 is_stmt 1 discriminator 3 view .LVU2188
2180:src/display.c **** 	      *obp++ = '0';
 6738              		.loc 1 2180 25 discriminator 3 view .LVU2189
2180:src/display.c **** 	      *obp++ = '0';
 6739              		.loc 1 2180 20 discriminator 3 view .LVU2190
2180:src/display.c **** 	      *obp++ = '0';
 6740              		.loc 1 2180 6 is_stmt 0 discriminator 3 view .LVU2191
 6741 0978 8A42     		cmp	r2, r1
 6742 097a FBD1     		bne	.L515
 6743 097c 6FEA0608 		mvn	r8, r6
 6744 0980 8044     		add	r8, r8, r0
 6745 0982 7542     		rsbs	r5, r6, #0
 6746              	.LVL786:
 6747              	.L514:
2184:src/display.c **** 	      *obp++ = *p++;
 6748              		.loc 1 2184 16 is_stmt 1 view .LVU2192
2184:src/display.c **** 	      *obp++ = *p++;
 6749              		.loc 1 2184 6 is_stmt 0 view .LVU2193
 6750 0984 002B     		cmp	r3, #0
 6751 0986 7FF7BDAD 		ble	.L506
 6752 098a 581E     		subs	r0, r3, #1
 6753 098c 4044     		add	r0, r0, r8
 6754 098e 08F1FF32 		add	r2, r8, #-1
 6755              	.LVL787:
 6756              	.L516:
2185:src/display.c **** 	      odig++;
 6757              		.loc 1 2185 8 is_stmt 1 discriminator 3 view .LVU2194
2185:src/display.c **** 	      odig++;
 6758              		.loc 1 2185 15 is_stmt 0 discriminator 3 view .LVU2195
 6759 0992 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6760              	.LVL788:
2185:src/display.c **** 	      odig++;
 6761              		.loc 1 2185 15 discriminator 3 view .LVU2196
 6762 0996 02F8011F 		strb	r1, [r2, #1]!
ARM GAS  /tmp/ccKZqSeG.s 			page 217


2186:src/display.c **** 	    }
 6763              		.loc 1 2186 8 is_stmt 1 discriminator 3 view .LVU2197
2184:src/display.c **** 	      *obp++ = *p++;
 6764              		.loc 1 2184 25 discriminator 3 view .LVU2198
 6765              	.LVL789:
2184:src/display.c **** 	      *obp++ = *p++;
 6766              		.loc 1 2184 16 discriminator 3 view .LVU2199
2184:src/display.c **** 	      *obp++ = *p++;
 6767              		.loc 1 2184 6 is_stmt 0 discriminator 3 view .LVU2200
 6768 099a 9042     		cmp	r0, r2
 6769 099c F9D1     		bne	.L516
 6770              	.LVL790:
2184:src/display.c **** 	      *obp++ = *p++;
 6771              		.loc 1 2184 6 discriminator 3 view .LVU2201
 6772 099e 9844     		add	r8, r8, r3
 6773              	.LVL791:
2184:src/display.c **** 	      *obp++ = *p++;
 6774              		.loc 1 2184 6 discriminator 3 view .LVU2202
 6775 09a0 1D44     		add	r5, r5, r3
 6776 09a2 AFE5     		b	.L506
 6777              	.LVL792:
 6778              	.L677:
2127:src/display.c **** 
 6779              		.loc 1 2127 2 is_stmt 1 view .LVU2203
 6780 09a4 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2127:src/display.c **** 
 6781              		.loc 1 2127 9 is_stmt 0 view .LVU2204
 6782 09a8 0BEB0E03 		add	r3, fp, lr
 6783              	.LVL793:
2127:src/display.c **** 
 6784              		.loc 1 2127 45 is_stmt 1 view .LVU2205
2127:src/display.c **** 
 6785              		.loc 1 2127 2 is_stmt 0 view .LVU2206
 6786 09ac 51B1     		cbz	r1, .L681
2116:src/display.c **** 	      extra_digits = 0;
 6787              		.loc 1 2116 37 view .LVU2207
 6788 09ae 0225     		movs	r5, #2
 6789 09b0 07E4     		b	.L558
 6790              	.LVL794:
 6791              	.L680:
2116:src/display.c **** 	      extra_digits = 0;
 6792              		.loc 1 2116 37 view .LVU2208
 6793 09b2 079B     		ldr	r3, [sp, #28]
 6794              	.LVL795:
2207:src/display.c **** 	    *obp++ = '.';
 6795              		.loc 1 2207 10 view .LVU2209
 6796 09b4 0125     		movs	r5, #1
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6797              		.loc 1 2208 10 view .LVU2210
 6798 09b6 0DF12608 		add	r8, sp, #38
 6799              	.LVL796:
2208:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6800              		.loc 1 2208 10 view .LVU2211
 6801 09ba 2FE7     		b	.L524
 6802              	.LVL797:
 6803              	.L577:
2178:src/display.c **** 	    *obp++ = '.';
ARM GAS  /tmp/ccKZqSeG.s 			page 218


 6804              		.loc 1 2178 10 view .LVU2212
 6805 09bc 0125     		movs	r5, #1
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6806              		.loc 1 2179 10 view .LVU2213
 6807 09be 0DF12608 		add	r8, sp, #38
 6808              	.LVL798:
2179:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6809              		.loc 1 2179 10 view .LVU2214
 6810 09c2 DFE7     		b	.L514
 6811              	.LVL799:
 6812              	.L681:
1934:src/display.c **** 	int odig = 0;
 6813              		.loc 1 1934 15 view .LVU2215
 6814 09c4 3946     		mov	r1, r7
 6815 09c6 7EE5     		b	.L496
 6816              	.L687:
 6817              		.align	2
 6818              	.L686:
 6819 09c8 00000000 		.word	.LANCHOR1
 6820 09cc D34D6210 		.word	274877907
 6821 09d0 18FCFFFF 		.word	-1000
 6822 09d4 00000000 		.word	.LANCHOR0
 6823 09d8 00000000 		.word	.LANCHOR11
 6824 09dc 00000000 		.word	.LANCHOR10
 6825              		.cfi_endproc
 6826              	.LFE27:
 6828              		.section	.text.set_x,"ax",%progbits
 6829              		.align	1
 6830              		.p2align 2,,3
 6831              		.syntax unified
 6832              		.thumb
 6833              		.thumb_func
 6834              		.fpu fpv4-sp-d16
 6836              	set_x:
 6837              	.LVL800:
 6838              	.LFB26:
1922:src/display.c **** 	decNumber z;
 6839              		.loc 1 1922 66 is_stmt 1 view -0
 6840              		.cfi_startproc
 6841              		@ args = 0, pretend = 0, frame = 40
 6842              		@ frame_needed = 0, uses_anonymous_args = 0
1923:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6843              		.loc 1 1923 2 view .LVU2217
1924:src/display.c **** 
 6844              		.loc 1 1924 2 view .LVU2218
1922:src/display.c **** 	decNumber z;
 6845              		.loc 1 1922 66 is_stmt 0 view .LVU2219
 6846 0000 30B5     		push	{r4, r5, lr}
 6847              		.cfi_def_cfa_offset 12
 6848              		.cfi_offset 4, -12
 6849              		.cfi_offset 5, -8
 6850              		.cfi_offset 14, -4
 6851 0002 8BB0     		sub	sp, sp, #44
 6852              		.cfi_def_cfa_offset 56
1924:src/display.c **** 
 6853              		.loc 1 1924 6 view .LVU2220
 6854 0004 0C23     		movs	r3, #12
ARM GAS  /tmp/ccKZqSeG.s 			page 219


1927:src/display.c **** 	else
 6855              		.loc 1 1927 4 view .LVU2221
 6856 0006 01AD     		add	r5, sp, #4
1922:src/display.c **** 	decNumber z;
 6857              		.loc 1 1922 66 view .LVU2222
 6858 0008 0C46     		mov	r4, r1
1924:src/display.c **** 
 6859              		.loc 1 1924 6 view .LVU2223
 6860 000a 0093     		str	r3, [sp]
1926:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6861              		.loc 1 1926 2 is_stmt 1 view .LVU2224
1927:src/display.c **** 	else
 6862              		.loc 1 1927 4 is_stmt 0 view .LVU2225
 6863 000c 2946     		mov	r1, r5
 6864              	.LVL801:
1926:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6865              		.loc 1 1926 5 view .LVU2226
 6866 000e 42B1     		cbz	r2, .L689
1927:src/display.c **** 	else
 6867              		.loc 1 1927 4 is_stmt 1 view .LVU2227
 6868 0010 FFF7FEFF 		bl	decimal128ToNumber
 6869              	.LVL802:
1930:src/display.c ****       }
 6870              		.loc 1 1930 2 view .LVU2228
 6871 0014 2146     		mov	r1, r4
 6872 0016 2846     		mov	r0, r5
 6873 0018 6A46     		mov	r2, sp
 6874 001a FFF7FEFF 		bl	set_x_dn
 6875              	.LVL803:
1931:src/display.c **** 
 6876              		.loc 1 1931 7 is_stmt 0 view .LVU2229
 6877 001e 0BB0     		add	sp, sp, #44
 6878              		.cfi_remember_state
 6879              		.cfi_def_cfa_offset 12
 6880              		@ sp needed
 6881 0020 30BD     		pop	{r4, r5, pc}
 6882              	.LVL804:
 6883              	.L689:
 6884              		.cfi_restore_state
1929:src/display.c **** 	set_x_dn(&z, res, &digits);
 6885              		.loc 1 1929 4 is_stmt 1 view .LVU2230
 6886 0022 FFF7FEFF 		bl	decimal64ToNumber
 6887              	.LVL805:
1930:src/display.c ****       }
 6888              		.loc 1 1930 2 view .LVU2231
 6889 0026 2146     		mov	r1, r4
 6890 0028 2846     		mov	r0, r5
 6891 002a 6A46     		mov	r2, sp
 6892 002c FFF7FEFF 		bl	set_x_dn
 6893              	.LVL806:
1931:src/display.c **** 
 6894              		.loc 1 1931 7 is_stmt 0 view .LVU2232
 6895 0030 0BB0     		add	sp, sp, #44
 6896              		.cfi_def_cfa_offset 12
 6897              		@ sp needed
 6898 0032 30BD     		pop	{r4, r5, pc}
1931:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 220


 6899              		.loc 1 1931 7 view .LVU2233
 6900              		.cfi_endproc
 6901              	.LFE26:
 6903              		.section	.text.format_reg,"ax",%progbits
 6904              		.align	1
 6905              		.p2align 2,,3
 6906              		.global	format_reg
 6907              		.syntax unified
 6908              		.thumb
 6909              		.thumb_func
 6910              		.fpu fpv4-sp-d16
 6912              	format_reg:
 6913              	.LVL807:
 6914              	.LFB28:
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6915              		.loc 1 2338 45 is_stmt 1 view -0
 6916              		.cfi_startproc
 6917              		@ args = 0, pretend = 0, frame = 40
 6918              		@ frame_needed = 0, uses_anonymous_args = 0
2339:src/display.c **** 
 6919              		.loc 1 2339 2 view .LVU2235
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6920              		.loc 1 2338 45 is_stmt 0 view .LVU2236
 6921 0000 30B5     		push	{r4, r5, lr}
 6922              		.cfi_def_cfa_offset 12
 6923              		.cfi_offset 4, -12
 6924              		.cfi_offset 5, -8
 6925              		.cfi_offset 14, -4
 6926 0002 8BB0     		sub	sp, sp, #44
 6927              		.cfi_def_cfa_offset 56
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6928              		.loc 1 2338 45 view .LVU2237
 6929 0004 0C46     		mov	r4, r1
 6930 0006 0546     		mov	r5, r0
2339:src/display.c **** 
 6931              		.loc 1 2339 28 view .LVU2238
 6932 0008 FFF7FEFF 		bl	get_reg_n
 6933              	.LVL808:
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6934              		.loc 1 2341 6 view .LVU2239
 6935 000c 154B     		ldr	r3, .L699
 6936 000e 1B68     		ldr	r3, [r3]
 6937 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6938              	.LVL809:
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6939              		.loc 1 2341 2 is_stmt 1 view .LVU2240
2341:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6940              		.loc 1 2341 5 is_stmt 0 view .LVU2241
 6941 0014 D207     		lsls	r2, r2, #31
 6942 0016 1DD4     		bmi	.L697
2344:src/display.c **** 	  decNumber x;
 6943              		.loc 1 2344 7 is_stmt 1 view .LVU2242
2344:src/display.c **** 	  decNumber x;
 6944              		.loc 1 2344 10 is_stmt 0 view .LVU2243
 6945 0018 44B1     		cbz	r4, .L698
 6946              	.L695:
2355:src/display.c ****       }
ARM GAS  /tmp/ccKZqSeG.s 			page 221


 6947              		.loc 1 2355 4 is_stmt 1 view .LVU2244
2355:src/display.c ****       }
 6948              		.loc 1 2355 24 is_stmt 0 view .LVU2245
 6949 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2355:src/display.c ****       }
 6950              		.loc 1 2355 4 view .LVU2246
 6951 001e 2146     		mov	r1, r4
 6952 0020 C2F38012 		ubfx	r2, r2, #6, #1
 6953 0024 FFF7FEFF 		bl	set_x
 6954              	.LVL810:
2356:src/display.c **** 
 6955              		.loc 1 2356 7 view .LVU2247
 6956 0028 0BB0     		add	sp, sp, #44
 6957              		.cfi_remember_state
 6958              		.cfi_def_cfa_offset 12
 6959              		@ sp needed
 6960 002a 30BD     		pop	{r4, r5, pc}
 6961              	.LVL811:
 6962              	.L698:
 6963              		.cfi_restore_state
2344:src/display.c **** 	  decNumber x;
 6964              		.loc 1 2344 32 discriminator 1 view .LVU2248
 6965 002c 0E4A     		ldr	r2, .L699+4
2344:src/display.c **** 	  decNumber x;
 6966              		.loc 1 2344 23 discriminator 1 view .LVU2249
 6967 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6968 0030 012A     		cmp	r2, #1
 6969 0032 F2D9     		bls	.L695
 6970              	.LVL812:
 6971              	.LBB445:
 6972              	.LBI445:
2338:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6973              		.loc 1 2338 12 is_stmt 1 view .LVU2250
 6974              	.LBB446:
 6975              	.LBB447:
2345:src/display.c **** 	  int s;
 6976              		.loc 1 2345 4 view .LVU2251
2346:src/display.c **** 	  unsigned long long int v;
 6977              		.loc 1 2346 4 view .LVU2252
2347:src/display.c **** 
 6978              		.loc 1 2347 4 view .LVU2253
2349:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6979              		.loc 1 2349 4 view .LVU2254
 6980 0034 2946     		mov	r1, r5
 6981 0036 01A8     		add	r0, sp, #4
 6982              	.LVL813:
2349:src/display.c **** 	  v = dn_to_ull(&x, &s);
 6983              		.loc 1 2349 4 is_stmt 0 view .LVU2255
 6984 0038 FFF7FEFF 		bl	getRegister
 6985              	.LVL814:
2350:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6986              		.loc 1 2350 4 is_stmt 1 view .LVU2256
2350:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 6987              		.loc 1 2350 8 is_stmt 0 view .LVU2257
 6988 003c 01A8     		add	r0, sp, #4
 6989 003e 6946     		mov	r1, sp
 6990 0040 FFF7FEFF 		bl	dn_to_ull
ARM GAS  /tmp/ccKZqSeG.s 			page 222


 6991              	.LVL815:
2351:src/display.c **** 	}
 6992              		.loc 1 2351 4 is_stmt 1 view .LVU2258
 6993 0044 009A     		ldr	r2, [sp]
 6994 0046 FFF7FEFF 		bl	build_value
 6995              	.LVL816:
2351:src/display.c **** 	}
 6996              		.loc 1 2351 4 is_stmt 0 view .LVU2259
 6997 004a 2246     		mov	r2, r4
 6998 004c FFF7FEFF 		bl	set_int_x
 6999              	.LVL817:
 7000              	.LBE447:
 7001              	.LBE446:
 7002              	.LBE445:
2356:src/display.c **** 
 7003              		.loc 1 2356 7 view .LVU2260
 7004 0050 0BB0     		add	sp, sp, #44
 7005              		.cfi_remember_state
 7006              		.cfi_def_cfa_offset 12
 7007              		@ sp needed
 7008 0052 30BD     		pop	{r4, r5, pc}
 7009              	.LVL818:
 7010              	.L697:
 7011              		.cfi_restore_state
2342:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7012              		.loc 1 2342 4 is_stmt 1 view .LVU2261
 7013 0054 2846     		mov	r0, r5
 7014              	.LVL819:
2342:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7015              		.loc 1 2342 4 is_stmt 0 view .LVU2262
 7016 0056 FFF7FEFF 		bl	get_reg_n_int
 7017              	.LVL820:
 7018 005a 2246     		mov	r2, r4
 7019 005c FFF7FEFF 		bl	set_int_x
 7020              	.LVL821:
2356:src/display.c **** 
 7021              		.loc 1 2356 7 view .LVU2263
 7022 0060 0BB0     		add	sp, sp, #44
 7023              		.cfi_def_cfa_offset 12
 7024              		@ sp needed
 7025 0062 30BD     		pop	{r4, r5, pc}
 7026              	.LVL822:
 7027              	.L700:
2356:src/display.c **** 
 7028              		.loc 1 2356 7 view .LVU2264
 7029              		.align	2
 7030              	.L699:
 7031 0064 00000000 		.word	main_ram
 7032 0068 00000000 		.word	StateWhileOn
 7033              		.cfi_endproc
 7034              	.LFE28:
 7036              		.section	.text.set_status_right,"ax",%progbits
 7037              		.align	1
 7038              		.p2align 2,,3
 7039              		.syntax unified
 7040              		.thumb
 7041              		.thumb_func
ARM GAS  /tmp/ccKZqSeG.s 			page 223


 7042              		.fpu fpv4-sp-d16
 7044              	set_status_right:
 7045              	.LVL823:
 7046              	.LFB48:
3524:src/display.c ****       static void set_status_top(const char *str) {
3525:src/display.c **** 	if (no_status_top) return;
3526:src/display.c **** 	if (State2.runmode) {
3527:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3528:src/display.c **** 	}
3529:src/display.c **** 	else {
3530:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3531:src/display.c **** 	}
3532:src/display.c ****       }
3533:src/display.c **** #ifdef TOP_ROW
3534:src/display.c ****       static void set_status_top_always(const char *str) {
3535:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3536:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3537:src/display.c ****       }
3538:src/display.c **** #endif
3539:src/display.c **** 
3540:src/display.c ****       /*
3541:src/display.c ****        *  Display messages (global function)
3542:src/display.c ****        */
3543:src/display.c ****       extern void message(const char *str1, const char *str2)
3544:src/display.c ****       {
3545:src/display.c **** 	State2.disp_freeze = 0;
3546:src/display.c **** 	State2.disp_small = 0;
3547:src/display.c **** 	WasDataEntry = 0;
3548:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3549:src/display.c **** 	  // Complete redraw necessary
3550:src/display.c **** 	  DispMsg = str1;
3551:src/display.c **** 	  display();
3552:src/display.c **** 	}
3553:src/display.c **** 	else {
3554:src/display.c **** 	  if ( str2 != NULL ) {
3555:src/display.c **** 	    reset_disp();
3556:src/display.c **** 	    ShowRPN = 0;
3557:src/display.c **** 	    set_annunciators();
3558:src/display.c **** 	    set_digits_string( str2, 0 );
3559:src/display.c **** 	  }
3560:src/display.c **** 	  set_status( str1 );
3561:src/display.c **** 	  finish_display();// message
3562:src/display.c **** 	}
3563:src/display.c ****       }
3564:src/display.c **** 
3565:src/display.c **** #ifdef INCLUDE_STOPWATCH
3566:src/display.c **** 
3567:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3568:src/display.c **** 	int j = SEGS_EXP_BASE;
3569:src/display.c **** 	for (; *exponent!=0; exponent++) {
3570:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3571:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3572:src/display.c **** 	}
3573:src/display.c ****       }
3574:src/display.c **** 
3575:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3576:src/display.c ****       {
ARM GAS  /tmp/ccKZqSeG.s 			page 224


3577:src/display.c **** 	reset_disp();
3578:src/display.c **** 	set_dot(DEG);
3579:src/display.c **** 	set_digits_string( str2, 0 );
3580:src/display.c **** 	State2.disp_small = force_small;
3581:src/display.c **** 	if( exponent!=NULL ) {
3582:src/display.c **** 	  stopwatch_exponent(exponent);
3583:src/display.c **** 	}
3584:src/display.c **** 	set_status( str1 );
3585:src/display.c **** 	finish_display();
3586:src/display.c ****       }
3587:src/display.c **** 
3588:src/display.c **** 
3589:src/display.c **** #endif // INCLUDE_STOPWATCH
3590:src/display.c **** 
3591:src/display.c ****       /* Display the right hand characters from the given string.
3592:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3593:src/display.c ****        * and reduce font size if required.
3594:src/display.c ****        */
3595:src/display.c ****       static void set_status_right(const char *str) {
 7047              		.loc 1 3595 53 is_stmt 1 view -0
 7048              		.cfi_startproc
 7049              		@ args = 0, pretend = 0, frame = 0
 7050              		@ frame_needed = 0, uses_anonymous_args = 0
3596:src/display.c **** 	unsigned int x = 0;
 7051              		.loc 1 3596 2 view .LVU2266
3597:src/display.c **** 	const char *p;
 7052              		.loc 1 3597 2 view .LVU2267
3598:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7053              		.loc 1 3598 2 view .LVU2268
3595:src/display.c **** 	unsigned int x = 0;
 7054              		.loc 1 3595 53 is_stmt 0 view .LVU2269
 7055 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7056              		.cfi_def_cfa_offset 28
 7057              		.cfi_offset 4, -28
 7058              		.cfi_offset 5, -24
 7059              		.cfi_offset 6, -20
 7060              		.cfi_offset 7, -16
 7061              		.cfi_offset 8, -12
 7062              		.cfi_offset 9, -8
 7063              		.cfi_offset 14, -4
 7064              		.loc 1 3598 23 view .LVU2270
 7065 0004 194B     		ldr	r3, .L716
 7066              		.loc 1 3598 41 view .LVU2271
 7067 0006 93F91630 		ldrsb	r3, [r3, #22]
 7068 000a 002B     		cmp	r3, #0
3595:src/display.c **** 	unsigned int x = 0;
 7069              		.loc 1 3595 53 view .LVU2272
 7070 000c 83B0     		sub	sp, sp, #12
 7071              		.cfi_def_cfa_offset 40
3595:src/display.c **** 	unsigned int x = 0;
 7072              		.loc 1 3595 53 view .LVU2273
 7073 000e 0646     		mov	r6, r0
 7074              		.loc 1 3598 41 view .LVU2274
 7075 0010 23DA     		bge	.L715
 7076              	.LVL824:
 7077              	.L702:
 7078              		.loc 1 3598 12 view .LVU2275
ARM GAS  /tmp/ccKZqSeG.s 			page 225


 7079 0012 4FF00108 		mov	r8, #1
3599:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7080              		.loc 1 3599 36 view .LVU2276
 7081 0016 4FF48077 		mov	r7, #256
 7082              	.L703:
 7083              	.LVL825:
3600:src/display.c **** 
3601:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7084              		.loc 1 3601 2 is_stmt 1 discriminator 4 view .LVU2277
 7085              		.loc 1 3601 14 discriminator 4 view .LVU2278
 7086              		.loc 1 3601 2 is_stmt 0 discriminator 4 view .LVU2279
 7087 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7088 001c 3446     		mov	r4, r6
 7089 001e 1BB1     		cbz	r3, .L704
 7090              	.LVL826:
 7091              	.L705:
 7092              		.loc 1 3601 30 is_stmt 1 discriminator 3 view .LVU2280
 7093              		.loc 1 3601 26 discriminator 3 view .LVU2281
 7094              		.loc 1 3601 14 discriminator 3 view .LVU2282
 7095              		.loc 1 3601 2 is_stmt 0 discriminator 3 view .LVU2283
 7096 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7097              	.LVL827:
 7098              		.loc 1 3601 2 discriminator 3 view .LVU2284
 7099 0024 002B     		cmp	r3, #0
 7100 0026 FBD1     		bne	.L705
 7101              	.L704:
3596:src/display.c **** 	const char *p;
 7102              		.loc 1 3596 15 view .LVU2285
 7103 0028 0025     		movs	r5, #0
 7104 002a 06E0     		b	.L706
 7105              	.LVL828:
 7106              	.L707:
 7107              	.LBB448:
3602:src/display.c **** 	while (--p >= str) {
3603:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7108              		.loc 1 3603 27 view .LVU2286
 7109 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3604:src/display.c **** 
3605:src/display.c **** 	  x += charlengths(c);
 7110              		.loc 1 3605 9 view .LVU2287
 7111 002e 3844     		add	r0, r0, r7
 7112 0030 FFF7FEFF 		bl	charlengths
 7113              	.LVL829:
 7114              		.loc 1 3605 6 view .LVU2288
 7115 0034 0544     		add	r5, r5, r0
 7116              	.LVL830:
3606:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7117              		.loc 1 3606 4 is_stmt 1 view .LVU2289
 7118              		.loc 1 3606 7 is_stmt 0 view .LVU2290
 7119 0036 4B2D     		cmp	r5, #75
 7120 0038 03D8     		bhi	.L708
 7121              	.LVL831:
 7122              	.L706:
3603:src/display.c **** 
 7123              		.loc 1 3603 4 is_stmt 1 view .LVU2291
3603:src/display.c **** 
 7124              		.loc 1 3603 4 is_stmt 0 view .LVU2292
ARM GAS  /tmp/ccKZqSeG.s 			page 226


 7125              	.LBE448:
3602:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7126              		.loc 1 3602 8 is_stmt 1 view .LVU2293
 7127 003a A146     		mov	r9, r4
 7128 003c 013C     		subs	r4, r4, #1
 7129              	.LVL832:
 7130              	.LBB449:
3605:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7131              		.loc 1 3605 4 view .LVU2294
3605:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7132              		.loc 1 3605 4 is_stmt 0 view .LVU2295
 7133              	.LBE449:
3602:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7134              		.loc 1 3602 8 view .LVU2296
 7135 003e A642     		cmp	r6, r4
 7136 0040 F4D9     		bls	.L707
 7137              	.LVL833:
 7138              	.L708:
3607:src/display.c **** 	    break;
3608:src/display.c **** 	}
3609:src/display.c **** 	set_status_sized(p+1, toolarge);
 7139              		.loc 1 3609 2 is_stmt 1 view .LVU2297
 7140              	.LBB450:
 7141              	.LBI450:
3379:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7142              		.loc 1 3379 19 view .LVU2298
 7143              	.LBB451:
3380:src/display.c ****       }
 7144              		.loc 1 3380 2 view .LVU2299
 7145 0042 40F24A23 		movw	r3, #586
 7146 0046 0093     		str	r3, [sp]
 7147 0048 4146     		mov	r1, r8
 7148 004a 4846     		mov	r0, r9
 7149 004c 8E23     		movs	r3, #142
 7150 004e 4A22     		movs	r2, #74
 7151 0050 FFF7FEFF 		bl	s_s_sized
 7152              	.LVL834:
3380:src/display.c ****       }
 7153              		.loc 1 3380 2 is_stmt 0 view .LVU2300
 7154              	.LBE451:
 7155              	.LBE450:
3610:src/display.c ****       }
 7156              		.loc 1 3610 7 view .LVU2301
 7157 0054 03B0     		add	sp, sp, #12
 7158              		.cfi_remember_state
 7159              		.cfi_def_cfa_offset 28
 7160              		@ sp needed
 7161 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7162              	.LVL835:
 7163              	.L715:
 7164              		.cfi_restore_state
 7165              	.LBB452:
 7166              	.LBI452:
3511:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7167              		.loc 1 3511 18 is_stmt 1 view .LVU2302
 7168              	.LBB453:
3512:src/display.c ****       }
ARM GAS  /tmp/ccKZqSeG.s 			page 227


 7169              		.loc 1 3512 2 view .LVU2303
3512:src/display.c ****       }
 7170              		.loc 1 3512 9 is_stmt 0 view .LVU2304
 7171 005a 0021     		movs	r1, #0
 7172 005c FFF7FEFF 		bl	pixel_length
 7173              	.LVL836:
3512:src/display.c ****       }
 7174              		.loc 1 3512 9 view .LVU2305
 7175              	.LBE453:
 7176              	.LBE452:
3598:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7177              		.loc 1 3598 41 view .LVU2306
 7178 0060 4B28     		cmp	r0, #75
 7179 0062 D6DC     		bgt	.L702
3598:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7180              		.loc 1 3598 12 view .LVU2307
 7181 0064 4FF00008 		mov	r8, #0
3599:src/display.c **** 
 7182              		.loc 1 3599 36 view .LVU2308
 7183 0068 4746     		mov	r7, r8
 7184 006a D6E7     		b	.L703
 7185              	.L717:
 7186              		.align	2
 7187              	.L716:
 7188 006c 00000000 		.word	StateWhileOn
 7189              		.cfi_endproc
 7190              	.LFE48:
 7192              		.section	.text.set_status_top.part.0,"ax",%progbits
 7193              		.align	1
 7194              		.p2align 2,,3
 7195              		.syntax unified
 7196              		.thumb
 7197              		.thumb_func
 7198              		.fpu fpv4-sp-d16
 7200              	set_status_top.part.0:
 7201              	.LVL837:
 7202              	.LFB57:
3524:src/display.c **** 	if (no_status_top) return;
 7203              		.loc 1 3524 19 is_stmt 1 view -0
 7204              		.cfi_startproc
 7205              		@ args = 0, pretend = 0, frame = 0
 7206              		@ frame_needed = 0, uses_anonymous_args = 0
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7207              		.loc 1 3526 2 view .LVU2310
3524:src/display.c **** 	if (no_status_top) return;
 7208              		.loc 1 3524 19 is_stmt 0 view .LVU2311
 7209 0000 10B5     		push	{r4, lr}
 7210              		.cfi_def_cfa_offset 8
 7211              		.cfi_offset 4, -8
 7212              		.cfi_offset 14, -4
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7213              		.loc 1 3526 6 view .LVU2312
 7214 0002 184B     		ldr	r3, .L728
 7215 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7216              		.loc 1 3526 5 view .LVU2313
 7217 0006 13F04001 		ands	r1, r3, #64
ARM GAS  /tmp/ccKZqSeG.s 			page 228


3524:src/display.c **** 	if (no_status_top) return;
 7218              		.loc 1 3524 19 view .LVU2314
 7219 000a 82B0     		sub	sp, sp, #8
 7220              		.cfi_def_cfa_offset 16
3524:src/display.c **** 	if (no_status_top) return;
 7221              		.loc 1 3524 19 view .LVU2315
 7222 000c 0446     		mov	r4, r0
3526:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7223              		.loc 1 3526 5 view .LVU2316
 7224 000e 0DD0     		beq	.L719
3527:src/display.c **** 	}
 7225              		.loc 1 3527 4 is_stmt 1 view .LVU2317
 7226 0010 1A06     		lsls	r2, r3, #24
 7227 0012 18D5     		bpl	.L726
 7228 0014 0121     		movs	r1, #1
 7229              	.LVL838:
 7230              	.L720:
 7231              	.LBB454:
 7232              	.LBI454:
3382:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7233              		.loc 1 3382 19 view .LVU2318
 7234              	.LBB455:
3383:src/display.c ****       }
 7235              		.loc 1 3383 2 view .LVU2319
 7236 0016 4FF45373 		mov	r3, #844
 7237 001a 0093     		str	r3, [sp]
 7238 001c 2046     		mov	r0, r4
 7239 001e 40F24A23 		movw	r3, #586
 7240 0022 2B22     		movs	r2, #43
 7241 0024 FFF7FEFF 		bl	s_s_sized
 7242              	.LVL839:
3383:src/display.c ****       }
 7243              		.loc 1 3383 2 is_stmt 0 view .LVU2320
 7244              	.LBE455:
 7245              	.LBE454:
3532:src/display.c **** #ifdef TOP_ROW
 7246              		.loc 1 3532 7 view .LVU2321
 7247 0028 02B0     		add	sp, sp, #8
 7248              		.cfi_remember_state
 7249              		.cfi_def_cfa_offset 8
 7250              		@ sp needed
 7251 002a 10BD     		pop	{r4, pc}
 7252              	.LVL840:
 7253              	.L719:
 7254              		.cfi_restore_state
3530:src/display.c **** 	}
 7255              		.loc 1 3530 4 is_stmt 1 view .LVU2322
 7256 002c 1B06     		lsls	r3, r3, #24
 7257 002e 12D5     		bpl	.L727
 7258 0030 0121     		movs	r1, #1
 7259              	.LVL841:
 7260              	.L722:
 7261              	.LBB456:
 7262              	.LBI456:
3379:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7263              		.loc 1 3379 19 view .LVU2323
 7264              	.LBB457:
ARM GAS  /tmp/ccKZqSeG.s 			page 229


3380:src/display.c ****       }
 7265              		.loc 1 3380 2 view .LVU2324
 7266 0032 40F24A23 		movw	r3, #586
 7267 0036 0093     		str	r3, [sp]
 7268 0038 2046     		mov	r0, r4
 7269 003a 8E23     		movs	r3, #142
 7270 003c 4A22     		movs	r2, #74
 7271 003e FFF7FEFF 		bl	s_s_sized
 7272              	.LVL842:
3380:src/display.c ****       }
 7273              		.loc 1 3380 2 is_stmt 0 view .LVU2325
 7274              	.LBE457:
 7275              	.LBE456:
3532:src/display.c **** #ifdef TOP_ROW
 7276              		.loc 1 3532 7 view .LVU2326
 7277 0042 02B0     		add	sp, sp, #8
 7278              		.cfi_remember_state
 7279              		.cfi_def_cfa_offset 8
 7280              		@ sp needed
 7281 0044 10BD     		pop	{r4, pc}
 7282              	.LVL843:
 7283              	.L726:
 7284              		.cfi_restore_state
 7285              	.LBB458:
 7286              	.LBI458:
3514:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7287              		.loc 1 3514 18 is_stmt 1 view .LVU2327
 7288              	.LBB459:
3515:src/display.c ****       }
 7289              		.loc 1 3515 2 view .LVU2328
3515:src/display.c ****       }
 7290              		.loc 1 3515 9 is_stmt 0 view .LVU2329
 7291 0046 0021     		movs	r1, #0
 7292 0048 FFF7FEFF 		bl	pixel_length
 7293              	.LVL844:
3515:src/display.c ****       }
 7294              		.loc 1 3515 9 view .LVU2330
 7295              	.LBE459:
 7296              	.LBE458:
3527:src/display.c **** 	}
 7297              		.loc 1 3527 4 view .LVU2331
 7298 004c 2C28     		cmp	r0, #44
 7299 004e D4BF     		ite	le
 7300 0050 0021     		movle	r1, #0
 7301 0052 0121     		movgt	r1, #1
 7302 0054 DFE7     		b	.L720
 7303              	.LVL845:
 7304              	.L727:
 7305              	.LBB460:
 7306              	.LBI460:
3511:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7307              		.loc 1 3511 18 is_stmt 1 view .LVU2332
 7308              	.LBB461:
3512:src/display.c ****       }
 7309              		.loc 1 3512 2 view .LVU2333
3512:src/display.c ****       }
 7310              		.loc 1 3512 9 is_stmt 0 view .LVU2334
ARM GAS  /tmp/ccKZqSeG.s 			page 230


 7311 0056 FFF7FEFF 		bl	pixel_length
 7312              	.LVL846:
3512:src/display.c ****       }
 7313              		.loc 1 3512 9 view .LVU2335
 7314              	.LBE461:
 7315              	.LBE460:
3530:src/display.c **** 	}
 7316              		.loc 1 3530 4 view .LVU2336
 7317 005a 4B28     		cmp	r0, #75
 7318 005c D4BF     		ite	le
 7319 005e 0021     		movle	r1, #0
 7320 0060 0121     		movgt	r1, #1
 7321 0062 E6E7     		b	.L722
 7322              	.L729:
 7323              		.align	2
 7324              	.L728:
 7325 0064 00000000 		.word	StateWhileOn
 7326              		.cfi_endproc
 7327              	.LFE57:
 7329              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7330              		.align	2
 7331              	.LC2:
 7332 0000 32630600 		.ascii	"2c\006\000"
 7333              		.align	2
 7334              	.LC3:
 7335 0004 07C63C00 		.ascii	"\007\306<\000"
 7336              		.align	2
 7337              	.LC4:
 7338 0008 07876900 		.ascii	"\007\207i\000"
 7339              		.align	2
 7340              	.LC5:
 7341 000c 07C67900 		.ascii	"\007\306y\000"
 7342              		.align	2
 7343              	.LC6:
 7344 0010 07950600 		.ascii	"\007\225\006\000"
 7345              		.align	2
 7346              	.LC7:
 7347 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7347      060600
 7348 001b 00       		.align	2
 7349              	.LC8:
 7350 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7350      060600
 7351 0023 00       		.align	2
 7352              	.LC9:
 7353 0024 07C74400 		.ascii	"\007\307D\000"
 7354              		.align	2
 7355              	.LC10:
 7356 0028 07872000 		.ascii	"\007\207 \000"
 7357              		.align	2
 7358              	.LC11:
 7359 002c 4C656E67 		.ascii	"Length:\000"
 7359      74683A00 
 7360              		.align	2
 7361              	.LC12:
 7362 0034 5265616C 		.ascii	"Real:\000"
 7362      3A00
ARM GAS  /tmp/ccKZqSeG.s 			page 231


 7363 003a 0000     		.align	2
 7364              	.LC13:
 7365 003c 416E676C 		.ascii	"Angle:\000"
 7365      653A00
 7366 0043 00       		.align	2
 7367              	.LC14:
 7368 0044 496D6167 		.ascii	"Imag:\000"
 7368      3A00
 7369 004a 0000     		.align	2
 7370              	.LC15:
 7371 004c 07876A00 		.ascii	"\007\207j\000"
 7372              		.align	2
 7373              	.LC16:
 7374 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7374      0700
 7375 0056 0000     		.align	2
 7376              	.LC17:
 7377 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7377      00
 7378 005d 000000   		.align	2
 7379              	.LC18:
 7380 0060 07C73C00 		.ascii	"\007\307<\000"
 7381              		.align	2
 7382              	.LC19:
 7383 0064 07C77900 		.ascii	"\007\307y\000"
 7384              		.align	2
 7385              	.LC21:
 7386 0068 07E43F00 		.ascii	"\007\344?\000"
 7387              		.section	.text.annunciators,"ax",%progbits
 7388              		.align	1
 7389              		.p2align 2,,3
 7390              		.syntax unified
 7391              		.thumb
 7392              		.thumb_func
 7393              		.fpu fpv4-sp-d16
 7395              	annunciators:
 7396              	.LFB16:
 533:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7397              		.loc 1 533 36 is_stmt 1 view -0
 7398              		.cfi_startproc
 7399              		@ args = 0, pretend = 0, frame = 128
 7400              		@ frame_needed = 0, uses_anonymous_args = 0
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 7401              		.loc 1 535 7 view .LVU2338
 533:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7402              		.loc 1 533 36 is_stmt 0 view .LVU2339
 7403 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7404              		.cfi_def_cfa_offset 28
 7405              		.cfi_offset 4, -28
 7406              		.cfi_offset 5, -24
 7407              		.cfi_offset 6, -20
 7408              		.cfi_offset 7, -16
 7409              		.cfi_offset 8, -12
 7410              		.cfi_offset 9, -8
 7411              		.cfi_offset 14, -4
 547:src/display.c **** #  endif
 7412              		.loc 1 547 38 view .LVU2340
ARM GAS  /tmp/ccKZqSeG.s 			page 232


 7413 0004 9D4C     		ldr	r4, .L917
 533:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7414              		.loc 1 533 36 view .LVU2341
 7415 0006 A3B0     		sub	sp, sp, #140
 7416              		.cfi_def_cfa_offset 168
 7417              	.LVL847:
 536:src/display.c ****       int n;
 7418              		.loc 1 536 7 is_stmt 1 view .LVU2342
 537:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7419              		.loc 1 537 7 view .LVU2343
 538:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7420              		.loc 1 538 7 view .LVU2344
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7421              		.loc 1 539 7 view .LVU2345
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7422              		.loc 1 539 43 is_stmt 0 view .LVU2346
 7423 0008 FFF7FEFF 		bl	cur_shift
 7424              	.LVL848:
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7425              		.loc 1 539 18 view .LVU2347
 7426 000c 9C4B     		ldr	r3, .L917+4
 547:src/display.c **** #  endif
 7427              		.loc 1 547 38 view .LVU2348
 7428 000e 2268     		ldr	r2, [r4]
 539:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7429              		.loc 1 539 18 view .LVU2349
 7430 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7431              	.LVL849:
 547:src/display.c **** #  endif
 7432              		.loc 1 547 7 is_stmt 1 view .LVU2350
 547:src/display.c **** #  endif
 7433              		.loc 1 547 38 is_stmt 0 view .LVU2351
 7434 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 578:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7435              		.loc 1 578 7 view .LVU2352
 7436 0018 0CAE     		add	r6, sp, #48
 7437              	.LVL850:
 578:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7438              		.loc 1 578 7 view .LVU2353
 7439 001a 2A22     		movs	r2, #42
 7440 001c 0021     		movs	r1, #0
 7441 001e 3046     		mov	r0, r6
 7442 0020 FFF7FEFF 		bl	xset
 7443              	.LVL851:
 579:src/display.c ****       
 7444              		.loc 1 579 7 view .LVU2354
 7445 0024 2A22     		movs	r2, #42
 7446 0026 17A8     		add	r0, sp, #92
 7447              	.LVL852:
 579:src/display.c ****       
 7448              		.loc 1 579 7 view .LVU2355
 7449 0028 0021     		movs	r1, #0
 7450 002a FFF7FEFF 		bl	xset
 7451              	.LVL853:
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7452              		.loc 1 581 11 view .LVU2356
 7453 002e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccKZqSeG.s 			page 233


 7454 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7455              		.loc 1 581 10 view .LVU2357
 7456 0034 D507     		lsls	r5, r2, #31
 547:src/display.c **** #  endif
 7457              		.loc 1 547 17 view .LVU2358
 7458 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7459              	.LVL854:
 550:src/display.c **** #  else
 7460              		.loc 1 550 7 is_stmt 1 view .LVU2359
 555:src/display.c **** #  else
 7461              		.loc 1 555 7 view .LVU2360
 565:src/display.c **** #else
 7462              		.loc 1 565 7 view .LVU2361
 573:src/display.c **** #else
 7463              		.loc 1 573 7 view .LVU2362
 578:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7464              		.loc 1 578 7 view .LVU2363
 579:src/display.c ****       
 7465              		.loc 1 579 7 view .LVU2364
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7466              		.loc 1 581 7 view .LVU2365
 581:src/display.c **** #ifdef SHOW_STACK_SIZE
 7467              		.loc 1 581 10 is_stmt 0 view .LVU2366
 7468 003a 00F13B81 		bmi	.L898
 621:src/display.c **** #else
 7469              		.loc 1 621 12 is_stmt 1 view .LVU2367
 621:src/display.c **** #else
 7470              		.loc 1 621 15 is_stmt 0 view .LVU2368
 7471 003e 002F     		cmp	r7, #0
 7472 0040 56D0     		beq	.L899
 7473              	.L745:
 707:src/display.c **** 	  *p2++ = '\007';
 7474              		.loc 1 707 2 is_stmt 1 view .LVU2369
 707:src/display.c **** 	  *p2++ = '\007';
 7475              		.loc 1 707 6 is_stmt 0 view .LVU2370
 7476 0042 904D     		ldr	r5, .L917+8
 7477 0044 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 707:src/display.c **** 	  *p2++ = '\007';
 7478              		.loc 1 707 5 view .LVU2371
 7479 0046 9A07     		lsls	r2, r3, #30
 7480 0048 40F19B81 		bpl	.L755
 708:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7481              		.loc 1 708 4 is_stmt 1 view .LVU2372
 7482              	.LVL855:
 709:src/display.c **** 	  *p2++ = shift_char;
 7483              		.loc 1 709 4 view .LVU2373
 708:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7484              		.loc 1 708 10 is_stmt 0 view .LVU2374
 7485 004c 4EF20742 		movw	r2, #58375
 711:src/display.c **** 	}
 7486              		.loc 1 711 10 view .LVU2375
 7487 0050 1423     		movs	r3, #20
 710:src/display.c **** 	  *p2++ = '\024';
 7488              		.loc 1 710 10 view .LVU2376
 7489 0052 8DF85E80 		strb	r8, [sp, #94]
 708:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
ARM GAS  /tmp/ccKZqSeG.s 			page 234


 7490              		.loc 1 708 10 view .LVU2377
 7491 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 710:src/display.c **** 	  *p2++ = '\024';
 7492              		.loc 1 710 4 is_stmt 1 view .LVU2378
 7493              	.LVL856:
 711:src/display.c **** 	}
 7494              		.loc 1 711 4 view .LVU2379
 711:src/display.c **** 	}
 7495              		.loc 1 711 10 is_stmt 0 view .LVU2380
 7496 005a 8DF85F30 		strb	r3, [sp, #95]
 711:src/display.c **** 	}
 7497              		.loc 1 711 7 view .LVU2381
 7498 005e 0DF16008 		add	r8, sp, #96
 7499              	.LVL857:
 7500              	.L756:
 720:src/display.c **** 	  *p2++ = '\007';
 7501              		.loc 1 720 2 is_stmt 1 view .LVU2382
 720:src/display.c **** 	  *p2++ = '\007';
 7502              		.loc 1 720 6 is_stmt 0 view .LVU2383
 7503 0062 FFF7FEFF 		bl	get_trig_mode
 7504              	.LVL858:
 721:src/display.c **** 	  *p2++ = '\207';
 7505              		.loc 1 721 10 view .LVU2384
 7506 0066 0723     		movs	r3, #7
 720:src/display.c **** 	  *p2++ = '\007';
 7507              		.loc 1 720 5 view .LVU2385
 7508 0068 0228     		cmp	r0, #2
 722:src/display.c **** 	  *p2++ = '\007';	    
 7509              		.loc 1 722 10 view .LVU2386
 7510 006a 4FF08702 		mov	r2, #135
 721:src/display.c **** 	  *p2++ = '\207';
 7511              		.loc 1 721 10 view .LVU2387
 7512 006e 88F80030 		strb	r3, [r8]
 720:src/display.c **** 	  *p2++ = '\007';
 7513              		.loc 1 720 5 view .LVU2388
 7514 0072 00F04C82 		beq	.L900
 726:src/display.c **** 	  *p2++ = '\207';
 7515              		.loc 1 726 4 is_stmt 1 view .LVU2389
 7516              	.LVL859:
 727:src/display.c **** 	  *p2++ = ' ';
 7517              		.loc 1 727 4 view .LVU2390
 728:src/display.c **** 	}
 7518              		.loc 1 728 10 is_stmt 0 view .LVU2391
 7519 0076 2023     		movs	r3, #32
 727:src/display.c **** 	  *p2++ = ' ';
 7520              		.loc 1 727 10 view .LVU2392
 7521 0078 88F80120 		strb	r2, [r8, #1]
 728:src/display.c **** 	}
 7522              		.loc 1 728 4 is_stmt 1 view .LVU2393
 728:src/display.c **** 	}
 7523              		.loc 1 728 10 is_stmt 0 view .LVU2394
 7524 007c 88F80230 		strb	r3, [r8, #2]
 728:src/display.c **** 	}
 7525              		.loc 1 728 7 view .LVU2395
 7526 0080 08F10308 		add	r8, r8, #3
 7527              	.LVL860:
 7528              	.L758:
ARM GAS  /tmp/ccKZqSeG.s 			page 235


 732:src/display.c **** 	p2 = scopy(p2, q);
 7529              		.loc 1 732 2 is_stmt 1 view .LVU2396
 732:src/display.c **** 	p2 = scopy(p2, q);
 7530              		.loc 1 732 7 is_stmt 0 view .LVU2397
 7531 0084 FFF7FEFF 		bl	is_dblmode
 7532              	.LVL861:
 732:src/display.c **** 	p2 = scopy(p2, q);
 7533              		.loc 1 732 34 view .LVU2398
 7534 0088 7F4B     		ldr	r3, .L917+12
 7535 008a 804A     		ldr	r2, .L917+16
 732:src/display.c **** 	p2 = scopy(p2, q);
 7536              		.loc 1 732 7 view .LVU2399
 7537 008c 0146     		mov	r1, r0
 7538              	.LVL862:
 733:src/display.c **** #else
 7539              		.loc 1 733 2 is_stmt 1 view .LVU2400
 733:src/display.c **** #else
 7540              		.loc 1 733 7 is_stmt 0 view .LVU2401
 7541 008e 0029     		cmp	r1, #0
 7542 0090 14BF     		ite	ne
 7543 0092 1146     		movne	r1, r2
 7544 0094 1946     		moveq	r1, r3
 7545              	.LVL863:
 733:src/display.c **** #else
 7546              		.loc 1 733 7 view .LVU2402
 7547 0096 4046     		mov	r0, r8
 7548 0098 FFF7FEFF 		bl	scopy
 7549              	.LVL864:
 749:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7550              		.loc 1 749 16 view .LVU2403
 7551 009c 2368     		ldr	r3, [r4]
 7552 009e 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7553 00a2 C1F30111 		ubfx	r1, r1, #4, #2
 7554              	.LVL865:
 749:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7555              		.loc 1 749 2 is_stmt 1 view .LVU2404
 7556 00a6 0129     		cmp	r1, #1
 7557 00a8 00F03882 		beq	.L816
 7558 00ac 784B     		ldr	r3, .L917+20
 7559 00ae 794A     		ldr	r2, .L917+24
 7560 00b0 0229     		cmp	r1, #2
 7561 00b2 14BF     		ite	ne
 7562 00b4 1946     		movne	r1, r3
 7563 00b6 1146     		moveq	r1, r2
 7564              	.L760:
 7565              	.LVL866:
 766:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7566              		.loc 1 766 2 view .LVU2405
 766:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7567              		.loc 1 766 6 is_stmt 0 view .LVU2406
 7568 00b8 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 766:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7569              		.loc 1 766 5 view .LVU2407
 7570 00ba 5B07     		lsls	r3, r3, #29
 767:src/display.c **** 	} // no need to skip y display with arrow here
 7571              		.loc 1 767 4 is_stmt 1 view .LVU2408
 7572 00bc 48BF     		it	mi
ARM GAS  /tmp/ccKZqSeG.s 			page 236


 7573 00be 7649     		ldrmi	r1, .L917+28
 7574              	.LVL867:
 770:src/display.c **** 	}
 7575              		.loc 1 770 4 view .LVU2409
 770:src/display.c **** 	}
 7576              		.loc 1 770 9 is_stmt 0 view .LVU2410
 7577 00c0 FFF7FEFF 		bl	scopy
 7578              	.LVL868:
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7579              		.loc 1 774 2 is_stmt 1 view .LVU2411
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7580              		.loc 1 774 8 is_stmt 0 view .LVU2412
 7581 00c4 2268     		ldr	r2, [r4]
 7582 00c6 92F8E437 		ldrb	r3, [r2, #2020]	@ zero_extendqisi2
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7583              		.loc 1 774 5 view .LVU2413
 7584 00ca 13F00800 		ands	r0, r3, #8
 7585 00ce 46D1     		bne	.L763
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7586              		.loc 1 774 18 discriminator 2 view .LVU2414
 7587 00d0 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
 7588 00d4 0907     		lsls	r1, r1, #28
 7589 00d6 42D4     		bmi	.L763
 784:src/display.c **** 	  q = "\007\307<";
 7590              		.loc 1 784 7 is_stmt 1 view .LVU2415
 784:src/display.c **** 	  q = "\007\307<";
 7591              		.loc 1 784 22 is_stmt 0 view .LVU2416
 7592 00d8 DFF8CC91 		ldr	r9, .L917+44
 784:src/display.c **** 	  q = "\007\307<";
 7593              		.loc 1 784 10 view .LVU2417
 7594 00dc D9F80010 		ldr	r1, [r9]
 7595 00e0 0129     		cmp	r1, #1
 7596 00e2 00F01D82 		beq	.L769
 784:src/display.c **** 	  q = "\007\307<";
 7597              		.loc 1 784 43 discriminator 1 view .LVU2418
 7598 00e6 5907     		lsls	r1, r3, #29
 7599 00e8 43D5     		bpl	.L770
 7600 00ea 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7601 00ee 63E1     		b	.L807
 7602              	.LVL869:
 7603              	.L899:
 621:src/display.c **** #else
 7604              		.loc 1 621 36 discriminator 1 view .LVU2419
 7605 00f0 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 621:src/display.c **** #else
 7606              		.loc 1 621 32 discriminator 1 view .LVU2420
 7607 00f4 5007     		lsls	r0, r2, #29
 7608 00f6 00F14D81 		bmi	.L901
 7609              	.L746:
 642:src/display.c **** 	    *p2++ = shift_char;
 7610              		.loc 1 642 4 is_stmt 1 view .LVU2421
 642:src/display.c **** 	    *p2++ = shift_char;
 7611              		.loc 1 642 7 is_stmt 0 view .LVU2422
 7612 00fa B8F1200F 		cmp	r8, #32
 7613 00fe 00F04382 		beq	.L747
 7614              	.L749:
 643:src/display.c **** 	    *p2++ = '\006';
ARM GAS  /tmp/ccKZqSeG.s 			page 237


 7615              		.loc 1 643 6 is_stmt 1 view .LVU2423
 7616              	.LVL870:
 644:src/display.c **** 	  }
 7617              		.loc 1 644 12 is_stmt 0 view .LVU2424
 7618 0102 0623     		movs	r3, #6
 643:src/display.c **** 	    *p2++ = '\006';
 7619              		.loc 1 643 12 view .LVU2425
 7620 0104 8DF85C80 		strb	r8, [sp, #92]
 644:src/display.c **** 	  }
 7621              		.loc 1 644 6 is_stmt 1 view .LVU2426
 7622              	.LVL871:
 644:src/display.c **** 	  }
 7623              		.loc 1 644 12 is_stmt 0 view .LVU2427
 7624 0108 8DF85D30 		strb	r3, [sp, #93]
 644:src/display.c **** 	  }
 7625              		.loc 1 644 9 view .LVU2428
 7626 010c 0DF15E00 		add	r0, sp, #94
 7627              	.LVL872:
 7628              	.L748:
 650:src/display.c **** 	  *p2++ = ' ';
 7629              		.loc 1 650 2 is_stmt 1 view .LVU2429
 650:src/display.c **** 	  *p2++ = ' ';
 7630              		.loc 1 650 6 is_stmt 0 view .LVU2430
 7631 0110 5C4D     		ldr	r5, .L917+8
 7632 0112 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 650:src/display.c **** 	  *p2++ = ' ';
 7633              		.loc 1 650 5 view .LVU2431
 7634 0114 9A07     		lsls	r2, r3, #30
 7635 0116 00F18B81 		bmi	.L902
 655:src/display.c **** 	  *p2++ = ' ';
 7636              		.loc 1 655 2 is_stmt 1 view .LVU2432
 655:src/display.c **** 	  *p2++ = ' ';
 7637              		.loc 1 655 5 is_stmt 0 view .LVU2433
 7638 011a 5907     		lsls	r1, r3, #29
 7639 011c 00F12282 		bmi	.L903
 661:src/display.c **** 	  if (State2.wascomplex) {
 7640              		.loc 1 661 2 is_stmt 1 view .LVU2434
 661:src/display.c **** 	  if (State2.wascomplex) {
 7641              		.loc 1 661 5 is_stmt 0 view .LVU2435
 7642 0120 B8F1200F 		cmp	r8, #32
 7643 0124 00F05A82 		beq	.L904
 7644              	.L752:
 678:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7645              		.loc 1 678 2 is_stmt 1 view .LVU2436
 678:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7646              		.loc 1 678 16 is_stmt 0 view .LVU2437
 7647 0128 2368     		ldr	r3, [r4]
 7648 012a 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7649 012e C1F30111 		ubfx	r1, r1, #4, #2
 678:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7650              		.loc 1 678 2 view .LVU2438
 7651 0132 0129     		cmp	r1, #1
 7652 0134 00F07782 		beq	.L813
 7653 0138 554B     		ldr	r3, .L917+20
 7654 013a 564A     		ldr	r2, .L917+24
 7655 013c 0229     		cmp	r1, #2
 7656 013e 14BF     		ite	ne
ARM GAS  /tmp/ccKZqSeG.s 			page 238


 7657 0140 1946     		movne	r1, r3
 7658 0142 1146     		moveq	r1, r2
 7659              	.L754:
 7660              	.LVL873:
 692:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7661              		.loc 1 692 2 is_stmt 1 view .LVU2439
 692:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7662              		.loc 1 692 7 is_stmt 0 view .LVU2440
 7663 0144 FFF7FEFF 		bl	scopy
 7664              	.LVL874:
 692:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7665              		.loc 1 692 7 view .LVU2441
 7666 0148 0446     		mov	r4, r0
 7667              	.LVL875:
 694:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7668              		.loc 1 694 2 is_stmt 1 view .LVU2442
 694:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7669              		.loc 1 694 6 is_stmt 0 view .LVU2443
 7670 014a FFF7FEFF 		bl	get_trig_mode
 7671              	.LVL876:
 694:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7672              		.loc 1 694 5 view .LVU2444
 7673 014e 0228     		cmp	r0, #2
 7674 0150 40F00581 		bne	.L744
 695:src/display.c **** 	}
 7675              		.loc 1 695 4 is_stmt 1 view .LVU2445
 7676 0154 5149     		ldr	r1, .L917+32
 7677 0156 2046     		mov	r0, r4
 7678 0158 FFF7FEFF 		bl	scopy
 7679              	.LVL877:
 7680 015c FFE0     		b	.L744
 7681              	.LVL878:
 7682              	.L763:
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7683              		.loc 1 774 32 is_stmt 0 discriminator 3 view .LVU2446
 7684 015e 5907     		lsls	r1, r3, #29
 7685 0160 00F11E81 		bmi	.L905
 784:src/display.c **** 	  q = "\007\307<";
 7686              		.loc 1 784 7 is_stmt 1 view .LVU2447
 784:src/display.c **** 	  q = "\007\307<";
 7687              		.loc 1 784 22 is_stmt 0 view .LVU2448
 7688 0164 DFF84091 		ldr	r9, .L917+44
 784:src/display.c **** 	  q = "\007\307<";
 7689              		.loc 1 784 10 view .LVU2449
 7690 0168 D9F80030 		ldr	r3, [r9]
 7691 016c 012B     		cmp	r3, #1
 7692 016e 00F0D781 		beq	.L769
 7693              	.L770:
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7694              		.loc 1 788 7 is_stmt 1 view .LVU2450
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7695              		.loc 1 788 11 is_stmt 0 view .LVU2451
 7696 0172 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7697              		.loc 1 788 10 view .LVU2452
 7698 0174 13F0C00F 		tst	r3, #192
 7699 0178 00F02B81 		beq	.L824
ARM GAS  /tmp/ccKZqSeG.s 			page 239


 7700 017c 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7701              	.L805:
 789:src/display.c **** 	  p = scopy(p, q);
 7702              		.loc 1 789 4 is_stmt 1 view .LVU2453
 789:src/display.c **** 	  p = scopy(p, q);
 7703              		.loc 1 789 28 is_stmt 0 view .LVU2454
 7704 0180 474A     		ldr	r2, .L917+36
 7705 0182 4849     		ldr	r1, .L917+40
 7706 0184 13F0020F 		tst	r3, #2
 7707              	.LVL879:
 790:src/display.c **** 	}
 7708              		.loc 1 790 4 is_stmt 1 view .LVU2455
 790:src/display.c **** 	}
 7709              		.loc 1 790 8 is_stmt 0 view .LVU2456
 7710 0188 08BF     		it	eq
 7711 018a 1146     		moveq	r1, r2
 7712              	.LVL880:
 790:src/display.c **** 	}
 7713              		.loc 1 790 8 view .LVU2457
 7714 018c 3046     		mov	r0, r6
 7715 018e FFF7FEFF 		bl	scopy
 7716              	.LVL881:
 790:src/display.c **** 	}
 7717              		.loc 1 790 8 view .LVU2458
 7718 0192 8046     		mov	r8, r0
 7719              	.LVL882:
 7720              	.L772:
 806:src/display.c **** 	    q = "\007\307y";
 7721              		.loc 1 806 4 is_stmt 1 view .LVU2459
 806:src/display.c **** 	    q = "\007\307y";
 7722              		.loc 1 806 7 is_stmt 0 view .LVU2460
 7723 0194 D9F80030 		ldr	r3, [r9]
 7724 0198 022B     		cmp	r3, #2
 7725 019a 00F0C781 		beq	.L906
 7726              	.L774:
 812:src/display.c **** 	  decNumber y;
 7727              		.loc 1 812 2 is_stmt 1 view .LVU2461
 812:src/display.c **** 	  decNumber y;
 7728              		.loc 1 812 6 is_stmt 0 view .LVU2462
 7729 019e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 812:src/display.c **** 	  decNumber y;
 7730              		.loc 1 812 5 view .LVU2463
 7731 01a0 5A06     		lsls	r2, r3, #25
 7732 01a2 40F1DF80 		bpl	.L802
 7733              	.L734:
 7734              	.LBB472:
 813:src/display.c **** 	display_yreg:
 7735              		.loc 1 813 4 is_stmt 1 view .LVU2464
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7736              		.loc 1 820 4 view .LVU2465
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7737              		.loc 1 820 8 is_stmt 0 view .LVU2466
 7738 01a6 2368     		ldr	r3, [r4]
 7739 01a8 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 7740              		.loc 1 820 7 view .LVU2467
 7741 01ac D007     		lsls	r0, r2, #31
ARM GAS  /tmp/ccKZqSeG.s 			page 240


 7742 01ae 00F11C81 		bmi	.L907
 7743              	.L776:
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 7744              		.loc 1 827 4 is_stmt 1 view .LVU2468
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 7745              		.loc 1 827 9 is_stmt 0 view .LVU2469
 7746 01b2 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 7747              		.loc 1 827 7 view .LVU2470
 7748 01b6 5207     		lsls	r2, r2, #29
 7749 01b8 06D5     		bpl	.L783
 827:src/display.c **** 	    getRegister(&y, regK_idx);
 7750              		.loc 1 827 35 discriminator 1 view .LVU2471
 7751 01ba 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 7752 01be 03F01C03 		and	r3, r3, #28
 7753 01c2 0C2B     		cmp	r3, #12
 7754 01c4 00F03382 		beq	.L908
 7755              	.L783:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7756              		.loc 1 831 6 is_stmt 1 view .LVU2472
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7757              		.loc 1 831 36 is_stmt 0 view .LVU2473
 7758 01c8 DFF8E090 		ldr	r9, .L917+48
 7759 01cc D9F80010 		ldr	r1, [r9]
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7760              		.loc 1 831 6 view .LVU2474
 7761 01d0 6329     		cmp	r1, #99
 7762 01d2 00F3B181 		bgt	.L909
 7763              	.LVL883:
 7764              	.L785:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7765              		.loc 1 831 6 discriminator 3 view .LVU2475
 7766 01d6 0131     		adds	r1, r1, #1
 7767              	.L789:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 7768              		.loc 1 831 6 discriminator 4 view .LVU2476
 7769 01d8 03AF     		add	r7, sp, #12
 7770 01da 3846     		mov	r0, r7
 7771 01dc FFF7FEFF 		bl	getRegister
 7772              	.LVL884:
 7773              	.L784:
 841:src/display.c **** #ifdef INCLUDE_C_LOCK
 7774              		.loc 1 841 4 is_stmt 1 view .LVU2477
 841:src/display.c **** #ifdef INCLUDE_C_LOCK
 7775              		.loc 1 841 7 is_stmt 0 view .LVU2478
 7776 01e0 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 7777 01e4 13F0700F 		tst	r3, #112
 7778 01e8 40F06E81 		bne	.L791
 843:src/display.c **** #else
 7779              		.loc 1 843 6 is_stmt 1 view .LVU2479
 843:src/display.c **** #else
 7780              		.loc 1 843 19 is_stmt 0 view .LVU2480
 7781 01ec EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 843:src/display.c **** #else
 7782              		.loc 1 843 9 view .LVU2481
 7783 01ee 13F0010F 		tst	r3, #1
 843:src/display.c **** #else
ARM GAS  /tmp/ccKZqSeG.s 			page 241


 7784              		.loc 1 843 39 view .LVU2482
 7785 01f2 2368     		ldr	r3, [r4]
 843:src/display.c **** #else
 7786              		.loc 1 843 9 view .LVU2483
 7787 01f4 00F02781 		beq	.L794
 843:src/display.c **** #else
 7788              		.loc 1 843 39 discriminator 1 view .LVU2484
 7789 01f8 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 843:src/display.c **** #else
 7790              		.loc 1 843 33 discriminator 1 view .LVU2485
 7791 01fc 5007     		lsls	r0, r2, #29
 7792 01fe 0CD5     		bpl	.L793
 843:src/display.c **** #else
 7793              		.loc 1 843 39 discriminator 2 view .LVU2486
 7794 0200 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 843:src/display.c **** #else
 7795              		.loc 1 843 38 discriminator 2 view .LVU2487
 7796 0204 5107     		lsls	r1, r2, #29
 7797 0206 08D5     		bpl	.L793
 843:src/display.c **** #else
 7798              		.loc 1 843 62 discriminator 5 view .LVU2488
 7799 0208 1207     		lsls	r2, r2, #28
 7800 020a 40F11C81 		bpl	.L794
 843:src/display.c **** #else
 7801              		.loc 1 843 119 discriminator 6 view .LVU2489
 7802 020e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 843:src/display.c **** #else
 7803              		.loc 1 843 80 discriminator 6 view .LVU2490
 7804 0212 12F0C00F 		tst	r2, #192
 7805 0216 40F01681 		bne	.L794
 7806              	.L793:
 7807              	.LBB473:
 847:src/display.c **** 
 7808              		.loc 1 847 8 is_stmt 1 view .LVU2491
 849:src/display.c **** 	      UState.nothousands = 1;
 7809              		.loc 1 849 8 is_stmt 0 view .LVU2492
 7810 021a 2A22     		movs	r2, #42
 7811 021c 0021     		movs	r1, #0
 7812 021e 3046     		mov	r0, r6
 847:src/display.c **** 
 7813              		.loc 1 847 44 view .LVU2493
 7814 0220 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 7815 0224 DFF88880 		ldr	r8, .L917+52
 7816              	.LVL885:
 849:src/display.c **** 	      UState.nothousands = 1;
 7817              		.loc 1 849 8 view .LVU2494
 7818 0228 FFF7FEFF 		bl	xset
 7819              	.LVL886:
 850:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7820              		.loc 1 850 27 view .LVU2495
 7821 022c 2268     		ldr	r2, [r4]
 7822 022e 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 7823 0232 43F04003 		orr	r3, r3, #64
 7824 0236 82F8E737 		strb	r3, [r2, #2023]
 851:src/display.c **** 	      UState.nothousands = saved_nothousands;
 7825              		.loc 1 851 8 view .LVU2496
 7826 023a 3146     		mov	r1, r6
ARM GAS  /tmp/ccKZqSeG.s 			page 242


 7827 023c 3846     		mov	r0, r7
 7828 023e FFF7FEFF 		bl	set_x_hms
 7829              	.LVL887:
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7830              		.loc 1 852 27 view .LVU2497
 7831 0242 2368     		ldr	r3, [r4]
 7832 0244 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 847:src/display.c **** 
 7833              		.loc 1 847 44 view .LVU2498
 7834 0248 C9F38019 		ubfx	r9, r9, #6, #1
 7835              	.LVL888:
 849:src/display.c **** 	      UState.nothousands = 1;
 7836              		.loc 1 849 8 is_stmt 1 view .LVU2499
 850:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7837              		.loc 1 850 8 view .LVU2500
 851:src/display.c **** 	      UState.nothousands = saved_nothousands;
 7838              		.loc 1 851 8 view .LVU2501
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7839              		.loc 1 852 8 view .LVU2502
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7840              		.loc 1 852 27 is_stmt 0 view .LVU2503
 7841 024c 69F38612 		bfi	r2, r9, #6, #1
 7842 0250 83F8E727 		strb	r2, [r3, #2023]
 857:src/display.c **** 	      while (*p) {
 7843              		.loc 1 857 8 is_stmt 1 view .LVU2504
 7844              	.LVL889:
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7845              		.loc 1 858 8 view .LVU2505
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7846              		.loc 1 858 14 view .LVU2506
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7847              		.loc 1 858 15 is_stmt 0 view .LVU2507
 7848 0254 4021     		movs	r1, #64
 852:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7849              		.loc 1 852 27 view .LVU2508
 7850 0256 0522     		movs	r2, #5
 7851 0258 05E0     		b	.L796
 7852              	.LVL890:
 7853              	.L910:
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7854              		.loc 1 858 15 view .LVU2509
 7855 025a 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 7856              	.LVL891:
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7857              		.loc 1 858 14 view .LVU2510
 7858 025e 0029     		cmp	r1, #0
 7859 0260 7DD0     		beq	.L744
 7860 0262 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 7861              	.LVL892:
 7862              	.L796:
 859:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7863              		.loc 1 859 3 is_stmt 1 view .LVU2511
 7864 0266 3046     		mov	r0, r6
 7865 0268 FFF7FEFF 		bl	replace_char
 7866              	.LVL893:
 860:src/display.c **** 		  goto skip;
 7867              		.loc 1 860 3 view .LVU2512
ARM GAS  /tmp/ccKZqSeG.s 			page 243


 860:src/display.c **** 		  goto skip;
 7868              		.loc 1 860 7 is_stmt 0 view .LVU2513
 7869 026c 0121     		movs	r1, #1
 7870 026e 3046     		mov	r0, r6
 7871 0270 FFF7FEFF 		bl	pixel_length
 7872              	.LVL894:
 863:src/display.c **** 	      }
 7873              		.loc 1 863 3 is_stmt 1 view .LVU2514
 858:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7874              		.loc 1 858 14 view .LVU2515
 860:src/display.c **** 		  goto skip;
 7875              		.loc 1 860 6 is_stmt 0 view .LVU2516
 7876 0274 2C28     		cmp	r0, #44
 7877 0276 F0DC     		bgt	.L910
 7878 0278 71E0     		b	.L744
 7879              	.L918:
 7880 027a 00BF     		.align	2
 7881              	.L917:
 7882 027c 00000000 		.word	main_ram
 7883 0280 00000000 		.word	.LANCHOR12
 7884 0284 00000000 		.word	StateWhileOn
 7885 0288 28000000 		.word	.LC10
 7886 028c 24000000 		.word	.LC9
 7887 0290 10000000 		.word	.LC6
 7888 0294 1C000000 		.word	.LC8
 7889 0298 58000000 		.word	.LC17
 7890 029c 50000000 		.word	.LC16
 7891 02a0 08000000 		.word	.LC4
 7892 02a4 4C000000 		.word	.LC15
 7893 02a8 00000000 		.word	RectPolConv
 7894 02ac 00000000 		.word	ShowRegister
 7895 02b0 00000000 		.word	.LANCHOR14
 7896              	.LVL895:
 7897              	.L898:
 860:src/display.c **** 		  goto skip;
 7898              		.loc 1 860 6 view .LVU2517
 7899              	.LBE473:
 7900              	.LBE472:
 591:src/display.c **** 	    *p2++ = '\006';
 7901              		.loc 1 591 6 is_stmt 1 view .LVU2518
 592:src/display.c **** 	  }
 7902              		.loc 1 592 12 is_stmt 0 view .LVU2519
 7903 02b4 0623     		movs	r3, #6
 7904 02b6 8DF85D30 		strb	r3, [sp, #93]
 591:src/display.c **** 	    *p2++ = '\006';
 7905              		.loc 1 591 12 view .LVU2520
 7906 02ba 8DF85C80 		strb	r8, [sp, #92]
 592:src/display.c **** 	  }
 7907              		.loc 1 592 6 is_stmt 1 view .LVU2521
 7908              	.LVL896:
 595:src/display.c **** 	default:
 7909              		.loc 1 595 2 view .LVU2522
 595:src/display.c **** 	default:
 7910              		.loc 1 595 9 is_stmt 0 view .LVU2523
 7911 02be FFF7FEFF 		bl	int_mode
 7912              	.LVL897:
 7913 02c2 0138     		subs	r0, r0, #1
ARM GAS  /tmp/ccKZqSeG.s 			page 244


 7914 02c4 C0B2     		uxtb	r0, r0
 7915 02c6 0228     		cmp	r0, #2
 7916 02c8 96BF     		itet	ls
 7917 02ca B54B     		ldrls	r3, .L919
 7918 02cc B549     		ldrhi	r1, .L919+4
 7919 02ce 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7920              	.LVL898:
 602:src/display.c **** 	*q++ = '\006';
 7921              		.loc 1 602 2 is_stmt 1 view .LVU2524
 602:src/display.c **** 	*q++ = '\006';
 7922              		.loc 1 602 6 is_stmt 0 view .LVU2525
 7923 02d2 0DF15E00 		add	r0, sp, #94
 7924              	.LVL899:
 602:src/display.c **** 	*q++ = '\006';
 7925              		.loc 1 602 6 view .LVU2526
 7926 02d6 FFF7FEFF 		bl	scopy
 7927              	.LVL900:
 603:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7928              		.loc 1 603 7 view .LVU2527
 7929 02da 8046     		mov	r8, r0
 7930              	.LVL901:
 603:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7931              		.loc 1 603 7 view .LVU2528
 7932 02dc 0623     		movs	r3, #6
 7933 02de 08F8013B 		strb	r3, [r8], #1
 602:src/display.c **** 	*q++ = '\006';
 7934              		.loc 1 602 6 view .LVU2529
 7935 02e2 0546     		mov	r5, r0
 7936              	.LVL902:
 603:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7937              		.loc 1 603 2 is_stmt 1 view .LVU2530
 604:src/display.c **** 
 7938              		.loc 1 604 2 view .LVU2531
 604:src/display.c **** 
 7939              		.loc 1 604 7 is_stmt 0 view .LVU2532
 7940 02e4 FFF7FEFF 		bl	word_size
 7941              	.LVL903:
 7942 02e8 0222     		movs	r2, #2
 7943 02ea 0146     		mov	r1, r0
 7944 02ec 4046     		mov	r0, r8
 7945 02ee FFF7FEFF 		bl	num_arg_0
 7946              	.LVL904:
 606:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7947              		.loc 1 606 19 view .LVU2533
 7948 02f2 DFF8E0C2 		ldr	ip, .L919+52
 7949 02f6 DCF80030 		ldr	r3, [ip]
 7950              	.LVL905:
 606:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7951              		.loc 1 606 2 is_stmt 1 view .LVU2534
 606:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7952              		.loc 1 606 5 is_stmt 0 view .LVU2535
 7953 02fa 002B     		cmp	r3, #0
 7954 02fc 6BDD     		ble	.L896
 607:src/display.c **** 	  if (*q == '1')
 7955              		.loc 1 607 4 is_stmt 1 view .LVU2536
 607:src/display.c **** 	  if (*q == '1')
 7956              		.loc 1 607 10 is_stmt 0 view .LVU2537
ARM GAS  /tmp/ccKZqSeG.s 			page 245


 7957 02fe C3F10702 		rsb	r2, r3, #7
 7958 0302 5200     		lsls	r2, r2, #1
 607:src/display.c **** 	  if (*q == '1')
 7959              		.loc 1 607 6 view .LVU2538
 7960 0304 0292     		str	r2, [sp, #8]
 608:src/display.c **** 	    n += 2;
 7961              		.loc 1 608 4 is_stmt 1 view .LVU2539
 608:src/display.c **** 	    n += 2;
 7962              		.loc 1 608 7 is_stmt 0 view .LVU2540
 7963 0306 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 7964 0308 3129     		cmp	r1, #49
 609:src/display.c **** 	  if (q[1] == '1')
 7965              		.loc 1 609 6 is_stmt 1 view .LVU2541
 609:src/display.c **** 	  if (q[1] == '1')
 7966              		.loc 1 609 8 is_stmt 0 view .LVU2542
 7967 030a 04BF     		itt	eq
 7968 030c 0232     		addeq	r2, r2, #2
 7969 030e 0292     		streq	r2, [sp, #8]
 610:src/display.c **** 	    n += 2;
 7970              		.loc 1 610 4 is_stmt 1 view .LVU2543
 610:src/display.c **** 	    n += 2;
 7971              		.loc 1 610 7 is_stmt 0 view .LVU2544
 7972 0310 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 7973 0312 3129     		cmp	r1, #49
 7974 0314 00D1     		bne	.L737
 611:src/display.c **** 	  while (n-- > 0)
 7975              		.loc 1 611 6 is_stmt 1 view .LVU2545
 611:src/display.c **** 	  while (n-- > 0)
 7976              		.loc 1 611 8 is_stmt 0 view .LVU2546
 7977 0316 0232     		adds	r2, r2, #2
 7978              	.L737:
 612:src/display.c **** 	    *p2++ = '\006';
 7979              		.loc 1 612 10 is_stmt 1 view .LVU2547
 612:src/display.c **** 	    *p2++ = '\006';
 7980              		.loc 1 612 12 is_stmt 0 view .LVU2548
 7981 0318 511E     		subs	r1, r2, #1
 612:src/display.c **** 	    *p2++ = '\006';
 7982              		.loc 1 612 10 view .LVU2549
 7983 031a 002A     		cmp	r2, #0
 612:src/display.c **** 	    *p2++ = '\006';
 7984              		.loc 1 612 12 view .LVU2550
 7985 031c 0291     		str	r1, [sp, #8]
 612:src/display.c **** 	    *p2++ = '\006';
 7986              		.loc 1 612 10 view .LVU2551
 7987 031e 40F38481 		ble	.L894
 613:src/display.c **** 
 7988              		.loc 1 613 12 view .LVU2552
 7989 0322 0621     		movs	r1, #6
 7990              	.L738:
 613:src/display.c **** 
 7991              		.loc 1 613 6 is_stmt 1 view .LVU2553
 7992              	.LVL906:
 613:src/display.c **** 
 7993              		.loc 1 613 12 is_stmt 0 view .LVU2554
 7994 0324 00F8011B 		strb	r1, [r0], #1
 7995              	.LVL907:
 612:src/display.c **** 	    *p2++ = '\006';
ARM GAS  /tmp/ccKZqSeG.s 			page 246


 7996              		.loc 1 612 10 is_stmt 1 view .LVU2555
 612:src/display.c **** 	    *p2++ = '\006';
 7997              		.loc 1 612 12 is_stmt 0 view .LVU2556
 7998 0328 029B     		ldr	r3, [sp, #8]
 7999 032a 5A1E     		subs	r2, r3, #1
 612:src/display.c **** 	    *p2++ = '\006';
 8000              		.loc 1 612 10 view .LVU2557
 8001 032c 002B     		cmp	r3, #0
 612:src/display.c **** 	    *p2++ = '\006';
 8002              		.loc 1 612 12 view .LVU2558
 8003 032e 0292     		str	r2, [sp, #8]
 612:src/display.c **** 	    *p2++ = '\006';
 8004              		.loc 1 612 10 view .LVU2559
 8005 0330 F8DC     		bgt	.L738
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8006              		.loc 1 615 4 is_stmt 1 view .LVU2560
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8007              		.loc 1 615 11 is_stmt 0 view .LVU2561
 8008 0332 DCF80030 		ldr	r3, [ip]
 8009 0336 0293     		str	r3, [sp, #8]
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8010              		.loc 1 615 27 is_stmt 1 view .LVU2562
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8011              		.loc 1 615 4 is_stmt 0 view .LVU2563
 8012 0338 002B     		cmp	r3, #0
 8013 033a 4CDB     		blt	.L896
 8014              	.L806:
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8015              		.loc 1 615 4 view .LVU2564
 8016 033c 9A4D     		ldr	r5, .L919+8
 8017              	.L743:
 616:src/display.c **** 	}
 8018              		.loc 1 616 6 is_stmt 1 view .LVU2565
 616:src/display.c **** 	}
 8019              		.loc 1 616 20 is_stmt 0 view .LVU2566
 8020 033e 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8021 0340 C2F3C202 		ubfx	r2, r2, #3, #3
 616:src/display.c **** 	}
 8022              		.loc 1 616 12 view .LVU2567
 8023 0344 9A42     		cmp	r2, r3
 8024 0346 0CBF     		ite	eq
 8025 0348 7C23     		moveq	r3, #124
 8026 034a 2723     		movne	r3, #39
 8027              	.LVL908:
 616:src/display.c **** 	}
 8028              		.loc 1 616 12 view .LVU2568
 8029 034c 00F8013B 		strb	r3, [r0], #1
 8030              	.LVL909:
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8031              		.loc 1 615 35 is_stmt 1 view .LVU2569
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8032              		.loc 1 615 36 is_stmt 0 view .LVU2570
 8033 0350 029B     		ldr	r3, [sp, #8]
 8034 0352 013B     		subs	r3, r3, #1
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8035              		.loc 1 615 4 view .LVU2571
 8036 0354 002B     		cmp	r3, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 247


 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8037              		.loc 1 615 36 view .LVU2572
 8038 0356 0293     		str	r3, [sp, #8]
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8039              		.loc 1 615 27 is_stmt 1 view .LVU2573
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8040              		.loc 1 615 4 is_stmt 0 view .LVU2574
 8041 0358 F1DA     		bge	.L743
 618:src/display.c ****       }
 8042              		.loc 1 618 2 is_stmt 1 view .LVU2575
 618:src/display.c ****       }
 8043              		.loc 1 618 5 is_stmt 0 view .LVU2576
 8044 035a 002F     		cmp	r7, #0
 8045 035c 3ED1     		bne	.L911
 8046              	.LVL910:
 8047              	.L744:
 913:src/display.c ****       set_status_top_always(buf2);
 8048              		.loc 1 913 7 is_stmt 1 view .LVU2577
 913:src/display.c ****       set_status_top_always(buf2);
 8049              		.loc 1 913 11 is_stmt 0 view .LVU2578
 8050 035e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 913:src/display.c ****       set_status_top_always(buf2);
 8051              		.loc 1 913 10 view .LVU2579
 8052 0360 5906     		lsls	r1, r3, #25
 8053 0362 52D4     		bmi	.L912
 8054              	.L802:
 8055              	.LBB479:
 8056              	.LBB480:
3536:src/display.c ****       }
 8057              		.loc 1 3536 2 is_stmt 1 view .LVU2580
 8058 0364 1B06     		lsls	r3, r3, #24
 8059 0366 5AD5     		bpl	.L913
 8060              	.L823:
 8061 0368 0121     		movs	r1, #1
 8062              	.L804:
 8063              	.LVL911:
 8064              	.LBB481:
 8065              	.LBI481:
3382:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8066              		.loc 1 3382 19 view .LVU2581
 8067              	.LBB482:
3383:src/display.c ****       }
 8068              		.loc 1 3383 2 view .LVU2582
 8069 036a 4FF45373 		mov	r3, #844
 8070 036e 0093     		str	r3, [sp]
 8071 0370 17A8     		add	r0, sp, #92
 8072              	.LVL912:
3383:src/display.c ****       }
 8073              		.loc 1 3383 2 is_stmt 0 view .LVU2583
 8074 0372 40F24A23 		movw	r3, #586
 8075 0376 2B22     		movs	r2, #43
 8076 0378 FFF7FEFF 		bl	s_s_sized
 8077              	.LVL913:
3383:src/display.c ****       }
 8078              		.loc 1 3383 2 view .LVU2584
 8079              	.LBE482:
 8080              	.LBE481:
ARM GAS  /tmp/ccKZqSeG.s 			page 248


 8081              	.LBE480:
 8082              	.LBE479:
 916:src/display.c **** #else
 8083              		.loc 1 916 5 view .LVU2585
 8084 037c 23B0     		add	sp, sp, #140
 8085              		.cfi_remember_state
 8086              		.cfi_def_cfa_offset 28
 8087              		@ sp needed
 8088 037e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8089              	.LVL914:
 8090              	.L755:
 8091              		.cfi_restore_state
 714:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8092              		.loc 1 714 4 is_stmt 1 view .LVU2586
 715:src/display.c **** 	  *p2++ = shift_char;
 8093              		.loc 1 715 4 view .LVU2587
 714:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8094              		.loc 1 714 10 is_stmt 0 view .LVU2588
 8095 0382 4CF20773 		movw	r3, #50951
 716:src/display.c **** 	}
 8096              		.loc 1 716 10 view .LVU2589
 8097 0386 8DF85E80 		strb	r8, [sp, #94]
 714:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8098              		.loc 1 714 10 view .LVU2590
 8099 038a ADF85C30 		strh	r3, [sp, #92]	@ movhi
 716:src/display.c **** 	}
 8100              		.loc 1 716 4 is_stmt 1 view .LVU2591
 8101              	.LVL915:
 716:src/display.c **** 	}
 8102              		.loc 1 716 7 is_stmt 0 view .LVU2592
 8103 038e 0DF15F08 		add	r8, sp, #95
 8104              	.LVL916:
 716:src/display.c **** 	}
 8105              		.loc 1 716 7 view .LVU2593
 8106 0392 66E6     		b	.L756
 8107              	.LVL917:
 8108              	.L901:
 621:src/display.c **** #else
 8109              		.loc 1 621 36 discriminator 2 view .LVU2594
 8110 0394 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 621:src/display.c **** #else
 8111              		.loc 1 621 35 discriminator 2 view .LVU2595
 8112 0398 5907     		lsls	r1, r3, #29
 8113 039a 3FF552AE 		bmi	.L745
 8114 039e ACE6     		b	.L746
 8115              	.LVL918:
 8116              	.L905:
 774:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 8117              		.loc 1 774 35 discriminator 4 view .LVU2596
 8118 03a0 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 8119 03a4 5A07     		lsls	r2, r3, #29
 8120 03a6 00F1E280 		bmi	.L914
 784:src/display.c **** 	  q = "\007\307<";
 8121              		.loc 1 784 7 is_stmt 1 view .LVU2597
 784:src/display.c **** 	  q = "\007\307<";
 8122              		.loc 1 784 22 is_stmt 0 view .LVU2598
 8123 03aa DFF80492 		ldr	r9, .L919+16
ARM GAS  /tmp/ccKZqSeG.s 			page 249


 784:src/display.c **** 	  q = "\007\307<";
 8124              		.loc 1 784 10 view .LVU2599
 8125 03ae D9F80020 		ldr	r2, [r9]
 8126 03b2 012A     		cmp	r2, #1
 8127 03b4 00F0B480 		beq	.L769
 8128              	.L807:
 784:src/display.c **** 	  q = "\007\307<";
 8129              		.loc 1 784 56 discriminator 2 view .LVU2600
 8130 03b8 03F00C02 		and	r2, r3, #12
 8131 03bc 0C2A     		cmp	r2, #12
 8132 03be 00F0AF80 		beq	.L769
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8133              		.loc 1 788 7 is_stmt 1 view .LVU2601
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8134              		.loc 1 788 11 is_stmt 0 view .LVU2602
 8135 03c2 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8136              		.loc 1 788 32 view .LVU2603
 8137 03c4 03F00402 		and	r2, r3, #4
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8138              		.loc 1 788 11 view .LVU2604
 8139 03c8 21F03F01 		bic	r1, r1, #63
 788:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8140              		.loc 1 788 32 view .LVU2605
 8141 03cc 0A43     		orrs	r2, r1, r2
 8142 03ce 7FF4D7AE 		bne	.L805
 8143              	.L824:
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 8144              		.loc 1 535 22 view .LVU2606
 8145 03d2 B046     		mov	r8, r6
 8146 03d4 DEE6     		b	.L772
 8147              	.LVL919:
 8148              	.L896:
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 8149              		.loc 1 535 22 view .LVU2607
 8150 03d6 744D     		ldr	r5, .L919+8
 618:src/display.c ****       }
 8151              		.loc 1 618 2 is_stmt 1 view .LVU2608
 618:src/display.c ****       }
 8152              		.loc 1 618 5 is_stmt 0 view .LVU2609
 8153 03d8 002F     		cmp	r7, #0
 8154 03da C0D0     		beq	.L744
 8155              	.L911:
 8156              	.LBB487:
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8157              		.loc 1 820 8 view .LVU2610
 8158 03dc 2368     		ldr	r3, [r4]
 8159 03de 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8160              		.loc 1 820 7 view .LVU2611
 8161 03e2 D007     		lsls	r0, r2, #31
 8162              	.LVL920:
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8163              		.loc 1 820 7 view .LVU2612
 8164              	.LBE487:
 535:src/display.c ****       char buf2[42], *p2 = buf2;
 8165              		.loc 1 535 22 view .LVU2613
ARM GAS  /tmp/ccKZqSeG.s 			page 250


 8166 03e4 B046     		mov	r8, r6
 8167              	.LVL921:
 8168              	.LBB488:
 813:src/display.c **** 	display_yreg:
 8169              		.loc 1 813 4 is_stmt 1 view .LVU2614
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8170              		.loc 1 820 4 view .LVU2615
 820:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8171              		.loc 1 820 7 is_stmt 0 view .LVU2616
 8172 03e6 7FF5E4AE 		bpl	.L776
 8173              	.L907:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8174              		.loc 1 821 6 is_stmt 1 view .LVU2617
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8175              		.loc 1 821 44 is_stmt 0 view .LVU2618
 8176 03ea DFF8EC91 		ldr	r9, .L919+56
 8177 03ee D9F80030 		ldr	r3, [r9]
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8178              		.loc 1 821 6 view .LVU2619
 8179 03f2 632B     		cmp	r3, #99
 8180 03f4 00F30581 		bgt	.L915
 8181              	.L777:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8182              		.loc 1 821 6 discriminator 5 view .LVU2620
 8183 03f8 581C     		adds	r0, r3, #1
 8184              	.L781:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8185              		.loc 1 821 6 discriminator 6 view .LVU2621
 8186 03fa FFF7FEFF 		bl	get_reg_n_int
 8187              	.LVL922:
 8188 03fe 4246     		mov	r2, r8
 8189 0400 FFF7FEFF 		bl	set_int_x
 8190              	.LVL923:
 824:src/display.c **** 	  }
 8191              		.loc 1 824 6 is_stmt 1 discriminator 6 view .LVU2622
 8192              	.LBE488:
 913:src/display.c ****       set_status_top_always(buf2);
 8193              		.loc 1 913 7 discriminator 6 view .LVU2623
 913:src/display.c ****       set_status_top_always(buf2);
 8194              		.loc 1 913 11 is_stmt 0 discriminator 6 view .LVU2624
 8195 0404 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 913:src/display.c ****       set_status_top_always(buf2);
 8196              		.loc 1 913 10 discriminator 6 view .LVU2625
 8197 0406 5906     		lsls	r1, r3, #25
 8198 0408 ACD5     		bpl	.L802
 8199              	.LVL924:
 8200              	.L912:
 913:src/display.c ****       set_status_top_always(buf2);
 8201              		.loc 1 913 27 is_stmt 1 discriminator 1 view .LVU2626
 8202 040a 3046     		mov	r0, r6
 8203 040c FFF7FEFF 		bl	set_status
 8204              	.LVL925:
 914:src/display.c ****       
 8205              		.loc 1 914 7 discriminator 1 view .LVU2627
 8206              	.LBB489:
 8207              	.LBI479:
3534:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
ARM GAS  /tmp/ccKZqSeG.s 			page 251


 8208              		.loc 1 3534 19 discriminator 1 view .LVU2628
 8209              	.LBB485:
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8210              		.loc 1 3535 2 discriminator 1 view .LVU2629
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8211              		.loc 1 3535 6 is_stmt 0 discriminator 1 view .LVU2630
 8212 0410 664B     		ldr	r3, .L919+12
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8213              		.loc 1 3535 5 discriminator 1 view .LVU2631
 8214 0412 B3F90030 		ldrsh	r3, [r3]
 8215 0416 83B9     		cbnz	r3, .L801
 8216 0418 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
3536:src/display.c ****       }
 8217              		.loc 1 3536 2 is_stmt 1 view .LVU2632
 8218 041a 1B06     		lsls	r3, r3, #24
 8219 041c A4D4     		bmi	.L823
 8220              	.LVL926:
 8221              	.L913:
 8222              	.LBB483:
 8223              	.LBI483:
3514:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8224              		.loc 1 3514 18 view .LVU2633
 8225              	.LBB484:
3515:src/display.c ****       }
 8226              		.loc 1 3515 2 view .LVU2634
3515:src/display.c ****       }
 8227              		.loc 1 3515 9 is_stmt 0 view .LVU2635
 8228 041e 0021     		movs	r1, #0
 8229 0420 17A8     		add	r0, sp, #92
 8230              	.LVL927:
3515:src/display.c ****       }
 8231              		.loc 1 3515 9 view .LVU2636
 8232 0422 FFF7FEFF 		bl	pixel_length
 8233              	.LVL928:
3515:src/display.c ****       }
 8234              		.loc 1 3515 9 view .LVU2637
 8235              	.LBE484:
 8236              	.LBE483:
3536:src/display.c ****       }
 8237              		.loc 1 3536 2 view .LVU2638
 8238 0426 2C28     		cmp	r0, #44
 8239 0428 D4BF     		ite	le
 8240 042a 0021     		movle	r1, #0
 8241 042c 0121     		movgt	r1, #1
 8242 042e 9CE7     		b	.L804
 8243              	.LVL929:
 8244              	.L902:
3536:src/display.c ****       }
 8245              		.loc 1 3536 2 view .LVU2639
 8246              	.LBE485:
 8247              	.LBE489:
 651:src/display.c **** 	  *p2 = '\024';
 8248              		.loc 1 651 4 is_stmt 1 view .LVU2640
 651:src/display.c **** 	  *p2 = '\024';
 8249              		.loc 1 651 10 is_stmt 0 view .LVU2641
 8250 0430 2022     		movs	r2, #32
 652:src/display.c **** 	  goto skip;
ARM GAS  /tmp/ccKZqSeG.s 			page 252


 8251              		.loc 1 652 8 view .LVU2642
 8252 0432 1423     		movs	r3, #20
 651:src/display.c **** 	  *p2 = '\024';
 8253              		.loc 1 651 10 view .LVU2643
 8254 0434 0270     		strb	r2, [r0]
 652:src/display.c **** 	  goto skip;
 8255              		.loc 1 652 4 is_stmt 1 view .LVU2644
 652:src/display.c **** 	  goto skip;
 8256              		.loc 1 652 8 is_stmt 0 view .LVU2645
 8257 0436 4370     		strb	r3, [r0, #1]
 653:src/display.c **** 	}
 8258              		.loc 1 653 4 is_stmt 1 view .LVU2646
 8259 0438 91E7     		b	.L744
 8260              	.LVL930:
 8261              	.L801:
 8262              	.LBB490:
 8263              	.LBB486:
3535:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8264              		.loc 1 3535 22 is_stmt 0 view .LVU2647
 8265 043a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8266 043c 5A06     		lsls	r2, r3, #25
 8267 043e 91D5     		bpl	.L802
 8268              	.LBE486:
 8269              	.LBE490:
 916:src/display.c **** #else
 8270              		.loc 1 916 5 view .LVU2648
 8271 0440 23B0     		add	sp, sp, #140
 8272              		.cfi_remember_state
 8273              		.cfi_def_cfa_offset 28
 8274              		@ sp needed
 8275 0442 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8276              	.LVL931:
 8277              	.L794:
 8278              		.cfi_restore_state
 8279              	.LBB491:
 867:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8280              		.loc 1 867 6 is_stmt 1 view .LVU2649
 867:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8281              		.loc 1 867 21 is_stmt 0 view .LVU2650
 8282 0446 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 867:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8283              		.loc 1 867 9 view .LVU2651
 8284 044a 9806     		lsls	r0, r3, #26
 8285 044c 3CD5     		bpl	.L791
 869:src/display.c **** #endif
 8286              		.loc 1 869 6 view .LVU2652
 8287 044e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 869:src/display.c **** #endif
 8288              		.loc 1 869 3 view .LVU2653
 8289 0450 13F00204 		ands	r4, r3, #2
 8290 0454 38D1     		bne	.L791
 872:src/display.c **** #endif
 8291              		.loc 1 872 6 view .LVU2654
 8292 0456 564B     		ldr	r3, .L919+16
 872:src/display.c **** #endif
 8293              		.loc 1 872 3 view .LVU2655
 8294 0458 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccKZqSeG.s 			page 253


 8295 045a 012B     		cmp	r3, #1
 8296 045c 34D0     		beq	.L791
 874:src/display.c **** 	      char ltgteq;
 8297              		.loc 1 874 6 view .LVU2656
 8298 045e 4146     		mov	r1, r8
 8299 0460 3846     		mov	r0, r7
 8300 0462 FFF7FEFF 		bl	set_x_fract
 8301              	.LVL932:
 874:src/display.c **** 	      char ltgteq;
 8302              		.loc 1 874 3 view .LVU2657
 8303 0466 78B3     		cbz	r0, .L791
 8304              	.LBB474:
 875:src/display.c **** 
 8305              		.loc 1 875 8 is_stmt 1 view .LVU2658
 877:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8306              		.loc 1 877 8 view .LVU2659
 877:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8307              		.loc 1 877 12 is_stmt 0 view .LVU2660
 8308 0468 2146     		mov	r1, r4
 8309 046a 3046     		mov	r0, r6
 8310 046c FFF7FEFF 		bl	find_char
 8311              	.LVL933:
 8312 0470 0446     		mov	r4, r0
 877:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8313              		.loc 1 877 10 view .LVU2661
 8314 0472 0238     		subs	r0, r0, #2
 8315              	.LVL934:
 879:src/display.c **** 	      switch (ltgteq) {
 8316              		.loc 1 879 8 is_stmt 1 view .LVU2662
 879:src/display.c **** 	      switch (ltgteq) {
 8317              		.loc 1 879 15 is_stmt 0 view .LVU2663
 8318 0474 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8319              	.LVL935:
 880:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8320              		.loc 1 880 8 is_stmt 1 view .LVU2664
 8321 0478 B9F1470F 		cmp	r9, #71
 8322 047c 00F0E580 		beq	.L821
 882:src/display.c **** 	      }
 8323              		.loc 1 882 25 is_stmt 0 view .LVU2665
 8324 0480 B9F14C0F 		cmp	r9, #76
 8325 0484 08BF     		it	eq
 8326 0486 4FF03C09 		moveq	r9, #60
 8327              	.LVL936:
 8328              	.L798:
 884:src/display.c **** 	      q[2] = ltgteq;
 8329              		.loc 1 884 8 is_stmt 1 view .LVU2666
 8330 048a 4A49     		ldr	r1, .L919+20
 8331 048c FFF7FEFF 		bl	scopy
 8332              	.LVL937:
 885:src/display.c **** 
 8333              		.loc 1 885 8 view .LVU2667
 885:src/display.c **** 
 8334              		.loc 1 885 13 is_stmt 0 view .LVU2668
 8335 0490 84F80090 		strb	r9, [r4]
 887:src/display.c **** 		goto skip;
 8336              		.loc 1 887 8 is_stmt 1 view .LVU2669
 887:src/display.c **** 		goto skip;
ARM GAS  /tmp/ccKZqSeG.s 			page 254


 8337              		.loc 1 887 12 is_stmt 0 view .LVU2670
 8338 0494 0121     		movs	r1, #1
 8339 0496 3046     		mov	r0, r6
 8340 0498 FFF7FEFF 		bl	pixel_length
 8341              	.LVL938:
 887:src/display.c **** 		goto skip;
 8342              		.loc 1 887 11 view .LVU2671
 8343 049c 2C28     		cmp	r0, #44
 8344 049e 7FF75EAF 		ble	.L744
 890:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8345              		.loc 1 890 8 is_stmt 1 view .LVU2672
 890:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8346              		.loc 1 890 14 is_stmt 0 view .LVU2673
 8347 04a2 4FF00009 		mov	r9, #0
 8348              	.LVL939:
 890:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8349              		.loc 1 890 14 view .LVU2674
 8350 04a6 04F8039C 		strb	r9, [r4, #-3]
 891:src/display.c **** 		goto skip;
 8351              		.loc 1 891 8 is_stmt 1 view .LVU2675
 891:src/display.c **** 		goto skip;
 8352              		.loc 1 891 12 is_stmt 0 view .LVU2676
 8353 04aa 0121     		movs	r1, #1
 8354 04ac 3046     		mov	r0, r6
 8355 04ae FFF7FEFF 		bl	pixel_length
 8356              	.LVL940:
 891:src/display.c **** 		goto skip;
 8357              		.loc 1 891 11 view .LVU2677
 8358 04b2 2C28     		cmp	r0, #44
 8359 04b4 7FF753AF 		ble	.L744
 894:src/display.c **** 	    }
 8360              		.loc 1 894 8 is_stmt 1 view .LVU2678
 894:src/display.c **** 	    }
 8361              		.loc 1 894 39 is_stmt 0 view .LVU2679
 8362 04b8 A8EB0602 		sub	r2, r8, r6
 894:src/display.c **** 	    }
 8363              		.loc 1 894 8 view .LVU2680
 8364 04bc 4946     		mov	r1, r9
 8365 04be C2F12A02 		rsb	r2, r2, #42
 8366 04c2 4046     		mov	r0, r8
 8367 04c4 FFF7FEFF 		bl	xset
 8368              	.LVL941:
 8369              	.L791:
 894:src/display.c **** 	    }
 8370              		.loc 1 894 8 view .LVU2681
 8371              	.LBE474:
 897:src/display.c **** 	    int extra_pixels;
 8372              		.loc 1 897 4 is_stmt 1 view .LVU2682
 897:src/display.c **** 	    int extra_pixels;
 8373              		.loc 1 897 10 is_stmt 0 view .LVU2683
 8374 04c8 0C23     		movs	r3, #12
 8375 04ca 0293     		str	r3, [sp, #8]
 897:src/display.c **** 	    int extra_pixels;
 8376              		.loc 1 897 27 is_stmt 1 view .LVU2684
 8377 04cc 0FE0     		b	.L800
 8378              	.LVL942:
 8379              	.L916:
ARM GAS  /tmp/ccKZqSeG.s 			page 255


 8380              	.LBB475:
 905:src/display.c **** 
 8381              		.loc 1 905 6 is_stmt 0 view .LVU2685
 8382 04ce 029A     		ldr	r2, [sp, #8]
 8383 04d0 0A32     		adds	r2, r2, #10
 8384 04d2 FFF7FEFF 		bl	xset
 8385              	.LVL943:
 907:src/display.c **** 	  }
 8386              		.loc 1 907 6 is_stmt 1 view .LVU2686
 907:src/display.c **** 	  }
 8387              		.loc 1 907 30 is_stmt 0 view .LVU2687
 8388 04d6 B4F14802 		subs	r2, r4, #72
 907:src/display.c **** 	  }
 8389              		.loc 1 907 8 view .LVU2688
 8390 04da 029B     		ldr	r3, [sp, #8]
 907:src/display.c **** 	  }
 8391              		.loc 1 907 30 view .LVU2689
 8392 04dc 48BF     		it	mi
 8393 04de A4F14502 		submi	r2, r4, #69
 907:src/display.c **** 	  }
 8394              		.loc 1 907 8 view .LVU2690
 8395 04e2 A3EBA203 		sub	r3, r3, r2, asr #2
 8396              	.LBE475:
 897:src/display.c **** 	    int extra_pixels;
 8397              		.loc 1 897 4 view .LVU2691
 8398 04e6 012B     		cmp	r3, #1
 8399              	.LBB476:
 907:src/display.c **** 	  }
 8400              		.loc 1 907 8 view .LVU2692
 8401 04e8 0293     		str	r3, [sp, #8]
 8402              	.LBE476:
 897:src/display.c **** 	    int extra_pixels;
 8403              		.loc 1 897 27 is_stmt 1 view .LVU2693
 897:src/display.c **** 	    int extra_pixels;
 8404              		.loc 1 897 4 is_stmt 0 view .LVU2694
 8405 04ea 7FF738AF 		ble	.L744
 8406              	.LVL944:
 8407              	.L800:
 8408              	.LBB477:
 898:src/display.c **** 
 8409              		.loc 1 898 6 is_stmt 1 view .LVU2695
 900:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8410              		.loc 1 900 6 view .LVU2696
 8411 04ee 02AA     		add	r2, sp, #8
 8412 04f0 4146     		mov	r1, r8
 8413 04f2 3846     		mov	r0, r7
 8414 04f4 FFF7FEFF 		bl	set_x_dn
 8415              	.LVL945:
 901:src/display.c **** 	    if (extra_pixels <= 0)
 8416              		.loc 1 901 6 view .LVU2697
 901:src/display.c **** 	    if (extra_pixels <= 0)
 8417              		.loc 1 901 21 is_stmt 0 view .LVU2698
 8418 04f8 0121     		movs	r1, #1
 8419 04fa 3046     		mov	r0, r6
 8420 04fc FFF7FEFF 		bl	pixel_length
 8421              	.LVL946:
 905:src/display.c **** 
ARM GAS  /tmp/ccKZqSeG.s 			page 256


 8422              		.loc 1 905 6 is_stmt 1 view .LVU2699
 901:src/display.c **** 	    if (extra_pixels <= 0)
 8423              		.loc 1 901 21 is_stmt 0 view .LVU2700
 8424 0500 0446     		mov	r4, r0
 8425              	.LVL947:
 902:src/display.c **** 	      break;
 8426              		.loc 1 902 6 is_stmt 1 view .LVU2701
 902:src/display.c **** 	      break;
 8427              		.loc 1 902 9 is_stmt 0 view .LVU2702
 8428 0502 4B2C     		cmp	r4, #75
 905:src/display.c **** 
 8429              		.loc 1 905 6 view .LVU2703
 8430 0504 4FF00001 		mov	r1, #0
 8431 0508 4046     		mov	r0, r8
 8432              	.LVL948:
 902:src/display.c **** 	      break;
 8433              		.loc 1 902 9 view .LVU2704
 8434 050a E0DC     		bgt	.L916
 8435              	.LVL949:
 902:src/display.c **** 	      break;
 8436              		.loc 1 902 9 view .LVU2705
 8437              	.LBE477:
 8438 050c 27E7     		b	.L744
 8439              	.LVL950:
 8440              	.L900:
 902:src/display.c **** 	      break;
 8441              		.loc 1 902 9 view .LVU2706
 8442              	.LBE491:
 721:src/display.c **** 	  *p2++ = '\207';
 8443              		.loc 1 721 4 is_stmt 1 view .LVU2707
 722:src/display.c **** 	  *p2++ = '\007';	    
 8444              		.loc 1 722 4 view .LVU2708
 723:src/display.c **** 	}
 8445              		.loc 1 723 10 is_stmt 0 view .LVU2709
 8446 050e 88F80230 		strb	r3, [r8, #2]
 722:src/display.c **** 	  *p2++ = '\007';	    
 8447              		.loc 1 722 10 view .LVU2710
 8448 0512 88F80120 		strb	r2, [r8, #1]
 723:src/display.c **** 	}
 8449              		.loc 1 723 4 is_stmt 1 view .LVU2711
 723:src/display.c **** 	}
 8450              		.loc 1 723 7 is_stmt 0 view .LVU2712
 8451 0516 08F10308 		add	r8, r8, #3
 8452              	.LVL951:
 723:src/display.c **** 	}
 8453              		.loc 1 723 7 view .LVU2713
 8454 051a B3E5     		b	.L758
 8455              	.LVL952:
 8456              	.L816:
 755:src/display.c **** #endif
 8457              		.loc 1 755 19 view .LVU2714
 8458 051c 2649     		ldr	r1, .L919+24
 8459 051e CBE5     		b	.L760
 8460              	.LVL953:
 8461              	.L769:
 785:src/display.c **** 	  p = scopy(p, q);
 8462              		.loc 1 785 4 is_stmt 1 view .LVU2715
ARM GAS  /tmp/ccKZqSeG.s 			page 257


 786:src/display.c **** 	}
 8463              		.loc 1 786 4 view .LVU2716
 786:src/display.c **** 	}
 8464              		.loc 1 786 8 is_stmt 0 view .LVU2717
 8465 0520 2649     		ldr	r1, .L919+28
 8466 0522 3046     		mov	r0, r6
 8467 0524 FFF7FEFF 		bl	scopy
 8468              	.LVL954:
 8469 0528 8046     		mov	r8, r0
 8470              	.LVL955:
 786:src/display.c **** 	}
 8471              		.loc 1 786 6 view .LVU2718
 8472 052a 33E6     		b	.L772
 8473              	.LVL956:
 8474              	.L906:
 807:src/display.c **** 	    p = scopy(p, q);
 8475              		.loc 1 807 6 is_stmt 1 view .LVU2719
 808:src/display.c **** 	    //	    goto no_copy;
 8476              		.loc 1 808 6 view .LVU2720
 808:src/display.c **** 	    //	    goto no_copy;
 8477              		.loc 1 808 10 is_stmt 0 view .LVU2721
 8478 052c 4046     		mov	r0, r8
 8479 052e 2449     		ldr	r1, .L919+32
 8480 0530 FFF7FEFF 		bl	scopy
 8481              	.LVL957:
 8482 0534 8046     		mov	r8, r0
 8483              	.LVL958:
 808:src/display.c **** 	    //	    goto no_copy;
 8484              		.loc 1 808 10 view .LVU2722
 8485 0536 32E6     		b	.L774
 8486              	.LVL959:
 8487              	.L909:
 8488              	.LBB492:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8489              		.loc 1 831 77 discriminator 2 view .LVU2723
 8490 0538 FFF7FEFF 		bl	stack_size
 8491              	.LVL960:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8492              		.loc 1 831 64 discriminator 2 view .LVU2724
 8493 053c D9F80010 		ldr	r1, [r9]
 8494 0540 6330     		adds	r0, r0, #99
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8495              		.loc 1 831 48 discriminator 2 view .LVU2725
 8496 0542 8842     		cmp	r0, r1
 8497 0544 FFF647AE 		blt	.L785
 832:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8498              		.loc 1 832 13 view .LVU2726
 8499 0548 FFF7FEFF 		bl	get_cmdline
 8500              	.LVL961:
 832:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8501              		.loc 1 832 9 view .LVU2727
 8502 054c 0028     		cmp	r0, #0
 8503 054e 74D0     		beq	.L787
 832:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8504              		.loc 1 832 27 discriminator 1 view .LVU2728
 8505 0550 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8506 0552 002B     		cmp	r3, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 258


 8507 0554 71D1     		bne	.L787
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8508              		.loc 1 833 9 view .LVU2729
 8509 0556 17B1     		cbz	r7, .L788
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8510              		.loc 1 833 30 discriminator 1 view .LVU2730
 8511 0558 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8512              		.loc 1 833 12 discriminator 1 view .LVU2731
 8513 055a 5F06     		lsls	r7, r3, #25
 8514              	.LVL962:
 833:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8515              		.loc 1 833 12 discriminator 1 view .LVU2732
 8516 055c 6DD5     		bpl	.L787
 8517              	.L788:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8518              		.loc 1 831 6 discriminator 5 view .LVU2733
 8519 055e D9F80010 		ldr	r1, [r9]
 8520 0562 39E6     		b	.L789
 8521              	.LVL963:
 8522              	.L903:
 831:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8523              		.loc 1 831 6 discriminator 5 view .LVU2734
 8524              	.LBE492:
 656:src/display.c **** 	  *p2 = '\015';
 8525              		.loc 1 656 4 is_stmt 1 view .LVU2735
 656:src/display.c **** 	  *p2 = '\015';
 8526              		.loc 1 656 10 is_stmt 0 view .LVU2736
 8527 0564 2022     		movs	r2, #32
 657:src/display.c **** 	  goto skip;
 8528              		.loc 1 657 8 view .LVU2737
 8529 0566 0D23     		movs	r3, #13
 656:src/display.c **** 	  *p2 = '\015';
 8530              		.loc 1 656 10 view .LVU2738
 8531 0568 0270     		strb	r2, [r0]
 657:src/display.c **** 	  goto skip;
 8532              		.loc 1 657 4 is_stmt 1 view .LVU2739
 657:src/display.c **** 	  goto skip;
 8533              		.loc 1 657 8 is_stmt 0 view .LVU2740
 8534 056a 4370     		strb	r3, [r0, #1]
 658:src/display.c **** 	}
 8535              		.loc 1 658 4 is_stmt 1 view .LVU2741
 8536 056c F7E6     		b	.L744
 8537              	.LVL964:
 8538              	.L914:
 775:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8539              		.loc 1 775 4 view .LVU2742
 776:src/display.c **** 	  }
 8540              		.loc 1 776 6 view .LVU2743
 779:src/display.c **** 	  }
 8541              		.loc 1 779 6 view .LVU2744
 775:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8542              		.loc 1 775 7 is_stmt 0 view .LVU2745
 8543 056e 1C07     		lsls	r4, r3, #28
 776:src/display.c **** 	  }
 8544              		.loc 1 776 33 view .LVU2746
 8545 0570 47BF     		ittee	mi
ARM GAS  /tmp/ccKZqSeG.s 			page 259


 8546 0572 144B     		ldrmi	r3, .L919+36
 8547 0574 1449     		ldrmi	r1, .L919+40
 779:src/display.c **** 	  }
 8548              		.loc 1 779 31 view .LVU2747
 8549 0576 154B     		ldrpl	r3, .L919+44
 8550 0578 1549     		ldrpl	r1, .L919+48
 8551 057a 0028     		cmp	r0, #0
 8552 057c 18BF     		it	ne
 8553 057e 1946     		movne	r1, r3
 8554              	.LVL965:
 781:src/display.c **** 	  goto skip;
 8555              		.loc 1 781 4 is_stmt 1 view .LVU2748
 8556 0580 3046     		mov	r0, r6
 8557 0582 FFF7FEFF 		bl	scopy
 8558              	.LVL966:
 782:src/display.c **** 	}
 8559              		.loc 1 782 4 view .LVU2749
 8560 0586 EAE6     		b	.L744
 8561              	.LVL967:
 8562              	.L747:
 642:src/display.c **** 	    *p2++ = shift_char;
 8563              		.loc 1 642 30 is_stmt 0 discriminator 1 view .LVU2750
 8564 0588 FFF7FEFF 		bl	is_dblmode
 8565              	.LVL968:
 642:src/display.c **** 	    *p2++ = shift_char;
 8566              		.loc 1 642 26 discriminator 1 view .LVU2751
 8567 058c 0028     		cmp	r0, #0
 8568 058e 3FF4B8AD 		beq	.L749
 647:src/display.c **** 	  }
 8569              		.loc 1 647 6 is_stmt 1 view .LVU2752
 8570              	.LVL969:
 647:src/display.c **** 	  }
 8571              		.loc 1 647 12 is_stmt 0 view .LVU2753
 8572 0592 4423     		movs	r3, #68
 8573 0594 8DF85C30 		strb	r3, [sp, #92]
 647:src/display.c **** 	  }
 8574              		.loc 1 647 9 view .LVU2754
 8575 0598 0DF15D00 		add	r0, sp, #93
 8576              	.LVL970:
 647:src/display.c **** 	  }
 8577              		.loc 1 647 9 view .LVU2755
 8578 059c B8E5     		b	.L748
 8579              	.L920:
 8580 059e 00BF     		.align	2
 8581              	.L919:
 8582 05a0 00000000 		.word	.LANCHOR13
 8583 05a4 00000000 		.word	.LC2
 8584 05a8 00000000 		.word	StateWhileOn
 8585 05ac 00000000 		.word	.LANCHOR15
 8586 05b0 00000000 		.word	RectPolConv
 8587 05b4 68000000 		.word	.LC21
 8588 05b8 14000000 		.word	.LC7
 8589 05bc 60000000 		.word	.LC18
 8590 05c0 64000000 		.word	.LC19
 8591 05c4 2C000000 		.word	.LC11
 8592 05c8 3C000000 		.word	.LC13
 8593 05cc 34000000 		.word	.LC12
ARM GAS  /tmp/ccKZqSeG.s 			page 260


 8594 05d0 44000000 		.word	.LC14
 8595 05d4 00000000 		.word	IntMaxWindow
 8596 05d8 00000000 		.word	ShowRegister
 8597              	.L904:
 661:src/display.c **** 	  if (State2.wascomplex) {
 8598              		.loc 1 661 28 discriminator 1 view .LVU2756
 8599 05dc 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 661:src/display.c **** 	  if (State2.wascomplex) {
 8600              		.loc 1 661 24 discriminator 1 view .LVU2757
 8601 05de 13F0C00F 		tst	r3, #192
 8602 05e2 2DD1     		bne	.L811
 661:src/display.c **** 	  if (State2.wascomplex) {
 8603              		.loc 1 661 60 discriminator 2 view .LVU2758
 8604 05e4 1A4B     		ldr	r3, .L921
 8605 05e6 1B68     		ldr	r3, [r3]
 661:src/display.c **** 	  if (State2.wascomplex) {
 8606              		.loc 1 661 46 discriminator 2 view .LVU2759
 8607 05e8 002B     		cmp	r3, #0
 8608 05ea 3FF49DAD 		beq	.L752
 662:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8609              		.loc 1 662 4 is_stmt 1 view .LVU2760
 665:src/display.c **** 	    if (RectPolConv == 1) {
 8610              		.loc 1 665 9 view .LVU2761
 666:src/display.c **** 	      q = "\007\306<";
 8611              		.loc 1 666 6 view .LVU2762
 670:src/display.c **** 	    }
 8612              		.loc 1 670 10 is_stmt 0 view .LVU2763
 8613 05ee 1949     		ldr	r1, .L921+4
 8614 05f0 194A     		ldr	r2, .L921+8
 8615 05f2 012B     		cmp	r3, #1
 8616 05f4 18BF     		it	ne
 8617 05f6 1146     		movne	r1, r2
 8618              	.L753:
 8619              	.LVL971:
 673:src/display.c **** 
 8620              		.loc 1 673 4 is_stmt 1 view .LVU2764
 673:src/display.c **** 
 8621              		.loc 1 673 8 is_stmt 0 view .LVU2765
 8622 05f8 3046     		mov	r0, r6
 8623              	.LVL972:
 673:src/display.c **** 
 8624              		.loc 1 673 8 view .LVU2766
 8625 05fa FFF7FEFF 		bl	scopy
 8626              	.LVL973:
 673:src/display.c **** 
 8627              		.loc 1 673 8 view .LVU2767
 8628 05fe 8046     		mov	r8, r0
 8629              	.LVL974:
 675:src/display.c **** 	}
 8630              		.loc 1 675 4 is_stmt 1 view .LVU2768
 8631 0600 D1E5     		b	.L734
 8632              	.LVL975:
 8633              	.L915:
 8634              	.LBB493:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8635              		.loc 1 821 85 is_stmt 0 discriminator 2 view .LVU2769
 8636 0602 FFF7FEFF 		bl	stack_size
ARM GAS  /tmp/ccKZqSeG.s 			page 261


 8637              	.LVL976:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8638              		.loc 1 821 72 discriminator 2 view .LVU2770
 8639 0606 D9F80030 		ldr	r3, [r9]
 8640 060a 6330     		adds	r0, r0, #99
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8641              		.loc 1 821 56 discriminator 2 view .LVU2771
 8642 060c 9842     		cmp	r0, r3
 8643 060e FFF6F3AE 		blt	.L777
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8644              		.loc 1 821 101 discriminator 4 view .LVU2772
 8645 0612 FFF7FEFF 		bl	get_cmdline
 8646              	.LVL977:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8647              		.loc 1 821 98 discriminator 4 view .LVU2773
 8648 0616 18B1     		cbz	r0, .L780
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8649              		.loc 1 822 7 view .LVU2774
 8650 0618 A7B1     		cbz	r7, .L779
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8651              		.loc 1 822 28 discriminator 1 view .LVU2775
 8652 061a EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8653              		.loc 1 822 10 discriminator 1 view .LVU2776
 8654 061c 5906     		lsls	r1, r3, #25
 8655 061e 11D4     		bmi	.L779
 8656              	.L780:
 8657 0620 D9F80030 		ldr	r3, [r9]
 8658 0624 E8E6     		b	.L777
 8659              	.LVL978:
 8660              	.L813:
 822:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 8661              		.loc 1 822 10 discriminator 1 view .LVU2777
 8662              	.LBE493:
 684:src/display.c **** #endif
 8663              		.loc 1 684 19 view .LVU2778
 8664 0626 0D49     		ldr	r1, .L921+12
 8665 0628 8CE5     		b	.L754
 8666              	.LVL979:
 8667              	.L894:
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8668              		.loc 1 615 4 is_stmt 1 view .LVU2779
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8669              		.loc 1 615 11 is_stmt 0 view .LVU2780
 8670 062a 0293     		str	r3, [sp, #8]
 615:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8671              		.loc 1 615 27 is_stmt 1 view .LVU2781
 8672 062c 86E6     		b	.L806
 8673              	.LVL980:
 8674              	.L908:
 8675              	.LBB494:
 828:src/display.c **** 	  }
 8676              		.loc 1 828 6 view .LVU2782
 8677 062e 03AF     		add	r7, sp, #12
 8678              	.LVL981:
 828:src/display.c **** 	  }
 8679              		.loc 1 828 6 is_stmt 0 view .LVU2783
ARM GAS  /tmp/ccKZqSeG.s 			page 262


 8680 0630 3846     		mov	r0, r7
 8681 0632 6F21     		movs	r1, #111
 8682 0634 FFF7FEFF 		bl	getRegister
 8683              	.LVL982:
 8684 0638 D2E5     		b	.L784
 8685              	.L787:
 8686 063a D9F80010 		ldr	r1, [r9]
 8687 063e CAE5     		b	.L785
 8688              	.LVL983:
 8689              	.L811:
 828:src/display.c **** 	  }
 8690              		.loc 1 828 6 view .LVU2784
 8691              	.LBE494:
 663:src/display.c **** 	  }
 8692              		.loc 1 663 8 view .LVU2785
 8693 0640 0749     		ldr	r1, .L921+16
 8694 0642 D9E7     		b	.L753
 8695              	.LVL984:
 8696              	.L779:
 8697              	.LBB495:
 821:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8698              		.loc 1 821 6 discriminator 7 view .LVU2786
 8699 0644 D9F80000 		ldr	r0, [r9]
 8700 0648 D7E6     		b	.L781
 8701              	.LVL985:
 8702              	.L821:
 8703              	.LBB478:
 881:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8704              		.loc 1 881 25 view .LVU2787
 8705 064a 4FF03E09 		mov	r9, #62
 8706              	.LVL986:
 881:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8707              		.loc 1 881 25 view .LVU2788
 8708 064e 1CE7     		b	.L798
 8709              	.L922:
 8710              		.align	2
 8711              	.L921:
 8712 0650 00000000 		.word	RectPolConv
 8713 0654 04000000 		.word	.LC3
 8714 0658 0C000000 		.word	.LC5
 8715 065c 14000000 		.word	.LC7
 8716 0660 08000000 		.word	.LC4
 8717              	.LBE478:
 8718              	.LBE495:
 8719              		.cfi_endproc
 8720              	.LFE16:
 8722              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8723              		.align	2
 8724              	.LC22:
 8725 0000 0D00     		.ascii	"\015\000"
 8726 0002 0000     		.align	2
 8727              	.LC23:
 8728 0004 060600   		.ascii	"\006\006\000"
 8729 0007 00       		.align	2
 8730              	.LC25:
 8731 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8731      492C2057 
ARM GAS  /tmp/ccKZqSeG.s 			page 263


 8731      77414C74 
 8731      4500
 8732 0016 0000     		.align	2
 8733              	.LC26:
 8734 0018 48595000 		.ascii	"HYP\000"
 8735              		.align	2
 8736              	.LC27:
 8737 001c 7F060600 		.ascii	"\177\006\006\000"
 8738              		.align	2
 8739              	.LC30:
 8740 0020 3020746F 		.ascii	"0 to 255\000"
 8740      20323535 
 8740      00
 8741 0029 000000   		.align	2
 8742              	.LC31:
 8743 002c 46726565 		.ascii	"Free:\000"
 8743      3A00
 8744 0032 0000     		.align	2
 8745              	.LC32:
 8746 0034 202C2046 		.ascii	" , FL. \000"
 8746      4C2E2000 
 8747              		.align	2
 8748              	.LC33:
 8749 003c 52656773 		.ascii	"Regs:\000"
 8749      3A00
 8750 0042 0000     		.align	2
 8751              	.LC34:
 8752 0044 20910606 		.ascii	" \221\006\006+\000"
 8752      2B00
 8753 004a 0000     		.align	2
 8754              	.LC35:
 8755 004c 202C204C 		.ascii	" , Loc. \000"
 8755      6F632E20 
 8755      00
 8756 0055 000000   		.align	2
 8757              	.LC36:
 8758 0058 464C2000 		.ascii	"FL \000"
 8759              		.align	2
 8760              	.LC37:
 8761 005c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8761      06413A44 
 8761      064C494A 
 8761      4B00
 8762 006a 0000     		.align	2
 8763              	.LC38:
 8764 006c 464C2E30 		.ascii	"FL.00-.15\000"
 8764      302D2E31 
 8764      3500
 8765 0076 0000     		.align	2
 8766              	.LC39:
 8767 0078 43414C4C 		.ascii	"CALLS\000"
 8767      5300
 8768 007e 0000     		.align	2
 8769              	.LC40:
 8770 0080 52656720 		.ascii	"Reg \000"
 8770      00
 8771 0085 000000   		.align	2
ARM GAS  /tmp/ccKZqSeG.s 			page 264


 8772              	.LC41:
 8773 0088 00       		.ascii	"\000"
 8774 0089 000000   		.align	2
 8775              	.LC42:
 8776 008c 202D2D2D 		.ascii	" ---\000"
 8776      00
 8777 0091 000000   		.align	2
 8778              	.LC29:
 8779 0094 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8779      093E0A00 
 8780              		.align	2
 8781              	.LC28:
 8782 009c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8782      41424344 
 8782      4C494A4B 
 8782      00
 8783              		.section	.text.display,"ax",%progbits
 8784              		.align	1
 8785              		.p2align 2,,3
 8786              		.global	display
 8787              		.syntax unified
 8788              		.thumb
 8789              		.thumb_func
 8790              		.fpu fpv4-sp-d16
 8792              	display:
 8793              	.LFB33:
2585:src/display.c **** 	int i, j;
 8794              		.loc 1 2585 26 is_stmt 1 view -0
 8795              		.cfi_startproc
 8796              		@ args = 0, pretend = 0, frame = 160
 8797              		@ frame_needed = 0, uses_anonymous_args = 0
2586:src/display.c **** 	char buf[40], *bp = buf;
 8798              		.loc 1 2586 2 view .LVU2790
2587:src/display.c **** 	const char *p;
 8799              		.loc 1 2587 2 view .LVU2791
2585:src/display.c **** 	int i, j;
 8800              		.loc 1 2585 26 is_stmt 0 view .LVU2792
 8801 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8802              		.cfi_def_cfa_offset 36
 8803              		.cfi_offset 4, -36
 8804              		.cfi_offset 5, -32
 8805              		.cfi_offset 6, -28
 8806              		.cfi_offset 7, -24
 8807              		.cfi_offset 8, -20
 8808              		.cfi_offset 9, -16
 8809              		.cfi_offset 10, -12
 8810              		.cfi_offset 11, -8
 8811              		.cfi_offset 14, -4
2590:src/display.c **** 	int skip = 0;
 8812              		.loc 1 2590 24 view .LVU2793
 8813 0004 B74C     		ldr	r4, .L1260
2595:src/display.c **** 	if (State2.disp_freeze) {
 8814              		.loc 1 2595 16 view .LVU2794
 8815 0006 B84F     		ldr	r7, .L1260+4
2590:src/display.c **** 	int skip = 0;
 8816              		.loc 1 2590 24 view .LVU2795
 8817 0008 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
ARM GAS  /tmp/ccKZqSeG.s 			page 265


2585:src/display.c **** 	int i, j;
 8818              		.loc 1 2585 26 view .LVU2796
 8819 000c A9B0     		sub	sp, sp, #164
 8820              		.cfi_def_cfa_offset 200
 8821              	.LVL987:
2588:src/display.c **** 	int annuc = 0;
 8822              		.loc 1 2588 2 is_stmt 1 view .LVU2797
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8823              		.loc 1 2589 2 view .LVU2798
2590:src/display.c **** 	int skip = 0;
 8824              		.loc 1 2590 2 view .LVU2799
2591:src/display.c **** 	int x_disp = 0;
 8825              		.loc 1 2591 2 view .LVU2800
2592:src/display.c **** 	const int shift = cur_shift();
 8826              		.loc 1 2592 2 view .LVU2801
2593:src/display.c **** 
 8827              		.loc 1 2593 2 view .LVU2802
2593:src/display.c **** 
 8828              		.loc 1 2593 20 is_stmt 0 view .LVU2803
 8829 000e FFF7FEFF 		bl	cur_shift
 8830              	.LVL988:
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8831              		.loc 1 2596 6 view .LVU2804
 8832 0012 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
2595:src/display.c **** 	if (State2.disp_freeze) {
 8833              		.loc 1 2595 16 view .LVU2805
 8834 0014 0021     		movs	r1, #0
 8835              	.LVL989:
2595:src/display.c **** 	if (State2.disp_freeze) {
 8836              		.loc 1 2595 2 is_stmt 1 view .LVU2806
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8837              		.loc 1 2596 5 is_stmt 0 view .LVU2807
 8838 0016 12F01005 		ands	r5, r2, #16
2595:src/display.c **** 	if (State2.disp_freeze) {
 8839              		.loc 1 2595 16 view .LVU2808
 8840 001a 3980     		strh	r1, [r7]	@ movhi
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8841              		.loc 1 2596 2 is_stmt 1 view .LVU2809
2596:src/display.c **** 	  State2.disp_freeze = 0;
 8842              		.loc 1 2596 5 is_stmt 0 view .LVU2810
 8843 001c 40F0A680 		bne	.L1219
2606:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8844              		.loc 1 2606 2 is_stmt 1 view .LVU2811
2606:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8845              		.loc 1 2606 6 is_stmt 0 view .LVU2812
 8846 0020 DFF8F482 		ldr	r8, .L1260+52
 8847 0024 D8F80060 		ldr	r6, [r8]
2606:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8848              		.loc 1 2606 5 view .LVU2813
 8849 0028 002E     		cmp	r6, #0
 8850 002a 5BD1     		bne	.L1220
2620:src/display.c **** #  endif
 8851              		.loc 1 2620 2 is_stmt 1 view .LVU2814
2620:src/display.c **** #  endif
 8852              		.loc 1 2620 33 is_stmt 0 view .LVU2815
 8853 002c DFF8D0B2 		ldr	fp, .L1260+28
 8854 0030 0090     		str	r0, [sp]
ARM GAS  /tmp/ccKZqSeG.s 			page 266


 8855 0032 DBF80020 		ldr	r2, [fp]
 8856 0036 92F8EA57 		ldrb	r5, [r2, #2026]	@ zero_extendqisi2
2626:src/display.c **** 
 8857              		.loc 1 2626 2 view .LVU2816
 8858 003a FFF7FEFF 		bl	reset_disp
 8859              	.LVL990:
2629:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8860              		.loc 1 2629 2 view .LVU2817
 8861 003e 2822     		movs	r2, #40
 8862 0040 1EA8     		add	r0, sp, #120
 8863              	.LVL991:
2629:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8864              		.loc 1 2629 2 view .LVU2818
 8865 0042 3146     		mov	r1, r6
 8866 0044 FFF7FEFF 		bl	xset
 8867              	.LVL992:
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8868              		.loc 1 2635 6 view .LVU2819
 8869 0048 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8870              		.loc 1 2635 5 view .LVU2820
 8871 004a 009B     		ldr	r3, [sp]
 8872 004c 12F0100F 		tst	r2, #16
2620:src/display.c **** #  endif
 8873              		.loc 1 2620 12 view .LVU2821
 8874 0050 C5F38005 		ubfx	r5, r5, #2, #1
 8875              	.LVL993:
2626:src/display.c **** 
 8876              		.loc 1 2626 2 is_stmt 1 view .LVU2822
2629:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8877              		.loc 1 2629 2 view .LVU2823
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8878              		.loc 1 2635 2 view .LVU2824
2635:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8879              		.loc 1 2635 5 is_stmt 0 view .LVU2825
 8880 0054 40F06481 		bne	.L1221
2643:src/display.c **** 	  if (yreg_enabled) {
 8881              		.loc 1 2643 9 is_stmt 1 view .LVU2826
2643:src/display.c **** 	  if (yreg_enabled) {
 8882              		.loc 1 2643 13 is_stmt 0 view .LVU2827
 8883 0058 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
2643:src/display.c **** 	  if (yreg_enabled) {
 8884              		.loc 1 2643 12 view .LVU2828
 8885 005a 4807     		lsls	r0, r1, #29
 8886 005c 00F09080 		beq	.L930
2644:src/display.c **** 	    set_status_top(S_SURE);
 8887              		.loc 1 2644 4 is_stmt 1 view .LVU2829
2644:src/display.c **** 	    set_status_top(S_SURE);
 8888              		.loc 1 2644 7 is_stmt 0 view .LVU2830
 8889 0060 002D     		cmp	r5, #0
 8890 0062 00F08F81 		beq	.L931
2645:src/display.c **** 	    no_status_top = 1;
 8891              		.loc 1 2645 6 is_stmt 1 view .LVU2831
 8892              	.LVL994:
 8893              	.LBB557:
 8894              	.LBI557:
3524:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/ccKZqSeG.s 			page 267


 8895              		.loc 1 3524 19 view .LVU2832
 8896              	.LBB558:
3525:src/display.c **** 	if (State2.runmode) {
 8897              		.loc 1 3525 2 view .LVU2833
3525:src/display.c **** 	if (State2.runmode) {
 8898              		.loc 1 3525 5 is_stmt 0 view .LVU2834
 8899 0066 B7F90030 		ldrsh	r3, [r7]
 8900 006a 13B9     		cbnz	r3, .L933
 8901 006c 9F48     		ldr	r0, .L1260+8
 8902 006e FFF7FEFF 		bl	set_status_top.part.0
 8903              	.LVL995:
 8904              	.L933:
3525:src/display.c **** 	if (State2.runmode) {
 8905              		.loc 1 3525 5 view .LVU2835
 8906              	.LBE558:
 8907              	.LBE557:
2646:src/display.c **** 	    annuc = 1;
 8908              		.loc 1 2646 6 is_stmt 1 view .LVU2836
2646:src/display.c **** 	    annuc = 1;
 8909              		.loc 1 2646 20 is_stmt 0 view .LVU2837
 8910 0072 0126     		movs	r6, #1
 8911 0074 3E80     		strh	r6, [r7]	@ movhi
2647:src/display.c **** 	  }
 8912              		.loc 1 2647 6 is_stmt 1 view .LVU2838
 8913              	.LVL996:
2870:src/display.c ****       nostk:
 8914              		.loc 1 2870 2 view .LVU2839
 8915 0076 FFF7FEFF 		bl	show_stack
 8916              	.LVL997:
2872:src/display.c **** 	if (!skip) {
 8917              		.loc 1 2872 2 view .LVU2840
 8918 007a 9D4B     		ldr	r3, .L1260+12
 8919 007c DFF89C92 		ldr	r9, .L1260+56
 8920 0080 0093     		str	r3, [sp]
 8921 0082 FFF7FEFF 		bl	show_flags
 8922              	.LVL998:
2873:src/display.c **** 	  if (State2.runmode) {
 8923              		.loc 1 2873 2 view .LVU2841
 8924              	.L934:
2874:src/display.c **** 	  only_update_x:
 8925              		.loc 1 2874 4 view .LVU2842
2874:src/display.c **** 	  only_update_x:
 8926              		.loc 1 2874 8 is_stmt 0 view .LVU2843
 8927 0086 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2874:src/display.c **** 	  only_update_x:
 8928              		.loc 1 2874 7 view .LVU2844
 8929 0088 11F04005 		ands	r5, r1, #64
 8930 008c 33D1     		bne	.L927
 8931              	.LBB559:
2914:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8932              		.loc 1 2914 6 is_stmt 1 view .LVU2845
2914:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8933              		.loc 1 2914 24 is_stmt 0 view .LVU2846
 8934 008e DBF80030 		ldr	r3, [fp]
2914:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8935              		.loc 1 2914 19 view .LVU2847
 8936 0092 B3F8E0A7 		ldrh	r10, [r3, #2016]
ARM GAS  /tmp/ccKZqSeG.s 			page 268


 8937              	.LVL999:
2915:src/display.c **** 	    const int n = nLIB(pc);
 8938              		.loc 1 2915 6 is_stmt 1 view .LVU2848
2915:src/display.c **** 	    const int n = nLIB(pc);
 8939              		.loc 1 2915 25 is_stmt 0 view .LVU2849
 8940 0096 5046     		mov	r0, r10
 8941 0098 FFF7FEFF 		bl	user_pc
 8942              	.LVL1000:
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8943              		.loc 1 2917 6 view .LVU2850
 8944 009c 2822     		movs	r2, #40
 8945 009e 2946     		mov	r1, r5
2915:src/display.c **** 	    const int n = nLIB(pc);
 8946              		.loc 1 2915 25 view .LVU2851
 8947 00a0 8346     		mov	fp, r0
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8948              		.loc 1 2917 6 view .LVU2852
 8949 00a2 1EA8     		add	r0, sp, #120
 8950              	.LVL1001:
2916:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8951              		.loc 1 2916 6 is_stmt 1 view .LVU2853
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8952              		.loc 1 2917 6 is_stmt 0 view .LVU2854
 8953 00a4 FFF7FEFF 		bl	xset
 8954              	.LVL1002:
2918:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8955              		.loc 1 2918 6 view .LVU2855
 8956 00a8 924B     		ldr	r3, .L1260+16
2916:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8957              		.loc 1 2916 20 view .LVU2856
 8958 00aa 4FEA9A3A 		lsr	r10, r10, #14
 8959              	.LVL1003:
2917:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8960              		.loc 1 2917 6 is_stmt 1 view .LVU2857
2918:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8961              		.loc 1 2918 6 view .LVU2858
 8962 00ae 1868     		ldr	r0, [r3]
 8963 00b0 2A46     		mov	r2, r5
 8964 00b2 0121     		movs	r1, #1
 8965 00b4 FFF7FEFF 		bl	set_exp
 8966              	.LVL1004:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8967              		.loc 1 2919 6 view .LVU2859
 8968 00b8 BAF1000F 		cmp	r10, #0
 8969 00bc 40F0CA81 		bne	.L1222
 8970 00c0 8D49     		ldr	r1, .L1260+20
 8971              	.L1063:
 8972 00c2 8E4D     		ldr	r5, .L1260+24
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8973              		.loc 1 2919 6 is_stmt 0 discriminator 4 view .LVU2860
 8974 00c4 1EA8     		add	r0, sp, #120
 8975 00c6 FFF7FEFF 		bl	scopy_spc
 8976              	.LVL1005:
2920:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 8977              		.loc 1 2920 21 discriminator 4 view .LVU2861
 8978 00ca 0AF00102 		and	r2, r10, #1
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
ARM GAS  /tmp/ccKZqSeG.s 			page 269


 8979              		.loc 1 2919 6 discriminator 4 view .LVU2862
 8980 00ce 5946     		mov	r1, fp
 8981 00d0 0332     		adds	r2, r2, #3
 8982 00d2 FFF7FEFF 		bl	num_arg_0
 8983              	.LVL1006:
2921:src/display.c **** #if 0
 8984              		.loc 1 2921 6 is_stmt 1 discriminator 4 view .LVU2863
 8985 00d6 1EA8     		add	r0, sp, #120
 8986 00d8 0921     		movs	r1, #9
 8987 00da FFF7FEFF 		bl	set_digits_string
 8988              	.LVL1007:
 8989              	.L1216:
2921:src/display.c **** #if 0
 8990              		.loc 1 2921 6 is_stmt 0 discriminator 4 view .LVU2864
 8991              	.LBE559:
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8992              		.loc 1 2942 2 is_stmt 1 discriminator 4 view .LVU2865
 8993 00de FFF7FEFF 		bl	set_annunciators
 8994              	.LVL1008:
2943:src/display.c **** 	  ShowRPN = 0;
 8995              		.loc 1 2943 2 discriminator 4 view .LVU2866
 8996 00e2 B2E0     		b	.L929
 8997              	.LVL1009:
 8998              	.L1220:
2607:src/display.c **** 
 8999              		.loc 1 2607 4 view .LVU2867
 9000 00e4 FFF7FEFF 		bl	wait_for_display
 9001              	.LVL1010:
2613:src/display.c **** 	  goto only_update_x;
 9002              		.loc 1 2613 4 view .LVU2868
 9003 00e8 DFF83092 		ldr	r9, .L1260+56
 9004 00ec FFF7FEFF 		bl	reset_7_segment
 9005              	.LVL1011:
2614:src/display.c **** 	}
 9006              		.loc 1 2614 4 view .LVU2869
 9007 00f0 7F4B     		ldr	r3, .L1260+12
 9008 00f2 0093     		str	r3, [sp]
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9009              		.loc 1 2589 6 is_stmt 0 view .LVU2870
 9010 00f4 2E46     		mov	r6, r5
 9011              	.LVL1012:
 9012              	.L927:
2876:src/display.c **** 	    if (p == NULL || cata) {
 9013              		.loc 1 2876 6 is_stmt 1 view .LVU2871
2876:src/display.c **** 	    if (p == NULL || cata) {
 9014              		.loc 1 2876 10 is_stmt 0 view .LVU2872
 9015 00f6 FFF7FEFF 		bl	get_cmdline
 9016              	.LVL1013:
2877:src/display.c **** 	      if (ShowRegister != -1) {
 9017              		.loc 1 2877 6 is_stmt 1 view .LVU2873
2877:src/display.c **** 	      if (ShowRegister != -1) {
 9018              		.loc 1 2877 9 is_stmt 0 view .LVU2874
 9019 00fa 0546     		mov	r5, r0
 9020 00fc 10B1     		cbz	r0, .L1021
2877:src/display.c **** 	      if (ShowRegister != -1) {
 9021              		.loc 1 2877 20 discriminator 1 view .LVU2875
 9022 00fe BAF1000F 		cmp	r10, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 270


 9023 0102 7BD0     		beq	.L1022
 9024              	.L1021:
2878:src/display.c **** #ifdef INCLUDE_C_LOCK
 9025              		.loc 1 2878 8 is_stmt 1 view .LVU2876
2878:src/display.c **** #ifdef INCLUDE_C_LOCK
 9026              		.loc 1 2878 25 is_stmt 0 view .LVU2877
 9027 0104 7D4D     		ldr	r5, .L1260+24
 9028 0106 2868     		ldr	r0, [r5]
 9029              	.LVL1014:
2878:src/display.c **** #ifdef INCLUDE_C_LOCK
 9030              		.loc 1 2878 11 view .LVU2878
 9031 0108 431C     		adds	r3, r0, #1
 9032 010a 00F03181 		beq	.L1023
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9033              		.loc 1 2880 3 is_stmt 1 view .LVU2879
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9034              		.loc 1 2880 8 is_stmt 0 view .LVU2880
 9035 010e 7C49     		ldr	r1, .L1260+28
 9036 0110 0B68     		ldr	r3, [r1]
 9037 0112 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9038              		.loc 1 2880 6 view .LVU2881
 9039 0116 5107     		lsls	r1, r2, #29
 9040 0118 07D5     		bpl	.L1024
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9041              		.loc 1 2880 17 discriminator 1 view .LVU2882
 9042 011a 93F8DEC7 		ldrb	ip, [r3, #2014]	@ zero_extendqisi2
 9043 011e 0CF00C0E 		and	lr, ip, #12
 9044 0122 BEF10C0F 		cmp	lr, #12
 9045 0126 00F07281 		beq	.L1223
 9046              	.L1024:
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9047              		.loc 1 2896 5 is_stmt 1 view .LVU2883
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9048              		.loc 1 2896 41 is_stmt 0 view .LVU2884
 9049 012a 6428     		cmp	r0, #100
 9050 012c 00F0C780 		beq	.L1224
 9051              	.L1029:
2897:src/display.c **** 		}
 9052              		.loc 1 2897 5 is_stmt 1 view .LVU2885
 9053 0130 0021     		movs	r1, #0
 9054 0132 FFF7FEFF 		bl	format_reg
 9055              	.LVL1015:
2910:src/display.c **** 	      goto finish;
 9056              		.loc 1 2910 6 view .LVU2886
2910:src/display.c **** 	      goto finish;
 9057              		.loc 1 2910 9 is_stmt 0 view .LVU2887
 9058 0136 D8F80030 		ldr	r3, [r8]
 9059 013a 002B     		cmp	r3, #0
 9060 013c CFD0     		beq	.L1216
 9061              	.LVL1016:
 9062              	.L1027:
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9063              		.loc 1 2961 2 is_stmt 1 view .LVU2888
2962:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9064              		.loc 1 2962 2 view .LVU2889
2963:src/display.c **** 	State2.invalid_disp = 0;
ARM GAS  /tmp/ccKZqSeG.s 			page 271


 9065              		.loc 1 2963 2 view .LVU2890
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9066              		.loc 1 2961 17 is_stmt 0 view .LVU2891
 9067 013e 6369     		ldr	r3, [r4, #20]
2967:src/display.c **** 	State2.disp_small = 0;
 9068              		.loc 1 2967 11 view .LVU2892
 9069 0140 0099     		ldr	r1, [sp]
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9070              		.loc 1 2961 17 view .LVU2893
 9071 0142 23F02173 		bic	r3, r3, #42205184
 9072 0146 23F48053 		bic	r3, r3, #4096
2963:src/display.c **** 	State2.invalid_disp = 0;
 9073              		.loc 1 2963 15 view .LVU2894
 9074 014a 0022     		movs	r2, #0
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9075              		.loc 1 2961 17 view .LVU2895
 9076 014c 6361     		str	r3, [r4, #20]
2965:src/display.c **** 	DispMsg = CNULL;
 9077              		.loc 1 2965 15 view .LVU2896
 9078 014e 6423     		movs	r3, #100
2963:src/display.c **** 	State2.invalid_disp = 0;
 9079              		.loc 1 2963 15 view .LVU2897
 9080 0150 6274     		strb	r2, [r4, #17]
2964:src/display.c **** 	ShowRegister = regX_idx;
 9081              		.loc 1 2964 2 is_stmt 1 view .LVU2898
2965:src/display.c **** 	DispMsg = CNULL;
 9082              		.loc 1 2965 2 view .LVU2899
2966:src/display.c **** 	DispPlot = 0;
 9083              		.loc 1 2966 10 is_stmt 0 view .LVU2900
 9084 0152 C9F80020 		str	r2, [r9]
2967:src/display.c **** 	State2.disp_small = 0;
 9085              		.loc 1 2967 11 view .LVU2901
 9086 0156 0A80     		strh	r2, [r1]	@ movhi
2965:src/display.c **** 	DispMsg = CNULL;
 9087              		.loc 1 2965 15 view .LVU2902
 9088 0158 2B60     		str	r3, [r5]
2966:src/display.c **** 	DispPlot = 0;
 9089              		.loc 1 2966 2 is_stmt 1 view .LVU2903
2967:src/display.c **** 	State2.disp_small = 0;
 9090              		.loc 1 2967 2 view .LVU2904
2968:src/display.c **** 	if (WasDataEntry) {
 9091              		.loc 1 2968 2 view .LVU2905
2969:src/display.c **** 	  finish_7_segment();
 9092              		.loc 1 2969 2 view .LVU2906
 9093              	.L1073:
2970:src/display.c **** 	  lcd_refresh();
 9094              		.loc 1 2970 4 view .LVU2907
 9095 015a FFF7FEFF 		bl	finish_7_segment
 9096              	.LVL1017:
2971:src/display.c **** 	}
 9097              		.loc 1 2971 4 view .LVU2908
 9098 015e 694B     		ldr	r3, .L1260+32
 9099 0160 9847     		blx	r3
 9100              	.LVL1018:
 9101              	.L1070:
2976:src/display.c **** #ifdef CONSOLE
 9102              		.loc 1 2976 2 view .LVU2909
ARM GAS  /tmp/ccKZqSeG.s 			page 272


2976:src/display.c **** #ifdef CONSOLE
 9103              		.loc 1 2976 16 is_stmt 0 view .LVU2910
 9104 0162 0023     		movs	r3, #0
 9105 0164 3B80     		strh	r3, [r7]	@ movhi
2980:src/display.c **** #else
 9106              		.loc 1 2980 7 view .LVU2911
 9107 0166 29B0     		add	sp, sp, #164
 9108              		.cfi_remember_state
 9109              		.cfi_def_cfa_offset 36
 9110              		@ sp needed
 9111 0168 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9112              	.LVL1019:
 9113              	.L1219:
 9114              		.cfi_restore_state
2597:src/display.c **** 	  State2.disp_temp = 1;
 9115              		.loc 1 2597 4 is_stmt 1 view .LVU2912
2598:src/display.c **** #ifdef CONSOLE
 9116              		.loc 1 2598 4 view .LVU2913
2602:src/display.c **** 	  return;
 9117              		.loc 1 2602 12 is_stmt 0 view .LVU2914
 9118 016c 664B     		ldr	r3, .L1260+36
2597:src/display.c **** 	  State2.disp_temp = 1;
 9119              		.loc 1 2597 23 view .LVU2915
 9120 016e 22F03002 		bic	r2, r2, #48
 9121 0172 42F02002 		orr	r2, r2, #32
 9122 0176 E275     		strb	r2, [r4, #23]
2602:src/display.c **** 	  return;
 9123              		.loc 1 2602 4 is_stmt 1 view .LVU2916
2602:src/display.c **** 	  return;
 9124              		.loc 1 2602 12 is_stmt 0 view .LVU2917
 9125 0178 1960     		str	r1, [r3]
2603:src/display.c **** 	}
 9126              		.loc 1 2603 4 is_stmt 1 view .LVU2918
2980:src/display.c **** #else
 9127              		.loc 1 2980 7 is_stmt 0 view .LVU2919
 9128 017a 29B0     		add	sp, sp, #164
 9129              		.cfi_remember_state
 9130              		.cfi_def_cfa_offset 36
 9131              		@ sp needed
 9132 017c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9133              	.LVL1020:
 9134              	.L930:
 9135              		.cfi_restore_state
2652:src/display.c **** 	  bp = scopy(bp, "HYP");
 9136              		.loc 1 2652 9 is_stmt 1 view .LVU2920
2652:src/display.c **** 	  bp = scopy(bp, "HYP");
 9137              		.loc 1 2652 12 is_stmt 0 view .LVU2921
 9138 0180 9106     		lsls	r1, r2, #26
 9139 0182 00F10B81 		bmi	.L1225
2664:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9140              		.loc 1 2664 9 is_stmt 1 view .LVU2922
2664:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9141              		.loc 1 2664 12 is_stmt 0 view .LVU2923
 9142 0186 D007     		lsls	r0, r2, #31
 9143 0188 00F16981 		bmi	.L1226
2679:src/display.c **** 	  /* Commands with arguments */
 9144              		.loc 1 2679 9 is_stmt 1 view .LVU2924
ARM GAS  /tmp/ccKZqSeG.s 			page 273


2679:src/display.c **** 	  /* Commands with arguments */
 9145              		.loc 1 2679 13 is_stmt 0 view .LVU2925
 9146 018c A07D     		ldrb	r0, [r4, #22]	@ zero_extendqisi2
2679:src/display.c **** 	  /* Commands with arguments */
 9147              		.loc 1 2679 12 view .LVU2926
 9148 018e 8106     		lsls	r1, r0, #26
 9149 0190 40F10F81 		bpl	.L942
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9150              		.loc 1 2682 4 is_stmt 1 view .LVU2927
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9151              		.loc 1 2682 8 is_stmt 0 view .LVU2928
 9152 0194 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9153              		.loc 1 2682 7 view .LVU2929
 9154 0196 4D2A     		cmp	r2, #77
 9155 0198 00F09581 		beq	.L943
2682:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9156              		.loc 1 2682 28 discriminator 1 view .LVU2930
 9157 019c 02F16C01 		add	r1, r2, #108
 9158 01a0 C9B2     		uxtb	r1, r1
 9159 01a2 0129     		cmp	r1, #1
 9160 01a4 40F28F81 		bls	.L943
2587:src/display.c **** 	const char *p;
 9161              		.loc 1 2587 17 view .LVU2931
 9162 01a8 1EA8     		add	r0, sp, #120
 9163              	.LVL1021:
 9164              	.L944:
2685:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9165              		.loc 1 2685 4 is_stmt 1 view .LVU2932
2685:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9166              		.loc 1 2685 35 is_stmt 0 view .LVU2933
 9167 01aa 4FF0060C 		mov	ip, #6
 9168 01ae 5749     		ldr	r1, .L1260+40
 9169 01b0 0093     		str	r3, [sp]
 9170 01b2 0CEB0212 		add	r2, ip, r2, lsl #4
2685:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9171              		.loc 1 2685 9 view .LVU2934
 9172 01b6 1144     		add	r1, r1, r2
 9173 01b8 FFF7FEFF 		bl	scopy
 9174              	.LVL1022:
2686:src/display.c **** 	  if (State2.dot) {
 9175              		.loc 1 2686 4 is_stmt 1 view .LVU2935
2686:src/display.c **** 	  if (State2.dot) {
 9176              		.loc 1 2686 9 is_stmt 0 view .LVU2936
 9177 01bc 544A     		ldr	r2, .L1260+44
 9178 01be 94F915C0 		ldrsb	ip, [r4, #21]
 9179 01c2 5449     		ldr	r1, .L1260+48
 9180 01c4 11EA2C01 		ands	r1, r1, ip, asr #32
 9181 01c8 38BF     		it	cc
 9182 01ca 1146     		movcc	r1, r2
 9183 01cc FFF7FEFF 		bl	scopy
 9184              	.LVL1023:
2687:src/display.c **** 	    *bp++ = 's';
 9185              		.loc 1 2687 8 view .LVU2937
 9186 01d0 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 9187              	.LVL1024:
2687:src/display.c **** 	    *bp++ = 's';
ARM GAS  /tmp/ccKZqSeG.s 			page 274


 9188              		.loc 1 2687 4 is_stmt 1 view .LVU2938
2687:src/display.c **** 	    *bp++ = 's';
 9189              		.loc 1 2687 7 is_stmt 0 view .LVU2939
 9190 01d2 009B     		ldr	r3, [sp]
 9191 01d4 12F0400F 		tst	r2, #64
 9192 01d8 00F07D81 		beq	.L946
2688:src/display.c **** 	    *bp++ = '_';
 9193              		.loc 1 2688 6 is_stmt 1 view .LVU2940
 9194              	.LVL1025:
2688:src/display.c **** 	    *bp++ = '_';
 9195              		.loc 1 2688 12 is_stmt 0 view .LVU2941
 9196 01dc 7322     		movs	r2, #115
2689:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9197              		.loc 1 2689 12 view .LVU2942
 9198 01de 5F23     		movs	r3, #95
2688:src/display.c **** 	    *bp++ = '_';
 9199              		.loc 1 2688 12 view .LVU2943
 9200 01e0 0270     		strb	r2, [r0]
2689:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9201              		.loc 1 2689 6 is_stmt 1 view .LVU2944
 9202              	.LVL1026:
2689:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9203              		.loc 1 2689 12 is_stmt 0 view .LVU2945
 9204 01e2 4370     		strb	r3, [r0, #1]
 9205              	.LVL1027:
 9206              	.L970:
2792:src/display.c **** 	    set_status_top(buf);
 9207              		.loc 1 2792 4 is_stmt 1 view .LVU2946
2792:src/display.c **** 	    set_status_top(buf);
 9208              		.loc 1 2792 7 is_stmt 0 view .LVU2947
 9209 01e4 002D     		cmp	r5, #0
 9210 01e6 00F0F680 		beq	.L937
 9211              	.L1208:
2793:src/display.c **** 	    no_status_top = 1;
 9212              		.loc 1 2793 6 is_stmt 1 view .LVU2948
 9213              	.LVL1028:
 9214              	.LBB560:
 9215              	.LBI560:
3524:src/display.c **** 	if (no_status_top) return;
 9216              		.loc 1 3524 19 view .LVU2949
 9217              	.LBB561:
3525:src/display.c **** 	if (State2.runmode) {
 9218              		.loc 1 3525 2 view .LVU2950
3525:src/display.c **** 	if (State2.runmode) {
 9219              		.loc 1 3525 5 is_stmt 0 view .LVU2951
 9220 01ea B7F90030 		ldrsh	r3, [r7]
 9221 01ee 002B     		cmp	r3, #0
 9222 01f0 7FF43FAF 		bne	.L933
 9223              	.LBE561:
 9224              	.LBE560:
 9225              	.LBB562:
 9226              	.LBB563:
 9227 01f4 1EA8     		add	r0, sp, #120
 9228              	.LVL1029:
3525:src/display.c **** 	if (State2.runmode) {
 9229              		.loc 1 3525 5 view .LVU2952
 9230 01f6 FFF7FEFF 		bl	set_status_top.part.0
ARM GAS  /tmp/ccKZqSeG.s 			page 275


 9231              	.LVL1030:
3525:src/display.c **** 	if (State2.runmode) {
 9232              		.loc 1 3525 5 view .LVU2953
 9233 01fa 3AE7     		b	.L933
 9234              	.LVL1031:
 9235              	.L1022:
3525:src/display.c **** 	if (State2.runmode) {
 9236              		.loc 1 3525 5 view .LVU2954
 9237              	.LBE563:
 9238              	.LBE562:
2907:src/display.c **** 	      x_disp = 1;
 9239              		.loc 1 2907 8 is_stmt 1 view .LVU2955
 9240              	.LBB564:
 9241              	.LBI564:
1254:src/display.c ****       int i;
 9242              		.loc 1 1254 17 view .LVU2956
 9243              	.LBB565:
1255:src/display.c ****       int gotdot = -1;
 9244              		.loc 1 1255 7 view .LVU2957
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9245              		.loc 1 1256 7 view .LVU2958
1258:src/display.c **** #endif
 9246              		.loc 1 1258 7 view .LVU2959
1262:src/display.c **** #endif
 9247              		.loc 1 1262 7 view .LVU2960
1265:src/display.c **** 	SET_MANT_SIGN;
 9248              		.loc 1 1265 7 view .LVU2961
1265:src/display.c **** 	SET_MANT_SIGN;
 9249              		.loc 1 1265 10 is_stmt 0 view .LVU2962
 9250 01fc 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9251 01fe 2D2B     		cmp	r3, #45
 9252 0200 00F08B81 		beq	.L1227
 9253              	.LVL1032:
 9254              	.L1032:
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9255              		.loc 1 1270 7 is_stmt 1 view .LVU2963
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9256              		.loc 1 1270 11 is_stmt 0 view .LVU2964
 9257 0204 3E4B     		ldr	r3, .L1260+28
 9258 0206 1B68     		ldr	r3, [r3]
 9259 0208 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1270:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9260              		.loc 1 1270 10 view .LVU2965
 9261 020c 13F0010B 		ands	fp, r3, #1
 9262 0210 00F03581 		beq	.L1033
 9263              	.LVL1033:
1271:src/display.c **** 	  set_dig(i, *p);
 9264              		.loc 1 1271 12 is_stmt 1 view .LVU2966
 9265 0214 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1271:src/display.c **** 	  set_dig(i, *p);
 9266              		.loc 1 1271 8 is_stmt 0 view .LVU2967
 9267 0216 4FF0000A 		mov	r10, #0
1271:src/display.c **** 	  set_dig(i, *p);
 9268              		.loc 1 1271 2 view .LVU2968
 9269 021a 41B1     		cbz	r1, .L1035
 9270              	.LVL1034:
 9271              	.L1034:
ARM GAS  /tmp/ccKZqSeG.s 			page 276


1272:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9272              		.loc 1 1272 4 is_stmt 1 view .LVU2969
 9273 021c 5046     		mov	r0, r10
 9274 021e FFF7FEFF 		bl	set_dig
 9275              	.LVL1035:
1273:src/display.c **** 	}
 9276              		.loc 1 1273 4 view .LVU2970
1271:src/display.c **** 	  set_dig(i, *p);
 9277              		.loc 1 1271 12 is_stmt 0 view .LVU2971
 9278 0222 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9279              	.LVL1036:
1273:src/display.c **** 	}
 9280              		.loc 1 1273 6 view .LVU2972
 9281 0226 0AF1090A 		add	r10, r10, #9
 9282              	.LVL1037:
1271:src/display.c **** 	  set_dig(i, *p);
 9283              		.loc 1 1271 24 is_stmt 1 view .LVU2973
1271:src/display.c **** 	  set_dig(i, *p);
 9284              		.loc 1 1271 12 view .LVU2974
1271:src/display.c **** 	  set_dig(i, *p);
 9285              		.loc 1 1271 2 is_stmt 0 view .LVU2975
 9286 022a 0029     		cmp	r1, #0
 9287 022c F6D1     		bne	.L1034
 9288              	.LVL1038:
 9289              	.L1035:
1275:src/display.c ****       } else {
 9290              		.loc 1 1275 2 is_stmt 1 view .LVU2976
 9291 022e FFF7FEFF 		bl	carry_overflow
 9292              	.LVL1039:
1275:src/display.c ****       } else {
 9293              		.loc 1 1275 2 is_stmt 0 view .LVU2977
 9294              	.LBE565:
 9295              	.LBE564:
2910:src/display.c **** 	      goto finish;
 9296              		.loc 1 2910 6 is_stmt 1 view .LVU2978
2910:src/display.c **** 	      goto finish;
 9297              		.loc 1 2910 9 is_stmt 0 view .LVU2979
 9298 0232 D8F80030 		ldr	r3, [r8]
 9299 0236 314D     		ldr	r5, .L1260+24
 9300 0238 002B     		cmp	r3, #0
 9301 023a 80D1     		bne	.L1027
 9302              	.LVL1040:
 9303              	.L1028:
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9304              		.loc 1 2942 2 is_stmt 1 view .LVU2980
 9305 023c FFF7FEFF 		bl	set_annunciators
 9306              	.LVL1041:
2943:src/display.c **** 	  ShowRPN = 0;
 9307              		.loc 1 2943 2 view .LVU2981
2943:src/display.c **** 	  ShowRPN = 0;
 9308              		.loc 1 2943 50 is_stmt 0 view .LVU2982
 9309 0240 D9F80030 		ldr	r3, [r9]
 9310 0244 002B     		cmp	r3, #0
 9311 0246 00F0D280 		beq	.L1228
 9312              	.LVL1042:
 9313              	.L929:
2944:src/display.c **** 	  dot(RPN, 0);
ARM GAS  /tmp/ccKZqSeG.s 			page 277


 9314              		.loc 1 2944 4 is_stmt 1 view .LVU2983
2944:src/display.c **** 	  dot(RPN, 0);
 9315              		.loc 1 2944 12 is_stmt 0 view .LVU2984
 9316 024a DFF8BCA0 		ldr	r10, .L1260+36
 9317 024e 0023     		movs	r3, #0
 9318              	.LBB591:
 9319              	.LBB592:
 285:src/display.c **** }
 9320              		.loc 1 285 8 view .LVU2985
 9321 0250 8D20     		movs	r0, #141
 9322              	.LBE592:
 9323              	.LBE591:
2944:src/display.c **** 	  dot(RPN, 0);
 9324              		.loc 1 2944 12 view .LVU2986
 9325 0252 CAF80030 		str	r3, [r10]
2945:src/display.c **** 	}
 9326              		.loc 1 2945 4 is_stmt 1 view .LVU2987
 9327              	.LVL1043:
 9328              	.LBB594:
 9329              	.LBI591:
 283:src/display.c ****   if (on)	set_dot(n);
 9330              		.loc 1 283 6 view .LVU2988
 9331              	.LBB593:
 284:src/display.c ****   else	clr_dot(n);
 9332              		.loc 1 284 3 view .LVU2989
 285:src/display.c **** }
 9333              		.loc 1 285 8 view .LVU2990
 9334 0256 FFF7FEFF 		bl	clr_dot
 9335              	.LVL1044:
 9336              	.L1064:
 285:src/display.c **** }
 9337              		.loc 1 285 8 is_stmt 0 view .LVU2991
 9338              	.LBE593:
 9339              	.LBE594:
2948:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9340              		.loc 1 2948 2 is_stmt 1 view .LVU2992
2949:src/display.c **** 
 9341              		.loc 1 2949 4 is_stmt 0 view .LVU2993
 9342 025a DAF80030 		ldr	r3, [r10]
 9343 025e 002B     		cmp	r3, #0
 9344 0260 3ED1     		bne	.L1089
2948:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9345              		.loc 1 2948 31 view .LVU2994
 9346 0262 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9347 0264 12F04003 		ands	r3, r2, #64
 9348 0268 07D0     		beq	.L1065
2949:src/display.c **** 
 9349              		.loc 1 2949 8 view .LVU2995
 9350 026a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2949:src/display.c **** 
 9351              		.loc 1 2949 4 view .LVU2996
 9352 026c 1B07     		lsls	r3, r3, #28
 9353 026e 7DD5     		bpl	.L1091
2949:src/display.c **** 
 9354              		.loc 1 2949 30 discriminator 3 view .LVU2997
 9355 0270 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9356 0272 012B     		cmp	r3, #1
ARM GAS  /tmp/ccKZqSeG.s 			page 278


 9357 0274 01D0     		beq	.L1065
2949:src/display.c **** 
 9358              		.loc 1 2949 60 discriminator 5 view .LVU2998
 9359 0276 C2F38003 		ubfx	r3, r2, #2, #1
 9360              	.L1065:
2948:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9361              		.loc 1 2948 19 discriminator 9 view .LVU2999
 9362 027a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9363 027c 63F34512 		bfi	r2, r3, #5, #1
 9364 0280 E275     		strb	r2, [r4, #23]
2952:src/display.c **** 	  annunciators();
 9365              		.loc 1 2952 2 is_stmt 1 discriminator 9 view .LVU3000
2952:src/display.c **** 	  annunciators();
 9366              		.loc 1 2952 5 is_stmt 0 discriminator 9 view .LVU3001
 9367 0282 46B3     		cbz	r6, .L1066
2952:src/display.c **** 	  annunciators();
 9368              		.loc 1 2952 36 discriminator 1 view .LVU3002
 9369 0284 D3B2     		uxtb	r3, r2
2952:src/display.c **** 	  annunciators();
 9370              		.loc 1 2952 13 discriminator 1 view .LVU3003
 9371 0286 03F02103 		and	r3, r3, #33
 9372 028a 202B     		cmp	r3, #32
 9373 028c 23D0     		beq	.L1066
 9374              	.L1067:
2953:src/display.c ****  	State2.hms = 0;
 9375              		.loc 1 2953 4 is_stmt 1 view .LVU3004
 9376 028e FFF7FEFF 		bl	annunciators
 9377              	.LVL1045:
 9378              	.L1068:
2954:src/display.c **** #else
 9379              		.loc 1 2954 3 view .LVU3005
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9380              		.loc 1 2961 17 is_stmt 0 view .LVU3006
 9381 0292 6369     		ldr	r3, [r4, #20]
2967:src/display.c **** 	State2.disp_small = 0;
 9382              		.loc 1 2967 11 view .LVU3007
 9383 0294 0098     		ldr	r0, [sp]
 9384 0296 D8F80010 		ldr	r1, [r8]
 9385              	.LDL1:
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9386              		.loc 1 2961 2 is_stmt 1 view .LVU3008
2962:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9387              		.loc 1 2962 2 view .LVU3009
2963:src/display.c **** 	State2.invalid_disp = 0;
 9388              		.loc 1 2963 2 view .LVU3010
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9389              		.loc 1 2961 17 is_stmt 0 view .LVU3011
 9390 029a 23F06173 		bic	r3, r3, #58982400
 9391 029e 23F48053 		bic	r3, r3, #4096
2963:src/display.c **** 	State2.invalid_disp = 0;
 9392              		.loc 1 2963 15 view .LVU3012
 9393 02a2 0022     		movs	r2, #0
2961:src/display.c **** 	State2.disp_as_alpha = 0;
 9394              		.loc 1 2961 17 view .LVU3013
 9395 02a4 6361     		str	r3, [r4, #20]
2965:src/display.c **** 	DispMsg = CNULL;
 9396              		.loc 1 2965 15 view .LVU3014
ARM GAS  /tmp/ccKZqSeG.s 			page 279


 9397 02a6 6423     		movs	r3, #100
2963:src/display.c **** 	State2.invalid_disp = 0;
 9398              		.loc 1 2963 15 view .LVU3015
 9399 02a8 6274     		strb	r2, [r4, #17]
2964:src/display.c **** 	ShowRegister = regX_idx;
 9400              		.loc 1 2964 2 is_stmt 1 view .LVU3016
2965:src/display.c **** 	DispMsg = CNULL;
 9401              		.loc 1 2965 2 view .LVU3017
2966:src/display.c **** 	DispPlot = 0;
 9402              		.loc 1 2966 10 is_stmt 0 view .LVU3018
 9403 02aa C9F80020 		str	r2, [r9]
2967:src/display.c **** 	State2.disp_small = 0;
 9404              		.loc 1 2967 11 view .LVU3019
 9405 02ae 0280     		strh	r2, [r0]	@ movhi
2965:src/display.c **** 	DispMsg = CNULL;
 9406              		.loc 1 2965 15 view .LVU3020
 9407 02b0 2B60     		str	r3, [r5]
2966:src/display.c **** 	DispPlot = 0;
 9408              		.loc 1 2966 2 is_stmt 1 view .LVU3021
2967:src/display.c **** 	State2.disp_small = 0;
 9409              		.loc 1 2967 2 view .LVU3022
2968:src/display.c **** 	if (WasDataEntry) {
 9410              		.loc 1 2968 2 view .LVU3023
2969:src/display.c **** 	  finish_7_segment();
 9411              		.loc 1 2969 2 view .LVU3024
2969:src/display.c **** 	  finish_7_segment();
 9412              		.loc 1 2969 5 is_stmt 0 view .LVU3025
 9413 02b2 0029     		cmp	r1, #0
 9414 02b4 7FF451AF 		bne	.L1073
2974:src/display.c **** 	}
 9415              		.loc 1 2974 4 is_stmt 1 view .LVU3026
 9416 02b8 FFF7FEFF 		bl	finish_display
 9417              	.LVL1046:
 9418 02bc 51E7     		b	.L1070
 9419              	.LVL1047:
 9420              	.L1224:
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9421              		.loc 1 2896 44 is_stmt 0 discriminator 1 view .LVU3027
 9422 02be E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
2896:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9423              		.loc 1 2896 41 discriminator 1 view .LVU3028
 9424 02c0 11F00101 		ands	r1, r1, #1
 9425 02c4 7FF434AF 		bne	.L1029
 9426              	.LVL1048:
2897:src/display.c **** 		}
 9427              		.loc 1 2897 5 is_stmt 1 view .LVU3029
 9428 02c8 FFF7FEFF 		bl	format_reg
 9429              	.LVL1049:
2910:src/display.c **** 	      goto finish;
 9430              		.loc 1 2910 6 view .LVU3030
2910:src/display.c **** 	      goto finish;
 9431              		.loc 1 2910 9 is_stmt 0 view .LVU3031
 9432 02cc D8F80030 		ldr	r3, [r8]
 9433 02d0 002B     		cmp	r3, #0
 9434 02d2 B3D0     		beq	.L1028
 9435 02d4 33E7     		b	.L1027
 9436              	.LVL1050:
ARM GAS  /tmp/ccKZqSeG.s 			page 280


 9437              	.L1066:
2952:src/display.c **** 	  annunciators();
 9438              		.loc 1 2952 52 discriminator 3 view .LVU3032
 9439 02d6 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9440 02d8 13F0C00F 		tst	r3, #192
 9441 02dc D9D0     		beq	.L1068
 9442 02de D6E7     		b	.L1067
 9443              	.L1089:
 9444 02e0 0023     		movs	r3, #0
 9445 02e2 CAE7     		b	.L1065
 9446              	.L1261:
 9447              		.align	2
 9448              	.L1260:
 9449 02e4 00000000 		.word	StateWhileOn
 9450 02e8 00000000 		.word	.LANCHOR15
 9451 02ec 00000000 		.word	.LANCHOR18
 9452 02f0 00000000 		.word	DispPlot
 9453 02f4 00000000 		.word	ProgFree
 9454 02f8 00000000 		.word	.LANCHOR16
 9455 02fc 00000000 		.word	ShowRegister
 9456 0300 00000000 		.word	main_ram
 9457 0304 31020008 		.word	134218289
 9458 0308 00000000 		.word	ShowRPN
 9459 030c 00000000 		.word	argcmds
 9460 0310 04000000 		.word	.LC23
 9461 0314 00000000 		.word	.LC22
 9462 0318 00000000 		.word	WasDataEntry
 9463 031c 00000000 		.word	DispMsg
 9464              	.LVL1051:
 9465              	.L1221:
 9466              	.LBB595:
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9467              		.loc 1 2636 4 is_stmt 1 view .LVU3033
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9468              		.loc 1 2636 9 is_stmt 0 view .LVU3034
 9469 0320 A64B     		ldr	r3, .L1262
 9470 0322 CDF85F60 		str	r6, [sp, #95]	@ unaligned
2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9471              		.loc 1 2637 4 is_stmt 1 view .LVU3035
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9472              		.loc 1 2636 9 is_stmt 0 view .LVU3036
 9473 0326 93E80700 		ldm	r3, {r0, r1, r2}
 9474 032a 15AB     		add	r3, sp, #84
 9475 032c 03C3     		stmia	r3!, {r0, r1}
 9476 032e 23F8022B 		strh	r2, [r3], #2	@ movhi
2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9477              		.loc 1 2637 4 view .LVU3037
 9478 0332 3146     		mov	r1, r6
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9479              		.loc 1 2636 9 view .LVU3038
 9480 0334 120C     		lsrs	r2, r2, #16
2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9481              		.loc 1 2637 4 view .LVU3039
 9482 0336 A248     		ldr	r0, .L1262+4
2636:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9483              		.loc 1 2636 9 view .LVU3040
 9484 0338 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccKZqSeG.s 			page 281


2637:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9485              		.loc 1 2637 4 view .LVU3041
 9486 033a FFF7FEFF 		bl	set_digits_string
 9487              	.LVL1052:
2638:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
 9488              		.loc 1 2638 4 is_stmt 1 view .LVU3042
 9489              	.LBB596:
 9490              	.LBI596:
 339:src/display.c ****   if (res) *res++ = ch;
 9491              		.loc 1 339 14 view .LVU3043
 9492              	.LBB597:
 340:src/display.c ****   else	set_dig(base, ch);
 9493              		.loc 1 340 3 view .LVU3044
 341:src/display.c ****   return res;
 9494              		.loc 1 341 8 view .LVU3045
 9495 033e 7221     		movs	r1, #114
 9496 0340 6C20     		movs	r0, #108
 9497 0342 FFF7FEFF 		bl	set_dig
 9498              	.LVL1053:
 342:src/display.c **** }
 9499              		.loc 1 342 3 view .LVU3046
 342:src/display.c **** }
 9500              		.loc 1 342 3 is_stmt 0 view .LVU3047
 9501              	.LBE597:
 9502              	.LBE596:
2639:src/display.c **** 	  set_status(vers);
 9503              		.loc 1 2639 4 is_stmt 1 view .LVU3048
 9504 0346 9F49     		ldr	r1, .L1262+8
 9505 0348 DFF8A092 		ldr	r9, .L1262+48
 9506 034c 9E4D     		ldr	r5, .L1262+12
 9507 034e 0422     		movs	r2, #4
 9508 0350 0DF15E00 		add	r0, sp, #94
 9509 0354 FFF7FEFF 		bl	xcopy
 9510              	.LVL1054:
2640:src/display.c **** 	  skip = 1;
 9511              		.loc 1 2640 4 view .LVU3049
 9512 0358 15A8     		add	r0, sp, #84
 9513 035a FFF7FEFF 		bl	set_status
 9514              	.LVL1055:
2641:src/display.c **** 	  goto nostk;
 9515              		.loc 1 2641 4 view .LVU3050
2642:src/display.c **** 	} else if (State2.confirm) {
 9516              		.loc 1 2642 4 view .LVU3051
2642:src/display.c **** 	} else if (State2.confirm) {
 9517              		.loc 1 2642 4 is_stmt 0 view .LVU3052
 9518              	.LBE595:
2872:src/display.c **** 	if (!skip) {
 9519              		.loc 1 2872 2 is_stmt 1 view .LVU3053
 9520 035e 9B4B     		ldr	r3, .L1262+16
 9521 0360 0093     		str	r3, [sp]
 9522 0362 FFF7FEFF 		bl	show_flags
 9523              	.LVL1056:
2873:src/display.c **** 	  if (State2.runmode) {
 9524              		.loc 1 2873 2 view .LVU3054
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9525              		.loc 1 2942 2 view .LVU3055
 9526 0366 FFF7FEFF 		bl	set_annunciators
ARM GAS  /tmp/ccKZqSeG.s 			page 282


 9527              	.LVL1057:
2943:src/display.c **** 	  ShowRPN = 0;
 9528              		.loc 1 2943 2 view .LVU3056
 9529 036a 6EE7     		b	.L929
 9530              	.LVL1058:
 9531              	.L1091:
2943:src/display.c **** 	  ShowRPN = 0;
 9532              		.loc 1 2943 2 is_stmt 0 view .LVU3057
 9533 036c 0123     		movs	r3, #1
 9534 036e 84E7     		b	.L1065
 9535              	.LVL1059:
 9536              	.L1023:
2905:src/display.c **** 	    } else {
 9537              		.loc 1 2905 3 is_stmt 1 view .LVU3058
 9538 0370 9748     		ldr	r0, .L1262+20
 9539 0372 2421     		movs	r1, #36
 9540 0374 FFF7FEFF 		bl	set_digits_string
 9541              	.LVL1060:
2910:src/display.c **** 	      goto finish;
 9542              		.loc 1 2910 6 view .LVU3059
2910:src/display.c **** 	      goto finish;
 9543              		.loc 1 2910 9 is_stmt 0 view .LVU3060
 9544 0378 D8F80030 		ldr	r3, [r8]
 9545 037c 002B     		cmp	r3, #0
 9546 037e 3FF4AEAE 		beq	.L1216
 9547 0382 DCE6     		b	.L1027
 9548              	.LVL1061:
 9549              	.L931:
2650:src/display.c **** 	  }
 9550              		.loc 1 2650 6 is_stmt 1 view .LVU3061
 9551 0384 914B     		ldr	r3, .L1262+16
 9552 0386 9348     		ldr	r0, .L1262+24
 9553 0388 0093     		str	r3, [sp]
 9554 038a DFF86092 		ldr	r9, .L1262+48
 9555 038e FFF7FEFF 		bl	set_status
 9556              	.LVL1062:
2870:src/display.c ****       nostk:
 9557              		.loc 1 2870 2 view .LVU3062
 9558 0392 FFF7FEFF 		bl	show_stack
 9559              	.LVL1063:
2872:src/display.c **** 	if (!skip) {
 9560              		.loc 1 2872 2 view .LVU3063
 9561 0396 FFF7FEFF 		bl	show_flags
 9562              	.LVL1064:
2873:src/display.c **** 	  if (State2.runmode) {
 9563              		.loc 1 2873 2 view .LVU3064
 9564 039a 74E6     		b	.L934
 9565              	.L1225:
2653:src/display.c **** 	  if (! State2.dot)
 9566              		.loc 1 2653 4 view .LVU3065
2653:src/display.c **** 	  if (! State2.dot)
 9567              		.loc 1 2653 9 is_stmt 0 view .LVU3066
 9568 039c 8E49     		ldr	r1, .L1262+28
 9569 039e 1EA8     		add	r0, sp, #120
 9570              	.LVL1065:
2653:src/display.c **** 	  if (! State2.dot)
 9571              		.loc 1 2653 9 view .LVU3067
ARM GAS  /tmp/ccKZqSeG.s 			page 283


 9572 03a0 FFF7FEFF 		bl	scopy
 9573              	.LVL1066:
2654:src/display.c **** 	    *bp++ = '\235';
 9574              		.loc 1 2654 8 view .LVU3068
 9575 03a4 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9576              	.LVL1067:
2654:src/display.c **** 	    *bp++ = '\235';
 9577              		.loc 1 2654 4 is_stmt 1 view .LVU3069
2654:src/display.c **** 	    *bp++ = '\235';
 9578              		.loc 1 2654 7 is_stmt 0 view .LVU3070
 9579 03a6 5B06     		lsls	r3, r3, #25
 9580 03a8 3FF51CAF 		bmi	.L970
2655:src/display.c **** 	  if (yreg_enabled) {
 9581              		.loc 1 2655 6 is_stmt 1 view .LVU3071
 9582              	.LVL1068:
2655:src/display.c **** 	  if (yreg_enabled) {
 9583              		.loc 1 2655 12 is_stmt 0 view .LVU3072
 9584 03ac 9D23     		movs	r3, #157
 9585 03ae 0370     		strb	r3, [r0]
 9586 03b0 18E7     		b	.L970
 9587              	.LVL1069:
 9588              	.L942:
2717:src/display.c **** 	  *bp++ = 'x';
 9589              		.loc 1 2717 9 is_stmt 1 view .LVU3073
2717:src/display.c **** 	  *bp++ = 'x';
 9590              		.loc 1 2717 19 is_stmt 0 view .LVU3074
 9591 03b2 E17B     		ldrb	r1, [r4, #15]	@ zero_extendqisi2
2717:src/display.c **** 	  *bp++ = 'x';
 9592              		.loc 1 2717 12 view .LVU3075
 9593 03b4 0729     		cmp	r1, #7
 9594 03b6 00F05881 		beq	.L953
2718:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9595              		.loc 1 2718 4 is_stmt 1 view .LVU3076
 9596              	.LVL1070:
2719:src/display.c **** 	  *bp++ = '_';
 9597              		.loc 1 2719 33 is_stmt 0 view .LVU3077
 9598 03ba 884B     		ldr	r3, .L1262+32
2719:src/display.c **** 	  *bp++ = '_';
 9599              		.loc 1 2719 10 view .LVU3078
 9600 03bc 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 9601 03be 8DF87930 		strb	r3, [sp, #121]
2718:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9602              		.loc 1 2718 10 view .LVU3079
 9603 03c2 7822     		movs	r2, #120
2720:src/display.c **** 	  *bp++ = '?';
 9604              		.loc 1 2720 10 view .LVU3080
 9605 03c4 43F65F73 		movw	r3, #16223
2718:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9606              		.loc 1 2718 10 view .LVU3081
 9607 03c8 8DF87820 		strb	r2, [sp, #120]
2719:src/display.c **** 	  *bp++ = '_';
 9608              		.loc 1 2719 4 is_stmt 1 view .LVU3082
 9609              	.LVL1071:
2720:src/display.c **** 	  *bp++ = '?';
 9610              		.loc 1 2720 4 view .LVU3083
2721:src/display.c **** 	  if (yreg_enabled) {
 9611              		.loc 1 2721 4 view .LVU3084
ARM GAS  /tmp/ccKZqSeG.s 			page 284


2720:src/display.c **** 	  *bp++ = '?';
 9612              		.loc 1 2720 10 is_stmt 0 view .LVU3085
 9613 03cc ADF87A30 		strh	r3, [sp, #122]	@ movhi
2722:src/display.c **** 	    set_status_top(buf);
 9614              		.loc 1 2722 4 is_stmt 1 view .LVU3086
2722:src/display.c **** 	    set_status_top(buf);
 9615              		.loc 1 2722 7 is_stmt 0 view .LVU3087
 9616 03d0 002D     		cmp	r5, #0
 9617 03d2 7FF40AAF 		bne	.L1208
 9618              	.LVL1072:
 9619              	.L937:
2662:src/display.c **** 	  }
 9620              		.loc 1 2662 6 is_stmt 1 view .LVU3088
 9621 03d6 1EA8     		add	r0, sp, #120
 9622 03d8 FFF7FEFF 		bl	set_status
 9623              	.LVL1073:
2870:src/display.c ****       nostk:
 9624              		.loc 1 2870 2 view .LVU3089
 9625 03dc 7B4B     		ldr	r3, .L1262+16
 9626 03de 0093     		str	r3, [sp]
 9627 03e0 DFF80892 		ldr	r9, .L1262+48
 9628 03e4 FFF7FEFF 		bl	show_stack
 9629              	.LVL1074:
2872:src/display.c **** 	if (!skip) {
 9630              		.loc 1 2872 2 view .LVU3090
 9631 03e8 FFF7FEFF 		bl	show_flags
 9632              	.LVL1075:
2873:src/display.c **** 	  if (State2.runmode) {
 9633              		.loc 1 2873 2 view .LVU3091
 9634 03ec 4BE6     		b	.L934
 9635              	.LVL1076:
 9636              	.L1228:
2943:src/display.c **** 	  ShowRPN = 0;
 9637              		.loc 1 2943 69 is_stmt 0 discriminator 3 view .LVU3092
 9638 03ee 009B     		ldr	r3, [sp]
 9639 03f0 B3F90030 		ldrsh	r3, [r3]
 9640 03f4 002B     		cmp	r3, #0
 9641 03f6 7FF428AF 		bne	.L929
2943:src/display.c **** 	  ShowRPN = 0;
 9642              		.loc 1 2943 81 discriminator 4 view .LVU3093
 9643 03fa A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9644 03fc 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9645 03fe 03F00403 		and	r3, r3, #4
 9646 0402 1343     		orrs	r3, r3, r2
 9647 0404 7FF421AF 		bne	.L929
 9648 0408 DFF8E4A1 		ldr	r10, .L1262+52
 9649 040c 25E7     		b	.L1064
 9650              	.LVL1077:
 9651              	.L1223:
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9652              		.loc 1 2880 34 discriminator 2 view .LVU3094
 9653 040e 1207     		lsls	r2, r2, #28
 9654 0410 3FF58BAE 		bmi	.L1024
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9655              		.loc 1 2880 49 discriminator 3 view .LVU3095
 9656 0414 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
2880:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
ARM GAS  /tmp/ccKZqSeG.s 			page 285


 9657              		.loc 1 2880 37 discriminator 3 view .LVU3096
 9658 0418 13F0080A 		ands	r10, r3, #8
 9659 041c 7FF485AE 		bne	.L1024
2881:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9660              		.loc 1 2881 5 is_stmt 1 view .LVU3097
2881:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9661              		.loc 1 2881 8 is_stmt 0 view .LVU3098
 9662 0420 1CF0100F 		tst	ip, #16
 9663 0424 40F0D181 		bne	.L1229
 9664              	.L1025:
2885:src/display.c **** 		    State2.hms = 0;
 9665              		.loc 1 2885 5 is_stmt 1 view .LVU3099
2885:src/display.c **** 		    State2.hms = 0;
 9666              		.loc 1 2885 9 is_stmt 0 view .LVU3100
 9667 0428 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2885:src/display.c **** 		    State2.hms = 0;
 9668              		.loc 1 2885 8 view .LVU3101
 9669 042a 13F00101 		ands	r1, r3, #1
 9670 042e 00F07481 		beq	.L1026
2886:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9671              		.loc 1 2886 7 is_stmt 1 view .LVU3102
2886:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9672              		.loc 1 2886 18 is_stmt 0 view .LVU3103
 9673 0432 6FF30003 		bfc	r3, #0, #1
2887:src/display.c **** 		    State2.hms = 1;
 9674              		.loc 1 2887 7 view .LVU3104
 9675 0436 0021     		movs	r1, #0
 9676 0438 6E20     		movs	r0, #110
2886:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9677              		.loc 1 2886 18 view .LVU3105
 9678 043a E375     		strb	r3, [r4, #23]
2887:src/display.c **** 		    State2.hms = 1;
 9679              		.loc 1 2887 7 is_stmt 1 view .LVU3106
 9680 043c FFF7FEFF 		bl	format_reg
 9681              	.LVL1078:
2888:src/display.c **** 		  }
 9682              		.loc 1 2888 7 view .LVU3107
2888:src/display.c **** 		  }
 9683              		.loc 1 2888 18 is_stmt 0 view .LVU3108
 9684 0440 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2910:src/display.c **** 	      goto finish;
 9685              		.loc 1 2910 9 view .LVU3109
 9686 0442 D8F80020 		ldr	r2, [r8]
2888:src/display.c **** 		  }
 9687              		.loc 1 2888 18 view .LVU3110
 9688 0446 43F00103 		orr	r3, r3, #1
 9689 044a E375     		strb	r3, [r4, #23]
 9690              	.LVL1079:
2910:src/display.c **** 	      goto finish;
 9691              		.loc 1 2910 6 is_stmt 1 view .LVU3111
2910:src/display.c **** 	      goto finish;
 9692              		.loc 1 2910 9 is_stmt 0 view .LVU3112
 9693 044c 002A     		cmp	r2, #0
 9694 044e 3FF4F5AE 		beq	.L1028
 9695 0452 74E6     		b	.L1027
 9696              	.LVL1080:
 9697              	.L1222:
ARM GAS  /tmp/ccKZqSeG.s 			page 286


 9698              	.LBB598:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9699              		.loc 1 2919 6 discriminator 1 view .LVU3113
 9700 0454 6249     		ldr	r1, .L1262+36
 9701 0456 0AEB8A03 		add	r3, r10, r10, lsl #2
 9702 045a 1944     		add	r1, r1, r3
 9703 045c 31E6     		b	.L1063
 9704              	.LVL1081:
 9705              	.L1226:
2919:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9706              		.loc 1 2919 6 discriminator 1 view .LVU3114
 9707              	.LBE598:
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9708              		.loc 1 2666 4 is_stmt 1 view .LVU3115
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9709              		.loc 1 2666 9 is_stmt 0 view .LVU3116
 9710 045e 2E22     		movs	r2, #46
 9711 0460 6049     		ldr	r1, .L1262+40
 9712 0462 1EA8     		add	r0, sp, #120
 9713              	.LVL1082:
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9714              		.loc 1 2666 9 view .LVU3117
 9715 0464 FFF7FEFF 		bl	scopy_char
 9716              	.LVL1083:
2667:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9717              		.loc 1 2667 14 view .LVU3118
 9718 0468 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2666:src/display.c **** 	  if (State2.numdigit > 0)
 9719              		.loc 1 2666 9 view .LVU3119
 9720 046a 0346     		mov	r3, r0
 9721              	.LVL1084:
2667:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9722              		.loc 1 2667 4 is_stmt 1 view .LVU3120
2667:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9723              		.loc 1 2667 7 is_stmt 0 view .LVU3121
 9724 046c 002A     		cmp	r2, #0
 9725 046e 40F02381 		bne	.L1230
 9726              	.L940:
2670:src/display.c **** 	  if (yreg_enabled) {
 9727              		.loc 1 2670 4 is_stmt 1 view .LVU3122
 9728              	.LVL1085:
2670:src/display.c **** 	  if (yreg_enabled) {
 9729              		.loc 1 2670 10 is_stmt 0 view .LVU3123
 9730 0472 5F22     		movs	r2, #95
 9731 0474 1A70     		strb	r2, [r3]
2671:src/display.c **** 	    set_status_top(buf);
 9732              		.loc 1 2671 4 is_stmt 1 view .LVU3124
2671:src/display.c **** 	    set_status_top(buf);
 9733              		.loc 1 2671 7 is_stmt 0 view .LVU3125
 9734 0476 002D     		cmp	r5, #0
 9735 0478 7FF4B7AE 		bne	.L1208
2671:src/display.c **** 	    set_status_top(buf);
 9736              		.loc 1 2671 7 view .LVU3126
 9737 047c ABE7     		b	.L937
 9738              	.LVL1086:
 9739              	.L1033:
 9740              	.LBB599:
ARM GAS  /tmp/ccKZqSeG.s 			page 287


 9741              	.LBB585:
1277:src/display.c **** 
 9742              		.loc 1 1277 2 is_stmt 1 view .LVU3127
 9743 047e FFF7FEFF 		bl	set_separator_decimal_modes
 9744              	.LVL1087:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9745              		.loc 1 1279 2 view .LVU3128
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9746              		.loc 1 1281 2 view .LVU3129
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9747              		.loc 1 1281 5 is_stmt 0 view .LVU3130
 9748 0482 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9749              	.LBB566:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9750              		.loc 1 1288 15 view .LVU3131
 9751 0484 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9752              	.LBE566:
1281:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9753              		.loc 1 1281 5 view .LVU3132
 9754 0486 012B     		cmp	r3, #1
 9755 0488 40F21B81 		bls	.L1036
 9756              	.LVL1088:
 9757              	.LBB567:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9758              		.loc 1 1288 14 is_stmt 1 view .LVU3133
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9759              		.loc 1 1288 4 is_stmt 0 view .LVU3134
 9760 048c 0029     		cmp	r1, #0
 9761 048e 00F0C181 		beq	.L1082
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9762              		.loc 1 1288 10 view .LVU3135
 9763 0492 5A46     		mov	r2, fp
 9764 0494 AC46     		mov	ip, r5
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9765              		.loc 1 1288 4 view .LVU3136
 9766 0496 0846     		mov	r0, r1
 9767              	.LBE567:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9768              		.loc 1 1256 11 view .LVU3137
 9769 0498 4FF0FF3E 		mov	lr, #-1
 9770 049c 04E0     		b	.L1039
 9771              	.LVL1089:
 9772              	.L1038:
 9773              	.LBB568:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9774              		.loc 1 1288 28 is_stmt 1 view .LVU3138
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9775              		.loc 1 1288 15 is_stmt 0 view .LVU3139
 9776 049e 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9777              		.loc 1 1288 29 view .LVU3140
 9778 04a2 0132     		adds	r2, r2, #1
 9779              	.LVL1090:
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9780              		.loc 1 1288 14 is_stmt 1 view .LVU3141
1288:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9781              		.loc 1 1288 4 is_stmt 0 view .LVU3142
ARM GAS  /tmp/ccKZqSeG.s 			page 288


 9782 04a4 0028     		cmp	r0, #0
 9783 04a6 3DD0     		beq	.L1231
 9784              	.LVL1091:
 9785              	.L1039:
1289:src/display.c **** 	      gotdot = j;
 9786              		.loc 1 1289 6 is_stmt 1 view .LVU3143
1289:src/display.c **** 	      gotdot = j;
 9787              		.loc 1 1289 9 is_stmt 0 view .LVU3144
 9788 04a8 2E28     		cmp	r0, #46
 9789 04aa F8D1     		bne	.L1038
1290:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9790              		.loc 1 1290 8 is_stmt 1 view .LVU3145
 9791              	.LVL1092:
1292:src/display.c **** #  endif
 9792              		.loc 1 1292 8 view .LVU3146
1289:src/display.c **** 	      gotdot = j;
 9793              		.loc 1 1289 22 is_stmt 0 view .LVU3147
 9794 04ac BEF1FF3F 		cmp	lr, #-1
 9795 04b0 F5D1     		bne	.L1038
1292:src/display.c **** #  endif
 9796              		.loc 1 1292 29 view .LVU3148
 9797 04b2 9CF801B0 		ldrb	fp, [ip, #1]	@ zero_extendqisi2
 9798 04b6 ABF12E0B 		sub	fp, fp, #46
 9799 04ba BBFA8BFB 		clz	fp, fp
1292:src/display.c **** #  endif
 9800              		.loc 1 1292 19 view .LVU3149
 9801 04be 9646     		mov	lr, r2
1292:src/display.c **** #  endif
 9802              		.loc 1 1292 29 view .LVU3150
 9803 04c0 4FEA5B1B 		lsr	fp, fp, #5
 9804              	.LVL1093:
1292:src/display.c **** #  endif
 9805              		.loc 1 1292 29 view .LVU3151
 9806 04c4 EBE7     		b	.L1038
 9807              	.LVL1094:
 9808              	.L943:
1292:src/display.c **** #  endif
 9809              		.loc 1 1292 29 view .LVU3152
 9810              	.LBE568:
 9811              	.LBE585:
 9812              	.LBE599:
2683:src/display.c **** #endif
 9813              		.loc 1 2683 11 view .LVU3153
 9814 04c6 4849     		ldr	r1, .L1262+44
 9815 04c8 0093     		str	r3, [sp]
2683:src/display.c **** #endif
 9816              		.loc 1 2683 6 is_stmt 1 view .LVU3154
2683:src/display.c **** #endif
 9817              		.loc 1 2683 11 is_stmt 0 view .LVU3155
 9818 04ca 1EA8     		add	r0, sp, #120
 9819              	.LVL1095:
2683:src/display.c **** #endif
 9820              		.loc 1 2683 11 view .LVU3156
 9821 04cc FFF7FEFF 		bl	scopy
 9822              	.LVL1096:
2683:src/display.c **** #endif
 9823              		.loc 1 2683 11 view .LVU3157
ARM GAS  /tmp/ccKZqSeG.s 			page 289


 9824 04d0 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9825 04d2 009B     		ldr	r3, [sp]
 9826 04d4 69E6     		b	.L944
 9827              	.L946:
2690:src/display.c **** 	    *bp++ = '\021';
 9828              		.loc 1 2690 11 is_stmt 1 view .LVU3158
2690:src/display.c **** 	    *bp++ = '\021';
 9829              		.loc 1 2690 14 is_stmt 0 view .LVU3159
 9830 04d6 012B     		cmp	r3, #1
 9831 04d8 00F00481 		beq	.L1232
2697:src/display.c **** 	      *bp++ = '.';
 9832              		.loc 1 2697 6 is_stmt 1 view .LVU3160
2697:src/display.c **** 	      *bp++ = '.';
 9833              		.loc 1 2697 10 is_stmt 0 view .LVU3161
 9834 04dc A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2697:src/display.c **** 	      *bp++ = '.';
 9835              		.loc 1 2697 9 view .LVU3162
 9836 04de DA07     		lsls	r2, r3, #31
2698:src/display.c **** 	    if (State2.numdigit > 0) {
 9837              		.loc 1 2698 8 is_stmt 1 view .LVU3163
 9838              	.LVL1097:
2698:src/display.c **** 	    if (State2.numdigit > 0) {
 9839              		.loc 1 2698 14 is_stmt 0 view .LVU3164
 9840 04e0 44BF     		itt	mi
 9841 04e2 2E23     		movmi	r3, #46
 9842 04e4 00F8013B 		strbmi	r3, [r0], #1
 9843              	.LVL1098:
2699:src/display.c **** 	      if (State2.shuffle)
 9844              		.loc 1 2699 6 is_stmt 1 view .LVU3165
2699:src/display.c **** 	      if (State2.shuffle)
 9845              		.loc 1 2699 16 is_stmt 0 view .LVU3166
 9846 04e8 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2699:src/display.c **** 	      if (State2.shuffle)
 9847              		.loc 1 2699 9 view .LVU3167
 9848 04ea 9AB1     		cbz	r2, .L950
2700:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9849              		.loc 1 2700 8 is_stmt 1 view .LVU3168
2700:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9850              		.loc 1 2700 12 is_stmt 0 view .LVU3169
 9851 04ec A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2700:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9852              		.loc 1 2700 11 view .LVU3170
 9853 04ee 9B07     		lsls	r3, r3, #30
 9854 04f0 40F19281 		bpl	.L951
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9855              		.loc 1 2701 3 is_stmt 1 view .LVU3171
 9856              	.LVL1099:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9857              		.loc 1 2701 17 is_stmt 0 view .LVU3172
 9858 04f4 2289     		ldrh	r2, [r4, #8]
 9859              	.LVL1100:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9860              		.loc 1 2701 34 is_stmt 1 view .LVU3173
 9861 04f6 DFF8FCC0 		ldr	ip, .L1262+56
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9862              		.loc 1 2701 10 is_stmt 0 view .LVU3174
 9863 04fa 0023     		movs	r3, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 290


 9864              	.LVL1101:
 9865              	.L952:
2702:src/display.c **** 	      else
 9866              		.loc 1 2702 5 is_stmt 1 discriminator 3 view .LVU3175
2702:src/display.c **** 	      else
 9867              		.loc 1 2702 24 is_stmt 0 discriminator 3 view .LVU3176
 9868 04fc 02F00301 		and	r1, r2, #3
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9869              		.loc 1 2701 54 discriminator 3 view .LVU3177
 9870 0500 0133     		adds	r3, r3, #1
 9871              	.LVL1102:
2702:src/display.c **** 	      else
 9872              		.loc 1 2702 11 discriminator 3 view .LVU3178
 9873 0502 1CF80110 		ldrb	r1, [ip, r1]	@ zero_extendqisi2
 9874 0506 00F8011B 		strb	r1, [r0], #1
 9875              	.LVL1103:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9876              		.loc 1 2701 53 is_stmt 1 discriminator 3 view .LVU3179
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9877              		.loc 1 2701 42 is_stmt 0 discriminator 3 view .LVU3180
 9878 050a E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9879              		.loc 1 2701 3 discriminator 3 view .LVU3181
 9880 050c 9942     		cmp	r1, r3
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9881              		.loc 1 2701 60 discriminator 3 view .LVU3182
 9882 050e 4FEAA202 		asr	r2, r2, #2
 9883              	.LVL1104:
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9884              		.loc 1 2701 34 is_stmt 1 discriminator 3 view .LVU3183
2701:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9885              		.loc 1 2701 3 is_stmt 0 discriminator 3 view .LVU3184
 9886 0512 F3DC     		bgt	.L952
 9887              	.LVL1105:
 9888              	.L950:
2707:src/display.c **** 	  }
 9889              		.loc 1 2707 6 is_stmt 1 view .LVU3185
2707:src/display.c **** 	  }
 9890              		.loc 1 2707 12 is_stmt 0 view .LVU3186
 9891 0514 5F23     		movs	r3, #95
 9892 0516 0370     		strb	r3, [r0]
 9893 0518 64E6     		b	.L970
 9894              	.LVL1106:
 9895              	.L1227:
 9896              	.LBB600:
 9897              	.LBB586:
1266:src/display.c **** 	p++;
 9898              		.loc 1 1266 2 is_stmt 1 view .LVU3187
 9899              	.LBB569:
 9900              	.LBI569:
 244:src/display.c **** {
 9901              		.loc 1 244 13 view .LVU3188
 9902              	.LBB570:
 246:src/display.c **** }
 9903              		.loc 1 246 3 view .LVU3189
 9904 051a 8120     		movs	r0, #129
 9905              	.LVL1107:
ARM GAS  /tmp/ccKZqSeG.s 			page 291


 246:src/display.c **** }
 9906              		.loc 1 246 3 is_stmt 0 view .LVU3190
 9907 051c FFF7FEFF 		bl	set_dot
 9908              	.LVL1108:
 9909              	.LBE570:
 9910              	.LBE569:
1267:src/display.c ****       }
 9911              		.loc 1 1267 2 is_stmt 1 view .LVU3191
1267:src/display.c ****       }
 9912              		.loc 1 1267 3 is_stmt 0 view .LVU3192
 9913 0520 0135     		adds	r5, r5, #1
 9914              	.LVL1109:
1267:src/display.c ****       }
 9915              		.loc 1 1267 3 view .LVU3193
 9916 0522 6FE6     		b	.L1032
 9917              	.LVL1110:
 9918              	.L1231:
 9919              	.LBB571:
1296:src/display.c **** 	  if (j > 0) {
 9920              		.loc 1 1296 4 is_stmt 1 view .LVU3194
1296:src/display.c **** 	  if (j > 0) {
 9921              		.loc 1 1296 24 is_stmt 0 view .LVU3195
 9922 0524 0BF10C0C 		add	ip, fp, #12
1296:src/display.c **** 	  if (j > 0) {
 9923              		.loc 1 1296 6 view .LVU3196
 9924 0528 A2EB0C02 		sub	r2, r2, ip
 9925              	.LVL1111:
1297:src/display.c **** 	    p += j + 1;
 9926              		.loc 1 1297 4 is_stmt 1 view .LVU3197
1297:src/display.c **** 	    p += j + 1;
 9927              		.loc 1 1297 7 is_stmt 0 view .LVU3198
 9928 052c 002A     		cmp	r2, #0
 9929 052e 40F3DE80 		ble	.L1083
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9930              		.loc 1 1298 6 is_stmt 1 view .LVU3199
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9931              		.loc 1 1298 8 is_stmt 0 view .LVU3200
 9932 0532 511C     		adds	r1, r2, #1
1300:src/display.c **** 	      gotdot = 0;
 9933              		.loc 1 1300 9 view .LVU3201
 9934 0534 7245     		cmp	r2, lr
1298:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9935              		.loc 1 1298 8 view .LVU3202
 9936 0536 0D44     		add	r5, r5, r1
 9937              	.LVL1112:
1299:src/display.c **** 	    if (gotdot <= j) {
 9938              		.loc 1 1299 6 is_stmt 1 view .LVU3203
1300:src/display.c **** 	      gotdot = 0;
 9939              		.loc 1 1300 6 view .LVU3204
1300:src/display.c **** 	      gotdot = 0;
 9940              		.loc 1 1300 9 is_stmt 0 view .LVU3205
 9941 0538 C0F2DE80 		blt	.L1041
1301:src/display.c **** 	      if (double_dot)
 9942              		.loc 1 1301 8 is_stmt 1 view .LVU3206
 9943              	.LVL1113:
1302:src/display.c **** 		p++;
 9944              		.loc 1 1302 8 view .LVU3207
ARM GAS  /tmp/ccKZqSeG.s 			page 292


1302:src/display.c **** 		p++;
 9945              		.loc 1 1302 11 is_stmt 0 view .LVU3208
 9946 053c BBF1000F 		cmp	fp, #0
 9947 0540 00F06581 		beq	.L1084
1303:src/display.c **** 	    }
 9948              		.loc 1 1303 3 is_stmt 1 view .LVU3209
1303:src/display.c **** 	    }
 9949              		.loc 1 1303 4 is_stmt 0 view .LVU3210
 9950 0544 0135     		adds	r5, r5, #1
 9951              	.LVL1114:
1299:src/display.c **** 	    if (gotdot <= j) {
 9952              		.loc 1 1299 8 view .LVU3211
 9953 0546 4FF0090B 		mov	fp, #9
 9954              	.LVL1115:
 9955              	.L1042:
1312:src/display.c **** 	    overflow_to_left = 1;
 9956              		.loc 1 1312 6 is_stmt 1 view .LVU3212
 9957 054a 3C21     		movs	r1, #60
 9958              	.LVL1116:
1312:src/display.c **** 	    overflow_to_left = 1;
 9959              		.loc 1 1312 6 is_stmt 0 view .LVU3213
 9960 054c 0020     		movs	r0, #0
 9961 054e FFF7FEFF 		bl	set_dig
 9962              	.LVL1117:
1313:src/display.c **** 	  }
 9963              		.loc 1 1313 6 is_stmt 1 view .LVU3214
1313:src/display.c **** 	  }
 9964              		.loc 1 1313 6 is_stmt 0 view .LVU3215
 9965 0552 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1313:src/display.c **** 	  }
 9966              		.loc 1 1313 6 view .LVU3216
 9967              	.LBE571:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9968              		.loc 1 1319 9 is_stmt 1 view .LVU3217
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9969              		.loc 1 1319 2 is_stmt 0 view .LVU3218
 9970 0554 4FF0000A 		mov	r10, #0
 9971 0558 0029     		cmp	r1, #0
 9972 055a 7FD0     		beq	.L1218
 9973              	.LVL1118:
 9974              	.L1074:
 9975              	.LBB572:
1313:src/display.c **** 	  }
 9976              		.loc 1 1313 23 view .LVU3219
 9977 055c 0123     		movs	r3, #1
 9978 055e 0293     		str	r3, [sp, #8]
 9979 0560 11E0     		b	.L1051
 9980              	.LVL1119:
 9981              	.L1233:
1313:src/display.c **** 	  }
 9982              		.loc 1 1313 23 view .LVU3220
 9983              	.LBE572:
1325:src/display.c **** 	      gotdot = i;
 9984              		.loc 1 1325 6 is_stmt 1 view .LVU3221
1325:src/display.c **** 	      gotdot = i;
 9985              		.loc 1 1325 9 is_stmt 0 view .LVU3222
 9986 0562 BAF1FF3F 		cmp	r10, #-1
ARM GAS  /tmp/ccKZqSeG.s 			page 293


1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9987              		.loc 1 1329 9 view .LVU3223
 9988 0566 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1325:src/display.c **** 	      gotdot = i;
 9989              		.loc 1 1325 9 view .LVU3224
 9990 0568 1AD0     		beq	.L1045
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9991              		.loc 1 1329 6 is_stmt 1 view .LVU3225
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9992              		.loc 1 1329 9 is_stmt 0 view .LVU3226
 9993 056a 2E2B     		cmp	r3, #46
 9994 056c 24D0     		beq	.L1072
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9995              		.loc 1 1329 25 view .LVU3227
 9996 056e DA45     		cmp	r10, fp
 9997 0570 18D0     		beq	.L1048
 9998              	.L1047:
1336:src/display.c **** 		i += segs_per_digit;
 9999              		.loc 1 1336 3 is_stmt 1 view .LVU3228
 10000 0572 5846     		mov	r0, fp
 10001 0574 2F21     		movs	r1, #47
 10002 0576 FFF7FEFF 		bl	set_dig
 10003              	.LVL1120:
1337:src/display.c **** 	      }
 10004              		.loc 1 1337 3 view .LVU3229
1337:src/display.c **** 	      }
 10005              		.loc 1 1337 5 is_stmt 0 view .LVU3230
 10006 057a 0BF1090B 		add	fp, fp, #9
 10007              	.LVL1121:
1337:src/display.c **** 	      }
 10008              		.loc 1 1337 5 view .LVU3231
 10009 057e 2B46     		mov	r3, r5
 10010              	.LVL1122:
 10011              	.L1049:
1323:src/display.c **** 	  if (*p == '.') {
 10012              		.loc 1 1323 11 is_stmt 1 view .LVU3232
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10013              		.loc 1 1319 9 is_stmt 0 view .LVU3233
 10014 0580 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1323:src/display.c **** 	  if (*p == '.') {
 10015              		.loc 1 1323 12 view .LVU3234
 10016 0582 0135     		adds	r5, r5, #1
 10017              	.LVL1123:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10018              		.loc 1 1319 9 is_stmt 1 view .LVU3235
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10019              		.loc 1 1319 2 is_stmt 0 view .LVU3236
 10020 0584 C1B3     		cbz	r1, .L1052
 10021              	.LVL1124:
 10022              	.L1051:
1321:src/display.c **** #endif
 10023              		.loc 1 1321 9 view .LVU3237
 10024 0586 A1F14403 		sub	r3, r1, #68
 10025 058a 012B     		cmp	r3, #1
 10026 058c 34D9     		bls	.L1052
1324:src/display.c **** 	    if (gotdot < 0)
 10027              		.loc 1 1324 4 is_stmt 1 view .LVU3238
ARM GAS  /tmp/ccKZqSeG.s 			page 294


1324:src/display.c **** 	    if (gotdot < 0)
 10028              		.loc 1 1324 7 is_stmt 0 view .LVU3239
 10029 058e 2E29     		cmp	r1, #46
 10030 0590 E7D0     		beq	.L1233
1358:src/display.c **** 	      i += segs_per_digit;
 10031              		.loc 1 1358 8 is_stmt 1 view .LVU3240
 10032 0592 5846     		mov	r0, fp
 10033 0594 FFF7FEFF 		bl	set_dig
 10034              	.LVL1125:
1359:src/display.c **** 	    }
 10035              		.loc 1 1359 8 view .LVU3241
1359:src/display.c **** 	    }
 10036              		.loc 1 1359 10 is_stmt 0 view .LVU3242
 10037 0598 0BF1090B 		add	fp, fp, #9
 10038              	.LVL1126:
1359:src/display.c **** 	    }
 10039              		.loc 1 1359 10 view .LVU3243
 10040 059c 2B46     		mov	r3, r5
 10041 059e EFE7     		b	.L1049
 10042              	.L1045:
1326:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10043              		.loc 1 1326 8 is_stmt 1 view .LVU3244
 10044              	.LVL1127:
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10045              		.loc 1 1329 6 view .LVU3245
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10046              		.loc 1 1329 9 is_stmt 0 view .LVU3246
 10047 05a0 2E2B     		cmp	r3, #46
 10048 05a2 08D0     		beq	.L1234
 10049              	.LVL1128:
 10050              	.L1048:
1340:src/display.c **** 		  i += segs_per_digit;
 10051              		.loc 1 1340 3 is_stmt 1 view .LVU3247
1340:src/display.c **** 		  i += segs_per_digit;
 10052              		.loc 1 1340 6 is_stmt 0 view .LVU3248
 10053 05a4 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10054 05a6 012B     		cmp	r3, #1
 10055 05a8 40F29380 		bls	.L1050
1341:src/display.c **** 		}
 10056              		.loc 1 1341 5 is_stmt 1 view .LVU3249
 10057              	.LVL1129:
1341:src/display.c **** 		}
 10058              		.loc 1 1341 5 is_stmt 0 view .LVU3250
 10059 05ac DA46     		mov	r10, fp
 10060 05ae 2B46     		mov	r3, r5
1341:src/display.c **** 		}
 10061              		.loc 1 1341 7 view .LVU3251
 10062 05b0 0BF1090B 		add	fp, fp, #9
 10063              	.LVL1130:
1341:src/display.c **** 		}
 10064              		.loc 1 1341 7 view .LVU3252
 10065 05b4 E4E7     		b	.L1049
 10066              	.LVL1131:
 10067              	.L1234:
1329:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10068              		.loc 1 1329 9 view .LVU3253
 10069 05b6 DA46     		mov	r10, fp
ARM GAS  /tmp/ccKZqSeG.s 			page 295


 10070              	.LVL1132:
 10071              	.L1072:
1330:src/display.c **** 		p++;
 10072              		.loc 1 1330 8 is_stmt 1 view .LVU3254
1331:src/display.c **** 	      }
 10073              		.loc 1 1331 3 view .LVU3255
1331:src/display.c **** 	      }
 10074              		.loc 1 1331 4 is_stmt 0 view .LVU3256
 10075 05b8 0135     		adds	r5, r5, #1
 10076              	.LVL1133:
1331:src/display.c **** 	      }
 10077              		.loc 1 1331 4 view .LVU3257
 10078 05ba DAE7     		b	.L1047
 10079              	.L1263:
 10080              		.align	2
 10081              	.L1262:
 10082 05bc 0C000000 		.word	.LANCHOR14+12
 10083 05c0 08000000 		.word	.LC25
 10084 05c4 00000000 		.word	.LANCHOR17
 10085 05c8 00000000 		.word	ShowRegister
 10086 05cc 00000000 		.word	DispPlot
 10087 05d0 8C000000 		.word	.LC42
 10088 05d4 00000000 		.word	.LANCHOR18
 10089 05d8 18000000 		.word	.LC26
 10090 05dc 94000000 		.word	.LC29
 10091 05e0 00000000 		.word	.LANCHOR19
 10092 05e4 56040000 		.word	argcmds+1110
 10093 05e8 1C000000 		.word	.LC27
 10094 05ec 00000000 		.word	DispMsg
 10095 05f0 00000000 		.word	ShowRPN
 10096 05f4 9C000000 		.word	.LC28
 10097              	.L1052:
1368:src/display.c **** 	    gotdot = i;
 10098              		.loc 1 1368 4 is_stmt 1 view .LVU3258
1368:src/display.c **** 	    gotdot = i;
 10099              		.loc 1 1368 7 is_stmt 0 view .LVU3259
 10100 05f8 BAF1FF3F 		cmp	r10, #-1
 10101 05fc 08BF     		it	eq
 10102 05fe DA46     		moveq	r10, fp
 10103              	.LVL1134:
1370:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10104              		.loc 1 1370 4 is_stmt 1 view .LVU3260
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10105              		.loc 1 1371 6 view .LVU3261
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10106              		.loc 1 1371 13 is_stmt 0 view .LVU3262
 10107 0600 AAF11B0A 		sub	r10, r10, #27
 10108              	.LVL1135:
1372:src/display.c **** 	      break;
 10109              		.loc 1 1372 6 is_stmt 1 view .LVU3263
1372:src/display.c **** 	      break;
 10110              		.loc 1 1372 9 is_stmt 0 view .LVU3264
 10111 0604 BAF1000F 		cmp	r10, #0
 10112 0608 11DD     		ble	.L1037
1372:src/display.c **** 	      break;
 10113              		.loc 1 1372 9 view .LVU3265
 10114 060a 0196     		str	r6, [sp, #4]
ARM GAS  /tmp/ccKZqSeG.s 			page 296


 10115 060c 5646     		mov	r6, r10
 10116              	.LVL1136:
1372:src/display.c **** 	      break;
 10117              		.loc 1 1372 9 view .LVU3266
 10118 060e AA46     		mov	r10, r5
 10119              	.LVL1137:
1372:src/display.c **** 	      break;
 10120              		.loc 1 1372 9 view .LVU3267
 10121 0610 029D     		ldr	r5, [sp, #8]
 10122              	.LVL1138:
 10123              	.L1056:
1375:src/display.c **** 	      break;
 10124              		.loc 1 1375 6 is_stmt 1 view .LVU3268
1378:src/display.c **** 	  }
 10125              		.loc 1 1378 6 view .LVU3269
 10126              	.LBB573:
 10127              	.LBB574:
 311:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 10128              		.loc 1 311 3 view .LVU3270
 10129 0612 3046     		mov	r0, r6
 10130              	.LBE574:
 10131              	.LBE573:
1375:src/display.c **** 	      break;
 10132              		.loc 1 1375 9 is_stmt 0 view .LVU3271
 10133 0614 0DB1     		cbz	r5, .L1057
 10134              	.LVL1139:
1375:src/display.c **** 	      break;
 10135              		.loc 1 1375 27 view .LVU3272
 10136 0616 092E     		cmp	r6, #9
 10137 0618 07D0     		beq	.L1205
 10138              	.L1057:
1378:src/display.c **** 	  }
 10139              		.loc 1 1378 6 view .LVU3273
 10140 061a C54B     		ldr	r3, .L1264
 10141 061c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10142              	.LVL1140:
 10143              	.LBB576:
 10144              	.LBI573:
 308:src/display.c ****   if (sep == SEP_NONE)
 10145              		.loc 1 308 14 is_stmt 1 view .LVU3274
 10146              	.LBB575:
 309:src/display.c ****     return res;
 10147              		.loc 1 309 3 view .LVU3275
 309:src/display.c ****     return res;
 10148              		.loc 1 309 6 is_stmt 0 view .LVU3276
 10149 061e 09B1     		cbz	r1, .L1058
 10150 0620 FFF7FEFF 		bl	set_separator.part.0
 10151              	.LVL1141:
 10152              	.L1058:
 309:src/display.c ****     return res;
 10153              		.loc 1 309 6 view .LVU3277
 10154              	.LBE575:
 10155              	.LBE576:
1370:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10156              		.loc 1 1370 4 is_stmt 1 view .LVU3278
1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10157              		.loc 1 1371 6 view .LVU3279
ARM GAS  /tmp/ccKZqSeG.s 			page 297


1371:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10158              		.loc 1 1371 13 is_stmt 0 view .LVU3280
 10159 0624 1B3E     		subs	r6, r6, #27
 10160              	.LVL1142:
1372:src/display.c **** 	      break;
 10161              		.loc 1 1372 6 is_stmt 1 view .LVU3281
1372:src/display.c **** 	      break;
 10162              		.loc 1 1372 9 is_stmt 0 view .LVU3282
 10163 0626 002E     		cmp	r6, #0
 10164 0628 F3DC     		bgt	.L1056
 10165              	.L1205:
1372:src/display.c **** 	      break;
 10166              		.loc 1 1372 9 view .LVU3283
 10167 062a 019E     		ldr	r6, [sp, #4]
 10168              	.LVL1143:
1372:src/display.c **** 	      break;
 10169              		.loc 1 1372 9 view .LVU3284
 10170 062c 5546     		mov	r5, r10
 10171              	.LVL1144:
 10172              	.L1037:
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10173              		.loc 1 1382 4 is_stmt 1 view .LVU3285
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10174              		.loc 1 1382 8 is_stmt 0 view .LVU3286
 10175 062e 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1382:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10176              		.loc 1 1382 7 view .LVU3287
 10177 0630 A2F14401 		sub	r1, r2, #68
 10178 0634 0129     		cmp	r1, #1
 10179 0636 11D8     		bhi	.L1218
 10180              	.LBB577:
1386:src/display.c **** #  endif
 10181              		.loc 1 1386 6 is_stmt 1 view .LVU3288
 10182              	.LVL1145:
1389:src/display.c **** 	      flags |= 2;
 10183              		.loc 1 1389 6 view .LVU3289
1390:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10184              		.loc 1 1390 14 is_stmt 0 view .LVU3290
 10185 0638 442A     		cmp	r2, #68
 10186 063a 14BF     		ite	ne
 10187 063c 4FF00C0A 		movne	r10, #12
 10188 0640 4FF00E0A 		moveq	r10, #14
 10189              	.LVL1146:
1391:src/display.c **** 	      flags |= 16;
 10190              		.loc 1 1391 6 is_stmt 1 view .LVU3291
1391:src/display.c **** 	      flags |= 16;
 10191              		.loc 1 1391 9 is_stmt 0 view .LVU3292
 10192 0644 BBF15A0F 		cmp	fp, #90
1392:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10193              		.loc 1 1392 8 is_stmt 1 view .LVU3293
1392:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10194              		.loc 1 1392 14 is_stmt 0 view .LVU3294
 10195 0648 C8BF     		it	gt
 10196 064a 4AF0100A 		orrgt	r10, r10, #16
 10197              	.LVL1147:
1393:src/display.c **** 	  }
 10198              		.loc 1 1393 6 is_stmt 1 view .LVU3295
ARM GAS  /tmp/ccKZqSeG.s 			page 298


 10199 064e 681C     		adds	r0, r5, #1
 10200 0650 FFF7FEFF 		bl	s_to_i
 10201              	.LVL1148:
 10202 0654 5146     		mov	r1, r10
 10203 0656 0022     		movs	r2, #0
 10204 0658 FFF7FEFF 		bl	set_exp
 10205              	.LVL1149:
 10206              	.L1218:
1393:src/display.c **** 	  }
 10207              		.loc 1 1393 6 is_stmt 0 view .LVU3296
 10208              	.LBE577:
 10209              	.LBE586:
 10210              	.LBE600:
2910:src/display.c **** 	      goto finish;
 10211              		.loc 1 2910 6 is_stmt 1 view .LVU3297
2910:src/display.c **** 	      goto finish;
 10212              		.loc 1 2910 9 is_stmt 0 view .LVU3298
 10213 065c D8F80030 		ldr	r3, [r8]
 10214 0660 B44D     		ldr	r5, .L1264+4
 10215 0662 002B     		cmp	r3, #0
 10216 0664 3FF4EAAD 		beq	.L1028
 10217 0668 69E5     		b	.L1027
 10218              	.LVL1150:
 10219              	.L953:
2730:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10220              		.loc 1 2730 9 is_stmt 1 view .LVU3299
2730:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10221              		.loc 1 2730 12 is_stmt 0 view .LVU3300
 10222 066a BAF1000F 		cmp	r10, #0
 10223 066e 5DD1     		bne	.L1235
2785:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10224              		.loc 1 2785 9 is_stmt 1 view .LVU3301
2785:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10225              		.loc 1 2785 12 is_stmt 0 view .LVU3302
 10226 0670 1107     		lsls	r1, r2, #28
 10227 0672 00F1B680 		bmi	.L1236
2800:src/display.c **** 	  show_status();
 10228              		.loc 1 2800 9 is_stmt 1 view .LVU3303
2800:src/display.c **** 	  show_status();
 10229              		.loc 1 2800 19 is_stmt 0 view .LVU3304
 10230 0676 94F80C90 		ldrb	r9, [r4, #12]	@ zero_extendqisi2
2800:src/display.c **** 	  show_status();
 10231              		.loc 1 2800 12 view .LVU3305
 10232 067a B9F1000F 		cmp	r9, #0
 10233 067e 40F0CF80 		bne	.L1237
2803:src/display.c **** 	  show_label();
 10234              		.loc 1 2803 9 is_stmt 1 view .LVU3306
2803:src/display.c **** 	  show_label();
 10235              		.loc 1 2803 13 is_stmt 0 view .LVU3307
 10236 0682 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
2803:src/display.c **** 	  show_label();
 10237              		.loc 1 2803 12 view .LVU3308
 10238 0684 5107     		lsls	r1, r2, #29
 10239 0686 00F16581 		bmi	.L1238
2806:src/display.c **** 	  show_registers();
 10240              		.loc 1 2806 9 is_stmt 1 view .LVU3309
2806:src/display.c **** 	  show_registers();
ARM GAS  /tmp/ccKZqSeG.s 			page 299


 10241              		.loc 1 2806 12 is_stmt 0 view .LVU3310
 10242 068a 1207     		lsls	r2, r2, #28
 10243 068c 00F1B681 		bmi	.L1239
2816:src/display.c **** 	  if (DispMsg) { 
 10244              		.loc 1 2816 9 is_stmt 1 view .LVU3311
2816:src/display.c **** 	  if (DispMsg) { 
 10245              		.loc 1 2816 12 is_stmt 0 view .LVU3312
 10246 0690 4206     		lsls	r2, r0, #25
 10247 0692 40F1D681 		bpl	.L1004
2817:src/display.c **** 	    set_status(DispMsg);
 10248              		.loc 1 2817 4 is_stmt 1 view .LVU3313
2817:src/display.c **** 	    set_status(DispMsg);
 10249              		.loc 1 2817 8 is_stmt 0 view .LVU3314
 10250 0696 DFF8B892 		ldr	r9, .L1264+32
 10251 069a D9F80010 		ldr	r1, [r9]
2817:src/display.c **** 	    set_status(DispMsg);
 10252              		.loc 1 2817 7 view .LVU3315
 10253 069e 0029     		cmp	r1, #0
 10254 06a0 00F0E981 		beq	.L1005
2818:src/display.c **** 	  } else if (DispPlot) {
 10255              		.loc 1 2818 6 is_stmt 1 view .LVU3316
 10256 06a4 0846     		mov	r0, r1
 10257 06a6 FFF7FEFF 		bl	set_status
 10258              	.LVL1151:
2870:src/display.c ****       nostk:
 10259              		.loc 1 2870 2 view .LVU3317
 10260 06aa A34B     		ldr	r3, .L1264+8
 10261 06ac 0093     		str	r3, [sp]
 10262 06ae FFF7FEFF 		bl	show_stack
 10263              	.LVL1152:
2872:src/display.c **** 	if (!skip) {
 10264              		.loc 1 2872 2 view .LVU3318
 10265 06b2 FFF7FEFF 		bl	show_flags
 10266              	.LVL1153:
2873:src/display.c **** 	  if (State2.runmode) {
 10267              		.loc 1 2873 2 view .LVU3319
 10268 06b6 E6E4     		b	.L934
 10269              	.LVL1154:
 10270              	.L1230:
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10271              		.loc 1 2668 6 view .LVU3320
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10272              		.loc 1 2668 11 is_stmt 0 view .LVU3321
 10273 06b8 2189     		ldrh	r1, [r4, #8]
 10274 06ba FFF7FEFF 		bl	num_arg_0
 10275              	.LVL1155:
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10276              		.loc 1 2668 11 view .LVU3322
 10277 06be 0346     		mov	r3, r0
 10278              	.LVL1156:
2668:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10279              		.loc 1 2668 11 view .LVU3323
 10280 06c0 D7E6     		b	.L940
 10281              	.LVL1157:
 10282              	.L1036:
 10283              	.LBB601:
 10284              	.LBB587:
ARM GAS  /tmp/ccKZqSeG.s 			page 300


1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10285              		.loc 1 1319 9 is_stmt 1 view .LVU3324
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10286              		.loc 1 1319 2 is_stmt 0 view .LVU3325
 10287 06c2 0029     		cmp	r1, #0
 10288 06c4 00F0A680 		beq	.L1082
1262:src/display.c **** #endif
 10289              		.loc 1 1262 11 view .LVU3326
 10290 06c8 CDF808B0 		str	fp, [sp, #8]
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10291              		.loc 1 1256 11 view .LVU3327
 10292 06cc 4FF0FF3A 		mov	r10, #-1
 10293              	.LVL1158:
1256:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10294              		.loc 1 1256 11 view .LVU3328
 10295 06d0 59E7     		b	.L1051
 10296              	.LVL1159:
 10297              	.L1050:
1344:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10298              		.loc 1 1344 5 is_stmt 1 view .LVU3329
 10299              	.LBB578:
 10300              	.LBI578:
 293:src/display.c ****   if (res) {
 10301              		.loc 1 293 14 view .LVU3330
 10302              	.LBB579:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10303              		.loc 1 294 3 view .LVU3331
 10304 06d2 9A4B     		ldr	r3, .L1264+12
 10305 06d4 ABF10900 		sub	r0, fp, #9
 10306              	.LVL1160:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10307              		.loc 1 294 3 is_stmt 0 view .LVU3332
 10308 06d8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10309 06da FFF7FEFF 		bl	set_decimal.part.0
 10310              	.LVL1161:
 301:src/display.c **** }
 10311              		.loc 1 301 3 is_stmt 1 view .LVU3333
 301:src/display.c **** }
 10312              		.loc 1 301 10 is_stmt 0 view .LVU3334
 10313 06de DA46     		mov	r10, fp
 10314 06e0 2B46     		mov	r3, r5
 10315 06e2 4DE7     		b	.L1049
 10316              	.LVL1162:
 10317              	.L1232:
 301:src/display.c **** }
 10318              		.loc 1 301 10 view .LVU3335
 10319              	.LBE579:
 10320              	.LBE578:
 10321              	.LBE587:
 10322              	.LBE601:
2691:src/display.c **** 	    *bp++ = '_';
 10323              		.loc 1 2691 6 is_stmt 1 view .LVU3336
2691:src/display.c **** 	    *bp++ = '_';
 10324              		.loc 1 2691 12 is_stmt 0 view .LVU3337
 10325 06e4 1122     		movs	r2, #17
2692:src/display.c **** 	  } else {
 10326              		.loc 1 2692 12 view .LVU3338
ARM GAS  /tmp/ccKZqSeG.s 			page 301


 10327 06e6 5F23     		movs	r3, #95
2691:src/display.c **** 	    *bp++ = '_';
 10328              		.loc 1 2691 12 view .LVU3339
 10329 06e8 0270     		strb	r2, [r0]
2692:src/display.c **** 	  } else {
 10330              		.loc 1 2692 6 is_stmt 1 view .LVU3340
 10331              	.LVL1163:
2692:src/display.c **** 	  } else {
 10332              		.loc 1 2692 12 is_stmt 0 view .LVU3341
 10333 06ea 4370     		strb	r3, [r0, #1]
 10334 06ec 7AE5     		b	.L970
 10335              	.LVL1164:
 10336              	.L1083:
 10337              	.LBB602:
 10338              	.LBB588:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10339              		.loc 1 1279 4 view .LVU3342
 10340 06ee 8346     		mov	fp, r0
1262:src/display.c **** #endif
 10341              		.loc 1 1262 11 view .LVU3343
 10342 06f0 0290     		str	r0, [sp, #8]
 10343              	.LBB580:
1315:src/display.c **** 	}
 10344              		.loc 1 1315 16 view .LVU3344
 10345 06f2 4FF0FF3A 		mov	r10, #-1
 10346 06f6 46E7     		b	.L1051
 10347              	.LVL1165:
 10348              	.L1041:
1305:src/display.c **** 	      gotdot = 0;
 10349              		.loc 1 1305 11 is_stmt 1 view .LVU3345
1305:src/display.c **** 	      gotdot = 0;
 10350              		.loc 1 1305 14 is_stmt 0 view .LVU3346
 10351 06f8 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10352              	.LVL1166:
1305:src/display.c **** 	      gotdot = 0;
 10353              		.loc 1 1305 14 view .LVU3347
 10354 06fa 2E2A     		cmp	r2, #46
 10355 06fc 00F00981 		beq	.L1240
 10356              	.LVL1167:
1312:src/display.c **** 	    overflow_to_left = 1;
 10357              		.loc 1 1312 6 is_stmt 1 view .LVU3348
 10358 0700 3C21     		movs	r1, #60
 10359              	.LVL1168:
1312:src/display.c **** 	    overflow_to_left = 1;
 10360              		.loc 1 1312 6 is_stmt 0 view .LVU3349
 10361 0702 FFF7FEFF 		bl	set_dig
 10362              	.LVL1169:
1313:src/display.c **** 	  }
 10363              		.loc 1 1313 6 is_stmt 1 view .LVU3350
1313:src/display.c **** 	  }
 10364              		.loc 1 1313 6 is_stmt 0 view .LVU3351
 10365 0706 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1313:src/display.c **** 	  }
 10366              		.loc 1 1313 6 view .LVU3352
 10367              	.LBE580:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10368              		.loc 1 1319 9 is_stmt 1 view .LVU3353
ARM GAS  /tmp/ccKZqSeG.s 			page 302


 10369              	.LBB581:
1299:src/display.c **** 	    if (gotdot <= j) {
 10370              		.loc 1 1299 8 is_stmt 0 view .LVU3354
 10371 0708 4FF0090B 		mov	fp, #9
 10372              	.LBE581:
1319:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10373              		.loc 1 1319 2 view .LVU3355
 10374 070c 0029     		cmp	r1, #0
 10375 070e 8ED0     		beq	.L1037
 10376              	.LBB582:
1311:src/display.c **** 	    set_dig(0, '<');
 10377              		.loc 1 1311 18 view .LVU3356
 10378 0710 4FF0FF3A 		mov	r10, #-1
1299:src/display.c **** 	    if (gotdot <= j) {
 10379              		.loc 1 1299 8 view .LVU3357
 10380 0714 4FF0090B 		mov	fp, #9
 10381 0718 20E7     		b	.L1074
 10382              	.LVL1170:
 10383              	.L1026:
1299:src/display.c **** 	    if (gotdot <= j) {
 10384              		.loc 1 1299 8 view .LVU3358
 10385              	.LBE582:
 10386              	.LBE588:
 10387              	.LBE602:
2891:src/display.c **** 		  }
 10388              		.loc 1 2891 7 is_stmt 1 view .LVU3359
 10389 071a 6E20     		movs	r0, #110
 10390 071c FFF7FEFF 		bl	format_reg
 10391              	.LVL1171:
2910:src/display.c **** 	      goto finish;
 10392              		.loc 1 2910 6 view .LVU3360
2910:src/display.c **** 	      goto finish;
 10393              		.loc 1 2910 9 is_stmt 0 view .LVU3361
 10394 0720 D8F80030 		ldr	r3, [r8]
 10395 0724 002B     		cmp	r3, #0
 10396 0726 3FF489AD 		beq	.L1028
 10397 072a 08E5     		b	.L1027
 10398              	.LVL1172:
 10399              	.L1235:
 10400              	.LBB603:
2731:src/display.c **** 	  char b2[16];
 10401              		.loc 1 2731 4 is_stmt 1 view .LVU3362
2731:src/display.c **** 	  char b2[16];
 10402              		.loc 1 2731 45 is_stmt 0 view .LVU3363
 10403 072c DBF80030 		ldr	r3, [fp]
 10404 0730 B3F8DC07 		ldrh	r0, [r3, #2012]
2731:src/display.c **** 	  char b2[16];
 10405              		.loc 1 2731 22 view .LVU3364
 10406 0734 C0F34610 		ubfx	r0, r0, #5, #7
 10407 0738 FFF7FEFF 		bl	current_catalogue
 10408              	.LVL1173:
2735:src/display.c **** 	  p = catcmd(op, b2);
 10409              		.loc 1 2735 9 view .LVU3365
 10410 073c 8049     		ldr	r1, .L1264+16
2731:src/display.c **** 	  char b2[16];
 10411              		.loc 1 2731 22 view .LVU3366
 10412 073e 0646     		mov	r6, r0
ARM GAS  /tmp/ccKZqSeG.s 			page 303


 10413              	.LVL1174:
2732:src/display.c **** 	  const char *p;
 10414              		.loc 1 2732 4 is_stmt 1 view .LVU3367
2733:src/display.c **** 
 10415              		.loc 1 2733 4 view .LVU3368
2735:src/display.c **** 	  p = catcmd(op, b2);
 10416              		.loc 1 2735 4 view .LVU3369
2735:src/display.c **** 	  p = catcmd(op, b2);
 10417              		.loc 1 2735 9 is_stmt 0 view .LVU3370
 10418 0740 1EA8     		add	r0, sp, #120
 10419              	.LVL1175:
2735:src/display.c **** 	  p = catcmd(op, b2);
 10420              		.loc 1 2735 9 view .LVU3371
 10421 0742 FFF7FEFF 		bl	scopy
 10422              	.LVL1176:
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10423              		.loc 1 2736 8 view .LVU3372
 10424 0746 08A9     		add	r1, sp, #32
2735:src/display.c **** 	  p = catcmd(op, b2);
 10425              		.loc 1 2735 9 view .LVU3373
 10426 0748 8146     		mov	r9, r0
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10427              		.loc 1 2736 8 view .LVU3374
 10428 074a 3046     		mov	r0, r6
 10429              	.LVL1177:
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10430              		.loc 1 2736 4 is_stmt 1 view .LVU3375
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10431              		.loc 1 2736 8 is_stmt 0 view .LVU3376
 10432 074c FFF7FEFF 		bl	catcmd
 10433              	.LVL1178:
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10434              		.loc 1 2737 7 view .LVU3377
 10435 0750 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10436 0752 142B     		cmp	r3, #20
2736:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10437              		.loc 1 2736 8 view .LVU3378
 10438 0754 0146     		mov	r1, r0
 10439              	.LVL1179:
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10440              		.loc 1 2737 4 is_stmt 1 view .LVU3379
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10441              		.loc 1 2737 7 is_stmt 0 view .LVU3380
 10442 0756 05D0     		beq	.L955
2737:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10443              		.loc 1 2737 29 discriminator 1 view .LVU3381
 10444 0758 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10445 075a 9807     		lsls	r0, r3, #30
 10446              	.LVL1180:
2738:src/display.c **** 	  bp = scopy(bp, p);
 10447              		.loc 1 2738 6 is_stmt 1 discriminator 1 view .LVU3382
2738:src/display.c **** 	  bp = scopy(bp, p);
 10448              		.loc 1 2738 12 is_stmt 0 discriminator 1 view .LVU3383
 10449 075c 44BF     		itt	mi
 10450 075e 1423     		movmi	r3, #20
 10451 0760 09F8013B 		strbmi	r3, [r9], #1
 10452              	.LVL1181:
ARM GAS  /tmp/ccKZqSeG.s 			page 304


 10453              	.L955:
2739:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10454              		.loc 1 2739 4 is_stmt 1 view .LVU3384
2739:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10455              		.loc 1 2739 9 is_stmt 0 view .LVU3385
 10456 0764 4846     		mov	r0, r9
 10457 0766 FFF7FEFF 		bl	scopy
 10458              	.LVL1182:
2740:src/display.c **** 	    // State2.disp_small = 1;
 10459              		.loc 1 2740 4 is_stmt 1 view .LVU3386
2740:src/display.c **** 	    // State2.disp_small = 1;
 10460              		.loc 1 2740 7 is_stmt 0 view .LVU3387
 10461 076a AAF11003 		sub	r3, r10, #16
 10462 076e 012B     		cmp	r3, #1
 10463 0770 40F2BD80 		bls	.L1241
2747:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10464              		.loc 1 2747 11 is_stmt 1 view .LVU3388
2747:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10465              		.loc 1 2747 15 is_stmt 0 view .LVU3389
 10466 0774 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2747:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10467              		.loc 1 2747 14 view .LVU3390
 10468 0776 13F04003 		ands	r3, r3, #64
 10469 077a 08D0     		beq	.L1078
2748:src/display.c **** 	      decNumber x, r;
 10470              		.loc 1 2748 6 is_stmt 1 view .LVU3391
2748:src/display.c **** 	      decNumber x, r;
 10471              		.loc 1 2748 9 is_stmt 0 view .LVU3392
 10472 077c BAF1120F 		cmp	r10, #18
 10473 0780 00F02982 		beq	.L1242
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10474              		.loc 1 2768 13 is_stmt 1 view .LVU3393
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10475              		.loc 1 2768 46 is_stmt 0 view .LVU3394
 10476 0784 A6F58873 		sub	r3, r6, #272
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10477              		.loc 1 2768 16 view .LVU3395
 10478 0788 0D2B     		cmp	r3, #13
 10479 078a 40F20C82 		bls	.L1243
 10480              	.L1078:
2768:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10481              		.loc 1 2768 16 view .LVU3396
 10482              	.LBE603:
2591:src/display.c **** 	int x_disp = 0;
 10483              		.loc 1 2591 6 view .LVU3397
 10484 078e 4FF00009 		mov	r9, #0
 10485              	.LVL1183:
 10486              	.L959:
 10487              	.LBB613:
2777:src/display.c **** 	    set_status_top(buf);
 10488              		.loc 1 2777 4 is_stmt 1 view .LVU3398
2777:src/display.c **** 	    set_status_top(buf);
 10489              		.loc 1 2777 7 is_stmt 0 view .LVU3399
 10490 0792 002D     		cmp	r5, #0
 10491 0794 00F0C780 		beq	.L964
2778:src/display.c **** 	    no_status_top = 1;
 10492              		.loc 1 2778 6 is_stmt 1 view .LVU3400
ARM GAS  /tmp/ccKZqSeG.s 			page 305


 10493              	.LVL1184:
 10494              	.LBB604:
 10495              	.LBI604:
3524:src/display.c **** 	if (no_status_top) return;
 10496              		.loc 1 3524 19 view .LVU3401
 10497              	.LBB605:
3525:src/display.c **** 	if (State2.runmode) {
 10498              		.loc 1 3525 2 view .LVU3402
3525:src/display.c **** 	if (State2.runmode) {
 10499              		.loc 1 3525 5 is_stmt 0 view .LVU3403
 10500 0798 B7F90030 		ldrsh	r3, [r7]
 10501 079c 13B9     		cbnz	r3, .L965
 10502 079e 1EA8     		add	r0, sp, #120
 10503              	.LVL1185:
3525:src/display.c **** 	if (State2.runmode) {
 10504              		.loc 1 3525 5 view .LVU3404
 10505 07a0 FFF7FEFF 		bl	set_status_top.part.0
 10506              	.LVL1186:
 10507              	.L965:
3525:src/display.c **** 	if (State2.runmode) {
 10508              		.loc 1 3525 5 view .LVU3405
 10509              	.LBE605:
 10510              	.LBE604:
2779:src/display.c **** 	    annuc = 1;
 10511              		.loc 1 2779 6 is_stmt 1 view .LVU3406
2779:src/display.c **** 	    annuc = 1;
 10512              		.loc 1 2779 20 is_stmt 0 view .LVU3407
 10513 07a4 0123     		movs	r3, #1
2780:src/display.c **** 	  }
 10514              		.loc 1 2780 12 view .LVU3408
 10515 07a6 2E46     		mov	r6, r5
2779:src/display.c **** 	    annuc = 1;
 10516              		.loc 1 2779 20 view .LVU3409
 10517 07a8 3B80     		strh	r3, [r7]	@ movhi
2780:src/display.c **** 	  }
 10518              		.loc 1 2780 6 is_stmt 1 view .LVU3410
 10519              	.LVL1187:
 10520              	.L966:
2780:src/display.c **** 	  }
 10521              		.loc 1 2780 6 is_stmt 0 view .LVU3411
 10522              	.LBE613:
2870:src/display.c ****       nostk:
 10523              		.loc 1 2870 2 is_stmt 1 view .LVU3412
 10524 07aa FFF7FEFF 		bl	show_stack
 10525              	.LVL1188:
 10526              	.LDL2:
2872:src/display.c **** 	if (!skip) {
 10527              		.loc 1 2872 2 view .LVU3413
 10528 07ae FFF7FEFF 		bl	show_flags
 10529              	.LVL1189:
2873:src/display.c **** 	  if (State2.runmode) {
 10530              		.loc 1 2873 2 view .LVU3414
2873:src/display.c **** 	  if (State2.runmode) {
 10531              		.loc 1 2873 5 is_stmt 0 view .LVU3415
 10532 07b2 B9F1000F 		cmp	r9, #0
 10533 07b6 00F05881 		beq	.L1214
 10534              	.LVL1190:
ARM GAS  /tmp/ccKZqSeG.s 			page 306


 10535              	.L967:
2942:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10536              		.loc 1 2942 2 is_stmt 1 view .LVU3416
 10537 07ba FFF7FEFF 		bl	set_annunciators
 10538              	.LVL1191:
2943:src/display.c **** 	  ShowRPN = 0;
 10539              		.loc 1 2943 2 view .LVU3417
 10540 07be 5E4B     		ldr	r3, .L1264+8
 10541 07c0 DFF88C91 		ldr	r9, .L1264+32
 10542 07c4 5B4D     		ldr	r5, .L1264+4
 10543 07c6 0093     		str	r3, [sp]
 10544 07c8 3FE5     		b	.L929
 10545              	.L1229:
2882:src/display.c **** 		    SET_POLAR_READY;
 10546              		.loc 1 2882 7 view .LVU3418
 10547 07ca 5046     		mov	r0, r10
 10548 07cc FFF7FEFF 		bl	op_r2p
 10549              	.LVL1192:
2883:src/display.c **** 		  }
 10550              		.loc 1 2883 7 view .LVU3419
 10551 07d0 5C49     		ldr	r1, .L1264+20
 10552 07d2 0B68     		ldr	r3, [r1]
 10553 07d4 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 10554 07d8 6AF30412 		bfi	r2, r10, #4, #1
 10555 07dc 83F8DE27 		strb	r2, [r3, #2014]
 10556 07e0 22E6     		b	.L1025
 10557              	.LVL1193:
 10558              	.L1236:
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10559              		.loc 1 2786 4 view .LVU3420
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10560              		.loc 1 2786 42 is_stmt 0 view .LVU3421
 10561 07e2 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10562 07e4 5849     		ldr	r1, .L1264+24
 10563 07e6 0423     		movs	r3, #4
 10564 07e8 03EB0213 		add	r3, r3, r2, lsl #4
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10565              		.loc 1 2786 9 view .LVU3422
 10566 07ec 1944     		add	r1, r1, r3
 10567 07ee 2722     		movs	r2, #39
 10568 07f0 1EA8     		add	r0, sp, #120
 10569              	.LVL1194:
2786:src/display.c **** 	  if (State2.numdigit > 0) {
 10570              		.loc 1 2786 9 view .LVU3423
 10571 07f2 FFF7FEFF 		bl	scopy_char
 10572              	.LVL1195:
2787:src/display.c **** 	    *bp++ = (char) State2.digval;
 10573              		.loc 1 2787 7 view .LVU3424
 10574 07f6 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10575              	.LVL1196:
2787:src/display.c **** 	    *bp++ = (char) State2.digval;
 10576              		.loc 1 2787 4 is_stmt 1 view .LVU3425
2787:src/display.c **** 	    *bp++ = (char) State2.digval;
 10577              		.loc 1 2787 7 is_stmt 0 view .LVU3426
 10578 07f8 002B     		cmp	r3, #0
 10579 07fa 3FF4F3AC 		beq	.L970
2788:src/display.c **** 	    if (State2.numdigit > 1)
ARM GAS  /tmp/ccKZqSeG.s 			page 307


 10580              		.loc 1 2788 6 is_stmt 1 view .LVU3427
 10581              	.LVL1197:
2788:src/display.c **** 	    if (State2.numdigit > 1)
 10582              		.loc 1 2788 14 is_stmt 0 view .LVU3428
 10583 07fe 2389     		ldrh	r3, [r4, #8]
 10584 0800 0370     		strb	r3, [r0]
2789:src/display.c **** 	      *bp++ = State2.digval2;
 10585              		.loc 1 2789 6 is_stmt 1 view .LVU3429
2789:src/display.c **** 	      *bp++ = State2.digval2;
 10586              		.loc 1 2789 9 is_stmt 0 view .LVU3430
 10587 0802 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10588 0804 012B     		cmp	r3, #1
2790:src/display.c **** 	  }
 10589              		.loc 1 2790 8 is_stmt 1 view .LVU3431
 10590              	.LVL1198:
2790:src/display.c **** 	  }
 10591              		.loc 1 2790 22 is_stmt 0 view .LVU3432
 10592 0806 84BF     		itt	hi
 10593 0808 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2790:src/display.c **** 	  }
 10594              		.loc 1 2790 14 view .LVU3433
 10595 080a 4370     		strbhi	r3, [r0, #1]
 10596 080c EAE4     		b	.L970
 10597              	.LVL1199:
 10598              	.L1084:
 10599              	.LBB614:
 10600              	.LBB589:
 10601              	.LBB583:
1299:src/display.c **** 	    if (gotdot <= j) {
 10602              		.loc 1 1299 8 view .LVU3434
 10603 080e 4FF0090B 		mov	fp, #9
 10604 0812 9AE6     		b	.L1042
 10605              	.LVL1200:
 10606              	.L1082:
1299:src/display.c **** 	    if (gotdot <= j) {
 10607              		.loc 1 1299 8 view .LVU3435
 10608              	.LBE583:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10609              		.loc 1 1279 4 view .LVU3436
 10610 0814 8B46     		mov	fp, r1
 10611 0816 0AE7     		b	.L1037
 10612              	.LVL1201:
 10613              	.L951:
1279:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10614              		.loc 1 1279 4 view .LVU3437
 10615              	.LBE589:
 10616              	.LBE614:
2704:src/display.c **** 	    }
 10617              		.loc 1 2704 3 is_stmt 1 view .LVU3438
2704:src/display.c **** 	    }
 10618              		.loc 1 2704 8 is_stmt 0 view .LVU3439
 10619 0818 2189     		ldrh	r1, [r4, #8]
 10620 081a FFF7FEFF 		bl	num_arg_0
 10621              	.LVL1202:
2704:src/display.c **** 	    }
 10622              		.loc 1 2704 8 view .LVU3440
 10623 081e 79E6     		b	.L950
ARM GAS  /tmp/ccKZqSeG.s 			page 308


 10624              	.LVL1203:
 10625              	.L1237:
2801:src/display.c **** 	  skip = 1;
 10626              		.loc 1 2801 4 is_stmt 1 view .LVU3441
 10627              	.LBB615:
 10628              	.LBI615:
2359:src/display.c **** 	int i, n;
 10629              		.loc 1 2359 19 view .LVU3442
 10630              	.LBB616:
2360:src/display.c **** 	int j = SEGS_EXP_BASE;
 10631              		.loc 1 2360 2 view .LVU3443
2361:src/display.c **** 	const int status = State2.status - 3;
 10632              		.loc 1 2361 2 view .LVU3444
2362:src/display.c **** 	char buf[16], *p = buf;
 10633              		.loc 1 2362 2 view .LVU3445
2366:src/display.c **** 	  set_status("Free:");
 10634              		.loc 1 2366 5 is_stmt 0 view .LVU3446
 10635 0820 B9F1010F 		cmp	r9, #1
2362:src/display.c **** 	char buf[16], *p = buf;
 10636              		.loc 1 2362 12 view .LVU3447
 10637 0824 A9F10303 		sub	r3, r9, #3
 10638              	.LVL1204:
2363:src/display.c **** 	unsigned int pc;
 10639              		.loc 1 2363 2 is_stmt 1 view .LVU3448
2364:src/display.c **** 
 10640              		.loc 1 2364 2 view .LVU3449
2366:src/display.c **** 	  set_status("Free:");
 10641              		.loc 1 2366 2 view .LVU3450
2366:src/display.c **** 	  set_status("Free:");
 10642              		.loc 1 2366 5 is_stmt 0 view .LVU3451
 10643 0828 00F09F81 		beq	.L1244
2374:src/display.c **** 	  /* Top line */
 10644              		.loc 1 2374 7 is_stmt 1 view .LVU3452
2374:src/display.c **** 	  /* Top line */
 10645              		.loc 1 2374 10 is_stmt 0 view .LVU3453
 10646 082c 5A1C     		adds	r2, r3, #1
 10647 082e 00F01682 		beq	.L1245
 10648              	.LBB617:
2391:src/display.c **** 	  int end;
 10649              		.loc 1 2391 4 is_stmt 1 view .LVU3454
2392:src/display.c **** 	  int group = 10;
 10650              		.loc 1 2392 4 view .LVU3455
2393:src/display.c **** 	  int start = 0;
 10651              		.loc 1 2393 4 view .LVU3456
 10652              	.LVL1205:
2394:src/display.c **** 		
 10653              		.loc 1 2394 4 view .LVU3457
2396:src/display.c **** 	    base = 10 * status;
 10654              		.loc 1 2396 4 view .LVU3458
2396:src/display.c **** 	    base = 10 * status;
 10655              		.loc 1 2396 7 is_stmt 0 view .LVU3459
 10656 0832 092B     		cmp	r3, #9
 10657 0834 40F35C81 		ble	.L1246
2406:src/display.c **** 	    base = regX_idx;
 10658              		.loc 1 2406 9 is_stmt 1 view .LVU3460
2406:src/display.c **** 	    base = regX_idx;
 10659              		.loc 1 2406 12 is_stmt 0 view .LVU3461
ARM GAS  /tmp/ccKZqSeG.s 			page 309


 10660 0838 0A2B     		cmp	r3, #10
 10661 083a 00F0F681 		beq	.L1247
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10662              		.loc 1 2414 6 is_stmt 1 view .LVU3462
 10663              	.LVL1206:
2415:src/display.c **** 	    set_status("FL.00-.15");
 10664              		.loc 1 2415 6 view .LVU3463
2416:src/display.c **** 	  }
 10665              		.loc 1 2416 6 view .LVU3464
 10666 083e 4348     		ldr	r0, .L1264+28
 10667 0840 FFF7FEFF 		bl	set_status
 10668              	.LVL1207:
2415:src/display.c **** 	    set_status("FL.00-.15");
 10669              		.loc 1 2415 10 is_stmt 0 view .LVU3465
 10670 0844 7F23     		movs	r3, #127
 10671 0846 0293     		str	r3, [sp, #8]
2394:src/display.c **** 		
 10672              		.loc 1 2394 8 view .LVU3466
 10673 0848 4FF0000A 		mov	r10, #0
 10674              	.LVL1208:
2393:src/display.c **** 	  int start = 0;
 10675              		.loc 1 2393 8 view .LVU3467
 10676 084c 4FF00A09 		mov	r9, #10
 10677              	.LVL1209:
2414:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10678              		.loc 1 2414 11 view .LVU3468
 10679 0850 7023     		movs	r3, #112
 10680              	.LVL1210:
 10681              	.L979:
2418:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10682              		.loc 1 2418 4 is_stmt 1 view .LVU3469
2418:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10683              		.loc 1 2418 6 is_stmt 0 view .LVU3470
 10684 0852 0AEBCA05 		add	r5, r10, r10, lsl #3
 10685              	.LVL1211:
2419:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10686              		.loc 1 2419 4 is_stmt 1 view .LVU3471
 10687              	.LBB618:
 10688              	.LBI618:
 293:src/display.c ****   if (res) {
 10689              		.loc 1 293 14 view .LVU3472
 10690              	.LBE618:
 10691              	.LBE617:
 10692              	.LBE616:
 10693              	.LBE615:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10694              		.loc 1 294 3 view .LVU3473
 10695              	.LBB656:
 10696              	.LBB644:
 10697              	.LBB636:
 10698              	.LBB621:
 10699              	.LBB619:
 10700              	.LBI619:
 293:src/display.c ****   if (res) {
 10701              		.loc 1 293 14 view .LVU3474
 10702              	.LBB620:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
ARM GAS  /tmp/ccKZqSeG.s 			page 310


 10703              		.loc 1 297 5 view .LVU3475
 10704 0856 E81D     		adds	r0, r5, #7
 10705 0858 0093     		str	r3, [sp]
 10706 085a FFF7FEFF 		bl	set_dot
 10707              	.LVL1212:
 298:src/display.c ****       set_dot(posn+8);
 10708              		.loc 1 298 5 view .LVU3476
 301:src/display.c **** }
 10709              		.loc 1 301 3 view .LVU3477
 301:src/display.c **** }
 10710              		.loc 1 301 3 is_stmt 0 view .LVU3478
 10711              	.LBE620:
 10712              	.LBE619:
 10713              	.LBE621:
 10714              	.LBE636:
 10715              	.LBE644:
 10716              	.LBE656:
 301:src/display.c **** }
 10717              		.loc 1 301 3 is_stmt 1 view .LVU3479
 10718              	.LBB657:
 10719              	.LBB645:
 10720              	.LBB637:
2420:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10721              		.loc 1 2420 4 view .LVU3480
 10722 085e 009B     		ldr	r3, [sp]
 10723 0860 0496     		str	r6, [sp, #16]
 10724 0862 CAEB4901 		rsb	r1, r10, r9, lsl #1
 10725 0866 CA18     		adds	r2, r1, r3
 10726 0868 0392     		str	r2, [sp, #12]
2421:src/display.c **** 	    int k = i + base - start;
 10727              		.loc 1 2421 30 is_stmt 0 view .LVU3481
 10728 086a 0AEB0902 		add	r2, r10, r9
 10729 086e 9944     		add	r9, r9, r3
 10730              	.LVL1213:
2421:src/display.c **** 	    int k = i + base - start;
 10731              		.loc 1 2421 30 view .LVU3482
 10732 0870 A3EB0A03 		sub	r3, r3, r10
 10733 0874 029E     		ldr	r6, [sp, #8]
 10734 0876 0092     		str	r2, [sp]
2420:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10735              		.loc 1 2420 6 view .LVU3483
 10736 0878 0935     		adds	r5, r5, #9
 10737              	.LVL1214:
2421:src/display.c **** 	    int k = i + base - start;
 10738              		.loc 1 2421 4 is_stmt 1 view .LVU3484
2421:src/display.c **** 	    int k = i + base - start;
 10739              		.loc 1 2421 20 view .LVU3485
 10740 087a 0193     		str	r3, [sp, #4]
 10741 087c 12E0     		b	.L983
 10742              	.LVL1215:
 10743              	.L981:
 10744              	.LBB622:
2431:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10745              		.loc 1 2431 6 view .LVU3486
 10746 087e 2846     		mov	r0, r5
 10747 0880 FFF7FEFF 		bl	set_dig
 10748              	.LVL1216:
ARM GAS  /tmp/ccKZqSeG.s 			page 311


2432:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10749              		.loc 1 2432 6 view .LVU3487
 10750              	.LBB623:
 10751              	.LBI623:
 293:src/display.c ****   if (res) {
 10752              		.loc 1 293 14 view .LVU3488
 10753              	.LBE623:
 10754              	.LBE622:
 10755              	.LBE637:
 10756              	.LBE645:
 10757              	.LBE657:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10758              		.loc 1 294 3 view .LVU3489
 10759              	.LBB658:
 10760              	.LBB646:
 10761              	.LBB638:
 10762              	.LBB631:
 10763              	.LBB626:
 10764              	.LBB624:
 10765              	.LBI624:
 293:src/display.c ****   if (res) {
 10766              		.loc 1 293 14 view .LVU3490
 10767              	.LBB625:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10768              		.loc 1 297 5 view .LVU3491
 10769 0884 E81D     		adds	r0, r5, #7
 10770 0886 FFF7FEFF 		bl	set_dot
 10771              	.LVL1217:
 298:src/display.c ****       set_dot(posn+8);
 10772              		.loc 1 298 5 view .LVU3492
 301:src/display.c **** }
 10773              		.loc 1 301 3 view .LVU3493
 301:src/display.c **** }
 10774              		.loc 1 301 3 is_stmt 0 view .LVU3494
 10775              	.LBE625:
 10776              	.LBE624:
 10777              	.LBE626:
 10778              	.LBE631:
 10779              	.LBE638:
 10780              	.LBE646:
 10781              	.LBE658:
 301:src/display.c **** }
 10782              		.loc 1 301 3 is_stmt 1 view .LVU3495
 10783              	.LBB659:
 10784              	.LBB647:
 10785              	.LBB639:
 10786              	.LBB632:
2433:src/display.c **** 	    if (i == 4) {
 10787              		.loc 1 2433 6 view .LVU3496
2434:src/display.c **** 	      set_dig(j, 8);
 10788              		.loc 1 2434 9 is_stmt 0 view .LVU3497
 10789 088a BAF1040F 		cmp	r10, #4
2433:src/display.c **** 	    if (i == 4) {
 10790              		.loc 1 2433 8 view .LVU3498
 10791 088e 05F10900 		add	r0, r5, #9
 10792              	.LVL1218:
2434:src/display.c **** 	      set_dig(j, 8);
ARM GAS  /tmp/ccKZqSeG.s 			page 312


 10793              		.loc 1 2434 6 is_stmt 1 view .LVU3499
2434:src/display.c **** 	      set_dig(j, 8);
 10794              		.loc 1 2434 9 is_stmt 0 view .LVU3500
 10795 0892 23D0     		beq	.L1248
2433:src/display.c **** 	    if (i == 4) {
 10796              		.loc 1 2433 8 view .LVU3501
 10797 0894 0546     		mov	r5, r0
 10798              	.LVL1219:
 10799              	.L982:
2433:src/display.c **** 	    if (i == 4) {
 10800              		.loc 1 2433 8 view .LVU3502
 10801              	.LBE632:
2421:src/display.c **** 	    int k = i + base - start;
 10802              		.loc 1 2421 39 is_stmt 1 view .LVU3503
2421:src/display.c **** 	    int k = i + base - start;
 10803              		.loc 1 2421 4 is_stmt 0 view .LVU3504
 10804 0896 009B     		ldr	r3, [sp]
2421:src/display.c **** 	    int k = i + base - start;
 10805              		.loc 1 2421 40 view .LVU3505
 10806 0898 0AF1010A 		add	r10, r10, #1
 10807              	.LVL1220:
2421:src/display.c **** 	    int k = i + base - start;
 10808              		.loc 1 2421 20 is_stmt 1 view .LVU3506
2421:src/display.c **** 	    int k = i + base - start;
 10809              		.loc 1 2421 4 is_stmt 0 view .LVU3507
 10810 089c 9A45     		cmp	r10, r3
 10811 089e 09F10109 		add	r9, r9, #1
 10812 08a2 75D0     		beq	.L1249
 10813              	.L983:
 10814              	.LBB633:
2422:src/display.c **** 	    int l = get_user_flag(k);
 10815              		.loc 1 2422 6 is_stmt 1 view .LVU3508
 10816              	.LVL1221:
2423:src/display.c **** 	    k += group;
 10817              		.loc 1 2423 6 view .LVU3509
2423:src/display.c **** 	    k += group;
 10818              		.loc 1 2423 14 is_stmt 0 view .LVU3510
 10819 08a4 019B     		ldr	r3, [sp, #4]
 10820 08a6 03EB0A00 		add	r0, r3, r10
 10821 08aa FFF7FEFF 		bl	get_user_flag
 10822              	.LVL1222:
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10823              		.loc 1 2425 9 view .LVU3511
 10824 08ae B145     		cmp	r9, r6
2423:src/display.c **** 	    k += group;
 10825              		.loc 1 2423 14 view .LVU3512
 10826 08b0 0146     		mov	r1, r0
 10827              	.LVL1223:
2424:src/display.c **** 	    if (end >= k) {
 10828              		.loc 1 2424 6 is_stmt 1 view .LVU3513
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10829              		.loc 1 2425 6 view .LVU3514
2425:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10830              		.loc 1 2425 9 is_stmt 0 view .LVU3515
 10831 08b2 E4DC     		bgt	.L981
2426:src/display.c **** 	      k += group;
 10832              		.loc 1 2426 8 is_stmt 1 view .LVU3516
ARM GAS  /tmp/ccKZqSeG.s 			page 313


 10833 08b4 0290     		str	r0, [sp, #8]
2426:src/display.c **** 	      k += group;
 10834              		.loc 1 2426 14 is_stmt 0 view .LVU3517
 10835 08b6 4846     		mov	r0, r9
 10836              	.LVL1224:
2426:src/display.c **** 	      k += group;
 10837              		.loc 1 2426 14 view .LVU3518
 10838 08b8 FFF7FEFF 		bl	get_user_flag
 10839              	.LVL1225:
2426:src/display.c **** 	      k += group;
 10840              		.loc 1 2426 14 view .LVU3519
 10841 08bc 039B     		ldr	r3, [sp, #12]
2426:src/display.c **** 	      k += group;
 10842              		.loc 1 2426 10 view .LVU3520
 10843 08be 0299     		ldr	r1, [sp, #8]
 10844 08c0 03EB0A02 		add	r2, r3, r10
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10845              		.loc 1 2428 11 view .LVU3521
 10846 08c4 9642     		cmp	r6, r2
2426:src/display.c **** 	      k += group;
 10847              		.loc 1 2426 10 view .LVU3522
 10848 08c6 41EA4001 		orr	r1, r1, r0, lsl #1
 10849              	.LVL1226:
2427:src/display.c **** 	      if (end >= k)
 10850              		.loc 1 2427 8 is_stmt 1 view .LVU3523
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10851              		.loc 1 2428 8 view .LVU3524
2428:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10852              		.loc 1 2428 11 is_stmt 0 view .LVU3525
 10853 08ca D8DB     		blt	.L981
2429:src/display.c **** 	    }
 10854              		.loc 1 2429 3 is_stmt 1 view .LVU3526
2429:src/display.c **** 	    }
 10855              		.loc 1 2429 9 is_stmt 0 view .LVU3527
 10856 08cc 1046     		mov	r0, r2
 10857 08ce 0291     		str	r1, [sp, #8]
 10858 08d0 FFF7FEFF 		bl	get_user_flag
 10859              	.LVL1227:
2429:src/display.c **** 	    }
 10860              		.loc 1 2429 5 view .LVU3528
 10861 08d4 0299     		ldr	r1, [sp, #8]
 10862 08d6 41EA8001 		orr	r1, r1, r0, lsl #2
 10863              	.LVL1228:
2429:src/display.c **** 	    }
 10864              		.loc 1 2429 5 view .LVU3529
 10865 08da D0E7     		b	.L981
 10866              	.LVL1229:
 10867              	.L1248:
2435:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10868              		.loc 1 2435 8 is_stmt 1 view .LVU3530
 10869 08dc 0821     		movs	r1, #8
 10870 08de FFF7FEFF 		bl	set_dig
 10871              	.LVL1230:
2436:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10872              		.loc 1 2436 8 view .LVU3531
 10873              	.LBB627:
 10874              	.LBI627:
ARM GAS  /tmp/ccKZqSeG.s 			page 314


 293:src/display.c ****   if (res) {
 10875              		.loc 1 293 14 view .LVU3532
 10876              	.LBE627:
 10877              	.LBE633:
 10878              	.LBE639:
 10879              	.LBE647:
 10880              	.LBE659:
 294:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10881              		.loc 1 294 3 view .LVU3533
 10882              	.LBB660:
 10883              	.LBB648:
 10884              	.LBB640:
 10885              	.LBB634:
 10886              	.LBB630:
 10887              	.LBB628:
 10888              	.LBI628:
 293:src/display.c ****   if (res) {
 10889              		.loc 1 293 14 view .LVU3534
 10890              	.LBB629:
 297:src/display.c ****     if (decimal != DECIMAL_DOT)
 10891              		.loc 1 297 5 view .LVU3535
 10892 08e2 05F11000 		add	r0, r5, #16
 10893 08e6 FFF7FEFF 		bl	set_dot
 10894              	.LVL1231:
 298:src/display.c ****       set_dot(posn+8);
 10895              		.loc 1 298 5 view .LVU3536
 301:src/display.c **** }
 10896              		.loc 1 301 3 view .LVU3537
 301:src/display.c **** }
 10897              		.loc 1 301 3 is_stmt 0 view .LVU3538
 10898              	.LBE629:
 10899              	.LBE628:
 10900              	.LBE630:
 10901              	.LBE634:
 10902              	.LBE640:
 10903              	.LBE648:
 10904              	.LBE660:
 301:src/display.c **** }
 10905              		.loc 1 301 3 is_stmt 1 view .LVU3539
 10906              	.LBB661:
 10907              	.LBB649:
 10908              	.LBB641:
 10909              	.LBB635:
2437:src/display.c **** 	    }
 10910              		.loc 1 2437 8 view .LVU3540
2437:src/display.c **** 	    }
 10911              		.loc 1 2437 10 is_stmt 0 view .LVU3541
 10912 08ea 1235     		adds	r5, r5, #18
 10913              	.LVL1232:
2437:src/display.c **** 	    }
 10914              		.loc 1 2437 10 view .LVU3542
 10915 08ec D3E7     		b	.L982
 10916              	.LVL1233:
 10917              	.L1241:
2437:src/display.c **** 	    }
 10918              		.loc 1 2437 10 view .LVU3543
 10919              	.LBE635:
ARM GAS  /tmp/ccKZqSeG.s 			page 315


 10920              	.LBE641:
 10921              	.LBE649:
 10922              	.LBE661:
 10923              	.LBB662:
2742:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10924              		.loc 1 2742 6 is_stmt 1 view .LVU3544
2742:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10925              		.loc 1 2742 9 is_stmt 0 view .LVU3545
 10926 08ee B6F5274F 		cmp	r6, #42752
 10927 08f2 7CD0     		beq	.L957
2742:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10928              		.loc 1 2742 41 discriminator 1 view .LVU3546
 10929 08f4 B6F5284F 		cmp	r6, #43008
 10930 08f8 79D0     		beq	.L957
2745:src/display.c **** 	    skip = 1;
 10931              		.loc 1 2745 8 is_stmt 1 view .LVU3547
2745:src/display.c **** 	    skip = 1;
 10932              		.loc 1 2745 14 is_stmt 0 view .LVU3548
 10933 08fa 0021     		movs	r1, #0
 10934 08fc 06F07F00 		and	r0, r6, #127
 10935 0900 FFF7FEFF 		bl	get_const
 10936              	.LVL1234:
2745:src/display.c **** 	    skip = 1;
 10937              		.loc 1 2745 8 view .LVU3549
 10938 0904 0022     		movs	r2, #0
 10939 0906 1146     		mov	r1, r2
 10940 0908 FFF7FEFF 		bl	set_x
 10941              	.LVL1235:
2746:src/display.c **** 	  } else if (State2.runmode) {
 10942              		.loc 1 2746 11 view .LVU3550
 10943 090c 4FF00109 		mov	r9, #1
 10944 0910 3FE7     		b	.L959
 10945              	.LVL1236:
 10946              	.L1240:
2746:src/display.c **** 	  } else if (State2.runmode) {
 10947              		.loc 1 2746 11 view .LVU3551
 10948              	.LBE662:
 10949              	.LBB663:
 10950              	.LBB590:
 10951              	.LBB584:
1306:src/display.c **** 	      p++;
 10952              		.loc 1 1306 8 is_stmt 1 view .LVU3552
1307:src/display.c **** 	      if (!double_dot)
 10953              		.loc 1 1307 8 view .LVU3553
1309:src/display.c **** 	    }
 10954              		.loc 1 1309 5 is_stmt 0 view .LVU3554
 10955 0912 BBF1000F 		cmp	fp, #0
1307:src/display.c **** 	      if (!double_dot)
 10956              		.loc 1 1307 9 view .LVU3555
 10957 0916 05F10105 		add	r5, r5, #1
 10958              	.LVL1237:
1308:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10959              		.loc 1 1308 8 is_stmt 1 view .LVU3556
1309:src/display.c **** 	    }
 10960              		.loc 1 1309 5 is_stmt 0 view .LVU3557
 10961 091a 14BF     		ite	ne
 10962 091c 4FF0090B 		movne	fp, #9
ARM GAS  /tmp/ccKZqSeG.s 			page 316


 10963 0920 4FF0120B 		moveq	fp, #18
 10964 0924 11E6     		b	.L1042
 10965              	.LVL1238:
 10966              	.L964:
1309:src/display.c **** 	    }
 10967              		.loc 1 1309 5 view .LVU3558
 10968              	.LBE584:
 10969              	.LBE590:
 10970              	.LBE663:
 10971              	.LBB664:
2783:src/display.c **** 	  }
 10972              		.loc 1 2783 6 is_stmt 1 view .LVU3559
 10973 0926 1EA8     		add	r0, sp, #120
 10974 0928 FFF7FEFF 		bl	set_status
 10975              	.LVL1239:
 10976              	.LBE664:
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10977              		.loc 1 2589 6 is_stmt 0 view .LVU3560
 10978 092c 2E46     		mov	r6, r5
 10979 092e 3CE7     		b	.L966
 10980              	.L1265:
 10981              		.align	2
 10982              	.L1264:
 10983 0930 00000000 		.word	.LANCHOR0
 10984 0934 00000000 		.word	ShowRegister
 10985 0938 00000000 		.word	DispPlot
 10986 093c 00000000 		.word	.LANCHOR1
 10987 0940 1C000000 		.word	.LC27
 10988 0944 00000000 		.word	main_ram
 10989 0948 00000000 		.word	multicmds
 10990 094c 6C000000 		.word	.LC38
 10991 0950 00000000 		.word	DispMsg
 10992              	.LVL1240:
 10993              	.L1238:
2804:src/display.c **** 	  skip = 1;
 10994              		.loc 1 2804 4 is_stmt 1 view .LVU3561
 10995              	.LBB665:
 10996              	.LBI665:
2461:src/display.c **** 	char buf[16];
 10997              		.loc 1 2461 19 view .LVU3562
 10998              	.LBB666:
2462:src/display.c **** 	unsigned short int pc = State2.digval;
 10999              		.loc 1 2462 2 view .LVU3563
2463:src/display.c **** 	unsigned int op = getprog(pc);
 11000              		.loc 1 2463 2 view .LVU3564
2463:src/display.c **** 	unsigned int op = getprog(pc);
 11001              		.loc 1 2463 21 is_stmt 0 view .LVU3565
 11002 0954 B4F808A0 		ldrh	r10, [r4, #8]
 11003              	.LVL1241:
2464:src/display.c **** 	int n = nLIB(pc);
 11004              		.loc 1 2464 2 is_stmt 1 view .LVU3566
2469:src/display.c **** 
 11005              		.loc 1 2469 27 is_stmt 0 view .LVU3567
 11006 0958 DFF8F4B3 		ldr	fp, .L1266+60
2464:src/display.c **** 	int n = nLIB(pc);
 11007              		.loc 1 2464 20 view .LVU3568
 11008 095c 5046     		mov	r0, r10
ARM GAS  /tmp/ccKZqSeG.s 			page 317


 11009 095e FFF7FEFF 		bl	getprog
 11010              	.LVL1242:
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 11011              		.loc 1 2468 2 view .LVU3569
 11012 0962 15A9     		add	r1, sp, #84
2464:src/display.c **** 	int n = nLIB(pc);
 11013              		.loc 1 2464 20 view .LVU3570
 11014 0964 0546     		mov	r5, r0
 11015              	.LVL1243:
2465:src/display.c **** 	unsigned short int lblpc;
 11016              		.loc 1 2465 2 is_stmt 1 view .LVU3571
2466:src/display.c **** 
 11017              		.loc 1 2466 2 view .LVU3572
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 11018              		.loc 1 2468 2 view .LVU3573
 11019 0966 FFF7FEFF 		bl	prt
 11020              	.LVL1244:
2468:src/display.c **** 	set_digits_string(libname[n], 0);
 11021              		.loc 1 2468 2 is_stmt 0 view .LVU3574
 11022 096a FFF7FEFF 		bl	set_status
 11023              	.LVL1245:
2469:src/display.c **** 
 11024              		.loc 1 2469 2 is_stmt 1 view .LVU3575
2469:src/display.c **** 
 11025              		.loc 1 2469 27 is_stmt 0 view .LVU3576
 11026 096e 4FEA9A30 		lsr	r0, r10, #14
 11027 0972 00EB8000 		add	r0, r0, r0, lsl #2
2469:src/display.c **** 
 11028              		.loc 1 2469 2 view .LVU3577
 11029 0976 5844     		add	r0, r0, fp
 11030 0978 4946     		mov	r1, r9
 11031 097a FFF7FEFF 		bl	set_digits_string
 11032              	.LVL1246:
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11033              		.loc 1 2471 2 is_stmt 1 view .LVU3578
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11034              		.loc 1 2471 5 is_stmt 0 view .LVU3579
 11035 097e 15F4704F 		tst	r5, #61440
 11036 0982 40F0DC80 		bne	.L1250
 11037              	.LVL1247:
 11038              	.L1215:
2471:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11039              		.loc 1 2471 5 view .LVU3580
 11040              	.LBE666:
 11041              	.LBE665:
2870:src/display.c ****       nostk:
 11042              		.loc 1 2870 2 is_stmt 1 view .LVU3581
 11043 0986 FFF7FEFF 		bl	show_stack
 11044              	.LVL1248:
2872:src/display.c **** 	if (!skip) {
 11045              		.loc 1 2872 2 view .LVU3582
 11046 098a FFF7FEFF 		bl	show_flags
 11047              	.LVL1249:
2873:src/display.c **** 	  if (State2.runmode) {
 11048              		.loc 1 2873 2 view .LVU3583
 11049 098e 14E7     		b	.L967
 11050              	.LVL1250:
ARM GAS  /tmp/ccKZqSeG.s 			page 318


 11051              	.L1249:
2873:src/display.c **** 	  if (State2.runmode) {
 11052              		.loc 1 2873 2 is_stmt 0 view .LVU3584
 11053 0990 049E     		ldr	r6, [sp, #16]
 11054              	.LVL1251:
 11055              	.L974:
 11056              	.LBB669:
 11057              	.LBB650:
2442:src/display.c **** 	pc = state_pc();
 11058              		.loc 1 2442 2 is_stmt 1 view .LVU3585
2443:src/display.c **** 	if (isXROM(pc))
 11059              		.loc 1 2443 2 view .LVU3586
2443:src/display.c **** 	if (isXROM(pc))
 11060              		.loc 1 2443 7 is_stmt 0 view .LVU3587
 11061 0992 DBF80030 		ldr	r3, [fp]
2443:src/display.c **** 	if (isXROM(pc))
 11062              		.loc 1 2443 5 view .LVU3588
 11063 0996 B3F8E0B7 		ldrh	fp, [r3, #2016]
 11064              	.LVL1252:
2444:src/display.c **** 	  pc = 1;
 11065              		.loc 1 2444 2 is_stmt 1 view .LVU3589
2444:src/display.c **** 	  pc = 1;
 11066              		.loc 1 2444 6 is_stmt 0 view .LVU3590
 11067 099a 4FEA9B33 		lsr	r3, fp, #14
2445:src/display.c **** 	for (n=i=0; i<4; i++) {
 11068              		.loc 1 2445 7 view .LVU3591
 11069 099e 032B     		cmp	r3, #3
 11070 09a0 08BF     		it	eq
 11071 09a2 4FF0010B 		moveq	fp, #1
 11072              	.LVL1253:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11073              		.loc 1 2446 2 is_stmt 1 view .LVU3592
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11074              		.loc 1 2446 14 view .LVU3593
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11075              		.loc 1 2446 8 is_stmt 0 view .LVU3594
 11076 09a6 4FF00009 		mov	r9, #0
 11077 09aa 6425     		movs	r5, #100
2442:src/display.c **** 	pc = state_pc();
 11078              		.loc 1 2442 4 view .LVU3595
 11079 09ac 4FF06C0A 		mov	r10, #108
 11080              	.LVL1254:
 11081              	.L987:
2447:src/display.c **** 	    if (++n == 4) {
 11082              		.loc 1 2447 4 is_stmt 1 view .LVU3596
2447:src/display.c **** 	    if (++n == 4) {
 11083              		.loc 1 2447 8 is_stmt 0 view .LVU3597
 11084 09b0 0222     		movs	r2, #2
 11085 09b2 2946     		mov	r1, r5
 11086 09b4 5846     		mov	r0, fp
 11087 09b6 FFF7FEFF 		bl	find_label_from
 11088              	.LVL1255:
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11089              		.loc 1 2448 6 is_stmt 1 view .LVU3598
2447:src/display.c **** 	    if (++n == 4) {
 11090              		.loc 1 2447 7 is_stmt 0 view .LVU3599
 11091 09ba 58B1     		cbz	r0, .L985
ARM GAS  /tmp/ccKZqSeG.s 			page 319


2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11092              		.loc 1 2448 9 view .LVU3600
 11093 09bc 09F10109 		add	r9, r9, #1
 11094              	.LVL1256:
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11095              		.loc 1 2452 8 is_stmt 1 view .LVU3601
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11096              		.loc 1 2448 9 is_stmt 0 view .LVU3602
 11097 09c0 B9F1040F 		cmp	r9, #4
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11098              		.loc 1 2452 8 view .LVU3603
 11099 09c4 A5F12301 		sub	r1, r5, #35
 11100 09c8 5046     		mov	r0, r10
2448:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11101              		.loc 1 2448 9 view .LVU3604
 11102 09ca 07D0     		beq	.L1251
2452:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11103              		.loc 1 2452 8 view .LVU3605
 11104 09cc FFF7FEFF 		bl	set_dig
 11105              	.LVL1257:
2453:src/display.c **** 	    }
 11106              		.loc 1 2453 8 is_stmt 1 view .LVU3606
2453:src/display.c **** 	    }
 11107              		.loc 1 2453 10 is_stmt 0 view .LVU3607
 11108 09d0 0AF1070A 		add	r10, r10, #7
 11109              	.LVL1258:
 11110              	.L985:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11111              		.loc 1 2446 19 is_stmt 1 view .LVU3608
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11112              		.loc 1 2446 14 view .LVU3609
 11113 09d4 0135     		adds	r5, r5, #1
 11114              	.LVL1259:
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11115              		.loc 1 2446 2 is_stmt 0 view .LVU3610
 11116 09d6 682D     		cmp	r5, #104
 11117 09d8 EAD1     		bne	.L987
2446:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11118              		.loc 1 2446 2 view .LVU3611
 11119 09da D4E7     		b	.L1215
 11120              	.LVL1260:
 11121              	.L1251:
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11122              		.loc 1 2449 8 is_stmt 1 view .LVU3612
 11123 09dc 4C21     		movs	r1, #76
 11124 09de 7320     		movs	r0, #115
 11125              	.LVL1261:
2449:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11126              		.loc 1 2449 8 is_stmt 0 view .LVU3613
 11127 09e0 FFF7FEFF 		bl	set_dig
 11128              	.LVL1262:
2450:src/display.c **** 	    } else {
 11129              		.loc 1 2450 8 is_stmt 1 view .LVU3614
 11130 09e4 4C21     		movs	r1, #76
 11131 09e6 7A20     		movs	r0, #122
 11132 09e8 FFF7FEFF 		bl	set_dig
 11133              	.LVL1263:
ARM GAS  /tmp/ccKZqSeG.s 			page 320


 11134 09ec F2E7     		b	.L985
 11135              	.LVL1264:
 11136              	.L957:
2450:src/display.c **** 	    } else {
 11137              		.loc 1 2450 8 is_stmt 0 view .LVU3615
 11138              	.LBE650:
 11139              	.LBE669:
 11140              	.LBB670:
2743:src/display.c **** 	    else
 11141              		.loc 1 2743 8 is_stmt 1 view .LVU3616
 11142 09ee C948     		ldr	r0, .L1266
 11143 09f0 0021     		movs	r1, #0
 11144 09f2 FFF7FEFF 		bl	set_digits_string
 11145              	.LVL1265:
2746:src/display.c **** 	  } else if (State2.runmode) {
 11146              		.loc 1 2746 11 is_stmt 0 view .LVU3617
 11147 09f6 4FF00109 		mov	r9, #1
2743:src/display.c **** 	    else
 11148              		.loc 1 2743 8 view .LVU3618
 11149 09fa CAE6     		b	.L959
 11150              	.LVL1266:
 11151              	.L1239:
2743:src/display.c **** 	    else
 11152              		.loc 1 2743 8 view .LVU3619
 11153              	.LBE670:
2807:src/display.c **** 	  skip = 1;
 11154              		.loc 1 2807 4 is_stmt 1 view .LVU3620
 11155              	.LBB671:
 11156              	.LBI671:
2486:src/display.c **** 	char buf[16], *bp;
 11157              		.loc 1 2486 19 view .LVU3621
 11158              	.LBB672:
2487:src/display.c **** 	int n = State2.digval;
 11159              		.loc 1 2487 2 view .LVU3622
2488:src/display.c **** 	
 11160              		.loc 1 2488 2 view .LVU3623
2488:src/display.c **** 	
 11161              		.loc 1 2488 6 is_stmt 0 view .LVU3624
 11162 09fc B4F808A0 		ldrh	r10, [r4, #8]
 11163              	.LVL1267:
2495:src/display.c **** 	  n;
 11164              		.loc 1 2495 2 is_stmt 1 view .LVU3625
 11165 0a00 0093     		str	r3, [sp]
2495:src/display.c **** 	  n;
 11166              		.loc 1 2495 54 is_stmt 0 view .LVU3626
 11167 0a02 C507     		lsls	r5, r0, #31
 11168 0a04 4CBF     		ite	mi
 11169 0a06 0AF17005 		addmi	r5, r10, #112
2488:src/display.c **** 	
 11170              		.loc 1 2488 6 view .LVU3627
 11171 0a0a 5546     		movpl	r5, r10
 11172              	.LVL1268:
2499:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11173              		.loc 1 2499 2 is_stmt 1 view .LVU3628
2499:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11174              		.loc 1 2499 5 is_stmt 0 view .LVU3629
 11175 0a0c 10F00401 		ands	r1, r0, #4
ARM GAS  /tmp/ccKZqSeG.s 			page 321


 11176 0a10 4BD0     		beq	.L995
2500:src/display.c **** 	}
 11177              		.loc 1 2500 4 is_stmt 1 view .LVU3630
2500:src/display.c **** 	}
 11178              		.loc 1 2500 15 is_stmt 0 view .LVU3631
 11179 0a12 15A9     		add	r1, sp, #84
 11180 0a14 2846     		mov	r0, r5
 11181 0a16 FFF7FEFF 		bl	alpha_rcl_s
 11182              	.LVL1269:
2500:src/display.c **** 	}
 11183              		.loc 1 2500 4 view .LVU3632
 11184 0a1a FFF7FEFF 		bl	set_status
 11185              	.LVL1270:
 11186 0a1e 009B     		ldr	r3, [sp]
 11187              	.LVL1271:
 11188              	.L996:
2522:src/display.c ****       }
 11189              		.loc 1 2522 2 is_stmt 1 view .LVU3633
 11190 0a20 0093     		str	r3, [sp]
 11191 0a22 2846     		mov	r0, r5
 11192 0a24 0021     		movs	r1, #0
 11193 0a26 FFF7FEFF 		bl	format_reg
 11194              	.LVL1272:
 11195              	.LBE672:
 11196              	.LBE671:
2808:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 11197              		.loc 1 2808 4 view .LVU3634
2809:src/display.c **** 	    annunciators();
 11198              		.loc 1 2809 4 view .LVU3635
2809:src/display.c **** 	    annunciators();
 11199              		.loc 1 2809 7 is_stmt 0 view .LVU3636
 11200 0a2a 009B     		ldr	r3, [sp]
 11201 0a2c 002B     		cmp	r3, #0
 11202 0a2e 39D1     		bne	.L1002
2809:src/display.c **** 	    annunciators();
 11203              		.loc 1 2809 25 discriminator 1 view .LVU3637
 11204 0a30 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 11205 0a32 012B     		cmp	r3, #1
 11206 0a34 30D0     		beq	.L1252
 11207              	.L1003:
2870:src/display.c ****       nostk:
 11208              		.loc 1 2870 2 is_stmt 1 view .LVU3638
 11209 0a36 FFF7FEFF 		bl	show_stack
 11210              	.LVL1273:
2872:src/display.c **** 	if (!skip) {
 11211              		.loc 1 2872 2 view .LVU3639
2589:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11212              		.loc 1 2589 6 is_stmt 0 view .LVU3640
 11213 0a3a 0026     		movs	r6, #0
2872:src/display.c **** 	if (!skip) {
 11214              		.loc 1 2872 2 view .LVU3641
 11215 0a3c FFF7FEFF 		bl	show_flags
 11216              	.LVL1274:
2873:src/display.c **** 	  if (State2.runmode) {
 11217              		.loc 1 2873 2 is_stmt 1 view .LVU3642
 11218 0a40 BBE6     		b	.L967
 11219              	.LVL1275:
ARM GAS  /tmp/ccKZqSeG.s 			page 322


 11220              	.L1004:
2860:src/display.c **** 	  if (i > 0)
 11221              		.loc 1 2860 4 view .LVU3643
2860:src/display.c **** 	  if (i > 0)
 11222              		.loc 1 2860 8 is_stmt 0 view .LVU3644
 11223 0a42 DBF80030 		ldr	r3, [fp]
 11224 0a46 B3F8E007 		ldrh	r0, [r3, #2016]
 11225              	.LVL1276:
2861:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11226              		.loc 1 2861 4 is_stmt 1 view .LVU3645
2861:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11227              		.loc 1 2861 7 is_stmt 0 view .LVU3646
 11228 0a4a 0028     		cmp	r0, #0
 11229 0a4c 00F0A780 		beq	.L1018
2862:src/display.c **** 	  else
 11230              		.loc 1 2862 6 is_stmt 1 view .LVU3647
 11231 0a50 FFF7FEFF 		bl	getprog
 11232              	.LVL1277:
2862:src/display.c **** 	  else
 11233              		.loc 1 2862 6 is_stmt 0 view .LVU3648
 11234 0a54 1EA9     		add	r1, sp, #120
 11235              	.LVL1278:
2862:src/display.c **** 	  else
 11236              		.loc 1 2862 6 view .LVU3649
 11237 0a56 FFF7FEFF 		bl	prt
 11238              	.LVL1279:
2862:src/display.c **** 	  else
 11239              		.loc 1 2862 6 view .LVU3650
 11240 0a5a FFF7FEFF 		bl	set_status
 11241              	.LVL1280:
 11242              	.L1019:
2865:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11243              		.loc 1 2865 4 is_stmt 1 view .LVU3651
 11244 0a5e 8920     		movs	r0, #137
 11245 0a60 FFF7FEFF 		bl	set_dot
 11246              	.LVL1281:
2867:src/display.c **** 	  goto nostk;
 11247              		.loc 1 2867 6 view .LVU3652
2868:src/display.c **** 	}
 11248              		.loc 1 2868 4 view .LVU3653
2872:src/display.c **** 	if (!skip) {
 11249              		.loc 1 2872 2 view .LVU3654
2867:src/display.c **** 	  goto nostk;
 11250              		.loc 1 2867 12 is_stmt 0 view .LVU3655
 11251 0a64 0126     		movs	r6, #1
2872:src/display.c **** 	if (!skip) {
 11252              		.loc 1 2872 2 view .LVU3656
 11253 0a66 FFF7FEFF 		bl	show_flags
 11254              	.LVL1282:
 11255              	.L1214:
2873:src/display.c **** 	  if (State2.runmode) {
 11256              		.loc 1 2873 2 is_stmt 1 view .LVU3657
 11257 0a6a AB4B     		ldr	r3, .L1266+4
 11258 0a6c DFF8E492 		ldr	r9, .L1266+64
 11259 0a70 0093     		str	r3, [sp]
 11260 0a72 FFF708BB 		b	.L934
 11261              	.LVL1283:
ARM GAS  /tmp/ccKZqSeG.s 			page 323


 11262              	.L1005:
2819:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11263              		.loc 1 2819 11 view .LVU3658
2819:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11264              		.loc 1 2819 15 is_stmt 0 view .LVU3659
 11265 0a76 A84A     		ldr	r2, .L1266+4
 11266 0a78 0092     		str	r2, [sp]
 11267 0a7a B2F90020 		ldrsh	r2, [r2]
2819:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11268              		.loc 1 2819 14 view .LVU3660
 11269 0a7e 002A     		cmp	r2, #0
 11270 0a80 40F01281 		bne	.L1253
2821:src/display.c **** 	    bp = scopy(buf, Alpha);
 11271              		.loc 1 2821 11 is_stmt 1 view .LVU3661
2821:src/display.c **** 	    bp = scopy(buf, Alpha);
 11272              		.loc 1 2821 14 is_stmt 0 view .LVU3662
 11273 0a84 0107     		lsls	r1, r0, #28
 11274 0a86 00F16781 		bmi	.L1254
 11275              	.LVL1284:
2870:src/display.c ****       nostk:
 11276              		.loc 1 2870 2 is_stmt 1 view .LVU3663
 11277 0a8a FFF7FEFF 		bl	show_stack
 11278              	.LVL1285:
2872:src/display.c **** 	if (!skip) {
 11279              		.loc 1 2872 2 view .LVU3664
2853:src/display.c **** 	  }
 11280              		.loc 1 2853 12 is_stmt 0 view .LVU3665
 11281 0a8e 0126     		movs	r6, #1
2872:src/display.c **** 	if (!skip) {
 11282              		.loc 1 2872 2 view .LVU3666
 11283 0a90 FFF7FEFF 		bl	show_flags
 11284              	.LVL1286:
2873:src/display.c **** 	  if (State2.runmode) {
 11285              		.loc 1 2873 2 is_stmt 1 view .LVU3667
 11286 0a94 FFF7F7BA 		b	.L934
 11287              	.LVL1287:
 11288              	.L1252:
2809:src/display.c **** 	    annunciators();
 11289              		.loc 1 2809 56 is_stmt 0 discriminator 2 view .LVU3668
 11290 0a98 DBF80030 		ldr	r3, [fp]
 11291 0a9c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11292 0aa0 D907     		lsls	r1, r3, #31
 11293 0aa2 C8D5     		bpl	.L1003
 11294              	.L1002:
2810:src/display.c **** 	  }
 11295              		.loc 1 2810 6 is_stmt 1 view .LVU3669
 11296 0aa4 FFF7FEFF 		bl	annunciators
 11297              	.LVL1288:
 11298 0aa8 6DE7     		b	.L1215
 11299              	.LVL1289:
 11300              	.L995:
 11301              	.LBB675:
 11302              	.LBB673:
2503:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11303              		.loc 1 2503 4 view .LVU3670
 11304 0aaa 0DF15409 		add	r9, sp, #84
 11305 0aae 1022     		movs	r2, #16
ARM GAS  /tmp/ccKZqSeG.s 			page 324


 11306 0ab0 4846     		mov	r0, r9
 11307 0ab2 FFF7FEFF 		bl	xset
 11308              	.LVL1290:
2507:src/display.c **** #endif
 11309              		.loc 1 2507 4 view .LVU3671
2507:src/display.c **** #endif
 11310              		.loc 1 2507 9 is_stmt 0 view .LVU3672
 11311 0ab6 9949     		ldr	r1, .L1266+8
 11312 0ab8 4846     		mov	r0, r9
 11313 0aba FFF7FEFF 		bl	scopy_spc
 11314              	.LVL1291:
2509:src/display.c **** 	    *bp++ = '.';
 11315              		.loc 1 2509 8 view .LVU3673
 11316 0abe A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 11317              	.LVL1292:
2509:src/display.c **** 	    *bp++ = '.';
 11318              		.loc 1 2509 4 is_stmt 1 view .LVU3674
2509:src/display.c **** 	    *bp++ = '.';
 11319              		.loc 1 2509 7 is_stmt 0 view .LVU3675
 11320 0ac0 009B     		ldr	r3, [sp]
 11321 0ac2 12F0010F 		tst	r2, #1
 11322 0ac6 00F0C080 		beq	.L997
2510:src/display.c **** 	    if (n >= 100) {
 11323              		.loc 1 2510 6 is_stmt 1 view .LVU3676
 11324              	.LVL1293:
2510:src/display.c **** 	    if (n >= 100) {
 11325              		.loc 1 2510 12 is_stmt 0 view .LVU3677
 11326 0aca 2E22     		movs	r2, #46
2511:src/display.c **** 	      *bp++ = '1';
 11327              		.loc 1 2511 9 view .LVU3678
 11328 0acc BAF1630F 		cmp	r10, #99
2510:src/display.c **** 	    if (n >= 100) {
 11329              		.loc 1 2510 12 view .LVU3679
 11330 0ad0 0270     		strb	r2, [r0]
2511:src/display.c **** 	      *bp++ = '1';
 11331              		.loc 1 2511 6 is_stmt 1 view .LVU3680
2511:src/display.c **** 	      *bp++ = '1';
 11332              		.loc 1 2511 9 is_stmt 0 view .LVU3681
 11333 0ad2 00F3B580 		bgt	.L998
2510:src/display.c **** 	    if (n >= 100) {
 11334              		.loc 1 2510 9 view .LVU3682
 11335 0ad6 0130     		adds	r0, r0, #1
 11336              	.LVL1294:
 11337              	.L999:
2517:src/display.c **** 	  else
 11338              		.loc 1 2517 11 view .LVU3683
 11339 0ad8 5146     		mov	r1, r10
 11340 0ada 0222     		movs	r2, #2
 11341 0adc 0093     		str	r3, [sp]
 11342              	.LVL1295:
2517:src/display.c **** 	  else
 11343              		.loc 1 2517 6 is_stmt 1 view .LVU3684
2517:src/display.c **** 	  else
 11344              		.loc 1 2517 11 is_stmt 0 view .LVU3685
 11345 0ade FFF7FEFF 		bl	num_arg_0
 11346              	.LVL1296:
2517:src/display.c **** 	  else
ARM GAS  /tmp/ccKZqSeG.s 			page 325


 11347              		.loc 1 2517 11 view .LVU3686
 11348 0ae2 009B     		ldr	r3, [sp]
 11349              	.LVL1297:
 11350              	.L1001:
2517:src/display.c **** 	  else
 11351              		.loc 1 2517 11 view .LVU3687
 11352 0ae4 0093     		str	r3, [sp]
2520:src/display.c **** 	}
 11353              		.loc 1 2520 4 is_stmt 1 view .LVU3688
 11354 0ae6 4846     		mov	r0, r9
 11355 0ae8 FFF7FEFF 		bl	set_status
 11356              	.LVL1298:
 11357 0aec 009B     		ldr	r3, [sp]
 11358 0aee 97E7     		b	.L996
 11359              	.LVL1299:
 11360              	.L1246:
2520:src/display.c **** 	}
 11361              		.loc 1 2520 4 is_stmt 0 view .LVU3689
 11362              	.LBE673:
 11363              	.LBE675:
 11364              	.LBB676:
 11365              	.LBB651:
 11366              	.LBB642:
2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11367              		.loc 1 2397 6 is_stmt 1 view .LVU3690
2397:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11368              		.loc 1 2397 11 is_stmt 0 view .LVU3691
 11369 0af0 4FF00A09 		mov	r9, #10
 11370 0af4 09FB03F3 		mul	r3, r9, r3
 11371              	.LVL1300:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11372              		.loc 1 2398 6 is_stmt 1 view .LVU3692
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11373              		.loc 1 2398 28 is_stmt 0 view .LVU3693
 11374 0af8 462B     		cmp	r3, #70
 11375 0afa 9A46     		mov	r10, r3
 11376              	.LVL1301:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11377              		.loc 1 2398 28 view .LVU3694
 11378 0afc A8BF     		it	ge
 11379 0afe 4FF0460A 		movge	r10, #70
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11380              		.loc 1 2398 10 view .LVU3695
 11381 0b02 0AF11D05 		add	r5, r10, #29
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11382              		.loc 1 2399 10 view .LVU3696
 11383 0b06 8649     		ldr	r1, .L1266+12
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11384              		.loc 1 2398 28 view .LVU3697
 11385 0b08 0093     		str	r3, [sp]
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11386              		.loc 1 2399 10 view .LVU3698
 11387 0b0a 15A8     		add	r0, sp, #84
 11388              	.LVL1302:
2398:src/display.c **** 	    p = scopy(buf, "FL ");
 11389              		.loc 1 2398 10 view .LVU3699
 11390 0b0c 0295     		str	r5, [sp, #8]
ARM GAS  /tmp/ccKZqSeG.s 			page 326


 11391              	.LVL1303:
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11392              		.loc 1 2399 6 is_stmt 1 view .LVU3700
2399:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11393              		.loc 1 2399 10 is_stmt 0 view .LVU3701
 11394 0b0e FFF7FEFF 		bl	scopy
 11395              	.LVL1304:
2400:src/display.c **** 	    *p++ = '-';
 11396              		.loc 1 2400 6 is_stmt 1 view .LVU3702
2400:src/display.c **** 	    *p++ = '-';
 11397              		.loc 1 2400 10 is_stmt 0 view .LVU3703
 11398 0b12 009B     		ldr	r3, [sp]
 11399 0b14 0222     		movs	r2, #2
 11400 0b16 1946     		mov	r1, r3
 11401 0b18 FFF7FEFF 		bl	num_arg_0
 11402              	.LVL1305:
2401:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11403              		.loc 1 2401 6 is_stmt 1 view .LVU3704
2401:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11404              		.loc 1 2401 11 is_stmt 0 view .LVU3705
 11405 0b1c 2D22     		movs	r2, #45
 11406 0b1e 00F8012B 		strb	r2, [r0], #1
 11407              	.LVL1306:
2402:src/display.c **** 	    *p = '\0';
 11408              		.loc 1 2402 6 is_stmt 1 view .LVU3706
2402:src/display.c **** 	    *p = '\0';
 11409              		.loc 1 2402 10 is_stmt 0 view .LVU3707
 11410 0b22 2946     		mov	r1, r5
 11411 0b24 0222     		movs	r2, #2
 11412 0b26 FFF7FEFF 		bl	num_arg_0
 11413              	.LVL1307:
2402:src/display.c **** 	    *p = '\0';
 11414              		.loc 1 2402 10 view .LVU3708
 11415 0b2a 0146     		mov	r1, r0
 11416              	.LVL1308:
2403:src/display.c **** 	    set_status(buf);
 11417              		.loc 1 2403 6 is_stmt 1 view .LVU3709
2403:src/display.c **** 	    set_status(buf);
 11418              		.loc 1 2403 9 is_stmt 0 view .LVU3710
 11419 0b2c 4FF0000A 		mov	r10, #0
2404:src/display.c **** 	  }
 11420              		.loc 1 2404 6 view .LVU3711
 11421 0b30 15A8     		add	r0, sp, #84
 11422              	.LVL1309:
2403:src/display.c **** 	    set_status(buf);
 11423              		.loc 1 2403 9 view .LVU3712
 11424 0b32 81F800A0 		strb	r10, [r1]
2404:src/display.c **** 	  }
 11425              		.loc 1 2404 6 is_stmt 1 view .LVU3713
 11426 0b36 FFF7FEFF 		bl	set_status
 11427              	.LVL1310:
2404:src/display.c **** 	  }
 11428              		.loc 1 2404 6 is_stmt 0 view .LVU3714
 11429 0b3a 009B     		ldr	r3, [sp]
 11430 0b3c 89E6     		b	.L979
 11431              	.LVL1311:
 11432              	.L1250:
ARM GAS  /tmp/ccKZqSeG.s 			page 327


2404:src/display.c **** 	  }
 11433              		.loc 1 2404 6 view .LVU3715
 11434              	.LBE642:
 11435              	.LBE651:
 11436              	.LBE676:
 11437              	.LBB677:
 11438              	.LBB667:
2472:src/display.c **** 	  if (lblpc != pc) {
 11439              		.loc 1 2472 4 is_stmt 1 view .LVU3716
2472:src/display.c **** 	  if (lblpc != pc) {
 11440              		.loc 1 2472 12 is_stmt 0 view .LVU3717
 11441 0b3e 2846     		mov	r0, r5
 11442 0b40 4946     		mov	r1, r9
 11443 0b42 FFF7FEFF 		bl	findmultilbl
 11444              	.LVL1312:
2472:src/display.c **** 	  if (lblpc != pc) {
 11445              		.loc 1 2472 10 view .LVU3718
 11446 0b46 85B2     		uxth	r5, r0
 11447              	.LVL1313:
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11448              		.loc 1 2473 7 view .LVU3719
 11449 0b48 AA45     		cmp	r10, r5
2472:src/display.c **** 	  if (lblpc != pc) {
 11450              		.loc 1 2472 10 view .LVU3720
 11451 0b4a 0090     		str	r0, [sp]
 11452              	.LVL1314:
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11453              		.loc 1 2473 4 is_stmt 1 view .LVU3721
2473:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11454              		.loc 1 2473 7 is_stmt 0 view .LVU3722
 11455 0b4c 3FF41BAF 		beq	.L1215
2474:src/display.c **** 	    n = nLIB(lblpc);
 11456              		.loc 1 2474 6 is_stmt 1 view .LVU3723
 11457 0b50 7448     		ldr	r0, .L1266+16
 11458 0b52 3F21     		movs	r1, #63
 11459 0b54 FFF7FEFF 		bl	set_digits_string
 11460              	.LVL1315:
2475:src/display.c **** 	    if (n == REGION_RAM)
 11461              		.loc 1 2475 6 view .LVU3724
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11462              		.loc 1 2476 6 view .LVU3725
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11463              		.loc 1 2476 9 is_stmt 0 view .LVU3726
 11464 0b58 AA0B     		lsrs	r2, r5, #14
 11465              	.LVL1316:
2476:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11466              		.loc 1 2476 9 view .LVU3727
 11467 0b5a 40F03B81 		bne	.L992
2477:src/display.c **** 	    else {
 11468              		.loc 1 2477 8 is_stmt 1 view .LVU3728
 11469 0b5e 009B     		ldr	r3, [sp]
 11470 0b60 0121     		movs	r1, #1
 11471 0b62 98B2     		uxth	r0, r3
 11472 0b64 FFF7FEFF 		bl	set_exp
 11473              	.LVL1317:
2477:src/display.c **** 	    else {
 11474              		.loc 1 2477 8 is_stmt 0 view .LVU3729
ARM GAS  /tmp/ccKZqSeG.s 			page 328


 11475 0b68 0DE7     		b	.L1215
 11476              	.LVL1318:
 11477              	.L1244:
2477:src/display.c **** 	    else {
 11478              		.loc 1 2477 8 view .LVU3730
 11479              	.LBE667:
 11480              	.LBE677:
 11481              	.LBB678:
 11482              	.LBB652:
2367:src/display.c **** 	  p = num_arg(buf, free_mem());
 11483              		.loc 1 2367 4 is_stmt 1 view .LVU3731
 11484 0b6a 6F48     		ldr	r0, .L1266+20
 11485 0b6c FFF7FEFF 		bl	set_status
 11486              	.LVL1319:
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11487              		.loc 1 2368 4 view .LVU3732
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11488              		.loc 1 2368 21 is_stmt 0 view .LVU3733
 11489 0b70 FFF7FEFF 		bl	free_mem
 11490              	.LVL1320:
 11491 0b74 0146     		mov	r1, r0
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11492              		.loc 1 2368 8 view .LVU3734
 11493 0b76 15A8     		add	r0, sp, #84
 11494              	.LVL1321:
2368:src/display.c **** 	  p = scopy(p, " , FL. ");
 11495              		.loc 1 2368 8 view .LVU3735
 11496 0b78 FFF7FEFF 		bl	num_arg
 11497              	.LVL1322:
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11498              		.loc 1 2369 4 is_stmt 1 view .LVU3736
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11499              		.loc 1 2369 8 is_stmt 0 view .LVU3737
 11500 0b7c 6B49     		ldr	r1, .L1266+24
 11501 0b7e FFF7FEFF 		bl	scopy
 11502              	.LVL1323:
2369:src/display.c **** 	  p = num_arg(p, free_flash());
 11503              		.loc 1 2369 8 view .LVU3738
 11504 0b82 0546     		mov	r5, r0
 11505              	.LVL1324:
2370:src/display.c **** 	  *p = '\0';
 11506              		.loc 1 2370 4 is_stmt 1 view .LVU3739
2370:src/display.c **** 	  *p = '\0';
 11507              		.loc 1 2370 19 is_stmt 0 view .LVU3740
 11508 0b84 FFF7FEFF 		bl	free_flash
 11509              	.LVL1325:
2370:src/display.c **** 	  *p = '\0';
 11510              		.loc 1 2370 19 view .LVU3741
 11511 0b88 0146     		mov	r1, r0
2370:src/display.c **** 	  *p = '\0';
 11512              		.loc 1 2370 8 view .LVU3742
 11513 0b8a 2846     		mov	r0, r5
 11514 0b8c FFF7FEFF 		bl	num_arg
 11515              	.LVL1326:
 11516 0b90 0346     		mov	r3, r0
 11517              	.LVL1327:
2371:src/display.c **** 	  set_digits_string(buf, 0);
ARM GAS  /tmp/ccKZqSeG.s 			page 329


 11518              		.loc 1 2371 4 is_stmt 1 view .LVU3743
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11519              		.loc 1 2371 7 is_stmt 0 view .LVU3744
 11520 0b92 0021     		movs	r1, #0
2372:src/display.c **** 	}
 11521              		.loc 1 2372 4 view .LVU3745
 11522 0b94 15A8     		add	r0, sp, #84
 11523              	.LVL1328:
2371:src/display.c **** 	  set_digits_string(buf, 0);
 11524              		.loc 1 2371 7 view .LVU3746
 11525 0b96 1970     		strb	r1, [r3]
2372:src/display.c **** 	}
 11526              		.loc 1 2372 4 is_stmt 1 view .LVU3747
 11527 0b98 FFF7FEFF 		bl	set_digits_string
 11528              	.LVL1329:
2372:src/display.c **** 	}
 11529              		.loc 1 2372 4 is_stmt 0 view .LVU3748
 11530 0b9c F9E6     		b	.L974
 11531              	.LVL1330:
 11532              	.L1018:
2372:src/display.c **** 	}
 11533              		.loc 1 2372 4 view .LVU3749
 11534              	.LBE652:
 11535              	.LBE678:
2864:src/display.c **** 	  set_dot(STO_annun);
 11536              		.loc 1 2864 6 is_stmt 1 view .LVU3750
 11537 0b9e 6448     		ldr	r0, .L1266+28
 11538              	.LVL1331:
2864:src/display.c **** 	  set_dot(STO_annun);
 11539              		.loc 1 2864 6 is_stmt 0 view .LVU3751
 11540 0ba0 FFF7FEFF 		bl	set_status
 11541              	.LVL1332:
2864:src/display.c **** 	  set_dot(STO_annun);
 11542              		.loc 1 2864 6 view .LVU3752
 11543 0ba4 5BE7     		b	.L1019
 11544              	.LVL1333:
 11545              	.L1243:
 11546              	.LBB679:
 11547              	.LBB606:
2769:src/display.c **** 	      copyreg(&z, x);
 11548              		.loc 1 2769 8 is_stmt 1 view .LVU3753
2769:src/display.c **** 	      copyreg(&z, x);
 11549              		.loc 1 2769 27 is_stmt 0 view .LVU3754
 11550 0ba6 634B     		ldr	r3, .L1266+32
 11551 0ba8 D3F80090 		ldr	r9, [r3]
 11552              	.LVL1334:
2770:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11553              		.loc 1 2770 8 is_stmt 1 view .LVU3755
 11554 0bac 15A8     		add	r0, sp, #84
 11555 0bae 4946     		mov	r1, r9
 11556 0bb0 FFF7FEFF 		bl	copyreg
 11557              	.LVL1335:
2771:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11558              		.loc 1 2771 8 view .LVU3756
 11559 0bb4 F0B2     		uxtb	r0, r6
 11560 0bb6 FFF7FEFF 		bl	sigma_val
 11561              	.LVL1336:
ARM GAS  /tmp/ccKZqSeG.s 			page 330


2772:src/display.c **** 	      copyreg(x, &z);
 11562              		.loc 1 2772 8 view .LVU3757
 11563 0bba FFF7FEFF 		bl	is_dblmode
 11564              	.LVL1337:
 11565 0bbe 0021     		movs	r1, #0
 11566 0bc0 0246     		mov	r2, r0
 11567 0bc2 4846     		mov	r0, r9
 11568 0bc4 FFF7FEFF 		bl	set_x
 11569              	.LVL1338:
2773:src/display.c **** 	      skip = 1;
 11570              		.loc 1 2773 8 view .LVU3758
 11571 0bc8 4846     		mov	r0, r9
 11572 0bca 15A9     		add	r1, sp, #84
 11573 0bcc FFF7FEFF 		bl	copyreg
 11574              	.LVL1339:
2774:src/display.c **** 	    }
 11575              		.loc 1 2774 8 view .LVU3759
2774:src/display.c **** 	    }
 11576              		.loc 1 2774 13 is_stmt 0 view .LVU3760
 11577 0bd0 4FF00109 		mov	r9, #1
 11578              	.LVL1340:
2774:src/display.c **** 	    }
 11579              		.loc 1 2774 13 view .LVU3761
 11580 0bd4 DDE5     		b	.L959
 11581              	.LVL1341:
 11582              	.L1242:
2774:src/display.c **** 	    }
 11583              		.loc 1 2774 13 view .LVU3762
 11584              	.LBE606:
 11585              	.LBB607:
2749:src/display.c **** 	      decimal64 z;
 11586              		.loc 1 2749 8 is_stmt 1 view .LVU3763
2750:src/display.c **** 
 11587              		.loc 1 2750 8 view .LVU3764
2752:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11588              		.loc 1 2752 8 view .LVU3765
 11589 0bd6 0CA8     		add	r0, sp, #48
 11590 0bd8 FFF7FEFF 		bl	getX
 11591              	.LVL1342:
2753:src/display.c **** 		const unsigned int f = argKIND(op);
 11592              		.loc 1 2753 8 view .LVU3766
2753:src/display.c **** 		const unsigned int f = argKIND(op);
 11593              		.loc 1 2753 11 is_stmt 0 view .LVU3767
 11594 0bdc C6F30723 		ubfx	r3, r6, #8, #8
 11595 0be0 022B     		cmp	r3, #2
 11596 0be2 40F0EE80 		bne	.L961
 11597              	.LBB608:
2754:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11598              		.loc 1 2754 3 is_stmt 1 view .LVU3768
2754:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11599              		.loc 1 2754 22 is_stmt 0 view .LVU3769
 11600 0be6 F6B2     		uxtb	r6, r6
 11601              	.LVL1343:
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11602              		.loc 1 2755 3 is_stmt 1 view .LVU3770
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11603              		.loc 1 2755 6 is_stmt 0 view .LVU3771
ARM GAS  /tmp/ccKZqSeG.s 			page 331


 11604 0be8 9B2E     		cmp	r6, #155
 11605              	.LBB609:
2758:src/display.c **** 		}
 11606              		.loc 1 2758 5 view .LVU3772
 11607 0bea 0DF15409 		add	r9, sp, #84
 11608              	.LBE609:
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11609              		.loc 1 2755 6 view .LVU3773
 11610 0bee 00F2E480 		bhi	.L962
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11611              		.loc 1 2755 28 discriminator 1 view .LVU3774
 11612 0bf2 1823     		movs	r3, #24
 11613 0bf4 504A     		ldr	r2, .L1266+36
 11614 0bf6 03FB06F3 		mul	r3, r3, r6
 11615 0bfa D358     		ldr	r3, [r2, r3]
2755:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11616              		.loc 1 2755 23 discriminator 1 view .LVU3775
 11617 0bfc 002B     		cmp	r3, #0
 11618 0bfe 00F0DC80 		beq	.L962
 11619              	.LBB610:
2756:src/display.c **** 		  update_speed(0);
 11620              		.loc 1 2756 5 is_stmt 1 view .LVU3776
 11621              	.LVL1344:
2757:src/display.c **** 		  fp(&r, &x);
 11622              		.loc 1 2757 20 view .LVU3777
2758:src/display.c **** 		}
 11623              		.loc 1 2758 5 view .LVU3778
 11624 0c02 0CA9     		add	r1, sp, #48
 11625 0c04 4846     		mov	r0, r9
 11626 0c06 9847     		blx	r3
 11627              	.LVL1345:
 11628              	.L963:
2758:src/display.c **** 		}
 11629              		.loc 1 2758 5 is_stmt 0 view .LVU3779
 11630              	.LBE610:
 11631              	.LBE608:
2764:src/display.c **** 	      packed_from_number(&z, &r);
 11632              		.loc 1 2764 8 is_stmt 1 discriminator 1 view .LVU3780
 11633 0c08 4C4A     		ldr	r2, .L1266+40
 11634 0c0a 4946     		mov	r1, r9
 11635 0c0c 4846     		mov	r0, r9
 11636 0c0e FFF7FEFF 		bl	decNumberNormalize
 11637              	.LVL1346:
2765:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11638              		.loc 1 2765 8 discriminator 1 view .LVU3781
 11639 0c12 4946     		mov	r1, r9
 11640 0c14 06A8     		add	r0, sp, #24
 11641 0c16 FFF7FEFF 		bl	packed_from_number
 11642              	.LVL1347:
2766:src/display.c **** 	      skip = 1;
 11643              		.loc 1 2766 8 discriminator 1 view .LVU3782
 11644 0c1a 0022     		movs	r2, #0
 11645 0c1c 06A8     		add	r0, sp, #24
 11646 0c1e 1146     		mov	r1, r2
 11647 0c20 FFF7FEFF 		bl	set_x
 11648              	.LVL1348:
2767:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
ARM GAS  /tmp/ccKZqSeG.s 			page 332


 11649              		.loc 1 2767 8 discriminator 1 view .LVU3783
2767:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11650              		.loc 1 2767 13 is_stmt 0 discriminator 1 view .LVU3784
 11651 0c24 4FF00109 		mov	r9, #1
 11652              	.LBE607:
 11653 0c28 B3E5     		b	.L959
 11654              	.LVL1349:
 11655              	.L1247:
2767:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11656              		.loc 1 2767 13 discriminator 1 view .LVU3785
 11657              	.LBE679:
 11658              	.LBB680:
 11659              	.LBB653:
 11660              	.LBB643:
2407:src/display.c **** 	    end = regK_idx;
 11661              		.loc 1 2407 6 is_stmt 1 view .LVU3786
2408:src/display.c **** 	    start = 3;
 11662              		.loc 1 2408 6 view .LVU3787
2409:src/display.c **** 	    group = 4;
 11663              		.loc 1 2409 6 view .LVU3788
2410:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11664              		.loc 1 2410 6 view .LVU3789
2411:src/display.c **** 	  }
 11665              		.loc 1 2411 6 view .LVU3790
 11666 0c2a 4548     		ldr	r0, .L1266+44
 11667 0c2c FFF7FEFF 		bl	set_status
 11668              	.LVL1350:
2408:src/display.c **** 	    start = 3;
 11669              		.loc 1 2408 10 is_stmt 0 view .LVU3791
 11670 0c30 6F23     		movs	r3, #111
 11671 0c32 0293     		str	r3, [sp, #8]
2409:src/display.c **** 	    group = 4;
 11672              		.loc 1 2409 12 view .LVU3792
 11673 0c34 4FF0030A 		mov	r10, #3
 11674              	.LVL1351:
2410:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11675              		.loc 1 2410 12 view .LVU3793
 11676 0c38 4FF00409 		mov	r9, #4
 11677              	.LVL1352:
2407:src/display.c **** 	    end = regK_idx;
 11678              		.loc 1 2407 11 view .LVU3794
 11679 0c3c 6423     		movs	r3, #100
 11680 0c3e 08E6     		b	.L979
 11681              	.LVL1353:
 11682              	.L998:
2407:src/display.c **** 	    end = regK_idx;
 11683              		.loc 1 2407 11 view .LVU3795
 11684              	.LBE643:
 11685              	.LBE653:
 11686              	.LBE680:
 11687              	.LBB681:
 11688              	.LBB674:
2512:src/display.c **** 	      n -= 100;
 11689              		.loc 1 2512 8 is_stmt 1 view .LVU3796
2512:src/display.c **** 	      n -= 100;
 11690              		.loc 1 2512 14 is_stmt 0 view .LVU3797
 11691 0c40 3122     		movs	r2, #49
ARM GAS  /tmp/ccKZqSeG.s 			page 333


 11692 0c42 4270     		strb	r2, [r0, #1]
2513:src/display.c **** 	    }
 11693              		.loc 1 2513 8 is_stmt 1 view .LVU3798
2513:src/display.c **** 	    }
 11694              		.loc 1 2513 10 is_stmt 0 view .LVU3799
 11695 0c44 AAF1640A 		sub	r10, r10, #100
 11696              	.LVL1354:
2512:src/display.c **** 	      n -= 100;
 11697              		.loc 1 2512 11 view .LVU3800
 11698 0c48 0230     		adds	r0, r0, #2
 11699              	.LVL1355:
 11700              	.L997:
2516:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11701              		.loc 1 2516 4 is_stmt 1 view .LVU3801
2516:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11702              		.loc 1 2516 7 is_stmt 0 view .LVU3802
 11703 0c4a BAF1630F 		cmp	r10, #99
 11704 0c4e 7FF743AF 		ble	.L999
2519:src/display.c **** 	  set_status(buf);
 11705              		.loc 1 2519 6 is_stmt 1 view .LVU3803
 11706              	.LVL1356:
2519:src/display.c **** 	  set_status(buf);
 11707              		.loc 1 2519 22 is_stmt 0 view .LVU3804
 11708 0c52 3C4A     		ldr	r2, .L1266+48
 11709 0c54 9244     		add	r10, r10, r2
 11710              	.LVL1357:
2519:src/display.c **** 	  set_status(buf);
 11711              		.loc 1 2519 12 view .LVU3805
 11712 0c56 1AF8642C 		ldrb	r2, [r10, #-100]	@ zero_extendqisi2
 11713 0c5a 0270     		strb	r2, [r0]
 11714 0c5c 42E7     		b	.L1001
 11715              	.LVL1358:
 11716              	.L1245:
2519:src/display.c **** 	  set_status(buf);
 11717              		.loc 1 2519 12 view .LVU3806
 11718              	.LBE674:
 11719              	.LBE681:
 11720              	.LBB682:
 11721              	.LBB654:
2376:src/display.c **** 	  if (SizeStatRegs)
 11722              		.loc 1 2376 4 is_stmt 1 view .LVU3807
2376:src/display.c **** 	  if (SizeStatRegs)
 11723              		.loc 1 2376 8 is_stmt 0 view .LVU3808
 11724 0c5e 0DF15409 		add	r9, sp, #84
 11725              	.LVL1359:
2376:src/display.c **** 	  if (SizeStatRegs)
 11726              		.loc 1 2376 8 view .LVU3809
 11727 0c62 3949     		ldr	r1, .L1266+52
 11728 0c64 4846     		mov	r0, r9
 11729 0c66 FFF7FEFF 		bl	scopy
 11730              	.LVL1360:
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11731              		.loc 1 2377 8 view .LVU3810
 11732 0c6a 384A     		ldr	r2, .L1266+56
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11733              		.loc 1 2377 7 view .LVU3811
 11734 0c6c 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccKZqSeG.s 			page 334


2376:src/display.c **** 	  if (SizeStatRegs)
 11735              		.loc 1 2376 8 view .LVU3812
 11736 0c6e 0346     		mov	r3, r0
 11737              	.LVL1361:
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11738              		.loc 1 2377 4 is_stmt 1 view .LVU3813
2377:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11739              		.loc 1 2377 7 is_stmt 0 view .LVU3814
 11740 0c70 002A     		cmp	r2, #0
 11741 0c72 40F0C380 		bne	.L1255
 11742              	.L976:
2379:src/display.c **** 	  set_status(buf);
 11743              		.loc 1 2379 4 is_stmt 1 view .LVU3815
2379:src/display.c **** 	  set_status(buf);
 11744              		.loc 1 2379 7 is_stmt 0 view .LVU3816
 11745 0c76 0022     		movs	r2, #0
 11746 0c78 1A70     		strb	r2, [r3]
2380:src/display.c **** 
 11747              		.loc 1 2380 4 is_stmt 1 view .LVU3817
 11748 0c7a 4846     		mov	r0, r9
 11749              	.LVL1362:
2380:src/display.c **** 
 11750              		.loc 1 2380 4 is_stmt 0 view .LVU3818
 11751 0c7c FFF7FEFF 		bl	set_status
 11752              	.LVL1363:
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11753              		.loc 1 2383 4 is_stmt 1 view .LVU3819
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11754              		.loc 1 2383 8 is_stmt 0 view .LVU3820
 11755 0c80 FFF7FEFF 		bl	global_regs
 11756              	.LVL1364:
 11757 0c84 0146     		mov	r1, r0
 11758 0c86 4846     		mov	r0, r9
 11759 0c88 FFF7FEFF 		bl	num_arg
 11760              	.LVL1365:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11761              		.loc 1 2384 8 view .LVU3821
 11762 0c8c DBF80020 		ldr	r2, [fp]
 11763 0c90 B2F8DE27 		ldrh	r2, [r2, #2014]
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11764              		.loc 1 2384 7 view .LVU3822
 11765 0c94 1504     		lsls	r5, r2, #16
2383:src/display.c **** 	  if (LocalRegs < 0) {
 11766              		.loc 1 2383 8 view .LVU3823
 11767 0c96 0346     		mov	r3, r0
 11768              	.LVL1366:
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11769              		.loc 1 2384 4 is_stmt 1 view .LVU3824
2384:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11770              		.loc 1 2384 7 is_stmt 0 view .LVU3825
 11771 0c98 00F1A480 		bmi	.L1256
 11772              	.L977:
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11773              		.loc 1 2388 4 is_stmt 1 view .LVU3826
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11774              		.loc 1 2388 7 is_stmt 0 view .LVU3827
 11775 0c9c 0021     		movs	r1, #0
ARM GAS  /tmp/ccKZqSeG.s 			page 335


2389:src/display.c **** 	} else {
 11776              		.loc 1 2389 4 view .LVU3828
 11777 0c9e 4846     		mov	r0, r9
 11778              	.LVL1367:
2388:src/display.c **** 	  set_digits_string(buf, 0);
 11779              		.loc 1 2388 7 view .LVU3829
 11780 0ca0 1970     		strb	r1, [r3]
2389:src/display.c **** 	} else {
 11781              		.loc 1 2389 4 is_stmt 1 view .LVU3830
 11782 0ca2 FFF7FEFF 		bl	set_digits_string
 11783              	.LVL1368:
2389:src/display.c **** 	} else {
 11784              		.loc 1 2389 4 is_stmt 0 view .LVU3831
 11785 0ca6 74E6     		b	.L974
 11786              	.LVL1369:
 11787              	.L1253:
2389:src/display.c **** 	} else {
 11788              		.loc 1 2389 4 view .LVU3832
 11789              	.LBE654:
 11790              	.LBE682:
2820:src/display.c **** 	  } else if (State2.alphas) {
 11791              		.loc 1 2820 6 is_stmt 1 view .LVU3833
2820:src/display.c **** 	  } else if (State2.alphas) {
 11792              		.loc 1 2820 48 is_stmt 0 view .LVU3834
 11793 0ca8 501E     		subs	r0, r2, #1
 11794 0caa 0191     		str	r1, [sp, #4]
 11795 0cac FFF7FEFF 		bl	get_reg_n
 11796              	.LVL1370:
 11797              	.LBB683:
 11798              	.LBI683:
3348:src/display.c **** 	int glen = *graphic++;
 11799              		.loc 1 3348 19 is_stmt 1 view .LVU3835
 11800              	.LBB684:
3349:src/display.c **** 	int i, j;
 11801              		.loc 1 3349 2 view .LVU3836
3349:src/display.c **** 	int i, j;
 11802              		.loc 1 3349 6 is_stmt 0 view .LVU3837
 11803 0cb0 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 11804              	.LVL1371:
3350:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11805              		.loc 1 3350 2 is_stmt 1 view .LVU3838
3356:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11806              		.loc 1 3356 2 view .LVU3839
3356:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11807              		.loc 1 3356 5 is_stmt 0 view .LVU3840
 11808 0cb2 4BB3     		cbz	r3, .L1007
3357:src/display.c **** 
 11809              		.loc 1 3357 2 is_stmt 1 view .LVU3841
 11810              	.LVL1372:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11811              		.loc 1 3359 2 view .LVU3842
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11812              		.loc 1 3359 12 view .LVU3843
 11813 0cb4 421C     		adds	r2, r0, #1
 11814 0cb6 CDE9036A 		strd	r6, r10, [sp, #12]
 11815 0cba 0292     		str	r2, [sp, #8]
 11816 0cbc 4A2B     		cmp	r3, #74
ARM GAS  /tmp/ccKZqSeG.s 			page 336


 11817 0cbe D4BF     		ite	le
 11818 0cc0 D218     		addle	r2, r2, r3
 11819 0cc2 4A32     		addgt	r2, r2, #74
 11820 0cc4 CDF81490 		str	r9, [sp, #20]
 11821 0cc8 9146     		mov	r9, r2
 11822              	.LVL1373:
 11823              	.L1008:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11824              		.loc 1 3360 14 view .LVU3844
 11825 0cca 019B     		ldr	r3, [sp, #4]
 11826 0ccc 029E     		ldr	r6, [sp, #8]
 11827 0cce 0121     		movs	r1, #1
 11828 0cd0 01FA03F5 		lsl	r5, r1, r3
 11829 0cd4 03F1940A 		add	r10, r3, #148
 11830 0cd8 05E0     		b	.L1011
 11831              	.LVL1374:
 11832              	.L1258:
 11833              	.LBB685:
 11834              	.LBB686:
 284:src/display.c ****   else	clr_dot(n);
 11835              		.loc 1 284 11 is_stmt 0 view .LVU3845
 11836 0cda FFF7FEFF 		bl	set_dot
 11837              	.LVL1375:
 11838              	.L1010:
 284:src/display.c ****   else	clr_dot(n);
 11839              		.loc 1 284 11 view .LVU3846
 11840              	.LBE686:
 11841              	.LBE685:
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11842              		.loc 1 3360 23 is_stmt 1 view .LVU3847
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11843              		.loc 1 3360 14 view .LVU3848
3360:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11844              		.loc 1 3360 4 is_stmt 0 view .LVU3849
 11845 0cde B145     		cmp	r9, r6
 11846 0ce0 0AF1060A 		add	r10, r10, #6
 11847 0ce4 07D0     		beq	.L1257
 11848              	.LVL1376:
 11849              	.L1011:
3365:src/display.c **** #endif
 11850              		.loc 1 3365 6 is_stmt 1 view .LVU3850
 11851              	.LBB689:
 11852              	.LBI685:
 283:src/display.c ****   if (on)	set_dot(n);
 11853              		.loc 1 283 6 view .LVU3851
 11854              	.LBB687:
 284:src/display.c ****   else	clr_dot(n);
 11855              		.loc 1 284 3 view .LVU3852
 284:src/display.c ****   else	clr_dot(n);
 11856              		.loc 1 284 11 view .LVU3853
 285:src/display.c **** }
 11857              		.loc 1 285 8 view .LVU3854
 11858              	.LBE687:
 11859              	.LBE689:
3365:src/display.c **** #endif
 11860              		.loc 1 3365 37 is_stmt 0 view .LVU3855
 11861 0ce6 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccKZqSeG.s 			page 337


 11862              	.LVL1377:
 11863              	.LBB690:
 11864              	.LBB688:
 284:src/display.c ****   else	clr_dot(n);
 11865              		.loc 1 284 6 view .LVU3856
 11866 0cea 2B42     		tst	r3, r5
 284:src/display.c ****   else	clr_dot(n);
 11867              		.loc 1 284 11 view .LVU3857
 11868 0cec 5046     		mov	r0, r10
 284:src/display.c ****   else	clr_dot(n);
 11869              		.loc 1 284 6 view .LVU3858
 11870 0cee F4D1     		bne	.L1258
 285:src/display.c **** }
 11871              		.loc 1 285 8 view .LVU3859
 11872 0cf0 FFF7FEFF 		bl	clr_dot
 11873              	.LVL1378:
 11874 0cf4 F3E7     		b	.L1010
 11875              	.LVL1379:
 11876              	.L1257:
 285:src/display.c **** }
 11877              		.loc 1 285 8 view .LVU3860
 11878              	.LBE688:
 11879              	.LBE690:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11880              		.loc 1 3359 17 is_stmt 1 view .LVU3861
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11881              		.loc 1 3359 18 is_stmt 0 view .LVU3862
 11882 0cf6 019B     		ldr	r3, [sp, #4]
 11883 0cf8 0133     		adds	r3, r3, #1
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11884              		.loc 1 3359 2 view .LVU3863
 11885 0cfa 062B     		cmp	r3, #6
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11886              		.loc 1 3359 18 view .LVU3864
 11887 0cfc 0193     		str	r3, [sp, #4]
 11888              	.LVL1380:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11889              		.loc 1 3359 12 is_stmt 1 view .LVU3865
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11890              		.loc 1 3359 2 is_stmt 0 view .LVU3866
 11891 0cfe E4D1     		bne	.L1008
 11892 0d00 DDE9036A 		ldrd	r6, r10, [sp, #12]
 11893              	.LVL1381:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11894              		.loc 1 3359 2 view .LVU3867
 11895 0d04 DDF81490 		ldr	r9, [sp, #20]
 11896              	.LVL1382:
 11897              	.L1007:
3359:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11898              		.loc 1 3359 2 view .LVU3868
 11899              	.LBE684:
 11900              	.LBE683:
2870:src/display.c ****       nostk:
 11901              		.loc 1 2870 2 is_stmt 1 view .LVU3869
 11902 0d08 FFF7FEFF 		bl	show_stack
 11903              	.LVL1383:
2872:src/display.c **** 	if (!skip) {
ARM GAS  /tmp/ccKZqSeG.s 			page 338


 11904              		.loc 1 2872 2 view .LVU3870
 11905 0d0c FFF7FEFF 		bl	show_flags
 11906              	.LVL1384:
2873:src/display.c **** 	  if (State2.runmode) {
 11907              		.loc 1 2873 2 view .LVU3871
 11908 0d10 FFF7B9B9 		b	.L934
 11909              	.L1267:
 11910              		.align	2
 11911              	.L1266:
 11912 0d14 20000000 		.word	.LC30
 11913 0d18 00000000 		.word	DispPlot
 11914 0d1c 80000000 		.word	.LC40
 11915 0d20 58000000 		.word	.LC36
 11916 0d24 78000000 		.word	.LC39
 11917 0d28 2C000000 		.word	.LC31
 11918 0d2c 34000000 		.word	.LC32
 11919 0d30 88000000 		.word	.LC41
 11920 0d34 00000000 		.word	StackBase
 11921 0d38 00000000 		.word	monfuncs
 11922 0d3c 00000000 		.word	Ctx
 11923 0d40 5C000000 		.word	.LC37
 11924 0d44 9C000000 		.word	.LC28
 11925 0d48 3C000000 		.word	.LC33
 11926 0d4c 00000000 		.word	SizeStatRegs
 11927 0d50 00000000 		.word	.LANCHOR19
 11928 0d54 00000000 		.word	DispMsg
 11929              	.LVL1385:
 11930              	.L1254:
2822:src/display.c **** 	    j = State2.alpha_pos;
 11931              		.loc 1 2822 6 view .LVU3872
2822:src/display.c **** 	    j = State2.alpha_pos;
 11932              		.loc 1 2822 22 is_stmt 0 view .LVU3873
 11933 0d58 DBF80010 		ldr	r1, [fp]
2822:src/display.c **** 	    j = State2.alpha_pos;
 11934              		.loc 1 2822 11 view .LVU3874
 11935 0d5c 1EA8     		add	r0, sp, #120
 11936              	.LVL1386:
2822:src/display.c **** 	    j = State2.alpha_pos;
 11937              		.loc 1 2822 11 view .LVU3875
 11938 0d5e 01F5F661 		add	r1, r1, #1968
 11939 0d62 CDE90132 		strd	r3, r2, [sp, #4]
 11940 0d66 FFF7FEFF 		bl	scopy
 11941              	.LVL1387:
2823:src/display.c **** 	    if (j != 0) {
 11942              		.loc 1 2823 16 view .LVU3876
 11943 0d6a 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 11944              	.LVL1388:
2823:src/display.c **** 	    if (j != 0) {
 11945              		.loc 1 2823 6 is_stmt 1 view .LVU3877
2824:src/display.c **** 	      i = slen(buf);
 11946              		.loc 1 2824 6 view .LVU3878
2824:src/display.c **** 	      i = slen(buf);
 11947              		.loc 1 2824 9 is_stmt 0 view .LVU3879
 11948 0d6c 019B     		ldr	r3, [sp, #4]
 11949 0d6e 0029     		cmp	r1, #0
 11950 0d70 49D1     		bne	.L1259
2837:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
ARM GAS  /tmp/ccKZqSeG.s 			page 339


 11951              		.loc 1 2837 8 is_stmt 1 view .LVU3880
2837:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11952              		.loc 1 2837 11 is_stmt 0 view .LVU3881
 11953 0d72 2BB1     		cbz	r3, .L1016
2837:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11954              		.loc 1 2837 31 discriminator 1 view .LVU3882
 11955 0d74 25B9     		cbnz	r5, .L1016
2838:src/display.c **** 		*bp++ = '\0';
 11956              		.loc 1 2838 3 is_stmt 1 view .LVU3883
 11957              	.LVL1389:
2838:src/display.c **** 		*bp++ = '\0';
 11958              		.loc 1 2838 23 is_stmt 0 view .LVU3884
 11959 0d76 03F11002 		add	r2, r3, #16
2839:src/display.c **** 	      }
 11960              		.loc 1 2839 9 view .LVU3885
 11961 0d7a 0021     		movs	r1, #0
 11962              	.LVL1390:
2838:src/display.c **** 		*bp++ = '\0';
 11963              		.loc 1 2838 9 view .LVU3886
 11964 0d7c 0270     		strb	r2, [r0]
 11965              	.LVL1391:
2839:src/display.c **** 	      }
 11966              		.loc 1 2839 3 is_stmt 1 view .LVU3887
2839:src/display.c **** 	      }
 11967              		.loc 1 2839 9 is_stmt 0 view .LVU3888
 11968 0d7e 4170     		strb	r1, [r0, #1]
 11969              	.LVL1392:
 11970              	.L1016:
2841:src/display.c **** 	    }
 11971              		.loc 1 2841 8 view .LVU3889
 11972 0d80 1EA8     		add	r0, sp, #120
 11973 0d82 0193     		str	r3, [sp, #4]
2841:src/display.c **** 	    }
 11974              		.loc 1 2841 8 is_stmt 1 view .LVU3890
 11975 0d84 FFF7FEFF 		bl	set_status_right
 11976              	.LVL1393:
 11977 0d88 019B     		ldr	r3, [sp, #4]
 11978              	.L1015:
2843:src/display.c **** 	      bp = buf;
 11979              		.loc 1 2843 6 view .LVU3891
2843:src/display.c **** 	      bp = buf;
 11980              		.loc 1 2843 9 is_stmt 0 view .LVU3892
 11981 0d8a 002B     		cmp	r3, #0
 11982 0d8c BCD0     		beq	.L1007
2843:src/display.c **** 	      bp = buf;
 11983              		.loc 1 2843 27 discriminator 1 view .LVU3893
 11984 0d8e 002D     		cmp	r5, #0
 11985 0d90 BAD0     		beq	.L1007
2844:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11986              		.loc 1 2844 8 is_stmt 1 view .LVU3894
 11987              	.LVL1394:
2845:src/display.c **** 	      *bp++ = '\0';
 11988              		.loc 1 2845 8 view .LVU3895
2845:src/display.c **** 	      *bp++ = '\0';
 11989              		.loc 1 2845 28 is_stmt 0 view .LVU3896
 11990 0d92 1033     		adds	r3, r3, #16
 11991              	.LBB691:
ARM GAS  /tmp/ccKZqSeG.s 			page 340


 11992              	.LBB692:
3525:src/display.c **** 	if (State2.runmode) {
 11993              		.loc 1 3525 5 view .LVU3897
 11994 0d94 B7F90020 		ldrsh	r2, [r7]
 11995              	.LBE692:
 11996              	.LBE691:
2845:src/display.c **** 	      *bp++ = '\0';
 11997              		.loc 1 2845 14 view .LVU3898
 11998 0d98 8DF87830 		strb	r3, [sp, #120]
2846:src/display.c **** 	      set_status_top(buf);
 11999              		.loc 1 2846 8 is_stmt 1 view .LVU3899
 12000              	.LVL1395:
2846:src/display.c **** 	      set_status_top(buf);
 12001              		.loc 1 2846 14 is_stmt 0 view .LVU3900
 12002 0d9c 0023     		movs	r3, #0
 12003 0d9e 8DF87930 		strb	r3, [sp, #121]
2847:src/display.c **** 	      no_status_top = 1;
 12004              		.loc 1 2847 8 is_stmt 1 view .LVU3901
 12005              	.LVL1396:
 12006              	.LBB694:
 12007              	.LBI691:
3524:src/display.c **** 	if (no_status_top) return;
 12008              		.loc 1 3524 19 view .LVU3902
 12009              	.LBB693:
3525:src/display.c **** 	if (State2.runmode) {
 12010              		.loc 1 3525 2 view .LVU3903
3525:src/display.c **** 	if (State2.runmode) {
 12011              		.loc 1 3525 5 is_stmt 0 view .LVU3904
 12012 0da2 12B9     		cbnz	r2, .L1017
 12013 0da4 1EA8     		add	r0, sp, #120
 12014              	.LVL1397:
3525:src/display.c **** 	if (State2.runmode) {
 12015              		.loc 1 3525 5 view .LVU3905
 12016 0da6 FFF7FEFF 		bl	set_status_top.part.0
 12017              	.LVL1398:
 12018              	.L1017:
3525:src/display.c **** 	if (State2.runmode) {
 12019              		.loc 1 3525 5 view .LVU3906
 12020              	.LBE693:
 12021              	.LBE694:
2848:src/display.c **** 	      //annuc = 1;
 12022              		.loc 1 2848 8 is_stmt 1 view .LVU3907
2848:src/display.c **** 	      //annuc = 1;
 12023              		.loc 1 2848 22 is_stmt 0 view .LVU3908
 12024 0daa 0123     		movs	r3, #1
 12025 0dac 3B80     		strh	r3, [r7]	@ movhi
2870:src/display.c ****       nostk:
 12026              		.loc 1 2870 2 is_stmt 1 view .LVU3909
 12027 0dae FFF7FEFF 		bl	show_stack
 12028              	.LVL1399:
2872:src/display.c **** 	if (!skip) {
 12029              		.loc 1 2872 2 view .LVU3910
 12030 0db2 FFF7FEFF 		bl	show_flags
 12031              	.LVL1400:
2873:src/display.c **** 	  if (State2.runmode) {
 12032              		.loc 1 2873 2 view .LVU3911
 12033 0db6 FFF766B9 		b	.L934
ARM GAS  /tmp/ccKZqSeG.s 			page 341


 12034              	.LVL1401:
 12035              	.L962:
 12036              	.LBB695:
 12037              	.LBB612:
 12038              	.LBB611:
2761:src/display.c **** 	      } else
 12039              		.loc 1 2761 5 view .LVU3912
 12040 0dba 4846     		mov	r0, r9
 12041 0dbc FFF7FEFF 		bl	set_NaN
 12042              	.LVL1402:
 12043 0dc0 22E7     		b	.L963
 12044              	.LVL1403:
 12045              	.L961:
2761:src/display.c **** 	      } else
 12046              		.loc 1 2761 5 is_stmt 0 view .LVU3913
 12047              	.LBE611:
2763:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12048              		.loc 1 2763 3 is_stmt 1 view .LVU3914
 12049 0dc2 0DF15409 		add	r9, sp, #84
 12050 0dc6 0CAA     		add	r2, sp, #48
 12051 0dc8 06F07F01 		and	r1, r6, #127
 12052 0dcc 4846     		mov	r0, r9
 12053 0dce FFF7FEFF 		bl	do_conv
 12054              	.LVL1404:
 12055 0dd2 19E7     		b	.L963
 12056              	.LVL1405:
 12057              	.L992:
2763:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12058              		.loc 1 2763 3 is_stmt 0 view .LVU3915
 12059              	.LBE612:
 12060              	.LBE695:
 12061              	.LBB696:
 12062              	.LBB668:
2479:src/display.c **** 	    }
 12063              		.loc 1 2479 8 is_stmt 1 view .LVU3916
2479:src/display.c **** 	    }
 12064              		.loc 1 2479 37 is_stmt 0 view .LVU3917
 12065 0dd4 02EB8202 		add	r2, r2, r2, lsl #2
 12066              	.LVL1406:
2479:src/display.c **** 	    }
 12067              		.loc 1 2479 8 view .LVU3918
 12068 0dd8 0BEB0200 		add	r0, fp, r2
 12069 0ddc 4946     		mov	r1, r9
 12070 0dde FFF7FEFF 		bl	set_exp_digits_string
 12071              	.LVL1407:
2479:src/display.c **** 	    }
 12072              		.loc 1 2479 8 view .LVU3919
 12073              	.LBE668:
 12074              	.LBE696:
2870:src/display.c ****       nostk:
 12075              		.loc 1 2870 2 is_stmt 1 view .LVU3920
 12076 0de2 D0E5     		b	.L1215
 12077              	.LVL1408:
 12078              	.L1256:
 12079              	.LBB697:
 12080              	.LBB655:
2385:src/display.c **** 	    p = num_arg(p, local_regs());
ARM GAS  /tmp/ccKZqSeG.s 			page 342


 12081              		.loc 1 2385 6 view .LVU3921
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 12082              		.loc 1 2385 10 is_stmt 0 view .LVU3922
 12083 0de4 1649     		ldr	r1, .L1268
 12084 0de6 FFF7FEFF 		bl	scopy
 12085              	.LVL1409:
2385:src/display.c **** 	    p = num_arg(p, local_regs());
 12086              		.loc 1 2385 10 view .LVU3923
 12087 0dea 0546     		mov	r5, r0
 12088              	.LVL1410:
2386:src/display.c **** 	  }
 12089              		.loc 1 2386 6 is_stmt 1 view .LVU3924
2386:src/display.c **** 	  }
 12090              		.loc 1 2386 21 is_stmt 0 view .LVU3925
 12091 0dec FFF7FEFF 		bl	local_regs
 12092              	.LVL1411:
2386:src/display.c **** 	  }
 12093              		.loc 1 2386 21 view .LVU3926
 12094 0df0 0146     		mov	r1, r0
2386:src/display.c **** 	  }
 12095              		.loc 1 2386 10 view .LVU3927
 12096 0df2 2846     		mov	r0, r5
 12097 0df4 FFF7FEFF 		bl	num_arg
 12098              	.LVL1412:
 12099 0df8 0346     		mov	r3, r0
 12100              	.LVL1413:
2386:src/display.c **** 	  }
 12101              		.loc 1 2386 10 view .LVU3928
 12102 0dfa 4FE7     		b	.L977
 12103              	.L1255:
2378:src/display.c **** 	  *p = '\0';
 12104              		.loc 1 2378 6 is_stmt 1 view .LVU3929
2378:src/display.c **** 	  *p = '\0';
 12105              		.loc 1 2378 10 is_stmt 0 view .LVU3930
 12106 0dfc 1149     		ldr	r1, .L1268+4
 12107 0dfe FFF7FEFF 		bl	scopy
 12108              	.LVL1414:
2378:src/display.c **** 	  *p = '\0';
 12109              		.loc 1 2378 10 view .LVU3931
 12110 0e02 0346     		mov	r3, r0
 12111              	.LVL1415:
2378:src/display.c **** 	  *p = '\0';
 12112              		.loc 1 2378 10 view .LVU3932
 12113 0e04 37E7     		b	.L976
 12114              	.LVL1416:
 12115              	.L1259:
2378:src/display.c **** 	  *p = '\0';
 12116              		.loc 1 2378 10 view .LVU3933
 12117              	.LBE655:
 12118              	.LBE697:
2825:src/display.c **** 	      j *= 6;
 12119              		.loc 1 2825 8 is_stmt 1 view .LVU3934
2825:src/display.c **** 	      j *= 6;
 12120              		.loc 1 2825 12 is_stmt 0 view .LVU3935
 12121 0e06 1EA8     		add	r0, sp, #120
 12122              	.LVL1417:
2825:src/display.c **** 	      j *= 6;
ARM GAS  /tmp/ccKZqSeG.s 			page 343


 12123              		.loc 1 2825 12 view .LVU3936
 12124 0e08 0391     		str	r1, [sp, #12]
 12125 0e0a FFF7FEFF 		bl	slen
 12126              	.LVL1418:
2826:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12127              		.loc 1 2826 8 is_stmt 1 view .LVU3937
2827:src/display.c **** 		{
 12128              		.loc 1 2827 8 view .LVU3938
2826:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12129              		.loc 1 2826 10 is_stmt 0 view .LVU3939
 12130 0e0e 0399     		ldr	r1, [sp, #12]
2827:src/display.c **** 		{
 12131              		.loc 1 2827 11 view .LVU3940
 12132 0e10 019B     		ldr	r3, [sp, #4]
2826:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12133              		.loc 1 2826 10 view .LVU3941
 12134 0e12 01EB4101 		add	r1, r1, r1, lsl #1
2827:src/display.c **** 		{
 12135              		.loc 1 2827 15 view .LVU3942
 12136 0e16 A0EB4100 		sub	r0, r0, r1, lsl #1
 12137              	.LVL1419:
2827:src/display.c **** 		{
 12138              		.loc 1 2827 11 view .LVU3943
 12139 0e1a 1328     		cmp	r0, #19
 12140 0e1c 09DD     		ble	.L1014
2829:src/display.c **** 		  set_status_right(buf);
 12141              		.loc 1 2829 5 is_stmt 1 view .LVU3944
2829:src/display.c **** 		  set_status_right(buf);
 12142              		.loc 1 2829 20 is_stmt 0 view .LVU3945
 12143 0e1e 28AB     		add	r3, sp, #160
 12144 0e20 1918     		adds	r1, r3, r0
 12145 0e22 029A     		ldr	r2, [sp, #8]
 12146 0e24 01F8282C 		strb	r2, [r1, #-40]
2830:src/display.c **** 		}
 12147              		.loc 1 2830 5 is_stmt 1 view .LVU3946
 12148 0e28 1EA8     		add	r0, sp, #120
 12149 0e2a FFF7FEFF 		bl	set_status_right
 12150              	.LVL1420:
 12151 0e2e 019B     		ldr	r3, [sp, #4]
 12152 0e30 ABE7     		b	.L1015
 12153              	.L1014:
2833:src/display.c **** 	      }
 12154              		.loc 1 2833 3 is_stmt 0 view .LVU3947
 12155 0e32 1EA8     		add	r0, sp, #120
 12156 0e34 0193     		str	r3, [sp, #4]
2833:src/display.c **** 	      }
 12157              		.loc 1 2833 3 is_stmt 1 view .LVU3948
 12158 0e36 FFF7FEFF 		bl	set_status
 12159              	.LVL1421:
 12160 0e3a 019B     		ldr	r3, [sp, #4]
 12161 0e3c A5E7     		b	.L1015
 12162              	.L1269:
 12163 0e3e 00BF     		.align	2
 12164              	.L1268:
 12165 0e40 4C000000 		.word	.LC35
 12166 0e44 44000000 		.word	.LC34
 12167              		.cfi_endproc
ARM GAS  /tmp/ccKZqSeG.s 			page 344


 12168              	.LFE33:
 12170              		.section	.text.frozen_display,"ax",%progbits
 12171              		.align	1
 12172              		.p2align 2,,3
 12173              		.global	frozen_display
 12174              		.syntax unified
 12175              		.thumb
 12176              		.thumb_func
 12177              		.fpu fpv4-sp-d16
 12179              	frozen_display:
 12180              	.LFB34:
3342:src/display.c **** 	State2.disp_freeze = 0;
 12181              		.loc 1 3342 7 view -0
 12182              		.cfi_startproc
 12183              		@ args = 0, pretend = 0, frame = 0
 12184              		@ frame_needed = 0, uses_anonymous_args = 0
3343:src/display.c **** 	display();
 12185              		.loc 1 3343 2 view .LVU3950
3342:src/display.c **** 	State2.disp_freeze = 0;
 12186              		.loc 1 3342 7 is_stmt 0 view .LVU3951
 12187 0000 10B5     		push	{r4, lr}
 12188              		.cfi_def_cfa_offset 8
 12189              		.cfi_offset 4, -8
 12190              		.cfi_offset 14, -4
3343:src/display.c **** 	display();
 12191              		.loc 1 3343 21 view .LVU3952
 12192 0002 064C     		ldr	r4, .L1272
 12193 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12194 0006 6FF30413 		bfc	r3, #4, #1
 12195 000a E375     		strb	r3, [r4, #23]
3344:src/display.c **** 	State2.disp_freeze = 1;
 12196              		.loc 1 3344 2 is_stmt 1 view .LVU3953
 12197 000c FFF7FEFF 		bl	display
 12198              	.LVL1422:
3345:src/display.c ****       }
 12199              		.loc 1 3345 2 view .LVU3954
3345:src/display.c ****       }
 12200              		.loc 1 3345 21 is_stmt 0 view .LVU3955
 12201 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12202 0012 43F01003 		orr	r3, r3, #16
 12203 0016 E375     		strb	r3, [r4, #23]
3346:src/display.c **** 
 12204              		.loc 1 3346 7 view .LVU3956
 12205 0018 10BD     		pop	{r4, pc}
 12206              	.L1273:
 12207 001a 00BF     		.align	2
 12208              	.L1272:
 12209 001c 00000000 		.word	StateWhileOn
 12210              		.cfi_endproc
 12211              	.LFE34:
 12213              		.section	.text.message,"ax",%progbits
 12214              		.align	1
 12215              		.p2align 2,,3
 12216              		.global	message
 12217              		.syntax unified
 12218              		.thumb
 12219              		.thumb_func
ARM GAS  /tmp/ccKZqSeG.s 			page 345


 12220              		.fpu fpv4-sp-d16
 12222              	message:
 12223              	.LVL1423:
 12224              	.LFB45:
3544:src/display.c **** 	State2.disp_freeze = 0;
 12225              		.loc 1 3544 7 is_stmt 1 view -0
 12226              		.cfi_startproc
 12227              		@ args = 0, pretend = 0, frame = 0
 12228              		@ frame_needed = 0, uses_anonymous_args = 0
3545:src/display.c **** 	State2.disp_small = 0;
 12229              		.loc 1 3545 2 view .LVU3958
3546:src/display.c **** 	WasDataEntry = 0;
 12230              		.loc 1 3546 2 view .LVU3959
3546:src/display.c **** 	WasDataEntry = 0;
 12231              		.loc 1 3546 20 is_stmt 0 view .LVU3960
 12232 0000 174A     		ldr	r2, .L1284
3544:src/display.c **** 	State2.disp_freeze = 0;
 12233              		.loc 1 3544 7 view .LVU3961
 12234 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12235              		.cfi_def_cfa_offset 24
 12236              		.cfi_offset 3, -24
 12237              		.cfi_offset 4, -20
 12238              		.cfi_offset 5, -16
 12239              		.cfi_offset 6, -12
 12240              		.cfi_offset 7, -8
 12241              		.cfi_offset 14, -4
3546:src/display.c **** 	WasDataEntry = 0;
 12242              		.loc 1 3546 20 view .LVU3962
 12243 0004 D38A     		ldrh	r3, [r2, #22]
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12244              		.loc 1 3547 15 view .LVU3963
 12245 0006 174E     		ldr	r6, .L1284+4
3546:src/display.c **** 	WasDataEntry = 0;
 12246              		.loc 1 3546 20 view .LVU3964
 12247 0008 23F48453 		bic	r3, r3, #4224
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12248              		.loc 1 3547 15 view .LVU3965
 12249 000c 0027     		movs	r7, #0
3546:src/display.c **** 	WasDataEntry = 0;
 12250              		.loc 1 3546 20 view .LVU3966
 12251 000e D382     		strh	r3, [r2, #22]	@ movhi
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12252              		.loc 1 3547 2 is_stmt 1 view .LVU3967
3548:src/display.c **** 	  // Complete redraw necessary
 12253              		.loc 1 3548 5 is_stmt 0 view .LVU3968
 12254 0010 9B05     		lsls	r3, r3, #22
3544:src/display.c **** 	State2.disp_freeze = 0;
 12255              		.loc 1 3544 7 view .LVU3969
 12256 0012 0546     		mov	r5, r0
 12257 0014 0C46     		mov	r4, r1
3547:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12258              		.loc 1 3547 15 view .LVU3970
 12259 0016 3760     		str	r7, [r6]
3548:src/display.c **** 	  // Complete redraw necessary
 12260              		.loc 1 3548 2 is_stmt 1 view .LVU3971
3548:src/display.c **** 	  // Complete redraw necessary
 12261              		.loc 1 3548 5 is_stmt 0 view .LVU3972
ARM GAS  /tmp/ccKZqSeG.s 			page 346


 12262 0018 12D5     		bpl	.L1275
3548:src/display.c **** 	  // Complete redraw necessary
 12263              		.loc 1 3548 27 discriminator 1 view .LVU3973
 12264 001a D1B1     		cbz	r1, .L1283
 12265              	.L1276:
3555:src/display.c **** 	    ShowRPN = 0;
 12266              		.loc 1 3555 6 is_stmt 1 view .LVU3974
 12267 001c FFF7FEFF 		bl	reset_disp
 12268              	.LVL1424:
3556:src/display.c **** 	    set_annunciators();
 12269              		.loc 1 3556 6 view .LVU3975
3556:src/display.c **** 	    set_annunciators();
 12270              		.loc 1 3556 14 is_stmt 0 view .LVU3976
 12271 0020 114B     		ldr	r3, .L1284+8
 12272 0022 0026     		movs	r6, #0
 12273 0024 1E60     		str	r6, [r3]
3557:src/display.c **** 	    set_digits_string( str2, 0 );
 12274              		.loc 1 3557 6 is_stmt 1 view .LVU3977
 12275 0026 FFF7FEFF 		bl	set_annunciators
 12276              	.LVL1425:
3558:src/display.c **** 	  }
 12277              		.loc 1 3558 6 view .LVU3978
 12278 002a 3146     		mov	r1, r6
 12279 002c 2046     		mov	r0, r4
 12280 002e FFF7FEFF 		bl	set_digits_string
 12281              	.LVL1426:
3560:src/display.c **** 	  finish_display();// message
 12282              		.loc 1 3560 4 view .LVU3979
 12283 0032 2846     		mov	r0, r5
 12284 0034 FFF7FEFF 		bl	set_status
 12285              	.LVL1427:
3561:src/display.c **** 	}
 12286              		.loc 1 3561 4 view .LVU3980
3563:src/display.c **** 
 12287              		.loc 1 3563 7 is_stmt 0 view .LVU3981
 12288 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12289              		.cfi_remember_state
 12290              		.cfi_restore 14
 12291              		.cfi_restore 7
 12292              		.cfi_restore 6
 12293              		.cfi_restore 5
 12294              		.cfi_restore 4
 12295              		.cfi_restore 3
 12296              		.cfi_def_cfa_offset 0
 12297              	.LVL1428:
3561:src/display.c **** 	}
 12298              		.loc 1 3561 4 view .LVU3982
 12299 003c FFF7FEBF 		b	finish_display
 12300              	.LVL1429:
 12301              	.L1275:
 12302              		.cfi_restore_state
3554:src/display.c **** 	    reset_disp();
 12303              		.loc 1 3554 4 is_stmt 1 view .LVU3983
3554:src/display.c **** 	    reset_disp();
 12304              		.loc 1 3554 7 is_stmt 0 view .LVU3984
 12305 0040 0029     		cmp	r1, #0
 12306 0042 EBD1     		bne	.L1276
ARM GAS  /tmp/ccKZqSeG.s 			page 347


3560:src/display.c **** 	  finish_display();// message
 12307              		.loc 1 3560 4 is_stmt 1 view .LVU3985
 12308 0044 2846     		mov	r0, r5
 12309              	.LVL1430:
3560:src/display.c **** 	  finish_display();// message
 12310              		.loc 1 3560 4 is_stmt 0 view .LVU3986
 12311 0046 FFF7FEFF 		bl	set_status
 12312              	.LVL1431:
3561:src/display.c **** 	}
 12313              		.loc 1 3561 4 is_stmt 1 view .LVU3987
3563:src/display.c **** 
 12314              		.loc 1 3563 7 is_stmt 0 view .LVU3988
 12315 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12316              		.cfi_remember_state
 12317              		.cfi_restore 14
 12318              		.cfi_restore 7
 12319              		.cfi_restore 6
 12320              		.cfi_restore 5
 12321              		.cfi_restore 4
 12322              		.cfi_restore 3
 12323              		.cfi_def_cfa_offset 0
 12324              	.LVL1432:
3561:src/display.c **** 	}
 12325              		.loc 1 3561 4 view .LVU3989
 12326 004e FFF7FEBF 		b	finish_display
 12327              	.LVL1433:
 12328              	.L1283:
 12329              		.cfi_restore_state
3550:src/display.c **** 	  display();
 12330              		.loc 1 3550 4 is_stmt 1 view .LVU3990
3550:src/display.c **** 	  display();
 12331              		.loc 1 3550 12 is_stmt 0 view .LVU3991
 12332 0052 064B     		ldr	r3, .L1284+12
 12333 0054 1860     		str	r0, [r3]
3551:src/display.c **** 	}
 12334              		.loc 1 3551 4 is_stmt 1 view .LVU3992
3563:src/display.c **** 
 12335              		.loc 1 3563 7 is_stmt 0 view .LVU3993
 12336 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12337              		.cfi_restore 14
 12338              		.cfi_restore 7
 12339              		.cfi_restore 6
 12340              		.cfi_restore 5
 12341              		.cfi_restore 4
 12342              		.cfi_restore 3
 12343              		.cfi_def_cfa_offset 0
3551:src/display.c **** 	}
 12344              		.loc 1 3551 4 view .LVU3994
 12345 005a FFF7FEBF 		b	display
 12346              	.LVL1434:
 12347              	.L1285:
3551:src/display.c **** 	}
 12348              		.loc 1 3551 4 view .LVU3995
 12349 005e 00BF     		.align	2
 12350              	.L1284:
 12351 0060 00000000 		.word	StateWhileOn
 12352 0064 00000000 		.word	WasDataEntry
ARM GAS  /tmp/ccKZqSeG.s 			page 348


 12353 0068 00000000 		.word	ShowRPN
 12354 006c 00000000 		.word	DispMsg
 12355              		.cfi_endproc
 12356              	.LFE45:
 12358              		.section	.text.error_message,"ax",%progbits
 12359              		.align	1
 12360              		.p2align 2,,3
 12361              		.global	error_message
 12362              		.syntax unified
 12363              		.thumb
 12364              		.thumb_func
 12365              		.fpu fpv4-sp-d16
 12367              	error_message:
 12368              	.LVL1435:
 12369              	.LFB1:
 117:src/display.c **** #define MSG1(top) top "\0"
 12370              		.loc 1 117 1 is_stmt 1 view -0
 12371              		.cfi_startproc
 12372              		@ args = 0, pretend = 0, frame = 0
 12373              		@ frame_needed = 0, uses_anonymous_args = 0
 122:src/display.c ****     {
 12374              		.loc 1 122 3 view .LVU3997
 183:src/display.c ****     const char *p = error_table[e];
 12375              		.loc 1 183 3 view .LVU3998
 183:src/display.c ****     const char *p = error_table[e];
 12376              		.loc 1 183 21 is_stmt 0 view .LVU3999
 12377 0000 334B     		ldr	r3, .L1312
 12378 0002 1B68     		ldr	r3, [r3]
 12379 0004 0343     		orrs	r3, r0, r3
 12380 0006 00D1     		bne	.L1308
 12381 0008 7047     		bx	lr
 12382              	.L1308:
 12383              	.LBB698:
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12384              		.loc 1 184 5 is_stmt 1 view .LVU4000
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12385              		.loc 1 184 17 is_stmt 0 view .LVU4001
 12386 000a 324B     		ldr	r3, .L1312+4
 12387              	.LBE698:
 117:src/display.c **** #define MSG1(top) top "\0"
 12388              		.loc 1 117 1 view .LVU4002
 12389 000c 70B5     		push	{r4, r5, r6, lr}
 12390              		.cfi_def_cfa_offset 16
 12391              		.cfi_offset 4, -16
 12392              		.cfi_offset 5, -12
 12393              		.cfi_offset 6, -8
 12394              		.cfi_offset 14, -4
 12395              	.LBB710:
 184:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12396              		.loc 1 184 17 view .LVU4003
 12397 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12398              	.LVL1436:
 185:src/display.c ****     if (*q == '\0')
 12399              		.loc 1 185 5 is_stmt 1 view .LVU4004
 12400 0012 0446     		mov	r4, r0
 185:src/display.c ****     if (*q == '\0')
 12401              		.loc 1 185 21 is_stmt 0 view .LVU4005
ARM GAS  /tmp/ccKZqSeG.s 			page 349


 12402 0014 0021     		movs	r1, #0
 12403 0016 3046     		mov	r0, r6
 12404              	.LVL1437:
 185:src/display.c ****     if (*q == '\0')
 12405              		.loc 1 185 21 view .LVU4006
 12406 0018 FFF7FEFF 		bl	find_char
 12407              	.LVL1438:
 186:src/display.c ****       q = S7_ERROR;
 12408              		.loc 1 186 5 is_stmt 1 view .LVU4007
 186:src/display.c ****       q = S7_ERROR;
 12409              		.loc 1 186 9 is_stmt 0 view .LVU4008
 12410 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 186:src/display.c ****       q = S7_ERROR;
 12411              		.loc 1 186 8 view .LVU4009
 12412 001e 002B     		cmp	r3, #0
 12413 0020 3CD0     		beq	.L1297
 188:src/display.c ****       DispMsg = p;
 12414              		.loc 1 188 8 view .LVU4010
 12415 0022 582B     		cmp	r3, #88
 185:src/display.c ****     if (*q == '\0')
 12416              		.loc 1 185 17 view .LVU4011
 12417 0024 00F10105 		add	r5, r0, #1
 12418              	.LVL1439:
 188:src/display.c ****       DispMsg = p;
 12419              		.loc 1 188 5 is_stmt 1 view .LVU4012
 188:src/display.c ****       DispMsg = p;
 12420              		.loc 1 188 8 is_stmt 0 view .LVU4013
 12421 0028 39D1     		bne	.L1289
 189:src/display.c ****       frozen_display();
 12422              		.loc 1 189 7 is_stmt 1 view .LVU4014
 12423              	.LBB699:
 12424              	.LBB700:
3343:src/display.c **** 	display();
 12425              		.loc 1 3343 21 is_stmt 0 view .LVU4015
 12426 002a 2B4C     		ldr	r4, .L1312+8
 12427              	.LVL1440:
3343:src/display.c **** 	display();
 12428              		.loc 1 3343 21 view .LVU4016
 12429              	.LBE700:
 12430              	.LBE699:
 189:src/display.c ****       frozen_display();
 12431              		.loc 1 189 15 view .LVU4017
 12432 002c 2B4A     		ldr	r2, .L1312+12
 12433              	.LBB704:
 12434              	.LBB701:
3343:src/display.c **** 	display();
 12435              		.loc 1 3343 21 view .LVU4018
 12436 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12437              	.LBE701:
 12438              	.LBE704:
 189:src/display.c ****       frozen_display();
 12439              		.loc 1 189 15 view .LVU4019
 12440 0030 1660     		str	r6, [r2]
 190:src/display.c ****     }
 12441              		.loc 1 190 7 is_stmt 1 view .LVU4020
 12442              	.LBB705:
 12443              	.LBI699:
ARM GAS  /tmp/ccKZqSeG.s 			page 350


3341:src/display.c ****       {
 12444              		.loc 1 3341 12 view .LVU4021
 12445              	.LBB702:
3343:src/display.c **** 	display();
 12446              		.loc 1 3343 2 view .LVU4022
3343:src/display.c **** 	display();
 12447              		.loc 1 3343 21 is_stmt 0 view .LVU4023
 12448 0032 6FF30413 		bfc	r3, #4, #1
 12449 0036 E375     		strb	r3, [r4, #23]
3344:src/display.c **** 	State2.disp_freeze = 1;
 12450              		.loc 1 3344 2 is_stmt 1 view .LVU4024
 12451 0038 FFF7FEFF 		bl	display
 12452              	.LVL1441:
3345:src/display.c ****       }
 12453              		.loc 1 3345 2 view .LVU4025
 12454              	.LBE702:
 12455              	.LBE705:
 201:src/display.c ****       if (*q == 'X')
 12456              		.loc 1 201 5 view .LVU4026
 12457              	.LBB706:
 12458              	.LBB703:
3345:src/display.c ****       }
 12459              		.loc 1 3345 21 is_stmt 0 view .LVU4027
 12460 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12461 003e 43F01003 		orr	r3, r3, #16
 12462 0042 E375     		strb	r3, [r4, #23]
 12463              	.LBE703:
 12464              	.LBE706:
 201:src/display.c ****       if (*q == 'X')
 12465              		.loc 1 201 9 view .LVU4028
 12466 0044 264B     		ldr	r3, .L1312+16
 201:src/display.c ****       if (*q == 'X')
 12467              		.loc 1 201 8 view .LVU4029
 12468 0046 1B68     		ldr	r3, [r3]
 12469 0048 002B     		cmp	r3, #0
 12470 004a 38D0     		beq	.L1286
 12471              	.LVL1442:
 12472              	.L1311:
 202:src/display.c **** 	print_reg(regX_idx, p, 0);
 12473              		.loc 1 202 7 is_stmt 1 view .LVU4030
 202:src/display.c **** 	print_reg(regX_idx, p, 0);
 12474              		.loc 1 202 10 is_stmt 0 view .LVU4031
 12475 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12476 004e 582B     		cmp	r3, #88
 12477 0050 36D0     		beq	.L1309
 205:src/display.c **** 	print_line(p, 0);
 12478              		.loc 1 205 2 is_stmt 1 view .LVU4032
 12479 0052 0020     		movs	r0, #0
 12480 0054 FFF7FEFF 		bl	print_tab
 12481              	.LVL1443:
 206:src/display.c **** 	print(' ');
 12482              		.loc 1 206 2 view .LVU4033
 12483 0058 3046     		mov	r0, r6
 12484 005a 0021     		movs	r1, #0
 12485 005c FFF7FEFF 		bl	print_line
 12486              	.LVL1444:
 207:src/display.c **** 	while (*q != '\0') {
ARM GAS  /tmp/ccKZqSeG.s 			page 351


 12487              		.loc 1 207 2 view .LVU4034
 12488 0060 2020     		movs	r0, #32
 12489 0062 FFF7FEFF 		bl	print
 12490              	.LVL1445:
 208:src/display.c **** 	  int c = *q;
 12491              		.loc 1 208 2 view .LVU4035
 208:src/display.c **** 	  int c = *q;
 12492              		.loc 1 208 8 view .LVU4036
 208:src/display.c **** 	  int c = *q;
 12493              		.loc 1 208 9 is_stmt 0 view .LVU4037
 12494 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 208:src/display.c **** 	  int c = *q;
 12495              		.loc 1 208 8 view .LVU4038
 12496 0068 73B9     		cbnz	r3, .L1293
 12497              	.L1296:
 217:src/display.c ****       }
 12498              		.loc 1 217 2 is_stmt 1 view .LVU4039
 12499              	.LBE710:
 222:src/display.c **** 
 12500              		.loc 1 222 1 is_stmt 0 view .LVU4040
 12501 006a BDE87040 		pop	{r4, r5, r6, lr}
 12502              		.cfi_remember_state
 12503              		.cfi_restore 14
 12504              		.cfi_restore 6
 12505              		.cfi_restore 5
 12506              		.cfi_restore 4
 12507              		.cfi_def_cfa_offset 0
 12508              	.LVL1446:
 12509              	.LBB711:
 217:src/display.c ****       }
 12510              		.loc 1 217 2 view .LVU4041
 12511 006e 0020     		movs	r0, #0
 12512 0070 FFF7FEBF 		b	print_advance
 12513              	.LVL1447:
 12514              	.L1310:
 12515              		.cfi_restore_state
 12516              	.LBB707:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12517              		.loc 1 212 4 view .LVU4042
 12518 0074 FFF7FEFF 		bl	print
 12519              	.LVL1448:
 213:src/display.c **** 	    ++q;
 12520              		.loc 1 213 4 is_stmt 1 view .LVU4043
 214:src/display.c **** 	  ++q;
 12521              		.loc 1 214 6 view .LVU4044
 213:src/display.c **** 	    ++q;
 12522              		.loc 1 213 7 is_stmt 0 view .LVU4045
 12523 0078 6D2C     		cmp	r4, #109
 214:src/display.c **** 	  ++q;
 12524              		.loc 1 214 6 view .LVU4046
 12525 007a 0CBF     		ite	eq
 12526 007c 691C     		addeq	r1, r5, #1
 12527              	.LVL1449:
 214:src/display.c **** 	  ++q;
 12528              		.loc 1 214 6 view .LVU4047
 12529 007e 2946     		movne	r1, r5
 12530              	.LVL1450:
ARM GAS  /tmp/ccKZqSeG.s 			page 352


 12531              	.L1295:
 215:src/display.c **** 	}
 12532              		.loc 1 215 4 is_stmt 1 view .LVU4048
 12533              	.LBE707:
 208:src/display.c **** 	  int c = *q;
 12534              		.loc 1 208 9 is_stmt 0 view .LVU4049
 12535 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12536              	.LBB708:
 215:src/display.c **** 	}
 12537              		.loc 1 215 4 view .LVU4050
 12538 0082 4D1C     		adds	r5, r1, #1
 12539              	.LVL1451:
 215:src/display.c **** 	}
 12540              		.loc 1 215 4 view .LVU4051
 12541              	.LBE708:
 208:src/display.c **** 	  int c = *q;
 12542              		.loc 1 208 8 is_stmt 1 view .LVU4052
 12543 0084 002B     		cmp	r3, #0
 12544 0086 F0D0     		beq	.L1296
 12545              	.LVL1452:
 12546              	.L1293:
 12547              	.LBB709:
 209:src/display.c **** 	  if (c >= 'A')
 12548              		.loc 1 209 4 view .LVU4053
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12549              		.loc 1 210 4 view .LVU4054
 211:src/display.c **** 	  print(c);
 12550              		.loc 1 211 6 view .LVU4055
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12551              		.loc 1 212 4 view .LVU4056
 12552 0088 43F06004 		orr	r4, r3, #96
 12553              	.LVL1453:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12554              		.loc 1 212 4 view .LVU4057
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12555              		.loc 1 210 7 is_stmt 0 view .LVU4058
 12556 008c 402B     		cmp	r3, #64
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12557              		.loc 1 212 4 view .LVU4059
 12558 008e 2046     		mov	r0, r4
 210:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12559              		.loc 1 210 7 view .LVU4060
 12560 0090 F0DC     		bgt	.L1310
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12561              		.loc 1 212 4 view .LVU4061
 12562 0092 1846     		mov	r0, r3
 12563 0094 FFF7FEFF 		bl	print
 12564              	.LVL1454:
 213:src/display.c **** 	    ++q;
 12565              		.loc 1 213 4 is_stmt 1 view .LVU4062
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12566              		.loc 1 212 4 is_stmt 0 view .LVU4063
 12567 0098 2946     		mov	r1, r5
 12568 009a F1E7     		b	.L1295
 12569              	.LVL1455:
 12570              	.L1297:
 212:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
ARM GAS  /tmp/ccKZqSeG.s 			page 353


 12571              		.loc 1 212 4 view .LVU4064
 12572              	.LBE709:
 187:src/display.c ****     if (*q == 'X') {
 12573              		.loc 1 187 9 view .LVU4065
 12574 009c 114D     		ldr	r5, .L1312+20
 12575              	.L1289:
 12576              	.LVL1456:
 197:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12577              		.loc 1 197 7 is_stmt 1 view .LVU4066
 12578 009e 2946     		mov	r1, r5
 12579 00a0 3046     		mov	r0, r6
 12580 00a2 FFF7FEFF 		bl	message
 12581              	.LVL1457:
 198:src/display.c ****     }
 12582              		.loc 1 198 7 view .LVU4067
 198:src/display.c ****     }
 12583              		.loc 1 198 26 is_stmt 0 view .LVU4068
 12584 00a6 0C4B     		ldr	r3, .L1312+8
 198:src/display.c ****     }
 12585              		.loc 1 198 31 view .LVU4069
 12586 00a8 003C     		subs	r4, r4, #0
 198:src/display.c ****     }
 12587              		.loc 1 198 26 view .LVU4070
 12588 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 198:src/display.c ****     }
 12589              		.loc 1 198 31 view .LVU4071
 12590 00ac 18BF     		it	ne
 12591 00ae 0124     		movne	r4, #1
 12592              	.LVL1458:
 198:src/display.c ****     }
 12593              		.loc 1 198 26 view .LVU4072
 12594 00b0 64F30412 		bfi	r2, r4, #4, #1
 12595 00b4 DA75     		strb	r2, [r3, #23]
 201:src/display.c ****       if (*q == 'X')
 12596              		.loc 1 201 5 is_stmt 1 view .LVU4073
 201:src/display.c ****       if (*q == 'X')
 12597              		.loc 1 201 9 is_stmt 0 view .LVU4074
 12598 00b6 0A4B     		ldr	r3, .L1312+16
 201:src/display.c ****       if (*q == 'X')
 12599              		.loc 1 201 8 view .LVU4075
 12600 00b8 1B68     		ldr	r3, [r3]
 12601 00ba 002B     		cmp	r3, #0
 12602 00bc C6D1     		bne	.L1311
 12603              	.LVL1459:
 12604              	.L1286:
 201:src/display.c ****       if (*q == 'X')
 12605              		.loc 1 201 8 view .LVU4076
 12606              	.LBE711:
 222:src/display.c **** 
 12607              		.loc 1 222 1 view .LVU4077
 12608 00be 70BD     		pop	{r4, r5, r6, pc}
 12609              	.LVL1460:
 12610              	.L1309:
 12611              	.LBB712:
 203:src/display.c ****       else {
 12612              		.loc 1 203 2 is_stmt 1 view .LVU4078
 12613 00c0 3146     		mov	r1, r6
ARM GAS  /tmp/ccKZqSeG.s 			page 354


 12614 00c2 0022     		movs	r2, #0
 12615              	.LBE712:
 222:src/display.c **** 
 12616              		.loc 1 222 1 is_stmt 0 view .LVU4079
 12617 00c4 BDE87040 		pop	{r4, r5, r6, lr}
 12618              		.cfi_restore 14
 12619              		.cfi_restore 6
 12620              		.cfi_restore 5
 12621              		.cfi_restore 4
 12622              		.cfi_def_cfa_offset 0
 12623              	.LVL1461:
 12624              	.LBB713:
 203:src/display.c ****       else {
 12625              		.loc 1 203 2 view .LVU4080
 12626 00c8 6420     		movs	r0, #100
 12627 00ca FFF7FEBF 		b	print_reg
 12628              	.LVL1462:
 12629              	.L1313:
 203:src/display.c ****       else {
 12630              		.loc 1 203 2 view .LVU4081
 12631 00ce 00BF     		.align	2
 12632              	.L1312:
 12633 00d0 00000000 		.word	Running
 12634 00d4 00000000 		.word	.LANCHOR21
 12635 00d8 00000000 		.word	StateWhileOn
 12636 00dc 00000000 		.word	DispMsg
 12637 00e0 00000000 		.word	Tracing
 12638 00e4 00000000 		.word	.LANCHOR20
 12639              	.LBE713:
 12640              		.cfi_endproc
 12641              	.LFE1:
 12643              		.section	.text.stopwatch_message,"ax",%progbits
 12644              		.align	1
 12645              		.p2align 2,,3
 12646              		.global	stopwatch_message
 12647              		.syntax unified
 12648              		.thumb
 12649              		.thumb_func
 12650              		.fpu fpv4-sp-d16
 12652              	stopwatch_message:
 12653              	.LVL1463:
 12654              	.LFB47:
3576:src/display.c **** 	reset_disp();
 12655              		.loc 1 3576 7 is_stmt 1 view -0
 12656              		.cfi_startproc
 12657              		@ args = 0, pretend = 0, frame = 0
 12658              		@ frame_needed = 0, uses_anonymous_args = 0
3577:src/display.c **** 	set_dot(DEG);
 12659              		.loc 1 3577 2 view .LVU4083
3576:src/display.c **** 	reset_disp();
 12660              		.loc 1 3576 7 is_stmt 0 view .LVU4084
 12661 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12662              		.cfi_def_cfa_offset 24
 12663              		.cfi_offset 3, -24
 12664              		.cfi_offset 4, -20
 12665              		.cfi_offset 5, -16
 12666              		.cfi_offset 6, -12
ARM GAS  /tmp/ccKZqSeG.s 			page 355


 12667              		.cfi_offset 7, -8
 12668              		.cfi_offset 14, -4
3576:src/display.c **** 	reset_disp();
 12669              		.loc 1 3576 7 view .LVU4085
 12670 0002 1446     		mov	r4, r2
 12671 0004 0F46     		mov	r7, r1
 12672 0006 1D46     		mov	r5, r3
 12673 0008 0646     		mov	r6, r0
3577:src/display.c **** 	set_dot(DEG);
 12674              		.loc 1 3577 2 view .LVU4086
 12675 000a FFF7FEFF 		bl	reset_disp
 12676              	.LVL1464:
3578:src/display.c **** 	set_digits_string( str2, 0 );
 12677              		.loc 1 3578 2 is_stmt 1 view .LVU4087
 12678 000e 8C20     		movs	r0, #140
 12679 0010 FFF7FEFF 		bl	set_dot
 12680              	.LVL1465:
3579:src/display.c **** 	State2.disp_small = force_small;
 12681              		.loc 1 3579 2 view .LVU4088
 12682 0014 3846     		mov	r0, r7
 12683 0016 0021     		movs	r1, #0
 12684 0018 FFF7FEFF 		bl	set_digits_string
 12685              	.LVL1466:
3580:src/display.c **** 	if( exponent!=NULL ) {
 12686              		.loc 1 3580 2 view .LVU4089
3580:src/display.c **** 	if( exponent!=NULL ) {
 12687              		.loc 1 3580 20 is_stmt 0 view .LVU4090
 12688 001c 0B4B     		ldr	r3, .L1325
 12689 001e 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 12690 0020 64F3C712 		bfi	r2, r4, #7, #1
 12691              	.LVL1467:
3580:src/display.c **** 	if( exponent!=NULL ) {
 12692              		.loc 1 3580 20 view .LVU4091
 12693 0024 9A75     		strb	r2, [r3, #22]
3581:src/display.c **** 	  stopwatch_exponent(exponent);
 12694              		.loc 1 3581 2 is_stmt 1 view .LVU4092
3581:src/display.c **** 	  stopwatch_exponent(exponent);
 12695              		.loc 1 3581 4 is_stmt 0 view .LVU4093
 12696 0026 55B1     		cbz	r5, .L1315
 12697              	.LVL1468:
 12698              	.LBB714:
 12699              	.LBB715:
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12700              		.loc 1 3569 9 is_stmt 1 view .LVU4094
 12701 0028 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12702              		.loc 1 3569 2 is_stmt 0 view .LVU4095
 12703 002a 41B1     		cbz	r1, .L1315
3568:src/display.c **** 	for (; *exponent!=0; exponent++) {
 12704              		.loc 1 3568 6 view .LVU4096
 12705 002c 6C24     		movs	r4, #108
 12706              	.LVL1469:
 12707              	.L1316:
3570:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 12708              		.loc 1 3570 4 is_stmt 1 view .LVU4097
 12709              	.LBB716:
 12710              	.LBI716:
ARM GAS  /tmp/ccKZqSeG.s 			page 356


 339:src/display.c ****   if (res) *res++ = ch;
 12711              		.loc 1 339 14 view .LVU4098
 12712              	.LBB717:
 340:src/display.c ****   else	set_dig(base, ch);
 12713              		.loc 1 340 3 view .LVU4099
 341:src/display.c ****   return res;
 12714              		.loc 1 341 8 view .LVU4100
 12715 002e 2046     		mov	r0, r4
 12716 0030 FFF7FEFF 		bl	set_dig
 12717              	.LVL1470:
 342:src/display.c **** }
 12718              		.loc 1 342 3 view .LVU4101
 342:src/display.c **** }
 12719              		.loc 1 342 3 is_stmt 0 view .LVU4102
 12720              	.LBE717:
 12721              	.LBE716:
3571:src/display.c **** 	}
 12722              		.loc 1 3571 4 is_stmt 1 view .LVU4103
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12723              		.loc 1 3569 9 is_stmt 0 view .LVU4104
 12724 0034 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 12725              	.LVL1471:
3571:src/display.c **** 	}
 12726              		.loc 1 3571 6 view .LVU4105
 12727 0038 0734     		adds	r4, r4, #7
 12728              	.LVL1472:
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12729              		.loc 1 3569 23 is_stmt 1 view .LVU4106
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12730              		.loc 1 3569 9 view .LVU4107
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12731              		.loc 1 3569 2 is_stmt 0 view .LVU4108
 12732 003a 0029     		cmp	r1, #0
 12733 003c F7D1     		bne	.L1316
 12734              	.LVL1473:
 12735              	.L1315:
3569:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12736              		.loc 1 3569 2 view .LVU4109
 12737              	.LBE715:
 12738              	.LBE714:
3584:src/display.c **** 	finish_display();
 12739              		.loc 1 3584 2 is_stmt 1 view .LVU4110
 12740 003e 3046     		mov	r0, r6
 12741 0040 FFF7FEFF 		bl	set_status
 12742              	.LVL1474:
3585:src/display.c ****       }
 12743              		.loc 1 3585 2 view .LVU4111
3586:src/display.c **** 
 12744              		.loc 1 3586 7 is_stmt 0 view .LVU4112
 12745 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12746              		.cfi_restore 14
 12747              		.cfi_restore 7
 12748              		.cfi_restore 6
 12749              		.cfi_restore 5
 12750              		.cfi_restore 4
 12751              		.cfi_restore 3
 12752              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccKZqSeG.s 			page 357


 12753              	.LVL1475:
3585:src/display.c ****       }
 12754              		.loc 1 3585 2 view .LVU4113
 12755 0048 FFF7FEBF 		b	finish_display
 12756              	.LVL1476:
 12757              	.L1326:
 12758              		.align	2
 12759              	.L1325:
 12760 004c 00000000 		.word	StateWhileOn
 12761              		.cfi_endproc
 12762              	.LFE47:
 12764              		.section	.rodata.str1.4,"aMS",%progbits,1
 12765              		.align	2
 12766              	.LC43:
 12767 0000 06316306 		.ascii	"\0061c\006\006\000"
 12767      0600
 12768 0006 0000     		.align	2
 12769              	.LC44:
 12770 0008 756E0600 		.ascii	"un\006\000"
 12771              		.align	2
 12772              	.LC45:
 12773 000c 736D00   		.ascii	"sm\000"
 12774              		.set	CSWTCH.370,CSWTCH.368
 12775              		.global	DIGITS
 12776              		.comm	IntMaxWindow,4,4
 12777              		.comm	JustDisplayed,4,4
 12778              		.comm	ShowRPN,4,4
 12779              		.global	no_status_top
 12780              		.comm	DispPlot,2,2
 12781              		.comm	DispMsg,4,4
 12782              		.global	SvnRevision
 12783              		.section	.rodata
 12784              		.align	2
 12785              		.set	.LANCHOR14,. + 0
 12786              	.LC20:
 12787 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12787      22002E00 
 12787      00
 12788 0009 000000   		.space	3
 12789              	.LC24:
 12790 000c 33345306 		.ascii	"34S\0063.3\222TC\000"
 12790      332E3392 
 12790      544300
 12791 0017 00000000 		.space	4
 12792 001b 00       		.space	1
 12793              	.LC46:
 12794 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12794      696E6700 
 12794      50726F47 
 12794      72614D6D 
 12794      00
 12795 002d 000000   		.space	3
 12796              	.LC47:
 12797 0030 446F6D61 		.ascii	"Domain\000\000"
 12797      696E0000 
 12798              	.LC48:
 12799 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
ARM GAS  /tmp/ccKZqSeG.s 			page 358


 12799      74696D65 
 12799      006F7220 
 12799      64417445 
 12799      00
 12800 0049 000000   		.space	3
 12801              	.LC49:
 12802 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12802      66696E65 
 12802      64004F70 
 12802      2D434F64 
 12802      4500
 12803 005e 0000     		.space	2
 12804              	.LC50:
 12805 0060 2B9F0000 		.ascii	"+\237\000\000"
 12806              	.LC51:
 12807 0064 2D9F0000 		.ascii	"-\237\000\000"
 12808              	.LC52:
 12809 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12809      75636800 
 12809      4C416245 
 12809      4C00
 12810 0076 0000     		.space	2
 12811              	.LC53:
 12812 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12812      67616C00 
 12812      4F504572 
 12812      4174696F 
 12812      6E00
 12813 008a 0000     		.space	2
 12814              	.LC54:
 12815 008c 4F757420 		.ascii	"Out of range\000\000"
 12815      6F662072 
 12815      616E6765 
 12815      0000
 12816 009a 0000     		.space	2
 12817              	.LC55:
 12818 009c 42616420 		.ascii	"Bad digit\000\000"
 12818      64696769 
 12818      740000
 12819 00a7 00       		.space	1
 12820              	.LC56:
 12821 00a8 546F6F20 		.ascii	"Too long\000\000"
 12821      6C6F6E67 
 12821      0000
 12822 00b2 0000     		.space	2
 12823              	.LC57:
 12824 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12824      69730046 
 12824      754C4C00 
 12825              	.LC58:
 12826 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12826      6B00434C 
 12826      41534800 
 12827              	.LC59:
 12828 00cc 42616420 		.ascii	"Bad mode\000\000"
 12828      6D6F6465 
 12828      0000
ARM GAS  /tmp/ccKZqSeG.s 			page 359


 12829 00d6 0000     		.space	2
 12830              	.LC60:
 12831 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12831      06060673 
 12831      697A6500 
 12831      746F6F20 
 12831      534D6D41 
 12832 00ef 00       		.space	1
 12833              	.LC61:
 12834 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12834      66657700 
 12834      64417441 
 12834      20506F69 
 12834      6E745300 
 12835              	.LC62:
 12836 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12836      6C696400 
 12836      50617261 
 12836      4D6D4574 
 12836      457200
 12837 0117 00       		.space	1
 12838              	.LC63:
 12839 0118 492F4F00 		.ascii	"I/O\000\000"
 12839      00
 12840 011d 000000   		.space	3
 12841              	.LC64:
 12842 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12842      6C696400 
 12842      64417441 
 12842      00
 12843 012d 000000   		.space	3
 12844              	.LC65:
 12845 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12845      65005072 
 12845      6F744563 
 12845      74456400 
 12846              	.LC66:
 12847 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12847      6F6F7400 
 12847      466F756E 
 12847      6400
 12848 014e 0000     		.space	2
 12849              	.LC67:
 12850 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12850      6978004D 
 12850      6D49534D 
 12850      6D417443 
 12850      4800
 12851 0162 0000     		.space	2
 12852              	.LC68:
 12853 0164 53696E67 		.ascii	"Singular\000\000"
 12853      756C6172 
 12853      0000
 12854 016e 0000     		.space	2
 12855              	.LC69:
 12856 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12856      68206973 
ARM GAS  /tmp/ccKZqSeG.s 			page 360


 12856      0046754C 
 12856      4C00
 12857 017e 0000     		.space	2
 12858              	.LC70:
 12859 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12859      72797374 
 12859      616C0049 
 12859      6E537461 
 12859      4C4C4564 
 12860 0195 000000   		.space	3
 12861              	.LC71:
 12862 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 12862      6576656E 
 12862      20726567 
 12862      00666F72 
 12862      20436F4D 
 12863 01b2 0000     		.space	2
 12864              	.LC72:
 12865 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 12865      5800
 12866              		.section	.bss.DecimalMode,"aw",%nobits
 12867              		.set	.LANCHOR1,. + 0
 12870              	DecimalMode:
 12871 0000 00       		.space	1
 12872              		.section	.bss.SeparatorMode,"aw",%nobits
 12873              		.set	.LANCHOR0,. + 0
 12876              	SeparatorMode:
 12877 0000 00       		.space	1
 12878              		.section	.bss.no_status_top,"aw",%nobits
 12879              		.align	1
 12880              		.set	.LANCHOR15,. + 0
 12883              	no_status_top:
 12884 0000 0000     		.space	2
 12885              		.section	.rodata.CSWTCH.368,"a"
 12886              		.align	2
 12887              		.set	.LANCHOR8,. + 0
 12890              	CSWTCH.368:
 12891 0000 02000000 		.word	2
 12892 0004 08000000 		.word	8
 12893 0008 0A000000 		.word	10
 12894 000c 10000000 		.word	16
 12895              		.section	.rodata.CSWTCH.394,"a"
 12896              		.align	2
 12897              		.set	.LANCHOR13,. + 0
 12900              	CSWTCH.394:
 12901 0000 00000000 		.word	.LC43
 12902 0004 08000000 		.word	.LC44
 12903 0008 0C000000 		.word	.LC45
 12904              		.section	.rodata.DIGITS,"a"
 12905              		.align	2
 12906              		.set	.LANCHOR9,. + 0
 12909              	DIGITS:
 12910 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12910      34353637 
 12910      38394142 
 12910      43444546 
 12910      00
ARM GAS  /tmp/ccKZqSeG.s 			page 361


 12911              		.section	.rodata.S7_ERROR,"a"
 12912              		.align	2
 12913              		.set	.LANCHOR20,. + 0
 12916              	S7_ERROR:
 12917 0000 4572726F 		.ascii	"Error\000"
 12917      7200
 12918              		.section	.rodata.S7_INF,"a"
 12919              		.align	2
 12920              		.set	.LANCHOR4,. + 0
 12923              	S7_INF:
 12924 0000 496E6669 		.ascii	"Infinity\000"
 12924      6E697479 
 12924      00
 12925              		.section	.rodata.S7_NaN,"a"
 12926              		.align	2
 12927              		.set	.LANCHOR3,. + 0
 12930              	S7_NaN:
 12931 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12931      6E754D6D 
 12931      45726963 
 12931      00
 12932              		.section	.rodata.S7_STEP,"a"
 12933              		.align	2
 12934              		.set	.LANCHOR16,. + 0
 12937              	S7_STEP:
 12938 0000 53744550 		.ascii	"StEP \000"
 12938      2000
 12939              		.section	.rodata.S7_fract_EQ,"a"
 12940              		.align	2
 12941              		.set	.LANCHOR6,. + 0
 12944              	S7_fract_EQ:
 12945 0000 203D2000 		.ascii	" = \000"
 12946              		.section	.rodata.S7_fract_GT,"a"
 12947              		.align	2
 12948              		.set	.LANCHOR7,. + 0
 12951              	S7_fract_GT:
 12952 0000 20477400 		.ascii	" Gt\000"
 12953              		.section	.rodata.S7_fract_LT,"a"
 12954              		.align	2
 12955              		.set	.LANCHOR5,. + 0
 12958              	S7_fract_LT:
 12959 0000 204C7400 		.ascii	" Lt\000"
 12960              		.section	.rodata.S_SURE,"a"
 12961              		.align	2
 12962              		.set	.LANCHOR18,. + 0
 12965              	S_SURE:
 12966 0000 53757265 		.ascii	"Sure?\000"
 12966      3F00
 12967              		.section	.rodata.SvnRevision,"a"
 12968              		.align	2
 12969              		.set	.LANCHOR17,. + 0
 12972              	SvnRevision:
 12973 0000 39302020 		.ascii	"90  "
 12974              		.section	.rodata.digtbl,"a"
 12975              		.align	2
 12976              		.set	.LANCHOR2,. + 0
 12979              	digtbl:
ARM GAS  /tmp/ccKZqSeG.s 			page 362


 12980 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12980      02421252 
 12980      2D000000 
 12980      00000000 
 12980      00
 12981 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12981      00000017 
 12981      01000000 
 12981      00
 12982 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12982      28000000 
 12982      0020664B 
 12982      00000010 
 12983 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12983      5E5B3973 
 12983      77497F7B 
 12983      00000612 
 12983      0300787D 
 12984 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12984      673D240F 
 12984      75266C6D 
 12984      6F7C7914 
 12984      73362F00 
 12985 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12985      161F7674 
 12985      6735040F 
 12985      75266915 
 12985      177C7914 
 12986 0076 000F003B 		.ascii	"\000\017\000;"
 12987              		.section	.rodata.error_table.9315,"a"
 12988              		.align	2
 12989              		.set	.LANCHOR21,. + 0
 12992              	error_table.9315:
 12993 0000 1C000000 		.word	.LC46
 12994 0004 30000000 		.word	.LC47
 12995 0008 38000000 		.word	.LC48
 12996 000c 4C000000 		.word	.LC49
 12997 0010 60000000 		.word	.LC50
 12998 0014 64000000 		.word	.LC51
 12999 0018 68000000 		.word	.LC52
 13000 001c 78000000 		.word	.LC53
 13001 0020 8C000000 		.word	.LC54
 13002 0024 9C000000 		.word	.LC55
 13003 0028 A8000000 		.word	.LC56
 13004 002c B4000000 		.word	.LC57
 13005 0030 C0000000 		.word	.LC58
 13006 0034 CC000000 		.word	.LC59
 13007 0038 D8000000 		.word	.LC60
 13008 003c F0000000 		.word	.LC61
 13009 0040 04010000 		.word	.LC62
 13010 0044 18010000 		.word	.LC63
 13011 0048 20010000 		.word	.LC64
 13012 004c 30010000 		.word	.LC65
 13013 0050 40010000 		.word	.LC66
 13014 0054 50010000 		.word	.LC67
 13015 0058 64010000 		.word	.LC68
 13016 005c 70010000 		.word	.LC69
ARM GAS  /tmp/ccKZqSeG.s 			page 363


 13017 0060 80010000 		.word	.LC70
 13018 0064 98010000 		.word	.LC71
 13019 0068 B4010000 		.word	.LC72
 13020              		.section	.rodata.libname,"a"
 13021              		.align	2
 13022              		.set	.LANCHOR19,. + 0
 13025              	libname:
 13026 0000 72414D6D 		.ascii	"rAMm\000"
 13026      00
 13027 0005 4C696220 		.ascii	"Lib \000"
 13027      00
 13028 000a 42757020 		.ascii	"Bup \000"
 13028      00
 13029 000f 726F4D6D 		.ascii	"roMm\000"
 13029      00
 13030              		.section	.rodata.shift_chars.9422,"a"
 13031              		.align	2
 13032              		.set	.LANCHOR12,. + 0
 13035              	shift_chars.9422:
 13036 0000 20111213 		.ascii	" \021\022\023"
 13037              		.section	.rodata.small_dots.9623,"a"
 13038              		.align	2
 13039              		.set	.LANCHOR11,. + 0
 13042              	small_dots.9623:
 13043 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13043      07E12C06 
 13043      07E12C06 
 13043      06
 13044              		.section	.rodata.small_minus.9622,"a"
 13045              		.align	2
 13046              		.set	.LANCHOR10,. + 0
 13049              	small_minus.9622:
 13050 0000 07C22D06 		.ascii	"\007\302-\006"
 13051              		.text
 13052              	.Letext0:
 13053              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 13054              		.file 3 "dmcp/dmcp.h"
 13055              		.file 4 "src/decNumber/decContext.h"
 13056              		.file 5 "src/decNumber/decNumber.h"
 13057              		.file 6 "src/decNumber/decimal64.h"
 13058              		.file 7 "src/decNumber/decimal128.h"
 13059              		.file 8 "src/xeq.h"
 13060              		.file 9 "src/data.h"
 13061              		.file 10 "src/storage.h"
 13062              		.file 11 "src/display.h"
 13063              		.file 12 "src/consts.h"
 13064              		.file 13 "src/stats.h"
 13065              		.file 14 "src/revision.h"
 13066              		.file 15 "src/printer.h"
 13067              		.file 16 "src/charset7.h"
 13068              		.file 17 "src/lcd.h"
 13069              		.file 18 "src/decn.h"
 13070              		.file 19 "src/alpha.h"
 13071              		.file 20 "src/int.h"
ARM GAS  /tmp/ccKZqSeG.s 			page 364


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccKZqSeG.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccKZqSeG.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccKZqSeG.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccKZqSeG.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccKZqSeG.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccKZqSeG.s:220    .text.set_dig:000000000000002c $d
     /tmp/ccKZqSeG.s:225    .text.hms_render:0000000000000000 $t
     /tmp/ccKZqSeG.s:232    .text.hms_render:0000000000000000 hms_render
     /tmp/ccKZqSeG.s:431    .text.hms_render:00000000000000a4 $d
     /tmp/ccKZqSeG.s:438    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccKZqSeG.s:445    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccKZqSeG.s:559    .text.hms_step:0000000000000000 $t
     /tmp/ccKZqSeG.s:566    .text.hms_step:0000000000000000 hms_step
     /tmp/ccKZqSeG.s:627    .text.hms_step:0000000000000034 $d
     /tmp/ccKZqSeG.s:632    .text.s_s_sized:0000000000000000 $t
     /tmp/ccKZqSeG.s:639    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccKZqSeG.s:1046   .text.s_s_sized:0000000000000178 $d
     /tmp/ccKZqSeG.s:1052   .text.set_exp:0000000000000000 $t
     /tmp/ccKZqSeG.s:1059   .text.set_exp:0000000000000000 set_exp
     /tmp/ccKZqSeG.s:1345   .text.set_exp:00000000000000f8 $d
     /tmp/ccKZqSeG.s:1351   .text.set_annunciators:0000000000000000 $t
     /tmp/ccKZqSeG.s:1358   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccKZqSeG.s:1659   .text.set_annunciators:00000000000000c0 $d
     /tmp/ccKZqSeG.s:1669   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccKZqSeG.s:1676   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccKZqSeG.s:1723   .text.set_decimal.part.0:0000000000000000 $t
     /tmp/ccKZqSeG.s:1730   .text.set_decimal.part.0:0000000000000000 set_decimal.part.0
     /tmp/ccKZqSeG.s:1777   .text.set_digits_string:0000000000000000 $t
     /tmp/ccKZqSeG.s:1784   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccKZqSeG.s:1896   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccKZqSeG.s:1900   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccKZqSeG.s:1907   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccKZqSeG.s:2030   .text.check_special_dn.isra.0:0000000000000058 $d
     /tmp/ccKZqSeG.s:2037   .text.set_x_hms:0000000000000000 $t
     /tmp/ccKZqSeG.s:2044   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccKZqSeG.s:2565   .text.set_x_hms:00000000000001c4 $d
     /tmp/ccKZqSeG.s:2574   .text.set_x_fract:0000000000000000 $t
     /tmp/ccKZqSeG.s:2581   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccKZqSeG.s:3010   .text.set_x_fract:0000000000000194 $d
     /tmp/ccKZqSeG.s:3024   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccKZqSeG.s:3025   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccKZqSeG.s:3028   .text.carry_overflow:0000000000000000 $t
     /tmp/ccKZqSeG.s:3035   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccKZqSeG.s:3165   .text.carry_overflow:000000000000006c $d
     /tmp/ccKZqSeG.s:3174   .text.set_int_x:0000000000000000 $t
     /tmp/ccKZqSeG.s:3181   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccKZqSeG.s:3939   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.368:0000000000000000 CSWTCH.370
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccKZqSeG.s:3951   .text.set_int_x:0000000000000360 $t
     /tmp/ccKZqSeG.s:4051   .text.set_int_x:00000000000003b8 $d
     /tmp/ccKZqSeG.s:4057   .text.getdig:0000000000000000 $t
     /tmp/ccKZqSeG.s:4065   .text.getdig:0000000000000000 getdig
     /tmp/ccKZqSeG.s:4085   .text.getdig:0000000000000008 $d
     /tmp/ccKZqSeG.s:4090   .text.dot:0000000000000000 $t
ARM GAS  /tmp/ccKZqSeG.s 			page 365


     /tmp/ccKZqSeG.s:4098   .text.dot:0000000000000000 dot
     /tmp/ccKZqSeG.s:4121   .text.std_round_fix:0000000000000000 $t
     /tmp/ccKZqSeG.s:4129   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccKZqSeG.s:4286   .text.std_round_fix:0000000000000078 $d
     /tmp/ccKZqSeG.s:4291   .text.pixel_length:0000000000000000 $t
     /tmp/ccKZqSeG.s:4299   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccKZqSeG.s:4390   .text.set_status:0000000000000000 $t
     /tmp/ccKZqSeG.s:4397   .text.set_status:0000000000000000 set_status
     /tmp/ccKZqSeG.s:4470   .text.set_status:0000000000000038 $d
     /tmp/ccKZqSeG.s:4475   .text.set_x_dn:0000000000000000 $t
     /tmp/ccKZqSeG.s:4483   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccKZqSeG.s:5275   .text.set_x_dn:0000000000000364 $d
     /tmp/ccKZqSeG.s:5283   .text.set_x_dn:0000000000000378 $t
     /tmp/ccKZqSeG.s:5436   .text.set_x_dn:0000000000000424 $d
     /tmp/ccKZqSeG.s:5442   .text.set_x_dn:000000000000042e $t
     /tmp/ccKZqSeG.s:5468   .text.set_x_dn:000000000000045a $d
     /tmp/ccKZqSeG.s:5474   .text.set_x_dn:0000000000000464 $t
     /tmp/ccKZqSeG.s:6085   .text.set_x_dn:00000000000006ec $d
     /tmp/ccKZqSeG.s:6099   .text.set_x_dn:0000000000000700 $t
     /tmp/ccKZqSeG.s:6819   .text.set_x_dn:00000000000009c8 $d
     /tmp/ccKZqSeG.s:6829   .text.set_x:0000000000000000 $t
     /tmp/ccKZqSeG.s:6836   .text.set_x:0000000000000000 set_x
     /tmp/ccKZqSeG.s:6904   .text.format_reg:0000000000000000 $t
     /tmp/ccKZqSeG.s:6912   .text.format_reg:0000000000000000 format_reg
     /tmp/ccKZqSeG.s:7031   .text.format_reg:0000000000000064 $d
     /tmp/ccKZqSeG.s:7037   .text.set_status_right:0000000000000000 $t
     /tmp/ccKZqSeG.s:7044   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccKZqSeG.s:7188   .text.set_status_right:000000000000006c $d
     /tmp/ccKZqSeG.s:7193   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccKZqSeG.s:7200   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccKZqSeG.s:7325   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccKZqSeG.s:7330   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccKZqSeG.s:7388   .text.annunciators:0000000000000000 $t
     /tmp/ccKZqSeG.s:7395   .text.annunciators:0000000000000000 annunciators
     /tmp/ccKZqSeG.s:7882   .text.annunciators:000000000000027c $d
     /tmp/ccKZqSeG.s:7903   .text.annunciators:00000000000002b4 $t
     /tmp/ccKZqSeG.s:8582   .text.annunciators:00000000000005a0 $d
     /tmp/ccKZqSeG.s:8599   .text.annunciators:00000000000005dc $t
     /tmp/ccKZqSeG.s:8712   .text.annunciators:0000000000000650 $d
     /tmp/ccKZqSeG.s:8723   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccKZqSeG.s:8784   .text.display:0000000000000000 $t
     /tmp/ccKZqSeG.s:8792   .text.display:0000000000000000 display
     /tmp/ccKZqSeG.s:9449   .text.display:00000000000002e4 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000004 DispMsg
     /tmp/ccKZqSeG.s:9469   .text.display:0000000000000320 $t
     /tmp/ccKZqSeG.s:10082  .text.display:00000000000005bc $d
     /tmp/ccKZqSeG.s:10100  .text.display:00000000000005f8 $t
     /tmp/ccKZqSeG.s:10983  .text.display:0000000000000930 $d
     /tmp/ccKZqSeG.s:11002  .text.display:0000000000000954 $t
     /tmp/ccKZqSeG.s:11912  .text.display:0000000000000d14 $d
     /tmp/ccKZqSeG.s:11933  .text.display:0000000000000d58 $t
     /tmp/ccKZqSeG.s:12165  .text.display:0000000000000e40 $d
     /tmp/ccKZqSeG.s:12171  .text.frozen_display:0000000000000000 $t
     /tmp/ccKZqSeG.s:12179  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccKZqSeG.s:12209  .text.frozen_display:000000000000001c $d
ARM GAS  /tmp/ccKZqSeG.s 			page 366


     /tmp/ccKZqSeG.s:12214  .text.message:0000000000000000 $t
     /tmp/ccKZqSeG.s:12222  .text.message:0000000000000000 message
     /tmp/ccKZqSeG.s:12351  .text.message:0000000000000060 $d
     /tmp/ccKZqSeG.s:12359  .text.error_message:0000000000000000 $t
     /tmp/ccKZqSeG.s:12367  .text.error_message:0000000000000000 error_message
     /tmp/ccKZqSeG.s:12633  .text.error_message:00000000000000d0 $d
     /tmp/ccKZqSeG.s:12644  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccKZqSeG.s:12652  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccKZqSeG.s:12760  .text.stopwatch_message:000000000000004c $d
     /tmp/ccKZqSeG.s:12765  .rodata.str1.4:0000000000000000 $d
     /tmp/ccKZqSeG.s:12890  .rodata.CSWTCH.368:0000000000000000 CSWTCH.368
     /tmp/ccKZqSeG.s:12909  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccKZqSeG.s:12883  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccKZqSeG.s:12972  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccKZqSeG.s:12784  .rodata:0000000000000000 $d
     /tmp/ccKZqSeG.s:12870  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccKZqSeG.s:12871  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccKZqSeG.s:12876  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccKZqSeG.s:12877  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccKZqSeG.s:12879  .bss.no_status_top:0000000000000000 $d
     /tmp/ccKZqSeG.s:12886  .rodata.CSWTCH.368:0000000000000000 $d
     /tmp/ccKZqSeG.s:12896  .rodata.CSWTCH.394:0000000000000000 $d
     /tmp/ccKZqSeG.s:12900  .rodata.CSWTCH.394:0000000000000000 CSWTCH.394
     /tmp/ccKZqSeG.s:12905  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccKZqSeG.s:12912  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccKZqSeG.s:12916  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccKZqSeG.s:12919  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccKZqSeG.s:12923  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccKZqSeG.s:12926  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccKZqSeG.s:12930  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccKZqSeG.s:12933  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccKZqSeG.s:12937  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccKZqSeG.s:12940  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccKZqSeG.s:12944  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccKZqSeG.s:12947  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccKZqSeG.s:12951  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccKZqSeG.s:12954  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccKZqSeG.s:12958  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccKZqSeG.s:12961  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccKZqSeG.s:12965  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccKZqSeG.s:12968  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccKZqSeG.s:12975  .rodata.digtbl:0000000000000000 $d
     /tmp/ccKZqSeG.s:12979  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccKZqSeG.s:12988  .rodata.error_table.9315:0000000000000000 $d
     /tmp/ccKZqSeG.s:12992  .rodata.error_table.9315:0000000000000000 error_table.9315
     /tmp/ccKZqSeG.s:13021  .rodata.libname:0000000000000000 $d
     /tmp/ccKZqSeG.s:13025  .rodata.libname:0000000000000000 libname
     /tmp/ccKZqSeG.s:13031  .rodata.shift_chars.9422:0000000000000000 $d
     /tmp/ccKZqSeG.s:13035  .rodata.shift_chars.9422:0000000000000000 shift_chars.9422
     /tmp/ccKZqSeG.s:13038  .rodata.small_dots.9623:0000000000000000 $d
     /tmp/ccKZqSeG.s:13042  .rodata.small_dots.9623:0000000000000000 small_dots.9623
     /tmp/ccKZqSeG.s:13045  .rodata.small_minus.9622:0000000000000000 $d
     /tmp/ccKZqSeG.s:13049  .rodata.small_minus.9622:0000000000000000 small_minus.9622

UNDEFINED SYMBOLS
main_ram
ARM GAS  /tmp/ccKZqSeG.s 			page 367


set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
get_trig_mode
draw_dot
get_user_flag
StateWhileOn
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
ARM GAS  /tmp/ccKZqSeG.s 			page 368


dn_to_ull
build_value
get_reg_n_int
cur_shift
replace_char
ShowRegister
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
reset_7_segment
finish_7_segment
finish_display
ProgFree
argcmds
WasDataEntry
scopy_char
current_catalogue
catcmd
op_r2p
get_const
multicmds
getprog
prt
find_label_from
alpha_rcl_s
findmultilbl
free_mem
free_flash
copyreg
sigma_val
getX
packed_from_number
global_regs
StackBase
monfuncs
SizeStatRegs
set_NaN
do_conv
local_regs
slen
print_tab
print_line
print
print_advance
print_reg
Running
Tracing

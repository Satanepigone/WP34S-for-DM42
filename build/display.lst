ARM GAS  /tmp/cchyQ5Gz.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/cchyQ5Gz.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status_sized_top(const char *, int);
  38:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  39:src/display.c **** 
  40:src/display.c **** static void set_status(const char *);
  41:src/display.c **** static void set_status_top(const char *);
  42:src/display.c **** static void set_status_top_always(const char *);
  43:src/display.c **** 
  44:src/display.c **** static void set_status_right(const char *);
  45:src/display.c **** static void set_status_graphic(const unsigned char *);
  46:src/display.c **** 
  47:src/display.c **** static void set_int_x(const long long int value, char *res);
  48:src/display.c **** 
  49:src/display.c **** const char *DispMsg; // What to display in message area
  50:src/display.c **** 
  51:src/display.c **** short int DispPlot;
  52:src/display.c **** short int no_status_top = 0;
  53:src/display.c **** 
  54:src/display.c **** #ifndef REALBUILD
  55:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  56:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  57:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  58:src/display.c **** char forceDispPlot;
  59:src/display.c **** #endif
  60:src/display.c **** 
  61:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  62:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  63:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  64:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  65:src/display.c **** 
  66:src/display.c **** /* Message strings
  67:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  68:src/display.c ****  * are for the upper dot matrix line.
  69:src/display.c ****  */
  70:src/display.c **** static const char S_SURE[] = "Sure?";
  71:src/display.c **** 
  72:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  73:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  74:src/display.c **** #ifndef REALBUILD
  75:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  76:src/display.c **** #endif
  77:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  78:src/display.c **** #ifndef REALBUILD
  79:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  80:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  81:src/display.c **** #endif
  82:src/display.c **** 
  83:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  84:src/display.c **** #ifndef REALBUILD
  85:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  86:src/display.c **** #endif
  87:src/display.c **** 
ARM GAS  /tmp/cchyQ5Gz.s 			page 3


  88:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  89:src/display.c **** static const char S7_fract_LT[] = " Lt";
  90:src/display.c **** static const char S7_fract_GT[] = " Gt";
  91:src/display.c **** 
  92:src/display.c **** static const char libname[][5] = {
  93:src/display.c ****   "rAMm", "Lib ", "Bup ",
  94:src/display.c **** #ifndef REALBUILD
  95:src/display.c ****   "roMm"
  96:src/display.c **** #endif
  97:src/display.c **** };
  98:src/display.c **** 
  99:src/display.c **** #ifndef REALBUILD
 100:src/display.c **** static const char libname_text[][10] = {
 101:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 102:src/display.c **** };
 103:src/display.c **** static const char libname_shorttext[][5] = {
 104:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 105:src/display.c **** };
 106:src/display.c **** #endif
 107:src/display.c **** 
 108:src/display.c **** 
 109:src/display.c **** /* Set the separator and decimal mode globals
 110:src/display.c ****  */
 111:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 111 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 112:src/display.c ****   // Separators used by various modes
 113:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 113 3 view .LVU1
  35              		.loc 1 113 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 114:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 114 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 113:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 113 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 113:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 113 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 111:src/display.c ****   // Separators used by various modes
  44              		.loc 1 111 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 113:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 113 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 114 5 is_stmt 1 view .LVU8
 115:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 115 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
ARM GAS  /tmp/cchyQ5Gz.s 			page 4


 116:src/display.c ****   }
 117:src/display.c ****   else {
 118:src/display.c ****     SeparatorMode = SEP_COMMA;
 119:src/display.c ****     DecimalMode = DECIMAL_DOT;
 120:src/display.c ****   }
 121:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 121 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 115:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 115 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 114 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 115:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 115 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 121 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 114:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 114 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 115:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 115 5 is_stmt 1 view .LVU16
  67              		.loc 1 121 3 view .LVU17
  68              		.loc 1 121 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 121 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 122:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 122 5 is_stmt 1 view .LVU20
  76              		.loc 1 122 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 123:src/display.c **** }
  80              		.loc 1 123 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 118:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 118 5 is_stmt 1 view .LVU23
 119:src/display.c ****   }
  90              		.loc 1 119 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
 121:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 121 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 119:src/display.c ****   }
ARM GAS  /tmp/cchyQ5Gz.s 			page 5


  94              		.loc 1 119 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 118:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 118 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 121:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 121 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 118:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 118 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 119:src/display.c ****   }
 102              		.loc 1 119 5 is_stmt 1 view .LVU30
 121:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 121 3 view .LVU31
 121:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 121 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 121:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 121 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 123 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 124:src/display.c **** 
 125:src/display.c **** 
 126:src/display.c **** /* Table of error messages.
 127:src/display.c ****  * These consist of a double string.  The first is displayed in the
 128:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 129:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 130:src/display.c ****  */
 131:src/display.c **** void error_message(const unsigned int e) 
 132:src/display.c **** {
 133:src/display.c **** #define MSG1(top) top "\0"
ARM GAS  /tmp/cchyQ5Gz.s 			page 6


 134:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 135:src/display.c **** 
 136:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 137:src/display.c ****   static const char *const error_table[] = 
 138:src/display.c ****     {
 139:src/display.c ****       // manually get the order correct!
 140:src/display.c ****       MSG2("Running", "ProGraMm"),
 141:src/display.c ****       MSG1("Domain"),
 142:src/display.c ****       MSG2("Bad time", "or dAtE"),
 143:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 144:src/display.c ****       MSG1("+\237"),
 145:src/display.c ****       MSG1("-\237"),
 146:src/display.c ****       MSG2("No such", "LAbEL"),
 147:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 148:src/display.c ****       MSG1("Out of range"),
 149:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 150:src/display.c ****       MSG2("Bad digit", "1"),
 151:src/display.c ****       MSG2("Too long", "1"),
 152:src/display.c **** #else
 153:src/display.c ****       MSG1("Bad digit"),
 154:src/display.c ****       MSG1("Too long"),
 155:src/display.c **** #endif
 156:src/display.c ****       MSG2("RAM is", "FuLL"),
 157:src/display.c ****       MSG2("Stack", "CLASH"),
 158:src/display.c ****       MSG1("Bad mode"),
 159:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 160:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 161:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 162:src/display.c ****       MSG1("I/O"),
 163:src/display.c ****       MSG2("Invalid", "dAtA"),
 164:src/display.c ****       MSG2("Write", "ProtEctEd"),
 165:src/display.c ****       MSG2("No root", "Found"),
 166:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 167:src/display.c ****       MSG1("Singular"),
 168:src/display.c ****       MSG2("Flash is", "FuLL"),
 169:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 170:src/display.c **** #ifndef SHIFT_EXPONENT
 171:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 172:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 173:src/display.c ****       MSG2("Too\007\304 small", "1"),
 174:src/display.c **** #     else
 175:src/display.c ****       MSG2("Too small", "1"),
 176:src/display.c **** #     endif
 177:src/display.c ****       MSG2("Too big", "1"),
 178:src/display.c **** #  else
 179:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 180:src/display.c ****       MSG1("Too\007\304 small"),
 181:src/display.c **** #     else
 182:src/display.c ****       MSG1("Too small"),
 183:src/display.c **** #     endif
 184:src/display.c ****       MSG1("Too big"),
 185:src/display.c **** #  endif
 186:src/display.c **** #endif
 187:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 188:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 189:src/display.c ****       MSG2("Interrupted", "X"),
 190:src/display.c **** #endif
ARM GAS  /tmp/cchyQ5Gz.s 			page 7


 191:src/display.c ****     };
 192:src/display.c **** #undef MSG1
 193:src/display.c **** #undef MSG2
 194:src/display.c **** #ifndef REALBUILD
 195:src/display.c ****   static const char *const error_table_text[] =
 196:src/display.c ****     {
 197:src/display.c ****       " P r o g r a m ",
 198:src/display.c ****       "",
 199:src/display.c ****       " o r   d a t e ",
 200:src/display.c ****       " O p - c o d e ",
 201:src/display.c ****       "",
 202:src/display.c ****       "",
 203:src/display.c ****       " L a b e l ",
 204:src/display.c ****       " O p e r a t i o n ",
 205:src/display.c ****       "",
 206:src/display.c ****       "",
 207:src/display.c ****       "",
 208:src/display.c ****       " F u l l ",
 209:src/display.c ****       " C l a s h ",
 210:src/display.c ****       "",
 211:src/display.c ****       " T o o   s m a l l ",
 212:src/display.c ****       " D a t a   p o i n t s ",
 213:src/display.c ****       " P a r a m e t e r ",
 214:src/display.c ****       "",
 215:src/display.c ****       " D a t a ",
 216:src/display.c ****       " P r o t e c t e d ",
 217:src/display.c ****       " F o u n d ",
 218:src/display.c ****       " M i s m a t c h ",
 219:src/display.c ****       "",
 220:src/display.c ****       " F u l l ",
 221:src/display.c ****       " I n s t a l l e d ",
 222:src/display.c **** #ifndef SHIFT_EXPONENT
 223:src/display.c ****       "",
 224:src/display.c ****       "",
 225:src/display.c **** #endif
 226:src/display.c ****       "",
 227:src/display.c ****     };
 228:src/display.c **** #endif
 229:src/display.c **** 
 230:src/display.c ****   if (e != ERR_NONE || Running) {
 231:src/display.c ****     const char *p = error_table[e];
 232:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 233:src/display.c ****     if (*q == '\0')
 234:src/display.c ****       q = S7_ERROR;
 235:src/display.c ****     if (*q == 'X') {
 236:src/display.c ****       DispMsg = p;
 237:src/display.c ****       frozen_display();
 238:src/display.c ****     }
 239:src/display.c ****     else {
 240:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 241:src/display.c ****       if (*q == '1')
 242:src/display.c **** 	q = CNULL;
 243:src/display.c **** #endif
 244:src/display.c ****       message(p, q);
 245:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 246:src/display.c **** #ifndef REALBUILD
 247:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
ARM GAS  /tmp/cchyQ5Gz.s 			page 8


 248:src/display.c **** #endif
 249:src/display.c ****     }
 250:src/display.c **** #ifdef INFRARED
 251:src/display.c ****     if (Tracing) {
 252:src/display.c ****       if (*q == 'X')
 253:src/display.c **** 	print_reg(regX_idx, p, 0);
 254:src/display.c ****       else {
 255:src/display.c **** 	print_tab(0);
 256:src/display.c **** 	print_line(p, 0);
 257:src/display.c **** 	print(' ');
 258:src/display.c **** 	while (*q != '\0') {
 259:src/display.c **** 	  int c = *q;
 260:src/display.c **** 	  if (c >= 'A')
 261:src/display.c **** 	    c |= 0x60; // ASCII lower case
 262:src/display.c **** 	  print(c);
 263:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 264:src/display.c **** 	    ++q;
 265:src/display.c **** 	  ++q;
 266:src/display.c **** 	}
 267:src/display.c **** 	print_advance( 0 );
 268:src/display.c ****       }
 269:src/display.c ****     }
 270:src/display.c **** #endif
 271:src/display.c ****   }
 272:src/display.c **** }
 273:src/display.c **** 
 274:src/display.c **** 
 275:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 276:src/display.c ****  * display.
 277:src/display.c ****  */
 278:src/display.c **** #define D_TOP 64
 279:src/display.c **** #define D_TL 32
 280:src/display.c **** #define D_TR 8
 281:src/display.c **** #define D_MIDDLE 16
 282:src/display.c **** #define D_BL 4
 283:src/display.c **** #define D_BR 1
 284:src/display.c **** #define D_BOTTOM 2
 285:src/display.c **** 
 286:src/display.c **** #include "charset7.h"
 287:src/display.c **** 
 288:src/display.c **** #ifndef REALBUILD
 289:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 290:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 291:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 292:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 293:src/display.c **** 
 294:src/display.c **** static void set_mant_sign_dot()
 295:src/display.c **** {
 296:src/display.c ****   LastDisplayedNumber[0]='-';
 297:src/display.c ****   set_dot(MANT_SIGN);
 298:src/display.c **** }
 299:src/display.c **** 
 300:src/display.c **** static void clr_mant_sign_dot()
 301:src/display.c **** {
 302:src/display.c ****   LastDisplayedNumber[0]=' ';
 303:src/display.c ****   clr_dot(MANT_SIGN);
 304:src/display.c **** }
ARM GAS  /tmp/cchyQ5Gz.s 			page 9


 305:src/display.c **** 
 306:src/display.c **** static void set_exp_sign_dot()
 307:src/display.c **** {
 308:src/display.c ****   LastDisplayedExponent[0]='-';
 309:src/display.c ****   set_dot(EXP_SIGN);
 310:src/display.c **** }
 311:src/display.c **** 
 312:src/display.c **** static void clr_exp_sign_dot()
 313:src/display.c **** {
 314:src/display.c ****   LastDisplayedExponent[0]=' ';
 315:src/display.c ****   clr_dot(EXP_SIGN);
 316:src/display.c **** }
 317:src/display.c **** 
 318:src/display.c **** #else
 319:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 320:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 321:src/display.c **** 
 322:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 323:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 324:src/display.c **** 
 325:src/display.c **** #endif
 326:src/display.c **** 
 327:src/display.c **** #ifndef REALBUILD
 328:src/display.c **** int getdig(int ch)
 329:src/display.c **** #else
 330:src/display.c ****   static int getdig(int ch)
 331:src/display.c **** #endif
 332:src/display.c **** {
 333:src/display.c ****   // perform index lookup
 334:src/display.c ****   return digtbl[ch&0xff];
 335:src/display.c **** }
 336:src/display.c **** 
 337:src/display.c **** void dot(int n, int on) {
 338:src/display.c ****   if (on)	set_dot(n);
 339:src/display.c ****   else	clr_dot(n);
 340:src/display.c **** }
 341:src/display.c **** 
 342:src/display.c **** 
 343:src/display.c **** /* Set the decimal point *after* the indicated digit
 344:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 345:src/display.c ****  * of decimal.
 346:src/display.c ****  */
 347:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 348:src/display.c ****   if (res) {
 349:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 350:src/display.c ****   } else {
 351:src/display.c ****     set_dot(posn+7);
 352:src/display.c ****     if (decimal != DECIMAL_DOT)
 353:src/display.c ****       set_dot(posn+8);
 354:src/display.c **** #ifndef REALBUILD
 355:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 356:src/display.c **** #endif
 357:src/display.c ****   }
 358:src/display.c ****   return res;
 359:src/display.c **** }
 360:src/display.c **** 
 361:src/display.c **** /* Set the digit group separator *before* the specified digit.
ARM GAS  /tmp/cchyQ5Gz.s 			page 10


 362:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 363:src/display.c ****  * sep argument.
 364:src/display.c ****  */
 365:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 366:src/display.c ****   if (sep == SEP_NONE)
 367:src/display.c ****     return res;
 368:src/display.c ****   if (res) {
 369:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 370:src/display.c ****     else *res++ = '.';
 371:src/display.c ****   } else {
 372:src/display.c ****     posn -= SEGS_PER_DIGIT;
 373:src/display.c ****     set_dot(posn+7);
 374:src/display.c ****     if (sep == SEP_COMMA)
 375:src/display.c ****       set_dot(posn+8);
 376:src/display.c **** #ifndef REALBUILD
 377:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 378:src/display.c **** #endif
 379:src/display.c ****   }
 380:src/display.c ****   return res;
 381:src/display.c **** }
 382:src/display.c **** 
 383:src/display.c **** /* Set a digit in positions [base, base+6] */
 384:src/display.c **** static void set_dig(int base, int ch)
 385:src/display.c **** {
 136              		.loc 1 385 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 386:src/display.c ****   int i;
 140              		.loc 1 386 3 view .LVU36
 387:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 387 3 view .LVU37
 142              	.LBB168:
 143              	.LBI168:
 328:src/display.c **** #else
 144              		.loc 1 328 5 view .LVU38
 145              	.LBB169:
 334:src/display.c **** }
 146              		.loc 1 334 3 view .LVU39
 334:src/display.c **** }
 147              		.loc 1 334 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 334:src/display.c **** }
 149              		.loc 1 334 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE169:
 152              	.LBE168:
 388:src/display.c **** #ifndef REALBUILD
 389:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 389 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 385:src/display.c ****   int i;
 155              		.loc 1 385 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
ARM GAS  /tmp/cchyQ5Gz.s 			page 11


 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB171:
 163              	.LBB170:
 334:src/display.c **** }
 164              		.loc 1 334 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 334:src/display.c **** }
 167              		.loc 1 334 16 view .LVU45
 168              	.LBE170:
 169              	.LBE171:
 170              		.loc 1 389 3 is_stmt 1 view .LVU46
 171              		.loc 1 389 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 390:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 390 5 is_stmt 1 view .LVU48
 174              		.loc 1 390 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 390 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 390 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 390 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 390 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 391:src/display.c ****   else
 392:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 393:src/display.c **** #endif
 394:src/display.c ****   for (i=6; i>=0; i--)
 395:src/display.c ****     {
 396:src/display.c ****       //		dot(base, c & (1 << i));
 397:src/display.c ****       if (c & (1 << i))
 398:src/display.c **** 	set_dot(base);
 196              		.loc 1 398 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 399:src/display.c ****       else
 400:src/display.c **** 	clr_dot(base);
 401:src/display.c ****       base++;
 199              		.loc 1 401 7 is_stmt 1 view .LVU55
 394:src/display.c ****     {
 200              		.loc 1 394 19 view .LVU56
 394:src/display.c ****     {
ARM GAS  /tmp/cchyQ5Gz.s 			page 12


 201              		.loc 1 394 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 394:src/display.c ****     {
 204              		.loc 1 394 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 398:src/display.c ****       else
 208              		.loc 1 398 2 is_stmt 1 view .LVU59
 400:src/display.c ****       base++;
 209              		.loc 1 400 2 view .LVU60
 397:src/display.c **** 	set_dot(base);
 210              		.loc 1 397 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 397:src/display.c **** 	set_dot(base);
 212              		.loc 1 397 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 397:src/display.c **** 	set_dot(base);
 216              		.loc 1 397 7 is_stmt 1 view .LVU63
 397:src/display.c **** 	set_dot(base);
 217              		.loc 1 397 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 400:src/display.c ****       base++;
 219              		.loc 1 400 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 401 7 is_stmt 1 view .LVU66
 394:src/display.c ****     {
 223              		.loc 1 394 19 view .LVU67
 394:src/display.c ****     {
 224              		.loc 1 394 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 394:src/display.c ****     {
 227              		.loc 1 394 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 402:src/display.c ****     }
 403:src/display.c **** }
 231              		.loc 1 403 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
 392:src/display.c **** #endif
 235              		.loc 1 392 5 is_stmt 1 view .LVU71
 392:src/display.c **** #endif
 236              		.loc 1 392 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 392:src/display.c **** #endif
 238              		.loc 1 392 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 392:src/display.c **** #endif
 240              		.loc 1 392 32 view .LVU74
ARM GAS  /tmp/cchyQ5Gz.s 			page 13


 241 004e A0F16C02 		sub	r2, r0, #108
 392:src/display.c **** #endif
 242              		.loc 1 392 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 392:src/display.c **** #endif
 246              		.loc 1 392 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 404:src/display.c **** 
 405:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 406:src/display.c ****   if (res) *res++ = ch;
 407:src/display.c ****   else	set_dig(base, ch);
 408:src/display.c ****   return res;
 409:src/display.c **** }
 410:src/display.c **** 
 411:src/display.c **** 
 412:src/display.c **** static void set_digits_string(const char *msg, int j) {
 413:src/display.c ****   for (; *msg != '\0'; msg++) {
 414:src/display.c ****     if (*msg == '.' || *msg == ',')
 415:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 416:src/display.c ****     else {
 417:src/display.c ****       set_dig_s(j, *msg, CNULL);
 418:src/display.c ****       j += SEGS_PER_DIGIT;
 419:src/display.c ****     }
 420:src/display.c ****   }
 421:src/display.c **** }
 422:src/display.c **** 
 423:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 424:src/display.c ****   int i;
 425:src/display.c ****   const int n = res == NULL ? 3 : 4;
 426:src/display.c **** 
 427:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 428:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 429:src/display.c **** }
ARM GAS  /tmp/cchyQ5Gz.s 			page 14


 430:src/display.c **** 
 431:src/display.c **** /* Force the exponent display
 432:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 433:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 434:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 435:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 436:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 437:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 438:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 439:src/display.c ****  */
 440:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 441:src/display.c ****   union {
 442:src/display.c ****     char buf[4];
 443:src/display.c ****     int i;
 444:src/display.c ****   } u;
 445:src/display.c ****   int negative;
 446:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 447:src/display.c ****   int thousands;
 448:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 449:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 450:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 451:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 452:src/display.c **** #  else
 453:src/display.c ****   const int show_large_exponent = 1;
 454:src/display.c **** #  endif
 455:src/display.c **** #else
 456:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 457:src/display.c ****   int thousands;
 458:src/display.c **** #  endif
 459:src/display.c ****   const int show_large_exponent = 0;
 460:src/display.c **** #endif
 461:src/display.c **** 
 462:src/display.c ****   negative = flags & 2;
 463:src/display.c ****   if (exp < 0) {
 464:src/display.c ****     negative = 1;
 465:src/display.c ****     exp = -exp;
 466:src/display.c ****   }
 467:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 468:src/display.c ****   thousands = exp / 1000;
 469:src/display.c **** #endif
 470:src/display.c ****   if (res) {
 471:src/display.c **** #ifdef INCLUDE_YREG_CODE
 472:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 473:src/display.c ****     if (thousands != 0) {
 474:src/display.c **** #else
 475:src/display.c ****       if (exp > 999) {
 476:src/display.c **** #endif
 477:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 478:src/display.c **** 	// No exponent separator for large -ve exponents
 479:src/display.c ****       }
 480:src/display.c ****       else *res++ = 'e'; // Normal separator
 481:src/display.c **** #else
 482:src/display.c ****       *res++ = 'e';
 483:src/display.c **** #endif
 484:src/display.c ****       if (negative) *res++ = '-';
 485:src/display.c ****     }
 486:src/display.c ****     else {
ARM GAS  /tmp/cchyQ5Gz.s 			page 15


 487:src/display.c ****       if (negative) SET_EXP_SIGN;
 488:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 489:src/display.c ****       if (thousands != 0) {
 490:src/display.c **** #else
 491:src/display.c **** 	if (exp > 999) {
 492:src/display.c **** #endif
 493:src/display.c **** 	  if (!show_large_exponent
 494:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 495:src/display.c **** 	      && (flags & 8) == 0
 496:src/display.c **** #endif
 497:src/display.c **** 	      ) {
 498:src/display.c **** #ifdef REALBUILD
 499:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 500:src/display.c **** #else
 501:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 502:src/display.c **** #endif
 503:src/display.c **** 	    goto no_number;
 504:src/display.c **** 	  }
 505:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 506:src/display.c **** 	  else {
 507:src/display.c **** 	    exp -= thousands * 1000;
 508:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 509:src/display.c **** 	    if (flags & 16) {
 510:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 511:src/display.c **** 	      int i;
 512:src/display.c **** 
 513:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 514:src/display.c **** 		// Clear digits and separators
 515:src/display.c **** 		clr_dot(i);
 516:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 517:src/display.c **** 	    }
 518:src/display.c **** #  endif
 519:src/display.c **** 	    if (negative) {
 520:src/display.c **** 	      CLR_EXP_SIGN;
 521:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 522:src/display.c **** 	    }
 523:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 524:src/display.c **** 	    flags = 1;
 525:src/display.c **** 	  }
 526:src/display.c **** #endif
 527:src/display.c **** 	}
 528:src/display.c ****       }
 529:src/display.c **** #ifdef REALBUILD
 530:src/display.c ****       u.i = 0; // Smaller ARM code
 531:src/display.c **** #else
 532:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 533:src/display.c **** #endif
 534:src/display.c ****       if (flags & 5) {
 535:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 536:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 537:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 538:src/display.c **** 	  int i;
 539:src/display.c **** 
 540:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 541:src/display.c **** 	    if (u.buf[i] == '0')
 542:src/display.c **** 	      u.buf[i] = ' ';
 543:src/display.c **** 	    else
ARM GAS  /tmp/cchyQ5Gz.s 			page 16


 544:src/display.c **** 	      break;
 545:src/display.c **** 	  }
 546:src/display.c **** 	  if (i != 0 && negative) {
 547:src/display.c **** 	    // Move minus sign to right in front of exponent
 548:src/display.c **** 	    CLR_EXP_SIGN;
 549:src/display.c **** 	    u.buf[i - 1] = '-';
 550:src/display.c **** 	  }
 551:src/display.c **** 	}
 552:src/display.c **** #endif
 553:src/display.c ****       }
 554:src/display.c ****       else
 555:src/display.c **** 	num_arg(u.buf, exp);
 556:src/display.c ****     no_number:
 557:src/display.c ****       set_exp_digits_string(u.buf, res);
 558:src/display.c ****     }
 559:src/display.c **** 
 560:src/display.c ****     static void carry_overflow(void) {
 561:src/display.c ****       const int base = SEGS_EXP_BASE;
 562:src/display.c ****       int c;
 563:src/display.c ****       unsigned int b;
 564:src/display.c **** 
 565:src/display.c ****       // Figure out the base
 566:src/display.c ****       switch (State2.smode) {
 567:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 568:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 569:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 570:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 571:src/display.c ****       default:	b = UState.int_base+1;	break;
 572:src/display.c ****       }
 573:src/display.c **** 
 574:src/display.c ****       // Display the base as the first exponent digit
 575:src/display.c ****       if (b > 10 && b < 16)
 576:src/display.c **** 	SET_EXP_SIGN;
 577:src/display.c ****       c = "B34567o9D12345h"[b-2];
 578:src/display.c ****       set_dig(base, c);
 579:src/display.c **** 
 580:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 581:src/display.c ****       if (get_carry())
 582:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 583:src/display.c ****       if (get_overflow())
 584:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 585:src/display.c ****     }
 586:src/display.c **** 
 587:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 588:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 589:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 590:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 591:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 592:src/display.c **** #endif
 593:src/display.c **** 
 594:src/display.c ****     /* Display the annunicator text line.
 595:src/display.c ****      * Care needs to be taken to keep things aligned.
 596:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 597:src/display.c ****      */
 598:src/display.c **** #ifdef TOP_ROW
 599:src/display.c ****     static void annunciators(void) {
 600:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
ARM GAS  /tmp/cchyQ5Gz.s 			page 17


 601:src/display.c ****       char buf[42], *p = buf, *q="";
 602:src/display.c ****       char buf2[42], *p2 = buf2;
 603:src/display.c ****       int n;
 604:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 605:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 606:src/display.c ****       // Constant variables and code branches depending on a constant variable
 607:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 608:src/display.c ****       // feature run-time configurable if needed.
 609:src/display.c **** #ifdef INCLUDE_YREG_CODE
 610:src/display.c **** #  ifdef YREG_ALWAYS_ON
 611:src/display.c ****       const int yreg_enabled = 1;
 612:src/display.c **** #  else
 613:src/display.c ****       const int yreg_enabled = UState.show_y;
 614:src/display.c **** #  endif
 615:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 616:src/display.c ****       const int yreg_hms = 1;
 617:src/display.c **** #  else
 618:src/display.c ****       const int yreg_hms = 0;
 619:src/display.c **** #  endif
 620:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 621:src/display.c ****       const int yreg_fract = 1;
 622:src/display.c **** #  else
 623:src/display.c ****       const int yreg_fract = 0;
 624:src/display.c **** #  endif
 625:src/display.c **** #else
 626:src/display.c ****       const int yreg_enabled = 0;
 627:src/display.c ****       const int yreg_hms = 0;
 628:src/display.c ****       const int yreg_fract = 0;
 629:src/display.c **** #endif
 630:src/display.c **** #ifdef RP_PREFIX
 631:src/display.c ****       const int rp_prefix = 1;
 632:src/display.c **** #else
 633:src/display.c ****       const int rp_prefix = 0;
 634:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 635:src/display.c **** #endif
 636:src/display.c ****       // Indicates whether font escape code is compiled in.
 637:src/display.c ****       // This variable will always be set at compile time.
 638:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 639:src/display.c ****       const int has_FONT_ESCAPE = 1;
 640:src/display.c **** #else
 641:src/display.c ****       const int has_FONT_ESCAPE = 0;
 642:src/display.c **** #endif
 643:src/display.c **** 
 644:src/display.c ****       xset(buf, '\0', sizeof(buf));
 645:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 646:src/display.c ****       
 647:src/display.c ****       if (is_intmode()) {
 648:src/display.c **** #ifdef SHOW_STACK_SIZE
 649:src/display.c **** 	if (shift_char == ' ') {
 650:src/display.c **** 	  *p2++ = '\007';
 651:src/display.c **** 	  *p2++ = '\346';
 652:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 653:src/display.c **** 	}
 654:src/display.c **** 	else
 655:src/display.c **** #endif
 656:src/display.c **** 	  {
 657:src/display.c **** 	    *p2++ = shift_char;
ARM GAS  /tmp/cchyQ5Gz.s 			page 18


 658:src/display.c **** 	    *p2++ = '\006';
 659:src/display.c **** 	  }
 660:src/display.c **** 
 661:src/display.c **** 	switch(int_mode()) {
 662:src/display.c **** 	default:
 663:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 664:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 665:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 666:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 667:src/display.c **** 	}
 668:src/display.c **** 	q = scopy(p2, q);
 669:src/display.c **** 	*q++ = '\006';
 670:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 671:src/display.c **** 
 672:src/display.c **** 	if (IntMaxWindow > 0) {
 673:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 674:src/display.c **** 	  if (*q == '1')
 675:src/display.c **** 	    n += 2;
 676:src/display.c **** 	  if (q[1] == '1')
 677:src/display.c **** 	    n += 2;
 678:src/display.c **** 	  while (n-- > 0)
 679:src/display.c **** 	    *p2++ = '\006';
 680:src/display.c **** 
 681:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 682:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 683:src/display.c **** 	}
 684:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 685:src/display.c ****       }
 686:src/display.c ****       else if (!yreg_enabled
 687:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 688:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 689:src/display.c **** #endif
 690:src/display.c **** 	       ) {
 691:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 692:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 693:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 694:src/display.c **** 	if (shift_char == ' ') {
 695:src/display.c **** 	  *p2++ = '\007';
 696:src/display.c **** 	  *p2++ = '\342';
 697:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 698:src/display.c **** 	  *p2++ = '\007';
 699:src/display.c **** 	  *p2++ = '\344';
 700:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 701:src/display.c **** 	}
 702:src/display.c **** 	else
 703:src/display.c **** #endif
 704:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 705:src/display.c **** 	    *p2++ = shift_char;
 706:src/display.c **** 	    *p2++ = '\006';
 707:src/display.c **** 	  }
 708:src/display.c **** 	  else {
 709:src/display.c **** 	    *p2++ = 'D';
 710:src/display.c **** 	  }
 711:src/display.c **** 
 712:src/display.c **** 	if (State2.cmplx) {
 713:src/display.c **** 	  *p2++ = ' ';
 714:src/display.c **** 	  *p2 = '\024';
ARM GAS  /tmp/cchyQ5Gz.s 			page 19


 715:src/display.c **** 	  goto skip;
 716:src/display.c **** 	}
 717:src/display.c **** 	if (State2.arrow) {
 718:src/display.c **** 	  *p2++ = ' ';
 719:src/display.c **** 	  *p2 = '\015';
 720:src/display.c **** 	  goto skip;
 721:src/display.c **** 	}
 722:src/display.c **** 
 723:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 724:src/display.c **** 	  if (State2.wascomplex) {
 725:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 726:src/display.c **** 	  }
 727:src/display.c **** 	  else if (rp_prefix) {
 728:src/display.c **** 	    if (RectPolConv == 1) {
 729:src/display.c **** 	      q = "\007\306<";
 730:src/display.c **** 	    }
 731:src/display.c **** 	    else {
 732:src/display.c **** 	      q = "\007\306y";
 733:src/display.c **** 	    }
 734:src/display.c **** 	  }
 735:src/display.c **** 	  p = scopy(buf, q);
 736:src/display.c **** 
 737:src/display.c **** 	  goto display_yreg;
 738:src/display.c **** 	}
 739:src/display.c **** 
 740:src/display.c **** 	switch (UState.date_mode) {
 741:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 742:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 743:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 744:src/display.c **** #endif
 745:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 746:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 747:src/display.c **** #endif
 748:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 749:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 750:src/display.c **** #endif
 751:src/display.c **** #endif
 752:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 753:src/display.c **** 	}
 754:src/display.c **** 	p2 = scopy(p2, q);
 755:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 756:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 757:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 758:src/display.c **** 	}
 759:src/display.c **** #else
 760:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 761:src/display.c **** 	*p2++ = '\007';
 762:src/display.c **** 	*p2++ = '\342';
 763:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 764:src/display.c **** #endif
 765:src/display.c ****       }
 766:src/display.c ****       else { // yreg_enabled
 767:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 768:src/display.c **** 	if (State2.cmplx) {
 769:src/display.c **** 	  *p2++ = '\007';
 770:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 771:src/display.c **** 	  *p2++ = shift_char;
ARM GAS  /tmp/cchyQ5Gz.s 			page 20


 772:src/display.c **** 	  //	  q = "\024";
 773:src/display.c **** 	  *p2++ = '\024';
 774:src/display.c **** 	}
 775:src/display.c **** 	else {// if (shift_char != ' ') {
 776:src/display.c **** 	  *p2++ = '\007';
 777:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 778:src/display.c **** 	  *p2++ = shift_char;
 779:src/display.c **** 	  //	  goto no_copy;
 780:src/display.c **** 	}
 781:src/display.c **** 	//	else
 782:src/display.c **** #endif
 783:src/display.c **** 	  if (State2.wascomplex) {
 784:src/display.c **** 	    q = "\007\207i";
 785:src/display.c **** 	    p = scopy(p, q);
 786:src/display.c **** 	    //	    goto no_copy;
 787:src/display.c **** 	  }
 788:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
 789:src/display.c **** 	    q = "\007\307<";
 790:src/display.c **** 	    p = scopy(p, q);
 791:src/display.c **** 	    //	    goto no_copy;
 792:src/display.c **** 	  }
 793:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
 794:src/display.c **** 	    q = "\007\307y";
 795:src/display.c **** 	    p = scopy(p, q);
 796:src/display.c **** 	    //	    goto no_copy;
 797:src/display.c **** 	  }
 798:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 799:src/display.c **** 	  //	  else
 800:src/display.c **** 	    if (get_trig_mode() == TRIG_GRAD) {
 801:src/display.c **** 	    //	    q = "\007\207\007";
 802:src/display.c **** 	      *p2++ = '\007';
 803:src/display.c **** 	      *p2++ = '\207';
 804:src/display.c **** 	      *p2++ = '\007';	    
 805:src/display.c **** 	    }
 806:src/display.c **** 	    else {
 807:src/display.c **** 	      *p2++ = '\007';
 808:src/display.c **** 	      *p2++ = '\207';
 809:src/display.c **** 	      *p2++ = ' ';
 810:src/display.c **** 	    }
 811:src/display.c **** #endif
 812:src/display.c **** 	    //	else { 
 813:src/display.c **** #ifndef SHOW_STACK_SIZE
 814:src/display.c **** 	  q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 815:src/display.c **** 	  p2 = scopy(p2, q);
 816:src/display.c **** #else
 817:src/display.c **** 	  if (is_dblmode()) {
 818:src/display.c **** 	    *p2++ = '\007';
 819:src/display.c **** 	    *p2++ = '\342';
 820:src/display.c **** 	    *p2++ = (UState.stack_depth ? ':' : '.');
 821:src/display.c **** 	    //	    q = "\007\345D";
 822:src/display.c **** 	    *p2++ = '\007';
 823:src/display.c **** 	    *p2++ = '\345';
 824:src/display.c **** 	    *p2++ = 'D';
 825:src/display.c **** 	  }
 826:src/display.c **** 	  else {
 827:src/display.c **** 	    q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 828:src/display.c **** 	    p2 = scopy(p2, q);
ARM GAS  /tmp/cchyQ5Gz.s 			page 21


 829:src/display.c **** 	  }
 830:src/display.c **** #endif
 831:src/display.c **** 	  //	}
 832:src/display.c **** 	//	p2 = scopy(p2, q);
 833:src/display.c **** 
 834:src/display.c **** 	switch (UState.date_mode) {
 835:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 836:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 837:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 838:src/display.c **** #endif
 839:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 840:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 841:src/display.c **** #endif
 842:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 843:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 844:src/display.c **** #endif
 845:src/display.c **** #endif
 846:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 847:src/display.c **** 	}
 848:src/display.c **** 	  
 849:src/display.c **** 	//      no_copy:
 850:src/display.c **** 	// display either arrow or datemode
 851:src/display.c **** 	if (State2.arrow) {
 852:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 853:src/display.c **** 	} // no need to skip y display with arrow here
 854:src/display.c **** 	else {
 855:src/display.c **** 	  p2 = scopy(p2, q);
 856:src/display.c **** 	}
 857:src/display.c **** 	if (State2.runmode) {
 858:src/display.c **** 	  decNumber y;
 859:src/display.c **** 	display_yreg:
 860:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 861:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 862:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 863:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 864:src/display.c **** 	   */
 865:src/display.c **** 	  if (is_intmode()) {
 866:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 867:src/display.c **** 	    goto skip;
 868:src/display.c **** 	  }
 869:src/display.c **** 		      
 870:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 871:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 872:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 873:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 874:src/display.c **** 	    if (yreg_hms && State2.hms) {
 875:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 876:src/display.c **** 
 877:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 878:src/display.c **** 	      UState.nothousands = 1;
 879:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 880:src/display.c **** 	      UState.nothousands = saved_nothousands;
 881:src/display.c **** 	      // First replace the '@' character with the degree symbol
 882:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 883:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 884:src/display.c **** 	      // then remove the fractional part of the seconds.
 885:src/display.c **** 	      p = "@\005 \006\"\0.\0";
ARM GAS  /tmp/cchyQ5Gz.s 			page 22


 886:src/display.c **** 	      while (*p) {
 887:src/display.c **** 		replace_char(buf, p[0], p[1]);
 888:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 889:src/display.c **** 		  goto skip;
 890:src/display.c **** 		}
 891:src/display.c **** 		p += 2;
 892:src/display.c **** 	      }
 893:src/display.c **** 	      goto skip;
 894:src/display.c **** 	    }
 895:src/display.c **** 	    if (yreg_fract && UState.fract
 896:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 897:src/display.c **** 		&& !State2.cmplx
 898:src/display.c **** #endif
 899:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 900:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 901:src/display.c **** #endif
 902:src/display.c **** 		&& set_x_fract(&y, p)) {
 903:src/display.c **** 	      char ltgteq;
 904:src/display.c **** 
 905:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 906:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 907:src/display.c **** 	      ltgteq = *q;
 908:src/display.c **** 	      switch (ltgteq) {
 909:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 910:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 911:src/display.c **** 	      }
 912:src/display.c **** 	      scopy(q, "\007\344?");
 913:src/display.c **** 	      q[2] = ltgteq;
 914:src/display.c **** 
 915:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 916:src/display.c **** 		goto skip;
 917:src/display.c **** 	      }
 918:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 919:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 920:src/display.c **** 		goto skip;
 921:src/display.c **** 	      }
 922:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 923:src/display.c **** 	    }
 924:src/display.c **** 	  }
 925:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 926:src/display.c **** 	    int extra_pixels;
 927:src/display.c **** 
 928:src/display.c **** 	    set_x_dn(&y, p, &n);
 929:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 930:src/display.c **** 	    if (extra_pixels <= 0)
 931:src/display.c **** 	      break;
 932:src/display.c **** 
 933:src/display.c **** 	    xset(p, '\0', n+10);
 934:src/display.c **** 
 935:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 936:src/display.c **** 	  }
 937:src/display.c **** 	}
 938:src/display.c ****       }
 939:src/display.c ****       
 940:src/display.c ****     skip:
 941:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 942:src/display.c ****       set_status_top_always(buf2);
ARM GAS  /tmp/cchyQ5Gz.s 			page 23


 943:src/display.c ****       
 944:src/display.c ****     }
 945:src/display.c **** #else
 946:src/display.c ****     static void annunciators(void) {
 947:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 948:src/display.c ****       char buf[42], *p = buf, *q="";
 949:src/display.c ****       int n;
 950:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 951:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 952:src/display.c ****       // Constant variables and code branches depending on a constant variable
 953:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 954:src/display.c ****       // feature run-time configurable if needed.
 955:src/display.c **** #ifdef INCLUDE_YREG_CODE
 956:src/display.c **** #  ifdef YREG_ALWAYS_ON
 957:src/display.c ****       const int yreg_enabled = 1;
 958:src/display.c **** #  else
 959:src/display.c ****       const int yreg_enabled = UState.show_y;
 960:src/display.c **** #  endif
 961:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 962:src/display.c ****       const int yreg_hms = 1;
 963:src/display.c **** #  else
 964:src/display.c ****       const int yreg_hms = 0;
 965:src/display.c **** #  endif
 966:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 967:src/display.c ****       const int yreg_fract = 1;
 968:src/display.c **** #  else
 969:src/display.c ****       const int yreg_fract = 0;
 970:src/display.c **** #  endif
 971:src/display.c **** #else
 972:src/display.c ****       const int yreg_enabled = 0;
 973:src/display.c ****       const int yreg_hms = 0;
 974:src/display.c ****       const int yreg_fract = 0;
 975:src/display.c **** #endif
 976:src/display.c **** #ifdef RP_PREFIX
 977:src/display.c ****       const int rp_prefix = 1;
 978:src/display.c **** #else
 979:src/display.c ****       const int rp_prefix = 0;
 980:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 981:src/display.c **** #endif
 982:src/display.c ****       // Indicates whether font escape code is compiled in.
 983:src/display.c ****       // This variable will always be set at compile time.
 984:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 985:src/display.c ****       const int has_FONT_ESCAPE = 1;
 986:src/display.c **** #else
 987:src/display.c ****       const int has_FONT_ESCAPE = 0;
 988:src/display.c **** #endif
 989:src/display.c **** 
 990:src/display.c ****       xset(buf, '\0', sizeof(buf));
 991:src/display.c ****       
 992:src/display.c ****       if (is_intmode()) {
 993:src/display.c **** #ifdef SHOW_STACK_SIZE
 994:src/display.c **** 	if (shift_char == ' ') {
 995:src/display.c **** 	  *p++ = '\007';
 996:src/display.c **** 	  *p++ = '\346';
 997:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 998:src/display.c **** 	}
 999:src/display.c **** 	else
ARM GAS  /tmp/cchyQ5Gz.s 			page 24


1000:src/display.c **** #endif
1001:src/display.c **** 	  {
1002:src/display.c **** 	    *p++ = shift_char;
1003:src/display.c **** 	    *p++ = '\006';
1004:src/display.c **** 	  }
1005:src/display.c **** 
1006:src/display.c **** 	switch(int_mode()) {
1007:src/display.c **** 	default:
1008:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1009:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1010:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1011:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1012:src/display.c **** 	}
1013:src/display.c **** 	q = scopy(p, q);
1014:src/display.c **** 	*q++ = '\006';
1015:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1016:src/display.c **** 
1017:src/display.c **** 	if (IntMaxWindow > 0) {
1018:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1019:src/display.c **** 	  if (*q == '1')
1020:src/display.c **** 	    n += 2;
1021:src/display.c **** 	  if (q[1] == '1')
1022:src/display.c **** 	    n += 2;
1023:src/display.c **** 	  while (n-- > 0)
1024:src/display.c **** 	    *p++ = '\006';
1025:src/display.c **** 
1026:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1027:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1028:src/display.c **** 	}
1029:src/display.c ****       }
1030:src/display.c ****       else if (!yreg_enabled
1031:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1032:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1033:src/display.c **** #endif
1034:src/display.c **** 	       ) {
1035:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1036:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1037:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1038:src/display.c **** 	if (shift_char == ' ') {
1039:src/display.c **** 	  *p++ = '\007';
1040:src/display.c **** 	  *p++ = '\342';
1041:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1042:src/display.c **** 	  *p++ = '\007';
1043:src/display.c **** 	  *p++ = '\344';
1044:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1045:src/display.c **** 	}
1046:src/display.c **** 	else
1047:src/display.c **** #endif
1048:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1049:src/display.c **** 	    *p++ = shift_char;
1050:src/display.c **** 	    *p++ = '\006';
1051:src/display.c **** 	  }
1052:src/display.c **** 	  else {
1053:src/display.c **** 	    *p++ = 'D';
1054:src/display.c **** 	  }
1055:src/display.c **** 
1056:src/display.c **** 	if (State2.cmplx) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 25


1057:src/display.c **** 	  *p++ = ' ';
1058:src/display.c **** 	  *p = '\024';
1059:src/display.c **** 	  goto skip;
1060:src/display.c **** 	}
1061:src/display.c **** 	if (State2.arrow) {
1062:src/display.c **** 	  *p++ = ' ';
1063:src/display.c **** 	  *p = '\015';
1064:src/display.c **** 	  goto skip;
1065:src/display.c **** 	}
1066:src/display.c **** 
1067:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1068:src/display.c **** 	  if (State2.wascomplex) {
1069:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1070:src/display.c **** 	  }
1071:src/display.c **** 	  else if (rp_prefix) {
1072:src/display.c **** 	    if (RectPolConv == 1) {
1073:src/display.c **** 	      q = "\007\306<";
1074:src/display.c **** 	    }
1075:src/display.c **** 	    else {
1076:src/display.c **** 	      q = "\007\306y";
1077:src/display.c **** 	    }
1078:src/display.c **** 	  }
1079:src/display.c **** 	  p = scopy(buf, q);
1080:src/display.c **** 
1081:src/display.c **** 	  goto display_yreg;
1082:src/display.c **** 	}
1083:src/display.c **** 
1084:src/display.c **** 	switch (UState.date_mode) {
1085:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1086:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1087:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1088:src/display.c **** #endif
1089:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1090:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1091:src/display.c **** #endif
1092:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1093:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1094:src/display.c **** #endif
1095:src/display.c **** #endif
1096:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1097:src/display.c **** 	}
1098:src/display.c **** 	p = scopy(p, q);
1099:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1100:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1101:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1102:src/display.c **** 	}
1103:src/display.c **** #else
1104:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1105:src/display.c **** 	*p++ = '\007';
1106:src/display.c **** 	*p++ = '\342';
1107:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1108:src/display.c **** #endif
1109:src/display.c ****       }
1110:src/display.c ****       else { // yreg_enabled
1111:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1112:src/display.c **** 	if (State2.cmplx) {
1113:src/display.c **** 	  *p++ = '\007';
ARM GAS  /tmp/cchyQ5Gz.s 			page 26


1114:src/display.c **** 	  *p++ = '\344';
1115:src/display.c **** 	  *p++ = shift_char;
1116:src/display.c **** 	  q = "\024";
1117:src/display.c **** 	}
1118:src/display.c **** 	else if (shift_char != ' ') {
1119:src/display.c **** 	  *p++ = '\007';
1120:src/display.c **** 	  *p++ = '\307';
1121:src/display.c **** 	  *p++ = shift_char;
1122:src/display.c **** 	  goto no_copy;
1123:src/display.c **** 	}
1124:src/display.c **** 	else
1125:src/display.c **** #endif
1126:src/display.c **** 	  if (State2.wascomplex) {
1127:src/display.c **** 	    q = "\007\207i";
1128:src/display.c **** 	  }
1129:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1130:src/display.c **** 	    q = "\007\307<";
1131:src/display.c **** 	  }
1132:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1133:src/display.c **** 	    q = "\007\307y";
1134:src/display.c **** 	  }
1135:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1136:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1137:src/display.c **** 	    q = "\007\207\007";
1138:src/display.c **** 	  }
1139:src/display.c **** #endif
1140:src/display.c **** 	  else {
1141:src/display.c **** #ifndef SHOW_STACK_SIZE
1142:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1143:src/display.c **** #else
1144:src/display.c **** 	    if (is_dblmode()) {
1145:src/display.c **** 	      *p++ = '\007';
1146:src/display.c **** 	      *p++ = '\342';
1147:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1148:src/display.c **** 	      q = "\007\345D";
1149:src/display.c **** 	    }
1150:src/display.c **** 	    else {
1151:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1152:src/display.c **** 	    }
1153:src/display.c **** #endif
1154:src/display.c **** 	  }
1155:src/display.c **** 	p = scopy(p, q);
1156:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1157:src/display.c ****       no_copy:
1158:src/display.c **** #endif
1159:src/display.c **** 
1160:src/display.c **** 	if (State2.arrow) {
1161:src/display.c **** 	  scopy(p, "\007\204\006\015");
1162:src/display.c **** 	} else if (State2.runmode) {
1163:src/display.c **** 	  decNumber y;
1164:src/display.c **** 	display_yreg:
1165:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1166:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1167:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1168:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1169:src/display.c **** 	   */
1170:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
ARM GAS  /tmp/cchyQ5Gz.s 			page 27


1171:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1172:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1173:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1174:src/display.c **** 	    if (yreg_hms && State2.hms) {
1175:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1176:src/display.c **** 
1177:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1178:src/display.c **** 	      UState.nothousands = 1;
1179:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1180:src/display.c **** 	      UState.nothousands = saved_nothousands;
1181:src/display.c **** 	      // First replace the '@' character with the degree symbol
1182:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1183:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1184:src/display.c **** 	      // then remove the fractional part of the seconds.
1185:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1186:src/display.c **** 	      while (*p) {
1187:src/display.c **** 		replace_char(buf, p[0], p[1]);
1188:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1189:src/display.c **** 		  goto skip;
1190:src/display.c **** 		}
1191:src/display.c **** 		p += 2;
1192:src/display.c **** 	      }
1193:src/display.c **** 	      goto skip;
1194:src/display.c **** 	    }
1195:src/display.c **** 	    if (yreg_fract && UState.fract
1196:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1197:src/display.c **** 		&& !State2.cmplx
1198:src/display.c **** #endif
1199:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1200:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1201:src/display.c **** #endif
1202:src/display.c **** 		&& set_x_fract(&y, p)) {
1203:src/display.c **** 	      char ltgteq;
1204:src/display.c **** 
1205:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1206:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1207:src/display.c **** 	      ltgteq = *q;
1208:src/display.c **** 	      switch (ltgteq) {
1209:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1210:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1211:src/display.c **** 	      }
1212:src/display.c **** 	      scopy(q, "\007\344?");
1213:src/display.c **** 	      q[2] = ltgteq;
1214:src/display.c **** 
1215:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1216:src/display.c **** 		goto skip;
1217:src/display.c **** 	      }
1218:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1219:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1220:src/display.c **** 		goto skip;
1221:src/display.c **** 	      }
1222:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1223:src/display.c **** 	    }
1224:src/display.c **** 	  }
1225:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1226:src/display.c **** 	    int extra_pixels;
1227:src/display.c **** 
ARM GAS  /tmp/cchyQ5Gz.s 			page 28


1228:src/display.c **** 	    set_x_dn(&y, p, &n);
1229:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1230:src/display.c **** 	    if (extra_pixels <= 0)
1231:src/display.c **** 	      break;
1232:src/display.c **** 
1233:src/display.c **** 	    xset(p, '\0', n+10);
1234:src/display.c **** 
1235:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1236:src/display.c **** 	  }
1237:src/display.c **** 	}
1238:src/display.c ****       }
1239:src/display.c ****       
1240:src/display.c ****     skip:	set_status_top(buf);
1241:src/display.c ****     }
1242:src/display.c **** #endif //top_row
1243:src/display.c ****     static void disp_x(const char *p) {
1244:src/display.c ****       int i;
1245:src/display.c ****       int gotdot = -1;
1246:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1247:src/display.c ****       const
1248:src/display.c **** #endif
1249:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1250:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1251:src/display.c ****       int overflow_to_left = 0;
1252:src/display.c **** #endif
1253:src/display.c **** 
1254:src/display.c ****       if (*p == '-') {
1255:src/display.c **** 	SET_MANT_SIGN;
1256:src/display.c **** 	p++;
1257:src/display.c ****       }
1258:src/display.c **** 
1259:src/display.c ****       if (is_intmode()) {
1260:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1261:src/display.c **** 	  set_dig(i, *p);
1262:src/display.c **** 	  i += SEGS_PER_DIGIT;
1263:src/display.c **** 	}
1264:src/display.c **** 	carry_overflow();
1265:src/display.c ****       } else {
1266:src/display.c **** 	set_separator_decimal_modes();
1267:src/display.c **** 
1268:src/display.c **** 	i = 0;
1269:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1270:src/display.c **** 	if ( CmdLineDot > 1 ) {
1271:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1272:src/display.c **** 	  const
1273:src/display.c **** #  endif
1274:src/display.c **** 	    int double_dot = 0;
1275:src/display.c **** 	  int j;
1276:src/display.c **** 
1277:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1278:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1279:src/display.c **** 	      gotdot = j;
1280:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1281:src/display.c **** 	      double_dot = (p[j+1] == '.');
1282:src/display.c **** #  endif
1283:src/display.c **** 	    }
1284:src/display.c **** 	  }
ARM GAS  /tmp/cchyQ5Gz.s 			page 29


1285:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1286:src/display.c **** 	  if (j > 0) {
1287:src/display.c **** 	    p += j + 1;
1288:src/display.c **** 	    i = SEGS_PER_DIGIT;
1289:src/display.c **** 	    if (gotdot <= j) {
1290:src/display.c **** 	      gotdot = 0;
1291:src/display.c **** 	      if (double_dot)
1292:src/display.c **** 		p++;
1293:src/display.c **** 	    }
1294:src/display.c **** 	    else if (*p == '.') {
1295:src/display.c **** 	      gotdot = 0;
1296:src/display.c **** 	      p++;
1297:src/display.c **** 	      if (!double_dot)
1298:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1299:src/display.c **** 	    }
1300:src/display.c **** 	    else gotdot = -1;
1301:src/display.c **** 	    set_dig(0, '<');
1302:src/display.c **** 	    overflow_to_left = 1;
1303:src/display.c **** 	  }
1304:src/display.c **** 	  else gotdot = -1;
1305:src/display.c **** 	}
1306:src/display.c **** #endif
1307:src/display.c **** 
1308:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1309:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1310:src/display.c **** 	       && *p != 'D'
1311:src/display.c **** #endif
1312:src/display.c **** 	       ; p++) {
1313:src/display.c **** 	  if (*p == '.') {
1314:src/display.c **** 	    if (gotdot < 0)
1315:src/display.c **** 	      gotdot = i;
1316:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1317:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1318:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1319:src/display.c **** 	      if ( *(p+1) == '.' ) {
1320:src/display.c **** 		p++;
1321:src/display.c **** 	      }
1322:src/display.c **** #  else
1323:src/display.c **** 	      if ( i != gotdot ) {
1324:src/display.c **** #  endif
1325:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1326:src/display.c **** 		i += segs_per_digit;
1327:src/display.c **** 	      }
1328:src/display.c **** 	      else {
1329:src/display.c **** 		if ( CmdLineDot > 1 ) {
1330:src/display.c **** 		  i += segs_per_digit;
1331:src/display.c **** 		}
1332:src/display.c **** 		else {
1333:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1334:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1335:src/display.c **** 		}
1336:src/display.c **** 	      }
1337:src/display.c **** #else
1338:src/display.c **** 	      if (i > 0)
1339:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1340:src/display.c **** 	      else {
1341:src/display.c **** 		set_dig(i, '0');
ARM GAS  /tmp/cchyQ5Gz.s 			page 30


1342:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1343:src/display.c **** 		i += segs_per_digit;
1344:src/display.c **** 	      }
1345:src/display.c **** #endif
1346:src/display.c **** 	    } else {
1347:src/display.c **** 	      set_dig(i, *p);
1348:src/display.c **** 	      i += segs_per_digit;
1349:src/display.c **** 	    }
1350:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1351:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1352:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1353:src/display.c **** #endif
1354:src/display.c **** 	  }
1355:src/display.c **** 
1356:src/display.c **** 	  /* Implement a floating comma */
1357:src/display.c **** 	  if (gotdot < 0)
1358:src/display.c **** 	    gotdot = i;
1359:src/display.c **** 	  for (;;) {
1360:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1361:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1362:src/display.c **** 	      break;
1363:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1364:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1365:src/display.c **** 	      break;
1366:src/display.c **** #endif
1367:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1368:src/display.c **** 	  }
1369:src/display.c **** 
1370:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1371:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1372:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1373:src/display.c **** 	    int flags = 8;
1374:src/display.c **** #  else
1375:src/display.c **** 	    int flags = 12;
1376:src/display.c **** #  endif
1377:src/display.c **** 
1378:src/display.c **** 	    if (*p == 'D')
1379:src/display.c **** 	      flags |= 2;
1380:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1381:src/display.c **** 	      flags |= 16;
1382:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1383:src/display.c **** 	  }
1384:src/display.c **** #else
1385:src/display.c **** 	  if (*p == 'E') {
1386:src/display.c **** 	    p++;
1387:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1388:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1389:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1390:src/display.c **** #  else
1391:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1392:src/display.c **** #  endif
1393:src/display.c **** 	  } 
1394:src/display.c **** #endif
1395:src/display.c **** 	}
1396:src/display.c ****       }
1397:src/display.c **** 
1398:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
ARM GAS  /tmp/cchyQ5Gz.s 			page 31


1399:src/display.c **** 
1400:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1401:src/display.c **** 	const int ws = word_size();
1402:src/display.c **** 	unsigned int b;
1403:src/display.c **** 	long long int vs = value;
1404:src/display.c **** 	unsigned long long int v;
1405:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1406:src/display.c **** 	int i, j, k;
1407:src/display.c **** 	int sign = 0;
1408:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1409:src/display.c **** 
1410:src/display.c **** 	switch (State2.smode) {
1411:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1412:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1413:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1414:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1415:src/display.c **** 	default:	b = int_base();	break;
1416:src/display.c **** 	}
1417:src/display.c **** 
1418:src/display.c **** 	if (!res) {
1419:src/display.c **** 	  IntMaxWindow = 0;
1420:src/display.c **** 	  carry_overflow();
1421:src/display.c **** 	}
1422:src/display.c **** 
1423:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1424:src/display.c **** 	  v = extract_value(value, &sign);
1425:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1426:src/display.c **** 	    v = value;
1427:src/display.c **** 	  if (v == 0) {
1428:src/display.c **** 	    if (sign)
1429:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1430:src/display.c **** 	    set_dig_s(dig, '0', res);
1431:src/display.c **** 	    return;
1432:src/display.c **** 	  } else
1433:src/display.c **** 	    for (i=0; v != 0; i++) {
1434:src/display.c **** 	      const int r = v % b;
1435:src/display.c **** 	      v /= b;
1436:src/display.c **** 	      buf[i] = DIGITS[r];
1437:src/display.c **** 	    }
1438:src/display.c **** 	} else {
1439:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1440:src/display.c **** 	  if (ws < 64) {
1441:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1442:src/display.c **** 	    vs &= mask;
1443:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1444:src/display.c **** 	      vs |= ~mask;
1445:src/display.c **** 	  }
1446:src/display.c **** 
1447:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1448:src/display.c **** 	    set_dig_s(dig, '0', res);
1449:src/display.c **** 	    return;
1450:src/display.c **** 	  } else if (!UState.leadzero) {
1451:src/display.c **** 	    v = (unsigned long long int)vs;
1452:src/display.c **** 	    for (i=0; v != 0; i++) {
1453:src/display.c **** 	      const int r = v % b;
1454:src/display.c **** 	      v /= b;
1455:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/cchyQ5Gz.s 			page 32


1456:src/display.c **** 	    }
1457:src/display.c **** 	  } else {
1458:src/display.c **** 	    int n;
1459:src/display.c **** 	    const unsigned int b1 = b >> 1;
1460:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1461:src/display.c **** 	    v = (unsigned long long int)vs;
1462:src/display.c **** 
1463:src/display.c **** 	    n = (ws + fac) / (fac+1);
1464:src/display.c **** 	    for (i=0; i<n; i++) {
1465:src/display.c **** 	      const int r = v % b;
1466:src/display.c **** 	      v /= b;
1467:src/display.c **** 	      buf[i] = DIGITS[r];
1468:src/display.c **** 	    }
1469:src/display.c **** 	  }
1470:src/display.c **** 	}
1471:src/display.c **** #ifdef BIGGER_DISPLAY
1472:src/display.c **** #define MAX_INT_Y_DIG 13
1473:src/display.c **** #else
1474:src/display.c **** #define MAX_INT_Y_DIG 7
1475:src/display.c **** #endif
1476:src/display.c **** 	/* At this point i is the number of digits in the output */
1477:src/display.c **** 	int nd = i;
1478:src/display.c **** 	if (res) {
1479:src/display.c **** 	  if (sign) *res++ = '-';
1480:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1481:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1482:src/display.c **** 	      *res++ = buf[i];
1483:src/display.c **** 	    *res++ = '.';
1484:src/display.c **** 	    *res++ = '.';
1485:src/display.c **** 	  }
1486:src/display.c **** 	  else {
1487:src/display.c **** 	    while (--i >= 0)
1488:src/display.c **** 	      *res++ = buf[i];
1489:src/display.c **** 	  }
1490:src/display.c **** 	} else {
1491:src/display.c **** #if 0
1492:src/display.c **** 	  set_separator_decimal_modes();
1493:src/display.c **** 
1494:src/display.c **** 	  // Allows configuration of digit grouping per base
1495:src/display.c **** 	  static const char grouping[] = 
1496:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1497:src/display.c **** 		    //	   2     3     4     5     6     7     8
1498:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1499:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1500:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1501:src/display.c **** 	    : grouping[b - 2] >> 4;
1502:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1503:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1504:src/display.c **** #else
1505:src/display.c **** 	  // Less flexible but shorter
1506:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1507:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1508:src/display.c **** 	    : b == 16 ? 2 : 3;
1509:src/display.c **** 	  set_separator_decimal_modes();
1510:src/display.c **** #endif
1511:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1512:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
ARM GAS  /tmp/cchyQ5Gz.s 			page 33


1513:src/display.c **** 	    State2.window = 0;
1514:src/display.c **** 	  buf[i] = '\0';
1515:src/display.c **** 
1516:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1517:src/display.c **** 	  for (k = 0; k < 12; k++)
1518:src/display.c **** 	    if (buf[j + k] == '\0')
1519:src/display.c **** 	      break;
1520:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1521:src/display.c **** 	    int ch = buf[j++];
1522:src/display.c **** 	    if (i >= shift)
1523:src/display.c **** 	      ch -= 030;
1524:src/display.c **** 	    set_dig(dig, ch);
1525:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1526:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1527:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1528:src/display.c **** 	  }
1529:src/display.c **** 	  if (sign) {
1530:src/display.c **** 	    if (dig >= 0)
1531:src/display.c **** 	      set_dig(dig, '-');
1532:src/display.c **** 	    else	SET_MANT_SIGN;
1533:src/display.c **** 	  }
1534:src/display.c **** 	}
1535:src/display.c ****       }
1536:src/display.c **** 
1537:src/display.c ****       /* Handle special cases.
1538:src/display.c ****        * return non-zero if the number is special.
1539:src/display.c ****        */
1540:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1541:src/display.c **** 	if (decNumberIsSpecial(x)) {
1542:src/display.c **** 	  if (decNumberIsNaN(x)) {
1543:src/display.c **** 	    if (res) {
1544:src/display.c **** 	      scopy(res, "NaN");
1545:src/display.c **** 	    } else {
1546:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1547:src/display.c **** #ifndef REALBUILD
1548:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1549:src/display.c **** 	      forceDispPlot=0;
1550:src/display.c **** #endif
1551:src/display.c **** 	    }
1552:src/display.c **** 	    return 1;
1553:src/display.c **** 	  } else {
1554:src/display.c **** 	    if (decNumberIsNegative(x)) {
1555:src/display.c **** 	      if (res) *res++ = '-';
1556:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1557:src/display.c **** 	    }
1558:src/display.c **** 	    if (res)
1559:src/display.c **** 	      *res++ = '\237';
1560:src/display.c **** 	    else {
1561:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1562:src/display.c **** #ifndef REALBUILD
1563:src/display.c **** 	      if (decNumberIsNegative(x)) {
1564:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1565:src/display.c **** 	      }
1566:src/display.c **** 	      else {
1567:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1568:src/display.c **** 	      }
1569:src/display.c **** 	      forceDispPlot=0;
ARM GAS  /tmp/cchyQ5Gz.s 			page 34


1570:src/display.c **** #endif
1571:src/display.c **** 	    }
1572:src/display.c **** 	    return 1;
1573:src/display.c **** 	  }
1574:src/display.c **** 	}
1575:src/display.c **** 	return 0;
1576:src/display.c ****       }
1577:src/display.c **** 
1578:src/display.c **** 
1579:src/display.c ****       /* Extract the two lowest integral digits from the number
1580:src/display.c ****        */
1581:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1582:src/display.c **** 	decNumber n;
1583:src/display.c **** 
1584:src/display.c **** 	decNumberMod(&n, x, &const_100);
1585:src/display.c **** 	*v = dn_to_int(&n);
1586:src/display.c **** 	dn_mulpow10(&n, x, -2);
1587:src/display.c **** 	decNumberTrunc(res, &n);
1588:src/display.c ****       }
1589:src/display.c **** 
1590:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1590 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1591:src/display.c **** 	char b[32];
 276              		.loc 1 1591 2 view .LVU78
1592:src/display.c **** 	int i, j;
 277              		.loc 1 1592 2 view .LVU79
1593:src/display.c **** 
1594:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1594 2 view .LVU80
 279              		.loc 1 1594 12 view .LVU81
1590:src/display.c **** 	char b[32];
 280              		.loc 1 1590 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1595:src/display.c **** 	  if (v == 0)
1596:src/display.c **** 	    b[i] = spaces?' ':'0';
1597:src/display.c **** 	  else {
1598:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1598 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1590:src/display.c **** 	char b[32];
 292              		.loc 1 1590 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1590:src/display.c **** 	char b[32];
 295              		.loc 1 1590 87 view .LVU85
 296 000a 1746     		mov	r7, r2
ARM GAS  /tmp/cchyQ5Gz.s 			page 35


 297 000c EC46     		mov	ip, sp
1594:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1594 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1595:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1595 4 is_stmt 1 view .LVU87
 303              		.loc 1 1598 6 view .LVU88
 304              		.loc 1 1598 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1599:src/display.c **** 	    v /= 10;
 311              		.loc 1 1599 6 is_stmt 1 view .LVU90
1600:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1600 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1594:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1594 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1595:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1595 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1594:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1594 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1600 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1599:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1599 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1600 6 is_stmt 1 view .LVU97
1594:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1594 17 view .LVU98
1594:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1594 12 view .LVU99
1594:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1594 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1594:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1594 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1594:src/display.c **** 	  if (v == 0)
ARM GAS  /tmp/cchyQ5Gz.s 			page 36


 341              		.loc 1 1594 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1595:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1595 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1596:src/display.c **** 	  else {
 349              		.loc 1 1596 6 is_stmt 1 view .LVU104
1594:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1594 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1594:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1594 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1596:src/display.c **** 	  else {
 355              		.loc 1 1596 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1594:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1594 17 is_stmt 1 view .LVU108
1594:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1594 12 view .LVU109
1594:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1594 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1594:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1594 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1601:src/display.c **** 	  }
1602:src/display.c **** 	}
1603:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1603 2 is_stmt 1 view .LVU112
 371              		.loc 1 1603 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1604:src/display.c **** 	  b[0] = '0';
1605:src/display.c **** 
1606:src/display.c **** 	/* Copy across and appropriately leading space things
1607:src/display.c **** 	 */
1608:src/display.c **** 	j = *jin;
 374              		.loc 1 1608 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1603:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1603 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1604:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1604 4 is_stmt 1 view .LVU116
ARM GAS  /tmp/cchyQ5Gz.s 			page 37


1604:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1604 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1608 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1609:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1609 2 view .LVU119
 386              		.loc 1 1609 8 view .LVU120
1608:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1608 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1609 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1610:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1610 4 is_stmt 1 view .LVU123
 395              	.LBB172:
 396              	.LBB173:
 406:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 406 12 view .LVU124
 398              	.LBE173:
 399              	.LBE172:
 400              		.loc 1 1610 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB177:
 403              	.LBB174:
 406:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 406 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 406:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 406 16 view .LVU127
 408              	.LBE174:
 409              	.LBI172:
 405:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 405 14 is_stmt 1 view .LVU128
 411              	.LBB175:
 406:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 406 3 view .LVU129
 406:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 406 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 406:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 406 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 406:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 406 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 408:src/display.c **** }
ARM GAS  /tmp/cchyQ5Gz.s 			page 38


 423              		.loc 1 408 3 is_stmt 1 view .LVU133
 408:src/display.c **** }
 424              		.loc 1 408 3 is_stmt 0 view .LVU134
 425              	.LBE175:
 426              	.LBE177:
1611:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1611 4 is_stmt 1 view .LVU135
1609:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1609 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1611 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1609:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1609 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1612:src/display.c **** 	}
1613:src/display.c **** 	*jin = j;
 436              		.loc 1 1613 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1613 2 is_stmt 1 view .LVU140
 440              		.loc 1 1613 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1614:src/display.c **** 	return str;
1615:src/display.c ****       }
 443              		.loc 1 1615 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1613:src/display.c **** 	return str;
 445              		.loc 1 1613 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1614:src/display.c **** 	return str;
 447              		.loc 1 1614 2 is_stmt 1 view .LVU144
 448              		.loc 1 1615 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB178:
 458              	.LBB176:
 407:src/display.c ****   return res;
 459              		.loc 1 407 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 407:src/display.c ****   return res;
 463              		.loc 1 407 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
ARM GAS  /tmp/cchyQ5Gz.s 			page 39


 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE176:
 470              	.LBE178:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 423:src/display.c ****   int i;
 485              		.loc 1 423 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 424:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 424 3 view .LVU149
 425:src/display.c **** 
 490              		.loc 1 425 3 view .LVU150
 423:src/display.c ****   int i;
 491              		.loc 1 423 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 425:src/display.c **** 
 500              		.loc 1 425 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 427 3 is_stmt 1 view .LVU153
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 427 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB179:
 513              	.LBB180:
 407:src/display.c ****   return res;
 514              		.loc 1 407 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
ARM GAS  /tmp/cchyQ5Gz.s 			page 40


 406:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 406 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 406:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 406 19 view .LVU157
 523              	.LBE180:
 524              	.LBE179:
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 427 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB186:
 528              	.LBB181:
 406:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 406 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 408:src/display.c **** }
 532              		.loc 1 408 3 is_stmt 1 view .LVU160
 408:src/display.c **** }
 533              		.loc 1 408 3 is_stmt 0 view .LVU161
 534              	.LBE181:
 535              	.LBE186:
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 427 36 is_stmt 1 view .LVU162
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 427 13 view .LVU163
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 427 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 428:src/display.c **** }
 542              		.loc 1 428 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB187:
 544              	.LBB182:
 406:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 406 12 discriminator 3 view .LVU166
 406:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 406 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE182:
 548              	.LBE187:
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 427 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB188:
 553              	.LBB183:
 406:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 406 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 406:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 406 16 discriminator 3 view .LVU170
 558              	.LBE183:
 559              	.LBI179:
 405:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/cchyQ5Gz.s 			page 41


 560              		.loc 1 405 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB184:
 406:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 406 3 discriminator 3 view .LVU172
 563              	.LBE184:
 564              	.LBE188:
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 427 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB189:
 569              	.LBB185:
 406:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 406 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 407:src/display.c ****   return res;
 573              		.loc 1 407 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 408:src/display.c **** }
 578              		.loc 1 408 3 view .LVU176
 408:src/display.c **** }
 579              		.loc 1 408 3 is_stmt 0 view .LVU177
 580              	.LBE185:
 581              	.LBE189:
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 427 36 is_stmt 1 view .LVU178
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 427 13 view .LVU179
 427:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 427 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 429:src/display.c **** 
 589              		.loc 1 429 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 429:src/display.c **** 
 591              		.loc 1 429 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1581:src/display.c **** 	decNumber n;
 606              		.loc 1 1581 75 is_stmt 1 view -0
ARM GAS  /tmp/cchyQ5Gz.s 			page 42


 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1582:src/display.c **** 
 610              		.loc 1 1582 2 view .LVU184
1584:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1584 2 view .LVU185
1581:src/display.c **** 	decNumber n;
 612              		.loc 1 1581 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1581:src/display.c **** 	decNumber n;
 621              		.loc 1 1581 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1584:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1584 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1584:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1584 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1581:src/display.c **** 	decNumber n;
 630              		.loc 1 1581 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1584:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1584 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1585:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1585 2 is_stmt 1 view .LVU192
1585:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1585 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1586:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1586 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1585:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1585 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1586:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1586 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1587:src/display.c ****       }
 649              		.loc 1 1587 2 view .LVU197
ARM GAS  /tmp/cchyQ5Gz.s 			page 43


 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1588:src/display.c **** 
 654              		.loc 1 1588 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1588:src/display.c **** 
 661              		.loc 1 1588 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
1616:src/display.c **** 
1617:src/display.c **** 
1618:src/display.c ****       /* Display the number in H.MS mode.
1619:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1620:src/display.c ****        */
1621:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1622:src/display.c **** 	decNumber x, y, a, t, u;
1623:src/display.c **** 	int j=0;
1624:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1625:src/display.c **** 	unsigned int hr, min, sec, fs;
1626:src/display.c **** 
1627:src/display.c **** 	if (check_special_dn(rgx, res)) {
1628:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1629:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1630:src/display.c **** 	  return;
1631:src/display.c **** 	}
1632:src/display.c **** 
1633:src/display.c **** 	set_separator_decimal_modes();
1634:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1635:src/display.c **** 	dn_abs(&a, rgx);
1636:src/display.c **** 	if (decNumberIsNegative(&x)) {
1637:src/display.c **** 	  if (res != NULL)
1638:src/display.c **** 	    *res++ += '-';
1639:src/display.c **** 	  else
1640:src/display.c **** 	    SET_MANT_SIGN;
1641:src/display.c **** 	  dn_minus(&x, &x);
1642:src/display.c **** 	}
1643:src/display.c **** 
ARM GAS  /tmp/cchyQ5Gz.s 			page 44


1644:src/display.c **** 	decNumberHR2HMS(&y, &x);
1645:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1646:src/display.c **** 	decNumberRound(&u, &t);
1647:src/display.c **** 
1648:src/display.c **** 	hms_step(&t, &u, &fs);
1649:src/display.c **** 	hms_step(&u, &t, &sec);
1650:src/display.c **** 	hms_step(&t, &u, &min);
1651:src/display.c **** 	hr = dn_to_int(&t);
1652:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1653:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1654:src/display.c **** 
1655:src/display.c **** 	// degrees
1656:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1657:src/display.c **** 	res = set_dig_s(j, '@', res);
1658:src/display.c **** 	j += SEGS_PER_DIGIT;
1659:src/display.c **** 
1660:src/display.c **** 	// minutes
1661:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1662:src/display.c **** 	res = set_dig_s(j, '\'', res);
1663:src/display.c **** 	j += SEGS_PER_DIGIT;
1664:src/display.c **** 
1665:src/display.c **** 	// seconds
1666:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1667:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1668:src/display.c **** 
1669:src/display.c **** 	// Fractional seconds
1670:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1671:src/display.c **** 
1672:src/display.c **** 	// We're now pointing at the exponent's first digit...
1673:src/display.c **** 	res = set_dig_s(j, '"', res);
1674:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1675:src/display.c **** 
1676:src/display.c **** 	// Check for values too big or small
1677:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1678:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1679:src/display.c **** 	} else if (! dn_eq0(&a)) {
1680:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1681:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1682:src/display.c **** 	  }
1683:src/display.c **** 	}
1684:src/display.c ****       }
1685:src/display.c **** 
1686:src/display.c **** 
1687:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1688:src/display.c **** 	decNumber x, w, n, d, t;
1689:src/display.c **** 	char buf[32], *p = buf;
1690:src/display.c **** 	int j;
1691:src/display.c **** 
1692:src/display.c **** 	if (check_special_dn(rgx, res))
1693:src/display.c **** 	  return 1;
1694:src/display.c **** 	dn_abs(&x, rgx);
1695:src/display.c **** 	if (dn_ge(&x, &const_100000))
1696:src/display.c **** 	  return 0;
1697:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1698:src/display.c **** 	  return 0;
1699:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1700:src/display.c **** 	  if (res != NULL)
ARM GAS  /tmp/cchyQ5Gz.s 			page 45


1701:src/display.c **** 	    *res++ += '-';
1702:src/display.c **** 	  else
1703:src/display.c **** 	    SET_MANT_SIGN;
1704:src/display.c **** 	}
1705:src/display.c **** 	decNumberFrac(&w, &x);
1706:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1707:src/display.c **** 
1708:src/display.c **** 	dn_divide(&t, &n, &d);
1709:src/display.c **** 	dn_compare(&t, &t, &w);
1710:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1711:src/display.c **** 
1712:src/display.c **** 	if (dn_eq(&n, &d)) {
1713:src/display.c **** 	  dn_inc(&w);
1714:src/display.c **** 	  decNumberZero(&n);
1715:src/display.c **** 	}
1716:src/display.c **** 
1717:src/display.c **** 	if (!UState.improperfrac) {
1718:src/display.c **** 	  if (!dn_eq0(&w)) {
1719:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1720:src/display.c **** 	    *p++ = ' ';
1721:src/display.c **** 	  }
1722:src/display.c **** 	} else {
1723:src/display.c **** 	  dn_multiply(&x, &w, &d);
1724:src/display.c **** 	  dn_add(&n, &n, &x);
1725:src/display.c **** 	}
1726:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1727:src/display.c **** 	*p++ = '/';
1728:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1729:src/display.c **** 	*p = '\0';
1730:src/display.c **** 	if ((p - 12) > buf) {
1731:src/display.c **** 	  p -= 12;
1732:src/display.c **** 	  *p = '<';
1733:src/display.c **** 	} else	p = buf;
1734:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1735:src/display.c **** 	  res = set_dig_s(j, *p, res);
1736:src/display.c **** 	  j += SEGS_PER_DIGIT;
1737:src/display.c **** 	}
1738:src/display.c **** 
1739:src/display.c **** 	if (dn_eq0(&t))
1740:src/display.c **** 	  p = (char *)S7_fract_EQ;
1741:src/display.c **** 	else if (decNumberIsNegative(&t))
1742:src/display.c **** 	  p = (char *)S7_fract_LT;
1743:src/display.c **** 	else
1744:src/display.c **** 	  p = (char *)S7_fract_GT;
1745:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1746:src/display.c **** 	  res = set_dig_s(j, *p, res);
1747:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1748:src/display.c **** 	}
1749:src/display.c **** 	return 1;
1750:src/display.c ****       }
1751:src/display.c **** 
1752:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1753:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1754:src/display.c **** 	decNumber c;
1755:src/display.c **** 	int true_exp, x=0;
1756:src/display.c **** 	int min_pos_exp, max_neg_exp;
1757:src/display.c **** 
ARM GAS  /tmp/cchyQ5Gz.s 			page 46


1758:src/display.c **** 	if ( mode != MODE_STD ) {
1759:src/display.c **** 	  min_pos_exp = 9;
1760:src/display.c **** 	  max_neg_exp = -5;
1761:src/display.c **** 	}
1762:src/display.c **** 	else {
1763:src/display.c **** 	  min_pos_exp = 12;
1764:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1765:src/display.c **** 	}
1766:src/display.c **** 
1767:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1768:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1769:src/display.c **** 
1770:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1771:src/display.c **** 	  x = *dd;
1772:src/display.c **** 	}
1773:src/display.c **** 
1774:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1775:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1776:src/display.c **** 	  *dd += -true_exp;
1777:src/display.c **** 	  return MODE_FIX;
1778:src/display.c **** 	}
1779:src/display.c **** 
1780:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1781:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1782:src/display.c **** 	}
1783:src/display.c **** 	else {
1784:src/display.c **** 	  return MODE_STD;
1785:src/display.c **** 	}
1786:src/display.c ****       }
1787:src/display.c **** #else
1788:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1789:src/display.c **** 	decNumber b, c;
1790:src/display.c **** 
1791:src/display.c **** 	dn_1(&b);
1792:src/display.c **** 	b.exponent -= UState.dispdigs;
1793:src/display.c **** 	dn_abs(&c, z);
1794:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1795:src/display.c **** 	  return MODE_FIX;
1796:src/display.c **** 	return MODE_STD;
1797:src/display.c ****       }
1798:src/display.c **** #endif
1799:src/display.c **** 
1800:src/display.c ****       /* SHOW display mode
1801:src/display.c ****        * in double precision show left or right part
1802:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1803:src/display.c ****        */
1804:src/display.c ****       static void show_x(char *x, int exp) {
1805:src/display.c **** 	const int dbl = is_dblmode();
1806:src/display.c **** 	char *p;
1807:src/display.c **** 	int i, j;
1808:src/display.c **** 	char *upper_str;
1809:src/display.c **** 	enum separator_modes separator_mode;
1810:src/display.c **** 	char decimal_mark;
1811:src/display.c **** 	char thousands_sep;
1812:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1813:src/display.c **** 	const int grouping = 0;
1814:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
ARM GAS  /tmp/cchyQ5Gz.s 			page 47


1815:src/display.c **** 	const int grouping = !UState.nothousands;
1816:src/display.c **** #else
1817:src/display.c **** 	const int grouping = 1;
1818:src/display.c **** #endif
1819:src/display.c **** 	int negative;
1820:src/display.c **** 
1821:src/display.c **** 	if (x[0] == '-') {
1822:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1823:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1824:src/display.c **** 
1825:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1826:src/display.c **** 	  xcopy(x, small_minus, 4);
1827:src/display.c **** 	  x += 4;
1828:src/display.c **** 	  negative = 4;
1829:src/display.c **** #else
1830:src/display.c **** 	  ++x;
1831:src/display.c **** 	  negative = 1;
1832:src/display.c **** #endif
1833:src/display.c **** 	}
1834:src/display.c **** 	else negative = 0;
1835:src/display.c **** 
1836:src/display.c **** 	p = find_char(x, '\0');
1837:src/display.c **** 	xset(p, '0', 34 - (p - x));
1838:src/display.c **** 
1839:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1840:src/display.c **** 	  separator_mode = SEP_COMMA;
1841:src/display.c **** 	  decimal_mark = '.';
1842:src/display.c **** 	  thousands_sep = ',';
1843:src/display.c **** 	}
1844:src/display.c **** 	else {
1845:src/display.c **** 	  separator_mode = SEP_DOT;
1846:src/display.c **** 	  decimal_mark = ',';
1847:src/display.c **** 	  thousands_sep = '.';
1848:src/display.c **** 	}
1849:src/display.c **** 
1850:src/display.c **** 	if (State2.window) { // right half in double precision mode
1851:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1852:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1853:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1854:src/display.c **** 
1855:src/display.c **** 	  upper_str = x + 3;
1856:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1857:src/display.c **** 	  if (grouping) {
1858:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1859:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1860:src/display.c **** 	    x += 3 + 13 + 7;
1861:src/display.c **** 	  }
1862:src/display.c **** 	  else x += 3 + 13 + 6;
1863:src/display.c **** #else
1864:src/display.c **** 	  upper_str = x + 13;
1865:src/display.c **** 	  xset(upper_str, '.', 3);
1866:src/display.c **** 	  if (grouping) {
1867:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1868:src/display.c **** 	    upper_str[6] = thousands_sep;
1869:src/display.c **** 	    x += 13 + 3 + 7;
1870:src/display.c **** 	  }
1871:src/display.c **** 	  else x += 13 + 3 + 6;
ARM GAS  /tmp/cchyQ5Gz.s 			page 48


1872:src/display.c **** #endif
1873:src/display.c **** 	  negative = 0;
1874:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1875:src/display.c **** 	}
1876:src/display.c **** 	else {
1877:src/display.c **** 	  upper_str = x;
1878:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1879:src/display.c **** 	  x[1] = decimal_mark;
1880:src/display.c **** 	  if (grouping) {
1881:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1882:src/display.c **** 	    x[5] = thousands_sep;
1883:src/display.c **** 	    x += 9;
1884:src/display.c **** 	  }
1885:src/display.c **** 	  else x += 8;
1886:src/display.c **** 	  if (dbl) {
1887:src/display.c **** 	    if (exp < 0) {
1888:src/display.c **** 	      x[9] = '-';
1889:src/display.c **** 	      exp = -exp;
1890:src/display.c **** 	    }
1891:src/display.c **** 	    else
1892:src/display.c **** 	      x[9] = ' ';
1893:src/display.c **** 	    j = exp / 1000;
1894:src/display.c **** 	    x[10] = '0' + j;
1895:src/display.c **** 	    exp -= 1000 * j;
1896:src/display.c **** 	  }
1897:src/display.c **** 	  else {
1898:src/display.c **** 	    x[9] = '\0';
1899:src/display.c **** 	    x[10] = '\0';
1900:src/display.c **** 	  }
1901:src/display.c **** 	  xcopy(x + 1, x, 11);
1902:src/display.c **** 	  *x = 0;
1903:src/display.c **** 	  set_exp(exp, 1, CNULL);
1904:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1905:src/display.c **** 	}
1906:src/display.c **** 	if (grouping) {
1907:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1908:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1909:src/display.c **** 	  }
1910:src/display.c **** 	}
1911:src/display.c **** 
1912:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1913:src/display.c **** 	  set_dig(j, x[i]);
1914:src/display.c **** 
1915:src/display.c **** 	*x = '\0';
1916:src/display.c **** 	set_status(upper_str - negative);
1917:src/display.c ****       }
1918:src/display.c **** 
1919:src/display.c **** 
1920:src/display.c ****       /* Display the X register in the numeric portion of the display.
1921:src/display.c ****        * We have to account for the various display modes and numbers of
1922:src/display.c ****        * digits.
1923:src/display.c ****        */
1924:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1925:src/display.c **** 	decNumber z;
1926:src/display.c **** 	int digits = DISPLAY_DIGITS;
1927:src/display.c **** 
1928:src/display.c **** 	if (dbl)
ARM GAS  /tmp/cchyQ5Gz.s 			page 49


1929:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1930:src/display.c **** 	else
1931:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1932:src/display.c **** 	set_x_dn(&z, res, &digits);
1933:src/display.c ****       }
1934:src/display.c **** 
1935:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1936:src/display.c **** 	char x[50], *obp = x;
1937:src/display.c **** 	int odig = 0;
1938:src/display.c **** 	int show_exp = 0;
1939:src/display.c **** 	int j;
1940:src/display.c **** 	char mantissa[64];
1941:src/display.c **** 	int exp = 0;
1942:src/display.c **** 	char *p = mantissa;
1943:src/display.c **** 	char *r;
1944:src/display.c **** 	const char *q;
1945:src/display.c **** 	int count, i;
1946:src/display.c **** 	int extra_digits = 0;
1947:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1948:src/display.c **** 	int dd;
1949:src/display.c **** 	int dispdigs;
1950:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1951:src/display.c **** #else
1952:src/display.c **** 	int dd = UState.dispdigs;
1953:src/display.c **** 	int mode = UState.dispmode;
1954:src/display.c **** #endif
1955:src/display.c **** 	int c;
1956:src/display.c **** 	int negative = 0;
1957:src/display.c **** 	int trimzeros = 0;
1958:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1959:src/display.c **** 	const int show_large_exponent = 0;
1960:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1961:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1962:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1963:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1964:src/display.c **** #else
1965:src/display.c **** 	const int show_large_exponent = 1;
1966:src/display.c **** #endif
1967:src/display.c **** 
1968:src/display.c **** 	set_separator_decimal_modes();
1969:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1970:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1971:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1972:src/display.c **** 	    if (State2.hms) {
1973:src/display.c **** 	      set_x_hms(z, res);
1974:src/display.c **** 	      return;
1975:src/display.c **** 	    }
1976:src/display.c **** 	    else if (UState.fract) {
1977:src/display.c **** 	      if (set_x_fract(z, res))
1978:src/display.c **** 		return;
1979:src/display.c **** 	    }
1980:src/display.c **** 	  }
1981:src/display.c **** 	}		
1982:src/display.c **** #else
1983:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1984:src/display.c **** 	  if (State2.hms) {
1985:src/display.c **** 	    set_x_hms(z, res);
ARM GAS  /tmp/cchyQ5Gz.s 			page 50


1986:src/display.c **** 	    State2.hms = 0;
1987:src/display.c **** 	    return;
1988:src/display.c **** 	  } else if (UState.fract) {
1989:src/display.c **** 	    if (set_x_fract(z, res))
1990:src/display.c **** 	      return;
1991:src/display.c **** 	  }
1992:src/display.c **** 	}
1993:src/display.c **** #endif
1994:src/display.c **** 
1995:src/display.c **** 	if (check_special_dn(z, res))
1996:src/display.c **** 	  return;
1997:src/display.c **** 
1998:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1999:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2000:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2001:src/display.c **** 	  z->exponent = 0;
2002:src/display.c **** 	}
2003:src/display.c **** 
2004:src/display.c **** 	xset(x, '\0', sizeof(x));
2005:src/display.c **** 
2006:src/display.c **** 	if (dn_eq0(z)) {
2007:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2008:src/display.c **** 	    x[0] = '-';
2009:src/display.c **** 	    x[1] = '0';
2010:src/display.c **** 	  } else
2011:src/display.c **** 	    x[0] = '0';
2012:src/display.c **** 	} else
2013:src/display.c **** 	  decNumberToString(z, x);
2014:src/display.c **** 
2015:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2016:src/display.c **** 	  show_x(x, exp);
2017:src/display.c **** 	  return;
2018:src/display.c **** 	}
2019:src/display.c **** 
2020:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2021:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2022:src/display.c **** 	  //  ALL mode: fill the display
2023:src/display.c **** 	  dd = *display_digits - 1;
2024:src/display.c **** 	else
2025:src/display.c **** 	  dd = dispdigs;
2026:src/display.c **** 
2027:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
2028:src/display.c **** 	  int orig_mode = mode;
2029:src/display.c **** 
2030:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2031:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2032:src/display.c **** 	    // allow zeros to be trimmed
2033:src/display.c **** 	    trimzeros = 1;
2034:src/display.c **** 	  if (orig_mode == MODE_STD)
2035:src/display.c **** 	    dd = *display_digits - 1;
2036:src/display.c ****  	}
2037:src/display.c **** #else
2038:src/display.c **** 	if (mode == MODE_STD) {
2039:src/display.c **** 	  mode = std_round_fix(z);
2040:src/display.c **** 	  trimzeros = 1;
2041:src/display.c **** 	  dd = *display_digits - 1;
2042:src/display.c **** 	} else if (dd >= *display_digits)
ARM GAS  /tmp/cchyQ5Gz.s 			page 51


2043:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2044:src/display.c **** 	  dd = *display_digits - 1;
2045:src/display.c **** #endif
2046:src/display.c **** 
2047:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2048:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2049:src/display.c **** 
2050:src/display.c **** 	q = find_char(x, 'E');
2051:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2052:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2053:src/display.c **** 	if (q == NULL) exp = 0;
2054:src/display.c **** 	else {
2055:src/display.c **** 	  exp = s_to_i(q+1);
2056:src/display.c **** 	  if (*q == 'D') exp = -exp;
2057:src/display.c **** 	}
2058:src/display.c **** #else
2059:src/display.c **** 	if (q == NULL) exp = 0;
2060:src/display.c **** 	else exp = s_to_i(q+1);
2061:src/display.c **** #endif
2062:src/display.c **** 
2063:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2064:src/display.c **** 	for (q=x; *q == ' '; q++);
2065:src/display.c **** 	if (!res) {
2066:src/display.c **** 	  CLR_EXP_SIGN;
2067:src/display.c **** 	  CLR_MANT_SIGN;
2068:src/display.c **** 	}
2069:src/display.c **** 	if (*q == '-') {
2070:src/display.c **** 	  negative = 1;
2071:src/display.c **** 	  q++;
2072:src/display.c **** 	} else if (*q == '+')
2073:src/display.c **** 	  q++;
2074:src/display.c **** 	for (; *q == '0'; q++);
2075:src/display.c **** 	if (*q == '.') {
2076:src/display.c **** 	  do
2077:src/display.c **** 	    exp--;
2078:src/display.c **** 	  while (*++q == '0');
2079:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2080:src/display.c **** 	    *p++ = *q++;
2081:src/display.c **** 	} else {
2082:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2083:src/display.c **** 	    *p++ = *q++;
2084:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2085:src/display.c **** 	    *p++ = *q++;
2086:src/display.c **** 	    exp++;
2087:src/display.c **** 	  }
2088:src/display.c **** 	  if (*q == '.') {
2089:src/display.c **** 	    q++;
2090:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2091:src/display.c **** 	      *p++ = *q++;
2092:src/display.c **** 	  }
2093:src/display.c **** 	}
2094:src/display.c **** 
2095:src/display.c **** 	if (mode == MODE_FIX) {
2096:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2097:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2098:src/display.c **** 	  else {
2099:src/display.c **** 	    extra_digits = exp;
ARM GAS  /tmp/cchyQ5Gz.s 			page 52


2100:src/display.c **** 	    /* We might have push the fixed decimals off the
2101:src/display.c **** 	     * screen so adjust if so.
2102:src/display.c **** 	     */
2103:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2104:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2105:src/display.c **** 	  }
2106:src/display.c **** 	}
2107:src/display.c **** 
2108:src/display.c **** 	// Round the mantissa to the number of digits desired
2109:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2110:src/display.c **** 	if (*p >= '5') {	// Round up
2111:src/display.c **** 	  *p = '0';
2112:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2113:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2114:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2115:src/display.c **** 	    mantissa[0] = '1';
2116:src/display.c **** 	    exp++;
2117:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2118:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2119:src/display.c **** 	      extra_digits = 0;
2120:src/display.c **** 	    }
2121:src/display.c **** 	  } else {
2122:src/display.c **** 	    while (*--p == '9')
2123:src/display.c **** 	      *p = '0';
2124:src/display.c **** 	    (*p)++;
2125:src/display.c **** 	  }
2126:src/display.c **** 	}
2127:src/display.c **** 
2128:src/display.c **** 	// Zap what is left
2129:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2130:src/display.c **** 
2131:src/display.c **** 	p = mantissa;
2132:src/display.c **** 	switch (mode) {
2133:src/display.c **** 	default:
2134:src/display.c **** 	case MODE_STD:   
2135:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2136:src/display.c **** 	  if (count != *display_digits)
2137:src/display.c **** 	    count++;
2138:src/display.c **** 	  // Too big or too small to fit on display
2139:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2140:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2141:src/display.c **** 	    case -1:
2142:src/display.c **** 	    case 2:
2143:src/display.c **** 	      *obp++ = *p++;
2144:src/display.c **** 	      odig++;
2145:src/display.c **** 	      dd--;
2146:src/display.c **** 	      exp--;
2147:src/display.c **** 	    case -2:
2148:src/display.c **** 	    case 1:
2149:src/display.c **** 	      *obp++ = *p++;
2150:src/display.c **** 	      odig++;
2151:src/display.c **** 	      dd--;
2152:src/display.c **** 	      exp--;
2153:src/display.c **** 	    case 0:
2154:src/display.c **** 	      ;
2155:src/display.c **** 	    };
2156:src/display.c **** 	    *obp++ = *p++;
ARM GAS  /tmp/cchyQ5Gz.s 			page 53


2157:src/display.c **** 	    odig++;
2158:src/display.c **** 	    *obp++ = '.';
2159:src/display.c **** 	    for (i=1; i<count; i++) {
2160:src/display.c **** 	      *obp++ = *p++;
2161:src/display.c **** 	      odig++;
2162:src/display.c **** 	    }
2163:src/display.c **** 	    show_exp = 1;
2164:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2165:src/display.c **** 	    for(i=0; i<=exp; i++) {
2166:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2167:src/display.c **** 		*obp++ = ',';
2168:src/display.c **** 	      *obp++ = *p++;
2169:src/display.c **** 	      odig++;
2170:src/display.c **** 	    }
2171:src/display.c **** 	    *obp++ = '.';
2172:src/display.c **** 	    if (count > (exp + 1)) {
2173:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2174:src/display.c **** 		*obp++ = *p++;
2175:src/display.c **** 		odig++;
2176:src/display.c **** 	      }
2177:src/display.c **** 	    }
2178:src/display.c **** 	  } else {		// All digits to right of decimal point
2179:src/display.c **** 	    *obp++ = '0';
2180:src/display.c **** 	    odig++;
2181:src/display.c **** 	    *obp++ = '.';
2182:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2183:src/display.c **** 	      *obp++ = '0';
2184:src/display.c **** 	      odig++;
2185:src/display.c **** 	    }
2186:src/display.c **** 	    for (i=0; i<count; i++) {
2187:src/display.c **** 	      *obp++ = *p++;
2188:src/display.c **** 	      odig++;
2189:src/display.c **** 	    }
2190:src/display.c **** 	  }
2191:src/display.c **** 	  break;
2192:src/display.c **** 
2193:src/display.c **** 	case MODE_FIX:
2194:src/display.c **** 	  j = 0;
2195:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2196:src/display.c **** 	    for (i=0; i<=exp; i++) {
2197:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2198:src/display.c **** 		*obp++ = ',';
2199:src/display.c **** 	      *obp++ = *p++;
2200:src/display.c **** 	      odig++;
2201:src/display.c **** 	    }
2202:src/display.c **** 	    *obp++ = '.';
2203:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2204:src/display.c **** 	      *obp++ = *p++;
2205:src/display.c **** 	      odig++;
2206:src/display.c **** 	    }
2207:src/display.c **** 	  } else {		// All digits to right of decimal point
2208:src/display.c **** 	    *obp++ = '0';
2209:src/display.c **** 	    odig++;
2210:src/display.c **** 	    *obp++ = '.';
2211:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2212:src/display.c **** 	      *obp++ = '0';
2213:src/display.c **** 	      odig++;
ARM GAS  /tmp/cchyQ5Gz.s 			page 54


2214:src/display.c **** 	      dd--;
2215:src/display.c **** 	    }
2216:src/display.c **** 	    while (dd-- > 0) {
2217:src/display.c **** 	      *obp++ = *p++;
2218:src/display.c **** 	      odig++;
2219:src/display.c **** 	    }
2220:src/display.c **** 	  }
2221:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2222:src/display.c **** 	  if (trimzeros)
2223:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2224:src/display.c **** 	      obp--;
2225:src/display.c **** 	      odig--;
2226:src/display.c **** 	    }
2227:src/display.c **** #endif			
2228:src/display.c **** 	  break;
2229:src/display.c **** 
2230:src/display.c **** 	case MODE_ENG:
2231:src/display.c **** 	  switch (exp % 3) {
2232:src/display.c **** 	  case -1:
2233:src/display.c **** 	  case 2:
2234:src/display.c **** 	    *obp++ = *p++;
2235:src/display.c **** 	    odig++;
2236:src/display.c **** 	    dd--;
2237:src/display.c **** 	    exp--;
2238:src/display.c **** 	  case -2:
2239:src/display.c **** 	  case 1:
2240:src/display.c **** 	    *obp++ = *p++;
2241:src/display.c **** 	    odig++;
2242:src/display.c **** 	    dd--;
2243:src/display.c **** 	    exp--;
2244:src/display.c **** 	  case 0:
2245:src/display.c **** 	    ;
2246:src/display.c **** 	  };
2247:src/display.c **** 	  // Falling through
2248:src/display.c **** 
2249:src/display.c **** 	case MODE_SCI:
2250:src/display.c **** 	  *obp++ = *p++;
2251:src/display.c **** 	  odig++;
2252:src/display.c **** 	  *obp++ = '.';
2253:src/display.c **** 	  dd--;
2254:src/display.c **** 	  while (dd-- >= 0) {
2255:src/display.c **** 	    *obp++ = *p++;
2256:src/display.c **** 	    odig++;
2257:src/display.c **** 	  }
2258:src/display.c **** 	  show_exp = 1;
2259:src/display.c **** 	}
2260:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2261:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2262:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2263:src/display.c **** 	    obp--;
2264:src/display.c **** 	    odig--;
2265:src/display.c **** 	  }
2266:src/display.c **** #endif	
2267:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2268:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2269:src/display.c **** 	  set_x_dn(z, res, display_digits);
2270:src/display.c **** 	  return;
ARM GAS  /tmp/cchyQ5Gz.s 			page 55


2271:src/display.c **** 	}
2272:src/display.c **** 	/* Finally, send the output to the display */
2273:src/display.c **** 	*obp = '\0';
2274:src/display.c **** 	if (odig > *display_digits)
2275:src/display.c **** 	  odig = *display_digits;
2276:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2277:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2278:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2279:src/display.c **** 	if (negative) {
2280:src/display.c **** 	  if (res) *res++ = '-';
2281:src/display.c **** 	  else {
2282:src/display.c **** 	    if (j == 0)
2283:src/display.c **** 	      SET_MANT_SIGN;
2284:src/display.c **** 	    else
2285:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2286:src/display.c **** 	  }
2287:src/display.c **** 	}
2288:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2289:src/display.c **** 	  if (c == '.') {
2290:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2291:src/display.c **** 	  } else if (c == ',') {
2292:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2293:src/display.c **** 	  } else {
2294:src/display.c **** 	    res = set_dig_s(j, c, res);
2295:src/display.c **** 	    j += SEGS_PER_DIGIT;
2296:src/display.c **** 	  }
2297:src/display.c **** 	}
2298:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2299:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2300:src/display.c **** 	  if ( !res ) {
2301:src/display.c **** 	    set_exp(exp, 4, res);
2302:src/display.c **** 	  }
2303:src/display.c **** 	  else {
2304:src/display.c **** 	    set_exp(exp, 0, res);
2305:src/display.c **** 	  }
2306:src/display.c **** 	}
2307:src/display.c **** #else
2308:src/display.c **** 	if (show_exp)
2309:src/display.c **** 	  set_exp(exp, 0, res);
2310:src/display.c **** #endif
2311:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2312:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2313:src/display.c **** 	*display_digits = odig;
2314:src/display.c ****       }
2315:src/display.c **** 
2316:src/display.c **** #if defined(QTGUI) || defined(IOS)
2317:src/display.c ****       void format_display(char *buf) {
2318:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2319:src/display.c **** 	  {
2320:src/display.c **** 	    const char *p = get_cmdline();
2321:src/display.c **** 	    if (p == NULL) {
2322:src/display.c **** 	      format_reg(regX_idx, buf);
2323:src/display.c **** 	    } else {
2324:src/display.c **** 	      scopy(buf, p);
2325:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2326:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2327:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
ARM GAS  /tmp/cchyQ5Gz.s 			page 56


2328:src/display.c **** 		buf[CmdLineEex] = 'E';
2329:src/display.c **** 		buf[CmdLineEex+1] = '-';
2330:src/display.c **** 	      }
2331:src/display.c **** #  endif
2332:src/display.c **** 	    }
2333:src/display.c **** 	  }
2334:src/display.c **** 	else {
2335:src/display.c **** 	  buf[0]=0;
2336:src/display.c **** 	}
2337:src/display.c ****       }
2338:src/display.c **** #endif
2339:src/display.c **** 
2340:src/display.c ****       void format_reg(int index, char *buf) {
2341:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2342:src/display.c **** 
2343:src/display.c **** 	if (is_intmode())
2344:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2345:src/display.c **** #ifndef HP16C_MODE_CHANGE
2346:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2347:src/display.c **** 	  decNumber x;
2348:src/display.c **** 	  int s;
2349:src/display.c **** 	  unsigned long long int v;
2350:src/display.c **** 
2351:src/display.c **** 	  getRegister(&x, index);
2352:src/display.c **** 	  v = dn_to_ull(&x, &s);
2353:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2354:src/display.c **** 	}
2355:src/display.c **** #endif
2356:src/display.c **** 	else
2357:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2358:src/display.c ****       }
2359:src/display.c **** 
2360:src/display.c ****       /* Display the status screen */
2361:src/display.c ****       static void show_status(void) {
2362:src/display.c **** 	int i, n;
2363:src/display.c **** 	int j = SEGS_EXP_BASE;
2364:src/display.c **** 	const int status = State2.status - 3;
2365:src/display.c **** 	char buf[16], *p = buf;
2366:src/display.c **** 	unsigned int pc;
2367:src/display.c **** 
2368:src/display.c **** 	if (status == -2) {
2369:src/display.c **** 	  set_status("Free:");
2370:src/display.c **** 	  p = num_arg(buf, free_mem());
2371:src/display.c **** 	  p = scopy(p, " , FL. ");
2372:src/display.c **** 	  p = num_arg(p, free_flash());
2373:src/display.c **** 	  *p = '\0';
2374:src/display.c **** 	  set_digits_string(buf, 0);
2375:src/display.c **** 	}
2376:src/display.c **** 	else if (status == -1) {
2377:src/display.c **** 	  /* Top line */
2378:src/display.c **** 	  p = scopy(buf, "Regs:");
2379:src/display.c **** 	  if (SizeStatRegs)
2380:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2381:src/display.c **** 	  *p = '\0';
2382:src/display.c **** 	  set_status(buf);
2383:src/display.c **** 
2384:src/display.c **** 	  /* Bottom line */
ARM GAS  /tmp/cchyQ5Gz.s 			page 57


2385:src/display.c **** 	  p = num_arg(buf, global_regs());
2386:src/display.c **** 	  if (LocalRegs < 0) {
2387:src/display.c **** 	    p = scopy(p, " , Loc. ");
2388:src/display.c **** 	    p = num_arg(p, local_regs());
2389:src/display.c **** 	  }
2390:src/display.c **** 	  *p = '\0';
2391:src/display.c **** 	  set_digits_string(buf, 0);
2392:src/display.c **** 	} else {
2393:src/display.c **** 	  int base;
2394:src/display.c **** 	  int end;
2395:src/display.c **** 	  int group = 10;
2396:src/display.c **** 	  int start = 0;
2397:src/display.c **** 		
2398:src/display.c **** 	  if (status <= 9) {
2399:src/display.c **** 	    base = 10 * status;
2400:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2401:src/display.c **** 	    p = scopy(buf, "FL ");
2402:src/display.c **** 	    p = num_arg_0(p, base, 2);
2403:src/display.c **** 	    *p++ = '-';
2404:src/display.c **** 	    p = num_arg_0(p, end, 2);
2405:src/display.c **** 	    *p = '\0';
2406:src/display.c **** 	    set_status(buf);
2407:src/display.c **** 	  }
2408:src/display.c **** 	  else if (status == 10) {
2409:src/display.c **** 	    base = regX_idx;
2410:src/display.c **** 	    end = regK_idx;
2411:src/display.c **** 	    start = 3;
2412:src/display.c **** 	    group = 4;
2413:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2414:src/display.c **** 	  }
2415:src/display.c **** 	  else { // status == 11
2416:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2417:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2418:src/display.c **** 	    set_status("FL.00-.15");
2419:src/display.c **** 	  }
2420:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2421:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2422:src/display.c **** 	  j += SEGS_PER_DIGIT;
2423:src/display.c **** 	  for (i = start; i < group + start; i++) {
2424:src/display.c **** 	    int k = i + base - start;
2425:src/display.c **** 	    int l = get_user_flag(k);
2426:src/display.c **** 	    k += group;
2427:src/display.c **** 	    if (end >= k) {
2428:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2429:src/display.c **** 	      k += group;
2430:src/display.c **** 	      if (end >= k)
2431:src/display.c **** 		l |= (get_user_flag(k) << 2);
2432:src/display.c **** 	    }
2433:src/display.c **** 	    set_dig(j, l);
2434:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2435:src/display.c **** 	    j += SEGS_PER_DIGIT;
2436:src/display.c **** 	    if (i == 4) {
2437:src/display.c **** 	      set_dig(j, 8);
2438:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2439:src/display.c **** 	      j += SEGS_PER_DIGIT;
2440:src/display.c **** 	    }
2441:src/display.c **** 	  }
ARM GAS  /tmp/cchyQ5Gz.s 			page 58


2442:src/display.c **** 	}
2443:src/display.c **** 
2444:src/display.c **** 	j = SEGS_EXP_BASE;
2445:src/display.c **** 	pc = state_pc();
2446:src/display.c **** 	if (isXROM(pc))
2447:src/display.c **** 	  pc = 1;
2448:src/display.c **** 	for (n=i=0; i<4; i++) {
2449:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2450:src/display.c **** 	    if (++n == 4) {
2451:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2452:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2453:src/display.c **** 	    } else {
2454:src/display.c **** 	      set_dig(j, 'A'+i);
2455:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2456:src/display.c **** 	    }
2457:src/display.c **** 	  }
2458:src/display.c **** 	}
2459:src/display.c ****       }
2460:src/display.c **** 
2461:src/display.c **** 
2462:src/display.c ****       /* Display the list of alpha labels */
2463:src/display.c ****       static void show_label(void) {
2464:src/display.c **** 	char buf[16];
2465:src/display.c **** 	unsigned short int pc = State2.digval;
2466:src/display.c **** 	unsigned int op = getprog(pc);
2467:src/display.c **** 	int n = nLIB(pc);
2468:src/display.c **** 	unsigned short int lblpc;
2469:src/display.c **** 
2470:src/display.c **** 	set_status(prt((opcode)op, buf));
2471:src/display.c **** 	set_digits_string(libname[n], 0);
2472:src/display.c **** #ifndef REALBUILD
2473:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2474:src/display.c **** #endif
2475:src/display.c **** 
2476:src/display.c **** 	if (op & OP_DBL) {
2477:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2478:src/display.c **** 	  if (lblpc != pc) {
2479:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2480:src/display.c **** 	    n = nLIB(lblpc);
2481:src/display.c **** 	    if (n == REGION_RAM)
2482:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2483:src/display.c **** 	    else {
2484:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2485:src/display.c **** #ifndef REALBUILD
2486:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2487:src/display.c **** #endif
2488:src/display.c **** 	    }
2489:src/display.c **** 	  }
2490:src/display.c **** 	}
2491:src/display.c ****       }
2492:src/display.c **** 
2493:src/display.c ****       /* Display a list of register contents */
2494:src/display.c ****       static void show_registers(void) {
2495:src/display.c **** 	char buf[16], *bp;
2496:src/display.c **** 	int n = State2.digval;
2497:src/display.c **** 	
2498:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
ARM GAS  /tmp/cchyQ5Gz.s 			page 59


2499:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2500:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2501:src/display.c **** 	  n;
2502:src/display.c **** #else
2503:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2504:src/display.c **** 	  n;
2505:src/display.c **** #endif
2506:src/display.c **** 
2507:src/display.c **** 	if (State2.disp_as_alpha) {
2508:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2509:src/display.c **** 	}
2510:src/display.c **** 	else {
2511:src/display.c **** 	  xset(buf, '\0', 16);
2512:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2513:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2514:src/display.c **** #else
2515:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2516:src/display.c **** #endif
2517:src/display.c **** 	  if (State2.local) {
2518:src/display.c **** 	    *bp++ = '.';
2519:src/display.c **** 	    if (n >= 100) {
2520:src/display.c **** 	      *bp++ = '1';
2521:src/display.c **** 	      n -= 100;
2522:src/display.c **** 	    }
2523:src/display.c **** 	  }
2524:src/display.c **** 	  if (n < 100)
2525:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2526:src/display.c **** 	  else
2527:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2528:src/display.c **** 	  set_status(buf);
2529:src/display.c **** 	}
2530:src/display.c **** 	format_reg(reg, CNULL);
2531:src/display.c ****       }
2532:src/display.c **** 
2533:src/display.c **** 
2534:src/display.c ****       static void set_annunciators(void)
2535:src/display.c ****       {
2536:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2537:src/display.c **** 
2538:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2539:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2540:src/display.c **** 	 * browsing constants.
2541:src/display.c **** 	 */
2542:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2543:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2544:src/display.c **** #else
2545:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2546:src/display.c **** #endif
2547:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2548:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2549:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2550:src/display.c **** 	set_IO_annunciator();
2551:src/display.c **** 
2552:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2553:src/display.c **** 	 */
2554:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2555:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
ARM GAS  /tmp/cchyQ5Gz.s 			page 60


2556:src/display.c ****       }
2557:src/display.c **** 
2558:src/display.c **** 
2559:src/display.c ****       /*
2560:src/display.c ****        *  Toggle the little "=" sign
2561:src/display.c ****        */
2562:src/display.c ****       void set_IO_annunciator(void) {
2563:src/display.c **** #ifndef DM42
2564:src/display.c **** 	int on = SerialOn
2565:src/display.c **** #endif
2566:src/display.c **** #ifdef DM42
2567:src/display.c **** 	  int on = 0
2568:src/display.c **** #endif
2569:src/display.c **** #ifdef REALBUILD
2570:src/display.c **** 	  || DebugFlag
2571:src/display.c **** #endif
2572:src/display.c **** #ifdef INFRARED
2573:src/display.c **** 	  || PrinterColumn != 0
2574:src/display.c **** #endif
2575:src/display.c **** 	  ;
2576:src/display.c **** 
2577:src/display.c **** 	if (on != IoAnnunciator) {
2578:src/display.c **** 	  dot(LIT_EQ, on);
2579:src/display.c **** 	  IoAnnunciator = on;
2580:src/display.c **** 	  finish_display(); //LIT_EQ
2581:src/display.c **** 	}
2582:src/display.c ****       }
2583:src/display.c **** 
2584:src/display.c **** #ifdef TOP_ROW
2585:src/display.c ****       /*
2586:src/display.c ****        *  Update the display
2587:src/display.c ****        */
2588:src/display.c ****       void display(void) {
2589:src/display.c **** 	int i, j;
2590:src/display.c **** 	char buf[40], *bp = buf;
2591:src/display.c **** 	const char *p;
2592:src/display.c **** 	int annuc = 0;
2593:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2594:src/display.c **** 	int skip = 0;
2595:src/display.c **** 	int x_disp = 0;
2596:src/display.c **** 	const int shift = cur_shift();
2597:src/display.c **** 
2598:src/display.c **** 	no_status_top = 0;
2599:src/display.c **** 	if (State2.disp_freeze) {
2600:src/display.c **** 	  State2.disp_freeze = 0;
2601:src/display.c **** 	  State2.disp_temp = 1;
2602:src/display.c **** #ifdef CONSOLE
2603:src/display.c **** 	  JustDisplayed = 1;
2604:src/display.c **** #endif
2605:src/display.c **** 	  ShowRPN = 0;
2606:src/display.c **** 	  return;
2607:src/display.c **** 	}
2608:src/display.c **** 
2609:src/display.c **** 	if (WasDataEntry) {
2610:src/display.c **** #if defined(QTGUI) || defined(IOS)
2611:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2612:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
ARM GAS  /tmp/cchyQ5Gz.s 			page 61


2613:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2614:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2615:src/display.c **** #endif
2616:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2617:src/display.c **** 
2618:src/display.c **** 	  // Erase 7-segment display
2619:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2620:src/display.c **** 	    clr_dot(i);
2621:src/display.c **** 	  }
2622:src/display.c **** 	  goto only_update_x;
2623:src/display.c **** 	}
2624:src/display.c **** #ifdef INCLUDE_YREG_CODE
2625:src/display.c **** #  ifdef YREG_ALWAYS_ON
2626:src/display.c **** 	const int yreg_enabled = 1;
2627:src/display.c **** #  else
2628:src/display.c **** 	const int yreg_enabled = UState.show_y;
2629:src/display.c **** #  endif
2630:src/display.c **** #else
2631:src/display.c **** 	const int yreg_enabled = 0;
2632:src/display.c **** #endif
2633:src/display.c **** 	// Clear display
2634:src/display.c **** 	reset_disp();
2635:src/display.c **** 
2636:src/display.c **** 	
2637:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2638:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2639:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2640:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2641:src/display.c **** 	/*   set_status(buf); */
2642:src/display.c **** 	/* } */
2643:src/display.c **** 	if (State2.version) {
2644:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2645:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2646:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2647:src/display.c **** #ifndef REALBUILD
2648:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2649:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2650:src/display.c **** #endif
2651:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2652:src/display.c **** 	  set_status(vers);
2653:src/display.c **** 	  skip = 1;
2654:src/display.c **** 	  goto nostk;
2655:src/display.c **** 	} else if (State2.confirm) {
2656:src/display.c **** 	  if (yreg_enabled) {
2657:src/display.c **** 	    set_status_top(S_SURE);
2658:src/display.c **** 	    no_status_top = 1;
2659:src/display.c **** 	    annuc = 1;
2660:src/display.c **** 	  }
2661:src/display.c **** 	  else {
2662:src/display.c **** 	    set_status(S_SURE);
2663:src/display.c **** 	  }
2664:src/display.c **** 	} else if (State2.hyp) {
2665:src/display.c **** 	  bp = scopy(bp, "HYP");
2666:src/display.c **** 	  if (! State2.dot)
2667:src/display.c **** 	    *bp++ = '\235';
2668:src/display.c **** 	  if (yreg_enabled) {
2669:src/display.c **** 	    set_status_top(buf);
ARM GAS  /tmp/cchyQ5Gz.s 			page 62


2670:src/display.c **** 	    no_status_top = 1;
2671:src/display.c **** 	    annuc = 1;
2672:src/display.c **** 	  }
2673:src/display.c **** 	  else {
2674:src/display.c **** 	    set_status(buf);
2675:src/display.c **** 	  }
2676:src/display.c **** 	} else if (State2.gtodot) {
2677:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2678:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2679:src/display.c **** 	  if (State2.numdigit > 0)
2680:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2681:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2682:src/display.c **** 	  *bp++ = '_';
2683:src/display.c **** 	  if (yreg_enabled) {
2684:src/display.c **** 	    set_status_top(buf);
2685:src/display.c **** 	    no_status_top = 1;
2686:src/display.c **** 	    annuc = 1;
2687:src/display.c **** 	  }
2688:src/display.c **** 	  else {
2689:src/display.c **** 	    set_status(buf);
2690:src/display.c **** 	  }
2691:src/display.c **** 	} else if (State2.rarg) {
2692:src/display.c **** 	  /* Commands with arguments */
2693:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2694:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2695:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2696:src/display.c **** #endif
2697:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2698:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2699:src/display.c **** 	  if (State2.dot) {
2700:src/display.c **** 	    *bp++ = 's';
2701:src/display.c **** 	    *bp++ = '_';
2702:src/display.c **** 	  } else if (shift == SHIFT_F) {
2703:src/display.c **** 	    *bp++ = '\021';
2704:src/display.c **** 	    *bp++ = '_';
2705:src/display.c **** 	  } else {
2706:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2707:src/display.c **** 	       : State2.ind ? 2 
2708:src/display.c **** 	       : num_arg_digits(CmdBase); */
2709:src/display.c **** 	    if (State2.local)
2710:src/display.c **** 	      *bp++ = '.';
2711:src/display.c **** 	    if (State2.numdigit > 0) {
2712:src/display.c **** 	      if (State2.shuffle)
2713:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2714:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2715:src/display.c **** 	      else
2716:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2717:src/display.c **** 	    }
2718:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2719:src/display.c **** 	    *bp++ = '_';
2720:src/display.c **** 	  }
2721:src/display.c **** 	  if (yreg_enabled) {
2722:src/display.c **** 	    set_status_top(buf);
2723:src/display.c **** 	    no_status_top = 1;
2724:src/display.c **** 	    annuc = 1;
2725:src/display.c **** 	  }
2726:src/display.c **** 	  else {
ARM GAS  /tmp/cchyQ5Gz.s 			page 63


2727:src/display.c **** 	    set_status(buf);
2728:src/display.c **** 	  }
2729:src/display.c **** 	} else if (State2.test != TST_NONE) {
2730:src/display.c **** 	  *bp++ = 'x';
2731:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2732:src/display.c **** 	  *bp++ = '_';
2733:src/display.c **** 	  *bp++ = '?';
2734:src/display.c **** 	  if (yreg_enabled) {
2735:src/display.c **** 	    set_status_top(buf);
2736:src/display.c **** 	    no_status_top = 1;
2737:src/display.c **** 	    annuc = 1;
2738:src/display.c **** 	  }
2739:src/display.c **** 	  else {
2740:src/display.c **** 	    set_status(buf);
2741:src/display.c **** 	  }
2742:src/display.c **** 	} else if (cata) {
2743:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2744:src/display.c **** 	  char b2[16];
2745:src/display.c **** 	  const char *p;
2746:src/display.c **** 
2747:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2748:src/display.c **** 	  p = catcmd(op, b2);
2749:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2750:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2751:src/display.c **** 	  bp = scopy(bp, p);
2752:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2753:src/display.c **** 	    // State2.disp_small = 1;
2754:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2755:src/display.c **** 	      set_digits_string("0 to 255", 0);
2756:src/display.c **** 	    else
2757:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2758:src/display.c **** 	    skip = 1;
2759:src/display.c **** 	  } else if (State2.runmode) {
2760:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2761:src/display.c **** 	      decNumber x, r;
2762:src/display.c **** 	      decimal64 z;
2763:src/display.c **** 
2764:src/display.c **** 	      getX(&x);
2765:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2766:src/display.c **** 		const unsigned int f = argKIND(op);
2767:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2768:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2769:src/display.c **** 		  update_speed(0);
2770:src/display.c **** 		  fp(&r, &x);
2771:src/display.c **** 		}
2772:src/display.c **** 		else
2773:src/display.c **** 		  set_NaN(&r);
2774:src/display.c **** 	      } else
2775:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2776:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2777:src/display.c **** 	      packed_from_number(&z, &r);
2778:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2779:src/display.c **** 	      skip = 1;
2780:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2781:src/display.c **** 	      REGISTER z, *const x = StackBase;
2782:src/display.c **** 	      copyreg(&z, x);
2783:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
ARM GAS  /tmp/cchyQ5Gz.s 			page 64


2784:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2785:src/display.c **** 	      copyreg(x, &z);
2786:src/display.c **** 	      skip = 1;
2787:src/display.c **** 	    }
2788:src/display.c **** 	  }
2789:src/display.c **** 	  if (yreg_enabled) {
2790:src/display.c **** 	    set_status_top(buf);
2791:src/display.c **** 	    no_status_top = 1;
2792:src/display.c **** 	    annuc = 1;
2793:src/display.c **** 	  }
2794:src/display.c **** 	  else {
2795:src/display.c **** 	    set_status(buf);
2796:src/display.c **** 	  }
2797:src/display.c **** 	} else if (State2.multi) {
2798:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2799:src/display.c **** 	  if (State2.numdigit > 0) {
2800:src/display.c **** 	    *bp++ = (char) State2.digval;
2801:src/display.c **** 	    if (State2.numdigit > 1)
2802:src/display.c **** 	      *bp++ = State2.digval2;
2803:src/display.c **** 	  }
2804:src/display.c **** 	  if (yreg_enabled) {
2805:src/display.c **** 	    set_status_top(buf);
2806:src/display.c **** 	    no_status_top = 1;
2807:src/display.c **** 	    annuc = 1;
2808:src/display.c **** 	  }
2809:src/display.c **** 	  else {
2810:src/display.c **** 	    set_status(buf);
2811:src/display.c **** 	  }
2812:src/display.c **** 	} else if (State2.status) {
2813:src/display.c **** 	  show_status();
2814:src/display.c **** 	  skip = 1;
2815:src/display.c **** 	} else if (State2.labellist) {
2816:src/display.c **** 	  show_label();
2817:src/display.c **** 	  skip = 1;
2818:src/display.c **** 	} else if (State2.registerlist) {
2819:src/display.c **** 	  show_registers();
2820:src/display.c **** 	  skip = 1;
2821:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2822:src/display.c **** 	    annunciators();
2823:src/display.c **** 	  }
2824:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2825:src/display.c **** 	} else if (State2.disp_as_alpha) {
2826:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2827:src/display.c **** #endif
2828:src/display.c **** 	} else if (State2.runmode) {
2829:src/display.c **** 	  if (DispMsg) { 
2830:src/display.c **** 	    set_status(DispMsg);
2831:src/display.c **** 	  } else if (DispPlot) {
2832:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2833:src/display.c **** 	  } else if (State2.alphas) {
2834:src/display.c **** 	    bp = scopy(buf, Alpha);
2835:src/display.c **** 	    j = State2.alpha_pos;
2836:src/display.c **** 	    if (j != 0) {
2837:src/display.c **** 	      i = slen(buf);
2838:src/display.c **** 	      j *= 6;
2839:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2840:src/display.c **** 		{
ARM GAS  /tmp/cchyQ5Gz.s 			page 65


2841:src/display.c **** 		  buf[ (i - j) ] = '\0';
2842:src/display.c **** 		  set_status_right(buf);
2843:src/display.c **** 		}
2844:src/display.c **** 	      else {
2845:src/display.c **** 		set_status(buf);
2846:src/display.c **** 	      }
2847:src/display.c **** 	    }
2848:src/display.c **** 	    else {
2849:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2850:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2851:src/display.c **** 		*bp++ = '\0';
2852:src/display.c **** 	      }
2853:src/display.c **** 	      set_status_right(buf);
2854:src/display.c **** 	    }
2855:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2856:src/display.c **** 	      bp = buf;
2857:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2858:src/display.c **** 	      *bp++ = '\0';
2859:src/display.c **** 	      set_status_top(buf);
2860:src/display.c **** 	      no_status_top = 1;
2861:src/display.c **** 	      //annuc = 1;
2862:src/display.c **** 	    }
2863:src/display.c **** 	  }
2864:src/display.c **** 	  else {
2865:src/display.c **** 	    annuc = 1;
2866:src/display.c **** 	  }
2867:src/display.c **** 	}
2868:src/display.c **** 	else {
2869:src/display.c **** #ifndef DM42
2870:src/display.c **** 	  show_progtrace(buf);
2871:src/display.c **** #endif
2872:src/display.c **** 	  i = state_pc();
2873:src/display.c **** 	  if (i > 0)
2874:src/display.c **** 	    set_status(prt(getprog(i), buf));
2875:src/display.c **** 	  else
2876:src/display.c **** 	    set_status("");
2877:src/display.c **** 	  set_dot(STO_annun);
2878:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2879:src/display.c **** 	    annuc = 1;
2880:src/display.c **** 	  goto nostk;
2881:src/display.c **** 	}
2882:src/display.c **** 	show_stack();
2883:src/display.c ****       nostk:
2884:src/display.c **** 	show_flags();
2885:src/display.c **** 	if (!skip) {
2886:src/display.c **** 	  if (State2.runmode) {
2887:src/display.c **** 	  only_update_x:
2888:src/display.c **** 	    p = get_cmdline();
2889:src/display.c **** 	    if (p == NULL || cata) {
2890:src/display.c **** 	      if (ShowRegister != -1) {
2891:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2892:src/display.c **** 		format_reg(ShowRegister, CNULL);
2893:src/display.c **** 	      }
2894:src/display.c **** 	      else
2895:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2896:src/display.c **** 	    } else {
2897:src/display.c **** 	      disp_x(p);
ARM GAS  /tmp/cchyQ5Gz.s 			page 66


2898:src/display.c **** 	      x_disp = 1;
2899:src/display.c **** 	    }
2900:src/display.c **** 	    if (WasDataEntry) {
2901:src/display.c **** 	      goto finish;
2902:src/display.c **** 	    }
2903:src/display.c **** 	  } else {
2904:src/display.c **** 	    unsigned int pc = state_pc();
2905:src/display.c **** 	    unsigned int upc = user_pc(pc);
2906:src/display.c **** 	    const int n = nLIB(pc);
2907:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2908:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2909:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2910:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2911:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2912:src/display.c **** #ifndef REALBUILD
2913:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2914:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2915:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2916:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2917:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2918:src/display.c **** 	      char *b=buf;
2919:src/display.c **** 	      char *l=LastDisplayedNumber;
2920:src/display.c **** 	      *l++=' ';
2921:src/display.c **** 	      while(*b) {
2922:src/display.c **** 		*l++=*b++;
2923:src/display.c **** 		*l++=' ';
2924:src/display.c **** 	      }
2925:src/display.c **** 	      *l=0;
2926:src/display.c **** 	    }
2927:src/display.c **** #endif
2928:src/display.c **** 	  }
2929:src/display.c **** 	}
2930:src/display.c **** 	set_annunciators();
2931:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2932:src/display.c **** 	  ShowRPN = 0;
2933:src/display.c **** 	  dot(RPN, 0);
2934:src/display.c **** 	}
2935:src/display.c **** 	// disp_temp disables the <- key
2936:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2937:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2938:src/display.c **** 
2939:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2940:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2941:src/display.c **** 	  annunciators();
2942:src/display.c ****  	State2.hms = 0;
2943:src/display.c **** #else
2944:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2945:src/display.c **** 	  annunciators();
2946:src/display.c **** #endif
2947:src/display.c **** 
2948:src/display.c ****       finish:
2949:src/display.c **** 	State2.version = 0;
2950:src/display.c **** 	State2.disp_as_alpha = 0;
2951:src/display.c **** 	State2.smode = SDISP_NORMAL;
2952:src/display.c **** 	State2.invalid_disp = 0;
2953:src/display.c **** 	ShowRegister = regX_idx;
2954:src/display.c **** 	DispMsg = CNULL;
ARM GAS  /tmp/cchyQ5Gz.s 			page 67


2955:src/display.c **** 	DispPlot = 0;
2956:src/display.c **** 	State2.disp_small = 0;
2957:src/display.c **** 	finish_display();
2958:src/display.c **** 	no_status_top = 0;
2959:src/display.c **** #ifdef CONSOLE
2960:src/display.c **** 	JustDisplayed = 1;
2961:src/display.c **** #endif
2962:src/display.c ****       }
2963:src/display.c **** #else
2964:src/display.c ****       /*
2965:src/display.c ****        *  Update the display
2966:src/display.c ****        */
2967:src/display.c ****       void display(void) {
2968:src/display.c **** 	int i, j;
2969:src/display.c **** 	char buf[40], *bp = buf;
2970:src/display.c **** 	const char *p;
2971:src/display.c **** 	int annuc = 0;
2972:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2973:src/display.c **** 	int skip = 0;
2974:src/display.c **** 	int x_disp = 0;
2975:src/display.c **** 	const int shift = cur_shift();
2976:src/display.c **** 
2977:src/display.c **** 
2978:src/display.c **** 
2979:src/display.c **** 	if (State2.disp_freeze) {
2980:src/display.c **** 	  State2.disp_freeze = 0;
2981:src/display.c **** 	  State2.disp_temp = 1;
2982:src/display.c **** #ifdef CONSOLE
2983:src/display.c **** 	  JustDisplayed = 1;
2984:src/display.c **** #endif
2985:src/display.c **** 	  ShowRPN = 0;
2986:src/display.c **** 	  return;
2987:src/display.c **** 	}
2988:src/display.c **** 
2989:src/display.c **** 	if (WasDataEntry) {
2990:src/display.c **** #if defined(QTGUI) || defined(IOS)
2991:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2992:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2993:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2994:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2995:src/display.c **** #endif
2996:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2997:src/display.c **** 
2998:src/display.c **** 	  // Erase 7-segment display
2999:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3000:src/display.c **** 	    clr_dot(i);
3001:src/display.c **** 	  }
3002:src/display.c **** 	  goto only_update_x;
3003:src/display.c **** 	}
3004:src/display.c **** 
3005:src/display.c **** 	// Clear display
3006:src/display.c **** 	reset_disp();
3007:src/display.c **** 
3008:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3009:src/display.c **** 	if (State2.cmplx  && !cata) {
3010:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3011:src/display.c **** 	  set_status(buf);
ARM GAS  /tmp/cchyQ5Gz.s 			page 68


3012:src/display.c **** 	}
3013:src/display.c **** 	if (State2.version) {
3014:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3015:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3016:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3017:src/display.c **** #ifndef REALBUILD
3018:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3019:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3020:src/display.c **** #endif
3021:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3022:src/display.c **** 	  set_status(vers);
3023:src/display.c **** 	  skip = 1;
3024:src/display.c **** 	  goto nostk;
3025:src/display.c **** 	} else if (State2.confirm) {
3026:src/display.c **** 	  set_status(S_SURE);
3027:src/display.c **** 	} else if (State2.hyp) {
3028:src/display.c **** 	  bp = scopy(bp, "HYP");
3029:src/display.c **** 	  if (! State2.dot)
3030:src/display.c **** 	    *bp++ = '\235';
3031:src/display.c **** 	  set_status(buf);
3032:src/display.c **** 	} else if (State2.gtodot) {
3033:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3034:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3035:src/display.c **** 	  if (State2.numdigit > 0)
3036:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3037:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3038:src/display.c **** 	  *bp++ = '_';
3039:src/display.c **** 	  set_status(buf);
3040:src/display.c **** 	} else if (State2.rarg) {
3041:src/display.c **** 	  /* Commands with arguments */
3042:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3043:src/display.c **** 	  if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
3044:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3045:src/display.c **** #endif
3046:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3047:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3048:src/display.c **** 	  if (State2.dot) {
3049:src/display.c **** 	    *bp++ = 's';
3050:src/display.c **** 	    *bp++ = '_';
3051:src/display.c **** 	  } else if (shift == SHIFT_F) {
3052:src/display.c **** 	    *bp++ = '\021';
3053:src/display.c **** 	    *bp++ = '_';
3054:src/display.c **** 	  } else {
3055:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3056:src/display.c **** 	       : State2.ind ? 2 
3057:src/display.c **** 	       : num_arg_digits(CmdBase); */
3058:src/display.c **** 	    if (State2.local)
3059:src/display.c **** 	      *bp++ = '.';
3060:src/display.c **** 	    if (State2.numdigit > 0) {
3061:src/display.c **** 	      if (State2.shuffle)
3062:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3063:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3064:src/display.c **** 	      else
3065:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3066:src/display.c **** 	    }
3067:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3068:src/display.c **** 	    *bp++ = '_';
ARM GAS  /tmp/cchyQ5Gz.s 			page 69


3069:src/display.c **** 	  }
3070:src/display.c **** 	  set_status(buf);
3071:src/display.c **** 	} else if (State2.test != TST_NONE) {
3072:src/display.c **** 	  *bp++ = 'x';
3073:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3074:src/display.c **** 	  *bp++ = '_';
3075:src/display.c **** 	  *bp++ = '?';
3076:src/display.c **** 	  set_status(buf);
3077:src/display.c **** 	} else if (cata) {
3078:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3079:src/display.c **** 	  char b2[16];
3080:src/display.c **** 	  const char *p;
3081:src/display.c **** 
3082:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3083:src/display.c **** 	  p = catcmd(op, b2);
3084:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3085:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3086:src/display.c **** 	  bp = scopy(bp, p);
3087:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3088:src/display.c **** 	    // State2.disp_small = 1;
3089:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3090:src/display.c **** 	      set_digits_string("0 to 255", 0);
3091:src/display.c **** 	    else
3092:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3093:src/display.c **** 	    skip = 1;
3094:src/display.c **** 	  } else if (State2.runmode) {
3095:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3096:src/display.c **** 	      decNumber x, r;
3097:src/display.c **** 	      decimal64 z;
3098:src/display.c **** 
3099:src/display.c **** 	      getX(&x);
3100:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3101:src/display.c **** 		const unsigned int f = argKIND(op);
3102:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3103:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3104:src/display.c **** 		  update_speed(0);
3105:src/display.c **** 		  fp(&r, &x);
3106:src/display.c **** 		}
3107:src/display.c **** 		else
3108:src/display.c **** 		  set_NaN(&r);
3109:src/display.c **** 	      } else
3110:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3111:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3112:src/display.c **** 	      packed_from_number(&z, &r);
3113:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3114:src/display.c **** 	      skip = 1;
3115:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3116:src/display.c **** 	      REGISTER z, *const x = StackBase;
3117:src/display.c **** 	      copyreg(&z, x);
3118:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3119:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3120:src/display.c **** 	      copyreg(x, &z);
3121:src/display.c **** 	      skip = 1;
3122:src/display.c **** 	    }
3123:src/display.c **** 	  }
3124:src/display.c **** 	  set_status(buf);
3125:src/display.c **** 	} else if (State2.multi) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 70


3126:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3127:src/display.c **** 	  if (State2.numdigit > 0) {
3128:src/display.c **** 	    *bp++ = (char) State2.digval;
3129:src/display.c **** 	    if (State2.numdigit > 1)
3130:src/display.c **** 	      *bp++ = State2.digval2;
3131:src/display.c **** 	  }
3132:src/display.c **** 	  set_status(buf);
3133:src/display.c **** 	} else if (State2.status) {
3134:src/display.c **** 	  show_status();
3135:src/display.c **** 	  skip = 1;
3136:src/display.c **** 	} else if (State2.labellist) {
3137:src/display.c **** 	  show_label();
3138:src/display.c **** 	  skip = 1;
3139:src/display.c **** 	} else if (State2.registerlist) {
3140:src/display.c **** 	  show_registers();
3141:src/display.c **** 	  skip = 1;
3142:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3143:src/display.c **** 	    annunciators();
3144:src/display.c **** 	  }
3145:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3146:src/display.c **** 	} else if (State2.disp_as_alpha) {
3147:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3148:src/display.c **** #endif
3149:src/display.c **** 	} else if (State2.runmode) {
3150:src/display.c **** 	  if (DispMsg) { 
3151:src/display.c **** 	    set_status(DispMsg);
3152:src/display.c **** 	  } else if (DispPlot) {
3153:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3154:src/display.c **** 	  } else if (State2.alphas) {
3155:src/display.c **** #if 0
3156:src/display.c **** 	    set_digits_string("AlpHA", 0);
3157:src/display.c **** #endif
3158:src/display.c **** 	    bp = scopy(buf, Alpha);
3159:src/display.c **** 	    j = State2.alpha_pos;
3160:src/display.c **** 	    if (j != 0) {
3161:src/display.c **** 	      i = slen(buf);
3162:src/display.c **** 	      //				
3163:src/display.c **** 	      j *= 6;
3164:src/display.c **** #ifdef BIGGER_DISPLAY
3165:src/display.c **** 	      if ( i - j >= 20 )
3166:src/display.c **** #else
3167:src/display.c **** 	      if ( i - j >= 12 )
3168:src/display.c **** #endif
3169:src/display.c **** 		{
3170:src/display.c **** 		buf[ (i - j) ] = '\0';
3171:src/display.c **** 		set_status_right(buf);
3172:src/display.c **** 		}
3173:src/display.c **** 	      else {
3174:src/display.c **** 		set_status(buf);
3175:src/display.c **** 	      }
3176:src/display.c **** 	    } else {
3177:src/display.c **** 	      if (shift != SHIFT_N) {
3178:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3179:src/display.c **** 		*bp++ = '\0';
3180:src/display.c **** 	      }
3181:src/display.c **** 	      set_status_right(buf);
3182:src/display.c **** 	    }
ARM GAS  /tmp/cchyQ5Gz.s 			page 71


3183:src/display.c **** 	  } else {
3184:src/display.c **** 	    annuc = 1;
3185:src/display.c **** 	  }
3186:src/display.c **** 	} else {
3187:src/display.c **** #ifndef DM42
3188:src/display.c **** 	  show_progtrace(buf);
3189:src/display.c **** #endif
3190:src/display.c **** 	  i = state_pc();
3191:src/display.c **** 	  if (i > 0)
3192:src/display.c **** 	    set_status(prt(getprog(i), buf));
3193:src/display.c **** 	  else
3194:src/display.c **** 	    set_status("");
3195:src/display.c **** 	  set_dot(STO_annun);
3196:src/display.c **** #if 0
3197:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3198:src/display.c **** 	    unsigned short int crc;
3199:src/display.c **** 	    crc = checksum_program();
3200:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3201:src/display.c **** 	    for (i=0; i<4; i++) {
3202:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3203:src/display.c **** 	      crc >>= 4;
3204:src/display.c **** 	      j += SEGS_PER_DIGIT;
3205:src/display.c **** 	    }
3206:src/display.c **** 	    skip = 1;
3207:src/display.c **** 	  }
3208:src/display.c **** 	  else
3209:src/display.c **** #endif
3210:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3211:src/display.c **** 	      annuc = 1;
3212:src/display.c **** 	  goto nostk;
3213:src/display.c **** 	}
3214:src/display.c **** 	show_stack();
3215:src/display.c ****       nostk:	show_flags();
3216:src/display.c **** 	if (!skip) {
3217:src/display.c **** 	  if (State2.runmode) {
3218:src/display.c **** 	  only_update_x:
3219:src/display.c **** 	    p = get_cmdline();
3220:src/display.c **** 	    if (p == NULL || cata) {
3221:src/display.c **** 	      if (ShowRegister != -1) {
3222:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3223:src/display.c **** 		format_reg(ShowRegister, CNULL);
3224:src/display.c **** 	      }
3225:src/display.c **** 	      else
3226:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3227:src/display.c **** 	    } else {
3228:src/display.c **** 	      disp_x(p);
3229:src/display.c **** 	      x_disp = 1;
3230:src/display.c **** 	    }
3231:src/display.c **** 	    if (WasDataEntry) {
3232:src/display.c **** 	      goto finish;
3233:src/display.c **** 	    }
3234:src/display.c **** 	  } else {
3235:src/display.c **** 	    unsigned int pc = state_pc();
3236:src/display.c **** 	    unsigned int upc = user_pc(pc);
3237:src/display.c **** 	    const int n = nLIB(pc);
3238:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3239:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
ARM GAS  /tmp/cchyQ5Gz.s 			page 72


3240:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3241:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3242:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3243:src/display.c **** #ifndef REALBUILD
3244:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3245:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3246:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3247:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3248:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3249:src/display.c **** 	      char *b=buf;
3250:src/display.c **** 	      char *l=LastDisplayedNumber;
3251:src/display.c **** 	      *l++=' ';
3252:src/display.c **** 	      while(*b) {
3253:src/display.c **** 		*l++=*b++;
3254:src/display.c **** 		*l++=' ';
3255:src/display.c **** 	      }
3256:src/display.c **** 	      *l=0;
3257:src/display.c **** 	    }
3258:src/display.c **** #endif
3259:src/display.c **** 	  }
3260:src/display.c **** 	}
3261:src/display.c **** 	set_annunciators();
3262:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3263:src/display.c **** 	  ShowRPN = 0;
3264:src/display.c **** 	  dot(RPN, 0);
3265:src/display.c **** 	}
3266:src/display.c **** 	// disp_temp disables the <- key
3267:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3268:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3269:src/display.c **** 
3270:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3271:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3272:src/display.c **** 	  annunciators();
3273:src/display.c ****  	State2.hms = 0;
3274:src/display.c **** #else
3275:src/display.c **** 
3276:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3277:src/display.c **** 	  annunciators();
3278:src/display.c **** 	
3279:src/display.c **** 
3280:src/display.c **** 
3281:src/display.c **** #endif
3282:src/display.c **** 
3283:src/display.c ****       finish:
3284:src/display.c **** 	State2.version = 0;
3285:src/display.c **** 	State2.disp_as_alpha = 0;
3286:src/display.c **** 	State2.smode = SDISP_NORMAL;
3287:src/display.c **** 	State2.invalid_disp = 0;
3288:src/display.c **** 	ShowRegister = regX_idx;
3289:src/display.c **** 	DispMsg = CNULL;
3290:src/display.c **** 	DispPlot = 0;
3291:src/display.c **** 	State2.disp_small = 0;
3292:src/display.c **** 	finish_display();
3293:src/display.c **** #ifdef CONSOLE
3294:src/display.c **** 	JustDisplayed = 1;
3295:src/display.c **** #endif
3296:src/display.c ****       }
ARM GAS  /tmp/cchyQ5Gz.s 			page 73


3297:src/display.c **** #endif
3298:src/display.c ****       /*
3299:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3300:src/display.c ****        */
3301:src/display.c ****       void frozen_display()
3302:src/display.c ****       {
3303:src/display.c **** 	State2.disp_freeze = 0;
3304:src/display.c **** 	display();
3305:src/display.c **** 	State2.disp_freeze = 1;
3306:src/display.c ****       }
3307:src/display.c **** 
3308:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3309:src/display.c **** 	int glen = *graphic++;
3310:src/display.c **** 	int i, j;
3311:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3312:src/display.c **** 	unsigned long long int mat[6];
3313:src/display.c **** 
3314:src/display.c **** 	xset(mat, 0, sizeof(mat));
3315:src/display.c **** #endif
3316:src/display.c **** #ifndef REALBUILD
3317:src/display.c **** 	forceDispPlot=1;
3318:src/display.c **** #endif
3319:src/display.c **** 	if (glen <= 0)			return;
3320:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3321:src/display.c **** 
3322:src/display.c **** 	for (i=0; i<6; i++)
3323:src/display.c **** 	  for (j=1; j<=glen; j++) {
3324:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3325:src/display.c **** 	    if (graphic[j] & (1 << i))
3326:src/display.c **** 	      mat[i] |= 1LL << j;
3327:src/display.c **** #else
3328:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3329:src/display.c **** #endif
3330:src/display.c **** 	  }
3331:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3332:src/display.c **** 	set_status_grob(mat);
3333:src/display.c **** #endif
3334:src/display.c ****       }
3335:src/display.c **** 
3336:src/display.c **** 
3337:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3338:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3339:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3340:src/display.c ****        * column is almost always blank.
3341:src/display.c ****        */
3342:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3343:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3344:src/display.c ****       }
3345:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3346:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3347:src/display.c ****       }
3348:src/display.c **** 
3349:src/display.c ****       
3350:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3350 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
ARM GAS  /tmp/cchyQ5Gz.s 			page 74


 682              		@ frame_needed = 0, uses_anonymous_args = 0
3351:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3351 2 view .LVU201
3352:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3353:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3354:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3354 2 view .LVU202
3355:src/display.c **** #endif
3356:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3356 2 view .LVU203
3357:src/display.c **** 	int i, j;
 686              		.loc 1 3357 2 view .LVU204
3358:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3358 2 view .LVU205
3350:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3350 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3359:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3360:src/display.c **** 	unsigned long long int mat[6];
3361:src/display.c **** 
3362:src/display.c **** 	xset(mat, 0, sizeof(mat));
3363:src/display.c **** #endif
3364:src/display.c **** #ifndef REALBUILD
3365:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3365 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3350:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3350 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3358:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3358 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3350:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3350 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3358:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3358 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3358:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3358 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3365 2 view .LVU213
 717 0018 0146     		mov	r1, r0
ARM GAS  /tmp/cchyQ5Gz.s 			page 75


 718              	.LVL58:
 719              		.loc 1 3365 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3358:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3358 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3365 2 is_stmt 1 view .LVU216
3358:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3358 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3350:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3350 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3365 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3366:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3367:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3367 2 is_stmt 1 view .LVU220
 734              		.loc 1 3367 14 view .LVU221
 735              		.loc 1 3367 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3367 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3367 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3367 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3368:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3368 4 is_stmt 1 view .LVU226
 749              		.loc 1 3368 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3368 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3368 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3368 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3369:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3370:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3371:src/display.c **** 	      ++i;
3372:src/display.c **** 	  }
3373:src/display.c **** 	  else {
3374:src/display.c **** 	    ++i;
3375:src/display.c **** 	  }
3376:src/display.c **** 	}
3377:src/display.c **** #endif
ARM GAS  /tmp/cchyQ5Gz.s 			page 76


3378:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3378 2 is_stmt 1 view .LVU231
3379:src/display.c **** #endif
3380:src/display.c **** #ifdef RP_PREFIX
3381:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3381 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3378:src/display.c **** #endif
 763              		.loc 1 3378 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3381 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3382:src/display.c **** #endif
3383:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3384:src/display.c **** 	findlengths(posns, smallp);
3385:src/display.c **** #endif
3386:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3386 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3378:src/display.c **** #endif
 770              		.loc 1 3378 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3381:src/display.c **** #endif
 772              		.loc 1 3381 2 is_stmt 1 view .LVU237
 773              		.loc 1 3386 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3386 8 view .LVU239
 776              		.loc 1 3386 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3386 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3356:src/display.c **** 	int i, j;
 781              		.loc 1 3356 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB190:
3387:src/display.c **** 	  int c;
3388:src/display.c **** 	  int width;
3389:src/display.c **** 	  unsigned char cmap[6];
3390:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3391:src/display.c **** 	  int real_width;
3392:src/display.c **** 	  int current_smallp;
3393:src/display.c **** 
3394:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3395:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3396:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3397:src/display.c **** 	  //           01 -> (not used)
3398:src/display.c **** 	  //           10 -> use big font
3399:src/display.c **** 	  //           11 -> use small font
3400:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3401:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3401 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE190:
3386:src/display.c **** 	  int c;
 787              		.loc 1 3386 33 view .LVU244
ARM GAS  /tmp/cchyQ5Gz.s 			page 77


 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3354:src/display.c **** #endif
 790              		.loc 1 3354 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB199:
3387:src/display.c **** 	  int c;
 794              		.loc 1 3387 4 is_stmt 1 view .LVU246
3388:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3388 4 view .LVU247
3389:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3389 4 view .LVU248
3391:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3391 4 view .LVU249
3392:src/display.c **** 
 798              		.loc 1 3392 4 view .LVU250
 799              		.loc 1 3401 4 view .LVU251
 800              		.loc 1 3401 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3402:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3402 6 is_stmt 1 view .LVU253
 805              		.loc 1 3402 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3403:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3403 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3402:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3402 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3403 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3404:src/display.c **** 	    default:
3405:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3406:src/display.c **** 	      break;
3407:src/display.c **** 	    case 0x40:	current_smallp = 0;
3408:src/display.c **** 	      break;
3409:src/display.c **** 	    case 0x60:	current_smallp = 1;
3410:src/display.c **** 	      break;
3411:src/display.c **** 	    }
3412:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3412 6 view .LVU258
 820              		.loc 1 3412 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3412 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
ARM GAS  /tmp/cchyQ5Gz.s 			page 78


 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3413:src/display.c **** 	    str += 3;
 831              		.loc 1 3413 6 is_stmt 1 discriminator 4 view .LVU261
3414:src/display.c **** 
3415:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3415 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3413:src/display.c **** 	    str += 3;
 836              		.loc 1 3413 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3415 6 is_stmt 1 discriminator 4 view .LVU264
3416:src/display.c **** 	  } else {
3417:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3418:src/display.c **** 	    real_width = width = charlengths(c);
3419:src/display.c **** 	    current_smallp = smallp;
3420:src/display.c **** 	  }
3421:src/display.c **** 
3422:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3422 4 discriminator 4 view .LVU265
 843              		.loc 1 3422 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3422 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3422 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3423:src/display.c **** 	    break;
3424:src/display.c **** 
3425:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3425 4 is_stmt 1 view .LVU269
 853              		.loc 1 3425 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3426:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3426 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3425:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3425 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3426 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3427:src/display.c **** 	    posns_state = current_smallp;
ARM GAS  /tmp/cchyQ5Gz.s 			page 79


 867              		.loc 1 3427 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3428:src/display.c **** 	  }
3429:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3429 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3430:src/display.c **** #else
3431:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3432:src/display.c **** 
3433:src/display.c **** 	  //cmap = &charset[c][0];
3434:src/display.c **** 	  width = charlengths(c);
3435:src/display.c **** 
3436:src/display.c **** 	  if (x + width > b_w+1)
3437:src/display.c **** 	    break;
3438:src/display.c **** 
3439:src/display.c **** 	  /* Decode the packed character bytes */
3440:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3441:src/display.c **** #endif
3442:src/display.c **** 
3443:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3443 4 view .LVU276
 877              		.loc 1 3443 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3443 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
3444:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3444 16 is_stmt 1 view .LVU279
 889              		.loc 1 3444 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3445:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3445 8 is_stmt 1 view .LVU281
 893              		.loc 1 3445 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3444:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3444 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3444:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3444 26 view .LVU284
ARM GAS  /tmp/cchyQ5Gz.s 			page 80


 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB191:
 907              	.LBB192:
 338:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 338 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 338:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 338 11 view .LVU286
 912              	.LBE192:
 913              	.LBE191:
 914              		.loc 1 3445 8 is_stmt 1 view .LVU287
3444:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3444 25 view .LVU288
3444:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3444 16 view .LVU289
3444:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3444 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3445 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3446:src/display.c **** 		break;
3447:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3448:src/display.c **** 	      if (cmap[i] & (1 << j))
3449:src/display.c **** 		mat[i] |= 1LL << (x+j);
3450:src/display.c **** #else
3451:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3451 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB196:
 929              	.LBI191:
 337:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 337 6 discriminator 2 view .LVU293
 931              	.LBB193:
 338:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 338 3 discriminator 2 view .LVU294
 338:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 338 11 discriminator 2 view .LVU295
 339:src/display.c **** }
 934              		.loc 1 339 8 discriminator 2 view .LVU296
 935              	.LBE193:
 936              	.LBE196:
 937              		.loc 1 3451 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3451 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB197:
 942              	.LBB194:
 338:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 338 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
ARM GAS  /tmp/cchyQ5Gz.s 			page 81


 338:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 338 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 338:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 338 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE194:
 950              	.LBE197:
3444:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3444 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB198:
 955              	.LBB195:
 339:src/display.c **** }
 956              		.loc 1 339 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 339:src/display.c **** }
 959              		.loc 1 339 8 view .LVU304
 960              	.LBE195:
 961              	.LBE198:
3445:src/display.c **** 		break;
 962              		.loc 1 3445 8 is_stmt 1 view .LVU305
3444:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3444 25 view .LVU306
3444:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3444 16 view .LVU307
3444:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3444 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3443 19 is_stmt 1 view .LVU309
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3443 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3443 14 is_stmt 1 view .LVU311
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3443 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3452:src/display.c **** #endif
3453:src/display.c **** 	    }
3454:src/display.c **** 	  x += width;
 980              		.loc 1 3454 4 is_stmt 1 view .LVU313
 981              	.LBE199:
3386:src/display.c **** 	  int c;
 982              		.loc 1 3386 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cchyQ5Gz.s 			page 82


 985              	.LBB200:
 986              		.loc 1 3454 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3454 6 view .LVU316
 990              	.LBE200:
3386:src/display.c **** 	  int c;
 991              		.loc 1 3386 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3386:src/display.c **** 	  int c;
 993              		.loc 1 3386 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3386:src/display.c **** 	  int c;
 996              		.loc 1 3386 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB201:
3401:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3401 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE201:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB202:
3387:src/display.c **** 	  int width;
 1005              		.loc 1 3387 4 is_stmt 1 view .LVU321
3388:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3388 4 view .LVU322
3389:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3389 4 view .LVU323
3391:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3391 4 view .LVU324
3392:src/display.c **** 
 1009              		.loc 1 3392 4 view .LVU325
3401:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3401 4 view .LVU326
3401:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3401 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3417:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3417 6 is_stmt 1 view .LVU328
3417:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3417 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3418:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3418 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3417:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3417 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/cchyQ5Gz.s 			page 83


 1027              	.LVL90:
3418:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3418 6 is_stmt 1 view .LVU332
3418:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3418 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3418:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3418 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3422:src/display.c **** 	    break;
 1034              		.loc 1 3422 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3418:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3418 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3419:src/display.c **** 	  }
 1039              		.loc 1 3419 6 is_stmt 1 view .LVU337
3422:src/display.c **** 	    break;
 1040              		.loc 1 3422 4 view .LVU338
3422:src/display.c **** 	    break;
 1041              		.loc 1 3422 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3422:src/display.c **** 	    break;
 1044              		.loc 1 3422 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3422:src/display.c **** 	    break;
 1049              		.loc 1 3422 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3422:src/display.c **** 	    break;
 1053              		.loc 1 3422 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3422:src/display.c **** 	    break;
 1057              		.loc 1 3422 7 view .LVU343
 1058              	.LBE202:
3455:src/display.c **** 	}
3456:src/display.c **** 
3457:src/display.c **** 
3458:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3459:src/display.c **** 	set_status_grob(mat);
3460:src/display.c **** #else
3461:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3461 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3461 20 view .LVU345
 1061              		.loc 1 3461 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
ARM GAS  /tmp/cchyQ5Gz.s 			page 84


 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3462:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3462 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3461:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3461 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3462 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3461:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3461 27 is_stmt 1 discriminator 3 view .LVU350
3461:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3461 20 discriminator 3 view .LVU351
3461:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3461 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3463:src/display.c **** #endif
3464:src/display.c ****       }
 1081              		.loc 1 3464 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB203:
3409:src/display.c **** 	      break;
 1091              		.loc 1 3409 17 is_stmt 1 view .LVU354
3410:src/display.c **** 	    }
 1092              		.loc 1 3410 8 view .LVU355
3412:src/display.c **** 	    str += 3;
 1093              		.loc 1 3412 6 view .LVU356
3412:src/display.c **** 	    str += 3;
 1094              		.loc 1 3412 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3409:src/display.c **** 	      break;
 1097              		.loc 1 3409 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3407:src/display.c **** 	      break;
 1104              		.loc 1 3407 17 is_stmt 1 view .LVU359
3408:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3408 8 view .LVU360
3412:src/display.c **** 	    str += 3;
 1106              		.loc 1 3412 6 view .LVU361
ARM GAS  /tmp/cchyQ5Gz.s 			page 85


3412:src/display.c **** 	    str += 3;
 1107              		.loc 1 3412 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3407:src/display.c **** 	      break;
 1110              		.loc 1 3407 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3407:src/display.c **** 	      break;
 1116              		.loc 1 3407 32 view .LVU364
 1117              	.LBE203:
3369:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3369 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3370:src/display.c **** 	      ++i;
 1123              		.loc 1 3370 6 view .LVU366
3370:src/display.c **** 	      ++i;
 1124              		.loc 1 3370 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB204:
3370:src/display.c **** 	      ++i;
 1133              		.loc 1 3370 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3370:src/display.c **** 	      ++i;
 1136              		.loc 1 3370 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3370:src/display.c **** 	      ++i;
 1141              		.loc 1 3370 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE204:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1155              		.align	2
ARM GAS  /tmp/cchyQ5Gz.s 			page 86


 1156              	.LC0:
 1157 0000 48494700 		.ascii	"HIG\000"
 1158              		.section	.text.set_exp,"ax",%progbits
 1159              		.align	1
 1160              		.p2align 2,,3
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv4-sp-d16
 1166              	set_exp:
 1167              	.LVL106:
 1168              	.LFB14:
 440:src/display.c ****   union {
 1169              		.loc 1 440 52 is_stmt 1 view -0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 441:src/display.c ****     char buf[4];
 1173              		.loc 1 441 3 view .LVU372
 445:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1174              		.loc 1 445 3 view .LVU373
 459:src/display.c **** #endif
 1175              		.loc 1 459 3 view .LVU374
 462:src/display.c ****   if (exp < 0) {
 1176              		.loc 1 462 3 view .LVU375
 440:src/display.c ****   union {
 1177              		.loc 1 440 52 is_stmt 0 view .LVU376
 1178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1179              		.cfi_def_cfa_offset 20
 1180              		.cfi_offset 4, -20
 1181              		.cfi_offset 5, -16
 1182              		.cfi_offset 6, -12
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 463:src/display.c ****     negative = 1;
 1185              		.loc 1 463 6 view .LVU377
 1186 0002 051E     		subs	r5, r0, #0
 440:src/display.c ****   union {
 1187              		.loc 1 440 52 view .LVU378
 1188 0004 83B0     		sub	sp, sp, #12
 1189              		.cfi_def_cfa_offset 32
 440:src/display.c ****   union {
 1190              		.loc 1 440 52 view .LVU379
 1191 0006 0F46     		mov	r7, r1
 1192              	.LVL107:
 463:src/display.c ****     negative = 1;
 1193              		.loc 1 463 3 is_stmt 1 view .LVU380
 440:src/display.c ****   union {
 1194              		.loc 1 440 52 is_stmt 0 view .LVU381
 1195 0008 1446     		mov	r4, r2
 463:src/display.c ****     negative = 1;
 1196              		.loc 1 463 6 view .LVU382
 1197 000a 0ADB     		blt	.L145
 462:src/display.c ****   if (exp < 0) {
 1198              		.loc 1 462 12 view .LVU383
 1199 000c 01F00203 		and	r3, r1, #2
 1200              	.LVL108:
ARM GAS  /tmp/cchyQ5Gz.s 			page 87


 470:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 470 3 is_stmt 1 view .LVU384
 470:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 470 6 is_stmt 0 view .LVU385
 1203 0010 A2B3     		cbz	r2, .L126
 475:src/display.c **** #endif
 1204              		.loc 1 475 7 is_stmt 1 view .LVU386
 475:src/display.c **** #endif
 1205              		.loc 1 475 10 is_stmt 0 view .LVU387
 1206 0012 B5F57A7F 		cmp	r5, #1000
 1207 0016 2ADB     		blt	.L127
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 1208              		.loc 1 477 2 is_stmt 1 view .LVU388
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 1209              		.loc 1 477 5 is_stmt 0 view .LVU389
 1210 0018 73BB     		cbnz	r3, .L132
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 1211              		.loc 1 477 17 is_stmt 1 discriminator 1 view .LVU390
 1212              	.LVL109:
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 477 24 is_stmt 0 discriminator 1 view .LVU391
 1214 001a 3A23     		movs	r3, #58
 1215              	.LVL110:
 477:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 477 24 discriminator 1 view .LVU392
 1217 001c 04F8013B 		strb	r3, [r4], #1
 1218              	.LVL111:
 484:src/display.c ****     }
 1219              		.loc 1 484 7 is_stmt 1 discriminator 1 view .LVU393
 1220 0020 08E0     		b	.L128
 1221              	.LVL112:
 1222              	.L145:
 464:src/display.c ****     exp = -exp;
 1223              		.loc 1 464 5 view .LVU394
 465:src/display.c ****   }
 1224              		.loc 1 465 5 view .LVU395
 465:src/display.c ****   }
 1225              		.loc 1 465 9 is_stmt 0 view .LVU396
 1226 0022 6E42     		rsbs	r6, r5, #0
 1227              	.LVL113:
 470:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1228              		.loc 1 470 3 is_stmt 1 view .LVU397
 470:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1229              		.loc 1 470 6 is_stmt 0 view .LVU398
 1230 0024 AAB3     		cbz	r2, .L123
 475:src/display.c **** #endif
 1231              		.loc 1 475 7 is_stmt 1 view .LVU399
 475:src/display.c **** #endif
 1232              		.loc 1 475 10 is_stmt 0 view .LVU400
 1233 0026 15F57A7F 		cmn	r5, #1000
 1234 002a 2DDC     		bgt	.L146
 1235              	.LVL114:
 1236              	.L124:
 484:src/display.c ****     }
 1237              		.loc 1 484 21 is_stmt 1 discriminator 1 view .LVU401
 484:src/display.c ****     }
 1238              		.loc 1 484 28 is_stmt 0 discriminator 1 view .LVU402
ARM GAS  /tmp/cchyQ5Gz.s 			page 88


 1239 002c 2D23     		movs	r3, #45
 1240 002e 04F8013B 		strb	r3, [r4], #1
 1241              	.LVL115:
 484:src/display.c ****     }
 1242              		.loc 1 484 28 discriminator 1 view .LVU403
 1243 0032 3546     		mov	r5, r6
 1244              	.LVL116:
 1245              	.L128:
 532:src/display.c **** #endif
 1246              		.loc 1 532 7 is_stmt 1 view .LVU404
 1247 0034 01AE     		add	r6, sp, #4
 1248 0036 0021     		movs	r1, #0
 1249 0038 3046     		mov	r0, r6
 1250 003a 0422     		movs	r2, #4
 1251 003c FFF7FEFF 		bl	xset
 1252              	.LVL117:
 534:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1253              		.loc 1 534 7 view .LVU405
 534:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1254              		.loc 1 534 10 is_stmt 0 view .LVU406
 1255 0040 17F0050F 		tst	r7, #5
 535:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 535 2 view .LVU407
 1257 0044 2946     		mov	r1, r5
 534:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1258              		.loc 1 534 10 view .LVU408
 1259 0046 09D0     		beq	.L131
 1260              	.LVL118:
 535:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1261              		.loc 1 535 2 is_stmt 1 view .LVU409
 1262 0048 0322     		movs	r2, #3
 1263 004a 3046     		mov	r0, r6
 1264 004c FFF7FEFF 		bl	num_arg_0
 1265              	.LVL119:
 1266              	.L130:
 557:src/display.c ****     }
 1267              		.loc 1 557 7 view .LVU410
 1268 0050 2146     		mov	r1, r4
 1269 0052 3046     		mov	r0, r6
 1270 0054 FFF7FEFF 		bl	set_exp_digits_string
 1271              	.LVL120:
 558:src/display.c **** 
 1272              		.loc 1 558 5 is_stmt 0 view .LVU411
 1273 0058 03B0     		add	sp, sp, #12
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 20
 1276              		@ sp needed
 1277 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1278              	.LVL121:
 1279              	.L131:
 1280              		.cfi_restore_state
 555:src/display.c ****     no_number:
 1281              		.loc 1 555 2 is_stmt 1 view .LVU412
 1282 005c 3046     		mov	r0, r6
 1283 005e FFF7FEFF 		bl	num_arg
 1284              	.LVL122:
 557:src/display.c ****     }
ARM GAS  /tmp/cchyQ5Gz.s 			page 89


 1285              		.loc 1 557 7 view .LVU413
 1286 0062 2146     		mov	r1, r4
 1287 0064 3046     		mov	r0, r6
 1288 0066 FFF7FEFF 		bl	set_exp_digits_string
 1289              	.LVL123:
 558:src/display.c **** 
 1290              		.loc 1 558 5 is_stmt 0 view .LVU414
 1291 006a 03B0     		add	sp, sp, #12
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 20
 1294              		@ sp needed
 1295 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1296              	.LVL124:
 1297              	.L127:
 1298              		.cfi_restore_state
 480:src/display.c **** #else
 1299              		.loc 1 480 12 is_stmt 1 view .LVU415
 480:src/display.c **** #else
 1300              		.loc 1 480 19 is_stmt 0 view .LVU416
 1301 006e 6522     		movs	r2, #101
 1302              	.LVL125:
 480:src/display.c **** #else
 1303              		.loc 1 480 19 view .LVU417
 1304 0070 04F8012B 		strb	r2, [r4], #1
 1305              	.LVL126:
 484:src/display.c ****     }
 1306              		.loc 1 484 7 is_stmt 1 view .LVU418
 484:src/display.c ****     }
 1307              		.loc 1 484 10 is_stmt 0 view .LVU419
 1308 0074 002B     		cmp	r3, #0
 1309 0076 DDD0     		beq	.L128
 1310              	.L132:
 484:src/display.c ****     }
 1311              		.loc 1 484 10 view .LVU420
 1312 0078 2E46     		mov	r6, r5
 1313 007a D7E7     		b	.L124
 1314              	.LVL127:
 1315              	.L126:
 487:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1316              		.loc 1 487 7 is_stmt 1 view .LVU421
 487:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1317              		.loc 1 487 10 is_stmt 0 view .LVU422
 1318 007c 43B9     		cbnz	r3, .L147
 1319              	.LVL128:
 1320              	.L129:
 491:src/display.c **** #endif
 1321              		.loc 1 491 2 is_stmt 1 view .LVU423
 491:src/display.c **** #endif
 1322              		.loc 1 491 5 is_stmt 0 view .LVU424
 1323 007e B5F57A7F 		cmp	r5, #1000
 1324 0082 0EDA     		bge	.L148
 491:src/display.c **** #endif
 1325              		.loc 1 491 5 view .LVU425
 1326 0084 0024     		movs	r4, #0
 1327              	.LVL129:
 491:src/display.c **** #endif
 1328              		.loc 1 491 5 view .LVU426
ARM GAS  /tmp/cchyQ5Gz.s 			page 90


 1329 0086 D5E7     		b	.L128
 1330              	.LVL130:
 1331              	.L146:
 480:src/display.c **** #else
 1332              		.loc 1 480 12 is_stmt 1 view .LVU427
 480:src/display.c **** #else
 1333              		.loc 1 480 19 is_stmt 0 view .LVU428
 1334 0088 6523     		movs	r3, #101
 1335 008a 04F8013B 		strb	r3, [r4], #1
 1336              	.LVL131:
 484:src/display.c ****     }
 1337              		.loc 1 484 7 is_stmt 1 view .LVU429
 1338 008e CDE7     		b	.L124
 1339              	.LVL132:
 1340              	.L147:
 484:src/display.c ****     }
 1341              		.loc 1 484 7 is_stmt 0 view .LVU430
 1342 0090 2E46     		mov	r6, r5
 1343              	.LVL133:
 1344              	.L123:
 487:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1345              		.loc 1 487 21 is_stmt 1 view .LVU431
 1346              	.LBB205:
 1347              	.LBI205:
 306:src/display.c **** {
 1348              		.loc 1 306 13 view .LVU432
 1349              	.LBB206:
 308:src/display.c ****   set_dot(EXP_SIGN);
 1350              		.loc 1 308 3 view .LVU433
 308:src/display.c ****   set_dot(EXP_SIGN);
 1351              		.loc 1 308 27 is_stmt 0 view .LVU434
 1352 0092 074B     		ldr	r3, .L149
 1353 0094 2D22     		movs	r2, #45
 1354              	.LVL134:
 309:src/display.c **** }
 1355              		.loc 1 309 3 view .LVU435
 1356 0096 8220     		movs	r0, #130
 308:src/display.c ****   set_dot(EXP_SIGN);
 1357              		.loc 1 308 27 view .LVU436
 1358 0098 1A70     		strb	r2, [r3]
 309:src/display.c **** }
 1359              		.loc 1 309 3 is_stmt 1 view .LVU437
 310:src/display.c **** 
 1360              		.loc 1 310 1 is_stmt 0 view .LVU438
 1361 009a 3546     		mov	r5, r6
 309:src/display.c **** }
 1362              		.loc 1 309 3 view .LVU439
 1363 009c FFF7FEFF 		bl	set_dot
 1364              	.LVL135:
 310:src/display.c **** 
 1365              		.loc 1 310 1 view .LVU440
 1366 00a0 EDE7     		b	.L129
 1367              	.LVL136:
 1368              	.L148:
 310:src/display.c **** 
 1369              		.loc 1 310 1 view .LVU441
 1370              	.LBE206:
ARM GAS  /tmp/cchyQ5Gz.s 			page 91


 1371              	.LBE205:
 493:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1372              		.loc 1 493 4 is_stmt 1 view .LVU442
 501:src/display.c **** #endif
 1373              		.loc 1 501 6 view .LVU443
 1374 00a2 01AE     		add	r6, sp, #4
 1375 00a4 0349     		ldr	r1, .L149+4
 1376 00a6 3046     		mov	r0, r6
 1377 00a8 FFF7FEFF 		bl	scopy
 1378              	.LVL137:
 503:src/display.c **** 	  }
 1379              		.loc 1 503 6 view .LVU444
 1380 00ac 0024     		movs	r4, #0
 1381              	.LVL138:
 503:src/display.c **** 	  }
 1382              		.loc 1 503 6 is_stmt 0 view .LVU445
 1383 00ae CFE7     		b	.L130
 1384              	.L150:
 1385              		.align	2
 1386              	.L149:
 1387 00b0 00000000 		.word	LastDisplayedExponent
 1388 00b4 00000000 		.word	.LC0
 1389              		.cfi_endproc
 1390              	.LFE14:
 1392              		.section	.text.set_separator.part.0,"ax",%progbits
 1393              		.align	1
 1394              		.p2align 2,,3
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu fpv4-sp-d16
 1400              	set_separator.part.0:
 1401              	.LVL139:
 1402              	.LFB48:
 365:src/display.c ****   if (sep == SEP_NONE)
 1403              		.loc 1 365 14 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 372:src/display.c ****     set_dot(posn+7);
 1407              		.loc 1 372 5 view .LVU447
 365:src/display.c ****   if (sep == SEP_NONE)
 1408              		.loc 1 365 14 is_stmt 0 view .LVU448
 1409 0000 70B5     		push	{r4, r5, r6, lr}
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 4, -16
 1412              		.cfi_offset 5, -12
 1413              		.cfi_offset 6, -8
 1414              		.cfi_offset 14, -4
 365:src/display.c ****   if (sep == SEP_NONE)
 1415              		.loc 1 365 14 view .LVU449
 1416 0002 0546     		mov	r5, r0
 1417 0004 0E46     		mov	r6, r1
 373:src/display.c ****     if (sep == SEP_COMMA)
 1418              		.loc 1 373 5 view .LVU450
 1419 0006 0238     		subs	r0, r0, #2
 1420              	.LVL140:
ARM GAS  /tmp/cchyQ5Gz.s 			page 92


 373:src/display.c ****     if (sep == SEP_COMMA)
 1421              		.loc 1 373 5 view .LVU451
 1422 0008 FFF7FEFF 		bl	set_dot
 1423              	.LVL141:
 374:src/display.c ****       set_dot(posn+8);
 1424              		.loc 1 374 8 view .LVU452
 1425 000c 012E     		cmp	r6, #1
 372:src/display.c ****     set_dot(posn+7);
 1426              		.loc 1 372 10 view .LVU453
 1427 000e A5F10904 		sub	r4, r5, #9
 1428              	.LVL142:
 373:src/display.c ****     if (sep == SEP_COMMA)
 1429              		.loc 1 373 5 is_stmt 1 view .LVU454
 374:src/display.c ****       set_dot(posn+8);
 1430              		.loc 1 374 5 view .LVU455
 374:src/display.c ****       set_dot(posn+8);
 1431              		.loc 1 374 8 is_stmt 0 view .LVU456
 1432 0012 0CD0     		beq	.L155
 377:src/display.c **** #endif
 1433              		.loc 1 377 39 view .LVU457
 1434 0014 2E21     		movs	r1, #46
 1435              	.L152:
 377:src/display.c **** #endif
 1436              		.loc 1 377 30 view .LVU458
 1437 0016 084B     		ldr	r3, .L156
 377:src/display.c **** #endif
 1438              		.loc 1 377 39 view .LVU459
 1439 0018 084A     		ldr	r2, .L156+4
 377:src/display.c **** #endif
 1440              		.loc 1 377 30 view .LVU460
 1441 001a 83FB0403 		smull	r0, r3, r3, r4
 1442 001e E417     		asrs	r4, r4, #31
 1443              	.LVL143:
 377:src/display.c **** #endif
 1444              		.loc 1 377 30 view .LVU461
 1445 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 377:src/display.c **** #endif
 1446              		.loc 1 377 35 view .LVU462
 1447 0024 0134     		adds	r4, r4, #1
 381:src/display.c **** 
 1448              		.loc 1 381 1 view .LVU463
 1449 0026 0020     		movs	r0, #0
 377:src/display.c **** #endif
 1450              		.loc 1 377 39 view .LVU464
 1451 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1452              	.LVL144:
 381:src/display.c **** 
 1453              		.loc 1 381 1 view .LVU465
 1454 002c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL145:
 1456              	.L155:
 375:src/display.c **** #ifndef REALBUILD
 1457              		.loc 1 375 7 is_stmt 1 view .LVU466
 1458 002e 681E     		subs	r0, r5, #1
 1459 0030 FFF7FEFF 		bl	set_dot
 1460              	.LVL146:
 377:src/display.c **** #endif
ARM GAS  /tmp/cchyQ5Gz.s 			page 93


 1461              		.loc 1 377 5 view .LVU467
 377:src/display.c **** #endif
 1462              		.loc 1 377 39 is_stmt 0 view .LVU468
 1463 0034 2C21     		movs	r1, #44
 1464 0036 EEE7     		b	.L152
 1465              	.L157:
 1466              		.align	2
 1467              	.L156:
 1468 0038 398EE338 		.word	954437177
 1469 003c 00000000 		.word	LastDisplayedNumber
 1470              		.cfi_endproc
 1471              	.LFE48:
 1473              		.section	.text.set_decimal,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_decimal:
 1482              	.LVL147:
 1483              	.LFB8:
 347:src/display.c ****   if (res) {
 1484              		.loc 1 347 87 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 8
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1488              		.loc 1 348 3 view .LVU470
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1489              		.loc 1 348 6 is_stmt 0 view .LVU471
 1490 0000 3AB1     		cbz	r2, .L159
 349:src/display.c ****   } else {
 1491              		.loc 1 349 5 is_stmt 1 view .LVU472
 349:src/display.c ****   } else {
 1492              		.loc 1 349 12 is_stmt 0 view .LVU473
 1493 0002 0029     		cmp	r1, #0
 349:src/display.c ****   } else {
 1494              		.loc 1 349 9 view .LVU474
 1495 0004 1046     		mov	r0, r2
 1496              	.LVL148:
 349:src/display.c ****   } else {
 1497              		.loc 1 349 12 view .LVU475
 1498 0006 0CBF     		ite	eq
 1499 0008 2E23     		moveq	r3, #46
 1500 000a 2C23     		movne	r3, #44
 1501 000c 00F8013B 		strb	r3, [r0], #1
 1502              	.LVL149:
 359:src/display.c **** 
 1503              		.loc 1 359 1 view .LVU476
 1504 0010 7047     		bx	lr
 1505              	.LVL150:
 1506              	.L159:
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 1507              		.loc 1 351 5 is_stmt 1 view .LVU477
 347:src/display.c ****   if (res) {
 1508              		.loc 1 347 87 is_stmt 0 view .LVU478
ARM GAS  /tmp/cchyQ5Gz.s 			page 94


 1509 0012 10B5     		push	{r4, lr}
 1510              		.cfi_def_cfa_offset 8
 1511              		.cfi_offset 4, -8
 1512              		.cfi_offset 14, -4
 1513 0014 82B0     		sub	sp, sp, #8
 1514              		.cfi_def_cfa_offset 16
 1515 0016 0446     		mov	r4, r0
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 1516              		.loc 1 351 5 view .LVU479
 1517 0018 0730     		adds	r0, r0, #7
 1518              	.LVL151:
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 1519              		.loc 1 351 5 view .LVU480
 1520 001a 0191     		str	r1, [sp, #4]
 1521 001c FFF7FEFF 		bl	set_dot
 1522              	.LVL152:
 352:src/display.c ****       set_dot(posn+8);
 1523              		.loc 1 352 5 is_stmt 1 view .LVU481
 352:src/display.c ****       set_dot(posn+8);
 1524              		.loc 1 352 8 is_stmt 0 view .LVU482
 1525 0020 0199     		ldr	r1, [sp, #4]
 1526 0022 69B9     		cbnz	r1, .L168
 1527              	.LBB209:
 1528              	.LBB210:
 355:src/display.c **** #endif
 1529              		.loc 1 355 38 view .LVU483
 1530 0024 2E22     		movs	r2, #46
 1531              	.L162:
 355:src/display.c **** #endif
 1532              		.loc 1 355 30 view .LVU484
 1533 0026 0948     		ldr	r0, .L169
 355:src/display.c **** #endif
 1534              		.loc 1 355 38 view .LVU485
 1535 0028 094B     		ldr	r3, .L169+4
 355:src/display.c **** #endif
 1536              		.loc 1 355 30 view .LVU486
 1537 002a 80FB0410 		smull	r1, r0, r0, r4
 1538 002e E417     		asrs	r4, r4, #31
 1539              	.LVL153:
 355:src/display.c **** #endif
 1540              		.loc 1 355 30 view .LVU487
 1541 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 355:src/display.c **** #endif
 1542              		.loc 1 355 35 view .LVU488
 1543 0034 0134     		adds	r4, r4, #1
 355:src/display.c **** #endif
 1544              		.loc 1 355 38 view .LVU489
 1545 0036 0020     		movs	r0, #0
 1546 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1547              	.LVL154:
 358:src/display.c **** }
 1548              		.loc 1 358 3 is_stmt 1 view .LVU490
 358:src/display.c **** }
 1549              		.loc 1 358 3 is_stmt 0 view .LVU491
 1550              	.LBE210:
 1551              	.LBE209:
 358:src/display.c **** }
ARM GAS  /tmp/cchyQ5Gz.s 			page 95


 1552              		.loc 1 358 3 is_stmt 1 view .LVU492
 359:src/display.c **** 
 1553              		.loc 1 359 1 is_stmt 0 view .LVU493
 1554 003c 02B0     		add	sp, sp, #8
 1555              		.cfi_remember_state
 1556              		.cfi_def_cfa_offset 8
 1557              		@ sp needed
 1558 003e 10BD     		pop	{r4, pc}
 1559              	.LVL155:
 1560              	.L168:
 1561              		.cfi_restore_state
 353:src/display.c **** #ifndef REALBUILD
 1562              		.loc 1 353 7 is_stmt 1 view .LVU494
 1563 0040 04F10800 		add	r0, r4, #8
 1564 0044 FFF7FEFF 		bl	set_dot
 1565              	.LVL156:
 1566              	.LBB212:
 1567              	.LBI209:
 347:src/display.c ****   if (res) {
 1568              		.loc 1 347 14 view .LVU495
 1569              	.LBB211:
 355:src/display.c **** #endif
 1570              		.loc 1 355 5 view .LVU496
 355:src/display.c **** #endif
 1571              		.loc 1 355 38 is_stmt 0 view .LVU497
 1572 0048 2C22     		movs	r2, #44
 1573 004a ECE7     		b	.L162
 1574              	.L170:
 1575              		.align	2
 1576              	.L169:
 1577 004c 398EE338 		.word	954437177
 1578 0050 00000000 		.word	LastDisplayedNumber
 1579              	.LBE211:
 1580              	.LBE212:
 1581              		.cfi_endproc
 1582              	.LFE8:
 1584              		.section	.text.set_digits_string,"ax",%progbits
 1585              		.align	1
 1586              		.p2align 2,,3
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	set_digits_string:
 1593              	.LVL157:
 1594              	.LFB12:
 412:src/display.c ****   for (; *msg != '\0'; msg++) {
 1595              		.loc 1 412 55 is_stmt 1 view -0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1599              		.loc 1 413 3 view .LVU499
 412:src/display.c ****   for (; *msg != '\0'; msg++) {
 1600              		.loc 1 412 55 is_stmt 0 view .LVU500
 1601 0000 38B5     		push	{r3, r4, r5, lr}
 1602              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cchyQ5Gz.s 			page 96


 1603              		.cfi_offset 3, -16
 1604              		.cfi_offset 4, -12
 1605              		.cfi_offset 5, -8
 1606              		.cfi_offset 14, -4
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1607              		.loc 1 413 10 view .LVU501
 1608 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1609              		.loc 1 413 10 is_stmt 1 view .LVU502
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1610              		.loc 1 413 3 is_stmt 0 view .LVU503
 1611 0004 E3B1     		cbz	r3, .L171
 1612 0006 0546     		mov	r5, r0
 1613 0008 0C46     		mov	r4, r1
 1614 000a 06E0     		b	.L175
 1615              	.LVL158:
 1616              	.L173:
 1617              	.LBB213:
 1618              	.LBB214:
 407:src/display.c ****   return res;
 1619              		.loc 1 407 8 view .LVU504
 1620 000c 2046     		mov	r0, r4
 1621 000e FFF7FEFF 		bl	set_dig
 1622              	.LVL159:
 408:src/display.c **** }
 1623              		.loc 1 408 3 is_stmt 1 view .LVU505
 408:src/display.c **** }
 1624              		.loc 1 408 3 is_stmt 0 view .LVU506
 1625              	.LBE214:
 1626              	.LBE213:
 418:src/display.c ****     }
 1627              		.loc 1 418 7 is_stmt 1 view .LVU507
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1628              		.loc 1 413 10 is_stmt 0 view .LVU508
 1629 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1630              	.LVL160:
 418:src/display.c ****     }
 1631              		.loc 1 418 9 view .LVU509
 1632 0016 0934     		adds	r4, r4, #9
 1633              	.LVL161:
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1634              		.loc 1 413 24 is_stmt 1 view .LVU510
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1635              		.loc 1 413 10 view .LVU511
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1636              		.loc 1 413 3 is_stmt 0 view .LVU512
 1637 0018 93B1     		cbz	r3, .L171
 1638              	.LVL162:
 1639              	.L175:
 414:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1640              		.loc 1 414 5 is_stmt 1 view .LVU513
 415:src/display.c ****     else {
 1641              		.loc 1 415 7 view .LVU514
 417:src/display.c ****       j += SEGS_PER_DIGIT;
 1642              		.loc 1 417 7 view .LVU515
 1643              	.LBB217:
 1644              	.LBI213:
ARM GAS  /tmp/cchyQ5Gz.s 			page 97


 405:src/display.c ****   if (res) *res++ = ch;
 1645              		.loc 1 405 14 view .LVU516
 1646              	.LBB215:
 406:src/display.c ****   else	set_dig(base, ch);
 1647              		.loc 1 406 3 view .LVU517
 407:src/display.c ****   return res;
 1648              		.loc 1 407 8 view .LVU518
 1649              	.LBE215:
 1650              	.LBE217:
 414:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1651              		.loc 1 414 21 is_stmt 0 view .LVU519
 1652 001a 03F0FD02 		and	r2, r3, #253
 1653 001e 2C2A     		cmp	r2, #44
 415:src/display.c ****     else {
 1654              		.loc 1 415 7 view .LVU520
 1655 0020 A4F10900 		sub	r0, r4, #9
 1656 0024 4FF00002 		mov	r2, #0
 1657              	.LBB218:
 1658              	.LBB216:
 407:src/display.c ****   return res;
 1659              		.loc 1 407 8 view .LVU521
 1660 0028 1946     		mov	r1, r3
 1661              	.LBE216:
 1662              	.LBE218:
 414:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1663              		.loc 1 414 21 view .LVU522
 1664 002a EFD1     		bne	.L173
 415:src/display.c ****     else {
 1665              		.loc 1 415 7 view .LVU523
 1666 002c B3F12E01 		subs	r1, r3, #46
 1667 0030 18BF     		it	ne
 1668 0032 0121     		movne	r1, #1
 1669 0034 FFF7FEFF 		bl	set_decimal
 1670              	.LVL163:
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1671              		.loc 1 413 24 is_stmt 1 view .LVU524
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1672              		.loc 1 413 10 view .LVU525
 1673 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1674              	.LVL164:
 413:src/display.c ****     if (*msg == '.' || *msg == ',')
 1675              		.loc 1 413 3 is_stmt 0 view .LVU526
 1676 003c 002B     		cmp	r3, #0
 1677 003e ECD1     		bne	.L175
 1678              	.LVL165:
 1679              	.L171:
 421:src/display.c **** 
 1680              		.loc 1 421 1 view .LVU527
 1681 0040 38BD     		pop	{r3, r4, r5, pc}
 1682              		.cfi_endproc
 1683              	.LFE12:
 1685 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1686              		.align	2
 1687              	.LC1:
 1688 0000 4E614E00 		.ascii	"NaN\000"
 1689              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1690              		.align	1
ARM GAS  /tmp/cchyQ5Gz.s 			page 98


 1691              		.p2align 2,,3
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	check_special_dn.isra.0:
 1698              	.LVL166:
 1699              	.LFB50:
1540:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1540 18 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1541:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1704              		.loc 1 1541 2 view .LVU529
1540:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1705              		.loc 1 1540 18 is_stmt 0 view .LVU530
 1706 0000 38B5     		push	{r3, r4, r5, lr}
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
1541:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1712              		.loc 1 1541 6 view .LVU531
 1713 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1540:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1714              		.loc 1 1540 18 view .LVU532
 1715 0004 0546     		mov	r5, r0
1541:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1716              		.loc 1 1541 5 view .LVU533
 1717 0006 13F07000 		ands	r0, r3, #112
 1718 000a 09D0     		beq	.L181
1542:src/display.c **** 	    if (res) {
 1719              		.loc 1 1542 4 is_stmt 1 view .LVU534
1542:src/display.c **** 	    if (res) {
 1720              		.loc 1 1542 7 is_stmt 0 view .LVU535
 1721 000c 13F0300F 		tst	r3, #48
 1722 0010 0C46     		mov	r4, r1
 1723 0012 06D0     		beq	.L183
 1724              	.LVL167:
 1725              	.LBB221:
 1726              	.LBI221:
1540:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1727              		.loc 1 1540 18 is_stmt 1 view .LVU536
 1728              	.LBB222:
1543:src/display.c **** 	      scopy(res, "NaN");
 1729              		.loc 1 1543 6 view .LVU537
1543:src/display.c **** 	      scopy(res, "NaN");
 1730              		.loc 1 1543 9 is_stmt 0 view .LVU538
 1731 0014 89B1     		cbz	r1, .L184
1544:src/display.c **** 	    } else {
 1732              		.loc 1 1544 8 is_stmt 1 view .LVU539
 1733 0016 0846     		mov	r0, r1
 1734 0018 1849     		ldr	r1, .L197
 1735              	.LVL168:
1544:src/display.c **** 	    } else {
ARM GAS  /tmp/cchyQ5Gz.s 			page 99


 1736              		.loc 1 1544 8 is_stmt 0 view .LVU540
 1737 001a FFF7FEFF 		bl	scopy
 1738              	.LVL169:
1544:src/display.c **** 	    } else {
 1739              		.loc 1 1544 8 view .LVU541
 1740 001e 0120     		movs	r0, #1
 1741              	.LVL170:
 1742              	.L181:
1544:src/display.c **** 	    } else {
 1743              		.loc 1 1544 8 view .LVU542
 1744              	.LBE222:
 1745              	.LBE221:
1576:src/display.c **** 
 1746              		.loc 1 1576 7 view .LVU543
 1747 0020 38BD     		pop	{r3, r4, r5, pc}
 1748              	.LVL171:
 1749              	.L183:
1554:src/display.c **** 	      if (res) *res++ = '-';
 1750              		.loc 1 1554 6 is_stmt 1 view .LVU544
1554:src/display.c **** 	      if (res) *res++ = '-';
 1751              		.loc 1 1554 9 is_stmt 0 view .LVU545
 1752 0022 1B06     		lsls	r3, r3, #24
 1753 0024 04D4     		bmi	.L196
1558:src/display.c **** 	      *res++ = '\237';
 1754              		.loc 1 1558 6 is_stmt 1 view .LVU546
1558:src/display.c **** 	      *res++ = '\237';
 1755              		.loc 1 1558 9 is_stmt 0 view .LVU547
 1756 0026 B9B1     		cbz	r1, .L188
 1757              	.LVL172:
 1758              	.L187:
1559:src/display.c **** 	    else {
 1759              		.loc 1 1559 8 is_stmt 1 view .LVU548
1559:src/display.c **** 	    else {
 1760              		.loc 1 1559 15 is_stmt 0 view .LVU549
 1761 0028 9F23     		movs	r3, #159
 1762 002a 2370     		strb	r3, [r4]
1572:src/display.c **** 	  }
 1763              		.loc 1 1572 13 view .LVU550
 1764 002c 0120     		movs	r0, #1
1576:src/display.c **** 
 1765              		.loc 1 1576 7 view .LVU551
 1766 002e 38BD     		pop	{r3, r4, r5, pc}
 1767              	.LVL173:
 1768              	.L196:
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1769              		.loc 1 1555 8 is_stmt 1 view .LVU552
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1770              		.loc 1 1555 11 is_stmt 0 view .LVU553
 1771 0030 71B1     		cbz	r1, .L186
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1772              		.loc 1 1555 17 is_stmt 1 view .LVU554
 1773              	.LVL174:
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1774              		.loc 1 1555 24 is_stmt 0 view .LVU555
 1775 0032 2D23     		movs	r3, #45
 1776 0034 04F8013B 		strb	r3, [r4], #1
 1777              	.LVL175:
ARM GAS  /tmp/cchyQ5Gz.s 			page 100


1558:src/display.c **** 	      *res++ = '\237';
 1778              		.loc 1 1558 6 is_stmt 1 view .LVU556
 1779 0038 F6E7     		b	.L187
 1780              	.LVL176:
 1781              	.L184:
 1782              	.LBB224:
 1783              	.LBB223:
1546:src/display.c **** #ifndef REALBUILD
 1784              		.loc 1 1546 8 view .LVU557
 1785 003a 1148     		ldr	r0, .L197+4
 1786 003c FFF7FEFF 		bl	set_digits_string
 1787              	.LVL177:
1548:src/display.c **** 	      forceDispPlot=0;
 1788              		.loc 1 1548 8 view .LVU558
 1789 0040 1049     		ldr	r1, .L197+8
 1790 0042 1148     		ldr	r0, .L197+12
 1791 0044 FFF7FEFF 		bl	scopy
 1792              	.LVL178:
1549:src/display.c **** #endif
 1793              		.loc 1 1549 8 view .LVU559
1549:src/display.c **** #endif
 1794              		.loc 1 1549 21 is_stmt 0 view .LVU560
 1795 0048 104B     		ldr	r3, .L197+16
 1796 004a 1C70     		strb	r4, [r3]
 1797 004c 0120     		movs	r0, #1
 1798              	.LBE223:
 1799              	.LBE224:
1576:src/display.c **** 
 1800              		.loc 1 1576 7 view .LVU561
 1801 004e 38BD     		pop	{r3, r4, r5, pc}
 1802              	.LVL179:
 1803              	.L186:
1556:src/display.c **** 	    }
 1804              		.loc 1 1556 13 is_stmt 1 view .LVU562
 1805 0050 2D21     		movs	r1, #45
 1806              	.LVL180:
1556:src/display.c **** 	    }
 1807              		.loc 1 1556 13 is_stmt 0 view .LVU563
 1808 0052 0920     		movs	r0, #9
 1809 0054 FFF7FEFF 		bl	set_dig
 1810              	.LVL181:
1558:src/display.c **** 	      *res++ = '\237';
 1811              		.loc 1 1558 6 is_stmt 1 view .LVU564
 1812              	.L188:
1561:src/display.c **** #ifndef REALBUILD
 1813              		.loc 1 1561 8 view .LVU565
 1814 0058 1221     		movs	r1, #18
 1815 005a 0D48     		ldr	r0, .L197+20
 1816 005c FFF7FEFF 		bl	set_digits_string
 1817              	.LVL182:
1563:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1818              		.loc 1 1563 8 view .LVU566
1563:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1819              		.loc 1 1563 11 is_stmt 0 view .LVU567
 1820 0060 95F90030 		ldrsb	r3, [r5]
1567:src/display.c **** 	      }
 1821              		.loc 1 1567 3 view .LVU568
ARM GAS  /tmp/cchyQ5Gz.s 			page 101


 1822 0064 0848     		ldr	r0, .L197+12
1563:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1823              		.loc 1 1563 11 view .LVU569
 1824 0066 002B     		cmp	r3, #0
1564:src/display.c **** 	      }
 1825              		.loc 1 1564 3 is_stmt 1 view .LVU570
 1826 0068 B4BF     		ite	lt
 1827 006a 0A49     		ldrlt	r1, .L197+24
1567:src/display.c **** 	      }
 1828              		.loc 1 1567 3 view .LVU571
 1829 006c 0A49     		ldrge	r1, .L197+28
 1830 006e FFF7FEFF 		bl	scopy
 1831              	.LVL183:
1569:src/display.c **** #endif
 1832              		.loc 1 1569 8 view .LVU572
1569:src/display.c **** #endif
 1833              		.loc 1 1569 21 is_stmt 0 view .LVU573
 1834 0072 064B     		ldr	r3, .L197+16
 1835 0074 0022     		movs	r2, #0
 1836 0076 1A70     		strb	r2, [r3]
1572:src/display.c **** 	  }
 1837              		.loc 1 1572 13 view .LVU574
 1838 0078 0120     		movs	r0, #1
1576:src/display.c **** 
 1839              		.loc 1 1576 7 view .LVU575
 1840 007a 38BD     		pop	{r3, r4, r5, pc}
 1841              	.L198:
 1842              		.align	2
 1843              	.L197:
 1844 007c 00000000 		.word	.LC1
 1845 0080 00000000 		.word	.LANCHOR3
 1846 0084 00000000 		.word	.LANCHOR4
 1847 0088 00000000 		.word	LastDisplayedNumber
 1848 008c 00000000 		.word	forceDispPlot
 1849 0090 00000000 		.word	.LANCHOR5
 1850 0094 00000000 		.word	.LANCHOR6
 1851 0098 00000000 		.word	.LANCHOR7
 1852              		.cfi_endproc
 1853              	.LFE50:
 1855              		.section	.text.set_x_hms,"ax",%progbits
 1856              		.align	1
 1857              		.p2align 2,,3
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	set_x_hms:
 1864              	.LVL184:
 1865              	.LFB22:
1621:src/display.c **** 	decNumber x, y, a, t, u;
 1866              		.loc 1 1621 62 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 200
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
1622:src/display.c **** 	int j=0;
 1870              		.loc 1 1622 2 view .LVU577
1623:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/cchyQ5Gz.s 			page 102


 1871              		.loc 1 1623 2 view .LVU578
1621:src/display.c **** 	decNumber x, y, a, t, u;
 1872              		.loc 1 1621 62 is_stmt 0 view .LVU579
 1873 0000 30B5     		push	{r4, r5, lr}
 1874              		.cfi_def_cfa_offset 12
 1875              		.cfi_offset 4, -12
 1876              		.cfi_offset 5, -8
 1877              		.cfi_offset 14, -4
 1878 0002 B5B0     		sub	sp, sp, #212
 1879              		.cfi_def_cfa_offset 224
1621:src/display.c **** 	decNumber x, y, a, t, u;
 1880              		.loc 1 1621 62 view .LVU580
 1881 0004 0446     		mov	r4, r0
1623:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1882              		.loc 1 1623 6 view .LVU581
 1883 0006 0023     		movs	r3, #0
1627:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1884              		.loc 1 1627 6 view .LVU582
 1885 0008 0830     		adds	r0, r0, #8
 1886              	.LVL185:
1621:src/display.c **** 	decNumber x, y, a, t, u;
 1887              		.loc 1 1621 62 view .LVU583
 1888 000a 0D46     		mov	r5, r1
1623:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1889              		.loc 1 1623 6 view .LVU584
 1890 000c 0393     		str	r3, [sp, #12]
1624:src/display.c **** 	unsigned int hr, min, sec, fs;
 1891              		.loc 1 1624 2 is_stmt 1 view .LVU585
 1892              	.LVL186:
1625:src/display.c **** 
 1893              		.loc 1 1625 2 view .LVU586
1627:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1894              		.loc 1 1627 2 view .LVU587
1627:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1895              		.loc 1 1627 6 is_stmt 0 view .LVU588
 1896 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1897              	.LVL187:
1627:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1898              		.loc 1 1627 5 view .LVU589
 1899 0012 48B1     		cbz	r0, .L200
1628:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1900              		.loc 1 1628 4 is_stmt 1 view .LVU590
1628:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1901              		.loc 1 1628 7 is_stmt 0 view .LVU591
 1902 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1903 0016 5B06     		lsls	r3, r3, #25
 1904 0018 04D5     		bpl	.L199
1629:src/display.c **** 	  return;
 1905              		.loc 1 1629 6 is_stmt 1 view .LVU592
 1906              	.LVL188:
 1907              	.LBB225:
 1908              	.LBI225:
 405:src/display.c ****   if (res) *res++ = ch;
 1909              		.loc 1 405 14 view .LVU593
 1910              	.LBB226:
 406:src/display.c ****   else	set_dig(base, ch);
 1911              		.loc 1 406 3 view .LVU594
ARM GAS  /tmp/cchyQ5Gz.s 			page 103


 406:src/display.c ****   else	set_dig(base, ch);
 1912              		.loc 1 406 6 is_stmt 0 view .LVU595
 1913 001a 002D     		cmp	r5, #0
 1914 001c 00F0B580 		beq	.L203
 406:src/display.c ****   else	set_dig(base, ch);
 1915              		.loc 1 406 12 is_stmt 1 view .LVU596
 1916              	.LVL189:
 406:src/display.c ****   else	set_dig(base, ch);
 1917              		.loc 1 406 19 is_stmt 0 view .LVU597
 1918 0020 6F23     		movs	r3, #111
 1919 0022 2B70     		strb	r3, [r5]
 1920              	.LVL190:
 1921              	.L199:
 406:src/display.c ****   else	set_dig(base, ch);
 1922              		.loc 1 406 19 view .LVU598
 1923              	.LBE226:
 1924              	.LBE225:
1684:src/display.c **** 
 1925              		.loc 1 1684 7 view .LVU599
 1926 0024 35B0     		add	sp, sp, #212
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 12
 1929              		@ sp needed
 1930 0026 30BD     		pop	{r4, r5, pc}
 1931              	.LVL191:
 1932              	.L200:
 1933              		.cfi_restore_state
1633:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1934              		.loc 1 1633 2 is_stmt 1 view .LVU600
 1935 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1936              	.LVL192:
1634:src/display.c **** 	dn_abs(&a, rgx);
 1937              		.loc 1 1634 2 view .LVU601
 1938 002c 624A     		ldr	r2, .L230
 1939 002e 2146     		mov	r1, r4
 1940 0030 07A8     		add	r0, sp, #28
 1941 0032 FFF7FEFF 		bl	decNumberMod
 1942              	.LVL193:
1635:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1943              		.loc 1 1635 2 view .LVU602
 1944 0036 2146     		mov	r1, r4
 1945 0038 19A8     		add	r0, sp, #100
 1946 003a FFF7FEFF 		bl	dn_abs
 1947              	.LVL194:
1636:src/display.c **** 	  if (res != NULL)
 1948              		.loc 1 1636 2 view .LVU603
1636:src/display.c **** 	  if (res != NULL)
 1949              		.loc 1 1636 5 is_stmt 0 view .LVU604
 1950 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1951 0042 002B     		cmp	r3, #0
 1952 0044 72DB     		blt	.L228
 1953              	.L204:
1644:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1954              		.loc 1 1644 2 is_stmt 1 view .LVU605
 1955 0046 07A9     		add	r1, sp, #28
 1956 0048 10A8     		add	r0, sp, #64
 1957 004a FFF7FEFF 		bl	decNumberHR2HMS
ARM GAS  /tmp/cchyQ5Gz.s 			page 104


 1958              	.LVL195:
1645:src/display.c **** 	decNumberRound(&u, &t);
 1959              		.loc 1 1645 2 view .LVU606
 1960 004e 0622     		movs	r2, #6
 1961 0050 10A9     		add	r1, sp, #64
 1962 0052 22A8     		add	r0, sp, #136
 1963 0054 FFF7FEFF 		bl	dn_mulpow10
 1964              	.LVL196:
1646:src/display.c **** 
 1965              		.loc 1 1646 2 view .LVU607
 1966 0058 22A9     		add	r1, sp, #136
 1967 005a 2BA8     		add	r0, sp, #172
 1968 005c FFF7FEFF 		bl	decNumberRound
 1969              	.LVL197:
1648:src/display.c **** 	hms_step(&u, &t, &sec);
 1970              		.loc 1 1648 2 view .LVU608
 1971 0060 2BA9     		add	r1, sp, #172
 1972 0062 22A8     		add	r0, sp, #136
 1973 0064 06AA     		add	r2, sp, #24
 1974 0066 FFF7FEFF 		bl	hms_step
 1975              	.LVL198:
1649:src/display.c **** 	hms_step(&t, &u, &min);
 1976              		.loc 1 1649 2 view .LVU609
 1977 006a 22A9     		add	r1, sp, #136
 1978 006c 2BA8     		add	r0, sp, #172
 1979 006e 05AA     		add	r2, sp, #20
 1980 0070 FFF7FEFF 		bl	hms_step
 1981              	.LVL199:
1650:src/display.c **** 	hr = dn_to_int(&t);
 1982              		.loc 1 1650 2 view .LVU610
 1983 0074 04AA     		add	r2, sp, #16
 1984 0076 2BA9     		add	r1, sp, #172
 1985 0078 22A8     		add	r0, sp, #136
 1986 007a FFF7FEFF 		bl	hms_step
 1987              	.LVL200:
1651:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1988              		.loc 1 1651 2 view .LVU611
1651:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1989              		.loc 1 1651 7 is_stmt 0 view .LVU612
 1990 007e 22A8     		add	r0, sp, #136
 1991 0080 FFF7FEFF 		bl	dn_to_int
 1992              	.LVL201:
1652:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1993              		.loc 1 1652 33 view .LVU613
 1994 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1652:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1995              		.loc 1 1652 5 view .LVU614
 1996 0088 3B2A     		cmp	r2, #59
1652:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1997              		.loc 1 1652 19 is_stmt 1 view .LVU615
1652:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1998              		.loc 1 1652 23 is_stmt 0 view .LVU616
 1999 008a 82BF     		ittt	hi
 2000 008c 3C3A     		subhi	r2, r2, #60
1652:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2001              		.loc 1 1652 33 view .LVU617
 2002 008e 0133     		addhi	r3, r3, #1
ARM GAS  /tmp/cchyQ5Gz.s 			page 105


 2003 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1653:src/display.c **** 
 2004              		.loc 1 1653 2 is_stmt 1 view .LVU618
1653:src/display.c **** 
 2005              		.loc 1 1653 5 is_stmt 0 view .LVU619
 2006 0094 3B2B     		cmp	r3, #59
 2007 0096 02D9     		bls	.L209
1653:src/display.c **** 
 2008              		.loc 1 1653 19 is_stmt 1 discriminator 1 view .LVU620
1653:src/display.c **** 
 2009              		.loc 1 1653 23 is_stmt 0 discriminator 1 view .LVU621
 2010 0098 3C3B     		subs	r3, r3, #60
 2011 009a 0493     		str	r3, [sp, #16]
1653:src/display.c **** 
 2012              		.loc 1 1653 30 is_stmt 1 discriminator 1 view .LVU622
1653:src/display.c **** 
 2013              		.loc 1 1653 32 is_stmt 0 discriminator 1 view .LVU623
 2014 009c 0130     		adds	r0, r0, #1
 2015              	.LVL202:
 2016              	.L209:
1656:src/display.c **** 	res = set_dig_s(j, '@', res);
 2017              		.loc 1 1656 2 is_stmt 1 view .LVU624
1656:src/display.c **** 	res = set_dig_s(j, '@', res);
 2018              		.loc 1 1656 8 is_stmt 0 view .LVU625
 2019 009e 0123     		movs	r3, #1
 2020 00a0 0093     		str	r3, [sp]
 2021 00a2 2946     		mov	r1, r5
 2022 00a4 03AA     		add	r2, sp, #12
 2023 00a6 0423     		movs	r3, #4
 2024 00a8 FFF7FEFF 		bl	hms_render
 2025              	.LVL203:
1657:src/display.c **** 	j += SEGS_PER_DIGIT;
 2026              		.loc 1 1657 2 is_stmt 1 view .LVU626
 2027              	.LBB228:
 2028              	.LBI228:
 405:src/display.c ****   if (res) *res++ = ch;
 2029              		.loc 1 405 14 view .LVU627
 2030              	.LBB229:
 406:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 406 3 view .LVU628
 406:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 406 6 is_stmt 0 view .LVU629
 2033 00ac 0446     		mov	r4, r0
 2034              	.LVL204:
 406:src/display.c ****   else	set_dig(base, ch);
 2035              		.loc 1 406 6 view .LVU630
 2036 00ae 0028     		cmp	r0, #0
 2037 00b0 76D0     		beq	.L210
 406:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 406 12 is_stmt 1 view .LVU631
 406:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 406 16 is_stmt 0 view .LVU632
 2040 00b2 0146     		mov	r1, r0
 2041              	.LVL205:
 406:src/display.c ****   else	set_dig(base, ch);
 2042              		.loc 1 406 19 view .LVU633
 2043 00b4 4023     		movs	r3, #64
ARM GAS  /tmp/cchyQ5Gz.s 			page 106


 2044 00b6 01F8013B 		strb	r3, [r1], #1
 2045              	.LVL206:
 2046              	.L211:
 408:src/display.c **** }
 2047              		.loc 1 408 3 is_stmt 1 view .LVU634
 408:src/display.c **** }
 2048              		.loc 1 408 3 is_stmt 0 view .LVU635
 2049              	.LBE229:
 2050              	.LBE228:
1658:src/display.c **** 
 2051              		.loc 1 1658 2 is_stmt 1 view .LVU636
1661:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2052              		.loc 1 1661 8 is_stmt 0 view .LVU637
 2053 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2054 00be 0122     		movs	r2, #1
1658:src/display.c **** 
 2055              		.loc 1 1658 4 view .LVU638
 2056 00c0 03F10904 		add	r4, r3, #9
1661:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2057              		.loc 1 1661 8 view .LVU639
 2058 00c4 0092     		str	r2, [sp]
 2059 00c6 0223     		movs	r3, #2
 2060 00c8 03AA     		add	r2, sp, #12
1658:src/display.c **** 
 2061              		.loc 1 1658 4 view .LVU640
 2062 00ca 0394     		str	r4, [sp, #12]
1661:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2063              		.loc 1 1661 2 is_stmt 1 view .LVU641
1661:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2064              		.loc 1 1661 8 is_stmt 0 view .LVU642
 2065 00cc FFF7FEFF 		bl	hms_render
 2066              	.LVL207:
1662:src/display.c **** 	j += SEGS_PER_DIGIT;
 2067              		.loc 1 1662 2 is_stmt 1 view .LVU643
 2068              	.LBB231:
 2069              	.LBI231:
 405:src/display.c ****   if (res) *res++ = ch;
 2070              		.loc 1 405 14 view .LVU644
 2071              	.LBB232:
 406:src/display.c ****   else	set_dig(base, ch);
 2072              		.loc 1 406 3 view .LVU645
 406:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 406 6 is_stmt 0 view .LVU646
 2074 00d0 0446     		mov	r4, r0
 2075 00d2 0028     		cmp	r0, #0
 2076 00d4 5ED0     		beq	.L212
 406:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 406 12 is_stmt 1 view .LVU647
 406:src/display.c ****   else	set_dig(base, ch);
 2078              		.loc 1 406 16 is_stmt 0 view .LVU648
 2079 00d6 0146     		mov	r1, r0
 2080              	.LVL208:
 406:src/display.c ****   else	set_dig(base, ch);
 2081              		.loc 1 406 19 view .LVU649
 2082 00d8 2723     		movs	r3, #39
 2083 00da 01F8013B 		strb	r3, [r1], #1
 2084              	.LVL209:
ARM GAS  /tmp/cchyQ5Gz.s 			page 107


 2085              	.L213:
 408:src/display.c **** }
 2086              		.loc 1 408 3 is_stmt 1 view .LVU650
 408:src/display.c **** }
 2087              		.loc 1 408 3 is_stmt 0 view .LVU651
 2088              	.LBE232:
 2089              	.LBE231:
1663:src/display.c **** 
 2090              		.loc 1 1663 2 is_stmt 1 view .LVU652
1663:src/display.c **** 
 2091              		.loc 1 1663 4 is_stmt 0 view .LVU653
 2092 00de 039B     		ldr	r3, [sp, #12]
1666:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2093              		.loc 1 1666 8 view .LVU654
 2094 00e0 0598     		ldr	r0, [sp, #20]
 2095 00e2 0122     		movs	r2, #1
1663:src/display.c **** 
 2096              		.loc 1 1663 4 view .LVU655
 2097 00e4 03F10904 		add	r4, r3, #9
1666:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2098              		.loc 1 1666 8 view .LVU656
 2099 00e8 0092     		str	r2, [sp]
 2100 00ea 0223     		movs	r3, #2
 2101 00ec 03AA     		add	r2, sp, #12
1663:src/display.c **** 
 2102              		.loc 1 1663 4 view .LVU657
 2103 00ee 0394     		str	r4, [sp, #12]
1666:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2104              		.loc 1 1666 2 is_stmt 1 view .LVU658
1666:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2105              		.loc 1 1666 8 is_stmt 0 view .LVU659
 2106 00f0 FFF7FEFF 		bl	hms_render
 2107              	.LVL210:
1667:src/display.c **** 
 2108              		.loc 1 1667 8 view .LVU660
 2109 00f4 3149     		ldr	r1, .L230+4
1666:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2110              		.loc 1 1666 8 view .LVU661
 2111 00f6 0246     		mov	r2, r0
 2112              	.LVL211:
1667:src/display.c **** 
 2113              		.loc 1 1667 2 is_stmt 1 view .LVU662
1667:src/display.c **** 
 2114              		.loc 1 1667 8 is_stmt 0 view .LVU663
 2115 00f8 0398     		ldr	r0, [sp, #12]
 2116              	.LVL212:
1667:src/display.c **** 
 2117              		.loc 1 1667 8 view .LVU664
 2118 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2119 00fc 0938     		subs	r0, r0, #9
 2120 00fe FFF7FEFF 		bl	set_decimal
 2121              	.LVL213:
1670:src/display.c **** 
 2122              		.loc 1 1670 8 view .LVU665
 2123 0102 0023     		movs	r3, #0
1667:src/display.c **** 
 2124              		.loc 1 1667 8 view .LVU666
ARM GAS  /tmp/cchyQ5Gz.s 			page 108


 2125 0104 0146     		mov	r1, r0
 2126              	.LVL214:
1670:src/display.c **** 
 2127              		.loc 1 1670 2 is_stmt 1 view .LVU667
1670:src/display.c **** 
 2128              		.loc 1 1670 8 is_stmt 0 view .LVU668
 2129 0106 0093     		str	r3, [sp]
 2130 0108 0698     		ldr	r0, [sp, #24]
 2131              	.LVL215:
1670:src/display.c **** 
 2132              		.loc 1 1670 8 view .LVU669
 2133 010a 03AA     		add	r2, sp, #12
 2134 010c 0223     		movs	r3, #2
 2135 010e FFF7FEFF 		bl	hms_render
 2136              	.LVL216:
1673:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2137              		.loc 1 1673 2 is_stmt 1 view .LVU670
 2138              	.LBB234:
 2139              	.LBI234:
 405:src/display.c ****   if (res) *res++ = ch;
 2140              		.loc 1 405 14 view .LVU671
 2141              	.LBB235:
 406:src/display.c ****   else	set_dig(base, ch);
 2142              		.loc 1 406 3 view .LVU672
 406:src/display.c ****   else	set_dig(base, ch);
 2143              		.loc 1 406 6 is_stmt 0 view .LVU673
 2144 0112 0446     		mov	r4, r0
 2145 0114 78B3     		cbz	r0, .L214
 406:src/display.c ****   else	set_dig(base, ch);
 2146              		.loc 1 406 12 is_stmt 1 view .LVU674
 2147              	.LVL217:
 406:src/display.c ****   else	set_dig(base, ch);
 2148              		.loc 1 406 19 is_stmt 0 view .LVU675
 2149 0116 2223     		movs	r3, #34
 2150 0118 0370     		strb	r3, [r0]
 2151              	.LVL218:
 408:src/display.c **** }
 2152              		.loc 1 408 3 is_stmt 1 view .LVU676
 408:src/display.c **** }
 2153              		.loc 1 408 3 is_stmt 0 view .LVU677
 2154              	.LBE235:
 2155              	.LBE234:
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2156              		.loc 1 1677 2 is_stmt 1 view .LVU678
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2157              		.loc 1 1677 6 is_stmt 0 view .LVU679
 2158 011a 2749     		ldr	r1, .L230
 2159 011c 19A8     		add	r0, sp, #100
 2160              	.LVL219:
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2161              		.loc 1 1677 6 view .LVU680
 2162 011e FFF7FEFF 		bl	dn_lt
 2163              	.LVL220:
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2164              		.loc 1 1677 5 view .LVU681
 2165 0122 78B9     		cbnz	r0, .L229
1678:src/display.c **** 	} else if (! dn_eq0(&a)) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 109


 2166              		.loc 1 1678 4 is_stmt 1 view .LVU682
 2167              	.LVL221:
 2168              	.LBB238:
 2169              	.LBI238:
 405:src/display.c ****   if (res) *res++ = ch;
 2170              		.loc 1 405 14 view .LVU683
 2171              	.LBB239:
 406:src/display.c ****   else	set_dig(base, ch);
 2172              		.loc 1 406 3 view .LVU684
 406:src/display.c ****   else	set_dig(base, ch);
 2173              		.loc 1 406 12 view .LVU685
 406:src/display.c ****   else	set_dig(base, ch);
 2174              		.loc 1 406 19 is_stmt 0 view .LVU686
 2175 0124 6F23     		movs	r3, #111
 2176 0126 6370     		strb	r3, [r4, #1]
 2177              	.LBE239:
 2178              	.LBE238:
1684:src/display.c **** 
 2179              		.loc 1 1684 7 view .LVU687
 2180 0128 35B0     		add	sp, sp, #212
 2181              		.cfi_remember_state
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed
 2184 012a 30BD     		pop	{r4, r5, pc}
 2185              	.LVL222:
 2186              	.L228:
 2187              		.cfi_restore_state
1637:src/display.c **** 	    *res++ += '-';
 2188              		.loc 1 1637 4 is_stmt 1 view .LVU688
1637:src/display.c **** 	    *res++ += '-';
 2189              		.loc 1 1637 7 is_stmt 0 view .LVU689
 2190 012c E5B1     		cbz	r5, .L205
1638:src/display.c **** 	  else
 2191              		.loc 1 1638 6 is_stmt 1 view .LVU690
1638:src/display.c **** 	  else
 2192              		.loc 1 1638 10 is_stmt 0 view .LVU691
 2193 012e 2B46     		mov	r3, r5
 2194              	.LVL223:
1638:src/display.c **** 	  else
 2195              		.loc 1 1638 13 view .LVU692
 2196 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2197              	.LVL224:
1638:src/display.c **** 	  else
 2198              		.loc 1 1638 13 view .LVU693
 2199 0134 2D32     		adds	r2, r2, #45
 2200 0136 2A70     		strb	r2, [r5]
1638:src/display.c **** 	  else
 2201              		.loc 1 1638 10 view .LVU694
 2202 0138 1D46     		mov	r5, r3
 2203              	.LVL225:
 2204              	.L206:
1641:src/display.c **** 	}
 2205              		.loc 1 1641 4 is_stmt 1 view .LVU695
 2206 013a 07A9     		add	r1, sp, #28
 2207 013c 0846     		mov	r0, r1
 2208 013e FFF7FEFF 		bl	dn_minus
 2209              	.LVL226:
ARM GAS  /tmp/cchyQ5Gz.s 			page 110


 2210 0142 80E7     		b	.L204
 2211              	.LVL227:
 2212              	.L229:
 2213              	.LBB240:
 2214              	.LBB236:
 406:src/display.c ****   else	set_dig(base, ch);
 2215              		.loc 1 406 16 is_stmt 0 view .LVU696
 2216 0144 0134     		adds	r4, r4, #1
 2217              	.LVL228:
 2218              	.L217:
 406:src/display.c ****   else	set_dig(base, ch);
 2219              		.loc 1 406 16 view .LVU697
 2220              	.LBE236:
 2221              	.LBE240:
1679:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2222              		.loc 1 1679 9 is_stmt 1 view .LVU698
1679:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2223              		.loc 1 1679 15 is_stmt 0 view .LVU699
 2224 0146 19A8     		add	r0, sp, #100
 2225 0148 FFF7FEFF 		bl	dn_eq0
 2226              	.LVL229:
1679:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2227              		.loc 1 1679 12 view .LVU700
 2228 014c 0028     		cmp	r0, #0
 2229 014e 7FF469AF 		bne	.L199
1680:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2230              		.loc 1 1680 4 is_stmt 1 view .LVU701
1680:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2231              		.loc 1 1680 8 is_stmt 0 view .LVU702
 2232 0152 1B48     		ldr	r0, .L230+8
 2233 0154 19A9     		add	r1, sp, #100
 2234 0156 FFF7FEFF 		bl	dn_lt
 2235              	.LVL230:
1680:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2236              		.loc 1 1680 7 view .LVU703
 2237 015a 0028     		cmp	r0, #0
 2238 015c 7FF462AF 		bne	.L199
1681:src/display.c **** 	  }
 2239              		.loc 1 1681 6 is_stmt 1 view .LVU704
 2240              	.LVL231:
 2241              	.LBB241:
 2242              	.LBI241:
 405:src/display.c ****   if (res) *res++ = ch;
 2243              		.loc 1 405 14 view .LVU705
 2244              	.LBB242:
 406:src/display.c ****   else	set_dig(base, ch);
 2245              		.loc 1 406 3 view .LVU706
 406:src/display.c ****   else	set_dig(base, ch);
 2246              		.loc 1 406 6 is_stmt 0 view .LVU707
 2247 0160 24B3     		cbz	r4, .L219
 406:src/display.c ****   else	set_dig(base, ch);
 2248              		.loc 1 406 12 is_stmt 1 view .LVU708
 2249              	.LVL232:
 406:src/display.c ****   else	set_dig(base, ch);
 2250              		.loc 1 406 19 is_stmt 0 view .LVU709
 2251 0162 7523     		movs	r3, #117
 2252 0164 2370     		strb	r3, [r4]
ARM GAS  /tmp/cchyQ5Gz.s 			page 111


 2253 0166 5DE7     		b	.L199
 2254              	.LVL233:
 2255              	.L205:
 406:src/display.c ****   else	set_dig(base, ch);
 2256              		.loc 1 406 19 view .LVU710
 2257              	.LBE242:
 2258              	.LBE241:
1640:src/display.c **** 	  dn_minus(&x, &x);
 2259              		.loc 1 1640 6 is_stmt 1 view .LVU711
 2260              	.LBB244:
 2261              	.LBI244:
 294:src/display.c **** {
 2262              		.loc 1 294 13 view .LVU712
 2263              	.LBB245:
 296:src/display.c ****   set_dot(MANT_SIGN);
 2264              		.loc 1 296 3 view .LVU713
 296:src/display.c ****   set_dot(MANT_SIGN);
 2265              		.loc 1 296 25 is_stmt 0 view .LVU714
 2266 0168 164B     		ldr	r3, .L230+12
 2267 016a 2D22     		movs	r2, #45
 297:src/display.c **** }
 2268              		.loc 1 297 3 view .LVU715
 2269 016c 8120     		movs	r0, #129
 296:src/display.c ****   set_dot(MANT_SIGN);
 2270              		.loc 1 296 25 view .LVU716
 2271 016e 1A70     		strb	r2, [r3]
 297:src/display.c **** }
 2272              		.loc 1 297 3 is_stmt 1 view .LVU717
 2273 0170 FFF7FEFF 		bl	set_dot
 2274              	.LVL234:
 298:src/display.c **** 
 2275              		.loc 1 298 1 is_stmt 0 view .LVU718
 2276 0174 E1E7     		b	.L206
 2277              	.LVL235:
 2278              	.L214:
 298:src/display.c **** 
 2279              		.loc 1 298 1 view .LVU719
 2280              	.LBE245:
 2281              	.LBE244:
 2282              	.LBB246:
 2283              	.LBB237:
 407:src/display.c ****   return res;
 2284              		.loc 1 407 8 is_stmt 1 view .LVU720
 2285 0176 0398     		ldr	r0, [sp, #12]
 2286              	.LVL236:
 407:src/display.c ****   return res;
 2287              		.loc 1 407 8 is_stmt 0 view .LVU721
 2288 0178 2221     		movs	r1, #34
 2289 017a FFF7FEFF 		bl	set_dig
 2290              	.LVL237:
 408:src/display.c **** }
 2291              		.loc 1 408 3 is_stmt 1 view .LVU722
 408:src/display.c **** }
 2292              		.loc 1 408 3 is_stmt 0 view .LVU723
 2293              	.LBE237:
 2294              	.LBE246:
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
ARM GAS  /tmp/cchyQ5Gz.s 			page 112


 2295              		.loc 1 1677 2 is_stmt 1 view .LVU724
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2296              		.loc 1 1677 6 is_stmt 0 view .LVU725
 2297 017e 0E49     		ldr	r1, .L230
 2298 0180 19A8     		add	r0, sp, #100
 2299 0182 FFF7FEFF 		bl	dn_lt
 2300              	.LVL238:
1677:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2301              		.loc 1 1677 5 view .LVU726
 2302 0186 0028     		cmp	r0, #0
 2303 0188 DDD1     		bne	.L217
 2304              	.LVL239:
 2305              	.L203:
 2306              	.LBB247:
 2307              	.LBB227:
 407:src/display.c ****   return res;
 2308              		.loc 1 407 8 is_stmt 1 view .LVU727
 2309 018a 6F21     		movs	r1, #111
 2310 018c 7A20     		movs	r0, #122
 2311 018e FFF7FEFF 		bl	set_dig
 2312              	.LVL240:
 2313              	.LBE227:
 2314              	.LBE247:
1630:src/display.c **** 	}
 2315              		.loc 1 1630 4 view .LVU728
 2316 0192 47E7     		b	.L199
 2317              	.LVL241:
 2318              	.L212:
 2319              	.LBB248:
 2320              	.LBB233:
 407:src/display.c ****   return res;
 2321              		.loc 1 407 8 view .LVU729
 2322 0194 2721     		movs	r1, #39
 2323 0196 0398     		ldr	r0, [sp, #12]
 2324              	.LVL242:
 407:src/display.c ****   return res;
 2325              		.loc 1 407 8 is_stmt 0 view .LVU730
 2326 0198 FFF7FEFF 		bl	set_dig
 2327              	.LVL243:
 407:src/display.c ****   return res;
 2328              		.loc 1 407 8 view .LVU731
 2329 019c 2146     		mov	r1, r4
 2330 019e 9EE7     		b	.L213
 2331              	.LVL244:
 2332              	.L210:
 407:src/display.c ****   return res;
 2333              		.loc 1 407 8 view .LVU732
 2334              	.LBE233:
 2335              	.LBE248:
 2336              	.LBB249:
 2337              	.LBB230:
 407:src/display.c ****   return res;
 2338              		.loc 1 407 8 is_stmt 1 view .LVU733
 2339 01a0 4021     		movs	r1, #64
 2340 01a2 0398     		ldr	r0, [sp, #12]
 2341              	.LVL245:
 407:src/display.c ****   return res;
ARM GAS  /tmp/cchyQ5Gz.s 			page 113


 2342              		.loc 1 407 8 is_stmt 0 view .LVU734
 2343 01a4 FFF7FEFF 		bl	set_dig
 2344              	.LVL246:
 407:src/display.c ****   return res;
 2345              		.loc 1 407 8 view .LVU735
 2346 01a8 2146     		mov	r1, r4
 2347 01aa 86E7     		b	.L211
 2348              	.LVL247:
 2349              	.L219:
 407:src/display.c ****   return res;
 2350              		.loc 1 407 8 view .LVU736
 2351              	.LBE230:
 2352              	.LBE249:
 2353              	.LBB250:
 2354              	.LBB243:
 407:src/display.c ****   return res;
 2355              		.loc 1 407 8 is_stmt 1 view .LVU737
 2356 01ac 7521     		movs	r1, #117
 2357 01ae 7A20     		movs	r0, #122
 2358 01b0 FFF7FEFF 		bl	set_dig
 2359              	.LVL248:
 2360 01b4 36E7     		b	.L199
 2361              	.L231:
 2362 01b6 00BF     		.align	2
 2363              	.L230:
 2364 01b8 00000000 		.word	const_9000
 2365 01bc 00000000 		.word	.LANCHOR1
 2366 01c0 00000000 		.word	const_hms_threshold
 2367 01c4 00000000 		.word	LastDisplayedNumber
 2368              	.LBE243:
 2369              	.LBE250:
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.set_x_fract,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.syntax unified
 2377              		.thumb
 2378              		.thumb_func
 2379              		.fpu fpv4-sp-d16
 2381              	set_x_fract:
 2382              	.LVL249:
 2383              	.LFB23:
1687:src/display.c **** 	decNumber x, w, n, d, t;
 2384              		.loc 1 1687 63 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 216
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
1688:src/display.c **** 	char buf[32], *p = buf;
 2388              		.loc 1 1688 2 view .LVU739
1689:src/display.c **** 	int j;
 2389              		.loc 1 1689 2 view .LVU740
1690:src/display.c **** 
 2390              		.loc 1 1690 2 view .LVU741
1692:src/display.c **** 	  return 1;
 2391              		.loc 1 1692 2 view .LVU742
1687:src/display.c **** 	decNumber x, w, n, d, t;
ARM GAS  /tmp/cchyQ5Gz.s 			page 114


 2392              		.loc 1 1687 63 is_stmt 0 view .LVU743
 2393 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2394              		.cfi_def_cfa_offset 20
 2395              		.cfi_offset 4, -20
 2396              		.cfi_offset 5, -16
 2397              		.cfi_offset 6, -12
 2398              		.cfi_offset 7, -8
 2399              		.cfi_offset 14, -4
 2400 0002 0646     		mov	r6, r0
 2401 0004 B7B0     		sub	sp, sp, #220
 2402              		.cfi_def_cfa_offset 240
1692:src/display.c **** 	  return 1;
 2403              		.loc 1 1692 6 view .LVU744
 2404 0006 0830     		adds	r0, r0, #8
 2405              	.LVL250:
1687:src/display.c **** 	decNumber x, w, n, d, t;
 2406              		.loc 1 1687 63 view .LVU745
 2407 0008 0C46     		mov	r4, r1
1692:src/display.c **** 	  return 1;
 2408              		.loc 1 1692 6 view .LVU746
 2409 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2410              	.LVL251:
1692:src/display.c **** 	  return 1;
 2411              		.loc 1 1692 5 view .LVU747
 2412 000e 18B1     		cbz	r0, .L263
 2413              	.LVL252:
 2414              	.L252:
1693:src/display.c **** 	dn_abs(&x, rgx);
 2415              		.loc 1 1693 11 view .LVU748
 2416 0010 0125     		movs	r5, #1
 2417              	.L232:
1750:src/display.c **** 
 2418              		.loc 1 1750 7 view .LVU749
 2419 0012 2846     		mov	r0, r5
 2420 0014 37B0     		add	sp, sp, #220
 2421              		.cfi_remember_state
 2422              		.cfi_def_cfa_offset 20
 2423              		@ sp needed
 2424 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2425              	.LVL253:
 2426              	.L263:
 2427              		.cfi_restore_state
 2428              	.LBB259:
 2429              	.LBI259:
1687:src/display.c **** 	decNumber x, w, n, d, t;
 2430              		.loc 1 1687 18 is_stmt 1 view .LVU750
 2431              	.LBB260:
1694:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2432              		.loc 1 1694 2 view .LVU751
 2433 0018 3146     		mov	r1, r6
 2434 001a 0546     		mov	r5, r0
 2435 001c 09A8     		add	r0, sp, #36
 2436 001e FFF7FEFF 		bl	dn_abs
 2437              	.LVL254:
1695:src/display.c **** 	  return 0;
 2438              		.loc 1 1695 2 view .LVU752
1695:src/display.c **** 	  return 0;
ARM GAS  /tmp/cchyQ5Gz.s 			page 115


 2439              		.loc 1 1695 6 is_stmt 0 view .LVU753
 2440 0022 5D49     		ldr	r1, .L268
 2441 0024 09A8     		add	r0, sp, #36
 2442 0026 FFF7FEFF 		bl	dn_lt
 2443              	.LVL255:
1695:src/display.c **** 	  return 0;
 2444              		.loc 1 1695 5 view .LVU754
 2445 002a 0028     		cmp	r0, #0
 2446 002c F1D0     		beq	.L232
1697:src/display.c **** 	  return 0;
 2447              		.loc 1 1697 2 is_stmt 1 view .LVU755
1697:src/display.c **** 	  return 0;
 2448              		.loc 1 1697 6 is_stmt 0 view .LVU756
 2449 002e 5B49     		ldr	r1, .L268+4
 2450 0030 09A8     		add	r0, sp, #36
 2451 0032 FFF7FEFF 		bl	dn_lt
 2452              	.LVL256:
1697:src/display.c **** 	  return 0;
 2453              		.loc 1 1697 5 view .LVU757
 2454 0036 0746     		mov	r7, r0
 2455 0038 0028     		cmp	r0, #0
 2456 003a EAD1     		bne	.L232
1699:src/display.c **** 	  if (res != NULL)
 2457              		.loc 1 1699 2 is_stmt 1 view .LVU758
1699:src/display.c **** 	  if (res != NULL)
 2458              		.loc 1 1699 5 is_stmt 0 view .LVU759
 2459 003c 96F90830 		ldrsb	r3, [r6, #8]
 2460 0040 002B     		cmp	r3, #0
 2461 0042 C0F28680 		blt	.L264
 2462              	.LVL257:
 2463              	.L237:
1705:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2464              		.loc 1 1705 2 is_stmt 1 view .LVU760
 2465 0046 09A9     		add	r1, sp, #36
 2466 0048 12A8     		add	r0, sp, #72
 2467 004a FFF7FEFF 		bl	decNumberFrac
 2468              	.LVL258:
1706:src/display.c **** 
 2469              		.loc 1 1706 2 view .LVU761
 2470 004e 12AA     		add	r2, sp, #72
 2471 0050 24A9     		add	r1, sp, #144
 2472 0052 1BA8     		add	r0, sp, #108
 2473 0054 FFF7FEFF 		bl	decNumber2Fraction
 2474              	.LVL259:
1708:src/display.c **** 	dn_compare(&t, &t, &w);
 2475              		.loc 1 1708 2 view .LVU762
 2476 0058 24AA     		add	r2, sp, #144
 2477 005a 1BA9     		add	r1, sp, #108
 2478 005c 2DA8     		add	r0, sp, #180
 2479 005e FFF7FEFF 		bl	dn_divide
 2480              	.LVL260:
1709:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2481              		.loc 1 1709 2 view .LVU763
 2482 0062 2DA9     		add	r1, sp, #180
 2483 0064 12AA     		add	r2, sp, #72
 2484 0066 0846     		mov	r0, r1
 2485 0068 FFF7FEFF 		bl	dn_compare
ARM GAS  /tmp/cchyQ5Gz.s 			page 116


 2486              	.LVL261:
1710:src/display.c **** 
 2487              		.loc 1 1710 2 view .LVU764
 2488 006c 09A9     		add	r1, sp, #36
 2489 006e 12A8     		add	r0, sp, #72
 2490 0070 FFF7FEFF 		bl	decNumberTrunc
 2491              	.LVL262:
1712:src/display.c **** 	  dn_inc(&w);
 2492              		.loc 1 1712 2 view .LVU765
1712:src/display.c **** 	  dn_inc(&w);
 2493              		.loc 1 1712 6 is_stmt 0 view .LVU766
 2494 0074 24A9     		add	r1, sp, #144
 2495 0076 1BA8     		add	r0, sp, #108
 2496 0078 FFF7FEFF 		bl	dn_eq
 2497              	.LVL263:
1712:src/display.c **** 	  dn_inc(&w);
 2498              		.loc 1 1712 5 view .LVU767
 2499 007c 0028     		cmp	r0, #0
 2500 007e 70D1     		bne	.L265
 2501              	.L239:
1717:src/display.c **** 	  if (!dn_eq0(&w)) {
 2502              		.loc 1 1717 2 is_stmt 1 view .LVU768
1717:src/display.c **** 	  if (!dn_eq0(&w)) {
 2503              		.loc 1 1717 6 is_stmt 0 view .LVU769
 2504 0080 474B     		ldr	r3, .L268+8
 2505 0082 1B68     		ldr	r3, [r3]
 2506 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1717:src/display.c **** 	  if (!dn_eq0(&w)) {
 2507              		.loc 1 1717 5 view .LVU770
 2508 0088 DB06     		lsls	r3, r3, #27
 2509 008a 55D4     		bmi	.L240
1718:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2510              		.loc 1 1718 4 is_stmt 1 view .LVU771
1718:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2511              		.loc 1 1718 9 is_stmt 0 view .LVU772
 2512 008c 12A8     		add	r0, sp, #72
 2513 008e FFF7FEFF 		bl	dn_eq0
 2514              	.LVL264:
1718:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2515              		.loc 1 1718 7 view .LVU773
 2516 0092 0028     		cmp	r0, #0
 2517 0094 6CD0     		beq	.L266
1689:src/display.c **** 	int j;
 2518              		.loc 1 1689 17 view .LVU774
 2519 0096 01AE     		add	r6, sp, #4
 2520              	.LVL265:
1689:src/display.c **** 	int j;
 2521              		.loc 1 1689 17 view .LVU775
 2522 0098 3546     		mov	r5, r6
 2523              	.L241:
 2524              	.LVL266:
1726:src/display.c **** 	*p++ = '/';
 2525              		.loc 1 1726 2 is_stmt 1 view .LVU776
1726:src/display.c **** 	*p++ = '/';
 2526              		.loc 1 1726 17 is_stmt 0 view .LVU777
 2527 009a 1BA8     		add	r0, sp, #108
 2528 009c FFF7FEFF 		bl	dn_to_int
ARM GAS  /tmp/cchyQ5Gz.s 			page 117


 2529              	.LVL267:
 2530 00a0 0146     		mov	r1, r0
1726:src/display.c **** 	*p++ = '/';
 2531              		.loc 1 1726 6 view .LVU778
 2532 00a2 2846     		mov	r0, r5
 2533 00a4 FFF7FEFF 		bl	num_arg
 2534              	.LVL268:
1727:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2535              		.loc 1 1727 2 is_stmt 1 view .LVU779
1727:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2536              		.loc 1 1727 4 is_stmt 0 view .LVU780
 2537 00a8 0546     		mov	r5, r0
 2538              	.LVL269:
1727:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2539              		.loc 1 1727 7 view .LVU781
 2540 00aa 2F23     		movs	r3, #47
 2541 00ac 05F8013B 		strb	r3, [r5], #1
 2542              	.LVL270:
1728:src/display.c **** 	*p = '\0';
 2543              		.loc 1 1728 2 is_stmt 1 view .LVU782
1728:src/display.c **** 	*p = '\0';
 2544              		.loc 1 1728 17 is_stmt 0 view .LVU783
 2545 00b0 24A8     		add	r0, sp, #144
 2546 00b2 FFF7FEFF 		bl	dn_to_int
 2547              	.LVL271:
 2548 00b6 0146     		mov	r1, r0
1728:src/display.c **** 	*p = '\0';
 2549              		.loc 1 1728 6 view .LVU784
 2550 00b8 2846     		mov	r0, r5
 2551 00ba FFF7FEFF 		bl	num_arg
 2552              	.LVL272:
1729:src/display.c **** 	if ((p - 12) > buf) {
 2553              		.loc 1 1729 2 is_stmt 1 view .LVU785
1729:src/display.c **** 	if ((p - 12) > buf) {
 2554              		.loc 1 1729 5 is_stmt 0 view .LVU786
 2555 00be 0546     		mov	r5, r0
 2556 00c0 0023     		movs	r3, #0
 2557 00c2 05F80C39 		strb	r3, [r5], #-12
1730:src/display.c **** 	  p -= 12;
 2558              		.loc 1 1730 2 is_stmt 1 view .LVU787
1730:src/display.c **** 	  p -= 12;
 2559              		.loc 1 1730 5 is_stmt 0 view .LVU788
 2560 00c6 B542     		cmp	r5, r6
 2561 00c8 32D8     		bhi	.L242
 2562 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2563              	.LVL273:
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2564              		.loc 1 1734 12 is_stmt 1 view .LVU789
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2565              		.loc 1 1734 2 is_stmt 0 view .LVU790
 2566 00ce 51B1     		cbz	r1, .L244
1733:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2567              		.loc 1 1733 11 view .LVU791
 2568 00d0 3546     		mov	r5, r6
 2569              	.LVL274:
 2570              	.L247:
1735:src/display.c **** 	  j += SEGS_PER_DIGIT;
ARM GAS  /tmp/cchyQ5Gz.s 			page 118


 2571              		.loc 1 1735 4 is_stmt 1 view .LVU792
 2572              	.LBB261:
 2573              	.LBI261:
 405:src/display.c ****   if (res) *res++ = ch;
 2574              		.loc 1 405 14 view .LVU793
 2575              	.LBB262:
 406:src/display.c ****   else	set_dig(base, ch);
 2576              		.loc 1 406 3 view .LVU794
 406:src/display.c ****   else	set_dig(base, ch);
 2577              		.loc 1 406 12 view .LVU795
 406:src/display.c ****   else	set_dig(base, ch);
 2578              		.loc 1 406 16 is_stmt 0 view .LVU796
 2579 00d2 2346     		mov	r3, r4
 2580              	.LVL275:
 406:src/display.c ****   else	set_dig(base, ch);
 2581              		.loc 1 406 6 view .LVU797
 2582 00d4 34B3     		cbz	r4, .L245
 2583              	.LVL276:
 406:src/display.c ****   else	set_dig(base, ch);
 2584              		.loc 1 406 19 view .LVU798
 2585 00d6 03F8011B 		strb	r1, [r3], #1
 2586              	.LVL277:
 406:src/display.c ****   else	set_dig(base, ch);
 2587              		.loc 1 406 16 view .LVU799
 2588 00da 1C46     		mov	r4, r3
 2589              	.LVL278:
 2590              	.L246:
 408:src/display.c **** }
 2591              		.loc 1 408 3 is_stmt 1 view .LVU800
 408:src/display.c **** }
 2592              		.loc 1 408 3 is_stmt 0 view .LVU801
 2593              	.LBE262:
 2594              	.LBE261:
1736:src/display.c **** 	}
 2595              		.loc 1 1736 4 is_stmt 1 view .LVU802
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2596              		.loc 1 1734 12 is_stmt 0 view .LVU803
 2597 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2598              	.LVL279:
1736:src/display.c **** 	}
 2599              		.loc 1 1736 6 view .LVU804
 2600 00e0 0937     		adds	r7, r7, #9
 2601              	.LVL280:
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2602              		.loc 1 1734 24 is_stmt 1 view .LVU805
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2603              		.loc 1 1734 12 view .LVU806
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2604              		.loc 1 1734 2 is_stmt 0 view .LVU807
 2605 00e2 0029     		cmp	r1, #0
 2606 00e4 F5D1     		bne	.L247
 2607              	.LVL281:
 2608              	.L244:
1739:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2609              		.loc 1 1739 2 is_stmt 1 view .LVU808
1739:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2610              		.loc 1 1739 6 is_stmt 0 view .LVU809
ARM GAS  /tmp/cchyQ5Gz.s 			page 119


 2611 00e6 2DA8     		add	r0, sp, #180
 2612 00e8 FFF7FEFF 		bl	dn_eq0
 2613              	.LVL282:
1739:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2614              		.loc 1 1739 5 view .LVU810
 2615 00ec F0B9     		cbnz	r0, .L255
1741:src/display.c **** 	  p = (char *)S7_fract_LT;
 2616              		.loc 1 1741 7 is_stmt 1 view .LVU811
1741:src/display.c **** 	  p = (char *)S7_fract_LT;
 2617              		.loc 1 1741 10 is_stmt 0 view .LVU812
 2618 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1744:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2619              		.loc 1 1744 6 view .LVU813
 2620 00f2 2C4D     		ldr	r5, .L268+12
 2621 00f4 2C4B     		ldr	r3, .L268+16
 2622 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2623 00fa 38BF     		it	cc
 2624 00fc 1D46     		movcc	r5, r3
 2625              	.L248:
 2626              	.LVL283:
1745:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2627              		.loc 1 1745 26 is_stmt 1 view .LVU814
 2628              	.LBB265:
 2629              	.LBB263:
 406:src/display.c ****   else	set_dig(base, ch);
 2630              		.loc 1 406 16 is_stmt 0 view .LVU815
 2631 00fe 6C26     		movs	r6, #108
 2632 0100 2021     		movs	r1, #32
 2633 0102 08E0     		b	.L251
 2634              	.LVL284:
 2635              	.L267:
 406:src/display.c ****   else	set_dig(base, ch);
 2636              		.loc 1 406 16 view .LVU816
 2637              	.LBE263:
 2638              	.LBE265:
 2639              	.LBB266:
 2640              	.LBB267:
 406:src/display.c ****   else	set_dig(base, ch);
 2641              		.loc 1 406 19 view .LVU817
 2642 0104 03F8011B 		strb	r1, [r3], #1
 2643              	.LVL285:
 406:src/display.c ****   else	set_dig(base, ch);
 2644              		.loc 1 406 16 view .LVU818
 2645 0108 1C46     		mov	r4, r3
 2646              	.LVL286:
 2647              	.L250:
 408:src/display.c **** }
 2648              		.loc 1 408 3 is_stmt 1 view .LVU819
 408:src/display.c **** }
 2649              		.loc 1 408 3 is_stmt 0 view .LVU820
 2650              	.LBE267:
 2651              	.LBE266:
1747:src/display.c **** 	}
 2652              		.loc 1 1747 4 is_stmt 1 view .LVU821
1745:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2653              		.loc 1 1745 26 is_stmt 0 view .LVU822
 2654 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/cchyQ5Gz.s 			page 120


 2655              	.LVL287:
1747:src/display.c **** 	}
 2656              		.loc 1 1747 6 view .LVU823
 2657 010e 0736     		adds	r6, r6, #7
 2658              	.LVL288:
1745:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2659              		.loc 1 1745 38 is_stmt 1 view .LVU824
1745:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2660              		.loc 1 1745 26 view .LVU825
1745:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2661              		.loc 1 1745 2 is_stmt 0 view .LVU826
 2662 0110 0029     		cmp	r1, #0
 2663 0112 3FF47DAF 		beq	.L252
 2664              	.LVL289:
 2665              	.L251:
1746:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2666              		.loc 1 1746 4 is_stmt 1 view .LVU827
 2667              	.LBB269:
 2668              	.LBI266:
 405:src/display.c ****   if (res) *res++ = ch;
 2669              		.loc 1 405 14 view .LVU828
 2670              	.LBB268:
 406:src/display.c ****   else	set_dig(base, ch);
 2671              		.loc 1 406 3 view .LVU829
 406:src/display.c ****   else	set_dig(base, ch);
 2672              		.loc 1 406 12 view .LVU830
 406:src/display.c ****   else	set_dig(base, ch);
 2673              		.loc 1 406 16 is_stmt 0 view .LVU831
 2674 0116 2346     		mov	r3, r4
 2675              	.LVL290:
 406:src/display.c ****   else	set_dig(base, ch);
 2676              		.loc 1 406 6 view .LVU832
 2677 0118 002C     		cmp	r4, #0
 2678 011a F3D1     		bne	.L267
 2679              	.LVL291:
 407:src/display.c ****   return res;
 2680              		.loc 1 407 8 is_stmt 1 view .LVU833
 2681 011c 3046     		mov	r0, r6
 2682 011e FFF7FEFF 		bl	set_dig
 2683              	.LVL292:
 407:src/display.c ****   return res;
 2684              		.loc 1 407 8 is_stmt 0 view .LVU834
 2685 0122 F2E7     		b	.L250
 2686              	.LVL293:
 2687              	.L245:
 407:src/display.c ****   return res;
 2688              		.loc 1 407 8 view .LVU835
 2689              	.LBE268:
 2690              	.LBE269:
 2691              	.LBB270:
 2692              	.LBB264:
 407:src/display.c ****   return res;
 2693              		.loc 1 407 8 is_stmt 1 view .LVU836
 2694 0124 3846     		mov	r0, r7
 2695 0126 FFF7FEFF 		bl	set_dig
 2696              	.LVL294:
 407:src/display.c ****   return res;
ARM GAS  /tmp/cchyQ5Gz.s 			page 121


 2697              		.loc 1 407 8 is_stmt 0 view .LVU837
 2698 012a D7E7     		b	.L246
 2699              	.LVL295:
 2700              	.L255:
 407:src/display.c ****   return res;
 2701              		.loc 1 407 8 view .LVU838
 2702              	.LBE264:
 2703              	.LBE270:
1740:src/display.c **** 	else if (decNumberIsNegative(&t))
 2704              		.loc 1 1740 6 view .LVU839
 2705 012c 1F4D     		ldr	r5, .L268+20
 2706 012e E6E7     		b	.L248
 2707              	.LVL296:
 2708              	.L242:
1731:src/display.c **** 	  *p = '<';
 2709              		.loc 1 1731 4 is_stmt 1 view .LVU840
1732:src/display.c **** 	} else	p = buf;
 2710              		.loc 1 1732 4 view .LVU841
1732:src/display.c **** 	} else	p = buf;
 2711              		.loc 1 1732 7 is_stmt 0 view .LVU842
 2712 0130 3C21     		movs	r1, #60
 2713 0132 00F80C1C 		strb	r1, [r0, #-12]
 2714              	.LVL297:
1734:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2715              		.loc 1 1734 12 is_stmt 1 view .LVU843
 2716 0136 CCE7     		b	.L247
 2717              	.LVL298:
 2718              	.L240:
1723:src/display.c **** 	  dn_add(&n, &n, &x);
 2719              		.loc 1 1723 4 view .LVU844
 2720 0138 12A9     		add	r1, sp, #72
 2721 013a 24AA     		add	r2, sp, #144
 2722 013c 09A8     		add	r0, sp, #36
 2723 013e FFF7FEFF 		bl	dn_multiply
 2724              	.LVL299:
1724:src/display.c **** 	}
 2725              		.loc 1 1724 4 view .LVU845
 2726 0142 1BA9     		add	r1, sp, #108
 2727 0144 09AA     		add	r2, sp, #36
 2728 0146 0846     		mov	r0, r1
1689:src/display.c **** 	int j;
 2729              		.loc 1 1689 17 is_stmt 0 view .LVU846
 2730 0148 01AE     		add	r6, sp, #4
 2731              	.LVL300:
1724:src/display.c **** 	}
 2732              		.loc 1 1724 4 view .LVU847
 2733 014a FFF7FEFF 		bl	dn_add
 2734              	.LVL301:
1689:src/display.c **** 	int j;
 2735              		.loc 1 1689 17 view .LVU848
 2736 014e 3546     		mov	r5, r6
 2737 0150 A3E7     		b	.L241
 2738              	.LVL302:
 2739              	.L264:
1700:src/display.c **** 	    *res++ += '-';
 2740              		.loc 1 1700 4 is_stmt 1 view .LVU849
1700:src/display.c **** 	    *res++ += '-';
ARM GAS  /tmp/cchyQ5Gz.s 			page 122


 2741              		.loc 1 1700 7 is_stmt 0 view .LVU850
 2742 0152 D4B1     		cbz	r4, .L238
1701:src/display.c **** 	  else
 2743              		.loc 1 1701 6 is_stmt 1 view .LVU851
1701:src/display.c **** 	  else
 2744              		.loc 1 1701 10 is_stmt 0 view .LVU852
 2745 0154 2346     		mov	r3, r4
 2746              	.LVL303:
1701:src/display.c **** 	  else
 2747              		.loc 1 1701 13 view .LVU853
 2748 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2749              	.LVL304:
1701:src/display.c **** 	  else
 2750              		.loc 1 1701 13 view .LVU854
 2751 015a 2D32     		adds	r2, r2, #45
 2752 015c 2270     		strb	r2, [r4]
1701:src/display.c **** 	  else
 2753              		.loc 1 1701 10 view .LVU855
 2754 015e 1C46     		mov	r4, r3
 2755              	.LVL305:
1701:src/display.c **** 	  else
 2756              		.loc 1 1701 10 view .LVU856
 2757 0160 71E7     		b	.L237
 2758              	.LVL306:
 2759              	.L265:
1713:src/display.c **** 	  decNumberZero(&n);
 2760              		.loc 1 1713 4 is_stmt 1 view .LVU857
 2761 0162 12A8     		add	r0, sp, #72
 2762 0164 FFF7FEFF 		bl	dn_inc
 2763              	.LVL307:
1714:src/display.c **** 	}
 2764              		.loc 1 1714 4 view .LVU858
 2765 0168 1BA8     		add	r0, sp, #108
 2766 016a FFF7FEFF 		bl	decNumberZero
 2767              	.LVL308:
 2768 016e 87E7     		b	.L239
 2769              	.L266:
1719:src/display.c **** 	    *p++ = ' ';
 2770              		.loc 1 1719 6 view .LVU859
1719:src/display.c **** 	    *p++ = ' ';
 2771              		.loc 1 1719 21 is_stmt 0 view .LVU860
 2772 0170 12A8     		add	r0, sp, #72
 2773 0172 FFF7FEFF 		bl	dn_to_int
 2774              	.LVL309:
1719:src/display.c **** 	    *p++ = ' ';
 2775              		.loc 1 1719 10 view .LVU861
 2776 0176 01AE     		add	r6, sp, #4
 2777              	.LVL310:
1719:src/display.c **** 	    *p++ = ' ';
 2778              		.loc 1 1719 21 view .LVU862
 2779 0178 0146     		mov	r1, r0
1719:src/display.c **** 	    *p++ = ' ';
 2780              		.loc 1 1719 10 view .LVU863
 2781 017a 3046     		mov	r0, r6
 2782 017c FFF7FEFF 		bl	num_arg
 2783              	.LVL311:
1720:src/display.c **** 	  }
ARM GAS  /tmp/cchyQ5Gz.s 			page 123


 2784              		.loc 1 1720 6 is_stmt 1 view .LVU864
1720:src/display.c **** 	  }
 2785              		.loc 1 1720 8 is_stmt 0 view .LVU865
 2786 0180 0546     		mov	r5, r0
 2787              	.LVL312:
1720:src/display.c **** 	  }
 2788              		.loc 1 1720 11 view .LVU866
 2789 0182 2023     		movs	r3, #32
 2790 0184 05F8013B 		strb	r3, [r5], #1
 2791              	.LVL313:
1720:src/display.c **** 	  }
 2792              		.loc 1 1720 11 view .LVU867
 2793 0188 87E7     		b	.L241
 2794              	.LVL314:
 2795              	.L238:
1703:src/display.c **** 	}
 2796              		.loc 1 1703 6 is_stmt 1 view .LVU868
 2797              	.LBB271:
 2798              	.LBI271:
 294:src/display.c **** {
 2799              		.loc 1 294 13 view .LVU869
 2800              	.LBB272:
 296:src/display.c ****   set_dot(MANT_SIGN);
 2801              		.loc 1 296 3 view .LVU870
 296:src/display.c ****   set_dot(MANT_SIGN);
 2802              		.loc 1 296 25 is_stmt 0 view .LVU871
 2803 018a 094B     		ldr	r3, .L268+24
 2804 018c 2D22     		movs	r2, #45
 297:src/display.c **** }
 2805              		.loc 1 297 3 view .LVU872
 2806 018e 8120     		movs	r0, #129
 296:src/display.c ****   set_dot(MANT_SIGN);
 2807              		.loc 1 296 25 view .LVU873
 2808 0190 1A70     		strb	r2, [r3]
 297:src/display.c **** }
 2809              		.loc 1 297 3 is_stmt 1 view .LVU874
 2810 0192 FFF7FEFF 		bl	set_dot
 2811              	.LVL315:
 298:src/display.c **** 
 2812              		.loc 1 298 1 is_stmt 0 view .LVU875
 2813 0196 56E7     		b	.L237
 2814              	.L269:
 2815              		.align	2
 2816              	.L268:
 2817 0198 00000000 		.word	const_100000
 2818 019c 00000000 		.word	const_0_0001
 2819 01a0 00000000 		.word	main_ram
 2820 01a4 00000000 		.word	.LANCHOR8
 2821 01a8 00000000 		.word	.LANCHOR10
 2822 01ac 00000000 		.word	.LANCHOR9
 2823 01b0 00000000 		.word	LastDisplayedNumber
 2824              	.LBE272:
 2825              	.LBE271:
 2826              	.LBE260:
 2827              	.LBE259:
 2828              		.cfi_endproc
 2829              	.LFE23:
ARM GAS  /tmp/cchyQ5Gz.s 			page 124


 2831              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC2:
 2834 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2834      36376F39 
 2834      44313233 
 2834      34356800 
 2835              		.section	.text.carry_overflow,"ax",%progbits
 2836              		.align	1
 2837              		.p2align 2,,3
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu fpv4-sp-d16
 2843              	carry_overflow:
 2844              	.LFB15:
 560:src/display.c ****       const int base = SEGS_EXP_BASE;
 2845              		.loc 1 560 38 is_stmt 1 view -0
 2846              		.cfi_startproc
 2847              		@ args = 0, pretend = 0, frame = 0
 2848              		@ frame_needed = 0, uses_anonymous_args = 0
 561:src/display.c ****       int c;
 2849              		.loc 1 561 7 view .LVU877
 2850              	.LVL316:
 562:src/display.c ****       unsigned int b;
 2851              		.loc 1 562 7 view .LVU878
 563:src/display.c **** 
 2852              		.loc 1 563 7 view .LVU879
 566:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2853              		.loc 1 566 7 view .LVU880
 560:src/display.c ****       const int base = SEGS_EXP_BASE;
 2854              		.loc 1 560 38 is_stmt 0 view .LVU881
 2855 0000 10B5     		push	{r4, lr}
 2856              		.cfi_def_cfa_offset 8
 2857              		.cfi_offset 4, -8
 2858              		.cfi_offset 14, -4
 566:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2859              		.loc 1 566 21 view .LVU882
 2860 0002 1B4B     		ldr	r3, .L283
 2861 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2862 0006 023B     		subs	r3, r3, #2
 2863 0008 DBB2     		uxtb	r3, r3
 2864 000a 032B     		cmp	r3, #3
 2865 000c 14D8     		bhi	.L271
 2866 000e 194A     		ldr	r2, .L283+4
 2867 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2868              	.LVL317:
 575:src/display.c **** 	SET_EXP_SIGN;
 2869              		.loc 1 575 7 is_stmt 1 view .LVU883
 575:src/display.c **** 	SET_EXP_SIGN;
 2870              		.loc 1 575 18 is_stmt 0 view .LVU884
 2871 0014 A4F10B03 		sub	r3, r4, #11
 575:src/display.c **** 	SET_EXP_SIGN;
 2872              		.loc 1 575 10 view .LVU885
 2873 0018 042B     		cmp	r3, #4
 2874 001a 17D9     		bls	.L280
 2875              	.L273:
ARM GAS  /tmp/cchyQ5Gz.s 			page 125


 577:src/display.c ****       set_dig(base, c);
 2876              		.loc 1 577 7 is_stmt 1 view .LVU886
 2877              	.LVL318:
 578:src/display.c **** 
 2878              		.loc 1 578 7 view .LVU887
 577:src/display.c ****       set_dig(base, c);
 2879              		.loc 1 577 28 is_stmt 0 view .LVU888
 2880 001c 164B     		ldr	r3, .L283+8
 2881 001e 1C44     		add	r4, r4, r3
 2882              	.LVL319:
 578:src/display.c **** 
 2883              		.loc 1 578 7 view .LVU889
 2884 0020 6C20     		movs	r0, #108
 2885 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2886 0026 FFF7FEFF 		bl	set_dig
 2887              	.LVL320:
 581:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2888              		.loc 1 581 7 is_stmt 1 view .LVU890
 581:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2889              		.loc 1 581 11 is_stmt 0 view .LVU891
 2890 002a FFF7FEFF 		bl	get_carry
 2891              	.LVL321:
 581:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2892              		.loc 1 581 10 view .LVU892
 2893 002e D0B9     		cbnz	r0, .L281
 2894              	.L274:
 583:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2895              		.loc 1 583 7 is_stmt 1 view .LVU893
 583:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2896              		.loc 1 583 11 is_stmt 0 view .LVU894
 2897 0030 FFF7FEFF 		bl	get_overflow
 2898              	.LVL322:
 583:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2899              		.loc 1 583 10 view .LVU895
 2900 0034 88B9     		cbnz	r0, .L282
 585:src/display.c **** 
 2901              		.loc 1 585 5 view .LVU896
 2902 0036 10BD     		pop	{r4, pc}
 2903              	.LVL323:
 2904              	.L271:
 571:src/display.c ****       }
 2905              		.loc 1 571 16 is_stmt 1 view .LVU897
 571:src/display.c ****       }
 2906              		.loc 1 571 26 is_stmt 0 view .LVU898
 2907 0038 104B     		ldr	r3, .L283+12
 2908 003a 1B68     		ldr	r3, [r3]
 2909 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2910 0040 2409     		lsrs	r4, r4, #4
 571:src/display.c ****       }
 2911              		.loc 1 571 35 view .LVU899
 2912 0042 0134     		adds	r4, r4, #1
 2913              	.LVL324:
 571:src/display.c ****       }
 2914              		.loc 1 571 39 is_stmt 1 view .LVU900
 575:src/display.c **** 	SET_EXP_SIGN;
 2915              		.loc 1 575 7 view .LVU901
 575:src/display.c **** 	SET_EXP_SIGN;
ARM GAS  /tmp/cchyQ5Gz.s 			page 126


 2916              		.loc 1 575 18 is_stmt 0 view .LVU902
 2917 0044 A4F10B03 		sub	r3, r4, #11
 575:src/display.c **** 	SET_EXP_SIGN;
 2918              		.loc 1 575 10 view .LVU903
 2919 0048 042B     		cmp	r3, #4
 2920 004a E7D8     		bhi	.L273
 2921              	.L280:
 576:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2922              		.loc 1 576 2 is_stmt 1 view .LVU904
 2923              	.LBB279:
 2924              	.LBI279:
 306:src/display.c **** {
 2925              		.loc 1 306 13 view .LVU905
 2926              	.LBB280:
 308:src/display.c ****   set_dot(EXP_SIGN);
 2927              		.loc 1 308 3 view .LVU906
 308:src/display.c ****   set_dot(EXP_SIGN);
 2928              		.loc 1 308 27 is_stmt 0 view .LVU907
 2929 004c 0C4B     		ldr	r3, .L283+16
 2930 004e 2D22     		movs	r2, #45
 309:src/display.c **** }
 2931              		.loc 1 309 3 view .LVU908
 2932 0050 8220     		movs	r0, #130
 308:src/display.c ****   set_dot(EXP_SIGN);
 2933              		.loc 1 308 27 view .LVU909
 2934 0052 1A70     		strb	r2, [r3]
 309:src/display.c **** }
 2935              		.loc 1 309 3 is_stmt 1 view .LVU910
 2936 0054 FFF7FEFF 		bl	set_dot
 2937              	.LVL325:
 310:src/display.c **** 
 2938              		.loc 1 310 1 is_stmt 0 view .LVU911
 2939 0058 E0E7     		b	.L273
 2940              	.LVL326:
 2941              	.L282:
 310:src/display.c **** 
 2942              		.loc 1 310 1 view .LVU912
 2943              	.LBE280:
 2944              	.LBE279:
 2945              	.LBB281:
 2946              	.LBI281:
 560:src/display.c ****       const int base = SEGS_EXP_BASE;
 2947              		.loc 1 560 17 is_stmt 1 view .LVU913
 2948              	.LBB282:
 584:src/display.c ****     }
 2949              		.loc 1 584 2 view .LVU914
 2950              	.LBE282:
 2951              	.LBE281:
 585:src/display.c **** 
 2952              		.loc 1 585 5 is_stmt 0 view .LVU915
 2953 005a BDE81040 		pop	{r4, lr}
 2954              		.cfi_remember_state
 2955              		.cfi_restore 14
 2956              		.cfi_restore 4
 2957              		.cfi_def_cfa_offset 0
 2958              	.LVL327:
 2959              	.LBB284:
ARM GAS  /tmp/cchyQ5Gz.s 			page 127


 2960              	.LBB283:
 584:src/display.c ****     }
 2961              		.loc 1 584 2 view .LVU916
 2962 005e 6F21     		movs	r1, #111
 2963 0060 7A20     		movs	r0, #122
 2964 0062 FFF7FEBF 		b	set_dig
 2965              	.LVL328:
 2966              	.L281:
 2967              		.cfi_restore_state
 584:src/display.c ****     }
 2968              		.loc 1 584 2 view .LVU917
 2969              	.LBE283:
 2970              	.LBE284:
 582:src/display.c ****       if (get_overflow())
 2971              		.loc 1 582 2 is_stmt 1 view .LVU918
 2972 0066 6321     		movs	r1, #99
 2973 0068 7320     		movs	r0, #115
 2974 006a FFF7FEFF 		bl	set_dig
 2975              	.LVL329:
 2976 006e DFE7     		b	.L274
 2977              	.L284:
 2978              		.align	2
 2979              	.L283:
 2980 0070 00000000 		.word	StateWhileOn
 2981 0074 00000000 		.word	.LANCHOR11
 2982 0078 00000000 		.word	.LC2
 2983 007c 00000000 		.word	main_ram
 2984 0080 00000000 		.word	LastDisplayedExponent
 2985              		.cfi_endproc
 2986              	.LFE15:
 2988              		.global	__aeabi_uldivmod
 2989              		.section	.text.set_int_x,"ax",%progbits
 2990              		.align	1
 2991              		.p2align 2,,3
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2995              		.fpu fpv4-sp-d16
 2997              	set_int_x:
 2998              	.LVL330:
 2999              	.LFB18:
1400:src/display.c **** 	const int ws = word_size();
 3000              		.loc 1 1400 67 view -0
 3001              		.cfi_startproc
 3002              		@ args = 0, pretend = 0, frame = 88
 3003              		@ frame_needed = 0, uses_anonymous_args = 0
1400:src/display.c **** 	const int ws = word_size();
 3004              		.loc 1 1400 67 is_stmt 0 view .LVU920
 3005 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3006              		.cfi_def_cfa_offset 36
 3007              		.cfi_offset 4, -36
 3008              		.cfi_offset 5, -32
 3009              		.cfi_offset 6, -28
 3010              		.cfi_offset 7, -24
 3011              		.cfi_offset 8, -20
 3012              		.cfi_offset 9, -16
 3013              		.cfi_offset 10, -12
ARM GAS  /tmp/cchyQ5Gz.s 			page 128


 3014              		.cfi_offset 11, -8
 3015              		.cfi_offset 14, -4
 3016 0004 97B0     		sub	sp, sp, #92
 3017              		.cfi_def_cfa_offset 128
1400:src/display.c **** 	const int ws = word_size();
 3018              		.loc 1 1400 67 view .LVU921
 3019 0006 1546     		mov	r5, r2
 3020 0008 0646     		mov	r6, r0
 3021 000a 0F46     		mov	r7, r1
1401:src/display.c **** 	unsigned int b;
 3022              		.loc 1 1401 2 is_stmt 1 view .LVU922
1401:src/display.c **** 	unsigned int b;
 3023              		.loc 1 1401 17 is_stmt 0 view .LVU923
 3024 000c FFF7FEFF 		bl	word_size
 3025              	.LVL331:
1401:src/display.c **** 	unsigned int b;
 3026              		.loc 1 1401 17 view .LVU924
 3027 0010 CD4B     		ldr	r3, .L377
 3028 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3029 0014 023B     		subs	r3, r3, #2
 3030 0016 DBB2     		uxtb	r3, r3
1407:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3031              		.loc 1 1407 6 view .LVU925
 3032 0018 0022     		movs	r2, #0
 3033 001a 032B     		cmp	r3, #3
1401:src/display.c **** 	unsigned int b;
 3034              		.loc 1 1401 17 view .LVU926
 3035 001c 8346     		mov	fp, r0
 3036              	.LVL332:
1402:src/display.c **** 	long long int vs = value;
 3037              		.loc 1 1402 2 is_stmt 1 view .LVU927
1403:src/display.c **** 	unsigned long long int v;
 3038              		.loc 1 1403 2 view .LVU928
1404:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3039              		.loc 1 1404 2 view .LVU929
1405:src/display.c **** 	int i, j, k;
 3040              		.loc 1 1405 2 view .LVU930
1406:src/display.c **** 	int sign = 0;
 3041              		.loc 1 1406 2 view .LVU931
1407:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3042              		.loc 1 1407 2 view .LVU932
1407:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3043              		.loc 1 1407 6 is_stmt 0 view .LVU933
 3044 001e 0492     		str	r2, [sp, #16]
1408:src/display.c **** 
 3045              		.loc 1 1408 2 is_stmt 1 view .LVU934
 3046              	.LVL333:
1410:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3047              		.loc 1 1410 2 view .LVU935
 3048 0020 00F24181 		bhi	.L286
 3049 0024 C94A     		ldr	r2, .L377+4
 3050 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3051              	.LVL334:
1418:src/display.c **** 	  IntMaxWindow = 0;
 3052              		.loc 1 1418 2 view .LVU936
1418:src/display.c **** 	  IntMaxWindow = 0;
 3053              		.loc 1 1418 5 is_stmt 0 view .LVU937
ARM GAS  /tmp/cchyQ5Gz.s 			page 129


 3054 002a 002D     		cmp	r5, #0
 3055 002c 00F04181 		beq	.L368
 3056              	.LVL335:
 3057              	.L288:
1423:src/display.c **** 	  v = extract_value(value, &sign);
 3058              		.loc 1 1423 2 is_stmt 1 view .LVU938
1423:src/display.c **** 	  v = extract_value(value, &sign);
 3059              		.loc 1 1423 24 is_stmt 0 view .LVU939
 3060 0030 0AF1FF33 		add	r3, r10, #-1
1423:src/display.c **** 	  v = extract_value(value, &sign);
 3061              		.loc 1 1423 30 view .LVU940
 3062 0034 47F67574 		movw	r4, #32629
 3063 0038 1C41     		asrs	r4, r4, r3
1423:src/display.c **** 	  v = extract_value(value, &sign);
 3064              		.loc 1 1423 5 view .LVU941
 3065 003a 14F00104 		ands	r4, r4, #1
 3066 003e 40F0F380 		bne	.L369
1440:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3067              		.loc 1 1440 4 is_stmt 1 view .LVU942
1440:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3068              		.loc 1 1440 7 is_stmt 0 view .LVU943
 3069 0042 BBF13F0F 		cmp	fp, #63
 3070 0046 17DC     		bgt	.L299
 3071              	.LBB285:
1441:src/display.c **** 	    vs &= mask;
 3072              		.loc 1 1441 6 is_stmt 1 view .LVU944
1441:src/display.c **** 	    vs &= mask;
 3073              		.loc 1 1441 38 is_stmt 0 view .LVU945
 3074 0048 0121     		movs	r1, #1
 3075 004a ABF1200C 		sub	ip, fp, #32
 3076 004e CBF12000 		rsb	r0, fp, #32
 3077 0052 21FA00F0 		lsr	r0, r1, r0
 3078 0056 01FA0CF3 		lsl	r3, r1, ip
 3079 005a 01FA0BF2 		lsl	r2, r1, fp
 3080 005e 0343     		orrs	r3, r3, r0
 3081              	.LVL336:
1442:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3082              		.loc 1 1442 6 is_stmt 1 view .LVU946
1441:src/display.c **** 	    vs &= mask;
 3083              		.loc 1 1441 26 is_stmt 0 view .LVU947
 3084 0060 12F1FF30 		adds	r0, r2, #-1
 3085 0064 43F1FF31 		adc	r1, r3, #-1
1442:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3086              		.loc 1 1442 9 view .LVU948
 3087 0068 3040     		ands	r0, r0, r6
 3088 006a 3940     		ands	r1, r1, r7
 3089              	.LVL337:
1443:src/display.c **** 	      vs |= ~mask;
 3090              		.loc 1 1443 9 view .LVU949
 3091 006c BAF10A0F 		cmp	r10, #10
1442:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3092              		.loc 1 1442 9 view .LVU950
 3093 0070 0646     		mov	r6, r0
 3094              	.LVL338:
1442:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3095              		.loc 1 1442 9 view .LVU951
 3096 0072 0F46     		mov	r7, r1
ARM GAS  /tmp/cchyQ5Gz.s 			page 130


1443:src/display.c **** 	      vs |= ~mask;
 3097              		.loc 1 1443 6 is_stmt 1 view .LVU952
1443:src/display.c **** 	      vs |= ~mask;
 3098              		.loc 1 1443 9 is_stmt 0 view .LVU953
 3099 0074 00F03D81 		beq	.L370
 3100              	.LVL339:
 3101              	.L299:
1443:src/display.c **** 	      vs |= ~mask;
 3102              		.loc 1 1443 9 view .LVU954
 3103              	.LBE285:
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3104              		.loc 1 1447 4 is_stmt 1 view .LVU955
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3105              		.loc 1 1447 8 is_stmt 0 view .LVU956
 3106 0078 B54B     		ldr	r3, .L377+8
 3107 007a 1B68     		ldr	r3, [r3]
 3108 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3109              		.loc 1 1447 7 view .LVU957
 3110 0080 9A07     		lsls	r2, r3, #30
 3111 0082 41D5     		bpl	.L330
1450:src/display.c **** 	    v = (unsigned long long int)vs;
 3112              		.loc 1 1450 11 is_stmt 1 view .LVU958
 3113              	.LBB286:
1458:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3114              		.loc 1 1458 6 view .LVU959
1459:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3115              		.loc 1 1459 6 view .LVU960
1459:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3116              		.loc 1 1459 25 is_stmt 0 view .LVU961
 3117 0084 4FEA5A02 		lsr	r2, r10, #1
 3118              	.LVL340:
1460:src/display.c **** 	    v = (unsigned long long int)vs;
 3119              		.loc 1 1460 6 is_stmt 1 view .LVU962
1460:src/display.c **** 	    v = (unsigned long long int)vs;
 3120              		.loc 1 1460 43 is_stmt 0 view .LVU963
 3121 0088 12F00A0F 		tst	r2, #10
 3122 008c 14BF     		ite	ne
 3123 008e 0123     		movne	r3, #1
 3124 0090 0023     		moveq	r3, #0
1460:src/display.c **** 	    v = (unsigned long long int)vs;
 3125              		.loc 1 1460 70 view .LVU964
 3126 0092 12F00C0F 		tst	r2, #12
 3127 0096 18BF     		it	ne
 3128 0098 43F00203 		orrne	r3, r3, #2
 3129              	.LVL341:
 3130              	.L305:
1461:src/display.c **** 
 3131              		.loc 1 1461 6 is_stmt 1 discriminator 4 view .LVU965
1463:src/display.c **** 	    for (i=0; i<n; i++) {
 3132              		.loc 1 1463 14 is_stmt 0 discriminator 4 view .LVU966
 3133 009c 0BEB0308 		add	r8, fp, r3
1463:src/display.c **** 	    for (i=0; i<n; i++) {
 3134              		.loc 1 1463 27 discriminator 4 view .LVU967
 3135 00a0 0133     		adds	r3, r3, #1
 3136              	.LVL342:
1463:src/display.c **** 	    for (i=0; i<n; i++) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 131


 3137              		.loc 1 1463 21 discriminator 4 view .LVU968
 3138 00a2 B8FBF3F8 		udiv	r8, r8, r3
1464:src/display.c **** 	      const int r = v % b;
 3139              		.loc 1 1464 6 discriminator 4 view .LVU969
 3140 00a6 B8F1000F 		cmp	r8, #0
1461:src/display.c **** 
 3141              		.loc 1 1461 8 discriminator 4 view .LVU970
 3142 00aa 3046     		mov	r0, r6
 3143 00ac 3946     		mov	r1, r7
 3144              	.LVL343:
1463:src/display.c **** 	    for (i=0; i<n; i++) {
 3145              		.loc 1 1463 6 is_stmt 1 discriminator 4 view .LVU971
1464:src/display.c **** 	      const int r = v % b;
 3146              		.loc 1 1464 6 discriminator 4 view .LVU972
1464:src/display.c **** 	      const int r = v % b;
 3147              		.loc 1 1464 16 discriminator 4 view .LVU973
1464:src/display.c **** 	      const int r = v % b;
 3148              		.loc 1 1464 6 is_stmt 0 discriminator 4 view .LVU974
 3149 00ae 40F38381 		ble	.L331
 3150 00b2 05AC     		add	r4, sp, #20
 3151 00b4 DFF8A4B2 		ldr	fp, .L377+20
 3152              	.LVL344:
1464:src/display.c **** 	      const int r = v % b;
 3153              		.loc 1 1464 6 discriminator 4 view .LVU975
 3154 00b8 08EB0406 		add	r6, r8, r4
 3155              	.LVL345:
 3156              	.L306:
 3157              	.LBB287:
1465:src/display.c **** 	      v /= b;
 3158              		.loc 1 1465 8 is_stmt 1 discriminator 3 view .LVU976
 3159 00bc 5246     		mov	r2, r10
 3160 00be 0023     		movs	r3, #0
 3161 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3162              	.LVL346:
1466:src/display.c **** 	      buf[i] = DIGITS[r];
 3163              		.loc 1 1466 8 discriminator 3 view .LVU977
1467:src/display.c **** 	    }
 3164              		.loc 1 1467 15 is_stmt 0 discriminator 3 view .LVU978
 3165 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3166 00c8 04F8013B 		strb	r3, [r4], #1
 3167              	.LVL347:
1467:src/display.c **** 	    }
 3168              		.loc 1 1467 8 is_stmt 1 discriminator 3 view .LVU979
 3169              	.LBE287:
1464:src/display.c **** 	      const int r = v % b;
 3170              		.loc 1 1464 21 discriminator 3 view .LVU980
1464:src/display.c **** 	      const int r = v % b;
 3171              		.loc 1 1464 16 discriminator 3 view .LVU981
1464:src/display.c **** 	      const int r = v % b;
 3172              		.loc 1 1464 6 is_stmt 0 discriminator 3 view .LVU982
 3173 00cc B442     		cmp	r4, r6
 3174 00ce F5D1     		bne	.L306
 3175 00d0 08F1FF31 		add	r1, r8, #-1
 3176              	.LVL348:
1464:src/display.c **** 	      const int r = v % b;
 3177              		.loc 1 1464 6 view .LVU983
 3178 00d4 4446     		mov	r4, r8
ARM GAS  /tmp/cchyQ5Gz.s 			page 132


 3179              	.LVL349:
 3180              	.L298:
1464:src/display.c **** 	      const int r = v % b;
 3181              		.loc 1 1464 6 view .LVU984
 3182              	.LBE286:
1477:src/display.c **** 	if (res) {
 3183              		.loc 1 1477 2 is_stmt 1 view .LVU985
1478:src/display.c **** 	  if (sign) *res++ = '-';
 3184              		.loc 1 1478 2 view .LVU986
1478:src/display.c **** 	  if (sign) *res++ = '-';
 3185              		.loc 1 1478 5 is_stmt 0 view .LVU987
 3186 00d6 002D     		cmp	r5, #0
 3187 00d8 3ED0     		beq	.L307
 3188              	.LVL350:
 3189              	.L371:
1479:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3190              		.loc 1 1479 4 is_stmt 1 view .LVU988
1479:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3191              		.loc 1 1479 7 is_stmt 0 view .LVU989
 3192 00da 049B     		ldr	r3, [sp, #16]
 3193 00dc 13B1     		cbz	r3, .L308
1479:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3194              		.loc 1 1479 14 is_stmt 1 discriminator 1 view .LVU990
 3195              	.LVL351:
1479:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3196              		.loc 1 1479 21 is_stmt 0 discriminator 1 view .LVU991
 3197 00de 2D23     		movs	r3, #45
 3198 00e0 05F8013B 		strb	r3, [r5], #1
 3199              	.LVL352:
 3200              	.L308:
1480:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3201              		.loc 1 1480 4 is_stmt 1 view .LVU992
1480:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3202              		.loc 1 1480 7 is_stmt 0 view .LVU993
 3203 00e4 0D2C     		cmp	r4, #13
 3204 00e6 00F3E980 		bgt	.L309
1487:src/display.c **** 	      *res++ = buf[i];
 3205              		.loc 1 1487 12 is_stmt 1 view .LVU994
 3206              	.LVL353:
1487:src/display.c **** 	      *res++ = buf[i];
 3207              		.loc 1 1487 12 is_stmt 0 view .LVU995
 3208 00ea 481C     		adds	r0, r1, #1
 3209 00ec 09D0     		beq	.L285
 3210 00ee 0131     		adds	r1, r1, #1
 3211 00f0 05AA     		add	r2, sp, #20
 3212 00f2 013D     		subs	r5, r5, #1
 3213 00f4 1144     		add	r1, r1, r2
 3214              	.LVL354:
 3215              	.L312:
1488:src/display.c **** 	  }
 3216              		.loc 1 1488 8 is_stmt 1 view .LVU996
1488:src/display.c **** 	  }
 3217              		.loc 1 1488 15 is_stmt 0 view .LVU997
 3218 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3219              	.LVL355:
1488:src/display.c **** 	  }
 3220              		.loc 1 1488 15 view .LVU998
ARM GAS  /tmp/cchyQ5Gz.s 			page 133


 3221 00fa 05F8013F 		strb	r3, [r5, #1]!
 3222              	.LVL356:
1487:src/display.c **** 	      *res++ = buf[i];
 3223              		.loc 1 1487 12 is_stmt 1 view .LVU999
1487:src/display.c **** 	      *res++ = buf[i];
 3224              		.loc 1 1487 12 is_stmt 0 view .LVU1000
 3225 00fe 9142     		cmp	r1, r2
 3226 0100 F9D1     		bne	.L312
 3227              	.LVL357:
 3228              	.L285:
1535:src/display.c **** 
 3229              		.loc 1 1535 7 view .LVU1001
 3230 0102 17B0     		add	sp, sp, #92
 3231              		.cfi_remember_state
 3232              		.cfi_def_cfa_offset 36
 3233              		@ sp needed
 3234 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3235              	.LVL358:
 3236              	.L330:
 3237              		.cfi_restore_state
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3238              		.loc 1 1447 25 discriminator 1 view .LVU1002
 3239 0108 56EA0703 		orrs	r3, r6, r7
 3240 010c 00F0C480 		beq	.L293
1450:src/display.c **** 	    v = (unsigned long long int)vs;
 3241              		.loc 1 1450 11 is_stmt 1 view .LVU1003
1451:src/display.c **** 	    for (i=0; v != 0; i++) {
 3242              		.loc 1 1451 6 view .LVU1004
 3243 0110 DFF848B2 		ldr	fp, .L377+20
 3244              	.LVL359:
1451:src/display.c **** 	    for (i=0; v != 0; i++) {
 3245              		.loc 1 1451 6 is_stmt 0 view .LVU1005
 3246 0114 CDF800A0 		str	r10, [sp]
 3247 0118 0023     		movs	r3, #0
1451:src/display.c **** 	    for (i=0; v != 0; i++) {
 3248              		.loc 1 1451 8 view .LVU1006
 3249 011a B046     		mov	r8, r6
 3250 011c D946     		mov	r9, fp
 3251 011e 3E46     		mov	r6, r7
1452:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1452 6 is_stmt 1 view .LVU1007
 3253              	.LVL360:
1452:src/display.c **** 	      const int r = v % b;
 3254              		.loc 1 1452 16 view .LVU1008
 3255 0120 9B46     		mov	fp, r3
 3256 0122 05AF     		add	r7, sp, #20
 3257              	.LVL361:
 3258              	.L304:
 3259              	.LBB288:
1453:src/display.c **** 	      v /= b;
 3260              		.loc 1 1453 8 discriminator 3 view .LVU1009
 3261 0124 4046     		mov	r0, r8
 3262 0126 3146     		mov	r1, r6
 3263 0128 5246     		mov	r2, r10
 3264 012a 5B46     		mov	r3, fp
 3265 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3266              	.LVL362:
ARM GAS  /tmp/cchyQ5Gz.s 			page 134


 3267 0130 3346     		mov	r3, r6
 3268 0132 9446     		mov	ip, r2
 3269              	.LVL363:
1454:src/display.c **** 	      buf[i] = DIGITS[r];
 3270              		.loc 1 1454 8 discriminator 3 view .LVU1010
 3271              	.LBE288:
1452:src/display.c **** 	      const int r = v % b;
 3272              		.loc 1 1452 6 is_stmt 0 discriminator 3 view .LVU1011
 3273 0134 5B45     		cmp	r3, fp
 3274 0136 4246     		mov	r2, r8
 3275              	.LVL364:
 3276              	.LBB289:
1455:src/display.c **** 	    }
 3277              		.loc 1 1455 15 discriminator 3 view .LVU1012
 3278 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3279              	.LVL365:
1455:src/display.c **** 	    }
 3280              		.loc 1 1455 15 discriminator 3 view .LVU1013
 3281 013c 07F801CB 		strb	ip, [r7], #1
 3282              	.LBE289:
1452:src/display.c **** 	      const int r = v % b;
 3283              		.loc 1 1452 6 discriminator 3 view .LVU1014
 3284 0140 08BF     		it	eq
 3285 0142 5245     		cmpeq	r2, r10
 3286              	.LBB290:
1454:src/display.c **** 	      buf[i] = DIGITS[r];
 3287              		.loc 1 1454 10 discriminator 3 view .LVU1015
 3288 0144 0E46     		mov	r6, r1
 3289              	.LVL366:
1455:src/display.c **** 	    }
 3290              		.loc 1 1455 8 is_stmt 1 discriminator 3 view .LVU1016
 3291              	.LBE290:
1452:src/display.c **** 	      const int r = v % b;
 3292              		.loc 1 1452 24 discriminator 3 view .LVU1017
 3293              	.LBB291:
1454:src/display.c **** 	      buf[i] = DIGITS[r];
 3294              		.loc 1 1454 10 is_stmt 0 discriminator 3 view .LVU1018
 3295 0146 8046     		mov	r8, r0
 3296 0148 2146     		mov	r1, r4
 3297              	.LVL367:
1454:src/display.c **** 	      buf[i] = DIGITS[r];
 3298              		.loc 1 1454 10 discriminator 3 view .LVU1019
 3299              	.LBE291:
1452:src/display.c **** 	      const int r = v % b;
 3300              		.loc 1 1452 25 discriminator 3 view .LVU1020
 3301 014a 04F10104 		add	r4, r4, #1
 3302              	.LVL368:
1452:src/display.c **** 	      const int r = v % b;
 3303              		.loc 1 1452 16 is_stmt 1 discriminator 3 view .LVU1021
1452:src/display.c **** 	      const int r = v % b;
 3304              		.loc 1 1452 6 is_stmt 0 discriminator 3 view .LVU1022
 3305 014e E9D2     		bcs	.L304
 3306 0150 DDF800A0 		ldr	r10, [sp]
 3307              	.LVL369:
1477:src/display.c **** 	if (res) {
 3308              		.loc 1 1477 2 is_stmt 1 view .LVU1023
1478:src/display.c **** 	  if (sign) *res++ = '-';
ARM GAS  /tmp/cchyQ5Gz.s 			page 135


 3309              		.loc 1 1478 2 view .LVU1024
1478:src/display.c **** 	  if (sign) *res++ = '-';
 3310              		.loc 1 1478 5 is_stmt 0 view .LVU1025
 3311 0154 002D     		cmp	r5, #0
 3312 0156 C0D1     		bne	.L371
 3313              	.LVL370:
 3314              	.L307:
 3315              	.LBB292:
1506:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3316              		.loc 1 1506 4 is_stmt 1 view .LVU1026
1506:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3317              		.loc 1 1506 33 is_stmt 0 view .LVU1027
 3318 0158 BAF1020F 		cmp	r10, #2
 3319 015c 00F0F080 		beq	.L372
 3320              	.LVL371:
1507:src/display.c **** 	    : b == 16 ? 2 : 3;
 3321              		.loc 1 1507 4 is_stmt 1 view .LVU1028
1507:src/display.c **** 	    : b == 16 ? 2 : 3;
 3322              		.loc 1 1507 30 is_stmt 0 view .LVU1029
 3323 0160 BAF1040F 		cmp	r10, #4
 3324 0164 00F01F81 		beq	.L373
1506:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3325              		.loc 1 1506 33 view .LVU1030
 3326 0168 BAF1100F 		cmp	r10, #16
 3327 016c 0CBF     		ite	eq
 3328 016e 4FF0020A 		moveq	r10, #2
 3329 0172 4FF0030A 		movne	r10, #3
 3330 0176 0C26     		movs	r6, #12
 3331              	.LVL372:
 3332              	.L314:
1509:src/display.c **** #endif
 3333              		.loc 1 1509 4 is_stmt 1 view .LVU1031
 3334 0178 0091     		str	r1, [sp]
 3335 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3336              	.LVL373:
1511:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3337              		.loc 1 1511 4 view .LVU1032
1512:src/display.c **** 	    State2.window = 0;
 3338              		.loc 1 1512 26 is_stmt 0 view .LVU1033
 3339 017e 724B     		ldr	r3, .L377
1511:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3340              		.loc 1 1511 17 view .LVU1034
 3341 0180 744A     		ldr	r2, .L377+12
1512:src/display.c **** 	    State2.window = 0;
 3342              		.loc 1 1512 26 view .LVU1035
 3343 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1511:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3344              		.loc 1 1511 27 view .LVU1036
 3345 0184 0099     		ldr	r1, [sp]
 3346 0186 91FBF6F1 		sdiv	r1, r1, r6
1512:src/display.c **** 	    State2.window = 0;
 3347              		.loc 1 1512 8 view .LVU1037
 3348 018a C3F3C207 		ubfx	r7, r3, #3, #3
1512:src/display.c **** 	    State2.window = 0;
 3349              		.loc 1 1512 7 view .LVU1038
 3350 018e B942     		cmp	r1, r7
1511:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
ARM GAS  /tmp/cchyQ5Gz.s 			page 136


 3351              		.loc 1 1511 17 view .LVU1039
 3352 0190 1160     		str	r1, [r2]
1512:src/display.c **** 	    State2.window = 0;
 3353              		.loc 1 1512 4 is_stmt 1 view .LVU1040
1512:src/display.c **** 	    State2.window = 0;
 3354              		.loc 1 1512 7 is_stmt 0 view .LVU1041
 3355 0192 C0F2F680 		blt	.L316
 3356 0196 06FB07F7 		mul	r7, r6, r7
 3357              	.L317:
1514:src/display.c **** 
 3358              		.loc 1 1514 4 is_stmt 1 view .LVU1042
1514:src/display.c **** 
 3359              		.loc 1 1514 11 is_stmt 0 view .LVU1043
 3360 019a 16AB     		add	r3, sp, #88
 3361 019c 16AA     		add	r2, sp, #88
 3362 019e 1C44     		add	r4, r4, r3
 3363              	.LVL374:
1514:src/display.c **** 
 3364              		.loc 1 1514 11 view .LVU1044
 3365 01a0 D519     		adds	r5, r2, r7
 3366 01a2 0023     		movs	r3, #0
 3367 01a4 453D     		subs	r5, r5, #69
 3368 01a6 04F8443C 		strb	r3, [r4, #-68]
1516:src/display.c **** 	  for (k = 0; k < 12; k++)
 3369              		.loc 1 1516 4 is_stmt 1 view .LVU1045
 3370              	.LVL375:
1517:src/display.c **** 	    if (buf[j + k] == '\0')
 3371              		.loc 1 1517 4 view .LVU1046
1517:src/display.c **** 	    if (buf[j + k] == '\0')
 3372              		.loc 1 1517 16 view .LVU1047
1514:src/display.c **** 
 3373              		.loc 1 1514 11 is_stmt 0 view .LVU1048
 3374 01aa 2A46     		mov	r2, r5
 3375              	.LVL376:
 3376              	.L319:
1518:src/display.c **** 	      break;
 3377              		.loc 1 1518 6 is_stmt 1 view .LVU1049
1517:src/display.c **** 	    if (buf[j + k] == '\0')
 3378              		.loc 1 1517 24 view .LVU1050
1518:src/display.c **** 	      break;
 3379              		.loc 1 1518 9 is_stmt 0 view .LVU1051
 3380 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3381 01b0 0029     		cmp	r1, #0
 3382 01b2 00F0EC80 		beq	.L318
1517:src/display.c **** 	    if (buf[j + k] == '\0')
 3383              		.loc 1 1517 25 discriminator 2 view .LVU1052
 3384 01b6 0133     		adds	r3, r3, #1
 3385              	.LVL377:
1517:src/display.c **** 	    if (buf[j + k] == '\0')
 3386              		.loc 1 1517 16 is_stmt 1 discriminator 2 view .LVU1053
1517:src/display.c **** 	    if (buf[j + k] == '\0')
 3387              		.loc 1 1517 4 is_stmt 0 discriminator 2 view .LVU1054
 3388 01b8 0C2B     		cmp	r3, #12
 3389 01ba F7D1     		bne	.L319
1520:src/display.c **** 	    int ch = buf[j++];
 3390              		.loc 1 1520 4 view .LVU1055
 3391 01bc 4FF00B08 		mov	r8, #11
ARM GAS  /tmp/cchyQ5Gz.s 			page 137


 3392              	.LVL378:
 3393              	.L320:
1520:src/display.c **** 	    int ch = buf[j++];
 3394              		.loc 1 1520 4 view .LVU1056
 3395 01c0 0137     		adds	r7, r7, #1
 3396 01c2 4744     		add	r7, r7, r8
 3397 01c4 4446     		mov	r4, r8
 3398 01c6 4FF0630B 		mov	fp, #99
 3399 01ca 09E0     		b	.L325
 3400              	.LVL379:
 3401              	.L374:
 3402              	.LBB293:
1526:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3403              		.loc 1 1526 8 view .LVU1057
 3404 01cc 624B     		ldr	r3, .L377+16
 3405 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3406              	.LVL380:
 3407              	.LBB294:
 3408              	.LBI294:
 365:src/display.c ****   if (sep == SEP_NONE)
 3409              		.loc 1 365 14 is_stmt 1 view .LVU1058
 3410              	.LBB295:
 366:src/display.c ****     return res;
 3411              		.loc 1 366 3 view .LVU1059
 366:src/display.c ****     return res;
 3412              		.loc 1 366 6 is_stmt 0 view .LVU1060
 3413 01d0 09B1     		cbz	r1, .L323
 366:src/display.c ****     return res;
 3414              		.loc 1 366 6 view .LVU1061
 3415 01d2 FFF7FEFF 		bl	set_separator.part.0
 3416              	.LVL381:
 3417              	.L323:
 366:src/display.c ****     return res;
 3418              		.loc 1 366 6 view .LVU1062
 3419              	.LBE295:
 3420              	.LBE294:
1527:src/display.c **** 	  }
 3421              		.loc 1 1527 6 is_stmt 1 discriminator 2 view .LVU1063
 3422              	.LBE293:
1520:src/display.c **** 	    int ch = buf[j++];
 3423              		.loc 1 1520 4 is_stmt 0 discriminator 2 view .LVU1064
 3424 01d6 013C     		subs	r4, r4, #1
1520:src/display.c **** 	    int ch = buf[j++];
 3425              		.loc 1 1520 4 discriminator 2 view .LVU1065
 3426 01d8 621C     		adds	r2, r4, #1
 3427              	.LBB298:
1527:src/display.c **** 	  }
 3428              		.loc 1 1527 10 discriminator 2 view .LVU1066
 3429 01da ABF1090B 		sub	fp, fp, #9
 3430              	.LVL382:
1527:src/display.c **** 	  }
 3431              		.loc 1 1527 10 discriminator 2 view .LVU1067
 3432              	.LBE298:
1520:src/display.c **** 	    int ch = buf[j++];
 3433              		.loc 1 1520 24 is_stmt 1 discriminator 2 view .LVU1068
1520:src/display.c **** 	    int ch = buf[j++];
 3434              		.loc 1 1520 14 discriminator 2 view .LVU1069
ARM GAS  /tmp/cchyQ5Gz.s 			page 138


1520:src/display.c **** 	    int ch = buf[j++];
 3435              		.loc 1 1520 4 is_stmt 0 discriminator 2 view .LVU1070
 3436 01de 16D0     		beq	.L329
 3437              	.LVL383:
 3438              	.L325:
 3439              	.LBB299:
1521:src/display.c **** 	    if (i >= shift)
 3440              		.loc 1 1521 6 is_stmt 1 view .LVU1071
1523:src/display.c **** 	    set_dig(dig, ch);
 3441              		.loc 1 1523 8 view .LVU1072
1521:src/display.c **** 	    if (i >= shift)
 3442              		.loc 1 1521 10 is_stmt 0 view .LVU1073
 3443 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1522:src/display.c **** 	      ch -= 030;
 3444              		.loc 1 1522 9 view .LVU1074
 3445 01e4 A8EB0402 		sub	r2, r8, r4
 3446 01e8 B242     		cmp	r2, r6
 3447 01ea A7EB0409 		sub	r9, r7, r4
 3448              	.LVL384:
1522:src/display.c **** 	      ch -= 030;
 3449              		.loc 1 1522 6 is_stmt 1 view .LVU1075
1524:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3450              		.loc 1 1524 6 is_stmt 0 view .LVU1076
 3451 01ee 5846     		mov	r0, fp
1523:src/display.c **** 	    set_dig(dig, ch);
 3452              		.loc 1 1523 11 view .LVU1077
 3453 01f0 A8BF     		it	ge
 3454 01f2 1839     		subge	r1, r1, #24
 3455              	.LVL385:
1524:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3456              		.loc 1 1524 6 is_stmt 1 view .LVU1078
 3457 01f4 FFF7FEFF 		bl	set_dig
 3458              	.LVL386:
1525:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3459              		.loc 1 1525 6 view .LVU1079
1525:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3460              		.loc 1 1525 13 is_stmt 0 view .LVU1080
 3461 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3462 01fc 0AFB1393 		mls	r3, r10, r3, r9
1525:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3463              		.loc 1 1525 9 view .LVU1081
 3464 0200 002B     		cmp	r3, #0
 3465 0202 E8D1     		bne	.L323
1526:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3466              		.loc 1 1526 8 is_stmt 1 discriminator 1 view .LVU1082
 3467              	.LBB297:
 3468              	.LBB296:
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3469              		.loc 1 368 3 discriminator 1 view .LVU1083
 3470 0204 5846     		mov	r0, fp
 3471              	.LBE296:
 3472              	.LBE297:
1525:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3473              		.loc 1 1525 27 is_stmt 0 discriminator 1 view .LVU1084
 3474 0206 002C     		cmp	r4, #0
 3475 0208 E0D1     		bne	.L374
1527:src/display.c **** 	  }
ARM GAS  /tmp/cchyQ5Gz.s 			page 139


 3476              		.loc 1 1527 6 is_stmt 1 view .LVU1085
1527:src/display.c **** 	  }
 3477              		.loc 1 1527 10 is_stmt 0 view .LVU1086
 3478 020a ABF1090B 		sub	fp, fp, #9
 3479              	.LVL387:
1527:src/display.c **** 	  }
 3480              		.loc 1 1527 10 view .LVU1087
 3481              	.LBE299:
1520:src/display.c **** 	    int ch = buf[j++];
 3482              		.loc 1 1520 24 is_stmt 1 view .LVU1088
1520:src/display.c **** 	    int ch = buf[j++];
 3483              		.loc 1 1520 14 view .LVU1089
 3484              	.L329:
1529:src/display.c **** 	    if (dig >= 0)
 3485              		.loc 1 1529 4 view .LVU1090
1529:src/display.c **** 	    if (dig >= 0)
 3486              		.loc 1 1529 7 is_stmt 0 view .LVU1091
 3487 020e 049B     		ldr	r3, [sp, #16]
 3488 0210 002B     		cmp	r3, #0
 3489 0212 3FF476AF 		beq	.L285
1530:src/display.c **** 	      set_dig(dig, '-');
 3490              		.loc 1 1530 6 is_stmt 1 view .LVU1092
1530:src/display.c **** 	      set_dig(dig, '-');
 3491              		.loc 1 1530 9 is_stmt 0 view .LVU1093
 3492 0216 BBF1000F 		cmp	fp, #0
 3493 021a C0F2C680 		blt	.L375
 3494              	.LVL388:
 3495              	.L328:
1531:src/display.c **** 	    else	SET_MANT_SIGN;
 3496              		.loc 1 1531 8 is_stmt 1 view .LVU1094
 3497 021e 5846     		mov	r0, fp
 3498 0220 2D21     		movs	r1, #45
 3499 0222 FFF7FEFF 		bl	set_dig
 3500              	.LVL389:
 3501 0226 6CE7     		b	.L285
 3502              	.LVL390:
 3503              	.L369:
1531:src/display.c **** 	    else	SET_MANT_SIGN;
 3504              		.loc 1 1531 8 is_stmt 0 view .LVU1095
 3505              	.LBE292:
1424:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3506              		.loc 1 1424 4 is_stmt 1 view .LVU1096
1424:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3507              		.loc 1 1424 8 is_stmt 0 view .LVU1097
 3508 0228 04AA     		add	r2, sp, #16
 3509 022a 3046     		mov	r0, r6
 3510 022c 3946     		mov	r1, r7
 3511 022e FFF7FEFF 		bl	extract_value
 3512              	.LVL391:
 3513 0232 8046     		mov	r8, r0
 3514 0234 8946     		mov	r9, r1
 3515              	.LVL392:
1425:src/display.c **** 	    v = value;
 3516              		.loc 1 1425 4 is_stmt 1 view .LVU1098
1425:src/display.c **** 	    v = value;
 3517              		.loc 1 1425 8 is_stmt 0 view .LVU1099
 3518 0236 FFF7FEFF 		bl	int_mode
ARM GAS  /tmp/cchyQ5Gz.s 			page 140


 3519              	.LVL393:
1425:src/display.c **** 	    v = value;
 3520              		.loc 1 1425 7 view .LVU1100
 3521 023a 38BB     		cbnz	r0, .L290
1425:src/display.c **** 	    v = value;
 3522              		.loc 1 1425 33 discriminator 1 view .LVU1101
 3523 023c 049B     		ldr	r3, [sp, #16]
 3524 023e 012B     		cmp	r3, #1
 3525 0240 24D1     		bne	.L290
1425:src/display.c **** 	    v = value;
 3526              		.loc 1 1425 46 discriminator 2 view .LVU1102
 3527 0242 58EA0903 		orrs	r3, r8, r9
 3528 0246 00F08B80 		beq	.L376
 3529              	.LVL394:
 3530              	.L291:
1425:src/display.c **** 	    v = value;
 3531              		.loc 1 1425 46 discriminator 2 view .LVU1103
 3532 024a DFF810B1 		ldr	fp, .L377+20
 3533              	.LVL395:
1400:src/display.c **** 	const int ws = word_size();
 3534              		.loc 1 1400 67 discriminator 3 view .LVU1104
 3535 024e 0395     		str	r5, [sp, #12]
 3536 0250 05AB     		add	r3, sp, #20
 3537 0252 5D46     		mov	r5, fp
 3538              	.LVL396:
1400:src/display.c **** 	const int ws = word_size();
 3539              		.loc 1 1400 67 discriminator 3 view .LVU1105
 3540 0254 5646     		mov	r6, r10
 3541 0256 0027     		movs	r7, #0
 3542 0258 0024     		movs	r4, #0
 3543 025a 9B46     		mov	fp, r3
 3544              	.LVL397:
 3545              	.L297:
 3546              	.LBB302:
1434:src/display.c **** 	      v /= b;
 3547              		.loc 1 1434 8 is_stmt 1 discriminator 3 view .LVU1106
 3548 025c 4046     		mov	r0, r8
 3549 025e 4946     		mov	r1, r9
 3550 0260 3246     		mov	r2, r6
 3551 0262 3B46     		mov	r3, r7
 3552 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3553              	.LVL398:
1435:src/display.c **** 	      buf[i] = DIGITS[r];
 3554              		.loc 1 1435 8 discriminator 3 view .LVU1107
 3555 0268 CDE90089 		strd	r8, [sp]
1436:src/display.c **** 	    }
 3556              		.loc 1 1436 15 is_stmt 0 discriminator 3 view .LVU1108
 3557 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3558 026e 0BF8013B 		strb	r3, [fp], #1
 3559              	.LBE302:
1433:src/display.c **** 	      const int r = v % b;
 3560              		.loc 1 1433 6 discriminator 3 view .LVU1109
 3561 0272 DDE90023 		ldrd	r2, [sp]
 3562              	.LVL399:
1433:src/display.c **** 	      const int r = v % b;
 3563              		.loc 1 1433 6 discriminator 3 view .LVU1110
 3564 0276 BB42     		cmp	r3, r7
ARM GAS  /tmp/cchyQ5Gz.s 			page 141


 3565 0278 08BF     		it	eq
 3566 027a B242     		cmpeq	r2, r6
 3567              	.LBB303:
1435:src/display.c **** 	      buf[i] = DIGITS[r];
 3568              		.loc 1 1435 10 discriminator 3 view .LVU1111
 3569 027c 8946     		mov	r9, r1
 3570              	.LVL400:
1436:src/display.c **** 	    }
 3571              		.loc 1 1436 8 is_stmt 1 discriminator 3 view .LVU1112
 3572              	.LBE303:
1433:src/display.c **** 	      const int r = v % b;
 3573              		.loc 1 1433 24 discriminator 3 view .LVU1113
 3574              	.LBB304:
1435:src/display.c **** 	      buf[i] = DIGITS[r];
 3575              		.loc 1 1435 10 is_stmt 0 discriminator 3 view .LVU1114
 3576 027e 8046     		mov	r8, r0
 3577 0280 2146     		mov	r1, r4
 3578              	.LVL401:
1435:src/display.c **** 	      buf[i] = DIGITS[r];
 3579              		.loc 1 1435 10 discriminator 3 view .LVU1115
 3580              	.LBE304:
1433:src/display.c **** 	      const int r = v % b;
 3581              		.loc 1 1433 25 discriminator 3 view .LVU1116
 3582 0282 04F10104 		add	r4, r4, #1
 3583              	.LVL402:
1433:src/display.c **** 	      const int r = v % b;
 3584              		.loc 1 1433 16 is_stmt 1 discriminator 3 view .LVU1117
1433:src/display.c **** 	      const int r = v % b;
 3585              		.loc 1 1433 6 is_stmt 0 discriminator 3 view .LVU1118
 3586 0286 E9D2     		bcs	.L297
 3587 0288 039D     		ldr	r5, [sp, #12]
 3588 028a 24E7     		b	.L298
 3589              	.LVL403:
 3590              	.L290:
1427:src/display.c **** 	    if (sign)
 3591              		.loc 1 1427 4 is_stmt 1 view .LVU1119
1427:src/display.c **** 	    if (sign)
 3592              		.loc 1 1427 7 is_stmt 0 view .LVU1120
 3593 028c 58EA0903 		orrs	r3, r8, r9
 3594 0290 DBD1     		bne	.L291
1428:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3595              		.loc 1 1428 6 is_stmt 1 view .LVU1121
1428:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3596              		.loc 1 1428 9 is_stmt 0 view .LVU1122
 3597 0292 049B     		ldr	r3, [sp, #16]
 3598 0294 002B     		cmp	r3, #0
 3599 0296 69D1     		bne	.L292
 3600              	.LVL404:
 3601              	.L293:
1430:src/display.c **** 	    return;
 3602              		.loc 1 1430 6 is_stmt 1 view .LVU1123
 3603              	.LBB305:
 3604              	.LBI305:
 405:src/display.c ****   if (res) *res++ = ch;
 3605              		.loc 1 405 14 view .LVU1124
 3606              	.LBB306:
 406:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/cchyQ5Gz.s 			page 142


 3607              		.loc 1 406 3 view .LVU1125
 406:src/display.c ****   else	set_dig(base, ch);
 3608              		.loc 1 406 6 is_stmt 0 view .LVU1126
 3609 0298 002D     		cmp	r5, #0
 3610 029a 6DD0     		beq	.L295
 3611              	.LVL405:
 3612              	.L294:
 406:src/display.c ****   else	set_dig(base, ch);
 3613              		.loc 1 406 12 is_stmt 1 view .LVU1127
 406:src/display.c ****   else	set_dig(base, ch);
 3614              		.loc 1 406 19 is_stmt 0 view .LVU1128
 3615 029c 3023     		movs	r3, #48
 3616 029e 2B70     		strb	r3, [r5]
 3617              	.LBE306:
 3618              	.LBE305:
1535:src/display.c **** 
 3619              		.loc 1 1535 7 view .LVU1129
 3620 02a0 17B0     		add	sp, sp, #92
 3621              		.cfi_remember_state
 3622              		.cfi_def_cfa_offset 36
 3623              		@ sp needed
 3624 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3625              	.LVL406:
 3626              	.L286:
 3627              		.cfi_restore_state
1415:src/display.c **** 	}
 3628              		.loc 1 1415 11 is_stmt 1 view .LVU1130
1415:src/display.c **** 	}
 3629              		.loc 1 1415 15 is_stmt 0 view .LVU1131
 3630 02a6 FFF7FEFF 		bl	int_base
 3631              	.LVL407:
1415:src/display.c **** 	}
 3632              		.loc 1 1415 15 view .LVU1132
 3633 02aa 8246     		mov	r10, r0
 3634              	.LVL408:
1415:src/display.c **** 	}
 3635              		.loc 1 1415 27 is_stmt 1 view .LVU1133
1418:src/display.c **** 	  IntMaxWindow = 0;
 3636              		.loc 1 1418 2 view .LVU1134
1418:src/display.c **** 	  IntMaxWindow = 0;
 3637              		.loc 1 1418 5 is_stmt 0 view .LVU1135
 3638 02ac 002D     		cmp	r5, #0
 3639 02ae 7FF4BFAE 		bne	.L288
 3640              	.LVL409:
 3641              	.L368:
1419:src/display.c **** 	  carry_overflow();
 3642              		.loc 1 1419 4 is_stmt 1 view .LVU1136
1419:src/display.c **** 	  carry_overflow();
 3643              		.loc 1 1419 17 is_stmt 0 view .LVU1137
 3644 02b2 284B     		ldr	r3, .L377+12
 3645 02b4 1D60     		str	r5, [r3]
1420:src/display.c **** 	}
 3646              		.loc 1 1420 4 is_stmt 1 view .LVU1138
 3647 02b6 FFF7FEFF 		bl	carry_overflow
 3648              	.LVL410:
 3649 02ba B9E6     		b	.L288
 3650              	.LVL411:
ARM GAS  /tmp/cchyQ5Gz.s 			page 143


 3651              	.L309:
1481:src/display.c **** 	      *res++ = buf[i];
 3652              		.loc 1 1481 12 view .LVU1139
1481:src/display.c **** 	      *res++ = buf[i];
 3653              		.loc 1 1481 12 is_stmt 0 view .LVU1140
 3654 02bc 05AB     		add	r3, sp, #20
 3655 02be 5818     		adds	r0, r3, r1
1481:src/display.c **** 	      *res++ = buf[i];
 3656              		.loc 1 1481 24 view .LVU1141
 3657 02c0 A4F10D06 		sub	r6, r4, #13
 3658 02c4 6A1E     		subs	r2, r5, #1
 3659              	.LVL412:
 3660              	.L311:
1482:src/display.c **** 	    *res++ = '.';
 3661              		.loc 1 1482 8 is_stmt 1 view .LVU1142
1482:src/display.c **** 	    *res++ = '.';
 3662              		.loc 1 1482 20 is_stmt 0 view .LVU1143
 3663 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3664              	.LVL413:
1482:src/display.c **** 	    *res++ = '.';
 3665              		.loc 1 1482 15 view .LVU1144
 3666 02ca 02F8013F 		strb	r3, [r2, #1]!
 3667              	.LVL414:
1481:src/display.c **** 	      *res++ = buf[i];
 3668              		.loc 1 1481 12 is_stmt 1 view .LVU1145
1481:src/display.c **** 	      *res++ = buf[i];
 3669              		.loc 1 1481 12 is_stmt 0 view .LVU1146
 3670 02ce D343     		mvns	r3, r2
 3671 02d0 0B44     		add	r3, r3, r1
 3672 02d2 2B44     		add	r3, r3, r5
 3673 02d4 9E42     		cmp	r6, r3
 3674 02d6 F6DD     		ble	.L311
 3675 02d8 01F10E03 		add	r3, r1, #14
 3676 02dc 1C1B     		subs	r4, r3, r4
 3677              	.LVL415:
1481:src/display.c **** 	      *res++ = buf[i];
 3678              		.loc 1 1481 12 view .LVU1147
 3679 02de 8E42     		cmp	r6, r1
 3680 02e0 C8BF     		it	gt
 3681 02e2 0124     		movgt	r4, #1
 3682 02e4 2A19     		adds	r2, r5, r4
 3683              	.LVL416:
1483:src/display.c **** 	    *res++ = '.';
 3684              		.loc 1 1483 6 is_stmt 1 view .LVU1148
1483:src/display.c **** 	    *res++ = '.';
 3685              		.loc 1 1483 13 is_stmt 0 view .LVU1149
 3686 02e6 2E23     		movs	r3, #46
 3687 02e8 2B55     		strb	r3, [r5, r4]
1484:src/display.c **** 	  }
 3688              		.loc 1 1484 6 is_stmt 1 view .LVU1150
 3689              	.LVL417:
1484:src/display.c **** 	  }
 3690              		.loc 1 1484 13 is_stmt 0 view .LVU1151
 3691 02ea 5370     		strb	r3, [r2, #1]
1535:src/display.c **** 
 3692              		.loc 1 1535 7 view .LVU1152
 3693 02ec 17B0     		add	sp, sp, #92
ARM GAS  /tmp/cchyQ5Gz.s 			page 144


 3694              		.cfi_remember_state
 3695              		.cfi_def_cfa_offset 36
 3696              		@ sp needed
 3697 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3698              	.LVL418:
 3699              	.L370:
 3700              		.cfi_restore_state
 3701              	.LBB308:
1443:src/display.c **** 	      vs |= ~mask;
 3702              		.loc 1 1443 38 discriminator 1 view .LVU1153
 3703 02f2 0BF1FF31 		add	r1, fp, #-1
1443:src/display.c **** 	      vs |= ~mask;
 3704              		.loc 1 1443 18 discriminator 1 view .LVU1154
 3705 02f6 CBF1210C 		rsb	ip, fp, #33
 3706 02fa C840     		lsrs	r0, r0, r1
 3707 02fc 07FA0CFC 		lsl	ip, r7, ip
 3708 0300 2039     		subs	r1, r1, #32
 3709 0302 40EA0C00 		orr	r0, r0, ip
 3710 0306 5CBF     		itt	pl
 3711 0308 47FA01F1 		asrpl	r1, r7, r1
 3712 030c 0843     		orrpl	r0, r0, r1
 3713 030e 00F00108 		and	r8, r0, #1
 3714 0312 4FF00009 		mov	r9, #0
 3715 0316 58EA0901 		orrs	r1, r8, r9
 3716 031a 08D0     		beq	.L300
1444:src/display.c **** 	  }
 3717              		.loc 1 1444 8 is_stmt 1 view .LVU1155
1444:src/display.c **** 	  }
 3718              		.loc 1 1444 11 is_stmt 0 view .LVU1156
 3719 031c 5042     		rsbs	r0, r2, #0
 3720 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3721 0322 40EA0602 		orr	r2, r0, r6
 3722              	.LVL419:
1444:src/display.c **** 	  }
 3723              		.loc 1 1444 11 view .LVU1157
 3724 0326 41EA0703 		orr	r3, r1, r7
 3725              	.LVL420:
1444:src/display.c **** 	  }
 3726              		.loc 1 1444 11 view .LVU1158
 3727 032a 1646     		mov	r6, r2
 3728              	.LVL421:
1444:src/display.c **** 	  }
 3729              		.loc 1 1444 11 view .LVU1159
 3730 032c 1F46     		mov	r7, r3
 3731              	.L300:
1444:src/display.c **** 	  }
 3732              		.loc 1 1444 11 view .LVU1160
 3733              	.LBE308:
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3734              		.loc 1 1447 4 is_stmt 1 view .LVU1161
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3735              		.loc 1 1447 8 is_stmt 0 view .LVU1162
 3736 032e 084B     		ldr	r3, .L377+8
 3737 0330 1B68     		ldr	r3, [r3]
 3738 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1447:src/display.c **** 	    set_dig_s(dig, '0', res);
 3739              		.loc 1 1447 7 view .LVU1163
ARM GAS  /tmp/cchyQ5Gz.s 			page 145


 3740 0336 9B07     		lsls	r3, r3, #30
 3741 0338 7FF5E6AE 		bpl	.L330
 3742 033c 0223     		movs	r3, #2
 3743 033e ADE6     		b	.L305
 3744              	.LVL422:
 3745              	.L372:
 3746              	.LBB309:
1506:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3747              		.loc 1 1506 33 view .LVU1164
 3748 0340 0826     		movs	r6, #8
1508:src/display.c **** 	  set_separator_decimal_modes();
 3749              		.loc 1 1508 6 view .LVU1165
 3750 0342 4FF0040A 		mov	r10, #4
 3751 0346 17E7     		b	.L314
 3752              	.L378:
 3753              		.align	2
 3754              	.L377:
 3755 0348 00000000 		.word	StateWhileOn
 3756 034c 00000000 		.word	CSWTCH.328
 3757 0350 00000000 		.word	main_ram
 3758 0354 00000000 		.word	IntMaxWindow
 3759 0358 00000000 		.word	.LANCHOR0
 3760 035c 00000000 		.word	.LANCHOR12
 3761              	.LVL423:
 3762              	.L376:
1508:src/display.c **** 	  set_separator_decimal_modes();
 3763              		.loc 1 1508 6 view .LVU1166
 3764              	.LBE309:
1426:src/display.c **** 	  if (v == 0) {
 3765              		.loc 1 1426 6 is_stmt 1 view .LVU1167
1426:src/display.c **** 	  if (v == 0) {
 3766              		.loc 1 1426 8 is_stmt 0 view .LVU1168
 3767 0360 B046     		mov	r8, r6
 3768              	.LVL424:
1426:src/display.c **** 	  if (v == 0) {
 3769              		.loc 1 1426 8 view .LVU1169
 3770 0362 B946     		mov	r9, r7
 3771              	.LVL425:
1427:src/display.c **** 	    if (sign)
 3772              		.loc 1 1427 4 is_stmt 1 view .LVU1170
1427:src/display.c **** 	    if (sign)
 3773              		.loc 1 1427 7 is_stmt 0 view .LVU1171
 3774 0364 58EA0903 		orrs	r3, r8, r9
 3775 0368 7FF46FAF 		bne	.L291
 3776              	.LVL426:
 3777              	.L292:
1429:src/display.c **** 	    set_dig_s(dig, '0', res);
 3778              		.loc 1 1429 8 is_stmt 1 view .LVU1172
 3779              	.LBB310:
 3780              	.LBI310:
 405:src/display.c ****   if (res) *res++ = ch;
 3781              		.loc 1 405 14 view .LVU1173
 3782              	.LBB311:
 406:src/display.c ****   else	set_dig(base, ch);
 3783              		.loc 1 406 3 view .LVU1174
 406:src/display.c ****   else	set_dig(base, ch);
 3784              		.loc 1 406 6 is_stmt 0 view .LVU1175
ARM GAS  /tmp/cchyQ5Gz.s 			page 146


 3785 036c 002D     		cmp	r5, #0
 3786 036e 95D1     		bne	.L294
 407:src/display.c ****   return res;
 3787              		.loc 1 407 8 is_stmt 1 view .LVU1176
 3788 0370 2D21     		movs	r1, #45
 3789 0372 5A20     		movs	r0, #90
 3790 0374 FFF7FEFF 		bl	set_dig
 3791              	.LVL427:
 407:src/display.c ****   return res;
 3792              		.loc 1 407 8 is_stmt 0 view .LVU1177
 3793              	.LBE311:
 3794              	.LBE310:
1430:src/display.c **** 	    return;
 3795              		.loc 1 1430 6 is_stmt 1 view .LVU1178
 3796              	.LBB312:
 405:src/display.c ****   if (res) *res++ = ch;
 3797              		.loc 1 405 14 view .LVU1179
 3798              	.LBB307:
 406:src/display.c ****   else	set_dig(base, ch);
 3799              		.loc 1 406 3 view .LVU1180
 3800              	.L295:
 407:src/display.c ****   return res;
 3801              		.loc 1 407 8 view .LVU1181
 3802 0378 3021     		movs	r1, #48
 3803 037a 6320     		movs	r0, #99
 3804 037c FFF7FEFF 		bl	set_dig
 3805              	.LVL428:
 3806 0380 BFE6     		b	.L285
 3807              	.LVL429:
 3808              	.L316:
 407:src/display.c ****   return res;
 3809              		.loc 1 407 8 is_stmt 0 view .LVU1182
 3810              	.LBE307:
 3811              	.LBE312:
 3812              	.LBB313:
1513:src/display.c **** 	  buf[i] = '\0';
 3813              		.loc 1 1513 6 is_stmt 1 view .LVU1183
1513:src/display.c **** 	  buf[i] = '\0';
 3814              		.loc 1 1513 20 is_stmt 0 view .LVU1184
 3815 0382 0F4A     		ldr	r2, .L379
 3816 0384 6FF3C503 		bfc	r3, #3, #3
 3817 0388 1375     		strb	r3, [r2, #20]
 3818 038a 0027     		movs	r7, #0
 3819 038c 05E7     		b	.L317
 3820              	.LVL430:
 3821              	.L318:
1520:src/display.c **** 	    int ch = buf[j++];
 3822              		.loc 1 1520 14 is_stmt 1 discriminator 1 view .LVU1185
1520:src/display.c **** 	    int ch = buf[j++];
 3823              		.loc 1 1520 4 is_stmt 0 discriminator 1 view .LVU1186
 3824 038e 03F1FF38 		add	r8, r3, #-1
 3825              	.LVL431:
1520:src/display.c **** 	    int ch = buf[j++];
 3826              		.loc 1 1520 4 discriminator 1 view .LVU1187
 3827 0392 002B     		cmp	r3, #0
 3828 0394 7FF414AF 		bne	.L320
1529:src/display.c **** 	    if (dig >= 0)
ARM GAS  /tmp/cchyQ5Gz.s 			page 147


 3829              		.loc 1 1529 4 is_stmt 1 view .LVU1188
1529:src/display.c **** 	    if (dig >= 0)
 3830              		.loc 1 1529 7 is_stmt 0 view .LVU1189
 3831 0398 049B     		ldr	r3, [sp, #16]
 3832 039a 002B     		cmp	r3, #0
 3833 039c 3FF4B1AE 		beq	.L285
 3834 03a0 4FF0630B 		mov	fp, #99
 3835 03a4 3BE7     		b	.L328
 3836              	.LVL432:
 3837              	.L373:
1506:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3838              		.loc 1 1506 33 view .LVU1190
 3839 03a6 0C26     		movs	r6, #12
 3840 03a8 E6E6     		b	.L314
 3841              	.LVL433:
 3842              	.L375:
1532:src/display.c **** 	  }
 3843              		.loc 1 1532 11 is_stmt 1 view .LVU1191
 3844              	.LBB300:
 3845              	.LBI300:
 294:src/display.c **** {
 3846              		.loc 1 294 13 view .LVU1192
 3847              	.LBB301:
 296:src/display.c ****   set_dot(MANT_SIGN);
 3848              		.loc 1 296 3 view .LVU1193
 296:src/display.c ****   set_dot(MANT_SIGN);
 3849              		.loc 1 296 25 is_stmt 0 view .LVU1194
 3850 03aa 064B     		ldr	r3, .L379+4
 3851 03ac 2D22     		movs	r2, #45
 297:src/display.c **** }
 3852              		.loc 1 297 3 view .LVU1195
 3853 03ae 8120     		movs	r0, #129
 296:src/display.c ****   set_dot(MANT_SIGN);
 3854              		.loc 1 296 25 view .LVU1196
 3855 03b0 1A70     		strb	r2, [r3]
 297:src/display.c **** }
 3856              		.loc 1 297 3 is_stmt 1 view .LVU1197
 3857 03b2 FFF7FEFF 		bl	set_dot
 3858              	.LVL434:
 298:src/display.c **** 
 3859              		.loc 1 298 1 is_stmt 0 view .LVU1198
 3860 03b6 A4E6     		b	.L285
 3861              	.LVL435:
 3862              	.L331:
 298:src/display.c **** 
 3863              		.loc 1 298 1 view .LVU1199
 3864              	.LBE301:
 3865              	.LBE300:
 3866              	.LBE313:
 3867              	.LBB314:
1464:src/display.c **** 	      const int r = v % b;
 3868              		.loc 1 1464 6 view .LVU1200
 3869 03b8 4FF0FF31 		mov	r1, #-1
 3870 03bc 8BE6     		b	.L298
 3871              	.L380:
 3872 03be 00BF     		.align	2
 3873              	.L379:
ARM GAS  /tmp/cchyQ5Gz.s 			page 148


 3874 03c0 00000000 		.word	StateWhileOn
 3875 03c4 00000000 		.word	LastDisplayedNumber
 3876              	.LBE314:
 3877              		.cfi_endproc
 3878              	.LFE18:
 3880              		.section	.text.set_annunciators,"ax",%progbits
 3881              		.align	1
 3882              		.p2align 2,,3
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv4-sp-d16
 3888              	set_annunciators:
 3889              	.LFB32:
2535:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3890              		.loc 1 2535 7 is_stmt 1 view -0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 0
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
2536:src/display.c **** 
 3894              		.loc 1 2536 2 view .LVU1202
2535:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3895              		.loc 1 2535 7 is_stmt 0 view .LVU1203
 3896 0000 70B5     		push	{r4, r5, r6, lr}
 3897              		.cfi_def_cfa_offset 16
 3898              		.cfi_offset 4, -16
 3899              		.cfi_offset 5, -12
 3900              		.cfi_offset 6, -8
 3901              		.cfi_offset 14, -4
2545:src/display.c **** #endif
 3902              		.loc 1 2545 11 view .LVU1204
 3903 0002 344E     		ldr	r6, .L407
2536:src/display.c **** 
 3904              		.loc 1 2536 29 view .LVU1205
 3905 0004 FFF7FEFF 		bl	get_trig_mode
 3906              	.LVL436:
2545:src/display.c **** #endif
 3907              		.loc 1 2545 11 view .LVU1206
 3908 0008 3368     		ldr	r3, [r6]
2545:src/display.c **** #endif
 3909              		.loc 1 2545 2 view .LVU1207
 3910 000a B3F8E037 		ldrh	r3, [r3, #2016]
 3911 000e 012B     		cmp	r3, #1
2536:src/display.c **** 
 3912              		.loc 1 2536 29 view .LVU1208
 3913 0010 0446     		mov	r4, r0
 3914              	.LVL437:
2545:src/display.c **** #endif
 3915              		.loc 1 2545 2 is_stmt 1 view .LVU1209
 3916              	.LBB333:
 3917              	.LBB334:
 338:src/display.c ****   else	clr_dot(n);
 3918              		.loc 1 338 11 is_stmt 0 view .LVU1210
 3919 0012 4FF08800 		mov	r0, #136
 3920              	.LBE334:
 3921              	.LBE333:
2545:src/display.c **** #endif
ARM GAS  /tmp/cchyQ5Gz.s 			page 149


 3922              		.loc 1 2545 2 view .LVU1211
 3923 0016 03D8     		bhi	.L382
2545:src/display.c **** #endif
 3924              		.loc 1 2545 30 discriminator 1 view .LVU1212
 3925 0018 2F4B     		ldr	r3, .L407+4
2545:src/display.c **** #endif
 3926              		.loc 1 2545 2 discriminator 1 view .LVU1213
 3927 001a 1B68     		ldr	r3, [r3]
 3928 001c 002B     		cmp	r3, #0
 3929 001e 56D0     		beq	.L403
 3930              	.L382:
 3931              	.LVL438:
 3932              	.LBB337:
 3933              	.LBI333:
 337:src/display.c ****   if (on)	set_dot(n);
 3934              		.loc 1 337 6 is_stmt 1 view .LVU1214
 3935              	.LBB335:
 338:src/display.c ****   else	clr_dot(n);
 3936              		.loc 1 338 3 view .LVU1215
 339:src/display.c **** }
 3937              		.loc 1 339 8 view .LVU1216
 3938 0020 FFF7FEFF 		bl	clr_dot
 3939              	.LVL439:
 3940              	.L383:
 339:src/display.c **** }
 3941              		.loc 1 339 8 is_stmt 0 view .LVU1217
 3942              	.LBE335:
 3943              	.LBE337:
2547:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3944              		.loc 1 2547 2 is_stmt 1 view .LVU1218
2547:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3945              		.loc 1 2547 19 is_stmt 0 view .LVU1219
 3946 0024 2D4D     		ldr	r5, .L407+8
2547:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3947              		.loc 1 2547 2 view .LVU1220
 3948 0026 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3949              	.LBB338:
 3950              	.LBB339:
 338:src/display.c ****   else	clr_dot(n);
 3951              		.loc 1 338 11 view .LVU1221
 3952 0028 8620     		movs	r0, #134
 3953              	.LBE339:
 3954              	.LBE338:
2547:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3955              		.loc 1 2547 2 view .LVU1222
 3956 002a 23B9     		cbnz	r3, .L384
2547:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3957              		.loc 1 2547 47 discriminator 2 view .LVU1223
 3958 002c 6A69     		ldr	r2, [r5, #20]
 3959 002e 2C4B     		ldr	r3, .L407+12
 3960 0030 1340     		ands	r3, r3, r2
2547:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3961              		.loc 1 2547 2 discriminator 2 view .LVU1224
 3962 0032 002B     		cmp	r3, #0
 3963 0034 48D0     		beq	.L404
 3964              	.L384:
 3965              	.LBB342:
ARM GAS  /tmp/cchyQ5Gz.s 			page 150


 3966              	.LBB340:
 338:src/display.c ****   else	clr_dot(n);
 3967              		.loc 1 338 11 is_stmt 1 view .LVU1225
 3968 0036 FFF7FEFF 		bl	set_dot
 3969              	.LVL440:
 3970              	.L385:
 3971              	.LBE340:
 3972              	.LBE342:
2548:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3973              		.loc 1 2548 2 view .LVU1226
2548:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3974              		.loc 1 2548 31 is_stmt 0 view .LVU1227
 3975 003a 2A4A     		ldr	r2, .L407+16
 3976 003c 6B69     		ldr	r3, [r5, #20]
2548:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3977              		.loc 1 2548 2 view .LVU1228
 3978 003e 1A42     		tst	r2, r3
 3979              	.LBB343:
 3980              	.LBB344:
 338:src/display.c ****   else	clr_dot(n);
 3981              		.loc 1 338 11 view .LVU1229
 3982 0040 4FF08500 		mov	r0, #133
 3983              	.LBE344:
 3984              	.LBE343:
2548:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3985              		.loc 1 2548 2 view .LVU1230
 3986 0044 02D0     		beq	.L386
2548:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3987              		.loc 1 2548 48 discriminator 1 view .LVU1231
 3988 0046 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2548:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3989              		.loc 1 2548 2 discriminator 1 view .LVU1232
 3990 0048 DA06     		lsls	r2, r3, #27
 3991 004a 3AD4     		bmi	.L387
 3992              	.L386:
 3993              	.LVL441:
 3994              	.LBB347:
 3995              	.LBI343:
 337:src/display.c ****   if (on)	set_dot(n);
 3996              		.loc 1 337 6 is_stmt 1 view .LVU1233
 3997              	.LBB345:
 338:src/display.c ****   else	clr_dot(n);
 3998              		.loc 1 338 3 view .LVU1234
 339:src/display.c **** }
 3999              		.loc 1 339 8 view .LVU1235
 4000 004c FFF7FEFF 		bl	clr_dot
 4001              	.LVL442:
 4002              	.L388:
 339:src/display.c **** }
 4003              		.loc 1 339 8 is_stmt 0 view .LVU1236
 4004              	.LBE345:
 4005              	.LBE347:
2549:src/display.c **** 	set_IO_annunciator();
 4006              		.loc 1 2549 2 is_stmt 1 view .LVU1237
 4007 0050 6820     		movs	r0, #104
 4008 0052 FFF7FEFF 		bl	get_user_flag
 4009              	.LVL443:
ARM GAS  /tmp/cchyQ5Gz.s 			page 151


 4010              	.LBB348:
 4011              	.LBI348:
 337:src/display.c ****   if (on)	set_dot(n);
 4012              		.loc 1 337 6 view .LVU1238
 4013              	.LBB349:
 338:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 338 3 view .LVU1239
 338:src/display.c ****   else	clr_dot(n);
 4015              		.loc 1 338 6 is_stmt 0 view .LVU1240
 4016 0056 28B3     		cbz	r0, .L389
 338:src/display.c ****   else	clr_dot(n);
 4017              		.loc 1 338 11 is_stmt 1 view .LVU1241
 4018              	.LBE349:
 4019              	.LBE348:
 4020              	.LBB353:
 4021              	.LBB354:
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4022              		.loc 1 2577 9 is_stmt 0 view .LVU1242
 4023 0058 234D     		ldr	r5, .L407+20
 4024              	.LBE354:
 4025              	.LBE353:
 4026              	.LBB362:
 4027              	.LBB350:
 338:src/display.c ****   else	clr_dot(n);
 4028              		.loc 1 338 11 view .LVU1243
 4029 005a 8320     		movs	r0, #131
 4030              	.LVL444:
 338:src/display.c ****   else	clr_dot(n);
 4031              		.loc 1 338 11 view .LVU1244
 4032 005c FFF7FEFF 		bl	set_dot
 4033              	.LVL445:
 338:src/display.c ****   else	clr_dot(n);
 4034              		.loc 1 338 11 view .LVU1245
 4035              	.LBE350:
 4036              	.LBE362:
2550:src/display.c **** 
 4037              		.loc 1 2550 2 is_stmt 1 view .LVU1246
 4038              	.LBB363:
 4039              	.LBI353:
2562:src/display.c **** #ifndef DM42
 4040              		.loc 1 2562 12 view .LVU1247
 4041              	.LBB359:
2567:src/display.c **** #endif
 4042              		.loc 1 2567 4 view .LVU1248
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4043              		.loc 1 2577 2 view .LVU1249
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4044              		.loc 1 2577 5 is_stmt 0 view .LVU1250
 4045 0060 2B68     		ldr	r3, [r5]
 4046 0062 33BB     		cbnz	r3, .L405
 4047              	.L391:
 4048              	.LBE359:
 4049              	.LBE363:
2554:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4050              		.loc 1 2554 2 is_stmt 1 view .LVU1251
2554:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4051              		.loc 1 2554 11 is_stmt 0 view .LVU1252
ARM GAS  /tmp/cchyQ5Gz.s 			page 152


 4052 0064 3368     		ldr	r3, [r6]
 4053 0066 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4054 006a 03F00103 		and	r3, r3, #1
2554:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4055              		.loc 1 2554 2 view .LVU1253
 4056 006e 2343     		orrs	r3, r3, r4
 4057 0070 13F0FF0F 		tst	r3, #255
 4058              	.LBB364:
 4059              	.LBB365:
 338:src/display.c ****   else	clr_dot(n);
 4060              		.loc 1 338 11 view .LVU1254
 4061 0074 4FF08C00 		mov	r0, #140
 4062              	.LBE365:
 4063              	.LBE364:
2554:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4064              		.loc 1 2554 2 view .LVU1255
 4065 0078 06D1     		bne	.L406
 4066              	.LVL446:
 4067              	.LBB368:
 4068              	.LBI364:
 337:src/display.c ****   if (on)	set_dot(n);
 4069              		.loc 1 337 6 is_stmt 1 view .LVU1256
 4070              	.LBB366:
 338:src/display.c ****   else	clr_dot(n);
 4071              		.loc 1 338 3 view .LVU1257
 338:src/display.c ****   else	clr_dot(n);
 4072              		.loc 1 338 11 view .LVU1258
 4073 007a FFF7FEFF 		bl	set_dot
 4074              	.LVL447:
 338:src/display.c ****   else	clr_dot(n);
 4075              		.loc 1 338 11 is_stmt 0 view .LVU1259
 4076              	.LBE366:
 4077              	.LBE368:
2555:src/display.c ****       }
 4078              		.loc 1 2555 2 is_stmt 1 view .LVU1260
 4079              	.L394:
 4080              	.LBB369:
 4081              	.LBI369:
 337:src/display.c ****   if (on)	set_dot(n);
 4082              		.loc 1 337 6 view .LVU1261
 4083              	.LBB370:
 338:src/display.c ****   else	clr_dot(n);
 4084              		.loc 1 338 3 view .LVU1262
 339:src/display.c **** }
 4085              		.loc 1 339 8 view .LVU1263
 4086              	.LBE370:
 4087              	.LBE369:
2556:src/display.c **** 
 4088              		.loc 1 2556 7 is_stmt 0 view .LVU1264
 4089 007e BDE87040 		pop	{r4, r5, r6, lr}
 4090              		.cfi_remember_state
 4091              		.cfi_restore 14
 4092              		.cfi_restore 6
 4093              		.cfi_restore 5
 4094              		.cfi_restore 4
 4095              		.cfi_def_cfa_offset 0
 4096              	.LVL448:
ARM GAS  /tmp/cchyQ5Gz.s 			page 153


 4097              	.LBB374:
 4098              	.LBB371:
 339:src/display.c **** }
 4099              		.loc 1 339 8 view .LVU1265
 4100 0082 8B20     		movs	r0, #139
 4101 0084 FFF7FEBF 		b	clr_dot
 4102              	.LVL449:
 4103              	.L406:
 4104              		.cfi_restore_state
 339:src/display.c **** }
 4105              		.loc 1 339 8 view .LVU1266
 4106              	.LBE371:
 4107              	.LBE374:
 4108              	.LBB375:
 337:src/display.c ****   if (on)	set_dot(n);
 4109              		.loc 1 337 6 is_stmt 1 view .LVU1267
 4110              	.LBB367:
 338:src/display.c ****   else	clr_dot(n);
 4111              		.loc 1 338 3 view .LVU1268
 339:src/display.c **** }
 4112              		.loc 1 339 8 view .LVU1269
 4113 0088 FFF7FEFF 		bl	clr_dot
 4114              	.LVL450:
 339:src/display.c **** }
 4115              		.loc 1 339 8 is_stmt 0 view .LVU1270
 4116              	.LBE367:
 4117              	.LBE375:
2555:src/display.c ****       }
 4118              		.loc 1 2555 2 is_stmt 1 view .LVU1271
2555:src/display.c ****       }
 4119              		.loc 1 2555 11 is_stmt 0 view .LVU1272
 4120 008c 3368     		ldr	r3, [r6]
 4121 008e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2555:src/display.c ****       }
 4122              		.loc 1 2555 2 view .LVU1273
 4123 0092 DB07     		lsls	r3, r3, #31
 4124 0094 F3D4     		bmi	.L394
2555:src/display.c ****       }
 4125              		.loc 1 2555 2 discriminator 1 view .LVU1274
 4126 0096 012C     		cmp	r4, #1
 4127 0098 F1D1     		bne	.L394
 4128              	.LVL451:
 4129              	.LBB376:
 337:src/display.c ****   if (on)	set_dot(n);
 4130              		.loc 1 337 6 is_stmt 1 view .LVU1275
 4131              	.LBB372:
 338:src/display.c ****   else	clr_dot(n);
 4132              		.loc 1 338 3 view .LVU1276
 338:src/display.c ****   else	clr_dot(n);
 4133              		.loc 1 338 11 view .LVU1277
 4134              	.LBE372:
 4135              	.LBE376:
2556:src/display.c **** 
 4136              		.loc 1 2556 7 is_stmt 0 view .LVU1278
 4137 009a BDE87040 		pop	{r4, r5, r6, lr}
 4138              		.cfi_remember_state
 4139              		.cfi_restore 14
ARM GAS  /tmp/cchyQ5Gz.s 			page 154


 4140              		.cfi_restore 6
 4141              		.cfi_restore 5
 4142              		.cfi_restore 4
 4143              		.cfi_def_cfa_offset 0
 4144              	.LVL452:
 4145              	.LBB377:
 4146              	.LBB373:
 338:src/display.c ****   else	clr_dot(n);
 4147              		.loc 1 338 11 view .LVU1279
 4148 009e 8B20     		movs	r0, #139
 4149 00a0 FFF7FEBF 		b	set_dot
 4150              	.LVL453:
 4151              	.L389:
 4152              		.cfi_restore_state
 338:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 338 11 view .LVU1280
 4154              	.LBE373:
 4155              	.LBE377:
 4156              	.LBB378:
 4157              	.LBB351:
 339:src/display.c **** }
 4158              		.loc 1 339 8 is_stmt 1 view .LVU1281
 4159              	.LBE351:
 4160              	.LBE378:
 4161              	.LBB379:
 4162              	.LBB360:
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4163              		.loc 1 2577 9 is_stmt 0 view .LVU1282
 4164 00a4 104D     		ldr	r5, .L407+20
 4165              	.LBE360:
 4166              	.LBE379:
 4167              	.LBB380:
 4168              	.LBB352:
 339:src/display.c **** }
 4169              		.loc 1 339 8 view .LVU1283
 4170 00a6 8320     		movs	r0, #131
 4171              	.LVL454:
 339:src/display.c **** }
 4172              		.loc 1 339 8 view .LVU1284
 4173 00a8 FFF7FEFF 		bl	clr_dot
 4174              	.LVL455:
 339:src/display.c **** }
 4175              		.loc 1 339 8 view .LVU1285
 4176              	.LBE352:
 4177              	.LBE380:
2550:src/display.c **** 
 4178              		.loc 1 2550 2 is_stmt 1 view .LVU1286
 4179              	.LBB381:
2562:src/display.c **** #ifndef DM42
 4180              		.loc 1 2562 12 view .LVU1287
 4181              	.LBB361:
2567:src/display.c **** #endif
 4182              		.loc 1 2567 4 view .LVU1288
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4183              		.loc 1 2577 2 view .LVU1289
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4184              		.loc 1 2577 5 is_stmt 0 view .LVU1290
ARM GAS  /tmp/cchyQ5Gz.s 			page 155


 4185 00ac 2B68     		ldr	r3, [r5]
 4186 00ae 002B     		cmp	r3, #0
 4187 00b0 D8D0     		beq	.L391
 4188              	.L405:
 4189              	.LBB355:
 4190              	.LBI355:
2562:src/display.c **** #ifndef DM42
 4191              		.loc 1 2562 12 is_stmt 1 view .LVU1291
 4192              	.LBB356:
2578:src/display.c **** 	  IoAnnunciator = on;
 4193              		.loc 1 2578 4 view .LVU1292
 4194              	.LVL456:
 4195              	.LBB357:
 4196              	.LBI357:
 337:src/display.c ****   if (on)	set_dot(n);
 4197              		.loc 1 337 6 view .LVU1293
 4198              	.LBB358:
 338:src/display.c ****   else	clr_dot(n);
 4199              		.loc 1 338 3 view .LVU1294
 339:src/display.c **** }
 4200              		.loc 1 339 8 view .LVU1295
 4201 00b2 8420     		movs	r0, #132
 4202 00b4 FFF7FEFF 		bl	clr_dot
 4203              	.LVL457:
 339:src/display.c **** }
 4204              		.loc 1 339 8 is_stmt 0 view .LVU1296
 4205              	.LBE358:
 4206              	.LBE357:
2579:src/display.c **** 	  finish_display(); //LIT_EQ
 4207              		.loc 1 2579 4 is_stmt 1 view .LVU1297
2579:src/display.c **** 	  finish_display(); //LIT_EQ
 4208              		.loc 1 2579 18 is_stmt 0 view .LVU1298
 4209 00b8 0023     		movs	r3, #0
 4210 00ba 2B60     		str	r3, [r5]
2580:src/display.c **** 	}
 4211              		.loc 1 2580 4 is_stmt 1 view .LVU1299
 4212 00bc FFF7FEFF 		bl	finish_display
 4213              	.LVL458:
2582:src/display.c **** 
 4214              		.loc 1 2582 7 is_stmt 0 view .LVU1300
 4215 00c0 D0E7     		b	.L391
 4216              	.LVL459:
 4217              	.L387:
2582:src/display.c **** 
 4218              		.loc 1 2582 7 view .LVU1301
 4219              	.LBE356:
 4220              	.LBE355:
 4221              	.LBE361:
 4222              	.LBE381:
 4223              	.LBB382:
 337:src/display.c ****   if (on)	set_dot(n);
 4224              		.loc 1 337 6 is_stmt 1 view .LVU1302
 4225              	.LBB346:
 338:src/display.c ****   else	clr_dot(n);
 4226              		.loc 1 338 3 view .LVU1303
 338:src/display.c ****   else	clr_dot(n);
 4227              		.loc 1 338 11 view .LVU1304
ARM GAS  /tmp/cchyQ5Gz.s 			page 156


 4228 00c2 FFF7FEFF 		bl	set_dot
 4229              	.LVL460:
 4230 00c6 C3E7     		b	.L388
 4231              	.LVL461:
 4232              	.L404:
 338:src/display.c ****   else	clr_dot(n);
 4233              		.loc 1 338 11 is_stmt 0 view .LVU1305
 4234              	.LBE346:
 4235              	.LBE382:
 4236              	.LBB383:
 4237              	.LBI338:
 337:src/display.c ****   if (on)	set_dot(n);
 4238              		.loc 1 337 6 is_stmt 1 view .LVU1306
 4239              	.LBB341:
 338:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 338 3 view .LVU1307
 339:src/display.c **** }
 4241              		.loc 1 339 8 view .LVU1308
 4242 00c8 FFF7FEFF 		bl	clr_dot
 4243              	.LVL462:
 4244 00cc B5E7     		b	.L385
 4245              	.LVL463:
 4246              	.L403:
 339:src/display.c **** }
 4247              		.loc 1 339 8 is_stmt 0 view .LVU1309
 4248              	.LBE341:
 4249              	.LBE383:
 4250              	.LBB384:
 337:src/display.c ****   if (on)	set_dot(n);
 4251              		.loc 1 337 6 is_stmt 1 view .LVU1310
 4252              	.LBB336:
 338:src/display.c ****   else	clr_dot(n);
 4253              		.loc 1 338 3 view .LVU1311
 338:src/display.c ****   else	clr_dot(n);
 4254              		.loc 1 338 11 view .LVU1312
 4255 00ce FFF7FEFF 		bl	set_dot
 4256              	.LVL464:
 4257 00d2 A7E7     		b	.L383
 4258              	.L408:
 4259              		.align	2
 4260              	.L407:
 4261 00d4 00000000 		.word	main_ram
 4262 00d8 00000000 		.word	Running
 4263 00dc 00000000 		.word	StateWhileOn
 4264 00e0 07000800 		.word	524295
 4265 00e4 00080800 		.word	526336
 4266 00e8 00000000 		.word	IoAnnunciator
 4267              	.LBE336:
 4268              	.LBE384:
 4269              		.cfi_endproc
 4270              	.LFE32:
 4272              		.section	.text.getdig,"ax",%progbits
 4273              		.align	1
 4274              		.p2align 2,,3
 4275              		.global	getdig
 4276              		.syntax unified
 4277              		.thumb
ARM GAS  /tmp/cchyQ5Gz.s 			page 157


 4278              		.thumb_func
 4279              		.fpu fpv4-sp-d16
 4281              	getdig:
 4282              	.LVL465:
 4283              	.LFB6:
 332:src/display.c ****   // perform index lookup
 4284              		.loc 1 332 1 view -0
 4285              		.cfi_startproc
 4286              		@ args = 0, pretend = 0, frame = 0
 4287              		@ frame_needed = 0, uses_anonymous_args = 0
 4288              		@ link register save eliminated.
 334:src/display.c **** }
 4289              		.loc 1 334 3 view .LVU1314
 334:src/display.c **** }
 4290              		.loc 1 334 16 is_stmt 0 view .LVU1315
 4291 0000 014B     		ldr	r3, .L410
 334:src/display.c **** }
 4292              		.loc 1 334 19 view .LVU1316
 4293 0002 C0B2     		uxtb	r0, r0
 4294              	.LVL466:
 335:src/display.c **** 
 4295              		.loc 1 335 1 view .LVU1317
 4296 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4297 0006 7047     		bx	lr
 4298              	.L411:
 4299              		.align	2
 4300              	.L410:
 4301 0008 00000000 		.word	.LANCHOR2
 4302              		.cfi_endproc
 4303              	.LFE6:
 4305              		.section	.text.dot,"ax",%progbits
 4306              		.align	1
 4307              		.p2align 2,,3
 4308              		.global	dot
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu fpv4-sp-d16
 4314              	dot:
 4315              	.LVL467:
 4316              	.LFB7:
 337:src/display.c ****   if (on)	set_dot(n);
 4317              		.loc 1 337 25 is_stmt 1 view -0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 0
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              		@ link register save eliminated.
 338:src/display.c ****   else	clr_dot(n);
 4322              		.loc 1 338 3 view .LVU1319
 338:src/display.c ****   else	clr_dot(n);
 4323              		.loc 1 338 6 is_stmt 0 view .LVU1320
 4324 0000 09B1     		cbz	r1, .L413
 338:src/display.c ****   else	clr_dot(n);
 4325              		.loc 1 338 11 is_stmt 1 discriminator 1 view .LVU1321
 4326 0002 FFF7FEBF 		b	set_dot
 4327              	.LVL468:
 4328              	.L413:
ARM GAS  /tmp/cchyQ5Gz.s 			page 158


 339:src/display.c **** }
 4329              		.loc 1 339 8 view .LVU1322
 4330 0006 FFF7FEBF 		b	clr_dot
 4331              	.LVL469:
 339:src/display.c **** }
 4332              		.loc 1 339 8 is_stmt 0 view .LVU1323
 4333              		.cfi_endproc
 4334              	.LFE7:
 4336 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4337              		.align	1
 4338              		.p2align 2,,3
 4339              		.global	std_round_fix
 4340              		.syntax unified
 4341              		.thumb
 4342              		.thumb_func
 4343              		.fpu fpv4-sp-d16
 4345              	std_round_fix:
 4346              	.LVL470:
 4347              	.LFB24:
1788:src/display.c **** 	decNumber b, c;
 4348              		.loc 1 1788 60 is_stmt 1 view -0
 4349              		.cfi_startproc
 4350              		@ args = 0, pretend = 0, frame = 80
 4351              		@ frame_needed = 0, uses_anonymous_args = 0
1789:src/display.c **** 
 4352              		.loc 1 1789 2 view .LVU1325
1791:src/display.c **** 	b.exponent -= UState.dispdigs;
 4353              		.loc 1 1791 2 view .LVU1326
1788:src/display.c **** 	decNumber b, c;
 4354              		.loc 1 1788 60 is_stmt 0 view .LVU1327
 4355 0000 00B5     		push	{lr}
 4356              		.cfi_def_cfa_offset 4
 4357              		.cfi_offset 14, -4
 4358 0002 95B0     		sub	sp, sp, #84
 4359              		.cfi_def_cfa_offset 88
1788:src/display.c **** 	decNumber b, c;
 4360              		.loc 1 1788 60 view .LVU1328
 4361 0004 0146     		mov	r1, r0
1791:src/display.c **** 	b.exponent -= UState.dispdigs;
 4362              		.loc 1 1791 2 view .LVU1329
 4363 0006 02A8     		add	r0, sp, #8
 4364              	.LVL471:
1788:src/display.c **** 	decNumber b, c;
 4365              		.loc 1 1788 60 view .LVU1330
 4366 0008 0191     		str	r1, [sp, #4]
1791:src/display.c **** 	b.exponent -= UState.dispdigs;
 4367              		.loc 1 1791 2 view .LVU1331
 4368 000a FFF7FEFF 		bl	dn_1
 4369              	.LVL472:
1792:src/display.c **** 	dn_abs(&c, z);
 4370              		.loc 1 1792 2 is_stmt 1 view .LVU1332
1792:src/display.c **** 	dn_abs(&c, z);
 4371              		.loc 1 1792 22 is_stmt 0 view .LVU1333
 4372 000e 0F4A     		ldr	r2, .L419
1792:src/display.c **** 	dn_abs(&c, z);
 4373              		.loc 1 1792 13 view .LVU1334
 4374 0010 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/cchyQ5Gz.s 			page 159


1792:src/display.c **** 	dn_abs(&c, z);
 4375              		.loc 1 1792 22 view .LVU1335
 4376 0012 1268     		ldr	r2, [r2]
1793:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4377              		.loc 1 1793 2 view .LVU1336
 4378 0014 0199     		ldr	r1, [sp, #4]
1792:src/display.c **** 	dn_abs(&c, z);
 4379              		.loc 1 1792 22 view .LVU1337
 4380 0016 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
 4381 001a 02F00F02 		and	r2, r2, #15
1792:src/display.c **** 	dn_abs(&c, z);
 4382              		.loc 1 1792 13 view .LVU1338
 4383 001e 9B1A     		subs	r3, r3, r2
1793:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4384              		.loc 1 1793 2 view .LVU1339
 4385 0020 0BA8     		add	r0, sp, #44
1792:src/display.c **** 	dn_abs(&c, z);
 4386              		.loc 1 1792 13 view .LVU1340
 4387 0022 0393     		str	r3, [sp, #12]
1793:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4388              		.loc 1 1793 2 is_stmt 1 view .LVU1341
 4389 0024 FFF7FEFF 		bl	dn_abs
 4390              	.LVL473:
1794:src/display.c **** 	  return MODE_FIX;
 4391              		.loc 1 1794 2 view .LVU1342
1794:src/display.c **** 	  return MODE_FIX;
 4392              		.loc 1 1794 6 is_stmt 0 view .LVU1343
 4393 0028 0BA9     		add	r1, sp, #44
 4394 002a 02A8     		add	r0, sp, #8
 4395 002c FFF7FEFF 		bl	dn_lt
 4396              	.LVL474:
1794:src/display.c **** 	  return MODE_FIX;
 4397              		.loc 1 1794 5 view .LVU1344
 4398 0030 10B9     		cbnz	r0, .L418
1797:src/display.c **** #endif
 4399              		.loc 1 1797 7 view .LVU1345
 4400 0032 15B0     		add	sp, sp, #84
 4401              		.cfi_remember_state
 4402              		.cfi_def_cfa_offset 4
 4403              		@ sp needed
 4404 0034 5DF804FB 		ldr	pc, [sp], #4
 4405              	.LVL475:
 4406              	.L418:
 4407              		.cfi_restore_state
1794:src/display.c **** 	  return MODE_FIX;
 4408              		.loc 1 1794 23 discriminator 1 view .LVU1346
 4409 0038 0549     		ldr	r1, .L419+4
 4410 003a 0BA8     		add	r0, sp, #44
 4411 003c FFF7FEFF 		bl	dn_lt
 4412              	.LVL476:
1795:src/display.c **** 	return MODE_STD;
 4413              		.loc 1 1795 11 discriminator 1 view .LVU1347
 4414 0040 0038     		subs	r0, r0, #0
 4415 0042 18BF     		it	ne
 4416 0044 0120     		movne	r0, #1
1797:src/display.c **** #endif
 4417              		.loc 1 1797 7 discriminator 1 view .LVU1348
ARM GAS  /tmp/cchyQ5Gz.s 			page 160


 4418 0046 15B0     		add	sp, sp, #84
 4419              		.cfi_def_cfa_offset 4
 4420              		@ sp needed
 4421 0048 5DF804FB 		ldr	pc, [sp], #4
 4422              	.LVL477:
 4423              	.L420:
1797:src/display.c **** #endif
 4424              		.loc 1 1797 7 discriminator 1 view .LVU1349
 4425              		.align	2
 4426              	.L419:
 4427 004c 00000000 		.word	main_ram
 4428 0050 00000000 		.word	const_1
 4429              		.cfi_endproc
 4430              	.LFE24:
 4432              		.section	.text.set_IO_annunciator,"ax",%progbits
 4433              		.align	1
 4434              		.p2align 2,,3
 4435              		.global	set_IO_annunciator
 4436              		.syntax unified
 4437              		.thumb
 4438              		.thumb_func
 4439              		.fpu fpv4-sp-d16
 4441              	set_IO_annunciator:
 4442              	.LFB33:
2562:src/display.c **** #ifndef DM42
 4443              		.loc 1 2562 37 is_stmt 1 view -0
 4444              		.cfi_startproc
 4445              		@ args = 0, pretend = 0, frame = 0
 4446              		@ frame_needed = 0, uses_anonymous_args = 0
2567:src/display.c **** #endif
 4447              		.loc 1 2567 4 view .LVU1351
 4448              	.LVL478:
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4449              		.loc 1 2577 2 view .LVU1352
2562:src/display.c **** #ifndef DM42
 4450              		.loc 1 2562 37 is_stmt 0 view .LVU1353
 4451 0000 10B5     		push	{r4, lr}
 4452              		.cfi_def_cfa_offset 8
 4453              		.cfi_offset 4, -8
 4454              		.cfi_offset 14, -4
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4455              		.loc 1 2577 9 view .LVU1354
 4456 0002 064C     		ldr	r4, .L425
2577:src/display.c **** 	  dot(LIT_EQ, on);
 4457              		.loc 1 2577 5 view .LVU1355
 4458 0004 2368     		ldr	r3, [r4]
 4459 0006 03B9     		cbnz	r3, .L424
2582:src/display.c **** 
 4460              		.loc 1 2582 7 view .LVU1356
 4461 0008 10BD     		pop	{r4, pc}
 4462              	.L424:
 4463              	.LBB389:
 4464              	.LBI389:
2562:src/display.c **** #ifndef DM42
 4465              		.loc 1 2562 12 is_stmt 1 view .LVU1357
 4466              	.LBB390:
2578:src/display.c **** 	  IoAnnunciator = on;
ARM GAS  /tmp/cchyQ5Gz.s 			page 161


 4467              		.loc 1 2578 4 view .LVU1358
 4468              	.LVL479:
 4469              	.LBB391:
 4470              	.LBI391:
 337:src/display.c ****   if (on)	set_dot(n);
 4471              		.loc 1 337 6 view .LVU1359
 4472              	.LBB392:
 338:src/display.c ****   else	clr_dot(n);
 4473              		.loc 1 338 3 view .LVU1360
 339:src/display.c **** }
 4474              		.loc 1 339 8 view .LVU1361
 4475 000a 8420     		movs	r0, #132
 4476 000c FFF7FEFF 		bl	clr_dot
 4477              	.LVL480:
 339:src/display.c **** }
 4478              		.loc 1 339 8 is_stmt 0 view .LVU1362
 4479              	.LBE392:
 4480              	.LBE391:
2579:src/display.c **** 	  finish_display(); //LIT_EQ
 4481              		.loc 1 2579 4 is_stmt 1 view .LVU1363
2579:src/display.c **** 	  finish_display(); //LIT_EQ
 4482              		.loc 1 2579 18 is_stmt 0 view .LVU1364
 4483 0010 0023     		movs	r3, #0
 4484 0012 2360     		str	r3, [r4]
2580:src/display.c **** 	}
 4485              		.loc 1 2580 4 is_stmt 1 view .LVU1365
 4486              	.LBE390:
 4487              	.LBE389:
2582:src/display.c **** 
 4488              		.loc 1 2582 7 is_stmt 0 view .LVU1366
 4489 0014 BDE81040 		pop	{r4, lr}
 4490              		.cfi_restore 14
 4491              		.cfi_restore 4
 4492              		.cfi_def_cfa_offset 0
 4493              	.LBB394:
 4494              	.LBB393:
2580:src/display.c **** 	}
 4495              		.loc 1 2580 4 view .LVU1367
 4496 0018 FFF7FEBF 		b	finish_display
 4497              	.LVL481:
 4498              	.L426:
 4499              		.align	2
 4500              	.L425:
 4501 001c 00000000 		.word	IoAnnunciator
 4502              	.LBE393:
 4503              	.LBE394:
 4504              		.cfi_endproc
 4505              	.LFE33:
 4507              		.section	.text.pixel_length,"ax",%progbits
 4508              		.align	1
 4509              		.p2align 2,,3
 4510              		.global	pixel_length
 4511              		.syntax unified
 4512              		.thumb
 4513              		.thumb_func
 4514              		.fpu fpv4-sp-d16
 4516              	pixel_length:
ARM GAS  /tmp/cchyQ5Gz.s 			page 162


 4517              	.LVL482:
 4518              	.LFB40:
3465:src/display.c **** 
3466:src/display.c **** 
3467:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3468:src/display.c ****        */
3469:src/display.c ****       int pixel_length(const char *s, int smallp)
3470:src/display.c ****       {
 4519              		.loc 1 3470 7 is_stmt 1 view -0
 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 0
 4522              		@ frame_needed = 0, uses_anonymous_args = 0
3471:src/display.c **** 	int len = 0;
 4523              		.loc 1 3471 2 view .LVU1369
3472:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4524              		.loc 1 3472 2 view .LVU1370
3470:src/display.c **** 	int len = 0;
 4525              		.loc 1 3470 7 is_stmt 0 view .LVU1371
 4526 0000 70B5     		push	{r4, r5, r6, lr}
 4527              		.cfi_def_cfa_offset 16
 4528              		.cfi_offset 4, -16
 4529              		.cfi_offset 5, -12
 4530              		.cfi_offset 6, -8
 4531              		.cfi_offset 14, -4
3470:src/display.c **** 	int len = 0;
 4532              		.loc 1 3470 7 view .LVU1372
 4533 0002 0446     		mov	r4, r0
3473:src/display.c **** 	while (*s != '\0') {
 4534              		.loc 1 3473 9 view .LVU1373
 4535 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4536              	.LVL483:
3472:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4537              		.loc 1 3472 34 view .LVU1374
 4538 0006 0E1E     		subs	r6, r1, #0
 4539 0008 18BF     		it	ne
 4540 000a 4FF48076 		movne	r6, #256
 4541              	.LVL484:
 4542              		.loc 1 3473 2 is_stmt 1 view .LVU1375
 4543              		.loc 1 3473 8 view .LVU1376
 4544 000e A0B1     		cbz	r0, .L434
3471:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4545              		.loc 1 3471 6 is_stmt 0 view .LVU1377
 4546 0010 0025     		movs	r5, #0
 4547 0012 06E0     		b	.L432
 4548              	.LVL485:
 4549              	.L430:
3474:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3475:src/display.c **** 	  if (s[0] == '\007') {
3476:src/display.c **** 	    len += s[1] & 0x1F;
3477:src/display.c **** 	    s += 3;
3478:src/display.c **** 	    continue;
3479:src/display.c **** 	  }
3480:src/display.c **** #endif
3481:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4550              		.loc 1 3481 11 view .LVU1378
 4551 0014 3044     		add	r0, r0, r6
 4552 0016 FFF7FEFF 		bl	charlengths
ARM GAS  /tmp/cchyQ5Gz.s 			page 163


 4553              	.LVL486:
 4554              		.loc 1 3481 42 view .LVU1379
 4555 001a 0134     		adds	r4, r4, #1
 4556              	.LVL487:
 4557              		.loc 1 3481 8 view .LVU1380
 4558 001c 0544     		add	r5, r5, r0
 4559              	.LVL488:
3473:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4560              		.loc 1 3473 8 is_stmt 1 view .LVU1381
3473:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4561              		.loc 1 3473 9 is_stmt 0 view .LVU1382
 4562 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3473:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4563              		.loc 1 3473 8 view .LVU1383
 4564 0020 48B1     		cbz	r0, .L427
 4565              	.LVL489:
 4566              	.L432:
3475:src/display.c **** 	    len += s[1] & 0x1F;
 4567              		.loc 1 3475 4 is_stmt 1 view .LVU1384
 4568              		.loc 1 3481 4 view .LVU1385
3475:src/display.c **** 	    len += s[1] & 0x1F;
 4569              		.loc 1 3475 7 is_stmt 0 view .LVU1386
 4570 0022 0728     		cmp	r0, #7
 4571 0024 F6D1     		bne	.L430
3476:src/display.c **** 	    s += 3;
 4572              		.loc 1 3476 6 is_stmt 1 view .LVU1387
3476:src/display.c **** 	    s += 3;
 4573              		.loc 1 3476 18 is_stmt 0 view .LVU1388
 4574 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3473:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4575              		.loc 1 3473 9 view .LVU1389
 4576 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3476:src/display.c **** 	    s += 3;
 4577              		.loc 1 3476 18 view .LVU1390
 4578 002a 03F01F03 		and	r3, r3, #31
3477:src/display.c **** 	    continue;
 4579              		.loc 1 3477 8 view .LVU1391
 4580 002e 0334     		adds	r4, r4, #3
 4581              	.LVL490:
3476:src/display.c **** 	    s += 3;
 4582              		.loc 1 3476 10 view .LVU1392
 4583 0030 1D44     		add	r5, r5, r3
 4584              	.LVL491:
3477:src/display.c **** 	    continue;
 4585              		.loc 1 3477 6 is_stmt 1 view .LVU1393
3478:src/display.c **** 	  }
 4586              		.loc 1 3478 6 view .LVU1394
3473:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4587              		.loc 1 3473 8 view .LVU1395
 4588 0032 0028     		cmp	r0, #0
 4589 0034 F5D1     		bne	.L432
 4590              	.L427:
3482:src/display.c **** 	}
3483:src/display.c **** 	return len;
3484:src/display.c ****       }
 4591              		.loc 1 3484 7 is_stmt 0 view .LVU1396
 4592 0036 2846     		mov	r0, r5
ARM GAS  /tmp/cchyQ5Gz.s 			page 164


 4593 0038 70BD     		pop	{r4, r5, r6, pc}
 4594              	.LVL492:
 4595              	.L434:
3471:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4596              		.loc 1 3471 6 view .LVU1397
 4597 003a 0546     		mov	r5, r0
3483:src/display.c ****       }
 4598              		.loc 1 3483 2 is_stmt 1 view .LVU1398
 4599              		.loc 1 3484 7 is_stmt 0 view .LVU1399
 4600 003c 2846     		mov	r0, r5
 4601 003e 70BD     		pop	{r4, r5, r6, pc}
 4602              		.loc 1 3484 7 view .LVU1400
 4603              		.cfi_endproc
 4604              	.LFE40:
 4606              		.section	.text.set_status,"ax",%progbits
 4607              		.align	1
 4608              		.p2align 2,,3
 4609              		.syntax unified
 4610              		.thumb
 4611              		.thumb_func
 4612              		.fpu fpv4-sp-d16
 4614              	set_status:
 4615              	.LVL493:
 4616              	.LFB43:
3485:src/display.c **** 
3486:src/display.c **** 
3487:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3488:src/display.c ****        * If this is larger than the display, return true.
3489:src/display.c ****        */
3490:src/display.c ****       static int string_too_large(const char *s) {
3491:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3492:src/display.c ****       }
3493:src/display.c ****       static int string_too_large_top(const char *s) {
3494:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3495:src/display.c ****       }
3496:src/display.c **** 
3497:src/display.c **** 
3498:src/display.c ****       /* Display the given string on the screen.
3499:src/display.c ****        */
3500:src/display.c ****       static void set_status(const char *str) {
 4617              		.loc 1 3500 47 is_stmt 1 view -0
 4618              		.cfi_startproc
 4619              		@ args = 0, pretend = 0, frame = 0
 4620              		@ frame_needed = 0, uses_anonymous_args = 0
3501:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4621              		.loc 1 3501 2 view .LVU1402
3500:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4622              		.loc 1 3500 47 is_stmt 0 view .LVU1403
 4623 0000 10B5     		push	{r4, lr}
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 4, -8
 4626              		.cfi_offset 14, -4
 4627              		.loc 1 3501 24 view .LVU1404
 4628 0002 0D4B     		ldr	r3, .L442
 4629              		.loc 1 3501 2 view .LVU1405
 4630 0004 93F91630 		ldrsb	r3, [r3, #22]
 4631 0008 002B     		cmp	r3, #0
ARM GAS  /tmp/cchyQ5Gz.s 			page 165


3500:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4632              		.loc 1 3500 47 view .LVU1406
 4633 000a 82B0     		sub	sp, sp, #8
 4634              		.cfi_def_cfa_offset 16
3500:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4635              		.loc 1 3500 47 view .LVU1407
 4636 000c 0446     		mov	r4, r0
 4637              		.loc 1 3501 2 view .LVU1408
 4638 000e 0ADA     		bge	.L441
 4639 0010 0121     		movs	r1, #1
 4640              	.LVL494:
 4641              	.L438:
 4642              	.LBB395:
 4643              	.LBI395:
3342:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4644              		.loc 1 3342 19 is_stmt 1 discriminator 6 view .LVU1409
 4645              	.LBB396:
3343:src/display.c ****       }
 4646              		.loc 1 3343 2 discriminator 6 view .LVU1410
 4647 0012 40F24A23 		movw	r3, #586
 4648 0016 0093     		str	r3, [sp]
 4649 0018 2046     		mov	r0, r4
 4650 001a 8E23     		movs	r3, #142
 4651 001c 4A22     		movs	r2, #74
 4652 001e FFF7FEFF 		bl	s_s_sized
 4653              	.LVL495:
3343:src/display.c ****       }
 4654              		.loc 1 3343 2 is_stmt 0 discriminator 6 view .LVU1411
 4655              	.LBE396:
 4656              	.LBE395:
3502:src/display.c ****       }
 4657              		.loc 1 3502 7 discriminator 6 view .LVU1412
 4658 0022 02B0     		add	sp, sp, #8
 4659              		.cfi_remember_state
 4660              		.cfi_def_cfa_offset 8
 4661              		@ sp needed
 4662 0024 10BD     		pop	{r4, pc}
 4663              	.LVL496:
 4664              	.L441:
 4665              		.cfi_restore_state
 4666              	.LBB397:
 4667              	.LBI397:
3490:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4668              		.loc 1 3490 18 is_stmt 1 view .LVU1413
 4669              	.LBB398:
3491:src/display.c ****       }
 4670              		.loc 1 3491 2 view .LVU1414
3491:src/display.c ****       }
 4671              		.loc 1 3491 9 is_stmt 0 view .LVU1415
 4672 0026 0021     		movs	r1, #0
 4673 0028 FFF7FEFF 		bl	pixel_length
 4674              	.LVL497:
3491:src/display.c ****       }
 4675              		.loc 1 3491 9 view .LVU1416
 4676              	.LBE398:
 4677              	.LBE397:
3501:src/display.c ****       }
ARM GAS  /tmp/cchyQ5Gz.s 			page 166


 4678              		.loc 1 3501 2 view .LVU1417
 4679 002c 4B28     		cmp	r0, #75
 4680 002e D4BF     		ite	le
 4681 0030 0021     		movle	r1, #0
 4682 0032 0121     		movgt	r1, #1
 4683 0034 EDE7     		b	.L438
 4684              	.L443:
 4685 0036 00BF     		.align	2
 4686              	.L442:
 4687 0038 00000000 		.word	StateWhileOn
 4688              		.cfi_endproc
 4689              	.LFE43:
 4691              		.section	.text.set_x_dn,"ax",%progbits
 4692              		.align	1
 4693              		.p2align 2,,3
 4694              		.global	set_x_dn
 4695              		.syntax unified
 4696              		.thumb
 4697              		.thumb_func
 4698              		.fpu fpv4-sp-d16
 4700              	set_x_dn:
 4701              	.LVL498:
 4702              	.LFB27:
1935:src/display.c **** 	char x[50], *obp = x;
 4703              		.loc 1 1935 67 is_stmt 1 view -0
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 136
 4706              		@ frame_needed = 0, uses_anonymous_args = 0
1936:src/display.c **** 	int odig = 0;
 4707              		.loc 1 1936 2 view .LVU1419
1935:src/display.c **** 	char x[50], *obp = x;
 4708              		.loc 1 1935 67 is_stmt 0 view .LVU1420
 4709 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4710              		.cfi_def_cfa_offset 36
 4711              		.cfi_offset 4, -36
 4712              		.cfi_offset 5, -32
 4713              		.cfi_offset 6, -28
 4714              		.cfi_offset 7, -24
 4715              		.cfi_offset 8, -20
 4716              		.cfi_offset 9, -16
 4717              		.cfi_offset 10, -12
 4718              		.cfi_offset 11, -8
 4719              		.cfi_offset 14, -4
1952:src/display.c **** 	int mode = UState.dispmode;
 4720              		.loc 1 1952 11 view .LVU1421
 4721 0004 C84B     		ldr	r3, .L679
 4722 0006 1B68     		ldr	r3, [r3]
1935:src/display.c **** 	char x[50], *obp = x;
 4723              		.loc 1 1935 67 view .LVU1422
 4724 0008 A3B0     		sub	sp, sp, #140
 4725              		.cfi_def_cfa_offset 176
 4726              	.LVL499:
1937:src/display.c **** 	int show_exp = 0;
 4727              		.loc 1 1937 2 is_stmt 1 view .LVU1423
1938:src/display.c **** 	int j;
 4728              		.loc 1 1938 2 view .LVU1424
1939:src/display.c **** 	char mantissa[64];
ARM GAS  /tmp/cchyQ5Gz.s 			page 167


 4729              		.loc 1 1939 2 view .LVU1425
1940:src/display.c **** 	int exp = 0;
 4730              		.loc 1 1940 2 view .LVU1426
1941:src/display.c **** 	char *p = mantissa;
 4731              		.loc 1 1941 2 view .LVU1427
1942:src/display.c **** 	char *r;
 4732              		.loc 1 1942 2 view .LVU1428
1943:src/display.c **** 	const char *q;
 4733              		.loc 1 1943 2 view .LVU1429
1944:src/display.c **** 	int count, i;
 4734              		.loc 1 1944 2 view .LVU1430
1945:src/display.c **** 	int extra_digits = 0;
 4735              		.loc 1 1945 2 view .LVU1431
1946:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4736              		.loc 1 1946 2 view .LVU1432
1952:src/display.c **** 	int mode = UState.dispmode;
 4737              		.loc 1 1952 2 view .LVU1433
1952:src/display.c **** 	int mode = UState.dispmode;
 4738              		.loc 1 1952 17 is_stmt 0 view .LVU1434
 4739 000a 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1953:src/display.c **** #endif
 4740              		.loc 1 1953 19 view .LVU1435
 4741 000e 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1935:src/display.c **** 	char x[50], *obp = x;
 4742              		.loc 1 1935 67 view .LVU1436
 4743 0012 0092     		str	r2, [sp]
 4744 0014 0C46     		mov	r4, r1
 4745 0016 0646     		mov	r6, r0
1952:src/display.c **** 	int mode = UState.dispmode;
 4746              		.loc 1 1952 17 view .LVU1437
 4747 0018 05F00F05 		and	r5, r5, #15
 4748              	.LVL500:
1953:src/display.c **** #endif
 4749              		.loc 1 1953 2 is_stmt 1 view .LVU1438
1953:src/display.c **** #endif
 4750              		.loc 1 1953 19 is_stmt 0 view .LVU1439
 4751 001c BF09     		lsrs	r7, r7, #6
 4752              	.LVL501:
1955:src/display.c **** 	int negative = 0;
 4753              		.loc 1 1955 2 is_stmt 1 view .LVU1440
1956:src/display.c **** 	int trimzeros = 0;
 4754              		.loc 1 1956 2 view .LVU1441
1957:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4755              		.loc 1 1957 2 view .LVU1442
1959:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4756              		.loc 1 1959 2 view .LVU1443
1968:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4757              		.loc 1 1968 2 view .LVU1444
 4758 001e FFF7FEFF 		bl	set_separator_decimal_modes
 4759              	.LVL502:
1970:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4760              		.loc 1 1970 2 view .LVU1445
1970:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4761              		.loc 1 1970 5 is_stmt 0 view .LVU1446
 4762 0022 002C     		cmp	r4, #0
 4763 0024 00F08A81 		beq	.L445
 4764              	.L448:
ARM GAS  /tmp/cchyQ5Gz.s 			page 168


1995:src/display.c **** 	  return;
 4765              		.loc 1 1995 2 is_stmt 1 view .LVU1447
1995:src/display.c **** 	  return;
 4766              		.loc 1 1995 6 is_stmt 0 view .LVU1448
 4767 0028 2146     		mov	r1, r4
 4768 002a 06F10800 		add	r0, r6, #8
 4769 002e FFF7FEFF 		bl	check_special_dn.isra.0
 4770              	.LVL503:
1995:src/display.c **** 	  return;
 4771              		.loc 1 1995 5 view .LVU1449
 4772 0032 8346     		mov	fp, r0
 4773 0034 0028     		cmp	r0, #0
 4774 0036 40F06F81 		bne	.L444
1998:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4775              		.loc 1 1998 2 is_stmt 1 view .LVU1450
1998:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4776              		.loc 1 1998 12 is_stmt 0 view .LVU1451
 4777 003a DFF8F092 		ldr	r9, .L679+4
1998:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4778              		.loc 1 1998 5 view .LVU1452
 4779 003e 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4780 0042 012B     		cmp	r3, #1
 4781 0044 00F0AF82 		beq	.L660
1941:src/display.c **** 	char *p = mantissa;
 4782              		.loc 1 1941 6 view .LVU1453
 4783 0048 0190     		str	r0, [sp, #4]
 4784              	.LVL504:
 4785              	.L451:
2004:src/display.c **** 
 4786              		.loc 1 2004 2 is_stmt 1 view .LVU1454
 4787 004a 0DF11408 		add	r8, sp, #20
 4788              	.LVL505:
2004:src/display.c **** 
 4789              		.loc 1 2004 2 is_stmt 0 view .LVU1455
 4790 004e 4046     		mov	r0, r8
 4791 0050 3222     		movs	r2, #50
 4792 0052 0021     		movs	r1, #0
 4793 0054 FFF7FEFF 		bl	xset
 4794              	.LVL506:
2006:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4795              		.loc 1 2006 2 is_stmt 1 view .LVU1456
2006:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4796              		.loc 1 2006 6 is_stmt 0 view .LVU1457
 4797 0058 3046     		mov	r0, r6
 4798 005a FFF7FEFF 		bl	dn_eq0
 4799              	.LVL507:
2006:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4800              		.loc 1 2006 5 view .LVU1458
 4801 005e 0028     		cmp	r0, #0
 4802 0060 00F05D81 		beq	.L452
2007:src/display.c **** 	    x[0] = '-';
 4803              		.loc 1 2007 4 is_stmt 1 view .LVU1459
2007:src/display.c **** 	    x[0] = '-';
 4804              		.loc 1 2007 7 is_stmt 0 view .LVU1460
 4805 0064 96F90830 		ldrsb	r3, [r6, #8]
 4806 0068 002B     		cmp	r3, #0
 4807 006a C0F2C182 		blt	.L661
ARM GAS  /tmp/cchyQ5Gz.s 			page 169


 4808              	.L453:
2011:src/display.c **** 	} else
 4809              		.loc 1 2011 6 is_stmt 1 view .LVU1461
2011:src/display.c **** 	} else
 4810              		.loc 1 2011 11 is_stmt 0 view .LVU1462
 4811 006e 3023     		movs	r3, #48
 4812 0070 8DF81430 		strb	r3, [sp, #20]
 4813              	.L454:
2015:src/display.c **** 	  show_x(x, exp);
 4814              		.loc 1 2015 2 is_stmt 1 view .LVU1463
2015:src/display.c **** 	  show_x(x, exp);
 4815              		.loc 1 2015 12 is_stmt 0 view .LVU1464
 4816 0074 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
2015:src/display.c **** 	  show_x(x, exp);
 4817              		.loc 1 2015 5 view .LVU1465
 4818 0078 BAF1010F 		cmp	r10, #1
 4819 007c 00F0F082 		beq	.L662
2038:src/display.c **** 	  mode = std_round_fix(z);
 4820              		.loc 1 2038 2 is_stmt 1 view .LVU1466
2038:src/display.c **** 	  mode = std_round_fix(z);
 4821              		.loc 1 2038 5 is_stmt 0 view .LVU1467
 4822 0080 002F     		cmp	r7, #0
 4823 0082 00F0FD81 		beq	.L663
2042:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4824              		.loc 1 2042 19 view .LVU1468
 4825 0086 009B     		ldr	r3, [sp]
 4826 0088 1B68     		ldr	r3, [r3]
2042:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4827              		.loc 1 2042 12 view .LVU1469
 4828 008a AB42     		cmp	r3, r5
1952:src/display.c **** 	int mode = UState.dispmode;
 4829              		.loc 1 1952 6 view .LVU1470
 4830 008c AA46     		mov	r10, r5
2042:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
 4831              		.loc 1 2042 9 is_stmt 1 view .LVU1471
2044:src/display.c **** #endif
 4832              		.loc 1 2044 4 view .LVU1472
2044:src/display.c **** #endif
 4833              		.loc 1 2044 7 is_stmt 0 view .LVU1473
 4834 008e D8BF     		it	le
 4835 0090 03F1FF3A 		addle	r10, r3, #-1
1957:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4836              		.loc 1 1957 6 view .LVU1474
 4837 0094 0023     		movs	r3, #0
 4838 0096 0193     		str	r3, [sp, #4]
 4839              	.LVL508:
 4840              	.L467:
2047:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4841              		.loc 1 2047 2 is_stmt 1 view .LVU1475
 4842 0098 0DF14809 		add	r9, sp, #72
 4843              	.LVL509:
2047:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4844              		.loc 1 2047 2 is_stmt 0 view .LVU1476
 4845 009c 3021     		movs	r1, #48
 4846 009e 4846     		mov	r0, r9
 4847 00a0 3F22     		movs	r2, #63
 4848 00a2 FFF7FEFF 		bl	xset
ARM GAS  /tmp/cchyQ5Gz.s 			page 170


 4849              	.LVL510:
2048:src/display.c **** 
 4850              		.loc 1 2048 2 is_stmt 1 view .LVU1477
2048:src/display.c **** 
 4851              		.loc 1 2048 31 is_stmt 0 view .LVU1478
 4852 00a6 0023     		movs	r3, #0
2050:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4853              		.loc 1 2050 6 view .LVU1479
 4854 00a8 4521     		movs	r1, #69
 4855 00aa 4046     		mov	r0, r8
2048:src/display.c **** 
 4856              		.loc 1 2048 31 view .LVU1480
 4857 00ac 8DF88730 		strb	r3, [sp, #135]
2050:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4858              		.loc 1 2050 2 is_stmt 1 view .LVU1481
2050:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4859              		.loc 1 2050 6 is_stmt 0 view .LVU1482
 4860 00b0 FFF7FEFF 		bl	find_char
 4861              	.LVL511:
2059:src/display.c **** 	else exp = s_to_i(q+1);
 4862              		.loc 1 2059 2 is_stmt 1 view .LVU1483
2059:src/display.c **** 	else exp = s_to_i(q+1);
 4863              		.loc 1 2059 5 is_stmt 0 view .LVU1484
 4864 00b4 0028     		cmp	r0, #0
 4865 00b6 00F05C81 		beq	.L568
2060:src/display.c **** #endif
 4866              		.loc 1 2060 7 is_stmt 1 view .LVU1485
2060:src/display.c **** #endif
 4867              		.loc 1 2060 13 is_stmt 0 view .LVU1486
 4868 00ba 0130     		adds	r0, r0, #1
 4869              	.LVL512:
2060:src/display.c **** #endif
 4870              		.loc 1 2060 13 view .LVU1487
 4871 00bc FFF7FEFF 		bl	s_to_i
 4872              	.LVL513:
2060:src/display.c **** #endif
 4873              		.loc 1 2060 13 view .LVU1488
 4874 00c0 0546     		mov	r5, r0
 4875              	.LVL514:
 4876              	.L468:
2064:src/display.c **** 	if (!res) {
 4877              		.loc 1 2064 2 is_stmt 1 view .LVU1489
2064:src/display.c **** 	if (!res) {
 4878              		.loc 1 2064 12 view .LVU1490
2064:src/display.c **** 	if (!res) {
 4879              		.loc 1 2064 2 is_stmt 0 view .LVU1491
 4880 00c2 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4881 00c6 202B     		cmp	r3, #32
2064:src/display.c **** 	if (!res) {
 4882              		.loc 1 2064 8 view .LVU1492
 4883 00c8 4646     		mov	r6, r8
 4884              	.LVL515:
2064:src/display.c **** 	if (!res) {
 4885              		.loc 1 2064 2 view .LVU1493
 4886 00ca 03D1     		bne	.L469
 4887              	.LVL516:
 4888              	.L470:
ARM GAS  /tmp/cchyQ5Gz.s 			page 171


2064:src/display.c **** 	if (!res) {
 4889              		.loc 1 2064 27 is_stmt 1 discriminator 3 view .LVU1494
2064:src/display.c **** 	if (!res) {
 4890              		.loc 1 2064 23 discriminator 3 view .LVU1495
2064:src/display.c **** 	if (!res) {
 4891              		.loc 1 2064 12 discriminator 3 view .LVU1496
2064:src/display.c **** 	if (!res) {
 4892              		.loc 1 2064 2 is_stmt 0 discriminator 3 view .LVU1497
 4893 00cc 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4894              	.LVL517:
2064:src/display.c **** 	if (!res) {
 4895              		.loc 1 2064 2 discriminator 3 view .LVU1498
 4896 00d0 202B     		cmp	r3, #32
 4897 00d2 FBD0     		beq	.L470
 4898              	.LVL518:
 4899              	.L469:
2065:src/display.c **** 	  CLR_EXP_SIGN;
 4900              		.loc 1 2065 2 is_stmt 1 view .LVU1499
2065:src/display.c **** 	  CLR_EXP_SIGN;
 4901              		.loc 1 2065 5 is_stmt 0 view .LVU1500
 4902 00d4 002C     		cmp	r4, #0
 4903 00d6 00F09682 		beq	.L664
 4904              	.L471:
2069:src/display.c **** 	  negative = 1;
 4905              		.loc 1 2069 2 is_stmt 1 view .LVU1501
2069:src/display.c **** 	  negative = 1;
 4906              		.loc 1 2069 6 is_stmt 0 view .LVU1502
 4907 00da 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
2069:src/display.c **** 	  negative = 1;
 4908              		.loc 1 2069 5 view .LVU1503
 4909 00dc 2D2B     		cmp	r3, #45
 4910 00de 00F0CA81 		beq	.L665
2072:src/display.c **** 	  q++;
 4911              		.loc 1 2072 9 is_stmt 1 view .LVU1504
2072:src/display.c **** 	  q++;
 4912              		.loc 1 2072 12 is_stmt 0 view .LVU1505
 4913 00e2 2B2B     		cmp	r3, #43
 4914 00e4 00F06E82 		beq	.L666
1956:src/display.c **** 	int trimzeros = 0;
 4915              		.loc 1 1956 6 view .LVU1506
 4916 00e8 4FF0000E 		mov	lr, #0
 4917              	.LVL519:
 4918              	.L473:
2074:src/display.c **** 	if (*q == '.') {
 4919              		.loc 1 2074 9 is_stmt 1 discriminator 1 view .LVU1507
2074:src/display.c **** 	if (*q == '.') {
 4920              		.loc 1 2074 2 is_stmt 0 discriminator 1 view .LVU1508
 4921 00ec 302B     		cmp	r3, #48
 4922 00ee 03D1     		bne	.L475
 4923              	.LVL520:
 4924              	.L474:
2074:src/display.c **** 	if (*q == '.') {
 4925              		.loc 1 2074 24 is_stmt 1 discriminator 2 view .LVU1509
2074:src/display.c **** 	if (*q == '.') {
 4926              		.loc 1 2074 20 discriminator 2 view .LVU1510
2074:src/display.c **** 	if (*q == '.') {
 4927              		.loc 1 2074 9 discriminator 2 view .LVU1511
ARM GAS  /tmp/cchyQ5Gz.s 			page 172


 4928 00f0 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4929              	.LVL521:
2074:src/display.c **** 	if (*q == '.') {
 4930              		.loc 1 2074 2 is_stmt 0 discriminator 2 view .LVU1512
 4931 00f4 302B     		cmp	r3, #48
 4932 00f6 FBD0     		beq	.L474
 4933              	.LVL522:
 4934              	.L475:
2075:src/display.c **** 	  do
 4935              		.loc 1 2075 2 is_stmt 1 view .LVU1513
2075:src/display.c **** 	  do
 4936              		.loc 1 2075 5 is_stmt 0 view .LVU1514
 4937 00f8 2E2B     		cmp	r3, #46
 4938 00fa 00F0A681 		beq	.L667
2082:src/display.c **** 	    *p++ = *q++;
 4939              		.loc 1 2082 4 is_stmt 1 view .LVU1515
2082:src/display.c **** 	    *p++ = *q++;
 4940              		.loc 1 2082 7 is_stmt 0 view .LVU1516
 4941 00fe A3F13002 		sub	r2, r3, #48
 4942 0102 092A     		cmp	r2, #9
2083:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4943              		.loc 1 2083 6 is_stmt 1 view .LVU1517
 4944              	.LVL523:
2083:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4945              		.loc 1 2083 15 is_stmt 0 view .LVU1518
 4946 0104 9CBF     		itt	ls
 4947 0106 0136     		addls	r6, r6, #1
 4948              	.LVL524:
2083:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4949              		.loc 1 2083 11 view .LVU1519
 4950 0108 8DF84830 		strbls	r3, [sp, #72]
2084:src/display.c **** 	    *p++ = *q++;
 4951              		.loc 1 2084 11 view .LVU1520
 4952 010c 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
2084:src/display.c **** 	    *p++ = *q++;
 4953              		.loc 1 2084 10 view .LVU1521
 4954 010e A2F13003 		sub	r3, r2, #48
2083:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4955              		.loc 1 2083 8 view .LVU1522
 4956 0112 94BF     		ite	ls
 4957 0114 0DF14901 		addls	r1, sp, #73
1942:src/display.c **** 	char *r;
 4958              		.loc 1 1942 8 view .LVU1523
 4959 0118 4946     		movhi	r1, r9
 4960              	.LVL525:
2084:src/display.c **** 	    *p++ = *q++;
 4961              		.loc 1 2084 10 is_stmt 1 view .LVU1524
 4962 011a 092B     		cmp	r3, #9
 4963 011c 0CD8     		bhi	.L481
 4964 011e A81B     		subs	r0, r5, r6
 4965 0120 731C     		adds	r3, r6, #1
 4966              	.L482:
 4967              	.LVL526:
2085:src/display.c **** 	    exp++;
 4968              		.loc 1 2085 6 view .LVU1525
2085:src/display.c **** 	    exp++;
 4969              		.loc 1 2085 11 is_stmt 0 view .LVU1526
ARM GAS  /tmp/cchyQ5Gz.s 			page 173


 4970 0122 01F8012B 		strb	r2, [r1], #1
 4971              	.LVL527:
2085:src/display.c **** 	    exp++;
 4972              		.loc 1 2085 15 view .LVU1527
 4973 0126 1E46     		mov	r6, r3
 4974              	.LVL528:
2086:src/display.c **** 	  }
 4975              		.loc 1 2086 6 is_stmt 1 view .LVU1528
 4976 0128 C518     		adds	r5, r0, r3
 4977              	.LVL529:
2084:src/display.c **** 	    *p++ = *q++;
 4978              		.loc 1 2084 10 view .LVU1529
2084:src/display.c **** 	    *p++ = *q++;
 4979              		.loc 1 2084 11 is_stmt 0 view .LVU1530
 4980 012a 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4981              	.LVL530:
2084:src/display.c **** 	    *p++ = *q++;
 4982              		.loc 1 2084 10 view .LVU1531
 4983 012e A2F1300C 		sub	ip, r2, #48
 4984 0132 BCF1090F 		cmp	ip, #9
 4985 0136 F4D9     		bls	.L482
 4986              	.LVL531:
 4987              	.L481:
2088:src/display.c **** 	    q++;
 4988              		.loc 1 2088 4 is_stmt 1 view .LVU1532
2088:src/display.c **** 	    q++;
 4989              		.loc 1 2088 7 is_stmt 0 view .LVU1533
 4990 0138 2E2A     		cmp	r2, #46
 4991 013a 00F04882 		beq	.L668
 4992              	.LVL532:
 4993              	.L478:
2095:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4994              		.loc 1 2095 2 is_stmt 1 view .LVU1534
2096:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4995              		.loc 1 2096 12 is_stmt 0 view .LVU1535
 4996 013e 009B     		ldr	r3, [sp]
2095:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4997              		.loc 1 2095 5 view .LVU1536
 4998 0140 012F     		cmp	r7, #1
2096:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4999              		.loc 1 2096 12 view .LVU1537
 5000 0142 1E68     		ldr	r6, [r3]
2095:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5001              		.loc 1 2095 5 view .LVU1538
 5002 0144 00F06F81 		beq	.L669
 5003 0148 0022     		movs	r2, #0
 5004              	.LVL533:
 5005              	.L484:
2109:src/display.c **** 	if (*p >= '5') {	// Round up
 5006              		.loc 1 2109 2 is_stmt 1 view .LVU1539
2109:src/display.c **** 	if (*p >= '5') {	// Round up
 5007              		.loc 1 2109 20 is_stmt 0 view .LVU1540
 5008 014a 5244     		add	r2, r2, r10
2109:src/display.c **** 	if (*p >= '5') {	// Round up
 5009              		.loc 1 2109 35 view .LVU1541
 5010 014c 501C     		adds	r0, r2, #1
2109:src/display.c **** 	if (*p >= '5') {	// Round up
ARM GAS  /tmp/cchyQ5Gz.s 			page 174


 5011              		.loc 1 2109 4 view .LVU1542
 5012 014e 09EB0003 		add	r3, r9, r0
 5013              	.LVL534:
2110:src/display.c **** 	  *p = '0';
 5014              		.loc 1 2110 2 is_stmt 1 view .LVU1543
2110:src/display.c **** 	  *p = '0';
 5015              		.loc 1 2110 6 is_stmt 0 view .LVU1544
 5016 0152 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
2110:src/display.c **** 	  *p = '0';
 5017              		.loc 1 2110 5 view .LVU1545
 5018 0156 3429     		cmp	r1, #52
 5019 0158 21D9     		bls	.L488
2111:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5020              		.loc 1 2111 4 is_stmt 1 view .LVU1546
2111:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5021              		.loc 1 2111 7 is_stmt 0 view .LVU1547
 5022 015a 3021     		movs	r1, #48
 5023 015c 09F80010 		strb	r1, [r9, r0]
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5024              		.loc 1 2112 4 is_stmt 1 view .LVU1548
 5025              	.LVL535:
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5026              		.loc 1 2112 23 view .LVU1549
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5027              		.loc 1 2112 4 is_stmt 0 view .LVU1550
 5028 0160 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 5029 0164 3929     		cmp	r1, #57
 5030 0166 40F0A683 		bne	.L489
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5031              		.loc 1 2112 11 view .LVU1551
 5032 016a 4946     		mov	r1, r9
 5033              	.LVL536:
 5034              	.L490:
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5035              		.loc 1 2112 38 is_stmt 1 discriminator 3 view .LVU1552
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5036              		.loc 1 2112 34 discriminator 3 view .LVU1553
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5037              		.loc 1 2112 23 discriminator 3 view .LVU1554
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5038              		.loc 1 2112 4 is_stmt 0 discriminator 3 view .LVU1555
 5039 016c 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 5040              	.LVL537:
2112:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5041              		.loc 1 2112 4 discriminator 3 view .LVU1556
 5042 0170 BCF1390F 		cmp	ip, #57
 5043 0174 FAD0     		beq	.L490
2113:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5044              		.loc 1 2113 4 is_stmt 1 view .LVU1557
2113:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5045              		.loc 1 2113 7 is_stmt 0 view .LVU1558
 5046 0176 8B42     		cmp	r3, r1
 5047 0178 00F0FD80 		beq	.L670
 5048              	.LVL538:
 5049              	.L560:
2122:src/display.c **** 	      *p = '0';
 5050              		.loc 1 2122 12 is_stmt 1 view .LVU1559
ARM GAS  /tmp/cchyQ5Gz.s 			page 175


2122:src/display.c **** 	      *p = '0';
 5051              		.loc 1 2122 13 is_stmt 0 view .LVU1560
 5052 017c 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
2122:src/display.c **** 	      *p = '0';
 5053              		.loc 1 2122 12 view .LVU1561
 5054 0180 3929     		cmp	r1, #57
 5055 0182 4A44     		add	r2, r2, r9
 5056              	.LVL539:
2122:src/display.c **** 	      *p = '0';
 5057              		.loc 1 2122 12 view .LVU1562
 5058 0184 07D1     		bne	.L493
2123:src/display.c **** 	    (*p)++;
 5059              		.loc 1 2123 11 view .LVU1563
 5060 0186 4FF0300C 		mov	ip, #48
 5061              	.L492:
2123:src/display.c **** 	    (*p)++;
 5062              		.loc 1 2123 8 is_stmt 1 view .LVU1564
2123:src/display.c **** 	    (*p)++;
 5063              		.loc 1 2123 11 is_stmt 0 view .LVU1565
 5064 018a 82F800C0 		strb	ip, [r2]
2122:src/display.c **** 	      *p = '0';
 5065              		.loc 1 2122 12 is_stmt 1 view .LVU1566
 5066              	.LVL540:
2122:src/display.c **** 	      *p = '0';
 5067              		.loc 1 2122 13 is_stmt 0 view .LVU1567
 5068 018e 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 5069              	.LVL541:
2122:src/display.c **** 	      *p = '0';
 5070              		.loc 1 2122 12 view .LVU1568
 5071 0192 3929     		cmp	r1, #57
 5072 0194 F9D0     		beq	.L492
 5073              	.L493:
2124:src/display.c **** 	  }
 5074              		.loc 1 2124 6 is_stmt 1 view .LVU1569
2124:src/display.c **** 	  }
 5075              		.loc 1 2124 10 is_stmt 0 view .LVU1570
 5076 0196 0131     		adds	r1, r1, #1
 5077 0198 1170     		strb	r1, [r2]
 5078              	.LVL542:
 5079              	.L657:
2124:src/display.c **** 	  }
 5080              		.loc 1 2124 10 view .LVU1571
 5081 019a 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 5082              	.L488:
2129:src/display.c **** 
 5083              		.loc 1 2129 2 is_stmt 1 view .LVU1572
 5084              	.LVL543:
2129:src/display.c **** 
 5085              		.loc 1 2129 45 view .LVU1573
2129:src/display.c **** 
 5086              		.loc 1 2129 2 is_stmt 0 view .LVU1574
 5087 019e 29B1     		cbz	r1, .L499
 5088              	.LVL544:
 5089              	.L559:
2129:src/display.c **** 
 5090              		.loc 1 2129 62 view .LVU1575
 5091 01a0 3021     		movs	r1, #48
ARM GAS  /tmp/cchyQ5Gz.s 			page 176


 5092              	.L500:
2129:src/display.c **** 
 5093              		.loc 1 2129 68 is_stmt 1 discriminator 3 view .LVU1576
2129:src/display.c **** 
 5094              		.loc 1 2129 57 discriminator 3 view .LVU1577
 5095              	.LVL545:
2129:src/display.c **** 
 5096              		.loc 1 2129 62 is_stmt 0 discriminator 3 view .LVU1578
 5097 01a2 03F8011B 		strb	r1, [r3], #1
 5098              	.LVL546:
2129:src/display.c **** 
 5099              		.loc 1 2129 45 is_stmt 1 discriminator 3 view .LVU1579
2129:src/display.c **** 
 5100              		.loc 1 2129 2 is_stmt 0 discriminator 3 view .LVU1580
 5101 01a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5102 01a8 002A     		cmp	r2, #0
 5103 01aa FAD1     		bne	.L500
 5104              	.L499:
2131:src/display.c **** 	switch (mode) {
 5105              		.loc 1 2131 2 is_stmt 1 view .LVU1581
 5106              	.LVL547:
2132:src/display.c **** 	default:
 5107              		.loc 1 2132 2 view .LVU1582
 5108 01ac 022F     		cmp	r7, #2
 5109 01ae 5AD0     		beq	.L582
 5110 01b0 032F     		cmp	r7, #3
 5111 01b2 00F00481 		beq	.L502
 5112 01b6 012F     		cmp	r7, #1
 5113 01b8 00F0B681 		beq	.L503
2135:src/display.c **** 	  if (count != *display_digits)
 5114              		.loc 1 2135 4 view .LVU1583
 5115              	.LVL548:
2135:src/display.c **** 	  if (count != *display_digits)
 5116              		.loc 1 2135 34 view .LVU1584
2135:src/display.c **** 	  if (count != *display_digits)
 5117              		.loc 1 2135 42 is_stmt 0 view .LVU1585
 5118 01bc 22AB     		add	r3, sp, #136
 5119 01be 3344     		add	r3, r3, r6
2135:src/display.c **** 	  if (count != *display_digits)
 5120              		.loc 1 2135 4 view .LVU1586
 5121 01c0 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5122 01c4 302B     		cmp	r3, #48
 5123 01c6 40F06783 		bne	.L576
 5124 01ca 711E     		subs	r1, r6, #1
 5125 01cc 4944     		add	r1, r1, r9
2135:src/display.c **** 	  if (count != *display_digits)
 5126              		.loc 1 2135 15 view .LVU1587
 5127 01ce 3346     		mov	r3, r6
 5128              	.LVL549:
 5129              	.L505:
2135:src/display.c **** 	  if (count != *display_digits)
 5130              		.loc 1 2135 66 is_stmt 1 discriminator 3 view .LVU1588
2135:src/display.c **** 	  if (count != *display_digits)
 5131              		.loc 1 2135 58 discriminator 3 view .LVU1589
2135:src/display.c **** 	  if (count != *display_digits)
 5132              		.loc 1 2135 42 is_stmt 0 discriminator 3 view .LVU1590
 5133 01d0 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
ARM GAS  /tmp/cchyQ5Gz.s 			page 177


2135:src/display.c **** 	  if (count != *display_digits)
 5134              		.loc 1 2135 4 discriminator 3 view .LVU1591
 5135 01d4 3028     		cmp	r0, #48
 5136 01d6 1A46     		mov	r2, r3
2135:src/display.c **** 	  if (count != *display_digits)
 5137              		.loc 1 2135 63 discriminator 3 view .LVU1592
 5138 01d8 03F1FF33 		add	r3, r3, #-1
 5139              	.LVL550:
2135:src/display.c **** 	  if (count != *display_digits)
 5140              		.loc 1 2135 34 is_stmt 1 discriminator 3 view .LVU1593
2135:src/display.c **** 	  if (count != *display_digits)
 5141              		.loc 1 2135 4 is_stmt 0 discriminator 3 view .LVU1594
 5142 01dc F8D0     		beq	.L505
2136:src/display.c **** 	    count++;
 5143              		.loc 1 2136 4 is_stmt 1 view .LVU1595
2136:src/display.c **** 	    count++;
 5144              		.loc 1 2136 7 is_stmt 0 view .LVU1596
 5145 01de 9E42     		cmp	r6, r3
 5146 01e0 08BF     		it	eq
 5147 01e2 1A46     		moveq	r2, r3
 5148              	.LVL551:
 5149              	.L504:
2139:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5150              		.loc 1 2139 4 is_stmt 1 view .LVU1597
2139:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5151              		.loc 1 2139 7 is_stmt 0 view .LVU1598
 5152 01e4 B542     		cmp	r5, r6
 5153 01e6 80F20381 		bge	.L506
2139:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5154              		.loc 1 2139 47 discriminator 1 view .LVU1599
 5155 01ea 931B     		subs	r3, r2, r6
2139:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5156              		.loc 1 2139 31 discriminator 1 view .LVU1600
 5157 01ec AB42     		cmp	r3, r5
 5158 01ee 00F3FF80 		bgt	.L506
2164:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5159              		.loc 1 2164 11 is_stmt 1 view .LVU1601
2164:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5160              		.loc 1 2164 14 is_stmt 0 view .LVU1602
 5161 01f2 002D     		cmp	r5, #0
 5162 01f4 C0F27583 		blt	.L514
 5163 01f8 6B1C     		adds	r3, r5, #1
2166:src/display.c **** 		*obp++ = ',';
 5164              		.loc 1 2166 31 view .LVU1603
 5165 01fa DFF834A1 		ldr	r10, .L679+8
 5166 01fe 0293     		str	r3, [sp, #8]
 5167 0200 09EB0300 		add	r0, r9, r3
2131:src/display.c **** 	switch (mode) {
 5168              		.loc 1 2131 4 view .LVU1604
 5169 0204 CC46     		mov	ip, r9
1936:src/display.c **** 	int odig = 0;
 5170              		.loc 1 1936 15 view .LVU1605
 5171 0206 4146     		mov	r1, r8
 5172 0208 0192     		str	r2, [sp, #4]
 5173              	.LVL552:
1936:src/display.c **** 	int odig = 0;
 5174              		.loc 1 1936 15 view .LVU1606
ARM GAS  /tmp/cchyQ5Gz.s 			page 178


 5175 020a 05E0     		b	.L515
 5176              	.LVL553:
 5177              	.L518:
2167:src/display.c **** 	      *obp++ = *p++;
 5178              		.loc 1 2167 3 is_stmt 1 view .LVU1607
2166:src/display.c **** 		*obp++ = ',';
 5179              		.loc 1 2166 18 is_stmt 0 view .LVU1608
 5180 020c 022F     		cmp	r7, #2
2167:src/display.c **** 	      *obp++ = *p++;
 5181              		.loc 1 2167 10 view .LVU1609
 5182 020e 05BF     		ittet	eq
 5183 0210 2C23     		moveq	r3, #44
 5184 0212 4B70     		strbeq	r3, [r1, #1]
2168:src/display.c **** 	      odig++;
 5185              		.loc 1 2168 12 view .LVU1610
 5186 0214 0131     		addne	r1, r1, #1
 5187              	.LVL554:
2167:src/display.c **** 	      *obp++ = *p++;
 5188              		.loc 1 2167 7 view .LVU1611
 5189 0216 0231     		addeq	r1, r1, #2
 5190              	.LVL555:
 5191              	.L515:
2168:src/display.c **** 	      odig++;
 5192              		.loc 1 2168 8 is_stmt 1 discriminator 2 view .LVU1612
2168:src/display.c **** 	      odig++;
 5193              		.loc 1 2168 15 is_stmt 0 discriminator 2 view .LVU1613
 5194 0218 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5195              	.LVL556:
2166:src/display.c **** 		*obp++ = ',';
 5196              		.loc 1 2166 8 is_stmt 1 discriminator 2 view .LVU1614
2168:src/display.c **** 	      odig++;
 5197              		.loc 1 2168 15 is_stmt 0 discriminator 2 view .LVU1615
 5198 021c 0B70     		strb	r3, [r1]
2169:src/display.c **** 	    }
 5199              		.loc 1 2169 8 is_stmt 1 discriminator 2 view .LVU1616
 5200              	.LVL557:
2165:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5201              		.loc 1 2165 23 discriminator 2 view .LVU1617
2165:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5202              		.loc 1 2165 15 discriminator 2 view .LVU1618
2166:src/display.c **** 		*obp++ = ',';
 5203              		.loc 1 2166 31 is_stmt 0 discriminator 2 view .LVU1619
 5204 021e A9EB0C03 		sub	r3, r9, ip
 5205 0222 2B44     		add	r3, r3, r5
 5206 0224 8AFB0327 		smull	r2, r7, r10, r3
 5207 0228 A7EBE377 		sub	r7, r7, r3, asr #31
 5208 022c 07EB4707 		add	r7, r7, r7, lsl #1
2165:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5209              		.loc 1 2165 6 discriminator 2 view .LVU1620
 5210 0230 6045     		cmp	r0, ip
2166:src/display.c **** 		*obp++ = ',';
 5211              		.loc 1 2166 31 discriminator 2 view .LVU1621
 5212 0232 A3EB0707 		sub	r7, r3, r7
2165:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5213              		.loc 1 2165 6 discriminator 2 view .LVU1622
 5214 0236 E9D1     		bne	.L518
 5215 0238 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/cchyQ5Gz.s 			page 179


 5216 023a 029F     		ldr	r7, [sp, #8]
2171:src/display.c **** 	    if (count > (exp + 1)) {
 5217              		.loc 1 2171 6 is_stmt 1 view .LVU1623
2171:src/display.c **** 	    if (count > (exp + 1)) {
 5218              		.loc 1 2171 13 is_stmt 0 view .LVU1624
 5219 023c 2E23     		movs	r3, #46
2172:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5220              		.loc 1 2172 9 view .LVU1625
 5221 023e BA42     		cmp	r2, r7
2171:src/display.c **** 	    if (count > (exp + 1)) {
 5222              		.loc 1 2171 13 view .LVU1626
 5223 0240 4B70     		strb	r3, [r1, #1]
2171:src/display.c **** 	    if (count > (exp + 1)) {
 5224              		.loc 1 2171 10 view .LVU1627
 5225 0242 01F10203 		add	r3, r1, #2
 5226              	.LVL558:
2172:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5227              		.loc 1 2172 6 is_stmt 1 view .LVU1628
2172:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5228              		.loc 1 2172 9 is_stmt 0 view .LVU1629
 5229 0246 2BDD     		ble	.L512
 5230 0248 A2EB050C 		sub	ip, r2, r5
 5231              	.LVL559:
2172:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5232              		.loc 1 2172 9 view .LVU1630
 5233 024c 8C44     		add	ip, ip, r1
 5234 024e 0131     		adds	r1, r1, #1
 5235              	.LVL560:
 5236              	.L519:
2174:src/display.c **** 		odig++;
 5237              		.loc 1 2174 3 is_stmt 1 discriminator 3 view .LVU1631
2174:src/display.c **** 		odig++;
 5238              		.loc 1 2174 10 is_stmt 0 discriminator 3 view .LVU1632
 5239 0250 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5240              	.LVL561:
2174:src/display.c **** 		odig++;
 5241              		.loc 1 2174 10 discriminator 3 view .LVU1633
 5242 0254 01F8017F 		strb	r7, [r1, #1]!
2175:src/display.c **** 	      }
 5243              		.loc 1 2175 3 is_stmt 1 discriminator 3 view .LVU1634
2173:src/display.c **** 		*obp++ = *p++;
 5244              		.loc 1 2173 31 discriminator 3 view .LVU1635
2173:src/display.c **** 		*obp++ = *p++;
 5245              		.loc 1 2173 22 discriminator 3 view .LVU1636
2173:src/display.c **** 		*obp++ = *p++;
 5246              		.loc 1 2173 8 is_stmt 0 discriminator 3 view .LVU1637
 5247 0258 8C45     		cmp	ip, r1
 5248 025a F9D1     		bne	.L519
 5249 025c E943     		mvns	r1, r5
 5250 025e 1144     		add	r1, r1, r2
 5251 0260 0B44     		add	r3, r3, r1
 5252              	.LVL562:
2175:src/display.c **** 	      }
 5253              		.loc 1 2175 7 view .LVU1638
 5254 0262 1746     		mov	r7, r2
 5255 0264 1CE0     		b	.L512
 5256              	.LVL563:
ARM GAS  /tmp/cchyQ5Gz.s 			page 180


 5257              	.L582:
2231:src/display.c **** 	  case -1:
 5258              		.loc 1 2231 16 view .LVU1639
 5259 0266 0127     		movs	r7, #1
 5260              	.LVL564:
 5261              	.L658:
2231:src/display.c **** 	  case -1:
 5262              		.loc 1 2231 16 view .LVU1640
 5263 0268 4146     		mov	r1, r8
 5264              	.LVL565:
 5265              	.L501:
2245:src/display.c **** 	  };
 5266              		.loc 1 2245 6 is_stmt 1 view .LVU1641
2246:src/display.c **** 	  // Falling through
 5267              		.loc 1 2246 5 view .LVU1642
2250:src/display.c **** 	  odig++;
 5268              		.loc 1 2250 4 view .LVU1643
2250:src/display.c **** 	  odig++;
 5269              		.loc 1 2250 15 is_stmt 0 view .LVU1644
 5270 026a 4A46     		mov	r2, r9
 5271              	.LVL566:
2250:src/display.c **** 	  odig++;
 5272              		.loc 1 2250 11 view .LVU1645
 5273 026c 0B46     		mov	r3, r1
 5274 026e 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5275              	.LVL567:
2250:src/display.c **** 	  odig++;
 5276              		.loc 1 2250 11 view .LVU1646
 5277 0272 03F8020B 		strb	r0, [r3], #2
2251:src/display.c **** 	  *obp++ = '.';
 5278              		.loc 1 2251 4 is_stmt 1 view .LVU1647
2252:src/display.c **** 	  dd--;
 5279              		.loc 1 2252 4 view .LVU1648
 5280              	.LVL568:
2254:src/display.c **** 	    *obp++ = *p++;
 5281              		.loc 1 2254 10 is_stmt 0 view .LVU1649
 5282 0276 BAF1000F 		cmp	r10, #0
2252:src/display.c **** 	  dd--;
 5283              		.loc 1 2252 11 view .LVU1650
 5284 027a 4FF02E00 		mov	r0, #46
 5285 027e 4870     		strb	r0, [r1, #1]
2253:src/display.c **** 	  while (dd-- >= 0) {
 5286              		.loc 1 2253 4 is_stmt 1 view .LVU1651
2254:src/display.c **** 	    *obp++ = *p++;
 5287              		.loc 1 2254 4 view .LVU1652
2254:src/display.c **** 	    *obp++ = *p++;
 5288              		.loc 1 2254 10 view .LVU1653
2254:src/display.c **** 	    *obp++ = *p++;
 5289              		.loc 1 2254 10 is_stmt 0 view .LVU1654
 5290 0280 40F30F83 		ble	.L579
2254:src/display.c **** 	    *obp++ = *p++;
 5291              		.loc 1 2254 10 view .LVU1655
 5292 0284 0AF10100 		add	r0, r10, #1
 5293 0288 0131     		adds	r1, r1, #1
 5294 028a 8144     		add	r9, r9, r0
 5295              	.LVL569:
 5296              	.L542:
ARM GAS  /tmp/cchyQ5Gz.s 			page 181


2255:src/display.c **** 	    odig++;
 5297              		.loc 1 2255 6 is_stmt 1 view .LVU1656
2255:src/display.c **** 	    odig++;
 5298              		.loc 1 2255 13 is_stmt 0 view .LVU1657
 5299 028c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5300              	.LVL570:
2255:src/display.c **** 	    odig++;
 5301              		.loc 1 2255 13 view .LVU1658
 5302 0290 01F8010F 		strb	r0, [r1, #1]!
2256:src/display.c **** 	  }
 5303              		.loc 1 2256 6 is_stmt 1 view .LVU1659
2254:src/display.c **** 	    *obp++ = *p++;
 5304              		.loc 1 2254 10 view .LVU1660
2254:src/display.c **** 	    *obp++ = *p++;
 5305              		.loc 1 2254 10 is_stmt 0 view .LVU1661
 5306 0294 4A45     		cmp	r2, r9
 5307 0296 F9D1     		bne	.L542
 5308 0298 5344     		add	r3, r3, r10
 5309 029a 5744     		add	r7, r7, r10
2258:src/display.c **** 	}
 5310              		.loc 1 2258 13 view .LVU1662
 5311 029c 4FF0010B 		mov	fp, #1
 5312              	.LVL571:
 5313              	.L512:
2267:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5314              		.loc 1 2267 2 is_stmt 1 view .LVU1663
2273:src/display.c **** 	if (odig > *display_digits)
 5315              		.loc 1 2273 2 view .LVU1664
 5316 02a0 B742     		cmp	r7, r6
 5317 02a2 A8BF     		it	ge
 5318 02a4 3746     		movge	r7, r6
 5319              	.LVL572:
2276:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5320              		.loc 1 2276 23 is_stmt 0 view .LVU1665
 5321 02a6 F61B     		subs	r6, r6, r7
2273:src/display.c **** 	if (odig > *display_digits)
 5322              		.loc 1 2273 7 view .LVU1666
 5323 02a8 0022     		movs	r2, #0
2276:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5324              		.loc 1 2276 4 view .LVU1667
 5325 02aa 06EBC606 		add	r6, r6, r6, lsl #3
2273:src/display.c **** 	if (odig > *display_digits)
 5326              		.loc 1 2273 7 view .LVU1668
 5327 02ae 1A70     		strb	r2, [r3]
2274:src/display.c **** 	  odig = *display_digits;
 5328              		.loc 1 2274 2 is_stmt 1 view .LVU1669
 5329              	.LVL573:
2276:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5330              		.loc 1 2276 2 view .LVU1670
2277:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5331              		.loc 1 2277 2 view .LVU1671
2279:src/display.c **** 	  if (res) *res++ = '-';
 5332              		.loc 1 2279 2 view .LVU1672
2279:src/display.c **** 	  if (res) *res++ = '-';
 5333              		.loc 1 2279 5 is_stmt 0 view .LVU1673
 5334 02b0 BEF1000F 		cmp	lr, #0
 5335 02b4 05D0     		beq	.L543
ARM GAS  /tmp/cchyQ5Gz.s 			page 182


2280:src/display.c **** 	  else {
 5336              		.loc 1 2280 4 is_stmt 1 view .LVU1674
2280:src/display.c **** 	  else {
 5337              		.loc 1 2280 7 is_stmt 0 view .LVU1675
 5338 02b6 002C     		cmp	r4, #0
 5339 02b8 00F0B281 		beq	.L544
2280:src/display.c **** 	  else {
 5340              		.loc 1 2280 13 is_stmt 1 discriminator 1 view .LVU1676
 5341              	.LVL574:
2280:src/display.c **** 	  else {
 5342              		.loc 1 2280 20 is_stmt 0 discriminator 1 view .LVU1677
 5343 02bc 2D22     		movs	r2, #45
 5344 02be 04F8012B 		strb	r2, [r4], #1
 5345              	.LVL575:
 5346              	.L543:
2288:src/display.c **** 	  if (c == '.') {
 5347              		.loc 1 2288 12 is_stmt 1 discriminator 1 view .LVU1678
2288:src/display.c **** 	  if (c == '.') {
 5348              		.loc 1 2288 18 is_stmt 0 discriminator 1 view .LVU1679
 5349 02c2 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5350              	.LVL576:
2288:src/display.c **** 	  if (c == '.') {
 5351              		.loc 1 2288 2 discriminator 1 view .LVU1680
 5352 02c6 E2B1     		cbz	r2, .L545
2288:src/display.c **** 	  if (c == '.') {
 5353              		.loc 1 2288 31 view .LVU1681
 5354 02c8 6B2E     		cmp	r6, #107
 5355 02ca 1ADC     		bgt	.L545
 5356              	.LVL577:
 5357              	.L546:
 5358              	.LBB415:
 5359              	.LBB416:
 370:src/display.c ****   } else {
 5360              		.loc 1 370 17 view .LVU1682
 5361 02cc 3946     		mov	r1, r7
 5362              	.LBE416:
 5363              	.LBE415:
2292:src/display.c **** 	  } else {
 5364              		.loc 1 2292 12 view .LVU1683
 5365 02ce DFF864A0 		ldr	r10, .L679+12
2290:src/display.c **** 	  } else if (c == ',') {
 5366              		.loc 1 2290 12 view .LVU1684
 5367 02d2 DFF86490 		ldr	r9, .L679+16
 5368              	.LBB420:
 5369              	.LBB417:
 370:src/display.c ****   } else {
 5370              		.loc 1 370 17 view .LVU1685
 5371 02d6 1F46     		mov	r7, r3
 5372              	.LVL578:
 370:src/display.c ****   } else {
 5373              		.loc 1 370 17 view .LVU1686
 5374 02d8 0B46     		mov	r3, r1
 5375              	.LVL579:
 5376              	.L555:
 370:src/display.c ****   } else {
 5377              		.loc 1 370 17 view .LVU1687
 5378              	.LBE417:
ARM GAS  /tmp/cchyQ5Gz.s 			page 183


 5379              	.LBE420:
2289:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5380              		.loc 1 2289 4 is_stmt 1 view .LVU1688
2289:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5381              		.loc 1 2289 7 is_stmt 0 view .LVU1689
 5382 02da 2E2A     		cmp	r2, #46
 5383 02dc 00F0DB80 		beq	.L671
2291:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5384              		.loc 1 2291 11 is_stmt 1 view .LVU1690
2291:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5385              		.loc 1 2291 14 is_stmt 0 view .LVU1691
 5386 02e0 2C2A     		cmp	r2, #44
 5387 02e2 00F0E880 		beq	.L672
2294:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5388              		.loc 1 2294 6 is_stmt 1 view .LVU1692
 5389              	.LVL580:
 5390              	.LBB421:
 5391              	.LBI421:
 405:src/display.c ****   if (res) *res++ = ch;
 5392              		.loc 1 405 14 view .LVU1693
 5393              	.LBB422:
 406:src/display.c ****   else	set_dig(base, ch);
 5394              		.loc 1 406 3 view .LVU1694
 406:src/display.c ****   else	set_dig(base, ch);
 5395              		.loc 1 406 6 is_stmt 0 view .LVU1695
 5396 02e6 002C     		cmp	r4, #0
 5397 02e8 00F0F280 		beq	.L553
 406:src/display.c ****   else	set_dig(base, ch);
 5398              		.loc 1 406 12 is_stmt 1 view .LVU1696
 5399              	.LVL581:
 406:src/display.c ****   else	set_dig(base, ch);
 5400              		.loc 1 406 19 is_stmt 0 view .LVU1697
 5401 02ec 04F8012B 		strb	r2, [r4], #1
 5402              	.LVL582:
 5403              	.L554:
 408:src/display.c **** }
 5404              		.loc 1 408 3 is_stmt 1 view .LVU1698
 408:src/display.c **** }
 5405              		.loc 1 408 3 is_stmt 0 view .LVU1699
 5406              	.LBE422:
 5407              	.LBE421:
2295:src/display.c **** 	  }
 5408              		.loc 1 2295 6 is_stmt 1 view .LVU1700
2288:src/display.c **** 	  if (c == '.') {
 5409              		.loc 1 2288 18 is_stmt 0 view .LVU1701
 5410 02f0 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5411              	.LVL583:
2295:src/display.c **** 	  }
 5412              		.loc 1 2295 8 view .LVU1702
 5413 02f4 0936     		adds	r6, r6, #9
 5414              	.LVL584:
2288:src/display.c **** 	  if (c == '.') {
 5415              		.loc 1 2288 53 is_stmt 1 view .LVU1703
2288:src/display.c **** 	  if (c == '.') {
 5416              		.loc 1 2288 12 view .LVU1704
2288:src/display.c **** 	  if (c == '.') {
 5417              		.loc 1 2288 2 is_stmt 0 view .LVU1705
ARM GAS  /tmp/cchyQ5Gz.s 			page 184


 5418 02f6 0AB1     		cbz	r2, .L654
2288:src/display.c **** 	  if (c == '.') {
 5419              		.loc 1 2288 31 discriminator 3 view .LVU1706
 5420 02f8 6B2E     		cmp	r6, #107
 5421 02fa EEDD     		ble	.L555
 5422              	.L654:
2288:src/display.c **** 	  if (c == '.') {
 5423              		.loc 1 2288 31 discriminator 3 view .LVU1707
 5424 02fc 1A46     		mov	r2, r3
 5425              	.LVL585:
2288:src/display.c **** 	  if (c == '.') {
 5426              		.loc 1 2288 31 discriminator 3 view .LVU1708
 5427 02fe 3B46     		mov	r3, r7
 5428 0300 1746     		mov	r7, r2
 5429              	.LVL586:
 5430              	.L545:
2308:src/display.c **** 	  set_exp(exp, 0, res);
 5431              		.loc 1 2308 2 is_stmt 1 view .LVU1709
2308:src/display.c **** 	  set_exp(exp, 0, res);
 5432              		.loc 1 2308 5 is_stmt 0 view .LVU1710
 5433 0302 BBF1000F 		cmp	fp, #0
 5434 0306 40F0F880 		bne	.L673
 5435              	.L556:
2311:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5436              		.loc 1 2311 2 is_stmt 1 view .LVU1711
2311:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5437              		.loc 1 2311 5 is_stmt 0 view .LVU1712
 5438 030a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5439 030e 2E2B     		cmp	r3, #46
 5440 0310 00F0E580 		beq	.L674
 5441              	.L557:
2313:src/display.c ****       }
 5442              		.loc 1 2313 2 is_stmt 1 view .LVU1713
2313:src/display.c ****       }
 5443              		.loc 1 2313 18 is_stmt 0 view .LVU1714
 5444 0314 009B     		ldr	r3, [sp]
 5445 0316 1F60     		str	r7, [r3]
 5446              	.LVL587:
 5447              	.L444:
2314:src/display.c **** 
 5448              		.loc 1 2314 7 view .LVU1715
 5449 0318 23B0     		add	sp, sp, #140
 5450              		.cfi_remember_state
 5451              		.cfi_def_cfa_offset 36
 5452              	.LVL588:
2314:src/display.c **** 
 5453              		.loc 1 2314 7 view .LVU1716
 5454              		@ sp needed
 5455 031a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5456              	.LVL589:
 5457              	.L452:
 5458              		.cfi_restore_state
2013:src/display.c **** 
 5459              		.loc 1 2013 4 is_stmt 1 view .LVU1717
 5460 031e 4146     		mov	r1, r8
 5461 0320 3046     		mov	r0, r6
 5462 0322 FFF7FEFF 		bl	decNumberToString
ARM GAS  /tmp/cchyQ5Gz.s 			page 185


 5463              	.LVL590:
 5464 0326 A5E6     		b	.L454
 5465              	.L680:
 5466              		.align	2
 5467              	.L679:
 5468 0328 00000000 		.word	main_ram
 5469 032c 00000000 		.word	StateWhileOn
 5470 0330 56555555 		.word	1431655766
 5471 0334 00000000 		.word	.LANCHOR0
 5472 0338 00000000 		.word	.LANCHOR1
 5473              	.LVL591:
 5474              	.L445:
1971:src/display.c **** 	    if (State2.hms) {
 5475              		.loc 1 1971 4 view .LVU1718
1971:src/display.c **** 	    if (State2.hms) {
 5476              		.loc 1 1971 25 is_stmt 0 view .LVU1719
 5477 033c C14B     		ldr	r3, .L681
 5478 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1971:src/display.c **** 	    if (State2.hms) {
 5479              		.loc 1 1971 22 view .LVU1720
 5480 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1971:src/display.c **** 	    if (State2.hms) {
 5481              		.loc 1 1971 25 view .LVU1721
 5482 0342 01F00201 		and	r1, r1, #2
1971:src/display.c **** 	    if (State2.hms) {
 5483              		.loc 1 1971 22 view .LVU1722
 5484 0346 1143     		orrs	r1, r1, r2
 5485 0348 7FF46EAE 		bne	.L448
1972:src/display.c **** 	      set_x_hms(z, res);
 5486              		.loc 1 1972 6 is_stmt 1 view .LVU1723
1972:src/display.c **** 	      set_x_hms(z, res);
 5487              		.loc 1 1972 10 is_stmt 0 view .LVU1724
 5488 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1972:src/display.c **** 	      set_x_hms(z, res);
 5489              		.loc 1 1972 9 view .LVU1725
 5490 034e DA07     		lsls	r2, r3, #31
 5491 0350 00F19E82 		bmi	.L675
1976:src/display.c **** 	      if (set_x_fract(z, res))
 5492              		.loc 1 1976 11 is_stmt 1 view .LVU1726
1976:src/display.c **** 	      if (set_x_fract(z, res))
 5493              		.loc 1 1976 15 is_stmt 0 view .LVU1727
 5494 0354 BC4B     		ldr	r3, .L681+4
 5495 0356 1B68     		ldr	r3, [r3]
 5496 0358 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1976:src/display.c **** 	      if (set_x_fract(z, res))
 5497              		.loc 1 1976 14 view .LVU1728
 5498 035c 9B06     		lsls	r3, r3, #26
 5499 035e 7FF563AE 		bpl	.L448
1977:src/display.c **** 		return;
 5500              		.loc 1 1977 8 is_stmt 1 view .LVU1729
1977:src/display.c **** 		return;
 5501              		.loc 1 1977 12 is_stmt 0 view .LVU1730
 5502 0362 2146     		mov	r1, r4
 5503 0364 3046     		mov	r0, r6
 5504 0366 FFF7FEFF 		bl	set_x_fract
 5505              	.LVL592:
1977:src/display.c **** 		return;
ARM GAS  /tmp/cchyQ5Gz.s 			page 186


 5506              		.loc 1 1977 11 view .LVU1731
 5507 036a 0028     		cmp	r0, #0
 5508 036c 3FF45CAE 		beq	.L448
 5509 0370 D2E7     		b	.L444
 5510              	.LVL593:
 5511              	.L568:
2059:src/display.c **** 	else exp = s_to_i(q+1);
 5512              		.loc 1 2059 21 view .LVU1732
 5513 0372 0546     		mov	r5, r0
 5514 0374 A5E6     		b	.L468
 5515              	.LVL594:
 5516              	.L670:
2113:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5517              		.loc 1 2113 7 view .LVU1733
 5518 0376 4A46     		mov	r2, r9
2114:src/display.c **** 	    mantissa[0] = '1';
 5519              		.loc 1 2114 41 view .LVU1734
 5520 0378 4FF0300C 		mov	ip, #48
 5521              	.LVL595:
 5522              	.L494:
2114:src/display.c **** 	    mantissa[0] = '1';
 5523              		.loc 1 2114 47 is_stmt 1 discriminator 3 view .LVU1735
2114:src/display.c **** 	    mantissa[0] = '1';
 5524              		.loc 1 2114 36 discriminator 3 view .LVU1736
2114:src/display.c **** 	    mantissa[0] = '1';
 5525              		.loc 1 2114 41 is_stmt 0 discriminator 3 view .LVU1737
 5526 037c 02F801CB 		strb	ip, [r2], #1
 5527              	.LVL596:
2114:src/display.c **** 	    mantissa[0] = '1';
 5528              		.loc 1 2114 25 is_stmt 1 discriminator 3 view .LVU1738
2114:src/display.c **** 	    mantissa[0] = '1';
 5529              		.loc 1 2114 6 is_stmt 0 discriminator 3 view .LVU1739
 5530 0380 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5531 0382 3929     		cmp	r1, #57
 5532 0384 FAD0     		beq	.L494
 5533              	.LVL597:
 5534              	.L561:
2115:src/display.c **** 	    exp++;
 5535              		.loc 1 2115 6 is_stmt 1 view .LVU1740
2115:src/display.c **** 	    exp++;
 5536              		.loc 1 2115 18 is_stmt 0 view .LVU1741
 5537 0386 3122     		movs	r2, #49
2117:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5538              		.loc 1 2117 9 view .LVU1742
 5539 0388 012F     		cmp	r7, #1
2116:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5540              		.loc 1 2116 9 view .LVU1743
 5541 038a 05F10105 		add	r5, r5, #1
 5542              	.LVL598:
2115:src/display.c **** 	    exp++;
 5543              		.loc 1 2115 18 view .LVU1744
 5544 038e 8DF84820 		strb	r2, [sp, #72]
2116:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5545              		.loc 1 2116 6 is_stmt 1 view .LVU1745
 5546              	.LVL599:
2117:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5547              		.loc 1 2117 6 view .LVU1746
ARM GAS  /tmp/cchyQ5Gz.s 			page 187


2117:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5548              		.loc 1 2117 9 is_stmt 0 view .LVU1747
 5549 0392 7FF402AF 		bne	.L657
2117:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5550              		.loc 1 2117 27 discriminator 1 view .LVU1748
 5551 0396 AE42     		cmp	r6, r5
 5552 0398 00F3C180 		bgt	.L496
2118:src/display.c **** 	      extra_digits = 0;
 5553              		.loc 1 2118 8 is_stmt 1 view .LVU1749
2118:src/display.c **** 	      extra_digits = 0;
 5554              		.loc 1 2118 28 is_stmt 0 view .LVU1750
 5555 039c AA4B     		ldr	r3, .L681+4
 5556              	.LVL600:
2118:src/display.c **** 	      extra_digits = 0;
 5557              		.loc 1 2118 28 view .LVU1751
 5558 039e 1B68     		ldr	r3, [r3]
 5559 03a0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2118:src/display.c **** 	      extra_digits = 0;
 5560              		.loc 1 2118 37 view .LVU1752
 5561 03a4 D806     		lsls	r0, r3, #27
 5562              	.LVL601:
2118:src/display.c **** 	      extra_digits = 0;
 5563              		.loc 1 2118 37 view .LVU1753
 5564 03a6 40F1C082 		bpl	.L676
 5565              	.LVL602:
2129:src/display.c **** 
 5566              		.loc 1 2129 2 is_stmt 1 view .LVU1754
2129:src/display.c **** 
 5567              		.loc 1 2129 40 is_stmt 0 view .LVU1755
 5568 03aa 0AF10102 		add	r2, r10, #1
2129:src/display.c **** 
 5569              		.loc 1 2129 9 view .LVU1756
 5570 03ae 09EB0203 		add	r3, r9, r2
 5571              	.LVL603:
2129:src/display.c **** 
 5572              		.loc 1 2129 45 is_stmt 1 view .LVU1757
2129:src/display.c **** 
 5573              		.loc 1 2129 2 is_stmt 0 view .LVU1758
 5574 03b2 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
2118:src/display.c **** 	      extra_digits = 0;
 5575              		.loc 1 2118 37 view .LVU1759
 5576 03b6 0327     		movs	r7, #3
2129:src/display.c **** 
 5577              		.loc 1 2129 2 view .LVU1760
 5578 03b8 002A     		cmp	r2, #0
 5579 03ba 7FF4F1AE 		bne	.L559
 5580              	.LVL604:
 5581              	.L502:
2231:src/display.c **** 	  case -1:
 5582              		.loc 1 2231 4 is_stmt 1 view .LVU1761
2231:src/display.c **** 	  case -1:
 5583              		.loc 1 2231 16 is_stmt 0 view .LVU1762
 5584 03be A34B     		ldr	r3, .L681+8
 5585 03c0 83FB0523 		smull	r2, r3, r3, r5
 5586 03c4 A3EBE573 		sub	r3, r3, r5, asr #31
 5587 03c8 03EB4303 		add	r3, r3, r3, lsl #1
 5588 03cc EB1A     		subs	r3, r5, r3
ARM GAS  /tmp/cchyQ5Gz.s 			page 188


 5589 03ce 0233     		adds	r3, r3, #2
 5590 03d0 042B     		cmp	r3, #4
 5591 03d2 3FF648AF 		bhi	.L582
 5592 03d6 01A2     		adr	r2, .L539
 5593 03d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5594              		.p2align 2
 5595              	.L539:
 5596 03dc 0B050000 		.word	.L583+1
 5597 03e0 A7070000 		.word	.L538+1
 5598 03e4 67020000 		.word	.L582+1
 5599 03e8 0B050000 		.word	.L583+1
 5600 03ec A7070000 		.word	.L538+1
 5601              	.LVL605:
 5602              		.p2align 1
 5603              	.L506:
2140:src/display.c **** 	    case -1:
 5604              		.loc 1 2140 6 is_stmt 1 view .LVU1763
2140:src/display.c **** 	    case -1:
 5605              		.loc 1 2140 32 is_stmt 0 view .LVU1764
 5606 03f0 9549     		ldr	r1, .L681+4
2140:src/display.c **** 	    case -1:
 5607              		.loc 1 2140 19 view .LVU1765
 5608 03f2 964B     		ldr	r3, .L681+8
2140:src/display.c **** 	    case -1:
 5609              		.loc 1 2140 32 view .LVU1766
 5610 03f4 0968     		ldr	r1, [r1]
2140:src/display.c **** 	    case -1:
 5611              		.loc 1 2140 19 view .LVU1767
 5612 03f6 83FB0503 		smull	r0, r3, r3, r5
2140:src/display.c **** 	    case -1:
 5613              		.loc 1 2140 32 view .LVU1768
 5614 03fa 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
2140:src/display.c **** 	    case -1:
 5615              		.loc 1 2140 19 view .LVU1769
 5616 03fe A3EBE573 		sub	r3, r3, r5, asr #31
 5617 0402 03EB4303 		add	r3, r3, r3, lsl #1
2140:src/display.c **** 	    case -1:
 5618              		.loc 1 2140 32 view .LVU1770
 5619 0406 C1F30011 		ubfx	r1, r1, #4, #1
2140:src/display.c **** 	    case -1:
 5620              		.loc 1 2140 19 view .LVU1771
 5621 040a EB1A     		subs	r3, r5, r3
2140:src/display.c **** 	    case -1:
 5622              		.loc 1 2140 24 view .LVU1772
 5623 040c 03FB01F3 		mul	r3, r3, r1
 5624 0410 0233     		adds	r3, r3, #2
 5625 0412 042B     		cmp	r3, #4
 5626 0414 00F24282 		bhi	.L577
 5627 0418 DFE813F0 		tbh	[pc, r3, lsl #1]
 5628              	.L510:
 5629 041c DC01     		.2byte	(.L578-.L510)/2
 5630 041e FD01     		.2byte	(.L509-.L510)/2
 5631 0420 4002     		.2byte	(.L577-.L510)/2
 5632 0422 DC01     		.2byte	(.L578-.L510)/2
 5633 0424 FD01     		.2byte	(.L509-.L510)/2
 5634              	.LVL606:
 5635              		.p2align 1
ARM GAS  /tmp/cchyQ5Gz.s 			page 189


 5636              	.L669:
2096:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5637              		.loc 1 2096 4 is_stmt 1 view .LVU1773
2096:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5638              		.loc 1 2096 7 is_stmt 0 view .LVU1774
 5639 0426 AE42     		cmp	r6, r5
 5640 0428 04DD     		ble	.L485
2096:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5641              		.loc 1 2096 45 discriminator 1 view .LVU1775
 5642 042a CAF10003 		rsb	r3, r10, #0
2096:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5643              		.loc 1 2096 36 discriminator 1 view .LVU1776
 5644 042e AB42     		cmp	r3, r5
 5645 0430 40F3C681 		ble	.L486
 5646              	.L485:
2097:src/display.c **** 	  else {
 5647              		.loc 1 2097 6 is_stmt 1 view .LVU1777
2097:src/display.c **** 	  else {
 5648              		.loc 1 2097 26 is_stmt 0 view .LVU1778
 5649 0434 844B     		ldr	r3, .L681+4
 5650 0436 1B68     		ldr	r3, [r3]
 5651 0438 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2097:src/display.c **** 	  else {
 5652              		.loc 1 2097 35 view .LVU1779
 5653 043c 13F0100F 		tst	r3, #16
 5654 0440 14BF     		ite	ne
 5655 0442 0327     		movne	r7, #3
 5656              	.LVL607:
2097:src/display.c **** 	  else {
 5657              		.loc 1 2097 35 view .LVU1780
 5658 0444 0227     		moveq	r7, #2
 5659 0446 0022     		movs	r2, #0
 5660 0448 7FE6     		b	.L484
 5661              	.LVL608:
 5662              	.L667:
2097:src/display.c **** 	  else {
 5663              		.loc 1 2097 35 view .LVU1781
 5664 044a 013D     		subs	r5, r5, #1
 5665 044c 7219     		adds	r2, r6, r5
 5666              	.L477:
2076:src/display.c **** 	    exp--;
 5667              		.loc 1 2076 4 is_stmt 1 discriminator 1 view .LVU1782
2077:src/display.c **** 	  while (*++q == '0');
 5668              		.loc 1 2077 6 discriminator 1 view .LVU1783
 5669 044e 951B     		subs	r5, r2, r6
 5670              	.LVL609:
2078:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5671              		.loc 1 2078 10 discriminator 1 view .LVU1784
2078:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5672              		.loc 1 2078 11 is_stmt 0 discriminator 1 view .LVU1785
 5673 0450 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5674              	.LVL610:
2078:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5675              		.loc 1 2078 4 discriminator 1 view .LVU1786
 5676 0454 302B     		cmp	r3, #48
 5677 0456 FAD0     		beq	.L477
2079:src/display.c **** 	    *p++ = *q++;
ARM GAS  /tmp/cchyQ5Gz.s 			page 190


 5678              		.loc 1 2079 10 is_stmt 1 view .LVU1787
 5679 0458 A3F13002 		sub	r2, r3, #48
 5680 045c 092A     		cmp	r2, #9
 5681 045e 3FF66EAE 		bhi	.L478
1942:src/display.c **** 	char *r;
 5682              		.loc 1 1942 8 is_stmt 0 view .LVU1788
 5683 0462 4A46     		mov	r2, r9
 5684              	.LVL611:
 5685              	.L479:
2080:src/display.c **** 	} else {
 5686              		.loc 1 2080 6 is_stmt 1 view .LVU1789
2080:src/display.c **** 	} else {
 5687              		.loc 1 2080 11 is_stmt 0 view .LVU1790
 5688 0464 02F8013B 		strb	r3, [r2], #1
 5689              	.LVL612:
2079:src/display.c **** 	    *p++ = *q++;
 5690              		.loc 1 2079 10 is_stmt 1 view .LVU1791
2079:src/display.c **** 	    *p++ = *q++;
 5691              		.loc 1 2079 11 is_stmt 0 view .LVU1792
 5692 0468 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2079:src/display.c **** 	    *p++ = *q++;
 5693              		.loc 1 2079 10 view .LVU1793
 5694 046c A3F13001 		sub	r1, r3, #48
 5695 0470 0929     		cmp	r1, #9
 5696 0472 F7D9     		bls	.L479
 5697 0474 63E6     		b	.L478
 5698              	.LVL613:
 5699              	.L665:
2070:src/display.c **** 	  q++;
 5700              		.loc 1 2070 4 is_stmt 1 view .LVU1794
2071:src/display.c **** 	} else if (*q == '+')
 5701              		.loc 1 2071 4 view .LVU1795
2070:src/display.c **** 	  q++;
 5702              		.loc 1 2070 13 is_stmt 0 view .LVU1796
 5703 0476 4FF0010E 		mov	lr, #1
 5704 047a 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2071:src/display.c **** 	} else if (*q == '+')
 5705              		.loc 1 2071 5 view .LVU1797
 5706 047c 7644     		add	r6, r6, lr
 5707              	.LVL614:
2071:src/display.c **** 	} else if (*q == '+')
 5708              		.loc 1 2071 5 view .LVU1798
 5709 047e 35E6     		b	.L473
 5710              	.LVL615:
 5711              	.L663:
2039:src/display.c **** 	  trimzeros = 1;
 5712              		.loc 1 2039 4 is_stmt 1 view .LVU1799
2039:src/display.c **** 	  trimzeros = 1;
 5713              		.loc 1 2039 11 is_stmt 0 view .LVU1800
 5714 0480 3046     		mov	r0, r6
 5715 0482 FFF7FEFF 		bl	std_round_fix
 5716              	.LVL616:
2041:src/display.c **** 	} else if (dd >= *display_digits)
 5717              		.loc 1 2041 7 view .LVU1801
 5718 0486 009B     		ldr	r3, [sp]
 5719 0488 1D68     		ldr	r5, [r3]
2040:src/display.c **** 	  dd = *display_digits - 1;
ARM GAS  /tmp/cchyQ5Gz.s 			page 191


 5720              		.loc 1 2040 14 view .LVU1802
 5721 048a 0123     		movs	r3, #1
2039:src/display.c **** 	  trimzeros = 1;
 5722              		.loc 1 2039 11 view .LVU1803
 5723 048c 0746     		mov	r7, r0
 5724              	.LVL617:
2040:src/display.c **** 	  dd = *display_digits - 1;
 5725              		.loc 1 2040 4 is_stmt 1 view .LVU1804
2041:src/display.c **** 	} else if (dd >= *display_digits)
 5726              		.loc 1 2041 4 view .LVU1805
2041:src/display.c **** 	} else if (dd >= *display_digits)
 5727              		.loc 1 2041 7 is_stmt 0 view .LVU1806
 5728 048e 05F1FF3A 		add	r10, r5, #-1
 5729              	.LVL618:
2040:src/display.c **** 	  dd = *display_digits - 1;
 5730              		.loc 1 2040 14 view .LVU1807
 5731 0492 0193     		str	r3, [sp, #4]
 5732              	.LVL619:
2040:src/display.c **** 	  dd = *display_digits - 1;
 5733              		.loc 1 2040 14 view .LVU1808
 5734 0494 00E6     		b	.L467
 5735              	.LVL620:
 5736              	.L671:
2290:src/display.c **** 	  } else if (c == ',') {
 5737              		.loc 1 2290 6 is_stmt 1 view .LVU1809
2290:src/display.c **** 	  } else if (c == ',') {
 5738              		.loc 1 2290 12 is_stmt 0 view .LVU1810
 5739 0496 2246     		mov	r2, r4
 5740              	.LVL621:
2290:src/display.c **** 	  } else if (c == ',') {
 5741              		.loc 1 2290 12 view .LVU1811
 5742 0498 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5743 049c 0193     		str	r3, [sp, #4]
 5744 049e A6F10900 		sub	r0, r6, #9
 5745 04a2 FFF7FEFF 		bl	set_decimal
 5746              	.LVL622:
 5747 04a6 019B     		ldr	r3, [sp, #4]
 5748 04a8 0446     		mov	r4, r0
 5749              	.LVL623:
 5750              	.L549:
2288:src/display.c **** 	  if (c == '.') {
 5751              		.loc 1 2288 53 is_stmt 1 view .LVU1812
2288:src/display.c **** 	  if (c == '.') {
 5752              		.loc 1 2288 12 view .LVU1813
2288:src/display.c **** 	  if (c == '.') {
 5753              		.loc 1 2288 18 is_stmt 0 view .LVU1814
 5754 04aa 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5755              	.LVL624:
2288:src/display.c **** 	  if (c == '.') {
 5756              		.loc 1 2288 2 view .LVU1815
 5757 04ae 002A     		cmp	r2, #0
 5758 04b0 7FF413AF 		bne	.L555
 5759 04b4 22E7     		b	.L654
 5760              	.L672:
2292:src/display.c **** 	  } else {
 5761              		.loc 1 2292 6 is_stmt 1 view .LVU1816
2292:src/display.c **** 	  } else {
ARM GAS  /tmp/cchyQ5Gz.s 			page 192


 5762              		.loc 1 2292 12 is_stmt 0 view .LVU1817
 5763 04b6 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5764              	.LVL625:
 5765              	.LBB424:
 5766              	.LBI415:
 365:src/display.c ****   if (sep == SEP_NONE)
 5767              		.loc 1 365 14 is_stmt 1 view .LVU1818
 5768              	.LBB418:
 366:src/display.c ****     return res;
 5769              		.loc 1 366 3 view .LVU1819
 366:src/display.c ****     return res;
 5770              		.loc 1 366 6 is_stmt 0 view .LVU1820
 5771 04ba 0029     		cmp	r1, #0
 5772 04bc F5D0     		beq	.L549
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5773              		.loc 1 368 3 is_stmt 1 view .LVU1821
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5774              		.loc 1 368 6 is_stmt 0 view .LVU1822
 5775 04be 002C     		cmp	r4, #0
 5776 04c0 00F0F281 		beq	.L551
 369:src/display.c ****     else *res++ = '.';
 5777              		.loc 1 369 5 is_stmt 1 view .LVU1823
 369:src/display.c ****     else *res++ = '.';
 5778              		.loc 1 369 8 is_stmt 0 view .LVU1824
 5779 04c4 0129     		cmp	r1, #1
 369:src/display.c ****     else *res++ = '.';
 5780              		.loc 1 369 27 is_stmt 1 view .LVU1825
 5781              	.LVL626:
 370:src/display.c ****   } else {
 5782              		.loc 1 370 10 view .LVU1826
 370:src/display.c ****   } else {
 5783              		.loc 1 370 17 is_stmt 0 view .LVU1827
 5784 04c6 18BF     		it	ne
 5785 04c8 2E22     		movne	r2, #46
 5786              	.LVL627:
 370:src/display.c ****   } else {
 5787              		.loc 1 370 17 view .LVU1828
 5788 04ca 04F8012B 		strb	r2, [r4], #1
 5789              	.LVL628:
 370:src/display.c ****   } else {
 5790              		.loc 1 370 17 view .LVU1829
 5791 04ce ECE7     		b	.L549
 5792              	.LVL629:
 5793              	.L553:
 370:src/display.c ****   } else {
 5794              		.loc 1 370 17 view .LVU1830
 5795              	.LBE418:
 5796              	.LBE424:
 5797              	.LBB425:
 5798              	.LBB423:
 407:src/display.c ****   return res;
 5799              		.loc 1 407 8 view .LVU1831
 5800 04d0 1146     		mov	r1, r2
 5801 04d2 3046     		mov	r0, r6
 5802 04d4 0193     		str	r3, [sp, #4]
 407:src/display.c ****   return res;
 5803              		.loc 1 407 8 is_stmt 1 view .LVU1832
ARM GAS  /tmp/cchyQ5Gz.s 			page 193


 5804 04d6 FFF7FEFF 		bl	set_dig
 5805              	.LVL630:
 407:src/display.c ****   return res;
 5806              		.loc 1 407 8 is_stmt 0 view .LVU1833
 5807 04da 019B     		ldr	r3, [sp, #4]
 5808 04dc 08E7     		b	.L554
 5809              	.LVL631:
 5810              	.L674:
 407:src/display.c ****   return res;
 5811              		.loc 1 407 8 view .LVU1834
 5812              	.LBE423:
 5813              	.LBE425:
2311:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5814              		.loc 1 2311 21 discriminator 1 view .LVU1835
 5815 04de 002C     		cmp	r4, #0
 5816 04e0 7FF418AF 		bne	.L557
2312:src/display.c **** 	*display_digits = odig;
 5817              		.loc 1 2312 4 is_stmt 1 view .LVU1836
2312:src/display.c **** 	*display_digits = odig;
 5818              		.loc 1 2312 33 is_stmt 0 view .LVU1837
 5819 04e4 009B     		ldr	r3, [sp]
 5820 04e6 1868     		ldr	r0, [r3]
2312:src/display.c **** 	*display_digits = odig;
 5821              		.loc 1 2312 4 view .LVU1838
 5822 04e8 594B     		ldr	r3, .L681+12
2312:src/display.c **** 	*display_digits = odig;
 5823              		.loc 1 2312 33 view .LVU1839
 5824 04ea 0138     		subs	r0, r0, #1
2312:src/display.c **** 	*display_digits = odig;
 5825              		.loc 1 2312 4 view .LVU1840
 5826 04ec 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5827 04ee 2246     		mov	r2, r4
 5828 04f0 00EBC000 		add	r0, r0, r0, lsl #3
 5829 04f4 FFF7FEFF 		bl	set_decimal
 5830              	.LVL632:
 5831 04f8 0CE7     		b	.L557
 5832              	.L673:
2309:src/display.c **** #endif
 5833              		.loc 1 2309 4 view .LVU1841
 5834 04fa 2846     		mov	r0, r5
 5835 04fc 2246     		mov	r2, r4
 5836 04fe 0021     		movs	r1, #0
 5837 0500 0193     		str	r3, [sp, #4]
2309:src/display.c **** #endif
 5838              		.loc 1 2309 4 is_stmt 1 view .LVU1842
 5839 0502 FFF7FEFF 		bl	set_exp
 5840              	.LVL633:
 5841 0506 019B     		ldr	r3, [sp, #4]
 5842 0508 FFE6     		b	.L556
 5843              	.LVL634:
 5844              	.L583:
2231:src/display.c **** 	  case -1:
 5845              		.loc 1 2231 16 is_stmt 0 view .LVU1843
 5846 050a 0227     		movs	r7, #2
 5847 050c 4146     		mov	r1, r8
 5848              	.LVL635:
 5849              	.L540:
ARM GAS  /tmp/cchyQ5Gz.s 			page 194


2240:src/display.c **** 	    odig++;
 5850              		.loc 1 2240 6 is_stmt 1 view .LVU1844
2240:src/display.c **** 	    odig++;
 5851              		.loc 1 2240 13 is_stmt 0 view .LVU1845
 5852 050e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5853              	.LVL636:
2240:src/display.c **** 	    odig++;
 5854              		.loc 1 2240 13 view .LVU1846
 5855 0512 01F8013B 		strb	r3, [r1], #1
 5856              	.LVL637:
2241:src/display.c **** 	    dd--;
 5857              		.loc 1 2241 6 is_stmt 1 view .LVU1847
2242:src/display.c **** 	    exp--;
 5858              		.loc 1 2242 6 view .LVU1848
2242:src/display.c **** 	    exp--;
 5859              		.loc 1 2242 8 is_stmt 0 view .LVU1849
 5860 0516 0AF1FF3A 		add	r10, r10, #-1
 5861              	.LVL638:
2243:src/display.c **** 	  case 0:
 5862              		.loc 1 2243 6 is_stmt 1 view .LVU1850
2243:src/display.c **** 	  case 0:
 5863              		.loc 1 2243 9 is_stmt 0 view .LVU1851
 5864 051a 013D     		subs	r5, r5, #1
 5865              	.LVL639:
2243:src/display.c **** 	  case 0:
 5866              		.loc 1 2243 9 view .LVU1852
 5867 051c A5E6     		b	.L501
 5868              	.LVL640:
 5869              	.L496:
2129:src/display.c **** 
 5870              		.loc 1 2129 2 is_stmt 1 view .LVU1853
2129:src/display.c **** 
 5871              		.loc 1 2129 45 view .LVU1854
2129:src/display.c **** 
 5872              		.loc 1 2129 2 is_stmt 0 view .LVU1855
 5873 051e 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5874 0522 002A     		cmp	r2, #0
 5875 0524 7FF43CAE 		bne	.L559
 5876              	.LVL641:
 5877              	.L503:
2194:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5878              		.loc 1 2194 4 is_stmt 1 view .LVU1856
2195:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5879              		.loc 1 2195 4 view .LVU1857
2195:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5880              		.loc 1 2195 7 is_stmt 0 view .LVU1858
 5881 0528 002D     		cmp	r5, #0
 5882 052a C0F21081 		blt	.L523
2195:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5883              		.loc 1 2195 7 view .LVU1859
 5884 052e 6B1C     		adds	r3, r5, #1
2197:src/display.c **** 		*obp++ = ',';
 5885              		.loc 1 2197 31 view .LVU1860
 5886 0530 DFF818C1 		ldr	ip, .L681+8
 5887 0534 0293     		str	r3, [sp, #8]
 5888 0536 09EB0300 		add	r0, r9, r3
2131:src/display.c **** 	switch (mode) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 195


 5889              		.loc 1 2131 4 view .LVU1861
 5890 053a 4F46     		mov	r7, r9
1936:src/display.c **** 	int odig = 0;
 5891              		.loc 1 1936 15 view .LVU1862
 5892 053c 4146     		mov	r1, r8
 5893 053e 0394     		str	r4, [sp, #12]
 5894 0540 05E0     		b	.L524
 5895              	.LVL642:
 5896              	.L527:
2198:src/display.c **** 	      *obp++ = *p++;
 5897              		.loc 1 2198 3 is_stmt 1 view .LVU1863
2197:src/display.c **** 		*obp++ = ',';
 5898              		.loc 1 2197 18 is_stmt 0 view .LVU1864
 5899 0542 022A     		cmp	r2, #2
2198:src/display.c **** 	      *obp++ = *p++;
 5900              		.loc 1 2198 10 view .LVU1865
 5901 0544 05BF     		ittet	eq
 5902 0546 2C23     		moveq	r3, #44
 5903 0548 4B70     		strbeq	r3, [r1, #1]
2199:src/display.c **** 	      odig++;
 5904              		.loc 1 2199 12 view .LVU1866
 5905 054a 0131     		addne	r1, r1, #1
 5906              	.LVL643:
2198:src/display.c **** 	      *obp++ = *p++;
 5907              		.loc 1 2198 7 view .LVU1867
 5908 054c 0231     		addeq	r1, r1, #2
 5909              	.LVL644:
 5910              	.L524:
2199:src/display.c **** 	      odig++;
 5911              		.loc 1 2199 8 is_stmt 1 discriminator 2 view .LVU1868
2199:src/display.c **** 	      odig++;
 5912              		.loc 1 2199 15 is_stmt 0 discriminator 2 view .LVU1869
 5913 054e 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5914              	.LVL645:
2197:src/display.c **** 		*obp++ = ',';
 5915              		.loc 1 2197 8 is_stmt 1 discriminator 2 view .LVU1870
2199:src/display.c **** 	      odig++;
 5916              		.loc 1 2199 15 is_stmt 0 discriminator 2 view .LVU1871
 5917 0552 0B70     		strb	r3, [r1]
2200:src/display.c **** 	    }
 5918              		.loc 1 2200 8 is_stmt 1 discriminator 2 view .LVU1872
 5919              	.LVL646:
2196:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5920              		.loc 1 2196 24 discriminator 2 view .LVU1873
2196:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5921              		.loc 1 2196 16 discriminator 2 view .LVU1874
2197:src/display.c **** 		*obp++ = ',';
 5922              		.loc 1 2197 31 is_stmt 0 discriminator 2 view .LVU1875
 5923 0554 A9EB0703 		sub	r3, r9, r7
 5924 0558 2B44     		add	r3, r3, r5
 5925 055a 8CFB0342 		smull	r4, r2, ip, r3
 5926 055e A2EBE372 		sub	r2, r2, r3, asr #31
 5927 0562 02EB4202 		add	r2, r2, r2, lsl #1
2196:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5928              		.loc 1 2196 6 discriminator 2 view .LVU1876
 5929 0566 B842     		cmp	r0, r7
2197:src/display.c **** 		*obp++ = ',';
ARM GAS  /tmp/cchyQ5Gz.s 			page 196


 5930              		.loc 1 2197 31 discriminator 2 view .LVU1877
 5931 0568 A3EB0202 		sub	r2, r3, r2
2196:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5932              		.loc 1 2196 6 discriminator 2 view .LVU1878
 5933 056c E9D1     		bne	.L527
2202:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5934              		.loc 1 2202 13 view .LVU1879
 5935 056e 2E23     		movs	r3, #46
2203:src/display.c **** 	      *obp++ = *p++;
 5936              		.loc 1 2203 6 view .LVU1880
 5937 0570 BAF1000F 		cmp	r10, #0
2202:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5938              		.loc 1 2202 13 view .LVU1881
 5939 0574 4B70     		strb	r3, [r1, #1]
 5940 0576 039C     		ldr	r4, [sp, #12]
 5941 0578 029F     		ldr	r7, [sp, #8]
 5942              	.LVL647:
2202:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5943              		.loc 1 2202 6 is_stmt 1 view .LVU1882
2202:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5944              		.loc 1 2202 10 is_stmt 0 view .LVU1883
 5945 057a 01F10203 		add	r3, r1, #2
 5946              	.LVL648:
2203:src/display.c **** 	      *obp++ = *p++;
 5947              		.loc 1 2203 6 is_stmt 1 view .LVU1884
2203:src/display.c **** 	      *obp++ = *p++;
 5948              		.loc 1 2203 16 view .LVU1885
2203:src/display.c **** 	      *obp++ = *p++;
 5949              		.loc 1 2203 6 is_stmt 0 view .LVU1886
 5950 057e 0CDD     		ble	.L528
 5951 0580 0131     		adds	r1, r1, #1
 5952 0582 00EB0A07 		add	r7, r0, r10
 5953              	.LVL649:
 5954              	.L529:
2204:src/display.c **** 	      odig++;
 5955              		.loc 1 2204 8 is_stmt 1 discriminator 4 view .LVU1887
2204:src/display.c **** 	      odig++;
 5956              		.loc 1 2204 15 is_stmt 0 discriminator 4 view .LVU1888
 5957 0586 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5958              	.LVL650:
2204:src/display.c **** 	      odig++;
 5959              		.loc 1 2204 15 discriminator 4 view .LVU1889
 5960 058a 01F8012F 		strb	r2, [r1, #1]!
2205:src/display.c **** 	    }
 5961              		.loc 1 2205 8 is_stmt 1 discriminator 4 view .LVU1890
2203:src/display.c **** 	      *obp++ = *p++;
 5962              		.loc 1 2203 43 discriminator 4 view .LVU1891
2203:src/display.c **** 	      *obp++ = *p++;
 5963              		.loc 1 2203 16 discriminator 4 view .LVU1892
2203:src/display.c **** 	      *obp++ = *p++;
 5964              		.loc 1 2203 6 is_stmt 0 discriminator 4 view .LVU1893
 5965 058e 8742     		cmp	r7, r0
 5966 0590 F9D1     		bne	.L529
 5967 0592 029A     		ldr	r2, [sp, #8]
 5968 0594 5244     		add	r2, r2, r10
 5969 0596 5344     		add	r3, r3, r10
 5970              	.LVL651:
ARM GAS  /tmp/cchyQ5Gz.s 			page 197


2203:src/display.c **** 	      *obp++ = *p++;
 5971              		.loc 1 2203 6 discriminator 4 view .LVU1894
 5972 0598 1746     		mov	r7, r2
 5973              	.LVL652:
 5974              	.L528:
2222:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5975              		.loc 1 2222 4 is_stmt 1 view .LVU1895
2222:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
 5976              		.loc 1 2222 7 is_stmt 0 view .LVU1896
 5977 059a 019A     		ldr	r2, [sp, #4]
 5978 059c 002A     		cmp	r2, #0
 5979 059e 40F0C480 		bne	.L534
1938:src/display.c **** 	int j;
 5980              		.loc 1 1938 6 view .LVU1897
 5981 05a2 9346     		mov	fp, r2
 5982 05a4 7CE6     		b	.L512
 5983              	.LVL653:
 5984              	.L660:
1999:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 5985              		.loc 1 1999 4 is_stmt 1 view .LVU1898
 5986 05a6 2B4A     		ldr	r2, .L681+16
 5987 05a8 3146     		mov	r1, r6
 5988 05aa 3046     		mov	r0, r6
 5989 05ac FFF7FEFF 		bl	decNumberNormalize
 5990              	.LVL654:
2000:src/display.c **** 	  z->exponent = 0;
 5991              		.loc 1 2000 4 view .LVU1899
2000:src/display.c **** 	  z->exponent = 0;
 5992              		.loc 1 2000 22 is_stmt 0 view .LVU1900
 5993 05b0 D6E90023 		ldrd	r2, r3, [r6]
 5994 05b4 03EB020A 		add	r10, r3, r2
2000:src/display.c **** 	  z->exponent = 0;
 5995              		.loc 1 2000 8 view .LVU1901
 5996 05b8 0AF1FF33 		add	r3, r10, #-1
2001:src/display.c **** 	}
 5997              		.loc 1 2001 16 view .LVU1902
 5998 05bc C6F804B0 		str	fp, [r6, #4]
2000:src/display.c **** 	  z->exponent = 0;
 5999              		.loc 1 2000 8 view .LVU1903
 6000 05c0 0193     		str	r3, [sp, #4]
 6001              	.LVL655:
2001:src/display.c **** 	}
 6002              		.loc 1 2001 4 is_stmt 1 view .LVU1904
 6003 05c2 42E5     		b	.L451
 6004              	.LVL656:
 6005              	.L666:
2073:src/display.c **** 	for (; *q == '0'; q++);
 6006              		.loc 1 2073 4 view .LVU1905
2073:src/display.c **** 	for (; *q == '0'; q++);
 6007              		.loc 1 2073 4 is_stmt 0 view .LVU1906
 6008 05c4 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1956:src/display.c **** 	int trimzeros = 0;
 6009              		.loc 1 1956 6 view .LVU1907
 6010 05c6 4FF0000E 		mov	lr, #0
2073:src/display.c **** 	for (; *q == '0'; q++);
 6011              		.loc 1 2073 5 view .LVU1908
 6012 05ca 0136     		adds	r6, r6, #1
ARM GAS  /tmp/cchyQ5Gz.s 			page 198


 6013              	.LVL657:
2073:src/display.c **** 	for (; *q == '0'; q++);
 6014              		.loc 1 2073 5 view .LVU1909
 6015 05cc 8EE5     		b	.L473
 6016              	.LVL658:
 6017              	.L668:
2089:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6018              		.loc 1 2089 6 is_stmt 1 view .LVU1910
2090:src/display.c **** 	      *p++ = *q++;
 6019              		.loc 1 2090 13 is_stmt 0 view .LVU1911
 6020 05ce 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
2090:src/display.c **** 	      *p++ = *q++;
 6021              		.loc 1 2090 12 view .LVU1912
 6022 05d0 A3F13002 		sub	r2, r3, #48
 6023 05d4 092A     		cmp	r2, #9
2089:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6024              		.loc 1 2089 7 view .LVU1913
 6025 05d6 06F10106 		add	r6, r6, #1
 6026              	.LVL659:
2090:src/display.c **** 	      *p++ = *q++;
 6027              		.loc 1 2090 6 is_stmt 1 view .LVU1914
2090:src/display.c **** 	      *p++ = *q++;
 6028              		.loc 1 2090 12 view .LVU1915
 6029 05da 3FF6B0AD 		bhi	.L478
 6030              	.LVL660:
 6031              	.L483:
2091:src/display.c **** 	  }
 6032              		.loc 1 2091 8 view .LVU1916
2091:src/display.c **** 	  }
 6033              		.loc 1 2091 13 is_stmt 0 view .LVU1917
 6034 05de 01F8013B 		strb	r3, [r1], #1
 6035              	.LVL661:
2090:src/display.c **** 	      *p++ = *q++;
 6036              		.loc 1 2090 12 is_stmt 1 view .LVU1918
2090:src/display.c **** 	      *p++ = *q++;
 6037              		.loc 1 2090 13 is_stmt 0 view .LVU1919
 6038 05e2 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
2090:src/display.c **** 	      *p++ = *q++;
 6039              		.loc 1 2090 12 view .LVU1920
 6040 05e6 A3F13002 		sub	r2, r3, #48
 6041 05ea 092A     		cmp	r2, #9
 6042 05ec F7D9     		bls	.L483
 6043 05ee A6E5     		b	.L478
 6044              	.LVL662:
 6045              	.L661:
2007:src/display.c **** 	    x[0] = '-';
 6046              		.loc 1 2007 34 discriminator 1 view .LVU1921
 6047 05f0 6B20     		movs	r0, #107
 6048 05f2 FFF7FEFF 		bl	get_user_flag
 6049              	.LVL663:
2007:src/display.c **** 	    x[0] = '-';
 6050              		.loc 1 2007 31 discriminator 1 view .LVU1922
 6051 05f6 0028     		cmp	r0, #0
 6052 05f8 3FF439AD 		beq	.L453
2008:src/display.c **** 	    x[1] = '0';
 6053              		.loc 1 2008 6 is_stmt 1 view .LVU1923
2009:src/display.c **** 	  } else
ARM GAS  /tmp/cchyQ5Gz.s 			page 199


 6054              		.loc 1 2009 6 view .LVU1924
2008:src/display.c **** 	    x[1] = '0';
 6055              		.loc 1 2008 11 is_stmt 0 view .LVU1925
 6056 05fc 43F22D03 		movw	r3, #12333
 6057 0600 ADF81430 		strh	r3, [sp, #20]	@ movhi
2009:src/display.c **** 	  } else
 6058              		.loc 1 2009 11 view .LVU1926
 6059 0604 36E5     		b	.L454
 6060              	.LVL664:
 6061              	.L664:
2066:src/display.c **** 	  CLR_MANT_SIGN;
 6062              		.loc 1 2066 4 is_stmt 1 view .LVU1927
 6063              	.LBB426:
 6064              	.LBI426:
 312:src/display.c **** {
 6065              		.loc 1 312 13 view .LVU1928
 6066              	.LBB427:
 314:src/display.c ****   clr_dot(EXP_SIGN);
 6067              		.loc 1 314 3 view .LVU1929
 315:src/display.c **** }
 6068              		.loc 1 315 3 view .LVU1930
 314:src/display.c ****   clr_dot(EXP_SIGN);
 6069              		.loc 1 314 27 is_stmt 0 view .LVU1931
 6070 0606 144B     		ldr	r3, .L681+20
 6071 0608 2022     		movs	r2, #32
 315:src/display.c **** }
 6072              		.loc 1 315 3 view .LVU1932
 6073 060a 8220     		movs	r0, #130
 314:src/display.c ****   clr_dot(EXP_SIGN);
 6074              		.loc 1 314 27 view .LVU1933
 6075 060c 1A70     		strb	r2, [r3]
 315:src/display.c **** }
 6076              		.loc 1 315 3 view .LVU1934
 6077 060e FFF7FEFF 		bl	clr_dot
 6078              	.LVL665:
 6079              	.LBE427:
 6080              	.LBE426:
2067:src/display.c **** 	}
 6081              		.loc 1 2067 4 is_stmt 1 view .LVU1935
 6082              	.LBB428:
 6083              	.LBI428:
 300:src/display.c **** {
 6084              		.loc 1 300 13 view .LVU1936
 6085              	.LBB429:
 302:src/display.c ****   clr_dot(MANT_SIGN);
 6086              		.loc 1 302 3 view .LVU1937
 302:src/display.c ****   clr_dot(MANT_SIGN);
 6087              		.loc 1 302 25 is_stmt 0 view .LVU1938
 6088 0612 124B     		ldr	r3, .L681+24
 6089 0614 2022     		movs	r2, #32
 303:src/display.c **** }
 6090              		.loc 1 303 3 view .LVU1939
 6091 0616 8120     		movs	r0, #129
 302:src/display.c ****   clr_dot(MANT_SIGN);
 6092              		.loc 1 302 25 view .LVU1940
 6093 0618 1A70     		strb	r2, [r3]
 303:src/display.c **** }
ARM GAS  /tmp/cchyQ5Gz.s 			page 200


 6094              		.loc 1 303 3 is_stmt 1 view .LVU1941
 6095 061a FFF7FEFF 		bl	clr_dot
 6096              	.LVL666:
 304:src/display.c **** 
 6097              		.loc 1 304 1 is_stmt 0 view .LVU1942
 6098 061e 5CE5     		b	.L471
 6099              	.LVL667:
 6100              	.L544:
 304:src/display.c **** 
 6101              		.loc 1 304 1 view .LVU1943
 6102              	.LBE429:
 6103              	.LBE428:
2282:src/display.c **** 	      SET_MANT_SIGN;
 6104              		.loc 1 2282 6 is_stmt 1 view .LVU1944
 6105 0620 0193     		str	r3, [sp, #4]
2282:src/display.c **** 	      SET_MANT_SIGN;
 6106              		.loc 1 2282 9 is_stmt 0 view .LVU1945
 6107 0622 002E     		cmp	r6, #0
 6108 0624 40F00281 		bne	.L547
2283:src/display.c **** 	    else
 6109              		.loc 1 2283 8 is_stmt 1 view .LVU1946
 6110              	.LBB430:
 6111              	.LBI430:
 294:src/display.c **** {
 6112              		.loc 1 294 13 view .LVU1947
 6113              	.LBB431:
 296:src/display.c ****   set_dot(MANT_SIGN);
 6114              		.loc 1 296 3 view .LVU1948
 296:src/display.c ****   set_dot(MANT_SIGN);
 6115              		.loc 1 296 25 is_stmt 0 view .LVU1949
 6116 0628 0C4A     		ldr	r2, .L681+24
 6117 062a 2D21     		movs	r1, #45
 297:src/display.c **** }
 6118              		.loc 1 297 3 view .LVU1950
 6119 062c 8120     		movs	r0, #129
 296:src/display.c ****   set_dot(MANT_SIGN);
 6120              		.loc 1 296 25 view .LVU1951
 6121 062e 1170     		strb	r1, [r2]
 297:src/display.c **** }
 6122              		.loc 1 297 3 is_stmt 1 view .LVU1952
 6123 0630 FFF7FEFF 		bl	set_dot
 6124              	.LVL668:
 297:src/display.c **** }
 6125              		.loc 1 297 3 is_stmt 0 view .LVU1953
 6126              	.LBE431:
 6127              	.LBE430:
2288:src/display.c **** 	  if (c == '.') {
 6128              		.loc 1 2288 12 is_stmt 1 view .LVU1954
2288:src/display.c **** 	  if (c == '.') {
 6129              		.loc 1 2288 18 is_stmt 0 view .LVU1955
 6130 0634 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 6131              	.LVL669:
2288:src/display.c **** 	  if (c == '.') {
 6132              		.loc 1 2288 2 view .LVU1956
 6133 0638 019B     		ldr	r3, [sp, #4]
 6134 063a 002A     		cmp	r2, #0
 6135 063c 7FF446AE 		bne	.L546
ARM GAS  /tmp/cchyQ5Gz.s 			page 201


 6136 0640 5FE6     		b	.L545
 6137              	.L682:
 6138 0642 00BF     		.align	2
 6139              	.L681:
 6140 0644 00000000 		.word	StateWhileOn
 6141 0648 00000000 		.word	main_ram
 6142 064c 56555555 		.word	1431655766
 6143 0650 00000000 		.word	.LANCHOR1
 6144 0654 00000000 		.word	Ctx
 6145 0658 00000000 		.word	LastDisplayedExponent
 6146 065c 00000000 		.word	LastDisplayedNumber
 6147              	.LVL670:
 6148              	.L662:
2016:src/display.c **** 	  return;
 6149              		.loc 1 2016 4 is_stmt 1 view .LVU1957
 6150              	.LBB432:
 6151              	.LBI432:
1804:src/display.c **** 	const int dbl = is_dblmode();
 6152              		.loc 1 1804 19 view .LVU1958
 6153              	.LBB433:
1805:src/display.c **** 	char *p;
 6154              		.loc 1 1805 2 view .LVU1959
1805:src/display.c **** 	char *p;
 6155              		.loc 1 1805 18 is_stmt 0 view .LVU1960
 6156 0660 FFF7FEFF 		bl	is_dblmode
 6157              	.LVL671:
1821:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6158              		.loc 1 1821 5 view .LVU1961
 6159 0664 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6160 0668 2D2B     		cmp	r3, #45
1805:src/display.c **** 	char *p;
 6161              		.loc 1 1805 18 view .LVU1962
 6162 066a 0446     		mov	r4, r0
 6163              	.LVL672:
1806:src/display.c **** 	int i, j;
 6164              		.loc 1 1806 2 is_stmt 1 view .LVU1963
1807:src/display.c **** 	char *upper_str;
 6165              		.loc 1 1807 2 view .LVU1964
1808:src/display.c **** 	enum separator_modes separator_mode;
 6166              		.loc 1 1808 2 view .LVU1965
1809:src/display.c **** 	char decimal_mark;
 6167              		.loc 1 1809 2 view .LVU1966
1810:src/display.c **** 	char thousands_sep;
 6168              		.loc 1 1810 2 view .LVU1967
1811:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6169              		.loc 1 1811 2 view .LVU1968
1817:src/display.c **** #endif
 6170              		.loc 1 1817 2 view .LVU1969
1819:src/display.c **** 
 6171              		.loc 1 1819 2 view .LVU1970
1821:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6172              		.loc 1 1821 2 view .LVU1971
1821:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6173              		.loc 1 1821 5 is_stmt 0 view .LVU1972
 6174 066c 00F02A81 		beq	.L677
1834:src/display.c **** 
 6175              		.loc 1 1834 16 view .LVU1973
ARM GAS  /tmp/cchyQ5Gz.s 			page 202


 6176 0670 0026     		movs	r6, #0
 6177              	.LVL673:
 6178              	.L456:
1836:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6179              		.loc 1 1836 2 is_stmt 1 view .LVU1974
1836:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6180              		.loc 1 1836 6 is_stmt 0 view .LVU1975
 6181 0672 0021     		movs	r1, #0
 6182 0674 4046     		mov	r0, r8
 6183 0676 FFF7FEFF 		bl	find_char
 6184              	.LVL674:
1837:src/display.c **** 
 6185              		.loc 1 1837 2 is_stmt 1 view .LVU1976
1837:src/display.c **** 
 6186              		.loc 1 1837 23 is_stmt 0 view .LVU1977
 6187 067a A0EB0802 		sub	r2, r0, r8
1837:src/display.c **** 
 6188              		.loc 1 1837 2 view .LVU1978
 6189 067e C2F12202 		rsb	r2, r2, #34
 6190 0682 3021     		movs	r1, #48
 6191 0684 FFF7FEFF 		bl	xset
 6192              	.LVL675:
1839:src/display.c **** 	  separator_mode = SEP_COMMA;
 6193              		.loc 1 1839 2 is_stmt 1 view .LVU1979
1839:src/display.c **** 	  separator_mode = SEP_COMMA;
 6194              		.loc 1 1839 18 is_stmt 0 view .LVU1980
 6195 0688 B14A     		ldr	r2, .L683
1850:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6196              		.loc 1 1850 6 view .LVU1981
 6197 068a 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1839:src/display.c **** 	  separator_mode = SEP_COMMA;
 6198              		.loc 1 1839 5 view .LVU1982
 6199 068e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1847:src/display.c **** 	}
 6200              		.loc 1 1847 18 view .LVU1983
 6201 0690 002A     		cmp	r2, #0
 6202 0692 15BF     		itete	ne
 6203 0694 4FF0020A 		movne	r10, #2
 6204 0698 2C27     		moveq	r7, #44
 6205 069a 2E27     		movne	r7, #46
 6206              	.LVL676:
1847:src/display.c **** 	}
 6207              		.loc 1 1847 18 view .LVU1984
 6208 069c 2E25     		moveq	r5, #46
 6209 069e 18BF     		it	ne
 6210 06a0 2C25     		movne	r5, #44
 6211              	.LVL677:
1850:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6212              		.loc 1 1850 2 is_stmt 1 view .LVU1985
1850:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6213              		.loc 1 1850 5 is_stmt 0 view .LVU1986
 6214 06a2 13F0380F 		tst	r3, #56
 6215 06a6 40F0C880 		bne	.L678
1877:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6216              		.loc 1 1877 4 is_stmt 1 view .LVU1987
 6217              	.LVL678:
1878:src/display.c **** 	  x[1] = decimal_mark;
ARM GAS  /tmp/cchyQ5Gz.s 			page 203


 6218              		.loc 1 1878 4 view .LVU1988
 6219 06aa 1022     		movs	r2, #16
 6220 06ac 08F10101 		add	r1, r8, #1
 6221 06b0 08F10200 		add	r0, r8, #2
 6222 06b4 FFF7FEFF 		bl	xcopy
 6223              	.LVL679:
1879:src/display.c **** 	  if (grouping) {
 6224              		.loc 1 1879 4 view .LVU1989
1881:src/display.c **** 	    x[5] = thousands_sep;
 6225              		.loc 1 1881 6 is_stmt 0 view .LVU1990
 6226 06b8 0D22     		movs	r2, #13
 6227 06ba 08F10501 		add	r1, r8, #5
 6228 06be 08F10600 		add	r0, r8, #6
1879:src/display.c **** 	  if (grouping) {
 6229              		.loc 1 1879 9 view .LVU1991
 6230 06c2 88F80150 		strb	r5, [r8, #1]
1880:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6231              		.loc 1 1880 4 is_stmt 1 view .LVU1992
1881:src/display.c **** 	    x[5] = thousands_sep;
 6232              		.loc 1 1881 6 view .LVU1993
 6233 06c6 FFF7FEFF 		bl	xcopy
 6234              	.LVL680:
1882:src/display.c **** 	    x += 9;
 6235              		.loc 1 1882 6 view .LVU1994
1883:src/display.c **** 	  }
 6236              		.loc 1 1883 8 is_stmt 0 view .LVU1995
 6237 06ca 08F10905 		add	r5, r8, #9
 6238              	.LVL681:
1882:src/display.c **** 	    x += 9;
 6239              		.loc 1 1882 11 view .LVU1996
 6240 06ce 88F80570 		strb	r7, [r8, #5]
1883:src/display.c **** 	  }
 6241              		.loc 1 1883 6 is_stmt 1 view .LVU1997
 6242              	.LVL682:
1886:src/display.c **** 	    if (exp < 0) {
 6243              		.loc 1 1886 4 view .LVU1998
1886:src/display.c **** 	    if (exp < 0) {
 6244              		.loc 1 1886 7 is_stmt 0 view .LVU1999
 6245 06d2 002C     		cmp	r4, #0
 6246 06d4 00F0F380 		beq	.L460
1887:src/display.c **** 	      x[9] = '-';
 6247              		.loc 1 1887 6 is_stmt 1 view .LVU2000
1887:src/display.c **** 	      x[9] = '-';
 6248              		.loc 1 1887 9 is_stmt 0 view .LVU2001
 6249 06d8 019B     		ldr	r3, [sp, #4]
1895:src/display.c **** 	  }
 6250              		.loc 1 1895 18 view .LVU2002
 6251 06da 9E49     		ldr	r1, .L683+4
1887:src/display.c **** 	      x[9] = '-';
 6252              		.loc 1 1887 9 view .LVU2003
 6253 06dc 002B     		cmp	r3, #0
1888:src/display.c **** 	      exp = -exp;
 6254              		.loc 1 1888 8 is_stmt 1 view .LVU2004
1889:src/display.c **** 	    }
 6255              		.loc 1 1889 8 view .LVU2005
1889:src/display.c **** 	    }
 6256              		.loc 1 1889 12 is_stmt 0 view .LVU2006
ARM GAS  /tmp/cchyQ5Gz.s 			page 204


 6257 06de BCBF     		itt	lt
 6258 06e0 5B42     		rsblt	r3, r3, #0
 6259 06e2 0193     		strlt	r3, [sp, #4]
 6260              	.LVL683:
1893:src/display.c **** 	    x[10] = '0' + j;
 6261              		.loc 1 1893 8 view .LVU2007
 6262 06e4 0198     		ldr	r0, [sp, #4]
 6263 06e6 9C4B     		ldr	r3, .L683+8
1888:src/display.c **** 	      exp = -exp;
 6264              		.loc 1 1888 13 view .LVU2008
 6265 06e8 B4BF     		ite	lt
 6266 06ea 2D22     		movlt	r2, #45
1892:src/display.c **** 	    j = exp / 1000;
 6267              		.loc 1 1892 13 view .LVU2009
 6268 06ec 2022     		movge	r2, #32
 6269 06ee 88F81220 		strb	r2, [r8, #18]
1893:src/display.c **** 	    x[10] = '0' + j;
 6270              		.loc 1 1893 6 is_stmt 1 view .LVU2010
1893:src/display.c **** 	    x[10] = '0' + j;
 6271              		.loc 1 1893 8 is_stmt 0 view .LVU2011
 6272 06f2 0246     		mov	r2, r0
 6273 06f4 A3FB0223 		umull	r2, r3, r3, r2
 6274 06f8 9B09     		lsrs	r3, r3, #6
 6275              	.LVL684:
1894:src/display.c **** 	    exp -= 1000 * j;
 6276              		.loc 1 1894 6 is_stmt 1 view .LVU2012
1894:src/display.c **** 	    exp -= 1000 * j;
 6277              		.loc 1 1894 18 is_stmt 0 view .LVU2013
 6278 06fa 03F13002 		add	r2, r3, #48
1895:src/display.c **** 	  }
 6279              		.loc 1 1895 10 view .LVU2014
 6280 06fe 01FB0303 		mla	r3, r1, r3, r0
 6281              	.LVL685:
1895:src/display.c **** 	  }
 6282              		.loc 1 1895 10 view .LVU2015
 6283 0702 0193     		str	r3, [sp, #4]
 6284              	.LVL686:
1894:src/display.c **** 	    exp -= 1000 * j;
 6285              		.loc 1 1894 12 view .LVU2016
 6286 0704 88F81320 		strb	r2, [r8, #19]
1895:src/display.c **** 	  }
 6287              		.loc 1 1895 6 is_stmt 1 view .LVU2017
 6288              	.LVL687:
 6289              	.L462:
1901:src/display.c **** 	  *x = 0;
 6290              		.loc 1 1901 4 view .LVU2018
 6291 0708 0B22     		movs	r2, #11
 6292 070a 2946     		mov	r1, r5
 6293 070c 08F10A00 		add	r0, r8, #10
 6294 0710 FFF7FEFF 		bl	xcopy
 6295              	.LVL688:
1902:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6296              		.loc 1 1902 4 view .LVU2019
1902:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6297              		.loc 1 1902 7 is_stmt 0 view .LVU2020
 6298 0714 0022     		movs	r2, #0
1903:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
ARM GAS  /tmp/cchyQ5Gz.s 			page 205


 6299              		.loc 1 1903 4 view .LVU2021
 6300 0716 0198     		ldr	r0, [sp, #4]
1902:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6301              		.loc 1 1902 7 view .LVU2022
 6302 0718 88F80920 		strb	r2, [r8, #9]
1903:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6303              		.loc 1 1903 4 is_stmt 1 view .LVU2023
 6304 071c 0121     		movs	r1, #1
 6305 071e FFF7FEFF 		bl	set_exp
 6306              	.LVL689:
1904:src/display.c **** 	}
 6307              		.loc 1 1904 4 view .LVU2024
1904:src/display.c **** 	}
 6308              		.loc 1 1904 4 is_stmt 0 view .LVU2025
 6309 0722 A8EB0606 		sub	r6, r8, r6
 6310              	.LVL690:
1904:src/display.c **** 	}
 6311              		.loc 1 1904 6 view .LVU2026
 6312 0726 0924     		movs	r4, #9
 6313              	.LVL691:
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6314              		.loc 1 1907 11 is_stmt 1 view .LVU2027
 6315 0728 9AE0     		b	.L463
 6316              	.LVL692:
 6317              	.L534:
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6318              		.loc 1 1907 11 is_stmt 0 view .LVU2028
 6319              	.LBE433:
 6320              	.LBE432:
2223:src/display.c **** 	      obp--;
 6321              		.loc 1 2223 12 is_stmt 1 view .LVU2029
 6322 072a 4345     		cmp	r3, r8
 6323 072c 88BF     		it	hi
 6324 072e 1A46     		movhi	r2, r3
 6325 0730 7FF6B6AD 		bls	.L512
 6326              	.L536:
2224:src/display.c **** 	      odig--;
 6327              		.loc 1 2224 8 discriminator 1 view .LVU2030
 6328 0734 1346     		mov	r3, r2
 6329              	.LVL693:
2224:src/display.c **** 	      odig--;
 6330              		.loc 1 2224 8 is_stmt 0 discriminator 1 view .LVU2031
 6331 0736 013A     		subs	r2, r2, #1
 6332              	.LVL694:
2225:src/display.c **** 	    }
 6333              		.loc 1 2225 8 is_stmt 1 discriminator 1 view .LVU2032
2223:src/display.c **** 	      obp--;
 6334              		.loc 1 2223 21 is_stmt 0 discriminator 1 view .LVU2033
 6335 0738 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6336 073c 3029     		cmp	r1, #48
 6337 073e 7FF4AFAD 		bne	.L512
2223:src/display.c **** 	      obp--;
 6338              		.loc 1 2223 12 view .LVU2034
 6339 0742 9045     		cmp	r8, r2
2225:src/display.c **** 	    }
 6340              		.loc 1 2225 12 view .LVU2035
 6341 0744 07F1FF37 		add	r7, r7, #-1
ARM GAS  /tmp/cchyQ5Gz.s 			page 206


 6342              	.LVL695:
2223:src/display.c **** 	      obp--;
 6343              		.loc 1 2223 12 is_stmt 1 view .LVU2036
 6344 0748 F4D1     		bne	.L536
 6345 074a 4346     		mov	r3, r8
 6346 074c A8E5     		b	.L512
 6347              	.LVL696:
 6348              	.L523:
2208:src/display.c **** 	    odig++;
 6349              		.loc 1 2208 6 view .LVU2037
2209:src/display.c **** 	    *obp++ = '.';
 6350              		.loc 1 2209 6 view .LVU2038
2210:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6351              		.loc 1 2210 6 view .LVU2039
2208:src/display.c **** 	    odig++;
 6352              		.loc 1 2208 13 is_stmt 0 view .LVU2040
 6353 074e 42F63063 		movw	r3, #11824
 6354 0752 ADF81430 		strh	r3, [sp, #20]	@ movhi
2211:src/display.c **** 	      *obp++ = '0';
 6355              		.loc 1 2211 6 is_stmt 1 view .LVU2041
 6356              	.LVL697:
2211:src/display.c **** 	      *obp++ = '0';
 6357              		.loc 1 2211 20 view .LVU2042
2211:src/display.c **** 	      *obp++ = '0';
 6358              		.loc 1 2211 6 is_stmt 0 view .LVU2043
 6359 0756 6B1C     		adds	r3, r5, #1
 6360              	.LVL698:
2211:src/display.c **** 	      *obp++ = '0';
 6361              		.loc 1 2211 6 view .LVU2044
 6362 0758 00F0F280 		beq	.L581
 6363 075c C5F10101 		rsb	r1, r5, #1
2210:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6364              		.loc 1 2210 10 view .LVU2045
 6365 0760 0DF11603 		add	r3, sp, #22
 6366              	.LVL699:
2210:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6367              		.loc 1 2210 10 view .LVU2046
 6368 0764 4144     		add	r1, r1, r8
 6369 0766 1A46     		mov	r2, r3
2212:src/display.c **** 	      odig++;
 6370              		.loc 1 2212 15 view .LVU2047
 6371 0768 3020     		movs	r0, #48
 6372              	.LVL700:
 6373              	.L532:
2212:src/display.c **** 	      odig++;
 6374              		.loc 1 2212 8 is_stmt 1 discriminator 3 view .LVU2048
2212:src/display.c **** 	      odig++;
 6375              		.loc 1 2212 15 is_stmt 0 discriminator 3 view .LVU2049
 6376 076a 02F8010B 		strb	r0, [r2], #1
 6377              	.LVL701:
2213:src/display.c **** 	      dd--;
 6378              		.loc 1 2213 8 is_stmt 1 discriminator 3 view .LVU2050
2214:src/display.c **** 	    }
 6379              		.loc 1 2214 8 discriminator 3 view .LVU2051
2211:src/display.c **** 	      *obp++ = '0';
 6380              		.loc 1 2211 25 discriminator 3 view .LVU2052
2211:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/cchyQ5Gz.s 			page 207


 6381              		.loc 1 2211 20 discriminator 3 view .LVU2053
2211:src/display.c **** 	      *obp++ = '0';
 6382              		.loc 1 2211 6 is_stmt 0 discriminator 3 view .LVU2054
 6383 076e 8A42     		cmp	r2, r1
 6384 0770 FBD1     		bne	.L532
 6385 0772 AA44     		add	r10, r10, r5
 6386 0774 EA43     		mvns	r2, r5
 6387              	.LVL702:
2211:src/display.c **** 	      *obp++ = '0';
 6388              		.loc 1 2211 6 discriminator 3 view .LVU2055
 6389 0776 0AF1010A 		add	r10, r10, #1
 6390 077a 1344     		add	r3, r3, r2
 6391 077c 6F42     		rsbs	r7, r5, #0
 6392              	.L531:
 6393              	.LVL703:
2216:src/display.c **** 	      *obp++ = *p++;
 6394              		.loc 1 2216 12 is_stmt 1 view .LVU2056
 6395 077e BAF1000F 		cmp	r10, #0
2216:src/display.c **** 	      *obp++ = *p++;
 6396              		.loc 1 2216 15 is_stmt 0 view .LVU2057
 6397 0782 0AF1FF32 		add	r2, r10, #-1
 6398              	.LVL704:
2216:src/display.c **** 	      *obp++ = *p++;
 6399              		.loc 1 2216 12 view .LVU2058
 6400 0786 7FF708AF 		ble	.L528
 6401 078a 9A44     		add	r10, r10, r3
 6402 078c 0AF1FF30 		add	r0, r10, #-1
 6403 0790 013B     		subs	r3, r3, #1
 6404              	.LVL705:
 6405              	.L533:
2217:src/display.c **** 	      odig++;
 6406              		.loc 1 2217 8 is_stmt 1 view .LVU2059
2217:src/display.c **** 	      odig++;
 6407              		.loc 1 2217 15 is_stmt 0 view .LVU2060
 6408 0792 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6409              	.LVL706:
2217:src/display.c **** 	      odig++;
 6410              		.loc 1 2217 15 view .LVU2061
 6411 0796 03F8011F 		strb	r1, [r3, #1]!
2218:src/display.c **** 	    }
 6412              		.loc 1 2218 8 is_stmt 1 view .LVU2062
2216:src/display.c **** 	      *obp++ = *p++;
 6413              		.loc 1 2216 12 view .LVU2063
2216:src/display.c **** 	      *obp++ = *p++;
 6414              		.loc 1 2216 12 is_stmt 0 view .LVU2064
 6415 079a 8342     		cmp	r3, r0
 6416 079c F9D1     		bne	.L533
 6417              	.LVL707:
2216:src/display.c **** 	      *obp++ = *p++;
 6418              		.loc 1 2216 12 view .LVU2065
 6419 079e 0137     		adds	r7, r7, #1
 6420 07a0 1744     		add	r7, r7, r2
 6421 07a2 5346     		mov	r3, r10
 6422 07a4 F9E6     		b	.L528
 6423              	.LVL708:
 6424              	.L538:
2234:src/display.c **** 	    odig++;
ARM GAS  /tmp/cchyQ5Gz.s 			page 208


 6425              		.loc 1 2234 6 is_stmt 1 view .LVU2066
2234:src/display.c **** 	    odig++;
 6426              		.loc 1 2234 13 is_stmt 0 view .LVU2067
 6427 07a6 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6428 07aa 8DF81430 		strb	r3, [sp, #20]
2235:src/display.c **** 	    dd--;
 6429              		.loc 1 2235 6 is_stmt 1 view .LVU2068
 6430              	.LVL709:
2236:src/display.c **** 	    exp--;
 6431              		.loc 1 2236 6 view .LVU2069
2236:src/display.c **** 	    exp--;
 6432              		.loc 1 2236 8 is_stmt 0 view .LVU2070
 6433 07ae 0AF1FF3A 		add	r10, r10, #-1
 6434              	.LVL710:
2237:src/display.c **** 	  case -2:
 6435              		.loc 1 2237 6 is_stmt 1 view .LVU2071
2237:src/display.c **** 	  case -2:
 6436              		.loc 1 2237 9 is_stmt 0 view .LVU2072
 6437 07b2 013D     		subs	r5, r5, #1
 6438              	.LVL711:
2237:src/display.c **** 	  case -2:
 6439              		.loc 1 2237 9 view .LVU2073
 6440 07b4 0327     		movs	r7, #3
2234:src/display.c **** 	    odig++;
 6441              		.loc 1 2234 17 view .LVU2074
 6442 07b6 0DF14909 		add	r9, sp, #73
 6443              	.LVL712:
2234:src/display.c **** 	    odig++;
 6444              		.loc 1 2234 10 view .LVU2075
 6445 07ba 0DF11501 		add	r1, sp, #21
 6446              	.LVL713:
2234:src/display.c **** 	    odig++;
 6447              		.loc 1 2234 10 view .LVU2076
 6448 07be A6E6     		b	.L540
 6449              	.LVL714:
 6450              	.L486:
2099:src/display.c **** 	    /* We might have push the fixed decimals off the
 6451              		.loc 1 2099 6 is_stmt 1 view .LVU2077
2103:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6452              		.loc 1 2103 6 view .LVU2078
2103:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6453              		.loc 1 2103 23 is_stmt 0 view .LVU2079
 6454 07c0 05EB0A03 		add	r3, r5, r10
2103:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6455              		.loc 1 2103 9 view .LVU2080
 6456 07c4 9E42     		cmp	r6, r3
2104:src/display.c **** 	  }
 6457              		.loc 1 2104 8 is_stmt 1 view .LVU2081
2104:src/display.c **** 	  }
 6458              		.loc 1 2104 30 is_stmt 0 view .LVU2082
 6459 07c6 DCBF     		itt	le
 6460 07c8 06F1FF3A 		addle	r10, r6, #-1
 6461              	.LVL715:
2104:src/display.c **** 	  }
 6462              		.loc 1 2104 11 view .LVU2083
 6463 07cc AAEB050A 		suble	r10, r10, r5
 6464              	.LVL716:
ARM GAS  /tmp/cchyQ5Gz.s 			page 209


2104:src/display.c **** 	  }
 6465              		.loc 1 2104 11 view .LVU2084
 6466 07d0 2A46     		mov	r2, r5
 6467 07d2 BAE4     		b	.L484
 6468              	.LVL717:
 6469              	.L578:
2140:src/display.c **** 	    case -1:
 6470              		.loc 1 2140 24 view .LVU2085
 6471 07d4 0227     		movs	r7, #2
 6472 07d6 4046     		mov	r0, r8
 6473              	.LVL718:
 6474              	.L511:
2149:src/display.c **** 	      odig++;
 6475              		.loc 1 2149 8 is_stmt 1 view .LVU2086
2149:src/display.c **** 	      odig++;
 6476              		.loc 1 2149 15 is_stmt 0 view .LVU2087
 6477 07d8 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6478              	.LVL719:
2149:src/display.c **** 	      odig++;
 6479              		.loc 1 2149 15 view .LVU2088
 6480 07dc 00F8013B 		strb	r3, [r0], #1
 6481              	.LVL720:
2150:src/display.c **** 	      dd--;
 6482              		.loc 1 2150 8 is_stmt 1 view .LVU2089
2151:src/display.c **** 	      exp--;
 6483              		.loc 1 2151 8 view .LVU2090
2152:src/display.c **** 	    case 0:
 6484              		.loc 1 2152 8 view .LVU2091
2152:src/display.c **** 	    case 0:
 6485              		.loc 1 2152 11 is_stmt 0 view .LVU2092
 6486 07e0 013D     		subs	r5, r5, #1
 6487              	.LVL721:
 6488              	.L508:
2154:src/display.c **** 	    };
 6489              		.loc 1 2154 8 is_stmt 1 view .LVU2093
2155:src/display.c **** 	    *obp++ = *p++;
 6490              		.loc 1 2155 7 view .LVU2094
2156:src/display.c **** 	    odig++;
 6491              		.loc 1 2156 6 view .LVU2095
2156:src/display.c **** 	    odig++;
 6492              		.loc 1 2156 17 is_stmt 0 view .LVU2096
 6493 07e2 4946     		mov	r1, r9
 6494              	.LVL722:
2156:src/display.c **** 	    odig++;
 6495              		.loc 1 2156 13 view .LVU2097
 6496 07e4 0346     		mov	r3, r0
 6497 07e6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6498              	.LVL723:
2156:src/display.c **** 	    odig++;
 6499              		.loc 1 2156 13 view .LVU2098
 6500 07ea 03F802CB 		strb	ip, [r3], #2
2157:src/display.c **** 	    *obp++ = '.';
 6501              		.loc 1 2157 6 is_stmt 1 view .LVU2099
2158:src/display.c **** 	    for (i=1; i<count; i++) {
 6502              		.loc 1 2158 6 view .LVU2100
 6503              	.LVL724:
2159:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/cchyQ5Gz.s 			page 210


 6504              		.loc 1 2159 6 is_stmt 0 view .LVU2101
 6505 07ee 012A     		cmp	r2, #1
2158:src/display.c **** 	    for (i=1; i<count; i++) {
 6506              		.loc 1 2158 13 view .LVU2102
 6507 07f0 4FF02E0C 		mov	ip, #46
 6508 07f4 80F801C0 		strb	ip, [r0, #1]
2159:src/display.c **** 	      *obp++ = *p++;
 6509              		.loc 1 2159 6 is_stmt 1 view .LVU2103
 6510              	.LVL725:
2159:src/display.c **** 	      *obp++ = *p++;
 6511              		.loc 1 2159 16 view .LVU2104
2159:src/display.c **** 	      *obp++ = *p++;
 6512              		.loc 1 2159 6 is_stmt 0 view .LVU2105
 6513 07f8 53DD     		ble	.L579
2159:src/display.c **** 	      *obp++ = *p++;
 6514              		.loc 1 2159 6 view .LVU2106
 6515 07fa 0130     		adds	r0, r0, #1
 6516 07fc 9144     		add	r9, r9, r2
 6517              	.LVL726:
 6518              	.L513:
2160:src/display.c **** 	      odig++;
 6519              		.loc 1 2160 8 is_stmt 1 discriminator 3 view .LVU2107
2160:src/display.c **** 	      odig++;
 6520              		.loc 1 2160 15 is_stmt 0 discriminator 3 view .LVU2108
 6521 07fe 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6522              	.LVL727:
2160:src/display.c **** 	      odig++;
 6523              		.loc 1 2160 15 discriminator 3 view .LVU2109
 6524 0802 00F801CF 		strb	ip, [r0, #1]!
2161:src/display.c **** 	    }
 6525              		.loc 1 2161 8 is_stmt 1 discriminator 3 view .LVU2110
2159:src/display.c **** 	      *obp++ = *p++;
 6526              		.loc 1 2159 25 discriminator 3 view .LVU2111
2159:src/display.c **** 	      *obp++ = *p++;
 6527              		.loc 1 2159 16 discriminator 3 view .LVU2112
2159:src/display.c **** 	      *obp++ = *p++;
 6528              		.loc 1 2159 6 is_stmt 0 discriminator 3 view .LVU2113
 6529 0806 4945     		cmp	r1, r9
 6530 0808 F9D1     		bne	.L513
 6531 080a 013A     		subs	r2, r2, #1
 6532              	.LVL728:
2159:src/display.c **** 	      *obp++ = *p++;
 6533              		.loc 1 2159 6 discriminator 3 view .LVU2114
 6534 080c 1344     		add	r3, r3, r2
 6535 080e 1744     		add	r7, r7, r2
2163:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6536              		.loc 1 2163 15 view .LVU2115
 6537 0810 4FF0010B 		mov	fp, #1
 6538 0814 44E5     		b	.L512
 6539              	.LVL729:
 6540              	.L509:
2143:src/display.c **** 	      odig++;
 6541              		.loc 1 2143 8 is_stmt 1 view .LVU2116
2143:src/display.c **** 	      odig++;
 6542              		.loc 1 2143 15 is_stmt 0 view .LVU2117
 6543 0816 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6544 081a 8DF81430 		strb	r3, [sp, #20]
ARM GAS  /tmp/cchyQ5Gz.s 			page 211


2144:src/display.c **** 	      dd--;
 6545              		.loc 1 2144 8 is_stmt 1 view .LVU2118
 6546              	.LVL730:
2145:src/display.c **** 	      exp--;
 6547              		.loc 1 2145 8 view .LVU2119
2146:src/display.c **** 	    case -2:
 6548              		.loc 1 2146 8 view .LVU2120
2146:src/display.c **** 	    case -2:
 6549              		.loc 1 2146 11 is_stmt 0 view .LVU2121
 6550 081e 013D     		subs	r5, r5, #1
 6551              	.LVL731:
2146:src/display.c **** 	    case -2:
 6552              		.loc 1 2146 11 view .LVU2122
 6553 0820 0327     		movs	r7, #3
2143:src/display.c **** 	      odig++;
 6554              		.loc 1 2143 19 view .LVU2123
 6555 0822 0DF14909 		add	r9, sp, #73
 6556              	.LVL732:
2143:src/display.c **** 	      odig++;
 6557              		.loc 1 2143 12 view .LVU2124
 6558 0826 0DF11500 		add	r0, sp, #21
 6559              	.LVL733:
2143:src/display.c **** 	      odig++;
 6560              		.loc 1 2143 12 view .LVU2125
 6561 082a D5E7     		b	.L511
 6562              	.LVL734:
 6563              	.L547:
2285:src/display.c **** 	  }
 6564              		.loc 1 2285 8 is_stmt 1 view .LVU2126
 6565 082c 2D21     		movs	r1, #45
 6566 082e A6F10900 		sub	r0, r6, #9
 6567 0832 FFF7FEFF 		bl	set_dig
 6568              	.LVL735:
 6569 0836 019B     		ldr	r3, [sp, #4]
 6570 0838 43E5     		b	.L543
 6571              	.LVL736:
 6572              	.L678:
 6573              	.LBB442:
 6574              	.LBB440:
 6575              	.LBB434:
1852:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6576              		.loc 1 1852 4 view .LVU2127
1855:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6577              		.loc 1 1855 4 view .LVU2128
1855:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6578              		.loc 1 1855 14 is_stmt 0 view .LVU2129
 6579 083a 08F10306 		add	r6, r8, #3
 6580              	.LVL737:
1856:src/display.c **** 	  if (grouping) {
 6581              		.loc 1 1856 4 is_stmt 1 view .LVU2130
 6582 083e 4749     		ldr	r1, .L683+12
 6583 0840 0D22     		movs	r2, #13
 6584 0842 3046     		mov	r0, r6
 6585 0844 FFF7FEFF 		bl	xcopy
 6586              	.LVL738:
1857:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6587              		.loc 1 1857 4 view .LVU2131
ARM GAS  /tmp/cchyQ5Gz.s 			page 212


1858:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6588              		.loc 1 1858 6 view .LVU2132
 6589 0848 1322     		movs	r2, #19
 6590 084a 08EB0201 		add	r1, r8, r2
 6591 084e 08F11400 		add	r0, r8, #20
 6592 0852 FFF7FEFF 		bl	xcopy
 6593              	.LVL739:
1859:src/display.c **** 	    x += 3 + 13 + 7;
 6594              		.loc 1 1859 6 view .LVU2133
1860:src/display.c **** 	  }
 6595              		.loc 1 1860 8 is_stmt 0 view .LVU2134
 6596 0856 08F11705 		add	r5, r8, #23
 6597              	.LVL740:
1859:src/display.c **** 	    x += 3 + 13 + 7;
 6598              		.loc 1 1859 24 view .LVU2135
 6599 085a 88F81370 		strb	r7, [r8, #19]
1860:src/display.c **** 	  }
 6600              		.loc 1 1860 6 is_stmt 1 view .LVU2136
 6601              	.LVL741:
1873:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6602              		.loc 1 1873 4 view .LVU2137
1874:src/display.c **** 	}
 6603              		.loc 1 1874 4 view .LVU2138
1874:src/display.c **** 	}
 6604              		.loc 1 1874 6 is_stmt 0 view .LVU2139
 6605 085e 1B24     		movs	r4, #27
 6606              	.LVL742:
 6607              	.L463:
1874:src/display.c **** 	}
 6608              		.loc 1 1874 6 view .LVU2140
 6609              	.LBE434:
1908:src/display.c **** 	  }
 6610              		.loc 1 1908 6 is_stmt 1 view .LVU2141
 6611              	.LBB435:
 6612              	.LBI435:
 365:src/display.c ****   if (sep == SEP_NONE)
 6613              		.loc 1 365 14 view .LVU2142
 6614              	.LBB436:
 366:src/display.c ****     return res;
 6615              		.loc 1 366 3 view .LVU2143
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6616              		.loc 1 368 3 view .LVU2144
 6617 0860 2046     		mov	r0, r4
 6618 0862 5146     		mov	r1, r10
 6619              	.LBE436:
 6620              	.LBE435:
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6621              		.loc 1 1907 38 is_stmt 0 view .LVU2145
 6622 0864 1B34     		adds	r4, r4, #27
 6623              	.LVL743:
 6624              	.LBB438:
 6625              	.LBB437:
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6626              		.loc 1 1907 38 view .LVU2146
 6627 0866 FFF7FEFF 		bl	set_separator.part.0
 6628              	.LVL744:
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
ARM GAS  /tmp/cchyQ5Gz.s 			page 213


 6629              		.loc 1 1907 38 view .LVU2147
 6630              	.LBE437:
 6631              	.LBE438:
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6632              		.loc 1 1907 36 is_stmt 1 view .LVU2148
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6633              		.loc 1 1907 11 view .LVU2149
1907:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6634              		.loc 1 1907 4 is_stmt 0 view .LVU2150
 6635 086a 512C     		cmp	r4, #81
 6636 086c F8DD     		ble	.L463
 6637 086e 6C1E     		subs	r4, r5, #1
 6638              	.LVL745:
 6639              	.L465:
1913:src/display.c **** 
 6640              		.loc 1 1913 4 is_stmt 1 view .LVU2151
 6641 0870 5846     		mov	r0, fp
 6642 0872 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1912:src/display.c **** 	  set_dig(j, x[i]);
 6643              		.loc 1 1912 33 is_stmt 0 view .LVU2152
 6644 0876 0BF1090B 		add	fp, fp, #9
 6645              	.LVL746:
1913:src/display.c **** 
 6646              		.loc 1 1913 4 view .LVU2153
 6647 087a FFF7FEFF 		bl	set_dig
 6648              	.LVL747:
1912:src/display.c **** 	  set_dig(j, x[i]);
 6649              		.loc 1 1912 26 is_stmt 1 view .LVU2154
1912:src/display.c **** 	  set_dig(j, x[i]);
 6650              		.loc 1 1912 18 view .LVU2155
1912:src/display.c **** 	  set_dig(j, x[i]);
 6651              		.loc 1 1912 2 is_stmt 0 view .LVU2156
 6652 087e BBF16C0F 		cmp	fp, #108
 6653 0882 F5D1     		bne	.L465
1915:src/display.c **** 	set_status(upper_str - negative);
 6654              		.loc 1 1915 2 is_stmt 1 view .LVU2157
1915:src/display.c **** 	set_status(upper_str - negative);
 6655              		.loc 1 1915 5 is_stmt 0 view .LVU2158
 6656 0884 0023     		movs	r3, #0
1916:src/display.c ****       }
 6657              		.loc 1 1916 2 view .LVU2159
 6658 0886 3046     		mov	r0, r6
1915:src/display.c **** 	set_status(upper_str - negative);
 6659              		.loc 1 1915 5 view .LVU2160
 6660 0888 2B70     		strb	r3, [r5]
1916:src/display.c ****       }
 6661              		.loc 1 1916 2 is_stmt 1 view .LVU2161
 6662 088a FFF7FEFF 		bl	set_status
 6663              	.LVL748:
1917:src/display.c **** 
 6664              		.loc 1 1917 7 is_stmt 0 view .LVU2162
 6665 088e 43E5     		b	.L444
 6666              	.LVL749:
 6667              	.L675:
1917:src/display.c **** 
 6668              		.loc 1 1917 7 view .LVU2163
 6669              	.LBE440:
ARM GAS  /tmp/cchyQ5Gz.s 			page 214


 6670              	.LBE442:
1973:src/display.c **** 	      return;
 6671              		.loc 1 1973 8 is_stmt 1 view .LVU2164
 6672 0890 3046     		mov	r0, r6
 6673 0892 FFF7FEFF 		bl	set_x_hms
 6674              	.LVL750:
1974:src/display.c **** 	    }
 6675              		.loc 1 1974 8 view .LVU2165
 6676 0896 3FE5     		b	.L444
 6677              	.LVL751:
 6678              	.L576:
2135:src/display.c **** 	  if (count != *display_digits)
 6679              		.loc 1 2135 15 is_stmt 0 view .LVU2166
 6680 0898 3246     		mov	r2, r6
 6681 089a A3E4     		b	.L504
 6682              	.LVL752:
 6683              	.L577:
2140:src/display.c **** 	    case -1:
 6684              		.loc 1 2140 24 view .LVU2167
 6685 089c 0127     		movs	r7, #1
 6686 089e 4046     		mov	r0, r8
 6687 08a0 9FE7     		b	.L508
 6688              	.LVL753:
 6689              	.L579:
2163:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6690              		.loc 1 2163 15 view .LVU2168
 6691 08a2 4FF0010B 		mov	fp, #1
 6692 08a6 FBE4     		b	.L512
 6693              	.LVL754:
 6694              	.L551:
 6695              	.LBB443:
 6696              	.LBB419:
2163:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6697              		.loc 1 2163 15 view .LVU2169
 6698 08a8 3046     		mov	r0, r6
 6699 08aa 0193     		str	r3, [sp, #4]
 6700 08ac FFF7FEFF 		bl	set_separator.part.0
 6701              	.LVL755:
2163:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6702              		.loc 1 2163 15 view .LVU2170
 6703 08b0 019B     		ldr	r3, [sp, #4]
 6704 08b2 0446     		mov	r4, r0
 6705              	.LVL756:
2163:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6706              		.loc 1 2163 15 view .LVU2171
 6707 08b4 F9E5     		b	.L549
 6708              	.LVL757:
 6709              	.L489:
2163:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6710              		.loc 1 2163 15 view .LVU2172
 6711              	.LBE419:
 6712              	.LBE443:
2113:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6713              		.loc 1 2113 4 is_stmt 1 view .LVU2173
2113:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6714              		.loc 1 2113 7 is_stmt 0 view .LVU2174
 6715 08b6 4B45     		cmp	r3, r9
ARM GAS  /tmp/cchyQ5Gz.s 			page 215


 6716 08b8 7FF460AC 		bne	.L560
 6717 08bc 63E5     		b	.L561
 6718              	.LVL758:
 6719              	.L460:
 6720              	.LBB444:
 6721              	.LBB441:
1898:src/display.c **** 	    x[10] = '\0';
 6722              		.loc 1 1898 6 is_stmt 1 view .LVU2175
1899:src/display.c **** 	  }
 6723              		.loc 1 1899 6 view .LVU2176
1898:src/display.c **** 	    x[10] = '\0';
 6724              		.loc 1 1898 11 is_stmt 0 view .LVU2177
 6725 08be A8F81240 		strh	r4, [r8, #18]	@ movhi
 6726 08c2 21E7     		b	.L462
 6727              	.LVL759:
 6728              	.L677:
 6729              	.LBB439:
1823:src/display.c **** 
 6730              		.loc 1 1823 4 is_stmt 1 view .LVU2178
1825:src/display.c **** 	  xcopy(x, small_minus, 4);
 6731              		.loc 1 1825 4 view .LVU2179
 6732 08c4 2222     		movs	r2, #34
 6733 08c6 0DF11501 		add	r1, sp, #21
 6734 08ca 06A8     		add	r0, sp, #24
 6735              	.LVL760:
1825:src/display.c **** 	  xcopy(x, small_minus, 4);
 6736              		.loc 1 1825 4 is_stmt 0 view .LVU2180
 6737 08cc FFF7FEFF 		bl	xcopy
 6738              	.LVL761:
1826:src/display.c **** 	  x += 4;
 6739              		.loc 1 1826 4 is_stmt 1 view .LVU2181
 6740 08d0 4046     		mov	r0, r8
 6741 08d2 2349     		ldr	r1, .L683+16
 6742 08d4 0422     		movs	r2, #4
 6743 08d6 FFF7FEFF 		bl	xcopy
 6744              	.LVL762:
1827:src/display.c **** 	  negative = 4;
 6745              		.loc 1 1827 4 view .LVU2182
1828:src/display.c **** #else
 6746              		.loc 1 1828 4 view .LVU2183
1827:src/display.c **** 	  negative = 4;
 6747              		.loc 1 1827 6 is_stmt 0 view .LVU2184
 6748 08da 0DF11808 		add	r8, sp, #24
 6749              	.LVL763:
1828:src/display.c **** #else
 6750              		.loc 1 1828 13 view .LVU2185
 6751 08de 0426     		movs	r6, #4
 6752              	.LVL764:
1828:src/display.c **** #else
 6753              		.loc 1 1828 13 view .LVU2186
 6754              	.LBE439:
 6755 08e0 C7E6     		b	.L456
 6756              	.LVL765:
 6757              	.L514:
1828:src/display.c **** #else
 6758              		.loc 1 1828 13 view .LVU2187
 6759              	.LBE441:
ARM GAS  /tmp/cchyQ5Gz.s 			page 216


 6760              	.LBE444:
2179:src/display.c **** 	    odig++;
 6761              		.loc 1 2179 6 is_stmt 1 view .LVU2188
2180:src/display.c **** 	    *obp++ = '.';
 6762              		.loc 1 2180 6 view .LVU2189
2181:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6763              		.loc 1 2181 6 view .LVU2190
2179:src/display.c **** 	    odig++;
 6764              		.loc 1 2179 13 is_stmt 0 view .LVU2191
 6765 08e2 42F63063 		movw	r3, #11824
2182:src/display.c **** 	      *obp++ = '0';
 6766              		.loc 1 2182 6 view .LVU2192
 6767 08e6 691C     		adds	r1, r5, #1
2179:src/display.c **** 	    odig++;
 6768              		.loc 1 2179 13 view .LVU2193
 6769 08e8 ADF81430 		strh	r3, [sp, #20]	@ movhi
2182:src/display.c **** 	      *obp++ = '0';
 6770              		.loc 1 2182 6 is_stmt 1 view .LVU2194
 6771              	.LVL766:
2182:src/display.c **** 	      *obp++ = '0';
 6772              		.loc 1 2182 20 view .LVU2195
2182:src/display.c **** 	      *obp++ = '0';
 6773              		.loc 1 2182 6 is_stmt 0 view .LVU2196
 6774 08ec 2CD0     		beq	.L580
 6775 08ee C5F10100 		rsb	r0, r5, #1
2181:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6776              		.loc 1 2181 10 view .LVU2197
 6777 08f2 0DF11603 		add	r3, sp, #22
 6778              	.LVL767:
2181:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6779              		.loc 1 2181 10 view .LVU2198
 6780 08f6 4044     		add	r0, r0, r8
 6781 08f8 1946     		mov	r1, r3
 6782              	.LVL768:
2183:src/display.c **** 	      odig++;
 6783              		.loc 1 2183 15 view .LVU2199
 6784 08fa 3027     		movs	r7, #48
 6785              	.LVL769:
 6786              	.L521:
2183:src/display.c **** 	      odig++;
 6787              		.loc 1 2183 8 is_stmt 1 discriminator 3 view .LVU2200
2183:src/display.c **** 	      odig++;
 6788              		.loc 1 2183 15 is_stmt 0 discriminator 3 view .LVU2201
 6789 08fc 01F8017B 		strb	r7, [r1], #1
 6790              	.LVL770:
2184:src/display.c **** 	    }
 6791              		.loc 1 2184 8 is_stmt 1 discriminator 3 view .LVU2202
2182:src/display.c **** 	      *obp++ = '0';
 6792              		.loc 1 2182 25 discriminator 3 view .LVU2203
2182:src/display.c **** 	      *obp++ = '0';
 6793              		.loc 1 2182 20 discriminator 3 view .LVU2204
2182:src/display.c **** 	      *obp++ = '0';
 6794              		.loc 1 2182 6 is_stmt 0 discriminator 3 view .LVU2205
 6795 0900 8142     		cmp	r1, r0
 6796 0902 FBD1     		bne	.L521
 6797 0904 E943     		mvns	r1, r5
 6798              	.LVL771:
ARM GAS  /tmp/cchyQ5Gz.s 			page 217


2182:src/display.c **** 	      *obp++ = '0';
 6799              		.loc 1 2182 6 discriminator 3 view .LVU2206
 6800 0906 0B44     		add	r3, r3, r1
 6801 0908 6F42     		rsbs	r7, r5, #0
 6802              	.L520:
 6803              	.LVL772:
2186:src/display.c **** 	      *obp++ = *p++;
 6804              		.loc 1 2186 16 is_stmt 1 view .LVU2207
2186:src/display.c **** 	      *obp++ = *p++;
 6805              		.loc 1 2186 6 is_stmt 0 view .LVU2208
 6806 090a 002A     		cmp	r2, #0
 6807 090c 7FF7C8AC 		ble	.L512
 6808 0910 02F1FF3C 		add	ip, r2, #-1
 6809 0914 9C44     		add	ip, ip, r3
 6810 0916 591E     		subs	r1, r3, #1
 6811              	.LVL773:
 6812              	.L522:
2187:src/display.c **** 	      odig++;
 6813              		.loc 1 2187 8 is_stmt 1 discriminator 3 view .LVU2209
2187:src/display.c **** 	      odig++;
 6814              		.loc 1 2187 15 is_stmt 0 discriminator 3 view .LVU2210
 6815 0918 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6816              	.LVL774:
2187:src/display.c **** 	      odig++;
 6817              		.loc 1 2187 15 discriminator 3 view .LVU2211
 6818 091c 01F8010F 		strb	r0, [r1, #1]!
2188:src/display.c **** 	    }
 6819              		.loc 1 2188 8 is_stmt 1 discriminator 3 view .LVU2212
2186:src/display.c **** 	      *obp++ = *p++;
 6820              		.loc 1 2186 25 discriminator 3 view .LVU2213
 6821              	.LVL775:
2186:src/display.c **** 	      *obp++ = *p++;
 6822              		.loc 1 2186 16 discriminator 3 view .LVU2214
2186:src/display.c **** 	      *obp++ = *p++;
 6823              		.loc 1 2186 6 is_stmt 0 discriminator 3 view .LVU2215
 6824 0920 8C45     		cmp	ip, r1
 6825 0922 F9D1     		bne	.L522
 6826              	.LVL776:
2186:src/display.c **** 	      *obp++ = *p++;
 6827              		.loc 1 2186 6 discriminator 3 view .LVU2216
 6828 0924 1344     		add	r3, r3, r2
 6829              	.LVL777:
2186:src/display.c **** 	      *obp++ = *p++;
 6830              		.loc 1 2186 6 discriminator 3 view .LVU2217
 6831 0926 1744     		add	r7, r7, r2
 6832 0928 BAE4     		b	.L512
 6833              	.LVL778:
 6834              	.L676:
2129:src/display.c **** 
 6835              		.loc 1 2129 2 is_stmt 1 view .LVU2218
2129:src/display.c **** 
 6836              		.loc 1 2129 40 is_stmt 0 view .LVU2219
 6837 092a 0AF10102 		add	r2, r10, #1
2129:src/display.c **** 
 6838              		.loc 1 2129 9 view .LVU2220
 6839 092e 09EB0203 		add	r3, r9, r2
 6840              	.LVL779:
ARM GAS  /tmp/cchyQ5Gz.s 			page 218


2129:src/display.c **** 
 6841              		.loc 1 2129 45 is_stmt 1 view .LVU2221
2129:src/display.c **** 
 6842              		.loc 1 2129 2 is_stmt 0 view .LVU2222
 6843 0932 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6844 0936 002A     		cmp	r2, #0
 6845 0938 3FF496AC 		beq	.L658
2118:src/display.c **** 	      extra_digits = 0;
 6846              		.loc 1 2118 37 view .LVU2223
 6847 093c 0227     		movs	r7, #2
 6848 093e 2FE4     		b	.L559
 6849              	.LVL780:
 6850              	.L581:
2209:src/display.c **** 	    *obp++ = '.';
 6851              		.loc 1 2209 10 view .LVU2224
 6852 0940 0127     		movs	r7, #1
2210:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6853              		.loc 1 2210 10 view .LVU2225
 6854 0942 0DF11603 		add	r3, sp, #22
 6855              	.LVL781:
2210:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6856              		.loc 1 2210 10 view .LVU2226
 6857 0946 1AE7     		b	.L531
 6858              	.LVL782:
 6859              	.L580:
2180:src/display.c **** 	    *obp++ = '.';
 6860              		.loc 1 2180 10 view .LVU2227
 6861 0948 0127     		movs	r7, #1
2181:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6862              		.loc 1 2181 10 view .LVU2228
 6863 094a 0DF11603 		add	r3, sp, #22
 6864              	.LVL783:
2181:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6865              		.loc 1 2181 10 view .LVU2229
 6866 094e DCE7     		b	.L520
 6867              	.L684:
 6868              		.align	2
 6869              	.L683:
 6870 0950 00000000 		.word	.LANCHOR1
 6871 0954 18FCFFFF 		.word	-1000
 6872 0958 D34D6210 		.word	274877907
 6873 095c 00000000 		.word	.LANCHOR14
 6874 0960 00000000 		.word	.LANCHOR13
 6875              		.cfi_endproc
 6876              	.LFE27:
 6878              		.section	.text.set_x,"ax",%progbits
 6879              		.align	1
 6880              		.p2align 2,,3
 6881              		.syntax unified
 6882              		.thumb
 6883              		.thumb_func
 6884              		.fpu fpv4-sp-d16
 6886              	set_x:
 6887              	.LVL784:
 6888              	.LFB26:
1924:src/display.c **** 	decNumber z;
 6889              		.loc 1 1924 66 is_stmt 1 view -0
ARM GAS  /tmp/cchyQ5Gz.s 			page 219


 6890              		.cfi_startproc
 6891              		@ args = 0, pretend = 0, frame = 40
 6892              		@ frame_needed = 0, uses_anonymous_args = 0
1925:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6893              		.loc 1 1925 2 view .LVU2231
1926:src/display.c **** 
 6894              		.loc 1 1926 2 view .LVU2232
1924:src/display.c **** 	decNumber z;
 6895              		.loc 1 1924 66 is_stmt 0 view .LVU2233
 6896 0000 30B5     		push	{r4, r5, lr}
 6897              		.cfi_def_cfa_offset 12
 6898              		.cfi_offset 4, -12
 6899              		.cfi_offset 5, -8
 6900              		.cfi_offset 14, -4
 6901 0002 8BB0     		sub	sp, sp, #44
 6902              		.cfi_def_cfa_offset 56
1926:src/display.c **** 
 6903              		.loc 1 1926 6 view .LVU2234
 6904 0004 0C23     		movs	r3, #12
1929:src/display.c **** 	else
 6905              		.loc 1 1929 4 view .LVU2235
 6906 0006 01AD     		add	r5, sp, #4
1924:src/display.c **** 	decNumber z;
 6907              		.loc 1 1924 66 view .LVU2236
 6908 0008 0C46     		mov	r4, r1
1926:src/display.c **** 
 6909              		.loc 1 1926 6 view .LVU2237
 6910 000a 0093     		str	r3, [sp]
1928:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6911              		.loc 1 1928 2 is_stmt 1 view .LVU2238
1929:src/display.c **** 	else
 6912              		.loc 1 1929 4 is_stmt 0 view .LVU2239
 6913 000c 2946     		mov	r1, r5
 6914              	.LVL785:
1928:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6915              		.loc 1 1928 5 view .LVU2240
 6916 000e 42B1     		cbz	r2, .L686
1929:src/display.c **** 	else
 6917              		.loc 1 1929 4 is_stmt 1 view .LVU2241
 6918 0010 FFF7FEFF 		bl	decimal128ToNumber
 6919              	.LVL786:
1932:src/display.c ****       }
 6920              		.loc 1 1932 2 view .LVU2242
 6921 0014 2146     		mov	r1, r4
 6922 0016 2846     		mov	r0, r5
 6923 0018 6A46     		mov	r2, sp
 6924 001a FFF7FEFF 		bl	set_x_dn
 6925              	.LVL787:
1933:src/display.c **** 
 6926              		.loc 1 1933 7 is_stmt 0 view .LVU2243
 6927 001e 0BB0     		add	sp, sp, #44
 6928              		.cfi_remember_state
 6929              		.cfi_def_cfa_offset 12
 6930              		@ sp needed
 6931 0020 30BD     		pop	{r4, r5, pc}
 6932              	.LVL788:
 6933              	.L686:
ARM GAS  /tmp/cchyQ5Gz.s 			page 220


 6934              		.cfi_restore_state
1931:src/display.c **** 	set_x_dn(&z, res, &digits);
 6935              		.loc 1 1931 4 is_stmt 1 view .LVU2244
 6936 0022 FFF7FEFF 		bl	decimal64ToNumber
 6937              	.LVL789:
1932:src/display.c ****       }
 6938              		.loc 1 1932 2 view .LVU2245
 6939 0026 2146     		mov	r1, r4
 6940 0028 2846     		mov	r0, r5
 6941 002a 6A46     		mov	r2, sp
 6942 002c FFF7FEFF 		bl	set_x_dn
 6943              	.LVL790:
1933:src/display.c **** 
 6944              		.loc 1 1933 7 is_stmt 0 view .LVU2246
 6945 0030 0BB0     		add	sp, sp, #44
 6946              		.cfi_def_cfa_offset 12
 6947              		@ sp needed
 6948 0032 30BD     		pop	{r4, r5, pc}
1933:src/display.c **** 
 6949              		.loc 1 1933 7 view .LVU2247
 6950              		.cfi_endproc
 6951              	.LFE26:
 6953              		.section	.text.format_reg,"ax",%progbits
 6954              		.align	1
 6955              		.p2align 2,,3
 6956              		.global	format_reg
 6957              		.syntax unified
 6958              		.thumb
 6959              		.thumb_func
 6960              		.fpu fpv4-sp-d16
 6962              	format_reg:
 6963              	.LVL791:
 6964              	.LFB28:
2340:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6965              		.loc 1 2340 45 is_stmt 1 view -0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 40
 6968              		@ frame_needed = 0, uses_anonymous_args = 0
2341:src/display.c **** 
 6969              		.loc 1 2341 2 view .LVU2249
2340:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6970              		.loc 1 2340 45 is_stmt 0 view .LVU2250
 6971 0000 30B5     		push	{r4, r5, lr}
 6972              		.cfi_def_cfa_offset 12
 6973              		.cfi_offset 4, -12
 6974              		.cfi_offset 5, -8
 6975              		.cfi_offset 14, -4
 6976 0002 8BB0     		sub	sp, sp, #44
 6977              		.cfi_def_cfa_offset 56
2340:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6978              		.loc 1 2340 45 view .LVU2251
 6979 0004 0C46     		mov	r4, r1
 6980 0006 0546     		mov	r5, r0
2341:src/display.c **** 
 6981              		.loc 1 2341 28 view .LVU2252
 6982 0008 FFF7FEFF 		bl	get_reg_n
 6983              	.LVL792:
ARM GAS  /tmp/cchyQ5Gz.s 			page 221


2343:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6984              		.loc 1 2343 6 view .LVU2253
 6985 000c 154B     		ldr	r3, .L696
 6986 000e 1B68     		ldr	r3, [r3]
 6987 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6988              	.LVL793:
2343:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6989              		.loc 1 2343 2 is_stmt 1 view .LVU2254
2343:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 6990              		.loc 1 2343 5 is_stmt 0 view .LVU2255
 6991 0014 D207     		lsls	r2, r2, #31
 6992 0016 1DD4     		bmi	.L694
2346:src/display.c **** 	  decNumber x;
 6993              		.loc 1 2346 7 is_stmt 1 view .LVU2256
2346:src/display.c **** 	  decNumber x;
 6994              		.loc 1 2346 10 is_stmt 0 view .LVU2257
 6995 0018 44B1     		cbz	r4, .L695
 6996              	.L692:
2357:src/display.c ****       }
 6997              		.loc 1 2357 4 is_stmt 1 view .LVU2258
2357:src/display.c ****       }
 6998              		.loc 1 2357 24 is_stmt 0 view .LVU2259
 6999 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2357:src/display.c ****       }
 7000              		.loc 1 2357 4 view .LVU2260
 7001 001e 2146     		mov	r1, r4
 7002 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7003 0024 FFF7FEFF 		bl	set_x
 7004              	.LVL794:
2358:src/display.c **** 
 7005              		.loc 1 2358 7 view .LVU2261
 7006 0028 0BB0     		add	sp, sp, #44
 7007              		.cfi_remember_state
 7008              		.cfi_def_cfa_offset 12
 7009              		@ sp needed
 7010 002a 30BD     		pop	{r4, r5, pc}
 7011              	.LVL795:
 7012              	.L695:
 7013              		.cfi_restore_state
2346:src/display.c **** 	  decNumber x;
 7014              		.loc 1 2346 32 discriminator 1 view .LVU2262
 7015 002c 0E4A     		ldr	r2, .L696+4
2346:src/display.c **** 	  decNumber x;
 7016              		.loc 1 2346 23 discriminator 1 view .LVU2263
 7017 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7018 0030 012A     		cmp	r2, #1
 7019 0032 F2D9     		bls	.L692
 7020              	.LVL796:
 7021              	.LBB448:
 7022              	.LBI448:
2340:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7023              		.loc 1 2340 12 is_stmt 1 view .LVU2264
 7024              	.LBB449:
 7025              	.LBB450:
2347:src/display.c **** 	  int s;
 7026              		.loc 1 2347 4 view .LVU2265
2348:src/display.c **** 	  unsigned long long int v;
ARM GAS  /tmp/cchyQ5Gz.s 			page 222


 7027              		.loc 1 2348 4 view .LVU2266
2349:src/display.c **** 
 7028              		.loc 1 2349 4 view .LVU2267
2351:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7029              		.loc 1 2351 4 view .LVU2268
 7030 0034 2946     		mov	r1, r5
 7031 0036 01A8     		add	r0, sp, #4
 7032              	.LVL797:
2351:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7033              		.loc 1 2351 4 is_stmt 0 view .LVU2269
 7034 0038 FFF7FEFF 		bl	getRegister
 7035              	.LVL798:
2352:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7036              		.loc 1 2352 4 is_stmt 1 view .LVU2270
2352:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7037              		.loc 1 2352 8 is_stmt 0 view .LVU2271
 7038 003c 01A8     		add	r0, sp, #4
 7039 003e 6946     		mov	r1, sp
 7040 0040 FFF7FEFF 		bl	dn_to_ull
 7041              	.LVL799:
2353:src/display.c **** 	}
 7042              		.loc 1 2353 4 is_stmt 1 view .LVU2272
 7043 0044 009A     		ldr	r2, [sp]
 7044 0046 FFF7FEFF 		bl	build_value
 7045              	.LVL800:
2353:src/display.c **** 	}
 7046              		.loc 1 2353 4 is_stmt 0 view .LVU2273
 7047 004a 2246     		mov	r2, r4
 7048 004c FFF7FEFF 		bl	set_int_x
 7049              	.LVL801:
 7050              	.LBE450:
 7051              	.LBE449:
 7052              	.LBE448:
2358:src/display.c **** 
 7053              		.loc 1 2358 7 view .LVU2274
 7054 0050 0BB0     		add	sp, sp, #44
 7055              		.cfi_remember_state
 7056              		.cfi_def_cfa_offset 12
 7057              		@ sp needed
 7058 0052 30BD     		pop	{r4, r5, pc}
 7059              	.LVL802:
 7060              	.L694:
 7061              		.cfi_restore_state
2344:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7062              		.loc 1 2344 4 is_stmt 1 view .LVU2275
 7063 0054 2846     		mov	r0, r5
 7064              	.LVL803:
2344:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7065              		.loc 1 2344 4 is_stmt 0 view .LVU2276
 7066 0056 FFF7FEFF 		bl	get_reg_n_int
 7067              	.LVL804:
 7068 005a 2246     		mov	r2, r4
 7069 005c FFF7FEFF 		bl	set_int_x
 7070              	.LVL805:
2358:src/display.c **** 
 7071              		.loc 1 2358 7 view .LVU2277
 7072 0060 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/cchyQ5Gz.s 			page 223


 7073              		.cfi_def_cfa_offset 12
 7074              		@ sp needed
 7075 0062 30BD     		pop	{r4, r5, pc}
 7076              	.LVL806:
 7077              	.L697:
2358:src/display.c **** 
 7078              		.loc 1 2358 7 view .LVU2278
 7079              		.align	2
 7080              	.L696:
 7081 0064 00000000 		.word	main_ram
 7082 0068 00000000 		.word	StateWhileOn
 7083              		.cfi_endproc
 7084              	.LFE28:
 7086              		.section	.text.set_status_right,"ax",%progbits
 7087              		.align	1
 7088              		.p2align 2,,3
 7089              		.syntax unified
 7090              		.thumb
 7091              		.thumb_func
 7092              		.fpu fpv4-sp-d16
 7094              	set_status_right:
 7095              	.LVL807:
 7096              	.LFB47:
3503:src/display.c ****       static void set_status_top(const char *str) {
3504:src/display.c **** 	if (no_status_top) return;
3505:src/display.c **** 	if (State2.runmode) {
3506:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3507:src/display.c **** 	}
3508:src/display.c **** 	else {
3509:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3510:src/display.c **** 	}
3511:src/display.c ****       }
3512:src/display.c ****       static void set_status_top_always(const char *str) {
3513:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3514:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3515:src/display.c ****       }
3516:src/display.c **** 
3517:src/display.c **** 
3518:src/display.c ****       /*
3519:src/display.c ****        *  Display messages (global function)
3520:src/display.c ****        */
3521:src/display.c ****       extern void message(const char *str1, const char *str2)
3522:src/display.c ****       {
3523:src/display.c **** 	State2.disp_freeze = 0;
3524:src/display.c **** 	State2.disp_small = 0;
3525:src/display.c **** 	WasDataEntry = 0;
3526:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3527:src/display.c **** 	  // Complete redraw necessary
3528:src/display.c **** 	  DispMsg = str1;
3529:src/display.c **** 	  display();
3530:src/display.c **** 	}
3531:src/display.c **** 	else {
3532:src/display.c **** 	  if ( str2 != NULL ) {
3533:src/display.c **** 	    reset_disp();
3534:src/display.c **** 	    ShowRPN = 0;
3535:src/display.c **** 	    set_annunciators();
3536:src/display.c **** 	    set_digits_string( str2, 0 );
ARM GAS  /tmp/cchyQ5Gz.s 			page 224


3537:src/display.c **** 	  }
3538:src/display.c **** 	  set_status( str1 );
3539:src/display.c **** 	  finish_display();// message
3540:src/display.c **** 	}
3541:src/display.c ****       }
3542:src/display.c **** 
3543:src/display.c **** #ifdef INCLUDE_STOPWATCH
3544:src/display.c **** 
3545:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3546:src/display.c **** 	int j = SEGS_EXP_BASE;
3547:src/display.c **** 	for (; *exponent!=0; exponent++) {
3548:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3549:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3550:src/display.c **** 	}
3551:src/display.c ****       }
3552:src/display.c **** 
3553:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3554:src/display.c ****       {
3555:src/display.c **** #ifndef REALBUILD
3556:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3557:src/display.c **** #endif
3558:src/display.c **** 	reset_disp();
3559:src/display.c **** 	set_dot(DEG);
3560:src/display.c **** 	set_digits_string( str2, 0 );
3561:src/display.c **** 	State2.disp_small = force_small;
3562:src/display.c **** 	if( exponent!=NULL ) {
3563:src/display.c **** 	  stopwatch_exponent(exponent);
3564:src/display.c **** 	}
3565:src/display.c **** 	set_status( str1 );
3566:src/display.c **** 	finish_display();
3567:src/display.c ****       }
3568:src/display.c **** 
3569:src/display.c **** 
3570:src/display.c **** #endif // INCLUDE_STOPWATCH
3571:src/display.c **** 
3572:src/display.c ****       /* Display the right hand characters from the given string.
3573:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3574:src/display.c ****        * and reduce font size if required.
3575:src/display.c ****        */
3576:src/display.c ****       static void set_status_right(const char *str) {
 7097              		.loc 1 3576 53 is_stmt 1 view -0
 7098              		.cfi_startproc
 7099              		@ args = 0, pretend = 0, frame = 0
 7100              		@ frame_needed = 0, uses_anonymous_args = 0
3577:src/display.c **** 	unsigned int x = 0;
 7101              		.loc 1 3577 2 view .LVU2280
3578:src/display.c **** 	const char *p;
 7102              		.loc 1 3578 2 view .LVU2281
3579:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7103              		.loc 1 3579 2 view .LVU2282
3576:src/display.c **** 	unsigned int x = 0;
 7104              		.loc 1 3576 53 is_stmt 0 view .LVU2283
 7105 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7106              		.cfi_def_cfa_offset 28
 7107              		.cfi_offset 4, -28
 7108              		.cfi_offset 5, -24
 7109              		.cfi_offset 6, -20
ARM GAS  /tmp/cchyQ5Gz.s 			page 225


 7110              		.cfi_offset 7, -16
 7111              		.cfi_offset 8, -12
 7112              		.cfi_offset 9, -8
 7113              		.cfi_offset 14, -4
 7114              		.loc 1 3579 23 view .LVU2284
 7115 0004 194B     		ldr	r3, .L713
 7116              		.loc 1 3579 41 view .LVU2285
 7117 0006 93F91630 		ldrsb	r3, [r3, #22]
 7118 000a 002B     		cmp	r3, #0
3576:src/display.c **** 	unsigned int x = 0;
 7119              		.loc 1 3576 53 view .LVU2286
 7120 000c 83B0     		sub	sp, sp, #12
 7121              		.cfi_def_cfa_offset 40
3576:src/display.c **** 	unsigned int x = 0;
 7122              		.loc 1 3576 53 view .LVU2287
 7123 000e 0646     		mov	r6, r0
 7124              		.loc 1 3579 41 view .LVU2288
 7125 0010 23DA     		bge	.L712
 7126              	.LVL808:
 7127              	.L699:
 7128              		.loc 1 3579 12 view .LVU2289
 7129 0012 4FF00108 		mov	r8, #1
3580:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7130              		.loc 1 3580 36 view .LVU2290
 7131 0016 4FF48077 		mov	r7, #256
 7132              	.L700:
 7133              	.LVL809:
3581:src/display.c **** 
3582:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7134              		.loc 1 3582 2 is_stmt 1 discriminator 4 view .LVU2291
 7135              		.loc 1 3582 14 discriminator 4 view .LVU2292
 7136              		.loc 1 3582 2 is_stmt 0 discriminator 4 view .LVU2293
 7137 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7138 001c 3446     		mov	r4, r6
 7139 001e 1BB1     		cbz	r3, .L701
 7140              	.LVL810:
 7141              	.L702:
 7142              		.loc 1 3582 30 is_stmt 1 discriminator 3 view .LVU2294
 7143              		.loc 1 3582 26 discriminator 3 view .LVU2295
 7144              		.loc 1 3582 14 discriminator 3 view .LVU2296
 7145              		.loc 1 3582 2 is_stmt 0 discriminator 3 view .LVU2297
 7146 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7147              	.LVL811:
 7148              		.loc 1 3582 2 discriminator 3 view .LVU2298
 7149 0024 002B     		cmp	r3, #0
 7150 0026 FBD1     		bne	.L702
 7151              	.L701:
3577:src/display.c **** 	const char *p;
 7152              		.loc 1 3577 15 view .LVU2299
 7153 0028 0025     		movs	r5, #0
 7154 002a 06E0     		b	.L703
 7155              	.LVL812:
 7156              	.L704:
 7157              	.LBB451:
3583:src/display.c **** 	while (--p >= str) {
3584:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7158              		.loc 1 3584 27 view .LVU2300
ARM GAS  /tmp/cchyQ5Gz.s 			page 226


 7159 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3585:src/display.c **** 
3586:src/display.c **** 	  x += charlengths(c);
 7160              		.loc 1 3586 9 view .LVU2301
 7161 002e 3844     		add	r0, r0, r7
 7162 0030 FFF7FEFF 		bl	charlengths
 7163              	.LVL813:
 7164              		.loc 1 3586 6 view .LVU2302
 7165 0034 0544     		add	r5, r5, r0
 7166              	.LVL814:
3587:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7167              		.loc 1 3587 4 is_stmt 1 view .LVU2303
 7168              		.loc 1 3587 7 is_stmt 0 view .LVU2304
 7169 0036 4B2D     		cmp	r5, #75
 7170 0038 03D8     		bhi	.L705
 7171              	.LVL815:
 7172              	.L703:
3584:src/display.c **** 
 7173              		.loc 1 3584 4 is_stmt 1 view .LVU2305
3584:src/display.c **** 
 7174              		.loc 1 3584 4 is_stmt 0 view .LVU2306
 7175              	.LBE451:
3583:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7176              		.loc 1 3583 8 is_stmt 1 view .LVU2307
 7177 003a A146     		mov	r9, r4
 7178 003c 013C     		subs	r4, r4, #1
 7179              	.LVL816:
 7180              	.LBB452:
3586:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7181              		.loc 1 3586 4 view .LVU2308
3586:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7182              		.loc 1 3586 4 is_stmt 0 view .LVU2309
 7183              	.LBE452:
3583:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7184              		.loc 1 3583 8 view .LVU2310
 7185 003e A642     		cmp	r6, r4
 7186 0040 F4D9     		bls	.L704
 7187              	.LVL817:
 7188              	.L705:
3588:src/display.c **** 	    break;
3589:src/display.c **** 	}
3590:src/display.c **** 	set_status_sized(p+1, toolarge);
 7189              		.loc 1 3590 2 is_stmt 1 view .LVU2311
 7190              	.LBB453:
 7191              	.LBI453:
3342:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7192              		.loc 1 3342 19 view .LVU2312
 7193              	.LBB454:
3343:src/display.c ****       }
 7194              		.loc 1 3343 2 view .LVU2313
 7195 0042 40F24A23 		movw	r3, #586
 7196 0046 0093     		str	r3, [sp]
 7197 0048 4146     		mov	r1, r8
 7198 004a 4846     		mov	r0, r9
 7199 004c 8E23     		movs	r3, #142
 7200 004e 4A22     		movs	r2, #74
 7201 0050 FFF7FEFF 		bl	s_s_sized
ARM GAS  /tmp/cchyQ5Gz.s 			page 227


 7202              	.LVL818:
3343:src/display.c ****       }
 7203              		.loc 1 3343 2 is_stmt 0 view .LVU2314
 7204              	.LBE454:
 7205              	.LBE453:
3591:src/display.c ****       }
 7206              		.loc 1 3591 7 view .LVU2315
 7207 0054 03B0     		add	sp, sp, #12
 7208              		.cfi_remember_state
 7209              		.cfi_def_cfa_offset 28
 7210              		@ sp needed
 7211 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7212              	.LVL819:
 7213              	.L712:
 7214              		.cfi_restore_state
 7215              	.LBB455:
 7216              	.LBI455:
3490:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7217              		.loc 1 3490 18 is_stmt 1 view .LVU2316
 7218              	.LBB456:
3491:src/display.c ****       }
 7219              		.loc 1 3491 2 view .LVU2317
3491:src/display.c ****       }
 7220              		.loc 1 3491 9 is_stmt 0 view .LVU2318
 7221 005a 0021     		movs	r1, #0
 7222 005c FFF7FEFF 		bl	pixel_length
 7223              	.LVL820:
3491:src/display.c ****       }
 7224              		.loc 1 3491 9 view .LVU2319
 7225              	.LBE456:
 7226              	.LBE455:
3579:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7227              		.loc 1 3579 41 view .LVU2320
 7228 0060 4B28     		cmp	r0, #75
 7229 0062 D6DC     		bgt	.L699
3579:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7230              		.loc 1 3579 12 view .LVU2321
 7231 0064 4FF00008 		mov	r8, #0
3580:src/display.c **** 
 7232              		.loc 1 3580 36 view .LVU2322
 7233 0068 4746     		mov	r7, r8
 7234 006a D6E7     		b	.L700
 7235              	.L714:
 7236              		.align	2
 7237              	.L713:
 7238 006c 00000000 		.word	StateWhileOn
 7239              		.cfi_endproc
 7240              	.LFE47:
 7242              		.section	.text.set_status_top.part.0,"ax",%progbits
 7243              		.align	1
 7244              		.p2align 2,,3
 7245              		.syntax unified
 7246              		.thumb
 7247              		.thumb_func
 7248              		.fpu fpv4-sp-d16
 7250              	set_status_top.part.0:
 7251              	.LVL821:
ARM GAS  /tmp/cchyQ5Gz.s 			page 228


 7252              	.LFB56:
3503:src/display.c **** 	if (no_status_top) return;
 7253              		.loc 1 3503 19 is_stmt 1 view -0
 7254              		.cfi_startproc
 7255              		@ args = 0, pretend = 0, frame = 0
 7256              		@ frame_needed = 0, uses_anonymous_args = 0
3505:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7257              		.loc 1 3505 2 view .LVU2324
3503:src/display.c **** 	if (no_status_top) return;
 7258              		.loc 1 3503 19 is_stmt 0 view .LVU2325
 7259 0000 10B5     		push	{r4, lr}
 7260              		.cfi_def_cfa_offset 8
 7261              		.cfi_offset 4, -8
 7262              		.cfi_offset 14, -4
3505:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7263              		.loc 1 3505 6 view .LVU2326
 7264 0002 184B     		ldr	r3, .L725
 7265 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3505:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7266              		.loc 1 3505 5 view .LVU2327
 7267 0006 13F04001 		ands	r1, r3, #64
3503:src/display.c **** 	if (no_status_top) return;
 7268              		.loc 1 3503 19 view .LVU2328
 7269 000a 82B0     		sub	sp, sp, #8
 7270              		.cfi_def_cfa_offset 16
3503:src/display.c **** 	if (no_status_top) return;
 7271              		.loc 1 3503 19 view .LVU2329
 7272 000c 0446     		mov	r4, r0
3505:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7273              		.loc 1 3505 5 view .LVU2330
 7274 000e 0DD0     		beq	.L716
3506:src/display.c **** 	}
 7275              		.loc 1 3506 4 is_stmt 1 view .LVU2331
 7276 0010 1A06     		lsls	r2, r3, #24
 7277 0012 18D5     		bpl	.L723
 7278 0014 0121     		movs	r1, #1
 7279              	.LVL822:
 7280              	.L717:
 7281              	.LBB457:
 7282              	.LBI457:
3345:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7283              		.loc 1 3345 19 view .LVU2332
 7284              	.LBB458:
3346:src/display.c ****       }
 7285              		.loc 1 3346 2 view .LVU2333
 7286 0016 4FF45373 		mov	r3, #844
 7287 001a 0093     		str	r3, [sp]
 7288 001c 2046     		mov	r0, r4
 7289 001e 40F24A23 		movw	r3, #586
 7290 0022 2B22     		movs	r2, #43
 7291 0024 FFF7FEFF 		bl	s_s_sized
 7292              	.LVL823:
3346:src/display.c ****       }
 7293              		.loc 1 3346 2 is_stmt 0 view .LVU2334
 7294              	.LBE458:
 7295              	.LBE457:
3511:src/display.c ****       static void set_status_top_always(const char *str) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 229


 7296              		.loc 1 3511 7 view .LVU2335
 7297 0028 02B0     		add	sp, sp, #8
 7298              		.cfi_remember_state
 7299              		.cfi_def_cfa_offset 8
 7300              		@ sp needed
 7301 002a 10BD     		pop	{r4, pc}
 7302              	.LVL824:
 7303              	.L716:
 7304              		.cfi_restore_state
3509:src/display.c **** 	}
 7305              		.loc 1 3509 4 is_stmt 1 view .LVU2336
 7306 002c 1B06     		lsls	r3, r3, #24
 7307 002e 12D5     		bpl	.L724
 7308 0030 0121     		movs	r1, #1
 7309              	.LVL825:
 7310              	.L719:
 7311              	.LBB459:
 7312              	.LBI459:
3342:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7313              		.loc 1 3342 19 view .LVU2337
 7314              	.LBB460:
3343:src/display.c ****       }
 7315              		.loc 1 3343 2 view .LVU2338
 7316 0032 40F24A23 		movw	r3, #586
 7317 0036 0093     		str	r3, [sp]
 7318 0038 2046     		mov	r0, r4
 7319 003a 8E23     		movs	r3, #142
 7320 003c 4A22     		movs	r2, #74
 7321 003e FFF7FEFF 		bl	s_s_sized
 7322              	.LVL826:
3343:src/display.c ****       }
 7323              		.loc 1 3343 2 is_stmt 0 view .LVU2339
 7324              	.LBE460:
 7325              	.LBE459:
3511:src/display.c ****       static void set_status_top_always(const char *str) {
 7326              		.loc 1 3511 7 view .LVU2340
 7327 0042 02B0     		add	sp, sp, #8
 7328              		.cfi_remember_state
 7329              		.cfi_def_cfa_offset 8
 7330              		@ sp needed
 7331 0044 10BD     		pop	{r4, pc}
 7332              	.LVL827:
 7333              	.L723:
 7334              		.cfi_restore_state
 7335              	.LBB461:
 7336              	.LBI461:
3493:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7337              		.loc 1 3493 18 is_stmt 1 view .LVU2341
 7338              	.LBB462:
3494:src/display.c ****       }
 7339              		.loc 1 3494 2 view .LVU2342
3494:src/display.c ****       }
 7340              		.loc 1 3494 9 is_stmt 0 view .LVU2343
 7341 0046 0021     		movs	r1, #0
 7342 0048 FFF7FEFF 		bl	pixel_length
 7343              	.LVL828:
3494:src/display.c ****       }
ARM GAS  /tmp/cchyQ5Gz.s 			page 230


 7344              		.loc 1 3494 9 view .LVU2344
 7345              	.LBE462:
 7346              	.LBE461:
3506:src/display.c **** 	}
 7347              		.loc 1 3506 4 view .LVU2345
 7348 004c 2C28     		cmp	r0, #44
 7349 004e D4BF     		ite	le
 7350 0050 0021     		movle	r1, #0
 7351 0052 0121     		movgt	r1, #1
 7352 0054 DFE7     		b	.L717
 7353              	.LVL829:
 7354              	.L724:
 7355              	.LBB463:
 7356              	.LBI463:
3490:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7357              		.loc 1 3490 18 is_stmt 1 view .LVU2346
 7358              	.LBB464:
3491:src/display.c ****       }
 7359              		.loc 1 3491 2 view .LVU2347
3491:src/display.c ****       }
 7360              		.loc 1 3491 9 is_stmt 0 view .LVU2348
 7361 0056 FFF7FEFF 		bl	pixel_length
 7362              	.LVL830:
3491:src/display.c ****       }
 7363              		.loc 1 3491 9 view .LVU2349
 7364              	.LBE464:
 7365              	.LBE463:
3509:src/display.c **** 	}
 7366              		.loc 1 3509 4 view .LVU2350
 7367 005a 4B28     		cmp	r0, #75
 7368 005c D4BF     		ite	le
 7369 005e 0021     		movle	r1, #0
 7370 0060 0121     		movgt	r1, #1
 7371 0062 E6E7     		b	.L719
 7372              	.L726:
 7373              		.align	2
 7374              	.L725:
 7375 0064 00000000 		.word	StateWhileOn
 7376              		.cfi_endproc
 7377              	.LFE56:
 7379              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7380              		.align	2
 7381              	.LC3:
 7382 0000 32630600 		.ascii	"2c\006\000"
 7383              		.align	2
 7384              	.LC4:
 7385 0004 07C63C00 		.ascii	"\007\306<\000"
 7386              		.align	2
 7387              	.LC5:
 7388 0008 07876900 		.ascii	"\007\207i\000"
 7389              		.align	2
 7390              	.LC6:
 7391 000c 07C67900 		.ascii	"\007\306y\000"
 7392              		.align	2
 7393              	.LC7:
 7394 0010 07950600 		.ascii	"\007\225\006\000"
 7395              		.align	2
ARM GAS  /tmp/cchyQ5Gz.s 			page 231


 7396              	.LC8:
 7397 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7397      060600
 7398 001b 00       		.align	2
 7399              	.LC9:
 7400 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7400      060600
 7401 0023 00       		.align	2
 7402              	.LC10:
 7403 0024 07C74400 		.ascii	"\007\307D\000"
 7404              		.align	2
 7405              	.LC11:
 7406 0028 07872000 		.ascii	"\007\207 \000"
 7407              		.align	2
 7408              	.LC12:
 7409 002c 06060788 		.ascii	"\006\006\007\210\007\000"
 7409      0700
 7410 0032 0000     		.align	2
 7411              	.LC13:
 7412 0034 07C73C00 		.ascii	"\007\307<\000"
 7413              		.align	2
 7414              	.LC14:
 7415 0038 07C77900 		.ascii	"\007\307y\000"
 7416              		.align	2
 7417              	.LC15:
 7418 003c 0784060D 		.ascii	"\007\204\006\015\000"
 7418      00
 7419 0041 000000   		.align	2
 7420              	.LC17:
 7421 0044 07E43F00 		.ascii	"\007\344?\000"
 7422              		.section	.text.annunciators,"ax",%progbits
 7423              		.align	1
 7424              		.p2align 2,,3
 7425              		.syntax unified
 7426              		.thumb
 7427              		.thumb_func
 7428              		.fpu fpv4-sp-d16
 7430              	annunciators:
 7431              	.LFB16:
 599:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7432              		.loc 1 599 36 is_stmt 1 view -0
 7433              		.cfi_startproc
 7434              		@ args = 0, pretend = 0, frame = 128
 7435              		@ frame_needed = 0, uses_anonymous_args = 0
 601:src/display.c ****       char buf2[42], *p2 = buf2;
 7436              		.loc 1 601 7 view .LVU2352
 599:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7437              		.loc 1 599 36 is_stmt 0 view .LVU2353
 7438 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7439              		.cfi_def_cfa_offset 28
 7440              		.cfi_offset 4, -28
 7441              		.cfi_offset 5, -24
 7442              		.cfi_offset 6, -20
 7443              		.cfi_offset 7, -16
 7444              		.cfi_offset 8, -12
 7445              		.cfi_offset 9, -8
 7446              		.cfi_offset 14, -4
ARM GAS  /tmp/cchyQ5Gz.s 			page 232


 613:src/display.c **** #  endif
 7447              		.loc 1 613 38 view .LVU2354
 7448 0004 BF4F     		ldr	r7, .L855
 599:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7449              		.loc 1 599 36 view .LVU2355
 7450 0006 A3B0     		sub	sp, sp, #140
 7451              		.cfi_def_cfa_offset 168
 7452              	.LVL831:
 602:src/display.c ****       int n;
 7453              		.loc 1 602 7 is_stmt 1 view .LVU2356
 603:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7454              		.loc 1 603 7 view .LVU2357
 604:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7455              		.loc 1 604 7 view .LVU2358
 605:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7456              		.loc 1 605 7 view .LVU2359
 605:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7457              		.loc 1 605 43 is_stmt 0 view .LVU2360
 7458 0008 FFF7FEFF 		bl	cur_shift
 7459              	.LVL832:
 605:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7460              		.loc 1 605 18 view .LVU2361
 7461 000c BE4B     		ldr	r3, .L855+4
 613:src/display.c **** #  endif
 7462              		.loc 1 613 38 view .LVU2362
 7463 000e 3A68     		ldr	r2, [r7]
 605:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7464              		.loc 1 605 18 view .LVU2363
 7465 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7466              	.LVL833:
 613:src/display.c **** #  endif
 7467              		.loc 1 613 7 is_stmt 1 view .LVU2364
 613:src/display.c **** #  endif
 7468              		.loc 1 613 38 is_stmt 0 view .LVU2365
 7469 0014 92F8EA47 		ldrb	r4, [r2, #2026]	@ zero_extendqisi2
 644:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7470              		.loc 1 644 7 view .LVU2366
 7471 0018 0CAE     		add	r6, sp, #48
 7472              	.LVL834:
 644:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7473              		.loc 1 644 7 view .LVU2367
 7474 001a 2A22     		movs	r2, #42
 7475 001c 0021     		movs	r1, #0
 7476 001e 3046     		mov	r0, r6
 7477 0020 FFF7FEFF 		bl	xset
 7478              	.LVL835:
 645:src/display.c ****       
 7479              		.loc 1 645 7 view .LVU2368
 7480 0024 0021     		movs	r1, #0
 7481 0026 17A8     		add	r0, sp, #92
 7482              	.LVL836:
 645:src/display.c ****       
 7483              		.loc 1 645 7 view .LVU2369
 7484 0028 2A22     		movs	r2, #42
 7485 002a FFF7FEFF 		bl	xset
 7486              	.LVL837:
 647:src/display.c **** #ifdef SHOW_STACK_SIZE
ARM GAS  /tmp/cchyQ5Gz.s 			page 233


 7487              		.loc 1 647 11 view .LVU2370
 7488 002e 3B68     		ldr	r3, [r7]
 7489 0030 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 647:src/display.c **** #ifdef SHOW_STACK_SIZE
 7490              		.loc 1 647 10 view .LVU2371
 7491 0034 D907     		lsls	r1, r3, #31
 613:src/display.c **** #  endif
 7492              		.loc 1 613 17 view .LVU2372
 7493 0036 C4F38004 		ubfx	r4, r4, #2, #1
 7494              	.LVL838:
 616:src/display.c **** #  else
 7495              		.loc 1 616 7 is_stmt 1 view .LVU2373
 621:src/display.c **** #  else
 7496              		.loc 1 621 7 view .LVU2374
 631:src/display.c **** #else
 7497              		.loc 1 631 7 view .LVU2375
 639:src/display.c **** #else
 7498              		.loc 1 639 7 view .LVU2376
 644:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7499              		.loc 1 644 7 view .LVU2377
 645:src/display.c ****       
 7500              		.loc 1 645 7 view .LVU2378
 647:src/display.c **** #ifdef SHOW_STACK_SIZE
 7501              		.loc 1 647 7 view .LVU2379
 647:src/display.c **** #ifdef SHOW_STACK_SIZE
 7502              		.loc 1 647 10 is_stmt 0 view .LVU2380
 7503 003a 00F1FB80 		bmi	.L838
 686:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7504              		.loc 1 686 12 is_stmt 1 view .LVU2381
 686:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7505              		.loc 1 686 15 is_stmt 0 view .LVU2382
 7506 003e 84BB     		cbnz	r4, .L742
 704:src/display.c **** 	    *p2++ = shift_char;
 7507              		.loc 1 704 4 is_stmt 1 view .LVU2383
 704:src/display.c **** 	    *p2++ = shift_char;
 7508              		.loc 1 704 7 is_stmt 0 view .LVU2384
 7509 0040 B8F1200F 		cmp	r8, #32
 7510 0044 00F0D581 		beq	.L743
 7511              	.L745:
 705:src/display.c **** 	    *p2++ = '\006';
 7512              		.loc 1 705 6 is_stmt 1 view .LVU2385
 7513              	.LVL839:
 706:src/display.c **** 	  }
 7514              		.loc 1 706 12 is_stmt 0 view .LVU2386
 7515 0048 0623     		movs	r3, #6
 705:src/display.c **** 	    *p2++ = '\006';
 7516              		.loc 1 705 12 view .LVU2387
 7517 004a 8DF85C80 		strb	r8, [sp, #92]
 706:src/display.c **** 	  }
 7518              		.loc 1 706 6 is_stmt 1 view .LVU2388
 7519              	.LVL840:
 706:src/display.c **** 	  }
 7520              		.loc 1 706 12 is_stmt 0 view .LVU2389
 7521 004e 8DF85D30 		strb	r3, [sp, #93]
 706:src/display.c **** 	  }
 7522              		.loc 1 706 9 view .LVU2390
 7523 0052 0DF15E00 		add	r0, sp, #94
ARM GAS  /tmp/cchyQ5Gz.s 			page 234


 7524              	.LVL841:
 7525              	.L744:
 712:src/display.c **** 	  *p2++ = ' ';
 7526              		.loc 1 712 2 is_stmt 1 view .LVU2391
 712:src/display.c **** 	  *p2++ = ' ';
 7527              		.loc 1 712 6 is_stmt 0 view .LVU2392
 7528 0056 AD4D     		ldr	r5, .L855+8
 7529 0058 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 712:src/display.c **** 	  *p2++ = ' ';
 7530              		.loc 1 712 5 view .LVU2393
 7531 005a 9A07     		lsls	r2, r3, #30
 7532 005c 00F1A881 		bmi	.L839
 717:src/display.c **** 	  *p2++ = ' ';
 7533              		.loc 1 717 2 is_stmt 1 view .LVU2394
 717:src/display.c **** 	  *p2++ = ' ';
 7534              		.loc 1 717 5 is_stmt 0 view .LVU2395
 7535 0060 5907     		lsls	r1, r3, #29
 7536 0062 00F18881 		bmi	.L840
 723:src/display.c **** 	  if (State2.wascomplex) {
 7537              		.loc 1 723 2 is_stmt 1 view .LVU2396
 723:src/display.c **** 	  if (State2.wascomplex) {
 7538              		.loc 1 723 5 is_stmt 0 view .LVU2397
 7539 0066 B8F1200F 		cmp	r8, #32
 7540 006a 00F0D481 		beq	.L841
 7541              	.L748:
 740:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7542              		.loc 1 740 2 is_stmt 1 view .LVU2398
 740:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7543              		.loc 1 740 16 is_stmt 0 view .LVU2399
 7544 006e 3B68     		ldr	r3, [r7]
 7545 0070 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7546 0074 C3F30113 		ubfx	r3, r3, #4, #2
 740:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7547              		.loc 1 740 2 view .LVU2400
 7548 0078 012B     		cmp	r3, #1
 7549 007a 00F01382 		beq	.L789
 7550 007e A449     		ldr	r1, .L855+12
 7551 0080 A44A     		ldr	r2, .L855+16
 7552 0082 022B     		cmp	r3, #2
 7553 0084 08BF     		it	eq
 7554 0086 1146     		moveq	r1, r2
 7555              	.L750:
 7556              	.LVL842:
 754:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7557              		.loc 1 754 2 is_stmt 1 view .LVU2401
 754:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7558              		.loc 1 754 7 is_stmt 0 view .LVU2402
 7559 0088 FFF7FEFF 		bl	scopy
 7560              	.LVL843:
 754:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7561              		.loc 1 754 7 view .LVU2403
 7562 008c 0446     		mov	r4, r0
 7563              	.LVL844:
 756:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7564              		.loc 1 756 2 is_stmt 1 view .LVU2404
 756:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7565              		.loc 1 756 6 is_stmt 0 view .LVU2405
ARM GAS  /tmp/cchyQ5Gz.s 			page 235


 7566 008e FFF7FEFF 		bl	get_trig_mode
 7567              	.LVL845:
 756:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7568              		.loc 1 756 5 view .LVU2406
 7569 0092 0228     		cmp	r0, #2
 7570 0094 40F02381 		bne	.L741
 757:src/display.c **** 	}
 7571              		.loc 1 757 4 is_stmt 1 view .LVU2407
 7572 0098 9F49     		ldr	r1, .L855+20
 7573 009a 2046     		mov	r0, r4
 7574 009c FFF7FEFF 		bl	scopy
 7575              	.LVL846:
 7576 00a0 1DE1     		b	.L741
 7577              	.LVL847:
 7578              	.L742:
 768:src/display.c **** 	  *p2++ = '\007';
 7579              		.loc 1 768 2 view .LVU2408
 768:src/display.c **** 	  *p2++ = '\007';
 7580              		.loc 1 768 6 is_stmt 0 view .LVU2409
 7581 00a2 9A4D     		ldr	r5, .L855+8
 7582 00a4 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 768:src/display.c **** 	  *p2++ = '\007';
 7583              		.loc 1 768 5 view .LVU2410
 7584 00a6 9A07     		lsls	r2, r3, #30
 7585 00a8 00F14A81 		bmi	.L842
 776:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7586              		.loc 1 776 4 is_stmt 1 view .LVU2411
 7587              	.LVL848:
 777:src/display.c **** 	  *p2++ = shift_char;
 7588              		.loc 1 777 4 view .LVU2412
 776:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 7589              		.loc 1 776 10 is_stmt 0 view .LVU2413
 7590 00ac 4CF20773 		movw	r3, #50951
 7591 00b0 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 778:src/display.c **** 	  //	  goto no_copy;
 7592              		.loc 1 778 4 is_stmt 1 view .LVU2414
 7593              	.LVL849:
 783:src/display.c **** 	    q = "\007\207i";
 7594              		.loc 1 783 8 is_stmt 0 view .LVU2415
 7595 00b4 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 778:src/display.c **** 	  //	  goto no_copy;
 7596              		.loc 1 778 10 view .LVU2416
 7597 00b6 8DF85E80 		strb	r8, [sp, #94]
 783:src/display.c **** 	    q = "\007\207i";
 7598              		.loc 1 783 7 view .LVU2417
 7599 00ba 13F0C00F 		tst	r3, #192
 778:src/display.c **** 	  //	  goto no_copy;
 7600              		.loc 1 778 7 view .LVU2418
 7601 00be 0DF15F09 		add	r9, sp, #95
 7602              	.LVL850:
 783:src/display.c **** 	    q = "\007\207i";
 7603              		.loc 1 783 4 is_stmt 1 view .LVU2419
 783:src/display.c **** 	    q = "\007\207i";
 7604              		.loc 1 783 7 is_stmt 0 view .LVU2420
 7605 00c2 40F04D81 		bne	.L843
 7606              	.L753:
 788:src/display.c **** 	    q = "\007\307<";
ARM GAS  /tmp/cchyQ5Gz.s 			page 236


 7607              		.loc 1 788 9 is_stmt 1 view .LVU2421
 788:src/display.c **** 	    q = "\007\307<";
 7608              		.loc 1 788 23 is_stmt 0 view .LVU2422
 7609 00c6 954B     		ldr	r3, .L855+24
 7610 00c8 1B68     		ldr	r3, [r3]
 788:src/display.c **** 	    q = "\007\307<";
 7611              		.loc 1 788 12 view .LVU2423
 7612 00ca 012B     		cmp	r3, #1
 7613 00cc 00F0B681 		beq	.L844
 793:src/display.c **** 	    q = "\007\307y";
 7614              		.loc 1 793 9 is_stmt 1 view .LVU2424
 793:src/display.c **** 	    q = "\007\307y";
 7615              		.loc 1 793 12 is_stmt 0 view .LVU2425
 7616 00d0 022B     		cmp	r3, #2
 7617 00d2 00F0E981 		beq	.L845
 601:src/display.c ****       char buf2[42], *p2 = buf2;
 7618              		.loc 1 601 22 view .LVU2426
 7619 00d6 B046     		mov	r8, r6
 7620              	.LVL851:
 7621              	.L754:
 800:src/display.c **** 	    //	    q = "\007\207\007";
 7622              		.loc 1 800 6 is_stmt 1 view .LVU2427
 800:src/display.c **** 	    //	    q = "\007\207\007";
 7623              		.loc 1 800 10 is_stmt 0 view .LVU2428
 7624 00d8 FFF7FEFF 		bl	get_trig_mode
 7625              	.LVL852:
 802:src/display.c **** 	      *p2++ = '\207';
 7626              		.loc 1 802 14 view .LVU2429
 7627 00dc 0723     		movs	r3, #7
 800:src/display.c **** 	    //	    q = "\007\207\007";
 7628              		.loc 1 800 9 view .LVU2430
 7629 00de 0228     		cmp	r0, #2
 803:src/display.c **** 	      *p2++ = '\007';	    
 7630              		.loc 1 803 14 view .LVU2431
 7631 00e0 4FF08702 		mov	r2, #135
 802:src/display.c **** 	      *p2++ = '\207';
 7632              		.loc 1 802 14 view .LVU2432
 7633 00e4 89F80030 		strb	r3, [r9]
 800:src/display.c **** 	    //	    q = "\007\207\007";
 7634              		.loc 1 800 9 view .LVU2433
 7635 00e8 00F06781 		beq	.L846
 807:src/display.c **** 	      *p2++ = '\207';
 7636              		.loc 1 807 8 is_stmt 1 view .LVU2434
 7637              	.LVL853:
 808:src/display.c **** 	      *p2++ = ' ';
 7638              		.loc 1 808 8 view .LVU2435
 809:src/display.c **** 	    }
 7639              		.loc 1 809 14 is_stmt 0 view .LVU2436
 7640 00ec 2023     		movs	r3, #32
 808:src/display.c **** 	      *p2++ = ' ';
 7641              		.loc 1 808 14 view .LVU2437
 7642 00ee 89F80120 		strb	r2, [r9, #1]
 809:src/display.c **** 	    }
 7643              		.loc 1 809 8 is_stmt 1 view .LVU2438
 809:src/display.c **** 	    }
 7644              		.loc 1 809 14 is_stmt 0 view .LVU2439
 7645 00f2 89F80230 		strb	r3, [r9, #2]
ARM GAS  /tmp/cchyQ5Gz.s 			page 237


 809:src/display.c **** 	    }
 7646              		.loc 1 809 11 view .LVU2440
 7647 00f6 09F10309 		add	r9, r9, #3
 7648              	.LVL854:
 7649              	.L757:
 814:src/display.c **** 	  p2 = scopy(p2, q);
 7650              		.loc 1 814 4 is_stmt 1 view .LVU2441
 814:src/display.c **** 	  p2 = scopy(p2, q);
 7651              		.loc 1 814 9 is_stmt 0 view .LVU2442
 7652 00fa FFF7FEFF 		bl	is_dblmode
 7653              	.LVL855:
 814:src/display.c **** 	  p2 = scopy(p2, q);
 7654              		.loc 1 814 36 view .LVU2443
 7655 00fe 884B     		ldr	r3, .L855+28
 7656 0100 884A     		ldr	r2, .L855+32
 814:src/display.c **** 	  p2 = scopy(p2, q);
 7657              		.loc 1 814 9 view .LVU2444
 7658 0102 0146     		mov	r1, r0
 7659              	.LVL856:
 815:src/display.c **** #else
 7660              		.loc 1 815 4 is_stmt 1 view .LVU2445
 815:src/display.c **** #else
 7661              		.loc 1 815 9 is_stmt 0 view .LVU2446
 7662 0104 0029     		cmp	r1, #0
 7663 0106 14BF     		ite	ne
 7664 0108 1146     		movne	r1, r2
 7665 010a 1946     		moveq	r1, r3
 7666              	.LVL857:
 815:src/display.c **** #else
 7667              		.loc 1 815 9 view .LVU2447
 7668 010c 4846     		mov	r0, r9
 7669 010e FFF7FEFF 		bl	scopy
 7670              	.LVL858:
 834:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7671              		.loc 1 834 16 view .LVU2448
 7672 0112 3B68     		ldr	r3, [r7]
 7673 0114 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7674 0118 C1F30111 		ubfx	r1, r1, #4, #2
 7675              	.LVL859:
 834:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7676              		.loc 1 834 2 is_stmt 1 view .LVU2449
 7677 011c 0129     		cmp	r1, #1
 7678 011e 00F05381 		beq	.L793
 7679 0122 7B4B     		ldr	r3, .L855+12
 7680 0124 7B4A     		ldr	r2, .L855+16
 7681 0126 0229     		cmp	r1, #2
 7682 0128 14BF     		ite	ne
 7683 012a 1946     		movne	r1, r3
 7684 012c 1146     		moveq	r1, r2
 7685              	.L759:
 7686              	.LVL860:
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7687              		.loc 1 851 2 view .LVU2450
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7688              		.loc 1 851 6 is_stmt 0 view .LVU2451
 7689 012e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 851:src/display.c **** 	  scopy(p2, "\007\204\006\015");
ARM GAS  /tmp/cchyQ5Gz.s 			page 238


 7690              		.loc 1 851 5 view .LVU2452
 7691 0130 5B07     		lsls	r3, r3, #29
 852:src/display.c **** 	} // no need to skip y display with arrow here
 7692              		.loc 1 852 4 is_stmt 1 view .LVU2453
 7693 0132 48BF     		it	mi
 7694 0134 7C49     		ldrmi	r1, .L855+36
 7695              	.LVL861:
 855:src/display.c **** 	}
 7696              		.loc 1 855 4 view .LVU2454
 855:src/display.c **** 	}
 7697              		.loc 1 855 9 is_stmt 0 view .LVU2455
 7698 0136 FFF7FEFF 		bl	scopy
 7699              	.LVL862:
 857:src/display.c **** 	  decNumber y;
 7700              		.loc 1 857 2 is_stmt 1 view .LVU2456
 857:src/display.c **** 	  decNumber y;
 7701              		.loc 1 857 6 is_stmt 0 view .LVU2457
 7702 013a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 857:src/display.c **** 	  decNumber y;
 7703              		.loc 1 857 5 view .LVU2458
 7704 013c 5A06     		lsls	r2, r3, #25
 7705 013e 40F1D180 		bpl	.L780
 7706              	.L731:
 7707              	.LBB475:
 858:src/display.c **** 	display_yreg:
 7708              		.loc 1 858 4 is_stmt 1 view .LVU2459
 865:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7709              		.loc 1 865 4 view .LVU2460
 865:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7710              		.loc 1 865 8 is_stmt 0 view .LVU2461
 7711 0142 3B68     		ldr	r3, [r7]
 7712 0144 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 865:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 7713              		.loc 1 865 7 view .LVU2462
 7714 0148 DB07     		lsls	r3, r3, #31
 7715 014a 00F15D81 		bmi	.L847
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7716              		.loc 1 870 4 is_stmt 1 view .LVU2463
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7717              		.loc 1 870 34 is_stmt 0 view .LVU2464
 7718 014e DFF8E891 		ldr	r9, .L855+52
 7719 0152 D9F80010 		ldr	r1, [r9]
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7720              		.loc 1 870 4 view .LVU2465
 7721 0156 6329     		cmp	r1, #99
 7722 0158 00F33881 		bgt	.L848
 7723              	.LVL863:
 7724              	.L765:
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7725              		.loc 1 870 4 discriminator 5 view .LVU2466
 7726 015c 0131     		adds	r1, r1, #1
 7727              	.L769:
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7728              		.loc 1 870 4 discriminator 6 view .LVU2467
 7729 015e 03A8     		add	r0, sp, #12
 7730 0160 FFF7FEFF 		bl	getRegister
 7731              	.LVL864:
ARM GAS  /tmp/cchyQ5Gz.s 			page 239


 873:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7732              		.loc 1 873 4 is_stmt 1 discriminator 6 view .LVU2468
 873:src/display.c **** 	    if (yreg_hms && State2.hms) {
 7733              		.loc 1 873 7 is_stmt 0 discriminator 6 view .LVU2469
 7734 0164 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 7735 0168 11F07001 		ands	r1, r1, #112
 7736 016c 40D1     		bne	.L771
 874:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7737              		.loc 1 874 6 is_stmt 1 view .LVU2470
 874:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7738              		.loc 1 874 19 is_stmt 0 view .LVU2471
 7739 016e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 874:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7740              		.loc 1 874 9 view .LVU2472
 7741 0170 13F0010F 		tst	r3, #1
 7742              	.LBB476:
 875:src/display.c **** 
 7743              		.loc 1 875 44 view .LVU2473
 7744 0174 3B68     		ldr	r3, [r7]
 7745              	.LBE476:
 874:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 7746              		.loc 1 874 9 view .LVU2474
 7747 0176 40F06781 		bne	.L849
 895:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7748              		.loc 1 895 6 is_stmt 1 view .LVU2475
 895:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7749              		.loc 1 895 21 is_stmt 0 view .LVU2476
 7750 017a 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 895:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7751              		.loc 1 895 9 view .LVU2477
 7752 017e 9806     		lsls	r0, r3, #26
 7753 0180 36D5     		bpl	.L771
 897:src/display.c **** #endif
 7754              		.loc 1 897 6 view .LVU2478
 7755 0182 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 897:src/display.c **** #endif
 7756              		.loc 1 897 3 view .LVU2479
 7757 0184 13F00204 		ands	r4, r3, #2
 7758 0188 32D1     		bne	.L771
 900:src/display.c **** #endif
 7759              		.loc 1 900 6 view .LVU2480
 7760 018a 644B     		ldr	r3, .L855+24
 900:src/display.c **** #endif
 7761              		.loc 1 900 3 view .LVU2481
 7762 018c 1B68     		ldr	r3, [r3]
 7763 018e 012B     		cmp	r3, #1
 7764 0190 2ED0     		beq	.L771
 902:src/display.c **** 	      char ltgteq;
 7765              		.loc 1 902 6 view .LVU2482
 7766 0192 4146     		mov	r1, r8
 7767 0194 03A8     		add	r0, sp, #12
 7768 0196 FFF7FEFF 		bl	set_x_fract
 7769              	.LVL865:
 902:src/display.c **** 	      char ltgteq;
 7770              		.loc 1 902 3 view .LVU2483
 7771 019a 48B3     		cbz	r0, .L771
 7772              	.LBB477:
ARM GAS  /tmp/cchyQ5Gz.s 			page 240


 903:src/display.c **** 
 7773              		.loc 1 903 8 is_stmt 1 view .LVU2484
 905:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7774              		.loc 1 905 8 view .LVU2485
 905:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7775              		.loc 1 905 12 is_stmt 0 view .LVU2486
 7776 019c 2146     		mov	r1, r4
 7777 019e 3046     		mov	r0, r6
 7778 01a0 FFF7FEFF 		bl	find_char
 7779              	.LVL866:
 7780 01a4 0446     		mov	r4, r0
 905:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 7781              		.loc 1 905 10 view .LVU2487
 7782 01a6 0238     		subs	r0, r0, #2
 7783              	.LVL867:
 907:src/display.c **** 	      switch (ltgteq) {
 7784              		.loc 1 907 8 is_stmt 1 view .LVU2488
 907:src/display.c **** 	      switch (ltgteq) {
 7785              		.loc 1 907 15 is_stmt 0 view .LVU2489
 7786 01a8 14F8027C 		ldrb	r7, [r4, #-2]	@ zero_extendqisi2
 7787              	.LVL868:
 908:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 7788              		.loc 1 908 8 is_stmt 1 view .LVU2490
 7789 01ac 472F     		cmp	r7, #71
 7790 01ae 00F08881 		beq	.L795
 910:src/display.c **** 	      }
 7791              		.loc 1 910 25 is_stmt 0 view .LVU2491
 7792 01b2 4C2F     		cmp	r7, #76
 7793 01b4 08BF     		it	eq
 7794 01b6 3C27     		moveq	r7, #60
 7795              	.LVL869:
 7796              	.L776:
 912:src/display.c **** 	      q[2] = ltgteq;
 7797              		.loc 1 912 8 is_stmt 1 view .LVU2492
 7798 01b8 5C49     		ldr	r1, .L855+40
 7799 01ba FFF7FEFF 		bl	scopy
 7800              	.LVL870:
 913:src/display.c **** 
 7801              		.loc 1 913 8 view .LVU2493
 913:src/display.c **** 
 7802              		.loc 1 913 13 is_stmt 0 view .LVU2494
 7803 01be 2770     		strb	r7, [r4]
 915:src/display.c **** 		goto skip;
 7804              		.loc 1 915 8 is_stmt 1 view .LVU2495
 915:src/display.c **** 		goto skip;
 7805              		.loc 1 915 12 is_stmt 0 view .LVU2496
 7806 01c0 0121     		movs	r1, #1
 7807 01c2 3046     		mov	r0, r6
 7808 01c4 FFF7FEFF 		bl	pixel_length
 7809              	.LVL871:
 915:src/display.c **** 		goto skip;
 7810              		.loc 1 915 11 view .LVU2497
 7811 01c8 2C28     		cmp	r0, #44
 7812 01ca 40F38880 		ble	.L741
 918:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7813              		.loc 1 918 8 is_stmt 1 view .LVU2498
 918:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 241


 7814              		.loc 1 918 14 is_stmt 0 view .LVU2499
 7815 01ce 0027     		movs	r7, #0
 7816              	.LVL872:
 918:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7817              		.loc 1 918 14 view .LVU2500
 7818 01d0 04F8037C 		strb	r7, [r4, #-3]
 919:src/display.c **** 		goto skip;
 7819              		.loc 1 919 8 is_stmt 1 view .LVU2501
 919:src/display.c **** 		goto skip;
 7820              		.loc 1 919 12 is_stmt 0 view .LVU2502
 7821 01d4 0121     		movs	r1, #1
 7822 01d6 3046     		mov	r0, r6
 7823 01d8 FFF7FEFF 		bl	pixel_length
 7824              	.LVL873:
 919:src/display.c **** 		goto skip;
 7825              		.loc 1 919 11 view .LVU2503
 7826 01dc 2C28     		cmp	r0, #44
 7827 01de 7EDD     		ble	.L741
 922:src/display.c **** 	    }
 7828              		.loc 1 922 8 is_stmt 1 view .LVU2504
 922:src/display.c **** 	    }
 7829              		.loc 1 922 39 is_stmt 0 view .LVU2505
 7830 01e0 A8EB0602 		sub	r2, r8, r6
 922:src/display.c **** 	    }
 7831              		.loc 1 922 8 view .LVU2506
 7832 01e4 3946     		mov	r1, r7
 7833 01e6 C2F12A02 		rsb	r2, r2, #42
 7834 01ea 4046     		mov	r0, r8
 7835 01ec FFF7FEFF 		bl	xset
 7836              	.LVL874:
 7837              	.L771:
 922:src/display.c **** 	    }
 7838              		.loc 1 922 8 view .LVU2507
 7839              	.LBE477:
 925:src/display.c **** 	    int extra_pixels;
 7840              		.loc 1 925 4 is_stmt 1 view .LVU2508
 925:src/display.c **** 	    int extra_pixels;
 7841              		.loc 1 925 10 is_stmt 0 view .LVU2509
 7842 01f0 0C23     		movs	r3, #12
 7843 01f2 0293     		str	r3, [sp, #8]
 925:src/display.c **** 	    int extra_pixels;
 7844              		.loc 1 925 27 is_stmt 1 view .LVU2510
 7845 01f4 0EE0     		b	.L778
 7846              	.LVL875:
 7847              	.L850:
 7848              	.LBB478:
 933:src/display.c **** 
 7849              		.loc 1 933 6 is_stmt 0 view .LVU2511
 7850 01f6 029A     		ldr	r2, [sp, #8]
 7851 01f8 0A32     		adds	r2, r2, #10
 7852 01fa FFF7FEFF 		bl	xset
 7853              	.LVL876:
 935:src/display.c **** 	  }
 7854              		.loc 1 935 6 is_stmt 1 view .LVU2512
 935:src/display.c **** 	  }
 7855              		.loc 1 935 30 is_stmt 0 view .LVU2513
 7856 01fe B4F14802 		subs	r2, r4, #72
ARM GAS  /tmp/cchyQ5Gz.s 			page 242


 935:src/display.c **** 	  }
 7857              		.loc 1 935 8 view .LVU2514
 7858 0202 029B     		ldr	r3, [sp, #8]
 935:src/display.c **** 	  }
 7859              		.loc 1 935 30 view .LVU2515
 7860 0204 48BF     		it	mi
 7861 0206 A4F14502 		submi	r2, r4, #69
 935:src/display.c **** 	  }
 7862              		.loc 1 935 8 view .LVU2516
 7863 020a A3EBA203 		sub	r3, r3, r2, asr #2
 7864              	.LBE478:
 925:src/display.c **** 	    int extra_pixels;
 7865              		.loc 1 925 4 view .LVU2517
 7866 020e 012B     		cmp	r3, #1
 7867              	.LBB479:
 935:src/display.c **** 	  }
 7868              		.loc 1 935 8 view .LVU2518
 7869 0210 0293     		str	r3, [sp, #8]
 7870              	.LBE479:
 925:src/display.c **** 	    int extra_pixels;
 7871              		.loc 1 925 27 is_stmt 1 view .LVU2519
 925:src/display.c **** 	    int extra_pixels;
 7872              		.loc 1 925 4 is_stmt 0 view .LVU2520
 7873 0212 64DD     		ble	.L741
 7874              	.LVL877:
 7875              	.L778:
 7876              	.LBB480:
 926:src/display.c **** 
 7877              		.loc 1 926 6 is_stmt 1 view .LVU2521
 928:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7878              		.loc 1 928 6 view .LVU2522
 7879 0214 02AA     		add	r2, sp, #8
 7880 0216 4146     		mov	r1, r8
 7881 0218 03A8     		add	r0, sp, #12
 7882 021a FFF7FEFF 		bl	set_x_dn
 7883              	.LVL878:
 929:src/display.c **** 	    if (extra_pixels <= 0)
 7884              		.loc 1 929 6 view .LVU2523
 929:src/display.c **** 	    if (extra_pixels <= 0)
 7885              		.loc 1 929 21 is_stmt 0 view .LVU2524
 7886 021e 0121     		movs	r1, #1
 7887 0220 3046     		mov	r0, r6
 7888 0222 FFF7FEFF 		bl	pixel_length
 7889              	.LVL879:
 933:src/display.c **** 
 7890              		.loc 1 933 6 is_stmt 1 view .LVU2525
 929:src/display.c **** 	    if (extra_pixels <= 0)
 7891              		.loc 1 929 21 is_stmt 0 view .LVU2526
 7892 0226 0446     		mov	r4, r0
 7893              	.LVL880:
 930:src/display.c **** 	      break;
 7894              		.loc 1 930 6 is_stmt 1 view .LVU2527
 930:src/display.c **** 	      break;
 7895              		.loc 1 930 9 is_stmt 0 view .LVU2528
 7896 0228 4B2C     		cmp	r4, #75
 933:src/display.c **** 
 7897              		.loc 1 933 6 view .LVU2529
ARM GAS  /tmp/cchyQ5Gz.s 			page 243


 7898 022a 4FF00001 		mov	r1, #0
 7899 022e 4046     		mov	r0, r8
 7900              	.LVL881:
 930:src/display.c **** 	      break;
 7901              		.loc 1 930 9 view .LVU2530
 7902 0230 E1DC     		bgt	.L850
 7903              	.LVL882:
 930:src/display.c **** 	      break;
 7904              		.loc 1 930 9 view .LVU2531
 7905              	.LBE480:
 7906 0232 54E0     		b	.L741
 7907              	.LVL883:
 7908              	.L838:
 930:src/display.c **** 	      break;
 7909              		.loc 1 930 9 view .LVU2532
 7910              	.LBE475:
 657:src/display.c **** 	    *p2++ = '\006';
 7911              		.loc 1 657 6 is_stmt 1 view .LVU2533
 658:src/display.c **** 	  }
 7912              		.loc 1 658 12 is_stmt 0 view .LVU2534
 7913 0234 0623     		movs	r3, #6
 7914 0236 8DF85D30 		strb	r3, [sp, #93]
 657:src/display.c **** 	    *p2++ = '\006';
 7915              		.loc 1 657 12 view .LVU2535
 7916 023a 8DF85C80 		strb	r8, [sp, #92]
 658:src/display.c **** 	  }
 7917              		.loc 1 658 6 is_stmt 1 view .LVU2536
 7918              	.LVL884:
 661:src/display.c **** 	default:
 7919              		.loc 1 661 2 view .LVU2537
 661:src/display.c **** 	default:
 7920              		.loc 1 661 9 is_stmt 0 view .LVU2538
 7921 023e FFF7FEFF 		bl	int_mode
 7922              	.LVL885:
 7923 0242 0138     		subs	r0, r0, #1
 7924 0244 C0B2     		uxtb	r0, r0
 7925 0246 0228     		cmp	r0, #2
 7926 0248 96BF     		itet	ls
 7927 024a 394B     		ldrls	r3, .L855+44
 7928 024c 3949     		ldrhi	r1, .L855+48
 7929 024e 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7930              	.LVL886:
 668:src/display.c **** 	*q++ = '\006';
 7931              		.loc 1 668 2 is_stmt 1 view .LVU2539
 668:src/display.c **** 	*q++ = '\006';
 7932              		.loc 1 668 6 is_stmt 0 view .LVU2540
 7933 0252 0DF15E00 		add	r0, sp, #94
 7934              	.LVL887:
 668:src/display.c **** 	*q++ = '\006';
 7935              		.loc 1 668 6 view .LVU2541
 7936 0256 FFF7FEFF 		bl	scopy
 7937              	.LVL888:
 669:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7938              		.loc 1 669 7 view .LVU2542
 7939 025a 8046     		mov	r8, r0
 7940              	.LVL889:
 669:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
ARM GAS  /tmp/cchyQ5Gz.s 			page 244


 7941              		.loc 1 669 7 view .LVU2543
 7942 025c 0623     		movs	r3, #6
 7943 025e 08F8013B 		strb	r3, [r8], #1
 668:src/display.c **** 	*q++ = '\006';
 7944              		.loc 1 668 6 view .LVU2544
 7945 0262 0546     		mov	r5, r0
 7946              	.LVL890:
 669:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7947              		.loc 1 669 2 is_stmt 1 view .LVU2545
 670:src/display.c **** 
 7948              		.loc 1 670 2 view .LVU2546
 670:src/display.c **** 
 7949              		.loc 1 670 7 is_stmt 0 view .LVU2547
 7950 0264 FFF7FEFF 		bl	word_size
 7951              	.LVL891:
 7952 0268 0222     		movs	r2, #2
 7953 026a 0146     		mov	r1, r0
 7954 026c 4046     		mov	r0, r8
 7955 026e FFF7FEFF 		bl	num_arg_0
 7956              	.LVL892:
 672:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7957              		.loc 1 672 19 view .LVU2548
 7958 0272 DFF8C8C0 		ldr	ip, .L855+56
 7959 0276 DCF80030 		ldr	r3, [ip]
 7960              	.LVL893:
 672:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7961              		.loc 1 672 2 is_stmt 1 view .LVU2549
 672:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7962              		.loc 1 672 5 is_stmt 0 view .LVU2550
 7963 027a 002B     		cmp	r3, #0
 7964 027c 76DD     		ble	.L836
 673:src/display.c **** 	  if (*q == '1')
 7965              		.loc 1 673 4 is_stmt 1 view .LVU2551
 673:src/display.c **** 	  if (*q == '1')
 7966              		.loc 1 673 10 is_stmt 0 view .LVU2552
 7967 027e C3F10702 		rsb	r2, r3, #7
 7968 0282 5200     		lsls	r2, r2, #1
 673:src/display.c **** 	  if (*q == '1')
 7969              		.loc 1 673 6 view .LVU2553
 7970 0284 0292     		str	r2, [sp, #8]
 674:src/display.c **** 	    n += 2;
 7971              		.loc 1 674 4 is_stmt 1 view .LVU2554
 674:src/display.c **** 	    n += 2;
 7972              		.loc 1 674 7 is_stmt 0 view .LVU2555
 7973 0286 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 7974 0288 3129     		cmp	r1, #49
 675:src/display.c **** 	  if (q[1] == '1')
 7975              		.loc 1 675 6 is_stmt 1 view .LVU2556
 675:src/display.c **** 	  if (q[1] == '1')
 7976              		.loc 1 675 8 is_stmt 0 view .LVU2557
 7977 028a 04BF     		itt	eq
 7978 028c 0232     		addeq	r2, r2, #2
 7979 028e 0292     		streq	r2, [sp, #8]
 676:src/display.c **** 	    n += 2;
 7980              		.loc 1 676 4 is_stmt 1 view .LVU2558
 676:src/display.c **** 	    n += 2;
 7981              		.loc 1 676 7 is_stmt 0 view .LVU2559
ARM GAS  /tmp/cchyQ5Gz.s 			page 245


 7982 0290 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 7983 0292 3129     		cmp	r1, #49
 7984 0294 00D1     		bne	.L734
 677:src/display.c **** 	  while (n-- > 0)
 7985              		.loc 1 677 6 is_stmt 1 view .LVU2560
 677:src/display.c **** 	  while (n-- > 0)
 7986              		.loc 1 677 8 is_stmt 0 view .LVU2561
 7987 0296 0232     		adds	r2, r2, #2
 7988              	.L734:
 678:src/display.c **** 	    *p2++ = '\006';
 7989              		.loc 1 678 10 is_stmt 1 view .LVU2562
 678:src/display.c **** 	    *p2++ = '\006';
 7990              		.loc 1 678 12 is_stmt 0 view .LVU2563
 7991 0298 511E     		subs	r1, r2, #1
 678:src/display.c **** 	    *p2++ = '\006';
 7992              		.loc 1 678 10 view .LVU2564
 7993 029a 002A     		cmp	r2, #0
 678:src/display.c **** 	    *p2++ = '\006';
 7994              		.loc 1 678 12 view .LVU2565
 7995 029c 0291     		str	r1, [sp, #8]
 678:src/display.c **** 	    *p2++ = '\006';
 7996              		.loc 1 678 10 view .LVU2566
 7997 029e 40F30981 		ble	.L834
 679:src/display.c **** 
 7998              		.loc 1 679 12 view .LVU2567
 7999 02a2 0621     		movs	r1, #6
 8000              	.L735:
 679:src/display.c **** 
 8001              		.loc 1 679 6 is_stmt 1 view .LVU2568
 8002              	.LVL894:
 679:src/display.c **** 
 8003              		.loc 1 679 12 is_stmt 0 view .LVU2569
 8004 02a4 00F8011B 		strb	r1, [r0], #1
 8005              	.LVL895:
 678:src/display.c **** 	    *p2++ = '\006';
 8006              		.loc 1 678 10 is_stmt 1 view .LVU2570
 678:src/display.c **** 	    *p2++ = '\006';
 8007              		.loc 1 678 12 is_stmt 0 view .LVU2571
 8008 02a8 029B     		ldr	r3, [sp, #8]
 8009 02aa 5A1E     		subs	r2, r3, #1
 678:src/display.c **** 	    *p2++ = '\006';
 8010              		.loc 1 678 10 view .LVU2572
 8011 02ac 002B     		cmp	r3, #0
 678:src/display.c **** 	    *p2++ = '\006';
 8012              		.loc 1 678 12 view .LVU2573
 8013 02ae 0292     		str	r2, [sp, #8]
 678:src/display.c **** 	    *p2++ = '\006';
 8014              		.loc 1 678 10 view .LVU2574
 8015 02b0 F8DC     		bgt	.L735
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8016              		.loc 1 681 4 is_stmt 1 view .LVU2575
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8017              		.loc 1 681 11 is_stmt 0 view .LVU2576
 8018 02b2 DCF80030 		ldr	r3, [ip]
 8019 02b6 0293     		str	r3, [sp, #8]
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8020              		.loc 1 681 27 is_stmt 1 view .LVU2577
ARM GAS  /tmp/cchyQ5Gz.s 			page 246


 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8021              		.loc 1 681 4 is_stmt 0 view .LVU2578
 8022 02b8 002B     		cmp	r3, #0
 8023 02ba 57DB     		blt	.L836
 8024              	.L783:
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8025              		.loc 1 681 4 view .LVU2579
 8026 02bc 134D     		ldr	r5, .L855+8
 8027              	.L740:
 682:src/display.c **** 	}
 8028              		.loc 1 682 6 is_stmt 1 view .LVU2580
 682:src/display.c **** 	}
 8029              		.loc 1 682 20 is_stmt 0 view .LVU2581
 8030 02be 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8031 02c0 C2F3C202 		ubfx	r2, r2, #3, #3
 682:src/display.c **** 	}
 8032              		.loc 1 682 12 view .LVU2582
 8033 02c4 9A42     		cmp	r2, r3
 8034 02c6 0CBF     		ite	eq
 8035 02c8 7C23     		moveq	r3, #124
 8036 02ca 2723     		movne	r3, #39
 8037              	.LVL896:
 682:src/display.c **** 	}
 8038              		.loc 1 682 12 view .LVU2583
 8039 02cc 00F8013B 		strb	r3, [r0], #1
 8040              	.LVL897:
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8041              		.loc 1 681 35 is_stmt 1 view .LVU2584
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8042              		.loc 1 681 36 is_stmt 0 view .LVU2585
 8043 02d0 029B     		ldr	r3, [sp, #8]
 8044 02d2 013B     		subs	r3, r3, #1
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8045              		.loc 1 681 4 view .LVU2586
 8046 02d4 002B     		cmp	r3, #0
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8047              		.loc 1 681 36 view .LVU2587
 8048 02d6 0293     		str	r3, [sp, #8]
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8049              		.loc 1 681 27 is_stmt 1 view .LVU2588
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8050              		.loc 1 681 4 is_stmt 0 view .LVU2589
 8051 02d8 F1DA     		bge	.L740
 684:src/display.c ****       }
 8052              		.loc 1 684 2 is_stmt 1 view .LVU2590
 684:src/display.c ****       }
 8053              		.loc 1 684 5 is_stmt 0 view .LVU2591
 8054 02da 002C     		cmp	r4, #0
 8055 02dc 49D1     		bne	.L851
 8056              	.LVL898:
 8057              	.L741:
 941:src/display.c ****       set_status_top_always(buf2);
 8058              		.loc 1 941 7 is_stmt 1 view .LVU2592
 941:src/display.c ****       set_status_top_always(buf2);
 8059              		.loc 1 941 11 is_stmt 0 view .LVU2593
 8060 02de AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 941:src/display.c ****       set_status_top_always(buf2);
ARM GAS  /tmp/cchyQ5Gz.s 			page 247


 8061              		.loc 1 941 10 view .LVU2594
 8062 02e0 5906     		lsls	r1, r3, #25
 8063 02e2 56D4     		bmi	.L852
 8064              	.L780:
 8065              	.LBB483:
 8066              	.LBB484:
3514:src/display.c ****       }
 8067              		.loc 1 3514 2 is_stmt 1 view .LVU2595
 8068 02e4 1B06     		lsls	r3, r3, #24
 8069 02e6 4BD5     		bpl	.L853
 8070 02e8 0121     		movs	r1, #1
 8071              	.L782:
 8072              	.LVL899:
 8073              	.LBB485:
 8074              	.LBI485:
3345:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8075              		.loc 1 3345 19 view .LVU2596
 8076              	.LBB486:
3346:src/display.c ****       }
 8077              		.loc 1 3346 2 view .LVU2597
 8078 02ea 4FF45373 		mov	r3, #844
 8079 02ee 0093     		str	r3, [sp]
 8080 02f0 17A8     		add	r0, sp, #92
 8081              	.LVL900:
3346:src/display.c ****       }
 8082              		.loc 1 3346 2 is_stmt 0 view .LVU2598
 8083 02f2 40F24A23 		movw	r3, #586
 8084 02f6 2B22     		movs	r2, #43
 8085 02f8 FFF7FEFF 		bl	s_s_sized
 8086              	.LVL901:
3346:src/display.c ****       }
 8087              		.loc 1 3346 2 view .LVU2599
 8088              	.LBE486:
 8089              	.LBE485:
 8090              	.LBE484:
 8091              	.LBE483:
 944:src/display.c **** #else
 8092              		.loc 1 944 5 view .LVU2600
 8093 02fc 23B0     		add	sp, sp, #140
 8094              		.cfi_remember_state
 8095              		.cfi_def_cfa_offset 28
 8096              		@ sp needed
 8097 02fe BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8098              	.L856:
 8099 0302 00BF     		.align	2
 8100              	.L855:
 8101 0304 00000000 		.word	main_ram
 8102 0308 00000000 		.word	.LANCHOR15
 8103 030c 00000000 		.word	StateWhileOn
 8104 0310 10000000 		.word	.LC7
 8105 0314 1C000000 		.word	.LC9
 8106 0318 2C000000 		.word	.LC12
 8107 031c 00000000 		.word	RectPolConv
 8108 0320 28000000 		.word	.LC11
 8109 0324 24000000 		.word	.LC10
 8110 0328 3C000000 		.word	.LC15
 8111 032c 44000000 		.word	.LC17
ARM GAS  /tmp/cchyQ5Gz.s 			page 248


 8112 0330 00000000 		.word	.LANCHOR16
 8113 0334 00000000 		.word	.LC3
 8114 0338 00000000 		.word	ShowRegister
 8115 033c 00000000 		.word	IntMaxWindow
 8116              	.LVL902:
 8117              	.L842:
 8118              		.cfi_restore_state
 769:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8119              		.loc 1 769 4 is_stmt 1 view .LVU2601
 770:src/display.c **** 	  *p2++ = shift_char;
 8120              		.loc 1 770 4 view .LVU2602
 773:src/display.c **** 	}
 8121              		.loc 1 773 10 is_stmt 0 view .LVU2603
 8122 0340 1423     		movs	r3, #20
 8123 0342 8DF85F30 		strb	r3, [sp, #95]
 783:src/display.c **** 	    q = "\007\207i";
 8124              		.loc 1 783 8 view .LVU2604
 8125 0346 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 771:src/display.c **** 	  //	  q = "\024";
 8126              		.loc 1 771 10 view .LVU2605
 8127 0348 8DF85E80 		strb	r8, [sp, #94]
 769:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8128              		.loc 1 769 10 view .LVU2606
 8129 034c 4EF20742 		movw	r2, #58375
 783:src/display.c **** 	    q = "\007\207i";
 8130              		.loc 1 783 7 view .LVU2607
 8131 0350 13F0C00F 		tst	r3, #192
 769:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 8132              		.loc 1 769 10 view .LVU2608
 8133 0354 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 771:src/display.c **** 	  //	  q = "\024";
 8134              		.loc 1 771 4 is_stmt 1 view .LVU2609
 8135              	.LVL903:
 773:src/display.c **** 	}
 8136              		.loc 1 773 4 view .LVU2610
 773:src/display.c **** 	}
 8137              		.loc 1 773 7 is_stmt 0 view .LVU2611
 8138 0358 0DF16009 		add	r9, sp, #96
 8139              	.LVL904:
 783:src/display.c **** 	    q = "\007\207i";
 8140              		.loc 1 783 4 is_stmt 1 view .LVU2612
 783:src/display.c **** 	    q = "\007\207i";
 8141              		.loc 1 783 7 is_stmt 0 view .LVU2613
 8142 035c 3FF4B3AE 		beq	.L753
 8143              	.L843:
 784:src/display.c **** 	    p = scopy(p, q);
 8144              		.loc 1 784 6 is_stmt 1 view .LVU2614
 8145              	.LVL905:
 785:src/display.c **** 	    //	    goto no_copy;
 8146              		.loc 1 785 6 view .LVU2615
 785:src/display.c **** 	    //	    goto no_copy;
 8147              		.loc 1 785 10 is_stmt 0 view .LVU2616
 8148 0360 5949     		ldr	r1, .L857
 8149 0362 3046     		mov	r0, r6
 8150 0364 FFF7FEFF 		bl	scopy
 8151              	.LVL906:
 8152 0368 8046     		mov	r8, r0
ARM GAS  /tmp/cchyQ5Gz.s 			page 249


 8153              	.LVL907:
 785:src/display.c **** 	    //	    goto no_copy;
 8154              		.loc 1 785 10 view .LVU2617
 8155 036a B5E6     		b	.L754
 8156              	.LVL908:
 8157              	.L836:
 785:src/display.c **** 	    //	    goto no_copy;
 8158              		.loc 1 785 10 view .LVU2618
 8159 036c 574D     		ldr	r5, .L857+4
 684:src/display.c ****       }
 8160              		.loc 1 684 2 is_stmt 1 view .LVU2619
 684:src/display.c ****       }
 8161              		.loc 1 684 5 is_stmt 0 view .LVU2620
 8162 036e 002C     		cmp	r4, #0
 8163 0370 B5D0     		beq	.L741
 8164              	.L851:
 601:src/display.c ****       char buf2[42], *p2 = buf2;
 8165              		.loc 1 601 22 view .LVU2621
 8166 0372 B046     		mov	r8, r6
 8167              	.LVL909:
 601:src/display.c ****       char buf2[42], *p2 = buf2;
 8168              		.loc 1 601 22 view .LVU2622
 8169 0374 E5E6     		b	.L731
 8170              	.LVL910:
 8171              	.L840:
 718:src/display.c **** 	  *p2 = '\015';
 8172              		.loc 1 718 4 is_stmt 1 view .LVU2623
 718:src/display.c **** 	  *p2 = '\015';
 8173              		.loc 1 718 10 is_stmt 0 view .LVU2624
 8174 0376 2022     		movs	r2, #32
 719:src/display.c **** 	  goto skip;
 8175              		.loc 1 719 8 view .LVU2625
 8176 0378 0D23     		movs	r3, #13
 718:src/display.c **** 	  *p2 = '\015';
 8177              		.loc 1 718 10 view .LVU2626
 8178 037a 0270     		strb	r2, [r0]
 719:src/display.c **** 	  goto skip;
 8179              		.loc 1 719 4 is_stmt 1 view .LVU2627
 719:src/display.c **** 	  goto skip;
 8180              		.loc 1 719 8 is_stmt 0 view .LVU2628
 8181 037c 4370     		strb	r3, [r0, #1]
 720:src/display.c **** 	}
 8182              		.loc 1 720 4 is_stmt 1 view .LVU2629
 8183 037e AEE7     		b	.L741
 8184              	.LVL911:
 8185              	.L853:
 8186              	.LBB491:
 8187              	.LBB489:
 8188              	.LBB487:
 8189              	.LBI487:
3493:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8190              		.loc 1 3493 18 view .LVU2630
 8191              	.LBB488:
3494:src/display.c ****       }
 8192              		.loc 1 3494 2 view .LVU2631
3494:src/display.c ****       }
 8193              		.loc 1 3494 9 is_stmt 0 view .LVU2632
ARM GAS  /tmp/cchyQ5Gz.s 			page 250


 8194 0380 0021     		movs	r1, #0
 8195 0382 17A8     		add	r0, sp, #92
 8196              	.LVL912:
3494:src/display.c ****       }
 8197              		.loc 1 3494 9 view .LVU2633
 8198 0384 FFF7FEFF 		bl	pixel_length
 8199              	.LVL913:
3494:src/display.c ****       }
 8200              		.loc 1 3494 9 view .LVU2634
 8201              	.LBE488:
 8202              	.LBE487:
3514:src/display.c ****       }
 8203              		.loc 1 3514 2 view .LVU2635
 8204 0388 2C28     		cmp	r0, #44
 8205 038a D4BF     		ite	le
 8206 038c 0021     		movle	r1, #0
 8207 038e 0121     		movgt	r1, #1
 8208 0390 ABE7     		b	.L782
 8209              	.L852:
 8210              	.LBE489:
 8211              	.LBE491:
 941:src/display.c ****       set_status_top_always(buf2);
 8212              		.loc 1 941 27 is_stmt 1 discriminator 1 view .LVU2636
 8213 0392 3046     		mov	r0, r6
 8214 0394 FFF7FEFF 		bl	set_status
 8215              	.LVL914:
 942:src/display.c ****       
 8216              		.loc 1 942 7 discriminator 1 view .LVU2637
 8217              	.LBB492:
 8218              	.LBI483:
3512:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8219              		.loc 1 3512 19 discriminator 1 view .LVU2638
 8220              	.LBB490:
3513:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8221              		.loc 1 3513 2 discriminator 1 view .LVU2639
3513:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8222              		.loc 1 3513 6 is_stmt 0 discriminator 1 view .LVU2640
 8223 0398 4D4B     		ldr	r3, .L857+8
3513:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8224              		.loc 1 3513 5 discriminator 1 view .LVU2641
 8225 039a B3F90030 		ldrsh	r3, [r3]
 8226 039e 0BB9     		cbnz	r3, .L779
 8227 03a0 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8228 03a2 9FE7     		b	.L780
 8229              	.L779:
3513:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8230              		.loc 1 3513 22 view .LVU2642
 8231 03a4 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8232 03a6 5A06     		lsls	r2, r3, #25
 8233 03a8 9CD5     		bpl	.L780
 8234              	.LBE490:
 8235              	.LBE492:
 944:src/display.c **** #else
 8236              		.loc 1 944 5 view .LVU2643
 8237 03aa 23B0     		add	sp, sp, #140
 8238              		.cfi_remember_state
 8239              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/cchyQ5Gz.s 			page 251


 8240              		@ sp needed
 8241 03ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8242              	.LVL915:
 8243              	.L839:
 8244              		.cfi_restore_state
 713:src/display.c **** 	  *p2 = '\024';
 8245              		.loc 1 713 4 is_stmt 1 view .LVU2644
 713:src/display.c **** 	  *p2 = '\024';
 8246              		.loc 1 713 10 is_stmt 0 view .LVU2645
 8247 03b0 2022     		movs	r2, #32
 714:src/display.c **** 	  goto skip;
 8248              		.loc 1 714 8 view .LVU2646
 8249 03b2 1423     		movs	r3, #20
 713:src/display.c **** 	  *p2 = '\024';
 8250              		.loc 1 713 10 view .LVU2647
 8251 03b4 0270     		strb	r2, [r0]
 714:src/display.c **** 	  goto skip;
 8252              		.loc 1 714 4 is_stmt 1 view .LVU2648
 714:src/display.c **** 	  goto skip;
 8253              		.loc 1 714 8 is_stmt 0 view .LVU2649
 8254 03b6 4370     		strb	r3, [r0, #1]
 715:src/display.c **** 	}
 8255              		.loc 1 715 4 is_stmt 1 view .LVU2650
 8256 03b8 91E7     		b	.L741
 8257              	.LVL916:
 8258              	.L846:
 802:src/display.c **** 	      *p2++ = '\207';
 8259              		.loc 1 802 8 view .LVU2651
 803:src/display.c **** 	      *p2++ = '\007';	    
 8260              		.loc 1 803 8 view .LVU2652
 804:src/display.c **** 	    }
 8261              		.loc 1 804 14 is_stmt 0 view .LVU2653
 8262 03ba 89F80230 		strb	r3, [r9, #2]
 803:src/display.c **** 	      *p2++ = '\007';	    
 8263              		.loc 1 803 14 view .LVU2654
 8264 03be 89F80120 		strb	r2, [r9, #1]
 804:src/display.c **** 	    }
 8265              		.loc 1 804 8 is_stmt 1 view .LVU2655
 804:src/display.c **** 	    }
 8266              		.loc 1 804 11 is_stmt 0 view .LVU2656
 8267 03c2 09F10309 		add	r9, r9, #3
 8268              	.LVL917:
 804:src/display.c **** 	    }
 8269              		.loc 1 804 11 view .LVU2657
 8270 03c6 98E6     		b	.L757
 8271              	.LVL918:
 8272              	.L793:
 840:src/display.c **** #endif
 8273              		.loc 1 840 19 view .LVU2658
 8274 03c8 4249     		ldr	r1, .L857+12
 8275 03ca B0E6     		b	.L759
 8276              	.LVL919:
 8277              	.L848:
 8278              	.LBB493:
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8279              		.loc 1 870 75 discriminator 2 view .LVU2659
 8280 03cc FFF7FEFF 		bl	stack_size
ARM GAS  /tmp/cchyQ5Gz.s 			page 252


 8281              	.LVL920:
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8282              		.loc 1 870 62 discriminator 2 view .LVU2660
 8283 03d0 D9F80010 		ldr	r1, [r9]
 8284 03d4 6330     		adds	r0, r0, #99
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8285              		.loc 1 870 46 discriminator 2 view .LVU2661
 8286 03d6 8842     		cmp	r0, r1
 8287 03d8 FFF6C0AE 		blt	.L765
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8288              		.loc 1 870 91 discriminator 4 view .LVU2662
 8289 03dc FFF7FEFF 		bl	get_cmdline
 8290              	.LVL921:
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8291              		.loc 1 870 88 discriminator 4 view .LVU2663
 8292 03e0 20B1     		cbz	r0, .L768
 871:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8293              		.loc 1 871 7 view .LVU2664
 8294 03e2 002C     		cmp	r4, #0
 8295 03e4 6AD0     		beq	.L767
 871:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8296              		.loc 1 871 28 discriminator 1 view .LVU2665
 8297 03e6 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 871:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8298              		.loc 1 871 10 discriminator 1 view .LVU2666
 8299 03e8 5C06     		lsls	r4, r3, #25
 8300              	.LVL922:
 871:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8301              		.loc 1 871 10 discriminator 1 view .LVU2667
 8302 03ea 67D4     		bmi	.L767
 8303              	.L768:
 8304 03ec D9F80010 		ldr	r1, [r9]
 8305 03f0 B4E6     		b	.L765
 8306              	.LVL923:
 8307              	.L743:
 871:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 8308              		.loc 1 871 10 discriminator 1 view .LVU2668
 8309              	.LBE493:
 704:src/display.c **** 	    *p2++ = shift_char;
 8310              		.loc 1 704 30 discriminator 1 view .LVU2669
 8311 03f2 FFF7FEFF 		bl	is_dblmode
 8312              	.LVL924:
 704:src/display.c **** 	    *p2++ = shift_char;
 8313              		.loc 1 704 26 discriminator 1 view .LVU2670
 8314 03f6 0028     		cmp	r0, #0
 8315 03f8 3FF426AE 		beq	.L745
 709:src/display.c **** 	  }
 8316              		.loc 1 709 6 is_stmt 1 view .LVU2671
 8317              	.LVL925:
 709:src/display.c **** 	  }
 8318              		.loc 1 709 12 is_stmt 0 view .LVU2672
 8319 03fc 4423     		movs	r3, #68
 8320 03fe 8DF85C30 		strb	r3, [sp, #92]
 709:src/display.c **** 	  }
 8321              		.loc 1 709 9 view .LVU2673
 8322 0402 0DF15D00 		add	r0, sp, #93
 8323              	.LVL926:
ARM GAS  /tmp/cchyQ5Gz.s 			page 253


 709:src/display.c **** 	  }
 8324              		.loc 1 709 9 view .LVU2674
 8325 0406 26E6     		b	.L744
 8326              	.LVL927:
 8327              	.L847:
 8328              	.LBB494:
 866:src/display.c **** 	    goto skip;
 8329              		.loc 1 866 6 is_stmt 1 view .LVU2675
 8330 0408 6520     		movs	r0, #101
 8331 040a FFF7FEFF 		bl	get_reg_n_int
 8332              	.LVL928:
 8333 040e 4246     		mov	r2, r8
 8334 0410 FFF7FEFF 		bl	set_int_x
 8335              	.LVL929:
 867:src/display.c **** 	  }
 8336              		.loc 1 867 6 view .LVU2676
 8337 0414 63E7     		b	.L741
 8338              	.LVL930:
 8339              	.L841:
 867:src/display.c **** 	  }
 8340              		.loc 1 867 6 is_stmt 0 view .LVU2677
 8341              	.LBE494:
 723:src/display.c **** 	  if (State2.wascomplex) {
 8342              		.loc 1 723 28 discriminator 1 view .LVU2678
 8343 0416 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 723:src/display.c **** 	  if (State2.wascomplex) {
 8344              		.loc 1 723 24 discriminator 1 view .LVU2679
 8345 0418 13F0C00F 		tst	r3, #192
 8346 041c 4CD1     		bne	.L787
 723:src/display.c **** 	  if (State2.wascomplex) {
 8347              		.loc 1 723 60 discriminator 2 view .LVU2680
 8348 041e 2E4B     		ldr	r3, .L857+16
 8349 0420 1B68     		ldr	r3, [r3]
 723:src/display.c **** 	  if (State2.wascomplex) {
 8350              		.loc 1 723 46 discriminator 2 view .LVU2681
 8351 0422 002B     		cmp	r3, #0
 8352 0424 3FF423AE 		beq	.L748
 724:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8353              		.loc 1 724 4 is_stmt 1 view .LVU2682
 727:src/display.c **** 	    if (RectPolConv == 1) {
 8354              		.loc 1 727 9 view .LVU2683
 728:src/display.c **** 	      q = "\007\306<";
 8355              		.loc 1 728 6 view .LVU2684
 732:src/display.c **** 	    }
 8356              		.loc 1 732 10 is_stmt 0 view .LVU2685
 8357 0428 2C49     		ldr	r1, .L857+20
 8358 042a 2D4A     		ldr	r2, .L857+24
 8359 042c 012B     		cmp	r3, #1
 8360 042e 18BF     		it	ne
 8361 0430 1146     		movne	r1, r2
 8362              	.L749:
 8363              	.LVL931:
 735:src/display.c **** 
 8364              		.loc 1 735 4 is_stmt 1 view .LVU2686
 735:src/display.c **** 
 8365              		.loc 1 735 8 is_stmt 0 view .LVU2687
 8366 0432 3046     		mov	r0, r6
ARM GAS  /tmp/cchyQ5Gz.s 			page 254


 8367              	.LVL932:
 735:src/display.c **** 
 8368              		.loc 1 735 8 view .LVU2688
 8369 0434 FFF7FEFF 		bl	scopy
 8370              	.LVL933:
 735:src/display.c **** 
 8371              		.loc 1 735 8 view .LVU2689
 8372 0438 8046     		mov	r8, r0
 8373              	.LVL934:
 737:src/display.c **** 	}
 8374              		.loc 1 737 4 is_stmt 1 view .LVU2690
 8375 043a 82E6     		b	.L731
 8376              	.LVL935:
 8377              	.L844:
 789:src/display.c **** 	    p = scopy(p, q);
 8378              		.loc 1 789 6 view .LVU2691
 790:src/display.c **** 	    //	    goto no_copy;
 8379              		.loc 1 790 6 view .LVU2692
 790:src/display.c **** 	    //	    goto no_copy;
 8380              		.loc 1 790 10 is_stmt 0 view .LVU2693
 8381 043c 2949     		ldr	r1, .L857+28
 8382 043e 3046     		mov	r0, r6
 8383 0440 FFF7FEFF 		bl	scopy
 8384              	.LVL936:
 8385 0444 8046     		mov	r8, r0
 8386              	.LVL937:
 790:src/display.c **** 	    //	    goto no_copy;
 8387              		.loc 1 790 10 view .LVU2694
 8388 0446 47E6     		b	.L754
 8389              	.LVL938:
 8390              	.L849:
 8391              	.LBB495:
 8392              	.LBB481:
 875:src/display.c **** 
 8393              		.loc 1 875 8 is_stmt 1 view .LVU2695
 877:src/display.c **** 	      UState.nothousands = 1;
 8394              		.loc 1 877 8 is_stmt 0 view .LVU2696
 8395 0448 2A22     		movs	r2, #42
 8396 044a 3046     		mov	r0, r6
 875:src/display.c **** 
 8397              		.loc 1 875 44 view .LVU2697
 8398 044c 93F8E787 		ldrb	r8, [r3, #2023]	@ zero_extendqisi2
 8399              	.LVL939:
 875:src/display.c **** 
 8400              		.loc 1 875 44 view .LVU2698
 8401 0450 254C     		ldr	r4, .L857+32
 877:src/display.c **** 	      UState.nothousands = 1;
 8402              		.loc 1 877 8 view .LVU2699
 8403 0452 FFF7FEFF 		bl	xset
 8404              	.LVL940:
 878:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8405              		.loc 1 878 27 view .LVU2700
 8406 0456 3A68     		ldr	r2, [r7]
 8407 0458 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8408 045c 43F04003 		orr	r3, r3, #64
 8409 0460 82F8E737 		strb	r3, [r2, #2023]
 879:src/display.c **** 	      UState.nothousands = saved_nothousands;
ARM GAS  /tmp/cchyQ5Gz.s 			page 255


 8410              		.loc 1 879 8 view .LVU2701
 8411 0464 3146     		mov	r1, r6
 8412 0466 03A8     		add	r0, sp, #12
 8413 0468 FFF7FEFF 		bl	set_x_hms
 8414              	.LVL941:
 880:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8415              		.loc 1 880 27 view .LVU2702
 8416 046c 3B68     		ldr	r3, [r7]
 8417 046e 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 875:src/display.c **** 
 8418              		.loc 1 875 44 view .LVU2703
 8419 0472 C8F38018 		ubfx	r8, r8, #6, #1
 8420              	.LVL942:
 877:src/display.c **** 	      UState.nothousands = 1;
 8421              		.loc 1 877 8 is_stmt 1 view .LVU2704
 878:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8422              		.loc 1 878 8 view .LVU2705
 879:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8423              		.loc 1 879 8 view .LVU2706
 880:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8424              		.loc 1 880 8 view .LVU2707
 880:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8425              		.loc 1 880 27 is_stmt 0 view .LVU2708
 8426 0476 68F38612 		bfi	r2, r8, #6, #1
 8427 047a 83F8E727 		strb	r2, [r3, #2023]
 885:src/display.c **** 	      while (*p) {
 8428              		.loc 1 885 8 is_stmt 1 view .LVU2709
 8429              	.LVL943:
 886:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8430              		.loc 1 886 8 view .LVU2710
 886:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8431              		.loc 1 886 14 view .LVU2711
 886:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8432              		.loc 1 886 15 is_stmt 0 view .LVU2712
 8433 047e 4021     		movs	r1, #64
 880:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8434              		.loc 1 880 27 view .LVU2713
 8435 0480 0522     		movs	r2, #5
 8436 0482 05E0     		b	.L774
 8437              	.LVL944:
 8438              	.L854:
 886:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8439              		.loc 1 886 15 view .LVU2714
 8440 0484 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 8441              	.LVL945:
 886:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8442              		.loc 1 886 14 view .LVU2715
 8443 0488 0029     		cmp	r1, #0
 8444 048a 3FF428AF 		beq	.L741
 8445 048e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8446              	.LVL946:
 8447              	.L774:
 887:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8448              		.loc 1 887 3 is_stmt 1 view .LVU2716
 8449 0490 3046     		mov	r0, r6
 8450 0492 FFF7FEFF 		bl	replace_char
 8451              	.LVL947:
ARM GAS  /tmp/cchyQ5Gz.s 			page 256


 888:src/display.c **** 		  goto skip;
 8452              		.loc 1 888 3 view .LVU2717
 888:src/display.c **** 		  goto skip;
 8453              		.loc 1 888 7 is_stmt 0 view .LVU2718
 8454 0496 0121     		movs	r1, #1
 8455 0498 3046     		mov	r0, r6
 8456 049a FFF7FEFF 		bl	pixel_length
 8457              	.LVL948:
 891:src/display.c **** 	      }
 8458              		.loc 1 891 3 is_stmt 1 view .LVU2719
 886:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8459              		.loc 1 886 14 view .LVU2720
 888:src/display.c **** 		  goto skip;
 8460              		.loc 1 888 6 is_stmt 0 view .LVU2721
 8461 049e 2C28     		cmp	r0, #44
 8462 04a0 F0DC     		bgt	.L854
 8463 04a2 1CE7     		b	.L741
 8464              	.LVL949:
 8465              	.L789:
 888:src/display.c **** 		  goto skip;
 8466              		.loc 1 888 6 view .LVU2722
 8467              	.LBE481:
 8468              	.LBE495:
 746:src/display.c **** #endif
 8469              		.loc 1 746 19 view .LVU2723
 8470 04a4 0B49     		ldr	r1, .L857+12
 8471 04a6 EFE5     		b	.L750
 8472              	.LVL950:
 8473              	.L845:
 794:src/display.c **** 	    p = scopy(p, q);
 8474              		.loc 1 794 6 is_stmt 1 view .LVU2724
 795:src/display.c **** 	    //	    goto no_copy;
 8475              		.loc 1 795 6 view .LVU2725
 795:src/display.c **** 	    //	    goto no_copy;
 8476              		.loc 1 795 10 is_stmt 0 view .LVU2726
 8477 04a8 1049     		ldr	r1, .L857+36
 8478 04aa 3046     		mov	r0, r6
 8479 04ac FFF7FEFF 		bl	scopy
 8480              	.LVL951:
 8481 04b0 8046     		mov	r8, r0
 8482              	.LVL952:
 795:src/display.c **** 	    //	    goto no_copy;
 8483              		.loc 1 795 10 view .LVU2727
 8484 04b2 11E6     		b	.L754
 8485              	.LVL953:
 8486              	.L834:
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8487              		.loc 1 681 4 is_stmt 1 view .LVU2728
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8488              		.loc 1 681 11 is_stmt 0 view .LVU2729
 8489 04b4 0293     		str	r3, [sp, #8]
 681:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8490              		.loc 1 681 27 is_stmt 1 view .LVU2730
 8491 04b6 01E7     		b	.L783
 8492              	.LVL954:
 8493              	.L787:
 725:src/display.c **** 	  }
ARM GAS  /tmp/cchyQ5Gz.s 			page 257


 8494              		.loc 1 725 8 is_stmt 0 view .LVU2731
 8495 04b8 0349     		ldr	r1, .L857
 8496 04ba BAE7     		b	.L749
 8497              	.LVL955:
 8498              	.L767:
 8499              	.LBB496:
 870:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8500              		.loc 1 870 4 discriminator 7 view .LVU2732
 8501 04bc D9F80010 		ldr	r1, [r9]
 8502 04c0 4DE6     		b	.L769
 8503              	.LVL956:
 8504              	.L795:
 8505              	.LBB482:
 909:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8506              		.loc 1 909 25 view .LVU2733
 8507 04c2 3E27     		movs	r7, #62
 8508              	.LVL957:
 909:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8509              		.loc 1 909 25 view .LVU2734
 8510 04c4 78E6     		b	.L776
 8511              	.L858:
 8512 04c6 00BF     		.align	2
 8513              	.L857:
 8514 04c8 08000000 		.word	.LC5
 8515 04cc 00000000 		.word	StateWhileOn
 8516 04d0 00000000 		.word	.LANCHOR18
 8517 04d4 14000000 		.word	.LC8
 8518 04d8 00000000 		.word	RectPolConv
 8519 04dc 04000000 		.word	.LC4
 8520 04e0 0C000000 		.word	.LC6
 8521 04e4 34000000 		.word	.LC13
 8522 04e8 00000000 		.word	.LANCHOR17
 8523 04ec 38000000 		.word	.LC14
 8524              	.LBE482:
 8525              	.LBE496:
 8526              		.cfi_endproc
 8527              	.LFE16:
 8529              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8530              		.align	2
 8531              	.LC18:
 8532 0000 0D00     		.ascii	"\015\000"
 8533 0002 0000     		.align	2
 8534              	.LC19:
 8535 0004 060600   		.ascii	"\006\006\000"
 8536 0007 00       		.align	2
 8537              	.LC21:
 8538 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8538      492C2057 
 8538      77414C74 
 8538      4500
 8539 0016 0000     		.align	2
 8540              	.LC22:
 8541 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8541      2055204C 
 8541      20492C20 
 8541      20572041 
 8541      204C2054 
ARM GAS  /tmp/cchyQ5Gz.s 			page 258


 8542 0032 0000     		.align	2
 8543              	.LC23:
 8544 0034 2000     		.ascii	" \000"
 8545 0036 0000     		.align	2
 8546              	.LC24:
 8547 0038 48595000 		.ascii	"HYP\000"
 8548              		.align	2
 8549              	.LC27:
 8550 003c 7F060600 		.ascii	"\177\006\006\000"
 8551              		.align	2
 8552              	.LC28:
 8553 0040 3020746F 		.ascii	"0 to 255\000"
 8553      20323535 
 8553      00
 8554 0049 000000   		.align	2
 8555              	.LC29:
 8556 004c 46726565 		.ascii	"Free:\000"
 8556      3A00
 8557 0052 0000     		.align	2
 8558              	.LC30:
 8559 0054 202C2046 		.ascii	" , FL. \000"
 8559      4C2E2000 
 8560              		.align	2
 8561              	.LC31:
 8562 005c 52656773 		.ascii	"Regs:\000"
 8562      3A00
 8563 0062 0000     		.align	2
 8564              	.LC32:
 8565 0064 20910606 		.ascii	" \221\006\006+\000"
 8565      2B00
 8566 006a 0000     		.align	2
 8567              	.LC33:
 8568 006c 202C204C 		.ascii	" , Loc. \000"
 8568      6F632E20 
 8568      00
 8569 0075 000000   		.align	2
 8570              	.LC34:
 8571 0078 464C2000 		.ascii	"FL \000"
 8572              		.align	2
 8573              	.LC35:
 8574 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8574      06413A44 
 8574      064C494A 
 8574      4B00
 8575 008a 0000     		.align	2
 8576              	.LC36:
 8577 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8577      302D2E31 
 8577      3500
 8578 0096 0000     		.align	2
 8579              	.LC37:
 8580 0098 43414C4C 		.ascii	"CALLS\000"
 8580      5300
 8581 009e 0000     		.align	2
 8582              	.LC38:
 8583 00a0 52656720 		.ascii	"Reg \000"
 8583      00
ARM GAS  /tmp/cchyQ5Gz.s 			page 259


 8584 00a5 000000   		.align	2
 8585              	.LC39:
 8586 00a8 00       		.ascii	"\000"
 8587 00a9 000000   		.align	2
 8588              	.LC40:
 8589 00ac 202D2D2D 		.ascii	" ---\000"
 8589      00
 8590 00b1 000000   		.align	2
 8591              	.LC26:
 8592 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8592      093E0A00 
 8593              		.align	2
 8594              	.LC25:
 8595 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8595      41424344 
 8595      4C494A4B 
 8595      00
 8596              		.section	.text.display,"ax",%progbits
 8597              		.align	1
 8598              		.p2align 2,,3
 8599              		.global	display
 8600              		.syntax unified
 8601              		.thumb
 8602              		.thumb_func
 8603              		.fpu fpv4-sp-d16
 8605              	display:
 8606              	.LFB34:
2588:src/display.c **** 	int i, j;
 8607              		.loc 1 2588 26 is_stmt 1 view -0
 8608              		.cfi_startproc
 8609              		@ args = 0, pretend = 0, frame = 168
 8610              		@ frame_needed = 0, uses_anonymous_args = 0
2589:src/display.c **** 	char buf[40], *bp = buf;
 8611              		.loc 1 2589 2 view .LVU2736
2590:src/display.c **** 	const char *p;
 8612              		.loc 1 2590 2 view .LVU2737
2588:src/display.c **** 	int i, j;
 8613              		.loc 1 2588 26 is_stmt 0 view .LVU2738
 8614 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8615              		.cfi_def_cfa_offset 36
 8616              		.cfi_offset 4, -36
 8617              		.cfi_offset 5, -32
 8618              		.cfi_offset 6, -28
 8619              		.cfi_offset 7, -24
 8620              		.cfi_offset 8, -20
 8621              		.cfi_offset 9, -16
 8622              		.cfi_offset 10, -12
 8623              		.cfi_offset 11, -8
 8624              		.cfi_offset 14, -4
2593:src/display.c **** 	int skip = 0;
 8625              		.loc 1 2593 24 view .LVU2739
 8626 0004 BC4C     		ldr	r4, .L1180
2598:src/display.c **** 	if (State2.disp_freeze) {
 8627              		.loc 1 2598 16 view .LVU2740
 8628 0006 DFF820A3 		ldr	r10, .L1180+48
2593:src/display.c **** 	int skip = 0;
 8629              		.loc 1 2593 24 view .LVU2741
ARM GAS  /tmp/cchyQ5Gz.s 			page 260


 8630 000a 94F80EB0 		ldrb	fp, [r4, #14]	@ zero_extendqisi2
2588:src/display.c **** 	int i, j;
 8631              		.loc 1 2588 26 view .LVU2742
 8632 000e ABB0     		sub	sp, sp, #172
 8633              		.cfi_def_cfa_offset 208
 8634              	.LVL958:
2591:src/display.c **** 	int annuc = 0;
 8635              		.loc 1 2591 2 is_stmt 1 view .LVU2743
2592:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8636              		.loc 1 2592 2 view .LVU2744
2593:src/display.c **** 	int skip = 0;
 8637              		.loc 1 2593 2 view .LVU2745
2594:src/display.c **** 	int x_disp = 0;
 8638              		.loc 1 2594 2 view .LVU2746
2595:src/display.c **** 	const int shift = cur_shift();
 8639              		.loc 1 2595 2 view .LVU2747
2596:src/display.c **** 
 8640              		.loc 1 2596 2 view .LVU2748
2596:src/display.c **** 
 8641              		.loc 1 2596 20 is_stmt 0 view .LVU2749
 8642 0010 FFF7FEFF 		bl	cur_shift
 8643              	.LVL959:
2599:src/display.c **** 	  State2.disp_freeze = 0;
 8644              		.loc 1 2599 6 view .LVU2750
 8645 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2598:src/display.c **** 	if (State2.disp_freeze) {
 8646              		.loc 1 2598 16 view .LVU2751
 8647 0016 0022     		movs	r2, #0
 8648              	.LVL960:
2598:src/display.c **** 	if (State2.disp_freeze) {
 8649              		.loc 1 2598 2 is_stmt 1 view .LVU2752
2599:src/display.c **** 	  State2.disp_freeze = 0;
 8650              		.loc 1 2599 5 is_stmt 0 view .LVU2753
 8651 0018 13F01007 		ands	r7, r3, #16
2598:src/display.c **** 	if (State2.disp_freeze) {
 8652              		.loc 1 2598 16 view .LVU2754
 8653 001c AAF80020 		strh	r2, [r10]	@ movhi
2599:src/display.c **** 	  State2.disp_freeze = 0;
 8654              		.loc 1 2599 2 is_stmt 1 view .LVU2755
2599:src/display.c **** 	  State2.disp_freeze = 0;
 8655              		.loc 1 2599 5 is_stmt 0 view .LVU2756
 8656 0020 40F0EE80 		bne	.L1141
2609:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8657              		.loc 1 2609 2 is_stmt 1 view .LVU2757
2609:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8658              		.loc 1 2609 6 is_stmt 0 view .LVU2758
 8659 0024 B54B     		ldr	r3, .L1180+4
 8660 0026 1D68     		ldr	r5, [r3]
2609:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8661              		.loc 1 2609 5 view .LVU2759
 8662 0028 002D     		cmp	r5, #0
 8663 002a 40F08480 		bne	.L1142
2628:src/display.c **** #  endif
 8664              		.loc 1 2628 2 is_stmt 1 view .LVU2760
2628:src/display.c **** #  endif
 8665              		.loc 1 2628 33 is_stmt 0 view .LVU2761
 8666 002e DFF8F492 		ldr	r9, .L1180+44
ARM GAS  /tmp/cchyQ5Gz.s 			page 261


 8667 0032 D9F80030 		ldr	r3, [r9]
 8668 0036 0646     		mov	r6, r0
 8669 0038 93F8EA87 		ldrb	r8, [r3, #2026]	@ zero_extendqisi2
2634:src/display.c **** 
 8670              		.loc 1 2634 2 view .LVU2762
 8671 003c FFF7FEFF 		bl	reset_disp
 8672              	.LVL961:
2637:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8673              		.loc 1 2637 2 view .LVU2763
 8674 0040 20A8     		add	r0, sp, #128
 8675              	.LVL962:
2637:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8676              		.loc 1 2637 2 view .LVU2764
 8677 0042 2822     		movs	r2, #40
 8678 0044 2946     		mov	r1, r5
 8679 0046 FFF7FEFF 		bl	xset
 8680              	.LVL963:
2643:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8681              		.loc 1 2643 6 view .LVU2765
 8682 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2643:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8683              		.loc 1 2643 5 view .LVU2766
 8684 004c D806     		lsls	r0, r3, #27
2628:src/display.c **** #  endif
 8685              		.loc 1 2628 12 view .LVU2767
 8686 004e C8F38008 		ubfx	r8, r8, #2, #1
 8687              	.LVL964:
2634:src/display.c **** 
 8688              		.loc 1 2634 2 is_stmt 1 view .LVU2768
2637:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8689              		.loc 1 2637 2 view .LVU2769
2643:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8690              		.loc 1 2643 2 view .LVU2770
2643:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8691              		.loc 1 2643 5 is_stmt 0 view .LVU2771
 8692 0052 00F16D81 		bmi	.L1143
2655:src/display.c **** 	  if (yreg_enabled) {
 8693              		.loc 1 2655 9 is_stmt 1 view .LVU2772
2655:src/display.c **** 	  if (yreg_enabled) {
 8694              		.loc 1 2655 13 is_stmt 0 view .LVU2773
 8695 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2655:src/display.c **** 	  if (yreg_enabled) {
 8696              		.loc 1 2655 12 view .LVU2774
 8697 0058 5107     		lsls	r1, r2, #29
 8698 005a 00F0DB80 		beq	.L867
2656:src/display.c **** 	    set_status_top(S_SURE);
 8699              		.loc 1 2656 4 is_stmt 1 view .LVU2775
2656:src/display.c **** 	    set_status_top(S_SURE);
 8700              		.loc 1 2656 7 is_stmt 0 view .LVU2776
 8701 005e B8F1000F 		cmp	r8, #0
 8702 0062 00F0AF81 		beq	.L868
2657:src/display.c **** 	    no_status_top = 1;
 8703              		.loc 1 2657 6 is_stmt 1 view .LVU2777
 8704              	.LVL965:
 8705              	.LBB556:
 8706              	.LBI556:
3503:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/cchyQ5Gz.s 			page 262


 8707              		.loc 1 3503 19 view .LVU2778
 8708              	.LBB557:
3504:src/display.c **** 	if (State2.runmode) {
 8709              		.loc 1 3504 2 view .LVU2779
3504:src/display.c **** 	if (State2.runmode) {
 8710              		.loc 1 3504 5 is_stmt 0 view .LVU2780
 8711 0066 BAF90030 		ldrsh	r3, [r10]
 8712 006a 13B9     		cbnz	r3, .L870
 8713 006c A448     		ldr	r0, .L1180+8
 8714 006e FFF7FEFF 		bl	set_status_top.part.0
 8715              	.LVL966:
 8716              	.L870:
3504:src/display.c **** 	if (State2.runmode) {
 8717              		.loc 1 3504 5 view .LVU2781
 8718              	.LBE557:
 8719              	.LBE556:
2658:src/display.c **** 	    annuc = 1;
 8720              		.loc 1 2658 6 is_stmt 1 view .LVU2782
2658:src/display.c **** 	    annuc = 1;
 8721              		.loc 1 2658 20 is_stmt 0 view .LVU2783
 8722 0072 0125     		movs	r5, #1
 8723 0074 AAF80050 		strh	r5, [r10]	@ movhi
2659:src/display.c **** 	  }
 8724              		.loc 1 2659 6 is_stmt 1 view .LVU2784
 8725              	.LVL967:
2882:src/display.c ****       nostk:
 8726              		.loc 1 2882 2 view .LVU2785
 8727 0078 FFF7FEFF 		bl	show_stack
 8728              	.LVL968:
2884:src/display.c **** 	if (!skip) {
 8729              		.loc 1 2884 2 view .LVU2786
 8730 007c A14B     		ldr	r3, .L1180+12
 8731 007e A24F     		ldr	r7, .L1180+16
 8732 0080 0193     		str	r3, [sp, #4]
 8733 0082 FFF7FEFF 		bl	show_flags
 8734              	.LVL969:
2885:src/display.c **** 	  if (State2.runmode) {
 8735              		.loc 1 2885 2 view .LVU2787
 8736              	.L871:
2886:src/display.c **** 	  only_update_x:
 8737              		.loc 1 2886 4 view .LVU2788
2886:src/display.c **** 	  only_update_x:
 8738              		.loc 1 2886 8 is_stmt 0 view .LVU2789
 8739 0086 A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
2886:src/display.c **** 	  only_update_x:
 8740              		.loc 1 2886 7 view .LVU2790
 8741 0088 16F04006 		ands	r6, r6, #64
 8742 008c 5FD1     		bne	.L864
 8743              	.LBB558:
2904:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8744              		.loc 1 2904 6 is_stmt 1 view .LVU2791
2904:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8745              		.loc 1 2904 24 is_stmt 0 view .LVU2792
 8746 008e D9F80030 		ldr	r3, [r9]
2908:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8747              		.loc 1 2908 6 view .LVU2793
 8748 0092 DFF89892 		ldr	r9, .L1180+52
ARM GAS  /tmp/cchyQ5Gz.s 			page 263


2904:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8749              		.loc 1 2904 19 view .LVU2794
 8750 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 8751              	.LVL970:
2905:src/display.c **** 	    const int n = nLIB(pc);
 8752              		.loc 1 2905 6 is_stmt 1 view .LVU2795
2905:src/display.c **** 	    const int n = nLIB(pc);
 8753              		.loc 1 2905 25 is_stmt 0 view .LVU2796
 8754 009a 5846     		mov	r0, fp
 8755 009c FFF7FEFF 		bl	user_pc
 8756              	.LVL971:
2907:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8757              		.loc 1 2907 6 view .LVU2797
 8758 00a0 2822     		movs	r2, #40
 8759 00a2 3146     		mov	r1, r6
2905:src/display.c **** 	    const int n = nLIB(pc);
 8760              		.loc 1 2905 25 view .LVU2798
 8761 00a4 8046     		mov	r8, r0
2907:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8762              		.loc 1 2907 6 view .LVU2799
 8763 00a6 20A8     		add	r0, sp, #128
 8764              	.LVL972:
2906:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8765              		.loc 1 2906 6 is_stmt 1 view .LVU2800
2907:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8766              		.loc 1 2907 6 is_stmt 0 view .LVU2801
 8767 00a8 FFF7FEFF 		bl	xset
 8768              	.LVL973:
2906:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8769              		.loc 1 2906 20 view .LVU2802
 8770 00ac 4FEA9B3B 		lsr	fp, fp, #14
 8771              	.LVL974:
2907:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8772              		.loc 1 2907 6 is_stmt 1 view .LVU2803
2908:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8773              		.loc 1 2908 6 view .LVU2804
 8774 00b0 D9F80000 		ldr	r0, [r9]
 8775 00b4 3246     		mov	r2, r6
 8776 00b6 0121     		movs	r1, #1
 8777 00b8 FFF7FEFF 		bl	set_exp
 8778              	.LVL975:
2909:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8779              		.loc 1 2909 6 view .LVU2805
 8780 00bc BBF1000F 		cmp	fp, #0
 8781 00c0 40F08B81 		bne	.L1144
 8782 00c4 9149     		ldr	r1, .L1180+20
 8783 00c6 20A8     		add	r0, sp, #128
 8784 00c8 FFF7FEFF 		bl	scopy_spc
 8785              	.LVL976:
 8786 00cc 0322     		movs	r2, #3
 8787 00ce 4146     		mov	r1, r8
 8788 00d0 FFF7FEFF 		bl	num_arg_0
 8789              	.LVL977:
2911:src/display.c **** #ifndef REALBUILD
 8790              		.loc 1 2911 6 view .LVU2806
 8791 00d4 0921     		movs	r1, #9
 8792 00d6 20A8     		add	r0, sp, #128
ARM GAS  /tmp/cchyQ5Gz.s 			page 264


 8793 00d8 FFF7FEFF 		bl	set_digits_string
 8794              	.LVL978:
2913:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8795              		.loc 1 2913 6 view .LVU2807
 8796 00dc 5946     		mov	r1, fp
 8797 00de 2822     		movs	r2, #40
 8798 00e0 20A8     		add	r0, sp, #128
 8799 00e2 FFF7FEFF 		bl	xset
 8800              	.LVL979:
2914:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8801              		.loc 1 2914 6 view .LVU2808
 8802 00e6 5A46     		mov	r2, fp
 8803 00e8 0121     		movs	r1, #1
 8804 00ea D9F80000 		ldr	r0, [r9]
 8805 00ee FFF7FEFF 		bl	set_exp
 8806              	.LVL980:
2915:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8807              		.loc 1 2915 6 view .LVU2809
 8808 00f2 8749     		ldr	r1, .L1180+24
2909:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8809              		.loc 1 2909 6 is_stmt 0 view .LVU2810
 8810 00f4 4FF0030B 		mov	fp, #3
 8811              	.LVL981:
 8812              	.L999:
2915:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8813              		.loc 1 2915 6 discriminator 4 view .LVU2811
 8814 00f8 20A8     		add	r0, sp, #128
 8815 00fa FFF7FEFF 		bl	scopy_spc
 8816              	.LVL982:
 8817 00fe 4146     		mov	r1, r8
 8818 0100 5A46     		mov	r2, fp
 8819 0102 FFF7FEFF 		bl	num_arg_0
 8820              	.LVL983:
 8821              	.LBB559:
2918:src/display.c **** 	      char *l=LastDisplayedNumber;
 8822              		.loc 1 2918 8 is_stmt 1 discriminator 4 view .LVU2812
2919:src/display.c **** 	      *l++=' ';
 8823              		.loc 1 2919 8 discriminator 4 view .LVU2813
2920:src/display.c **** 	      while(*b) {
 8824              		.loc 1 2920 8 discriminator 4 view .LVU2814
2920:src/display.c **** 	      while(*b) {
 8825              		.loc 1 2920 12 is_stmt 0 discriminator 4 view .LVU2815
 8826 0106 834B     		ldr	r3, .L1180+28
2921:src/display.c **** 		*l++=*b++;
 8827              		.loc 1 2921 14 discriminator 4 view .LVU2816
 8828 0108 9DF88010 		ldrb	r1, [sp, #128]	@ zero_extendqisi2
2920:src/display.c **** 	      while(*b) {
 8829              		.loc 1 2920 12 discriminator 4 view .LVU2817
 8830 010c 2026     		movs	r6, #32
 8831 010e 1E70     		strb	r6, [r3]
2921:src/display.c **** 		*l++=*b++;
 8832              		.loc 1 2921 8 is_stmt 1 discriminator 4 view .LVU2818
2921:src/display.c **** 		*l++=*b++;
 8833              		.loc 1 2921 13 discriminator 4 view .LVU2819
 8834 0110 0029     		cmp	r1, #0
 8835 0112 00F0C382 		beq	.L1011
 8836 0116 0333     		adds	r3, r3, #3
ARM GAS  /tmp/cchyQ5Gz.s 			page 265


 8837 0118 20A8     		add	r0, sp, #128
 8838              	.LVL984:
 8839              	.L993:
2922:src/display.c **** 		*l++=' ';
 8840              		.loc 1 2922 3 view .LVU2820
2922:src/display.c **** 		*l++=' ';
 8841              		.loc 1 2922 7 is_stmt 0 view .LVU2821
 8842 011a 03F8021C 		strb	r1, [r3, #-2]
2923:src/display.c **** 	      }
 8843              		.loc 1 2923 3 is_stmt 1 view .LVU2822
 8844              	.LVL985:
2921:src/display.c **** 		*l++=*b++;
 8845              		.loc 1 2921 14 is_stmt 0 view .LVU2823
 8846 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8847              	.LVL986:
2923:src/display.c **** 	      }
 8848              		.loc 1 2923 7 view .LVU2824
 8849 0122 03F8016C 		strb	r6, [r3, #-1]
2921:src/display.c **** 		*l++=*b++;
 8850              		.loc 1 2921 13 is_stmt 1 view .LVU2825
 8851 0126 1A46     		mov	r2, r3
 8852 0128 0233     		adds	r3, r3, #2
 8853              	.LVL987:
2921:src/display.c **** 		*l++=*b++;
 8854              		.loc 1 2921 13 is_stmt 0 view .LVU2826
 8855 012a 0029     		cmp	r1, #0
 8856 012c F5D1     		bne	.L993
 8857              	.LVL988:
 8858              	.L992:
2925:src/display.c **** 	    }
 8859              		.loc 1 2925 8 is_stmt 1 view .LVU2827
2925:src/display.c **** 	    }
 8860              		.loc 1 2925 10 is_stmt 0 view .LVU2828
 8861 012e 0023     		movs	r3, #0
 8862 0130 794E     		ldr	r6, .L1180+32
 8863 0132 1370     		strb	r3, [r2]
 8864              	.LVL989:
2925:src/display.c **** 	    }
 8865              		.loc 1 2925 10 view .LVU2829
 8866              	.LBE559:
 8867              	.LBE558:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8868              		.loc 1 2930 2 is_stmt 1 view .LVU2830
 8869 0134 21E0     		b	.L1140
 8870              	.LVL990:
 8871              	.L1142:
2616:src/display.c **** 
 8872              		.loc 1 2616 4 view .LVU2831
 8873 0136 FFF7FEFF 		bl	wait_for_display
 8874              	.LVL991:
2619:src/display.c **** 	    clr_dot(i);
 8875              		.loc 1 2619 4 view .LVU2832
2619:src/display.c **** 	    clr_dot(i);
 8876              		.loc 1 2619 16 view .LVU2833
 8877              	.L863:
2620:src/display.c **** 	  }
 8878              		.loc 1 2620 6 discriminator 3 view .LVU2834
ARM GAS  /tmp/cchyQ5Gz.s 			page 266


 8879 013a 3846     		mov	r0, r7
2619:src/display.c **** 	    clr_dot(i);
 8880              		.loc 1 2619 31 is_stmt 0 discriminator 3 view .LVU2835
 8881 013c 0137     		adds	r7, r7, #1
 8882              	.LVL992:
2620:src/display.c **** 	  }
 8883              		.loc 1 2620 6 discriminator 3 view .LVU2836
 8884 013e FFF7FEFF 		bl	clr_dot
 8885              	.LVL993:
2619:src/display.c **** 	    clr_dot(i);
 8886              		.loc 1 2619 31 is_stmt 1 discriminator 3 view .LVU2837
2619:src/display.c **** 	    clr_dot(i);
 8887              		.loc 1 2619 16 discriminator 3 view .LVU2838
2619:src/display.c **** 	    clr_dot(i);
 8888              		.loc 1 2619 4 is_stmt 0 discriminator 3 view .LVU2839
 8889 0142 832F     		cmp	r7, #131
 8890 0144 F9D1     		bne	.L863
 8891 0146 6F4B     		ldr	r3, .L1180+12
 8892 0148 6F4F     		ldr	r7, .L1180+16
 8893              	.LVL994:
2619:src/display.c **** 	    clr_dot(i);
 8894              		.loc 1 2619 4 discriminator 3 view .LVU2840
 8895 014a 0193     		str	r3, [sp, #4]
2592:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8896              		.loc 1 2592 6 view .LVU2841
 8897 014c 0025     		movs	r5, #0
 8898              	.LVL995:
 8899              	.L864:
2888:src/display.c **** 	    if (p == NULL || cata) {
 8900              		.loc 1 2888 6 is_stmt 1 view .LVU2842
2888:src/display.c **** 	    if (p == NULL || cata) {
 8901              		.loc 1 2888 10 is_stmt 0 view .LVU2843
 8902 014e FFF7FEFF 		bl	get_cmdline
 8903              	.LVL996:
2889:src/display.c **** 	      if (ShowRegister != -1) {
 8904              		.loc 1 2889 6 is_stmt 1 view .LVU2844
2889:src/display.c **** 	      if (ShowRegister != -1) {
 8905              		.loc 1 2889 9 is_stmt 0 view .LVU2845
 8906 0152 8146     		mov	r9, r0
 8907 0154 18B1     		cbz	r0, .L956
2889:src/display.c **** 	      if (ShowRegister != -1) {
 8908              		.loc 1 2889 20 discriminator 1 view .LVU2846
 8909 0156 BBF1000F 		cmp	fp, #0
 8910 015a 00F08380 		beq	.L957
 8911              	.L956:
2890:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8912              		.loc 1 2890 8 is_stmt 1 view .LVU2847
2890:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8913              		.loc 1 2890 25 is_stmt 0 view .LVU2848
 8914 015e 6E4E     		ldr	r6, .L1180+32
 8915 0160 3068     		ldr	r0, [r6]
 8916              	.LVL997:
2890:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8917              		.loc 1 2890 11 view .LVU2849
 8918 0162 421C     		adds	r2, r0, #1
 8919 0164 00F02481 		beq	.L958
2891:src/display.c **** 		format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/cchyQ5Gz.s 			page 267


 8920              		.loc 1 2891 3 is_stmt 1 view .LVU2850
2891:src/display.c **** 		format_reg(ShowRegister, CNULL);
 8921              		.loc 1 2891 39 is_stmt 0 view .LVU2851
 8922 0168 6428     		cmp	r0, #100
 8923 016a 00F0B180 		beq	.L1145
 8924              	.L959:
2892:src/display.c **** 	      }
 8925              		.loc 1 2892 3 is_stmt 1 view .LVU2852
 8926 016e 0021     		movs	r1, #0
 8927 0170 FFF7FEFF 		bl	format_reg
 8928              	.LVL998:
2900:src/display.c **** 	      goto finish;
 8929              		.loc 1 2900 6 view .LVU2853
2900:src/display.c **** 	      goto finish;
 8930              		.loc 1 2900 9 is_stmt 0 view .LVU2854
 8931 0174 614B     		ldr	r3, .L1180+4
 8932 0176 1B68     		ldr	r3, [r3]
 8933 0178 73BB     		cbnz	r3, .L961
 8934              	.LVL999:
 8935              	.L1140:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8936              		.loc 1 2930 2 view .LVU2855
 8937 017a FFF7FEFF 		bl	set_annunciators
 8938              	.LVL1000:
2931:src/display.c **** 	  ShowRPN = 0;
 8939              		.loc 1 2931 2 is_stmt 1 view .LVU2856
 8940              	.L866:
2932:src/display.c **** 	  dot(RPN, 0);
 8941              		.loc 1 2932 4 view .LVU2857
2932:src/display.c **** 	  dot(RPN, 0);
 8942              		.loc 1 2932 12 is_stmt 0 view .LVU2858
 8943 017e DFF89C81 		ldr	r8, .L1180+36
 8944 0182 0023     		movs	r3, #0
 8945              	.LBB561:
 8946              	.LBB562:
 339:src/display.c **** }
 8947              		.loc 1 339 8 view .LVU2859
 8948 0184 8D20     		movs	r0, #141
 8949              	.LBE562:
 8950              	.LBE561:
2932:src/display.c **** 	  dot(RPN, 0);
 8951              		.loc 1 2932 12 view .LVU2860
 8952 0186 C8F80030 		str	r3, [r8]
2933:src/display.c **** 	}
 8953              		.loc 1 2933 4 is_stmt 1 view .LVU2861
 8954              	.LVL1001:
 8955              	.LBB564:
 8956              	.LBI561:
 337:src/display.c ****   if (on)	set_dot(n);
 8957              		.loc 1 337 6 view .LVU2862
 8958              	.LBB563:
 338:src/display.c ****   else	clr_dot(n);
 8959              		.loc 1 338 3 view .LVU2863
 339:src/display.c **** }
 8960              		.loc 1 339 8 view .LVU2864
 8961 018a FFF7FEFF 		bl	clr_dot
 8962              	.LVL1002:
ARM GAS  /tmp/cchyQ5Gz.s 			page 268


 8963              	.L994:
 339:src/display.c **** }
 8964              		.loc 1 339 8 is_stmt 0 view .LVU2865
 8965              	.LBE563:
 8966              	.LBE564:
2936:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8967              		.loc 1 2936 2 is_stmt 1 view .LVU2866
2937:src/display.c **** 
 8968              		.loc 1 2937 4 is_stmt 0 view .LVU2867
 8969 018e D8F80030 		ldr	r3, [r8]
 8970 0192 002B     		cmp	r3, #0
 8971 0194 40F0AE80 		bne	.L1012
2936:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8972              		.loc 1 2936 31 view .LVU2868
 8973 0198 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8974 019a 12F04003 		ands	r3, r2, #64
 8975 019e 08D0     		beq	.L995
2937:src/display.c **** 
 8976              		.loc 1 2937 8 view .LVU2869
 8977 01a0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2937:src/display.c **** 
 8978              		.loc 1 2937 4 view .LVU2870
 8979 01a2 1B07     		lsls	r3, r3, #28
 8980 01a4 40F1EE80 		bpl	.L1014
2937:src/display.c **** 
 8981              		.loc 1 2937 30 discriminator 3 view .LVU2871
 8982 01a8 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8983 01aa 012B     		cmp	r3, #1
 8984 01ac 01D0     		beq	.L995
2937:src/display.c **** 
 8985              		.loc 1 2937 60 discriminator 5 view .LVU2872
 8986 01ae C2F38003 		ubfx	r3, r2, #2, #1
 8987              	.L995:
2936:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8988              		.loc 1 2936 19 discriminator 9 view .LVU2873
 8989 01b2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8990 01b4 63F34512 		bfi	r2, r3, #5, #1
 8991 01b8 E275     		strb	r2, [r4, #23]
2940:src/display.c **** 	  annunciators();
 8992              		.loc 1 2940 2 is_stmt 1 discriminator 9 view .LVU2874
2940:src/display.c **** 	  annunciators();
 8993              		.loc 1 2940 5 is_stmt 0 discriminator 9 view .LVU2875
 8994 01ba 002D     		cmp	r5, #0
 8995 01bc 00F09480 		beq	.L996
2940:src/display.c **** 	  annunciators();
 8996              		.loc 1 2940 36 discriminator 1 view .LVU2876
 8997 01c0 D3B2     		uxtb	r3, r2
2940:src/display.c **** 	  annunciators();
 8998              		.loc 1 2940 13 discriminator 1 view .LVU2877
 8999 01c2 03F02103 		and	r3, r3, #33
 9000 01c6 202B     		cmp	r3, #32
 9001 01c8 00F08E80 		beq	.L996
 9002              	.L997:
2941:src/display.c ****  	State2.hms = 0;
 9003              		.loc 1 2941 4 is_stmt 1 view .LVU2878
 9004 01cc FFF7FEFF 		bl	annunciators
 9005              	.LVL1003:
ARM GAS  /tmp/cchyQ5Gz.s 			page 269


 9006              	.L998:
2942:src/display.c **** #else
 9007              		.loc 1 2942 3 view .LVU2879
2942:src/display.c **** #else
 9008              		.loc 1 2942 14 is_stmt 0 view .LVU2880
 9009 01d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9010 01d2 6FF30003 		bfc	r3, #0, #1
 9011 01d6 E375     		strb	r3, [r4, #23]
 9012              	.L961:
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9013              		.loc 1 2949 2 is_stmt 1 view .LVU2881
2950:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9014              		.loc 1 2950 2 view .LVU2882
2951:src/display.c **** 	State2.invalid_disp = 0;
 9015              		.loc 1 2951 2 view .LVU2883
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9016              		.loc 1 2949 17 is_stmt 0 view .LVU2884
 9017 01d8 6369     		ldr	r3, [r4, #20]
2955:src/display.c **** 	State2.disp_small = 0;
 9018              		.loc 1 2955 11 view .LVU2885
 9019 01da 019A     		ldr	r2, [sp, #4]
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9020              		.loc 1 2949 17 view .LVU2886
 9021 01dc 23F02173 		bic	r3, r3, #42205184
 9022 01e0 23F48053 		bic	r3, r3, #4096
2951:src/display.c **** 	State2.invalid_disp = 0;
 9023              		.loc 1 2951 15 view .LVU2887
 9024 01e4 0025     		movs	r5, #0
2949:src/display.c **** 	State2.disp_as_alpha = 0;
 9025              		.loc 1 2949 17 view .LVU2888
 9026 01e6 6361     		str	r3, [r4, #20]
2953:src/display.c **** 	DispMsg = CNULL;
 9027              		.loc 1 2953 15 view .LVU2889
 9028 01e8 6423     		movs	r3, #100
2951:src/display.c **** 	State2.invalid_disp = 0;
 9029              		.loc 1 2951 15 view .LVU2890
 9030 01ea 6574     		strb	r5, [r4, #17]
2952:src/display.c **** 	ShowRegister = regX_idx;
 9031              		.loc 1 2952 2 is_stmt 1 view .LVU2891
2953:src/display.c **** 	DispMsg = CNULL;
 9032              		.loc 1 2953 2 view .LVU2892
2954:src/display.c **** 	DispPlot = 0;
 9033              		.loc 1 2954 10 is_stmt 0 view .LVU2893
 9034 01ec 3D60     		str	r5, [r7]
2955:src/display.c **** 	State2.disp_small = 0;
 9035              		.loc 1 2955 11 view .LVU2894
 9036 01ee 1580     		strh	r5, [r2]	@ movhi
2953:src/display.c **** 	DispMsg = CNULL;
 9037              		.loc 1 2953 15 view .LVU2895
 9038 01f0 3360     		str	r3, [r6]
2954:src/display.c **** 	DispPlot = 0;
 9039              		.loc 1 2954 2 is_stmt 1 view .LVU2896
2955:src/display.c **** 	State2.disp_small = 0;
 9040              		.loc 1 2955 2 view .LVU2897
2956:src/display.c **** 	finish_display();
 9041              		.loc 1 2956 2 view .LVU2898
2957:src/display.c **** 	no_status_top = 0;
ARM GAS  /tmp/cchyQ5Gz.s 			page 270


 9042              		.loc 1 2957 2 view .LVU2899
 9043 01f2 FFF7FEFF 		bl	finish_display
 9044              	.LVL1004:
2958:src/display.c **** #ifdef CONSOLE
 9045              		.loc 1 2958 2 view .LVU2900
2958:src/display.c **** #ifdef CONSOLE
 9046              		.loc 1 2958 16 is_stmt 0 view .LVU2901
 9047 01f6 AAF80050 		strh	r5, [r10]	@ movhi
2962:src/display.c **** #else
 9048              		.loc 1 2962 7 view .LVU2902
 9049 01fa 2BB0     		add	sp, sp, #172
 9050              		.cfi_remember_state
 9051              		.cfi_def_cfa_offset 36
 9052              		@ sp needed
 9053 01fc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9054              	.LVL1005:
 9055              	.L1141:
 9056              		.cfi_restore_state
2600:src/display.c **** 	  State2.disp_temp = 1;
 9057              		.loc 1 2600 4 is_stmt 1 view .LVU2903
2601:src/display.c **** #ifdef CONSOLE
 9058              		.loc 1 2601 4 view .LVU2904
2605:src/display.c **** 	  return;
 9059              		.loc 1 2605 12 is_stmt 0 view .LVU2905
 9060 0200 4649     		ldr	r1, .L1180+36
2600:src/display.c **** 	  State2.disp_temp = 1;
 9061              		.loc 1 2600 23 view .LVU2906
 9062 0202 23F03003 		bic	r3, r3, #48
 9063 0206 43F02003 		orr	r3, r3, #32
 9064 020a E375     		strb	r3, [r4, #23]
2605:src/display.c **** 	  return;
 9065              		.loc 1 2605 4 is_stmt 1 view .LVU2907
2605:src/display.c **** 	  return;
 9066              		.loc 1 2605 12 is_stmt 0 view .LVU2908
 9067 020c 0A60     		str	r2, [r1]
2606:src/display.c **** 	}
 9068              		.loc 1 2606 4 is_stmt 1 view .LVU2909
2962:src/display.c **** #else
 9069              		.loc 1 2962 7 is_stmt 0 view .LVU2910
 9070 020e 2BB0     		add	sp, sp, #172
 9071              		.cfi_remember_state
 9072              		.cfi_def_cfa_offset 36
 9073              		@ sp needed
 9074 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9075              	.LVL1006:
 9076              	.L867:
 9077              		.cfi_restore_state
2664:src/display.c **** 	  bp = scopy(bp, "HYP");
 9078              		.loc 1 2664 9 is_stmt 1 view .LVU2911
2664:src/display.c **** 	  bp = scopy(bp, "HYP");
 9079              		.loc 1 2664 12 is_stmt 0 view .LVU2912
 9080 0214 9A06     		lsls	r2, r3, #26
 9081 0216 00F1B780 		bmi	.L1146
2676:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9082              		.loc 1 2676 9 is_stmt 1 view .LVU2913
2676:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9083              		.loc 1 2676 12 is_stmt 0 view .LVU2914
ARM GAS  /tmp/cchyQ5Gz.s 			page 271


 9084 021a DF07     		lsls	r7, r3, #31
 9085 021c 00F14D81 		bmi	.L1147
2691:src/display.c **** 	  /* Commands with arguments */
 9086              		.loc 1 2691 9 is_stmt 1 view .LVU2915
2691:src/display.c **** 	  /* Commands with arguments */
 9087              		.loc 1 2691 13 is_stmt 0 view .LVU2916
 9088 0220 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2691:src/display.c **** 	  /* Commands with arguments */
 9089              		.loc 1 2691 12 view .LVU2917
 9090 0222 8806     		lsls	r0, r1, #26
 9091 0224 00F1B581 		bmi	.L1148
2729:src/display.c **** 	  *bp++ = 'x';
 9092              		.loc 1 2729 9 is_stmt 1 view .LVU2918
2729:src/display.c **** 	  *bp++ = 'x';
 9093              		.loc 1 2729 19 is_stmt 0 view .LVU2919
 9094 0228 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2729:src/display.c **** 	  *bp++ = 'x';
 9095              		.loc 1 2729 12 view .LVU2920
 9096 022a 072A     		cmp	r2, #7
 9097 022c 00F02181 		beq	.L888
2730:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9098              		.loc 1 2730 4 is_stmt 1 view .LVU2921
 9099              	.LVL1007:
2731:src/display.c **** 	  *bp++ = '_';
 9100              		.loc 1 2731 33 is_stmt 0 view .LVU2922
 9101 0230 3B4B     		ldr	r3, .L1180+40
2731:src/display.c **** 	  *bp++ = '_';
 9102              		.loc 1 2731 10 view .LVU2923
 9103 0232 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9104 0234 8DF88130 		strb	r3, [sp, #129]
2730:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9105              		.loc 1 2730 10 view .LVU2924
 9106 0238 7822     		movs	r2, #120
2732:src/display.c **** 	  *bp++ = '?';
 9107              		.loc 1 2732 10 view .LVU2925
 9108 023a 43F65F73 		movw	r3, #16223
2730:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9109              		.loc 1 2730 10 view .LVU2926
 9110 023e 8DF88020 		strb	r2, [sp, #128]
2731:src/display.c **** 	  *bp++ = '_';
 9111              		.loc 1 2731 4 is_stmt 1 view .LVU2927
 9112              	.LVL1008:
2732:src/display.c **** 	  *bp++ = '?';
 9113              		.loc 1 2732 4 view .LVU2928
2733:src/display.c **** 	  if (yreg_enabled) {
 9114              		.loc 1 2733 4 view .LVU2929
2732:src/display.c **** 	  *bp++ = '?';
 9115              		.loc 1 2732 10 is_stmt 0 view .LVU2930
 9116 0242 ADF88230 		strh	r3, [sp, #130]	@ movhi
2734:src/display.c **** 	    set_status_top(buf);
 9117              		.loc 1 2734 4 is_stmt 1 view .LVU2931
2734:src/display.c **** 	    set_status_top(buf);
 9118              		.loc 1 2734 7 is_stmt 0 view .LVU2932
 9119 0246 B8F1000F 		cmp	r8, #0
 9120 024a 40F0A880 		bne	.L1130
 9121              	.LVL1009:
 9122              	.L874:
ARM GAS  /tmp/cchyQ5Gz.s 			page 272


2674:src/display.c **** 	  }
 9123              		.loc 1 2674 6 is_stmt 1 view .LVU2933
 9124 024e 20A8     		add	r0, sp, #128
 9125 0250 FFF7FEFF 		bl	set_status
 9126              	.LVL1010:
2882:src/display.c ****       nostk:
 9127              		.loc 1 2882 2 view .LVU2934
 9128 0254 2B4B     		ldr	r3, .L1180+12
 9129 0256 0193     		str	r3, [sp, #4]
 9130 0258 2B4F     		ldr	r7, .L1180+16
 9131 025a FFF7FEFF 		bl	show_stack
 9132              	.LVL1011:
2884:src/display.c **** 	if (!skip) {
 9133              		.loc 1 2884 2 view .LVU2935
 9134 025e FFF7FEFF 		bl	show_flags
 9135              	.LVL1012:
2885:src/display.c **** 	  if (State2.runmode) {
 9136              		.loc 1 2885 2 view .LVU2936
 9137 0262 10E7     		b	.L871
 9138              	.LVL1013:
 9139              	.L957:
2897:src/display.c **** 	      x_disp = 1;
 9140              		.loc 1 2897 8 view .LVU2937
 9141              	.LBB565:
 9142              	.LBI565:
1243:src/display.c ****       int i;
 9143              		.loc 1 1243 17 view .LVU2938
 9144              	.LBB566:
1244:src/display.c ****       int gotdot = -1;
 9145              		.loc 1 1244 7 view .LVU2939
1245:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9146              		.loc 1 1245 7 view .LVU2940
1247:src/display.c **** #endif
 9147              		.loc 1 1247 7 view .LVU2941
1251:src/display.c **** #endif
 9148              		.loc 1 1251 7 view .LVU2942
1254:src/display.c **** 	SET_MANT_SIGN;
 9149              		.loc 1 1254 7 view .LVU2943
1254:src/display.c **** 	SET_MANT_SIGN;
 9150              		.loc 1 1254 10 is_stmt 0 view .LVU2944
 9151 0264 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 9152 0266 2D2A     		cmp	r2, #45
 9153 0268 00F0AE81 		beq	.L1149
 9154              	.LVL1014:
 9155              	.L965:
1259:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9156              		.loc 1 1259 7 is_stmt 1 view .LVU2945
1259:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9157              		.loc 1 1259 11 is_stmt 0 view .LVU2946
 9158 026c 2D4A     		ldr	r2, .L1180+44
 9159 026e 1268     		ldr	r2, [r2]
 9160 0270 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1259:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9161              		.loc 1 1259 10 view .LVU2947
 9162 0274 12F00106 		ands	r6, r2, #1
 9163 0278 00F03081 		beq	.L966
 9164              	.LVL1015:
ARM GAS  /tmp/cchyQ5Gz.s 			page 273


1260:src/display.c **** 	  set_dig(i, *p);
 9165              		.loc 1 1260 12 is_stmt 1 view .LVU2948
 9166 027c 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
1260:src/display.c **** 	  set_dig(i, *p);
 9167              		.loc 1 1260 8 is_stmt 0 view .LVU2949
 9168 0280 0026     		movs	r6, #0
1260:src/display.c **** 	  set_dig(i, *p);
 9169              		.loc 1 1260 2 view .LVU2950
 9170 0282 39B1     		cbz	r1, .L968
 9171              	.LVL1016:
 9172              	.L967:
1261:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9173              		.loc 1 1261 4 is_stmt 1 view .LVU2951
 9174 0284 3046     		mov	r0, r6
 9175 0286 FFF7FEFF 		bl	set_dig
 9176              	.LVL1017:
1262:src/display.c **** 	}
 9177              		.loc 1 1262 4 view .LVU2952
1260:src/display.c **** 	  set_dig(i, *p);
 9178              		.loc 1 1260 12 is_stmt 0 view .LVU2953
 9179 028a 19F8011F 		ldrb	r1, [r9, #1]!	@ zero_extendqisi2
 9180              	.LVL1018:
1262:src/display.c **** 	}
 9181              		.loc 1 1262 6 view .LVU2954
 9182 028e 0936     		adds	r6, r6, #9
 9183              	.LVL1019:
1260:src/display.c **** 	  set_dig(i, *p);
 9184              		.loc 1 1260 24 is_stmt 1 view .LVU2955
1260:src/display.c **** 	  set_dig(i, *p);
 9185              		.loc 1 1260 12 view .LVU2956
1260:src/display.c **** 	  set_dig(i, *p);
 9186              		.loc 1 1260 2 is_stmt 0 view .LVU2957
 9187 0290 0029     		cmp	r1, #0
 9188 0292 F7D1     		bne	.L967
 9189              	.LVL1020:
 9190              	.L968:
1264:src/display.c ****       } else {
 9191              		.loc 1 1264 2 is_stmt 1 view .LVU2958
 9192 0294 FFF7FEFF 		bl	carry_overflow
 9193              	.LVL1021:
1264:src/display.c ****       } else {
 9194              		.loc 1 1264 2 is_stmt 0 view .LVU2959
 9195              	.LBE566:
 9196              	.LBE565:
2900:src/display.c **** 	      goto finish;
 9197              		.loc 1 2900 6 is_stmt 1 view .LVU2960
2900:src/display.c **** 	      goto finish;
 9198              		.loc 1 2900 9 is_stmt 0 view .LVU2961
 9199 0298 184B     		ldr	r3, .L1180+4
 9200 029a 1B68     		ldr	r3, [r3]
 9201 029c 002B     		cmp	r3, #0
 9202 029e 40F0E680 		bne	.L1053
 9203              	.LVL1022:
 9204              	.L1138:
2900:src/display.c **** 	      goto finish;
 9205              		.loc 1 2900 9 view .LVU2962
 9206 02a2 1D4E     		ldr	r6, .L1180+32
ARM GAS  /tmp/cchyQ5Gz.s 			page 274


 9207              	.LVL1023:
 9208              	.L960:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9209              		.loc 1 2930 2 is_stmt 1 view .LVU2963
 9210 02a4 FFF7FEFF 		bl	set_annunciators
 9211              	.LVL1024:
2931:src/display.c **** 	  ShowRPN = 0;
 9212              		.loc 1 2931 2 view .LVU2964
2931:src/display.c **** 	  ShowRPN = 0;
 9213              		.loc 1 2931 50 is_stmt 0 view .LVU2965
 9214 02a8 3B68     		ldr	r3, [r7]
 9215 02aa 002B     		cmp	r3, #0
 9216 02ac 7FF467AF 		bne	.L866
2931:src/display.c **** 	  ShowRPN = 0;
 9217              		.loc 1 2931 69 discriminator 3 view .LVU2966
 9218 02b0 019B     		ldr	r3, [sp, #4]
 9219 02b2 B3F90030 		ldrsh	r3, [r3]
 9220 02b6 002B     		cmp	r3, #0
 9221 02b8 7FF461AF 		bne	.L866
2931:src/display.c **** 	  ShowRPN = 0;
 9222              		.loc 1 2931 81 discriminator 4 view .LVU2967
 9223 02bc A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9224 02be 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9225 02c0 03F00403 		and	r3, r3, #4
 9226 02c4 1343     		orrs	r3, r3, r2
 9227 02c6 7FF45AAF 		bne	.L866
 9228 02ca DFF85080 		ldr	r8, .L1180+36
 9229 02ce 5EE7     		b	.L994
 9230              	.LVL1025:
 9231              	.L1145:
2891:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9232              		.loc 1 2891 42 discriminator 1 view .LVU2968
 9233 02d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2891:src/display.c **** 		format_reg(ShowRegister, CNULL);
 9234              		.loc 1 2891 39 discriminator 1 view .LVU2969
 9235 02d2 13F00101 		ands	r1, r3, #1
 9236 02d6 7FF44AAF 		bne	.L959
 9237              	.LVL1026:
2892:src/display.c **** 	      }
 9238              		.loc 1 2892 3 is_stmt 1 view .LVU2970
 9239 02da FFF7FEFF 		bl	format_reg
 9240              	.LVL1027:
2900:src/display.c **** 	      goto finish;
 9241              		.loc 1 2900 6 view .LVU2971
2900:src/display.c **** 	      goto finish;
 9242              		.loc 1 2900 9 is_stmt 0 view .LVU2972
 9243 02de 074B     		ldr	r3, .L1180+4
 9244 02e0 1B68     		ldr	r3, [r3]
 9245 02e2 002B     		cmp	r3, #0
 9246 02e4 DED0     		beq	.L960
 9247 02e6 77E7     		b	.L961
 9248              	.LVL1028:
 9249              	.L996:
2940:src/display.c **** 	  annunciators();
 9250              		.loc 1 2940 52 discriminator 3 view .LVU2973
 9251 02e8 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9252 02ea 13F0C00F 		tst	r3, #192
ARM GAS  /tmp/cchyQ5Gz.s 			page 275


 9253 02ee 3FF46FAF 		beq	.L998
 9254 02f2 6BE7     		b	.L997
 9255              	.L1012:
 9256 02f4 0023     		movs	r3, #0
 9257 02f6 5CE7     		b	.L995
 9258              	.L1181:
 9259              		.align	2
 9260              	.L1180:
 9261 02f8 00000000 		.word	StateWhileOn
 9262 02fc 00000000 		.word	WasDataEntry
 9263 0300 00000000 		.word	.LANCHOR21
 9264 0304 00000000 		.word	DispPlot
 9265 0308 00000000 		.word	DispMsg
 9266 030c 00000000 		.word	.LANCHOR25
 9267 0310 00000000 		.word	.LANCHOR19
 9268 0314 00000000 		.word	LastDisplayedNumber
 9269 0318 00000000 		.word	ShowRegister
 9270 031c 00000000 		.word	ShowRPN
 9271 0320 B4000000 		.word	.LC26
 9272 0324 00000000 		.word	main_ram
 9273 0328 00000000 		.word	.LANCHOR18
 9274 032c 00000000 		.word	ProgFree
 9275              	.LVL1029:
 9276              	.L1143:
 9277              	.LBB588:
2644:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9278              		.loc 1 2644 4 is_stmt 1 view .LVU2974
2644:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9279              		.loc 1 2644 9 is_stmt 0 view .LVU2975
 9280 0330 B04B     		ldr	r3, .L1182
 9281 0332 CDF86650 		str	r5, [sp, #102]	@ unaligned
2645:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9282              		.loc 1 2645 4 is_stmt 1 view .LVU2976
2644:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9283              		.loc 1 2644 9 is_stmt 0 view .LVU2977
 9284 0336 93E80700 		ldm	r3, {r0, r1, r2}
 9285 033a 17AB     		add	r3, sp, #92
 9286 033c 03C3     		stmia	r3!, {r0, r1}
2645:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9287              		.loc 1 2645 4 view .LVU2978
 9288 033e 2946     		mov	r1, r5
 9289 0340 AD48     		ldr	r0, .L1182+4
2644:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9290              		.loc 1 2644 9 view .LVU2979
 9291 0342 1A80     		strh	r2, [r3]	@ movhi
2645:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9292              		.loc 1 2645 4 view .LVU2980
 9293 0344 FFF7FEFF 		bl	set_digits_string
 9294              	.LVL1030:
2646:src/display.c **** #ifndef REALBUILD
 9295              		.loc 1 2646 4 is_stmt 1 view .LVU2981
 9296              	.LBB589:
 9297              	.LBI589:
 405:src/display.c ****   if (res) *res++ = ch;
 9298              		.loc 1 405 14 view .LVU2982
 9299              	.LBB590:
 406:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/cchyQ5Gz.s 			page 276


 9300              		.loc 1 406 3 view .LVU2983
 407:src/display.c ****   return res;
 9301              		.loc 1 407 8 view .LVU2984
 9302 0348 7221     		movs	r1, #114
 9303 034a 6C20     		movs	r0, #108
 9304 034c FFF7FEFF 		bl	set_dig
 9305              	.LVL1031:
 408:src/display.c **** }
 9306              		.loc 1 408 3 view .LVU2985
 408:src/display.c **** }
 9307              		.loc 1 408 3 is_stmt 0 view .LVU2986
 9308              	.LBE590:
 9309              	.LBE589:
2648:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9310              		.loc 1 2648 4 is_stmt 1 view .LVU2987
 9311 0350 AA49     		ldr	r1, .L1182+8
 9312 0352 AB48     		ldr	r0, .L1182+12
 9313 0354 AB4F     		ldr	r7, .L1182+16
 9314 0356 AC4E     		ldr	r6, .L1182+20
 9315 0358 FFF7FEFF 		bl	scopy
 9316              	.LVL1032:
2649:src/display.c **** #endif
 9317              		.loc 1 2649 4 view .LVU2988
 9318 035c AB49     		ldr	r1, .L1182+24
 9319 035e AC48     		ldr	r0, .L1182+28
 9320 0360 FFF7FEFF 		bl	scopy
 9321              	.LVL1033:
2651:src/display.c **** 	  set_status(vers);
 9322              		.loc 1 2651 4 view .LVU2989
 9323 0364 AB49     		ldr	r1, .L1182+32
 9324 0366 0422     		movs	r2, #4
 9325 0368 0DF16500 		add	r0, sp, #101
 9326 036c FFF7FEFF 		bl	xcopy
 9327              	.LVL1034:
2652:src/display.c **** 	  skip = 1;
 9328              		.loc 1 2652 4 view .LVU2990
 9329 0370 17A8     		add	r0, sp, #92
 9330 0372 FFF7FEFF 		bl	set_status
 9331              	.LVL1035:
2653:src/display.c **** 	  goto nostk;
 9332              		.loc 1 2653 4 view .LVU2991
2654:src/display.c **** 	} else if (State2.confirm) {
 9333              		.loc 1 2654 4 view .LVU2992
2654:src/display.c **** 	} else if (State2.confirm) {
 9334              		.loc 1 2654 4 is_stmt 0 view .LVU2993
 9335              	.LBE588:
2884:src/display.c **** 	if (!skip) {
 9336              		.loc 1 2884 2 is_stmt 1 view .LVU2994
 9337 0376 A84B     		ldr	r3, .L1182+36
 9338 0378 0193     		str	r3, [sp, #4]
 9339 037a FFF7FEFF 		bl	show_flags
 9340              	.LVL1036:
2885:src/display.c **** 	  if (State2.runmode) {
 9341              		.loc 1 2885 2 view .LVU2995
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9342              		.loc 1 2930 2 view .LVU2996
 9343 037e FFF7FEFF 		bl	set_annunciators
ARM GAS  /tmp/cchyQ5Gz.s 			page 277


 9344              	.LVL1037:
2931:src/display.c **** 	  ShowRPN = 0;
 9345              		.loc 1 2931 2 view .LVU2997
 9346 0382 FCE6     		b	.L866
 9347              	.LVL1038:
 9348              	.L1014:
2931:src/display.c **** 	  ShowRPN = 0;
 9349              		.loc 1 2931 2 is_stmt 0 view .LVU2998
 9350 0384 0123     		movs	r3, #1
 9351 0386 14E7     		b	.L995
 9352              	.LVL1039:
 9353              	.L1146:
2665:src/display.c **** 	  if (! State2.dot)
 9354              		.loc 1 2665 4 is_stmt 1 view .LVU2999
2665:src/display.c **** 	  if (! State2.dot)
 9355              		.loc 1 2665 9 is_stmt 0 view .LVU3000
 9356 0388 A449     		ldr	r1, .L1182+40
 9357 038a 20A8     		add	r0, sp, #128
 9358              	.LVL1040:
2665:src/display.c **** 	  if (! State2.dot)
 9359              		.loc 1 2665 9 view .LVU3001
 9360 038c FFF7FEFF 		bl	scopy
 9361              	.LVL1041:
2666:src/display.c **** 	    *bp++ = '\235';
 9362              		.loc 1 2666 8 view .LVU3002
 9363 0390 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9364              	.LVL1042:
2666:src/display.c **** 	    *bp++ = '\235';
 9365              		.loc 1 2666 4 is_stmt 1 view .LVU3003
2666:src/display.c **** 	    *bp++ = '\235';
 9366              		.loc 1 2666 7 is_stmt 0 view .LVU3004
 9367 0392 5B06     		lsls	r3, r3, #25
 9368 0394 44D5     		bpl	.L1150
 9369              	.LVL1043:
 9370              	.L905:
2804:src/display.c **** 	    set_status_top(buf);
 9371              		.loc 1 2804 4 is_stmt 1 view .LVU3005
2804:src/display.c **** 	    set_status_top(buf);
 9372              		.loc 1 2804 7 is_stmt 0 view .LVU3006
 9373 0396 B8F1000F 		cmp	r8, #0
 9374 039a 3FF458AF 		beq	.L874
 9375              	.L1130:
2805:src/display.c **** 	    no_status_top = 1;
 9376              		.loc 1 2805 6 is_stmt 1 view .LVU3007
 9377              	.LVL1044:
 9378              	.LBB591:
 9379              	.LBI591:
3503:src/display.c **** 	if (no_status_top) return;
 9380              		.loc 1 3503 19 view .LVU3008
 9381              	.LBB592:
3504:src/display.c **** 	if (State2.runmode) {
 9382              		.loc 1 3504 2 view .LVU3009
3504:src/display.c **** 	if (State2.runmode) {
 9383              		.loc 1 3504 5 is_stmt 0 view .LVU3010
 9384 039e BAF90030 		ldrsh	r3, [r10]
 9385 03a2 002B     		cmp	r3, #0
 9386 03a4 7FF465AE 		bne	.L870
ARM GAS  /tmp/cchyQ5Gz.s 			page 278


 9387              	.LBE592:
 9388              	.LBE591:
 9389              	.LBB593:
 9390              	.LBB594:
 9391 03a8 20A8     		add	r0, sp, #128
 9392              	.LVL1045:
3504:src/display.c **** 	if (State2.runmode) {
 9393              		.loc 1 3504 5 view .LVU3011
 9394 03aa FFF7FEFF 		bl	set_status_top.part.0
 9395              	.LVL1046:
3504:src/display.c **** 	if (State2.runmode) {
 9396              		.loc 1 3504 5 view .LVU3012
 9397 03ae 60E6     		b	.L870
 9398              	.LVL1047:
 9399              	.L958:
3504:src/display.c **** 	if (State2.runmode) {
 9400              		.loc 1 3504 5 view .LVU3013
 9401              	.LBE594:
 9402              	.LBE593:
2895:src/display.c **** 	    } else {
 9403              		.loc 1 2895 3 is_stmt 1 view .LVU3014
 9404 03b0 9B48     		ldr	r0, .L1182+44
 9405 03b2 2421     		movs	r1, #36
 9406 03b4 FFF7FEFF 		bl	set_digits_string
 9407              	.LVL1048:
2900:src/display.c **** 	      goto finish;
 9408              		.loc 1 2900 6 view .LVU3015
2900:src/display.c **** 	      goto finish;
 9409              		.loc 1 2900 9 is_stmt 0 view .LVU3016
 9410 03b8 9A4B     		ldr	r3, .L1182+48
 9411 03ba 1B68     		ldr	r3, [r3]
 9412 03bc 002B     		cmp	r3, #0
 9413 03be 3FF4DCAE 		beq	.L1140
 9414 03c2 09E7     		b	.L961
 9415              	.LVL1049:
 9416              	.L868:
2662:src/display.c **** 	  }
 9417              		.loc 1 2662 6 is_stmt 1 view .LVU3017
 9418 03c4 944B     		ldr	r3, .L1182+36
 9419 03c6 9848     		ldr	r0, .L1182+52
 9420 03c8 0193     		str	r3, [sp, #4]
 9421 03ca 8E4F     		ldr	r7, .L1182+16
 9422 03cc FFF7FEFF 		bl	set_status
 9423              	.LVL1050:
2882:src/display.c ****       nostk:
 9424              		.loc 1 2882 2 view .LVU3018
 9425 03d0 FFF7FEFF 		bl	show_stack
 9426              	.LVL1051:
2884:src/display.c **** 	if (!skip) {
 9427              		.loc 1 2884 2 view .LVU3019
 9428 03d4 FFF7FEFF 		bl	show_flags
 9429              	.LVL1052:
2885:src/display.c **** 	  if (State2.runmode) {
 9430              		.loc 1 2885 2 view .LVU3020
 9431 03d8 55E6     		b	.L871
 9432              	.LVL1053:
 9433              	.L1144:
ARM GAS  /tmp/cchyQ5Gz.s 			page 279


 9434              	.LBB595:
2909:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9435              		.loc 1 2909 6 is_stmt 0 discriminator 1 view .LVU3021
 9436 03da 9449     		ldr	r1, .L1182+56
 9437 03dc 0BEB8B03 		add	r3, fp, fp, lsl #2
2910:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9438              		.loc 1 2910 21 discriminator 1 view .LVU3022
 9439 03e0 0BF0010B 		and	fp, fp, #1
 9440              	.LVL1054:
2909:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9441              		.loc 1 2909 6 discriminator 1 view .LVU3023
 9442 03e4 1944     		add	r1, r1, r3
 9443 03e6 20A8     		add	r0, sp, #128
 9444 03e8 0BF1030B 		add	fp, fp, #3
 9445 03ec 0293     		str	r3, [sp, #8]
 9446 03ee FFF7FEFF 		bl	scopy_spc
 9447              	.LVL1055:
 9448 03f2 5A46     		mov	r2, fp
 9449 03f4 4146     		mov	r1, r8
 9450 03f6 FFF7FEFF 		bl	num_arg_0
 9451              	.LVL1056:
2911:src/display.c **** #ifndef REALBUILD
 9452              		.loc 1 2911 6 is_stmt 1 discriminator 1 view .LVU3024
 9453 03fa 0921     		movs	r1, #9
 9454 03fc 20A8     		add	r0, sp, #128
 9455 03fe FFF7FEFF 		bl	set_digits_string
 9456              	.LVL1057:
2913:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9457              		.loc 1 2913 6 discriminator 1 view .LVU3025
 9458 0402 2822     		movs	r2, #40
 9459 0404 3146     		mov	r1, r6
 9460 0406 20A8     		add	r0, sp, #128
 9461 0408 FFF7FEFF 		bl	xset
 9462              	.LVL1058:
2914:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9463              		.loc 1 2914 6 discriminator 1 view .LVU3026
 9464 040c 0121     		movs	r1, #1
 9465 040e D9F80000 		ldr	r0, [r9]
 9466 0412 3246     		mov	r2, r6
 9467 0414 FFF7FEFF 		bl	set_exp
 9468              	.LVL1059:
2915:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9469              		.loc 1 2915 6 discriminator 1 view .LVU3027
 9470 0418 8549     		ldr	r1, .L1182+60
 9471 041a 029B     		ldr	r3, [sp, #8]
 9472 041c 1944     		add	r1, r1, r3
 9473 041e 6BE6     		b	.L999
 9474              	.LVL1060:
 9475              	.L1150:
2915:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9476              		.loc 1 2915 6 is_stmt 0 discriminator 1 view .LVU3028
 9477              	.LBE595:
2667:src/display.c **** 	  if (yreg_enabled) {
 9478              		.loc 1 2667 6 is_stmt 1 view .LVU3029
2667:src/display.c **** 	  if (yreg_enabled) {
 9479              		.loc 1 2667 12 is_stmt 0 view .LVU3030
 9480 0420 9D23     		movs	r3, #157
ARM GAS  /tmp/cchyQ5Gz.s 			page 280


 9481 0422 0370     		strb	r3, [r0]
 9482 0424 B7E7     		b	.L905
 9483              	.LVL1061:
 9484              	.L981:
 9485              	.LBB596:
 9486              	.LBB581:
1357:src/display.c **** 	    gotdot = i;
 9487              		.loc 1 1357 4 is_stmt 1 view .LVU3031
1357:src/display.c **** 	    gotdot = i;
 9488              		.loc 1 1357 7 is_stmt 0 view .LVU3032
 9489 0426 3BEA2B0B 		bics	fp, fp, fp, asr #32
 9490 042a 28BF     		it	cs
 9491 042c C346     		movcs	fp, r8
 9492              	.LVL1062:
1359:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9493              		.loc 1 1359 4 is_stmt 1 view .LVU3033
1360:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9494              		.loc 1 1360 6 view .LVU3034
1360:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9495              		.loc 1 1360 13 is_stmt 0 view .LVU3035
 9496 042e ABF11B0B 		sub	fp, fp, #27
 9497              	.LVL1063:
1361:src/display.c **** 	      break;
 9498              		.loc 1 1361 6 is_stmt 1 view .LVU3036
1361:src/display.c **** 	      break;
 9499              		.loc 1 1361 9 is_stmt 0 view .LVU3037
 9500 0432 BBF1000F 		cmp	fp, #0
 9501 0436 10DD     		ble	.L970
1367:src/display.c **** 	  }
 9502              		.loc 1 1367 6 view .LVU3038
 9503 0438 DFF80C82 		ldr	r8, .L1182+84
 9504              	.LVL1064:
 9505              	.L986:
1364:src/display.c **** 	      break;
 9506              		.loc 1 1364 6 is_stmt 1 view .LVU3039
1367:src/display.c **** 	  }
 9507              		.loc 1 1367 6 view .LVU3040
 9508              	.LBB567:
 9509              	.LBB568:
 368:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9510              		.loc 1 368 3 view .LVU3041
 9511 043c 5846     		mov	r0, fp
 9512              	.LBE568:
 9513              	.LBE567:
1364:src/display.c **** 	      break;
 9514              		.loc 1 1364 9 is_stmt 0 view .LVU3042
 9515 043e 16B1     		cbz	r6, .L987
 9516              	.LVL1065:
1364:src/display.c **** 	      break;
 9517              		.loc 1 1364 27 view .LVU3043
 9518 0440 BBF1090F 		cmp	fp, #9
 9519 0444 09D0     		beq	.L970
 9520              	.L987:
1367:src/display.c **** 	  }
 9521              		.loc 1 1367 6 view .LVU3044
 9522 0446 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 9523              	.LVL1066:
ARM GAS  /tmp/cchyQ5Gz.s 			page 281


 9524              	.LBB570:
 9525              	.LBI567:
 365:src/display.c ****   if (sep == SEP_NONE)
 9526              		.loc 1 365 14 is_stmt 1 view .LVU3045
 9527              	.LBB569:
 366:src/display.c ****     return res;
 9528              		.loc 1 366 3 view .LVU3046
 366:src/display.c ****     return res;
 9529              		.loc 1 366 6 is_stmt 0 view .LVU3047
 9530 044a 09B1     		cbz	r1, .L988
 9531 044c FFF7FEFF 		bl	set_separator.part.0
 9532              	.LVL1067:
 9533              	.L988:
 366:src/display.c ****     return res;
 9534              		.loc 1 366 6 view .LVU3048
 9535              	.LBE569:
 9536              	.LBE570:
1359:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9537              		.loc 1 1359 4 is_stmt 1 view .LVU3049
1360:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9538              		.loc 1 1360 6 view .LVU3050
1360:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9539              		.loc 1 1360 13 is_stmt 0 view .LVU3051
 9540 0450 ABF11B0B 		sub	fp, fp, #27
 9541              	.LVL1068:
1361:src/display.c **** 	      break;
 9542              		.loc 1 1361 6 is_stmt 1 view .LVU3052
1361:src/display.c **** 	      break;
 9543              		.loc 1 1361 9 is_stmt 0 view .LVU3053
 9544 0454 BBF1000F 		cmp	fp, #0
 9545 0458 F0DC     		bgt	.L986
 9546              	.LVL1069:
 9547              	.L970:
1385:src/display.c **** 	    p++;
 9548              		.loc 1 1385 4 is_stmt 1 view .LVU3054
1385:src/display.c **** 	    p++;
 9549              		.loc 1 1385 7 is_stmt 0 view .LVU3055
 9550 045a 99F80020 		ldrb	r2, [r9]	@ zero_extendqisi2
 9551 045e 452A     		cmp	r2, #69
 9552 0460 00F06C81 		beq	.L1151
 9553              	.L989:
 9554              	.LVL1070:
1385:src/display.c **** 	    p++;
 9555              		.loc 1 1385 7 view .LVU3056
 9556              	.LBE581:
 9557              	.LBE596:
2900:src/display.c **** 	      goto finish;
 9558              		.loc 1 2900 6 is_stmt 1 view .LVU3057
2900:src/display.c **** 	      goto finish;
 9559              		.loc 1 2900 9 is_stmt 0 view .LVU3058
 9560 0464 6F4B     		ldr	r3, .L1182+48
 9561 0466 1B68     		ldr	r3, [r3]
 9562 0468 002B     		cmp	r3, #0
 9563 046a 3FF41AAF 		beq	.L1138
 9564              	.L1053:
 9565 046e 664E     		ldr	r6, .L1182+20
 9566 0470 B2E6     		b	.L961
ARM GAS  /tmp/cchyQ5Gz.s 			page 282


 9567              	.LVL1071:
 9568              	.L888:
2742:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9569              		.loc 1 2742 9 is_stmt 1 view .LVU3059
2742:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9570              		.loc 1 2742 12 is_stmt 0 view .LVU3060
 9571 0472 BBF1000F 		cmp	fp, #0
 9572 0476 40F01381 		bne	.L1152
2797:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9573              		.loc 1 2797 9 is_stmt 1 view .LVU3061
2797:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9574              		.loc 1 2797 12 is_stmt 0 view .LVU3062
 9575 047a 1807     		lsls	r0, r3, #28
 9576 047c 00F18A81 		bmi	.L1153
2812:src/display.c **** 	  show_status();
 9577              		.loc 1 2812 9 is_stmt 1 view .LVU3063
2812:src/display.c **** 	  show_status();
 9578              		.loc 1 2812 19 is_stmt 0 view .LVU3064
 9579 0480 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2812:src/display.c **** 	  show_status();
 9580              		.loc 1 2812 12 view .LVU3065
 9581 0482 002F     		cmp	r7, #0
 9582 0484 40F00782 		bne	.L1154
2815:src/display.c **** 	  show_label();
 9583              		.loc 1 2815 9 is_stmt 1 view .LVU3066
2815:src/display.c **** 	  show_label();
 9584              		.loc 1 2815 13 is_stmt 0 view .LVU3067
 9585 0488 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2815:src/display.c **** 	  show_label();
 9586              		.loc 1 2815 12 view .LVU3068
 9587 048a 5A07     		lsls	r2, r3, #29
 9588 048c 00F1D481 		bmi	.L1155
2818:src/display.c **** 	  show_registers();
 9589              		.loc 1 2818 9 is_stmt 1 view .LVU3069
2818:src/display.c **** 	  show_registers();
 9590              		.loc 1 2818 12 is_stmt 0 view .LVU3070
 9591 0490 1807     		lsls	r0, r3, #28
 9592 0492 00F1AF81 		bmi	.L1156
2828:src/display.c **** 	  if (DispMsg) { 
 9593              		.loc 1 2828 9 is_stmt 1 view .LVU3071
2828:src/display.c **** 	  if (DispMsg) { 
 9594              		.loc 1 2828 12 is_stmt 0 view .LVU3072
 9595 0496 4806     		lsls	r0, r1, #25
 9596 0498 40F17383 		bpl	.L939
2829:src/display.c **** 	    set_status(DispMsg);
 9597              		.loc 1 2829 4 is_stmt 1 view .LVU3073
2829:src/display.c **** 	    set_status(DispMsg);
 9598              		.loc 1 2829 8 is_stmt 0 view .LVU3074
 9599 049c 594F     		ldr	r7, .L1182+16
 9600 049e 3B68     		ldr	r3, [r7]
2829:src/display.c **** 	    set_status(DispMsg);
 9601              		.loc 1 2829 7 view .LVU3075
 9602 04a0 002B     		cmp	r3, #0
 9603 04a2 00F0B583 		beq	.L940
2830:src/display.c **** 	  } else if (DispPlot) {
 9604              		.loc 1 2830 6 is_stmt 1 view .LVU3076
 9605 04a6 1846     		mov	r0, r3
ARM GAS  /tmp/cchyQ5Gz.s 			page 283


 9606 04a8 FFF7FEFF 		bl	set_status
 9607              	.LVL1072:
2882:src/display.c ****       nostk:
 9608              		.loc 1 2882 2 view .LVU3077
 9609 04ac 5A4B     		ldr	r3, .L1182+36
 9610 04ae 0193     		str	r3, [sp, #4]
 9611 04b0 FFF7FEFF 		bl	show_stack
 9612              	.LVL1073:
2884:src/display.c **** 	if (!skip) {
 9613              		.loc 1 2884 2 view .LVU3078
 9614 04b4 FFF7FEFF 		bl	show_flags
 9615              	.LVL1074:
2885:src/display.c **** 	  if (State2.runmode) {
 9616              		.loc 1 2885 2 view .LVU3079
 9617 04b8 E5E5     		b	.L871
 9618              	.L1147:
2678:src/display.c **** 	  if (State2.numdigit > 0)
 9619              		.loc 1 2678 4 view .LVU3080
2678:src/display.c **** 	  if (State2.numdigit > 0)
 9620              		.loc 1 2678 9 is_stmt 0 view .LVU3081
 9621 04ba 2E22     		movs	r2, #46
 9622 04bc 5D49     		ldr	r1, .L1182+64
 9623 04be 20A8     		add	r0, sp, #128
 9624              	.LVL1075:
2678:src/display.c **** 	  if (State2.numdigit > 0)
 9625              		.loc 1 2678 9 view .LVU3082
 9626 04c0 FFF7FEFF 		bl	scopy_char
 9627              	.LVL1076:
2679:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9628              		.loc 1 2679 14 view .LVU3083
 9629 04c4 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2678:src/display.c **** 	  if (State2.numdigit > 0)
 9630              		.loc 1 2678 9 view .LVU3084
 9631 04c6 0346     		mov	r3, r0
 9632              	.LVL1077:
2679:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9633              		.loc 1 2679 4 is_stmt 1 view .LVU3085
2679:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9634              		.loc 1 2679 7 is_stmt 0 view .LVU3086
 9635 04c8 002A     		cmp	r2, #0
 9636 04ca 40F08E80 		bne	.L1157
 9637              	.L877:
2682:src/display.c **** 	  if (yreg_enabled) {
 9638              		.loc 1 2682 4 is_stmt 1 view .LVU3087
 9639              	.LVL1078:
2682:src/display.c **** 	  if (yreg_enabled) {
 9640              		.loc 1 2682 10 is_stmt 0 view .LVU3088
 9641 04ce 5F22     		movs	r2, #95
 9642 04d0 1A70     		strb	r2, [r3]
2683:src/display.c **** 	    set_status_top(buf);
 9643              		.loc 1 2683 4 is_stmt 1 view .LVU3089
2683:src/display.c **** 	    set_status_top(buf);
 9644              		.loc 1 2683 7 is_stmt 0 view .LVU3090
 9645 04d2 B8F1000F 		cmp	r8, #0
 9646 04d6 7FF462AF 		bne	.L1130
2683:src/display.c **** 	    set_status_top(buf);
 9647              		.loc 1 2683 7 view .LVU3091
ARM GAS  /tmp/cchyQ5Gz.s 			page 284


 9648 04da B8E6     		b	.L874
 9649              	.LVL1079:
 9650              	.L966:
 9651              	.LBB597:
 9652              	.LBB582:
1266:src/display.c **** 
 9653              		.loc 1 1266 2 is_stmt 1 view .LVU3092
 9654 04dc FFF7FEFF 		bl	set_separator_decimal_modes
 9655              	.LVL1080:
1268:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9656              		.loc 1 1268 2 view .LVU3093
1270:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9657              		.loc 1 1270 2 view .LVU3094
1270:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9658              		.loc 1 1270 5 is_stmt 0 view .LVU3095
 9659 04e0 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9660              	.LBB571:
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9661              		.loc 1 1277 15 view .LVU3096
 9662 04e2 99F800C0 		ldrb	ip, [r9]	@ zero_extendqisi2
 9663              	.LBE571:
1270:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9664              		.loc 1 1270 5 view .LVU3097
 9665 04e6 012A     		cmp	r2, #1
 9666 04e8 40F2D080 		bls	.L969
 9667              	.LVL1081:
 9668              	.LBB572:
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9669              		.loc 1 1277 14 is_stmt 1 view .LVU3098
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9670              		.loc 1 1277 4 is_stmt 0 view .LVU3099
 9671 04ec BCF1000F 		cmp	ip, #0
 9672 04f0 B3D0     		beq	.L970
 9673 04f2 09F10102 		add	r2, r9, #1
 9674 04f6 6046     		mov	r0, ip
 9675              	.LBE572:
1245:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9676              		.loc 1 1245 11 view .LVU3100
 9677 04f8 4FF0FF3E 		mov	lr, #-1
 9678 04fc 6FEA0906 		mvn	r6, r9
 9679              	.LVL1082:
 9680              	.L972:
 9681              	.LBB573:
1278:src/display.c **** 	      gotdot = j;
 9682              		.loc 1 1278 9 view .LVU3101
 9683 0500 2E28     		cmp	r0, #46
 9684 0502 06EB0201 		add	r1, r6, r2
 9685              	.LVL1083:
1278:src/display.c **** 	      gotdot = j;
 9686              		.loc 1 1278 6 is_stmt 1 view .LVU3102
1278:src/display.c **** 	      gotdot = j;
 9687              		.loc 1 1278 9 is_stmt 0 view .LVU3103
 9688 0506 03D1     		bne	.L971
1278:src/display.c **** 	      gotdot = j;
 9689              		.loc 1 1278 22 view .LVU3104
 9690 0508 BEF1FF3F 		cmp	lr, #-1
 9691 050c 08BF     		it	eq
ARM GAS  /tmp/cchyQ5Gz.s 			page 285


 9692 050e 8E46     		moveq	lr, r1
 9693              	.LVL1084:
 9694              	.L971:
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9695              		.loc 1 1277 28 is_stmt 1 view .LVU3105
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9696              		.loc 1 1277 14 view .LVU3106
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9697              		.loc 1 1277 15 is_stmt 0 view .LVU3107
 9698 0510 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
1277:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9699              		.loc 1 1277 4 view .LVU3108
 9700 0514 0028     		cmp	r0, #0
 9701 0516 F3D1     		bne	.L972
1285:src/display.c **** 	  if (j > 0) {
 9702              		.loc 1 1285 4 is_stmt 1 view .LVU3109
1285:src/display.c **** 	  if (j > 0) {
 9703              		.loc 1 1285 6 is_stmt 0 view .LVU3110
 9704 0518 A1F10B02 		sub	r2, r1, #11
 9705              	.LVL1085:
1286:src/display.c **** 	    p += j + 1;
 9706              		.loc 1 1286 4 is_stmt 1 view .LVU3111
1286:src/display.c **** 	    p += j + 1;
 9707              		.loc 1 1286 7 is_stmt 0 view .LVU3112
 9708 051c 002A     		cmp	r2, #0
 9709 051e 40F32081 		ble	.L1158
1287:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9710              		.loc 1 1287 6 is_stmt 1 view .LVU3113
1287:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9711              		.loc 1 1287 8 is_stmt 0 view .LVU3114
 9712 0522 0A39     		subs	r1, r1, #10
1289:src/display.c **** 	      gotdot = 0;
 9713              		.loc 1 1289 9 view .LVU3115
 9714 0524 7245     		cmp	r2, lr
1287:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9715              		.loc 1 1287 8 view .LVU3116
 9716 0526 8944     		add	r9, r9, r1
 9717              	.LVL1086:
1288:src/display.c **** 	    if (gotdot <= j) {
 9718              		.loc 1 1288 6 is_stmt 1 view .LVU3117
1289:src/display.c **** 	      gotdot = 0;
 9719              		.loc 1 1289 6 view .LVU3118
1289:src/display.c **** 	      gotdot = 0;
 9720              		.loc 1 1289 9 is_stmt 0 view .LVU3119
 9721 0528 80F22081 		bge	.L1008
1294:src/display.c **** 	      gotdot = 0;
 9722              		.loc 1 1294 11 is_stmt 1 view .LVU3120
1294:src/display.c **** 	      gotdot = 0;
 9723              		.loc 1 1294 14 is_stmt 0 view .LVU3121
 9724 052c 99F80020 		ldrb	r2, [r9]	@ zero_extendqisi2
 9725              	.LVL1087:
1294:src/display.c **** 	      gotdot = 0;
 9726              		.loc 1 1294 14 view .LVU3122
 9727 0530 2E2A     		cmp	r2, #46
 9728 0532 00F0A581 		beq	.L1159
 9729              	.LVL1088:
1301:src/display.c **** 	    overflow_to_left = 1;
ARM GAS  /tmp/cchyQ5Gz.s 			page 286


 9730              		.loc 1 1301 6 is_stmt 1 view .LVU3123
 9731 0536 3C21     		movs	r1, #60
 9732              	.LVL1089:
1301:src/display.c **** 	    overflow_to_left = 1;
 9733              		.loc 1 1301 6 is_stmt 0 view .LVU3124
 9734 0538 FFF7FEFF 		bl	set_dig
 9735              	.LVL1090:
1302:src/display.c **** 	  }
 9736              		.loc 1 1302 6 is_stmt 1 view .LVU3125
1302:src/display.c **** 	  }
 9737              		.loc 1 1302 6 is_stmt 0 view .LVU3126
 9738 053c 99F800C0 		ldrb	ip, [r9]	@ zero_extendqisi2
1302:src/display.c **** 	  }
 9739              		.loc 1 1302 6 view .LVU3127
 9740              	.LBE573:
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9741              		.loc 1 1308 9 is_stmt 1 view .LVU3128
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9742              		.loc 1 1308 2 is_stmt 0 view .LVU3129
 9743 0540 BCF1000F 		cmp	ip, #0
 9744 0544 89D0     		beq	.L970
 9745              	.LBB574:
1300:src/display.c **** 	    set_dig(0, '<');
 9746              		.loc 1 1300 18 view .LVU3130
 9747 0546 4FF0FF3B 		mov	fp, #-1
 9748              	.LVL1091:
1288:src/display.c **** 	    if (gotdot <= j) {
 9749              		.loc 1 1288 8 view .LVU3131
 9750 054a 4FF00908 		mov	r8, #9
 9751              	.LVL1092:
 9752              	.L1001:
1302:src/display.c **** 	  }
 9753              		.loc 1 1302 23 view .LVU3132
 9754 054e 0126     		movs	r6, #1
 9755              	.LVL1093:
 9756              	.L982:
1302:src/display.c **** 	  }
 9757              		.loc 1 1302 23 view .LVU3133
 9758              	.LBE574:
1333:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9759              		.loc 1 1333 5 view .LVU3134
 9760 0550 6346     		mov	r3, ip
 9761 0552 0AE0     		b	.L980
 9762              	.LVL1094:
 9763              	.L1160:
1323:src/display.c **** #  endif
 9764              		.loc 1 1323 11 view .LVU3135
 9765 0554 D845     		cmp	r8, fp
 9766 0556 15D0     		beq	.L977
 9767              	.LVL1095:
 9768              	.L976:
1347:src/display.c **** 	      i += segs_per_digit;
 9769              		.loc 1 1347 8 view .LVU3136
 9770 0558 FFF7FEFF 		bl	set_dig
 9771              	.LVL1096:
1348:src/display.c **** 	    }
 9772              		.loc 1 1348 8 is_stmt 1 view .LVU3137
ARM GAS  /tmp/cchyQ5Gz.s 			page 287


1348:src/display.c **** 	    }
 9773              		.loc 1 1348 10 is_stmt 0 view .LVU3138
 9774 055c 08F10908 		add	r8, r8, #9
 9775              	.LVL1097:
 9776              	.L978:
1312:src/display.c **** 	  if (*p == '.') {
 9777              		.loc 1 1312 11 is_stmt 1 view .LVU3139
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9778              		.loc 1 1308 9 view .LVU3140
 9779 0560 19F8013F 		ldrb	r3, [r9, #1]!	@ zero_extendqisi2
 9780              	.LVL1098:
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9781              		.loc 1 1308 2 is_stmt 0 view .LVU3141
 9782 0564 002B     		cmp	r3, #0
 9783 0566 3FF45EAF 		beq	.L981
 9784              	.LVL1099:
 9785              	.L980:
1313:src/display.c **** 	    if (gotdot < 0)
 9786              		.loc 1 1313 4 is_stmt 1 view .LVU3142
1314:src/display.c **** 	      gotdot = i;
 9787              		.loc 1 1314 6 view .LVU3143
1347:src/display.c **** 	      i += segs_per_digit;
 9788              		.loc 1 1347 8 view .LVU3144
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9789              		.loc 1 1308 20 is_stmt 0 view .LVU3145
 9790 056a 452B     		cmp	r3, #69
1347:src/display.c **** 	      i += segs_per_digit;
 9791              		.loc 1 1347 8 view .LVU3146
 9792 056c 1946     		mov	r1, r3
 9793 056e 4046     		mov	r0, r8
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9794              		.loc 1 1308 20 view .LVU3147
 9795 0570 3FF459AF 		beq	.L981
1313:src/display.c **** 	    if (gotdot < 0)
 9796              		.loc 1 1313 7 view .LVU3148
 9797 0574 2E2B     		cmp	r3, #46
 9798 0576 EFD1     		bne	.L976
1323:src/display.c **** #  endif
 9799              		.loc 1 1323 8 is_stmt 1 view .LVU3149
1325:src/display.c **** 		i += segs_per_digit;
 9800              		.loc 1 1325 3 view .LVU3150
 9801              	.LVL1100:
1329:src/display.c **** 		  i += segs_per_digit;
 9802              		.loc 1 1329 3 view .LVU3151
1314:src/display.c **** 	      gotdot = i;
 9803              		.loc 1 1314 9 is_stmt 0 view .LVU3152
 9804 0578 BBF1000F 		cmp	fp, #0
1325:src/display.c **** 		i += segs_per_digit;
 9805              		.loc 1 1325 3 view .LVU3153
 9806 057c 4046     		mov	r0, r8
 9807 057e 4FF02F01 		mov	r1, #47
1314:src/display.c **** 	      gotdot = i;
 9808              		.loc 1 1314 9 view .LVU3154
 9809 0582 E7DA     		bge	.L1160
 9810              	.L977:
1330:src/display.c **** 		}
 9811              		.loc 1 1330 5 is_stmt 1 view .LVU3155
ARM GAS  /tmp/cchyQ5Gz.s 			page 288


 9812              	.LVL1101:
1329:src/display.c **** 		  i += segs_per_digit;
 9813              		.loc 1 1329 6 is_stmt 0 view .LVU3156
 9814 0584 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9815 0586 012B     		cmp	r3, #1
 9816 0588 26D9     		bls	.L979
 9817 058a C346     		mov	fp, r8
1330:src/display.c **** 		}
 9818              		.loc 1 1330 7 view .LVU3157
 9819 058c 08F10908 		add	r8, r8, #9
 9820              	.LVL1102:
1330:src/display.c **** 		}
 9821              		.loc 1 1330 7 view .LVU3158
 9822 0590 E6E7     		b	.L978
 9823              	.LVL1103:
 9824              	.L1148:
1330:src/display.c **** 		}
 9825              		.loc 1 1330 7 view .LVU3159
 9826              	.LBE582:
 9827              	.LBE597:
2697:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9828              		.loc 1 2697 4 is_stmt 1 view .LVU3160
2697:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9829              		.loc 1 2697 35 is_stmt 0 view .LVU3161
 9830 0592 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9831 0594 2849     		ldr	r1, .L1182+68
 9832 0596 0623     		movs	r3, #6
 9833 0598 03EB0213 		add	r3, r3, r2, lsl #4
2697:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9834              		.loc 1 2697 9 view .LVU3162
 9835 059c 1944     		add	r1, r1, r3
 9836 059e 20A8     		add	r0, sp, #128
 9837              	.LVL1104:
2697:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9838              		.loc 1 2697 9 view .LVU3163
 9839 05a0 FFF7FEFF 		bl	scopy
 9840              	.LVL1105:
2698:src/display.c **** 	  if (State2.dot) {
 9841              		.loc 1 2698 4 is_stmt 1 view .LVU3164
2698:src/display.c **** 	  if (State2.dot) {
 9842              		.loc 1 2698 9 is_stmt 0 view .LVU3165
 9843 05a4 254B     		ldr	r3, .L1182+72
 9844 05a6 94F91510 		ldrsb	r1, [r4, #21]
 9845 05aa 254A     		ldr	r2, .L1182+76
 9846 05ac 12EA2101 		ands	r1, r2, r1, asr #32
 9847 05b0 38BF     		it	cc
 9848 05b2 1946     		movcc	r1, r3
 9849 05b4 FFF7FEFF 		bl	scopy
 9850              	.LVL1106:
2699:src/display.c **** 	    *bp++ = 's';
 9851              		.loc 1 2699 8 view .LVU3166
 9852 05b8 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9853              	.LVL1107:
2699:src/display.c **** 	    *bp++ = 's';
 9854              		.loc 1 2699 4 is_stmt 1 view .LVU3167
2699:src/display.c **** 	    *bp++ = 's';
 9855              		.loc 1 2699 7 is_stmt 0 view .LVU3168
ARM GAS  /tmp/cchyQ5Gz.s 			page 289


 9856 05ba 5906     		lsls	r1, r3, #25
 9857 05bc 46D5     		bpl	.L881
2700:src/display.c **** 	    *bp++ = '_';
 9858              		.loc 1 2700 6 is_stmt 1 view .LVU3169
 9859              	.LVL1108:
2700:src/display.c **** 	    *bp++ = '_';
 9860              		.loc 1 2700 12 is_stmt 0 view .LVU3170
 9861 05be 7322     		movs	r2, #115
2701:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9862              		.loc 1 2701 12 view .LVU3171
 9863 05c0 5F23     		movs	r3, #95
2700:src/display.c **** 	    *bp++ = '_';
 9864              		.loc 1 2700 12 view .LVU3172
 9865 05c2 0270     		strb	r2, [r0]
2701:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9866              		.loc 1 2701 6 is_stmt 1 view .LVU3173
 9867              	.LVL1109:
2701:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9868              		.loc 1 2701 12 is_stmt 0 view .LVU3174
 9869 05c4 4370     		strb	r3, [r0, #1]
 9870 05c6 E6E6     		b	.L905
 9871              	.LVL1110:
 9872              	.L1149:
 9873              	.LBB598:
 9874              	.LBB583:
1255:src/display.c **** 	p++;
 9875              		.loc 1 1255 2 is_stmt 1 view .LVU3175
 9876              	.LBB575:
 9877              	.LBI575:
 294:src/display.c **** {
 9878              		.loc 1 294 13 view .LVU3176
 9879              	.LBB576:
 296:src/display.c ****   set_dot(MANT_SIGN);
 9880              		.loc 1 296 3 view .LVU3177
 296:src/display.c ****   set_dot(MANT_SIGN);
 9881              		.loc 1 296 25 is_stmt 0 view .LVU3178
 9882 05c8 0D49     		ldr	r1, .L1182+12
 297:src/display.c **** }
 9883              		.loc 1 297 3 view .LVU3179
 9884 05ca 8120     		movs	r0, #129
 9885              	.LVL1111:
 296:src/display.c ****   set_dot(MANT_SIGN);
 9886              		.loc 1 296 25 view .LVU3180
 9887 05cc 0A70     		strb	r2, [r1]
 297:src/display.c **** }
 9888              		.loc 1 297 3 is_stmt 1 view .LVU3181
 9889              	.LBE576:
 9890              	.LBE575:
1256:src/display.c ****       }
 9891              		.loc 1 1256 3 is_stmt 0 view .LVU3182
 9892 05ce 09F10109 		add	r9, r9, #1
 9893              	.LVL1112:
 9894              	.LBB578:
 9895              	.LBB577:
 297:src/display.c **** }
 9896              		.loc 1 297 3 view .LVU3183
 9897 05d2 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/cchyQ5Gz.s 			page 290


 9898              	.LVL1113:
 9899              	.LBE577:
 9900              	.LBE578:
1256:src/display.c ****       }
 9901              		.loc 1 1256 2 is_stmt 1 view .LVU3184
1256:src/display.c ****       }
 9902              		.loc 1 1256 2 is_stmt 0 view .LVU3185
 9903 05d6 49E6     		b	.L965
 9904              	.LVL1114:
 9905              	.L979:
1333:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9906              		.loc 1 1333 5 is_stmt 1 view .LVU3186
 9907 05d8 1A4B     		ldr	r3, .L1182+80
 9908 05da 0022     		movs	r2, #0
 9909 05dc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9910 05de A8F10900 		sub	r0, r8, #9
 9911              	.LVL1115:
1333:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9912              		.loc 1 1333 5 is_stmt 0 view .LVU3187
 9913 05e2 FFF7FEFF 		bl	set_decimal
 9914              	.LVL1116:
 9915 05e6 C346     		mov	fp, r8
 9916 05e8 BAE7     		b	.L978
 9917              	.LVL1117:
 9918              	.L1157:
1333:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 9919              		.loc 1 1333 5 view .LVU3188
 9920              	.LBE583:
 9921              	.LBE598:
2680:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9922              		.loc 1 2680 6 is_stmt 1 view .LVU3189
2680:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9923              		.loc 1 2680 11 is_stmt 0 view .LVU3190
 9924 05ea 2189     		ldrh	r1, [r4, #8]
 9925 05ec FFF7FEFF 		bl	num_arg_0
 9926              	.LVL1118:
2680:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9927              		.loc 1 2680 11 view .LVU3191
 9928 05f0 0346     		mov	r3, r0
 9929              	.LVL1119:
2680:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9930              		.loc 1 2680 11 view .LVU3192
 9931 05f2 6CE7     		b	.L877
 9932              	.L1183:
 9933              		.align	2
 9934              	.L1182:
 9935 05f4 0C000000 		.word	.LANCHOR17+12
 9936 05f8 08000000 		.word	.LC21
 9937 05fc 18000000 		.word	.LC22
 9938 0600 00000000 		.word	LastDisplayedNumber
 9939 0604 00000000 		.word	DispMsg
 9940 0608 00000000 		.word	ShowRegister
 9941 060c 34000000 		.word	.LC23
 9942 0610 00000000 		.word	LastDisplayedExponent
 9943 0614 00000000 		.word	.LANCHOR20
 9944 0618 00000000 		.word	DispPlot
 9945 061c 38000000 		.word	.LC24
ARM GAS  /tmp/cchyQ5Gz.s 			page 291


 9946 0620 AC000000 		.word	.LC40
 9947 0624 00000000 		.word	WasDataEntry
 9948 0628 00000000 		.word	.LANCHOR21
 9949 062c 00000000 		.word	.LANCHOR22
 9950 0630 00000000 		.word	.LANCHOR24
 9951 0634 56040000 		.word	argcmds+1110
 9952 0638 00000000 		.word	argcmds
 9953 063c 04000000 		.word	.LC19
 9954 0640 00000000 		.word	.LC18
 9955 0644 00000000 		.word	.LANCHOR1
 9956 0648 00000000 		.word	.LANCHOR0
 9957              	.L881:
2702:src/display.c **** 	    *bp++ = '\021';
 9958              		.loc 1 2702 11 is_stmt 1 view .LVU3193
2702:src/display.c **** 	    *bp++ = '\021';
 9959              		.loc 1 2702 14 is_stmt 0 view .LVU3194
 9960 064c 012E     		cmp	r6, #1
 9961 064e 00F09C80 		beq	.L1161
2709:src/display.c **** 	      *bp++ = '.';
 9962              		.loc 1 2709 6 is_stmt 1 view .LVU3195
2709:src/display.c **** 	      *bp++ = '.';
 9963              		.loc 1 2709 10 is_stmt 0 view .LVU3196
 9964 0652 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2709:src/display.c **** 	      *bp++ = '.';
 9965              		.loc 1 2709 9 view .LVU3197
 9966 0654 DA07     		lsls	r2, r3, #31
2710:src/display.c **** 	    if (State2.numdigit > 0) {
 9967              		.loc 1 2710 8 is_stmt 1 view .LVU3198
 9968              	.LVL1120:
2710:src/display.c **** 	    if (State2.numdigit > 0) {
 9969              		.loc 1 2710 14 is_stmt 0 view .LVU3199
 9970 0656 44BF     		itt	mi
 9971 0658 2E23     		movmi	r3, #46
 9972 065a 00F8013B 		strbmi	r3, [r0], #1
 9973              	.LVL1121:
2711:src/display.c **** 	      if (State2.shuffle)
 9974              		.loc 1 2711 6 is_stmt 1 view .LVU3200
2711:src/display.c **** 	      if (State2.shuffle)
 9975              		.loc 1 2711 16 is_stmt 0 view .LVU3201
 9976 065e E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2711:src/display.c **** 	      if (State2.shuffle)
 9977              		.loc 1 2711 9 view .LVU3202
 9978 0660 8AB1     		cbz	r2, .L885
2712:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9979              		.loc 1 2712 8 is_stmt 1 view .LVU3203
2712:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9980              		.loc 1 2712 12 is_stmt 0 view .LVU3204
 9981 0662 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2712:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9982              		.loc 1 2712 11 view .LVU3205
 9983 0664 9B07     		lsls	r3, r3, #30
 9984 0666 40F1C180 		bpl	.L886
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9985              		.loc 1 2713 3 is_stmt 1 view .LVU3206
 9986              	.LVL1122:
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9987              		.loc 1 2713 17 is_stmt 0 view .LVU3207
ARM GAS  /tmp/cchyQ5Gz.s 			page 292


 9988 066a 2289     		ldrh	r2, [r4, #8]
 9989              	.LVL1123:
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9990              		.loc 1 2713 34 is_stmt 1 view .LVU3208
 9991 066c C149     		ldr	r1, .L1184
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9992              		.loc 1 2713 10 is_stmt 0 view .LVU3209
 9993 066e 0023     		movs	r3, #0
 9994              	.LVL1124:
 9995              	.L887:
2714:src/display.c **** 	      else
 9996              		.loc 1 2714 5 is_stmt 1 discriminator 3 view .LVU3210
2714:src/display.c **** 	      else
 9997              		.loc 1 2714 24 is_stmt 0 discriminator 3 view .LVU3211
 9998 0670 02F00306 		and	r6, r2, #3
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9999              		.loc 1 2713 54 discriminator 3 view .LVU3212
 10000 0674 0133     		adds	r3, r3, #1
 10001              	.LVL1125:
2714:src/display.c **** 	      else
 10002              		.loc 1 2714 11 discriminator 3 view .LVU3213
 10003 0676 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 10004 0678 00F8016B 		strb	r6, [r0], #1
 10005              	.LVL1126:
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10006              		.loc 1 2713 53 is_stmt 1 discriminator 3 view .LVU3214
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10007              		.loc 1 2713 42 is_stmt 0 discriminator 3 view .LVU3215
 10008 067c E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10009              		.loc 1 2713 3 discriminator 3 view .LVU3216
 10010 067e 9E42     		cmp	r6, r3
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10011              		.loc 1 2713 60 discriminator 3 view .LVU3217
 10012 0680 4FEAA202 		asr	r2, r2, #2
 10013              	.LVL1127:
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10014              		.loc 1 2713 34 is_stmt 1 discriminator 3 view .LVU3218
2713:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10015              		.loc 1 2713 3 is_stmt 0 discriminator 3 view .LVU3219
 10016 0684 F4DC     		bgt	.L887
 10017              	.LVL1128:
 10018              	.L885:
2719:src/display.c **** 	  }
 10019              		.loc 1 2719 6 is_stmt 1 view .LVU3220
2719:src/display.c **** 	  }
 10020              		.loc 1 2719 12 is_stmt 0 view .LVU3221
 10021 0686 5F23     		movs	r3, #95
 10022 0688 0370     		strb	r3, [r0]
 10023 068a 84E6     		b	.L905
 10024              	.LVL1129:
 10025              	.L969:
 10026              	.LBB599:
 10027              	.LBB584:
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10028              		.loc 1 1308 9 is_stmt 1 view .LVU3222
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/cchyQ5Gz.s 			page 293


 10029              		.loc 1 1308 2 is_stmt 0 view .LVU3223
 10030 068c BCF1000F 		cmp	ip, #0
 10031 0690 3FF4E3AE 		beq	.L970
1268:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10032              		.loc 1 1268 4 view .LVU3224
 10033 0694 B046     		mov	r8, r6
1245:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10034              		.loc 1 1245 11 view .LVU3225
 10035 0696 4FF0FF3B 		mov	fp, #-1
 10036              	.LVL1130:
1245:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10037              		.loc 1 1245 11 view .LVU3226
 10038 069a 59E7     		b	.L982
 10039              	.LVL1131:
 10040              	.L1011:
1245:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10041              		.loc 1 1245 11 view .LVU3227
 10042              	.LBE584:
 10043              	.LBE599:
 10044              	.LBB600:
 10045              	.LBB560:
2920:src/display.c **** 	      while(*b) {
 10046              		.loc 1 2920 10 view .LVU3228
 10047 069c 5A1C     		adds	r2, r3, #1
 10048 069e 46E5     		b	.L992
 10049              	.LVL1132:
 10050              	.L1152:
2920:src/display.c **** 	      while(*b) {
 10051              		.loc 1 2920 10 view .LVU3229
 10052              	.LBE560:
 10053              	.LBE600:
 10054              	.LBB601:
2743:src/display.c **** 	  char b2[16];
 10055              		.loc 1 2743 4 is_stmt 1 view .LVU3230
2743:src/display.c **** 	  char b2[16];
 10056              		.loc 1 2743 45 is_stmt 0 view .LVU3231
 10057 06a0 D9F80030 		ldr	r3, [r9]
 10058 06a4 B3F8DC07 		ldrh	r0, [r3, #2012]
2743:src/display.c **** 	  char b2[16];
 10059              		.loc 1 2743 22 view .LVU3232
 10060 06a8 C0F34610 		ubfx	r0, r0, #5, #7
 10061 06ac FFF7FEFF 		bl	current_catalogue
 10062              	.LVL1133:
2747:src/display.c **** 	  p = catcmd(op, b2);
 10063              		.loc 1 2747 9 view .LVU3233
 10064 06b0 B149     		ldr	r1, .L1184+4
2743:src/display.c **** 	  char b2[16];
 10065              		.loc 1 2743 22 view .LVU3234
 10066 06b2 0546     		mov	r5, r0
 10067              	.LVL1134:
2744:src/display.c **** 	  const char *p;
 10068              		.loc 1 2744 4 is_stmt 1 view .LVU3235
2745:src/display.c **** 
 10069              		.loc 1 2745 4 view .LVU3236
2747:src/display.c **** 	  p = catcmd(op, b2);
 10070              		.loc 1 2747 4 view .LVU3237
2747:src/display.c **** 	  p = catcmd(op, b2);
ARM GAS  /tmp/cchyQ5Gz.s 			page 294


 10071              		.loc 1 2747 9 is_stmt 0 view .LVU3238
 10072 06b4 20A8     		add	r0, sp, #128
 10073              	.LVL1135:
2747:src/display.c **** 	  p = catcmd(op, b2);
 10074              		.loc 1 2747 9 view .LVU3239
 10075 06b6 FFF7FEFF 		bl	scopy
 10076              	.LVL1136:
2748:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10077              		.loc 1 2748 8 view .LVU3240
 10078 06ba 0AA9     		add	r1, sp, #40
2747:src/display.c **** 	  p = catcmd(op, b2);
 10079              		.loc 1 2747 9 view .LVU3241
 10080 06bc 0646     		mov	r6, r0
2748:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10081              		.loc 1 2748 8 view .LVU3242
 10082 06be 2846     		mov	r0, r5
 10083              	.LVL1137:
2748:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10084              		.loc 1 2748 4 is_stmt 1 view .LVU3243
2748:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10085              		.loc 1 2748 8 is_stmt 0 view .LVU3244
 10086 06c0 FFF7FEFF 		bl	catcmd
 10087              	.LVL1138:
2749:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10088              		.loc 1 2749 7 view .LVU3245
 10089 06c4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10090 06c6 142B     		cmp	r3, #20
2748:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10091              		.loc 1 2748 8 view .LVU3246
 10092 06c8 0146     		mov	r1, r0
 10093              	.LVL1139:
2749:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10094              		.loc 1 2749 4 is_stmt 1 view .LVU3247
2749:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10095              		.loc 1 2749 7 is_stmt 0 view .LVU3248
 10096 06ca 07D0     		beq	.L890
2749:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10097              		.loc 1 2749 29 discriminator 1 view .LVU3249
 10098 06cc 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10099 06ce 9F07     		lsls	r7, r3, #30
 10100 06d0 04D5     		bpl	.L890
2750:src/display.c **** 	  bp = scopy(bp, p);
 10101              		.loc 1 2750 6 is_stmt 1 view .LVU3250
2750:src/display.c **** 	  bp = scopy(bp, p);
 10102              		.loc 1 2750 9 is_stmt 0 view .LVU3251
 10103 06d2 3346     		mov	r3, r6
 10104              	.LVL1140:
2750:src/display.c **** 	  bp = scopy(bp, p);
 10105              		.loc 1 2750 12 view .LVU3252
 10106 06d4 1422     		movs	r2, #20
 10107 06d6 03F8012B 		strb	r2, [r3], #1
 10108              	.LVL1141:
2750:src/display.c **** 	  bp = scopy(bp, p);
 10109              		.loc 1 2750 9 view .LVU3253
 10110 06da 1E46     		mov	r6, r3
 10111              	.LVL1142:
 10112              	.L890:
ARM GAS  /tmp/cchyQ5Gz.s 			page 295


2751:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10113              		.loc 1 2751 4 is_stmt 1 view .LVU3254
2751:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10114              		.loc 1 2751 9 is_stmt 0 view .LVU3255
 10115 06dc 3046     		mov	r0, r6
 10116              	.LVL1143:
2751:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10117              		.loc 1 2751 9 view .LVU3256
 10118 06de FFF7FEFF 		bl	scopy
 10119              	.LVL1144:
2752:src/display.c **** 	    // State2.disp_small = 1;
 10120              		.loc 1 2752 4 is_stmt 1 view .LVU3257
2752:src/display.c **** 	    // State2.disp_small = 1;
 10121              		.loc 1 2752 7 is_stmt 0 view .LVU3258
 10122 06e2 ABF11003 		sub	r3, fp, #16
 10123 06e6 012B     		cmp	r3, #1
 10124 06e8 6FD9     		bls	.L1162
2759:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10125              		.loc 1 2759 11 is_stmt 1 view .LVU3259
2759:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10126              		.loc 1 2759 15 is_stmt 0 view .LVU3260
 10127 06ea A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2759:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10128              		.loc 1 2759 14 view .LVU3261
 10129 06ec 13F04003 		ands	r3, r3, #64
 10130 06f0 08D0     		beq	.L1004
2760:src/display.c **** 	      decNumber x, r;
 10131              		.loc 1 2760 6 is_stmt 1 view .LVU3262
2760:src/display.c **** 	      decNumber x, r;
 10132              		.loc 1 2760 9 is_stmt 0 view .LVU3263
 10133 06f2 BBF1120F 		cmp	fp, #18
 10134 06f6 00F09B82 		beq	.L1163
2780:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10135              		.loc 1 2780 13 is_stmt 1 view .LVU3264
2780:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10136              		.loc 1 2780 46 is_stmt 0 view .LVU3265
 10137 06fa A5F58873 		sub	r3, r5, #272
2780:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10138              		.loc 1 2780 16 view .LVU3266
 10139 06fe 0D2B     		cmp	r3, #13
 10140 0700 40F27082 		bls	.L1164
 10141              	.L1004:
2780:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10142              		.loc 1 2780 16 view .LVU3267
 10143              	.LBE601:
2594:src/display.c **** 	int x_disp = 0;
 10144              		.loc 1 2594 6 view .LVU3268
 10145 0704 0026     		movs	r6, #0
 10146              	.LVL1145:
 10147              	.L894:
 10148              	.LBB611:
2789:src/display.c **** 	    set_status_top(buf);
 10149              		.loc 1 2789 4 is_stmt 1 view .LVU3269
2789:src/display.c **** 	    set_status_top(buf);
 10150              		.loc 1 2789 7 is_stmt 0 view .LVU3270
 10151 0706 B8F1000F 		cmp	r8, #0
 10152 070a 59D0     		beq	.L899
ARM GAS  /tmp/cchyQ5Gz.s 			page 296


2790:src/display.c **** 	    no_status_top = 1;
 10153              		.loc 1 2790 6 is_stmt 1 view .LVU3271
 10154              	.LVL1146:
 10155              	.LBB602:
 10156              	.LBI602:
3503:src/display.c **** 	if (no_status_top) return;
 10157              		.loc 1 3503 19 view .LVU3272
 10158              	.LBB603:
3504:src/display.c **** 	if (State2.runmode) {
 10159              		.loc 1 3504 2 view .LVU3273
3504:src/display.c **** 	if (State2.runmode) {
 10160              		.loc 1 3504 5 is_stmt 0 view .LVU3274
 10161 070c BAF90030 		ldrsh	r3, [r10]
 10162 0710 13B9     		cbnz	r3, .L900
 10163 0712 20A8     		add	r0, sp, #128
 10164              	.LVL1147:
3504:src/display.c **** 	if (State2.runmode) {
 10165              		.loc 1 3504 5 view .LVU3275
 10166 0714 FFF7FEFF 		bl	set_status_top.part.0
 10167              	.LVL1148:
 10168              	.L900:
3504:src/display.c **** 	if (State2.runmode) {
 10169              		.loc 1 3504 5 view .LVU3276
 10170              	.LBE603:
 10171              	.LBE602:
2791:src/display.c **** 	    annuc = 1;
 10172              		.loc 1 2791 6 is_stmt 1 view .LVU3277
2791:src/display.c **** 	    annuc = 1;
 10173              		.loc 1 2791 20 is_stmt 0 view .LVU3278
 10174 0718 0123     		movs	r3, #1
2792:src/display.c **** 	  }
 10175              		.loc 1 2792 12 view .LVU3279
 10176 071a 4546     		mov	r5, r8
2791:src/display.c **** 	    annuc = 1;
 10177              		.loc 1 2791 20 view .LVU3280
 10178 071c AAF80030 		strh	r3, [r10]	@ movhi
2792:src/display.c **** 	  }
 10179              		.loc 1 2792 6 is_stmt 1 view .LVU3281
 10180              	.LVL1149:
 10181              	.L901:
2792:src/display.c **** 	  }
 10182              		.loc 1 2792 6 is_stmt 0 view .LVU3282
 10183              	.LBE611:
2882:src/display.c ****       nostk:
 10184              		.loc 1 2882 2 is_stmt 1 view .LVU3283
 10185 0720 FFF7FEFF 		bl	show_stack
 10186              	.LVL1150:
 10187              	.LDL1:
2884:src/display.c **** 	if (!skip) {
 10188              		.loc 1 2884 2 view .LVU3284
 10189 0724 FFF7FEFF 		bl	show_flags
 10190              	.LVL1151:
2885:src/display.c **** 	  if (State2.runmode) {
 10191              		.loc 1 2885 2 view .LVU3285
2885:src/display.c **** 	  if (State2.runmode) {
 10192              		.loc 1 2885 5 is_stmt 0 view .LVU3286
 10193 0728 002E     		cmp	r6, #0
ARM GAS  /tmp/cchyQ5Gz.s 			page 297


 10194 072a 00F03C82 		beq	.L1136
 10195              	.LVL1152:
 10196              	.L902:
2930:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10197              		.loc 1 2930 2 is_stmt 1 view .LVU3287
 10198 072e FFF7FEFF 		bl	set_annunciators
 10199              	.LVL1153:
2931:src/display.c **** 	  ShowRPN = 0;
 10200              		.loc 1 2931 2 view .LVU3288
 10201 0732 924B     		ldr	r3, .L1184+8
 10202 0734 924F     		ldr	r7, .L1184+12
 10203 0736 934E     		ldr	r6, .L1184+16
 10204 0738 0193     		str	r3, [sp, #4]
 10205 073a 20E5     		b	.L866
 10206              	.LVL1154:
 10207              	.L1151:
 10208              	.LBB612:
 10209              	.LBB585:
1386:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
 10210              		.loc 1 1386 6 view .LVU3289
1391:src/display.c **** #  endif
 10211              		.loc 1 1391 6 view .LVU3290
 10212 073c 09F10100 		add	r0, r9, #1
 10213              	.LVL1155:
1391:src/display.c **** #  endif
 10214              		.loc 1 1391 6 is_stmt 0 view .LVU3291
 10215 0740 FFF7FEFF 		bl	s_to_i
 10216              	.LVL1156:
1391:src/display.c **** #  endif
 10217              		.loc 1 1391 6 view .LVU3292
 10218 0744 99F80130 		ldrb	r3, [r9, #1]	@ zero_extendqisi2
 10219 0748 2D2B     		cmp	r3, #45
 10220 074a 0CBF     		ite	eq
 10221 074c 0621     		moveq	r1, #6
 10222 074e 0421     		movne	r1, #4
 10223 0750 0022     		movs	r2, #0
 10224 0752 FFF7FEFF 		bl	set_exp
 10225              	.LVL1157:
1391:src/display.c **** #  endif
 10226              		.loc 1 1391 6 view .LVU3293
 10227              	.LBE585:
 10228              	.LBE612:
2900:src/display.c **** 	      goto finish;
 10229              		.loc 1 2900 6 is_stmt 1 view .LVU3294
2900:src/display.c **** 	      goto finish;
 10230              		.loc 1 2900 9 is_stmt 0 view .LVU3295
 10231 0756 8C4B     		ldr	r3, .L1184+20
 10232 0758 1B68     		ldr	r3, [r3]
 10233 075a 002B     		cmp	r3, #0
 10234 075c 3FF4A1AD 		beq	.L1138
 10235 0760 85E6     		b	.L1053
 10236              	.LVL1158:
 10237              	.L1158:
 10238              	.LBB613:
 10239              	.LBB586:
1251:src/display.c **** #endif
 10240              		.loc 1 1251 11 view .LVU3296
ARM GAS  /tmp/cchyQ5Gz.s 			page 298


 10241 0762 0646     		mov	r6, r0
1268:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10242              		.loc 1 1268 4 view .LVU3297
 10243 0764 8046     		mov	r8, r0
 10244              	.LBB579:
1304:src/display.c **** 	}
 10245              		.loc 1 1304 16 view .LVU3298
 10246 0766 4FF0FF3B 		mov	fp, #-1
 10247              	.LVL1159:
1304:src/display.c **** 	}
 10248              		.loc 1 1304 16 view .LVU3299
 10249 076a F1E6     		b	.L982
 10250              	.LVL1160:
 10251              	.L1008:
1288:src/display.c **** 	    if (gotdot <= j) {
 10252              		.loc 1 1288 8 view .LVU3300
 10253 076c 4FF00908 		mov	r8, #9
 10254              	.LVL1161:
 10255              	.L974:
1301:src/display.c **** 	    overflow_to_left = 1;
 10256              		.loc 1 1301 6 is_stmt 1 view .LVU3301
 10257 0770 3C21     		movs	r1, #60
 10258              	.LVL1162:
1301:src/display.c **** 	    overflow_to_left = 1;
 10259              		.loc 1 1301 6 is_stmt 0 view .LVU3302
 10260 0772 0020     		movs	r0, #0
 10261 0774 FFF7FEFF 		bl	set_dig
 10262              	.LVL1163:
1302:src/display.c **** 	  }
 10263              		.loc 1 1302 6 is_stmt 1 view .LVU3303
1302:src/display.c **** 	  }
 10264              		.loc 1 1302 6 is_stmt 0 view .LVU3304
 10265 0778 99F800C0 		ldrb	ip, [r9]	@ zero_extendqisi2
1302:src/display.c **** 	  }
 10266              		.loc 1 1302 6 view .LVU3305
 10267              	.LBE579:
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10268              		.loc 1 1308 9 is_stmt 1 view .LVU3306
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10269              		.loc 1 1308 2 is_stmt 0 view .LVU3307
 10270 077c 4FF0000B 		mov	fp, #0
 10271              	.LVL1164:
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10272              		.loc 1 1308 2 view .LVU3308
 10273 0780 BCF1000F 		cmp	ip, #0
 10274 0784 7FF4E3AE 		bne	.L1001
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10275              		.loc 1 1308 2 view .LVU3309
 10276 0788 6CE6     		b	.L989
 10277              	.LVL1165:
 10278              	.L1161:
1308:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10279              		.loc 1 1308 2 view .LVU3310
 10280              	.LBE586:
 10281              	.LBE613:
2703:src/display.c **** 	    *bp++ = '_';
 10282              		.loc 1 2703 6 is_stmt 1 view .LVU3311
ARM GAS  /tmp/cchyQ5Gz.s 			page 299


2703:src/display.c **** 	    *bp++ = '_';
 10283              		.loc 1 2703 12 is_stmt 0 view .LVU3312
 10284 078a 1122     		movs	r2, #17
2704:src/display.c **** 	  } else {
 10285              		.loc 1 2704 12 view .LVU3313
 10286 078c 5F23     		movs	r3, #95
2703:src/display.c **** 	    *bp++ = '_';
 10287              		.loc 1 2703 12 view .LVU3314
 10288 078e 0270     		strb	r2, [r0]
2704:src/display.c **** 	  } else {
 10289              		.loc 1 2704 6 is_stmt 1 view .LVU3315
 10290              	.LVL1166:
2704:src/display.c **** 	  } else {
 10291              		.loc 1 2704 12 is_stmt 0 view .LVU3316
 10292 0790 4370     		strb	r3, [r0, #1]
 10293 0792 00E6     		b	.L905
 10294              	.LVL1167:
 10295              	.L1153:
2798:src/display.c **** 	  if (State2.numdigit > 0) {
 10296              		.loc 1 2798 4 is_stmt 1 view .LVU3317
2798:src/display.c **** 	  if (State2.numdigit > 0) {
 10297              		.loc 1 2798 42 is_stmt 0 view .LVU3318
 10298 0794 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 10299 0796 7D49     		ldr	r1, .L1184+24
 10300 0798 0423     		movs	r3, #4
 10301 079a 03EB0213 		add	r3, r3, r2, lsl #4
2798:src/display.c **** 	  if (State2.numdigit > 0) {
 10302              		.loc 1 2798 9 view .LVU3319
 10303 079e 1944     		add	r1, r1, r3
 10304 07a0 2722     		movs	r2, #39
 10305 07a2 20A8     		add	r0, sp, #128
 10306              	.LVL1168:
2798:src/display.c **** 	  if (State2.numdigit > 0) {
 10307              		.loc 1 2798 9 view .LVU3320
 10308 07a4 FFF7FEFF 		bl	scopy_char
 10309              	.LVL1169:
2799:src/display.c **** 	    *bp++ = (char) State2.digval;
 10310              		.loc 1 2799 7 view .LVU3321
 10311 07a8 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10312              	.LVL1170:
2799:src/display.c **** 	    *bp++ = (char) State2.digval;
 10313              		.loc 1 2799 4 is_stmt 1 view .LVU3322
2799:src/display.c **** 	    *bp++ = (char) State2.digval;
 10314              		.loc 1 2799 7 is_stmt 0 view .LVU3323
 10315 07aa 002B     		cmp	r3, #0
 10316 07ac 3FF4F3AD 		beq	.L905
2800:src/display.c **** 	    if (State2.numdigit > 1)
 10317              		.loc 1 2800 6 is_stmt 1 view .LVU3324
 10318              	.LVL1171:
2800:src/display.c **** 	    if (State2.numdigit > 1)
 10319              		.loc 1 2800 14 is_stmt 0 view .LVU3325
 10320 07b0 2389     		ldrh	r3, [r4, #8]
 10321 07b2 0370     		strb	r3, [r0]
2801:src/display.c **** 	      *bp++ = State2.digval2;
 10322              		.loc 1 2801 6 is_stmt 1 view .LVU3326
2801:src/display.c **** 	      *bp++ = State2.digval2;
 10323              		.loc 1 2801 9 is_stmt 0 view .LVU3327
ARM GAS  /tmp/cchyQ5Gz.s 			page 300


 10324 07b4 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10325 07b6 012B     		cmp	r3, #1
2802:src/display.c **** 	  }
 10326              		.loc 1 2802 8 is_stmt 1 view .LVU3328
 10327              	.LVL1172:
2802:src/display.c **** 	  }
 10328              		.loc 1 2802 22 is_stmt 0 view .LVU3329
 10329 07b8 84BF     		itt	hi
 10330 07ba A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2802:src/display.c **** 	  }
 10331              		.loc 1 2802 14 view .LVU3330
 10332 07bc 4370     		strbhi	r3, [r0, #1]
 10333 07be EAE5     		b	.L905
 10334              	.LVL1173:
 10335              	.L899:
 10336              	.LBB614:
2795:src/display.c **** 	  }
 10337              		.loc 1 2795 6 is_stmt 1 view .LVU3331
 10338 07c0 20A8     		add	r0, sp, #128
 10339 07c2 FFF7FEFF 		bl	set_status
 10340              	.LVL1174:
 10341              	.LBE614:
2592:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10342              		.loc 1 2592 6 is_stmt 0 view .LVU3332
 10343 07c6 4546     		mov	r5, r8
 10344 07c8 AAE7     		b	.L901
 10345              	.LVL1175:
 10346              	.L1162:
 10347              	.LBB615:
2754:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10348              		.loc 1 2754 6 is_stmt 1 view .LVU3333
2754:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10349              		.loc 1 2754 9 is_stmt 0 view .LVU3334
 10350 07ca B5F5274F 		cmp	r5, #42752
 10351 07ce 5CD0     		beq	.L892
2754:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10352              		.loc 1 2754 41 discriminator 1 view .LVU3335
 10353 07d0 B5F5284F 		cmp	r5, #43008
 10354 07d4 59D0     		beq	.L892
2757:src/display.c **** 	    skip = 1;
 10355              		.loc 1 2757 8 is_stmt 1 view .LVU3336
2757:src/display.c **** 	    skip = 1;
 10356              		.loc 1 2757 14 is_stmt 0 view .LVU3337
 10357 07d6 0021     		movs	r1, #0
 10358 07d8 05F07F00 		and	r0, r5, #127
 10359 07dc FFF7FEFF 		bl	get_const
 10360              	.LVL1176:
2757:src/display.c **** 	    skip = 1;
 10361              		.loc 1 2757 8 view .LVU3338
 10362 07e0 0022     		movs	r2, #0
 10363 07e2 1146     		mov	r1, r2
 10364 07e4 FFF7FEFF 		bl	set_x
 10365              	.LVL1177:
2758:src/display.c **** 	  } else if (State2.runmode) {
 10366              		.loc 1 2758 11 view .LVU3339
 10367 07e8 0126     		movs	r6, #1
 10368 07ea 8CE7     		b	.L894
ARM GAS  /tmp/cchyQ5Gz.s 			page 301


 10369              	.LVL1178:
 10370              	.L886:
2758:src/display.c **** 	  } else if (State2.runmode) {
 10371              		.loc 1 2758 11 view .LVU3340
 10372              	.LBE615:
2716:src/display.c **** 	    }
 10373              		.loc 1 2716 3 is_stmt 1 view .LVU3341
2716:src/display.c **** 	    }
 10374              		.loc 1 2716 8 is_stmt 0 view .LVU3342
 10375 07ec 2189     		ldrh	r1, [r4, #8]
 10376 07ee FFF7FEFF 		bl	num_arg_0
 10377              	.LVL1179:
2716:src/display.c **** 	    }
 10378              		.loc 1 2716 8 view .LVU3343
 10379 07f2 48E7     		b	.L885
 10380              	.LVL1180:
 10381              	.L1156:
2819:src/display.c **** 	  skip = 1;
 10382              		.loc 1 2819 4 is_stmt 1 view .LVU3344
 10383              	.LBB616:
 10384              	.LBI616:
2494:src/display.c **** 	char buf[16], *bp;
 10385              		.loc 1 2494 19 view .LVU3345
 10386              	.LBB617:
2495:src/display.c **** 	int n = State2.digval;
 10387              		.loc 1 2495 2 view .LVU3346
2496:src/display.c **** 	
 10388              		.loc 1 2496 2 view .LVU3347
2496:src/display.c **** 	
 10389              		.loc 1 2496 6 is_stmt 0 view .LVU3348
 10390 07f4 B4F808B0 		ldrh	fp, [r4, #8]
 10391              	.LVL1181:
2503:src/display.c **** 	  n;
 10392              		.loc 1 2503 2 is_stmt 1 view .LVU3349
2503:src/display.c **** 	  n;
 10393              		.loc 1 2503 54 is_stmt 0 view .LVU3350
 10394 07f8 CA07     		lsls	r2, r1, #31
 10395 07fa 4CBF     		ite	mi
 10396 07fc 0BF17008 		addmi	r8, fp, #112
2496:src/display.c **** 	
 10397              		.loc 1 2496 6 view .LVU3351
 10398 0800 D846     		movpl	r8, fp
 10399              	.LVL1182:
2507:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10400              		.loc 1 2507 2 is_stmt 1 view .LVU3352
2507:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10401              		.loc 1 2507 5 is_stmt 0 view .LVU3353
 10402 0802 11F00401 		ands	r1, r1, #4
 10403 0806 00F08381 		beq	.L930
2508:src/display.c **** 	}
 10404              		.loc 1 2508 4 is_stmt 1 view .LVU3354
2508:src/display.c **** 	}
 10405              		.loc 1 2508 15 is_stmt 0 view .LVU3355
 10406 080a 17A9     		add	r1, sp, #92
 10407 080c 4046     		mov	r0, r8
 10408 080e FFF7FEFF 		bl	alpha_rcl_s
 10409              	.LVL1183:
ARM GAS  /tmp/cchyQ5Gz.s 			page 302


2508:src/display.c **** 	}
 10410              		.loc 1 2508 4 view .LVU3356
 10411 0812 FFF7FEFF 		bl	set_status
 10412              	.LVL1184:
 10413              	.L931:
2530:src/display.c ****       }
 10414              		.loc 1 2530 2 is_stmt 1 view .LVU3357
 10415 0816 4046     		mov	r0, r8
 10416 0818 0021     		movs	r1, #0
 10417 081a FFF7FEFF 		bl	format_reg
 10418              	.LVL1185:
2530:src/display.c ****       }
 10419              		.loc 1 2530 2 is_stmt 0 view .LVU3358
 10420              	.LBE617:
 10421              	.LBE616:
2820:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10422              		.loc 1 2820 4 is_stmt 1 view .LVU3359
2821:src/display.c **** 	    annunciators();
 10423              		.loc 1 2821 4 view .LVU3360
2821:src/display.c **** 	    annunciators();
 10424              		.loc 1 2821 7 is_stmt 0 view .LVU3361
 10425 081e 002E     		cmp	r6, #0
 10426 0820 40F07381 		bne	.L937
2821:src/display.c **** 	    annunciators();
 10427              		.loc 1 2821 25 discriminator 1 view .LVU3362
 10428 0824 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10429 0826 012B     		cmp	r3, #1
 10430 0828 00F06881 		beq	.L1165
 10431              	.L938:
2882:src/display.c ****       nostk:
 10432              		.loc 1 2882 2 is_stmt 1 view .LVU3363
 10433 082c FFF7FEFF 		bl	show_stack
 10434              	.LVL1186:
2884:src/display.c **** 	if (!skip) {
 10435              		.loc 1 2884 2 view .LVU3364
2592:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10436              		.loc 1 2592 6 is_stmt 0 view .LVU3365
 10437 0830 0025     		movs	r5, #0
2884:src/display.c **** 	if (!skip) {
 10438              		.loc 1 2884 2 view .LVU3366
 10439 0832 FFF7FEFF 		bl	show_flags
 10440              	.LVL1187:
2885:src/display.c **** 	  if (State2.runmode) {
 10441              		.loc 1 2885 2 is_stmt 1 view .LVU3367
 10442 0836 7AE7     		b	.L902
 10443              	.LVL1188:
 10444              	.L1155:
2816:src/display.c **** 	  skip = 1;
 10445              		.loc 1 2816 4 view .LVU3368
 10446              	.LBB620:
 10447              	.LBI620:
2463:src/display.c **** 	char buf[16];
 10448              		.loc 1 2463 19 view .LVU3369
 10449              	.LBB621:
2464:src/display.c **** 	unsigned short int pc = State2.digval;
 10450              		.loc 1 2464 2 view .LVU3370
2465:src/display.c **** 	unsigned int op = getprog(pc);
ARM GAS  /tmp/cchyQ5Gz.s 			page 303


 10451              		.loc 1 2465 2 view .LVU3371
2465:src/display.c **** 	unsigned int op = getprog(pc);
 10452              		.loc 1 2465 21 is_stmt 0 view .LVU3372
 10453 0838 B4F808B0 		ldrh	fp, [r4, #8]
 10454              	.LVL1189:
2466:src/display.c **** 	int n = nLIB(pc);
 10455              		.loc 1 2466 2 is_stmt 1 view .LVU3373
2473:src/display.c **** #endif
 10456              		.loc 1 2473 41 is_stmt 0 view .LVU3374
 10457 083c DFF86491 		ldr	r9, .L1184+48
2466:src/display.c **** 	int n = nLIB(pc);
 10458              		.loc 1 2466 20 view .LVU3375
 10459 0840 5846     		mov	r0, fp
 10460 0842 FFF7FEFF 		bl	getprog
 10461              	.LVL1190:
2470:src/display.c **** 	set_digits_string(libname[n], 0);
 10462              		.loc 1 2470 2 view .LVU3376
 10463 0846 17A9     		add	r1, sp, #92
2466:src/display.c **** 	int n = nLIB(pc);
 10464              		.loc 1 2466 20 view .LVU3377
 10465 0848 8046     		mov	r8, r0
 10466              	.LVL1191:
2467:src/display.c **** 	unsigned short int lblpc;
 10467              		.loc 1 2467 2 is_stmt 1 view .LVU3378
2468:src/display.c **** 
 10468              		.loc 1 2468 2 view .LVU3379
2470:src/display.c **** 	set_digits_string(libname[n], 0);
 10469              		.loc 1 2470 2 view .LVU3380
 10470 084a FFF7FEFF 		bl	prt
 10471              	.LVL1192:
2470:src/display.c **** 	set_digits_string(libname[n], 0);
 10472              		.loc 1 2470 2 is_stmt 0 view .LVU3381
 10473 084e FFF7FEFF 		bl	set_status
 10474              	.LVL1193:
2471:src/display.c **** #ifndef REALBUILD
 10475              		.loc 1 2471 2 is_stmt 1 view .LVU3382
 10476 0852 4FEA9B36 		lsr	r6, fp, #14
 10477 0856 4E4B     		ldr	r3, .L1184+28
2471:src/display.c **** #ifndef REALBUILD
 10478              		.loc 1 2471 27 is_stmt 0 view .LVU3383
 10479 0858 06EB8606 		add	r6, r6, r6, lsl #2
2471:src/display.c **** #ifndef REALBUILD
 10480              		.loc 1 2471 2 view .LVU3384
 10481 085c 9819     		adds	r0, r3, r6
 10482 085e 3946     		mov	r1, r7
 10483 0860 FFF7FEFF 		bl	set_digits_string
 10484              	.LVL1194:
2473:src/display.c **** #endif
 10485              		.loc 1 2473 2 is_stmt 1 view .LVU3385
 10486 0864 4B48     		ldr	r0, .L1184+32
 10487 0866 09EB4601 		add	r1, r9, r6, lsl #1
 10488 086a FFF7FEFF 		bl	scopy
 10489              	.LVL1195:
2476:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10490              		.loc 1 2476 2 view .LVU3386
2476:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10491              		.loc 1 2476 5 is_stmt 0 view .LVU3387
ARM GAS  /tmp/cchyQ5Gz.s 			page 304


 10492 086e 18F4704F 		tst	r8, #61440
 10493 0872 40F0A181 		bne	.L1166
 10494              	.LVL1196:
 10495              	.L1139:
2476:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10496              		.loc 1 2476 5 view .LVU3388
 10497              	.LBE621:
 10498              	.LBE620:
2882:src/display.c ****       nostk:
 10499              		.loc 1 2882 2 is_stmt 1 view .LVU3389
 10500 0876 FFF7FEFF 		bl	show_stack
 10501              	.LVL1197:
2884:src/display.c **** 	if (!skip) {
 10502              		.loc 1 2884 2 view .LVU3390
 10503 087a FFF7FEFF 		bl	show_flags
 10504              	.LVL1198:
2885:src/display.c **** 	  if (State2.runmode) {
 10505              		.loc 1 2885 2 view .LVU3391
 10506 087e 56E7     		b	.L902
 10507              	.LVL1199:
 10508              	.L1159:
 10509              	.LBB624:
 10510              	.LBB587:
 10511              	.LBB580:
1295:src/display.c **** 	      p++;
 10512              		.loc 1 1295 8 view .LVU3392
1296:src/display.c **** 	      if (!double_dot)
 10513              		.loc 1 1296 8 view .LVU3393
1296:src/display.c **** 	      if (!double_dot)
 10514              		.loc 1 1296 9 is_stmt 0 view .LVU3394
 10515 0880 09F10109 		add	r9, r9, #1
 10516              	.LVL1200:
1297:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10517              		.loc 1 1297 8 is_stmt 1 view .LVU3395
1298:src/display.c **** 	    }
 10518              		.loc 1 1298 3 view .LVU3396
1298:src/display.c **** 	    }
 10519              		.loc 1 1298 5 is_stmt 0 view .LVU3397
 10520 0884 4FF01208 		mov	r8, #18
 10521 0888 72E7     		b	.L974
 10522              	.LVL1201:
 10523              	.L892:
1298:src/display.c **** 	    }
 10524              		.loc 1 1298 5 view .LVU3398
 10525              	.LBE580:
 10526              	.LBE587:
 10527              	.LBE624:
 10528              	.LBB625:
2755:src/display.c **** 	    else
 10529              		.loc 1 2755 8 is_stmt 1 view .LVU3399
 10530 088a 4348     		ldr	r0, .L1184+36
 10531 088c 0021     		movs	r1, #0
 10532 088e FFF7FEFF 		bl	set_digits_string
 10533              	.LVL1202:
2758:src/display.c **** 	  } else if (State2.runmode) {
 10534              		.loc 1 2758 11 is_stmt 0 view .LVU3400
 10535 0892 0126     		movs	r6, #1
ARM GAS  /tmp/cchyQ5Gz.s 			page 305


2755:src/display.c **** 	    else
 10536              		.loc 1 2755 8 view .LVU3401
 10537 0894 37E7     		b	.L894
 10538              	.LVL1203:
 10539              	.L1154:
2755:src/display.c **** 	    else
 10540              		.loc 1 2755 8 view .LVU3402
 10541              	.LBE625:
2813:src/display.c **** 	  skip = 1;
 10542              		.loc 1 2813 4 is_stmt 1 view .LVU3403
 10543              	.LBB626:
 10544              	.LBI626:
2361:src/display.c **** 	int i, n;
 10545              		.loc 1 2361 19 view .LVU3404
 10546              	.LBB627:
2362:src/display.c **** 	int j = SEGS_EXP_BASE;
 10547              		.loc 1 2362 2 view .LVU3405
2363:src/display.c **** 	const int status = State2.status - 3;
 10548              		.loc 1 2363 2 view .LVU3406
2364:src/display.c **** 	char buf[16], *p = buf;
 10549              		.loc 1 2364 2 view .LVU3407
2368:src/display.c **** 	  set_status("Free:");
 10550              		.loc 1 2368 5 is_stmt 0 view .LVU3408
 10551 0896 012F     		cmp	r7, #1
2364:src/display.c **** 	char buf[16], *p = buf;
 10552              		.loc 1 2364 12 view .LVU3409
 10553 0898 A7F10303 		sub	r3, r7, #3
 10554              	.LVL1204:
2365:src/display.c **** 	unsigned int pc;
 10555              		.loc 1 2365 2 is_stmt 1 view .LVU3410
2366:src/display.c **** 
 10556              		.loc 1 2366 2 view .LVU3411
2368:src/display.c **** 	  set_status("Free:");
 10557              		.loc 1 2368 2 view .LVU3412
2368:src/display.c **** 	  set_status("Free:");
 10558              		.loc 1 2368 5 is_stmt 0 view .LVU3413
 10559 089c 00F01481 		beq	.L1167
2376:src/display.c **** 	  /* Top line */
 10560              		.loc 1 2376 7 is_stmt 1 view .LVU3414
2376:src/display.c **** 	  /* Top line */
 10561              		.loc 1 2376 10 is_stmt 0 view .LVU3415
 10562 08a0 591C     		adds	r1, r3, #1
 10563 08a2 00F0EF80 		beq	.L1168
 10564              	.LBB628:
2393:src/display.c **** 	  int end;
 10565              		.loc 1 2393 4 is_stmt 1 view .LVU3416
2394:src/display.c **** 	  int group = 10;
 10566              		.loc 1 2394 4 view .LVU3417
2395:src/display.c **** 	  int start = 0;
 10567              		.loc 1 2395 4 view .LVU3418
 10568              	.LVL1205:
2396:src/display.c **** 		
 10569              		.loc 1 2396 4 view .LVU3419
2398:src/display.c **** 	    base = 10 * status;
 10570              		.loc 1 2398 4 view .LVU3420
2398:src/display.c **** 	    base = 10 * status;
 10571              		.loc 1 2398 7 is_stmt 0 view .LVU3421
ARM GAS  /tmp/cchyQ5Gz.s 			page 306


 10572 08a6 092B     		cmp	r3, #9
 10573 08a8 40F3C880 		ble	.L1169
2408:src/display.c **** 	    base = regX_idx;
 10574              		.loc 1 2408 9 is_stmt 1 view .LVU3422
2408:src/display.c **** 	    base = regX_idx;
 10575              		.loc 1 2408 12 is_stmt 0 view .LVU3423
 10576 08ac 0A2B     		cmp	r3, #10
 10577 08ae 00F0BB80 		beq	.L1170
2416:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10578              		.loc 1 2416 6 is_stmt 1 view .LVU3424
 10579              	.LVL1206:
2417:src/display.c **** 	    set_status("FL.00-.15");
 10580              		.loc 1 2417 6 view .LVU3425
2418:src/display.c **** 	  }
 10581              		.loc 1 2418 6 view .LVU3426
 10582 08b2 3A48     		ldr	r0, .L1184+40
 10583 08b4 FFF7FEFF 		bl	set_status
 10584              	.LVL1207:
2396:src/display.c **** 		
 10585              		.loc 1 2396 8 is_stmt 0 view .LVU3427
 10586 08b8 4FF0000B 		mov	fp, #0
 10587              	.LVL1208:
2395:src/display.c **** 	  int start = 0;
 10588              		.loc 1 2395 8 view .LVU3428
 10589 08bc 0A23     		movs	r3, #10
2417:src/display.c **** 	    set_status("FL.00-.15");
 10590              		.loc 1 2417 10 view .LVU3429
 10591 08be 4FF07F08 		mov	r8, #127
2416:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10592              		.loc 1 2416 11 view .LVU3430
 10593 08c2 7027     		movs	r7, #112
 10594              	.LVL1209:
 10595              	.L914:
2420:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10596              		.loc 1 2420 4 is_stmt 1 view .LVU3431
2420:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10597              		.loc 1 2420 6 is_stmt 0 view .LVU3432
 10598 08c4 0BEBCB06 		add	r6, fp, fp, lsl #3
 10599              	.LVL1210:
2421:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10600              		.loc 1 2421 4 is_stmt 1 view .LVU3433
 10601              	.LBB629:
 10602              	.LBI629:
 347:src/display.c ****   if (res) {
 10603              		.loc 1 347 14 view .LVU3434
 10604              	.LBB630:
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10605              		.loc 1 348 3 view .LVU3435
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 10606              		.loc 1 351 5 view .LVU3436
 10607 08c8 0193     		str	r3, [sp, #4]
 10608              	.LVL1211:
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 10609              		.loc 1 351 5 is_stmt 0 view .LVU3437
 10610 08ca F01D     		adds	r0, r6, #7
 10611              	.LBB631:
 10612              	.LBB632:
ARM GAS  /tmp/cchyQ5Gz.s 			page 307


 355:src/display.c **** #endif
 10613              		.loc 1 355 35 view .LVU3438
 10614 08cc 0BF10103 		add	r3, fp, #1
 10615 08d0 0293     		str	r3, [sp, #8]
 10616              	.LBE632:
 10617              	.LBE631:
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 10618              		.loc 1 351 5 view .LVU3439
 10619 08d2 FFF7FEFF 		bl	set_dot
 10620              	.LVL1212:
 352:src/display.c ****       set_dot(posn+8);
 10621              		.loc 1 352 5 is_stmt 1 view .LVU3440
 10622              	.LBB634:
 10623              	.LBI631:
 347:src/display.c ****   if (res) {
 10624              		.loc 1 347 14 view .LVU3441
 10625              	.LBB633:
 355:src/display.c **** #endif
 10626              		.loc 1 355 5 view .LVU3442
 355:src/display.c **** #endif
 10627              		.loc 1 355 38 is_stmt 0 view .LVU3443
 10628 08d6 2F49     		ldr	r1, .L1184+32
 10629 08d8 029B     		ldr	r3, [sp, #8]
 10630 08da 2E22     		movs	r2, #46
 10631 08dc 01F81320 		strb	r2, [r1, r3, lsl #1]
 358:src/display.c **** }
 10632              		.loc 1 358 3 is_stmt 1 view .LVU3444
 10633              	.LVL1213:
 358:src/display.c **** }
 10634              		.loc 1 358 3 is_stmt 0 view .LVU3445
 10635              	.LBE633:
 10636              	.LBE634:
 358:src/display.c **** }
 10637              		.loc 1 358 3 is_stmt 1 view .LVU3446
 358:src/display.c **** }
 10638              		.loc 1 358 3 is_stmt 0 view .LVU3447
 10639              	.LBE630:
 10640              	.LBE629:
2422:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10641              		.loc 1 2422 4 is_stmt 1 view .LVU3448
 10642 08e0 019B     		ldr	r3, [sp, #4]
 10643              	.LBB635:
 10644              	.LBB636:
 10645              	.LBB637:
 10646              	.LBB638:
 10647              	.LBB639:
 355:src/display.c **** #endif
 10648              		.loc 1 355 38 is_stmt 0 view .LVU3449
 10649 08e2 0392     		str	r2, [sp, #12]
 10650 08e4 CBEB4301 		rsb	r1, fp, r3, lsl #1
 10651 08e8 CA19     		adds	r2, r1, r7
 10652 08ea 0592     		str	r2, [sp, #20]
 10653              	.LBE639:
 10654              	.LBE638:
 10655              	.LBE637:
 10656              	.LBE636:
 10657              	.LBE635:
ARM GAS  /tmp/cchyQ5Gz.s 			page 308


2423:src/display.c **** 	    int k = i + base - start;
 10658              		.loc 1 2423 30 view .LVU3450
 10659 08ec 0BEB0302 		add	r2, fp, r3
 10660 08f0 FB18     		adds	r3, r7, r3
 10661 08f2 0193     		str	r3, [sp, #4]
 10662 08f4 A7EB0B03 		sub	r3, r7, fp
 10663 08f8 CDE90635 		strd	r3, r5, [sp, #24]
2422:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10664              		.loc 1 2422 6 view .LVU3451
 10665 08fc 0936     		adds	r6, r6, #9
 10666              	.LVL1214:
2423:src/display.c **** 	    int k = i + base - start;
 10667              		.loc 1 2423 4 is_stmt 1 view .LVU3452
2423:src/display.c **** 	    int k = i + base - start;
 10668              		.loc 1 2423 20 view .LVU3453
2423:src/display.c **** 	    int k = i + base - start;
 10669              		.loc 1 2423 30 is_stmt 0 view .LVU3454
 10670 08fe 0492     		str	r2, [sp, #16]
 10671 0900 1DE0     		b	.L918
 10672              	.LVL1215:
 10673              	.L916:
 10674              	.LBB656:
2433:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10675              		.loc 1 2433 6 is_stmt 1 view .LVU3455
 10676 0902 2946     		mov	r1, r5
 10677 0904 3046     		mov	r0, r6
 10678 0906 FFF7FEFF 		bl	set_dig
 10679              	.LVL1216:
2434:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10680              		.loc 1 2434 6 view .LVU3456
 10681              	.LBB646:
 10682              	.LBI636:
 347:src/display.c ****   if (res) {
 10683              		.loc 1 347 14 view .LVU3457
 10684              	.LBB644:
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10685              		.loc 1 348 3 view .LVU3458
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 10686              		.loc 1 351 5 view .LVU3459
 10687 090a F01D     		adds	r0, r6, #7
 10688 090c FFF7FEFF 		bl	set_dot
 10689              	.LVL1217:
 352:src/display.c ****       set_dot(posn+8);
 10690              		.loc 1 352 5 view .LVU3460
 10691              	.LBB642:
 10692              	.LBI638:
 347:src/display.c ****   if (res) {
 10693              		.loc 1 347 14 view .LVU3461
 10694              	.LBB640:
 355:src/display.c **** #endif
 10695              		.loc 1 355 5 view .LVU3462
 355:src/display.c **** #endif
 10696              		.loc 1 355 30 is_stmt 0 view .LVU3463
 10697 0910 234B     		ldr	r3, .L1184+44
 355:src/display.c **** #endif
 10698              		.loc 1 355 38 view .LVU3464
 10699 0912 0399     		ldr	r1, [sp, #12]
ARM GAS  /tmp/cchyQ5Gz.s 			page 309


 355:src/display.c **** #endif
 10700              		.loc 1 355 30 view .LVU3465
 10701 0914 A3FB0623 		umull	r2, r3, r3, r6
 10702 0918 5B08     		lsrs	r3, r3, #1
 355:src/display.c **** #endif
 10703              		.loc 1 355 38 view .LVU3466
 10704 091a 1E4A     		ldr	r2, .L1184+32
 355:src/display.c **** #endif
 10705              		.loc 1 355 35 view .LVU3467
 10706 091c 0133     		adds	r3, r3, #1
 10707              	.LBE640:
 10708              	.LBE642:
 10709              	.LBE644:
 10710              	.LBE646:
2436:src/display.c **** 	      set_dig(j, 8);
 10711              		.loc 1 2436 9 view .LVU3468
 10712 091e BBF1040F 		cmp	fp, #4
 10713              	.LBB647:
 10714              	.LBB645:
 10715              	.LBB643:
 10716              	.LBB641:
 355:src/display.c **** #endif
 10717              		.loc 1 355 38 view .LVU3469
 10718 0922 02F81310 		strb	r1, [r2, r3, lsl #1]
 358:src/display.c **** }
 10719              		.loc 1 358 3 is_stmt 1 view .LVU3470
 10720              	.LVL1218:
 358:src/display.c **** }
 10721              		.loc 1 358 3 is_stmt 0 view .LVU3471
 10722              	.LBE641:
 10723              	.LBE643:
 358:src/display.c **** }
 10724              		.loc 1 358 3 is_stmt 1 view .LVU3472
 358:src/display.c **** }
 10725              		.loc 1 358 3 is_stmt 0 view .LVU3473
 10726              	.LBE645:
 10727              	.LBE647:
2435:src/display.c **** 	    if (i == 4) {
 10728              		.loc 1 2435 6 is_stmt 1 view .LVU3474
2436:src/display.c **** 	      set_dig(j, 8);
 10729              		.loc 1 2436 6 view .LVU3475
2436:src/display.c **** 	      set_dig(j, 8);
 10730              		.loc 1 2436 9 is_stmt 0 view .LVU3476
 10731 0926 6CD0     		beq	.L1171
2435:src/display.c **** 	    if (i == 4) {
 10732              		.loc 1 2435 8 view .LVU3477
 10733 0928 3E46     		mov	r6, r7
 10734              	.LVL1219:
 10735              	.L917:
2435:src/display.c **** 	    if (i == 4) {
 10736              		.loc 1 2435 8 view .LVU3478
 10737              	.LBE656:
2423:src/display.c **** 	    int k = i + base - start;
 10738              		.loc 1 2423 39 is_stmt 1 view .LVU3479
 10739 092a 019B     		ldr	r3, [sp, #4]
2423:src/display.c **** 	    int k = i + base - start;
 10740              		.loc 1 2423 4 is_stmt 0 view .LVU3480
ARM GAS  /tmp/cchyQ5Gz.s 			page 310


 10741 092c 0499     		ldr	r1, [sp, #16]
 10742 092e 0133     		adds	r3, r3, #1
 10743 0930 0193     		str	r3, [sp, #4]
2423:src/display.c **** 	    int k = i + base - start;
 10744              		.loc 1 2423 40 view .LVU3481
 10745 0932 029B     		ldr	r3, [sp, #8]
2423:src/display.c **** 	    int k = i + base - start;
 10746              		.loc 1 2423 4 view .LVU3482
 10747 0934 8B42     		cmp	r3, r1
2423:src/display.c **** 	    int k = i + base - start;
 10748              		.loc 1 2423 40 view .LVU3483
 10749 0936 9B46     		mov	fp, r3
 10750              	.LVL1220:
2423:src/display.c **** 	    int k = i + base - start;
 10751              		.loc 1 2423 20 is_stmt 1 view .LVU3484
2423:src/display.c **** 	    int k = i + base - start;
 10752              		.loc 1 2423 4 is_stmt 0 view .LVU3485
 10753 0938 36D0     		beq	.L1124
2423:src/display.c **** 	    int k = i + base - start;
 10754              		.loc 1 2423 4 view .LVU3486
 10755 093a 0133     		adds	r3, r3, #1
 10756              	.LVL1221:
2423:src/display.c **** 	    int k = i + base - start;
 10757              		.loc 1 2423 4 view .LVU3487
 10758 093c 0293     		str	r3, [sp, #8]
 10759              	.LVL1222:
 10760              	.L918:
 10761              	.LBB657:
2424:src/display.c **** 	    int l = get_user_flag(k);
 10762              		.loc 1 2424 6 is_stmt 1 view .LVU3488
2425:src/display.c **** 	    k += group;
 10763              		.loc 1 2425 6 view .LVU3489
2425:src/display.c **** 	    k += group;
 10764              		.loc 1 2425 14 is_stmt 0 view .LVU3490
 10765 093e 069B     		ldr	r3, [sp, #24]
 10766 0940 03EB0B00 		add	r0, r3, fp
 10767 0944 FFF7FEFF 		bl	get_user_flag
 10768              	.LVL1223:
2427:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10769              		.loc 1 2427 9 view .LVU3491
 10770 0948 019B     		ldr	r3, [sp, #4]
 10771 094a 4345     		cmp	r3, r8
2425:src/display.c **** 	    k += group;
 10772              		.loc 1 2425 14 view .LVU3492
 10773 094c 0546     		mov	r5, r0
 10774              	.LVL1224:
2426:src/display.c **** 	    if (end >= k) {
 10775              		.loc 1 2426 6 is_stmt 1 view .LVU3493
2427:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10776              		.loc 1 2427 6 view .LVU3494
2435:src/display.c **** 	    if (i == 4) {
 10777              		.loc 1 2435 8 is_stmt 0 view .LVU3495
 10778 094e 06F10907 		add	r7, r6, #9
2427:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10779              		.loc 1 2427 9 view .LVU3496
 10780 0952 D6DC     		bgt	.L916
2428:src/display.c **** 	      k += group;
ARM GAS  /tmp/cchyQ5Gz.s 			page 311


 10781              		.loc 1 2428 8 is_stmt 1 view .LVU3497
2428:src/display.c **** 	      k += group;
 10782              		.loc 1 2428 14 is_stmt 0 view .LVU3498
 10783 0954 1846     		mov	r0, r3
 10784              	.LVL1225:
2428:src/display.c **** 	      k += group;
 10785              		.loc 1 2428 14 view .LVU3499
 10786 0956 FFF7FEFF 		bl	get_user_flag
 10787              	.LVL1226:
2428:src/display.c **** 	      k += group;
 10788              		.loc 1 2428 14 view .LVU3500
 10789 095a 059B     		ldr	r3, [sp, #20]
 10790 095c 5B44     		add	r3, r3, fp
2430:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10791              		.loc 1 2430 11 view .LVU3501
 10792 095e 9845     		cmp	r8, r3
2428:src/display.c **** 	      k += group;
 10793              		.loc 1 2428 10 view .LVU3502
 10794 0960 45EA4005 		orr	r5, r5, r0, lsl #1
 10795              	.LVL1227:
2429:src/display.c **** 	      if (end >= k)
 10796              		.loc 1 2429 8 is_stmt 1 view .LVU3503
2430:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10797              		.loc 1 2430 8 view .LVU3504
2430:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10798              		.loc 1 2430 11 is_stmt 0 view .LVU3505
 10799 0964 CDDB     		blt	.L916
2431:src/display.c **** 	    }
 10800              		.loc 1 2431 3 is_stmt 1 view .LVU3506
2431:src/display.c **** 	    }
 10801              		.loc 1 2431 9 is_stmt 0 view .LVU3507
 10802 0966 1846     		mov	r0, r3
 10803 0968 FFF7FEFF 		bl	get_user_flag
 10804              	.LVL1228:
2431:src/display.c **** 	    }
 10805              		.loc 1 2431 5 view .LVU3508
 10806 096c 45EA8005 		orr	r5, r5, r0, lsl #2
 10807              	.LVL1229:
2431:src/display.c **** 	    }
 10808              		.loc 1 2431 5 view .LVU3509
 10809 0970 C7E7     		b	.L916
 10810              	.L1185:
 10811 0972 00BF     		.align	2
 10812              	.L1184:
 10813 0974 BC000000 		.word	.LC25
 10814 0978 3C000000 		.word	.LC27
 10815 097c 00000000 		.word	DispPlot
 10816 0980 00000000 		.word	DispMsg
 10817 0984 00000000 		.word	ShowRegister
 10818 0988 00000000 		.word	WasDataEntry
 10819 098c 00000000 		.word	multicmds
 10820 0990 00000000 		.word	.LANCHOR22
 10821 0994 00000000 		.word	LastDisplayedNumber
 10822 0998 40000000 		.word	.LC28
 10823 099c 8C000000 		.word	.LC36
 10824 09a0 398EE338 		.word	954437177
 10825 09a4 00000000 		.word	.LANCHOR23
ARM GAS  /tmp/cchyQ5Gz.s 			page 312


 10826              	.LVL1230:
 10827              	.L1124:
2431:src/display.c **** 	    }
 10828              		.loc 1 2431 5 view .LVU3510
 10829 09a8 079D     		ldr	r5, [sp, #28]
 10830              	.LVL1231:
 10831              	.L909:
2431:src/display.c **** 	    }
 10832              		.loc 1 2431 5 view .LVU3511
 10833              	.LBE657:
 10834              	.LBE628:
2444:src/display.c **** 	pc = state_pc();
 10835              		.loc 1 2444 2 is_stmt 1 view .LVU3512
2445:src/display.c **** 	if (isXROM(pc))
 10836              		.loc 1 2445 2 view .LVU3513
2445:src/display.c **** 	if (isXROM(pc))
 10837              		.loc 1 2445 7 is_stmt 0 view .LVU3514
 10838 09aa D9F80030 		ldr	r3, [r9]
2445:src/display.c **** 	if (isXROM(pc))
 10839              		.loc 1 2445 5 view .LVU3515
 10840 09ae B3F8E077 		ldrh	r7, [r3, #2016]
 10841              	.LVL1232:
2446:src/display.c **** 	  pc = 1;
 10842              		.loc 1 2446 2 is_stmt 1 view .LVU3516
2446:src/display.c **** 	  pc = 1;
 10843              		.loc 1 2446 6 is_stmt 0 view .LVU3517
 10844 09b2 BB0B     		lsrs	r3, r7, #14
2447:src/display.c **** 	for (n=i=0; i<4; i++) {
 10845              		.loc 1 2447 7 view .LVU3518
 10846 09b4 032B     		cmp	r3, #3
 10847 09b6 08BF     		it	eq
 10848 09b8 0127     		moveq	r7, #1
 10849              	.LVL1233:
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10850              		.loc 1 2448 2 is_stmt 1 view .LVU3519
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10851              		.loc 1 2448 14 view .LVU3520
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10852              		.loc 1 2448 8 is_stmt 0 view .LVU3521
 10853 09ba 4FF00009 		mov	r9, #0
 10854 09be 6426     		movs	r6, #100
2444:src/display.c **** 	pc = state_pc();
 10855              		.loc 1 2444 4 view .LVU3522
 10856 09c0 4FF06C08 		mov	r8, #108
 10857              	.LVL1234:
 10858              	.L922:
2449:src/display.c **** 	    if (++n == 4) {
 10859              		.loc 1 2449 4 is_stmt 1 view .LVU3523
2449:src/display.c **** 	    if (++n == 4) {
 10860              		.loc 1 2449 8 is_stmt 0 view .LVU3524
 10861 09c4 0222     		movs	r2, #2
 10862 09c6 3146     		mov	r1, r6
 10863 09c8 3846     		mov	r0, r7
 10864 09ca FFF7FEFF 		bl	find_label_from
 10865              	.LVL1235:
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10866              		.loc 1 2450 6 is_stmt 1 view .LVU3525
ARM GAS  /tmp/cchyQ5Gz.s 			page 313


2449:src/display.c **** 	    if (++n == 4) {
 10867              		.loc 1 2449 7 is_stmt 0 view .LVU3526
 10868 09ce 58B1     		cbz	r0, .L920
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10869              		.loc 1 2450 9 view .LVU3527
 10870 09d0 09F10109 		add	r9, r9, #1
 10871              	.LVL1236:
2454:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10872              		.loc 1 2454 8 is_stmt 1 view .LVU3528
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10873              		.loc 1 2450 9 is_stmt 0 view .LVU3529
 10874 09d4 B9F1040F 		cmp	r9, #4
2454:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10875              		.loc 1 2454 8 view .LVU3530
 10876 09d8 A6F12301 		sub	r1, r6, #35
 10877 09dc 4046     		mov	r0, r8
2450:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10878              		.loc 1 2450 9 view .LVU3531
 10879 09de 07D0     		beq	.L1172
2454:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10880              		.loc 1 2454 8 view .LVU3532
 10881 09e0 FFF7FEFF 		bl	set_dig
 10882              	.LVL1237:
2455:src/display.c **** 	    }
 10883              		.loc 1 2455 8 is_stmt 1 view .LVU3533
2455:src/display.c **** 	    }
 10884              		.loc 1 2455 10 is_stmt 0 view .LVU3534
 10885 09e4 08F10708 		add	r8, r8, #7
 10886              	.LVL1238:
 10887              	.L920:
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10888              		.loc 1 2448 19 is_stmt 1 view .LVU3535
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10889              		.loc 1 2448 14 view .LVU3536
 10890 09e8 0136     		adds	r6, r6, #1
 10891              	.LVL1239:
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10892              		.loc 1 2448 2 is_stmt 0 view .LVU3537
 10893 09ea 682E     		cmp	r6, #104
 10894 09ec EAD1     		bne	.L922
2448:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10895              		.loc 1 2448 2 view .LVU3538
 10896 09ee 42E7     		b	.L1139
 10897              	.LVL1240:
 10898              	.L1172:
2451:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10899              		.loc 1 2451 8 is_stmt 1 view .LVU3539
 10900 09f0 4C21     		movs	r1, #76
 10901 09f2 7320     		movs	r0, #115
 10902              	.LVL1241:
2451:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10903              		.loc 1 2451 8 is_stmt 0 view .LVU3540
 10904 09f4 FFF7FEFF 		bl	set_dig
 10905              	.LVL1242:
2452:src/display.c **** 	    } else {
 10906              		.loc 1 2452 8 is_stmt 1 view .LVU3541
 10907 09f8 4C21     		movs	r1, #76
ARM GAS  /tmp/cchyQ5Gz.s 			page 314


 10908 09fa 7A20     		movs	r0, #122
 10909 09fc FFF7FEFF 		bl	set_dig
 10910              	.LVL1243:
 10911 0a00 F2E7     		b	.L920
 10912              	.LVL1244:
 10913              	.L1171:
 10914              	.LBB659:
 10915              	.LBB658:
2437:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10916              		.loc 1 2437 8 view .LVU3542
 10917 0a02 0821     		movs	r1, #8
 10918 0a04 3846     		mov	r0, r7
 10919 0a06 FFF7FEFF 		bl	set_dig
 10920              	.LVL1245:
2438:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10921              		.loc 1 2438 8 view .LVU3543
 10922              	.LBB648:
 10923              	.LBI648:
 347:src/display.c ****   if (res) {
 10924              		.loc 1 347 14 view .LVU3544
 10925              	.LBB649:
 348:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10926              		.loc 1 348 3 view .LVU3545
 351:src/display.c ****     if (decimal != DECIMAL_DOT)
 10927              		.loc 1 351 5 view .LVU3546
 10928 0a0a 06F11000 		add	r0, r6, #16
 10929 0a0e FFF7FEFF 		bl	set_dot
 10930              	.LVL1246:
 352:src/display.c ****       set_dot(posn+8);
 10931              		.loc 1 352 5 view .LVU3547
 10932              	.LBB650:
 10933              	.LBI650:
 347:src/display.c ****   if (res) {
 10934              		.loc 1 347 14 view .LVU3548
 10935              	.LBB651:
 355:src/display.c **** #endif
 10936              		.loc 1 355 5 view .LVU3549
 355:src/display.c **** #endif
 10937              		.loc 1 355 30 is_stmt 0 view .LVU3550
 10938 0a12 C04B     		ldr	r3, .L1186
 355:src/display.c **** #endif
 10939              		.loc 1 355 38 view .LVU3551
 10940 0a14 0399     		ldr	r1, [sp, #12]
 355:src/display.c **** #endif
 10941              		.loc 1 355 30 view .LVU3552
 10942 0a16 A3FB0723 		umull	r2, r3, r3, r7
 10943 0a1a 5B08     		lsrs	r3, r3, #1
 355:src/display.c **** #endif
 10944              		.loc 1 355 38 view .LVU3553
 10945 0a1c BE4A     		ldr	r2, .L1186+4
 355:src/display.c **** #endif
 10946              		.loc 1 355 35 view .LVU3554
 10947 0a1e 0133     		adds	r3, r3, #1
 10948              	.LBE651:
 10949              	.LBE650:
 10950              	.LBE649:
 10951              	.LBE648:
ARM GAS  /tmp/cchyQ5Gz.s 			page 315


2439:src/display.c **** 	    }
 10952              		.loc 1 2439 10 view .LVU3555
 10953 0a20 1236     		adds	r6, r6, #18
 10954              	.LBB655:
 10955              	.LBB654:
 10956              	.LBB653:
 10957              	.LBB652:
 355:src/display.c **** #endif
 10958              		.loc 1 355 38 view .LVU3556
 10959 0a22 02F81310 		strb	r1, [r2, r3, lsl #1]
 358:src/display.c **** }
 10960              		.loc 1 358 3 is_stmt 1 view .LVU3557
 10961              	.LVL1247:
 358:src/display.c **** }
 10962              		.loc 1 358 3 is_stmt 0 view .LVU3558
 10963              	.LBE652:
 10964              	.LBE653:
 358:src/display.c **** }
 10965              		.loc 1 358 3 is_stmt 1 view .LVU3559
 358:src/display.c **** }
 10966              		.loc 1 358 3 is_stmt 0 view .LVU3560
 10967              	.LBE654:
 10968              	.LBE655:
2439:src/display.c **** 	    }
 10969              		.loc 1 2439 8 is_stmt 1 view .LVU3561
2439:src/display.c **** 	    }
 10970              		.loc 1 2439 8 is_stmt 0 view .LVU3562
 10971 0a26 80E7     		b	.L917
 10972              	.LVL1248:
 10973              	.L1170:
2439:src/display.c **** 	    }
 10974              		.loc 1 2439 8 view .LVU3563
 10975              	.LBE658:
2409:src/display.c **** 	    end = regK_idx;
 10976              		.loc 1 2409 6 is_stmt 1 view .LVU3564
2410:src/display.c **** 	    start = 3;
 10977              		.loc 1 2410 6 view .LVU3565
2411:src/display.c **** 	    group = 4;
 10978              		.loc 1 2411 6 view .LVU3566
2412:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 10979              		.loc 1 2412 6 view .LVU3567
2413:src/display.c **** 	  }
 10980              		.loc 1 2413 6 view .LVU3568
 10981 0a28 BC48     		ldr	r0, .L1186+8
 10982 0a2a FFF7FEFF 		bl	set_status
 10983              	.LVL1249:
2411:src/display.c **** 	    group = 4;
 10984              		.loc 1 2411 12 is_stmt 0 view .LVU3569
 10985 0a2e 4FF0030B 		mov	fp, #3
 10986              	.LVL1250:
2412:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 10987              		.loc 1 2412 12 view .LVU3570
 10988 0a32 0423     		movs	r3, #4
2410:src/display.c **** 	    start = 3;
 10989              		.loc 1 2410 10 view .LVU3571
 10990 0a34 4FF06F08 		mov	r8, #111
2409:src/display.c **** 	    end = regK_idx;
ARM GAS  /tmp/cchyQ5Gz.s 			page 316


 10991              		.loc 1 2409 11 view .LVU3572
 10992 0a38 6427     		movs	r7, #100
 10993              	.LVL1251:
2409:src/display.c **** 	    end = regK_idx;
 10994              		.loc 1 2409 11 view .LVU3573
 10995 0a3a 43E7     		b	.L914
 10996              	.LVL1252:
 10997              	.L1169:
2399:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 10998              		.loc 1 2399 6 is_stmt 1 view .LVU3574
2399:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 10999              		.loc 1 2399 11 is_stmt 0 view .LVU3575
 11000 0a3c 0A26     		movs	r6, #10
 11001 0a3e 06FB03F7 		mul	r7, r6, r3
 11002              	.LVL1253:
2400:src/display.c **** 	    p = scopy(buf, "FL ");
 11003              		.loc 1 2400 6 is_stmt 1 view .LVU3576
2400:src/display.c **** 	    p = scopy(buf, "FL ");
 11004              		.loc 1 2400 28 is_stmt 0 view .LVU3577
 11005 0a42 462F     		cmp	r7, #70
2401:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11006              		.loc 1 2401 10 view .LVU3578
 11007 0a44 B649     		ldr	r1, .L1186+12
 11008 0a46 17A8     		add	r0, sp, #92
 11009              	.LVL1254:
2400:src/display.c **** 	    p = scopy(buf, "FL ");
 11010              		.loc 1 2400 28 view .LVU3579
 11011 0a48 B846     		mov	r8, r7
 11012 0a4a A8BF     		it	ge
 11013 0a4c 4FF04608 		movge	r8, #70
2401:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11014              		.loc 1 2401 10 view .LVU3580
 11015 0a50 FFF7FEFF 		bl	scopy
 11016              	.LVL1255:
2402:src/display.c **** 	    *p++ = '-';
 11017              		.loc 1 2402 10 view .LVU3581
 11018 0a54 3946     		mov	r1, r7
 11019 0a56 0222     		movs	r2, #2
 11020 0a58 FFF7FEFF 		bl	num_arg_0
 11021              	.LVL1256:
2400:src/display.c **** 	    p = scopy(buf, "FL ");
 11022              		.loc 1 2400 10 view .LVU3582
 11023 0a5c 08F11D08 		add	r8, r8, #29
 11024              	.LVL1257:
2401:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11025              		.loc 1 2401 6 is_stmt 1 view .LVU3583
2402:src/display.c **** 	    *p++ = '-';
 11026              		.loc 1 2402 6 view .LVU3584
2403:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11027              		.loc 1 2403 6 view .LVU3585
2403:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11028              		.loc 1 2403 11 is_stmt 0 view .LVU3586
 11029 0a60 2D23     		movs	r3, #45
 11030 0a62 00F8013B 		strb	r3, [r0], #1
 11031              	.LVL1258:
2404:src/display.c **** 	    *p = '\0';
 11032              		.loc 1 2404 6 is_stmt 1 view .LVU3587
ARM GAS  /tmp/cchyQ5Gz.s 			page 317


2404:src/display.c **** 	    *p = '\0';
 11033              		.loc 1 2404 10 is_stmt 0 view .LVU3588
 11034 0a66 4146     		mov	r1, r8
 11035 0a68 0222     		movs	r2, #2
 11036 0a6a FFF7FEFF 		bl	num_arg_0
 11037              	.LVL1259:
2404:src/display.c **** 	    *p = '\0';
 11038              		.loc 1 2404 10 view .LVU3589
 11039 0a6e 0246     		mov	r2, r0
 11040              	.LVL1260:
2405:src/display.c **** 	    set_status(buf);
 11041              		.loc 1 2405 6 is_stmt 1 view .LVU3590
2405:src/display.c **** 	    set_status(buf);
 11042              		.loc 1 2405 9 is_stmt 0 view .LVU3591
 11043 0a70 4FF0000B 		mov	fp, #0
 11044              	.LVL1261:
2406:src/display.c **** 	  }
 11045              		.loc 1 2406 6 view .LVU3592
 11046 0a74 17A8     		add	r0, sp, #92
 11047              	.LVL1262:
2405:src/display.c **** 	    set_status(buf);
 11048              		.loc 1 2405 9 view .LVU3593
 11049 0a76 82F800B0 		strb	fp, [r2]
2406:src/display.c **** 	  }
 11050              		.loc 1 2406 6 is_stmt 1 view .LVU3594
2395:src/display.c **** 	  int start = 0;
 11051              		.loc 1 2395 8 is_stmt 0 view .LVU3595
 11052 0a7a 0196     		str	r6, [sp, #4]
2406:src/display.c **** 	  }
 11053              		.loc 1 2406 6 view .LVU3596
 11054 0a7c FFF7FEFF 		bl	set_status
 11055              	.LVL1263:
2406:src/display.c **** 	  }
 11056              		.loc 1 2406 6 view .LVU3597
 11057 0a80 019B     		ldr	r3, [sp, #4]
 11058 0a82 1FE7     		b	.L914
 11059              	.LVL1264:
 11060              	.L1168:
2406:src/display.c **** 	  }
 11061              		.loc 1 2406 6 view .LVU3598
 11062              	.LBE659:
2378:src/display.c **** 	  if (SizeStatRegs)
 11063              		.loc 1 2378 4 is_stmt 1 view .LVU3599
2378:src/display.c **** 	  if (SizeStatRegs)
 11064              		.loc 1 2378 8 is_stmt 0 view .LVU3600
 11065 0a84 17AF     		add	r7, sp, #92
 11066              	.LVL1265:
2378:src/display.c **** 	  if (SizeStatRegs)
 11067              		.loc 1 2378 8 view .LVU3601
 11068 0a86 A749     		ldr	r1, .L1186+16
 11069 0a88 3846     		mov	r0, r7
 11070 0a8a FFF7FEFF 		bl	scopy
 11071              	.LVL1266:
2379:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11072              		.loc 1 2379 8 view .LVU3602
 11073 0a8e A64A     		ldr	r2, .L1186+20
2379:src/display.c **** 	    p = scopy(p, " \221\006\006+");
ARM GAS  /tmp/cchyQ5Gz.s 			page 318


 11074              		.loc 1 2379 7 view .LVU3603
 11075 0a90 1268     		ldr	r2, [r2]
2378:src/display.c **** 	  if (SizeStatRegs)
 11076              		.loc 1 2378 8 view .LVU3604
 11077 0a92 0346     		mov	r3, r0
 11078              	.LVL1267:
2379:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11079              		.loc 1 2379 4 is_stmt 1 view .LVU3605
2379:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11080              		.loc 1 2379 7 is_stmt 0 view .LVU3606
 11081 0a94 002A     		cmp	r2, #0
 11082 0a96 61D1     		bne	.L1173
 11083              	.L911:
2381:src/display.c **** 	  set_status(buf);
 11084              		.loc 1 2381 4 is_stmt 1 view .LVU3607
2381:src/display.c **** 	  set_status(buf);
 11085              		.loc 1 2381 7 is_stmt 0 view .LVU3608
 11086 0a98 0022     		movs	r2, #0
 11087 0a9a 1A70     		strb	r2, [r3]
2382:src/display.c **** 
 11088              		.loc 1 2382 4 is_stmt 1 view .LVU3609
 11089 0a9c 3846     		mov	r0, r7
 11090              	.LVL1268:
2382:src/display.c **** 
 11091              		.loc 1 2382 4 is_stmt 0 view .LVU3610
 11092 0a9e FFF7FEFF 		bl	set_status
 11093              	.LVL1269:
2385:src/display.c **** 	  if (LocalRegs < 0) {
 11094              		.loc 1 2385 4 is_stmt 1 view .LVU3611
2385:src/display.c **** 	  if (LocalRegs < 0) {
 11095              		.loc 1 2385 8 is_stmt 0 view .LVU3612
 11096 0aa2 FFF7FEFF 		bl	global_regs
 11097              	.LVL1270:
 11098 0aa6 0146     		mov	r1, r0
 11099 0aa8 3846     		mov	r0, r7
 11100 0aaa FFF7FEFF 		bl	num_arg
 11101              	.LVL1271:
2386:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11102              		.loc 1 2386 8 view .LVU3613
 11103 0aae D9F80020 		ldr	r2, [r9]
2386:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11104              		.loc 1 2386 7 view .LVU3614
 11105 0ab2 B2F9DE27 		ldrsh	r2, [r2, #2014]
 11106 0ab6 002A     		cmp	r2, #0
2385:src/display.c **** 	  if (LocalRegs < 0) {
 11107              		.loc 1 2385 8 view .LVU3615
 11108 0ab8 0346     		mov	r3, r0
 11109              	.LVL1272:
2386:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11110              		.loc 1 2386 4 is_stmt 1 view .LVU3616
2386:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11111              		.loc 1 2386 7 is_stmt 0 view .LVU3617
 11112 0aba 43DB     		blt	.L1174
 11113              	.L912:
2390:src/display.c **** 	  set_digits_string(buf, 0);
 11114              		.loc 1 2390 4 is_stmt 1 view .LVU3618
2390:src/display.c **** 	  set_digits_string(buf, 0);
ARM GAS  /tmp/cchyQ5Gz.s 			page 319


 11115              		.loc 1 2390 7 is_stmt 0 view .LVU3619
 11116 0abc 0021     		movs	r1, #0
2391:src/display.c **** 	} else {
 11117              		.loc 1 2391 4 view .LVU3620
 11118 0abe 3846     		mov	r0, r7
 11119              	.LVL1273:
2390:src/display.c **** 	  set_digits_string(buf, 0);
 11120              		.loc 1 2390 7 view .LVU3621
 11121 0ac0 1970     		strb	r1, [r3]
2391:src/display.c **** 	} else {
 11122              		.loc 1 2391 4 is_stmt 1 view .LVU3622
 11123 0ac2 FFF7FEFF 		bl	set_digits_string
 11124              	.LVL1274:
2391:src/display.c **** 	} else {
 11125              		.loc 1 2391 4 is_stmt 0 view .LVU3623
 11126 0ac6 70E7     		b	.L909
 11127              	.LVL1275:
 11128              	.L1167:
2369:src/display.c **** 	  p = num_arg(buf, free_mem());
 11129              		.loc 1 2369 4 is_stmt 1 view .LVU3624
 11130 0ac8 9848     		ldr	r0, .L1186+24
 11131 0aca FFF7FEFF 		bl	set_status
 11132              	.LVL1276:
2370:src/display.c **** 	  p = scopy(p, " , FL. ");
 11133              		.loc 1 2370 4 view .LVU3625
2370:src/display.c **** 	  p = scopy(p, " , FL. ");
 11134              		.loc 1 2370 21 is_stmt 0 view .LVU3626
 11135 0ace FFF7FEFF 		bl	free_mem
 11136              	.LVL1277:
 11137 0ad2 0146     		mov	r1, r0
2370:src/display.c **** 	  p = scopy(p, " , FL. ");
 11138              		.loc 1 2370 8 view .LVU3627
 11139 0ad4 17A8     		add	r0, sp, #92
 11140              	.LVL1278:
2370:src/display.c **** 	  p = scopy(p, " , FL. ");
 11141              		.loc 1 2370 8 view .LVU3628
 11142 0ad6 FFF7FEFF 		bl	num_arg
 11143              	.LVL1279:
2371:src/display.c **** 	  p = num_arg(p, free_flash());
 11144              		.loc 1 2371 4 is_stmt 1 view .LVU3629
2371:src/display.c **** 	  p = num_arg(p, free_flash());
 11145              		.loc 1 2371 8 is_stmt 0 view .LVU3630
 11146 0ada 9549     		ldr	r1, .L1186+28
 11147 0adc FFF7FEFF 		bl	scopy
 11148              	.LVL1280:
2371:src/display.c **** 	  p = num_arg(p, free_flash());
 11149              		.loc 1 2371 8 view .LVU3631
 11150 0ae0 0646     		mov	r6, r0
 11151              	.LVL1281:
2372:src/display.c **** 	  *p = '\0';
 11152              		.loc 1 2372 4 is_stmt 1 view .LVU3632
2372:src/display.c **** 	  *p = '\0';
 11153              		.loc 1 2372 19 is_stmt 0 view .LVU3633
 11154 0ae2 FFF7FEFF 		bl	free_flash
 11155              	.LVL1282:
2372:src/display.c **** 	  *p = '\0';
 11156              		.loc 1 2372 19 view .LVU3634
ARM GAS  /tmp/cchyQ5Gz.s 			page 320


 11157 0ae6 0146     		mov	r1, r0
2372:src/display.c **** 	  *p = '\0';
 11158              		.loc 1 2372 8 view .LVU3635
 11159 0ae8 3046     		mov	r0, r6
 11160 0aea FFF7FEFF 		bl	num_arg
 11161              	.LVL1283:
 11162 0aee 0346     		mov	r3, r0
 11163              	.LVL1284:
2373:src/display.c **** 	  set_digits_string(buf, 0);
 11164              		.loc 1 2373 4 is_stmt 1 view .LVU3636
2373:src/display.c **** 	  set_digits_string(buf, 0);
 11165              		.loc 1 2373 7 is_stmt 0 view .LVU3637
 11166 0af0 0021     		movs	r1, #0
2374:src/display.c **** 	}
 11167              		.loc 1 2374 4 view .LVU3638
 11168 0af2 17A8     		add	r0, sp, #92
 11169              	.LVL1285:
2373:src/display.c **** 	  set_digits_string(buf, 0);
 11170              		.loc 1 2373 7 view .LVU3639
 11171 0af4 1970     		strb	r1, [r3]
2374:src/display.c **** 	}
 11172              		.loc 1 2374 4 is_stmt 1 view .LVU3640
 11173 0af6 FFF7FEFF 		bl	set_digits_string
 11174              	.LVL1286:
2374:src/display.c **** 	}
 11175              		.loc 1 2374 4 is_stmt 0 view .LVU3641
 11176 0afa 56E7     		b	.L909
 11177              	.LVL1287:
 11178              	.L1165:
2374:src/display.c **** 	}
 11179              		.loc 1 2374 4 view .LVU3642
 11180              	.LBE627:
 11181              	.LBE626:
2821:src/display.c **** 	    annunciators();
 11182              		.loc 1 2821 56 discriminator 2 view .LVU3643
 11183 0afc D9F80030 		ldr	r3, [r9]
 11184 0b00 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 11185 0b04 DE07     		lsls	r6, r3, #31
 11186 0b06 7FF591AE 		bpl	.L938
 11187              	.L937:
2822:src/display.c **** 	  }
 11188              		.loc 1 2822 6 is_stmt 1 view .LVU3644
 11189 0b0a FFF7FEFF 		bl	annunciators
 11190              	.LVL1288:
 11191 0b0e B2E6     		b	.L1139
 11192              	.LVL1289:
 11193              	.L930:
 11194              	.LBB661:
 11195              	.LBB618:
2511:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11196              		.loc 1 2511 4 view .LVU3645
 11197 0b10 17AF     		add	r7, sp, #92
 11198 0b12 1022     		movs	r2, #16
 11199 0b14 3846     		mov	r0, r7
 11200 0b16 FFF7FEFF 		bl	xset
 11201              	.LVL1290:
2515:src/display.c **** #endif
ARM GAS  /tmp/cchyQ5Gz.s 			page 321


 11202              		.loc 1 2515 4 view .LVU3646
2515:src/display.c **** #endif
 11203              		.loc 1 2515 9 is_stmt 0 view .LVU3647
 11204 0b1a 8649     		ldr	r1, .L1186+32
 11205 0b1c 3846     		mov	r0, r7
 11206 0b1e FFF7FEFF 		bl	scopy_spc
 11207              	.LVL1291:
2517:src/display.c **** 	    *bp++ = '.';
 11208              		.loc 1 2517 8 view .LVU3648
 11209 0b22 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11210              	.LVL1292:
2517:src/display.c **** 	    *bp++ = '.';
 11211              		.loc 1 2517 4 is_stmt 1 view .LVU3649
2517:src/display.c **** 	    *bp++ = '.';
 11212              		.loc 1 2517 7 is_stmt 0 view .LVU3650
 11213 0b24 DB07     		lsls	r3, r3, #31
 11214 0b26 23D5     		bpl	.L932
2518:src/display.c **** 	    if (n >= 100) {
 11215              		.loc 1 2518 6 is_stmt 1 view .LVU3651
 11216              	.LVL1293:
2518:src/display.c **** 	    if (n >= 100) {
 11217              		.loc 1 2518 12 is_stmt 0 view .LVU3652
 11218 0b28 2E23     		movs	r3, #46
2519:src/display.c **** 	      *bp++ = '1';
 11219              		.loc 1 2519 9 view .LVU3653
 11220 0b2a BBF1630F 		cmp	fp, #99
2518:src/display.c **** 	    if (n >= 100) {
 11221              		.loc 1 2518 12 view .LVU3654
 11222 0b2e 0370     		strb	r3, [r0]
2519:src/display.c **** 	      *bp++ = '1';
 11223              		.loc 1 2519 6 is_stmt 1 view .LVU3655
2519:src/display.c **** 	      *bp++ = '1';
 11224              		.loc 1 2519 9 is_stmt 0 view .LVU3656
 11225 0b30 19DC     		bgt	.L933
2518:src/display.c **** 	    if (n >= 100) {
 11226              		.loc 1 2518 9 view .LVU3657
 11227 0b32 0130     		adds	r0, r0, #1
 11228              	.LVL1294:
 11229              	.L934:
2525:src/display.c **** 	  else
 11230              		.loc 1 2525 6 is_stmt 1 view .LVU3658
2525:src/display.c **** 	  else
 11231              		.loc 1 2525 11 is_stmt 0 view .LVU3659
 11232 0b34 5946     		mov	r1, fp
 11233 0b36 0222     		movs	r2, #2
 11234 0b38 FFF7FEFF 		bl	num_arg_0
 11235              	.LVL1295:
 11236              	.L936:
2528:src/display.c **** 	}
 11237              		.loc 1 2528 4 is_stmt 1 view .LVU3660
 11238 0b3c 3846     		mov	r0, r7
 11239 0b3e FFF7FEFF 		bl	set_status
 11240              	.LVL1296:
 11241 0b42 68E6     		b	.L931
 11242              	.LVL1297:
 11243              	.L1174:
2528:src/display.c **** 	}
ARM GAS  /tmp/cchyQ5Gz.s 			page 322


 11244              		.loc 1 2528 4 is_stmt 0 view .LVU3661
 11245              	.LBE618:
 11246              	.LBE661:
 11247              	.LBB662:
 11248              	.LBB660:
2387:src/display.c **** 	    p = num_arg(p, local_regs());
 11249              		.loc 1 2387 6 is_stmt 1 view .LVU3662
2387:src/display.c **** 	    p = num_arg(p, local_regs());
 11250              		.loc 1 2387 10 is_stmt 0 view .LVU3663
 11251 0b44 7C49     		ldr	r1, .L1186+36
 11252 0b46 FFF7FEFF 		bl	scopy
 11253              	.LVL1298:
2387:src/display.c **** 	    p = num_arg(p, local_regs());
 11254              		.loc 1 2387 10 view .LVU3664
 11255 0b4a 0646     		mov	r6, r0
 11256              	.LVL1299:
2388:src/display.c **** 	  }
 11257              		.loc 1 2388 6 is_stmt 1 view .LVU3665
2388:src/display.c **** 	  }
 11258              		.loc 1 2388 21 is_stmt 0 view .LVU3666
 11259 0b4c FFF7FEFF 		bl	local_regs
 11260              	.LVL1300:
2388:src/display.c **** 	  }
 11261              		.loc 1 2388 21 view .LVU3667
 11262 0b50 0146     		mov	r1, r0
2388:src/display.c **** 	  }
 11263              		.loc 1 2388 10 view .LVU3668
 11264 0b52 3046     		mov	r0, r6
 11265 0b54 FFF7FEFF 		bl	num_arg
 11266              	.LVL1301:
 11267 0b58 0346     		mov	r3, r0
 11268              	.LVL1302:
2388:src/display.c **** 	  }
 11269              		.loc 1 2388 10 view .LVU3669
 11270 0b5a AFE7     		b	.L912
 11271              	.L1173:
2380:src/display.c **** 	  *p = '\0';
 11272              		.loc 1 2380 6 is_stmt 1 view .LVU3670
2380:src/display.c **** 	  *p = '\0';
 11273              		.loc 1 2380 10 is_stmt 0 view .LVU3671
 11274 0b5c 7749     		ldr	r1, .L1186+40
 11275 0b5e FFF7FEFF 		bl	scopy
 11276              	.LVL1303:
2380:src/display.c **** 	  *p = '\0';
 11277              		.loc 1 2380 10 view .LVU3672
 11278 0b62 0346     		mov	r3, r0
 11279              	.LVL1304:
2380:src/display.c **** 	  *p = '\0';
 11280              		.loc 1 2380 10 view .LVU3673
 11281 0b64 98E7     		b	.L911
 11282              	.LVL1305:
 11283              	.L933:
2380:src/display.c **** 	  *p = '\0';
 11284              		.loc 1 2380 10 view .LVU3674
 11285              	.LBE660:
 11286              	.LBE662:
 11287              	.LBB663:
ARM GAS  /tmp/cchyQ5Gz.s 			page 323


 11288              	.LBB619:
2520:src/display.c **** 	      n -= 100;
 11289              		.loc 1 2520 8 is_stmt 1 view .LVU3675
2520:src/display.c **** 	      n -= 100;
 11290              		.loc 1 2520 14 is_stmt 0 view .LVU3676
 11291 0b66 3123     		movs	r3, #49
 11292 0b68 4370     		strb	r3, [r0, #1]
2521:src/display.c **** 	    }
 11293              		.loc 1 2521 8 is_stmt 1 view .LVU3677
2521:src/display.c **** 	    }
 11294              		.loc 1 2521 10 is_stmt 0 view .LVU3678
 11295 0b6a ABF1640B 		sub	fp, fp, #100
 11296              	.LVL1306:
2520:src/display.c **** 	      n -= 100;
 11297              		.loc 1 2520 11 view .LVU3679
 11298 0b6e 0230     		adds	r0, r0, #2
 11299              	.LVL1307:
 11300              	.L932:
2524:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11301              		.loc 1 2524 4 is_stmt 1 view .LVU3680
2524:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11302              		.loc 1 2524 7 is_stmt 0 view .LVU3681
 11303 0b70 BBF1630F 		cmp	fp, #99
 11304 0b74 DEDD     		ble	.L934
2527:src/display.c **** 	  set_status(buf);
 11305              		.loc 1 2527 6 is_stmt 1 view .LVU3682
 11306              	.LVL1308:
2527:src/display.c **** 	  set_status(buf);
 11307              		.loc 1 2527 22 is_stmt 0 view .LVU3683
 11308 0b76 724B     		ldr	r3, .L1186+44
 11309 0b78 5B44     		add	r3, r3, fp
2527:src/display.c **** 	  set_status(buf);
 11310              		.loc 1 2527 12 view .LVU3684
 11311 0b7a 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 11312 0b7e 0370     		strb	r3, [r0]
 11313 0b80 DCE7     		b	.L936
 11314              	.LVL1309:
 11315              	.L939:
2527:src/display.c **** 	  set_status(buf);
 11316              		.loc 1 2527 12 view .LVU3685
 11317              	.LBE619:
 11318              	.LBE663:
2872:src/display.c **** 	  if (i > 0)
 11319              		.loc 1 2872 4 is_stmt 1 view .LVU3686
2872:src/display.c **** 	  if (i > 0)
 11320              		.loc 1 2872 8 is_stmt 0 view .LVU3687
 11321 0b82 D9F80030 		ldr	r3, [r9]
 11322 0b86 B3F8E007 		ldrh	r0, [r3, #2016]
 11323              	.LVL1310:
2873:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11324              		.loc 1 2873 4 is_stmt 1 view .LVU3688
2873:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11325              		.loc 1 2873 7 is_stmt 0 view .LVU3689
 11326 0b8a 88B1     		cbz	r0, .L953
2874:src/display.c **** 	  else
 11327              		.loc 1 2874 6 is_stmt 1 view .LVU3690
 11328 0b8c FFF7FEFF 		bl	getprog
ARM GAS  /tmp/cchyQ5Gz.s 			page 324


 11329              	.LVL1311:
2874:src/display.c **** 	  else
 11330              		.loc 1 2874 6 is_stmt 0 view .LVU3691
 11331 0b90 20A9     		add	r1, sp, #128
 11332              	.LVL1312:
2874:src/display.c **** 	  else
 11333              		.loc 1 2874 6 view .LVU3692
 11334 0b92 FFF7FEFF 		bl	prt
 11335              	.LVL1313:
2874:src/display.c **** 	  else
 11336              		.loc 1 2874 6 view .LVU3693
 11337 0b96 FFF7FEFF 		bl	set_status
 11338              	.LVL1314:
 11339              	.L954:
2877:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11340              		.loc 1 2877 4 is_stmt 1 view .LVU3694
 11341 0b9a 8920     		movs	r0, #137
 11342 0b9c FFF7FEFF 		bl	set_dot
 11343              	.LVL1315:
2879:src/display.c **** 	  goto nostk;
 11344              		.loc 1 2879 6 view .LVU3695
2880:src/display.c **** 	}
 11345              		.loc 1 2880 4 view .LVU3696
2884:src/display.c **** 	if (!skip) {
 11346              		.loc 1 2884 2 view .LVU3697
2879:src/display.c **** 	  goto nostk;
 11347              		.loc 1 2879 12 is_stmt 0 view .LVU3698
 11348 0ba0 0125     		movs	r5, #1
2884:src/display.c **** 	if (!skip) {
 11349              		.loc 1 2884 2 view .LVU3699
 11350 0ba2 FFF7FEFF 		bl	show_flags
 11351              	.LVL1316:
 11352              	.L1136:
2885:src/display.c **** 	  if (State2.runmode) {
 11353              		.loc 1 2885 2 is_stmt 1 view .LVU3700
 11354 0ba6 674B     		ldr	r3, .L1186+48
 11355 0ba8 674F     		ldr	r7, .L1186+52
 11356 0baa 0193     		str	r3, [sp, #4]
 11357 0bac FFF76BBA 		b	.L871
 11358              	.LVL1317:
 11359              	.L953:
2876:src/display.c **** 	  set_dot(STO_annun);
 11360              		.loc 1 2876 6 view .LVU3701
 11361 0bb0 6648     		ldr	r0, .L1186+56
 11362              	.LVL1318:
2876:src/display.c **** 	  set_dot(STO_annun);
 11363              		.loc 1 2876 6 is_stmt 0 view .LVU3702
 11364 0bb2 FFF7FEFF 		bl	set_status
 11365              	.LVL1319:
2876:src/display.c **** 	  set_dot(STO_annun);
 11366              		.loc 1 2876 6 view .LVU3703
 11367 0bb6 F0E7     		b	.L954
 11368              	.LVL1320:
 11369              	.L1166:
 11370              	.LBB664:
 11371              	.LBB622:
2477:src/display.c **** 	  if (lblpc != pc) {
ARM GAS  /tmp/cchyQ5Gz.s 			page 325


 11372              		.loc 1 2477 4 is_stmt 1 view .LVU3704
2477:src/display.c **** 	  if (lblpc != pc) {
 11373              		.loc 1 2477 12 is_stmt 0 view .LVU3705
 11374 0bb8 4046     		mov	r0, r8
 11375 0bba 3946     		mov	r1, r7
 11376 0bbc FFF7FEFF 		bl	findmultilbl
 11377              	.LVL1321:
2477:src/display.c **** 	  if (lblpc != pc) {
 11378              		.loc 1 2477 10 view .LVU3706
 11379 0bc0 86B2     		uxth	r6, r0
 11380              	.LVL1322:
2478:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11381              		.loc 1 2478 4 is_stmt 1 view .LVU3707
2478:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11382              		.loc 1 2478 7 is_stmt 0 view .LVU3708
 11383 0bc2 B345     		cmp	fp, r6
2477:src/display.c **** 	  if (lblpc != pc) {
 11384              		.loc 1 2477 12 view .LVU3709
 11385 0bc4 8046     		mov	r8, r0
 11386              	.LVL1323:
2478:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11387              		.loc 1 2478 7 view .LVU3710
 11388 0bc6 3FF456AE 		beq	.L1139
2479:src/display.c **** 	    n = nLIB(lblpc);
 11389              		.loc 1 2479 6 is_stmt 1 view .LVU3711
 11390 0bca 6148     		ldr	r0, .L1186+60
 11391 0bcc 3F21     		movs	r1, #63
 11392 0bce FFF7FEFF 		bl	set_digits_string
 11393              	.LVL1324:
2480:src/display.c **** 	    if (n == REGION_RAM)
 11394              		.loc 1 2480 6 view .LVU3712
2481:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11395              		.loc 1 2481 6 view .LVU3713
2481:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11396              		.loc 1 2481 9 is_stmt 0 view .LVU3714
 11397 0bd2 B60B     		lsrs	r6, r6, #14
 11398              	.LVL1325:
2481:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11399              		.loc 1 2481 9 view .LVU3715
 11400 0bd4 50D1     		bne	.L927
2482:src/display.c **** 	    else {
 11401              		.loc 1 2482 8 is_stmt 1 view .LVU3716
 11402 0bd6 3246     		mov	r2, r6
 11403 0bd8 1FFA88F0 		uxth	r0, r8
 11404 0bdc 0121     		movs	r1, #1
 11405 0bde FFF7FEFF 		bl	set_exp
 11406              	.LVL1326:
 11407 0be2 48E6     		b	.L1139
 11408              	.LVL1327:
 11409              	.L1164:
2482:src/display.c **** 	    else {
 11410              		.loc 1 2482 8 is_stmt 0 view .LVU3717
 11411              	.LBE622:
 11412              	.LBE664:
 11413              	.LBB665:
 11414              	.LBB604:
2781:src/display.c **** 	      copyreg(&z, x);
ARM GAS  /tmp/cchyQ5Gz.s 			page 326


 11415              		.loc 1 2781 8 is_stmt 1 view .LVU3718
2781:src/display.c **** 	      copyreg(&z, x);
 11416              		.loc 1 2781 27 is_stmt 0 view .LVU3719
 11417 0be4 5B4B     		ldr	r3, .L1186+64
 11418 0be6 1E68     		ldr	r6, [r3]
 11419              	.LVL1328:
2782:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11420              		.loc 1 2782 8 is_stmt 1 view .LVU3720
 11421 0be8 17A8     		add	r0, sp, #92
 11422 0bea 3146     		mov	r1, r6
 11423 0bec FFF7FEFF 		bl	copyreg
 11424              	.LVL1329:
2783:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11425              		.loc 1 2783 8 view .LVU3721
 11426 0bf0 E8B2     		uxtb	r0, r5
 11427 0bf2 FFF7FEFF 		bl	sigma_val
 11428              	.LVL1330:
2784:src/display.c **** 	      copyreg(x, &z);
 11429              		.loc 1 2784 8 view .LVU3722
 11430 0bf6 FFF7FEFF 		bl	is_dblmode
 11431              	.LVL1331:
 11432 0bfa 0021     		movs	r1, #0
 11433 0bfc 0246     		mov	r2, r0
 11434 0bfe 3046     		mov	r0, r6
 11435 0c00 FFF7FEFF 		bl	set_x
 11436              	.LVL1332:
2785:src/display.c **** 	      skip = 1;
 11437              		.loc 1 2785 8 view .LVU3723
 11438 0c04 3046     		mov	r0, r6
 11439 0c06 17A9     		add	r1, sp, #92
 11440 0c08 FFF7FEFF 		bl	copyreg
 11441              	.LVL1333:
2786:src/display.c **** 	    }
 11442              		.loc 1 2786 8 view .LVU3724
2786:src/display.c **** 	    }
 11443              		.loc 1 2786 13 is_stmt 0 view .LVU3725
 11444 0c0c 0126     		movs	r6, #1
 11445              	.LVL1334:
2786:src/display.c **** 	    }
 11446              		.loc 1 2786 13 view .LVU3726
 11447 0c0e 7AE5     		b	.L894
 11448              	.LVL1335:
 11449              	.L940:
2786:src/display.c **** 	    }
 11450              		.loc 1 2786 13 view .LVU3727
 11451              	.LBE604:
 11452              	.LBE665:
2831:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11453              		.loc 1 2831 11 is_stmt 1 view .LVU3728
2831:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11454              		.loc 1 2831 15 is_stmt 0 view .LVU3729
 11455 0c10 4C4A     		ldr	r2, .L1186+48
 11456 0c12 0192     		str	r2, [sp, #4]
 11457 0c14 B2F90020 		ldrsh	r2, [r2]
2831:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11458              		.loc 1 2831 14 view .LVU3730
 11459 0c18 002A     		cmp	r2, #0
ARM GAS  /tmp/cchyQ5Gz.s 			page 327


 11460 0c1a 40F0B780 		bne	.L1175
2833:src/display.c **** 	    bp = scopy(buf, Alpha);
 11461              		.loc 1 2833 11 is_stmt 1 view .LVU3731
2833:src/display.c **** 	    bp = scopy(buf, Alpha);
 11462              		.loc 1 2833 14 is_stmt 0 view .LVU3732
 11463 0c1e 0907     		lsls	r1, r1, #28
 11464 0c20 44D4     		bmi	.L1176
 11465              	.LVL1336:
2882:src/display.c ****       nostk:
 11466              		.loc 1 2882 2 is_stmt 1 view .LVU3733
 11467 0c22 FFF7FEFF 		bl	show_stack
 11468              	.LVL1337:
2884:src/display.c **** 	if (!skip) {
 11469              		.loc 1 2884 2 view .LVU3734
2865:src/display.c **** 	  }
 11470              		.loc 1 2865 12 is_stmt 0 view .LVU3735
 11471 0c26 0125     		movs	r5, #1
2884:src/display.c **** 	if (!skip) {
 11472              		.loc 1 2884 2 view .LVU3736
 11473 0c28 FFF7FEFF 		bl	show_flags
 11474              	.LVL1338:
2885:src/display.c **** 	  if (State2.runmode) {
 11475              		.loc 1 2885 2 is_stmt 1 view .LVU3737
 11476 0c2c FFF72BBA 		b	.L871
 11477              	.LVL1339:
 11478              	.L1163:
 11479              	.LBB666:
 11480              	.LBB605:
2761:src/display.c **** 	      decimal64 z;
 11481              		.loc 1 2761 8 view .LVU3738
2762:src/display.c **** 
 11482              		.loc 1 2762 8 view .LVU3739
2764:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11483              		.loc 1 2764 8 view .LVU3740
 11484 0c30 0EA8     		add	r0, sp, #56
 11485 0c32 FFF7FEFF 		bl	getX
 11486              	.LVL1340:
2765:src/display.c **** 		const unsigned int f = argKIND(op);
 11487              		.loc 1 2765 8 view .LVU3741
2765:src/display.c **** 		const unsigned int f = argKIND(op);
 11488              		.loc 1 2765 11 is_stmt 0 view .LVU3742
 11489 0c36 C5F30723 		ubfx	r3, r5, #8, #8
 11490 0c3a 022B     		cmp	r3, #2
 11491 0c3c 2ED1     		bne	.L896
 11492              	.LBB606:
2766:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11493              		.loc 1 2766 3 is_stmt 1 view .LVU3743
2766:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11494              		.loc 1 2766 22 is_stmt 0 view .LVU3744
 11495 0c3e EDB2     		uxtb	r5, r5
 11496              	.LVL1341:
2767:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11497              		.loc 1 2767 3 is_stmt 1 view .LVU3745
2767:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11498              		.loc 1 2767 6 is_stmt 0 view .LVU3746
 11499 0c40 982D     		cmp	r5, #152
 11500              	.LBB607:
ARM GAS  /tmp/cchyQ5Gz.s 			page 328


2770:src/display.c **** 		}
 11501              		.loc 1 2770 5 view .LVU3747
 11502 0c42 17AF     		add	r7, sp, #92
 11503              	.LBE607:
2767:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11504              		.loc 1 2767 6 view .LVU3748
 11505 0c44 26D8     		bhi	.L897
2767:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11506              		.loc 1 2767 28 discriminator 1 view .LVU3749
 11507 0c46 1823     		movs	r3, #24
 11508 0c48 434A     		ldr	r2, .L1186+68
 11509 0c4a 03FB05F3 		mul	r3, r3, r5
 11510 0c4e D358     		ldr	r3, [r2, r3]
2767:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11511              		.loc 1 2767 23 discriminator 1 view .LVU3750
 11512 0c50 03B3     		cbz	r3, .L897
 11513              	.LBB608:
2768:src/display.c **** 		  update_speed(0);
 11514              		.loc 1 2768 5 is_stmt 1 view .LVU3751
 11515              	.LVL1342:
2769:src/display.c **** 		  fp(&r, &x);
 11516              		.loc 1 2769 20 view .LVU3752
2770:src/display.c **** 		}
 11517              		.loc 1 2770 5 view .LVU3753
 11518 0c52 0EA9     		add	r1, sp, #56
 11519 0c54 3846     		mov	r0, r7
 11520 0c56 9847     		blx	r3
 11521              	.LVL1343:
 11522              	.L898:
2770:src/display.c **** 		}
 11523              		.loc 1 2770 5 is_stmt 0 view .LVU3754
 11524              	.LBE608:
 11525              	.LBE606:
2776:src/display.c **** 	      packed_from_number(&z, &r);
 11526              		.loc 1 2776 8 is_stmt 1 discriminator 1 view .LVU3755
 11527 0c58 404A     		ldr	r2, .L1186+72
 11528 0c5a 3946     		mov	r1, r7
 11529 0c5c 3846     		mov	r0, r7
 11530 0c5e FFF7FEFF 		bl	decNumberNormalize
 11531              	.LVL1344:
2777:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11532              		.loc 1 2777 8 discriminator 1 view .LVU3756
 11533 0c62 3946     		mov	r1, r7
 11534 0c64 08A8     		add	r0, sp, #32
 11535 0c66 FFF7FEFF 		bl	packed_from_number
 11536              	.LVL1345:
2778:src/display.c **** 	      skip = 1;
 11537              		.loc 1 2778 8 discriminator 1 view .LVU3757
 11538 0c6a 0022     		movs	r2, #0
 11539 0c6c 08A8     		add	r0, sp, #32
 11540 0c6e 1146     		mov	r1, r2
 11541 0c70 FFF7FEFF 		bl	set_x
 11542              	.LVL1346:
2779:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11543              		.loc 1 2779 8 discriminator 1 view .LVU3758
2779:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11544              		.loc 1 2779 13 is_stmt 0 discriminator 1 view .LVU3759
ARM GAS  /tmp/cchyQ5Gz.s 			page 329


 11545 0c74 0126     		movs	r6, #1
 11546              	.LBE605:
 11547 0c76 46E5     		b	.L894
 11548              	.LVL1347:
 11549              	.L927:
2779:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 11550              		.loc 1 2779 13 discriminator 1 view .LVU3760
 11551              	.LBE666:
 11552              	.LBB667:
 11553              	.LBB623:
2484:src/display.c **** #ifndef REALBUILD
 11554              		.loc 1 2484 8 is_stmt 1 view .LVU3761
 11555 0c78 394B     		ldr	r3, .L1186+76
2484:src/display.c **** #ifndef REALBUILD
 11556              		.loc 1 2484 37 is_stmt 0 view .LVU3762
 11557 0c7a 06EB8600 		add	r0, r6, r6, lsl #2
2484:src/display.c **** #ifndef REALBUILD
 11558              		.loc 1 2484 8 view .LVU3763
 11559 0c7e 3946     		mov	r1, r7
 11560 0c80 1844     		add	r0, r0, r3
 11561 0c82 FFF7FEFF 		bl	set_exp_digits_string
 11562              	.LVL1348:
2486:src/display.c **** #endif
 11563              		.loc 1 2486 8 is_stmt 1 view .LVU3764
2486:src/display.c **** #endif
 11564              		.loc 1 2486 47 is_stmt 0 view .LVU3765
 11565 0c86 0A21     		movs	r1, #10
2486:src/display.c **** #endif
 11566              		.loc 1 2486 8 view .LVU3766
 11567 0c88 01FB0691 		mla	r1, r1, r6, r9
 11568 0c8c 2248     		ldr	r0, .L1186+4
 11569 0c8e FFF7FEFF 		bl	scopy
 11570              	.LVL1349:
2486:src/display.c **** #endif
 11571              		.loc 1 2486 8 view .LVU3767
 11572              	.LBE623:
 11573              	.LBE667:
2882:src/display.c ****       nostk:
 11574              		.loc 1 2882 2 is_stmt 1 view .LVU3768
 11575 0c92 F0E5     		b	.L1139
 11576              	.LVL1350:
 11577              	.L897:
 11578              	.LBB668:
 11579              	.LBB610:
 11580              	.LBB609:
2773:src/display.c **** 	      } else
 11581              		.loc 1 2773 5 view .LVU3769
 11582 0c94 3846     		mov	r0, r7
 11583 0c96 FFF7FEFF 		bl	set_NaN
 11584              	.LVL1351:
 11585 0c9a DDE7     		b	.L898
 11586              	.LVL1352:
 11587              	.L896:
2773:src/display.c **** 	      } else
 11588              		.loc 1 2773 5 is_stmt 0 view .LVU3770
 11589              	.LBE609:
2775:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
ARM GAS  /tmp/cchyQ5Gz.s 			page 330


 11590              		.loc 1 2775 3 is_stmt 1 view .LVU3771
 11591 0c9c 17AF     		add	r7, sp, #92
 11592 0c9e 0EAA     		add	r2, sp, #56
 11593 0ca0 05F07F01 		and	r1, r5, #127
 11594 0ca4 3846     		mov	r0, r7
 11595 0ca6 FFF7FEFF 		bl	do_conv
 11596              	.LVL1353:
 11597 0caa D5E7     		b	.L898
 11598              	.LVL1354:
 11599              	.L1176:
2775:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11600              		.loc 1 2775 3 is_stmt 0 view .LVU3772
 11601              	.LBE610:
 11602              	.LBE668:
2834:src/display.c **** 	    j = State2.alpha_pos;
 11603              		.loc 1 2834 6 is_stmt 1 view .LVU3773
2834:src/display.c **** 	    j = State2.alpha_pos;
 11604              		.loc 1 2834 22 is_stmt 0 view .LVU3774
 11605 0cac D9F80010 		ldr	r1, [r9]
 11606 0cb0 0292     		str	r2, [sp, #8]
2834:src/display.c **** 	    j = State2.alpha_pos;
 11607              		.loc 1 2834 11 view .LVU3775
 11608 0cb2 20A8     		add	r0, sp, #128
 11609              	.LVL1355:
2834:src/display.c **** 	    j = State2.alpha_pos;
 11610              		.loc 1 2834 11 view .LVU3776
 11611 0cb4 01F5F661 		add	r1, r1, #1968
 11612 0cb8 FFF7FEFF 		bl	scopy
 11613              	.LVL1356:
2835:src/display.c **** 	    if (j != 0) {
 11614              		.loc 1 2835 16 view .LVU3777
 11615 0cbc 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11616              	.LVL1357:
2835:src/display.c **** 	    if (j != 0) {
 11617              		.loc 1 2835 6 is_stmt 1 view .LVU3778
2836:src/display.c **** 	      i = slen(buf);
 11618              		.loc 1 2836 6 view .LVU3779
2836:src/display.c **** 	      i = slen(buf);
 11619              		.loc 1 2836 9 is_stmt 0 view .LVU3780
 11620 0cbe 002B     		cmp	r3, #0
 11621 0cc0 50D1     		bne	.L1177
2849:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11622              		.loc 1 2849 8 is_stmt 1 view .LVU3781
2849:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11623              		.loc 1 2849 11 is_stmt 0 view .LVU3782
 11624 0cc2 3EB1     		cbz	r6, .L951
2849:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11625              		.loc 1 2849 31 discriminator 1 view .LVU3783
 11626 0cc4 B8F1000F 		cmp	r8, #0
 11627 0cc8 04D1     		bne	.L951
2850:src/display.c **** 		*bp++ = '\0';
 11628              		.loc 1 2850 3 is_stmt 1 view .LVU3784
 11629              	.LVL1358:
2850:src/display.c **** 		*bp++ = '\0';
 11630              		.loc 1 2850 23 is_stmt 0 view .LVU3785
 11631 0cca 06F11003 		add	r3, r6, #16
 11632              	.LVL1359:
ARM GAS  /tmp/cchyQ5Gz.s 			page 331


2851:src/display.c **** 	      }
 11633              		.loc 1 2851 9 view .LVU3786
 11634 0cce 0022     		movs	r2, #0
2850:src/display.c **** 		*bp++ = '\0';
 11635              		.loc 1 2850 9 view .LVU3787
 11636 0cd0 0370     		strb	r3, [r0]
 11637              	.LVL1360:
2851:src/display.c **** 	      }
 11638              		.loc 1 2851 3 is_stmt 1 view .LVU3788
2851:src/display.c **** 	      }
 11639              		.loc 1 2851 9 is_stmt 0 view .LVU3789
 11640 0cd2 4270     		strb	r2, [r0, #1]
 11641              	.LVL1361:
 11642              	.L951:
2853:src/display.c **** 	    }
 11643              		.loc 1 2853 8 is_stmt 1 view .LVU3790
 11644 0cd4 20A8     		add	r0, sp, #128
 11645 0cd6 FFF7FEFF 		bl	set_status_right
 11646              	.LVL1362:
 11647              	.L950:
2855:src/display.c **** 	      bp = buf;
 11648              		.loc 1 2855 6 view .LVU3791
2855:src/display.c **** 	      bp = buf;
 11649              		.loc 1 2855 9 is_stmt 0 view .LVU3792
 11650 0cda 002E     		cmp	r6, #0
 11651 0cdc 00F08780 		beq	.L942
2855:src/display.c **** 	      bp = buf;
 11652              		.loc 1 2855 27 discriminator 1 view .LVU3793
 11653 0ce0 B8F1000F 		cmp	r8, #0
 11654 0ce4 00F08380 		beq	.L942
2856:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11655              		.loc 1 2856 8 is_stmt 1 view .LVU3794
 11656              	.LVL1363:
2857:src/display.c **** 	      *bp++ = '\0';
 11657              		.loc 1 2857 8 view .LVU3795
 11658              	.LBB669:
 11659              	.LBB670:
3504:src/display.c **** 	if (State2.runmode) {
 11660              		.loc 1 3504 5 is_stmt 0 view .LVU3796
 11661 0ce8 BAF90030 		ldrsh	r3, [r10]
 11662              	.LBE670:
 11663              	.LBE669:
2857:src/display.c **** 	      *bp++ = '\0';
 11664              		.loc 1 2857 28 view .LVU3797
 11665 0cec 1036     		adds	r6, r6, #16
2858:src/display.c **** 	      set_status_top(buf);
 11666              		.loc 1 2858 14 view .LVU3798
 11667 0cee 0022     		movs	r2, #0
2857:src/display.c **** 	      *bp++ = '\0';
 11668              		.loc 1 2857 14 view .LVU3799
 11669 0cf0 8DF88060 		strb	r6, [sp, #128]
2858:src/display.c **** 	      set_status_top(buf);
 11670              		.loc 1 2858 8 is_stmt 1 view .LVU3800
 11671              	.LVL1364:
2858:src/display.c **** 	      set_status_top(buf);
 11672              		.loc 1 2858 14 is_stmt 0 view .LVU3801
 11673 0cf4 8DF88120 		strb	r2, [sp, #129]
ARM GAS  /tmp/cchyQ5Gz.s 			page 332


2859:src/display.c **** 	      no_status_top = 1;
 11674              		.loc 1 2859 8 is_stmt 1 view .LVU3802
 11675              	.LVL1365:
 11676              	.LBB672:
 11677              	.LBI669:
3503:src/display.c **** 	if (no_status_top) return;
 11678              		.loc 1 3503 19 view .LVU3803
 11679              	.LBB671:
3504:src/display.c **** 	if (State2.runmode) {
 11680              		.loc 1 3504 2 view .LVU3804
3504:src/display.c **** 	if (State2.runmode) {
 11681              		.loc 1 3504 5 is_stmt 0 view .LVU3805
 11682 0cf8 13B9     		cbnz	r3, .L952
 11683 0cfa 20A8     		add	r0, sp, #128
 11684              	.LVL1366:
3504:src/display.c **** 	if (State2.runmode) {
 11685              		.loc 1 3504 5 view .LVU3806
 11686 0cfc FFF7FEFF 		bl	set_status_top.part.0
 11687              	.LVL1367:
 11688              	.L952:
3504:src/display.c **** 	if (State2.runmode) {
 11689              		.loc 1 3504 5 view .LVU3807
 11690              	.LBE671:
 11691              	.LBE672:
2860:src/display.c **** 	      //annuc = 1;
 11692              		.loc 1 2860 8 is_stmt 1 view .LVU3808
2860:src/display.c **** 	      //annuc = 1;
 11693              		.loc 1 2860 22 is_stmt 0 view .LVU3809
 11694 0d00 0123     		movs	r3, #1
 11695 0d02 AAF80030 		strh	r3, [r10]	@ movhi
2882:src/display.c ****       nostk:
 11696              		.loc 1 2882 2 is_stmt 1 view .LVU3810
 11697 0d06 FFF7FEFF 		bl	show_stack
 11698              	.LVL1368:
2884:src/display.c **** 	if (!skip) {
 11699              		.loc 1 2884 2 view .LVU3811
 11700 0d0a FFF7FEFF 		bl	show_flags
 11701              	.LVL1369:
2885:src/display.c **** 	  if (State2.runmode) {
 11702              		.loc 1 2885 2 view .LVU3812
 11703 0d0e FFF7BAB9 		b	.L871
 11704              	.L1187:
 11705 0d12 00BF     		.align	2
 11706              	.L1186:
 11707 0d14 398EE338 		.word	954437177
 11708 0d18 00000000 		.word	LastDisplayedNumber
 11709 0d1c 7C000000 		.word	.LC35
 11710 0d20 78000000 		.word	.LC34
 11711 0d24 5C000000 		.word	.LC31
 11712 0d28 00000000 		.word	SizeStatRegs
 11713 0d2c 4C000000 		.word	.LC29
 11714 0d30 54000000 		.word	.LC30
 11715 0d34 A0000000 		.word	.LC38
 11716 0d38 6C000000 		.word	.LC33
 11717 0d3c 64000000 		.word	.LC32
 11718 0d40 BC000000 		.word	.LC25
 11719 0d44 00000000 		.word	DispPlot
ARM GAS  /tmp/cchyQ5Gz.s 			page 333


 11720 0d48 00000000 		.word	DispMsg
 11721 0d4c A8000000 		.word	.LC39
 11722 0d50 98000000 		.word	.LC37
 11723 0d54 00000000 		.word	StackBase
 11724 0d58 00000000 		.word	monfuncs
 11725 0d5c 00000000 		.word	Ctx
 11726 0d60 00000000 		.word	.LANCHOR22
 11727              	.LVL1370:
 11728              	.L1177:
2837:src/display.c **** 	      j *= 6;
 11729              		.loc 1 2837 8 view .LVU3813
2837:src/display.c **** 	      j *= 6;
 11730              		.loc 1 2837 12 is_stmt 0 view .LVU3814
 11731 0d64 20A8     		add	r0, sp, #128
 11732              	.LVL1371:
2837:src/display.c **** 	      j *= 6;
 11733              		.loc 1 2837 12 view .LVU3815
 11734 0d66 0393     		str	r3, [sp, #12]
 11735 0d68 FFF7FEFF 		bl	slen
 11736              	.LVL1372:
2838:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11737              		.loc 1 2838 8 is_stmt 1 view .LVU3816
2839:src/display.c **** 		{
 11738              		.loc 1 2839 8 view .LVU3817
2838:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11739              		.loc 1 2838 10 is_stmt 0 view .LVU3818
 11740 0d6c 039B     		ldr	r3, [sp, #12]
 11741 0d6e 03EB4303 		add	r3, r3, r3, lsl #1
2839:src/display.c **** 		{
 11742              		.loc 1 2839 15 view .LVU3819
 11743 0d72 A0EB4300 		sub	r0, r0, r3, lsl #1
 11744              	.LVL1373:
2839:src/display.c **** 		{
 11745              		.loc 1 2839 11 view .LVU3820
 11746 0d76 1328     		cmp	r0, #19
 11747 0d78 3FDD     		ble	.L949
2841:src/display.c **** 		  set_status_right(buf);
 11748              		.loc 1 2841 5 is_stmt 1 view .LVU3821
2841:src/display.c **** 		  set_status_right(buf);
 11749              		.loc 1 2841 20 is_stmt 0 view .LVU3822
 11750 0d7a 2AAB     		add	r3, sp, #168
 11751 0d7c 0344     		add	r3, r3, r0
 11752 0d7e 029A     		ldr	r2, [sp, #8]
 11753 0d80 03F8282C 		strb	r2, [r3, #-40]
2842:src/display.c **** 		}
 11754              		.loc 1 2842 5 is_stmt 1 view .LVU3823
 11755 0d84 20A8     		add	r0, sp, #128
 11756 0d86 FFF7FEFF 		bl	set_status_right
 11757              	.LVL1374:
 11758 0d8a A6E7     		b	.L950
 11759              	.LVL1375:
 11760              	.L1175:
2832:src/display.c **** 	  } else if (State2.alphas) {
 11761              		.loc 1 2832 6 view .LVU3824
2832:src/display.c **** 	  } else if (State2.alphas) {
 11762              		.loc 1 2832 48 is_stmt 0 view .LVU3825
 11763 0d8c 501E     		subs	r0, r2, #1
ARM GAS  /tmp/cchyQ5Gz.s 			page 334


 11764 0d8e 0393     		str	r3, [sp, #12]
 11765 0d90 FFF7FEFF 		bl	get_reg_n
 11766              	.LVL1376:
 11767              	.LBB673:
 11768              	.LBI673:
3308:src/display.c **** 	int glen = *graphic++;
 11769              		.loc 1 3308 19 is_stmt 1 view .LVU3826
 11770              	.LBB674:
3309:src/display.c **** 	int i, j;
 11771              		.loc 1 3309 2 view .LVU3827
3317:src/display.c **** #endif
 11772              		.loc 1 3317 15 is_stmt 0 view .LVU3828
 11773 0d94 1B4E     		ldr	r6, .L1188
3309:src/display.c **** 	int i, j;
 11774              		.loc 1 3309 6 view .LVU3829
 11775 0d96 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 11776              	.LVL1377:
3310:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11777              		.loc 1 3310 2 is_stmt 1 view .LVU3830
3317:src/display.c **** #endif
 11778              		.loc 1 3317 2 view .LVU3831
3317:src/display.c **** #endif
 11779              		.loc 1 3317 15 is_stmt 0 view .LVU3832
 11780 0d98 0122     		movs	r2, #1
 11781 0d9a 3270     		strb	r2, [r6]
3319:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11782              		.loc 1 3319 2 is_stmt 1 view .LVU3833
3319:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11783              		.loc 1 3319 5 is_stmt 0 view .LVU3834
 11784 0d9c 39B3     		cbz	r1, .L942
3320:src/display.c **** 
 11785              		.loc 1 3320 2 is_stmt 1 view .LVU3835
 11786              	.LVL1378:
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11787              		.loc 1 3322 2 view .LVU3836
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11788              		.loc 1 3322 12 view .LVU3837
 11789 0d9e 8318     		adds	r3, r0, r2
 11790 0da0 0493     		str	r3, [sp, #16]
 11791 0da2 4A29     		cmp	r1, #74
 11792 0da4 D4BF     		ite	le
 11793 0da6 5B18     		addle	r3, r3, r1
 11794 0da8 4A33     		addgt	r3, r3, #74
 11795 0daa 0293     		str	r3, [sp, #8]
 11796 0dac CDE90557 		strd	r5, r7, [sp, #20]
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11797              		.loc 1 3322 8 is_stmt 0 view .LVU3838
 11798 0db0 039B     		ldr	r3, [sp, #12]
 11799 0db2 0392     		str	r2, [sp, #12]
 11800 0db4 1E46     		mov	r6, r3
 11801              	.LVL1379:
 11802              	.L943:
3323:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11803              		.loc 1 3323 14 is_stmt 1 view .LVU3839
 11804 0db6 039B     		ldr	r3, [sp, #12]
 11805 0db8 049F     		ldr	r7, [sp, #16]
 11806 0dba 03FA06F8 		lsl	r8, r3, r6
ARM GAS  /tmp/cchyQ5Gz.s 			page 335


 11807 0dbe 06F19405 		add	r5, r6, #148
 11808 0dc2 06E0     		b	.L946
 11809              	.LVL1380:
 11810              	.L1179:
 11811              	.LBB675:
 11812              	.LBB676:
 338:src/display.c ****   else	clr_dot(n);
 11813              		.loc 1 338 11 is_stmt 0 view .LVU3840
 11814 0dc4 FFF7FEFF 		bl	set_dot
 11815              	.LVL1381:
 11816              	.L945:
 338:src/display.c ****   else	clr_dot(n);
 11817              		.loc 1 338 11 view .LVU3841
 11818              	.LBE676:
 11819              	.LBE675:
3323:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11820              		.loc 1 3323 23 is_stmt 1 view .LVU3842
3323:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11821              		.loc 1 3323 14 view .LVU3843
3323:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11822              		.loc 1 3323 4 is_stmt 0 view .LVU3844
 11823 0dc8 029B     		ldr	r3, [sp, #8]
 11824 0dca BB42     		cmp	r3, r7
 11825 0dcc 05F10605 		add	r5, r5, #6
 11826 0dd0 08D0     		beq	.L1178
 11827              	.LVL1382:
 11828              	.L946:
3328:src/display.c **** #endif
 11829              		.loc 1 3328 6 is_stmt 1 view .LVU3845
 11830              	.LBB679:
 11831              	.LBI675:
 337:src/display.c ****   if (on)	set_dot(n);
 11832              		.loc 1 337 6 view .LVU3846
 11833              	.LBB677:
 338:src/display.c ****   else	clr_dot(n);
 11834              		.loc 1 338 3 view .LVU3847
 338:src/display.c ****   else	clr_dot(n);
 11835              		.loc 1 338 11 view .LVU3848
 339:src/display.c **** }
 11836              		.loc 1 339 8 view .LVU3849
 11837              	.LBE677:
 11838              	.LBE679:
3328:src/display.c **** #endif
 11839              		.loc 1 3328 37 is_stmt 0 view .LVU3850
 11840 0dd2 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 11841              	.LVL1383:
 11842              	.LBB680:
 11843              	.LBB678:
 338:src/display.c ****   else	clr_dot(n);
 11844              		.loc 1 338 6 view .LVU3851
 11845 0dd6 13EA080F 		tst	r3, r8
 338:src/display.c ****   else	clr_dot(n);
 11846              		.loc 1 338 11 view .LVU3852
 11847 0dda 2846     		mov	r0, r5
 338:src/display.c ****   else	clr_dot(n);
 11848              		.loc 1 338 6 view .LVU3853
 11849 0ddc F2D1     		bne	.L1179
ARM GAS  /tmp/cchyQ5Gz.s 			page 336


 339:src/display.c **** }
 11850              		.loc 1 339 8 view .LVU3854
 11851 0dde FFF7FEFF 		bl	clr_dot
 11852              	.LVL1384:
 11853 0de2 F1E7     		b	.L945
 11854              	.LVL1385:
 11855              	.L1178:
 339:src/display.c **** }
 11856              		.loc 1 339 8 view .LVU3855
 11857              	.LBE678:
 11858              	.LBE680:
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11859              		.loc 1 3322 17 is_stmt 1 view .LVU3856
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11860              		.loc 1 3322 18 is_stmt 0 view .LVU3857
 11861 0de4 0136     		adds	r6, r6, #1
 11862              	.LVL1386:
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11863              		.loc 1 3322 12 is_stmt 1 view .LVU3858
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11864              		.loc 1 3322 2 is_stmt 0 view .LVU3859
 11865 0de6 062E     		cmp	r6, #6
 11866 0de8 E5D1     		bne	.L943
 11867 0dea DDE90557 		ldrd	r5, r7, [sp, #20]
 11868              	.LVL1387:
 11869              	.L942:
3322:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11870              		.loc 1 3322 2 view .LVU3860
 11871              	.LBE674:
 11872              	.LBE673:
2882:src/display.c ****       nostk:
 11873              		.loc 1 2882 2 is_stmt 1 view .LVU3861
 11874 0dee FFF7FEFF 		bl	show_stack
 11875              	.LVL1388:
2884:src/display.c **** 	if (!skip) {
 11876              		.loc 1 2884 2 view .LVU3862
 11877 0df2 FFF7FEFF 		bl	show_flags
 11878              	.LVL1389:
2885:src/display.c **** 	  if (State2.runmode) {
 11879              		.loc 1 2885 2 view .LVU3863
 11880 0df6 FFF746B9 		b	.L871
 11881              	.LVL1390:
 11882              	.L949:
2845:src/display.c **** 	      }
 11883              		.loc 1 2845 3 view .LVU3864
 11884 0dfa 20A8     		add	r0, sp, #128
 11885 0dfc FFF7FEFF 		bl	set_status
 11886              	.LVL1391:
 11887 0e00 6BE7     		b	.L950
 11888              	.L1189:
 11889 0e02 00BF     		.align	2
 11890              	.L1188:
 11891 0e04 00000000 		.word	forceDispPlot
 11892              		.cfi_endproc
 11893              	.LFE34:
 11895              		.section	.text.frozen_display,"ax",%progbits
 11896              		.align	1
ARM GAS  /tmp/cchyQ5Gz.s 			page 337


 11897              		.p2align 2,,3
 11898              		.global	frozen_display
 11899              		.syntax unified
 11900              		.thumb
 11901              		.thumb_func
 11902              		.fpu fpv4-sp-d16
 11904              	frozen_display:
 11905              	.LFB35:
3302:src/display.c **** 	State2.disp_freeze = 0;
 11906              		.loc 1 3302 7 view -0
 11907              		.cfi_startproc
 11908              		@ args = 0, pretend = 0, frame = 0
 11909              		@ frame_needed = 0, uses_anonymous_args = 0
3303:src/display.c **** 	display();
 11910              		.loc 1 3303 2 view .LVU3866
3302:src/display.c **** 	State2.disp_freeze = 0;
 11911              		.loc 1 3302 7 is_stmt 0 view .LVU3867
 11912 0000 10B5     		push	{r4, lr}
 11913              		.cfi_def_cfa_offset 8
 11914              		.cfi_offset 4, -8
 11915              		.cfi_offset 14, -4
3303:src/display.c **** 	display();
 11916              		.loc 1 3303 21 view .LVU3868
 11917 0002 064C     		ldr	r4, .L1192
 11918 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11919 0006 6FF30413 		bfc	r3, #4, #1
 11920 000a E375     		strb	r3, [r4, #23]
3304:src/display.c **** 	State2.disp_freeze = 1;
 11921              		.loc 1 3304 2 is_stmt 1 view .LVU3869
 11922 000c FFF7FEFF 		bl	display
 11923              	.LVL1392:
3305:src/display.c ****       }
 11924              		.loc 1 3305 2 view .LVU3870
3305:src/display.c ****       }
 11925              		.loc 1 3305 21 is_stmt 0 view .LVU3871
 11926 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11927 0012 43F01003 		orr	r3, r3, #16
 11928 0016 E375     		strb	r3, [r4, #23]
3306:src/display.c **** 
 11929              		.loc 1 3306 7 view .LVU3872
 11930 0018 10BD     		pop	{r4, pc}
 11931              	.L1193:
 11932 001a 00BF     		.align	2
 11933              	.L1192:
 11934 001c 00000000 		.word	StateWhileOn
 11935              		.cfi_endproc
 11936              	.LFE35:
 11938              		.section	.text.message,"ax",%progbits
 11939              		.align	1
 11940              		.p2align 2,,3
 11941              		.global	message
 11942              		.syntax unified
 11943              		.thumb
 11944              		.thumb_func
 11945              		.fpu fpv4-sp-d16
 11947              	message:
 11948              	.LVL1393:
ARM GAS  /tmp/cchyQ5Gz.s 			page 338


 11949              	.LFB46:
3522:src/display.c **** 	State2.disp_freeze = 0;
 11950              		.loc 1 3522 7 is_stmt 1 view -0
 11951              		.cfi_startproc
 11952              		@ args = 0, pretend = 0, frame = 0
 11953              		@ frame_needed = 0, uses_anonymous_args = 0
3523:src/display.c **** 	State2.disp_small = 0;
 11954              		.loc 1 3523 2 view .LVU3874
3524:src/display.c **** 	WasDataEntry = 0;
 11955              		.loc 1 3524 2 view .LVU3875
3524:src/display.c **** 	WasDataEntry = 0;
 11956              		.loc 1 3524 20 is_stmt 0 view .LVU3876
 11957 0000 174A     		ldr	r2, .L1204
3522:src/display.c **** 	State2.disp_freeze = 0;
 11958              		.loc 1 3522 7 view .LVU3877
 11959 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11960              		.cfi_def_cfa_offset 24
 11961              		.cfi_offset 3, -24
 11962              		.cfi_offset 4, -20
 11963              		.cfi_offset 5, -16
 11964              		.cfi_offset 6, -12
 11965              		.cfi_offset 7, -8
 11966              		.cfi_offset 14, -4
3524:src/display.c **** 	WasDataEntry = 0;
 11967              		.loc 1 3524 20 view .LVU3878
 11968 0004 D38A     		ldrh	r3, [r2, #22]
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11969              		.loc 1 3525 15 view .LVU3879
 11970 0006 174E     		ldr	r6, .L1204+4
3524:src/display.c **** 	WasDataEntry = 0;
 11971              		.loc 1 3524 20 view .LVU3880
 11972 0008 23F48453 		bic	r3, r3, #4224
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11973              		.loc 1 3525 15 view .LVU3881
 11974 000c 0027     		movs	r7, #0
3524:src/display.c **** 	WasDataEntry = 0;
 11975              		.loc 1 3524 20 view .LVU3882
 11976 000e D382     		strh	r3, [r2, #22]	@ movhi
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11977              		.loc 1 3525 2 is_stmt 1 view .LVU3883
3526:src/display.c **** 	  // Complete redraw necessary
 11978              		.loc 1 3526 5 is_stmt 0 view .LVU3884
 11979 0010 9B05     		lsls	r3, r3, #22
3522:src/display.c **** 	State2.disp_freeze = 0;
 11980              		.loc 1 3522 7 view .LVU3885
 11981 0012 0546     		mov	r5, r0
 11982 0014 0C46     		mov	r4, r1
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11983              		.loc 1 3525 15 view .LVU3886
 11984 0016 3760     		str	r7, [r6]
3526:src/display.c **** 	  // Complete redraw necessary
 11985              		.loc 1 3526 2 is_stmt 1 view .LVU3887
3526:src/display.c **** 	  // Complete redraw necessary
 11986              		.loc 1 3526 5 is_stmt 0 view .LVU3888
 11987 0018 12D5     		bpl	.L1195
3526:src/display.c **** 	  // Complete redraw necessary
 11988              		.loc 1 3526 27 discriminator 1 view .LVU3889
ARM GAS  /tmp/cchyQ5Gz.s 			page 339


 11989 001a D1B1     		cbz	r1, .L1203
 11990              	.L1196:
3533:src/display.c **** 	    ShowRPN = 0;
 11991              		.loc 1 3533 6 is_stmt 1 view .LVU3890
 11992 001c FFF7FEFF 		bl	reset_disp
 11993              	.LVL1394:
3534:src/display.c **** 	    set_annunciators();
 11994              		.loc 1 3534 6 view .LVU3891
3534:src/display.c **** 	    set_annunciators();
 11995              		.loc 1 3534 14 is_stmt 0 view .LVU3892
 11996 0020 114B     		ldr	r3, .L1204+8
 11997 0022 0026     		movs	r6, #0
 11998 0024 1E60     		str	r6, [r3]
3535:src/display.c **** 	    set_digits_string( str2, 0 );
 11999              		.loc 1 3535 6 is_stmt 1 view .LVU3893
 12000 0026 FFF7FEFF 		bl	set_annunciators
 12001              	.LVL1395:
3536:src/display.c **** 	  }
 12002              		.loc 1 3536 6 view .LVU3894
 12003 002a 3146     		mov	r1, r6
 12004 002c 2046     		mov	r0, r4
 12005 002e FFF7FEFF 		bl	set_digits_string
 12006              	.LVL1396:
3538:src/display.c **** 	  finish_display();// message
 12007              		.loc 1 3538 4 view .LVU3895
 12008 0032 2846     		mov	r0, r5
 12009 0034 FFF7FEFF 		bl	set_status
 12010              	.LVL1397:
3539:src/display.c **** 	}
 12011              		.loc 1 3539 4 view .LVU3896
3541:src/display.c **** 
 12012              		.loc 1 3541 7 is_stmt 0 view .LVU3897
 12013 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12014              		.cfi_remember_state
 12015              		.cfi_restore 14
 12016              		.cfi_restore 7
 12017              		.cfi_restore 6
 12018              		.cfi_restore 5
 12019              		.cfi_restore 4
 12020              		.cfi_restore 3
 12021              		.cfi_def_cfa_offset 0
 12022              	.LVL1398:
3539:src/display.c **** 	}
 12023              		.loc 1 3539 4 view .LVU3898
 12024 003c FFF7FEBF 		b	finish_display
 12025              	.LVL1399:
 12026              	.L1195:
 12027              		.cfi_restore_state
3532:src/display.c **** 	    reset_disp();
 12028              		.loc 1 3532 4 is_stmt 1 view .LVU3899
3532:src/display.c **** 	    reset_disp();
 12029              		.loc 1 3532 7 is_stmt 0 view .LVU3900
 12030 0040 0029     		cmp	r1, #0
 12031 0042 EBD1     		bne	.L1196
3538:src/display.c **** 	  finish_display();// message
 12032              		.loc 1 3538 4 is_stmt 1 view .LVU3901
 12033 0044 2846     		mov	r0, r5
ARM GAS  /tmp/cchyQ5Gz.s 			page 340


 12034              	.LVL1400:
3538:src/display.c **** 	  finish_display();// message
 12035              		.loc 1 3538 4 is_stmt 0 view .LVU3902
 12036 0046 FFF7FEFF 		bl	set_status
 12037              	.LVL1401:
3539:src/display.c **** 	}
 12038              		.loc 1 3539 4 is_stmt 1 view .LVU3903
3541:src/display.c **** 
 12039              		.loc 1 3541 7 is_stmt 0 view .LVU3904
 12040 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12041              		.cfi_remember_state
 12042              		.cfi_restore 14
 12043              		.cfi_restore 7
 12044              		.cfi_restore 6
 12045              		.cfi_restore 5
 12046              		.cfi_restore 4
 12047              		.cfi_restore 3
 12048              		.cfi_def_cfa_offset 0
 12049              	.LVL1402:
3539:src/display.c **** 	}
 12050              		.loc 1 3539 4 view .LVU3905
 12051 004e FFF7FEBF 		b	finish_display
 12052              	.LVL1403:
 12053              	.L1203:
 12054              		.cfi_restore_state
3528:src/display.c **** 	  display();
 12055              		.loc 1 3528 4 is_stmt 1 view .LVU3906
3528:src/display.c **** 	  display();
 12056              		.loc 1 3528 12 is_stmt 0 view .LVU3907
 12057 0052 064B     		ldr	r3, .L1204+12
 12058 0054 1860     		str	r0, [r3]
3529:src/display.c **** 	}
 12059              		.loc 1 3529 4 is_stmt 1 view .LVU3908
3541:src/display.c **** 
 12060              		.loc 1 3541 7 is_stmt 0 view .LVU3909
 12061 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12062              		.cfi_restore 14
 12063              		.cfi_restore 7
 12064              		.cfi_restore 6
 12065              		.cfi_restore 5
 12066              		.cfi_restore 4
 12067              		.cfi_restore 3
 12068              		.cfi_def_cfa_offset 0
3529:src/display.c **** 	}
 12069              		.loc 1 3529 4 view .LVU3910
 12070 005a FFF7FEBF 		b	display
 12071              	.LVL1404:
 12072              	.L1205:
3529:src/display.c **** 	}
 12073              		.loc 1 3529 4 view .LVU3911
 12074 005e 00BF     		.align	2
 12075              	.L1204:
 12076 0060 00000000 		.word	StateWhileOn
 12077 0064 00000000 		.word	WasDataEntry
 12078 0068 00000000 		.word	ShowRPN
 12079 006c 00000000 		.word	DispMsg
 12080              		.cfi_endproc
ARM GAS  /tmp/cchyQ5Gz.s 			page 341


 12081              	.LFE46:
 12083              		.section	.text.error_message,"ax",%progbits
 12084              		.align	1
 12085              		.p2align 2,,3
 12086              		.global	error_message
 12087              		.syntax unified
 12088              		.thumb
 12089              		.thumb_func
 12090              		.fpu fpv4-sp-d16
 12092              	error_message:
 12093              	.LVL1405:
 12094              	.LFB1:
 132:src/display.c **** #define MSG1(top) top "\0"
 12095              		.loc 1 132 1 is_stmt 1 view -0
 12096              		.cfi_startproc
 12097              		@ args = 0, pretend = 0, frame = 0
 12098              		@ frame_needed = 0, uses_anonymous_args = 0
 137:src/display.c ****     {
 12099              		.loc 1 137 3 view .LVU3913
 195:src/display.c ****     {
 12100              		.loc 1 195 3 view .LVU3914
 230:src/display.c ****     const char *p = error_table[e];
 12101              		.loc 1 230 3 view .LVU3915
 132:src/display.c **** #define MSG1(top) top "\0"
 12102              		.loc 1 132 1 is_stmt 0 view .LVU3916
 12103 0000 38B5     		push	{r3, r4, r5, lr}
 12104              		.cfi_def_cfa_offset 16
 12105              		.cfi_offset 3, -16
 12106              		.cfi_offset 4, -12
 12107              		.cfi_offset 5, -8
 12108              		.cfi_offset 14, -4
 230:src/display.c ****     const char *p = error_table[e];
 12109              		.loc 1 230 21 view .LVU3917
 12110 0002 1A4B     		ldr	r3, .L1217
 12111 0004 1B68     		ldr	r3, [r3]
 12112 0006 0343     		orrs	r3, r0, r3
 12113 0008 2CD0     		beq	.L1206
 12114              	.LBB681:
 231:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12115              		.loc 1 231 5 is_stmt 1 view .LVU3918
 231:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12116              		.loc 1 231 17 is_stmt 0 view .LVU3919
 12117 000a 194B     		ldr	r3, .L1217+4
 12118 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 12119              	.LVL1406:
 232:src/display.c ****     if (*q == '\0')
 12120              		.loc 1 232 5 is_stmt 1 view .LVU3920
 12121 0010 0446     		mov	r4, r0
 232:src/display.c ****     if (*q == '\0')
 12122              		.loc 1 232 21 is_stmt 0 view .LVU3921
 12123 0012 0021     		movs	r1, #0
 12124 0014 2846     		mov	r0, r5
 12125              	.LVL1407:
 232:src/display.c ****     if (*q == '\0')
 12126              		.loc 1 232 21 view .LVU3922
 12127 0016 FFF7FEFF 		bl	find_char
 12128              	.LVL1408:
ARM GAS  /tmp/cchyQ5Gz.s 			page 342


 233:src/display.c ****       q = S7_ERROR;
 12129              		.loc 1 233 5 is_stmt 1 view .LVU3923
 233:src/display.c ****       q = S7_ERROR;
 12130              		.loc 1 233 9 is_stmt 0 view .LVU3924
 12131 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 233:src/display.c ****       q = S7_ERROR;
 12132              		.loc 1 233 8 view .LVU3925
 12133 001c 9BB9     		cbnz	r3, .L1215
 234:src/display.c ****     if (*q == 'X') {
 12134              		.loc 1 234 9 view .LVU3926
 12135 001e 1549     		ldr	r1, .L1217+8
 12136              	.L1208:
 12137              	.LVL1409:
 244:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12138              		.loc 1 244 7 is_stmt 1 view .LVU3927
 12139 0020 2846     		mov	r0, r5
 12140 0022 FFF7FEFF 		bl	message
 12141              	.LVL1410:
 245:src/display.c **** #ifndef REALBUILD
 12142              		.loc 1 245 7 view .LVU3928
 245:src/display.c **** #ifndef REALBUILD
 12143              		.loc 1 245 26 is_stmt 0 view .LVU3929
 12144 0026 144B     		ldr	r3, .L1217+12
 247:src/display.c **** #endif
 12145              		.loc 1 247 7 view .LVU3930
 12146 0028 1449     		ldr	r1, .L1217+16
 245:src/display.c **** #ifndef REALBUILD
 12147              		.loc 1 245 26 view .LVU3931
 12148 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 247:src/display.c **** #endif
 12149              		.loc 1 247 7 view .LVU3932
 12150 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 12151 0030 1348     		ldr	r0, .L1217+20
 245:src/display.c **** #ifndef REALBUILD
 12152              		.loc 1 245 31 view .LVU3933
 12153 0032 003C     		subs	r4, r4, #0
 245:src/display.c **** #ifndef REALBUILD
 12154              		.loc 1 245 31 view .LVU3934
 12155 0034 18BF     		it	ne
 12156 0036 0124     		movne	r4, #1
 12157              	.LVL1411:
 245:src/display.c **** #ifndef REALBUILD
 12158              		.loc 1 245 26 view .LVU3935
 12159 0038 64F30412 		bfi	r2, r4, #4, #1
 12160 003c DA75     		strb	r2, [r3, #23]
 247:src/display.c **** #endif
 12161              		.loc 1 247 7 is_stmt 1 view .LVU3936
 12162              	.LBE681:
 272:src/display.c **** 
 12163              		.loc 1 272 1 is_stmt 0 view .LVU3937
 12164 003e BDE83840 		pop	{r3, r4, r5, lr}
 12165              		.cfi_remember_state
 12166              		.cfi_restore 14
 12167              		.cfi_restore 5
 12168              		.cfi_restore 4
 12169              		.cfi_restore 3
 12170              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cchyQ5Gz.s 			page 343


 12171              	.LVL1412:
 12172              	.LBB688:
 247:src/display.c **** #endif
 12173              		.loc 1 247 7 view .LVU3938
 12174 0042 FFF7FEBF 		b	scopy
 12175              	.LVL1413:
 12176              	.L1215:
 12177              		.cfi_restore_state
 235:src/display.c ****       DispMsg = p;
 12178              		.loc 1 235 5 is_stmt 1 view .LVU3939
 235:src/display.c ****       DispMsg = p;
 12179              		.loc 1 235 8 is_stmt 0 view .LVU3940
 12180 0046 582B     		cmp	r3, #88
 12181 0048 0DD1     		bne	.L1216
 236:src/display.c ****       frozen_display();
 12182              		.loc 1 236 7 is_stmt 1 view .LVU3941
 12183              	.LBB682:
 12184              	.LBB683:
3303:src/display.c **** 	display();
 12185              		.loc 1 3303 21 is_stmt 0 view .LVU3942
 12186 004a 0B4C     		ldr	r4, .L1217+12
 12187              	.LVL1414:
3303:src/display.c **** 	display();
 12188              		.loc 1 3303 21 view .LVU3943
 12189              	.LBE683:
 12190              	.LBE682:
 236:src/display.c ****       frozen_display();
 12191              		.loc 1 236 15 view .LVU3944
 12192 004c 0D4A     		ldr	r2, .L1217+24
 12193              	.LBB686:
 12194              	.LBB684:
3303:src/display.c **** 	display();
 12195              		.loc 1 3303 21 view .LVU3945
 12196 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12197              	.LBE684:
 12198              	.LBE686:
 236:src/display.c ****       frozen_display();
 12199              		.loc 1 236 15 view .LVU3946
 12200 0050 1560     		str	r5, [r2]
 237:src/display.c ****     }
 12201              		.loc 1 237 7 is_stmt 1 view .LVU3947
 12202              	.LBB687:
 12203              	.LBI682:
3301:src/display.c ****       {
 12204              		.loc 1 3301 12 view .LVU3948
 12205              	.LBB685:
3303:src/display.c **** 	display();
 12206              		.loc 1 3303 2 view .LVU3949
3303:src/display.c **** 	display();
 12207              		.loc 1 3303 21 is_stmt 0 view .LVU3950
 12208 0052 6FF30413 		bfc	r3, #4, #1
 12209 0056 E375     		strb	r3, [r4, #23]
3304:src/display.c **** 	State2.disp_freeze = 1;
 12210              		.loc 1 3304 2 is_stmt 1 view .LVU3951
 12211 0058 FFF7FEFF 		bl	display
 12212              	.LVL1415:
3305:src/display.c ****       }
ARM GAS  /tmp/cchyQ5Gz.s 			page 344


 12213              		.loc 1 3305 2 view .LVU3952
3305:src/display.c ****       }
 12214              		.loc 1 3305 21 is_stmt 0 view .LVU3953
 12215 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12216 005e 43F01003 		orr	r3, r3, #16
 12217 0062 E375     		strb	r3, [r4, #23]
 12218              	.LVL1416:
 12219              	.L1206:
3305:src/display.c ****       }
 12220              		.loc 1 3305 21 view .LVU3954
 12221              	.LBE685:
 12222              	.LBE687:
 12223              	.LBE688:
 272:src/display.c **** 
 12224              		.loc 1 272 1 view .LVU3955
 12225 0064 38BD     		pop	{r3, r4, r5, pc}
 12226              	.LVL1417:
 12227              	.L1216:
 12228              	.LBB689:
 232:src/display.c ****     if (*q == '\0')
 12229              		.loc 1 232 17 view .LVU3956
 12230 0066 411C     		adds	r1, r0, #1
 12231 0068 DAE7     		b	.L1208
 12232              	.L1218:
 12233 006a 00BF     		.align	2
 12234              	.L1217:
 12235 006c 00000000 		.word	Running
 12236 0070 00000000 		.word	.LANCHOR27
 12237 0074 00000000 		.word	.LANCHOR26
 12238 0078 00000000 		.word	StateWhileOn
 12239 007c 00000000 		.word	.LANCHOR28
 12240 0080 00000000 		.word	LastDisplayedNumber
 12241 0084 00000000 		.word	DispMsg
 12242              	.LBE689:
 12243              		.cfi_endproc
 12244              	.LFE1:
 12246              		.section	.rodata.str1.4,"aMS",%progbits,1
 12247              		.align	2
 12248              	.LC41:
 12249 0000 06316306 		.ascii	"\0061c\006\006\000"
 12249      0600
 12250 0006 0000     		.align	2
 12251              	.LC42:
 12252 0008 756E0600 		.ascii	"un\006\000"
 12253              		.align	2
 12254              	.LC43:
 12255 000c 736D00   		.ascii	"sm\000"
 12256              		.set	CSWTCH.328,CSWTCH.326
 12257 000f 00       		.align	2
 12258              	.LC44:
 12259 0010 20502072 		.ascii	" P r o g r a m \000"
 12259      206F2067 
 12259      20722061 
 12259      206D2000 
 12260              		.align	2
 12261              	.LC45:
 12262 0020 206F2072 		.ascii	" o r   d a t e \000"
ARM GAS  /tmp/cchyQ5Gz.s 			page 345


 12262      20202064 
 12262      20612074 
 12262      20652000 
 12263              		.align	2
 12264              	.LC46:
 12265 0030 204F2070 		.ascii	" O p - c o d e \000"
 12265      202D2063 
 12265      206F2064 
 12265      20652000 
 12266              		.align	2
 12267              	.LC47:
 12268 0040 204C2061 		.ascii	" L a b e l \000"
 12268      20622065 
 12268      206C2000 
 12269              		.align	2
 12270              	.LC48:
 12271 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 12271      20652072 
 12271      20612074 
 12271      2069206F 
 12271      206E2000 
 12272              		.align	2
 12273              	.LC49:
 12274 0060 20462075 		.ascii	" F u l l \000"
 12274      206C206C 
 12274      2000
 12275 006a 0000     		.align	2
 12276              	.LC50:
 12277 006c 2043206C 		.ascii	" C l a s h \000"
 12277      20612073 
 12277      20682000 
 12278              		.align	2
 12279              	.LC51:
 12280 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 12280      206F2020 
 12280      2073206D 
 12280      2061206C 
 12280      206C2000 
 12281              		.align	2
 12282              	.LC52:
 12283 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 12283      20742061 
 12283      20202070 
 12283      206F2069 
 12283      206E2074 
 12284              		.align	2
 12285              	.LC53:
 12286 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 12286      20722061 
 12286      206D2065 
 12286      20742065 
 12286      20722000 
 12287              		.align	2
 12288              	.LC54:
 12289 00b8 20442061 		.ascii	" D a t a \000"
 12289      20742061 
 12289      2000
ARM GAS  /tmp/cchyQ5Gz.s 			page 346


 12290 00c2 0000     		.align	2
 12291              	.LC55:
 12292 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 12292      206F2074 
 12292      20652063 
 12292      20742065 
 12292      20642000 
 12293              		.align	2
 12294              	.LC56:
 12295 00d8 2046206F 		.ascii	" F o u n d \000"
 12295      2075206E 
 12295      20642000 
 12296              		.align	2
 12297              	.LC57:
 12298 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 12298      2073206D 
 12298      20612074 
 12298      20632068 
 12298      2000
 12299 00f6 0000     		.align	2
 12300              	.LC58:
 12301 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 12301      20732074 
 12301      2061206C 
 12301      206C2065 
 12301      20642000 
 12302              		.global	DIGITS
 12303              		.comm	IoAnnunciator,4,4
 12304              		.comm	IntMaxWindow,4,4
 12305              		.comm	JustDisplayed,4,4
 12306              		.comm	ShowRPN,4,4
 12307              		.comm	forceDispPlot,1,1
 12308              		.comm	LastDisplayedExponent,5,4
 12309              		.comm	LastDisplayedNumber,26,4
 12310              		.comm	LastDisplayedText,31,4
 12311              		.global	no_status_top
 12312              		.comm	DispPlot,2,2
 12313              		.comm	DispMsg,4,4
 12314              		.global	SvnRevision
 12315              		.section	.rodata
 12316              		.align	2
 12317              		.set	.LANCHOR17,. + 0
 12318              	.LC16:
 12319 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12319      22002E00 
 12319      00
 12320 0009 000000   		.space	3
 12321              	.LC20:
 12322 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 12322      332E3306 
 12322      0600
 12323 0016 00000000 		.space	4
 12324 001a 0000     		.space	2
 12325              	.LC59:
 12326 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12326      696E6700 
 12326      50726F47 
ARM GAS  /tmp/cchyQ5Gz.s 			page 347


 12326      72614D6D 
 12326      00
 12327 002d 000000   		.space	3
 12328              	.LC60:
 12329 0030 446F6D61 		.ascii	"Domain\000\000"
 12329      696E0000 
 12330              	.LC61:
 12331 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12331      74696D65 
 12331      006F7220 
 12331      64417445 
 12331      00
 12332 0049 000000   		.space	3
 12333              	.LC62:
 12334 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12334      66696E65 
 12334      64004F70 
 12334      2D434F64 
 12334      4500
 12335 005e 0000     		.space	2
 12336              	.LC63:
 12337 0060 2B9F0000 		.ascii	"+\237\000\000"
 12338              	.LC64:
 12339 0064 2D9F0000 		.ascii	"-\237\000\000"
 12340              	.LC65:
 12341 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12341      75636800 
 12341      4C416245 
 12341      4C00
 12342 0076 0000     		.space	2
 12343              	.LC66:
 12344 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12344      67616C00 
 12344      4F504572 
 12344      4174696F 
 12344      6E00
 12345 008a 0000     		.space	2
 12346              	.LC67:
 12347 008c 4F757420 		.ascii	"Out of range\000\000"
 12347      6F662072 
 12347      616E6765 
 12347      0000
 12348 009a 0000     		.space	2
 12349              	.LC68:
 12350 009c 42616420 		.ascii	"Bad digit\000\000"
 12350      64696769 
 12350      740000
 12351 00a7 00       		.space	1
 12352              	.LC69:
 12353 00a8 546F6F20 		.ascii	"Too long\000\000"
 12353      6C6F6E67 
 12353      0000
 12354 00b2 0000     		.space	2
 12355              	.LC70:
 12356 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12356      69730046 
 12356      754C4C00 
ARM GAS  /tmp/cchyQ5Gz.s 			page 348


 12357              	.LC71:
 12358 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12358      6B00434C 
 12358      41534800 
 12359              	.LC72:
 12360 00cc 42616420 		.ascii	"Bad mode\000\000"
 12360      6D6F6465 
 12360      0000
 12361 00d6 0000     		.space	2
 12362              	.LC73:
 12363 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12363      06060673 
 12363      697A6500 
 12363      746F6F20 
 12363      534D6D41 
 12364 00ef 00       		.space	1
 12365              	.LC74:
 12366 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12366      66657700 
 12366      64417441 
 12366      20506F69 
 12366      6E745300 
 12367              	.LC75:
 12368 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12368      6C696400 
 12368      50617261 
 12368      4D6D4574 
 12368      457200
 12369 0117 00       		.space	1
 12370              	.LC76:
 12371 0118 492F4F00 		.ascii	"I/O\000\000"
 12371      00
 12372 011d 000000   		.space	3
 12373              	.LC77:
 12374 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12374      6C696400 
 12374      64417441 
 12374      00
 12375 012d 000000   		.space	3
 12376              	.LC78:
 12377 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12377      65005072 
 12377      6F744563 
 12377      74456400 
 12378              	.LC79:
 12379 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12379      6F6F7400 
 12379      466F756E 
 12379      6400
 12380 014e 0000     		.space	2
 12381              	.LC80:
 12382 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12382      6978004D 
 12382      6D49534D 
 12382      6D417443 
 12382      4800
 12383 0162 0000     		.space	2
ARM GAS  /tmp/cchyQ5Gz.s 			page 349


 12384              	.LC81:
 12385 0164 53696E67 		.ascii	"Singular\000\000"
 12385      756C6172 
 12385      0000
 12386 016e 0000     		.space	2
 12387              	.LC82:
 12388 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12388      68206973 
 12388      0046754C 
 12388      4C00
 12389 017e 0000     		.space	2
 12390              	.LC83:
 12391 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12391      72797374 
 12391      616C0049 
 12391      6E537461 
 12391      4C4C4564 
 12392 0195 000000   		.space	3
 12393              	.LC84:
 12394 0198 04201D00 		.ascii	"\004 \035\000X\000"
 12394      5800
 12395              		.section	.bss.DecimalMode,"aw",%nobits
 12396              		.set	.LANCHOR1,. + 0
 12399              	DecimalMode:
 12400 0000 00       		.space	1
 12401              		.section	.bss.SeparatorMode,"aw",%nobits
 12402              		.set	.LANCHOR0,. + 0
 12405              	SeparatorMode:
 12406 0000 00       		.space	1
 12407              		.section	.bss.no_status_top,"aw",%nobits
 12408              		.align	1
 12409              		.set	.LANCHOR18,. + 0
 12412              	no_status_top:
 12413 0000 0000     		.space	2
 12414              		.section	.rodata.CSWTCH.326,"a"
 12415              		.align	2
 12416              		.set	.LANCHOR11,. + 0
 12419              	CSWTCH.326:
 12420 0000 02000000 		.word	2
 12421 0004 08000000 		.word	8
 12422 0008 0A000000 		.word	10
 12423 000c 10000000 		.word	16
 12424              		.section	.rodata.CSWTCH.353,"a"
 12425              		.align	2
 12426              		.set	.LANCHOR16,. + 0
 12429              	CSWTCH.353:
 12430 0000 00000000 		.word	.LC41
 12431 0004 08000000 		.word	.LC42
 12432 0008 0C000000 		.word	.LC43
 12433              		.section	.rodata.DIGITS,"a"
 12434              		.align	2
 12435              		.set	.LANCHOR12,. + 0
 12438              	DIGITS:
 12439 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12439      34353637 
 12439      38394142 
 12439      43444546 
ARM GAS  /tmp/cchyQ5Gz.s 			page 350


 12439      00
 12440              		.section	.rodata.S7_ERROR,"a"
 12441              		.align	2
 12442              		.set	.LANCHOR26,. + 0
 12445              	S7_ERROR:
 12446 0000 4572726F 		.ascii	"Error\000"
 12446      7200
 12447              		.section	.rodata.S7_INF,"a"
 12448              		.align	2
 12449              		.set	.LANCHOR5,. + 0
 12452              	S7_INF:
 12453 0000 496E6669 		.ascii	"Infinity\000"
 12453      6E697479 
 12453      00
 12454              		.section	.rodata.S7_INF_Text,"a"
 12455              		.align	2
 12456              		.set	.LANCHOR7,. + 0
 12459              	S7_INF_Text:
 12460 0000 2049206E 		.ascii	" I n f i n i t y \000"
 12460      20662069 
 12460      206E2069 
 12460      20742079 
 12460      2000
 12461              		.section	.rodata.S7_NEG_INF_Text,"a"
 12462              		.align	2
 12463              		.set	.LANCHOR6,. + 0
 12466              	S7_NEG_INF_Text:
 12467 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 12467      20662069 
 12467      206E2069 
 12467      20742079 
 12467      2000
 12468              		.section	.rodata.S7_NaN,"a"
 12469              		.align	2
 12470              		.set	.LANCHOR3,. + 0
 12473              	S7_NaN:
 12474 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12474      6E754D6D 
 12474      45726963 
 12474      00
 12475              		.section	.rodata.S7_NaN_Text,"a"
 12476              		.align	2
 12477              		.set	.LANCHOR4,. + 0
 12480              	S7_NaN_Text:
 12481 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 12481      20742020 
 12481      206E2075 
 12481      206D2065 
 12481      20722069 
 12482              		.section	.rodata.S7_STEP,"a"
 12483              		.align	2
 12484              		.set	.LANCHOR25,. + 0
 12487              	S7_STEP:
 12488 0000 53744550 		.ascii	"StEP \000"
 12488      2000
 12489              		.section	.rodata.S7_STEP_ShortText,"a"
 12490              		.align	2
ARM GAS  /tmp/cchyQ5Gz.s 			page 351


 12491              		.set	.LANCHOR19,. + 0
 12494              	S7_STEP_ShortText:
 12495 0000 53544550 		.ascii	"STEP\000"
 12495      00
 12496              		.section	.rodata.S7_fract_EQ,"a"
 12497              		.align	2
 12498              		.set	.LANCHOR9,. + 0
 12501              	S7_fract_EQ:
 12502 0000 203D2000 		.ascii	" = \000"
 12503              		.section	.rodata.S7_fract_GT,"a"
 12504              		.align	2
 12505              		.set	.LANCHOR10,. + 0
 12508              	S7_fract_GT:
 12509 0000 20477400 		.ascii	" Gt\000"
 12510              		.section	.rodata.S7_fract_LT,"a"
 12511              		.align	2
 12512              		.set	.LANCHOR8,. + 0
 12515              	S7_fract_LT:
 12516 0000 204C7400 		.ascii	" Lt\000"
 12517              		.section	.rodata.S_SURE,"a"
 12518              		.align	2
 12519              		.set	.LANCHOR21,. + 0
 12522              	S_SURE:
 12523 0000 53757265 		.ascii	"Sure?\000"
 12523      3F00
 12524              		.section	.rodata.SvnRevision,"a"
 12525              		.align	2
 12526              		.set	.LANCHOR20,. + 0
 12529              	SvnRevision:
 12530 0000 30202020 		.ascii	"0   "
 12531              		.section	.rodata.digtbl,"a"
 12532              		.align	2
 12533              		.set	.LANCHOR2,. + 0
 12536              	digtbl:
 12537 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12537      02421252 
 12537      2D000000 
 12537      00000000 
 12537      00
 12538 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12538      00000017 
 12538      01000000 
 12538      00
 12539 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12539      28000000 
 12539      0020664B 
 12539      00000010 
 12540 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12540      5E5B3973 
 12540      77497F7B 
 12540      00000612 
 12540      0300787D 
 12541 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12541      673D240F 
 12541      75266C6D 
 12541      6F7C7914 
 12541      73362F00 
ARM GAS  /tmp/cchyQ5Gz.s 			page 352


 12542 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12542      161F7674 
 12542      6735040F 
 12542      75266915 
 12542      177C7914 
 12543 0076 000F003B 		.ascii	"\000\017\000;"
 12544              		.section	.rodata.error_table.8495,"a"
 12545              		.align	2
 12546              		.set	.LANCHOR27,. + 0
 12549              	error_table.8495:
 12550 0000 1C000000 		.word	.LC59
 12551 0004 30000000 		.word	.LC60
 12552 0008 38000000 		.word	.LC61
 12553 000c 4C000000 		.word	.LC62
 12554 0010 60000000 		.word	.LC63
 12555 0014 64000000 		.word	.LC64
 12556 0018 68000000 		.word	.LC65
 12557 001c 78000000 		.word	.LC66
 12558 0020 8C000000 		.word	.LC67
 12559 0024 9C000000 		.word	.LC68
 12560 0028 A8000000 		.word	.LC69
 12561 002c B4000000 		.word	.LC70
 12562 0030 C0000000 		.word	.LC71
 12563 0034 CC000000 		.word	.LC72
 12564 0038 D8000000 		.word	.LC73
 12565 003c F0000000 		.word	.LC74
 12566 0040 04010000 		.word	.LC75
 12567 0044 18010000 		.word	.LC76
 12568 0048 20010000 		.word	.LC77
 12569 004c 30010000 		.word	.LC78
 12570 0050 40010000 		.word	.LC79
 12571 0054 50010000 		.word	.LC80
 12572 0058 64010000 		.word	.LC81
 12573 005c 70010000 		.word	.LC82
 12574 0060 80010000 		.word	.LC83
 12575 0064 98010000 		.word	.LC84
 12576              		.section	.rodata.error_table_text.8496,"a"
 12577              		.align	2
 12578              		.set	.LANCHOR28,. + 0
 12581              	error_table_text.8496:
 12582 0000 10000000 		.word	.LC44
 12583 0004 A8000000 		.word	.LC39
 12584 0008 20000000 		.word	.LC45
 12585 000c 30000000 		.word	.LC46
 12586 0010 A8000000 		.word	.LC39
 12587 0014 A8000000 		.word	.LC39
 12588 0018 40000000 		.word	.LC47
 12589 001c 4C000000 		.word	.LC48
 12590 0020 A8000000 		.word	.LC39
 12591 0024 A8000000 		.word	.LC39
 12592 0028 A8000000 		.word	.LC39
 12593 002c 60000000 		.word	.LC49
 12594 0030 6C000000 		.word	.LC50
 12595 0034 A8000000 		.word	.LC39
 12596 0038 78000000 		.word	.LC51
 12597 003c 8C000000 		.word	.LC52
 12598 0040 A4000000 		.word	.LC53
ARM GAS  /tmp/cchyQ5Gz.s 			page 353


 12599 0044 A8000000 		.word	.LC39
 12600 0048 B8000000 		.word	.LC54
 12601 004c C4000000 		.word	.LC55
 12602 0050 D8000000 		.word	.LC56
 12603 0054 E4000000 		.word	.LC57
 12604 0058 A8000000 		.word	.LC39
 12605 005c 60000000 		.word	.LC49
 12606 0060 F8000000 		.word	.LC58
 12607 0064 A8000000 		.word	.LC39
 12608              		.section	.rodata.libname,"a"
 12609              		.align	2
 12610              		.set	.LANCHOR22,. + 0
 12613              	libname:
 12614 0000 72414D6D 		.ascii	"rAMm\000"
 12614      00
 12615 0005 4C696220 		.ascii	"Lib \000"
 12615      00
 12616 000a 42757020 		.ascii	"Bup \000"
 12616      00
 12617 000f 726F4D6D 		.ascii	"roMm\000"
 12617      00
 12618              		.section	.rodata.libname_shorttext,"a"
 12619              		.align	2
 12620              		.set	.LANCHOR24,. + 0
 12623              	libname_shorttext:
 12624 0000 52616D00 		.ascii	"Ram\000"
 12625 0004 00       		.space	1
 12626 0005 4C696200 		.ascii	"Lib\000"
 12627 0009 00       		.space	1
 12628 000a 42757000 		.ascii	"Bup\000"
 12629 000e 00       		.space	1
 12630 000f 526F6D00 		.ascii	"Rom\000"
 12631 0013 00       		.space	1
 12632              		.section	.rodata.libname_text,"a"
 12633              		.align	2
 12634              		.set	.LANCHOR23,. + 0
 12637              	libname_text:
 12638 0000 20522061 		.ascii	" R a m \000"
 12638      206D2000 
 12639 0008 0000     		.space	2
 12640 000a 204C2069 		.ascii	" L i b \000"
 12640      20622000 
 12641 0012 0000     		.space	2
 12642 0014 20422075 		.ascii	" B u p \000"
 12642      20702000 
 12643 001c 0000     		.space	2
 12644 001e 2052206F 		.ascii	" R o m \000"
 12644      206D2000 
 12645 0026 0000     		.space	2
 12646              		.section	.rodata.shift_chars.8594,"a"
 12647              		.align	2
 12648              		.set	.LANCHOR15,. + 0
 12651              	shift_chars.8594:
 12652 0000 20111213 		.ascii	" \021\022\023"
 12653              		.section	.rodata.small_dots.8788,"a"
 12654              		.align	2
 12655              		.set	.LANCHOR14,. + 0
ARM GAS  /tmp/cchyQ5Gz.s 			page 354


 12658              	small_dots.8788:
 12659 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12659      07E12C06 
 12659      07E12C06 
 12659      06
 12660              		.section	.rodata.small_minus.8787,"a"
 12661              		.align	2
 12662              		.set	.LANCHOR13,. + 0
 12665              	small_minus.8787:
 12666 0000 07C22D06 		.ascii	"\007\302-\006"
 12667              		.text
 12668              	.Letext0:
 12669              		.file 2 "src/decNumber/decContext.h"
 12670              		.file 3 "src/decNumber/decNumber.h"
 12671              		.file 4 "src/decNumber/decimal64.h"
 12672              		.file 5 "src/decNumber/decimal128.h"
 12673              		.file 6 "src/xeq.h"
 12674              		.file 7 "src/data.h"
 12675              		.file 8 "src/storage.h"
 12676              		.file 9 "src/display.h"
 12677              		.file 10 "src/consts.h"
 12678              		.file 11 "src/stats.h"
 12679              		.file 12 "src/revision.h"
 12680              		.file 13 "src/charset7.h"
 12681              		.file 14 "src/lcd.h"
 12682              		.file 15 "src/decn.h"
 12683              		.file 16 "src/alpha.h"
 12684              		.file 17 "src/int.h"
ARM GAS  /tmp/cchyQ5Gz.s 			page 355


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/cchyQ5Gz.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/cchyQ5Gz.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/cchyQ5Gz.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/cchyQ5Gz.s:126    .text.set_dig:0000000000000000 $t
     /tmp/cchyQ5Gz.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/cchyQ5Gz.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/cchyQ5Gz.s:262    .text.hms_render:0000000000000000 $t
     /tmp/cchyQ5Gz.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/cchyQ5Gz.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/cchyQ5Gz.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/cchyQ5Gz.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/cchyQ5Gz.s:596    .text.hms_step:0000000000000000 $t
     /tmp/cchyQ5Gz.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/cchyQ5Gz.s:664    .text.hms_step:0000000000000034 $d
     /tmp/cchyQ5Gz.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/cchyQ5Gz.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/cchyQ5Gz.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/cchyQ5Gz.s:1155   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/cchyQ5Gz.s:1159   .text.set_exp:0000000000000000 $t
     /tmp/cchyQ5Gz.s:1166   .text.set_exp:0000000000000000 set_exp
     /tmp/cchyQ5Gz.s:1387   .text.set_exp:00000000000000b0 $d
     /tmp/cchyQ5Gz.s:1393   .text.set_separator.part.0:0000000000000000 $t
     /tmp/cchyQ5Gz.s:1400   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/cchyQ5Gz.s:1468   .text.set_separator.part.0:0000000000000038 $d
     /tmp/cchyQ5Gz.s:1474   .text.set_decimal:0000000000000000 $t
     /tmp/cchyQ5Gz.s:1481   .text.set_decimal:0000000000000000 set_decimal
     /tmp/cchyQ5Gz.s:1577   .text.set_decimal:000000000000004c $d
     /tmp/cchyQ5Gz.s:1585   .text.set_digits_string:0000000000000000 $t
     /tmp/cchyQ5Gz.s:1592   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/cchyQ5Gz.s:1686   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/cchyQ5Gz.s:1690   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/cchyQ5Gz.s:1697   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/cchyQ5Gz.s:1844   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/cchyQ5Gz.s:1856   .text.set_x_hms:0000000000000000 $t
     /tmp/cchyQ5Gz.s:1863   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/cchyQ5Gz.s:2364   .text.set_x_hms:00000000000001b8 $d
     /tmp/cchyQ5Gz.s:2374   .text.set_x_fract:0000000000000000 $t
     /tmp/cchyQ5Gz.s:2381   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/cchyQ5Gz.s:2817   .text.set_x_fract:0000000000000198 $d
     /tmp/cchyQ5Gz.s:2832   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/cchyQ5Gz.s:2833   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/cchyQ5Gz.s:2836   .text.carry_overflow:0000000000000000 $t
     /tmp/cchyQ5Gz.s:2843   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/cchyQ5Gz.s:2980   .text.carry_overflow:0000000000000070 $d
     /tmp/cchyQ5Gz.s:2990   .text.set_int_x:0000000000000000 $t
     /tmp/cchyQ5Gz.s:2997   .text.set_int_x:0000000000000000 set_int_x
     /tmp/cchyQ5Gz.s:3755   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.326:0000000000000000 CSWTCH.328
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/cchyQ5Gz.s:3767   .text.set_int_x:0000000000000360 $t
     /tmp/cchyQ5Gz.s:3874   .text.set_int_x:00000000000003c0 $d
ARM GAS  /tmp/cchyQ5Gz.s 			page 356


     /tmp/cchyQ5Gz.s:3881   .text.set_annunciators:0000000000000000 $t
     /tmp/cchyQ5Gz.s:3888   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/cchyQ5Gz.s:4261   .text.set_annunciators:00000000000000d4 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/cchyQ5Gz.s:4273   .text.getdig:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4281   .text.getdig:0000000000000000 getdig
     /tmp/cchyQ5Gz.s:4301   .text.getdig:0000000000000008 $d
     /tmp/cchyQ5Gz.s:4306   .text.dot:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4314   .text.dot:0000000000000000 dot
     /tmp/cchyQ5Gz.s:4337   .text.std_round_fix:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4345   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/cchyQ5Gz.s:4427   .text.std_round_fix:000000000000004c $d
     /tmp/cchyQ5Gz.s:4433   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4441   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/cchyQ5Gz.s:4501   .text.set_IO_annunciator:000000000000001c $d
     /tmp/cchyQ5Gz.s:4508   .text.pixel_length:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4516   .text.pixel_length:0000000000000000 pixel_length
     /tmp/cchyQ5Gz.s:4607   .text.set_status:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4614   .text.set_status:0000000000000000 set_status
     /tmp/cchyQ5Gz.s:4687   .text.set_status:0000000000000038 $d
     /tmp/cchyQ5Gz.s:4692   .text.set_x_dn:0000000000000000 $t
     /tmp/cchyQ5Gz.s:4700   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/cchyQ5Gz.s:5468   .text.set_x_dn:0000000000000328 $d
     /tmp/cchyQ5Gz.s:5477   .text.set_x_dn:000000000000033c $t
     /tmp/cchyQ5Gz.s:5596   .text.set_x_dn:00000000000003dc $d
     /tmp/cchyQ5Gz.s:5602   .text.set_x_dn:00000000000003f0 $t
     /tmp/cchyQ5Gz.s:5629   .text.set_x_dn:000000000000041c $d
     /tmp/cchyQ5Gz.s:5635   .text.set_x_dn:0000000000000426 $t
     /tmp/cchyQ5Gz.s:6140   .text.set_x_dn:0000000000000644 $d
     /tmp/cchyQ5Gz.s:6156   .text.set_x_dn:0000000000000660 $t
     /tmp/cchyQ5Gz.s:6870   .text.set_x_dn:0000000000000950 $d
     /tmp/cchyQ5Gz.s:6879   .text.set_x:0000000000000000 $t
     /tmp/cchyQ5Gz.s:6886   .text.set_x:0000000000000000 set_x
     /tmp/cchyQ5Gz.s:6954   .text.format_reg:0000000000000000 $t
     /tmp/cchyQ5Gz.s:6962   .text.format_reg:0000000000000000 format_reg
     /tmp/cchyQ5Gz.s:7081   .text.format_reg:0000000000000064 $d
     /tmp/cchyQ5Gz.s:7087   .text.set_status_right:0000000000000000 $t
     /tmp/cchyQ5Gz.s:7094   .text.set_status_right:0000000000000000 set_status_right
     /tmp/cchyQ5Gz.s:7238   .text.set_status_right:000000000000006c $d
     /tmp/cchyQ5Gz.s:7243   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/cchyQ5Gz.s:7250   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/cchyQ5Gz.s:7375   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/cchyQ5Gz.s:7380   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/cchyQ5Gz.s:7423   .text.annunciators:0000000000000000 $t
     /tmp/cchyQ5Gz.s:7430   .text.annunciators:0000000000000000 annunciators
     /tmp/cchyQ5Gz.s:8101   .text.annunciators:0000000000000304 $d
     /tmp/cchyQ5Gz.s:8122   .text.annunciators:0000000000000340 $t
     /tmp/cchyQ5Gz.s:8514   .text.annunciators:00000000000004c8 $d
     /tmp/cchyQ5Gz.s:8530   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cchyQ5Gz.s:8597   .text.display:0000000000000000 $t
     /tmp/cchyQ5Gz.s:8605   .text.display:0000000000000000 display
     /tmp/cchyQ5Gz.s:9261   .text.display:00000000000002f8 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/cchyQ5Gz.s:9280   .text.display:0000000000000330 $t
     /tmp/cchyQ5Gz.s:9935   .text.display:00000000000005f4 $d
ARM GAS  /tmp/cchyQ5Gz.s 			page 357


     /tmp/cchyQ5Gz.s:9960   .text.display:000000000000064c $t
     /tmp/cchyQ5Gz.s:10813  .text.display:0000000000000974 $d
     /tmp/cchyQ5Gz.s:10829  .text.display:00000000000009a8 $t
     /tmp/cchyQ5Gz.s:11707  .text.display:0000000000000d14 $d
     /tmp/cchyQ5Gz.s:11731  .text.display:0000000000000d64 $t
     /tmp/cchyQ5Gz.s:11891  .text.display:0000000000000e04 $d
     /tmp/cchyQ5Gz.s:11896  .text.frozen_display:0000000000000000 $t
     /tmp/cchyQ5Gz.s:11904  .text.frozen_display:0000000000000000 frozen_display
     /tmp/cchyQ5Gz.s:11934  .text.frozen_display:000000000000001c $d
     /tmp/cchyQ5Gz.s:11939  .text.message:0000000000000000 $t
     /tmp/cchyQ5Gz.s:11947  .text.message:0000000000000000 message
     /tmp/cchyQ5Gz.s:12076  .text.message:0000000000000060 $d
     /tmp/cchyQ5Gz.s:12084  .text.error_message:0000000000000000 $t
     /tmp/cchyQ5Gz.s:12092  .text.error_message:0000000000000000 error_message
     /tmp/cchyQ5Gz.s:12235  .text.error_message:000000000000006c $d
     /tmp/cchyQ5Gz.s:12247  .rodata.str1.4:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12419  .rodata.CSWTCH.326:0000000000000000 CSWTCH.326
     /tmp/cchyQ5Gz.s:12438  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/cchyQ5Gz.s:12412  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/cchyQ5Gz.s:12529  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/cchyQ5Gz.s:12316  .rodata:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12399  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/cchyQ5Gz.s:12400  .bss.DecimalMode:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12405  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/cchyQ5Gz.s:12406  .bss.SeparatorMode:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12408  .bss.no_status_top:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12415  .rodata.CSWTCH.326:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12425  .rodata.CSWTCH.353:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12429  .rodata.CSWTCH.353:0000000000000000 CSWTCH.353
     /tmp/cchyQ5Gz.s:12434  .rodata.DIGITS:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12441  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12445  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/cchyQ5Gz.s:12448  .rodata.S7_INF:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12452  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/cchyQ5Gz.s:12455  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12459  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/cchyQ5Gz.s:12462  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12466  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/cchyQ5Gz.s:12469  .rodata.S7_NaN:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12473  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/cchyQ5Gz.s:12476  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12480  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/cchyQ5Gz.s:12483  .rodata.S7_STEP:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12487  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/cchyQ5Gz.s:12490  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12494  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/cchyQ5Gz.s:12497  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12501  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/cchyQ5Gz.s:12504  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12508  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/cchyQ5Gz.s:12511  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12515  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/cchyQ5Gz.s:12518  .rodata.S_SURE:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12522  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/cchyQ5Gz.s:12525  .rodata.SvnRevision:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12532  .rodata.digtbl:0000000000000000 $d
ARM GAS  /tmp/cchyQ5Gz.s 			page 358


     /tmp/cchyQ5Gz.s:12536  .rodata.digtbl:0000000000000000 digtbl
     /tmp/cchyQ5Gz.s:12545  .rodata.error_table.8495:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12549  .rodata.error_table.8495:0000000000000000 error_table.8495
     /tmp/cchyQ5Gz.s:12577  .rodata.error_table_text.8496:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12581  .rodata.error_table_text.8496:0000000000000000 error_table_text.8496
     /tmp/cchyQ5Gz.s:12609  .rodata.libname:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12613  .rodata.libname:0000000000000000 libname
     /tmp/cchyQ5Gz.s:12619  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12623  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/cchyQ5Gz.s:12633  .rodata.libname_text:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12637  .rodata.libname_text:0000000000000000 libname_text
     /tmp/cchyQ5Gz.s:12647  .rodata.shift_chars.8594:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12651  .rodata.shift_chars.8594:0000000000000000 shift_chars.8594
     /tmp/cchyQ5Gz.s:12654  .rodata.small_dots.8788:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12658  .rodata.small_dots.8788:0000000000000000 small_dots.8788
     /tmp/cchyQ5Gz.s:12661  .rodata.small_minus.8787:0000000000000000 $d
     /tmp/cchyQ5Gz.s:12665  .rodata.small_minus.8787:0000000000000000 small_minus.8787

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
ARM GAS  /tmp/cchyQ5Gz.s 			page 359


__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
stack_size
get_cmdline
replace_char
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
get_const
alpha_rcl_s
getprog
prt
multicmds
find_label_from
global_regs
free_mem
free_flash
local_regs
findmultilbl
copyreg
sigma_val
getX
packed_from_number
ARM GAS  /tmp/cchyQ5Gz.s 			page 360


set_NaN
do_conv
SizeStatRegs
StackBase
monfuncs
slen

ARM GAS  /tmp/ccwSk7O0.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/ccwSk7O0.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** #ifndef REALBUILD
  59:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  60:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  61:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  62:src/display.c **** char forceDispPlot;
  63:src/display.c **** #endif
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** #ifndef REALBUILD
  79:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  80:src/display.c **** #endif
  81:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  82:src/display.c **** #ifndef REALBUILD
  83:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  84:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
ARM GAS  /tmp/ccwSk7O0.s 			page 3


  88:src/display.c **** #ifndef REALBUILD
  89:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  90:src/display.c **** #endif
  91:src/display.c **** 
  92:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  93:src/display.c **** static const char S7_fract_LT[] = " Lt";
  94:src/display.c **** static const char S7_fract_GT[] = " Gt";
  95:src/display.c **** 
  96:src/display.c **** static const char libname[][5] = {
  97:src/display.c ****   "rAMm", "Lib ", "Bup ",
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c ****   "roMm"
 100:src/display.c **** #endif
 101:src/display.c **** };
 102:src/display.c **** 
 103:src/display.c **** #ifndef REALBUILD
 104:src/display.c **** static const char libname_text[][10] = {
 105:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 106:src/display.c **** };
 107:src/display.c **** static const char libname_shorttext[][5] = {
 108:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 109:src/display.c **** };
 110:src/display.c **** #endif
 111:src/display.c **** 
 112:src/display.c **** 
 113:src/display.c **** /* Set the separator and decimal mode globals
 114:src/display.c ****  */
 115:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 115 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 116:src/display.c ****   // Separators used by various modes
 117:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 117 3 view .LVU1
  35              		.loc 1 117 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 118:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 118 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 117 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 117 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 115:src/display.c ****   // Separators used by various modes
  44              		.loc 1 115 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 117 6 view .LVU7
  50 0010 0ED0     		beq	.L2
ARM GAS  /tmp/ccwSk7O0.s 			page 4


  51              		.loc 1 118 5 is_stmt 1 view .LVU8
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 119 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 120:src/display.c ****   }
 121:src/display.c ****   else {
 122:src/display.c ****     SeparatorMode = SEP_COMMA;
 123:src/display.c ****     DecimalMode = DECIMAL_DOT;
 124:src/display.c ****   }
 125:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 125 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 119 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 118 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 119 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 125 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 118 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 119 5 is_stmt 1 view .LVU16
  67              		.loc 1 125 3 view .LVU17
  68              		.loc 1 125 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 125 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 126:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 126 5 is_stmt 1 view .LVU20
  76              		.loc 1 126 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 127:src/display.c **** }
  80              		.loc 1 127 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 122 5 is_stmt 1 view .LVU23
 123:src/display.c ****   }
  90              		.loc 1 123 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
ARM GAS  /tmp/ccwSk7O0.s 			page 5


 125:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 125 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 123:src/display.c ****   }
  94              		.loc 1 123 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 122 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 125:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 125 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 122 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 123:src/display.c ****   }
 102              		.loc 1 123 5 is_stmt 1 view .LVU30
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 125 3 view .LVU31
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 125 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 125 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 127 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 128:src/display.c **** 
 129:src/display.c **** 
 130:src/display.c **** /* Table of error messages.
 131:src/display.c ****  * These consist of a double string.  The first is displayed in the
 132:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 133:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
ARM GAS  /tmp/ccwSk7O0.s 			page 6


 134:src/display.c ****  */
 135:src/display.c **** void error_message(const unsigned int e) 
 136:src/display.c **** {
 137:src/display.c **** #define MSG1(top) top "\0"
 138:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 139:src/display.c **** 
 140:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 141:src/display.c ****   static const char *const error_table[] = 
 142:src/display.c ****     {
 143:src/display.c ****       // manually get the order correct!
 144:src/display.c ****       MSG2("Running", "ProGraMm"),
 145:src/display.c ****       MSG1("Domain"),
 146:src/display.c ****       MSG2("Bad time", "or dAtE"),
 147:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 148:src/display.c ****       MSG1("+\237"),
 149:src/display.c ****       MSG1("-\237"),
 150:src/display.c ****       MSG2("No such", "LAbEL"),
 151:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 152:src/display.c ****       MSG1("Out of range"),
 153:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 154:src/display.c ****       MSG2("Bad digit", "1"),
 155:src/display.c ****       MSG2("Too long", "1"),
 156:src/display.c **** #else
 157:src/display.c ****       MSG1("Bad digit"),
 158:src/display.c ****       MSG1("Too long"),
 159:src/display.c **** #endif
 160:src/display.c ****       MSG2("RAM is", "FuLL"),
 161:src/display.c ****       MSG2("Stack", "CLASH"),
 162:src/display.c ****       MSG1("Bad mode"),
 163:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 164:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 165:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 166:src/display.c ****       MSG1("I/O"),
 167:src/display.c ****       MSG2("Invalid", "dAtA"),
 168:src/display.c ****       MSG2("Write", "ProtEctEd"),
 169:src/display.c ****       MSG2("No root", "Found"),
 170:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 171:src/display.c ****       MSG1("Singular"),
 172:src/display.c ****       MSG2("Flash is", "FuLL"),
 173:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 174:src/display.c **** #ifndef SHIFT_EXPONENT
 175:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 176:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 177:src/display.c ****       MSG2("Too\007\304 small", "1"),
 178:src/display.c **** #     else
 179:src/display.c ****       MSG2("Too small", "1"),
 180:src/display.c **** #     endif
 181:src/display.c ****       MSG2("Too big", "1"),
 182:src/display.c **** #  else
 183:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 184:src/display.c ****       MSG1("Too\007\304 small"),
 185:src/display.c **** #     else
 186:src/display.c ****       MSG1("Too small"),
 187:src/display.c **** #     endif
 188:src/display.c ****       MSG1("Too big"),
 189:src/display.c **** #  endif
 190:src/display.c **** #endif
ARM GAS  /tmp/ccwSk7O0.s 			page 7


 191:src/display.c **** #ifdef INCLUDE_C_LOCK
 192:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 193:src/display.c **** #endif
 194:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 195:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 196:src/display.c ****       MSG2("Interrupted", "X"),
 197:src/display.c **** #endif
 198:src/display.c ****     };
 199:src/display.c **** #undef MSG1
 200:src/display.c **** #undef MSG2
 201:src/display.c **** #ifndef REALBUILD
 202:src/display.c ****   static const char *const error_table_text[] =
 203:src/display.c ****     {
 204:src/display.c ****       " P r o g r a m ",
 205:src/display.c ****       "",
 206:src/display.c ****       " o r   d a t e ",
 207:src/display.c ****       " O p - c o d e ",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " L a b e l ",
 211:src/display.c ****       " O p e r a t i o n ",
 212:src/display.c ****       "",
 213:src/display.c ****       "",
 214:src/display.c ****       "",
 215:src/display.c ****       " F u l l ",
 216:src/display.c ****       " C l a s h ",
 217:src/display.c ****       "",
 218:src/display.c ****       " T o o   s m a l l ",
 219:src/display.c ****       " D a t a   p o i n t s ",
 220:src/display.c ****       " P a r a m e t e r ",
 221:src/display.c ****       "",
 222:src/display.c ****       " D a t a ",
 223:src/display.c ****       " P r o t e c t e d ",
 224:src/display.c ****       " F o u n d ",
 225:src/display.c ****       " M i s m a t c h ",
 226:src/display.c ****       "",
 227:src/display.c ****       " F u l l ",
 228:src/display.c ****       " I n s t a l l e d ",
 229:src/display.c **** #ifndef SHIFT_EXPONENT
 230:src/display.c ****       "",
 231:src/display.c ****       "",
 232:src/display.c **** #endif
 233:src/display.c **** #ifdef INCLUDE_C_LOCK
 234:src/display.c ****       "",
 235:src/display.c **** #endif
 236:src/display.c ****       "",
 237:src/display.c ****     };
 238:src/display.c **** #endif
 239:src/display.c **** 
 240:src/display.c ****   if (e != ERR_NONE || Running) {
 241:src/display.c ****     const char *p = error_table[e];
 242:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 243:src/display.c ****     if (*q == '\0')
 244:src/display.c ****       q = S7_ERROR;
 245:src/display.c ****     if (*q == 'X') {
 246:src/display.c ****       DispMsg = p;
 247:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccwSk7O0.s 			page 8


 248:src/display.c ****     }
 249:src/display.c ****     else {
 250:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 251:src/display.c ****       if (*q == '1')
 252:src/display.c **** 	q = CNULL;
 253:src/display.c **** #endif
 254:src/display.c ****       message(p, q);
 255:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 256:src/display.c **** #ifndef REALBUILD
 257:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 258:src/display.c **** #endif
 259:src/display.c ****     }
 260:src/display.c **** #ifdef INFRARED
 261:src/display.c ****     if (Tracing) {
 262:src/display.c ****       if (*q == 'X')
 263:src/display.c **** 	print_reg(regX_idx, p, 0);
 264:src/display.c ****       else {
 265:src/display.c **** 	print_tab(0);
 266:src/display.c **** 	print_line(p, 0);
 267:src/display.c **** 	print(' ');
 268:src/display.c **** 	while (*q != '\0') {
 269:src/display.c **** 	  int c = *q;
 270:src/display.c **** 	  if (c >= 'A')
 271:src/display.c **** 	    c |= 0x60; // ASCII lower case
 272:src/display.c **** 	  print(c);
 273:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 274:src/display.c **** 	    ++q;
 275:src/display.c **** 	  ++q;
 276:src/display.c **** 	}
 277:src/display.c **** 	print_advance( 0 );
 278:src/display.c ****       }
 279:src/display.c ****     }
 280:src/display.c **** #endif
 281:src/display.c ****   }
 282:src/display.c **** }
 283:src/display.c **** 
 284:src/display.c **** 
 285:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 286:src/display.c ****  * display.
 287:src/display.c ****  */
 288:src/display.c **** #define D_TOP 64
 289:src/display.c **** #define D_TL 32
 290:src/display.c **** #define D_TR 8
 291:src/display.c **** #define D_MIDDLE 16
 292:src/display.c **** #define D_BL 4
 293:src/display.c **** #define D_BR 1
 294:src/display.c **** #define D_BOTTOM 2
 295:src/display.c **** 
 296:src/display.c **** #include "charset7.h"
 297:src/display.c **** 
 298:src/display.c **** #ifndef REALBUILD
 299:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 300:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 301:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 302:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 303:src/display.c **** 
 304:src/display.c **** static void set_mant_sign_dot()
ARM GAS  /tmp/ccwSk7O0.s 			page 9


 305:src/display.c **** {
 306:src/display.c ****   LastDisplayedNumber[0]='-';
 307:src/display.c ****   set_dot(MANT_SIGN);
 308:src/display.c **** }
 309:src/display.c **** 
 310:src/display.c **** static void clr_mant_sign_dot()
 311:src/display.c **** {
 312:src/display.c ****   LastDisplayedNumber[0]=' ';
 313:src/display.c ****   clr_dot(MANT_SIGN);
 314:src/display.c **** }
 315:src/display.c **** 
 316:src/display.c **** static void set_exp_sign_dot()
 317:src/display.c **** {
 318:src/display.c ****   LastDisplayedExponent[0]='-';
 319:src/display.c ****   set_dot(EXP_SIGN);
 320:src/display.c **** }
 321:src/display.c **** 
 322:src/display.c **** static void clr_exp_sign_dot()
 323:src/display.c **** {
 324:src/display.c ****   LastDisplayedExponent[0]=' ';
 325:src/display.c ****   clr_dot(EXP_SIGN);
 326:src/display.c **** }
 327:src/display.c **** 
 328:src/display.c **** #else
 329:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 330:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 331:src/display.c **** 
 332:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 333:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 334:src/display.c **** 
 335:src/display.c **** #endif
 336:src/display.c **** 
 337:src/display.c **** #ifndef REALBUILD
 338:src/display.c **** int getdig(int ch)
 339:src/display.c **** #else
 340:src/display.c ****   static int getdig(int ch)
 341:src/display.c **** #endif
 342:src/display.c **** {
 343:src/display.c ****   // perform index lookup
 344:src/display.c ****   return digtbl[ch&0xff];
 345:src/display.c **** }
 346:src/display.c **** 
 347:src/display.c **** void dot(int n, int on) {
 348:src/display.c ****   if (on)	set_dot(n);
 349:src/display.c ****   else	clr_dot(n);
 350:src/display.c **** }
 351:src/display.c **** 
 352:src/display.c **** 
 353:src/display.c **** /* Set the decimal point *after* the indicated digit
 354:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 355:src/display.c ****  * of decimal.
 356:src/display.c ****  */
 357:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 358:src/display.c ****   if (res) {
 359:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 360:src/display.c ****   } else {
 361:src/display.c ****     set_dot(posn+7);
ARM GAS  /tmp/ccwSk7O0.s 			page 10


 362:src/display.c ****     if (decimal != DECIMAL_DOT)
 363:src/display.c ****       set_dot(posn+8);
 364:src/display.c **** #ifndef REALBUILD
 365:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 366:src/display.c **** #endif
 367:src/display.c ****   }
 368:src/display.c ****   return res;
 369:src/display.c **** }
 370:src/display.c **** 
 371:src/display.c **** /* Set the digit group separator *before* the specified digit.
 372:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 373:src/display.c ****  * sep argument.
 374:src/display.c ****  */
 375:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 376:src/display.c ****   if (sep == SEP_NONE)
 377:src/display.c ****     return res;
 378:src/display.c ****   if (res) {
 379:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 380:src/display.c ****     else *res++ = '.';
 381:src/display.c ****   } else {
 382:src/display.c ****     posn -= SEGS_PER_DIGIT;
 383:src/display.c ****     set_dot(posn+7);
 384:src/display.c ****     if (sep == SEP_COMMA)
 385:src/display.c ****       set_dot(posn+8);
 386:src/display.c **** #ifndef REALBUILD
 387:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 388:src/display.c **** #endif
 389:src/display.c ****   }
 390:src/display.c ****   return res;
 391:src/display.c **** }
 392:src/display.c **** 
 393:src/display.c **** /* Set a digit in positions [base, base+6] */
 394:src/display.c **** static void set_dig(int base, int ch)
 395:src/display.c **** {
 136              		.loc 1 395 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/display.c ****   int i;
 140              		.loc 1 396 3 view .LVU36
 397:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 397 3 view .LVU37
 142              	.LBB178:
 143              	.LBI178:
 338:src/display.c **** #else
 144              		.loc 1 338 5 view .LVU38
 145              	.LBB179:
 344:src/display.c **** }
 146              		.loc 1 344 3 view .LVU39
 344:src/display.c **** }
 147              		.loc 1 344 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 344:src/display.c **** }
 149              		.loc 1 344 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE179:
 152              	.LBE178:
ARM GAS  /tmp/ccwSk7O0.s 			page 11


 398:src/display.c **** #ifndef REALBUILD
 399:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 399 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 395:src/display.c ****   int i;
 155              		.loc 1 395 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB181:
 163              	.LBB180:
 344:src/display.c **** }
 164              		.loc 1 344 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 344:src/display.c **** }
 167              		.loc 1 344 16 view .LVU45
 168              	.LBE180:
 169              	.LBE181:
 170              		.loc 1 399 3 is_stmt 1 view .LVU46
 171              		.loc 1 399 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 400:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 400 5 is_stmt 1 view .LVU48
 174              		.loc 1 400 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 400 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 400 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 400 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 400 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 401:src/display.c ****   else
 402:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 403:src/display.c **** #endif
 404:src/display.c ****   for (i=6; i>=0; i--)
 405:src/display.c ****     {
 406:src/display.c ****       //		dot(base, c & (1 << i));
 407:src/display.c ****       if (c & (1 << i))
 408:src/display.c **** 	set_dot(base);
ARM GAS  /tmp/ccwSk7O0.s 			page 12


 196              		.loc 1 408 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 409:src/display.c ****       else
 410:src/display.c **** 	clr_dot(base);
 411:src/display.c ****       base++;
 199              		.loc 1 411 7 is_stmt 1 view .LVU55
 404:src/display.c ****     {
 200              		.loc 1 404 19 view .LVU56
 404:src/display.c ****     {
 201              		.loc 1 404 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 404:src/display.c ****     {
 204              		.loc 1 404 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 408:src/display.c ****       else
 208              		.loc 1 408 2 is_stmt 1 view .LVU59
 410:src/display.c ****       base++;
 209              		.loc 1 410 2 view .LVU60
 407:src/display.c **** 	set_dot(base);
 210              		.loc 1 407 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 407:src/display.c **** 	set_dot(base);
 212              		.loc 1 407 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 407:src/display.c **** 	set_dot(base);
 216              		.loc 1 407 7 is_stmt 1 view .LVU63
 407:src/display.c **** 	set_dot(base);
 217              		.loc 1 407 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 410:src/display.c ****       base++;
 219              		.loc 1 410 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 411 7 is_stmt 1 view .LVU66
 404:src/display.c ****     {
 223              		.loc 1 404 19 view .LVU67
 404:src/display.c ****     {
 224              		.loc 1 404 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 404:src/display.c ****     {
 227              		.loc 1 404 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 412:src/display.c ****     }
 413:src/display.c **** }
 231              		.loc 1 413 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
ARM GAS  /tmp/ccwSk7O0.s 			page 13


 402:src/display.c **** #endif
 235              		.loc 1 402 5 is_stmt 1 view .LVU71
 402:src/display.c **** #endif
 236              		.loc 1 402 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 402:src/display.c **** #endif
 238              		.loc 1 402 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 402:src/display.c **** #endif
 240              		.loc 1 402 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 402:src/display.c **** #endif
 242              		.loc 1 402 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 402:src/display.c **** #endif
 246              		.loc 1 402 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 414:src/display.c **** 
 415:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 416:src/display.c ****   if (res) *res++ = ch;
 417:src/display.c ****   else	set_dig(base, ch);
 418:src/display.c ****   return res;
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** 
 422:src/display.c **** static void set_digits_string(const char *msg, int j) {
 423:src/display.c ****   for (; *msg != '\0'; msg++) {
 424:src/display.c ****     if (*msg == '.' || *msg == ',')
 425:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 426:src/display.c ****     else {
 427:src/display.c ****       set_dig_s(j, *msg, CNULL);
 428:src/display.c ****       j += SEGS_PER_DIGIT;
 429:src/display.c ****     }
ARM GAS  /tmp/ccwSk7O0.s 			page 14


 430:src/display.c ****   }
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 434:src/display.c ****   int i;
 435:src/display.c ****   const int n = res == NULL ? 3 : 4;
 436:src/display.c **** 
 437:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 438:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 439:src/display.c **** }
 440:src/display.c **** 
 441:src/display.c **** /* Force the exponent display
 442:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 443:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 444:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 445:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 446:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 447:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 448:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 449:src/display.c ****  */
 450:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 451:src/display.c ****   union {
 452:src/display.c ****     char buf[4];
 453:src/display.c ****     int i;
 454:src/display.c ****   } u;
 455:src/display.c ****   int negative;
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 457:src/display.c ****   int thousands;
 458:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 459:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 460:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 461:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 462:src/display.c **** #  else
 463:src/display.c ****   const int show_large_exponent = 1;
 464:src/display.c **** #  endif
 465:src/display.c **** #else
 466:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 467:src/display.c ****   int thousands;
 468:src/display.c **** #  endif
 469:src/display.c ****   const int show_large_exponent = 0;
 470:src/display.c **** #endif
 471:src/display.c **** 
 472:src/display.c ****   negative = flags & 2;
 473:src/display.c ****   if (exp < 0) {
 474:src/display.c ****     negative = 1;
 475:src/display.c ****     exp = -exp;
 476:src/display.c ****   }
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c ****   thousands = exp / 1000;
 479:src/display.c **** #endif
 480:src/display.c ****   if (res) {
 481:src/display.c **** #ifdef INCLUDE_YREG_CODE
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 483:src/display.c ****     if (thousands != 0) {
 484:src/display.c **** #else
 485:src/display.c ****       if (exp > 999) {
 486:src/display.c **** #endif
ARM GAS  /tmp/ccwSk7O0.s 			page 15


 487:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 488:src/display.c **** 	// No exponent separator for large -ve exponents
 489:src/display.c ****       }
 490:src/display.c ****       else *res++ = 'e'; // Normal separator
 491:src/display.c **** #else
 492:src/display.c ****       *res++ = 'e';
 493:src/display.c **** #endif
 494:src/display.c ****       if (negative) *res++ = '-';
 495:src/display.c ****     }
 496:src/display.c ****     else {
 497:src/display.c ****       if (negative) SET_EXP_SIGN;
 498:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 499:src/display.c ****       if (thousands != 0) {
 500:src/display.c **** #else
 501:src/display.c **** 	if (exp > 999) {
 502:src/display.c **** #endif
 503:src/display.c **** 	  if (!show_large_exponent
 504:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 505:src/display.c **** 	      && (flags & 8) == 0
 506:src/display.c **** #endif
 507:src/display.c **** 	      ) {
 508:src/display.c **** #ifdef REALBUILD
 509:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 510:src/display.c **** #else
 511:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 512:src/display.c **** #endif
 513:src/display.c **** 	    goto no_number;
 514:src/display.c **** 	  }
 515:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 516:src/display.c **** 	  else {
 517:src/display.c **** 	    exp -= thousands * 1000;
 518:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 519:src/display.c **** 	    if (flags & 16) {
 520:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 521:src/display.c **** 	      int i;
 522:src/display.c **** 
 523:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 524:src/display.c **** 		// Clear digits and separators
 525:src/display.c **** 		clr_dot(i);
 526:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 527:src/display.c **** 	    }
 528:src/display.c **** #  endif
 529:src/display.c **** 	    if (negative) {
 530:src/display.c **** 	      CLR_EXP_SIGN;
 531:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 532:src/display.c **** 	    }
 533:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 534:src/display.c **** 	    flags = 1;
 535:src/display.c **** 	  }
 536:src/display.c **** #endif
 537:src/display.c **** 	}
 538:src/display.c ****       }
 539:src/display.c **** #ifdef REALBUILD
 540:src/display.c ****       u.i = 0; // Smaller ARM code
 541:src/display.c **** #else
 542:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 543:src/display.c **** #endif
ARM GAS  /tmp/ccwSk7O0.s 			page 16


 544:src/display.c ****       if (flags & 5) {
 545:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 546:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 547:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 548:src/display.c **** 	  int i;
 549:src/display.c **** 
 550:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 551:src/display.c **** 	    if (u.buf[i] == '0')
 552:src/display.c **** 	      u.buf[i] = ' ';
 553:src/display.c **** 	    else
 554:src/display.c **** 	      break;
 555:src/display.c **** 	  }
 556:src/display.c **** 	  if (i != 0 && negative) {
 557:src/display.c **** 	    // Move minus sign to right in front of exponent
 558:src/display.c **** 	    CLR_EXP_SIGN;
 559:src/display.c **** 	    u.buf[i - 1] = '-';
 560:src/display.c **** 	  }
 561:src/display.c **** 	}
 562:src/display.c **** #endif
 563:src/display.c ****       }
 564:src/display.c ****       else
 565:src/display.c **** 	num_arg(u.buf, exp);
 566:src/display.c ****     no_number:
 567:src/display.c ****       set_exp_digits_string(u.buf, res);
 568:src/display.c ****     }
 569:src/display.c **** 
 570:src/display.c ****     static void carry_overflow(void) {
 571:src/display.c ****       const int base = SEGS_EXP_BASE;
 572:src/display.c ****       int c;
 573:src/display.c ****       unsigned int b;
 574:src/display.c **** 
 575:src/display.c ****       // Figure out the base
 576:src/display.c ****       switch (State2.smode) {
 577:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 578:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 579:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 580:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 581:src/display.c ****       default:	b = UState.int_base+1;	break;
 582:src/display.c ****       }
 583:src/display.c **** 
 584:src/display.c ****       // Display the base as the first exponent digit
 585:src/display.c ****       if (b > 10 && b < 16)
 586:src/display.c **** 	SET_EXP_SIGN;
 587:src/display.c ****       c = "B34567o9D12345h"[b-2];
 588:src/display.c ****       set_dig(base, c);
 589:src/display.c **** 
 590:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 591:src/display.c ****       if (get_carry())
 592:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 593:src/display.c ****       if (get_overflow())
 594:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 595:src/display.c ****     }
 596:src/display.c **** 
 597:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 598:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 599:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 600:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
ARM GAS  /tmp/ccwSk7O0.s 			page 17


 601:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 602:src/display.c **** #endif
 603:src/display.c **** 
 604:src/display.c ****     /* Display the annunicator text line.
 605:src/display.c ****      * Care needs to be taken to keep things aligned.
 606:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 607:src/display.c ****      */
 608:src/display.c **** #ifdef TOP_ROW
 609:src/display.c ****     static void annunciators(void) {
 610:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 611:src/display.c ****       char buf[42], *p = buf, *q="";
 612:src/display.c ****       char buf2[42], *p2 = buf2;
 613:src/display.c ****       int n;
 614:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 615:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 616:src/display.c ****       // Constant variables and code branches depending on a constant variable
 617:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 618:src/display.c ****       // feature run-time configurable if needed.
 619:src/display.c **** #ifdef INCLUDE_YREG_CODE
 620:src/display.c **** #  ifdef YREG_ALWAYS_ON
 621:src/display.c ****       const int yreg_enabled = 1;
 622:src/display.c **** #  else
 623:src/display.c ****       const int yreg_enabled = UState.show_y;
 624:src/display.c **** #  endif
 625:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 626:src/display.c ****       const int yreg_hms = 1;
 627:src/display.c **** #  else
 628:src/display.c ****       const int yreg_hms = 0;
 629:src/display.c **** #  endif
 630:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 631:src/display.c ****       const int yreg_fract = 1;
 632:src/display.c **** #  else
 633:src/display.c ****       const int yreg_fract = 0;
 634:src/display.c **** #  endif
 635:src/display.c **** #else
 636:src/display.c ****       const int yreg_enabled = 0;
 637:src/display.c ****       const int yreg_hms = 0;
 638:src/display.c ****       const int yreg_fract = 0;
 639:src/display.c **** #endif
 640:src/display.c **** #ifdef RP_PREFIX
 641:src/display.c ****       const int rp_prefix = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int rp_prefix = 0;
 644:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 645:src/display.c **** #endif
 646:src/display.c ****       // Indicates whether font escape code is compiled in.
 647:src/display.c ****       // This variable will always be set at compile time.
 648:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 649:src/display.c ****       const int has_FONT_ESCAPE = 1;
 650:src/display.c **** #else
 651:src/display.c ****       const int has_FONT_ESCAPE = 0;
 652:src/display.c **** #endif
 653:src/display.c **** 
 654:src/display.c ****       xset(buf, '\0', sizeof(buf));
 655:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 656:src/display.c ****       
 657:src/display.c ****       if (is_intmode()) {
ARM GAS  /tmp/ccwSk7O0.s 			page 18


 658:src/display.c **** #ifdef SHOW_STACK_SIZE
 659:src/display.c **** 	if (shift_char == ' ') {
 660:src/display.c **** 	  *p2++ = '\007';
 661:src/display.c **** 	  *p2++ = '\346';
 662:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 663:src/display.c **** 	}
 664:src/display.c **** 	else
 665:src/display.c **** #endif
 666:src/display.c **** 	  {
 667:src/display.c **** 	    *p2++ = shift_char;
 668:src/display.c **** 	    *p2++ = '\006';
 669:src/display.c **** 	  }
 670:src/display.c **** 
 671:src/display.c **** 	switch(int_mode()) {
 672:src/display.c **** 	default:
 673:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 674:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 675:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 676:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 677:src/display.c **** 	}
 678:src/display.c **** 	q = scopy(p2, q);
 679:src/display.c **** 	*q++ = '\006';
 680:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 681:src/display.c **** 
 682:src/display.c **** 	if (IntMaxWindow > 0) {
 683:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 684:src/display.c **** 	  if (*q == '1')
 685:src/display.c **** 	    n += 2;
 686:src/display.c **** 	  if (q[1] == '1')
 687:src/display.c **** 	    n += 2;
 688:src/display.c **** 	  while (n-- > 0)
 689:src/display.c **** 	    *p2++ = '\006';
 690:src/display.c **** 
 691:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 692:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 693:src/display.c **** 	}
 694:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 695:src/display.c ****       }
 696:src/display.c **** #ifdef INCLUDE_C_LOCK
 697:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 698:src/display.c **** #else
 699:src/display.c ****       else if (!yreg_enabled
 700:src/display.c **** #endif
 701:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 702:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 703:src/display.c **** #endif
 704:src/display.c **** 	       ) {
 705:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 706:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 707:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 708:src/display.c **** 	if (shift_char == ' ') {
 709:src/display.c **** 	  *p2++ = '\007';
 710:src/display.c **** 	  *p2++ = '\342';
 711:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 712:src/display.c **** 	  *p2++ = '\007';
 713:src/display.c **** 	  *p2++ = '\344';
 714:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
ARM GAS  /tmp/ccwSk7O0.s 			page 19


 715:src/display.c **** 	}
 716:src/display.c **** 	else
 717:src/display.c **** #endif
 718:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 719:src/display.c **** 	    *p2++ = shift_char;
 720:src/display.c **** 	    *p2++ = '\006';
 721:src/display.c **** 	  }
 722:src/display.c **** 	  else {
 723:src/display.c **** 	    *p2++ = 'D';
 724:src/display.c **** 	  }
 725:src/display.c **** 
 726:src/display.c **** 	if (State2.cmplx) {
 727:src/display.c **** 	  *p2++ = ' ';
 728:src/display.c **** 	  *p2 = '\024';
 729:src/display.c **** 	  goto skip;
 730:src/display.c **** 	}
 731:src/display.c **** 	if (State2.arrow) {
 732:src/display.c **** 	  *p2++ = ' ';
 733:src/display.c **** 	  *p2 = '\015';
 734:src/display.c **** 	  goto skip;
 735:src/display.c **** 	}
 736:src/display.c **** 
 737:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 738:src/display.c **** 	  if (State2.wascomplex) {
 739:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 740:src/display.c **** 	  }
 741:src/display.c **** 	  else if (rp_prefix) {
 742:src/display.c **** 	    if (RectPolConv == 1) {
 743:src/display.c **** 	      q = "\007\306<";
 744:src/display.c **** 	    }
 745:src/display.c **** 	    else {
 746:src/display.c **** 	      q = "\007\306y";
 747:src/display.c **** 	    }
 748:src/display.c **** 	  }
 749:src/display.c **** 	  p = scopy(buf, q);
 750:src/display.c **** 
 751:src/display.c **** 	  goto display_yreg;
 752:src/display.c **** 	}
 753:src/display.c **** 
 754:src/display.c **** 	switch (UState.date_mode) {
 755:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 756:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 757:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 758:src/display.c **** #endif
 759:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 760:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 761:src/display.c **** #endif
 762:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 763:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 764:src/display.c **** #endif
 765:src/display.c **** #endif
 766:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 767:src/display.c **** 	}
 768:src/display.c **** 	p2 = scopy(p2, q);
 769:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 770:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 771:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
ARM GAS  /tmp/ccwSk7O0.s 			page 20


 772:src/display.c **** 	}
 773:src/display.c **** #else
 774:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 775:src/display.c **** 	*p2++ = '\007';
 776:src/display.c **** 	*p2++ = '\342';
 777:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 778:src/display.c **** #endif
 779:src/display.c ****       }
 780:src/display.c ****       else { // yreg_enabled
 781:src/display.c **** 	// do top-related things first
 782:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 783:src/display.c **** 	if (State2.cmplx) {
 784:src/display.c **** 	  *p2++ = '\007';
 785:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 786:src/display.c **** 	  *p2++ = shift_char;
 787:src/display.c **** 	  *p2++ = '\024';
 788:src/display.c **** 	}
 789:src/display.c **** 	else {// if (shift_char != ' ') {
 790:src/display.c **** 	  *p2++ = '\007';
 791:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 792:src/display.c **** 	  *p2++ = shift_char;
 793:src/display.c **** 	}
 794:src/display.c **** #endif
 795:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 796:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 797:src/display.c **** 	  *p2++ = '\007';
 798:src/display.c **** 	  *p2++ = '\207';
 799:src/display.c **** 	  *p2++ = '\007';	    
 800:src/display.c **** 	}
 801:src/display.c **** 	else {
 802:src/display.c **** 	  *p2++ = '\007';
 803:src/display.c **** 	  *p2++ = '\207';
 804:src/display.c **** 	  *p2++ = ' ';
 805:src/display.c **** 	}
 806:src/display.c **** #endif
 807:src/display.c **** #ifndef SHOW_STACK_SIZE
 808:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 809:src/display.c **** 	p2 = scopy(p2, q);
 810:src/display.c **** #else
 811:src/display.c **** 	if (is_dblmode()) {
 812:src/display.c **** 	  *p2++ = '\007';
 813:src/display.c **** 	  *p2++ = '\342';
 814:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 815:src/display.c **** 	  *p2++ = '\007';
 816:src/display.c **** 	  *p2++ = '\345';
 817:src/display.c **** 	  *p2++ = 'D';
 818:src/display.c **** 	}
 819:src/display.c **** 	else {
 820:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 821:src/display.c **** 	  p2 = scopy(p2, q);
 822:src/display.c **** 	}
 823:src/display.c **** #endif
 824:src/display.c **** 
 825:src/display.c **** 	switch (UState.date_mode) {
 826:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 827:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 828:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
ARM GAS  /tmp/ccwSk7O0.s 			page 21


 829:src/display.c **** #endif
 830:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 831:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 832:src/display.c **** #endif
 833:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 834:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 835:src/display.c **** #endif
 836:src/display.c **** #endif
 837:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 838:src/display.c **** 	}
 839:src/display.c **** 	  
 840:src/display.c **** 	//      no_copy:
 841:src/display.c **** 	// display either arrow or datemode
 842:src/display.c **** 	if (State2.arrow) {
 843:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 844:src/display.c **** 	} // no need to skip y display with arrow here
 845:src/display.c **** 	else {
 846:src/display.c **** 	  p2 = scopy(p2, q);
 847:src/display.c **** 	}
 848:src/display.c **** 	// now do the annotations, if any, for the middle row:
 849:src/display.c **** #ifdef INCLUDE_C_LOCK
 850:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 851:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 852:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 853:src/display.c **** 	  }
 854:src/display.c **** 	  else {
 855:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 856:src/display.c **** 	  }
 857:src/display.c **** 	  scopy(p, q);
 858:src/display.c **** 	  goto skip;
 859:src/display.c **** 	}
 860:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 861:src/display.c **** 	  q = "\007\307<";
 862:src/display.c **** 	  p = scopy(p, q);
 863:src/display.c **** 	}
 864:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 865:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 866:src/display.c **** 	  p = scopy(p, q);
 867:src/display.c **** 	}
 868:src/display.c **** #else
 869:src/display.c **** 	
 870:src/display.c **** 	if (State2.wascomplex) {
 871:src/display.c **** 	  q = "\007\207i";
 872:src/display.c **** 	  p = scopy(p, q);
 873:src/display.c **** 	  //	    goto no_copy;
 874:src/display.c **** 	}
 875:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 876:src/display.c **** 	  q = "\007\307<";
 877:src/display.c **** 	  p = scopy(p, q);
 878:src/display.c **** 	  //	    goto no_copy;
 879:src/display.c **** 	}
 880:src/display.c **** 	else
 881:src/display.c **** #endif
 882:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 883:src/display.c **** 	    q = "\007\307y";
 884:src/display.c **** 	    p = scopy(p, q);
 885:src/display.c **** 	    //	    goto no_copy;
ARM GAS  /tmp/ccwSk7O0.s 			page 22


 886:src/display.c **** 	  }
 887:src/display.c ****       
 888:src/display.c **** 	if (State2.runmode) {
 889:src/display.c **** 	  decNumber y;
 890:src/display.c **** 	display_yreg:
 891:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 892:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 893:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 894:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 895:src/display.c **** 	   */
 896:src/display.c **** 	  if (is_intmode()) {
 897:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 898:src/display.c **** 	    goto skip;
 899:src/display.c **** 	  }
 900:src/display.c **** #ifdef INCLUDE_C_LOCK
 901:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 902:src/display.c **** 	    getRegister(&y, regK_idx);
 903:src/display.c **** 	  }
 904:src/display.c **** 	  else {
 905:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 906:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 907:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 908:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 909:src/display.c **** 	  }
 910:src/display.c **** #else
 911:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 912:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 913:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 914:src/display.c **** #endif
 915:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 916:src/display.c **** #ifdef INCLUDE_C_LOCK
 917:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 918:src/display.c **** #else
 919:src/display.c **** 	    if (yreg_hms && State2.hms) {
 920:src/display.c **** #endif
 921:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 922:src/display.c **** 
 923:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 924:src/display.c **** 	      UState.nothousands = 1;
 925:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 926:src/display.c **** 	      UState.nothousands = saved_nothousands;
 927:src/display.c **** 	      // First replace the '@' character with the degree symbol
 928:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 929:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 930:src/display.c **** 	      // then remove the fractional part of the seconds.
 931:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 932:src/display.c **** 	      while (*p) {
 933:src/display.c **** 		replace_char(buf, p[0], p[1]);
 934:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 935:src/display.c **** 		  goto skip;
 936:src/display.c **** 		}
 937:src/display.c **** 		p += 2;
 938:src/display.c **** 	      }
 939:src/display.c **** 	      goto skip;
 940:src/display.c **** 	    }
 941:src/display.c **** 	    if (yreg_fract && UState.fract
 942:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccwSk7O0.s 			page 23


 943:src/display.c **** 		&& !State2.cmplx
 944:src/display.c **** #endif
 945:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 946:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 947:src/display.c **** #endif
 948:src/display.c **** 		&& set_x_fract(&y, p)) {
 949:src/display.c **** 	      char ltgteq;
 950:src/display.c **** 
 951:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 952:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 953:src/display.c **** 	      ltgteq = *q;
 954:src/display.c **** 	      switch (ltgteq) {
 955:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 956:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 957:src/display.c **** 	      }
 958:src/display.c **** 	      scopy(q, "\007\344?");
 959:src/display.c **** 	      q[2] = ltgteq;
 960:src/display.c **** 
 961:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 962:src/display.c **** 		goto skip;
 963:src/display.c **** 	      }
 964:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 965:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 966:src/display.c **** 		goto skip;
 967:src/display.c **** 	      }
 968:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 969:src/display.c **** 	    }
 970:src/display.c **** 	  }
 971:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 972:src/display.c **** 	    int extra_pixels;
 973:src/display.c **** 
 974:src/display.c **** 	    set_x_dn(&y, p, &n);
 975:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 976:src/display.c **** 	    if (extra_pixels <= 0)
 977:src/display.c **** 	      break;
 978:src/display.c **** 
 979:src/display.c **** 	    xset(p, '\0', n+10);
 980:src/display.c **** 
 981:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 982:src/display.c **** 	  }
 983:src/display.c **** 	}
 984:src/display.c ****       }
 985:src/display.c ****       
 986:src/display.c ****     skip:
 987:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 988:src/display.c ****       set_status_top_always(buf2);
 989:src/display.c ****       
 990:src/display.c ****     }
 991:src/display.c **** #else
 992:src/display.c ****     static void annunciators(void) {
 993:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 994:src/display.c ****       char buf[42], *p = buf, *q="";
 995:src/display.c ****       int n;
 996:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 997:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 998:src/display.c ****       // Constant variables and code branches depending on a constant variable
 999:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
ARM GAS  /tmp/ccwSk7O0.s 			page 24


1000:src/display.c ****       // feature run-time configurable if needed.
1001:src/display.c **** #ifdef INCLUDE_YREG_CODE
1002:src/display.c **** #  ifdef YREG_ALWAYS_ON
1003:src/display.c ****       const int yreg_enabled = 1;
1004:src/display.c **** #  else
1005:src/display.c ****       const int yreg_enabled = UState.show_y;
1006:src/display.c **** #  endif
1007:src/display.c **** #  ifdef INCLUDE_YREG_HMS
1008:src/display.c ****       const int yreg_hms = 1;
1009:src/display.c **** #  else
1010:src/display.c ****       const int yreg_hms = 0;
1011:src/display.c **** #  endif
1012:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
1013:src/display.c ****       const int yreg_fract = 1;
1014:src/display.c **** #  else
1015:src/display.c ****       const int yreg_fract = 0;
1016:src/display.c **** #  endif
1017:src/display.c **** #else
1018:src/display.c ****       const int yreg_enabled = 0;
1019:src/display.c ****       const int yreg_hms = 0;
1020:src/display.c ****       const int yreg_fract = 0;
1021:src/display.c **** #endif
1022:src/display.c **** #ifdef RP_PREFIX
1023:src/display.c ****       const int rp_prefix = 1;
1024:src/display.c **** #else
1025:src/display.c ****       const int rp_prefix = 0;
1026:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
1027:src/display.c **** #endif
1028:src/display.c ****       // Indicates whether font escape code is compiled in.
1029:src/display.c ****       // This variable will always be set at compile time.
1030:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1031:src/display.c ****       const int has_FONT_ESCAPE = 1;
1032:src/display.c **** #else
1033:src/display.c ****       const int has_FONT_ESCAPE = 0;
1034:src/display.c **** #endif
1035:src/display.c **** 
1036:src/display.c ****       xset(buf, '\0', sizeof(buf));
1037:src/display.c ****       
1038:src/display.c ****       if (is_intmode()) {
1039:src/display.c **** #ifdef SHOW_STACK_SIZE
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
1042:src/display.c **** 	  *p++ = '\346';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	}
1045:src/display.c **** 	else
1046:src/display.c **** #endif
1047:src/display.c **** 	  {
1048:src/display.c **** 	    *p++ = shift_char;
1049:src/display.c **** 	    *p++ = '\006';
1050:src/display.c **** 	  }
1051:src/display.c **** 
1052:src/display.c **** 	switch(int_mode()) {
1053:src/display.c **** 	default:
1054:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1055:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1056:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
ARM GAS  /tmp/ccwSk7O0.s 			page 25


1057:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1058:src/display.c **** 	}
1059:src/display.c **** 	q = scopy(p, q);
1060:src/display.c **** 	*q++ = '\006';
1061:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1062:src/display.c **** 
1063:src/display.c **** 	if (IntMaxWindow > 0) {
1064:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1065:src/display.c **** 	  if (*q == '1')
1066:src/display.c **** 	    n += 2;
1067:src/display.c **** 	  if (q[1] == '1')
1068:src/display.c **** 	    n += 2;
1069:src/display.c **** 	  while (n-- > 0)
1070:src/display.c **** 	    *p++ = '\006';
1071:src/display.c **** 
1072:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1073:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1074:src/display.c **** 	}
1075:src/display.c ****       }
1076:src/display.c **** #ifdef INCLUDE_C_LOCK
1077:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1078:src/display.c **** #else
1079:src/display.c ****       else if (!yreg_enabled
1080:src/display.c **** #endif
1081:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1082:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1083:src/display.c **** #endif
1084:src/display.c **** 	       ) {
1085:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1086:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1087:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1088:src/display.c **** 	if (shift_char == ' ') {
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\342';
1091:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1092:src/display.c **** 	  *p++ = '\007';
1093:src/display.c **** 	  *p++ = '\344';
1094:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1095:src/display.c **** 	}
1096:src/display.c **** 	else
1097:src/display.c **** #endif
1098:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1099:src/display.c **** 	    *p++ = shift_char;
1100:src/display.c **** 	    *p++ = '\006';
1101:src/display.c **** 	  }
1102:src/display.c **** 	  else {
1103:src/display.c **** 	    *p++ = 'D';
1104:src/display.c **** 	  }
1105:src/display.c **** 
1106:src/display.c **** 	if (State2.cmplx) {
1107:src/display.c **** 	  *p++ = ' ';
1108:src/display.c **** 	  *p = '\024';
1109:src/display.c **** 	  goto skip;
1110:src/display.c **** 	}
1111:src/display.c **** 	if (State2.arrow) {
1112:src/display.c **** 	  *p++ = ' ';
1113:src/display.c **** 	  *p = '\015';
ARM GAS  /tmp/ccwSk7O0.s 			page 26


1114:src/display.c **** 	  goto skip;
1115:src/display.c **** 	}
1116:src/display.c **** 
1117:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1118:src/display.c **** 	  if (State2.wascomplex) {
1119:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1120:src/display.c **** 	  }
1121:src/display.c **** 	  else if (rp_prefix) {
1122:src/display.c **** 	    if (RectPolConv == 1) {
1123:src/display.c **** 	      q = "\007\306<";
1124:src/display.c **** 	    }
1125:src/display.c **** 	    else {
1126:src/display.c **** 	      q = "\007\306y";
1127:src/display.c **** 	    }
1128:src/display.c **** 	  }
1129:src/display.c **** 	  p = scopy(buf, q);
1130:src/display.c **** 
1131:src/display.c **** 	  goto display_yreg;
1132:src/display.c **** 	}
1133:src/display.c **** 
1134:src/display.c **** 	switch (UState.date_mode) {
1135:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1136:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1137:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1138:src/display.c **** #endif
1139:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1140:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1141:src/display.c **** #endif
1142:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1143:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1144:src/display.c **** #endif
1145:src/display.c **** #endif
1146:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1147:src/display.c **** 	}
1148:src/display.c **** 	p = scopy(p, q);
1149:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1150:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1151:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1152:src/display.c **** 	}
1153:src/display.c **** #else
1154:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1155:src/display.c **** 	*p++ = '\007';
1156:src/display.c **** 	*p++ = '\342';
1157:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1158:src/display.c **** #endif
1159:src/display.c ****       }
1160:src/display.c ****       else { // yreg_enabled
1161:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1162:src/display.c **** 	if (State2.cmplx) {
1163:src/display.c **** 	  *p++ = '\007';
1164:src/display.c **** 	  *p++ = '\344';
1165:src/display.c **** 	  *p++ = shift_char;
1166:src/display.c **** 	  q = "\024";
1167:src/display.c **** 	}
1168:src/display.c **** 	else if (shift_char != ' ') {
1169:src/display.c **** 	  *p++ = '\007';
1170:src/display.c **** 	  *p++ = '\307';
ARM GAS  /tmp/ccwSk7O0.s 			page 27


1171:src/display.c **** 	  *p++ = shift_char;
1172:src/display.c **** 	  goto no_copy;
1173:src/display.c **** 	}
1174:src/display.c **** 	else
1175:src/display.c **** #endif
1176:src/display.c **** #ifdef INCLUDE_C_LOCK
1177:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1178:src/display.c **** 			if ( POLAR_DISPLAY ) {
1179:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1180:src/display.c **** 			}
1181:src/display.c **** 			else {
1182:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1183:src/display.c **** 			}
1184:src/display.c **** 			scopy(p, q);
1185:src/display.c **** 			goto skip;
1186:src/display.c **** 		}
1187:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1188:src/display.c **** 			q = "\007\307<";
1189:src/display.c **** 		}
1190:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1191:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1192:src/display.c **** 		}
1193:src/display.c **** #else
1194:src/display.c **** 	  if (State2.wascomplex) {
1195:src/display.c **** 	    q = "\007\207i";
1196:src/display.c **** 	  }
1197:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1198:src/display.c **** 	    q = "\007\307<";
1199:src/display.c **** 	  }
1200:src/display.c **** #endif
1201:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1202:src/display.c **** 	    q = "\007\307y";
1203:src/display.c **** 	  }
1204:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1205:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1206:src/display.c **** 	    q = "\007\207\007";
1207:src/display.c **** 	  }
1208:src/display.c **** #endif
1209:src/display.c **** 	  else {
1210:src/display.c **** #ifndef SHOW_STACK_SIZE
1211:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1212:src/display.c **** #else
1213:src/display.c **** 	    if (is_dblmode()) {
1214:src/display.c **** 	      *p++ = '\007';
1215:src/display.c **** 	      *p++ = '\342';
1216:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1217:src/display.c **** 	      q = "\007\345D";
1218:src/display.c **** 	    }
1219:src/display.c **** 	    else {
1220:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1221:src/display.c **** 	    }
1222:src/display.c **** #endif
1223:src/display.c **** 	  }
1224:src/display.c **** 	p = scopy(p, q);
1225:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1226:src/display.c ****       no_copy:
1227:src/display.c **** #endif
ARM GAS  /tmp/ccwSk7O0.s 			page 28


1228:src/display.c **** 
1229:src/display.c **** 	if (State2.arrow) {
1230:src/display.c **** 	  scopy(p, "\007\204\006\015");
1231:src/display.c **** 	} else if (State2.runmode) {
1232:src/display.c **** 	  decNumber y;
1233:src/display.c **** 	display_yreg:
1234:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1235:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1236:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1237:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1238:src/display.c **** 	   */
1239:src/display.c **** #ifdef INCLUDE_C_LOCK
1240:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1241:src/display.c **** 		    getRegister(&y, regK_idx);
1242:src/display.c **** 		  }
1243:src/display.c **** 		  else {
1244:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1245:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1246:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1247:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1248:src/display.c **** 		  }
1249:src/display.c **** #else
1250:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1251:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1252:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1253:src/display.c **** #endif
1254:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1255:src/display.c **** #ifdef INCLUDE_C_LOCK
1256:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1257:src/display.c **** #else
1258:src/display.c **** 	    if (yreg_hms && State2.hms) {
1259:src/display.c **** #endif
1260:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1261:src/display.c **** 
1262:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1263:src/display.c **** 	      UState.nothousands = 1;
1264:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1265:src/display.c **** 	      UState.nothousands = saved_nothousands;
1266:src/display.c **** 	      // First replace the '@' character with the degree symbol
1267:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1268:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1269:src/display.c **** 	      // then remove the fractional part of the seconds.
1270:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1271:src/display.c **** 	      while (*p) {
1272:src/display.c **** 		replace_char(buf, p[0], p[1]);
1273:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1274:src/display.c **** 		  goto skip;
1275:src/display.c **** 		}
1276:src/display.c **** 		p += 2;
1277:src/display.c **** 	      }
1278:src/display.c **** 	      goto skip;
1279:src/display.c **** 	    }
1280:src/display.c **** 	    if (yreg_fract && UState.fract
1281:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1282:src/display.c **** 		&& !State2.cmplx
1283:src/display.c **** #endif
1284:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
ARM GAS  /tmp/ccwSk7O0.s 			page 29


1285:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1286:src/display.c **** #endif
1287:src/display.c **** 		&& set_x_fract(&y, p)) {
1288:src/display.c **** 	      char ltgteq;
1289:src/display.c **** 
1290:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1291:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1292:src/display.c **** 	      ltgteq = *q;
1293:src/display.c **** 	      switch (ltgteq) {
1294:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1295:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1296:src/display.c **** 	      }
1297:src/display.c **** 	      scopy(q, "\007\344?");
1298:src/display.c **** 	      q[2] = ltgteq;
1299:src/display.c **** 
1300:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1301:src/display.c **** 		goto skip;
1302:src/display.c **** 	      }
1303:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1304:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1305:src/display.c **** 		goto skip;
1306:src/display.c **** 	      }
1307:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1308:src/display.c **** 	    }
1309:src/display.c **** 	  }
1310:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1311:src/display.c **** 	    int extra_pixels;
1312:src/display.c **** 
1313:src/display.c **** 	    set_x_dn(&y, p, &n);
1314:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1315:src/display.c **** 	    if (extra_pixels <= 0)
1316:src/display.c **** 	      break;
1317:src/display.c **** 
1318:src/display.c **** 	    xset(p, '\0', n+10);
1319:src/display.c **** 
1320:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1321:src/display.c **** 	  }
1322:src/display.c **** 	}
1323:src/display.c ****       }
1324:src/display.c ****       
1325:src/display.c ****     skip:	set_status_top(buf);
1326:src/display.c ****     }
1327:src/display.c **** #endif //top_row
1328:src/display.c ****     static void disp_x(const char *p) {
1329:src/display.c ****       int i;
1330:src/display.c ****       int gotdot = -1;
1331:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1332:src/display.c ****       const
1333:src/display.c **** #endif
1334:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1335:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1336:src/display.c ****       int overflow_to_left = 0;
1337:src/display.c **** #endif
1338:src/display.c **** 
1339:src/display.c ****       if (*p == '-') {
1340:src/display.c **** 	SET_MANT_SIGN;
1341:src/display.c **** 	p++;
ARM GAS  /tmp/ccwSk7O0.s 			page 30


1342:src/display.c ****       }
1343:src/display.c **** 
1344:src/display.c ****       if (is_intmode()) {
1345:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1346:src/display.c **** 	  set_dig(i, *p);
1347:src/display.c **** 	  i += SEGS_PER_DIGIT;
1348:src/display.c **** 	}
1349:src/display.c **** 	carry_overflow();
1350:src/display.c ****       } else {
1351:src/display.c **** 	set_separator_decimal_modes();
1352:src/display.c **** 
1353:src/display.c **** 	i = 0;
1354:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1355:src/display.c **** 	if ( CmdLineDot > 1 ) {
1356:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1357:src/display.c **** 	  const
1358:src/display.c **** #  endif
1359:src/display.c **** 	    int double_dot = 0;
1360:src/display.c **** 	  int j;
1361:src/display.c **** 
1362:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1363:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1364:src/display.c **** 	      gotdot = j;
1365:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1366:src/display.c **** 	      double_dot = (p[j+1] == '.');
1367:src/display.c **** #  endif
1368:src/display.c **** 	    }
1369:src/display.c **** 	  }
1370:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1371:src/display.c **** 	  if (j > 0) {
1372:src/display.c **** 	    p += j + 1;
1373:src/display.c **** 	    i = SEGS_PER_DIGIT;
1374:src/display.c **** 	    if (gotdot <= j) {
1375:src/display.c **** 	      gotdot = 0;
1376:src/display.c **** 	      if (double_dot)
1377:src/display.c **** 		p++;
1378:src/display.c **** 	    }
1379:src/display.c **** 	    else if (*p == '.') {
1380:src/display.c **** 	      gotdot = 0;
1381:src/display.c **** 	      p++;
1382:src/display.c **** 	      if (!double_dot)
1383:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1384:src/display.c **** 	    }
1385:src/display.c **** 	    else gotdot = -1;
1386:src/display.c **** 	    set_dig(0, '<');
1387:src/display.c **** 	    overflow_to_left = 1;
1388:src/display.c **** 	  }
1389:src/display.c **** 	  else gotdot = -1;
1390:src/display.c **** 	}
1391:src/display.c **** #endif
1392:src/display.c **** 
1393:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1394:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1395:src/display.c **** 	       && *p != 'D'
1396:src/display.c **** #endif
1397:src/display.c **** 	       ; p++) {
1398:src/display.c **** 	  if (*p == '.') {
ARM GAS  /tmp/ccwSk7O0.s 			page 31


1399:src/display.c **** 	    if (gotdot < 0)
1400:src/display.c **** 	      gotdot = i;
1401:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1402:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1403:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1404:src/display.c **** 	      if ( *(p+1) == '.' ) {
1405:src/display.c **** 		p++;
1406:src/display.c **** 	      }
1407:src/display.c **** #  else
1408:src/display.c **** 	      if ( i != gotdot ) {
1409:src/display.c **** #  endif
1410:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1411:src/display.c **** 		i += segs_per_digit;
1412:src/display.c **** 	      }
1413:src/display.c **** 	      else {
1414:src/display.c **** 		if ( CmdLineDot > 1 ) {
1415:src/display.c **** 		  i += segs_per_digit;
1416:src/display.c **** 		}
1417:src/display.c **** 		else {
1418:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1419:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1420:src/display.c **** 		}
1421:src/display.c **** 	      }
1422:src/display.c **** #else
1423:src/display.c **** 	      if (i > 0)
1424:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1425:src/display.c **** 	      else {
1426:src/display.c **** 		set_dig(i, '0');
1427:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1428:src/display.c **** 		i += segs_per_digit;
1429:src/display.c **** 	      }
1430:src/display.c **** #endif
1431:src/display.c **** 	    } else {
1432:src/display.c **** 	      set_dig(i, *p);
1433:src/display.c **** 	      i += segs_per_digit;
1434:src/display.c **** 	    }
1435:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1436:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1437:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1438:src/display.c **** #endif
1439:src/display.c **** 	  }
1440:src/display.c **** 
1441:src/display.c **** 	  /* Implement a floating comma */
1442:src/display.c **** 	  if (gotdot < 0)
1443:src/display.c **** 	    gotdot = i;
1444:src/display.c **** 	  for (;;) {
1445:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1446:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1447:src/display.c **** 	      break;
1448:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1449:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1450:src/display.c **** 	      break;
1451:src/display.c **** #endif
1452:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1453:src/display.c **** 	  }
1454:src/display.c **** 
1455:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccwSk7O0.s 			page 32


1456:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1457:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1458:src/display.c **** 	    int flags = 8;
1459:src/display.c **** #  else
1460:src/display.c **** 	    int flags = 12;
1461:src/display.c **** #  endif
1462:src/display.c **** 
1463:src/display.c **** 	    if (*p == 'D')
1464:src/display.c **** 	      flags |= 2;
1465:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1466:src/display.c **** 	      flags |= 16;
1467:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1468:src/display.c **** 	  }
1469:src/display.c **** #else
1470:src/display.c **** 	  if (*p == 'E') {
1471:src/display.c **** 	    p++;
1472:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1473:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1474:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1475:src/display.c **** #  else
1476:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1477:src/display.c **** #  endif
1478:src/display.c **** 	  } 
1479:src/display.c **** #endif
1480:src/display.c **** 	}
1481:src/display.c ****       }
1482:src/display.c **** 
1483:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1484:src/display.c **** 
1485:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1486:src/display.c **** 	const int ws = word_size();
1487:src/display.c **** 	unsigned int b;
1488:src/display.c **** 	long long int vs = value;
1489:src/display.c **** 	unsigned long long int v;
1490:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1491:src/display.c **** 	int i, j, k;
1492:src/display.c **** 	int sign = 0;
1493:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1494:src/display.c **** 
1495:src/display.c **** 	switch (State2.smode) {
1496:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1497:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1498:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1499:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1500:src/display.c **** 	default:	b = int_base();	break;
1501:src/display.c **** 	}
1502:src/display.c **** 
1503:src/display.c **** 	if (!res) {
1504:src/display.c **** 	  IntMaxWindow = 0;
1505:src/display.c **** 	  carry_overflow();
1506:src/display.c **** 	}
1507:src/display.c **** 
1508:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1509:src/display.c **** 	  v = extract_value(value, &sign);
1510:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1511:src/display.c **** 	    v = value;
1512:src/display.c **** 	  if (v == 0) {
ARM GAS  /tmp/ccwSk7O0.s 			page 33


1513:src/display.c **** 	    if (sign)
1514:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1515:src/display.c **** 	    set_dig_s(dig, '0', res);
1516:src/display.c **** 	    return;
1517:src/display.c **** 	  } else
1518:src/display.c **** 	    for (i=0; v != 0; i++) {
1519:src/display.c **** 	      const int r = v % b;
1520:src/display.c **** 	      v /= b;
1521:src/display.c **** 	      buf[i] = DIGITS[r];
1522:src/display.c **** 	    }
1523:src/display.c **** 	} else {
1524:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1525:src/display.c **** 	  if (ws < 64) {
1526:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1527:src/display.c **** 	    vs &= mask;
1528:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1529:src/display.c **** 	      vs |= ~mask;
1530:src/display.c **** 	  }
1531:src/display.c **** 
1532:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1533:src/display.c **** 	    set_dig_s(dig, '0', res);
1534:src/display.c **** 	    return;
1535:src/display.c **** 	  } else if (!UState.leadzero) {
1536:src/display.c **** 	    v = (unsigned long long int)vs;
1537:src/display.c **** 	    for (i=0; v != 0; i++) {
1538:src/display.c **** 	      const int r = v % b;
1539:src/display.c **** 	      v /= b;
1540:src/display.c **** 	      buf[i] = DIGITS[r];
1541:src/display.c **** 	    }
1542:src/display.c **** 	  } else {
1543:src/display.c **** 	    int n;
1544:src/display.c **** 	    const unsigned int b1 = b >> 1;
1545:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1546:src/display.c **** 	    v = (unsigned long long int)vs;
1547:src/display.c **** 
1548:src/display.c **** 	    n = (ws + fac) / (fac+1);
1549:src/display.c **** 	    for (i=0; i<n; i++) {
1550:src/display.c **** 	      const int r = v % b;
1551:src/display.c **** 	      v /= b;
1552:src/display.c **** 	      buf[i] = DIGITS[r];
1553:src/display.c **** 	    }
1554:src/display.c **** 	  }
1555:src/display.c **** 	}
1556:src/display.c **** #ifdef BIGGER_DISPLAY
1557:src/display.c **** #define MAX_INT_Y_DIG 13
1558:src/display.c **** #else
1559:src/display.c **** #define MAX_INT_Y_DIG 7
1560:src/display.c **** #endif
1561:src/display.c **** 	/* At this point i is the number of digits in the output */
1562:src/display.c **** 	int nd = i;
1563:src/display.c **** 	if (res) {
1564:src/display.c **** 	  if (sign) *res++ = '-';
1565:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1566:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1567:src/display.c **** 	      *res++ = buf[i];
1568:src/display.c **** 	    *res++ = '.';
1569:src/display.c **** 	    *res++ = '.';
ARM GAS  /tmp/ccwSk7O0.s 			page 34


1570:src/display.c **** 	  }
1571:src/display.c **** 	  else {
1572:src/display.c **** 	    while (--i >= 0)
1573:src/display.c **** 	      *res++ = buf[i];
1574:src/display.c **** 	  }
1575:src/display.c **** 	} else {
1576:src/display.c **** #if 0
1577:src/display.c **** 	  set_separator_decimal_modes();
1578:src/display.c **** 
1579:src/display.c **** 	  // Allows configuration of digit grouping per base
1580:src/display.c **** 	  static const char grouping[] = 
1581:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1582:src/display.c **** 		    //	   2     3     4     5     6     7     8
1583:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1584:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1585:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1586:src/display.c **** 	    : grouping[b - 2] >> 4;
1587:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1588:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1589:src/display.c **** #else
1590:src/display.c **** 	  // Less flexible but shorter
1591:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1592:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1593:src/display.c **** 	    : b == 16 ? 2 : 3;
1594:src/display.c **** 	  set_separator_decimal_modes();
1595:src/display.c **** #endif
1596:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1597:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1598:src/display.c **** 	    State2.window = 0;
1599:src/display.c **** 	  buf[i] = '\0';
1600:src/display.c **** 
1601:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1602:src/display.c **** 	  for (k = 0; k < 12; k++)
1603:src/display.c **** 	    if (buf[j + k] == '\0')
1604:src/display.c **** 	      break;
1605:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1606:src/display.c **** 	    int ch = buf[j++];
1607:src/display.c **** 	    if (i >= shift)
1608:src/display.c **** 	      ch -= 030;
1609:src/display.c **** 	    set_dig(dig, ch);
1610:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1611:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1612:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1613:src/display.c **** 	  }
1614:src/display.c **** 	  if (sign) {
1615:src/display.c **** 	    if (dig >= 0)
1616:src/display.c **** 	      set_dig(dig, '-');
1617:src/display.c **** 	    else	SET_MANT_SIGN;
1618:src/display.c **** 	  }
1619:src/display.c **** 	}
1620:src/display.c ****       }
1621:src/display.c **** 
1622:src/display.c ****       /* Handle special cases.
1623:src/display.c ****        * return non-zero if the number is special.
1624:src/display.c ****        */
1625:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1626:src/display.c **** 	if (decNumberIsSpecial(x)) {
ARM GAS  /tmp/ccwSk7O0.s 			page 35


1627:src/display.c **** 	  if (decNumberIsNaN(x)) {
1628:src/display.c **** 	    if (res) {
1629:src/display.c **** 	      scopy(res, "NaN");
1630:src/display.c **** 	    } else {
1631:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1632:src/display.c **** #ifndef REALBUILD
1633:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1634:src/display.c **** 	      forceDispPlot=0;
1635:src/display.c **** #endif
1636:src/display.c **** 	    }
1637:src/display.c **** 	    return 1;
1638:src/display.c **** 	  } else {
1639:src/display.c **** 	    if (decNumberIsNegative(x)) {
1640:src/display.c **** 	      if (res) *res++ = '-';
1641:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1642:src/display.c **** 	    }
1643:src/display.c **** 	    if (res)
1644:src/display.c **** 	      *res++ = '\237';
1645:src/display.c **** 	    else {
1646:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1647:src/display.c **** #ifndef REALBUILD
1648:src/display.c **** 	      if (decNumberIsNegative(x)) {
1649:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1650:src/display.c **** 	      }
1651:src/display.c **** 	      else {
1652:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1653:src/display.c **** 	      }
1654:src/display.c **** 	      forceDispPlot=0;
1655:src/display.c **** #endif
1656:src/display.c **** 	    }
1657:src/display.c **** 	    return 1;
1658:src/display.c **** 	  }
1659:src/display.c **** 	}
1660:src/display.c **** 	return 0;
1661:src/display.c ****       }
1662:src/display.c **** 
1663:src/display.c **** 
1664:src/display.c ****       /* Extract the two lowest integral digits from the number
1665:src/display.c ****        */
1666:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1667:src/display.c **** 	decNumber n;
1668:src/display.c **** 
1669:src/display.c **** 	decNumberMod(&n, x, &const_100);
1670:src/display.c **** 	*v = dn_to_int(&n);
1671:src/display.c **** 	dn_mulpow10(&n, x, -2);
1672:src/display.c **** 	decNumberTrunc(res, &n);
1673:src/display.c ****       }
1674:src/display.c **** 
1675:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1675 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1676:src/display.c **** 	char b[32];
 276              		.loc 1 1676 2 view .LVU78
1677:src/display.c **** 	int i, j;
 277              		.loc 1 1677 2 view .LVU79
ARM GAS  /tmp/ccwSk7O0.s 			page 36


1678:src/display.c **** 
1679:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1679 2 view .LVU80
 279              		.loc 1 1679 12 view .LVU81
1675:src/display.c **** 	char b[32];
 280              		.loc 1 1675 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1680:src/display.c **** 	  if (v == 0)
1681:src/display.c **** 	    b[i] = spaces?' ':'0';
1682:src/display.c **** 	  else {
1683:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1683 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1675:src/display.c **** 	char b[32];
 292              		.loc 1 1675 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1675:src/display.c **** 	char b[32];
 295              		.loc 1 1675 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1679:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1679 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1680:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1680 4 is_stmt 1 view .LVU87
 303              		.loc 1 1683 6 view .LVU88
 304              		.loc 1 1683 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1684:src/display.c **** 	    v /= 10;
 311              		.loc 1 1684 6 is_stmt 1 view .LVU90
1685:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1685 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1679:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1679 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1680:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1680 7 view .LVU93
 318 0024 30B1     		cbz	r0, .L44
1679:src/display.c **** 	  if (v == 0)
ARM GAS  /tmp/ccwSk7O0.s 			page 37


 319              		.loc 1 1679 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1685 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1684:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1684 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1685 6 is_stmt 1 view .LVU97
1679:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1679 17 view .LVU98
1679:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1679 12 view .LVU99
1679:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1679 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1679:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1679 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1679:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1679 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1680:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1680 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1681:src/display.c **** 	  else {
 349              		.loc 1 1681 6 is_stmt 1 view .LVU104
1679:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1679 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1679:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1679 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1681:src/display.c **** 	  else {
 355              		.loc 1 1681 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1679:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1679 17 is_stmt 1 view .LVU108
1679:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1679 12 view .LVU109
1679:src/display.c **** 	  if (v == 0)
 360              		.loc 1 1679 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
ARM GAS  /tmp/ccwSk7O0.s 			page 38


 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1679:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1679 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1686:src/display.c **** 	  }
1687:src/display.c **** 	}
1688:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1688 2 is_stmt 1 view .LVU112
 371              		.loc 1 1688 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1689:src/display.c **** 	  b[0] = '0';
1690:src/display.c **** 
1691:src/display.c **** 	/* Copy across and appropriately leading space things
1692:src/display.c **** 	 */
1693:src/display.c **** 	j = *jin;
 374              		.loc 1 1693 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1688:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1688 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1689:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1689 4 is_stmt 1 view .LVU116
1689:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1689 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1693 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1694:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1694 2 view .LVU119
 386              		.loc 1 1694 8 view .LVU120
1693:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1693 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1694 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1695:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1695 4 is_stmt 1 view .LVU123
 395              	.LBB182:
 396              	.LBB183:
 416:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 416 12 view .LVU124
 398              	.LBE183:
 399              	.LBE182:
 400              		.loc 1 1695 24 is_stmt 0 view .LVU125
 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB187:
ARM GAS  /tmp/ccwSk7O0.s 			page 39


 403              	.LBB184:
 416:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 416 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 416:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 416 16 view .LVU127
 408              	.LBE184:
 409              	.LBI182:
 415:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 415 14 is_stmt 1 view .LVU128
 411              	.LBB185:
 416:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 416 3 view .LVU129
 416:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 416 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 416:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 416 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 416:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 416 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 418:src/display.c **** }
 423              		.loc 1 418 3 is_stmt 1 view .LVU133
 418:src/display.c **** }
 424              		.loc 1 418 3 is_stmt 0 view .LVU134
 425              	.LBE185:
 426              	.LBE187:
1696:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1696 4 is_stmt 1 view .LVU135
1694:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1694 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1696 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1694:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1694 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1697:src/display.c **** 	}
1698:src/display.c **** 	*jin = j;
 436              		.loc 1 1698 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1698 2 is_stmt 1 view .LVU140
 440              		.loc 1 1698 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1699:src/display.c **** 	return str;
1700:src/display.c ****       }
 443              		.loc 1 1700 7 view .LVU142
ARM GAS  /tmp/ccwSk7O0.s 			page 40


 444 0092 2846     		mov	r0, r5
1698:src/display.c **** 	return str;
 445              		.loc 1 1698 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1699:src/display.c **** 	return str;
 447              		.loc 1 1699 2 is_stmt 1 view .LVU144
 448              		.loc 1 1700 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB188:
 458              	.LBB186:
 417:src/display.c ****   return res;
 459              		.loc 1 417 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 417:src/display.c ****   return res;
 463              		.loc 1 417 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE186:
 470              	.LBE188:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 433:src/display.c ****   int i;
 485              		.loc 1 433 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 434:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 434 3 view .LVU149
 435:src/display.c **** 
 490              		.loc 1 435 3 view .LVU150
 433:src/display.c ****   int i;
 491              		.loc 1 433 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
ARM GAS  /tmp/ccwSk7O0.s 			page 41


 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 435:src/display.c **** 
 500              		.loc 1 435 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 437 3 is_stmt 1 view .LVU153
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 437 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB189:
 513              	.LBB190:
 417:src/display.c ****   return res;
 514              		.loc 1 417 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 416:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 416 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 416:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 416 19 view .LVU157
 523              	.LBE190:
 524              	.LBE189:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 437 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB196:
 528              	.LBB191:
 416:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 416 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 418:src/display.c **** }
 532              		.loc 1 418 3 is_stmt 1 view .LVU160
 418:src/display.c **** }
 533              		.loc 1 418 3 is_stmt 0 view .LVU161
 534              	.LBE191:
 535              	.LBE196:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 437 36 is_stmt 1 view .LVU162
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 437 13 view .LVU163
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 437 3 is_stmt 0 view .LVU164
ARM GAS  /tmp/ccwSk7O0.s 			page 42


 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 438:src/display.c **** }
 542              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB197:
 544              	.LBB192:
 416:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 416 12 discriminator 3 view .LVU166
 416:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 416 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE192:
 548              	.LBE197:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 437 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB198:
 553              	.LBB193:
 416:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 416 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 416:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 416 16 discriminator 3 view .LVU170
 558              	.LBE193:
 559              	.LBI189:
 415:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 415 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB194:
 416:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 416 3 discriminator 3 view .LVU172
 563              	.LBE194:
 564              	.LBE198:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 437 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB199:
 569              	.LBB195:
 416:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 416 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 417:src/display.c ****   return res;
 573              		.loc 1 417 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 418:src/display.c **** }
 578              		.loc 1 418 3 view .LVU176
 418:src/display.c **** }
 579              		.loc 1 418 3 is_stmt 0 view .LVU177
 580              	.LBE195:
 581              	.LBE199:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccwSk7O0.s 			page 43


 582              		.loc 1 437 36 is_stmt 1 view .LVU178
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 437 13 view .LVU179
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 437 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 439:src/display.c **** 
 589              		.loc 1 439 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 439:src/display.c **** 
 591              		.loc 1 439 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1666:src/display.c **** 	decNumber n;
 606              		.loc 1 1666 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1667:src/display.c **** 
 610              		.loc 1 1667 2 view .LVU184
1669:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1669 2 view .LVU185
1666:src/display.c **** 	decNumber n;
 612              		.loc 1 1666 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1666:src/display.c **** 	decNumber n;
 621              		.loc 1 1666 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1669:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1669 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1669:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1669 2 view .LVU189
 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
ARM GAS  /tmp/ccwSk7O0.s 			page 44


1666:src/display.c **** 	decNumber n;
 630              		.loc 1 1666 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1669:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1669 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1670 2 is_stmt 1 view .LVU192
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1670 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1671:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1671 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1670 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1671:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1671 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1672:src/display.c ****       }
 649              		.loc 1 1672 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1673:src/display.c **** 
 654              		.loc 1 1673 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1673:src/display.c **** 
 661              		.loc 1 1673 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
 677              	.LVL56:
 678              	.LFB39:
ARM GAS  /tmp/ccwSk7O0.s 			page 45


1701:src/display.c **** 
1702:src/display.c **** 
1703:src/display.c ****       /* Display the number in H.MS mode.
1704:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1705:src/display.c ****        */
1706:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1707:src/display.c **** 	decNumber x, y, a, t, u;
1708:src/display.c **** 	int j=0;
1709:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1710:src/display.c **** 	unsigned int hr, min, sec, fs;
1711:src/display.c **** 
1712:src/display.c **** 	if (check_special_dn(rgx, res)) {
1713:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1714:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1715:src/display.c **** 	  return;
1716:src/display.c **** 	}
1717:src/display.c **** 
1718:src/display.c **** 	set_separator_decimal_modes();
1719:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1720:src/display.c **** 	dn_abs(&a, rgx);
1721:src/display.c **** 	if (decNumberIsNegative(&x)) {
1722:src/display.c **** 	  if (res != NULL)
1723:src/display.c **** 	    *res++ += '-';
1724:src/display.c **** 	  else
1725:src/display.c **** 	    SET_MANT_SIGN;
1726:src/display.c **** 	  dn_minus(&x, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 
1729:src/display.c **** 	decNumberHR2HMS(&y, &x);
1730:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1731:src/display.c **** 	decNumberRound(&u, &t);
1732:src/display.c **** 
1733:src/display.c **** 	hms_step(&t, &u, &fs);
1734:src/display.c **** 	hms_step(&u, &t, &sec);
1735:src/display.c **** 	hms_step(&t, &u, &min);
1736:src/display.c **** 	hr = dn_to_int(&t);
1737:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1738:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1739:src/display.c **** 
1740:src/display.c **** 	// degrees
1741:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1742:src/display.c **** 	res = set_dig_s(j, '@', res);
1743:src/display.c **** 	j += SEGS_PER_DIGIT;
1744:src/display.c **** 
1745:src/display.c **** 	// minutes
1746:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1747:src/display.c **** 	res = set_dig_s(j, '\'', res);
1748:src/display.c **** 	j += SEGS_PER_DIGIT;
1749:src/display.c **** 
1750:src/display.c **** 	// seconds
1751:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1752:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1753:src/display.c **** 
1754:src/display.c **** 	// Fractional seconds
1755:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1756:src/display.c **** 
1757:src/display.c **** 	// We're now pointing at the exponent's first digit...
ARM GAS  /tmp/ccwSk7O0.s 			page 46


1758:src/display.c **** 	res = set_dig_s(j, '"', res);
1759:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1760:src/display.c **** 
1761:src/display.c **** 	// Check for values too big or small
1762:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1763:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1764:src/display.c **** 	} else if (! dn_eq0(&a)) {
1765:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1766:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1767:src/display.c **** 	  }
1768:src/display.c **** 	}
1769:src/display.c ****       }
1770:src/display.c **** 
1771:src/display.c **** 
1772:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1773:src/display.c **** 	decNumber x, w, n, d, t;
1774:src/display.c **** 	char buf[32], *p = buf;
1775:src/display.c **** 	int j;
1776:src/display.c **** 
1777:src/display.c **** 	if (check_special_dn(rgx, res))
1778:src/display.c **** 	  return 1;
1779:src/display.c **** 	dn_abs(&x, rgx);
1780:src/display.c **** 	if (dn_ge(&x, &const_100000))
1781:src/display.c **** 	  return 0;
1782:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1783:src/display.c **** 	  return 0;
1784:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1785:src/display.c **** 	  if (res != NULL)
1786:src/display.c **** 	    *res++ += '-';
1787:src/display.c **** 	  else
1788:src/display.c **** 	    SET_MANT_SIGN;
1789:src/display.c **** 	}
1790:src/display.c **** 	decNumberFrac(&w, &x);
1791:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1792:src/display.c **** 
1793:src/display.c **** 	dn_divide(&t, &n, &d);
1794:src/display.c **** 	dn_compare(&t, &t, &w);
1795:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1796:src/display.c **** 
1797:src/display.c **** 	if (dn_eq(&n, &d)) {
1798:src/display.c **** 	  dn_inc(&w);
1799:src/display.c **** 	  decNumberZero(&n);
1800:src/display.c **** 	}
1801:src/display.c **** 
1802:src/display.c **** 	if (!UState.improperfrac) {
1803:src/display.c **** 	  if (!dn_eq0(&w)) {
1804:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1805:src/display.c **** 	    *p++ = ' ';
1806:src/display.c **** 	  }
1807:src/display.c **** 	} else {
1808:src/display.c **** 	  dn_multiply(&x, &w, &d);
1809:src/display.c **** 	  dn_add(&n, &n, &x);
1810:src/display.c **** 	}
1811:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1812:src/display.c **** 	*p++ = '/';
1813:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1814:src/display.c **** 	*p = '\0';
ARM GAS  /tmp/ccwSk7O0.s 			page 47


1815:src/display.c **** 	if ((p - 12) > buf) {
1816:src/display.c **** 	  p -= 12;
1817:src/display.c **** 	  *p = '<';
1818:src/display.c **** 	} else	p = buf;
1819:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1820:src/display.c **** 	  res = set_dig_s(j, *p, res);
1821:src/display.c **** 	  j += SEGS_PER_DIGIT;
1822:src/display.c **** 	}
1823:src/display.c **** 
1824:src/display.c **** 	if (dn_eq0(&t))
1825:src/display.c **** 	  p = (char *)S7_fract_EQ;
1826:src/display.c **** 	else if (decNumberIsNegative(&t))
1827:src/display.c **** 	  p = (char *)S7_fract_LT;
1828:src/display.c **** 	else
1829:src/display.c **** 	  p = (char *)S7_fract_GT;
1830:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1831:src/display.c **** 	  res = set_dig_s(j, *p, res);
1832:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1833:src/display.c **** 	}
1834:src/display.c **** 	return 1;
1835:src/display.c ****       }
1836:src/display.c **** 
1837:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1838:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1839:src/display.c **** 	decNumber c;
1840:src/display.c **** 	int true_exp, x=0;
1841:src/display.c **** 	int min_pos_exp, max_neg_exp;
1842:src/display.c **** 
1843:src/display.c **** 	if ( mode != MODE_STD ) {
1844:src/display.c **** 	  min_pos_exp = 9;
1845:src/display.c **** 	  max_neg_exp = -5;
1846:src/display.c **** 	}
1847:src/display.c **** 	else {
1848:src/display.c **** 	  min_pos_exp = 12;
1849:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1853:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1854:src/display.c **** 
1855:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1856:src/display.c **** 	  x = *dd;
1857:src/display.c **** 	}
1858:src/display.c **** 
1859:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1860:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1861:src/display.c **** 	  *dd += -true_exp;
1862:src/display.c **** 	  return MODE_FIX;
1863:src/display.c **** 	}
1864:src/display.c **** 
1865:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1866:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1867:src/display.c **** 	}
1868:src/display.c **** 	else {
1869:src/display.c **** 	  return MODE_STD;
1870:src/display.c **** 	}
1871:src/display.c ****       }
ARM GAS  /tmp/ccwSk7O0.s 			page 48


1872:src/display.c **** #else
1873:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1874:src/display.c **** 	decNumber b, c;
1875:src/display.c **** 
1876:src/display.c **** 	dn_1(&b);
1877:src/display.c **** 	b.exponent -= UState.dispdigs;
1878:src/display.c **** 	dn_abs(&c, z);
1879:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1880:src/display.c **** 	  return MODE_FIX;
1881:src/display.c **** 	return MODE_STD;
1882:src/display.c ****       }
1883:src/display.c **** #endif
1884:src/display.c **** 
1885:src/display.c ****       /* SHOW display mode
1886:src/display.c ****        * in double precision show left or right part
1887:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1888:src/display.c ****        */
1889:src/display.c ****       static void show_x(char *x, int exp) {
1890:src/display.c **** 	const int dbl = is_dblmode();
1891:src/display.c **** 	char *p;
1892:src/display.c **** 	int i, j;
1893:src/display.c **** 	char *upper_str;
1894:src/display.c **** 	enum separator_modes separator_mode;
1895:src/display.c **** 	char decimal_mark;
1896:src/display.c **** 	char thousands_sep;
1897:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1898:src/display.c **** 	const int grouping = 0;
1899:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1900:src/display.c **** 	const int grouping = !UState.nothousands;
1901:src/display.c **** #else
1902:src/display.c **** 	const int grouping = 1;
1903:src/display.c **** #endif
1904:src/display.c **** 	int negative;
1905:src/display.c **** 
1906:src/display.c **** 	if (x[0] == '-') {
1907:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1908:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1909:src/display.c **** 
1910:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1911:src/display.c **** 	  xcopy(x, small_minus, 4);
1912:src/display.c **** 	  x += 4;
1913:src/display.c **** 	  negative = 4;
1914:src/display.c **** #else
1915:src/display.c **** 	  ++x;
1916:src/display.c **** 	  negative = 1;
1917:src/display.c **** #endif
1918:src/display.c **** 	}
1919:src/display.c **** 	else negative = 0;
1920:src/display.c **** 
1921:src/display.c **** 	p = find_char(x, '\0');
1922:src/display.c **** 	xset(p, '0', 34 - (p - x));
1923:src/display.c **** 
1924:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1925:src/display.c **** 	  separator_mode = SEP_COMMA;
1926:src/display.c **** 	  decimal_mark = '.';
1927:src/display.c **** 	  thousands_sep = ',';
1928:src/display.c **** 	}
ARM GAS  /tmp/ccwSk7O0.s 			page 49


1929:src/display.c **** 	else {
1930:src/display.c **** 	  separator_mode = SEP_DOT;
1931:src/display.c **** 	  decimal_mark = ',';
1932:src/display.c **** 	  thousands_sep = '.';
1933:src/display.c **** 	}
1934:src/display.c **** 
1935:src/display.c **** 	if (State2.window) { // right half in double precision mode
1936:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1937:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1938:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1939:src/display.c **** 
1940:src/display.c **** 	  upper_str = x + 3;
1941:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1942:src/display.c **** 	  if (grouping) {
1943:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1944:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1945:src/display.c **** 	    x += 3 + 13 + 7;
1946:src/display.c **** 	  }
1947:src/display.c **** 	  else x += 3 + 13 + 6;
1948:src/display.c **** #else
1949:src/display.c **** 	  upper_str = x + 13;
1950:src/display.c **** 	  xset(upper_str, '.', 3);
1951:src/display.c **** 	  if (grouping) {
1952:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1953:src/display.c **** 	    upper_str[6] = thousands_sep;
1954:src/display.c **** 	    x += 13 + 3 + 7;
1955:src/display.c **** 	  }
1956:src/display.c **** 	  else x += 13 + 3 + 6;
1957:src/display.c **** #endif
1958:src/display.c **** 	  negative = 0;
1959:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1960:src/display.c **** 	}
1961:src/display.c **** 	else {
1962:src/display.c **** 	  upper_str = x;
1963:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1964:src/display.c **** 	  x[1] = decimal_mark;
1965:src/display.c **** 	  if (grouping) {
1966:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1967:src/display.c **** 	    x[5] = thousands_sep;
1968:src/display.c **** 	    x += 9;
1969:src/display.c **** 	  }
1970:src/display.c **** 	  else x += 8;
1971:src/display.c **** 	  if (dbl) {
1972:src/display.c **** 	    if (exp < 0) {
1973:src/display.c **** 	      x[9] = '-';
1974:src/display.c **** 	      exp = -exp;
1975:src/display.c **** 	    }
1976:src/display.c **** 	    else
1977:src/display.c **** 	      x[9] = ' ';
1978:src/display.c **** 	    j = exp / 1000;
1979:src/display.c **** 	    x[10] = '0' + j;
1980:src/display.c **** 	    exp -= 1000 * j;
1981:src/display.c **** 	  }
1982:src/display.c **** 	  else {
1983:src/display.c **** 	    x[9] = '\0';
1984:src/display.c **** 	    x[10] = '\0';
1985:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 50


1986:src/display.c **** 	  xcopy(x + 1, x, 11);
1987:src/display.c **** 	  *x = 0;
1988:src/display.c **** 	  set_exp(exp, 1, CNULL);
1989:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1990:src/display.c **** 	}
1991:src/display.c **** 	if (grouping) {
1992:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1993:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1994:src/display.c **** 	  }
1995:src/display.c **** 	}
1996:src/display.c **** 
1997:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1998:src/display.c **** 	  set_dig(j, x[i]);
1999:src/display.c **** 
2000:src/display.c **** 	*x = '\0';
2001:src/display.c **** 	set_status(upper_str - negative);
2002:src/display.c ****       }
2003:src/display.c **** 
2004:src/display.c **** 
2005:src/display.c ****       /* Display the X register in the numeric portion of the display.
2006:src/display.c ****        * We have to account for the various display modes and numbers of
2007:src/display.c ****        * digits.
2008:src/display.c ****        */
2009:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
2010:src/display.c **** 	decNumber z;
2011:src/display.c **** 	int digits = DISPLAY_DIGITS;
2012:src/display.c **** 
2013:src/display.c **** 	if (dbl)
2014:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
2015:src/display.c **** 	else
2016:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
2017:src/display.c **** 	set_x_dn(&z, res, &digits);
2018:src/display.c ****       }
2019:src/display.c **** 
2020:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
2021:src/display.c **** 	char x[50], *obp = x;
2022:src/display.c **** 	int odig = 0;
2023:src/display.c **** 	int show_exp = 0;
2024:src/display.c **** 	int j;
2025:src/display.c **** 	char mantissa[64];
2026:src/display.c **** 	int exp = 0;
2027:src/display.c **** 	char *p = mantissa;
2028:src/display.c **** 	char *r;
2029:src/display.c **** 	const char *q;
2030:src/display.c **** 	int count, i;
2031:src/display.c **** 	int extra_digits = 0;
2032:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2033:src/display.c **** 	int dd;
2034:src/display.c **** 	int dispdigs;
2035:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
2036:src/display.c **** #else
2037:src/display.c **** 	int dd = UState.dispdigs;
2038:src/display.c **** 	int mode = UState.dispmode;
2039:src/display.c **** #endif
2040:src/display.c **** 	int c;
2041:src/display.c **** 	int negative = 0;
2042:src/display.c **** 	int trimzeros = 0;
ARM GAS  /tmp/ccwSk7O0.s 			page 51


2043:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
2044:src/display.c **** 	const int show_large_exponent = 0;
2045:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
2046:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
2047:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
2048:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
2049:src/display.c **** #else
2050:src/display.c **** 	const int show_large_exponent = 1;
2051:src/display.c **** #endif
2052:src/display.c **** 
2053:src/display.c **** 	set_separator_decimal_modes();
2054:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2055:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
2056:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
2057:src/display.c **** 	    if (State2.hms) {
2058:src/display.c **** 	      set_x_hms(z, res);
2059:src/display.c **** 	      return;
2060:src/display.c **** 	    }
2061:src/display.c **** 	    else if (UState.fract) {
2062:src/display.c **** 	      if (set_x_fract(z, res))
2063:src/display.c **** 		return;
2064:src/display.c **** 	    }
2065:src/display.c **** 	  }
2066:src/display.c **** 	}		
2067:src/display.c **** #else
2068:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
2069:src/display.c **** 	  if (State2.hms) {
2070:src/display.c **** 	    set_x_hms(z, res);
2071:src/display.c **** 	    State2.hms = 0;
2072:src/display.c **** 	    return;
2073:src/display.c **** 	  } else if (UState.fract) {
2074:src/display.c **** 	    if (set_x_fract(z, res))
2075:src/display.c **** 	      return;
2076:src/display.c **** 	  }
2077:src/display.c **** 	}
2078:src/display.c **** #endif
2079:src/display.c **** 
2080:src/display.c **** 	if (check_special_dn(z, res))
2081:src/display.c **** 	  return;
2082:src/display.c **** 
2083:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2084:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2085:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2086:src/display.c **** 	  z->exponent = 0;
2087:src/display.c **** 	}
2088:src/display.c **** 
2089:src/display.c **** 	xset(x, '\0', sizeof(x));
2090:src/display.c **** 
2091:src/display.c **** 	if (dn_eq0(z)) {
2092:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2093:src/display.c **** 	    x[0] = '-';
2094:src/display.c **** 	    x[1] = '0';
2095:src/display.c **** 	  } else
2096:src/display.c **** 	    x[0] = '0';
2097:src/display.c **** 	} else
2098:src/display.c **** 	  decNumberToString(z, x);
2099:src/display.c **** 
ARM GAS  /tmp/ccwSk7O0.s 			page 52


2100:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2101:src/display.c **** 	  show_x(x, exp);
2102:src/display.c **** 	  return;
2103:src/display.c **** 	}
2104:src/display.c **** 
2105:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2106:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2107:src/display.c **** 	  //  ALL mode: fill the display
2108:src/display.c **** 	  dd = *display_digits - 1;
2109:src/display.c **** 	else
2110:src/display.c **** 	  dd = dispdigs;
2111:src/display.c **** 
2112:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2113:src/display.c **** 	  int orig_mode = mode;
2114:src/display.c **** 
2115:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2116:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2117:src/display.c **** 	    // allow zeros to be trimmed
2118:src/display.c **** 	    trimzeros = 1;
2119:src/display.c **** 	  if (orig_mode == MODE_STD)
2120:src/display.c **** 	    dd = *display_digits - 1;
2121:src/display.c ****  	}
2122:src/display.c **** #else
2123:src/display.c **** 	if (mode == MODE_STD) {
2124:src/display.c **** 	  mode = std_round_fix(z);
2125:src/display.c **** 	  trimzeros = 1;
2126:src/display.c **** 	  dd = *display_digits - 1;
2127:src/display.c **** 	} else if (dd >= *display_digits)
2128:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2129:src/display.c **** 	  dd = *display_digits - 1;
2130:src/display.c **** #endif
2131:src/display.c **** 
2132:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2133:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2134:src/display.c **** 
2135:src/display.c **** 	q = find_char(x, 'E');
2136:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2137:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2138:src/display.c **** 	if (q == NULL) exp = 0;
2139:src/display.c **** 	else {
2140:src/display.c **** 	  exp = s_to_i(q+1);
2141:src/display.c **** 	  if (*q == 'D') exp = -exp;
2142:src/display.c **** 	}
2143:src/display.c **** #else
2144:src/display.c **** 	if (q == NULL) exp = 0;
2145:src/display.c **** 	else exp = s_to_i(q+1);
2146:src/display.c **** #endif
2147:src/display.c **** 
2148:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2149:src/display.c **** 	for (q=x; *q == ' '; q++);
2150:src/display.c **** 	if (!res) {
2151:src/display.c **** 	  CLR_EXP_SIGN;
2152:src/display.c **** 	  CLR_MANT_SIGN;
2153:src/display.c **** 	}
2154:src/display.c **** 	if (*q == '-') {
2155:src/display.c **** 	  negative = 1;
2156:src/display.c **** 	  q++;
ARM GAS  /tmp/ccwSk7O0.s 			page 53


2157:src/display.c **** 	} else if (*q == '+')
2158:src/display.c **** 	  q++;
2159:src/display.c **** 	for (; *q == '0'; q++);
2160:src/display.c **** 	if (*q == '.') {
2161:src/display.c **** 	  do
2162:src/display.c **** 	    exp--;
2163:src/display.c **** 	  while (*++q == '0');
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2165:src/display.c **** 	    *p++ = *q++;
2166:src/display.c **** 	} else {
2167:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2168:src/display.c **** 	    *p++ = *q++;
2169:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2170:src/display.c **** 	    *p++ = *q++;
2171:src/display.c **** 	    exp++;
2172:src/display.c **** 	  }
2173:src/display.c **** 	  if (*q == '.') {
2174:src/display.c **** 	    q++;
2175:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2176:src/display.c **** 	      *p++ = *q++;
2177:src/display.c **** 	  }
2178:src/display.c **** 	}
2179:src/display.c **** 
2180:src/display.c **** 	if (mode == MODE_FIX) {
2181:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2182:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2183:src/display.c **** 	  else {
2184:src/display.c **** 	    extra_digits = exp;
2185:src/display.c **** 	    /* We might have push the fixed decimals off the
2186:src/display.c **** 	     * screen so adjust if so.
2187:src/display.c **** 	     */
2188:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2189:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2190:src/display.c **** 	  }
2191:src/display.c **** 	}
2192:src/display.c **** 
2193:src/display.c **** 	// Round the mantissa to the number of digits desired
2194:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2195:src/display.c **** 	if (*p >= '5') {	// Round up
2196:src/display.c **** 	  *p = '0';
2197:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2198:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2199:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2200:src/display.c **** 	    mantissa[0] = '1';
2201:src/display.c **** 	    exp++;
2202:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2203:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2204:src/display.c **** 	      extra_digits = 0;
2205:src/display.c **** 	    }
2206:src/display.c **** 	  } else {
2207:src/display.c **** 	    while (*--p == '9')
2208:src/display.c **** 	      *p = '0';
2209:src/display.c **** 	    (*p)++;
2210:src/display.c **** 	  }
2211:src/display.c **** 	}
2212:src/display.c **** 
2213:src/display.c **** 	// Zap what is left
ARM GAS  /tmp/ccwSk7O0.s 			page 54


2214:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2215:src/display.c **** 
2216:src/display.c **** 	p = mantissa;
2217:src/display.c **** 	switch (mode) {
2218:src/display.c **** 	default:
2219:src/display.c **** 	case MODE_STD:   
2220:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2221:src/display.c **** 	  if (count != *display_digits)
2222:src/display.c **** 	    count++;
2223:src/display.c **** 	  // Too big or too small to fit on display
2224:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2225:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2226:src/display.c **** 	    case -1:
2227:src/display.c **** 	    case 2:
2228:src/display.c **** 	      *obp++ = *p++;
2229:src/display.c **** 	      odig++;
2230:src/display.c **** 	      dd--;
2231:src/display.c **** 	      exp--;
2232:src/display.c **** 	    case -2:
2233:src/display.c **** 	    case 1:
2234:src/display.c **** 	      *obp++ = *p++;
2235:src/display.c **** 	      odig++;
2236:src/display.c **** 	      dd--;
2237:src/display.c **** 	      exp--;
2238:src/display.c **** 	    case 0:
2239:src/display.c **** 	      ;
2240:src/display.c **** 	    };
2241:src/display.c **** 	    *obp++ = *p++;
2242:src/display.c **** 	    odig++;
2243:src/display.c **** 	    *obp++ = '.';
2244:src/display.c **** 	    for (i=1; i<count; i++) {
2245:src/display.c **** 	      *obp++ = *p++;
2246:src/display.c **** 	      odig++;
2247:src/display.c **** 	    }
2248:src/display.c **** 	    show_exp = 1;
2249:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2250:src/display.c **** 	    for(i=0; i<=exp; i++) {
2251:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2252:src/display.c **** 		*obp++ = ',';
2253:src/display.c **** 	      *obp++ = *p++;
2254:src/display.c **** 	      odig++;
2255:src/display.c **** 	    }
2256:src/display.c **** 	    *obp++ = '.';
2257:src/display.c **** 	    if (count > (exp + 1)) {
2258:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2259:src/display.c **** 		*obp++ = *p++;
2260:src/display.c **** 		odig++;
2261:src/display.c **** 	      }
2262:src/display.c **** 	    }
2263:src/display.c **** 	  } else {		// All digits to right of decimal point
2264:src/display.c **** 	    *obp++ = '0';
2265:src/display.c **** 	    odig++;
2266:src/display.c **** 	    *obp++ = '.';
2267:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2268:src/display.c **** 	      *obp++ = '0';
2269:src/display.c **** 	      odig++;
2270:src/display.c **** 	    }
ARM GAS  /tmp/ccwSk7O0.s 			page 55


2271:src/display.c **** 	    for (i=0; i<count; i++) {
2272:src/display.c **** 	      *obp++ = *p++;
2273:src/display.c **** 	      odig++;
2274:src/display.c **** 	    }
2275:src/display.c **** 	  }
2276:src/display.c **** 	  break;
2277:src/display.c **** 
2278:src/display.c **** 	case MODE_FIX:
2279:src/display.c **** 	  j = 0;
2280:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2281:src/display.c **** 	    for (i=0; i<=exp; i++) {
2282:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2283:src/display.c **** 		*obp++ = ',';
2284:src/display.c **** 	      *obp++ = *p++;
2285:src/display.c **** 	      odig++;
2286:src/display.c **** 	    }
2287:src/display.c **** 	    *obp++ = '.';
2288:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2289:src/display.c **** 	      *obp++ = *p++;
2290:src/display.c **** 	      odig++;
2291:src/display.c **** 	    }
2292:src/display.c **** 	  } else {		// All digits to right of decimal point
2293:src/display.c **** 	    *obp++ = '0';
2294:src/display.c **** 	    odig++;
2295:src/display.c **** 	    *obp++ = '.';
2296:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2297:src/display.c **** 	      *obp++ = '0';
2298:src/display.c **** 	      odig++;
2299:src/display.c **** 	      dd--;
2300:src/display.c **** 	    }
2301:src/display.c **** 	    while (dd-- > 0) {
2302:src/display.c **** 	      *obp++ = *p++;
2303:src/display.c **** 	      odig++;
2304:src/display.c **** 	    }
2305:src/display.c **** 	  }
2306:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2307:src/display.c **** 	  if (trimzeros)
2308:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2309:src/display.c **** 	      obp--;
2310:src/display.c **** 	      odig--;
2311:src/display.c **** 	    }
2312:src/display.c **** #endif			
2313:src/display.c **** 	  break;
2314:src/display.c **** 
2315:src/display.c **** 	case MODE_ENG:
2316:src/display.c **** 	  switch (exp % 3) {
2317:src/display.c **** 	  case -1:
2318:src/display.c **** 	  case 2:
2319:src/display.c **** 	    *obp++ = *p++;
2320:src/display.c **** 	    odig++;
2321:src/display.c **** 	    dd--;
2322:src/display.c **** 	    exp--;
2323:src/display.c **** 	  case -2:
2324:src/display.c **** 	  case 1:
2325:src/display.c **** 	    *obp++ = *p++;
2326:src/display.c **** 	    odig++;
2327:src/display.c **** 	    dd--;
ARM GAS  /tmp/ccwSk7O0.s 			page 56


2328:src/display.c **** 	    exp--;
2329:src/display.c **** 	  case 0:
2330:src/display.c **** 	    ;
2331:src/display.c **** 	  };
2332:src/display.c **** 	  // Falling through
2333:src/display.c **** 
2334:src/display.c **** 	case MODE_SCI:
2335:src/display.c **** 	  *obp++ = *p++;
2336:src/display.c **** 	  odig++;
2337:src/display.c **** 	  *obp++ = '.';
2338:src/display.c **** 	  dd--;
2339:src/display.c **** 	  while (dd-- >= 0) {
2340:src/display.c **** 	    *obp++ = *p++;
2341:src/display.c **** 	    odig++;
2342:src/display.c **** 	  }
2343:src/display.c **** 	  show_exp = 1;
2344:src/display.c **** 	}
2345:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2346:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2347:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2348:src/display.c **** 	    obp--;
2349:src/display.c **** 	    odig--;
2350:src/display.c **** 	  }
2351:src/display.c **** #endif	
2352:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2353:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2354:src/display.c **** 	  set_x_dn(z, res, display_digits);
2355:src/display.c **** 	  return;
2356:src/display.c **** 	}
2357:src/display.c **** 	/* Finally, send the output to the display */
2358:src/display.c **** 	*obp = '\0';
2359:src/display.c **** 	if (odig > *display_digits)
2360:src/display.c **** 	  odig = *display_digits;
2361:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2362:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2363:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2364:src/display.c **** 	if (negative) {
2365:src/display.c **** 	  if (res) *res++ = '-';
2366:src/display.c **** 	  else {
2367:src/display.c **** 	    if (j == 0)
2368:src/display.c **** 	      SET_MANT_SIGN;
2369:src/display.c **** 	    else
2370:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2371:src/display.c **** 	  }
2372:src/display.c **** 	}
2373:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2374:src/display.c **** 	  if (c == '.') {
2375:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2376:src/display.c **** 	  } else if (c == ',') {
2377:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2378:src/display.c **** 	  } else {
2379:src/display.c **** 	    res = set_dig_s(j, c, res);
2380:src/display.c **** 	    j += SEGS_PER_DIGIT;
2381:src/display.c **** 	  }
2382:src/display.c **** 	}
2383:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2384:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
ARM GAS  /tmp/ccwSk7O0.s 			page 57


2385:src/display.c **** 	  if ( !res ) {
2386:src/display.c **** 	    set_exp(exp, 4, res);
2387:src/display.c **** 	  }
2388:src/display.c **** 	  else {
2389:src/display.c **** 	    set_exp(exp, 0, res);
2390:src/display.c **** 	  }
2391:src/display.c **** 	}
2392:src/display.c **** #else
2393:src/display.c **** 	if (show_exp)
2394:src/display.c **** 	  set_exp(exp, 0, res);
2395:src/display.c **** #endif
2396:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2397:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2398:src/display.c **** 	*display_digits = odig;
2399:src/display.c ****       }
2400:src/display.c **** 
2401:src/display.c **** #if defined(QTGUI) || defined(IOS)
2402:src/display.c ****       void format_display(char *buf) {
2403:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2404:src/display.c **** 	  {
2405:src/display.c **** 	    const char *p = get_cmdline();
2406:src/display.c **** 	    if (p == NULL) {
2407:src/display.c **** 	      format_reg(regX_idx, buf);
2408:src/display.c **** 	    } else {
2409:src/display.c **** 	      scopy(buf, p);
2410:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2411:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2412:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2413:src/display.c **** 		buf[CmdLineEex] = 'E';
2414:src/display.c **** 		buf[CmdLineEex+1] = '-';
2415:src/display.c **** 	      }
2416:src/display.c **** #  endif
2417:src/display.c **** 	    }
2418:src/display.c **** 	  }
2419:src/display.c **** 	else {
2420:src/display.c **** 	  buf[0]=0;
2421:src/display.c **** 	}
2422:src/display.c ****       }
2423:src/display.c **** #endif
2424:src/display.c **** 
2425:src/display.c ****       void format_reg(int index, char *buf) {
2426:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2427:src/display.c **** 
2428:src/display.c **** 	if (is_intmode())
2429:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2430:src/display.c **** #ifndef HP16C_MODE_CHANGE
2431:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2432:src/display.c **** 	  decNumber x;
2433:src/display.c **** 	  int s;
2434:src/display.c **** 	  unsigned long long int v;
2435:src/display.c **** 
2436:src/display.c **** 	  getRegister(&x, index);
2437:src/display.c **** 	  v = dn_to_ull(&x, &s);
2438:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2439:src/display.c **** 	}
2440:src/display.c **** #endif
2441:src/display.c **** 	else
ARM GAS  /tmp/ccwSk7O0.s 			page 58


2442:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2443:src/display.c ****       }
2444:src/display.c **** 
2445:src/display.c ****       /* Display the status screen */
2446:src/display.c ****       static void show_status(void) {
2447:src/display.c **** 	int i, n;
2448:src/display.c **** 	int j = SEGS_EXP_BASE;
2449:src/display.c **** 	const int status = State2.status - 3;
2450:src/display.c **** 	char buf[16], *p = buf;
2451:src/display.c **** 	unsigned int pc;
2452:src/display.c **** 
2453:src/display.c **** 	if (status == -2) {
2454:src/display.c **** 	  set_status("Free:");
2455:src/display.c **** 	  p = num_arg(buf, free_mem());
2456:src/display.c **** 	  p = scopy(p, " , FL. ");
2457:src/display.c **** 	  p = num_arg(p, free_flash());
2458:src/display.c **** 	  *p = '\0';
2459:src/display.c **** 	  set_digits_string(buf, 0);
2460:src/display.c **** 	}
2461:src/display.c **** 	else if (status == -1) {
2462:src/display.c **** 	  /* Top line */
2463:src/display.c **** 	  p = scopy(buf, "Regs:");
2464:src/display.c **** 	  if (SizeStatRegs)
2465:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2466:src/display.c **** 	  *p = '\0';
2467:src/display.c **** 	  set_status(buf);
2468:src/display.c **** 
2469:src/display.c **** 	  /* Bottom line */
2470:src/display.c **** 	  p = num_arg(buf, global_regs());
2471:src/display.c **** 	  if (LocalRegs < 0) {
2472:src/display.c **** 	    p = scopy(p, " , Loc. ");
2473:src/display.c **** 	    p = num_arg(p, local_regs());
2474:src/display.c **** 	  }
2475:src/display.c **** 	  *p = '\0';
2476:src/display.c **** 	  set_digits_string(buf, 0);
2477:src/display.c **** 	} else {
2478:src/display.c **** 	  int base;
2479:src/display.c **** 	  int end;
2480:src/display.c **** 	  int group = 10;
2481:src/display.c **** 	  int start = 0;
2482:src/display.c **** 		
2483:src/display.c **** 	  if (status <= 9) {
2484:src/display.c **** 	    base = 10 * status;
2485:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2486:src/display.c **** 	    p = scopy(buf, "FL ");
2487:src/display.c **** 	    p = num_arg_0(p, base, 2);
2488:src/display.c **** 	    *p++ = '-';
2489:src/display.c **** 	    p = num_arg_0(p, end, 2);
2490:src/display.c **** 	    *p = '\0';
2491:src/display.c **** 	    set_status(buf);
2492:src/display.c **** 	  }
2493:src/display.c **** 	  else if (status == 10) {
2494:src/display.c **** 	    base = regX_idx;
2495:src/display.c **** 	    end = regK_idx;
2496:src/display.c **** 	    start = 3;
2497:src/display.c **** 	    group = 4;
2498:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
ARM GAS  /tmp/ccwSk7O0.s 			page 59


2499:src/display.c **** 	  }
2500:src/display.c **** 	  else { // status == 11
2501:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2502:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2503:src/display.c **** 	    set_status("FL.00-.15");
2504:src/display.c **** 	  }
2505:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2506:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2507:src/display.c **** 	  j += SEGS_PER_DIGIT;
2508:src/display.c **** 	  for (i = start; i < group + start; i++) {
2509:src/display.c **** 	    int k = i + base - start;
2510:src/display.c **** 	    int l = get_user_flag(k);
2511:src/display.c **** 	    k += group;
2512:src/display.c **** 	    if (end >= k) {
2513:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2514:src/display.c **** 	      k += group;
2515:src/display.c **** 	      if (end >= k)
2516:src/display.c **** 		l |= (get_user_flag(k) << 2);
2517:src/display.c **** 	    }
2518:src/display.c **** 	    set_dig(j, l);
2519:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2520:src/display.c **** 	    j += SEGS_PER_DIGIT;
2521:src/display.c **** 	    if (i == 4) {
2522:src/display.c **** 	      set_dig(j, 8);
2523:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2524:src/display.c **** 	      j += SEGS_PER_DIGIT;
2525:src/display.c **** 	    }
2526:src/display.c **** 	  }
2527:src/display.c **** 	}
2528:src/display.c **** 
2529:src/display.c **** 	j = SEGS_EXP_BASE;
2530:src/display.c **** 	pc = state_pc();
2531:src/display.c **** 	if (isXROM(pc))
2532:src/display.c **** 	  pc = 1;
2533:src/display.c **** 	for (n=i=0; i<4; i++) {
2534:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2535:src/display.c **** 	    if (++n == 4) {
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2538:src/display.c **** 	    } else {
2539:src/display.c **** 	      set_dig(j, 'A'+i);
2540:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2541:src/display.c **** 	    }
2542:src/display.c **** 	  }
2543:src/display.c **** 	}
2544:src/display.c ****       }
2545:src/display.c **** 
2546:src/display.c **** 
2547:src/display.c ****       /* Display the list of alpha labels */
2548:src/display.c ****       static void show_label(void) {
2549:src/display.c **** 	char buf[16];
2550:src/display.c **** 	unsigned short int pc = State2.digval;
2551:src/display.c **** 	unsigned int op = getprog(pc);
2552:src/display.c **** 	int n = nLIB(pc);
2553:src/display.c **** 	unsigned short int lblpc;
2554:src/display.c **** 
2555:src/display.c **** 	set_status(prt((opcode)op, buf));
ARM GAS  /tmp/ccwSk7O0.s 			page 60


2556:src/display.c **** 	set_digits_string(libname[n], 0);
2557:src/display.c **** #ifndef REALBUILD
2558:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2559:src/display.c **** #endif
2560:src/display.c **** 
2561:src/display.c **** 	if (op & OP_DBL) {
2562:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2563:src/display.c **** 	  if (lblpc != pc) {
2564:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2565:src/display.c **** 	    n = nLIB(lblpc);
2566:src/display.c **** 	    if (n == REGION_RAM)
2567:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2568:src/display.c **** 	    else {
2569:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2570:src/display.c **** #ifndef REALBUILD
2571:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2572:src/display.c **** #endif
2573:src/display.c **** 	    }
2574:src/display.c **** 	  }
2575:src/display.c **** 	}
2576:src/display.c ****       }
2577:src/display.c **** 
2578:src/display.c ****       /* Display a list of register contents */
2579:src/display.c ****       static void show_registers(void) {
2580:src/display.c **** 	char buf[16], *bp;
2581:src/display.c **** 	int n = State2.digval;
2582:src/display.c **** 	
2583:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2584:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2585:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2586:src/display.c **** 	  n;
2587:src/display.c **** #else
2588:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2589:src/display.c **** 	  n;
2590:src/display.c **** #endif
2591:src/display.c **** 
2592:src/display.c **** 	if (State2.disp_as_alpha) {
2593:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2594:src/display.c **** 	}
2595:src/display.c **** 	else {
2596:src/display.c **** 	  xset(buf, '\0', 16);
2597:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2598:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2599:src/display.c **** #else
2600:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2601:src/display.c **** #endif
2602:src/display.c **** 	  if (State2.local) {
2603:src/display.c **** 	    *bp++ = '.';
2604:src/display.c **** 	    if (n >= 100) {
2605:src/display.c **** 	      *bp++ = '1';
2606:src/display.c **** 	      n -= 100;
2607:src/display.c **** 	    }
2608:src/display.c **** 	  }
2609:src/display.c **** 	  if (n < 100)
2610:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2611:src/display.c **** 	  else
2612:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
ARM GAS  /tmp/ccwSk7O0.s 			page 61


2613:src/display.c **** 	  set_status(buf);
2614:src/display.c **** 	}
2615:src/display.c **** 	format_reg(reg, CNULL);
2616:src/display.c ****       }
2617:src/display.c **** 
2618:src/display.c **** 
2619:src/display.c ****       static void set_annunciators(void)
2620:src/display.c ****       {
2621:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2622:src/display.c **** 
2623:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2624:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2625:src/display.c **** 	 * browsing constants.
2626:src/display.c **** 	 */
2627:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2628:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2629:src/display.c **** #else
2630:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2631:src/display.c **** #endif
2632:src/display.c **** #ifdef INCLUDE_C_LOCK
2633:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2634:src/display.c **** #endif
2635:src/display.c **** 
2636:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2637:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2638:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2639:src/display.c **** 	set_IO_annunciator();
2640:src/display.c **** 
2641:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2642:src/display.c **** 	 */
2643:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2644:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2645:src/display.c ****       }
2646:src/display.c **** 
2647:src/display.c **** 
2648:src/display.c ****       /*
2649:src/display.c ****        *  Toggle the little "=" sign
2650:src/display.c ****        */
2651:src/display.c ****       void set_IO_annunciator(void) {
2652:src/display.c **** #ifndef DM42
2653:src/display.c **** 	int on = SerialOn
2654:src/display.c **** #endif
2655:src/display.c **** #ifdef DM42
2656:src/display.c **** 	  int on = 0
2657:src/display.c **** #endif
2658:src/display.c **** #ifdef REALBUILD
2659:src/display.c **** 	  || DebugFlag
2660:src/display.c **** #endif
2661:src/display.c **** #ifdef INFRARED
2662:src/display.c **** 	  || PrinterColumn != 0
2663:src/display.c **** #endif
2664:src/display.c **** 	  ;
2665:src/display.c **** 
2666:src/display.c **** 	if (on != IoAnnunciator) {
2667:src/display.c **** 	  dot(LIT_EQ, on);
2668:src/display.c **** 	  IoAnnunciator = on;
2669:src/display.c **** 	  finish_display(); //LIT_EQ
ARM GAS  /tmp/ccwSk7O0.s 			page 62


2670:src/display.c **** 	}
2671:src/display.c ****       }
2672:src/display.c **** 
2673:src/display.c **** #ifdef TOP_ROW
2674:src/display.c ****       /*
2675:src/display.c ****        *  Update the display
2676:src/display.c ****        */
2677:src/display.c ****       void display(void) {
2678:src/display.c **** 	int i, j;
2679:src/display.c **** 	char buf[40], *bp = buf;
2680:src/display.c **** 	const char *p;
2681:src/display.c **** 	int annuc = 0;
2682:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2683:src/display.c **** 	int skip = 0;
2684:src/display.c **** 	int x_disp = 0;
2685:src/display.c **** 	const int shift = cur_shift();
2686:src/display.c **** 
2687:src/display.c **** 	no_status_top = 0;
2688:src/display.c **** 	if (State2.disp_freeze) {
2689:src/display.c **** 	  State2.disp_freeze = 0;
2690:src/display.c **** 	  State2.disp_temp = 1;
2691:src/display.c **** #ifdef CONSOLE
2692:src/display.c **** 	  JustDisplayed = 1;
2693:src/display.c **** #endif
2694:src/display.c **** 	  ShowRPN = 0;
2695:src/display.c **** 	  return;
2696:src/display.c **** 	}
2697:src/display.c **** 
2698:src/display.c **** 	if (WasDataEntry) {
2699:src/display.c **** #if defined(QTGUI) || defined(IOS)
2700:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2701:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2702:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2703:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2704:src/display.c **** #endif
2705:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2706:src/display.c **** 
2707:src/display.c **** 	  // Erase 7-segment display
2708:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2709:src/display.c **** 	    clr_dot(i);
2710:src/display.c **** 	  }
2711:src/display.c **** 	  goto only_update_x;
2712:src/display.c **** 	}
2713:src/display.c **** #ifdef INCLUDE_YREG_CODE
2714:src/display.c **** #  ifdef YREG_ALWAYS_ON
2715:src/display.c **** 	const int yreg_enabled = 1;
2716:src/display.c **** #  else
2717:src/display.c **** 	const int yreg_enabled = UState.show_y;
2718:src/display.c **** #  endif
2719:src/display.c **** #else
2720:src/display.c **** 	const int yreg_enabled = 0;
2721:src/display.c **** #endif
2722:src/display.c **** 	// Clear display
2723:src/display.c **** 	reset_disp();
2724:src/display.c **** 
2725:src/display.c **** 	
2726:src/display.c **** 	xset(buf, '\0', sizeof(buf));
ARM GAS  /tmp/ccwSk7O0.s 			page 63


2727:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2728:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2729:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2730:src/display.c **** 	/*   set_status(buf); */
2731:src/display.c **** 	/* } */
2732:src/display.c **** 	if (State2.version) {
2733:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2734:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2735:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2736:src/display.c **** #ifndef REALBUILD
2737:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2738:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2739:src/display.c **** #endif
2740:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2741:src/display.c **** 	  set_status(vers);
2742:src/display.c **** 	  skip = 1;
2743:src/display.c **** 	  goto nostk;
2744:src/display.c **** 	} else if (State2.confirm) {
2745:src/display.c **** 	  if (yreg_enabled) {
2746:src/display.c **** 	    set_status_top(S_SURE);
2747:src/display.c **** 	    no_status_top = 1;
2748:src/display.c **** 	    annuc = 1;
2749:src/display.c **** 	  }
2750:src/display.c **** 	  else {
2751:src/display.c **** 	    set_status(S_SURE);
2752:src/display.c **** 	  }
2753:src/display.c **** 	} else if (State2.hyp) {
2754:src/display.c **** 	  bp = scopy(bp, "HYP");
2755:src/display.c **** 	  if (! State2.dot)
2756:src/display.c **** 	    *bp++ = '\235';
2757:src/display.c **** 	  if (yreg_enabled) {
2758:src/display.c **** 	    set_status_top(buf);
2759:src/display.c **** 	    no_status_top = 1;
2760:src/display.c **** 	    annuc = 1;
2761:src/display.c **** 	  }
2762:src/display.c **** 	  else {
2763:src/display.c **** 	    set_status(buf);
2764:src/display.c **** 	  }
2765:src/display.c **** 	} else if (State2.gtodot) {
2766:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2767:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2768:src/display.c **** 	  if (State2.numdigit > 0)
2769:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2770:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2771:src/display.c **** 	  *bp++ = '_';
2772:src/display.c **** 	  if (yreg_enabled) {
2773:src/display.c **** 	    set_status_top(buf);
2774:src/display.c **** 	    no_status_top = 1;
2775:src/display.c **** 	    annuc = 1;
2776:src/display.c **** 	  }
2777:src/display.c **** 	  else {
2778:src/display.c **** 	    set_status(buf);
2779:src/display.c **** 	  }
2780:src/display.c **** 	} else if (State2.rarg) {
2781:src/display.c **** 	  /* Commands with arguments */
2782:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2783:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
ARM GAS  /tmp/ccwSk7O0.s 			page 64


2784:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2785:src/display.c **** #endif
2786:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2787:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2788:src/display.c **** 	  if (State2.dot) {
2789:src/display.c **** 	    *bp++ = 's';
2790:src/display.c **** 	    *bp++ = '_';
2791:src/display.c **** 	  } else if (shift == SHIFT_F) {
2792:src/display.c **** 	    *bp++ = '\021';
2793:src/display.c **** 	    *bp++ = '_';
2794:src/display.c **** 	  } else {
2795:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2796:src/display.c **** 	       : State2.ind ? 2 
2797:src/display.c **** 	       : num_arg_digits(CmdBase); */
2798:src/display.c **** 	    if (State2.local)
2799:src/display.c **** 	      *bp++ = '.';
2800:src/display.c **** 	    if (State2.numdigit > 0) {
2801:src/display.c **** 	      if (State2.shuffle)
2802:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2803:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2804:src/display.c **** 	      else
2805:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2806:src/display.c **** 	    }
2807:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2808:src/display.c **** 	    *bp++ = '_';
2809:src/display.c **** 	  }
2810:src/display.c **** 	  if (yreg_enabled) {
2811:src/display.c **** 	    set_status_top(buf);
2812:src/display.c **** 	    no_status_top = 1;
2813:src/display.c **** 	    annuc = 1;
2814:src/display.c **** 	  }
2815:src/display.c **** 	  else {
2816:src/display.c **** 	    set_status(buf);
2817:src/display.c **** 	  }
2818:src/display.c **** 	} else if (State2.test != TST_NONE) {
2819:src/display.c **** 	  *bp++ = 'x';
2820:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2821:src/display.c **** 	  *bp++ = '_';
2822:src/display.c **** 	  *bp++ = '?';
2823:src/display.c **** 	  if (yreg_enabled) {
2824:src/display.c **** 	    set_status_top(buf);
2825:src/display.c **** 	    no_status_top = 1;
2826:src/display.c **** 	    annuc = 1;
2827:src/display.c **** 	  }
2828:src/display.c **** 	  else {
2829:src/display.c **** 	    set_status(buf);
2830:src/display.c **** 	  }
2831:src/display.c **** 	} else if (cata) {
2832:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2833:src/display.c **** 	  char b2[16];
2834:src/display.c **** 	  const char *p;
2835:src/display.c **** 
2836:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2837:src/display.c **** 	  p = catcmd(op, b2);
2838:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2839:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2840:src/display.c **** 	  bp = scopy(bp, p);
ARM GAS  /tmp/ccwSk7O0.s 			page 65


2841:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2842:src/display.c **** 	    // State2.disp_small = 1;
2843:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2844:src/display.c **** 	      set_digits_string("0 to 255", 0);
2845:src/display.c **** 	    else
2846:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2847:src/display.c **** 	    skip = 1;
2848:src/display.c **** 	  } else if (State2.runmode) {
2849:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2850:src/display.c **** 	      decNumber x, r;
2851:src/display.c **** 	      decimal64 z;
2852:src/display.c **** 
2853:src/display.c **** 	      getX(&x);
2854:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2855:src/display.c **** 		const unsigned int f = argKIND(op);
2856:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2857:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2858:src/display.c **** 		  update_speed(0);
2859:src/display.c **** 		  fp(&r, &x);
2860:src/display.c **** 		}
2861:src/display.c **** 		else
2862:src/display.c **** 		  set_NaN(&r);
2863:src/display.c **** 	      } else
2864:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2865:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2866:src/display.c **** 	      packed_from_number(&z, &r);
2867:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2868:src/display.c **** 	      skip = 1;
2869:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2870:src/display.c **** 	      REGISTER z, *const x = StackBase;
2871:src/display.c **** 	      copyreg(&z, x);
2872:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2873:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2874:src/display.c **** 	      copyreg(x, &z);
2875:src/display.c **** 	      skip = 1;
2876:src/display.c **** 	    }
2877:src/display.c **** 	  }
2878:src/display.c **** 	  if (yreg_enabled) {
2879:src/display.c **** 	    set_status_top(buf);
2880:src/display.c **** 	    no_status_top = 1;
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  }
2883:src/display.c **** 	  else {
2884:src/display.c **** 	    set_status(buf);
2885:src/display.c **** 	  }
2886:src/display.c **** 	} else if (State2.multi) {
2887:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2888:src/display.c **** 	  if (State2.numdigit > 0) {
2889:src/display.c **** 	    *bp++ = (char) State2.digval;
2890:src/display.c **** 	    if (State2.numdigit > 1)
2891:src/display.c **** 	      *bp++ = State2.digval2;
2892:src/display.c **** 	  }
2893:src/display.c **** 	  if (yreg_enabled) {
2894:src/display.c **** 	    set_status_top(buf);
2895:src/display.c **** 	    no_status_top = 1;
2896:src/display.c **** 	    annuc = 1;
2897:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 66


2898:src/display.c **** 	  else {
2899:src/display.c **** 	    set_status(buf);
2900:src/display.c **** 	  }
2901:src/display.c **** 	} else if (State2.status) {
2902:src/display.c **** 	  show_status();
2903:src/display.c **** 	  skip = 1;
2904:src/display.c **** 	} else if (State2.labellist) {
2905:src/display.c **** 	  show_label();
2906:src/display.c **** 	  skip = 1;
2907:src/display.c **** 	} else if (State2.registerlist) {
2908:src/display.c **** 	  show_registers();
2909:src/display.c **** 	  skip = 1;
2910:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2911:src/display.c **** 	    annunciators();
2912:src/display.c **** 	  }
2913:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2914:src/display.c **** 	} else if (State2.disp_as_alpha) {
2915:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2916:src/display.c **** #endif
2917:src/display.c **** 	} else if (State2.runmode) {
2918:src/display.c **** 	  if (DispMsg) { 
2919:src/display.c **** 	    set_status(DispMsg);
2920:src/display.c **** 	  } else if (DispPlot) {
2921:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2922:src/display.c **** 	  } else if (State2.alphas) {
2923:src/display.c **** 	    bp = scopy(buf, Alpha);
2924:src/display.c **** 	    j = State2.alpha_pos;
2925:src/display.c **** 	    if (j != 0) {
2926:src/display.c **** 	      i = slen(buf);
2927:src/display.c **** 	      j *= 6;
2928:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2929:src/display.c **** 		{
2930:src/display.c **** 		  buf[ (i - j) ] = '\0';
2931:src/display.c **** 		  set_status_right(buf);
2932:src/display.c **** 		}
2933:src/display.c **** 	      else {
2934:src/display.c **** 		set_status(buf);
2935:src/display.c **** 	      }
2936:src/display.c **** 	    }
2937:src/display.c **** 	    else {
2938:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2939:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2940:src/display.c **** 		*bp++ = '\0';
2941:src/display.c **** 	      }
2942:src/display.c **** 	      set_status_right(buf);
2943:src/display.c **** 	    }
2944:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2945:src/display.c **** 	      bp = buf;
2946:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2947:src/display.c **** 	      *bp++ = '\0';
2948:src/display.c **** 	      set_status_top(buf);
2949:src/display.c **** 	      no_status_top = 1;
2950:src/display.c **** 	      //annuc = 1;
2951:src/display.c **** 	    }
2952:src/display.c **** 	  }
2953:src/display.c **** 	  else {
2954:src/display.c **** 	    annuc = 1;
ARM GAS  /tmp/ccwSk7O0.s 			page 67


2955:src/display.c **** 	  }
2956:src/display.c **** 	}
2957:src/display.c **** 	else {
2958:src/display.c **** #ifndef DM42
2959:src/display.c **** 	  show_progtrace(buf);
2960:src/display.c **** #endif
2961:src/display.c **** 	  i = state_pc();
2962:src/display.c **** 	  if (i > 0)
2963:src/display.c **** 	    set_status(prt(getprog(i), buf));
2964:src/display.c **** 	  else
2965:src/display.c **** 	    set_status("");
2966:src/display.c **** 	  set_dot(STO_annun);
2967:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2968:src/display.c **** 	    annuc = 1;
2969:src/display.c **** 	  goto nostk;
2970:src/display.c **** 	}
2971:src/display.c **** 	show_stack();
2972:src/display.c ****       nostk:
2973:src/display.c **** 	show_flags();
2974:src/display.c **** 	if (!skip) {
2975:src/display.c **** 	  if (State2.runmode) {
2976:src/display.c **** 	  only_update_x:
2977:src/display.c **** 	    p = get_cmdline();
2978:src/display.c **** 	    if (p == NULL || cata) {
2979:src/display.c **** 	      if (ShowRegister != -1) {
2980:src/display.c **** #ifdef INCLUDE_C_LOCK
2981:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2982:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2983:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2984:src/display.c **** 		    SET_POLAR_READY;
2985:src/display.c **** 		  }
2986:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2987:src/display.c **** 		    State2.hms = 0;
2988:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2989:src/display.c **** 		    State2.hms = 1;
2990:src/display.c **** 		  }
2991:src/display.c **** 		  else {
2992:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2993:src/display.c **** 		  }
2994:src/display.c **** 		  x_disp = 1;
2995:src/display.c **** 		}
2996:src/display.c **** 		else {
2997:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2998:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2999:src/display.c **** 		}
3000:src/display.c **** #else		
3001:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3002:src/display.c **** 		format_reg(ShowRegister, CNULL);
3003:src/display.c **** #endif
3004:src/display.c **** 	      }
3005:src/display.c **** 	      else
3006:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3007:src/display.c **** 	    } else {
3008:src/display.c **** 	      disp_x(p);
3009:src/display.c **** 	      x_disp = 1;
3010:src/display.c **** 	    }
3011:src/display.c **** 	    if (WasDataEntry) {
ARM GAS  /tmp/ccwSk7O0.s 			page 68


3012:src/display.c **** 	      goto finish;
3013:src/display.c **** 	    }
3014:src/display.c **** 	  } else {
3015:src/display.c **** 	    unsigned int pc = state_pc();
3016:src/display.c **** 	    unsigned int upc = user_pc(pc);
3017:src/display.c **** 	    const int n = nLIB(pc);
3018:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3019:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3020:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3021:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3022:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3023:src/display.c **** #ifndef REALBUILD
3024:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3025:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3026:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3027:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3028:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3029:src/display.c **** 	      char *b=buf;
3030:src/display.c **** 	      char *l=LastDisplayedNumber;
3031:src/display.c **** 	      *l++=' ';
3032:src/display.c **** 	      while(*b) {
3033:src/display.c **** 		*l++=*b++;
3034:src/display.c **** 		*l++=' ';
3035:src/display.c **** 	      }
3036:src/display.c **** 	      *l=0;
3037:src/display.c **** 	    }
3038:src/display.c **** #endif
3039:src/display.c **** 	  }
3040:src/display.c **** 	}
3041:src/display.c **** 	set_annunciators();
3042:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3043:src/display.c **** 	  ShowRPN = 0;
3044:src/display.c **** 	  dot(RPN, 0);
3045:src/display.c **** 	}
3046:src/display.c **** 	// disp_temp disables the <- key
3047:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3048:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3049:src/display.c **** 
3050:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3051:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3052:src/display.c **** 	  annunciators();
3053:src/display.c ****  	State2.hms = 0;
3054:src/display.c **** #else
3055:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3056:src/display.c **** 	  annunciators();
3057:src/display.c **** #endif
3058:src/display.c **** 
3059:src/display.c ****       finish:
3060:src/display.c **** 	State2.version = 0;
3061:src/display.c **** 	State2.disp_as_alpha = 0;
3062:src/display.c **** 	State2.smode = SDISP_NORMAL;
3063:src/display.c **** 	State2.invalid_disp = 0;
3064:src/display.c **** 	ShowRegister = regX_idx;
3065:src/display.c **** 	DispMsg = CNULL;
3066:src/display.c **** 	DispPlot = 0;
3067:src/display.c **** 	State2.disp_small = 0;
3068:src/display.c **** 	finish_display();
ARM GAS  /tmp/ccwSk7O0.s 			page 69


3069:src/display.c **** 	no_status_top = 0;
3070:src/display.c **** #ifdef CONSOLE
3071:src/display.c **** 	JustDisplayed = 1;
3072:src/display.c **** #endif
3073:src/display.c ****       }
3074:src/display.c **** #else
3075:src/display.c ****       /*
3076:src/display.c ****        *  Update the display
3077:src/display.c ****        */
3078:src/display.c ****       void display(void) {
3079:src/display.c **** 	int i, j;
3080:src/display.c **** 	char buf[40], *bp = buf;
3081:src/display.c **** 	const char *p;
3082:src/display.c **** 	int annuc = 0;
3083:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
3084:src/display.c **** 	int skip = 0;
3085:src/display.c **** 	int x_disp = 0;
3086:src/display.c **** 	const int shift = cur_shift();
3087:src/display.c **** 
3088:src/display.c **** 
3089:src/display.c **** 
3090:src/display.c **** 	if (State2.disp_freeze) {
3091:src/display.c **** 	  State2.disp_freeze = 0;
3092:src/display.c **** 	  State2.disp_temp = 1;
3093:src/display.c **** #ifdef CONSOLE
3094:src/display.c **** 	  JustDisplayed = 1;
3095:src/display.c **** #endif
3096:src/display.c **** 	  ShowRPN = 0;
3097:src/display.c **** 	  return;
3098:src/display.c **** 	}
3099:src/display.c **** 
3100:src/display.c **** 	if (WasDataEntry) {
3101:src/display.c **** #if defined(QTGUI) || defined(IOS)
3102:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3103:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
3104:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
3105:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
3106:src/display.c **** #endif
3107:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3108:src/display.c **** 
3109:src/display.c **** 	  // Erase 7-segment display
3110:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3111:src/display.c **** 	    clr_dot(i);
3112:src/display.c **** 	  }
3113:src/display.c **** 	  goto only_update_x;
3114:src/display.c **** 	}
3115:src/display.c **** 
3116:src/display.c **** 	// Clear display
3117:src/display.c **** 	reset_disp();
3118:src/display.c **** 
3119:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3120:src/display.c **** 	if (State2.cmplx  && !cata) {
3121:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3122:src/display.c **** 	  set_status(buf);
3123:src/display.c **** 	}
3124:src/display.c **** 	if (State2.version) {
3125:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
ARM GAS  /tmp/ccwSk7O0.s 			page 70


3126:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3127:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3128:src/display.c **** #ifndef REALBUILD
3129:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3130:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3131:src/display.c **** #endif
3132:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3133:src/display.c **** 	  set_status(vers);
3134:src/display.c **** 	  skip = 1;
3135:src/display.c **** 	  goto nostk;
3136:src/display.c **** 	} else if (State2.confirm) {
3137:src/display.c **** 	  set_status(S_SURE);
3138:src/display.c **** 	} else if (State2.hyp) {
3139:src/display.c **** 	  bp = scopy(bp, "HYP");
3140:src/display.c **** 	  if (! State2.dot)
3141:src/display.c **** 	    *bp++ = '\235';
3142:src/display.c **** 	  set_status(buf);
3143:src/display.c **** 	} else if (State2.gtodot) {
3144:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3145:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3146:src/display.c **** 	  if (State2.numdigit > 0)
3147:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3148:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3149:src/display.c **** 	  *bp++ = '_';
3150:src/display.c **** 	  set_status(buf);
3151:src/display.c **** 	} else if (State2.rarg) {
3152:src/display.c **** 	  /* Commands with arguments */
3153:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3154:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3155:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3156:src/display.c **** #endif
3157:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3158:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3159:src/display.c **** 	  if (State2.dot) {
3160:src/display.c **** 	    *bp++ = 's';
3161:src/display.c **** 	    *bp++ = '_';
3162:src/display.c **** 	  } else if (shift == SHIFT_F) {
3163:src/display.c **** 	    *bp++ = '\021';
3164:src/display.c **** 	    *bp++ = '_';
3165:src/display.c **** 	  } else {
3166:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3167:src/display.c **** 	       : State2.ind ? 2 
3168:src/display.c **** 	       : num_arg_digits(CmdBase); */
3169:src/display.c **** 	    if (State2.local)
3170:src/display.c **** 	      *bp++ = '.';
3171:src/display.c **** 	    if (State2.numdigit > 0) {
3172:src/display.c **** 	      if (State2.shuffle)
3173:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3174:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3175:src/display.c **** 	      else
3176:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3177:src/display.c **** 	    }
3178:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3179:src/display.c **** 	    *bp++ = '_';
3180:src/display.c **** 	  }
3181:src/display.c **** 	  set_status(buf);
3182:src/display.c **** 	} else if (State2.test != TST_NONE) {
ARM GAS  /tmp/ccwSk7O0.s 			page 71


3183:src/display.c **** 	  *bp++ = 'x';
3184:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3185:src/display.c **** 	  *bp++ = '_';
3186:src/display.c **** 	  *bp++ = '?';
3187:src/display.c **** 	  set_status(buf);
3188:src/display.c **** 	} else if (cata) {
3189:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3190:src/display.c **** 	  char b2[16];
3191:src/display.c **** 	  const char *p;
3192:src/display.c **** 
3193:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3194:src/display.c **** 	  p = catcmd(op, b2);
3195:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3196:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3197:src/display.c **** 	  bp = scopy(bp, p);
3198:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3199:src/display.c **** 	    // State2.disp_small = 1;
3200:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3201:src/display.c **** 	      set_digits_string("0 to 255", 0);
3202:src/display.c **** 	    else
3203:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3204:src/display.c **** 	    skip = 1;
3205:src/display.c **** 	  } else if (State2.runmode) {
3206:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3207:src/display.c **** 	      decNumber x, r;
3208:src/display.c **** 	      decimal64 z;
3209:src/display.c **** 
3210:src/display.c **** 	      getX(&x);
3211:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3212:src/display.c **** 		const unsigned int f = argKIND(op);
3213:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3214:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3215:src/display.c **** 		  update_speed(0);
3216:src/display.c **** 		  fp(&r, &x);
3217:src/display.c **** 		}
3218:src/display.c **** 		else
3219:src/display.c **** 		  set_NaN(&r);
3220:src/display.c **** 	      } else
3221:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3222:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3223:src/display.c **** 	      packed_from_number(&z, &r);
3224:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3225:src/display.c **** 	      skip = 1;
3226:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3227:src/display.c **** 	      REGISTER z, *const x = StackBase;
3228:src/display.c **** 	      copyreg(&z, x);
3229:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3230:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3231:src/display.c **** 	      copyreg(x, &z);
3232:src/display.c **** 	      skip = 1;
3233:src/display.c **** 	    }
3234:src/display.c **** 	  }
3235:src/display.c **** 	  set_status(buf);
3236:src/display.c **** 	} else if (State2.multi) {
3237:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3238:src/display.c **** 	  if (State2.numdigit > 0) {
3239:src/display.c **** 	    *bp++ = (char) State2.digval;
ARM GAS  /tmp/ccwSk7O0.s 			page 72


3240:src/display.c **** 	    if (State2.numdigit > 1)
3241:src/display.c **** 	      *bp++ = State2.digval2;
3242:src/display.c **** 	  }
3243:src/display.c **** 	  set_status(buf);
3244:src/display.c **** 	} else if (State2.status) {
3245:src/display.c **** 	  show_status();
3246:src/display.c **** 	  skip = 1;
3247:src/display.c **** 	} else if (State2.labellist) {
3248:src/display.c **** 	  show_label();
3249:src/display.c **** 	  skip = 1;
3250:src/display.c **** 	} else if (State2.registerlist) {
3251:src/display.c **** 	  show_registers();
3252:src/display.c **** 	  skip = 1;
3253:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3254:src/display.c **** 	    annunciators();
3255:src/display.c **** 	  }
3256:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3257:src/display.c **** 	} else if (State2.disp_as_alpha) {
3258:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3259:src/display.c **** #endif
3260:src/display.c **** 	} else if (State2.runmode) {
3261:src/display.c **** 	  if (DispMsg) { 
3262:src/display.c **** 	    set_status(DispMsg);
3263:src/display.c **** 	  } else if (DispPlot) {
3264:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3265:src/display.c **** 	  } else if (State2.alphas) {
3266:src/display.c **** #if 0
3267:src/display.c **** 	    set_digits_string("AlpHA", 0);
3268:src/display.c **** #endif
3269:src/display.c **** 	    bp = scopy(buf, Alpha);
3270:src/display.c **** 	    j = State2.alpha_pos;
3271:src/display.c **** 	    if (j != 0) {
3272:src/display.c **** 	      i = slen(buf);
3273:src/display.c **** 	      //				
3274:src/display.c **** 	      j *= 6;
3275:src/display.c **** #ifdef BIGGER_DISPLAY
3276:src/display.c **** 	      if ( i - j >= 20 )
3277:src/display.c **** #else
3278:src/display.c **** 	      if ( i - j >= 12 )
3279:src/display.c **** #endif
3280:src/display.c **** 		{
3281:src/display.c **** 		buf[ (i - j) ] = '\0';
3282:src/display.c **** 		set_status_right(buf);
3283:src/display.c **** 		}
3284:src/display.c **** 	      else {
3285:src/display.c **** 		set_status(buf);
3286:src/display.c **** 	      }
3287:src/display.c **** 	    } else {
3288:src/display.c **** 	      if (shift != SHIFT_N) {
3289:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3290:src/display.c **** 		*bp++ = '\0';
3291:src/display.c **** 	      }
3292:src/display.c **** 	      set_status_right(buf);
3293:src/display.c **** 	    }
3294:src/display.c **** 	  } else {
3295:src/display.c **** 	    annuc = 1;
3296:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 73


3297:src/display.c **** 	} else {
3298:src/display.c **** #ifndef DM42
3299:src/display.c **** 	  show_progtrace(buf);
3300:src/display.c **** #endif
3301:src/display.c **** 	  i = state_pc();
3302:src/display.c **** 	  if (i > 0)
3303:src/display.c **** 	    set_status(prt(getprog(i), buf));
3304:src/display.c **** 	  else
3305:src/display.c **** 	    set_status("");
3306:src/display.c **** 	  set_dot(STO_annun);
3307:src/display.c **** #if 0
3308:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3309:src/display.c **** 	    unsigned short int crc;
3310:src/display.c **** 	    crc = checksum_program();
3311:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3312:src/display.c **** 	    for (i=0; i<4; i++) {
3313:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3314:src/display.c **** 	      crc >>= 4;
3315:src/display.c **** 	      j += SEGS_PER_DIGIT;
3316:src/display.c **** 	    }
3317:src/display.c **** 	    skip = 1;
3318:src/display.c **** 	  }
3319:src/display.c **** 	  else
3320:src/display.c **** #endif
3321:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3322:src/display.c **** 	      annuc = 1;
3323:src/display.c **** 	  goto nostk;
3324:src/display.c **** 	}
3325:src/display.c **** 	show_stack();
3326:src/display.c ****       nostk:	show_flags();
3327:src/display.c **** 	if (!skip) {
3328:src/display.c **** 	  if (State2.runmode) {
3329:src/display.c **** 	  only_update_x:
3330:src/display.c **** 	    p = get_cmdline();
3331:src/display.c **** 	    if (p == NULL || cata) {
3332:src/display.c **** 	      if (ShowRegister != -1) {
3333:src/display.c **** #ifdef INCLUDE_C_LOCK
3334:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3335:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3336:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3337:src/display.c **** 		    SET_POLAR_READY;
3338:src/display.c **** 		  }
3339:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3340:src/display.c **** 		    State2.hms = 0;
3341:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3342:src/display.c **** 		    State2.hms = 1;
3343:src/display.c **** 		  }
3344:src/display.c **** 		  else {
3345:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3346:src/display.c **** 		  }
3347:src/display.c **** 		  x_disp = 1;
3348:src/display.c **** 		}
3349:src/display.c **** 		else {
3350:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3351:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3352:src/display.c **** 		}
3353:src/display.c **** #else
ARM GAS  /tmp/ccwSk7O0.s 			page 74


3354:src/display.c **** 
3355:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3356:src/display.c **** 		format_reg(ShowRegister, CNULL);
3357:src/display.c **** #endif
3358:src/display.c **** 	      }
3359:src/display.c **** 	      else
3360:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3361:src/display.c **** 	    } else {
3362:src/display.c **** 	      disp_x(p);
3363:src/display.c **** 	      x_disp = 1;
3364:src/display.c **** 	    }
3365:src/display.c **** 	    if (WasDataEntry) {
3366:src/display.c **** 	      goto finish;
3367:src/display.c **** 	    }
3368:src/display.c **** 	  } else {
3369:src/display.c **** 	    unsigned int pc = state_pc();
3370:src/display.c **** 	    unsigned int upc = user_pc(pc);
3371:src/display.c **** 	    const int n = nLIB(pc);
3372:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3373:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3374:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3375:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3376:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3377:src/display.c **** #ifndef REALBUILD
3378:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3379:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3380:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3381:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3382:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3383:src/display.c **** 	      char *b=buf;
3384:src/display.c **** 	      char *l=LastDisplayedNumber;
3385:src/display.c **** 	      *l++=' ';
3386:src/display.c **** 	      while(*b) {
3387:src/display.c **** 		*l++=*b++;
3388:src/display.c **** 		*l++=' ';
3389:src/display.c **** 	      }
3390:src/display.c **** 	      *l=0;
3391:src/display.c **** 	    }
3392:src/display.c **** #endif
3393:src/display.c **** 	  }
3394:src/display.c **** 	}
3395:src/display.c **** 	set_annunciators();
3396:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3397:src/display.c **** 	  ShowRPN = 0;
3398:src/display.c **** 	  dot(RPN, 0);
3399:src/display.c **** 	}
3400:src/display.c **** 	// disp_temp disables the <- key
3401:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3402:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3403:src/display.c **** 
3404:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3405:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3406:src/display.c **** 	  annunciators();
3407:src/display.c ****  	State2.hms = 0;
3408:src/display.c **** #else
3409:src/display.c **** 
3410:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
ARM GAS  /tmp/ccwSk7O0.s 			page 75


3411:src/display.c **** 	  annunciators();
3412:src/display.c **** 	
3413:src/display.c **** 
3414:src/display.c **** 
3415:src/display.c **** #endif
3416:src/display.c **** 
3417:src/display.c ****       finish:
3418:src/display.c **** 	State2.version = 0;
3419:src/display.c **** 	State2.disp_as_alpha = 0;
3420:src/display.c **** 	State2.smode = SDISP_NORMAL;
3421:src/display.c **** 	State2.invalid_disp = 0;
3422:src/display.c **** 	ShowRegister = regX_idx;
3423:src/display.c **** 	DispMsg = CNULL;
3424:src/display.c **** 	DispPlot = 0;
3425:src/display.c **** 	State2.disp_small = 0;
3426:src/display.c **** 	finish_display();
3427:src/display.c **** #ifdef CONSOLE
3428:src/display.c **** 	JustDisplayed = 1;
3429:src/display.c **** #endif
3430:src/display.c ****       }
3431:src/display.c **** #endif
3432:src/display.c ****       /*
3433:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3434:src/display.c ****        */
3435:src/display.c ****       void frozen_display()
3436:src/display.c ****       {
3437:src/display.c **** 	State2.disp_freeze = 0;
3438:src/display.c **** 	display();
3439:src/display.c **** 	State2.disp_freeze = 1;
3440:src/display.c ****       }
3441:src/display.c **** 
3442:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3443:src/display.c **** 	int glen = *graphic++;
3444:src/display.c **** 	int i, j;
3445:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3446:src/display.c **** 	unsigned long long int mat[6];
3447:src/display.c **** 
3448:src/display.c **** 	xset(mat, 0, sizeof(mat));
3449:src/display.c **** #endif
3450:src/display.c **** #ifndef REALBUILD
3451:src/display.c **** 	forceDispPlot=1;
3452:src/display.c **** #endif
3453:src/display.c **** 	if (glen <= 0)			return;
3454:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3455:src/display.c **** 
3456:src/display.c **** 	for (i=0; i<6; i++)
3457:src/display.c **** 	  for (j=1; j<=glen; j++) {
3458:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3459:src/display.c **** 	    if (graphic[j] & (1 << i))
3460:src/display.c **** 	      mat[i] |= 1LL << j;
3461:src/display.c **** #else
3462:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3463:src/display.c **** #endif
3464:src/display.c **** 	  }
3465:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3466:src/display.c **** 	set_status_grob(mat);
3467:src/display.c **** #endif
ARM GAS  /tmp/ccwSk7O0.s 			page 76


3468:src/display.c ****       }
3469:src/display.c **** 
3470:src/display.c **** 
3471:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3472:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3473:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3474:src/display.c ****        * column is almost always blank.
3475:src/display.c ****        */
3476:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3477:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3478:src/display.c ****       }
3479:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3480:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3481:src/display.c ****       }
3482:src/display.c **** 
3483:src/display.c ****       
3484:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3484 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3485:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3485 2 view .LVU201
3486:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3487:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3488:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3488 2 view .LVU202
3489:src/display.c **** #endif
3490:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3490 2 view .LVU203
3491:src/display.c **** 	int i, j;
 686              		.loc 1 3491 2 view .LVU204
3492:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3492 2 view .LVU205
3484:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3484 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3493:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3494:src/display.c **** 	unsigned long long int mat[6];
3495:src/display.c **** 
3496:src/display.c **** 	xset(mat, 0, sizeof(mat));
3497:src/display.c **** #endif
3498:src/display.c **** #ifndef REALBUILD
3499:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3499 2 view .LVU207
 701 0004 6B4C     		ldr	r4, .L119
3484:src/display.c **** 	unsigned short int posns[257];
ARM GAS  /tmp/ccwSk7O0.s 			page 77


 702              		.loc 1 3484 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3492 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3484:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3484 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3492 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3492 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3499 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3499 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3492 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3499 2 is_stmt 1 view .LVU216
3492:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3492 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3484:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3484 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3499 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3500:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3501:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3501 2 is_stmt 1 view .LVU220
 734              		.loc 1 3501 14 view .LVU221
 735              		.loc 1 3501 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3501 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3501 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3501 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
3502:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3502 4 is_stmt 1 view .LVU226
ARM GAS  /tmp/ccwSk7O0.s 			page 78


 749              		.loc 1 3502 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3502 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3502 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3502 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3503:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3504:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3505:src/display.c **** 	      ++i;
3506:src/display.c **** 	  }
3507:src/display.c **** 	  else {
3508:src/display.c **** 	    ++i;
3509:src/display.c **** 	  }
3510:src/display.c **** 	}
3511:src/display.c **** #endif
3512:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3512 2 is_stmt 1 view .LVU231
3513:src/display.c **** #endif
3514:src/display.c **** #ifdef RP_PREFIX
3515:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3515 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3512:src/display.c **** #endif
 763              		.loc 1 3512 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3515 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3516:src/display.c **** #endif
3517:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3518:src/display.c **** 	findlengths(posns, smallp);
3519:src/display.c **** #endif
3520:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3520 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3512:src/display.c **** #endif
 770              		.loc 1 3512 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3515:src/display.c **** #endif
 772              		.loc 1 3515 2 is_stmt 1 view .LVU237
 773              		.loc 1 3520 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3520 8 view .LVU239
 776              		.loc 1 3520 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3520 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3490:src/display.c **** 	int i, j;
 781              		.loc 1 3490 15 view .LVU242
 782 0050 9846     		mov	r8, r3
 783              	.LBB200:
ARM GAS  /tmp/ccwSk7O0.s 			page 79


3521:src/display.c **** 	  int c;
3522:src/display.c **** 	  int width;
3523:src/display.c **** 	  unsigned char cmap[6];
3524:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3525:src/display.c **** 	  int real_width;
3526:src/display.c **** 	  int current_smallp;
3527:src/display.c **** 
3528:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3529:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3530:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3531:src/display.c **** 	  //           01 -> (not used)
3532:src/display.c **** 	  //           10 -> use big font
3533:src/display.c **** 	  //           11 -> use small font
3534:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3535:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3535 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE200:
3520:src/display.c **** 	  int c;
 787              		.loc 1 3520 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3488:src/display.c **** #endif
 790              		.loc 1 3488 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB209:
3521:src/display.c **** 	  int c;
 794              		.loc 1 3521 4 is_stmt 1 view .LVU246
3522:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3522 4 view .LVU247
3523:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3523 4 view .LVU248
3525:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3525 4 view .LVU249
3526:src/display.c **** 
 798              		.loc 1 3526 4 view .LVU250
 799              		.loc 1 3535 4 view .LVU251
 800              		.loc 1 3535 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3536:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3536 6 is_stmt 1 view .LVU253
 805              		.loc 1 3536 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3537:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3537 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3536:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3536 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
 814              		.loc 1 3537 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
ARM GAS  /tmp/ccwSk7O0.s 			page 80


 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3538:src/display.c **** 	    default:
3539:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3540:src/display.c **** 	      break;
3541:src/display.c **** 	    case 0x40:	current_smallp = 0;
3542:src/display.c **** 	      break;
3543:src/display.c **** 	    case 0x60:	current_smallp = 1;
3544:src/display.c **** 	      break;
3545:src/display.c **** 	    }
3546:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3546 6 view .LVU258
 820              		.loc 1 3546 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3546 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3547:src/display.c **** 	    str += 3;
 831              		.loc 1 3547 6 is_stmt 1 discriminator 4 view .LVU261
3548:src/display.c **** 
3549:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3549 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3547:src/display.c **** 	    str += 3;
 836              		.loc 1 3547 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3549 6 is_stmt 1 discriminator 4 view .LVU264
3550:src/display.c **** 	  } else {
3551:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3552:src/display.c **** 	    real_width = width = charlengths(c);
3553:src/display.c **** 	    current_smallp = smallp;
3554:src/display.c **** 	  }
3555:src/display.c **** 
3556:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3556 4 discriminator 4 view .LVU265
 843              		.loc 1 3556 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3556 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3556 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
 851              	.L118:
3557:src/display.c **** 	    break;
ARM GAS  /tmp/ccwSk7O0.s 			page 81


3558:src/display.c **** 
3559:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3559 4 is_stmt 1 view .LVU269
 853              		.loc 1 3559 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3560:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3560 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3559:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3559 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3560 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3561:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3561 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3562:src/display.c **** 	  }
3563:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3563 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3564:src/display.c **** #else
3565:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3566:src/display.c **** 
3567:src/display.c **** 	  //cmap = &charset[c][0];
3568:src/display.c **** 	  width = charlengths(c);
3569:src/display.c **** 
3570:src/display.c **** 	  if (x + width > b_w+1)
3571:src/display.c **** 	    break;
3572:src/display.c **** 
3573:src/display.c **** 	  /* Decode the packed character bytes */
3574:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3575:src/display.c **** #endif
3576:src/display.c **** 
3577:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3577 4 view .LVU276
 877              		.loc 1 3577 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3577 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
 886              	.LVL77:
 887              	.L80:
ARM GAS  /tmp/ccwSk7O0.s 			page 82


3578:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3578 16 is_stmt 1 view .LVU279
 889              		.loc 1 3578 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3579:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3579 8 is_stmt 1 view .LVU281
 893              		.loc 1 3579 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3578 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3578 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB201:
 907              	.LBB202:
 348:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 348 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 348:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 348 11 view .LVU286
 912              	.LBE202:
 913              	.LBE201:
 914              		.loc 1 3579 8 is_stmt 1 view .LVU287
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3578 25 view .LVU288
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3578 16 view .LVU289
3578:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3578 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3579 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3580:src/display.c **** 		break;
3581:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3582:src/display.c **** 	      if (cmap[i] & (1 << j))
3583:src/display.c **** 		mat[i] |= 1LL << (x+j);
3584:src/display.c **** #else
3585:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3585 8 is_stmt 1 discriminator 2 view .LVU292
 928              	.LBB206:
 929              	.LBI201:
ARM GAS  /tmp/ccwSk7O0.s 			page 83


 347:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 347 6 discriminator 2 view .LVU293
 931              	.LBB203:
 348:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 348 3 discriminator 2 view .LVU294
 348:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 348 11 discriminator 2 view .LVU295
 349:src/display.c **** }
 934              		.loc 1 349 8 discriminator 2 view .LVU296
 935              	.LBE203:
 936              	.LBE206:
 937              		.loc 1 3585 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3585 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB207:
 942              	.LBB204:
 348:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 348 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 348:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 348 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 348:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 348 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE204:
 950              	.LBE207:
3578:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3578 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB208:
 955              	.LBB205:
 349:src/display.c **** }
 956              		.loc 1 349 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 349:src/display.c **** }
 959              		.loc 1 349 8 view .LVU304
 960              	.LBE205:
 961              	.LBE208:
3579:src/display.c **** 		break;
 962              		.loc 1 3579 8 is_stmt 1 view .LVU305
3578:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3578 25 view .LVU306
3578:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3578 16 view .LVU307
3578:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3578 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
3577:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3577 19 is_stmt 1 view .LVU309
ARM GAS  /tmp/ccwSk7O0.s 			page 84


3577:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3577 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3577:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3577 14 is_stmt 1 view .LVU311
3577:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3577 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3586:src/display.c **** #endif
3587:src/display.c **** 	    }
3588:src/display.c **** 	  x += width;
 980              		.loc 1 3588 4 is_stmt 1 view .LVU313
 981              	.LBE209:
3520:src/display.c **** 	  int c;
 982              		.loc 1 3520 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB210:
 986              		.loc 1 3588 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3588 6 view .LVU316
 990              	.LBE210:
3520:src/display.c **** 	  int c;
 991              		.loc 1 3520 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3520:src/display.c **** 	  int c;
 993              		.loc 1 3520 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3520:src/display.c **** 	  int c;
 996              		.loc 1 3520 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB211:
3535:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3535 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE211:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB212:
3521:src/display.c **** 	  int width;
 1005              		.loc 1 3521 4 is_stmt 1 view .LVU321
3522:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3522 4 view .LVU322
3523:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3523 4 view .LVU323
3525:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3525 4 view .LVU324
3526:src/display.c **** 
 1009              		.loc 1 3526 4 view .LVU325
3535:src/display.c **** 	    width = str[1] & 0x1F;
 1010              		.loc 1 3535 4 view .LVU326
3535:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/ccwSk7O0.s 			page 85


 1011              		.loc 1 3535 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3551:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3551 6 is_stmt 1 view .LVU328
3551:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3551 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3552:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3552 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3551:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3551 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3552:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3552 6 is_stmt 1 view .LVU332
3552:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3552 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3552:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3552 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3556:src/display.c **** 	    break;
 1034              		.loc 1 3556 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3552:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3552 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3553:src/display.c **** 	  }
 1039              		.loc 1 3553 6 is_stmt 1 view .LVU337
3556:src/display.c **** 	    break;
 1040              		.loc 1 3556 4 view .LVU338
3556:src/display.c **** 	    break;
 1041              		.loc 1 3556 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3556:src/display.c **** 	    break;
 1044              		.loc 1 3556 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3556:src/display.c **** 	    break;
 1049              		.loc 1 3556 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
 1052              	.LVL95:
3556:src/display.c **** 	    break;
ARM GAS  /tmp/ccwSk7O0.s 			page 86


 1053              		.loc 1 3556 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3556:src/display.c **** 	    break;
 1057              		.loc 1 3556 7 view .LVU343
 1058              	.LBE212:
3589:src/display.c **** 	}
3590:src/display.c **** 
3591:src/display.c **** 
3592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3593:src/display.c **** 	set_status_grob(mat);
3594:src/display.c **** #else
3595:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3595 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3595 20 view .LVU345
 1061              		.loc 1 3595 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3596:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3596 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3595:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3595 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3596 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3595:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3595 27 is_stmt 1 discriminator 3 view .LVU350
3595:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3595 20 discriminator 3 view .LVU351
3595:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3595 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3597:src/display.c **** #endif
3598:src/display.c ****       }
 1081              		.loc 1 3598 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB213:
3543:src/display.c **** 	      break;
 1091              		.loc 1 3543 17 is_stmt 1 view .LVU354
3544:src/display.c **** 	    }
 1092              		.loc 1 3544 8 view .LVU355
ARM GAS  /tmp/ccwSk7O0.s 			page 87


3546:src/display.c **** 	    str += 3;
 1093              		.loc 1 3546 6 view .LVU356
3546:src/display.c **** 	    str += 3;
 1094              		.loc 1 3546 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3543:src/display.c **** 	      break;
 1097              		.loc 1 3543 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3541:src/display.c **** 	      break;
 1104              		.loc 1 3541 17 is_stmt 1 view .LVU359
3542:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3542 8 view .LVU360
3546:src/display.c **** 	    str += 3;
 1106              		.loc 1 3546 6 view .LVU361
3546:src/display.c **** 	    str += 3;
 1107              		.loc 1 3546 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3541:src/display.c **** 	      break;
 1110              		.loc 1 3541 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3541:src/display.c **** 	      break;
 1116              		.loc 1 3541 32 view .LVU364
 1117              	.LBE213:
3503:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3503 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3504:src/display.c **** 	      ++i;
 1123              		.loc 1 3504 6 view .LVU366
3504:src/display.c **** 	      ++i;
 1124              		.loc 1 3504 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB214:
3504:src/display.c **** 	      ++i;
 1133              		.loc 1 3504 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
 1135              	.LVL104:
3504:src/display.c **** 	      ++i;
ARM GAS  /tmp/ccwSk7O0.s 			page 88


 1136              		.loc 1 3504 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3504:src/display.c **** 	      ++i;
 1141              		.loc 1 3504 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE214:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.text.set_exp,"ax",%progbits
 1155              		.align	1
 1156              		.p2align 2,,3
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
 1162              	set_exp:
 1163              	.LVL106:
 1164              	.LFB14:
 450:src/display.c ****   union {
 1165              		.loc 1 450 52 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 451:src/display.c ****     char buf[4];
 1169              		.loc 1 451 3 view .LVU372
 455:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1170              		.loc 1 455 3 view .LVU373
 457:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1171              		.loc 1 457 3 view .LVU374
 463:src/display.c **** #  endif
 1172              		.loc 1 463 3 view .LVU375
 472:src/display.c ****   if (exp < 0) {
 1173              		.loc 1 472 3 view .LVU376
 450:src/display.c ****   union {
 1174              		.loc 1 450 52 is_stmt 0 view .LVU377
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              		.cfi_def_cfa_offset 24
 1177              		.cfi_offset 4, -24
 1178              		.cfi_offset 5, -20
 1179              		.cfi_offset 6, -16
 1180              		.cfi_offset 7, -12
 1181              		.cfi_offset 8, -8
 1182              		.cfi_offset 14, -4
 473:src/display.c ****     negative = 1;
 1183              		.loc 1 473 6 view .LVU378
 1184 0004 051E     		subs	r5, r0, #0
 450:src/display.c ****   union {
ARM GAS  /tmp/ccwSk7O0.s 			page 89


 1185              		.loc 1 450 52 view .LVU379
 1186 0006 82B0     		sub	sp, sp, #8
 1187              		.cfi_def_cfa_offset 32
 450:src/display.c ****   union {
 1188              		.loc 1 450 52 view .LVU380
 1189 0008 0F46     		mov	r7, r1
 1190              	.LVL107:
 473:src/display.c ****     negative = 1;
 1191              		.loc 1 473 3 is_stmt 1 view .LVU381
 473:src/display.c ****     negative = 1;
 1192              		.loc 1 473 6 is_stmt 0 view .LVU382
 1193 000a 67DB     		blt	.L153
 478:src/display.c **** #endif
 1194              		.loc 1 478 13 view .LVU383
 1195 000c 424B     		ldr	r3, .L155
 1196 000e EC17     		asrs	r4, r5, #31
 1197 0010 83FB0513 		smull	r1, r3, r3, r5
 1198              	.LVL108:
 478:src/display.c **** #endif
 1199              		.loc 1 478 13 view .LVU384
 1200 0014 C4EBA314 		rsb	r4, r4, r3, asr #6
 472:src/display.c ****   if (exp < 0) {
 1201              		.loc 1 472 12 view .LVU385
 1202 0018 07F00208 		and	r8, r7, #2
 1203              	.LVL109:
 478:src/display.c **** #endif
 1204              		.loc 1 478 3 is_stmt 1 view .LVU386
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1205              		.loc 1 480 3 view .LVU387
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1206              		.loc 1 480 6 is_stmt 0 view .LVU388
 1207 001c 002A     		cmp	r2, #0
 1208 001e 6CD0     		beq	.L126
 483:src/display.c **** #else
 1209              		.loc 1 483 5 is_stmt 1 view .LVU389
 483:src/display.c **** #else
 1210              		.loc 1 483 8 is_stmt 0 view .LVU390
 1211 0020 3CB1     		cbz	r4, .L127
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1212              		.loc 1 487 2 is_stmt 1 view .LVU391
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 487 5 is_stmt 0 view .LVU392
 1214 0022 B8F1000F 		cmp	r8, #0
 1215 0026 0CD1     		bne	.L124
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 487 17 is_stmt 1 discriminator 1 view .LVU393
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1217              		.loc 1 487 21 is_stmt 0 discriminator 1 view .LVU394
 1218 0028 1446     		mov	r4, r2
 1219              	.LVL110:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1220              		.loc 1 487 24 discriminator 1 view .LVU395
 1221 002a 3A23     		movs	r3, #58
 1222              	.LVL111:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1223              		.loc 1 487 24 discriminator 1 view .LVU396
 1224 002c 04F8013B 		strb	r3, [r4], #1
ARM GAS  /tmp/ccwSk7O0.s 			page 90


 1225              	.LVL112:
 494:src/display.c ****     }
 1226              		.loc 1 494 7 is_stmt 1 discriminator 1 view .LVU397
 1227 0030 0BE0     		b	.L128
 1228              	.LVL113:
 1229              	.L127:
 490:src/display.c **** #else
 1230              		.loc 1 490 12 view .LVU398
 490:src/display.c **** #else
 1231              		.loc 1 490 16 is_stmt 0 view .LVU399
 1232 0032 1446     		mov	r4, r2
 1233              	.LVL114:
 490:src/display.c **** #else
 1234              		.loc 1 490 19 view .LVU400
 1235 0034 6523     		movs	r3, #101
 1236              	.LVL115:
 490:src/display.c **** #else
 1237              		.loc 1 490 19 view .LVU401
 1238 0036 04F8013B 		strb	r3, [r4], #1
 1239              	.LVL116:
 494:src/display.c ****     }
 1240              		.loc 1 494 7 is_stmt 1 view .LVU402
 494:src/display.c ****     }
 1241              		.loc 1 494 10 is_stmt 0 view .LVU403
 1242 003a B8F1000F 		cmp	r8, #0
 1243 003e 04D0     		beq	.L128
 490:src/display.c **** #else
 1244              		.loc 1 490 16 view .LVU404
 1245 0040 2246     		mov	r2, r4
 1246              	.LVL117:
 1247              	.L124:
 494:src/display.c ****     }
 1248              		.loc 1 494 21 is_stmt 1 discriminator 1 view .LVU405
 494:src/display.c ****     }
 1249              		.loc 1 494 25 is_stmt 0 discriminator 1 view .LVU406
 1250 0042 1446     		mov	r4, r2
 1251              	.LVL118:
 494:src/display.c ****     }
 1252              		.loc 1 494 28 discriminator 1 view .LVU407
 1253 0044 2D23     		movs	r3, #45
 1254 0046 04F8013B 		strb	r3, [r4], #1
 1255              	.LVL119:
 1256              	.L128:
 542:src/display.c **** #endif
 1257              		.loc 1 542 7 is_stmt 1 view .LVU408
 1258 004a 01AE     		add	r6, sp, #4
 1259 004c 3046     		mov	r0, r6
 1260 004e 0422     		movs	r2, #4
 1261 0050 0021     		movs	r1, #0
 1262 0052 FFF7FEFF 		bl	xset
 1263              	.LVL120:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1264              		.loc 1 544 7 view .LVU409
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1265              		.loc 1 544 10 is_stmt 0 view .LVU410
 1266 0056 17F0050F 		tst	r7, #5
 1267 005a 33D1     		bne	.L133
ARM GAS  /tmp/ccwSk7O0.s 			page 91


 1268              	.L135:
 565:src/display.c ****     no_number:
 1269              		.loc 1 565 2 is_stmt 1 view .LVU411
 1270 005c 2946     		mov	r1, r5
 1271 005e 3046     		mov	r0, r6
 1272 0060 FFF7FEFF 		bl	num_arg
 1273              	.LVL121:
 567:src/display.c ****     }
 1274              		.loc 1 567 7 view .LVU412
 1275 0064 2146     		mov	r1, r4
 1276 0066 3046     		mov	r0, r6
 1277 0068 FFF7FEFF 		bl	set_exp_digits_string
 1278              	.LVL122:
 568:src/display.c **** 
 1279              		.loc 1 568 5 is_stmt 0 view .LVU413
 1280 006c 02B0     		add	sp, sp, #8
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 24
 1283              		@ sp needed
 1284 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1285              	.LVL123:
 1286              	.L136:
 1287              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1288              		.loc 1 474 14 view .LVU414
 1289 0072 4FF00108 		mov	r8, #1
 1290              	.LVL124:
 1291              	.L123:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1292              		.loc 1 497 21 is_stmt 1 view .LVU415
 1293              	.LBB215:
 1294              	.LBI215:
 316:src/display.c **** {
 1295              		.loc 1 316 13 view .LVU416
 1296              	.LBB216:
 318:src/display.c ****   set_dot(EXP_SIGN);
 1297              		.loc 1 318 3 view .LVU417
 318:src/display.c ****   set_dot(EXP_SIGN);
 1298              		.loc 1 318 27 is_stmt 0 view .LVU418
 1299 0076 294B     		ldr	r3, .L155+4
 1300 0078 2D22     		movs	r2, #45
 1301              	.LVL125:
 319:src/display.c **** }
 1302              		.loc 1 319 3 view .LVU419
 1303 007a 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 1304              		.loc 1 318 27 view .LVU420
 1305 007c 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 1306              		.loc 1 319 3 is_stmt 1 view .LVU421
 1307 007e FFF7FEFF 		bl	set_dot
 1308              	.LVL126:
 1309              	.L129:
 319:src/display.c **** }
 1310              		.loc 1 319 3 is_stmt 0 view .LVU422
 1311              	.LBE216:
 1312              	.LBE215:
ARM GAS  /tmp/ccwSk7O0.s 			page 92


 499:src/display.c **** #else
 1313              		.loc 1 499 7 is_stmt 1 view .LVU423
 499:src/display.c **** #else
 1314              		.loc 1 499 10 is_stmt 0 view .LVU424
 1315 0082 002C     		cmp	r4, #0
 1316 0084 E1D0     		beq	.L128
 503:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1317              		.loc 1 503 4 is_stmt 1 view .LVU425
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1318              		.loc 1 517 6 view .LVU426
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1319              		.loc 1 517 23 is_stmt 0 view .LVU427
 1320 0086 264B     		ldr	r3, .L155+8
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1321              		.loc 1 517 10 view .LVU428
 1322 0088 03FB0455 		mla	r5, r3, r4, r5
 1323              	.LVL127:
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1324              		.loc 1 519 6 is_stmt 1 view .LVU429
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1325              		.loc 1 519 9 is_stmt 0 view .LVU430
 1326 008c FB06     		lsls	r3, r7, #27
 1327 008e 0AD5     		bpl	.L130
 1328              	.LBB217:
 523:src/display.c **** 		// Clear digits and separators
 1329              		.loc 1 523 15 view .LVU431
 1330 0090 4F26     		movs	r6, #79
 1331              	.L131:
 1332              	.LVL128:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1333              		.loc 1 525 3 is_stmt 1 discriminator 3 view .LVU432
 1334 0092 3046     		mov	r0, r6
 523:src/display.c **** 		// Clear digits and separators
 1335              		.loc 1 523 66 is_stmt 0 discriminator 3 view .LVU433
 1336 0094 0136     		adds	r6, r6, #1
 1337              	.LVL129:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1338              		.loc 1 525 3 discriminator 3 view .LVU434
 1339 0096 FFF7FEFF 		bl	clr_dot
 1340              	.LVL130:
 523:src/display.c **** 		// Clear digits and separators
 1341              		.loc 1 523 66 is_stmt 1 discriminator 3 view .LVU435
 523:src/display.c **** 		// Clear digits and separators
 1342              		.loc 1 523 41 discriminator 3 view .LVU436
 523:src/display.c **** 		// Clear digits and separators
 1343              		.loc 1 523 8 is_stmt 0 discriminator 3 view .LVU437
 1344 009a 632E     		cmp	r6, #99
 1345 009c F9D1     		bne	.L131
 526:src/display.c **** 	    }
 1346              		.loc 1 526 8 is_stmt 1 view .LVU438
 1347 009e 3E21     		movs	r1, #62
 1348 00a0 5120     		movs	r0, #81
 1349 00a2 FFF7FEFF 		bl	set_dig
 1350              	.LVL131:
 1351              	.L130:
 526:src/display.c **** 	    }
 1352              		.loc 1 526 8 is_stmt 0 view .LVU439
ARM GAS  /tmp/ccwSk7O0.s 			page 93


 1353              	.LBE217:
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1354              		.loc 1 529 6 is_stmt 1 view .LVU440
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1355              		.loc 1 529 9 is_stmt 0 view .LVU441
 1356 00a6 B8F1000F 		cmp	r8, #0
 1357 00aa 2AD1     		bne	.L154
 1358              	.L132:
 533:src/display.c **** 	    flags = 1;
 1359              		.loc 1 533 6 is_stmt 1 view .LVU442
 1360 00ac 04F13001 		add	r1, r4, #48
 1361 00b0 6320     		movs	r0, #99
 542:src/display.c **** #endif
 1362              		.loc 1 542 7 is_stmt 0 view .LVU443
 1363 00b2 01AE     		add	r6, sp, #4
 533:src/display.c **** 	    flags = 1;
 1364              		.loc 1 533 6 view .LVU444
 1365 00b4 FFF7FEFF 		bl	set_dig
 1366              	.LVL132:
 534:src/display.c **** 	  }
 1367              		.loc 1 534 6 is_stmt 1 view .LVU445
 542:src/display.c **** #endif
 1368              		.loc 1 542 7 view .LVU446
 1369 00b8 3046     		mov	r0, r6
 1370 00ba 0422     		movs	r2, #4
 1371 00bc 0021     		movs	r1, #0
 1372 00be FFF7FEFF 		bl	xset
 1373              	.LVL133:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1374              		.loc 1 544 7 view .LVU447
 542:src/display.c **** #endif
 1375              		.loc 1 542 7 is_stmt 0 view .LVU448
 1376 00c2 0024     		movs	r4, #0
 1377              	.LVL134:
 1378              	.L133:
 545:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1379              		.loc 1 545 2 is_stmt 1 view .LVU449
 1380 00c4 2946     		mov	r1, r5
 1381 00c6 0322     		movs	r2, #3
 1382 00c8 3046     		mov	r0, r6
 1383 00ca FFF7FEFF 		bl	num_arg_0
 1384              	.LVL135:
 567:src/display.c ****     }
 1385              		.loc 1 567 7 view .LVU450
 1386 00ce 2146     		mov	r1, r4
 1387 00d0 3046     		mov	r0, r6
 1388 00d2 FFF7FEFF 		bl	set_exp_digits_string
 1389              	.LVL136:
 568:src/display.c **** 
 1390              		.loc 1 568 5 is_stmt 0 view .LVU451
 1391 00d6 02B0     		add	sp, sp, #8
 1392              		.cfi_remember_state
 1393              		.cfi_def_cfa_offset 24
 1394              		@ sp needed
 1395 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1396              	.LVL137:
 1397              	.L153:
ARM GAS  /tmp/ccwSk7O0.s 			page 94


 1398              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1399              		.loc 1 474 5 is_stmt 1 view .LVU452
 475:src/display.c ****   }
 1400              		.loc 1 475 5 view .LVU453
 478:src/display.c **** #endif
 1401              		.loc 1 478 13 is_stmt 0 view .LVU454
 1402 00dc 0E4C     		ldr	r4, .L155
 475:src/display.c ****   }
 1403              		.loc 1 475 9 view .LVU455
 1404 00de 6D42     		rsbs	r5, r5, #0
 1405              	.LVL138:
 478:src/display.c **** #endif
 1406              		.loc 1 478 3 is_stmt 1 view .LVU456
 478:src/display.c **** #endif
 1407              		.loc 1 478 13 is_stmt 0 view .LVU457
 1408 00e0 A4FB0534 		umull	r3, r4, r4, r5
 1409 00e4 A409     		lsrs	r4, r4, #6
 1410              	.LVL139:
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1411              		.loc 1 480 3 is_stmt 1 view .LVU458
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1412              		.loc 1 480 6 is_stmt 0 view .LVU459
 1413 00e6 002A     		cmp	r2, #0
 1414 00e8 C3D0     		beq	.L136
 483:src/display.c **** #else
 1415              		.loc 1 483 5 is_stmt 1 view .LVU460
 483:src/display.c **** #else
 1416              		.loc 1 483 8 is_stmt 0 view .LVU461
 1417 00ea 002C     		cmp	r4, #0
 1418 00ec A9D1     		bne	.L124
 490:src/display.c **** #else
 1419              		.loc 1 490 12 is_stmt 1 view .LVU462
 490:src/display.c **** #else
 1420              		.loc 1 490 16 is_stmt 0 view .LVU463
 1421 00ee 1446     		mov	r4, r2
 1422              	.LVL140:
 490:src/display.c **** #else
 1423              		.loc 1 490 19 view .LVU464
 1424 00f0 6523     		movs	r3, #101
 1425 00f2 04F8013B 		strb	r3, [r4], #1
 1426              	.LVL141:
 494:src/display.c ****     }
 1427              		.loc 1 494 7 is_stmt 1 view .LVU465
 490:src/display.c **** #else
 1428              		.loc 1 490 16 is_stmt 0 view .LVU466
 1429 00f6 2246     		mov	r2, r4
 1430 00f8 A3E7     		b	.L124
 1431              	.LVL142:
 1432              	.L126:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1433              		.loc 1 497 7 is_stmt 1 view .LVU467
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1434              		.loc 1 497 10 is_stmt 0 view .LVU468
 1435 00fa B8F1000F 		cmp	r8, #0
 1436 00fe C0D0     		beq	.L129
 1437 0100 B9E7     		b	.L123
ARM GAS  /tmp/ccwSk7O0.s 			page 95


 1438              	.LVL143:
 1439              	.L154:
 530:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1440              		.loc 1 530 8 is_stmt 1 view .LVU469
 1441              	.LBB218:
 1442              	.LBI218:
 322:src/display.c **** {
 1443              		.loc 1 322 13 view .LVU470
 1444              	.LBB219:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1445              		.loc 1 324 3 view .LVU471
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1446              		.loc 1 324 27 is_stmt 0 view .LVU472
 1447 0102 064B     		ldr	r3, .L155+4
 1448 0104 2022     		movs	r2, #32
 325:src/display.c **** }
 1449              		.loc 1 325 3 view .LVU473
 1450 0106 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1451              		.loc 1 324 27 view .LVU474
 1452 0108 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 1453              		.loc 1 325 3 is_stmt 1 view .LVU475
 1454 010a FFF7FEFF 		bl	clr_dot
 1455              	.LVL144:
 1456              	.LBE219:
 1457              	.LBE218:
 531:src/display.c **** 	    }
 1458              		.loc 1 531 8 view .LVU476
 1459 010e 2D21     		movs	r1, #45
 1460 0110 5A20     		movs	r0, #90
 1461 0112 FFF7FEFF 		bl	set_dig
 1462              	.LVL145:
 1463 0116 C9E7     		b	.L132
 1464              	.L156:
 1465              		.align	2
 1466              	.L155:
 1467 0118 D34D6210 		.word	274877907
 1468 011c 00000000 		.word	LastDisplayedExponent
 1469 0120 18FCFFFF 		.word	-1000
 1470              		.cfi_endproc
 1471              	.LFE14:
 1473              		.section	.text.set_separator.part.0,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_separator.part.0:
 1482              	.LVL146:
 1483              	.LFB50:
 375:src/display.c ****   if (sep == SEP_NONE)
 1484              		.loc 1 375 14 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwSk7O0.s 			page 96


 382:src/display.c ****     set_dot(posn+7);
 1488              		.loc 1 382 5 view .LVU478
 375:src/display.c ****   if (sep == SEP_NONE)
 1489              		.loc 1 375 14 is_stmt 0 view .LVU479
 1490 0000 70B5     		push	{r4, r5, r6, lr}
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 4, -16
 1493              		.cfi_offset 5, -12
 1494              		.cfi_offset 6, -8
 1495              		.cfi_offset 14, -4
 375:src/display.c ****   if (sep == SEP_NONE)
 1496              		.loc 1 375 14 view .LVU480
 1497 0002 0546     		mov	r5, r0
 1498 0004 0E46     		mov	r6, r1
 383:src/display.c ****     if (sep == SEP_COMMA)
 1499              		.loc 1 383 5 view .LVU481
 1500 0006 0238     		subs	r0, r0, #2
 1501              	.LVL147:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1502              		.loc 1 383 5 view .LVU482
 1503 0008 FFF7FEFF 		bl	set_dot
 1504              	.LVL148:
 384:src/display.c ****       set_dot(posn+8);
 1505              		.loc 1 384 8 view .LVU483
 1506 000c 012E     		cmp	r6, #1
 382:src/display.c ****     set_dot(posn+7);
 1507              		.loc 1 382 10 view .LVU484
 1508 000e A5F10904 		sub	r4, r5, #9
 1509              	.LVL149:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1510              		.loc 1 383 5 is_stmt 1 view .LVU485
 384:src/display.c ****       set_dot(posn+8);
 1511              		.loc 1 384 5 view .LVU486
 384:src/display.c ****       set_dot(posn+8);
 1512              		.loc 1 384 8 is_stmt 0 view .LVU487
 1513 0012 0CD0     		beq	.L161
 387:src/display.c **** #endif
 1514              		.loc 1 387 39 view .LVU488
 1515 0014 2E21     		movs	r1, #46
 1516              	.L158:
 387:src/display.c **** #endif
 1517              		.loc 1 387 30 view .LVU489
 1518 0016 084B     		ldr	r3, .L162
 387:src/display.c **** #endif
 1519              		.loc 1 387 39 view .LVU490
 1520 0018 084A     		ldr	r2, .L162+4
 387:src/display.c **** #endif
 1521              		.loc 1 387 30 view .LVU491
 1522 001a 83FB0403 		smull	r0, r3, r3, r4
 1523 001e E417     		asrs	r4, r4, #31
 1524              	.LVL150:
 387:src/display.c **** #endif
 1525              		.loc 1 387 30 view .LVU492
 1526 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 387:src/display.c **** #endif
 1527              		.loc 1 387 35 view .LVU493
 1528 0024 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccwSk7O0.s 			page 97


 391:src/display.c **** 
 1529              		.loc 1 391 1 view .LVU494
 1530 0026 0020     		movs	r0, #0
 387:src/display.c **** #endif
 1531              		.loc 1 387 39 view .LVU495
 1532 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1533              	.LVL151:
 391:src/display.c **** 
 1534              		.loc 1 391 1 view .LVU496
 1535 002c 70BD     		pop	{r4, r5, r6, pc}
 1536              	.LVL152:
 1537              	.L161:
 385:src/display.c **** #ifndef REALBUILD
 1538              		.loc 1 385 7 is_stmt 1 view .LVU497
 1539 002e 681E     		subs	r0, r5, #1
 1540 0030 FFF7FEFF 		bl	set_dot
 1541              	.LVL153:
 387:src/display.c **** #endif
 1542              		.loc 1 387 5 view .LVU498
 387:src/display.c **** #endif
 1543              		.loc 1 387 39 is_stmt 0 view .LVU499
 1544 0034 2C21     		movs	r1, #44
 1545 0036 EEE7     		b	.L158
 1546              	.L163:
 1547              		.align	2
 1548              	.L162:
 1549 0038 398EE338 		.word	954437177
 1550 003c 00000000 		.word	LastDisplayedNumber
 1551              		.cfi_endproc
 1552              	.LFE50:
 1554              		.section	.text.set_decimal,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv4-sp-d16
 1562              	set_decimal:
 1563              	.LVL154:
 1564              	.LFB8:
 357:src/display.c ****   if (res) {
 1565              		.loc 1 357 87 is_stmt 1 view -0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1569              		.loc 1 358 3 view .LVU501
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1570              		.loc 1 358 6 is_stmt 0 view .LVU502
 1571 0000 3AB1     		cbz	r2, .L165
 359:src/display.c ****   } else {
 1572              		.loc 1 359 5 is_stmt 1 view .LVU503
 359:src/display.c ****   } else {
 1573              		.loc 1 359 12 is_stmt 0 view .LVU504
 1574 0002 0029     		cmp	r1, #0
 359:src/display.c ****   } else {
 1575              		.loc 1 359 9 view .LVU505
ARM GAS  /tmp/ccwSk7O0.s 			page 98


 1576 0004 1046     		mov	r0, r2
 1577              	.LVL155:
 359:src/display.c ****   } else {
 1578              		.loc 1 359 12 view .LVU506
 1579 0006 0CBF     		ite	eq
 1580 0008 2E23     		moveq	r3, #46
 1581 000a 2C23     		movne	r3, #44
 1582 000c 00F8013B 		strb	r3, [r0], #1
 1583              	.LVL156:
 369:src/display.c **** 
 1584              		.loc 1 369 1 view .LVU507
 1585 0010 7047     		bx	lr
 1586              	.LVL157:
 1587              	.L165:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1588              		.loc 1 361 5 is_stmt 1 view .LVU508
 357:src/display.c ****   if (res) {
 1589              		.loc 1 357 87 is_stmt 0 view .LVU509
 1590 0012 10B5     		push	{r4, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 4, -8
 1593              		.cfi_offset 14, -4
 1594 0014 82B0     		sub	sp, sp, #8
 1595              		.cfi_def_cfa_offset 16
 1596 0016 0446     		mov	r4, r0
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1597              		.loc 1 361 5 view .LVU510
 1598 0018 0730     		adds	r0, r0, #7
 1599              	.LVL158:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1600              		.loc 1 361 5 view .LVU511
 1601 001a 0191     		str	r1, [sp, #4]
 1602 001c FFF7FEFF 		bl	set_dot
 1603              	.LVL159:
 362:src/display.c ****       set_dot(posn+8);
 1604              		.loc 1 362 5 is_stmt 1 view .LVU512
 362:src/display.c ****       set_dot(posn+8);
 1605              		.loc 1 362 8 is_stmt 0 view .LVU513
 1606 0020 0199     		ldr	r1, [sp, #4]
 1607 0022 69B9     		cbnz	r1, .L174
 1608              	.LBB222:
 1609              	.LBB223:
 365:src/display.c **** #endif
 1610              		.loc 1 365 38 view .LVU514
 1611 0024 2E22     		movs	r2, #46
 1612              	.L168:
 365:src/display.c **** #endif
 1613              		.loc 1 365 30 view .LVU515
 1614 0026 0948     		ldr	r0, .L175
 365:src/display.c **** #endif
 1615              		.loc 1 365 38 view .LVU516
 1616 0028 094B     		ldr	r3, .L175+4
 365:src/display.c **** #endif
 1617              		.loc 1 365 30 view .LVU517
 1618 002a 80FB0410 		smull	r1, r0, r0, r4
 1619 002e E417     		asrs	r4, r4, #31
 1620              	.LVL160:
ARM GAS  /tmp/ccwSk7O0.s 			page 99


 365:src/display.c **** #endif
 1621              		.loc 1 365 30 view .LVU518
 1622 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 365:src/display.c **** #endif
 1623              		.loc 1 365 35 view .LVU519
 1624 0034 0134     		adds	r4, r4, #1
 365:src/display.c **** #endif
 1625              		.loc 1 365 38 view .LVU520
 1626 0036 0020     		movs	r0, #0
 1627 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1628              	.LVL161:
 368:src/display.c **** }
 1629              		.loc 1 368 3 is_stmt 1 view .LVU521
 368:src/display.c **** }
 1630              		.loc 1 368 3 is_stmt 0 view .LVU522
 1631              	.LBE223:
 1632              	.LBE222:
 368:src/display.c **** }
 1633              		.loc 1 368 3 is_stmt 1 view .LVU523
 369:src/display.c **** 
 1634              		.loc 1 369 1 is_stmt 0 view .LVU524
 1635 003c 02B0     		add	sp, sp, #8
 1636              		.cfi_remember_state
 1637              		.cfi_def_cfa_offset 8
 1638              		@ sp needed
 1639 003e 10BD     		pop	{r4, pc}
 1640              	.LVL162:
 1641              	.L174:
 1642              		.cfi_restore_state
 363:src/display.c **** #ifndef REALBUILD
 1643              		.loc 1 363 7 is_stmt 1 view .LVU525
 1644 0040 04F10800 		add	r0, r4, #8
 1645 0044 FFF7FEFF 		bl	set_dot
 1646              	.LVL163:
 1647              	.LBB225:
 1648              	.LBI222:
 357:src/display.c ****   if (res) {
 1649              		.loc 1 357 14 view .LVU526
 1650              	.LBB224:
 365:src/display.c **** #endif
 1651              		.loc 1 365 5 view .LVU527
 365:src/display.c **** #endif
 1652              		.loc 1 365 38 is_stmt 0 view .LVU528
 1653 0048 2C22     		movs	r2, #44
 1654 004a ECE7     		b	.L168
 1655              	.L176:
 1656              		.align	2
 1657              	.L175:
 1658 004c 398EE338 		.word	954437177
 1659 0050 00000000 		.word	LastDisplayedNumber
 1660              	.LBE224:
 1661              	.LBE225:
 1662              		.cfi_endproc
 1663              	.LFE8:
 1665              		.section	.text.set_digits_string,"ax",%progbits
 1666              		.align	1
 1667              		.p2align 2,,3
ARM GAS  /tmp/ccwSk7O0.s 			page 100


 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	set_digits_string:
 1674              	.LVL164:
 1675              	.LFB12:
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1676              		.loc 1 422 55 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1680              		.loc 1 423 3 view .LVU530
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1681              		.loc 1 422 55 is_stmt 0 view .LVU531
 1682 0000 38B5     		push	{r3, r4, r5, lr}
 1683              		.cfi_def_cfa_offset 16
 1684              		.cfi_offset 3, -16
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 5, -8
 1687              		.cfi_offset 14, -4
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1688              		.loc 1 423 10 view .LVU532
 1689 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1690              		.loc 1 423 10 is_stmt 1 view .LVU533
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1691              		.loc 1 423 3 is_stmt 0 view .LVU534
 1692 0004 E3B1     		cbz	r3, .L177
 1693 0006 0546     		mov	r5, r0
 1694 0008 0C46     		mov	r4, r1
 1695 000a 06E0     		b	.L181
 1696              	.LVL165:
 1697              	.L179:
 1698              	.LBB226:
 1699              	.LBB227:
 417:src/display.c ****   return res;
 1700              		.loc 1 417 8 view .LVU535
 1701 000c 2046     		mov	r0, r4
 1702 000e FFF7FEFF 		bl	set_dig
 1703              	.LVL166:
 418:src/display.c **** }
 1704              		.loc 1 418 3 is_stmt 1 view .LVU536
 418:src/display.c **** }
 1705              		.loc 1 418 3 is_stmt 0 view .LVU537
 1706              	.LBE227:
 1707              	.LBE226:
 428:src/display.c ****     }
 1708              		.loc 1 428 7 is_stmt 1 view .LVU538
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1709              		.loc 1 423 10 is_stmt 0 view .LVU539
 1710 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1711              	.LVL167:
 428:src/display.c ****     }
 1712              		.loc 1 428 9 view .LVU540
 1713 0016 0934     		adds	r4, r4, #9
ARM GAS  /tmp/ccwSk7O0.s 			page 101


 1714              	.LVL168:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1715              		.loc 1 423 24 is_stmt 1 view .LVU541
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1716              		.loc 1 423 10 view .LVU542
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1717              		.loc 1 423 3 is_stmt 0 view .LVU543
 1718 0018 93B1     		cbz	r3, .L177
 1719              	.LVL169:
 1720              	.L181:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1721              		.loc 1 424 5 is_stmt 1 view .LVU544
 425:src/display.c ****     else {
 1722              		.loc 1 425 7 view .LVU545
 427:src/display.c ****       j += SEGS_PER_DIGIT;
 1723              		.loc 1 427 7 view .LVU546
 1724              	.LBB230:
 1725              	.LBI226:
 415:src/display.c ****   if (res) *res++ = ch;
 1726              		.loc 1 415 14 view .LVU547
 1727              	.LBB228:
 416:src/display.c ****   else	set_dig(base, ch);
 1728              		.loc 1 416 3 view .LVU548
 417:src/display.c ****   return res;
 1729              		.loc 1 417 8 view .LVU549
 1730              	.LBE228:
 1731              	.LBE230:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1732              		.loc 1 424 21 is_stmt 0 view .LVU550
 1733 001a 03F0FD02 		and	r2, r3, #253
 1734 001e 2C2A     		cmp	r2, #44
 425:src/display.c ****     else {
 1735              		.loc 1 425 7 view .LVU551
 1736 0020 A4F10900 		sub	r0, r4, #9
 1737 0024 4FF00002 		mov	r2, #0
 1738              	.LBB231:
 1739              	.LBB229:
 417:src/display.c ****   return res;
 1740              		.loc 1 417 8 view .LVU552
 1741 0028 1946     		mov	r1, r3
 1742              	.LBE229:
 1743              	.LBE231:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1744              		.loc 1 424 21 view .LVU553
 1745 002a EFD1     		bne	.L179
 425:src/display.c ****     else {
 1746              		.loc 1 425 7 view .LVU554
 1747 002c B3F12E01 		subs	r1, r3, #46
 1748 0030 18BF     		it	ne
 1749 0032 0121     		movne	r1, #1
 1750 0034 FFF7FEFF 		bl	set_decimal
 1751              	.LVL170:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1752              		.loc 1 423 24 is_stmt 1 view .LVU555
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1753              		.loc 1 423 10 view .LVU556
 1754 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 102


 1755              	.LVL171:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1756              		.loc 1 423 3 is_stmt 0 view .LVU557
 1757 003c 002B     		cmp	r3, #0
 1758 003e ECD1     		bne	.L181
 1759              	.LVL172:
 1760              	.L177:
 431:src/display.c **** 
 1761              		.loc 1 431 1 view .LVU558
 1762 0040 38BD     		pop	{r3, r4, r5, pc}
 1763              		.cfi_endproc
 1764              	.LFE12:
 1766 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1767              		.align	2
 1768              	.LC0:
 1769 0000 4E614E00 		.ascii	"NaN\000"
 1770              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1771              		.align	1
 1772              		.p2align 2,,3
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	check_special_dn.isra.0:
 1779              	.LVL173:
 1780              	.LFB52:
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1781              		.loc 1 1625 18 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1785              		.loc 1 1626 2 view .LVU560
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1786              		.loc 1 1625 18 is_stmt 0 view .LVU561
 1787 0000 38B5     		push	{r3, r4, r5, lr}
 1788              		.cfi_def_cfa_offset 16
 1789              		.cfi_offset 3, -16
 1790              		.cfi_offset 4, -12
 1791              		.cfi_offset 5, -8
 1792              		.cfi_offset 14, -4
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1793              		.loc 1 1626 6 view .LVU562
 1794 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1795              		.loc 1 1625 18 view .LVU563
 1796 0004 0546     		mov	r5, r0
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1797              		.loc 1 1626 5 view .LVU564
 1798 0006 13F07000 		ands	r0, r3, #112
 1799 000a 09D0     		beq	.L187
1627:src/display.c **** 	    if (res) {
 1800              		.loc 1 1627 4 is_stmt 1 view .LVU565
1627:src/display.c **** 	    if (res) {
 1801              		.loc 1 1627 7 is_stmt 0 view .LVU566
 1802 000c 13F0300F 		tst	r3, #48
 1803 0010 0C46     		mov	r4, r1
ARM GAS  /tmp/ccwSk7O0.s 			page 103


 1804 0012 06D0     		beq	.L189
 1805              	.LVL174:
 1806              	.LBB234:
 1807              	.LBI234:
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1808              		.loc 1 1625 18 is_stmt 1 view .LVU567
 1809              	.LBB235:
1628:src/display.c **** 	      scopy(res, "NaN");
 1810              		.loc 1 1628 6 view .LVU568
1628:src/display.c **** 	      scopy(res, "NaN");
 1811              		.loc 1 1628 9 is_stmt 0 view .LVU569
 1812 0014 89B1     		cbz	r1, .L190
1629:src/display.c **** 	    } else {
 1813              		.loc 1 1629 8 is_stmt 1 view .LVU570
 1814 0016 0846     		mov	r0, r1
 1815 0018 1849     		ldr	r1, .L203
 1816              	.LVL175:
1629:src/display.c **** 	    } else {
 1817              		.loc 1 1629 8 is_stmt 0 view .LVU571
 1818 001a FFF7FEFF 		bl	scopy
 1819              	.LVL176:
1629:src/display.c **** 	    } else {
 1820              		.loc 1 1629 8 view .LVU572
 1821 001e 0120     		movs	r0, #1
 1822              	.LVL177:
 1823              	.L187:
1629:src/display.c **** 	    } else {
 1824              		.loc 1 1629 8 view .LVU573
 1825              	.LBE235:
 1826              	.LBE234:
1661:src/display.c **** 
 1827              		.loc 1 1661 7 view .LVU574
 1828 0020 38BD     		pop	{r3, r4, r5, pc}
 1829              	.LVL178:
 1830              	.L189:
1639:src/display.c **** 	      if (res) *res++ = '-';
 1831              		.loc 1 1639 6 is_stmt 1 view .LVU575
1639:src/display.c **** 	      if (res) *res++ = '-';
 1832              		.loc 1 1639 9 is_stmt 0 view .LVU576
 1833 0022 1B06     		lsls	r3, r3, #24
 1834 0024 04D4     		bmi	.L202
1643:src/display.c **** 	      *res++ = '\237';
 1835              		.loc 1 1643 6 is_stmt 1 view .LVU577
1643:src/display.c **** 	      *res++ = '\237';
 1836              		.loc 1 1643 9 is_stmt 0 view .LVU578
 1837 0026 B9B1     		cbz	r1, .L194
 1838              	.LVL179:
 1839              	.L193:
1644:src/display.c **** 	    else {
 1840              		.loc 1 1644 8 is_stmt 1 view .LVU579
1644:src/display.c **** 	    else {
 1841              		.loc 1 1644 15 is_stmt 0 view .LVU580
 1842 0028 9F23     		movs	r3, #159
 1843 002a 2370     		strb	r3, [r4]
1657:src/display.c **** 	  }
 1844              		.loc 1 1657 13 view .LVU581
 1845 002c 0120     		movs	r0, #1
ARM GAS  /tmp/ccwSk7O0.s 			page 104


1661:src/display.c **** 
 1846              		.loc 1 1661 7 view .LVU582
 1847 002e 38BD     		pop	{r3, r4, r5, pc}
 1848              	.LVL180:
 1849              	.L202:
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1850              		.loc 1 1640 8 is_stmt 1 view .LVU583
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1851              		.loc 1 1640 11 is_stmt 0 view .LVU584
 1852 0030 71B1     		cbz	r1, .L192
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1853              		.loc 1 1640 17 is_stmt 1 view .LVU585
 1854              	.LVL181:
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1855              		.loc 1 1640 24 is_stmt 0 view .LVU586
 1856 0032 2D23     		movs	r3, #45
 1857 0034 04F8013B 		strb	r3, [r4], #1
 1858              	.LVL182:
1643:src/display.c **** 	      *res++ = '\237';
 1859              		.loc 1 1643 6 is_stmt 1 view .LVU587
 1860 0038 F6E7     		b	.L193
 1861              	.LVL183:
 1862              	.L190:
 1863              	.LBB237:
 1864              	.LBB236:
1631:src/display.c **** #ifndef REALBUILD
 1865              		.loc 1 1631 8 view .LVU588
 1866 003a 1148     		ldr	r0, .L203+4
 1867 003c FFF7FEFF 		bl	set_digits_string
 1868              	.LVL184:
1633:src/display.c **** 	      forceDispPlot=0;
 1869              		.loc 1 1633 8 view .LVU589
 1870 0040 1049     		ldr	r1, .L203+8
 1871 0042 1148     		ldr	r0, .L203+12
 1872 0044 FFF7FEFF 		bl	scopy
 1873              	.LVL185:
1634:src/display.c **** #endif
 1874              		.loc 1 1634 8 view .LVU590
1634:src/display.c **** #endif
 1875              		.loc 1 1634 21 is_stmt 0 view .LVU591
 1876 0048 104B     		ldr	r3, .L203+16
 1877 004a 1C70     		strb	r4, [r3]
 1878 004c 0120     		movs	r0, #1
 1879              	.LBE236:
 1880              	.LBE237:
1661:src/display.c **** 
 1881              		.loc 1 1661 7 view .LVU592
 1882 004e 38BD     		pop	{r3, r4, r5, pc}
 1883              	.LVL186:
 1884              	.L192:
1641:src/display.c **** 	    }
 1885              		.loc 1 1641 13 is_stmt 1 view .LVU593
 1886 0050 2D21     		movs	r1, #45
 1887              	.LVL187:
1641:src/display.c **** 	    }
 1888              		.loc 1 1641 13 is_stmt 0 view .LVU594
 1889 0052 0920     		movs	r0, #9
ARM GAS  /tmp/ccwSk7O0.s 			page 105


 1890 0054 FFF7FEFF 		bl	set_dig
 1891              	.LVL188:
1643:src/display.c **** 	      *res++ = '\237';
 1892              		.loc 1 1643 6 is_stmt 1 view .LVU595
 1893              	.L194:
1646:src/display.c **** #ifndef REALBUILD
 1894              		.loc 1 1646 8 view .LVU596
 1895 0058 1221     		movs	r1, #18
 1896 005a 0D48     		ldr	r0, .L203+20
 1897 005c FFF7FEFF 		bl	set_digits_string
 1898              	.LVL189:
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1899              		.loc 1 1648 8 view .LVU597
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1900              		.loc 1 1648 11 is_stmt 0 view .LVU598
 1901 0060 95F90030 		ldrsb	r3, [r5]
1652:src/display.c **** 	      }
 1902              		.loc 1 1652 3 view .LVU599
 1903 0064 0848     		ldr	r0, .L203+12
1648:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1904              		.loc 1 1648 11 view .LVU600
 1905 0066 002B     		cmp	r3, #0
1649:src/display.c **** 	      }
 1906              		.loc 1 1649 3 is_stmt 1 view .LVU601
 1907 0068 B4BF     		ite	lt
 1908 006a 0A49     		ldrlt	r1, .L203+24
1652:src/display.c **** 	      }
 1909              		.loc 1 1652 3 view .LVU602
 1910 006c 0A49     		ldrge	r1, .L203+28
 1911 006e FFF7FEFF 		bl	scopy
 1912              	.LVL190:
1654:src/display.c **** #endif
 1913              		.loc 1 1654 8 view .LVU603
1654:src/display.c **** #endif
 1914              		.loc 1 1654 21 is_stmt 0 view .LVU604
 1915 0072 064B     		ldr	r3, .L203+16
 1916 0074 0022     		movs	r2, #0
 1917 0076 1A70     		strb	r2, [r3]
1657:src/display.c **** 	  }
 1918              		.loc 1 1657 13 view .LVU605
 1919 0078 0120     		movs	r0, #1
1661:src/display.c **** 
 1920              		.loc 1 1661 7 view .LVU606
 1921 007a 38BD     		pop	{r3, r4, r5, pc}
 1922              	.L204:
 1923              		.align	2
 1924              	.L203:
 1925 007c 00000000 		.word	.LC0
 1926 0080 00000000 		.word	.LANCHOR3
 1927 0084 00000000 		.word	.LANCHOR4
 1928 0088 00000000 		.word	LastDisplayedNumber
 1929 008c 00000000 		.word	forceDispPlot
 1930 0090 00000000 		.word	.LANCHOR5
 1931 0094 00000000 		.word	.LANCHOR6
 1932 0098 00000000 		.word	.LANCHOR7
 1933              		.cfi_endproc
 1934              	.LFE52:
ARM GAS  /tmp/ccwSk7O0.s 			page 106


 1936              		.section	.text.set_x_hms,"ax",%progbits
 1937              		.align	1
 1938              		.p2align 2,,3
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	set_x_hms:
 1945              	.LVL191:
 1946              	.LFB22:
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1947              		.loc 1 1706 62 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 200
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1707:src/display.c **** 	int j=0;
 1951              		.loc 1 1707 2 view .LVU608
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1952              		.loc 1 1708 2 view .LVU609
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1953              		.loc 1 1706 62 is_stmt 0 view .LVU610
 1954 0000 30B5     		push	{r4, r5, lr}
 1955              		.cfi_def_cfa_offset 12
 1956              		.cfi_offset 4, -12
 1957              		.cfi_offset 5, -8
 1958              		.cfi_offset 14, -4
 1959 0002 B5B0     		sub	sp, sp, #212
 1960              		.cfi_def_cfa_offset 224
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1961              		.loc 1 1706 62 view .LVU611
 1962 0004 0446     		mov	r4, r0
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1963              		.loc 1 1708 6 view .LVU612
 1964 0006 0023     		movs	r3, #0
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1965              		.loc 1 1712 6 view .LVU613
 1966 0008 0830     		adds	r0, r0, #8
 1967              	.LVL192:
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1968              		.loc 1 1706 62 view .LVU614
 1969 000a 0D46     		mov	r5, r1
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1970              		.loc 1 1708 6 view .LVU615
 1971 000c 0393     		str	r3, [sp, #12]
1709:src/display.c **** 	unsigned int hr, min, sec, fs;
 1972              		.loc 1 1709 2 is_stmt 1 view .LVU616
 1973              	.LVL193:
1710:src/display.c **** 
 1974              		.loc 1 1710 2 view .LVU617
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1975              		.loc 1 1712 2 view .LVU618
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1976              		.loc 1 1712 6 is_stmt 0 view .LVU619
 1977 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1978              	.LVL194:
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1979              		.loc 1 1712 5 view .LVU620
ARM GAS  /tmp/ccwSk7O0.s 			page 107


 1980 0012 48B1     		cbz	r0, .L206
1713:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1981              		.loc 1 1713 4 is_stmt 1 view .LVU621
1713:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1982              		.loc 1 1713 7 is_stmt 0 view .LVU622
 1983 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1984 0016 5B06     		lsls	r3, r3, #25
 1985 0018 04D5     		bpl	.L205
1714:src/display.c **** 	  return;
 1986              		.loc 1 1714 6 is_stmt 1 view .LVU623
 1987              	.LVL195:
 1988              	.LBB238:
 1989              	.LBI238:
 415:src/display.c ****   if (res) *res++ = ch;
 1990              		.loc 1 415 14 view .LVU624
 1991              	.LBB239:
 416:src/display.c ****   else	set_dig(base, ch);
 1992              		.loc 1 416 3 view .LVU625
 416:src/display.c ****   else	set_dig(base, ch);
 1993              		.loc 1 416 6 is_stmt 0 view .LVU626
 1994 001a 002D     		cmp	r5, #0
 1995 001c 00F0B580 		beq	.L209
 416:src/display.c ****   else	set_dig(base, ch);
 1996              		.loc 1 416 12 is_stmt 1 view .LVU627
 1997              	.LVL196:
 416:src/display.c ****   else	set_dig(base, ch);
 1998              		.loc 1 416 19 is_stmt 0 view .LVU628
 1999 0020 6F23     		movs	r3, #111
 2000 0022 2B70     		strb	r3, [r5]
 2001              	.LVL197:
 2002              	.L205:
 416:src/display.c ****   else	set_dig(base, ch);
 2003              		.loc 1 416 19 view .LVU629
 2004              	.LBE239:
 2005              	.LBE238:
1769:src/display.c **** 
 2006              		.loc 1 1769 7 view .LVU630
 2007 0024 35B0     		add	sp, sp, #212
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 0026 30BD     		pop	{r4, r5, pc}
 2012              	.LVL198:
 2013              	.L206:
 2014              		.cfi_restore_state
1718:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2015              		.loc 1 1718 2 is_stmt 1 view .LVU631
 2016 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2017              	.LVL199:
1719:src/display.c **** 	dn_abs(&a, rgx);
 2018              		.loc 1 1719 2 view .LVU632
 2019 002c 624A     		ldr	r2, .L236
 2020 002e 2146     		mov	r1, r4
 2021 0030 07A8     		add	r0, sp, #28
 2022 0032 FFF7FEFF 		bl	decNumberMod
 2023              	.LVL200:
1720:src/display.c **** 	if (decNumberIsNegative(&x)) {
ARM GAS  /tmp/ccwSk7O0.s 			page 108


 2024              		.loc 1 1720 2 view .LVU633
 2025 0036 2146     		mov	r1, r4
 2026 0038 19A8     		add	r0, sp, #100
 2027 003a FFF7FEFF 		bl	dn_abs
 2028              	.LVL201:
1721:src/display.c **** 	  if (res != NULL)
 2029              		.loc 1 1721 2 view .LVU634
1721:src/display.c **** 	  if (res != NULL)
 2030              		.loc 1 1721 5 is_stmt 0 view .LVU635
 2031 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2032 0042 002B     		cmp	r3, #0
 2033 0044 72DB     		blt	.L234
 2034              	.L210:
1729:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2035              		.loc 1 1729 2 is_stmt 1 view .LVU636
 2036 0046 07A9     		add	r1, sp, #28
 2037 0048 10A8     		add	r0, sp, #64
 2038 004a FFF7FEFF 		bl	decNumberHR2HMS
 2039              	.LVL202:
1730:src/display.c **** 	decNumberRound(&u, &t);
 2040              		.loc 1 1730 2 view .LVU637
 2041 004e 0622     		movs	r2, #6
 2042 0050 10A9     		add	r1, sp, #64
 2043 0052 22A8     		add	r0, sp, #136
 2044 0054 FFF7FEFF 		bl	dn_mulpow10
 2045              	.LVL203:
1731:src/display.c **** 
 2046              		.loc 1 1731 2 view .LVU638
 2047 0058 22A9     		add	r1, sp, #136
 2048 005a 2BA8     		add	r0, sp, #172
 2049 005c FFF7FEFF 		bl	decNumberRound
 2050              	.LVL204:
1733:src/display.c **** 	hms_step(&u, &t, &sec);
 2051              		.loc 1 1733 2 view .LVU639
 2052 0060 2BA9     		add	r1, sp, #172
 2053 0062 22A8     		add	r0, sp, #136
 2054 0064 06AA     		add	r2, sp, #24
 2055 0066 FFF7FEFF 		bl	hms_step
 2056              	.LVL205:
1734:src/display.c **** 	hms_step(&t, &u, &min);
 2057              		.loc 1 1734 2 view .LVU640
 2058 006a 22A9     		add	r1, sp, #136
 2059 006c 2BA8     		add	r0, sp, #172
 2060 006e 05AA     		add	r2, sp, #20
 2061 0070 FFF7FEFF 		bl	hms_step
 2062              	.LVL206:
1735:src/display.c **** 	hr = dn_to_int(&t);
 2063              		.loc 1 1735 2 view .LVU641
 2064 0074 04AA     		add	r2, sp, #16
 2065 0076 2BA9     		add	r1, sp, #172
 2066 0078 22A8     		add	r0, sp, #136
 2067 007a FFF7FEFF 		bl	hms_step
 2068              	.LVL207:
1736:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2069              		.loc 1 1736 2 view .LVU642
1736:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2070              		.loc 1 1736 7 is_stmt 0 view .LVU643
ARM GAS  /tmp/ccwSk7O0.s 			page 109


 2071 007e 22A8     		add	r0, sp, #136
 2072 0080 FFF7FEFF 		bl	dn_to_int
 2073              	.LVL208:
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2074              		.loc 1 1737 33 view .LVU644
 2075 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2076              		.loc 1 1737 5 view .LVU645
 2077 0088 3B2A     		cmp	r2, #59
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2078              		.loc 1 1737 19 is_stmt 1 view .LVU646
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2079              		.loc 1 1737 23 is_stmt 0 view .LVU647
 2080 008a 82BF     		ittt	hi
 2081 008c 3C3A     		subhi	r2, r2, #60
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2082              		.loc 1 1737 33 view .LVU648
 2083 008e 0133     		addhi	r3, r3, #1
 2084 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1738:src/display.c **** 
 2085              		.loc 1 1738 2 is_stmt 1 view .LVU649
1738:src/display.c **** 
 2086              		.loc 1 1738 5 is_stmt 0 view .LVU650
 2087 0094 3B2B     		cmp	r3, #59
 2088 0096 02D9     		bls	.L215
1738:src/display.c **** 
 2089              		.loc 1 1738 19 is_stmt 1 discriminator 1 view .LVU651
1738:src/display.c **** 
 2090              		.loc 1 1738 23 is_stmt 0 discriminator 1 view .LVU652
 2091 0098 3C3B     		subs	r3, r3, #60
 2092 009a 0493     		str	r3, [sp, #16]
1738:src/display.c **** 
 2093              		.loc 1 1738 30 is_stmt 1 discriminator 1 view .LVU653
1738:src/display.c **** 
 2094              		.loc 1 1738 32 is_stmt 0 discriminator 1 view .LVU654
 2095 009c 0130     		adds	r0, r0, #1
 2096              	.LVL209:
 2097              	.L215:
1741:src/display.c **** 	res = set_dig_s(j, '@', res);
 2098              		.loc 1 1741 2 is_stmt 1 view .LVU655
1741:src/display.c **** 	res = set_dig_s(j, '@', res);
 2099              		.loc 1 1741 8 is_stmt 0 view .LVU656
 2100 009e 0123     		movs	r3, #1
 2101 00a0 0093     		str	r3, [sp]
 2102 00a2 2946     		mov	r1, r5
 2103 00a4 03AA     		add	r2, sp, #12
 2104 00a6 0423     		movs	r3, #4
 2105 00a8 FFF7FEFF 		bl	hms_render
 2106              	.LVL210:
1742:src/display.c **** 	j += SEGS_PER_DIGIT;
 2107              		.loc 1 1742 2 is_stmt 1 view .LVU657
 2108              	.LBB241:
 2109              	.LBI241:
 415:src/display.c ****   if (res) *res++ = ch;
 2110              		.loc 1 415 14 view .LVU658
 2111              	.LBB242:
 416:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccwSk7O0.s 			page 110


 2112              		.loc 1 416 3 view .LVU659
 416:src/display.c ****   else	set_dig(base, ch);
 2113              		.loc 1 416 6 is_stmt 0 view .LVU660
 2114 00ac 0446     		mov	r4, r0
 2115              	.LVL211:
 416:src/display.c ****   else	set_dig(base, ch);
 2116              		.loc 1 416 6 view .LVU661
 2117 00ae 0028     		cmp	r0, #0
 2118 00b0 76D0     		beq	.L216
 416:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 416 12 is_stmt 1 view .LVU662
 416:src/display.c ****   else	set_dig(base, ch);
 2120              		.loc 1 416 16 is_stmt 0 view .LVU663
 2121 00b2 0146     		mov	r1, r0
 2122              	.LVL212:
 416:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 416 19 view .LVU664
 2124 00b4 4023     		movs	r3, #64
 2125 00b6 01F8013B 		strb	r3, [r1], #1
 2126              	.LVL213:
 2127              	.L217:
 418:src/display.c **** }
 2128              		.loc 1 418 3 is_stmt 1 view .LVU665
 418:src/display.c **** }
 2129              		.loc 1 418 3 is_stmt 0 view .LVU666
 2130              	.LBE242:
 2131              	.LBE241:
1743:src/display.c **** 
 2132              		.loc 1 1743 2 is_stmt 1 view .LVU667
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2133              		.loc 1 1746 8 is_stmt 0 view .LVU668
 2134 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2135 00be 0122     		movs	r2, #1
1743:src/display.c **** 
 2136              		.loc 1 1743 4 view .LVU669
 2137 00c0 03F10904 		add	r4, r3, #9
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2138              		.loc 1 1746 8 view .LVU670
 2139 00c4 0092     		str	r2, [sp]
 2140 00c6 0223     		movs	r3, #2
 2141 00c8 03AA     		add	r2, sp, #12
1743:src/display.c **** 
 2142              		.loc 1 1743 4 view .LVU671
 2143 00ca 0394     		str	r4, [sp, #12]
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2144              		.loc 1 1746 2 is_stmt 1 view .LVU672
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2145              		.loc 1 1746 8 is_stmt 0 view .LVU673
 2146 00cc FFF7FEFF 		bl	hms_render
 2147              	.LVL214:
1747:src/display.c **** 	j += SEGS_PER_DIGIT;
 2148              		.loc 1 1747 2 is_stmt 1 view .LVU674
 2149              	.LBB244:
 2150              	.LBI244:
 415:src/display.c ****   if (res) *res++ = ch;
 2151              		.loc 1 415 14 view .LVU675
 2152              	.LBB245:
ARM GAS  /tmp/ccwSk7O0.s 			page 111


 416:src/display.c ****   else	set_dig(base, ch);
 2153              		.loc 1 416 3 view .LVU676
 416:src/display.c ****   else	set_dig(base, ch);
 2154              		.loc 1 416 6 is_stmt 0 view .LVU677
 2155 00d0 0446     		mov	r4, r0
 2156 00d2 0028     		cmp	r0, #0
 2157 00d4 5ED0     		beq	.L218
 416:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 416 12 is_stmt 1 view .LVU678
 416:src/display.c ****   else	set_dig(base, ch);
 2159              		.loc 1 416 16 is_stmt 0 view .LVU679
 2160 00d6 0146     		mov	r1, r0
 2161              	.LVL215:
 416:src/display.c ****   else	set_dig(base, ch);
 2162              		.loc 1 416 19 view .LVU680
 2163 00d8 2723     		movs	r3, #39
 2164 00da 01F8013B 		strb	r3, [r1], #1
 2165              	.LVL216:
 2166              	.L219:
 418:src/display.c **** }
 2167              		.loc 1 418 3 is_stmt 1 view .LVU681
 418:src/display.c **** }
 2168              		.loc 1 418 3 is_stmt 0 view .LVU682
 2169              	.LBE245:
 2170              	.LBE244:
1748:src/display.c **** 
 2171              		.loc 1 1748 2 is_stmt 1 view .LVU683
1748:src/display.c **** 
 2172              		.loc 1 1748 4 is_stmt 0 view .LVU684
 2173 00de 039B     		ldr	r3, [sp, #12]
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2174              		.loc 1 1751 8 view .LVU685
 2175 00e0 0598     		ldr	r0, [sp, #20]
 2176 00e2 0122     		movs	r2, #1
1748:src/display.c **** 
 2177              		.loc 1 1748 4 view .LVU686
 2178 00e4 03F10904 		add	r4, r3, #9
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2179              		.loc 1 1751 8 view .LVU687
 2180 00e8 0092     		str	r2, [sp]
 2181 00ea 0223     		movs	r3, #2
 2182 00ec 03AA     		add	r2, sp, #12
1748:src/display.c **** 
 2183              		.loc 1 1748 4 view .LVU688
 2184 00ee 0394     		str	r4, [sp, #12]
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2185              		.loc 1 1751 2 is_stmt 1 view .LVU689
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2186              		.loc 1 1751 8 is_stmt 0 view .LVU690
 2187 00f0 FFF7FEFF 		bl	hms_render
 2188              	.LVL217:
1752:src/display.c **** 
 2189              		.loc 1 1752 8 view .LVU691
 2190 00f4 3149     		ldr	r1, .L236+4
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2191              		.loc 1 1751 8 view .LVU692
 2192 00f6 0246     		mov	r2, r0
ARM GAS  /tmp/ccwSk7O0.s 			page 112


 2193              	.LVL218:
1752:src/display.c **** 
 2194              		.loc 1 1752 2 is_stmt 1 view .LVU693
1752:src/display.c **** 
 2195              		.loc 1 1752 8 is_stmt 0 view .LVU694
 2196 00f8 0398     		ldr	r0, [sp, #12]
 2197              	.LVL219:
1752:src/display.c **** 
 2198              		.loc 1 1752 8 view .LVU695
 2199 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2200 00fc 0938     		subs	r0, r0, #9
 2201 00fe FFF7FEFF 		bl	set_decimal
 2202              	.LVL220:
1755:src/display.c **** 
 2203              		.loc 1 1755 8 view .LVU696
 2204 0102 0023     		movs	r3, #0
1752:src/display.c **** 
 2205              		.loc 1 1752 8 view .LVU697
 2206 0104 0146     		mov	r1, r0
 2207              	.LVL221:
1755:src/display.c **** 
 2208              		.loc 1 1755 2 is_stmt 1 view .LVU698
1755:src/display.c **** 
 2209              		.loc 1 1755 8 is_stmt 0 view .LVU699
 2210 0106 0093     		str	r3, [sp]
 2211 0108 0698     		ldr	r0, [sp, #24]
 2212              	.LVL222:
1755:src/display.c **** 
 2213              		.loc 1 1755 8 view .LVU700
 2214 010a 03AA     		add	r2, sp, #12
 2215 010c 0223     		movs	r3, #2
 2216 010e FFF7FEFF 		bl	hms_render
 2217              	.LVL223:
1758:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2218              		.loc 1 1758 2 is_stmt 1 view .LVU701
 2219              	.LBB247:
 2220              	.LBI247:
 415:src/display.c ****   if (res) *res++ = ch;
 2221              		.loc 1 415 14 view .LVU702
 2222              	.LBB248:
 416:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 416 3 view .LVU703
 416:src/display.c ****   else	set_dig(base, ch);
 2224              		.loc 1 416 6 is_stmt 0 view .LVU704
 2225 0112 0446     		mov	r4, r0
 2226 0114 78B3     		cbz	r0, .L220
 416:src/display.c ****   else	set_dig(base, ch);
 2227              		.loc 1 416 12 is_stmt 1 view .LVU705
 2228              	.LVL224:
 416:src/display.c ****   else	set_dig(base, ch);
 2229              		.loc 1 416 19 is_stmt 0 view .LVU706
 2230 0116 2223     		movs	r3, #34
 2231 0118 0370     		strb	r3, [r0]
 2232              	.LVL225:
 418:src/display.c **** }
 2233              		.loc 1 418 3 is_stmt 1 view .LVU707
 418:src/display.c **** }
ARM GAS  /tmp/ccwSk7O0.s 			page 113


 2234              		.loc 1 418 3 is_stmt 0 view .LVU708
 2235              	.LBE248:
 2236              	.LBE247:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2237              		.loc 1 1762 2 is_stmt 1 view .LVU709
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2238              		.loc 1 1762 6 is_stmt 0 view .LVU710
 2239 011a 2749     		ldr	r1, .L236
 2240 011c 19A8     		add	r0, sp, #100
 2241              	.LVL226:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2242              		.loc 1 1762 6 view .LVU711
 2243 011e FFF7FEFF 		bl	dn_lt
 2244              	.LVL227:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2245              		.loc 1 1762 5 view .LVU712
 2246 0122 78B9     		cbnz	r0, .L235
1763:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2247              		.loc 1 1763 4 is_stmt 1 view .LVU713
 2248              	.LVL228:
 2249              	.LBB251:
 2250              	.LBI251:
 415:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 415 14 view .LVU714
 2252              	.LBB252:
 416:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 416 3 view .LVU715
 416:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 416 12 view .LVU716
 416:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 416 19 is_stmt 0 view .LVU717
 2256 0124 6F23     		movs	r3, #111
 2257 0126 6370     		strb	r3, [r4, #1]
 2258              	.LBE252:
 2259              	.LBE251:
1769:src/display.c **** 
 2260              		.loc 1 1769 7 view .LVU718
 2261 0128 35B0     		add	sp, sp, #212
 2262              		.cfi_remember_state
 2263              		.cfi_def_cfa_offset 12
 2264              		@ sp needed
 2265 012a 30BD     		pop	{r4, r5, pc}
 2266              	.LVL229:
 2267              	.L234:
 2268              		.cfi_restore_state
1722:src/display.c **** 	    *res++ += '-';
 2269              		.loc 1 1722 4 is_stmt 1 view .LVU719
1722:src/display.c **** 	    *res++ += '-';
 2270              		.loc 1 1722 7 is_stmt 0 view .LVU720
 2271 012c E5B1     		cbz	r5, .L211
1723:src/display.c **** 	  else
 2272              		.loc 1 1723 6 is_stmt 1 view .LVU721
1723:src/display.c **** 	  else
 2273              		.loc 1 1723 10 is_stmt 0 view .LVU722
 2274 012e 2B46     		mov	r3, r5
 2275              	.LVL230:
1723:src/display.c **** 	  else
ARM GAS  /tmp/ccwSk7O0.s 			page 114


 2276              		.loc 1 1723 13 view .LVU723
 2277 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2278              	.LVL231:
1723:src/display.c **** 	  else
 2279              		.loc 1 1723 13 view .LVU724
 2280 0134 2D32     		adds	r2, r2, #45
 2281 0136 2A70     		strb	r2, [r5]
1723:src/display.c **** 	  else
 2282              		.loc 1 1723 10 view .LVU725
 2283 0138 1D46     		mov	r5, r3
 2284              	.LVL232:
 2285              	.L212:
1726:src/display.c **** 	}
 2286              		.loc 1 1726 4 is_stmt 1 view .LVU726
 2287 013a 07A9     		add	r1, sp, #28
 2288 013c 0846     		mov	r0, r1
 2289 013e FFF7FEFF 		bl	dn_minus
 2290              	.LVL233:
 2291 0142 80E7     		b	.L210
 2292              	.LVL234:
 2293              	.L235:
 2294              	.LBB253:
 2295              	.LBB249:
 416:src/display.c ****   else	set_dig(base, ch);
 2296              		.loc 1 416 16 is_stmt 0 view .LVU727
 2297 0144 0134     		adds	r4, r4, #1
 2298              	.LVL235:
 2299              	.L223:
 416:src/display.c ****   else	set_dig(base, ch);
 2300              		.loc 1 416 16 view .LVU728
 2301              	.LBE249:
 2302              	.LBE253:
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2303              		.loc 1 1764 9 is_stmt 1 view .LVU729
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2304              		.loc 1 1764 15 is_stmt 0 view .LVU730
 2305 0146 19A8     		add	r0, sp, #100
 2306 0148 FFF7FEFF 		bl	dn_eq0
 2307              	.LVL236:
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2308              		.loc 1 1764 12 view .LVU731
 2309 014c 0028     		cmp	r0, #0
 2310 014e 7FF469AF 		bne	.L205
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2311              		.loc 1 1765 4 is_stmt 1 view .LVU732
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2312              		.loc 1 1765 8 is_stmt 0 view .LVU733
 2313 0152 1B48     		ldr	r0, .L236+8
 2314 0154 19A9     		add	r1, sp, #100
 2315 0156 FFF7FEFF 		bl	dn_lt
 2316              	.LVL237:
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2317              		.loc 1 1765 7 view .LVU734
 2318 015a 0028     		cmp	r0, #0
 2319 015c 7FF462AF 		bne	.L205
1766:src/display.c **** 	  }
 2320              		.loc 1 1766 6 is_stmt 1 view .LVU735
ARM GAS  /tmp/ccwSk7O0.s 			page 115


 2321              	.LVL238:
 2322              	.LBB254:
 2323              	.LBI254:
 415:src/display.c ****   if (res) *res++ = ch;
 2324              		.loc 1 415 14 view .LVU736
 2325              	.LBB255:
 416:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 416 3 view .LVU737
 416:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 416 6 is_stmt 0 view .LVU738
 2328 0160 24B3     		cbz	r4, .L225
 416:src/display.c ****   else	set_dig(base, ch);
 2329              		.loc 1 416 12 is_stmt 1 view .LVU739
 2330              	.LVL239:
 416:src/display.c ****   else	set_dig(base, ch);
 2331              		.loc 1 416 19 is_stmt 0 view .LVU740
 2332 0162 7523     		movs	r3, #117
 2333 0164 2370     		strb	r3, [r4]
 2334 0166 5DE7     		b	.L205
 2335              	.LVL240:
 2336              	.L211:
 416:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 416 19 view .LVU741
 2338              	.LBE255:
 2339              	.LBE254:
1725:src/display.c **** 	  dn_minus(&x, &x);
 2340              		.loc 1 1725 6 is_stmt 1 view .LVU742
 2341              	.LBB257:
 2342              	.LBI257:
 304:src/display.c **** {
 2343              		.loc 1 304 13 view .LVU743
 2344              	.LBB258:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2345              		.loc 1 306 3 view .LVU744
 306:src/display.c ****   set_dot(MANT_SIGN);
 2346              		.loc 1 306 25 is_stmt 0 view .LVU745
 2347 0168 164B     		ldr	r3, .L236+12
 2348 016a 2D22     		movs	r2, #45
 307:src/display.c **** }
 2349              		.loc 1 307 3 view .LVU746
 2350 016c 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2351              		.loc 1 306 25 view .LVU747
 2352 016e 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2353              		.loc 1 307 3 is_stmt 1 view .LVU748
 2354 0170 FFF7FEFF 		bl	set_dot
 2355              	.LVL241:
 308:src/display.c **** 
 2356              		.loc 1 308 1 is_stmt 0 view .LVU749
 2357 0174 E1E7     		b	.L212
 2358              	.LVL242:
 2359              	.L220:
 308:src/display.c **** 
 2360              		.loc 1 308 1 view .LVU750
 2361              	.LBE258:
 2362              	.LBE257:
ARM GAS  /tmp/ccwSk7O0.s 			page 116


 2363              	.LBB259:
 2364              	.LBB250:
 417:src/display.c ****   return res;
 2365              		.loc 1 417 8 is_stmt 1 view .LVU751
 2366 0176 0398     		ldr	r0, [sp, #12]
 2367              	.LVL243:
 417:src/display.c ****   return res;
 2368              		.loc 1 417 8 is_stmt 0 view .LVU752
 2369 0178 2221     		movs	r1, #34
 2370 017a FFF7FEFF 		bl	set_dig
 2371              	.LVL244:
 418:src/display.c **** }
 2372              		.loc 1 418 3 is_stmt 1 view .LVU753
 418:src/display.c **** }
 2373              		.loc 1 418 3 is_stmt 0 view .LVU754
 2374              	.LBE250:
 2375              	.LBE259:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2376              		.loc 1 1762 2 is_stmt 1 view .LVU755
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2377              		.loc 1 1762 6 is_stmt 0 view .LVU756
 2378 017e 0E49     		ldr	r1, .L236
 2379 0180 19A8     		add	r0, sp, #100
 2380 0182 FFF7FEFF 		bl	dn_lt
 2381              	.LVL245:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2382              		.loc 1 1762 5 view .LVU757
 2383 0186 0028     		cmp	r0, #0
 2384 0188 DDD1     		bne	.L223
 2385              	.LVL246:
 2386              	.L209:
 2387              	.LBB260:
 2388              	.LBB240:
 417:src/display.c ****   return res;
 2389              		.loc 1 417 8 is_stmt 1 view .LVU758
 2390 018a 6F21     		movs	r1, #111
 2391 018c 7A20     		movs	r0, #122
 2392 018e FFF7FEFF 		bl	set_dig
 2393              	.LVL247:
 2394              	.LBE240:
 2395              	.LBE260:
1715:src/display.c **** 	}
 2396              		.loc 1 1715 4 view .LVU759
 2397 0192 47E7     		b	.L205
 2398              	.LVL248:
 2399              	.L218:
 2400              	.LBB261:
 2401              	.LBB246:
 417:src/display.c ****   return res;
 2402              		.loc 1 417 8 view .LVU760
 2403 0194 2721     		movs	r1, #39
 2404 0196 0398     		ldr	r0, [sp, #12]
 2405              	.LVL249:
 417:src/display.c ****   return res;
 2406              		.loc 1 417 8 is_stmt 0 view .LVU761
 2407 0198 FFF7FEFF 		bl	set_dig
 2408              	.LVL250:
ARM GAS  /tmp/ccwSk7O0.s 			page 117


 417:src/display.c ****   return res;
 2409              		.loc 1 417 8 view .LVU762
 2410 019c 2146     		mov	r1, r4
 2411 019e 9EE7     		b	.L219
 2412              	.LVL251:
 2413              	.L216:
 417:src/display.c ****   return res;
 2414              		.loc 1 417 8 view .LVU763
 2415              	.LBE246:
 2416              	.LBE261:
 2417              	.LBB262:
 2418              	.LBB243:
 417:src/display.c ****   return res;
 2419              		.loc 1 417 8 is_stmt 1 view .LVU764
 2420 01a0 4021     		movs	r1, #64
 2421 01a2 0398     		ldr	r0, [sp, #12]
 2422              	.LVL252:
 417:src/display.c ****   return res;
 2423              		.loc 1 417 8 is_stmt 0 view .LVU765
 2424 01a4 FFF7FEFF 		bl	set_dig
 2425              	.LVL253:
 417:src/display.c ****   return res;
 2426              		.loc 1 417 8 view .LVU766
 2427 01a8 2146     		mov	r1, r4
 2428 01aa 86E7     		b	.L217
 2429              	.LVL254:
 2430              	.L225:
 417:src/display.c ****   return res;
 2431              		.loc 1 417 8 view .LVU767
 2432              	.LBE243:
 2433              	.LBE262:
 2434              	.LBB263:
 2435              	.LBB256:
 417:src/display.c ****   return res;
 2436              		.loc 1 417 8 is_stmt 1 view .LVU768
 2437 01ac 7521     		movs	r1, #117
 2438 01ae 7A20     		movs	r0, #122
 2439 01b0 FFF7FEFF 		bl	set_dig
 2440              	.LVL255:
 2441 01b4 36E7     		b	.L205
 2442              	.L237:
 2443 01b6 00BF     		.align	2
 2444              	.L236:
 2445 01b8 00000000 		.word	const_9000
 2446 01bc 00000000 		.word	.LANCHOR1
 2447 01c0 00000000 		.word	const_hms_threshold
 2448 01c4 00000000 		.word	LastDisplayedNumber
 2449              	.LBE256:
 2450              	.LBE263:
 2451              		.cfi_endproc
 2452              	.LFE22:
 2454              		.section	.text.set_x_fract,"ax",%progbits
 2455              		.align	1
 2456              		.p2align 2,,3
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
ARM GAS  /tmp/ccwSk7O0.s 			page 118


 2460              		.fpu fpv4-sp-d16
 2462              	set_x_fract:
 2463              	.LVL256:
 2464              	.LFB23:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2465              		.loc 1 1772 63 view -0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 216
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
1773:src/display.c **** 	char buf[32], *p = buf;
 2469              		.loc 1 1773 2 view .LVU770
1774:src/display.c **** 	int j;
 2470              		.loc 1 1774 2 view .LVU771
1775:src/display.c **** 
 2471              		.loc 1 1775 2 view .LVU772
1777:src/display.c **** 	  return 1;
 2472              		.loc 1 1777 2 view .LVU773
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2473              		.loc 1 1772 63 is_stmt 0 view .LVU774
 2474 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2475              		.cfi_def_cfa_offset 20
 2476              		.cfi_offset 4, -20
 2477              		.cfi_offset 5, -16
 2478              		.cfi_offset 6, -12
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 0646     		mov	r6, r0
 2482 0004 B7B0     		sub	sp, sp, #220
 2483              		.cfi_def_cfa_offset 240
1777:src/display.c **** 	  return 1;
 2484              		.loc 1 1777 6 view .LVU775
 2485 0006 0830     		adds	r0, r0, #8
 2486              	.LVL257:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2487              		.loc 1 1772 63 view .LVU776
 2488 0008 0C46     		mov	r4, r1
1777:src/display.c **** 	  return 1;
 2489              		.loc 1 1777 6 view .LVU777
 2490 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2491              	.LVL258:
1777:src/display.c **** 	  return 1;
 2492              		.loc 1 1777 5 view .LVU778
 2493 000e 18B1     		cbz	r0, .L269
 2494              	.LVL259:
 2495              	.L258:
1778:src/display.c **** 	dn_abs(&x, rgx);
 2496              		.loc 1 1778 11 view .LVU779
 2497 0010 0125     		movs	r5, #1
 2498              	.L238:
1835:src/display.c **** 
 2499              		.loc 1 1835 7 view .LVU780
 2500 0012 2846     		mov	r0, r5
 2501 0014 37B0     		add	sp, sp, #220
 2502              		.cfi_remember_state
 2503              		.cfi_def_cfa_offset 20
 2504              		@ sp needed
 2505 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccwSk7O0.s 			page 119


 2506              	.LVL260:
 2507              	.L269:
 2508              		.cfi_restore_state
 2509              	.LBB272:
 2510              	.LBI272:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2511              		.loc 1 1772 18 is_stmt 1 view .LVU781
 2512              	.LBB273:
1779:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2513              		.loc 1 1779 2 view .LVU782
 2514 0018 3146     		mov	r1, r6
 2515 001a 0546     		mov	r5, r0
 2516 001c 09A8     		add	r0, sp, #36
 2517 001e FFF7FEFF 		bl	dn_abs
 2518              	.LVL261:
1780:src/display.c **** 	  return 0;
 2519              		.loc 1 1780 2 view .LVU783
1780:src/display.c **** 	  return 0;
 2520              		.loc 1 1780 6 is_stmt 0 view .LVU784
 2521 0022 5D49     		ldr	r1, .L274
 2522 0024 09A8     		add	r0, sp, #36
 2523 0026 FFF7FEFF 		bl	dn_lt
 2524              	.LVL262:
1780:src/display.c **** 	  return 0;
 2525              		.loc 1 1780 5 view .LVU785
 2526 002a 0028     		cmp	r0, #0
 2527 002c F1D0     		beq	.L238
1782:src/display.c **** 	  return 0;
 2528              		.loc 1 1782 2 is_stmt 1 view .LVU786
1782:src/display.c **** 	  return 0;
 2529              		.loc 1 1782 6 is_stmt 0 view .LVU787
 2530 002e 5B49     		ldr	r1, .L274+4
 2531 0030 09A8     		add	r0, sp, #36
 2532 0032 FFF7FEFF 		bl	dn_lt
 2533              	.LVL263:
1782:src/display.c **** 	  return 0;
 2534              		.loc 1 1782 5 view .LVU788
 2535 0036 0746     		mov	r7, r0
 2536 0038 0028     		cmp	r0, #0
 2537 003a EAD1     		bne	.L238
1784:src/display.c **** 	  if (res != NULL)
 2538              		.loc 1 1784 2 is_stmt 1 view .LVU789
1784:src/display.c **** 	  if (res != NULL)
 2539              		.loc 1 1784 5 is_stmt 0 view .LVU790
 2540 003c 96F90830 		ldrsb	r3, [r6, #8]
 2541 0040 002B     		cmp	r3, #0
 2542 0042 C0F28680 		blt	.L270
 2543              	.LVL264:
 2544              	.L243:
1790:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2545              		.loc 1 1790 2 is_stmt 1 view .LVU791
 2546 0046 09A9     		add	r1, sp, #36
 2547 0048 12A8     		add	r0, sp, #72
 2548 004a FFF7FEFF 		bl	decNumberFrac
 2549              	.LVL265:
1791:src/display.c **** 
 2550              		.loc 1 1791 2 view .LVU792
ARM GAS  /tmp/ccwSk7O0.s 			page 120


 2551 004e 12AA     		add	r2, sp, #72
 2552 0050 24A9     		add	r1, sp, #144
 2553 0052 1BA8     		add	r0, sp, #108
 2554 0054 FFF7FEFF 		bl	decNumber2Fraction
 2555              	.LVL266:
1793:src/display.c **** 	dn_compare(&t, &t, &w);
 2556              		.loc 1 1793 2 view .LVU793
 2557 0058 24AA     		add	r2, sp, #144
 2558 005a 1BA9     		add	r1, sp, #108
 2559 005c 2DA8     		add	r0, sp, #180
 2560 005e FFF7FEFF 		bl	dn_divide
 2561              	.LVL267:
1794:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2562              		.loc 1 1794 2 view .LVU794
 2563 0062 2DA9     		add	r1, sp, #180
 2564 0064 12AA     		add	r2, sp, #72
 2565 0066 0846     		mov	r0, r1
 2566 0068 FFF7FEFF 		bl	dn_compare
 2567              	.LVL268:
1795:src/display.c **** 
 2568              		.loc 1 1795 2 view .LVU795
 2569 006c 09A9     		add	r1, sp, #36
 2570 006e 12A8     		add	r0, sp, #72
 2571 0070 FFF7FEFF 		bl	decNumberTrunc
 2572              	.LVL269:
1797:src/display.c **** 	  dn_inc(&w);
 2573              		.loc 1 1797 2 view .LVU796
1797:src/display.c **** 	  dn_inc(&w);
 2574              		.loc 1 1797 6 is_stmt 0 view .LVU797
 2575 0074 24A9     		add	r1, sp, #144
 2576 0076 1BA8     		add	r0, sp, #108
 2577 0078 FFF7FEFF 		bl	dn_eq
 2578              	.LVL270:
1797:src/display.c **** 	  dn_inc(&w);
 2579              		.loc 1 1797 5 view .LVU798
 2580 007c 0028     		cmp	r0, #0
 2581 007e 70D1     		bne	.L271
 2582              	.L245:
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2583              		.loc 1 1802 2 is_stmt 1 view .LVU799
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2584              		.loc 1 1802 6 is_stmt 0 view .LVU800
 2585 0080 474B     		ldr	r3, .L274+8
 2586 0082 1B68     		ldr	r3, [r3]
 2587 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2588              		.loc 1 1802 5 view .LVU801
 2589 0088 DB06     		lsls	r3, r3, #27
 2590 008a 55D4     		bmi	.L246
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2591              		.loc 1 1803 4 is_stmt 1 view .LVU802
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2592              		.loc 1 1803 9 is_stmt 0 view .LVU803
 2593 008c 12A8     		add	r0, sp, #72
 2594 008e FFF7FEFF 		bl	dn_eq0
 2595              	.LVL271:
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
ARM GAS  /tmp/ccwSk7O0.s 			page 121


 2596              		.loc 1 1803 7 view .LVU804
 2597 0092 0028     		cmp	r0, #0
 2598 0094 6CD0     		beq	.L272
1774:src/display.c **** 	int j;
 2599              		.loc 1 1774 17 view .LVU805
 2600 0096 01AE     		add	r6, sp, #4
 2601              	.LVL272:
1774:src/display.c **** 	int j;
 2602              		.loc 1 1774 17 view .LVU806
 2603 0098 3546     		mov	r5, r6
 2604              	.L247:
 2605              	.LVL273:
1811:src/display.c **** 	*p++ = '/';
 2606              		.loc 1 1811 2 is_stmt 1 view .LVU807
1811:src/display.c **** 	*p++ = '/';
 2607              		.loc 1 1811 17 is_stmt 0 view .LVU808
 2608 009a 1BA8     		add	r0, sp, #108
 2609 009c FFF7FEFF 		bl	dn_to_int
 2610              	.LVL274:
 2611 00a0 0146     		mov	r1, r0
1811:src/display.c **** 	*p++ = '/';
 2612              		.loc 1 1811 6 view .LVU809
 2613 00a2 2846     		mov	r0, r5
 2614 00a4 FFF7FEFF 		bl	num_arg
 2615              	.LVL275:
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2616              		.loc 1 1812 2 is_stmt 1 view .LVU810
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2617              		.loc 1 1812 4 is_stmt 0 view .LVU811
 2618 00a8 0546     		mov	r5, r0
 2619              	.LVL276:
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2620              		.loc 1 1812 7 view .LVU812
 2621 00aa 2F23     		movs	r3, #47
 2622 00ac 05F8013B 		strb	r3, [r5], #1
 2623              	.LVL277:
1813:src/display.c **** 	*p = '\0';
 2624              		.loc 1 1813 2 is_stmt 1 view .LVU813
1813:src/display.c **** 	*p = '\0';
 2625              		.loc 1 1813 17 is_stmt 0 view .LVU814
 2626 00b0 24A8     		add	r0, sp, #144
 2627 00b2 FFF7FEFF 		bl	dn_to_int
 2628              	.LVL278:
 2629 00b6 0146     		mov	r1, r0
1813:src/display.c **** 	*p = '\0';
 2630              		.loc 1 1813 6 view .LVU815
 2631 00b8 2846     		mov	r0, r5
 2632 00ba FFF7FEFF 		bl	num_arg
 2633              	.LVL279:
1814:src/display.c **** 	if ((p - 12) > buf) {
 2634              		.loc 1 1814 2 is_stmt 1 view .LVU816
1814:src/display.c **** 	if ((p - 12) > buf) {
 2635              		.loc 1 1814 5 is_stmt 0 view .LVU817
 2636 00be 0546     		mov	r5, r0
 2637 00c0 0023     		movs	r3, #0
 2638 00c2 05F80C39 		strb	r3, [r5], #-12
1815:src/display.c **** 	  p -= 12;
ARM GAS  /tmp/ccwSk7O0.s 			page 122


 2639              		.loc 1 1815 2 is_stmt 1 view .LVU818
1815:src/display.c **** 	  p -= 12;
 2640              		.loc 1 1815 5 is_stmt 0 view .LVU819
 2641 00c6 B542     		cmp	r5, r6
 2642 00c8 32D8     		bhi	.L248
 2643 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2644              	.LVL280:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2645              		.loc 1 1819 12 is_stmt 1 view .LVU820
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2646              		.loc 1 1819 2 is_stmt 0 view .LVU821
 2647 00ce 51B1     		cbz	r1, .L250
1818:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2648              		.loc 1 1818 11 view .LVU822
 2649 00d0 3546     		mov	r5, r6
 2650              	.LVL281:
 2651              	.L253:
1820:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2652              		.loc 1 1820 4 is_stmt 1 view .LVU823
 2653              	.LBB274:
 2654              	.LBI274:
 415:src/display.c ****   if (res) *res++ = ch;
 2655              		.loc 1 415 14 view .LVU824
 2656              	.LBB275:
 416:src/display.c ****   else	set_dig(base, ch);
 2657              		.loc 1 416 3 view .LVU825
 416:src/display.c ****   else	set_dig(base, ch);
 2658              		.loc 1 416 12 view .LVU826
 416:src/display.c ****   else	set_dig(base, ch);
 2659              		.loc 1 416 16 is_stmt 0 view .LVU827
 2660 00d2 2346     		mov	r3, r4
 2661              	.LVL282:
 416:src/display.c ****   else	set_dig(base, ch);
 2662              		.loc 1 416 6 view .LVU828
 2663 00d4 34B3     		cbz	r4, .L251
 2664              	.LVL283:
 416:src/display.c ****   else	set_dig(base, ch);
 2665              		.loc 1 416 19 view .LVU829
 2666 00d6 03F8011B 		strb	r1, [r3], #1
 2667              	.LVL284:
 416:src/display.c ****   else	set_dig(base, ch);
 2668              		.loc 1 416 16 view .LVU830
 2669 00da 1C46     		mov	r4, r3
 2670              	.LVL285:
 2671              	.L252:
 418:src/display.c **** }
 2672              		.loc 1 418 3 is_stmt 1 view .LVU831
 418:src/display.c **** }
 2673              		.loc 1 418 3 is_stmt 0 view .LVU832
 2674              	.LBE275:
 2675              	.LBE274:
1821:src/display.c **** 	}
 2676              		.loc 1 1821 4 is_stmt 1 view .LVU833
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2677              		.loc 1 1819 12 is_stmt 0 view .LVU834
 2678 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2679              	.LVL286:
ARM GAS  /tmp/ccwSk7O0.s 			page 123


1821:src/display.c **** 	}
 2680              		.loc 1 1821 6 view .LVU835
 2681 00e0 0937     		adds	r7, r7, #9
 2682              	.LVL287:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2683              		.loc 1 1819 24 is_stmt 1 view .LVU836
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2684              		.loc 1 1819 12 view .LVU837
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2685              		.loc 1 1819 2 is_stmt 0 view .LVU838
 2686 00e2 0029     		cmp	r1, #0
 2687 00e4 F5D1     		bne	.L253
 2688              	.LVL288:
 2689              	.L250:
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2690              		.loc 1 1824 2 is_stmt 1 view .LVU839
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2691              		.loc 1 1824 6 is_stmt 0 view .LVU840
 2692 00e6 2DA8     		add	r0, sp, #180
 2693 00e8 FFF7FEFF 		bl	dn_eq0
 2694              	.LVL289:
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2695              		.loc 1 1824 5 view .LVU841
 2696 00ec F0B9     		cbnz	r0, .L261
1826:src/display.c **** 	  p = (char *)S7_fract_LT;
 2697              		.loc 1 1826 7 is_stmt 1 view .LVU842
1826:src/display.c **** 	  p = (char *)S7_fract_LT;
 2698              		.loc 1 1826 10 is_stmt 0 view .LVU843
 2699 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1829:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2700              		.loc 1 1829 6 view .LVU844
 2701 00f2 2C4D     		ldr	r5, .L274+12
 2702 00f4 2C4B     		ldr	r3, .L274+16
 2703 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2704 00fa 38BF     		it	cc
 2705 00fc 1D46     		movcc	r5, r3
 2706              	.L254:
 2707              	.LVL290:
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2708              		.loc 1 1830 26 is_stmt 1 view .LVU845
 2709              	.LBB278:
 2710              	.LBB276:
 416:src/display.c ****   else	set_dig(base, ch);
 2711              		.loc 1 416 16 is_stmt 0 view .LVU846
 2712 00fe 6C26     		movs	r6, #108
 2713 0100 2021     		movs	r1, #32
 2714 0102 08E0     		b	.L257
 2715              	.LVL291:
 2716              	.L273:
 416:src/display.c ****   else	set_dig(base, ch);
 2717              		.loc 1 416 16 view .LVU847
 2718              	.LBE276:
 2719              	.LBE278:
 2720              	.LBB279:
 2721              	.LBB280:
 416:src/display.c ****   else	set_dig(base, ch);
 2722              		.loc 1 416 19 view .LVU848
ARM GAS  /tmp/ccwSk7O0.s 			page 124


 2723 0104 03F8011B 		strb	r1, [r3], #1
 2724              	.LVL292:
 416:src/display.c ****   else	set_dig(base, ch);
 2725              		.loc 1 416 16 view .LVU849
 2726 0108 1C46     		mov	r4, r3
 2727              	.LVL293:
 2728              	.L256:
 418:src/display.c **** }
 2729              		.loc 1 418 3 is_stmt 1 view .LVU850
 418:src/display.c **** }
 2730              		.loc 1 418 3 is_stmt 0 view .LVU851
 2731              	.LBE280:
 2732              	.LBE279:
1832:src/display.c **** 	}
 2733              		.loc 1 1832 4 is_stmt 1 view .LVU852
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2734              		.loc 1 1830 26 is_stmt 0 view .LVU853
 2735 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2736              	.LVL294:
1832:src/display.c **** 	}
 2737              		.loc 1 1832 6 view .LVU854
 2738 010e 0736     		adds	r6, r6, #7
 2739              	.LVL295:
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2740              		.loc 1 1830 38 is_stmt 1 view .LVU855
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2741              		.loc 1 1830 26 view .LVU856
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2742              		.loc 1 1830 2 is_stmt 0 view .LVU857
 2743 0110 0029     		cmp	r1, #0
 2744 0112 3FF47DAF 		beq	.L258
 2745              	.LVL296:
 2746              	.L257:
1831:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2747              		.loc 1 1831 4 is_stmt 1 view .LVU858
 2748              	.LBB282:
 2749              	.LBI279:
 415:src/display.c ****   if (res) *res++ = ch;
 2750              		.loc 1 415 14 view .LVU859
 2751              	.LBB281:
 416:src/display.c ****   else	set_dig(base, ch);
 2752              		.loc 1 416 3 view .LVU860
 416:src/display.c ****   else	set_dig(base, ch);
 2753              		.loc 1 416 12 view .LVU861
 416:src/display.c ****   else	set_dig(base, ch);
 2754              		.loc 1 416 16 is_stmt 0 view .LVU862
 2755 0116 2346     		mov	r3, r4
 2756              	.LVL297:
 416:src/display.c ****   else	set_dig(base, ch);
 2757              		.loc 1 416 6 view .LVU863
 2758 0118 002C     		cmp	r4, #0
 2759 011a F3D1     		bne	.L273
 2760              	.LVL298:
 417:src/display.c ****   return res;
 2761              		.loc 1 417 8 is_stmt 1 view .LVU864
 2762 011c 3046     		mov	r0, r6
 2763 011e FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccwSk7O0.s 			page 125


 2764              	.LVL299:
 417:src/display.c ****   return res;
 2765              		.loc 1 417 8 is_stmt 0 view .LVU865
 2766 0122 F2E7     		b	.L256
 2767              	.LVL300:
 2768              	.L251:
 417:src/display.c ****   return res;
 2769              		.loc 1 417 8 view .LVU866
 2770              	.LBE281:
 2771              	.LBE282:
 2772              	.LBB283:
 2773              	.LBB277:
 417:src/display.c ****   return res;
 2774              		.loc 1 417 8 is_stmt 1 view .LVU867
 2775 0124 3846     		mov	r0, r7
 2776 0126 FFF7FEFF 		bl	set_dig
 2777              	.LVL301:
 417:src/display.c ****   return res;
 2778              		.loc 1 417 8 is_stmt 0 view .LVU868
 2779 012a D7E7     		b	.L252
 2780              	.LVL302:
 2781              	.L261:
 417:src/display.c ****   return res;
 2782              		.loc 1 417 8 view .LVU869
 2783              	.LBE277:
 2784              	.LBE283:
1825:src/display.c **** 	else if (decNumberIsNegative(&t))
 2785              		.loc 1 1825 6 view .LVU870
 2786 012c 1F4D     		ldr	r5, .L274+20
 2787 012e E6E7     		b	.L254
 2788              	.LVL303:
 2789              	.L248:
1816:src/display.c **** 	  *p = '<';
 2790              		.loc 1 1816 4 is_stmt 1 view .LVU871
1817:src/display.c **** 	} else	p = buf;
 2791              		.loc 1 1817 4 view .LVU872
1817:src/display.c **** 	} else	p = buf;
 2792              		.loc 1 1817 7 is_stmt 0 view .LVU873
 2793 0130 3C21     		movs	r1, #60
 2794 0132 00F80C1C 		strb	r1, [r0, #-12]
 2795              	.LVL304:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1819 12 is_stmt 1 view .LVU874
 2797 0136 CCE7     		b	.L253
 2798              	.LVL305:
 2799              	.L246:
1808:src/display.c **** 	  dn_add(&n, &n, &x);
 2800              		.loc 1 1808 4 view .LVU875
 2801 0138 12A9     		add	r1, sp, #72
 2802 013a 24AA     		add	r2, sp, #144
 2803 013c 09A8     		add	r0, sp, #36
 2804 013e FFF7FEFF 		bl	dn_multiply
 2805              	.LVL306:
1809:src/display.c **** 	}
 2806              		.loc 1 1809 4 view .LVU876
 2807 0142 1BA9     		add	r1, sp, #108
 2808 0144 09AA     		add	r2, sp, #36
ARM GAS  /tmp/ccwSk7O0.s 			page 126


 2809 0146 0846     		mov	r0, r1
1774:src/display.c **** 	int j;
 2810              		.loc 1 1774 17 is_stmt 0 view .LVU877
 2811 0148 01AE     		add	r6, sp, #4
 2812              	.LVL307:
1809:src/display.c **** 	}
 2813              		.loc 1 1809 4 view .LVU878
 2814 014a FFF7FEFF 		bl	dn_add
 2815              	.LVL308:
1774:src/display.c **** 	int j;
 2816              		.loc 1 1774 17 view .LVU879
 2817 014e 3546     		mov	r5, r6
 2818 0150 A3E7     		b	.L247
 2819              	.LVL309:
 2820              	.L270:
1785:src/display.c **** 	    *res++ += '-';
 2821              		.loc 1 1785 4 is_stmt 1 view .LVU880
1785:src/display.c **** 	    *res++ += '-';
 2822              		.loc 1 1785 7 is_stmt 0 view .LVU881
 2823 0152 D4B1     		cbz	r4, .L244
1786:src/display.c **** 	  else
 2824              		.loc 1 1786 6 is_stmt 1 view .LVU882
1786:src/display.c **** 	  else
 2825              		.loc 1 1786 10 is_stmt 0 view .LVU883
 2826 0154 2346     		mov	r3, r4
 2827              	.LVL310:
1786:src/display.c **** 	  else
 2828              		.loc 1 1786 13 view .LVU884
 2829 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2830              	.LVL311:
1786:src/display.c **** 	  else
 2831              		.loc 1 1786 13 view .LVU885
 2832 015a 2D32     		adds	r2, r2, #45
 2833 015c 2270     		strb	r2, [r4]
1786:src/display.c **** 	  else
 2834              		.loc 1 1786 10 view .LVU886
 2835 015e 1C46     		mov	r4, r3
 2836              	.LVL312:
1786:src/display.c **** 	  else
 2837              		.loc 1 1786 10 view .LVU887
 2838 0160 71E7     		b	.L243
 2839              	.LVL313:
 2840              	.L271:
1798:src/display.c **** 	  decNumberZero(&n);
 2841              		.loc 1 1798 4 is_stmt 1 view .LVU888
 2842 0162 12A8     		add	r0, sp, #72
 2843 0164 FFF7FEFF 		bl	dn_inc
 2844              	.LVL314:
1799:src/display.c **** 	}
 2845              		.loc 1 1799 4 view .LVU889
 2846 0168 1BA8     		add	r0, sp, #108
 2847 016a FFF7FEFF 		bl	decNumberZero
 2848              	.LVL315:
 2849 016e 87E7     		b	.L245
 2850              	.L272:
1804:src/display.c **** 	    *p++ = ' ';
 2851              		.loc 1 1804 6 view .LVU890
ARM GAS  /tmp/ccwSk7O0.s 			page 127


1804:src/display.c **** 	    *p++ = ' ';
 2852              		.loc 1 1804 21 is_stmt 0 view .LVU891
 2853 0170 12A8     		add	r0, sp, #72
 2854 0172 FFF7FEFF 		bl	dn_to_int
 2855              	.LVL316:
1804:src/display.c **** 	    *p++ = ' ';
 2856              		.loc 1 1804 10 view .LVU892
 2857 0176 01AE     		add	r6, sp, #4
 2858              	.LVL317:
1804:src/display.c **** 	    *p++ = ' ';
 2859              		.loc 1 1804 21 view .LVU893
 2860 0178 0146     		mov	r1, r0
1804:src/display.c **** 	    *p++ = ' ';
 2861              		.loc 1 1804 10 view .LVU894
 2862 017a 3046     		mov	r0, r6
 2863 017c FFF7FEFF 		bl	num_arg
 2864              	.LVL318:
1805:src/display.c **** 	  }
 2865              		.loc 1 1805 6 is_stmt 1 view .LVU895
1805:src/display.c **** 	  }
 2866              		.loc 1 1805 8 is_stmt 0 view .LVU896
 2867 0180 0546     		mov	r5, r0
 2868              	.LVL319:
1805:src/display.c **** 	  }
 2869              		.loc 1 1805 11 view .LVU897
 2870 0182 2023     		movs	r3, #32
 2871 0184 05F8013B 		strb	r3, [r5], #1
 2872              	.LVL320:
1805:src/display.c **** 	  }
 2873              		.loc 1 1805 11 view .LVU898
 2874 0188 87E7     		b	.L247
 2875              	.LVL321:
 2876              	.L244:
1788:src/display.c **** 	}
 2877              		.loc 1 1788 6 is_stmt 1 view .LVU899
 2878              	.LBB284:
 2879              	.LBI284:
 304:src/display.c **** {
 2880              		.loc 1 304 13 view .LVU900
 2881              	.LBB285:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2882              		.loc 1 306 3 view .LVU901
 306:src/display.c ****   set_dot(MANT_SIGN);
 2883              		.loc 1 306 25 is_stmt 0 view .LVU902
 2884 018a 094B     		ldr	r3, .L274+24
 2885 018c 2D22     		movs	r2, #45
 307:src/display.c **** }
 2886              		.loc 1 307 3 view .LVU903
 2887 018e 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2888              		.loc 1 306 25 view .LVU904
 2889 0190 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2890              		.loc 1 307 3 is_stmt 1 view .LVU905
 2891 0192 FFF7FEFF 		bl	set_dot
 2892              	.LVL322:
 308:src/display.c **** 
ARM GAS  /tmp/ccwSk7O0.s 			page 128


 2893              		.loc 1 308 1 is_stmt 0 view .LVU906
 2894 0196 56E7     		b	.L243
 2895              	.L275:
 2896              		.align	2
 2897              	.L274:
 2898 0198 00000000 		.word	const_100000
 2899 019c 00000000 		.word	const_0_0001
 2900 01a0 00000000 		.word	main_ram
 2901 01a4 00000000 		.word	.LANCHOR8
 2902 01a8 00000000 		.word	.LANCHOR10
 2903 01ac 00000000 		.word	.LANCHOR9
 2904 01b0 00000000 		.word	LastDisplayedNumber
 2905              	.LBE285:
 2906              	.LBE284:
 2907              	.LBE273:
 2908              	.LBE272:
 2909              		.cfi_endproc
 2910              	.LFE23:
 2912              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2913              		.align	2
 2914              	.LC1:
 2915 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2915      36376F39 
 2915      44313233 
 2915      34356800 
 2916              		.section	.text.carry_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.syntax unified
 2920              		.thumb
 2921              		.thumb_func
 2922              		.fpu fpv4-sp-d16
 2924              	carry_overflow:
 2925              	.LFB15:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2926              		.loc 1 570 38 is_stmt 1 view -0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 571:src/display.c ****       int c;
 2930              		.loc 1 571 7 view .LVU908
 2931              	.LVL323:
 572:src/display.c ****       unsigned int b;
 2932              		.loc 1 572 7 view .LVU909
 573:src/display.c **** 
 2933              		.loc 1 573 7 view .LVU910
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2934              		.loc 1 576 7 view .LVU911
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2935              		.loc 1 570 38 is_stmt 0 view .LVU912
 2936 0000 10B5     		push	{r4, lr}
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 4, -8
 2939              		.cfi_offset 14, -4
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2940              		.loc 1 576 21 view .LVU913
 2941 0002 1B4B     		ldr	r3, .L289
ARM GAS  /tmp/ccwSk7O0.s 			page 129


 2942 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0006 023B     		subs	r3, r3, #2
 2944 0008 DBB2     		uxtb	r3, r3
 2945 000a 032B     		cmp	r3, #3
 2946 000c 14D8     		bhi	.L277
 2947 000e 194A     		ldr	r2, .L289+4
 2948 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2949              	.LVL324:
 585:src/display.c **** 	SET_EXP_SIGN;
 2950              		.loc 1 585 7 is_stmt 1 view .LVU914
 585:src/display.c **** 	SET_EXP_SIGN;
 2951              		.loc 1 585 18 is_stmt 0 view .LVU915
 2952 0014 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2953              		.loc 1 585 10 view .LVU916
 2954 0018 042B     		cmp	r3, #4
 2955 001a 17D9     		bls	.L286
 2956              	.L279:
 587:src/display.c ****       set_dig(base, c);
 2957              		.loc 1 587 7 is_stmt 1 view .LVU917
 2958              	.LVL325:
 588:src/display.c **** 
 2959              		.loc 1 588 7 view .LVU918
 587:src/display.c ****       set_dig(base, c);
 2960              		.loc 1 587 28 is_stmt 0 view .LVU919
 2961 001c 164B     		ldr	r3, .L289+8
 2962 001e 1C44     		add	r4, r4, r3
 2963              	.LVL326:
 588:src/display.c **** 
 2964              		.loc 1 588 7 view .LVU920
 2965 0020 6C20     		movs	r0, #108
 2966 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2967 0026 FFF7FEFF 		bl	set_dig
 2968              	.LVL327:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2969              		.loc 1 591 7 is_stmt 1 view .LVU921
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2970              		.loc 1 591 11 is_stmt 0 view .LVU922
 2971 002a FFF7FEFF 		bl	get_carry
 2972              	.LVL328:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2973              		.loc 1 591 10 view .LVU923
 2974 002e D0B9     		cbnz	r0, .L287
 2975              	.L280:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2976              		.loc 1 593 7 is_stmt 1 view .LVU924
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2977              		.loc 1 593 11 is_stmt 0 view .LVU925
 2978 0030 FFF7FEFF 		bl	get_overflow
 2979              	.LVL329:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2980              		.loc 1 593 10 view .LVU926
 2981 0034 88B9     		cbnz	r0, .L288
 595:src/display.c **** 
 2982              		.loc 1 595 5 view .LVU927
 2983 0036 10BD     		pop	{r4, pc}
 2984              	.LVL330:
ARM GAS  /tmp/ccwSk7O0.s 			page 130


 2985              	.L277:
 581:src/display.c ****       }
 2986              		.loc 1 581 16 is_stmt 1 view .LVU928
 581:src/display.c ****       }
 2987              		.loc 1 581 26 is_stmt 0 view .LVU929
 2988 0038 104B     		ldr	r3, .L289+12
 2989 003a 1B68     		ldr	r3, [r3]
 2990 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2991 0040 2409     		lsrs	r4, r4, #4
 581:src/display.c ****       }
 2992              		.loc 1 581 35 view .LVU930
 2993 0042 0134     		adds	r4, r4, #1
 2994              	.LVL331:
 581:src/display.c ****       }
 2995              		.loc 1 581 39 is_stmt 1 view .LVU931
 585:src/display.c **** 	SET_EXP_SIGN;
 2996              		.loc 1 585 7 view .LVU932
 585:src/display.c **** 	SET_EXP_SIGN;
 2997              		.loc 1 585 18 is_stmt 0 view .LVU933
 2998 0044 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2999              		.loc 1 585 10 view .LVU934
 3000 0048 042B     		cmp	r3, #4
 3001 004a E7D8     		bhi	.L279
 3002              	.L286:
 586:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3003              		.loc 1 586 2 is_stmt 1 view .LVU935
 3004              	.LBB292:
 3005              	.LBI292:
 316:src/display.c **** {
 3006              		.loc 1 316 13 view .LVU936
 3007              	.LBB293:
 318:src/display.c ****   set_dot(EXP_SIGN);
 3008              		.loc 1 318 3 view .LVU937
 318:src/display.c ****   set_dot(EXP_SIGN);
 3009              		.loc 1 318 27 is_stmt 0 view .LVU938
 3010 004c 0C4B     		ldr	r3, .L289+16
 3011 004e 2D22     		movs	r2, #45
 319:src/display.c **** }
 3012              		.loc 1 319 3 view .LVU939
 3013 0050 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 3014              		.loc 1 318 27 view .LVU940
 3015 0052 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 3016              		.loc 1 319 3 is_stmt 1 view .LVU941
 3017 0054 FFF7FEFF 		bl	set_dot
 3018              	.LVL332:
 320:src/display.c **** 
 3019              		.loc 1 320 1 is_stmt 0 view .LVU942
 3020 0058 E0E7     		b	.L279
 3021              	.LVL333:
 3022              	.L288:
 320:src/display.c **** 
 3023              		.loc 1 320 1 view .LVU943
 3024              	.LBE293:
 3025              	.LBE292:
ARM GAS  /tmp/ccwSk7O0.s 			page 131


 3026              	.LBB294:
 3027              	.LBI294:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 3028              		.loc 1 570 17 is_stmt 1 view .LVU944
 3029              	.LBB295:
 594:src/display.c ****     }
 3030              		.loc 1 594 2 view .LVU945
 3031              	.LBE295:
 3032              	.LBE294:
 595:src/display.c **** 
 3033              		.loc 1 595 5 is_stmt 0 view .LVU946
 3034 005a BDE81040 		pop	{r4, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 4
 3038              		.cfi_def_cfa_offset 0
 3039              	.LVL334:
 3040              	.LBB297:
 3041              	.LBB296:
 594:src/display.c ****     }
 3042              		.loc 1 594 2 view .LVU947
 3043 005e 6F21     		movs	r1, #111
 3044 0060 7A20     		movs	r0, #122
 3045 0062 FFF7FEBF 		b	set_dig
 3046              	.LVL335:
 3047              	.L287:
 3048              		.cfi_restore_state
 594:src/display.c ****     }
 3049              		.loc 1 594 2 view .LVU948
 3050              	.LBE296:
 3051              	.LBE297:
 592:src/display.c ****       if (get_overflow())
 3052              		.loc 1 592 2 is_stmt 1 view .LVU949
 3053 0066 6321     		movs	r1, #99
 3054 0068 7320     		movs	r0, #115
 3055 006a FFF7FEFF 		bl	set_dig
 3056              	.LVL336:
 3057 006e DFE7     		b	.L280
 3058              	.L290:
 3059              		.align	2
 3060              	.L289:
 3061 0070 00000000 		.word	StateWhileOn
 3062 0074 00000000 		.word	.LANCHOR11
 3063 0078 00000000 		.word	.LC1
 3064 007c 00000000 		.word	main_ram
 3065 0080 00000000 		.word	LastDisplayedExponent
 3066              		.cfi_endproc
 3067              	.LFE15:
 3069              		.global	__aeabi_uldivmod
 3070              		.section	.text.set_int_x,"ax",%progbits
 3071              		.align	1
 3072              		.p2align 2,,3
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv4-sp-d16
 3078              	set_int_x:
ARM GAS  /tmp/ccwSk7O0.s 			page 132


 3079              	.LVL337:
 3080              	.LFB18:
1485:src/display.c **** 	const int ws = word_size();
 3081              		.loc 1 1485 67 view -0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 88
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
1485:src/display.c **** 	const int ws = word_size();
 3085              		.loc 1 1485 67 is_stmt 0 view .LVU951
 3086 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3087              		.cfi_def_cfa_offset 36
 3088              		.cfi_offset 4, -36
 3089              		.cfi_offset 5, -32
 3090              		.cfi_offset 6, -28
 3091              		.cfi_offset 7, -24
 3092              		.cfi_offset 8, -20
 3093              		.cfi_offset 9, -16
 3094              		.cfi_offset 10, -12
 3095              		.cfi_offset 11, -8
 3096              		.cfi_offset 14, -4
 3097 0004 97B0     		sub	sp, sp, #92
 3098              		.cfi_def_cfa_offset 128
1485:src/display.c **** 	const int ws = word_size();
 3099              		.loc 1 1485 67 view .LVU952
 3100 0006 1546     		mov	r5, r2
 3101 0008 0646     		mov	r6, r0
 3102 000a 0F46     		mov	r7, r1
1486:src/display.c **** 	unsigned int b;
 3103              		.loc 1 1486 2 is_stmt 1 view .LVU953
1486:src/display.c **** 	unsigned int b;
 3104              		.loc 1 1486 17 is_stmt 0 view .LVU954
 3105 000c FFF7FEFF 		bl	word_size
 3106              	.LVL338:
1486:src/display.c **** 	unsigned int b;
 3107              		.loc 1 1486 17 view .LVU955
 3108 0010 CD4B     		ldr	r3, .L383
 3109 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3110 0014 023B     		subs	r3, r3, #2
 3111 0016 DBB2     		uxtb	r3, r3
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3112              		.loc 1 1492 6 view .LVU956
 3113 0018 0022     		movs	r2, #0
 3114 001a 032B     		cmp	r3, #3
1486:src/display.c **** 	unsigned int b;
 3115              		.loc 1 1486 17 view .LVU957
 3116 001c 8346     		mov	fp, r0
 3117              	.LVL339:
1487:src/display.c **** 	long long int vs = value;
 3118              		.loc 1 1487 2 is_stmt 1 view .LVU958
1488:src/display.c **** 	unsigned long long int v;
 3119              		.loc 1 1488 2 view .LVU959
1489:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3120              		.loc 1 1489 2 view .LVU960
1490:src/display.c **** 	int i, j, k;
 3121              		.loc 1 1490 2 view .LVU961
1491:src/display.c **** 	int sign = 0;
 3122              		.loc 1 1491 2 view .LVU962
ARM GAS  /tmp/ccwSk7O0.s 			page 133


1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3123              		.loc 1 1492 2 view .LVU963
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3124              		.loc 1 1492 6 is_stmt 0 view .LVU964
 3125 001e 0492     		str	r2, [sp, #16]
1493:src/display.c **** 
 3126              		.loc 1 1493 2 is_stmt 1 view .LVU965
 3127              	.LVL340:
1495:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3128              		.loc 1 1495 2 view .LVU966
 3129 0020 00F24181 		bhi	.L292
 3130 0024 C94A     		ldr	r2, .L383+4
 3131 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3132              	.LVL341:
1503:src/display.c **** 	  IntMaxWindow = 0;
 3133              		.loc 1 1503 2 view .LVU967
1503:src/display.c **** 	  IntMaxWindow = 0;
 3134              		.loc 1 1503 5 is_stmt 0 view .LVU968
 3135 002a 002D     		cmp	r5, #0
 3136 002c 00F04181 		beq	.L374
 3137              	.LVL342:
 3138              	.L294:
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3139              		.loc 1 1508 2 is_stmt 1 view .LVU969
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3140              		.loc 1 1508 24 is_stmt 0 view .LVU970
 3141 0030 0AF1FF33 		add	r3, r10, #-1
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3142              		.loc 1 1508 30 view .LVU971
 3143 0034 47F67574 		movw	r4, #32629
 3144 0038 1C41     		asrs	r4, r4, r3
1508:src/display.c **** 	  v = extract_value(value, &sign);
 3145              		.loc 1 1508 5 view .LVU972
 3146 003a 14F00104 		ands	r4, r4, #1
 3147 003e 40F0F380 		bne	.L375
1525:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3148              		.loc 1 1525 4 is_stmt 1 view .LVU973
1525:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3149              		.loc 1 1525 7 is_stmt 0 view .LVU974
 3150 0042 BBF13F0F 		cmp	fp, #63
 3151 0046 17DC     		bgt	.L305
 3152              	.LBB298:
1526:src/display.c **** 	    vs &= mask;
 3153              		.loc 1 1526 6 is_stmt 1 view .LVU975
1526:src/display.c **** 	    vs &= mask;
 3154              		.loc 1 1526 38 is_stmt 0 view .LVU976
 3155 0048 0121     		movs	r1, #1
 3156 004a ABF1200C 		sub	ip, fp, #32
 3157 004e CBF12000 		rsb	r0, fp, #32
 3158 0052 21FA00F0 		lsr	r0, r1, r0
 3159 0056 01FA0CF3 		lsl	r3, r1, ip
 3160 005a 01FA0BF2 		lsl	r2, r1, fp
 3161 005e 0343     		orrs	r3, r3, r0
 3162              	.LVL343:
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3163              		.loc 1 1527 6 is_stmt 1 view .LVU977
1526:src/display.c **** 	    vs &= mask;
ARM GAS  /tmp/ccwSk7O0.s 			page 134


 3164              		.loc 1 1526 26 is_stmt 0 view .LVU978
 3165 0060 12F1FF30 		adds	r0, r2, #-1
 3166 0064 43F1FF31 		adc	r1, r3, #-1
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3167              		.loc 1 1527 9 view .LVU979
 3168 0068 3040     		ands	r0, r0, r6
 3169 006a 3940     		ands	r1, r1, r7
 3170              	.LVL344:
1528:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1528 9 view .LVU980
 3172 006c BAF10A0F 		cmp	r10, #10
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3173              		.loc 1 1527 9 view .LVU981
 3174 0070 0646     		mov	r6, r0
 3175              	.LVL345:
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3176              		.loc 1 1527 9 view .LVU982
 3177 0072 0F46     		mov	r7, r1
1528:src/display.c **** 	      vs |= ~mask;
 3178              		.loc 1 1528 6 is_stmt 1 view .LVU983
1528:src/display.c **** 	      vs |= ~mask;
 3179              		.loc 1 1528 9 is_stmt 0 view .LVU984
 3180 0074 00F03D81 		beq	.L376
 3181              	.LVL346:
 3182              	.L305:
1528:src/display.c **** 	      vs |= ~mask;
 3183              		.loc 1 1528 9 view .LVU985
 3184              	.LBE298:
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3185              		.loc 1 1532 4 is_stmt 1 view .LVU986
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3186              		.loc 1 1532 8 is_stmt 0 view .LVU987
 3187 0078 B54B     		ldr	r3, .L383+8
 3188 007a 1B68     		ldr	r3, [r3]
 3189 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3190              		.loc 1 1532 7 view .LVU988
 3191 0080 9A07     		lsls	r2, r3, #30
 3192 0082 41D5     		bpl	.L336
1535:src/display.c **** 	    v = (unsigned long long int)vs;
 3193              		.loc 1 1535 11 is_stmt 1 view .LVU989
 3194              	.LBB299:
1543:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3195              		.loc 1 1543 6 view .LVU990
1544:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3196              		.loc 1 1544 6 view .LVU991
1544:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3197              		.loc 1 1544 25 is_stmt 0 view .LVU992
 3198 0084 4FEA5A02 		lsr	r2, r10, #1
 3199              	.LVL347:
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 3200              		.loc 1 1545 6 is_stmt 1 view .LVU993
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 3201              		.loc 1 1545 43 is_stmt 0 view .LVU994
 3202 0088 12F00A0F 		tst	r2, #10
 3203 008c 14BF     		ite	ne
 3204 008e 0123     		movne	r3, #1
ARM GAS  /tmp/ccwSk7O0.s 			page 135


 3205 0090 0023     		moveq	r3, #0
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 3206              		.loc 1 1545 70 view .LVU995
 3207 0092 12F00C0F 		tst	r2, #12
 3208 0096 18BF     		it	ne
 3209 0098 43F00203 		orrne	r3, r3, #2
 3210              	.LVL348:
 3211              	.L311:
1546:src/display.c **** 
 3212              		.loc 1 1546 6 is_stmt 1 discriminator 4 view .LVU996
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3213              		.loc 1 1548 14 is_stmt 0 discriminator 4 view .LVU997
 3214 009c 0BEB0308 		add	r8, fp, r3
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3215              		.loc 1 1548 27 discriminator 4 view .LVU998
 3216 00a0 0133     		adds	r3, r3, #1
 3217              	.LVL349:
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3218              		.loc 1 1548 21 discriminator 4 view .LVU999
 3219 00a2 B8FBF3F8 		udiv	r8, r8, r3
1549:src/display.c **** 	      const int r = v % b;
 3220              		.loc 1 1549 6 discriminator 4 view .LVU1000
 3221 00a6 B8F1000F 		cmp	r8, #0
1546:src/display.c **** 
 3222              		.loc 1 1546 8 discriminator 4 view .LVU1001
 3223 00aa 3046     		mov	r0, r6
 3224 00ac 3946     		mov	r1, r7
 3225              	.LVL350:
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 3226              		.loc 1 1548 6 is_stmt 1 discriminator 4 view .LVU1002
1549:src/display.c **** 	      const int r = v % b;
 3227              		.loc 1 1549 6 discriminator 4 view .LVU1003
1549:src/display.c **** 	      const int r = v % b;
 3228              		.loc 1 1549 16 discriminator 4 view .LVU1004
1549:src/display.c **** 	      const int r = v % b;
 3229              		.loc 1 1549 6 is_stmt 0 discriminator 4 view .LVU1005
 3230 00ae 40F38381 		ble	.L337
 3231 00b2 05AC     		add	r4, sp, #20
 3232 00b4 DFF8A4B2 		ldr	fp, .L383+20
 3233              	.LVL351:
1549:src/display.c **** 	      const int r = v % b;
 3234              		.loc 1 1549 6 discriminator 4 view .LVU1006
 3235 00b8 08EB0406 		add	r6, r8, r4
 3236              	.LVL352:
 3237              	.L312:
 3238              	.LBB300:
1550:src/display.c **** 	      v /= b;
 3239              		.loc 1 1550 8 is_stmt 1 discriminator 3 view .LVU1007
 3240 00bc 5246     		mov	r2, r10
 3241 00be 0023     		movs	r3, #0
 3242 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3243              	.LVL353:
1551:src/display.c **** 	      buf[i] = DIGITS[r];
 3244              		.loc 1 1551 8 discriminator 3 view .LVU1008
1552:src/display.c **** 	    }
 3245              		.loc 1 1552 15 is_stmt 0 discriminator 3 view .LVU1009
 3246 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 136


 3247 00c8 04F8013B 		strb	r3, [r4], #1
 3248              	.LVL354:
1552:src/display.c **** 	    }
 3249              		.loc 1 1552 8 is_stmt 1 discriminator 3 view .LVU1010
 3250              	.LBE300:
1549:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1549 21 discriminator 3 view .LVU1011
1549:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1549 16 discriminator 3 view .LVU1012
1549:src/display.c **** 	      const int r = v % b;
 3253              		.loc 1 1549 6 is_stmt 0 discriminator 3 view .LVU1013
 3254 00cc B442     		cmp	r4, r6
 3255 00ce F5D1     		bne	.L312
 3256 00d0 08F1FF31 		add	r1, r8, #-1
 3257              	.LVL355:
1549:src/display.c **** 	      const int r = v % b;
 3258              		.loc 1 1549 6 view .LVU1014
 3259 00d4 4446     		mov	r4, r8
 3260              	.LVL356:
 3261              	.L304:
1549:src/display.c **** 	      const int r = v % b;
 3262              		.loc 1 1549 6 view .LVU1015
 3263              	.LBE299:
1562:src/display.c **** 	if (res) {
 3264              		.loc 1 1562 2 is_stmt 1 view .LVU1016
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3265              		.loc 1 1563 2 view .LVU1017
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3266              		.loc 1 1563 5 is_stmt 0 view .LVU1018
 3267 00d6 002D     		cmp	r5, #0
 3268 00d8 3ED0     		beq	.L313
 3269              	.LVL357:
 3270              	.L377:
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3271              		.loc 1 1564 4 is_stmt 1 view .LVU1019
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3272              		.loc 1 1564 7 is_stmt 0 view .LVU1020
 3273 00da 049B     		ldr	r3, [sp, #16]
 3274 00dc 13B1     		cbz	r3, .L314
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3275              		.loc 1 1564 14 is_stmt 1 discriminator 1 view .LVU1021
 3276              	.LVL358:
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3277              		.loc 1 1564 21 is_stmt 0 discriminator 1 view .LVU1022
 3278 00de 2D23     		movs	r3, #45
 3279 00e0 05F8013B 		strb	r3, [r5], #1
 3280              	.LVL359:
 3281              	.L314:
1565:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3282              		.loc 1 1565 4 is_stmt 1 view .LVU1023
1565:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3283              		.loc 1 1565 7 is_stmt 0 view .LVU1024
 3284 00e4 0D2C     		cmp	r4, #13
 3285 00e6 00F3E980 		bgt	.L315
1572:src/display.c **** 	      *res++ = buf[i];
 3286              		.loc 1 1572 12 is_stmt 1 view .LVU1025
 3287              	.LVL360:
ARM GAS  /tmp/ccwSk7O0.s 			page 137


1572:src/display.c **** 	      *res++ = buf[i];
 3288              		.loc 1 1572 12 is_stmt 0 view .LVU1026
 3289 00ea 481C     		adds	r0, r1, #1
 3290 00ec 09D0     		beq	.L291
 3291 00ee 0131     		adds	r1, r1, #1
 3292 00f0 05AA     		add	r2, sp, #20
 3293 00f2 013D     		subs	r5, r5, #1
 3294 00f4 1144     		add	r1, r1, r2
 3295              	.LVL361:
 3296              	.L318:
1573:src/display.c **** 	  }
 3297              		.loc 1 1573 8 is_stmt 1 view .LVU1027
1573:src/display.c **** 	  }
 3298              		.loc 1 1573 15 is_stmt 0 view .LVU1028
 3299 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3300              	.LVL362:
1573:src/display.c **** 	  }
 3301              		.loc 1 1573 15 view .LVU1029
 3302 00fa 05F8013F 		strb	r3, [r5, #1]!
 3303              	.LVL363:
1572:src/display.c **** 	      *res++ = buf[i];
 3304              		.loc 1 1572 12 is_stmt 1 view .LVU1030
1572:src/display.c **** 	      *res++ = buf[i];
 3305              		.loc 1 1572 12 is_stmt 0 view .LVU1031
 3306 00fe 9142     		cmp	r1, r2
 3307 0100 F9D1     		bne	.L318
 3308              	.LVL364:
 3309              	.L291:
1620:src/display.c **** 
 3310              		.loc 1 1620 7 view .LVU1032
 3311 0102 17B0     		add	sp, sp, #92
 3312              		.cfi_remember_state
 3313              		.cfi_def_cfa_offset 36
 3314              		@ sp needed
 3315 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3316              	.LVL365:
 3317              	.L336:
 3318              		.cfi_restore_state
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3319              		.loc 1 1532 25 discriminator 1 view .LVU1033
 3320 0108 56EA0703 		orrs	r3, r6, r7
 3321 010c 00F0C480 		beq	.L299
1535:src/display.c **** 	    v = (unsigned long long int)vs;
 3322              		.loc 1 1535 11 is_stmt 1 view .LVU1034
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3323              		.loc 1 1536 6 view .LVU1035
 3324 0110 DFF848B2 		ldr	fp, .L383+20
 3325              	.LVL366:
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3326              		.loc 1 1536 6 is_stmt 0 view .LVU1036
 3327 0114 CDF800A0 		str	r10, [sp]
 3328 0118 0023     		movs	r3, #0
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3329              		.loc 1 1536 8 view .LVU1037
 3330 011a B046     		mov	r8, r6
 3331 011c D946     		mov	r9, fp
 3332 011e 3E46     		mov	r6, r7
ARM GAS  /tmp/ccwSk7O0.s 			page 138


1537:src/display.c **** 	      const int r = v % b;
 3333              		.loc 1 1537 6 is_stmt 1 view .LVU1038
 3334              	.LVL367:
1537:src/display.c **** 	      const int r = v % b;
 3335              		.loc 1 1537 16 view .LVU1039
 3336 0120 9B46     		mov	fp, r3
 3337 0122 05AF     		add	r7, sp, #20
 3338              	.LVL368:
 3339              	.L310:
 3340              	.LBB301:
1538:src/display.c **** 	      v /= b;
 3341              		.loc 1 1538 8 discriminator 3 view .LVU1040
 3342 0124 4046     		mov	r0, r8
 3343 0126 3146     		mov	r1, r6
 3344 0128 5246     		mov	r2, r10
 3345 012a 5B46     		mov	r3, fp
 3346 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3347              	.LVL369:
 3348 0130 3346     		mov	r3, r6
 3349 0132 9446     		mov	ip, r2
 3350              	.LVL370:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3351              		.loc 1 1539 8 discriminator 3 view .LVU1041
 3352              	.LBE301:
1537:src/display.c **** 	      const int r = v % b;
 3353              		.loc 1 1537 6 is_stmt 0 discriminator 3 view .LVU1042
 3354 0134 5B45     		cmp	r3, fp
 3355 0136 4246     		mov	r2, r8
 3356              	.LVL371:
 3357              	.LBB302:
1540:src/display.c **** 	    }
 3358              		.loc 1 1540 15 discriminator 3 view .LVU1043
 3359 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3360              	.LVL372:
1540:src/display.c **** 	    }
 3361              		.loc 1 1540 15 discriminator 3 view .LVU1044
 3362 013c 07F801CB 		strb	ip, [r7], #1
 3363              	.LBE302:
1537:src/display.c **** 	      const int r = v % b;
 3364              		.loc 1 1537 6 discriminator 3 view .LVU1045
 3365 0140 08BF     		it	eq
 3366 0142 5245     		cmpeq	r2, r10
 3367              	.LBB303:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3368              		.loc 1 1539 10 discriminator 3 view .LVU1046
 3369 0144 0E46     		mov	r6, r1
 3370              	.LVL373:
1540:src/display.c **** 	    }
 3371              		.loc 1 1540 8 is_stmt 1 discriminator 3 view .LVU1047
 3372              	.LBE303:
1537:src/display.c **** 	      const int r = v % b;
 3373              		.loc 1 1537 24 discriminator 3 view .LVU1048
 3374              	.LBB304:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3375              		.loc 1 1539 10 is_stmt 0 discriminator 3 view .LVU1049
 3376 0146 8046     		mov	r8, r0
 3377 0148 2146     		mov	r1, r4
ARM GAS  /tmp/ccwSk7O0.s 			page 139


 3378              	.LVL374:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1539 10 discriminator 3 view .LVU1050
 3380              	.LBE304:
1537:src/display.c **** 	      const int r = v % b;
 3381              		.loc 1 1537 25 discriminator 3 view .LVU1051
 3382 014a 04F10104 		add	r4, r4, #1
 3383              	.LVL375:
1537:src/display.c **** 	      const int r = v % b;
 3384              		.loc 1 1537 16 is_stmt 1 discriminator 3 view .LVU1052
1537:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1537 6 is_stmt 0 discriminator 3 view .LVU1053
 3386 014e E9D2     		bcs	.L310
 3387 0150 DDF800A0 		ldr	r10, [sp]
 3388              	.LVL376:
1562:src/display.c **** 	if (res) {
 3389              		.loc 1 1562 2 is_stmt 1 view .LVU1054
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3390              		.loc 1 1563 2 view .LVU1055
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3391              		.loc 1 1563 5 is_stmt 0 view .LVU1056
 3392 0154 002D     		cmp	r5, #0
 3393 0156 C0D1     		bne	.L377
 3394              	.LVL377:
 3395              	.L313:
 3396              	.LBB305:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3397              		.loc 1 1591 4 is_stmt 1 view .LVU1057
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3398              		.loc 1 1591 33 is_stmt 0 view .LVU1058
 3399 0158 BAF1020F 		cmp	r10, #2
 3400 015c 00F0F080 		beq	.L378
 3401              	.LVL378:
1592:src/display.c **** 	    : b == 16 ? 2 : 3;
 3402              		.loc 1 1592 4 is_stmt 1 view .LVU1059
1592:src/display.c **** 	    : b == 16 ? 2 : 3;
 3403              		.loc 1 1592 30 is_stmt 0 view .LVU1060
 3404 0160 BAF1040F 		cmp	r10, #4
 3405 0164 00F01F81 		beq	.L379
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3406              		.loc 1 1591 33 view .LVU1061
 3407 0168 BAF1100F 		cmp	r10, #16
 3408 016c 0CBF     		ite	eq
 3409 016e 4FF0020A 		moveq	r10, #2
 3410 0172 4FF0030A 		movne	r10, #3
 3411 0176 0C26     		movs	r6, #12
 3412              	.LVL379:
 3413              	.L320:
1594:src/display.c **** #endif
 3414              		.loc 1 1594 4 is_stmt 1 view .LVU1062
 3415 0178 0091     		str	r1, [sp]
 3416 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3417              	.LVL380:
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3418              		.loc 1 1596 4 view .LVU1063
1597:src/display.c **** 	    State2.window = 0;
 3419              		.loc 1 1597 26 is_stmt 0 view .LVU1064
ARM GAS  /tmp/ccwSk7O0.s 			page 140


 3420 017e 724B     		ldr	r3, .L383
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3421              		.loc 1 1596 17 view .LVU1065
 3422 0180 744A     		ldr	r2, .L383+12
1597:src/display.c **** 	    State2.window = 0;
 3423              		.loc 1 1597 26 view .LVU1066
 3424 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3425              		.loc 1 1596 27 view .LVU1067
 3426 0184 0099     		ldr	r1, [sp]
 3427 0186 91FBF6F1 		sdiv	r1, r1, r6
1597:src/display.c **** 	    State2.window = 0;
 3428              		.loc 1 1597 8 view .LVU1068
 3429 018a C3F3C207 		ubfx	r7, r3, #3, #3
1597:src/display.c **** 	    State2.window = 0;
 3430              		.loc 1 1597 7 view .LVU1069
 3431 018e B942     		cmp	r1, r7
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3432              		.loc 1 1596 17 view .LVU1070
 3433 0190 1160     		str	r1, [r2]
1597:src/display.c **** 	    State2.window = 0;
 3434              		.loc 1 1597 4 is_stmt 1 view .LVU1071
1597:src/display.c **** 	    State2.window = 0;
 3435              		.loc 1 1597 7 is_stmt 0 view .LVU1072
 3436 0192 C0F2F680 		blt	.L322
 3437 0196 06FB07F7 		mul	r7, r6, r7
 3438              	.L323:
1599:src/display.c **** 
 3439              		.loc 1 1599 4 is_stmt 1 view .LVU1073
1599:src/display.c **** 
 3440              		.loc 1 1599 11 is_stmt 0 view .LVU1074
 3441 019a 16AB     		add	r3, sp, #88
 3442 019c 16AA     		add	r2, sp, #88
 3443 019e 1C44     		add	r4, r4, r3
 3444              	.LVL381:
1599:src/display.c **** 
 3445              		.loc 1 1599 11 view .LVU1075
 3446 01a0 D519     		adds	r5, r2, r7
 3447 01a2 0023     		movs	r3, #0
 3448 01a4 453D     		subs	r5, r5, #69
 3449 01a6 04F8443C 		strb	r3, [r4, #-68]
1601:src/display.c **** 	  for (k = 0; k < 12; k++)
 3450              		.loc 1 1601 4 is_stmt 1 view .LVU1076
 3451              	.LVL382:
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3452              		.loc 1 1602 4 view .LVU1077
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3453              		.loc 1 1602 16 view .LVU1078
1599:src/display.c **** 
 3454              		.loc 1 1599 11 is_stmt 0 view .LVU1079
 3455 01aa 2A46     		mov	r2, r5
 3456              	.LVL383:
 3457              	.L325:
1603:src/display.c **** 	      break;
 3458              		.loc 1 1603 6 is_stmt 1 view .LVU1080
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3459              		.loc 1 1602 24 view .LVU1081
ARM GAS  /tmp/ccwSk7O0.s 			page 141


1603:src/display.c **** 	      break;
 3460              		.loc 1 1603 9 is_stmt 0 view .LVU1082
 3461 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3462 01b0 0029     		cmp	r1, #0
 3463 01b2 00F0EC80 		beq	.L324
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3464              		.loc 1 1602 25 discriminator 2 view .LVU1083
 3465 01b6 0133     		adds	r3, r3, #1
 3466              	.LVL384:
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3467              		.loc 1 1602 16 is_stmt 1 discriminator 2 view .LVU1084
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3468              		.loc 1 1602 4 is_stmt 0 discriminator 2 view .LVU1085
 3469 01b8 0C2B     		cmp	r3, #12
 3470 01ba F7D1     		bne	.L325
1605:src/display.c **** 	    int ch = buf[j++];
 3471              		.loc 1 1605 4 view .LVU1086
 3472 01bc 4FF00B08 		mov	r8, #11
 3473              	.LVL385:
 3474              	.L326:
1605:src/display.c **** 	    int ch = buf[j++];
 3475              		.loc 1 1605 4 view .LVU1087
 3476 01c0 0137     		adds	r7, r7, #1
 3477 01c2 4744     		add	r7, r7, r8
 3478 01c4 4446     		mov	r4, r8
 3479 01c6 4FF0630B 		mov	fp, #99
 3480 01ca 09E0     		b	.L331
 3481              	.LVL386:
 3482              	.L380:
 3483              	.LBB306:
1611:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3484              		.loc 1 1611 8 view .LVU1088
 3485 01cc 624B     		ldr	r3, .L383+16
 3486 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3487              	.LVL387:
 3488              	.LBB307:
 3489              	.LBI307:
 375:src/display.c ****   if (sep == SEP_NONE)
 3490              		.loc 1 375 14 is_stmt 1 view .LVU1089
 3491              	.LBB308:
 376:src/display.c ****     return res;
 3492              		.loc 1 376 3 view .LVU1090
 376:src/display.c ****     return res;
 3493              		.loc 1 376 6 is_stmt 0 view .LVU1091
 3494 01d0 09B1     		cbz	r1, .L329
 376:src/display.c ****     return res;
 3495              		.loc 1 376 6 view .LVU1092
 3496 01d2 FFF7FEFF 		bl	set_separator.part.0
 3497              	.LVL388:
 3498              	.L329:
 376:src/display.c ****     return res;
 3499              		.loc 1 376 6 view .LVU1093
 3500              	.LBE308:
 3501              	.LBE307:
1612:src/display.c **** 	  }
 3502              		.loc 1 1612 6 is_stmt 1 discriminator 2 view .LVU1094
 3503              	.LBE306:
ARM GAS  /tmp/ccwSk7O0.s 			page 142


1605:src/display.c **** 	    int ch = buf[j++];
 3504              		.loc 1 1605 4 is_stmt 0 discriminator 2 view .LVU1095
 3505 01d6 013C     		subs	r4, r4, #1
1605:src/display.c **** 	    int ch = buf[j++];
 3506              		.loc 1 1605 4 discriminator 2 view .LVU1096
 3507 01d8 621C     		adds	r2, r4, #1
 3508              	.LBB311:
1612:src/display.c **** 	  }
 3509              		.loc 1 1612 10 discriminator 2 view .LVU1097
 3510 01da ABF1090B 		sub	fp, fp, #9
 3511              	.LVL389:
1612:src/display.c **** 	  }
 3512              		.loc 1 1612 10 discriminator 2 view .LVU1098
 3513              	.LBE311:
1605:src/display.c **** 	    int ch = buf[j++];
 3514              		.loc 1 1605 24 is_stmt 1 discriminator 2 view .LVU1099
1605:src/display.c **** 	    int ch = buf[j++];
 3515              		.loc 1 1605 14 discriminator 2 view .LVU1100
1605:src/display.c **** 	    int ch = buf[j++];
 3516              		.loc 1 1605 4 is_stmt 0 discriminator 2 view .LVU1101
 3517 01de 16D0     		beq	.L335
 3518              	.LVL390:
 3519              	.L331:
 3520              	.LBB312:
1606:src/display.c **** 	    if (i >= shift)
 3521              		.loc 1 1606 6 is_stmt 1 view .LVU1102
1608:src/display.c **** 	    set_dig(dig, ch);
 3522              		.loc 1 1608 8 view .LVU1103
1606:src/display.c **** 	    if (i >= shift)
 3523              		.loc 1 1606 10 is_stmt 0 view .LVU1104
 3524 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1607:src/display.c **** 	      ch -= 030;
 3525              		.loc 1 1607 9 view .LVU1105
 3526 01e4 A8EB0402 		sub	r2, r8, r4
 3527 01e8 B242     		cmp	r2, r6
 3528 01ea A7EB0409 		sub	r9, r7, r4
 3529              	.LVL391:
1607:src/display.c **** 	      ch -= 030;
 3530              		.loc 1 1607 6 is_stmt 1 view .LVU1106
1609:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3531              		.loc 1 1609 6 is_stmt 0 view .LVU1107
 3532 01ee 5846     		mov	r0, fp
1608:src/display.c **** 	    set_dig(dig, ch);
 3533              		.loc 1 1608 11 view .LVU1108
 3534 01f0 A8BF     		it	ge
 3535 01f2 1839     		subge	r1, r1, #24
 3536              	.LVL392:
1609:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3537              		.loc 1 1609 6 is_stmt 1 view .LVU1109
 3538 01f4 FFF7FEFF 		bl	set_dig
 3539              	.LVL393:
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3540              		.loc 1 1610 6 view .LVU1110
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3541              		.loc 1 1610 13 is_stmt 0 view .LVU1111
 3542 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3543 01fc 0AFB1393 		mls	r3, r10, r3, r9
ARM GAS  /tmp/ccwSk7O0.s 			page 143


1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3544              		.loc 1 1610 9 view .LVU1112
 3545 0200 002B     		cmp	r3, #0
 3546 0202 E8D1     		bne	.L329
1611:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3547              		.loc 1 1611 8 is_stmt 1 discriminator 1 view .LVU1113
 3548              	.LBB310:
 3549              	.LBB309:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3550              		.loc 1 378 3 discriminator 1 view .LVU1114
 3551 0204 5846     		mov	r0, fp
 3552              	.LBE309:
 3553              	.LBE310:
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3554              		.loc 1 1610 27 is_stmt 0 discriminator 1 view .LVU1115
 3555 0206 002C     		cmp	r4, #0
 3556 0208 E0D1     		bne	.L380
1612:src/display.c **** 	  }
 3557              		.loc 1 1612 6 is_stmt 1 view .LVU1116
1612:src/display.c **** 	  }
 3558              		.loc 1 1612 10 is_stmt 0 view .LVU1117
 3559 020a ABF1090B 		sub	fp, fp, #9
 3560              	.LVL394:
1612:src/display.c **** 	  }
 3561              		.loc 1 1612 10 view .LVU1118
 3562              	.LBE312:
1605:src/display.c **** 	    int ch = buf[j++];
 3563              		.loc 1 1605 24 is_stmt 1 view .LVU1119
1605:src/display.c **** 	    int ch = buf[j++];
 3564              		.loc 1 1605 14 view .LVU1120
 3565              	.L335:
1614:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1614 4 view .LVU1121
1614:src/display.c **** 	    if (dig >= 0)
 3567              		.loc 1 1614 7 is_stmt 0 view .LVU1122
 3568 020e 049B     		ldr	r3, [sp, #16]
 3569 0210 002B     		cmp	r3, #0
 3570 0212 3FF476AF 		beq	.L291
1615:src/display.c **** 	      set_dig(dig, '-');
 3571              		.loc 1 1615 6 is_stmt 1 view .LVU1123
1615:src/display.c **** 	      set_dig(dig, '-');
 3572              		.loc 1 1615 9 is_stmt 0 view .LVU1124
 3573 0216 BBF1000F 		cmp	fp, #0
 3574 021a C0F2C680 		blt	.L381
 3575              	.LVL395:
 3576              	.L334:
1616:src/display.c **** 	    else	SET_MANT_SIGN;
 3577              		.loc 1 1616 8 is_stmt 1 view .LVU1125
 3578 021e 5846     		mov	r0, fp
 3579 0220 2D21     		movs	r1, #45
 3580 0222 FFF7FEFF 		bl	set_dig
 3581              	.LVL396:
 3582 0226 6CE7     		b	.L291
 3583              	.LVL397:
 3584              	.L375:
1616:src/display.c **** 	    else	SET_MANT_SIGN;
 3585              		.loc 1 1616 8 is_stmt 0 view .LVU1126
ARM GAS  /tmp/ccwSk7O0.s 			page 144


 3586              	.LBE305:
1509:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3587              		.loc 1 1509 4 is_stmt 1 view .LVU1127
1509:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3588              		.loc 1 1509 8 is_stmt 0 view .LVU1128
 3589 0228 04AA     		add	r2, sp, #16
 3590 022a 3046     		mov	r0, r6
 3591 022c 3946     		mov	r1, r7
 3592 022e FFF7FEFF 		bl	extract_value
 3593              	.LVL398:
 3594 0232 8046     		mov	r8, r0
 3595 0234 8946     		mov	r9, r1
 3596              	.LVL399:
1510:src/display.c **** 	    v = value;
 3597              		.loc 1 1510 4 is_stmt 1 view .LVU1129
1510:src/display.c **** 	    v = value;
 3598              		.loc 1 1510 8 is_stmt 0 view .LVU1130
 3599 0236 FFF7FEFF 		bl	int_mode
 3600              	.LVL400:
1510:src/display.c **** 	    v = value;
 3601              		.loc 1 1510 7 view .LVU1131
 3602 023a 38BB     		cbnz	r0, .L296
1510:src/display.c **** 	    v = value;
 3603              		.loc 1 1510 33 discriminator 1 view .LVU1132
 3604 023c 049B     		ldr	r3, [sp, #16]
 3605 023e 012B     		cmp	r3, #1
 3606 0240 24D1     		bne	.L296
1510:src/display.c **** 	    v = value;
 3607              		.loc 1 1510 46 discriminator 2 view .LVU1133
 3608 0242 58EA0903 		orrs	r3, r8, r9
 3609 0246 00F08B80 		beq	.L382
 3610              	.LVL401:
 3611              	.L297:
1510:src/display.c **** 	    v = value;
 3612              		.loc 1 1510 46 discriminator 2 view .LVU1134
 3613 024a DFF810B1 		ldr	fp, .L383+20
 3614              	.LVL402:
1485:src/display.c **** 	const int ws = word_size();
 3615              		.loc 1 1485 67 discriminator 3 view .LVU1135
 3616 024e 0395     		str	r5, [sp, #12]
 3617 0250 05AB     		add	r3, sp, #20
 3618 0252 5D46     		mov	r5, fp
 3619              	.LVL403:
1485:src/display.c **** 	const int ws = word_size();
 3620              		.loc 1 1485 67 discriminator 3 view .LVU1136
 3621 0254 5646     		mov	r6, r10
 3622 0256 0027     		movs	r7, #0
 3623 0258 0024     		movs	r4, #0
 3624 025a 9B46     		mov	fp, r3
 3625              	.LVL404:
 3626              	.L303:
 3627              	.LBB315:
1519:src/display.c **** 	      v /= b;
 3628              		.loc 1 1519 8 is_stmt 1 discriminator 3 view .LVU1137
 3629 025c 4046     		mov	r0, r8
 3630 025e 4946     		mov	r1, r9
 3631 0260 3246     		mov	r2, r6
ARM GAS  /tmp/ccwSk7O0.s 			page 145


 3632 0262 3B46     		mov	r3, r7
 3633 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3634              	.LVL405:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3635              		.loc 1 1520 8 discriminator 3 view .LVU1138
 3636 0268 CDE90089 		strd	r8, [sp]
1521:src/display.c **** 	    }
 3637              		.loc 1 1521 15 is_stmt 0 discriminator 3 view .LVU1139
 3638 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3639 026e 0BF8013B 		strb	r3, [fp], #1
 3640              	.LBE315:
1518:src/display.c **** 	      const int r = v % b;
 3641              		.loc 1 1518 6 discriminator 3 view .LVU1140
 3642 0272 DDE90023 		ldrd	r2, [sp]
 3643              	.LVL406:
1518:src/display.c **** 	      const int r = v % b;
 3644              		.loc 1 1518 6 discriminator 3 view .LVU1141
 3645 0276 BB42     		cmp	r3, r7
 3646 0278 08BF     		it	eq
 3647 027a B242     		cmpeq	r2, r6
 3648              	.LBB316:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3649              		.loc 1 1520 10 discriminator 3 view .LVU1142
 3650 027c 8946     		mov	r9, r1
 3651              	.LVL407:
1521:src/display.c **** 	    }
 3652              		.loc 1 1521 8 is_stmt 1 discriminator 3 view .LVU1143
 3653              	.LBE316:
1518:src/display.c **** 	      const int r = v % b;
 3654              		.loc 1 1518 24 discriminator 3 view .LVU1144
 3655              	.LBB317:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3656              		.loc 1 1520 10 is_stmt 0 discriminator 3 view .LVU1145
 3657 027e 8046     		mov	r8, r0
 3658 0280 2146     		mov	r1, r4
 3659              	.LVL408:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3660              		.loc 1 1520 10 discriminator 3 view .LVU1146
 3661              	.LBE317:
1518:src/display.c **** 	      const int r = v % b;
 3662              		.loc 1 1518 25 discriminator 3 view .LVU1147
 3663 0282 04F10104 		add	r4, r4, #1
 3664              	.LVL409:
1518:src/display.c **** 	      const int r = v % b;
 3665              		.loc 1 1518 16 is_stmt 1 discriminator 3 view .LVU1148
1518:src/display.c **** 	      const int r = v % b;
 3666              		.loc 1 1518 6 is_stmt 0 discriminator 3 view .LVU1149
 3667 0286 E9D2     		bcs	.L303
 3668 0288 039D     		ldr	r5, [sp, #12]
 3669 028a 24E7     		b	.L304
 3670              	.LVL410:
 3671              	.L296:
1512:src/display.c **** 	    if (sign)
 3672              		.loc 1 1512 4 is_stmt 1 view .LVU1150
1512:src/display.c **** 	    if (sign)
 3673              		.loc 1 1512 7 is_stmt 0 view .LVU1151
 3674 028c 58EA0903 		orrs	r3, r8, r9
ARM GAS  /tmp/ccwSk7O0.s 			page 146


 3675 0290 DBD1     		bne	.L297
1513:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3676              		.loc 1 1513 6 is_stmt 1 view .LVU1152
1513:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3677              		.loc 1 1513 9 is_stmt 0 view .LVU1153
 3678 0292 049B     		ldr	r3, [sp, #16]
 3679 0294 002B     		cmp	r3, #0
 3680 0296 69D1     		bne	.L298
 3681              	.LVL411:
 3682              	.L299:
1515:src/display.c **** 	    return;
 3683              		.loc 1 1515 6 is_stmt 1 view .LVU1154
 3684              	.LBB318:
 3685              	.LBI318:
 415:src/display.c ****   if (res) *res++ = ch;
 3686              		.loc 1 415 14 view .LVU1155
 3687              	.LBB319:
 416:src/display.c ****   else	set_dig(base, ch);
 3688              		.loc 1 416 3 view .LVU1156
 416:src/display.c ****   else	set_dig(base, ch);
 3689              		.loc 1 416 6 is_stmt 0 view .LVU1157
 3690 0298 002D     		cmp	r5, #0
 3691 029a 6DD0     		beq	.L301
 3692              	.LVL412:
 3693              	.L300:
 416:src/display.c ****   else	set_dig(base, ch);
 3694              		.loc 1 416 12 is_stmt 1 view .LVU1158
 416:src/display.c ****   else	set_dig(base, ch);
 3695              		.loc 1 416 19 is_stmt 0 view .LVU1159
 3696 029c 3023     		movs	r3, #48
 3697 029e 2B70     		strb	r3, [r5]
 3698              	.LBE319:
 3699              	.LBE318:
1620:src/display.c **** 
 3700              		.loc 1 1620 7 view .LVU1160
 3701 02a0 17B0     		add	sp, sp, #92
 3702              		.cfi_remember_state
 3703              		.cfi_def_cfa_offset 36
 3704              		@ sp needed
 3705 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3706              	.LVL413:
 3707              	.L292:
 3708              		.cfi_restore_state
1500:src/display.c **** 	}
 3709              		.loc 1 1500 11 is_stmt 1 view .LVU1161
1500:src/display.c **** 	}
 3710              		.loc 1 1500 15 is_stmt 0 view .LVU1162
 3711 02a6 FFF7FEFF 		bl	int_base
 3712              	.LVL414:
1500:src/display.c **** 	}
 3713              		.loc 1 1500 15 view .LVU1163
 3714 02aa 8246     		mov	r10, r0
 3715              	.LVL415:
1500:src/display.c **** 	}
 3716              		.loc 1 1500 27 is_stmt 1 view .LVU1164
1503:src/display.c **** 	  IntMaxWindow = 0;
 3717              		.loc 1 1503 2 view .LVU1165
ARM GAS  /tmp/ccwSk7O0.s 			page 147


1503:src/display.c **** 	  IntMaxWindow = 0;
 3718              		.loc 1 1503 5 is_stmt 0 view .LVU1166
 3719 02ac 002D     		cmp	r5, #0
 3720 02ae 7FF4BFAE 		bne	.L294
 3721              	.LVL416:
 3722              	.L374:
1504:src/display.c **** 	  carry_overflow();
 3723              		.loc 1 1504 4 is_stmt 1 view .LVU1167
1504:src/display.c **** 	  carry_overflow();
 3724              		.loc 1 1504 17 is_stmt 0 view .LVU1168
 3725 02b2 284B     		ldr	r3, .L383+12
 3726 02b4 1D60     		str	r5, [r3]
1505:src/display.c **** 	}
 3727              		.loc 1 1505 4 is_stmt 1 view .LVU1169
 3728 02b6 FFF7FEFF 		bl	carry_overflow
 3729              	.LVL417:
 3730 02ba B9E6     		b	.L294
 3731              	.LVL418:
 3732              	.L315:
1566:src/display.c **** 	      *res++ = buf[i];
 3733              		.loc 1 1566 12 view .LVU1170
1566:src/display.c **** 	      *res++ = buf[i];
 3734              		.loc 1 1566 12 is_stmt 0 view .LVU1171
 3735 02bc 05AB     		add	r3, sp, #20
 3736 02be 5818     		adds	r0, r3, r1
1566:src/display.c **** 	      *res++ = buf[i];
 3737              		.loc 1 1566 24 view .LVU1172
 3738 02c0 A4F10D06 		sub	r6, r4, #13
 3739 02c4 6A1E     		subs	r2, r5, #1
 3740              	.LVL419:
 3741              	.L317:
1567:src/display.c **** 	    *res++ = '.';
 3742              		.loc 1 1567 8 is_stmt 1 view .LVU1173
1567:src/display.c **** 	    *res++ = '.';
 3743              		.loc 1 1567 20 is_stmt 0 view .LVU1174
 3744 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3745              	.LVL420:
1567:src/display.c **** 	    *res++ = '.';
 3746              		.loc 1 1567 15 view .LVU1175
 3747 02ca 02F8013F 		strb	r3, [r2, #1]!
 3748              	.LVL421:
1566:src/display.c **** 	      *res++ = buf[i];
 3749              		.loc 1 1566 12 is_stmt 1 view .LVU1176
1566:src/display.c **** 	      *res++ = buf[i];
 3750              		.loc 1 1566 12 is_stmt 0 view .LVU1177
 3751 02ce D343     		mvns	r3, r2
 3752 02d0 0B44     		add	r3, r3, r1
 3753 02d2 2B44     		add	r3, r3, r5
 3754 02d4 9E42     		cmp	r6, r3
 3755 02d6 F6DD     		ble	.L317
 3756 02d8 01F10E03 		add	r3, r1, #14
 3757 02dc 1C1B     		subs	r4, r3, r4
 3758              	.LVL422:
1566:src/display.c **** 	      *res++ = buf[i];
 3759              		.loc 1 1566 12 view .LVU1178
 3760 02de 8E42     		cmp	r6, r1
 3761 02e0 C8BF     		it	gt
ARM GAS  /tmp/ccwSk7O0.s 			page 148


 3762 02e2 0124     		movgt	r4, #1
 3763 02e4 2A19     		adds	r2, r5, r4
 3764              	.LVL423:
1568:src/display.c **** 	    *res++ = '.';
 3765              		.loc 1 1568 6 is_stmt 1 view .LVU1179
1568:src/display.c **** 	    *res++ = '.';
 3766              		.loc 1 1568 13 is_stmt 0 view .LVU1180
 3767 02e6 2E23     		movs	r3, #46
 3768 02e8 2B55     		strb	r3, [r5, r4]
1569:src/display.c **** 	  }
 3769              		.loc 1 1569 6 is_stmt 1 view .LVU1181
 3770              	.LVL424:
1569:src/display.c **** 	  }
 3771              		.loc 1 1569 13 is_stmt 0 view .LVU1182
 3772 02ea 5370     		strb	r3, [r2, #1]
1620:src/display.c **** 
 3773              		.loc 1 1620 7 view .LVU1183
 3774 02ec 17B0     		add	sp, sp, #92
 3775              		.cfi_remember_state
 3776              		.cfi_def_cfa_offset 36
 3777              		@ sp needed
 3778 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3779              	.LVL425:
 3780              	.L376:
 3781              		.cfi_restore_state
 3782              	.LBB321:
1528:src/display.c **** 	      vs |= ~mask;
 3783              		.loc 1 1528 38 discriminator 1 view .LVU1184
 3784 02f2 0BF1FF31 		add	r1, fp, #-1
1528:src/display.c **** 	      vs |= ~mask;
 3785              		.loc 1 1528 18 discriminator 1 view .LVU1185
 3786 02f6 CBF1210C 		rsb	ip, fp, #33
 3787 02fa C840     		lsrs	r0, r0, r1
 3788 02fc 07FA0CFC 		lsl	ip, r7, ip
 3789 0300 2039     		subs	r1, r1, #32
 3790 0302 40EA0C00 		orr	r0, r0, ip
 3791 0306 5CBF     		itt	pl
 3792 0308 47FA01F1 		asrpl	r1, r7, r1
 3793 030c 0843     		orrpl	r0, r0, r1
 3794 030e 00F00108 		and	r8, r0, #1
 3795 0312 4FF00009 		mov	r9, #0
 3796 0316 58EA0901 		orrs	r1, r8, r9
 3797 031a 08D0     		beq	.L306
1529:src/display.c **** 	  }
 3798              		.loc 1 1529 8 is_stmt 1 view .LVU1186
1529:src/display.c **** 	  }
 3799              		.loc 1 1529 11 is_stmt 0 view .LVU1187
 3800 031c 5042     		rsbs	r0, r2, #0
 3801 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3802 0322 40EA0602 		orr	r2, r0, r6
 3803              	.LVL426:
1529:src/display.c **** 	  }
 3804              		.loc 1 1529 11 view .LVU1188
 3805 0326 41EA0703 		orr	r3, r1, r7
 3806              	.LVL427:
1529:src/display.c **** 	  }
 3807              		.loc 1 1529 11 view .LVU1189
ARM GAS  /tmp/ccwSk7O0.s 			page 149


 3808 032a 1646     		mov	r6, r2
 3809              	.LVL428:
1529:src/display.c **** 	  }
 3810              		.loc 1 1529 11 view .LVU1190
 3811 032c 1F46     		mov	r7, r3
 3812              	.L306:
1529:src/display.c **** 	  }
 3813              		.loc 1 1529 11 view .LVU1191
 3814              	.LBE321:
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3815              		.loc 1 1532 4 is_stmt 1 view .LVU1192
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3816              		.loc 1 1532 8 is_stmt 0 view .LVU1193
 3817 032e 084B     		ldr	r3, .L383+8
 3818 0330 1B68     		ldr	r3, [r3]
 3819 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3820              		.loc 1 1532 7 view .LVU1194
 3821 0336 9B07     		lsls	r3, r3, #30
 3822 0338 7FF5E6AE 		bpl	.L336
 3823 033c 0223     		movs	r3, #2
 3824 033e ADE6     		b	.L311
 3825              	.LVL429:
 3826              	.L378:
 3827              	.LBB322:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3828              		.loc 1 1591 33 view .LVU1195
 3829 0340 0826     		movs	r6, #8
1593:src/display.c **** 	  set_separator_decimal_modes();
 3830              		.loc 1 1593 6 view .LVU1196
 3831 0342 4FF0040A 		mov	r10, #4
 3832 0346 17E7     		b	.L320
 3833              	.L384:
 3834              		.align	2
 3835              	.L383:
 3836 0348 00000000 		.word	StateWhileOn
 3837 034c 00000000 		.word	CSWTCH.381
 3838 0350 00000000 		.word	main_ram
 3839 0354 00000000 		.word	IntMaxWindow
 3840 0358 00000000 		.word	.LANCHOR0
 3841 035c 00000000 		.word	.LANCHOR12
 3842              	.LVL430:
 3843              	.L382:
1593:src/display.c **** 	  set_separator_decimal_modes();
 3844              		.loc 1 1593 6 view .LVU1197
 3845              	.LBE322:
1511:src/display.c **** 	  if (v == 0) {
 3846              		.loc 1 1511 6 is_stmt 1 view .LVU1198
1511:src/display.c **** 	  if (v == 0) {
 3847              		.loc 1 1511 8 is_stmt 0 view .LVU1199
 3848 0360 B046     		mov	r8, r6
 3849              	.LVL431:
1511:src/display.c **** 	  if (v == 0) {
 3850              		.loc 1 1511 8 view .LVU1200
 3851 0362 B946     		mov	r9, r7
 3852              	.LVL432:
1512:src/display.c **** 	    if (sign)
ARM GAS  /tmp/ccwSk7O0.s 			page 150


 3853              		.loc 1 1512 4 is_stmt 1 view .LVU1201
1512:src/display.c **** 	    if (sign)
 3854              		.loc 1 1512 7 is_stmt 0 view .LVU1202
 3855 0364 58EA0903 		orrs	r3, r8, r9
 3856 0368 7FF46FAF 		bne	.L297
 3857              	.LVL433:
 3858              	.L298:
1514:src/display.c **** 	    set_dig_s(dig, '0', res);
 3859              		.loc 1 1514 8 is_stmt 1 view .LVU1203
 3860              	.LBB323:
 3861              	.LBI323:
 415:src/display.c ****   if (res) *res++ = ch;
 3862              		.loc 1 415 14 view .LVU1204
 3863              	.LBB324:
 416:src/display.c ****   else	set_dig(base, ch);
 3864              		.loc 1 416 3 view .LVU1205
 416:src/display.c ****   else	set_dig(base, ch);
 3865              		.loc 1 416 6 is_stmt 0 view .LVU1206
 3866 036c 002D     		cmp	r5, #0
 3867 036e 95D1     		bne	.L300
 417:src/display.c ****   return res;
 3868              		.loc 1 417 8 is_stmt 1 view .LVU1207
 3869 0370 2D21     		movs	r1, #45
 3870 0372 5A20     		movs	r0, #90
 3871 0374 FFF7FEFF 		bl	set_dig
 3872              	.LVL434:
 417:src/display.c ****   return res;
 3873              		.loc 1 417 8 is_stmt 0 view .LVU1208
 3874              	.LBE324:
 3875              	.LBE323:
1515:src/display.c **** 	    return;
 3876              		.loc 1 1515 6 is_stmt 1 view .LVU1209
 3877              	.LBB325:
 415:src/display.c ****   if (res) *res++ = ch;
 3878              		.loc 1 415 14 view .LVU1210
 3879              	.LBB320:
 416:src/display.c ****   else	set_dig(base, ch);
 3880              		.loc 1 416 3 view .LVU1211
 3881              	.L301:
 417:src/display.c ****   return res;
 3882              		.loc 1 417 8 view .LVU1212
 3883 0378 3021     		movs	r1, #48
 3884 037a 6320     		movs	r0, #99
 3885 037c FFF7FEFF 		bl	set_dig
 3886              	.LVL435:
 3887 0380 BFE6     		b	.L291
 3888              	.LVL436:
 3889              	.L322:
 417:src/display.c ****   return res;
 3890              		.loc 1 417 8 is_stmt 0 view .LVU1213
 3891              	.LBE320:
 3892              	.LBE325:
 3893              	.LBB326:
1598:src/display.c **** 	  buf[i] = '\0';
 3894              		.loc 1 1598 6 is_stmt 1 view .LVU1214
1598:src/display.c **** 	  buf[i] = '\0';
 3895              		.loc 1 1598 20 is_stmt 0 view .LVU1215
ARM GAS  /tmp/ccwSk7O0.s 			page 151


 3896 0382 0F4A     		ldr	r2, .L385
 3897 0384 6FF3C503 		bfc	r3, #3, #3
 3898 0388 1375     		strb	r3, [r2, #20]
 3899 038a 0027     		movs	r7, #0
 3900 038c 05E7     		b	.L323
 3901              	.LVL437:
 3902              	.L324:
1605:src/display.c **** 	    int ch = buf[j++];
 3903              		.loc 1 1605 14 is_stmt 1 discriminator 1 view .LVU1216
1605:src/display.c **** 	    int ch = buf[j++];
 3904              		.loc 1 1605 4 is_stmt 0 discriminator 1 view .LVU1217
 3905 038e 03F1FF38 		add	r8, r3, #-1
 3906              	.LVL438:
1605:src/display.c **** 	    int ch = buf[j++];
 3907              		.loc 1 1605 4 discriminator 1 view .LVU1218
 3908 0392 002B     		cmp	r3, #0
 3909 0394 7FF414AF 		bne	.L326
1614:src/display.c **** 	    if (dig >= 0)
 3910              		.loc 1 1614 4 is_stmt 1 view .LVU1219
1614:src/display.c **** 	    if (dig >= 0)
 3911              		.loc 1 1614 7 is_stmt 0 view .LVU1220
 3912 0398 049B     		ldr	r3, [sp, #16]
 3913 039a 002B     		cmp	r3, #0
 3914 039c 3FF4B1AE 		beq	.L291
 3915 03a0 4FF0630B 		mov	fp, #99
 3916 03a4 3BE7     		b	.L334
 3917              	.LVL439:
 3918              	.L379:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3919              		.loc 1 1591 33 view .LVU1221
 3920 03a6 0C26     		movs	r6, #12
 3921 03a8 E6E6     		b	.L320
 3922              	.LVL440:
 3923              	.L381:
1617:src/display.c **** 	  }
 3924              		.loc 1 1617 11 is_stmt 1 view .LVU1222
 3925              	.LBB313:
 3926              	.LBI313:
 304:src/display.c **** {
 3927              		.loc 1 304 13 view .LVU1223
 3928              	.LBB314:
 306:src/display.c ****   set_dot(MANT_SIGN);
 3929              		.loc 1 306 3 view .LVU1224
 306:src/display.c ****   set_dot(MANT_SIGN);
 3930              		.loc 1 306 25 is_stmt 0 view .LVU1225
 3931 03aa 064B     		ldr	r3, .L385+4
 3932 03ac 2D22     		movs	r2, #45
 307:src/display.c **** }
 3933              		.loc 1 307 3 view .LVU1226
 3934 03ae 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 3935              		.loc 1 306 25 view .LVU1227
 3936 03b0 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 3937              		.loc 1 307 3 is_stmt 1 view .LVU1228
 3938 03b2 FFF7FEFF 		bl	set_dot
 3939              	.LVL441:
ARM GAS  /tmp/ccwSk7O0.s 			page 152


 308:src/display.c **** 
 3940              		.loc 1 308 1 is_stmt 0 view .LVU1229
 3941 03b6 A4E6     		b	.L291
 3942              	.LVL442:
 3943              	.L337:
 308:src/display.c **** 
 3944              		.loc 1 308 1 view .LVU1230
 3945              	.LBE314:
 3946              	.LBE313:
 3947              	.LBE326:
 3948              	.LBB327:
1549:src/display.c **** 	      const int r = v % b;
 3949              		.loc 1 1549 6 view .LVU1231
 3950 03b8 4FF0FF31 		mov	r1, #-1
 3951 03bc 8BE6     		b	.L304
 3952              	.L386:
 3953 03be 00BF     		.align	2
 3954              	.L385:
 3955 03c0 00000000 		.word	StateWhileOn
 3956 03c4 00000000 		.word	LastDisplayedNumber
 3957              	.LBE327:
 3958              		.cfi_endproc
 3959              	.LFE18:
 3961              		.section	.text.getdig,"ax",%progbits
 3962              		.align	1
 3963              		.p2align 2,,3
 3964              		.global	getdig
 3965              		.syntax unified
 3966              		.thumb
 3967              		.thumb_func
 3968              		.fpu fpv4-sp-d16
 3970              	getdig:
 3971              	.LVL443:
 3972              	.LFB6:
 342:src/display.c ****   // perform index lookup
 3973              		.loc 1 342 1 is_stmt 1 view -0
 3974              		.cfi_startproc
 3975              		@ args = 0, pretend = 0, frame = 0
 3976              		@ frame_needed = 0, uses_anonymous_args = 0
 3977              		@ link register save eliminated.
 344:src/display.c **** }
 3978              		.loc 1 344 3 view .LVU1233
 344:src/display.c **** }
 3979              		.loc 1 344 16 is_stmt 0 view .LVU1234
 3980 0000 014B     		ldr	r3, .L388
 344:src/display.c **** }
 3981              		.loc 1 344 19 view .LVU1235
 3982 0002 C0B2     		uxtb	r0, r0
 3983              	.LVL444:
 345:src/display.c **** 
 3984              		.loc 1 345 1 view .LVU1236
 3985 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 3986 0006 7047     		bx	lr
 3987              	.L389:
 3988              		.align	2
 3989              	.L388:
 3990 0008 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccwSk7O0.s 			page 153


 3991              		.cfi_endproc
 3992              	.LFE6:
 3994              		.section	.text.dot,"ax",%progbits
 3995              		.align	1
 3996              		.p2align 2,,3
 3997              		.global	dot
 3998              		.syntax unified
 3999              		.thumb
 4000              		.thumb_func
 4001              		.fpu fpv4-sp-d16
 4003              	dot:
 4004              	.LVL445:
 4005              	.LFB7:
 347:src/display.c ****   if (on)	set_dot(n);
 4006              		.loc 1 347 25 is_stmt 1 view -0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
 4010              		@ link register save eliminated.
 348:src/display.c ****   else	clr_dot(n);
 4011              		.loc 1 348 3 view .LVU1238
 348:src/display.c ****   else	clr_dot(n);
 4012              		.loc 1 348 6 is_stmt 0 view .LVU1239
 4013 0000 09B1     		cbz	r1, .L391
 348:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 348 11 is_stmt 1 discriminator 1 view .LVU1240
 4015 0002 FFF7FEBF 		b	set_dot
 4016              	.LVL446:
 4017              	.L391:
 349:src/display.c **** }
 4018              		.loc 1 349 8 view .LVU1241
 4019 0006 FFF7FEBF 		b	clr_dot
 4020              	.LVL447:
 349:src/display.c **** }
 4021              		.loc 1 349 8 is_stmt 0 view .LVU1242
 4022              		.cfi_endproc
 4023              	.LFE7:
 4025 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4026              		.align	1
 4027              		.p2align 2,,3
 4028              		.global	std_round_fix
 4029              		.syntax unified
 4030              		.thumb
 4031              		.thumb_func
 4032              		.fpu fpv4-sp-d16
 4034              	std_round_fix:
 4035              	.LVL448:
 4036              	.LFB24:
1838:src/display.c **** 	decNumber c;
 4037              		.loc 1 1838 93 is_stmt 1 view -0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 40
 4040              		@ frame_needed = 0, uses_anonymous_args = 0
1838:src/display.c **** 	decNumber c;
 4041              		.loc 1 1838 93 is_stmt 0 view .LVU1244
 4042 0000 70B5     		push	{r4, r5, r6, lr}
 4043              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccwSk7O0.s 			page 154


 4044              		.cfi_offset 4, -16
 4045              		.cfi_offset 5, -12
 4046              		.cfi_offset 6, -8
 4047              		.cfi_offset 14, -4
 4048 0002 0E46     		mov	r6, r1
1839:src/display.c **** 	int true_exp, x=0;
 4049              		.loc 1 1839 2 is_stmt 1 view .LVU1245
1840:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4050              		.loc 1 1840 2 view .LVU1246
 4051              	.LVL449:
1841:src/display.c **** 
 4052              		.loc 1 1841 2 view .LVU1247
1843:src/display.c **** 	  min_pos_exp = 9;
 4053              		.loc 1 1843 2 view .LVU1248
1838:src/display.c **** 	decNumber c;
 4054              		.loc 1 1838 93 is_stmt 0 view .LVU1249
 4055 0004 8AB0     		sub	sp, sp, #40
 4056              		.cfi_def_cfa_offset 56
1843:src/display.c **** 	  min_pos_exp = 9;
 4057              		.loc 1 1843 5 view .LVU1250
 4058 0006 92B9     		cbnz	r2, .L393
1848:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4059              		.loc 1 1848 4 is_stmt 1 view .LVU1251
 4060              	.LVL450:
1849:src/display.c **** 	}
 4061              		.loc 1 1849 4 view .LVU1252
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4062              		.loc 1 1852 2 view .LVU1253
 4063 0008 0146     		mov	r1, r0
 4064              	.LVL451:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4065              		.loc 1 1852 2 is_stmt 0 view .LVU1254
 4066 000a 01A8     		add	r0, sp, #4
 4067              	.LVL452:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4068              		.loc 1 1852 2 view .LVU1255
 4069 000c 1D46     		mov	r5, r3
 4070 000e FFF7FEFF 		bl	dn_abs
 4071              	.LVL453:
1853:src/display.c **** 
 4072              		.loc 1 1853 2 is_stmt 1 view .LVU1256
1853:src/display.c **** 
 4073              		.loc 1 1853 24 is_stmt 0 view .LVU1257
 4074 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4075 0016 1844     		add	r0, r0, r3
 4076              	.LVL454:
1855:src/display.c **** 	  x = *dd;
 4077              		.loc 1 1855 2 is_stmt 1 view .LVU1258
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4078              		.loc 1 1859 2 view .LVU1259
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4079              		.loc 1 1859 5 is_stmt 0 view .LVU1260
 4080 0018 0138     		subs	r0, r0, #1
 4081 001a 1AD5     		bpl	.L397
1849:src/display.c **** 	}
 4082              		.loc 1 1849 16 view .LVU1261
 4083 001c EB43     		mvns	r3, r5
ARM GAS  /tmp/ccwSk7O0.s 			page 155


1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4084              		.loc 1 1859 21 view .LVU1262
 4085 001e 8342     		cmp	r3, r0
 4086 0020 17DA     		bge	.L397
 4087              	.LVL455:
 4088              	.L399:
1861:src/display.c **** 	  return MODE_FIX;
 4089              		.loc 1 1861 4 is_stmt 1 view .LVU1263
1861:src/display.c **** 	  return MODE_FIX;
 4090              		.loc 1 1861 8 is_stmt 0 view .LVU1264
 4091 0022 3368     		ldr	r3, [r6]
 4092 0024 181A     		subs	r0, r3, r0
 4093 0026 3060     		str	r0, [r6]
1862:src/display.c **** 	}
 4094              		.loc 1 1862 4 is_stmt 1 view .LVU1265
1862:src/display.c **** 	}
 4095              		.loc 1 1862 11 is_stmt 0 view .LVU1266
 4096 0028 0120     		movs	r0, #1
1871:src/display.c **** #else
 4097              		.loc 1 1871 7 view .LVU1267
 4098 002a 0AB0     		add	sp, sp, #40
 4099              		.cfi_remember_state
 4100              		.cfi_def_cfa_offset 16
 4101              		@ sp needed
 4102 002c 70BD     		pop	{r4, r5, r6, pc}
 4103              	.LVL456:
 4104              	.L393:
 4105              		.cfi_restore_state
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4106              		.loc 1 1852 2 is_stmt 1 view .LVU1268
 4107 002e 0146     		mov	r1, r0
 4108              	.LVL457:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4109              		.loc 1 1852 2 is_stmt 0 view .LVU1269
 4110 0030 01A8     		add	r0, sp, #4
 4111              	.LVL458:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4112              		.loc 1 1852 2 view .LVU1270
 4113 0032 1446     		mov	r4, r2
 4114 0034 FFF7FEFF 		bl	dn_abs
 4115              	.LVL459:
1853:src/display.c **** 
 4116              		.loc 1 1853 2 is_stmt 1 view .LVU1271
1853:src/display.c **** 
 4117              		.loc 1 1853 24 is_stmt 0 view .LVU1272
 4118 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1855:src/display.c **** 	  x = *dd;
 4119              		.loc 1 1855 5 view .LVU1273
 4120 003c 052C     		cmp	r4, #5
1853:src/display.c **** 
 4121              		.loc 1 1853 24 view .LVU1274
 4122 003e 1344     		add	r3, r3, r2
1853:src/display.c **** 
 4123              		.loc 1 1853 11 view .LVU1275
 4124 0040 03F1FF30 		add	r0, r3, #-1
 4125              	.LVL460:
1855:src/display.c **** 	  x = *dd;
ARM GAS  /tmp/ccwSk7O0.s 			page 156


 4126              		.loc 1 1855 2 is_stmt 1 view .LVU1276
1855:src/display.c **** 	  x = *dd;
 4127              		.loc 1 1855 5 is_stmt 0 view .LVU1277
 4128 0044 15D1     		bne	.L401
1856:src/display.c **** 	}
 4129              		.loc 1 1856 4 is_stmt 1 view .LVU1278
1856:src/display.c **** 	}
 4130              		.loc 1 1856 6 is_stmt 0 view .LVU1279
 4131 0046 3268     		ldr	r2, [r6]
 4132              	.LVL461:
 4133              	.L396:
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4134              		.loc 1 1859 2 is_stmt 1 view .LVU1280
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4135              		.loc 1 1859 5 is_stmt 0 view .LVU1281
 4136 0048 8242     		cmp	r2, r0
 4137 004a 05DC     		bgt	.L405
1865:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4138              		.loc 1 1865 53 discriminator 2 view .LVU1282
 4139 004c 0333     		adds	r3, r3, #3
 4140 004e 0C2B     		cmp	r3, #12
 4141 0050 04D8     		bhi	.L400
 4142              	.LVL462:
 4143              	.L397:
1869:src/display.c **** 	}
 4144              		.loc 1 1869 11 view .LVU1283
 4145 0052 0020     		movs	r0, #0
1871:src/display.c **** #else
 4146              		.loc 1 1871 7 view .LVU1284
 4147 0054 0AB0     		add	sp, sp, #40
 4148              		.cfi_remember_state
 4149              		.cfi_def_cfa_offset 16
 4150              		@ sp needed
 4151 0056 70BD     		pop	{r4, r5, r6, pc}
 4152              	.LVL463:
 4153              	.L405:
 4154              		.cfi_restore_state
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4155              		.loc 1 1859 21 view .LVU1285
 4156 0058 031D     		adds	r3, r0, #4
 4157 005a E2DA     		bge	.L399
 4158              	.L400:
 4159              	.LBB330:
 4160              	.LBI330:
1838:src/display.c **** 	decNumber c;
 4161              		.loc 1 1838 26 is_stmt 1 view .LVU1286
 4162              	.LVL464:
 4163              	.LBB331:
1866:src/display.c **** 	}
 4164              		.loc 1 1866 4 view .LVU1287
1866:src/display.c **** 	}
 4165              		.loc 1 1866 24 is_stmt 0 view .LVU1288
 4166 005c 064B     		ldr	r3, .L406
 4167 005e 1B68     		ldr	r3, [r3]
 4168 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1866:src/display.c **** 	}
 4169              		.loc 1 1866 33 view .LVU1289
ARM GAS  /tmp/ccwSk7O0.s 			page 157


 4170 0064 13F0100F 		tst	r3, #16
 4171 0068 14BF     		ite	ne
 4172 006a 0320     		movne	r0, #3
 4173 006c 0220     		moveq	r0, #2
 4174              	.LBE331:
 4175              	.LBE330:
1871:src/display.c **** #else
 4176              		.loc 1 1871 7 view .LVU1290
 4177 006e 0AB0     		add	sp, sp, #40
 4178              		.cfi_remember_state
 4179              		.cfi_def_cfa_offset 16
 4180              		@ sp needed
 4181 0070 70BD     		pop	{r4, r5, r6, pc}
 4182              	.LVL465:
 4183              	.L401:
 4184              		.cfi_restore_state
1840:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4185              		.loc 1 1840 16 view .LVU1291
 4186 0072 0022     		movs	r2, #0
 4187 0074 E8E7     		b	.L396
 4188              	.L407:
 4189 0076 00BF     		.align	2
 4190              	.L406:
 4191 0078 00000000 		.word	main_ram
 4192              		.cfi_endproc
 4193              	.LFE24:
 4195              		.section	.text.set_IO_annunciator,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	set_IO_annunciator
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	set_IO_annunciator:
 4205              	.LFB33:
2651:src/display.c **** #ifndef DM42
 4206              		.loc 1 2651 37 is_stmt 1 view -0
 4207              		.cfi_startproc
 4208              		@ args = 0, pretend = 0, frame = 0
 4209              		@ frame_needed = 0, uses_anonymous_args = 0
2656:src/display.c **** #endif
 4210              		.loc 1 2656 4 view .LVU1293
2651:src/display.c **** #ifndef DM42
 4211              		.loc 1 2651 37 is_stmt 0 view .LVU1294
 4212 0000 38B5     		push	{r3, r4, r5, lr}
 4213              		.cfi_def_cfa_offset 16
 4214              		.cfi_offset 3, -16
 4215              		.cfi_offset 4, -12
 4216              		.cfi_offset 5, -8
 4217              		.cfi_offset 14, -4
2662:src/display.c **** #endif
 4218              		.loc 1 2662 4 view .LVU1295
 4219 0002 0D4B     		ldr	r3, .L414
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4220              		.loc 1 2666 9 view .LVU1296
 4221 0004 0D4C     		ldr	r4, .L414+4
ARM GAS  /tmp/ccwSk7O0.s 			page 158


2662:src/display.c **** #endif
 4222              		.loc 1 2662 4 view .LVU1297
 4223 0006 1B68     		ldr	r3, [r3]
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4224              		.loc 1 2666 5 view .LVU1298
 4225 0008 2268     		ldr	r2, [r4]
2662:src/display.c **** #endif
 4226              		.loc 1 2662 4 view .LVU1299
 4227 000a 1D1E     		subs	r5, r3, #0
 4228 000c 18BF     		it	ne
 4229 000e 0125     		movne	r5, #1
 4230              	.LVL466:
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4231              		.loc 1 2666 2 is_stmt 1 view .LVU1300
2666:src/display.c **** 	  dot(LIT_EQ, on);
 4232              		.loc 1 2666 5 is_stmt 0 view .LVU1301
 4233 0010 AA42     		cmp	r2, r5
 4234 0012 0FD0     		beq	.L408
2667:src/display.c **** 	  IoAnnunciator = on;
 4235              		.loc 1 2667 4 is_stmt 1 view .LVU1302
 4236              	.LVL467:
 4237              	.LBB332:
 4238              	.LBI332:
 347:src/display.c ****   if (on)	set_dot(n);
 4239              		.loc 1 347 6 view .LVU1303
 4240              	.LBB333:
 348:src/display.c ****   else	clr_dot(n);
 4241              		.loc 1 348 3 view .LVU1304
 348:src/display.c ****   else	clr_dot(n);
 4242              		.loc 1 348 11 is_stmt 0 view .LVU1305
 4243 0014 8420     		movs	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4244              		.loc 1 348 6 view .LVU1306
 4245 0016 33B9     		cbnz	r3, .L413
 349:src/display.c **** }
 4246              		.loc 1 349 8 is_stmt 1 view .LVU1307
 4247 0018 FFF7FEFF 		bl	clr_dot
 4248              	.LVL468:
 349:src/display.c **** }
 4249              		.loc 1 349 8 is_stmt 0 view .LVU1308
 4250              	.LBE333:
 4251              	.LBE332:
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4252              		.loc 1 2668 4 is_stmt 1 view .LVU1309
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4253              		.loc 1 2668 18 is_stmt 0 view .LVU1310
 4254 001c 2560     		str	r5, [r4]
2669:src/display.c **** 	}
 4255              		.loc 1 2669 4 is_stmt 1 view .LVU1311
2671:src/display.c **** 
 4256              		.loc 1 2671 7 is_stmt 0 view .LVU1312
 4257 001e BDE83840 		pop	{r3, r4, r5, lr}
 4258              		.cfi_remember_state
 4259              		.cfi_restore 14
 4260              		.cfi_restore 5
 4261              		.cfi_restore 4
 4262              		.cfi_restore 3
ARM GAS  /tmp/ccwSk7O0.s 			page 159


 4263              		.cfi_def_cfa_offset 0
 4264              	.LVL469:
2669:src/display.c **** 	}
 4265              		.loc 1 2669 4 view .LVU1313
 4266 0022 FFF7FEBF 		b	finish_display
 4267              	.LVL470:
 4268              	.L413:
 4269              		.cfi_restore_state
 4270              	.LBB335:
 4271              	.LBB334:
 348:src/display.c ****   else	clr_dot(n);
 4272              		.loc 1 348 11 is_stmt 1 view .LVU1314
 4273 0026 FFF7FEFF 		bl	set_dot
 4274              	.LVL471:
 348:src/display.c ****   else	clr_dot(n);
 4275              		.loc 1 348 11 is_stmt 0 view .LVU1315
 4276              	.LBE334:
 4277              	.LBE335:
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4278              		.loc 1 2668 4 is_stmt 1 view .LVU1316
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4279              		.loc 1 2668 18 is_stmt 0 view .LVU1317
 4280 002a 2560     		str	r5, [r4]
2669:src/display.c **** 	}
 4281              		.loc 1 2669 4 is_stmt 1 view .LVU1318
2671:src/display.c **** 
 4282              		.loc 1 2671 7 is_stmt 0 view .LVU1319
 4283 002c BDE83840 		pop	{r3, r4, r5, lr}
 4284              		.cfi_remember_state
 4285              		.cfi_restore 14
 4286              		.cfi_restore 5
 4287              		.cfi_restore 4
 4288              		.cfi_restore 3
 4289              		.cfi_def_cfa_offset 0
 4290              	.LVL472:
2669:src/display.c **** 	}
 4291              		.loc 1 2669 4 view .LVU1320
 4292 0030 FFF7FEBF 		b	finish_display
 4293              	.LVL473:
 4294              	.L408:
 4295              		.cfi_restore_state
2671:src/display.c **** 
 4296              		.loc 1 2671 7 view .LVU1321
 4297 0034 38BD     		pop	{r3, r4, r5, pc}
 4298              	.LVL474:
 4299              	.L415:
2671:src/display.c **** 
 4300              		.loc 1 2671 7 view .LVU1322
 4301 0036 00BF     		.align	2
 4302              	.L414:
 4303 0038 00000000 		.word	PrinterColumn
 4304 003c 00000000 		.word	IoAnnunciator
 4305              		.cfi_endproc
 4306              	.LFE33:
 4308              		.section	.text.set_annunciators,"ax",%progbits
 4309              		.align	1
 4310              		.p2align 2,,3
ARM GAS  /tmp/ccwSk7O0.s 			page 160


 4311              		.syntax unified
 4312              		.thumb
 4313              		.thumb_func
 4314              		.fpu fpv4-sp-d16
 4316              	set_annunciators:
 4317              	.LFB32:
2620:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4318              		.loc 1 2620 7 is_stmt 1 view -0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 0
 4321              		@ frame_needed = 0, uses_anonymous_args = 0
2621:src/display.c **** 
 4322              		.loc 1 2621 2 view .LVU1324
2620:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4323              		.loc 1 2620 7 is_stmt 0 view .LVU1325
 4324 0000 70B5     		push	{r4, r5, r6, lr}
 4325              		.cfi_def_cfa_offset 16
 4326              		.cfi_offset 4, -16
 4327              		.cfi_offset 5, -12
 4328              		.cfi_offset 6, -8
 4329              		.cfi_offset 14, -4
2628:src/display.c **** #else
 4330              		.loc 1 2628 11 view .LVU1326
 4331 0002 364C     		ldr	r4, .L446
2621:src/display.c **** 
 4332              		.loc 1 2621 29 view .LVU1327
 4333 0004 FFF7FEFF 		bl	get_trig_mode
 4334              	.LVL475:
2628:src/display.c **** #else
 4335              		.loc 1 2628 11 view .LVU1328
 4336 0008 2368     		ldr	r3, [r4]
 4337 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2628:src/display.c **** #else
 4338              		.loc 1 2628 2 view .LVU1329
 4339 000e 1B07     		lsls	r3, r3, #28
2621:src/display.c **** 
 4340              		.loc 1 2621 29 view .LVU1330
 4341 0010 0546     		mov	r5, r0
 4342              	.LVL476:
2628:src/display.c **** #else
 4343              		.loc 1 2628 2 is_stmt 1 view .LVU1331
 4344              	.LBB336:
 4345              	.LBB337:
 348:src/display.c ****   else	clr_dot(n);
 4346              		.loc 1 348 11 is_stmt 0 view .LVU1332
 4347 0012 4FF08800 		mov	r0, #136
 4348              	.LBE337:
 4349              	.LBE336:
2628:src/display.c **** #else
 4350              		.loc 1 2628 2 view .LVU1333
 4351 0016 03D5     		bpl	.L417
2628:src/display.c **** #else
 4352              		.loc 1 2628 33 discriminator 1 view .LVU1334
 4353 0018 314B     		ldr	r3, .L446+4
2628:src/display.c **** #else
 4354              		.loc 1 2628 2 discriminator 1 view .LVU1335
 4355 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccwSk7O0.s 			page 161


 4356 001c 002B     		cmp	r3, #0
 4357 001e 5AD0     		beq	.L443
 4358              	.L417:
 4359              	.LVL477:
 4360              	.LBB340:
 4361              	.LBI336:
 347:src/display.c ****   if (on)	set_dot(n);
 4362              		.loc 1 347 6 is_stmt 1 view .LVU1336
 4363              	.LBB338:
 348:src/display.c ****   else	clr_dot(n);
 4364              		.loc 1 348 3 view .LVU1337
 349:src/display.c **** }
 4365              		.loc 1 349 8 view .LVU1338
 4366 0020 FFF7FEFF 		bl	clr_dot
 4367              	.LVL478:
 4368              	.L418:
 349:src/display.c **** }
 4369              		.loc 1 349 8 is_stmt 0 view .LVU1339
 4370              	.LBE338:
 4371              	.LBE340:
2633:src/display.c **** #endif
 4372              		.loc 1 2633 2 is_stmt 1 view .LVU1340
2633:src/display.c **** #endif
 4373              		.loc 1 2633 14 is_stmt 0 view .LVU1341
 4374 0024 2368     		ldr	r3, [r4]
 4375 0026 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2633:src/display.c **** #endif
 4376              		.loc 1 2633 2 view .LVU1342
 4377 002a 5607     		lsls	r6, r2, #29
 4378              	.LBB341:
 4379              	.LBB342:
 348:src/display.c ****   else	clr_dot(n);
 4380              		.loc 1 348 11 view .LVU1343
 4381 002c 4FF08400 		mov	r0, #132
 4382              	.LBE342:
 4383              	.LBE341:
2633:src/display.c **** #endif
 4384              		.loc 1 2633 2 view .LVU1344
 4385 0030 03D5     		bpl	.L419
2633:src/display.c **** #endif
 4386              		.loc 1 2633 14 discriminator 1 view .LVU1345
 4387 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
2633:src/display.c **** #endif
 4388              		.loc 1 2633 2 discriminator 1 view .LVU1346
 4389 0036 5907     		lsls	r1, r3, #29
 4390 0038 4AD4     		bmi	.L420
 4391              	.L419:
 4392              	.LVL479:
 4393              	.LBB345:
 4394              	.LBI341:
 347:src/display.c ****   if (on)	set_dot(n);
 4395              		.loc 1 347 6 is_stmt 1 view .LVU1347
 4396              	.LBB343:
 348:src/display.c ****   else	clr_dot(n);
 4397              		.loc 1 348 3 view .LVU1348
 349:src/display.c **** }
 4398              		.loc 1 349 8 view .LVU1349
ARM GAS  /tmp/ccwSk7O0.s 			page 162


 4399 003a FFF7FEFF 		bl	clr_dot
 4400              	.LVL480:
 4401              	.L421:
 349:src/display.c **** }
 4402              		.loc 1 349 8 is_stmt 0 view .LVU1350
 4403              	.LBE343:
 4404              	.LBE345:
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4405              		.loc 1 2636 2 is_stmt 1 view .LVU1351
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4406              		.loc 1 2636 19 is_stmt 0 view .LVU1352
 4407 003e 294E     		ldr	r6, .L446+8
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4408              		.loc 1 2636 2 view .LVU1353
 4409 0040 B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4410              	.LBB346:
 4411              	.LBB347:
 348:src/display.c ****   else	clr_dot(n);
 4412              		.loc 1 348 11 view .LVU1354
 4413 0042 8620     		movs	r0, #134
 4414              	.LBE347:
 4415              	.LBE346:
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4416              		.loc 1 2636 2 view .LVU1355
 4417 0044 23B9     		cbnz	r3, .L422
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4418              		.loc 1 2636 47 discriminator 2 view .LVU1356
 4419 0046 7269     		ldr	r2, [r6, #20]
 4420 0048 274B     		ldr	r3, .L446+12
 4421 004a 1340     		ands	r3, r3, r2
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4422              		.loc 1 2636 2 discriminator 2 view .LVU1357
 4423 004c 002B     		cmp	r3, #0
 4424 004e 3CD0     		beq	.L444
 4425              	.L422:
 4426              	.LBB350:
 4427              	.LBB348:
 348:src/display.c ****   else	clr_dot(n);
 4428              		.loc 1 348 11 is_stmt 1 view .LVU1358
 4429 0050 FFF7FEFF 		bl	set_dot
 4430              	.LVL481:
 4431              	.L423:
 4432              	.LBE348:
 4433              	.LBE350:
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4434              		.loc 1 2637 2 view .LVU1359
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4435              		.loc 1 2637 31 is_stmt 0 view .LVU1360
 4436 0054 254A     		ldr	r2, .L446+16
 4437 0056 7369     		ldr	r3, [r6, #20]
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4438              		.loc 1 2637 2 view .LVU1361
 4439 0058 1A42     		tst	r2, r3
 4440              	.LBB351:
 4441              	.LBB352:
 348:src/display.c ****   else	clr_dot(n);
 4442              		.loc 1 348 11 view .LVU1362
ARM GAS  /tmp/ccwSk7O0.s 			page 163


 4443 005a 4FF08500 		mov	r0, #133
 4444              	.LBE352:
 4445              	.LBE351:
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4446              		.loc 1 2637 2 view .LVU1363
 4447 005e 02D0     		beq	.L424
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4448              		.loc 1 2637 48 discriminator 1 view .LVU1364
 4449 0060 B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4450              		.loc 1 2637 2 discriminator 1 view .LVU1365
 4451 0062 DA06     		lsls	r2, r3, #27
 4452 0064 2ED4     		bmi	.L425
 4453              	.L424:
 4454              	.LVL482:
 4455              	.LBB355:
 4456              	.LBI351:
 347:src/display.c ****   if (on)	set_dot(n);
 4457              		.loc 1 347 6 is_stmt 1 view .LVU1366
 4458              	.LBB353:
 348:src/display.c ****   else	clr_dot(n);
 4459              		.loc 1 348 3 view .LVU1367
 349:src/display.c **** }
 4460              		.loc 1 349 8 view .LVU1368
 4461 0066 FFF7FEFF 		bl	clr_dot
 4462              	.LVL483:
 4463              	.L426:
 349:src/display.c **** }
 4464              		.loc 1 349 8 is_stmt 0 view .LVU1369
 4465              	.LBE353:
 4466              	.LBE355:
2638:src/display.c **** 	set_IO_annunciator();
 4467              		.loc 1 2638 2 is_stmt 1 view .LVU1370
 4468 006a 6820     		movs	r0, #104
 4469 006c FFF7FEFF 		bl	get_user_flag
 4470              	.LVL484:
 4471              	.LBB356:
 4472              	.LBI356:
 347:src/display.c ****   if (on)	set_dot(n);
 4473              		.loc 1 347 6 view .LVU1371
 4474              	.LBB357:
 348:src/display.c ****   else	clr_dot(n);
 4475              		.loc 1 348 3 view .LVU1372
 348:src/display.c ****   else	clr_dot(n);
 4476              		.loc 1 348 6 is_stmt 0 view .LVU1373
 4477 0070 20B3     		cbz	r0, .L427
 348:src/display.c ****   else	clr_dot(n);
 4478              		.loc 1 348 11 is_stmt 1 view .LVU1374
 4479 0072 8320     		movs	r0, #131
 4480              	.LVL485:
 348:src/display.c ****   else	clr_dot(n);
 4481              		.loc 1 348 11 is_stmt 0 view .LVU1375
 4482 0074 FFF7FEFF 		bl	set_dot
 4483              	.LVL486:
 4484              	.L428:
 348:src/display.c ****   else	clr_dot(n);
 4485              		.loc 1 348 11 view .LVU1376
ARM GAS  /tmp/ccwSk7O0.s 			page 164


 4486              	.LBE357:
 4487              	.LBE356:
2639:src/display.c **** 
 4488              		.loc 1 2639 2 is_stmt 1 view .LVU1377
 4489 0078 FFF7FEFF 		bl	set_IO_annunciator
 4490              	.LVL487:
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4491              		.loc 1 2643 2 view .LVU1378
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4492              		.loc 1 2643 11 is_stmt 0 view .LVU1379
 4493 007c 2368     		ldr	r3, [r4]
 4494 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4495 0082 03F00103 		and	r3, r3, #1
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4496              		.loc 1 2643 2 view .LVU1380
 4497 0086 2B43     		orrs	r3, r3, r5
 4498 0088 13F0FF0F 		tst	r3, #255
 4499              	.LBB359:
 4500              	.LBB360:
 348:src/display.c ****   else	clr_dot(n);
 4501              		.loc 1 348 11 view .LVU1381
 4502 008c 4FF08C00 		mov	r0, #140
 4503              	.LBE360:
 4504              	.LBE359:
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4505              		.loc 1 2643 2 view .LVU1382
 4506 0090 06D1     		bne	.L445
 4507              	.LVL488:
 4508              	.LBB363:
 4509              	.LBI359:
 347:src/display.c ****   if (on)	set_dot(n);
 4510              		.loc 1 347 6 is_stmt 1 view .LVU1383
 4511              	.LBB361:
 348:src/display.c ****   else	clr_dot(n);
 4512              		.loc 1 348 3 view .LVU1384
 348:src/display.c ****   else	clr_dot(n);
 4513              		.loc 1 348 11 view .LVU1385
 4514 0092 FFF7FEFF 		bl	set_dot
 4515              	.LVL489:
 348:src/display.c ****   else	clr_dot(n);
 4516              		.loc 1 348 11 is_stmt 0 view .LVU1386
 4517              	.LBE361:
 4518              	.LBE363:
2644:src/display.c ****       }
 4519              		.loc 1 2644 2 is_stmt 1 view .LVU1387
 4520              	.L431:
 4521              	.LBB364:
 4522              	.LBI364:
 347:src/display.c ****   if (on)	set_dot(n);
 4523              		.loc 1 347 6 view .LVU1388
 4524              	.LBB365:
 348:src/display.c ****   else	clr_dot(n);
 4525              		.loc 1 348 3 view .LVU1389
 349:src/display.c **** }
 4526              		.loc 1 349 8 view .LVU1390
 4527              	.LBE365:
 4528              	.LBE364:
ARM GAS  /tmp/ccwSk7O0.s 			page 165


2645:src/display.c **** 
 4529              		.loc 1 2645 7 is_stmt 0 view .LVU1391
 4530 0096 BDE87040 		pop	{r4, r5, r6, lr}
 4531              		.cfi_remember_state
 4532              		.cfi_restore 14
 4533              		.cfi_restore 6
 4534              		.cfi_restore 5
 4535              		.cfi_restore 4
 4536              		.cfi_def_cfa_offset 0
 4537              	.LVL490:
 4538              	.LBB369:
 4539              	.LBB366:
 349:src/display.c **** }
 4540              		.loc 1 349 8 view .LVU1392
 4541 009a 8B20     		movs	r0, #139
 4542 009c FFF7FEBF 		b	clr_dot
 4543              	.LVL491:
 4544              	.L445:
 4545              		.cfi_restore_state
 349:src/display.c **** }
 4546              		.loc 1 349 8 view .LVU1393
 4547              	.LBE366:
 4548              	.LBE369:
 4549              	.LBB370:
 347:src/display.c ****   if (on)	set_dot(n);
 4550              		.loc 1 347 6 is_stmt 1 view .LVU1394
 4551              	.LBB362:
 348:src/display.c ****   else	clr_dot(n);
 4552              		.loc 1 348 3 view .LVU1395
 349:src/display.c **** }
 4553              		.loc 1 349 8 view .LVU1396
 4554 00a0 FFF7FEFF 		bl	clr_dot
 4555              	.LVL492:
 349:src/display.c **** }
 4556              		.loc 1 349 8 is_stmt 0 view .LVU1397
 4557              	.LBE362:
 4558              	.LBE370:
2644:src/display.c ****       }
 4559              		.loc 1 2644 2 is_stmt 1 view .LVU1398
2644:src/display.c ****       }
 4560              		.loc 1 2644 11 is_stmt 0 view .LVU1399
 4561 00a4 2368     		ldr	r3, [r4]
 4562 00a6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2644:src/display.c ****       }
 4563              		.loc 1 2644 2 view .LVU1400
 4564 00aa DB07     		lsls	r3, r3, #31
 4565 00ac F3D4     		bmi	.L431
2644:src/display.c ****       }
 4566              		.loc 1 2644 2 discriminator 1 view .LVU1401
 4567 00ae 012D     		cmp	r5, #1
 4568 00b0 F1D1     		bne	.L431
 4569              	.LVL493:
 4570              	.LBB371:
 347:src/display.c ****   if (on)	set_dot(n);
 4571              		.loc 1 347 6 is_stmt 1 view .LVU1402
 4572              	.LBB367:
 348:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/ccwSk7O0.s 			page 166


 4573              		.loc 1 348 3 view .LVU1403
 348:src/display.c ****   else	clr_dot(n);
 4574              		.loc 1 348 11 view .LVU1404
 4575              	.LBE367:
 4576              	.LBE371:
2645:src/display.c **** 
 4577              		.loc 1 2645 7 is_stmt 0 view .LVU1405
 4578 00b2 BDE87040 		pop	{r4, r5, r6, lr}
 4579              		.cfi_remember_state
 4580              		.cfi_restore 14
 4581              		.cfi_restore 6
 4582              		.cfi_restore 5
 4583              		.cfi_restore 4
 4584              		.cfi_def_cfa_offset 0
 4585              	.LVL494:
 4586              	.LBB372:
 4587              	.LBB368:
 348:src/display.c ****   else	clr_dot(n);
 4588              		.loc 1 348 11 view .LVU1406
 4589 00b6 8B20     		movs	r0, #139
 4590 00b8 FFF7FEBF 		b	set_dot
 4591              	.LVL495:
 4592              	.L427:
 4593              		.cfi_restore_state
 348:src/display.c ****   else	clr_dot(n);
 4594              		.loc 1 348 11 view .LVU1407
 4595              	.LBE368:
 4596              	.LBE372:
 4597              	.LBB373:
 4598              	.LBB358:
 349:src/display.c **** }
 4599              		.loc 1 349 8 is_stmt 1 view .LVU1408
 4600 00bc 8320     		movs	r0, #131
 4601              	.LVL496:
 349:src/display.c **** }
 4602              		.loc 1 349 8 is_stmt 0 view .LVU1409
 4603 00be FFF7FEFF 		bl	clr_dot
 4604              	.LVL497:
 4605 00c2 D9E7     		b	.L428
 4606              	.LVL498:
 4607              	.L425:
 349:src/display.c **** }
 4608              		.loc 1 349 8 view .LVU1410
 4609              	.LBE358:
 4610              	.LBE373:
 4611              	.LBB374:
 347:src/display.c ****   if (on)	set_dot(n);
 4612              		.loc 1 347 6 is_stmt 1 view .LVU1411
 4613              	.LBB354:
 348:src/display.c ****   else	clr_dot(n);
 4614              		.loc 1 348 3 view .LVU1412
 348:src/display.c ****   else	clr_dot(n);
 4615              		.loc 1 348 11 view .LVU1413
 4616 00c4 FFF7FEFF 		bl	set_dot
 4617              	.LVL499:
 4618 00c8 CFE7     		b	.L426
 4619              	.LVL500:
ARM GAS  /tmp/ccwSk7O0.s 			page 167


 4620              	.L444:
 348:src/display.c ****   else	clr_dot(n);
 4621              		.loc 1 348 11 is_stmt 0 view .LVU1414
 4622              	.LBE354:
 4623              	.LBE374:
 4624              	.LBB375:
 4625              	.LBI346:
 347:src/display.c ****   if (on)	set_dot(n);
 4626              		.loc 1 347 6 is_stmt 1 view .LVU1415
 4627              	.LBB349:
 348:src/display.c ****   else	clr_dot(n);
 4628              		.loc 1 348 3 view .LVU1416
 349:src/display.c **** }
 4629              		.loc 1 349 8 view .LVU1417
 4630 00ca FFF7FEFF 		bl	clr_dot
 4631              	.LVL501:
 4632 00ce C1E7     		b	.L423
 4633              	.LVL502:
 4634              	.L420:
 349:src/display.c **** }
 4635              		.loc 1 349 8 is_stmt 0 view .LVU1418
 4636              	.LBE349:
 4637              	.LBE375:
 4638              	.LBB376:
 347:src/display.c ****   if (on)	set_dot(n);
 4639              		.loc 1 347 6 is_stmt 1 view .LVU1419
 4640              	.LBB344:
 348:src/display.c ****   else	clr_dot(n);
 4641              		.loc 1 348 3 view .LVU1420
 348:src/display.c ****   else	clr_dot(n);
 4642              		.loc 1 348 11 view .LVU1421
 4643 00d0 FFF7FEFF 		bl	set_dot
 4644              	.LVL503:
 4645 00d4 B3E7     		b	.L421
 4646              	.LVL504:
 4647              	.L443:
 348:src/display.c ****   else	clr_dot(n);
 4648              		.loc 1 348 11 is_stmt 0 view .LVU1422
 4649              	.LBE344:
 4650              	.LBE376:
 4651              	.LBB377:
 347:src/display.c ****   if (on)	set_dot(n);
 4652              		.loc 1 347 6 is_stmt 1 view .LVU1423
 4653              	.LBB339:
 348:src/display.c ****   else	clr_dot(n);
 4654              		.loc 1 348 3 view .LVU1424
 348:src/display.c ****   else	clr_dot(n);
 4655              		.loc 1 348 11 view .LVU1425
 4656 00d6 FFF7FEFF 		bl	set_dot
 4657              	.LVL505:
 4658 00da A3E7     		b	.L418
 4659              	.L447:
 4660              		.align	2
 4661              	.L446:
 4662 00dc 00000000 		.word	main_ram
 4663 00e0 00000000 		.word	Running
 4664 00e4 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccwSk7O0.s 			page 168


 4665 00e8 07000800 		.word	524295
 4666 00ec 00080800 		.word	526336
 4667              	.LBE339:
 4668              	.LBE377:
 4669              		.cfi_endproc
 4670              	.LFE32:
 4672              		.section	.text.pixel_length,"ax",%progbits
 4673              		.align	1
 4674              		.p2align 2,,3
 4675              		.global	pixel_length
 4676              		.syntax unified
 4677              		.thumb
 4678              		.thumb_func
 4679              		.fpu fpv4-sp-d16
 4681              	pixel_length:
 4682              	.LVL506:
 4683              	.LFB40:
3599:src/display.c **** 
3600:src/display.c **** 
3601:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3602:src/display.c ****        */
3603:src/display.c ****       int pixel_length(const char *s, int smallp)
3604:src/display.c ****       {
 4684              		.loc 1 3604 7 view -0
 4685              		.cfi_startproc
 4686              		@ args = 0, pretend = 0, frame = 0
 4687              		@ frame_needed = 0, uses_anonymous_args = 0
3605:src/display.c **** 	int len = 0;
 4688              		.loc 1 3605 2 view .LVU1427
3606:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4689              		.loc 1 3606 2 view .LVU1428
3604:src/display.c **** 	int len = 0;
 4690              		.loc 1 3604 7 is_stmt 0 view .LVU1429
 4691 0000 70B5     		push	{r4, r5, r6, lr}
 4692              		.cfi_def_cfa_offset 16
 4693              		.cfi_offset 4, -16
 4694              		.cfi_offset 5, -12
 4695              		.cfi_offset 6, -8
 4696              		.cfi_offset 14, -4
3604:src/display.c **** 	int len = 0;
 4697              		.loc 1 3604 7 view .LVU1430
 4698 0002 0446     		mov	r4, r0
3607:src/display.c **** 	while (*s != '\0') {
 4699              		.loc 1 3607 9 view .LVU1431
 4700 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4701              	.LVL507:
3606:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4702              		.loc 1 3606 34 view .LVU1432
 4703 0006 0E1E     		subs	r6, r1, #0
 4704 0008 18BF     		it	ne
 4705 000a 4FF48076 		movne	r6, #256
 4706              	.LVL508:
 4707              		.loc 1 3607 2 is_stmt 1 view .LVU1433
 4708              		.loc 1 3607 8 view .LVU1434
 4709 000e A0B1     		cbz	r0, .L455
3605:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4710              		.loc 1 3605 6 is_stmt 0 view .LVU1435
ARM GAS  /tmp/ccwSk7O0.s 			page 169


 4711 0010 0025     		movs	r5, #0
 4712 0012 06E0     		b	.L453
 4713              	.LVL509:
 4714              	.L451:
3608:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3609:src/display.c **** 	  if (s[0] == '\007') {
3610:src/display.c **** 	    len += s[1] & 0x1F;
3611:src/display.c **** 	    s += 3;
3612:src/display.c **** 	    continue;
3613:src/display.c **** 	  }
3614:src/display.c **** #endif
3615:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4715              		.loc 1 3615 11 view .LVU1436
 4716 0014 3044     		add	r0, r0, r6
 4717 0016 FFF7FEFF 		bl	charlengths
 4718              	.LVL510:
 4719              		.loc 1 3615 42 view .LVU1437
 4720 001a 0134     		adds	r4, r4, #1
 4721              	.LVL511:
 4722              		.loc 1 3615 8 view .LVU1438
 4723 001c 0544     		add	r5, r5, r0
 4724              	.LVL512:
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4725              		.loc 1 3607 8 is_stmt 1 view .LVU1439
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4726              		.loc 1 3607 9 is_stmt 0 view .LVU1440
 4727 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4728              		.loc 1 3607 8 view .LVU1441
 4729 0020 48B1     		cbz	r0, .L448
 4730              	.LVL513:
 4731              	.L453:
3609:src/display.c **** 	    len += s[1] & 0x1F;
 4732              		.loc 1 3609 4 is_stmt 1 view .LVU1442
 4733              		.loc 1 3615 4 view .LVU1443
3609:src/display.c **** 	    len += s[1] & 0x1F;
 4734              		.loc 1 3609 7 is_stmt 0 view .LVU1444
 4735 0022 0728     		cmp	r0, #7
 4736 0024 F6D1     		bne	.L451
3610:src/display.c **** 	    s += 3;
 4737              		.loc 1 3610 6 is_stmt 1 view .LVU1445
3610:src/display.c **** 	    s += 3;
 4738              		.loc 1 3610 18 is_stmt 0 view .LVU1446
 4739 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4740              		.loc 1 3607 9 view .LVU1447
 4741 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3610:src/display.c **** 	    s += 3;
 4742              		.loc 1 3610 18 view .LVU1448
 4743 002a 03F01F03 		and	r3, r3, #31
3611:src/display.c **** 	    continue;
 4744              		.loc 1 3611 8 view .LVU1449
 4745 002e 0334     		adds	r4, r4, #3
 4746              	.LVL514:
3610:src/display.c **** 	    s += 3;
 4747              		.loc 1 3610 10 view .LVU1450
 4748 0030 1D44     		add	r5, r5, r3
ARM GAS  /tmp/ccwSk7O0.s 			page 170


 4749              	.LVL515:
3611:src/display.c **** 	    continue;
 4750              		.loc 1 3611 6 is_stmt 1 view .LVU1451
3612:src/display.c **** 	  }
 4751              		.loc 1 3612 6 view .LVU1452
3607:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4752              		.loc 1 3607 8 view .LVU1453
 4753 0032 0028     		cmp	r0, #0
 4754 0034 F5D1     		bne	.L453
 4755              	.L448:
3616:src/display.c **** 	}
3617:src/display.c **** 	return len;
3618:src/display.c ****       }
 4756              		.loc 1 3618 7 is_stmt 0 view .LVU1454
 4757 0036 2846     		mov	r0, r5
 4758 0038 70BD     		pop	{r4, r5, r6, pc}
 4759              	.LVL516:
 4760              	.L455:
3605:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4761              		.loc 1 3605 6 view .LVU1455
 4762 003a 0546     		mov	r5, r0
3617:src/display.c ****       }
 4763              		.loc 1 3617 2 is_stmt 1 view .LVU1456
 4764              		.loc 1 3618 7 is_stmt 0 view .LVU1457
 4765 003c 2846     		mov	r0, r5
 4766 003e 70BD     		pop	{r4, r5, r6, pc}
 4767              		.loc 1 3618 7 view .LVU1458
 4768              		.cfi_endproc
 4769              	.LFE40:
 4771              		.section	.text.set_status,"ax",%progbits
 4772              		.align	1
 4773              		.p2align 2,,3
 4774              		.syntax unified
 4775              		.thumb
 4776              		.thumb_func
 4777              		.fpu fpv4-sp-d16
 4779              	set_status:
 4780              	.LVL517:
 4781              	.LFB43:
3619:src/display.c **** 
3620:src/display.c **** 
3621:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3622:src/display.c ****        * If this is larger than the display, return true.
3623:src/display.c ****        */
3624:src/display.c ****       static int string_too_large(const char *s) {
3625:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3626:src/display.c ****       }
3627:src/display.c ****       static int string_too_large_top(const char *s) {
3628:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3629:src/display.c ****       }
3630:src/display.c **** 
3631:src/display.c **** 
3632:src/display.c ****       /* Display the given string on the screen.
3633:src/display.c ****        */
3634:src/display.c ****       static void set_status(const char *str) {
 4782              		.loc 1 3634 47 is_stmt 1 view -0
 4783              		.cfi_startproc
ARM GAS  /tmp/ccwSk7O0.s 			page 171


 4784              		@ args = 0, pretend = 0, frame = 0
 4785              		@ frame_needed = 0, uses_anonymous_args = 0
3635:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4786              		.loc 1 3635 2 view .LVU1460
3634:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4787              		.loc 1 3634 47 is_stmt 0 view .LVU1461
 4788 0000 10B5     		push	{r4, lr}
 4789              		.cfi_def_cfa_offset 8
 4790              		.cfi_offset 4, -8
 4791              		.cfi_offset 14, -4
 4792              		.loc 1 3635 24 view .LVU1462
 4793 0002 0D4B     		ldr	r3, .L463
 4794              		.loc 1 3635 2 view .LVU1463
 4795 0004 93F91630 		ldrsb	r3, [r3, #22]
 4796 0008 002B     		cmp	r3, #0
3634:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4797              		.loc 1 3634 47 view .LVU1464
 4798 000a 82B0     		sub	sp, sp, #8
 4799              		.cfi_def_cfa_offset 16
3634:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4800              		.loc 1 3634 47 view .LVU1465
 4801 000c 0446     		mov	r4, r0
 4802              		.loc 1 3635 2 view .LVU1466
 4803 000e 0ADA     		bge	.L462
 4804 0010 0121     		movs	r1, #1
 4805              	.LVL518:
 4806              	.L459:
 4807              	.LBB378:
 4808              	.LBI378:
3476:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4809              		.loc 1 3476 19 is_stmt 1 discriminator 6 view .LVU1467
 4810              	.LBB379:
3477:src/display.c ****       }
 4811              		.loc 1 3477 2 discriminator 6 view .LVU1468
 4812 0012 40F24A23 		movw	r3, #586
 4813 0016 0093     		str	r3, [sp]
 4814 0018 2046     		mov	r0, r4
 4815 001a 8E23     		movs	r3, #142
 4816 001c 4A22     		movs	r2, #74
 4817 001e FFF7FEFF 		bl	s_s_sized
 4818              	.LVL519:
3477:src/display.c ****       }
 4819              		.loc 1 3477 2 is_stmt 0 discriminator 6 view .LVU1469
 4820              	.LBE379:
 4821              	.LBE378:
3636:src/display.c ****       }
 4822              		.loc 1 3636 7 discriminator 6 view .LVU1470
 4823 0022 02B0     		add	sp, sp, #8
 4824              		.cfi_remember_state
 4825              		.cfi_def_cfa_offset 8
 4826              		@ sp needed
 4827 0024 10BD     		pop	{r4, pc}
 4828              	.LVL520:
 4829              	.L462:
 4830              		.cfi_restore_state
 4831              	.LBB380:
 4832              	.LBI380:
ARM GAS  /tmp/ccwSk7O0.s 			page 172


3624:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4833              		.loc 1 3624 18 is_stmt 1 view .LVU1471
 4834              	.LBB381:
3625:src/display.c ****       }
 4835              		.loc 1 3625 2 view .LVU1472
3625:src/display.c ****       }
 4836              		.loc 1 3625 9 is_stmt 0 view .LVU1473
 4837 0026 0021     		movs	r1, #0
 4838 0028 FFF7FEFF 		bl	pixel_length
 4839              	.LVL521:
3625:src/display.c ****       }
 4840              		.loc 1 3625 9 view .LVU1474
 4841              	.LBE381:
 4842              	.LBE380:
3635:src/display.c ****       }
 4843              		.loc 1 3635 2 view .LVU1475
 4844 002c 4B28     		cmp	r0, #75
 4845 002e D4BF     		ite	le
 4846 0030 0021     		movle	r1, #0
 4847 0032 0121     		movgt	r1, #1
 4848 0034 EDE7     		b	.L459
 4849              	.L464:
 4850 0036 00BF     		.align	2
 4851              	.L463:
 4852 0038 00000000 		.word	StateWhileOn
 4853              		.cfi_endproc
 4854              	.LFE43:
 4856              		.section	.text.set_x_dn,"ax",%progbits
 4857              		.align	1
 4858              		.p2align 2,,3
 4859              		.global	set_x_dn
 4860              		.syntax unified
 4861              		.thumb
 4862              		.thumb_func
 4863              		.fpu fpv4-sp-d16
 4865              	set_x_dn:
 4866              	.LVL522:
 4867              	.LFB27:
2020:src/display.c **** 	char x[50], *obp = x;
 4868              		.loc 1 2020 67 is_stmt 1 view -0
 4869              		.cfi_startproc
 4870              		@ args = 0, pretend = 0, frame = 152
 4871              		@ frame_needed = 0, uses_anonymous_args = 0
2021:src/display.c **** 	int odig = 0;
 4872              		.loc 1 2021 2 view .LVU1477
2020:src/display.c **** 	char x[50], *obp = x;
 4873              		.loc 1 2020 67 is_stmt 0 view .LVU1478
 4874 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4875              		.cfi_def_cfa_offset 36
 4876              		.cfi_offset 4, -36
 4877              		.cfi_offset 5, -32
 4878              		.cfi_offset 6, -28
 4879              		.cfi_offset 7, -24
 4880              		.cfi_offset 8, -20
 4881              		.cfi_offset 9, -16
 4882              		.cfi_offset 10, -12
 4883              		.cfi_offset 11, -8
ARM GAS  /tmp/ccwSk7O0.s 			page 173


 4884              		.cfi_offset 14, -4
 4885 0004 A7B0     		sub	sp, sp, #156
 4886              		.cfi_def_cfa_offset 192
 4887              	.LVL523:
2022:src/display.c **** 	int show_exp = 0;
 4888              		.loc 1 2022 2 is_stmt 1 view .LVU1479
2023:src/display.c **** 	int j;
 4889              		.loc 1 2023 2 view .LVU1480
2024:src/display.c **** 	char mantissa[64];
 4890              		.loc 1 2024 2 view .LVU1481
2025:src/display.c **** 	int exp = 0;
 4891              		.loc 1 2025 2 view .LVU1482
2026:src/display.c **** 	char *p = mantissa;
 4892              		.loc 1 2026 2 view .LVU1483
2027:src/display.c **** 	char *r;
 4893              		.loc 1 2027 2 view .LVU1484
2028:src/display.c **** 	const char *q;
 4894              		.loc 1 2028 2 view .LVU1485
2029:src/display.c **** 	int count, i;
 4895              		.loc 1 2029 2 view .LVU1486
2030:src/display.c **** 	int extra_digits = 0;
 4896              		.loc 1 2030 2 view .LVU1487
2031:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4897              		.loc 1 2031 2 view .LVU1488
2033:src/display.c **** 	int dispdigs;
 4898              		.loc 1 2033 2 view .LVU1489
2034:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4899              		.loc 1 2034 2 view .LVU1490
2035:src/display.c **** #else
 4900              		.loc 1 2035 2 view .LVU1491
2020:src/display.c **** 	char x[50], *obp = x;
 4901              		.loc 1 2020 67 is_stmt 0 view .LVU1492
 4902 0006 0746     		mov	r7, r0
2035:src/display.c **** #else
 4903              		.loc 1 2035 13 view .LVU1493
 4904 0008 08A8     		add	r0, sp, #32
 4905              	.LVL524:
2020:src/display.c **** 	char x[50], *obp = x;
 4906              		.loc 1 2020 67 view .LVU1494
 4907 000a 0C46     		mov	r4, r1
 4908 000c 0192     		str	r2, [sp, #4]
2035:src/display.c **** #else
 4909              		.loc 1 2035 13 view .LVU1495
 4910 000e FFF7FEFF 		bl	get_dispmode_digs
 4911              	.LVL525:
2035:src/display.c **** #else
 4912              		.loc 1 2035 13 view .LVU1496
 4913 0012 0546     		mov	r5, r0
 4914              	.LVL526:
2040:src/display.c **** 	int negative = 0;
 4915              		.loc 1 2040 2 is_stmt 1 view .LVU1497
2041:src/display.c **** 	int trimzeros = 0;
 4916              		.loc 1 2041 2 view .LVU1498
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4917              		.loc 1 2042 2 view .LVU1499
2050:src/display.c **** #endif
 4918              		.loc 1 2050 2 view .LVU1500
ARM GAS  /tmp/ccwSk7O0.s 			page 174


2053:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4919              		.loc 1 2053 2 view .LVU1501
 4920 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4921              	.LVL527:
2055:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4922              		.loc 1 2055 2 view .LVU1502
2055:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4923              		.loc 1 2055 5 is_stmt 0 view .LVU1503
 4924 0018 002C     		cmp	r4, #0
 4925 001a 00F08181 		beq	.L466
 4926              	.L469:
2080:src/display.c **** 	  return;
 4927              		.loc 1 2080 2 is_stmt 1 view .LVU1504
2080:src/display.c **** 	  return;
 4928              		.loc 1 2080 6 is_stmt 0 view .LVU1505
 4929 001e 2146     		mov	r1, r4
 4930 0020 07F10800 		add	r0, r7, #8
 4931 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4932              	.LVL528:
2080:src/display.c **** 	  return;
 4933              		.loc 1 2080 5 view .LVU1506
 4934 0028 8246     		mov	r10, r0
 4935 002a 0028     		cmp	r0, #0
 4936 002c 40F07081 		bne	.L465
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4937              		.loc 1 2083 2 is_stmt 1 view .LVU1507
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4938              		.loc 1 2083 12 is_stmt 0 view .LVU1508
 4939 0030 C94E     		ldr	r6, .L714
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4940              		.loc 1 2083 5 view .LVU1509
 4941 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4942 0034 012B     		cmp	r3, #1
 4943 0036 00F0EC82 		beq	.L691
2026:src/display.c **** 	char *p = mantissa;
 4944              		.loc 1 2026 6 view .LVU1510
 4945 003a 8046     		mov	r8, r0
 4946              	.LVL529:
 4947              	.L472:
2089:src/display.c **** 
 4948              		.loc 1 2089 2 is_stmt 1 view .LVU1511
 4949 003c 0DF1240B 		add	fp, sp, #36
 4950              	.LVL530:
2089:src/display.c **** 
 4951              		.loc 1 2089 2 is_stmt 0 view .LVU1512
 4952 0040 5846     		mov	r0, fp
 4953 0042 3222     		movs	r2, #50
 4954 0044 0021     		movs	r1, #0
 4955 0046 FFF7FEFF 		bl	xset
 4956              	.LVL531:
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4957              		.loc 1 2091 2 is_stmt 1 view .LVU1513
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4958              		.loc 1 2091 6 is_stmt 0 view .LVU1514
 4959 004a 3846     		mov	r0, r7
 4960 004c FFF7FEFF 		bl	dn_eq0
 4961              	.LVL532:
ARM GAS  /tmp/ccwSk7O0.s 			page 175


2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4962              		.loc 1 2091 5 view .LVU1515
 4963 0050 0028     		cmp	r0, #0
 4964 0052 00F06081 		beq	.L473
2092:src/display.c **** 	    x[0] = '-';
 4965              		.loc 1 2092 4 is_stmt 1 view .LVU1516
2092:src/display.c **** 	    x[0] = '-';
 4966              		.loc 1 2092 7 is_stmt 0 view .LVU1517
 4967 0056 97F90830 		ldrsb	r3, [r7, #8]
 4968 005a 002B     		cmp	r3, #0
 4969 005c C0F20083 		blt	.L692
 4970              	.L474:
2096:src/display.c **** 	} else
 4971              		.loc 1 2096 6 is_stmt 1 view .LVU1518
2096:src/display.c **** 	} else
 4972              		.loc 1 2096 11 is_stmt 0 view .LVU1519
 4973 0060 3023     		movs	r3, #48
 4974 0062 8DF82430 		strb	r3, [sp, #36]
 4975              	.L475:
2100:src/display.c **** 	  show_x(x, exp);
 4976              		.loc 1 2100 2 is_stmt 1 view .LVU1520
2100:src/display.c **** 	  show_x(x, exp);
 4977              		.loc 1 2100 12 is_stmt 0 view .LVU1521
 4978 0066 96F81190 		ldrb	r9, [r6, #17]	@ zero_extendqisi2
2100:src/display.c **** 	  show_x(x, exp);
 4979              		.loc 1 2100 5 view .LVU1522
 4980 006a B9F1010F 		cmp	r9, #1
 4981 006e 00F04583 		beq	.L693
2106:src/display.c **** 	  //  ALL mode: fill the display
 4982              		.loc 1 2106 2 is_stmt 1 view .LVU1523
2106:src/display.c **** 	  //  ALL mode: fill the display
 4983              		.loc 1 2106 5 is_stmt 0 view .LVU1524
 4984 0072 002D     		cmp	r5, #0
 4985 0074 40F07881 		bne	.L694
2108:src/display.c **** 	else
 4986              		.loc 1 2108 4 is_stmt 1 view .LVU1525
2108:src/display.c **** 	else
 4987              		.loc 1 2108 25 is_stmt 0 view .LVU1526
 4988 0078 019E     		ldr	r6, [sp, #4]
 4989              	.LBB399:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4990              		.loc 1 2115 11 view .LVU1527
 4991 007a 089B     		ldr	r3, [sp, #32]
 4992              	.LBE399:
2108:src/display.c **** 	else
 4993              		.loc 1 2108 25 view .LVU1528
 4994 007c 3168     		ldr	r1, [r6]
 4995              	.LBB400:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4996              		.loc 1 2115 11 view .LVU1529
 4997 007e 2A46     		mov	r2, r5
 4998 0080 3846     		mov	r0, r7
 4999              	.LBE400:
2108:src/display.c **** 	else
 5000              		.loc 1 2108 25 view .LVU1530
 5001 0082 4D1E     		subs	r5, r1, #1
 5002              	.LVL533:
ARM GAS  /tmp/ccwSk7O0.s 			page 176


 5003              	.LBB401:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5004              		.loc 1 2115 11 view .LVU1531
 5005 0084 07A9     		add	r1, sp, #28
 5006              	.LBE401:
2108:src/display.c **** 	else
 5007              		.loc 1 2108 7 view .LVU1532
 5008 0086 0795     		str	r5, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5009              		.loc 1 2112 2 is_stmt 1 view .LVU1533
 5010              	.LBB402:
2113:src/display.c **** 
 5011              		.loc 1 2113 4 view .LVU1534
 5012              	.LVL534:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5013              		.loc 1 2115 4 view .LVU1535
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5014              		.loc 1 2115 11 is_stmt 0 view .LVU1536
 5015 0088 FFF7FEFF 		bl	std_round_fix
 5016              	.LVL535:
2120:src/display.c ****  	}
 5017              		.loc 1 2120 27 view .LVU1537
 5018 008c 3368     		ldr	r3, [r6]
 5019 008e 013B     		subs	r3, r3, #1
2120:src/display.c ****  	}
 5020              		.loc 1 2120 9 view .LVU1538
 5021 0090 0793     		str	r3, [sp, #28]
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5022              		.loc 1 2118 16 view .LVU1539
 5023 0092 0123     		movs	r3, #1
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5024              		.loc 1 2115 11 view .LVU1540
 5025 0094 0546     		mov	r5, r0
 5026              	.LVL536:
2116:src/display.c **** 	    // allow zeros to be trimmed
 5027              		.loc 1 2116 4 is_stmt 1 view .LVU1541
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5028              		.loc 1 2118 6 view .LVU1542
2119:src/display.c **** 	    dd = *display_digits - 1;
 5029              		.loc 1 2119 4 view .LVU1543
2120:src/display.c ****  	}
 5030              		.loc 1 2120 6 view .LVU1544
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5031              		.loc 1 2118 16 is_stmt 0 view .LVU1545
 5032 0096 0493     		str	r3, [sp, #16]
 5033              	.LVL537:
 5034              	.L594:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5035              		.loc 1 2118 16 view .LVU1546
 5036              	.LBE402:
2132:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5037              		.loc 1 2132 2 is_stmt 1 view .LVU1547
 5038 0098 0DF15809 		add	r9, sp, #88
 5039              	.LVL538:
2132:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5040              		.loc 1 2132 2 is_stmt 0 view .LVU1548
 5041 009c 3F22     		movs	r2, #63
ARM GAS  /tmp/ccwSk7O0.s 			page 177


 5042 009e 3021     		movs	r1, #48
 5043 00a0 4846     		mov	r0, r9
 5044 00a2 FFF7FEFF 		bl	xset
 5045              	.LVL539:
2133:src/display.c **** 
 5046              		.loc 1 2133 2 is_stmt 1 view .LVU1549
2133:src/display.c **** 
 5047              		.loc 1 2133 31 is_stmt 0 view .LVU1550
 5048 00a6 0023     		movs	r3, #0
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5049              		.loc 1 2135 6 view .LVU1551
 5050 00a8 4521     		movs	r1, #69
 5051 00aa 5846     		mov	r0, fp
2133:src/display.c **** 
 5052              		.loc 1 2133 31 view .LVU1552
 5053 00ac 8DF89730 		strb	r3, [sp, #151]
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5054              		.loc 1 2135 2 is_stmt 1 view .LVU1553
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5055              		.loc 1 2135 6 is_stmt 0 view .LVU1554
 5056 00b0 FFF7FEFF 		bl	find_char
 5057              	.LVL540:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5058              		.loc 1 2137 2 is_stmt 1 view .LVU1555
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5059              		.loc 1 2137 5 is_stmt 0 view .LVU1556
 5060 00b4 0646     		mov	r6, r0
 5061 00b6 0028     		cmp	r0, #0
 5062 00b8 00F06481 		beq	.L695
 5063              	.L491:
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5064              		.loc 1 2140 4 is_stmt 1 view .LVU1557
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5065              		.loc 1 2140 10 is_stmt 0 view .LVU1558
 5066 00bc 701C     		adds	r0, r6, #1
 5067              	.LVL541:
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5068              		.loc 1 2140 10 view .LVU1559
 5069 00be FFF7FEFF 		bl	s_to_i
 5070              	.LVL542:
2141:src/display.c **** 	}
 5071              		.loc 1 2141 7 view .LVU1560
 5072 00c2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 5073 00c4 442B     		cmp	r3, #68
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5074              		.loc 1 2140 10 view .LVU1561
 5075 00c6 0646     		mov	r6, r0
 5076              	.LVL543:
2141:src/display.c **** 	}
 5077              		.loc 1 2141 4 is_stmt 1 view .LVU1562
2141:src/display.c **** 	}
 5078              		.loc 1 2141 19 view .LVU1563
2141:src/display.c **** 	}
 5079              		.loc 1 2141 23 is_stmt 0 view .LVU1564
 5080 00c8 08BF     		it	eq
 5081 00ca 4642     		rsbeq	r6, r0, #0
 5082              	.LVL544:
ARM GAS  /tmp/ccwSk7O0.s 			page 178


 5083              	.L492:
2149:src/display.c **** 	if (!res) {
 5084              		.loc 1 2149 2 is_stmt 1 view .LVU1565
2149:src/display.c **** 	if (!res) {
 5085              		.loc 1 2149 12 view .LVU1566
2149:src/display.c **** 	if (!res) {
 5086              		.loc 1 2149 2 is_stmt 0 view .LVU1567
 5087 00cc 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 5088 00d0 202B     		cmp	r3, #32
2149:src/display.c **** 	if (!res) {
 5089              		.loc 1 2149 8 view .LVU1568
 5090 00d2 D846     		mov	r8, fp
2149:src/display.c **** 	if (!res) {
 5091              		.loc 1 2149 2 view .LVU1569
 5092 00d4 03D1     		bne	.L493
 5093              	.LVL545:
 5094              	.L494:
2149:src/display.c **** 	if (!res) {
 5095              		.loc 1 2149 27 is_stmt 1 discriminator 3 view .LVU1570
2149:src/display.c **** 	if (!res) {
 5096              		.loc 1 2149 23 discriminator 3 view .LVU1571
2149:src/display.c **** 	if (!res) {
 5097              		.loc 1 2149 12 discriminator 3 view .LVU1572
2149:src/display.c **** 	if (!res) {
 5098              		.loc 1 2149 2 is_stmt 0 discriminator 3 view .LVU1573
 5099 00d6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5100              	.LVL546:
2149:src/display.c **** 	if (!res) {
 5101              		.loc 1 2149 2 discriminator 3 view .LVU1574
 5102 00da 202B     		cmp	r3, #32
 5103 00dc FBD0     		beq	.L494
 5104              	.LVL547:
 5105              	.L493:
2150:src/display.c **** 	  CLR_EXP_SIGN;
 5106              		.loc 1 2150 2 is_stmt 1 view .LVU1575
2150:src/display.c **** 	  CLR_EXP_SIGN;
 5107              		.loc 1 2150 5 is_stmt 0 view .LVU1576
 5108 00de 002C     		cmp	r4, #0
 5109 00e0 00F0C982 		beq	.L696
 5110              	.L495:
2154:src/display.c **** 	  negative = 1;
 5111              		.loc 1 2154 2 is_stmt 1 view .LVU1577
2154:src/display.c **** 	  negative = 1;
 5112              		.loc 1 2154 6 is_stmt 0 view .LVU1578
 5113 00e4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2154:src/display.c **** 	  negative = 1;
 5114              		.loc 1 2154 5 view .LVU1579
 5115 00e8 2D2B     		cmp	r3, #45
 5116 00ea 00F0DB81 		beq	.L697
2157:src/display.c **** 	  q++;
 5117              		.loc 1 2157 9 is_stmt 1 view .LVU1580
2157:src/display.c **** 	  q++;
 5118              		.loc 1 2157 12 is_stmt 0 view .LVU1581
 5119 00ee 2B2B     		cmp	r3, #43
 5120 00f0 00F0AF82 		beq	.L698
2041:src/display.c **** 	int trimzeros = 0;
 5121              		.loc 1 2041 6 view .LVU1582
ARM GAS  /tmp/ccwSk7O0.s 			page 179


 5122 00f4 0022     		movs	r2, #0
 5123 00f6 0392     		str	r2, [sp, #12]
 5124              	.LVL548:
 5125              	.L497:
2159:src/display.c **** 	if (*q == '.') {
 5126              		.loc 1 2159 9 is_stmt 1 discriminator 1 view .LVU1583
2159:src/display.c **** 	if (*q == '.') {
 5127              		.loc 1 2159 2 is_stmt 0 discriminator 1 view .LVU1584
 5128 00f8 302B     		cmp	r3, #48
 5129 00fa 03D1     		bne	.L499
 5130              	.LVL549:
 5131              	.L498:
2159:src/display.c **** 	if (*q == '.') {
 5132              		.loc 1 2159 24 is_stmt 1 discriminator 2 view .LVU1585
2159:src/display.c **** 	if (*q == '.') {
 5133              		.loc 1 2159 20 discriminator 2 view .LVU1586
2159:src/display.c **** 	if (*q == '.') {
 5134              		.loc 1 2159 9 discriminator 2 view .LVU1587
 5135 00fc 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5136              	.LVL550:
2159:src/display.c **** 	if (*q == '.') {
 5137              		.loc 1 2159 2 is_stmt 0 discriminator 2 view .LVU1588
 5138 0100 302B     		cmp	r3, #48
 5139 0102 FBD0     		beq	.L498
 5140              	.LVL551:
 5141              	.L499:
2160:src/display.c **** 	  do
 5142              		.loc 1 2160 2 is_stmt 1 view .LVU1589
2160:src/display.c **** 	  do
 5143              		.loc 1 2160 5 is_stmt 0 view .LVU1590
 5144 0104 2E2B     		cmp	r3, #46
 5145 0106 00F0B581 		beq	.L699
2167:src/display.c **** 	    *p++ = *q++;
 5146              		.loc 1 2167 4 is_stmt 1 view .LVU1591
2167:src/display.c **** 	    *p++ = *q++;
 5147              		.loc 1 2167 7 is_stmt 0 view .LVU1592
 5148 010a A3F13002 		sub	r2, r3, #48
 5149 010e 092A     		cmp	r2, #9
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5150              		.loc 1 2168 6 is_stmt 1 view .LVU1593
 5151              	.LVL552:
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5152              		.loc 1 2168 15 is_stmt 0 view .LVU1594
 5153 0110 9CBF     		itt	ls
 5154 0112 08F10108 		addls	r8, r8, #1
 5155              	.LVL553:
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5156              		.loc 1 2168 11 view .LVU1595
 5157 0116 8DF85830 		strbls	r3, [sp, #88]
2169:src/display.c **** 	    *p++ = *q++;
 5158              		.loc 1 2169 11 view .LVU1596
 5159 011a 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2169:src/display.c **** 	    *p++ = *q++;
 5160              		.loc 1 2169 10 view .LVU1597
 5161 011e A2F13003 		sub	r3, r2, #48
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5162              		.loc 1 2168 8 view .LVU1598
ARM GAS  /tmp/ccwSk7O0.s 			page 180


 5163 0122 94BF     		ite	ls
 5164 0124 0DF15901 		addls	r1, sp, #89
2027:src/display.c **** 	char *r;
 5165              		.loc 1 2027 8 view .LVU1599
 5166 0128 4946     		movhi	r1, r9
 5167              	.LVL554:
2169:src/display.c **** 	    *p++ = *q++;
 5168              		.loc 1 2169 10 is_stmt 1 view .LVU1600
 5169 012a 092B     		cmp	r3, #9
 5170 012c 0ED8     		bhi	.L505
 5171 012e A6EB0800 		sub	r0, r6, r8
 5172 0132 08F10103 		add	r3, r8, #1
 5173              	.L506:
 5174              	.LVL555:
2170:src/display.c **** 	    exp++;
 5175              		.loc 1 2170 6 view .LVU1601
2170:src/display.c **** 	    exp++;
 5176              		.loc 1 2170 11 is_stmt 0 view .LVU1602
 5177 0136 01F8012B 		strb	r2, [r1], #1
 5178              	.LVL556:
2170:src/display.c **** 	    exp++;
 5179              		.loc 1 2170 15 view .LVU1603
 5180 013a 9846     		mov	r8, r3
 5181              	.LVL557:
2171:src/display.c **** 	  }
 5182              		.loc 1 2171 6 is_stmt 1 view .LVU1604
 5183 013c C618     		adds	r6, r0, r3
 5184              	.LVL558:
2169:src/display.c **** 	    *p++ = *q++;
 5185              		.loc 1 2169 10 view .LVU1605
2169:src/display.c **** 	    *p++ = *q++;
 5186              		.loc 1 2169 11 is_stmt 0 view .LVU1606
 5187 013e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5188              	.LVL559:
2169:src/display.c **** 	    *p++ = *q++;
 5189              		.loc 1 2169 10 view .LVU1607
 5190 0142 A2F1300C 		sub	ip, r2, #48
 5191 0146 BCF1090F 		cmp	ip, #9
 5192 014a F4D9     		bls	.L506
 5193              	.LVL560:
 5194              	.L505:
2173:src/display.c **** 	    q++;
 5195              		.loc 1 2173 4 is_stmt 1 view .LVU1608
2173:src/display.c **** 	    q++;
 5196              		.loc 1 2173 7 is_stmt 0 view .LVU1609
 5197 014c 2E2A     		cmp	r2, #46
 5198 014e 00F06E82 		beq	.L700
 5199              	.LVL561:
 5200              	.L502:
2180:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5201              		.loc 1 2180 2 is_stmt 1 view .LVU1610
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5202              		.loc 1 2181 12 is_stmt 0 view .LVU1611
 5203 0152 019B     		ldr	r3, [sp, #4]
 5204 0154 079A     		ldr	r2, [sp, #28]
 5205 0156 1B68     		ldr	r3, [r3]
 5206 0158 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccwSk7O0.s 			page 181


2180:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5207              		.loc 1 2180 5 view .LVU1612
 5208 015a 012D     		cmp	r5, #1
 5209 015c 00F07A81 		beq	.L508
 5210              	.LVL562:
 5211              	.L690:
2182:src/display.c **** 	  else {
 5212              		.loc 1 2182 35 view .LVU1613
 5213 0160 0021     		movs	r1, #0
 5214              	.LVL563:
 5215              	.L509:
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 5216              		.loc 1 2194 2 is_stmt 1 view .LVU1614
 5217 0162 02F1010E 		add	lr, r2, #1
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 5218              		.loc 1 2194 35 is_stmt 0 view .LVU1615
 5219 0166 7144     		add	r1, r1, lr
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 5220              		.loc 1 2194 4 view .LVU1616
 5221 0168 09EB0103 		add	r3, r9, r1
 5222              	.LVL564:
2195:src/display.c **** 	  *p = '0';
 5223              		.loc 1 2195 2 is_stmt 1 view .LVU1617
2195:src/display.c **** 	  *p = '0';
 5224              		.loc 1 2195 6 is_stmt 0 view .LVU1618
 5225 016c 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2195:src/display.c **** 	  *p = '0';
 5226              		.loc 1 2195 5 view .LVU1619
 5227 0170 3428     		cmp	r0, #52
 5228 0172 26D9     		bls	.L514
2196:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5229              		.loc 1 2196 4 is_stmt 1 view .LVU1620
2196:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5230              		.loc 1 2196 7 is_stmt 0 view .LVU1621
 5231 0174 3020     		movs	r0, #48
 5232 0176 09F80100 		strb	r0, [r9, r1]
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5233              		.loc 1 2197 4 is_stmt 1 view .LVU1622
 5234              	.LVL565:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5235              		.loc 1 2197 23 view .LVU1623
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5236              		.loc 1 2197 4 is_stmt 0 view .LVU1624
 5237 017a 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5238 017e 3928     		cmp	r0, #57
 5239 0180 40F0DD83 		bne	.L515
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5240              		.loc 1 2197 11 view .LVU1625
 5241 0184 4846     		mov	r0, r9
 5242              	.LVL566:
 5243              	.L516:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5244              		.loc 1 2197 38 is_stmt 1 discriminator 3 view .LVU1626
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5245              		.loc 1 2197 34 discriminator 3 view .LVU1627
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5246              		.loc 1 2197 23 discriminator 3 view .LVU1628
ARM GAS  /tmp/ccwSk7O0.s 			page 182


2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5247              		.loc 1 2197 4 is_stmt 0 discriminator 3 view .LVU1629
 5248 0186 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5249              	.LVL567:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5250              		.loc 1 2197 4 discriminator 3 view .LVU1630
 5251 018a BCF1390F 		cmp	ip, #57
 5252 018e FAD0     		beq	.L516
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5253              		.loc 1 2198 4 is_stmt 1 view .LVU1631
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5254              		.loc 1 2198 7 is_stmt 0 view .LVU1632
 5255 0190 8342     		cmp	r3, r0
 5256 0192 00F00D81 		beq	.L701
 5257              	.LVL568:
 5258              	.L592:
2207:src/display.c **** 	      *p = '0';
 5259              		.loc 1 2207 12 is_stmt 1 view .LVU1633
2207:src/display.c **** 	      *p = '0';
 5260              		.loc 1 2207 13 is_stmt 0 view .LVU1634
 5261 0196 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2207:src/display.c **** 	      *p = '0';
 5262              		.loc 1 2207 12 view .LVU1635
 5263 019a BCF1390F 		cmp	ip, #57
 5264 019e 03F1FF30 		add	r0, r3, #-1
 5265              	.LVL569:
2207:src/display.c **** 	      *p = '0';
 5266              		.loc 1 2207 12 view .LVU1636
 5267 01a2 08D1     		bne	.L519
2208:src/display.c **** 	    (*p)++;
 5268              		.loc 1 2208 11 view .LVU1637
 5269 01a4 4FF0300E 		mov	lr, #48
 5270              	.L518:
2208:src/display.c **** 	    (*p)++;
 5271              		.loc 1 2208 8 is_stmt 1 view .LVU1638
2208:src/display.c **** 	    (*p)++;
 5272              		.loc 1 2208 11 is_stmt 0 view .LVU1639
 5273 01a8 80F800E0 		strb	lr, [r0]
2207:src/display.c **** 	      *p = '0';
 5274              		.loc 1 2207 12 is_stmt 1 view .LVU1640
 5275              	.LVL570:
2207:src/display.c **** 	      *p = '0';
 5276              		.loc 1 2207 13 is_stmt 0 view .LVU1641
 5277 01ac 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5278              	.LVL571:
2207:src/display.c **** 	      *p = '0';
 5279              		.loc 1 2207 12 view .LVU1642
 5280 01b0 BCF1390F 		cmp	ip, #57
 5281 01b4 F8D0     		beq	.L518
 5282              	.L519:
2209:src/display.c **** 	  }
 5283              		.loc 1 2209 6 is_stmt 1 view .LVU1643
2209:src/display.c **** 	  }
 5284              		.loc 1 2209 10 is_stmt 0 view .LVU1644
 5285 01b6 0CF1010C 		add	ip, ip, #1
 5286 01ba 80F800C0 		strb	ip, [r0]
 5287              	.LVL572:
ARM GAS  /tmp/ccwSk7O0.s 			page 183


 5288              	.L689:
2209:src/display.c **** 	  }
 5289              		.loc 1 2209 10 view .LVU1645
 5290 01be 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5291              	.L514:
2214:src/display.c **** 
 5292              		.loc 1 2214 2 is_stmt 1 view .LVU1646
 5293              	.LVL573:
2214:src/display.c **** 
 5294              		.loc 1 2214 45 view .LVU1647
2214:src/display.c **** 
 5295              		.loc 1 2214 2 is_stmt 0 view .LVU1648
 5296 01c2 28B1     		cbz	r0, .L525
 5297              	.LVL574:
 5298              	.L591:
2214:src/display.c **** 
 5299              		.loc 1 2214 62 view .LVU1649
 5300 01c4 3020     		movs	r0, #48
 5301              	.L526:
2214:src/display.c **** 
 5302              		.loc 1 2214 68 is_stmt 1 discriminator 3 view .LVU1650
2214:src/display.c **** 
 5303              		.loc 1 2214 57 discriminator 3 view .LVU1651
 5304              	.LVL575:
2214:src/display.c **** 
 5305              		.loc 1 2214 62 is_stmt 0 discriminator 3 view .LVU1652
 5306 01c6 03F8010B 		strb	r0, [r3], #1
 5307              	.LVL576:
2214:src/display.c **** 
 5308              		.loc 1 2214 45 is_stmt 1 discriminator 3 view .LVU1653
2214:src/display.c **** 
 5309              		.loc 1 2214 2 is_stmt 0 discriminator 3 view .LVU1654
 5310 01ca 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5311 01cc 0029     		cmp	r1, #0
 5312 01ce FAD1     		bne	.L526
 5313              	.L525:
2216:src/display.c **** 	switch (mode) {
 5314              		.loc 1 2216 2 is_stmt 1 view .LVU1655
 5315              	.LVL577:
2217:src/display.c **** 	default:
 5316              		.loc 1 2217 2 view .LVU1656
 5317 01d0 022D     		cmp	r5, #2
 5318 01d2 00F06D81 		beq	.L563
 5319 01d6 032D     		cmp	r5, #3
 5320 01d8 00F00F81 		beq	.L528
 5321 01dc 012D     		cmp	r5, #1
 5322 01de 00F0E081 		beq	.L529
2220:src/display.c **** 	  if (count != *display_digits)
 5323              		.loc 1 2220 4 view .LVU1657
 5324              	.LVL578:
2220:src/display.c **** 	  if (count != *display_digits)
 5325              		.loc 1 2220 34 view .LVU1658
2220:src/display.c **** 	  if (count != *display_digits)
 5326              		.loc 1 2220 42 is_stmt 0 view .LVU1659
 5327 01e2 0298     		ldr	r0, [sp, #8]
 5328 01e4 26AB     		add	r3, sp, #152
 5329 01e6 0344     		add	r3, r3, r0
ARM GAS  /tmp/ccwSk7O0.s 			page 184


2220:src/display.c **** 	  if (count != *display_digits)
 5330              		.loc 1 2220 4 view .LVU1660
 5331 01e8 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5332 01ec 302B     		cmp	r3, #48
 5333 01ee 40F09983 		bne	.L607
 5334 01f2 411E     		subs	r1, r0, #1
 5335 01f4 4944     		add	r1, r1, r9
 5336              	.LVL579:
 5337              	.L533:
2220:src/display.c **** 	  if (count != *display_digits)
 5338              		.loc 1 2220 66 is_stmt 1 discriminator 3 view .LVU1661
2220:src/display.c **** 	  if (count != *display_digits)
 5339              		.loc 1 2220 58 discriminator 3 view .LVU1662
2220:src/display.c **** 	  if (count != *display_digits)
 5340              		.loc 1 2220 42 is_stmt 0 discriminator 3 view .LVU1663
 5341 01f6 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2220:src/display.c **** 	  if (count != *display_digits)
 5342              		.loc 1 2220 4 discriminator 3 view .LVU1664
 5343 01fa 302D     		cmp	r5, #48
 5344 01fc 0346     		mov	r3, r0
2220:src/display.c **** 	  if (count != *display_digits)
 5345              		.loc 1 2220 63 discriminator 3 view .LVU1665
 5346 01fe 00F1FF30 		add	r0, r0, #-1
 5347              	.LVL580:
2220:src/display.c **** 	  if (count != *display_digits)
 5348              		.loc 1 2220 34 is_stmt 1 discriminator 3 view .LVU1666
2220:src/display.c **** 	  if (count != *display_digits)
 5349              		.loc 1 2220 4 is_stmt 0 discriminator 3 view .LVU1667
 5350 0202 F8D0     		beq	.L533
2221:src/display.c **** 	    count++;
 5351              		.loc 1 2221 4 is_stmt 1 view .LVU1668
2221:src/display.c **** 	    count++;
 5352              		.loc 1 2221 7 is_stmt 0 view .LVU1669
 5353 0204 0299     		ldr	r1, [sp, #8]
 5354 0206 8842     		cmp	r0, r1
 5355 0208 08BF     		it	eq
 5356 020a 0B46     		moveq	r3, r1
 5357              	.LVL581:
 5358              	.L532:
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5359              		.loc 1 2224 4 is_stmt 1 view .LVU1670
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5360              		.loc 1 2224 7 is_stmt 0 view .LVU1671
 5361 020c 0299     		ldr	r1, [sp, #8]
 5362 020e 8E42     		cmp	r6, r1
 5363 0210 80F20581 		bge	.L534
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5364              		.loc 1 2224 47 discriminator 1 view .LVU1672
 5365 0214 591A     		subs	r1, r3, r1
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5366              		.loc 1 2224 31 discriminator 1 view .LVU1673
 5367 0216 B142     		cmp	r1, r6
 5368 0218 00F30181 		bgt	.L534
2249:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5369              		.loc 1 2249 11 is_stmt 1 view .LVU1674
2249:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5370              		.loc 1 2249 14 is_stmt 0 view .LVU1675
ARM GAS  /tmp/ccwSk7O0.s 			page 185


 5371 021c 002E     		cmp	r6, #0
 5372 021e C0F2A483 		blt	.L543
 5373 0222 721C     		adds	r2, r6, #1
2251:src/display.c **** 		*obp++ = ',';
 5374              		.loc 1 2251 31 view .LVU1676
 5375 0224 DFF838E1 		ldr	lr, .L714+8
 5376 0228 0592     		str	r2, [sp, #20]
 5377 022a 09EB0200 		add	r0, r9, r2
2216:src/display.c **** 	switch (mode) {
 5378              		.loc 1 2216 4 view .LVU1677
 5379 022e CC46     		mov	ip, r9
2021:src/display.c **** 	int odig = 0;
 5380              		.loc 1 2021 15 view .LVU1678
 5381 0230 5946     		mov	r1, fp
 5382 0232 05E0     		b	.L544
 5383              	.LVL582:
 5384              	.L547:
2252:src/display.c **** 	      *obp++ = *p++;
 5385              		.loc 1 2252 3 is_stmt 1 view .LVU1679
2251:src/display.c **** 		*obp++ = ',';
 5386              		.loc 1 2251 18 is_stmt 0 view .LVU1680
 5387 0234 022D     		cmp	r5, #2
2252:src/display.c **** 	      *obp++ = *p++;
 5388              		.loc 1 2252 10 view .LVU1681
 5389 0236 05BF     		ittet	eq
 5390 0238 2C22     		moveq	r2, #44
 5391 023a 4A70     		strbeq	r2, [r1, #1]
2253:src/display.c **** 	      odig++;
 5392              		.loc 1 2253 12 view .LVU1682
 5393 023c 0131     		addne	r1, r1, #1
 5394              	.LVL583:
2252:src/display.c **** 	      *obp++ = *p++;
 5395              		.loc 1 2252 7 view .LVU1683
 5396 023e 0231     		addeq	r1, r1, #2
 5397              	.LVL584:
 5398              	.L544:
2253:src/display.c **** 	      odig++;
 5399              		.loc 1 2253 8 is_stmt 1 discriminator 2 view .LVU1684
2253:src/display.c **** 	      odig++;
 5400              		.loc 1 2253 15 is_stmt 0 discriminator 2 view .LVU1685
 5401 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5402              	.LVL585:
2251:src/display.c **** 		*obp++ = ',';
 5403              		.loc 1 2251 8 is_stmt 1 discriminator 2 view .LVU1686
2253:src/display.c **** 	      odig++;
 5404              		.loc 1 2253 15 is_stmt 0 discriminator 2 view .LVU1687
 5405 0244 0A70     		strb	r2, [r1]
2254:src/display.c **** 	    }
 5406              		.loc 1 2254 8 is_stmt 1 discriminator 2 view .LVU1688
 5407              	.LVL586:
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5408              		.loc 1 2250 23 discriminator 2 view .LVU1689
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5409              		.loc 1 2250 15 discriminator 2 view .LVU1690
2251:src/display.c **** 		*obp++ = ',';
 5410              		.loc 1 2251 31 is_stmt 0 discriminator 2 view .LVU1691
 5411 0246 A9EB0C02 		sub	r2, r9, ip
ARM GAS  /tmp/ccwSk7O0.s 			page 186


 5412 024a 3244     		add	r2, r2, r6
 5413 024c 8EFB0285 		smull	r8, r5, lr, r2
 5414 0250 A5EBE275 		sub	r5, r5, r2, asr #31
 5415 0254 05EB4505 		add	r5, r5, r5, lsl #1
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5416              		.loc 1 2250 6 discriminator 2 view .LVU1692
 5417 0258 6045     		cmp	r0, ip
2251:src/display.c **** 		*obp++ = ',';
 5418              		.loc 1 2251 31 discriminator 2 view .LVU1693
 5419 025a A2EB0505 		sub	r5, r2, r5
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5420              		.loc 1 2250 6 discriminator 2 view .LVU1694
 5421 025e E9D1     		bne	.L547
 5422 0260 059D     		ldr	r5, [sp, #20]
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5423              		.loc 1 2256 6 is_stmt 1 view .LVU1695
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5424              		.loc 1 2256 13 is_stmt 0 view .LVU1696
 5425 0262 2E22     		movs	r2, #46
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5426              		.loc 1 2257 9 view .LVU1697
 5427 0264 AB42     		cmp	r3, r5
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5428              		.loc 1 2256 13 view .LVU1698
 5429 0266 4A70     		strb	r2, [r1, #1]
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5430              		.loc 1 2256 10 view .LVU1699
 5431 0268 01F10208 		add	r8, r1, #2
 5432              	.LVL587:
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5433              		.loc 1 2257 6 is_stmt 1 view .LVU1700
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5434              		.loc 1 2257 9 is_stmt 0 view .LVU1701
 5435 026c 40F34281 		ble	.L541
 5436 0270 9A1B     		subs	r2, r3, r6
 5437 0272 0A44     		add	r2, r2, r1
 5438 0274 0131     		adds	r1, r1, #1
 5439              	.LVL588:
 5440              	.L548:
2259:src/display.c **** 		odig++;
 5441              		.loc 1 2259 3 is_stmt 1 discriminator 3 view .LVU1702
2259:src/display.c **** 		odig++;
 5442              		.loc 1 2259 10 is_stmt 0 discriminator 3 view .LVU1703
 5443 0276 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5444              	.LVL589:
2259:src/display.c **** 		odig++;
 5445              		.loc 1 2259 10 discriminator 3 view .LVU1704
 5446 027a 01F8015F 		strb	r5, [r1, #1]!
2260:src/display.c **** 	      }
 5447              		.loc 1 2260 3 is_stmt 1 discriminator 3 view .LVU1705
2258:src/display.c **** 		*obp++ = *p++;
 5448              		.loc 1 2258 31 discriminator 3 view .LVU1706
2258:src/display.c **** 		*obp++ = *p++;
 5449              		.loc 1 2258 22 discriminator 3 view .LVU1707
2258:src/display.c **** 		*obp++ = *p++;
 5450              		.loc 1 2258 8 is_stmt 0 discriminator 3 view .LVU1708
 5451 027e 9142     		cmp	r1, r2
ARM GAS  /tmp/ccwSk7O0.s 			page 187


 5452 0280 F9D1     		bne	.L548
 5453 0282 F243     		mvns	r2, r6
 5454 0284 1A44     		add	r2, r2, r3
 5455 0286 9044     		add	r8, r8, r2
 5456              	.LVL590:
2260:src/display.c **** 	      }
 5457              		.loc 1 2260 7 view .LVU1709
 5458 0288 1D46     		mov	r5, r3
 5459 028a 33E1     		b	.L541
 5460              	.LVL591:
 5461              	.L611:
2260:src/display.c **** 	      }
 5462              		.loc 1 2260 7 view .LVU1710
 5463 028c D846     		mov	r8, fp
 5464              	.LVL592:
 5465              	.L570:
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5466              		.loc 1 2352 2 is_stmt 1 view .LVU1711
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5467              		.loc 1 2352 5 is_stmt 0 view .LVU1712
 5468 028e 029B     		ldr	r3, [sp, #8]
 5469 0290 0A2B     		cmp	r3, #10
 5470 0292 02DD     		ble	.L573
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5471              		.loc 1 2352 50 discriminator 1 view .LVU1713
 5472 0294 002C     		cmp	r4, #0
 5473 0296 00F0FB81 		beq	.L702
 5474              	.L573:
2358:src/display.c **** 	if (odig > *display_digits)
 5475              		.loc 1 2358 2 is_stmt 1 view .LVU1714
 5476 029a 029B     		ldr	r3, [sp, #8]
 5477 029c 9D42     		cmp	r5, r3
 5478 029e A8BF     		it	ge
 5479 02a0 1D46     		movge	r5, r3
 5480              	.LVL593:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5481              		.loc 1 2361 23 is_stmt 0 view .LVU1715
 5482 02a2 5F1B     		subs	r7, r3, r5
 5483              	.LVL594:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5484              		.loc 1 2361 4 view .LVU1716
 5485 02a4 07EBC707 		add	r7, r7, r7, lsl #3
2358:src/display.c **** 	if (odig > *display_digits)
 5486              		.loc 1 2358 7 view .LVU1717
 5487 02a8 0023     		movs	r3, #0
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5488              		.loc 1 2362 5 view .LVU1718
 5489 02aa 9F42     		cmp	r7, r3
2358:src/display.c **** 	if (odig > *display_digits)
 5490              		.loc 1 2358 7 view .LVU1719
 5491 02ac 88F80030 		strb	r3, [r8]
2359:src/display.c **** 	  odig = *display_digits;
 5492              		.loc 1 2359 2 is_stmt 1 view .LVU1720
 5493              	.LVL595:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5494              		.loc 1 2361 2 view .LVU1721
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
ARM GAS  /tmp/ccwSk7O0.s 			page 188


 5495              		.loc 1 2362 2 view .LVU1722
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5496              		.loc 1 2362 5 is_stmt 0 view .LVU1723
 5497 02b0 03DD     		ble	.L574
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5498              		.loc 1 2362 35 discriminator 1 view .LVU1724
 5499 02b2 16F57A7F 		cmn	r6, #1000
2363:src/display.c **** 	if (negative) {
 5500              		.loc 1 2363 4 is_stmt 1 discriminator 1 view .LVU1725
2363:src/display.c **** 	if (negative) {
 5501              		.loc 1 2363 6 is_stmt 0 discriminator 1 view .LVU1726
 5502 02b6 D8BF     		it	le
 5503 02b8 093F     		suble	r7, r7, #9
 5504              	.LVL596:
 5505              	.L574:
2364:src/display.c **** 	  if (res) *res++ = '-';
 5506              		.loc 1 2364 2 is_stmt 1 view .LVU1727
2364:src/display.c **** 	  if (res) *res++ = '-';
 5507              		.loc 1 2364 5 is_stmt 0 view .LVU1728
 5508 02ba 039B     		ldr	r3, [sp, #12]
 5509 02bc 2BB1     		cbz	r3, .L575
2365:src/display.c **** 	  else {
 5510              		.loc 1 2365 4 is_stmt 1 view .LVU1729
2365:src/display.c **** 	  else {
 5511              		.loc 1 2365 7 is_stmt 0 view .LVU1730
 5512 02be 002C     		cmp	r4, #0
 5513 02c0 00F0FE81 		beq	.L576
2365:src/display.c **** 	  else {
 5514              		.loc 1 2365 13 is_stmt 1 discriminator 1 view .LVU1731
 5515              	.LVL597:
2365:src/display.c **** 	  else {
 5516              		.loc 1 2365 20 is_stmt 0 discriminator 1 view .LVU1732
 5517 02c4 2D23     		movs	r3, #45
 5518 02c6 04F8013B 		strb	r3, [r4], #1
 5519              	.LVL598:
 5520              	.L575:
2373:src/display.c **** 	  if (c == '.') {
 5521              		.loc 1 2373 12 is_stmt 1 discriminator 1 view .LVU1733
2373:src/display.c **** 	  if (c == '.') {
 5522              		.loc 1 2373 18 is_stmt 0 discriminator 1 view .LVU1734
 5523 02ca 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5524              	.LVL599:
2373:src/display.c **** 	  if (c == '.') {
 5525              		.loc 1 2373 2 discriminator 1 view .LVU1735
 5526 02ce A2B1     		cbz	r2, .L577
2373:src/display.c **** 	  if (c == '.') {
 5527              		.loc 1 2373 31 view .LVU1736
 5528 02d0 6B2F     		cmp	r7, #107
 5529 02d2 12DC     		bgt	.L577
 5530              	.LVL600:
 5531              	.L578:
2375:src/display.c **** 	  } else if (c == ',') {
 5532              		.loc 1 2375 12 view .LVU1737
 5533 02d4 DFF88C90 		ldr	r9, .L714+12
 5534              	.LVL601:
 5535              	.L587:
2374:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
ARM GAS  /tmp/ccwSk7O0.s 			page 189


 5536              		.loc 1 2374 4 is_stmt 1 view .LVU1738
2374:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5537              		.loc 1 2374 7 is_stmt 0 view .LVU1739
 5538 02d8 2E2A     		cmp	r2, #46
 5539 02da 00F02081 		beq	.L703
2376:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5540              		.loc 1 2376 11 is_stmt 1 view .LVU1740
2376:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5541              		.loc 1 2376 14 is_stmt 0 view .LVU1741
 5542 02de 2C2A     		cmp	r2, #44
 5543 02e0 00F04681 		beq	.L704
2379:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5544              		.loc 1 2379 6 is_stmt 1 view .LVU1742
 5545              	.LVL602:
 5546              	.LBB403:
 5547              	.LBI403:
 415:src/display.c ****   if (res) *res++ = ch;
 5548              		.loc 1 415 14 view .LVU1743
 5549              	.LBB404:
 416:src/display.c ****   else	set_dig(base, ch);
 5550              		.loc 1 416 3 view .LVU1744
 416:src/display.c ****   else	set_dig(base, ch);
 5551              		.loc 1 416 6 is_stmt 0 view .LVU1745
 5552 02e4 002C     		cmp	r4, #0
 5553 02e6 00F05281 		beq	.L585
 416:src/display.c ****   else	set_dig(base, ch);
 5554              		.loc 1 416 12 is_stmt 1 view .LVU1746
 5555              	.LVL603:
 416:src/display.c ****   else	set_dig(base, ch);
 5556              		.loc 1 416 19 is_stmt 0 view .LVU1747
 5557 02ea 04F8012B 		strb	r2, [r4], #1
 5558              	.LVL604:
 5559              	.L586:
 418:src/display.c **** }
 5560              		.loc 1 418 3 is_stmt 1 view .LVU1748
 418:src/display.c **** }
 5561              		.loc 1 418 3 is_stmt 0 view .LVU1749
 5562              	.LBE404:
 5563              	.LBE403:
2380:src/display.c **** 	  }
 5564              		.loc 1 2380 6 is_stmt 1 view .LVU1750
2373:src/display.c **** 	  if (c == '.') {
 5565              		.loc 1 2373 18 is_stmt 0 view .LVU1751
 5566 02ee 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 5567              	.LVL605:
2380:src/display.c **** 	  }
 5568              		.loc 1 2380 8 view .LVU1752
 5569 02f2 0937     		adds	r7, r7, #9
 5570              	.LVL606:
2373:src/display.c **** 	  if (c == '.') {
 5571              		.loc 1 2373 53 is_stmt 1 view .LVU1753
2373:src/display.c **** 	  if (c == '.') {
 5572              		.loc 1 2373 12 view .LVU1754
2373:src/display.c **** 	  if (c == '.') {
 5573              		.loc 1 2373 2 is_stmt 0 view .LVU1755
 5574 02f4 0AB1     		cbz	r2, .L577
2373:src/display.c **** 	  if (c == '.') {
ARM GAS  /tmp/ccwSk7O0.s 			page 190


 5575              		.loc 1 2373 31 discriminator 3 view .LVU1756
 5576 02f6 6B2F     		cmp	r7, #107
 5577 02f8 EEDD     		ble	.L587
 5578              	.LVL607:
 5579              	.L577:
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5580              		.loc 1 2393 2 is_stmt 1 view .LVU1757
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5581              		.loc 1 2393 5 is_stmt 0 view .LVU1758
 5582 02fa BAF1000F 		cmp	r10, #0
 5583 02fe 40F01F81 		bne	.L705
 5584              	.L588:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5585              		.loc 1 2396 2 is_stmt 1 view .LVU1759
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5586              		.loc 1 2396 5 is_stmt 0 view .LVU1760
 5587 0302 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5588 0306 2E2B     		cmp	r3, #46
 5589 0308 00F02481 		beq	.L706
 5590              	.LVL608:
 5591              	.L589:
2398:src/display.c ****       }
 5592              		.loc 1 2398 2 is_stmt 1 view .LVU1761
2398:src/display.c ****       }
 5593              		.loc 1 2398 18 is_stmt 0 view .LVU1762
 5594 030c 019B     		ldr	r3, [sp, #4]
 5595 030e 1D60     		str	r5, [r3]
 5596              	.LVL609:
 5597              	.L465:
2399:src/display.c **** 
 5598              		.loc 1 2399 7 view .LVU1763
 5599 0310 27B0     		add	sp, sp, #156
 5600              		.cfi_remember_state
 5601              		.cfi_def_cfa_offset 36
 5602              		@ sp needed
 5603 0312 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5604              	.LVL610:
 5605              	.L473:
 5606              		.cfi_restore_state
2098:src/display.c **** 
 5607              		.loc 1 2098 4 is_stmt 1 view .LVU1764
 5608 0316 5946     		mov	r1, fp
 5609 0318 3846     		mov	r0, r7
 5610 031a FFF7FEFF 		bl	decNumberToString
 5611              	.LVL611:
 5612 031e A2E6     		b	.L475
 5613              	.LVL612:
 5614              	.L466:
2056:src/display.c **** 	    if (State2.hms) {
 5615              		.loc 1 2056 4 view .LVU1765
2056:src/display.c **** 	    if (State2.hms) {
 5616              		.loc 1 2056 25 is_stmt 0 view .LVU1766
 5617 0320 0D4B     		ldr	r3, .L714
 5618 0322 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
2056:src/display.c **** 	    if (State2.hms) {
 5619              		.loc 1 2056 22 view .LVU1767
 5620 0324 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 191


2056:src/display.c **** 	    if (State2.hms) {
 5621              		.loc 1 2056 25 view .LVU1768
 5622 0326 01F00201 		and	r1, r1, #2
2056:src/display.c **** 	    if (State2.hms) {
 5623              		.loc 1 2056 22 view .LVU1769
 5624 032a 1143     		orrs	r1, r1, r2
 5625 032c 7FF477AE 		bne	.L469
2057:src/display.c **** 	      set_x_hms(z, res);
 5626              		.loc 1 2057 6 is_stmt 1 view .LVU1770
2057:src/display.c **** 	      set_x_hms(z, res);
 5627              		.loc 1 2057 10 is_stmt 0 view .LVU1771
 5628 0330 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
2057:src/display.c **** 	      set_x_hms(z, res);
 5629              		.loc 1 2057 9 view .LVU1772
 5630 0332 DE07     		lsls	r6, r3, #31
 5631 0334 00F1F282 		bmi	.L707
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5632              		.loc 1 2061 11 is_stmt 1 view .LVU1773
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5633              		.loc 1 2061 15 is_stmt 0 view .LVU1774
 5634 0338 084B     		ldr	r3, .L714+4
 5635 033a 1B68     		ldr	r3, [r3]
 5636 033c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5637              		.loc 1 2061 14 view .LVU1775
 5638 0340 9806     		lsls	r0, r3, #26
 5639 0342 7FF56CAE 		bpl	.L469
2062:src/display.c **** 		return;
 5640              		.loc 1 2062 8 is_stmt 1 view .LVU1776
2062:src/display.c **** 		return;
 5641              		.loc 1 2062 12 is_stmt 0 view .LVU1777
 5642 0346 2146     		mov	r1, r4
 5643 0348 3846     		mov	r0, r7
 5644 034a FFF7FEFF 		bl	set_x_fract
 5645              	.LVL613:
2062:src/display.c **** 		return;
 5646              		.loc 1 2062 11 view .LVU1778
 5647 034e 0028     		cmp	r0, #0
 5648 0350 3FF465AE 		beq	.L469
 5649 0354 DCE7     		b	.L465
 5650              	.L715:
 5651 0356 00BF     		.align	2
 5652              	.L714:
 5653 0358 00000000 		.word	StateWhileOn
 5654 035c 00000000 		.word	main_ram
 5655 0360 56555555 		.word	1431655766
 5656 0364 00000000 		.word	.LANCHOR1
 5657              	.LVL614:
 5658              	.L694:
2106:src/display.c **** 	  //  ALL mode: fill the display
 5659              		.loc 1 2106 38 discriminator 1 view .LVU1779
 5660 0368 019B     		ldr	r3, [sp, #4]
 5661 036a 1A68     		ldr	r2, [r3]
2106:src/display.c **** 	  //  ALL mode: fill the display
 5662              		.loc 1 2106 35 discriminator 1 view .LVU1780
 5663 036c 089B     		ldr	r3, [sp, #32]
2106:src/display.c **** 	  //  ALL mode: fill the display
ARM GAS  /tmp/ccwSk7O0.s 			page 192


 5664              		.loc 1 2106 23 discriminator 1 view .LVU1781
 5665 036e 9A42     		cmp	r2, r3
 5666 0370 11DD     		ble	.L488
2110:src/display.c **** 
 5667              		.loc 1 2110 4 is_stmt 1 view .LVU1782
2112:src/display.c **** 	  int orig_mode = mode;
 5668              		.loc 1 2112 23 is_stmt 0 view .LVU1783
 5669 0372 042D     		cmp	r5, #4
2110:src/display.c **** 
 5670              		.loc 1 2110 7 view .LVU1784
 5671 0374 0793     		str	r3, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5672              		.loc 1 2112 2 is_stmt 1 view .LVU1785
2112:src/display.c **** 	  int orig_mode = mode;
 5673              		.loc 1 2112 23 is_stmt 0 view .LVU1786
 5674 0376 12D0     		beq	.L489
 5675              	.L708:
2112:src/display.c **** 	  int orig_mode = mode;
 5676              		.loc 1 2112 43 discriminator 2 view .LVU1787
 5677 0378 052D     		cmp	r5, #5
 5678 037a 00F09881 		beq	.L490
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5679              		.loc 1 2042 6 view .LVU1788
 5680 037e 0023     		movs	r3, #0
 5681 0380 0493     		str	r3, [sp, #16]
 5682 0382 89E6     		b	.L594
 5683              	.LVL615:
 5684              	.L695:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5685              		.loc 1 2137 17 is_stmt 1 discriminator 1 view .LVU1789
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5686              		.loc 1 2137 21 is_stmt 0 discriminator 1 view .LVU1790
 5687 0384 4421     		movs	r1, #68
 5688 0386 5846     		mov	r0, fp
 5689              	.LVL616:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5690              		.loc 1 2137 21 discriminator 1 view .LVU1791
 5691 0388 FFF7FEFF 		bl	find_char
 5692              	.LVL617:
2138:src/display.c **** 	else {
 5693              		.loc 1 2138 2 is_stmt 1 discriminator 1 view .LVU1792
2138:src/display.c **** 	else {
 5694              		.loc 1 2138 5 is_stmt 0 discriminator 1 view .LVU1793
 5695 038c 0646     		mov	r6, r0
 5696 038e 0028     		cmp	r0, #0
 5697 0390 3FF49CAE 		beq	.L492
 5698 0394 92E6     		b	.L491
 5699              	.LVL618:
 5700              	.L488:
2108:src/display.c **** 	else
 5701              		.loc 1 2108 4 is_stmt 1 view .LVU1794
2108:src/display.c **** 	else
 5702              		.loc 1 2108 25 is_stmt 0 view .LVU1795
 5703 0396 013A     		subs	r2, r2, #1
2112:src/display.c **** 	  int orig_mode = mode;
 5704              		.loc 1 2112 23 view .LVU1796
 5705 0398 042D     		cmp	r5, #4
ARM GAS  /tmp/ccwSk7O0.s 			page 193


2108:src/display.c **** 	else
 5706              		.loc 1 2108 7 view .LVU1797
 5707 039a 0792     		str	r2, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5708              		.loc 1 2112 2 is_stmt 1 view .LVU1798
2112:src/display.c **** 	  int orig_mode = mode;
 5709              		.loc 1 2112 23 is_stmt 0 view .LVU1799
 5710 039c ECD1     		bne	.L708
 5711              	.L489:
 5712              	.LBB406:
2113:src/display.c **** 
 5713              		.loc 1 2113 4 is_stmt 1 view .LVU1800
 5714              	.LVL619:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5715              		.loc 1 2115 4 view .LVU1801
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5716              		.loc 1 2115 11 is_stmt 0 view .LVU1802
 5717 039e 2A46     		mov	r2, r5
 5718 03a0 07A9     		add	r1, sp, #28
 5719 03a2 3846     		mov	r0, r7
 5720 03a4 FFF7FEFF 		bl	std_round_fix
 5721              	.LVL620:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5722              		.loc 1 2118 16 view .LVU1803
 5723 03a8 0123     		movs	r3, #1
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5724              		.loc 1 2115 11 view .LVU1804
 5725 03aa 0546     		mov	r5, r0
 5726              	.LVL621:
2116:src/display.c **** 	    // allow zeros to be trimmed
 5727              		.loc 1 2116 4 is_stmt 1 view .LVU1805
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5728              		.loc 1 2118 6 view .LVU1806
2119:src/display.c **** 	    dd = *display_digits - 1;
 5729              		.loc 1 2119 4 view .LVU1807
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5730              		.loc 1 2118 16 is_stmt 0 view .LVU1808
 5731 03ac 0493     		str	r3, [sp, #16]
 5732 03ae 73E6     		b	.L594
 5733              	.LVL622:
 5734              	.L701:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5735              		.loc 1 2118 16 view .LVU1809
 5736              	.LBE406:
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5737              		.loc 1 2198 7 view .LVU1810
 5738 03b0 4846     		mov	r0, r9
 5739              	.LVL623:
2199:src/display.c **** 	    mantissa[0] = '1';
 5740              		.loc 1 2199 41 view .LVU1811
 5741 03b2 4FF03008 		mov	r8, #48
 5742              	.L520:
 5743              	.LVL624:
2199:src/display.c **** 	    mantissa[0] = '1';
 5744              		.loc 1 2199 47 is_stmt 1 discriminator 3 view .LVU1812
2199:src/display.c **** 	    mantissa[0] = '1';
 5745              		.loc 1 2199 36 discriminator 3 view .LVU1813
ARM GAS  /tmp/ccwSk7O0.s 			page 194


2199:src/display.c **** 	    mantissa[0] = '1';
 5746              		.loc 1 2199 41 is_stmt 0 discriminator 3 view .LVU1814
 5747 03b6 00F8018B 		strb	r8, [r0], #1
 5748              	.LVL625:
2199:src/display.c **** 	    mantissa[0] = '1';
 5749              		.loc 1 2199 25 is_stmt 1 discriminator 3 view .LVU1815
2199:src/display.c **** 	    mantissa[0] = '1';
 5750              		.loc 1 2199 6 is_stmt 0 discriminator 3 view .LVU1816
 5751 03ba 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5752 03be BCF1390F 		cmp	ip, #57
 5753 03c2 F8D0     		beq	.L520
 5754              	.LVL626:
 5755              	.L593:
2200:src/display.c **** 	    exp++;
 5756              		.loc 1 2200 6 is_stmt 1 view .LVU1817
2200:src/display.c **** 	    exp++;
 5757              		.loc 1 2200 18 is_stmt 0 view .LVU1818
 5758 03c4 3120     		movs	r0, #49
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5759              		.loc 1 2202 9 view .LVU1819
 5760 03c6 012D     		cmp	r5, #1
2201:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5761              		.loc 1 2201 9 view .LVU1820
 5762 03c8 06F10106 		add	r6, r6, #1
 5763              	.LVL627:
2200:src/display.c **** 	    exp++;
 5764              		.loc 1 2200 18 view .LVU1821
 5765 03cc 8DF85800 		strb	r0, [sp, #88]
2201:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5766              		.loc 1 2201 6 is_stmt 1 view .LVU1822
 5767              	.LVL628:
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5768              		.loc 1 2202 6 view .LVU1823
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5769              		.loc 1 2202 9 is_stmt 0 view .LVU1824
 5770 03d0 7FF4F5AE 		bne	.L689
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5771              		.loc 1 2202 27 discriminator 1 view .LVU1825
 5772 03d4 0298     		ldr	r0, [sp, #8]
 5773 03d6 8642     		cmp	r6, r0
 5774 03d8 C0F2DE80 		blt	.L522
2203:src/display.c **** 	      extra_digits = 0;
 5775              		.loc 1 2203 8 is_stmt 1 view .LVU1826
2203:src/display.c **** 	      extra_digits = 0;
 5776              		.loc 1 2203 28 is_stmt 0 view .LVU1827
 5777 03dc C04B     		ldr	r3, .L716
 5778              	.LVL629:
2203:src/display.c **** 	      extra_digits = 0;
 5779              		.loc 1 2203 28 view .LVU1828
 5780 03de 1B68     		ldr	r3, [r3]
 5781 03e0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2203:src/display.c **** 	      extra_digits = 0;
 5782              		.loc 1 2203 37 view .LVU1829
 5783 03e4 D906     		lsls	r1, r3, #27
 5784              	.LVL630:
2203:src/display.c **** 	      extra_digits = 0;
 5785              		.loc 1 2203 37 view .LVU1830
ARM GAS  /tmp/ccwSk7O0.s 			page 195


 5786 03e6 40F1E582 		bpl	.L709
 5787              	.LVL631:
2214:src/display.c **** 
 5788              		.loc 1 2214 2 is_stmt 1 view .LVU1831
 5789 03ea 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2214:src/display.c **** 
 5790              		.loc 1 2214 9 is_stmt 0 view .LVU1832
 5791 03ee 09EB0E03 		add	r3, r9, lr
 5792              	.LVL632:
2214:src/display.c **** 
 5793              		.loc 1 2214 45 is_stmt 1 view .LVU1833
2203:src/display.c **** 	      extra_digits = 0;
 5794              		.loc 1 2203 37 is_stmt 0 view .LVU1834
 5795 03f2 0325     		movs	r5, #3
2214:src/display.c **** 
 5796              		.loc 1 2214 2 view .LVU1835
 5797 03f4 0029     		cmp	r1, #0
 5798 03f6 7FF4E5AE 		bne	.L591
 5799              	.LVL633:
 5800              	.L528:
2316:src/display.c **** 	  case -1:
 5801              		.loc 1 2316 4 is_stmt 1 view .LVU1836
2316:src/display.c **** 	  case -1:
 5802              		.loc 1 2316 16 is_stmt 0 view .LVU1837
 5803 03fa BA4B     		ldr	r3, .L716+4
 5804 03fc 83FB0613 		smull	r1, r3, r3, r6
 5805 0400 A3EBE673 		sub	r3, r3, r6, asr #31
 5806 0404 03EB4303 		add	r3, r3, r3, lsl #1
 5807 0408 F31A     		subs	r3, r6, r3
 5808 040a 0233     		adds	r3, r3, #2
 5809 040c 042B     		cmp	r3, #4
 5810 040e 4FD8     		bhi	.L563
 5811 0410 DFE813F0 		tbh	[pc, r3, lsl #1]
 5812              	.L565:
 5813 0414 2C02     		.2byte	(.L566-.L565)/2
 5814 0416 1A02     		.2byte	(.L564-.L565)/2
 5815 0418 4E00     		.2byte	(.L563-.L565)/2
 5816 041a 2C02     		.2byte	(.L566-.L565)/2
 5817 041c 1A02     		.2byte	(.L564-.L565)/2
 5818              	.LVL634:
 5819              		.p2align 1
 5820              	.L534:
2225:src/display.c **** 	    case -1:
 5821              		.loc 1 2225 6 is_stmt 1 view .LVU1838
2225:src/display.c **** 	    case -1:
 5822              		.loc 1 2225 32 is_stmt 0 view .LVU1839
 5823 041e B048     		ldr	r0, .L716
2225:src/display.c **** 	    case -1:
 5824              		.loc 1 2225 19 view .LVU1840
 5825 0420 B049     		ldr	r1, .L716+4
2225:src/display.c **** 	    case -1:
 5826              		.loc 1 2225 32 view .LVU1841
 5827 0422 0068     		ldr	r0, [r0]
2225:src/display.c **** 	    case -1:
 5828              		.loc 1 2225 19 view .LVU1842
 5829 0424 81FB0651 		smull	r5, r1, r1, r6
2225:src/display.c **** 	    case -1:
ARM GAS  /tmp/ccwSk7O0.s 			page 196


 5830              		.loc 1 2225 32 view .LVU1843
 5831 0428 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2225:src/display.c **** 	    case -1:
 5832              		.loc 1 2225 19 view .LVU1844
 5833 042c A1EBE671 		sub	r1, r1, r6, asr #31
 5834 0430 01EB4101 		add	r1, r1, r1, lsl #1
 5835 0434 711A     		subs	r1, r6, r1
2225:src/display.c **** 	    case -1:
 5836              		.loc 1 2225 32 view .LVU1845
 5837 0436 C0F30010 		ubfx	r0, r0, #4, #1
2225:src/display.c **** 	    case -1:
 5838              		.loc 1 2225 24 view .LVU1846
 5839 043a 01FB00F1 		mul	r1, r1, r0
 5840 043e 0231     		adds	r1, r1, #2
 5841 0440 0429     		cmp	r1, #4
 5842 0442 00F27182 		bhi	.L608
 5843 0446 DFE811F0 		tbh	[pc, r1, lsl #1]
 5844              	.L538:
 5845 044a 4B02     		.2byte	(.L539-.L538)/2
 5846 044c 2002     		.2byte	(.L537-.L538)/2
 5847 044e 6F02     		.2byte	(.L608-.L538)/2
 5848 0450 4B02     		.2byte	(.L539-.L538)/2
 5849 0452 2002     		.2byte	(.L537-.L538)/2
 5850              	.LVL635:
 5851              		.p2align 1
 5852              	.L508:
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5853              		.loc 1 2181 4 is_stmt 1 view .LVU1847
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5854              		.loc 1 2181 7 is_stmt 0 view .LVU1848
 5855 0454 B342     		cmp	r3, r6
 5856 0456 03DD     		ble	.L511
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5857              		.loc 1 2181 45 discriminator 1 view .LVU1849
 5858 0458 5342     		rsbs	r3, r2, #0
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5859              		.loc 1 2181 36 discriminator 1 view .LVU1850
 5860 045a B342     		cmp	r3, r6
 5861 045c 40F30A82 		ble	.L512
 5862              	.L511:
2182:src/display.c **** 	  else {
 5863              		.loc 1 2182 6 is_stmt 1 view .LVU1851
2182:src/display.c **** 	  else {
 5864              		.loc 1 2182 26 is_stmt 0 view .LVU1852
 5865 0460 9F4B     		ldr	r3, .L716
 5866 0462 1B68     		ldr	r3, [r3]
 5867 0464 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2182:src/display.c **** 	  else {
 5868              		.loc 1 2182 35 view .LVU1853
 5869 0468 13F0100F 		tst	r3, #16
 5870 046c 14BF     		ite	ne
 5871 046e 0325     		movne	r5, #3
 5872              	.LVL636:
2182:src/display.c **** 	  else {
 5873              		.loc 1 2182 35 view .LVU1854
 5874 0470 0225     		moveq	r5, #2
 5875 0472 75E6     		b	.L690
ARM GAS  /tmp/ccwSk7O0.s 			page 197


 5876              	.LVL637:
 5877              	.L699:
2182:src/display.c **** 	  else {
 5878              		.loc 1 2182 35 view .LVU1855
 5879 0474 013E     		subs	r6, r6, #1
 5880 0476 08EB0602 		add	r2, r8, r6
 5881              	.L501:
2161:src/display.c **** 	    exp--;
 5882              		.loc 1 2161 4 is_stmt 1 discriminator 1 view .LVU1856
2162:src/display.c **** 	  while (*++q == '0');
 5883              		.loc 1 2162 6 discriminator 1 view .LVU1857
 5884 047a A2EB0806 		sub	r6, r2, r8
 5885              	.LVL638:
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5886              		.loc 1 2163 10 discriminator 1 view .LVU1858
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5887              		.loc 1 2163 11 is_stmt 0 discriminator 1 view .LVU1859
 5888 047e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5889              	.LVL639:
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5890              		.loc 1 2163 4 discriminator 1 view .LVU1860
 5891 0482 302B     		cmp	r3, #48
 5892 0484 F9D0     		beq	.L501
2164:src/display.c **** 	    *p++ = *q++;
 5893              		.loc 1 2164 10 is_stmt 1 view .LVU1861
 5894 0486 A3F13002 		sub	r2, r3, #48
 5895 048a 092A     		cmp	r2, #9
 5896 048c 3FF661AE 		bhi	.L502
2027:src/display.c **** 	char *r;
 5897              		.loc 1 2027 8 is_stmt 0 view .LVU1862
 5898 0490 4A46     		mov	r2, r9
 5899              	.LVL640:
 5900              	.L503:
2165:src/display.c **** 	} else {
 5901              		.loc 1 2165 6 is_stmt 1 view .LVU1863
2165:src/display.c **** 	} else {
 5902              		.loc 1 2165 11 is_stmt 0 view .LVU1864
 5903 0492 02F8013B 		strb	r3, [r2], #1
 5904              	.LVL641:
2164:src/display.c **** 	    *p++ = *q++;
 5905              		.loc 1 2164 10 is_stmt 1 view .LVU1865
2164:src/display.c **** 	    *p++ = *q++;
 5906              		.loc 1 2164 11 is_stmt 0 view .LVU1866
 5907 0496 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2164:src/display.c **** 	    *p++ = *q++;
 5908              		.loc 1 2164 10 view .LVU1867
 5909 049a A3F13001 		sub	r1, r3, #48
 5910 049e 0929     		cmp	r1, #9
 5911 04a0 F7D9     		bls	.L503
 5912 04a2 56E6     		b	.L502
 5913              	.LVL642:
 5914              	.L697:
2155:src/display.c **** 	  q++;
 5915              		.loc 1 2155 4 is_stmt 1 view .LVU1868
2156:src/display.c **** 	} else if (*q == '+')
 5916              		.loc 1 2156 4 view .LVU1869
2155:src/display.c **** 	  q++;
ARM GAS  /tmp/ccwSk7O0.s 			page 198


 5917              		.loc 1 2155 13 is_stmt 0 view .LVU1870
 5918 04a4 0122     		movs	r2, #1
 5919 04a6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5920 04aa 0392     		str	r2, [sp, #12]
2156:src/display.c **** 	} else if (*q == '+')
 5921              		.loc 1 2156 5 view .LVU1871
 5922 04ac 9044     		add	r8, r8, r2
 5923              	.LVL643:
2156:src/display.c **** 	} else if (*q == '+')
 5924              		.loc 1 2156 5 view .LVU1872
 5925 04ae 23E6     		b	.L497
 5926              	.LVL644:
 5927              	.L563:
2156:src/display.c **** 	} else if (*q == '+')
 5928              		.loc 1 2156 5 view .LVU1873
 5929 04b0 079A     		ldr	r2, [sp, #28]
2316:src/display.c **** 	  case -1:
 5930              		.loc 1 2316 16 view .LVU1874
 5931 04b2 0125     		movs	r5, #1
2021:src/display.c **** 	int odig = 0;
 5932              		.loc 1 2021 15 view .LVU1875
 5933 04b4 5946     		mov	r1, fp
 5934              	.LVL645:
 5935              	.L531:
2330:src/display.c **** 	  };
 5936              		.loc 1 2330 6 is_stmt 1 view .LVU1876
2331:src/display.c **** 	  // Falling through
 5937              		.loc 1 2331 5 view .LVU1877
2335:src/display.c **** 	  odig++;
 5938              		.loc 1 2335 4 view .LVU1878
2335:src/display.c **** 	  odig++;
 5939              		.loc 1 2335 15 is_stmt 0 view .LVU1879
 5940 04b6 4B46     		mov	r3, r9
 5941              	.LVL646:
2335:src/display.c **** 	  odig++;
 5942              		.loc 1 2335 11 view .LVU1880
 5943 04b8 8846     		mov	r8, r1
 5944 04ba 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5945              	.LVL647:
2335:src/display.c **** 	  odig++;
 5946              		.loc 1 2335 11 view .LVU1881
 5947 04be 08F8020B 		strb	r0, [r8], #2
2336:src/display.c **** 	  *obp++ = '.';
 5948              		.loc 1 2336 4 is_stmt 1 view .LVU1882
2337:src/display.c **** 	  dd--;
 5949              		.loc 1 2337 4 view .LVU1883
 5950              	.LVL648:
2337:src/display.c **** 	  dd--;
 5951              		.loc 1 2337 11 is_stmt 0 view .LVU1884
 5952 04c2 4FF02E0C 		mov	ip, #46
2339:src/display.c **** 	    *obp++ = *p++;
 5953              		.loc 1 2339 13 view .LVU1885
 5954 04c6 901E     		subs	r0, r2, #2
2339:src/display.c **** 	    *obp++ = *p++;
 5955              		.loc 1 2339 10 view .LVU1886
 5956 04c8 002A     		cmp	r2, #0
2337:src/display.c **** 	  dd--;
ARM GAS  /tmp/ccwSk7O0.s 			page 199


 5957              		.loc 1 2337 11 view .LVU1887
 5958 04ca 81F801C0 		strb	ip, [r1, #1]
2338:src/display.c **** 	  while (dd-- >= 0) {
 5959              		.loc 1 2338 4 is_stmt 1 view .LVU1888
2339:src/display.c **** 	    *obp++ = *p++;
 5960              		.loc 1 2339 4 view .LVU1889
2339:src/display.c **** 	    *obp++ = *p++;
 5961              		.loc 1 2339 10 view .LVU1890
2339:src/display.c **** 	    *obp++ = *p++;
 5962              		.loc 1 2339 13 is_stmt 0 view .LVU1891
 5963 04ce 0790     		str	r0, [sp, #28]
2339:src/display.c **** 	    *obp++ = *p++;
 5964              		.loc 1 2339 10 view .LVU1892
 5965 04d0 40F32D82 		ble	.L609
2339:src/display.c **** 	    *obp++ = *p++;
 5966              		.loc 1 2339 10 view .LVU1893
 5967 04d4 501C     		adds	r0, r2, #1
 5968 04d6 0131     		adds	r1, r1, #1
 5969 04d8 8144     		add	r9, r9, r0
 5970              	.LVL649:
 5971              	.L569:
2340:src/display.c **** 	    odig++;
 5972              		.loc 1 2340 6 is_stmt 1 view .LVU1894
2340:src/display.c **** 	    odig++;
 5973              		.loc 1 2340 13 is_stmt 0 view .LVU1895
 5974 04da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5975              	.LVL650:
2340:src/display.c **** 	    odig++;
 5976              		.loc 1 2340 13 view .LVU1896
 5977 04de 01F8010F 		strb	r0, [r1, #1]!
2341:src/display.c **** 	  }
 5978              		.loc 1 2341 6 is_stmt 1 view .LVU1897
2339:src/display.c **** 	    *obp++ = *p++;
 5979              		.loc 1 2339 10 view .LVU1898
 5980 04e2 4B45     		cmp	r3, r9
 5981 04e4 F9D1     		bne	.L569
 5982 04e6 6FF00103 		mvn	r3, #1
 5983              	.LVL651:
2339:src/display.c **** 	    *obp++ = *p++;
 5984              		.loc 1 2339 10 is_stmt 0 view .LVU1899
 5985 04ea 9044     		add	r8, r8, r2
 5986 04ec 1544     		add	r5, r5, r2
 5987 04ee 0793     		str	r3, [sp, #28]
2343:src/display.c **** 	}
 5988              		.loc 1 2343 13 view .LVU1900
 5989 04f0 4FF0010A 		mov	r10, #1
 5990              	.L541:
 5991              	.LVL652:
2346:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5992              		.loc 1 2346 2 is_stmt 1 view .LVU1901
2346:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5993              		.loc 1 2346 5 is_stmt 0 view .LVU1902
 5994 04f4 049B     		ldr	r3, [sp, #16]
 5995 04f6 002B     		cmp	r3, #0
 5996 04f8 3FF4C9AE 		beq	.L570
2347:src/display.c **** 	    obp--;
 5997              		.loc 1 2347 10 is_stmt 1 view .LVU1903
ARM GAS  /tmp/ccwSk7O0.s 			page 200


 5998 04fc D845     		cmp	r8, fp
 5999 04fe 7FF6C6AE 		bls	.L570
 6000 0502 4346     		mov	r3, r8
 6001 0504 04E0     		b	.L571
 6002              	.LVL653:
 6003              	.L572:
2347:src/display.c **** 	    obp--;
 6004              		.loc 1 2347 10 is_stmt 0 view .LVU1904
 6005 0506 9B45     		cmp	fp, r3
2349:src/display.c **** 	  }
 6006              		.loc 1 2349 10 view .LVU1905
 6007 0508 05F1FF35 		add	r5, r5, #-1
 6008              	.LVL654:
2347:src/display.c **** 	    obp--;
 6009              		.loc 1 2347 10 is_stmt 1 view .LVU1906
 6010 050c 3FF4BEAE 		beq	.L611
 6011              	.LVL655:
 6012              	.L571:
2348:src/display.c **** 	    odig--;
 6013              		.loc 1 2348 6 discriminator 1 view .LVU1907
 6014 0510 9846     		mov	r8, r3
 6015              	.LVL656:
2348:src/display.c **** 	    odig--;
 6016              		.loc 1 2348 6 is_stmt 0 discriminator 1 view .LVU1908
 6017 0512 013B     		subs	r3, r3, #1
 6018              	.LVL657:
2349:src/display.c **** 	  }
 6019              		.loc 1 2349 6 is_stmt 1 discriminator 1 view .LVU1909
2347:src/display.c **** 	    obp--;
 6020              		.loc 1 2347 19 is_stmt 0 discriminator 1 view .LVU1910
 6021 0514 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 6022 0518 302A     		cmp	r2, #48
 6023 051a F4D0     		beq	.L572
2347:src/display.c **** 	    obp--;
 6024              		.loc 1 2347 19 discriminator 1 view .LVU1911
 6025 051c B7E6     		b	.L570
 6026              	.LVL658:
 6027              	.L703:
2375:src/display.c **** 	  } else if (c == ',') {
 6028              		.loc 1 2375 6 is_stmt 1 view .LVU1912
2375:src/display.c **** 	  } else if (c == ',') {
 6029              		.loc 1 2375 12 is_stmt 0 view .LVU1913
 6030 051e 2246     		mov	r2, r4
 6031              	.LVL659:
2375:src/display.c **** 	  } else if (c == ',') {
 6032              		.loc 1 2375 12 view .LVU1914
 6033 0520 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 6034 0524 A7F10900 		sub	r0, r7, #9
 6035 0528 FFF7FEFF 		bl	set_decimal
 6036              	.LVL660:
 6037 052c 0446     		mov	r4, r0
 6038              	.LVL661:
 6039              	.L581:
2373:src/display.c **** 	  if (c == '.') {
 6040              		.loc 1 2373 53 is_stmt 1 view .LVU1915
2373:src/display.c **** 	  if (c == '.') {
 6041              		.loc 1 2373 12 view .LVU1916
ARM GAS  /tmp/ccwSk7O0.s 			page 201


2373:src/display.c **** 	  if (c == '.') {
 6042              		.loc 1 2373 18 is_stmt 0 view .LVU1917
 6043 052e 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 6044              	.LVL662:
2373:src/display.c **** 	  if (c == '.') {
 6045              		.loc 1 2373 2 view .LVU1918
 6046 0532 002A     		cmp	r2, #0
 6047 0534 7FF4D0AE 		bne	.L587
2393:src/display.c **** 	  set_exp(exp, 0, res);
 6048              		.loc 1 2393 2 is_stmt 1 view .LVU1919
2393:src/display.c **** 	  set_exp(exp, 0, res);
 6049              		.loc 1 2393 5 is_stmt 0 view .LVU1920
 6050 0538 BAF1000F 		cmp	r10, #0
 6051 053c 3FF4E1AE 		beq	.L588
 6052              	.LVL663:
 6053              	.L705:
2394:src/display.c **** #endif
 6054              		.loc 1 2394 4 is_stmt 1 view .LVU1921
 6055 0540 3046     		mov	r0, r6
 6056 0542 2246     		mov	r2, r4
 6057              	.LVL664:
2394:src/display.c **** #endif
 6058              		.loc 1 2394 4 is_stmt 0 view .LVU1922
 6059 0544 0021     		movs	r1, #0
 6060 0546 FFF7FEFF 		bl	set_exp
 6061              	.LVL665:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6062              		.loc 1 2396 2 is_stmt 1 view .LVU1923
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6063              		.loc 1 2396 5 is_stmt 0 view .LVU1924
 6064 054a 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 6065 054e 2E2B     		cmp	r3, #46
 6066 0550 7FF4DCAE 		bne	.L589
 6067              	.L706:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6068              		.loc 1 2396 21 discriminator 1 view .LVU1925
 6069 0554 002C     		cmp	r4, #0
 6070 0556 7FF4D9AE 		bne	.L589
2397:src/display.c **** 	*display_digits = odig;
 6071              		.loc 1 2397 4 is_stmt 1 view .LVU1926
2397:src/display.c **** 	*display_digits = odig;
 6072              		.loc 1 2397 33 is_stmt 0 view .LVU1927
 6073 055a 019B     		ldr	r3, [sp, #4]
 6074 055c 1868     		ldr	r0, [r3]
2397:src/display.c **** 	*display_digits = odig;
 6075              		.loc 1 2397 4 view .LVU1928
 6076 055e 624B     		ldr	r3, .L716+8
2397:src/display.c **** 	*display_digits = odig;
 6077              		.loc 1 2397 33 view .LVU1929
 6078 0560 0138     		subs	r0, r0, #1
2397:src/display.c **** 	*display_digits = odig;
 6079              		.loc 1 2397 4 view .LVU1930
 6080 0562 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6081 0564 2246     		mov	r2, r4
 6082 0566 00EBC000 		add	r0, r0, r0, lsl #3
 6083 056a FFF7FEFF 		bl	set_decimal
 6084              	.LVL666:
ARM GAS  /tmp/ccwSk7O0.s 			page 202


 6085 056e CDE6     		b	.L589
 6086              	.LVL667:
 6087              	.L704:
2377:src/display.c **** 	  } else {
 6088              		.loc 1 2377 6 is_stmt 1 view .LVU1931
2377:src/display.c **** 	  } else {
 6089              		.loc 1 2377 12 is_stmt 0 view .LVU1932
 6090 0570 5E4B     		ldr	r3, .L716+12
 6091 0572 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6092              	.LVL668:
 6093              	.LBB407:
 6094              	.LBI407:
 375:src/display.c ****   if (sep == SEP_NONE)
 6095              		.loc 1 375 14 is_stmt 1 view .LVU1933
 6096              	.LBB408:
 376:src/display.c ****     return res;
 6097              		.loc 1 376 3 view .LVU1934
 376:src/display.c ****     return res;
 6098              		.loc 1 376 6 is_stmt 0 view .LVU1935
 6099 0574 0029     		cmp	r1, #0
 6100 0576 DAD0     		beq	.L581
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6101              		.loc 1 378 3 is_stmt 1 view .LVU1936
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6102              		.loc 1 378 6 is_stmt 0 view .LVU1937
 6103 0578 002C     		cmp	r4, #0
 6104 057a 00F0DB81 		beq	.L583
 379:src/display.c ****     else *res++ = '.';
 6105              		.loc 1 379 5 is_stmt 1 view .LVU1938
 379:src/display.c ****     else *res++ = '.';
 6106              		.loc 1 379 8 is_stmt 0 view .LVU1939
 6107 057e 0129     		cmp	r1, #1
 379:src/display.c ****     else *res++ = '.';
 6108              		.loc 1 379 27 is_stmt 1 view .LVU1940
 6109              	.LVL669:
 380:src/display.c ****   } else {
 6110              		.loc 1 380 17 is_stmt 0 view .LVU1941
 6111 0580 16BF     		itet	ne
 6112 0582 2E23     		movne	r3, #46
 379:src/display.c ****     else *res++ = '.';
 6113              		.loc 1 379 34 view .LVU1942
 6114 0584 04F8012B 		strbeq	r2, [r4], #1
 6115              	.LVL670:
 380:src/display.c ****   } else {
 6116              		.loc 1 380 10 is_stmt 1 view .LVU1943
 380:src/display.c ****   } else {
 6117              		.loc 1 380 17 is_stmt 0 view .LVU1944
 6118 0588 04F8013B 		strbne	r3, [r4], #1
 6119              	.LVL671:
 380:src/display.c ****   } else {
 6120              		.loc 1 380 17 view .LVU1945
 6121 058c CFE7     		b	.L581
 6122              	.LVL672:
 6123              	.L585:
 380:src/display.c ****   } else {
 6124              		.loc 1 380 17 view .LVU1946
 6125              	.LBE408:
ARM GAS  /tmp/ccwSk7O0.s 			page 203


 6126              	.LBE407:
 6127              	.LBB410:
 6128              	.LBB405:
 417:src/display.c ****   return res;
 6129              		.loc 1 417 8 is_stmt 1 view .LVU1947
 6130 058e 1146     		mov	r1, r2
 6131 0590 3846     		mov	r0, r7
 6132 0592 FFF7FEFF 		bl	set_dig
 6133              	.LVL673:
 417:src/display.c ****   return res;
 6134              		.loc 1 417 8 is_stmt 0 view .LVU1948
 6135 0596 AAE6     		b	.L586
 6136              	.LVL674:
 6137              	.L522:
 417:src/display.c ****   return res;
 6138              		.loc 1 417 8 view .LVU1949
 6139              	.LBE405:
 6140              	.LBE410:
2214:src/display.c **** 
 6141              		.loc 1 2214 2 is_stmt 1 view .LVU1950
2214:src/display.c **** 
 6142              		.loc 1 2214 45 view .LVU1951
2214:src/display.c **** 
 6143              		.loc 1 2214 2 is_stmt 0 view .LVU1952
 6144 0598 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6145 059c 0029     		cmp	r1, #0
 6146 059e 7FF411AE 		bne	.L591
 6147              	.LVL675:
 6148              	.L529:
2279:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6149              		.loc 1 2279 4 is_stmt 1 view .LVU1953
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6150              		.loc 1 2280 4 view .LVU1954
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6151              		.loc 1 2280 7 is_stmt 0 view .LVU1955
 6152 05a2 002E     		cmp	r6, #0
 6153 05a4 C0F22181 		blt	.L552
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6154              		.loc 1 2280 7 view .LVU1956
 6155 05a8 731C     		adds	r3, r6, #1
2282:src/display.c **** 		*obp++ = ',';
 6156              		.loc 1 2282 31 view .LVU1957
 6157 05aa DFF838E1 		ldr	lr, .L716+4
 6158 05ae 0593     		str	r3, [sp, #20]
 6159 05b0 09EB030C 		add	ip, r9, r3
2216:src/display.c **** 	switch (mode) {
 6160              		.loc 1 2216 4 view .LVU1958
 6161 05b4 4D46     		mov	r5, r9
2021:src/display.c **** 	int odig = 0;
 6162              		.loc 1 2021 15 view .LVU1959
 6163 05b6 5846     		mov	r0, fp
 6164 05b8 05E0     		b	.L553
 6165              	.LVL676:
 6166              	.L556:
2283:src/display.c **** 	      *obp++ = *p++;
 6167              		.loc 1 2283 3 is_stmt 1 view .LVU1960
2282:src/display.c **** 		*obp++ = ',';
ARM GAS  /tmp/ccwSk7O0.s 			page 204


 6168              		.loc 1 2282 18 is_stmt 0 view .LVU1961
 6169 05ba 0229     		cmp	r1, #2
2283:src/display.c **** 	      *obp++ = *p++;
 6170              		.loc 1 2283 10 view .LVU1962
 6171 05bc 05BF     		ittet	eq
 6172 05be 2C23     		moveq	r3, #44
 6173 05c0 4370     		strbeq	r3, [r0, #1]
2284:src/display.c **** 	      odig++;
 6174              		.loc 1 2284 12 view .LVU1963
 6175 05c2 0130     		addne	r0, r0, #1
 6176              	.LVL677:
2283:src/display.c **** 	      *obp++ = *p++;
 6177              		.loc 1 2283 7 view .LVU1964
 6178 05c4 0230     		addeq	r0, r0, #2
 6179              	.LVL678:
 6180              	.L553:
2284:src/display.c **** 	      odig++;
 6181              		.loc 1 2284 8 is_stmt 1 discriminator 2 view .LVU1965
2284:src/display.c **** 	      odig++;
 6182              		.loc 1 2284 15 is_stmt 0 discriminator 2 view .LVU1966
 6183 05c6 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6184              	.LVL679:
2282:src/display.c **** 		*obp++ = ',';
 6185              		.loc 1 2282 8 is_stmt 1 discriminator 2 view .LVU1967
2284:src/display.c **** 	      odig++;
 6186              		.loc 1 2284 15 is_stmt 0 discriminator 2 view .LVU1968
 6187 05ca 0370     		strb	r3, [r0]
2285:src/display.c **** 	    }
 6188              		.loc 1 2285 8 is_stmt 1 discriminator 2 view .LVU1969
 6189              	.LVL680:
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6190              		.loc 1 2281 24 discriminator 2 view .LVU1970
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6191              		.loc 1 2281 16 discriminator 2 view .LVU1971
2282:src/display.c **** 		*obp++ = ',';
 6192              		.loc 1 2282 31 is_stmt 0 discriminator 2 view .LVU1972
 6193 05cc A9EB0503 		sub	r3, r9, r5
 6194 05d0 3344     		add	r3, r3, r6
 6195 05d2 8EFB0381 		smull	r8, r1, lr, r3
 6196 05d6 A1EBE371 		sub	r1, r1, r3, asr #31
 6197 05da 01EB4101 		add	r1, r1, r1, lsl #1
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6198              		.loc 1 2281 6 discriminator 2 view .LVU1973
 6199 05de AC45     		cmp	ip, r5
2282:src/display.c **** 		*obp++ = ',';
 6200              		.loc 1 2282 31 discriminator 2 view .LVU1974
 6201 05e0 A3EB0101 		sub	r1, r3, r1
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6202              		.loc 1 2281 6 discriminator 2 view .LVU1975
 6203 05e4 E9D1     		bne	.L556
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6204              		.loc 1 2287 13 view .LVU1976
 6205 05e6 2E23     		movs	r3, #46
2288:src/display.c **** 	      *obp++ = *p++;
 6206              		.loc 1 2288 6 view .LVU1977
 6207 05e8 002A     		cmp	r2, #0
 6208 05ea 059D     		ldr	r5, [sp, #20]
ARM GAS  /tmp/ccwSk7O0.s 			page 205


 6209              	.LVL681:
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6210              		.loc 1 2287 6 is_stmt 1 view .LVU1978
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6211              		.loc 1 2287 13 is_stmt 0 view .LVU1979
 6212 05ec 4370     		strb	r3, [r0, #1]
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6213              		.loc 1 2287 10 view .LVU1980
 6214 05ee 00F10208 		add	r8, r0, #2
 6215              	.LVL682:
2288:src/display.c **** 	      *obp++ = *p++;
 6216              		.loc 1 2288 6 is_stmt 1 view .LVU1981
2288:src/display.c **** 	      *obp++ = *p++;
 6217              		.loc 1 2288 16 view .LVU1982
2288:src/display.c **** 	      *obp++ = *p++;
 6218              		.loc 1 2288 6 is_stmt 0 view .LVU1983
 6219 05f2 7FF77FAF 		ble	.L541
 6220 05f6 0130     		adds	r0, r0, #1
 6221 05f8 0CEB0201 		add	r1, ip, r2
 6222              	.LVL683:
 6223              	.L557:
2289:src/display.c **** 	      odig++;
 6224              		.loc 1 2289 8 is_stmt 1 discriminator 4 view .LVU1984
2289:src/display.c **** 	      odig++;
 6225              		.loc 1 2289 15 is_stmt 0 discriminator 4 view .LVU1985
 6226 05fc 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6227              	.LVL684:
2289:src/display.c **** 	      odig++;
 6228              		.loc 1 2289 15 discriminator 4 view .LVU1986
 6229 0600 00F8013F 		strb	r3, [r0, #1]!
2290:src/display.c **** 	    }
 6230              		.loc 1 2290 8 is_stmt 1 discriminator 4 view .LVU1987
2288:src/display.c **** 	      *obp++ = *p++;
 6231              		.loc 1 2288 43 discriminator 4 view .LVU1988
2288:src/display.c **** 	      *obp++ = *p++;
 6232              		.loc 1 2288 16 discriminator 4 view .LVU1989
2288:src/display.c **** 	      *obp++ = *p++;
 6233              		.loc 1 2288 6 is_stmt 0 discriminator 4 view .LVU1990
 6234 0604 8C45     		cmp	ip, r1
 6235 0606 F9D1     		bne	.L557
 6236 0608 059B     		ldr	r3, [sp, #20]
 6237 060a 1344     		add	r3, r3, r2
 6238 060c 9044     		add	r8, r8, r2
 6239              	.LVL685:
2288:src/display.c **** 	      *obp++ = *p++;
 6240              		.loc 1 2288 6 discriminator 4 view .LVU1991
 6241 060e 1D46     		mov	r5, r3
 6242 0610 70E7     		b	.L541
 6243              	.LVL686:
 6244              	.L691:
2084:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6245              		.loc 1 2084 4 is_stmt 1 view .LVU1992
 6246 0612 374A     		ldr	r2, .L716+16
 6247 0614 3946     		mov	r1, r7
 6248 0616 3846     		mov	r0, r7
 6249 0618 FFF7FEFF 		bl	decNumberNormalize
 6250              	.LVL687:
ARM GAS  /tmp/ccwSk7O0.s 			page 206


2085:src/display.c **** 	  z->exponent = 0;
 6251              		.loc 1 2085 4 view .LVU1993
2085:src/display.c **** 	  z->exponent = 0;
 6252              		.loc 1 2085 22 is_stmt 0 view .LVU1994
 6253 061c D7E90023 		ldrd	r2, r3, [r7]
 6254 0620 03EB0208 		add	r8, r3, r2
2086:src/display.c **** 	}
 6255              		.loc 1 2086 16 view .LVU1995
 6256 0624 C7F804A0 		str	r10, [r7, #4]
2085:src/display.c **** 	  z->exponent = 0;
 6257              		.loc 1 2085 8 view .LVU1996
 6258 0628 08F1FF38 		add	r8, r8, #-1
 6259              	.LVL688:
2086:src/display.c **** 	}
 6260              		.loc 1 2086 4 is_stmt 1 view .LVU1997
 6261 062c 06E5     		b	.L472
 6262              	.LVL689:
 6263              	.L700:
2174:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6264              		.loc 1 2174 6 view .LVU1998
2175:src/display.c **** 	      *p++ = *q++;
 6265              		.loc 1 2175 13 is_stmt 0 view .LVU1999
 6266 062e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2175:src/display.c **** 	      *p++ = *q++;
 6267              		.loc 1 2175 12 view .LVU2000
 6268 0632 A3F13002 		sub	r2, r3, #48
 6269 0636 092A     		cmp	r2, #9
2174:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6270              		.loc 1 2174 7 view .LVU2001
 6271 0638 08F10108 		add	r8, r8, #1
 6272              	.LVL690:
2175:src/display.c **** 	      *p++ = *q++;
 6273              		.loc 1 2175 6 is_stmt 1 view .LVU2002
2175:src/display.c **** 	      *p++ = *q++;
 6274              		.loc 1 2175 12 view .LVU2003
 6275 063c 3FF689AD 		bhi	.L502
 6276              	.LVL691:
 6277              	.L507:
2176:src/display.c **** 	  }
 6278              		.loc 1 2176 8 view .LVU2004
2176:src/display.c **** 	  }
 6279              		.loc 1 2176 13 is_stmt 0 view .LVU2005
 6280 0640 01F8013B 		strb	r3, [r1], #1
 6281              	.LVL692:
2175:src/display.c **** 	      *p++ = *q++;
 6282              		.loc 1 2175 12 is_stmt 1 view .LVU2006
2175:src/display.c **** 	      *p++ = *q++;
 6283              		.loc 1 2175 13 is_stmt 0 view .LVU2007
 6284 0644 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2175:src/display.c **** 	      *p++ = *q++;
 6285              		.loc 1 2175 12 view .LVU2008
 6286 0648 A3F13002 		sub	r2, r3, #48
 6287 064c 092A     		cmp	r2, #9
 6288 064e F7D9     		bls	.L507
 6289 0650 7FE5     		b	.L502
 6290              	.LVL693:
 6291              	.L698:
ARM GAS  /tmp/ccwSk7O0.s 			page 207


2158:src/display.c **** 	for (; *q == '0'; q++);
 6292              		.loc 1 2158 4 is_stmt 1 view .LVU2009
2041:src/display.c **** 	int trimzeros = 0;
 6293              		.loc 1 2041 6 is_stmt 0 view .LVU2010
 6294 0652 0022     		movs	r2, #0
 6295 0654 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6296 0658 0392     		str	r2, [sp, #12]
2158:src/display.c **** 	for (; *q == '0'; q++);
 6297              		.loc 1 2158 5 view .LVU2011
 6298 065a 08F10108 		add	r8, r8, #1
 6299              	.LVL694:
2158:src/display.c **** 	for (; *q == '0'; q++);
 6300              		.loc 1 2158 5 view .LVU2012
 6301 065e 4BE5     		b	.L497
 6302              	.LVL695:
 6303              	.L692:
2092:src/display.c **** 	    x[0] = '-';
 6304              		.loc 1 2092 34 discriminator 1 view .LVU2013
 6305 0660 6B20     		movs	r0, #107
 6306 0662 FFF7FEFF 		bl	get_user_flag
 6307              	.LVL696:
2092:src/display.c **** 	    x[0] = '-';
 6308              		.loc 1 2092 31 discriminator 1 view .LVU2014
 6309 0666 0028     		cmp	r0, #0
 6310 0668 3FF4FAAC 		beq	.L474
2093:src/display.c **** 	    x[1] = '0';
 6311              		.loc 1 2093 6 is_stmt 1 view .LVU2015
2094:src/display.c **** 	  } else
 6312              		.loc 1 2094 6 view .LVU2016
2093:src/display.c **** 	    x[1] = '0';
 6313              		.loc 1 2093 11 is_stmt 0 view .LVU2017
 6314 066c 43F22D03 		movw	r3, #12333
 6315 0670 ADF82430 		strh	r3, [sp, #36]	@ movhi
2094:src/display.c **** 	  } else
 6316              		.loc 1 2094 11 view .LVU2018
 6317 0674 F7E4     		b	.L475
 6318              	.LVL697:
 6319              	.L696:
2151:src/display.c **** 	  CLR_MANT_SIGN;
 6320              		.loc 1 2151 4 is_stmt 1 view .LVU2019
 6321              	.LBB411:
 6322              	.LBI411:
 322:src/display.c **** {
 6323              		.loc 1 322 13 view .LVU2020
 6324              	.LBB412:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6325              		.loc 1 324 3 view .LVU2021
 325:src/display.c **** }
 6326              		.loc 1 325 3 view .LVU2022
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6327              		.loc 1 324 27 is_stmt 0 view .LVU2023
 6328 0676 1F4B     		ldr	r3, .L716+20
 6329 0678 2022     		movs	r2, #32
 325:src/display.c **** }
 6330              		.loc 1 325 3 view .LVU2024
 6331 067a 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
ARM GAS  /tmp/ccwSk7O0.s 			page 208


 6332              		.loc 1 324 27 view .LVU2025
 6333 067c 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 6334              		.loc 1 325 3 view .LVU2026
 6335 067e FFF7FEFF 		bl	clr_dot
 6336              	.LVL698:
 6337              	.LBE412:
 6338              	.LBE411:
2152:src/display.c **** 	}
 6339              		.loc 1 2152 4 is_stmt 1 view .LVU2027
 6340              	.LBB413:
 6341              	.LBI413:
 310:src/display.c **** {
 6342              		.loc 1 310 13 view .LVU2028
 6343              	.LBB414:
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6344              		.loc 1 312 3 view .LVU2029
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6345              		.loc 1 312 25 is_stmt 0 view .LVU2030
 6346 0682 1D4B     		ldr	r3, .L716+24
 6347 0684 2022     		movs	r2, #32
 313:src/display.c **** }
 6348              		.loc 1 313 3 view .LVU2031
 6349 0686 8120     		movs	r0, #129
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6350              		.loc 1 312 25 view .LVU2032
 6351 0688 1A70     		strb	r2, [r3]
 313:src/display.c **** }
 6352              		.loc 1 313 3 is_stmt 1 view .LVU2033
 6353 068a FFF7FEFF 		bl	clr_dot
 6354              	.LVL699:
 314:src/display.c **** 
 6355              		.loc 1 314 1 is_stmt 0 view .LVU2034
 6356 068e 29E5     		b	.L495
 6357              	.LVL700:
 6358              	.L702:
 314:src/display.c **** 
 6359              		.loc 1 314 1 view .LVU2035
 6360              	.LBE414:
 6361              	.LBE413:
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6362              		.loc 1 2352 72 discriminator 2 view .LVU2036
 6363 0690 06F2E732 		addw	r2, r6, #999
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6364              		.loc 1 2352 58 discriminator 2 view .LVU2037
 6365 0694 40F2CE73 		movw	r3, #1998
 6366 0698 9A42     		cmp	r2, r3
 6367 069a 7FF6FEAD 		bls	.L573
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6368              		.loc 1 2353 4 is_stmt 1 view .LVU2038
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6369              		.loc 1 2353 20 is_stmt 0 view .LVU2039
 6370 069e 019A     		ldr	r2, [sp, #4]
 6371 06a0 0A23     		movs	r3, #10
2354:src/display.c **** 	  return;
 6372              		.loc 1 2354 4 view .LVU2040
 6373 06a2 2146     		mov	r1, r4
ARM GAS  /tmp/ccwSk7O0.s 			page 209


 6374 06a4 3846     		mov	r0, r7
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6375              		.loc 1 2353 20 view .LVU2041
 6376 06a6 1360     		str	r3, [r2]
2354:src/display.c **** 	  return;
 6377              		.loc 1 2354 4 is_stmt 1 view .LVU2042
 6378 06a8 FFF7FEFF 		bl	set_x_dn
 6379              	.LVL701:
2355:src/display.c **** 	}
 6380              		.loc 1 2355 4 view .LVU2043
 6381 06ac 30E6     		b	.L465
 6382              	.LVL702:
 6383              	.L490:
 6384              	.LBB415:
2113:src/display.c **** 
 6385              		.loc 1 2113 4 view .LVU2044
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6386              		.loc 1 2115 4 view .LVU2045
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6387              		.loc 1 2115 11 is_stmt 0 view .LVU2046
 6388 06ae 2A46     		mov	r2, r5
 6389 06b0 07A9     		add	r1, sp, #28
 6390 06b2 3846     		mov	r0, r7
 6391 06b4 FFF7FEFF 		bl	std_round_fix
 6392              	.LVL703:
 6393              	.LBE415:
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6394              		.loc 1 2042 6 view .LVU2047
 6395 06b8 0023     		movs	r3, #0
 6396              	.LBB416:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6397              		.loc 1 2115 11 view .LVU2048
 6398 06ba 0546     		mov	r5, r0
 6399              	.LVL704:
2116:src/display.c **** 	    // allow zeros to be trimmed
 6400              		.loc 1 2116 4 is_stmt 1 view .LVU2049
 6401              	.LBE416:
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6402              		.loc 1 2042 6 is_stmt 0 view .LVU2050
 6403 06bc 0493     		str	r3, [sp, #16]
 6404 06be EBE4     		b	.L594
 6405              	.LVL705:
 6406              	.L576:
2367:src/display.c **** 	      SET_MANT_SIGN;
 6407              		.loc 1 2367 6 is_stmt 1 view .LVU2051
2367:src/display.c **** 	      SET_MANT_SIGN;
 6408              		.loc 1 2367 9 is_stmt 0 view .LVU2052
 6409 06c0 002F     		cmp	r7, #0
 6410 06c2 40F01181 		bne	.L579
2368:src/display.c **** 	    else
 6411              		.loc 1 2368 8 is_stmt 1 view .LVU2053
 6412              	.LBB417:
 6413              	.LBI417:
 304:src/display.c **** {
 6414              		.loc 1 304 13 view .LVU2054
 6415              	.LBB418:
 306:src/display.c ****   set_dot(MANT_SIGN);
ARM GAS  /tmp/ccwSk7O0.s 			page 210


 6416              		.loc 1 306 3 view .LVU2055
 306:src/display.c ****   set_dot(MANT_SIGN);
 6417              		.loc 1 306 25 is_stmt 0 view .LVU2056
 6418 06c6 0C4B     		ldr	r3, .L716+24
 6419 06c8 2D22     		movs	r2, #45
 307:src/display.c **** }
 6420              		.loc 1 307 3 view .LVU2057
 6421 06ca 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 6422              		.loc 1 306 25 view .LVU2058
 6423 06cc 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 6424              		.loc 1 307 3 is_stmt 1 view .LVU2059
 6425 06ce FFF7FEFF 		bl	set_dot
 6426              	.LVL706:
 307:src/display.c **** }
 6427              		.loc 1 307 3 is_stmt 0 view .LVU2060
 6428              	.LBE418:
 6429              	.LBE417:
2373:src/display.c **** 	  if (c == '.') {
 6430              		.loc 1 2373 12 is_stmt 1 view .LVU2061
2373:src/display.c **** 	  if (c == '.') {
 6431              		.loc 1 2373 18 is_stmt 0 view .LVU2062
 6432 06d2 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6433              	.LVL707:
2373:src/display.c **** 	  if (c == '.') {
 6434              		.loc 1 2373 2 view .LVU2063
 6435 06d6 002A     		cmp	r2, #0
 6436 06d8 7FF4FCAD 		bne	.L578
 6437 06dc 0DE6     		b	.L577
 6438              	.L717:
 6439 06de 00BF     		.align	2
 6440              	.L716:
 6441 06e0 00000000 		.word	main_ram
 6442 06e4 56555555 		.word	1431655766
 6443 06e8 00000000 		.word	.LANCHOR1
 6444 06ec 00000000 		.word	.LANCHOR0
 6445 06f0 00000000 		.word	Ctx
 6446 06f4 00000000 		.word	LastDisplayedExponent
 6447 06f8 00000000 		.word	LastDisplayedNumber
 6448              	.LVL708:
 6449              	.L693:
2101:src/display.c **** 	  return;
 6450              		.loc 1 2101 4 is_stmt 1 view .LVU2064
 6451              	.LBB419:
 6452              	.LBI419:
1889:src/display.c **** 	const int dbl = is_dblmode();
 6453              		.loc 1 1889 19 view .LVU2065
 6454              	.LBB420:
1890:src/display.c **** 	char *p;
 6455              		.loc 1 1890 2 view .LVU2066
1890:src/display.c **** 	char *p;
 6456              		.loc 1 1890 18 is_stmt 0 view .LVU2067
 6457 06fc FFF7FEFF 		bl	is_dblmode
 6458              	.LVL709:
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6459              		.loc 1 1906 5 view .LVU2068
ARM GAS  /tmp/ccwSk7O0.s 			page 211


 6460 0700 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6461 0704 2D2B     		cmp	r3, #45
1890:src/display.c **** 	char *p;
 6462              		.loc 1 1890 18 view .LVU2069
 6463 0706 0446     		mov	r4, r0
 6464              	.LVL710:
1891:src/display.c **** 	int i, j;
 6465              		.loc 1 1891 2 is_stmt 1 view .LVU2070
1892:src/display.c **** 	char *upper_str;
 6466              		.loc 1 1892 2 view .LVU2071
1893:src/display.c **** 	enum separator_modes separator_mode;
 6467              		.loc 1 1893 2 view .LVU2072
1894:src/display.c **** 	char decimal_mark;
 6468              		.loc 1 1894 2 view .LVU2073
1895:src/display.c **** 	char thousands_sep;
 6469              		.loc 1 1895 2 view .LVU2074
1896:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6470              		.loc 1 1896 2 view .LVU2075
1902:src/display.c **** #endif
 6471              		.loc 1 1902 2 view .LVU2076
1904:src/display.c **** 
 6472              		.loc 1 1904 2 view .LVU2077
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6473              		.loc 1 1906 2 view .LVU2078
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6474              		.loc 1 1906 5 is_stmt 0 view .LVU2079
 6475 0708 00F02081 		beq	.L710
1919:src/display.c **** 
 6476              		.loc 1 1919 16 view .LVU2080
 6477 070c 0027     		movs	r7, #0
 6478              	.LVL711:
 6479              	.L477:
1921:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6480              		.loc 1 1921 2 is_stmt 1 view .LVU2081
1921:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6481              		.loc 1 1921 6 is_stmt 0 view .LVU2082
 6482 070e 0021     		movs	r1, #0
 6483 0710 5846     		mov	r0, fp
 6484 0712 FFF7FEFF 		bl	find_char
 6485              	.LVL712:
1922:src/display.c **** 
 6486              		.loc 1 1922 2 is_stmt 1 view .LVU2083
1922:src/display.c **** 
 6487              		.loc 1 1922 23 is_stmt 0 view .LVU2084
 6488 0716 A0EB0B02 		sub	r2, r0, fp
1922:src/display.c **** 
 6489              		.loc 1 1922 2 view .LVU2085
 6490 071a C2F12202 		rsb	r2, r2, #34
 6491 071e 3021     		movs	r1, #48
 6492 0720 FFF7FEFF 		bl	xset
 6493              	.LVL713:
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6494              		.loc 1 1924 2 is_stmt 1 view .LVU2086
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6495              		.loc 1 1924 18 is_stmt 0 view .LVU2087
 6496 0724 AC4A     		ldr	r2, .L718
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccwSk7O0.s 			page 212


 6497              		.loc 1 1935 6 view .LVU2088
 6498 0726 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6499              		.loc 1 1924 5 view .LVU2089
 6500 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1932:src/display.c **** 	}
 6501              		.loc 1 1932 18 view .LVU2090
 6502 072a 002A     		cmp	r2, #0
 6503 072c 15BF     		itete	ne
 6504 072e 4FF00209 		movne	r9, #2
 6505 0732 2C26     		moveq	r6, #44
 6506 0734 2E26     		movne	r6, #46
 6507              	.LVL714:
1932:src/display.c **** 	}
 6508              		.loc 1 1932 18 view .LVU2091
 6509 0736 2E25     		moveq	r5, #46
 6510              	.LVL715:
1932:src/display.c **** 	}
 6511              		.loc 1 1932 18 view .LVU2092
 6512 0738 18BF     		it	ne
 6513 073a 2C25     		movne	r5, #44
 6514              	.LVL716:
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6515              		.loc 1 1935 2 is_stmt 1 view .LVU2093
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6516              		.loc 1 1935 5 is_stmt 0 view .LVU2094
 6517 073c 13F0380F 		tst	r3, #56
 6518 0740 40F0D880 		bne	.L711
1962:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6519              		.loc 1 1962 4 is_stmt 1 view .LVU2095
 6520              	.LVL717:
1963:src/display.c **** 	  x[1] = decimal_mark;
 6521              		.loc 1 1963 4 view .LVU2096
 6522 0744 1022     		movs	r2, #16
 6523 0746 0BF10101 		add	r1, fp, #1
 6524 074a 0BF10200 		add	r0, fp, #2
 6525 074e FFF7FEFF 		bl	xcopy
 6526              	.LVL718:
1964:src/display.c **** 	  if (grouping) {
 6527              		.loc 1 1964 4 view .LVU2097
1966:src/display.c **** 	    x[5] = thousands_sep;
 6528              		.loc 1 1966 6 is_stmt 0 view .LVU2098
 6529 0752 0D22     		movs	r2, #13
 6530 0754 0BF10501 		add	r1, fp, #5
 6531 0758 0BF10600 		add	r0, fp, #6
1964:src/display.c **** 	  if (grouping) {
 6532              		.loc 1 1964 9 view .LVU2099
 6533 075c 8BF80150 		strb	r5, [fp, #1]
1965:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6534              		.loc 1 1965 4 is_stmt 1 view .LVU2100
1966:src/display.c **** 	    x[5] = thousands_sep;
 6535              		.loc 1 1966 6 view .LVU2101
 6536 0760 FFF7FEFF 		bl	xcopy
 6537              	.LVL719:
1967:src/display.c **** 	    x += 9;
 6538              		.loc 1 1967 6 view .LVU2102
1968:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 213


 6539              		.loc 1 1968 8 is_stmt 0 view .LVU2103
 6540 0764 0BF10905 		add	r5, fp, #9
 6541              	.LVL720:
1967:src/display.c **** 	    x += 9;
 6542              		.loc 1 1967 11 view .LVU2104
 6543 0768 8BF80560 		strb	r6, [fp, #5]
1968:src/display.c **** 	  }
 6544              		.loc 1 1968 6 is_stmt 1 view .LVU2105
 6545              	.LVL721:
1971:src/display.c **** 	    if (exp < 0) {
 6546              		.loc 1 1971 4 view .LVU2106
1971:src/display.c **** 	    if (exp < 0) {
 6547              		.loc 1 1971 7 is_stmt 0 view .LVU2107
 6548 076c 002C     		cmp	r4, #0
 6549 076e 00F0EA80 		beq	.L481
1972:src/display.c **** 	      x[9] = '-';
 6550              		.loc 1 1972 6 is_stmt 1 view .LVU2108
1972:src/display.c **** 	      x[9] = '-';
 6551              		.loc 1 1972 9 is_stmt 0 view .LVU2109
 6552 0772 B8F1000F 		cmp	r8, #0
1973:src/display.c **** 	      exp = -exp;
 6553              		.loc 1 1973 8 is_stmt 1 view .LVU2110
1974:src/display.c **** 	    }
 6554              		.loc 1 1974 8 view .LVU2111
1978:src/display.c **** 	    x[10] = '0' + j;
 6555              		.loc 1 1978 8 is_stmt 0 view .LVU2112
 6556 0776 994B     		ldr	r3, .L718+4
1980:src/display.c **** 	  }
 6557              		.loc 1 1980 18 view .LVU2113
 6558 0778 9949     		ldr	r1, .L718+8
1973:src/display.c **** 	      exp = -exp;
 6559              		.loc 1 1973 13 view .LVU2114
 6560 077a B6BF     		itet	lt
 6561 077c 2D22     		movlt	r2, #45
1977:src/display.c **** 	    j = exp / 1000;
 6562              		.loc 1 1977 13 view .LVU2115
 6563 077e 2022     		movge	r2, #32
1974:src/display.c **** 	    }
 6564              		.loc 1 1974 12 view .LVU2116
 6565 0780 C8F10008 		rsblt	r8, r8, #0
 6566              	.LVL722:
1974:src/display.c **** 	    }
 6567              		.loc 1 1974 12 view .LVU2117
 6568 0784 8BF81220 		strb	r2, [fp, #18]
1978:src/display.c **** 	    x[10] = '0' + j;
 6569              		.loc 1 1978 6 is_stmt 1 view .LVU2118
1978:src/display.c **** 	    x[10] = '0' + j;
 6570              		.loc 1 1978 8 is_stmt 0 view .LVU2119
 6571 0788 A3FB0823 		umull	r2, r3, r3, r8
 6572 078c 9B09     		lsrs	r3, r3, #6
 6573              	.LVL723:
1979:src/display.c **** 	    exp -= 1000 * j;
 6574              		.loc 1 1979 6 is_stmt 1 view .LVU2120
1979:src/display.c **** 	    exp -= 1000 * j;
 6575              		.loc 1 1979 18 is_stmt 0 view .LVU2121
 6576 078e 03F13002 		add	r2, r3, #48
1980:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 214


 6577              		.loc 1 1980 10 view .LVU2122
 6578 0792 01FB0388 		mla	r8, r1, r3, r8
 6579              	.LVL724:
1979:src/display.c **** 	    exp -= 1000 * j;
 6580              		.loc 1 1979 12 view .LVU2123
 6581 0796 8BF81320 		strb	r2, [fp, #19]
1980:src/display.c **** 	  }
 6582              		.loc 1 1980 6 is_stmt 1 view .LVU2124
 6583              	.LVL725:
 6584              	.L483:
1986:src/display.c **** 	  *x = 0;
 6585              		.loc 1 1986 4 view .LVU2125
 6586 079a 0B22     		movs	r2, #11
 6587 079c 2946     		mov	r1, r5
 6588 079e 0BF10A00 		add	r0, fp, #10
 6589 07a2 FFF7FEFF 		bl	xcopy
 6590              	.LVL726:
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6591              		.loc 1 1987 4 view .LVU2126
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6592              		.loc 1 1987 7 is_stmt 0 view .LVU2127
 6593 07a6 0022     		movs	r2, #0
1988:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6594              		.loc 1 1988 4 view .LVU2128
 6595 07a8 4046     		mov	r0, r8
 6596 07aa 0121     		movs	r1, #1
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6597              		.loc 1 1987 7 view .LVU2129
 6598 07ac 8BF80920 		strb	r2, [fp, #9]
1988:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6599              		.loc 1 1988 4 is_stmt 1 view .LVU2130
 6600 07b0 FFF7FEFF 		bl	set_exp
 6601              	.LVL727:
1989:src/display.c **** 	}
 6602              		.loc 1 1989 4 view .LVU2131
1989:src/display.c **** 	}
 6603              		.loc 1 1989 4 is_stmt 0 view .LVU2132
 6604 07b4 ABEB0707 		sub	r7, fp, r7
 6605              	.LVL728:
1989:src/display.c **** 	}
 6606              		.loc 1 1989 6 view .LVU2133
 6607 07b8 0924     		movs	r4, #9
 6608              	.LVL729:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6609              		.loc 1 1992 11 is_stmt 1 view .LVU2134
 6610              	.L484:
1993:src/display.c **** 	  }
 6611              		.loc 1 1993 6 view .LVU2135
 6612              	.LBB421:
 6613              	.LBI421:
 375:src/display.c ****   if (sep == SEP_NONE)
 6614              		.loc 1 375 14 view .LVU2136
 6615              	.LBB422:
 376:src/display.c ****     return res;
 6616              		.loc 1 376 3 view .LVU2137
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6617              		.loc 1 378 3 view .LVU2138
ARM GAS  /tmp/ccwSk7O0.s 			page 215


 6618 07ba 2046     		mov	r0, r4
 6619 07bc 4946     		mov	r1, r9
 6620              	.LBE422:
 6621              	.LBE421:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6622              		.loc 1 1992 38 is_stmt 0 view .LVU2139
 6623 07be 1B34     		adds	r4, r4, #27
 6624              	.LVL730:
 6625              	.LBB424:
 6626              	.LBB423:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6627              		.loc 1 1992 38 view .LVU2140
 6628 07c0 FFF7FEFF 		bl	set_separator.part.0
 6629              	.LVL731:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6630              		.loc 1 1992 38 view .LVU2141
 6631              	.LBE423:
 6632              	.LBE424:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6633              		.loc 1 1992 36 is_stmt 1 view .LVU2142
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6634              		.loc 1 1992 11 view .LVU2143
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6635              		.loc 1 1992 4 is_stmt 0 view .LVU2144
 6636 07c4 512C     		cmp	r4, #81
 6637 07c6 F8DD     		ble	.L484
 6638 07c8 6C1E     		subs	r4, r5, #1
 6639              	.LVL732:
 6640              	.L486:
1998:src/display.c **** 
 6641              		.loc 1 1998 4 is_stmt 1 view .LVU2145
 6642 07ca 5046     		mov	r0, r10
 6643 07cc 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1997:src/display.c **** 	  set_dig(j, x[i]);
 6644              		.loc 1 1997 33 is_stmt 0 view .LVU2146
 6645 07d0 0AF1090A 		add	r10, r10, #9
 6646              	.LVL733:
1998:src/display.c **** 
 6647              		.loc 1 1998 4 view .LVU2147
 6648 07d4 FFF7FEFF 		bl	set_dig
 6649              	.LVL734:
1997:src/display.c **** 	  set_dig(j, x[i]);
 6650              		.loc 1 1997 26 is_stmt 1 view .LVU2148
1997:src/display.c **** 	  set_dig(j, x[i]);
 6651              		.loc 1 1997 18 view .LVU2149
1997:src/display.c **** 	  set_dig(j, x[i]);
 6652              		.loc 1 1997 2 is_stmt 0 view .LVU2150
 6653 07d8 BAF16C0F 		cmp	r10, #108
 6654 07dc F5D1     		bne	.L486
2000:src/display.c **** 	set_status(upper_str - negative);
 6655              		.loc 1 2000 2 is_stmt 1 view .LVU2151
2000:src/display.c **** 	set_status(upper_str - negative);
 6656              		.loc 1 2000 5 is_stmt 0 view .LVU2152
 6657 07de 0023     		movs	r3, #0
2001:src/display.c ****       }
 6658              		.loc 1 2001 2 view .LVU2153
 6659 07e0 3846     		mov	r0, r7
ARM GAS  /tmp/ccwSk7O0.s 			page 216


2000:src/display.c **** 	set_status(upper_str - negative);
 6660              		.loc 1 2000 5 view .LVU2154
 6661 07e2 2B70     		strb	r3, [r5]
2001:src/display.c ****       }
 6662              		.loc 1 2001 2 is_stmt 1 view .LVU2155
 6663 07e4 FFF7FEFF 		bl	set_status
 6664              	.LVL735:
2002:src/display.c **** 
 6665              		.loc 1 2002 7 is_stmt 0 view .LVU2156
 6666 07e8 92E5     		b	.L465
 6667              	.LVL736:
 6668              	.L552:
2002:src/display.c **** 
 6669              		.loc 1 2002 7 view .LVU2157
 6670              	.LBE420:
 6671              	.LBE419:
2293:src/display.c **** 	    odig++;
 6672              		.loc 1 2293 6 is_stmt 1 view .LVU2158
2294:src/display.c **** 	    *obp++ = '.';
 6673              		.loc 1 2294 6 view .LVU2159
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6674              		.loc 1 2295 6 view .LVU2160
2293:src/display.c **** 	    odig++;
 6675              		.loc 1 2293 13 is_stmt 0 view .LVU2161
 6676 07ea 42F63063 		movw	r3, #11824
 6677 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2296:src/display.c **** 	      *obp++ = '0';
 6678              		.loc 1 2296 6 is_stmt 1 view .LVU2162
 6679              	.LVL737:
2296:src/display.c **** 	      *obp++ = '0';
 6680              		.loc 1 2296 20 view .LVU2163
2296:src/display.c **** 	      *obp++ = '0';
 6681              		.loc 1 2296 6 is_stmt 0 view .LVU2164
 6682 07f2 731C     		adds	r3, r6, #1
 6683              	.LVL738:
2296:src/display.c **** 	      *obp++ = '0';
 6684              		.loc 1 2296 6 view .LVU2165
 6685 07f4 00F0E580 		beq	.L712
 6686 07f8 C6F10102 		rsb	r2, r6, #1
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6687              		.loc 1 2295 10 view .LVU2166
 6688 07fc 0DF12600 		add	r0, sp, #38
 6689              	.LVL739:
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6690              		.loc 1 2295 10 view .LVU2167
 6691 0800 079D     		ldr	r5, [sp, #28]
 6692 0802 5A44     		add	r2, r2, fp
 6693 0804 0346     		mov	r3, r0
 6694              	.LVL740:
2297:src/display.c **** 	      odig++;
 6695              		.loc 1 2297 15 view .LVU2168
 6696 0806 3021     		movs	r1, #48
 6697              	.LVL741:
 6698              	.L560:
2297:src/display.c **** 	      odig++;
 6699              		.loc 1 2297 8 is_stmt 1 discriminator 3 view .LVU2169
2297:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccwSk7O0.s 			page 217


 6700              		.loc 1 2297 15 is_stmt 0 discriminator 3 view .LVU2170
 6701 0808 03F8011B 		strb	r1, [r3], #1
 6702              	.LVL742:
2298:src/display.c **** 	      dd--;
 6703              		.loc 1 2298 8 is_stmt 1 discriminator 3 view .LVU2171
2299:src/display.c **** 	    }
 6704              		.loc 1 2299 8 discriminator 3 view .LVU2172
2296:src/display.c **** 	      *obp++ = '0';
 6705              		.loc 1 2296 25 discriminator 3 view .LVU2173
2296:src/display.c **** 	      *obp++ = '0';
 6706              		.loc 1 2296 20 discriminator 3 view .LVU2174
2296:src/display.c **** 	      *obp++ = '0';
 6707              		.loc 1 2296 6 is_stmt 0 discriminator 3 view .LVU2175
 6708 080c 9342     		cmp	r3, r2
 6709 080e FBD1     		bne	.L560
 6710 0810 AB19     		adds	r3, r5, r6
 6711              	.LVL743:
2296:src/display.c **** 	      *obp++ = '0';
 6712              		.loc 1 2296 6 discriminator 3 view .LVU2176
 6713 0812 6FEA0608 		mvn	r8, r6
 6714 0816 0133     		adds	r3, r3, #1
 6715 0818 8044     		add	r8, r8, r0
 6716 081a 7542     		rsbs	r5, r6, #0
 6717              	.L559:
 6718              	.LVL744:
2301:src/display.c **** 	      *obp++ = *p++;
 6719              		.loc 1 2301 12 is_stmt 1 view .LVU2177
2301:src/display.c **** 	      *obp++ = *p++;
 6720              		.loc 1 2301 15 is_stmt 0 view .LVU2178
 6721 081c 5A1E     		subs	r2, r3, #1
2301:src/display.c **** 	      *obp++ = *p++;
 6722              		.loc 1 2301 12 view .LVU2179
 6723 081e 002B     		cmp	r3, #0
2301:src/display.c **** 	      *obp++ = *p++;
 6724              		.loc 1 2301 15 view .LVU2180
 6725 0820 0792     		str	r2, [sp, #28]
2301:src/display.c **** 	      *obp++ = *p++;
 6726              		.loc 1 2301 12 view .LVU2181
 6727 0822 7FF767AE 		ble	.L541
 6728 0826 4344     		add	r3, r3, r8
 6729 0828 581E     		subs	r0, r3, #1
 6730 082a 08F1FF38 		add	r8, r8, #-1
 6731              	.LVL745:
 6732              	.L561:
2302:src/display.c **** 	      odig++;
 6733              		.loc 1 2302 8 is_stmt 1 view .LVU2182
2302:src/display.c **** 	      odig++;
 6734              		.loc 1 2302 15 is_stmt 0 view .LVU2183
 6735 082e 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6736              	.LVL746:
2302:src/display.c **** 	      odig++;
 6737              		.loc 1 2302 15 view .LVU2184
 6738 0832 08F8011F 		strb	r1, [r8, #1]!
2303:src/display.c **** 	    }
 6739              		.loc 1 2303 8 is_stmt 1 view .LVU2185
2301:src/display.c **** 	      *obp++ = *p++;
 6740              		.loc 1 2301 12 view .LVU2186
ARM GAS  /tmp/ccwSk7O0.s 			page 218


 6741 0836 8045     		cmp	r8, r0
 6742 0838 F9D1     		bne	.L561
 6743              	.LVL747:
2301:src/display.c **** 	      *obp++ = *p++;
 6744              		.loc 1 2301 12 is_stmt 0 view .LVU2187
 6745 083a 0135     		adds	r5, r5, #1
 6746 083c 4FF0FF31 		mov	r1, #-1
 6747 0840 1544     		add	r5, r5, r2
 6748 0842 9846     		mov	r8, r3
 6749 0844 0791     		str	r1, [sp, #28]
 6750 0846 55E6     		b	.L541
 6751              	.LVL748:
 6752              	.L564:
2319:src/display.c **** 	    odig++;
 6753              		.loc 1 2319 6 is_stmt 1 view .LVU2188
2319:src/display.c **** 	    odig++;
 6754              		.loc 1 2319 13 is_stmt 0 view .LVU2189
 6755 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6756 084c 8DF82430 		strb	r3, [sp, #36]
2320:src/display.c **** 	    dd--;
 6757              		.loc 1 2320 6 is_stmt 1 view .LVU2190
 6758              	.LVL749:
2321:src/display.c **** 	    exp--;
 6759              		.loc 1 2321 6 view .LVU2191
2321:src/display.c **** 	    exp--;
 6760              		.loc 1 2321 8 is_stmt 0 view .LVU2192
 6761 0850 013A     		subs	r2, r2, #1
2322:src/display.c **** 	  case -2:
 6762              		.loc 1 2322 6 is_stmt 1 view .LVU2193
2322:src/display.c **** 	  case -2:
 6763              		.loc 1 2322 9 is_stmt 0 view .LVU2194
 6764 0852 013E     		subs	r6, r6, #1
 6765              	.LVL750:
2322:src/display.c **** 	  case -2:
 6766              		.loc 1 2322 9 view .LVU2195
 6767 0854 0325     		movs	r5, #3
2319:src/display.c **** 	    odig++;
 6768              		.loc 1 2319 17 view .LVU2196
 6769 0856 0DF15909 		add	r9, sp, #89
 6770              	.LVL751:
2319:src/display.c **** 	    odig++;
 6771              		.loc 1 2319 10 view .LVU2197
 6772 085a 0DF12501 		add	r1, sp, #37
 6773              	.LVL752:
 6774              	.L567:
2325:src/display.c **** 	    odig++;
 6775              		.loc 1 2325 6 is_stmt 1 view .LVU2198
2325:src/display.c **** 	    odig++;
 6776              		.loc 1 2325 13 is_stmt 0 view .LVU2199
 6777 085e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6778              	.LVL753:
2325:src/display.c **** 	    odig++;
 6779              		.loc 1 2325 13 view .LVU2200
 6780 0862 01F8013B 		strb	r3, [r1], #1
 6781              	.LVL754:
2326:src/display.c **** 	    dd--;
 6782              		.loc 1 2326 6 is_stmt 1 view .LVU2201
ARM GAS  /tmp/ccwSk7O0.s 			page 219


2327:src/display.c **** 	    exp--;
 6783              		.loc 1 2327 6 view .LVU2202
2327:src/display.c **** 	    exp--;
 6784              		.loc 1 2327 8 is_stmt 0 view .LVU2203
 6785 0866 013A     		subs	r2, r2, #1
2328:src/display.c **** 	  case 0:
 6786              		.loc 1 2328 6 is_stmt 1 view .LVU2204
2328:src/display.c **** 	  case 0:
 6787              		.loc 1 2328 9 is_stmt 0 view .LVU2205
 6788 0868 013E     		subs	r6, r6, #1
 6789              	.LVL755:
2328:src/display.c **** 	  case 0:
 6790              		.loc 1 2328 9 view .LVU2206
 6791 086a 24E6     		b	.L531
 6792              	.LVL756:
 6793              	.L566:
2328:src/display.c **** 	  case 0:
 6794              		.loc 1 2328 9 view .LVU2207
 6795 086c 079A     		ldr	r2, [sp, #28]
2316:src/display.c **** 	  case -1:
 6796              		.loc 1 2316 16 view .LVU2208
 6797 086e 0225     		movs	r5, #2
2021:src/display.c **** 	int odig = 0;
 6798              		.loc 1 2021 15 view .LVU2209
 6799 0870 5946     		mov	r1, fp
 6800 0872 F4E7     		b	.L567
 6801              	.LVL757:
 6802              	.L512:
2184:src/display.c **** 	    /* We might have push the fixed decimals off the
 6803              		.loc 1 2184 6 is_stmt 1 view .LVU2210
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6804              		.loc 1 2188 6 view .LVU2211
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6805              		.loc 1 2188 9 is_stmt 0 view .LVU2212
 6806 0874 0299     		ldr	r1, [sp, #8]
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6807              		.loc 1 2188 23 view .LVU2213
 6808 0876 9319     		adds	r3, r2, r6
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6809              		.loc 1 2188 9 view .LVU2214
 6810 0878 9942     		cmp	r1, r3
2189:src/display.c **** 	  }
 6811              		.loc 1 2189 8 is_stmt 1 view .LVU2215
2189:src/display.c **** 	  }
 6812              		.loc 1 2189 30 is_stmt 0 view .LVU2216
 6813 087a DFBF     		itttt	le
 6814 087c 029B     		ldrle	r3, [sp, #8]
 6815 087e 03F1FF32 		addle	r2, r3, #-1
2189:src/display.c **** 	  }
 6816              		.loc 1 2189 35 view .LVU2217
 6817 0882 921B     		suble	r2, r2, r6
2189:src/display.c **** 	  }
 6818              		.loc 1 2189 11 view .LVU2218
 6819 0884 0792     		strle	r2, [sp, #28]
 6820 0886 3146     		mov	r1, r6
 6821 0888 6BE4     		b	.L509
 6822              	.LVL758:
ARM GAS  /tmp/ccwSk7O0.s 			page 220


 6823              	.L537:
2228:src/display.c **** 	      odig++;
 6824              		.loc 1 2228 8 is_stmt 1 view .LVU2219
2228:src/display.c **** 	      odig++;
 6825              		.loc 1 2228 15 is_stmt 0 view .LVU2220
 6826 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6827 088e 8DF82410 		strb	r1, [sp, #36]
2229:src/display.c **** 	      dd--;
 6828              		.loc 1 2229 8 is_stmt 1 view .LVU2221
 6829              	.LVL759:
2230:src/display.c **** 	      exp--;
 6830              		.loc 1 2230 8 view .LVU2222
2230:src/display.c **** 	      exp--;
 6831              		.loc 1 2230 10 is_stmt 0 view .LVU2223
 6832 0892 013A     		subs	r2, r2, #1
2231:src/display.c **** 	    case -2:
 6833              		.loc 1 2231 8 is_stmt 1 view .LVU2224
2231:src/display.c **** 	    case -2:
 6834              		.loc 1 2231 11 is_stmt 0 view .LVU2225
 6835 0894 013E     		subs	r6, r6, #1
 6836              	.LVL760:
2231:src/display.c **** 	    case -2:
 6837              		.loc 1 2231 11 view .LVU2226
 6838 0896 0325     		movs	r5, #3
2228:src/display.c **** 	      odig++;
 6839              		.loc 1 2228 19 view .LVU2227
 6840 0898 0DF15909 		add	r9, sp, #89
 6841              	.LVL761:
2228:src/display.c **** 	      odig++;
 6842              		.loc 1 2228 12 view .LVU2228
 6843 089c 0DF12501 		add	r1, sp, #37
 6844              	.LVL762:
 6845              	.L540:
2234:src/display.c **** 	      odig++;
 6846              		.loc 1 2234 8 is_stmt 1 view .LVU2229
2234:src/display.c **** 	      odig++;
 6847              		.loc 1 2234 15 is_stmt 0 view .LVU2230
 6848 08a0 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6849              	.LVL763:
2234:src/display.c **** 	      odig++;
 6850              		.loc 1 2234 15 view .LVU2231
 6851 08a4 01F8010B 		strb	r0, [r1], #1
 6852              	.LVL764:
2235:src/display.c **** 	      dd--;
 6853              		.loc 1 2235 8 is_stmt 1 view .LVU2232
2236:src/display.c **** 	      exp--;
 6854              		.loc 1 2236 8 view .LVU2233
2237:src/display.c **** 	    case 0:
 6855              		.loc 1 2237 8 view .LVU2234
2236:src/display.c **** 	      exp--;
 6856              		.loc 1 2236 10 is_stmt 0 view .LVU2235
 6857 08a8 013A     		subs	r2, r2, #1
 6858 08aa 0792     		str	r2, [sp, #28]
2237:src/display.c **** 	    case 0:
 6859              		.loc 1 2237 11 view .LVU2236
 6860 08ac 013E     		subs	r6, r6, #1
 6861              	.LVL765:
ARM GAS  /tmp/ccwSk7O0.s 			page 221


 6862              	.L536:
2239:src/display.c **** 	    };
 6863              		.loc 1 2239 8 is_stmt 1 view .LVU2237
2240:src/display.c **** 	    *obp++ = *p++;
 6864              		.loc 1 2240 7 view .LVU2238
2241:src/display.c **** 	    odig++;
 6865              		.loc 1 2241 6 view .LVU2239
2241:src/display.c **** 	    odig++;
 6866              		.loc 1 2241 17 is_stmt 0 view .LVU2240
 6867 08ae 4A46     		mov	r2, r9
 6868              	.LVL766:
2241:src/display.c **** 	    odig++;
 6869              		.loc 1 2241 13 view .LVU2241
 6870 08b0 8846     		mov	r8, r1
 6871 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6872              	.LVL767:
2241:src/display.c **** 	    odig++;
 6873              		.loc 1 2241 13 view .LVU2242
 6874 08b6 08F8020B 		strb	r0, [r8], #2
2242:src/display.c **** 	    *obp++ = '.';
 6875              		.loc 1 2242 6 is_stmt 1 view .LVU2243
2243:src/display.c **** 	    for (i=1; i<count; i++) {
 6876              		.loc 1 2243 6 view .LVU2244
 6877              	.LVL768:
2244:src/display.c **** 	      *obp++ = *p++;
 6878              		.loc 1 2244 6 is_stmt 0 view .LVU2245
 6879 08ba 012B     		cmp	r3, #1
2243:src/display.c **** 	    for (i=1; i<count; i++) {
 6880              		.loc 1 2243 13 view .LVU2246
 6881 08bc 4FF02E00 		mov	r0, #46
 6882 08c0 4870     		strb	r0, [r1, #1]
2244:src/display.c **** 	      *obp++ = *p++;
 6883              		.loc 1 2244 6 is_stmt 1 view .LVU2247
 6884              	.LVL769:
2244:src/display.c **** 	      *obp++ = *p++;
 6885              		.loc 1 2244 16 view .LVU2248
2244:src/display.c **** 	      *obp++ = *p++;
 6886              		.loc 1 2244 6 is_stmt 0 view .LVU2249
 6887 08c2 34DD     		ble	.L609
2244:src/display.c **** 	      *obp++ = *p++;
 6888              		.loc 1 2244 6 view .LVU2250
 6889 08c4 0131     		adds	r1, r1, #1
 6890 08c6 9944     		add	r9, r9, r3
 6891              	.LVL770:
 6892              	.L542:
2245:src/display.c **** 	      odig++;
 6893              		.loc 1 2245 8 is_stmt 1 discriminator 3 view .LVU2251
2245:src/display.c **** 	      odig++;
 6894              		.loc 1 2245 15 is_stmt 0 discriminator 3 view .LVU2252
 6895 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6896              	.LVL771:
2245:src/display.c **** 	      odig++;
 6897              		.loc 1 2245 15 discriminator 3 view .LVU2253
 6898 08cc 01F8010F 		strb	r0, [r1, #1]!
2246:src/display.c **** 	    }
 6899              		.loc 1 2246 8 is_stmt 1 discriminator 3 view .LVU2254
2244:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccwSk7O0.s 			page 222


 6900              		.loc 1 2244 25 discriminator 3 view .LVU2255
2244:src/display.c **** 	      *obp++ = *p++;
 6901              		.loc 1 2244 16 discriminator 3 view .LVU2256
2244:src/display.c **** 	      *obp++ = *p++;
 6902              		.loc 1 2244 6 is_stmt 0 discriminator 3 view .LVU2257
 6903 08d0 4A45     		cmp	r2, r9
 6904 08d2 F9D1     		bne	.L542
 6905 08d4 013B     		subs	r3, r3, #1
 6906              	.LVL772:
2244:src/display.c **** 	      *obp++ = *p++;
 6907              		.loc 1 2244 6 discriminator 3 view .LVU2258
 6908 08d6 9844     		add	r8, r8, r3
 6909 08d8 1D44     		add	r5, r5, r3
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6910              		.loc 1 2248 15 view .LVU2259
 6911 08da 4FF0010A 		mov	r10, #1
 6912 08de 09E6     		b	.L541
 6913              	.LVL773:
 6914              	.L539:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6915              		.loc 1 2248 15 view .LVU2260
 6916 08e0 079A     		ldr	r2, [sp, #28]
2225:src/display.c **** 	    case -1:
 6917              		.loc 1 2225 24 view .LVU2261
 6918 08e2 0225     		movs	r5, #2
2021:src/display.c **** 	int odig = 0;
 6919              		.loc 1 2021 15 view .LVU2262
 6920 08e4 5946     		mov	r1, fp
 6921 08e6 DBE7     		b	.L540
 6922              	.LVL774:
 6923              	.L579:
2370:src/display.c **** 	  }
 6924              		.loc 1 2370 8 is_stmt 1 view .LVU2263
 6925 08e8 2D21     		movs	r1, #45
 6926 08ea A7F10900 		sub	r0, r7, #9
 6927 08ee FFF7FEFF 		bl	set_dig
 6928              	.LVL775:
 6929 08f2 EAE4     		b	.L575
 6930              	.LVL776:
 6931              	.L711:
 6932              	.LBB429:
 6933              	.LBB427:
 6934              	.LBB425:
1937:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6935              		.loc 1 1937 4 view .LVU2264
1940:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6936              		.loc 1 1940 4 view .LVU2265
1940:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6937              		.loc 1 1940 14 is_stmt 0 view .LVU2266
 6938 08f4 0BF10307 		add	r7, fp, #3
 6939              	.LVL777:
1941:src/display.c **** 	  if (grouping) {
 6940              		.loc 1 1941 4 is_stmt 1 view .LVU2267
 6941 08f8 3A49     		ldr	r1, .L718+12
 6942 08fa 0D22     		movs	r2, #13
 6943 08fc 3846     		mov	r0, r7
 6944 08fe FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccwSk7O0.s 			page 223


 6945              	.LVL778:
1942:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6946              		.loc 1 1942 4 view .LVU2268
1943:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6947              		.loc 1 1943 6 view .LVU2269
 6948 0902 1322     		movs	r2, #19
 6949 0904 0BEB0201 		add	r1, fp, r2
 6950 0908 0BF11400 		add	r0, fp, #20
 6951 090c FFF7FEFF 		bl	xcopy
 6952              	.LVL779:
1944:src/display.c **** 	    x += 3 + 13 + 7;
 6953              		.loc 1 1944 6 view .LVU2270
1945:src/display.c **** 	  }
 6954              		.loc 1 1945 8 is_stmt 0 view .LVU2271
 6955 0910 0BF11705 		add	r5, fp, #23
 6956              	.LVL780:
1944:src/display.c **** 	    x += 3 + 13 + 7;
 6957              		.loc 1 1944 24 view .LVU2272
 6958 0914 8BF81360 		strb	r6, [fp, #19]
1945:src/display.c **** 	  }
 6959              		.loc 1 1945 6 is_stmt 1 view .LVU2273
 6960              	.LVL781:
1958:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6961              		.loc 1 1958 4 view .LVU2274
1959:src/display.c **** 	}
 6962              		.loc 1 1959 4 view .LVU2275
1959:src/display.c **** 	}
 6963              		.loc 1 1959 6 is_stmt 0 view .LVU2276
 6964 0918 1B24     		movs	r4, #27
 6965              	.LVL782:
1959:src/display.c **** 	}
 6966              		.loc 1 1959 6 view .LVU2277
 6967              	.LBE425:
 6968 091a 4EE7     		b	.L484
 6969              	.LVL783:
 6970              	.L707:
1959:src/display.c **** 	}
 6971              		.loc 1 1959 6 view .LVU2278
 6972              	.LBE427:
 6973              	.LBE429:
2058:src/display.c **** 	      return;
 6974              		.loc 1 2058 8 is_stmt 1 view .LVU2279
 6975 091c 3846     		mov	r0, r7
 6976 091e FFF7FEFF 		bl	set_x_hms
 6977              	.LVL784:
2059:src/display.c **** 	    }
 6978              		.loc 1 2059 8 view .LVU2280
 6979 0922 F5E4     		b	.L465
 6980              	.LVL785:
 6981              	.L607:
2220:src/display.c **** 	  if (count != *display_digits)
 6982              		.loc 1 2220 4 is_stmt 0 view .LVU2281
 6983 0924 029B     		ldr	r3, [sp, #8]
 6984 0926 71E4     		b	.L532
 6985              	.LVL786:
 6986              	.L608:
2225:src/display.c **** 	    case -1:
ARM GAS  /tmp/ccwSk7O0.s 			page 224


 6987              		.loc 1 2225 24 view .LVU2282
 6988 0928 0125     		movs	r5, #1
 6989 092a 5946     		mov	r1, fp
 6990 092c BFE7     		b	.L536
 6991              	.LVL787:
 6992              	.L609:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6993              		.loc 1 2248 15 view .LVU2283
 6994 092e 4FF0010A 		mov	r10, #1
 6995 0932 DFE5     		b	.L541
 6996              	.LVL788:
 6997              	.L583:
 6998              	.LBB430:
 6999              	.LBB409:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7000              		.loc 1 2248 15 view .LVU2284
 7001 0934 3846     		mov	r0, r7
 7002 0936 FFF7FEFF 		bl	set_separator.part.0
 7003              	.LVL789:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7004              		.loc 1 2248 15 view .LVU2285
 7005 093a 0446     		mov	r4, r0
 7006              	.LVL790:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7007              		.loc 1 2248 15 view .LVU2286
 7008 093c F7E5     		b	.L581
 7009              	.LVL791:
 7010              	.L515:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7011              		.loc 1 2248 15 view .LVU2287
 7012              	.LBE409:
 7013              	.LBE430:
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7014              		.loc 1 2198 4 is_stmt 1 view .LVU2288
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7015              		.loc 1 2198 7 is_stmt 0 view .LVU2289
 7016 093e 4B45     		cmp	r3, r9
 7017 0940 7FF429AC 		bne	.L592
 7018 0944 3EE5     		b	.L593
 7019              	.LVL792:
 7020              	.L481:
 7021              	.LBB431:
 7022              	.LBB428:
1983:src/display.c **** 	    x[10] = '\0';
 7023              		.loc 1 1983 6 is_stmt 1 view .LVU2290
1984:src/display.c **** 	  }
 7024              		.loc 1 1984 6 view .LVU2291
1983:src/display.c **** 	    x[10] = '\0';
 7025              		.loc 1 1983 11 is_stmt 0 view .LVU2292
 7026 0946 ABF81240 		strh	r4, [fp, #18]	@ movhi
 7027 094a 26E7     		b	.L483
 7028              	.LVL793:
 7029              	.L710:
 7030              	.LBB426:
1908:src/display.c **** 
 7031              		.loc 1 1908 4 is_stmt 1 view .LVU2293
1910:src/display.c **** 	  xcopy(x, small_minus, 4);
ARM GAS  /tmp/ccwSk7O0.s 			page 225


 7032              		.loc 1 1910 4 view .LVU2294
 7033 094c 2222     		movs	r2, #34
 7034 094e 0DF12501 		add	r1, sp, #37
 7035 0952 0AA8     		add	r0, sp, #40
 7036              	.LVL794:
1910:src/display.c **** 	  xcopy(x, small_minus, 4);
 7037              		.loc 1 1910 4 is_stmt 0 view .LVU2295
 7038 0954 FFF7FEFF 		bl	xcopy
 7039              	.LVL795:
1911:src/display.c **** 	  x += 4;
 7040              		.loc 1 1911 4 is_stmt 1 view .LVU2296
 7041 0958 5846     		mov	r0, fp
 7042 095a 2349     		ldr	r1, .L718+16
 7043 095c 0422     		movs	r2, #4
 7044 095e FFF7FEFF 		bl	xcopy
 7045              	.LVL796:
1912:src/display.c **** 	  negative = 4;
 7046              		.loc 1 1912 4 view .LVU2297
1913:src/display.c **** #else
 7047              		.loc 1 1913 4 view .LVU2298
1912:src/display.c **** 	  negative = 4;
 7048              		.loc 1 1912 6 is_stmt 0 view .LVU2299
 7049 0962 0DF1280B 		add	fp, sp, #40
 7050              	.LVL797:
1913:src/display.c **** #else
 7051              		.loc 1 1913 13 view .LVU2300
 7052 0966 0427     		movs	r7, #4
 7053              	.LVL798:
1913:src/display.c **** #else
 7054              		.loc 1 1913 13 view .LVU2301
 7055              	.LBE426:
 7056 0968 D1E6     		b	.L477
 7057              	.LVL799:
 7058              	.L543:
1913:src/display.c **** #else
 7059              		.loc 1 1913 13 view .LVU2302
 7060              	.LBE428:
 7061              	.LBE431:
2264:src/display.c **** 	    odig++;
 7062              		.loc 1 2264 6 is_stmt 1 view .LVU2303
2265:src/display.c **** 	    *obp++ = '.';
 7063              		.loc 1 2265 6 view .LVU2304
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7064              		.loc 1 2266 6 view .LVU2305
2264:src/display.c **** 	    odig++;
 7065              		.loc 1 2264 13 is_stmt 0 view .LVU2306
 7066 096a 42F63062 		movw	r2, #11824
 7067 096e ADF82420 		strh	r2, [sp, #36]	@ movhi
2267:src/display.c **** 	      *obp++ = '0';
 7068              		.loc 1 2267 6 is_stmt 1 view .LVU2307
 7069              	.LVL800:
2267:src/display.c **** 	      *obp++ = '0';
 7070              		.loc 1 2267 20 view .LVU2308
2267:src/display.c **** 	      *obp++ = '0';
 7071              		.loc 1 2267 6 is_stmt 0 view .LVU2309
 7072 0972 721C     		adds	r2, r6, #1
 7073              	.LVL801:
ARM GAS  /tmp/ccwSk7O0.s 			page 226


2267:src/display.c **** 	      *obp++ = '0';
 7074              		.loc 1 2267 6 view .LVU2310
 7075 0974 2AD0     		beq	.L610
 7076 0976 C6F10101 		rsb	r1, r6, #1
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7077              		.loc 1 2266 10 view .LVU2311
 7078 097a 0DF12600 		add	r0, sp, #38
 7079              	.LVL802:
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7080              		.loc 1 2266 10 view .LVU2312
 7081 097e 5944     		add	r1, r1, fp
 7082 0980 0246     		mov	r2, r0
 7083              	.LVL803:
2268:src/display.c **** 	      odig++;
 7084              		.loc 1 2268 15 view .LVU2313
 7085 0982 3025     		movs	r5, #48
 7086              	.LVL804:
 7087              	.L550:
2268:src/display.c **** 	      odig++;
 7088              		.loc 1 2268 8 is_stmt 1 discriminator 3 view .LVU2314
2268:src/display.c **** 	      odig++;
 7089              		.loc 1 2268 15 is_stmt 0 discriminator 3 view .LVU2315
 7090 0984 02F8015B 		strb	r5, [r2], #1
 7091              	.LVL805:
2269:src/display.c **** 	    }
 7092              		.loc 1 2269 8 is_stmt 1 discriminator 3 view .LVU2316
2267:src/display.c **** 	      *obp++ = '0';
 7093              		.loc 1 2267 25 discriminator 3 view .LVU2317
2267:src/display.c **** 	      *obp++ = '0';
 7094              		.loc 1 2267 20 discriminator 3 view .LVU2318
2267:src/display.c **** 	      *obp++ = '0';
 7095              		.loc 1 2267 6 is_stmt 0 discriminator 3 view .LVU2319
 7096 0988 8A42     		cmp	r2, r1
 7097 098a FBD1     		bne	.L550
 7098 098c 6FEA0608 		mvn	r8, r6
 7099 0990 8044     		add	r8, r8, r0
 7100 0992 7542     		rsbs	r5, r6, #0
 7101              	.LVL806:
 7102              	.L549:
2271:src/display.c **** 	      *obp++ = *p++;
 7103              		.loc 1 2271 16 is_stmt 1 view .LVU2320
2271:src/display.c **** 	      *obp++ = *p++;
 7104              		.loc 1 2271 6 is_stmt 0 view .LVU2321
 7105 0994 002B     		cmp	r3, #0
 7106 0996 7FF7ADAD 		ble	.L541
 7107 099a 581E     		subs	r0, r3, #1
 7108 099c 4044     		add	r0, r0, r8
 7109 099e 08F1FF32 		add	r2, r8, #-1
 7110              	.LVL807:
 7111              	.L551:
2272:src/display.c **** 	      odig++;
 7112              		.loc 1 2272 8 is_stmt 1 discriminator 3 view .LVU2322
2272:src/display.c **** 	      odig++;
 7113              		.loc 1 2272 15 is_stmt 0 discriminator 3 view .LVU2323
 7114 09a2 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 7115              	.LVL808:
2272:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccwSk7O0.s 			page 227


 7116              		.loc 1 2272 15 discriminator 3 view .LVU2324
 7117 09a6 02F8011F 		strb	r1, [r2, #1]!
2273:src/display.c **** 	    }
 7118              		.loc 1 2273 8 is_stmt 1 discriminator 3 view .LVU2325
2271:src/display.c **** 	      *obp++ = *p++;
 7119              		.loc 1 2271 25 discriminator 3 view .LVU2326
 7120              	.LVL809:
2271:src/display.c **** 	      *obp++ = *p++;
 7121              		.loc 1 2271 16 discriminator 3 view .LVU2327
2271:src/display.c **** 	      *obp++ = *p++;
 7122              		.loc 1 2271 6 is_stmt 0 discriminator 3 view .LVU2328
 7123 09aa 9042     		cmp	r0, r2
 7124 09ac F9D1     		bne	.L551
 7125              	.LVL810:
2271:src/display.c **** 	      *obp++ = *p++;
 7126              		.loc 1 2271 6 discriminator 3 view .LVU2329
 7127 09ae 9844     		add	r8, r8, r3
 7128              	.LVL811:
2271:src/display.c **** 	      *obp++ = *p++;
 7129              		.loc 1 2271 6 discriminator 3 view .LVU2330
 7130 09b0 1D44     		add	r5, r5, r3
 7131 09b2 9FE5     		b	.L541
 7132              	.LVL812:
 7133              	.L709:
2214:src/display.c **** 
 7134              		.loc 1 2214 2 is_stmt 1 view .LVU2331
 7135 09b4 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2214:src/display.c **** 
 7136              		.loc 1 2214 9 is_stmt 0 view .LVU2332
 7137 09b8 09EB0E03 		add	r3, r9, lr
 7138              	.LVL813:
2214:src/display.c **** 
 7139              		.loc 1 2214 45 is_stmt 1 view .LVU2333
2214:src/display.c **** 
 7140              		.loc 1 2214 2 is_stmt 0 view .LVU2334
 7141 09bc 51B1     		cbz	r1, .L713
2203:src/display.c **** 	      extra_digits = 0;
 7142              		.loc 1 2203 37 view .LVU2335
 7143 09be 0225     		movs	r5, #2
 7144 09c0 00E4     		b	.L591
 7145              	.LVL814:
 7146              	.L712:
2203:src/display.c **** 	      extra_digits = 0;
 7147              		.loc 1 2203 37 view .LVU2336
 7148 09c2 079B     		ldr	r3, [sp, #28]
 7149              	.LVL815:
2294:src/display.c **** 	    *obp++ = '.';
 7150              		.loc 1 2294 10 view .LVU2337
 7151 09c4 0125     		movs	r5, #1
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7152              		.loc 1 2295 10 view .LVU2338
 7153 09c6 0DF12608 		add	r8, sp, #38
 7154              	.LVL816:
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7155              		.loc 1 2295 10 view .LVU2339
 7156 09ca 27E7     		b	.L559
 7157              	.LVL817:
ARM GAS  /tmp/ccwSk7O0.s 			page 228


 7158              	.L610:
2265:src/display.c **** 	    *obp++ = '.';
 7159              		.loc 1 2265 10 view .LVU2340
 7160 09cc 0125     		movs	r5, #1
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7161              		.loc 1 2266 10 view .LVU2341
 7162 09ce 0DF12608 		add	r8, sp, #38
 7163              	.LVL818:
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7164              		.loc 1 2266 10 view .LVU2342
 7165 09d2 DFE7     		b	.L549
 7166              	.LVL819:
 7167              	.L713:
2021:src/display.c **** 	int odig = 0;
 7168              		.loc 1 2021 15 view .LVU2343
 7169 09d4 5946     		mov	r1, fp
 7170 09d6 6EE5     		b	.L531
 7171              	.L719:
 7172              		.align	2
 7173              	.L718:
 7174 09d8 00000000 		.word	.LANCHOR1
 7175 09dc D34D6210 		.word	274877907
 7176 09e0 18FCFFFF 		.word	-1000
 7177 09e4 00000000 		.word	.LANCHOR14
 7178 09e8 00000000 		.word	.LANCHOR13
 7179              		.cfi_endproc
 7180              	.LFE27:
 7182              		.section	.text.set_x,"ax",%progbits
 7183              		.align	1
 7184              		.p2align 2,,3
 7185              		.syntax unified
 7186              		.thumb
 7187              		.thumb_func
 7188              		.fpu fpv4-sp-d16
 7190              	set_x:
 7191              	.LVL820:
 7192              	.LFB26:
2009:src/display.c **** 	decNumber z;
 7193              		.loc 1 2009 66 is_stmt 1 view -0
 7194              		.cfi_startproc
 7195              		@ args = 0, pretend = 0, frame = 40
 7196              		@ frame_needed = 0, uses_anonymous_args = 0
2010:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7197              		.loc 1 2010 2 view .LVU2345
2011:src/display.c **** 
 7198              		.loc 1 2011 2 view .LVU2346
2009:src/display.c **** 	decNumber z;
 7199              		.loc 1 2009 66 is_stmt 0 view .LVU2347
 7200 0000 30B5     		push	{r4, r5, lr}
 7201              		.cfi_def_cfa_offset 12
 7202              		.cfi_offset 4, -12
 7203              		.cfi_offset 5, -8
 7204              		.cfi_offset 14, -4
 7205 0002 8BB0     		sub	sp, sp, #44
 7206              		.cfi_def_cfa_offset 56
2011:src/display.c **** 
 7207              		.loc 1 2011 6 view .LVU2348
ARM GAS  /tmp/ccwSk7O0.s 			page 229


 7208 0004 0C23     		movs	r3, #12
2014:src/display.c **** 	else
 7209              		.loc 1 2014 4 view .LVU2349
 7210 0006 01AD     		add	r5, sp, #4
2009:src/display.c **** 	decNumber z;
 7211              		.loc 1 2009 66 view .LVU2350
 7212 0008 0C46     		mov	r4, r1
2011:src/display.c **** 
 7213              		.loc 1 2011 6 view .LVU2351
 7214 000a 0093     		str	r3, [sp]
2013:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7215              		.loc 1 2013 2 is_stmt 1 view .LVU2352
2014:src/display.c **** 	else
 7216              		.loc 1 2014 4 is_stmt 0 view .LVU2353
 7217 000c 2946     		mov	r1, r5
 7218              	.LVL821:
2013:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7219              		.loc 1 2013 5 view .LVU2354
 7220 000e 42B1     		cbz	r2, .L721
2014:src/display.c **** 	else
 7221              		.loc 1 2014 4 is_stmt 1 view .LVU2355
 7222 0010 FFF7FEFF 		bl	decimal128ToNumber
 7223              	.LVL822:
2017:src/display.c ****       }
 7224              		.loc 1 2017 2 view .LVU2356
 7225 0014 2146     		mov	r1, r4
 7226 0016 2846     		mov	r0, r5
 7227 0018 6A46     		mov	r2, sp
 7228 001a FFF7FEFF 		bl	set_x_dn
 7229              	.LVL823:
2018:src/display.c **** 
 7230              		.loc 1 2018 7 is_stmt 0 view .LVU2357
 7231 001e 0BB0     		add	sp, sp, #44
 7232              		.cfi_remember_state
 7233              		.cfi_def_cfa_offset 12
 7234              		@ sp needed
 7235 0020 30BD     		pop	{r4, r5, pc}
 7236              	.LVL824:
 7237              	.L721:
 7238              		.cfi_restore_state
2016:src/display.c **** 	set_x_dn(&z, res, &digits);
 7239              		.loc 1 2016 4 is_stmt 1 view .LVU2358
 7240 0022 FFF7FEFF 		bl	decimal64ToNumber
 7241              	.LVL825:
2017:src/display.c ****       }
 7242              		.loc 1 2017 2 view .LVU2359
 7243 0026 2146     		mov	r1, r4
 7244 0028 2846     		mov	r0, r5
 7245 002a 6A46     		mov	r2, sp
 7246 002c FFF7FEFF 		bl	set_x_dn
 7247              	.LVL826:
2018:src/display.c **** 
 7248              		.loc 1 2018 7 is_stmt 0 view .LVU2360
 7249 0030 0BB0     		add	sp, sp, #44
 7250              		.cfi_def_cfa_offset 12
 7251              		@ sp needed
 7252 0032 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccwSk7O0.s 			page 230


2018:src/display.c **** 
 7253              		.loc 1 2018 7 view .LVU2361
 7254              		.cfi_endproc
 7255              	.LFE26:
 7257              		.section	.text.format_reg,"ax",%progbits
 7258              		.align	1
 7259              		.p2align 2,,3
 7260              		.global	format_reg
 7261              		.syntax unified
 7262              		.thumb
 7263              		.thumb_func
 7264              		.fpu fpv4-sp-d16
 7266              	format_reg:
 7267              	.LVL827:
 7268              	.LFB28:
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7269              		.loc 1 2425 45 is_stmt 1 view -0
 7270              		.cfi_startproc
 7271              		@ args = 0, pretend = 0, frame = 40
 7272              		@ frame_needed = 0, uses_anonymous_args = 0
2426:src/display.c **** 
 7273              		.loc 1 2426 2 view .LVU2363
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7274              		.loc 1 2425 45 is_stmt 0 view .LVU2364
 7275 0000 30B5     		push	{r4, r5, lr}
 7276              		.cfi_def_cfa_offset 12
 7277              		.cfi_offset 4, -12
 7278              		.cfi_offset 5, -8
 7279              		.cfi_offset 14, -4
 7280 0002 8BB0     		sub	sp, sp, #44
 7281              		.cfi_def_cfa_offset 56
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7282              		.loc 1 2425 45 view .LVU2365
 7283 0004 0C46     		mov	r4, r1
 7284 0006 0546     		mov	r5, r0
2426:src/display.c **** 
 7285              		.loc 1 2426 28 view .LVU2366
 7286 0008 FFF7FEFF 		bl	get_reg_n
 7287              	.LVL828:
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7288              		.loc 1 2428 6 view .LVU2367
 7289 000c 154B     		ldr	r3, .L731
 7290 000e 1B68     		ldr	r3, [r3]
 7291 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7292              	.LVL829:
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7293              		.loc 1 2428 2 is_stmt 1 view .LVU2368
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7294              		.loc 1 2428 5 is_stmt 0 view .LVU2369
 7295 0014 D207     		lsls	r2, r2, #31
 7296 0016 1DD4     		bmi	.L729
2431:src/display.c **** 	  decNumber x;
 7297              		.loc 1 2431 7 is_stmt 1 view .LVU2370
2431:src/display.c **** 	  decNumber x;
 7298              		.loc 1 2431 10 is_stmt 0 view .LVU2371
 7299 0018 44B1     		cbz	r4, .L730
 7300              	.L727:
ARM GAS  /tmp/ccwSk7O0.s 			page 231


2442:src/display.c ****       }
 7301              		.loc 1 2442 4 is_stmt 1 view .LVU2372
2442:src/display.c ****       }
 7302              		.loc 1 2442 24 is_stmt 0 view .LVU2373
 7303 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2442:src/display.c ****       }
 7304              		.loc 1 2442 4 view .LVU2374
 7305 001e 2146     		mov	r1, r4
 7306 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7307 0024 FFF7FEFF 		bl	set_x
 7308              	.LVL830:
2443:src/display.c **** 
 7309              		.loc 1 2443 7 view .LVU2375
 7310 0028 0BB0     		add	sp, sp, #44
 7311              		.cfi_remember_state
 7312              		.cfi_def_cfa_offset 12
 7313              		@ sp needed
 7314 002a 30BD     		pop	{r4, r5, pc}
 7315              	.LVL831:
 7316              	.L730:
 7317              		.cfi_restore_state
2431:src/display.c **** 	  decNumber x;
 7318              		.loc 1 2431 32 discriminator 1 view .LVU2376
 7319 002c 0E4A     		ldr	r2, .L731+4
2431:src/display.c **** 	  decNumber x;
 7320              		.loc 1 2431 23 discriminator 1 view .LVU2377
 7321 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7322 0030 012A     		cmp	r2, #1
 7323 0032 F2D9     		bls	.L727
 7324              	.LVL832:
 7325              	.LBB435:
 7326              	.LBI435:
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7327              		.loc 1 2425 12 is_stmt 1 view .LVU2378
 7328              	.LBB436:
 7329              	.LBB437:
2432:src/display.c **** 	  int s;
 7330              		.loc 1 2432 4 view .LVU2379
2433:src/display.c **** 	  unsigned long long int v;
 7331              		.loc 1 2433 4 view .LVU2380
2434:src/display.c **** 
 7332              		.loc 1 2434 4 view .LVU2381
2436:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7333              		.loc 1 2436 4 view .LVU2382
 7334 0034 2946     		mov	r1, r5
 7335 0036 01A8     		add	r0, sp, #4
 7336              	.LVL833:
2436:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7337              		.loc 1 2436 4 is_stmt 0 view .LVU2383
 7338 0038 FFF7FEFF 		bl	getRegister
 7339              	.LVL834:
2437:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7340              		.loc 1 2437 4 is_stmt 1 view .LVU2384
2437:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7341              		.loc 1 2437 8 is_stmt 0 view .LVU2385
 7342 003c 01A8     		add	r0, sp, #4
 7343 003e 6946     		mov	r1, sp
ARM GAS  /tmp/ccwSk7O0.s 			page 232


 7344 0040 FFF7FEFF 		bl	dn_to_ull
 7345              	.LVL835:
2438:src/display.c **** 	}
 7346              		.loc 1 2438 4 is_stmt 1 view .LVU2386
 7347 0044 009A     		ldr	r2, [sp]
 7348 0046 FFF7FEFF 		bl	build_value
 7349              	.LVL836:
2438:src/display.c **** 	}
 7350              		.loc 1 2438 4 is_stmt 0 view .LVU2387
 7351 004a 2246     		mov	r2, r4
 7352 004c FFF7FEFF 		bl	set_int_x
 7353              	.LVL837:
 7354              	.LBE437:
 7355              	.LBE436:
 7356              	.LBE435:
2443:src/display.c **** 
 7357              		.loc 1 2443 7 view .LVU2388
 7358 0050 0BB0     		add	sp, sp, #44
 7359              		.cfi_remember_state
 7360              		.cfi_def_cfa_offset 12
 7361              		@ sp needed
 7362 0052 30BD     		pop	{r4, r5, pc}
 7363              	.LVL838:
 7364              	.L729:
 7365              		.cfi_restore_state
2429:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7366              		.loc 1 2429 4 is_stmt 1 view .LVU2389
 7367 0054 2846     		mov	r0, r5
 7368              	.LVL839:
2429:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7369              		.loc 1 2429 4 is_stmt 0 view .LVU2390
 7370 0056 FFF7FEFF 		bl	get_reg_n_int
 7371              	.LVL840:
 7372 005a 2246     		mov	r2, r4
 7373 005c FFF7FEFF 		bl	set_int_x
 7374              	.LVL841:
2443:src/display.c **** 
 7375              		.loc 1 2443 7 view .LVU2391
 7376 0060 0BB0     		add	sp, sp, #44
 7377              		.cfi_def_cfa_offset 12
 7378              		@ sp needed
 7379 0062 30BD     		pop	{r4, r5, pc}
 7380              	.LVL842:
 7381              	.L732:
2443:src/display.c **** 
 7382              		.loc 1 2443 7 view .LVU2392
 7383              		.align	2
 7384              	.L731:
 7385 0064 00000000 		.word	main_ram
 7386 0068 00000000 		.word	StateWhileOn
 7387              		.cfi_endproc
 7388              	.LFE28:
 7390              		.section	.text.set_status_right,"ax",%progbits
 7391              		.align	1
 7392              		.p2align 2,,3
 7393              		.syntax unified
 7394              		.thumb
ARM GAS  /tmp/ccwSk7O0.s 			page 233


 7395              		.thumb_func
 7396              		.fpu fpv4-sp-d16
 7398              	set_status_right:
 7399              	.LVL843:
 7400              	.LFB49:
3637:src/display.c ****       static void set_status_top(const char *str) {
3638:src/display.c **** 	if (no_status_top) return;
3639:src/display.c **** 	if (State2.runmode) {
3640:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3641:src/display.c **** 	}
3642:src/display.c **** 	else {
3643:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3644:src/display.c **** 	}
3645:src/display.c ****       }
3646:src/display.c **** #ifdef TOP_ROW
3647:src/display.c ****       static void set_status_top_always(const char *str) {
3648:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3649:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3650:src/display.c ****       }
3651:src/display.c **** #endif
3652:src/display.c **** 
3653:src/display.c ****       /*
3654:src/display.c ****        *  Display messages (global function)
3655:src/display.c ****        */
3656:src/display.c ****       extern void message(const char *str1, const char *str2)
3657:src/display.c ****       {
3658:src/display.c **** 	State2.disp_freeze = 0;
3659:src/display.c **** 	State2.disp_small = 0;
3660:src/display.c **** 	WasDataEntry = 0;
3661:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3662:src/display.c **** 	  // Complete redraw necessary
3663:src/display.c **** 	  DispMsg = str1;
3664:src/display.c **** 	  display();
3665:src/display.c **** 	}
3666:src/display.c **** 	else {
3667:src/display.c **** 	  if ( str2 != NULL ) {
3668:src/display.c **** 	    reset_disp();
3669:src/display.c **** 	    ShowRPN = 0;
3670:src/display.c **** 	    set_annunciators();
3671:src/display.c **** 	    set_digits_string( str2, 0 );
3672:src/display.c **** 	  }
3673:src/display.c **** 	  set_status( str1 );
3674:src/display.c **** 	  finish_display();// message
3675:src/display.c **** 	}
3676:src/display.c ****       }
3677:src/display.c **** 
3678:src/display.c **** #ifdef INCLUDE_STOPWATCH
3679:src/display.c **** 
3680:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3681:src/display.c **** 	int j = SEGS_EXP_BASE;
3682:src/display.c **** 	for (; *exponent!=0; exponent++) {
3683:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3684:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3685:src/display.c **** 	}
3686:src/display.c ****       }
3687:src/display.c **** 
3688:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
ARM GAS  /tmp/ccwSk7O0.s 			page 234


3689:src/display.c ****       {
3690:src/display.c **** #ifndef REALBUILD
3691:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3692:src/display.c **** #endif
3693:src/display.c **** 	reset_disp();
3694:src/display.c **** 	set_dot(DEG);
3695:src/display.c **** 	set_digits_string( str2, 0 );
3696:src/display.c **** 	State2.disp_small = force_small;
3697:src/display.c **** 	if( exponent!=NULL ) {
3698:src/display.c **** 	  stopwatch_exponent(exponent);
3699:src/display.c **** 	}
3700:src/display.c **** 	set_status( str1 );
3701:src/display.c **** 	finish_display();
3702:src/display.c ****       }
3703:src/display.c **** 
3704:src/display.c **** 
3705:src/display.c **** #endif // INCLUDE_STOPWATCH
3706:src/display.c **** 
3707:src/display.c ****       /* Display the right hand characters from the given string.
3708:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3709:src/display.c ****        * and reduce font size if required.
3710:src/display.c ****        */
3711:src/display.c ****       static void set_status_right(const char *str) {
 7401              		.loc 1 3711 53 is_stmt 1 view -0
 7402              		.cfi_startproc
 7403              		@ args = 0, pretend = 0, frame = 0
 7404              		@ frame_needed = 0, uses_anonymous_args = 0
3712:src/display.c **** 	unsigned int x = 0;
 7405              		.loc 1 3712 2 view .LVU2394
3713:src/display.c **** 	const char *p;
 7406              		.loc 1 3713 2 view .LVU2395
3714:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7407              		.loc 1 3714 2 view .LVU2396
3711:src/display.c **** 	unsigned int x = 0;
 7408              		.loc 1 3711 53 is_stmt 0 view .LVU2397
 7409 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7410              		.cfi_def_cfa_offset 28
 7411              		.cfi_offset 4, -28
 7412              		.cfi_offset 5, -24
 7413              		.cfi_offset 6, -20
 7414              		.cfi_offset 7, -16
 7415              		.cfi_offset 8, -12
 7416              		.cfi_offset 9, -8
 7417              		.cfi_offset 14, -4
 7418              		.loc 1 3714 23 view .LVU2398
 7419 0004 194B     		ldr	r3, .L748
 7420              		.loc 1 3714 41 view .LVU2399
 7421 0006 93F91630 		ldrsb	r3, [r3, #22]
 7422 000a 002B     		cmp	r3, #0
3711:src/display.c **** 	unsigned int x = 0;
 7423              		.loc 1 3711 53 view .LVU2400
 7424 000c 83B0     		sub	sp, sp, #12
 7425              		.cfi_def_cfa_offset 40
3711:src/display.c **** 	unsigned int x = 0;
 7426              		.loc 1 3711 53 view .LVU2401
 7427 000e 0646     		mov	r6, r0
 7428              		.loc 1 3714 41 view .LVU2402
ARM GAS  /tmp/ccwSk7O0.s 			page 235


 7429 0010 23DA     		bge	.L747
 7430              	.LVL844:
 7431              	.L734:
 7432              		.loc 1 3714 12 view .LVU2403
 7433 0012 4FF00108 		mov	r8, #1
3715:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7434              		.loc 1 3715 36 view .LVU2404
 7435 0016 4FF48077 		mov	r7, #256
 7436              	.L735:
 7437              	.LVL845:
3716:src/display.c **** 
3717:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7438              		.loc 1 3717 2 is_stmt 1 discriminator 4 view .LVU2405
 7439              		.loc 1 3717 14 discriminator 4 view .LVU2406
 7440              		.loc 1 3717 2 is_stmt 0 discriminator 4 view .LVU2407
 7441 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7442 001c 3446     		mov	r4, r6
 7443 001e 1BB1     		cbz	r3, .L736
 7444              	.LVL846:
 7445              	.L737:
 7446              		.loc 1 3717 30 is_stmt 1 discriminator 3 view .LVU2408
 7447              		.loc 1 3717 26 discriminator 3 view .LVU2409
 7448              		.loc 1 3717 14 discriminator 3 view .LVU2410
 7449              		.loc 1 3717 2 is_stmt 0 discriminator 3 view .LVU2411
 7450 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7451              	.LVL847:
 7452              		.loc 1 3717 2 discriminator 3 view .LVU2412
 7453 0024 002B     		cmp	r3, #0
 7454 0026 FBD1     		bne	.L737
 7455              	.L736:
3712:src/display.c **** 	const char *p;
 7456              		.loc 1 3712 15 view .LVU2413
 7457 0028 0025     		movs	r5, #0
 7458 002a 06E0     		b	.L738
 7459              	.LVL848:
 7460              	.L739:
 7461              	.LBB438:
3718:src/display.c **** 	while (--p >= str) {
3719:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7462              		.loc 1 3719 27 view .LVU2414
 7463 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3720:src/display.c **** 
3721:src/display.c **** 	  x += charlengths(c);
 7464              		.loc 1 3721 9 view .LVU2415
 7465 002e 3844     		add	r0, r0, r7
 7466 0030 FFF7FEFF 		bl	charlengths
 7467              	.LVL849:
 7468              		.loc 1 3721 6 view .LVU2416
 7469 0034 0544     		add	r5, r5, r0
 7470              	.LVL850:
3722:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7471              		.loc 1 3722 4 is_stmt 1 view .LVU2417
 7472              		.loc 1 3722 7 is_stmt 0 view .LVU2418
 7473 0036 4B2D     		cmp	r5, #75
 7474 0038 03D8     		bhi	.L740
 7475              	.LVL851:
 7476              	.L738:
ARM GAS  /tmp/ccwSk7O0.s 			page 236


3719:src/display.c **** 
 7477              		.loc 1 3719 4 is_stmt 1 view .LVU2419
3719:src/display.c **** 
 7478              		.loc 1 3719 4 is_stmt 0 view .LVU2420
 7479              	.LBE438:
3718:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7480              		.loc 1 3718 8 is_stmt 1 view .LVU2421
 7481 003a A146     		mov	r9, r4
 7482 003c 013C     		subs	r4, r4, #1
 7483              	.LVL852:
 7484              	.LBB439:
3721:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7485              		.loc 1 3721 4 view .LVU2422
3721:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7486              		.loc 1 3721 4 is_stmt 0 view .LVU2423
 7487              	.LBE439:
3718:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7488              		.loc 1 3718 8 view .LVU2424
 7489 003e A642     		cmp	r6, r4
 7490 0040 F4D9     		bls	.L739
 7491              	.LVL853:
 7492              	.L740:
3723:src/display.c **** 	    break;
3724:src/display.c **** 	}
3725:src/display.c **** 	set_status_sized(p+1, toolarge);
 7493              		.loc 1 3725 2 is_stmt 1 view .LVU2425
 7494              	.LBB440:
 7495              	.LBI440:
3476:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7496              		.loc 1 3476 19 view .LVU2426
 7497              	.LBB441:
3477:src/display.c ****       }
 7498              		.loc 1 3477 2 view .LVU2427
 7499 0042 40F24A23 		movw	r3, #586
 7500 0046 0093     		str	r3, [sp]
 7501 0048 4146     		mov	r1, r8
 7502 004a 4846     		mov	r0, r9
 7503 004c 8E23     		movs	r3, #142
 7504 004e 4A22     		movs	r2, #74
 7505 0050 FFF7FEFF 		bl	s_s_sized
 7506              	.LVL854:
3477:src/display.c ****       }
 7507              		.loc 1 3477 2 is_stmt 0 view .LVU2428
 7508              	.LBE441:
 7509              	.LBE440:
3726:src/display.c ****       }
 7510              		.loc 1 3726 7 view .LVU2429
 7511 0054 03B0     		add	sp, sp, #12
 7512              		.cfi_remember_state
 7513              		.cfi_def_cfa_offset 28
 7514              		@ sp needed
 7515 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7516              	.LVL855:
 7517              	.L747:
 7518              		.cfi_restore_state
 7519              	.LBB442:
 7520              	.LBI442:
ARM GAS  /tmp/ccwSk7O0.s 			page 237


3624:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7521              		.loc 1 3624 18 is_stmt 1 view .LVU2430
 7522              	.LBB443:
3625:src/display.c ****       }
 7523              		.loc 1 3625 2 view .LVU2431
3625:src/display.c ****       }
 7524              		.loc 1 3625 9 is_stmt 0 view .LVU2432
 7525 005a 0021     		movs	r1, #0
 7526 005c FFF7FEFF 		bl	pixel_length
 7527              	.LVL856:
3625:src/display.c ****       }
 7528              		.loc 1 3625 9 view .LVU2433
 7529              	.LBE443:
 7530              	.LBE442:
3714:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7531              		.loc 1 3714 41 view .LVU2434
 7532 0060 4B28     		cmp	r0, #75
 7533 0062 D6DC     		bgt	.L734
3714:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7534              		.loc 1 3714 12 view .LVU2435
 7535 0064 4FF00008 		mov	r8, #0
3715:src/display.c **** 
 7536              		.loc 1 3715 36 view .LVU2436
 7537 0068 4746     		mov	r7, r8
 7538 006a D6E7     		b	.L735
 7539              	.L749:
 7540              		.align	2
 7541              	.L748:
 7542 006c 00000000 		.word	StateWhileOn
 7543              		.cfi_endproc
 7544              	.LFE49:
 7546              		.section	.text.set_status_top.part.0,"ax",%progbits
 7547              		.align	1
 7548              		.p2align 2,,3
 7549              		.syntax unified
 7550              		.thumb
 7551              		.thumb_func
 7552              		.fpu fpv4-sp-d16
 7554              	set_status_top.part.0:
 7555              	.LVL857:
 7556              	.LFB58:
3637:src/display.c **** 	if (no_status_top) return;
 7557              		.loc 1 3637 19 is_stmt 1 view -0
 7558              		.cfi_startproc
 7559              		@ args = 0, pretend = 0, frame = 0
 7560              		@ frame_needed = 0, uses_anonymous_args = 0
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7561              		.loc 1 3639 2 view .LVU2438
3637:src/display.c **** 	if (no_status_top) return;
 7562              		.loc 1 3637 19 is_stmt 0 view .LVU2439
 7563 0000 10B5     		push	{r4, lr}
 7564              		.cfi_def_cfa_offset 8
 7565              		.cfi_offset 4, -8
 7566              		.cfi_offset 14, -4
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7567              		.loc 1 3639 6 view .LVU2440
 7568 0002 184B     		ldr	r3, .L760
ARM GAS  /tmp/ccwSk7O0.s 			page 238


 7569 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7570              		.loc 1 3639 5 view .LVU2441
 7571 0006 13F04001 		ands	r1, r3, #64
3637:src/display.c **** 	if (no_status_top) return;
 7572              		.loc 1 3637 19 view .LVU2442
 7573 000a 82B0     		sub	sp, sp, #8
 7574              		.cfi_def_cfa_offset 16
3637:src/display.c **** 	if (no_status_top) return;
 7575              		.loc 1 3637 19 view .LVU2443
 7576 000c 0446     		mov	r4, r0
3639:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7577              		.loc 1 3639 5 view .LVU2444
 7578 000e 0DD0     		beq	.L751
3640:src/display.c **** 	}
 7579              		.loc 1 3640 4 is_stmt 1 view .LVU2445
 7580 0010 1A06     		lsls	r2, r3, #24
 7581 0012 18D5     		bpl	.L758
 7582 0014 0121     		movs	r1, #1
 7583              	.LVL858:
 7584              	.L752:
 7585              	.LBB444:
 7586              	.LBI444:
3479:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7587              		.loc 1 3479 19 view .LVU2446
 7588              	.LBB445:
3480:src/display.c ****       }
 7589              		.loc 1 3480 2 view .LVU2447
 7590 0016 4FF45373 		mov	r3, #844
 7591 001a 0093     		str	r3, [sp]
 7592 001c 2046     		mov	r0, r4
 7593 001e 40F24A23 		movw	r3, #586
 7594 0022 2B22     		movs	r2, #43
 7595 0024 FFF7FEFF 		bl	s_s_sized
 7596              	.LVL859:
3480:src/display.c ****       }
 7597              		.loc 1 3480 2 is_stmt 0 view .LVU2448
 7598              	.LBE445:
 7599              	.LBE444:
3645:src/display.c **** #ifdef TOP_ROW
 7600              		.loc 1 3645 7 view .LVU2449
 7601 0028 02B0     		add	sp, sp, #8
 7602              		.cfi_remember_state
 7603              		.cfi_def_cfa_offset 8
 7604              		@ sp needed
 7605 002a 10BD     		pop	{r4, pc}
 7606              	.LVL860:
 7607              	.L751:
 7608              		.cfi_restore_state
3643:src/display.c **** 	}
 7609              		.loc 1 3643 4 is_stmt 1 view .LVU2450
 7610 002c 1B06     		lsls	r3, r3, #24
 7611 002e 12D5     		bpl	.L759
 7612 0030 0121     		movs	r1, #1
 7613              	.LVL861:
 7614              	.L754:
 7615              	.LBB446:
ARM GAS  /tmp/ccwSk7O0.s 			page 239


 7616              	.LBI446:
3476:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7617              		.loc 1 3476 19 view .LVU2451
 7618              	.LBB447:
3477:src/display.c ****       }
 7619              		.loc 1 3477 2 view .LVU2452
 7620 0032 40F24A23 		movw	r3, #586
 7621 0036 0093     		str	r3, [sp]
 7622 0038 2046     		mov	r0, r4
 7623 003a 8E23     		movs	r3, #142
 7624 003c 4A22     		movs	r2, #74
 7625 003e FFF7FEFF 		bl	s_s_sized
 7626              	.LVL862:
3477:src/display.c ****       }
 7627              		.loc 1 3477 2 is_stmt 0 view .LVU2453
 7628              	.LBE447:
 7629              	.LBE446:
3645:src/display.c **** #ifdef TOP_ROW
 7630              		.loc 1 3645 7 view .LVU2454
 7631 0042 02B0     		add	sp, sp, #8
 7632              		.cfi_remember_state
 7633              		.cfi_def_cfa_offset 8
 7634              		@ sp needed
 7635 0044 10BD     		pop	{r4, pc}
 7636              	.LVL863:
 7637              	.L758:
 7638              		.cfi_restore_state
 7639              	.LBB448:
 7640              	.LBI448:
3627:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7641              		.loc 1 3627 18 is_stmt 1 view .LVU2455
 7642              	.LBB449:
3628:src/display.c ****       }
 7643              		.loc 1 3628 2 view .LVU2456
3628:src/display.c ****       }
 7644              		.loc 1 3628 9 is_stmt 0 view .LVU2457
 7645 0046 0021     		movs	r1, #0
 7646 0048 FFF7FEFF 		bl	pixel_length
 7647              	.LVL864:
3628:src/display.c ****       }
 7648              		.loc 1 3628 9 view .LVU2458
 7649              	.LBE449:
 7650              	.LBE448:
3640:src/display.c **** 	}
 7651              		.loc 1 3640 4 view .LVU2459
 7652 004c 2C28     		cmp	r0, #44
 7653 004e D4BF     		ite	le
 7654 0050 0021     		movle	r1, #0
 7655 0052 0121     		movgt	r1, #1
 7656 0054 DFE7     		b	.L752
 7657              	.LVL865:
 7658              	.L759:
 7659              	.LBB450:
 7660              	.LBI450:
3624:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7661              		.loc 1 3624 18 is_stmt 1 view .LVU2460
 7662              	.LBB451:
ARM GAS  /tmp/ccwSk7O0.s 			page 240


3625:src/display.c ****       }
 7663              		.loc 1 3625 2 view .LVU2461
3625:src/display.c ****       }
 7664              		.loc 1 3625 9 is_stmt 0 view .LVU2462
 7665 0056 FFF7FEFF 		bl	pixel_length
 7666              	.LVL866:
3625:src/display.c ****       }
 7667              		.loc 1 3625 9 view .LVU2463
 7668              	.LBE451:
 7669              	.LBE450:
3643:src/display.c **** 	}
 7670              		.loc 1 3643 4 view .LVU2464
 7671 005a 4B28     		cmp	r0, #75
 7672 005c D4BF     		ite	le
 7673 005e 0021     		movle	r1, #0
 7674 0060 0121     		movgt	r1, #1
 7675 0062 E6E7     		b	.L754
 7676              	.L761:
 7677              		.align	2
 7678              	.L760:
 7679 0064 00000000 		.word	StateWhileOn
 7680              		.cfi_endproc
 7681              	.LFE58:
 7683              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7684              		.align	2
 7685              	.LC2:
 7686 0000 32630600 		.ascii	"2c\006\000"
 7687              		.align	2
 7688              	.LC3:
 7689 0004 07C63C00 		.ascii	"\007\306<\000"
 7690              		.align	2
 7691              	.LC4:
 7692 0008 07876900 		.ascii	"\007\207i\000"
 7693              		.align	2
 7694              	.LC5:
 7695 000c 07C67900 		.ascii	"\007\306y\000"
 7696              		.align	2
 7697              	.LC6:
 7698 0010 07950600 		.ascii	"\007\225\006\000"
 7699              		.align	2
 7700              	.LC7:
 7701 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7701      060600
 7702 001b 00       		.align	2
 7703              	.LC8:
 7704 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7704      060600
 7705 0023 00       		.align	2
 7706              	.LC9:
 7707 0024 07C74400 		.ascii	"\007\307D\000"
 7708              		.align	2
 7709              	.LC10:
 7710 0028 07872000 		.ascii	"\007\207 \000"
 7711              		.align	2
 7712              	.LC11:
 7713 002c 4C656E67 		.ascii	"Length:\000"
 7713      74683A00 
ARM GAS  /tmp/ccwSk7O0.s 			page 241


 7714              		.align	2
 7715              	.LC12:
 7716 0034 5265616C 		.ascii	"Real:\000"
 7716      3A00
 7717 003a 0000     		.align	2
 7718              	.LC13:
 7719 003c 416E676C 		.ascii	"Angle:\000"
 7719      653A00
 7720 0043 00       		.align	2
 7721              	.LC14:
 7722 0044 496D6167 		.ascii	"Imag:\000"
 7722      3A00
 7723 004a 0000     		.align	2
 7724              	.LC15:
 7725 004c 07876A00 		.ascii	"\007\207j\000"
 7726              		.align	2
 7727              	.LC16:
 7728 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7728      0700
 7729 0056 0000     		.align	2
 7730              	.LC17:
 7731 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7731      00
 7732 005d 000000   		.align	2
 7733              	.LC18:
 7734 0060 07C73C00 		.ascii	"\007\307<\000"
 7735              		.align	2
 7736              	.LC19:
 7737 0064 07C77900 		.ascii	"\007\307y\000"
 7738              		.align	2
 7739              	.LC21:
 7740 0068 07E43F00 		.ascii	"\007\344?\000"
 7741              		.section	.text.annunciators,"ax",%progbits
 7742              		.align	1
 7743              		.p2align 2,,3
 7744              		.syntax unified
 7745              		.thumb
 7746              		.thumb_func
 7747              		.fpu fpv4-sp-d16
 7749              	annunciators:
 7750              	.LFB16:
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7751              		.loc 1 609 36 is_stmt 1 view -0
 7752              		.cfi_startproc
 7753              		@ args = 0, pretend = 0, frame = 128
 7754              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 7755              		.loc 1 611 7 view .LVU2466
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7756              		.loc 1 609 36 is_stmt 0 view .LVU2467
 7757 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7758              		.cfi_def_cfa_offset 28
 7759              		.cfi_offset 4, -28
 7760              		.cfi_offset 5, -24
 7761              		.cfi_offset 6, -20
 7762              		.cfi_offset 7, -16
 7763              		.cfi_offset 8, -12
ARM GAS  /tmp/ccwSk7O0.s 			page 242


 7764              		.cfi_offset 9, -8
 7765              		.cfi_offset 14, -4
 623:src/display.c **** #  endif
 7766              		.loc 1 623 38 view .LVU2468
 7767 0004 9C4C     		ldr	r4, .L937
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7768              		.loc 1 609 36 view .LVU2469
 7769 0006 A3B0     		sub	sp, sp, #140
 7770              		.cfi_def_cfa_offset 168
 7771              	.LVL867:
 612:src/display.c ****       int n;
 7772              		.loc 1 612 7 is_stmt 1 view .LVU2470
 613:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7773              		.loc 1 613 7 view .LVU2471
 614:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7774              		.loc 1 614 7 view .LVU2472
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7775              		.loc 1 615 7 view .LVU2473
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7776              		.loc 1 615 43 is_stmt 0 view .LVU2474
 7777 0008 FFF7FEFF 		bl	cur_shift
 7778              	.LVL868:
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7779              		.loc 1 615 18 view .LVU2475
 7780 000c 9B4B     		ldr	r3, .L937+4
 623:src/display.c **** #  endif
 7781              		.loc 1 623 38 view .LVU2476
 7782 000e 2268     		ldr	r2, [r4]
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7783              		.loc 1 615 18 view .LVU2477
 7784 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7785              	.LVL869:
 623:src/display.c **** #  endif
 7786              		.loc 1 623 7 is_stmt 1 view .LVU2478
 623:src/display.c **** #  endif
 7787              		.loc 1 623 38 is_stmt 0 view .LVU2479
 7788 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7789              		.loc 1 654 7 view .LVU2480
 7790 0018 0CAE     		add	r6, sp, #48
 7791              	.LVL870:
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7792              		.loc 1 654 7 view .LVU2481
 7793 001a 2A22     		movs	r2, #42
 7794 001c 0021     		movs	r1, #0
 7795 001e 3046     		mov	r0, r6
 7796 0020 FFF7FEFF 		bl	xset
 7797              	.LVL871:
 655:src/display.c ****       
 7798              		.loc 1 655 7 view .LVU2482
 7799 0024 2A22     		movs	r2, #42
 7800 0026 17A8     		add	r0, sp, #92
 7801              	.LVL872:
 655:src/display.c ****       
 7802              		.loc 1 655 7 view .LVU2483
 7803 0028 0021     		movs	r1, #0
 7804 002a FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccwSk7O0.s 			page 243


 7805              	.LVL873:
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7806              		.loc 1 657 11 view .LVU2484
 7807 002e 2368     		ldr	r3, [r4]
 7808 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7809              		.loc 1 657 10 view .LVU2485
 7810 0034 D507     		lsls	r5, r2, #31
 623:src/display.c **** #  endif
 7811              		.loc 1 623 17 view .LVU2486
 7812 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7813              	.LVL874:
 626:src/display.c **** #  else
 7814              		.loc 1 626 7 is_stmt 1 view .LVU2487
 631:src/display.c **** #  else
 7815              		.loc 1 631 7 view .LVU2488
 641:src/display.c **** #else
 7816              		.loc 1 641 7 view .LVU2489
 649:src/display.c **** #else
 7817              		.loc 1 649 7 view .LVU2490
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7818              		.loc 1 654 7 view .LVU2491
 655:src/display.c ****       
 7819              		.loc 1 655 7 view .LVU2492
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7820              		.loc 1 657 7 view .LVU2493
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7821              		.loc 1 657 10 is_stmt 0 view .LVU2494
 7822 003a 00F13981 		bmi	.L919
 697:src/display.c **** #else
 7823              		.loc 1 697 12 is_stmt 1 view .LVU2495
 697:src/display.c **** #else
 7824              		.loc 1 697 15 is_stmt 0 view .LVU2496
 7825 003e 002F     		cmp	r7, #0
 7826 0040 55D0     		beq	.L920
 7827              	.L777:
 783:src/display.c **** 	  *p2++ = '\007';
 7828              		.loc 1 783 2 is_stmt 1 view .LVU2497
 783:src/display.c **** 	  *p2++ = '\007';
 7829              		.loc 1 783 6 is_stmt 0 view .LVU2498
 7830 0042 8F4D     		ldr	r5, .L937+8
 7831 0044 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 783:src/display.c **** 	  *p2++ = '\007';
 7832              		.loc 1 783 5 view .LVU2499
 7833 0046 9A07     		lsls	r2, r3, #30
 7834 0048 40F19981 		bpl	.L787
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7835              		.loc 1 784 4 is_stmt 1 view .LVU2500
 7836              	.LVL875:
 785:src/display.c **** 	  *p2++ = shift_char;
 7837              		.loc 1 785 4 view .LVU2501
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7838              		.loc 1 784 10 is_stmt 0 view .LVU2502
 7839 004c 4EF20742 		movw	r2, #58375
 787:src/display.c **** 	}
 7840              		.loc 1 787 10 view .LVU2503
 7841 0050 1423     		movs	r3, #20
ARM GAS  /tmp/ccwSk7O0.s 			page 244


 786:src/display.c **** 	  *p2++ = '\024';
 7842              		.loc 1 786 10 view .LVU2504
 7843 0052 8DF85E80 		strb	r8, [sp, #94]
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7844              		.loc 1 784 10 view .LVU2505
 7845 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 786:src/display.c **** 	  *p2++ = '\024';
 7846              		.loc 1 786 4 is_stmt 1 view .LVU2506
 7847              	.LVL876:
 787:src/display.c **** 	}
 7848              		.loc 1 787 4 view .LVU2507
 787:src/display.c **** 	}
 7849              		.loc 1 787 10 is_stmt 0 view .LVU2508
 7850 005a 8DF85F30 		strb	r3, [sp, #95]
 787:src/display.c **** 	}
 7851              		.loc 1 787 7 view .LVU2509
 7852 005e 0DF16008 		add	r8, sp, #96
 7853              	.LVL877:
 7854              	.L788:
 796:src/display.c **** 	  *p2++ = '\007';
 7855              		.loc 1 796 2 is_stmt 1 view .LVU2510
 796:src/display.c **** 	  *p2++ = '\007';
 7856              		.loc 1 796 6 is_stmt 0 view .LVU2511
 7857 0062 FFF7FEFF 		bl	get_trig_mode
 7858              	.LVL878:
 797:src/display.c **** 	  *p2++ = '\207';
 7859              		.loc 1 797 10 view .LVU2512
 7860 0066 0723     		movs	r3, #7
 796:src/display.c **** 	  *p2++ = '\007';
 7861              		.loc 1 796 5 view .LVU2513
 7862 0068 0228     		cmp	r0, #2
 798:src/display.c **** 	  *p2++ = '\007';	    
 7863              		.loc 1 798 10 view .LVU2514
 7864 006a 4FF08702 		mov	r2, #135
 797:src/display.c **** 	  *p2++ = '\207';
 7865              		.loc 1 797 10 view .LVU2515
 7866 006e 88F80030 		strb	r3, [r8]
 796:src/display.c **** 	  *p2++ = '\007';
 7867              		.loc 1 796 5 view .LVU2516
 7868 0072 00F03682 		beq	.L921
 802:src/display.c **** 	  *p2++ = '\207';
 7869              		.loc 1 802 4 is_stmt 1 view .LVU2517
 7870              	.LVL879:
 803:src/display.c **** 	  *p2++ = ' ';
 7871              		.loc 1 803 4 view .LVU2518
 804:src/display.c **** 	}
 7872              		.loc 1 804 10 is_stmt 0 view .LVU2519
 7873 0076 2023     		movs	r3, #32
 803:src/display.c **** 	  *p2++ = ' ';
 7874              		.loc 1 803 10 view .LVU2520
 7875 0078 88F80120 		strb	r2, [r8, #1]
 804:src/display.c **** 	}
 7876              		.loc 1 804 4 is_stmt 1 view .LVU2521
 804:src/display.c **** 	}
 7877              		.loc 1 804 10 is_stmt 0 view .LVU2522
 7878 007c 88F80230 		strb	r3, [r8, #2]
 804:src/display.c **** 	}
ARM GAS  /tmp/ccwSk7O0.s 			page 245


 7879              		.loc 1 804 7 view .LVU2523
 7880 0080 08F10308 		add	r8, r8, #3
 7881              	.LVL880:
 7882              	.L790:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7883              		.loc 1 808 2 is_stmt 1 view .LVU2524
 808:src/display.c **** 	p2 = scopy(p2, q);
 7884              		.loc 1 808 7 is_stmt 0 view .LVU2525
 7885 0084 FFF7FEFF 		bl	is_dblmode
 7886              	.LVL881:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7887              		.loc 1 808 34 view .LVU2526
 7888 0088 7E4B     		ldr	r3, .L937+12
 7889 008a 7F4A     		ldr	r2, .L937+16
 808:src/display.c **** 	p2 = scopy(p2, q);
 7890              		.loc 1 808 7 view .LVU2527
 7891 008c 0146     		mov	r1, r0
 7892              	.LVL882:
 809:src/display.c **** #else
 7893              		.loc 1 809 2 is_stmt 1 view .LVU2528
 809:src/display.c **** #else
 7894              		.loc 1 809 7 is_stmt 0 view .LVU2529
 7895 008e 0029     		cmp	r1, #0
 7896 0090 14BF     		ite	ne
 7897 0092 1146     		movne	r1, r2
 7898 0094 1946     		moveq	r1, r3
 7899              	.LVL883:
 809:src/display.c **** #else
 7900              		.loc 1 809 7 view .LVU2530
 7901 0096 4046     		mov	r0, r8
 7902 0098 FFF7FEFF 		bl	scopy
 7903              	.LVL884:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7904              		.loc 1 825 16 view .LVU2531
 7905 009c 2368     		ldr	r3, [r4]
 7906 009e 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7907 00a2 C3F30113 		ubfx	r3, r3, #4, #2
 7908              	.LVL885:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7909              		.loc 1 825 2 is_stmt 1 view .LVU2532
 7910 00a6 012B     		cmp	r3, #1
 7911 00a8 00F02282 		beq	.L843
 7912 00ac 7749     		ldr	r1, .L937+20
 7913 00ae 784A     		ldr	r2, .L937+24
 7914 00b0 022B     		cmp	r3, #2
 7915 00b2 08BF     		it	eq
 7916 00b4 1146     		moveq	r1, r2
 7917              	.L792:
 7918              	.LVL886:
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7919              		.loc 1 842 2 view .LVU2533
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7920              		.loc 1 842 6 is_stmt 0 view .LVU2534
 7921 00b6 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7922              		.loc 1 842 5 view .LVU2535
 7923 00b8 5B07     		lsls	r3, r3, #29
ARM GAS  /tmp/ccwSk7O0.s 			page 246


 843:src/display.c **** 	} // no need to skip y display with arrow here
 7924              		.loc 1 843 4 is_stmt 1 view .LVU2536
 7925 00ba 48BF     		it	mi
 7926 00bc 7549     		ldrmi	r1, .L937+28
 7927              	.LVL887:
 846:src/display.c **** 	}
 7928              		.loc 1 846 4 view .LVU2537
 846:src/display.c **** 	}
 7929              		.loc 1 846 9 is_stmt 0 view .LVU2538
 7930 00be FFF7FEFF 		bl	scopy
 7931              	.LVL888:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7932              		.loc 1 850 2 is_stmt 1 view .LVU2539
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7933              		.loc 1 850 8 is_stmt 0 view .LVU2540
 7934 00c2 2268     		ldr	r2, [r4]
 7935 00c4 92F8E437 		ldrb	r3, [r2, #2020]	@ zero_extendqisi2
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7936              		.loc 1 850 5 view .LVU2541
 7937 00c8 13F00800 		ands	r0, r3, #8
 7938 00cc 45D1     		bne	.L795
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7939              		.loc 1 850 18 discriminator 2 view .LVU2542
 7940 00ce 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
 7941 00d2 0907     		lsls	r1, r1, #28
 7942 00d4 41D4     		bmi	.L795
 860:src/display.c **** 	  q = "\007\307<";
 7943              		.loc 1 860 7 is_stmt 1 view .LVU2543
 860:src/display.c **** 	  q = "\007\307<";
 7944              		.loc 1 860 22 is_stmt 0 view .LVU2544
 7945 00d6 DFF8CC91 		ldr	r9, .L937+44
 860:src/display.c **** 	  q = "\007\307<";
 7946              		.loc 1 860 10 view .LVU2545
 7947 00da D9F80010 		ldr	r1, [r9]
 7948 00de 0129     		cmp	r1, #1
 7949 00e0 00F00882 		beq	.L801
 860:src/display.c **** 	  q = "\007\307<";
 7950              		.loc 1 860 43 discriminator 1 view .LVU2546
 7951 00e4 5B07     		lsls	r3, r3, #29
 7952 00e6 42D5     		bpl	.L802
 7953 00e8 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7954 00ec 62E1     		b	.L834
 7955              	.LVL889:
 7956              	.L920:
 697:src/display.c **** #else
 7957              		.loc 1 697 36 discriminator 1 view .LVU2547
 7958 00ee 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 697:src/display.c **** #else
 7959              		.loc 1 697 32 discriminator 1 view .LVU2548
 7960 00f2 5007     		lsls	r0, r2, #29
 7961 00f4 00F14C81 		bmi	.L922
 7962              	.L778:
 718:src/display.c **** 	    *p2++ = shift_char;
 7963              		.loc 1 718 4 is_stmt 1 view .LVU2549
 718:src/display.c **** 	    *p2++ = shift_char;
 7964              		.loc 1 718 7 is_stmt 0 view .LVU2550
 7965 00f8 B8F1200F 		cmp	r8, #32
ARM GAS  /tmp/ccwSk7O0.s 			page 247


 7966 00fc 00F03582 		beq	.L779
 7967              	.L781:
 719:src/display.c **** 	    *p2++ = '\006';
 7968              		.loc 1 719 6 is_stmt 1 view .LVU2551
 7969              	.LVL890:
 720:src/display.c **** 	  }
 7970              		.loc 1 720 12 is_stmt 0 view .LVU2552
 7971 0100 0623     		movs	r3, #6
 719:src/display.c **** 	    *p2++ = '\006';
 7972              		.loc 1 719 12 view .LVU2553
 7973 0102 8DF85C80 		strb	r8, [sp, #92]
 720:src/display.c **** 	  }
 7974              		.loc 1 720 6 is_stmt 1 view .LVU2554
 7975              	.LVL891:
 720:src/display.c **** 	  }
 7976              		.loc 1 720 12 is_stmt 0 view .LVU2555
 7977 0106 8DF85D30 		strb	r3, [sp, #93]
 720:src/display.c **** 	  }
 7978              		.loc 1 720 9 view .LVU2556
 7979 010a 0DF15E00 		add	r0, sp, #94
 7980              	.LVL892:
 7981              	.L780:
 726:src/display.c **** 	  *p2++ = ' ';
 7982              		.loc 1 726 2 is_stmt 1 view .LVU2557
 726:src/display.c **** 	  *p2++ = ' ';
 7983              		.loc 1 726 6 is_stmt 0 view .LVU2558
 7984 010e 5C4D     		ldr	r5, .L937+8
 7985 0110 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 726:src/display.c **** 	  *p2++ = ' ';
 7986              		.loc 1 726 5 view .LVU2559
 7987 0112 9A07     		lsls	r2, r3, #30
 7988 0114 00F16281 		bmi	.L923
 731:src/display.c **** 	  *p2++ = ' ';
 7989              		.loc 1 731 2 is_stmt 1 view .LVU2560
 731:src/display.c **** 	  *p2++ = ' ';
 7990              		.loc 1 731 5 is_stmt 0 view .LVU2561
 7991 0118 5907     		lsls	r1, r3, #29
 7992 011a 00F11482 		bmi	.L924
 737:src/display.c **** 	  if (State2.wascomplex) {
 7993              		.loc 1 737 2 is_stmt 1 view .LVU2562
 737:src/display.c **** 	  if (State2.wascomplex) {
 7994              		.loc 1 737 5 is_stmt 0 view .LVU2563
 7995 011e B8F1200F 		cmp	r8, #32
 7996 0122 00F02D82 		beq	.L925
 7997              	.L784:
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7998              		.loc 1 754 2 is_stmt 1 view .LVU2564
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7999              		.loc 1 754 16 is_stmt 0 view .LVU2565
 8000 0126 2368     		ldr	r3, [r4]
 8001 0128 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 8002 012c C3F30113 		ubfx	r3, r3, #4, #2
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8003              		.loc 1 754 2 view .LVU2566
 8004 0130 012B     		cmp	r3, #1
 8005 0132 00F03882 		beq	.L840
 8006 0136 5549     		ldr	r1, .L937+20
ARM GAS  /tmp/ccwSk7O0.s 			page 248


 8007 0138 554A     		ldr	r2, .L937+24
 8008 013a 022B     		cmp	r3, #2
 8009 013c 08BF     		it	eq
 8010 013e 1146     		moveq	r1, r2
 8011              	.L786:
 8012              	.LVL893:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8013              		.loc 1 768 2 is_stmt 1 view .LVU2567
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8014              		.loc 1 768 7 is_stmt 0 view .LVU2568
 8015 0140 FFF7FEFF 		bl	scopy
 8016              	.LVL894:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8017              		.loc 1 768 7 view .LVU2569
 8018 0144 0446     		mov	r4, r0
 8019              	.LVL895:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8020              		.loc 1 770 2 is_stmt 1 view .LVU2570
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8021              		.loc 1 770 6 is_stmt 0 view .LVU2571
 8022 0146 FFF7FEFF 		bl	get_trig_mode
 8023              	.LVL896:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8024              		.loc 1 770 5 view .LVU2572
 8025 014a 0228     		cmp	r0, #2
 8026 014c 40F00581 		bne	.L776
 771:src/display.c **** 	}
 8027              		.loc 1 771 4 is_stmt 1 view .LVU2573
 8028 0150 5149     		ldr	r1, .L937+32
 8029 0152 2046     		mov	r0, r4
 8030 0154 FFF7FEFF 		bl	scopy
 8031              	.LVL897:
 8032 0158 FFE0     		b	.L776
 8033              	.LVL898:
 8034              	.L795:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 8035              		.loc 1 850 32 is_stmt 0 discriminator 3 view .LVU2574
 8036 015a 5B07     		lsls	r3, r3, #29
 8037 015c 00F11E81 		bmi	.L926
 860:src/display.c **** 	  q = "\007\307<";
 8038              		.loc 1 860 7 is_stmt 1 view .LVU2575
 860:src/display.c **** 	  q = "\007\307<";
 8039              		.loc 1 860 22 is_stmt 0 view .LVU2576
 8040 0160 DFF84091 		ldr	r9, .L937+44
 860:src/display.c **** 	  q = "\007\307<";
 8041              		.loc 1 860 10 view .LVU2577
 8042 0164 D9F80030 		ldr	r3, [r9]
 8043 0168 012B     		cmp	r3, #1
 8044 016a 00F0C381 		beq	.L801
 8045              	.L802:
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8046              		.loc 1 864 7 is_stmt 1 view .LVU2578
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8047              		.loc 1 864 11 is_stmt 0 view .LVU2579
 8048 016e 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8049              		.loc 1 864 10 view .LVU2580
ARM GAS  /tmp/ccwSk7O0.s 			page 249


 8050 0170 13F0C00F 		tst	r3, #192
 8051 0174 00F02B81 		beq	.L851
 8052 0178 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 8053              	.L832:
 865:src/display.c **** 	  p = scopy(p, q);
 8054              		.loc 1 865 4 is_stmt 1 view .LVU2581
 865:src/display.c **** 	  p = scopy(p, q);
 8055              		.loc 1 865 28 is_stmt 0 view .LVU2582
 8056 017c 474A     		ldr	r2, .L937+36
 8057 017e 4849     		ldr	r1, .L937+40
 8058 0180 13F0020F 		tst	r3, #2
 8059              	.LVL899:
 866:src/display.c **** 	}
 8060              		.loc 1 866 4 is_stmt 1 view .LVU2583
 866:src/display.c **** 	}
 8061              		.loc 1 866 8 is_stmt 0 view .LVU2584
 8062 0184 08BF     		it	eq
 8063 0186 1146     		moveq	r1, r2
 8064              	.LVL900:
 866:src/display.c **** 	}
 8065              		.loc 1 866 8 view .LVU2585
 8066 0188 3046     		mov	r0, r6
 8067 018a FFF7FEFF 		bl	scopy
 8068              	.LVL901:
 866:src/display.c **** 	}
 8069              		.loc 1 866 8 view .LVU2586
 8070 018e 8046     		mov	r8, r0
 8071              	.LVL902:
 8072              	.L804:
 882:src/display.c **** 	    q = "\007\307y";
 8073              		.loc 1 882 4 is_stmt 1 view .LVU2587
 882:src/display.c **** 	    q = "\007\307y";
 8074              		.loc 1 882 7 is_stmt 0 view .LVU2588
 8075 0190 D9F80030 		ldr	r3, [r9]
 8076 0194 022B     		cmp	r3, #2
 8077 0196 00F0C981 		beq	.L927
 8078              	.L806:
 888:src/display.c **** 	  decNumber y;
 8079              		.loc 1 888 2 is_stmt 1 view .LVU2589
 888:src/display.c **** 	  decNumber y;
 8080              		.loc 1 888 6 is_stmt 0 view .LVU2590
 8081 019a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 888:src/display.c **** 	  decNumber y;
 8082              		.loc 1 888 5 view .LVU2591
 8083 019c 5806     		lsls	r0, r3, #25
 8084 019e 40F1DF80 		bpl	.L829
 8085              	.L766:
 8086              	.LBB462:
 889:src/display.c **** 	display_yreg:
 8087              		.loc 1 889 4 is_stmt 1 view .LVU2592
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8088              		.loc 1 896 4 view .LVU2593
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8089              		.loc 1 896 8 is_stmt 0 view .LVU2594
 8090 01a2 2368     		ldr	r3, [r4]
 8091 01a4 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
ARM GAS  /tmp/ccwSk7O0.s 			page 250


 8092              		.loc 1 896 7 view .LVU2595
 8093 01a8 D107     		lsls	r1, r2, #31
 8094 01aa 00F1C581 		bmi	.L928
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8095              		.loc 1 901 4 is_stmt 1 view .LVU2596
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8096              		.loc 1 901 9 is_stmt 0 view .LVU2597
 8097 01ae 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8098              		.loc 1 901 7 view .LVU2598
 8099 01b2 5207     		lsls	r2, r2, #29
 8100 01b4 06D5     		bpl	.L810
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8101              		.loc 1 901 35 discriminator 1 view .LVU2599
 8102 01b6 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 8103 01ba 03F01C03 		and	r3, r3, #28
 8104 01be 0C2B     		cmp	r3, #12
 8105 01c0 00F0F381 		beq	.L929
 8106              	.L810:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8107              		.loc 1 905 6 is_stmt 1 view .LVU2600
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8108              		.loc 1 905 36 is_stmt 0 view .LVU2601
 8109 01c4 DFF8E090 		ldr	r9, .L937+48
 8110 01c8 D9F80010 		ldr	r1, [r9]
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8111              		.loc 1 905 6 view .LVU2602
 8112 01cc 6329     		cmp	r1, #99
 8113 01ce 00F39781 		bgt	.L930
 8114              	.LVL903:
 8115              	.L812:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8116              		.loc 1 905 6 discriminator 3 view .LVU2603
 8117 01d2 0131     		adds	r1, r1, #1
 8118              	.L816:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8119              		.loc 1 905 6 discriminator 4 view .LVU2604
 8120 01d4 03AF     		add	r7, sp, #12
 8121 01d6 3846     		mov	r0, r7
 8122 01d8 FFF7FEFF 		bl	getRegister
 8123              	.LVL904:
 8124              	.L811:
 915:src/display.c **** #ifdef INCLUDE_C_LOCK
 8125              		.loc 1 915 4 is_stmt 1 view .LVU2605
 915:src/display.c **** #ifdef INCLUDE_C_LOCK
 8126              		.loc 1 915 7 is_stmt 0 view .LVU2606
 8127 01dc 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8128 01e0 13F0700F 		tst	r3, #112
 8129 01e4 40F05381 		bne	.L818
 917:src/display.c **** #else
 8130              		.loc 1 917 6 is_stmt 1 view .LVU2607
 917:src/display.c **** #else
 8131              		.loc 1 917 19 is_stmt 0 view .LVU2608
 8132 01e8 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 917:src/display.c **** #else
 8133              		.loc 1 917 9 view .LVU2609
 8134 01ea 13F0010F 		tst	r3, #1
ARM GAS  /tmp/ccwSk7O0.s 			page 251


 917:src/display.c **** #else
 8135              		.loc 1 917 39 view .LVU2610
 8136 01ee 2368     		ldr	r3, [r4]
 917:src/display.c **** #else
 8137              		.loc 1 917 9 view .LVU2611
 8138 01f0 00F00C81 		beq	.L821
 917:src/display.c **** #else
 8139              		.loc 1 917 39 discriminator 1 view .LVU2612
 8140 01f4 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 917:src/display.c **** #else
 8141              		.loc 1 917 33 discriminator 1 view .LVU2613
 8142 01f8 5007     		lsls	r0, r2, #29
 8143 01fa 0CD5     		bpl	.L820
 917:src/display.c **** #else
 8144              		.loc 1 917 39 discriminator 2 view .LVU2614
 8145 01fc 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 917:src/display.c **** #else
 8146              		.loc 1 917 38 discriminator 2 view .LVU2615
 8147 0200 5107     		lsls	r1, r2, #29
 8148 0202 08D5     		bpl	.L820
 917:src/display.c **** #else
 8149              		.loc 1 917 62 discriminator 5 view .LVU2616
 8150 0204 1207     		lsls	r2, r2, #28
 8151 0206 40F10181 		bpl	.L821
 917:src/display.c **** #else
 8152              		.loc 1 917 119 discriminator 6 view .LVU2617
 8153 020a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 917:src/display.c **** #else
 8154              		.loc 1 917 80 discriminator 6 view .LVU2618
 8155 020e 12F0C00F 		tst	r2, #192
 8156 0212 40F0FB80 		bne	.L821
 8157              	.L820:
 8158              	.LBB463:
 921:src/display.c **** 
 8159              		.loc 1 921 8 is_stmt 1 view .LVU2619
 923:src/display.c **** 	      UState.nothousands = 1;
 8160              		.loc 1 923 8 is_stmt 0 view .LVU2620
 8161 0216 2A22     		movs	r2, #42
 8162 0218 0021     		movs	r1, #0
 8163 021a 3046     		mov	r0, r6
 921:src/display.c **** 
 8164              		.loc 1 921 44 view .LVU2621
 8165 021c 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 8166 0220 DFF88880 		ldr	r8, .L937+52
 8167              	.LVL905:
 923:src/display.c **** 	      UState.nothousands = 1;
 8168              		.loc 1 923 8 view .LVU2622
 8169 0224 FFF7FEFF 		bl	xset
 8170              	.LVL906:
 924:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8171              		.loc 1 924 27 view .LVU2623
 8172 0228 2268     		ldr	r2, [r4]
 8173 022a 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8174 022e 43F04003 		orr	r3, r3, #64
 8175 0232 82F8E737 		strb	r3, [r2, #2023]
 925:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8176              		.loc 1 925 8 view .LVU2624
ARM GAS  /tmp/ccwSk7O0.s 			page 252


 8177 0236 3146     		mov	r1, r6
 8178 0238 3846     		mov	r0, r7
 8179 023a FFF7FEFF 		bl	set_x_hms
 8180              	.LVL907:
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8181              		.loc 1 926 27 view .LVU2625
 8182 023e 2368     		ldr	r3, [r4]
 8183 0240 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 921:src/display.c **** 
 8184              		.loc 1 921 44 view .LVU2626
 8185 0244 C9F38019 		ubfx	r9, r9, #6, #1
 8186              	.LVL908:
 923:src/display.c **** 	      UState.nothousands = 1;
 8187              		.loc 1 923 8 is_stmt 1 view .LVU2627
 924:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8188              		.loc 1 924 8 view .LVU2628
 925:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8189              		.loc 1 925 8 view .LVU2629
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8190              		.loc 1 926 8 view .LVU2630
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8191              		.loc 1 926 27 is_stmt 0 view .LVU2631
 8192 0248 69F38612 		bfi	r2, r9, #6, #1
 8193 024c 83F8E727 		strb	r2, [r3, #2023]
 931:src/display.c **** 	      while (*p) {
 8194              		.loc 1 931 8 is_stmt 1 view .LVU2632
 8195              	.LVL909:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8196              		.loc 1 932 8 view .LVU2633
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8197              		.loc 1 932 14 view .LVU2634
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8198              		.loc 1 932 15 is_stmt 0 view .LVU2635
 8199 0250 4021     		movs	r1, #64
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8200              		.loc 1 926 27 view .LVU2636
 8201 0252 0522     		movs	r2, #5
 8202 0254 05E0     		b	.L823
 8203              	.LVL910:
 8204              	.L931:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8205              		.loc 1 932 15 view .LVU2637
 8206 0256 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8207              	.LVL911:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8208              		.loc 1 932 14 view .LVU2638
 8209 025a 0029     		cmp	r1, #0
 8210 025c 7DD0     		beq	.L776
 8211 025e 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8212              	.LVL912:
 8213              	.L823:
 933:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8214              		.loc 1 933 3 is_stmt 1 view .LVU2639
 8215 0262 3046     		mov	r0, r6
 8216 0264 FFF7FEFF 		bl	replace_char
 8217              	.LVL913:
 934:src/display.c **** 		  goto skip;
ARM GAS  /tmp/ccwSk7O0.s 			page 253


 8218              		.loc 1 934 3 view .LVU2640
 934:src/display.c **** 		  goto skip;
 8219              		.loc 1 934 7 is_stmt 0 view .LVU2641
 8220 0268 0121     		movs	r1, #1
 8221 026a 3046     		mov	r0, r6
 8222 026c FFF7FEFF 		bl	pixel_length
 8223              	.LVL914:
 937:src/display.c **** 	      }
 8224              		.loc 1 937 3 is_stmt 1 view .LVU2642
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8225              		.loc 1 932 14 view .LVU2643
 934:src/display.c **** 		  goto skip;
 8226              		.loc 1 934 6 is_stmt 0 view .LVU2644
 8227 0270 2C28     		cmp	r0, #44
 8228 0272 F0DC     		bgt	.L931
 8229 0274 71E0     		b	.L776
 8230              	.L938:
 8231 0276 00BF     		.align	2
 8232              	.L937:
 8233 0278 00000000 		.word	main_ram
 8234 027c 00000000 		.word	.LANCHOR15
 8235 0280 00000000 		.word	StateWhileOn
 8236 0284 28000000 		.word	.LC10
 8237 0288 24000000 		.word	.LC9
 8238 028c 10000000 		.word	.LC6
 8239 0290 1C000000 		.word	.LC8
 8240 0294 58000000 		.word	.LC17
 8241 0298 50000000 		.word	.LC16
 8242 029c 08000000 		.word	.LC4
 8243 02a0 4C000000 		.word	.LC15
 8244 02a4 00000000 		.word	RectPolConv
 8245 02a8 00000000 		.word	ShowRegister
 8246 02ac 00000000 		.word	.LANCHOR17
 8247              	.LVL915:
 8248              	.L919:
 934:src/display.c **** 		  goto skip;
 8249              		.loc 1 934 6 view .LVU2645
 8250              	.LBE463:
 8251              	.LBE462:
 667:src/display.c **** 	    *p2++ = '\006';
 8252              		.loc 1 667 6 is_stmt 1 view .LVU2646
 668:src/display.c **** 	  }
 8253              		.loc 1 668 12 is_stmt 0 view .LVU2647
 8254 02b0 0623     		movs	r3, #6
 8255 02b2 8DF85D30 		strb	r3, [sp, #93]
 667:src/display.c **** 	    *p2++ = '\006';
 8256              		.loc 1 667 12 view .LVU2648
 8257 02b6 8DF85C80 		strb	r8, [sp, #92]
 668:src/display.c **** 	  }
 8258              		.loc 1 668 6 is_stmt 1 view .LVU2649
 8259              	.LVL916:
 671:src/display.c **** 	default:
 8260              		.loc 1 671 2 view .LVU2650
 671:src/display.c **** 	default:
 8261              		.loc 1 671 9 is_stmt 0 view .LVU2651
 8262 02ba FFF7FEFF 		bl	int_mode
 8263              	.LVL917:
ARM GAS  /tmp/ccwSk7O0.s 			page 254


 8264 02be 0138     		subs	r0, r0, #1
 8265 02c0 C0B2     		uxtb	r0, r0
 8266 02c2 0228     		cmp	r0, #2
 8267 02c4 96BF     		itet	ls
 8268 02c6 BC4B     		ldrls	r3, .L939
 8269 02c8 BC49     		ldrhi	r1, .L939+4
 8270 02ca 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8271              	.LVL918:
 678:src/display.c **** 	*q++ = '\006';
 8272              		.loc 1 678 2 is_stmt 1 view .LVU2652
 678:src/display.c **** 	*q++ = '\006';
 8273              		.loc 1 678 6 is_stmt 0 view .LVU2653
 8274 02ce 0DF15E00 		add	r0, sp, #94
 8275              	.LVL919:
 678:src/display.c **** 	*q++ = '\006';
 8276              		.loc 1 678 6 view .LVU2654
 8277 02d2 FFF7FEFF 		bl	scopy
 8278              	.LVL920:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8279              		.loc 1 679 7 view .LVU2655
 8280 02d6 8046     		mov	r8, r0
 8281              	.LVL921:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8282              		.loc 1 679 7 view .LVU2656
 8283 02d8 0623     		movs	r3, #6
 8284 02da 08F8013B 		strb	r3, [r8], #1
 678:src/display.c **** 	*q++ = '\006';
 8285              		.loc 1 678 6 view .LVU2657
 8286 02de 0546     		mov	r5, r0
 8287              	.LVL922:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8288              		.loc 1 679 2 is_stmt 1 view .LVU2658
 680:src/display.c **** 
 8289              		.loc 1 680 2 view .LVU2659
 680:src/display.c **** 
 8290              		.loc 1 680 7 is_stmt 0 view .LVU2660
 8291 02e0 FFF7FEFF 		bl	word_size
 8292              	.LVL923:
 8293 02e4 0222     		movs	r2, #2
 8294 02e6 0146     		mov	r1, r0
 8295 02e8 4046     		mov	r0, r8
 8296 02ea FFF7FEFF 		bl	num_arg_0
 8297              	.LVL924:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8298              		.loc 1 682 19 view .LVU2661
 8299 02ee DFF804C3 		ldr	ip, .L939+60
 8300 02f2 DCF80030 		ldr	r3, [ip]
 8301              	.LVL925:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8302              		.loc 1 682 2 is_stmt 1 view .LVU2662
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8303              		.loc 1 682 5 is_stmt 0 view .LVU2663
 8304 02f6 002B     		cmp	r3, #0
 8305 02f8 6BDD     		ble	.L917
 683:src/display.c **** 	  if (*q == '1')
 8306              		.loc 1 683 4 is_stmt 1 view .LVU2664
 683:src/display.c **** 	  if (*q == '1')
ARM GAS  /tmp/ccwSk7O0.s 			page 255


 8307              		.loc 1 683 10 is_stmt 0 view .LVU2665
 8308 02fa C3F10702 		rsb	r2, r3, #7
 8309 02fe 5200     		lsls	r2, r2, #1
 683:src/display.c **** 	  if (*q == '1')
 8310              		.loc 1 683 6 view .LVU2666
 8311 0300 0292     		str	r2, [sp, #8]
 684:src/display.c **** 	    n += 2;
 8312              		.loc 1 684 4 is_stmt 1 view .LVU2667
 684:src/display.c **** 	    n += 2;
 8313              		.loc 1 684 7 is_stmt 0 view .LVU2668
 8314 0302 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8315 0304 3129     		cmp	r1, #49
 685:src/display.c **** 	  if (q[1] == '1')
 8316              		.loc 1 685 6 is_stmt 1 view .LVU2669
 685:src/display.c **** 	  if (q[1] == '1')
 8317              		.loc 1 685 8 is_stmt 0 view .LVU2670
 8318 0306 04BF     		itt	eq
 8319 0308 0232     		addeq	r2, r2, #2
 8320 030a 0292     		streq	r2, [sp, #8]
 686:src/display.c **** 	    n += 2;
 8321              		.loc 1 686 4 is_stmt 1 view .LVU2671
 686:src/display.c **** 	    n += 2;
 8322              		.loc 1 686 7 is_stmt 0 view .LVU2672
 8323 030c A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8324 030e 3129     		cmp	r1, #49
 8325 0310 00D1     		bne	.L769
 687:src/display.c **** 	  while (n-- > 0)
 8326              		.loc 1 687 6 is_stmt 1 view .LVU2673
 687:src/display.c **** 	  while (n-- > 0)
 8327              		.loc 1 687 8 is_stmt 0 view .LVU2674
 8328 0312 0232     		adds	r2, r2, #2
 8329              	.L769:
 688:src/display.c **** 	    *p2++ = '\006';
 8330              		.loc 1 688 10 is_stmt 1 view .LVU2675
 688:src/display.c **** 	    *p2++ = '\006';
 8331              		.loc 1 688 12 is_stmt 0 view .LVU2676
 8332 0314 511E     		subs	r1, r2, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8333              		.loc 1 688 10 view .LVU2677
 8334 0316 002A     		cmp	r2, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8335              		.loc 1 688 12 view .LVU2678
 8336 0318 0291     		str	r1, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8337              		.loc 1 688 10 view .LVU2679
 8338 031a 40F36D81 		ble	.L915
 689:src/display.c **** 
 8339              		.loc 1 689 12 view .LVU2680
 8340 031e 0621     		movs	r1, #6
 8341              	.L770:
 689:src/display.c **** 
 8342              		.loc 1 689 6 is_stmt 1 view .LVU2681
 8343              	.LVL926:
 689:src/display.c **** 
 8344              		.loc 1 689 12 is_stmt 0 view .LVU2682
 8345 0320 00F8011B 		strb	r1, [r0], #1
 8346              	.LVL927:
ARM GAS  /tmp/ccwSk7O0.s 			page 256


 688:src/display.c **** 	    *p2++ = '\006';
 8347              		.loc 1 688 10 is_stmt 1 view .LVU2683
 688:src/display.c **** 	    *p2++ = '\006';
 8348              		.loc 1 688 12 is_stmt 0 view .LVU2684
 8349 0324 029B     		ldr	r3, [sp, #8]
 8350 0326 5A1E     		subs	r2, r3, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8351              		.loc 1 688 10 view .LVU2685
 8352 0328 002B     		cmp	r3, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8353              		.loc 1 688 12 view .LVU2686
 8354 032a 0292     		str	r2, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8355              		.loc 1 688 10 view .LVU2687
 8356 032c F8DC     		bgt	.L770
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8357              		.loc 1 691 4 is_stmt 1 view .LVU2688
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8358              		.loc 1 691 11 is_stmt 0 view .LVU2689
 8359 032e DCF80030 		ldr	r3, [ip]
 8360 0332 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8361              		.loc 1 691 27 is_stmt 1 view .LVU2690
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8362              		.loc 1 691 4 is_stmt 0 view .LVU2691
 8363 0334 002B     		cmp	r3, #0
 8364 0336 4CDB     		blt	.L917
 8365              	.L833:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8366              		.loc 1 691 4 view .LVU2692
 8367 0338 A14D     		ldr	r5, .L939+8
 8368              	.L775:
 692:src/display.c **** 	}
 8369              		.loc 1 692 6 is_stmt 1 view .LVU2693
 692:src/display.c **** 	}
 8370              		.loc 1 692 20 is_stmt 0 view .LVU2694
 8371 033a 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8372 033c C2F3C202 		ubfx	r2, r2, #3, #3
 692:src/display.c **** 	}
 8373              		.loc 1 692 12 view .LVU2695
 8374 0340 9A42     		cmp	r2, r3
 8375 0342 0CBF     		ite	eq
 8376 0344 7C23     		moveq	r3, #124
 8377 0346 2723     		movne	r3, #39
 8378              	.LVL928:
 692:src/display.c **** 	}
 8379              		.loc 1 692 12 view .LVU2696
 8380 0348 00F8013B 		strb	r3, [r0], #1
 8381              	.LVL929:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8382              		.loc 1 691 35 is_stmt 1 view .LVU2697
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8383              		.loc 1 691 36 is_stmt 0 view .LVU2698
 8384 034c 029B     		ldr	r3, [sp, #8]
 8385 034e 013B     		subs	r3, r3, #1
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8386              		.loc 1 691 4 view .LVU2699
ARM GAS  /tmp/ccwSk7O0.s 			page 257


 8387 0350 002B     		cmp	r3, #0
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8388              		.loc 1 691 36 view .LVU2700
 8389 0352 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8390              		.loc 1 691 27 is_stmt 1 view .LVU2701
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8391              		.loc 1 691 4 is_stmt 0 view .LVU2702
 8392 0354 F1DA     		bge	.L775
 694:src/display.c ****       }
 8393              		.loc 1 694 2 is_stmt 1 view .LVU2703
 694:src/display.c ****       }
 8394              		.loc 1 694 5 is_stmt 0 view .LVU2704
 8395 0356 002F     		cmp	r7, #0
 8396 0358 3ED1     		bne	.L932
 8397              	.LVL930:
 8398              	.L776:
 987:src/display.c ****       set_status_top_always(buf2);
 8399              		.loc 1 987 7 is_stmt 1 view .LVU2705
 987:src/display.c ****       set_status_top_always(buf2);
 8400              		.loc 1 987 11 is_stmt 0 view .LVU2706
 8401 035a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 987:src/display.c ****       set_status_top_always(buf2);
 8402              		.loc 1 987 10 view .LVU2707
 8403 035c 5906     		lsls	r1, r3, #25
 8404 035e 4BD4     		bmi	.L933
 8405              	.L829:
 8406              	.LBB469:
 8407              	.LBB470:
3649:src/display.c ****       }
 8408              		.loc 1 3649 2 is_stmt 1 view .LVU2708
 8409 0360 1B06     		lsls	r3, r3, #24
 8410 0362 40D5     		bpl	.L934
 8411 0364 0121     		movs	r1, #1
 8412              	.L831:
 8413              	.LVL931:
 8414              	.LBB471:
 8415              	.LBI471:
3479:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8416              		.loc 1 3479 19 view .LVU2709
 8417              	.LBB472:
3480:src/display.c ****       }
 8418              		.loc 1 3480 2 view .LVU2710
 8419 0366 4FF45373 		mov	r3, #844
 8420 036a 0093     		str	r3, [sp]
 8421 036c 17A8     		add	r0, sp, #92
 8422              	.LVL932:
3480:src/display.c ****       }
 8423              		.loc 1 3480 2 is_stmt 0 view .LVU2711
 8424 036e 40F24A23 		movw	r3, #586
 8425 0372 2B22     		movs	r2, #43
 8426 0374 FFF7FEFF 		bl	s_s_sized
 8427              	.LVL933:
3480:src/display.c ****       }
 8428              		.loc 1 3480 2 view .LVU2712
 8429              	.LBE472:
 8430              	.LBE471:
ARM GAS  /tmp/ccwSk7O0.s 			page 258


 8431              	.LBE470:
 8432              	.LBE469:
 990:src/display.c **** #else
 8433              		.loc 1 990 5 view .LVU2713
 8434 0378 23B0     		add	sp, sp, #140
 8435              		.cfi_remember_state
 8436              		.cfi_def_cfa_offset 28
 8437              		@ sp needed
 8438 037a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8439              	.LVL934:
 8440              	.L787:
 8441              		.cfi_restore_state
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8442              		.loc 1 790 4 is_stmt 1 view .LVU2714
 791:src/display.c **** 	  *p2++ = shift_char;
 8443              		.loc 1 791 4 view .LVU2715
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8444              		.loc 1 790 10 is_stmt 0 view .LVU2716
 8445 037e 4CF20773 		movw	r3, #50951
 792:src/display.c **** 	}
 8446              		.loc 1 792 10 view .LVU2717
 8447 0382 8DF85E80 		strb	r8, [sp, #94]
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8448              		.loc 1 790 10 view .LVU2718
 8449 0386 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 792:src/display.c **** 	}
 8450              		.loc 1 792 4 is_stmt 1 view .LVU2719
 8451              	.LVL935:
 792:src/display.c **** 	}
 8452              		.loc 1 792 7 is_stmt 0 view .LVU2720
 8453 038a 0DF15F08 		add	r8, sp, #95
 8454              	.LVL936:
 792:src/display.c **** 	}
 8455              		.loc 1 792 7 view .LVU2721
 8456 038e 68E6     		b	.L788
 8457              	.LVL937:
 8458              	.L922:
 697:src/display.c **** #else
 8459              		.loc 1 697 36 discriminator 2 view .LVU2722
 8460 0390 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 697:src/display.c **** #else
 8461              		.loc 1 697 35 discriminator 2 view .LVU2723
 8462 0394 5907     		lsls	r1, r3, #29
 8463 0396 3FF554AE 		bmi	.L777
 8464 039a ADE6     		b	.L778
 8465              	.LVL938:
 8466              	.L926:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 8467              		.loc 1 850 35 discriminator 4 view .LVU2724
 8468 039c 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 8469 03a0 5907     		lsls	r1, r3, #29
 8470 03a2 00F1D580 		bmi	.L935
 860:src/display.c **** 	  q = "\007\307<";
 8471              		.loc 1 860 7 is_stmt 1 view .LVU2725
 860:src/display.c **** 	  q = "\007\307<";
 8472              		.loc 1 860 22 is_stmt 0 view .LVU2726
 8473 03a6 DFF82092 		ldr	r9, .L939+16
ARM GAS  /tmp/ccwSk7O0.s 			page 259


 860:src/display.c **** 	  q = "\007\307<";
 8474              		.loc 1 860 10 view .LVU2727
 8475 03aa D9F80020 		ldr	r2, [r9]
 8476 03ae 012A     		cmp	r2, #1
 8477 03b0 00F0A080 		beq	.L801
 8478              	.L834:
 860:src/display.c **** 	  q = "\007\307<";
 8479              		.loc 1 860 56 discriminator 2 view .LVU2728
 8480 03b4 03F00C02 		and	r2, r3, #12
 8481 03b8 0C2A     		cmp	r2, #12
 8482 03ba 00F09B80 		beq	.L801
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8483              		.loc 1 864 7 is_stmt 1 view .LVU2729
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8484              		.loc 1 864 11 is_stmt 0 view .LVU2730
 8485 03be 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8486              		.loc 1 864 32 view .LVU2731
 8487 03c0 03F00402 		and	r2, r3, #4
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8488              		.loc 1 864 11 view .LVU2732
 8489 03c4 21F03F01 		bic	r1, r1, #63
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8490              		.loc 1 864 32 view .LVU2733
 8491 03c8 0A43     		orrs	r2, r1, r2
 8492 03ca 7FF4D7AE 		bne	.L832
 8493              	.L851:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8494              		.loc 1 611 22 view .LVU2734
 8495 03ce B046     		mov	r8, r6
 8496 03d0 DEE6     		b	.L804
 8497              	.LVL939:
 8498              	.L917:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8499              		.loc 1 611 22 view .LVU2735
 8500 03d2 7B4D     		ldr	r5, .L939+8
 694:src/display.c ****       }
 8501              		.loc 1 694 2 is_stmt 1 view .LVU2736
 694:src/display.c ****       }
 8502              		.loc 1 694 5 is_stmt 0 view .LVU2737
 8503 03d4 002F     		cmp	r7, #0
 8504 03d6 C0D0     		beq	.L776
 8505              	.L932:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8506              		.loc 1 611 22 view .LVU2738
 8507 03d8 B046     		mov	r8, r6
 8508              	.LVL940:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8509              		.loc 1 611 22 view .LVU2739
 8510 03da E2E6     		b	.L766
 8511              	.LVL941:
 8512              	.L923:
 727:src/display.c **** 	  *p2 = '\024';
 8513              		.loc 1 727 4 is_stmt 1 view .LVU2740
 727:src/display.c **** 	  *p2 = '\024';
 8514              		.loc 1 727 10 is_stmt 0 view .LVU2741
 8515 03dc 2022     		movs	r2, #32
ARM GAS  /tmp/ccwSk7O0.s 			page 260


 728:src/display.c **** 	  goto skip;
 8516              		.loc 1 728 8 view .LVU2742
 8517 03de 1423     		movs	r3, #20
 727:src/display.c **** 	  *p2 = '\024';
 8518              		.loc 1 727 10 view .LVU2743
 8519 03e0 0270     		strb	r2, [r0]
 728:src/display.c **** 	  goto skip;
 8520              		.loc 1 728 4 is_stmt 1 view .LVU2744
 728:src/display.c **** 	  goto skip;
 8521              		.loc 1 728 8 is_stmt 0 view .LVU2745
 8522 03e2 4370     		strb	r3, [r0, #1]
 729:src/display.c **** 	}
 8523              		.loc 1 729 4 is_stmt 1 view .LVU2746
 8524 03e4 B9E7     		b	.L776
 8525              	.LVL942:
 8526              	.L934:
 8527              	.LBB478:
 8528              	.LBB475:
 8529              	.LBB473:
 8530              	.LBI473:
3627:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8531              		.loc 1 3627 18 view .LVU2747
 8532              	.LBB474:
3628:src/display.c ****       }
 8533              		.loc 1 3628 2 view .LVU2748
3628:src/display.c ****       }
 8534              		.loc 1 3628 9 is_stmt 0 view .LVU2749
 8535 03e6 0021     		movs	r1, #0
 8536 03e8 17A8     		add	r0, sp, #92
 8537              	.LVL943:
3628:src/display.c ****       }
 8538              		.loc 1 3628 9 view .LVU2750
 8539 03ea FFF7FEFF 		bl	pixel_length
 8540              	.LVL944:
3628:src/display.c ****       }
 8541              		.loc 1 3628 9 view .LVU2751
 8542              	.LBE474:
 8543              	.LBE473:
3649:src/display.c ****       }
 8544              		.loc 1 3649 2 view .LVU2752
 8545 03ee 2C28     		cmp	r0, #44
 8546 03f0 D4BF     		ite	le
 8547 03f2 0021     		movle	r1, #0
 8548 03f4 0121     		movgt	r1, #1
 8549 03f6 B6E7     		b	.L831
 8550              	.L933:
 8551              	.LBE475:
 8552              	.LBE478:
 987:src/display.c ****       set_status_top_always(buf2);
 8553              		.loc 1 987 27 is_stmt 1 discriminator 1 view .LVU2753
 8554 03f8 3046     		mov	r0, r6
 8555 03fa FFF7FEFF 		bl	set_status
 8556              	.LVL945:
 988:src/display.c ****       
 8557              		.loc 1 988 7 discriminator 1 view .LVU2754
 8558              	.LBB479:
 8559              	.LBI469:
ARM GAS  /tmp/ccwSk7O0.s 			page 261


3647:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8560              		.loc 1 3647 19 discriminator 1 view .LVU2755
 8561              	.LBB476:
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8562              		.loc 1 3648 2 discriminator 1 view .LVU2756
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8563              		.loc 1 3648 6 is_stmt 0 discriminator 1 view .LVU2757
 8564 03fe 714B     		ldr	r3, .L939+12
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8565              		.loc 1 3648 5 discriminator 1 view .LVU2758
 8566 0400 B3F90030 		ldrsh	r3, [r3]
 8567 0404 002B     		cmp	r3, #0
 8568 0406 65D1     		bne	.L828
 8569 0408 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8570 040a A9E7     		b	.L829
 8571              	.LVL946:
 8572              	.L821:
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8573              		.loc 1 3648 5 discriminator 1 view .LVU2759
 8574              	.LBE476:
 8575              	.LBE479:
 8576              	.LBB480:
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8577              		.loc 1 941 6 is_stmt 1 view .LVU2760
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8578              		.loc 1 941 21 is_stmt 0 view .LVU2761
 8579 040c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8580              		.loc 1 941 9 view .LVU2762
 8581 0410 9806     		lsls	r0, r3, #26
 8582 0412 3CD5     		bpl	.L818
 943:src/display.c **** #endif
 8583              		.loc 1 943 6 view .LVU2763
 8584 0414 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 943:src/display.c **** #endif
 8585              		.loc 1 943 3 view .LVU2764
 8586 0416 13F00204 		ands	r4, r3, #2
 8587 041a 38D1     		bne	.L818
 946:src/display.c **** #endif
 8588              		.loc 1 946 6 view .LVU2765
 8589 041c 6A4B     		ldr	r3, .L939+16
 946:src/display.c **** #endif
 8590              		.loc 1 946 3 view .LVU2766
 8591 041e 1B68     		ldr	r3, [r3]
 8592 0420 012B     		cmp	r3, #1
 8593 0422 34D0     		beq	.L818
 948:src/display.c **** 	      char ltgteq;
 8594              		.loc 1 948 6 view .LVU2767
 8595 0424 4146     		mov	r1, r8
 8596 0426 3846     		mov	r0, r7
 8597 0428 FFF7FEFF 		bl	set_x_fract
 8598              	.LVL947:
 948:src/display.c **** 	      char ltgteq;
 8599              		.loc 1 948 3 view .LVU2768
 8600 042c 78B3     		cbz	r0, .L818
 8601              	.LBB464:
 949:src/display.c **** 
ARM GAS  /tmp/ccwSk7O0.s 			page 262


 8602              		.loc 1 949 8 is_stmt 1 view .LVU2769
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8603              		.loc 1 951 8 view .LVU2770
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8604              		.loc 1 951 12 is_stmt 0 view .LVU2771
 8605 042e 2146     		mov	r1, r4
 8606 0430 3046     		mov	r0, r6
 8607 0432 FFF7FEFF 		bl	find_char
 8608              	.LVL948:
 8609 0436 0446     		mov	r4, r0
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8610              		.loc 1 951 10 view .LVU2772
 8611 0438 0238     		subs	r0, r0, #2
 8612              	.LVL949:
 953:src/display.c **** 	      switch (ltgteq) {
 8613              		.loc 1 953 8 is_stmt 1 view .LVU2773
 953:src/display.c **** 	      switch (ltgteq) {
 8614              		.loc 1 953 15 is_stmt 0 view .LVU2774
 8615 043a 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8616              	.LVL950:
 954:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8617              		.loc 1 954 8 is_stmt 1 view .LVU2775
 8618 043e B9F1470F 		cmp	r9, #71
 8619 0442 00F0E080 		beq	.L848
 956:src/display.c **** 	      }
 8620              		.loc 1 956 25 is_stmt 0 view .LVU2776
 8621 0446 B9F14C0F 		cmp	r9, #76
 8622 044a 08BF     		it	eq
 8623 044c 4FF03C09 		moveq	r9, #60
 8624              	.LVL951:
 8625              	.L825:
 958:src/display.c **** 	      q[2] = ltgteq;
 8626              		.loc 1 958 8 is_stmt 1 view .LVU2777
 8627 0450 5E49     		ldr	r1, .L939+20
 8628 0452 FFF7FEFF 		bl	scopy
 8629              	.LVL952:
 959:src/display.c **** 
 8630              		.loc 1 959 8 view .LVU2778
 959:src/display.c **** 
 8631              		.loc 1 959 13 is_stmt 0 view .LVU2779
 8632 0456 84F80090 		strb	r9, [r4]
 961:src/display.c **** 		goto skip;
 8633              		.loc 1 961 8 is_stmt 1 view .LVU2780
 961:src/display.c **** 		goto skip;
 8634              		.loc 1 961 12 is_stmt 0 view .LVU2781
 8635 045a 0121     		movs	r1, #1
 8636 045c 3046     		mov	r0, r6
 8637 045e FFF7FEFF 		bl	pixel_length
 8638              	.LVL953:
 961:src/display.c **** 		goto skip;
 8639              		.loc 1 961 11 view .LVU2782
 8640 0462 2C28     		cmp	r0, #44
 8641 0464 7FF779AF 		ble	.L776
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8642              		.loc 1 964 8 is_stmt 1 view .LVU2783
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8643              		.loc 1 964 14 is_stmt 0 view .LVU2784
ARM GAS  /tmp/ccwSk7O0.s 			page 263


 8644 0468 4FF00009 		mov	r9, #0
 8645              	.LVL954:
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8646              		.loc 1 964 14 view .LVU2785
 8647 046c 04F8039C 		strb	r9, [r4, #-3]
 965:src/display.c **** 		goto skip;
 8648              		.loc 1 965 8 is_stmt 1 view .LVU2786
 965:src/display.c **** 		goto skip;
 8649              		.loc 1 965 12 is_stmt 0 view .LVU2787
 8650 0470 0121     		movs	r1, #1
 8651 0472 3046     		mov	r0, r6
 8652 0474 FFF7FEFF 		bl	pixel_length
 8653              	.LVL955:
 965:src/display.c **** 		goto skip;
 8654              		.loc 1 965 11 view .LVU2788
 8655 0478 2C28     		cmp	r0, #44
 8656 047a 7FF76EAF 		ble	.L776
 968:src/display.c **** 	    }
 8657              		.loc 1 968 8 is_stmt 1 view .LVU2789
 968:src/display.c **** 	    }
 8658              		.loc 1 968 39 is_stmt 0 view .LVU2790
 8659 047e A8EB0602 		sub	r2, r8, r6
 968:src/display.c **** 	    }
 8660              		.loc 1 968 8 view .LVU2791
 8661 0482 4946     		mov	r1, r9
 8662 0484 C2F12A02 		rsb	r2, r2, #42
 8663 0488 4046     		mov	r0, r8
 8664 048a FFF7FEFF 		bl	xset
 8665              	.LVL956:
 8666              	.L818:
 968:src/display.c **** 	    }
 8667              		.loc 1 968 8 view .LVU2792
 8668              	.LBE464:
 971:src/display.c **** 	    int extra_pixels;
 8669              		.loc 1 971 4 is_stmt 1 view .LVU2793
 971:src/display.c **** 	    int extra_pixels;
 8670              		.loc 1 971 10 is_stmt 0 view .LVU2794
 8671 048e 0C23     		movs	r3, #12
 8672 0490 0293     		str	r3, [sp, #8]
 971:src/display.c **** 	    int extra_pixels;
 8673              		.loc 1 971 27 is_stmt 1 view .LVU2795
 8674 0492 0FE0     		b	.L827
 8675              	.LVL957:
 8676              	.L936:
 8677              	.LBB465:
 979:src/display.c **** 
 8678              		.loc 1 979 6 is_stmt 0 view .LVU2796
 8679 0494 029A     		ldr	r2, [sp, #8]
 8680 0496 0A32     		adds	r2, r2, #10
 8681 0498 FFF7FEFF 		bl	xset
 8682              	.LVL958:
 981:src/display.c **** 	  }
 8683              		.loc 1 981 6 is_stmt 1 view .LVU2797
 981:src/display.c **** 	  }
 8684              		.loc 1 981 30 is_stmt 0 view .LVU2798
 8685 049c B4F14802 		subs	r2, r4, #72
 981:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 264


 8686              		.loc 1 981 8 view .LVU2799
 8687 04a0 029B     		ldr	r3, [sp, #8]
 981:src/display.c **** 	  }
 8688              		.loc 1 981 30 view .LVU2800
 8689 04a2 48BF     		it	mi
 8690 04a4 A4F14502 		submi	r2, r4, #69
 981:src/display.c **** 	  }
 8691              		.loc 1 981 8 view .LVU2801
 8692 04a8 A3EBA203 		sub	r3, r3, r2, asr #2
 8693              	.LBE465:
 971:src/display.c **** 	    int extra_pixels;
 8694              		.loc 1 971 4 view .LVU2802
 8695 04ac 012B     		cmp	r3, #1
 8696              	.LBB466:
 981:src/display.c **** 	  }
 8697              		.loc 1 981 8 view .LVU2803
 8698 04ae 0293     		str	r3, [sp, #8]
 8699              	.LBE466:
 971:src/display.c **** 	    int extra_pixels;
 8700              		.loc 1 971 27 is_stmt 1 view .LVU2804
 971:src/display.c **** 	    int extra_pixels;
 8701              		.loc 1 971 4 is_stmt 0 view .LVU2805
 8702 04b0 7FF753AF 		ble	.L776
 8703              	.LVL959:
 8704              	.L827:
 8705              	.LBB467:
 972:src/display.c **** 
 8706              		.loc 1 972 6 is_stmt 1 view .LVU2806
 974:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8707              		.loc 1 974 6 view .LVU2807
 8708 04b4 02AA     		add	r2, sp, #8
 8709 04b6 4146     		mov	r1, r8
 8710 04b8 3846     		mov	r0, r7
 8711 04ba FFF7FEFF 		bl	set_x_dn
 8712              	.LVL960:
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8713              		.loc 1 975 6 view .LVU2808
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8714              		.loc 1 975 21 is_stmt 0 view .LVU2809
 8715 04be 0121     		movs	r1, #1
 8716 04c0 3046     		mov	r0, r6
 8717 04c2 FFF7FEFF 		bl	pixel_length
 8718              	.LVL961:
 979:src/display.c **** 
 8719              		.loc 1 979 6 is_stmt 1 view .LVU2810
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8720              		.loc 1 975 21 is_stmt 0 view .LVU2811
 8721 04c6 0446     		mov	r4, r0
 8722              	.LVL962:
 976:src/display.c **** 	      break;
 8723              		.loc 1 976 6 is_stmt 1 view .LVU2812
 976:src/display.c **** 	      break;
 8724              		.loc 1 976 9 is_stmt 0 view .LVU2813
 8725 04c8 4B2C     		cmp	r4, #75
 979:src/display.c **** 
 8726              		.loc 1 979 6 view .LVU2814
 8727 04ca 4FF00001 		mov	r1, #0
ARM GAS  /tmp/ccwSk7O0.s 			page 265


 8728 04ce 4046     		mov	r0, r8
 8729              	.LVL963:
 976:src/display.c **** 	      break;
 8730              		.loc 1 976 9 view .LVU2815
 8731 04d0 E0DC     		bgt	.L936
 8732              	.LVL964:
 976:src/display.c **** 	      break;
 8733              		.loc 1 976 9 view .LVU2816
 8734              	.LBE467:
 8735 04d2 42E7     		b	.L776
 8736              	.LVL965:
 8737              	.L828:
 976:src/display.c **** 	      break;
 8738              		.loc 1 976 9 view .LVU2817
 8739              	.LBE480:
 8740              	.LBB481:
 8741              	.LBB477:
3648:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8742              		.loc 1 3648 22 view .LVU2818
 8743 04d4 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8744 04d6 5A06     		lsls	r2, r3, #25
 8745 04d8 7FF542AF 		bpl	.L829
 8746              	.LBE477:
 8747              	.LBE481:
 990:src/display.c **** #else
 8748              		.loc 1 990 5 view .LVU2819
 8749 04dc 23B0     		add	sp, sp, #140
 8750              		.cfi_remember_state
 8751              		.cfi_def_cfa_offset 28
 8752              		@ sp needed
 8753 04de BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8754              	.LVL966:
 8755              	.L921:
 8756              		.cfi_restore_state
 797:src/display.c **** 	  *p2++ = '\207';
 8757              		.loc 1 797 4 is_stmt 1 view .LVU2820
 798:src/display.c **** 	  *p2++ = '\007';	    
 8758              		.loc 1 798 4 view .LVU2821
 799:src/display.c **** 	}
 8759              		.loc 1 799 10 is_stmt 0 view .LVU2822
 8760 04e2 88F80230 		strb	r3, [r8, #2]
 798:src/display.c **** 	  *p2++ = '\007';	    
 8761              		.loc 1 798 10 view .LVU2823
 8762 04e6 88F80120 		strb	r2, [r8, #1]
 799:src/display.c **** 	}
 8763              		.loc 1 799 4 is_stmt 1 view .LVU2824
 799:src/display.c **** 	}
 8764              		.loc 1 799 7 is_stmt 0 view .LVU2825
 8765 04ea 08F10308 		add	r8, r8, #3
 8766              	.LVL967:
 799:src/display.c **** 	}
 8767              		.loc 1 799 7 view .LVU2826
 8768 04ee C9E5     		b	.L790
 8769              	.LVL968:
 8770              	.L843:
 831:src/display.c **** #endif
 8771              		.loc 1 831 19 view .LVU2827
ARM GAS  /tmp/ccwSk7O0.s 			page 266


 8772 04f0 3749     		ldr	r1, .L939+24
 8773 04f2 E0E5     		b	.L792
 8774              	.LVL969:
 8775              	.L801:
 861:src/display.c **** 	  p = scopy(p, q);
 8776              		.loc 1 861 4 is_stmt 1 view .LVU2828
 862:src/display.c **** 	}
 8777              		.loc 1 862 4 view .LVU2829
 862:src/display.c **** 	}
 8778              		.loc 1 862 8 is_stmt 0 view .LVU2830
 8779 04f4 3749     		ldr	r1, .L939+28
 8780 04f6 3046     		mov	r0, r6
 8781 04f8 FFF7FEFF 		bl	scopy
 8782              	.LVL970:
 8783 04fc 8046     		mov	r8, r0
 8784              	.LVL971:
 862:src/display.c **** 	}
 8785              		.loc 1 862 6 view .LVU2831
 8786 04fe 47E6     		b	.L804
 8787              	.LVL972:
 8788              	.L930:
 8789              	.LBB482:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8790              		.loc 1 905 77 discriminator 2 view .LVU2832
 8791 0500 FFF7FEFF 		bl	stack_size
 8792              	.LVL973:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8793              		.loc 1 905 64 discriminator 2 view .LVU2833
 8794 0504 D9F80010 		ldr	r1, [r9]
 8795 0508 6330     		adds	r0, r0, #99
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8796              		.loc 1 905 48 discriminator 2 view .LVU2834
 8797 050a 8842     		cmp	r0, r1
 8798 050c FFF661AE 		blt	.L812
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8799              		.loc 1 906 13 view .LVU2835
 8800 0510 FFF7FEFF 		bl	get_cmdline
 8801              	.LVL974:
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8802              		.loc 1 906 9 view .LVU2836
 8803 0514 0028     		cmp	r0, #0
 8804 0516 71D0     		beq	.L814
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8805              		.loc 1 906 27 discriminator 1 view .LVU2837
 8806 0518 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8807 051a 002B     		cmp	r3, #0
 8808 051c 6ED1     		bne	.L814
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8809              		.loc 1 907 9 view .LVU2838
 8810 051e 17B1     		cbz	r7, .L815
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8811              		.loc 1 907 30 discriminator 1 view .LVU2839
 8812 0520 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8813              		.loc 1 907 12 discriminator 1 view .LVU2840
 8814 0522 5F06     		lsls	r7, r3, #25
 8815              	.LVL975:
ARM GAS  /tmp/ccwSk7O0.s 			page 267


 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8816              		.loc 1 907 12 discriminator 1 view .LVU2841
 8817 0524 6AD5     		bpl	.L814
 8818              	.L815:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8819              		.loc 1 905 6 discriminator 5 view .LVU2842
 8820 0526 D9F80010 		ldr	r1, [r9]
 8821 052a 53E6     		b	.L816
 8822              	.LVL976:
 8823              	.L927:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8824              		.loc 1 905 6 discriminator 5 view .LVU2843
 8825              	.LBE482:
 883:src/display.c **** 	    p = scopy(p, q);
 8826              		.loc 1 883 6 is_stmt 1 view .LVU2844
 884:src/display.c **** 	    //	    goto no_copy;
 8827              		.loc 1 884 6 view .LVU2845
 884:src/display.c **** 	    //	    goto no_copy;
 8828              		.loc 1 884 10 is_stmt 0 view .LVU2846
 8829 052c 4046     		mov	r0, r8
 8830 052e 2A49     		ldr	r1, .L939+32
 8831 0530 FFF7FEFF 		bl	scopy
 8832              	.LVL977:
 8833 0534 8046     		mov	r8, r0
 8834              	.LVL978:
 884:src/display.c **** 	    //	    goto no_copy;
 8835              		.loc 1 884 10 view .LVU2847
 8836 0536 30E6     		b	.L806
 8837              	.LVL979:
 8838              	.L928:
 8839              	.LBB483:
 897:src/display.c **** 	    goto skip;
 8840              		.loc 1 897 6 is_stmt 1 view .LVU2848
 8841 0538 6520     		movs	r0, #101
 8842 053a FFF7FEFF 		bl	get_reg_n_int
 8843              	.LVL980:
 8844 053e 4246     		mov	r2, r8
 8845 0540 FFF7FEFF 		bl	set_int_x
 8846              	.LVL981:
 898:src/display.c **** 	  }
 8847              		.loc 1 898 6 view .LVU2849
 8848 0544 09E7     		b	.L776
 8849              	.LVL982:
 8850              	.L924:
 898:src/display.c **** 	  }
 8851              		.loc 1 898 6 is_stmt 0 view .LVU2850
 8852              	.LBE483:
 732:src/display.c **** 	  *p2 = '\015';
 8853              		.loc 1 732 4 is_stmt 1 view .LVU2851
 732:src/display.c **** 	  *p2 = '\015';
 8854              		.loc 1 732 10 is_stmt 0 view .LVU2852
 8855 0546 2022     		movs	r2, #32
 733:src/display.c **** 	  goto skip;
 8856              		.loc 1 733 8 view .LVU2853
 8857 0548 0D23     		movs	r3, #13
 732:src/display.c **** 	  *p2 = '\015';
 8858              		.loc 1 732 10 view .LVU2854
ARM GAS  /tmp/ccwSk7O0.s 			page 268


 8859 054a 0270     		strb	r2, [r0]
 733:src/display.c **** 	  goto skip;
 8860              		.loc 1 733 4 is_stmt 1 view .LVU2855
 733:src/display.c **** 	  goto skip;
 8861              		.loc 1 733 8 is_stmt 0 view .LVU2856
 8862 054c 4370     		strb	r3, [r0, #1]
 734:src/display.c **** 	}
 8863              		.loc 1 734 4 is_stmt 1 view .LVU2857
 8864 054e 04E7     		b	.L776
 8865              	.LVL983:
 8866              	.L935:
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8867              		.loc 1 851 4 view .LVU2858
 852:src/display.c **** 	  }
 8868              		.loc 1 852 6 view .LVU2859
 855:src/display.c **** 	  }
 8869              		.loc 1 855 6 view .LVU2860
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8870              		.loc 1 851 7 is_stmt 0 view .LVU2861
 8871 0550 1A07     		lsls	r2, r3, #28
 852:src/display.c **** 	  }
 8872              		.loc 1 852 33 view .LVU2862
 8873 0552 47BF     		ittee	mi
 8874 0554 214B     		ldrmi	r3, .L939+36
 8875 0556 2249     		ldrmi	r1, .L939+40
 855:src/display.c **** 	  }
 8876              		.loc 1 855 31 view .LVU2863
 8877 0558 224B     		ldrpl	r3, .L939+44
 8878 055a 2349     		ldrpl	r1, .L939+48
 8879 055c 0028     		cmp	r0, #0
 8880 055e 18BF     		it	ne
 8881 0560 1946     		movne	r1, r3
 8882              	.LVL984:
 857:src/display.c **** 	  goto skip;
 8883              		.loc 1 857 4 is_stmt 1 view .LVU2864
 8884 0562 3046     		mov	r0, r6
 8885 0564 FFF7FEFF 		bl	scopy
 8886              	.LVL985:
 858:src/display.c **** 	}
 8887              		.loc 1 858 4 view .LVU2865
 8888 0568 F7E6     		b	.L776
 8889              	.LVL986:
 8890              	.L779:
 718:src/display.c **** 	    *p2++ = shift_char;
 8891              		.loc 1 718 30 is_stmt 0 discriminator 1 view .LVU2866
 8892 056a FFF7FEFF 		bl	is_dblmode
 8893              	.LVL987:
 718:src/display.c **** 	    *p2++ = shift_char;
 8894              		.loc 1 718 26 discriminator 1 view .LVU2867
 8895 056e 0028     		cmp	r0, #0
 8896 0570 3FF4C6AD 		beq	.L781
 723:src/display.c **** 	  }
 8897              		.loc 1 723 6 is_stmt 1 view .LVU2868
 8898              	.LVL988:
 723:src/display.c **** 	  }
 8899              		.loc 1 723 12 is_stmt 0 view .LVU2869
 8900 0574 4423     		movs	r3, #68
ARM GAS  /tmp/ccwSk7O0.s 			page 269


 8901 0576 8DF85C30 		strb	r3, [sp, #92]
 723:src/display.c **** 	  }
 8902              		.loc 1 723 9 view .LVU2870
 8903 057a 0DF15D00 		add	r0, sp, #93
 8904              	.LVL989:
 723:src/display.c **** 	  }
 8905              		.loc 1 723 9 view .LVU2871
 8906 057e C6E5     		b	.L780
 8907              	.L925:
 737:src/display.c **** 	  if (State2.wascomplex) {
 8908              		.loc 1 737 28 discriminator 1 view .LVU2872
 8909 0580 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 737:src/display.c **** 	  if (State2.wascomplex) {
 8910              		.loc 1 737 24 discriminator 1 view .LVU2873
 8911 0582 13F0C00F 		tst	r3, #192
 8912 0586 3CD1     		bne	.L838
 737:src/display.c **** 	  if (State2.wascomplex) {
 8913              		.loc 1 737 60 discriminator 2 view .LVU2874
 8914 0588 0F4B     		ldr	r3, .L939+16
 8915 058a 1B68     		ldr	r3, [r3]
 737:src/display.c **** 	  if (State2.wascomplex) {
 8916              		.loc 1 737 46 discriminator 2 view .LVU2875
 8917 058c 002B     		cmp	r3, #0
 8918 058e 3FF4CAAD 		beq	.L784
 738:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8919              		.loc 1 738 4 is_stmt 1 view .LVU2876
 741:src/display.c **** 	    if (RectPolConv == 1) {
 8920              		.loc 1 741 9 view .LVU2877
 742:src/display.c **** 	      q = "\007\306<";
 8921              		.loc 1 742 6 view .LVU2878
 746:src/display.c **** 	    }
 8922              		.loc 1 746 10 is_stmt 0 view .LVU2879
 8923 0592 1649     		ldr	r1, .L939+52
 8924 0594 164A     		ldr	r2, .L939+56
 8925 0596 012B     		cmp	r3, #1
 8926 0598 18BF     		it	ne
 8927 059a 1146     		movne	r1, r2
 8928              	.L785:
 8929              	.LVL990:
 749:src/display.c **** 
 8930              		.loc 1 749 4 is_stmt 1 view .LVU2880
 749:src/display.c **** 
 8931              		.loc 1 749 8 is_stmt 0 view .LVU2881
 8932 059c 3046     		mov	r0, r6
 8933              	.LVL991:
 749:src/display.c **** 
 8934              		.loc 1 749 8 view .LVU2882
 8935 059e FFF7FEFF 		bl	scopy
 8936              	.LVL992:
 749:src/display.c **** 
 8937              		.loc 1 749 8 view .LVU2883
 8938 05a2 8046     		mov	r8, r0
 8939              	.LVL993:
 751:src/display.c **** 	}
 8940              		.loc 1 751 4 is_stmt 1 view .LVU2884
 8941 05a4 FDE5     		b	.L766
 8942              	.LVL994:
ARM GAS  /tmp/ccwSk7O0.s 			page 270


 8943              	.L840:
 760:src/display.c **** #endif
 8944              		.loc 1 760 19 is_stmt 0 view .LVU2885
 8945 05a6 0A49     		ldr	r1, .L939+24
 8946 05a8 CAE5     		b	.L786
 8947              	.LVL995:
 8948              	.L929:
 8949              	.LBB484:
 902:src/display.c **** 	  }
 8950              		.loc 1 902 6 is_stmt 1 view .LVU2886
 8951 05aa 03AF     		add	r7, sp, #12
 8952              	.LVL996:
 902:src/display.c **** 	  }
 8953              		.loc 1 902 6 is_stmt 0 view .LVU2887
 8954 05ac 3846     		mov	r0, r7
 8955 05ae 6F21     		movs	r1, #111
 8956 05b0 FFF7FEFF 		bl	getRegister
 8957              	.LVL997:
 8958 05b4 12E6     		b	.L811
 8959              	.L940:
 8960 05b6 00BF     		.align	2
 8961              	.L939:
 8962 05b8 00000000 		.word	.LANCHOR16
 8963 05bc 00000000 		.word	.LC2
 8964 05c0 00000000 		.word	StateWhileOn
 8965 05c4 00000000 		.word	.LANCHOR18
 8966 05c8 00000000 		.word	RectPolConv
 8967 05cc 68000000 		.word	.LC21
 8968 05d0 14000000 		.word	.LC7
 8969 05d4 60000000 		.word	.LC18
 8970 05d8 64000000 		.word	.LC19
 8971 05dc 2C000000 		.word	.LC11
 8972 05e0 3C000000 		.word	.LC13
 8973 05e4 34000000 		.word	.LC12
 8974 05e8 44000000 		.word	.LC14
 8975 05ec 04000000 		.word	.LC3
 8976 05f0 0C000000 		.word	.LC5
 8977 05f4 00000000 		.word	IntMaxWindow
 8978              	.LVL998:
 8979              	.L915:
 902:src/display.c **** 	  }
 8980              		.loc 1 902 6 view .LVU2888
 8981              	.LBE484:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8982              		.loc 1 691 4 is_stmt 1 view .LVU2889
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8983              		.loc 1 691 11 is_stmt 0 view .LVU2890
 8984 05f8 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8985              		.loc 1 691 27 is_stmt 1 view .LVU2891
 8986 05fa 9DE6     		b	.L833
 8987              	.LVL999:
 8988              	.L814:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8989              		.loc 1 691 27 is_stmt 0 view .LVU2892
 8990 05fc D9F80010 		ldr	r1, [r9]
 8991 0600 E7E5     		b	.L812
ARM GAS  /tmp/ccwSk7O0.s 			page 271


 8992              	.LVL1000:
 8993              	.L838:
 739:src/display.c **** 	  }
 8994              		.loc 1 739 8 view .LVU2893
 8995 0602 0249     		ldr	r1, .L941
 8996 0604 CAE7     		b	.L785
 8997              	.LVL1001:
 8998              	.L848:
 8999              	.LBB485:
 9000              	.LBB468:
 955:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 9001              		.loc 1 955 25 view .LVU2894
 9002 0606 4FF03E09 		mov	r9, #62
 9003              	.LVL1002:
 955:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 9004              		.loc 1 955 25 view .LVU2895
 9005 060a 21E7     		b	.L825
 9006              	.L942:
 9007              		.align	2
 9008              	.L941:
 9009 060c 08000000 		.word	.LC4
 9010              	.LBE468:
 9011              	.LBE485:
 9012              		.cfi_endproc
 9013              	.LFE16:
 9015              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 9016              		.align	2
 9017              	.LC22:
 9018 0000 0D00     		.ascii	"\015\000"
 9019 0002 0000     		.align	2
 9020              	.LC23:
 9021 0004 060600   		.ascii	"\006\006\000"
 9022 0007 00       		.align	2
 9023              	.LC25:
 9024 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 9024      492C2057 
 9024      77414C74 
 9024      4500
 9025 0016 0000     		.align	2
 9026              	.LC26:
 9027 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 9027      2055204C 
 9027      20492C20 
 9027      20572041 
 9027      204C2054 
 9028 0032 0000     		.align	2
 9029              	.LC27:
 9030 0034 2000     		.ascii	" \000"
 9031 0036 0000     		.align	2
 9032              	.LC28:
 9033 0038 48595000 		.ascii	"HYP\000"
 9034              		.align	2
 9035              	.LC29:
 9036 003c 7F060600 		.ascii	"\177\006\006\000"
 9037              		.align	2
 9038              	.LC32:
 9039 0040 3020746F 		.ascii	"0 to 255\000"
ARM GAS  /tmp/ccwSk7O0.s 			page 272


 9039      20323535 
 9039      00
 9040 0049 000000   		.align	2
 9041              	.LC33:
 9042 004c 46726565 		.ascii	"Free:\000"
 9042      3A00
 9043 0052 0000     		.align	2
 9044              	.LC34:
 9045 0054 202C2046 		.ascii	" , FL. \000"
 9045      4C2E2000 
 9046              		.align	2
 9047              	.LC35:
 9048 005c 52656773 		.ascii	"Regs:\000"
 9048      3A00
 9049 0062 0000     		.align	2
 9050              	.LC36:
 9051 0064 20910606 		.ascii	" \221\006\006+\000"
 9051      2B00
 9052 006a 0000     		.align	2
 9053              	.LC37:
 9054 006c 202C204C 		.ascii	" , Loc. \000"
 9054      6F632E20 
 9054      00
 9055 0075 000000   		.align	2
 9056              	.LC38:
 9057 0078 464C2000 		.ascii	"FL \000"
 9058              		.align	2
 9059              	.LC39:
 9060 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 9060      06413A44 
 9060      064C494A 
 9060      4B00
 9061 008a 0000     		.align	2
 9062              	.LC40:
 9063 008c 464C2E30 		.ascii	"FL.00-.15\000"
 9063      302D2E31 
 9063      3500
 9064 0096 0000     		.align	2
 9065              	.LC41:
 9066 0098 43414C4C 		.ascii	"CALLS\000"
 9066      5300
 9067 009e 0000     		.align	2
 9068              	.LC42:
 9069 00a0 52656720 		.ascii	"Reg \000"
 9069      00
 9070 00a5 000000   		.align	2
 9071              	.LC43:
 9072 00a8 00       		.ascii	"\000"
 9073 00a9 000000   		.align	2
 9074              	.LC44:
 9075 00ac 202D2D2D 		.ascii	" ---\000"
 9075      00
 9076 00b1 000000   		.align	2
 9077              	.LC31:
 9078 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 9078      093E0A00 
 9079              		.align	2
ARM GAS  /tmp/ccwSk7O0.s 			page 273


 9080              	.LC30:
 9081 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 9081      41424344 
 9081      4C494A4B 
 9081      00
 9082              		.section	.text.display,"ax",%progbits
 9083              		.align	1
 9084              		.p2align 2,,3
 9085              		.global	display
 9086              		.syntax unified
 9087              		.thumb
 9088              		.thumb_func
 9089              		.fpu fpv4-sp-d16
 9091              	display:
 9092              	.LFB34:
2677:src/display.c **** 	int i, j;
 9093              		.loc 1 2677 26 is_stmt 1 view -0
 9094              		.cfi_startproc
 9095              		@ args = 0, pretend = 0, frame = 160
 9096              		@ frame_needed = 0, uses_anonymous_args = 0
2678:src/display.c **** 	char buf[40], *bp = buf;
 9097              		.loc 1 2678 2 view .LVU2897
2679:src/display.c **** 	const char *p;
 9098              		.loc 1 2679 2 view .LVU2898
2677:src/display.c **** 	int i, j;
 9099              		.loc 1 2677 26 is_stmt 0 view .LVU2899
 9100 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9101              		.cfi_def_cfa_offset 36
 9102              		.cfi_offset 4, -36
 9103              		.cfi_offset 5, -32
 9104              		.cfi_offset 6, -28
 9105              		.cfi_offset 7, -24
 9106              		.cfi_offset 8, -20
 9107              		.cfi_offset 9, -16
 9108              		.cfi_offset 10, -12
 9109              		.cfi_offset 11, -8
 9110              		.cfi_offset 14, -4
2682:src/display.c **** 	int skip = 0;
 9111              		.loc 1 2682 24 view .LVU2900
 9112 0004 C34C     		ldr	r4, .L1284
2687:src/display.c **** 	if (State2.disp_freeze) {
 9113              		.loc 1 2687 16 view .LVU2901
 9114 0006 DFF84093 		ldr	r9, .L1284+52
2682:src/display.c **** 	int skip = 0;
 9115              		.loc 1 2682 24 view .LVU2902
 9116 000a 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
2677:src/display.c **** 	int i, j;
 9117              		.loc 1 2677 26 view .LVU2903
 9118 000e A9B0     		sub	sp, sp, #164
 9119              		.cfi_def_cfa_offset 200
 9120              	.LVL1003:
2680:src/display.c **** 	int annuc = 0;
 9121              		.loc 1 2680 2 is_stmt 1 view .LVU2904
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9122              		.loc 1 2681 2 view .LVU2905
2682:src/display.c **** 	int skip = 0;
 9123              		.loc 1 2682 2 view .LVU2906
ARM GAS  /tmp/ccwSk7O0.s 			page 274


2683:src/display.c **** 	int x_disp = 0;
 9124              		.loc 1 2683 2 view .LVU2907
2684:src/display.c **** 	const int shift = cur_shift();
 9125              		.loc 1 2684 2 view .LVU2908
2685:src/display.c **** 
 9126              		.loc 1 2685 2 view .LVU2909
2685:src/display.c **** 
 9127              		.loc 1 2685 20 is_stmt 0 view .LVU2910
 9128 0010 FFF7FEFF 		bl	cur_shift
 9129              	.LVL1004:
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9130              		.loc 1 2688 6 view .LVU2911
 9131 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2687:src/display.c **** 	if (State2.disp_freeze) {
 9132              		.loc 1 2687 16 view .LVU2912
 9133 0016 0022     		movs	r2, #0
 9134              	.LVL1005:
2687:src/display.c **** 	if (State2.disp_freeze) {
 9135              		.loc 1 2687 2 is_stmt 1 view .LVU2913
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9136              		.loc 1 2688 5 is_stmt 0 view .LVU2914
 9137 0018 13F01007 		ands	r7, r3, #16
2687:src/display.c **** 	if (State2.disp_freeze) {
 9138              		.loc 1 2687 16 view .LVU2915
 9139 001c A9F80020 		strh	r2, [r9]	@ movhi
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9140              		.loc 1 2688 2 is_stmt 1 view .LVU2916
2688:src/display.c **** 	  State2.disp_freeze = 0;
 9141              		.loc 1 2688 5 is_stmt 0 view .LVU2917
 9142 0020 40F0FC80 		bne	.L1244
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9143              		.loc 1 2698 2 is_stmt 1 view .LVU2918
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9144              		.loc 1 2698 6 is_stmt 0 view .LVU2919
 9145 0024 DFF82483 		ldr	r8, .L1284+56
 9146 0028 D8F80060 		ldr	r6, [r8]
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9147              		.loc 1 2698 5 view .LVU2920
 9148 002c 002E     		cmp	r6, #0
 9149 002e 40F08280 		bne	.L1245
2717:src/display.c **** #  endif
 9150              		.loc 1 2717 2 is_stmt 1 view .LVU2921
2717:src/display.c **** #  endif
 9151              		.loc 1 2717 33 is_stmt 0 view .LVU2922
 9152 0032 B94B     		ldr	r3, .L1284+4
 9153 0034 1B68     		ldr	r3, [r3]
 9154 0036 0546     		mov	r5, r0
 9155 0038 93F8EAB7 		ldrb	fp, [r3, #2026]	@ zero_extendqisi2
2723:src/display.c **** 
 9156              		.loc 1 2723 2 view .LVU2923
 9157 003c FFF7FEFF 		bl	reset_disp
 9158              	.LVL1006:
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9159              		.loc 1 2726 2 view .LVU2924
 9160 0040 3146     		mov	r1, r6
 9161 0042 1EA8     		add	r0, sp, #120
 9162              	.LVL1007:
ARM GAS  /tmp/ccwSk7O0.s 			page 275


2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9163              		.loc 1 2726 2 view .LVU2925
 9164 0044 2822     		movs	r2, #40
 9165 0046 FFF7FEFF 		bl	xset
 9166              	.LVL1008:
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9167              		.loc 1 2732 6 view .LVU2926
 9168 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9169              		.loc 1 2732 5 view .LVU2927
 9170 004c D906     		lsls	r1, r3, #27
2717:src/display.c **** #  endif
 9171              		.loc 1 2717 12 view .LVU2928
 9172 004e CBF3800B 		ubfx	fp, fp, #2, #1
 9173              	.LVL1009:
2723:src/display.c **** 
 9174              		.loc 1 2723 2 is_stmt 1 view .LVU2929
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9175              		.loc 1 2726 2 view .LVU2930
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9176              		.loc 1 2732 2 view .LVU2931
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9177              		.loc 1 2732 5 is_stmt 0 view .LVU2932
 9178 0052 00F19381 		bmi	.L1246
2744:src/display.c **** 	  if (yreg_enabled) {
 9179              		.loc 1 2744 9 is_stmt 1 view .LVU2933
2744:src/display.c **** 	  if (yreg_enabled) {
 9180              		.loc 1 2744 13 is_stmt 0 view .LVU2934
 9181 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2744:src/display.c **** 	  if (yreg_enabled) {
 9182              		.loc 1 2744 12 view .LVU2935
 9183 0058 5207     		lsls	r2, r2, #29
 9184 005a 00F0E980 		beq	.L951
2745:src/display.c **** 	    set_status_top(S_SURE);
 9185              		.loc 1 2745 4 is_stmt 1 view .LVU2936
2745:src/display.c **** 	    set_status_top(S_SURE);
 9186              		.loc 1 2745 7 is_stmt 0 view .LVU2937
 9187 005e BBF1000F 		cmp	fp, #0
 9188 0062 00F0C081 		beq	.L952
2746:src/display.c **** 	    no_status_top = 1;
 9189              		.loc 1 2746 6 is_stmt 1 view .LVU2938
 9190              	.LVL1010:
 9191              	.LBB546:
 9192              	.LBI546:
3637:src/display.c **** 	if (no_status_top) return;
 9193              		.loc 1 3637 19 view .LVU2939
 9194              	.LBB547:
3638:src/display.c **** 	if (State2.runmode) {
 9195              		.loc 1 3638 2 view .LVU2940
3638:src/display.c **** 	if (State2.runmode) {
 9196              		.loc 1 3638 5 is_stmt 0 view .LVU2941
 9197 0066 B9F90030 		ldrsh	r3, [r9]
 9198 006a 13B9     		cbnz	r3, .L954
 9199 006c AB48     		ldr	r0, .L1284+8
 9200 006e FFF7FEFF 		bl	set_status_top.part.0
 9201              	.LVL1011:
 9202              	.L954:
ARM GAS  /tmp/ccwSk7O0.s 			page 276


3638:src/display.c **** 	if (State2.runmode) {
 9203              		.loc 1 3638 5 view .LVU2942
 9204              	.LBE547:
 9205              	.LBE546:
2747:src/display.c **** 	    annuc = 1;
 9206              		.loc 1 2747 6 is_stmt 1 view .LVU2943
2747:src/display.c **** 	    annuc = 1;
 9207              		.loc 1 2747 20 is_stmt 0 view .LVU2944
 9208 0072 0126     		movs	r6, #1
 9209 0074 A9F80060 		strh	r6, [r9]	@ movhi
2748:src/display.c **** 	  }
 9210              		.loc 1 2748 6 is_stmt 1 view .LVU2945
 9211              	.LVL1012:
2971:src/display.c ****       nostk:
 9212              		.loc 1 2971 2 view .LVU2946
 9213 0078 FFF7FEFF 		bl	show_stack
 9214              	.LVL1013:
2973:src/display.c **** 	if (!skip) {
 9215              		.loc 1 2973 2 view .LVU2947
 9216 007c A84B     		ldr	r3, .L1284+12
 9217 007e A94F     		ldr	r7, .L1284+16
 9218 0080 0093     		str	r3, [sp]
 9219 0082 FFF7FEFF 		bl	show_flags
 9220              	.LVL1014:
2974:src/display.c **** 	  if (State2.runmode) {
 9221              		.loc 1 2974 2 view .LVU2948
 9222              	.L955:
2975:src/display.c **** 	  only_update_x:
 9223              		.loc 1 2975 4 view .LVU2949
2975:src/display.c **** 	  only_update_x:
 9224              		.loc 1 2975 8 is_stmt 0 view .LVU2950
 9225 0086 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2975:src/display.c **** 	  only_update_x:
 9226              		.loc 1 2975 7 view .LVU2951
 9227 0088 15F04005 		ands	r5, r5, #64
 9228 008c 5FD1     		bne	.L948
 9229              	.LBB548:
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9230              		.loc 1 3015 6 is_stmt 1 view .LVU2952
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9231              		.loc 1 3015 24 is_stmt 0 view .LVU2953
 9232 008e A24B     		ldr	r3, .L1284+4
3019:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9233              		.loc 1 3019 6 view .LVU2954
 9234 0090 DFF8BCA2 		ldr	r10, .L1284+60
 9235              	.LVL1015:
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9236              		.loc 1 3015 24 view .LVU2955
 9237 0094 1B68     		ldr	r3, [r3]
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9238              		.loc 1 3015 19 view .LVU2956
 9239 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 9240              	.LVL1016:
3016:src/display.c **** 	    const int n = nLIB(pc);
 9241              		.loc 1 3016 6 is_stmt 1 view .LVU2957
3016:src/display.c **** 	    const int n = nLIB(pc);
 9242              		.loc 1 3016 25 is_stmt 0 view .LVU2958
ARM GAS  /tmp/ccwSk7O0.s 			page 277


 9243 009a 5846     		mov	r0, fp
 9244 009c FFF7FEFF 		bl	user_pc
 9245              	.LVL1017:
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9246              		.loc 1 3018 6 view .LVU2959
 9247 00a0 2822     		movs	r2, #40
 9248 00a2 2946     		mov	r1, r5
3016:src/display.c **** 	    const int n = nLIB(pc);
 9249              		.loc 1 3016 25 view .LVU2960
 9250 00a4 8046     		mov	r8, r0
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9251              		.loc 1 3018 6 view .LVU2961
 9252 00a6 1EA8     		add	r0, sp, #120
 9253              	.LVL1018:
3017:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9254              		.loc 1 3017 6 is_stmt 1 view .LVU2962
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9255              		.loc 1 3018 6 is_stmt 0 view .LVU2963
 9256 00a8 FFF7FEFF 		bl	xset
 9257              	.LVL1019:
3017:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9258              		.loc 1 3017 20 view .LVU2964
 9259 00ac 4FEA9B3B 		lsr	fp, fp, #14
 9260              	.LVL1020:
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9261              		.loc 1 3018 6 is_stmt 1 view .LVU2965
3019:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9262              		.loc 1 3019 6 view .LVU2966
 9263 00b0 DAF80000 		ldr	r0, [r10]
 9264 00b4 2A46     		mov	r2, r5
 9265 00b6 0121     		movs	r1, #1
 9266 00b8 FFF7FEFF 		bl	set_exp
 9267              	.LVL1021:
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9268              		.loc 1 3020 6 view .LVU2967
 9269 00bc BBF1000F 		cmp	fp, #0
 9270 00c0 40F0E881 		bne	.L1247
 9271 00c4 9849     		ldr	r1, .L1284+20
 9272 00c6 1EA8     		add	r0, sp, #120
 9273 00c8 FFF7FEFF 		bl	scopy_spc
 9274              	.LVL1022:
 9275 00cc 0322     		movs	r2, #3
 9276 00ce 4146     		mov	r1, r8
 9277 00d0 FFF7FEFF 		bl	num_arg_0
 9278              	.LVL1023:
3022:src/display.c **** #ifndef REALBUILD
 9279              		.loc 1 3022 6 view .LVU2968
 9280 00d4 0921     		movs	r1, #9
 9281 00d6 1EA8     		add	r0, sp, #120
 9282 00d8 FFF7FEFF 		bl	set_digits_string
 9283              	.LVL1024:
3024:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9284              		.loc 1 3024 6 view .LVU2969
 9285 00dc 5946     		mov	r1, fp
 9286 00de 2822     		movs	r2, #40
 9287 00e0 1EA8     		add	r0, sp, #120
 9288 00e2 FFF7FEFF 		bl	xset
ARM GAS  /tmp/ccwSk7O0.s 			page 278


 9289              	.LVL1025:
3025:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9290              		.loc 1 3025 6 view .LVU2970
 9291 00e6 5A46     		mov	r2, fp
 9292 00e8 0121     		movs	r1, #1
 9293 00ea DAF80000 		ldr	r0, [r10]
 9294 00ee FFF7FEFF 		bl	set_exp
 9295              	.LVL1026:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9296              		.loc 1 3026 6 view .LVU2971
 9297 00f2 8E49     		ldr	r1, .L1284+24
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9298              		.loc 1 3020 6 is_stmt 0 view .LVU2972
 9299 00f4 4FF0030B 		mov	fp, #3
 9300              	.LVL1027:
 9301              	.L1093:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9302              		.loc 1 3026 6 discriminator 4 view .LVU2973
 9303 00f8 1EA8     		add	r0, sp, #120
 9304 00fa FFF7FEFF 		bl	scopy_spc
 9305              	.LVL1028:
 9306 00fe 4146     		mov	r1, r8
 9307 0100 5A46     		mov	r2, fp
 9308 0102 FFF7FEFF 		bl	num_arg_0
 9309              	.LVL1029:
 9310              	.LBB549:
3029:src/display.c **** 	      char *l=LastDisplayedNumber;
 9311              		.loc 1 3029 8 is_stmt 1 discriminator 4 view .LVU2974
3030:src/display.c **** 	      *l++=' ';
 9312              		.loc 1 3030 8 discriminator 4 view .LVU2975
3031:src/display.c **** 	      while(*b) {
 9313              		.loc 1 3031 8 discriminator 4 view .LVU2976
3031:src/display.c **** 	      while(*b) {
 9314              		.loc 1 3031 12 is_stmt 0 discriminator 4 view .LVU2977
 9315 0106 8A4B     		ldr	r3, .L1284+28
3032:src/display.c **** 		*l++=*b++;
 9316              		.loc 1 3032 14 discriminator 4 view .LVU2978
 9317 0108 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3031:src/display.c **** 	      while(*b) {
 9318              		.loc 1 3031 12 discriminator 4 view .LVU2979
 9319 010c 2025     		movs	r5, #32
 9320 010e 1D70     		strb	r5, [r3]
3032:src/display.c **** 		*l++=*b++;
 9321              		.loc 1 3032 8 is_stmt 1 discriminator 4 view .LVU2980
3032:src/display.c **** 		*l++=*b++;
 9322              		.loc 1 3032 13 discriminator 4 view .LVU2981
 9323 0110 0029     		cmp	r1, #0
 9324 0112 00F02C83 		beq	.L1108
 9325 0116 0333     		adds	r3, r3, #3
 9326 0118 1EA8     		add	r0, sp, #120
 9327              	.LVL1030:
 9328              	.L1086:
3033:src/display.c **** 		*l++=' ';
 9329              		.loc 1 3033 3 view .LVU2982
3033:src/display.c **** 		*l++=' ';
 9330              		.loc 1 3033 7 is_stmt 0 view .LVU2983
 9331 011a 03F8021C 		strb	r1, [r3, #-2]
ARM GAS  /tmp/ccwSk7O0.s 			page 279


3034:src/display.c **** 	      }
 9332              		.loc 1 3034 3 is_stmt 1 view .LVU2984
 9333              	.LVL1031:
3032:src/display.c **** 		*l++=*b++;
 9334              		.loc 1 3032 14 is_stmt 0 view .LVU2985
 9335 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9336              	.LVL1032:
3034:src/display.c **** 	      }
 9337              		.loc 1 3034 7 view .LVU2986
 9338 0122 03F8015C 		strb	r5, [r3, #-1]
3032:src/display.c **** 		*l++=*b++;
 9339              		.loc 1 3032 13 is_stmt 1 view .LVU2987
 9340 0126 1A46     		mov	r2, r3
 9341 0128 0233     		adds	r3, r3, #2
 9342              	.LVL1033:
3032:src/display.c **** 		*l++=*b++;
 9343              		.loc 1 3032 13 is_stmt 0 view .LVU2988
 9344 012a 0029     		cmp	r1, #0
 9345 012c F5D1     		bne	.L1086
 9346              	.LVL1034:
 9347              	.L1085:
3036:src/display.c **** 	    }
 9348              		.loc 1 3036 8 is_stmt 1 view .LVU2989
3036:src/display.c **** 	    }
 9349              		.loc 1 3036 10 is_stmt 0 view .LVU2990
 9350 012e 0023     		movs	r3, #0
 9351 0130 804D     		ldr	r5, .L1284+32
 9352 0132 1370     		strb	r3, [r2]
 9353              	.LVL1035:
3036:src/display.c **** 	    }
 9354              		.loc 1 3036 10 view .LVU2991
 9355              	.LBE549:
 9356              	.LBE548:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9357              		.loc 1 3041 2 is_stmt 1 view .LVU2992
 9358 0134 2FE0     		b	.L1243
 9359              	.LVL1036:
 9360              	.L1245:
2705:src/display.c **** 
 9361              		.loc 1 2705 4 view .LVU2993
 9362 0136 FFF7FEFF 		bl	wait_for_display
 9363              	.LVL1037:
2708:src/display.c **** 	    clr_dot(i);
 9364              		.loc 1 2708 4 view .LVU2994
2708:src/display.c **** 	    clr_dot(i);
 9365              		.loc 1 2708 16 view .LVU2995
 9366              	.L947:
2709:src/display.c **** 	  }
 9367              		.loc 1 2709 6 discriminator 3 view .LVU2996
 9368 013a 3846     		mov	r0, r7
2708:src/display.c **** 	    clr_dot(i);
 9369              		.loc 1 2708 31 is_stmt 0 discriminator 3 view .LVU2997
 9370 013c 0137     		adds	r7, r7, #1
 9371              	.LVL1038:
2709:src/display.c **** 	  }
 9372              		.loc 1 2709 6 discriminator 3 view .LVU2998
 9373 013e FFF7FEFF 		bl	clr_dot
ARM GAS  /tmp/ccwSk7O0.s 			page 280


 9374              	.LVL1039:
2708:src/display.c **** 	    clr_dot(i);
 9375              		.loc 1 2708 31 is_stmt 1 discriminator 3 view .LVU2999
2708:src/display.c **** 	    clr_dot(i);
 9376              		.loc 1 2708 16 discriminator 3 view .LVU3000
2708:src/display.c **** 	    clr_dot(i);
 9377              		.loc 1 2708 4 is_stmt 0 discriminator 3 view .LVU3001
 9378 0142 832F     		cmp	r7, #131
 9379 0144 F9D1     		bne	.L947
 9380 0146 764B     		ldr	r3, .L1284+12
 9381 0148 764F     		ldr	r7, .L1284+16
 9382              	.LVL1040:
2708:src/display.c **** 	    clr_dot(i);
 9383              		.loc 1 2708 4 discriminator 3 view .LVU3002
 9384 014a 0093     		str	r3, [sp]
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9385              		.loc 1 2681 6 view .LVU3003
 9386 014c 0026     		movs	r6, #0
 9387              	.LVL1041:
 9388              	.L948:
2977:src/display.c **** 	    if (p == NULL || cata) {
 9389              		.loc 1 2977 6 is_stmt 1 view .LVU3004
2977:src/display.c **** 	    if (p == NULL || cata) {
 9390              		.loc 1 2977 10 is_stmt 0 view .LVU3005
 9391 014e FFF7FEFF 		bl	get_cmdline
 9392              	.LVL1042:
2978:src/display.c **** 	      if (ShowRegister != -1) {
 9393              		.loc 1 2978 6 is_stmt 1 view .LVU3006
2978:src/display.c **** 	      if (ShowRegister != -1) {
 9394              		.loc 1 2978 9 is_stmt 0 view .LVU3007
 9395 0152 0546     		mov	r5, r0
 9396 0154 18B1     		cbz	r0, .L1042
2978:src/display.c **** 	      if (ShowRegister != -1) {
 9397              		.loc 1 2978 20 discriminator 1 view .LVU3008
 9398 0156 BAF1000F 		cmp	r10, #0
 9399 015a 00F0A480 		beq	.L1043
 9400              	.L1042:
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9401              		.loc 1 2979 8 is_stmt 1 view .LVU3009
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9402              		.loc 1 2979 25 is_stmt 0 view .LVU3010
 9403 015e 754D     		ldr	r5, .L1284+32
 9404 0160 2868     		ldr	r0, [r5]
 9405              	.LVL1043:
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9406              		.loc 1 2979 11 view .LVU3011
 9407 0162 431C     		adds	r3, r0, #1
 9408 0164 00F03581 		beq	.L1044
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9409              		.loc 1 2981 3 is_stmt 1 view .LVU3012
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9410              		.loc 1 2981 8 is_stmt 0 view .LVU3013
 9411 0168 6B49     		ldr	r1, .L1284+4
 9412 016a 0B68     		ldr	r3, [r1]
 9413 016c 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9414              		.loc 1 2981 6 view .LVU3014
ARM GAS  /tmp/ccwSk7O0.s 			page 281


 9415 0170 5107     		lsls	r1, r2, #29
 9416 0172 07D5     		bpl	.L1045
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9417              		.loc 1 2981 17 discriminator 1 view .LVU3015
 9418 0174 93F8DEE7 		ldrb	lr, [r3, #2014]	@ zero_extendqisi2
 9419 0178 0EF00C0C 		and	ip, lr, #12
 9420 017c BCF10C0F 		cmp	ip, #12
 9421 0180 00F06581 		beq	.L1248
 9422              	.LVL1044:
 9423              	.L1045:
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9424              		.loc 1 2997 5 is_stmt 1 view .LVU3016
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9425              		.loc 1 2997 41 is_stmt 0 view .LVU3017
 9426 0184 6428     		cmp	r0, #100
 9427 0186 00F0E580 		beq	.L1249
 9428              	.L1051:
2998:src/display.c **** 		}
 9429              		.loc 1 2998 5 is_stmt 1 view .LVU3018
 9430 018a 0021     		movs	r1, #0
 9431 018c FFF7FEFF 		bl	format_reg
 9432              	.LVL1045:
3011:src/display.c **** 	      goto finish;
 9433              		.loc 1 3011 6 view .LVU3019
3011:src/display.c **** 	      goto finish;
 9434              		.loc 1 3011 9 is_stmt 0 view .LVU3020
 9435 0190 D8F80030 		ldr	r3, [r8]
 9436 0194 73BB     		cbnz	r3, .L1049
 9437              	.L1243:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9438              		.loc 1 3041 2 view .LVU3021
 9439 0196 FFF7FEFF 		bl	set_annunciators
 9440              	.LVL1046:
3042:src/display.c **** 	  ShowRPN = 0;
 9441              		.loc 1 3042 2 is_stmt 1 view .LVU3022
 9442              	.L950:
3043:src/display.c **** 	  dot(RPN, 0);
 9443              		.loc 1 3043 4 view .LVU3023
3043:src/display.c **** 	  dot(RPN, 0);
 9444              		.loc 1 3043 12 is_stmt 0 view .LVU3024
 9445 019a DFF89C81 		ldr	r8, .L1284+36
 9446 019e 0023     		movs	r3, #0
 9447              	.LBB551:
 9448              	.LBB552:
 349:src/display.c **** }
 9449              		.loc 1 349 8 view .LVU3025
 9450 01a0 8D20     		movs	r0, #141
 9451              	.LBE552:
 9452              	.LBE551:
3043:src/display.c **** 	  dot(RPN, 0);
 9453              		.loc 1 3043 12 view .LVU3026
 9454 01a2 C8F80030 		str	r3, [r8]
3044:src/display.c **** 	}
 9455              		.loc 1 3044 4 is_stmt 1 view .LVU3027
 9456              	.LVL1047:
 9457              	.LBB554:
 9458              	.LBI551:
ARM GAS  /tmp/ccwSk7O0.s 			page 282


 347:src/display.c ****   if (on)	set_dot(n);
 9459              		.loc 1 347 6 view .LVU3028
 9460              	.LBB553:
 348:src/display.c ****   else	clr_dot(n);
 9461              		.loc 1 348 3 view .LVU3029
 349:src/display.c **** }
 9462              		.loc 1 349 8 view .LVU3030
 9463 01a6 FFF7FEFF 		bl	clr_dot
 9464              	.LVL1048:
 9465              	.L1087:
 349:src/display.c **** }
 9466              		.loc 1 349 8 is_stmt 0 view .LVU3031
 9467              	.LBE553:
 9468              	.LBE554:
3047:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9469              		.loc 1 3047 2 is_stmt 1 view .LVU3032
3048:src/display.c **** 
 9470              		.loc 1 3048 4 is_stmt 0 view .LVU3033
 9471 01aa D8F80030 		ldr	r3, [r8]
 9472 01ae 002B     		cmp	r3, #0
 9473 01b0 40F0E280 		bne	.L1109
3047:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9474              		.loc 1 3047 31 view .LVU3034
 9475 01b4 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9476 01b6 12F04003 		ands	r3, r2, #64
 9477 01ba 08D0     		beq	.L1088
3048:src/display.c **** 
 9478              		.loc 1 3048 8 view .LVU3035
 9479 01bc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3048:src/display.c **** 
 9480              		.loc 1 3048 4 view .LVU3036
 9481 01be 1B07     		lsls	r3, r3, #28
 9482 01c0 40F10581 		bpl	.L1111
3048:src/display.c **** 
 9483              		.loc 1 3048 30 discriminator 3 view .LVU3037
 9484 01c4 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9485 01c6 012B     		cmp	r3, #1
 9486 01c8 01D0     		beq	.L1088
3048:src/display.c **** 
 9487              		.loc 1 3048 60 discriminator 5 view .LVU3038
 9488 01ca C2F38003 		ubfx	r3, r2, #2, #1
 9489              	.L1088:
3047:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9490              		.loc 1 3047 19 discriminator 9 view .LVU3039
 9491 01ce E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9492 01d0 63F34512 		bfi	r2, r3, #5, #1
 9493 01d4 E275     		strb	r2, [r4, #23]
3051:src/display.c **** 	  annunciators();
 9494              		.loc 1 3051 2 is_stmt 1 discriminator 9 view .LVU3040
3051:src/display.c **** 	  annunciators();
 9495              		.loc 1 3051 5 is_stmt 0 discriminator 9 view .LVU3041
 9496 01d6 002E     		cmp	r6, #0
 9497 01d8 00F0C880 		beq	.L1089
3051:src/display.c **** 	  annunciators();
 9498              		.loc 1 3051 36 discriminator 1 view .LVU3042
 9499 01dc D3B2     		uxtb	r3, r2
3051:src/display.c **** 	  annunciators();
ARM GAS  /tmp/ccwSk7O0.s 			page 283


 9500              		.loc 1 3051 13 discriminator 1 view .LVU3043
 9501 01de 03F02103 		and	r3, r3, #33
 9502 01e2 202B     		cmp	r3, #32
 9503 01e4 00F0C280 		beq	.L1089
 9504              	.L1090:
3052:src/display.c ****  	State2.hms = 0;
 9505              		.loc 1 3052 4 is_stmt 1 view .LVU3044
 9506 01e8 FFF7FEFF 		bl	annunciators
 9507              	.LVL1049:
 9508              	.L1091:
3053:src/display.c **** #else
 9509              		.loc 1 3053 3 view .LVU3045
3053:src/display.c **** #else
 9510              		.loc 1 3053 14 is_stmt 0 view .LVU3046
 9511 01ec E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9512 01ee 6FF30003 		bfc	r3, #0, #1
 9513 01f2 E375     		strb	r3, [r4, #23]
 9514              	.L1049:
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9515              		.loc 1 3060 2 is_stmt 1 view .LVU3047
3061:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9516              		.loc 1 3061 2 view .LVU3048
3062:src/display.c **** 	State2.invalid_disp = 0;
 9517              		.loc 1 3062 2 view .LVU3049
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9518              		.loc 1 3060 17 is_stmt 0 view .LVU3050
 9519 01f4 6369     		ldr	r3, [r4, #20]
3066:src/display.c **** 	State2.disp_small = 0;
 9520              		.loc 1 3066 11 view .LVU3051
 9521 01f6 009A     		ldr	r2, [sp]
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9522              		.loc 1 3060 17 view .LVU3052
 9523 01f8 23F02173 		bic	r3, r3, #42205184
 9524 01fc 23F48053 		bic	r3, r3, #4096
3062:src/display.c **** 	State2.invalid_disp = 0;
 9525              		.loc 1 3062 15 view .LVU3053
 9526 0200 0026     		movs	r6, #0
3060:src/display.c **** 	State2.disp_as_alpha = 0;
 9527              		.loc 1 3060 17 view .LVU3054
 9528 0202 6361     		str	r3, [r4, #20]
3064:src/display.c **** 	DispMsg = CNULL;
 9529              		.loc 1 3064 15 view .LVU3055
 9530 0204 6423     		movs	r3, #100
3062:src/display.c **** 	State2.invalid_disp = 0;
 9531              		.loc 1 3062 15 view .LVU3056
 9532 0206 6674     		strb	r6, [r4, #17]
3063:src/display.c **** 	ShowRegister = regX_idx;
 9533              		.loc 1 3063 2 is_stmt 1 view .LVU3057
3064:src/display.c **** 	DispMsg = CNULL;
 9534              		.loc 1 3064 2 view .LVU3058
3065:src/display.c **** 	DispPlot = 0;
 9535              		.loc 1 3065 10 is_stmt 0 view .LVU3059
 9536 0208 3E60     		str	r6, [r7]
3066:src/display.c **** 	State2.disp_small = 0;
 9537              		.loc 1 3066 11 view .LVU3060
 9538 020a 1680     		strh	r6, [r2]	@ movhi
3064:src/display.c **** 	DispMsg = CNULL;
ARM GAS  /tmp/ccwSk7O0.s 			page 284


 9539              		.loc 1 3064 15 view .LVU3061
 9540 020c 2B60     		str	r3, [r5]
3065:src/display.c **** 	DispPlot = 0;
 9541              		.loc 1 3065 2 is_stmt 1 view .LVU3062
3066:src/display.c **** 	State2.disp_small = 0;
 9542              		.loc 1 3066 2 view .LVU3063
3067:src/display.c **** 	finish_display();
 9543              		.loc 1 3067 2 view .LVU3064
3068:src/display.c **** 	no_status_top = 0;
 9544              		.loc 1 3068 2 view .LVU3065
 9545 020e FFF7FEFF 		bl	finish_display
 9546              	.LVL1050:
3069:src/display.c **** #ifdef CONSOLE
 9547              		.loc 1 3069 2 view .LVU3066
3069:src/display.c **** #ifdef CONSOLE
 9548              		.loc 1 3069 16 is_stmt 0 view .LVU3067
 9549 0212 A9F80060 		strh	r6, [r9]	@ movhi
3073:src/display.c **** #else
 9550              		.loc 1 3073 7 view .LVU3068
 9551 0216 29B0     		add	sp, sp, #164
 9552              		.cfi_remember_state
 9553              		.cfi_def_cfa_offset 36
 9554              		@ sp needed
 9555 0218 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9556              	.LVL1051:
 9557              	.L1244:
 9558              		.cfi_restore_state
2689:src/display.c **** 	  State2.disp_temp = 1;
 9559              		.loc 1 2689 4 is_stmt 1 view .LVU3069
2690:src/display.c **** #ifdef CONSOLE
 9560              		.loc 1 2690 4 view .LVU3070
2694:src/display.c **** 	  return;
 9561              		.loc 1 2694 12 is_stmt 0 view .LVU3071
 9562 021c 4649     		ldr	r1, .L1284+36
2689:src/display.c **** 	  State2.disp_temp = 1;
 9563              		.loc 1 2689 23 view .LVU3072
 9564 021e 23F03003 		bic	r3, r3, #48
 9565 0222 43F02003 		orr	r3, r3, #32
 9566 0226 E375     		strb	r3, [r4, #23]
2694:src/display.c **** 	  return;
 9567              		.loc 1 2694 4 is_stmt 1 view .LVU3073
2694:src/display.c **** 	  return;
 9568              		.loc 1 2694 12 is_stmt 0 view .LVU3074
 9569 0228 0A60     		str	r2, [r1]
2695:src/display.c **** 	}
 9570              		.loc 1 2695 4 is_stmt 1 view .LVU3075
3073:src/display.c **** #else
 9571              		.loc 1 3073 7 is_stmt 0 view .LVU3076
 9572 022a 29B0     		add	sp, sp, #164
 9573              		.cfi_remember_state
 9574              		.cfi_def_cfa_offset 36
 9575              		@ sp needed
 9576 022c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9577              	.LVL1052:
 9578              	.L951:
 9579              		.cfi_restore_state
2753:src/display.c **** 	  bp = scopy(bp, "HYP");
ARM GAS  /tmp/ccwSk7O0.s 			page 285


 9580              		.loc 1 2753 9 is_stmt 1 view .LVU3077
2753:src/display.c **** 	  bp = scopy(bp, "HYP");
 9581              		.loc 1 2753 12 is_stmt 0 view .LVU3078
 9582 0230 9F06     		lsls	r7, r3, #26
 9583 0232 00F1E380 		bmi	.L1250
2765:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9584              		.loc 1 2765 9 is_stmt 1 view .LVU3079
2765:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9585              		.loc 1 2765 12 is_stmt 0 view .LVU3080
 9586 0236 D907     		lsls	r1, r3, #31
 9587 0238 00F17981 		bmi	.L1251
2780:src/display.c **** 	  /* Commands with arguments */
 9588              		.loc 1 2780 9 is_stmt 1 view .LVU3081
2780:src/display.c **** 	  /* Commands with arguments */
 9589              		.loc 1 2780 13 is_stmt 0 view .LVU3082
 9590 023c A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2780:src/display.c **** 	  /* Commands with arguments */
 9591              		.loc 1 2780 12 view .LVU3083
 9592 023e 8A06     		lsls	r2, r1, #26
 9593 0240 40F1E780 		bpl	.L963
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9594              		.loc 1 2783 4 is_stmt 1 view .LVU3084
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9595              		.loc 1 2783 8 is_stmt 0 view .LVU3085
 9596 0244 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9597              		.loc 1 2783 7 view .LVU3086
 9598 0246 4D2B     		cmp	r3, #77
 9599 0248 00F0A681 		beq	.L964
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9600              		.loc 1 2783 28 discriminator 1 view .LVU3087
 9601 024c 03F16C02 		add	r2, r3, #108
 9602 0250 D2B2     		uxtb	r2, r2
 9603 0252 012A     		cmp	r2, #1
 9604 0254 40F2A081 		bls	.L964
2679:src/display.c **** 	const char *p;
 9605              		.loc 1 2679 17 view .LVU3088
 9606 0258 1EA8     		add	r0, sp, #120
 9607              	.LVL1053:
 9608              	.L965:
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9609              		.loc 1 2786 4 is_stmt 1 view .LVU3089
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9610              		.loc 1 2786 35 is_stmt 0 view .LVU3090
 9611 025a 0622     		movs	r2, #6
 9612 025c 3749     		ldr	r1, .L1284+40
 9613 025e 02EB0313 		add	r3, r2, r3, lsl #4
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9614              		.loc 1 2786 9 view .LVU3091
 9615 0262 1944     		add	r1, r1, r3
 9616 0264 FFF7FEFF 		bl	scopy
 9617              	.LVL1054:
2787:src/display.c **** 	  if (State2.dot) {
 9618              		.loc 1 2787 4 is_stmt 1 view .LVU3092
2787:src/display.c **** 	  if (State2.dot) {
 9619              		.loc 1 2787 9 is_stmt 0 view .LVU3093
 9620 0268 354B     		ldr	r3, .L1284+44
ARM GAS  /tmp/ccwSk7O0.s 			page 286


 9621 026a 94F91510 		ldrsb	r1, [r4, #21]
 9622 026e 354A     		ldr	r2, .L1284+48
 9623 0270 12EA2101 		ands	r1, r2, r1, asr #32
 9624 0274 38BF     		it	cc
 9625 0276 1946     		movcc	r1, r3
 9626 0278 FFF7FEFF 		bl	scopy
 9627              	.LVL1055:
2788:src/display.c **** 	    *bp++ = 's';
 9628              		.loc 1 2788 8 view .LVU3094
 9629 027c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9630              	.LVL1056:
2788:src/display.c **** 	    *bp++ = 's';
 9631              		.loc 1 2788 4 is_stmt 1 view .LVU3095
2788:src/display.c **** 	    *bp++ = 's';
 9632              		.loc 1 2788 7 is_stmt 0 view .LVU3096
 9633 027e 5F06     		lsls	r7, r3, #25
 9634 0280 40F19081 		bpl	.L967
2789:src/display.c **** 	    *bp++ = '_';
 9635              		.loc 1 2789 6 is_stmt 1 view .LVU3097
 9636              	.LVL1057:
2789:src/display.c **** 	    *bp++ = '_';
 9637              		.loc 1 2789 12 is_stmt 0 view .LVU3098
 9638 0284 7322     		movs	r2, #115
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9639              		.loc 1 2790 12 view .LVU3099
 9640 0286 5F23     		movs	r3, #95
2789:src/display.c **** 	    *bp++ = '_';
 9641              		.loc 1 2789 12 view .LVU3100
 9642 0288 0270     		strb	r2, [r0]
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9643              		.loc 1 2790 6 is_stmt 1 view .LVU3101
 9644              	.LVL1058:
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9645              		.loc 1 2790 12 is_stmt 0 view .LVU3102
 9646 028a 4370     		strb	r3, [r0, #1]
 9647              	.LVL1059:
 9648              	.L991:
2893:src/display.c **** 	    set_status_top(buf);
 9649              		.loc 1 2893 4 is_stmt 1 view .LVU3103
2893:src/display.c **** 	    set_status_top(buf);
 9650              		.loc 1 2893 7 is_stmt 0 view .LVU3104
 9651 028c BBF1000F 		cmp	fp, #0
 9652 0290 00F0D280 		beq	.L958
 9653              	.L1233:
2894:src/display.c **** 	    no_status_top = 1;
 9654              		.loc 1 2894 6 is_stmt 1 view .LVU3105
 9655              	.LVL1060:
 9656              	.LBB555:
 9657              	.LBI555:
3637:src/display.c **** 	if (no_status_top) return;
 9658              		.loc 1 3637 19 view .LVU3106
 9659              	.LBB556:
3638:src/display.c **** 	if (State2.runmode) {
 9660              		.loc 1 3638 2 view .LVU3107
3638:src/display.c **** 	if (State2.runmode) {
 9661              		.loc 1 3638 5 is_stmt 0 view .LVU3108
 9662 0294 B9F90030 		ldrsh	r3, [r9]
ARM GAS  /tmp/ccwSk7O0.s 			page 287


 9663 0298 002B     		cmp	r3, #0
 9664 029a 7FF4EAAE 		bne	.L954
 9665              	.LBE556:
 9666              	.LBE555:
 9667              	.LBB557:
 9668              	.LBB558:
 9669 029e 1EA8     		add	r0, sp, #120
 9670              	.LVL1061:
3638:src/display.c **** 	if (State2.runmode) {
 9671              		.loc 1 3638 5 view .LVU3109
 9672 02a0 FFF7FEFF 		bl	set_status_top.part.0
 9673              	.LVL1062:
3638:src/display.c **** 	if (State2.runmode) {
 9674              		.loc 1 3638 5 view .LVU3110
 9675 02a4 E5E6     		b	.L954
 9676              	.LVL1063:
 9677              	.L1043:
3638:src/display.c **** 	if (State2.runmode) {
 9678              		.loc 1 3638 5 view .LVU3111
 9679              	.LBE558:
 9680              	.LBE557:
3008:src/display.c **** 	      x_disp = 1;
 9681              		.loc 1 3008 8 is_stmt 1 view .LVU3112
 9682              	.LBB559:
 9683              	.LBI559:
1328:src/display.c ****       int i;
 9684              		.loc 1 1328 17 view .LVU3113
 9685              	.LBB560:
1329:src/display.c ****       int gotdot = -1;
 9686              		.loc 1 1329 7 view .LVU3114
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9687              		.loc 1 1330 7 view .LVU3115
1332:src/display.c **** #endif
 9688              		.loc 1 1332 7 view .LVU3116
1336:src/display.c **** #endif
 9689              		.loc 1 1336 7 view .LVU3117
1339:src/display.c **** 	SET_MANT_SIGN;
 9690              		.loc 1 1339 7 view .LVU3118
1339:src/display.c **** 	SET_MANT_SIGN;
 9691              		.loc 1 1339 10 is_stmt 0 view .LVU3119
 9692 02a6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9693 02a8 2D2B     		cmp	r3, #45
 9694 02aa 00F09B81 		beq	.L1252
 9695              	.LVL1064:
 9696              	.L1054:
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9697              		.loc 1 1344 7 is_stmt 1 view .LVU3120
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9698              		.loc 1 1344 11 is_stmt 0 view .LVU3121
 9699 02ae 1A4B     		ldr	r3, .L1284+4
 9700 02b0 1B68     		ldr	r3, [r3]
 9701 02b2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9702              		.loc 1 1344 10 view .LVU3122
 9703 02b6 13F0010B 		ands	fp, r3, #1
 9704 02ba 00F04981 		beq	.L1055
 9705              	.LVL1065:
ARM GAS  /tmp/ccwSk7O0.s 			page 288


1345:src/display.c **** 	  set_dig(i, *p);
 9706              		.loc 1 1345 12 is_stmt 1 view .LVU3123
 9707 02be 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1345:src/display.c **** 	  set_dig(i, *p);
 9708              		.loc 1 1345 8 is_stmt 0 view .LVU3124
 9709 02c0 4FF0000A 		mov	r10, #0
 9710              	.LVL1066:
1345:src/display.c **** 	  set_dig(i, *p);
 9711              		.loc 1 1345 2 view .LVU3125
 9712 02c4 41B1     		cbz	r1, .L1057
 9713              	.LVL1067:
 9714              	.L1056:
1346:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9715              		.loc 1 1346 4 is_stmt 1 view .LVU3126
 9716 02c6 5046     		mov	r0, r10
 9717 02c8 FFF7FEFF 		bl	set_dig
 9718              	.LVL1068:
1347:src/display.c **** 	}
 9719              		.loc 1 1347 4 view .LVU3127
1345:src/display.c **** 	  set_dig(i, *p);
 9720              		.loc 1 1345 12 is_stmt 0 view .LVU3128
 9721 02cc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9722              	.LVL1069:
1347:src/display.c **** 	}
 9723              		.loc 1 1347 6 view .LVU3129
 9724 02d0 0AF1090A 		add	r10, r10, #9
 9725              	.LVL1070:
1345:src/display.c **** 	  set_dig(i, *p);
 9726              		.loc 1 1345 24 is_stmt 1 view .LVU3130
1345:src/display.c **** 	  set_dig(i, *p);
 9727              		.loc 1 1345 12 view .LVU3131
1345:src/display.c **** 	  set_dig(i, *p);
 9728              		.loc 1 1345 2 is_stmt 0 view .LVU3132
 9729 02d4 0029     		cmp	r1, #0
 9730 02d6 F6D1     		bne	.L1056
 9731              	.LVL1071:
 9732              	.L1057:
1349:src/display.c ****       } else {
 9733              		.loc 1 1349 2 is_stmt 1 view .LVU3133
 9734 02d8 FFF7FEFF 		bl	carry_overflow
 9735              	.LVL1072:
1349:src/display.c ****       } else {
 9736              		.loc 1 1349 2 is_stmt 0 view .LVU3134
 9737              	.LBE560:
 9738              	.LBE559:
3011:src/display.c **** 	      goto finish;
 9739              		.loc 1 3011 6 is_stmt 1 view .LVU3135
3011:src/display.c **** 	      goto finish;
 9740              		.loc 1 3011 9 is_stmt 0 view .LVU3136
 9741 02dc D8F80030 		ldr	r3, [r8]
 9742 02e0 002B     		cmp	r3, #0
 9743 02e2 40F02281 		bne	.L1153
 9744              	.LVL1073:
 9745              	.L1241:
3011:src/display.c **** 	      goto finish;
 9746              		.loc 1 3011 9 view .LVU3137
 9747 02e6 134D     		ldr	r5, .L1284+32
ARM GAS  /tmp/ccwSk7O0.s 			page 289


 9748              	.LVL1074:
 9749              	.L1048:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9750              		.loc 1 3041 2 is_stmt 1 view .LVU3138
 9751 02e8 FFF7FEFF 		bl	set_annunciators
 9752              	.LVL1075:
3042:src/display.c **** 	  ShowRPN = 0;
 9753              		.loc 1 3042 2 view .LVU3139
3042:src/display.c **** 	  ShowRPN = 0;
 9754              		.loc 1 3042 50 is_stmt 0 view .LVU3140
 9755 02ec 3B68     		ldr	r3, [r7]
 9756 02ee 002B     		cmp	r3, #0
 9757 02f0 7FF453AF 		bne	.L950
3042:src/display.c **** 	  ShowRPN = 0;
 9758              		.loc 1 3042 69 discriminator 3 view .LVU3141
 9759 02f4 009B     		ldr	r3, [sp]
 9760 02f6 B3F90030 		ldrsh	r3, [r3]
 9761 02fa 002B     		cmp	r3, #0
 9762 02fc 7FF44DAF 		bne	.L950
3042:src/display.c **** 	  ShowRPN = 0;
 9763              		.loc 1 3042 81 discriminator 4 view .LVU3142
 9764 0300 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9765 0302 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9766 0304 03F00403 		and	r3, r3, #4
 9767 0308 1343     		orrs	r3, r3, r2
 9768 030a 7FF446AF 		bne	.L950
 9769 030e DFF82880 		ldr	r8, .L1284+36
 9770 0312 4AE7     		b	.L1087
 9771              	.L1285:
 9772              		.align	2
 9773              	.L1284:
 9774 0314 00000000 		.word	StateWhileOn
 9775 0318 00000000 		.word	main_ram
 9776 031c 00000000 		.word	.LANCHOR21
 9777 0320 00000000 		.word	DispPlot
 9778 0324 00000000 		.word	DispMsg
 9779 0328 00000000 		.word	.LANCHOR25
 9780 032c 00000000 		.word	.LANCHOR19
 9781 0330 00000000 		.word	LastDisplayedNumber
 9782 0334 00000000 		.word	ShowRegister
 9783 0338 00000000 		.word	ShowRPN
 9784 033c 00000000 		.word	argcmds
 9785 0340 04000000 		.word	.LC23
 9786 0344 00000000 		.word	.LC22
 9787 0348 00000000 		.word	.LANCHOR18
 9788 034c 00000000 		.word	WasDataEntry
 9789 0350 00000000 		.word	ProgFree
 9790              	.LVL1076:
 9791              	.L1249:
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9792              		.loc 1 2997 44 discriminator 1 view .LVU3143
 9793 0354 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9794              		.loc 1 2997 41 discriminator 1 view .LVU3144
 9795 0356 13F00101 		ands	r1, r3, #1
 9796 035a 7FF416AF 		bne	.L1051
 9797              	.LVL1077:
ARM GAS  /tmp/ccwSk7O0.s 			page 290


2998:src/display.c **** 		}
 9798              		.loc 1 2998 5 is_stmt 1 view .LVU3145
 9799 035e FFF7FEFF 		bl	format_reg
 9800              	.LVL1078:
3011:src/display.c **** 	      goto finish;
 9801              		.loc 1 3011 6 view .LVU3146
3011:src/display.c **** 	      goto finish;
 9802              		.loc 1 3011 9 is_stmt 0 view .LVU3147
 9803 0362 D8F80030 		ldr	r3, [r8]
 9804 0366 002B     		cmp	r3, #0
 9805 0368 BED0     		beq	.L1048
 9806 036a 43E7     		b	.L1049
 9807              	.LVL1079:
 9808              	.L1089:
3051:src/display.c **** 	  annunciators();
 9809              		.loc 1 3051 52 discriminator 3 view .LVU3148
 9810 036c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9811 036e 13F0C00F 		tst	r3, #192
 9812 0372 3FF43BAF 		beq	.L1091
 9813 0376 37E7     		b	.L1090
 9814              	.L1109:
 9815 0378 0023     		movs	r3, #0
 9816 037a 28E7     		b	.L1088
 9817              	.LVL1080:
 9818              	.L1246:
 9819              	.LBB589:
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9820              		.loc 1 2733 4 is_stmt 1 view .LVU3149
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9821              		.loc 1 2733 9 is_stmt 0 view .LVU3150
 9822 037c BD4B     		ldr	r3, .L1286
 9823 037e CDF85D60 		str	r6, [sp, #93]	@ unaligned
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9824              		.loc 1 2734 4 is_stmt 1 view .LVU3151
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9825              		.loc 1 2733 9 is_stmt 0 view .LVU3152
 9826 0382 93E80700 		ldm	r3, {r0, r1, r2}
 9827 0386 15AB     		add	r3, sp, #84
 9828 0388 03C3     		stmia	r3!, {r0, r1}
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9829              		.loc 1 2734 4 view .LVU3153
 9830 038a 3146     		mov	r1, r6
 9831 038c BA48     		ldr	r0, .L1286+4
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9832              		.loc 1 2733 9 view .LVU3154
 9833 038e 1A70     		strb	r2, [r3]
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9834              		.loc 1 2734 4 view .LVU3155
 9835 0390 FFF7FEFF 		bl	set_digits_string
 9836              	.LVL1081:
2735:src/display.c **** #ifndef REALBUILD
 9837              		.loc 1 2735 4 is_stmt 1 view .LVU3156
 9838              	.LBB590:
 9839              	.LBI590:
 415:src/display.c ****   if (res) *res++ = ch;
 9840              		.loc 1 415 14 view .LVU3157
 9841              	.LBB591:
ARM GAS  /tmp/ccwSk7O0.s 			page 291


 416:src/display.c ****   else	set_dig(base, ch);
 9842              		.loc 1 416 3 view .LVU3158
 417:src/display.c ****   return res;
 9843              		.loc 1 417 8 view .LVU3159
 9844 0394 7221     		movs	r1, #114
 9845 0396 6C20     		movs	r0, #108
 9846 0398 FFF7FEFF 		bl	set_dig
 9847              	.LVL1082:
 418:src/display.c **** }
 9848              		.loc 1 418 3 view .LVU3160
 418:src/display.c **** }
 9849              		.loc 1 418 3 is_stmt 0 view .LVU3161
 9850              	.LBE591:
 9851              	.LBE590:
2737:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9852              		.loc 1 2737 4 is_stmt 1 view .LVU3162
 9853 039c B749     		ldr	r1, .L1286+8
 9854 039e B848     		ldr	r0, .L1286+12
 9855 03a0 B84F     		ldr	r7, .L1286+16
 9856 03a2 B94D     		ldr	r5, .L1286+20
 9857 03a4 FFF7FEFF 		bl	scopy
 9858              	.LVL1083:
2738:src/display.c **** #endif
 9859              		.loc 1 2738 4 view .LVU3163
 9860 03a8 B849     		ldr	r1, .L1286+24
 9861 03aa B948     		ldr	r0, .L1286+28
 9862 03ac FFF7FEFF 		bl	scopy
 9863              	.LVL1084:
2740:src/display.c **** 	  set_status(vers);
 9864              		.loc 1 2740 4 view .LVU3164
 9865 03b0 B849     		ldr	r1, .L1286+32
 9866 03b2 0422     		movs	r2, #4
 9867 03b4 17A8     		add	r0, sp, #92
 9868 03b6 FFF7FEFF 		bl	xcopy
 9869              	.LVL1085:
2741:src/display.c **** 	  skip = 1;
 9870              		.loc 1 2741 4 view .LVU3165
 9871 03ba 15A8     		add	r0, sp, #84
 9872 03bc FFF7FEFF 		bl	set_status
 9873              	.LVL1086:
2742:src/display.c **** 	  goto nostk;
 9874              		.loc 1 2742 4 view .LVU3166
2743:src/display.c **** 	} else if (State2.confirm) {
 9875              		.loc 1 2743 4 view .LVU3167
2743:src/display.c **** 	} else if (State2.confirm) {
 9876              		.loc 1 2743 4 is_stmt 0 view .LVU3168
 9877              	.LBE589:
2973:src/display.c **** 	if (!skip) {
 9878              		.loc 1 2973 2 is_stmt 1 view .LVU3169
 9879 03c0 B54B     		ldr	r3, .L1286+36
 9880 03c2 0093     		str	r3, [sp]
 9881 03c4 FFF7FEFF 		bl	show_flags
 9882              	.LVL1087:
2974:src/display.c **** 	  if (State2.runmode) {
 9883              		.loc 1 2974 2 view .LVU3170
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9884              		.loc 1 3041 2 view .LVU3171
ARM GAS  /tmp/ccwSk7O0.s 			page 292


 9885 03c8 FFF7FEFF 		bl	set_annunciators
 9886              	.LVL1088:
3042:src/display.c **** 	  ShowRPN = 0;
 9887              		.loc 1 3042 2 view .LVU3172
 9888 03cc E5E6     		b	.L950
 9889              	.LVL1089:
 9890              	.L1111:
3042:src/display.c **** 	  ShowRPN = 0;
 9891              		.loc 1 3042 2 is_stmt 0 view .LVU3173
 9892 03ce 0123     		movs	r3, #1
 9893 03d0 FDE6     		b	.L1088
 9894              	.LVL1090:
 9895              	.L1044:
3006:src/display.c **** 	    } else {
 9896              		.loc 1 3006 3 is_stmt 1 view .LVU3174
 9897 03d2 B248     		ldr	r0, .L1286+40
 9898 03d4 2421     		movs	r1, #36
 9899 03d6 FFF7FEFF 		bl	set_digits_string
 9900              	.LVL1091:
3011:src/display.c **** 	      goto finish;
 9901              		.loc 1 3011 6 view .LVU3175
3011:src/display.c **** 	      goto finish;
 9902              		.loc 1 3011 9 is_stmt 0 view .LVU3176
 9903 03da D8F80030 		ldr	r3, [r8]
 9904 03de 002B     		cmp	r3, #0
 9905 03e0 3FF4D9AE 		beq	.L1243
 9906 03e4 06E7     		b	.L1049
 9907              	.LVL1092:
 9908              	.L952:
2751:src/display.c **** 	  }
 9909              		.loc 1 2751 6 is_stmt 1 view .LVU3177
 9910 03e6 AC4B     		ldr	r3, .L1286+36
 9911 03e8 AD48     		ldr	r0, .L1286+44
 9912 03ea 0093     		str	r3, [sp]
 9913 03ec A54F     		ldr	r7, .L1286+16
 9914 03ee FFF7FEFF 		bl	set_status
 9915              	.LVL1093:
2971:src/display.c ****       nostk:
 9916              		.loc 1 2971 2 view .LVU3178
 9917 03f2 FFF7FEFF 		bl	show_stack
 9918              	.LVL1094:
2973:src/display.c **** 	if (!skip) {
 9919              		.loc 1 2973 2 view .LVU3179
 9920 03f6 FFF7FEFF 		bl	show_flags
 9921              	.LVL1095:
2974:src/display.c **** 	  if (State2.runmode) {
 9922              		.loc 1 2974 2 view .LVU3180
 9923 03fa 44E6     		b	.L955
 9924              	.L1250:
2754:src/display.c **** 	  if (! State2.dot)
 9925              		.loc 1 2754 4 view .LVU3181
2754:src/display.c **** 	  if (! State2.dot)
 9926              		.loc 1 2754 9 is_stmt 0 view .LVU3182
 9927 03fc A949     		ldr	r1, .L1286+48
 9928 03fe 1EA8     		add	r0, sp, #120
 9929              	.LVL1096:
2754:src/display.c **** 	  if (! State2.dot)
ARM GAS  /tmp/ccwSk7O0.s 			page 293


 9930              		.loc 1 2754 9 view .LVU3183
 9931 0400 FFF7FEFF 		bl	scopy
 9932              	.LVL1097:
2755:src/display.c **** 	    *bp++ = '\235';
 9933              		.loc 1 2755 8 view .LVU3184
 9934 0404 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9935              	.LVL1098:
2755:src/display.c **** 	    *bp++ = '\235';
 9936              		.loc 1 2755 4 is_stmt 1 view .LVU3185
2755:src/display.c **** 	    *bp++ = '\235';
 9937              		.loc 1 2755 7 is_stmt 0 view .LVU3186
 9938 0406 5D06     		lsls	r5, r3, #25
 9939 0408 3FF540AF 		bmi	.L991
2756:src/display.c **** 	  if (yreg_enabled) {
 9940              		.loc 1 2756 6 is_stmt 1 view .LVU3187
 9941              	.LVL1099:
2756:src/display.c **** 	  if (yreg_enabled) {
 9942              		.loc 1 2756 12 is_stmt 0 view .LVU3188
 9943 040c 9D23     		movs	r3, #157
 9944 040e 0370     		strb	r3, [r0]
 9945 0410 3CE7     		b	.L991
 9946              	.LVL1100:
 9947              	.L963:
2818:src/display.c **** 	  *bp++ = 'x';
 9948              		.loc 1 2818 9 is_stmt 1 view .LVU3189
2818:src/display.c **** 	  *bp++ = 'x';
 9949              		.loc 1 2818 19 is_stmt 0 view .LVU3190
 9950 0412 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2818:src/display.c **** 	  *bp++ = 'x';
 9951              		.loc 1 2818 12 view .LVU3191
 9952 0414 072A     		cmp	r2, #7
 9953 0416 00F06781 		beq	.L974
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9954              		.loc 1 2819 4 is_stmt 1 view .LVU3192
 9955              	.LVL1101:
2820:src/display.c **** 	  *bp++ = '_';
 9956              		.loc 1 2820 33 is_stmt 0 view .LVU3193
 9957 041a A34B     		ldr	r3, .L1286+52
2820:src/display.c **** 	  *bp++ = '_';
 9958              		.loc 1 2820 10 view .LVU3194
 9959 041c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9960 041e 8DF87930 		strb	r3, [sp, #121]
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9961              		.loc 1 2819 10 view .LVU3195
 9962 0422 7822     		movs	r2, #120
2821:src/display.c **** 	  *bp++ = '?';
 9963              		.loc 1 2821 10 view .LVU3196
 9964 0424 43F65F73 		movw	r3, #16223
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9965              		.loc 1 2819 10 view .LVU3197
 9966 0428 8DF87820 		strb	r2, [sp, #120]
2820:src/display.c **** 	  *bp++ = '_';
 9967              		.loc 1 2820 4 is_stmt 1 view .LVU3198
 9968              	.LVL1102:
2821:src/display.c **** 	  *bp++ = '?';
 9969              		.loc 1 2821 4 view .LVU3199
2822:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/ccwSk7O0.s 			page 294


 9970              		.loc 1 2822 4 view .LVU3200
2821:src/display.c **** 	  *bp++ = '?';
 9971              		.loc 1 2821 10 is_stmt 0 view .LVU3201
 9972 042c ADF87A30 		strh	r3, [sp, #122]	@ movhi
2823:src/display.c **** 	    set_status_top(buf);
 9973              		.loc 1 2823 4 is_stmt 1 view .LVU3202
2823:src/display.c **** 	    set_status_top(buf);
 9974              		.loc 1 2823 7 is_stmt 0 view .LVU3203
 9975 0430 BBF1000F 		cmp	fp, #0
 9976 0434 7FF42EAF 		bne	.L1233
 9977              	.LVL1103:
 9978              	.L958:
2763:src/display.c **** 	  }
 9979              		.loc 1 2763 6 is_stmt 1 view .LVU3204
 9980 0438 1EA8     		add	r0, sp, #120
 9981 043a FFF7FEFF 		bl	set_status
 9982              	.LVL1104:
2971:src/display.c ****       nostk:
 9983              		.loc 1 2971 2 view .LVU3205
 9984 043e 964B     		ldr	r3, .L1286+36
 9985 0440 0093     		str	r3, [sp]
 9986 0442 904F     		ldr	r7, .L1286+16
 9987 0444 FFF7FEFF 		bl	show_stack
 9988              	.LVL1105:
2973:src/display.c **** 	if (!skip) {
 9989              		.loc 1 2973 2 view .LVU3206
 9990 0448 FFF7FEFF 		bl	show_flags
 9991              	.LVL1106:
2974:src/display.c **** 	  if (State2.runmode) {
 9992              		.loc 1 2974 2 view .LVU3207
 9993 044c 1BE6     		b	.L955
 9994              	.LVL1107:
 9995              	.L1248:
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9996              		.loc 1 2981 34 is_stmt 0 discriminator 2 view .LVU3208
 9997 044e 1207     		lsls	r2, r2, #28
 9998 0450 3FF598AE 		bmi	.L1045
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9999              		.loc 1 2981 49 discriminator 3 view .LVU3209
 10000 0454 93F8EBA7 		ldrb	r10, [r3, #2027]	@ zero_extendqisi2
 10001              	.LVL1108:
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 10002              		.loc 1 2981 37 discriminator 3 view .LVU3210
 10003 0458 1AF0080A 		ands	r10, r10, #8
 10004 045c 7FF492AE 		bne	.L1045
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 10005              		.loc 1 2982 5 is_stmt 1 view .LVU3211
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 10006              		.loc 1 2982 8 is_stmt 0 view .LVU3212
 10007 0460 1EF0100F 		tst	lr, #16
 10008 0464 40F0D982 		bne	.L1253
 10009              	.L1046:
2986:src/display.c **** 		    State2.hms = 0;
 10010              		.loc 1 2986 5 is_stmt 1 view .LVU3213
2986:src/display.c **** 		    State2.hms = 0;
 10011              		.loc 1 2986 9 is_stmt 0 view .LVU3214
 10012 0468 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 295


2986:src/display.c **** 		    State2.hms = 0;
 10013              		.loc 1 2986 8 view .LVU3215
 10014 046a 13F00101 		ands	r1, r3, #1
 10015 046e 00F08F81 		beq	.L1047
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 10016              		.loc 1 2987 7 is_stmt 1 view .LVU3216
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 10017              		.loc 1 2987 18 is_stmt 0 view .LVU3217
 10018 0472 6FF30003 		bfc	r3, #0, #1
2988:src/display.c **** 		    State2.hms = 1;
 10019              		.loc 1 2988 7 view .LVU3218
 10020 0476 0021     		movs	r1, #0
 10021 0478 6E20     		movs	r0, #110
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 10022              		.loc 1 2987 18 view .LVU3219
 10023 047a E375     		strb	r3, [r4, #23]
2988:src/display.c **** 		    State2.hms = 1;
 10024              		.loc 1 2988 7 is_stmt 1 view .LVU3220
 10025 047c FFF7FEFF 		bl	format_reg
 10026              	.LVL1109:
2989:src/display.c **** 		  }
 10027              		.loc 1 2989 7 view .LVU3221
2989:src/display.c **** 		  }
 10028              		.loc 1 2989 18 is_stmt 0 view .LVU3222
 10029 0480 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3011:src/display.c **** 	      goto finish;
 10030              		.loc 1 3011 9 view .LVU3223
 10031 0482 D8F80020 		ldr	r2, [r8]
2989:src/display.c **** 		  }
 10032              		.loc 1 2989 18 view .LVU3224
 10033 0486 43F00103 		orr	r3, r3, #1
 10034 048a E375     		strb	r3, [r4, #23]
 10035              	.LVL1110:
3011:src/display.c **** 	      goto finish;
 10036              		.loc 1 3011 6 is_stmt 1 view .LVU3225
3011:src/display.c **** 	      goto finish;
 10037              		.loc 1 3011 9 is_stmt 0 view .LVU3226
 10038 048c 002A     		cmp	r2, #0
 10039 048e 3FF42BAF 		beq	.L1048
 10040 0492 AFE6     		b	.L1049
 10041              	.LVL1111:
 10042              	.L1247:
 10043              	.LBB592:
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10044              		.loc 1 3020 6 discriminator 1 view .LVU3227
 10045 0494 8549     		ldr	r1, .L1286+56
 10046 0496 0BEB8B03 		add	r3, fp, fp, lsl #2
3021:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 10047              		.loc 1 3021 21 discriminator 1 view .LVU3228
 10048 049a 0BF0010B 		and	fp, fp, #1
 10049              	.LVL1112:
3020:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10050              		.loc 1 3020 6 discriminator 1 view .LVU3229
 10051 049e 1944     		add	r1, r1, r3
 10052 04a0 1EA8     		add	r0, sp, #120
 10053 04a2 0BF1030B 		add	fp, fp, #3
 10054 04a6 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccwSk7O0.s 			page 296


 10055 04a8 FFF7FEFF 		bl	scopy_spc
 10056              	.LVL1113:
 10057 04ac 5A46     		mov	r2, fp
 10058 04ae 4146     		mov	r1, r8
 10059 04b0 FFF7FEFF 		bl	num_arg_0
 10060              	.LVL1114:
3022:src/display.c **** #ifndef REALBUILD
 10061              		.loc 1 3022 6 is_stmt 1 discriminator 1 view .LVU3230
 10062 04b4 0921     		movs	r1, #9
 10063 04b6 1EA8     		add	r0, sp, #120
 10064 04b8 FFF7FEFF 		bl	set_digits_string
 10065              	.LVL1115:
3024:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 10066              		.loc 1 3024 6 discriminator 1 view .LVU3231
 10067 04bc 2822     		movs	r2, #40
 10068 04be 2946     		mov	r1, r5
 10069 04c0 1EA8     		add	r0, sp, #120
 10070 04c2 FFF7FEFF 		bl	xset
 10071              	.LVL1116:
3025:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 10072              		.loc 1 3025 6 discriminator 1 view .LVU3232
 10073 04c6 0121     		movs	r1, #1
 10074 04c8 DAF80000 		ldr	r0, [r10]
 10075 04cc 2A46     		mov	r2, r5
 10076 04ce FFF7FEFF 		bl	set_exp
 10077              	.LVL1117:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10078              		.loc 1 3026 6 discriminator 1 view .LVU3233
 10079 04d2 7749     		ldr	r1, .L1286+60
 10080 04d4 019B     		ldr	r3, [sp, #4]
 10081 04d6 1944     		add	r1, r1, r3
 10082 04d8 0EE6     		b	.L1093
 10083              	.LVL1118:
 10084              	.L1074:
3026:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10085              		.loc 1 3026 6 is_stmt 0 discriminator 1 view .LVU3234
 10086              	.LBE592:
 10087              	.LBB593:
 10088              	.LBB580:
1442:src/display.c **** 	    gotdot = i;
 10089              		.loc 1 1442 4 is_stmt 1 view .LVU3235
1442:src/display.c **** 	    gotdot = i;
 10090              		.loc 1 1442 7 is_stmt 0 view .LVU3236
 10091 04da BAF1FF3F 		cmp	r10, #-1
 10092 04de 08BF     		it	eq
 10093 04e0 DA46     		moveq	r10, fp
 10094              	.LVL1119:
1444:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10095              		.loc 1 1444 4 is_stmt 1 view .LVU3237
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10096              		.loc 1 1445 6 view .LVU3238
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10097              		.loc 1 1445 13 is_stmt 0 view .LVU3239
 10098 04e2 AAF11B0A 		sub	r10, r10, #27
 10099              	.LVL1120:
1446:src/display.c **** 	      break;
 10100              		.loc 1 1446 6 is_stmt 1 view .LVU3240
ARM GAS  /tmp/ccwSk7O0.s 			page 297


1446:src/display.c **** 	      break;
 10101              		.loc 1 1446 9 is_stmt 0 view .LVU3241
 10102 04e6 BAF1000F 		cmp	r10, #0
 10103 04ea 13DD     		ble	.L1059
1446:src/display.c **** 	      break;
 10104              		.loc 1 1446 9 view .LVU3242
 10105 04ec 0296     		str	r6, [sp, #8]
 10106 04ee 5646     		mov	r6, r10
 10107              	.LVL1121:
1446:src/display.c **** 	      break;
 10108              		.loc 1 1446 9 view .LVU3243
 10109 04f0 BA46     		mov	r10, r7
 10110              	.LVL1122:
1446:src/display.c **** 	      break;
 10111              		.loc 1 1446 9 view .LVU3244
 10112 04f2 2F46     		mov	r7, r5
 10113 04f4 019D     		ldr	r5, [sp, #4]
 10114              	.LVL1123:
 10115              	.L1078:
1449:src/display.c **** 	      break;
 10116              		.loc 1 1449 6 is_stmt 1 view .LVU3245
1452:src/display.c **** 	  }
 10117              		.loc 1 1452 6 view .LVU3246
 10118              	.LBB561:
 10119              	.LBB562:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 10120              		.loc 1 378 3 view .LVU3247
 10121 04f6 3046     		mov	r0, r6
 10122              	.LBE562:
 10123              	.LBE561:
1449:src/display.c **** 	      break;
 10124              		.loc 1 1449 9 is_stmt 0 view .LVU3248
 10125 04f8 0DB1     		cbz	r5, .L1079
 10126              	.LVL1124:
1449:src/display.c **** 	      break;
 10127              		.loc 1 1449 27 view .LVU3249
 10128 04fa 092E     		cmp	r6, #9
 10129 04fc 07D0     		beq	.L1230
 10130              	.L1079:
1452:src/display.c **** 	  }
 10131              		.loc 1 1452 6 view .LVU3250
 10132 04fe 6D4B     		ldr	r3, .L1286+64
 10133 0500 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10134              	.LVL1125:
 10135              	.LBB564:
 10136              	.LBI561:
 375:src/display.c ****   if (sep == SEP_NONE)
 10137              		.loc 1 375 14 is_stmt 1 view .LVU3251
 10138              	.LBB563:
 376:src/display.c ****     return res;
 10139              		.loc 1 376 3 view .LVU3252
 376:src/display.c ****     return res;
 10140              		.loc 1 376 6 is_stmt 0 view .LVU3253
 10141 0502 09B1     		cbz	r1, .L1080
 10142 0504 FFF7FEFF 		bl	set_separator.part.0
 10143              	.LVL1126:
 10144              	.L1080:
ARM GAS  /tmp/ccwSk7O0.s 			page 298


 376:src/display.c ****     return res;
 10145              		.loc 1 376 6 view .LVU3254
 10146              	.LBE563:
 10147              	.LBE564:
1444:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10148              		.loc 1 1444 4 is_stmt 1 view .LVU3255
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10149              		.loc 1 1445 6 view .LVU3256
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10150              		.loc 1 1445 13 is_stmt 0 view .LVU3257
 10151 0508 1B3E     		subs	r6, r6, #27
 10152              	.LVL1127:
1446:src/display.c **** 	      break;
 10153              		.loc 1 1446 6 is_stmt 1 view .LVU3258
1446:src/display.c **** 	      break;
 10154              		.loc 1 1446 9 is_stmt 0 view .LVU3259
 10155 050a 002E     		cmp	r6, #0
 10156 050c F3DC     		bgt	.L1078
 10157              	.L1230:
1446:src/display.c **** 	      break;
 10158              		.loc 1 1446 9 view .LVU3260
 10159 050e 029E     		ldr	r6, [sp, #8]
 10160              	.LVL1128:
1446:src/display.c **** 	      break;
 10161              		.loc 1 1446 9 view .LVU3261
 10162 0510 3D46     		mov	r5, r7
 10163 0512 5746     		mov	r7, r10
 10164              	.LVL1129:
 10165              	.L1059:
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10166              		.loc 1 1456 4 is_stmt 1 view .LVU3262
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10167              		.loc 1 1456 8 is_stmt 0 view .LVU3263
 10168 0514 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10169              		.loc 1 1456 7 view .LVU3264
 10170 0516 A2F14401 		sub	r1, r2, #68
 10171 051a 0129     		cmp	r1, #1
 10172 051c 40F20781 		bls	.L1254
 10173              	.L1081:
 10174              	.LVL1130:
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10175              		.loc 1 1456 7 view .LVU3265
 10176              	.LBE580:
 10177              	.LBE593:
3011:src/display.c **** 	      goto finish;
 10178              		.loc 1 3011 6 is_stmt 1 view .LVU3266
3011:src/display.c **** 	      goto finish;
 10179              		.loc 1 3011 9 is_stmt 0 view .LVU3267
 10180 0520 D8F80030 		ldr	r3, [r8]
 10181 0524 002B     		cmp	r3, #0
 10182 0526 3FF4DEAE 		beq	.L1241
 10183              	.L1153:
 10184 052a 574D     		ldr	r5, .L1286+20
 10185 052c 62E6     		b	.L1049
 10186              	.LVL1131:
 10187              	.L1251:
ARM GAS  /tmp/ccwSk7O0.s 			page 299


2767:src/display.c **** 	  if (State2.numdigit > 0)
 10188              		.loc 1 2767 4 is_stmt 1 view .LVU3268
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10189              		.loc 1 2767 9 is_stmt 0 view .LVU3269
 10190 052e 2E22     		movs	r2, #46
 10191 0530 6149     		ldr	r1, .L1286+68
 10192 0532 1EA8     		add	r0, sp, #120
 10193              	.LVL1132:
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10194              		.loc 1 2767 9 view .LVU3270
 10195 0534 FFF7FEFF 		bl	scopy_char
 10196              	.LVL1133:
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10197              		.loc 1 2768 14 view .LVU3271
 10198 0538 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2767:src/display.c **** 	  if (State2.numdigit > 0)
 10199              		.loc 1 2767 9 view .LVU3272
 10200 053a 0346     		mov	r3, r0
 10201              	.LVL1134:
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10202              		.loc 1 2768 4 is_stmt 1 view .LVU3273
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10203              		.loc 1 2768 7 is_stmt 0 view .LVU3274
 10204 053c 002A     		cmp	r2, #0
 10205 053e 40F0CE80 		bne	.L1255
 10206              	.L961:
2771:src/display.c **** 	  if (yreg_enabled) {
 10207              		.loc 1 2771 4 is_stmt 1 view .LVU3275
 10208              	.LVL1135:
2771:src/display.c **** 	  if (yreg_enabled) {
 10209              		.loc 1 2771 10 is_stmt 0 view .LVU3276
 10210 0542 5F22     		movs	r2, #95
 10211 0544 1A70     		strb	r2, [r3]
2772:src/display.c **** 	    set_status_top(buf);
 10212              		.loc 1 2772 4 is_stmt 1 view .LVU3277
2772:src/display.c **** 	    set_status_top(buf);
 10213              		.loc 1 2772 7 is_stmt 0 view .LVU3278
 10214 0546 BBF1000F 		cmp	fp, #0
 10215 054a 7FF4A3AE 		bne	.L1233
2772:src/display.c **** 	    set_status_top(buf);
 10216              		.loc 1 2772 7 view .LVU3279
 10217 054e 73E7     		b	.L958
 10218              	.LVL1136:
 10219              	.L1055:
 10220              	.LBB594:
 10221              	.LBB581:
1351:src/display.c **** 
 10222              		.loc 1 1351 2 is_stmt 1 view .LVU3280
 10223 0550 FFF7FEFF 		bl	set_separator_decimal_modes
 10224              	.LVL1137:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10225              		.loc 1 1353 2 view .LVU3281
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10226              		.loc 1 1355 2 view .LVU3282
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10227              		.loc 1 1355 5 is_stmt 0 view .LVU3283
 10228 0554 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 300


 10229              	.LBB565:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10230              		.loc 1 1362 15 view .LVU3284
 10231 0556 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 10232              	.LBE565:
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10233              		.loc 1 1355 5 view .LVU3285
 10234 0558 012B     		cmp	r3, #1
 10235 055a 40F20081 		bls	.L1058
 10236              	.LVL1138:
 10237              	.LBB566:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10238              		.loc 1 1362 14 is_stmt 1 view .LVU3286
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10239              		.loc 1 1362 4 is_stmt 0 view .LVU3287
 10240 055e 0029     		cmp	r1, #0
 10241 0560 00F05582 		beq	.L1102
1359:src/display.c **** 	  int j;
 10242              		.loc 1 1359 10 view .LVU3288
 10243 0564 5B46     		mov	r3, fp
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10244              		.loc 1 1362 10 view .LVU3289
 10245 0566 5A46     		mov	r2, fp
 10246 0568 AC46     		mov	ip, r5
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10247              		.loc 1 1362 4 view .LVU3290
 10248 056a 0846     		mov	r0, r1
 10249              	.LBE566:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10250              		.loc 1 1330 11 view .LVU3291
 10251 056c 4FF0FF3E 		mov	lr, #-1
 10252 0570 04E0     		b	.L1061
 10253              	.LVL1139:
 10254              	.L1060:
 10255              	.LBB567:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10256              		.loc 1 1362 28 is_stmt 1 view .LVU3292
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10257              		.loc 1 1362 15 is_stmt 0 view .LVU3293
 10258 0572 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10259              		.loc 1 1362 29 view .LVU3294
 10260 0576 0132     		adds	r2, r2, #1
 10261              	.LVL1140:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10262              		.loc 1 1362 14 is_stmt 1 view .LVU3295
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10263              		.loc 1 1362 4 is_stmt 0 view .LVU3296
 10264 0578 0028     		cmp	r0, #0
 10265 057a 3AD0     		beq	.L1256
 10266              	.LVL1141:
 10267              	.L1061:
1363:src/display.c **** 	      gotdot = j;
 10268              		.loc 1 1363 6 is_stmt 1 view .LVU3297
1363:src/display.c **** 	      gotdot = j;
 10269              		.loc 1 1363 9 is_stmt 0 view .LVU3298
 10270 057c 2E28     		cmp	r0, #46
ARM GAS  /tmp/ccwSk7O0.s 			page 301


 10271 057e F8D1     		bne	.L1060
1364:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10272              		.loc 1 1364 8 is_stmt 1 view .LVU3299
 10273              	.LVL1142:
1366:src/display.c **** #  endif
 10274              		.loc 1 1366 8 view .LVU3300
1363:src/display.c **** 	      gotdot = j;
 10275              		.loc 1 1363 22 is_stmt 0 view .LVU3301
 10276 0580 BEF1FF3F 		cmp	lr, #-1
 10277 0584 F5D1     		bne	.L1060
1366:src/display.c **** #  endif
 10278              		.loc 1 1366 29 view .LVU3302
 10279 0586 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10280 058a A3F12E03 		sub	r3, #46
 10281 058e B3FA83F3 		clz	r3, r3
1366:src/display.c **** #  endif
 10282              		.loc 1 1366 19 view .LVU3303
 10283 0592 9646     		mov	lr, r2
1366:src/display.c **** #  endif
 10284              		.loc 1 1366 29 view .LVU3304
 10285 0594 5B09     		lsrs	r3, r3, #5
 10286              	.LVL1143:
1366:src/display.c **** #  endif
 10287              		.loc 1 1366 29 view .LVU3305
 10288 0596 ECE7     		b	.L1060
 10289              	.LVL1144:
 10290              	.L964:
1366:src/display.c **** #  endif
 10291              		.loc 1 1366 29 view .LVU3306
 10292              	.LBE567:
 10293              	.LBE581:
 10294              	.LBE594:
2784:src/display.c **** #endif
 10295              		.loc 1 2784 6 is_stmt 1 view .LVU3307
2784:src/display.c **** #endif
 10296              		.loc 1 2784 11 is_stmt 0 view .LVU3308
 10297 0598 4849     		ldr	r1, .L1286+72
 10298 059a 1EA8     		add	r0, sp, #120
 10299              	.LVL1145:
2784:src/display.c **** #endif
 10300              		.loc 1 2784 11 view .LVU3309
 10301 059c FFF7FEFF 		bl	scopy
 10302              	.LVL1146:
2784:src/display.c **** #endif
 10303              		.loc 1 2784 11 view .LVU3310
 10304 05a0 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10305 05a2 5AE6     		b	.L965
 10306              	.L967:
2791:src/display.c **** 	    *bp++ = '\021';
 10307              		.loc 1 2791 11 is_stmt 1 view .LVU3311
2791:src/display.c **** 	    *bp++ = '\021';
 10308              		.loc 1 2791 14 is_stmt 0 view .LVU3312
 10309 05a4 012D     		cmp	r5, #1
 10310 05a6 00F0EE80 		beq	.L1257
2798:src/display.c **** 	      *bp++ = '.';
 10311              		.loc 1 2798 6 is_stmt 1 view .LVU3313
2798:src/display.c **** 	      *bp++ = '.';
ARM GAS  /tmp/ccwSk7O0.s 			page 302


 10312              		.loc 1 2798 10 is_stmt 0 view .LVU3314
 10313 05aa A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2798:src/display.c **** 	      *bp++ = '.';
 10314              		.loc 1 2798 9 view .LVU3315
 10315 05ac DD07     		lsls	r5, r3, #31
2799:src/display.c **** 	    if (State2.numdigit > 0) {
 10316              		.loc 1 2799 8 is_stmt 1 view .LVU3316
 10317              	.LVL1147:
2799:src/display.c **** 	    if (State2.numdigit > 0) {
 10318              		.loc 1 2799 14 is_stmt 0 view .LVU3317
 10319 05ae 44BF     		itt	mi
 10320 05b0 2E23     		movmi	r3, #46
 10321 05b2 00F8013B 		strbmi	r3, [r0], #1
 10322              	.LVL1148:
2800:src/display.c **** 	      if (State2.shuffle)
 10323              		.loc 1 2800 6 is_stmt 1 view .LVU3318
2800:src/display.c **** 	      if (State2.shuffle)
 10324              		.loc 1 2800 16 is_stmt 0 view .LVU3319
 10325 05b6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2800:src/display.c **** 	      if (State2.shuffle)
 10326              		.loc 1 2800 9 view .LVU3320
 10327 05b8 8AB1     		cbz	r2, .L971
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10328              		.loc 1 2801 8 is_stmt 1 view .LVU3321
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10329              		.loc 1 2801 12 is_stmt 0 view .LVU3322
 10330 05ba A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10331              		.loc 1 2801 11 view .LVU3323
 10332 05bc 9907     		lsls	r1, r3, #30
 10333 05be 40F12882 		bpl	.L972
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10334              		.loc 1 2802 3 is_stmt 1 view .LVU3324
 10335              	.LVL1149:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10336              		.loc 1 2802 17 is_stmt 0 view .LVU3325
 10337 05c2 2289     		ldrh	r2, [r4, #8]
 10338              	.LVL1150:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10339              		.loc 1 2802 34 is_stmt 1 view .LVU3326
 10340 05c4 3E49     		ldr	r1, .L1286+76
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10341              		.loc 1 2802 10 is_stmt 0 view .LVU3327
 10342 05c6 0023     		movs	r3, #0
 10343              	.LVL1151:
 10344              	.L973:
2803:src/display.c **** 	      else
 10345              		.loc 1 2803 5 is_stmt 1 discriminator 3 view .LVU3328
2803:src/display.c **** 	      else
 10346              		.loc 1 2803 24 is_stmt 0 discriminator 3 view .LVU3329
 10347 05c8 02F00305 		and	r5, r2, #3
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10348              		.loc 1 2802 54 discriminator 3 view .LVU3330
 10349 05cc 0133     		adds	r3, r3, #1
 10350              	.LVL1152:
2803:src/display.c **** 	      else
 10351              		.loc 1 2803 11 discriminator 3 view .LVU3331
ARM GAS  /tmp/ccwSk7O0.s 			page 303


 10352 05ce 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 10353 05d0 00F8015B 		strb	r5, [r0], #1
 10354              	.LVL1153:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10355              		.loc 1 2802 53 is_stmt 1 discriminator 3 view .LVU3332
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10356              		.loc 1 2802 42 is_stmt 0 discriminator 3 view .LVU3333
 10357 05d4 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10358              		.loc 1 2802 3 discriminator 3 view .LVU3334
 10359 05d6 9D42     		cmp	r5, r3
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10360              		.loc 1 2802 60 discriminator 3 view .LVU3335
 10361 05d8 4FEAA202 		asr	r2, r2, #2
 10362              	.LVL1154:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10363              		.loc 1 2802 34 is_stmt 1 discriminator 3 view .LVU3336
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10364              		.loc 1 2802 3 is_stmt 0 discriminator 3 view .LVU3337
 10365 05dc F4DC     		bgt	.L973
 10366              	.LVL1155:
 10367              	.L971:
2808:src/display.c **** 	  }
 10368              		.loc 1 2808 6 is_stmt 1 view .LVU3338
2808:src/display.c **** 	  }
 10369              		.loc 1 2808 12 is_stmt 0 view .LVU3339
 10370 05de 5F23     		movs	r3, #95
 10371 05e0 0370     		strb	r3, [r0]
 10372 05e2 53E6     		b	.L991
 10373              	.LVL1156:
 10374              	.L1252:
 10375              	.LBB595:
 10376              	.LBB582:
1340:src/display.c **** 	p++;
 10377              		.loc 1 1340 2 is_stmt 1 view .LVU3340
 10378              	.LBB568:
 10379              	.LBI568:
 304:src/display.c **** {
 10380              		.loc 1 304 13 view .LVU3341
 10381              	.LBB569:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10382              		.loc 1 306 3 view .LVU3342
 306:src/display.c ****   set_dot(MANT_SIGN);
 10383              		.loc 1 306 25 is_stmt 0 view .LVU3343
 10384 05e4 264A     		ldr	r2, .L1286+12
 307:src/display.c **** }
 10385              		.loc 1 307 3 view .LVU3344
 10386 05e6 8120     		movs	r0, #129
 10387              	.LVL1157:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10388              		.loc 1 306 25 view .LVU3345
 10389 05e8 1370     		strb	r3, [r2]
 307:src/display.c **** }
 10390              		.loc 1 307 3 is_stmt 1 view .LVU3346
 10391              	.LBE569:
 10392              	.LBE568:
1341:src/display.c ****       }
ARM GAS  /tmp/ccwSk7O0.s 			page 304


 10393              		.loc 1 1341 3 is_stmt 0 view .LVU3347
 10394 05ea 0135     		adds	r5, r5, #1
 10395              	.LVL1158:
 10396              	.LBB571:
 10397              	.LBB570:
 307:src/display.c **** }
 10398              		.loc 1 307 3 view .LVU3348
 10399 05ec FFF7FEFF 		bl	set_dot
 10400              	.LVL1159:
 10401              	.LBE570:
 10402              	.LBE571:
1341:src/display.c ****       }
 10403              		.loc 1 1341 2 is_stmt 1 view .LVU3349
1341:src/display.c ****       }
 10404              		.loc 1 1341 2 is_stmt 0 view .LVU3350
 10405 05f0 5DE6     		b	.L1054
 10406              	.LVL1160:
 10407              	.L1256:
 10408              	.LBB572:
1370:src/display.c **** 	  if (j > 0) {
 10409              		.loc 1 1370 4 is_stmt 1 view .LVU3351
1370:src/display.c **** 	  if (j > 0) {
 10410              		.loc 1 1370 24 is_stmt 0 view .LVU3352
 10411 05f2 03F10C0C 		add	ip, r3, #12
1370:src/display.c **** 	  if (j > 0) {
 10412              		.loc 1 1370 6 view .LVU3353
 10413 05f6 A2EB0C02 		sub	r2, r2, ip
 10414              	.LVL1161:
1371:src/display.c **** 	    p += j + 1;
 10415              		.loc 1 1371 4 is_stmt 1 view .LVU3354
1371:src/display.c **** 	    p += j + 1;
 10416              		.loc 1 1371 7 is_stmt 0 view .LVU3355
 10417 05fa 002A     		cmp	r2, #0
 10418 05fc 40F3E380 		ble	.L1103
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10419              		.loc 1 1372 6 is_stmt 1 view .LVU3356
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10420              		.loc 1 1372 8 is_stmt 0 view .LVU3357
 10421 0600 511C     		adds	r1, r2, #1
1374:src/display.c **** 	      gotdot = 0;
 10422              		.loc 1 1374 9 view .LVU3358
 10423 0602 7245     		cmp	r2, lr
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10424              		.loc 1 1372 8 view .LVU3359
 10425 0604 0D44     		add	r5, r5, r1
 10426              	.LVL1162:
1373:src/display.c **** 	    if (gotdot <= j) {
 10427              		.loc 1 1373 6 is_stmt 1 view .LVU3360
1374:src/display.c **** 	      gotdot = 0;
 10428              		.loc 1 1374 6 view .LVU3361
1374:src/display.c **** 	      gotdot = 0;
 10429              		.loc 1 1374 9 is_stmt 0 view .LVU3362
 10430 0606 C0F2CC80 		blt	.L1063
1375:src/display.c **** 	      if (double_dot)
 10431              		.loc 1 1375 8 is_stmt 1 view .LVU3363
 10432              	.LVL1163:
1376:src/display.c **** 		p++;
ARM GAS  /tmp/ccwSk7O0.s 			page 305


 10433              		.loc 1 1376 8 view .LVU3364
1376:src/display.c **** 		p++;
 10434              		.loc 1 1376 11 is_stmt 0 view .LVU3365
 10435 060a 002B     		cmp	r3, #0
 10436 060c 00F03282 		beq	.L1104
1377:src/display.c **** 	    }
 10437              		.loc 1 1377 3 is_stmt 1 view .LVU3366
1377:src/display.c **** 	    }
 10438              		.loc 1 1377 4 is_stmt 0 view .LVU3367
 10439 0610 0135     		adds	r5, r5, #1
 10440              	.LVL1164:
1373:src/display.c **** 	    if (gotdot <= j) {
 10441              		.loc 1 1373 8 view .LVU3368
 10442 0612 4FF0090B 		mov	fp, #9
 10443              	.LVL1165:
 10444              	.L1064:
1386:src/display.c **** 	    overflow_to_left = 1;
 10445              		.loc 1 1386 6 is_stmt 1 view .LVU3369
 10446 0616 3C21     		movs	r1, #60
 10447              	.LVL1166:
1386:src/display.c **** 	    overflow_to_left = 1;
 10448              		.loc 1 1386 6 is_stmt 0 view .LVU3370
 10449 0618 0020     		movs	r0, #0
 10450 061a FFF7FEFF 		bl	set_dig
 10451              	.LVL1167:
1387:src/display.c **** 	  }
 10452              		.loc 1 1387 6 is_stmt 1 view .LVU3371
1387:src/display.c **** 	  }
 10453              		.loc 1 1387 6 is_stmt 0 view .LVU3372
 10454 061e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1387:src/display.c **** 	  }
 10455              		.loc 1 1387 6 view .LVU3373
 10456              	.LBE572:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10457              		.loc 1 1393 9 is_stmt 1 view .LVU3374
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10458              		.loc 1 1393 2 is_stmt 0 view .LVU3375
 10459 0620 4FF0000A 		mov	r10, #0
 10460              	.LVL1168:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10461              		.loc 1 1393 2 view .LVU3376
 10462 0624 0029     		cmp	r1, #0
 10463 0626 3FF47BAF 		beq	.L1081
 10464              	.LVL1169:
 10465              	.L1094:
 10466              	.LBB573:
1387:src/display.c **** 	  }
 10467              		.loc 1 1387 23 view .LVU3377
 10468 062a 0123     		movs	r3, #1
 10469 062c 0193     		str	r3, [sp, #4]
 10470 062e 13E0     		b	.L1073
 10471              	.LVL1170:
 10472              	.L1258:
1387:src/display.c **** 	  }
 10473              		.loc 1 1387 23 view .LVU3378
 10474              	.LBE573:
1399:src/display.c **** 	      gotdot = i;
ARM GAS  /tmp/ccwSk7O0.s 			page 306


 10475              		.loc 1 1399 6 is_stmt 1 view .LVU3379
1399:src/display.c **** 	      gotdot = i;
 10476              		.loc 1 1399 9 is_stmt 0 view .LVU3380
 10477 0630 BAF1FF3F 		cmp	r10, #-1
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10478              		.loc 1 1403 9 view .LVU3381
 10479 0634 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1399:src/display.c **** 	      gotdot = i;
 10480              		.loc 1 1399 9 view .LVU3382
 10481 0636 45D0     		beq	.L1067
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10482              		.loc 1 1403 6 is_stmt 1 view .LVU3383
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10483              		.loc 1 1403 9 is_stmt 0 view .LVU3384
 10484 0638 2E2B     		cmp	r3, #46
 10485 063a 4ED0     		beq	.L1092
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10486              		.loc 1 1403 25 view .LVU3385
 10487 063c D345     		cmp	fp, r10
 10488 063e 43D0     		beq	.L1070
 10489              	.L1069:
1410:src/display.c **** 		i += segs_per_digit;
 10490              		.loc 1 1410 3 is_stmt 1 view .LVU3386
 10491 0640 5846     		mov	r0, fp
 10492 0642 2F21     		movs	r1, #47
 10493 0644 FFF7FEFF 		bl	set_dig
 10494              	.LVL1171:
1411:src/display.c **** 	      }
 10495              		.loc 1 1411 3 view .LVU3387
1411:src/display.c **** 	      }
 10496              		.loc 1 1411 5 is_stmt 0 view .LVU3388
 10497 0648 0BF1090B 		add	fp, fp, #9
 10498              	.LVL1172:
1411:src/display.c **** 	      }
 10499              		.loc 1 1411 5 view .LVU3389
 10500 064c 2B46     		mov	r3, r5
 10501              	.LVL1173:
 10502              	.L1071:
1397:src/display.c **** 	  if (*p == '.') {
 10503              		.loc 1 1397 11 is_stmt 1 view .LVU3390
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10504              		.loc 1 1393 9 is_stmt 0 view .LVU3391
 10505 064e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1397:src/display.c **** 	  if (*p == '.') {
 10506              		.loc 1 1397 12 view .LVU3392
 10507 0650 0135     		adds	r5, r5, #1
 10508              	.LVL1174:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10509              		.loc 1 1393 9 is_stmt 1 view .LVU3393
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10510              		.loc 1 1393 2 is_stmt 0 view .LVU3394
 10511 0652 0029     		cmp	r1, #0
 10512 0654 3FF441AF 		beq	.L1074
 10513              	.LVL1175:
 10514              	.L1073:
1395:src/display.c **** #endif
 10515              		.loc 1 1395 9 view .LVU3395
ARM GAS  /tmp/ccwSk7O0.s 			page 307


 10516 0658 A1F14403 		sub	r3, r1, #68
 10517 065c 012B     		cmp	r3, #1
 10518 065e 7FF63CAF 		bls	.L1074
1398:src/display.c **** 	    if (gotdot < 0)
 10519              		.loc 1 1398 4 is_stmt 1 view .LVU3396
1398:src/display.c **** 	    if (gotdot < 0)
 10520              		.loc 1 1398 7 is_stmt 0 view .LVU3397
 10521 0662 2E29     		cmp	r1, #46
 10522 0664 E4D0     		beq	.L1258
1432:src/display.c **** 	      i += segs_per_digit;
 10523              		.loc 1 1432 8 is_stmt 1 view .LVU3398
 10524 0666 5846     		mov	r0, fp
 10525 0668 FFF7FEFF 		bl	set_dig
 10526              	.LVL1176:
1433:src/display.c **** 	    }
 10527              		.loc 1 1433 8 view .LVU3399
1433:src/display.c **** 	    }
 10528              		.loc 1 1433 10 is_stmt 0 view .LVU3400
 10529 066c 0BF1090B 		add	fp, fp, #9
 10530              	.LVL1177:
1433:src/display.c **** 	    }
 10531              		.loc 1 1433 10 view .LVU3401
 10532 0670 2B46     		mov	r3, r5
 10533 0672 ECE7     		b	.L1071
 10534              	.L1287:
 10535              		.align	2
 10536              	.L1286:
 10537 0674 0C000000 		.word	.LANCHOR17+12
 10538 0678 08000000 		.word	.LC25
 10539 067c 18000000 		.word	.LC26
 10540 0680 00000000 		.word	LastDisplayedNumber
 10541 0684 00000000 		.word	DispMsg
 10542 0688 00000000 		.word	ShowRegister
 10543 068c 34000000 		.word	.LC27
 10544 0690 00000000 		.word	LastDisplayedExponent
 10545 0694 00000000 		.word	.LANCHOR20
 10546 0698 00000000 		.word	DispPlot
 10547 069c AC000000 		.word	.LC44
 10548 06a0 00000000 		.word	.LANCHOR21
 10549 06a4 38000000 		.word	.LC28
 10550 06a8 B4000000 		.word	.LC31
 10551 06ac 00000000 		.word	.LANCHOR22
 10552 06b0 00000000 		.word	.LANCHOR24
 10553 06b4 00000000 		.word	.LANCHOR0
 10554 06b8 56040000 		.word	argcmds+1110
 10555 06bc 3C000000 		.word	.LC29
 10556 06c0 BC000000 		.word	.LC30
 10557              	.L1067:
1400:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10558              		.loc 1 1400 8 is_stmt 1 view .LVU3402
 10559              	.LVL1178:
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10560              		.loc 1 1403 6 view .LVU3403
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10561              		.loc 1 1403 9 is_stmt 0 view .LVU3404
 10562 06c4 2E2B     		cmp	r3, #46
 10563 06c6 07D0     		beq	.L1259
ARM GAS  /tmp/ccwSk7O0.s 			page 308


 10564              	.LVL1179:
 10565              	.L1070:
1414:src/display.c **** 		  i += segs_per_digit;
 10566              		.loc 1 1414 3 is_stmt 1 view .LVU3405
1414:src/display.c **** 		  i += segs_per_digit;
 10567              		.loc 1 1414 6 is_stmt 0 view .LVU3406
 10568 06c8 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10569 06ca 012B     		cmp	r3, #1
 10570 06cc 51D9     		bls	.L1072
1415:src/display.c **** 		}
 10571              		.loc 1 1415 5 is_stmt 1 view .LVU3407
 10572              	.LVL1180:
1415:src/display.c **** 		}
 10573              		.loc 1 1415 5 is_stmt 0 view .LVU3408
 10574 06ce DA46     		mov	r10, fp
 10575 06d0 2B46     		mov	r3, r5
1415:src/display.c **** 		}
 10576              		.loc 1 1415 7 view .LVU3409
 10577 06d2 0BF1090B 		add	fp, fp, #9
 10578              	.LVL1181:
1415:src/display.c **** 		}
 10579              		.loc 1 1415 7 view .LVU3410
 10580 06d6 BAE7     		b	.L1071
 10581              	.LVL1182:
 10582              	.L1259:
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10583              		.loc 1 1403 9 view .LVU3411
 10584 06d8 DA46     		mov	r10, fp
 10585              	.LVL1183:
 10586              	.L1092:
1404:src/display.c **** 		p++;
 10587              		.loc 1 1404 8 is_stmt 1 view .LVU3412
1405:src/display.c **** 	      }
 10588              		.loc 1 1405 3 view .LVU3413
1405:src/display.c **** 	      }
 10589              		.loc 1 1405 4 is_stmt 0 view .LVU3414
 10590 06da 0135     		adds	r5, r5, #1
 10591              	.LVL1184:
1405:src/display.c **** 	      }
 10592              		.loc 1 1405 4 view .LVU3415
 10593 06dc B0E7     		b	.L1069
 10594              	.LVL1185:
 10595              	.L1255:
1405:src/display.c **** 	      }
 10596              		.loc 1 1405 4 view .LVU3416
 10597              	.LBE582:
 10598              	.LBE595:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10599              		.loc 1 2769 6 is_stmt 1 view .LVU3417
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10600              		.loc 1 2769 11 is_stmt 0 view .LVU3418
 10601 06de 2189     		ldrh	r1, [r4, #8]
 10602 06e0 FFF7FEFF 		bl	num_arg_0
 10603              	.LVL1186:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10604              		.loc 1 2769 11 view .LVU3419
 10605 06e4 0346     		mov	r3, r0
ARM GAS  /tmp/ccwSk7O0.s 			page 309


 10606              	.LVL1187:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10607              		.loc 1 2769 11 view .LVU3420
 10608 06e6 2CE7     		b	.L961
 10609              	.LVL1188:
 10610              	.L974:
2831:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10611              		.loc 1 2831 9 is_stmt 1 view .LVU3421
2831:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10612              		.loc 1 2831 12 is_stmt 0 view .LVU3422
 10613 06e8 BAF1000F 		cmp	r10, #0
 10614 06ec 70D1     		bne	.L1260
2886:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10615              		.loc 1 2886 9 is_stmt 1 view .LVU3423
2886:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10616              		.loc 1 2886 12 is_stmt 0 view .LVU3424
 10617 06ee 1F07     		lsls	r7, r3, #28
 10618 06f0 00F1D480 		bmi	.L1261
2901:src/display.c **** 	  show_status();
 10619              		.loc 1 2901 9 is_stmt 1 view .LVU3425
2901:src/display.c **** 	  show_status();
 10620              		.loc 1 2901 19 is_stmt 0 view .LVU3426
 10621 06f4 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2901:src/display.c **** 	  show_status();
 10622              		.loc 1 2901 12 view .LVU3427
 10623 06f6 002F     		cmp	r7, #0
 10624 06f8 40F00B81 		bne	.L1262
2904:src/display.c **** 	  show_label();
 10625              		.loc 1 2904 9 is_stmt 1 view .LVU3428
2904:src/display.c **** 	  show_label();
 10626              		.loc 1 2904 13 is_stmt 0 view .LVU3429
 10627 06fc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2904:src/display.c **** 	  show_label();
 10628              		.loc 1 2904 12 view .LVU3430
 10629 06fe 5A07     		lsls	r2, r3, #29
 10630 0700 00F1E280 		bmi	.L1263
2907:src/display.c **** 	  show_registers();
 10631              		.loc 1 2907 9 is_stmt 1 view .LVU3431
2907:src/display.c **** 	  show_registers();
 10632              		.loc 1 2907 12 is_stmt 0 view .LVU3432
 10633 0704 1807     		lsls	r0, r3, #28
 10634 0706 00F13D83 		bmi	.L1264
2917:src/display.c **** 	  if (DispMsg) { 
 10635              		.loc 1 2917 9 is_stmt 1 view .LVU3433
2917:src/display.c **** 	  if (DispMsg) { 
 10636              		.loc 1 2917 12 is_stmt 0 view .LVU3434
 10637 070a 4806     		lsls	r0, r1, #25
 10638 070c 40F14782 		bpl	.L1025
2918:src/display.c **** 	    set_status(DispMsg);
 10639              		.loc 1 2918 4 is_stmt 1 view .LVU3435
2918:src/display.c **** 	    set_status(DispMsg);
 10640              		.loc 1 2918 8 is_stmt 0 view .LVU3436
 10641 0710 CC4F     		ldr	r7, .L1288
 10642 0712 3B68     		ldr	r3, [r7]
2918:src/display.c **** 	    set_status(DispMsg);
 10643              		.loc 1 2918 7 view .LVU3437
 10644 0714 002B     		cmp	r3, #0
ARM GAS  /tmp/ccwSk7O0.s 			page 310


 10645 0716 00F0B081 		beq	.L1026
2919:src/display.c **** 	  } else if (DispPlot) {
 10646              		.loc 1 2919 6 is_stmt 1 view .LVU3438
 10647 071a 1846     		mov	r0, r3
 10648 071c FFF7FEFF 		bl	set_status
 10649              	.LVL1189:
2971:src/display.c ****       nostk:
 10650              		.loc 1 2971 2 view .LVU3439
 10651 0720 C94B     		ldr	r3, .L1288+4
 10652 0722 0093     		str	r3, [sp]
 10653 0724 FFF7FEFF 		bl	show_stack
 10654              	.LVL1190:
2973:src/display.c **** 	if (!skip) {
 10655              		.loc 1 2973 2 view .LVU3440
 10656 0728 FFF7FEFF 		bl	show_flags
 10657              	.LVL1191:
2974:src/display.c **** 	  if (State2.runmode) {
 10658              		.loc 1 2974 2 view .LVU3441
 10659 072c ABE4     		b	.L955
 10660              	.LVL1192:
 10661              	.L1254:
 10662              	.LBB596:
 10663              	.LBB583:
 10664              	.LBB574:
1460:src/display.c **** #  endif
 10665              		.loc 1 1460 6 view .LVU3442
1463:src/display.c **** 	      flags |= 2;
 10666              		.loc 1 1463 6 view .LVU3443
1464:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10667              		.loc 1 1464 14 is_stmt 0 view .LVU3444
 10668 072e 442A     		cmp	r2, #68
 10669 0730 14BF     		ite	ne
 10670 0732 4FF00C0A 		movne	r10, #12
 10671 0736 4FF00E0A 		moveq	r10, #14
 10672              	.LVL1193:
1465:src/display.c **** 	      flags |= 16;
 10673              		.loc 1 1465 6 is_stmt 1 view .LVU3445
1465:src/display.c **** 	      flags |= 16;
 10674              		.loc 1 1465 9 is_stmt 0 view .LVU3446
 10675 073a BBF15A0F 		cmp	fp, #90
1466:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10676              		.loc 1 1466 8 is_stmt 1 view .LVU3447
1466:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10677              		.loc 1 1466 14 is_stmt 0 view .LVU3448
 10678 073e C8BF     		it	gt
 10679 0740 4AF0100A 		orrgt	r10, r10, #16
 10680              	.LVL1194:
1467:src/display.c **** 	  }
 10681              		.loc 1 1467 6 is_stmt 1 view .LVU3449
 10682 0744 681C     		adds	r0, r5, #1
 10683 0746 FFF7FEFF 		bl	s_to_i
 10684              	.LVL1195:
 10685 074a 5146     		mov	r1, r10
 10686 074c 0022     		movs	r2, #0
 10687 074e FFF7FEFF 		bl	set_exp
 10688              	.LVL1196:
1467:src/display.c **** 	  }
ARM GAS  /tmp/ccwSk7O0.s 			page 311


 10689              		.loc 1 1467 6 is_stmt 0 view .LVU3450
 10690              	.LBE574:
 10691              	.LBE583:
 10692              	.LBE596:
3011:src/display.c **** 	      goto finish;
 10693              		.loc 1 3011 6 is_stmt 1 view .LVU3451
3011:src/display.c **** 	      goto finish;
 10694              		.loc 1 3011 9 is_stmt 0 view .LVU3452
 10695 0752 D8F80030 		ldr	r3, [r8]
 10696 0756 002B     		cmp	r3, #0
 10697 0758 3FF4C5AD 		beq	.L1241
 10698 075c E5E6     		b	.L1153
 10699              	.LVL1197:
 10700              	.L1058:
 10701              	.LBB597:
 10702              	.LBB584:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10703              		.loc 1 1393 9 is_stmt 1 view .LVU3453
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10704              		.loc 1 1393 2 is_stmt 0 view .LVU3454
 10705 075e 0029     		cmp	r1, #0
 10706 0760 00F05581 		beq	.L1102
1336:src/display.c **** #endif
 10707              		.loc 1 1336 11 view .LVU3455
 10708 0764 CDF804B0 		str	fp, [sp, #4]
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10709              		.loc 1 1330 11 view .LVU3456
 10710 0768 4FF0FF3A 		mov	r10, #-1
 10711              	.LVL1198:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10712              		.loc 1 1330 11 view .LVU3457
 10713 076c 74E7     		b	.L1073
 10714              	.LVL1199:
 10715              	.L1108:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10716              		.loc 1 1330 11 view .LVU3458
 10717              	.LBE584:
 10718              	.LBE597:
 10719              	.LBB598:
 10720              	.LBB550:
3031:src/display.c **** 	      while(*b) {
 10721              		.loc 1 3031 10 view .LVU3459
 10722 076e 5A1C     		adds	r2, r3, #1
 10723 0770 DDE4     		b	.L1085
 10724              	.LVL1200:
 10725              	.L1072:
3031:src/display.c **** 	      while(*b) {
 10726              		.loc 1 3031 10 view .LVU3460
 10727              	.LBE550:
 10728              	.LBE598:
 10729              	.LBB599:
 10730              	.LBB585:
1418:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10731              		.loc 1 1418 5 is_stmt 1 view .LVU3461
 10732 0772 B64B     		ldr	r3, .L1288+8
 10733 0774 0022     		movs	r2, #0
 10734 0776 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 312


 10735 0778 ABF10900 		sub	r0, fp, #9
 10736 077c FFF7FEFF 		bl	set_decimal
 10737              	.LVL1201:
 10738 0780 DA46     		mov	r10, fp
 10739 0782 2B46     		mov	r3, r5
 10740 0784 63E7     		b	.L1071
 10741              	.LVL1202:
 10742              	.L1257:
1418:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10743              		.loc 1 1418 5 is_stmt 0 view .LVU3462
 10744              	.LBE585:
 10745              	.LBE599:
2792:src/display.c **** 	    *bp++ = '_';
 10746              		.loc 1 2792 6 is_stmt 1 view .LVU3463
2792:src/display.c **** 	    *bp++ = '_';
 10747              		.loc 1 2792 12 is_stmt 0 view .LVU3464
 10748 0786 1122     		movs	r2, #17
2793:src/display.c **** 	  } else {
 10749              		.loc 1 2793 12 view .LVU3465
 10750 0788 5F23     		movs	r3, #95
2792:src/display.c **** 	    *bp++ = '_';
 10751              		.loc 1 2792 12 view .LVU3466
 10752 078a 0270     		strb	r2, [r0]
2793:src/display.c **** 	  } else {
 10753              		.loc 1 2793 6 is_stmt 1 view .LVU3467
 10754              	.LVL1203:
2793:src/display.c **** 	  } else {
 10755              		.loc 1 2793 12 is_stmt 0 view .LVU3468
 10756 078c 4370     		strb	r3, [r0, #1]
 10757 078e 7DE5     		b	.L991
 10758              	.LVL1204:
 10759              	.L1047:
2992:src/display.c **** 		  }
 10760              		.loc 1 2992 7 is_stmt 1 view .LVU3469
 10761 0790 6E20     		movs	r0, #110
 10762 0792 FFF7FEFF 		bl	format_reg
 10763              	.LVL1205:
3011:src/display.c **** 	      goto finish;
 10764              		.loc 1 3011 6 view .LVU3470
3011:src/display.c **** 	      goto finish;
 10765              		.loc 1 3011 9 is_stmt 0 view .LVU3471
 10766 0796 D8F80030 		ldr	r3, [r8]
 10767 079a 002B     		cmp	r3, #0
 10768 079c 3FF4A4AD 		beq	.L1048
 10769 07a0 28E5     		b	.L1049
 10770              	.LVL1206:
 10771              	.L1063:
 10772              	.LBB600:
 10773              	.LBB586:
 10774              	.LBB575:
1379:src/display.c **** 	      gotdot = 0;
 10775              		.loc 1 1379 11 is_stmt 1 view .LVU3472
1379:src/display.c **** 	      gotdot = 0;
 10776              		.loc 1 1379 14 is_stmt 0 view .LVU3473
 10777 07a2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10778              	.LVL1207:
1379:src/display.c **** 	      gotdot = 0;
ARM GAS  /tmp/ccwSk7O0.s 			page 313


 10779              		.loc 1 1379 14 view .LVU3474
 10780 07a4 2E2A     		cmp	r2, #46
 10781 07a6 00F04481 		beq	.L1265
 10782              	.LVL1208:
1386:src/display.c **** 	    overflow_to_left = 1;
 10783              		.loc 1 1386 6 is_stmt 1 view .LVU3475
 10784 07aa 3C21     		movs	r1, #60
 10785              	.LVL1209:
1386:src/display.c **** 	    overflow_to_left = 1;
 10786              		.loc 1 1386 6 is_stmt 0 view .LVU3476
 10787 07ac FFF7FEFF 		bl	set_dig
 10788              	.LVL1210:
1387:src/display.c **** 	  }
 10789              		.loc 1 1387 6 is_stmt 1 view .LVU3477
1387:src/display.c **** 	  }
 10790              		.loc 1 1387 6 is_stmt 0 view .LVU3478
 10791 07b0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1387:src/display.c **** 	  }
 10792              		.loc 1 1387 6 view .LVU3479
 10793              	.LBE575:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10794              		.loc 1 1393 9 is_stmt 1 view .LVU3480
 10795              	.LBB576:
1373:src/display.c **** 	    if (gotdot <= j) {
 10796              		.loc 1 1373 8 is_stmt 0 view .LVU3481
 10797 07b2 4FF0090B 		mov	fp, #9
 10798              	.LBE576:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10799              		.loc 1 1393 2 view .LVU3482
 10800 07b6 0029     		cmp	r1, #0
 10801 07b8 3FF4ACAE 		beq	.L1059
 10802              	.LBB577:
1385:src/display.c **** 	    set_dig(0, '<');
 10803              		.loc 1 1385 18 view .LVU3483
 10804 07bc 4FF0FF3A 		mov	r10, #-1
 10805              	.LVL1211:
1373:src/display.c **** 	    if (gotdot <= j) {
 10806              		.loc 1 1373 8 view .LVU3484
 10807 07c0 4FF0090B 		mov	fp, #9
 10808 07c4 31E7     		b	.L1094
 10809              	.LVL1212:
 10810              	.L1103:
1373:src/display.c **** 	    if (gotdot <= j) {
 10811              		.loc 1 1373 8 view .LVU3485
 10812              	.LBE577:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10813              		.loc 1 1353 4 view .LVU3486
 10814 07c6 8346     		mov	fp, r0
1336:src/display.c **** #endif
 10815              		.loc 1 1336 11 view .LVU3487
 10816 07c8 0190     		str	r0, [sp, #4]
 10817              	.LBB578:
1389:src/display.c **** 	}
 10818              		.loc 1 1389 16 view .LVU3488
 10819 07ca 4FF0FF3A 		mov	r10, #-1
 10820              	.LVL1213:
1389:src/display.c **** 	}
ARM GAS  /tmp/ccwSk7O0.s 			page 314


 10821              		.loc 1 1389 16 view .LVU3489
 10822 07ce 43E7     		b	.L1073
 10823              	.LVL1214:
 10824              	.L1260:
1389:src/display.c **** 	}
 10825              		.loc 1 1389 16 view .LVU3490
 10826              	.LBE578:
 10827              	.LBE586:
 10828              	.LBE600:
 10829              	.LBB601:
2832:src/display.c **** 	  char b2[16];
 10830              		.loc 1 2832 4 is_stmt 1 view .LVU3491
2832:src/display.c **** 	  char b2[16];
 10831              		.loc 1 2832 45 is_stmt 0 view .LVU3492
 10832 07d0 9F4B     		ldr	r3, .L1288+12
 10833 07d2 1B68     		ldr	r3, [r3]
 10834 07d4 B3F8DC07 		ldrh	r0, [r3, #2012]
2832:src/display.c **** 	  char b2[16];
 10835              		.loc 1 2832 22 view .LVU3493
 10836 07d8 C0F34610 		ubfx	r0, r0, #5, #7
 10837 07dc FFF7FEFF 		bl	current_catalogue
 10838              	.LVL1215:
2836:src/display.c **** 	  p = catcmd(op, b2);
 10839              		.loc 1 2836 9 view .LVU3494
 10840 07e0 9C49     		ldr	r1, .L1288+16
2832:src/display.c **** 	  char b2[16];
 10841              		.loc 1 2832 22 view .LVU3495
 10842 07e2 0546     		mov	r5, r0
 10843              	.LVL1216:
2833:src/display.c **** 	  const char *p;
 10844              		.loc 1 2833 4 is_stmt 1 view .LVU3496
2834:src/display.c **** 
 10845              		.loc 1 2834 4 view .LVU3497
2836:src/display.c **** 	  p = catcmd(op, b2);
 10846              		.loc 1 2836 4 view .LVU3498
2836:src/display.c **** 	  p = catcmd(op, b2);
 10847              		.loc 1 2836 9 is_stmt 0 view .LVU3499
 10848 07e4 1EA8     		add	r0, sp, #120
 10849              	.LVL1217:
2836:src/display.c **** 	  p = catcmd(op, b2);
 10850              		.loc 1 2836 9 view .LVU3500
 10851 07e6 FFF7FEFF 		bl	scopy
 10852              	.LVL1218:
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10853              		.loc 1 2837 8 view .LVU3501
 10854 07ea 08A9     		add	r1, sp, #32
2836:src/display.c **** 	  p = catcmd(op, b2);
 10855              		.loc 1 2836 9 view .LVU3502
 10856 07ec 0646     		mov	r6, r0
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10857              		.loc 1 2837 8 view .LVU3503
 10858 07ee 2846     		mov	r0, r5
 10859              	.LVL1219:
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10860              		.loc 1 2837 4 is_stmt 1 view .LVU3504
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10861              		.loc 1 2837 8 is_stmt 0 view .LVU3505
ARM GAS  /tmp/ccwSk7O0.s 			page 315


 10862 07f0 FFF7FEFF 		bl	catcmd
 10863              	.LVL1220:
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10864              		.loc 1 2838 7 view .LVU3506
 10865 07f4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10866 07f6 142B     		cmp	r3, #20
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10867              		.loc 1 2837 8 view .LVU3507
 10868 07f8 0146     		mov	r1, r0
 10869              	.LVL1221:
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10870              		.loc 1 2838 4 is_stmt 1 view .LVU3508
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10871              		.loc 1 2838 7 is_stmt 0 view .LVU3509
 10872 07fa 07D0     		beq	.L976
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10873              		.loc 1 2838 29 discriminator 1 view .LVU3510
 10874 07fc 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10875 07fe 9B07     		lsls	r3, r3, #30
 10876 0800 04D5     		bpl	.L976
2839:src/display.c **** 	  bp = scopy(bp, p);
 10877              		.loc 1 2839 6 is_stmt 1 view .LVU3511
2839:src/display.c **** 	  bp = scopy(bp, p);
 10878              		.loc 1 2839 9 is_stmt 0 view .LVU3512
 10879 0802 3346     		mov	r3, r6
 10880              	.LVL1222:
2839:src/display.c **** 	  bp = scopy(bp, p);
 10881              		.loc 1 2839 12 view .LVU3513
 10882 0804 1422     		movs	r2, #20
 10883 0806 03F8012B 		strb	r2, [r3], #1
 10884              	.LVL1223:
2839:src/display.c **** 	  bp = scopy(bp, p);
 10885              		.loc 1 2839 9 view .LVU3514
 10886 080a 1E46     		mov	r6, r3
 10887              	.LVL1224:
 10888              	.L976:
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10889              		.loc 1 2840 4 is_stmt 1 view .LVU3515
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10890              		.loc 1 2840 9 is_stmt 0 view .LVU3516
 10891 080c 3046     		mov	r0, r6
 10892              	.LVL1225:
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10893              		.loc 1 2840 9 view .LVU3517
 10894 080e FFF7FEFF 		bl	scopy
 10895              	.LVL1226:
2841:src/display.c **** 	    // State2.disp_small = 1;
 10896              		.loc 1 2841 4 is_stmt 1 view .LVU3518
2841:src/display.c **** 	    // State2.disp_small = 1;
 10897              		.loc 1 2841 7 is_stmt 0 view .LVU3519
 10898 0812 AAF11003 		sub	r3, r10, #16
 10899 0816 012B     		cmp	r3, #1
 10900 0818 2DD9     		bls	.L1266
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10901              		.loc 1 2848 11 is_stmt 1 view .LVU3520
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10902              		.loc 1 2848 15 is_stmt 0 view .LVU3521
ARM GAS  /tmp/ccwSk7O0.s 			page 316


 10903 081a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10904              		.loc 1 2848 14 view .LVU3522
 10905 081c 13F04003 		ands	r3, r3, #64
 10906 0820 08D0     		beq	.L1098
2849:src/display.c **** 	      decNumber x, r;
 10907              		.loc 1 2849 6 is_stmt 1 view .LVU3523
2849:src/display.c **** 	      decNumber x, r;
 10908              		.loc 1 2849 9 is_stmt 0 view .LVU3524
 10909 0822 BAF1120F 		cmp	r10, #18
 10910 0826 00F0F682 		beq	.L1267
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10911              		.loc 1 2869 13 is_stmt 1 view .LVU3525
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10912              		.loc 1 2869 46 is_stmt 0 view .LVU3526
 10913 082a A5F58873 		sub	r3, r5, #272
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10914              		.loc 1 2869 16 view .LVU3527
 10915 082e 0D2B     		cmp	r3, #13
 10916 0830 40F2C782 		bls	.L1268
 10917              	.L1098:
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10918              		.loc 1 2869 16 view .LVU3528
 10919              	.LBE601:
2683:src/display.c **** 	int x_disp = 0;
 10920              		.loc 1 2683 6 view .LVU3529
 10921 0834 0025     		movs	r5, #0
 10922              	.LVL1227:
 10923              	.L980:
 10924              	.LBB611:
2878:src/display.c **** 	    set_status_top(buf);
 10925              		.loc 1 2878 4 is_stmt 1 view .LVU3530
2878:src/display.c **** 	    set_status_top(buf);
 10926              		.loc 1 2878 7 is_stmt 0 view .LVU3531
 10927 0836 BBF1000F 		cmp	fp, #0
 10928 083a 17D0     		beq	.L985
2879:src/display.c **** 	    no_status_top = 1;
 10929              		.loc 1 2879 6 is_stmt 1 view .LVU3532
 10930              	.LVL1228:
 10931              	.LBB602:
 10932              	.LBI602:
3637:src/display.c **** 	if (no_status_top) return;
 10933              		.loc 1 3637 19 view .LVU3533
 10934              	.LBB603:
3638:src/display.c **** 	if (State2.runmode) {
 10935              		.loc 1 3638 2 view .LVU3534
3638:src/display.c **** 	if (State2.runmode) {
 10936              		.loc 1 3638 5 is_stmt 0 view .LVU3535
 10937 083c B9F90030 		ldrsh	r3, [r9]
 10938 0840 13B9     		cbnz	r3, .L986
 10939 0842 1EA8     		add	r0, sp, #120
 10940              	.LVL1229:
3638:src/display.c **** 	if (State2.runmode) {
 10941              		.loc 1 3638 5 view .LVU3536
 10942 0844 FFF7FEFF 		bl	set_status_top.part.0
 10943              	.LVL1230:
 10944              	.L986:
ARM GAS  /tmp/ccwSk7O0.s 			page 317


3638:src/display.c **** 	if (State2.runmode) {
 10945              		.loc 1 3638 5 view .LVU3537
 10946              	.LBE603:
 10947              	.LBE602:
2880:src/display.c **** 	    annuc = 1;
 10948              		.loc 1 2880 6 is_stmt 1 view .LVU3538
2880:src/display.c **** 	    annuc = 1;
 10949              		.loc 1 2880 20 is_stmt 0 view .LVU3539
 10950 0848 0123     		movs	r3, #1
2881:src/display.c **** 	  }
 10951              		.loc 1 2881 12 view .LVU3540
 10952 084a 5E46     		mov	r6, fp
2880:src/display.c **** 	    annuc = 1;
 10953              		.loc 1 2880 20 view .LVU3541
 10954 084c A9F80030 		strh	r3, [r9]	@ movhi
2881:src/display.c **** 	  }
 10955              		.loc 1 2881 6 is_stmt 1 view .LVU3542
 10956              	.LVL1231:
 10957              	.L987:
2881:src/display.c **** 	  }
 10958              		.loc 1 2881 6 is_stmt 0 view .LVU3543
 10959              	.LBE611:
2971:src/display.c ****       nostk:
 10960              		.loc 1 2971 2 is_stmt 1 view .LVU3544
 10961 0850 FFF7FEFF 		bl	show_stack
 10962              	.LVL1232:
 10963              	.LDL1:
2973:src/display.c **** 	if (!skip) {
 10964              		.loc 1 2973 2 view .LVU3545
 10965 0854 FFF7FEFF 		bl	show_flags
 10966              	.LVL1233:
2974:src/display.c **** 	  if (State2.runmode) {
 10967              		.loc 1 2974 2 view .LVU3546
2974:src/display.c **** 	  if (State2.runmode) {
 10968              		.loc 1 2974 5 is_stmt 0 view .LVU3547
 10969 0858 002D     		cmp	r5, #0
 10970 085a 00F0B281 		beq	.L1239
 10971              	.LVL1234:
 10972              	.L988:
3041:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10973              		.loc 1 3041 2 is_stmt 1 view .LVU3548
 10974 085e FFF7FEFF 		bl	set_annunciators
 10975              	.LVL1235:
3042:src/display.c **** 	  ShowRPN = 0;
 10976              		.loc 1 3042 2 view .LVU3549
 10977 0862 794B     		ldr	r3, .L1288+4
 10978 0864 774F     		ldr	r7, .L1288
 10979 0866 7C4D     		ldr	r5, .L1288+20
 10980 0868 0093     		str	r3, [sp]
 10981 086a 96E4     		b	.L950
 10982              	.LVL1236:
 10983              	.L985:
 10984              	.LBB612:
2884:src/display.c **** 	  }
 10985              		.loc 1 2884 6 view .LVU3550
 10986 086c 1EA8     		add	r0, sp, #120
 10987 086e FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccwSk7O0.s 			page 318


 10988              	.LVL1237:
 10989              	.LBE612:
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10990              		.loc 1 2681 6 is_stmt 0 view .LVU3551
 10991 0872 5E46     		mov	r6, fp
 10992 0874 ECE7     		b	.L987
 10993              	.LVL1238:
 10994              	.L1266:
 10995              	.LBB613:
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10996              		.loc 1 2843 6 is_stmt 1 view .LVU3552
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10997              		.loc 1 2843 9 is_stmt 0 view .LVU3553
 10998 0876 B5F5274F 		cmp	r5, #42752
 10999 087a 00F0B882 		beq	.L978
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 11000              		.loc 1 2843 41 discriminator 1 view .LVU3554
 11001 087e B5F5284F 		cmp	r5, #43008
 11002 0882 00F0B482 		beq	.L978
2846:src/display.c **** 	    skip = 1;
 11003              		.loc 1 2846 8 is_stmt 1 view .LVU3555
2846:src/display.c **** 	    skip = 1;
 11004              		.loc 1 2846 14 is_stmt 0 view .LVU3556
 11005 0886 05F07F00 		and	r0, r5, #127
 11006 088a 0021     		movs	r1, #0
 11007 088c FFF7FEFF 		bl	get_const
 11008              	.LVL1239:
2846:src/display.c **** 	    skip = 1;
 11009              		.loc 1 2846 8 view .LVU3557
 11010 0890 0022     		movs	r2, #0
 11011 0892 1146     		mov	r1, r2
 11012 0894 FFF7FEFF 		bl	set_x
 11013              	.LVL1240:
2847:src/display.c **** 	  } else if (State2.runmode) {
 11014              		.loc 1 2847 11 view .LVU3558
 11015 0898 0125     		movs	r5, #1
 11016              	.LVL1241:
2847:src/display.c **** 	  } else if (State2.runmode) {
 11017              		.loc 1 2847 11 view .LVU3559
 11018 089a CCE7     		b	.L980
 11019              	.LVL1242:
 11020              	.L1261:
2847:src/display.c **** 	  } else if (State2.runmode) {
 11021              		.loc 1 2847 11 view .LVU3560
 11022              	.LBE613:
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11023              		.loc 1 2887 4 is_stmt 1 view .LVU3561
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11024              		.loc 1 2887 42 is_stmt 0 view .LVU3562
 11025 089c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 11026 089e 6F49     		ldr	r1, .L1288+24
 11027 08a0 0423     		movs	r3, #4
 11028 08a2 03EB0213 		add	r3, r3, r2, lsl #4
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11029              		.loc 1 2887 9 view .LVU3563
 11030 08a6 1944     		add	r1, r1, r3
 11031 08a8 2722     		movs	r2, #39
ARM GAS  /tmp/ccwSk7O0.s 			page 319


 11032 08aa 1EA8     		add	r0, sp, #120
 11033              	.LVL1243:
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 11034              		.loc 1 2887 9 view .LVU3564
 11035 08ac FFF7FEFF 		bl	scopy_char
 11036              	.LVL1244:
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 11037              		.loc 1 2888 7 view .LVU3565
 11038 08b0 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11039              	.LVL1245:
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 11040              		.loc 1 2888 4 is_stmt 1 view .LVU3566
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 11041              		.loc 1 2888 7 is_stmt 0 view .LVU3567
 11042 08b2 002B     		cmp	r3, #0
 11043 08b4 3FF4EAAC 		beq	.L991
2889:src/display.c **** 	    if (State2.numdigit > 1)
 11044              		.loc 1 2889 6 is_stmt 1 view .LVU3568
 11045              	.LVL1246:
2889:src/display.c **** 	    if (State2.numdigit > 1)
 11046              		.loc 1 2889 14 is_stmt 0 view .LVU3569
 11047 08b8 2389     		ldrh	r3, [r4, #8]
 11048 08ba 0370     		strb	r3, [r0]
2890:src/display.c **** 	      *bp++ = State2.digval2;
 11049              		.loc 1 2890 6 is_stmt 1 view .LVU3570
2890:src/display.c **** 	      *bp++ = State2.digval2;
 11050              		.loc 1 2890 9 is_stmt 0 view .LVU3571
 11051 08bc E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11052 08be 012B     		cmp	r3, #1
2891:src/display.c **** 	  }
 11053              		.loc 1 2891 8 is_stmt 1 view .LVU3572
 11054              	.LVL1247:
2891:src/display.c **** 	  }
 11055              		.loc 1 2891 22 is_stmt 0 view .LVU3573
 11056 08c0 84BF     		itt	hi
 11057 08c2 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2891:src/display.c **** 	  }
 11058              		.loc 1 2891 14 view .LVU3574
 11059 08c4 4370     		strbhi	r3, [r0, #1]
 11060 08c6 E1E4     		b	.L991
 11061              	.LVL1248:
 11062              	.L1263:
2905:src/display.c **** 	  skip = 1;
 11063              		.loc 1 2905 4 is_stmt 1 view .LVU3575
 11064              	.LBB614:
 11065              	.LBI614:
2548:src/display.c **** 	char buf[16];
 11066              		.loc 1 2548 19 view .LVU3576
 11067              	.LBB615:
2549:src/display.c **** 	unsigned short int pc = State2.digval;
 11068              		.loc 1 2549 2 view .LVU3577
2550:src/display.c **** 	unsigned int op = getprog(pc);
 11069              		.loc 1 2550 2 view .LVU3578
2550:src/display.c **** 	unsigned int op = getprog(pc);
 11070              		.loc 1 2550 21 is_stmt 0 view .LVU3579
 11071 08c8 B4F808B0 		ldrh	fp, [r4, #8]
 11072              	.LVL1249:
ARM GAS  /tmp/ccwSk7O0.s 			page 320


2551:src/display.c **** 	int n = nLIB(pc);
 11073              		.loc 1 2551 2 is_stmt 1 view .LVU3580
2556:src/display.c **** #ifndef REALBUILD
 11074              		.loc 1 2556 27 is_stmt 0 view .LVU3581
 11075 08cc DFF8A0A1 		ldr	r10, .L1288+44
 11076              	.LVL1250:
2551:src/display.c **** 	int n = nLIB(pc);
 11077              		.loc 1 2551 20 view .LVU3582
 11078 08d0 5846     		mov	r0, fp
 11079 08d2 FFF7FEFF 		bl	getprog
 11080              	.LVL1251:
 11081 08d6 4FEA9B35 		lsr	r5, fp, #14
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11082              		.loc 1 2555 2 view .LVU3583
 11083 08da 15A9     		add	r1, sp, #84
2551:src/display.c **** 	int n = nLIB(pc);
 11084              		.loc 1 2551 20 view .LVU3584
 11085 08dc 8046     		mov	r8, r0
 11086              	.LVL1252:
2552:src/display.c **** 	unsigned short int lblpc;
 11087              		.loc 1 2552 2 is_stmt 1 view .LVU3585
2553:src/display.c **** 
 11088              		.loc 1 2553 2 view .LVU3586
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11089              		.loc 1 2555 2 view .LVU3587
2556:src/display.c **** #ifndef REALBUILD
 11090              		.loc 1 2556 27 is_stmt 0 view .LVU3588
 11091 08de 05EB8505 		add	r5, r5, r5, lsl #2
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11092              		.loc 1 2555 2 view .LVU3589
 11093 08e2 FFF7FEFF 		bl	prt
 11094              	.LVL1253:
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 11095              		.loc 1 2555 2 view .LVU3590
 11096 08e6 FFF7FEFF 		bl	set_status
 11097              	.LVL1254:
2556:src/display.c **** #ifndef REALBUILD
 11098              		.loc 1 2556 2 is_stmt 1 view .LVU3591
 11099 08ea 0AEB0500 		add	r0, r10, r5
 11100 08ee 3946     		mov	r1, r7
 11101 08f0 FFF7FEFF 		bl	set_digits_string
 11102              	.LVL1255:
2558:src/display.c **** #endif
 11103              		.loc 1 2558 2 view .LVU3592
 11104 08f4 5A4B     		ldr	r3, .L1288+28
 11105 08f6 5B48     		ldr	r0, .L1288+32
 11106 08f8 03EB4501 		add	r1, r3, r5, lsl #1
 11107 08fc FFF7FEFF 		bl	scopy
 11108              	.LVL1256:
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11109              		.loc 1 2561 2 view .LVU3593
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11110              		.loc 1 2561 5 is_stmt 0 view .LVU3594
 11111 0900 18F4704F 		tst	r8, #61440
 11112 0904 40F00C82 		bne	.L1269
 11113              	.LVL1257:
 11114              	.L1242:
ARM GAS  /tmp/ccwSk7O0.s 			page 321


2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11115              		.loc 1 2561 5 view .LVU3595
 11116              	.LBE615:
 11117              	.LBE614:
2971:src/display.c ****       nostk:
 11118              		.loc 1 2971 2 is_stmt 1 view .LVU3596
 11119 0908 FFF7FEFF 		bl	show_stack
 11120              	.LVL1258:
2973:src/display.c **** 	if (!skip) {
 11121              		.loc 1 2973 2 view .LVU3597
 11122 090c FFF7FEFF 		bl	show_flags
 11123              	.LVL1259:
2974:src/display.c **** 	  if (State2.runmode) {
 11124              		.loc 1 2974 2 view .LVU3598
 11125 0910 A5E7     		b	.L988
 11126              	.LVL1260:
 11127              	.L1262:
2902:src/display.c **** 	  skip = 1;
 11128              		.loc 1 2902 4 view .LVU3599
 11129              	.LBB618:
 11130              	.LBI618:
2446:src/display.c **** 	int i, n;
 11131              		.loc 1 2446 19 view .LVU3600
 11132              	.LBB619:
2447:src/display.c **** 	int j = SEGS_EXP_BASE;
 11133              		.loc 1 2447 2 view .LVU3601
2448:src/display.c **** 	const int status = State2.status - 3;
 11134              		.loc 1 2448 2 view .LVU3602
2449:src/display.c **** 	char buf[16], *p = buf;
 11135              		.loc 1 2449 2 view .LVU3603
2453:src/display.c **** 	  set_status("Free:");
 11136              		.loc 1 2453 5 is_stmt 0 view .LVU3604
 11137 0912 012F     		cmp	r7, #1
2449:src/display.c **** 	char buf[16], *p = buf;
 11138              		.loc 1 2449 12 view .LVU3605
 11139 0914 A7F10303 		sub	r3, r7, #3
 11140              	.LVL1261:
2450:src/display.c **** 	unsigned int pc;
 11141              		.loc 1 2450 2 is_stmt 1 view .LVU3606
2451:src/display.c **** 
 11142              		.loc 1 2451 2 view .LVU3607
2453:src/display.c **** 	  set_status("Free:");
 11143              		.loc 1 2453 2 view .LVU3608
2453:src/display.c **** 	  set_status("Free:");
 11144              		.loc 1 2453 5 is_stmt 0 view .LVU3609
 11145 0918 00F0E881 		beq	.L1270
2461:src/display.c **** 	  /* Top line */
 11146              		.loc 1 2461 7 is_stmt 1 view .LVU3610
2461:src/display.c **** 	  /* Top line */
 11147              		.loc 1 2461 10 is_stmt 0 view .LVU3611
 11148 091c 581C     		adds	r0, r3, #1
 11149 091e 00F0E080 		beq	.L1271
 11150              	.LBB620:
2478:src/display.c **** 	  int end;
 11151              		.loc 1 2478 4 is_stmt 1 view .LVU3612
2479:src/display.c **** 	  int group = 10;
 11152              		.loc 1 2479 4 view .LVU3613
ARM GAS  /tmp/ccwSk7O0.s 			page 322


2480:src/display.c **** 	  int start = 0;
 11153              		.loc 1 2480 4 view .LVU3614
 11154              	.LVL1262:
2481:src/display.c **** 		
 11155              		.loc 1 2481 4 view .LVU3615
2483:src/display.c **** 	    base = 10 * status;
 11156              		.loc 1 2483 4 view .LVU3616
2483:src/display.c **** 	    base = 10 * status;
 11157              		.loc 1 2483 7 is_stmt 0 view .LVU3617
 11158 0922 092B     		cmp	r3, #9
 11159 0924 40F3BA80 		ble	.L1272
2493:src/display.c **** 	    base = regX_idx;
 11160              		.loc 1 2493 9 is_stmt 1 view .LVU3618
2493:src/display.c **** 	    base = regX_idx;
 11161              		.loc 1 2493 12 is_stmt 0 view .LVU3619
 11162 0928 0A2B     		cmp	r3, #10
 11163 092a 00F0D281 		beq	.L1273
2501:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11164              		.loc 1 2501 6 is_stmt 1 view .LVU3620
 11165              	.LVL1263:
2502:src/display.c **** 	    set_status("FL.00-.15");
 11166              		.loc 1 2502 6 view .LVU3621
2503:src/display.c **** 	  }
 11167              		.loc 1 2503 6 view .LVU3622
 11168 092e 4E48     		ldr	r0, .L1288+36
 11169 0930 FFF7FEFF 		bl	set_status
 11170              	.LVL1264:
2481:src/display.c **** 		
 11171              		.loc 1 2481 8 is_stmt 0 view .LVU3623
 11172 0934 4FF0000B 		mov	fp, #0
2480:src/display.c **** 	  int start = 0;
 11173              		.loc 1 2480 8 view .LVU3624
 11174 0938 4FF00A0A 		mov	r10, #10
 11175              	.LVL1265:
2502:src/display.c **** 	    set_status("FL.00-.15");
 11176              		.loc 1 2502 10 view .LVU3625
 11177 093c 4FF07F08 		mov	r8, #127
2501:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11178              		.loc 1 2501 11 view .LVU3626
 11179 0940 7027     		movs	r7, #112
 11180              	.LVL1266:
 11181              	.L1000:
2505:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11182              		.loc 1 2505 4 is_stmt 1 view .LVU3627
2505:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11183              		.loc 1 2505 6 is_stmt 0 view .LVU3628
 11184 0942 0BEBCB05 		add	r5, fp, fp, lsl #3
 11185              	.LVL1267:
2506:src/display.c **** 	  j += SEGS_PER_DIGIT;
 11186              		.loc 1 2506 4 is_stmt 1 view .LVU3629
 11187              	.LBB621:
 11188              	.LBI621:
 357:src/display.c ****   if (res) {
 11189              		.loc 1 357 14 view .LVU3630
 11190              	.LBB622:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11191              		.loc 1 358 3 view .LVU3631
ARM GAS  /tmp/ccwSk7O0.s 			page 323


 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11192              		.loc 1 361 5 view .LVU3632
 11193              	.LBB623:
 11194              	.LBB624:
 365:src/display.c **** #endif
 11195              		.loc 1 365 35 is_stmt 0 view .LVU3633
 11196 0946 0BF10103 		add	r3, fp, #1
 11197              	.LBE624:
 11198              	.LBE623:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11199              		.loc 1 361 5 view .LVU3634
 11200 094a E81D     		adds	r0, r5, #7
 11201              	.LBB627:
 11202              	.LBB625:
 365:src/display.c **** #endif
 11203              		.loc 1 365 35 view .LVU3635
 11204 094c 0093     		str	r3, [sp]
 11205              	.LBE625:
 11206              	.LBE627:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11207              		.loc 1 361 5 view .LVU3636
 11208 094e FFF7FEFF 		bl	set_dot
 11209              	.LVL1268:
 362:src/display.c ****       set_dot(posn+8);
 11210              		.loc 1 362 5 is_stmt 1 view .LVU3637
 11211              	.LBB628:
 11212              	.LBI623:
 357:src/display.c ****   if (res) {
 11213              		.loc 1 357 14 view .LVU3638
 11214              	.LBB626:
 365:src/display.c **** #endif
 11215              		.loc 1 365 5 view .LVU3639
 365:src/display.c **** #endif
 11216              		.loc 1 365 38 is_stmt 0 view .LVU3640
 11217 0952 4449     		ldr	r1, .L1288+32
 11218 0954 009B     		ldr	r3, [sp]
 11219 0956 2E22     		movs	r2, #46
 11220 0958 01F81320 		strb	r2, [r1, r3, lsl #1]
 368:src/display.c **** }
 11221              		.loc 1 368 3 is_stmt 1 view .LVU3641
 11222              	.LVL1269:
 368:src/display.c **** }
 11223              		.loc 1 368 3 is_stmt 0 view .LVU3642
 11224              	.LBE626:
 11225              	.LBE628:
 368:src/display.c **** }
 11226              		.loc 1 368 3 is_stmt 1 view .LVU3643
 368:src/display.c **** }
 11227              		.loc 1 368 3 is_stmt 0 view .LVU3644
 11228              	.LBE622:
 11229              	.LBE621:
2507:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11230              		.loc 1 2507 4 is_stmt 1 view .LVU3645
 11231 095c CBEB4A01 		rsb	r1, fp, r10, lsl #1
 11232 0960 CB19     		adds	r3, r1, r7
 11233 0962 0393     		str	r3, [sp, #12]
2508:src/display.c **** 	    int k = i + base - start;
ARM GAS  /tmp/ccwSk7O0.s 			page 324


 11234              		.loc 1 2508 30 is_stmt 0 view .LVU3646
 11235 0964 0BEB0A03 		add	r3, fp, r10
 11236 0968 0293     		str	r3, [sp, #8]
 11237 096a A7EB0B03 		sub	r3, r7, fp
 11238 096e CDE90436 		strd	r3, r6, [sp, #16]
2507:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11239              		.loc 1 2507 6 view .LVU3647
 11240 0972 0935     		adds	r5, r5, #9
 11241              	.LVL1270:
2508:src/display.c **** 	    int k = i + base - start;
 11242              		.loc 1 2508 4 is_stmt 1 view .LVU3648
2508:src/display.c **** 	    int k = i + base - start;
 11243              		.loc 1 2508 20 view .LVU3649
 11244              	.LBB629:
 11245              	.LBB630:
 11246              	.LBB631:
 11247              	.LBB632:
 11248              	.LBB633:
 365:src/display.c **** #endif
 11249              		.loc 1 365 38 is_stmt 0 view .LVU3650
 11250 0974 0192     		str	r2, [sp, #4]
 11251 0976 BA44     		add	r10, r10, r7
 11252              	.LVL1271:
 365:src/display.c **** #endif
 11253              		.loc 1 365 38 view .LVU3651
 11254 0978 1DE0     		b	.L1004
 11255              	.LVL1272:
 11256              	.L1002:
 365:src/display.c **** #endif
 11257              		.loc 1 365 38 view .LVU3652
 11258              	.LBE633:
 11259              	.LBE632:
 11260              	.LBE631:
 11261              	.LBE630:
2518:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 11262              		.loc 1 2518 6 is_stmt 1 view .LVU3653
 11263 097a 3146     		mov	r1, r6
 11264 097c 2846     		mov	r0, r5
 11265 097e FFF7FEFF 		bl	set_dig
 11266              	.LVL1273:
2519:src/display.c **** 	    j += SEGS_PER_DIGIT;
 11267              		.loc 1 2519 6 view .LVU3654
 11268              	.LBB640:
 11269              	.LBI630:
 357:src/display.c ****   if (res) {
 11270              		.loc 1 357 14 view .LVU3655
 11271              	.LBB638:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11272              		.loc 1 358 3 view .LVU3656
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11273              		.loc 1 361 5 view .LVU3657
 11274 0982 E81D     		adds	r0, r5, #7
 11275 0984 FFF7FEFF 		bl	set_dot
 11276              	.LVL1274:
 362:src/display.c ****       set_dot(posn+8);
 11277              		.loc 1 362 5 view .LVU3658
 11278              	.LBB636:
ARM GAS  /tmp/ccwSk7O0.s 			page 325


 11279              	.LBI632:
 357:src/display.c ****   if (res) {
 11280              		.loc 1 357 14 view .LVU3659
 11281              	.LBB634:
 365:src/display.c **** #endif
 11282              		.loc 1 365 5 view .LVU3660
 365:src/display.c **** #endif
 11283              		.loc 1 365 30 is_stmt 0 view .LVU3661
 11284 0988 384B     		ldr	r3, .L1288+40
 365:src/display.c **** #endif
 11285              		.loc 1 365 38 view .LVU3662
 11286 098a 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11287              		.loc 1 365 30 view .LVU3663
 11288 098c A3FB0523 		umull	r2, r3, r3, r5
 11289 0990 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11290              		.loc 1 365 38 view .LVU3664
 11291 0992 344A     		ldr	r2, .L1288+32
 365:src/display.c **** #endif
 11292              		.loc 1 365 35 view .LVU3665
 11293 0994 0133     		adds	r3, r3, #1
 11294              	.LBE634:
 11295              	.LBE636:
 11296              	.LBE638:
 11297              	.LBE640:
2521:src/display.c **** 	      set_dig(j, 8);
 11298              		.loc 1 2521 9 view .LVU3666
 11299 0996 BBF1040F 		cmp	fp, #4
 11300              	.LBB641:
 11301              	.LBB639:
 11302              	.LBB637:
 11303              	.LBB635:
 365:src/display.c **** #endif
 11304              		.loc 1 365 38 view .LVU3667
 11305 099a 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11306              		.loc 1 368 3 is_stmt 1 view .LVU3668
 11307              	.LVL1275:
 368:src/display.c **** }
 11308              		.loc 1 368 3 is_stmt 0 view .LVU3669
 11309              	.LBE635:
 11310              	.LBE637:
 368:src/display.c **** }
 11311              		.loc 1 368 3 is_stmt 1 view .LVU3670
 368:src/display.c **** }
 11312              		.loc 1 368 3 is_stmt 0 view .LVU3671
 11313              	.LBE639:
 11314              	.LBE641:
2520:src/display.c **** 	    if (i == 4) {
 11315              		.loc 1 2520 6 is_stmt 1 view .LVU3672
2521:src/display.c **** 	      set_dig(j, 8);
 11316              		.loc 1 2521 6 view .LVU3673
2521:src/display.c **** 	      set_dig(j, 8);
 11317              		.loc 1 2521 9 is_stmt 0 view .LVU3674
 11318 099e 23D0     		beq	.L1274
2520:src/display.c **** 	    if (i == 4) {
ARM GAS  /tmp/ccwSk7O0.s 			page 326


 11319              		.loc 1 2520 8 view .LVU3675
 11320 09a0 3D46     		mov	r5, r7
 11321              	.LVL1276:
 11322              	.L1003:
2520:src/display.c **** 	    if (i == 4) {
 11323              		.loc 1 2520 8 view .LVU3676
 11324              	.LBE629:
2508:src/display.c **** 	    int k = i + base - start;
 11325              		.loc 1 2508 39 is_stmt 1 view .LVU3677
2508:src/display.c **** 	    int k = i + base - start;
 11326              		.loc 1 2508 40 is_stmt 0 view .LVU3678
 11327 09a2 009B     		ldr	r3, [sp]
2508:src/display.c **** 	    int k = i + base - start;
 11328              		.loc 1 2508 4 view .LVU3679
 11329 09a4 0299     		ldr	r1, [sp, #8]
 11330 09a6 8B42     		cmp	r3, r1
 11331 09a8 0AF1010A 		add	r10, r10, #1
2508:src/display.c **** 	    int k = i + base - start;
 11332              		.loc 1 2508 40 view .LVU3680
 11333 09ac 9B46     		mov	fp, r3
 11334              	.LVL1277:
2508:src/display.c **** 	    int k = i + base - start;
 11335              		.loc 1 2508 20 is_stmt 1 view .LVU3681
2508:src/display.c **** 	    int k = i + base - start;
 11336              		.loc 1 2508 4 is_stmt 0 view .LVU3682
 11337 09ae 00F09B81 		beq	.L1227
2508:src/display.c **** 	    int k = i + base - start;
 11338              		.loc 1 2508 4 view .LVU3683
 11339 09b2 0133     		adds	r3, r3, #1
 11340              	.LVL1278:
2508:src/display.c **** 	    int k = i + base - start;
 11341              		.loc 1 2508 4 view .LVU3684
 11342 09b4 0093     		str	r3, [sp]
 11343              	.LVL1279:
 11344              	.L1004:
 11345              	.LBB650:
2509:src/display.c **** 	    int l = get_user_flag(k);
 11346              		.loc 1 2509 6 is_stmt 1 view .LVU3685
2510:src/display.c **** 	    k += group;
 11347              		.loc 1 2510 6 view .LVU3686
2510:src/display.c **** 	    k += group;
 11348              		.loc 1 2510 14 is_stmt 0 view .LVU3687
 11349 09b6 049B     		ldr	r3, [sp, #16]
 11350 09b8 03EB0B00 		add	r0, r3, fp
 11351 09bc FFF7FEFF 		bl	get_user_flag
 11352              	.LVL1280:
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11353              		.loc 1 2512 9 view .LVU3688
 11354 09c0 C245     		cmp	r10, r8
2510:src/display.c **** 	    k += group;
 11355              		.loc 1 2510 14 view .LVU3689
 11356 09c2 0646     		mov	r6, r0
 11357              	.LVL1281:
2511:src/display.c **** 	    if (end >= k) {
 11358              		.loc 1 2511 6 is_stmt 1 view .LVU3690
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11359              		.loc 1 2512 6 view .LVU3691
ARM GAS  /tmp/ccwSk7O0.s 			page 327


2520:src/display.c **** 	    if (i == 4) {
 11360              		.loc 1 2520 8 is_stmt 0 view .LVU3692
 11361 09c4 05F10907 		add	r7, r5, #9
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11362              		.loc 1 2512 9 view .LVU3693
 11363 09c8 D7DC     		bgt	.L1002
2513:src/display.c **** 	      k += group;
 11364              		.loc 1 2513 8 is_stmt 1 view .LVU3694
2513:src/display.c **** 	      k += group;
 11365              		.loc 1 2513 14 is_stmt 0 view .LVU3695
 11366 09ca 5046     		mov	r0, r10
 11367              	.LVL1282:
2513:src/display.c **** 	      k += group;
 11368              		.loc 1 2513 14 view .LVU3696
 11369 09cc FFF7FEFF 		bl	get_user_flag
 11370              	.LVL1283:
 11371 09d0 039B     		ldr	r3, [sp, #12]
 11372 09d2 5B44     		add	r3, r3, fp
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11373              		.loc 1 2515 11 view .LVU3697
 11374 09d4 9845     		cmp	r8, r3
2513:src/display.c **** 	      k += group;
 11375              		.loc 1 2513 10 view .LVU3698
 11376 09d6 46EA4006 		orr	r6, r6, r0, lsl #1
 11377              	.LVL1284:
2514:src/display.c **** 	      if (end >= k)
 11378              		.loc 1 2514 8 is_stmt 1 view .LVU3699
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11379              		.loc 1 2515 8 view .LVU3700
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11380              		.loc 1 2515 11 is_stmt 0 view .LVU3701
 11381 09da CEDB     		blt	.L1002
2516:src/display.c **** 	    }
 11382              		.loc 1 2516 3 is_stmt 1 view .LVU3702
2516:src/display.c **** 	    }
 11383              		.loc 1 2516 9 is_stmt 0 view .LVU3703
 11384 09dc 1846     		mov	r0, r3
 11385 09de FFF7FEFF 		bl	get_user_flag
 11386              	.LVL1285:
2516:src/display.c **** 	    }
 11387              		.loc 1 2516 5 view .LVU3704
 11388 09e2 46EA8006 		orr	r6, r6, r0, lsl #2
 11389              	.LVL1286:
2516:src/display.c **** 	    }
 11390              		.loc 1 2516 5 view .LVU3705
 11391 09e6 C8E7     		b	.L1002
 11392              	.LVL1287:
 11393              	.L1274:
2522:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11394              		.loc 1 2522 8 is_stmt 1 view .LVU3706
 11395 09e8 0821     		movs	r1, #8
 11396 09ea 3846     		mov	r0, r7
 11397 09ec FFF7FEFF 		bl	set_dig
 11398              	.LVL1288:
2523:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11399              		.loc 1 2523 8 view .LVU3707
 11400              	.LBB642:
ARM GAS  /tmp/ccwSk7O0.s 			page 328


 11401              	.LBI642:
 357:src/display.c ****   if (res) {
 11402              		.loc 1 357 14 view .LVU3708
 11403              	.LBB643:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11404              		.loc 1 358 3 view .LVU3709
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11405              		.loc 1 361 5 view .LVU3710
 11406 09f0 05F11000 		add	r0, r5, #16
 11407 09f4 FFF7FEFF 		bl	set_dot
 11408              	.LVL1289:
 362:src/display.c ****       set_dot(posn+8);
 11409              		.loc 1 362 5 view .LVU3711
 11410              	.LBB644:
 11411              	.LBI644:
 357:src/display.c ****   if (res) {
 11412              		.loc 1 357 14 view .LVU3712
 11413              	.LBB645:
 365:src/display.c **** #endif
 11414              		.loc 1 365 5 view .LVU3713
 365:src/display.c **** #endif
 11415              		.loc 1 365 30 is_stmt 0 view .LVU3714
 11416 09f8 1C4B     		ldr	r3, .L1288+40
 365:src/display.c **** #endif
 11417              		.loc 1 365 38 view .LVU3715
 11418 09fa 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11419              		.loc 1 365 30 view .LVU3716
 11420 09fc A3FB0723 		umull	r2, r3, r3, r7
 11421 0a00 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11422              		.loc 1 365 38 view .LVU3717
 11423 0a02 184A     		ldr	r2, .L1288+32
 365:src/display.c **** #endif
 11424              		.loc 1 365 35 view .LVU3718
 11425 0a04 0133     		adds	r3, r3, #1
 11426              	.LBE645:
 11427              	.LBE644:
 11428              	.LBE643:
 11429              	.LBE642:
2524:src/display.c **** 	    }
 11430              		.loc 1 2524 10 view .LVU3719
 11431 0a06 1235     		adds	r5, r5, #18
 11432              	.LBB649:
 11433              	.LBB648:
 11434              	.LBB647:
 11435              	.LBB646:
 365:src/display.c **** #endif
 11436              		.loc 1 365 38 view .LVU3720
 11437 0a08 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11438              		.loc 1 368 3 is_stmt 1 view .LVU3721
 11439              	.LVL1290:
 368:src/display.c **** }
 11440              		.loc 1 368 3 is_stmt 0 view .LVU3722
 11441              	.LBE646:
 11442              	.LBE647:
ARM GAS  /tmp/ccwSk7O0.s 			page 329


 368:src/display.c **** }
 11443              		.loc 1 368 3 is_stmt 1 view .LVU3723
 368:src/display.c **** }
 11444              		.loc 1 368 3 is_stmt 0 view .LVU3724
 11445              	.LBE648:
 11446              	.LBE649:
2524:src/display.c **** 	    }
 11447              		.loc 1 2524 8 is_stmt 1 view .LVU3725
2524:src/display.c **** 	    }
 11448              		.loc 1 2524 8 is_stmt 0 view .LVU3726
 11449 0a0c C9E7     		b	.L1003
 11450              	.LVL1291:
 11451              	.L1102:
2524:src/display.c **** 	    }
 11452              		.loc 1 2524 8 view .LVU3727
 11453              	.LBE650:
 11454              	.LBE620:
 11455              	.LBE619:
 11456              	.LBE618:
 11457              	.LBB655:
 11458              	.LBB587:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11459              		.loc 1 1353 4 view .LVU3728
 11460 0a0e 8B46     		mov	fp, r1
 11461 0a10 80E5     		b	.L1059
 11462              	.LVL1292:
 11463              	.L972:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11464              		.loc 1 1353 4 view .LVU3729
 11465              	.LBE587:
 11466              	.LBE655:
2805:src/display.c **** 	    }
 11467              		.loc 1 2805 3 is_stmt 1 view .LVU3730
2805:src/display.c **** 	    }
 11468              		.loc 1 2805 8 is_stmt 0 view .LVU3731
 11469 0a12 2189     		ldrh	r1, [r4, #8]
 11470 0a14 FFF7FEFF 		bl	num_arg_0
 11471              	.LVL1293:
2805:src/display.c **** 	    }
 11472              		.loc 1 2805 8 view .LVU3732
 11473 0a18 E1E5     		b	.L971
 11474              	.LVL1294:
 11475              	.L1253:
2983:src/display.c **** 		    SET_POLAR_READY;
 11476              		.loc 1 2983 7 is_stmt 1 view .LVU3733
 11477 0a1a 5046     		mov	r0, r10
 11478 0a1c FFF7FEFF 		bl	op_r2p
 11479              	.LVL1295:
2984:src/display.c **** 		  }
 11480              		.loc 1 2984 7 view .LVU3734
 11481 0a20 0B49     		ldr	r1, .L1288+12
 11482 0a22 0B68     		ldr	r3, [r1]
 11483 0a24 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 11484 0a28 6AF30412 		bfi	r2, r10, #4, #1
 11485 0a2c 83F8DE27 		strb	r2, [r3, #2014]
 11486 0a30 1AE5     		b	.L1046
 11487              	.LVL1296:
ARM GAS  /tmp/ccwSk7O0.s 			page 330


 11488              	.L1265:
 11489              	.LBB656:
 11490              	.LBB588:
 11491              	.LBB579:
1380:src/display.c **** 	      p++;
 11492              		.loc 1 1380 8 view .LVU3735
1381:src/display.c **** 	      if (!double_dot)
 11493              		.loc 1 1381 8 view .LVU3736
1383:src/display.c **** 	    }
 11494              		.loc 1 1383 5 is_stmt 0 view .LVU3737
 11495 0a32 002B     		cmp	r3, #0
1381:src/display.c **** 	      if (!double_dot)
 11496              		.loc 1 1381 9 view .LVU3738
 11497 0a34 05F10105 		add	r5, r5, #1
 11498              	.LVL1297:
1382:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 11499              		.loc 1 1382 8 is_stmt 1 view .LVU3739
1383:src/display.c **** 	    }
 11500              		.loc 1 1383 5 is_stmt 0 view .LVU3740
 11501 0a38 14BF     		ite	ne
 11502 0a3a 4FF0090B 		movne	fp, #9
 11503 0a3e 4FF0120B 		moveq	fp, #18
 11504 0a42 E8E5     		b	.L1064
 11505              	.L1289:
 11506              		.align	2
 11507              	.L1288:
 11508 0a44 00000000 		.word	DispMsg
 11509 0a48 00000000 		.word	DispPlot
 11510 0a4c 00000000 		.word	.LANCHOR1
 11511 0a50 00000000 		.word	main_ram
 11512 0a54 3C000000 		.word	.LC29
 11513 0a58 00000000 		.word	ShowRegister
 11514 0a5c 00000000 		.word	multicmds
 11515 0a60 00000000 		.word	.LANCHOR23
 11516 0a64 00000000 		.word	LastDisplayedNumber
 11517 0a68 8C000000 		.word	.LC40
 11518 0a6c 398EE338 		.word	954437177
 11519 0a70 00000000 		.word	.LANCHOR22
 11520              	.LVL1298:
 11521              	.L1104:
1373:src/display.c **** 	    if (gotdot <= j) {
 11522              		.loc 1 1373 8 view .LVU3741
 11523 0a74 4FF0090B 		mov	fp, #9
 11524 0a78 CDE5     		b	.L1064
 11525              	.LVL1299:
 11526              	.L1026:
1373:src/display.c **** 	    if (gotdot <= j) {
 11527              		.loc 1 1373 8 view .LVU3742
 11528              	.LBE579:
 11529              	.LBE588:
 11530              	.LBE656:
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11531              		.loc 1 2920 11 is_stmt 1 view .LVU3743
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11532              		.loc 1 2920 15 is_stmt 0 view .LVU3744
 11533 0a7a B44A     		ldr	r2, .L1290
 11534 0a7c 0092     		str	r2, [sp]
ARM GAS  /tmp/ccwSk7O0.s 			page 331


 11535 0a7e B2F90020 		ldrsh	r2, [r2]
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11536              		.loc 1 2920 14 view .LVU3745
 11537 0a82 002A     		cmp	r2, #0
 11538 0a84 40F0EA80 		bne	.L1275
2922:src/display.c **** 	    bp = scopy(buf, Alpha);
 11539              		.loc 1 2922 11 is_stmt 1 view .LVU3746
2922:src/display.c **** 	    bp = scopy(buf, Alpha);
 11540              		.loc 1 2922 14 is_stmt 0 view .LVU3747
 11541 0a88 0907     		lsls	r1, r1, #28
 11542 0a8a 00F1A380 		bmi	.L1276
 11543              	.LVL1300:
2971:src/display.c ****       nostk:
 11544              		.loc 1 2971 2 is_stmt 1 view .LVU3748
 11545 0a8e FFF7FEFF 		bl	show_stack
 11546              	.LVL1301:
2973:src/display.c **** 	if (!skip) {
 11547              		.loc 1 2973 2 view .LVU3749
2954:src/display.c **** 	  }
 11548              		.loc 1 2954 12 is_stmt 0 view .LVU3750
 11549 0a92 0126     		movs	r6, #1
2973:src/display.c **** 	if (!skip) {
 11550              		.loc 1 2973 2 view .LVU3751
 11551 0a94 FFF7FEFF 		bl	show_flags
 11552              	.LVL1302:
2974:src/display.c **** 	  if (State2.runmode) {
 11553              		.loc 1 2974 2 is_stmt 1 view .LVU3752
 11554 0a98 FFF7F5BA 		b	.L955
 11555              	.LVL1303:
 11556              	.L1272:
 11557              	.LBB657:
 11558              	.LBB653:
 11559              	.LBB651:
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11560              		.loc 1 2484 6 view .LVU3753
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11561              		.loc 1 2484 11 is_stmt 0 view .LVU3754
 11562 0a9c 4FF00A0A 		mov	r10, #10
 11563              	.LVL1304:
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11564              		.loc 1 2484 11 view .LVU3755
 11565 0aa0 0AFB03F7 		mul	r7, r10, r3
 11566              	.LVL1305:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11567              		.loc 1 2485 6 is_stmt 1 view .LVU3756
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11568              		.loc 1 2485 28 is_stmt 0 view .LVU3757
 11569 0aa4 462F     		cmp	r7, #70
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11570              		.loc 1 2486 10 view .LVU3758
 11571 0aa6 AA49     		ldr	r1, .L1290+4
 11572 0aa8 15A8     		add	r0, sp, #84
 11573              	.LVL1306:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11574              		.loc 1 2485 28 view .LVU3759
 11575 0aaa B846     		mov	r8, r7
 11576 0aac A8BF     		it	ge
ARM GAS  /tmp/ccwSk7O0.s 			page 332


 11577 0aae 4FF04608 		movge	r8, #70
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11578              		.loc 1 2486 10 view .LVU3760
 11579 0ab2 FFF7FEFF 		bl	scopy
 11580              	.LVL1307:
2487:src/display.c **** 	    *p++ = '-';
 11581              		.loc 1 2487 10 view .LVU3761
 11582 0ab6 3946     		mov	r1, r7
 11583 0ab8 0222     		movs	r2, #2
 11584 0aba FFF7FEFF 		bl	num_arg_0
 11585              	.LVL1308:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11586              		.loc 1 2485 10 view .LVU3762
 11587 0abe 08F11D08 		add	r8, r8, #29
 11588              	.LVL1309:
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11589              		.loc 1 2486 6 is_stmt 1 view .LVU3763
2487:src/display.c **** 	    *p++ = '-';
 11590              		.loc 1 2487 6 view .LVU3764
2488:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11591              		.loc 1 2488 6 view .LVU3765
2488:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11592              		.loc 1 2488 11 is_stmt 0 view .LVU3766
 11593 0ac2 2D23     		movs	r3, #45
 11594 0ac4 00F8013B 		strb	r3, [r0], #1
 11595              	.LVL1310:
2489:src/display.c **** 	    *p = '\0';
 11596              		.loc 1 2489 6 is_stmt 1 view .LVU3767
2489:src/display.c **** 	    *p = '\0';
 11597              		.loc 1 2489 10 is_stmt 0 view .LVU3768
 11598 0ac8 4146     		mov	r1, r8
 11599 0aca 0222     		movs	r2, #2
 11600 0acc FFF7FEFF 		bl	num_arg_0
 11601              	.LVL1311:
2489:src/display.c **** 	    *p = '\0';
 11602              		.loc 1 2489 10 view .LVU3769
 11603 0ad0 0246     		mov	r2, r0
 11604              	.LVL1312:
2490:src/display.c **** 	    set_status(buf);
 11605              		.loc 1 2490 6 is_stmt 1 view .LVU3770
2490:src/display.c **** 	    set_status(buf);
 11606              		.loc 1 2490 9 is_stmt 0 view .LVU3771
 11607 0ad2 4FF0000B 		mov	fp, #0
2491:src/display.c **** 	  }
 11608              		.loc 1 2491 6 view .LVU3772
 11609 0ad6 15A8     		add	r0, sp, #84
 11610              	.LVL1313:
2490:src/display.c **** 	    set_status(buf);
 11611              		.loc 1 2490 9 view .LVU3773
 11612 0ad8 82F800B0 		strb	fp, [r2]
2491:src/display.c **** 	  }
 11613              		.loc 1 2491 6 is_stmt 1 view .LVU3774
 11614 0adc FFF7FEFF 		bl	set_status
 11615              	.LVL1314:
2491:src/display.c **** 	  }
 11616              		.loc 1 2491 6 is_stmt 0 view .LVU3775
 11617 0ae0 2FE7     		b	.L1000
ARM GAS  /tmp/ccwSk7O0.s 			page 333


 11618              	.LVL1315:
 11619              	.L1271:
2491:src/display.c **** 	  }
 11620              		.loc 1 2491 6 view .LVU3776
 11621              	.LBE651:
2463:src/display.c **** 	  if (SizeStatRegs)
 11622              		.loc 1 2463 4 is_stmt 1 view .LVU3777
2463:src/display.c **** 	  if (SizeStatRegs)
 11623              		.loc 1 2463 8 is_stmt 0 view .LVU3778
 11624 0ae2 15AF     		add	r7, sp, #84
 11625              	.LVL1316:
2463:src/display.c **** 	  if (SizeStatRegs)
 11626              		.loc 1 2463 8 view .LVU3779
 11627 0ae4 9B49     		ldr	r1, .L1290+8
 11628 0ae6 3846     		mov	r0, r7
 11629 0ae8 FFF7FEFF 		bl	scopy
 11630              	.LVL1317:
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11631              		.loc 1 2464 8 view .LVU3780
 11632 0aec 9A4A     		ldr	r2, .L1290+12
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11633              		.loc 1 2464 7 view .LVU3781
 11634 0aee 1268     		ldr	r2, [r2]
2463:src/display.c **** 	  if (SizeStatRegs)
 11635              		.loc 1 2463 8 view .LVU3782
 11636 0af0 0346     		mov	r3, r0
 11637              	.LVL1318:
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11638              		.loc 1 2464 4 is_stmt 1 view .LVU3783
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11639              		.loc 1 2464 7 is_stmt 0 view .LVU3784
 11640 0af2 002A     		cmp	r2, #0
 11641 0af4 4ED1     		bne	.L1277
 11642              	.L997:
2466:src/display.c **** 	  set_status(buf);
 11643              		.loc 1 2466 4 is_stmt 1 view .LVU3785
2466:src/display.c **** 	  set_status(buf);
 11644              		.loc 1 2466 7 is_stmt 0 view .LVU3786
 11645 0af6 0022     		movs	r2, #0
 11646 0af8 1A70     		strb	r2, [r3]
2467:src/display.c **** 
 11647              		.loc 1 2467 4 is_stmt 1 view .LVU3787
 11648 0afa 3846     		mov	r0, r7
 11649              	.LVL1319:
2467:src/display.c **** 
 11650              		.loc 1 2467 4 is_stmt 0 view .LVU3788
 11651 0afc FFF7FEFF 		bl	set_status
 11652              	.LVL1320:
2470:src/display.c **** 	  if (LocalRegs < 0) {
 11653              		.loc 1 2470 4 is_stmt 1 view .LVU3789
2470:src/display.c **** 	  if (LocalRegs < 0) {
 11654              		.loc 1 2470 8 is_stmt 0 view .LVU3790
 11655 0b00 FFF7FEFF 		bl	global_regs
 11656              	.LVL1321:
 11657 0b04 0146     		mov	r1, r0
 11658 0b06 3846     		mov	r0, r7
 11659 0b08 FFF7FEFF 		bl	num_arg
ARM GAS  /tmp/ccwSk7O0.s 			page 334


 11660              	.LVL1322:
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11661              		.loc 1 2471 8 view .LVU3791
 11662 0b0c 934B     		ldr	r3, .L1290+16
 11663 0b0e 1A68     		ldr	r2, [r3]
 11664 0b10 B2F8DE27 		ldrh	r2, [r2, #2014]
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11665              		.loc 1 2471 7 view .LVU3792
 11666 0b14 1104     		lsls	r1, r2, #16
2470:src/display.c **** 	  if (LocalRegs < 0) {
 11667              		.loc 1 2470 8 view .LVU3793
 11668 0b16 0346     		mov	r3, r0
 11669              	.LVL1323:
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11670              		.loc 1 2471 4 is_stmt 1 view .LVU3794
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11671              		.loc 1 2471 7 is_stmt 0 view .LVU3795
 11672 0b18 30D4     		bmi	.L1278
 11673              	.L998:
2475:src/display.c **** 	  set_digits_string(buf, 0);
 11674              		.loc 1 2475 4 is_stmt 1 view .LVU3796
2475:src/display.c **** 	  set_digits_string(buf, 0);
 11675              		.loc 1 2475 7 is_stmt 0 view .LVU3797
 11676 0b1a 0021     		movs	r1, #0
2476:src/display.c **** 	} else {
 11677              		.loc 1 2476 4 view .LVU3798
 11678 0b1c 3846     		mov	r0, r7
 11679              	.LVL1324:
2475:src/display.c **** 	  set_digits_string(buf, 0);
 11680              		.loc 1 2475 7 view .LVU3799
 11681 0b1e 1970     		strb	r1, [r3]
2476:src/display.c **** 	} else {
 11682              		.loc 1 2476 4 is_stmt 1 view .LVU3800
 11683 0b20 FFF7FEFF 		bl	set_digits_string
 11684              	.LVL1325:
 11685              	.L995:
2529:src/display.c **** 	pc = state_pc();
 11686              		.loc 1 2529 2 view .LVU3801
2530:src/display.c **** 	if (isXROM(pc))
 11687              		.loc 1 2530 2 view .LVU3802
2530:src/display.c **** 	if (isXROM(pc))
 11688              		.loc 1 2530 7 is_stmt 0 view .LVU3803
 11689 0b24 8D4B     		ldr	r3, .L1290+16
 11690 0b26 1B68     		ldr	r3, [r3]
2530:src/display.c **** 	if (isXROM(pc))
 11691              		.loc 1 2530 5 view .LVU3804
 11692 0b28 B3F8E077 		ldrh	r7, [r3, #2016]
 11693              	.LVL1326:
2531:src/display.c **** 	  pc = 1;
 11694              		.loc 1 2531 2 is_stmt 1 view .LVU3805
2531:src/display.c **** 	  pc = 1;
 11695              		.loc 1 2531 6 is_stmt 0 view .LVU3806
 11696 0b2c BB0B     		lsrs	r3, r7, #14
2532:src/display.c **** 	for (n=i=0; i<4; i++) {
 11697              		.loc 1 2532 7 view .LVU3807
 11698 0b2e 032B     		cmp	r3, #3
 11699 0b30 08BF     		it	eq
ARM GAS  /tmp/ccwSk7O0.s 			page 335


 11700 0b32 0127     		moveq	r7, #1
 11701              	.LVL1327:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11702              		.loc 1 2533 2 is_stmt 1 view .LVU3808
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11703              		.loc 1 2533 14 view .LVU3809
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11704              		.loc 1 2533 8 is_stmt 0 view .LVU3810
 11705 0b34 4FF0000A 		mov	r10, #0
 11706 0b38 6425     		movs	r5, #100
2529:src/display.c **** 	pc = state_pc();
 11707              		.loc 1 2529 4 view .LVU3811
 11708 0b3a 4FF06C08 		mov	r8, #108
 11709              	.LVL1328:
 11710              	.L1008:
2534:src/display.c **** 	    if (++n == 4) {
 11711              		.loc 1 2534 4 is_stmt 1 view .LVU3812
2534:src/display.c **** 	    if (++n == 4) {
 11712              		.loc 1 2534 8 is_stmt 0 view .LVU3813
 11713 0b3e 0222     		movs	r2, #2
 11714 0b40 2946     		mov	r1, r5
 11715 0b42 3846     		mov	r0, r7
 11716 0b44 FFF7FEFF 		bl	find_label_from
 11717              	.LVL1329:
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11718              		.loc 1 2535 6 is_stmt 1 view .LVU3814
2534:src/display.c **** 	    if (++n == 4) {
 11719              		.loc 1 2534 7 is_stmt 0 view .LVU3815
 11720 0b48 58B1     		cbz	r0, .L1006
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11721              		.loc 1 2535 9 view .LVU3816
 11722 0b4a 0AF1010A 		add	r10, r10, #1
 11723              	.LVL1330:
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11724              		.loc 1 2539 8 is_stmt 1 view .LVU3817
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11725              		.loc 1 2535 9 is_stmt 0 view .LVU3818
 11726 0b4e BAF1040F 		cmp	r10, #4
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11727              		.loc 1 2539 8 view .LVU3819
 11728 0b52 A5F12301 		sub	r1, r5, #35
 11729 0b56 4046     		mov	r0, r8
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11730              		.loc 1 2535 9 view .LVU3820
 11731 0b58 07D0     		beq	.L1279
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11732              		.loc 1 2539 8 view .LVU3821
 11733 0b5a FFF7FEFF 		bl	set_dig
 11734              	.LVL1331:
2540:src/display.c **** 	    }
 11735              		.loc 1 2540 8 is_stmt 1 view .LVU3822
2540:src/display.c **** 	    }
 11736              		.loc 1 2540 10 is_stmt 0 view .LVU3823
 11737 0b5e 08F10708 		add	r8, r8, #7
 11738              	.LVL1332:
 11739              	.L1006:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
ARM GAS  /tmp/ccwSk7O0.s 			page 336


 11740              		.loc 1 2533 19 is_stmt 1 view .LVU3824
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11741              		.loc 1 2533 14 view .LVU3825
 11742 0b62 0135     		adds	r5, r5, #1
 11743              	.LVL1333:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11744              		.loc 1 2533 2 is_stmt 0 view .LVU3826
 11745 0b64 682D     		cmp	r5, #104
 11746 0b66 EAD1     		bne	.L1008
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11747              		.loc 1 2533 2 view .LVU3827
 11748 0b68 CEE6     		b	.L1242
 11749              	.LVL1334:
 11750              	.L1279:
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11751              		.loc 1 2536 8 is_stmt 1 view .LVU3828
 11752 0b6a 4C21     		movs	r1, #76
 11753 0b6c 7320     		movs	r0, #115
 11754              	.LVL1335:
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11755              		.loc 1 2536 8 is_stmt 0 view .LVU3829
 11756 0b6e FFF7FEFF 		bl	set_dig
 11757              	.LVL1336:
2537:src/display.c **** 	    } else {
 11758              		.loc 1 2537 8 is_stmt 1 view .LVU3830
 11759 0b72 4C21     		movs	r1, #76
 11760 0b74 7A20     		movs	r0, #122
 11761 0b76 FFF7FEFF 		bl	set_dig
 11762              	.LVL1337:
 11763 0b7a F2E7     		b	.L1006
 11764              	.LVL1338:
 11765              	.L1278:
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 11766              		.loc 1 2472 6 view .LVU3831
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 11767              		.loc 1 2472 10 is_stmt 0 view .LVU3832
 11768 0b7c 7849     		ldr	r1, .L1290+20
 11769 0b7e FFF7FEFF 		bl	scopy
 11770              	.LVL1339:
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 11771              		.loc 1 2472 10 view .LVU3833
 11772 0b82 0546     		mov	r5, r0
 11773              	.LVL1340:
2473:src/display.c **** 	  }
 11774              		.loc 1 2473 6 is_stmt 1 view .LVU3834
2473:src/display.c **** 	  }
 11775              		.loc 1 2473 21 is_stmt 0 view .LVU3835
 11776 0b84 FFF7FEFF 		bl	local_regs
 11777              	.LVL1341:
2473:src/display.c **** 	  }
 11778              		.loc 1 2473 21 view .LVU3836
 11779 0b88 0146     		mov	r1, r0
2473:src/display.c **** 	  }
 11780              		.loc 1 2473 10 view .LVU3837
 11781 0b8a 2846     		mov	r0, r5
 11782 0b8c FFF7FEFF 		bl	num_arg
 11783              	.LVL1342:
ARM GAS  /tmp/ccwSk7O0.s 			page 337


 11784 0b90 0346     		mov	r3, r0
 11785              	.LVL1343:
2473:src/display.c **** 	  }
 11786              		.loc 1 2473 10 view .LVU3838
 11787 0b92 C2E7     		b	.L998
 11788              	.L1277:
2465:src/display.c **** 	  *p = '\0';
 11789              		.loc 1 2465 6 is_stmt 1 view .LVU3839
2465:src/display.c **** 	  *p = '\0';
 11790              		.loc 1 2465 10 is_stmt 0 view .LVU3840
 11791 0b94 7349     		ldr	r1, .L1290+24
 11792 0b96 FFF7FEFF 		bl	scopy
 11793              	.LVL1344:
2465:src/display.c **** 	  *p = '\0';
 11794              		.loc 1 2465 10 view .LVU3841
 11795 0b9a 0346     		mov	r3, r0
 11796              	.LVL1345:
2465:src/display.c **** 	  *p = '\0';
 11797              		.loc 1 2465 10 view .LVU3842
 11798 0b9c ABE7     		b	.L997
 11799              	.LVL1346:
 11800              	.L1025:
2465:src/display.c **** 	  *p = '\0';
 11801              		.loc 1 2465 10 view .LVU3843
 11802              	.LBE653:
 11803              	.LBE657:
2961:src/display.c **** 	  if (i > 0)
 11804              		.loc 1 2961 4 is_stmt 1 view .LVU3844
2961:src/display.c **** 	  if (i > 0)
 11805              		.loc 1 2961 8 is_stmt 0 view .LVU3845
 11806 0b9e 6F4B     		ldr	r3, .L1290+16
 11807 0ba0 1B68     		ldr	r3, [r3]
 11808 0ba2 B3F8E007 		ldrh	r0, [r3, #2016]
 11809              	.LVL1347:
2962:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11810              		.loc 1 2962 4 is_stmt 1 view .LVU3846
2962:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11811              		.loc 1 2962 7 is_stmt 0 view .LVU3847
 11812 0ba6 88B1     		cbz	r0, .L1039
2963:src/display.c **** 	  else
 11813              		.loc 1 2963 6 is_stmt 1 view .LVU3848
 11814 0ba8 FFF7FEFF 		bl	getprog
 11815              	.LVL1348:
2963:src/display.c **** 	  else
 11816              		.loc 1 2963 6 is_stmt 0 view .LVU3849
 11817 0bac 1EA9     		add	r1, sp, #120
 11818              	.LVL1349:
2963:src/display.c **** 	  else
 11819              		.loc 1 2963 6 view .LVU3850
 11820 0bae FFF7FEFF 		bl	prt
 11821              	.LVL1350:
2963:src/display.c **** 	  else
 11822              		.loc 1 2963 6 view .LVU3851
 11823 0bb2 FFF7FEFF 		bl	set_status
 11824              	.LVL1351:
 11825              	.L1040:
2966:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
ARM GAS  /tmp/ccwSk7O0.s 			page 338


 11826              		.loc 1 2966 4 is_stmt 1 view .LVU3852
 11827 0bb6 8920     		movs	r0, #137
 11828 0bb8 FFF7FEFF 		bl	set_dot
 11829              	.LVL1352:
2968:src/display.c **** 	  goto nostk;
 11830              		.loc 1 2968 6 view .LVU3853
2969:src/display.c **** 	}
 11831              		.loc 1 2969 4 view .LVU3854
2973:src/display.c **** 	if (!skip) {
 11832              		.loc 1 2973 2 view .LVU3855
2968:src/display.c **** 	  goto nostk;
 11833              		.loc 1 2968 12 is_stmt 0 view .LVU3856
 11834 0bbc 0126     		movs	r6, #1
2973:src/display.c **** 	if (!skip) {
 11835              		.loc 1 2973 2 view .LVU3857
 11836 0bbe FFF7FEFF 		bl	show_flags
 11837              	.LVL1353:
 11838              	.L1239:
2974:src/display.c **** 	  if (State2.runmode) {
 11839              		.loc 1 2974 2 is_stmt 1 view .LVU3858
 11840 0bc2 624B     		ldr	r3, .L1290
 11841 0bc4 684F     		ldr	r7, .L1290+28
 11842 0bc6 0093     		str	r3, [sp]
 11843 0bc8 FFF75DBA 		b	.L955
 11844              	.LVL1354:
 11845              	.L1039:
2965:src/display.c **** 	  set_dot(STO_annun);
 11846              		.loc 1 2965 6 view .LVU3859
 11847 0bcc 6748     		ldr	r0, .L1290+32
 11848              	.LVL1355:
2965:src/display.c **** 	  set_dot(STO_annun);
 11849              		.loc 1 2965 6 is_stmt 0 view .LVU3860
 11850 0bce FFF7FEFF 		bl	set_status
 11851              	.LVL1356:
2965:src/display.c **** 	  set_dot(STO_annun);
 11852              		.loc 1 2965 6 view .LVU3861
 11853 0bd2 F0E7     		b	.L1040
 11854              	.L1276:
2923:src/display.c **** 	    j = State2.alpha_pos;
 11855              		.loc 1 2923 6 is_stmt 1 view .LVU3862
2923:src/display.c **** 	    j = State2.alpha_pos;
 11856              		.loc 1 2923 22 is_stmt 0 view .LVU3863
 11857 0bd4 614B     		ldr	r3, .L1290+16
 11858 0bd6 0192     		str	r2, [sp, #4]
 11859 0bd8 1968     		ldr	r1, [r3]
2923:src/display.c **** 	    j = State2.alpha_pos;
 11860              		.loc 1 2923 11 view .LVU3864
 11861 0bda 1EA8     		add	r0, sp, #120
 11862              	.LVL1357:
2923:src/display.c **** 	    j = State2.alpha_pos;
 11863              		.loc 1 2923 11 view .LVU3865
 11864 0bdc 01F5F661 		add	r1, r1, #1968
 11865 0be0 FFF7FEFF 		bl	scopy
 11866              	.LVL1358:
2924:src/display.c **** 	    if (j != 0) {
 11867              		.loc 1 2924 16 view .LVU3866
 11868 0be4 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 339


 11869              	.LVL1359:
2924:src/display.c **** 	    if (j != 0) {
 11870              		.loc 1 2924 6 is_stmt 1 view .LVU3867
2925:src/display.c **** 	      i = slen(buf);
 11871              		.loc 1 2925 6 view .LVU3868
2925:src/display.c **** 	      i = slen(buf);
 11872              		.loc 1 2925 9 is_stmt 0 view .LVU3869
 11873 0be6 2BBB     		cbnz	r3, .L1280
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11874              		.loc 1 2938 8 is_stmt 1 view .LVU3870
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11875              		.loc 1 2938 11 is_stmt 0 view .LVU3871
 11876 0be8 3DB1     		cbz	r5, .L1037
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11877              		.loc 1 2938 31 discriminator 1 view .LVU3872
 11878 0bea BBF1000F 		cmp	fp, #0
 11879 0bee 04D1     		bne	.L1037
2939:src/display.c **** 		*bp++ = '\0';
 11880              		.loc 1 2939 3 is_stmt 1 view .LVU3873
 11881              	.LVL1360:
2939:src/display.c **** 		*bp++ = '\0';
 11882              		.loc 1 2939 23 is_stmt 0 view .LVU3874
 11883 0bf0 05F11003 		add	r3, r5, #16
 11884              	.LVL1361:
2940:src/display.c **** 	      }
 11885              		.loc 1 2940 9 view .LVU3875
 11886 0bf4 0022     		movs	r2, #0
2939:src/display.c **** 		*bp++ = '\0';
 11887              		.loc 1 2939 9 view .LVU3876
 11888 0bf6 0370     		strb	r3, [r0]
 11889              	.LVL1362:
2940:src/display.c **** 	      }
 11890              		.loc 1 2940 3 is_stmt 1 view .LVU3877
2940:src/display.c **** 	      }
 11891              		.loc 1 2940 9 is_stmt 0 view .LVU3878
 11892 0bf8 4270     		strb	r2, [r0, #1]
 11893              	.LVL1363:
 11894              	.L1037:
2942:src/display.c **** 	    }
 11895              		.loc 1 2942 8 is_stmt 1 view .LVU3879
 11896 0bfa 1EA8     		add	r0, sp, #120
 11897 0bfc FFF7FEFF 		bl	set_status_right
 11898              	.LVL1364:
 11899              	.L1036:
2944:src/display.c **** 	      bp = buf;
 11900              		.loc 1 2944 6 view .LVU3880
2944:src/display.c **** 	      bp = buf;
 11901              		.loc 1 2944 9 is_stmt 0 view .LVU3881
 11902 0c00 002D     		cmp	r5, #0
 11903 0c02 5CD0     		beq	.L1028
2944:src/display.c **** 	      bp = buf;
 11904              		.loc 1 2944 27 discriminator 1 view .LVU3882
 11905 0c04 BBF1000F 		cmp	fp, #0
 11906 0c08 59D0     		beq	.L1028
2945:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11907              		.loc 1 2945 8 is_stmt 1 view .LVU3883
 11908              	.LVL1365:
ARM GAS  /tmp/ccwSk7O0.s 			page 340


2946:src/display.c **** 	      *bp++ = '\0';
 11909              		.loc 1 2946 8 view .LVU3884
 11910              	.LBB658:
 11911              	.LBB659:
3638:src/display.c **** 	if (State2.runmode) {
 11912              		.loc 1 3638 5 is_stmt 0 view .LVU3885
 11913 0c0a B9F90030 		ldrsh	r3, [r9]
 11914              	.LBE659:
 11915              	.LBE658:
2946:src/display.c **** 	      *bp++ = '\0';
 11916              		.loc 1 2946 28 view .LVU3886
 11917 0c0e 1035     		adds	r5, r5, #16
2947:src/display.c **** 	      set_status_top(buf);
 11918              		.loc 1 2947 14 view .LVU3887
 11919 0c10 0022     		movs	r2, #0
2946:src/display.c **** 	      *bp++ = '\0';
 11920              		.loc 1 2946 14 view .LVU3888
 11921 0c12 8DF87850 		strb	r5, [sp, #120]
2947:src/display.c **** 	      set_status_top(buf);
 11922              		.loc 1 2947 8 is_stmt 1 view .LVU3889
 11923              	.LVL1366:
2947:src/display.c **** 	      set_status_top(buf);
 11924              		.loc 1 2947 14 is_stmt 0 view .LVU3890
 11925 0c16 8DF87920 		strb	r2, [sp, #121]
2948:src/display.c **** 	      no_status_top = 1;
 11926              		.loc 1 2948 8 is_stmt 1 view .LVU3891
 11927              	.LVL1367:
 11928              	.LBB661:
 11929              	.LBI658:
3637:src/display.c **** 	if (no_status_top) return;
 11930              		.loc 1 3637 19 view .LVU3892
 11931              	.LBB660:
3638:src/display.c **** 	if (State2.runmode) {
 11932              		.loc 1 3638 2 view .LVU3893
3638:src/display.c **** 	if (State2.runmode) {
 11933              		.loc 1 3638 5 is_stmt 0 view .LVU3894
 11934 0c1a 13B9     		cbnz	r3, .L1038
 11935 0c1c 1EA8     		add	r0, sp, #120
 11936              	.LVL1368:
3638:src/display.c **** 	if (State2.runmode) {
 11937              		.loc 1 3638 5 view .LVU3895
 11938 0c1e FFF7FEFF 		bl	set_status_top.part.0
 11939              	.LVL1369:
 11940              	.L1038:
3638:src/display.c **** 	if (State2.runmode) {
 11941              		.loc 1 3638 5 view .LVU3896
 11942              	.LBE660:
 11943              	.LBE661:
2949:src/display.c **** 	      //annuc = 1;
 11944              		.loc 1 2949 8 is_stmt 1 view .LVU3897
2949:src/display.c **** 	      //annuc = 1;
 11945              		.loc 1 2949 22 is_stmt 0 view .LVU3898
 11946 0c22 0123     		movs	r3, #1
 11947 0c24 A9F80030 		strh	r3, [r9]	@ movhi
2971:src/display.c ****       nostk:
 11948              		.loc 1 2971 2 is_stmt 1 view .LVU3899
 11949 0c28 FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/ccwSk7O0.s 			page 341


 11950              	.LVL1370:
2973:src/display.c **** 	if (!skip) {
 11951              		.loc 1 2973 2 view .LVU3900
 11952 0c2c FFF7FEFF 		bl	show_flags
 11953              	.LVL1371:
2974:src/display.c **** 	  if (State2.runmode) {
 11954              		.loc 1 2974 2 view .LVU3901
 11955 0c30 FFF729BA 		b	.L955
 11956              	.LVL1372:
 11957              	.L1280:
2926:src/display.c **** 	      j *= 6;
 11958              		.loc 1 2926 8 view .LVU3902
2926:src/display.c **** 	      j *= 6;
 11959              		.loc 1 2926 12 is_stmt 0 view .LVU3903
 11960 0c34 1EA8     		add	r0, sp, #120
 11961              	.LVL1373:
2926:src/display.c **** 	      j *= 6;
 11962              		.loc 1 2926 12 view .LVU3904
 11963 0c36 0293     		str	r3, [sp, #8]
 11964 0c38 FFF7FEFF 		bl	slen
 11965              	.LVL1374:
2927:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11966              		.loc 1 2927 8 is_stmt 1 view .LVU3905
2928:src/display.c **** 		{
 11967              		.loc 1 2928 8 view .LVU3906
2927:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11968              		.loc 1 2927 10 is_stmt 0 view .LVU3907
 11969 0c3c 029B     		ldr	r3, [sp, #8]
 11970 0c3e 03EB4303 		add	r3, r3, r3, lsl #1
2928:src/display.c **** 		{
 11971              		.loc 1 2928 15 view .LVU3908
 11972 0c42 A0EB4300 		sub	r0, r0, r3, lsl #1
 11973              	.LVL1375:
2928:src/display.c **** 		{
 11974              		.loc 1 2928 11 view .LVU3909
 11975 0c46 1328     		cmp	r0, #19
 11976 0c48 3FDD     		ble	.L1035
2930:src/display.c **** 		  set_status_right(buf);
 11977              		.loc 1 2930 5 is_stmt 1 view .LVU3910
2930:src/display.c **** 		  set_status_right(buf);
 11978              		.loc 1 2930 20 is_stmt 0 view .LVU3911
 11979 0c4a 28AB     		add	r3, sp, #160
 11980 0c4c 0344     		add	r3, r3, r0
 11981 0c4e 019A     		ldr	r2, [sp, #4]
 11982 0c50 03F8282C 		strb	r2, [r3, #-40]
2931:src/display.c **** 		}
 11983              		.loc 1 2931 5 is_stmt 1 view .LVU3912
 11984 0c54 1EA8     		add	r0, sp, #120
 11985 0c56 FFF7FEFF 		bl	set_status_right
 11986              	.LVL1376:
 11987 0c5a D1E7     		b	.L1036
 11988              	.LVL1377:
 11989              	.L1275:
2921:src/display.c **** 	  } else if (State2.alphas) {
 11990              		.loc 1 2921 6 view .LVU3913
2921:src/display.c **** 	  } else if (State2.alphas) {
 11991              		.loc 1 2921 48 is_stmt 0 view .LVU3914
ARM GAS  /tmp/ccwSk7O0.s 			page 342


 11992 0c5c 501E     		subs	r0, r2, #1
 11993 0c5e 0293     		str	r3, [sp, #8]
 11994 0c60 FFF7FEFF 		bl	get_reg_n
 11995              	.LVL1378:
 11996              	.LBB662:
 11997              	.LBI662:
3442:src/display.c **** 	int glen = *graphic++;
 11998              		.loc 1 3442 19 is_stmt 1 view .LVU3915
 11999              	.LBB663:
3443:src/display.c **** 	int i, j;
 12000              		.loc 1 3443 2 view .LVU3916
3451:src/display.c **** #endif
 12001              		.loc 1 3451 15 is_stmt 0 view .LVU3917
 12002 0c64 424D     		ldr	r5, .L1290+36
3443:src/display.c **** 	int i, j;
 12003              		.loc 1 3443 6 view .LVU3918
 12004 0c66 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 12005              	.LVL1379:
3444:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12006              		.loc 1 3444 2 is_stmt 1 view .LVU3919
3451:src/display.c **** #endif
 12007              		.loc 1 3451 2 view .LVU3920
3451:src/display.c **** #endif
 12008              		.loc 1 3451 15 is_stmt 0 view .LVU3921
 12009 0c68 0122     		movs	r2, #1
 12010 0c6a 2A70     		strb	r2, [r5]
3453:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 12011              		.loc 1 3453 2 is_stmt 1 view .LVU3922
3453:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 12012              		.loc 1 3453 5 is_stmt 0 view .LVU3923
 12013 0c6c 39B3     		cbz	r1, .L1028
3454:src/display.c **** 
 12014              		.loc 1 3454 2 is_stmt 1 view .LVU3924
 12015              	.LVL1380:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12016              		.loc 1 3456 2 view .LVU3925
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12017              		.loc 1 3456 12 view .LVU3926
 12018 0c6e 8318     		adds	r3, r0, r2
 12019 0c70 0393     		str	r3, [sp, #12]
 12020 0c72 4A29     		cmp	r1, #74
 12021 0c74 D4BF     		ite	le
 12022 0c76 5B18     		addle	r3, r3, r1
 12023 0c78 4A33     		addgt	r3, r3, #74
 12024 0c7a 0193     		str	r3, [sp, #4]
 12025 0c7c CDE90467 		strd	r6, r7, [sp, #16]
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12026              		.loc 1 3456 8 is_stmt 0 view .LVU3927
 12027 0c80 029B     		ldr	r3, [sp, #8]
 12028 0c82 0292     		str	r2, [sp, #8]
 12029 0c84 1D46     		mov	r5, r3
 12030              	.LVL1381:
 12031              	.L1029:
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12032              		.loc 1 3457 14 is_stmt 1 view .LVU3928
 12033 0c86 029B     		ldr	r3, [sp, #8]
 12034 0c88 039F     		ldr	r7, [sp, #12]
ARM GAS  /tmp/ccwSk7O0.s 			page 343


 12035 0c8a 03FA05FB 		lsl	fp, r3, r5
 12036 0c8e 05F19406 		add	r6, r5, #148
 12037 0c92 06E0     		b	.L1032
 12038              	.LVL1382:
 12039              	.L1282:
 12040              	.LBB664:
 12041              	.LBB665:
 348:src/display.c ****   else	clr_dot(n);
 12042              		.loc 1 348 11 is_stmt 0 view .LVU3929
 12043 0c94 FFF7FEFF 		bl	set_dot
 12044              	.LVL1383:
 12045              	.L1031:
 348:src/display.c ****   else	clr_dot(n);
 12046              		.loc 1 348 11 view .LVU3930
 12047              	.LBE665:
 12048              	.LBE664:
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12049              		.loc 1 3457 23 is_stmt 1 view .LVU3931
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12050              		.loc 1 3457 14 view .LVU3932
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12051              		.loc 1 3457 4 is_stmt 0 view .LVU3933
 12052 0c98 019B     		ldr	r3, [sp, #4]
 12053 0c9a BB42     		cmp	r3, r7
 12054 0c9c 06F10606 		add	r6, r6, #6
 12055 0ca0 08D0     		beq	.L1281
 12056              	.LVL1384:
 12057              	.L1032:
3462:src/display.c **** #endif
 12058              		.loc 1 3462 6 is_stmt 1 view .LVU3934
 12059              	.LBB668:
 12060              	.LBI664:
 347:src/display.c ****   if (on)	set_dot(n);
 12061              		.loc 1 347 6 view .LVU3935
 12062              	.LBB666:
 348:src/display.c ****   else	clr_dot(n);
 12063              		.loc 1 348 3 view .LVU3936
 348:src/display.c ****   else	clr_dot(n);
 12064              		.loc 1 348 11 view .LVU3937
 349:src/display.c **** }
 12065              		.loc 1 349 8 view .LVU3938
 12066              	.LBE666:
 12067              	.LBE668:
3462:src/display.c **** #endif
 12068              		.loc 1 3462 37 is_stmt 0 view .LVU3939
 12069 0ca2 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 12070              	.LVL1385:
 12071              	.LBB669:
 12072              	.LBB667:
 348:src/display.c ****   else	clr_dot(n);
 12073              		.loc 1 348 6 view .LVU3940
 12074 0ca6 13EA0B0F 		tst	r3, fp
 348:src/display.c ****   else	clr_dot(n);
 12075              		.loc 1 348 11 view .LVU3941
 12076 0caa 3046     		mov	r0, r6
 348:src/display.c ****   else	clr_dot(n);
 12077              		.loc 1 348 6 view .LVU3942
ARM GAS  /tmp/ccwSk7O0.s 			page 344


 12078 0cac F2D1     		bne	.L1282
 349:src/display.c **** }
 12079              		.loc 1 349 8 view .LVU3943
 12080 0cae FFF7FEFF 		bl	clr_dot
 12081              	.LVL1386:
 12082 0cb2 F1E7     		b	.L1031
 12083              	.LVL1387:
 12084              	.L1281:
 349:src/display.c **** }
 12085              		.loc 1 349 8 view .LVU3944
 12086              	.LBE667:
 12087              	.LBE669:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12088              		.loc 1 3456 17 is_stmt 1 view .LVU3945
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12089              		.loc 1 3456 18 is_stmt 0 view .LVU3946
 12090 0cb4 0135     		adds	r5, r5, #1
 12091              	.LVL1388:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12092              		.loc 1 3456 12 is_stmt 1 view .LVU3947
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12093              		.loc 1 3456 2 is_stmt 0 view .LVU3948
 12094 0cb6 062D     		cmp	r5, #6
 12095 0cb8 E5D1     		bne	.L1029
 12096 0cba DDE90467 		ldrd	r6, r7, [sp, #16]
 12097              	.LVL1389:
 12098              	.L1028:
3456:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12099              		.loc 1 3456 2 view .LVU3949
 12100              	.LBE663:
 12101              	.LBE662:
2971:src/display.c ****       nostk:
 12102              		.loc 1 2971 2 is_stmt 1 view .LVU3950
 12103 0cbe FFF7FEFF 		bl	show_stack
 12104              	.LVL1390:
2973:src/display.c **** 	if (!skip) {
 12105              		.loc 1 2973 2 view .LVU3951
 12106 0cc2 FFF7FEFF 		bl	show_flags
 12107              	.LVL1391:
2974:src/display.c **** 	  if (State2.runmode) {
 12108              		.loc 1 2974 2 view .LVU3952
 12109 0cc6 FFF7DEB9 		b	.L955
 12110              	.LVL1392:
 12111              	.L1035:
2934:src/display.c **** 	      }
 12112              		.loc 1 2934 3 view .LVU3953
 12113 0cca 1EA8     		add	r0, sp, #120
 12114 0ccc FFF7FEFF 		bl	set_status
 12115              	.LVL1393:
 12116 0cd0 96E7     		b	.L1036
 12117              	.LVL1394:
 12118              	.L1273:
 12119              	.LBB670:
 12120              	.LBB654:
 12121              	.LBB652:
2494:src/display.c **** 	    end = regK_idx;
 12122              		.loc 1 2494 6 view .LVU3954
ARM GAS  /tmp/ccwSk7O0.s 			page 345


2495:src/display.c **** 	    start = 3;
 12123              		.loc 1 2495 6 view .LVU3955
2496:src/display.c **** 	    group = 4;
 12124              		.loc 1 2496 6 view .LVU3956
2497:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 12125              		.loc 1 2497 6 view .LVU3957
2498:src/display.c **** 	  }
 12126              		.loc 1 2498 6 view .LVU3958
 12127 0cd2 2848     		ldr	r0, .L1290+40
 12128 0cd4 FFF7FEFF 		bl	set_status
 12129              	.LVL1395:
2496:src/display.c **** 	    group = 4;
 12130              		.loc 1 2496 12 is_stmt 0 view .LVU3959
 12131 0cd8 4FF0030B 		mov	fp, #3
2497:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 12132              		.loc 1 2497 12 view .LVU3960
 12133 0cdc 4FF0040A 		mov	r10, #4
 12134              	.LVL1396:
2495:src/display.c **** 	    start = 3;
 12135              		.loc 1 2495 10 view .LVU3961
 12136 0ce0 4FF06F08 		mov	r8, #111
2494:src/display.c **** 	    end = regK_idx;
 12137              		.loc 1 2494 11 view .LVU3962
 12138 0ce4 6427     		movs	r7, #100
 12139              	.LVL1397:
2494:src/display.c **** 	    end = regK_idx;
 12140              		.loc 1 2494 11 view .LVU3963
 12141 0ce6 2CE6     		b	.L1000
 12142              	.LVL1398:
 12143              	.L1227:
2494:src/display.c **** 	    end = regK_idx;
 12144              		.loc 1 2494 11 view .LVU3964
 12145 0ce8 059E     		ldr	r6, [sp, #20]
 12146              	.LVL1399:
2494:src/display.c **** 	    end = regK_idx;
 12147              		.loc 1 2494 11 view .LVU3965
 12148 0cea 1BE7     		b	.L995
 12149              	.LVL1400:
 12150              	.L1270:
2494:src/display.c **** 	    end = regK_idx;
 12151              		.loc 1 2494 11 view .LVU3966
 12152              	.LBE652:
2454:src/display.c **** 	  p = num_arg(buf, free_mem());
 12153              		.loc 1 2454 4 is_stmt 1 view .LVU3967
 12154 0cec 2248     		ldr	r0, .L1290+44
 12155 0cee FFF7FEFF 		bl	set_status
 12156              	.LVL1401:
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 12157              		.loc 1 2455 4 view .LVU3968
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 12158              		.loc 1 2455 21 is_stmt 0 view .LVU3969
 12159 0cf2 FFF7FEFF 		bl	free_mem
 12160              	.LVL1402:
 12161 0cf6 0146     		mov	r1, r0
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 12162              		.loc 1 2455 8 view .LVU3970
 12163 0cf8 15A8     		add	r0, sp, #84
ARM GAS  /tmp/ccwSk7O0.s 			page 346


 12164              	.LVL1403:
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 12165              		.loc 1 2455 8 view .LVU3971
 12166 0cfa FFF7FEFF 		bl	num_arg
 12167              	.LVL1404:
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 12168              		.loc 1 2456 4 is_stmt 1 view .LVU3972
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 12169              		.loc 1 2456 8 is_stmt 0 view .LVU3973
 12170 0cfe 1F49     		ldr	r1, .L1290+48
 12171 0d00 FFF7FEFF 		bl	scopy
 12172              	.LVL1405:
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 12173              		.loc 1 2456 8 view .LVU3974
 12174 0d04 0546     		mov	r5, r0
 12175              	.LVL1406:
2457:src/display.c **** 	  *p = '\0';
 12176              		.loc 1 2457 4 is_stmt 1 view .LVU3975
2457:src/display.c **** 	  *p = '\0';
 12177              		.loc 1 2457 19 is_stmt 0 view .LVU3976
 12178 0d06 FFF7FEFF 		bl	free_flash
 12179              	.LVL1407:
2457:src/display.c **** 	  *p = '\0';
 12180              		.loc 1 2457 19 view .LVU3977
 12181 0d0a 0146     		mov	r1, r0
2457:src/display.c **** 	  *p = '\0';
 12182              		.loc 1 2457 8 view .LVU3978
 12183 0d0c 2846     		mov	r0, r5
 12184 0d0e FFF7FEFF 		bl	num_arg
 12185              	.LVL1408:
 12186 0d12 0346     		mov	r3, r0
 12187              	.LVL1409:
2458:src/display.c **** 	  set_digits_string(buf, 0);
 12188              		.loc 1 2458 4 is_stmt 1 view .LVU3979
2458:src/display.c **** 	  set_digits_string(buf, 0);
 12189              		.loc 1 2458 7 is_stmt 0 view .LVU3980
 12190 0d14 0021     		movs	r1, #0
2459:src/display.c **** 	}
 12191              		.loc 1 2459 4 view .LVU3981
 12192 0d16 15A8     		add	r0, sp, #84
 12193              	.LVL1410:
2458:src/display.c **** 	  set_digits_string(buf, 0);
 12194              		.loc 1 2458 7 view .LVU3982
 12195 0d18 1970     		strb	r1, [r3]
2459:src/display.c **** 	}
 12196              		.loc 1 2459 4 is_stmt 1 view .LVU3983
 12197 0d1a FFF7FEFF 		bl	set_digits_string
 12198              	.LVL1411:
2459:src/display.c **** 	}
 12199              		.loc 1 2459 4 is_stmt 0 view .LVU3984
 12200 0d1e 01E7     		b	.L995
 12201              	.LVL1412:
 12202              	.L1269:
2459:src/display.c **** 	}
 12203              		.loc 1 2459 4 view .LVU3985
 12204              	.LBE654:
 12205              	.LBE670:
ARM GAS  /tmp/ccwSk7O0.s 			page 347


 12206              	.LBB671:
 12207              	.LBB616:
2562:src/display.c **** 	  if (lblpc != pc) {
 12208              		.loc 1 2562 4 is_stmt 1 view .LVU3986
2562:src/display.c **** 	  if (lblpc != pc) {
 12209              		.loc 1 2562 12 is_stmt 0 view .LVU3987
 12210 0d20 4046     		mov	r0, r8
 12211 0d22 3946     		mov	r1, r7
 12212 0d24 FFF7FEFF 		bl	findmultilbl
 12213              	.LVL1413:
2562:src/display.c **** 	  if (lblpc != pc) {
 12214              		.loc 1 2562 10 view .LVU3988
 12215 0d28 85B2     		uxth	r5, r0
 12216              	.LVL1414:
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12217              		.loc 1 2563 4 is_stmt 1 view .LVU3989
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12218              		.loc 1 2563 7 is_stmt 0 view .LVU3990
 12219 0d2a AB45     		cmp	fp, r5
2562:src/display.c **** 	  if (lblpc != pc) {
 12220              		.loc 1 2562 12 view .LVU3991
 12221 0d2c 8046     		mov	r8, r0
 12222              	.LVL1415:
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12223              		.loc 1 2563 7 view .LVU3992
 12224 0d2e 3FF4EBAD 		beq	.L1242
2564:src/display.c **** 	    n = nLIB(lblpc);
 12225              		.loc 1 2564 6 is_stmt 1 view .LVU3993
 12226 0d32 1348     		ldr	r0, .L1290+52
 12227 0d34 3F21     		movs	r1, #63
 12228 0d36 FFF7FEFF 		bl	set_digits_string
 12229              	.LVL1416:
2565:src/display.c **** 	    if (n == REGION_RAM)
 12230              		.loc 1 2565 6 view .LVU3994
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12231              		.loc 1 2566 6 view .LVU3995
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12232              		.loc 1 2566 9 is_stmt 0 view .LVU3996
 12233 0d3a AD0B     		lsrs	r5, r5, #14
 12234              	.LVL1417:
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12235              		.loc 1 2566 9 view .LVU3997
 12236 0d3c 5DD1     		bne	.L1013
2567:src/display.c **** 	    else {
 12237              		.loc 1 2567 8 is_stmt 1 view .LVU3998
 12238 0d3e 2A46     		mov	r2, r5
 12239 0d40 1FFA88F0 		uxth	r0, r8
 12240 0d44 0121     		movs	r1, #1
 12241 0d46 FFF7FEFF 		bl	set_exp
 12242              	.LVL1418:
 12243 0d4a DDE5     		b	.L1242
 12244              	.L1291:
 12245              		.align	2
 12246              	.L1290:
 12247 0d4c 00000000 		.word	DispPlot
 12248 0d50 78000000 		.word	.LC38
 12249 0d54 5C000000 		.word	.LC35
ARM GAS  /tmp/ccwSk7O0.s 			page 348


 12250 0d58 00000000 		.word	SizeStatRegs
 12251 0d5c 00000000 		.word	main_ram
 12252 0d60 6C000000 		.word	.LC37
 12253 0d64 64000000 		.word	.LC36
 12254 0d68 00000000 		.word	DispMsg
 12255 0d6c A8000000 		.word	.LC43
 12256 0d70 00000000 		.word	forceDispPlot
 12257 0d74 7C000000 		.word	.LC39
 12258 0d78 4C000000 		.word	.LC33
 12259 0d7c 54000000 		.word	.LC34
 12260 0d80 98000000 		.word	.LC41
 12261              	.LVL1419:
 12262              	.L1264:
2567:src/display.c **** 	    else {
 12263              		.loc 1 2567 8 is_stmt 0 view .LVU3999
 12264              	.LBE616:
 12265              	.LBE671:
2908:src/display.c **** 	  skip = 1;
 12266              		.loc 1 2908 4 is_stmt 1 view .LVU4000
 12267              	.LBB672:
 12268              	.LBI672:
2579:src/display.c **** 	char buf[16], *bp;
 12269              		.loc 1 2579 19 view .LVU4001
 12270              	.LBB673:
2580:src/display.c **** 	int n = State2.digval;
 12271              		.loc 1 2580 2 view .LVU4002
2581:src/display.c **** 	
 12272              		.loc 1 2581 2 view .LVU4003
2581:src/display.c **** 	
 12273              		.loc 1 2581 6 is_stmt 0 view .LVU4004
 12274 0d84 B4F808A0 		ldrh	r10, [r4, #8]
 12275              	.LVL1420:
2588:src/display.c **** 	  n;
 12276              		.loc 1 2588 2 is_stmt 1 view .LVU4005
2588:src/display.c **** 	  n;
 12277              		.loc 1 2588 54 is_stmt 0 view .LVU4006
 12278 0d88 CA07     		lsls	r2, r1, #31
 12279 0d8a 4CBF     		ite	mi
 12280 0d8c 0AF17008 		addmi	r8, r10, #112
2581:src/display.c **** 	
 12281              		.loc 1 2581 6 view .LVU4007
 12282 0d90 D046     		movpl	r8, r10
 12283              	.LVL1421:
2592:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12284              		.loc 1 2592 2 is_stmt 1 view .LVU4008
2592:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12285              		.loc 1 2592 5 is_stmt 0 view .LVU4009
 12286 0d92 11F00401 		ands	r1, r1, #4
 12287 0d96 6CD0     		beq	.L1016
2593:src/display.c **** 	}
 12288              		.loc 1 2593 4 is_stmt 1 view .LVU4010
2593:src/display.c **** 	}
 12289              		.loc 1 2593 15 is_stmt 0 view .LVU4011
 12290 0d98 15A9     		add	r1, sp, #84
 12291 0d9a 4046     		mov	r0, r8
 12292 0d9c FFF7FEFF 		bl	alpha_rcl_s
 12293              	.LVL1422:
ARM GAS  /tmp/ccwSk7O0.s 			page 349


2593:src/display.c **** 	}
 12294              		.loc 1 2593 4 view .LVU4012
 12295 0da0 FFF7FEFF 		bl	set_status
 12296              	.LVL1423:
 12297              	.L1017:
2615:src/display.c ****       }
 12298              		.loc 1 2615 2 is_stmt 1 view .LVU4013
 12299 0da4 4046     		mov	r0, r8
 12300 0da6 0021     		movs	r1, #0
 12301 0da8 FFF7FEFF 		bl	format_reg
 12302              	.LVL1424:
2615:src/display.c ****       }
 12303              		.loc 1 2615 2 is_stmt 0 view .LVU4014
 12304              	.LBE673:
 12305              	.LBE672:
2909:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 12306              		.loc 1 2909 4 is_stmt 1 view .LVU4015
2910:src/display.c **** 	    annunciators();
 12307              		.loc 1 2910 4 view .LVU4016
2910:src/display.c **** 	    annunciators();
 12308              		.loc 1 2910 7 is_stmt 0 view .LVU4017
 12309 0dac 002D     		cmp	r5, #0
 12310 0dae 5DD1     		bne	.L1023
2910:src/display.c **** 	    annunciators();
 12311              		.loc 1 2910 25 discriminator 1 view .LVU4018
 12312 0db0 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 12313 0db2 012B     		cmp	r3, #1
 12314 0db4 54D0     		beq	.L1283
 12315              	.L1024:
2971:src/display.c ****       nostk:
 12316              		.loc 1 2971 2 is_stmt 1 view .LVU4019
 12317 0db6 FFF7FEFF 		bl	show_stack
 12318              	.LVL1425:
2973:src/display.c **** 	if (!skip) {
 12319              		.loc 1 2973 2 view .LVU4020
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 12320              		.loc 1 2681 6 is_stmt 0 view .LVU4021
 12321 0dba 0026     		movs	r6, #0
2973:src/display.c **** 	if (!skip) {
 12322              		.loc 1 2973 2 view .LVU4022
 12323 0dbc FFF7FEFF 		bl	show_flags
 12324              	.LVL1426:
2974:src/display.c **** 	  if (State2.runmode) {
 12325              		.loc 1 2974 2 is_stmt 1 view .LVU4023
 12326 0dc0 4DE5     		b	.L988
 12327              	.LVL1427:
 12328              	.L1268:
 12329              	.LBB676:
 12330              	.LBB604:
2870:src/display.c **** 	      copyreg(&z, x);
 12331              		.loc 1 2870 8 view .LVU4024
2870:src/display.c **** 	      copyreg(&z, x);
 12332              		.loc 1 2870 27 is_stmt 0 view .LVU4025
 12333 0dc2 464B     		ldr	r3, .L1292
 12334 0dc4 1E68     		ldr	r6, [r3]
 12335              	.LVL1428:
2871:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
ARM GAS  /tmp/ccwSk7O0.s 			page 350


 12336              		.loc 1 2871 8 is_stmt 1 view .LVU4026
 12337 0dc6 15A8     		add	r0, sp, #84
 12338 0dc8 3146     		mov	r1, r6
 12339 0dca FFF7FEFF 		bl	copyreg
 12340              	.LVL1429:
2872:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12341              		.loc 1 2872 8 view .LVU4027
 12342 0dce E8B2     		uxtb	r0, r5
 12343 0dd0 FFF7FEFF 		bl	sigma_val
 12344              	.LVL1430:
2873:src/display.c **** 	      copyreg(x, &z);
 12345              		.loc 1 2873 8 view .LVU4028
 12346 0dd4 FFF7FEFF 		bl	is_dblmode
 12347              	.LVL1431:
 12348 0dd8 0021     		movs	r1, #0
 12349 0dda 0246     		mov	r2, r0
 12350 0ddc 3046     		mov	r0, r6
 12351 0dde FFF7FEFF 		bl	set_x
 12352              	.LVL1432:
2874:src/display.c **** 	      skip = 1;
 12353              		.loc 1 2874 8 view .LVU4029
 12354 0de2 15A9     		add	r1, sp, #84
 12355 0de4 3046     		mov	r0, r6
 12356 0de6 FFF7FEFF 		bl	copyreg
 12357              	.LVL1433:
2875:src/display.c **** 	    }
 12358              		.loc 1 2875 8 view .LVU4030
2875:src/display.c **** 	    }
 12359              		.loc 1 2875 13 is_stmt 0 view .LVU4031
 12360 0dea 0125     		movs	r5, #1
 12361              	.LVL1434:
2875:src/display.c **** 	    }
 12362              		.loc 1 2875 13 view .LVU4032
 12363 0dec 23E5     		b	.L980
 12364              	.LVL1435:
 12365              	.L978:
2875:src/display.c **** 	    }
 12366              		.loc 1 2875 13 view .LVU4033
 12367              	.LBE604:
2844:src/display.c **** 	    else
 12368              		.loc 1 2844 8 is_stmt 1 view .LVU4034
 12369 0dee 3C48     		ldr	r0, .L1292+4
 12370 0df0 0021     		movs	r1, #0
 12371 0df2 FFF7FEFF 		bl	set_digits_string
 12372              	.LVL1436:
2847:src/display.c **** 	  } else if (State2.runmode) {
 12373              		.loc 1 2847 11 is_stmt 0 view .LVU4035
 12374 0df6 0125     		movs	r5, #1
 12375              	.LVL1437:
2844:src/display.c **** 	    else
 12376              		.loc 1 2844 8 view .LVU4036
 12377 0df8 1DE5     		b	.L980
 12378              	.LVL1438:
 12379              	.L1013:
2844:src/display.c **** 	    else
 12380              		.loc 1 2844 8 view .LVU4037
 12381              	.LBE676:
ARM GAS  /tmp/ccwSk7O0.s 			page 351


 12382              	.LBB677:
 12383              	.LBB617:
2569:src/display.c **** #ifndef REALBUILD
 12384              		.loc 1 2569 8 is_stmt 1 view .LVU4038
2569:src/display.c **** #ifndef REALBUILD
 12385              		.loc 1 2569 37 is_stmt 0 view .LVU4039
 12386 0dfa 05EB8500 		add	r0, r5, r5, lsl #2
2569:src/display.c **** #ifndef REALBUILD
 12387              		.loc 1 2569 8 view .LVU4040
 12388 0dfe 3946     		mov	r1, r7
 12389 0e00 5044     		add	r0, r0, r10
 12390 0e02 FFF7FEFF 		bl	set_exp_digits_string
 12391              	.LVL1439:
2571:src/display.c **** #endif
 12392              		.loc 1 2571 8 is_stmt 1 view .LVU4041
 12393 0e06 374B     		ldr	r3, .L1292+8
 12394 0e08 3748     		ldr	r0, .L1292+12
2571:src/display.c **** #endif
 12395              		.loc 1 2571 47 is_stmt 0 view .LVU4042
 12396 0e0a 0A21     		movs	r1, #10
2571:src/display.c **** #endif
 12397              		.loc 1 2571 8 view .LVU4043
 12398 0e0c 01FB0531 		mla	r1, r1, r5, r3
 12399 0e10 FFF7FEFF 		bl	scopy
 12400              	.LVL1440:
2571:src/display.c **** #endif
 12401              		.loc 1 2571 8 view .LVU4044
 12402              	.LBE617:
 12403              	.LBE677:
2971:src/display.c ****       nostk:
 12404              		.loc 1 2971 2 is_stmt 1 view .LVU4045
 12405 0e14 78E5     		b	.L1242
 12406              	.LVL1441:
 12407              	.L1267:
 12408              	.LBB678:
 12409              	.LBB605:
2850:src/display.c **** 	      decimal64 z;
 12410              		.loc 1 2850 8 view .LVU4046
2851:src/display.c **** 
 12411              		.loc 1 2851 8 view .LVU4047
2853:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12412              		.loc 1 2853 8 view .LVU4048
 12413 0e16 0CA8     		add	r0, sp, #48
 12414 0e18 FFF7FEFF 		bl	getX
 12415              	.LVL1442:
2854:src/display.c **** 		const unsigned int f = argKIND(op);
 12416              		.loc 1 2854 8 view .LVU4049
2854:src/display.c **** 		const unsigned int f = argKIND(op);
 12417              		.loc 1 2854 11 is_stmt 0 view .LVU4050
 12418 0e1c C5F30723 		ubfx	r3, r5, #8, #8
 12419 0e20 022B     		cmp	r3, #2
 12420 0e22 44D1     		bne	.L982
 12421              	.LBB606:
2855:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12422              		.loc 1 2855 3 is_stmt 1 view .LVU4051
2855:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12423              		.loc 1 2855 22 is_stmt 0 view .LVU4052
ARM GAS  /tmp/ccwSk7O0.s 			page 352


 12424 0e24 EDB2     		uxtb	r5, r5
 12425              	.LVL1443:
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12426              		.loc 1 2856 3 is_stmt 1 view .LVU4053
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12427              		.loc 1 2856 6 is_stmt 0 view .LVU4054
 12428 0e26 9B2D     		cmp	r5, #155
 12429              	.LBB607:
2859:src/display.c **** 		}
 12430              		.loc 1 2859 5 view .LVU4055
 12431 0e28 15AF     		add	r7, sp, #84
 12432              	.LBE607:
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12433              		.loc 1 2856 6 view .LVU4056
 12434 0e2a 3CD8     		bhi	.L983
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12435              		.loc 1 2856 28 discriminator 1 view .LVU4057
 12436 0e2c 1823     		movs	r3, #24
 12437 0e2e 2F4A     		ldr	r2, .L1292+16
 12438 0e30 03FB05F3 		mul	r3, r3, r5
 12439 0e34 D358     		ldr	r3, [r2, r3]
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12440              		.loc 1 2856 23 discriminator 1 view .LVU4058
 12441 0e36 002B     		cmp	r3, #0
 12442 0e38 35D0     		beq	.L983
 12443              	.LBB608:
2857:src/display.c **** 		  update_speed(0);
 12444              		.loc 1 2857 5 is_stmt 1 view .LVU4059
 12445              	.LVL1444:
2858:src/display.c **** 		  fp(&r, &x);
 12446              		.loc 1 2858 20 view .LVU4060
2859:src/display.c **** 		}
 12447              		.loc 1 2859 5 view .LVU4061
 12448 0e3a 0CA9     		add	r1, sp, #48
 12449 0e3c 3846     		mov	r0, r7
 12450 0e3e 9847     		blx	r3
 12451              	.LVL1445:
 12452              	.L984:
2859:src/display.c **** 		}
 12453              		.loc 1 2859 5 is_stmt 0 view .LVU4062
 12454              	.LBE608:
 12455              	.LBE606:
2865:src/display.c **** 	      packed_from_number(&z, &r);
 12456              		.loc 1 2865 8 is_stmt 1 discriminator 1 view .LVU4063
 12457 0e40 2B4A     		ldr	r2, .L1292+20
 12458 0e42 3946     		mov	r1, r7
 12459 0e44 3846     		mov	r0, r7
 12460 0e46 FFF7FEFF 		bl	decNumberNormalize
 12461              	.LVL1446:
2866:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12462              		.loc 1 2866 8 discriminator 1 view .LVU4064
 12463 0e4a 3946     		mov	r1, r7
 12464 0e4c 06A8     		add	r0, sp, #24
 12465 0e4e FFF7FEFF 		bl	packed_from_number
 12466              	.LVL1447:
2867:src/display.c **** 	      skip = 1;
 12467              		.loc 1 2867 8 discriminator 1 view .LVU4065
ARM GAS  /tmp/ccwSk7O0.s 			page 353


 12468 0e52 0022     		movs	r2, #0
 12469 0e54 06A8     		add	r0, sp, #24
 12470 0e56 1146     		mov	r1, r2
 12471 0e58 FFF7FEFF 		bl	set_x
 12472              	.LVL1448:
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12473              		.loc 1 2868 8 discriminator 1 view .LVU4066
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12474              		.loc 1 2868 13 is_stmt 0 discriminator 1 view .LVU4067
 12475 0e5c 0125     		movs	r5, #1
 12476              	.LBE605:
 12477 0e5e EAE4     		b	.L980
 12478              	.LVL1449:
 12479              	.L1283:
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12480              		.loc 1 2868 13 discriminator 1 view .LVU4068
 12481              	.LBE678:
2910:src/display.c **** 	    annunciators();
 12482              		.loc 1 2910 56 discriminator 2 view .LVU4069
 12483 0e60 244B     		ldr	r3, .L1292+24
 12484 0e62 1B68     		ldr	r3, [r3]
 12485 0e64 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12486 0e68 DD07     		lsls	r5, r3, #31
 12487 0e6a A4D5     		bpl	.L1024
 12488              	.L1023:
2911:src/display.c **** 	  }
 12489              		.loc 1 2911 6 is_stmt 1 view .LVU4070
 12490 0e6c FFF7FEFF 		bl	annunciators
 12491              	.LVL1450:
 12492 0e70 4AE5     		b	.L1242
 12493              	.LVL1451:
 12494              	.L1016:
 12495              	.LBB679:
 12496              	.LBB674:
2596:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12497              		.loc 1 2596 4 view .LVU4071
 12498 0e72 15AF     		add	r7, sp, #84
 12499 0e74 1022     		movs	r2, #16
 12500 0e76 3846     		mov	r0, r7
 12501 0e78 FFF7FEFF 		bl	xset
 12502              	.LVL1452:
2600:src/display.c **** #endif
 12503              		.loc 1 2600 4 view .LVU4072
2600:src/display.c **** #endif
 12504              		.loc 1 2600 9 is_stmt 0 view .LVU4073
 12505 0e7c 1E49     		ldr	r1, .L1292+28
 12506 0e7e 3846     		mov	r0, r7
 12507 0e80 FFF7FEFF 		bl	scopy_spc
 12508              	.LVL1453:
2602:src/display.c **** 	    *bp++ = '.';
 12509              		.loc 1 2602 8 view .LVU4074
 12510 0e84 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12511              	.LVL1454:
2602:src/display.c **** 	    *bp++ = '.';
 12512              		.loc 1 2602 4 is_stmt 1 view .LVU4075
2602:src/display.c **** 	    *bp++ = '.';
 12513              		.loc 1 2602 7 is_stmt 0 view .LVU4076
ARM GAS  /tmp/ccwSk7O0.s 			page 354


 12514 0e86 DB07     		lsls	r3, r3, #31
 12515 0e88 1ED5     		bpl	.L1018
2603:src/display.c **** 	    if (n >= 100) {
 12516              		.loc 1 2603 6 is_stmt 1 view .LVU4077
 12517              	.LVL1455:
2603:src/display.c **** 	    if (n >= 100) {
 12518              		.loc 1 2603 12 is_stmt 0 view .LVU4078
 12519 0e8a 2E23     		movs	r3, #46
2604:src/display.c **** 	      *bp++ = '1';
 12520              		.loc 1 2604 9 view .LVU4079
 12521 0e8c BAF1630F 		cmp	r10, #99
2603:src/display.c **** 	    if (n >= 100) {
 12522              		.loc 1 2603 12 view .LVU4080
 12523 0e90 0370     		strb	r3, [r0]
2604:src/display.c **** 	      *bp++ = '1';
 12524              		.loc 1 2604 6 is_stmt 1 view .LVU4081
2604:src/display.c **** 	      *bp++ = '1';
 12525              		.loc 1 2604 9 is_stmt 0 view .LVU4082
 12526 0e92 14DC     		bgt	.L1019
2603:src/display.c **** 	    if (n >= 100) {
 12527              		.loc 1 2603 9 view .LVU4083
 12528 0e94 0130     		adds	r0, r0, #1
 12529              	.LVL1456:
 12530              	.L1020:
2610:src/display.c **** 	  else
 12531              		.loc 1 2610 6 is_stmt 1 view .LVU4084
2610:src/display.c **** 	  else
 12532              		.loc 1 2610 11 is_stmt 0 view .LVU4085
 12533 0e96 5146     		mov	r1, r10
 12534 0e98 0222     		movs	r2, #2
 12535 0e9a FFF7FEFF 		bl	num_arg_0
 12536              	.LVL1457:
 12537              	.L1022:
2613:src/display.c **** 	}
 12538              		.loc 1 2613 4 is_stmt 1 view .LVU4086
 12539 0e9e 3846     		mov	r0, r7
 12540 0ea0 FFF7FEFF 		bl	set_status
 12541              	.LVL1458:
 12542 0ea4 7EE7     		b	.L1017
 12543              	.LVL1459:
 12544              	.L983:
2613:src/display.c **** 	}
 12545              		.loc 1 2613 4 is_stmt 0 view .LVU4087
 12546              	.LBE674:
 12547              	.LBE679:
 12548              	.LBB680:
 12549              	.LBB610:
 12550              	.LBB609:
2862:src/display.c **** 	      } else
 12551              		.loc 1 2862 5 is_stmt 1 view .LVU4088
 12552 0ea6 3846     		mov	r0, r7
 12553 0ea8 FFF7FEFF 		bl	set_NaN
 12554              	.LVL1460:
 12555 0eac C8E7     		b	.L984
 12556              	.LVL1461:
 12557              	.L982:
2862:src/display.c **** 	      } else
ARM GAS  /tmp/ccwSk7O0.s 			page 355


 12558              		.loc 1 2862 5 is_stmt 0 view .LVU4089
 12559              	.LBE609:
2864:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12560              		.loc 1 2864 3 is_stmt 1 view .LVU4090
 12561 0eae 15AF     		add	r7, sp, #84
 12562 0eb0 0CAA     		add	r2, sp, #48
 12563 0eb2 05F07F01 		and	r1, r5, #127
 12564 0eb6 3846     		mov	r0, r7
 12565 0eb8 FFF7FEFF 		bl	do_conv
 12566              	.LVL1462:
 12567 0ebc C0E7     		b	.L984
 12568              	.LVL1463:
 12569              	.L1019:
2864:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12570              		.loc 1 2864 3 is_stmt 0 view .LVU4091
 12571              	.LBE610:
 12572              	.LBE680:
 12573              	.LBB681:
 12574              	.LBB675:
2605:src/display.c **** 	      n -= 100;
 12575              		.loc 1 2605 8 is_stmt 1 view .LVU4092
2605:src/display.c **** 	      n -= 100;
 12576              		.loc 1 2605 14 is_stmt 0 view .LVU4093
 12577 0ebe 3123     		movs	r3, #49
 12578 0ec0 4370     		strb	r3, [r0, #1]
2606:src/display.c **** 	    }
 12579              		.loc 1 2606 8 is_stmt 1 view .LVU4094
2606:src/display.c **** 	    }
 12580              		.loc 1 2606 10 is_stmt 0 view .LVU4095
 12581 0ec2 AAF1640A 		sub	r10, r10, #100
 12582              	.LVL1464:
2605:src/display.c **** 	      n -= 100;
 12583              		.loc 1 2605 11 view .LVU4096
 12584 0ec6 0230     		adds	r0, r0, #2
 12585              	.LVL1465:
 12586              	.L1018:
2609:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12587              		.loc 1 2609 4 is_stmt 1 view .LVU4097
2609:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12588              		.loc 1 2609 7 is_stmt 0 view .LVU4098
 12589 0ec8 BAF1630F 		cmp	r10, #99
 12590 0ecc E3DD     		ble	.L1020
2612:src/display.c **** 	  set_status(buf);
 12591              		.loc 1 2612 6 is_stmt 1 view .LVU4099
 12592              	.LVL1466:
2612:src/display.c **** 	  set_status(buf);
 12593              		.loc 1 2612 22 is_stmt 0 view .LVU4100
 12594 0ece 0B4B     		ldr	r3, .L1292+32
 12595 0ed0 5344     		add	r3, r3, r10
2612:src/display.c **** 	  set_status(buf);
 12596              		.loc 1 2612 12 view .LVU4101
 12597 0ed2 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12598 0ed6 0370     		strb	r3, [r0]
 12599 0ed8 E1E7     		b	.L1022
 12600              	.L1293:
 12601 0eda 00BF     		.align	2
 12602              	.L1292:
ARM GAS  /tmp/ccwSk7O0.s 			page 356


 12603 0edc 00000000 		.word	StackBase
 12604 0ee0 40000000 		.word	.LC32
 12605 0ee4 00000000 		.word	.LANCHOR23
 12606 0ee8 00000000 		.word	LastDisplayedNumber
 12607 0eec 00000000 		.word	monfuncs
 12608 0ef0 00000000 		.word	Ctx
 12609 0ef4 00000000 		.word	main_ram
 12610 0ef8 A0000000 		.word	.LC42
 12611 0efc BC000000 		.word	.LC30
 12612              	.LBE675:
 12613              	.LBE681:
 12614              		.cfi_endproc
 12615              	.LFE34:
 12617              		.section	.text.frozen_display,"ax",%progbits
 12618              		.align	1
 12619              		.p2align 2,,3
 12620              		.global	frozen_display
 12621              		.syntax unified
 12622              		.thumb
 12623              		.thumb_func
 12624              		.fpu fpv4-sp-d16
 12626              	frozen_display:
 12627              	.LFB35:
3436:src/display.c **** 	State2.disp_freeze = 0;
 12628              		.loc 1 3436 7 is_stmt 1 view -0
 12629              		.cfi_startproc
 12630              		@ args = 0, pretend = 0, frame = 0
 12631              		@ frame_needed = 0, uses_anonymous_args = 0
3437:src/display.c **** 	display();
 12632              		.loc 1 3437 2 view .LVU4103
3436:src/display.c **** 	State2.disp_freeze = 0;
 12633              		.loc 1 3436 7 is_stmt 0 view .LVU4104
 12634 0000 10B5     		push	{r4, lr}
 12635              		.cfi_def_cfa_offset 8
 12636              		.cfi_offset 4, -8
 12637              		.cfi_offset 14, -4
3437:src/display.c **** 	display();
 12638              		.loc 1 3437 21 view .LVU4105
 12639 0002 064C     		ldr	r4, .L1296
 12640 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12641 0006 6FF30413 		bfc	r3, #4, #1
 12642 000a E375     		strb	r3, [r4, #23]
3438:src/display.c **** 	State2.disp_freeze = 1;
 12643              		.loc 1 3438 2 is_stmt 1 view .LVU4106
 12644 000c FFF7FEFF 		bl	display
 12645              	.LVL1467:
3439:src/display.c ****       }
 12646              		.loc 1 3439 2 view .LVU4107
3439:src/display.c ****       }
 12647              		.loc 1 3439 21 is_stmt 0 view .LVU4108
 12648 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12649 0012 43F01003 		orr	r3, r3, #16
 12650 0016 E375     		strb	r3, [r4, #23]
3440:src/display.c **** 
 12651              		.loc 1 3440 7 view .LVU4109
 12652 0018 10BD     		pop	{r4, pc}
 12653              	.L1297:
ARM GAS  /tmp/ccwSk7O0.s 			page 357


 12654 001a 00BF     		.align	2
 12655              	.L1296:
 12656 001c 00000000 		.word	StateWhileOn
 12657              		.cfi_endproc
 12658              	.LFE35:
 12660              		.section	.text.message,"ax",%progbits
 12661              		.align	1
 12662              		.p2align 2,,3
 12663              		.global	message
 12664              		.syntax unified
 12665              		.thumb
 12666              		.thumb_func
 12667              		.fpu fpv4-sp-d16
 12669              	message:
 12670              	.LVL1468:
 12671              	.LFB46:
3657:src/display.c **** 	State2.disp_freeze = 0;
 12672              		.loc 1 3657 7 is_stmt 1 view -0
 12673              		.cfi_startproc
 12674              		@ args = 0, pretend = 0, frame = 0
 12675              		@ frame_needed = 0, uses_anonymous_args = 0
3658:src/display.c **** 	State2.disp_small = 0;
 12676              		.loc 1 3658 2 view .LVU4111
3659:src/display.c **** 	WasDataEntry = 0;
 12677              		.loc 1 3659 2 view .LVU4112
3659:src/display.c **** 	WasDataEntry = 0;
 12678              		.loc 1 3659 20 is_stmt 0 view .LVU4113
 12679 0000 174A     		ldr	r2, .L1308
3657:src/display.c **** 	State2.disp_freeze = 0;
 12680              		.loc 1 3657 7 view .LVU4114
 12681 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12682              		.cfi_def_cfa_offset 24
 12683              		.cfi_offset 3, -24
 12684              		.cfi_offset 4, -20
 12685              		.cfi_offset 5, -16
 12686              		.cfi_offset 6, -12
 12687              		.cfi_offset 7, -8
 12688              		.cfi_offset 14, -4
3659:src/display.c **** 	WasDataEntry = 0;
 12689              		.loc 1 3659 20 view .LVU4115
 12690 0004 D38A     		ldrh	r3, [r2, #22]
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12691              		.loc 1 3660 15 view .LVU4116
 12692 0006 174E     		ldr	r6, .L1308+4
3659:src/display.c **** 	WasDataEntry = 0;
 12693              		.loc 1 3659 20 view .LVU4117
 12694 0008 23F48453 		bic	r3, r3, #4224
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12695              		.loc 1 3660 15 view .LVU4118
 12696 000c 0027     		movs	r7, #0
3659:src/display.c **** 	WasDataEntry = 0;
 12697              		.loc 1 3659 20 view .LVU4119
 12698 000e D382     		strh	r3, [r2, #22]	@ movhi
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12699              		.loc 1 3660 2 is_stmt 1 view .LVU4120
3661:src/display.c **** 	  // Complete redraw necessary
 12700              		.loc 1 3661 5 is_stmt 0 view .LVU4121
ARM GAS  /tmp/ccwSk7O0.s 			page 358


 12701 0010 9B05     		lsls	r3, r3, #22
3657:src/display.c **** 	State2.disp_freeze = 0;
 12702              		.loc 1 3657 7 view .LVU4122
 12703 0012 0546     		mov	r5, r0
 12704 0014 0C46     		mov	r4, r1
3660:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12705              		.loc 1 3660 15 view .LVU4123
 12706 0016 3760     		str	r7, [r6]
3661:src/display.c **** 	  // Complete redraw necessary
 12707              		.loc 1 3661 2 is_stmt 1 view .LVU4124
3661:src/display.c **** 	  // Complete redraw necessary
 12708              		.loc 1 3661 5 is_stmt 0 view .LVU4125
 12709 0018 12D5     		bpl	.L1299
3661:src/display.c **** 	  // Complete redraw necessary
 12710              		.loc 1 3661 27 discriminator 1 view .LVU4126
 12711 001a D1B1     		cbz	r1, .L1307
 12712              	.L1300:
3668:src/display.c **** 	    ShowRPN = 0;
 12713              		.loc 1 3668 6 is_stmt 1 view .LVU4127
 12714 001c FFF7FEFF 		bl	reset_disp
 12715              	.LVL1469:
3669:src/display.c **** 	    set_annunciators();
 12716              		.loc 1 3669 6 view .LVU4128
3669:src/display.c **** 	    set_annunciators();
 12717              		.loc 1 3669 14 is_stmt 0 view .LVU4129
 12718 0020 114B     		ldr	r3, .L1308+8
 12719 0022 0026     		movs	r6, #0
 12720 0024 1E60     		str	r6, [r3]
3670:src/display.c **** 	    set_digits_string( str2, 0 );
 12721              		.loc 1 3670 6 is_stmt 1 view .LVU4130
 12722 0026 FFF7FEFF 		bl	set_annunciators
 12723              	.LVL1470:
3671:src/display.c **** 	  }
 12724              		.loc 1 3671 6 view .LVU4131
 12725 002a 3146     		mov	r1, r6
 12726 002c 2046     		mov	r0, r4
 12727 002e FFF7FEFF 		bl	set_digits_string
 12728              	.LVL1471:
3673:src/display.c **** 	  finish_display();// message
 12729              		.loc 1 3673 4 view .LVU4132
 12730 0032 2846     		mov	r0, r5
 12731 0034 FFF7FEFF 		bl	set_status
 12732              	.LVL1472:
3674:src/display.c **** 	}
 12733              		.loc 1 3674 4 view .LVU4133
3676:src/display.c **** 
 12734              		.loc 1 3676 7 is_stmt 0 view .LVU4134
 12735 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12736              		.cfi_remember_state
 12737              		.cfi_restore 14
 12738              		.cfi_restore 7
 12739              		.cfi_restore 6
 12740              		.cfi_restore 5
 12741              		.cfi_restore 4
 12742              		.cfi_restore 3
 12743              		.cfi_def_cfa_offset 0
 12744              	.LVL1473:
ARM GAS  /tmp/ccwSk7O0.s 			page 359


3674:src/display.c **** 	}
 12745              		.loc 1 3674 4 view .LVU4135
 12746 003c FFF7FEBF 		b	finish_display
 12747              	.LVL1474:
 12748              	.L1299:
 12749              		.cfi_restore_state
3667:src/display.c **** 	    reset_disp();
 12750              		.loc 1 3667 4 is_stmt 1 view .LVU4136
3667:src/display.c **** 	    reset_disp();
 12751              		.loc 1 3667 7 is_stmt 0 view .LVU4137
 12752 0040 0029     		cmp	r1, #0
 12753 0042 EBD1     		bne	.L1300
3673:src/display.c **** 	  finish_display();// message
 12754              		.loc 1 3673 4 is_stmt 1 view .LVU4138
 12755 0044 2846     		mov	r0, r5
 12756              	.LVL1475:
3673:src/display.c **** 	  finish_display();// message
 12757              		.loc 1 3673 4 is_stmt 0 view .LVU4139
 12758 0046 FFF7FEFF 		bl	set_status
 12759              	.LVL1476:
3674:src/display.c **** 	}
 12760              		.loc 1 3674 4 is_stmt 1 view .LVU4140
3676:src/display.c **** 
 12761              		.loc 1 3676 7 is_stmt 0 view .LVU4141
 12762 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12763              		.cfi_remember_state
 12764              		.cfi_restore 14
 12765              		.cfi_restore 7
 12766              		.cfi_restore 6
 12767              		.cfi_restore 5
 12768              		.cfi_restore 4
 12769              		.cfi_restore 3
 12770              		.cfi_def_cfa_offset 0
 12771              	.LVL1477:
3674:src/display.c **** 	}
 12772              		.loc 1 3674 4 view .LVU4142
 12773 004e FFF7FEBF 		b	finish_display
 12774              	.LVL1478:
 12775              	.L1307:
 12776              		.cfi_restore_state
3663:src/display.c **** 	  display();
 12777              		.loc 1 3663 4 is_stmt 1 view .LVU4143
3663:src/display.c **** 	  display();
 12778              		.loc 1 3663 12 is_stmt 0 view .LVU4144
 12779 0052 064B     		ldr	r3, .L1308+12
 12780 0054 1860     		str	r0, [r3]
3664:src/display.c **** 	}
 12781              		.loc 1 3664 4 is_stmt 1 view .LVU4145
3676:src/display.c **** 
 12782              		.loc 1 3676 7 is_stmt 0 view .LVU4146
 12783 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12784              		.cfi_restore 14
 12785              		.cfi_restore 7
 12786              		.cfi_restore 6
 12787              		.cfi_restore 5
 12788              		.cfi_restore 4
 12789              		.cfi_restore 3
ARM GAS  /tmp/ccwSk7O0.s 			page 360


 12790              		.cfi_def_cfa_offset 0
3664:src/display.c **** 	}
 12791              		.loc 1 3664 4 view .LVU4147
 12792 005a FFF7FEBF 		b	display
 12793              	.LVL1479:
 12794              	.L1309:
3664:src/display.c **** 	}
 12795              		.loc 1 3664 4 view .LVU4148
 12796 005e 00BF     		.align	2
 12797              	.L1308:
 12798 0060 00000000 		.word	StateWhileOn
 12799 0064 00000000 		.word	WasDataEntry
 12800 0068 00000000 		.word	ShowRPN
 12801 006c 00000000 		.word	DispMsg
 12802              		.cfi_endproc
 12803              	.LFE46:
 12805              		.section	.text.error_message,"ax",%progbits
 12806              		.align	1
 12807              		.p2align 2,,3
 12808              		.global	error_message
 12809              		.syntax unified
 12810              		.thumb
 12811              		.thumb_func
 12812              		.fpu fpv4-sp-d16
 12814              	error_message:
 12815              	.LVL1480:
 12816              	.LFB1:
 136:src/display.c **** #define MSG1(top) top "\0"
 12817              		.loc 1 136 1 is_stmt 1 view -0
 12818              		.cfi_startproc
 12819              		@ args = 0, pretend = 0, frame = 0
 12820              		@ frame_needed = 0, uses_anonymous_args = 0
 141:src/display.c ****     {
 12821              		.loc 1 141 3 view .LVU4150
 202:src/display.c ****     {
 12822              		.loc 1 202 3 view .LVU4151
 240:src/display.c ****     const char *p = error_table[e];
 12823              		.loc 1 240 3 view .LVU4152
 240:src/display.c ****     const char *p = error_table[e];
 12824              		.loc 1 240 21 is_stmt 0 view .LVU4153
 12825 0000 364B     		ldr	r3, .L1336
 12826 0002 1B68     		ldr	r3, [r3]
 12827 0004 0343     		orrs	r3, r0, r3
 12828 0006 00D1     		bne	.L1332
 12829 0008 7047     		bx	lr
 12830              	.L1332:
 12831              	.LBB682:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12832              		.loc 1 241 5 is_stmt 1 view .LVU4154
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12833              		.loc 1 241 17 is_stmt 0 view .LVU4155
 12834 000a 354B     		ldr	r3, .L1336+4
 12835              	.LBE682:
 136:src/display.c **** #define MSG1(top) top "\0"
 12836              		.loc 1 136 1 view .LVU4156
 12837 000c 70B5     		push	{r4, r5, r6, lr}
 12838              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccwSk7O0.s 			page 361


 12839              		.cfi_offset 4, -16
 12840              		.cfi_offset 5, -12
 12841              		.cfi_offset 6, -8
 12842              		.cfi_offset 14, -4
 12843              	.LBB694:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12844              		.loc 1 241 17 view .LVU4157
 12845 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12846              	.LVL1481:
 242:src/display.c ****     if (*q == '\0')
 12847              		.loc 1 242 5 is_stmt 1 view .LVU4158
 12848 0012 0446     		mov	r4, r0
 242:src/display.c ****     if (*q == '\0')
 12849              		.loc 1 242 21 is_stmt 0 view .LVU4159
 12850 0014 0021     		movs	r1, #0
 12851 0016 3046     		mov	r0, r6
 12852              	.LVL1482:
 242:src/display.c ****     if (*q == '\0')
 12853              		.loc 1 242 21 view .LVU4160
 12854 0018 FFF7FEFF 		bl	find_char
 12855              	.LVL1483:
 243:src/display.c ****       q = S7_ERROR;
 12856              		.loc 1 243 5 is_stmt 1 view .LVU4161
 243:src/display.c ****       q = S7_ERROR;
 12857              		.loc 1 243 9 is_stmt 0 view .LVU4162
 12858 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 243:src/display.c ****       q = S7_ERROR;
 12859              		.loc 1 243 8 view .LVU4163
 12860 001e 002B     		cmp	r3, #0
 12861 0020 3CD0     		beq	.L1321
 245:src/display.c ****       DispMsg = p;
 12862              		.loc 1 245 8 view .LVU4164
 12863 0022 582B     		cmp	r3, #88
 242:src/display.c ****     if (*q == '\0')
 12864              		.loc 1 242 17 view .LVU4165
 12865 0024 00F10105 		add	r5, r0, #1
 12866              	.LVL1484:
 245:src/display.c ****       DispMsg = p;
 12867              		.loc 1 245 5 is_stmt 1 view .LVU4166
 245:src/display.c ****       DispMsg = p;
 12868              		.loc 1 245 8 is_stmt 0 view .LVU4167
 12869 0028 39D1     		bne	.L1313
 246:src/display.c ****       frozen_display();
 12870              		.loc 1 246 7 is_stmt 1 view .LVU4168
 12871              	.LBB683:
 12872              	.LBB684:
3437:src/display.c **** 	display();
 12873              		.loc 1 3437 21 is_stmt 0 view .LVU4169
 12874 002a 2E4C     		ldr	r4, .L1336+8
 12875              	.LVL1485:
3437:src/display.c **** 	display();
 12876              		.loc 1 3437 21 view .LVU4170
 12877              	.LBE684:
 12878              	.LBE683:
 246:src/display.c ****       frozen_display();
 12879              		.loc 1 246 15 view .LVU4171
 12880 002c 2E4A     		ldr	r2, .L1336+12
ARM GAS  /tmp/ccwSk7O0.s 			page 362


 12881              	.LBB688:
 12882              	.LBB685:
3437:src/display.c **** 	display();
 12883              		.loc 1 3437 21 view .LVU4172
 12884 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12885              	.LBE685:
 12886              	.LBE688:
 246:src/display.c ****       frozen_display();
 12887              		.loc 1 246 15 view .LVU4173
 12888 0030 1660     		str	r6, [r2]
 247:src/display.c ****     }
 12889              		.loc 1 247 7 is_stmt 1 view .LVU4174
 12890              	.LBB689:
 12891              	.LBI683:
3435:src/display.c ****       {
 12892              		.loc 1 3435 12 view .LVU4175
 12893              	.LBB686:
3437:src/display.c **** 	display();
 12894              		.loc 1 3437 2 view .LVU4176
3437:src/display.c **** 	display();
 12895              		.loc 1 3437 21 is_stmt 0 view .LVU4177
 12896 0032 6FF30413 		bfc	r3, #4, #1
 12897 0036 E375     		strb	r3, [r4, #23]
3438:src/display.c **** 	State2.disp_freeze = 1;
 12898              		.loc 1 3438 2 is_stmt 1 view .LVU4178
 12899 0038 FFF7FEFF 		bl	display
 12900              	.LVL1486:
3439:src/display.c ****       }
 12901              		.loc 1 3439 2 view .LVU4179
 12902              	.LBE686:
 12903              	.LBE689:
 261:src/display.c ****       if (*q == 'X')
 12904              		.loc 1 261 5 view .LVU4180
 12905              	.LBB690:
 12906              	.LBB687:
3439:src/display.c ****       }
 12907              		.loc 1 3439 21 is_stmt 0 view .LVU4181
 12908 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12909 003e 43F01003 		orr	r3, r3, #16
 12910 0042 E375     		strb	r3, [r4, #23]
 12911              	.LBE687:
 12912              	.LBE690:
 261:src/display.c ****       if (*q == 'X')
 12913              		.loc 1 261 9 view .LVU4182
 12914 0044 294B     		ldr	r3, .L1336+16
 261:src/display.c ****       if (*q == 'X')
 12915              		.loc 1 261 8 view .LVU4183
 12916 0046 1B68     		ldr	r3, [r3]
 12917 0048 002B     		cmp	r3, #0
 12918 004a 3ED0     		beq	.L1310
 12919              	.LVL1487:
 12920              	.L1335:
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12921              		.loc 1 262 7 is_stmt 1 view .LVU4184
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12922              		.loc 1 262 10 is_stmt 0 view .LVU4185
 12923 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
ARM GAS  /tmp/ccwSk7O0.s 			page 363


 12924 004e 582B     		cmp	r3, #88
 12925 0050 3CD0     		beq	.L1333
 265:src/display.c **** 	print_line(p, 0);
 12926              		.loc 1 265 2 is_stmt 1 view .LVU4186
 12927 0052 0020     		movs	r0, #0
 12928 0054 FFF7FEFF 		bl	print_tab
 12929              	.LVL1488:
 266:src/display.c **** 	print(' ');
 12930              		.loc 1 266 2 view .LVU4187
 12931 0058 3046     		mov	r0, r6
 12932 005a 0021     		movs	r1, #0
 12933 005c FFF7FEFF 		bl	print_line
 12934              	.LVL1489:
 267:src/display.c **** 	while (*q != '\0') {
 12935              		.loc 1 267 2 view .LVU4188
 12936 0060 2020     		movs	r0, #32
 12937 0062 FFF7FEFF 		bl	print
 12938              	.LVL1490:
 268:src/display.c **** 	  int c = *q;
 12939              		.loc 1 268 2 view .LVU4189
 268:src/display.c **** 	  int c = *q;
 12940              		.loc 1 268 8 view .LVU4190
 268:src/display.c **** 	  int c = *q;
 12941              		.loc 1 268 9 is_stmt 0 view .LVU4191
 12942 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 268:src/display.c **** 	  int c = *q;
 12943              		.loc 1 268 8 view .LVU4192
 12944 0068 73B9     		cbnz	r3, .L1317
 12945              	.L1320:
 277:src/display.c ****       }
 12946              		.loc 1 277 2 is_stmt 1 view .LVU4193
 12947              	.LBE694:
 282:src/display.c **** 
 12948              		.loc 1 282 1 is_stmt 0 view .LVU4194
 12949 006a BDE87040 		pop	{r4, r5, r6, lr}
 12950              		.cfi_remember_state
 12951              		.cfi_restore 14
 12952              		.cfi_restore 6
 12953              		.cfi_restore 5
 12954              		.cfi_restore 4
 12955              		.cfi_def_cfa_offset 0
 12956              	.LVL1491:
 12957              	.LBB695:
 277:src/display.c ****       }
 12958              		.loc 1 277 2 view .LVU4195
 12959 006e 0020     		movs	r0, #0
 12960 0070 FFF7FEBF 		b	print_advance
 12961              	.LVL1492:
 12962              	.L1334:
 12963              		.cfi_restore_state
 12964              	.LBB691:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12965              		.loc 1 272 4 view .LVU4196
 12966 0074 FFF7FEFF 		bl	print
 12967              	.LVL1493:
 273:src/display.c **** 	    ++q;
 12968              		.loc 1 273 4 is_stmt 1 view .LVU4197
ARM GAS  /tmp/ccwSk7O0.s 			page 364


 274:src/display.c **** 	  ++q;
 12969              		.loc 1 274 6 view .LVU4198
 273:src/display.c **** 	    ++q;
 12970              		.loc 1 273 7 is_stmt 0 view .LVU4199
 12971 0078 6D2C     		cmp	r4, #109
 274:src/display.c **** 	  ++q;
 12972              		.loc 1 274 6 view .LVU4200
 12973 007a 0CBF     		ite	eq
 12974 007c 691C     		addeq	r1, r5, #1
 12975              	.LVL1494:
 274:src/display.c **** 	  ++q;
 12976              		.loc 1 274 6 view .LVU4201
 12977 007e 2946     		movne	r1, r5
 12978              	.LVL1495:
 12979              	.L1319:
 275:src/display.c **** 	}
 12980              		.loc 1 275 4 is_stmt 1 view .LVU4202
 12981              	.LBE691:
 268:src/display.c **** 	  int c = *q;
 12982              		.loc 1 268 9 is_stmt 0 view .LVU4203
 12983 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12984              	.LBB692:
 275:src/display.c **** 	}
 12985              		.loc 1 275 4 view .LVU4204
 12986 0082 4D1C     		adds	r5, r1, #1
 12987              	.LVL1496:
 275:src/display.c **** 	}
 12988              		.loc 1 275 4 view .LVU4205
 12989              	.LBE692:
 268:src/display.c **** 	  int c = *q;
 12990              		.loc 1 268 8 is_stmt 1 view .LVU4206
 12991 0084 002B     		cmp	r3, #0
 12992 0086 F0D0     		beq	.L1320
 12993              	.LVL1497:
 12994              	.L1317:
 12995              	.LBB693:
 269:src/display.c **** 	  if (c >= 'A')
 12996              		.loc 1 269 4 view .LVU4207
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12997              		.loc 1 270 4 view .LVU4208
 271:src/display.c **** 	  print(c);
 12998              		.loc 1 271 6 view .LVU4209
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12999              		.loc 1 272 4 view .LVU4210
 13000 0088 43F06004 		orr	r4, r3, #96
 13001              	.LVL1498:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13002              		.loc 1 272 4 view .LVU4211
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13003              		.loc 1 270 7 is_stmt 0 view .LVU4212
 13004 008c 402B     		cmp	r3, #64
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13005              		.loc 1 272 4 view .LVU4213
 13006 008e 2046     		mov	r0, r4
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13007              		.loc 1 270 7 view .LVU4214
 13008 0090 F0DC     		bgt	.L1334
ARM GAS  /tmp/ccwSk7O0.s 			page 365


 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13009              		.loc 1 272 4 view .LVU4215
 13010 0092 1846     		mov	r0, r3
 13011 0094 FFF7FEFF 		bl	print
 13012              	.LVL1499:
 273:src/display.c **** 	    ++q;
 13013              		.loc 1 273 4 is_stmt 1 view .LVU4216
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13014              		.loc 1 272 4 is_stmt 0 view .LVU4217
 13015 0098 2946     		mov	r1, r5
 13016 009a F1E7     		b	.L1319
 13017              	.LVL1500:
 13018              	.L1321:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13019              		.loc 1 272 4 view .LVU4218
 13020              	.LBE693:
 244:src/display.c ****     if (*q == 'X') {
 13021              		.loc 1 244 9 view .LVU4219
 13022 009c 144D     		ldr	r5, .L1336+20
 13023              	.L1313:
 13024              	.LVL1501:
 254:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 13025              		.loc 1 254 7 is_stmt 1 view .LVU4220
 13026 009e 2946     		mov	r1, r5
 13027 00a0 3046     		mov	r0, r6
 13028 00a2 FFF7FEFF 		bl	message
 13029              	.LVL1502:
 255:src/display.c **** #ifndef REALBUILD
 13030              		.loc 1 255 7 view .LVU4221
 255:src/display.c **** #ifndef REALBUILD
 13031              		.loc 1 255 26 is_stmt 0 view .LVU4222
 13032 00a6 0F4B     		ldr	r3, .L1336+8
 257:src/display.c **** #endif
 13033              		.loc 1 257 7 view .LVU4223
 13034 00a8 1249     		ldr	r1, .L1336+24
 255:src/display.c **** #ifndef REALBUILD
 13035              		.loc 1 255 26 view .LVU4224
 13036 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 257:src/display.c **** #endif
 13037              		.loc 1 257 7 view .LVU4225
 13038 00ac 51F82410 		ldr	r1, [r1, r4, lsl #2]
 13039 00b0 1148     		ldr	r0, .L1336+28
 255:src/display.c **** #ifndef REALBUILD
 13040              		.loc 1 255 31 view .LVU4226
 13041 00b2 003C     		subs	r4, r4, #0
 255:src/display.c **** #ifndef REALBUILD
 13042              		.loc 1 255 31 view .LVU4227
 13043 00b4 18BF     		it	ne
 13044 00b6 0124     		movne	r4, #1
 13045              	.LVL1503:
 255:src/display.c **** #ifndef REALBUILD
 13046              		.loc 1 255 26 view .LVU4228
 13047 00b8 64F30412 		bfi	r2, r4, #4, #1
 13048 00bc DA75     		strb	r2, [r3, #23]
 257:src/display.c **** #endif
 13049              		.loc 1 257 7 is_stmt 1 view .LVU4229
 13050 00be FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccwSk7O0.s 			page 366


 13051              	.LVL1504:
 261:src/display.c ****       if (*q == 'X')
 13052              		.loc 1 261 5 view .LVU4230
 261:src/display.c ****       if (*q == 'X')
 13053              		.loc 1 261 9 is_stmt 0 view .LVU4231
 13054 00c2 0A4B     		ldr	r3, .L1336+16
 261:src/display.c ****       if (*q == 'X')
 13055              		.loc 1 261 8 view .LVU4232
 13056 00c4 1B68     		ldr	r3, [r3]
 13057 00c6 002B     		cmp	r3, #0
 13058 00c8 C0D1     		bne	.L1335
 13059              	.LVL1505:
 13060              	.L1310:
 261:src/display.c ****       if (*q == 'X')
 13061              		.loc 1 261 8 view .LVU4233
 13062              	.LBE695:
 282:src/display.c **** 
 13063              		.loc 1 282 1 view .LVU4234
 13064 00ca 70BD     		pop	{r4, r5, r6, pc}
 13065              	.LVL1506:
 13066              	.L1333:
 13067              	.LBB696:
 263:src/display.c ****       else {
 13068              		.loc 1 263 2 is_stmt 1 view .LVU4235
 13069 00cc 3146     		mov	r1, r6
 13070 00ce 0022     		movs	r2, #0
 13071              	.LBE696:
 282:src/display.c **** 
 13072              		.loc 1 282 1 is_stmt 0 view .LVU4236
 13073 00d0 BDE87040 		pop	{r4, r5, r6, lr}
 13074              		.cfi_restore 14
 13075              		.cfi_restore 6
 13076              		.cfi_restore 5
 13077              		.cfi_restore 4
 13078              		.cfi_def_cfa_offset 0
 13079              	.LVL1507:
 13080              	.LBB697:
 263:src/display.c ****       else {
 13081              		.loc 1 263 2 view .LVU4237
 13082 00d4 6420     		movs	r0, #100
 13083 00d6 FFF7FEBF 		b	print_reg
 13084              	.LVL1508:
 13085              	.L1337:
 263:src/display.c ****       else {
 13086              		.loc 1 263 2 view .LVU4238
 13087 00da 00BF     		.align	2
 13088              	.L1336:
 13089 00dc 00000000 		.word	Running
 13090 00e0 00000000 		.word	.LANCHOR27
 13091 00e4 00000000 		.word	StateWhileOn
 13092 00e8 00000000 		.word	DispMsg
 13093 00ec 00000000 		.word	Tracing
 13094 00f0 00000000 		.word	.LANCHOR26
 13095 00f4 00000000 		.word	.LANCHOR28
 13096 00f8 00000000 		.word	LastDisplayedNumber
 13097              	.LBE697:
 13098              		.cfi_endproc
ARM GAS  /tmp/ccwSk7O0.s 			page 367


 13099              	.LFE1:
 13101              		.section	.text.stopwatch_message,"ax",%progbits
 13102              		.align	1
 13103              		.p2align 2,,3
 13104              		.global	stopwatch_message
 13105              		.syntax unified
 13106              		.thumb
 13107              		.thumb_func
 13108              		.fpu fpv4-sp-d16
 13110              	stopwatch_message:
 13111              	.LVL1509:
 13112              	.LFB48:
3689:src/display.c **** #ifndef REALBUILD
 13113              		.loc 1 3689 7 is_stmt 1 view -0
 13114              		.cfi_startproc
 13115              		@ args = 0, pretend = 0, frame = 0
 13116              		@ frame_needed = 0, uses_anonymous_args = 0
3691:src/display.c **** #endif
 13117              		.loc 1 3691 2 view .LVU4240
3689:src/display.c **** #ifndef REALBUILD
 13118              		.loc 1 3689 7 is_stmt 0 view .LVU4241
 13119 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 13120              		.cfi_def_cfa_offset 24
 13121              		.cfi_offset 3, -24
 13122              		.cfi_offset 4, -20
 13123              		.cfi_offset 5, -16
 13124              		.cfi_offset 6, -12
 13125              		.cfi_offset 7, -8
 13126              		.cfi_offset 14, -4
3689:src/display.c **** #ifndef REALBUILD
 13127              		.loc 1 3689 7 view .LVU4242
 13128 0002 0F46     		mov	r7, r1
 13129 0004 1446     		mov	r4, r2
3691:src/display.c **** #endif
 13130              		.loc 1 3691 2 view .LVU4243
 13131 0006 2021     		movs	r1, #32
 13132              	.LVL1510:
3691:src/display.c **** #endif
 13133              		.loc 1 3691 2 view .LVU4244
 13134 0008 1922     		movs	r2, #25
 13135              	.LVL1511:
3689:src/display.c **** #ifndef REALBUILD
 13136              		.loc 1 3689 7 view .LVU4245
 13137 000a 0646     		mov	r6, r0
3691:src/display.c **** #endif
 13138              		.loc 1 3691 2 view .LVU4246
 13139 000c 1248     		ldr	r0, .L1349
 13140              	.LVL1512:
3689:src/display.c **** #ifndef REALBUILD
 13141              		.loc 1 3689 7 view .LVU4247
 13142 000e 1D46     		mov	r5, r3
3691:src/display.c **** #endif
 13143              		.loc 1 3691 2 view .LVU4248
 13144 0010 FFF7FEFF 		bl	xset
 13145              	.LVL1513:
3693:src/display.c **** 	set_dot(DEG);
 13146              		.loc 1 3693 2 is_stmt 1 view .LVU4249
ARM GAS  /tmp/ccwSk7O0.s 			page 368


 13147 0014 FFF7FEFF 		bl	reset_disp
 13148              	.LVL1514:
3694:src/display.c **** 	set_digits_string( str2, 0 );
 13149              		.loc 1 3694 2 view .LVU4250
 13150 0018 8C20     		movs	r0, #140
 13151 001a FFF7FEFF 		bl	set_dot
 13152              	.LVL1515:
3695:src/display.c **** 	State2.disp_small = force_small;
 13153              		.loc 1 3695 2 view .LVU4251
 13154 001e 3846     		mov	r0, r7
 13155 0020 0021     		movs	r1, #0
 13156 0022 FFF7FEFF 		bl	set_digits_string
 13157              	.LVL1516:
3696:src/display.c **** 	if( exponent!=NULL ) {
 13158              		.loc 1 3696 2 view .LVU4252
3696:src/display.c **** 	if( exponent!=NULL ) {
 13159              		.loc 1 3696 20 is_stmt 0 view .LVU4253
 13160 0026 0D4B     		ldr	r3, .L1349+4
 13161 0028 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 13162 002a 64F3C712 		bfi	r2, r4, #7, #1
 13163              	.LVL1517:
3696:src/display.c **** 	if( exponent!=NULL ) {
 13164              		.loc 1 3696 20 view .LVU4254
 13165 002e 9A75     		strb	r2, [r3, #22]
3697:src/display.c **** 	  stopwatch_exponent(exponent);
 13166              		.loc 1 3697 2 is_stmt 1 view .LVU4255
3697:src/display.c **** 	  stopwatch_exponent(exponent);
 13167              		.loc 1 3697 4 is_stmt 0 view .LVU4256
 13168 0030 55B1     		cbz	r5, .L1339
 13169              	.LVL1518:
 13170              	.LBB698:
 13171              	.LBB699:
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13172              		.loc 1 3682 9 is_stmt 1 view .LVU4257
 13173 0032 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13174              		.loc 1 3682 2 is_stmt 0 view .LVU4258
 13175 0034 41B1     		cbz	r1, .L1339
3681:src/display.c **** 	for (; *exponent!=0; exponent++) {
 13176              		.loc 1 3681 6 view .LVU4259
 13177 0036 6C24     		movs	r4, #108
 13178              	.LVL1519:
 13179              	.L1340:
3683:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 13180              		.loc 1 3683 4 is_stmt 1 view .LVU4260
 13181              	.LBB700:
 13182              	.LBI700:
 415:src/display.c ****   if (res) *res++ = ch;
 13183              		.loc 1 415 14 view .LVU4261
 13184              	.LBB701:
 416:src/display.c ****   else	set_dig(base, ch);
 13185              		.loc 1 416 3 view .LVU4262
 417:src/display.c ****   return res;
 13186              		.loc 1 417 8 view .LVU4263
 13187 0038 2046     		mov	r0, r4
 13188 003a FFF7FEFF 		bl	set_dig
 13189              	.LVL1520:
ARM GAS  /tmp/ccwSk7O0.s 			page 369


 418:src/display.c **** }
 13190              		.loc 1 418 3 view .LVU4264
 418:src/display.c **** }
 13191              		.loc 1 418 3 is_stmt 0 view .LVU4265
 13192              	.LBE701:
 13193              	.LBE700:
3684:src/display.c **** 	}
 13194              		.loc 1 3684 4 is_stmt 1 view .LVU4266
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13195              		.loc 1 3682 9 is_stmt 0 view .LVU4267
 13196 003e 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 13197              	.LVL1521:
3684:src/display.c **** 	}
 13198              		.loc 1 3684 6 view .LVU4268
 13199 0042 0734     		adds	r4, r4, #7
 13200              	.LVL1522:
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13201              		.loc 1 3682 23 is_stmt 1 view .LVU4269
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13202              		.loc 1 3682 9 view .LVU4270
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13203              		.loc 1 3682 2 is_stmt 0 view .LVU4271
 13204 0044 0029     		cmp	r1, #0
 13205 0046 F7D1     		bne	.L1340
 13206              	.LVL1523:
 13207              	.L1339:
3682:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13208              		.loc 1 3682 2 view .LVU4272
 13209              	.LBE699:
 13210              	.LBE698:
3700:src/display.c **** 	finish_display();
 13211              		.loc 1 3700 2 is_stmt 1 view .LVU4273
 13212 0048 3046     		mov	r0, r6
 13213 004a FFF7FEFF 		bl	set_status
 13214              	.LVL1524:
3701:src/display.c ****       }
 13215              		.loc 1 3701 2 view .LVU4274
3702:src/display.c **** 
 13216              		.loc 1 3702 7 is_stmt 0 view .LVU4275
 13217 004e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 13218              		.cfi_restore 14
 13219              		.cfi_restore 7
 13220              		.cfi_restore 6
 13221              		.cfi_restore 5
 13222              		.cfi_restore 4
 13223              		.cfi_restore 3
 13224              		.cfi_def_cfa_offset 0
 13225              	.LVL1525:
3701:src/display.c ****       }
 13226              		.loc 1 3701 2 view .LVU4276
 13227 0052 FFF7FEBF 		b	finish_display
 13228              	.LVL1526:
 13229              	.L1350:
 13230 0056 00BF     		.align	2
 13231              	.L1349:
 13232 0058 00000000 		.word	LastDisplayedNumber
 13233 005c 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccwSk7O0.s 			page 370


 13234              		.cfi_endproc
 13235              	.LFE48:
 13237              		.section	.rodata.str1.4,"aMS",%progbits,1
 13238              		.align	2
 13239              	.LC45:
 13240 0000 06316306 		.ascii	"\0061c\006\006\000"
 13240      0600
 13241 0006 0000     		.align	2
 13242              	.LC46:
 13243 0008 756E0600 		.ascii	"un\006\000"
 13244              		.align	2
 13245              	.LC47:
 13246 000c 736D00   		.ascii	"sm\000"
 13247              		.set	CSWTCH.381,CSWTCH.379
 13248 000f 00       		.align	2
 13249              	.LC48:
 13250 0010 20502072 		.ascii	" P r o g r a m \000"
 13250      206F2067 
 13250      20722061 
 13250      206D2000 
 13251              		.align	2
 13252              	.LC49:
 13253 0020 206F2072 		.ascii	" o r   d a t e \000"
 13253      20202064 
 13253      20612074 
 13253      20652000 
 13254              		.align	2
 13255              	.LC50:
 13256 0030 204F2070 		.ascii	" O p - c o d e \000"
 13256      202D2063 
 13256      206F2064 
 13256      20652000 
 13257              		.align	2
 13258              	.LC51:
 13259 0040 204C2061 		.ascii	" L a b e l \000"
 13259      20622065 
 13259      206C2000 
 13260              		.align	2
 13261              	.LC52:
 13262 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 13262      20652072 
 13262      20612074 
 13262      2069206F 
 13262      206E2000 
 13263              		.align	2
 13264              	.LC53:
 13265 0060 20462075 		.ascii	" F u l l \000"
 13265      206C206C 
 13265      2000
 13266 006a 0000     		.align	2
 13267              	.LC54:
 13268 006c 2043206C 		.ascii	" C l a s h \000"
 13268      20612073 
 13268      20682000 
 13269              		.align	2
 13270              	.LC55:
 13271 0078 2054206F 		.ascii	" T o o   s m a l l \000"
ARM GAS  /tmp/ccwSk7O0.s 			page 371


 13271      206F2020 
 13271      2073206D 
 13271      2061206C 
 13271      206C2000 
 13272              		.align	2
 13273              	.LC56:
 13274 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 13274      20742061 
 13274      20202070 
 13274      206F2069 
 13274      206E2074 
 13275              		.align	2
 13276              	.LC57:
 13277 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 13277      20722061 
 13277      206D2065 
 13277      20742065 
 13277      20722000 
 13278              		.align	2
 13279              	.LC58:
 13280 00b8 20442061 		.ascii	" D a t a \000"
 13280      20742061 
 13280      2000
 13281 00c2 0000     		.align	2
 13282              	.LC59:
 13283 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 13283      206F2074 
 13283      20652063 
 13283      20742065 
 13283      20642000 
 13284              		.align	2
 13285              	.LC60:
 13286 00d8 2046206F 		.ascii	" F o u n d \000"
 13286      2075206E 
 13286      20642000 
 13287              		.align	2
 13288              	.LC61:
 13289 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 13289      2073206D 
 13289      20612074 
 13289      20632068 
 13289      2000
 13290 00f6 0000     		.align	2
 13291              	.LC62:
 13292 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 13292      20732074 
 13292      2061206C 
 13292      206C2065 
 13292      20642000 
 13293              		.global	DIGITS
 13294              		.comm	IoAnnunciator,4,4
 13295              		.comm	IntMaxWindow,4,4
 13296              		.comm	JustDisplayed,4,4
 13297              		.comm	ShowRPN,4,4
 13298              		.comm	forceDispPlot,1,1
 13299              		.comm	LastDisplayedExponent,5,4
 13300              		.comm	LastDisplayedNumber,26,4
ARM GAS  /tmp/ccwSk7O0.s 			page 372


 13301              		.comm	LastDisplayedText,31,4
 13302              		.global	no_status_top
 13303              		.comm	DispPlot,2,2
 13304              		.comm	DispMsg,4,4
 13305              		.global	SvnRevision
 13306              		.section	.rodata
 13307              		.align	2
 13308              		.set	.LANCHOR17,. + 0
 13309              	.LC20:
 13310 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 13310      22002E00 
 13310      00
 13311 0009 000000   		.space	3
 13312              	.LC24:
 13313 000c 33344306 		.ascii	"34C\0063.3\222\000"
 13313      332E3392 
 13313      00
 13314 0015 00000000 		.space	4
 13315 0019 000000   		.space	3
 13316              	.LC63:
 13317 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 13317      696E6700 
 13317      50726F47 
 13317      72614D6D 
 13317      00
 13318 002d 000000   		.space	3
 13319              	.LC64:
 13320 0030 446F6D61 		.ascii	"Domain\000\000"
 13320      696E0000 
 13321              	.LC65:
 13322 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 13322      74696D65 
 13322      006F7220 
 13322      64417445 
 13322      00
 13323 0049 000000   		.space	3
 13324              	.LC66:
 13325 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 13325      66696E65 
 13325      64004F70 
 13325      2D434F64 
 13325      4500
 13326 005e 0000     		.space	2
 13327              	.LC67:
 13328 0060 2B9F0000 		.ascii	"+\237\000\000"
 13329              	.LC68:
 13330 0064 2D9F0000 		.ascii	"-\237\000\000"
 13331              	.LC69:
 13332 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 13332      75636800 
 13332      4C416245 
 13332      4C00
 13333 0076 0000     		.space	2
 13334              	.LC70:
 13335 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 13335      67616C00 
 13335      4F504572 
ARM GAS  /tmp/ccwSk7O0.s 			page 373


 13335      4174696F 
 13335      6E00
 13336 008a 0000     		.space	2
 13337              	.LC71:
 13338 008c 4F757420 		.ascii	"Out of range\000\000"
 13338      6F662072 
 13338      616E6765 
 13338      0000
 13339 009a 0000     		.space	2
 13340              	.LC72:
 13341 009c 42616420 		.ascii	"Bad digit\000\000"
 13341      64696769 
 13341      740000
 13342 00a7 00       		.space	1
 13343              	.LC73:
 13344 00a8 546F6F20 		.ascii	"Too long\000\000"
 13344      6C6F6E67 
 13344      0000
 13345 00b2 0000     		.space	2
 13346              	.LC74:
 13347 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 13347      69730046 
 13347      754C4C00 
 13348              	.LC75:
 13349 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 13349      6B00434C 
 13349      41534800 
 13350              	.LC76:
 13351 00cc 42616420 		.ascii	"Bad mode\000\000"
 13351      6D6F6465 
 13351      0000
 13352 00d6 0000     		.space	2
 13353              	.LC77:
 13354 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 13354      06060673 
 13354      697A6500 
 13354      746F6F20 
 13354      534D6D41 
 13355 00ef 00       		.space	1
 13356              	.LC78:
 13357 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 13357      66657700 
 13357      64417441 
 13357      20506F69 
 13357      6E745300 
 13358              	.LC79:
 13359 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 13359      6C696400 
 13359      50617261 
 13359      4D6D4574 
 13359      457200
 13360 0117 00       		.space	1
 13361              	.LC80:
 13362 0118 492F4F00 		.ascii	"I/O\000\000"
 13362      00
 13363 011d 000000   		.space	3
 13364              	.LC81:
ARM GAS  /tmp/ccwSk7O0.s 			page 374


 13365 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 13365      6C696400 
 13365      64417441 
 13365      00
 13366 012d 000000   		.space	3
 13367              	.LC82:
 13368 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 13368      65005072 
 13368      6F744563 
 13368      74456400 
 13369              	.LC83:
 13370 0140 4E6F2072 		.ascii	"No root\000Found\000"
 13370      6F6F7400 
 13370      466F756E 
 13370      6400
 13371 014e 0000     		.space	2
 13372              	.LC84:
 13373 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 13373      6978004D 
 13373      6D49534D 
 13373      6D417443 
 13373      4800
 13374 0162 0000     		.space	2
 13375              	.LC85:
 13376 0164 53696E67 		.ascii	"Singular\000\000"
 13376      756C6172 
 13376      0000
 13377 016e 0000     		.space	2
 13378              	.LC86:
 13379 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 13379      68206973 
 13379      0046754C 
 13379      4C00
 13380 017e 0000     		.space	2
 13381              	.LC87:
 13382 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 13382      72797374 
 13382      616C0049 
 13382      6E537461 
 13382      4C4C4564 
 13383 0195 000000   		.space	3
 13384              	.LC88:
 13385 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 13385      6576656E 
 13385      20726567 
 13385      00666F72 
 13385      20436F4D 
 13386 01b2 0000     		.space	2
 13387              	.LC89:
 13388 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 13388      5800
 13389              		.section	.bss.DecimalMode,"aw",%nobits
 13390              		.set	.LANCHOR1,. + 0
 13393              	DecimalMode:
 13394 0000 00       		.space	1
 13395              		.section	.bss.SeparatorMode,"aw",%nobits
 13396              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/ccwSk7O0.s 			page 375


 13399              	SeparatorMode:
 13400 0000 00       		.space	1
 13401              		.section	.bss.no_status_top,"aw",%nobits
 13402              		.align	1
 13403              		.set	.LANCHOR18,. + 0
 13406              	no_status_top:
 13407 0000 0000     		.space	2
 13408              		.section	.rodata.CSWTCH.379,"a"
 13409              		.align	2
 13410              		.set	.LANCHOR11,. + 0
 13413              	CSWTCH.379:
 13414 0000 02000000 		.word	2
 13415 0004 08000000 		.word	8
 13416 0008 0A000000 		.word	10
 13417 000c 10000000 		.word	16
 13418              		.section	.rodata.CSWTCH.406,"a"
 13419              		.align	2
 13420              		.set	.LANCHOR16,. + 0
 13423              	CSWTCH.406:
 13424 0000 00000000 		.word	.LC45
 13425 0004 08000000 		.word	.LC46
 13426 0008 0C000000 		.word	.LC47
 13427              		.section	.rodata.DIGITS,"a"
 13428              		.align	2
 13429              		.set	.LANCHOR12,. + 0
 13432              	DIGITS:
 13433 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 13433      34353637 
 13433      38394142 
 13433      43444546 
 13433      00
 13434              		.section	.rodata.S7_ERROR,"a"
 13435              		.align	2
 13436              		.set	.LANCHOR26,. + 0
 13439              	S7_ERROR:
 13440 0000 4572726F 		.ascii	"Error\000"
 13440      7200
 13441              		.section	.rodata.S7_INF,"a"
 13442              		.align	2
 13443              		.set	.LANCHOR5,. + 0
 13446              	S7_INF:
 13447 0000 496E6669 		.ascii	"Infinity\000"
 13447      6E697479 
 13447      00
 13448              		.section	.rodata.S7_INF_Text,"a"
 13449              		.align	2
 13450              		.set	.LANCHOR7,. + 0
 13453              	S7_INF_Text:
 13454 0000 2049206E 		.ascii	" I n f i n i t y \000"
 13454      20662069 
 13454      206E2069 
 13454      20742079 
 13454      2000
 13455              		.section	.rodata.S7_NEG_INF_Text,"a"
 13456              		.align	2
 13457              		.set	.LANCHOR6,. + 0
 13460              	S7_NEG_INF_Text:
ARM GAS  /tmp/ccwSk7O0.s 			page 376


 13461 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 13461      20662069 
 13461      206E2069 
 13461      20742079 
 13461      2000
 13462              		.section	.rodata.S7_NaN,"a"
 13463              		.align	2
 13464              		.set	.LANCHOR3,. + 0
 13467              	S7_NaN:
 13468 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 13468      6E754D6D 
 13468      45726963 
 13468      00
 13469              		.section	.rodata.S7_NaN_Text,"a"
 13470              		.align	2
 13471              		.set	.LANCHOR4,. + 0
 13474              	S7_NaN_Text:
 13475 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 13475      20742020 
 13475      206E2075 
 13475      206D2065 
 13475      20722069 
 13476              		.section	.rodata.S7_STEP,"a"
 13477              		.align	2
 13478              		.set	.LANCHOR25,. + 0
 13481              	S7_STEP:
 13482 0000 53744550 		.ascii	"StEP \000"
 13482      2000
 13483              		.section	.rodata.S7_STEP_ShortText,"a"
 13484              		.align	2
 13485              		.set	.LANCHOR19,. + 0
 13488              	S7_STEP_ShortText:
 13489 0000 53544550 		.ascii	"STEP\000"
 13489      00
 13490              		.section	.rodata.S7_fract_EQ,"a"
 13491              		.align	2
 13492              		.set	.LANCHOR9,. + 0
 13495              	S7_fract_EQ:
 13496 0000 203D2000 		.ascii	" = \000"
 13497              		.section	.rodata.S7_fract_GT,"a"
 13498              		.align	2
 13499              		.set	.LANCHOR10,. + 0
 13502              	S7_fract_GT:
 13503 0000 20477400 		.ascii	" Gt\000"
 13504              		.section	.rodata.S7_fract_LT,"a"
 13505              		.align	2
 13506              		.set	.LANCHOR8,. + 0
 13509              	S7_fract_LT:
 13510 0000 204C7400 		.ascii	" Lt\000"
 13511              		.section	.rodata.S_SURE,"a"
 13512              		.align	2
 13513              		.set	.LANCHOR21,. + 0
 13516              	S_SURE:
 13517 0000 53757265 		.ascii	"Sure?\000"
 13517      3F00
 13518              		.section	.rodata.SvnRevision,"a"
 13519              		.align	2
ARM GAS  /tmp/ccwSk7O0.s 			page 377


 13520              		.set	.LANCHOR20,. + 0
 13523              	SvnRevision:
 13524 0000 30202020 		.ascii	"0   "
 13525              		.section	.rodata.digtbl,"a"
 13526              		.align	2
 13527              		.set	.LANCHOR2,. + 0
 13530              	digtbl:
 13531 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 13531      02421252 
 13531      2D000000 
 13531      00000000 
 13531      00
 13532 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 13532      00000017 
 13532      01000000 
 13532      00
 13533 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 13533      28000000 
 13533      0020664B 
 13533      00000010 
 13534 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 13534      5E5B3973 
 13534      77497F7B 
 13534      00000612 
 13534      0300787D 
 13535 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 13535      673D240F 
 13535      75266C6D 
 13535      6F7C7914 
 13535      73362F00 
 13536 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13536      161F7674 
 13536      6735040F 
 13536      75266915 
 13536      177C7914 
 13537 0076 000F003B 		.ascii	"\000\017\000;"
 13538              		.section	.rodata.error_table.8674,"a"
 13539              		.align	2
 13540              		.set	.LANCHOR27,. + 0
 13543              	error_table.8674:
 13544 0000 1C000000 		.word	.LC63
 13545 0004 30000000 		.word	.LC64
 13546 0008 38000000 		.word	.LC65
 13547 000c 4C000000 		.word	.LC66
 13548 0010 60000000 		.word	.LC67
 13549 0014 64000000 		.word	.LC68
 13550 0018 68000000 		.word	.LC69
 13551 001c 78000000 		.word	.LC70
 13552 0020 8C000000 		.word	.LC71
 13553 0024 9C000000 		.word	.LC72
 13554 0028 A8000000 		.word	.LC73
 13555 002c B4000000 		.word	.LC74
 13556 0030 C0000000 		.word	.LC75
 13557 0034 CC000000 		.word	.LC76
 13558 0038 D8000000 		.word	.LC77
 13559 003c F0000000 		.word	.LC78
 13560 0040 04010000 		.word	.LC79
ARM GAS  /tmp/ccwSk7O0.s 			page 378


 13561 0044 18010000 		.word	.LC80
 13562 0048 20010000 		.word	.LC81
 13563 004c 30010000 		.word	.LC82
 13564 0050 40010000 		.word	.LC83
 13565 0054 50010000 		.word	.LC84
 13566 0058 64010000 		.word	.LC85
 13567 005c 70010000 		.word	.LC86
 13568 0060 80010000 		.word	.LC87
 13569 0064 98010000 		.word	.LC88
 13570 0068 B4010000 		.word	.LC89
 13571              		.section	.rodata.error_table_text.8675,"a"
 13572              		.align	2
 13573              		.set	.LANCHOR28,. + 0
 13576              	error_table_text.8675:
 13577 0000 10000000 		.word	.LC48
 13578 0004 A8000000 		.word	.LC43
 13579 0008 20000000 		.word	.LC49
 13580 000c 30000000 		.word	.LC50
 13581 0010 A8000000 		.word	.LC43
 13582 0014 A8000000 		.word	.LC43
 13583 0018 40000000 		.word	.LC51
 13584 001c 4C000000 		.word	.LC52
 13585 0020 A8000000 		.word	.LC43
 13586 0024 A8000000 		.word	.LC43
 13587 0028 A8000000 		.word	.LC43
 13588 002c 60000000 		.word	.LC53
 13589 0030 6C000000 		.word	.LC54
 13590 0034 A8000000 		.word	.LC43
 13591 0038 78000000 		.word	.LC55
 13592 003c 8C000000 		.word	.LC56
 13593 0040 A4000000 		.word	.LC57
 13594 0044 A8000000 		.word	.LC43
 13595 0048 B8000000 		.word	.LC58
 13596 004c C4000000 		.word	.LC59
 13597 0050 D8000000 		.word	.LC60
 13598 0054 E4000000 		.word	.LC61
 13599 0058 A8000000 		.word	.LC43
 13600 005c 60000000 		.word	.LC53
 13601 0060 F8000000 		.word	.LC62
 13602 0064 A8000000 		.word	.LC43
 13603 0068 A8000000 		.word	.LC43
 13604              		.section	.rodata.libname,"a"
 13605              		.align	2
 13606              		.set	.LANCHOR22,. + 0
 13609              	libname:
 13610 0000 72414D6D 		.ascii	"rAMm\000"
 13610      00
 13611 0005 4C696220 		.ascii	"Lib \000"
 13611      00
 13612 000a 42757020 		.ascii	"Bup \000"
 13612      00
 13613 000f 726F4D6D 		.ascii	"roMm\000"
 13613      00
 13614              		.section	.rodata.libname_shorttext,"a"
 13615              		.align	2
 13616              		.set	.LANCHOR24,. + 0
 13619              	libname_shorttext:
ARM GAS  /tmp/ccwSk7O0.s 			page 379


 13620 0000 52616D00 		.ascii	"Ram\000"
 13621 0004 00       		.space	1
 13622 0005 4C696200 		.ascii	"Lib\000"
 13623 0009 00       		.space	1
 13624 000a 42757000 		.ascii	"Bup\000"
 13625 000e 00       		.space	1
 13626 000f 526F6D00 		.ascii	"Rom\000"
 13627 0013 00       		.space	1
 13628              		.section	.rodata.libname_text,"a"
 13629              		.align	2
 13630              		.set	.LANCHOR23,. + 0
 13633              	libname_text:
 13634 0000 20522061 		.ascii	" R a m \000"
 13634      206D2000 
 13635 0008 0000     		.space	2
 13636 000a 204C2069 		.ascii	" L i b \000"
 13636      20622000 
 13637 0012 0000     		.space	2
 13638 0014 20422075 		.ascii	" B u p \000"
 13638      20702000 
 13639 001c 0000     		.space	2
 13640 001e 2052206F 		.ascii	" R o m \000"
 13640      206D2000 
 13641 0026 0000     		.space	2
 13642              		.section	.rodata.shift_chars.8782,"a"
 13643              		.align	2
 13644              		.set	.LANCHOR15,. + 0
 13647              	shift_chars.8782:
 13648 0000 20111213 		.ascii	" \021\022\023"
 13649              		.section	.rodata.small_dots.8983,"a"
 13650              		.align	2
 13651              		.set	.LANCHOR14,. + 0
 13654              	small_dots.8983:
 13655 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13655      07E12C06 
 13655      07E12C06 
 13655      06
 13656              		.section	.rodata.small_minus.8982,"a"
 13657              		.align	2
 13658              		.set	.LANCHOR13,. + 0
 13661              	small_minus.8982:
 13662 0000 07C22D06 		.ascii	"\007\302-\006"
 13663              		.text
 13664              	.Letext0:
 13665              		.file 2 "src/decNumber/decContext.h"
 13666              		.file 3 "src/decNumber/decNumber.h"
 13667              		.file 4 "src/decNumber/decimal64.h"
 13668              		.file 5 "src/decNumber/decimal128.h"
 13669              		.file 6 "src/xeq.h"
 13670              		.file 7 "src/data.h"
 13671              		.file 8 "src/storage.h"
 13672              		.file 9 "src/display.h"
 13673              		.file 10 "src/consts.h"
 13674              		.file 11 "src/stats.h"
 13675              		.file 12 "src/revision.h"
 13676              		.file 13 "src/printer.h"
 13677              		.file 14 "src/charset7.h"
ARM GAS  /tmp/ccwSk7O0.s 			page 380


 13678              		.file 15 "src/lcd.h"
 13679              		.file 16 "src/decn.h"
 13680              		.file 17 "src/alpha.h"
 13681              		.file 18 "src/int.h"
ARM GAS  /tmp/ccwSk7O0.s 			page 381


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccwSk7O0.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccwSk7O0.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccwSk7O0.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccwSk7O0.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccwSk7O0.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccwSk7O0.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccwSk7O0.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccwSk7O0.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccwSk7O0.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccwSk7O0.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccwSk7O0.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccwSk7O0.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccwSk7O0.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccwSk7O0.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccwSk7O0.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccwSk7O0.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccwSk7O0.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccwSk7O0.s:1155   .text.set_exp:0000000000000000 $t
     /tmp/ccwSk7O0.s:1162   .text.set_exp:0000000000000000 set_exp
     /tmp/ccwSk7O0.s:1467   .text.set_exp:0000000000000118 $d
     /tmp/ccwSk7O0.s:1474   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccwSk7O0.s:1481   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccwSk7O0.s:1549   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccwSk7O0.s:1555   .text.set_decimal:0000000000000000 $t
     /tmp/ccwSk7O0.s:1562   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccwSk7O0.s:1658   .text.set_decimal:000000000000004c $d
     /tmp/ccwSk7O0.s:1666   .text.set_digits_string:0000000000000000 $t
     /tmp/ccwSk7O0.s:1673   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccwSk7O0.s:1767   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccwSk7O0.s:1771   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccwSk7O0.s:1778   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccwSk7O0.s:1925   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccwSk7O0.s:1937   .text.set_x_hms:0000000000000000 $t
     /tmp/ccwSk7O0.s:1944   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccwSk7O0.s:2445   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccwSk7O0.s:2455   .text.set_x_fract:0000000000000000 $t
     /tmp/ccwSk7O0.s:2462   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccwSk7O0.s:2898   .text.set_x_fract:0000000000000198 $d
     /tmp/ccwSk7O0.s:2913   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccwSk7O0.s:2914   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccwSk7O0.s:2917   .text.carry_overflow:0000000000000000 $t
     /tmp/ccwSk7O0.s:2924   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccwSk7O0.s:3061   .text.carry_overflow:0000000000000070 $d
     /tmp/ccwSk7O0.s:3071   .text.set_int_x:0000000000000000 $t
     /tmp/ccwSk7O0.s:3078   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccwSk7O0.s:3836   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.379:0000000000000000 CSWTCH.381
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccwSk7O0.s:3848   .text.set_int_x:0000000000000360 $t
     /tmp/ccwSk7O0.s:3955   .text.set_int_x:00000000000003c0 $d
     /tmp/ccwSk7O0.s:3962   .text.getdig:0000000000000000 $t
ARM GAS  /tmp/ccwSk7O0.s 			page 382


     /tmp/ccwSk7O0.s:3970   .text.getdig:0000000000000000 getdig
     /tmp/ccwSk7O0.s:3990   .text.getdig:0000000000000008 $d
     /tmp/ccwSk7O0.s:3995   .text.dot:0000000000000000 $t
     /tmp/ccwSk7O0.s:4003   .text.dot:0000000000000000 dot
     /tmp/ccwSk7O0.s:4026   .text.std_round_fix:0000000000000000 $t
     /tmp/ccwSk7O0.s:4034   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccwSk7O0.s:4191   .text.std_round_fix:0000000000000078 $d
     /tmp/ccwSk7O0.s:4196   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccwSk7O0.s:4204   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccwSk7O0.s:4303   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccwSk7O0.s:4309   .text.set_annunciators:0000000000000000 $t
     /tmp/ccwSk7O0.s:4316   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccwSk7O0.s:4662   .text.set_annunciators:00000000000000dc $d
     /tmp/ccwSk7O0.s:4673   .text.pixel_length:0000000000000000 $t
     /tmp/ccwSk7O0.s:4681   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccwSk7O0.s:4772   .text.set_status:0000000000000000 $t
     /tmp/ccwSk7O0.s:4779   .text.set_status:0000000000000000 set_status
     /tmp/ccwSk7O0.s:4852   .text.set_status:0000000000000038 $d
     /tmp/ccwSk7O0.s:4857   .text.set_x_dn:0000000000000000 $t
     /tmp/ccwSk7O0.s:4865   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccwSk7O0.s:5653   .text.set_x_dn:0000000000000358 $d
     /tmp/ccwSk7O0.s:5660   .text.set_x_dn:0000000000000368 $t
     /tmp/ccwSk7O0.s:5813   .text.set_x_dn:0000000000000414 $d
     /tmp/ccwSk7O0.s:5819   .text.set_x_dn:000000000000041e $t
     /tmp/ccwSk7O0.s:5845   .text.set_x_dn:000000000000044a $d
     /tmp/ccwSk7O0.s:5851   .text.set_x_dn:0000000000000454 $t
     /tmp/ccwSk7O0.s:6441   .text.set_x_dn:00000000000006e0 $d
     /tmp/ccwSk7O0.s:6457   .text.set_x_dn:00000000000006fc $t
     /tmp/ccwSk7O0.s:7174   .text.set_x_dn:00000000000009d8 $d
     /tmp/ccwSk7O0.s:7183   .text.set_x:0000000000000000 $t
     /tmp/ccwSk7O0.s:7190   .text.set_x:0000000000000000 set_x
     /tmp/ccwSk7O0.s:7258   .text.format_reg:0000000000000000 $t
     /tmp/ccwSk7O0.s:7266   .text.format_reg:0000000000000000 format_reg
     /tmp/ccwSk7O0.s:7385   .text.format_reg:0000000000000064 $d
     /tmp/ccwSk7O0.s:7391   .text.set_status_right:0000000000000000 $t
     /tmp/ccwSk7O0.s:7398   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccwSk7O0.s:7542   .text.set_status_right:000000000000006c $d
     /tmp/ccwSk7O0.s:7547   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccwSk7O0.s:7554   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccwSk7O0.s:7679   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccwSk7O0.s:7684   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccwSk7O0.s:7742   .text.annunciators:0000000000000000 $t
     /tmp/ccwSk7O0.s:7749   .text.annunciators:0000000000000000 annunciators
     /tmp/ccwSk7O0.s:8233   .text.annunciators:0000000000000278 $d
     /tmp/ccwSk7O0.s:8254   .text.annunciators:00000000000002b0 $t
     /tmp/ccwSk7O0.s:8962   .text.annunciators:00000000000005b8 $d
     /tmp/ccwSk7O0.s:8984   .text.annunciators:00000000000005f8 $t
     /tmp/ccwSk7O0.s:9009   .text.annunciators:000000000000060c $d
     /tmp/ccwSk7O0.s:9016   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccwSk7O0.s:9083   .text.display:0000000000000000 $t
     /tmp/ccwSk7O0.s:9091   .text.display:0000000000000000 display
     /tmp/ccwSk7O0.s:9774   .text.display:0000000000000314 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccwSk7O0.s:9793   .text.display:0000000000000354 $t
ARM GAS  /tmp/ccwSk7O0.s 			page 383


     /tmp/ccwSk7O0.s:10537  .text.display:0000000000000674 $d
     /tmp/ccwSk7O0.s:10562  .text.display:00000000000006c4 $t
     /tmp/ccwSk7O0.s:11508  .text.display:0000000000000a44 $d
     /tmp/ccwSk7O0.s:11523  .text.display:0000000000000a74 $t
     /tmp/ccwSk7O0.s:12247  .text.display:0000000000000d4c $d
     /tmp/ccwSk7O0.s:12274  .text.display:0000000000000d84 $t
     /tmp/ccwSk7O0.s:12603  .text.display:0000000000000edc $d
     /tmp/ccwSk7O0.s:12618  .text.frozen_display:0000000000000000 $t
     /tmp/ccwSk7O0.s:12626  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccwSk7O0.s:12656  .text.frozen_display:000000000000001c $d
     /tmp/ccwSk7O0.s:12661  .text.message:0000000000000000 $t
     /tmp/ccwSk7O0.s:12669  .text.message:0000000000000000 message
     /tmp/ccwSk7O0.s:12798  .text.message:0000000000000060 $d
     /tmp/ccwSk7O0.s:12806  .text.error_message:0000000000000000 $t
     /tmp/ccwSk7O0.s:12814  .text.error_message:0000000000000000 error_message
     /tmp/ccwSk7O0.s:13089  .text.error_message:00000000000000dc $d
     /tmp/ccwSk7O0.s:13102  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccwSk7O0.s:13110  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccwSk7O0.s:13232  .text.stopwatch_message:0000000000000058 $d
     /tmp/ccwSk7O0.s:13238  .rodata.str1.4:0000000000000000 $d
     /tmp/ccwSk7O0.s:13413  .rodata.CSWTCH.379:0000000000000000 CSWTCH.379
     /tmp/ccwSk7O0.s:13432  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccwSk7O0.s:13406  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccwSk7O0.s:13523  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccwSk7O0.s:13307  .rodata:0000000000000000 $d
     /tmp/ccwSk7O0.s:13393  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccwSk7O0.s:13394  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccwSk7O0.s:13399  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccwSk7O0.s:13400  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccwSk7O0.s:13402  .bss.no_status_top:0000000000000000 $d
     /tmp/ccwSk7O0.s:13409  .rodata.CSWTCH.379:0000000000000000 $d
     /tmp/ccwSk7O0.s:13419  .rodata.CSWTCH.406:0000000000000000 $d
     /tmp/ccwSk7O0.s:13423  .rodata.CSWTCH.406:0000000000000000 CSWTCH.406
     /tmp/ccwSk7O0.s:13428  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccwSk7O0.s:13435  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccwSk7O0.s:13439  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccwSk7O0.s:13442  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccwSk7O0.s:13446  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccwSk7O0.s:13449  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccwSk7O0.s:13453  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccwSk7O0.s:13456  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccwSk7O0.s:13460  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccwSk7O0.s:13463  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccwSk7O0.s:13467  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccwSk7O0.s:13470  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccwSk7O0.s:13474  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccwSk7O0.s:13477  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccwSk7O0.s:13481  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccwSk7O0.s:13484  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccwSk7O0.s:13488  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccwSk7O0.s:13491  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccwSk7O0.s:13495  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccwSk7O0.s:13498  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccwSk7O0.s:13502  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccwSk7O0.s:13505  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccwSk7O0.s:13509  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
ARM GAS  /tmp/ccwSk7O0.s 			page 384


     /tmp/ccwSk7O0.s:13512  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccwSk7O0.s:13516  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccwSk7O0.s:13519  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccwSk7O0.s:13526  .rodata.digtbl:0000000000000000 $d
     /tmp/ccwSk7O0.s:13530  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccwSk7O0.s:13539  .rodata.error_table.8674:0000000000000000 $d
     /tmp/ccwSk7O0.s:13543  .rodata.error_table.8674:0000000000000000 error_table.8674
     /tmp/ccwSk7O0.s:13572  .rodata.error_table_text.8675:0000000000000000 $d
     /tmp/ccwSk7O0.s:13576  .rodata.error_table_text.8675:0000000000000000 error_table_text.8675
     /tmp/ccwSk7O0.s:13605  .rodata.libname:0000000000000000 $d
     /tmp/ccwSk7O0.s:13609  .rodata.libname:0000000000000000 libname
     /tmp/ccwSk7O0.s:13615  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccwSk7O0.s:13619  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccwSk7O0.s:13629  .rodata.libname_text:0000000000000000 $d
     /tmp/ccwSk7O0.s:13633  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccwSk7O0.s:13643  .rodata.shift_chars.8782:0000000000000000 $d
     /tmp/ccwSk7O0.s:13647  .rodata.shift_chars.8782:0000000000000000 shift_chars.8782
     /tmp/ccwSk7O0.s:13650  .rodata.small_dots.8983:0000000000000000 $d
     /tmp/ccwSk7O0.s:13654  .rodata.small_dots.8983:0000000000000000 small_dots.8983
     /tmp/ccwSk7O0.s:13657  .rodata.small_minus.8982:0000000000000000 $d
     /tmp/ccwSk7O0.s:13661  .rodata.small_minus.8982:0000000000000000 small_minus.8982

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
ARM GAS  /tmp/ccwSk7O0.s 			page 385


const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
replace_char
ShowRegister
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
argcmds
WasDataEntry
ProgFree
scopy_char
current_catalogue
catcmd
get_const
getprog
prt
op_r2p
multicmds
global_regs
find_label_from
local_regs
slen
free_mem
free_flash
ARM GAS  /tmp/ccwSk7O0.s 			page 386


findmultilbl
SizeStatRegs
alpha_rcl_s
copyreg
sigma_val
getX
packed_from_number
set_NaN
do_conv
StackBase
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing

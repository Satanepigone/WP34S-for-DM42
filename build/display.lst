ARM GAS  /tmp/ccTlkAzC.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifndef DM42
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #include "serial.h"
ARM GAS  /tmp/ccTlkAzC.s 			page 2


  31:src/display.c **** #endif
  32:src/display.c **** 
  33:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  34:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  35:src/display.c **** 
  36:src/display.c **** static void set_status_sized(const char *, int);
  37:src/display.c **** static void set_status(const char *);
  38:src/display.c **** static void set_status_right(const char *);
  39:src/display.c **** static void set_status_graphic(const unsigned char *);
  40:src/display.c **** 
  41:src/display.c **** const char *DispMsg;	   // What to display in message area
  42:src/display.c **** short int DispPlot;
  43:src/display.c **** #ifndef REALBUILD
  44:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  45:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  46:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  47:src/display.c **** char forceDispPlot;
  48:src/display.c **** #endif
  49:src/display.c **** 
  50:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  51:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  52:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  53:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  54:src/display.c **** 
  55:src/display.c **** /* Message strings
  56:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  57:src/display.c ****  * are for the upper dot matrix line.
  58:src/display.c ****  */
  59:src/display.c **** static const char S_SURE[] = "Sure?";
  60:src/display.c **** 
  61:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  62:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  63:src/display.c **** #ifndef REALBUILD
  64:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  65:src/display.c **** #endif
  66:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  67:src/display.c **** #ifndef REALBUILD
  68:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  69:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  70:src/display.c **** #endif
  71:src/display.c **** 
  72:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  73:src/display.c **** #ifndef REALBUILD
  74:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  75:src/display.c **** #endif
  76:src/display.c **** 
  77:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  78:src/display.c **** static const char S7_fract_LT[] = " Lt";
  79:src/display.c **** static const char S7_fract_GT[] = " Gt";
  80:src/display.c **** 
  81:src/display.c **** static const char libname[][5] = {
  82:src/display.c **** 	"rAMm", "Lib ", "Bup ",
  83:src/display.c **** #ifndef REALBUILD
  84:src/display.c **** 	"roMm"
  85:src/display.c **** #endif
  86:src/display.c **** };
  87:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 3


  88:src/display.c **** #ifndef REALBUILD
  89:src/display.c **** static const char libname_text[][10] = {
  90:src/display.c **** 	" R a m ", " L i b ", " B u p ",	" R o m "
  91:src/display.c **** };
  92:src/display.c **** static const char libname_shorttext[][5] = {
  93:src/display.c **** 	"Ram", "Lib", "Bup", "Rom"
  94:src/display.c **** };
  95:src/display.c **** #endif
  96:src/display.c **** 
  97:src/display.c **** 
  98:src/display.c **** /* Set the separator and decimal mode globals
  99:src/display.c ****  */
 100:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 100 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 101:src/display.c **** 	// Separators used by various modes
 102:src/display.c **** 	if (UState.fraccomma) {
  34              		.loc 1 102 2 view .LVU1
  35              		.loc 1 102 6 is_stmt 0 view .LVU2
  36 0000 114A     		ldr	r2, .L14
 103:src/display.c **** 		SeparatorMode = SEP_DOT;
  37              		.loc 1 103 17 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 102:src/display.c **** 		SeparatorMode = SEP_DOT;
  39              		.loc 1 102 6 view .LVU4
  40 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 102:src/display.c **** 		SeparatorMode = SEP_DOT;
  41              		.loc 1 102 5 view .LVU5
  42 0008 13F02000 		ands	r0, r3, #32
 100:src/display.c **** 	// Separators used by various modes
  43              		.loc 1 100 47 view .LVU6
  44 000c 30B4     		push	{r4, r5}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 4, -8
  47              		.cfi_offset 5, -4
 102:src/display.c **** 		SeparatorMode = SEP_DOT;
  48              		.loc 1 102 5 view .LVU7
  49 000e 0ED0     		beq	.L2
  50              		.loc 1 103 3 is_stmt 1 view .LVU8
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  51              		.loc 1 104 15 is_stmt 0 view .LVU9
  52 0010 0F48     		ldr	r0, .L14+8
 105:src/display.c **** 	}
 106:src/display.c **** 	else {
 107:src/display.c **** 		SeparatorMode = SEP_COMMA;
 108:src/display.c **** 		DecimalMode = DECIMAL_DOT;
 109:src/display.c **** 	}
 110:src/display.c **** 	if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  53              		.loc 1 110 7 view .LVU10
  54 0012 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  55              		.loc 1 104 15 view .LVU11
  56 0016 0124     		movs	r4, #1
 103:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
ARM GAS  /tmp/ccTlkAzC.s 			page 4


  57              		.loc 1 103 17 view .LVU12
  58 0018 0225     		movs	r5, #2
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  59              		.loc 1 104 15 view .LVU13
  60 001a 0470     		strb	r4, [r0]
  61              		.loc 1 110 5 view .LVU14
  62 001c D007     		lsls	r0, r2, #31
 103:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  63              		.loc 1 103 17 view .LVU15
  64 001e 0D70     		strb	r5, [r1]
 104:src/display.c **** 		DecimalMode = DECIMAL_COMMA;
  65              		.loc 1 104 3 is_stmt 1 view .LVU16
  66              		.loc 1 110 2 view .LVU17
  67              		.loc 1 110 5 is_stmt 0 view .LVU18
  68 0020 0DD4     		bmi	.L13
  69              	.L4:
  70              		.loc 1 110 62 discriminator 4 view .LVU19
  71 0022 5B06     		lsls	r3, r3, #25
  72 0024 01D5     		bpl	.L1
  73              	.L5:
 111:src/display.c **** 		SeparatorMode = SEP_NONE;
  74              		.loc 1 111 3 is_stmt 1 view .LVU20
  75              		.loc 1 111 17 is_stmt 0 view .LVU21
  76 0026 0023     		movs	r3, #0
  77 0028 0B70     		strb	r3, [r1]
  78              	.L1:
 112:src/display.c **** }
  79              		.loc 1 112 1 view .LVU22
  80 002a 30BC     		pop	{r4, r5}
  81              		.cfi_remember_state
  82              		.cfi_restore 5
  83              		.cfi_restore 4
  84              		.cfi_def_cfa_offset 0
  85 002c 7047     		bx	lr
  86              	.L2:
  87              		.cfi_restore_state
 107:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  88              		.loc 1 107 3 is_stmt 1 view .LVU23
 108:src/display.c **** 	}
  89              		.loc 1 108 15 is_stmt 0 view .LVU24
  90 002e 084C     		ldr	r4, .L14+8
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
  91              		.loc 1 110 7 view .LVU25
  92 0030 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 108:src/display.c **** 	}
  93              		.loc 1 108 15 view .LVU26
  94 0034 2070     		strb	r0, [r4]
 107:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  95              		.loc 1 107 17 view .LVU27
  96 0036 0125     		movs	r5, #1
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
  97              		.loc 1 110 5 view .LVU28
  98 0038 D007     		lsls	r0, r2, #31
 107:src/display.c **** 		DecimalMode = DECIMAL_DOT;
  99              		.loc 1 107 17 view .LVU29
 100 003a 0D70     		strb	r5, [r1]
 108:src/display.c **** 	}
ARM GAS  /tmp/ccTlkAzC.s 			page 5


 101              		.loc 1 108 3 is_stmt 1 view .LVU30
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
 102              		.loc 1 110 2 view .LVU31
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
 103              		.loc 1 110 5 is_stmt 0 view .LVU32
 104 003c F1D5     		bpl	.L4
 105              	.L13:
 110:src/display.c **** 		SeparatorMode = SEP_NONE;
 106              		.loc 1 110 19 discriminator 1 view .LVU33
 107 003e 1A06     		lsls	r2, r3, #24
 108 0040 F1D4     		bmi	.L5
 109              		.loc 1 112 1 view .LVU34
 110 0042 30BC     		pop	{r4, r5}
 111              		.cfi_restore 5
 112              		.cfi_restore 4
 113              		.cfi_def_cfa_offset 0
 114 0044 7047     		bx	lr
 115              	.L15:
 116 0046 00BF     		.align	2
 117              	.L14:
 118 0048 00000000 		.word	PersistentRam
 119 004c 00000000 		.word	.LANCHOR0
 120 0050 00000000 		.word	.LANCHOR1
 121              		.cfi_endproc
 122              	.LFE0:
 124              		.section	.text.set_dig,"ax",%progbits
 125              		.align	1
 126              		.p2align 2,,3
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	set_dig:
 133              	.LVL0:
 134              	.LFB10:
 113:src/display.c **** 
 114:src/display.c **** 
 115:src/display.c **** /* Table of error messages.
 116:src/display.c ****  * These consist of a double string.  The first is displayed in the
 117:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 118:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 119:src/display.c ****  */
 120:src/display.c **** void error_message(const unsigned int e) 
 121:src/display.c **** {
 122:src/display.c **** #define MSG1(top) top "\0"
 123:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 124:src/display.c **** 
 125:src/display.c **** 	// NB: this MUST be in the same order as the error #defines in errors.h
 126:src/display.c **** 	static const char *const error_table[] = 
 127:src/display.c **** 	{
 128:src/display.c **** 		// manually get the order correct!
 129:src/display.c **** 		MSG2("Running", "ProGraMm"),
 130:src/display.c **** 		MSG1("Domain"),
 131:src/display.c **** 		MSG2("Bad time", "or dAtE"),
 132:src/display.c **** 		MSG2("Undefined", "Op-COdE"),
 133:src/display.c **** 		MSG1("+\237"),
 134:src/display.c **** 		MSG1("-\237"),
ARM GAS  /tmp/ccTlkAzC.s 			page 6


 135:src/display.c **** 		MSG2("No such", "LAbEL"),
 136:src/display.c **** 		MSG2("Illegal", "OPErAtion"),
 137:src/display.c **** 		MSG1("Out of range"),
 138:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 139:src/display.c **** 		MSG2("Bad digit", "1"),
 140:src/display.c **** 		MSG2("Too long", "1"),
 141:src/display.c **** #else
 142:src/display.c **** 		MSG1("Bad digit"),
 143:src/display.c **** 		MSG1("Too long"),
 144:src/display.c **** #endif
 145:src/display.c **** 		MSG2("RAM is", "FuLL"),
 146:src/display.c **** 		MSG2("Stack", "CLASH"),
 147:src/display.c **** 		MSG1("Bad mode"),
 148:src/display.c **** 		MSG2("Word\006\006\006size", "too SMmALL"),
 149:src/display.c **** 		MSG2("Too few", "dAtA PointS"),
 150:src/display.c **** 		MSG2("Invalid", "ParaMmEtEr"),
 151:src/display.c **** 		MSG1("I/O"),
 152:src/display.c **** 		MSG2("Invalid", "dAtA"),
 153:src/display.c **** 		MSG2("Write", "ProtEctEd"),
 154:src/display.c **** 		MSG2("No root", "Found"),
 155:src/display.c **** 		MSG2("Matrix", "MmISMmAtCH"),
 156:src/display.c **** 		MSG1("Singular"),
 157:src/display.c **** 		MSG2("Flash is", "FuLL"),
 158:src/display.c **** 		MSG2("No crystal", "InStaLLEd"),
 159:src/display.c **** #ifndef SHIFT_EXPONENT
 160:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 161:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 162:src/display.c **** 		MSG2("Too\007\304 small", "1"),
 163:src/display.c **** #     else
 164:src/display.c **** 		MSG2("Too small", "1"),
 165:src/display.c **** #     endif
 166:src/display.c **** 		MSG2("Too big", "1"),
 167:src/display.c **** #  else
 168:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 169:src/display.c **** 		MSG1("Too\007\304 small"),
 170:src/display.c **** #     else
 171:src/display.c **** 		MSG1("Too small"),
 172:src/display.c **** #     endif
 173:src/display.c **** 		MSG1("Too big"),
 174:src/display.c **** #  endif
 175:src/display.c **** #endif
 176:src/display.c **** 		MSG2("\004 \035", "X"),		// Integral ~
 177:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 178:src/display.c **** 		MSG2("Interrupted", "X"),
 179:src/display.c **** #endif
 180:src/display.c **** 	};
 181:src/display.c **** #undef MSG1
 182:src/display.c **** #undef MSG2
 183:src/display.c **** #ifndef REALBUILD
 184:src/display.c **** 	static const char *const error_table_text[] =
 185:src/display.c **** 	{
 186:src/display.c **** 		" P r o g r a m ",
 187:src/display.c **** 		"",
 188:src/display.c **** 		" o r   d a t e ",
 189:src/display.c **** 		" O p - c o d e ",
 190:src/display.c **** 		"",
 191:src/display.c **** 		"",
ARM GAS  /tmp/ccTlkAzC.s 			page 7


 192:src/display.c **** 		" L a b e l ",
 193:src/display.c **** 		" O p e r a t i o n ",
 194:src/display.c **** 		"",
 195:src/display.c **** 		"",
 196:src/display.c **** 		"",
 197:src/display.c **** 		" F u l l ",
 198:src/display.c **** 		" C l a s h ",
 199:src/display.c **** 		"",
 200:src/display.c **** 		" T o o   s m a l l ",
 201:src/display.c **** 		" D a t a   p o i n t s ",
 202:src/display.c **** 		" P a r a m e t e r ",
 203:src/display.c **** 		"",
 204:src/display.c **** 		" D a t a ",
 205:src/display.c **** 		" P r o t e c t e d ",
 206:src/display.c **** 		" F o u n d ",
 207:src/display.c **** 		" M i s m a t c h ",
 208:src/display.c **** 		"",
 209:src/display.c **** 		" F u l l ",
 210:src/display.c **** 		" I n s t a l l e d ",
 211:src/display.c **** #ifndef SHIFT_EXPONENT
 212:src/display.c **** 		"",
 213:src/display.c **** 		"",
 214:src/display.c **** #endif
 215:src/display.c **** 		"",
 216:src/display.c **** 	};
 217:src/display.c **** #endif
 218:src/display.c **** 
 219:src/display.c **** 	if (e != ERR_NONE || Running) {
 220:src/display.c **** 		const char *p = error_table[e];
 221:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 222:src/display.c **** 		if (*q == '\0')
 223:src/display.c **** 			q = S7_ERROR;
 224:src/display.c **** 		if (*q == 'X') {
 225:src/display.c **** 			DispMsg = p;
 226:src/display.c **** 			frozen_display();
 227:src/display.c **** 		}
 228:src/display.c **** 		else {
 229:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 230:src/display.c **** 			if (*q == '1')
 231:src/display.c **** 				q = CNULL;
 232:src/display.c **** #endif
 233:src/display.c **** 			message(p, q);
 234:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 235:src/display.c **** #ifndef REALBUILD
 236:src/display.c **** 			scopy(LastDisplayedNumber, error_table_text[e]);
 237:src/display.c **** #endif
 238:src/display.c **** 		}
 239:src/display.c **** #ifdef INFRARED
 240:src/display.c **** 		if (Tracing) {
 241:src/display.c **** 			if (*q == 'X')
 242:src/display.c **** 				print_reg(regX_idx, p, 0);
 243:src/display.c **** 			else {
 244:src/display.c **** 				print_tab(0);
 245:src/display.c **** 				print_line(p, 0);
 246:src/display.c **** 				print(' ');
 247:src/display.c **** 				while (*q != '\0') {
 248:src/display.c **** 					int c = *q;
ARM GAS  /tmp/ccTlkAzC.s 			page 8


 249:src/display.c **** 					if (c >= 'A')
 250:src/display.c **** 						c |= 0x60; // ASCII lower case
 251:src/display.c **** 					print(c);
 252:src/display.c **** 					if (c == 'm' /* || c == 'w' */)
 253:src/display.c **** 						++q;
 254:src/display.c **** 					++q;
 255:src/display.c **** 				}
 256:src/display.c **** 				print_advance( 0 );
 257:src/display.c **** 			}
 258:src/display.c **** 		}
 259:src/display.c **** #endif
 260:src/display.c **** 	}
 261:src/display.c **** }
 262:src/display.c **** 
 263:src/display.c **** 
 264:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 265:src/display.c ****  * display.
 266:src/display.c ****  */
 267:src/display.c **** #define D_TOP 64
 268:src/display.c **** #define D_TL 32
 269:src/display.c **** #define D_TR 8
 270:src/display.c **** #define D_MIDDLE 16
 271:src/display.c **** #define D_BL 4
 272:src/display.c **** #define D_BR 1
 273:src/display.c **** #define D_BOTTOM 2
 274:src/display.c **** 
 275:src/display.c **** #include "charset7.h"
 276:src/display.c **** 
 277:src/display.c **** #ifndef REALBUILD
 278:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 279:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 280:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 281:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 282:src/display.c **** 
 283:src/display.c **** static void set_mant_sign_dot()
 284:src/display.c **** {
 285:src/display.c **** 	LastDisplayedNumber[0]='-';
 286:src/display.c **** 	set_dot(MANT_SIGN);
 287:src/display.c **** }
 288:src/display.c **** 
 289:src/display.c **** static void clr_mant_sign_dot()
 290:src/display.c **** {
 291:src/display.c **** 	LastDisplayedNumber[0]=' ';
 292:src/display.c **** 	clr_dot(MANT_SIGN);
 293:src/display.c **** }
 294:src/display.c **** 
 295:src/display.c **** static void set_exp_sign_dot()
 296:src/display.c **** {
 297:src/display.c **** 	LastDisplayedExponent[0]='-';
 298:src/display.c **** 	set_dot(EXP_SIGN);
 299:src/display.c **** }
 300:src/display.c **** 
 301:src/display.c **** static void clr_exp_sign_dot()
 302:src/display.c **** {
 303:src/display.c **** 	LastDisplayedExponent[0]=' ';
 304:src/display.c **** 	clr_dot(EXP_SIGN);
 305:src/display.c **** }
ARM GAS  /tmp/ccTlkAzC.s 			page 9


 306:src/display.c **** 
 307:src/display.c **** #else
 308:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 309:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 310:src/display.c **** 
 311:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 312:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 313:src/display.c **** 
 314:src/display.c **** #endif
 315:src/display.c **** 
 316:src/display.c **** #ifndef REALBUILD
 317:src/display.c **** int getdig(int ch)
 318:src/display.c **** #else
 319:src/display.c **** static int getdig(int ch)
 320:src/display.c **** #endif
 321:src/display.c **** {
 322:src/display.c **** 	// perform index lookup
 323:src/display.c **** 	return digtbl[ch&0xff];
 324:src/display.c **** }
 325:src/display.c **** 
 326:src/display.c **** void dot(int n, int on) {
 327:src/display.c **** 	if (on)	set_dot(n);
 328:src/display.c **** 	else	clr_dot(n);
 329:src/display.c **** }
 330:src/display.c **** 
 331:src/display.c **** 
 332:src/display.c **** /* Set the decimal point *after* the indicated digit
 333:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 334:src/display.c ****  * of decimal.
 335:src/display.c ****  */
 336:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 337:src/display.c **** 	if (res) {
 338:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 339:src/display.c **** 	} else {
 340:src/display.c **** 		set_dot(posn+7);
 341:src/display.c **** 		if (decimal != DECIMAL_DOT)
 342:src/display.c **** 			set_dot(posn+8);
 343:src/display.c **** #ifndef REALBUILD
 344:src/display.c **** 	LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 345:src/display.c **** #endif
 346:src/display.c **** 	}
 347:src/display.c **** 	return res;
 348:src/display.c **** }
 349:src/display.c **** 
 350:src/display.c **** /* Set the digit group separator *before* the specified digit.
 351:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 352:src/display.c ****  * sep argument.
 353:src/display.c ****  */
 354:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 355:src/display.c **** 	if (sep == SEP_NONE)
 356:src/display.c **** 		return res;
 357:src/display.c **** 	if (res) {
 358:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 359:src/display.c **** 		else *res++ = '.';
 360:src/display.c **** 	} else {
 361:src/display.c **** 		posn -= SEGS_PER_DIGIT;
 362:src/display.c **** 		set_dot(posn+7);
ARM GAS  /tmp/ccTlkAzC.s 			page 10


 363:src/display.c **** 		if (sep == SEP_COMMA)
 364:src/display.c **** 			set_dot(posn+8);
 365:src/display.c **** #ifndef REALBUILD
 366:src/display.c **** 		LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 367:src/display.c **** #endif
 368:src/display.c **** 	}
 369:src/display.c **** 	return res;
 370:src/display.c **** }
 371:src/display.c **** 
 372:src/display.c **** /* Set a digit in positions [base, base+6] */
 373:src/display.c **** static void set_dig(int base, int ch)
 374:src/display.c **** {
 135              		.loc 1 374 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 375:src/display.c **** 	int i;
 139              		.loc 1 375 2 view .LVU36
 376:src/display.c **** 	int c = getdig(ch);
 140              		.loc 1 376 2 view .LVU37
 141              	.LBB128:
 142              	.LBI128:
 317:src/display.c **** #else
 143              		.loc 1 317 5 view .LVU38
 144              	.LBB129:
 323:src/display.c **** }
 145              		.loc 1 323 2 view .LVU39
 323:src/display.c **** }
 146              		.loc 1 323 15 is_stmt 0 view .LVU40
 147 0000 184A     		ldr	r2, .L27
 323:src/display.c **** }
 148              		.loc 1 323 18 view .LVU41
 149 0002 CBB2     		uxtb	r3, r1
 150              	.LBE129:
 151              	.LBE128:
 377:src/display.c **** #ifndef REALBUILD
 378:src/display.c **** 	if(base<SEGS_EXP_BASE)
 152              		.loc 1 378 4 view .LVU42
 153 0004 6B28     		cmp	r0, #107
 374:src/display.c **** 	int i;
 154              		.loc 1 374 1 view .LVU43
 155 0006 70B5     		push	{r4, r5, r6, lr}
 156              		.cfi_def_cfa_offset 16
 157              		.cfi_offset 4, -16
 158              		.cfi_offset 5, -12
 159              		.cfi_offset 6, -8
 160              		.cfi_offset 14, -4
 161              	.LBB131:
 162              	.LBB130:
 323:src/display.c **** }
 163              		.loc 1 323 15 view .LVU44
 164 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 165              	.LVL1:
 323:src/display.c **** }
 166              		.loc 1 323 15 view .LVU45
 167              	.LBE130:
 168              	.LBE131:
ARM GAS  /tmp/ccTlkAzC.s 			page 11


 169              		.loc 1 378 2 is_stmt 1 view .LVU46
 170              		.loc 1 378 4 is_stmt 0 view .LVU47
 171 000a 1EDC     		bgt	.L17
 379:src/display.c **** 		LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 172              		.loc 1 379 3 is_stmt 1 view .LVU48
 173              		.loc 1 379 28 is_stmt 0 view .LVU49
 174 000c 164C     		ldr	r4, .L27+4
 175              		.loc 1 379 37 view .LVU50
 176 000e 174B     		ldr	r3, .L27+8
 177              		.loc 1 379 28 view .LVU51
 178 0010 84FB0024 		smull	r2, r4, r4, r0
 179 0014 C217     		asrs	r2, r0, #31
 180 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 181              		.loc 1 379 37 view .LVU52
 182 001a 0029     		cmp	r1, #0
 183 001c 03EB4203 		add	r3, r3, r2, lsl #1
 184 0020 08BF     		it	eq
 185 0022 2021     		moveq	r1, #32
 186              	.LVL2:
 187              		.loc 1 379 37 view .LVU53
 188 0024 5970     		strb	r1, [r3, #1]
 189              	.L19:
 190 0026 851D     		adds	r5, r0, #6
 191 0028 0624     		movs	r4, #6
 192 002a 03E0     		b	.L22
 193              	.LVL3:
 194              	.L26:
 380:src/display.c **** 	else
 381:src/display.c **** 		LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 382:src/display.c **** #endif
 383:src/display.c **** 	for (i=6; i>=0; i--)
 384:src/display.c **** 	{
 385:src/display.c **** //		dot(base, c & (1 << i));
 386:src/display.c **** 		if (c & (1 << i))
 387:src/display.c **** 			set_dot(base);
 195              		.loc 1 387 4 view .LVU54
 196 002c FFF7FEFF 		bl	set_dot
 197              	.LVL4:
 388:src/display.c **** 		else
 389:src/display.c **** 			clr_dot(base);
 390:src/display.c **** 		base++;
 198              		.loc 1 390 3 is_stmt 1 view .LVU55
 383:src/display.c **** 	{
 199              		.loc 1 383 18 view .LVU56
 383:src/display.c **** 	{
 200              		.loc 1 383 2 is_stmt 0 view .LVU57
 201 0030 013C     		subs	r4, r4, #1
 202              	.LVL5:
 383:src/display.c **** 	{
 203              		.loc 1 383 2 view .LVU58
 204 0032 09D3     		bcc	.L25
 205              	.LVL6:
 206              	.L22:
 387:src/display.c **** 		else
 207              		.loc 1 387 4 is_stmt 1 view .LVU59
 389:src/display.c **** 		base++;
 208              		.loc 1 389 4 view .LVU60
ARM GAS  /tmp/ccTlkAzC.s 			page 12


 386:src/display.c **** 			set_dot(base);
 209              		.loc 1 386 7 is_stmt 0 view .LVU61
 210 0034 46FA04F3 		asr	r3, r6, r4
 386:src/display.c **** 			set_dot(base);
 211              		.loc 1 386 6 view .LVU62
 212 0038 DB07     		lsls	r3, r3, #31
 213 003a A5EB0400 		sub	r0, r5, r4
 214              	.LVL7:
 386:src/display.c **** 			set_dot(base);
 215              		.loc 1 386 3 is_stmt 1 view .LVU63
 386:src/display.c **** 			set_dot(base);
 216              		.loc 1 386 6 is_stmt 0 view .LVU64
 217 003e F5D4     		bmi	.L26
 389:src/display.c **** 		base++;
 218              		.loc 1 389 4 view .LVU65
 219 0040 FFF7FEFF 		bl	clr_dot
 220              	.LVL8:
 221              		.loc 1 390 3 is_stmt 1 view .LVU66
 383:src/display.c **** 	{
 222              		.loc 1 383 18 view .LVU67
 383:src/display.c **** 	{
 223              		.loc 1 383 2 is_stmt 0 view .LVU68
 224 0044 013C     		subs	r4, r4, #1
 225              	.LVL9:
 383:src/display.c **** 	{
 226              		.loc 1 383 2 view .LVU69
 227 0046 F5D2     		bcs	.L22
 228              	.LVL10:
 229              	.L25:
 391:src/display.c **** 	}
 392:src/display.c **** }
 230              		.loc 1 392 1 view .LVU70
 231 0048 70BD     		pop	{r4, r5, r6, pc}
 232              	.LVL11:
 233              	.L17:
 381:src/display.c **** #endif
 234              		.loc 1 381 3 is_stmt 1 view .LVU71
 381:src/display.c **** #endif
 235              		.loc 1 381 45 is_stmt 0 view .LVU72
 236 004a 094B     		ldr	r3, .L27+12
 381:src/display.c **** #endif
 237              		.loc 1 381 51 view .LVU73
 238 004c 094C     		ldr	r4, .L27+16
 381:src/display.c **** #endif
 239              		.loc 1 381 30 view .LVU74
 240 004e A0F16C02 		sub	r2, r0, #108
 381:src/display.c **** #endif
 241              		.loc 1 381 45 view .LVU75
 242 0052 A3FB0253 		umull	r5, r3, r3, r2
 243 0056 D21A     		subs	r2, r2, r3
 244 0058 03EB5203 		add	r3, r3, r2, lsr #1
 381:src/display.c **** #endif
 245              		.loc 1 381 51 view .LVU76
 246 005c 04EB9303 		add	r3, r4, r3, lsr #2
 247 0060 5970     		strb	r1, [r3, #1]
 248 0062 E0E7     		b	.L19
 249              	.L28:
ARM GAS  /tmp/ccTlkAzC.s 			page 13


 250              		.align	2
 251              	.L27:
 252 0064 00000000 		.word	.LANCHOR2
 253 0068 398EE338 		.word	954437177
 254 006c 00000000 		.word	LastDisplayedNumber
 255 0070 25499224 		.word	613566757
 256 0074 00000000 		.word	LastDisplayedExponent
 257              		.cfi_endproc
 258              	.LFE10:
 260              		.section	.text.hms_render,"ax",%progbits
 261              		.align	1
 262              		.p2align 2,,3
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu fpv4-sp-d16
 268              	hms_render:
 269              	.LVL12:
 270              	.LFB21:
 393:src/display.c **** 
 394:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 395:src/display.c **** 	if (res) *res++ = ch;
 396:src/display.c **** 	else	set_dig(base, ch);
 397:src/display.c **** 	return res;
 398:src/display.c **** }
 399:src/display.c **** 
 400:src/display.c **** 
 401:src/display.c **** static void set_digits_string(const char *msg, int j) {
 402:src/display.c **** 	for (; *msg != '\0'; msg++) {
 403:src/display.c **** 		if (*msg == '.' || *msg == ',')
 404:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 405:src/display.c **** 		else {
 406:src/display.c **** 			set_dig_s(j, *msg, CNULL);
 407:src/display.c **** 			j += SEGS_PER_DIGIT;
 408:src/display.c **** 		}
 409:src/display.c **** 	}
 410:src/display.c **** }
 411:src/display.c **** 
 412:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 413:src/display.c **** 	int i;
 414:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 415:src/display.c **** 
 416:src/display.c **** 	for (i=0; i<n && msg[i] != '\0'; i++)
 417:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 418:src/display.c **** }
 419:src/display.c **** 
 420:src/display.c **** /* Force the exponent display
 421:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 422:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 423:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 424:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 425:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 426:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 427:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 428:src/display.c ****  */
 429:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 430:src/display.c **** 	union {
ARM GAS  /tmp/ccTlkAzC.s 			page 14


 431:src/display.c **** 		char buf[4];
 432:src/display.c **** 		int i;
 433:src/display.c **** 	} u;
 434:src/display.c **** 	int negative;
 435:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 436:src/display.c **** 	int thousands;
 437:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 438:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
 439:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 440:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
 441:src/display.c **** #  else
 442:src/display.c **** 	const int show_large_exponent = 1;
 443:src/display.c **** #  endif
 444:src/display.c **** #else
 445:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 446:src/display.c **** 	int thousands;
 447:src/display.c **** #  endif
 448:src/display.c **** 	const int show_large_exponent = 0;
 449:src/display.c **** #endif
 450:src/display.c **** 
 451:src/display.c **** 	negative = flags & 2;
 452:src/display.c **** 	if (exp < 0) {
 453:src/display.c **** 		negative = 1;
 454:src/display.c **** 		exp = -exp;
 455:src/display.c **** 	}
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 457:src/display.c **** 	thousands = exp / 1000;
 458:src/display.c **** #endif
 459:src/display.c **** 	if (res) {
 460:src/display.c **** #ifdef INCLUDE_YREG_CODE
 461:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 462:src/display.c **** 		if (thousands != 0) {
 463:src/display.c **** #else
 464:src/display.c **** 		if (exp > 999) {
 465:src/display.c **** #endif
 466:src/display.c **** 			if (!negative) *res++ = ':'; // Separator for large +ve exponents
 467:src/display.c **** 			// No exponent separator for large -ve exponents
 468:src/display.c **** 		}
 469:src/display.c **** 		else *res++ = 'e'; // Normal separator
 470:src/display.c **** #else
 471:src/display.c **** 		*res++ = 'e';
 472:src/display.c **** #endif
 473:src/display.c **** 		if (negative) *res++ = '-';
 474:src/display.c **** 	}
 475:src/display.c **** 	else {
 476:src/display.c **** 		if (negative) SET_EXP_SIGN;
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c **** 		if (thousands != 0) {
 479:src/display.c **** #else
 480:src/display.c **** 		if (exp > 999) {
 481:src/display.c **** #endif
 482:src/display.c **** 			if (!show_large_exponent
 483:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 484:src/display.c **** 			                         && (flags & 8) == 0
 485:src/display.c **** #endif
 486:src/display.c **** 			                                            ) {
 487:src/display.c **** #ifdef REALBUILD
ARM GAS  /tmp/ccTlkAzC.s 			page 15


 488:src/display.c **** 				u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 489:src/display.c **** #else
 490:src/display.c **** 				scopy(u.buf, "HIG"); // More portable code
 491:src/display.c **** #endif
 492:src/display.c **** 				goto no_number;
 493:src/display.c **** 			}
 494:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 495:src/display.c **** 			else {
 496:src/display.c **** 				exp -= thousands * 1000;
 497:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 498:src/display.c **** 				if (flags & 16) {
 499:src/display.c **** 					// Cut off the last three digits of the mantissa.
 500:src/display.c **** 					int i;
 501:src/display.c **** 
 502:src/display.c **** 					for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 503:src/display.c **** 						// Clear digits and separators
 504:src/display.c **** 						clr_dot(i);
 505:src/display.c **** 					set_dig(9 * SEGS_PER_DIGIT, '>');
 506:src/display.c **** 				}
 507:src/display.c **** #  endif
 508:src/display.c **** 				if (negative) {
 509:src/display.c **** 					CLR_EXP_SIGN;
 510:src/display.c **** 					set_dig(10 * SEGS_PER_DIGIT, '-');
 511:src/display.c **** 				}
 512:src/display.c **** 				set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 513:src/display.c **** 				flags = 1;
 514:src/display.c **** 			}
 515:src/display.c **** #endif
 516:src/display.c **** 		}
 517:src/display.c **** 	}
 518:src/display.c **** #ifdef REALBUILD
 519:src/display.c **** 	u.i = 0; // Smaller ARM code
 520:src/display.c **** #else
 521:src/display.c **** 	xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 522:src/display.c **** #endif
 523:src/display.c **** 	if (flags & 5) {
 524:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 525:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 526:src/display.c **** 		if (flags & 4) { // Pad exponent with spaces instead of zeros
 527:src/display.c **** 			int i;
 528:src/display.c **** 
 529:src/display.c **** 			for (i = 0; i < 2; ++i) {
 530:src/display.c **** 				if (u.buf[i] == '0')
 531:src/display.c **** 					u.buf[i] = ' ';
 532:src/display.c **** 				else
 533:src/display.c **** 					break;
 534:src/display.c **** 			}
 535:src/display.c **** 			if (i != 0 && negative) {
 536:src/display.c **** 				// Move minus sign to right in front of exponent
 537:src/display.c **** 				CLR_EXP_SIGN;
 538:src/display.c **** 				u.buf[i - 1] = '-';
 539:src/display.c **** 			}
 540:src/display.c **** 		}
 541:src/display.c **** #endif
 542:src/display.c **** 	}
 543:src/display.c **** 	else
 544:src/display.c **** 		num_arg(u.buf, exp);
ARM GAS  /tmp/ccTlkAzC.s 			page 16


 545:src/display.c **** no_number:
 546:src/display.c **** 	set_exp_digits_string(u.buf, res);
 547:src/display.c **** }
 548:src/display.c **** 
 549:src/display.c **** static void carry_overflow(void) {
 550:src/display.c **** 	const int base = SEGS_EXP_BASE;
 551:src/display.c **** 	int c;
 552:src/display.c **** 	unsigned int b;
 553:src/display.c **** 
 554:src/display.c **** 	// Figure out the base
 555:src/display.c **** 	switch (State2.smode) {
 556:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 557:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
 558:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
 559:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
 560:src/display.c **** 	default:	b = UState.int_base+1;	break;
 561:src/display.c **** 	}
 562:src/display.c **** 
 563:src/display.c **** 	// Display the base as the first exponent digit
 564:src/display.c **** 	if (b > 10 && b < 16)
 565:src/display.c **** 		SET_EXP_SIGN;
 566:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 567:src/display.c **** 	set_dig(base, c);
 568:src/display.c **** 
 569:src/display.c **** 	// Carry and overflow are the next two exponent digits if they are set
 570:src/display.c **** 	if (get_carry())
 571:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 572:src/display.c **** 	if (get_overflow())
 573:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 574:src/display.c **** }
 575:src/display.c **** 
 576:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res);
 577:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res);
 578:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 579:src/display.c **** // replace_char() isn't used or implemented unless HMS Y register display is enabled
 580:src/display.c **** static void replace_char(char *a, char b, char c) { }
 581:src/display.c **** #endif
 582:src/display.c **** 
 583:src/display.c **** /* Display the annunicator text line.
 584:src/display.c ****  * Care needs to be taken to keep things aligned.
 585:src/display.c ****  * Spaces are 5 pixels wide, \006 is a single pixel space.
 586:src/display.c ****  */
 587:src/display.c **** static void annunciators(void) {
 588:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 589:src/display.c **** 	char buf[42], *p = buf, *q="";
 590:src/display.c **** 	int n;
 591:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 592:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 593:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 594:src/display.c **** 	// that's set to 0 will be optimized away. This way it's easier to make a
 595:src/display.c **** 	// feature run-time configurable if needed.
 596:src/display.c **** #ifdef INCLUDE_YREG_CODE
 597:src/display.c **** #  ifdef YREG_ALWAYS_ON
 598:src/display.c **** 	const int yreg_enabled = 1;
 599:src/display.c **** #  else
 600:src/display.c **** 	const int yreg_enabled = UState.show_y;
 601:src/display.c **** #  endif
ARM GAS  /tmp/ccTlkAzC.s 			page 17


 602:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 603:src/display.c **** 	const int yreg_hms = 1;
 604:src/display.c **** #  else
 605:src/display.c **** 	const int yreg_hms = 0;
 606:src/display.c **** #  endif
 607:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 608:src/display.c **** 	const int yreg_fract = 1;
 609:src/display.c **** #  else
 610:src/display.c **** 	const int yreg_fract = 0;
 611:src/display.c **** #  endif
 612:src/display.c **** #else
 613:src/display.c **** 	const int yreg_enabled = 0;
 614:src/display.c **** 	const int yreg_hms = 0;
 615:src/display.c **** 	const int yreg_fract = 0;
 616:src/display.c **** #endif
 617:src/display.c **** #ifdef RP_PREFIX
 618:src/display.c **** 	const int rp_prefix = 1;
 619:src/display.c **** #else
 620:src/display.c **** 	const int rp_prefix = 0;
 621:src/display.c **** 	const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 622:src/display.c **** #endif
 623:src/display.c **** // Indicates whether font escape code is compiled in.
 624:src/display.c **** // This variable will always be set at compile time.
 625:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 626:src/display.c **** 	const int has_FONT_ESCAPE = 1;
 627:src/display.c **** #else
 628:src/display.c **** 	const int has_FONT_ESCAPE = 0;
 629:src/display.c **** #endif
 630:src/display.c **** 
 631:src/display.c **** 	xset(buf, '\0', sizeof(buf));
 632:src/display.c **** 
 633:src/display.c **** 	if (is_intmode()) {
 634:src/display.c **** #ifdef SHOW_STACK_SIZE
 635:src/display.c **** 		if (shift_char == ' ') {
 636:src/display.c **** 			*p++ = '\007';
 637:src/display.c **** 			*p++ = '\346';
 638:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 639:src/display.c **** 		}
 640:src/display.c **** 		else
 641:src/display.c **** #endif
 642:src/display.c **** 		{
 643:src/display.c **** 			*p++ = shift_char;
 644:src/display.c **** 			*p++ = '\006';
 645:src/display.c **** 		}
 646:src/display.c **** 
 647:src/display.c **** 		switch(int_mode()) {
 648:src/display.c **** 		default:
 649:src/display.c **** 		case MODE_2COMP:	q = "2c\006";		break;
 650:src/display.c **** 		case MODE_UNSIGNED:	q = "un\006";		break;
 651:src/display.c **** 		case MODE_1COMP:	q = "\0061c\006\006";	break;
 652:src/display.c **** 		case MODE_SGNMANT:	q = "sm";		break;
 653:src/display.c **** 		}
 654:src/display.c **** 		q = scopy(p, q);
 655:src/display.c **** 		*q++ = '\006';
 656:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 657:src/display.c **** 
 658:src/display.c **** 		if (IntMaxWindow > 0) {
ARM GAS  /tmp/ccTlkAzC.s 			page 18


 659:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 660:src/display.c **** 			if (*q == '1')
 661:src/display.c **** 				n += 2;
 662:src/display.c **** 			if (q[1] == '1')
 663:src/display.c **** 				n += 2;
 664:src/display.c **** 			while (n-- > 0)
 665:src/display.c **** 				*p++ = '\006';
 666:src/display.c **** 
 667:src/display.c **** 			for (n = IntMaxWindow; n >= 0; n--)
 668:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 669:src/display.c **** 		}
 670:src/display.c **** 	}
 671:src/display.c **** 	else if (!yreg_enabled
 672:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 673:src/display.c **** 		 || shift_char != ' ' || State2.cmplx
 674:src/display.c **** #endif
 675:src/display.c **** 		 ) {
 676:src/display.c **** // The stack size indicator is displayed on the right if date mode indication is enabled
 677:src/display.c **** // because the 'D' in small font doesn't look good next to the date mode indicator.
 678:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 679:src/display.c **** 		if (shift_char == ' ') {
 680:src/display.c **** 			*p++ = '\007';
 681:src/display.c **** 			*p++ = '\342';
 682:src/display.c **** 			*p++ = (UState.stack_depth ? ':' : '.');
 683:src/display.c **** 			*p++ = '\007';
 684:src/display.c **** 			*p++ = '\344';
 685:src/display.c **** 			*p++ = (is_dblmode() ? 'D' : ' ');
 686:src/display.c **** 		}
 687:src/display.c **** 		else
 688:src/display.c **** #endif
 689:src/display.c **** 		if (shift_char != ' ' || !is_dblmode()) {
 690:src/display.c **** 			*p++ = shift_char;
 691:src/display.c **** 			*p++ = '\006';
 692:src/display.c **** 		}
 693:src/display.c **** 		else {
 694:src/display.c **** 			*p++ = 'D';
 695:src/display.c **** 		}
 696:src/display.c **** 
 697:src/display.c **** 		if (State2.cmplx) {
 698:src/display.c **** 			*p++ = ' ';
 699:src/display.c **** 			*p = '\024';
 700:src/display.c **** 			goto skip;
 701:src/display.c **** 		}
 702:src/display.c **** 		if (State2.arrow) {
 703:src/display.c **** 			*p++ = ' ';
 704:src/display.c **** 			*p = '\015';
 705:src/display.c **** 			goto skip;
 706:src/display.c **** 		}
 707:src/display.c **** 
 708:src/display.c **** 		if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 709:src/display.c **** 			if (State2.wascomplex) {
 710:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 711:src/display.c **** 			}
 712:src/display.c **** 			else if (rp_prefix) {
 713:src/display.c **** 				if (RectPolConv == 1) {
 714:src/display.c **** 					q = "\007\306<";
 715:src/display.c **** 				}
ARM GAS  /tmp/ccTlkAzC.s 			page 19


 716:src/display.c **** 				else {
 717:src/display.c **** 					q = "\007\306y";
 718:src/display.c **** 				}
 719:src/display.c **** 			}
 720:src/display.c **** 			p = scopy(buf, q);
 721:src/display.c **** 
 722:src/display.c **** 			goto display_yreg;
 723:src/display.c **** 		}
 724:src/display.c **** 
 725:src/display.c **** 		switch (UState.date_mode) {
 726:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 727:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 728:src/display.c **** 		case DATE_DMY:	q = "d.my\006\006";	break;
 729:src/display.c **** #endif
 730:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 731:src/display.c **** 		case DATE_YMD:	q = "y.md\006\006";	break;
 732:src/display.c **** #endif
 733:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 734:src/display.c **** 		case DATE_MDY:	q = "m.dy\006\006";	break;
 735:src/display.c **** #endif
 736:src/display.c **** #endif
 737:src/display.c **** 		default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 738:src/display.c **** 		}
 739:src/display.c **** 		p = scopy(p, q);
 740:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 741:src/display.c **** 		if (get_trig_mode() == TRIG_GRAD) {
 742:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 743:src/display.c **** 		}
 744:src/display.c **** #else
 745:src/display.c **** 		p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 746:src/display.c **** 		*p++ = '\007';
 747:src/display.c **** 		*p++ = '\342';
 748:src/display.c **** 		*p =  (UState.stack_depth ? ':' : '.');
 749:src/display.c **** #endif
 750:src/display.c **** 	}
 751:src/display.c **** 	else { // yreg_enabled
 752:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 753:src/display.c **** 		if (State2.cmplx) {
 754:src/display.c **** 			*p++ = '\007';
 755:src/display.c **** 			*p++ = '\344';
 756:src/display.c **** 			*p++ = shift_char;
 757:src/display.c **** 			q = "\024";
 758:src/display.c **** 		}
 759:src/display.c **** 		else if (shift_char != ' ') {
 760:src/display.c **** 			*p++ = '\007';
 761:src/display.c **** 			*p++ = '\307';
 762:src/display.c **** 			*p++ = shift_char;
 763:src/display.c **** 			goto no_copy;
 764:src/display.c **** 		}
 765:src/display.c **** 		else
 766:src/display.c **** #endif
 767:src/display.c **** 		if (State2.wascomplex) {
 768:src/display.c **** 			q = "\007\207i";
 769:src/display.c **** 		}
 770:src/display.c **** 		else if (rp_prefix && RectPolConv == 1) {
 771:src/display.c **** 			q = "\007\307<";
 772:src/display.c **** 		}
ARM GAS  /tmp/ccTlkAzC.s 			page 20


 773:src/display.c **** 		else if (rp_prefix && RectPolConv == 2) {
 774:src/display.c **** 			q = "\007\307y";
 775:src/display.c **** 		}
 776:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 777:src/display.c **** 		else if (get_trig_mode() == TRIG_GRAD) {
 778:src/display.c **** 			q = "\007\207\007";
 779:src/display.c **** 		}
 780:src/display.c **** #endif
 781:src/display.c **** 		else {
 782:src/display.c **** #ifndef SHOW_STACK_SIZE
 783:src/display.c **** 			q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 784:src/display.c **** #else
 785:src/display.c **** 			if (is_dblmode()) {
 786:src/display.c **** 				*p++ = '\007';
 787:src/display.c **** 				*p++ = '\342';
 788:src/display.c **** 				*p++ = (UState.stack_depth ? ':' : '.');
 789:src/display.c **** 				q = "\007\345D";
 790:src/display.c **** 			}
 791:src/display.c **** 			else {
 792:src/display.c **** 				q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 793:src/display.c **** 			}
 794:src/display.c **** #endif
 795:src/display.c **** 		}
 796:src/display.c **** 		p = scopy(p, q);
 797:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 798:src/display.c **** 	no_copy:
 799:src/display.c **** #endif
 800:src/display.c **** 
 801:src/display.c **** 		if (State2.arrow) {
 802:src/display.c **** 			scopy(p, "\007\204\006\015");
 803:src/display.c **** 		} else if (State2.runmode) {
 804:src/display.c **** 			decNumber y;
 805:src/display.c **** display_yreg:
 806:src/display.c **** 			/* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 807:src/display.c **** 			 * ShowRegister+1 would contain the complex component, however if the register being
 808:src/display.c **** 			 * examined is on the stack and there is a command line present, the stack will be lifted
 809:src/display.c **** 			 * after we execute so we need to show ShowRegister instead.
 810:src/display.c **** 			 */
 811:src/display.c **** 			getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 812:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 813:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 814:src/display.c **** 			if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 815:src/display.c **** 				if (yreg_hms && State2.hms) {
 816:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 817:src/display.c **** 
 818:src/display.c **** 					xset(buf, '\0', sizeof(buf));
 819:src/display.c **** 					UState.nothousands = 1;
 820:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 821:src/display.c **** 					UState.nothousands = saved_nothousands;
 822:src/display.c **** 					// First replace the '@' character with the degree symbol
 823:src/display.c **** 					// Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow space
 824:src/display.c **** 					// then remove the second symbol (") and the overflow or underflow signs,
 825:src/display.c **** 					// then remove the fractional part of the seconds.
 826:src/display.c **** 					p = "@\005 \006\"\0.\0";
 827:src/display.c **** 					while (*p) {
 828:src/display.c **** 						replace_char(buf, p[0], p[1]);
 829:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
ARM GAS  /tmp/ccTlkAzC.s 			page 21


 830:src/display.c **** 							goto skip;
 831:src/display.c **** 						}
 832:src/display.c **** 						p += 2;
 833:src/display.c **** 					}
 834:src/display.c **** 					goto skip;
 835:src/display.c **** 				}
 836:src/display.c **** 				if (yreg_fract && UState.fract
 837:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 838:src/display.c **** 				    && !State2.cmplx
 839:src/display.c **** #endif
 840:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 841:src/display.c **** 				    && !(rp_prefix && RectPolConv == 1)
 842:src/display.c **** #endif
 843:src/display.c **** 				    && set_x_fract(&y, p)) {
 844:src/display.c **** 					char ltgteq;
 845:src/display.c **** 
 846:src/display.c **** 					q = find_char(buf, '\0') - 2;
 847:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 848:src/display.c **** 					ltgteq = *q;
 849:src/display.c **** 					switch (ltgteq) {
 850:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 851:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 852:src/display.c **** 					}
 853:src/display.c **** 					scopy(q, "\007\344?");
 854:src/display.c **** 					q[2] = ltgteq;
 855:src/display.c **** 
 856:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 857:src/display.c **** 						goto skip;
 858:src/display.c **** 					}
 859:src/display.c **** 					q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 860:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 861:src/display.c **** 						goto skip;
 862:src/display.c **** 					}
 863:src/display.c **** 					xset(p, '\0', sizeof(buf) - (p - buf));
 864:src/display.c **** 				}
 865:src/display.c **** 			}
 866:src/display.c **** 			for (n=DISPLAY_DIGITS; n>1; ) {
 867:src/display.c **** 				int extra_pixels;
 868:src/display.c **** 
 869:src/display.c **** 				set_x_dn(&y, p, &n);
 870:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 871:src/display.c **** 				if (extra_pixels <= 0)
 872:src/display.c **** 					break;
 873:src/display.c **** 
 874:src/display.c **** 				xset(p, '\0', n+10);
 875:src/display.c **** 
 876:src/display.c **** 				n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 877:src/display.c **** 			}
 878:src/display.c **** 		}
 879:src/display.c **** 	}
 880:src/display.c **** 
 881:src/display.c **** skip:	set_status(buf);
 882:src/display.c **** }
 883:src/display.c **** 
 884:src/display.c **** static void disp_x(const char *p) {
 885:src/display.c **** 	int i;
 886:src/display.c **** 	int gotdot = -1;
ARM GAS  /tmp/ccTlkAzC.s 			page 22


 887:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 888:src/display.c **** 	const
 889:src/display.c **** #endif
 890:src/display.c **** 	      int segs_per_digit = SEGS_PER_DIGIT;
 891:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 892:src/display.c **** 	int overflow_to_left = 0;
 893:src/display.c **** #endif
 894:src/display.c **** 
 895:src/display.c **** 	if (*p == '-') {
 896:src/display.c **** 		SET_MANT_SIGN;
 897:src/display.c **** 		p++;
 898:src/display.c **** 	}
 899:src/display.c **** 
 900:src/display.c **** 	if (is_intmode()) {
 901:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 902:src/display.c **** 			set_dig(i, *p);
 903:src/display.c **** 			i += SEGS_PER_DIGIT;
 904:src/display.c **** 		}
 905:src/display.c **** 		carry_overflow();
 906:src/display.c **** 	} else {
 907:src/display.c **** 		set_separator_decimal_modes();
 908:src/display.c **** 
 909:src/display.c **** 		i = 0;
 910:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 911:src/display.c **** 		if ( CmdLineDot > 1 ) {
 912:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 913:src/display.c **** 			const
 914:src/display.c **** #  endif
 915:src/display.c **** 			      int double_dot = 0;
 916:src/display.c **** 			int j;
 917:src/display.c **** 
 918:src/display.c **** 			for (j=0; p[j] != '\0'; j++) {
 919:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 920:src/display.c **** 					gotdot = j;
 921:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 922:src/display.c **** 					double_dot = (p[j+1] == '.');
 923:src/display.c **** #  endif
 924:src/display.c **** 				}
 925:src/display.c **** 			}
 926:src/display.c **** 			j -= DISPLAY_DIGITS + double_dot;
 927:src/display.c **** 			if (j > 0) {
 928:src/display.c **** 				p += j + 1;
 929:src/display.c **** 				i = SEGS_PER_DIGIT;
 930:src/display.c **** 				if (gotdot <= j) {
 931:src/display.c **** 					gotdot = 0;
 932:src/display.c **** 					if (double_dot)
 933:src/display.c **** 						p++;
 934:src/display.c **** 				}
 935:src/display.c **** 				else if (*p == '.') {
 936:src/display.c **** 					gotdot = 0;
 937:src/display.c **** 					p++;
 938:src/display.c **** 					if (!double_dot)
 939:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 940:src/display.c **** 				}
 941:src/display.c **** 				else gotdot = -1;
 942:src/display.c **** 				set_dig(0, '<');
 943:src/display.c **** 				overflow_to_left = 1;
ARM GAS  /tmp/ccTlkAzC.s 			page 23


 944:src/display.c **** 			}
 945:src/display.c **** 			else gotdot = -1;
 946:src/display.c **** 		}
 947:src/display.c **** #endif
 948:src/display.c **** 
 949:src/display.c **** 		for (; *p != '\0' && *p != 'E'
 950:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 951:src/display.c **** 		                               && *p != 'D'
 952:src/display.c **** #endif
 953:src/display.c **** 		                                           ; p++) {
 954:src/display.c **** 			if (*p == '.') {
 955:src/display.c **** 				if (gotdot < 0)
 956:src/display.c **** 					gotdot = i;
 957:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 958:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 959:src/display.c **** 				if ( *(p+1) == '.' || ( i != gotdot ) ) {
 960:src/display.c **** 					if ( *(p+1) == '.' ) {
 961:src/display.c **** 						p++;
 962:src/display.c **** 					}
 963:src/display.c **** #  else
 964:src/display.c **** 				if ( i != gotdot ) {
 965:src/display.c **** #  endif
 966:src/display.c **** 					set_dig(i, '/'); // put in a fraction separator
 967:src/display.c **** 					i += segs_per_digit;
 968:src/display.c **** 				}
 969:src/display.c **** 				else {
 970:src/display.c **** 					if ( CmdLineDot > 1 ) {
 971:src/display.c **** 						i += segs_per_digit;
 972:src/display.c **** 					}
 973:src/display.c **** 					else {
 974:src/display.c **** 						set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
 975:src/display.c **** //						i += SEGS_PER_DIGIT;
 976:src/display.c **** 					}
 977:src/display.c **** 				}
 978:src/display.c **** #else
 979:src/display.c **** 				if (i > 0)
 980:src/display.c **** 					set_decimal(i - segs_per_digit, DecimalMode, CNULL);
 981:src/display.c **** 				else {
 982:src/display.c **** 					set_dig(i, '0');
 983:src/display.c **** 					set_decimal(i, DecimalMode, CNULL);
 984:src/display.c **** 					i += segs_per_digit;
 985:src/display.c **** 				}
 986:src/display.c **** #endif
 987:src/display.c **** 			} else {
 988:src/display.c **** 				set_dig(i, *p);
 989:src/display.c **** 				i += segs_per_digit;
 990:src/display.c **** 			}
 991:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 992:src/display.c **** 			if (i == SEGS_EXP_BASE)
 993:src/display.c **** 				segs_per_digit = SEGS_PER_EXP_DIGIT;
 994:src/display.c **** #endif
 995:src/display.c **** 		}
 996:src/display.c **** 
 997:src/display.c **** 		/* Implement a floating comma */
 998:src/display.c **** 		if (gotdot < 0)
 999:src/display.c **** 			gotdot = i;
1000:src/display.c **** 		for (;;) {
ARM GAS  /tmp/ccTlkAzC.s 			page 24


1001:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
1002:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
1003:src/display.c **** 				break;
1004:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1005:src/display.c **** 			if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1006:src/display.c **** 				break;
1007:src/display.c **** #endif
1008:src/display.c **** 			set_separator(gotdot, SeparatorMode, CNULL);
1009:src/display.c **** 		}
1010:src/display.c **** 
1011:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1012:src/display.c **** 		if (*p == 'E' || *p == 'D') {
1013:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1014:src/display.c **** 			int flags = 8;
1015:src/display.c **** #  else
1016:src/display.c **** 			int flags = 12;
1017:src/display.c **** #  endif
1018:src/display.c **** 
1019:src/display.c **** 			if (*p == 'D')
1020:src/display.c **** 				flags |= 2;
1021:src/display.c **** 			if (i > 10 * SEGS_PER_DIGIT)
1022:src/display.c **** 				flags |= 16;
1023:src/display.c **** 			set_exp(s_to_i(p+1), flags, CNULL);
1024:src/display.c **** 		}
1025:src/display.c **** #else
1026:src/display.c **** 		if (*p == 'E') {
1027:src/display.c **** 			p++;
1028:src/display.c **** 			// set_exp() takes care of setting the exponent sign
1029:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1030:src/display.c **** 			set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1031:src/display.c **** #  else
1032:src/display.c **** 			set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1033:src/display.c **** #  endif
1034:src/display.c **** 		} 
1035:src/display.c **** #endif
1036:src/display.c **** 	}
1037:src/display.c **** }
1038:src/display.c **** 
1039:src/display.c **** const char DIGITS[] = "0123456789ABCDEF";
1040:src/display.c **** 
1041:src/display.c **** static void set_int_x(const long long int value, char *res) {
1042:src/display.c **** 	const int ws = word_size();
1043:src/display.c **** 	unsigned int b;
1044:src/display.c **** 	long long int vs = value;
1045:src/display.c **** 	unsigned long long int v;
1046:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1047:src/display.c **** 	int i, j, k;
1048:src/display.c **** 	int sign = 0;
1049:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1050:src/display.c **** 
1051:src/display.c **** 	switch (State2.smode) {
1052:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1053:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1054:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1055:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1056:src/display.c **** 	default:	b = int_base();	break;
1057:src/display.c **** 	}
ARM GAS  /tmp/ccTlkAzC.s 			page 25


1058:src/display.c **** 
1059:src/display.c **** 	if (!res) {
1060:src/display.c **** 		IntMaxWindow = 0;
1061:src/display.c **** 		carry_overflow();
1062:src/display.c **** 	}
1063:src/display.c **** 
1064:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) {
1065:src/display.c **** 		v = extract_value(value, &sign);
1066:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1067:src/display.c **** 			v = value;
1068:src/display.c **** 		if (v == 0) {
1069:src/display.c **** 			if (sign)
1070:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1071:src/display.c **** 			set_dig_s(dig, '0', res);
1072:src/display.c **** 			return;
1073:src/display.c **** 		} else
1074:src/display.c **** 			for (i=0; v != 0; i++) {
1075:src/display.c **** 				const int r = v % b;
1076:src/display.c **** 				v /= b;
1077:src/display.c **** 				buf[i] = DIGITS[r];
1078:src/display.c **** 			}
1079:src/display.c **** 	} else {
1080:src/display.c **** 		// Truncate down to the current word size and then sign extend it back
1081:src/display.c **** 		if (ws < 64) {
1082:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
1083:src/display.c **** 			vs &= mask;
1084:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
1085:src/display.c **** 				vs |= ~mask;
1086:src/display.c **** 		}
1087:src/display.c **** 
1088:src/display.c **** 		if (!UState.leadzero && vs == 0) {
1089:src/display.c **** 			set_dig_s(dig, '0', res);
1090:src/display.c **** 			return;
1091:src/display.c **** 		} else if (!UState.leadzero) {
1092:src/display.c **** 			v = (unsigned long long int)vs;
1093:src/display.c **** 			for (i=0; v != 0; i++) {
1094:src/display.c **** 				const int r = v % b;
1095:src/display.c **** 				v /= b;
1096:src/display.c **** 				buf[i] = DIGITS[r];
1097:src/display.c **** 			}
1098:src/display.c **** 		} else {
1099:src/display.c **** 			int n;
1100:src/display.c **** 			const unsigned int b1 = b >> 1;
1101:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1102:src/display.c **** 			v = (unsigned long long int)vs;
1103:src/display.c **** 
1104:src/display.c **** 			n = (ws + fac) / (fac+1);
1105:src/display.c **** 			for (i=0; i<n; i++) {
1106:src/display.c **** 				const int r = v % b;
1107:src/display.c **** 				v /= b;
1108:src/display.c **** 				buf[i] = DIGITS[r];
1109:src/display.c **** 			}
1110:src/display.c **** 		}
1111:src/display.c **** 	}
1112:src/display.c **** 
1113:src/display.c **** 	/* At this point i is the number of digits in the output */
1114:src/display.c **** 	if (res) {
ARM GAS  /tmp/ccTlkAzC.s 			page 26


1115:src/display.c **** 		if (sign) *res++ = '-';
1116:src/display.c **** 		while (--i >= 0)
1117:src/display.c **** 			*res++ = buf[i];
1118:src/display.c **** 	} else {
1119:src/display.c **** #if 0
1120:src/display.c **** 		set_separator_decimal_modes();
1121:src/display.c **** 
1122:src/display.c **** 		// Allows configuration of digit grouping per base
1123:src/display.c **** 		static const char grouping[] = 
1124:src/display.c **** 			{       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1125:src/display.c **** 		      //	   2     3     4     5     6     7     8
1126:src/display.c **** 		          0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1127:src/display.c **** 		      //     9    10    11    12    13    14    15    16
1128:src/display.c **** 		const int shift = SeparatorMode == SEP_NONE ? 12 
1129:src/display.c **** 			        : grouping[b - 2] >> 4;
1130:src/display.c **** 		const int group = SeparatorMode == SEP_NONE ? 16
1131:src/display.c **** 				: (grouping[b - 2] & 0xf);
1132:src/display.c **** #else
1133:src/display.c **** 		// Less flexible but shorter
1134:src/display.c **** 		const int shift = b == 2 ? 8 : 12;
1135:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
1136:src/display.c **** 				: b == 16 ? 2 : 3;
1137:src/display.c **** 		set_separator_decimal_modes();
1138:src/display.c **** #endif
1139:src/display.c **** 		IntMaxWindow = (i - 1) / shift;
1140:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
1141:src/display.c **** 			State2.window = 0;
1142:src/display.c **** 		buf[i] = '\0';
1143:src/display.c **** 
1144:src/display.c **** 		j = State2.window * shift;	// digits at a time
1145:src/display.c **** 		for (k = 0; k < 12; k++)
1146:src/display.c **** 			if (buf[j + k] == '\0')
1147:src/display.c **** 				break;
1148:src/display.c **** 		for (i=0; --k >= 0; i++) {
1149:src/display.c **** 			int ch = buf[j++];
1150:src/display.c **** 			if (i >= shift)
1151:src/display.c **** 				ch -= 030;
1152:src/display.c **** 			set_dig(dig, ch);
1153:src/display.c **** 			if ((j % group) == 0 && k != 0)
1154:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
1155:src/display.c **** 			dig -= SEGS_PER_DIGIT;
1156:src/display.c **** 		}
1157:src/display.c **** 		if (sign) {
1158:src/display.c **** 			if (dig >= 0)
1159:src/display.c **** 				set_dig(dig, '-');
1160:src/display.c **** 			else	SET_MANT_SIGN;
1161:src/display.c **** 		}
1162:src/display.c **** 	}
1163:src/display.c **** }
1164:src/display.c **** 
1165:src/display.c **** /* Handle special cases.
1166:src/display.c ****  * return non-zero if the number is special.
1167:src/display.c ****  */
1168:src/display.c **** static int check_special_dn(const decNumber *x, char *res) {
1169:src/display.c **** 	if (decNumberIsSpecial(x)) {
1170:src/display.c **** 		if (decNumberIsNaN(x)) {
1171:src/display.c **** 			if (res) {
ARM GAS  /tmp/ccTlkAzC.s 			page 27


1172:src/display.c **** 				scopy(res, "NaN");
1173:src/display.c **** 			} else {
1174:src/display.c **** 				set_digits_string(S7_NaN, 0);
1175:src/display.c **** #ifndef REALBUILD
1176:src/display.c **** 				scopy(LastDisplayedNumber, S7_NaN_Text);
1177:src/display.c **** 				forceDispPlot=0;
1178:src/display.c **** #endif
1179:src/display.c **** 			}
1180:src/display.c **** 			return 1;
1181:src/display.c **** 		} else {
1182:src/display.c **** 			if (decNumberIsNegative(x)) {
1183:src/display.c **** 				if (res) *res++ = '-';
1184:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
1185:src/display.c **** 			}
1186:src/display.c **** 			if (res)
1187:src/display.c **** 				*res++ = '\237';
1188:src/display.c **** 			else {
1189:src/display.c **** 				set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1190:src/display.c **** #ifndef REALBUILD
1191:src/display.c **** 				if (decNumberIsNegative(x)) {
1192:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1193:src/display.c **** 				}
1194:src/display.c **** 				else {
1195:src/display.c **** 					scopy(LastDisplayedNumber, S7_INF_Text);
1196:src/display.c **** 				}
1197:src/display.c **** 				forceDispPlot=0;
1198:src/display.c **** #endif
1199:src/display.c **** 			}
1200:src/display.c **** 			return 1;
1201:src/display.c **** 		}
1202:src/display.c **** 	}
1203:src/display.c **** 	return 0;
1204:src/display.c **** }
1205:src/display.c **** 
1206:src/display.c **** 
1207:src/display.c **** /* Extract the two lowest integral digits from the number
1208:src/display.c ****  */
1209:src/display.c **** static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1210:src/display.c **** 	decNumber n;
1211:src/display.c **** 
1212:src/display.c **** 	decNumberMod(&n, x, &const_100);
1213:src/display.c **** 	*v = dn_to_int(&n);
1214:src/display.c **** 	dn_mulpow10(&n, x, -2);
1215:src/display.c **** 	decNumberTrunc(res, &n);
1216:src/display.c **** }
1217:src/display.c **** 
1218:src/display.c **** static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 271              		.loc 1 1218 81 is_stmt 1 view -0
 272              		.cfi_startproc
 273              		@ args = 4, pretend = 0, frame = 32
 274              		@ frame_needed = 0, uses_anonymous_args = 0
1219:src/display.c **** 	char b[32];
 275              		.loc 1 1219 2 view .LVU78
1220:src/display.c **** 	int i, j;
 276              		.loc 1 1220 2 view .LVU79
1221:src/display.c **** 
1222:src/display.c **** 	for (i=0; i<n; i++) {
ARM GAS  /tmp/ccTlkAzC.s 			page 28


 277              		.loc 1 1222 2 view .LVU80
 278              		.loc 1 1222 12 view .LVU81
1218:src/display.c **** 	char b[32];
 279              		.loc 1 1218 81 is_stmt 0 view .LVU82
 280 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 281              		.cfi_def_cfa_offset 28
 282              		.cfi_offset 4, -28
 283              		.cfi_offset 5, -24
 284              		.cfi_offset 6, -20
 285              		.cfi_offset 7, -16
 286              		.cfi_offset 8, -12
 287              		.cfi_offset 9, -8
 288              		.cfi_offset 14, -4
1223:src/display.c **** 		if (v == 0)
1224:src/display.c **** 			b[i] = spaces?' ':'0';
1225:src/display.c **** 		else {
1226:src/display.c **** 			j = v % 10;
 289              		.loc 1 1226 10 view .LVU83
 290 0004 DFF89CE0 		ldr	lr, .L45
1218:src/display.c **** 	char b[32];
 291              		.loc 1 1218 81 view .LVU84
 292 0008 89B0     		sub	sp, sp, #36
 293              		.cfi_def_cfa_offset 64
1218:src/display.c **** 	char b[32];
 294              		.loc 1 1218 81 view .LVU85
 295 000a 1746     		mov	r7, r2
 296 000c EC46     		mov	ip, sp
1222:src/display.c **** 		if (v == 0)
 297              		.loc 1 1222 8 view .LVU86
 298 000e 0026     		movs	r6, #0
 299              	.LVL13:
 300              	.L33:
1223:src/display.c **** 		if (v == 0)
 301              		.loc 1 1223 3 is_stmt 1 view .LVU87
 302              		.loc 1 1226 4 view .LVU88
 303              		.loc 1 1226 10 is_stmt 0 view .LVU89
 304 0010 AEFB0024 		umull	r2, r4, lr, r0
 305 0014 E408     		lsrs	r4, r4, #3
 306 0016 04EB8402 		add	r2, r4, r4, lsl #2
 307 001a 2546     		mov	r5, r4
 308 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 309              	.LVL14:
1227:src/display.c **** 			v /= 10;
 310              		.loc 1 1227 4 is_stmt 1 view .LVU90
1228:src/display.c **** 			b[i] = j + '0';
 311              		.loc 1 1228 13 is_stmt 0 view .LVU91
 312 0020 3034     		adds	r4, r4, #48
 313              	.LVL15:
1222:src/display.c **** 		if (v == 0)
 314              		.loc 1 1222 18 view .LVU92
 315 0022 721C     		adds	r2, r6, #1
1223:src/display.c **** 			b[i] = spaces?' ':'0';
 316              		.loc 1 1223 6 view .LVU93
 317 0024 30B1     		cbz	r0, .L44
1222:src/display.c **** 		if (v == 0)
 318              		.loc 1 1222 2 view .LVU94
 319 0026 9342     		cmp	r3, r2
ARM GAS  /tmp/ccTlkAzC.s 			page 29


 320              		.loc 1 1228 9 view .LVU95
 321 0028 0CF8014B 		strb	r4, [ip], #1
1227:src/display.c **** 			b[i] = j + '0';
 322              		.loc 1 1227 6 view .LVU96
 323 002c 2846     		mov	r0, r5
 324              	.LVL16:
 325              		.loc 1 1228 4 is_stmt 1 view .LVU97
1222:src/display.c **** 		if (v == 0)
 326              		.loc 1 1222 17 view .LVU98
1222:src/display.c **** 		if (v == 0)
 327              		.loc 1 1222 12 view .LVU99
1222:src/display.c **** 		if (v == 0)
 328              		.loc 1 1222 2 is_stmt 0 view .LVU100
 329 002e 12D0     		beq	.L34
 330 0030 1646     		mov	r6, r2
 331 0032 EDE7     		b	.L33
 332              	.LVL17:
 333              	.L44:
1222:src/display.c **** 		if (v == 0)
 334              		.loc 1 1222 2 view .LVU101
 335 0034 109A     		ldr	r2, [sp, #64]
 336 0036 002A     		cmp	r2, #0
 337 0038 14BF     		ite	ne
 338 003a 2024     		movne	r4, #32
 339              	.LVL18:
1222:src/display.c **** 		if (v == 0)
 340              		.loc 1 1222 2 view .LVU102
 341 003c 3024     		moveq	r4, #48
 342 003e 0DEB0600 		add	r0, sp, r6
 343              	.LVL19:
1223:src/display.c **** 			b[i] = spaces?' ':'0';
 344              		.loc 1 1223 6 view .LVU103
 345 0042 3246     		mov	r2, r6
 346              	.LVL20:
 347              	.L31:
1224:src/display.c **** 		else {
 348              		.loc 1 1224 4 is_stmt 1 view .LVU104
1222:src/display.c **** 		if (v == 0)
 349              		.loc 1 1222 18 is_stmt 0 view .LVU105
 350 0044 0132     		adds	r2, r2, #1
 351              	.LVL21:
1222:src/display.c **** 		if (v == 0)
 352              		.loc 1 1222 2 view .LVU106
 353 0046 9342     		cmp	r3, r2
1224:src/display.c **** 		else {
 354              		.loc 1 1224 9 view .LVU107
 355 0048 00F8014B 		strb	r4, [r0], #1
 356              	.LVL22:
1222:src/display.c **** 		if (v == 0)
 357              		.loc 1 1222 17 is_stmt 1 view .LVU108
1222:src/display.c **** 		if (v == 0)
 358              		.loc 1 1222 12 view .LVU109
1222:src/display.c **** 		if (v == 0)
 359              		.loc 1 1222 2 is_stmt 0 view .LVU110
 360 004c FADC     		bgt	.L31
 361 004e 5A1E     		subs	r2, r3, #1
 362              	.LVL23:
ARM GAS  /tmp/ccTlkAzC.s 			page 30


1222:src/display.c **** 		if (v == 0)
 363              		.loc 1 1222 2 view .LVU111
 364 0050 B342     		cmp	r3, r6
 365 0052 C8BF     		it	gt
 366 0054 1646     		movgt	r6, r2
 367              	.LVL24:
 368              	.L34:
1229:src/display.c **** 		}
1230:src/display.c **** 	}
1231:src/display.c **** 	if (b[0] == ' ')
 369              		.loc 1 1231 2 is_stmt 1 view .LVU112
 370              		.loc 1 1231 5 is_stmt 0 view .LVU113
 371 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 372              	.LVL25:
1232:src/display.c **** 		b[0] = '0';
1233:src/display.c **** 
1234:src/display.c **** 	/* Copy across and appropriately leading space things
1235:src/display.c **** 	 */
1236:src/display.c **** 	j = *jin;
 373              		.loc 1 1236 4 view .LVU114
 374 005a D7F80090 		ldr	r9, [r7]
1231:src/display.c **** 		b[0] = '0';
 375              		.loc 1 1231 5 view .LVU115
 376 005e 202B     		cmp	r3, #32
1232:src/display.c **** 		b[0] = '0';
 377              		.loc 1 1232 3 is_stmt 1 view .LVU116
1232:src/display.c **** 		b[0] = '0';
 378              		.loc 1 1232 8 is_stmt 0 view .LVU117
 379 0060 04BF     		itt	eq
 380 0062 3023     		moveq	r3, #48
 381 0064 8DF80030 		strbeq	r3, [sp]
 382              		.loc 1 1236 2 is_stmt 1 view .LVU118
 383              	.LVL26:
1237:src/display.c **** 	while (--i >= 0) {
 384              		.loc 1 1237 2 view .LVU119
 385              		.loc 1 1237 8 view .LVU120
1236:src/display.c **** 	while (--i >= 0) {
 386              		.loc 1 1236 4 is_stmt 0 view .LVU121
 387 0068 0D46     		mov	r5, r1
 388 006a C846     		mov	r8, r9
 389              		.loc 1 1237 8 view .LVU122
 390 006c 3446     		mov	r4, r6
 391              	.LVL27:
 392              	.L38:
1238:src/display.c **** 		str = set_dig_s(j, b[i], str);
 393              		.loc 1 1238 3 is_stmt 1 view .LVU123
 394              	.LBB132:
 395              	.LBB133:
 395:src/display.c **** 	else	set_dig(base, ch);
 396              		.loc 1 395 11 view .LVU124
 397              	.LBE133:
 398              	.LBE132:
 399              		.loc 1 1238 23 is_stmt 0 view .LVU125
 400 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 401              	.LBB137:
 402              	.LBB134:
 395:src/display.c **** 	else	set_dig(base, ch);
ARM GAS  /tmp/ccTlkAzC.s 			page 31


 403              		.loc 1 395 15 view .LVU126
 404 0072 2B46     		mov	r3, r5
 405              	.LVL28:
 395:src/display.c **** 	else	set_dig(base, ch);
 406              		.loc 1 395 15 view .LVU127
 407              	.LBE134:
 408              	.LBI132:
 394:src/display.c **** 	if (res) *res++ = ch;
 409              		.loc 1 394 14 is_stmt 1 view .LVU128
 410              	.LBB135:
 395:src/display.c **** 	else	set_dig(base, ch);
 411              		.loc 1 395 2 view .LVU129
 395:src/display.c **** 	else	set_dig(base, ch);
 412              		.loc 1 395 5 is_stmt 0 view .LVU130
 413 0074 95B1     		cbz	r5, .L36
 414              	.LVL29:
 395:src/display.c **** 	else	set_dig(base, ch);
 415              		.loc 1 395 18 view .LVU131
 416 0076 03F8011B 		strb	r1, [r3], #1
 417              	.LVL30:
 395:src/display.c **** 	else	set_dig(base, ch);
 418              		.loc 1 395 15 view .LVU132
 419 007a 1D46     		mov	r5, r3
 420              	.LVL31:
 421              	.L37:
 397:src/display.c **** }
 422              		.loc 1 397 2 is_stmt 1 view .LVU133
 397:src/display.c **** }
 423              		.loc 1 397 2 is_stmt 0 view .LVU134
 424              	.LBE135:
 425              	.LBE137:
1239:src/display.c **** 		j += SEGS_PER_DIGIT;
 426              		.loc 1 1239 3 is_stmt 1 view .LVU135
1237:src/display.c **** 		str = set_dig_s(j, b[i], str);
 427              		.loc 1 1237 8 is_stmt 0 view .LVU136
 428 007c 013C     		subs	r4, r4, #1
 429              	.LVL32:
 430              		.loc 1 1239 5 view .LVU137
 431 007e 08F10908 		add	r8, r8, #9
 432              	.LVL33:
1237:src/display.c **** 		str = set_dig_s(j, b[i], str);
 433              		.loc 1 1237 8 is_stmt 1 view .LVU138
 434 0082 F4D5     		bpl	.L38
1240:src/display.c **** 	}
1241:src/display.c **** 	*jin = j;
 435              		.loc 1 1241 7 is_stmt 0 view .LVU139
 436 0084 26EAE676 		bic	r6, r6, r6, asr #31
 437 0088 09F10909 		add	r9, r9, #9
 438              		.loc 1 1241 2 is_stmt 1 view .LVU140
 439              		.loc 1 1241 7 is_stmt 0 view .LVU141
 440 008c 06EBC606 		add	r6, r6, r6, lsl #3
 441 0090 4E44     		add	r6, r6, r9
1242:src/display.c **** 	return str;
1243:src/display.c **** }
 442              		.loc 1 1243 1 view .LVU142
 443 0092 2846     		mov	r0, r5
1241:src/display.c **** 	return str;
ARM GAS  /tmp/ccTlkAzC.s 			page 32


 444              		.loc 1 1241 7 view .LVU143
 445 0094 3E60     		str	r6, [r7]
1242:src/display.c **** 	return str;
 446              		.loc 1 1242 2 is_stmt 1 view .LVU144
 447              		.loc 1 1243 1 is_stmt 0 view .LVU145
 448 0096 09B0     		add	sp, sp, #36
 449              		.cfi_remember_state
 450              		.cfi_def_cfa_offset 28
 451              		@ sp needed
 452 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 453              	.LVL34:
 454              	.L36:
 455              		.cfi_restore_state
 456              	.LBB138:
 457              	.LBB136:
 396:src/display.c **** 	return res;
 458              		.loc 1 396 7 is_stmt 1 view .LVU146
 459 009c 4046     		mov	r0, r8
 460 009e FFF7FEFF 		bl	set_dig
 461              	.LVL35:
 396:src/display.c **** 	return res;
 462              		.loc 1 396 7 is_stmt 0 view .LVU147
 463 00a2 EBE7     		b	.L37
 464              	.L46:
 465              		.align	2
 466              	.L45:
 467 00a4 CDCCCCCC 		.word	-858993459
 468              	.LBE136:
 469              	.LBE138:
 470              		.cfi_endproc
 471              	.LFE21:
 473              		.section	.text.set_exp_digits_string,"ax",%progbits
 474              		.align	1
 475              		.p2align 2,,3
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu fpv4-sp-d16
 481              	set_exp_digits_string:
 482              	.LVL36:
 483              	.LFB13:
 412:src/display.c **** 	int i;
 484              		.loc 1 412 63 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 413:src/display.c **** 	const int n = res == NULL ? 3 : 4;
 488              		.loc 1 413 2 view .LVU149
 414:src/display.c **** 
 489              		.loc 1 414 2 view .LVU150
 412:src/display.c **** 	int i;
 490              		.loc 1 412 63 is_stmt 0 view .LVU151
 491 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 492              		.cfi_def_cfa_offset 24
 493              		.cfi_offset 3, -24
 494              		.cfi_offset 4, -20
 495              		.cfi_offset 5, -16
ARM GAS  /tmp/ccTlkAzC.s 			page 33


 496              		.cfi_offset 6, -12
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 414:src/display.c **** 
 499              		.loc 1 414 32 view .LVU152
 500 0002 0D1E     		subs	r5, r1, #0
 501 0004 0CBF     		ite	eq
 502 0006 0326     		moveq	r6, #3
 503 0008 0426     		movne	r6, #4
 504              	.LVL37:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 505              		.loc 1 416 2 is_stmt 1 view .LVU153
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 416 12 view .LVU154
 507 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 508 000e 0446     		mov	r4, r0
 509 0010 0644     		add	r6, r6, r0
 510              	.LVL38:
 511              	.LBB139:
 512              	.LBB140:
 396:src/display.c **** 	return res;
 513              		.loc 1 396 7 is_stmt 0 view .LVU155
 514 0012 03F16507 		add	r7, r3, #101
 515 0016 04E0     		b	.L49
 516              	.LVL39:
 517              	.L57:
 395:src/display.c **** 	else	set_dig(base, ch);
 518              		.loc 1 395 18 view .LVU156
 519 0018 03F8011B 		strb	r1, [r3], #1
 520              	.LVL40:
 395:src/display.c **** 	else	set_dig(base, ch);
 521              		.loc 1 395 18 view .LVU157
 522              	.LBE140:
 523              	.LBE139:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 524              		.loc 1 416 2 view .LVU158
 525 001c B442     		cmp	r4, r6
 526              	.LBB146:
 527              	.LBB141:
 395:src/display.c **** 	else	set_dig(base, ch);
 528              		.loc 1 395 15 view .LVU159
 529 001e 1D46     		mov	r5, r3
 530              	.LVL41:
 397:src/display.c **** }
 531              		.loc 1 397 2 is_stmt 1 view .LVU160
 397:src/display.c **** }
 532              		.loc 1 397 2 is_stmt 0 view .LVU161
 533              	.LBE141:
 534              	.LBE146:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 535              		.loc 1 416 35 is_stmt 1 view .LVU162
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 416 12 view .LVU163
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 416 2 is_stmt 0 view .LVU164
 538 0020 0CD0     		beq	.L47
 539              	.LVL42:
ARM GAS  /tmp/ccTlkAzC.s 			page 34


 540              	.L49:
 417:src/display.c **** }
 541              		.loc 1 417 3 is_stmt 1 discriminator 3 view .LVU165
 542              	.LBB147:
 543              	.LBB142:
 395:src/display.c **** 	else	set_dig(base, ch);
 544              		.loc 1 395 11 discriminator 3 view .LVU166
 395:src/display.c **** 	else	set_dig(base, ch);
 545              		.loc 1 395 11 is_stmt 0 discriminator 3 view .LVU167
 546              	.LBE142:
 547              	.LBE147:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 548              		.loc 1 416 22 discriminator 3 view .LVU168
 549 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 550              	.LVL43:
 551              	.LBB148:
 552              	.LBB143:
 395:src/display.c **** 	else	set_dig(base, ch);
 553              		.loc 1 395 15 discriminator 3 view .LVU169
 554 0026 2B46     		mov	r3, r5
 555              	.LVL44:
 395:src/display.c **** 	else	set_dig(base, ch);
 556              		.loc 1 395 15 discriminator 3 view .LVU170
 557              	.LBE143:
 558              	.LBI139:
 394:src/display.c **** 	if (res) *res++ = ch;
 559              		.loc 1 394 14 is_stmt 1 discriminator 3 view .LVU171
 560              	.LBB144:
 395:src/display.c **** 	else	set_dig(base, ch);
 561              		.loc 1 395 2 discriminator 3 view .LVU172
 562              	.LBE144:
 563              	.LBE148:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 564              		.loc 1 416 16 is_stmt 0 discriminator 3 view .LVU173
 565 0028 41B1     		cbz	r1, .L47
 566              	.LVL45:
 567              	.LBB149:
 568              	.LBB145:
 395:src/display.c **** 	else	set_dig(base, ch);
 569              		.loc 1 395 5 discriminator 4 view .LVU174
 570 002a 002D     		cmp	r5, #0
 571 002c F4D1     		bne	.L57
 396:src/display.c **** 	return res;
 572              		.loc 1 396 7 is_stmt 1 view .LVU175
 573 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 574 0032 3844     		add	r0, r0, r7
 575 0034 FFF7FEFF 		bl	set_dig
 576              	.LVL46:
 397:src/display.c **** }
 577              		.loc 1 397 2 view .LVU176
 397:src/display.c **** }
 578              		.loc 1 397 2 is_stmt 0 view .LVU177
 579              	.LBE145:
 580              	.LBE149:
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 581              		.loc 1 416 35 is_stmt 1 view .LVU178
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
ARM GAS  /tmp/ccTlkAzC.s 			page 35


 582              		.loc 1 416 12 view .LVU179
 416:src/display.c **** 		res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 416 2 is_stmt 0 view .LVU180
 584 0038 B442     		cmp	r4, r6
 585 003a F2D1     		bne	.L49
 586              	.LVL47:
 587              	.L47:
 418:src/display.c **** 
 588              		.loc 1 418 1 view .LVU181
 589 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 418:src/display.c **** 
 590              		.loc 1 418 1 view .LVU182
 591              		.cfi_endproc
 592              	.LFE13:
 594 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 595              		.align	1
 596              		.p2align 2,,3
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	hms_step:
 603              	.LVL48:
 604              	.LFB20:
1209:src/display.c **** 	decNumber n;
 605              		.loc 1 1209 69 is_stmt 1 view -0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 40
 608              		@ frame_needed = 0, uses_anonymous_args = 0
1210:src/display.c **** 
 609              		.loc 1 1210 2 view .LVU184
1212:src/display.c **** 	*v = dn_to_int(&n);
 610              		.loc 1 1212 2 view .LVU185
1209:src/display.c **** 	decNumber n;
 611              		.loc 1 1209 69 is_stmt 0 view .LVU186
 612 0000 70B5     		push	{r4, r5, r6, lr}
 613              		.cfi_def_cfa_offset 16
 614              		.cfi_offset 4, -16
 615              		.cfi_offset 5, -12
 616              		.cfi_offset 6, -8
 617              		.cfi_offset 14, -4
 618 0002 8AB0     		sub	sp, sp, #40
 619              		.cfi_def_cfa_offset 56
1209:src/display.c **** 	decNumber n;
 620              		.loc 1 1209 69 view .LVU187
 621 0004 0446     		mov	r4, r0
 622 0006 1646     		mov	r6, r2
1212:src/display.c **** 	*v = dn_to_int(&n);
 623              		.loc 1 1212 2 view .LVU188
 624 0008 01A8     		add	r0, sp, #4
 625              	.LVL49:
1212:src/display.c **** 	*v = dn_to_int(&n);
 626              		.loc 1 1212 2 view .LVU189
 627 000a 0A4A     		ldr	r2, .L60
 628              	.LVL50:
1209:src/display.c **** 	decNumber n;
 629              		.loc 1 1209 69 view .LVU190
ARM GAS  /tmp/ccTlkAzC.s 			page 36


 630 000c 0D46     		mov	r5, r1
1212:src/display.c **** 	*v = dn_to_int(&n);
 631              		.loc 1 1212 2 view .LVU191
 632 000e FFF7FEFF 		bl	decNumberMod
 633              	.LVL51:
1213:src/display.c **** 	dn_mulpow10(&n, x, -2);
 634              		.loc 1 1213 2 is_stmt 1 view .LVU192
1213:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1213 7 is_stmt 0 view .LVU193
 636 0012 01A8     		add	r0, sp, #4
 637 0014 FFF7FEFF 		bl	dn_to_int
 638              	.LVL52:
1214:src/display.c **** 	decNumberTrunc(res, &n);
 639              		.loc 1 1214 2 view .LVU194
 640 0018 2946     		mov	r1, r5
1213:src/display.c **** 	dn_mulpow10(&n, x, -2);
 641              		.loc 1 1213 5 view .LVU195
 642 001a 3060     		str	r0, [r6]
1214:src/display.c **** 	decNumberTrunc(res, &n);
 643              		.loc 1 1214 2 is_stmt 1 view .LVU196
 644 001c 6FF00102 		mvn	r2, #1
 645 0020 01A8     		add	r0, sp, #4
 646 0022 FFF7FEFF 		bl	dn_mulpow10
 647              	.LVL53:
1215:src/display.c **** }
 648              		.loc 1 1215 2 view .LVU197
 649 0026 01A9     		add	r1, sp, #4
 650 0028 2046     		mov	r0, r4
 651 002a FFF7FEFF 		bl	decNumberTrunc
 652              	.LVL54:
1216:src/display.c **** 
 653              		.loc 1 1216 1 is_stmt 0 view .LVU198
 654 002e 0AB0     		add	sp, sp, #40
 655              		.cfi_def_cfa_offset 16
 656              		@ sp needed
 657 0030 70BD     		pop	{r4, r5, r6, pc}
 658              	.LVL55:
 659              	.L61:
1216:src/display.c **** 
 660              		.loc 1 1216 1 view .LVU199
 661 0032 00BF     		.align	2
 662              	.L60:
 663 0034 00000000 		.word	const_100
 664              		.cfi_endproc
 665              	.LFE20:
 667              		.section	.text.set_status_sized,"ax",%progbits
 668              		.align	1
 669              		.p2align 2,,3
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 673              		.fpu fpv4-sp-d16
 675              	set_status_sized:
 676              	.LVL56:
 677              	.LFB37:
1244:src/display.c **** 
1245:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 37


1246:src/display.c **** /* Display the number in H.MS mode.
1247:src/display.c ****  * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1248:src/display.c ****  */
1249:src/display.c **** static void set_x_hms(const decNumber *rgx, char *res) {
1250:src/display.c **** 	decNumber x, y, a, t, u;
1251:src/display.c **** 	int j=0;
1252:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1253:src/display.c **** 	unsigned int hr, min, sec, fs;
1254:src/display.c **** 
1255:src/display.c **** 	if (check_special_dn(rgx, res)) {
1256:src/display.c **** 		if (decNumberIsInfinite(rgx))
1257:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
1258:src/display.c **** 		return;
1259:src/display.c **** 	}
1260:src/display.c **** 
1261:src/display.c **** 	set_separator_decimal_modes();
1262:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1263:src/display.c **** 	dn_abs(&a, rgx);
1264:src/display.c **** 	if (decNumberIsNegative(&x)) {
1265:src/display.c **** 		if (res != NULL)
1266:src/display.c **** 			*res++ += '-';
1267:src/display.c **** 		else
1268:src/display.c **** 			SET_MANT_SIGN;
1269:src/display.c **** 		dn_minus(&x, &x);
1270:src/display.c **** 	}
1271:src/display.c **** 
1272:src/display.c **** 	decNumberHR2HMS(&y, &x);
1273:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1274:src/display.c **** 	decNumberRound(&u, &t);
1275:src/display.c **** 
1276:src/display.c **** 	hms_step(&t, &u, &fs);
1277:src/display.c **** 	hms_step(&u, &t, &sec);
1278:src/display.c **** 	hms_step(&t, &u, &min);
1279:src/display.c **** 	hr = dn_to_int(&t);
1280:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1281:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1282:src/display.c **** 
1283:src/display.c **** 	// degrees
1284:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1285:src/display.c **** 	res = set_dig_s(j, '@', res);
1286:src/display.c **** 	j += SEGS_PER_DIGIT;
1287:src/display.c **** 
1288:src/display.c **** 	// minutes
1289:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1290:src/display.c **** 	res = set_dig_s(j, '\'', res);
1291:src/display.c **** 	j += SEGS_PER_DIGIT;
1292:src/display.c **** 
1293:src/display.c **** 	// seconds
1294:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1295:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1296:src/display.c **** 
1297:src/display.c **** 	// Fractional seconds
1298:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1299:src/display.c **** 
1300:src/display.c **** 	// We're now pointing at the exponent's first digit...
1301:src/display.c **** 	res = set_dig_s(j, '"', res);
1302:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/ccTlkAzC.s 			page 38


1303:src/display.c **** 
1304:src/display.c **** 	// Check for values too big or small
1305:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1306:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
1307:src/display.c **** 	} else if (! dn_eq0(&a)) {
1308:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
1309:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
1310:src/display.c **** 		}
1311:src/display.c **** 	}
1312:src/display.c **** }
1313:src/display.c **** 
1314:src/display.c **** 
1315:src/display.c **** static int set_x_fract(const decNumber *rgx, char *res) {
1316:src/display.c **** 	decNumber x, w, n, d, t;
1317:src/display.c **** 	char buf[32], *p = buf;
1318:src/display.c **** 	int j;
1319:src/display.c **** 
1320:src/display.c **** 	if (check_special_dn(rgx, res))
1321:src/display.c **** 		return 1;
1322:src/display.c **** 	dn_abs(&x, rgx);
1323:src/display.c **** 	if (dn_ge(&x, &const_100000))
1324:src/display.c **** 		return 0;
1325:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1326:src/display.c **** 		return 0;
1327:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1328:src/display.c **** 		if (res != NULL)
1329:src/display.c **** 			*res++ += '-';
1330:src/display.c **** 		else
1331:src/display.c **** 			SET_MANT_SIGN;
1332:src/display.c **** 	}
1333:src/display.c **** 	decNumberFrac(&w, &x);
1334:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1335:src/display.c **** 
1336:src/display.c **** 	dn_divide(&t, &n, &d);
1337:src/display.c **** 	dn_compare(&t, &t, &w);
1338:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1339:src/display.c **** 
1340:src/display.c **** 	if (dn_eq(&n, &d)) {
1341:src/display.c **** 		dn_inc(&w);
1342:src/display.c **** 		decNumberZero(&n);
1343:src/display.c **** 	}
1344:src/display.c **** 
1345:src/display.c **** 	if (!UState.improperfrac) {
1346:src/display.c **** 		if (!dn_eq0(&w)) {
1347:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
1348:src/display.c **** 			*p++ = ' ';
1349:src/display.c **** 		}
1350:src/display.c **** 	} else {
1351:src/display.c **** 		dn_multiply(&x, &w, &d);
1352:src/display.c **** 		dn_add(&n, &n, &x);
1353:src/display.c **** 	}
1354:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1355:src/display.c **** 	*p++ = '/';
1356:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1357:src/display.c **** 	*p = '\0';
1358:src/display.c **** 	if ((p - 12) > buf) {
1359:src/display.c **** 		p -= 12;
ARM GAS  /tmp/ccTlkAzC.s 			page 39


1360:src/display.c **** 		*p = '<';
1361:src/display.c **** 	} else	p = buf;
1362:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1363:src/display.c **** 		res = set_dig_s(j, *p, res);
1364:src/display.c **** 		j += SEGS_PER_DIGIT;
1365:src/display.c **** 	}
1366:src/display.c **** 
1367:src/display.c **** 	if (dn_eq0(&t))
1368:src/display.c **** 		p = (char *)S7_fract_EQ;
1369:src/display.c **** 	else if (decNumberIsNegative(&t))
1370:src/display.c **** 		p = (char *)S7_fract_LT;
1371:src/display.c **** 	else
1372:src/display.c **** 		p = (char *)S7_fract_GT;
1373:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1374:src/display.c **** 		res = set_dig_s(j, *p, res);
1375:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
1376:src/display.c **** 	}
1377:src/display.c **** 	return 1;
1378:src/display.c **** }
1379:src/display.c **** 
1380:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1381:src/display.c **** enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1382:src/display.c **** 	decNumber c;
1383:src/display.c **** 	int true_exp, x=0;
1384:src/display.c **** 	int min_pos_exp, max_neg_exp;
1385:src/display.c **** 
1386:src/display.c **** 	if ( mode != MODE_STD ) {
1387:src/display.c **** 		min_pos_exp = 9;
1388:src/display.c **** 		max_neg_exp = -5;
1389:src/display.c **** 	}
1390:src/display.c **** 	else {
1391:src/display.c **** 		min_pos_exp = 12;
1392:src/display.c **** 		max_neg_exp = -1 - dispdigs;
1393:src/display.c **** 	}
1394:src/display.c **** 
1395:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1396:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1397:src/display.c **** 
1398:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1399:src/display.c **** 		x = *dd;
1400:src/display.c **** 	}
1401:src/display.c **** 
1402:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1403:src/display.c **** 		// decimals needed; *dd adjusted to provide correct number
1404:src/display.c **** 		*dd += -true_exp;
1405:src/display.c **** 		return MODE_FIX;
1406:src/display.c **** 	}
1407:src/display.c **** 
1408:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1409:src/display.c **** 		return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1410:src/display.c **** 	}
1411:src/display.c **** 	else {
1412:src/display.c **** 		return MODE_STD;
1413:src/display.c **** 	}
1414:src/display.c ****  }
1415:src/display.c **** #else
1416:src/display.c **** enum display_modes std_round_fix(const decNumber *z) {
ARM GAS  /tmp/ccTlkAzC.s 			page 40


1417:src/display.c **** 	decNumber b, c;
1418:src/display.c **** 
1419:src/display.c **** 	dn_1(&b);
1420:src/display.c **** 	b.exponent -= UState.dispdigs;
1421:src/display.c **** 	dn_abs(&c, z);
1422:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1423:src/display.c **** 		return MODE_FIX;
1424:src/display.c **** 	return MODE_STD;
1425:src/display.c **** }
1426:src/display.c **** #endif
1427:src/display.c **** 
1428:src/display.c **** /* SHOW display mode
1429:src/display.c ****  * in double precision show left or right part
1430:src/display.c ****  * 4 + 12 + 3 or 6 + 10 + 4 version
1431:src/display.c ****  */
1432:src/display.c **** static void show_x(char *x, int exp) {
1433:src/display.c **** 	const int dbl = is_dblmode();
1434:src/display.c **** 	char *p;
1435:src/display.c **** 	int i, j;
1436:src/display.c **** 	char *upper_str;
1437:src/display.c **** 	enum separator_modes separator_mode;
1438:src/display.c **** 	char decimal_mark;
1439:src/display.c **** 	char thousands_sep;
1440:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1441:src/display.c **** 	const int grouping = 0;
1442:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1443:src/display.c **** 	const int grouping = !UState.nothousands;
1444:src/display.c **** #else
1445:src/display.c **** 	const int grouping = 1;
1446:src/display.c **** #endif
1447:src/display.c **** 	int negative;
1448:src/display.c **** 
1449:src/display.c **** 	if (x[0] == '-') {
1450:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1451:src/display.c **** 		static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1452:src/display.c **** 
1453:src/display.c **** 		xcopy(x + 4, x + 1, 34);
1454:src/display.c **** 		xcopy(x, small_minus, 4);
1455:src/display.c **** 		x += 4;
1456:src/display.c **** 		negative = 4;
1457:src/display.c **** #else
1458:src/display.c **** 		++x;
1459:src/display.c **** 		negative = 1;
1460:src/display.c **** #endif
1461:src/display.c **** 	}
1462:src/display.c **** 	else negative = 0;
1463:src/display.c **** 
1464:src/display.c **** 	p = find_char(x, '\0');
1465:src/display.c **** 	xset(p, '0', 34 - (p - x));
1466:src/display.c **** 
1467:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1468:src/display.c **** 		separator_mode = SEP_COMMA;
1469:src/display.c **** 		decimal_mark = '.';
1470:src/display.c **** 		thousands_sep = ',';
1471:src/display.c **** 	}
1472:src/display.c **** 	else {
1473:src/display.c **** 		separator_mode = SEP_DOT;
ARM GAS  /tmp/ccTlkAzC.s 			page 41


1474:src/display.c **** 		decimal_mark = ',';
1475:src/display.c **** 		thousands_sep = '.';
1476:src/display.c **** 	}
1477:src/display.c **** 
1478:src/display.c **** 	if (State2.window) { // right half in double precision mode
1479:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1480:src/display.c **** 		static const char small_dots[13] = { '\007', '\341', ',', '\006',
1481:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1482:src/display.c **** 
1483:src/display.c **** 		upper_str = x + 3;
1484:src/display.c **** 		xcopy(upper_str, small_dots, 13);
1485:src/display.c **** 		if (grouping) {
1486:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1487:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
1488:src/display.c **** 			x += 3 + 13 + 7;
1489:src/display.c **** 		}
1490:src/display.c **** 		else x += 3 + 13 + 6;
1491:src/display.c **** #else
1492:src/display.c **** 		upper_str = x + 13;
1493:src/display.c **** 		xset(upper_str, '.', 3);
1494:src/display.c **** 		if (grouping) {
1495:src/display.c **** 			xcopy(upper_str + 7, upper_str + 6, 19);
1496:src/display.c **** 			upper_str[6] = thousands_sep;
1497:src/display.c **** 			x += 13 + 3 + 7;
1498:src/display.c **** 		}
1499:src/display.c **** 		else x += 13 + 3 + 6;
1500:src/display.c **** #endif
1501:src/display.c **** 		negative = 0;
1502:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
1503:src/display.c **** 	}
1504:src/display.c **** 	else {
1505:src/display.c **** 		upper_str = x;
1506:src/display.c **** 		xcopy(x + 2, x + 1, 16);
1507:src/display.c **** 		x[1] = decimal_mark;
1508:src/display.c **** 		if (grouping) {
1509:src/display.c **** 			xcopy(x + 6, x + 5, 13);
1510:src/display.c **** 			x[5] = thousands_sep;
1511:src/display.c **** 			x += 9;
1512:src/display.c **** 		}
1513:src/display.c **** 		else x += 8;
1514:src/display.c **** 		if (dbl) {
1515:src/display.c **** 			if (exp < 0) {
1516:src/display.c **** 				x[9] = '-';
1517:src/display.c **** 				exp = -exp;
1518:src/display.c **** 			}
1519:src/display.c **** 			else
1520:src/display.c **** 				x[9] = ' ';
1521:src/display.c **** 			j = exp / 1000;
1522:src/display.c **** 			x[10] = '0' + j;
1523:src/display.c **** 			exp -= 1000 * j;
1524:src/display.c **** 		}
1525:src/display.c **** 		else {
1526:src/display.c **** 			x[9] = '\0';
1527:src/display.c **** 			x[10] = '\0';
1528:src/display.c **** 		}
1529:src/display.c **** 		xcopy(x + 1, x, 11);
1530:src/display.c **** 		*x = 0;
ARM GAS  /tmp/ccTlkAzC.s 			page 42


1531:src/display.c **** 		set_exp(exp, 1, CNULL);
1532:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
1533:src/display.c **** 	}
1534:src/display.c **** 	if (grouping) {
1535:src/display.c **** 		for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1536:src/display.c **** 			set_separator(i, separator_mode, CNULL);
1537:src/display.c **** 		}
1538:src/display.c **** 	}
1539:src/display.c **** 
1540:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1541:src/display.c **** 		set_dig(j, x[i]);
1542:src/display.c **** 
1543:src/display.c **** 	*x = '\0';
1544:src/display.c **** 	set_status(upper_str - negative);
1545:src/display.c **** }
1546:src/display.c **** 
1547:src/display.c **** 
1548:src/display.c **** /* Display the X register in the numeric portion of the display.
1549:src/display.c ****  * We have to account for the various display modes and numbers of
1550:src/display.c ****  * digits.
1551:src/display.c ****  */
1552:src/display.c **** static void set_x(const REGISTER *rgx, char *res, int dbl) {
1553:src/display.c **** 	decNumber z;
1554:src/display.c **** 	int digits = DISPLAY_DIGITS;
1555:src/display.c **** 
1556:src/display.c **** 	if (dbl)
1557:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
1558:src/display.c **** 	else
1559:src/display.c **** 		decimal64ToNumber(&(rgx->s), &z);
1560:src/display.c **** 	set_x_dn(&z, res, &digits);
1561:src/display.c **** }
1562:src/display.c **** 
1563:src/display.c **** void set_x_dn(decNumber *z, char *res, int *display_digits) {
1564:src/display.c **** 	char x[50], *obp = x;
1565:src/display.c **** 	int odig = 0;
1566:src/display.c **** 	int show_exp = 0;
1567:src/display.c **** 	int j;
1568:src/display.c **** 	char mantissa[64];
1569:src/display.c **** 	int exp = 0;
1570:src/display.c **** 	char *p = mantissa;
1571:src/display.c **** 	char *r;
1572:src/display.c **** 	const char *q;
1573:src/display.c **** 	int count, i;
1574:src/display.c **** 	int extra_digits = 0;
1575:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1576:src/display.c **** 	int dd;
1577:src/display.c **** 	int dispdigs;
1578:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1579:src/display.c **** #else
1580:src/display.c **** 	int dd = UState.dispdigs;
1581:src/display.c **** 	int mode = UState.dispmode;
1582:src/display.c **** #endif
1583:src/display.c **** 	int c;
1584:src/display.c **** 	int negative = 0;
1585:src/display.c **** 	int trimzeros = 0;
1586:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1587:src/display.c **** 	const int show_large_exponent = 0;
ARM GAS  /tmp/ccTlkAzC.s 			page 43


1588:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1589:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1590:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1591:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1592:src/display.c **** #else
1593:src/display.c **** 	const int show_large_exponent = 1;
1594:src/display.c **** #endif
1595:src/display.c **** 
1596:src/display.c **** 	set_separator_decimal_modes();
1597:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1598:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1599:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
1600:src/display.c **** 			if (State2.hms) {
1601:src/display.c **** 				set_x_hms(z, res);
1602:src/display.c ****  				return;
1603:src/display.c **** 			}
1604:src/display.c **** 			else if (UState.fract) {
1605:src/display.c **** 				if (set_x_fract(z, res))
1606:src/display.c **** 					return;
1607:src/display.c **** 			}
1608:src/display.c **** 		}
1609:src/display.c **** 	}		
1610:src/display.c **** #else
1611:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1612:src/display.c **** 		if (State2.hms) {
1613:src/display.c **** 			set_x_hms(z, res);
1614:src/display.c **** 			State2.hms = 0;
1615:src/display.c **** 			return;
1616:src/display.c **** 		} else if (UState.fract) {
1617:src/display.c **** 			if (set_x_fract(z, res))
1618:src/display.c **** 				return;
1619:src/display.c **** 		}
1620:src/display.c **** 	}
1621:src/display.c **** #endif
1622:src/display.c **** 
1623:src/display.c **** 	if (check_special_dn(z, res))
1624:src/display.c **** 		return;
1625:src/display.c **** 
1626:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1627:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
1628:src/display.c **** 		exp = z->exponent + z->digits - 1;
1629:src/display.c **** 		z->exponent = 0;
1630:src/display.c **** 	}
1631:src/display.c **** 
1632:src/display.c **** 	xset(x, '\0', sizeof(x));
1633:src/display.c **** 
1634:src/display.c **** 	if (dn_eq0(z)) {
1635:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1636:src/display.c **** 			x[0] = '-';
1637:src/display.c **** 			x[1] = '0';
1638:src/display.c **** 		} else
1639:src/display.c **** 			x[0] = '0';
1640:src/display.c **** 	} else
1641:src/display.c **** 		decNumberToString(z, x);
1642:src/display.c **** 
1643:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1644:src/display.c **** 		show_x(x, exp);
ARM GAS  /tmp/ccTlkAzC.s 			page 44


1645:src/display.c **** 		return;
1646:src/display.c **** 	}
1647:src/display.c **** 
1648:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1649:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
1650:src/display.c **** 		//  ALL mode: fill the display
1651:src/display.c **** 		dd = *display_digits - 1;
1652:src/display.c **** 	else
1653:src/display.c **** 		dd = dispdigs;
1654:src/display.c **** 
1655:src/display.c **** 	if (mode == MODE_STD || mode >= MODE_SIG) {
1656:src/display.c **** 		int orig_mode = mode;
1657:src/display.c **** 
1658:src/display.c **** 		mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
1659:src/display.c **** 		if (orig_mode != MODE_SIG0)
1660:src/display.c **** 			// allow zeros to be trimmed
1661:src/display.c **** 			trimzeros = 1;
1662:src/display.c **** 		if (orig_mode == MODE_STD)
1663:src/display.c **** 			dd = *display_digits - 1;
1664:src/display.c ****  	}
1665:src/display.c **** #else
1666:src/display.c **** 	if (mode == MODE_STD) {
1667:src/display.c **** 		mode = std_round_fix(z);
1668:src/display.c **** 		trimzeros = 1;
1669:src/display.c **** 		dd = *display_digits - 1;
1670:src/display.c **** 	} else if (dd >= *display_digits)
1671:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
1672:src/display.c **** 		dd = *display_digits - 1;
1673:src/display.c **** #endif
1674:src/display.c **** 
1675:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
1676:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
1677:src/display.c **** 
1678:src/display.c **** 	q = find_char(x, 'E');
1679:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1680:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
1681:src/display.c **** 	if (q == NULL) exp = 0;
1682:src/display.c **** 	else {
1683:src/display.c **** 		exp = s_to_i(q+1);
1684:src/display.c **** 		if (*q == 'D') exp = -exp;
1685:src/display.c **** 	}
1686:src/display.c **** #else
1687:src/display.c **** 	if (q == NULL) exp = 0;
1688:src/display.c **** 	else exp = s_to_i(q+1);
1689:src/display.c **** #endif
1690:src/display.c **** 
1691:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
1692:src/display.c **** 	for (q=x; *q == ' '; q++);
1693:src/display.c **** 	if (!res) {
1694:src/display.c **** 		CLR_EXP_SIGN;
1695:src/display.c **** 		CLR_MANT_SIGN;
1696:src/display.c **** 	}
1697:src/display.c **** 	if (*q == '-') {
1698:src/display.c **** 		negative = 1;
1699:src/display.c **** 		q++;
1700:src/display.c **** 	} else if (*q == '+')
1701:src/display.c **** 		q++;
ARM GAS  /tmp/ccTlkAzC.s 			page 45


1702:src/display.c **** 	for (; *q == '0'; q++);
1703:src/display.c **** 	if (*q == '.') {
1704:src/display.c **** 		do
1705:src/display.c **** 			exp--;
1706:src/display.c **** 		while (*++q == '0');
1707:src/display.c **** 		while (*q >= '0' && *q <= '9')
1708:src/display.c **** 			*p++ = *q++;
1709:src/display.c **** 	} else {
1710:src/display.c **** 		if (*q >= '0' && *q <= '9')
1711:src/display.c **** 			*p++ = *q++;
1712:src/display.c **** 		while (*q >= '0' && *q <= '9') {
1713:src/display.c **** 			*p++ = *q++;
1714:src/display.c **** 			exp++;
1715:src/display.c **** 		}
1716:src/display.c **** 		if (*q == '.') {
1717:src/display.c **** 			q++;
1718:src/display.c **** 			while (*q >= '0' && *q <= '9')
1719:src/display.c **** 				*p++ = *q++;
1720:src/display.c **** 		}
1721:src/display.c **** 	}
1722:src/display.c **** 
1723:src/display.c **** 	if (mode == MODE_FIX) {
1724:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
1725:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
1726:src/display.c **** 		else {
1727:src/display.c **** 			extra_digits = exp;
1728:src/display.c **** 			/* We might have push the fixed decimals off the
1729:src/display.c **** 			 * screen so adjust if so.
1730:src/display.c **** 			 */
1731:src/display.c **** 			if (extra_digits + dd > (*display_digits - 1))
1732:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
1733:src/display.c **** 		}
1734:src/display.c **** 	}
1735:src/display.c **** 
1736:src/display.c **** 	// Round the mantissa to the number of digits desired
1737:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
1738:src/display.c **** 	if (*p >= '5') {	// Round up
1739:src/display.c **** 		*p = '0';
1740:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
1741:src/display.c **** 		if (r == p) {   // Special case 9.9999999
1742:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
1743:src/display.c **** 			mantissa[0] = '1';
1744:src/display.c **** 			exp++;
1745:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
1746:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
1747:src/display.c **** 				extra_digits = 0;
1748:src/display.c **** 			}
1749:src/display.c **** 		} else {
1750:src/display.c **** 			while (*--p == '9')
1751:src/display.c **** 				*p = '0';
1752:src/display.c **** 			(*p)++;
1753:src/display.c **** 		}
1754:src/display.c **** 	}
1755:src/display.c **** 
1756:src/display.c **** 	// Zap what is left
1757:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
1758:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 46


1759:src/display.c **** 	p = mantissa;
1760:src/display.c **** 	switch (mode) {
1761:src/display.c **** 	default:
1762:src/display.c **** 	case MODE_STD:   
1763:src/display.c **** 		for (count = *display_digits; mantissa[count] == '0'; count--);
1764:src/display.c **** 		if (count != *display_digits)
1765:src/display.c **** 			count++;
1766:src/display.c **** 		// Too big or too small to fit on display
1767:src/display.c **** 		if (exp >= *display_digits || exp < (count - *display_digits)) {
1768:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
1769:src/display.c **** 			case -1:
1770:src/display.c **** 			case 2:
1771:src/display.c **** 				*obp++ = *p++;
1772:src/display.c **** 				odig++;
1773:src/display.c **** 				dd--;
1774:src/display.c **** 				exp--;
1775:src/display.c **** 			case -2:
1776:src/display.c **** 			case 1:
1777:src/display.c **** 				*obp++ = *p++;
1778:src/display.c **** 				odig++;
1779:src/display.c **** 				dd--;
1780:src/display.c **** 				exp--;
1781:src/display.c **** 			case 0:
1782:src/display.c **** 				;
1783:src/display.c **** 			};
1784:src/display.c **** 			*obp++ = *p++;
1785:src/display.c **** 			odig++;
1786:src/display.c **** 			*obp++ = '.';
1787:src/display.c **** 			for (i=1; i<count; i++) {
1788:src/display.c **** 				*obp++ = *p++;
1789:src/display.c **** 				odig++;
1790:src/display.c **** 			}
1791:src/display.c **** 			show_exp = 1;
1792:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
1793:src/display.c **** 			for(i=0; i<=exp; i++) {
1794:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1795:src/display.c **** 					*obp++ = ',';
1796:src/display.c **** 				*obp++ = *p++;
1797:src/display.c **** 				odig++;
1798:src/display.c **** 			}
1799:src/display.c **** 			*obp++ = '.';
1800:src/display.c **** 			if (count > (exp + 1)) {
1801:src/display.c **** 				for (i=exp+1; i<count; i++) {
1802:src/display.c **** 					*obp++ = *p++;
1803:src/display.c **** 					odig++;
1804:src/display.c **** 				}
1805:src/display.c **** 			}
1806:src/display.c **** 		} else {		// All digits to right of decimal point
1807:src/display.c **** 			*obp++ = '0';
1808:src/display.c **** 			odig++;
1809:src/display.c **** 			*obp++ = '.';
1810:src/display.c **** 			for (i=exp+1; i<0; i++) {
1811:src/display.c **** 				*obp++ = '0';
1812:src/display.c **** 				odig++;
1813:src/display.c **** 			}
1814:src/display.c **** 			for (i=0; i<count; i++) {
1815:src/display.c **** 				*obp++ = *p++;
ARM GAS  /tmp/ccTlkAzC.s 			page 47


1816:src/display.c **** 				odig++;
1817:src/display.c **** 			}
1818:src/display.c **** 		}
1819:src/display.c **** 		break;
1820:src/display.c **** 
1821:src/display.c **** 	case MODE_FIX:
1822:src/display.c **** 		j = 0;
1823:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
1824:src/display.c **** 			for (i=0; i<=exp; i++) {
1825:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
1826:src/display.c **** 					*obp++ = ',';
1827:src/display.c **** 				*obp++ = *p++;
1828:src/display.c **** 				odig++;
1829:src/display.c **** 			}
1830:src/display.c **** 			*obp++ = '.';
1831:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
1832:src/display.c **** 				*obp++ = *p++;
1833:src/display.c **** 				odig++;
1834:src/display.c **** 			}
1835:src/display.c **** 		} else {		// All digits to right of decimal point
1836:src/display.c **** 			*obp++ = '0';
1837:src/display.c **** 			odig++;
1838:src/display.c **** 			*obp++ = '.';
1839:src/display.c **** 			for (i=exp+1; i<0; i++) {
1840:src/display.c **** 				*obp++ = '0';
1841:src/display.c **** 				odig++;
1842:src/display.c **** 				dd--;
1843:src/display.c **** 			}
1844:src/display.c **** 			while (dd-- > 0) {
1845:src/display.c **** 				*obp++ = *p++;
1846:src/display.c **** 				odig++;
1847:src/display.c **** 			}
1848:src/display.c **** 		}
1849:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
1850:src/display.c **** 		if (trimzeros)
1851:src/display.c **** 			while (obp > x && obp[-1] == '0') {
1852:src/display.c **** 				obp--;
1853:src/display.c **** 				odig--;
1854:src/display.c **** 			}
1855:src/display.c **** #endif			
1856:src/display.c **** 		break;
1857:src/display.c **** 
1858:src/display.c **** 	case MODE_ENG:
1859:src/display.c **** 		switch (exp % 3) {
1860:src/display.c **** 		case -1:
1861:src/display.c **** 		case 2:
1862:src/display.c **** 			*obp++ = *p++;
1863:src/display.c **** 			odig++;
1864:src/display.c **** 			dd--;
1865:src/display.c **** 			exp--;
1866:src/display.c **** 		case -2:
1867:src/display.c **** 		case 1:
1868:src/display.c **** 			*obp++ = *p++;
1869:src/display.c **** 			odig++;
1870:src/display.c **** 			dd--;
1871:src/display.c **** 			exp--;
1872:src/display.c **** 		case 0:
ARM GAS  /tmp/ccTlkAzC.s 			page 48


1873:src/display.c **** 			;
1874:src/display.c **** 		};
1875:src/display.c **** 	// Falling through
1876:src/display.c **** 
1877:src/display.c **** 	case MODE_SCI:
1878:src/display.c **** 		*obp++ = *p++;
1879:src/display.c **** 		odig++;
1880:src/display.c **** 		*obp++ = '.';
1881:src/display.c **** 		dd--;
1882:src/display.c **** 		while (dd-- >= 0) {
1883:src/display.c **** 			*obp++ = *p++;
1884:src/display.c **** 			odig++;
1885:src/display.c **** 		}
1886:src/display.c **** 		show_exp = 1;
1887:src/display.c **** 	}
1888:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1889:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
1890:src/display.c **** 		while (obp > x && obp[-1] == '0') {
1891:src/display.c **** 			obp--;
1892:src/display.c **** 			odig--;
1893:src/display.c **** 		}
1894:src/display.c **** #endif	
1895:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
1896:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
1897:src/display.c **** 		set_x_dn(z, res, display_digits);
1898:src/display.c **** 		return;
1899:src/display.c **** 	}
1900:src/display.c **** 	/* Finally, send the output to the display */
1901:src/display.c **** 	*obp = '\0';
1902:src/display.c **** 	if (odig > *display_digits)
1903:src/display.c **** 		odig = *display_digits;
1904:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
1905:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
1906:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
1907:src/display.c **** 	if (negative) {
1908:src/display.c **** 		if (res) *res++ = '-';
1909:src/display.c **** 		else {
1910:src/display.c **** 			if (j == 0)
1911:src/display.c **** 				SET_MANT_SIGN;
1912:src/display.c **** 			else
1913:src/display.c **** 				set_dig(j - SEGS_PER_DIGIT, '-');
1914:src/display.c **** 		}
1915:src/display.c **** 	}
1916:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
1917:src/display.c **** 		if (c == '.') {
1918:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1919:src/display.c **** 		} else if (c == ',') {
1920:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
1921:src/display.c **** 		} else {
1922:src/display.c **** 			res = set_dig_s(j, c, res);
1923:src/display.c **** 			j += SEGS_PER_DIGIT;
1924:src/display.c **** 		}
1925:src/display.c **** 	}
1926:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
1927:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
1928:src/display.c **** 		if ( !res ) {
1929:src/display.c **** 				set_exp(exp, 4, res);
ARM GAS  /tmp/ccTlkAzC.s 			page 49


1930:src/display.c **** 		}
1931:src/display.c **** 		else {
1932:src/display.c **** 			set_exp(exp, 0, res);
1933:src/display.c **** 		}
1934:src/display.c **** 	}
1935:src/display.c **** #else
1936:src/display.c **** 	if (show_exp)
1937:src/display.c **** 		set_exp(exp, 0, res);
1938:src/display.c **** #endif
1939:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
1940:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
1941:src/display.c **** 	*display_digits = odig;
1942:src/display.c **** }
1943:src/display.c **** 
1944:src/display.c **** #if defined(QTGUI) || defined(IOS)
1945:src/display.c **** void format_display(char *buf) {
1946:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
1947:src/display.c **** 	{
1948:src/display.c **** 		const char *p = get_cmdline();
1949:src/display.c **** 		if (p == NULL) {
1950:src/display.c **** 			format_reg(regX_idx, buf);
1951:src/display.c **** 		} else {
1952:src/display.c **** 			scopy(buf, p);
1953:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
1954:src/display.c **** 			if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
1955:src/display.c **** 				scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
1956:src/display.c **** 				buf[CmdLineEex] = 'E';
1957:src/display.c **** 				buf[CmdLineEex+1] = '-';
1958:src/display.c **** 			}
1959:src/display.c **** #  endif
1960:src/display.c **** 		}
1961:src/display.c **** 	}
1962:src/display.c **** 	else {
1963:src/display.c **** 		buf[0]=0;
1964:src/display.c **** 	}
1965:src/display.c **** }
1966:src/display.c **** #endif
1967:src/display.c **** 
1968:src/display.c **** void format_reg(int index, char *buf) {
1969:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
1970:src/display.c **** 
1971:src/display.c **** 	if (is_intmode())
1972:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
1973:src/display.c **** #ifndef HP16C_MODE_CHANGE
1974:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
1975:src/display.c **** 		decNumber x;
1976:src/display.c **** 		int s;
1977:src/display.c **** 		unsigned long long int v;
1978:src/display.c **** 
1979:src/display.c **** 		getRegister(&x, index);
1980:src/display.c **** 		v = dn_to_ull(&x, &s);
1981:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
1982:src/display.c **** 	}
1983:src/display.c **** #endif
1984:src/display.c **** 	else
1985:src/display.c **** 		set_x(r, buf, UState.mode_double);
1986:src/display.c **** }
ARM GAS  /tmp/ccTlkAzC.s 			page 50


1987:src/display.c **** 
1988:src/display.c **** /* Display the status screen */
1989:src/display.c **** static void show_status(void) {
1990:src/display.c **** 	int i, n;
1991:src/display.c **** 	int j = SEGS_EXP_BASE;
1992:src/display.c **** 	const int status = State2.status - 3;
1993:src/display.c **** 	char buf[16], *p = buf;
1994:src/display.c **** 	unsigned int pc;
1995:src/display.c **** 
1996:src/display.c **** 	if (status == -2) {
1997:src/display.c **** 		set_status("Free:");
1998:src/display.c **** 		p = num_arg(buf, free_mem());
1999:src/display.c **** 		p = scopy(p, " , FL. ");
2000:src/display.c **** 		p = num_arg(p, free_flash());
2001:src/display.c **** 		*p = '\0';
2002:src/display.c **** 		set_digits_string(buf, 0);
2003:src/display.c **** 	}
2004:src/display.c **** 	else if (status == -1) {
2005:src/display.c **** 		/* Top line */
2006:src/display.c **** 		p = scopy(buf, "Regs:");
2007:src/display.c **** 		if (SizeStatRegs)
2008:src/display.c **** 			p = scopy(p, " \221\006\006+");
2009:src/display.c **** 		*p = '\0';
2010:src/display.c **** 		set_status(buf);
2011:src/display.c **** 
2012:src/display.c **** 		/* Bottom line */
2013:src/display.c **** 		p = num_arg(buf, global_regs());
2014:src/display.c **** 		if (LocalRegs < 0) {
2015:src/display.c **** 			p = scopy(p, " , Loc. ");
2016:src/display.c **** 			p = num_arg(p, local_regs());
2017:src/display.c **** 		}
2018:src/display.c **** 		*p = '\0';
2019:src/display.c **** 		set_digits_string(buf, 0);
2020:src/display.c **** 	} else {
2021:src/display.c **** 		int base;
2022:src/display.c **** 		int end;
2023:src/display.c **** 		int group = 10;
2024:src/display.c **** 		int start = 0;
2025:src/display.c **** 		
2026:src/display.c **** 		if (status <= 9) {
2027:src/display.c **** 			base = 10 * status;
2028:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
2029:src/display.c **** 			p = scopy(buf, "FL ");
2030:src/display.c **** 			p = num_arg_0(p, base, 2);
2031:src/display.c **** 			*p++ = '-';
2032:src/display.c **** 			p = num_arg_0(p, end, 2);
2033:src/display.c **** 			*p = '\0';
2034:src/display.c **** 			set_status(buf);
2035:src/display.c **** 		}
2036:src/display.c **** 		else if (status == 10) {
2037:src/display.c **** 			base = regX_idx;
2038:src/display.c **** 			end = regK_idx;
2039:src/display.c **** 			start = 3;
2040:src/display.c **** 			group = 4;
2041:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
2042:src/display.c **** 		}
2043:src/display.c **** 		else { // status == 11
ARM GAS  /tmp/ccTlkAzC.s 			page 51


2044:src/display.c **** 			base = LOCAL_FLAG_BASE;
2045:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
2046:src/display.c **** 			set_status("FL.00-.15");
2047:src/display.c **** 		}
2048:src/display.c **** 		j = start * SEGS_PER_DIGIT;
2049:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
2050:src/display.c **** 		j += SEGS_PER_DIGIT;
2051:src/display.c **** 		for (i = start; i < group + start; i++) {
2052:src/display.c **** 			int k = i + base - start;
2053:src/display.c **** 			int l = get_user_flag(k);
2054:src/display.c **** 			k += group;
2055:src/display.c **** 			if (end >= k) {
2056:src/display.c **** 				l |= (get_user_flag(k) << 1);
2057:src/display.c **** 				k += group;
2058:src/display.c **** 				if (end >= k)
2059:src/display.c **** 					l |= (get_user_flag(k) << 2);
2060:src/display.c **** 			}
2061:src/display.c **** 			set_dig(j, l);
2062:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
2063:src/display.c **** 			j += SEGS_PER_DIGIT;
2064:src/display.c **** 			if (i == 4) {
2065:src/display.c **** 				set_dig(j, 8);
2066:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
2067:src/display.c **** 				j += SEGS_PER_DIGIT;
2068:src/display.c **** 			}
2069:src/display.c **** 		}
2070:src/display.c **** 	}
2071:src/display.c **** 
2072:src/display.c **** 	j = SEGS_EXP_BASE;
2073:src/display.c **** 	pc = state_pc();
2074:src/display.c **** 	if (isXROM(pc))
2075:src/display.c **** 		pc = 1;
2076:src/display.c **** 	for (n=i=0; i<4; i++) {
2077:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2078:src/display.c **** 			if (++n == 4) {
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2080:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2081:src/display.c **** 			} else {
2082:src/display.c **** 				set_dig(j, 'A'+i);
2083:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
2084:src/display.c **** 			}
2085:src/display.c **** 		}
2086:src/display.c **** 	}
2087:src/display.c **** }
2088:src/display.c **** 
2089:src/display.c **** 
2090:src/display.c **** /* Display the list of alpha labels */
2091:src/display.c **** static void show_label(void) {
2092:src/display.c **** 	char buf[16];
2093:src/display.c **** 	unsigned short int pc = State2.digval;
2094:src/display.c **** 	unsigned int op = getprog(pc);
2095:src/display.c **** 	int n = nLIB(pc);
2096:src/display.c **** 	unsigned short int lblpc;
2097:src/display.c **** 
2098:src/display.c **** 	set_status(prt((opcode)op, buf));
2099:src/display.c **** 	set_digits_string(libname[n], 0);
2100:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccTlkAzC.s 			page 52


2101:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2102:src/display.c **** #endif
2103:src/display.c **** 
2104:src/display.c **** 	if (op & OP_DBL) {
2105:src/display.c **** 		lblpc = findmultilbl(op, 0);
2106:src/display.c **** 		if (lblpc != pc) {
2107:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2108:src/display.c **** 			n = nLIB(lblpc);
2109:src/display.c **** 			if (n == REGION_RAM)
2110:src/display.c **** 				set_exp(lblpc, 1, CNULL);
2111:src/display.c **** 			else {
2112:src/display.c **** 				set_exp_digits_string(libname[n], CNULL);
2113:src/display.c **** #ifndef REALBUILD
2114:src/display.c **** 				scopy(LastDisplayedNumber, libname_text[n]);
2115:src/display.c **** #endif
2116:src/display.c **** 			}
2117:src/display.c **** 		}
2118:src/display.c **** 	}
2119:src/display.c **** }
2120:src/display.c **** 
2121:src/display.c **** /* Display a list of register contents */
2122:src/display.c **** static void show_registers(void) {
2123:src/display.c **** 	char buf[16], *bp;
2124:src/display.c **** 	int n = State2.digval;
2125:src/display.c **** 	
2126:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2127:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2128:src/display.c **** 			State2.local   ? LOCAL_REG_BASE + n : 
2129:src/display.c **** 			n;
2130:src/display.c **** #else
2131:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2132:src/display.c **** 			n;
2133:src/display.c **** #endif
2134:src/display.c **** 
2135:src/display.c **** 	if (State2.disp_as_alpha) {
2136:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
2137:src/display.c **** 	}
2138:src/display.c **** 	else {
2139:src/display.c **** 		xset(buf, '\0', 16);
2140:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2141:src/display.c **** 		bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2142:src/display.c **** #else
2143:src/display.c **** 		bp = scopy_spc(buf, "Reg ");
2144:src/display.c **** #endif
2145:src/display.c **** 		if (State2.local) {
2146:src/display.c **** 			*bp++ = '.';
2147:src/display.c **** 			if (n >= 100) {
2148:src/display.c **** 				*bp++ = '1';
2149:src/display.c **** 				n -= 100;
2150:src/display.c **** 			}
2151:src/display.c **** 		}
2152:src/display.c **** 		if (n < 100)
2153:src/display.c **** 			bp = num_arg_0(bp, n, 2);
2154:src/display.c **** 		else
2155:src/display.c **** 			*bp++ = REGNAMES[n - regX_idx];
2156:src/display.c **** 		set_status(buf);
2157:src/display.c **** 	}
ARM GAS  /tmp/ccTlkAzC.s 			page 53


2158:src/display.c **** 	format_reg(reg, CNULL);
2159:src/display.c **** }
2160:src/display.c **** 
2161:src/display.c **** 
2162:src/display.c **** static void set_annunciators(void)
2163:src/display.c **** {
2164:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2165:src/display.c **** 
2166:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2167:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2168:src/display.c **** 	 * browsing constants.
2169:src/display.c **** 	 */
2170:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2171:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2172:src/display.c **** #else
2173:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2174:src/display.c **** #endif
2175:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2176:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2177:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2178:src/display.c **** 	set_IO_annunciator();
2179:src/display.c **** 
2180:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2181:src/display.c **** 	 */
2182:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2183:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2184:src/display.c **** }
2185:src/display.c **** 
2186:src/display.c **** 
2187:src/display.c **** /*
2188:src/display.c ****  *  Toggle the little "=" sign
2189:src/display.c ****  */
2190:src/display.c **** void set_IO_annunciator(void) {
2191:src/display.c **** #ifndef DM42
2192:src/display.c ****     int on = SerialOn
2193:src/display.c **** #endif
2194:src/display.c **** #ifdef DM42
2195:src/display.c ****     int on = 1
2196:src/display.c **** #endif
2197:src/display.c **** #ifdef REALBUILD
2198:src/display.c **** 	  || DebugFlag
2199:src/display.c **** #endif
2200:src/display.c **** #ifdef INFRARED
2201:src/display.c **** 	  || PrinterColumn != 0
2202:src/display.c **** #endif
2203:src/display.c **** 	;
2204:src/display.c **** 
2205:src/display.c **** 	if (on != IoAnnunciator) {
2206:src/display.c **** 		dot(LIT_EQ, on);
2207:src/display.c **** 		IoAnnunciator = on;
2208:src/display.c **** 		finish_display();
2209:src/display.c **** 	}
2210:src/display.c **** }
2211:src/display.c **** 
2212:src/display.c **** /*
2213:src/display.c ****  *  Update the display
2214:src/display.c ****  */
ARM GAS  /tmp/ccTlkAzC.s 			page 54


2215:src/display.c **** void display(void) {
2216:src/display.c **** 	int i, j;
2217:src/display.c **** 	char buf[40], *bp = buf;
2218:src/display.c **** 	const char *p;
2219:src/display.c **** 	int annuc = 0;
2220:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2221:src/display.c **** 	int skip = 0;
2222:src/display.c **** 	int x_disp = 0;
2223:src/display.c **** 	const int shift = cur_shift();
2224:src/display.c **** 
2225:src/display.c **** 
2226:src/display.c **** 
2227:src/display.c **** 	if (State2.disp_freeze) {
2228:src/display.c **** 		State2.disp_freeze = 0;
2229:src/display.c **** 		State2.disp_temp = 1;
2230:src/display.c **** #ifdef CONSOLE
2231:src/display.c **** 		JustDisplayed = 1;
2232:src/display.c **** #endif
2233:src/display.c **** 		ShowRPN = 0;
2234:src/display.c **** 		return;
2235:src/display.c **** 	}
2236:src/display.c **** 
2237:src/display.c **** 	if (WasDataEntry) {
2238:src/display.c **** #if defined(QTGUI) || defined(IOS)
2239:src/display.c **** 		xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2240:src/display.c **** 		LastDisplayedNumber[NUMBER_LENGTH]=0;
2241:src/display.c **** 		xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2242:src/display.c **** 		LastDisplayedExponent[EXPONENT_LENGTH]=0;
2243:src/display.c **** #endif
2244:src/display.c **** 		wait_for_display(); // Normally called from reset_disp()
2245:src/display.c **** 
2246:src/display.c **** 		// Erase 7-segment display
2247:src/display.c **** 		for (i = 0; i <= EXP_SIGN; ++i) {
2248:src/display.c **** 			clr_dot(i);
2249:src/display.c **** 		}
2250:src/display.c **** 		goto only_update_x;
2251:src/display.c **** 	}
2252:src/display.c **** 
2253:src/display.c **** 	// Clear display
2254:src/display.c **** 	reset_disp();
2255:src/display.c **** 
2256:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2257:src/display.c **** 	if (State2.cmplx  && !cata) {
2258:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
2259:src/display.c **** 		set_status(buf);
2260:src/display.c **** 	}
2261:src/display.c **** 	if (State2.version) {
2262:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2263:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
2264:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2265:src/display.c **** #ifndef REALBUILD
2266:src/display.c **** 		scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2267:src/display.c **** 		scopy(LastDisplayedExponent, " ");
2268:src/display.c **** #endif
2269:src/display.c **** 		xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2270:src/display.c **** 		set_status(vers);
2271:src/display.c **** 		skip = 1;
ARM GAS  /tmp/ccTlkAzC.s 			page 55


2272:src/display.c **** 		goto nostk;
2273:src/display.c **** 	} else if (State2.confirm) {
2274:src/display.c **** 		set_status(S_SURE);
2275:src/display.c **** 	} else if (State2.hyp) {
2276:src/display.c **** 		bp = scopy(bp, "HYP");
2277:src/display.c **** 		if (! State2.dot)
2278:src/display.c **** 			*bp++ = '\235';
2279:src/display.c **** 		set_status(buf);
2280:src/display.c **** 	} else if (State2.gtodot) {
2281:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2282:src/display.c **** 		bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2283:src/display.c **** 		if (State2.numdigit > 0)
2284:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2285:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
2286:src/display.c **** 			*bp++ = '_';
2287:src/display.c **** 		set_status(buf);
2288:src/display.c **** 	} else if (State2.rarg) {
2289:src/display.c **** 		/* Commands with arguments */
2290:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2291:src/display.c **** 		if (CmdBase >= RARG_FIX && CmdBase <= RARG_SIG0)
2292:src/display.c **** 			bp = scopy(bp, "\177\006\006");
2293:src/display.c **** #endif
2294:src/display.c **** 		bp = scopy(bp, argcmds[CmdBase].cmd);
2295:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
2296:src/display.c **** 		if (State2.dot) {
2297:src/display.c **** 			*bp++ = 's';
2298:src/display.c **** 			*bp++ = '_';
2299:src/display.c **** 		} else if (shift == SHIFT_F) {
2300:src/display.c **** 			*bp++ = '\021';
2301:src/display.c **** 			*bp++ = '_';
2302:src/display.c **** 		} else {
2303:src/display.c **** 			/* const int maxdigits = State2.shuffle ? 4 
2304:src/display.c **** 						: State2.ind ? 2 
2305:src/display.c **** 						: num_arg_digits(CmdBase); */
2306:src/display.c **** 			if (State2.local)
2307:src/display.c **** 				*bp++ = '.';
2308:src/display.c **** 			if (State2.numdigit > 0) {
2309:src/display.c **** 				if (State2.shuffle)
2310:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2311:src/display.c **** 						*bp++ = REGNAMES[j & 3];
2312:src/display.c **** 				else
2313:src/display.c **** 					bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2314:src/display.c **** 			}
2315:src/display.c **** 			// for (i = State2.numdigit; i < maxdigits; i++)
2316:src/display.c **** 				*bp++ = '_';
2317:src/display.c **** 		}
2318:src/display.c **** 		set_status(buf);
2319:src/display.c **** 	} else if (State2.test != TST_NONE) {
2320:src/display.c **** 		*bp++ = 'x';
2321:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
2322:src/display.c **** 		*bp++ = '_';
2323:src/display.c **** 		*bp++ = '?';
2324:src/display.c **** 		set_status(buf);
2325:src/display.c **** 	} else if (cata) {
2326:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
2327:src/display.c **** 		char b2[16];
2328:src/display.c **** 		const char *p;
ARM GAS  /tmp/ccTlkAzC.s 			page 56


2329:src/display.c **** 
2330:src/display.c **** 		bp = scopy(bp, "\177\006\006");
2331:src/display.c **** 		p = catcmd(op, b2);
2332:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
2333:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
2334:src/display.c **** 		bp = scopy(bp, p);
2335:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2336:src/display.c **** 			// State2.disp_small = 1;
2337:src/display.c **** 			if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2338:src/display.c **** 				set_digits_string("0 to 255", 0);
2339:src/display.c **** 			else
2340:src/display.c **** 				set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2341:src/display.c **** 			skip = 1;
2342:src/display.c **** 		} else if (State2.runmode) {
2343:src/display.c **** 			if (cata == CATALOGUE_CONV) {
2344:src/display.c **** 				decNumber x, r;
2345:src/display.c **** 				decimal64 z;
2346:src/display.c **** 
2347:src/display.c **** 				getX(&x);
2348:src/display.c **** 				if (opKIND(op) == KIND_MON) {
2349:src/display.c **** 					const unsigned int f = argKIND(op);
2350:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2351:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2352:src/display.c **** 						update_speed(0);
2353:src/display.c **** 						fp(&r, &x);
2354:src/display.c **** 					}
2355:src/display.c **** 					else
2356:src/display.c **** 						set_NaN(&r);
2357:src/display.c **** 				} else
2358:src/display.c **** 					do_conv(&r, op & RARG_MASK, &x);
2359:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
2360:src/display.c **** 				packed_from_number(&z, &r);
2361:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
2362:src/display.c **** 				skip = 1;
2363:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2364:src/display.c **** 				REGISTER z, *const x = StackBase;
2365:src/display.c **** 				copyreg(&z, x);
2366:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
2367:src/display.c **** 				set_x(x, CNULL, is_dblmode());
2368:src/display.c **** 				copyreg(x, &z);
2369:src/display.c **** 				skip = 1;
2370:src/display.c **** 			}
2371:src/display.c **** 		}
2372:src/display.c **** 		set_status(buf);
2373:src/display.c **** 	} else if (State2.multi) {
2374:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2375:src/display.c **** 		if (State2.numdigit > 0) {
2376:src/display.c **** 			*bp++ = (char) State2.digval;
2377:src/display.c **** 			if (State2.numdigit > 1)
2378:src/display.c **** 				*bp++ = State2.digval2;
2379:src/display.c **** 		}
2380:src/display.c **** 		set_status(buf);
2381:src/display.c **** 	} else if (State2.status) {
2382:src/display.c **** 		show_status();
2383:src/display.c **** 		skip = 1;
2384:src/display.c **** 	} else if (State2.labellist) {
2385:src/display.c **** 		show_label();
ARM GAS  /tmp/ccTlkAzC.s 			page 57


2386:src/display.c **** 		skip = 1;
2387:src/display.c **** 	} else if (State2.registerlist) {
2388:src/display.c **** 		show_registers();
2389:src/display.c **** 		skip = 1;
2390:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2391:src/display.c **** 			annunciators();
2392:src/display.c **** 		}
2393:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2394:src/display.c **** 	} else if (State2.disp_as_alpha) {
2395:src/display.c **** 		set_status(alpha_rcl_s(regX_idx, buf));
2396:src/display.c **** #endif
2397:src/display.c **** 	} else if (State2.runmode) {
2398:src/display.c **** 		if (DispMsg) {
2399:src/display.c **** 			set_status(DispMsg);
2400:src/display.c **** 		} else if (DispPlot) {
2401:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2402:src/display.c **** 		} else if (State2.alphas) {
2403:src/display.c **** #if 0
2404:src/display.c **** 			set_digits_string("AlpHA", 0);
2405:src/display.c **** #endif
2406:src/display.c **** 			bp = scopy(buf, Alpha);
2407:src/display.c **** 			j = State2.alpha_pos;
2408:src/display.c **** 			if (j != 0) {
2409:src/display.c **** 				i = slen(buf);
2410:src/display.c **** 				j *= 6;
2411:src/display.c **** 				if ( i - j >= 12 ) {
2412:src/display.c **** 					buf[ (i - j) ] = '\0';
2413:src/display.c **** 					set_status_right(buf);
2414:src/display.c **** 				}
2415:src/display.c **** 				else {
2416:src/display.c **** 					set_status(buf);
2417:src/display.c **** 				}
2418:src/display.c **** 			} else {
2419:src/display.c **** 				if (shift != SHIFT_N) {
2420:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
2421:src/display.c **** 					*bp++ = '\0';
2422:src/display.c **** 				}
2423:src/display.c **** 				set_status_right(buf);
2424:src/display.c **** 			}
2425:src/display.c **** 		} else {
2426:src/display.c **** 			annuc = 1;
2427:src/display.c **** 		}
2428:src/display.c **** 	} else {
2429:src/display.c **** #ifndef DM42
2430:src/display.c **** 	        show_progtrace(buf);
2431:src/display.c **** #endif
2432:src/display.c **** 		i = state_pc();
2433:src/display.c **** 		if (i > 0)
2434:src/display.c **** 			set_status(prt(getprog(i), buf));
2435:src/display.c **** 		else
2436:src/display.c **** 			set_status("");
2437:src/display.c **** 		set_dot(STO_annun);
2438:src/display.c **** #if 0
2439:src/display.c **** 		if (State2.smode == SDISP_SHOW) {
2440:src/display.c **** 			unsigned short int crc;
2441:src/display.c **** 			crc = checksum_program();
2442:src/display.c **** 			j = SEGS_PER_DIGIT * 0;
ARM GAS  /tmp/ccTlkAzC.s 			page 58


2443:src/display.c **** 			for (i=0; i<4; i++) {
2444:src/display.c **** 				set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
2445:src/display.c **** 				crc >>= 4;
2446:src/display.c **** 				j += SEGS_PER_DIGIT;
2447:src/display.c **** 			}
2448:src/display.c **** 			skip = 1;
2449:src/display.c **** 		}
2450:src/display.c **** 		else
2451:src/display.c **** #endif
2452:src/display.c **** 		if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2453:src/display.c **** 			annuc = 1;
2454:src/display.c **** 		goto nostk;
2455:src/display.c **** 	}
2456:src/display.c **** 	show_stack();
2457:src/display.c **** nostk:	show_flags();
2458:src/display.c **** 	if (!skip) {
2459:src/display.c **** 		if (State2.runmode) {
2460:src/display.c **** only_update_x:
2461:src/display.c **** 			p = get_cmdline();
2462:src/display.c **** 			if (p == NULL || cata) {
2463:src/display.c **** 				if (ShowRegister != -1) {
2464:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
2465:src/display.c **** 					format_reg(ShowRegister, CNULL);
2466:src/display.c **** 				}
2467:src/display.c **** 				else
2468:src/display.c **** 					set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2469:src/display.c **** 			} else {
2470:src/display.c **** 				disp_x(p);
2471:src/display.c **** 				x_disp = 1;
2472:src/display.c **** 			}
2473:src/display.c **** 			if (WasDataEntry) {
2474:src/display.c **** 				goto finish;
2475:src/display.c **** 			}
2476:src/display.c **** 		} else {
2477:src/display.c **** 			unsigned int pc = state_pc();
2478:src/display.c **** 			unsigned int upc = user_pc(pc);
2479:src/display.c **** 			const int n = nLIB(pc);
2480:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2481:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2482:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2483:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2484:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
2485:src/display.c **** #ifndef REALBUILD
2486:src/display.c **** 			xset(buf, '\0', sizeof(buf));
2487:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
2488:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2489:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
2490:src/display.c ****       { // allow local declaration of b and l in C (not C++) on VisualStudio
2491:src/display.c **** 			  char *b=buf;
2492:src/display.c **** 			  char *l=LastDisplayedNumber;
2493:src/display.c **** 			  *l++=' ';
2494:src/display.c **** 			  while(*b) {
2495:src/display.c **** 				  *l++=*b++;
2496:src/display.c **** 				  *l++=' ';
2497:src/display.c **** 			  }
2498:src/display.c **** 			  *l=0;
2499:src/display.c ****       }
ARM GAS  /tmp/ccTlkAzC.s 			page 59


2500:src/display.c **** #endif
2501:src/display.c **** 		}
2502:src/display.c **** 	}
2503:src/display.c **** 	set_annunciators();
2504:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2505:src/display.c **** 		ShowRPN = 0;
2506:src/display.c **** 		dot(RPN, 0);
2507:src/display.c **** 	}
2508:src/display.c **** 	// disp_temp disables the <- key
2509:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2510:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2511:src/display.c **** 
2512:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2513:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2514:src/display.c ****  		annunciators();
2515:src/display.c ****  	State2.hms = 0;
2516:src/display.c **** #else
2517:src/display.c **** 
2518:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2519:src/display.c **** 		annunciators();
2520:src/display.c **** 	
2521:src/display.c **** 
2522:src/display.c **** 
2523:src/display.c **** #endif
2524:src/display.c **** 
2525:src/display.c **** finish:
2526:src/display.c **** 	State2.version = 0;
2527:src/display.c **** 	State2.disp_as_alpha = 0;
2528:src/display.c **** 	State2.smode = SDISP_NORMAL;
2529:src/display.c **** 	State2.invalid_disp = 0;
2530:src/display.c **** 	ShowRegister = regX_idx;
2531:src/display.c **** 	DispMsg = CNULL;
2532:src/display.c **** 	DispPlot = 0;
2533:src/display.c **** 	State2.disp_small = 0;
2534:src/display.c **** 	finish_display();
2535:src/display.c **** #ifdef CONSOLE
2536:src/display.c **** 	JustDisplayed = 1;
2537:src/display.c **** #endif
2538:src/display.c **** }
2539:src/display.c **** 
2540:src/display.c **** /*
2541:src/display.c ****  *  Frozen display will revert to normal only after another call to display();
2542:src/display.c ****  */
2543:src/display.c **** void frozen_display()
2544:src/display.c **** {
2545:src/display.c **** 	State2.disp_freeze = 0;
2546:src/display.c **** 	display();
2547:src/display.c **** 	State2.disp_freeze = 1;
2548:src/display.c **** }
2549:src/display.c **** 
2550:src/display.c **** static void set_status_graphic(const unsigned char *graphic) {
2551:src/display.c **** 	int glen = *graphic++;
2552:src/display.c **** 	int i, j;
2553:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2554:src/display.c **** 	unsigned long long int mat[6];
2555:src/display.c **** 
2556:src/display.c **** 	xset(mat, 0, sizeof(mat));
ARM GAS  /tmp/ccTlkAzC.s 			page 60


2557:src/display.c **** #endif
2558:src/display.c **** #ifndef REALBUILD
2559:src/display.c **** 	forceDispPlot=1;
2560:src/display.c **** #endif
2561:src/display.c **** 	if (glen <= 0)			return;
2562:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
2563:src/display.c **** 
2564:src/display.c **** 	for (i=0; i<6; i++)
2565:src/display.c **** 		for (j=1; j<=glen; j++) {
2566:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2567:src/display.c **** 			if (graphic[j] & (1 << i))
2568:src/display.c **** 				mat[i] |= 1LL << j;
2569:src/display.c **** #else
2570:src/display.c **** 			dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
2571:src/display.c **** #endif
2572:src/display.c **** 		}
2573:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2574:src/display.c **** 	set_status_grob(mat);
2575:src/display.c **** #endif
2576:src/display.c **** }
2577:src/display.c **** 
2578:src/display.c **** 
2579:src/display.c **** /* Take the given string and display as much of it as possible on the top
2580:src/display.c ****  * line of the display.  The font size is set by the smallp parameter.
2581:src/display.c ****  * We allow character to go one pixel beyond the display since the rightmost
2582:src/display.c ****  * column is almost always blank.
2583:src/display.c ****  */
2584:src/display.c **** static void set_status_sized(const char *str, int smallp) {
 678              		.loc 1 2584 59 is_stmt 1 view -0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 544
 681              		@ frame_needed = 0, uses_anonymous_args = 0
2585:src/display.c **** 	unsigned short int posns[257];
 682              		.loc 1 2585 2 view .LVU201
2586:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2587:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
2588:src/display.c **** 	int posns_state = 255;
 683              		.loc 1 2588 2 view .LVU202
2589:src/display.c **** #endif
2590:src/display.c **** 	unsigned int x = 0;
 684              		.loc 1 2590 2 view .LVU203
2591:src/display.c **** 	int i, j;
 685              		.loc 1 2591 2 view .LVU204
2592:src/display.c **** 	const int offset = smallp ? 256 : 0;
 686              		.loc 1 2592 2 view .LVU205
2584:src/display.c **** 	unsigned short int posns[257];
 687              		.loc 1 2584 59 is_stmt 0 view .LVU206
 688 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 689              		.cfi_def_cfa_offset 36
 690              		.cfi_offset 4, -36
 691              		.cfi_offset 5, -32
 692              		.cfi_offset 6, -28
 693              		.cfi_offset 7, -24
 694              		.cfi_offset 8, -20
 695              		.cfi_offset 9, -16
 696              		.cfi_offset 10, -12
 697              		.cfi_offset 11, -8
ARM GAS  /tmp/ccTlkAzC.s 			page 61


 698              		.cfi_offset 14, -4
2593:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2594:src/display.c **** 	unsigned long long int mat[6];
2595:src/display.c **** 
2596:src/display.c **** 	xset(mat, 0, sizeof(mat));
2597:src/display.c **** #endif
2598:src/display.c **** #ifndef REALBUILD
2599:src/display.c **** 	scopy(LastDisplayedText, str);
 699              		.loc 1 2599 2 view .LVU207
 700 0004 624C     		ldr	r4, .L113
2584:src/display.c **** 	unsigned short int posns[257];
 701              		.loc 1 2584 59 view .LVU208
 702 0006 ADF5097D 		sub	sp, sp, #548
 703              		.cfi_def_cfa_offset 584
2592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 704              		.loc 1 2592 34 view .LVU209
 705 000a 0B1E     		subs	r3, r1, #0
 706 000c 0293     		str	r3, [sp, #8]
2584:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 2584 59 view .LVU210
 708 000e 0090     		str	r0, [sp]
2592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 709              		.loc 1 2592 34 view .LVU211
 710 0010 14BF     		ite	ne
 711 0012 4FF48073 		movne	r3, #256
 712 0016 0023     		moveq	r3, #0
 713              		.loc 1 2599 2 view .LVU212
 714 0018 0146     		mov	r1, r0
 715              	.LVL57:
 716              		.loc 1 2599 2 view .LVU213
 717 001a 2046     		mov	r0, r4
 718              	.LVL58:
2592:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 719              		.loc 1 2592 34 view .LVU214
 720 001c 0393     		str	r3, [sp, #12]
 721              	.LVL59:
 722              		.loc 1 2599 2 is_stmt 1 view .LVU215
 723 001e FFF7FEFF 		bl	scopy
 724              	.LVL60:
2600:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2601:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 725              		.loc 1 2601 2 view .LVU216
 726              		.loc 1 2601 14 view .LVU217
 727              		.loc 1 2601 31 is_stmt 0 view .LVU218
 728 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 729              		.loc 1 2601 2 view .LVU219
 730 0024 13B9     		cbnz	r3, .L70
 731 0026 07E0     		b	.L68
 732              	.LVL61:
 733              	.L69:
 734              		.loc 1 2601 14 is_stmt 1 discriminator 1 view .LVU220
 735 0028 0134     		adds	r4, r4, #1
 736              		.loc 1 2601 2 is_stmt 0 discriminator 1 view .LVU221
 737 002a 2BB1     		cbz	r3, .L68
 738              	.L70:
 739              	.LVL62:
2602:src/display.c **** 		if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
ARM GAS  /tmp/ccTlkAzC.s 			page 62


 740              		.loc 1 2602 3 is_stmt 1 view .LVU222
 741              		.loc 1 2602 6 is_stmt 0 view .LVU223
 742 002c 072B     		cmp	r3, #7
 743              		.loc 1 2602 38 view .LVU224
 744 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 745              		.loc 1 2602 6 view .LVU225
 746 0030 FAD1     		bne	.L69
 747              		.loc 1 2602 38 discriminator 1 view .LVU226
 748 0032 002B     		cmp	r3, #0
 749 0034 40F09E80 		bne	.L109
 750              	.LVL63:
 751              	.L68:
2603:src/display.c **** 			scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
2604:src/display.c **** 			if (LastDisplayedText[i] != '\0')
2605:src/display.c **** 				++i;
2606:src/display.c **** 		}
2607:src/display.c **** 		else {
2608:src/display.c **** 			++i;
2609:src/display.c **** 		}
2610:src/display.c **** 	}
2611:src/display.c **** #endif
2612:src/display.c **** 	forceDispPlot=0;
 752              		.loc 1 2612 2 is_stmt 1 view .LVU227
2613:src/display.c **** #endif
2614:src/display.c **** #ifdef RP_PREFIX
2615:src/display.c **** 	RectPolConv = 0;
 753              		.loc 1 2615 14 is_stmt 0 view .LVU228
 754 0038 564B     		ldr	r3, .L113+4
2612:src/display.c **** #endif
 755              		.loc 1 2612 15 view .LVU229
 756 003a 574A     		ldr	r2, .L113+8
 757 003c 0027     		movs	r7, #0
 758              		.loc 1 2615 14 view .LVU230
 759 003e 1F60     		str	r7, [r3]
2616:src/display.c **** #endif
2617:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
2618:src/display.c **** 	findlengths(posns, smallp);
2619:src/display.c **** #endif
2620:src/display.c **** 	while (*str != '\0' && x <= BITMAP_WIDTH+1)  {
 760              		.loc 1 2620 9 view .LVU231
 761 0040 009B     		ldr	r3, [sp]
2612:src/display.c **** #endif
 762              		.loc 1 2612 15 view .LVU232
 763 0042 1770     		strb	r7, [r2]
2615:src/display.c **** #endif
 764              		.loc 1 2615 2 is_stmt 1 view .LVU233
 765              		.loc 1 2620 2 view .LVU234
 766              	.LVL64:
 767              		.loc 1 2620 8 view .LVU235
 768              		.loc 1 2620 9 is_stmt 0 view .LVU236
 769 0044 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
2621:src/display.c **** 		int c;
2622:src/display.c **** 		int width;
2623:src/display.c **** 		unsigned char cmap[6];
2624:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2625:src/display.c **** 		int real_width;
2626:src/display.c **** 		int current_smallp;
ARM GAS  /tmp/ccTlkAzC.s 			page 63


2627:src/display.c **** 
2628:src/display.c **** 		// A 007 byte followed by a mode byte changes the way the following character is printed.
2629:src/display.c **** 		// Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
2630:src/display.c **** 		// Bits 6-5: 00 -> don't change font
2631:src/display.c **** 		//           01 -> (not used)
2632:src/display.c **** 		//           10 -> use big font
2633:src/display.c **** 		//           11 -> use small font
2634:src/display.c **** 		// Bits 4-0: character will be considered this wide
2635:src/display.c **** 		if (str[0] == '\007') {
2636:src/display.c **** 			width = str[1] & 0x1F;
2637:src/display.c **** 			switch (str[1] & 0x60) {
2638:src/display.c **** 			default:
2639:src/display.c **** 			case 0x00:	current_smallp = smallp;
2640:src/display.c **** 					break;
2641:src/display.c **** 			case 0x40:	current_smallp = 0;
2642:src/display.c **** 					break;
2643:src/display.c **** 			case 0x60:	current_smallp = 1;
2644:src/display.c **** 					break;
2645:src/display.c **** 			}
2646:src/display.c **** 			c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
2647:src/display.c **** 			str += 3;
2648:src/display.c **** 
2649:src/display.c **** 			real_width = charlengths(c);
2650:src/display.c **** 		} else {
2651:src/display.c **** 			c = (unsigned char) *str++ + offset;
2652:src/display.c **** 			real_width = width = charlengths(c);
2653:src/display.c **** 			current_smallp = smallp;
2654:src/display.c **** 		}
2655:src/display.c **** 
2656:src/display.c **** 		if (x + real_width > BITMAP_WIDTH+1)
2657:src/display.c **** 			break;
2658:src/display.c **** 
2659:src/display.c **** 		if (posns_state != current_smallp) {
2660:src/display.c **** 			findlengths(posns, current_smallp);
2661:src/display.c **** 			posns_state = current_smallp;
2662:src/display.c **** 		}
2663:src/display.c **** 		unpackchar(c, cmap, current_smallp, posns);
2664:src/display.c **** #else
2665:src/display.c **** 		c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
2666:src/display.c **** 
2667:src/display.c **** 		//cmap = &charset[c][0];
2668:src/display.c **** 		width = charlengths(c);
2669:src/display.c **** 
2670:src/display.c **** 		if (x + width > BITMAP_WIDTH+1)
2671:src/display.c **** 			break;
2672:src/display.c **** 
2673:src/display.c **** 		/* Decode the packed character bytes */
2674:src/display.c **** 		unpackchar(c, cmap, smallp, posns);
2675:src/display.c **** #endif
2676:src/display.c **** 
2677:src/display.c **** 		for (i=0; i<6; i++)
2678:src/display.c **** 			for (j=0; j<width; j++) {
2679:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
2680:src/display.c **** 					break;
2681:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2682:src/display.c **** 				if (cmap[i] & (1 << j))
2683:src/display.c **** 					mat[i] |= 1LL << (x+j);
ARM GAS  /tmp/ccTlkAzC.s 			page 64


2684:src/display.c **** #else
2685:src/display.c **** 				dot((x+j)*6+i+MATRIX_BASE, (cmap[i] & (1 << j))?1:0);
2686:src/display.c **** #endif
2687:src/display.c **** 			}
2688:src/display.c **** 		x += width;
2689:src/display.c **** 	}
2690:src/display.c **** 
2691:src/display.c **** 
2692:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
2693:src/display.c **** 	set_status_grob(mat);
2694:src/display.c **** #else
2695:src/display.c **** 	for (i=MATRIX_BASE + 6*x; i<400; i++)
 770              		.loc 1 2695 8 view .LVU237
 771 0046 8E24     		movs	r4, #142
2620:src/display.c **** 		int c;
 772              		.loc 1 2620 8 view .LVU238
 773 0048 002D     		cmp	r5, #0
 774 004a 7CD0     		beq	.L88
 775              	.LBB150:
2635:src/display.c **** 			width = str[1] & 0x1F;
 776              		.loc 1 2635 6 view .LVU239
 777 004c 072D     		cmp	r5, #7
 778              	.LBE150:
2588:src/display.c **** #endif
 779              		.loc 1 2588 6 view .LVU240
 780 004e 4FF0FF04 		mov	r4, #255
 781              	.LVL65:
 782              	.LBB159:
2621:src/display.c **** 		int width;
 783              		.loc 1 2621 3 is_stmt 1 view .LVU241
2622:src/display.c **** 		unsigned char cmap[6];
 784              		.loc 1 2622 3 view .LVU242
2623:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 785              		.loc 1 2623 3 view .LVU243
2625:src/display.c **** 		int current_smallp;
 786              		.loc 1 2625 3 view .LVU244
2626:src/display.c **** 
 787              		.loc 1 2626 3 view .LVU245
2635:src/display.c **** 			width = str[1] & 0x1F;
 788              		.loc 1 2635 3 view .LVU246
2635:src/display.c **** 			width = str[1] & 0x1F;
 789              		.loc 1 2635 6 is_stmt 0 view .LVU247
 790 0052 63D1     		bne	.L71
 791              	.L111:
2636:src/display.c **** 			switch (str[1] & 0x60) {
 792              		.loc 1 2636 4 is_stmt 1 view .LVU248
2636:src/display.c **** 			switch (str[1] & 0x60) {
 793              		.loc 1 2636 15 is_stmt 0 view .LVU249
 794 0054 009B     		ldr	r3, [sp]
 795              	.LVL66:
2636:src/display.c **** 			switch (str[1] & 0x60) {
 796              		.loc 1 2636 15 view .LVU250
 797 0056 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 798 0058 06F06003 		and	r3, r6, #96
2637:src/display.c **** 			default:
 799              		.loc 1 2637 4 view .LVU251
 800 005c 402B     		cmp	r3, #64
ARM GAS  /tmp/ccTlkAzC.s 			page 65


2636:src/display.c **** 			switch (str[1] & 0x60) {
 801              		.loc 1 2636 10 view .LVU252
 802 005e 06F01F06 		and	r6, r6, #31
 803              	.LVL67:
2637:src/display.c **** 			default:
 804              		.loc 1 2637 4 is_stmt 1 view .LVU253
 805 0062 7BD0     		beq	.L72
 806 0064 602B     		cmp	r3, #96
 807 0066 7ED0     		beq	.L73
 808              	.LVL68:
2646:src/display.c **** 			str += 3;
 809              		.loc 1 2646 4 view .LVU254
2646:src/display.c **** 			str += 3;
 810              		.loc 1 2646 8 is_stmt 0 view .LVU255
 811 0068 009B     		ldr	r3, [sp]
 812 006a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
2646:src/display.c **** 			str += 3;
 813              		.loc 1 2646 55 view .LVU256
 814 006c 029B     		ldr	r3, [sp, #8]
 815 006e 002B     		cmp	r3, #0
 816 0070 00F08A80 		beq	.L92
 817 0074 05F58075 		add	r5, r5, #256
 818 0078 9A46     		mov	r10, r3
 819              	.LVL69:
 820              	.L75:
2647:src/display.c **** 
 821              		.loc 1 2647 4 is_stmt 1 discriminator 4 view .LVU257
2649:src/display.c **** 		} else {
 822              		.loc 1 2649 17 is_stmt 0 discriminator 4 view .LVU258
 823 007a 2846     		mov	r0, r5
 824 007c FFF7FEFF 		bl	charlengths
 825              	.LVL70:
2647:src/display.c **** 
 826              		.loc 1 2647 8 discriminator 4 view .LVU259
 827 0080 009B     		ldr	r3, [sp]
2656:src/display.c **** 			break;
 828              		.loc 1 2656 9 discriminator 4 view .LVU260
 829 0082 3844     		add	r0, r0, r7
2647:src/display.c **** 
 830              		.loc 1 2647 8 discriminator 4 view .LVU261
 831 0084 0333     		adds	r3, r3, #3
2656:src/display.c **** 			break;
 832              		.loc 1 2656 6 discriminator 4 view .LVU262
 833 0086 2C28     		cmp	r0, #44
2647:src/display.c **** 
 834              		.loc 1 2647 8 discriminator 4 view .LVU263
 835 0088 0093     		str	r3, [sp]
 836              	.LVL71:
2649:src/display.c **** 		} else {
 837              		.loc 1 2649 4 is_stmt 1 discriminator 4 view .LVU264
2656:src/display.c **** 			break;
 838              		.loc 1 2656 3 discriminator 4 view .LVU265
2656:src/display.c **** 			break;
 839              		.loc 1 2656 6 is_stmt 0 discriminator 4 view .LVU266
 840 008a 55D8     		bhi	.L87
 841              	.L112:
2659:src/display.c **** 			findlengths(posns, current_smallp);
ARM GAS  /tmp/ccTlkAzC.s 			page 66


 842              		.loc 1 2659 3 is_stmt 1 view .LVU267
2659:src/display.c **** 			findlengths(posns, current_smallp);
 843              		.loc 1 2659 6 is_stmt 0 view .LVU268
 844 008c A245     		cmp	r10, r4
2660:src/display.c **** 			posns_state = current_smallp;
 845              		.loc 1 2660 4 view .LVU269
 846 008e 07AB     		add	r3, sp, #28
 847              	.LVL72:
2659:src/display.c **** 			findlengths(posns, current_smallp);
 848              		.loc 1 2659 6 view .LVU270
 849 0090 05D0     		beq	.L78
2660:src/display.c **** 			posns_state = current_smallp;
 850              		.loc 1 2660 4 is_stmt 1 view .LVU271
 851 0092 1846     		mov	r0, r3
 852 0094 5146     		mov	r1, r10
 853 0096 0193     		str	r3, [sp, #4]
 854 0098 FFF7FEFF 		bl	findlengths
 855              	.LVL73:
 856 009c 019B     		ldr	r3, [sp, #4]
2661:src/display.c **** 		}
 857              		.loc 1 2661 4 view .LVU272
 858              	.LVL74:
 859              	.L78:
2663:src/display.c **** #else
 860              		.loc 1 2663 3 view .LVU273
 861 009e 2846     		mov	r0, r5
 862 00a0 05A9     		add	r1, sp, #20
 863 00a2 5246     		mov	r2, r10
 864 00a4 07EB4708 		add	r8, r7, r7, lsl #1
 865 00a8 FFF7FEFF 		bl	unpackchar
 866              	.LVL75:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 867              		.loc 1 2677 3 view .LVU274
2677:src/display.c **** 			for (j=0; j<width; j++) {
 868              		.loc 1 2677 13 view .LVU275
 869 00ac 4FEA4808 		lsl	r8, r8, #1
 870 00b0 05AD     		add	r5, sp, #20
 871              	.LVL76:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 872              		.loc 1 2677 13 is_stmt 0 view .LVU276
 873 00b2 A8F58178 		sub	r8, r8, #258
2663:src/display.c **** #else
 874              		.loc 1 2663 3 view .LVU277
 875 00b6 4FF4C874 		mov	r4, #400
 876              	.LVL77:
 877              	.L79:
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 878              		.loc 1 2678 14 is_stmt 1 view .LVU278
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 879              		.loc 1 2678 4 is_stmt 0 view .LVU279
 880 00ba 002E     		cmp	r6, #0
 881 00bc 1FDD     		ble	.L85
2679:src/display.c **** 					break;
 882              		.loc 1 2679 5 is_stmt 1 view .LVU280
2679:src/display.c **** 					break;
 883              		.loc 1 2679 8 is_stmt 0 view .LVU281
 884 00be 2A2F     		cmp	r7, #42
ARM GAS  /tmp/ccTlkAzC.s 			page 67


 885 00c0 1DD8     		bhi	.L85
 886 00c2 08EB0409 		add	r9, r8, r4
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 887              		.loc 1 2678 10 view .LVU282
 888 00c6 4FF0000B 		mov	fp, #0
 889 00ca 09E0     		b	.L80
 890              	.LVL78:
 891              	.L110:
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 892              		.loc 1 2678 24 view .LVU283
 893 00cc 0BF1010B 		add	fp, fp, #1
 894              	.LVL79:
 895              	.LBB151:
 896              	.LBB152:
 327:src/display.c **** 	else	clr_dot(n);
 897              		.loc 1 327 10 view .LVU284
 898 00d0 FFF7FEFF 		bl	set_dot
 899              	.LVL80:
 327:src/display.c **** 	else	clr_dot(n);
 900              		.loc 1 327 10 view .LVU285
 901              	.LBE152:
 902              	.LBE151:
2679:src/display.c **** 					break;
 903              		.loc 1 2679 5 is_stmt 1 view .LVU286
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 904              		.loc 1 2678 23 view .LVU287
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 905              		.loc 1 2678 14 view .LVU288
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 906              		.loc 1 2678 4 is_stmt 0 view .LVU289
 907 00d4 5E45     		cmp	r6, fp
 908 00d6 09F10609 		add	r9, r9, #6
 909 00da 10D0     		beq	.L85
 910              	.L84:
2679:src/display.c **** 					break;
 911              		.loc 1 2679 8 view .LVU290
 912 00dc 4C45     		cmp	r4, r9
 913 00de 0ED0     		beq	.L85
 914              	.LVL81:
 915              	.L80:
2685:src/display.c **** #endif
 916              		.loc 1 2685 5 is_stmt 1 discriminator 2 view .LVU291
 917              	.LBB156:
 918              	.LBI151:
 326:src/display.c **** 	if (on)	set_dot(n);
 919              		.loc 1 326 6 discriminator 2 view .LVU292
 920              	.LBB153:
 327:src/display.c **** 	else	clr_dot(n);
 921              		.loc 1 327 2 discriminator 2 view .LVU293
 327:src/display.c **** 	else	clr_dot(n);
 922              		.loc 1 327 10 discriminator 2 view .LVU294
 328:src/display.c **** }
 923              		.loc 1 328 7 discriminator 2 view .LVU295
 924              	.LBE153:
 925              	.LBE156:
2685:src/display.c **** #endif
 926              		.loc 1 2685 37 is_stmt 0 discriminator 2 view .LVU296
ARM GAS  /tmp/ccTlkAzC.s 			page 68


 927 00e0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
2685:src/display.c **** #endif
 928              		.loc 1 2685 52 discriminator 2 view .LVU297
 929 00e2 41FA0BF1 		asr	r1, r1, fp
 930              	.LBB157:
 931              	.LBB154:
 327:src/display.c **** 	else	clr_dot(n);
 932              		.loc 1 327 5 discriminator 2 view .LVU298
 933 00e6 11F0010F 		tst	r1, #1
 327:src/display.c **** 	else	clr_dot(n);
 934              		.loc 1 327 10 discriminator 2 view .LVU299
 935 00ea 4846     		mov	r0, r9
 327:src/display.c **** 	else	clr_dot(n);
 936              		.loc 1 327 5 discriminator 2 view .LVU300
 937 00ec EED1     		bne	.L110
 938              	.LBE154:
 939              	.LBE157:
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 940              		.loc 1 2678 24 view .LVU301
 941 00ee 0BF1010B 		add	fp, fp, #1
 942              	.LVL82:
 943              	.LBB158:
 944              	.LBB155:
 328:src/display.c **** }
 945              		.loc 1 328 7 view .LVU302
 946 00f2 FFF7FEFF 		bl	clr_dot
 947              	.LVL83:
 328:src/display.c **** }
 948              		.loc 1 328 7 view .LVU303
 949              	.LBE155:
 950              	.LBE158:
2679:src/display.c **** 					break;
 951              		.loc 1 2679 5 is_stmt 1 view .LVU304
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 952              		.loc 1 2678 23 view .LVU305
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 953              		.loc 1 2678 14 view .LVU306
2678:src/display.c **** 				if (x+j >= BITMAP_WIDTH)
 954              		.loc 1 2678 4 is_stmt 0 view .LVU307
 955 00f6 5E45     		cmp	r6, fp
 956 00f8 09F10609 		add	r9, r9, #6
 957 00fc EED1     		bne	.L84
 958              	.LVL84:
 959              	.L85:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 960              		.loc 1 2677 18 is_stmt 1 view .LVU308
2677:src/display.c **** 			for (j=0; j<width; j++) {
 961              		.loc 1 2677 13 view .LVU309
 962 00fe 0134     		adds	r4, r4, #1
 963              	.LVL85:
2677:src/display.c **** 			for (j=0; j<width; j++) {
 964              		.loc 1 2677 3 is_stmt 0 view .LVU310
 965 0100 B4F5CB7F 		cmp	r4, #406
 966 0104 05F10105 		add	r5, r5, #1
 967 0108 D7D1     		bne	.L79
2688:src/display.c **** 	}
 968              		.loc 1 2688 3 is_stmt 1 view .LVU311
ARM GAS  /tmp/ccTlkAzC.s 			page 69


 969              	.LBE159:
2620:src/display.c **** 		int c;
 970              		.loc 1 2620 9 is_stmt 0 view .LVU312
 971 010a 009B     		ldr	r3, [sp]
 972 010c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 973              	.LBB160:
2688:src/display.c **** 	}
 974              		.loc 1 2688 5 view .LVU313
 975 010e 3744     		add	r7, r7, r6
 976              	.LVL86:
2688:src/display.c **** 	}
 977              		.loc 1 2688 5 view .LVU314
 978              	.LBE160:
2620:src/display.c **** 		int c;
 979              		.loc 1 2620 8 is_stmt 1 view .LVU315
 980 0110 95B1     		cbz	r5, .L87
2620:src/display.c **** 		int c;
 981              		.loc 1 2620 22 is_stmt 0 discriminator 1 view .LVU316
 982 0112 2C2F     		cmp	r7, #44
 983 0114 10D8     		bhi	.L87
 984              	.LBB161:
2635:src/display.c **** 			width = str[1] & 0x1F;
 985              		.loc 1 2635 6 view .LVU317
 986 0116 072D     		cmp	r5, #7
 987              	.LBE161:
 988 0118 5446     		mov	r4, r10
 989              	.LVL87:
 990              	.LBB162:
2621:src/display.c **** 		int width;
 991              		.loc 1 2621 3 is_stmt 1 view .LVU318
2622:src/display.c **** 		unsigned char cmap[6];
 992              		.loc 1 2622 3 view .LVU319
2623:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 993              		.loc 1 2623 3 view .LVU320
2625:src/display.c **** 		int current_smallp;
 994              		.loc 1 2625 3 view .LVU321
2626:src/display.c **** 
 995              		.loc 1 2626 3 view .LVU322
2635:src/display.c **** 			width = str[1] & 0x1F;
 996              		.loc 1 2635 3 view .LVU323
2635:src/display.c **** 			width = str[1] & 0x1F;
 997              		.loc 1 2635 6 is_stmt 0 view .LVU324
 998 011a 9BD0     		beq	.L111
 999              	.LVL88:
 1000              	.L71:
2651:src/display.c **** 			real_width = width = charlengths(c);
 1001              		.loc 1 2651 4 is_stmt 1 view .LVU325
2651:src/display.c **** 			real_width = width = charlengths(c);
 1002              		.loc 1 2651 6 is_stmt 0 view .LVU326
 1003 011c 039B     		ldr	r3, [sp, #12]
 1004              	.LVL89:
2651:src/display.c **** 			real_width = width = charlengths(c);
 1005              		.loc 1 2651 6 view .LVU327
 1006 011e 1D44     		add	r5, r5, r3
2652:src/display.c **** 			current_smallp = smallp;
 1007              		.loc 1 2652 25 view .LVU328
 1008 0120 2846     		mov	r0, r5
ARM GAS  /tmp/ccTlkAzC.s 			page 70


 1009 0122 FFF7FEFF 		bl	charlengths
 1010              	.LVL90:
2651:src/display.c **** 			real_width = width = charlengths(c);
 1011              		.loc 1 2651 28 view .LVU329
 1012 0126 009B     		ldr	r3, [sp]
2652:src/display.c **** 			current_smallp = smallp;
 1013              		.loc 1 2652 23 view .LVU330
 1014 0128 DDF808A0 		ldr	r10, [sp, #8]
 1015 012c 0646     		mov	r6, r0
2656:src/display.c **** 			break;
 1016              		.loc 1 2656 9 view .LVU331
 1017 012e 3844     		add	r0, r0, r7
2651:src/display.c **** 			real_width = width = charlengths(c);
 1018              		.loc 1 2651 28 view .LVU332
 1019 0130 0133     		adds	r3, r3, #1
2656:src/display.c **** 			break;
 1020              		.loc 1 2656 6 view .LVU333
 1021 0132 2C28     		cmp	r0, #44
2651:src/display.c **** 			real_width = width = charlengths(c);
 1022              		.loc 1 2651 28 view .LVU334
 1023 0134 0093     		str	r3, [sp]
 1024              	.LVL91:
2652:src/display.c **** 			current_smallp = smallp;
 1025              		.loc 1 2652 4 is_stmt 1 view .LVU335
2653:src/display.c **** 		}
 1026              		.loc 1 2653 4 view .LVU336
2656:src/display.c **** 			break;
 1027              		.loc 1 2656 3 view .LVU337
2656:src/display.c **** 			break;
 1028              		.loc 1 2656 6 is_stmt 0 view .LVU338
 1029 0136 A9D9     		bls	.L112
 1030              	.LVL92:
 1031              	.L87:
2656:src/display.c **** 			break;
 1032              		.loc 1 2656 6 view .LVU339
 1033              	.LBE162:
 1034              		.loc 1 2695 2 is_stmt 1 view .LVU340
 1035              		.loc 1 2695 24 is_stmt 0 view .LVU341
 1036 0138 07EB4704 		add	r4, r7, r7, lsl #1
 1037 013c 6400     		lsls	r4, r4, #1
 1038              		.loc 1 2695 21 view .LVU342
 1039 013e 8E34     		adds	r4, r4, #142
 1040              	.LVL93:
 1041              		.loc 1 2695 28 is_stmt 1 view .LVU343
 1042              		.loc 1 2695 2 is_stmt 0 view .LVU344
 1043 0140 B4F5C87F 		cmp	r4, #400
 1044 0144 06DA     		bge	.L62
 1045              	.LVL94:
 1046              	.L88:
2696:src/display.c **** 		clr_dot(i);
 1047              		.loc 1 2696 3 is_stmt 1 discriminator 3 view .LVU345
 1048 0146 2046     		mov	r0, r4
2695:src/display.c **** 		clr_dot(i);
 1049              		.loc 1 2695 36 is_stmt 0 discriminator 3 view .LVU346
 1050 0148 0134     		adds	r4, r4, #1
 1051              	.LVL95:
 1052              		.loc 1 2696 3 discriminator 3 view .LVU347
ARM GAS  /tmp/ccTlkAzC.s 			page 71


 1053 014a FFF7FEFF 		bl	clr_dot
 1054              	.LVL96:
2695:src/display.c **** 		clr_dot(i);
 1055              		.loc 1 2695 35 is_stmt 1 discriminator 3 view .LVU348
2695:src/display.c **** 		clr_dot(i);
 1056              		.loc 1 2695 28 discriminator 3 view .LVU349
2695:src/display.c **** 		clr_dot(i);
 1057              		.loc 1 2695 2 is_stmt 0 discriminator 3 view .LVU350
 1058 014e B4F5C87F 		cmp	r4, #400
 1059 0152 F8D1     		bne	.L88
 1060              	.L62:
2697:src/display.c **** #endif
2698:src/display.c **** }
 1061              		.loc 1 2698 1 view .LVU351
 1062 0154 0DF5097D 		add	sp, sp, #548
 1063              		.cfi_remember_state
 1064              		.cfi_def_cfa_offset 36
 1065              	.LVL97:
 1066              		.loc 1 2698 1 view .LVU352
 1067              		@ sp needed
 1068 0158 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1069              	.LVL98:
 1070              	.L72:
 1071              		.cfi_restore_state
 1072              	.LBB163:
2641:src/display.c **** 					break;
 1073              		.loc 1 2641 15 is_stmt 1 view .LVU353
2642:src/display.c **** 			case 0x60:	current_smallp = 1;
 1074              		.loc 1 2642 6 view .LVU354
2646:src/display.c **** 			str += 3;
 1075              		.loc 1 2646 4 view .LVU355
2646:src/display.c **** 			str += 3;
 1076              		.loc 1 2646 8 is_stmt 0 view .LVU356
 1077 015c 009B     		ldr	r3, [sp]
2641:src/display.c **** 					break;
 1078              		.loc 1 2641 30 view .LVU357
 1079 015e 4FF0000A 		mov	r10, #0
2646:src/display.c **** 			str += 3;
 1080              		.loc 1 2646 8 view .LVU358
 1081 0162 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 1082 0164 89E7     		b	.L75
 1083              	.LVL99:
 1084              	.L73:
2643:src/display.c **** 					break;
 1085              		.loc 1 2643 15 is_stmt 1 view .LVU359
2644:src/display.c **** 			}
 1086              		.loc 1 2644 6 view .LVU360
2646:src/display.c **** 			str += 3;
 1087              		.loc 1 2646 4 view .LVU361
2646:src/display.c **** 			str += 3;
 1088              		.loc 1 2646 8 is_stmt 0 view .LVU362
 1089 0166 009B     		ldr	r3, [sp]
 1090 0168 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
2643:src/display.c **** 					break;
 1091              		.loc 1 2643 30 view .LVU363
 1092 016a 4FF0010A 		mov	r10, #1
 1093 016e 00F58075 		add	r5, r0, #256
ARM GAS  /tmp/ccTlkAzC.s 			page 72


 1094 0172 82E7     		b	.L75
 1095              	.LVL100:
 1096              	.L109:
2643:src/display.c **** 					break;
 1097              		.loc 1 2643 30 view .LVU364
 1098              	.LBE163:
2603:src/display.c **** 			if (LastDisplayedText[i] != '\0')
 1099              		.loc 1 2603 4 is_stmt 1 view .LVU365
 1100 0174 A11C     		adds	r1, r4, #2
 1101 0176 2046     		mov	r0, r4
 1102 0178 FFF7FEFF 		bl	scopy
 1103              	.LVL101:
2604:src/display.c **** 				++i;
 1104              		.loc 1 2604 4 view .LVU366
2604:src/display.c **** 				++i;
 1105              		.loc 1 2604 7 is_stmt 0 view .LVU367
 1106 017c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1107 017e 002B     		cmp	r3, #0
 1108 0180 3FF45AAF 		beq	.L68
 1109 0184 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1110 0186 4FE7     		b	.L69
 1111              	.LVL102:
 1112              	.L92:
 1113              	.LBB164:
2604:src/display.c **** 				++i;
 1114              		.loc 1 2604 7 view .LVU368
 1115 0188 DDF808A0 		ldr	r10, [sp, #8]
 1116 018c 75E7     		b	.L75
 1117              	.L114:
 1118 018e 00BF     		.align	2
 1119              	.L113:
 1120 0190 00000000 		.word	LastDisplayedText
 1121 0194 00000000 		.word	RectPolConv
 1122 0198 00000000 		.word	forceDispPlot
 1123              	.LBE164:
 1124              		.cfi_endproc
 1125              	.LFE37:
 1127              		.section	.rodata.set_exp.str1.4,"aMS",%progbits,1
 1128              		.align	2
 1129              	.LC0:
 1130 0000 48494700 		.ascii	"HIG\000"
 1131              		.section	.text.set_exp,"ax",%progbits
 1132              		.align	1
 1133              		.p2align 2,,3
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu fpv4-sp-d16
 1139              	set_exp:
 1140              	.LVL103:
 1141              	.LFB14:
 429:src/display.c **** 	union {
 1142              		.loc 1 429 52 is_stmt 1 view -0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 8
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 430:src/display.c **** 		char buf[4];
ARM GAS  /tmp/ccTlkAzC.s 			page 73


 1146              		.loc 1 430 2 view .LVU370
 434:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1147              		.loc 1 434 2 view .LVU371
 448:src/display.c **** #endif
 1148              		.loc 1 448 2 view .LVU372
 451:src/display.c **** 	if (exp < 0) {
 1149              		.loc 1 451 2 view .LVU373
 429:src/display.c **** 	union {
 1150              		.loc 1 429 52 is_stmt 0 view .LVU374
 1151 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1152              		.cfi_def_cfa_offset 20
 1153              		.cfi_offset 4, -20
 1154              		.cfi_offset 5, -16
 1155              		.cfi_offset 6, -12
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 452:src/display.c **** 		negative = 1;
 1158              		.loc 1 452 5 view .LVU375
 1159 0002 051E     		subs	r5, r0, #0
 429:src/display.c **** 	union {
 1160              		.loc 1 429 52 view .LVU376
 1161 0004 83B0     		sub	sp, sp, #12
 1162              		.cfi_def_cfa_offset 32
 429:src/display.c **** 	union {
 1163              		.loc 1 429 52 view .LVU377
 1164 0006 0F46     		mov	r7, r1
 1165              	.LVL104:
 452:src/display.c **** 		negative = 1;
 1166              		.loc 1 452 2 is_stmt 1 view .LVU378
 429:src/display.c **** 	union {
 1167              		.loc 1 429 52 is_stmt 0 view .LVU379
 1168 0008 1446     		mov	r4, r2
 452:src/display.c **** 		negative = 1;
 1169              		.loc 1 452 5 view .LVU380
 1170 000a 0ADB     		blt	.L139
 451:src/display.c **** 	if (exp < 0) {
 1171              		.loc 1 451 11 view .LVU381
 1172 000c 01F00203 		and	r3, r1, #2
 1173              	.LVL105:
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1174              		.loc 1 459 2 is_stmt 1 view .LVU382
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1175              		.loc 1 459 5 is_stmt 0 view .LVU383
 1176 0010 A2B3     		cbz	r2, .L120
 464:src/display.c **** #endif
 1177              		.loc 1 464 3 is_stmt 1 view .LVU384
 464:src/display.c **** #endif
 1178              		.loc 1 464 6 is_stmt 0 view .LVU385
 1179 0012 B5F57A7F 		cmp	r5, #1000
 1180 0016 2ADB     		blt	.L121
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1181              		.loc 1 466 4 is_stmt 1 view .LVU386
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1182              		.loc 1 466 7 is_stmt 0 view .LVU387
 1183 0018 73BB     		cbnz	r3, .L126
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1184              		.loc 1 466 19 is_stmt 1 discriminator 1 view .LVU388
ARM GAS  /tmp/ccTlkAzC.s 			page 74


 1185              	.LVL106:
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1186              		.loc 1 466 26 is_stmt 0 discriminator 1 view .LVU389
 1187 001a 3A23     		movs	r3, #58
 1188              	.LVL107:
 466:src/display.c **** 			// No exponent separator for large -ve exponents
 1189              		.loc 1 466 26 discriminator 1 view .LVU390
 1190 001c 04F8013B 		strb	r3, [r4], #1
 1191              	.LVL108:
 473:src/display.c **** 	}
 1192              		.loc 1 473 3 is_stmt 1 discriminator 1 view .LVU391
 1193 0020 08E0     		b	.L122
 1194              	.LVL109:
 1195              	.L139:
 453:src/display.c **** 		exp = -exp;
 1196              		.loc 1 453 3 view .LVU392
 454:src/display.c **** 	}
 1197              		.loc 1 454 3 view .LVU393
 454:src/display.c **** 	}
 1198              		.loc 1 454 7 is_stmt 0 view .LVU394
 1199 0022 6E42     		rsbs	r6, r5, #0
 1200              	.LVL110:
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1201              		.loc 1 459 2 is_stmt 1 view .LVU395
 459:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1202              		.loc 1 459 5 is_stmt 0 view .LVU396
 1203 0024 AAB3     		cbz	r2, .L117
 464:src/display.c **** #endif
 1204              		.loc 1 464 3 is_stmt 1 view .LVU397
 464:src/display.c **** #endif
 1205              		.loc 1 464 6 is_stmt 0 view .LVU398
 1206 0026 15F57A7F 		cmn	r5, #1000
 1207 002a 2DDC     		bgt	.L140
 1208              	.LVL111:
 1209              	.L118:
 473:src/display.c **** 	}
 1210              		.loc 1 473 17 is_stmt 1 discriminator 1 view .LVU399
 473:src/display.c **** 	}
 1211              		.loc 1 473 24 is_stmt 0 discriminator 1 view .LVU400
 1212 002c 2D23     		movs	r3, #45
 1213 002e 04F8013B 		strb	r3, [r4], #1
 1214              	.LVL112:
 473:src/display.c **** 	}
 1215              		.loc 1 473 24 discriminator 1 view .LVU401
 1216 0032 3546     		mov	r5, r6
 1217              	.LVL113:
 1218              	.L122:
 521:src/display.c **** #endif
 1219              		.loc 1 521 2 is_stmt 1 view .LVU402
 1220 0034 01AE     		add	r6, sp, #4
 1221 0036 0021     		movs	r1, #0
 1222 0038 3046     		mov	r0, r6
 1223 003a 0422     		movs	r2, #4
 1224 003c FFF7FEFF 		bl	xset
 1225              	.LVL114:
 523:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1226              		.loc 1 523 2 view .LVU403
ARM GAS  /tmp/ccTlkAzC.s 			page 75


 523:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1227              		.loc 1 523 5 is_stmt 0 view .LVU404
 1228 0040 17F0050F 		tst	r7, #5
 524:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1229              		.loc 1 524 3 view .LVU405
 1230 0044 2946     		mov	r1, r5
 523:src/display.c **** 		num_arg_0(u.buf, exp, 3);
 1231              		.loc 1 523 5 view .LVU406
 1232 0046 09D0     		beq	.L125
 1233              	.LVL115:
 524:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1234              		.loc 1 524 3 is_stmt 1 view .LVU407
 1235 0048 0322     		movs	r2, #3
 1236 004a 3046     		mov	r0, r6
 1237 004c FFF7FEFF 		bl	num_arg_0
 1238              	.LVL116:
 1239              	.L124:
 546:src/display.c **** }
 1240              		.loc 1 546 2 view .LVU408
 1241 0050 2146     		mov	r1, r4
 1242 0052 3046     		mov	r0, r6
 1243 0054 FFF7FEFF 		bl	set_exp_digits_string
 1244              	.LVL117:
 547:src/display.c **** 
 1245              		.loc 1 547 1 is_stmt 0 view .LVU409
 1246 0058 03B0     		add	sp, sp, #12
 1247              		.cfi_remember_state
 1248              		.cfi_def_cfa_offset 20
 1249              		@ sp needed
 1250 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 1251              	.LVL118:
 1252              	.L125:
 1253              		.cfi_restore_state
 544:src/display.c **** no_number:
 1254              		.loc 1 544 3 is_stmt 1 view .LVU410
 1255 005c 3046     		mov	r0, r6
 1256 005e FFF7FEFF 		bl	num_arg
 1257              	.LVL119:
 546:src/display.c **** }
 1258              		.loc 1 546 2 view .LVU411
 1259 0062 2146     		mov	r1, r4
 1260 0064 3046     		mov	r0, r6
 1261 0066 FFF7FEFF 		bl	set_exp_digits_string
 1262              	.LVL120:
 547:src/display.c **** 
 1263              		.loc 1 547 1 is_stmt 0 view .LVU412
 1264 006a 03B0     		add	sp, sp, #12
 1265              		.cfi_remember_state
 1266              		.cfi_def_cfa_offset 20
 1267              		@ sp needed
 1268 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 1269              	.LVL121:
 1270              	.L121:
 1271              		.cfi_restore_state
 469:src/display.c **** #else
 1272              		.loc 1 469 8 is_stmt 1 view .LVU413
 469:src/display.c **** #else
ARM GAS  /tmp/ccTlkAzC.s 			page 76


 1273              		.loc 1 469 15 is_stmt 0 view .LVU414
 1274 006e 6522     		movs	r2, #101
 1275              	.LVL122:
 469:src/display.c **** #else
 1276              		.loc 1 469 15 view .LVU415
 1277 0070 04F8012B 		strb	r2, [r4], #1
 1278              	.LVL123:
 473:src/display.c **** 	}
 1279              		.loc 1 473 3 is_stmt 1 view .LVU416
 473:src/display.c **** 	}
 1280              		.loc 1 473 6 is_stmt 0 view .LVU417
 1281 0074 002B     		cmp	r3, #0
 1282 0076 DDD0     		beq	.L122
 1283              	.L126:
 473:src/display.c **** 	}
 1284              		.loc 1 473 6 view .LVU418
 1285 0078 2E46     		mov	r6, r5
 1286 007a D7E7     		b	.L118
 1287              	.LVL124:
 1288              	.L120:
 476:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1289              		.loc 1 476 3 is_stmt 1 view .LVU419
 476:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1290              		.loc 1 476 6 is_stmt 0 view .LVU420
 1291 007c 43B9     		cbnz	r3, .L141
 1292              	.LVL125:
 1293              	.L123:
 480:src/display.c **** #endif
 1294              		.loc 1 480 3 is_stmt 1 view .LVU421
 480:src/display.c **** #endif
 1295              		.loc 1 480 6 is_stmt 0 view .LVU422
 1296 007e B5F57A7F 		cmp	r5, #1000
 1297 0082 0EDA     		bge	.L142
 480:src/display.c **** #endif
 1298              		.loc 1 480 6 view .LVU423
 1299 0084 0024     		movs	r4, #0
 1300              	.LVL126:
 480:src/display.c **** #endif
 1301              		.loc 1 480 6 view .LVU424
 1302 0086 D5E7     		b	.L122
 1303              	.LVL127:
 1304              	.L140:
 469:src/display.c **** #else
 1305              		.loc 1 469 8 is_stmt 1 view .LVU425
 469:src/display.c **** #else
 1306              		.loc 1 469 15 is_stmt 0 view .LVU426
 1307 0088 6523     		movs	r3, #101
 1308 008a 04F8013B 		strb	r3, [r4], #1
 1309              	.LVL128:
 473:src/display.c **** 	}
 1310              		.loc 1 473 3 is_stmt 1 view .LVU427
 1311 008e CDE7     		b	.L118
 1312              	.LVL129:
 1313              	.L141:
 473:src/display.c **** 	}
 1314              		.loc 1 473 3 is_stmt 0 view .LVU428
 1315 0090 2E46     		mov	r6, r5
ARM GAS  /tmp/ccTlkAzC.s 			page 77


 1316              	.LVL130:
 1317              	.L117:
 476:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1318              		.loc 1 476 17 is_stmt 1 view .LVU429
 1319              	.LBB165:
 1320              	.LBI165:
 295:src/display.c **** {
 1321              		.loc 1 295 13 view .LVU430
 1322              	.LBB166:
 297:src/display.c **** 	set_dot(EXP_SIGN);
 1323              		.loc 1 297 2 view .LVU431
 297:src/display.c **** 	set_dot(EXP_SIGN);
 1324              		.loc 1 297 26 is_stmt 0 view .LVU432
 1325 0092 074B     		ldr	r3, .L143
 1326 0094 2D22     		movs	r2, #45
 1327              	.LVL131:
 298:src/display.c **** }
 1328              		.loc 1 298 2 view .LVU433
 1329 0096 8220     		movs	r0, #130
 297:src/display.c **** 	set_dot(EXP_SIGN);
 1330              		.loc 1 297 26 view .LVU434
 1331 0098 1A70     		strb	r2, [r3]
 298:src/display.c **** }
 1332              		.loc 1 298 2 is_stmt 1 view .LVU435
 299:src/display.c **** 
 1333              		.loc 1 299 1 is_stmt 0 view .LVU436
 1334 009a 3546     		mov	r5, r6
 298:src/display.c **** }
 1335              		.loc 1 298 2 view .LVU437
 1336 009c FFF7FEFF 		bl	set_dot
 1337              	.LVL132:
 299:src/display.c **** 
 1338              		.loc 1 299 1 view .LVU438
 1339 00a0 EDE7     		b	.L123
 1340              	.LVL133:
 1341              	.L142:
 299:src/display.c **** 
 1342              		.loc 1 299 1 view .LVU439
 1343              	.LBE166:
 1344              	.LBE165:
 482:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1345              		.loc 1 482 4 is_stmt 1 view .LVU440
 490:src/display.c **** #endif
 1346              		.loc 1 490 5 view .LVU441
 1347 00a2 01AE     		add	r6, sp, #4
 1348 00a4 0349     		ldr	r1, .L143+4
 1349 00a6 3046     		mov	r0, r6
 1350 00a8 FFF7FEFF 		bl	scopy
 1351              	.LVL134:
 492:src/display.c **** 			}
 1352              		.loc 1 492 5 view .LVU442
 1353 00ac 0024     		movs	r4, #0
 1354              	.LVL135:
 492:src/display.c **** 			}
 1355              		.loc 1 492 5 is_stmt 0 view .LVU443
 1356 00ae CFE7     		b	.L124
 1357              	.L144:
ARM GAS  /tmp/ccTlkAzC.s 			page 78


 1358              		.align	2
 1359              	.L143:
 1360 00b0 00000000 		.word	LastDisplayedExponent
 1361 00b4 00000000 		.word	.LC0
 1362              		.cfi_endproc
 1363              	.LFE14:
 1365              		.section	.text.set_separator.part.0,"ax",%progbits
 1366              		.align	1
 1367              		.p2align 2,,3
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1371              		.fpu fpv4-sp-d16
 1373              	set_separator.part.0:
 1374              	.LVL136:
 1375              	.LFB43:
 354:src/display.c **** 	if (sep == SEP_NONE)
 1376              		.loc 1 354 14 is_stmt 1 view -0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 0
 1379              		@ frame_needed = 0, uses_anonymous_args = 0
 361:src/display.c **** 		set_dot(posn+7);
 1380              		.loc 1 361 3 view .LVU445
 354:src/display.c **** 	if (sep == SEP_NONE)
 1381              		.loc 1 354 14 is_stmt 0 view .LVU446
 1382 0000 70B5     		push	{r4, r5, r6, lr}
 1383              		.cfi_def_cfa_offset 16
 1384              		.cfi_offset 4, -16
 1385              		.cfi_offset 5, -12
 1386              		.cfi_offset 6, -8
 1387              		.cfi_offset 14, -4
 354:src/display.c **** 	if (sep == SEP_NONE)
 1388              		.loc 1 354 14 view .LVU447
 1389 0002 0546     		mov	r5, r0
 1390 0004 0E46     		mov	r6, r1
 362:src/display.c **** 		if (sep == SEP_COMMA)
 1391              		.loc 1 362 3 view .LVU448
 1392 0006 0238     		subs	r0, r0, #2
 1393              	.LVL137:
 362:src/display.c **** 		if (sep == SEP_COMMA)
 1394              		.loc 1 362 3 view .LVU449
 1395 0008 FFF7FEFF 		bl	set_dot
 1396              	.LVL138:
 363:src/display.c **** 			set_dot(posn+8);
 1397              		.loc 1 363 6 view .LVU450
 1398 000c 012E     		cmp	r6, #1
 361:src/display.c **** 		set_dot(posn+7);
 1399              		.loc 1 361 8 view .LVU451
 1400 000e A5F10904 		sub	r4, r5, #9
 1401              	.LVL139:
 362:src/display.c **** 		if (sep == SEP_COMMA)
 1402              		.loc 1 362 3 is_stmt 1 view .LVU452
 363:src/display.c **** 			set_dot(posn+8);
 1403              		.loc 1 363 3 view .LVU453
 363:src/display.c **** 			set_dot(posn+8);
 1404              		.loc 1 363 6 is_stmt 0 view .LVU454
 1405 0012 0CD0     		beq	.L149
ARM GAS  /tmp/ccTlkAzC.s 			page 79


 366:src/display.c **** #endif
 1406              		.loc 1 366 37 view .LVU455
 1407 0014 2E21     		movs	r1, #46
 1408              	.L146:
 366:src/display.c **** #endif
 1409              		.loc 1 366 28 view .LVU456
 1410 0016 084B     		ldr	r3, .L150
 366:src/display.c **** #endif
 1411              		.loc 1 366 37 view .LVU457
 1412 0018 084A     		ldr	r2, .L150+4
 366:src/display.c **** #endif
 1413              		.loc 1 366 28 view .LVU458
 1414 001a 83FB0403 		smull	r0, r3, r3, r4
 1415 001e E417     		asrs	r4, r4, #31
 1416              	.LVL140:
 366:src/display.c **** #endif
 1417              		.loc 1 366 28 view .LVU459
 1418 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 366:src/display.c **** #endif
 1419              		.loc 1 366 33 view .LVU460
 1420 0024 0134     		adds	r4, r4, #1
 370:src/display.c **** 
 1421              		.loc 1 370 1 view .LVU461
 1422 0026 0020     		movs	r0, #0
 366:src/display.c **** #endif
 1423              		.loc 1 366 37 view .LVU462
 1424 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1425              	.LVL141:
 370:src/display.c **** 
 1426              		.loc 1 370 1 view .LVU463
 1427 002c 70BD     		pop	{r4, r5, r6, pc}
 1428              	.LVL142:
 1429              	.L149:
 364:src/display.c **** #ifndef REALBUILD
 1430              		.loc 1 364 4 is_stmt 1 view .LVU464
 1431 002e 681E     		subs	r0, r5, #1
 1432 0030 FFF7FEFF 		bl	set_dot
 1433              	.LVL143:
 366:src/display.c **** #endif
 1434              		.loc 1 366 3 view .LVU465
 366:src/display.c **** #endif
 1435              		.loc 1 366 37 is_stmt 0 view .LVU466
 1436 0034 2C21     		movs	r1, #44
 1437 0036 EEE7     		b	.L146
 1438              	.L151:
 1439              		.align	2
 1440              	.L150:
 1441 0038 398EE338 		.word	954437177
 1442 003c 00000000 		.word	LastDisplayedNumber
 1443              		.cfi_endproc
 1444              	.LFE43:
 1446              		.section	.text.set_decimal,"ax",%progbits
 1447              		.align	1
 1448              		.p2align 2,,3
 1449              		.syntax unified
 1450              		.thumb
 1451              		.thumb_func
ARM GAS  /tmp/ccTlkAzC.s 			page 80


 1452              		.fpu fpv4-sp-d16
 1454              	set_decimal:
 1455              	.LVL144:
 1456              	.LFB8:
 336:src/display.c **** 	if (res) {
 1457              		.loc 1 336 87 is_stmt 1 view -0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 0, uses_anonymous_args = 0
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1461              		.loc 1 337 2 view .LVU468
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 1462              		.loc 1 337 5 is_stmt 0 view .LVU469
 1463 0000 3AB1     		cbz	r2, .L153
 338:src/display.c **** 	} else {
 1464              		.loc 1 338 3 is_stmt 1 view .LVU470
 338:src/display.c **** 	} else {
 1465              		.loc 1 338 10 is_stmt 0 view .LVU471
 1466 0002 0029     		cmp	r1, #0
 338:src/display.c **** 	} else {
 1467              		.loc 1 338 7 view .LVU472
 1468 0004 1046     		mov	r0, r2
 1469              	.LVL145:
 338:src/display.c **** 	} else {
 1470              		.loc 1 338 10 view .LVU473
 1471 0006 0CBF     		ite	eq
 1472 0008 2E23     		moveq	r3, #46
 1473 000a 2C23     		movne	r3, #44
 1474 000c 00F8013B 		strb	r3, [r0], #1
 1475              	.LVL146:
 348:src/display.c **** 
 1476              		.loc 1 348 1 view .LVU474
 1477 0010 7047     		bx	lr
 1478              	.LVL147:
 1479              	.L153:
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1480              		.loc 1 340 3 is_stmt 1 view .LVU475
 336:src/display.c **** 	if (res) {
 1481              		.loc 1 336 87 is_stmt 0 view .LVU476
 1482 0012 10B5     		push	{r4, lr}
 1483              		.cfi_def_cfa_offset 8
 1484              		.cfi_offset 4, -8
 1485              		.cfi_offset 14, -4
 1486 0014 82B0     		sub	sp, sp, #8
 1487              		.cfi_def_cfa_offset 16
 1488 0016 0446     		mov	r4, r0
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1489              		.loc 1 340 3 view .LVU477
 1490 0018 0730     		adds	r0, r0, #7
 1491              	.LVL148:
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 1492              		.loc 1 340 3 view .LVU478
 1493 001a 0191     		str	r1, [sp, #4]
 1494 001c FFF7FEFF 		bl	set_dot
 1495              	.LVL149:
 341:src/display.c **** 			set_dot(posn+8);
 1496              		.loc 1 341 3 is_stmt 1 view .LVU479
ARM GAS  /tmp/ccTlkAzC.s 			page 81


 341:src/display.c **** 			set_dot(posn+8);
 1497              		.loc 1 341 6 is_stmt 0 view .LVU480
 1498 0020 0199     		ldr	r1, [sp, #4]
 1499 0022 69B9     		cbnz	r1, .L162
 1500              	.LBB169:
 1501              	.LBB170:
 344:src/display.c **** #endif
 1502              		.loc 1 344 35 view .LVU481
 1503 0024 2E22     		movs	r2, #46
 1504              	.L156:
 344:src/display.c **** #endif
 1505              		.loc 1 344 27 view .LVU482
 1506 0026 0948     		ldr	r0, .L163
 344:src/display.c **** #endif
 1507              		.loc 1 344 35 view .LVU483
 1508 0028 094B     		ldr	r3, .L163+4
 344:src/display.c **** #endif
 1509              		.loc 1 344 27 view .LVU484
 1510 002a 80FB0410 		smull	r1, r0, r0, r4
 1511 002e E417     		asrs	r4, r4, #31
 1512              	.LVL150:
 344:src/display.c **** #endif
 1513              		.loc 1 344 27 view .LVU485
 1514 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 344:src/display.c **** #endif
 1515              		.loc 1 344 32 view .LVU486
 1516 0034 0134     		adds	r4, r4, #1
 344:src/display.c **** #endif
 1517              		.loc 1 344 35 view .LVU487
 1518 0036 0020     		movs	r0, #0
 1519 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1520              	.LVL151:
 347:src/display.c **** }
 1521              		.loc 1 347 2 is_stmt 1 view .LVU488
 347:src/display.c **** }
 1522              		.loc 1 347 2 is_stmt 0 view .LVU489
 1523              	.LBE170:
 1524              	.LBE169:
 347:src/display.c **** }
 1525              		.loc 1 347 2 is_stmt 1 view .LVU490
 348:src/display.c **** 
 1526              		.loc 1 348 1 is_stmt 0 view .LVU491
 1527 003c 02B0     		add	sp, sp, #8
 1528              		.cfi_remember_state
 1529              		.cfi_def_cfa_offset 8
 1530              		@ sp needed
 1531 003e 10BD     		pop	{r4, pc}
 1532              	.LVL152:
 1533              	.L162:
 1534              		.cfi_restore_state
 342:src/display.c **** #ifndef REALBUILD
 1535              		.loc 1 342 4 is_stmt 1 view .LVU492
 1536 0040 04F10800 		add	r0, r4, #8
 1537 0044 FFF7FEFF 		bl	set_dot
 1538              	.LVL153:
 1539              	.LBB172:
 1540              	.LBI169:
ARM GAS  /tmp/ccTlkAzC.s 			page 82


 336:src/display.c **** 	if (res) {
 1541              		.loc 1 336 14 view .LVU493
 1542              	.LBB171:
 344:src/display.c **** #endif
 1543              		.loc 1 344 2 view .LVU494
 344:src/display.c **** #endif
 1544              		.loc 1 344 35 is_stmt 0 view .LVU495
 1545 0048 2C22     		movs	r2, #44
 1546 004a ECE7     		b	.L156
 1547              	.L164:
 1548              		.align	2
 1549              	.L163:
 1550 004c 398EE338 		.word	954437177
 1551 0050 00000000 		.word	LastDisplayedNumber
 1552              	.LBE171:
 1553              	.LBE172:
 1554              		.cfi_endproc
 1555              	.LFE8:
 1557              		.section	.text.set_digits_string,"ax",%progbits
 1558              		.align	1
 1559              		.p2align 2,,3
 1560              		.syntax unified
 1561              		.thumb
 1562              		.thumb_func
 1563              		.fpu fpv4-sp-d16
 1565              	set_digits_string:
 1566              	.LVL154:
 1567              	.LFB12:
 401:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1568              		.loc 1 401 55 is_stmt 1 view -0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1572              		.loc 1 402 2 view .LVU497
 401:src/display.c **** 	for (; *msg != '\0'; msg++) {
 1573              		.loc 1 401 55 is_stmt 0 view .LVU498
 1574 0000 38B5     		push	{r3, r4, r5, lr}
 1575              		.cfi_def_cfa_offset 16
 1576              		.cfi_offset 3, -16
 1577              		.cfi_offset 4, -12
 1578              		.cfi_offset 5, -8
 1579              		.cfi_offset 14, -4
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1580              		.loc 1 402 9 view .LVU499
 1581 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1582              		.loc 1 402 9 is_stmt 1 view .LVU500
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1583              		.loc 1 402 2 is_stmt 0 view .LVU501
 1584 0004 E3B1     		cbz	r3, .L165
 1585 0006 0546     		mov	r5, r0
 1586 0008 0C46     		mov	r4, r1
 1587 000a 06E0     		b	.L169
 1588              	.LVL155:
 1589              	.L167:
 1590              	.LBB173:
ARM GAS  /tmp/ccTlkAzC.s 			page 83


 1591              	.LBB174:
 396:src/display.c **** 	return res;
 1592              		.loc 1 396 7 view .LVU502
 1593 000c 2046     		mov	r0, r4
 1594 000e FFF7FEFF 		bl	set_dig
 1595              	.LVL156:
 397:src/display.c **** }
 1596              		.loc 1 397 2 is_stmt 1 view .LVU503
 397:src/display.c **** }
 1597              		.loc 1 397 2 is_stmt 0 view .LVU504
 1598              	.LBE174:
 1599              	.LBE173:
 407:src/display.c **** 		}
 1600              		.loc 1 407 4 is_stmt 1 view .LVU505
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1601              		.loc 1 402 9 is_stmt 0 view .LVU506
 1602 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1603              	.LVL157:
 407:src/display.c **** 		}
 1604              		.loc 1 407 6 view .LVU507
 1605 0016 0934     		adds	r4, r4, #9
 1606              	.LVL158:
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1607              		.loc 1 402 23 is_stmt 1 view .LVU508
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1608              		.loc 1 402 9 view .LVU509
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1609              		.loc 1 402 2 is_stmt 0 view .LVU510
 1610 0018 93B1     		cbz	r3, .L165
 1611              	.LVL159:
 1612              	.L169:
 403:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1613              		.loc 1 403 3 is_stmt 1 view .LVU511
 404:src/display.c **** 		else {
 1614              		.loc 1 404 4 view .LVU512
 406:src/display.c **** 			j += SEGS_PER_DIGIT;
 1615              		.loc 1 406 4 view .LVU513
 1616              	.LBB177:
 1617              	.LBI173:
 394:src/display.c **** 	if (res) *res++ = ch;
 1618              		.loc 1 394 14 view .LVU514
 1619              	.LBB175:
 395:src/display.c **** 	else	set_dig(base, ch);
 1620              		.loc 1 395 2 view .LVU515
 396:src/display.c **** 	return res;
 1621              		.loc 1 396 7 view .LVU516
 1622              	.LBE175:
 1623              	.LBE177:
 403:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1624              		.loc 1 403 19 is_stmt 0 view .LVU517
 1625 001a 03F0FD02 		and	r2, r3, #253
 1626 001e 2C2A     		cmp	r2, #44
 404:src/display.c **** 		else {
 1627              		.loc 1 404 4 view .LVU518
 1628 0020 A4F10900 		sub	r0, r4, #9
 1629 0024 4FF00002 		mov	r2, #0
 1630              	.LBB178:
ARM GAS  /tmp/ccTlkAzC.s 			page 84


 1631              	.LBB176:
 396:src/display.c **** 	return res;
 1632              		.loc 1 396 7 view .LVU519
 1633 0028 1946     		mov	r1, r3
 1634              	.LBE176:
 1635              	.LBE178:
 403:src/display.c **** 			set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1636              		.loc 1 403 19 view .LVU520
 1637 002a EFD1     		bne	.L167
 404:src/display.c **** 		else {
 1638              		.loc 1 404 4 view .LVU521
 1639 002c B3F12E01 		subs	r1, r3, #46
 1640 0030 18BF     		it	ne
 1641 0032 0121     		movne	r1, #1
 1642 0034 FFF7FEFF 		bl	set_decimal
 1643              	.LVL160:
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1644              		.loc 1 402 23 is_stmt 1 view .LVU522
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1645              		.loc 1 402 9 view .LVU523
 1646 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1647              	.LVL161:
 402:src/display.c **** 		if (*msg == '.' || *msg == ',')
 1648              		.loc 1 402 2 is_stmt 0 view .LVU524
 1649 003c 002B     		cmp	r3, #0
 1650 003e ECD1     		bne	.L169
 1651              	.LVL162:
 1652              	.L165:
 410:src/display.c **** 
 1653              		.loc 1 410 1 view .LVU525
 1654 0040 38BD     		pop	{r3, r4, r5, pc}
 1655              		.cfi_endproc
 1656              	.LFE12:
 1658 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1659              		.align	2
 1660              	.LC1:
 1661 0000 4E614E00 		.ascii	"NaN\000"
 1662              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1663              		.align	1
 1664              		.p2align 2,,3
 1665              		.syntax unified
 1666              		.thumb
 1667              		.thumb_func
 1668              		.fpu fpv4-sp-d16
 1670              	check_special_dn.isra.0:
 1671              	.LVL163:
 1672              	.LFB45:
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1673              		.loc 1 1168 12 is_stmt 1 view -0
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 0
 1676              		@ frame_needed = 0, uses_anonymous_args = 0
1169:src/display.c **** 		if (decNumberIsNaN(x)) {
 1677              		.loc 1 1169 2 view .LVU527
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1678              		.loc 1 1168 12 is_stmt 0 view .LVU528
 1679 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccTlkAzC.s 			page 85


 1680              		.cfi_def_cfa_offset 16
 1681              		.cfi_offset 3, -16
 1682              		.cfi_offset 4, -12
 1683              		.cfi_offset 5, -8
 1684              		.cfi_offset 14, -4
1169:src/display.c **** 		if (decNumberIsNaN(x)) {
 1685              		.loc 1 1169 6 view .LVU529
 1686 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1687              		.loc 1 1168 12 view .LVU530
 1688 0004 0546     		mov	r5, r0
1169:src/display.c **** 		if (decNumberIsNaN(x)) {
 1689              		.loc 1 1169 5 view .LVU531
 1690 0006 13F07000 		ands	r0, r3, #112
 1691 000a 09D0     		beq	.L175
1170:src/display.c **** 			if (res) {
 1692              		.loc 1 1170 3 is_stmt 1 view .LVU532
1170:src/display.c **** 			if (res) {
 1693              		.loc 1 1170 6 is_stmt 0 view .LVU533
 1694 000c 13F0300F 		tst	r3, #48
 1695 0010 0C46     		mov	r4, r1
 1696 0012 06D0     		beq	.L177
 1697              	.LVL164:
 1698              	.LBB181:
 1699              	.LBI181:
1168:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1700              		.loc 1 1168 12 is_stmt 1 view .LVU534
 1701              	.LBB182:
1171:src/display.c **** 				scopy(res, "NaN");
 1702              		.loc 1 1171 4 view .LVU535
1171:src/display.c **** 				scopy(res, "NaN");
 1703              		.loc 1 1171 7 is_stmt 0 view .LVU536
 1704 0014 89B1     		cbz	r1, .L178
1172:src/display.c **** 			} else {
 1705              		.loc 1 1172 5 is_stmt 1 view .LVU537
 1706 0016 0846     		mov	r0, r1
 1707 0018 1849     		ldr	r1, .L191
 1708              	.LVL165:
1172:src/display.c **** 			} else {
 1709              		.loc 1 1172 5 is_stmt 0 view .LVU538
 1710 001a FFF7FEFF 		bl	scopy
 1711              	.LVL166:
1172:src/display.c **** 			} else {
 1712              		.loc 1 1172 5 view .LVU539
 1713 001e 0120     		movs	r0, #1
 1714              	.LVL167:
 1715              	.L175:
1172:src/display.c **** 			} else {
 1716              		.loc 1 1172 5 view .LVU540
 1717              	.LBE182:
 1718              	.LBE181:
1204:src/display.c **** 
 1719              		.loc 1 1204 1 view .LVU541
 1720 0020 38BD     		pop	{r3, r4, r5, pc}
 1721              	.LVL168:
 1722              	.L177:
1182:src/display.c **** 				if (res) *res++ = '-';
ARM GAS  /tmp/ccTlkAzC.s 			page 86


 1723              		.loc 1 1182 4 is_stmt 1 view .LVU542
1182:src/display.c **** 				if (res) *res++ = '-';
 1724              		.loc 1 1182 7 is_stmt 0 view .LVU543
 1725 0022 1B06     		lsls	r3, r3, #24
 1726 0024 04D4     		bmi	.L190
1186:src/display.c **** 				*res++ = '\237';
 1727              		.loc 1 1186 4 is_stmt 1 view .LVU544
1186:src/display.c **** 				*res++ = '\237';
 1728              		.loc 1 1186 7 is_stmt 0 view .LVU545
 1729 0026 B9B1     		cbz	r1, .L182
 1730              	.LVL169:
 1731              	.L181:
1187:src/display.c **** 			else {
 1732              		.loc 1 1187 5 is_stmt 1 view .LVU546
1187:src/display.c **** 			else {
 1733              		.loc 1 1187 12 is_stmt 0 view .LVU547
 1734 0028 9F23     		movs	r3, #159
 1735 002a 2370     		strb	r3, [r4]
1200:src/display.c **** 		}
 1736              		.loc 1 1200 11 view .LVU548
 1737 002c 0120     		movs	r0, #1
1204:src/display.c **** 
 1738              		.loc 1 1204 1 view .LVU549
 1739 002e 38BD     		pop	{r3, r4, r5, pc}
 1740              	.LVL170:
 1741              	.L190:
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1742              		.loc 1 1183 5 is_stmt 1 view .LVU550
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1743              		.loc 1 1183 8 is_stmt 0 view .LVU551
 1744 0030 71B1     		cbz	r1, .L180
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1745              		.loc 1 1183 14 is_stmt 1 view .LVU552
 1746              	.LVL171:
1183:src/display.c **** 				else	set_dig(SEGS_PER_DIGIT, '-');
 1747              		.loc 1 1183 21 is_stmt 0 view .LVU553
 1748 0032 2D23     		movs	r3, #45
 1749 0034 04F8013B 		strb	r3, [r4], #1
 1750              	.LVL172:
1186:src/display.c **** 				*res++ = '\237';
 1751              		.loc 1 1186 4 is_stmt 1 view .LVU554
 1752 0038 F6E7     		b	.L181
 1753              	.LVL173:
 1754              	.L178:
 1755              	.LBB184:
 1756              	.LBB183:
1174:src/display.c **** #ifndef REALBUILD
 1757              		.loc 1 1174 5 view .LVU555
 1758 003a 1148     		ldr	r0, .L191+4
 1759 003c FFF7FEFF 		bl	set_digits_string
 1760              	.LVL174:
1176:src/display.c **** 				forceDispPlot=0;
 1761              		.loc 1 1176 5 view .LVU556
 1762 0040 1049     		ldr	r1, .L191+8
 1763 0042 1148     		ldr	r0, .L191+12
 1764 0044 FFF7FEFF 		bl	scopy
 1765              	.LVL175:
ARM GAS  /tmp/ccTlkAzC.s 			page 87


1177:src/display.c **** #endif
 1766              		.loc 1 1177 5 view .LVU557
1177:src/display.c **** #endif
 1767              		.loc 1 1177 18 is_stmt 0 view .LVU558
 1768 0048 104B     		ldr	r3, .L191+16
 1769 004a 1C70     		strb	r4, [r3]
 1770 004c 0120     		movs	r0, #1
 1771              	.LBE183:
 1772              	.LBE184:
1204:src/display.c **** 
 1773              		.loc 1 1204 1 view .LVU559
 1774 004e 38BD     		pop	{r3, r4, r5, pc}
 1775              	.LVL176:
 1776              	.L180:
1184:src/display.c **** 			}
 1777              		.loc 1 1184 10 is_stmt 1 view .LVU560
 1778 0050 2D21     		movs	r1, #45
 1779              	.LVL177:
1184:src/display.c **** 			}
 1780              		.loc 1 1184 10 is_stmt 0 view .LVU561
 1781 0052 0920     		movs	r0, #9
 1782 0054 FFF7FEFF 		bl	set_dig
 1783              	.LVL178:
1186:src/display.c **** 				*res++ = '\237';
 1784              		.loc 1 1186 4 is_stmt 1 view .LVU562
 1785              	.L182:
1189:src/display.c **** #ifndef REALBUILD
 1786              		.loc 1 1189 5 view .LVU563
 1787 0058 1221     		movs	r1, #18
 1788 005a 0D48     		ldr	r0, .L191+20
 1789 005c FFF7FEFF 		bl	set_digits_string
 1790              	.LVL179:
1191:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1791              		.loc 1 1191 5 view .LVU564
1191:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1792              		.loc 1 1191 8 is_stmt 0 view .LVU565
 1793 0060 95F90030 		ldrsb	r3, [r5]
1195:src/display.c **** 				}
 1794              		.loc 1 1195 6 view .LVU566
 1795 0064 0848     		ldr	r0, .L191+12
1191:src/display.c **** 					scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1796              		.loc 1 1191 8 view .LVU567
 1797 0066 002B     		cmp	r3, #0
1192:src/display.c **** 				}
 1798              		.loc 1 1192 6 is_stmt 1 view .LVU568
 1799 0068 B4BF     		ite	lt
 1800 006a 0A49     		ldrlt	r1, .L191+24
1195:src/display.c **** 				}
 1801              		.loc 1 1195 6 view .LVU569
 1802 006c 0A49     		ldrge	r1, .L191+28
 1803 006e FFF7FEFF 		bl	scopy
 1804              	.LVL180:
1197:src/display.c **** #endif
 1805              		.loc 1 1197 5 view .LVU570
1197:src/display.c **** #endif
 1806              		.loc 1 1197 18 is_stmt 0 view .LVU571
 1807 0072 064B     		ldr	r3, .L191+16
ARM GAS  /tmp/ccTlkAzC.s 			page 88


 1808 0074 0022     		movs	r2, #0
 1809 0076 1A70     		strb	r2, [r3]
1200:src/display.c **** 		}
 1810              		.loc 1 1200 11 view .LVU572
 1811 0078 0120     		movs	r0, #1
1204:src/display.c **** 
 1812              		.loc 1 1204 1 view .LVU573
 1813 007a 38BD     		pop	{r3, r4, r5, pc}
 1814              	.L192:
 1815              		.align	2
 1816              	.L191:
 1817 007c 00000000 		.word	.LC1
 1818 0080 00000000 		.word	.LANCHOR3
 1819 0084 00000000 		.word	.LANCHOR4
 1820 0088 00000000 		.word	LastDisplayedNumber
 1821 008c 00000000 		.word	forceDispPlot
 1822 0090 00000000 		.word	.LANCHOR5
 1823 0094 00000000 		.word	.LANCHOR6
 1824 0098 00000000 		.word	.LANCHOR7
 1825              		.cfi_endproc
 1826              	.LFE45:
 1828              		.section	.text.set_x_hms,"ax",%progbits
 1829              		.align	1
 1830              		.p2align 2,,3
 1831              		.syntax unified
 1832              		.thumb
 1833              		.thumb_func
 1834              		.fpu fpv4-sp-d16
 1836              	set_x_hms:
 1837              	.LVL181:
 1838              	.LFB22:
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1839              		.loc 1 1249 56 is_stmt 1 view -0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 200
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
1250:src/display.c **** 	int j=0;
 1843              		.loc 1 1250 2 view .LVU575
1251:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1844              		.loc 1 1251 2 view .LVU576
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1845              		.loc 1 1249 56 is_stmt 0 view .LVU577
 1846 0000 30B5     		push	{r4, r5, lr}
 1847              		.cfi_def_cfa_offset 12
 1848              		.cfi_offset 4, -12
 1849              		.cfi_offset 5, -8
 1850              		.cfi_offset 14, -4
 1851 0002 B5B0     		sub	sp, sp, #212
 1852              		.cfi_def_cfa_offset 224
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1853              		.loc 1 1249 56 view .LVU578
 1854 0004 0446     		mov	r4, r0
1251:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1855              		.loc 1 1251 6 view .LVU579
 1856 0006 0023     		movs	r3, #0
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1857              		.loc 1 1255 6 view .LVU580
ARM GAS  /tmp/ccTlkAzC.s 			page 89


 1858 0008 0830     		adds	r0, r0, #8
 1859              	.LVL182:
1249:src/display.c **** 	decNumber x, y, a, t, u;
 1860              		.loc 1 1249 56 view .LVU581
 1861 000a 0D46     		mov	r5, r1
1251:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1862              		.loc 1 1251 6 view .LVU582
 1863 000c 0393     		str	r3, [sp, #12]
1252:src/display.c **** 	unsigned int hr, min, sec, fs;
 1864              		.loc 1 1252 2 is_stmt 1 view .LVU583
 1865              	.LVL183:
1253:src/display.c **** 
 1866              		.loc 1 1253 2 view .LVU584
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1867              		.loc 1 1255 2 view .LVU585
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1868              		.loc 1 1255 6 is_stmt 0 view .LVU586
 1869 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1870              	.LVL184:
1255:src/display.c **** 		if (decNumberIsInfinite(rgx))
 1871              		.loc 1 1255 5 view .LVU587
 1872 0012 48B1     		cbz	r0, .L194
1256:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1873              		.loc 1 1256 3 is_stmt 1 view .LVU588
1256:src/display.c **** 			res = set_dig_s(exp_last, 'o', res);
 1874              		.loc 1 1256 6 is_stmt 0 view .LVU589
 1875 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1876 0016 5B06     		lsls	r3, r3, #25
 1877 0018 04D5     		bpl	.L193
1257:src/display.c **** 		return;
 1878              		.loc 1 1257 4 is_stmt 1 view .LVU590
 1879              	.LVL185:
 1880              	.LBB185:
 1881              	.LBI185:
 394:src/display.c **** 	if (res) *res++ = ch;
 1882              		.loc 1 394 14 view .LVU591
 1883              	.LBB186:
 395:src/display.c **** 	else	set_dig(base, ch);
 1884              		.loc 1 395 2 view .LVU592
 395:src/display.c **** 	else	set_dig(base, ch);
 1885              		.loc 1 395 5 is_stmt 0 view .LVU593
 1886 001a 002D     		cmp	r5, #0
 1887 001c 00F0B580 		beq	.L197
 395:src/display.c **** 	else	set_dig(base, ch);
 1888              		.loc 1 395 11 is_stmt 1 view .LVU594
 1889              	.LVL186:
 395:src/display.c **** 	else	set_dig(base, ch);
 1890              		.loc 1 395 18 is_stmt 0 view .LVU595
 1891 0020 6F23     		movs	r3, #111
 1892 0022 2B70     		strb	r3, [r5]
 1893              	.LVL187:
 1894              	.L193:
 395:src/display.c **** 	else	set_dig(base, ch);
 1895              		.loc 1 395 18 view .LVU596
 1896              	.LBE186:
 1897              	.LBE185:
1312:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 90


 1898              		.loc 1 1312 1 view .LVU597
 1899 0024 35B0     		add	sp, sp, #212
 1900              		.cfi_remember_state
 1901              		.cfi_def_cfa_offset 12
 1902              		@ sp needed
 1903 0026 30BD     		pop	{r4, r5, pc}
 1904              	.LVL188:
 1905              	.L194:
 1906              		.cfi_restore_state
1261:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1907              		.loc 1 1261 2 is_stmt 1 view .LVU598
 1908 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1909              	.LVL189:
1262:src/display.c **** 	dn_abs(&a, rgx);
 1910              		.loc 1 1262 2 view .LVU599
 1911 002c 624A     		ldr	r2, .L224
 1912 002e 2146     		mov	r1, r4
 1913 0030 07A8     		add	r0, sp, #28
 1914 0032 FFF7FEFF 		bl	decNumberMod
 1915              	.LVL190:
1263:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1916              		.loc 1 1263 2 view .LVU600
 1917 0036 2146     		mov	r1, r4
 1918 0038 19A8     		add	r0, sp, #100
 1919 003a FFF7FEFF 		bl	dn_abs
 1920              	.LVL191:
1264:src/display.c **** 		if (res != NULL)
 1921              		.loc 1 1264 2 view .LVU601
1264:src/display.c **** 		if (res != NULL)
 1922              		.loc 1 1264 5 is_stmt 0 view .LVU602
 1923 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1924 0042 002B     		cmp	r3, #0
 1925 0044 72DB     		blt	.L222
 1926              	.L198:
1272:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1927              		.loc 1 1272 2 is_stmt 1 view .LVU603
 1928 0046 07A9     		add	r1, sp, #28
 1929 0048 10A8     		add	r0, sp, #64
 1930 004a FFF7FEFF 		bl	decNumberHR2HMS
 1931              	.LVL192:
1273:src/display.c **** 	decNumberRound(&u, &t);
 1932              		.loc 1 1273 2 view .LVU604
 1933 004e 0622     		movs	r2, #6
 1934 0050 10A9     		add	r1, sp, #64
 1935 0052 22A8     		add	r0, sp, #136
 1936 0054 FFF7FEFF 		bl	dn_mulpow10
 1937              	.LVL193:
1274:src/display.c **** 
 1938              		.loc 1 1274 2 view .LVU605
 1939 0058 22A9     		add	r1, sp, #136
 1940 005a 2BA8     		add	r0, sp, #172
 1941 005c FFF7FEFF 		bl	decNumberRound
 1942              	.LVL194:
1276:src/display.c **** 	hms_step(&u, &t, &sec);
 1943              		.loc 1 1276 2 view .LVU606
 1944 0060 2BA9     		add	r1, sp, #172
 1945 0062 22A8     		add	r0, sp, #136
ARM GAS  /tmp/ccTlkAzC.s 			page 91


 1946 0064 06AA     		add	r2, sp, #24
 1947 0066 FFF7FEFF 		bl	hms_step
 1948              	.LVL195:
1277:src/display.c **** 	hms_step(&t, &u, &min);
 1949              		.loc 1 1277 2 view .LVU607
 1950 006a 22A9     		add	r1, sp, #136
 1951 006c 2BA8     		add	r0, sp, #172
 1952 006e 05AA     		add	r2, sp, #20
 1953 0070 FFF7FEFF 		bl	hms_step
 1954              	.LVL196:
1278:src/display.c **** 	hr = dn_to_int(&t);
 1955              		.loc 1 1278 2 view .LVU608
 1956 0074 04AA     		add	r2, sp, #16
 1957 0076 2BA9     		add	r1, sp, #172
 1958 0078 22A8     		add	r0, sp, #136
 1959 007a FFF7FEFF 		bl	hms_step
 1960              	.LVL197:
1279:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1961              		.loc 1 1279 2 view .LVU609
1279:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1962              		.loc 1 1279 7 is_stmt 0 view .LVU610
 1963 007e 22A8     		add	r0, sp, #136
 1964 0080 FFF7FEFF 		bl	dn_to_int
 1965              	.LVL198:
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1966              		.loc 1 1280 33 view .LVU611
 1967 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1968              		.loc 1 1280 5 view .LVU612
 1969 0088 3B2A     		cmp	r2, #59
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1970              		.loc 1 1280 19 is_stmt 1 view .LVU613
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1971              		.loc 1 1280 23 is_stmt 0 view .LVU614
 1972 008a 82BF     		ittt	hi
 1973 008c 3C3A     		subhi	r2, r2, #60
1280:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1974              		.loc 1 1280 33 view .LVU615
 1975 008e 0133     		addhi	r3, r3, #1
 1976 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1281:src/display.c **** 
 1977              		.loc 1 1281 2 is_stmt 1 view .LVU616
1281:src/display.c **** 
 1978              		.loc 1 1281 5 is_stmt 0 view .LVU617
 1979 0094 3B2B     		cmp	r3, #59
 1980 0096 02D9     		bls	.L203
1281:src/display.c **** 
 1981              		.loc 1 1281 19 is_stmt 1 discriminator 1 view .LVU618
1281:src/display.c **** 
 1982              		.loc 1 1281 23 is_stmt 0 discriminator 1 view .LVU619
 1983 0098 3C3B     		subs	r3, r3, #60
 1984 009a 0493     		str	r3, [sp, #16]
1281:src/display.c **** 
 1985              		.loc 1 1281 30 is_stmt 1 discriminator 1 view .LVU620
1281:src/display.c **** 
 1986              		.loc 1 1281 32 is_stmt 0 discriminator 1 view .LVU621
 1987 009c 0130     		adds	r0, r0, #1
ARM GAS  /tmp/ccTlkAzC.s 			page 92


 1988              	.LVL199:
 1989              	.L203:
1284:src/display.c **** 	res = set_dig_s(j, '@', res);
 1990              		.loc 1 1284 2 is_stmt 1 view .LVU622
1284:src/display.c **** 	res = set_dig_s(j, '@', res);
 1991              		.loc 1 1284 8 is_stmt 0 view .LVU623
 1992 009e 0123     		movs	r3, #1
 1993 00a0 0093     		str	r3, [sp]
 1994 00a2 2946     		mov	r1, r5
 1995 00a4 03AA     		add	r2, sp, #12
 1996 00a6 0423     		movs	r3, #4
 1997 00a8 FFF7FEFF 		bl	hms_render
 1998              	.LVL200:
1285:src/display.c **** 	j += SEGS_PER_DIGIT;
 1999              		.loc 1 1285 2 is_stmt 1 view .LVU624
 2000              	.LBB188:
 2001              	.LBI188:
 394:src/display.c **** 	if (res) *res++ = ch;
 2002              		.loc 1 394 14 view .LVU625
 2003              	.LBB189:
 395:src/display.c **** 	else	set_dig(base, ch);
 2004              		.loc 1 395 2 view .LVU626
 395:src/display.c **** 	else	set_dig(base, ch);
 2005              		.loc 1 395 5 is_stmt 0 view .LVU627
 2006 00ac 0446     		mov	r4, r0
 2007              	.LVL201:
 395:src/display.c **** 	else	set_dig(base, ch);
 2008              		.loc 1 395 5 view .LVU628
 2009 00ae 0028     		cmp	r0, #0
 2010 00b0 76D0     		beq	.L204
 395:src/display.c **** 	else	set_dig(base, ch);
 2011              		.loc 1 395 11 is_stmt 1 view .LVU629
 395:src/display.c **** 	else	set_dig(base, ch);
 2012              		.loc 1 395 15 is_stmt 0 view .LVU630
 2013 00b2 0146     		mov	r1, r0
 2014              	.LVL202:
 395:src/display.c **** 	else	set_dig(base, ch);
 2015              		.loc 1 395 18 view .LVU631
 2016 00b4 4023     		movs	r3, #64
 2017 00b6 01F8013B 		strb	r3, [r1], #1
 2018              	.LVL203:
 2019              	.L205:
 397:src/display.c **** }
 2020              		.loc 1 397 2 is_stmt 1 view .LVU632
 397:src/display.c **** }
 2021              		.loc 1 397 2 is_stmt 0 view .LVU633
 2022              	.LBE189:
 2023              	.LBE188:
1286:src/display.c **** 
 2024              		.loc 1 1286 2 is_stmt 1 view .LVU634
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2025              		.loc 1 1289 8 is_stmt 0 view .LVU635
 2026 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2027 00be 0122     		movs	r2, #1
1286:src/display.c **** 
 2028              		.loc 1 1286 4 view .LVU636
 2029 00c0 03F10904 		add	r4, r3, #9
ARM GAS  /tmp/ccTlkAzC.s 			page 93


1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2030              		.loc 1 1289 8 view .LVU637
 2031 00c4 0092     		str	r2, [sp]
 2032 00c6 0223     		movs	r3, #2
 2033 00c8 03AA     		add	r2, sp, #12
1286:src/display.c **** 
 2034              		.loc 1 1286 4 view .LVU638
 2035 00ca 0394     		str	r4, [sp, #12]
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2036              		.loc 1 1289 2 is_stmt 1 view .LVU639
1289:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2037              		.loc 1 1289 8 is_stmt 0 view .LVU640
 2038 00cc FFF7FEFF 		bl	hms_render
 2039              	.LVL204:
1290:src/display.c **** 	j += SEGS_PER_DIGIT;
 2040              		.loc 1 1290 2 is_stmt 1 view .LVU641
 2041              	.LBB191:
 2042              	.LBI191:
 394:src/display.c **** 	if (res) *res++ = ch;
 2043              		.loc 1 394 14 view .LVU642
 2044              	.LBB192:
 395:src/display.c **** 	else	set_dig(base, ch);
 2045              		.loc 1 395 2 view .LVU643
 395:src/display.c **** 	else	set_dig(base, ch);
 2046              		.loc 1 395 5 is_stmt 0 view .LVU644
 2047 00d0 0446     		mov	r4, r0
 2048 00d2 0028     		cmp	r0, #0
 2049 00d4 5ED0     		beq	.L206
 395:src/display.c **** 	else	set_dig(base, ch);
 2050              		.loc 1 395 11 is_stmt 1 view .LVU645
 395:src/display.c **** 	else	set_dig(base, ch);
 2051              		.loc 1 395 15 is_stmt 0 view .LVU646
 2052 00d6 0146     		mov	r1, r0
 2053              	.LVL205:
 395:src/display.c **** 	else	set_dig(base, ch);
 2054              		.loc 1 395 18 view .LVU647
 2055 00d8 2723     		movs	r3, #39
 2056 00da 01F8013B 		strb	r3, [r1], #1
 2057              	.LVL206:
 2058              	.L207:
 397:src/display.c **** }
 2059              		.loc 1 397 2 is_stmt 1 view .LVU648
 397:src/display.c **** }
 2060              		.loc 1 397 2 is_stmt 0 view .LVU649
 2061              	.LBE192:
 2062              	.LBE191:
1291:src/display.c **** 
 2063              		.loc 1 1291 2 is_stmt 1 view .LVU650
1291:src/display.c **** 
 2064              		.loc 1 1291 4 is_stmt 0 view .LVU651
 2065 00de 039B     		ldr	r3, [sp, #12]
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2066              		.loc 1 1294 8 view .LVU652
 2067 00e0 0598     		ldr	r0, [sp, #20]
 2068 00e2 0122     		movs	r2, #1
1291:src/display.c **** 
 2069              		.loc 1 1291 4 view .LVU653
ARM GAS  /tmp/ccTlkAzC.s 			page 94


 2070 00e4 03F10904 		add	r4, r3, #9
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2071              		.loc 1 1294 8 view .LVU654
 2072 00e8 0092     		str	r2, [sp]
 2073 00ea 0223     		movs	r3, #2
 2074 00ec 03AA     		add	r2, sp, #12
1291:src/display.c **** 
 2075              		.loc 1 1291 4 view .LVU655
 2076 00ee 0394     		str	r4, [sp, #12]
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2077              		.loc 1 1294 2 is_stmt 1 view .LVU656
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2078              		.loc 1 1294 8 is_stmt 0 view .LVU657
 2079 00f0 FFF7FEFF 		bl	hms_render
 2080              	.LVL207:
1295:src/display.c **** 
 2081              		.loc 1 1295 8 view .LVU658
 2082 00f4 3149     		ldr	r1, .L224+4
1294:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2083              		.loc 1 1294 8 view .LVU659
 2084 00f6 0246     		mov	r2, r0
 2085              	.LVL208:
1295:src/display.c **** 
 2086              		.loc 1 1295 2 is_stmt 1 view .LVU660
1295:src/display.c **** 
 2087              		.loc 1 1295 8 is_stmt 0 view .LVU661
 2088 00f8 0398     		ldr	r0, [sp, #12]
 2089              	.LVL209:
1295:src/display.c **** 
 2090              		.loc 1 1295 8 view .LVU662
 2091 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2092 00fc 0938     		subs	r0, r0, #9
 2093 00fe FFF7FEFF 		bl	set_decimal
 2094              	.LVL210:
1298:src/display.c **** 
 2095              		.loc 1 1298 8 view .LVU663
 2096 0102 0023     		movs	r3, #0
1295:src/display.c **** 
 2097              		.loc 1 1295 8 view .LVU664
 2098 0104 0146     		mov	r1, r0
 2099              	.LVL211:
1298:src/display.c **** 
 2100              		.loc 1 1298 2 is_stmt 1 view .LVU665
1298:src/display.c **** 
 2101              		.loc 1 1298 8 is_stmt 0 view .LVU666
 2102 0106 0093     		str	r3, [sp]
 2103 0108 0698     		ldr	r0, [sp, #24]
 2104              	.LVL212:
1298:src/display.c **** 
 2105              		.loc 1 1298 8 view .LVU667
 2106 010a 03AA     		add	r2, sp, #12
 2107 010c 0223     		movs	r3, #2
 2108 010e FFF7FEFF 		bl	hms_render
 2109              	.LVL213:
1301:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2110              		.loc 1 1301 2 is_stmt 1 view .LVU668
 2111              	.LBB194:
ARM GAS  /tmp/ccTlkAzC.s 			page 95


 2112              	.LBI194:
 394:src/display.c **** 	if (res) *res++ = ch;
 2113              		.loc 1 394 14 view .LVU669
 2114              	.LBB195:
 395:src/display.c **** 	else	set_dig(base, ch);
 2115              		.loc 1 395 2 view .LVU670
 395:src/display.c **** 	else	set_dig(base, ch);
 2116              		.loc 1 395 5 is_stmt 0 view .LVU671
 2117 0112 0446     		mov	r4, r0
 2118 0114 78B3     		cbz	r0, .L208
 395:src/display.c **** 	else	set_dig(base, ch);
 2119              		.loc 1 395 11 is_stmt 1 view .LVU672
 2120              	.LVL214:
 395:src/display.c **** 	else	set_dig(base, ch);
 2121              		.loc 1 395 18 is_stmt 0 view .LVU673
 2122 0116 2223     		movs	r3, #34
 2123 0118 0370     		strb	r3, [r0]
 2124              	.LVL215:
 397:src/display.c **** }
 2125              		.loc 1 397 2 is_stmt 1 view .LVU674
 397:src/display.c **** }
 2126              		.loc 1 397 2 is_stmt 0 view .LVU675
 2127              	.LBE195:
 2128              	.LBE194:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2129              		.loc 1 1305 2 is_stmt 1 view .LVU676
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2130              		.loc 1 1305 6 is_stmt 0 view .LVU677
 2131 011a 2749     		ldr	r1, .L224
 2132 011c 19A8     		add	r0, sp, #100
 2133              	.LVL216:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2134              		.loc 1 1305 6 view .LVU678
 2135 011e FFF7FEFF 		bl	dn_lt
 2136              	.LVL217:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2137              		.loc 1 1305 5 view .LVU679
 2138 0122 78B9     		cbnz	r0, .L223
1306:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2139              		.loc 1 1306 3 is_stmt 1 view .LVU680
 2140              	.LVL218:
 2141              	.LBB198:
 2142              	.LBI198:
 394:src/display.c **** 	if (res) *res++ = ch;
 2143              		.loc 1 394 14 view .LVU681
 2144              	.LBB199:
 395:src/display.c **** 	else	set_dig(base, ch);
 2145              		.loc 1 395 2 view .LVU682
 395:src/display.c **** 	else	set_dig(base, ch);
 2146              		.loc 1 395 11 view .LVU683
 395:src/display.c **** 	else	set_dig(base, ch);
 2147              		.loc 1 395 18 is_stmt 0 view .LVU684
 2148 0124 6F23     		movs	r3, #111
 2149 0126 6370     		strb	r3, [r4, #1]
 2150              	.LBE199:
 2151              	.LBE198:
1312:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 96


 2152              		.loc 1 1312 1 view .LVU685
 2153 0128 35B0     		add	sp, sp, #212
 2154              		.cfi_remember_state
 2155              		.cfi_def_cfa_offset 12
 2156              		@ sp needed
 2157 012a 30BD     		pop	{r4, r5, pc}
 2158              	.LVL219:
 2159              	.L222:
 2160              		.cfi_restore_state
1265:src/display.c **** 			*res++ += '-';
 2161              		.loc 1 1265 3 is_stmt 1 view .LVU686
1265:src/display.c **** 			*res++ += '-';
 2162              		.loc 1 1265 6 is_stmt 0 view .LVU687
 2163 012c E5B1     		cbz	r5, .L199
1266:src/display.c **** 		else
 2164              		.loc 1 1266 4 is_stmt 1 view .LVU688
1266:src/display.c **** 		else
 2165              		.loc 1 1266 8 is_stmt 0 view .LVU689
 2166 012e 2B46     		mov	r3, r5
 2167              	.LVL220:
1266:src/display.c **** 		else
 2168              		.loc 1 1266 11 view .LVU690
 2169 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2170              	.LVL221:
1266:src/display.c **** 		else
 2171              		.loc 1 1266 11 view .LVU691
 2172 0134 2D32     		adds	r2, r2, #45
 2173 0136 2A70     		strb	r2, [r5]
1266:src/display.c **** 		else
 2174              		.loc 1 1266 8 view .LVU692
 2175 0138 1D46     		mov	r5, r3
 2176              	.LVL222:
 2177              	.L200:
1269:src/display.c **** 	}
 2178              		.loc 1 1269 3 is_stmt 1 view .LVU693
 2179 013a 07A9     		add	r1, sp, #28
 2180 013c 0846     		mov	r0, r1
 2181 013e FFF7FEFF 		bl	dn_minus
 2182              	.LVL223:
 2183 0142 80E7     		b	.L198
 2184              	.LVL224:
 2185              	.L223:
 2186              	.LBB200:
 2187              	.LBB196:
 395:src/display.c **** 	else	set_dig(base, ch);
 2188              		.loc 1 395 15 is_stmt 0 view .LVU694
 2189 0144 0134     		adds	r4, r4, #1
 2190              	.LVL225:
 2191              	.L211:
 395:src/display.c **** 	else	set_dig(base, ch);
 2192              		.loc 1 395 15 view .LVU695
 2193              	.LBE196:
 2194              	.LBE200:
1307:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2195              		.loc 1 1307 9 is_stmt 1 view .LVU696
1307:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2196              		.loc 1 1307 15 is_stmt 0 view .LVU697
ARM GAS  /tmp/ccTlkAzC.s 			page 97


 2197 0146 19A8     		add	r0, sp, #100
 2198 0148 FFF7FEFF 		bl	dn_eq0
 2199              	.LVL226:
1307:src/display.c **** 		if (dn_le(&a, &const_hms_threshold)) {
 2200              		.loc 1 1307 12 view .LVU698
 2201 014c 0028     		cmp	r0, #0
 2202 014e 7FF469AF 		bne	.L193
1308:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2203              		.loc 1 1308 3 is_stmt 1 view .LVU699
1308:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2204              		.loc 1 1308 7 is_stmt 0 view .LVU700
 2205 0152 1B48     		ldr	r0, .L224+8
 2206 0154 19A9     		add	r1, sp, #100
 2207 0156 FFF7FEFF 		bl	dn_lt
 2208              	.LVL227:
1308:src/display.c **** 			res = set_dig_s(exp_last, 'u', res);
 2209              		.loc 1 1308 6 view .LVU701
 2210 015a 0028     		cmp	r0, #0
 2211 015c 7FF462AF 		bne	.L193
1309:src/display.c **** 		}
 2212              		.loc 1 1309 4 is_stmt 1 view .LVU702
 2213              	.LVL228:
 2214              	.LBB201:
 2215              	.LBI201:
 394:src/display.c **** 	if (res) *res++ = ch;
 2216              		.loc 1 394 14 view .LVU703
 2217              	.LBB202:
 395:src/display.c **** 	else	set_dig(base, ch);
 2218              		.loc 1 395 2 view .LVU704
 395:src/display.c **** 	else	set_dig(base, ch);
 2219              		.loc 1 395 5 is_stmt 0 view .LVU705
 2220 0160 24B3     		cbz	r4, .L213
 395:src/display.c **** 	else	set_dig(base, ch);
 2221              		.loc 1 395 11 is_stmt 1 view .LVU706
 2222              	.LVL229:
 395:src/display.c **** 	else	set_dig(base, ch);
 2223              		.loc 1 395 18 is_stmt 0 view .LVU707
 2224 0162 7523     		movs	r3, #117
 2225 0164 2370     		strb	r3, [r4]
 2226 0166 5DE7     		b	.L193
 2227              	.LVL230:
 2228              	.L199:
 395:src/display.c **** 	else	set_dig(base, ch);
 2229              		.loc 1 395 18 view .LVU708
 2230              	.LBE202:
 2231              	.LBE201:
1268:src/display.c **** 		dn_minus(&x, &x);
 2232              		.loc 1 1268 4 is_stmt 1 view .LVU709
 2233              	.LBB204:
 2234              	.LBI204:
 283:src/display.c **** {
 2235              		.loc 1 283 13 view .LVU710
 2236              	.LBB205:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2237              		.loc 1 285 2 view .LVU711
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2238              		.loc 1 285 24 is_stmt 0 view .LVU712
ARM GAS  /tmp/ccTlkAzC.s 			page 98


 2239 0168 164B     		ldr	r3, .L224+12
 2240 016a 2D22     		movs	r2, #45
 286:src/display.c **** }
 2241              		.loc 1 286 2 view .LVU713
 2242 016c 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2243              		.loc 1 285 24 view .LVU714
 2244 016e 1A70     		strb	r2, [r3]
 286:src/display.c **** }
 2245              		.loc 1 286 2 is_stmt 1 view .LVU715
 2246 0170 FFF7FEFF 		bl	set_dot
 2247              	.LVL231:
 287:src/display.c **** 
 2248              		.loc 1 287 1 is_stmt 0 view .LVU716
 2249 0174 E1E7     		b	.L200
 2250              	.LVL232:
 2251              	.L208:
 287:src/display.c **** 
 2252              		.loc 1 287 1 view .LVU717
 2253              	.LBE205:
 2254              	.LBE204:
 2255              	.LBB206:
 2256              	.LBB197:
 396:src/display.c **** 	return res;
 2257              		.loc 1 396 7 is_stmt 1 view .LVU718
 2258 0176 0398     		ldr	r0, [sp, #12]
 2259              	.LVL233:
 396:src/display.c **** 	return res;
 2260              		.loc 1 396 7 is_stmt 0 view .LVU719
 2261 0178 2221     		movs	r1, #34
 2262 017a FFF7FEFF 		bl	set_dig
 2263              	.LVL234:
 397:src/display.c **** }
 2264              		.loc 1 397 2 is_stmt 1 view .LVU720
 397:src/display.c **** }
 2265              		.loc 1 397 2 is_stmt 0 view .LVU721
 2266              	.LBE197:
 2267              	.LBE206:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2268              		.loc 1 1305 2 is_stmt 1 view .LVU722
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2269              		.loc 1 1305 6 is_stmt 0 view .LVU723
 2270 017e 0E49     		ldr	r1, .L224
 2271 0180 19A8     		add	r0, sp, #100
 2272 0182 FFF7FEFF 		bl	dn_lt
 2273              	.LVL235:
1305:src/display.c **** 		res = set_dig_s(exp_last, 'o', res);
 2274              		.loc 1 1305 5 view .LVU724
 2275 0186 0028     		cmp	r0, #0
 2276 0188 DDD1     		bne	.L211
 2277              	.LVL236:
 2278              	.L197:
 2279              	.LBB207:
 2280              	.LBB187:
 396:src/display.c **** 	return res;
 2281              		.loc 1 396 7 is_stmt 1 view .LVU725
 2282 018a 6F21     		movs	r1, #111
ARM GAS  /tmp/ccTlkAzC.s 			page 99


 2283 018c 7A20     		movs	r0, #122
 2284 018e FFF7FEFF 		bl	set_dig
 2285              	.LVL237:
 2286              	.LBE187:
 2287              	.LBE207:
1258:src/display.c **** 	}
 2288              		.loc 1 1258 3 view .LVU726
 2289 0192 47E7     		b	.L193
 2290              	.LVL238:
 2291              	.L206:
 2292              	.LBB208:
 2293              	.LBB193:
 396:src/display.c **** 	return res;
 2294              		.loc 1 396 7 view .LVU727
 2295 0194 2721     		movs	r1, #39
 2296 0196 0398     		ldr	r0, [sp, #12]
 2297              	.LVL239:
 396:src/display.c **** 	return res;
 2298              		.loc 1 396 7 is_stmt 0 view .LVU728
 2299 0198 FFF7FEFF 		bl	set_dig
 2300              	.LVL240:
 396:src/display.c **** 	return res;
 2301              		.loc 1 396 7 view .LVU729
 2302 019c 2146     		mov	r1, r4
 2303 019e 9EE7     		b	.L207
 2304              	.LVL241:
 2305              	.L204:
 396:src/display.c **** 	return res;
 2306              		.loc 1 396 7 view .LVU730
 2307              	.LBE193:
 2308              	.LBE208:
 2309              	.LBB209:
 2310              	.LBB190:
 396:src/display.c **** 	return res;
 2311              		.loc 1 396 7 is_stmt 1 view .LVU731
 2312 01a0 4021     		movs	r1, #64
 2313 01a2 0398     		ldr	r0, [sp, #12]
 2314              	.LVL242:
 396:src/display.c **** 	return res;
 2315              		.loc 1 396 7 is_stmt 0 view .LVU732
 2316 01a4 FFF7FEFF 		bl	set_dig
 2317              	.LVL243:
 396:src/display.c **** 	return res;
 2318              		.loc 1 396 7 view .LVU733
 2319 01a8 2146     		mov	r1, r4
 2320 01aa 86E7     		b	.L205
 2321              	.LVL244:
 2322              	.L213:
 396:src/display.c **** 	return res;
 2323              		.loc 1 396 7 view .LVU734
 2324              	.LBE190:
 2325              	.LBE209:
 2326              	.LBB210:
 2327              	.LBB203:
 396:src/display.c **** 	return res;
 2328              		.loc 1 396 7 is_stmt 1 view .LVU735
 2329 01ac 7521     		movs	r1, #117
ARM GAS  /tmp/ccTlkAzC.s 			page 100


 2330 01ae 7A20     		movs	r0, #122
 2331 01b0 FFF7FEFF 		bl	set_dig
 2332              	.LVL245:
 2333 01b4 36E7     		b	.L193
 2334              	.L225:
 2335 01b6 00BF     		.align	2
 2336              	.L224:
 2337 01b8 00000000 		.word	const_9000
 2338 01bc 00000000 		.word	.LANCHOR1
 2339 01c0 00000000 		.word	const_hms_threshold
 2340 01c4 00000000 		.word	LastDisplayedNumber
 2341              	.LBE203:
 2342              	.LBE210:
 2343              		.cfi_endproc
 2344              	.LFE22:
 2346              		.section	.text.set_x_fract,"ax",%progbits
 2347              		.align	1
 2348              		.p2align 2,,3
 2349              		.syntax unified
 2350              		.thumb
 2351              		.thumb_func
 2352              		.fpu fpv4-sp-d16
 2354              	set_x_fract:
 2355              	.LVL246:
 2356              	.LFB23:
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2357              		.loc 1 1315 57 view -0
 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 216
 2360              		@ frame_needed = 0, uses_anonymous_args = 0
1316:src/display.c **** 	char buf[32], *p = buf;
 2361              		.loc 1 1316 2 view .LVU737
1317:src/display.c **** 	int j;
 2362              		.loc 1 1317 2 view .LVU738
1318:src/display.c **** 
 2363              		.loc 1 1318 2 view .LVU739
1320:src/display.c **** 		return 1;
 2364              		.loc 1 1320 2 view .LVU740
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2365              		.loc 1 1315 57 is_stmt 0 view .LVU741
 2366 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2367              		.cfi_def_cfa_offset 20
 2368              		.cfi_offset 4, -20
 2369              		.cfi_offset 5, -16
 2370              		.cfi_offset 6, -12
 2371              		.cfi_offset 7, -8
 2372              		.cfi_offset 14, -4
 2373 0002 0646     		mov	r6, r0
 2374 0004 B7B0     		sub	sp, sp, #220
 2375              		.cfi_def_cfa_offset 240
1320:src/display.c **** 		return 1;
 2376              		.loc 1 1320 6 view .LVU742
 2377 0006 0830     		adds	r0, r0, #8
 2378              	.LVL247:
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2379              		.loc 1 1315 57 view .LVU743
 2380 0008 0C46     		mov	r4, r1
ARM GAS  /tmp/ccTlkAzC.s 			page 101


1320:src/display.c **** 		return 1;
 2381              		.loc 1 1320 6 view .LVU744
 2382 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2383              	.LVL248:
1320:src/display.c **** 		return 1;
 2384              		.loc 1 1320 5 view .LVU745
 2385 000e 18B1     		cbz	r0, .L257
 2386              	.LVL249:
 2387              	.L246:
1321:src/display.c **** 	dn_abs(&x, rgx);
 2388              		.loc 1 1321 10 view .LVU746
 2389 0010 0125     		movs	r5, #1
 2390              	.L226:
1378:src/display.c **** 
 2391              		.loc 1 1378 1 view .LVU747
 2392 0012 2846     		mov	r0, r5
 2393 0014 37B0     		add	sp, sp, #220
 2394              		.cfi_remember_state
 2395              		.cfi_def_cfa_offset 20
 2396              		@ sp needed
 2397 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2398              	.LVL250:
 2399              	.L257:
 2400              		.cfi_restore_state
 2401              	.LBB219:
 2402              	.LBI219:
1315:src/display.c **** 	decNumber x, w, n, d, t;
 2403              		.loc 1 1315 12 is_stmt 1 view .LVU748
 2404              	.LBB220:
1322:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2405              		.loc 1 1322 2 view .LVU749
 2406 0018 3146     		mov	r1, r6
 2407 001a 0546     		mov	r5, r0
 2408 001c 09A8     		add	r0, sp, #36
 2409 001e FFF7FEFF 		bl	dn_abs
 2410              	.LVL251:
1323:src/display.c **** 		return 0;
 2411              		.loc 1 1323 2 view .LVU750
1323:src/display.c **** 		return 0;
 2412              		.loc 1 1323 6 is_stmt 0 view .LVU751
 2413 0022 5D49     		ldr	r1, .L262
 2414 0024 09A8     		add	r0, sp, #36
 2415 0026 FFF7FEFF 		bl	dn_lt
 2416              	.LVL252:
1323:src/display.c **** 		return 0;
 2417              		.loc 1 1323 5 view .LVU752
 2418 002a 0028     		cmp	r0, #0
 2419 002c F1D0     		beq	.L226
1325:src/display.c **** 		return 0;
 2420              		.loc 1 1325 2 is_stmt 1 view .LVU753
1325:src/display.c **** 		return 0;
 2421              		.loc 1 1325 6 is_stmt 0 view .LVU754
 2422 002e 5B49     		ldr	r1, .L262+4
 2423 0030 09A8     		add	r0, sp, #36
 2424 0032 FFF7FEFF 		bl	dn_lt
 2425              	.LVL253:
1325:src/display.c **** 		return 0;
ARM GAS  /tmp/ccTlkAzC.s 			page 102


 2426              		.loc 1 1325 5 view .LVU755
 2427 0036 0746     		mov	r7, r0
 2428 0038 0028     		cmp	r0, #0
 2429 003a EAD1     		bne	.L226
1327:src/display.c **** 		if (res != NULL)
 2430              		.loc 1 1327 2 is_stmt 1 view .LVU756
1327:src/display.c **** 		if (res != NULL)
 2431              		.loc 1 1327 5 is_stmt 0 view .LVU757
 2432 003c 96F90830 		ldrsb	r3, [r6, #8]
 2433 0040 002B     		cmp	r3, #0
 2434 0042 C0F28580 		blt	.L258
 2435              	.LVL254:
 2436              	.L231:
1333:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2437              		.loc 1 1333 2 is_stmt 1 view .LVU758
 2438 0046 09A9     		add	r1, sp, #36
 2439 0048 12A8     		add	r0, sp, #72
 2440 004a FFF7FEFF 		bl	decNumberFrac
 2441              	.LVL255:
1334:src/display.c **** 
 2442              		.loc 1 1334 2 view .LVU759
 2443 004e 12AA     		add	r2, sp, #72
 2444 0050 24A9     		add	r1, sp, #144
 2445 0052 1BA8     		add	r0, sp, #108
 2446 0054 FFF7FEFF 		bl	decNumber2Fraction
 2447              	.LVL256:
1336:src/display.c **** 	dn_compare(&t, &t, &w);
 2448              		.loc 1 1336 2 view .LVU760
 2449 0058 24AA     		add	r2, sp, #144
 2450 005a 1BA9     		add	r1, sp, #108
 2451 005c 2DA8     		add	r0, sp, #180
 2452 005e FFF7FEFF 		bl	dn_divide
 2453              	.LVL257:
1337:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2454              		.loc 1 1337 2 view .LVU761
 2455 0062 2DA9     		add	r1, sp, #180
 2456 0064 12AA     		add	r2, sp, #72
 2457 0066 0846     		mov	r0, r1
 2458 0068 FFF7FEFF 		bl	dn_compare
 2459              	.LVL258:
1338:src/display.c **** 
 2460              		.loc 1 1338 2 view .LVU762
 2461 006c 09A9     		add	r1, sp, #36
 2462 006e 12A8     		add	r0, sp, #72
 2463 0070 FFF7FEFF 		bl	decNumberTrunc
 2464              	.LVL259:
1340:src/display.c **** 		dn_inc(&w);
 2465              		.loc 1 1340 2 view .LVU763
1340:src/display.c **** 		dn_inc(&w);
 2466              		.loc 1 1340 6 is_stmt 0 view .LVU764
 2467 0074 24A9     		add	r1, sp, #144
 2468 0076 1BA8     		add	r0, sp, #108
 2469 0078 FFF7FEFF 		bl	dn_eq
 2470              	.LVL260:
1340:src/display.c **** 		dn_inc(&w);
 2471              		.loc 1 1340 5 view .LVU765
 2472 007c 0028     		cmp	r0, #0
ARM GAS  /tmp/ccTlkAzC.s 			page 103


 2473 007e 6FD1     		bne	.L259
 2474              	.L233:
1345:src/display.c **** 		if (!dn_eq0(&w)) {
 2475              		.loc 1 1345 2 is_stmt 1 view .LVU766
1345:src/display.c **** 		if (!dn_eq0(&w)) {
 2476              		.loc 1 1345 6 is_stmt 0 view .LVU767
 2477 0080 474B     		ldr	r3, .L262+8
 2478 0082 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1345:src/display.c **** 		if (!dn_eq0(&w)) {
 2479              		.loc 1 1345 5 view .LVU768
 2480 0086 DB06     		lsls	r3, r3, #27
 2481 0088 55D4     		bmi	.L234
1346:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2482              		.loc 1 1346 3 is_stmt 1 view .LVU769
1346:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2483              		.loc 1 1346 8 is_stmt 0 view .LVU770
 2484 008a 12A8     		add	r0, sp, #72
 2485 008c FFF7FEFF 		bl	dn_eq0
 2486              	.LVL261:
1346:src/display.c **** 			p = num_arg(p, dn_to_int(&w));
 2487              		.loc 1 1346 6 view .LVU771
 2488 0090 0028     		cmp	r0, #0
 2489 0092 6CD0     		beq	.L260
1317:src/display.c **** 	int j;
 2490              		.loc 1 1317 17 view .LVU772
 2491 0094 01AE     		add	r6, sp, #4
 2492              	.LVL262:
1317:src/display.c **** 	int j;
 2493              		.loc 1 1317 17 view .LVU773
 2494 0096 3546     		mov	r5, r6
 2495              	.L235:
 2496              	.LVL263:
1354:src/display.c **** 	*p++ = '/';
 2497              		.loc 1 1354 2 is_stmt 1 view .LVU774
1354:src/display.c **** 	*p++ = '/';
 2498              		.loc 1 1354 17 is_stmt 0 view .LVU775
 2499 0098 1BA8     		add	r0, sp, #108
 2500 009a FFF7FEFF 		bl	dn_to_int
 2501              	.LVL264:
 2502 009e 0146     		mov	r1, r0
1354:src/display.c **** 	*p++ = '/';
 2503              		.loc 1 1354 6 view .LVU776
 2504 00a0 2846     		mov	r0, r5
 2505 00a2 FFF7FEFF 		bl	num_arg
 2506              	.LVL265:
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2507              		.loc 1 1355 2 is_stmt 1 view .LVU777
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2508              		.loc 1 1355 4 is_stmt 0 view .LVU778
 2509 00a6 0546     		mov	r5, r0
 2510              	.LVL266:
1355:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2511              		.loc 1 1355 7 view .LVU779
 2512 00a8 2F23     		movs	r3, #47
 2513 00aa 05F8013B 		strb	r3, [r5], #1
 2514              	.LVL267:
1356:src/display.c **** 	*p = '\0';
ARM GAS  /tmp/ccTlkAzC.s 			page 104


 2515              		.loc 1 1356 2 is_stmt 1 view .LVU780
1356:src/display.c **** 	*p = '\0';
 2516              		.loc 1 1356 17 is_stmt 0 view .LVU781
 2517 00ae 24A8     		add	r0, sp, #144
 2518 00b0 FFF7FEFF 		bl	dn_to_int
 2519              	.LVL268:
 2520 00b4 0146     		mov	r1, r0
1356:src/display.c **** 	*p = '\0';
 2521              		.loc 1 1356 6 view .LVU782
 2522 00b6 2846     		mov	r0, r5
 2523 00b8 FFF7FEFF 		bl	num_arg
 2524              	.LVL269:
1357:src/display.c **** 	if ((p - 12) > buf) {
 2525              		.loc 1 1357 2 is_stmt 1 view .LVU783
1357:src/display.c **** 	if ((p - 12) > buf) {
 2526              		.loc 1 1357 5 is_stmt 0 view .LVU784
 2527 00bc 0546     		mov	r5, r0
 2528 00be 0023     		movs	r3, #0
 2529 00c0 05F80C39 		strb	r3, [r5], #-12
1358:src/display.c **** 		p -= 12;
 2530              		.loc 1 1358 2 is_stmt 1 view .LVU785
1358:src/display.c **** 		p -= 12;
 2531              		.loc 1 1358 5 is_stmt 0 view .LVU786
 2532 00c4 B542     		cmp	r5, r6
 2533 00c6 32D8     		bhi	.L236
 2534 00c8 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2535              	.LVL270:
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2536              		.loc 1 1362 12 is_stmt 1 view .LVU787
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2537              		.loc 1 1362 2 is_stmt 0 view .LVU788
 2538 00cc 51B1     		cbz	r1, .L238
1361:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2539              		.loc 1 1361 11 view .LVU789
 2540 00ce 3546     		mov	r5, r6
 2541              	.LVL271:
 2542              	.L241:
1363:src/display.c **** 		j += SEGS_PER_DIGIT;
 2543              		.loc 1 1363 3 is_stmt 1 view .LVU790
 2544              	.LBB221:
 2545              	.LBI221:
 394:src/display.c **** 	if (res) *res++ = ch;
 2546              		.loc 1 394 14 view .LVU791
 2547              	.LBB222:
 395:src/display.c **** 	else	set_dig(base, ch);
 2548              		.loc 1 395 2 view .LVU792
 395:src/display.c **** 	else	set_dig(base, ch);
 2549              		.loc 1 395 11 view .LVU793
 395:src/display.c **** 	else	set_dig(base, ch);
 2550              		.loc 1 395 15 is_stmt 0 view .LVU794
 2551 00d0 2346     		mov	r3, r4
 2552              	.LVL272:
 395:src/display.c **** 	else	set_dig(base, ch);
 2553              		.loc 1 395 5 view .LVU795
 2554 00d2 34B3     		cbz	r4, .L239
 2555              	.LVL273:
 395:src/display.c **** 	else	set_dig(base, ch);
ARM GAS  /tmp/ccTlkAzC.s 			page 105


 2556              		.loc 1 395 18 view .LVU796
 2557 00d4 03F8011B 		strb	r1, [r3], #1
 2558              	.LVL274:
 395:src/display.c **** 	else	set_dig(base, ch);
 2559              		.loc 1 395 15 view .LVU797
 2560 00d8 1C46     		mov	r4, r3
 2561              	.LVL275:
 2562              	.L240:
 397:src/display.c **** }
 2563              		.loc 1 397 2 is_stmt 1 view .LVU798
 397:src/display.c **** }
 2564              		.loc 1 397 2 is_stmt 0 view .LVU799
 2565              	.LBE222:
 2566              	.LBE221:
1364:src/display.c **** 	}
 2567              		.loc 1 1364 3 is_stmt 1 view .LVU800
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2568              		.loc 1 1362 12 is_stmt 0 view .LVU801
 2569 00da 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2570              	.LVL276:
1364:src/display.c **** 	}
 2571              		.loc 1 1364 5 view .LVU802
 2572 00de 0937     		adds	r7, r7, #9
 2573              	.LVL277:
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2574              		.loc 1 1362 24 is_stmt 1 view .LVU803
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2575              		.loc 1 1362 12 view .LVU804
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2576              		.loc 1 1362 2 is_stmt 0 view .LVU805
 2577 00e0 0029     		cmp	r1, #0
 2578 00e2 F5D1     		bne	.L241
 2579              	.LVL278:
 2580              	.L238:
1367:src/display.c **** 		p = (char *)S7_fract_EQ;
 2581              		.loc 1 1367 2 is_stmt 1 view .LVU806
1367:src/display.c **** 		p = (char *)S7_fract_EQ;
 2582              		.loc 1 1367 6 is_stmt 0 view .LVU807
 2583 00e4 2DA8     		add	r0, sp, #180
 2584 00e6 FFF7FEFF 		bl	dn_eq0
 2585              	.LVL279:
1367:src/display.c **** 		p = (char *)S7_fract_EQ;
 2586              		.loc 1 1367 5 view .LVU808
 2587 00ea F0B9     		cbnz	r0, .L249
1369:src/display.c **** 		p = (char *)S7_fract_LT;
 2588              		.loc 1 1369 7 is_stmt 1 view .LVU809
1369:src/display.c **** 		p = (char *)S7_fract_LT;
 2589              		.loc 1 1369 10 is_stmt 0 view .LVU810
 2590 00ec 9DF9BC20 		ldrsb	r2, [sp, #188]
1372:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2591              		.loc 1 1372 5 view .LVU811
 2592 00f0 2C4D     		ldr	r5, .L262+12
 2593 00f2 2D4B     		ldr	r3, .L262+16
 2594 00f4 15EA2205 		ands	r5, r5, r2, asr #32
 2595 00f8 38BF     		it	cc
 2596 00fa 1D46     		movcc	r5, r3
 2597              	.L242:
ARM GAS  /tmp/ccTlkAzC.s 			page 106


 2598              	.LVL280:
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2599              		.loc 1 1373 26 is_stmt 1 view .LVU812
 2600              	.LBB225:
 2601              	.LBB223:
 395:src/display.c **** 	else	set_dig(base, ch);
 2602              		.loc 1 395 15 is_stmt 0 view .LVU813
 2603 00fc 6C26     		movs	r6, #108
 2604 00fe 2021     		movs	r1, #32
 2605 0100 08E0     		b	.L245
 2606              	.LVL281:
 2607              	.L261:
 395:src/display.c **** 	else	set_dig(base, ch);
 2608              		.loc 1 395 15 view .LVU814
 2609              	.LBE223:
 2610              	.LBE225:
 2611              	.LBB226:
 2612              	.LBB227:
 395:src/display.c **** 	else	set_dig(base, ch);
 2613              		.loc 1 395 18 view .LVU815
 2614 0102 03F8011B 		strb	r1, [r3], #1
 2615              	.LVL282:
 395:src/display.c **** 	else	set_dig(base, ch);
 2616              		.loc 1 395 15 view .LVU816
 2617 0106 1C46     		mov	r4, r3
 2618              	.LVL283:
 2619              	.L244:
 397:src/display.c **** }
 2620              		.loc 1 397 2 is_stmt 1 view .LVU817
 397:src/display.c **** }
 2621              		.loc 1 397 2 is_stmt 0 view .LVU818
 2622              	.LBE227:
 2623              	.LBE226:
1375:src/display.c **** 	}
 2624              		.loc 1 1375 3 is_stmt 1 view .LVU819
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2625              		.loc 1 1373 26 is_stmt 0 view .LVU820
 2626 0108 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2627              	.LVL284:
1375:src/display.c **** 	}
 2628              		.loc 1 1375 5 view .LVU821
 2629 010c 0736     		adds	r6, r6, #7
 2630              	.LVL285:
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2631              		.loc 1 1373 38 is_stmt 1 view .LVU822
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2632              		.loc 1 1373 26 view .LVU823
1373:src/display.c **** 		res = set_dig_s(j, *p, res);
 2633              		.loc 1 1373 2 is_stmt 0 view .LVU824
 2634 010e 0029     		cmp	r1, #0
 2635 0110 3FF47EAF 		beq	.L246
 2636              	.LVL286:
 2637              	.L245:
1374:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
 2638              		.loc 1 1374 3 is_stmt 1 view .LVU825
 2639              	.LBB229:
 2640              	.LBI226:
ARM GAS  /tmp/ccTlkAzC.s 			page 107


 394:src/display.c **** 	if (res) *res++ = ch;
 2641              		.loc 1 394 14 view .LVU826
 2642              	.LBB228:
 395:src/display.c **** 	else	set_dig(base, ch);
 2643              		.loc 1 395 2 view .LVU827
 395:src/display.c **** 	else	set_dig(base, ch);
 2644              		.loc 1 395 11 view .LVU828
 395:src/display.c **** 	else	set_dig(base, ch);
 2645              		.loc 1 395 15 is_stmt 0 view .LVU829
 2646 0114 2346     		mov	r3, r4
 2647              	.LVL287:
 395:src/display.c **** 	else	set_dig(base, ch);
 2648              		.loc 1 395 5 view .LVU830
 2649 0116 002C     		cmp	r4, #0
 2650 0118 F3D1     		bne	.L261
 2651              	.LVL288:
 396:src/display.c **** 	return res;
 2652              		.loc 1 396 7 is_stmt 1 view .LVU831
 2653 011a 3046     		mov	r0, r6
 2654 011c FFF7FEFF 		bl	set_dig
 2655              	.LVL289:
 396:src/display.c **** 	return res;
 2656              		.loc 1 396 7 is_stmt 0 view .LVU832
 2657 0120 F2E7     		b	.L244
 2658              	.LVL290:
 2659              	.L239:
 396:src/display.c **** 	return res;
 2660              		.loc 1 396 7 view .LVU833
 2661              	.LBE228:
 2662              	.LBE229:
 2663              	.LBB230:
 2664              	.LBB224:
 396:src/display.c **** 	return res;
 2665              		.loc 1 396 7 is_stmt 1 view .LVU834
 2666 0122 3846     		mov	r0, r7
 2667 0124 FFF7FEFF 		bl	set_dig
 2668              	.LVL291:
 396:src/display.c **** 	return res;
 2669              		.loc 1 396 7 is_stmt 0 view .LVU835
 2670 0128 D7E7     		b	.L240
 2671              	.LVL292:
 2672              	.L249:
 396:src/display.c **** 	return res;
 2673              		.loc 1 396 7 view .LVU836
 2674              	.LBE224:
 2675              	.LBE230:
1368:src/display.c **** 	else if (decNumberIsNegative(&t))
 2676              		.loc 1 1368 5 view .LVU837
 2677 012a 204D     		ldr	r5, .L262+20
 2678 012c E6E7     		b	.L242
 2679              	.LVL293:
 2680              	.L236:
1359:src/display.c **** 		*p = '<';
 2681              		.loc 1 1359 3 is_stmt 1 view .LVU838
1360:src/display.c **** 	} else	p = buf;
 2682              		.loc 1 1360 3 view .LVU839
1360:src/display.c **** 	} else	p = buf;
ARM GAS  /tmp/ccTlkAzC.s 			page 108


 2683              		.loc 1 1360 6 is_stmt 0 view .LVU840
 2684 012e 3C21     		movs	r1, #60
 2685 0130 00F80C1C 		strb	r1, [r0, #-12]
 2686              	.LVL294:
1362:src/display.c **** 		res = set_dig_s(j, *p, res);
 2687              		.loc 1 1362 12 is_stmt 1 view .LVU841
 2688 0134 CCE7     		b	.L241
 2689              	.LVL295:
 2690              	.L234:
1351:src/display.c **** 		dn_add(&n, &n, &x);
 2691              		.loc 1 1351 3 view .LVU842
 2692 0136 12A9     		add	r1, sp, #72
 2693 0138 24AA     		add	r2, sp, #144
 2694 013a 09A8     		add	r0, sp, #36
 2695 013c FFF7FEFF 		bl	dn_multiply
 2696              	.LVL296:
1352:src/display.c **** 	}
 2697              		.loc 1 1352 3 view .LVU843
 2698 0140 1BA9     		add	r1, sp, #108
 2699 0142 09AA     		add	r2, sp, #36
 2700 0144 0846     		mov	r0, r1
1317:src/display.c **** 	int j;
 2701              		.loc 1 1317 17 is_stmt 0 view .LVU844
 2702 0146 01AE     		add	r6, sp, #4
 2703              	.LVL297:
1352:src/display.c **** 	}
 2704              		.loc 1 1352 3 view .LVU845
 2705 0148 FFF7FEFF 		bl	dn_add
 2706              	.LVL298:
1317:src/display.c **** 	int j;
 2707              		.loc 1 1317 17 view .LVU846
 2708 014c 3546     		mov	r5, r6
 2709 014e A3E7     		b	.L235
 2710              	.LVL299:
 2711              	.L258:
1328:src/display.c **** 			*res++ += '-';
 2712              		.loc 1 1328 3 is_stmt 1 view .LVU847
1328:src/display.c **** 			*res++ += '-';
 2713              		.loc 1 1328 6 is_stmt 0 view .LVU848
 2714 0150 D4B1     		cbz	r4, .L232
1329:src/display.c **** 		else
 2715              		.loc 1 1329 4 is_stmt 1 view .LVU849
1329:src/display.c **** 		else
 2716              		.loc 1 1329 8 is_stmt 0 view .LVU850
 2717 0152 2346     		mov	r3, r4
 2718              	.LVL300:
1329:src/display.c **** 		else
 2719              		.loc 1 1329 11 view .LVU851
 2720 0154 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2721              	.LVL301:
1329:src/display.c **** 		else
 2722              		.loc 1 1329 11 view .LVU852
 2723 0158 2D32     		adds	r2, r2, #45
 2724 015a 2270     		strb	r2, [r4]
1329:src/display.c **** 		else
 2725              		.loc 1 1329 8 view .LVU853
 2726 015c 1C46     		mov	r4, r3
ARM GAS  /tmp/ccTlkAzC.s 			page 109


 2727              	.LVL302:
1329:src/display.c **** 		else
 2728              		.loc 1 1329 8 view .LVU854
 2729 015e 72E7     		b	.L231
 2730              	.LVL303:
 2731              	.L259:
1341:src/display.c **** 		decNumberZero(&n);
 2732              		.loc 1 1341 3 is_stmt 1 view .LVU855
 2733 0160 12A8     		add	r0, sp, #72
 2734 0162 FFF7FEFF 		bl	dn_inc
 2735              	.LVL304:
1342:src/display.c **** 	}
 2736              		.loc 1 1342 3 view .LVU856
 2737 0166 1BA8     		add	r0, sp, #108
 2738 0168 FFF7FEFF 		bl	decNumberZero
 2739              	.LVL305:
 2740 016c 88E7     		b	.L233
 2741              	.L260:
1347:src/display.c **** 			*p++ = ' ';
 2742              		.loc 1 1347 4 view .LVU857
1347:src/display.c **** 			*p++ = ' ';
 2743              		.loc 1 1347 19 is_stmt 0 view .LVU858
 2744 016e 12A8     		add	r0, sp, #72
 2745 0170 FFF7FEFF 		bl	dn_to_int
 2746              	.LVL306:
1347:src/display.c **** 			*p++ = ' ';
 2747              		.loc 1 1347 8 view .LVU859
 2748 0174 01AE     		add	r6, sp, #4
 2749              	.LVL307:
1347:src/display.c **** 			*p++ = ' ';
 2750              		.loc 1 1347 19 view .LVU860
 2751 0176 0146     		mov	r1, r0
1347:src/display.c **** 			*p++ = ' ';
 2752              		.loc 1 1347 8 view .LVU861
 2753 0178 3046     		mov	r0, r6
 2754 017a FFF7FEFF 		bl	num_arg
 2755              	.LVL308:
1348:src/display.c **** 		}
 2756              		.loc 1 1348 4 is_stmt 1 view .LVU862
1348:src/display.c **** 		}
 2757              		.loc 1 1348 6 is_stmt 0 view .LVU863
 2758 017e 0546     		mov	r5, r0
 2759              	.LVL309:
1348:src/display.c **** 		}
 2760              		.loc 1 1348 9 view .LVU864
 2761 0180 2023     		movs	r3, #32
 2762 0182 05F8013B 		strb	r3, [r5], #1
 2763              	.LVL310:
1348:src/display.c **** 		}
 2764              		.loc 1 1348 9 view .LVU865
 2765 0186 87E7     		b	.L235
 2766              	.LVL311:
 2767              	.L232:
1331:src/display.c **** 	}
 2768              		.loc 1 1331 4 is_stmt 1 view .LVU866
 2769              	.LBB231:
 2770              	.LBI231:
ARM GAS  /tmp/ccTlkAzC.s 			page 110


 283:src/display.c **** {
 2771              		.loc 1 283 13 view .LVU867
 2772              	.LBB232:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2773              		.loc 1 285 2 view .LVU868
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2774              		.loc 1 285 24 is_stmt 0 view .LVU869
 2775 0188 094B     		ldr	r3, .L262+24
 2776 018a 2D22     		movs	r2, #45
 286:src/display.c **** }
 2777              		.loc 1 286 2 view .LVU870
 2778 018c 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 2779              		.loc 1 285 24 view .LVU871
 2780 018e 1A70     		strb	r2, [r3]
 286:src/display.c **** }
 2781              		.loc 1 286 2 is_stmt 1 view .LVU872
 2782 0190 FFF7FEFF 		bl	set_dot
 2783              	.LVL312:
 287:src/display.c **** 
 2784              		.loc 1 287 1 is_stmt 0 view .LVU873
 2785 0194 57E7     		b	.L231
 2786              	.L263:
 2787 0196 00BF     		.align	2
 2788              	.L262:
 2789 0198 00000000 		.word	const_100000
 2790 019c 00000000 		.word	const_0_0001
 2791 01a0 00000000 		.word	PersistentRam
 2792 01a4 00000000 		.word	.LANCHOR8
 2793 01a8 00000000 		.word	.LANCHOR10
 2794 01ac 00000000 		.word	.LANCHOR9
 2795 01b0 00000000 		.word	LastDisplayedNumber
 2796              	.LBE232:
 2797              	.LBE231:
 2798              	.LBE220:
 2799              	.LBE219:
 2800              		.cfi_endproc
 2801              	.LFE23:
 2803              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2804              		.align	2
 2805              	.LC2:
 2806 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2806      36376F39 
 2806      44313233 
 2806      34356800 
 2807              		.section	.text.carry_overflow,"ax",%progbits
 2808              		.align	1
 2809              		.p2align 2,,3
 2810              		.syntax unified
 2811              		.thumb
 2812              		.thumb_func
 2813              		.fpu fpv4-sp-d16
 2815              	carry_overflow:
 2816              	.LFB15:
 549:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2817              		.loc 1 549 34 is_stmt 1 view -0
 2818              		.cfi_startproc
ARM GAS  /tmp/ccTlkAzC.s 			page 111


 2819              		@ args = 0, pretend = 0, frame = 0
 2820              		@ frame_needed = 0, uses_anonymous_args = 0
 550:src/display.c **** 	int c;
 2821              		.loc 1 550 2 view .LVU875
 2822              	.LVL313:
 551:src/display.c **** 	unsigned int b;
 2823              		.loc 1 551 2 view .LVU876
 552:src/display.c **** 
 2824              		.loc 1 552 2 view .LVU877
 555:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2825              		.loc 1 555 2 view .LVU878
 549:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2826              		.loc 1 549 34 is_stmt 0 view .LVU879
 2827 0000 10B5     		push	{r4, lr}
 2828              		.cfi_def_cfa_offset 8
 2829              		.cfi_offset 4, -8
 2830              		.cfi_offset 14, -4
 555:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2831              		.loc 1 555 16 view .LVU880
 2832 0002 1B4B     		ldr	r3, .L277
 2833 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2834 0006 023B     		subs	r3, r3, #2
 2835 0008 DBB2     		uxtb	r3, r3
 2836 000a 032B     		cmp	r3, #3
 2837 000c 14D8     		bhi	.L265
 2838 000e 194A     		ldr	r2, .L277+4
 2839 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2840              	.LVL314:
 564:src/display.c **** 		SET_EXP_SIGN;
 2841              		.loc 1 564 2 is_stmt 1 view .LVU881
 564:src/display.c **** 		SET_EXP_SIGN;
 2842              		.loc 1 564 13 is_stmt 0 view .LVU882
 2843 0014 A4F10B03 		sub	r3, r4, #11
 564:src/display.c **** 		SET_EXP_SIGN;
 2844              		.loc 1 564 5 view .LVU883
 2845 0018 042B     		cmp	r3, #4
 2846 001a 16D9     		bls	.L274
 2847              	.L267:
 566:src/display.c **** 	set_dig(base, c);
 2848              		.loc 1 566 2 is_stmt 1 view .LVU884
 2849              	.LVL315:
 567:src/display.c **** 
 2850              		.loc 1 567 2 view .LVU885
 566:src/display.c **** 	set_dig(base, c);
 2851              		.loc 1 566 23 is_stmt 0 view .LVU886
 2852 001c 164B     		ldr	r3, .L277+8
 2853 001e 1C44     		add	r4, r4, r3
 2854              	.LVL316:
 567:src/display.c **** 
 2855              		.loc 1 567 2 view .LVU887
 2856 0020 6C20     		movs	r0, #108
 2857 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2858 0026 FFF7FEFF 		bl	set_dig
 2859              	.LVL317:
 570:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2860              		.loc 1 570 2 is_stmt 1 view .LVU888
 570:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
ARM GAS  /tmp/ccTlkAzC.s 			page 112


 2861              		.loc 1 570 6 is_stmt 0 view .LVU889
 2862 002a FFF7FEFF 		bl	get_carry
 2863              	.LVL318:
 570:src/display.c **** 		set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2864              		.loc 1 570 5 view .LVU890
 2865 002e C8B9     		cbnz	r0, .L275
 2866              	.L268:
 572:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2867              		.loc 1 572 2 is_stmt 1 view .LVU891
 572:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2868              		.loc 1 572 6 is_stmt 0 view .LVU892
 2869 0030 FFF7FEFF 		bl	get_overflow
 2870              	.LVL319:
 572:src/display.c **** 		set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2871              		.loc 1 572 5 view .LVU893
 2872 0034 80B9     		cbnz	r0, .L276
 574:src/display.c **** 
 2873              		.loc 1 574 1 view .LVU894
 2874 0036 10BD     		pop	{r4, pc}
 2875              	.LVL320:
 2876              	.L265:
 560:src/display.c **** 	}
 2877              		.loc 1 560 11 is_stmt 1 view .LVU895
 560:src/display.c **** 	}
 2878              		.loc 1 560 21 is_stmt 0 view .LVU896
 2879 0038 104B     		ldr	r3, .L277+12
 2880 003a 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2881 003e 2409     		lsrs	r4, r4, #4
 560:src/display.c **** 	}
 2882              		.loc 1 560 30 view .LVU897
 2883 0040 0134     		adds	r4, r4, #1
 2884              	.LVL321:
 560:src/display.c **** 	}
 2885              		.loc 1 560 34 is_stmt 1 view .LVU898
 564:src/display.c **** 		SET_EXP_SIGN;
 2886              		.loc 1 564 2 view .LVU899
 564:src/display.c **** 		SET_EXP_SIGN;
 2887              		.loc 1 564 13 is_stmt 0 view .LVU900
 2888 0042 A4F10B03 		sub	r3, r4, #11
 564:src/display.c **** 		SET_EXP_SIGN;
 2889              		.loc 1 564 5 view .LVU901
 2890 0046 042B     		cmp	r3, #4
 2891 0048 E8D8     		bhi	.L267
 2892              	.L274:
 565:src/display.c **** 	c = "B34567o9D12345h"[b-2];
 2893              		.loc 1 565 3 is_stmt 1 view .LVU902
 2894              	.LBB239:
 2895              	.LBI239:
 295:src/display.c **** {
 2896              		.loc 1 295 13 view .LVU903
 2897              	.LBB240:
 297:src/display.c **** 	set_dot(EXP_SIGN);
 2898              		.loc 1 297 2 view .LVU904
 297:src/display.c **** 	set_dot(EXP_SIGN);
 2899              		.loc 1 297 26 is_stmt 0 view .LVU905
 2900 004a 0D4B     		ldr	r3, .L277+16
 2901 004c 2D22     		movs	r2, #45
ARM GAS  /tmp/ccTlkAzC.s 			page 113


 298:src/display.c **** }
 2902              		.loc 1 298 2 view .LVU906
 2903 004e 8220     		movs	r0, #130
 297:src/display.c **** 	set_dot(EXP_SIGN);
 2904              		.loc 1 297 26 view .LVU907
 2905 0050 1A70     		strb	r2, [r3]
 298:src/display.c **** }
 2906              		.loc 1 298 2 is_stmt 1 view .LVU908
 2907 0052 FFF7FEFF 		bl	set_dot
 2908              	.LVL322:
 299:src/display.c **** 
 2909              		.loc 1 299 1 is_stmt 0 view .LVU909
 2910 0056 E1E7     		b	.L267
 2911              	.LVL323:
 2912              	.L276:
 299:src/display.c **** 
 2913              		.loc 1 299 1 view .LVU910
 2914              	.LBE240:
 2915              	.LBE239:
 2916              	.LBB241:
 2917              	.LBI241:
 549:src/display.c **** 	const int base = SEGS_EXP_BASE;
 2918              		.loc 1 549 13 is_stmt 1 view .LVU911
 2919              	.LBB242:
 573:src/display.c **** }
 2920              		.loc 1 573 3 view .LVU912
 2921              	.LBE242:
 2922              	.LBE241:
 574:src/display.c **** 
 2923              		.loc 1 574 1 is_stmt 0 view .LVU913
 2924 0058 BDE81040 		pop	{r4, lr}
 2925              		.cfi_remember_state
 2926              		.cfi_restore 14
 2927              		.cfi_restore 4
 2928              		.cfi_def_cfa_offset 0
 2929              	.LVL324:
 2930              	.LBB244:
 2931              	.LBB243:
 573:src/display.c **** }
 2932              		.loc 1 573 3 view .LVU914
 2933 005c 6F21     		movs	r1, #111
 2934 005e 7A20     		movs	r0, #122
 2935 0060 FFF7FEBF 		b	set_dig
 2936              	.LVL325:
 2937              	.L275:
 2938              		.cfi_restore_state
 573:src/display.c **** }
 2939              		.loc 1 573 3 view .LVU915
 2940              	.LBE243:
 2941              	.LBE244:
 571:src/display.c **** 	if (get_overflow())
 2942              		.loc 1 571 3 is_stmt 1 view .LVU916
 2943 0064 6321     		movs	r1, #99
 2944 0066 7320     		movs	r0, #115
 2945 0068 FFF7FEFF 		bl	set_dig
 2946              	.LVL326:
 2947 006c E0E7     		b	.L268
ARM GAS  /tmp/ccTlkAzC.s 			page 114


 2948              	.L278:
 2949 006e 00BF     		.align	2
 2950              	.L277:
 2951 0070 00000000 		.word	StateWhileOn
 2952 0074 00000000 		.word	.LANCHOR11
 2953 0078 00000000 		.word	.LC2
 2954 007c 00000000 		.word	PersistentRam
 2955 0080 00000000 		.word	LastDisplayedExponent
 2956              		.cfi_endproc
 2957              	.LFE15:
 2959              		.global	__aeabi_uldivmod
 2960              		.section	.text.set_int_x,"ax",%progbits
 2961              		.align	1
 2962              		.p2align 2,,3
 2963              		.syntax unified
 2964              		.thumb
 2965              		.thumb_func
 2966              		.fpu fpv4-sp-d16
 2968              	set_int_x:
 2969              	.LVL327:
 2970              	.LFB18:
1041:src/display.c **** 	const int ws = word_size();
 2971              		.loc 1 1041 61 view -0
 2972              		.cfi_startproc
 2973              		@ args = 0, pretend = 0, frame = 88
 2974              		@ frame_needed = 0, uses_anonymous_args = 0
1041:src/display.c **** 	const int ws = word_size();
 2975              		.loc 1 1041 61 is_stmt 0 view .LVU918
 2976 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2977              		.cfi_def_cfa_offset 36
 2978              		.cfi_offset 4, -36
 2979              		.cfi_offset 5, -32
 2980              		.cfi_offset 6, -28
 2981              		.cfi_offset 7, -24
 2982              		.cfi_offset 8, -20
 2983              		.cfi_offset 9, -16
 2984              		.cfi_offset 10, -12
 2985              		.cfi_offset 11, -8
 2986              		.cfi_offset 14, -4
 2987 0004 97B0     		sub	sp, sp, #92
 2988              		.cfi_def_cfa_offset 128
1041:src/display.c **** 	const int ws = word_size();
 2989              		.loc 1 1041 61 view .LVU919
 2990 0006 9246     		mov	r10, r2
 2991 0008 8046     		mov	r8, r0
 2992 000a 8946     		mov	r9, r1
1042:src/display.c **** 	unsigned int b;
 2993              		.loc 1 1042 2 is_stmt 1 view .LVU920
1042:src/display.c **** 	unsigned int b;
 2994              		.loc 1 1042 17 is_stmt 0 view .LVU921
 2995 000c FFF7FEFF 		bl	word_size
 2996              	.LVL328:
1042:src/display.c **** 	unsigned int b;
 2997              		.loc 1 1042 17 view .LVU922
 2998 0010 CC4B     		ldr	r3, .L368
 2999 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3000 0014 023B     		subs	r3, r3, #2
ARM GAS  /tmp/ccTlkAzC.s 			page 115


 3001 0016 DBB2     		uxtb	r3, r3
1048:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3002              		.loc 1 1048 6 view .LVU923
 3003 0018 0022     		movs	r2, #0
 3004 001a 032B     		cmp	r3, #3
1042:src/display.c **** 	unsigned int b;
 3005              		.loc 1 1042 17 view .LVU924
 3006 001c 8346     		mov	fp, r0
 3007              	.LVL329:
1043:src/display.c **** 	long long int vs = value;
 3008              		.loc 1 1043 2 is_stmt 1 view .LVU925
1044:src/display.c **** 	unsigned long long int v;
 3009              		.loc 1 1044 2 view .LVU926
1045:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3010              		.loc 1 1045 2 view .LVU927
1046:src/display.c **** 	int i, j, k;
 3011              		.loc 1 1046 2 view .LVU928
1047:src/display.c **** 	int sign = 0;
 3012              		.loc 1 1047 2 view .LVU929
1048:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3013              		.loc 1 1048 2 view .LVU930
1048:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3014              		.loc 1 1048 6 is_stmt 0 view .LVU931
 3015 001e 0492     		str	r2, [sp, #16]
1049:src/display.c **** 
 3016              		.loc 1 1049 2 is_stmt 1 view .LVU932
 3017              	.LVL330:
1051:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3018              		.loc 1 1051 2 view .LVU933
 3019 0020 00F24381 		bhi	.L280
 3020 0024 C84A     		ldr	r2, .L368+4
 3021 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 3022              	.LVL331:
1059:src/display.c **** 		IntMaxWindow = 0;
 3023              		.loc 1 1059 2 view .LVU934
1059:src/display.c **** 		IntMaxWindow = 0;
 3024              		.loc 1 1059 5 is_stmt 0 view .LVU935
 3025 002a BAF1000F 		cmp	r10, #0
 3026 002e 00F04381 		beq	.L359
 3027              	.LVL332:
 3028              	.L282:
1064:src/display.c **** 		v = extract_value(value, &sign);
 3029              		.loc 1 1064 2 is_stmt 1 view .LVU936
1064:src/display.c **** 		v = extract_value(value, &sign);
 3030              		.loc 1 1064 24 is_stmt 0 view .LVU937
 3031 0032 6B1E     		subs	r3, r5, #1
1064:src/display.c **** 		v = extract_value(value, &sign);
 3032              		.loc 1 1064 30 view .LVU938
 3033 0034 47F67574 		movw	r4, #32629
 3034 0038 1C41     		asrs	r4, r4, r3
1064:src/display.c **** 		v = extract_value(value, &sign);
 3035              		.loc 1 1064 5 view .LVU939
 3036 003a 14F00104 		ands	r4, r4, #1
 3037 003e 40F0EF80 		bne	.L360
1081:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
 3038              		.loc 1 1081 3 is_stmt 1 view .LVU940
1081:src/display.c **** 			const long long int mask = (1LL << ws) - 1;
ARM GAS  /tmp/ccTlkAzC.s 			page 116


 3039              		.loc 1 1081 6 is_stmt 0 view .LVU941
 3040 0042 BBF13F0F 		cmp	fp, #63
 3041 0046 18DC     		bgt	.L293
 3042              	.LBB245:
1082:src/display.c **** 			vs &= mask;
 3043              		.loc 1 1082 4 is_stmt 1 view .LVU942
1082:src/display.c **** 			vs &= mask;
 3044              		.loc 1 1082 36 is_stmt 0 view .LVU943
 3045 0048 0121     		movs	r1, #1
 3046 004a ABF12006 		sub	r6, fp, #32
 3047 004e CBF12000 		rsb	r0, fp, #32
 3048 0052 21FA00F0 		lsr	r0, r1, r0
 3049 0056 01FA06F3 		lsl	r3, r1, r6
 3050 005a 01FA0BF2 		lsl	r2, r1, fp
 3051 005e 0343     		orrs	r3, r3, r0
 3052              	.LVL333:
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3053              		.loc 1 1083 4 is_stmt 1 view .LVU944
1082:src/display.c **** 			vs &= mask;
 3054              		.loc 1 1082 24 is_stmt 0 view .LVU945
 3055 0060 12F1FF30 		adds	r0, r2, #-1
 3056 0064 43F1FF31 		adc	r1, r3, #-1
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3057              		.loc 1 1083 7 view .LVU946
 3058 0068 00EA0800 		and	r0, r0, r8
 3059 006c 01EA0901 		and	r1, r1, r9
 3060              	.LVL334:
1084:src/display.c **** 				vs |= ~mask;
 3061              		.loc 1 1084 7 view .LVU947
 3062 0070 0A2D     		cmp	r5, #10
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3063              		.loc 1 1083 7 view .LVU948
 3064 0072 8046     		mov	r8, r0
 3065              	.LVL335:
1083:src/display.c **** 			if (b == 10 && (vs & (1LL << (ws-1))))
 3066              		.loc 1 1083 7 view .LVU949
 3067 0074 8946     		mov	r9, r1
1084:src/display.c **** 				vs |= ~mask;
 3068              		.loc 1 1084 4 is_stmt 1 view .LVU950
1084:src/display.c **** 				vs |= ~mask;
 3069              		.loc 1 1084 7 is_stmt 0 view .LVU951
 3070 0076 00F02581 		beq	.L361
 3071              	.LVL336:
 3072              	.L293:
1084:src/display.c **** 				vs |= ~mask;
 3073              		.loc 1 1084 7 view .LVU952
 3074              	.LBE245:
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3075              		.loc 1 1088 3 is_stmt 1 view .LVU953
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3076              		.loc 1 1088 7 is_stmt 0 view .LVU954
 3077 007a B44B     		ldr	r3, .L368+8
 3078 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3079              		.loc 1 1088 6 view .LVU955
 3080 0080 9907     		lsls	r1, r3, #30
 3081 0082 3FD5     		bpl	.L322
ARM GAS  /tmp/ccTlkAzC.s 			page 117


1091:src/display.c **** 			v = (unsigned long long int)vs;
 3082              		.loc 1 1091 10 is_stmt 1 view .LVU956
 3083              	.LBB246:
1099:src/display.c **** 			const unsigned int b1 = b >> 1;
 3084              		.loc 1 1099 4 view .LVU957
1100:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3085              		.loc 1 1100 4 view .LVU958
1100:src/display.c **** 			const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3086              		.loc 1 1100 23 is_stmt 0 view .LVU959
 3087 0084 6A08     		lsrs	r2, r5, #1
 3088              	.LVL337:
1101:src/display.c **** 			v = (unsigned long long int)vs;
 3089              		.loc 1 1101 4 is_stmt 1 view .LVU960
1101:src/display.c **** 			v = (unsigned long long int)vs;
 3090              		.loc 1 1101 41 is_stmt 0 view .LVU961
 3091 0086 12F00A0F 		tst	r2, #10
 3092 008a 14BF     		ite	ne
 3093 008c 0123     		movne	r3, #1
 3094 008e 0023     		moveq	r3, #0
1101:src/display.c **** 			v = (unsigned long long int)vs;
 3095              		.loc 1 1101 68 view .LVU962
 3096 0090 12F00C0F 		tst	r2, #12
 3097 0094 18BF     		it	ne
 3098 0096 43F00203 		orrne	r3, r3, #2
 3099              	.LVL338:
 3100              	.L299:
1102:src/display.c **** 
 3101              		.loc 1 1102 4 is_stmt 1 discriminator 4 view .LVU963
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3102              		.loc 1 1104 12 is_stmt 0 discriminator 4 view .LVU964
 3103 009a 0BEB0306 		add	r6, fp, r3
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3104              		.loc 1 1104 25 discriminator 4 view .LVU965
 3105 009e 0133     		adds	r3, r3, #1
 3106              	.LVL339:
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3107              		.loc 1 1104 19 discriminator 4 view .LVU966
 3108 00a0 B6FBF3F6 		udiv	r6, r6, r3
1105:src/display.c **** 				const int r = v % b;
 3109              		.loc 1 1105 4 discriminator 4 view .LVU967
 3110 00a4 002E     		cmp	r6, #0
1102:src/display.c **** 
 3111              		.loc 1 1102 6 discriminator 4 view .LVU968
 3112 00a6 4046     		mov	r0, r8
 3113 00a8 4946     		mov	r1, r9
 3114              	.LVL340:
1104:src/display.c **** 			for (i=0; i<n; i++) {
 3115              		.loc 1 1104 4 is_stmt 1 discriminator 4 view .LVU969
1105:src/display.c **** 				const int r = v % b;
 3116              		.loc 1 1105 4 discriminator 4 view .LVU970
1105:src/display.c **** 				const int r = v % b;
 3117              		.loc 1 1105 14 discriminator 4 view .LVU971
1105:src/display.c **** 				const int r = v % b;
 3118              		.loc 1 1105 4 is_stmt 0 discriminator 4 view .LVU972
 3119 00aa 40F36C81 		ble	.L323
 3120 00ae 05AC     		add	r4, sp, #20
 3121 00b0 DFF8A4B2 		ldr	fp, .L368+20
ARM GAS  /tmp/ccTlkAzC.s 			page 118


 3122              	.LVL341:
1105:src/display.c **** 				const int r = v % b;
 3123              		.loc 1 1105 4 discriminator 4 view .LVU973
 3124 00b4 3719     		adds	r7, r6, r4
 3125              	.LVL342:
 3126              	.L300:
 3127              	.LBB247:
1106:src/display.c **** 				v /= b;
 3128              		.loc 1 1106 5 is_stmt 1 discriminator 3 view .LVU974
 3129 00b6 2A46     		mov	r2, r5
 3130 00b8 0023     		movs	r3, #0
 3131 00ba FFF7FEFF 		bl	__aeabi_uldivmod
 3132              	.LVL343:
1107:src/display.c **** 				buf[i] = DIGITS[r];
 3133              		.loc 1 1107 5 discriminator 3 view .LVU975
1108:src/display.c **** 			}
 3134              		.loc 1 1108 12 is_stmt 0 discriminator 3 view .LVU976
 3135 00be 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3136 00c2 04F8013B 		strb	r3, [r4], #1
 3137              	.LVL344:
1108:src/display.c **** 			}
 3138              		.loc 1 1108 5 is_stmt 1 discriminator 3 view .LVU977
 3139              	.LBE247:
1105:src/display.c **** 				const int r = v % b;
 3140              		.loc 1 1105 19 discriminator 3 view .LVU978
1105:src/display.c **** 				const int r = v % b;
 3141              		.loc 1 1105 14 discriminator 3 view .LVU979
1105:src/display.c **** 				const int r = v % b;
 3142              		.loc 1 1105 4 is_stmt 0 discriminator 3 view .LVU980
 3143 00c6 BC42     		cmp	r4, r7
 3144 00c8 F5D1     		bne	.L300
 3145 00ca 06F1FF39 		add	r9, r6, #-1
1105:src/display.c **** 				const int r = v % b;
 3146              		.loc 1 1105 4 view .LVU981
 3147 00ce 3446     		mov	r4, r6
 3148              	.LVL345:
 3149              	.L292:
1105:src/display.c **** 				const int r = v % b;
 3150              		.loc 1 1105 4 view .LVU982
 3151              	.LBE246:
1114:src/display.c **** 		if (sign) *res++ = '-';
 3152              		.loc 1 1114 2 is_stmt 1 view .LVU983
1114:src/display.c **** 		if (sign) *res++ = '-';
 3153              		.loc 1 1114 5 is_stmt 0 view .LVU984
 3154 00d0 BAF1000F 		cmp	r10, #0
 3155 00d4 41D0     		beq	.L301
 3156              	.LVL346:
 3157              	.L362:
1115:src/display.c **** 		while (--i >= 0)
 3158              		.loc 1 1115 3 is_stmt 1 view .LVU985
1115:src/display.c **** 		while (--i >= 0)
 3159              		.loc 1 1115 6 is_stmt 0 view .LVU986
 3160 00d6 049B     		ldr	r3, [sp, #16]
 3161 00d8 13B1     		cbz	r3, .L302
1115:src/display.c **** 		while (--i >= 0)
 3162              		.loc 1 1115 13 is_stmt 1 discriminator 1 view .LVU987
 3163              	.LVL347:
ARM GAS  /tmp/ccTlkAzC.s 			page 119


1115:src/display.c **** 		while (--i >= 0)
 3164              		.loc 1 1115 20 is_stmt 0 discriminator 1 view .LVU988
 3165 00da 2D23     		movs	r3, #45
 3166 00dc 0AF8013B 		strb	r3, [r10], #1
 3167              	.LVL348:
 3168              	.L302:
1116:src/display.c **** 			*res++ = buf[i];
 3169              		.loc 1 1116 9 is_stmt 1 view .LVU989
1116:src/display.c **** 			*res++ = buf[i];
 3170              		.loc 1 1116 9 is_stmt 0 view .LVU990
 3171 00e0 B9F1FF3F 		cmp	r9, #-1
 3172 00e4 0BD0     		beq	.L279
 3173 00e6 09F10103 		add	r3, r9, #1
 3174 00ea 05A9     		add	r1, sp, #20
 3175 00ec 0AF1FF3A 		add	r10, r10, #-1
 3176 00f0 0B44     		add	r3, r3, r1
 3177              	.LVL349:
 3178              	.L304:
1117:src/display.c **** 	} else {
 3179              		.loc 1 1117 4 is_stmt 1 view .LVU991
1117:src/display.c **** 	} else {
 3180              		.loc 1 1117 11 is_stmt 0 view .LVU992
 3181 00f2 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 3182              	.LVL350:
1117:src/display.c **** 	} else {
 3183              		.loc 1 1117 11 view .LVU993
 3184 00f6 0AF8012F 		strb	r2, [r10, #1]!
 3185              	.LVL351:
1116:src/display.c **** 			*res++ = buf[i];
 3186              		.loc 1 1116 9 is_stmt 1 view .LVU994
1116:src/display.c **** 			*res++ = buf[i];
 3187              		.loc 1 1116 9 is_stmt 0 view .LVU995
 3188 00fa 9942     		cmp	r1, r3
 3189 00fc F9D1     		bne	.L304
 3190              	.LVL352:
 3191              	.L279:
1163:src/display.c **** 
 3192              		.loc 1 1163 1 view .LVU996
 3193 00fe 17B0     		add	sp, sp, #92
 3194              		.cfi_remember_state
 3195              		.cfi_def_cfa_offset 36
 3196              		@ sp needed
 3197 0100 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3198              	.LVL353:
 3199              	.L322:
 3200              		.cfi_restore_state
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3201              		.loc 1 1088 24 discriminator 1 view .LVU997
 3202 0104 58EA0903 		orrs	r3, r8, r9
 3203 0108 00F0C680 		beq	.L287
1091:src/display.c **** 			v = (unsigned long long int)vs;
 3204              		.loc 1 1091 10 is_stmt 1 view .LVU998
1092:src/display.c **** 			for (i=0; v != 0; i++) {
 3205              		.loc 1 1092 4 view .LVU999
 3206 010c 2A46     		mov	r2, r5
1092:src/display.c **** 			for (i=0; v != 0; i++) {
 3207              		.loc 1 1092 6 is_stmt 0 view .LVU1000
ARM GAS  /tmp/ccTlkAzC.s 			page 120


 3208 010e 4746     		mov	r7, r8
 3209 0110 0023     		movs	r3, #0
 3210 0112 0DF11408 		add	r8, sp, #20
 3211 0116 DFF840B2 		ldr	fp, .L368+20
 3212              	.LVL354:
1092:src/display.c **** 			for (i=0; v != 0; i++) {
 3213              		.loc 1 1092 6 view .LVU1001
 3214 011a 0095     		str	r5, [sp]
 3215 011c 4E46     		mov	r6, r9
1093:src/display.c **** 				const int r = v % b;
 3216              		.loc 1 1093 4 is_stmt 1 view .LVU1002
 3217              	.LVL355:
1093:src/display.c **** 				const int r = v % b;
 3218              		.loc 1 1093 14 view .LVU1003
 3219 011e 4546     		mov	r5, r8
 3220              	.LVL356:
1093:src/display.c **** 				const int r = v % b;
 3221              		.loc 1 1093 14 is_stmt 0 view .LVU1004
 3222 0120 9946     		mov	r9, r3
 3223 0122 9046     		mov	r8, r2
 3224              	.LVL357:
 3225              	.L298:
 3226              	.LBB248:
1094:src/display.c **** 				v /= b;
 3227              		.loc 1 1094 5 is_stmt 1 discriminator 3 view .LVU1005
 3228 0124 3846     		mov	r0, r7
 3229 0126 3146     		mov	r1, r6
 3230 0128 4246     		mov	r2, r8
 3231 012a 4B46     		mov	r3, r9
 3232 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3233              	.LVL358:
 3234 0130 3346     		mov	r3, r6
 3235 0132 9446     		mov	ip, r2
 3236              	.LVL359:
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3237              		.loc 1 1095 5 discriminator 3 view .LVU1006
 3238              	.LBE248:
1093:src/display.c **** 				const int r = v % b;
 3239              		.loc 1 1093 4 is_stmt 0 discriminator 3 view .LVU1007
 3240 0134 4B45     		cmp	r3, r9
 3241 0136 3A46     		mov	r2, r7
 3242              	.LVL360:
1093:src/display.c **** 				const int r = v % b;
 3243              		.loc 1 1093 4 discriminator 3 view .LVU1008
 3244 0138 08BF     		it	eq
 3245 013a 4245     		cmpeq	r2, r8
 3246              	.LBB249:
1096:src/display.c **** 			}
 3247              		.loc 1 1096 12 discriminator 3 view .LVU1009
 3248 013c 1BF80C70 		ldrb	r7, [fp, ip]	@ zero_extendqisi2
 3249              	.LVL361:
1096:src/display.c **** 			}
 3250              		.loc 1 1096 12 discriminator 3 view .LVU1010
 3251 0140 05F8017B 		strb	r7, [r5], #1
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3252              		.loc 1 1095 7 discriminator 3 view .LVU1011
 3253 0144 0E46     		mov	r6, r1
ARM GAS  /tmp/ccTlkAzC.s 			page 121


 3254              	.LVL362:
1096:src/display.c **** 			}
 3255              		.loc 1 1096 5 is_stmt 1 discriminator 3 view .LVU1012
 3256              	.LBE249:
1093:src/display.c **** 				const int r = v % b;
 3257              		.loc 1 1093 22 discriminator 3 view .LVU1013
 3258              	.LBB250:
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3259              		.loc 1 1095 7 is_stmt 0 discriminator 3 view .LVU1014
 3260 0146 0746     		mov	r7, r0
 3261 0148 2146     		mov	r1, r4
 3262              	.LVL363:
1095:src/display.c **** 				buf[i] = DIGITS[r];
 3263              		.loc 1 1095 7 discriminator 3 view .LVU1015
 3264              	.LBE250:
1093:src/display.c **** 				const int r = v % b;
 3265              		.loc 1 1093 23 discriminator 3 view .LVU1016
 3266 014a 04F10104 		add	r4, r4, #1
 3267              	.LVL364:
1093:src/display.c **** 				const int r = v % b;
 3268              		.loc 1 1093 14 is_stmt 1 discriminator 3 view .LVU1017
1093:src/display.c **** 				const int r = v % b;
 3269              		.loc 1 1093 4 is_stmt 0 discriminator 3 view .LVU1018
 3270 014e E9D2     		bcs	.L298
 3271 0150 009D     		ldr	r5, [sp]
 3272 0152 8946     		mov	r9, r1
1114:src/display.c **** 		if (sign) *res++ = '-';
 3273              		.loc 1 1114 2 is_stmt 1 view .LVU1019
1114:src/display.c **** 		if (sign) *res++ = '-';
 3274              		.loc 1 1114 5 is_stmt 0 view .LVU1020
 3275 0154 BAF1000F 		cmp	r10, #0
 3276 0158 BDD1     		bne	.L362
 3277              	.LVL365:
 3278              	.L301:
 3279              	.LBB251:
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3280              		.loc 1 1134 3 is_stmt 1 view .LVU1021
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3281              		.loc 1 1134 32 is_stmt 0 view .LVU1022
 3282 015a 022D     		cmp	r5, #2
 3283 015c 00F0D780 		beq	.L363
 3284              	.LVL366:
1135:src/display.c **** 				: b == 16 ? 2 : 3;
 3285              		.loc 1 1135 3 is_stmt 1 view .LVU1023
1135:src/display.c **** 				: b == 16 ? 2 : 3;
 3286              		.loc 1 1135 29 is_stmt 0 view .LVU1024
 3287 0160 042D     		cmp	r5, #4
 3288 0162 00F00781 		beq	.L364
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3289              		.loc 1 1134 32 view .LVU1025
 3290 0166 102D     		cmp	r5, #16
 3291 0168 0CBF     		ite	eq
 3292 016a 0225     		moveq	r5, #2
 3293 016c 0325     		movne	r5, #3
 3294 016e 0C27     		movs	r7, #12
 3295              	.LVL367:
 3296              	.L306:
ARM GAS  /tmp/ccTlkAzC.s 			page 122


1137:src/display.c **** #endif
 3297              		.loc 1 1137 3 is_stmt 1 view .LVU1026
 3298 0170 FFF7FEFF 		bl	set_separator_decimal_modes
 3299              	.LVL368:
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3300              		.loc 1 1139 3 view .LVU1027
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3301              		.loc 1 1139 26 is_stmt 0 view .LVU1028
 3302 0174 99FBF7F3 		sdiv	r3, r9, r7
1140:src/display.c **** 			State2.window = 0;
 3303              		.loc 1 1140 25 view .LVU1029
 3304 0178 724A     		ldr	r2, .L368
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3305              		.loc 1 1139 16 view .LVU1030
 3306 017a 7549     		ldr	r1, .L368+12
1140:src/display.c **** 			State2.window = 0;
 3307              		.loc 1 1140 25 view .LVU1031
 3308 017c 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1139:src/display.c **** 		if ((SMALL_INT) State2.window > IntMaxWindow)
 3309              		.loc 1 1139 16 view .LVU1032
 3310 017e 0B60     		str	r3, [r1]
1140:src/display.c **** 			State2.window = 0;
 3311              		.loc 1 1140 3 is_stmt 1 view .LVU1033
1140:src/display.c **** 			State2.window = 0;
 3312              		.loc 1 1140 7 is_stmt 0 view .LVU1034
 3313 0180 C2F3C208 		ubfx	r8, r2, #3, #3
1140:src/display.c **** 			State2.window = 0;
 3314              		.loc 1 1140 6 view .LVU1035
 3315 0184 4345     		cmp	r3, r8
 3316 0186 C0F2D680 		blt	.L308
 3317 018a 07FB08F8 		mul	r8, r7, r8
 3318              	.L309:
1142:src/display.c **** 
 3319              		.loc 1 1142 3 is_stmt 1 view .LVU1036
1142:src/display.c **** 
 3320              		.loc 1 1142 10 is_stmt 0 view .LVU1037
 3321 018e 16AB     		add	r3, sp, #88
 3322 0190 16AA     		add	r2, sp, #88
 3323 0192 1C44     		add	r4, r4, r3
 3324              	.LVL369:
1142:src/display.c **** 
 3325              		.loc 1 1142 10 view .LVU1038
 3326 0194 02EB0806 		add	r6, r2, r8
 3327 0198 0023     		movs	r3, #0
 3328 019a 453E     		subs	r6, r6, #69
 3329 019c 04F8443C 		strb	r3, [r4, #-68]
1144:src/display.c **** 		for (k = 0; k < 12; k++)
 3330              		.loc 1 1144 3 is_stmt 1 view .LVU1039
 3331              	.LVL370:
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3332              		.loc 1 1145 3 view .LVU1040
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3333              		.loc 1 1145 15 view .LVU1041
1142:src/display.c **** 
 3334              		.loc 1 1142 10 is_stmt 0 view .LVU1042
 3335 01a0 3246     		mov	r2, r6
 3336              	.LVL371:
ARM GAS  /tmp/ccTlkAzC.s 			page 123


 3337              	.L311:
1146:src/display.c **** 				break;
 3338              		.loc 1 1146 4 is_stmt 1 view .LVU1043
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3339              		.loc 1 1145 23 view .LVU1044
1146:src/display.c **** 				break;
 3340              		.loc 1 1146 7 is_stmt 0 view .LVU1045
 3341 01a2 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3342 01a6 0029     		cmp	r1, #0
 3343 01a8 00F0D880 		beq	.L310
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3344              		.loc 1 1145 24 discriminator 2 view .LVU1046
 3345 01ac 0133     		adds	r3, r3, #1
 3346              	.LVL372:
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3347              		.loc 1 1145 15 is_stmt 1 discriminator 2 view .LVU1047
1145:src/display.c **** 			if (buf[j + k] == '\0')
 3348              		.loc 1 1145 3 is_stmt 0 discriminator 2 view .LVU1048
 3349 01ae 0C2B     		cmp	r3, #12
 3350 01b0 F7D1     		bne	.L311
1148:src/display.c **** 			int ch = buf[j++];
 3351              		.loc 1 1148 3 view .LVU1049
 3352 01b2 4FF00B09 		mov	r9, #11
 3353              	.LVL373:
 3354              	.L312:
1148:src/display.c **** 			int ch = buf[j++];
 3355              		.loc 1 1148 3 view .LVU1050
 3356 01b6 08F10108 		add	r8, r8, #1
 3357 01ba C844     		add	r8, r8, r9
 3358 01bc 4C46     		mov	r4, r9
 3359 01be 4FF0630B 		mov	fp, #99
 3360 01c2 09E0     		b	.L317
 3361              	.LVL374:
 3362              	.L365:
 3363              	.LBB252:
1154:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3364              		.loc 1 1154 5 view .LVU1051
 3365 01c4 634B     		ldr	r3, .L368+16
 3366 01c6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3367              	.LVL375:
 3368              	.LBB253:
 3369              	.LBI253:
 354:src/display.c **** 	if (sep == SEP_NONE)
 3370              		.loc 1 354 14 is_stmt 1 view .LVU1052
 3371              	.LBB254:
 355:src/display.c **** 		return res;
 3372              		.loc 1 355 2 view .LVU1053
 355:src/display.c **** 		return res;
 3373              		.loc 1 355 5 is_stmt 0 view .LVU1054
 3374 01c8 09B1     		cbz	r1, .L315
 355:src/display.c **** 		return res;
 3375              		.loc 1 355 5 view .LVU1055
 3376 01ca FFF7FEFF 		bl	set_separator.part.0
 3377              	.LVL376:
 3378              	.L315:
 355:src/display.c **** 		return res;
 3379              		.loc 1 355 5 view .LVU1056
ARM GAS  /tmp/ccTlkAzC.s 			page 124


 3380              	.LBE254:
 3381              	.LBE253:
1155:src/display.c **** 		}
 3382              		.loc 1 1155 4 is_stmt 1 discriminator 2 view .LVU1057
 3383              	.LBE252:
1148:src/display.c **** 			int ch = buf[j++];
 3384              		.loc 1 1148 3 is_stmt 0 discriminator 2 view .LVU1058
 3385 01ce 013C     		subs	r4, r4, #1
1148:src/display.c **** 			int ch = buf[j++];
 3386              		.loc 1 1148 3 discriminator 2 view .LVU1059
 3387 01d0 621C     		adds	r2, r4, #1
 3388              	.LBB257:
1155:src/display.c **** 		}
 3389              		.loc 1 1155 8 discriminator 2 view .LVU1060
 3390 01d2 ABF1090B 		sub	fp, fp, #9
 3391              	.LVL377:
1155:src/display.c **** 		}
 3392              		.loc 1 1155 8 discriminator 2 view .LVU1061
 3393              	.LBE257:
1148:src/display.c **** 			int ch = buf[j++];
 3394              		.loc 1 1148 23 is_stmt 1 discriminator 2 view .LVU1062
1148:src/display.c **** 			int ch = buf[j++];
 3395              		.loc 1 1148 13 discriminator 2 view .LVU1063
1148:src/display.c **** 			int ch = buf[j++];
 3396              		.loc 1 1148 3 is_stmt 0 discriminator 2 view .LVU1064
 3397 01d6 16D0     		beq	.L321
 3398              	.LVL378:
 3399              	.L317:
 3400              	.LBB258:
1149:src/display.c **** 			if (i >= shift)
 3401              		.loc 1 1149 4 is_stmt 1 view .LVU1065
1151:src/display.c **** 			set_dig(dig, ch);
 3402              		.loc 1 1151 5 view .LVU1066
1149:src/display.c **** 			if (i >= shift)
 3403              		.loc 1 1149 8 is_stmt 0 view .LVU1067
 3404 01d8 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1150:src/display.c **** 				ch -= 030;
 3405              		.loc 1 1150 7 view .LVU1068
 3406 01dc A9EB0402 		sub	r2, r9, r4
 3407 01e0 BA42     		cmp	r2, r7
 3408 01e2 A8EB040A 		sub	r10, r8, r4
 3409              	.LVL379:
1150:src/display.c **** 				ch -= 030;
 3410              		.loc 1 1150 4 is_stmt 1 view .LVU1069
1152:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3411              		.loc 1 1152 4 is_stmt 0 view .LVU1070
 3412 01e6 5846     		mov	r0, fp
1151:src/display.c **** 			set_dig(dig, ch);
 3413              		.loc 1 1151 8 view .LVU1071
 3414 01e8 A8BF     		it	ge
 3415 01ea 1839     		subge	r1, r1, #24
 3416              	.LVL380:
1152:src/display.c **** 			if ((j % group) == 0 && k != 0)
 3417              		.loc 1 1152 4 is_stmt 1 view .LVU1072
 3418 01ec FFF7FEFF 		bl	set_dig
 3419              	.LVL381:
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
ARM GAS  /tmp/ccTlkAzC.s 			page 125


 3420              		.loc 1 1153 4 view .LVU1073
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3421              		.loc 1 1153 11 is_stmt 0 view .LVU1074
 3422 01f0 9AFBF5F3 		sdiv	r3, r10, r5
 3423 01f4 05FB13A3 		mls	r3, r5, r3, r10
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3424              		.loc 1 1153 7 view .LVU1075
 3425 01f8 002B     		cmp	r3, #0
 3426 01fa E8D1     		bne	.L315
1154:src/display.c **** 			dig -= SEGS_PER_DIGIT;
 3427              		.loc 1 1154 5 is_stmt 1 discriminator 1 view .LVU1076
 3428              	.LBB256:
 3429              	.LBB255:
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 3430              		.loc 1 357 2 discriminator 1 view .LVU1077
 3431 01fc 5846     		mov	r0, fp
 3432              	.LBE255:
 3433              	.LBE256:
1153:src/display.c **** 				set_separator(dig, SeparatorMode, CNULL);
 3434              		.loc 1 1153 25 is_stmt 0 discriminator 1 view .LVU1078
 3435 01fe 002C     		cmp	r4, #0
 3436 0200 E0D1     		bne	.L365
1155:src/display.c **** 		}
 3437              		.loc 1 1155 4 is_stmt 1 view .LVU1079
1155:src/display.c **** 		}
 3438              		.loc 1 1155 8 is_stmt 0 view .LVU1080
 3439 0202 ABF1090B 		sub	fp, fp, #9
 3440              	.LVL382:
1155:src/display.c **** 		}
 3441              		.loc 1 1155 8 view .LVU1081
 3442              	.LBE258:
1148:src/display.c **** 			int ch = buf[j++];
 3443              		.loc 1 1148 23 is_stmt 1 view .LVU1082
1148:src/display.c **** 			int ch = buf[j++];
 3444              		.loc 1 1148 13 view .LVU1083
 3445              	.L321:
1157:src/display.c **** 			if (dig >= 0)
 3446              		.loc 1 1157 3 view .LVU1084
1157:src/display.c **** 			if (dig >= 0)
 3447              		.loc 1 1157 6 is_stmt 0 view .LVU1085
 3448 0206 049B     		ldr	r3, [sp, #16]
 3449 0208 002B     		cmp	r3, #0
 3450 020a 3FF478AF 		beq	.L279
1158:src/display.c **** 				set_dig(dig, '-');
 3451              		.loc 1 1158 4 is_stmt 1 view .LVU1086
1158:src/display.c **** 				set_dig(dig, '-');
 3452              		.loc 1 1158 7 is_stmt 0 view .LVU1087
 3453 020e BBF1000F 		cmp	fp, #0
 3454 0212 C0F2B180 		blt	.L366
 3455              	.LVL383:
 3456              	.L320:
1159:src/display.c **** 			else	SET_MANT_SIGN;
 3457              		.loc 1 1159 5 is_stmt 1 view .LVU1088
 3458 0216 5846     		mov	r0, fp
 3459 0218 2D21     		movs	r1, #45
 3460 021a FFF7FEFF 		bl	set_dig
 3461              	.LVL384:
ARM GAS  /tmp/ccTlkAzC.s 			page 126


 3462 021e 6EE7     		b	.L279
 3463              	.LVL385:
 3464              	.L360:
1159:src/display.c **** 			else	SET_MANT_SIGN;
 3465              		.loc 1 1159 5 is_stmt 0 view .LVU1089
 3466              	.LBE251:
1065:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3467              		.loc 1 1065 3 is_stmt 1 view .LVU1090
1065:src/display.c **** 		if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3468              		.loc 1 1065 7 is_stmt 0 view .LVU1091
 3469 0220 04AA     		add	r2, sp, #16
 3470 0222 4046     		mov	r0, r8
 3471 0224 4946     		mov	r1, r9
 3472 0226 FFF7FEFF 		bl	extract_value
 3473              	.LVL386:
 3474 022a 0646     		mov	r6, r0
 3475 022c 0F46     		mov	r7, r1
 3476              	.LVL387:
1066:src/display.c **** 			v = value;
 3477              		.loc 1 1066 3 is_stmt 1 view .LVU1092
1066:src/display.c **** 			v = value;
 3478              		.loc 1 1066 7 is_stmt 0 view .LVU1093
 3479 022e FFF7FEFF 		bl	int_mode
 3480              	.LVL388:
1066:src/display.c **** 			v = value;
 3481              		.loc 1 1066 6 view .LVU1094
 3482 0232 58BB     		cbnz	r0, .L284
1066:src/display.c **** 			v = value;
 3483              		.loc 1 1066 32 discriminator 1 view .LVU1095
 3484 0234 049B     		ldr	r3, [sp, #16]
 3485 0236 012B     		cmp	r3, #1
 3486 0238 28D1     		bne	.L284
1066:src/display.c **** 			v = value;
 3487              		.loc 1 1066 45 discriminator 2 view .LVU1096
 3488 023a 56EA0703 		orrs	r3, r6, r7
 3489 023e 69D0     		beq	.L367
 3490              	.LVL389:
 3491              	.L285:
1066:src/display.c **** 			v = value;
 3492              		.loc 1 1066 45 discriminator 2 view .LVU1097
 3493 0240 DFF814B1 		ldr	fp, .L368+20
 3494              	.LVL390:
1041:src/display.c **** 	const int ws = word_size();
 3495              		.loc 1 1041 61 discriminator 3 view .LVU1098
 3496 0244 CDF80CA0 		str	r10, [sp, #12]
 3497 0248 0023     		movs	r3, #0
 3498 024a D946     		mov	r9, fp
 3499 024c 0DF11408 		add	r8, sp, #20
 3500 0250 0024     		movs	r4, #0
 3501 0252 AA46     		mov	r10, r5
 3502              	.LVL391:
1041:src/display.c **** 	const int ws = word_size();
 3503              		.loc 1 1041 61 discriminator 3 view .LVU1099
 3504 0254 9B46     		mov	fp, r3
 3505              	.L291:
 3506              	.LVL392:
 3507              	.LBB261:
ARM GAS  /tmp/ccTlkAzC.s 			page 127


1075:src/display.c **** 				v /= b;
 3508              		.loc 1 1075 5 is_stmt 1 discriminator 3 view .LVU1100
 3509 0256 3046     		mov	r0, r6
 3510 0258 3946     		mov	r1, r7
 3511 025a 5246     		mov	r2, r10
 3512 025c 5B46     		mov	r3, fp
 3513 025e FFF7FEFF 		bl	__aeabi_uldivmod
 3514              	.LVL393:
1076:src/display.c **** 				buf[i] = DIGITS[r];
 3515              		.loc 1 1076 5 discriminator 3 view .LVU1101
 3516 0262 CDE90067 		strd	r6, [sp]
1077:src/display.c **** 			}
 3517              		.loc 1 1077 12 is_stmt 0 discriminator 3 view .LVU1102
 3518 0266 19F80230 		ldrb	r3, [r9, r2]	@ zero_extendqisi2
 3519 026a 08F8013B 		strb	r3, [r8], #1
1076:src/display.c **** 				buf[i] = DIGITS[r];
 3520              		.loc 1 1076 7 discriminator 3 view .LVU1103
 3521 026e 0F46     		mov	r7, r1
 3522              	.LVL394:
1077:src/display.c **** 			}
 3523              		.loc 1 1077 5 is_stmt 1 discriminator 3 view .LVU1104
 3524              	.LBE261:
1074:src/display.c **** 				const int r = v % b;
 3525              		.loc 1 1074 22 discriminator 3 view .LVU1105
1074:src/display.c **** 				const int r = v % b;
 3526              		.loc 1 1074 4 is_stmt 0 discriminator 3 view .LVU1106
 3527 0270 DDE90012 		ldrd	r1, [sp]
 3528              	.LVL395:
1074:src/display.c **** 				const int r = v % b;
 3529              		.loc 1 1074 4 discriminator 3 view .LVU1107
 3530 0274 5A45     		cmp	r2, fp
 3531 0276 08BF     		it	eq
 3532 0278 5145     		cmpeq	r1, r10
 3533 027a 2346     		mov	r3, r4
 3534              	.LVL396:
 3535              	.LBB262:
1076:src/display.c **** 				buf[i] = DIGITS[r];
 3536              		.loc 1 1076 7 discriminator 3 view .LVU1108
 3537 027c 0646     		mov	r6, r0
 3538              	.LBE262:
1074:src/display.c **** 				const int r = v % b;
 3539              		.loc 1 1074 23 discriminator 3 view .LVU1109
 3540 027e 04F10104 		add	r4, r4, #1
 3541              	.LVL397:
1074:src/display.c **** 				const int r = v % b;
 3542              		.loc 1 1074 14 is_stmt 1 discriminator 3 view .LVU1110
1074:src/display.c **** 				const int r = v % b;
 3543              		.loc 1 1074 4 is_stmt 0 discriminator 3 view .LVU1111
 3544 0282 E8D2     		bcs	.L291
 3545 0284 DDF80CA0 		ldr	r10, [sp, #12]
 3546 0288 9946     		mov	r9, r3
 3547 028a 21E7     		b	.L292
 3548              	.LVL398:
 3549              	.L284:
1068:src/display.c **** 			if (sign)
 3550              		.loc 1 1068 3 is_stmt 1 view .LVU1112
1068:src/display.c **** 			if (sign)
ARM GAS  /tmp/ccTlkAzC.s 			page 128


 3551              		.loc 1 1068 6 is_stmt 0 view .LVU1113
 3552 028c 56EA0703 		orrs	r3, r6, r7
 3553 0290 D6D1     		bne	.L285
1069:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3554              		.loc 1 1069 4 is_stmt 1 view .LVU1114
1069:src/display.c **** 				set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3555              		.loc 1 1069 7 is_stmt 0 view .LVU1115
 3556 0292 049B     		ldr	r3, [sp, #16]
 3557 0294 002B     		cmp	r3, #0
 3558 0296 42D1     		bne	.L286
 3559              	.LVL399:
 3560              	.L287:
1071:src/display.c **** 			return;
 3561              		.loc 1 1071 4 is_stmt 1 view .LVU1116
 3562              	.LBB263:
 3563              	.LBI263:
 394:src/display.c **** 	if (res) *res++ = ch;
 3564              		.loc 1 394 14 view .LVU1117
 3565              	.LBB264:
 395:src/display.c **** 	else	set_dig(base, ch);
 3566              		.loc 1 395 2 view .LVU1118
 395:src/display.c **** 	else	set_dig(base, ch);
 3567              		.loc 1 395 5 is_stmt 0 view .LVU1119
 3568 0298 BAF1000F 		cmp	r10, #0
 3569 029c 46D0     		beq	.L289
 3570              	.LVL400:
 3571              	.L288:
 395:src/display.c **** 	else	set_dig(base, ch);
 3572              		.loc 1 395 11 is_stmt 1 view .LVU1120
 395:src/display.c **** 	else	set_dig(base, ch);
 3573              		.loc 1 395 18 is_stmt 0 view .LVU1121
 3574 029e 3023     		movs	r3, #48
 3575 02a0 8AF80030 		strb	r3, [r10]
 3576              	.LBE264:
 3577              	.LBE263:
1163:src/display.c **** 
 3578              		.loc 1 1163 1 view .LVU1122
 3579 02a4 17B0     		add	sp, sp, #92
 3580              		.cfi_remember_state
 3581              		.cfi_def_cfa_offset 36
 3582              		@ sp needed
 3583 02a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3584              	.LVL401:
 3585              	.L280:
 3586              		.cfi_restore_state
1056:src/display.c **** 	}
 3587              		.loc 1 1056 11 is_stmt 1 view .LVU1123
1056:src/display.c **** 	}
 3588              		.loc 1 1056 15 is_stmt 0 view .LVU1124
 3589 02aa FFF7FEFF 		bl	int_base
 3590              	.LVL402:
1056:src/display.c **** 	}
 3591              		.loc 1 1056 15 view .LVU1125
 3592 02ae 0546     		mov	r5, r0
 3593              	.LVL403:
1056:src/display.c **** 	}
 3594              		.loc 1 1056 27 is_stmt 1 view .LVU1126
ARM GAS  /tmp/ccTlkAzC.s 			page 129


1059:src/display.c **** 		IntMaxWindow = 0;
 3595              		.loc 1 1059 2 view .LVU1127
1059:src/display.c **** 		IntMaxWindow = 0;
 3596              		.loc 1 1059 5 is_stmt 0 view .LVU1128
 3597 02b0 BAF1000F 		cmp	r10, #0
 3598 02b4 7FF4BDAE 		bne	.L282
 3599              	.LVL404:
 3600              	.L359:
1060:src/display.c **** 		carry_overflow();
 3601              		.loc 1 1060 3 is_stmt 1 view .LVU1129
1060:src/display.c **** 		carry_overflow();
 3602              		.loc 1 1060 16 is_stmt 0 view .LVU1130
 3603 02b8 254B     		ldr	r3, .L368+12
 3604 02ba C3F800A0 		str	r10, [r3]
1061:src/display.c **** 	}
 3605              		.loc 1 1061 3 is_stmt 1 view .LVU1131
 3606 02be FFF7FEFF 		bl	carry_overflow
 3607              	.LVL405:
 3608 02c2 B6E6     		b	.L282
 3609              	.LVL406:
 3610              	.L361:
 3611              	.LBB266:
1084:src/display.c **** 				vs |= ~mask;
 3612              		.loc 1 1084 36 is_stmt 0 discriminator 1 view .LVU1132
 3613 02c4 0BF1FF31 		add	r1, fp, #-1
1084:src/display.c **** 				vs |= ~mask;
 3614              		.loc 1 1084 16 discriminator 1 view .LVU1133
 3615 02c8 CBF12106 		rsb	r6, fp, #33
 3616 02cc C840     		lsrs	r0, r0, r1
 3617 02ce 09FA06F6 		lsl	r6, r9, r6
 3618 02d2 2039     		subs	r1, r1, #32
 3619 02d4 40EA0600 		orr	r0, r0, r6
 3620 02d8 5CBF     		itt	pl
 3621 02da 49FA01F1 		asrpl	r1, r9, r1
 3622 02de 0843     		orrpl	r0, r0, r1
 3623 02e0 00F00106 		and	r6, r0, #1
 3624 02e4 0027     		movs	r7, #0
 3625 02e6 56EA0701 		orrs	r1, r6, r7
 3626 02ea 08D0     		beq	.L294
1085:src/display.c **** 		}
 3627              		.loc 1 1085 5 is_stmt 1 view .LVU1134
1085:src/display.c **** 		}
 3628              		.loc 1 1085 8 is_stmt 0 view .LVU1135
 3629 02ec 5042     		rsbs	r0, r2, #0
 3630 02ee 63EB4301 		sbc	r1, r3, r3, lsl #1
 3631 02f2 40EA0802 		orr	r2, r0, r8
 3632              	.LVL407:
1085:src/display.c **** 		}
 3633              		.loc 1 1085 8 view .LVU1136
 3634 02f6 41EA0903 		orr	r3, r1, r9
 3635              	.LVL408:
1085:src/display.c **** 		}
 3636              		.loc 1 1085 8 view .LVU1137
 3637 02fa 9046     		mov	r8, r2
 3638              	.LVL409:
1085:src/display.c **** 		}
 3639              		.loc 1 1085 8 view .LVU1138
ARM GAS  /tmp/ccTlkAzC.s 			page 130


 3640 02fc 9946     		mov	r9, r3
 3641              	.L294:
1085:src/display.c **** 		}
 3642              		.loc 1 1085 8 view .LVU1139
 3643              	.LBE266:
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3644              		.loc 1 1088 3 is_stmt 1 view .LVU1140
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3645              		.loc 1 1088 7 is_stmt 0 view .LVU1141
 3646 02fe 134B     		ldr	r3, .L368+8
 3647 0300 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1088:src/display.c **** 			set_dig_s(dig, '0', res);
 3648              		.loc 1 1088 6 view .LVU1142
 3649 0304 9B07     		lsls	r3, r3, #30
 3650 0306 7FF5FDAE 		bpl	.L322
 3651 030a 0223     		movs	r3, #2
 3652 030c C5E6     		b	.L299
 3653              	.LVL410:
 3654              	.L363:
 3655              	.LBB267:
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3656              		.loc 1 1134 32 view .LVU1143
 3657 030e 0827     		movs	r7, #8
1136:src/display.c **** 		set_separator_decimal_modes();
 3658              		.loc 1 1136 5 view .LVU1144
 3659 0310 0425     		movs	r5, #4
 3660 0312 2DE7     		b	.L306
 3661              	.LVL411:
 3662              	.L367:
1136:src/display.c **** 		set_separator_decimal_modes();
 3663              		.loc 1 1136 5 view .LVU1145
 3664              	.LBE267:
1067:src/display.c **** 		if (v == 0) {
 3665              		.loc 1 1067 4 is_stmt 1 view .LVU1146
1067:src/display.c **** 		if (v == 0) {
 3666              		.loc 1 1067 6 is_stmt 0 view .LVU1147
 3667 0314 4646     		mov	r6, r8
 3668              	.LVL412:
1067:src/display.c **** 		if (v == 0) {
 3669              		.loc 1 1067 6 view .LVU1148
 3670 0316 4F46     		mov	r7, r9
 3671              	.LVL413:
1068:src/display.c **** 			if (sign)
 3672              		.loc 1 1068 3 is_stmt 1 view .LVU1149
1068:src/display.c **** 			if (sign)
 3673              		.loc 1 1068 6 is_stmt 0 view .LVU1150
 3674 0318 56EA0703 		orrs	r3, r6, r7
 3675 031c 90D1     		bne	.L285
 3676              	.LVL414:
 3677              	.L286:
1070:src/display.c **** 			set_dig_s(dig, '0', res);
 3678              		.loc 1 1070 5 is_stmt 1 view .LVU1151
 3679              	.LBB268:
 3680              	.LBI268:
 394:src/display.c **** 	if (res) *res++ = ch;
 3681              		.loc 1 394 14 view .LVU1152
 3682              	.LBB269:
ARM GAS  /tmp/ccTlkAzC.s 			page 131


 395:src/display.c **** 	else	set_dig(base, ch);
 3683              		.loc 1 395 2 view .LVU1153
 395:src/display.c **** 	else	set_dig(base, ch);
 3684              		.loc 1 395 5 is_stmt 0 view .LVU1154
 3685 031e BAF1000F 		cmp	r10, #0
 3686 0322 BCD1     		bne	.L288
 396:src/display.c **** 	return res;
 3687              		.loc 1 396 7 is_stmt 1 view .LVU1155
 3688 0324 2D21     		movs	r1, #45
 3689 0326 5A20     		movs	r0, #90
 3690 0328 FFF7FEFF 		bl	set_dig
 3691              	.LVL415:
 396:src/display.c **** 	return res;
 3692              		.loc 1 396 7 is_stmt 0 view .LVU1156
 3693              	.LBE269:
 3694              	.LBE268:
1071:src/display.c **** 			return;
 3695              		.loc 1 1071 4 is_stmt 1 view .LVU1157
 3696              	.LBB270:
 394:src/display.c **** 	if (res) *res++ = ch;
 3697              		.loc 1 394 14 view .LVU1158
 3698              	.LBB265:
 395:src/display.c **** 	else	set_dig(base, ch);
 3699              		.loc 1 395 2 view .LVU1159
 3700              	.L289:
 396:src/display.c **** 	return res;
 3701              		.loc 1 396 7 view .LVU1160
 3702 032c 3021     		movs	r1, #48
 3703 032e 6320     		movs	r0, #99
 3704 0330 FFF7FEFF 		bl	set_dig
 3705              	.LVL416:
 3706 0334 E3E6     		b	.L279
 3707              	.LVL417:
 3708              	.L308:
 396:src/display.c **** 	return res;
 3709              		.loc 1 396 7 is_stmt 0 view .LVU1161
 3710              	.LBE265:
 3711              	.LBE270:
 3712              	.LBB271:
1141:src/display.c **** 		buf[i] = '\0';
 3713              		.loc 1 1141 4 is_stmt 1 view .LVU1162
1141:src/display.c **** 		buf[i] = '\0';
 3714              		.loc 1 1141 18 is_stmt 0 view .LVU1163
 3715 0336 034B     		ldr	r3, .L368
 3716 0338 6FF3C502 		bfc	r2, #3, #3
 3717 033c 1A75     		strb	r2, [r3, #20]
 3718 033e 4FF00008 		mov	r8, #0
 3719 0342 24E7     		b	.L309
 3720              	.L369:
 3721              		.align	2
 3722              	.L368:
 3723 0344 00000000 		.word	StateWhileOn
 3724 0348 00000000 		.word	CSWTCH.270
 3725 034c 00000000 		.word	PersistentRam
 3726 0350 00000000 		.word	IntMaxWindow
 3727 0354 00000000 		.word	.LANCHOR0
 3728 0358 00000000 		.word	.LANCHOR12
ARM GAS  /tmp/ccTlkAzC.s 			page 132


 3729              	.LVL418:
 3730              	.L310:
1148:src/display.c **** 			int ch = buf[j++];
 3731              		.loc 1 1148 13 is_stmt 1 discriminator 1 view .LVU1164
1148:src/display.c **** 			int ch = buf[j++];
 3732              		.loc 1 1148 3 is_stmt 0 discriminator 1 view .LVU1165
 3733 035c 03F1FF39 		add	r9, r3, #-1
 3734              	.LVL419:
1148:src/display.c **** 			int ch = buf[j++];
 3735              		.loc 1 1148 3 discriminator 1 view .LVU1166
 3736 0360 002B     		cmp	r3, #0
 3737 0362 7FF428AF 		bne	.L312
1157:src/display.c **** 			if (dig >= 0)
 3738              		.loc 1 1157 3 is_stmt 1 view .LVU1167
1157:src/display.c **** 			if (dig >= 0)
 3739              		.loc 1 1157 6 is_stmt 0 view .LVU1168
 3740 0366 049B     		ldr	r3, [sp, #16]
 3741 0368 002B     		cmp	r3, #0
 3742 036a 3FF4C8AE 		beq	.L279
 3743 036e 4FF0630B 		mov	fp, #99
 3744 0372 50E7     		b	.L320
 3745              	.LVL420:
 3746              	.L364:
1134:src/display.c **** 		const int group = (b == 2 || b == 4) ? 4
 3747              		.loc 1 1134 32 view .LVU1169
 3748 0374 0C27     		movs	r7, #12
 3749 0376 FBE6     		b	.L306
 3750              	.LVL421:
 3751              	.L366:
1160:src/display.c **** 		}
 3752              		.loc 1 1160 9 is_stmt 1 view .LVU1170
 3753              	.LBB259:
 3754              	.LBI259:
 283:src/display.c **** {
 3755              		.loc 1 283 13 view .LVU1171
 3756              	.LBB260:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 3757              		.loc 1 285 2 view .LVU1172
 285:src/display.c **** 	set_dot(MANT_SIGN);
 3758              		.loc 1 285 24 is_stmt 0 view .LVU1173
 3759 0378 044B     		ldr	r3, .L370
 3760 037a 2D22     		movs	r2, #45
 286:src/display.c **** }
 3761              		.loc 1 286 2 view .LVU1174
 3762 037c 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 3763              		.loc 1 285 24 view .LVU1175
 3764 037e 1A70     		strb	r2, [r3]
 286:src/display.c **** }
 3765              		.loc 1 286 2 is_stmt 1 view .LVU1176
 3766 0380 FFF7FEFF 		bl	set_dot
 3767              	.LVL422:
 287:src/display.c **** 
 3768              		.loc 1 287 1 is_stmt 0 view .LVU1177
 3769 0384 BBE6     		b	.L279
 3770              	.LVL423:
 3771              	.L323:
ARM GAS  /tmp/ccTlkAzC.s 			page 133


 287:src/display.c **** 
 3772              		.loc 1 287 1 view .LVU1178
 3773              	.LBE260:
 3774              	.LBE259:
 3775              	.LBE271:
 3776              	.LBB272:
1105:src/display.c **** 				const int r = v % b;
 3777              		.loc 1 1105 4 view .LVU1179
 3778 0386 4FF0FF39 		mov	r9, #-1
 3779 038a A1E6     		b	.L292
 3780              	.L371:
 3781              		.align	2
 3782              	.L370:
 3783 038c 00000000 		.word	LastDisplayedNumber
 3784              	.LBE272:
 3785              		.cfi_endproc
 3786              	.LFE18:
 3788              		.section	.text.set_annunciators,"ax",%progbits
 3789              		.align	1
 3790              		.p2align 2,,3
 3791              		.syntax unified
 3792              		.thumb
 3793              		.thumb_func
 3794              		.fpu fpv4-sp-d16
 3796              	set_annunciators:
 3797              	.LFB32:
2163:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3798              		.loc 1 2163 1 is_stmt 1 view -0
 3799              		.cfi_startproc
 3800              		@ args = 0, pretend = 0, frame = 0
 3801              		@ frame_needed = 0, uses_anonymous_args = 0
2164:src/display.c **** 
 3802              		.loc 1 2164 2 view .LVU1181
2163:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 3803              		.loc 1 2163 1 is_stmt 0 view .LVU1182
 3804 0000 70B5     		push	{r4, r5, r6, lr}
 3805              		.cfi_def_cfa_offset 16
 3806              		.cfi_offset 4, -16
 3807              		.cfi_offset 5, -12
 3808              		.cfi_offset 6, -8
 3809              		.cfi_offset 14, -4
2173:src/display.c **** #endif
 3810              		.loc 1 2173 11 view .LVU1183
 3811 0002 314E     		ldr	r6, .L397
2164:src/display.c **** 
 3812              		.loc 1 2164 29 view .LVU1184
 3813 0004 FFF7FEFF 		bl	get_trig_mode
 3814              	.LVL424:
2173:src/display.c **** #endif
 3815              		.loc 1 2173 2 view .LVU1185
 3816 0008 B6F8E037 		ldrh	r3, [r6, #2016]
 3817 000c 012B     		cmp	r3, #1
2164:src/display.c **** 
 3818              		.loc 1 2164 29 view .LVU1186
 3819 000e 0446     		mov	r4, r0
 3820              	.LVL425:
2173:src/display.c **** #endif
ARM GAS  /tmp/ccTlkAzC.s 			page 134


 3821              		.loc 1 2173 2 is_stmt 1 view .LVU1187
 3822              	.LBB291:
 3823              	.LBB292:
 327:src/display.c **** 	else	clr_dot(n);
 3824              		.loc 1 327 10 is_stmt 0 view .LVU1188
 3825 0010 4FF08800 		mov	r0, #136
 3826              	.LBE292:
 3827              	.LBE291:
2173:src/display.c **** #endif
 3828              		.loc 1 2173 2 view .LVU1189
 3829 0014 03D8     		bhi	.L373
2173:src/display.c **** #endif
 3830              		.loc 1 2173 30 discriminator 1 view .LVU1190
 3831 0016 2D4B     		ldr	r3, .L397+4
2173:src/display.c **** #endif
 3832              		.loc 1 2173 2 discriminator 1 view .LVU1191
 3833 0018 1B68     		ldr	r3, [r3]
 3834 001a 002B     		cmp	r3, #0
 3835 001c 51D0     		beq	.L394
 3836              	.L373:
 3837              	.LVL426:
 3838              	.LBB295:
 3839              	.LBI291:
 326:src/display.c **** 	if (on)	set_dot(n);
 3840              		.loc 1 326 6 is_stmt 1 view .LVU1192
 3841              	.LBB293:
 327:src/display.c **** 	else	clr_dot(n);
 3842              		.loc 1 327 2 view .LVU1193
 328:src/display.c **** }
 3843              		.loc 1 328 7 view .LVU1194
 3844 001e FFF7FEFF 		bl	clr_dot
 3845              	.LVL427:
 3846              	.L374:
 328:src/display.c **** }
 3847              		.loc 1 328 7 is_stmt 0 view .LVU1195
 3848              	.LBE293:
 3849              	.LBE295:
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3850              		.loc 1 2175 2 is_stmt 1 view .LVU1196
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3851              		.loc 1 2175 19 is_stmt 0 view .LVU1197
 3852 0022 2B4D     		ldr	r5, .L397+8
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3853              		.loc 1 2175 2 view .LVU1198
 3854 0024 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 3855              	.LBB296:
 3856              	.LBB297:
 327:src/display.c **** 	else	clr_dot(n);
 3857              		.loc 1 327 10 view .LVU1199
 3858 0026 8620     		movs	r0, #134
 3859              	.LBE297:
 3860              	.LBE296:
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3861              		.loc 1 2175 2 view .LVU1200
 3862 0028 23B9     		cbnz	r3, .L375
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3863              		.loc 1 2175 47 discriminator 2 view .LVU1201
ARM GAS  /tmp/ccTlkAzC.s 			page 135


 3864 002a 6A69     		ldr	r2, [r5, #20]
 3865 002c 294B     		ldr	r3, .L397+12
 3866 002e 1340     		ands	r3, r3, r2
2175:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 3867              		.loc 1 2175 2 discriminator 2 view .LVU1202
 3868 0030 002B     		cmp	r3, #0
 3869 0032 43D0     		beq	.L395
 3870              	.L375:
 3871              	.LBB300:
 3872              	.LBB298:
 327:src/display.c **** 	else	clr_dot(n);
 3873              		.loc 1 327 10 is_stmt 1 view .LVU1203
 3874 0034 FFF7FEFF 		bl	set_dot
 3875              	.LVL428:
 3876              	.L376:
 3877              	.LBE298:
 3878              	.LBE300:
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3879              		.loc 1 2176 2 view .LVU1204
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3880              		.loc 1 2176 31 is_stmt 0 view .LVU1205
 3881 0038 274A     		ldr	r2, .L397+16
 3882 003a 6B69     		ldr	r3, [r5, #20]
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3883              		.loc 1 2176 2 view .LVU1206
 3884 003c 1A42     		tst	r2, r3
 3885              	.LBB301:
 3886              	.LBB302:
 327:src/display.c **** 	else	clr_dot(n);
 3887              		.loc 1 327 10 view .LVU1207
 3888 003e 4FF08500 		mov	r0, #133
 3889              	.LBE302:
 3890              	.LBE301:
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3891              		.loc 1 2176 2 view .LVU1208
 3892 0042 02D0     		beq	.L377
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3893              		.loc 1 2176 48 discriminator 1 view .LVU1209
 3894 0044 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
2176:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 3895              		.loc 1 2176 2 discriminator 1 view .LVU1210
 3896 0046 DA06     		lsls	r2, r3, #27
 3897 0048 35D4     		bmi	.L378
 3898              	.L377:
 3899              	.LVL429:
 3900              	.LBB305:
 3901              	.LBI301:
 326:src/display.c **** 	if (on)	set_dot(n);
 3902              		.loc 1 326 6 is_stmt 1 view .LVU1211
 3903              	.LBB303:
 327:src/display.c **** 	else	clr_dot(n);
 3904              		.loc 1 327 2 view .LVU1212
 328:src/display.c **** }
 3905              		.loc 1 328 7 view .LVU1213
 3906 004a FFF7FEFF 		bl	clr_dot
 3907              	.LVL430:
 3908              	.L379:
ARM GAS  /tmp/ccTlkAzC.s 			page 136


 328:src/display.c **** }
 3909              		.loc 1 328 7 is_stmt 0 view .LVU1214
 3910              	.LBE303:
 3911              	.LBE305:
2177:src/display.c **** 	set_IO_annunciator();
 3912              		.loc 1 2177 2 is_stmt 1 view .LVU1215
 3913 004e 6820     		movs	r0, #104
 3914 0050 FFF7FEFF 		bl	get_user_flag
 3915              	.LVL431:
 3916              	.LBB306:
 3917              	.LBI306:
 326:src/display.c **** 	if (on)	set_dot(n);
 3918              		.loc 1 326 6 view .LVU1216
 3919              	.LBB307:
 327:src/display.c **** 	else	clr_dot(n);
 3920              		.loc 1 327 2 view .LVU1217
 327:src/display.c **** 	else	clr_dot(n);
 3921              		.loc 1 327 5 is_stmt 0 view .LVU1218
 3922 0054 58B3     		cbz	r0, .L380
 327:src/display.c **** 	else	clr_dot(n);
 3923              		.loc 1 327 10 is_stmt 1 view .LVU1219
 3924 0056 8320     		movs	r0, #131
 3925              	.LVL432:
 327:src/display.c **** 	else	clr_dot(n);
 3926              		.loc 1 327 10 is_stmt 0 view .LVU1220
 3927 0058 FFF7FEFF 		bl	set_dot
 3928              	.LVL433:
 3929              	.L381:
 327:src/display.c **** 	else	clr_dot(n);
 3930              		.loc 1 327 10 view .LVU1221
 3931              	.LBE307:
 3932              	.LBE306:
2178:src/display.c **** 
 3933              		.loc 1 2178 2 is_stmt 1 view .LVU1222
 3934              	.LBB309:
 3935              	.LBI309:
2190:src/display.c **** #ifndef DM42
 3936              		.loc 1 2190 6 view .LVU1223
 3937              	.LBB310:
2195:src/display.c **** #endif
 3938              		.loc 1 2195 5 view .LVU1224
2205:src/display.c **** 		dot(LIT_EQ, on);
 3939              		.loc 1 2205 2 view .LVU1225
2205:src/display.c **** 		dot(LIT_EQ, on);
 3940              		.loc 1 2205 9 is_stmt 0 view .LVU1226
 3941 005c 1F4D     		ldr	r5, .L397+20
2205:src/display.c **** 		dot(LIT_EQ, on);
 3942              		.loc 1 2205 5 view .LVU1227
 3943 005e 2B68     		ldr	r3, [r5]
 3944 0060 012B     		cmp	r3, #1
 3945 0062 06D0     		beq	.L382
 3946              	.LBB311:
 3947              	.LBI311:
2190:src/display.c **** #ifndef DM42
 3948              		.loc 1 2190 6 is_stmt 1 view .LVU1228
 3949              	.LBB312:
2206:src/display.c **** 		IoAnnunciator = on;
ARM GAS  /tmp/ccTlkAzC.s 			page 137


 3950              		.loc 1 2206 3 view .LVU1229
 3951              	.LVL434:
 3952              	.LBB313:
 3953              	.LBI313:
 326:src/display.c **** 	if (on)	set_dot(n);
 3954              		.loc 1 326 6 view .LVU1230
 3955              	.LBB314:
 327:src/display.c **** 	else	clr_dot(n);
 3956              		.loc 1 327 2 view .LVU1231
 327:src/display.c **** 	else	clr_dot(n);
 3957              		.loc 1 327 10 view .LVU1232
 3958 0064 8420     		movs	r0, #132
 3959 0066 FFF7FEFF 		bl	set_dot
 3960              	.LVL435:
 327:src/display.c **** 	else	clr_dot(n);
 3961              		.loc 1 327 10 is_stmt 0 view .LVU1233
 3962              	.LBE314:
 3963              	.LBE313:
2207:src/display.c **** 		finish_display();
 3964              		.loc 1 2207 3 is_stmt 1 view .LVU1234
2207:src/display.c **** 		finish_display();
 3965              		.loc 1 2207 17 is_stmt 0 view .LVU1235
 3966 006a 0123     		movs	r3, #1
 3967 006c 2B60     		str	r3, [r5]
2208:src/display.c **** 	}
 3968              		.loc 1 2208 3 is_stmt 1 view .LVU1236
 3969 006e FFF7FEFF 		bl	finish_display
 3970              	.LVL436:
 3971              	.L382:
 3972              	.LBE312:
 3973              	.LBE311:
 3974              	.LBE310:
 3975              	.LBE309:
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3976              		.loc 1 2182 2 view .LVU1237
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3977              		.loc 1 2182 11 is_stmt 0 view .LVU1238
 3978 0072 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
 3979 0076 03F00103 		and	r3, r3, #1
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3980              		.loc 1 2182 2 view .LVU1239
 3981 007a 2343     		orrs	r3, r3, r4
 3982 007c 13F0FF0F 		tst	r3, #255
 3983              	.LBB315:
 3984              	.LBB316:
 327:src/display.c **** 	else	clr_dot(n);
 3985              		.loc 1 327 10 view .LVU1240
 3986 0080 4FF08C00 		mov	r0, #140
 3987              	.LBE316:
 3988              	.LBE315:
2182:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 3989              		.loc 1 2182 2 view .LVU1241
 3990 0084 06D1     		bne	.L396
 3991              	.LVL437:
 3992              	.LBB319:
 3993              	.LBI315:
 326:src/display.c **** 	if (on)	set_dot(n);
ARM GAS  /tmp/ccTlkAzC.s 			page 138


 3994              		.loc 1 326 6 is_stmt 1 view .LVU1242
 3995              	.LBB317:
 327:src/display.c **** 	else	clr_dot(n);
 3996              		.loc 1 327 2 view .LVU1243
 327:src/display.c **** 	else	clr_dot(n);
 3997              		.loc 1 327 10 view .LVU1244
 3998 0086 FFF7FEFF 		bl	set_dot
 3999              	.LVL438:
 327:src/display.c **** 	else	clr_dot(n);
 4000              		.loc 1 327 10 is_stmt 0 view .LVU1245
 4001              	.LBE317:
 4002              	.LBE319:
2183:src/display.c **** }
 4003              		.loc 1 2183 2 is_stmt 1 view .LVU1246
 4004              	.L385:
 4005              	.LBB320:
 4006              	.LBI320:
 326:src/display.c **** 	if (on)	set_dot(n);
 4007              		.loc 1 326 6 view .LVU1247
 4008              	.LBB321:
 327:src/display.c **** 	else	clr_dot(n);
 4009              		.loc 1 327 2 view .LVU1248
 328:src/display.c **** }
 4010              		.loc 1 328 7 view .LVU1249
 4011              	.LBE321:
 4012              	.LBE320:
2184:src/display.c **** 
 4013              		.loc 1 2184 1 is_stmt 0 view .LVU1250
 4014 008a BDE87040 		pop	{r4, r5, r6, lr}
 4015              		.cfi_remember_state
 4016              		.cfi_restore 14
 4017              		.cfi_restore 6
 4018              		.cfi_restore 5
 4019              		.cfi_restore 4
 4020              		.cfi_def_cfa_offset 0
 4021              	.LVL439:
 4022              	.LBB325:
 4023              	.LBB322:
 328:src/display.c **** }
 4024              		.loc 1 328 7 view .LVU1251
 4025 008e 8B20     		movs	r0, #139
 4026 0090 FFF7FEBF 		b	clr_dot
 4027              	.LVL440:
 4028              	.L396:
 4029              		.cfi_restore_state
 328:src/display.c **** }
 4030              		.loc 1 328 7 view .LVU1252
 4031              	.LBE322:
 4032              	.LBE325:
 4033              	.LBB326:
 326:src/display.c **** 	if (on)	set_dot(n);
 4034              		.loc 1 326 6 is_stmt 1 view .LVU1253
 4035              	.LBB318:
 327:src/display.c **** 	else	clr_dot(n);
 4036              		.loc 1 327 2 view .LVU1254
 328:src/display.c **** }
 4037              		.loc 1 328 7 view .LVU1255
ARM GAS  /tmp/ccTlkAzC.s 			page 139


 4038 0094 FFF7FEFF 		bl	clr_dot
 4039              	.LVL441:
 328:src/display.c **** }
 4040              		.loc 1 328 7 is_stmt 0 view .LVU1256
 4041              	.LBE318:
 4042              	.LBE326:
2183:src/display.c **** }
 4043              		.loc 1 2183 2 is_stmt 1 view .LVU1257
2183:src/display.c **** }
 4044              		.loc 1 2183 11 is_stmt 0 view .LVU1258
 4045 0098 96F8E837 		ldrb	r3, [r6, #2024]	@ zero_extendqisi2
2183:src/display.c **** }
 4046              		.loc 1 2183 2 view .LVU1259
 4047 009c DB07     		lsls	r3, r3, #31
 4048 009e F4D4     		bmi	.L385
2183:src/display.c **** }
 4049              		.loc 1 2183 2 discriminator 1 view .LVU1260
 4050 00a0 012C     		cmp	r4, #1
 4051 00a2 F2D1     		bne	.L385
 4052              	.LVL442:
 4053              	.LBB327:
 326:src/display.c **** 	if (on)	set_dot(n);
 4054              		.loc 1 326 6 is_stmt 1 view .LVU1261
 4055              	.LBB323:
 327:src/display.c **** 	else	clr_dot(n);
 4056              		.loc 1 327 2 view .LVU1262
 327:src/display.c **** 	else	clr_dot(n);
 4057              		.loc 1 327 10 view .LVU1263
 4058              	.LBE323:
 4059              	.LBE327:
2184:src/display.c **** 
 4060              		.loc 1 2184 1 is_stmt 0 view .LVU1264
 4061 00a4 BDE87040 		pop	{r4, r5, r6, lr}
 4062              		.cfi_remember_state
 4063              		.cfi_restore 14
 4064              		.cfi_restore 6
 4065              		.cfi_restore 5
 4066              		.cfi_restore 4
 4067              		.cfi_def_cfa_offset 0
 4068              	.LVL443:
 4069              	.LBB328:
 4070              	.LBB324:
 327:src/display.c **** 	else	clr_dot(n);
 4071              		.loc 1 327 10 view .LVU1265
 4072 00a8 8B20     		movs	r0, #139
 4073 00aa FFF7FEBF 		b	set_dot
 4074              	.LVL444:
 4075              	.L380:
 4076              		.cfi_restore_state
 327:src/display.c **** 	else	clr_dot(n);
 4077              		.loc 1 327 10 view .LVU1266
 4078              	.LBE324:
 4079              	.LBE328:
 4080              	.LBB329:
 4081              	.LBB308:
 328:src/display.c **** }
 4082              		.loc 1 328 7 is_stmt 1 view .LVU1267
ARM GAS  /tmp/ccTlkAzC.s 			page 140


 4083 00ae 8320     		movs	r0, #131
 4084              	.LVL445:
 328:src/display.c **** }
 4085              		.loc 1 328 7 is_stmt 0 view .LVU1268
 4086 00b0 FFF7FEFF 		bl	clr_dot
 4087              	.LVL446:
 4088 00b4 D2E7     		b	.L381
 4089              	.LVL447:
 4090              	.L378:
 328:src/display.c **** }
 4091              		.loc 1 328 7 view .LVU1269
 4092              	.LBE308:
 4093              	.LBE329:
 4094              	.LBB330:
 326:src/display.c **** 	if (on)	set_dot(n);
 4095              		.loc 1 326 6 is_stmt 1 view .LVU1270
 4096              	.LBB304:
 327:src/display.c **** 	else	clr_dot(n);
 4097              		.loc 1 327 2 view .LVU1271
 327:src/display.c **** 	else	clr_dot(n);
 4098              		.loc 1 327 10 view .LVU1272
 4099 00b6 FFF7FEFF 		bl	set_dot
 4100              	.LVL448:
 4101 00ba C8E7     		b	.L379
 4102              	.LVL449:
 4103              	.L395:
 327:src/display.c **** 	else	clr_dot(n);
 4104              		.loc 1 327 10 is_stmt 0 view .LVU1273
 4105              	.LBE304:
 4106              	.LBE330:
 4107              	.LBB331:
 4108              	.LBI296:
 326:src/display.c **** 	if (on)	set_dot(n);
 4109              		.loc 1 326 6 is_stmt 1 view .LVU1274
 4110              	.LBB299:
 327:src/display.c **** 	else	clr_dot(n);
 4111              		.loc 1 327 2 view .LVU1275
 328:src/display.c **** }
 4112              		.loc 1 328 7 view .LVU1276
 4113 00bc FFF7FEFF 		bl	clr_dot
 4114              	.LVL450:
 4115 00c0 BAE7     		b	.L376
 4116              	.LVL451:
 4117              	.L394:
 328:src/display.c **** }
 4118              		.loc 1 328 7 is_stmt 0 view .LVU1277
 4119              	.LBE299:
 4120              	.LBE331:
 4121              	.LBB332:
 326:src/display.c **** 	if (on)	set_dot(n);
 4122              		.loc 1 326 6 is_stmt 1 view .LVU1278
 4123              	.LBB294:
 327:src/display.c **** 	else	clr_dot(n);
 4124              		.loc 1 327 2 view .LVU1279
 327:src/display.c **** 	else	clr_dot(n);
 4125              		.loc 1 327 10 view .LVU1280
 4126 00c2 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccTlkAzC.s 			page 141


 4127              	.LVL452:
 4128 00c6 ACE7     		b	.L374
 4129              	.L398:
 4130              		.align	2
 4131              	.L397:
 4132 00c8 00000000 		.word	PersistentRam
 4133 00cc 00000000 		.word	Running
 4134 00d0 00000000 		.word	StateWhileOn
 4135 00d4 07000800 		.word	524295
 4136 00d8 00080800 		.word	526336
 4137 00dc 00000000 		.word	IoAnnunciator
 4138              	.LBE294:
 4139              	.LBE332:
 4140              		.cfi_endproc
 4141              	.LFE32:
 4143              		.section	.text.getdig,"ax",%progbits
 4144              		.align	1
 4145              		.p2align 2,,3
 4146              		.global	getdig
 4147              		.syntax unified
 4148              		.thumb
 4149              		.thumb_func
 4150              		.fpu fpv4-sp-d16
 4152              	getdig:
 4153              	.LVL453:
 4154              	.LFB6:
 321:src/display.c **** 	// perform index lookup
 4155              		.loc 1 321 1 view -0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 0
 4158              		@ frame_needed = 0, uses_anonymous_args = 0
 4159              		@ link register save eliminated.
 323:src/display.c **** }
 4160              		.loc 1 323 2 view .LVU1282
 323:src/display.c **** }
 4161              		.loc 1 323 15 is_stmt 0 view .LVU1283
 4162 0000 014B     		ldr	r3, .L400
 323:src/display.c **** }
 4163              		.loc 1 323 18 view .LVU1284
 4164 0002 C0B2     		uxtb	r0, r0
 4165              	.LVL454:
 324:src/display.c **** 
 4166              		.loc 1 324 1 view .LVU1285
 4167 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 4168 0006 7047     		bx	lr
 4169              	.L401:
 4170              		.align	2
 4171              	.L400:
 4172 0008 00000000 		.word	.LANCHOR2
 4173              		.cfi_endproc
 4174              	.LFE6:
 4176              		.section	.text.dot,"ax",%progbits
 4177              		.align	1
 4178              		.p2align 2,,3
 4179              		.global	dot
 4180              		.syntax unified
 4181              		.thumb
ARM GAS  /tmp/ccTlkAzC.s 			page 142


 4182              		.thumb_func
 4183              		.fpu fpv4-sp-d16
 4185              	dot:
 4186              	.LVL455:
 4187              	.LFB7:
 326:src/display.c **** 	if (on)	set_dot(n);
 4188              		.loc 1 326 25 is_stmt 1 view -0
 4189              		.cfi_startproc
 4190              		@ args = 0, pretend = 0, frame = 0
 4191              		@ frame_needed = 0, uses_anonymous_args = 0
 4192              		@ link register save eliminated.
 327:src/display.c **** 	else	clr_dot(n);
 4193              		.loc 1 327 2 view .LVU1287
 327:src/display.c **** 	else	clr_dot(n);
 4194              		.loc 1 327 5 is_stmt 0 view .LVU1288
 4195 0000 09B1     		cbz	r1, .L403
 327:src/display.c **** 	else	clr_dot(n);
 4196              		.loc 1 327 10 is_stmt 1 discriminator 1 view .LVU1289
 4197 0002 FFF7FEBF 		b	set_dot
 4198              	.LVL456:
 4199              	.L403:
 328:src/display.c **** }
 4200              		.loc 1 328 7 view .LVU1290
 4201 0006 FFF7FEBF 		b	clr_dot
 4202              	.LVL457:
 328:src/display.c **** }
 4203              		.loc 1 328 7 is_stmt 0 view .LVU1291
 4204              		.cfi_endproc
 4205              	.LFE7:
 4207 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4208              		.align	1
 4209              		.p2align 2,,3
 4210              		.global	std_round_fix
 4211              		.syntax unified
 4212              		.thumb
 4213              		.thumb_func
 4214              		.fpu fpv4-sp-d16
 4216              	std_round_fix:
 4217              	.LVL458:
 4218              	.LFB24:
1416:src/display.c **** 	decNumber b, c;
 4219              		.loc 1 1416 54 is_stmt 1 view -0
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 80
 4222              		@ frame_needed = 0, uses_anonymous_args = 0
1417:src/display.c **** 
 4223              		.loc 1 1417 2 view .LVU1293
1419:src/display.c **** 	b.exponent -= UState.dispdigs;
 4224              		.loc 1 1419 2 view .LVU1294
1416:src/display.c **** 	decNumber b, c;
 4225              		.loc 1 1416 54 is_stmt 0 view .LVU1295
 4226 0000 00B5     		push	{lr}
 4227              		.cfi_def_cfa_offset 4
 4228              		.cfi_offset 14, -4
 4229 0002 95B0     		sub	sp, sp, #84
 4230              		.cfi_def_cfa_offset 88
1416:src/display.c **** 	decNumber b, c;
ARM GAS  /tmp/ccTlkAzC.s 			page 143


 4231              		.loc 1 1416 54 view .LVU1296
 4232 0004 0146     		mov	r1, r0
1419:src/display.c **** 	b.exponent -= UState.dispdigs;
 4233              		.loc 1 1419 2 view .LVU1297
 4234 0006 02A8     		add	r0, sp, #8
 4235              	.LVL459:
1416:src/display.c **** 	decNumber b, c;
 4236              		.loc 1 1416 54 view .LVU1298
 4237 0008 0191     		str	r1, [sp, #4]
1419:src/display.c **** 	b.exponent -= UState.dispdigs;
 4238              		.loc 1 1419 2 view .LVU1299
 4239 000a FFF7FEFF 		bl	dn_1
 4240              	.LVL460:
1420:src/display.c **** 	dn_abs(&c, z);
 4241              		.loc 1 1420 2 is_stmt 1 view .LVU1300
1420:src/display.c **** 	dn_abs(&c, z);
 4242              		.loc 1 1420 22 is_stmt 0 view .LVU1301
 4243 000e 0F4A     		ldr	r2, .L409
1420:src/display.c **** 	dn_abs(&c, z);
 4244              		.loc 1 1420 13 view .LVU1302
 4245 0010 039B     		ldr	r3, [sp, #12]
1420:src/display.c **** 	dn_abs(&c, z);
 4246              		.loc 1 1420 22 view .LVU1303
 4247 0012 92F8E727 		ldrb	r2, [r2, #2023]	@ zero_extendqisi2
1421:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4248              		.loc 1 1421 2 view .LVU1304
 4249 0016 0199     		ldr	r1, [sp, #4]
1420:src/display.c **** 	dn_abs(&c, z);
 4250              		.loc 1 1420 22 view .LVU1305
 4251 0018 02F00F02 		and	r2, r2, #15
1420:src/display.c **** 	dn_abs(&c, z);
 4252              		.loc 1 1420 13 view .LVU1306
 4253 001c 9B1A     		subs	r3, r3, r2
1421:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4254              		.loc 1 1421 2 view .LVU1307
 4255 001e 0BA8     		add	r0, sp, #44
1420:src/display.c **** 	dn_abs(&c, z);
 4256              		.loc 1 1420 13 view .LVU1308
 4257 0020 0393     		str	r3, [sp, #12]
1421:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
 4258              		.loc 1 1421 2 is_stmt 1 view .LVU1309
 4259 0022 FFF7FEFF 		bl	dn_abs
 4260              	.LVL461:
1422:src/display.c **** 		return MODE_FIX;
 4261              		.loc 1 1422 2 view .LVU1310
1422:src/display.c **** 		return MODE_FIX;
 4262              		.loc 1 1422 6 is_stmt 0 view .LVU1311
 4263 0026 0BA9     		add	r1, sp, #44
 4264 0028 02A8     		add	r0, sp, #8
 4265 002a FFF7FEFF 		bl	dn_lt
 4266              	.LVL462:
1422:src/display.c **** 		return MODE_FIX;
 4267              		.loc 1 1422 5 view .LVU1312
 4268 002e 10B9     		cbnz	r0, .L408
1425:src/display.c **** #endif
 4269              		.loc 1 1425 1 view .LVU1313
 4270 0030 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccTlkAzC.s 			page 144


 4271              		.cfi_remember_state
 4272              		.cfi_def_cfa_offset 4
 4273              		@ sp needed
 4274 0032 5DF804FB 		ldr	pc, [sp], #4
 4275              	.LVL463:
 4276              	.L408:
 4277              		.cfi_restore_state
1422:src/display.c **** 		return MODE_FIX;
 4278              		.loc 1 1422 23 discriminator 1 view .LVU1314
 4279 0036 0649     		ldr	r1, .L409+4
 4280 0038 0BA8     		add	r0, sp, #44
 4281 003a FFF7FEFF 		bl	dn_lt
 4282              	.LVL464:
1423:src/display.c **** 	return MODE_STD;
 4283              		.loc 1 1423 10 discriminator 1 view .LVU1315
 4284 003e 0038     		subs	r0, r0, #0
 4285 0040 18BF     		it	ne
 4286 0042 0120     		movne	r0, #1
1425:src/display.c **** #endif
 4287              		.loc 1 1425 1 discriminator 1 view .LVU1316
 4288 0044 15B0     		add	sp, sp, #84
 4289              		.cfi_def_cfa_offset 4
 4290              		@ sp needed
 4291 0046 5DF804FB 		ldr	pc, [sp], #4
 4292              	.LVL465:
 4293              	.L410:
1425:src/display.c **** #endif
 4294              		.loc 1 1425 1 discriminator 1 view .LVU1317
 4295 004a 00BF     		.align	2
 4296              	.L409:
 4297 004c 00000000 		.word	PersistentRam
 4298 0050 00000000 		.word	const_1
 4299              		.cfi_endproc
 4300              	.LFE24:
 4302              		.section	.text.set_IO_annunciator,"ax",%progbits
 4303              		.align	1
 4304              		.p2align 2,,3
 4305              		.global	set_IO_annunciator
 4306              		.syntax unified
 4307              		.thumb
 4308              		.thumb_func
 4309              		.fpu fpv4-sp-d16
 4311              	set_IO_annunciator:
 4312              	.LFB33:
2190:src/display.c **** #ifndef DM42
 4313              		.loc 1 2190 31 is_stmt 1 view -0
 4314              		.cfi_startproc
 4315              		@ args = 0, pretend = 0, frame = 0
 4316              		@ frame_needed = 0, uses_anonymous_args = 0
2195:src/display.c **** #endif
 4317              		.loc 1 2195 5 view .LVU1319
 4318              	.LVL466:
2205:src/display.c **** 		dot(LIT_EQ, on);
 4319              		.loc 1 2205 2 view .LVU1320
2190:src/display.c **** #ifndef DM42
 4320              		.loc 1 2190 31 is_stmt 0 view .LVU1321
 4321 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccTlkAzC.s 			page 145


 4322              		.cfi_def_cfa_offset 8
 4323              		.cfi_offset 4, -8
 4324              		.cfi_offset 14, -4
2205:src/display.c **** 		dot(LIT_EQ, on);
 4325              		.loc 1 2205 9 view .LVU1322
 4326 0002 074C     		ldr	r4, .L415
2205:src/display.c **** 		dot(LIT_EQ, on);
 4327              		.loc 1 2205 5 view .LVU1323
 4328 0004 2368     		ldr	r3, [r4]
 4329 0006 012B     		cmp	r3, #1
 4330 0008 00D1     		bne	.L414
2210:src/display.c **** 
 4331              		.loc 1 2210 1 view .LVU1324
 4332 000a 10BD     		pop	{r4, pc}
 4333              	.L414:
 4334              	.LBB337:
 4335              	.LBI337:
2190:src/display.c **** #ifndef DM42
 4336              		.loc 1 2190 6 is_stmt 1 view .LVU1325
 4337              	.LBB338:
2206:src/display.c **** 		IoAnnunciator = on;
 4338              		.loc 1 2206 3 view .LVU1326
 4339              	.LVL467:
 4340              	.LBB339:
 4341              	.LBI339:
 326:src/display.c **** 	if (on)	set_dot(n);
 4342              		.loc 1 326 6 view .LVU1327
 4343              	.LBB340:
 327:src/display.c **** 	else	clr_dot(n);
 4344              		.loc 1 327 2 view .LVU1328
 327:src/display.c **** 	else	clr_dot(n);
 4345              		.loc 1 327 10 view .LVU1329
 4346 000c 8420     		movs	r0, #132
 4347 000e FFF7FEFF 		bl	set_dot
 4348              	.LVL468:
 327:src/display.c **** 	else	clr_dot(n);
 4349              		.loc 1 327 10 is_stmt 0 view .LVU1330
 4350              	.LBE340:
 4351              	.LBE339:
2207:src/display.c **** 		finish_display();
 4352              		.loc 1 2207 3 is_stmt 1 view .LVU1331
2207:src/display.c **** 		finish_display();
 4353              		.loc 1 2207 17 is_stmt 0 view .LVU1332
 4354 0012 0123     		movs	r3, #1
 4355 0014 2360     		str	r3, [r4]
2208:src/display.c **** 	}
 4356              		.loc 1 2208 3 is_stmt 1 view .LVU1333
 4357              	.LBE338:
 4358              	.LBE337:
2210:src/display.c **** 
 4359              		.loc 1 2210 1 is_stmt 0 view .LVU1334
 4360 0016 BDE81040 		pop	{r4, lr}
 4361              		.cfi_restore 14
 4362              		.cfi_restore 4
 4363              		.cfi_def_cfa_offset 0
 4364              	.LBB342:
 4365              	.LBB341:
ARM GAS  /tmp/ccTlkAzC.s 			page 146


2208:src/display.c **** 	}
 4366              		.loc 1 2208 3 view .LVU1335
 4367 001a FFF7FEBF 		b	finish_display
 4368              	.LVL469:
 4369              	.L416:
 4370 001e 00BF     		.align	2
 4371              	.L415:
 4372 0020 00000000 		.word	IoAnnunciator
 4373              	.LBE341:
 4374              	.LBE342:
 4375              		.cfi_endproc
 4376              	.LFE33:
 4378              		.section	.text.pixel_length,"ax",%progbits
 4379              		.align	1
 4380              		.p2align 2,,3
 4381              		.global	pixel_length
 4382              		.syntax unified
 4383              		.thumb
 4384              		.thumb_func
 4385              		.fpu fpv4-sp-d16
 4387              	pixel_length:
 4388              	.LVL470:
 4389              	.LFB38:
2699:src/display.c **** 
2700:src/display.c **** 
2701:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2702:src/display.c ****  */
2703:src/display.c **** int pixel_length(const char *s, int smallp)
2704:src/display.c **** {
 4390              		.loc 1 2704 1 is_stmt 1 view -0
 4391              		.cfi_startproc
 4392              		@ args = 0, pretend = 0, frame = 0
 4393              		@ frame_needed = 0, uses_anonymous_args = 0
2705:src/display.c **** 	int len = 0;
 4394              		.loc 1 2705 2 view .LVU1337
2706:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4395              		.loc 1 2706 2 view .LVU1338
2704:src/display.c **** 	int len = 0;
 4396              		.loc 1 2704 1 is_stmt 0 view .LVU1339
 4397 0000 70B5     		push	{r4, r5, r6, lr}
 4398              		.cfi_def_cfa_offset 16
 4399              		.cfi_offset 4, -16
 4400              		.cfi_offset 5, -12
 4401              		.cfi_offset 6, -8
 4402              		.cfi_offset 14, -4
2704:src/display.c **** 	int len = 0;
 4403              		.loc 1 2704 1 view .LVU1340
 4404 0002 0446     		mov	r4, r0
2707:src/display.c **** 	while (*s != '\0') {
 4405              		.loc 1 2707 9 view .LVU1341
 4406 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4407              	.LVL471:
2706:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4408              		.loc 1 2706 34 view .LVU1342
 4409 0006 0E1E     		subs	r6, r1, #0
 4410 0008 18BF     		it	ne
 4411 000a 4FF48076 		movne	r6, #256
ARM GAS  /tmp/ccTlkAzC.s 			page 147


 4412              	.LVL472:
 4413              		.loc 1 2707 2 is_stmt 1 view .LVU1343
 4414              		.loc 1 2707 8 view .LVU1344
 4415 000e A0B1     		cbz	r0, .L424
2705:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4416              		.loc 1 2705 6 is_stmt 0 view .LVU1345
 4417 0010 0025     		movs	r5, #0
 4418 0012 06E0     		b	.L422
 4419              	.LVL473:
 4420              	.L420:
2708:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
2709:src/display.c **** 		if (s[0] == '\007') {
2710:src/display.c **** 			len += s[1] & 0x1F;
2711:src/display.c **** 			s += 3;
2712:src/display.c **** 			continue;
2713:src/display.c **** 		}
2714:src/display.c **** #endif
2715:src/display.c **** 		len += charlengths( (unsigned char) *s++ + offset );
 4421              		.loc 1 2715 10 view .LVU1346
 4422 0014 3044     		add	r0, r0, r6
 4423 0016 FFF7FEFF 		bl	charlengths
 4424              	.LVL474:
 4425              		.loc 1 2715 41 view .LVU1347
 4426 001a 0134     		adds	r4, r4, #1
 4427              	.LVL475:
 4428              		.loc 1 2715 7 view .LVU1348
 4429 001c 0544     		add	r5, r5, r0
 4430              	.LVL476:
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4431              		.loc 1 2707 8 is_stmt 1 view .LVU1349
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4432              		.loc 1 2707 9 is_stmt 0 view .LVU1350
 4433 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4434              		.loc 1 2707 8 view .LVU1351
 4435 0020 48B1     		cbz	r0, .L417
 4436              	.LVL477:
 4437              	.L422:
2709:src/display.c **** 			len += s[1] & 0x1F;
 4438              		.loc 1 2709 3 is_stmt 1 view .LVU1352
 4439              		.loc 1 2715 3 view .LVU1353
2709:src/display.c **** 			len += s[1] & 0x1F;
 4440              		.loc 1 2709 6 is_stmt 0 view .LVU1354
 4441 0022 0728     		cmp	r0, #7
 4442 0024 F6D1     		bne	.L420
2710:src/display.c **** 			s += 3;
 4443              		.loc 1 2710 4 is_stmt 1 view .LVU1355
2710:src/display.c **** 			s += 3;
 4444              		.loc 1 2710 16 is_stmt 0 view .LVU1356
 4445 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4446              		.loc 1 2707 9 view .LVU1357
 4447 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
2710:src/display.c **** 			s += 3;
 4448              		.loc 1 2710 16 view .LVU1358
 4449 002a 03F01F03 		and	r3, r3, #31
2711:src/display.c **** 			continue;
ARM GAS  /tmp/ccTlkAzC.s 			page 148


 4450              		.loc 1 2711 6 view .LVU1359
 4451 002e 0334     		adds	r4, r4, #3
 4452              	.LVL478:
2710:src/display.c **** 			s += 3;
 4453              		.loc 1 2710 8 view .LVU1360
 4454 0030 1D44     		add	r5, r5, r3
 4455              	.LVL479:
2711:src/display.c **** 			continue;
 4456              		.loc 1 2711 4 is_stmt 1 view .LVU1361
2712:src/display.c **** 		}
 4457              		.loc 1 2712 4 view .LVU1362
2707:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4458              		.loc 1 2707 8 view .LVU1363
 4459 0032 0028     		cmp	r0, #0
 4460 0034 F5D1     		bne	.L422
 4461              	.L417:
2716:src/display.c **** 	}
2717:src/display.c **** 	return len;
2718:src/display.c **** }
 4462              		.loc 1 2718 1 is_stmt 0 view .LVU1364
 4463 0036 2846     		mov	r0, r5
 4464 0038 70BD     		pop	{r4, r5, r6, pc}
 4465              	.LVL480:
 4466              	.L424:
2705:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4467              		.loc 1 2705 6 view .LVU1365
 4468 003a 0546     		mov	r5, r0
2717:src/display.c **** }
 4469              		.loc 1 2717 2 is_stmt 1 view .LVU1366
 4470              		.loc 1 2718 1 is_stmt 0 view .LVU1367
 4471 003c 2846     		mov	r0, r5
 4472 003e 70BD     		pop	{r4, r5, r6, pc}
 4473              		.loc 1 2718 1 view .LVU1368
 4474              		.cfi_endproc
 4475              	.LFE38:
 4477              		.section	.text.set_status,"ax",%progbits
 4478              		.align	1
 4479              		.p2align 2,,3
 4480              		.syntax unified
 4481              		.thumb
 4482              		.thumb_func
 4483              		.fpu fpv4-sp-d16
 4485              	set_status:
 4486              	.LVL481:
 4487              	.LFB40:
2719:src/display.c **** 
2720:src/display.c **** 
2721:src/display.c **** /* Determine the pixel length of the string if it were displayed.
2722:src/display.c ****  * If this is larger than the display, return true.
2723:src/display.c ****  */
2724:src/display.c **** static int string_too_large(const char *s) {
2725:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
2726:src/display.c **** }
2727:src/display.c **** 
2728:src/display.c **** 
2729:src/display.c **** /* Display the given string on the screen.
2730:src/display.c ****  */
ARM GAS  /tmp/ccTlkAzC.s 			page 149


2731:src/display.c **** static void set_status(const char *str) {
 4488              		.loc 1 2731 41 is_stmt 1 view -0
 4489              		.cfi_startproc
 4490              		@ args = 0, pretend = 0, frame = 0
 4491              		@ frame_needed = 0, uses_anonymous_args = 0
2732:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4492              		.loc 1 2732 2 view .LVU1370
 4493              		.loc 1 2732 24 is_stmt 0 view .LVU1371
 4494 0000 0C4B     		ldr	r3, .L432
 4495              		.loc 1 2732 2 view .LVU1372
 4496 0002 93F91630 		ldrsb	r3, [r3, #22]
 4497 0006 002B     		cmp	r3, #0
2731:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4498              		.loc 1 2731 41 view .LVU1373
 4499 0008 10B5     		push	{r4, lr}
 4500              		.cfi_def_cfa_offset 8
 4501              		.cfi_offset 4, -8
 4502              		.cfi_offset 14, -4
2731:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4503              		.loc 1 2731 41 view .LVU1374
 4504 000a 0446     		mov	r4, r0
 4505              		.loc 1 2732 2 view .LVU1375
 4506 000c 05DA     		bge	.L431
 4507 000e 2046     		mov	r0, r4
 4508              		.loc 1 2732 2 view .LVU1376
 4509 0010 0121     		movs	r1, #1
2733:src/display.c **** }
 4510              		.loc 1 2733 1 view .LVU1377
 4511 0012 BDE81040 		pop	{r4, lr}
 4512              		.cfi_remember_state
 4513              		.cfi_restore 14
 4514              		.cfi_restore 4
 4515              		.cfi_def_cfa_offset 0
2732:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4516              		.loc 1 2732 2 view .LVU1378
 4517 0016 FFF7FEBF 		b	set_status_sized
 4518              	.LVL482:
 4519              	.L431:
 4520              		.cfi_restore_state
 4521              	.LBB343:
 4522              	.LBI343:
2724:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4523              		.loc 1 2724 12 is_stmt 1 view .LVU1379
 4524              	.LBB344:
2725:src/display.c **** }
 4525              		.loc 1 2725 2 view .LVU1380
2725:src/display.c **** }
 4526              		.loc 1 2725 9 is_stmt 0 view .LVU1381
 4527 001a 0021     		movs	r1, #0
 4528 001c FFF7FEFF 		bl	pixel_length
 4529              	.LVL483:
2725:src/display.c **** }
 4530              		.loc 1 2725 9 view .LVU1382
 4531              	.LBE344:
 4532              	.LBE343:
2732:src/display.c **** }
 4533              		.loc 1 2732 2 view .LVU1383
ARM GAS  /tmp/ccTlkAzC.s 			page 150


 4534 0020 2C28     		cmp	r0, #44
 4535 0022 D8BF     		it	le
 4536 0024 0021     		movle	r1, #0
 4537 0026 2046     		mov	r0, r4
 4538 0028 C8BF     		it	gt
 4539 002a 0121     		movgt	r1, #1
 4540              		.loc 1 2733 1 view .LVU1384
 4541 002c BDE81040 		pop	{r4, lr}
 4542              		.cfi_restore 14
 4543              		.cfi_restore 4
 4544              		.cfi_def_cfa_offset 0
 4545              	.LVL484:
2732:src/display.c **** }
 4546              		.loc 1 2732 2 view .LVU1385
 4547 0030 FFF7FEBF 		b	set_status_sized
 4548              	.LVL485:
 4549              	.L433:
2732:src/display.c **** }
 4550              		.loc 1 2732 2 view .LVU1386
 4551              		.align	2
 4552              	.L432:
 4553 0034 00000000 		.word	StateWhileOn
 4554              		.cfi_endproc
 4555              	.LFE40:
 4557              		.section	.text.set_x_dn,"ax",%progbits
 4558              		.align	1
 4559              		.p2align 2,,3
 4560              		.global	set_x_dn
 4561              		.syntax unified
 4562              		.thumb
 4563              		.thumb_func
 4564              		.fpu fpv4-sp-d16
 4566              	set_x_dn:
 4567              	.LVL486:
 4568              	.LFB27:
1563:src/display.c **** 	char x[50], *obp = x;
 4569              		.loc 1 1563 61 is_stmt 1 view -0
 4570              		.cfi_startproc
 4571              		@ args = 0, pretend = 0, frame = 136
 4572              		@ frame_needed = 0, uses_anonymous_args = 0
1564:src/display.c **** 	int odig = 0;
 4573              		.loc 1 1564 2 view .LVU1388
1563:src/display.c **** 	char x[50], *obp = x;
 4574              		.loc 1 1563 61 is_stmt 0 view .LVU1389
 4575 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4576              		.cfi_def_cfa_offset 36
 4577              		.cfi_offset 4, -36
 4578              		.cfi_offset 5, -32
 4579              		.cfi_offset 6, -28
 4580              		.cfi_offset 7, -24
 4581              		.cfi_offset 8, -20
 4582              		.cfi_offset 9, -16
 4583              		.cfi_offset 10, -12
 4584              		.cfi_offset 11, -8
 4585              		.cfi_offset 14, -4
1580:src/display.c **** 	int mode = UState.dispmode;
 4586              		.loc 1 1580 17 view .LVU1390
ARM GAS  /tmp/ccTlkAzC.s 			page 151


 4587 0004 C84B     		ldr	r3, .L669
1563:src/display.c **** 	char x[50], *obp = x;
 4588              		.loc 1 1563 61 view .LVU1391
 4589 0006 A3B0     		sub	sp, sp, #140
 4590              		.cfi_def_cfa_offset 176
 4591              	.LVL487:
1565:src/display.c **** 	int show_exp = 0;
 4592              		.loc 1 1565 2 is_stmt 1 view .LVU1392
1566:src/display.c **** 	int j;
 4593              		.loc 1 1566 2 view .LVU1393
1567:src/display.c **** 	char mantissa[64];
 4594              		.loc 1 1567 2 view .LVU1394
1568:src/display.c **** 	int exp = 0;
 4595              		.loc 1 1568 2 view .LVU1395
1569:src/display.c **** 	char *p = mantissa;
 4596              		.loc 1 1569 2 view .LVU1396
1570:src/display.c **** 	char *r;
 4597              		.loc 1 1570 2 view .LVU1397
1571:src/display.c **** 	const char *q;
 4598              		.loc 1 1571 2 view .LVU1398
1572:src/display.c **** 	int count, i;
 4599              		.loc 1 1572 2 view .LVU1399
1573:src/display.c **** 	int extra_digits = 0;
 4600              		.loc 1 1573 2 view .LVU1400
1574:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4601              		.loc 1 1574 2 view .LVU1401
1580:src/display.c **** 	int mode = UState.dispmode;
 4602              		.loc 1 1580 2 view .LVU1402
1580:src/display.c **** 	int mode = UState.dispmode;
 4603              		.loc 1 1580 17 is_stmt 0 view .LVU1403
 4604 0008 93F8E757 		ldrb	r5, [r3, #2023]	@ zero_extendqisi2
1581:src/display.c **** #endif
 4605              		.loc 1 1581 19 view .LVU1404
 4606 000c 93F8E677 		ldrb	r7, [r3, #2022]	@ zero_extendqisi2
1563:src/display.c **** 	char x[50], *obp = x;
 4607              		.loc 1 1563 61 view .LVU1405
 4608 0010 0092     		str	r2, [sp]
 4609 0012 0C46     		mov	r4, r1
 4610 0014 0646     		mov	r6, r0
1580:src/display.c **** 	int mode = UState.dispmode;
 4611              		.loc 1 1580 17 view .LVU1406
 4612 0016 05F00F05 		and	r5, r5, #15
 4613              	.LVL488:
1581:src/display.c **** #endif
 4614              		.loc 1 1581 2 is_stmt 1 view .LVU1407
1581:src/display.c **** #endif
 4615              		.loc 1 1581 19 is_stmt 0 view .LVU1408
 4616 001a BF09     		lsrs	r7, r7, #6
 4617              	.LVL489:
1583:src/display.c **** 	int negative = 0;
 4618              		.loc 1 1583 2 is_stmt 1 view .LVU1409
1584:src/display.c **** 	int trimzeros = 0;
 4619              		.loc 1 1584 2 view .LVU1410
1585:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4620              		.loc 1 1585 2 view .LVU1411
1587:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
 4621              		.loc 1 1587 2 view .LVU1412
ARM GAS  /tmp/ccTlkAzC.s 			page 152


1596:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4622              		.loc 1 1596 2 view .LVU1413
 4623 001c FFF7FEFF 		bl	set_separator_decimal_modes
 4624              	.LVL490:
1598:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4625              		.loc 1 1598 2 view .LVU1414
1598:src/display.c **** 		if (!State2.smode && ! State2.cmplx) {
 4626              		.loc 1 1598 5 is_stmt 0 view .LVU1415
 4627 0020 002C     		cmp	r4, #0
 4628 0022 00F08B81 		beq	.L435
 4629              	.L438:
1623:src/display.c **** 		return;
 4630              		.loc 1 1623 2 is_stmt 1 view .LVU1416
1623:src/display.c **** 		return;
 4631              		.loc 1 1623 6 is_stmt 0 view .LVU1417
 4632 0026 2146     		mov	r1, r4
 4633 0028 06F10800 		add	r0, r6, #8
 4634 002c FFF7FEFF 		bl	check_special_dn.isra.0
 4635              	.LVL491:
1623:src/display.c **** 		return;
 4636              		.loc 1 1623 5 view .LVU1418
 4637 0030 8346     		mov	fp, r0
 4638 0032 0028     		cmp	r0, #0
 4639 0034 40F06F81 		bne	.L434
1626:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4640              		.loc 1 1626 2 is_stmt 1 view .LVU1419
1626:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4641              		.loc 1 1626 12 is_stmt 0 view .LVU1420
 4642 0038 DFF8F092 		ldr	r9, .L669+4
1626:src/display.c **** 		decNumberNormalize(z, z, &Ctx);
 4643              		.loc 1 1626 5 view .LVU1421
 4644 003c 99F81130 		ldrb	r3, [r9, #17]	@ zero_extendqisi2
 4645 0040 012B     		cmp	r3, #1
 4646 0042 00F0AC82 		beq	.L650
1569:src/display.c **** 	char *p = mantissa;
 4647              		.loc 1 1569 6 view .LVU1422
 4648 0046 0190     		str	r0, [sp, #4]
 4649              	.LVL492:
 4650              	.L441:
1632:src/display.c **** 
 4651              		.loc 1 1632 2 is_stmt 1 view .LVU1423
 4652 0048 0DF11408 		add	r8, sp, #20
 4653              	.LVL493:
1632:src/display.c **** 
 4654              		.loc 1 1632 2 is_stmt 0 view .LVU1424
 4655 004c 4046     		mov	r0, r8
 4656 004e 3222     		movs	r2, #50
 4657 0050 0021     		movs	r1, #0
 4658 0052 FFF7FEFF 		bl	xset
 4659              	.LVL494:
1634:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4660              		.loc 1 1634 2 is_stmt 1 view .LVU1425
1634:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4661              		.loc 1 1634 6 is_stmt 0 view .LVU1426
 4662 0056 3046     		mov	r0, r6
 4663 0058 FFF7FEFF 		bl	dn_eq0
 4664              	.LVL495:
ARM GAS  /tmp/ccTlkAzC.s 			page 153


1634:src/display.c **** 		if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4665              		.loc 1 1634 5 view .LVU1427
 4666 005c 0028     		cmp	r0, #0
 4667 005e 00F05D81 		beq	.L442
1635:src/display.c **** 			x[0] = '-';
 4668              		.loc 1 1635 3 is_stmt 1 view .LVU1428
1635:src/display.c **** 			x[0] = '-';
 4669              		.loc 1 1635 6 is_stmt 0 view .LVU1429
 4670 0062 96F90830 		ldrsb	r3, [r6, #8]
 4671 0066 002B     		cmp	r3, #0
 4672 0068 C0F2BE82 		blt	.L651
 4673              	.L443:
1639:src/display.c **** 	} else
 4674              		.loc 1 1639 4 is_stmt 1 view .LVU1430
1639:src/display.c **** 	} else
 4675              		.loc 1 1639 9 is_stmt 0 view .LVU1431
 4676 006c 3023     		movs	r3, #48
 4677 006e 8DF81430 		strb	r3, [sp, #20]
 4678              	.L444:
1643:src/display.c **** 		show_x(x, exp);
 4679              		.loc 1 1643 2 is_stmt 1 view .LVU1432
1643:src/display.c **** 		show_x(x, exp);
 4680              		.loc 1 1643 12 is_stmt 0 view .LVU1433
 4681 0072 99F811A0 		ldrb	r10, [r9, #17]	@ zero_extendqisi2
1643:src/display.c **** 		show_x(x, exp);
 4682              		.loc 1 1643 5 view .LVU1434
 4683 0076 BAF1010F 		cmp	r10, #1
 4684 007a 00F0ED82 		beq	.L652
1666:src/display.c **** 		mode = std_round_fix(z);
 4685              		.loc 1 1666 2 is_stmt 1 view .LVU1435
1666:src/display.c **** 		mode = std_round_fix(z);
 4686              		.loc 1 1666 5 is_stmt 0 view .LVU1436
 4687 007e 002F     		cmp	r7, #0
 4688 0080 00F0FA81 		beq	.L653
1670:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4689              		.loc 1 1670 19 view .LVU1437
 4690 0084 009B     		ldr	r3, [sp]
 4691 0086 1B68     		ldr	r3, [r3]
1670:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4692              		.loc 1 1670 12 view .LVU1438
 4693 0088 AB42     		cmp	r3, r5
1580:src/display.c **** 	int mode = UState.dispmode;
 4694              		.loc 1 1580 6 view .LVU1439
 4695 008a AA46     		mov	r10, r5
1670:src/display.c **** 		// Do not allow non ALL modes to produce more digits than we're being asked to display.
 4696              		.loc 1 1670 9 is_stmt 1 view .LVU1440
1672:src/display.c **** #endif
 4697              		.loc 1 1672 3 view .LVU1441
1672:src/display.c **** #endif
 4698              		.loc 1 1672 6 is_stmt 0 view .LVU1442
 4699 008c D8BF     		it	le
 4700 008e 03F1FF3A 		addle	r10, r3, #-1
1585:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4701              		.loc 1 1585 6 view .LVU1443
 4702 0092 0023     		movs	r3, #0
 4703 0094 0193     		str	r3, [sp, #4]
 4704              	.LVL496:
ARM GAS  /tmp/ccTlkAzC.s 			page 154


 4705              	.L457:
1675:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4706              		.loc 1 1675 2 is_stmt 1 view .LVU1444
 4707 0096 0DF14809 		add	r9, sp, #72
 4708              	.LVL497:
1675:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4709              		.loc 1 1675 2 is_stmt 0 view .LVU1445
 4710 009a 3021     		movs	r1, #48
 4711 009c 4846     		mov	r0, r9
 4712 009e 3F22     		movs	r2, #63
 4713 00a0 FFF7FEFF 		bl	xset
 4714              	.LVL498:
1676:src/display.c **** 
 4715              		.loc 1 1676 2 is_stmt 1 view .LVU1446
1676:src/display.c **** 
 4716              		.loc 1 1676 31 is_stmt 0 view .LVU1447
 4717 00a4 0023     		movs	r3, #0
1678:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4718              		.loc 1 1678 6 view .LVU1448
 4719 00a6 4521     		movs	r1, #69
 4720 00a8 4046     		mov	r0, r8
1676:src/display.c **** 
 4721              		.loc 1 1676 31 view .LVU1449
 4722 00aa 8DF88730 		strb	r3, [sp, #135]
1678:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4723              		.loc 1 1678 2 is_stmt 1 view .LVU1450
1678:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4724              		.loc 1 1678 6 is_stmt 0 view .LVU1451
 4725 00ae FFF7FEFF 		bl	find_char
 4726              	.LVL499:
1687:src/display.c **** 	else exp = s_to_i(q+1);
 4727              		.loc 1 1687 2 is_stmt 1 view .LVU1452
1687:src/display.c **** 	else exp = s_to_i(q+1);
 4728              		.loc 1 1687 5 is_stmt 0 view .LVU1453
 4729 00b2 0028     		cmp	r0, #0
 4730 00b4 00F05C81 		beq	.L558
1688:src/display.c **** #endif
 4731              		.loc 1 1688 7 is_stmt 1 view .LVU1454
1688:src/display.c **** #endif
 4732              		.loc 1 1688 13 is_stmt 0 view .LVU1455
 4733 00b8 0130     		adds	r0, r0, #1
 4734              	.LVL500:
1688:src/display.c **** #endif
 4735              		.loc 1 1688 13 view .LVU1456
 4736 00ba FFF7FEFF 		bl	s_to_i
 4737              	.LVL501:
1688:src/display.c **** #endif
 4738              		.loc 1 1688 13 view .LVU1457
 4739 00be 0546     		mov	r5, r0
 4740              	.LVL502:
 4741              	.L458:
1692:src/display.c **** 	if (!res) {
 4742              		.loc 1 1692 2 is_stmt 1 view .LVU1458
1692:src/display.c **** 	if (!res) {
 4743              		.loc 1 1692 12 view .LVU1459
1692:src/display.c **** 	if (!res) {
 4744              		.loc 1 1692 2 is_stmt 0 view .LVU1460
ARM GAS  /tmp/ccTlkAzC.s 			page 155


 4745 00c0 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 4746 00c4 202B     		cmp	r3, #32
1692:src/display.c **** 	if (!res) {
 4747              		.loc 1 1692 8 view .LVU1461
 4748 00c6 4646     		mov	r6, r8
 4749              	.LVL503:
1692:src/display.c **** 	if (!res) {
 4750              		.loc 1 1692 2 view .LVU1462
 4751 00c8 03D1     		bne	.L459
 4752              	.LVL504:
 4753              	.L460:
1692:src/display.c **** 	if (!res) {
 4754              		.loc 1 1692 27 is_stmt 1 discriminator 3 view .LVU1463
1692:src/display.c **** 	if (!res) {
 4755              		.loc 1 1692 23 discriminator 3 view .LVU1464
1692:src/display.c **** 	if (!res) {
 4756              		.loc 1 1692 12 discriminator 3 view .LVU1465
1692:src/display.c **** 	if (!res) {
 4757              		.loc 1 1692 2 is_stmt 0 discriminator 3 view .LVU1466
 4758 00ca 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4759              	.LVL505:
1692:src/display.c **** 	if (!res) {
 4760              		.loc 1 1692 2 discriminator 3 view .LVU1467
 4761 00ce 202B     		cmp	r3, #32
 4762 00d0 FBD0     		beq	.L460
 4763              	.LVL506:
 4764              	.L459:
1693:src/display.c **** 		CLR_EXP_SIGN;
 4765              		.loc 1 1693 2 is_stmt 1 view .LVU1468
1693:src/display.c **** 		CLR_EXP_SIGN;
 4766              		.loc 1 1693 5 is_stmt 0 view .LVU1469
 4767 00d2 002C     		cmp	r4, #0
 4768 00d4 00F09382 		beq	.L654
 4769              	.L461:
1697:src/display.c **** 		negative = 1;
 4770              		.loc 1 1697 2 is_stmt 1 view .LVU1470
1697:src/display.c **** 		negative = 1;
 4771              		.loc 1 1697 6 is_stmt 0 view .LVU1471
 4772 00d8 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1697:src/display.c **** 		negative = 1;
 4773              		.loc 1 1697 5 view .LVU1472
 4774 00da 2D2B     		cmp	r3, #45
 4775 00dc 00F0C781 		beq	.L655
1700:src/display.c **** 		q++;
 4776              		.loc 1 1700 9 is_stmt 1 view .LVU1473
1700:src/display.c **** 		q++;
 4777              		.loc 1 1700 12 is_stmt 0 view .LVU1474
 4778 00e0 2B2B     		cmp	r3, #43
 4779 00e2 00F06B82 		beq	.L656
1584:src/display.c **** 	int trimzeros = 0;
 4780              		.loc 1 1584 6 view .LVU1475
 4781 00e6 4FF0000E 		mov	lr, #0
 4782              	.LVL507:
 4783              	.L463:
1702:src/display.c **** 	if (*q == '.') {
 4784              		.loc 1 1702 9 is_stmt 1 discriminator 1 view .LVU1476
1702:src/display.c **** 	if (*q == '.') {
ARM GAS  /tmp/ccTlkAzC.s 			page 156


 4785              		.loc 1 1702 2 is_stmt 0 discriminator 1 view .LVU1477
 4786 00ea 302B     		cmp	r3, #48
 4787 00ec 03D1     		bne	.L465
 4788              	.LVL508:
 4789              	.L464:
1702:src/display.c **** 	if (*q == '.') {
 4790              		.loc 1 1702 24 is_stmt 1 discriminator 2 view .LVU1478
1702:src/display.c **** 	if (*q == '.') {
 4791              		.loc 1 1702 20 discriminator 2 view .LVU1479
1702:src/display.c **** 	if (*q == '.') {
 4792              		.loc 1 1702 9 discriminator 2 view .LVU1480
 4793 00ee 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 4794              	.LVL509:
1702:src/display.c **** 	if (*q == '.') {
 4795              		.loc 1 1702 2 is_stmt 0 discriminator 2 view .LVU1481
 4796 00f2 302B     		cmp	r3, #48
 4797 00f4 FBD0     		beq	.L464
 4798              	.LVL510:
 4799              	.L465:
1703:src/display.c **** 		do
 4800              		.loc 1 1703 2 is_stmt 1 view .LVU1482
1703:src/display.c **** 		do
 4801              		.loc 1 1703 5 is_stmt 0 view .LVU1483
 4802 00f6 2E2B     		cmp	r3, #46
 4803 00f8 00F0A381 		beq	.L657
1710:src/display.c **** 			*p++ = *q++;
 4804              		.loc 1 1710 3 is_stmt 1 view .LVU1484
1710:src/display.c **** 			*p++ = *q++;
 4805              		.loc 1 1710 6 is_stmt 0 view .LVU1485
 4806 00fc A3F13002 		sub	r2, r3, #48
 4807 0100 092A     		cmp	r2, #9
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4808              		.loc 1 1711 4 is_stmt 1 view .LVU1486
 4809              	.LVL511:
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4810              		.loc 1 1711 13 is_stmt 0 view .LVU1487
 4811 0102 9CBF     		itt	ls
 4812 0104 0136     		addls	r6, r6, #1
 4813              	.LVL512:
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4814              		.loc 1 1711 9 view .LVU1488
 4815 0106 8DF84830 		strbls	r3, [sp, #72]
1712:src/display.c **** 			*p++ = *q++;
 4816              		.loc 1 1712 10 view .LVU1489
 4817 010a 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
1712:src/display.c **** 			*p++ = *q++;
 4818              		.loc 1 1712 9 view .LVU1490
 4819 010c A2F13003 		sub	r3, r2, #48
1711:src/display.c **** 		while (*q >= '0' && *q <= '9') {
 4820              		.loc 1 1711 6 view .LVU1491
 4821 0110 94BF     		ite	ls
 4822 0112 0DF14901 		addls	r1, sp, #73
1570:src/display.c **** 	char *r;
 4823              		.loc 1 1570 8 view .LVU1492
 4824 0116 4946     		movhi	r1, r9
 4825              	.LVL513:
1712:src/display.c **** 			*p++ = *q++;
ARM GAS  /tmp/ccTlkAzC.s 			page 157


 4826              		.loc 1 1712 9 is_stmt 1 view .LVU1493
 4827 0118 092B     		cmp	r3, #9
 4828 011a 0CD8     		bhi	.L471
 4829 011c A81B     		subs	r0, r5, r6
 4830 011e 731C     		adds	r3, r6, #1
 4831              	.L472:
 4832              	.LVL514:
1713:src/display.c **** 			exp++;
 4833              		.loc 1 1713 4 view .LVU1494
1713:src/display.c **** 			exp++;
 4834              		.loc 1 1713 9 is_stmt 0 view .LVU1495
 4835 0120 01F8012B 		strb	r2, [r1], #1
 4836              	.LVL515:
1713:src/display.c **** 			exp++;
 4837              		.loc 1 1713 13 view .LVU1496
 4838 0124 1E46     		mov	r6, r3
 4839              	.LVL516:
1714:src/display.c **** 		}
 4840              		.loc 1 1714 4 is_stmt 1 view .LVU1497
 4841 0126 C518     		adds	r5, r0, r3
 4842              	.LVL517:
1712:src/display.c **** 			*p++ = *q++;
 4843              		.loc 1 1712 9 view .LVU1498
1712:src/display.c **** 			*p++ = *q++;
 4844              		.loc 1 1712 10 is_stmt 0 view .LVU1499
 4845 0128 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4846              	.LVL518:
1712:src/display.c **** 			*p++ = *q++;
 4847              		.loc 1 1712 9 view .LVU1500
 4848 012c A2F1300C 		sub	ip, r2, #48
 4849 0130 BCF1090F 		cmp	ip, #9
 4850 0134 F4D9     		bls	.L472
 4851              	.LVL519:
 4852              	.L471:
1716:src/display.c **** 			q++;
 4853              		.loc 1 1716 3 is_stmt 1 view .LVU1501
1716:src/display.c **** 			q++;
 4854              		.loc 1 1716 6 is_stmt 0 view .LVU1502
 4855 0136 2E2A     		cmp	r2, #46
 4856 0138 00F04582 		beq	.L658
 4857              	.LVL520:
 4858              	.L468:
1723:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4859              		.loc 1 1723 2 is_stmt 1 view .LVU1503
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4860              		.loc 1 1724 11 is_stmt 0 view .LVU1504
 4861 013c 009B     		ldr	r3, [sp]
1723:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4862              		.loc 1 1723 5 view .LVU1505
 4863 013e 012F     		cmp	r7, #1
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4864              		.loc 1 1724 11 view .LVU1506
 4865 0140 1E68     		ldr	r6, [r3]
1723:src/display.c **** 		if (exp > (*display_digits - 1) || exp < -dd)
 4866              		.loc 1 1723 5 view .LVU1507
 4867 0142 00F06D81 		beq	.L659
 4868 0146 0022     		movs	r2, #0
ARM GAS  /tmp/ccTlkAzC.s 			page 158


 4869              	.LVL521:
 4870              	.L474:
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4871              		.loc 1 1737 2 is_stmt 1 view .LVU1508
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4872              		.loc 1 1737 20 is_stmt 0 view .LVU1509
 4873 0148 5244     		add	r2, r2, r10
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4874              		.loc 1 1737 35 view .LVU1510
 4875 014a 501C     		adds	r0, r2, #1
1737:src/display.c **** 	if (*p >= '5') {	// Round up
 4876              		.loc 1 1737 4 view .LVU1511
 4877 014c 09EB0003 		add	r3, r9, r0
 4878              	.LVL522:
1738:src/display.c **** 		*p = '0';
 4879              		.loc 1 1738 2 is_stmt 1 view .LVU1512
1738:src/display.c **** 		*p = '0';
 4880              		.loc 1 1738 6 is_stmt 0 view .LVU1513
 4881 0150 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
1738:src/display.c **** 		*p = '0';
 4882              		.loc 1 1738 5 view .LVU1514
 4883 0154 3429     		cmp	r1, #52
 4884 0156 21D9     		bls	.L478
1739:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4885              		.loc 1 1739 3 is_stmt 1 view .LVU1515
1739:src/display.c **** 		for (r = mantissa; *r == '9'; r++);
 4886              		.loc 1 1739 6 is_stmt 0 view .LVU1516
 4887 0158 3021     		movs	r1, #48
 4888 015a 09F80010 		strb	r1, [r9, r0]
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4889              		.loc 1 1740 3 is_stmt 1 view .LVU1517
 4890              	.LVL523:
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4891              		.loc 1 1740 22 view .LVU1518
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4892              		.loc 1 1740 3 is_stmt 0 view .LVU1519
 4893 015e 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 4894 0162 3929     		cmp	r1, #57
 4895 0164 40F0A383 		bne	.L479
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4896              		.loc 1 1740 10 view .LVU1520
 4897 0168 4946     		mov	r1, r9
 4898              	.LVL524:
 4899              	.L480:
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4900              		.loc 1 1740 37 is_stmt 1 discriminator 3 view .LVU1521
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4901              		.loc 1 1740 33 discriminator 3 view .LVU1522
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4902              		.loc 1 1740 22 discriminator 3 view .LVU1523
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4903              		.loc 1 1740 3 is_stmt 0 discriminator 3 view .LVU1524
 4904 016a 11F801CF 		ldrb	ip, [r1, #1]!	@ zero_extendqisi2
 4905              	.LVL525:
1740:src/display.c **** 		if (r == p) {   // Special case 9.9999999
 4906              		.loc 1 1740 3 discriminator 3 view .LVU1525
 4907 016e BCF1390F 		cmp	ip, #57
ARM GAS  /tmp/ccTlkAzC.s 			page 159


 4908 0172 FAD0     		beq	.L480
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4909              		.loc 1 1741 3 is_stmt 1 view .LVU1526
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 4910              		.loc 1 1741 6 is_stmt 0 view .LVU1527
 4911 0174 8B42     		cmp	r3, r1
 4912 0176 00F0FD80 		beq	.L660
 4913              	.LVL526:
 4914              	.L550:
1750:src/display.c **** 				*p = '0';
 4915              		.loc 1 1750 10 is_stmt 1 view .LVU1528
1750:src/display.c **** 				*p = '0';
 4916              		.loc 1 1750 11 is_stmt 0 view .LVU1529
 4917 017a 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
1750:src/display.c **** 				*p = '0';
 4918              		.loc 1 1750 10 view .LVU1530
 4919 017e 3929     		cmp	r1, #57
 4920 0180 4A44     		add	r2, r2, r9
 4921              	.LVL527:
1750:src/display.c **** 				*p = '0';
 4922              		.loc 1 1750 10 view .LVU1531
 4923 0182 07D1     		bne	.L483
1751:src/display.c **** 			(*p)++;
 4924              		.loc 1 1751 8 view .LVU1532
 4925 0184 4FF0300C 		mov	ip, #48
 4926              	.L482:
1751:src/display.c **** 			(*p)++;
 4927              		.loc 1 1751 5 is_stmt 1 view .LVU1533
1751:src/display.c **** 			(*p)++;
 4928              		.loc 1 1751 8 is_stmt 0 view .LVU1534
 4929 0188 82F800C0 		strb	ip, [r2]
1750:src/display.c **** 				*p = '0';
 4930              		.loc 1 1750 10 is_stmt 1 view .LVU1535
 4931              	.LVL528:
1750:src/display.c **** 				*p = '0';
 4932              		.loc 1 1750 11 is_stmt 0 view .LVU1536
 4933 018c 12F8011D 		ldrb	r1, [r2, #-1]!	@ zero_extendqisi2
 4934              	.LVL529:
1750:src/display.c **** 				*p = '0';
 4935              		.loc 1 1750 10 view .LVU1537
 4936 0190 3929     		cmp	r1, #57
 4937 0192 F9D0     		beq	.L482
 4938              	.L483:
1752:src/display.c **** 		}
 4939              		.loc 1 1752 4 is_stmt 1 view .LVU1538
1752:src/display.c **** 		}
 4940              		.loc 1 1752 8 is_stmt 0 view .LVU1539
 4941 0194 0131     		adds	r1, r1, #1
 4942 0196 1170     		strb	r1, [r2]
 4943              	.LVL530:
 4944              	.L647:
1752:src/display.c **** 		}
 4945              		.loc 1 1752 8 view .LVU1540
 4946 0198 19F80010 		ldrb	r1, [r9, r0]	@ zero_extendqisi2
 4947              	.L478:
1757:src/display.c **** 
 4948              		.loc 1 1757 2 is_stmt 1 view .LVU1541
ARM GAS  /tmp/ccTlkAzC.s 			page 160


 4949              	.LVL531:
1757:src/display.c **** 
 4950              		.loc 1 1757 45 view .LVU1542
1757:src/display.c **** 
 4951              		.loc 1 1757 2 is_stmt 0 view .LVU1543
 4952 019c 29B1     		cbz	r1, .L489
 4953              	.LVL532:
 4954              	.L549:
1757:src/display.c **** 
 4955              		.loc 1 1757 62 view .LVU1544
 4956 019e 3021     		movs	r1, #48
 4957              	.L490:
1757:src/display.c **** 
 4958              		.loc 1 1757 68 is_stmt 1 discriminator 3 view .LVU1545
1757:src/display.c **** 
 4959              		.loc 1 1757 57 discriminator 3 view .LVU1546
 4960              	.LVL533:
1757:src/display.c **** 
 4961              		.loc 1 1757 62 is_stmt 0 discriminator 3 view .LVU1547
 4962 01a0 03F8011B 		strb	r1, [r3], #1
 4963              	.LVL534:
1757:src/display.c **** 
 4964              		.loc 1 1757 45 is_stmt 1 discriminator 3 view .LVU1548
1757:src/display.c **** 
 4965              		.loc 1 1757 2 is_stmt 0 discriminator 3 view .LVU1549
 4966 01a4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4967 01a6 002A     		cmp	r2, #0
 4968 01a8 FAD1     		bne	.L490
 4969              	.L489:
1759:src/display.c **** 	switch (mode) {
 4970              		.loc 1 1759 2 is_stmt 1 view .LVU1550
 4971              	.LVL535:
1760:src/display.c **** 	default:
 4972              		.loc 1 1760 2 view .LVU1551
 4973 01aa 022F     		cmp	r7, #2
 4974 01ac 5AD0     		beq	.L572
 4975 01ae 032F     		cmp	r7, #3
 4976 01b0 00F00381 		beq	.L492
 4977 01b4 012F     		cmp	r7, #1
 4978 01b6 00F0B381 		beq	.L493
1763:src/display.c **** 		if (count != *display_digits)
 4979              		.loc 1 1763 3 view .LVU1552
 4980              	.LVL536:
1763:src/display.c **** 		if (count != *display_digits)
 4981              		.loc 1 1763 33 view .LVU1553
1763:src/display.c **** 		if (count != *display_digits)
 4982              		.loc 1 1763 41 is_stmt 0 view .LVU1554
 4983 01ba 22AB     		add	r3, sp, #136
 4984 01bc 3344     		add	r3, r3, r6
1763:src/display.c **** 		if (count != *display_digits)
 4985              		.loc 1 1763 3 view .LVU1555
 4986 01be 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 4987 01c2 302B     		cmp	r3, #48
 4988 01c4 40F06483 		bne	.L566
 4989 01c8 711E     		subs	r1, r6, #1
 4990 01ca 4944     		add	r1, r1, r9
1763:src/display.c **** 		if (count != *display_digits)
ARM GAS  /tmp/ccTlkAzC.s 			page 161


 4991              		.loc 1 1763 14 view .LVU1556
 4992 01cc 3346     		mov	r3, r6
 4993              	.LVL537:
 4994              	.L495:
1763:src/display.c **** 		if (count != *display_digits)
 4995              		.loc 1 1763 65 is_stmt 1 discriminator 3 view .LVU1557
1763:src/display.c **** 		if (count != *display_digits)
 4996              		.loc 1 1763 57 discriminator 3 view .LVU1558
1763:src/display.c **** 		if (count != *display_digits)
 4997              		.loc 1 1763 41 is_stmt 0 discriminator 3 view .LVU1559
 4998 01ce 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
1763:src/display.c **** 		if (count != *display_digits)
 4999              		.loc 1 1763 3 discriminator 3 view .LVU1560
 5000 01d2 3028     		cmp	r0, #48
 5001 01d4 1A46     		mov	r2, r3
1763:src/display.c **** 		if (count != *display_digits)
 5002              		.loc 1 1763 62 discriminator 3 view .LVU1561
 5003 01d6 03F1FF33 		add	r3, r3, #-1
 5004              	.LVL538:
1763:src/display.c **** 		if (count != *display_digits)
 5005              		.loc 1 1763 33 is_stmt 1 discriminator 3 view .LVU1562
1763:src/display.c **** 		if (count != *display_digits)
 5006              		.loc 1 1763 3 is_stmt 0 discriminator 3 view .LVU1563
 5007 01da F8D0     		beq	.L495
1764:src/display.c **** 			count++;
 5008              		.loc 1 1764 3 is_stmt 1 view .LVU1564
1764:src/display.c **** 			count++;
 5009              		.loc 1 1764 6 is_stmt 0 view .LVU1565
 5010 01dc 9E42     		cmp	r6, r3
 5011 01de 08BF     		it	eq
 5012 01e0 1A46     		moveq	r2, r3
 5013              	.LVL539:
 5014              	.L494:
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5015              		.loc 1 1767 3 is_stmt 1 view .LVU1566
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5016              		.loc 1 1767 6 is_stmt 0 view .LVU1567
 5017 01e2 B542     		cmp	r5, r6
 5018 01e4 80F20281 		bge	.L496
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5019              		.loc 1 1767 46 discriminator 1 view .LVU1568
 5020 01e8 931B     		subs	r3, r2, r6
1767:src/display.c **** 			switch ((exp % 3) * UState.fixeng) {
 5021              		.loc 1 1767 30 discriminator 1 view .LVU1569
 5022 01ea AB42     		cmp	r3, r5
 5023 01ec 00F3FE80 		bgt	.L496
1792:src/display.c **** 			for(i=0; i<=exp; i++) {
 5024              		.loc 1 1792 10 is_stmt 1 view .LVU1570
1792:src/display.c **** 			for(i=0; i<=exp; i++) {
 5025              		.loc 1 1792 13 is_stmt 0 view .LVU1571
 5026 01f0 002D     		cmp	r5, #0
 5027 01f2 C0F27283 		blt	.L504
 5028 01f6 6B1C     		adds	r3, r5, #1
1794:src/display.c **** 					*obp++ = ',';
 5029              		.loc 1 1794 28 view .LVU1572
 5030 01f8 DFF834A1 		ldr	r10, .L669+8
 5031 01fc 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccTlkAzC.s 			page 162


 5032 01fe 09EB0300 		add	r0, r9, r3
1759:src/display.c **** 	switch (mode) {
 5033              		.loc 1 1759 4 view .LVU1573
 5034 0202 CC46     		mov	ip, r9
1564:src/display.c **** 	int odig = 0;
 5035              		.loc 1 1564 15 view .LVU1574
 5036 0204 4146     		mov	r1, r8
 5037 0206 0192     		str	r2, [sp, #4]
 5038              	.LVL540:
1564:src/display.c **** 	int odig = 0;
 5039              		.loc 1 1564 15 view .LVU1575
 5040 0208 05E0     		b	.L505
 5041              	.LVL541:
 5042              	.L508:
1795:src/display.c **** 				*obp++ = *p++;
 5043              		.loc 1 1795 6 is_stmt 1 view .LVU1576
1794:src/display.c **** 					*obp++ = ',';
 5044              		.loc 1 1794 15 is_stmt 0 view .LVU1577
 5045 020a 022F     		cmp	r7, #2
1795:src/display.c **** 				*obp++ = *p++;
 5046              		.loc 1 1795 13 view .LVU1578
 5047 020c 05BF     		ittet	eq
 5048 020e 2C23     		moveq	r3, #44
 5049 0210 4B70     		strbeq	r3, [r1, #1]
1796:src/display.c **** 				odig++;
 5050              		.loc 1 1796 9 view .LVU1579
 5051 0212 0131     		addne	r1, r1, #1
 5052              	.LVL542:
1795:src/display.c **** 				*obp++ = *p++;
 5053              		.loc 1 1795 10 view .LVU1580
 5054 0214 0231     		addeq	r1, r1, #2
 5055              	.LVL543:
 5056              	.L505:
1796:src/display.c **** 				odig++;
 5057              		.loc 1 1796 5 is_stmt 1 discriminator 2 view .LVU1581
1796:src/display.c **** 				odig++;
 5058              		.loc 1 1796 12 is_stmt 0 discriminator 2 view .LVU1582
 5059 0216 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5060              	.LVL544:
1794:src/display.c **** 					*obp++ = ',';
 5061              		.loc 1 1794 5 is_stmt 1 discriminator 2 view .LVU1583
1796:src/display.c **** 				odig++;
 5062              		.loc 1 1796 12 is_stmt 0 discriminator 2 view .LVU1584
 5063 021a 0B70     		strb	r3, [r1]
1797:src/display.c **** 			}
 5064              		.loc 1 1797 5 is_stmt 1 discriminator 2 view .LVU1585
 5065              	.LVL545:
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5066              		.loc 1 1793 21 discriminator 2 view .LVU1586
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5067              		.loc 1 1793 13 discriminator 2 view .LVU1587
1794:src/display.c **** 					*obp++ = ',';
 5068              		.loc 1 1794 28 is_stmt 0 discriminator 2 view .LVU1588
 5069 021c A9EB0C03 		sub	r3, r9, ip
 5070 0220 2B44     		add	r3, r3, r5
 5071 0222 8AFB0327 		smull	r2, r7, r10, r3
 5072 0226 A7EBE377 		sub	r7, r7, r3, asr #31
ARM GAS  /tmp/ccTlkAzC.s 			page 163


 5073 022a 07EB4707 		add	r7, r7, r7, lsl #1
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5074              		.loc 1 1793 4 discriminator 2 view .LVU1589
 5075 022e 6045     		cmp	r0, ip
1794:src/display.c **** 					*obp++ = ',';
 5076              		.loc 1 1794 28 discriminator 2 view .LVU1590
 5077 0230 A3EB0707 		sub	r7, r3, r7
1793:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5078              		.loc 1 1793 4 discriminator 2 view .LVU1591
 5079 0234 E9D1     		bne	.L508
 5080 0236 019A     		ldr	r2, [sp, #4]
 5081 0238 029F     		ldr	r7, [sp, #8]
1799:src/display.c **** 			if (count > (exp + 1)) {
 5082              		.loc 1 1799 4 is_stmt 1 view .LVU1592
1799:src/display.c **** 			if (count > (exp + 1)) {
 5083              		.loc 1 1799 11 is_stmt 0 view .LVU1593
 5084 023a 2E23     		movs	r3, #46
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5085              		.loc 1 1800 7 view .LVU1594
 5086 023c BA42     		cmp	r2, r7
1799:src/display.c **** 			if (count > (exp + 1)) {
 5087              		.loc 1 1799 11 view .LVU1595
 5088 023e 4B70     		strb	r3, [r1, #1]
1799:src/display.c **** 			if (count > (exp + 1)) {
 5089              		.loc 1 1799 8 view .LVU1596
 5090 0240 01F10203 		add	r3, r1, #2
 5091              	.LVL546:
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5092              		.loc 1 1800 4 is_stmt 1 view .LVU1597
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5093              		.loc 1 1800 7 is_stmt 0 view .LVU1598
 5094 0244 2BDD     		ble	.L502
 5095 0246 A2EB050C 		sub	ip, r2, r5
 5096              	.LVL547:
1800:src/display.c **** 				for (i=exp+1; i<count; i++) {
 5097              		.loc 1 1800 7 view .LVU1599
 5098 024a 8C44     		add	ip, ip, r1
 5099 024c 0131     		adds	r1, r1, #1
 5100              	.LVL548:
 5101              	.L509:
1802:src/display.c **** 					odig++;
 5102              		.loc 1 1802 6 is_stmt 1 discriminator 3 view .LVU1600
1802:src/display.c **** 					odig++;
 5103              		.loc 1 1802 13 is_stmt 0 discriminator 3 view .LVU1601
 5104 024e 10F8017B 		ldrb	r7, [r0], #1	@ zero_extendqisi2
 5105              	.LVL549:
1802:src/display.c **** 					odig++;
 5106              		.loc 1 1802 13 discriminator 3 view .LVU1602
 5107 0252 01F8017F 		strb	r7, [r1, #1]!
1803:src/display.c **** 				}
 5108              		.loc 1 1803 6 is_stmt 1 discriminator 3 view .LVU1603
1801:src/display.c **** 					*obp++ = *p++;
 5109              		.loc 1 1801 28 discriminator 3 view .LVU1604
1801:src/display.c **** 					*obp++ = *p++;
 5110              		.loc 1 1801 19 discriminator 3 view .LVU1605
1801:src/display.c **** 					*obp++ = *p++;
 5111              		.loc 1 1801 5 is_stmt 0 discriminator 3 view .LVU1606
ARM GAS  /tmp/ccTlkAzC.s 			page 164


 5112 0256 8C45     		cmp	ip, r1
 5113 0258 F9D1     		bne	.L509
 5114 025a E943     		mvns	r1, r5
 5115 025c 1144     		add	r1, r1, r2
 5116 025e 0B44     		add	r3, r3, r1
 5117              	.LVL550:
1803:src/display.c **** 				}
 5118              		.loc 1 1803 10 view .LVU1607
 5119 0260 1746     		mov	r7, r2
 5120 0262 1CE0     		b	.L502
 5121              	.LVL551:
 5122              	.L572:
1859:src/display.c **** 		case -1:
 5123              		.loc 1 1859 15 view .LVU1608
 5124 0264 0127     		movs	r7, #1
 5125              	.LVL552:
 5126              	.L648:
1859:src/display.c **** 		case -1:
 5127              		.loc 1 1859 15 view .LVU1609
 5128 0266 4146     		mov	r1, r8
 5129              	.LVL553:
 5130              	.L491:
1873:src/display.c **** 		};
 5131              		.loc 1 1873 4 is_stmt 1 view .LVU1610
1874:src/display.c **** 	// Falling through
 5132              		.loc 1 1874 4 view .LVU1611
1878:src/display.c **** 		odig++;
 5133              		.loc 1 1878 3 view .LVU1612
1878:src/display.c **** 		odig++;
 5134              		.loc 1 1878 14 is_stmt 0 view .LVU1613
 5135 0268 4A46     		mov	r2, r9
 5136              	.LVL554:
1878:src/display.c **** 		odig++;
 5137              		.loc 1 1878 10 view .LVU1614
 5138 026a 0B46     		mov	r3, r1
 5139 026c 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5140              	.LVL555:
1878:src/display.c **** 		odig++;
 5141              		.loc 1 1878 10 view .LVU1615
 5142 0270 03F8020B 		strb	r0, [r3], #2
1879:src/display.c **** 		*obp++ = '.';
 5143              		.loc 1 1879 3 is_stmt 1 view .LVU1616
1880:src/display.c **** 		dd--;
 5144              		.loc 1 1880 3 view .LVU1617
 5145              	.LVL556:
1882:src/display.c **** 			*obp++ = *p++;
 5146              		.loc 1 1882 9 is_stmt 0 view .LVU1618
 5147 0274 BAF1000F 		cmp	r10, #0
1880:src/display.c **** 		dd--;
 5148              		.loc 1 1880 10 view .LVU1619
 5149 0278 4FF02E00 		mov	r0, #46
 5150 027c 4870     		strb	r0, [r1, #1]
1881:src/display.c **** 		while (dd-- >= 0) {
 5151              		.loc 1 1881 3 is_stmt 1 view .LVU1620
1882:src/display.c **** 			*obp++ = *p++;
 5152              		.loc 1 1882 3 view .LVU1621
1882:src/display.c **** 			*obp++ = *p++;
ARM GAS  /tmp/ccTlkAzC.s 			page 165


 5153              		.loc 1 1882 9 view .LVU1622
1882:src/display.c **** 			*obp++ = *p++;
 5154              		.loc 1 1882 9 is_stmt 0 view .LVU1623
 5155 027e 40F30C83 		ble	.L569
1882:src/display.c **** 			*obp++ = *p++;
 5156              		.loc 1 1882 9 view .LVU1624
 5157 0282 0AF10100 		add	r0, r10, #1
 5158 0286 0131     		adds	r1, r1, #1
 5159 0288 8144     		add	r9, r9, r0
 5160              	.LVL557:
 5161              	.L532:
1883:src/display.c **** 			odig++;
 5162              		.loc 1 1883 4 is_stmt 1 view .LVU1625
1883:src/display.c **** 			odig++;
 5163              		.loc 1 1883 11 is_stmt 0 view .LVU1626
 5164 028a 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 5165              	.LVL558:
1883:src/display.c **** 			odig++;
 5166              		.loc 1 1883 11 view .LVU1627
 5167 028e 01F8010F 		strb	r0, [r1, #1]!
1884:src/display.c **** 		}
 5168              		.loc 1 1884 4 is_stmt 1 view .LVU1628
1882:src/display.c **** 			*obp++ = *p++;
 5169              		.loc 1 1882 9 view .LVU1629
1882:src/display.c **** 			*obp++ = *p++;
 5170              		.loc 1 1882 9 is_stmt 0 view .LVU1630
 5171 0292 4A45     		cmp	r2, r9
 5172 0294 F9D1     		bne	.L532
 5173 0296 5344     		add	r3, r3, r10
 5174 0298 5744     		add	r7, r7, r10
1886:src/display.c **** 	}
 5175              		.loc 1 1886 12 view .LVU1631
 5176 029a 4FF0010B 		mov	fp, #1
 5177              	.LVL559:
 5178              	.L502:
1895:src/display.c **** 		*display_digits = 10; // Make space for four-digit exponent and exponent sign
 5179              		.loc 1 1895 2 is_stmt 1 view .LVU1632
1901:src/display.c **** 	if (odig > *display_digits)
 5180              		.loc 1 1901 2 view .LVU1633
 5181 029e B742     		cmp	r7, r6
 5182 02a0 A8BF     		it	ge
 5183 02a2 3746     		movge	r7, r6
 5184              	.LVL560:
1904:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5185              		.loc 1 1904 23 is_stmt 0 view .LVU1634
 5186 02a4 F61B     		subs	r6, r6, r7
1901:src/display.c **** 	if (odig > *display_digits)
 5187              		.loc 1 1901 7 view .LVU1635
 5188 02a6 0022     		movs	r2, #0
1904:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5189              		.loc 1 1904 4 view .LVU1636
 5190 02a8 06EBC606 		add	r6, r6, r6, lsl #3
1901:src/display.c **** 	if (odig > *display_digits)
 5191              		.loc 1 1901 7 view .LVU1637
 5192 02ac 1A70     		strb	r2, [r3]
1902:src/display.c **** 		odig = *display_digits;
 5193              		.loc 1 1902 2 is_stmt 1 view .LVU1638
ARM GAS  /tmp/ccTlkAzC.s 			page 166


 5194              	.LVL561:
1904:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5195              		.loc 1 1904 2 view .LVU1639
1905:src/display.c **** 		j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5196              		.loc 1 1905 2 view .LVU1640
1907:src/display.c **** 		if (res) *res++ = '-';
 5197              		.loc 1 1907 2 view .LVU1641
1907:src/display.c **** 		if (res) *res++ = '-';
 5198              		.loc 1 1907 5 is_stmt 0 view .LVU1642
 5199 02ae BEF1000F 		cmp	lr, #0
 5200 02b2 05D0     		beq	.L533
1908:src/display.c **** 		else {
 5201              		.loc 1 1908 3 is_stmt 1 view .LVU1643
1908:src/display.c **** 		else {
 5202              		.loc 1 1908 6 is_stmt 0 view .LVU1644
 5203 02b4 002C     		cmp	r4, #0
 5204 02b6 00F0AF81 		beq	.L534
1908:src/display.c **** 		else {
 5205              		.loc 1 1908 12 is_stmt 1 discriminator 1 view .LVU1645
 5206              	.LVL562:
1908:src/display.c **** 		else {
 5207              		.loc 1 1908 19 is_stmt 0 discriminator 1 view .LVU1646
 5208 02ba 2D22     		movs	r2, #45
 5209 02bc 04F8012B 		strb	r2, [r4], #1
 5210              	.LVL563:
 5211              	.L533:
1916:src/display.c **** 		if (c == '.') {
 5212              		.loc 1 1916 12 is_stmt 1 discriminator 1 view .LVU1647
1916:src/display.c **** 		if (c == '.') {
 5213              		.loc 1 1916 18 is_stmt 0 discriminator 1 view .LVU1648
 5214 02c0 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5215              	.LVL564:
1916:src/display.c **** 		if (c == '.') {
 5216              		.loc 1 1916 2 discriminator 1 view .LVU1649
 5217 02c4 E2B1     		cbz	r2, .L535
1916:src/display.c **** 		if (c == '.') {
 5218              		.loc 1 1916 31 view .LVU1650
 5219 02c6 6B2E     		cmp	r6, #107
 5220 02c8 1ADC     		bgt	.L535
 5221              	.LVL565:
 5222              	.L536:
 5223              	.LBB361:
 5224              	.LBB362:
 359:src/display.c **** 	} else {
 5225              		.loc 1 359 15 view .LVU1651
 5226 02ca 3946     		mov	r1, r7
 5227              	.LBE362:
 5228              	.LBE361:
1920:src/display.c **** 		} else {
 5229              		.loc 1 1920 10 view .LVU1652
 5230 02cc DFF864A0 		ldr	r10, .L669+12
1918:src/display.c **** 		} else if (c == ',') {
 5231              		.loc 1 1918 10 view .LVU1653
 5232 02d0 DFF86490 		ldr	r9, .L669+16
 5233              	.LBB366:
 5234              	.LBB363:
 359:src/display.c **** 	} else {
ARM GAS  /tmp/ccTlkAzC.s 			page 167


 5235              		.loc 1 359 15 view .LVU1654
 5236 02d4 1F46     		mov	r7, r3
 5237              	.LVL566:
 359:src/display.c **** 	} else {
 5238              		.loc 1 359 15 view .LVU1655
 5239 02d6 0B46     		mov	r3, r1
 5240              	.LVL567:
 5241              	.L545:
 359:src/display.c **** 	} else {
 5242              		.loc 1 359 15 view .LVU1656
 5243              	.LBE363:
 5244              	.LBE366:
1917:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5245              		.loc 1 1917 3 is_stmt 1 view .LVU1657
1917:src/display.c **** 			res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5246              		.loc 1 1917 6 is_stmt 0 view .LVU1658
 5247 02d8 2E2A     		cmp	r2, #46
 5248 02da 00F0D880 		beq	.L661
1919:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5249              		.loc 1 1919 10 is_stmt 1 view .LVU1659
1919:src/display.c **** 			res = set_separator(j, SeparatorMode, res);
 5250              		.loc 1 1919 13 is_stmt 0 view .LVU1660
 5251 02de 2C2A     		cmp	r2, #44
 5252 02e0 00F0E580 		beq	.L662
1922:src/display.c **** 			j += SEGS_PER_DIGIT;
 5253              		.loc 1 1922 4 is_stmt 1 view .LVU1661
 5254              	.LVL568:
 5255              	.LBB367:
 5256              	.LBI367:
 394:src/display.c **** 	if (res) *res++ = ch;
 5257              		.loc 1 394 14 view .LVU1662
 5258              	.LBB368:
 395:src/display.c **** 	else	set_dig(base, ch);
 5259              		.loc 1 395 2 view .LVU1663
 395:src/display.c **** 	else	set_dig(base, ch);
 5260              		.loc 1 395 5 is_stmt 0 view .LVU1664
 5261 02e4 002C     		cmp	r4, #0
 5262 02e6 00F0EF80 		beq	.L543
 395:src/display.c **** 	else	set_dig(base, ch);
 5263              		.loc 1 395 11 is_stmt 1 view .LVU1665
 5264              	.LVL569:
 395:src/display.c **** 	else	set_dig(base, ch);
 5265              		.loc 1 395 18 is_stmt 0 view .LVU1666
 5266 02ea 04F8012B 		strb	r2, [r4], #1
 5267              	.LVL570:
 5268              	.L544:
 397:src/display.c **** }
 5269              		.loc 1 397 2 is_stmt 1 view .LVU1667
 397:src/display.c **** }
 5270              		.loc 1 397 2 is_stmt 0 view .LVU1668
 5271              	.LBE368:
 5272              	.LBE367:
1923:src/display.c **** 		}
 5273              		.loc 1 1923 4 is_stmt 1 view .LVU1669
1916:src/display.c **** 		if (c == '.') {
 5274              		.loc 1 1916 18 is_stmt 0 view .LVU1670
 5275 02ee 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
ARM GAS  /tmp/ccTlkAzC.s 			page 168


 5276              	.LVL571:
1923:src/display.c **** 		}
 5277              		.loc 1 1923 6 view .LVU1671
 5278 02f2 0936     		adds	r6, r6, #9
 5279              	.LVL572:
1916:src/display.c **** 		if (c == '.') {
 5280              		.loc 1 1916 53 is_stmt 1 view .LVU1672
1916:src/display.c **** 		if (c == '.') {
 5281              		.loc 1 1916 12 view .LVU1673
1916:src/display.c **** 		if (c == '.') {
 5282              		.loc 1 1916 2 is_stmt 0 view .LVU1674
 5283 02f4 0AB1     		cbz	r2, .L644
1916:src/display.c **** 		if (c == '.') {
 5284              		.loc 1 1916 31 discriminator 3 view .LVU1675
 5285 02f6 6B2E     		cmp	r6, #107
 5286 02f8 EEDD     		ble	.L545
 5287              	.L644:
1916:src/display.c **** 		if (c == '.') {
 5288              		.loc 1 1916 31 discriminator 3 view .LVU1676
 5289 02fa 1A46     		mov	r2, r3
 5290              	.LVL573:
1916:src/display.c **** 		if (c == '.') {
 5291              		.loc 1 1916 31 discriminator 3 view .LVU1677
 5292 02fc 3B46     		mov	r3, r7
 5293 02fe 1746     		mov	r7, r2
 5294              	.LVL574:
 5295              	.L535:
1936:src/display.c **** 		set_exp(exp, 0, res);
 5296              		.loc 1 1936 2 is_stmt 1 view .LVU1678
1936:src/display.c **** 		set_exp(exp, 0, res);
 5297              		.loc 1 1936 5 is_stmt 0 view .LVU1679
 5298 0300 BBF1000F 		cmp	fp, #0
 5299 0304 40F0F580 		bne	.L663
 5300              	.L546:
1939:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5301              		.loc 1 1939 2 is_stmt 1 view .LVU1680
1939:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5302              		.loc 1 1939 5 is_stmt 0 view .LVU1681
 5303 0308 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5304 030c 2E2B     		cmp	r3, #46
 5305 030e 00F0E280 		beq	.L664
 5306              	.L547:
1941:src/display.c **** }
 5307              		.loc 1 1941 2 is_stmt 1 view .LVU1682
1941:src/display.c **** }
 5308              		.loc 1 1941 18 is_stmt 0 view .LVU1683
 5309 0312 009B     		ldr	r3, [sp]
 5310 0314 1F60     		str	r7, [r3]
 5311              	.LVL575:
 5312              	.L434:
1942:src/display.c **** 
 5313              		.loc 1 1942 1 view .LVU1684
 5314 0316 23B0     		add	sp, sp, #140
 5315              		.cfi_remember_state
 5316              		.cfi_def_cfa_offset 36
 5317              	.LVL576:
1942:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 169


 5318              		.loc 1 1942 1 view .LVU1685
 5319              		@ sp needed
 5320 0318 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5321              	.LVL577:
 5322              	.L442:
 5323              		.cfi_restore_state
1641:src/display.c **** 
 5324              		.loc 1 1641 3 is_stmt 1 view .LVU1686
 5325 031c 4146     		mov	r1, r8
 5326 031e 3046     		mov	r0, r6
 5327 0320 FFF7FEFF 		bl	decNumberToString
 5328              	.LVL578:
 5329 0324 A5E6     		b	.L444
 5330              	.L670:
 5331 0326 00BF     		.align	2
 5332              	.L669:
 5333 0328 00000000 		.word	PersistentRam
 5334 032c 00000000 		.word	StateWhileOn
 5335 0330 56555555 		.word	1431655766
 5336 0334 00000000 		.word	.LANCHOR0
 5337 0338 00000000 		.word	.LANCHOR1
 5338              	.LVL579:
 5339              	.L435:
1599:src/display.c **** 			if (State2.hms) {
 5340              		.loc 1 1599 3 view .LVU1687
1599:src/display.c **** 			if (State2.hms) {
 5341              		.loc 1 1599 24 is_stmt 0 view .LVU1688
 5342 033c BF4B     		ldr	r3, .L671
 5343 033e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1599:src/display.c **** 			if (State2.hms) {
 5344              		.loc 1 1599 21 view .LVU1689
 5345 0340 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1599:src/display.c **** 			if (State2.hms) {
 5346              		.loc 1 1599 24 view .LVU1690
 5347 0342 01F00201 		and	r1, r1, #2
1599:src/display.c **** 			if (State2.hms) {
 5348              		.loc 1 1599 21 view .LVU1691
 5349 0346 1143     		orrs	r1, r1, r2
 5350 0348 7FF46DAE 		bne	.L438
1600:src/display.c **** 				set_x_hms(z, res);
 5351              		.loc 1 1600 4 is_stmt 1 view .LVU1692
1600:src/display.c **** 				set_x_hms(z, res);
 5352              		.loc 1 1600 8 is_stmt 0 view .LVU1693
 5353 034c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1600:src/display.c **** 				set_x_hms(z, res);
 5354              		.loc 1 1600 7 view .LVU1694
 5355 034e DA07     		lsls	r2, r3, #31
 5356 0350 00F19A82 		bmi	.L665
1604:src/display.c **** 				if (set_x_fract(z, res))
 5357              		.loc 1 1604 9 is_stmt 1 view .LVU1695
1604:src/display.c **** 				if (set_x_fract(z, res))
 5358              		.loc 1 1604 13 is_stmt 0 view .LVU1696
 5359 0354 BA4B     		ldr	r3, .L671+4
 5360 0356 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1604:src/display.c **** 				if (set_x_fract(z, res))
 5361              		.loc 1 1604 12 view .LVU1697
 5362 035a 9B06     		lsls	r3, r3, #26
ARM GAS  /tmp/ccTlkAzC.s 			page 170


 5363 035c 7FF563AE 		bpl	.L438
1605:src/display.c **** 					return;
 5364              		.loc 1 1605 5 is_stmt 1 view .LVU1698
1605:src/display.c **** 					return;
 5365              		.loc 1 1605 9 is_stmt 0 view .LVU1699
 5366 0360 2146     		mov	r1, r4
 5367 0362 3046     		mov	r0, r6
 5368 0364 FFF7FEFF 		bl	set_x_fract
 5369              	.LVL580:
1605:src/display.c **** 					return;
 5370              		.loc 1 1605 8 view .LVU1700
 5371 0368 0028     		cmp	r0, #0
 5372 036a 3FF45CAE 		beq	.L438
 5373 036e D2E7     		b	.L434
 5374              	.LVL581:
 5375              	.L558:
1687:src/display.c **** 	else exp = s_to_i(q+1);
 5376              		.loc 1 1687 21 view .LVU1701
 5377 0370 0546     		mov	r5, r0
 5378 0372 A5E6     		b	.L458
 5379              	.LVL582:
 5380              	.L660:
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 5381              		.loc 1 1741 6 view .LVU1702
 5382 0374 4A46     		mov	r2, r9
1742:src/display.c **** 			mantissa[0] = '1';
 5383              		.loc 1 1742 39 view .LVU1703
 5384 0376 4FF0300C 		mov	ip, #48
 5385              	.LVL583:
 5386              	.L484:
1742:src/display.c **** 			mantissa[0] = '1';
 5387              		.loc 1 1742 45 is_stmt 1 discriminator 3 view .LVU1704
1742:src/display.c **** 			mantissa[0] = '1';
 5388              		.loc 1 1742 34 discriminator 3 view .LVU1705
1742:src/display.c **** 			mantissa[0] = '1';
 5389              		.loc 1 1742 39 is_stmt 0 discriminator 3 view .LVU1706
 5390 037a 02F801CB 		strb	ip, [r2], #1
 5391              	.LVL584:
1742:src/display.c **** 			mantissa[0] = '1';
 5392              		.loc 1 1742 23 is_stmt 1 discriminator 3 view .LVU1707
1742:src/display.c **** 			mantissa[0] = '1';
 5393              		.loc 1 1742 4 is_stmt 0 discriminator 3 view .LVU1708
 5394 037e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5395 0380 3929     		cmp	r1, #57
 5396 0382 FAD0     		beq	.L484
 5397              	.LVL585:
 5398              	.L551:
1743:src/display.c **** 			exp++;
 5399              		.loc 1 1743 4 is_stmt 1 view .LVU1709
1743:src/display.c **** 			exp++;
 5400              		.loc 1 1743 16 is_stmt 0 view .LVU1710
 5401 0384 3122     		movs	r2, #49
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5402              		.loc 1 1745 7 view .LVU1711
 5403 0386 012F     		cmp	r7, #1
1744:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5404              		.loc 1 1744 7 view .LVU1712
ARM GAS  /tmp/ccTlkAzC.s 			page 171


 5405 0388 05F10105 		add	r5, r5, #1
 5406              	.LVL586:
1743:src/display.c **** 			exp++;
 5407              		.loc 1 1743 16 view .LVU1713
 5408 038c 8DF84820 		strb	r2, [sp, #72]
1744:src/display.c **** 			if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5409              		.loc 1 1744 4 is_stmt 1 view .LVU1714
 5410              	.LVL587:
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5411              		.loc 1 1745 4 view .LVU1715
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5412              		.loc 1 1745 7 is_stmt 0 view .LVU1716
 5413 0390 7FF402AF 		bne	.L647
1745:src/display.c **** 				mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5414              		.loc 1 1745 25 discriminator 1 view .LVU1717
 5415 0394 AE42     		cmp	r6, r5
 5416 0396 00F3BE80 		bgt	.L486
1746:src/display.c **** 				extra_digits = 0;
 5417              		.loc 1 1746 5 is_stmt 1 view .LVU1718
1746:src/display.c **** 				extra_digits = 0;
 5418              		.loc 1 1746 25 is_stmt 0 view .LVU1719
 5419 039a A94B     		ldr	r3, .L671+4
 5420              	.LVL588:
1746:src/display.c **** 				extra_digits = 0;
 5421              		.loc 1 1746 25 view .LVU1720
 5422 039c 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1746:src/display.c **** 				extra_digits = 0;
 5423              		.loc 1 1746 34 view .LVU1721
 5424 03a0 D806     		lsls	r0, r3, #27
 5425              	.LVL589:
1746:src/display.c **** 				extra_digits = 0;
 5426              		.loc 1 1746 34 view .LVU1722
 5427 03a2 40F1BE82 		bpl	.L666
 5428              	.LVL590:
1757:src/display.c **** 
 5429              		.loc 1 1757 2 is_stmt 1 view .LVU1723
1757:src/display.c **** 
 5430              		.loc 1 1757 40 is_stmt 0 view .LVU1724
 5431 03a6 0AF10102 		add	r2, r10, #1
1757:src/display.c **** 
 5432              		.loc 1 1757 9 view .LVU1725
 5433 03aa 09EB0203 		add	r3, r9, r2
 5434              	.LVL591:
1757:src/display.c **** 
 5435              		.loc 1 1757 45 is_stmt 1 view .LVU1726
1757:src/display.c **** 
 5436              		.loc 1 1757 2 is_stmt 0 view .LVU1727
 5437 03ae 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
1746:src/display.c **** 				extra_digits = 0;
 5438              		.loc 1 1746 34 view .LVU1728
 5439 03b2 0327     		movs	r7, #3
1757:src/display.c **** 
 5440              		.loc 1 1757 2 view .LVU1729
 5441 03b4 002A     		cmp	r2, #0
 5442 03b6 7FF4F2AE 		bne	.L549
 5443              	.LVL592:
 5444              	.L492:
ARM GAS  /tmp/ccTlkAzC.s 			page 172


1859:src/display.c **** 		case -1:
 5445              		.loc 1 1859 3 is_stmt 1 view .LVU1730
1859:src/display.c **** 		case -1:
 5446              		.loc 1 1859 15 is_stmt 0 view .LVU1731
 5447 03ba A24B     		ldr	r3, .L671+8
 5448 03bc 83FB0523 		smull	r2, r3, r3, r5
 5449 03c0 A3EBE573 		sub	r3, r3, r5, asr #31
 5450 03c4 03EB4303 		add	r3, r3, r3, lsl #1
 5451 03c8 EB1A     		subs	r3, r5, r3
 5452 03ca 0233     		adds	r3, r3, #2
 5453 03cc 042B     		cmp	r3, #4
 5454 03ce 3FF649AF 		bhi	.L572
 5455 03d2 01A2     		adr	r2, .L529
 5456 03d4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5457              		.p2align 2
 5458              	.L529:
 5459 03d8 03050000 		.word	.L573+1
 5460 03dc 9F070000 		.word	.L528+1
 5461 03e0 65020000 		.word	.L572+1
 5462 03e4 03050000 		.word	.L573+1
 5463 03e8 9F070000 		.word	.L528+1
 5464              	.LVL593:
 5465              		.p2align 1
 5466              	.L496:
1768:src/display.c **** 			case -1:
 5467              		.loc 1 1768 4 is_stmt 1 view .LVU1732
1768:src/display.c **** 			case -1:
 5468              		.loc 1 1768 17 is_stmt 0 view .LVU1733
 5469 03ec 954B     		ldr	r3, .L671+8
1768:src/display.c **** 			case -1:
 5470              		.loc 1 1768 30 view .LVU1734
 5471 03ee 9449     		ldr	r1, .L671+4
1768:src/display.c **** 			case -1:
 5472              		.loc 1 1768 17 view .LVU1735
 5473 03f0 83FB0503 		smull	r0, r3, r3, r5
1768:src/display.c **** 			case -1:
 5474              		.loc 1 1768 30 view .LVU1736
 5475 03f4 91F8E717 		ldrb	r1, [r1, #2023]	@ zero_extendqisi2
1768:src/display.c **** 			case -1:
 5476              		.loc 1 1768 17 view .LVU1737
 5477 03f8 A3EBE573 		sub	r3, r3, r5, asr #31
 5478 03fc 03EB4303 		add	r3, r3, r3, lsl #1
1768:src/display.c **** 			case -1:
 5479              		.loc 1 1768 30 view .LVU1738
 5480 0400 C1F30011 		ubfx	r1, r1, #4, #1
1768:src/display.c **** 			case -1:
 5481              		.loc 1 1768 17 view .LVU1739
 5482 0404 EB1A     		subs	r3, r5, r3
1768:src/display.c **** 			case -1:
 5483              		.loc 1 1768 22 view .LVU1740
 5484 0406 01FB03F3 		mul	r3, r1, r3
 5485 040a 0233     		adds	r3, r3, #2
 5486 040c 042B     		cmp	r3, #4
 5487 040e 00F24182 		bhi	.L567
 5488 0412 DFE813F0 		tbh	[pc, r3, lsl #1]
 5489              	.L500:
 5490 0416 DB01     		.2byte	(.L568-.L500)/2
ARM GAS  /tmp/ccTlkAzC.s 			page 173


 5491 0418 FC01     		.2byte	(.L499-.L500)/2
 5492 041a 3F02     		.2byte	(.L567-.L500)/2
 5493 041c DB01     		.2byte	(.L568-.L500)/2
 5494 041e FC01     		.2byte	(.L499-.L500)/2
 5495              	.LVL594:
 5496              		.p2align 1
 5497              	.L659:
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5498              		.loc 1 1724 3 is_stmt 1 view .LVU1741
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5499              		.loc 1 1724 6 is_stmt 0 view .LVU1742
 5500 0420 AE42     		cmp	r6, r5
 5501 0422 04DD     		ble	.L475
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5502              		.loc 1 1724 44 discriminator 1 view .LVU1743
 5503 0424 CAF10003 		rsb	r3, r10, #0
1724:src/display.c **** 			mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5504              		.loc 1 1724 35 discriminator 1 view .LVU1744
 5505 0428 AB42     		cmp	r3, r5
 5506 042a 40F3C581 		ble	.L476
 5507              	.L475:
1725:src/display.c **** 		else {
 5508              		.loc 1 1725 4 is_stmt 1 view .LVU1745
1725:src/display.c **** 		else {
 5509              		.loc 1 1725 24 is_stmt 0 view .LVU1746
 5510 042e 844B     		ldr	r3, .L671+4
 5511 0430 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1725:src/display.c **** 		else {
 5512              		.loc 1 1725 33 view .LVU1747
 5513 0434 13F0100F 		tst	r3, #16
 5514 0438 14BF     		ite	ne
 5515 043a 0327     		movne	r7, #3
 5516              	.LVL595:
1725:src/display.c **** 		else {
 5517              		.loc 1 1725 33 view .LVU1748
 5518 043c 0227     		moveq	r7, #2
 5519 043e 0022     		movs	r2, #0
 5520 0440 82E6     		b	.L474
 5521              	.LVL596:
 5522              	.L657:
1725:src/display.c **** 		else {
 5523              		.loc 1 1725 33 view .LVU1749
 5524 0442 013D     		subs	r5, r5, #1
 5525 0444 7219     		adds	r2, r6, r5
 5526              	.L467:
1704:src/display.c **** 			exp--;
 5527              		.loc 1 1704 3 is_stmt 1 discriminator 1 view .LVU1750
1705:src/display.c **** 		while (*++q == '0');
 5528              		.loc 1 1705 4 discriminator 1 view .LVU1751
 5529 0446 951B     		subs	r5, r2, r6
 5530              	.LVL597:
1706:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5531              		.loc 1 1706 9 discriminator 1 view .LVU1752
1706:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5532              		.loc 1 1706 10 is_stmt 0 discriminator 1 view .LVU1753
 5533 0448 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 5534              	.LVL598:
ARM GAS  /tmp/ccTlkAzC.s 			page 174


1706:src/display.c **** 		while (*q >= '0' && *q <= '9')
 5535              		.loc 1 1706 3 discriminator 1 view .LVU1754
 5536 044c 302B     		cmp	r3, #48
 5537 044e FAD0     		beq	.L467
1707:src/display.c **** 			*p++ = *q++;
 5538              		.loc 1 1707 9 is_stmt 1 view .LVU1755
 5539 0450 A3F13002 		sub	r2, r3, #48
 5540 0454 092A     		cmp	r2, #9
 5541 0456 3FF671AE 		bhi	.L468
1570:src/display.c **** 	char *r;
 5542              		.loc 1 1570 8 is_stmt 0 view .LVU1756
 5543 045a 4A46     		mov	r2, r9
 5544              	.LVL599:
 5545              	.L469:
1708:src/display.c **** 	} else {
 5546              		.loc 1 1708 4 is_stmt 1 view .LVU1757
1708:src/display.c **** 	} else {
 5547              		.loc 1 1708 9 is_stmt 0 view .LVU1758
 5548 045c 02F8013B 		strb	r3, [r2], #1
 5549              	.LVL600:
1707:src/display.c **** 			*p++ = *q++;
 5550              		.loc 1 1707 9 is_stmt 1 view .LVU1759
1707:src/display.c **** 			*p++ = *q++;
 5551              		.loc 1 1707 10 is_stmt 0 view .LVU1760
 5552 0460 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1707:src/display.c **** 			*p++ = *q++;
 5553              		.loc 1 1707 9 view .LVU1761
 5554 0464 A3F13001 		sub	r1, r3, #48
 5555 0468 0929     		cmp	r1, #9
 5556 046a F7D9     		bls	.L469
 5557 046c 66E6     		b	.L468
 5558              	.LVL601:
 5559              	.L655:
1698:src/display.c **** 		q++;
 5560              		.loc 1 1698 3 is_stmt 1 view .LVU1762
1699:src/display.c **** 	} else if (*q == '+')
 5561              		.loc 1 1699 3 view .LVU1763
1698:src/display.c **** 		q++;
 5562              		.loc 1 1698 12 is_stmt 0 view .LVU1764
 5563 046e 4FF0010E 		mov	lr, #1
 5564 0472 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1699:src/display.c **** 	} else if (*q == '+')
 5565              		.loc 1 1699 4 view .LVU1765
 5566 0474 7644     		add	r6, r6, lr
 5567              	.LVL602:
1699:src/display.c **** 	} else if (*q == '+')
 5568              		.loc 1 1699 4 view .LVU1766
 5569 0476 38E6     		b	.L463
 5570              	.LVL603:
 5571              	.L653:
1667:src/display.c **** 		trimzeros = 1;
 5572              		.loc 1 1667 3 is_stmt 1 view .LVU1767
1667:src/display.c **** 		trimzeros = 1;
 5573              		.loc 1 1667 10 is_stmt 0 view .LVU1768
 5574 0478 3046     		mov	r0, r6
 5575 047a FFF7FEFF 		bl	std_round_fix
 5576              	.LVL604:
ARM GAS  /tmp/ccTlkAzC.s 			page 175


1669:src/display.c **** 	} else if (dd >= *display_digits)
 5577              		.loc 1 1669 6 view .LVU1769
 5578 047e 009B     		ldr	r3, [sp]
 5579 0480 1D68     		ldr	r5, [r3]
1668:src/display.c **** 		dd = *display_digits - 1;
 5580              		.loc 1 1668 13 view .LVU1770
 5581 0482 0123     		movs	r3, #1
1667:src/display.c **** 		trimzeros = 1;
 5582              		.loc 1 1667 10 view .LVU1771
 5583 0484 0746     		mov	r7, r0
 5584              	.LVL605:
1668:src/display.c **** 		dd = *display_digits - 1;
 5585              		.loc 1 1668 3 is_stmt 1 view .LVU1772
1669:src/display.c **** 	} else if (dd >= *display_digits)
 5586              		.loc 1 1669 3 view .LVU1773
1669:src/display.c **** 	} else if (dd >= *display_digits)
 5587              		.loc 1 1669 6 is_stmt 0 view .LVU1774
 5588 0486 05F1FF3A 		add	r10, r5, #-1
 5589              	.LVL606:
1668:src/display.c **** 		dd = *display_digits - 1;
 5590              		.loc 1 1668 13 view .LVU1775
 5591 048a 0193     		str	r3, [sp, #4]
 5592              	.LVL607:
1668:src/display.c **** 		dd = *display_digits - 1;
 5593              		.loc 1 1668 13 view .LVU1776
 5594 048c 03E6     		b	.L457
 5595              	.LVL608:
 5596              	.L661:
1918:src/display.c **** 		} else if (c == ',') {
 5597              		.loc 1 1918 4 is_stmt 1 view .LVU1777
1918:src/display.c **** 		} else if (c == ',') {
 5598              		.loc 1 1918 10 is_stmt 0 view .LVU1778
 5599 048e 2246     		mov	r2, r4
 5600              	.LVL609:
1918:src/display.c **** 		} else if (c == ',') {
 5601              		.loc 1 1918 10 view .LVU1779
 5602 0490 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 5603 0494 0193     		str	r3, [sp, #4]
 5604 0496 A6F10900 		sub	r0, r6, #9
 5605 049a FFF7FEFF 		bl	set_decimal
 5606              	.LVL610:
 5607 049e 019B     		ldr	r3, [sp, #4]
 5608 04a0 0446     		mov	r4, r0
 5609              	.LVL611:
 5610              	.L539:
1916:src/display.c **** 		if (c == '.') {
 5611              		.loc 1 1916 53 is_stmt 1 view .LVU1780
1916:src/display.c **** 		if (c == '.') {
 5612              		.loc 1 1916 12 view .LVU1781
1916:src/display.c **** 		if (c == '.') {
 5613              		.loc 1 1916 18 is_stmt 0 view .LVU1782
 5614 04a2 18F8012F 		ldrb	r2, [r8, #1]!	@ zero_extendqisi2
 5615              	.LVL612:
1916:src/display.c **** 		if (c == '.') {
 5616              		.loc 1 1916 2 view .LVU1783
 5617 04a6 002A     		cmp	r2, #0
 5618 04a8 7FF416AF 		bne	.L545
ARM GAS  /tmp/ccTlkAzC.s 			page 176


 5619 04ac 25E7     		b	.L644
 5620              	.L662:
1920:src/display.c **** 		} else {
 5621              		.loc 1 1920 4 is_stmt 1 view .LVU1784
1920:src/display.c **** 		} else {
 5622              		.loc 1 1920 10 is_stmt 0 view .LVU1785
 5623 04ae 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 5624              	.LVL613:
 5625              	.LBB370:
 5626              	.LBI361:
 354:src/display.c **** 	if (sep == SEP_NONE)
 5627              		.loc 1 354 14 is_stmt 1 view .LVU1786
 5628              	.LBB364:
 355:src/display.c **** 		return res;
 5629              		.loc 1 355 2 view .LVU1787
 355:src/display.c **** 		return res;
 5630              		.loc 1 355 5 is_stmt 0 view .LVU1788
 5631 04b2 0029     		cmp	r1, #0
 5632 04b4 F5D0     		beq	.L539
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5633              		.loc 1 357 2 is_stmt 1 view .LVU1789
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 5634              		.loc 1 357 5 is_stmt 0 view .LVU1790
 5635 04b6 002C     		cmp	r4, #0
 5636 04b8 00F0F281 		beq	.L541
 358:src/display.c **** 		else *res++ = '.';
 5637              		.loc 1 358 3 is_stmt 1 view .LVU1791
 358:src/display.c **** 		else *res++ = '.';
 5638              		.loc 1 358 6 is_stmt 0 view .LVU1792
 5639 04bc 0129     		cmp	r1, #1
 358:src/display.c **** 		else *res++ = '.';
 5640              		.loc 1 358 25 is_stmt 1 view .LVU1793
 5641              	.LVL614:
 359:src/display.c **** 	} else {
 5642              		.loc 1 359 8 view .LVU1794
 359:src/display.c **** 	} else {
 5643              		.loc 1 359 15 is_stmt 0 view .LVU1795
 5644 04be 18BF     		it	ne
 5645 04c0 2E22     		movne	r2, #46
 5646              	.LVL615:
 359:src/display.c **** 	} else {
 5647              		.loc 1 359 15 view .LVU1796
 5648 04c2 04F8012B 		strb	r2, [r4], #1
 5649              	.LVL616:
 359:src/display.c **** 	} else {
 5650              		.loc 1 359 15 view .LVU1797
 5651 04c6 ECE7     		b	.L539
 5652              	.LVL617:
 5653              	.L543:
 359:src/display.c **** 	} else {
 5654              		.loc 1 359 15 view .LVU1798
 5655              	.LBE364:
 5656              	.LBE370:
 5657              	.LBB371:
 5658              	.LBB369:
 396:src/display.c **** 	return res;
 5659              		.loc 1 396 7 view .LVU1799
ARM GAS  /tmp/ccTlkAzC.s 			page 177


 5660 04c8 1146     		mov	r1, r2
 5661 04ca 3046     		mov	r0, r6
 5662 04cc 0193     		str	r3, [sp, #4]
 396:src/display.c **** 	return res;
 5663              		.loc 1 396 7 is_stmt 1 view .LVU1800
 5664 04ce FFF7FEFF 		bl	set_dig
 5665              	.LVL618:
 396:src/display.c **** 	return res;
 5666              		.loc 1 396 7 is_stmt 0 view .LVU1801
 5667 04d2 019B     		ldr	r3, [sp, #4]
 5668 04d4 0BE7     		b	.L544
 5669              	.LVL619:
 5670              	.L664:
 396:src/display.c **** 	return res;
 5671              		.loc 1 396 7 view .LVU1802
 5672              	.LBE369:
 5673              	.LBE371:
1939:src/display.c **** 		set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5674              		.loc 1 1939 21 discriminator 1 view .LVU1803
 5675 04d6 002C     		cmp	r4, #0
 5676 04d8 7FF41BAF 		bne	.L547
1940:src/display.c **** 	*display_digits = odig;
 5677              		.loc 1 1940 3 is_stmt 1 view .LVU1804
1940:src/display.c **** 	*display_digits = odig;
 5678              		.loc 1 1940 32 is_stmt 0 view .LVU1805
 5679 04dc 009B     		ldr	r3, [sp]
 5680 04de 1868     		ldr	r0, [r3]
1940:src/display.c **** 	*display_digits = odig;
 5681              		.loc 1 1940 3 view .LVU1806
 5682 04e0 594B     		ldr	r3, .L671+12
1940:src/display.c **** 	*display_digits = odig;
 5683              		.loc 1 1940 32 view .LVU1807
 5684 04e2 0138     		subs	r0, r0, #1
1940:src/display.c **** 	*display_digits = odig;
 5685              		.loc 1 1940 3 view .LVU1808
 5686 04e4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5687 04e6 2246     		mov	r2, r4
 5688 04e8 00EBC000 		add	r0, r0, r0, lsl #3
 5689 04ec FFF7FEFF 		bl	set_decimal
 5690              	.LVL620:
 5691 04f0 0FE7     		b	.L547
 5692              	.L663:
1937:src/display.c **** #endif
 5693              		.loc 1 1937 3 view .LVU1809
 5694 04f2 2846     		mov	r0, r5
 5695 04f4 2246     		mov	r2, r4
 5696 04f6 0021     		movs	r1, #0
 5697 04f8 0193     		str	r3, [sp, #4]
1937:src/display.c **** #endif
 5698              		.loc 1 1937 3 is_stmt 1 view .LVU1810
 5699 04fa FFF7FEFF 		bl	set_exp
 5700              	.LVL621:
 5701 04fe 019B     		ldr	r3, [sp, #4]
 5702 0500 02E7     		b	.L546
 5703              	.LVL622:
 5704              	.L573:
1859:src/display.c **** 		case -1:
ARM GAS  /tmp/ccTlkAzC.s 			page 178


 5705              		.loc 1 1859 15 is_stmt 0 view .LVU1811
 5706 0502 0227     		movs	r7, #2
 5707 0504 4146     		mov	r1, r8
 5708              	.LVL623:
 5709              	.L530:
1868:src/display.c **** 			odig++;
 5710              		.loc 1 1868 4 is_stmt 1 view .LVU1812
1868:src/display.c **** 			odig++;
 5711              		.loc 1 1868 11 is_stmt 0 view .LVU1813
 5712 0506 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 5713              	.LVL624:
1868:src/display.c **** 			odig++;
 5714              		.loc 1 1868 11 view .LVU1814
 5715 050a 01F8013B 		strb	r3, [r1], #1
 5716              	.LVL625:
1869:src/display.c **** 			dd--;
 5717              		.loc 1 1869 4 is_stmt 1 view .LVU1815
1870:src/display.c **** 			exp--;
 5718              		.loc 1 1870 4 view .LVU1816
1870:src/display.c **** 			exp--;
 5719              		.loc 1 1870 6 is_stmt 0 view .LVU1817
 5720 050e 0AF1FF3A 		add	r10, r10, #-1
 5721              	.LVL626:
1871:src/display.c **** 		case 0:
 5722              		.loc 1 1871 4 is_stmt 1 view .LVU1818
1871:src/display.c **** 		case 0:
 5723              		.loc 1 1871 7 is_stmt 0 view .LVU1819
 5724 0512 013D     		subs	r5, r5, #1
 5725              	.LVL627:
1871:src/display.c **** 		case 0:
 5726              		.loc 1 1871 7 view .LVU1820
 5727 0514 A8E6     		b	.L491
 5728              	.LVL628:
 5729              	.L486:
1757:src/display.c **** 
 5730              		.loc 1 1757 2 is_stmt 1 view .LVU1821
1757:src/display.c **** 
 5731              		.loc 1 1757 45 view .LVU1822
1757:src/display.c **** 
 5732              		.loc 1 1757 2 is_stmt 0 view .LVU1823
 5733 0516 19F80020 		ldrb	r2, [r9, r0]	@ zero_extendqisi2
 5734 051a 002A     		cmp	r2, #0
 5735 051c 7FF43FAE 		bne	.L549
 5736              	.LVL629:
 5737              	.L493:
1822:src/display.c **** 		if (exp >= 0) {		// Some digits to left of decimal point
 5738              		.loc 1 1822 3 is_stmt 1 view .LVU1824
1823:src/display.c **** 			for (i=0; i<=exp; i++) {
 5739              		.loc 1 1823 3 view .LVU1825
1823:src/display.c **** 			for (i=0; i<=exp; i++) {
 5740              		.loc 1 1823 6 is_stmt 0 view .LVU1826
 5741 0520 002D     		cmp	r5, #0
 5742 0522 C0F21081 		blt	.L513
1823:src/display.c **** 			for (i=0; i<=exp; i++) {
 5743              		.loc 1 1823 6 view .LVU1827
 5744 0526 6B1C     		adds	r3, r5, #1
1825:src/display.c **** 					*obp++ = ',';
ARM GAS  /tmp/ccTlkAzC.s 			page 179


 5745              		.loc 1 1825 28 view .LVU1828
 5746 0528 DFF818C1 		ldr	ip, .L671+8
 5747 052c 0293     		str	r3, [sp, #8]
 5748 052e 09EB0300 		add	r0, r9, r3
1759:src/display.c **** 	switch (mode) {
 5749              		.loc 1 1759 4 view .LVU1829
 5750 0532 4F46     		mov	r7, r9
1564:src/display.c **** 	int odig = 0;
 5751              		.loc 1 1564 15 view .LVU1830
 5752 0534 4146     		mov	r1, r8
 5753 0536 0394     		str	r4, [sp, #12]
 5754 0538 05E0     		b	.L514
 5755              	.LVL630:
 5756              	.L517:
1826:src/display.c **** 				*obp++ = *p++;
 5757              		.loc 1 1826 6 is_stmt 1 view .LVU1831
1825:src/display.c **** 					*obp++ = ',';
 5758              		.loc 1 1825 15 is_stmt 0 view .LVU1832
 5759 053a 022A     		cmp	r2, #2
1826:src/display.c **** 				*obp++ = *p++;
 5760              		.loc 1 1826 13 view .LVU1833
 5761 053c 05BF     		ittet	eq
 5762 053e 2C23     		moveq	r3, #44
 5763 0540 4B70     		strbeq	r3, [r1, #1]
1827:src/display.c **** 				odig++;
 5764              		.loc 1 1827 9 view .LVU1834
 5765 0542 0131     		addne	r1, r1, #1
 5766              	.LVL631:
1826:src/display.c **** 				*obp++ = *p++;
 5767              		.loc 1 1826 10 view .LVU1835
 5768 0544 0231     		addeq	r1, r1, #2
 5769              	.LVL632:
 5770              	.L514:
1827:src/display.c **** 				odig++;
 5771              		.loc 1 1827 5 is_stmt 1 discriminator 2 view .LVU1836
1827:src/display.c **** 				odig++;
 5772              		.loc 1 1827 12 is_stmt 0 discriminator 2 view .LVU1837
 5773 0546 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 5774              	.LVL633:
1825:src/display.c **** 					*obp++ = ',';
 5775              		.loc 1 1825 5 is_stmt 1 discriminator 2 view .LVU1838
1827:src/display.c **** 				odig++;
 5776              		.loc 1 1827 12 is_stmt 0 discriminator 2 view .LVU1839
 5777 054a 0B70     		strb	r3, [r1]
1828:src/display.c **** 			}
 5778              		.loc 1 1828 5 is_stmt 1 discriminator 2 view .LVU1840
 5779              	.LVL634:
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5780              		.loc 1 1824 22 discriminator 2 view .LVU1841
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5781              		.loc 1 1824 14 discriminator 2 view .LVU1842
1825:src/display.c **** 					*obp++ = ',';
 5782              		.loc 1 1825 28 is_stmt 0 discriminator 2 view .LVU1843
 5783 054c A9EB0703 		sub	r3, r9, r7
 5784 0550 2B44     		add	r3, r3, r5
 5785 0552 8CFB0342 		smull	r4, r2, ip, r3
 5786 0556 A2EBE372 		sub	r2, r2, r3, asr #31
ARM GAS  /tmp/ccTlkAzC.s 			page 180


 5787 055a 02EB4202 		add	r2, r2, r2, lsl #1
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5788              		.loc 1 1824 4 discriminator 2 view .LVU1844
 5789 055e B842     		cmp	r0, r7
1825:src/display.c **** 					*obp++ = ',';
 5790              		.loc 1 1825 28 discriminator 2 view .LVU1845
 5791 0560 A3EB0202 		sub	r2, r3, r2
1824:src/display.c **** 				if (i > 0 && (exp - i) % 3 == 2)
 5792              		.loc 1 1824 4 discriminator 2 view .LVU1846
 5793 0564 E9D1     		bne	.L517
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5794              		.loc 1 1830 11 view .LVU1847
 5795 0566 2E23     		movs	r3, #46
1831:src/display.c **** 				*obp++ = *p++;
 5796              		.loc 1 1831 4 view .LVU1848
 5797 0568 BAF1000F 		cmp	r10, #0
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5798              		.loc 1 1830 11 view .LVU1849
 5799 056c 4B70     		strb	r3, [r1, #1]
 5800 056e 039C     		ldr	r4, [sp, #12]
 5801 0570 029F     		ldr	r7, [sp, #8]
 5802              	.LVL635:
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5803              		.loc 1 1830 4 is_stmt 1 view .LVU1850
1830:src/display.c **** 			for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5804              		.loc 1 1830 8 is_stmt 0 view .LVU1851
 5805 0572 01F10203 		add	r3, r1, #2
 5806              	.LVL636:
1831:src/display.c **** 				*obp++ = *p++;
 5807              		.loc 1 1831 4 is_stmt 1 view .LVU1852
1831:src/display.c **** 				*obp++ = *p++;
 5808              		.loc 1 1831 14 view .LVU1853
1831:src/display.c **** 				*obp++ = *p++;
 5809              		.loc 1 1831 4 is_stmt 0 view .LVU1854
 5810 0576 0CDD     		ble	.L518
 5811 0578 0131     		adds	r1, r1, #1
 5812 057a 00EB0A07 		add	r7, r0, r10
 5813              	.LVL637:
 5814              	.L519:
1832:src/display.c **** 				odig++;
 5815              		.loc 1 1832 5 is_stmt 1 discriminator 4 view .LVU1855
1832:src/display.c **** 				odig++;
 5816              		.loc 1 1832 12 is_stmt 0 discriminator 4 view .LVU1856
 5817 057e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5818              	.LVL638:
1832:src/display.c **** 				odig++;
 5819              		.loc 1 1832 12 discriminator 4 view .LVU1857
 5820 0582 01F8012F 		strb	r2, [r1, #1]!
1833:src/display.c **** 			}
 5821              		.loc 1 1833 5 is_stmt 1 discriminator 4 view .LVU1858
1831:src/display.c **** 				*obp++ = *p++;
 5822              		.loc 1 1831 41 discriminator 4 view .LVU1859
1831:src/display.c **** 				*obp++ = *p++;
 5823              		.loc 1 1831 14 discriminator 4 view .LVU1860
1831:src/display.c **** 				*obp++ = *p++;
 5824              		.loc 1 1831 4 is_stmt 0 discriminator 4 view .LVU1861
 5825 0586 8742     		cmp	r7, r0
ARM GAS  /tmp/ccTlkAzC.s 			page 181


 5826 0588 F9D1     		bne	.L519
 5827 058a 029A     		ldr	r2, [sp, #8]
 5828 058c 5244     		add	r2, r2, r10
 5829 058e 5344     		add	r3, r3, r10
 5830              	.LVL639:
1831:src/display.c **** 				*obp++ = *p++;
 5831              		.loc 1 1831 4 discriminator 4 view .LVU1862
 5832 0590 1746     		mov	r7, r2
 5833              	.LVL640:
 5834              	.L518:
1850:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5835              		.loc 1 1850 3 is_stmt 1 view .LVU1863
1850:src/display.c **** 			while (obp > x && obp[-1] == '0') {
 5836              		.loc 1 1850 6 is_stmt 0 view .LVU1864
 5837 0592 019A     		ldr	r2, [sp, #4]
 5838 0594 002A     		cmp	r2, #0
 5839 0596 40F0C480 		bne	.L524
1566:src/display.c **** 	int j;
 5840              		.loc 1 1566 6 view .LVU1865
 5841 059a 9346     		mov	fp, r2
 5842 059c 7FE6     		b	.L502
 5843              	.LVL641:
 5844              	.L650:
1627:src/display.c **** 		exp = z->exponent + z->digits - 1;
 5845              		.loc 1 1627 3 is_stmt 1 view .LVU1866
 5846 059e 2B4A     		ldr	r2, .L671+16
 5847 05a0 3146     		mov	r1, r6
 5848 05a2 3046     		mov	r0, r6
 5849 05a4 FFF7FEFF 		bl	decNumberNormalize
 5850              	.LVL642:
1628:src/display.c **** 		z->exponent = 0;
 5851              		.loc 1 1628 3 view .LVU1867
1628:src/display.c **** 		z->exponent = 0;
 5852              		.loc 1 1628 21 is_stmt 0 view .LVU1868
 5853 05a8 D6E90023 		ldrd	r2, r3, [r6]
 5854 05ac 03EB020A 		add	r10, r3, r2
1628:src/display.c **** 		z->exponent = 0;
 5855              		.loc 1 1628 7 view .LVU1869
 5856 05b0 0AF1FF33 		add	r3, r10, #-1
1629:src/display.c **** 	}
 5857              		.loc 1 1629 15 view .LVU1870
 5858 05b4 C6F804B0 		str	fp, [r6, #4]
1628:src/display.c **** 		z->exponent = 0;
 5859              		.loc 1 1628 7 view .LVU1871
 5860 05b8 0193     		str	r3, [sp, #4]
 5861              	.LVL643:
1629:src/display.c **** 	}
 5862              		.loc 1 1629 3 is_stmt 1 view .LVU1872
 5863 05ba 45E5     		b	.L441
 5864              	.LVL644:
 5865              	.L656:
1701:src/display.c **** 	for (; *q == '0'; q++);
 5866              		.loc 1 1701 3 view .LVU1873
1701:src/display.c **** 	for (; *q == '0'; q++);
 5867              		.loc 1 1701 3 is_stmt 0 view .LVU1874
 5868 05bc 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1584:src/display.c **** 	int trimzeros = 0;
ARM GAS  /tmp/ccTlkAzC.s 			page 182


 5869              		.loc 1 1584 6 view .LVU1875
 5870 05be 4FF0000E 		mov	lr, #0
1701:src/display.c **** 	for (; *q == '0'; q++);
 5871              		.loc 1 1701 4 view .LVU1876
 5872 05c2 0136     		adds	r6, r6, #1
 5873              	.LVL645:
1701:src/display.c **** 	for (; *q == '0'; q++);
 5874              		.loc 1 1701 4 view .LVU1877
 5875 05c4 91E5     		b	.L463
 5876              	.LVL646:
 5877              	.L658:
1717:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5878              		.loc 1 1717 4 is_stmt 1 view .LVU1878
1718:src/display.c **** 				*p++ = *q++;
 5879              		.loc 1 1718 11 is_stmt 0 view .LVU1879
 5880 05c6 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
1718:src/display.c **** 				*p++ = *q++;
 5881              		.loc 1 1718 10 view .LVU1880
 5882 05c8 A3F13002 		sub	r2, r3, #48
 5883 05cc 092A     		cmp	r2, #9
1717:src/display.c **** 			while (*q >= '0' && *q <= '9')
 5884              		.loc 1 1717 5 view .LVU1881
 5885 05ce 06F10106 		add	r6, r6, #1
 5886              	.LVL647:
1718:src/display.c **** 				*p++ = *q++;
 5887              		.loc 1 1718 4 is_stmt 1 view .LVU1882
1718:src/display.c **** 				*p++ = *q++;
 5888              		.loc 1 1718 10 view .LVU1883
 5889 05d2 3FF6B3AD 		bhi	.L468
 5890              	.LVL648:
 5891              	.L473:
1719:src/display.c **** 		}
 5892              		.loc 1 1719 5 view .LVU1884
1719:src/display.c **** 		}
 5893              		.loc 1 1719 10 is_stmt 0 view .LVU1885
 5894 05d6 01F8013B 		strb	r3, [r1], #1
 5895              	.LVL649:
1718:src/display.c **** 				*p++ = *q++;
 5896              		.loc 1 1718 10 is_stmt 1 view .LVU1886
1718:src/display.c **** 				*p++ = *q++;
 5897              		.loc 1 1718 11 is_stmt 0 view .LVU1887
 5898 05da 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
1718:src/display.c **** 				*p++ = *q++;
 5899              		.loc 1 1718 10 view .LVU1888
 5900 05de A3F13002 		sub	r2, r3, #48
 5901 05e2 092A     		cmp	r2, #9
 5902 05e4 F7D9     		bls	.L473
 5903 05e6 A9E5     		b	.L468
 5904              	.LVL650:
 5905              	.L651:
1635:src/display.c **** 			x[0] = '-';
 5906              		.loc 1 1635 33 discriminator 1 view .LVU1889
 5907 05e8 6B20     		movs	r0, #107
 5908 05ea FFF7FEFF 		bl	get_user_flag
 5909              	.LVL651:
1635:src/display.c **** 			x[0] = '-';
 5910              		.loc 1 1635 30 discriminator 1 view .LVU1890
ARM GAS  /tmp/ccTlkAzC.s 			page 183


 5911 05ee 0028     		cmp	r0, #0
 5912 05f0 3FF43CAD 		beq	.L443
1636:src/display.c **** 			x[1] = '0';
 5913              		.loc 1 1636 4 is_stmt 1 view .LVU1891
1637:src/display.c **** 		} else
 5914              		.loc 1 1637 4 view .LVU1892
1636:src/display.c **** 			x[1] = '0';
 5915              		.loc 1 1636 9 is_stmt 0 view .LVU1893
 5916 05f4 43F22D03 		movw	r3, #12333
 5917 05f8 ADF81430 		strh	r3, [sp, #20]	@ movhi
1637:src/display.c **** 		} else
 5918              		.loc 1 1637 9 view .LVU1894
 5919 05fc 39E5     		b	.L444
 5920              	.LVL652:
 5921              	.L654:
1694:src/display.c **** 		CLR_MANT_SIGN;
 5922              		.loc 1 1694 3 is_stmt 1 view .LVU1895
 5923              	.LBB372:
 5924              	.LBI372:
 301:src/display.c **** {
 5925              		.loc 1 301 13 view .LVU1896
 5926              	.LBB373:
 303:src/display.c **** 	clr_dot(EXP_SIGN);
 5927              		.loc 1 303 2 view .LVU1897
 304:src/display.c **** }
 5928              		.loc 1 304 2 view .LVU1898
 303:src/display.c **** 	clr_dot(EXP_SIGN);
 5929              		.loc 1 303 26 is_stmt 0 view .LVU1899
 5930 05fe 144B     		ldr	r3, .L671+20
 5931 0600 2022     		movs	r2, #32
 304:src/display.c **** }
 5932              		.loc 1 304 2 view .LVU1900
 5933 0602 8220     		movs	r0, #130
 303:src/display.c **** 	clr_dot(EXP_SIGN);
 5934              		.loc 1 303 26 view .LVU1901
 5935 0604 1A70     		strb	r2, [r3]
 304:src/display.c **** }
 5936              		.loc 1 304 2 view .LVU1902
 5937 0606 FFF7FEFF 		bl	clr_dot
 5938              	.LVL653:
 5939              	.LBE373:
 5940              	.LBE372:
1695:src/display.c **** 	}
 5941              		.loc 1 1695 3 is_stmt 1 view .LVU1903
 5942              	.LBB374:
 5943              	.LBI374:
 289:src/display.c **** {
 5944              		.loc 1 289 13 view .LVU1904
 5945              	.LBB375:
 291:src/display.c **** 	clr_dot(MANT_SIGN);
 5946              		.loc 1 291 2 view .LVU1905
 291:src/display.c **** 	clr_dot(MANT_SIGN);
 5947              		.loc 1 291 24 is_stmt 0 view .LVU1906
 5948 060a 124B     		ldr	r3, .L671+24
 5949 060c 2022     		movs	r2, #32
 292:src/display.c **** }
 5950              		.loc 1 292 2 view .LVU1907
ARM GAS  /tmp/ccTlkAzC.s 			page 184


 5951 060e 8120     		movs	r0, #129
 291:src/display.c **** 	clr_dot(MANT_SIGN);
 5952              		.loc 1 291 24 view .LVU1908
 5953 0610 1A70     		strb	r2, [r3]
 292:src/display.c **** }
 5954              		.loc 1 292 2 is_stmt 1 view .LVU1909
 5955 0612 FFF7FEFF 		bl	clr_dot
 5956              	.LVL654:
 293:src/display.c **** 
 5957              		.loc 1 293 1 is_stmt 0 view .LVU1910
 5958 0616 5FE5     		b	.L461
 5959              	.LVL655:
 5960              	.L534:
 293:src/display.c **** 
 5961              		.loc 1 293 1 view .LVU1911
 5962              	.LBE375:
 5963              	.LBE374:
1910:src/display.c **** 				SET_MANT_SIGN;
 5964              		.loc 1 1910 4 is_stmt 1 view .LVU1912
 5965 0618 0193     		str	r3, [sp, #4]
1910:src/display.c **** 				SET_MANT_SIGN;
 5966              		.loc 1 1910 7 is_stmt 0 view .LVU1913
 5967 061a 002E     		cmp	r6, #0
 5968 061c 40F00281 		bne	.L537
1911:src/display.c **** 			else
 5969              		.loc 1 1911 5 is_stmt 1 view .LVU1914
 5970              	.LBB376:
 5971              	.LBI376:
 283:src/display.c **** {
 5972              		.loc 1 283 13 view .LVU1915
 5973              	.LBB377:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 5974              		.loc 1 285 2 view .LVU1916
 285:src/display.c **** 	set_dot(MANT_SIGN);
 5975              		.loc 1 285 24 is_stmt 0 view .LVU1917
 5976 0620 0C4A     		ldr	r2, .L671+24
 5977 0622 2D21     		movs	r1, #45
 286:src/display.c **** }
 5978              		.loc 1 286 2 view .LVU1918
 5979 0624 8120     		movs	r0, #129
 285:src/display.c **** 	set_dot(MANT_SIGN);
 5980              		.loc 1 285 24 view .LVU1919
 5981 0626 1170     		strb	r1, [r2]
 286:src/display.c **** }
 5982              		.loc 1 286 2 is_stmt 1 view .LVU1920
 5983 0628 FFF7FEFF 		bl	set_dot
 5984              	.LVL656:
 286:src/display.c **** }
 5985              		.loc 1 286 2 is_stmt 0 view .LVU1921
 5986              	.LBE377:
 5987              	.LBE376:
1916:src/display.c **** 		if (c == '.') {
 5988              		.loc 1 1916 12 is_stmt 1 view .LVU1922
1916:src/display.c **** 		if (c == '.') {
 5989              		.loc 1 1916 18 is_stmt 0 view .LVU1923
 5990 062c 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 5991              	.LVL657:
ARM GAS  /tmp/ccTlkAzC.s 			page 185


1916:src/display.c **** 		if (c == '.') {
 5992              		.loc 1 1916 2 view .LVU1924
 5993 0630 019B     		ldr	r3, [sp, #4]
 5994 0632 002A     		cmp	r2, #0
 5995 0634 7FF449AE 		bne	.L536
 5996 0638 62E6     		b	.L535
 5997              	.L672:
 5998 063a 00BF     		.align	2
 5999              	.L671:
 6000 063c 00000000 		.word	StateWhileOn
 6001 0640 00000000 		.word	PersistentRam
 6002 0644 56555555 		.word	1431655766
 6003 0648 00000000 		.word	.LANCHOR1
 6004 064c 00000000 		.word	Ctx
 6005 0650 00000000 		.word	LastDisplayedExponent
 6006 0654 00000000 		.word	LastDisplayedNumber
 6007              	.LVL658:
 6008              	.L652:
1644:src/display.c **** 		return;
 6009              		.loc 1 1644 3 is_stmt 1 view .LVU1925
 6010              	.LBB378:
 6011              	.LBI378:
1432:src/display.c **** 	const int dbl = is_dblmode();
 6012              		.loc 1 1432 13 view .LVU1926
 6013              	.LBB379:
1433:src/display.c **** 	char *p;
 6014              		.loc 1 1433 2 view .LVU1927
1433:src/display.c **** 	char *p;
 6015              		.loc 1 1433 18 is_stmt 0 view .LVU1928
 6016 0658 FFF7FEFF 		bl	is_dblmode
 6017              	.LVL659:
1449:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6018              		.loc 1 1449 5 view .LVU1929
 6019 065c 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 6020 0660 2D2B     		cmp	r3, #45
1433:src/display.c **** 	char *p;
 6021              		.loc 1 1433 18 view .LVU1930
 6022 0662 0446     		mov	r4, r0
 6023              	.LVL660:
1434:src/display.c **** 	int i, j;
 6024              		.loc 1 1434 2 is_stmt 1 view .LVU1931
1435:src/display.c **** 	char *upper_str;
 6025              		.loc 1 1435 2 view .LVU1932
1436:src/display.c **** 	enum separator_modes separator_mode;
 6026              		.loc 1 1436 2 view .LVU1933
1437:src/display.c **** 	char decimal_mark;
 6027              		.loc 1 1437 2 view .LVU1934
1438:src/display.c **** 	char thousands_sep;
 6028              		.loc 1 1438 2 view .LVU1935
1439:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6029              		.loc 1 1439 2 view .LVU1936
1445:src/display.c **** #endif
 6030              		.loc 1 1445 2 view .LVU1937
1447:src/display.c **** 
 6031              		.loc 1 1447 2 view .LVU1938
1449:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6032              		.loc 1 1449 2 view .LVU1939
ARM GAS  /tmp/ccTlkAzC.s 			page 186


1449:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6033              		.loc 1 1449 5 is_stmt 0 view .LVU1940
 6034 0664 00F02A81 		beq	.L667
1462:src/display.c **** 
 6035              		.loc 1 1462 16 view .LVU1941
 6036 0668 0026     		movs	r6, #0
 6037              	.LVL661:
 6038              	.L446:
1464:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6039              		.loc 1 1464 2 is_stmt 1 view .LVU1942
1464:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6040              		.loc 1 1464 6 is_stmt 0 view .LVU1943
 6041 066a 0021     		movs	r1, #0
 6042 066c 4046     		mov	r0, r8
 6043 066e FFF7FEFF 		bl	find_char
 6044              	.LVL662:
1465:src/display.c **** 
 6045              		.loc 1 1465 2 is_stmt 1 view .LVU1944
1465:src/display.c **** 
 6046              		.loc 1 1465 23 is_stmt 0 view .LVU1945
 6047 0672 A0EB0802 		sub	r2, r0, r8
1465:src/display.c **** 
 6048              		.loc 1 1465 2 view .LVU1946
 6049 0676 C2F12202 		rsb	r2, r2, #34
 6050 067a 3021     		movs	r1, #48
 6051 067c FFF7FEFF 		bl	xset
 6052              	.LVL663:
1467:src/display.c **** 		separator_mode = SEP_COMMA;
 6053              		.loc 1 1467 2 is_stmt 1 view .LVU1947
1467:src/display.c **** 		separator_mode = SEP_COMMA;
 6054              		.loc 1 1467 18 is_stmt 0 view .LVU1948
 6055 0680 B14A     		ldr	r2, .L673
1478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6056              		.loc 1 1478 6 view .LVU1949
 6057 0682 99F81430 		ldrb	r3, [r9, #20]	@ zero_extendqisi2
1467:src/display.c **** 		separator_mode = SEP_COMMA;
 6058              		.loc 1 1467 5 view .LVU1950
 6059 0686 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1475:src/display.c **** 	}
 6060              		.loc 1 1475 17 view .LVU1951
 6061 0688 002A     		cmp	r2, #0
 6062 068a 15BF     		itete	ne
 6063 068c 4FF0020A 		movne	r10, #2
 6064 0690 2C27     		moveq	r7, #44
 6065 0692 2E27     		movne	r7, #46
 6066              	.LVL664:
1475:src/display.c **** 	}
 6067              		.loc 1 1475 17 view .LVU1952
 6068 0694 2E25     		moveq	r5, #46
 6069 0696 18BF     		it	ne
 6070 0698 2C25     		movne	r5, #44
 6071              	.LVL665:
1478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6072              		.loc 1 1478 2 is_stmt 1 view .LVU1953
1478:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6073              		.loc 1 1478 5 is_stmt 0 view .LVU1954
 6074 069a 13F0380F 		tst	r3, #56
ARM GAS  /tmp/ccTlkAzC.s 			page 187


 6075 069e 40F0C880 		bne	.L668
1505:src/display.c **** 		xcopy(x + 2, x + 1, 16);
 6076              		.loc 1 1505 3 is_stmt 1 view .LVU1955
 6077              	.LVL666:
1506:src/display.c **** 		x[1] = decimal_mark;
 6078              		.loc 1 1506 3 view .LVU1956
 6079 06a2 1022     		movs	r2, #16
 6080 06a4 08F10101 		add	r1, r8, #1
 6081 06a8 08F10200 		add	r0, r8, #2
 6082 06ac FFF7FEFF 		bl	xcopy
 6083              	.LVL667:
1507:src/display.c **** 		if (grouping) {
 6084              		.loc 1 1507 3 view .LVU1957
1509:src/display.c **** 			x[5] = thousands_sep;
 6085              		.loc 1 1509 4 is_stmt 0 view .LVU1958
 6086 06b0 0D22     		movs	r2, #13
 6087 06b2 08F10501 		add	r1, r8, #5
 6088 06b6 08F10600 		add	r0, r8, #6
1507:src/display.c **** 		if (grouping) {
 6089              		.loc 1 1507 8 view .LVU1959
 6090 06ba 88F80150 		strb	r5, [r8, #1]
1508:src/display.c **** 			xcopy(x + 6, x + 5, 13);
 6091              		.loc 1 1508 3 is_stmt 1 view .LVU1960
1509:src/display.c **** 			x[5] = thousands_sep;
 6092              		.loc 1 1509 4 view .LVU1961
 6093 06be FFF7FEFF 		bl	xcopy
 6094              	.LVL668:
1510:src/display.c **** 			x += 9;
 6095              		.loc 1 1510 4 view .LVU1962
1511:src/display.c **** 		}
 6096              		.loc 1 1511 6 is_stmt 0 view .LVU1963
 6097 06c2 08F10905 		add	r5, r8, #9
 6098              	.LVL669:
1510:src/display.c **** 			x += 9;
 6099              		.loc 1 1510 9 view .LVU1964
 6100 06c6 88F80570 		strb	r7, [r8, #5]
1511:src/display.c **** 		}
 6101              		.loc 1 1511 4 is_stmt 1 view .LVU1965
 6102              	.LVL670:
1514:src/display.c **** 			if (exp < 0) {
 6103              		.loc 1 1514 3 view .LVU1966
1514:src/display.c **** 			if (exp < 0) {
 6104              		.loc 1 1514 6 is_stmt 0 view .LVU1967
 6105 06ca 002C     		cmp	r4, #0
 6106 06cc 00F0F380 		beq	.L450
1515:src/display.c **** 				x[9] = '-';
 6107              		.loc 1 1515 4 is_stmt 1 view .LVU1968
1515:src/display.c **** 				x[9] = '-';
 6108              		.loc 1 1515 7 is_stmt 0 view .LVU1969
 6109 06d0 019B     		ldr	r3, [sp, #4]
1523:src/display.c **** 		}
 6110              		.loc 1 1523 16 view .LVU1970
 6111 06d2 9E49     		ldr	r1, .L673+4
1515:src/display.c **** 				x[9] = '-';
 6112              		.loc 1 1515 7 view .LVU1971
 6113 06d4 002B     		cmp	r3, #0
1516:src/display.c **** 				exp = -exp;
ARM GAS  /tmp/ccTlkAzC.s 			page 188


 6114              		.loc 1 1516 5 is_stmt 1 view .LVU1972
1517:src/display.c **** 			}
 6115              		.loc 1 1517 5 view .LVU1973
1517:src/display.c **** 			}
 6116              		.loc 1 1517 9 is_stmt 0 view .LVU1974
 6117 06d6 BCBF     		itt	lt
 6118 06d8 5B42     		rsblt	r3, r3, #0
 6119 06da 0193     		strlt	r3, [sp, #4]
 6120              	.LVL671:
1521:src/display.c **** 			x[10] = '0' + j;
 6121              		.loc 1 1521 6 view .LVU1975
 6122 06dc 0198     		ldr	r0, [sp, #4]
 6123 06de 9C4B     		ldr	r3, .L673+8
1516:src/display.c **** 				exp = -exp;
 6124              		.loc 1 1516 10 view .LVU1976
 6125 06e0 B4BF     		ite	lt
 6126 06e2 2D22     		movlt	r2, #45
1520:src/display.c **** 			j = exp / 1000;
 6127              		.loc 1 1520 10 view .LVU1977
 6128 06e4 2022     		movge	r2, #32
 6129 06e6 88F81220 		strb	r2, [r8, #18]
1521:src/display.c **** 			x[10] = '0' + j;
 6130              		.loc 1 1521 4 is_stmt 1 view .LVU1978
1521:src/display.c **** 			x[10] = '0' + j;
 6131              		.loc 1 1521 6 is_stmt 0 view .LVU1979
 6132 06ea 0246     		mov	r2, r0
 6133 06ec A3FB0223 		umull	r2, r3, r3, r2
 6134 06f0 9B09     		lsrs	r3, r3, #6
 6135              	.LVL672:
1522:src/display.c **** 			exp -= 1000 * j;
 6136              		.loc 1 1522 4 is_stmt 1 view .LVU1980
1522:src/display.c **** 			exp -= 1000 * j;
 6137              		.loc 1 1522 16 is_stmt 0 view .LVU1981
 6138 06f2 03F13002 		add	r2, r3, #48
1523:src/display.c **** 		}
 6139              		.loc 1 1523 8 view .LVU1982
 6140 06f6 01FB0303 		mla	r3, r1, r3, r0
 6141              	.LVL673:
1523:src/display.c **** 		}
 6142              		.loc 1 1523 8 view .LVU1983
 6143 06fa 0193     		str	r3, [sp, #4]
 6144              	.LVL674:
1522:src/display.c **** 			exp -= 1000 * j;
 6145              		.loc 1 1522 10 view .LVU1984
 6146 06fc 88F81320 		strb	r2, [r8, #19]
1523:src/display.c **** 		}
 6147              		.loc 1 1523 4 is_stmt 1 view .LVU1985
 6148              	.LVL675:
 6149              	.L452:
1529:src/display.c **** 		*x = 0;
 6150              		.loc 1 1529 3 view .LVU1986
 6151 0700 0B22     		movs	r2, #11
 6152 0702 2946     		mov	r1, r5
 6153 0704 08F10A00 		add	r0, r8, #10
 6154 0708 FFF7FEFF 		bl	xcopy
 6155              	.LVL676:
1530:src/display.c **** 		set_exp(exp, 1, CNULL);
ARM GAS  /tmp/ccTlkAzC.s 			page 189


 6156              		.loc 1 1530 3 view .LVU1987
1530:src/display.c **** 		set_exp(exp, 1, CNULL);
 6157              		.loc 1 1530 6 is_stmt 0 view .LVU1988
 6158 070c 0022     		movs	r2, #0
1531:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6159              		.loc 1 1531 3 view .LVU1989
 6160 070e 0198     		ldr	r0, [sp, #4]
1530:src/display.c **** 		set_exp(exp, 1, CNULL);
 6161              		.loc 1 1530 6 view .LVU1990
 6162 0710 88F80920 		strb	r2, [r8, #9]
1531:src/display.c **** 		i = 1 * SEGS_PER_DIGIT;
 6163              		.loc 1 1531 3 is_stmt 1 view .LVU1991
 6164 0714 0121     		movs	r1, #1
 6165 0716 FFF7FEFF 		bl	set_exp
 6166              	.LVL677:
1532:src/display.c **** 	}
 6167              		.loc 1 1532 3 view .LVU1992
1532:src/display.c **** 	}
 6168              		.loc 1 1532 3 is_stmt 0 view .LVU1993
 6169 071a A8EB0606 		sub	r6, r8, r6
 6170              	.LVL678:
1532:src/display.c **** 	}
 6171              		.loc 1 1532 5 view .LVU1994
 6172 071e 0924     		movs	r4, #9
 6173              	.LVL679:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6174              		.loc 1 1535 10 is_stmt 1 view .LVU1995
 6175 0720 9AE0     		b	.L453
 6176              	.LVL680:
 6177              	.L524:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6178              		.loc 1 1535 10 is_stmt 0 view .LVU1996
 6179              	.LBE379:
 6180              	.LBE378:
1851:src/display.c **** 				obp--;
 6181              		.loc 1 1851 10 is_stmt 1 view .LVU1997
 6182 0722 4345     		cmp	r3, r8
 6183 0724 88BF     		it	hi
 6184 0726 1A46     		movhi	r2, r3
 6185 0728 7FF6B9AD 		bls	.L502
 6186              	.L526:
1852:src/display.c **** 				odig--;
 6187              		.loc 1 1852 5 discriminator 1 view .LVU1998
 6188 072c 1346     		mov	r3, r2
 6189              	.LVL681:
1852:src/display.c **** 				odig--;
 6190              		.loc 1 1852 5 is_stmt 0 discriminator 1 view .LVU1999
 6191 072e 013A     		subs	r2, r2, #1
 6192              	.LVL682:
1853:src/display.c **** 			}
 6193              		.loc 1 1853 5 is_stmt 1 discriminator 1 view .LVU2000
1851:src/display.c **** 				obp--;
 6194              		.loc 1 1851 19 is_stmt 0 discriminator 1 view .LVU2001
 6195 0730 13F8011C 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 6196 0734 3029     		cmp	r1, #48
 6197 0736 7FF4B2AD 		bne	.L502
1851:src/display.c **** 				obp--;
ARM GAS  /tmp/ccTlkAzC.s 			page 190


 6198              		.loc 1 1851 10 view .LVU2002
 6199 073a 9045     		cmp	r8, r2
1853:src/display.c **** 			}
 6200              		.loc 1 1853 9 view .LVU2003
 6201 073c 07F1FF37 		add	r7, r7, #-1
 6202              	.LVL683:
1851:src/display.c **** 				obp--;
 6203              		.loc 1 1851 10 is_stmt 1 view .LVU2004
 6204 0740 F4D1     		bne	.L526
 6205 0742 4346     		mov	r3, r8
 6206 0744 ABE5     		b	.L502
 6207              	.LVL684:
 6208              	.L513:
1836:src/display.c **** 			odig++;
 6209              		.loc 1 1836 4 view .LVU2005
1837:src/display.c **** 			*obp++ = '.';
 6210              		.loc 1 1837 4 view .LVU2006
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6211              		.loc 1 1838 4 view .LVU2007
1836:src/display.c **** 			odig++;
 6212              		.loc 1 1836 11 is_stmt 0 view .LVU2008
 6213 0746 42F63063 		movw	r3, #11824
 6214 074a ADF81430 		strh	r3, [sp, #20]	@ movhi
1839:src/display.c **** 				*obp++ = '0';
 6215              		.loc 1 1839 4 is_stmt 1 view .LVU2009
 6216              	.LVL685:
1839:src/display.c **** 				*obp++ = '0';
 6217              		.loc 1 1839 18 view .LVU2010
1839:src/display.c **** 				*obp++ = '0';
 6218              		.loc 1 1839 4 is_stmt 0 view .LVU2011
 6219 074e 6B1C     		adds	r3, r5, #1
 6220              	.LVL686:
1839:src/display.c **** 				*obp++ = '0';
 6221              		.loc 1 1839 4 view .LVU2012
 6222 0750 00F0F280 		beq	.L571
 6223 0754 C5F10101 		rsb	r1, r5, #1
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6224              		.loc 1 1838 8 view .LVU2013
 6225 0758 0DF11603 		add	r3, sp, #22
 6226              	.LVL687:
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6227              		.loc 1 1838 8 view .LVU2014
 6228 075c 4144     		add	r1, r1, r8
 6229 075e 1A46     		mov	r2, r3
1840:src/display.c **** 				odig++;
 6230              		.loc 1 1840 12 view .LVU2015
 6231 0760 3020     		movs	r0, #48
 6232              	.LVL688:
 6233              	.L522:
1840:src/display.c **** 				odig++;
 6234              		.loc 1 1840 5 is_stmt 1 discriminator 3 view .LVU2016
1840:src/display.c **** 				odig++;
 6235              		.loc 1 1840 12 is_stmt 0 discriminator 3 view .LVU2017
 6236 0762 02F8010B 		strb	r0, [r2], #1
 6237              	.LVL689:
1841:src/display.c **** 				dd--;
 6238              		.loc 1 1841 5 is_stmt 1 discriminator 3 view .LVU2018
ARM GAS  /tmp/ccTlkAzC.s 			page 191


1842:src/display.c **** 			}
 6239              		.loc 1 1842 5 discriminator 3 view .LVU2019
1839:src/display.c **** 				*obp++ = '0';
 6240              		.loc 1 1839 23 discriminator 3 view .LVU2020
1839:src/display.c **** 				*obp++ = '0';
 6241              		.loc 1 1839 18 discriminator 3 view .LVU2021
1839:src/display.c **** 				*obp++ = '0';
 6242              		.loc 1 1839 4 is_stmt 0 discriminator 3 view .LVU2022
 6243 0766 8A42     		cmp	r2, r1
 6244 0768 FBD1     		bne	.L522
 6245 076a AA44     		add	r10, r10, r5
 6246 076c EA43     		mvns	r2, r5
 6247              	.LVL690:
1839:src/display.c **** 				*obp++ = '0';
 6248              		.loc 1 1839 4 discriminator 3 view .LVU2023
 6249 076e 0AF1010A 		add	r10, r10, #1
 6250 0772 1344     		add	r3, r3, r2
 6251 0774 6F42     		rsbs	r7, r5, #0
 6252              	.L521:
 6253              	.LVL691:
1844:src/display.c **** 				*obp++ = *p++;
 6254              		.loc 1 1844 10 is_stmt 1 view .LVU2024
 6255 0776 BAF1000F 		cmp	r10, #0
1844:src/display.c **** 				*obp++ = *p++;
 6256              		.loc 1 1844 13 is_stmt 0 view .LVU2025
 6257 077a 0AF1FF32 		add	r2, r10, #-1
 6258              	.LVL692:
1844:src/display.c **** 				*obp++ = *p++;
 6259              		.loc 1 1844 10 view .LVU2026
 6260 077e 7FF708AF 		ble	.L518
 6261 0782 9A44     		add	r10, r10, r3
 6262 0784 0AF1FF30 		add	r0, r10, #-1
 6263 0788 013B     		subs	r3, r3, #1
 6264              	.LVL693:
 6265              	.L523:
1845:src/display.c **** 				odig++;
 6266              		.loc 1 1845 5 is_stmt 1 view .LVU2027
1845:src/display.c **** 				odig++;
 6267              		.loc 1 1845 12 is_stmt 0 view .LVU2028
 6268 078a 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6269              	.LVL694:
1845:src/display.c **** 				odig++;
 6270              		.loc 1 1845 12 view .LVU2029
 6271 078e 03F8011F 		strb	r1, [r3, #1]!
1846:src/display.c **** 			}
 6272              		.loc 1 1846 5 is_stmt 1 view .LVU2030
1844:src/display.c **** 				*obp++ = *p++;
 6273              		.loc 1 1844 10 view .LVU2031
1844:src/display.c **** 				*obp++ = *p++;
 6274              		.loc 1 1844 10 is_stmt 0 view .LVU2032
 6275 0792 8342     		cmp	r3, r0
 6276 0794 F9D1     		bne	.L523
 6277              	.LVL695:
1844:src/display.c **** 				*obp++ = *p++;
 6278              		.loc 1 1844 10 view .LVU2033
 6279 0796 0137     		adds	r7, r7, #1
 6280 0798 1744     		add	r7, r7, r2
ARM GAS  /tmp/ccTlkAzC.s 			page 192


 6281 079a 5346     		mov	r3, r10
 6282 079c F9E6     		b	.L518
 6283              	.LVL696:
 6284              	.L528:
1862:src/display.c **** 			odig++;
 6285              		.loc 1 1862 4 is_stmt 1 view .LVU2034
1862:src/display.c **** 			odig++;
 6286              		.loc 1 1862 11 is_stmt 0 view .LVU2035
 6287 079e 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6288 07a2 8DF81430 		strb	r3, [sp, #20]
1863:src/display.c **** 			dd--;
 6289              		.loc 1 1863 4 is_stmt 1 view .LVU2036
 6290              	.LVL697:
1864:src/display.c **** 			exp--;
 6291              		.loc 1 1864 4 view .LVU2037
1864:src/display.c **** 			exp--;
 6292              		.loc 1 1864 6 is_stmt 0 view .LVU2038
 6293 07a6 0AF1FF3A 		add	r10, r10, #-1
 6294              	.LVL698:
1865:src/display.c **** 		case -2:
 6295              		.loc 1 1865 4 is_stmt 1 view .LVU2039
1865:src/display.c **** 		case -2:
 6296              		.loc 1 1865 7 is_stmt 0 view .LVU2040
 6297 07aa 013D     		subs	r5, r5, #1
 6298              	.LVL699:
1865:src/display.c **** 		case -2:
 6299              		.loc 1 1865 7 view .LVU2041
 6300 07ac 0327     		movs	r7, #3
1862:src/display.c **** 			odig++;
 6301              		.loc 1 1862 15 view .LVU2042
 6302 07ae 0DF14909 		add	r9, sp, #73
 6303              	.LVL700:
1862:src/display.c **** 			odig++;
 6304              		.loc 1 1862 8 view .LVU2043
 6305 07b2 0DF11501 		add	r1, sp, #21
 6306              	.LVL701:
1862:src/display.c **** 			odig++;
 6307              		.loc 1 1862 8 view .LVU2044
 6308 07b6 A6E6     		b	.L530
 6309              	.LVL702:
 6310              	.L476:
1727:src/display.c **** 			/* We might have push the fixed decimals off the
 6311              		.loc 1 1727 4 is_stmt 1 view .LVU2045
1731:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6312              		.loc 1 1731 4 view .LVU2046
1731:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6313              		.loc 1 1731 21 is_stmt 0 view .LVU2047
 6314 07b8 05EB0A03 		add	r3, r5, r10
1731:src/display.c **** 				dd = (*display_digits - 1) - extra_digits;
 6315              		.loc 1 1731 7 view .LVU2048
 6316 07bc 9E42     		cmp	r6, r3
1732:src/display.c **** 		}
 6317              		.loc 1 1732 5 is_stmt 1 view .LVU2049
1732:src/display.c **** 		}
 6318              		.loc 1 1732 27 is_stmt 0 view .LVU2050
 6319 07be DCBF     		itt	le
 6320 07c0 06F1FF3A 		addle	r10, r6, #-1
ARM GAS  /tmp/ccTlkAzC.s 			page 193


 6321              	.LVL703:
1732:src/display.c **** 		}
 6322              		.loc 1 1732 8 view .LVU2051
 6323 07c4 AAEB050A 		suble	r10, r10, r5
 6324              	.LVL704:
1732:src/display.c **** 		}
 6325              		.loc 1 1732 8 view .LVU2052
 6326 07c8 2A46     		mov	r2, r5
 6327 07ca BDE4     		b	.L474
 6328              	.LVL705:
 6329              	.L568:
1768:src/display.c **** 			case -1:
 6330              		.loc 1 1768 22 view .LVU2053
 6331 07cc 0227     		movs	r7, #2
 6332 07ce 4046     		mov	r0, r8
 6333              	.LVL706:
 6334              	.L501:
1777:src/display.c **** 				odig++;
 6335              		.loc 1 1777 5 is_stmt 1 view .LVU2054
1777:src/display.c **** 				odig++;
 6336              		.loc 1 1777 12 is_stmt 0 view .LVU2055
 6337 07d0 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6338              	.LVL707:
1777:src/display.c **** 				odig++;
 6339              		.loc 1 1777 12 view .LVU2056
 6340 07d4 00F8013B 		strb	r3, [r0], #1
 6341              	.LVL708:
1778:src/display.c **** 				dd--;
 6342              		.loc 1 1778 5 is_stmt 1 view .LVU2057
1779:src/display.c **** 				exp--;
 6343              		.loc 1 1779 5 view .LVU2058
1780:src/display.c **** 			case 0:
 6344              		.loc 1 1780 5 view .LVU2059
1780:src/display.c **** 			case 0:
 6345              		.loc 1 1780 8 is_stmt 0 view .LVU2060
 6346 07d8 013D     		subs	r5, r5, #1
 6347              	.LVL709:
 6348              	.L498:
1782:src/display.c **** 			};
 6349              		.loc 1 1782 5 is_stmt 1 view .LVU2061
1783:src/display.c **** 			*obp++ = *p++;
 6350              		.loc 1 1783 5 view .LVU2062
1784:src/display.c **** 			odig++;
 6351              		.loc 1 1784 4 view .LVU2063
1784:src/display.c **** 			odig++;
 6352              		.loc 1 1784 15 is_stmt 0 view .LVU2064
 6353 07da 4946     		mov	r1, r9
 6354              	.LVL710:
1784:src/display.c **** 			odig++;
 6355              		.loc 1 1784 11 view .LVU2065
 6356 07dc 0346     		mov	r3, r0
 6357 07de 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6358              	.LVL711:
1784:src/display.c **** 			odig++;
 6359              		.loc 1 1784 11 view .LVU2066
 6360 07e2 03F802CB 		strb	ip, [r3], #2
1785:src/display.c **** 			*obp++ = '.';
ARM GAS  /tmp/ccTlkAzC.s 			page 194


 6361              		.loc 1 1785 4 is_stmt 1 view .LVU2067
1786:src/display.c **** 			for (i=1; i<count; i++) {
 6362              		.loc 1 1786 4 view .LVU2068
 6363              	.LVL712:
1787:src/display.c **** 				*obp++ = *p++;
 6364              		.loc 1 1787 4 is_stmt 0 view .LVU2069
 6365 07e6 012A     		cmp	r2, #1
1786:src/display.c **** 			for (i=1; i<count; i++) {
 6366              		.loc 1 1786 11 view .LVU2070
 6367 07e8 4FF02E0C 		mov	ip, #46
 6368 07ec 80F801C0 		strb	ip, [r0, #1]
1787:src/display.c **** 				*obp++ = *p++;
 6369              		.loc 1 1787 4 is_stmt 1 view .LVU2071
 6370              	.LVL713:
1787:src/display.c **** 				*obp++ = *p++;
 6371              		.loc 1 1787 14 view .LVU2072
1787:src/display.c **** 				*obp++ = *p++;
 6372              		.loc 1 1787 4 is_stmt 0 view .LVU2073
 6373 07f0 53DD     		ble	.L569
1787:src/display.c **** 				*obp++ = *p++;
 6374              		.loc 1 1787 4 view .LVU2074
 6375 07f2 0130     		adds	r0, r0, #1
 6376 07f4 9144     		add	r9, r9, r2
 6377              	.LVL714:
 6378              	.L503:
1788:src/display.c **** 				odig++;
 6379              		.loc 1 1788 5 is_stmt 1 discriminator 3 view .LVU2075
1788:src/display.c **** 				odig++;
 6380              		.loc 1 1788 12 is_stmt 0 discriminator 3 view .LVU2076
 6381 07f6 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 6382              	.LVL715:
1788:src/display.c **** 				odig++;
 6383              		.loc 1 1788 12 discriminator 3 view .LVU2077
 6384 07fa 00F801CF 		strb	ip, [r0, #1]!
1789:src/display.c **** 			}
 6385              		.loc 1 1789 5 is_stmt 1 discriminator 3 view .LVU2078
1787:src/display.c **** 				*obp++ = *p++;
 6386              		.loc 1 1787 23 discriminator 3 view .LVU2079
1787:src/display.c **** 				*obp++ = *p++;
 6387              		.loc 1 1787 14 discriminator 3 view .LVU2080
1787:src/display.c **** 				*obp++ = *p++;
 6388              		.loc 1 1787 4 is_stmt 0 discriminator 3 view .LVU2081
 6389 07fe 4945     		cmp	r1, r9
 6390 0800 F9D1     		bne	.L503
 6391 0802 013A     		subs	r2, r2, #1
 6392              	.LVL716:
1787:src/display.c **** 				*obp++ = *p++;
 6393              		.loc 1 1787 4 discriminator 3 view .LVU2082
 6394 0804 1344     		add	r3, r3, r2
 6395 0806 1744     		add	r7, r7, r2
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6396              		.loc 1 1791 13 view .LVU2083
 6397 0808 4FF0010B 		mov	fp, #1
 6398 080c 47E5     		b	.L502
 6399              	.LVL717:
 6400              	.L499:
1771:src/display.c **** 				odig++;
ARM GAS  /tmp/ccTlkAzC.s 			page 195


 6401              		.loc 1 1771 5 is_stmt 1 view .LVU2084
1771:src/display.c **** 				odig++;
 6402              		.loc 1 1771 12 is_stmt 0 view .LVU2085
 6403 080e 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 6404 0812 8DF81430 		strb	r3, [sp, #20]
1772:src/display.c **** 				dd--;
 6405              		.loc 1 1772 5 is_stmt 1 view .LVU2086
 6406              	.LVL718:
1773:src/display.c **** 				exp--;
 6407              		.loc 1 1773 5 view .LVU2087
1774:src/display.c **** 			case -2:
 6408              		.loc 1 1774 5 view .LVU2088
1774:src/display.c **** 			case -2:
 6409              		.loc 1 1774 8 is_stmt 0 view .LVU2089
 6410 0816 013D     		subs	r5, r5, #1
 6411              	.LVL719:
1774:src/display.c **** 			case -2:
 6412              		.loc 1 1774 8 view .LVU2090
 6413 0818 0327     		movs	r7, #3
1771:src/display.c **** 				odig++;
 6414              		.loc 1 1771 16 view .LVU2091
 6415 081a 0DF14909 		add	r9, sp, #73
 6416              	.LVL720:
1771:src/display.c **** 				odig++;
 6417              		.loc 1 1771 9 view .LVU2092
 6418 081e 0DF11500 		add	r0, sp, #21
 6419              	.LVL721:
1771:src/display.c **** 				odig++;
 6420              		.loc 1 1771 9 view .LVU2093
 6421 0822 D5E7     		b	.L501
 6422              	.LVL722:
 6423              	.L537:
1913:src/display.c **** 		}
 6424              		.loc 1 1913 5 is_stmt 1 view .LVU2094
 6425 0824 2D21     		movs	r1, #45
 6426 0826 A6F10900 		sub	r0, r6, #9
 6427 082a FFF7FEFF 		bl	set_dig
 6428              	.LVL723:
 6429 082e 019B     		ldr	r3, [sp, #4]
 6430 0830 46E5     		b	.L533
 6431              	.LVL724:
 6432              	.L668:
 6433              	.LBB388:
 6434              	.LBB386:
 6435              	.LBB380:
1480:src/display.c **** 			'\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6436              		.loc 1 1480 3 view .LVU2095
1483:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6437              		.loc 1 1483 3 view .LVU2096
1483:src/display.c **** 		xcopy(upper_str, small_dots, 13);
 6438              		.loc 1 1483 13 is_stmt 0 view .LVU2097
 6439 0832 08F10306 		add	r6, r8, #3
 6440              	.LVL725:
1484:src/display.c **** 		if (grouping) {
 6441              		.loc 1 1484 3 is_stmt 1 view .LVU2098
 6442 0836 4749     		ldr	r1, .L673+12
 6443 0838 0D22     		movs	r2, #13
ARM GAS  /tmp/ccTlkAzC.s 			page 196


 6444 083a 3046     		mov	r0, r6
 6445 083c FFF7FEFF 		bl	xcopy
 6446              	.LVL726:
1485:src/display.c **** 			xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6447              		.loc 1 1485 3 view .LVU2099
1486:src/display.c **** 			upper_str[13 + 3] = thousands_sep;
 6448              		.loc 1 1486 4 view .LVU2100
 6449 0840 1322     		movs	r2, #19
 6450 0842 08EB0201 		add	r1, r8, r2
 6451 0846 08F11400 		add	r0, r8, #20
 6452 084a FFF7FEFF 		bl	xcopy
 6453              	.LVL727:
1487:src/display.c **** 			x += 3 + 13 + 7;
 6454              		.loc 1 1487 4 view .LVU2101
1488:src/display.c **** 		}
 6455              		.loc 1 1488 6 is_stmt 0 view .LVU2102
 6456 084e 08F11705 		add	r5, r8, #23
 6457              	.LVL728:
1487:src/display.c **** 			x += 3 + 13 + 7;
 6458              		.loc 1 1487 22 view .LVU2103
 6459 0852 88F81370 		strb	r7, [r8, #19]
1488:src/display.c **** 		}
 6460              		.loc 1 1488 4 is_stmt 1 view .LVU2104
 6461              	.LVL729:
1501:src/display.c **** 		i = 3 * SEGS_PER_DIGIT;
 6462              		.loc 1 1501 3 view .LVU2105
1502:src/display.c **** 	}
 6463              		.loc 1 1502 3 view .LVU2106
1502:src/display.c **** 	}
 6464              		.loc 1 1502 5 is_stmt 0 view .LVU2107
 6465 0856 1B24     		movs	r4, #27
 6466              	.LVL730:
 6467              	.L453:
1502:src/display.c **** 	}
 6468              		.loc 1 1502 5 view .LVU2108
 6469              	.LBE380:
1536:src/display.c **** 		}
 6470              		.loc 1 1536 4 is_stmt 1 view .LVU2109
 6471              	.LBB381:
 6472              	.LBI381:
 354:src/display.c **** 	if (sep == SEP_NONE)
 6473              		.loc 1 354 14 view .LVU2110
 6474              	.LBB382:
 355:src/display.c **** 		return res;
 6475              		.loc 1 355 2 view .LVU2111
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 6476              		.loc 1 357 2 view .LVU2112
 6477 0858 2046     		mov	r0, r4
 6478 085a 5146     		mov	r1, r10
 6479              	.LBE382:
 6480              	.LBE381:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6481              		.loc 1 1535 37 is_stmt 0 view .LVU2113
 6482 085c 1B34     		adds	r4, r4, #27
 6483              	.LVL731:
 6484              	.LBB384:
 6485              	.LBB383:
ARM GAS  /tmp/ccTlkAzC.s 			page 197


1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6486              		.loc 1 1535 37 view .LVU2114
 6487 085e FFF7FEFF 		bl	set_separator.part.0
 6488              	.LVL732:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6489              		.loc 1 1535 37 view .LVU2115
 6490              	.LBE383:
 6491              	.LBE384:
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6492              		.loc 1 1535 35 is_stmt 1 view .LVU2116
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6493              		.loc 1 1535 10 view .LVU2117
1535:src/display.c **** 			set_separator(i, separator_mode, CNULL);
 6494              		.loc 1 1535 3 is_stmt 0 view .LVU2118
 6495 0862 512C     		cmp	r4, #81
 6496 0864 F8DD     		ble	.L453
 6497 0866 6C1E     		subs	r4, r5, #1
 6498              	.LVL733:
 6499              	.L455:
1541:src/display.c **** 
 6500              		.loc 1 1541 3 is_stmt 1 view .LVU2119
 6501 0868 5846     		mov	r0, fp
 6502 086a 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1540:src/display.c **** 		set_dig(j, x[i]);
 6503              		.loc 1 1540 33 is_stmt 0 view .LVU2120
 6504 086e 0BF1090B 		add	fp, fp, #9
 6505              	.LVL734:
1541:src/display.c **** 
 6506              		.loc 1 1541 3 view .LVU2121
 6507 0872 FFF7FEFF 		bl	set_dig
 6508              	.LVL735:
1540:src/display.c **** 		set_dig(j, x[i]);
 6509              		.loc 1 1540 26 is_stmt 1 view .LVU2122
1540:src/display.c **** 		set_dig(j, x[i]);
 6510              		.loc 1 1540 18 view .LVU2123
1540:src/display.c **** 		set_dig(j, x[i]);
 6511              		.loc 1 1540 2 is_stmt 0 view .LVU2124
 6512 0876 BBF16C0F 		cmp	fp, #108
 6513 087a F5D1     		bne	.L455
1543:src/display.c **** 	set_status(upper_str - negative);
 6514              		.loc 1 1543 2 is_stmt 1 view .LVU2125
1543:src/display.c **** 	set_status(upper_str - negative);
 6515              		.loc 1 1543 5 is_stmt 0 view .LVU2126
 6516 087c 0023     		movs	r3, #0
1544:src/display.c **** }
 6517              		.loc 1 1544 2 view .LVU2127
 6518 087e 3046     		mov	r0, r6
1543:src/display.c **** 	set_status(upper_str - negative);
 6519              		.loc 1 1543 5 view .LVU2128
 6520 0880 2B70     		strb	r3, [r5]
1544:src/display.c **** }
 6521              		.loc 1 1544 2 is_stmt 1 view .LVU2129
 6522 0882 FFF7FEFF 		bl	set_status
 6523              	.LVL736:
1545:src/display.c **** 
 6524              		.loc 1 1545 1 is_stmt 0 view .LVU2130
 6525 0886 46E5     		b	.L434
ARM GAS  /tmp/ccTlkAzC.s 			page 198


 6526              	.LVL737:
 6527              	.L665:
1545:src/display.c **** 
 6528              		.loc 1 1545 1 view .LVU2131
 6529              	.LBE386:
 6530              	.LBE388:
1601:src/display.c ****  				return;
 6531              		.loc 1 1601 5 is_stmt 1 view .LVU2132
 6532 0888 3046     		mov	r0, r6
 6533 088a FFF7FEFF 		bl	set_x_hms
 6534              	.LVL738:
1602:src/display.c **** 			}
 6535              		.loc 1 1602 6 view .LVU2133
 6536 088e 42E5     		b	.L434
 6537              	.LVL739:
 6538              	.L566:
1763:src/display.c **** 		if (count != *display_digits)
 6539              		.loc 1 1763 14 is_stmt 0 view .LVU2134
 6540 0890 3246     		mov	r2, r6
 6541 0892 A6E4     		b	.L494
 6542              	.LVL740:
 6543              	.L567:
1768:src/display.c **** 			case -1:
 6544              		.loc 1 1768 22 view .LVU2135
 6545 0894 0127     		movs	r7, #1
 6546 0896 4046     		mov	r0, r8
 6547 0898 9FE7     		b	.L498
 6548              	.LVL741:
 6549              	.L569:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6550              		.loc 1 1791 13 view .LVU2136
 6551 089a 4FF0010B 		mov	fp, #1
 6552 089e FEE4     		b	.L502
 6553              	.LVL742:
 6554              	.L541:
 6555              	.LBB389:
 6556              	.LBB365:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6557              		.loc 1 1791 13 view .LVU2137
 6558 08a0 3046     		mov	r0, r6
 6559 08a2 0193     		str	r3, [sp, #4]
 6560 08a4 FFF7FEFF 		bl	set_separator.part.0
 6561              	.LVL743:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6562              		.loc 1 1791 13 view .LVU2138
 6563 08a8 019B     		ldr	r3, [sp, #4]
 6564 08aa 0446     		mov	r4, r0
 6565              	.LVL744:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6566              		.loc 1 1791 13 view .LVU2139
 6567 08ac F9E5     		b	.L539
 6568              	.LVL745:
 6569              	.L479:
1791:src/display.c **** 		} else if (exp >= 0) {  // Some digits to left of decimal point
 6570              		.loc 1 1791 13 view .LVU2140
 6571              	.LBE365:
 6572              	.LBE389:
ARM GAS  /tmp/ccTlkAzC.s 			page 199


1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6573              		.loc 1 1741 3 is_stmt 1 view .LVU2141
1741:src/display.c **** 			for (r = mantissa; *r == '9'; *r++ = '0');
 6574              		.loc 1 1741 6 is_stmt 0 view .LVU2142
 6575 08ae 4B45     		cmp	r3, r9
 6576 08b0 7FF463AC 		bne	.L550
 6577 08b4 66E5     		b	.L551
 6578              	.LVL746:
 6579              	.L450:
 6580              	.LBB390:
 6581              	.LBB387:
1526:src/display.c **** 			x[10] = '\0';
 6582              		.loc 1 1526 4 is_stmt 1 view .LVU2143
1527:src/display.c **** 		}
 6583              		.loc 1 1527 4 view .LVU2144
1526:src/display.c **** 			x[10] = '\0';
 6584              		.loc 1 1526 9 is_stmt 0 view .LVU2145
 6585 08b6 A8F81240 		strh	r4, [r8, #18]	@ movhi
 6586 08ba 21E7     		b	.L452
 6587              	.LVL747:
 6588              	.L667:
 6589              	.LBB385:
1451:src/display.c **** 
 6590              		.loc 1 1451 3 is_stmt 1 view .LVU2146
1453:src/display.c **** 		xcopy(x, small_minus, 4);
 6591              		.loc 1 1453 3 view .LVU2147
 6592 08bc 2222     		movs	r2, #34
 6593 08be 0DF11501 		add	r1, sp, #21
 6594 08c2 06A8     		add	r0, sp, #24
 6595              	.LVL748:
1453:src/display.c **** 		xcopy(x, small_minus, 4);
 6596              		.loc 1 1453 3 is_stmt 0 view .LVU2148
 6597 08c4 FFF7FEFF 		bl	xcopy
 6598              	.LVL749:
1454:src/display.c **** 		x += 4;
 6599              		.loc 1 1454 3 is_stmt 1 view .LVU2149
 6600 08c8 4046     		mov	r0, r8
 6601 08ca 2349     		ldr	r1, .L673+16
 6602 08cc 0422     		movs	r2, #4
 6603 08ce FFF7FEFF 		bl	xcopy
 6604              	.LVL750:
1455:src/display.c **** 		negative = 4;
 6605              		.loc 1 1455 3 view .LVU2150
1456:src/display.c **** #else
 6606              		.loc 1 1456 3 view .LVU2151
1455:src/display.c **** 		negative = 4;
 6607              		.loc 1 1455 5 is_stmt 0 view .LVU2152
 6608 08d2 0DF11808 		add	r8, sp, #24
 6609              	.LVL751:
1456:src/display.c **** #else
 6610              		.loc 1 1456 12 view .LVU2153
 6611 08d6 0426     		movs	r6, #4
 6612              	.LVL752:
1456:src/display.c **** #else
 6613              		.loc 1 1456 12 view .LVU2154
 6614              	.LBE385:
 6615 08d8 C7E6     		b	.L446
ARM GAS  /tmp/ccTlkAzC.s 			page 200


 6616              	.LVL753:
 6617              	.L504:
1456:src/display.c **** #else
 6618              		.loc 1 1456 12 view .LVU2155
 6619              	.LBE387:
 6620              	.LBE390:
1807:src/display.c **** 			odig++;
 6621              		.loc 1 1807 4 is_stmt 1 view .LVU2156
1808:src/display.c **** 			*obp++ = '.';
 6622              		.loc 1 1808 4 view .LVU2157
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6623              		.loc 1 1809 4 view .LVU2158
1807:src/display.c **** 			odig++;
 6624              		.loc 1 1807 11 is_stmt 0 view .LVU2159
 6625 08da 42F63063 		movw	r3, #11824
1810:src/display.c **** 				*obp++ = '0';
 6626              		.loc 1 1810 4 view .LVU2160
 6627 08de 691C     		adds	r1, r5, #1
1807:src/display.c **** 			odig++;
 6628              		.loc 1 1807 11 view .LVU2161
 6629 08e0 ADF81430 		strh	r3, [sp, #20]	@ movhi
1810:src/display.c **** 				*obp++ = '0';
 6630              		.loc 1 1810 4 is_stmt 1 view .LVU2162
 6631              	.LVL754:
1810:src/display.c **** 				*obp++ = '0';
 6632              		.loc 1 1810 18 view .LVU2163
1810:src/display.c **** 				*obp++ = '0';
 6633              		.loc 1 1810 4 is_stmt 0 view .LVU2164
 6634 08e4 2CD0     		beq	.L570
 6635 08e6 C5F10100 		rsb	r0, r5, #1
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6636              		.loc 1 1809 8 view .LVU2165
 6637 08ea 0DF11603 		add	r3, sp, #22
 6638              	.LVL755:
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6639              		.loc 1 1809 8 view .LVU2166
 6640 08ee 4044     		add	r0, r0, r8
 6641 08f0 1946     		mov	r1, r3
 6642              	.LVL756:
1811:src/display.c **** 				odig++;
 6643              		.loc 1 1811 12 view .LVU2167
 6644 08f2 3027     		movs	r7, #48
 6645              	.LVL757:
 6646              	.L511:
1811:src/display.c **** 				odig++;
 6647              		.loc 1 1811 5 is_stmt 1 discriminator 3 view .LVU2168
1811:src/display.c **** 				odig++;
 6648              		.loc 1 1811 12 is_stmt 0 discriminator 3 view .LVU2169
 6649 08f4 01F8017B 		strb	r7, [r1], #1
 6650              	.LVL758:
1812:src/display.c **** 			}
 6651              		.loc 1 1812 5 is_stmt 1 discriminator 3 view .LVU2170
1810:src/display.c **** 				*obp++ = '0';
 6652              		.loc 1 1810 23 discriminator 3 view .LVU2171
1810:src/display.c **** 				*obp++ = '0';
 6653              		.loc 1 1810 18 discriminator 3 view .LVU2172
1810:src/display.c **** 				*obp++ = '0';
ARM GAS  /tmp/ccTlkAzC.s 			page 201


 6654              		.loc 1 1810 4 is_stmt 0 discriminator 3 view .LVU2173
 6655 08f8 8142     		cmp	r1, r0
 6656 08fa FBD1     		bne	.L511
 6657 08fc E943     		mvns	r1, r5
 6658              	.LVL759:
1810:src/display.c **** 				*obp++ = '0';
 6659              		.loc 1 1810 4 discriminator 3 view .LVU2174
 6660 08fe 0B44     		add	r3, r3, r1
 6661 0900 6F42     		rsbs	r7, r5, #0
 6662              	.L510:
 6663              	.LVL760:
1814:src/display.c **** 				*obp++ = *p++;
 6664              		.loc 1 1814 14 is_stmt 1 view .LVU2175
1814:src/display.c **** 				*obp++ = *p++;
 6665              		.loc 1 1814 4 is_stmt 0 view .LVU2176
 6666 0902 002A     		cmp	r2, #0
 6667 0904 7FF7CBAC 		ble	.L502
 6668 0908 02F1FF3C 		add	ip, r2, #-1
 6669 090c 9C44     		add	ip, ip, r3
 6670 090e 591E     		subs	r1, r3, #1
 6671              	.LVL761:
 6672              	.L512:
1815:src/display.c **** 				odig++;
 6673              		.loc 1 1815 5 is_stmt 1 discriminator 3 view .LVU2177
1815:src/display.c **** 				odig++;
 6674              		.loc 1 1815 12 is_stmt 0 discriminator 3 view .LVU2178
 6675 0910 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6676              	.LVL762:
1815:src/display.c **** 				odig++;
 6677              		.loc 1 1815 12 discriminator 3 view .LVU2179
 6678 0914 01F8010F 		strb	r0, [r1, #1]!
1816:src/display.c **** 			}
 6679              		.loc 1 1816 5 is_stmt 1 discriminator 3 view .LVU2180
1814:src/display.c **** 				*obp++ = *p++;
 6680              		.loc 1 1814 23 discriminator 3 view .LVU2181
 6681              	.LVL763:
1814:src/display.c **** 				*obp++ = *p++;
 6682              		.loc 1 1814 14 discriminator 3 view .LVU2182
1814:src/display.c **** 				*obp++ = *p++;
 6683              		.loc 1 1814 4 is_stmt 0 discriminator 3 view .LVU2183
 6684 0918 8C45     		cmp	ip, r1
 6685 091a F9D1     		bne	.L512
 6686              	.LVL764:
1814:src/display.c **** 				*obp++ = *p++;
 6687              		.loc 1 1814 4 discriminator 3 view .LVU2184
 6688 091c 1344     		add	r3, r3, r2
 6689              	.LVL765:
1814:src/display.c **** 				*obp++ = *p++;
 6690              		.loc 1 1814 4 discriminator 3 view .LVU2185
 6691 091e 1744     		add	r7, r7, r2
 6692 0920 BDE4     		b	.L502
 6693              	.LVL766:
 6694              	.L666:
1757:src/display.c **** 
 6695              		.loc 1 1757 2 is_stmt 1 view .LVU2186
1757:src/display.c **** 
 6696              		.loc 1 1757 40 is_stmt 0 view .LVU2187
ARM GAS  /tmp/ccTlkAzC.s 			page 202


 6697 0922 0AF10102 		add	r2, r10, #1
1757:src/display.c **** 
 6698              		.loc 1 1757 9 view .LVU2188
 6699 0926 09EB0203 		add	r3, r9, r2
 6700              	.LVL767:
1757:src/display.c **** 
 6701              		.loc 1 1757 45 is_stmt 1 view .LVU2189
1757:src/display.c **** 
 6702              		.loc 1 1757 2 is_stmt 0 view .LVU2190
 6703 092a 19F80220 		ldrb	r2, [r9, r2]	@ zero_extendqisi2
 6704 092e 002A     		cmp	r2, #0
 6705 0930 3FF499AC 		beq	.L648
1746:src/display.c **** 				extra_digits = 0;
 6706              		.loc 1 1746 34 view .LVU2191
 6707 0934 0227     		movs	r7, #2
 6708 0936 32E4     		b	.L549
 6709              	.LVL768:
 6710              	.L571:
1837:src/display.c **** 			*obp++ = '.';
 6711              		.loc 1 1837 8 view .LVU2192
 6712 0938 0127     		movs	r7, #1
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6713              		.loc 1 1838 8 view .LVU2193
 6714 093a 0DF11603 		add	r3, sp, #22
 6715              	.LVL769:
1838:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6716              		.loc 1 1838 8 view .LVU2194
 6717 093e 1AE7     		b	.L521
 6718              	.LVL770:
 6719              	.L570:
1808:src/display.c **** 			*obp++ = '.';
 6720              		.loc 1 1808 8 view .LVU2195
 6721 0940 0127     		movs	r7, #1
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6722              		.loc 1 1809 8 view .LVU2196
 6723 0942 0DF11603 		add	r3, sp, #22
 6724              	.LVL771:
1809:src/display.c **** 			for (i=exp+1; i<0; i++) {
 6725              		.loc 1 1809 8 view .LVU2197
 6726 0946 DCE7     		b	.L510
 6727              	.L674:
 6728              		.align	2
 6729              	.L673:
 6730 0948 00000000 		.word	.LANCHOR1
 6731 094c 18FCFFFF 		.word	-1000
 6732 0950 D34D6210 		.word	274877907
 6733 0954 00000000 		.word	.LANCHOR14
 6734 0958 00000000 		.word	.LANCHOR13
 6735              		.cfi_endproc
 6736              	.LFE27:
 6738              		.section	.text.set_x,"ax",%progbits
 6739              		.align	1
 6740              		.p2align 2,,3
 6741              		.syntax unified
 6742              		.thumb
 6743              		.thumb_func
 6744              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccTlkAzC.s 			page 203


 6746              	set_x:
 6747              	.LVL772:
 6748              	.LFB26:
1552:src/display.c **** 	decNumber z;
 6749              		.loc 1 1552 60 is_stmt 1 view -0
 6750              		.cfi_startproc
 6751              		@ args = 0, pretend = 0, frame = 40
 6752              		@ frame_needed = 0, uses_anonymous_args = 0
1553:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6753              		.loc 1 1553 2 view .LVU2199
1554:src/display.c **** 
 6754              		.loc 1 1554 2 view .LVU2200
1552:src/display.c **** 	decNumber z;
 6755              		.loc 1 1552 60 is_stmt 0 view .LVU2201
 6756 0000 30B5     		push	{r4, r5, lr}
 6757              		.cfi_def_cfa_offset 12
 6758              		.cfi_offset 4, -12
 6759              		.cfi_offset 5, -8
 6760              		.cfi_offset 14, -4
 6761 0002 8BB0     		sub	sp, sp, #44
 6762              		.cfi_def_cfa_offset 56
1554:src/display.c **** 
 6763              		.loc 1 1554 6 view .LVU2202
 6764 0004 0C23     		movs	r3, #12
1557:src/display.c **** 	else
 6765              		.loc 1 1557 3 view .LVU2203
 6766 0006 01AD     		add	r5, sp, #4
1552:src/display.c **** 	decNumber z;
 6767              		.loc 1 1552 60 view .LVU2204
 6768 0008 0C46     		mov	r4, r1
1554:src/display.c **** 
 6769              		.loc 1 1554 6 view .LVU2205
 6770 000a 0093     		str	r3, [sp]
1556:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6771              		.loc 1 1556 2 is_stmt 1 view .LVU2206
1557:src/display.c **** 	else
 6772              		.loc 1 1557 3 is_stmt 0 view .LVU2207
 6773 000c 2946     		mov	r1, r5
 6774              	.LVL773:
1556:src/display.c **** 		decimal128ToNumber(&(rgx->d), &z);
 6775              		.loc 1 1556 5 view .LVU2208
 6776 000e 42B1     		cbz	r2, .L676
1557:src/display.c **** 	else
 6777              		.loc 1 1557 3 is_stmt 1 view .LVU2209
 6778 0010 FFF7FEFF 		bl	decimal128ToNumber
 6779              	.LVL774:
1560:src/display.c **** }
 6780              		.loc 1 1560 2 view .LVU2210
 6781 0014 2146     		mov	r1, r4
 6782 0016 2846     		mov	r0, r5
 6783 0018 6A46     		mov	r2, sp
 6784 001a FFF7FEFF 		bl	set_x_dn
 6785              	.LVL775:
1561:src/display.c **** 
 6786              		.loc 1 1561 1 is_stmt 0 view .LVU2211
 6787 001e 0BB0     		add	sp, sp, #44
 6788              		.cfi_remember_state
ARM GAS  /tmp/ccTlkAzC.s 			page 204


 6789              		.cfi_def_cfa_offset 12
 6790              		@ sp needed
 6791 0020 30BD     		pop	{r4, r5, pc}
 6792              	.LVL776:
 6793              	.L676:
 6794              		.cfi_restore_state
1559:src/display.c **** 	set_x_dn(&z, res, &digits);
 6795              		.loc 1 1559 3 is_stmt 1 view .LVU2212
 6796 0022 FFF7FEFF 		bl	decimal64ToNumber
 6797              	.LVL777:
1560:src/display.c **** }
 6798              		.loc 1 1560 2 view .LVU2213
 6799 0026 2146     		mov	r1, r4
 6800 0028 2846     		mov	r0, r5
 6801 002a 6A46     		mov	r2, sp
 6802 002c FFF7FEFF 		bl	set_x_dn
 6803              	.LVL778:
1561:src/display.c **** 
 6804              		.loc 1 1561 1 is_stmt 0 view .LVU2214
 6805 0030 0BB0     		add	sp, sp, #44
 6806              		.cfi_def_cfa_offset 12
 6807              		@ sp needed
 6808 0032 30BD     		pop	{r4, r5, pc}
1561:src/display.c **** 
 6809              		.loc 1 1561 1 view .LVU2215
 6810              		.cfi_endproc
 6811              	.LFE26:
 6813              		.section	.text.format_reg,"ax",%progbits
 6814              		.align	1
 6815              		.p2align 2,,3
 6816              		.global	format_reg
 6817              		.syntax unified
 6818              		.thumb
 6819              		.thumb_func
 6820              		.fpu fpv4-sp-d16
 6822              	format_reg:
 6823              	.LVL779:
 6824              	.LFB28:
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6825              		.loc 1 1968 39 is_stmt 1 view -0
 6826              		.cfi_startproc
 6827              		@ args = 0, pretend = 0, frame = 40
 6828              		@ frame_needed = 0, uses_anonymous_args = 0
1969:src/display.c **** 
 6829              		.loc 1 1969 2 view .LVU2217
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6830              		.loc 1 1968 39 is_stmt 0 view .LVU2218
 6831 0000 30B5     		push	{r4, r5, lr}
 6832              		.cfi_def_cfa_offset 12
 6833              		.cfi_offset 4, -12
 6834              		.cfi_offset 5, -8
 6835              		.cfi_offset 14, -4
 6836 0002 8BB0     		sub	sp, sp, #44
 6837              		.cfi_def_cfa_offset 56
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6838              		.loc 1 1968 39 view .LVU2219
 6839 0004 0C46     		mov	r4, r1
ARM GAS  /tmp/ccTlkAzC.s 			page 205


 6840 0006 0546     		mov	r5, r0
1969:src/display.c **** 
 6841              		.loc 1 1969 28 view .LVU2220
 6842 0008 FFF7FEFF 		bl	get_reg_n
 6843              	.LVL780:
1971:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6844              		.loc 1 1971 6 view .LVU2221
 6845 000c 154B     		ldr	r3, .L686
 6846 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 6847              	.LVL781:
1971:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6848              		.loc 1 1971 2 is_stmt 1 view .LVU2222
1971:src/display.c **** 		set_int_x(get_reg_n_int(index), buf);
 6849              		.loc 1 1971 5 is_stmt 0 view .LVU2223
 6850 0012 D207     		lsls	r2, r2, #31
 6851 0014 1DD4     		bmi	.L684
1974:src/display.c **** 		decNumber x;
 6852              		.loc 1 1974 7 is_stmt 1 view .LVU2224
1974:src/display.c **** 		decNumber x;
 6853              		.loc 1 1974 10 is_stmt 0 view .LVU2225
 6854 0016 44B1     		cbz	r4, .L685
 6855              	.L682:
1985:src/display.c **** }
 6856              		.loc 1 1985 3 is_stmt 1 view .LVU2226
1985:src/display.c **** }
 6857              		.loc 1 1985 23 is_stmt 0 view .LVU2227
 6858 0018 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1985:src/display.c **** }
 6859              		.loc 1 1985 3 view .LVU2228
 6860 001c 2146     		mov	r1, r4
 6861 001e C2F38012 		ubfx	r2, r2, #6, #1
 6862 0022 FFF7FEFF 		bl	set_x
 6863              	.LVL782:
1986:src/display.c **** 
 6864              		.loc 1 1986 1 view .LVU2229
 6865 0026 0BB0     		add	sp, sp, #44
 6866              		.cfi_remember_state
 6867              		.cfi_def_cfa_offset 12
 6868              		@ sp needed
 6869 0028 30BD     		pop	{r4, r5, pc}
 6870              	.LVL783:
 6871              	.L685:
 6872              		.cfi_restore_state
1974:src/display.c **** 		decNumber x;
 6873              		.loc 1 1974 32 discriminator 1 view .LVU2230
 6874 002a 0F4A     		ldr	r2, .L686+4
1974:src/display.c **** 		decNumber x;
 6875              		.loc 1 1974 23 discriminator 1 view .LVU2231
 6876 002c 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 6877 002e 012A     		cmp	r2, #1
 6878 0030 F2D9     		bls	.L682
 6879              	.LVL784:
 6880              	.LBB394:
 6881              	.LBI394:
1968:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6882              		.loc 1 1968 6 is_stmt 1 view .LVU2232
 6883              	.LBB395:
ARM GAS  /tmp/ccTlkAzC.s 			page 206


 6884              	.LBB396:
1975:src/display.c **** 		int s;
 6885              		.loc 1 1975 3 view .LVU2233
1976:src/display.c **** 		unsigned long long int v;
 6886              		.loc 1 1976 3 view .LVU2234
1977:src/display.c **** 
 6887              		.loc 1 1977 3 view .LVU2235
1979:src/display.c **** 		v = dn_to_ull(&x, &s);
 6888              		.loc 1 1979 3 view .LVU2236
 6889 0032 2946     		mov	r1, r5
 6890 0034 01A8     		add	r0, sp, #4
 6891              	.LVL785:
1979:src/display.c **** 		v = dn_to_ull(&x, &s);
 6892              		.loc 1 1979 3 is_stmt 0 view .LVU2237
 6893 0036 FFF7FEFF 		bl	getRegister
 6894              	.LVL786:
1980:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6895              		.loc 1 1980 3 is_stmt 1 view .LVU2238
1980:src/display.c **** 		set_int_x(build_value(v, s), CNULL);
 6896              		.loc 1 1980 7 is_stmt 0 view .LVU2239
 6897 003a 01A8     		add	r0, sp, #4
 6898 003c 6946     		mov	r1, sp
 6899 003e FFF7FEFF 		bl	dn_to_ull
 6900              	.LVL787:
1981:src/display.c **** 	}
 6901              		.loc 1 1981 3 is_stmt 1 view .LVU2240
 6902 0042 009A     		ldr	r2, [sp]
 6903 0044 FFF7FEFF 		bl	build_value
 6904              	.LVL788:
1981:src/display.c **** 	}
 6905              		.loc 1 1981 3 is_stmt 0 view .LVU2241
 6906 0048 2246     		mov	r2, r4
 6907 004a FFF7FEFF 		bl	set_int_x
 6908              	.LVL789:
 6909              	.LBE396:
 6910              	.LBE395:
 6911              	.LBE394:
1986:src/display.c **** 
 6912              		.loc 1 1986 1 view .LVU2242
 6913 004e 0BB0     		add	sp, sp, #44
 6914              		.cfi_remember_state
 6915              		.cfi_def_cfa_offset 12
 6916              		@ sp needed
 6917 0050 30BD     		pop	{r4, r5, pc}
 6918              	.LVL790:
 6919              	.L684:
 6920              		.cfi_restore_state
1972:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6921              		.loc 1 1972 3 is_stmt 1 view .LVU2243
 6922 0052 2846     		mov	r0, r5
 6923              	.LVL791:
1972:src/display.c **** #ifndef HP16C_MODE_CHANGE
 6924              		.loc 1 1972 3 is_stmt 0 view .LVU2244
 6925 0054 FFF7FEFF 		bl	get_reg_n_int
 6926              	.LVL792:
 6927 0058 2246     		mov	r2, r4
 6928 005a FFF7FEFF 		bl	set_int_x
ARM GAS  /tmp/ccTlkAzC.s 			page 207


 6929              	.LVL793:
1986:src/display.c **** 
 6930              		.loc 1 1986 1 view .LVU2245
 6931 005e 0BB0     		add	sp, sp, #44
 6932              		.cfi_def_cfa_offset 12
 6933              		@ sp needed
 6934 0060 30BD     		pop	{r4, r5, pc}
 6935              	.LVL794:
 6936              	.L687:
1986:src/display.c **** 
 6937              		.loc 1 1986 1 view .LVU2246
 6938 0062 00BF     		.align	2
 6939              	.L686:
 6940 0064 00000000 		.word	PersistentRam
 6941 0068 00000000 		.word	StateWhileOn
 6942              		.cfi_endproc
 6943              	.LFE28:
 6945              		.section	.text.set_status_right,"ax",%progbits
 6946              		.align	1
 6947              		.p2align 2,,3
 6948              		.syntax unified
 6949              		.thumb
 6950              		.thumb_func
 6951              		.fpu fpv4-sp-d16
 6953              	set_status_right:
 6954              	.LVL795:
 6955              	.LFB42:
2734:src/display.c **** 
2735:src/display.c **** 
2736:src/display.c **** /*
2737:src/display.c ****  *  Display messages (global function)
2738:src/display.c ****  */
2739:src/display.c **** extern void message(const char *str1, const char *str2)
2740:src/display.c **** {
2741:src/display.c **** 	State2.disp_freeze = 0;
2742:src/display.c **** 	State2.disp_small = 0;
2743:src/display.c **** 	WasDataEntry = 0;
2744:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
2745:src/display.c **** 		// Complete redraw necessary
2746:src/display.c **** 		DispMsg = str1;
2747:src/display.c **** 		display();
2748:src/display.c **** 	}
2749:src/display.c **** 	else {
2750:src/display.c **** 		if ( str2 != NULL ) {
2751:src/display.c **** 			reset_disp();
2752:src/display.c **** 			ShowRPN = 0;
2753:src/display.c **** 			set_annunciators();
2754:src/display.c **** 			set_digits_string( str2, 0 );
2755:src/display.c **** 		}
2756:src/display.c **** 		set_status( str1 );
2757:src/display.c **** 		finish_display();
2758:src/display.c **** 	}
2759:src/display.c **** }
2760:src/display.c **** 
2761:src/display.c **** #ifdef INCLUDE_STOPWATCH
2762:src/display.c **** 
2763:src/display.c **** static void stopwatch_exponent(const char* exponent) {
ARM GAS  /tmp/ccTlkAzC.s 			page 208


2764:src/display.c **** 	int j = SEGS_EXP_BASE;
2765:src/display.c **** 	for (; *exponent!=0; exponent++) {
2766:src/display.c **** 		set_dig_s(j, *exponent, CNULL);
2767:src/display.c **** 		j += SEGS_PER_EXP_DIGIT;
2768:src/display.c **** 	}
2769:src/display.c **** }
2770:src/display.c **** 
2771:src/display.c **** void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
2772:src/display.c **** {
2773:src/display.c **** #ifndef REALBUILD
2774:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2775:src/display.c **** #endif
2776:src/display.c **** 	reset_disp();
2777:src/display.c **** 	set_dot(DEG);
2778:src/display.c **** 	set_digits_string( str2, 0 );
2779:src/display.c **** 	State2.disp_small = force_small;
2780:src/display.c **** 	if( exponent!=NULL ) {
2781:src/display.c **** 		stopwatch_exponent(exponent);
2782:src/display.c **** 	}
2783:src/display.c **** 	set_status( str1 );
2784:src/display.c **** 	finish_display();
2785:src/display.c **** }
2786:src/display.c **** 
2787:src/display.c **** 
2788:src/display.c **** #endif // INCLUDE_STOPWATCH
2789:src/display.c **** 
2790:src/display.c **** /* Display the right hand characters from the given string.
2791:src/display.c ****  * Trying to fit as many as possible into the bitmap area,
2792:src/display.c ****  * and reduce font size if required.
2793:src/display.c ****  */
2794:src/display.c **** static void set_status_right(const char *str) {
 6956              		.loc 1 2794 47 is_stmt 1 view -0
 6957              		.cfi_startproc
 6958              		@ args = 0, pretend = 0, frame = 0
 6959              		@ frame_needed = 0, uses_anonymous_args = 0
2795:src/display.c **** 	unsigned int x = 0;
 6960              		.loc 1 2795 2 view .LVU2248
2796:src/display.c **** 	const char *p;
 6961              		.loc 1 2796 2 view .LVU2249
2797:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 6962              		.loc 1 2797 2 view .LVU2250
2794:src/display.c **** 	unsigned int x = 0;
 6963              		.loc 1 2794 47 is_stmt 0 view .LVU2251
 6964 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 6965              		.cfi_def_cfa_offset 32
 6966              		.cfi_offset 3, -32
 6967              		.cfi_offset 4, -28
 6968              		.cfi_offset 5, -24
 6969              		.cfi_offset 6, -20
 6970              		.cfi_offset 7, -16
 6971              		.cfi_offset 8, -12
 6972              		.cfi_offset 9, -8
 6973              		.cfi_offset 14, -4
 6974              		.loc 1 2797 23 view .LVU2252
 6975 0004 164B     		ldr	r3, .L702
 6976              		.loc 1 2797 41 view .LVU2253
 6977 0006 93F91630 		ldrsb	r3, [r3, #22]
ARM GAS  /tmp/ccTlkAzC.s 			page 209


 6978 000a 002B     		cmp	r3, #0
2794:src/display.c **** 	unsigned int x = 0;
 6979              		.loc 1 2794 47 view .LVU2254
 6980 000c 0646     		mov	r6, r0
 6981              		.loc 1 2797 41 view .LVU2255
 6982 000e 1DDA     		bge	.L701
 6983              	.LVL796:
 6984              	.L689:
 6985              		.loc 1 2797 12 view .LVU2256
 6986 0010 4FF00108 		mov	r8, #1
2798:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 6987              		.loc 1 2798 36 view .LVU2257
 6988 0014 4FF48077 		mov	r7, #256
 6989              	.L690:
 6990              	.LVL797:
2799:src/display.c **** 
2800:src/display.c **** 	for (p=str; *p != '\0'; p++);
 6991              		.loc 1 2800 2 is_stmt 1 discriminator 4 view .LVU2258
 6992              		.loc 1 2800 14 discriminator 4 view .LVU2259
 6993              		.loc 1 2800 2 is_stmt 0 discriminator 4 view .LVU2260
 6994 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 6995 001a 3446     		mov	r4, r6
 6996 001c 1BB1     		cbz	r3, .L691
 6997              	.LVL798:
 6998              	.L692:
 6999              		.loc 1 2800 30 is_stmt 1 discriminator 3 view .LVU2261
 7000              		.loc 1 2800 26 discriminator 3 view .LVU2262
 7001              		.loc 1 2800 14 discriminator 3 view .LVU2263
 7002              		.loc 1 2800 2 is_stmt 0 discriminator 3 view .LVU2264
 7003 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7004              	.LVL799:
 7005              		.loc 1 2800 2 discriminator 3 view .LVU2265
 7006 0022 002B     		cmp	r3, #0
 7007 0024 FBD1     		bne	.L692
 7008              	.L691:
2795:src/display.c **** 	const char *p;
 7009              		.loc 1 2795 15 view .LVU2266
 7010 0026 0025     		movs	r5, #0
 7011 0028 06E0     		b	.L693
 7012              	.LVL800:
 7013              	.L694:
 7014              	.LBB397:
2801:src/display.c **** 	while (--p >= str) {
2802:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7015              		.loc 1 2802 26 view .LVU2267
 7016 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
2803:src/display.c **** 
2804:src/display.c **** 		x += charlengths(c);
 7017              		.loc 1 2804 8 view .LVU2268
 7018 002c 3844     		add	r0, r0, r7
 7019 002e FFF7FEFF 		bl	charlengths
 7020              	.LVL801:
 7021              		.loc 1 2804 5 view .LVU2269
 7022 0032 0544     		add	r5, r5, r0
 7023              	.LVL802:
2805:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7024              		.loc 1 2805 3 is_stmt 1 view .LVU2270
ARM GAS  /tmp/ccTlkAzC.s 			page 210


 7025              		.loc 1 2805 6 is_stmt 0 view .LVU2271
 7026 0034 2C2D     		cmp	r5, #44
 7027 0036 03D8     		bhi	.L695
 7028              	.LVL803:
 7029              	.L693:
2802:src/display.c **** 
 7030              		.loc 1 2802 3 is_stmt 1 view .LVU2272
2802:src/display.c **** 
 7031              		.loc 1 2802 3 is_stmt 0 view .LVU2273
 7032              	.LBE397:
2801:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7033              		.loc 1 2801 8 is_stmt 1 view .LVU2274
 7034 0038 A146     		mov	r9, r4
 7035 003a 013C     		subs	r4, r4, #1
 7036              	.LVL804:
 7037              	.LBB398:
2804:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7038              		.loc 1 2804 3 view .LVU2275
2804:src/display.c **** 		if (x > BITMAP_WIDTH+1)
 7039              		.loc 1 2804 3 is_stmt 0 view .LVU2276
 7040              	.LBE398:
2801:src/display.c **** 		const unsigned int c = (unsigned char) *p + offset;
 7041              		.loc 1 2801 8 view .LVU2277
 7042 003c A642     		cmp	r6, r4
 7043 003e F4D9     		bls	.L694
 7044              	.LVL805:
 7045              	.L695:
2806:src/display.c **** 			break;
2807:src/display.c **** 	}
2808:src/display.c **** 	set_status_sized(p+1, toolarge);
 7046              		.loc 1 2808 2 is_stmt 1 view .LVU2278
 7047 0040 4146     		mov	r1, r8
 7048 0042 4846     		mov	r0, r9
2809:src/display.c **** }
 7049              		.loc 1 2809 1 is_stmt 0 view .LVU2279
 7050 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7051              		.cfi_remember_state
 7052              		.cfi_restore 14
 7053              		.cfi_restore 9
 7054              		.cfi_restore 8
 7055              		.cfi_restore 7
 7056              		.cfi_restore 6
 7057              		.cfi_restore 5
 7058              		.cfi_restore 4
 7059              		.cfi_restore 3
 7060              		.cfi_def_cfa_offset 0
 7061              	.LVL806:
2808:src/display.c **** }
 7062              		.loc 1 2808 2 view .LVU2280
 7063 0048 FFF7FEBF 		b	set_status_sized
 7064              	.LVL807:
 7065              	.L701:
 7066              		.cfi_restore_state
 7067              	.LBB399:
 7068              	.LBI399:
2724:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7069              		.loc 1 2724 12 is_stmt 1 view .LVU2281
ARM GAS  /tmp/ccTlkAzC.s 			page 211


 7070              	.LBB400:
2725:src/display.c **** }
 7071              		.loc 1 2725 2 view .LVU2282
2725:src/display.c **** }
 7072              		.loc 1 2725 9 is_stmt 0 view .LVU2283
 7073 004c 0021     		movs	r1, #0
 7074 004e FFF7FEFF 		bl	pixel_length
 7075              	.LVL808:
2725:src/display.c **** }
 7076              		.loc 1 2725 9 view .LVU2284
 7077              	.LBE400:
 7078              	.LBE399:
2797:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7079              		.loc 1 2797 41 view .LVU2285
 7080 0052 2C28     		cmp	r0, #44
 7081 0054 DCDC     		bgt	.L689
2797:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7082              		.loc 1 2797 12 view .LVU2286
 7083 0056 4FF00008 		mov	r8, #0
2798:src/display.c **** 
 7084              		.loc 1 2798 36 view .LVU2287
 7085 005a 4746     		mov	r7, r8
 7086 005c DCE7     		b	.L690
 7087              	.L703:
 7088 005e 00BF     		.align	2
 7089              	.L702:
 7090 0060 00000000 		.word	StateWhileOn
 7091              		.cfi_endproc
 7092              	.LFE42:
 7094              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7095              		.align	2
 7096              	.LC3:
 7097 0000 32630600 		.ascii	"2c\006\000"
 7098              		.align	2
 7099              	.LC4:
 7100 0004 07C63C00 		.ascii	"\007\306<\000"
 7101              		.align	2
 7102              	.LC5:
 7103 0008 07876900 		.ascii	"\007\207i\000"
 7104              		.align	2
 7105              	.LC6:
 7106 000c 07C67900 		.ascii	"\007\306y\000"
 7107              		.align	2
 7108              	.LC7:
 7109 0010 07950600 		.ascii	"\007\225\006\000"
 7110              		.align	2
 7111              	.LC8:
 7112 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7112      060600
 7113 001b 00       		.align	2
 7114              	.LC9:
 7115 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7115      060600
 7116 0023 00       		.align	2
 7117              	.LC10:
 7118 0024 1400     		.ascii	"\024\000"
 7119 0026 0000     		.align	2
ARM GAS  /tmp/ccTlkAzC.s 			page 212


 7120              	.LC11:
 7121 0028 07C77900 		.ascii	"\007\307y\000"
 7122              		.align	2
 7123              	.LC12:
 7124 002c 07870700 		.ascii	"\007\207\007\000"
 7125              		.align	2
 7126              	.LC13:
 7127 0030 07C74400 		.ascii	"\007\307D\000"
 7128              		.align	2
 7129              	.LC14:
 7130 0034 07C73C00 		.ascii	"\007\307<\000"
 7131              		.align	2
 7132              	.LC15:
 7133 0038 07872000 		.ascii	"\007\207 \000"
 7134              		.align	2
 7135              	.LC16:
 7136 003c 06060788 		.ascii	"\006\006\007\210\007\000"
 7136      0700
 7137 0042 0000     		.align	2
 7138              	.LC17:
 7139 0044 0784060D 		.ascii	"\007\204\006\015\000"
 7139      00
 7140 0049 000000   		.align	2
 7141              	.LC19:
 7142 004c 07E43F00 		.ascii	"\007\344?\000"
 7143              		.section	.text.annunciators,"ax",%progbits
 7144              		.align	1
 7145              		.p2align 2,,3
 7146              		.syntax unified
 7147              		.thumb
 7148              		.thumb_func
 7149              		.fpu fpv4-sp-d16
 7151              	annunciators:
 7152              	.LFB16:
 587:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7153              		.loc 1 587 32 is_stmt 1 view -0
 7154              		.cfi_startproc
 7155              		@ args = 0, pretend = 0, frame = 88
 7156              		@ frame_needed = 0, uses_anonymous_args = 0
 589:src/display.c **** 	int n;
 7157              		.loc 1 589 2 view .LVU2289
 587:src/display.c **** 	// We initialize q here to avoid uninitialized error messages by very strict compilers
 7158              		.loc 1 587 32 is_stmt 0 view .LVU2290
 7159 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7160              		.cfi_def_cfa_offset 28
 7161              		.cfi_offset 4, -28
 7162              		.cfi_offset 5, -24
 7163              		.cfi_offset 6, -20
 7164              		.cfi_offset 7, -16
 7165              		.cfi_offset 8, -12
 7166              		.cfi_offset 9, -8
 7167              		.cfi_offset 14, -4
 7168 0004 97B0     		sub	sp, sp, #92
 7169              		.cfi_def_cfa_offset 120
 7170              	.LVL809:
 590:src/display.c **** 	static const char shift_chars[4] = " \021\022\023";
 7171              		.loc 1 590 2 is_stmt 1 view .LVU2291
ARM GAS  /tmp/ccTlkAzC.s 			page 213


 591:src/display.c **** 	const char shift_char = shift_chars[cur_shift()];
 7172              		.loc 1 591 2 view .LVU2292
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7173              		.loc 1 592 2 view .LVU2293
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7174              		.loc 1 592 38 is_stmt 0 view .LVU2294
 7175 0006 FFF7FEFF 		bl	cur_shift
 7176              	.LVL810:
 600:src/display.c **** #  endif
 7177              		.loc 1 600 33 view .LVU2295
 7178 000a DFF86483 		ldr	r8, .L802+64
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7179              		.loc 1 592 13 view .LVU2296
 7180 000e C84C     		ldr	r4, .L802
 600:src/display.c **** #  endif
 7181              		.loc 1 600 33 view .LVU2297
 7182 0010 98F8EA67 		ldrb	r6, [r8, #2026]	@ zero_extendqisi2
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7183              		.loc 1 592 38 view .LVU2298
 7184 0014 0346     		mov	r3, r0
 631:src/display.c **** 
 7185              		.loc 1 631 2 view .LVU2299
 7186 0016 0BAD     		add	r5, sp, #44
 7187              	.LVL811:
 631:src/display.c **** 
 7188              		.loc 1 631 2 view .LVU2300
 7189 0018 0021     		movs	r1, #0
 7190 001a 2846     		mov	r0, r5
 7191 001c 2A22     		movs	r2, #42
 592:src/display.c **** 	// Constant variables and code branches depending on a constant variable
 7192              		.loc 1 592 13 view .LVU2301
 7193 001e E75C     		ldrb	r7, [r4, r3]	@ zero_extendqisi2
 7194              	.LVL812:
 600:src/display.c **** #  endif
 7195              		.loc 1 600 2 is_stmt 1 view .LVU2302
 603:src/display.c **** #  else
 7196              		.loc 1 603 2 view .LVU2303
 608:src/display.c **** #  else
 7197              		.loc 1 608 2 view .LVU2304
 618:src/display.c **** #else
 7198              		.loc 1 618 2 view .LVU2305
 626:src/display.c **** #else
 7199              		.loc 1 626 2 view .LVU2306
 631:src/display.c **** 
 7200              		.loc 1 631 2 view .LVU2307
 7201 0020 FFF7FEFF 		bl	xset
 7202              	.LVL813:
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7203              		.loc 1 633 2 view .LVU2308
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7204              		.loc 1 633 6 is_stmt 0 view .LVU2309
 7205 0024 98F8E837 		ldrb	r3, [r8, #2024]	@ zero_extendqisi2
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7206              		.loc 1 633 5 view .LVU2310
 7207 0028 D907     		lsls	r1, r3, #31
 600:src/display.c **** #  endif
 7208              		.loc 1 600 33 view .LVU2311
ARM GAS  /tmp/ccTlkAzC.s 			page 214


 7209 002a C6F38006 		ubfx	r6, r6, #2, #1
 7210              	.LVL814:
 633:src/display.c **** #ifdef SHOW_STACK_SIZE
 7211              		.loc 1 633 5 view .LVU2312
 7212 002e 00F1B580 		bmi	.L791
 671:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7213              		.loc 1 671 7 is_stmt 1 view .LVU2313
 671:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7214              		.loc 1 671 10 is_stmt 0 view .LVU2314
 7215 0032 76BB     		cbnz	r6, .L716
 689:src/display.c **** 			*p++ = shift_char;
 7216              		.loc 1 689 3 is_stmt 1 view .LVU2315
 689:src/display.c **** 			*p++ = shift_char;
 7217              		.loc 1 689 6 is_stmt 0 view .LVU2316
 7218 0034 202F     		cmp	r7, #32
 7219 0036 00F04C81 		beq	.L717
 7220              	.L719:
 690:src/display.c **** 			*p++ = '\006';
 7221              		.loc 1 690 4 is_stmt 1 view .LVU2317
 7222              	.LVL815:
 691:src/display.c **** 		}
 7223              		.loc 1 691 9 is_stmt 0 view .LVU2318
 7224 003a 0623     		movs	r3, #6
 690:src/display.c **** 			*p++ = '\006';
 7225              		.loc 1 690 9 view .LVU2319
 7226 003c 8DF82C70 		strb	r7, [sp, #44]
 691:src/display.c **** 		}
 7227              		.loc 1 691 4 is_stmt 1 view .LVU2320
 7228              	.LVL816:
 691:src/display.c **** 		}
 7229              		.loc 1 691 9 is_stmt 0 view .LVU2321
 7230 0040 8DF82D30 		strb	r3, [sp, #45]
 691:src/display.c **** 		}
 7231              		.loc 1 691 6 view .LVU2322
 7232 0044 0DF12E00 		add	r0, sp, #46
 7233              	.LVL817:
 7234              	.L718:
 697:src/display.c **** 			*p++ = ' ';
 7235              		.loc 1 697 3 is_stmt 1 view .LVU2323
 697:src/display.c **** 			*p++ = ' ';
 7236              		.loc 1 697 7 is_stmt 0 view .LVU2324
 7237 0048 BA4C     		ldr	r4, .L802+4
 7238 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 697:src/display.c **** 			*p++ = ' ';
 7239              		.loc 1 697 6 view .LVU2325
 7240 004c 9A07     		lsls	r2, r3, #30
 7241 004e 00F11C81 		bmi	.L792
 702:src/display.c **** 			*p++ = ' ';
 7242              		.loc 1 702 3 is_stmt 1 view .LVU2326
 702:src/display.c **** 			*p++ = ' ';
 7243              		.loc 1 702 6 is_stmt 0 view .LVU2327
 7244 0052 5907     		lsls	r1, r3, #29
 7245 0054 00F11481 		bmi	.L793
 708:src/display.c **** 			if (State2.wascomplex) {
 7246              		.loc 1 708 3 is_stmt 1 view .LVU2328
 708:src/display.c **** 			if (State2.wascomplex) {
 7247              		.loc 1 708 6 is_stmt 0 view .LVU2329
ARM GAS  /tmp/ccTlkAzC.s 			page 215


 7248 0058 202F     		cmp	r7, #32
 7249 005a 00F09D81 		beq	.L794
 7250              	.L722:
 725:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7251              		.loc 1 725 3 is_stmt 1 view .LVU2330
 725:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7252              		.loc 1 725 17 is_stmt 0 view .LVU2331
 7253 005e 98F8EA37 		ldrb	r3, [r8, #2026]	@ zero_extendqisi2
 7254 0062 C3F30113 		ubfx	r3, r3, #4, #2
 725:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7255              		.loc 1 725 3 view .LVU2332
 7256 0066 012B     		cmp	r3, #1
 7257 0068 00F0BB81 		beq	.L750
 7258 006c B249     		ldr	r1, .L802+8
 7259 006e B34A     		ldr	r2, .L802+12
 7260 0070 022B     		cmp	r3, #2
 7261 0072 08BF     		it	eq
 7262 0074 1146     		moveq	r1, r2
 7263              	.L725:
 7264              	.LVL818:
 739:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7265              		.loc 1 739 3 is_stmt 1 view .LVU2333
 739:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7266              		.loc 1 739 7 is_stmt 0 view .LVU2334
 7267 0076 FFF7FEFF 		bl	scopy
 7268              	.LVL819:
 739:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7269              		.loc 1 739 7 view .LVU2335
 7270 007a 0446     		mov	r4, r0
 7271              	.LVL820:
 741:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7272              		.loc 1 741 3 is_stmt 1 view .LVU2336
 741:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7273              		.loc 1 741 7 is_stmt 0 view .LVU2337
 7274 007c FFF7FEFF 		bl	get_trig_mode
 7275              	.LVL821:
 741:src/display.c **** 			scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7276              		.loc 1 741 6 view .LVU2338
 7277 0080 0228     		cmp	r0, #2
 7278 0082 00F03481 		beq	.L795
 7279              	.LVL822:
 7280              	.L708:
 881:src/display.c **** }
 7281              		.loc 1 881 7 is_stmt 1 view .LVU2339
 7282 0086 2846     		mov	r0, r5
 7283 0088 FFF7FEFF 		bl	set_status
 7284              	.LVL823:
 882:src/display.c **** 
 7285              		.loc 1 882 1 is_stmt 0 view .LVU2340
 7286 008c 17B0     		add	sp, sp, #92
 7287              		.cfi_remember_state
 7288              		.cfi_def_cfa_offset 28
 7289              		@ sp needed
 7290 008e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7291              	.LVL824:
 7292              	.L716:
 7293              		.cfi_restore_state
ARM GAS  /tmp/ccTlkAzC.s 			page 216


 753:src/display.c **** 			*p++ = '\007';
 7294              		.loc 1 753 3 is_stmt 1 view .LVU2341
 753:src/display.c **** 			*p++ = '\007';
 7295              		.loc 1 753 7 is_stmt 0 view .LVU2342
 7296 0092 A84C     		ldr	r4, .L802+4
 7297 0094 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 753:src/display.c **** 			*p++ = '\007';
 7298              		.loc 1 753 6 view .LVU2343
 7299 0096 9A07     		lsls	r2, r3, #30
 7300 0098 00F1D880 		bmi	.L796
 759:src/display.c **** 			*p++ = '\007';
 7301              		.loc 1 759 8 is_stmt 1 view .LVU2344
 759:src/display.c **** 			*p++ = '\007';
 7302              		.loc 1 759 11 is_stmt 0 view .LVU2345
 7303 009c 202F     		cmp	r7, #32
 7304 009e 00F0FE80 		beq	.L728
 7305              	.L729:
 760:src/display.c **** 			*p++ = '\307';
 7306              		.loc 1 760 4 is_stmt 1 view .LVU2346
 7307              	.LVL825:
 761:src/display.c **** 			*p++ = shift_char;
 7308              		.loc 1 761 4 view .LVU2347
 760:src/display.c **** 			*p++ = '\307';
 7309              		.loc 1 760 9 is_stmt 0 view .LVU2348
 7310 00a2 4CF20772 		movw	r2, #50951
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7311              		.loc 1 801 6 view .LVU2349
 7312 00a6 5B07     		lsls	r3, r3, #29
 762:src/display.c **** 			goto no_copy;
 7313              		.loc 1 762 9 view .LVU2350
 7314 00a8 8DF82E70 		strb	r7, [sp, #46]
 760:src/display.c **** 			*p++ = '\307';
 7315              		.loc 1 760 9 view .LVU2351
 7316 00ac ADF82C20 		strh	r2, [sp, #44]	@ movhi
 762:src/display.c **** 			goto no_copy;
 7317              		.loc 1 762 4 is_stmt 1 view .LVU2352
 7318              	.LVL826:
 763:src/display.c **** 		}
 7319              		.loc 1 763 4 view .LVU2353
 762:src/display.c **** 			goto no_copy;
 7320              		.loc 1 762 6 is_stmt 0 view .LVU2354
 7321 00b0 0DF12F07 		add	r7, sp, #47
 7322              	.LVL827:
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7323              		.loc 1 801 3 is_stmt 1 view .LVU2355
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7324              		.loc 1 801 6 is_stmt 0 view .LVU2356
 7325 00b4 00F1DA80 		bmi	.L797
 7326              	.LVL828:
 7327              	.L730:
 803:src/display.c **** 			decNumber y;
 7328              		.loc 1 803 10 is_stmt 1 view .LVU2357
 803:src/display.c **** 			decNumber y;
 7329              		.loc 1 803 14 is_stmt 0 view .LVU2358
 7330 00b8 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 803:src/display.c **** 			decNumber y;
 7331              		.loc 1 803 13 view .LVU2359
ARM GAS  /tmp/ccTlkAzC.s 			page 217


 7332 00ba 5806     		lsls	r0, r3, #25
 7333 00bc E3D5     		bpl	.L708
 7334              	.L724:
 7335              	.LBB401:
 804:src/display.c **** display_yreg:
 7336              		.loc 1 804 4 is_stmt 1 view .LVU2360
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7337              		.loc 1 811 4 view .LVU2361
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7338              		.loc 1 811 34 is_stmt 0 view .LVU2362
 7339 00be DFF8B492 		ldr	r9, .L802+68
 7340 00c2 D9F80010 		ldr	r1, [r9]
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7341              		.loc 1 811 4 view .LVU2363
 7342 00c6 6329     		cmp	r1, #99
 7343 00c8 00F37981 		bgt	.L798
 7344              	.L731:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7345              		.loc 1 811 4 discriminator 5 view .LVU2364
 7346 00cc 0131     		adds	r1, r1, #1
 7347              	.L735:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7348              		.loc 1 811 4 discriminator 6 view .LVU2365
 7349 00ce 02A8     		add	r0, sp, #8
 7350 00d0 FFF7FEFF 		bl	getRegister
 7351              	.LVL829:
 814:src/display.c **** 				if (yreg_hms && State2.hms) {
 7352              		.loc 1 814 4 is_stmt 1 discriminator 6 view .LVU2366
 814:src/display.c **** 				if (yreg_hms && State2.hms) {
 7353              		.loc 1 814 7 is_stmt 0 discriminator 6 view .LVU2367
 7354 00d4 9DF81010 		ldrb	r1, [sp, #16]	@ zero_extendqisi2
 7355 00d8 11F07001 		ands	r1, r1, #112
 7356 00dc 3CD1     		bne	.L737
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7357              		.loc 1 815 5 is_stmt 1 view .LVU2368
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7358              		.loc 1 815 18 is_stmt 0 view .LVU2369
 7359 00de E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 815:src/display.c **** 					const int saved_nothousands = UState.nothousands;
 7360              		.loc 1 815 8 view .LVU2370
 7361 00e0 DA07     		lsls	r2, r3, #31
 7362 00e2 00F10981 		bmi	.L799
 836:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7363              		.loc 1 836 5 is_stmt 1 view .LVU2371
 836:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7364              		.loc 1 836 20 is_stmt 0 view .LVU2372
 7365 00e6 98F8E637 		ldrb	r3, [r8, #2022]	@ zero_extendqisi2
 836:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7366              		.loc 1 836 8 view .LVU2373
 7367 00ea 9B06     		lsls	r3, r3, #26
 7368 00ec 34D5     		bpl	.L737
 838:src/display.c **** #endif
 7369              		.loc 1 838 12 view .LVU2374
 7370 00ee 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 838:src/display.c **** #endif
 7371              		.loc 1 838 9 view .LVU2375
 7372 00f0 13F00204 		ands	r4, r3, #2
ARM GAS  /tmp/ccTlkAzC.s 			page 218


 7373 00f4 30D1     		bne	.L737
 841:src/display.c **** #endif
 7374              		.loc 1 841 12 view .LVU2376
 7375 00f6 924B     		ldr	r3, .L802+16
 841:src/display.c **** #endif
 7376              		.loc 1 841 9 view .LVU2377
 7377 00f8 1B68     		ldr	r3, [r3]
 7378 00fa 012B     		cmp	r3, #1
 7379 00fc 2CD0     		beq	.L737
 843:src/display.c **** 					char ltgteq;
 7380              		.loc 1 843 12 view .LVU2378
 7381 00fe 3946     		mov	r1, r7
 7382 0100 02A8     		add	r0, sp, #8
 7383 0102 FFF7FEFF 		bl	set_x_fract
 7384              	.LVL830:
 843:src/display.c **** 					char ltgteq;
 7385              		.loc 1 843 9 view .LVU2379
 7386 0106 38B3     		cbz	r0, .L737
 7387              	.LBB402:
 844:src/display.c **** 
 7388              		.loc 1 844 6 is_stmt 1 view .LVU2380
 846:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7389              		.loc 1 846 6 view .LVU2381
 846:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7390              		.loc 1 846 10 is_stmt 0 view .LVU2382
 7391 0108 2146     		mov	r1, r4
 7392 010a 2846     		mov	r0, r5
 7393 010c FFF7FEFF 		bl	find_char
 7394              	.LVL831:
 7395 0110 0446     		mov	r4, r0
 846:src/display.c **** 					// Replace Lt/Gt/= with </>/= in small font
 7396              		.loc 1 846 8 view .LVU2383
 7397 0112 0238     		subs	r0, r0, #2
 7398              	.LVL832:
 848:src/display.c **** 					switch (ltgteq) {
 7399              		.loc 1 848 6 is_stmt 1 view .LVU2384
 848:src/display.c **** 					switch (ltgteq) {
 7400              		.loc 1 848 13 is_stmt 0 view .LVU2385
 7401 0114 14F8026C 		ldrb	r6, [r4, #-2]	@ zero_extendqisi2
 7402              	.LVL833:
 849:src/display.c **** 					case 'G':	ltgteq = '>'; break;
 7403              		.loc 1 849 6 is_stmt 1 view .LVU2386
 7404 0118 472E     		cmp	r6, #71
 7405 011a 00F07481 		beq	.L757
 851:src/display.c **** 					}
 7406              		.loc 1 851 23 is_stmt 0 view .LVU2387
 7407 011e 4C2E     		cmp	r6, #76
 7408 0120 08BF     		it	eq
 7409 0122 3C26     		moveq	r6, #60
 7410              	.LVL834:
 7411              	.L742:
 853:src/display.c **** 					q[2] = ltgteq;
 7412              		.loc 1 853 6 is_stmt 1 view .LVU2388
 7413 0124 8749     		ldr	r1, .L802+20
 7414 0126 FFF7FEFF 		bl	scopy
 7415              	.LVL835:
 854:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 219


 7416              		.loc 1 854 6 view .LVU2389
 854:src/display.c **** 
 7417              		.loc 1 854 11 is_stmt 0 view .LVU2390
 7418 012a 2670     		strb	r6, [r4]
 856:src/display.c **** 						goto skip;
 7419              		.loc 1 856 6 is_stmt 1 view .LVU2391
 856:src/display.c **** 						goto skip;
 7420              		.loc 1 856 10 is_stmt 0 view .LVU2392
 7421 012c 0121     		movs	r1, #1
 7422 012e 2846     		mov	r0, r5
 7423 0130 FFF7FEFF 		bl	pixel_length
 7424              	.LVL836:
 856:src/display.c **** 						goto skip;
 7425              		.loc 1 856 9 view .LVU2393
 7426 0134 2C28     		cmp	r0, #44
 7427 0136 A6DD     		ble	.L708
 859:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7428              		.loc 1 859 6 is_stmt 1 view .LVU2394
 859:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7429              		.loc 1 859 12 is_stmt 0 view .LVU2395
 7430 0138 0026     		movs	r6, #0
 7431              	.LVL837:
 859:src/display.c **** 					if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7432              		.loc 1 859 12 view .LVU2396
 7433 013a 04F8036C 		strb	r6, [r4, #-3]
 860:src/display.c **** 						goto skip;
 7434              		.loc 1 860 6 is_stmt 1 view .LVU2397
 860:src/display.c **** 						goto skip;
 7435              		.loc 1 860 10 is_stmt 0 view .LVU2398
 7436 013e 0121     		movs	r1, #1
 7437 0140 2846     		mov	r0, r5
 7438 0142 FFF7FEFF 		bl	pixel_length
 7439              	.LVL838:
 860:src/display.c **** 						goto skip;
 7440              		.loc 1 860 9 view .LVU2399
 7441 0146 2C28     		cmp	r0, #44
 7442 0148 9DDD     		ble	.L708
 863:src/display.c **** 				}
 7443              		.loc 1 863 6 is_stmt 1 view .LVU2400
 863:src/display.c **** 				}
 7444              		.loc 1 863 37 is_stmt 0 view .LVU2401
 7445 014a 7A1B     		subs	r2, r7, r5
 863:src/display.c **** 				}
 7446              		.loc 1 863 6 view .LVU2402
 7447 014c 3146     		mov	r1, r6
 7448 014e C2F12A02 		rsb	r2, r2, #42
 7449 0152 3846     		mov	r0, r7
 7450 0154 FFF7FEFF 		bl	xset
 7451              	.LVL839:
 7452              	.L737:
 863:src/display.c **** 				}
 7453              		.loc 1 863 6 view .LVU2403
 7454              	.LBE402:
 866:src/display.c **** 				int extra_pixels;
 7455              		.loc 1 866 4 is_stmt 1 view .LVU2404
 866:src/display.c **** 				int extra_pixels;
 7456              		.loc 1 866 10 is_stmt 0 view .LVU2405
ARM GAS  /tmp/ccTlkAzC.s 			page 220


 7457 0158 0C23     		movs	r3, #12
 7458 015a 0193     		str	r3, [sp, #4]
 866:src/display.c **** 				int extra_pixels;
 7459              		.loc 1 866 27 is_stmt 1 view .LVU2406
 7460 015c 0EE0     		b	.L744
 7461              	.LVL840:
 7462              	.L800:
 7463              	.LBB403:
 874:src/display.c **** 
 7464              		.loc 1 874 5 is_stmt 0 view .LVU2407
 7465 015e 019A     		ldr	r2, [sp, #4]
 7466 0160 0A32     		adds	r2, r2, #10
 7467 0162 FFF7FEFF 		bl	xset
 7468              	.LVL841:
 876:src/display.c **** 			}
 7469              		.loc 1 876 5 is_stmt 1 view .LVU2408
 876:src/display.c **** 			}
 7470              		.loc 1 876 29 is_stmt 0 view .LVU2409
 7471 0166 B4F12902 		subs	r2, r4, #41
 876:src/display.c **** 			}
 7472              		.loc 1 876 7 view .LVU2410
 7473 016a 019B     		ldr	r3, [sp, #4]
 876:src/display.c **** 			}
 7474              		.loc 1 876 29 view .LVU2411
 7475 016c 48BF     		it	mi
 7476 016e A4F12602 		submi	r2, r4, #38
 876:src/display.c **** 			}
 7477              		.loc 1 876 7 view .LVU2412
 7478 0172 A3EBA203 		sub	r3, r3, r2, asr #2
 7479              	.LBE403:
 866:src/display.c **** 				int extra_pixels;
 7480              		.loc 1 866 4 view .LVU2413
 7481 0176 012B     		cmp	r3, #1
 7482              	.LBB404:
 876:src/display.c **** 			}
 7483              		.loc 1 876 7 view .LVU2414
 7484 0178 0193     		str	r3, [sp, #4]
 7485              	.LBE404:
 866:src/display.c **** 				int extra_pixels;
 7486              		.loc 1 866 27 is_stmt 1 view .LVU2415
 866:src/display.c **** 				int extra_pixels;
 7487              		.loc 1 866 4 is_stmt 0 view .LVU2416
 7488 017a 84DD     		ble	.L708
 7489              	.LVL842:
 7490              	.L744:
 7491              	.LBB405:
 867:src/display.c **** 
 7492              		.loc 1 867 5 is_stmt 1 view .LVU2417
 869:src/display.c **** 				extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 7493              		.loc 1 869 5 view .LVU2418
 7494 017c 01AA     		add	r2, sp, #4
 7495 017e 3946     		mov	r1, r7
 7496 0180 02A8     		add	r0, sp, #8
 7497 0182 FFF7FEFF 		bl	set_x_dn
 7498              	.LVL843:
 870:src/display.c **** 				if (extra_pixels <= 0)
 7499              		.loc 1 870 5 view .LVU2419
ARM GAS  /tmp/ccTlkAzC.s 			page 221


 870:src/display.c **** 				if (extra_pixels <= 0)
 7500              		.loc 1 870 20 is_stmt 0 view .LVU2420
 7501 0186 0121     		movs	r1, #1
 7502 0188 2846     		mov	r0, r5
 7503 018a FFF7FEFF 		bl	pixel_length
 7504              	.LVL844:
 874:src/display.c **** 
 7505              		.loc 1 874 5 is_stmt 1 view .LVU2421
 870:src/display.c **** 				if (extra_pixels <= 0)
 7506              		.loc 1 870 20 is_stmt 0 view .LVU2422
 7507 018e 0446     		mov	r4, r0
 7508              	.LVL845:
 871:src/display.c **** 					break;
 7509              		.loc 1 871 5 is_stmt 1 view .LVU2423
 871:src/display.c **** 					break;
 7510              		.loc 1 871 8 is_stmt 0 view .LVU2424
 7511 0190 2C2C     		cmp	r4, #44
 874:src/display.c **** 
 7512              		.loc 1 874 5 view .LVU2425
 7513 0192 4FF00001 		mov	r1, #0
 7514 0196 3846     		mov	r0, r7
 7515              	.LVL846:
 871:src/display.c **** 					break;
 7516              		.loc 1 871 8 view .LVU2426
 7517 0198 E1DC     		bgt	.L800
 7518              	.LVL847:
 871:src/display.c **** 					break;
 7519              		.loc 1 871 8 view .LVU2427
 7520              	.LBE405:
 7521 019a 74E7     		b	.L708
 7522              	.LVL848:
 7523              	.L791:
 871:src/display.c **** 					break;
 7524              		.loc 1 871 8 view .LVU2428
 7525              	.LBE401:
 643:src/display.c **** 			*p++ = '\006';
 7526              		.loc 1 643 4 is_stmt 1 view .LVU2429
 644:src/display.c **** 		}
 7527              		.loc 1 644 9 is_stmt 0 view .LVU2430
 7528 019c 0623     		movs	r3, #6
 7529 019e 8DF82D30 		strb	r3, [sp, #45]
 643:src/display.c **** 			*p++ = '\006';
 7530              		.loc 1 643 9 view .LVU2431
 7531 01a2 8DF82C70 		strb	r7, [sp, #44]
 644:src/display.c **** 		}
 7532              		.loc 1 644 4 is_stmt 1 view .LVU2432
 7533              	.LVL849:
 647:src/display.c **** 		default:
 7534              		.loc 1 647 3 view .LVU2433
 647:src/display.c **** 		default:
 7535              		.loc 1 647 10 is_stmt 0 view .LVU2434
 7536 01a6 FFF7FEFF 		bl	int_mode
 7537              	.LVL850:
 7538 01aa 0138     		subs	r0, r0, #1
 7539 01ac C0B2     		uxtb	r0, r0
 7540 01ae 0228     		cmp	r0, #2
 7541 01b0 96BF     		itet	ls
ARM GAS  /tmp/ccTlkAzC.s 			page 222


 7542 01b2 654B     		ldrls	r3, .L802+24
 7543 01b4 6549     		ldrhi	r1, .L802+28
 7544 01b6 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7545              	.LVL851:
 654:src/display.c **** 		*q++ = '\006';
 7546              		.loc 1 654 3 is_stmt 1 view .LVU2435
 654:src/display.c **** 		*q++ = '\006';
 7547              		.loc 1 654 7 is_stmt 0 view .LVU2436
 7548 01ba 0DF12E00 		add	r0, sp, #46
 7549              	.LVL852:
 654:src/display.c **** 		*q++ = '\006';
 7550              		.loc 1 654 7 view .LVU2437
 7551 01be FFF7FEFF 		bl	scopy
 7552              	.LVL853:
 655:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7553              		.loc 1 655 8 view .LVU2438
 7554 01c2 0646     		mov	r6, r0
 7555 01c4 0623     		movs	r3, #6
 7556 01c6 06F8013B 		strb	r3, [r6], #1
 654:src/display.c **** 		*q++ = '\006';
 7557              		.loc 1 654 7 view .LVU2439
 7558 01ca 0446     		mov	r4, r0
 7559              	.LVL854:
 655:src/display.c **** 		p = num_arg_0(q, word_size(), 2);
 7560              		.loc 1 655 3 is_stmt 1 view .LVU2440
 656:src/display.c **** 
 7561              		.loc 1 656 3 view .LVU2441
 656:src/display.c **** 
 7562              		.loc 1 656 7 is_stmt 0 view .LVU2442
 7563 01cc FFF7FEFF 		bl	word_size
 7564              	.LVL855:
 7565 01d0 0146     		mov	r1, r0
 7566 01d2 3046     		mov	r0, r6
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7567              		.loc 1 658 20 view .LVU2443
 7568 01d4 5E4E     		ldr	r6, .L802+32
 7569              	.LVL856:
 656:src/display.c **** 
 7570              		.loc 1 656 7 view .LVU2444
 7571 01d6 0222     		movs	r2, #2
 7572 01d8 FFF7FEFF 		bl	num_arg_0
 7573              	.LVL857:
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7574              		.loc 1 658 20 view .LVU2445
 7575 01dc 3368     		ldr	r3, [r6]
 7576              	.LVL858:
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7577              		.loc 1 658 3 is_stmt 1 view .LVU2446
 658:src/display.c **** 			n = 4 + 2 * (5 - IntMaxWindow);
 7578              		.loc 1 658 6 is_stmt 0 view .LVU2447
 7579 01de 002B     		cmp	r3, #0
 7580 01e0 7FF751AF 		ble	.L708
 659:src/display.c **** 			if (*q == '1')
 7581              		.loc 1 659 4 is_stmt 1 view .LVU2448
 659:src/display.c **** 			if (*q == '1')
 7582              		.loc 1 659 10 is_stmt 0 view .LVU2449
 7583 01e4 C3F10702 		rsb	r2, r3, #7
ARM GAS  /tmp/ccTlkAzC.s 			page 223


 7584 01e8 5200     		lsls	r2, r2, #1
 659:src/display.c **** 			if (*q == '1')
 7585              		.loc 1 659 6 view .LVU2450
 7586 01ea 0192     		str	r2, [sp, #4]
 660:src/display.c **** 				n += 2;
 7587              		.loc 1 660 4 is_stmt 1 view .LVU2451
 660:src/display.c **** 				n += 2;
 7588              		.loc 1 660 7 is_stmt 0 view .LVU2452
 7589 01ec 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7590 01ee 3129     		cmp	r1, #49
 661:src/display.c **** 			if (q[1] == '1')
 7591              		.loc 1 661 5 is_stmt 1 view .LVU2453
 661:src/display.c **** 			if (q[1] == '1')
 7592              		.loc 1 661 7 is_stmt 0 view .LVU2454
 7593 01f0 04BF     		itt	eq
 7594 01f2 0232     		addeq	r2, r2, #2
 7595 01f4 0192     		streq	r2, [sp, #4]
 662:src/display.c **** 				n += 2;
 7596              		.loc 1 662 4 is_stmt 1 view .LVU2455
 662:src/display.c **** 				n += 2;
 7597              		.loc 1 662 7 is_stmt 0 view .LVU2456
 7598 01f6 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 7599 01f8 3129     		cmp	r1, #49
 663:src/display.c **** 			while (n-- > 0)
 7600              		.loc 1 663 5 is_stmt 1 view .LVU2457
 663:src/display.c **** 			while (n-- > 0)
 7601              		.loc 1 663 7 is_stmt 0 view .LVU2458
 7602 01fa 08BF     		it	eq
 7603 01fc 0232     		addeq	r2, r2, #2
 664:src/display.c **** 				*p++ = '\006';
 7604              		.loc 1 664 10 is_stmt 1 view .LVU2459
 664:src/display.c **** 				*p++ = '\006';
 7605              		.loc 1 664 12 is_stmt 0 view .LVU2460
 7606 01fe 511E     		subs	r1, r2, #1
 664:src/display.c **** 				*p++ = '\006';
 7607              		.loc 1 664 10 view .LVU2461
 7608 0200 002A     		cmp	r2, #0
 664:src/display.c **** 				*p++ = '\006';
 7609              		.loc 1 664 12 view .LVU2462
 7610 0202 0191     		str	r1, [sp, #4]
 664:src/display.c **** 				*p++ = '\006';
 7611              		.loc 1 664 10 view .LVU2463
 7612 0204 40F3EF80 		ble	.L711
 665:src/display.c **** 
 7613              		.loc 1 665 10 view .LVU2464
 7614 0208 0621     		movs	r1, #6
 7615              	.L712:
 665:src/display.c **** 
 7616              		.loc 1 665 5 is_stmt 1 view .LVU2465
 7617              	.LVL859:
 665:src/display.c **** 
 7618              		.loc 1 665 10 is_stmt 0 view .LVU2466
 7619 020a 00F8011B 		strb	r1, [r0], #1
 7620              	.LVL860:
 664:src/display.c **** 				*p++ = '\006';
 7621              		.loc 1 664 10 is_stmt 1 view .LVU2467
 664:src/display.c **** 				*p++ = '\006';
ARM GAS  /tmp/ccTlkAzC.s 			page 224


 7622              		.loc 1 664 12 is_stmt 0 view .LVU2468
 7623 020e 019B     		ldr	r3, [sp, #4]
 7624 0210 5A1E     		subs	r2, r3, #1
 664:src/display.c **** 				*p++ = '\006';
 7625              		.loc 1 664 10 view .LVU2469
 7626 0212 002B     		cmp	r3, #0
 664:src/display.c **** 				*p++ = '\006';
 7627              		.loc 1 664 12 view .LVU2470
 7628 0214 0192     		str	r2, [sp, #4]
 664:src/display.c **** 				*p++ = '\006';
 7629              		.loc 1 664 10 view .LVU2471
 7630 0216 F8DC     		bgt	.L712
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7631              		.loc 1 667 4 is_stmt 1 view .LVU2472
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7632              		.loc 1 667 11 is_stmt 0 view .LVU2473
 7633 0218 3368     		ldr	r3, [r6]
 7634 021a 0193     		str	r3, [sp, #4]
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7635              		.loc 1 667 27 is_stmt 1 view .LVU2474
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7636              		.loc 1 667 4 is_stmt 0 view .LVU2475
 7637 021c 002B     		cmp	r3, #0
 7638 021e FFF632AF 		blt	.L708
 7639              	.L745:
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7640              		.loc 1 667 4 view .LVU2476
 7641 0222 444C     		ldr	r4, .L802+4
 7642              	.LVL861:
 7643              	.L715:
 668:src/display.c **** 		}
 7644              		.loc 1 668 5 is_stmt 1 view .LVU2477
 668:src/display.c **** 		}
 7645              		.loc 1 668 18 is_stmt 0 view .LVU2478
 7646 0224 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7647 0226 C2F3C202 		ubfx	r2, r2, #3, #3
 668:src/display.c **** 		}
 7648              		.loc 1 668 10 view .LVU2479
 7649 022a 9A42     		cmp	r2, r3
 7650 022c 0CBF     		ite	eq
 7651 022e 7C23     		moveq	r3, #124
 7652 0230 2723     		movne	r3, #39
 7653              	.LVL862:
 668:src/display.c **** 		}
 7654              		.loc 1 668 10 view .LVU2480
 7655 0232 00F8013B 		strb	r3, [r0], #1
 7656              	.LVL863:
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7657              		.loc 1 667 35 is_stmt 1 view .LVU2481
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7658              		.loc 1 667 36 is_stmt 0 view .LVU2482
 7659 0236 019B     		ldr	r3, [sp, #4]
 7660 0238 013B     		subs	r3, r3, #1
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7661              		.loc 1 667 4 view .LVU2483
 7662 023a 002B     		cmp	r3, #0
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccTlkAzC.s 			page 225


 7663              		.loc 1 667 36 view .LVU2484
 7664 023c 0193     		str	r3, [sp, #4]
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7665              		.loc 1 667 27 is_stmt 1 view .LVU2485
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 7666              		.loc 1 667 4 is_stmt 0 view .LVU2486
 7667 023e F1DA     		bge	.L715
 881:src/display.c **** }
 7668              		.loc 1 881 7 is_stmt 1 view .LVU2487
 7669 0240 2846     		mov	r0, r5
 7670              	.LVL864:
 881:src/display.c **** }
 7671              		.loc 1 881 7 is_stmt 0 view .LVU2488
 7672 0242 FFF7FEFF 		bl	set_status
 7673              	.LVL865:
 882:src/display.c **** 
 7674              		.loc 1 882 1 view .LVU2489
 7675 0246 17B0     		add	sp, sp, #92
 7676              		.cfi_remember_state
 7677              		.cfi_def_cfa_offset 28
 7678              		@ sp needed
 7679 0248 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7680              	.LVL866:
 7681              	.L796:
 7682              		.cfi_restore_state
 754:src/display.c **** 			*p++ = '\344';
 7683              		.loc 1 754 4 is_stmt 1 view .LVU2490
 755:src/display.c **** 			*p++ = shift_char;
 7684              		.loc 1 755 4 view .LVU2491
 754:src/display.c **** 			*p++ = '\344';
 7685              		.loc 1 754 9 is_stmt 0 view .LVU2492
 7686 024c 4EF20743 		movw	r3, #58375
 757:src/display.c **** 		}
 7687              		.loc 1 757 6 view .LVU2493
 7688 0250 4049     		ldr	r1, .L802+36
 756:src/display.c **** 			q = "\024";
 7689              		.loc 1 756 9 view .LVU2494
 7690 0252 8DF82E70 		strb	r7, [sp, #46]
 754:src/display.c **** 			*p++ = '\344';
 7691              		.loc 1 754 9 view .LVU2495
 7692 0256 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 756:src/display.c **** 			q = "\024";
 7693              		.loc 1 756 4 is_stmt 1 view .LVU2496
 7694              	.LVL867:
 757:src/display.c **** 		}
 7695              		.loc 1 757 4 view .LVU2497
 756:src/display.c **** 			q = "\024";
 7696              		.loc 1 756 6 is_stmt 0 view .LVU2498
 7697 025a 0DF12F00 		add	r0, sp, #47
 7698              	.LVL868:
 7699              	.L727:
 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7700              		.loc 1 796 3 is_stmt 1 view .LVU2499
 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7701              		.loc 1 796 7 is_stmt 0 view .LVU2500
 7702 025e FFF7FEFF 		bl	scopy
 7703              	.LVL869:
ARM GAS  /tmp/ccTlkAzC.s 			page 226


 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7704              		.loc 1 796 7 view .LVU2501
 7705 0262 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7706              		.loc 1 801 6 view .LVU2502
 7707 0264 5B07     		lsls	r3, r3, #29
 796:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7708              		.loc 1 796 7 view .LVU2503
 7709 0266 0746     		mov	r7, r0
 7710              	.LVL870:
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7711              		.loc 1 801 3 is_stmt 1 view .LVU2504
 801:src/display.c **** 			scopy(p, "\007\204\006\015");
 7712              		.loc 1 801 6 is_stmt 0 view .LVU2505
 7713 0268 7FF526AF 		bpl	.L730
 7714              	.LVL871:
 7715              	.L797:
 802:src/display.c **** 		} else if (State2.runmode) {
 7716              		.loc 1 802 4 is_stmt 1 view .LVU2506
 7717 026c 3A49     		ldr	r1, .L802+40
 7718 026e 3846     		mov	r0, r7
 7719 0270 FFF7FEFF 		bl	scopy
 7720              	.LVL872:
 881:src/display.c **** }
 7721              		.loc 1 881 7 view .LVU2507
 7722 0274 2846     		mov	r0, r5
 7723 0276 FFF7FEFF 		bl	set_status
 7724              	.LVL873:
 882:src/display.c **** 
 7725              		.loc 1 882 1 is_stmt 0 view .LVU2508
 7726 027a 17B0     		add	sp, sp, #92
 7727              		.cfi_remember_state
 7728              		.cfi_def_cfa_offset 28
 7729              		@ sp needed
 7730 027c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7731              	.LVL874:
 7732              	.L793:
 7733              		.cfi_restore_state
 703:src/display.c **** 			*p = '\015';
 7734              		.loc 1 703 4 is_stmt 1 view .LVU2509
 703:src/display.c **** 			*p = '\015';
 7735              		.loc 1 703 9 is_stmt 0 view .LVU2510
 7736 0280 2022     		movs	r2, #32
 704:src/display.c **** 			goto skip;
 7737              		.loc 1 704 7 view .LVU2511
 7738 0282 0D23     		movs	r3, #13
 703:src/display.c **** 			*p = '\015';
 7739              		.loc 1 703 9 view .LVU2512
 7740 0284 0270     		strb	r2, [r0]
 704:src/display.c **** 			goto skip;
 7741              		.loc 1 704 4 is_stmt 1 view .LVU2513
 704:src/display.c **** 			goto skip;
 7742              		.loc 1 704 7 is_stmt 0 view .LVU2514
 7743 0286 4370     		strb	r3, [r0, #1]
 705:src/display.c **** 		}
 7744              		.loc 1 705 4 is_stmt 1 view .LVU2515
 7745 0288 FDE6     		b	.L708
ARM GAS  /tmp/ccTlkAzC.s 			page 227


 7746              	.LVL875:
 7747              	.L792:
 698:src/display.c **** 			*p = '\024';
 7748              		.loc 1 698 4 view .LVU2516
 698:src/display.c **** 			*p = '\024';
 7749              		.loc 1 698 9 is_stmt 0 view .LVU2517
 7750 028a 2022     		movs	r2, #32
 699:src/display.c **** 			goto skip;
 7751              		.loc 1 699 7 view .LVU2518
 7752 028c 1423     		movs	r3, #20
 698:src/display.c **** 			*p = '\024';
 7753              		.loc 1 698 9 view .LVU2519
 7754 028e 0270     		strb	r2, [r0]
 699:src/display.c **** 			goto skip;
 7755              		.loc 1 699 4 is_stmt 1 view .LVU2520
 699:src/display.c **** 			goto skip;
 7756              		.loc 1 699 7 is_stmt 0 view .LVU2521
 7757 0290 4370     		strb	r3, [r0, #1]
 700:src/display.c **** 		}
 7758              		.loc 1 700 4 is_stmt 1 view .LVU2522
 881:src/display.c **** }
 7759              		.loc 1 881 7 view .LVU2523
 7760 0292 2846     		mov	r0, r5
 7761              	.LVL876:
 881:src/display.c **** }
 7762              		.loc 1 881 7 is_stmt 0 view .LVU2524
 7763 0294 FFF7FEFF 		bl	set_status
 7764              	.LVL877:
 882:src/display.c **** 
 7765              		.loc 1 882 1 view .LVU2525
 7766 0298 17B0     		add	sp, sp, #92
 7767              		.cfi_remember_state
 7768              		.cfi_def_cfa_offset 28
 7769              		@ sp needed
 7770 029a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7771              	.LVL878:
 7772              	.L728:
 7773              		.cfi_restore_state
 767:src/display.c **** 			q = "\007\207i";
 7774              		.loc 1 767 3 is_stmt 1 view .LVU2526
 767:src/display.c **** 			q = "\007\207i";
 7775              		.loc 1 767 7 is_stmt 0 view .LVU2527
 7776 029e 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 767:src/display.c **** 			q = "\007\207i";
 7777              		.loc 1 767 6 view .LVU2528
 7778 02a0 13F0C00F 		tst	r3, #192
 7779 02a4 20D1     		bne	.L752
 770:src/display.c **** 			q = "\007\307<";
 7780              		.loc 1 770 8 is_stmt 1 view .LVU2529
 770:src/display.c **** 			q = "\007\307<";
 7781              		.loc 1 770 22 is_stmt 0 view .LVU2530
 7782 02a6 264B     		ldr	r3, .L802+16
 7783 02a8 1B68     		ldr	r3, [r3]
 770:src/display.c **** 			q = "\007\307<";
 7784              		.loc 1 770 11 view .LVU2531
 7785 02aa 012B     		cmp	r3, #1
 7786 02ac 00F0A280 		beq	.L753
ARM GAS  /tmp/ccTlkAzC.s 			page 228


 773:src/display.c **** 			q = "\007\307y";
 7787              		.loc 1 773 8 is_stmt 1 view .LVU2532
 773:src/display.c **** 			q = "\007\307y";
 7788              		.loc 1 773 11 is_stmt 0 view .LVU2533
 7789 02b0 022B     		cmp	r3, #2
 7790 02b2 00F09C80 		beq	.L754
 777:src/display.c **** 			q = "\007\207\007";
 7791              		.loc 1 777 8 is_stmt 1 view .LVU2534
 777:src/display.c **** 			q = "\007\207\007";
 7792              		.loc 1 777 12 is_stmt 0 view .LVU2535
 7793 02b6 FFF7FEFF 		bl	get_trig_mode
 7794              	.LVL879:
 777:src/display.c **** 			q = "\007\207\007";
 7795              		.loc 1 777 11 view .LVU2536
 7796 02ba 0228     		cmp	r0, #2
 7797 02bc 00F0A080 		beq	.L755
 783:src/display.c **** #else
 7798              		.loc 1 783 4 is_stmt 1 view .LVU2537
 783:src/display.c **** #else
 7799              		.loc 1 783 9 is_stmt 0 view .LVU2538
 7800 02c0 FFF7FEFF 		bl	is_dblmode
 7801              	.LVL880:
 783:src/display.c **** #else
 7802              		.loc 1 783 36 view .LVU2539
 7803 02c4 254B     		ldr	r3, .L802+44
 7804 02c6 2649     		ldr	r1, .L802+48
 7805 02c8 0028     		cmp	r0, #0
 7806 02ca 18BF     		it	ne
 7807 02cc 1946     		movne	r1, r3
 7808 02ce 2846     		mov	r0, r5
 7809 02d0 C5E7     		b	.L727
 7810              	.L717:
 689:src/display.c **** 			*p++ = shift_char;
 7811              		.loc 1 689 29 discriminator 1 view .LVU2540
 7812 02d2 FFF7FEFF 		bl	is_dblmode
 7813              	.LVL881:
 689:src/display.c **** 			*p++ = shift_char;
 7814              		.loc 1 689 25 discriminator 1 view .LVU2541
 7815 02d6 0028     		cmp	r0, #0
 7816 02d8 3FF4AFAE 		beq	.L719
 694:src/display.c **** 		}
 7817              		.loc 1 694 4 is_stmt 1 view .LVU2542
 7818              	.LVL882:
 694:src/display.c **** 		}
 7819              		.loc 1 694 9 is_stmt 0 view .LVU2543
 7820 02dc 4423     		movs	r3, #68
 7821 02de 8DF82C30 		strb	r3, [sp, #44]
 694:src/display.c **** 		}
 7822              		.loc 1 694 6 view .LVU2544
 7823 02e2 0DF12D00 		add	r0, sp, #45
 7824              	.LVL883:
 694:src/display.c **** 		}
 7825              		.loc 1 694 6 view .LVU2545
 7826 02e6 AFE6     		b	.L718
 7827              	.LVL884:
 7828              	.L752:
 768:src/display.c **** 		}
ARM GAS  /tmp/ccTlkAzC.s 			page 229


 7829              		.loc 1 768 6 view .LVU2546
 7830 02e8 1E49     		ldr	r1, .L802+52
 589:src/display.c **** 	int n;
 7831              		.loc 1 589 17 view .LVU2547
 7832 02ea 2846     		mov	r0, r5
 7833 02ec B7E7     		b	.L727
 7834              	.LVL885:
 7835              	.L795:
 742:src/display.c **** 		}
 7836              		.loc 1 742 4 is_stmt 1 view .LVU2548
 7837 02ee 1E49     		ldr	r1, .L802+56
 7838 02f0 2046     		mov	r0, r4
 7839 02f2 FFF7FEFF 		bl	scopy
 7840              	.LVL886:
 7841 02f6 C6E6     		b	.L708
 7842              	.LVL887:
 7843              	.L799:
 7844              	.LBB408:
 7845              	.LBB406:
 816:src/display.c **** 
 7846              		.loc 1 816 6 view .LVU2549
 818:src/display.c **** 					UState.nothousands = 1;
 7847              		.loc 1 818 6 is_stmt 0 view .LVU2550
 7848 02f8 2A22     		movs	r2, #42
 7849 02fa 2846     		mov	r0, r5
 816:src/display.c **** 
 7850              		.loc 1 816 42 view .LVU2551
 7851 02fc 98F8E767 		ldrb	r6, [r8, #2023]	@ zero_extendqisi2
 7852 0300 1A4C     		ldr	r4, .L802+60
 818:src/display.c **** 					UState.nothousands = 1;
 7853              		.loc 1 818 6 view .LVU2552
 7854 0302 FFF7FEFF 		bl	xset
 7855              	.LVL888:
 819:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7856              		.loc 1 819 25 view .LVU2553
 7857 0306 98F8E737 		ldrb	r3, [r8, #2023]	@ zero_extendqisi2
 820:src/display.c **** 					UState.nothousands = saved_nothousands;
 7858              		.loc 1 820 6 view .LVU2554
 7859 030a 2946     		mov	r1, r5
 819:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7860              		.loc 1 819 25 view .LVU2555
 7861 030c 43F04003 		orr	r3, r3, #64
 820:src/display.c **** 					UState.nothousands = saved_nothousands;
 7862              		.loc 1 820 6 view .LVU2556
 7863 0310 02A8     		add	r0, sp, #8
 819:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7864              		.loc 1 819 25 view .LVU2557
 7865 0312 88F8E737 		strb	r3, [r8, #2023]
 820:src/display.c **** 					UState.nothousands = saved_nothousands;
 7866              		.loc 1 820 6 view .LVU2558
 7867 0316 FFF7FEFF 		bl	set_x_hms
 7868              	.LVL889:
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7869              		.loc 1 821 25 view .LVU2559
 7870 031a 98F8E737 		ldrb	r3, [r8, #2023]	@ zero_extendqisi2
 816:src/display.c **** 
 7871              		.loc 1 816 42 view .LVU2560
ARM GAS  /tmp/ccTlkAzC.s 			page 230


 7872 031e C6F38016 		ubfx	r6, r6, #6, #1
 7873              	.LVL890:
 818:src/display.c **** 					UState.nothousands = 1;
 7874              		.loc 1 818 6 is_stmt 1 view .LVU2561
 819:src/display.c **** 					set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7875              		.loc 1 819 6 view .LVU2562
 820:src/display.c **** 					UState.nothousands = saved_nothousands;
 7876              		.loc 1 820 6 view .LVU2563
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7877              		.loc 1 821 6 view .LVU2564
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7878              		.loc 1 821 25 is_stmt 0 view .LVU2565
 7879 0322 66F38613 		bfi	r3, r6, #6, #1
 7880 0326 88F8E737 		strb	r3, [r8, #2023]
 826:src/display.c **** 					while (*p) {
 7881              		.loc 1 826 6 is_stmt 1 view .LVU2566
 7882              	.LVL891:
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7883              		.loc 1 827 6 view .LVU2567
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7884              		.loc 1 827 12 view .LVU2568
 821:src/display.c **** 					// First replace the '@' character with the degree symbol
 7885              		.loc 1 821 25 is_stmt 0 view .LVU2569
 7886 032a 0522     		movs	r2, #5
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7887              		.loc 1 827 13 view .LVU2570
 7888 032c 4021     		movs	r1, #64
 7889 032e 29E0     		b	.L740
 7890              	.L803:
 7891              		.align	2
 7892              	.L802:
 7893 0330 00000000 		.word	.LANCHOR15
 7894 0334 00000000 		.word	StateWhileOn
 7895 0338 10000000 		.word	.LC7
 7896 033c 1C000000 		.word	.LC9
 7897 0340 00000000 		.word	RectPolConv
 7898 0344 4C000000 		.word	.LC19
 7899 0348 00000000 		.word	.LANCHOR16
 7900 034c 00000000 		.word	.LC3
 7901 0350 00000000 		.word	IntMaxWindow
 7902 0354 24000000 		.word	.LC10
 7903 0358 44000000 		.word	.LC17
 7904 035c 30000000 		.word	.LC13
 7905 0360 38000000 		.word	.LC15
 7906 0364 08000000 		.word	.LC5
 7907 0368 3C000000 		.word	.LC16
 7908 036c 00000000 		.word	.LANCHOR17
 7909 0370 00000000 		.word	PersistentRam
 7910 0374 00000000 		.word	ShowRegister
 7911              	.LVL892:
 7912              	.L801:
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7913              		.loc 1 827 13 view .LVU2571
 7914 0378 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 7915              	.LVL893:
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7916              		.loc 1 827 12 view .LVU2572
ARM GAS  /tmp/ccTlkAzC.s 			page 231


 7917 037c 0029     		cmp	r1, #0
 7918 037e 3FF482AE 		beq	.L708
 7919 0382 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 7920              	.LVL894:
 7921              	.L740:
 828:src/display.c **** 						if (pixel_length(buf, 1) <= BITMAP_WIDTH + 1) {
 7922              		.loc 1 828 7 is_stmt 1 view .LVU2573
 7923 0384 2846     		mov	r0, r5
 7924 0386 FFF7FEFF 		bl	replace_char
 7925              	.LVL895:
 829:src/display.c **** 							goto skip;
 7926              		.loc 1 829 7 view .LVU2574
 829:src/display.c **** 							goto skip;
 7927              		.loc 1 829 11 is_stmt 0 view .LVU2575
 7928 038a 0121     		movs	r1, #1
 7929 038c 2846     		mov	r0, r5
 7930 038e FFF7FEFF 		bl	pixel_length
 7931              	.LVL896:
 832:src/display.c **** 					}
 7932              		.loc 1 832 7 is_stmt 1 view .LVU2576
 827:src/display.c **** 						replace_char(buf, p[0], p[1]);
 7933              		.loc 1 827 12 view .LVU2577
 829:src/display.c **** 							goto skip;
 7934              		.loc 1 829 10 is_stmt 0 view .LVU2578
 7935 0392 2C28     		cmp	r0, #44
 7936 0394 F0DC     		bgt	.L801
 7937 0396 76E6     		b	.L708
 7938              	.LVL897:
 7939              	.L794:
 829:src/display.c **** 							goto skip;
 7940              		.loc 1 829 10 view .LVU2579
 7941              	.LBE406:
 7942              	.LBE408:
 708:src/display.c **** 			if (State2.wascomplex) {
 7943              		.loc 1 708 29 discriminator 1 view .LVU2580
 7944 0398 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 708:src/display.c **** 			if (State2.wascomplex) {
 7945              		.loc 1 708 25 discriminator 1 view .LVU2581
 7946 039a 13F0C00F 		tst	r3, #192
 7947 039e 24D1     		bne	.L748
 708:src/display.c **** 			if (State2.wascomplex) {
 7948              		.loc 1 708 61 discriminator 2 view .LVU2582
 7949 03a0 1A4B     		ldr	r3, .L804
 7950 03a2 1B68     		ldr	r3, [r3]
 708:src/display.c **** 			if (State2.wascomplex) {
 7951              		.loc 1 708 47 discriminator 2 view .LVU2583
 7952 03a4 002B     		cmp	r3, #0
 7953 03a6 3FF45AAE 		beq	.L722
 709:src/display.c **** 				q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 7954              		.loc 1 709 4 is_stmt 1 view .LVU2584
 712:src/display.c **** 				if (RectPolConv == 1) {
 7955              		.loc 1 712 9 view .LVU2585
 713:src/display.c **** 					q = "\007\306<";
 7956              		.loc 1 713 5 view .LVU2586
 717:src/display.c **** 				}
 7957              		.loc 1 717 8 is_stmt 0 view .LVU2587
 7958 03aa 1949     		ldr	r1, .L804+4
ARM GAS  /tmp/ccTlkAzC.s 			page 232


 7959 03ac 194A     		ldr	r2, .L804+8
 7960 03ae 012B     		cmp	r3, #1
 7961 03b0 18BF     		it	ne
 7962 03b2 1146     		movne	r1, r2
 7963              	.L723:
 7964              	.LVL898:
 720:src/display.c **** 
 7965              		.loc 1 720 4 is_stmt 1 view .LVU2588
 720:src/display.c **** 
 7966              		.loc 1 720 8 is_stmt 0 view .LVU2589
 7967 03b4 2846     		mov	r0, r5
 7968              	.LVL899:
 720:src/display.c **** 
 7969              		.loc 1 720 8 view .LVU2590
 7970 03b6 FFF7FEFF 		bl	scopy
 7971              	.LVL900:
 720:src/display.c **** 
 7972              		.loc 1 720 8 view .LVU2591
 7973 03ba 0746     		mov	r7, r0
 7974              	.LVL901:
 722:src/display.c **** 		}
 7975              		.loc 1 722 4 is_stmt 1 view .LVU2592
 7976 03bc 7FE6     		b	.L724
 7977              	.LVL902:
 7978              	.L798:
 7979              	.LBB409:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7980              		.loc 1 811 75 is_stmt 0 discriminator 2 view .LVU2593
 7981 03be FFF7FEFF 		bl	stack_size
 7982              	.LVL903:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7983              		.loc 1 811 62 discriminator 2 view .LVU2594
 7984 03c2 D9F80010 		ldr	r1, [r9]
 7985 03c6 6330     		adds	r0, r0, #99
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7986              		.loc 1 811 46 discriminator 2 view .LVU2595
 7987 03c8 8842     		cmp	r0, r1
 7988 03ca FFF67FAE 		blt	.L731
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7989              		.loc 1 811 91 discriminator 4 view .LVU2596
 7990 03ce FFF7FEFF 		bl	get_cmdline
 7991              	.LVL904:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 7992              		.loc 1 811 88 discriminator 4 view .LVU2597
 7993 03d2 18B1     		cbz	r0, .L734
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 7994              		.loc 1 812 7 view .LVU2598
 7995 03d4 8EB1     		cbz	r6, .L733
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 7996              		.loc 1 812 28 discriminator 1 view .LVU2599
 7997 03d6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 7998              		.loc 1 812 10 discriminator 1 view .LVU2600
 7999 03d8 5906     		lsls	r1, r3, #25
 8000 03da 0ED4     		bmi	.L733
 8001              	.L734:
 8002 03dc D9F80010 		ldr	r1, [r9]
ARM GAS  /tmp/ccTlkAzC.s 			page 233


 8003 03e0 74E6     		b	.L731
 8004              	.LVL905:
 8005              	.L750:
 812:src/display.c **** 					) ? ShowRegister : ShowRegister+1);
 8006              		.loc 1 812 10 discriminator 1 view .LVU2601
 8007              	.LBE409:
 731:src/display.c **** #endif
 8008              		.loc 1 731 20 view .LVU2602
 8009 03e2 0D49     		ldr	r1, .L804+12
 8010 03e4 47E6     		b	.L725
 8011              	.LVL906:
 8012              	.L711:
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8013              		.loc 1 667 4 is_stmt 1 view .LVU2603
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8014              		.loc 1 667 11 is_stmt 0 view .LVU2604
 8015 03e6 0193     		str	r3, [sp, #4]
 667:src/display.c **** 				*p++ = State2.window == n ? '|' : '\'';
 8016              		.loc 1 667 27 is_stmt 1 view .LVU2605
 8017 03e8 1BE7     		b	.L745
 8018              	.LVL907:
 8019              	.L748:
 710:src/display.c **** 			}
 8020              		.loc 1 710 7 is_stmt 0 view .LVU2606
 8021 03ea 0C49     		ldr	r1, .L804+16
 8022 03ec E2E7     		b	.L723
 8023              	.LVL908:
 8024              	.L754:
 774:src/display.c **** 		}
 8025              		.loc 1 774 6 view .LVU2607
 8026 03ee 0C49     		ldr	r1, .L804+20
 589:src/display.c **** 	int n;
 8027              		.loc 1 589 17 view .LVU2608
 8028 03f0 2846     		mov	r0, r5
 8029 03f2 34E7     		b	.L727
 8030              	.L753:
 771:src/display.c **** 		}
 8031              		.loc 1 771 6 view .LVU2609
 8032 03f4 0B49     		ldr	r1, .L804+24
 589:src/display.c **** 	int n;
 8033              		.loc 1 589 17 view .LVU2610
 8034 03f6 2846     		mov	r0, r5
 8035 03f8 31E7     		b	.L727
 8036              	.LVL909:
 8037              	.L733:
 8038              	.LBB410:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8039              		.loc 1 811 4 discriminator 7 view .LVU2611
 8040 03fa D9F80010 		ldr	r1, [r9]
 8041 03fe 66E6     		b	.L735
 8042              	.LVL910:
 8043              	.L755:
 811:src/display.c **** 					 && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8044              		.loc 1 811 4 discriminator 7 view .LVU2612
 8045              	.LBE410:
 778:src/display.c **** 		}
 8046              		.loc 1 778 6 view .LVU2613
ARM GAS  /tmp/ccTlkAzC.s 			page 234


 8047 0400 0949     		ldr	r1, .L804+28
 589:src/display.c **** 	int n;
 8048              		.loc 1 589 17 view .LVU2614
 8049 0402 2846     		mov	r0, r5
 8050 0404 2BE7     		b	.L727
 8051              	.LVL911:
 8052              	.L757:
 8053              	.LBB411:
 8054              	.LBB407:
 850:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8055              		.loc 1 850 23 view .LVU2615
 8056 0406 3E26     		movs	r6, #62
 8057              	.LVL912:
 850:src/display.c **** 					case 'L':	ltgteq = '<'; break;
 8058              		.loc 1 850 23 view .LVU2616
 8059 0408 8CE6     		b	.L742
 8060              	.L805:
 8061 040a 00BF     		.align	2
 8062              	.L804:
 8063 040c 00000000 		.word	RectPolConv
 8064 0410 04000000 		.word	.LC4
 8065 0414 0C000000 		.word	.LC6
 8066 0418 14000000 		.word	.LC8
 8067 041c 08000000 		.word	.LC5
 8068 0420 28000000 		.word	.LC11
 8069 0424 34000000 		.word	.LC14
 8070 0428 2C000000 		.word	.LC12
 8071              	.LBE407:
 8072              	.LBE411:
 8073              		.cfi_endproc
 8074              	.LFE16:
 8076              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8077              		.align	2
 8078              	.LC20:
 8079 0000 0D00     		.ascii	"\015\000"
 8080 0002 0000     		.align	2
 8081              	.LC21:
 8082 0004 060600   		.ascii	"\006\006\000"
 8083 0007 00       		.align	2
 8084              	.LC23:
 8085 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8085      492C2057 
 8085      77414C74 
 8085      4500
 8086 0016 0000     		.align	2
 8087              	.LC24:
 8088 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 8088      2055204C 
 8088      20492C20 
 8088      20572041 
 8088      204C2054 
 8089 0032 0000     		.align	2
 8090              	.LC25:
 8091 0034 2000     		.ascii	" \000"
 8092 0036 0000     		.align	2
 8093              	.LC26:
 8094 0038 48595000 		.ascii	"HYP\000"
ARM GAS  /tmp/ccTlkAzC.s 			page 235


 8095              		.align	2
 8096              	.LC29:
 8097 003c 7F060600 		.ascii	"\177\006\006\000"
 8098              		.align	2
 8099              	.LC30:
 8100 0040 3020746F 		.ascii	"0 to 255\000"
 8100      20323535 
 8100      00
 8101 0049 000000   		.align	2
 8102              	.LC31:
 8103 004c 46726565 		.ascii	"Free:\000"
 8103      3A00
 8104 0052 0000     		.align	2
 8105              	.LC32:
 8106 0054 202C2046 		.ascii	" , FL. \000"
 8106      4C2E2000 
 8107              		.align	2
 8108              	.LC33:
 8109 005c 52656773 		.ascii	"Regs:\000"
 8109      3A00
 8110 0062 0000     		.align	2
 8111              	.LC34:
 8112 0064 20910606 		.ascii	" \221\006\006+\000"
 8112      2B00
 8113 006a 0000     		.align	2
 8114              	.LC35:
 8115 006c 202C204C 		.ascii	" , Loc. \000"
 8115      6F632E20 
 8115      00
 8116 0075 000000   		.align	2
 8117              	.LC36:
 8118 0078 464C2000 		.ascii	"FL \000"
 8119              		.align	2
 8120              	.LC37:
 8121 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8121      06413A44 
 8121      064C494A 
 8121      4B00
 8122 008a 0000     		.align	2
 8123              	.LC38:
 8124 008c 464C2E30 		.ascii	"FL.00-.15\000"
 8124      302D2E31 
 8124      3500
 8125 0096 0000     		.align	2
 8126              	.LC39:
 8127 0098 43414C4C 		.ascii	"CALLS\000"
 8127      5300
 8128 009e 0000     		.align	2
 8129              	.LC40:
 8130 00a0 52656720 		.ascii	"Reg \000"
 8130      00
 8131 00a5 000000   		.align	2
 8132              	.LC41:
 8133 00a8 00       		.ascii	"\000"
 8134 00a9 000000   		.align	2
 8135              	.LC42:
 8136 00ac 202D2D2D 		.ascii	" ---\000"
ARM GAS  /tmp/ccTlkAzC.s 			page 236


 8136      00
 8137 00b1 000000   		.align	2
 8138              	.LC28:
 8139 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8139      093E0A00 
 8140              		.align	2
 8141              	.LC27:
 8142 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8142      41424344 
 8142      4C494A4B 
 8142      00
 8143              		.section	.text.display,"ax",%progbits
 8144              		.align	1
 8145              		.p2align 2,,3
 8146              		.global	display
 8147              		.syntax unified
 8148              		.thumb
 8149              		.thumb_func
 8150              		.fpu fpv4-sp-d16
 8152              	display:
 8153              	.LFB34:
2215:src/display.c **** 	int i, j;
 8154              		.loc 1 2215 20 is_stmt 1 view -0
 8155              		.cfi_startproc
 8156              		@ args = 0, pretend = 0, frame = 160
 8157              		@ frame_needed = 0, uses_anonymous_args = 0
2216:src/display.c **** 	char buf[40], *bp = buf;
 8158              		.loc 1 2216 2 view .LVU2618
2217:src/display.c **** 	const char *p;
 8159              		.loc 1 2217 2 view .LVU2619
2215:src/display.c **** 	int i, j;
 8160              		.loc 1 2215 20 is_stmt 0 view .LVU2620
 8161 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8162              		.cfi_def_cfa_offset 36
 8163              		.cfi_offset 4, -36
 8164              		.cfi_offset 5, -32
 8165              		.cfi_offset 6, -28
 8166              		.cfi_offset 7, -24
 8167              		.cfi_offset 8, -20
 8168              		.cfi_offset 9, -16
 8169              		.cfi_offset 10, -12
 8170              		.cfi_offset 11, -8
 8171              		.cfi_offset 14, -4
2220:src/display.c **** 	int skip = 0;
 8172              		.loc 1 2220 24 view .LVU2621
 8173 0004 BD4C     		ldr	r4, .L1098
2215:src/display.c **** 	int i, j;
 8174              		.loc 1 2215 20 view .LVU2622
 8175 0006 A9B0     		sub	sp, sp, #164
 8176              		.cfi_def_cfa_offset 200
 8177              	.LVL913:
2218:src/display.c **** 	int annuc = 0;
 8178              		.loc 1 2218 2 is_stmt 1 view .LVU2623
2219:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8179              		.loc 1 2219 2 view .LVU2624
2220:src/display.c **** 	int skip = 0;
 8180              		.loc 1 2220 2 view .LVU2625
ARM GAS  /tmp/ccTlkAzC.s 			page 237


2220:src/display.c **** 	int skip = 0;
 8181              		.loc 1 2220 24 is_stmt 0 view .LVU2626
 8182 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8183              	.LVL914:
2221:src/display.c **** 	int x_disp = 0;
 8184              		.loc 1 2221 2 is_stmt 1 view .LVU2627
2222:src/display.c **** 	const int shift = cur_shift();
 8185              		.loc 1 2222 2 view .LVU2628
2223:src/display.c **** 
 8186              		.loc 1 2223 2 view .LVU2629
2223:src/display.c **** 
 8187              		.loc 1 2223 20 is_stmt 0 view .LVU2630
 8188 000c FFF7FEFF 		bl	cur_shift
 8189              	.LVL915:
2227:src/display.c **** 		State2.disp_freeze = 0;
 8190              		.loc 1 2227 6 view .LVU2631
 8191 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8192              	.LVL916:
2227:src/display.c **** 		State2.disp_freeze = 0;
 8193              		.loc 1 2227 2 is_stmt 1 view .LVU2632
2227:src/display.c **** 		State2.disp_freeze = 0;
 8194              		.loc 1 2227 5 is_stmt 0 view .LVU2633
 8195 0012 13F01006 		ands	r6, r3, #16
 8196 0016 40F08780 		bne	.L1057
2237:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8197              		.loc 1 2237 2 is_stmt 1 view .LVU2634
2237:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8198              		.loc 1 2237 6 is_stmt 0 view .LVU2635
 8199 001a B94F     		ldr	r7, .L1098+4
 8200 001c 3D68     		ldr	r5, [r7]
2237:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8201              		.loc 1 2237 5 view .LVU2636
 8202 001e 002D     		cmp	r5, #0
 8203 0020 4BD1     		bne	.L1058
2254:src/display.c **** 
 8204              		.loc 1 2254 2 is_stmt 1 view .LVU2637
 8205 0022 8246     		mov	r10, r0
 8206 0024 FFF7FEFF 		bl	reset_disp
 8207              	.LVL917:
2256:src/display.c **** 	if (State2.cmplx  && !cata) {
 8208              		.loc 1 2256 2 view .LVU2638
 8209 0028 1EA8     		add	r0, sp, #120
 8210              	.LVL918:
2256:src/display.c **** 	if (State2.cmplx  && !cata) {
 8211              		.loc 1 2256 2 is_stmt 0 view .LVU2639
 8212 002a 2822     		movs	r2, #40
 8213 002c 2946     		mov	r1, r5
 8214 002e FFF7FEFF 		bl	xset
 8215              	.LVL919:
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8216              		.loc 1 2257 2 is_stmt 1 view .LVU2640
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8217              		.loc 1 2257 6 is_stmt 0 view .LVU2641
 8218 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8219              		.loc 1 2257 5 view .LVU2642
 8220 0034 9E07     		lsls	r6, r3, #30
ARM GAS  /tmp/ccTlkAzC.s 			page 238


 8221 0036 03D5     		bpl	.L941
2257:src/display.c **** 		*bp++ = COMPLEX_PREFIX;
 8222              		.loc 1 2257 20 discriminator 1 view .LVU2643
 8223 0038 B9F1000F 		cmp	r9, #0
 8224 003c 00F0EB80 		beq	.L1059
 8225              	.L941:
2217:src/display.c **** 	const char *p;
 8226              		.loc 1 2217 17 view .LVU2644
 8227 0040 0DF17808 		add	r8, sp, #120
 8228              	.LVL920:
 8229              	.L812:
2261:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8230              		.loc 1 2261 2 is_stmt 1 view .LVU2645
2261:src/display.c **** 		char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8231              		.loc 1 2261 5 is_stmt 0 view .LVU2646
 8232 0044 D806     		lsls	r0, r3, #27
 8233 0046 00F17381 		bmi	.L1060
2273:src/display.c **** 		set_status(S_SURE);
 8234              		.loc 1 2273 9 is_stmt 1 view .LVU2647
2273:src/display.c **** 		set_status(S_SURE);
 8235              		.loc 1 2273 13 is_stmt 0 view .LVU2648
 8236 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2273:src/display.c **** 		set_status(S_SURE);
 8237              		.loc 1 2273 12 view .LVU2649
 8238 004c 5107     		lsls	r1, r2, #29
 8239 004e 40F0F380 		bne	.L1061
2275:src/display.c **** 		bp = scopy(bp, "HYP");
 8240              		.loc 1 2275 9 is_stmt 1 view .LVU2650
2275:src/display.c **** 		bp = scopy(bp, "HYP");
 8241              		.loc 1 2275 12 is_stmt 0 view .LVU2651
 8242 0052 9A06     		lsls	r2, r3, #26
 8243 0054 00F1C180 		bmi	.L1062
2280:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8244              		.loc 1 2280 9 is_stmt 1 view .LVU2652
2280:src/display.c **** 		// const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8245              		.loc 1 2280 12 is_stmt 0 view .LVU2653
 8246 0058 DE07     		lsls	r6, r3, #31
 8247 005a 00F1AC81 		bmi	.L1063
2288:src/display.c **** 		/* Commands with arguments */
 8248              		.loc 1 2288 9 is_stmt 1 view .LVU2654
2288:src/display.c **** 		/* Commands with arguments */
 8249              		.loc 1 2288 13 is_stmt 0 view .LVU2655
 8250 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2288:src/display.c **** 		/* Commands with arguments */
 8251              		.loc 1 2288 12 view .LVU2656
 8252 0060 8806     		lsls	r0, r1, #26
 8253 0062 00F10382 		bmi	.L1064
2319:src/display.c **** 		*bp++ = 'x';
 8254              		.loc 1 2319 9 is_stmt 1 view .LVU2657
2319:src/display.c **** 		*bp++ = 'x';
 8255              		.loc 1 2319 19 is_stmt 0 view .LVU2658
 8256 0066 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2319:src/display.c **** 		*bp++ = 'x';
 8257              		.loc 1 2319 12 view .LVU2659
 8258 0068 072A     		cmp	r2, #7
 8259 006a 40F0E281 		bne	.L1065
2325:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
ARM GAS  /tmp/ccTlkAzC.s 			page 239


 8260              		.loc 1 2325 9 is_stmt 1 view .LVU2660
2325:src/display.c **** 		const opcode op = current_catalogue(State.catpos);
 8261              		.loc 1 2325 12 is_stmt 0 view .LVU2661
 8262 006e B9F1000F 		cmp	r9, #0
 8263 0072 40F00D83 		bne	.L1066
2373:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8264              		.loc 1 2373 9 is_stmt 1 view .LVU2662
2373:src/display.c **** 		bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 8265              		.loc 1 2373 12 is_stmt 0 view .LVU2663
 8266 0076 1A07     		lsls	r2, r3, #28
 8267 0078 00F15D83 		bmi	.L1067
2381:src/display.c **** 		show_status();
 8268              		.loc 1 2381 9 is_stmt 1 view .LVU2664
2381:src/display.c **** 		show_status();
 8269              		.loc 1 2381 19 is_stmt 0 view .LVU2665
 8270 007c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
2381:src/display.c **** 		show_status();
 8271              		.loc 1 2381 12 view .LVU2666
 8272 007e 002B     		cmp	r3, #0
 8273 0080 40F0E283 		bne	.L1068
2384:src/display.c **** 		show_label();
 8274              		.loc 1 2384 9 is_stmt 1 view .LVU2667
2384:src/display.c **** 		show_label();
 8275              		.loc 1 2384 13 is_stmt 0 view .LVU2668
 8276 0084 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2384:src/display.c **** 		show_label();
 8277              		.loc 1 2384 12 view .LVU2669
 8278 0086 5E07     		lsls	r6, r3, #29
 8279 0088 00F1A983 		bmi	.L1069
2387:src/display.c **** 		show_registers();
 8280              		.loc 1 2387 9 is_stmt 1 view .LVU2670
2387:src/display.c **** 		show_registers();
 8281              		.loc 1 2387 12 is_stmt 0 view .LVU2671
 8282 008c 1807     		lsls	r0, r3, #28
 8283 008e 00F1CF84 		bmi	.L1070
2397:src/display.c **** 		if (DispMsg) {
 8284              		.loc 1 2397 9 is_stmt 1 view .LVU2672
2397:src/display.c **** 		if (DispMsg) {
 8285              		.loc 1 2397 12 is_stmt 0 view .LVU2673
 8286 0092 4806     		lsls	r0, r1, #25
 8287 0094 40F1AE84 		bpl	.L877
2398:src/display.c **** 			set_status(DispMsg);
 8288              		.loc 1 2398 3 is_stmt 1 view .LVU2674
2398:src/display.c **** 			set_status(DispMsg);
 8289              		.loc 1 2398 7 is_stmt 0 view .LVU2675
 8290 0098 9A4E     		ldr	r6, .L1098+8
 8291 009a D6F800B0 		ldr	fp, [r6]
2398:src/display.c **** 			set_status(DispMsg);
 8292              		.loc 1 2398 6 view .LVU2676
 8293 009e BBF1000F 		cmp	fp, #0
 8294 00a2 00F07D84 		beq	.L878
2399:src/display.c **** 		} else if (DispPlot) {
 8295              		.loc 1 2399 4 is_stmt 1 view .LVU2677
 8296 00a6 5846     		mov	r0, fp
 8297 00a8 FFF7FEFF 		bl	set_status
 8298              	.LVL921:
2456:src/display.c **** nostk:	show_flags();
ARM GAS  /tmp/ccTlkAzC.s 			page 240


 8299              		.loc 1 2456 2 view .LVU2678
 8300 00ac DFF87482 		ldr	r8, .L1098+40
 8301              	.LVL922:
2456:src/display.c **** nostk:	show_flags();
 8302              		.loc 1 2456 2 is_stmt 0 view .LVU2679
 8303 00b0 FFF7FEFF 		bl	show_stack
 8304              	.LVL923:
2457:src/display.c **** 	if (!skip) {
 8305              		.loc 1 2457 8 is_stmt 1 view .LVU2680
 8306 00b4 FFF7FEFF 		bl	show_flags
 8307              	.LVL924:
2458:src/display.c **** 		if (State2.runmode) {
 8308              		.loc 1 2458 2 view .LVU2681
 8309 00b8 C8E0     		b	.L816
 8310              	.LVL925:
 8311              	.L1058:
2244:src/display.c **** 
 8312              		.loc 1 2244 3 view .LVU2682
 8313 00ba FFF7FEFF 		bl	wait_for_display
 8314              	.LVL926:
2247:src/display.c **** 			clr_dot(i);
 8315              		.loc 1 2247 3 view .LVU2683
2247:src/display.c **** 			clr_dot(i);
 8316              		.loc 1 2247 15 view .LVU2684
 8317              	.L810:
2248:src/display.c **** 		}
 8318              		.loc 1 2248 4 discriminator 3 view .LVU2685
 8319 00be 3046     		mov	r0, r6
2247:src/display.c **** 			clr_dot(i);
 8320              		.loc 1 2247 30 is_stmt 0 discriminator 3 view .LVU2686
 8321 00c0 0136     		adds	r6, r6, #1
 8322              	.LVL927:
2248:src/display.c **** 		}
 8323              		.loc 1 2248 4 discriminator 3 view .LVU2687
 8324 00c2 FFF7FEFF 		bl	clr_dot
 8325              	.LVL928:
2247:src/display.c **** 			clr_dot(i);
 8326              		.loc 1 2247 30 is_stmt 1 discriminator 3 view .LVU2688
2247:src/display.c **** 			clr_dot(i);
 8327              		.loc 1 2247 15 discriminator 3 view .LVU2689
2247:src/display.c **** 			clr_dot(i);
 8328              		.loc 1 2247 3 is_stmt 0 discriminator 3 view .LVU2690
 8329 00c6 832E     		cmp	r6, #131
 8330 00c8 F9D1     		bne	.L810
 8331 00ca 8E4E     		ldr	r6, .L1098+8
 8332              	.LVL929:
2247:src/display.c **** 			clr_dot(i);
 8333              		.loc 1 2247 3 discriminator 3 view .LVU2691
 8334 00cc DFF85482 		ldr	r8, .L1098+40
2219:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8335              		.loc 1 2219 6 view .LVU2692
 8336 00d0 0025     		movs	r5, #0
 8337              	.LVL930:
 8338              	.L811:
2461:src/display.c **** 			if (p == NULL || cata) {
 8339              		.loc 1 2461 4 is_stmt 1 view .LVU2693
2461:src/display.c **** 			if (p == NULL || cata) {
ARM GAS  /tmp/ccTlkAzC.s 			page 241


 8340              		.loc 1 2461 8 is_stmt 0 view .LVU2694
 8341 00d2 FFF7FEFF 		bl	get_cmdline
 8342              	.LVL931:
2462:src/display.c **** 				if (ShowRegister != -1) {
 8343              		.loc 1 2462 4 is_stmt 1 view .LVU2695
2462:src/display.c **** 				if (ShowRegister != -1) {
 8344              		.loc 1 2462 7 is_stmt 0 view .LVU2696
 8345 00d6 8246     		mov	r10, r0
 8346 00d8 10B1     		cbz	r0, .L892
2462:src/display.c **** 				if (ShowRegister != -1) {
 8347              		.loc 1 2462 18 discriminator 1 view .LVU2697
 8348 00da B9F1000F 		cmp	r9, #0
 8349 00de 2ED0     		beq	.L893
 8350              	.L892:
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8351              		.loc 1 2463 5 is_stmt 1 view .LVU2698
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8352              		.loc 1 2463 22 is_stmt 0 view .LVU2699
 8353 00e0 DFF84492 		ldr	r9, .L1098+44
 8354              	.LVL932:
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8355              		.loc 1 2463 22 view .LVU2700
 8356 00e4 D9F80000 		ldr	r0, [r9]
 8357              	.LVL933:
2463:src/display.c **** 					x_disp = (ShowRegister == regX_idx) && !State2.hms;
 8358              		.loc 1 2463 8 view .LVU2701
 8359 00e8 421C     		adds	r2, r0, #1
 8360 00ea 00F04E81 		beq	.L894
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8361              		.loc 1 2464 6 is_stmt 1 view .LVU2702
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8362              		.loc 1 2464 42 is_stmt 0 view .LVU2703
 8363 00ee 6428     		cmp	r0, #100
 8364 00f0 00F08680 		beq	.L1071
 8365              	.L895:
2465:src/display.c **** 				}
 8366              		.loc 1 2465 6 is_stmt 1 view .LVU2704
 8367 00f4 0021     		movs	r1, #0
 8368 00f6 FFF7FEFF 		bl	format_reg
 8369              	.LVL934:
2473:src/display.c **** 				goto finish;
 8370              		.loc 1 2473 4 view .LVU2705
2473:src/display.c **** 				goto finish;
 8371              		.loc 1 2473 7 is_stmt 0 view .LVU2706
 8372 00fa 3B68     		ldr	r3, [r7]
 8373 00fc 002B     		cmp	r3, #0
 8374 00fe 00F0FA80 		beq	.L1054
 8375              	.LVL935:
 8376              	.L898:
2526:src/display.c **** 	State2.disp_as_alpha = 0;
 8377              		.loc 1 2526 2 is_stmt 1 view .LVU2707
2527:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8378              		.loc 1 2527 2 view .LVU2708
2528:src/display.c **** 	State2.invalid_disp = 0;
 8379              		.loc 1 2528 2 view .LVU2709
2526:src/display.c **** 	State2.disp_as_alpha = 0;
 8380              		.loc 1 2526 17 is_stmt 0 view .LVU2710
ARM GAS  /tmp/ccTlkAzC.s 			page 242


 8381 0102 6369     		ldr	r3, [r4, #20]
 8382 0104 23F02173 		bic	r3, r3, #42205184
 8383 0108 23F48053 		bic	r3, r3, #4096
2528:src/display.c **** 	State2.invalid_disp = 0;
 8384              		.loc 1 2528 15 view .LVU2711
 8385 010c 0022     		movs	r2, #0
2526:src/display.c **** 	State2.disp_as_alpha = 0;
 8386              		.loc 1 2526 17 view .LVU2712
 8387 010e 6361     		str	r3, [r4, #20]
2530:src/display.c **** 	DispMsg = CNULL;
 8388              		.loc 1 2530 15 view .LVU2713
 8389 0110 6423     		movs	r3, #100
2528:src/display.c **** 	State2.invalid_disp = 0;
 8390              		.loc 1 2528 15 view .LVU2714
 8391 0112 6274     		strb	r2, [r4, #17]
2529:src/display.c **** 	ShowRegister = regX_idx;
 8392              		.loc 1 2529 2 is_stmt 1 view .LVU2715
2530:src/display.c **** 	DispMsg = CNULL;
 8393              		.loc 1 2530 2 view .LVU2716
2531:src/display.c **** 	DispPlot = 0;
 8394              		.loc 1 2531 10 is_stmt 0 view .LVU2717
 8395 0114 3260     		str	r2, [r6]
2532:src/display.c **** 	State2.disp_small = 0;
 8396              		.loc 1 2532 11 view .LVU2718
 8397 0116 A8F80020 		strh	r2, [r8]	@ movhi
2530:src/display.c **** 	DispMsg = CNULL;
 8398              		.loc 1 2530 15 view .LVU2719
 8399 011a C9F80030 		str	r3, [r9]
2531:src/display.c **** 	DispPlot = 0;
 8400              		.loc 1 2531 2 is_stmt 1 view .LVU2720
2532:src/display.c **** 	State2.disp_small = 0;
 8401              		.loc 1 2532 2 view .LVU2721
2533:src/display.c **** 	finish_display();
 8402              		.loc 1 2533 2 view .LVU2722
2534:src/display.c **** #ifdef CONSOLE
 8403              		.loc 1 2534 2 view .LVU2723
 8404 011e FFF7FEFF 		bl	finish_display
 8405              	.LVL936:
2538:src/display.c **** 
 8406              		.loc 1 2538 1 is_stmt 0 view .LVU2724
 8407 0122 29B0     		add	sp, sp, #164
 8408              		.cfi_remember_state
 8409              		.cfi_def_cfa_offset 36
 8410              		@ sp needed
 8411 0124 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8412              	.LVL937:
 8413              	.L1057:
 8414              		.cfi_restore_state
2228:src/display.c **** 		State2.disp_temp = 1;
 8415              		.loc 1 2228 3 is_stmt 1 view .LVU2725
2229:src/display.c **** #ifdef CONSOLE
 8416              		.loc 1 2229 3 view .LVU2726
2233:src/display.c **** 		return;
 8417              		.loc 1 2233 11 is_stmt 0 view .LVU2727
 8418 0128 774A     		ldr	r2, .L1098+12
2228:src/display.c **** 		State2.disp_temp = 1;
 8419              		.loc 1 2228 22 view .LVU2728
ARM GAS  /tmp/ccTlkAzC.s 			page 243


 8420 012a 23F03003 		bic	r3, r3, #48
 8421 012e 43F02003 		orr	r3, r3, #32
2233:src/display.c **** 		return;
 8422              		.loc 1 2233 11 view .LVU2729
 8423 0132 0021     		movs	r1, #0
2228:src/display.c **** 		State2.disp_temp = 1;
 8424              		.loc 1 2228 22 view .LVU2730
 8425 0134 E375     		strb	r3, [r4, #23]
2233:src/display.c **** 		return;
 8426              		.loc 1 2233 3 is_stmt 1 view .LVU2731
2233:src/display.c **** 		return;
 8427              		.loc 1 2233 11 is_stmt 0 view .LVU2732
 8428 0136 1160     		str	r1, [r2]
2234:src/display.c **** 	}
 8429              		.loc 1 2234 3 is_stmt 1 view .LVU2733
2538:src/display.c **** 
 8430              		.loc 1 2538 1 is_stmt 0 view .LVU2734
 8431 0138 29B0     		add	sp, sp, #164
 8432              		.cfi_remember_state
 8433              		.cfi_def_cfa_offset 36
 8434              		@ sp needed
 8435 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8436              	.LVL938:
 8437              	.L893:
 8438              		.cfi_restore_state
2470:src/display.c **** 				x_disp = 1;
 8439              		.loc 1 2470 5 is_stmt 1 view .LVU2735
 8440              	.LBB455:
 8441              	.LBI455:
 884:src/display.c **** 	int i;
 8442              		.loc 1 884 13 view .LVU2736
 8443              	.LBB456:
 885:src/display.c **** 	int gotdot = -1;
 8444              		.loc 1 885 2 view .LVU2737
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8445              		.loc 1 886 2 view .LVU2738
 888:src/display.c **** #endif
 8446              		.loc 1 888 2 view .LVU2739
 892:src/display.c **** #endif
 8447              		.loc 1 892 2 view .LVU2740
 895:src/display.c **** 		SET_MANT_SIGN;
 8448              		.loc 1 895 2 view .LVU2741
 895:src/display.c **** 		SET_MANT_SIGN;
 8449              		.loc 1 895 5 is_stmt 0 view .LVU2742
 8450 013e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8451 0140 2D2B     		cmp	r3, #45
 8452 0142 00F03C82 		beq	.L1072
 8453              	.LVL939:
 8454              	.L899:
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8455              		.loc 1 900 2 is_stmt 1 view .LVU2743
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8456              		.loc 1 900 6 is_stmt 0 view .LVU2744
 8457 0146 714B     		ldr	r3, .L1098+16
 8458 0148 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8459              		.loc 1 900 5 view .LVU2745
ARM GAS  /tmp/ccTlkAzC.s 			page 244


 8460 014c 13F00109 		ands	r9, r3, #1
 8461              	.LVL940:
 900:src/display.c **** 		for (i=0; *p != '\0'; p++) {
 8462              		.loc 1 900 5 view .LVU2746
 8463 0150 00F0AB81 		beq	.L900
 8464              	.LVL941:
 901:src/display.c **** 			set_dig(i, *p);
 8465              		.loc 1 901 13 is_stmt 1 view .LVU2747
 8466 0154 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 901:src/display.c **** 			set_dig(i, *p);
 8467              		.loc 1 901 9 is_stmt 0 view .LVU2748
 8468 0158 4FF00009 		mov	r9, #0
 901:src/display.c **** 			set_dig(i, *p);
 8469              		.loc 1 901 3 view .LVU2749
 8470 015c 41B1     		cbz	r1, .L904
 8471              	.LVL942:
 8472              	.L901:
 902:src/display.c **** 			i += SEGS_PER_DIGIT;
 8473              		.loc 1 902 4 is_stmt 1 view .LVU2750
 8474 015e 4846     		mov	r0, r9
 8475 0160 FFF7FEFF 		bl	set_dig
 8476              	.LVL943:
 903:src/display.c **** 		}
 8477              		.loc 1 903 4 view .LVU2751
 901:src/display.c **** 			set_dig(i, *p);
 8478              		.loc 1 901 13 is_stmt 0 view .LVU2752
 8479 0164 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8480              	.LVL944:
 903:src/display.c **** 		}
 8481              		.loc 1 903 6 view .LVU2753
 8482 0168 09F10909 		add	r9, r9, #9
 8483              	.LVL945:
 901:src/display.c **** 			set_dig(i, *p);
 8484              		.loc 1 901 25 is_stmt 1 view .LVU2754
 901:src/display.c **** 			set_dig(i, *p);
 8485              		.loc 1 901 13 view .LVU2755
 901:src/display.c **** 			set_dig(i, *p);
 8486              		.loc 1 901 3 is_stmt 0 view .LVU2756
 8487 016c 0029     		cmp	r1, #0
 8488 016e F6D1     		bne	.L901
 8489              	.LVL946:
 8490              	.L904:
 905:src/display.c **** 	} else {
 8491              		.loc 1 905 3 is_stmt 1 view .LVU2757
 8492 0170 FFF7FEFF 		bl	carry_overflow
 8493              	.LVL947:
 905:src/display.c **** 	} else {
 8494              		.loc 1 905 3 is_stmt 0 view .LVU2758
 8495              	.LBE456:
 8496              	.LBE455:
2473:src/display.c **** 				goto finish;
 8497              		.loc 1 2473 4 is_stmt 1 view .LVU2759
2473:src/display.c **** 				goto finish;
 8498              		.loc 1 2473 7 is_stmt 0 view .LVU2760
 8499 0174 3B68     		ldr	r3, [r7]
 8500 0176 DFF8B091 		ldr	r9, .L1098+44
 8501 017a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccTlkAzC.s 			page 245


 8502 017c C1D1     		bne	.L898
 8503              	.LVL948:
 8504              	.L903:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8505              		.loc 1 2503 2 is_stmt 1 view .LVU2761
 8506 017e FFF7FEFF 		bl	set_annunciators
 8507              	.LVL949:
2504:src/display.c **** 		ShowRPN = 0;
 8508              		.loc 1 2504 2 view .LVU2762
2504:src/display.c **** 		ShowRPN = 0;
 8509              		.loc 1 2504 50 is_stmt 0 view .LVU2763
 8510 0182 3368     		ldr	r3, [r6]
 8511 0184 002B     		cmp	r3, #0
 8512 0186 00F00881 		beq	.L1073
 8513              	.LVL950:
 8514              	.L814:
2505:src/display.c **** 		dot(RPN, 0);
 8515              		.loc 1 2505 3 is_stmt 1 view .LVU2764
2505:src/display.c **** 		dot(RPN, 0);
 8516              		.loc 1 2505 11 is_stmt 0 view .LVU2765
 8517 018a 5F4F     		ldr	r7, .L1098+12
 8518 018c 0023     		movs	r3, #0
 8519              	.LBB479:
 8520              	.LBB480:
 328:src/display.c **** }
 8521              		.loc 1 328 7 view .LVU2766
 8522 018e 8D20     		movs	r0, #141
 8523              	.LBE480:
 8524              	.LBE479:
2505:src/display.c **** 		dot(RPN, 0);
 8525              		.loc 1 2505 11 view .LVU2767
 8526 0190 3B60     		str	r3, [r7]
2506:src/display.c **** 	}
 8527              		.loc 1 2506 3 is_stmt 1 view .LVU2768
 8528              	.LVL951:
 8529              	.LBB482:
 8530              	.LBI479:
 326:src/display.c **** 	if (on)	set_dot(n);
 8531              		.loc 1 326 6 view .LVU2769
 8532              	.LBB481:
 327:src/display.c **** 	else	clr_dot(n);
 8533              		.loc 1 327 2 view .LVU2770
 328:src/display.c **** }
 8534              		.loc 1 328 7 view .LVU2771
 8535 0192 FFF7FEFF 		bl	clr_dot
 8536              	.LVL952:
 8537              	.L931:
 328:src/display.c **** }
 8538              		.loc 1 328 7 is_stmt 0 view .LVU2772
 8539              	.LBE481:
 8540              	.LBE482:
2509:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8541              		.loc 1 2509 2 is_stmt 1 view .LVU2773
2510:src/display.c **** 
 8542              		.loc 1 2510 14 is_stmt 0 view .LVU2774
 8543 0196 3B68     		ldr	r3, [r7]
 8544 0198 002B     		cmp	r3, #0
ARM GAS  /tmp/ccTlkAzC.s 			page 246


 8545 019a 4BD1     		bne	.L949
2509:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8546              		.loc 1 2509 31 view .LVU2775
 8547 019c A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 8548 019e 12F04003 		ands	r3, r2, #64
 8549 01a2 08D0     		beq	.L932
2510:src/display.c **** 
 8550              		.loc 1 2510 18 view .LVU2776
 8551 01a4 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2510:src/display.c **** 
 8552              		.loc 1 2510 14 view .LVU2777
 8553 01a6 1B07     		lsls	r3, r3, #28
 8554 01a8 40F1ED80 		bpl	.L951
2510:src/display.c **** 
 8555              		.loc 1 2510 40 discriminator 3 view .LVU2778
 8556 01ac 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 8557 01ae 012B     		cmp	r3, #1
 8558 01b0 01D0     		beq	.L932
2510:src/display.c **** 
 8559              		.loc 1 2510 70 discriminator 5 view .LVU2779
 8560 01b2 C2F38003 		ubfx	r3, r2, #2, #1
 8561              	.L932:
2509:src/display.c **** 		           && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 8562              		.loc 1 2509 19 discriminator 9 view .LVU2780
 8563 01b6 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 8564 01b8 63F34512 		bfi	r2, r3, #5, #1
 8565 01bc E275     		strb	r2, [r4, #23]
2513:src/display.c ****  		annunciators();
 8566              		.loc 1 2513 2 is_stmt 1 discriminator 9 view .LVU2781
2513:src/display.c ****  		annunciators();
 8567              		.loc 1 2513 5 is_stmt 0 discriminator 9 view .LVU2782
 8568 01be 002D     		cmp	r5, #0
 8569 01c0 33D0     		beq	.L933
2513:src/display.c ****  		annunciators();
 8570              		.loc 1 2513 36 discriminator 1 view .LVU2783
 8571 01c2 D3B2     		uxtb	r3, r2
2513:src/display.c ****  		annunciators();
 8572              		.loc 1 2513 13 discriminator 1 view .LVU2784
 8573 01c4 03F02103 		and	r3, r3, #33
 8574 01c8 202B     		cmp	r3, #32
 8575 01ca 2ED0     		beq	.L933
 8576              	.L934:
2514:src/display.c ****  	State2.hms = 0;
 8577              		.loc 1 2514 4 is_stmt 1 view .LVU2785
 8578 01cc FFF7FEFF 		bl	annunciators
 8579              	.LVL953:
 8580              	.L935:
2515:src/display.c **** #else
 8581              		.loc 1 2515 3 view .LVU2786
2515:src/display.c **** #else
 8582              		.loc 1 2515 14 is_stmt 0 view .LVU2787
 8583 01d0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8584 01d2 6FF30003 		bfc	r3, #0, #1
 8585 01d6 E375     		strb	r3, [r4, #23]
 8586 01d8 93E7     		b	.L898
 8587              	.LVL954:
 8588              	.L1062:
ARM GAS  /tmp/ccTlkAzC.s 			page 247


2276:src/display.c **** 		if (! State2.dot)
 8589              		.loc 1 2276 3 is_stmt 1 view .LVU2788
2276:src/display.c **** 		if (! State2.dot)
 8590              		.loc 1 2276 8 is_stmt 0 view .LVU2789
 8591 01da 4D49     		ldr	r1, .L1098+20
 8592 01dc 4046     		mov	r0, r8
 8593 01de FFF7FEFF 		bl	scopy
 8594              	.LVL955:
2277:src/display.c **** 			*bp++ = '\235';
 8595              		.loc 1 2277 7 view .LVU2790
 8596 01e2 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8597              	.LVL956:
2277:src/display.c **** 			*bp++ = '\235';
 8598              		.loc 1 2277 3 is_stmt 1 view .LVU2791
2277:src/display.c **** 			*bp++ = '\235';
 8599              		.loc 1 2277 6 is_stmt 0 view .LVU2792
 8600 01e4 5B06     		lsls	r3, r3, #25
 8601 01e6 40F1FC80 		bpl	.L818
 8602              	.LVL957:
 8603              	.L1049:
2277:src/display.c **** 			*bp++ = '\235';
 8604              		.loc 1 2277 6 view .LVU2793
 8605 01ea 464E     		ldr	r6, .L1098+8
 8606 01ec DFF83481 		ldr	r8, .L1098+40
 8607              	.L819:
2279:src/display.c **** 	} else if (State2.gtodot) {
 8608              		.loc 1 2279 3 is_stmt 1 view .LVU2794
 8609 01f0 1EA8     		add	r0, sp, #120
 8610 01f2 FFF7FEFF 		bl	set_status
 8611              	.LVL958:
2456:src/display.c **** nostk:	show_flags();
 8612              		.loc 1 2456 2 view .LVU2795
 8613 01f6 FFF7FEFF 		bl	show_stack
 8614              	.LVL959:
2457:src/display.c **** 	if (!skip) {
 8615              		.loc 1 2457 8 view .LVU2796
 8616 01fa FFF7FEFF 		bl	show_flags
 8617              	.LVL960:
2458:src/display.c **** 		if (State2.runmode) {
 8618              		.loc 1 2458 2 view .LVU2797
 8619 01fe 25E0     		b	.L816
 8620              	.LVL961:
 8621              	.L1071:
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8622              		.loc 1 2464 45 is_stmt 0 discriminator 1 view .LVU2798
 8623 0200 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2464:src/display.c **** 					format_reg(ShowRegister, CNULL);
 8624              		.loc 1 2464 42 discriminator 1 view .LVU2799
 8625 0202 13F00101 		ands	r1, r3, #1
 8626 0206 7FF475AF 		bne	.L895
 8627              	.LVL962:
2465:src/display.c **** 				}
 8628              		.loc 1 2465 6 is_stmt 1 view .LVU2800
 8629 020a FFF7FEFF 		bl	format_reg
 8630              	.LVL963:
2473:src/display.c **** 				goto finish;
 8631              		.loc 1 2473 4 view .LVU2801
ARM GAS  /tmp/ccTlkAzC.s 			page 248


2473:src/display.c **** 				goto finish;
 8632              		.loc 1 2473 7 is_stmt 0 view .LVU2802
 8633 020e 3B68     		ldr	r3, [r7]
 8634 0210 002B     		cmp	r3, #0
 8635 0212 B4D0     		beq	.L903
 8636 0214 75E7     		b	.L898
 8637              	.LVL964:
 8638              	.L1059:
2258:src/display.c **** 		set_status(buf);
 8639              		.loc 1 2258 3 is_stmt 1 view .LVU2803
2258:src/display.c **** 		set_status(buf);
 8640              		.loc 1 2258 9 is_stmt 0 view .LVU2804
 8641 0216 1423     		movs	r3, #20
2259:src/display.c **** 	}
 8642              		.loc 1 2259 3 view .LVU2805
 8643 0218 1EA8     		add	r0, sp, #120
2258:src/display.c **** 		set_status(buf);
 8644              		.loc 1 2258 9 view .LVU2806
 8645 021a 8DF87830 		strb	r3, [sp, #120]
2259:src/display.c **** 	}
 8646              		.loc 1 2259 3 is_stmt 1 view .LVU2807
2258:src/display.c **** 		set_status(buf);
 8647              		.loc 1 2258 6 is_stmt 0 view .LVU2808
 8648 021e 0DF17908 		add	r8, sp, #121
 8649              	.LVL965:
2259:src/display.c **** 	}
 8650              		.loc 1 2259 3 view .LVU2809
 8651 0222 FFF7FEFF 		bl	set_status
 8652              	.LVL966:
 8653 0226 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8654 0228 0CE7     		b	.L812
 8655              	.LVL967:
 8656              	.L933:
2513:src/display.c ****  		annunciators();
 8657              		.loc 1 2513 52 discriminator 3 view .LVU2810
 8658 022a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8659 022c 13F0C00F 		tst	r3, #192
 8660 0230 CED0     		beq	.L935
 8661 0232 CBE7     		b	.L934
 8662              	.L949:
 8663 0234 0023     		movs	r3, #0
 8664 0236 BEE7     		b	.L932
 8665              	.LVL968:
 8666              	.L1061:
2274:src/display.c **** 	} else if (State2.hyp) {
 8667              		.loc 1 2274 3 is_stmt 1 view .LVU2811
 8668 0238 3648     		ldr	r0, .L1098+24
 8669 023a 324E     		ldr	r6, .L1098+8
 8670 023c DFF8E480 		ldr	r8, .L1098+40
 8671              	.LVL969:
2274:src/display.c **** 	} else if (State2.hyp) {
 8672              		.loc 1 2274 3 is_stmt 0 view .LVU2812
 8673 0240 FFF7FEFF 		bl	set_status
 8674              	.LVL970:
2456:src/display.c **** nostk:	show_flags();
 8675              		.loc 1 2456 2 is_stmt 1 view .LVU2813
 8676 0244 FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/ccTlkAzC.s 			page 249


 8677              	.LVL971:
2457:src/display.c **** 	if (!skip) {
 8678              		.loc 1 2457 8 view .LVU2814
 8679 0248 FFF7FEFF 		bl	show_flags
 8680              	.LVL972:
2458:src/display.c **** 		if (State2.runmode) {
 8681              		.loc 1 2458 2 view .LVU2815
 8682              	.L816:
2459:src/display.c **** only_update_x:
 8683              		.loc 1 2459 3 view .LVU2816
2459:src/display.c **** only_update_x:
 8684              		.loc 1 2459 7 is_stmt 0 view .LVU2817
 8685 024c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2459:src/display.c **** only_update_x:
 8686              		.loc 1 2459 6 view .LVU2818
 8687 024e 13F0400A 		ands	r10, r3, #64
 8688 0252 7FF43EAF 		bne	.L811
 8689              	.LBB483:
2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8690              		.loc 1 2477 4 is_stmt 1 view .LVU2819
2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8691              		.loc 1 2477 22 is_stmt 0 view .LVU2820
 8692 0256 2D4B     		ldr	r3, .L1098+16
2481:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8693              		.loc 1 2481 4 view .LVU2821
 8694 0258 DFF8D0B0 		ldr	fp, .L1098+48
2477:src/display.c **** 			unsigned int upc = user_pc(pc);
 8695              		.loc 1 2477 17 view .LVU2822
 8696 025c B3F8E077 		ldrh	r7, [r3, #2016]
 8697              	.LVL973:
2478:src/display.c **** 			const int n = nLIB(pc);
 8698              		.loc 1 2478 4 is_stmt 1 view .LVU2823
2478:src/display.c **** 			const int n = nLIB(pc);
 8699              		.loc 1 2478 23 is_stmt 0 view .LVU2824
 8700 0260 3846     		mov	r0, r7
 8701 0262 FFF7FEFF 		bl	user_pc
 8702              	.LVL974:
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8703              		.loc 1 2480 4 view .LVU2825
 8704 0266 2822     		movs	r2, #40
 8705 0268 5146     		mov	r1, r10
2478:src/display.c **** 			const int n = nLIB(pc);
 8706              		.loc 1 2478 23 view .LVU2826
 8707 026a 8146     		mov	r9, r0
 8708              	.LVL975:
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8709              		.loc 1 2480 4 view .LVU2827
 8710 026c 1EA8     		add	r0, sp, #120
 8711              	.LVL976:
2479:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8712              		.loc 1 2479 4 is_stmt 1 view .LVU2828
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8713              		.loc 1 2480 4 is_stmt 0 view .LVU2829
 8714 026e FFF7FEFF 		bl	xset
 8715              	.LVL977:
2479:src/display.c **** 			xset(buf, '\0', sizeof(buf));
 8716              		.loc 1 2479 18 view .LVU2830
ARM GAS  /tmp/ccTlkAzC.s 			page 250


 8717 0272 BF0B     		lsrs	r7, r7, #14
 8718              	.LVL978:
2480:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8719              		.loc 1 2480 4 is_stmt 1 view .LVU2831
2481:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 8720              		.loc 1 2481 4 view .LVU2832
 8721 0274 DBF80000 		ldr	r0, [fp]
 8722 0278 5246     		mov	r2, r10
 8723 027a 0121     		movs	r1, #1
 8724 027c FFF7FEFF 		bl	set_exp
 8725              	.LVL979:
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8726              		.loc 1 2482 4 view .LVU2833
 8727 0280 002F     		cmp	r7, #0
 8728 0282 40F0B480 		bne	.L1074
 8729 0286 2449     		ldr	r1, .L1098+28
 8730 0288 1EA8     		add	r0, sp, #120
 8731 028a FFF7FEFF 		bl	scopy_spc
 8732              	.LVL980:
 8733 028e 0322     		movs	r2, #3
 8734 0290 4946     		mov	r1, r9
 8735 0292 FFF7FEFF 		bl	num_arg_0
 8736              	.LVL981:
2484:src/display.c **** #ifndef REALBUILD
 8737              		.loc 1 2484 4 view .LVU2834
 8738 0296 0921     		movs	r1, #9
 8739 0298 1EA8     		add	r0, sp, #120
 8740 029a FFF7FEFF 		bl	set_digits_string
 8741              	.LVL982:
2486:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 8742              		.loc 1 2486 4 view .LVU2835
 8743 029e 3946     		mov	r1, r7
 8744 02a0 2822     		movs	r2, #40
 8745 02a2 1EA8     		add	r0, sp, #120
 8746 02a4 FFF7FEFF 		bl	xset
 8747              	.LVL983:
2487:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 8748              		.loc 1 2487 4 view .LVU2836
 8749 02a8 3A46     		mov	r2, r7
 8750 02aa 0121     		movs	r1, #1
 8751 02ac DBF80000 		ldr	r0, [fp]
 8752 02b0 FFF7FEFF 		bl	set_exp
 8753              	.LVL984:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8754              		.loc 1 2488 4 view .LVU2837
 8755 02b4 1949     		ldr	r1, .L1098+32
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8756              		.loc 1 2482 4 is_stmt 0 view .LVU2838
 8757 02b6 0327     		movs	r7, #3
 8758              	.LVL985:
 8759              	.L937:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 8760              		.loc 1 2488 4 discriminator 4 view .LVU2839
 8761 02b8 1EA8     		add	r0, sp, #120
 8762 02ba FFF7FEFF 		bl	scopy_spc
 8763              	.LVL986:
 8764 02be 3A46     		mov	r2, r7
ARM GAS  /tmp/ccTlkAzC.s 			page 251


 8765 02c0 4946     		mov	r1, r9
 8766 02c2 FFF7FEFF 		bl	num_arg_0
 8767              	.LVL987:
 8768              	.LBB484:
2491:src/display.c **** 			  char *l=LastDisplayedNumber;
 8769              		.loc 1 2491 6 is_stmt 1 discriminator 4 view .LVU2840
2492:src/display.c **** 			  *l++=' ';
 8770              		.loc 1 2492 6 discriminator 4 view .LVU2841
2493:src/display.c **** 			  while(*b) {
 8771              		.loc 1 2493 6 discriminator 4 view .LVU2842
2493:src/display.c **** 			  while(*b) {
 8772              		.loc 1 2493 10 is_stmt 0 discriminator 4 view .LVU2843
 8773 02c6 164B     		ldr	r3, .L1098+36
2494:src/display.c **** 				  *l++=*b++;
 8774              		.loc 1 2494 12 discriminator 4 view .LVU2844
 8775 02c8 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
2493:src/display.c **** 			  while(*b) {
 8776              		.loc 1 2493 10 discriminator 4 view .LVU2845
 8777 02cc 2027     		movs	r7, #32
 8778 02ce 1F70     		strb	r7, [r3]
2494:src/display.c **** 				  *l++=*b++;
 8779              		.loc 1 2494 6 is_stmt 1 discriminator 4 view .LVU2846
2494:src/display.c **** 				  *l++=*b++;
 8780              		.loc 1 2494 11 discriminator 4 view .LVU2847
 8781 02d0 0029     		cmp	r1, #0
 8782 02d2 00F04682 		beq	.L948
 8783 02d6 0333     		adds	r3, r3, #3
 8784 02d8 1EA8     		add	r0, sp, #120
 8785              	.LVL988:
 8786              	.L930:
2495:src/display.c **** 				  *l++=' ';
 8787              		.loc 1 2495 7 view .LVU2848
2495:src/display.c **** 				  *l++=' ';
 8788              		.loc 1 2495 11 is_stmt 0 view .LVU2849
 8789 02da 03F8021C 		strb	r1, [r3, #-2]
2496:src/display.c **** 			  }
 8790              		.loc 1 2496 7 is_stmt 1 view .LVU2850
 8791              	.LVL989:
2494:src/display.c **** 				  *l++=*b++;
 8792              		.loc 1 2494 12 is_stmt 0 view .LVU2851
 8793 02de 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 8794              	.LVL990:
2496:src/display.c **** 			  }
 8795              		.loc 1 2496 11 view .LVU2852
 8796 02e2 03F8017C 		strb	r7, [r3, #-1]
2494:src/display.c **** 				  *l++=*b++;
 8797              		.loc 1 2494 11 is_stmt 1 view .LVU2853
 8798 02e6 1A46     		mov	r2, r3
 8799 02e8 0233     		adds	r3, r3, #2
 8800              	.LVL991:
2494:src/display.c **** 				  *l++=*b++;
 8801              		.loc 1 2494 11 is_stmt 0 view .LVU2854
 8802 02ea 0029     		cmp	r1, #0
 8803 02ec F5D1     		bne	.L930
 8804              	.LVL992:
 8805              	.L929:
2498:src/display.c ****       }
ARM GAS  /tmp/ccTlkAzC.s 			page 252


 8806              		.loc 1 2498 6 is_stmt 1 view .LVU2855
2498:src/display.c ****       }
 8807              		.loc 1 2498 8 is_stmt 0 view .LVU2856
 8808 02ee 0023     		movs	r3, #0
 8809 02f0 DFF83490 		ldr	r9, .L1098+44
 8810              	.LVL993:
2498:src/display.c ****       }
 8811              		.loc 1 2498 8 view .LVU2857
 8812 02f4 1370     		strb	r3, [r2]
 8813              	.LVL994:
2498:src/display.c ****       }
 8814              		.loc 1 2498 8 view .LVU2858
 8815              	.LBE484:
 8816              	.LBE483:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8817              		.loc 1 2503 2 is_stmt 1 view .LVU2859
 8818              	.L1054:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8819              		.loc 1 2503 2 is_stmt 0 view .LVU2860
 8820 02f6 FFF7FEFF 		bl	set_annunciators
 8821              	.LVL995:
2504:src/display.c **** 		ShowRPN = 0;
 8822              		.loc 1 2504 2 is_stmt 1 view .LVU2861
 8823 02fa 46E7     		b	.L814
 8824              	.L1099:
 8825              		.align	2
 8826              	.L1098:
 8827 02fc 00000000 		.word	StateWhileOn
 8828 0300 00000000 		.word	WasDataEntry
 8829 0304 00000000 		.word	DispMsg
 8830 0308 00000000 		.word	ShowRPN
 8831 030c 00000000 		.word	PersistentRam
 8832 0310 38000000 		.word	.LC26
 8833 0314 00000000 		.word	.LANCHOR20
 8834 0318 00000000 		.word	.LANCHOR24
 8835 031c 00000000 		.word	.LANCHOR18
 8836 0320 00000000 		.word	LastDisplayedNumber
 8837 0324 00000000 		.word	DispPlot
 8838 0328 00000000 		.word	ShowRegister
 8839 032c 00000000 		.word	ProgFree
 8840              	.LVL996:
 8841              	.L1060:
 8842              	.LBB486:
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8843              		.loc 1 2262 3 view .LVU2862
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8844              		.loc 1 2262 8 is_stmt 0 view .LVU2863
 8845 0330 C14B     		ldr	r3, .L1100
 8846 0332 C24E     		ldr	r6, .L1100+4
 8847 0334 DFF85083 		ldr	r8, .L1100+80
 8848              	.LVL997:
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8849              		.loc 1 2262 8 view .LVU2864
 8850 0338 DFF85093 		ldr	r9, .L1100+84
 8851              	.LVL998:
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8852              		.loc 1 2262 8 view .LVU2865
ARM GAS  /tmp/ccTlkAzC.s 			page 253


 8853 033c 93E80700 		ldm	r3, {r0, r1, r2}
 8854 0340 15AB     		add	r3, sp, #84
 8855 0342 03C3     		stmia	r3!, {r0, r1}
 8856 0344 0021     		movs	r1, #0
2263:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8857              		.loc 1 2263 3 view .LVU2866
 8858 0346 BE48     		ldr	r0, .L1100+8
2262:src/display.c **** 		set_digits_string("pAULI, WwALtE", 0);
 8859              		.loc 1 2262 8 view .LVU2867
 8860 0348 1A80     		strh	r2, [r3]	@ movhi
 8861 034a CDF85E10 		str	r1, [sp, #94]	@ unaligned
2263:src/display.c **** 		set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 8862              		.loc 1 2263 3 is_stmt 1 view .LVU2868
 8863 034e FFF7FEFF 		bl	set_digits_string
 8864              	.LVL999:
2264:src/display.c **** #ifndef REALBUILD
 8865              		.loc 1 2264 3 view .LVU2869
 8866              	.LBB487:
 8867              	.LBI487:
 394:src/display.c **** 	if (res) *res++ = ch;
 8868              		.loc 1 394 14 view .LVU2870
 8869              	.LBB488:
 395:src/display.c **** 	else	set_dig(base, ch);
 8870              		.loc 1 395 2 view .LVU2871
 396:src/display.c **** 	return res;
 8871              		.loc 1 396 7 view .LVU2872
 8872 0352 7221     		movs	r1, #114
 8873 0354 6C20     		movs	r0, #108
 8874 0356 FFF7FEFF 		bl	set_dig
 8875              	.LVL1000:
 397:src/display.c **** }
 8876              		.loc 1 397 2 view .LVU2873
 397:src/display.c **** }
 8877              		.loc 1 397 2 is_stmt 0 view .LVU2874
 8878              	.LBE488:
 8879              	.LBE487:
2266:src/display.c **** 		scopy(LastDisplayedExponent, " ");
 8880              		.loc 1 2266 3 is_stmt 1 view .LVU2875
 8881 035a BA49     		ldr	r1, .L1100+12
 8882 035c BA48     		ldr	r0, .L1100+16
 8883 035e FFF7FEFF 		bl	scopy
 8884              	.LVL1001:
2267:src/display.c **** #endif
 8885              		.loc 1 2267 3 view .LVU2876
 8886 0362 BA49     		ldr	r1, .L1100+20
 8887 0364 BA48     		ldr	r0, .L1100+24
 8888 0366 FFF7FEFF 		bl	scopy
 8889              	.LVL1002:
2269:src/display.c **** 		set_status(vers);
 8890              		.loc 1 2269 3 view .LVU2877
 8891 036a BA49     		ldr	r1, .L1100+28
 8892 036c 0422     		movs	r2, #4
 8893 036e 0DF15D00 		add	r0, sp, #93
 8894 0372 FFF7FEFF 		bl	xcopy
 8895              	.LVL1003:
2270:src/display.c **** 		skip = 1;
 8896              		.loc 1 2270 3 view .LVU2878
ARM GAS  /tmp/ccTlkAzC.s 			page 254


 8897 0376 15A8     		add	r0, sp, #84
 8898 0378 FFF7FEFF 		bl	set_status
 8899              	.LVL1004:
2271:src/display.c **** 		goto nostk;
 8900              		.loc 1 2271 3 view .LVU2879
2272:src/display.c **** 	} else if (State2.confirm) {
 8901              		.loc 1 2272 3 view .LVU2880
2272:src/display.c **** 	} else if (State2.confirm) {
 8902              		.loc 1 2272 3 is_stmt 0 view .LVU2881
 8903              	.LBE486:
2457:src/display.c **** 	if (!skip) {
 8904              		.loc 1 2457 8 is_stmt 1 view .LVU2882
 8905 037c FFF7FEFF 		bl	show_flags
 8906              	.LVL1005:
2458:src/display.c **** 		if (State2.runmode) {
 8907              		.loc 1 2458 2 view .LVU2883
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8908              		.loc 1 2503 2 view .LVU2884
 8909 0380 FFF7FEFF 		bl	set_annunciators
 8910              	.LVL1006:
2504:src/display.c **** 		ShowRPN = 0;
 8911              		.loc 1 2504 2 view .LVU2885
 8912 0384 01E7     		b	.L814
 8913              	.LVL1007:
 8914              	.L951:
2504:src/display.c **** 		ShowRPN = 0;
 8915              		.loc 1 2504 2 is_stmt 0 view .LVU2886
 8916 0386 0123     		movs	r3, #1
 8917 0388 15E7     		b	.L932
 8918              	.LVL1008:
 8919              	.L894:
2468:src/display.c **** 			} else {
 8920              		.loc 1 2468 6 is_stmt 1 view .LVU2887
 8921 038a B348     		ldr	r0, .L1100+32
 8922 038c 2421     		movs	r1, #36
 8923 038e FFF7FEFF 		bl	set_digits_string
 8924              	.LVL1009:
2473:src/display.c **** 				goto finish;
 8925              		.loc 1 2473 4 view .LVU2888
2473:src/display.c **** 				goto finish;
 8926              		.loc 1 2473 7 is_stmt 0 view .LVU2889
 8927 0392 3B68     		ldr	r3, [r7]
 8928 0394 002B     		cmp	r3, #0
 8929 0396 AED0     		beq	.L1054
 8930 0398 B3E6     		b	.L898
 8931              	.LVL1010:
 8932              	.L1073:
2504:src/display.c **** 		ShowRPN = 0;
 8933              		.loc 1 2504 69 discriminator 3 view .LVU2890
 8934 039a B8F90030 		ldrsh	r3, [r8]
 8935 039e 002B     		cmp	r3, #0
 8936 03a0 7FF4F3AE 		bne	.L814
2504:src/display.c **** 		ShowRPN = 0;
 8937              		.loc 1 2504 81 discriminator 4 view .LVU2891
 8938 03a4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 8939 03a6 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 8940 03a8 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/ccTlkAzC.s 			page 255


 8941 03ac 1343     		orrs	r3, r3, r2
 8942 03ae 7FF4ECAE 		bne	.L814
 8943 03b2 AA4F     		ldr	r7, .L1100+36
 8944 03b4 EFE6     		b	.L931
 8945              	.LVL1011:
 8946              	.L1063:
2282:src/display.c **** 		if (State2.numdigit > 0)
 8947              		.loc 1 2282 3 is_stmt 1 view .LVU2892
2282:src/display.c **** 		if (State2.numdigit > 0)
 8948              		.loc 1 2282 8 is_stmt 0 view .LVU2893
 8949 03b6 2E22     		movs	r2, #46
 8950 03b8 A949     		ldr	r1, .L1100+40
 8951 03ba 4046     		mov	r0, r8
 8952 03bc FFF7FEFF 		bl	scopy_char
 8953              	.LVL1012:
2283:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 8954              		.loc 1 2283 13 view .LVU2894
 8955 03c0 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2282:src/display.c **** 		if (State2.numdigit > 0)
 8956              		.loc 1 2282 8 view .LVU2895
 8957 03c2 0346     		mov	r3, r0
 8958              	.LVL1013:
2283:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 8959              		.loc 1 2283 3 is_stmt 1 view .LVU2896
2283:src/display.c **** 			bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 8960              		.loc 1 2283 6 is_stmt 0 view .LVU2897
 8961 03c4 002A     		cmp	r2, #0
 8962 03c6 4CD1     		bne	.L1075
 8963              	.L821:
2286:src/display.c **** 		set_status(buf);
 8964              		.loc 1 2286 4 is_stmt 1 view .LVU2898
 8965              	.LVL1014:
2286:src/display.c **** 		set_status(buf);
 8966              		.loc 1 2286 10 is_stmt 0 view .LVU2899
 8967 03c8 5F22     		movs	r2, #95
 8968 03ca 1A70     		strb	r2, [r3]
2287:src/display.c **** 	} else if (State2.rarg) {
 8969              		.loc 1 2287 3 is_stmt 1 view .LVU2900
 8970              	.LVL1015:
 8971              	.L837:
 8972              	.LBB489:
2372:src/display.c **** 	} else if (State2.multi) {
 8973              		.loc 1 2372 3 view .LVU2901
 8974 03cc 1EA8     		add	r0, sp, #120
 8975 03ce FFF7FEFF 		bl	set_status
 8976              	.LVL1016:
2372:src/display.c **** 	} else if (State2.multi) {
 8977              		.loc 1 2372 3 is_stmt 0 view .LVU2902
 8978              	.LBE489:
2456:src/display.c **** nostk:	show_flags();
 8979              		.loc 1 2456 2 is_stmt 1 view .LVU2903
 8980 03d2 9A4E     		ldr	r6, .L1100+4
 8981 03d4 DFF8B082 		ldr	r8, .L1100+80
 8982 03d8 FFF7FEFF 		bl	show_stack
 8983              	.LVL1017:
2457:src/display.c **** 	if (!skip) {
 8984              		.loc 1 2457 8 view .LVU2904
ARM GAS  /tmp/ccTlkAzC.s 			page 256


 8985 03dc FFF7FEFF 		bl	show_flags
 8986              	.LVL1018:
2458:src/display.c **** 		if (State2.runmode) {
 8987              		.loc 1 2458 2 view .LVU2905
 8988 03e0 34E7     		b	.L816
 8989              	.LVL1019:
 8990              	.L818:
2278:src/display.c **** 		set_status(buf);
 8991              		.loc 1 2278 4 view .LVU2906
2278:src/display.c **** 		set_status(buf);
 8992              		.loc 1 2278 10 is_stmt 0 view .LVU2907
 8993 03e2 9D23     		movs	r3, #157
 8994 03e4 954E     		ldr	r6, .L1100+4
 8995 03e6 DFF8A082 		ldr	r8, .L1100+80
 8996 03ea 0370     		strb	r3, [r0]
 8997 03ec 00E7     		b	.L819
 8998              	.LVL1020:
 8999              	.L1074:
 9000              	.LBB498:
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9001              		.loc 1 2482 4 discriminator 1 view .LVU2908
 9002 03ee 9D49     		ldr	r1, .L1100+44
 9003 03f0 07EB8703 		add	r3, r7, r7, lsl #2
2483:src/display.c **** 			set_digits_string(buf, SEGS_PER_DIGIT);
 9004              		.loc 1 2483 19 discriminator 1 view .LVU2909
 9005 03f4 07F00107 		and	r7, r7, #1
 9006              	.LVL1021:
2482:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9007              		.loc 1 2482 4 discriminator 1 view .LVU2910
 9008 03f8 1944     		add	r1, r1, r3
 9009 03fa 1EA8     		add	r0, sp, #120
 9010 03fc 0337     		adds	r7, r7, #3
 9011 03fe 0193     		str	r3, [sp, #4]
 9012 0400 FFF7FEFF 		bl	scopy_spc
 9013              	.LVL1022:
 9014 0404 3A46     		mov	r2, r7
 9015 0406 4946     		mov	r1, r9
 9016 0408 FFF7FEFF 		bl	num_arg_0
 9017              	.LVL1023:
2484:src/display.c **** #ifndef REALBUILD
 9018              		.loc 1 2484 4 is_stmt 1 discriminator 1 view .LVU2911
 9019 040c 0921     		movs	r1, #9
 9020 040e 1EA8     		add	r0, sp, #120
 9021 0410 FFF7FEFF 		bl	set_digits_string
 9022              	.LVL1024:
2486:src/display.c **** 			set_exp(ProgFree, 1, CNULL);
 9023              		.loc 1 2486 4 discriminator 1 view .LVU2912
 9024 0414 2822     		movs	r2, #40
 9025 0416 5146     		mov	r1, r10
 9026 0418 1EA8     		add	r0, sp, #120
 9027 041a FFF7FEFF 		bl	xset
 9028              	.LVL1025:
2487:src/display.c **** 			num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9029              		.loc 1 2487 4 discriminator 1 view .LVU2913
 9030 041e 0121     		movs	r1, #1
 9031 0420 DBF80000 		ldr	r0, [fp]
 9032 0424 5246     		mov	r2, r10
ARM GAS  /tmp/ccTlkAzC.s 			page 257


 9033 0426 FFF7FEFF 		bl	set_exp
 9034              	.LVL1026:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9035              		.loc 1 2488 4 discriminator 1 view .LVU2914
 9036 042a 8F49     		ldr	r1, .L1100+48
 9037 042c 019B     		ldr	r3, [sp, #4]
 9038 042e 1944     		add	r1, r1, r3
 9039 0430 42E7     		b	.L937
 9040              	.LVL1027:
 9041              	.L1065:
2488:src/display.c **** 				  upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9042              		.loc 1 2488 4 is_stmt 0 discriminator 1 view .LVU2915
 9043              	.LBE498:
2320:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9044              		.loc 1 2320 3 is_stmt 1 view .LVU2916
2321:src/display.c **** 		*bp++ = '_';
 9045              		.loc 1 2321 32 is_stmt 0 view .LVU2917
 9046 0432 8E4B     		ldr	r3, .L1100+52
 9047 0434 814E     		ldr	r6, .L1100+4
2321:src/display.c **** 		*bp++ = '_';
 9048              		.loc 1 2321 9 view .LVU2918
 9049 0436 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9050 0438 88F80130 		strb	r3, [r8, #1]
2320:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9051              		.loc 1 2320 9 view .LVU2919
 9052 043c 7823     		movs	r3, #120
2322:src/display.c **** 		*bp++ = '?';
 9053              		.loc 1 2322 9 view .LVU2920
 9054 043e 5F22     		movs	r2, #95
2320:src/display.c **** 		*bp++ = "=\013\035<\011>\012"[State2.test];
 9055              		.loc 1 2320 9 view .LVU2921
 9056 0440 88F80030 		strb	r3, [r8]
2321:src/display.c **** 		*bp++ = '_';
 9057              		.loc 1 2321 3 is_stmt 1 view .LVU2922
 9058              	.LVL1028:
2322:src/display.c **** 		*bp++ = '?';
 9059              		.loc 1 2322 3 view .LVU2923
2323:src/display.c **** 		set_status(buf);
 9060              		.loc 1 2323 9 is_stmt 0 view .LVU2924
 9061 0444 3F23     		movs	r3, #63
2322:src/display.c **** 		*bp++ = '?';
 9062              		.loc 1 2322 9 view .LVU2925
 9063 0446 88F80220 		strb	r2, [r8, #2]
2323:src/display.c **** 		set_status(buf);
 9064              		.loc 1 2323 3 is_stmt 1 view .LVU2926
 9065              	.LVL1029:
2323:src/display.c **** 		set_status(buf);
 9066              		.loc 1 2323 9 is_stmt 0 view .LVU2927
 9067 044a 88F80330 		strb	r3, [r8, #3]
2324:src/display.c **** 	} else if (cata) {
 9068              		.loc 1 2324 3 is_stmt 1 view .LVU2928
 9069 044e 1EA8     		add	r0, sp, #120
 9070 0450 DFF83482 		ldr	r8, .L1100+80
 9071              	.LVL1030:
2324:src/display.c **** 	} else if (cata) {
 9072              		.loc 1 2324 3 is_stmt 0 view .LVU2929
 9073 0454 FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccTlkAzC.s 			page 258


 9074              	.LVL1031:
2456:src/display.c **** nostk:	show_flags();
 9075              		.loc 1 2456 2 is_stmt 1 view .LVU2930
 9076 0458 FFF7FEFF 		bl	show_stack
 9077              	.LVL1032:
2457:src/display.c **** 	if (!skip) {
 9078              		.loc 1 2457 8 view .LVU2931
 9079 045c FFF7FEFF 		bl	show_flags
 9080              	.LVL1033:
2458:src/display.c **** 		if (State2.runmode) {
 9081              		.loc 1 2458 2 view .LVU2932
 9082 0460 F4E6     		b	.L816
 9083              	.LVL1034:
 9084              	.L1075:
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9085              		.loc 1 2284 4 view .LVU2933
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9086              		.loc 1 2284 9 is_stmt 0 view .LVU2934
 9087 0462 2189     		ldrh	r1, [r4, #8]
 9088 0464 FFF7FEFF 		bl	num_arg_0
 9089              	.LVL1035:
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9090              		.loc 1 2284 9 view .LVU2935
 9091 0468 0346     		mov	r3, r0
 9092              	.LVL1036:
2284:src/display.c **** 		// for (i=State2.numdigit; i<n; i++)
 9093              		.loc 1 2284 9 view .LVU2936
 9094 046a ADE7     		b	.L821
 9095              	.LVL1037:
 9096              	.L1064:
2294:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9097              		.loc 1 2294 3 is_stmt 1 view .LVU2937
2294:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9098              		.loc 1 2294 34 is_stmt 0 view .LVU2938
 9099 046c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9100 046e 8049     		ldr	r1, .L1100+56
 9101 0470 0623     		movs	r3, #6
 9102 0472 03EB0213 		add	r3, r3, r2, lsl #4
2294:src/display.c **** 		bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9103              		.loc 1 2294 8 view .LVU2939
 9104 0476 1944     		add	r1, r1, r3
 9105 0478 4046     		mov	r0, r8
 9106 047a FFF7FEFF 		bl	scopy
 9107              	.LVL1038:
2295:src/display.c **** 		if (State2.dot) {
 9108              		.loc 1 2295 3 is_stmt 1 view .LVU2940
2295:src/display.c **** 		if (State2.dot) {
 9109              		.loc 1 2295 8 is_stmt 0 view .LVU2941
 9110 047e 7D4A     		ldr	r2, .L1100+60
 9111 0480 7D4B     		ldr	r3, .L1100+64
 9112 0482 94F91510 		ldrsb	r1, [r4, #21]
 9113 0486 12EA2101 		ands	r1, r2, r1, asr #32
 9114 048a 38BF     		it	cc
 9115 048c 1946     		movcc	r1, r3
 9116 048e FFF7FEFF 		bl	scopy
 9117              	.LVL1039:
2296:src/display.c **** 			*bp++ = 's';
ARM GAS  /tmp/ccTlkAzC.s 			page 259


 9118              		.loc 1 2296 7 view .LVU2942
 9119 0492 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9120              	.LVL1040:
2296:src/display.c **** 			*bp++ = 's';
 9121              		.loc 1 2296 3 is_stmt 1 view .LVU2943
2296:src/display.c **** 			*bp++ = 's';
 9122              		.loc 1 2296 6 is_stmt 0 view .LVU2944
 9123 0494 5A06     		lsls	r2, r3, #25
 9124 0496 40F19A80 		bpl	.L824
2297:src/display.c **** 			*bp++ = '_';
 9125              		.loc 1 2297 4 is_stmt 1 view .LVU2945
 9126              	.LVL1041:
2297:src/display.c **** 			*bp++ = '_';
 9127              		.loc 1 2297 10 is_stmt 0 view .LVU2946
 9128 049a 7322     		movs	r2, #115
 9129              	.LVL1042:
 9130              	.L1048:
2301:src/display.c **** 		} else {
 9131              		.loc 1 2301 10 view .LVU2947
 9132 049c 5F23     		movs	r3, #95
 9133 049e 674E     		ldr	r6, .L1100+4
 9134 04a0 DFF8E481 		ldr	r8, .L1100+80
2300:src/display.c **** 			*bp++ = '_';
 9135              		.loc 1 2300 10 view .LVU2948
 9136 04a4 0270     		strb	r2, [r0]
2301:src/display.c **** 		} else {
 9137              		.loc 1 2301 4 is_stmt 1 view .LVU2949
2301:src/display.c **** 		} else {
 9138              		.loc 1 2301 10 is_stmt 0 view .LVU2950
 9139 04a6 4370     		strb	r3, [r0, #1]
 9140 04a8 A2E6     		b	.L819
 9141              	.LVL1043:
 9142              	.L900:
 9143              	.LBB499:
 9144              	.LBB472:
 907:src/display.c **** 
 9145              		.loc 1 907 3 is_stmt 1 view .LVU2951
 9146 04aa FFF7FEFF 		bl	set_separator_decimal_modes
 9147              	.LVL1044:
 909:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9148              		.loc 1 909 3 view .LVU2952
 911:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9149              		.loc 1 911 3 view .LVU2953
 911:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9150              		.loc 1 911 6 is_stmt 0 view .LVU2954
 9151 04ae A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9152              	.LBB457:
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9153              		.loc 1 918 15 view .LVU2955
 9154 04b0 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 9155              	.LBE457:
 911:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9156              		.loc 1 911 6 view .LVU2956
 9157 04b4 012B     		cmp	r3, #1
 9158 04b6 40F2B780 		bls	.L905
 9159              	.LVL1045:
 9160              	.LBB458:
ARM GAS  /tmp/ccTlkAzC.s 			page 260


 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9161              		.loc 1 918 14 is_stmt 1 view .LVU2957
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9162              		.loc 1 918 4 is_stmt 0 view .LVU2958
 9163 04ba BCF1000F 		cmp	ip, #0
 9164 04be 72D0     		beq	.L906
 9165 04c0 0AF10103 		add	r3, r10, #1
 9166 04c4 6046     		mov	r0, ip
 9167              	.LBE458:
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9168              		.loc 1 886 6 view .LVU2959
 9169 04c6 4FF0FF31 		mov	r1, #-1
 9170 04ca 6FEA0A0E 		mvn	lr, r10
 9171              	.LVL1046:
 9172              	.L908:
 9173              	.LBB459:
 919:src/display.c **** 					gotdot = j;
 9174              		.loc 1 919 8 view .LVU2960
 9175 04ce 2E28     		cmp	r0, #46
 9176 04d0 0EEB0302 		add	r2, lr, r3
 9177              	.LVL1047:
 919:src/display.c **** 					gotdot = j;
 9178              		.loc 1 919 5 is_stmt 1 view .LVU2961
 919:src/display.c **** 					gotdot = j;
 9179              		.loc 1 919 8 is_stmt 0 view .LVU2962
 9180 04d4 03D1     		bne	.L907
 919:src/display.c **** 					gotdot = j;
 9181              		.loc 1 919 21 view .LVU2963
 9182 04d6 B1F1FF3F 		cmp	r1, #-1
 9183 04da 08BF     		it	eq
 9184 04dc 1146     		moveq	r1, r2
 9185              	.LVL1048:
 9186              	.L907:
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9187              		.loc 1 918 28 is_stmt 1 view .LVU2964
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9188              		.loc 1 918 14 view .LVU2965
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9189              		.loc 1 918 15 is_stmt 0 view .LVU2966
 9190 04de 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 918:src/display.c **** 				if (p[j] == '.' && gotdot < 0) {
 9191              		.loc 1 918 4 view .LVU2967
 9192 04e2 0028     		cmp	r0, #0
 9193 04e4 F3D1     		bne	.L908
 926:src/display.c **** 			if (j > 0) {
 9194              		.loc 1 926 4 is_stmt 1 view .LVU2968
 926:src/display.c **** 			if (j > 0) {
 9195              		.loc 1 926 6 is_stmt 0 view .LVU2969
 9196 04e6 A2F10B03 		sub	r3, r2, #11
 9197              	.LVL1049:
 927:src/display.c **** 				p += j + 1;
 9198              		.loc 1 927 4 is_stmt 1 view .LVU2970
 927:src/display.c **** 				p += j + 1;
 9199              		.loc 1 927 7 is_stmt 0 view .LVU2971
 9200 04ea 002B     		cmp	r3, #0
 9201 04ec 40F34B81 		ble	.L1076
 928:src/display.c **** 				i = SEGS_PER_DIGIT;
ARM GAS  /tmp/ccTlkAzC.s 			page 261


 9202              		.loc 1 928 5 is_stmt 1 view .LVU2972
 928:src/display.c **** 				i = SEGS_PER_DIGIT;
 9203              		.loc 1 928 7 is_stmt 0 view .LVU2973
 9204 04f0 0A3A     		subs	r2, r2, #10
 930:src/display.c **** 					gotdot = 0;
 9205              		.loc 1 930 8 view .LVU2974
 9206 04f2 8B42     		cmp	r3, r1
 928:src/display.c **** 				i = SEGS_PER_DIGIT;
 9207              		.loc 1 928 7 view .LVU2975
 9208 04f4 9244     		add	r10, r10, r2
 9209              	.LVL1050:
 929:src/display.c **** 				if (gotdot <= j) {
 9210              		.loc 1 929 5 is_stmt 1 view .LVU2976
 930:src/display.c **** 					gotdot = 0;
 9211              		.loc 1 930 5 view .LVU2977
 930:src/display.c **** 					gotdot = 0;
 9212              		.loc 1 930 8 is_stmt 0 view .LVU2978
 9213 04f6 80F26481 		bge	.L945
 935:src/display.c **** 					gotdot = 0;
 9214              		.loc 1 935 10 is_stmt 1 view .LVU2979
 935:src/display.c **** 					gotdot = 0;
 9215              		.loc 1 935 13 is_stmt 0 view .LVU2980
 9216 04fa 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9217              	.LVL1051:
 935:src/display.c **** 					gotdot = 0;
 9218              		.loc 1 935 13 view .LVU2981
 9219 04fe 2E2B     		cmp	r3, #46
 9220 0500 00F0DE82 		beq	.L1077
 9221              	.LVL1052:
 942:src/display.c **** 				overflow_to_left = 1;
 9222              		.loc 1 942 5 is_stmt 1 view .LVU2982
 9223 0504 3C21     		movs	r1, #60
 9224 0506 FFF7FEFF 		bl	set_dig
 9225              	.LVL1053:
 943:src/display.c **** 			}
 9226              		.loc 1 943 5 view .LVU2983
 943:src/display.c **** 			}
 9227              		.loc 1 943 5 is_stmt 0 view .LVU2984
 9228 050a 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 943:src/display.c **** 			}
 9229              		.loc 1 943 5 view .LVU2985
 9230              	.LBE459:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9231              		.loc 1 949 10 is_stmt 1 view .LVU2986
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9232              		.loc 1 949 3 is_stmt 0 view .LVU2987
 9233 050e BCF1000F 		cmp	ip, #0
 9234 0512 48D0     		beq	.L906
 9235              	.LBB460:
 941:src/display.c **** 				set_dig(0, '<');
 9236              		.loc 1 941 17 view .LVU2988
 9237 0514 4FF0FF33 		mov	r3, #-1
 929:src/display.c **** 				if (gotdot <= j) {
 9238              		.loc 1 929 7 view .LVU2989
 9239 0518 4FF0090B 		mov	fp, #9
 9240              	.LVL1054:
 9241              	.L939:
ARM GAS  /tmp/ccTlkAzC.s 			page 262


 943:src/display.c **** 			}
 9242              		.loc 1 943 22 view .LVU2990
 9243 051c 4FF00109 		mov	r9, #1
 9244              	.LVL1055:
 9245              	.L918:
 943:src/display.c **** 			}
 9246              		.loc 1 943 22 view .LVU2991
 9247              	.LBE460:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9248              		.loc 1 974 7 view .LVU2992
 9249 0520 0195     		str	r5, [sp, #4]
 9250 0522 1D46     		mov	r5, r3
 9251              	.LVL1056:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9252              		.loc 1 974 7 view .LVU2993
 9253 0524 3346     		mov	r3, r6
 9254 0526 6246     		mov	r2, ip
 9255 0528 5646     		mov	r6, r10
 9256 052a 9A46     		mov	r10, r3
 9257 052c 08E0     		b	.L916
 9258              	.LVL1057:
 9259              	.L1078:
 964:src/display.c **** #  endif
 9260              		.loc 1 964 8 view .LVU2994
 9261 052e 5D45     		cmp	r5, fp
 9262 0530 11D0     		beq	.L913
 9263              	.LVL1058:
 9264              	.L912:
 988:src/display.c **** 				i += segs_per_digit;
 9265              		.loc 1 988 5 view .LVU2995
 9266 0532 FFF7FEFF 		bl	set_dig
 9267              	.LVL1059:
 989:src/display.c **** 			}
 9268              		.loc 1 989 5 is_stmt 1 view .LVU2996
 989:src/display.c **** 			}
 9269              		.loc 1 989 7 is_stmt 0 view .LVU2997
 9270 0536 0BF1090B 		add	fp, fp, #9
 9271              	.LVL1060:
 9272              	.L914:
 953:src/display.c **** 			if (*p == '.') {
 9273              		.loc 1 953 48 is_stmt 1 view .LVU2998
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9274              		.loc 1 949 10 view .LVU2999
 9275 053a 16F8012F 		ldrb	r2, [r6, #1]!	@ zero_extendqisi2
 9276              	.LVL1061:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9277              		.loc 1 949 3 is_stmt 0 view .LVU3000
 9278 053e 8AB1     		cbz	r2, .L1050
 9279              	.LVL1062:
 9280              	.L916:
 954:src/display.c **** 				if (gotdot < 0)
 9281              		.loc 1 954 4 is_stmt 1 view .LVU3001
 955:src/display.c **** 					gotdot = i;
 9282              		.loc 1 955 5 view .LVU3002
 988:src/display.c **** 				i += segs_per_digit;
 9283              		.loc 1 988 5 view .LVU3003
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/ccTlkAzC.s 			page 263


 9284              		.loc 1 949 21 is_stmt 0 view .LVU3004
 9285 0540 452A     		cmp	r2, #69
 988:src/display.c **** 				i += segs_per_digit;
 9286              		.loc 1 988 5 view .LVU3005
 9287 0542 1146     		mov	r1, r2
 9288 0544 5846     		mov	r0, fp
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9289              		.loc 1 949 21 view .LVU3006
 9290 0546 0DD0     		beq	.L1050
 954:src/display.c **** 				if (gotdot < 0)
 9291              		.loc 1 954 7 view .LVU3007
 9292 0548 2E2A     		cmp	r2, #46
 9293 054a F2D1     		bne	.L912
 964:src/display.c **** #  endif
 9294              		.loc 1 964 5 is_stmt 1 view .LVU3008
 966:src/display.c **** 					i += segs_per_digit;
 9295              		.loc 1 966 6 view .LVU3009
 9296              	.LVL1063:
 970:src/display.c **** 						i += segs_per_digit;
 9297              		.loc 1 970 6 view .LVU3010
 955:src/display.c **** 					gotdot = i;
 9298              		.loc 1 955 8 is_stmt 0 view .LVU3011
 9299 054c 002D     		cmp	r5, #0
 966:src/display.c **** 					i += segs_per_digit;
 9300              		.loc 1 966 6 view .LVU3012
 9301 054e 5846     		mov	r0, fp
 9302 0550 4FF02F01 		mov	r1, #47
 955:src/display.c **** 					gotdot = i;
 9303              		.loc 1 955 8 view .LVU3013
 9304 0554 EBDA     		bge	.L1078
 9305              	.L913:
 971:src/display.c **** 					}
 9306              		.loc 1 971 7 is_stmt 1 view .LVU3014
 9307              	.LVL1064:
 970:src/display.c **** 						i += segs_per_digit;
 9308              		.loc 1 970 9 is_stmt 0 view .LVU3015
 9309 0556 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 9310 0558 012A     		cmp	r2, #1
 9311 055a 5CD9     		bls	.L915
 9312 055c 5D46     		mov	r5, fp
 971:src/display.c **** 					}
 9313              		.loc 1 971 9 view .LVU3016
 9314 055e 0BF1090B 		add	fp, fp, #9
 9315              	.LVL1065:
 971:src/display.c **** 					}
 9316              		.loc 1 971 9 view .LVU3017
 9317 0562 EAE7     		b	.L914
 9318              	.LVL1066:
 9319              	.L1050:
 998:src/display.c **** 			gotdot = i;
 9320              		.loc 1 998 3 is_stmt 1 view .LVU3018
 9321 0564 2B46     		mov	r3, r5
 998:src/display.c **** 			gotdot = i;
 9322              		.loc 1 998 6 is_stmt 0 view .LVU3019
 9323 0566 33EA2303 		bics	r3, r3, r3, asr #32
 9324 056a 28BF     		it	cs
 9325 056c 5B46     		movcs	r3, fp
ARM GAS  /tmp/ccTlkAzC.s 			page 264


 9326              	.LVL1067:
1000:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9327              		.loc 1 1000 3 is_stmt 1 view .LVU3020
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9328              		.loc 1 1001 4 view .LVU3021
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9329              		.loc 1 1001 11 is_stmt 0 view .LVU3022
 9330 056e A3F11B0B 		sub	fp, r3, #27
 9331              	.LVL1068:
1002:src/display.c **** 				break;
 9332              		.loc 1 1002 4 is_stmt 1 view .LVU3023
 9333 0572 5246     		mov	r2, r10
1002:src/display.c **** 				break;
 9334              		.loc 1 1002 7 is_stmt 0 view .LVU3024
 9335 0574 BBF1000F 		cmp	fp, #0
 9336 0578 B246     		mov	r10, r6
 9337 057a 019D     		ldr	r5, [sp, #4]
 9338 057c 1646     		mov	r6, r2
 9339              	.LVL1069:
1002:src/display.c **** 				break;
 9340              		.loc 1 1002 7 view .LVU3025
 9341 057e 12DD     		ble	.L906
 9342 0580 4B46     		mov	r3, r9
 9343 0582 A946     		mov	r9, r5
 9344 0584 1D46     		mov	r5, r3
 9345              	.L922:
1005:src/display.c **** 				break;
 9346              		.loc 1 1005 4 is_stmt 1 view .LVU3026
1008:src/display.c **** 		}
 9347              		.loc 1 1008 4 view .LVU3027
 9348              	.LBB461:
 9349              	.LBB462:
 357:src/display.c **** 		if (sep == SEP_COMMA) *res++ = ',';
 9350              		.loc 1 357 2 view .LVU3028
 9351 0586 5846     		mov	r0, fp
 9352              	.LBE462:
 9353              	.LBE461:
1005:src/display.c **** 				break;
 9354              		.loc 1 1005 7 is_stmt 0 view .LVU3029
 9355 0588 15B1     		cbz	r5, .L923
 9356              	.LVL1070:
1005:src/display.c **** 				break;
 9357              		.loc 1 1005 25 view .LVU3030
 9358 058a BBF1090F 		cmp	fp, #9
 9359 058e 09D0     		beq	.L1045
 9360              	.L923:
1008:src/display.c **** 		}
 9361              		.loc 1 1008 4 view .LVU3031
 9362 0590 3A4B     		ldr	r3, .L1100+68
 9363 0592 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9364              	.LVL1071:
 9365              	.LBB464:
 9366              	.LBI461:
 354:src/display.c **** 	if (sep == SEP_NONE)
 9367              		.loc 1 354 14 is_stmt 1 view .LVU3032
 9368              	.LBB463:
 355:src/display.c **** 		return res;
ARM GAS  /tmp/ccTlkAzC.s 			page 265


 9369              		.loc 1 355 2 view .LVU3033
 355:src/display.c **** 		return res;
 9370              		.loc 1 355 5 is_stmt 0 view .LVU3034
 9371 0594 09B1     		cbz	r1, .L924
 9372 0596 FFF7FEFF 		bl	set_separator.part.0
 9373              	.LVL1072:
 9374              	.L924:
 355:src/display.c **** 		return res;
 9375              		.loc 1 355 5 view .LVU3035
 9376              	.LBE463:
 9377              	.LBE464:
1000:src/display.c **** 			gotdot -= 3 * SEGS_PER_DIGIT;
 9378              		.loc 1 1000 3 is_stmt 1 view .LVU3036
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9379              		.loc 1 1001 4 view .LVU3037
1001:src/display.c **** 			if (gotdot <= 0)			// MvC: was '<', caused crash
 9380              		.loc 1 1001 11 is_stmt 0 view .LVU3038
 9381 059a ABF11B0B 		sub	fp, fp, #27
 9382              	.LVL1073:
1002:src/display.c **** 				break;
 9383              		.loc 1 1002 4 is_stmt 1 view .LVU3039
1002:src/display.c **** 				break;
 9384              		.loc 1 1002 7 is_stmt 0 view .LVU3040
 9385 059e BBF1000F 		cmp	fp, #0
 9386 05a2 F0DC     		bgt	.L922
 9387              	.L1045:
1002:src/display.c **** 				break;
 9388              		.loc 1 1002 7 view .LVU3041
 9389 05a4 4D46     		mov	r5, r9
 9390              	.LVL1074:
 9391              	.L906:
1026:src/display.c **** 			p++;
 9392              		.loc 1 1026 3 is_stmt 1 view .LVU3042
1026:src/display.c **** 			p++;
 9393              		.loc 1 1026 6 is_stmt 0 view .LVU3043
 9394 05a6 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 9395 05aa 452B     		cmp	r3, #69
 9396 05ac 00F0DB80 		beq	.L1079
 9397              	.L1056:
 9398              	.LVL1075:
1026:src/display.c **** 			p++;
 9399              		.loc 1 1026 6 view .LVU3044
 9400              	.LBE472:
 9401              	.LBE499:
2473:src/display.c **** 				goto finish;
 9402              		.loc 1 2473 4 is_stmt 1 view .LVU3045
2473:src/display.c **** 				goto finish;
 9403              		.loc 1 2473 7 is_stmt 0 view .LVU3046
 9404 05b0 3B68     		ldr	r3, [r7]
 9405 05b2 DFF8D890 		ldr	r9, .L1100+84
 9406 05b6 002B     		cmp	r3, #0
 9407 05b8 3FF4E1AD 		beq	.L903
 9408 05bc A1E5     		b	.L898
 9409              	.LVL1076:
 9410              	.L1072:
 9411              	.LBB500:
 9412              	.LBB473:
ARM GAS  /tmp/ccTlkAzC.s 			page 266


 896:src/display.c **** 		p++;
 9413              		.loc 1 896 3 is_stmt 1 view .LVU3047
 9414              	.LBB465:
 9415              	.LBI465:
 283:src/display.c **** {
 9416              		.loc 1 283 13 view .LVU3048
 9417              	.LBB466:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 9418              		.loc 1 285 2 view .LVU3049
 285:src/display.c **** 	set_dot(MANT_SIGN);
 9419              		.loc 1 285 24 is_stmt 0 view .LVU3050
 9420 05be 224A     		ldr	r2, .L1100+16
 286:src/display.c **** }
 9421              		.loc 1 286 2 view .LVU3051
 9422 05c0 8120     		movs	r0, #129
 9423              	.LVL1077:
 285:src/display.c **** 	set_dot(MANT_SIGN);
 9424              		.loc 1 285 24 view .LVU3052
 9425 05c2 1370     		strb	r3, [r2]
 286:src/display.c **** }
 9426              		.loc 1 286 2 is_stmt 1 view .LVU3053
 9427              	.LBE466:
 9428              	.LBE465:
 897:src/display.c **** 	}
 9429              		.loc 1 897 4 is_stmt 0 view .LVU3054
 9430 05c4 0AF1010A 		add	r10, r10, #1
 9431              	.LVL1078:
 9432              	.LBB468:
 9433              	.LBB467:
 286:src/display.c **** }
 9434              		.loc 1 286 2 view .LVU3055
 9435 05c8 FFF7FEFF 		bl	set_dot
 9436              	.LVL1079:
 9437              	.LBE467:
 9438              	.LBE468:
 897:src/display.c **** 	}
 9439              		.loc 1 897 3 is_stmt 1 view .LVU3056
 897:src/display.c **** 	}
 9440              		.loc 1 897 3 is_stmt 0 view .LVU3057
 9441 05cc BBE5     		b	.L899
 9442              	.LVL1080:
 9443              	.L824:
 897:src/display.c **** 	}
 9444              		.loc 1 897 3 view .LVU3058
 9445              	.LBE473:
 9446              	.LBE500:
2299:src/display.c **** 			*bp++ = '\021';
 9447              		.loc 1 2299 10 is_stmt 1 view .LVU3059
2299:src/display.c **** 			*bp++ = '\021';
 9448              		.loc 1 2299 13 is_stmt 0 view .LVU3060
 9449 05ce BAF1010F 		cmp	r10, #1
 9450 05d2 00F0D680 		beq	.L1080
2306:src/display.c **** 				*bp++ = '.';
 9451              		.loc 1 2306 4 is_stmt 1 view .LVU3061
2306:src/display.c **** 				*bp++ = '.';
 9452              		.loc 1 2306 8 is_stmt 0 view .LVU3062
 9453 05d6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
ARM GAS  /tmp/ccTlkAzC.s 			page 267


2306:src/display.c **** 				*bp++ = '.';
 9454              		.loc 1 2306 7 view .LVU3063
 9455 05d8 DB07     		lsls	r3, r3, #31
2307:src/display.c **** 			if (State2.numdigit > 0) {
 9456              		.loc 1 2307 5 is_stmt 1 view .LVU3064
 9457              	.LVL1081:
2307:src/display.c **** 			if (State2.numdigit > 0) {
 9458              		.loc 1 2307 11 is_stmt 0 view .LVU3065
 9459 05da 44BF     		itt	mi
 9460 05dc 2E23     		movmi	r3, #46
 9461 05de 00F8013B 		strbmi	r3, [r0], #1
 9462              	.LVL1082:
2308:src/display.c **** 				if (State2.shuffle)
 9463              		.loc 1 2308 4 is_stmt 1 view .LVU3066
2308:src/display.c **** 				if (State2.shuffle)
 9464              		.loc 1 2308 14 is_stmt 0 view .LVU3067
 9465 05e2 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2308:src/display.c **** 				if (State2.shuffle)
 9466              		.loc 1 2308 7 view .LVU3068
 9467 05e4 8AB1     		cbz	r2, .L827
2309:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9468              		.loc 1 2309 5 is_stmt 1 view .LVU3069
2309:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9469              		.loc 1 2309 9 is_stmt 0 view .LVU3070
 9470 05e6 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2309:src/display.c **** 					for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9471              		.loc 1 2309 8 view .LVU3071
 9472 05e8 9E07     		lsls	r6, r3, #30
 9473 05ea 40F1D581 		bpl	.L828
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9474              		.loc 1 2310 6 is_stmt 1 view .LVU3072
 9475              	.LVL1083:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9476              		.loc 1 2310 20 is_stmt 0 view .LVU3073
 9477 05ee 2289     		ldrh	r2, [r4, #8]
 9478              	.LVL1084:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9479              		.loc 1 2310 37 is_stmt 1 view .LVU3074
 9480 05f0 2349     		ldr	r1, .L1100+72
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9481              		.loc 1 2310 13 is_stmt 0 view .LVU3075
 9482 05f2 0023     		movs	r3, #0
 9483              	.LVL1085:
 9484              	.L829:
2311:src/display.c **** 				else
 9485              		.loc 1 2311 7 is_stmt 1 discriminator 3 view .LVU3076
2311:src/display.c **** 				else
 9486              		.loc 1 2311 26 is_stmt 0 discriminator 3 view .LVU3077
 9487 05f4 02F00306 		and	r6, r2, #3
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9488              		.loc 1 2310 57 discriminator 3 view .LVU3078
 9489 05f8 0133     		adds	r3, r3, #1
 9490              	.LVL1086:
2311:src/display.c **** 				else
 9491              		.loc 1 2311 13 discriminator 3 view .LVU3079
 9492 05fa 8E5D     		ldrb	r6, [r1, r6]	@ zero_extendqisi2
 9493 05fc 00F8016B 		strb	r6, [r0], #1
ARM GAS  /tmp/ccTlkAzC.s 			page 268


 9494              	.LVL1087:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9495              		.loc 1 2310 56 is_stmt 1 discriminator 3 view .LVU3080
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9496              		.loc 1 2310 45 is_stmt 0 discriminator 3 view .LVU3081
 9497 0600 E67A     		ldrb	r6, [r4, #11]	@ zero_extendqisi2
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9498              		.loc 1 2310 6 discriminator 3 view .LVU3082
 9499 0602 9E42     		cmp	r6, r3
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9500              		.loc 1 2310 63 discriminator 3 view .LVU3083
 9501 0604 4FEAA202 		asr	r2, r2, #2
 9502              	.LVL1088:
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9503              		.loc 1 2310 37 is_stmt 1 discriminator 3 view .LVU3084
2310:src/display.c **** 						*bp++ = REGNAMES[j & 3];
 9504              		.loc 1 2310 6 is_stmt 0 discriminator 3 view .LVU3085
 9505 0608 F4DC     		bgt	.L829
 9506              	.LVL1089:
 9507              	.L827:
2316:src/display.c **** 		}
 9508              		.loc 1 2316 5 is_stmt 1 view .LVU3086
2316:src/display.c **** 		}
 9509              		.loc 1 2316 11 is_stmt 0 view .LVU3087
 9510 060a 5F23     		movs	r3, #95
 9511 060c 0B4E     		ldr	r6, .L1100+4
 9512 060e DFF87880 		ldr	r8, .L1100+80
 9513 0612 0370     		strb	r3, [r0]
 9514 0614 ECE5     		b	.L819
 9515              	.LVL1090:
 9516              	.L915:
 9517              	.LBB501:
 9518              	.LBB474:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9519              		.loc 1 974 7 is_stmt 1 view .LVU3088
 9520 0616 1B4B     		ldr	r3, .L1100+76
 9521 0618 0022     		movs	r2, #0
 9522 061a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9523 061c ABF10900 		sub	r0, fp, #9
 9524              	.LVL1091:
 974:src/display.c **** //						i += SEGS_PER_DIGIT;
 9525              		.loc 1 974 7 is_stmt 0 view .LVU3089
 9526 0620 FFF7FEFF 		bl	set_decimal
 9527              	.LVL1092:
 9528 0624 5D46     		mov	r5, fp
 9529 0626 88E7     		b	.L914
 9530              	.LVL1093:
 9531              	.L905:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9532              		.loc 1 949 10 is_stmt 1 view .LVU3090
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9533              		.loc 1 949 3 is_stmt 0 view .LVU3091
 9534 0628 BCF1000F 		cmp	ip, #0
 9535 062c BBD0     		beq	.L906
 909:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9536              		.loc 1 909 5 view .LVU3092
 9537 062e CB46     		mov	fp, r9
ARM GAS  /tmp/ccTlkAzC.s 			page 269


 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9538              		.loc 1 886 6 view .LVU3093
 9539 0630 4FF0FF33 		mov	r3, #-1
 9540 0634 74E7     		b	.L918
 9541              	.L1101:
 9542 0636 00BF     		.align	2
 9543              	.L1100:
 9544 0638 0C000000 		.word	.LANCHOR17+12
 9545 063c 00000000 		.word	DispMsg
 9546 0640 08000000 		.word	.LC23
 9547 0644 18000000 		.word	.LC24
 9548 0648 00000000 		.word	LastDisplayedNumber
 9549 064c 34000000 		.word	.LC25
 9550 0650 00000000 		.word	LastDisplayedExponent
 9551 0654 00000000 		.word	.LANCHOR19
 9552 0658 AC000000 		.word	.LC42
 9553 065c 00000000 		.word	ShowRPN
 9554 0660 56040000 		.word	argcmds+1110
 9555 0664 00000000 		.word	.LANCHOR21
 9556 0668 00000000 		.word	.LANCHOR23
 9557 066c B4000000 		.word	.LC28
 9558 0670 00000000 		.word	argcmds
 9559 0674 00000000 		.word	.LC20
 9560 0678 04000000 		.word	.LC21
 9561 067c 00000000 		.word	.LANCHOR0
 9562 0680 BC000000 		.word	.LC27
 9563 0684 00000000 		.word	.LANCHOR1
 9564 0688 00000000 		.word	DispPlot
 9565 068c 00000000 		.word	ShowRegister
 9566              	.LVL1094:
 9567              	.L1066:
 886:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9568              		.loc 1 886 6 view .LVU3094
 9569              	.LBE474:
 9570              	.LBE501:
 9571              	.LBB502:
2326:src/display.c **** 		char b2[16];
 9572              		.loc 1 2326 3 is_stmt 1 view .LVU3095
2326:src/display.c **** 		char b2[16];
 9573              		.loc 1 2326 44 is_stmt 0 view .LVU3096
 9574 0690 CB4B     		ldr	r3, .L1102
 9575 0692 B3F8DC07 		ldrh	r0, [r3, #2012]
2326:src/display.c **** 		char b2[16];
 9576              		.loc 1 2326 21 view .LVU3097
 9577 0696 C0F34610 		ubfx	r0, r0, #5, #7
 9578 069a FFF7FEFF 		bl	current_catalogue
 9579              	.LVL1095:
2330:src/display.c **** 		p = catcmd(op, b2);
 9580              		.loc 1 2330 8 view .LVU3098
 9581 069e C949     		ldr	r1, .L1102+4
2326:src/display.c **** 		char b2[16];
 9582              		.loc 1 2326 21 view .LVU3099
 9583 06a0 8246     		mov	r10, r0
 9584              	.LVL1096:
2327:src/display.c **** 		const char *p;
 9585              		.loc 1 2327 3 is_stmt 1 view .LVU3100
2328:src/display.c **** 
ARM GAS  /tmp/ccTlkAzC.s 			page 270


 9586              		.loc 1 2328 3 view .LVU3101
2330:src/display.c **** 		p = catcmd(op, b2);
 9587              		.loc 1 2330 3 view .LVU3102
2330:src/display.c **** 		p = catcmd(op, b2);
 9588              		.loc 1 2330 8 is_stmt 0 view .LVU3103
 9589 06a2 4046     		mov	r0, r8
 9590              	.LVL1097:
2330:src/display.c **** 		p = catcmd(op, b2);
 9591              		.loc 1 2330 8 view .LVU3104
 9592 06a4 FFF7FEFF 		bl	scopy
 9593              	.LVL1098:
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9594              		.loc 1 2331 7 view .LVU3105
 9595 06a8 08A9     		add	r1, sp, #32
2330:src/display.c **** 		p = catcmd(op, b2);
 9596              		.loc 1 2330 8 view .LVU3106
 9597 06aa 0646     		mov	r6, r0
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9598              		.loc 1 2331 7 view .LVU3107
 9599 06ac 5046     		mov	r0, r10
 9600              	.LVL1099:
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9601              		.loc 1 2331 3 is_stmt 1 view .LVU3108
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9602              		.loc 1 2331 7 is_stmt 0 view .LVU3109
 9603 06ae FFF7FEFF 		bl	catcmd
 9604              	.LVL1100:
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9605              		.loc 1 2332 6 view .LVU3110
 9606 06b2 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9607 06b4 142B     		cmp	r3, #20
2331:src/display.c **** 		if (*p != COMPLEX_PREFIX && State2.cmplx)
 9608              		.loc 1 2331 7 view .LVU3111
 9609 06b6 0146     		mov	r1, r0
 9610              	.LVL1101:
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9611              		.loc 1 2332 3 is_stmt 1 view .LVU3112
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9612              		.loc 1 2332 6 is_stmt 0 view .LVU3113
 9613 06b8 05D0     		beq	.L832
2332:src/display.c **** 			*bp++ = COMPLEX_PREFIX;
 9614              		.loc 1 2332 28 discriminator 1 view .LVU3114
 9615 06ba 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9616 06bc 9807     		lsls	r0, r3, #30
 9617              	.LVL1102:
2333:src/display.c **** 		bp = scopy(bp, p);
 9618              		.loc 1 2333 4 is_stmt 1 discriminator 1 view .LVU3115
2333:src/display.c **** 		bp = scopy(bp, p);
 9619              		.loc 1 2333 10 is_stmt 0 discriminator 1 view .LVU3116
 9620 06be 44BF     		itt	mi
 9621 06c0 1423     		movmi	r3, #20
 9622 06c2 06F8013B 		strbmi	r3, [r6], #1
 9623              	.LVL1103:
 9624              	.L832:
2334:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 9625              		.loc 1 2334 3 is_stmt 1 view .LVU3117
2334:src/display.c **** 		if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
ARM GAS  /tmp/ccTlkAzC.s 			page 271


 9626              		.loc 1 2334 8 is_stmt 0 view .LVU3118
 9627 06c6 3046     		mov	r0, r6
 9628 06c8 FFF7FEFF 		bl	scopy
 9629              	.LVL1104:
2335:src/display.c **** 			// State2.disp_small = 1;
 9630              		.loc 1 2335 3 is_stmt 1 view .LVU3119
2335:src/display.c **** 			// State2.disp_small = 1;
 9631              		.loc 1 2335 6 is_stmt 0 view .LVU3120
 9632 06cc A9F11003 		sub	r3, r9, #16
 9633 06d0 012B     		cmp	r3, #1
 9634 06d2 5DD9     		bls	.L1081
2342:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9635              		.loc 1 2342 10 is_stmt 1 view .LVU3121
2342:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9636              		.loc 1 2342 14 is_stmt 0 view .LVU3122
 9637 06d4 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2342:src/display.c **** 			if (cata == CATALOGUE_CONV) {
 9638              		.loc 1 2342 13 view .LVU3123
 9639 06d6 5906     		lsls	r1, r3, #25
 9640 06d8 7FF578AE 		bpl	.L837
2343:src/display.c **** 				decNumber x, r;
 9641              		.loc 1 2343 4 is_stmt 1 view .LVU3124
2343:src/display.c **** 				decNumber x, r;
 9642              		.loc 1 2343 7 is_stmt 0 view .LVU3125
 9643 06dc B9F1120F 		cmp	r9, #18
 9644 06e0 00F00382 		beq	.L1082
2363:src/display.c **** 				REGISTER z, *const x = StackBase;
 9645              		.loc 1 2363 11 is_stmt 1 view .LVU3126
2363:src/display.c **** 				REGISTER z, *const x = StackBase;
 9646              		.loc 1 2363 44 is_stmt 0 view .LVU3127
 9647 06e4 AAF58873 		sub	r3, r10, #272
2363:src/display.c **** 				REGISTER z, *const x = StackBase;
 9648              		.loc 1 2363 14 view .LVU3128
 9649 06e8 0D2B     		cmp	r3, #13
 9650 06ea 3FF66FAE 		bhi	.L837
 9651              	.LBB490:
2364:src/display.c **** 				copyreg(&z, x);
 9652              		.loc 1 2364 5 is_stmt 1 discriminator 3 view .LVU3129
2364:src/display.c **** 				copyreg(&z, x);
 9653              		.loc 1 2364 24 is_stmt 0 discriminator 3 view .LVU3130
 9654 06ee B64B     		ldr	r3, .L1102+8
 9655 06f0 1E68     		ldr	r6, [r3]
 9656              	.LVL1105:
2365:src/display.c **** 				sigma_val((enum nilop) argKIND(op));
 9657              		.loc 1 2365 5 is_stmt 1 discriminator 3 view .LVU3131
 9658 06f2 15A8     		add	r0, sp, #84
 9659 06f4 3146     		mov	r1, r6
 9660 06f6 FFF7FEFF 		bl	copyreg
 9661              	.LVL1106:
2366:src/display.c **** 				set_x(x, CNULL, is_dblmode());
 9662              		.loc 1 2366 5 discriminator 3 view .LVU3132
 9663 06fa 5FFA8AF0 		uxtb	r0, r10
 9664 06fe FFF7FEFF 		bl	sigma_val
 9665              	.LVL1107:
2367:src/display.c **** 				copyreg(x, &z);
 9666              		.loc 1 2367 5 discriminator 3 view .LVU3133
 9667 0702 FFF7FEFF 		bl	is_dblmode
ARM GAS  /tmp/ccTlkAzC.s 			page 272


 9668              	.LVL1108:
 9669 0706 0021     		movs	r1, #0
 9670 0708 0246     		mov	r2, r0
 9671 070a 3046     		mov	r0, r6
 9672 070c FFF7FEFF 		bl	set_x
 9673              	.LVL1109:
2368:src/display.c **** 				skip = 1;
 9674              		.loc 1 2368 5 discriminator 3 view .LVU3134
 9675 0710 15A9     		add	r1, sp, #84
 9676 0712 3046     		mov	r0, r6
 9677 0714 FFF7FEFF 		bl	copyreg
 9678              	.LVL1110:
2369:src/display.c **** 			}
 9679              		.loc 1 2369 5 discriminator 3 view .LVU3135
2369:src/display.c **** 			}
 9680              		.loc 1 2369 5 is_stmt 0 discriminator 3 view .LVU3136
 9681              	.LBE490:
2372:src/display.c **** 	} else if (State2.multi) {
 9682              		.loc 1 2372 3 is_stmt 1 discriminator 3 view .LVU3137
 9683 0718 1EA8     		add	r0, sp, #120
 9684 071a FFF7FEFF 		bl	set_status
 9685              	.LVL1111:
2372:src/display.c **** 	} else if (State2.multi) {
 9686              		.loc 1 2372 3 is_stmt 0 discriminator 3 view .LVU3138
 9687              	.LBE502:
2456:src/display.c **** nostk:	show_flags();
 9688              		.loc 1 2456 2 is_stmt 1 discriminator 3 view .LVU3139
 9689 071e FFF7FEFF 		bl	show_stack
 9690              	.LVL1112:
2457:src/display.c **** 	if (!skip) {
 9691              		.loc 1 2457 8 discriminator 3 view .LVU3140
 9692 0722 FFF7FEFF 		bl	show_flags
 9693              	.LVL1113:
2458:src/display.c **** 		if (State2.runmode) {
 9694              		.loc 1 2458 2 discriminator 3 view .LVU3141
 9695              	.L836:
2503:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9696              		.loc 1 2503 2 view .LVU3142
 9697 0726 FFF7FEFF 		bl	set_annunciators
 9698              	.LVL1114:
2504:src/display.c **** 		ShowRPN = 0;
 9699              		.loc 1 2504 2 view .LVU3143
 9700 072a A84E     		ldr	r6, .L1102+12
 9701 072c DFF8B882 		ldr	r8, .L1102+40
 9702 0730 DFF8B892 		ldr	r9, .L1102+44
 9703 0734 29E5     		b	.L814
 9704              	.LVL1115:
 9705              	.L1067:
2374:src/display.c **** 		if (State2.numdigit > 0) {
 9706              		.loc 1 2374 3 view .LVU3144
2374:src/display.c **** 		if (State2.numdigit > 0) {
 9707              		.loc 1 2374 41 is_stmt 0 view .LVU3145
 9708 0736 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9709 0738 A549     		ldr	r1, .L1102+16
 9710 073a 0423     		movs	r3, #4
 9711 073c 03EB0213 		add	r3, r3, r2, lsl #4
2374:src/display.c **** 		if (State2.numdigit > 0) {
ARM GAS  /tmp/ccTlkAzC.s 			page 273


 9712              		.loc 1 2374 8 view .LVU3146
 9713 0740 1944     		add	r1, r1, r3
 9714 0742 4046     		mov	r0, r8
 9715 0744 2722     		movs	r2, #39
 9716 0746 FFF7FEFF 		bl	scopy_char
 9717              	.LVL1116:
2375:src/display.c **** 			*bp++ = (char) State2.digval;
 9718              		.loc 1 2375 6 view .LVU3147
 9719 074a E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9720              	.LVL1117:
2375:src/display.c **** 			*bp++ = (char) State2.digval;
 9721              		.loc 1 2375 3 is_stmt 1 view .LVU3148
2375:src/display.c **** 			*bp++ = (char) State2.digval;
 9722              		.loc 1 2375 6 is_stmt 0 view .LVU3149
 9723 074c 002B     		cmp	r3, #0
 9724 074e 3FF44CAD 		beq	.L1049
2376:src/display.c **** 			if (State2.numdigit > 1)
 9725              		.loc 1 2376 4 is_stmt 1 view .LVU3150
 9726              	.LVL1118:
2376:src/display.c **** 			if (State2.numdigit > 1)
 9727              		.loc 1 2376 12 is_stmt 0 view .LVU3151
 9728 0752 2389     		ldrh	r3, [r4, #8]
 9729 0754 0370     		strb	r3, [r0]
2377:src/display.c **** 				*bp++ = State2.digval2;
 9730              		.loc 1 2377 4 is_stmt 1 view .LVU3152
2377:src/display.c **** 				*bp++ = State2.digval2;
 9731              		.loc 1 2377 7 is_stmt 0 view .LVU3153
 9732 0756 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9733 0758 012B     		cmp	r3, #1
2378:src/display.c **** 		}
 9734              		.loc 1 2378 5 is_stmt 1 view .LVU3154
 9735              	.LVL1119:
2378:src/display.c **** 		}
 9736              		.loc 1 2378 19 is_stmt 0 view .LVU3155
 9737 075a 84BF     		itt	hi
 9738 075c A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2378:src/display.c **** 		}
 9739              		.loc 1 2378 11 view .LVU3156
 9740 075e 4370     		strbhi	r3, [r0, #1]
 9741 0760 43E5     		b	.L1049
 9742              	.LVL1120:
 9743              	.L948:
 9744              	.LBB503:
 9745              	.LBB485:
2493:src/display.c **** 			  while(*b) {
 9746              		.loc 1 2493 8 view .LVU3157
 9747 0762 5A1C     		adds	r2, r3, #1
 9748 0764 C3E5     		b	.L929
 9749              	.LVL1121:
 9750              	.L1079:
2493:src/display.c **** 			  while(*b) {
 9751              		.loc 1 2493 8 view .LVU3158
 9752              	.LBE485:
 9753              	.LBE503:
 9754              	.LBB504:
 9755              	.LBB475:
1027:src/display.c **** 			// set_exp() takes care of setting the exponent sign
ARM GAS  /tmp/ccTlkAzC.s 			page 274


 9756              		.loc 1 1027 4 is_stmt 1 view .LVU3159
1032:src/display.c **** #  endif
 9757              		.loc 1 1032 4 view .LVU3160
 9758 0766 0AF10100 		add	r0, r10, #1
 9759              	.LVL1122:
1032:src/display.c **** #  endif
 9760              		.loc 1 1032 4 is_stmt 0 view .LVU3161
 9761 076a FFF7FEFF 		bl	s_to_i
 9762              	.LVL1123:
1032:src/display.c **** #  endif
 9763              		.loc 1 1032 4 view .LVU3162
 9764 076e 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 9765 0772 2D2B     		cmp	r3, #45
 9766 0774 0CBF     		ite	eq
 9767 0776 0621     		moveq	r1, #6
 9768 0778 0421     		movne	r1, #4
 9769 077a 0022     		movs	r2, #0
 9770 077c FFF7FEFF 		bl	set_exp
 9771              	.LVL1124:
 9772 0780 16E7     		b	.L1056
 9773              	.LVL1125:
 9774              	.L1080:
1032:src/display.c **** #  endif
 9775              		.loc 1 1032 4 view .LVU3163
 9776              	.LBE475:
 9777              	.LBE504:
2300:src/display.c **** 			*bp++ = '_';
 9778              		.loc 1 2300 4 is_stmt 1 view .LVU3164
2300:src/display.c **** 			*bp++ = '_';
 9779              		.loc 1 2300 10 is_stmt 0 view .LVU3165
 9780 0782 1122     		movs	r2, #17
 9781 0784 8AE6     		b	.L1048
 9782              	.LVL1126:
 9783              	.L1076:
 9784              	.LBB505:
 9785              	.LBB476:
 892:src/display.c **** #endif
 9786              		.loc 1 892 6 view .LVU3166
 9787 0786 8146     		mov	r9, r0
 909:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9788              		.loc 1 909 5 view .LVU3167
 9789 0788 8346     		mov	fp, r0
 9790              	.LBB469:
 945:src/display.c **** 		}
 9791              		.loc 1 945 16 view .LVU3168
 9792 078a 4FF0FF33 		mov	r3, #-1
 9793              	.LVL1127:
 945:src/display.c **** 		}
 9794              		.loc 1 945 16 view .LVU3169
 9795 078e C7E6     		b	.L918
 9796              	.LVL1128:
 9797              	.L1081:
 945:src/display.c **** 		}
 9798              		.loc 1 945 16 view .LVU3170
 9799              	.LBE469:
 9800              	.LBE476:
 9801              	.LBE505:
ARM GAS  /tmp/ccTlkAzC.s 			page 275


 9802              	.LBB506:
2337:src/display.c **** 				set_digits_string("0 to 255", 0);
 9803              		.loc 1 2337 4 is_stmt 1 view .LVU3171
2337:src/display.c **** 				set_digits_string("0 to 255", 0);
 9804              		.loc 1 2337 7 is_stmt 0 view .LVU3172
 9805 0790 BAF5274F 		cmp	r10, #42752
 9806 0794 00F09981 		beq	.L834
2337:src/display.c **** 				set_digits_string("0 to 255", 0);
 9807              		.loc 1 2337 39 discriminator 1 view .LVU3173
 9808 0798 BAF5284F 		cmp	r10, #43008
 9809 079c 00F09581 		beq	.L834
2340:src/display.c **** 			skip = 1;
 9810              		.loc 1 2340 5 is_stmt 1 view .LVU3174
2340:src/display.c **** 			skip = 1;
 9811              		.loc 1 2340 11 is_stmt 0 view .LVU3175
 9812 07a0 0AF07F00 		and	r0, r10, #127
 9813 07a4 0021     		movs	r1, #0
 9814 07a6 FFF7FEFF 		bl	get_const
 9815              	.LVL1129:
2340:src/display.c **** 			skip = 1;
 9816              		.loc 1 2340 5 view .LVU3176
 9817 07aa 0022     		movs	r2, #0
 9818              	.LVL1130:
 9819              	.L1052:
 9820              	.LBB491:
2361:src/display.c **** 				skip = 1;
 9821              		.loc 1 2361 5 discriminator 1 view .LVU3177
 9822 07ac 1146     		mov	r1, r2
 9823 07ae FFF7FEFF 		bl	set_x
 9824              	.LVL1131:
2362:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9825              		.loc 1 2362 5 is_stmt 1 discriminator 1 view .LVU3178
2362:src/display.c **** 			} else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 9826              		.loc 1 2362 5 is_stmt 0 discriminator 1 view .LVU3179
 9827              	.LBE491:
2372:src/display.c **** 	} else if (State2.multi) {
 9828              		.loc 1 2372 3 is_stmt 1 discriminator 1 view .LVU3180
 9829 07b2 1EA8     		add	r0, sp, #120
 9830 07b4 FFF7FEFF 		bl	set_status
 9831              	.LVL1132:
 9832              	.L1053:
2372:src/display.c **** 	} else if (State2.multi) {
 9833              		.loc 1 2372 3 is_stmt 0 discriminator 1 view .LVU3181
 9834              	.LBE506:
2456:src/display.c **** nostk:	show_flags();
 9835              		.loc 1 2456 2 is_stmt 1 discriminator 1 view .LVU3182
 9836 07b8 FFF7FEFF 		bl	show_stack
 9837              	.LVL1133:
2457:src/display.c **** 	if (!skip) {
 9838              		.loc 1 2457 8 discriminator 1 view .LVU3183
 9839 07bc FFF7FEFF 		bl	show_flags
 9840              	.LVL1134:
2458:src/display.c **** 		if (State2.runmode) {
 9841              		.loc 1 2458 2 discriminator 1 view .LVU3184
 9842 07c0 B1E7     		b	.L836
 9843              	.LVL1135:
 9844              	.L945:
ARM GAS  /tmp/ccTlkAzC.s 			page 276


 9845              	.LBB507:
 9846              	.LBB477:
 9847              	.LBB470:
 929:src/display.c **** 				if (gotdot <= j) {
 9848              		.loc 1 929 7 is_stmt 0 view .LVU3185
 9849 07c2 4FF0090B 		mov	fp, #9
 9850              	.LVL1136:
 9851              	.L910:
 942:src/display.c **** 				overflow_to_left = 1;
 9852              		.loc 1 942 5 is_stmt 1 view .LVU3186
 9853 07c6 3C21     		movs	r1, #60
 9854 07c8 0020     		movs	r0, #0
 9855 07ca FFF7FEFF 		bl	set_dig
 9856              	.LVL1137:
 943:src/display.c **** 			}
 9857              		.loc 1 943 5 view .LVU3187
 943:src/display.c **** 			}
 9858              		.loc 1 943 5 is_stmt 0 view .LVU3188
 9859 07ce 9AF800C0 		ldrb	ip, [r10]	@ zero_extendqisi2
 943:src/display.c **** 			}
 9860              		.loc 1 943 5 view .LVU3189
 9861              	.LBE470:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9862              		.loc 1 949 10 is_stmt 1 view .LVU3190
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9863              		.loc 1 949 3 is_stmt 0 view .LVU3191
 9864 07d2 0023     		movs	r3, #0
 9865 07d4 BCF1000F 		cmp	ip, #0
 9866 07d8 7FF4A0AE 		bne	.L939
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9867              		.loc 1 949 3 view .LVU3192
 9868 07dc E8E6     		b	.L1056
 9869              	.LVL1138:
 9870              	.L1069:
 949:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9871              		.loc 1 949 3 view .LVU3193
 9872              	.LBE477:
 9873              	.LBE507:
2385:src/display.c **** 		skip = 1;
 9874              		.loc 1 2385 3 is_stmt 1 view .LVU3194
 9875              	.LBB508:
 9876              	.LBI508:
2091:src/display.c **** 	char buf[16];
 9877              		.loc 1 2091 13 view .LVU3195
 9878              	.LBB509:
2092:src/display.c **** 	unsigned short int pc = State2.digval;
 9879              		.loc 1 2092 2 view .LVU3196
2093:src/display.c **** 	unsigned int op = getprog(pc);
 9880              		.loc 1 2093 2 view .LVU3197
2093:src/display.c **** 	unsigned int op = getprog(pc);
 9881              		.loc 1 2093 21 is_stmt 0 view .LVU3198
 9882 07de B4F80890 		ldrh	r9, [r4, #8]
 9883              	.LVL1139:
2094:src/display.c **** 	int n = nLIB(pc);
 9884              		.loc 1 2094 2 is_stmt 1 view .LVU3199
2099:src/display.c **** #ifndef REALBUILD
 9885              		.loc 1 2099 27 is_stmt 0 view .LVU3200
ARM GAS  /tmp/ccTlkAzC.s 			page 277


 9886 07e2 DFF80C82 		ldr	r8, .L1102+48
 9887              	.LVL1140:
2101:src/display.c **** #endif
 9888              		.loc 1 2101 41 view .LVU3201
 9889 07e6 7B4F     		ldr	r7, .L1102+20
2094:src/display.c **** 	int n = nLIB(pc);
 9890              		.loc 1 2094 20 view .LVU3202
 9891 07e8 4846     		mov	r0, r9
 9892 07ea FFF7FEFF 		bl	getprog
 9893              	.LVL1141:
 9894 07ee 4FEA9936 		lsr	r6, r9, #14
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9895              		.loc 1 2098 2 view .LVU3203
 9896 07f2 15A9     		add	r1, sp, #84
2094:src/display.c **** 	int n = nLIB(pc);
 9897              		.loc 1 2094 20 view .LVU3204
 9898 07f4 8246     		mov	r10, r0
 9899              	.LVL1142:
2095:src/display.c **** 	unsigned short int lblpc;
 9900              		.loc 1 2095 2 is_stmt 1 view .LVU3205
2096:src/display.c **** 
 9901              		.loc 1 2096 2 view .LVU3206
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9902              		.loc 1 2098 2 view .LVU3207
2099:src/display.c **** #ifndef REALBUILD
 9903              		.loc 1 2099 27 is_stmt 0 view .LVU3208
 9904 07f6 06EB8606 		add	r6, r6, r6, lsl #2
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9905              		.loc 1 2098 2 view .LVU3209
 9906 07fa FFF7FEFF 		bl	prt
 9907              	.LVL1143:
2098:src/display.c **** 	set_digits_string(libname[n], 0);
 9908              		.loc 1 2098 2 view .LVU3210
 9909 07fe FFF7FEFF 		bl	set_status
 9910              	.LVL1144:
2099:src/display.c **** #ifndef REALBUILD
 9911              		.loc 1 2099 2 is_stmt 1 view .LVU3211
 9912 0802 08EB0600 		add	r0, r8, r6
 9913 0806 0021     		movs	r1, #0
 9914 0808 FFF7FEFF 		bl	set_digits_string
 9915              	.LVL1145:
2101:src/display.c **** #endif
 9916              		.loc 1 2101 2 view .LVU3212
 9917 080c 7248     		ldr	r0, .L1102+24
 9918 080e 07EB4601 		add	r1, r7, r6, lsl #1
 9919 0812 FFF7FEFF 		bl	scopy
 9920              	.LVL1146:
2104:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9921              		.loc 1 2104 2 view .LVU3213
2104:src/display.c **** 		lblpc = findmultilbl(op, 0);
 9922              		.loc 1 2104 5 is_stmt 0 view .LVU3214
 9923 0816 1AF4704F 		tst	r10, #61440
 9924 081a CDD0     		beq	.L1053
2105:src/display.c **** 		if (lblpc != pc) {
 9925              		.loc 1 2105 3 is_stmt 1 view .LVU3215
2105:src/display.c **** 		if (lblpc != pc) {
 9926              		.loc 1 2105 11 is_stmt 0 view .LVU3216
ARM GAS  /tmp/ccTlkAzC.s 			page 278


 9927 081c 5046     		mov	r0, r10
 9928 081e 0021     		movs	r1, #0
 9929 0820 FFF7FEFF 		bl	findmultilbl
 9930              	.LVL1147:
2105:src/display.c **** 		if (lblpc != pc) {
 9931              		.loc 1 2105 9 view .LVU3217
 9932 0824 86B2     		uxth	r6, r0
 9933              	.LVL1148:
2106:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9934              		.loc 1 2106 3 is_stmt 1 view .LVU3218
2106:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9935              		.loc 1 2106 6 is_stmt 0 view .LVU3219
 9936 0826 B145     		cmp	r9, r6
2105:src/display.c **** 		if (lblpc != pc) {
 9937              		.loc 1 2105 11 view .LVU3220
 9938 0828 8246     		mov	r10, r0
 9939              	.LVL1149:
2106:src/display.c **** 			set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 9940              		.loc 1 2106 6 view .LVU3221
 9941 082a C5D0     		beq	.L1053
2107:src/display.c **** 			n = nLIB(lblpc);
 9942              		.loc 1 2107 4 is_stmt 1 view .LVU3222
 9943 082c 6B48     		ldr	r0, .L1102+28
 9944 082e 3F21     		movs	r1, #63
 9945 0830 FFF7FEFF 		bl	set_digits_string
 9946              	.LVL1150:
2108:src/display.c **** 			if (n == REGION_RAM)
 9947              		.loc 1 2108 4 view .LVU3223
2109:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 9948              		.loc 1 2109 4 view .LVU3224
2109:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 9949              		.loc 1 2109 7 is_stmt 0 view .LVU3225
 9950 0834 B60B     		lsrs	r6, r6, #14
 9951              	.LVL1151:
2109:src/display.c **** 				set_exp(lblpc, 1, CNULL);
 9952              		.loc 1 2109 7 view .LVU3226
 9953 0836 40F07A81 		bne	.L865
2110:src/display.c **** 			else {
 9954              		.loc 1 2110 5 is_stmt 1 view .LVU3227
 9955 083a 3246     		mov	r2, r6
 9956 083c 1FFA8AF0 		uxth	r0, r10
 9957 0840 0121     		movs	r1, #1
 9958 0842 FFF7FEFF 		bl	set_exp
 9959              	.LVL1152:
 9960 0846 B7E7     		b	.L1053
 9961              	.LVL1153:
 9962              	.L1068:
2110:src/display.c **** 			else {
 9963              		.loc 1 2110 5 is_stmt 0 view .LVU3228
 9964              	.LBE509:
 9965              	.LBE508:
2382:src/display.c **** 		skip = 1;
 9966              		.loc 1 2382 3 is_stmt 1 view .LVU3229
 9967              	.LBB511:
 9968              	.LBI511:
1989:src/display.c **** 	int i, n;
 9969              		.loc 1 1989 13 view .LVU3230
ARM GAS  /tmp/ccTlkAzC.s 			page 279


 9970              	.LBB512:
1990:src/display.c **** 	int j = SEGS_EXP_BASE;
 9971              		.loc 1 1990 2 view .LVU3231
1991:src/display.c **** 	const int status = State2.status - 3;
 9972              		.loc 1 1991 2 view .LVU3232
1992:src/display.c **** 	char buf[16], *p = buf;
 9973              		.loc 1 1992 2 view .LVU3233
1996:src/display.c **** 		set_status("Free:");
 9974              		.loc 1 1996 5 is_stmt 0 view .LVU3234
 9975 0848 012B     		cmp	r3, #1
1992:src/display.c **** 	char buf[16], *p = buf;
 9976              		.loc 1 1992 12 view .LVU3235
 9977 084a A3F10307 		sub	r7, r3, #3
 9978              	.LVL1154:
1993:src/display.c **** 	unsigned int pc;
 9979              		.loc 1 1993 2 is_stmt 1 view .LVU3236
1994:src/display.c **** 
 9980              		.loc 1 1994 2 view .LVU3237
1996:src/display.c **** 		set_status("Free:");
 9981              		.loc 1 1996 2 view .LVU3238
1996:src/display.c **** 		set_status("Free:");
 9982              		.loc 1 1996 5 is_stmt 0 view .LVU3239
 9983 084e 00F01182 		beq	.L1083
2004:src/display.c **** 		/* Top line */
 9984              		.loc 1 2004 7 is_stmt 1 view .LVU3240
2004:src/display.c **** 		/* Top line */
 9985              		.loc 1 2004 10 is_stmt 0 view .LVU3241
 9986 0852 7B1C     		adds	r3, r7, #1
 9987 0854 00F07282 		beq	.L1084
 9988              	.LBB513:
2021:src/display.c **** 		int end;
 9989              		.loc 1 2021 3 is_stmt 1 view .LVU3242
2022:src/display.c **** 		int group = 10;
 9990              		.loc 1 2022 3 view .LVU3243
2023:src/display.c **** 		int start = 0;
 9991              		.loc 1 2023 3 view .LVU3244
 9992              	.LVL1155:
2024:src/display.c **** 		
 9993              		.loc 1 2024 3 view .LVU3245
2026:src/display.c **** 			base = 10 * status;
 9994              		.loc 1 2026 3 view .LVU3246
2026:src/display.c **** 			base = 10 * status;
 9995              		.loc 1 2026 6 is_stmt 0 view .LVU3247
 9996 0858 092F     		cmp	r7, #9
 9997 085a 40F32682 		ble	.L1085
2036:src/display.c **** 			base = regX_idx;
 9998              		.loc 1 2036 8 is_stmt 1 view .LVU3248
2036:src/display.c **** 			base = regX_idx;
 9999              		.loc 1 2036 11 is_stmt 0 view .LVU3249
 10000 085e 0A2F     		cmp	r7, #10
 10001 0860 00F0F881 		beq	.L1086
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10002              		.loc 1 2044 4 is_stmt 1 view .LVU3250
 10003              	.LVL1156:
2045:src/display.c **** 			set_status("FL.00-.15");
 10004              		.loc 1 2045 4 view .LVU3251
2046:src/display.c **** 		}
ARM GAS  /tmp/ccTlkAzC.s 			page 280


 10005              		.loc 1 2046 4 view .LVU3252
 10006 0864 5E48     		ldr	r0, .L1102+32
 10007 0866 4FF00A0A 		mov	r10, #10
 10008 086a FFF7FEFF 		bl	set_status
 10009              	.LVL1157:
2023:src/display.c **** 		int start = 0;
 10010              		.loc 1 2023 7 is_stmt 0 view .LVU3253
 10011 086e 5646     		mov	r6, r10
2024:src/display.c **** 		
 10012              		.loc 1 2024 7 view .LVU3254
 10013 0870 4FF0000B 		mov	fp, #0
2046:src/display.c **** 		}
 10014              		.loc 1 2046 4 view .LVU3255
 10015 0874 0222     		movs	r2, #2
 10016 0876 4FF00908 		mov	r8, #9
 10017              	.LVL1158:
2046:src/display.c **** 		}
 10018              		.loc 1 2046 4 view .LVU3256
 10019 087a 0720     		movs	r0, #7
2045:src/display.c **** 			set_status("FL.00-.15");
 10020              		.loc 1 2045 8 view .LVU3257
 10021 087c 4FF07F09 		mov	r9, #127
 10022              	.LVL1159:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10023              		.loc 1 2044 9 view .LVU3258
 10024 0880 7027     		movs	r7, #112
 10025              	.LVL1160:
 10026              	.L851:
2048:src/display.c **** 		set_decimal(j, DECIMAL_DOT, CNULL);
 10027              		.loc 1 2048 3 is_stmt 1 view .LVU3259
2049:src/display.c **** 		j += SEGS_PER_DIGIT;
 10028              		.loc 1 2049 3 view .LVU3260
 10029              	.LBB514:
 10030              	.LBI514:
 336:src/display.c **** 	if (res) {
 10031              		.loc 1 336 14 view .LVU3261
 10032              	.LBB515:
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10033              		.loc 1 337 2 view .LVU3262
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10034              		.loc 1 340 3 view .LVU3263
 10035 0882 0192     		str	r2, [sp, #4]
 10036 0884 FFF7FEFF 		bl	set_dot
 10037              	.LVL1161:
 341:src/display.c **** 			set_dot(posn+8);
 10038              		.loc 1 341 3 view .LVU3264
 10039              	.LBB516:
 10040              	.LBI516:
 336:src/display.c **** 	if (res) {
 10041              		.loc 1 336 14 view .LVU3265
 10042              	.LBB517:
 344:src/display.c **** #endif
 10043              		.loc 1 344 2 view .LVU3266
 344:src/display.c **** #endif
 10044              		.loc 1 344 35 is_stmt 0 view .LVU3267
 10045 0888 019A     		ldr	r2, [sp, #4]
 10046 088a 534B     		ldr	r3, .L1102+24
ARM GAS  /tmp/ccTlkAzC.s 			page 281


 10047 088c 2E21     		movs	r1, #46
 10048 088e 9954     		strb	r1, [r3, r2]
 347:src/display.c **** }
 10049              		.loc 1 347 2 is_stmt 1 view .LVU3268
 10050              	.LVL1162:
 347:src/display.c **** }
 10051              		.loc 1 347 2 is_stmt 0 view .LVU3269
 10052              	.LBE517:
 10053              	.LBE516:
 347:src/display.c **** }
 10054              		.loc 1 347 2 is_stmt 1 view .LVU3270
 347:src/display.c **** }
 10055              		.loc 1 347 2 is_stmt 0 view .LVU3271
 10056              	.LBE515:
 10057              	.LBE514:
2050:src/display.c **** 		for (i = start; i < group + start; i++) {
 10058              		.loc 1 2050 3 is_stmt 1 view .LVU3272
2051:src/display.c **** 			int k = i + base - start;
 10059              		.loc 1 2051 3 view .LVU3273
2051:src/display.c **** 			int k = i + base - start;
 10060              		.loc 1 2051 19 view .LVU3274
 10061 0890 CBEB4602 		rsb	r2, fp, r6, lsl #1
 10062 0894 D319     		adds	r3, r2, r7
 10063 0896 0293     		str	r3, [sp, #8]
 10064 0898 A7EB0B03 		sub	r3, r7, fp
 10065 089c CDE90335 		strd	r3, r5, [sp, #12]
 10066              	.LBB518:
 10067              	.LBB519:
 10068              	.LBB520:
 10069              	.LBB521:
 10070              	.LBB522:
 344:src/display.c **** #endif
 10071              		.loc 1 344 35 is_stmt 0 view .LVU3275
 10072 08a0 0191     		str	r1, [sp, #4]
 10073 08a2 3E44     		add	r6, r6, r7
 10074              	.LVL1163:
 10075              	.L856:
 344:src/display.c **** #endif
 10076              		.loc 1 344 35 view .LVU3276
 10077              	.LBE522:
 10078              	.LBE521:
 10079              	.LBE520:
 10080              	.LBE519:
2052:src/display.c **** 			int l = get_user_flag(k);
 10081              		.loc 1 2052 4 is_stmt 1 view .LVU3277
2053:src/display.c **** 			k += group;
 10082              		.loc 1 2053 4 view .LVU3278
2053:src/display.c **** 			k += group;
 10083              		.loc 1 2053 12 is_stmt 0 view .LVU3279
 10084 08a4 039B     		ldr	r3, [sp, #12]
 10085 08a6 03EB0B00 		add	r0, r3, fp
 10086 08aa FFF7FEFF 		bl	get_user_flag
 10087              	.LVL1164:
2055:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10088              		.loc 1 2055 7 view .LVU3280
 10089 08ae 4E45     		cmp	r6, r9
2053:src/display.c **** 			k += group;
ARM GAS  /tmp/ccTlkAzC.s 			page 282


 10090              		.loc 1 2053 12 view .LVU3281
 10091 08b0 0546     		mov	r5, r0
 10092              	.LVL1165:
2054:src/display.c **** 			if (end >= k) {
 10093              		.loc 1 2054 4 is_stmt 1 view .LVU3282
2055:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10094              		.loc 1 2055 4 view .LVU3283
2063:src/display.c **** 			if (i == 4) {
 10095              		.loc 1 2063 6 is_stmt 0 view .LVU3284
 10096 08b2 08F10907 		add	r7, r8, #9
2055:src/display.c **** 				l |= (get_user_flag(k) << 1);
 10097              		.loc 1 2055 7 view .LVU3285
 10098 08b6 3EDD     		ble	.L1087
 10099              	.LVL1166:
 10100              	.L853:
2061:src/display.c **** 			set_decimal(j, DECIMAL_DOT, CNULL);
 10101              		.loc 1 2061 4 is_stmt 1 view .LVU3286
 10102 08b8 2946     		mov	r1, r5
 10103 08ba 4046     		mov	r0, r8
 10104 08bc FFF7FEFF 		bl	set_dig
 10105              	.LVL1167:
2062:src/display.c **** 			j += SEGS_PER_DIGIT;
 10106              		.loc 1 2062 4 view .LVU3287
 10107              	.LBB532:
 10108              	.LBI519:
 336:src/display.c **** 	if (res) {
 10109              		.loc 1 336 14 view .LVU3288
 10110              	.LBB529:
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10111              		.loc 1 337 2 view .LVU3289
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10112              		.loc 1 340 3 view .LVU3290
 10113 08c0 08F10700 		add	r0, r8, #7
 10114 08c4 FFF7FEFF 		bl	set_dot
 10115              	.LVL1168:
 341:src/display.c **** 			set_dot(posn+8);
 10116              		.loc 1 341 3 view .LVU3291
 10117              	.LBB526:
 10118              	.LBI521:
 336:src/display.c **** 	if (res) {
 10119              		.loc 1 336 14 view .LVU3292
 10120              	.LBB523:
 344:src/display.c **** #endif
 10121              		.loc 1 344 2 view .LVU3293
 344:src/display.c **** #endif
 10122              		.loc 1 344 2 is_stmt 0 view .LVU3294
 10123              	.LBE523:
 10124              	.LBE526:
 10125              	.LBE529:
 10126              	.LBE532:
 10127              	.LBE518:
2051:src/display.c **** 			int k = i + base - start;
 10128              		.loc 1 2051 38 is_stmt 1 view .LVU3295
 10129              	.LBB543:
 10130              	.LBB533:
 10131              	.LBB530:
 10132              	.LBB527:
ARM GAS  /tmp/ccTlkAzC.s 			page 283


 10133              	.LBB524:
 344:src/display.c **** #endif
 10134              		.loc 1 344 27 is_stmt 0 view .LVU3296
 10135 08c8 464B     		ldr	r3, .L1102+36
 344:src/display.c **** #endif
 10136              		.loc 1 344 35 view .LVU3297
 10137 08ca 0199     		ldr	r1, [sp, #4]
 344:src/display.c **** #endif
 10138              		.loc 1 344 27 view .LVU3298
 10139 08cc A3FB0832 		umull	r3, r2, r3, r8
 10140 08d0 5208     		lsrs	r2, r2, #1
 344:src/display.c **** #endif
 10141              		.loc 1 344 35 view .LVU3299
 10142 08d2 414B     		ldr	r3, .L1102+24
 344:src/display.c **** #endif
 10143              		.loc 1 344 32 view .LVU3300
 10144 08d4 0132     		adds	r2, r2, #1
 10145              	.LBE524:
 10146              	.LBE527:
 10147              	.LBE530:
 10148              	.LBE533:
2064:src/display.c **** 				set_dig(j, 8);
 10149              		.loc 1 2064 7 view .LVU3301
 10150 08d6 BBF1040F 		cmp	fp, #4
 10151              	.LBB534:
 10152              	.LBB531:
 10153              	.LBB528:
 10154              	.LBB525:
 344:src/display.c **** #endif
 10155              		.loc 1 344 35 view .LVU3302
 10156 08da 03F81210 		strb	r1, [r3, r2, lsl #1]
 347:src/display.c **** }
 10157              		.loc 1 347 2 is_stmt 1 view .LVU3303
 10158              	.LVL1169:
 347:src/display.c **** }
 10159              		.loc 1 347 2 is_stmt 0 view .LVU3304
 10160              	.LBE525:
 10161              	.LBE528:
 347:src/display.c **** }
 10162              		.loc 1 347 2 is_stmt 1 view .LVU3305
 347:src/display.c **** }
 10163              		.loc 1 347 2 is_stmt 0 view .LVU3306
 10164              	.LBE531:
 10165              	.LBE534:
2063:src/display.c **** 			if (i == 4) {
 10166              		.loc 1 2063 4 is_stmt 1 view .LVU3307
2064:src/display.c **** 				set_dig(j, 8);
 10167              		.loc 1 2064 4 view .LVU3308
 10168              	.LBE543:
2051:src/display.c **** 			int k = i + base - start;
 10169              		.loc 1 2051 39 is_stmt 0 view .LVU3309
 10170 08de 0BF1010B 		add	fp, fp, #1
 10171              	.LVL1170:
2051:src/display.c **** 			int k = i + base - start;
 10172              		.loc 1 2051 19 is_stmt 1 view .LVU3310
 10173              	.LBB544:
2064:src/display.c **** 				set_dig(j, 8);
ARM GAS  /tmp/ccTlkAzC.s 			page 284


 10174              		.loc 1 2064 7 is_stmt 0 view .LVU3311
 10175 08e2 41D0     		beq	.L1088
2064:src/display.c **** 				set_dig(j, 8);
 10176              		.loc 1 2064 7 view .LVU3312
 10177              	.LBE544:
2051:src/display.c **** 			int k = i + base - start;
 10178              		.loc 1 2051 3 view .LVU3313
 10179 08e4 D345     		cmp	fp, r10
 10180 08e6 06F10106 		add	r6, r6, #1
 10181 08ea 01D0     		beq	.L1089
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10182              		.loc 1 2044 9 view .LVU3314
 10183 08ec B846     		mov	r8, r7
 10184 08ee D9E7     		b	.L856
 10185              	.L1089:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10186              		.loc 1 2044 9 view .LVU3315
 10187 08f0 049D     		ldr	r5, [sp, #16]
 10188              	.LVL1171:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10189              		.loc 1 2044 9 view .LVU3316
 10190 08f2 334F     		ldr	r7, .L1102
 10191              	.LVL1172:
 10192              	.L846:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10193              		.loc 1 2044 9 view .LVU3317
 10194              	.LBE513:
2072:src/display.c **** 	pc = state_pc();
 10195              		.loc 1 2072 2 is_stmt 1 view .LVU3318
2073:src/display.c **** 	if (isXROM(pc))
 10196              		.loc 1 2073 2 view .LVU3319
2073:src/display.c **** 	if (isXROM(pc))
 10197              		.loc 1 2073 5 is_stmt 0 view .LVU3320
 10198 08f4 B7F8E077 		ldrh	r7, [r7, #2016]
 10199              	.LVL1173:
2074:src/display.c **** 		pc = 1;
 10200              		.loc 1 2074 2 is_stmt 1 view .LVU3321
2074:src/display.c **** 		pc = 1;
 10201              		.loc 1 2074 6 is_stmt 0 view .LVU3322
 10202 08f8 BB0B     		lsrs	r3, r7, #14
2075:src/display.c **** 	for (n=i=0; i<4; i++) {
 10203              		.loc 1 2075 6 view .LVU3323
 10204 08fa 032B     		cmp	r3, #3
 10205 08fc 08BF     		it	eq
 10206 08fe 0127     		moveq	r7, #1
 10207              	.LVL1174:
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10208              		.loc 1 2076 2 is_stmt 1 view .LVU3324
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10209              		.loc 1 2076 14 view .LVU3325
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10210              		.loc 1 2076 8 is_stmt 0 view .LVU3326
 10211 0900 4FF00009 		mov	r9, #0
 10212 0904 6426     		movs	r6, #100
2072:src/display.c **** 	pc = state_pc();
 10213              		.loc 1 2072 4 view .LVU3327
 10214 0906 4FF06C08 		mov	r8, #108
ARM GAS  /tmp/ccTlkAzC.s 			page 285


 10215              	.LVL1175:
 10216              	.L860:
2077:src/display.c **** 			if (++n == 4) {
 10217              		.loc 1 2077 3 is_stmt 1 view .LVU3328
2077:src/display.c **** 			if (++n == 4) {
 10218              		.loc 1 2077 7 is_stmt 0 view .LVU3329
 10219 090a 0222     		movs	r2, #2
 10220 090c 3146     		mov	r1, r6
 10221 090e 3846     		mov	r0, r7
 10222 0910 FFF7FEFF 		bl	find_label_from
 10223              	.LVL1176:
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10224              		.loc 1 2078 4 is_stmt 1 view .LVU3330
2077:src/display.c **** 			if (++n == 4) {
 10225              		.loc 1 2077 6 is_stmt 0 view .LVU3331
 10226 0914 58B1     		cbz	r0, .L858
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10227              		.loc 1 2078 7 view .LVU3332
 10228 0916 09F10109 		add	r9, r9, #1
 10229              	.LVL1177:
2082:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10230              		.loc 1 2082 5 is_stmt 1 view .LVU3333
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10231              		.loc 1 2078 7 is_stmt 0 view .LVU3334
 10232 091a B9F1040F 		cmp	r9, #4
2082:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10233              		.loc 1 2082 5 view .LVU3335
 10234 091e A6F12301 		sub	r1, r6, #35
 10235 0922 4046     		mov	r0, r8
2078:src/display.c **** 				set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10236              		.loc 1 2078 7 view .LVU3336
 10237 0924 17D0     		beq	.L1090
2082:src/display.c **** 				j += SEGS_PER_EXP_DIGIT;
 10238              		.loc 1 2082 5 view .LVU3337
 10239 0926 FFF7FEFF 		bl	set_dig
 10240              	.LVL1178:
2083:src/display.c **** 			}
 10241              		.loc 1 2083 5 is_stmt 1 view .LVU3338
2083:src/display.c **** 			}
 10242              		.loc 1 2083 7 is_stmt 0 view .LVU3339
 10243 092a 08F10708 		add	r8, r8, #7
 10244              	.LVL1179:
 10245              	.L858:
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10246              		.loc 1 2076 19 is_stmt 1 view .LVU3340
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10247              		.loc 1 2076 14 view .LVU3341
 10248 092e 0136     		adds	r6, r6, #1
 10249              	.LVL1180:
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10250              		.loc 1 2076 2 is_stmt 0 view .LVU3342
 10251 0930 682E     		cmp	r6, #104
 10252 0932 EAD1     		bne	.L860
2076:src/display.c **** 		if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10253              		.loc 1 2076 2 view .LVU3343
 10254 0934 40E7     		b	.L1053
 10255              	.LVL1181:
ARM GAS  /tmp/ccTlkAzC.s 			page 286


 10256              	.L1087:
 10257              	.LBB547:
 10258              	.LBB545:
2056:src/display.c **** 				k += group;
 10259              		.loc 1 2056 5 is_stmt 1 view .LVU3344
2056:src/display.c **** 				k += group;
 10260              		.loc 1 2056 11 is_stmt 0 view .LVU3345
 10261 0936 3046     		mov	r0, r6
 10262              	.LVL1182:
2056:src/display.c **** 				k += group;
 10263              		.loc 1 2056 11 view .LVU3346
 10264 0938 FFF7FEFF 		bl	get_user_flag
 10265              	.LVL1183:
 10266 093c 029B     		ldr	r3, [sp, #8]
 10267 093e 03EB0B02 		add	r2, r3, fp
2058:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10268              		.loc 1 2058 8 view .LVU3347
 10269 0942 4A45     		cmp	r2, r9
2056:src/display.c **** 				k += group;
 10270              		.loc 1 2056 7 view .LVU3348
 10271 0944 45EA4005 		orr	r5, r5, r0, lsl #1
 10272              	.LVL1184:
2057:src/display.c **** 				if (end >= k)
 10273              		.loc 1 2057 5 is_stmt 1 view .LVU3349
2058:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10274              		.loc 1 2058 5 view .LVU3350
2058:src/display.c **** 					l |= (get_user_flag(k) << 2);
 10275              		.loc 1 2058 8 is_stmt 0 view .LVU3351
 10276 0948 B6DC     		bgt	.L853
2059:src/display.c **** 			}
 10277              		.loc 1 2059 6 is_stmt 1 view .LVU3352
2059:src/display.c **** 			}
 10278              		.loc 1 2059 12 is_stmt 0 view .LVU3353
 10279 094a 1046     		mov	r0, r2
 10280 094c FFF7FEFF 		bl	get_user_flag
 10281              	.LVL1185:
2059:src/display.c **** 			}
 10282              		.loc 1 2059 8 view .LVU3354
 10283 0950 45EA8005 		orr	r5, r5, r0, lsl #2
 10284              	.LVL1186:
2059:src/display.c **** 			}
 10285              		.loc 1 2059 8 view .LVU3355
 10286 0954 B0E7     		b	.L853
 10287              	.LVL1187:
 10288              	.L1090:
2059:src/display.c **** 			}
 10289              		.loc 1 2059 8 view .LVU3356
 10290              	.LBE545:
 10291              	.LBE547:
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10292              		.loc 1 2079 5 is_stmt 1 view .LVU3357
 10293 0956 4C21     		movs	r1, #76
 10294 0958 7320     		movs	r0, #115
 10295              	.LVL1188:
2079:src/display.c **** 				set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10296              		.loc 1 2079 5 is_stmt 0 view .LVU3358
 10297 095a FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccTlkAzC.s 			page 287


 10298              	.LVL1189:
2080:src/display.c **** 			} else {
 10299              		.loc 1 2080 5 is_stmt 1 view .LVU3359
 10300 095e 4C21     		movs	r1, #76
 10301 0960 7A20     		movs	r0, #122
 10302 0962 FFF7FEFF 		bl	set_dig
 10303              	.LVL1190:
 10304 0966 E2E7     		b	.L858
 10305              	.LVL1191:
 10306              	.L1088:
 10307              	.LBB548:
 10308              	.LBB546:
2065:src/display.c **** 				set_decimal(j, DECIMAL_DOT, CNULL);
 10309              		.loc 1 2065 5 view .LVU3360
 10310 0968 0821     		movs	r1, #8
 10311 096a 3846     		mov	r0, r7
 10312 096c FFF7FEFF 		bl	set_dig
 10313              	.LVL1192:
2066:src/display.c **** 				j += SEGS_PER_DIGIT;
 10314              		.loc 1 2066 5 view .LVU3361
 10315              	.LBB535:
 10316              	.LBI535:
 336:src/display.c **** 	if (res) {
 10317              		.loc 1 336 14 view .LVU3362
 10318              	.LBB536:
 337:src/display.c **** 		*res++ = (decimal == DECIMAL_DOT)?'.':',';
 10319              		.loc 1 337 2 view .LVU3363
 340:src/display.c **** 		if (decimal != DECIMAL_DOT)
 10320              		.loc 1 340 3 view .LVU3364
 10321 0970 08F11000 		add	r0, r8, #16
 10322 0974 FFF7FEFF 		bl	set_dot
 10323              	.LVL1193:
 341:src/display.c **** 			set_dot(posn+8);
 10324              		.loc 1 341 3 view .LVU3365
 10325              	.LBB537:
 10326              	.LBI537:
 336:src/display.c **** 	if (res) {
 10327              		.loc 1 336 14 view .LVU3366
 10328              	.LBB538:
 344:src/display.c **** #endif
 10329              		.loc 1 344 2 view .LVU3367
 344:src/display.c **** #endif
 10330              		.loc 1 344 27 is_stmt 0 view .LVU3368
 10331 0978 1A4B     		ldr	r3, .L1102+36
 344:src/display.c **** #endif
 10332              		.loc 1 344 35 view .LVU3369
 10333 097a 0199     		ldr	r1, [sp, #4]
 344:src/display.c **** #endif
 10334              		.loc 1 344 27 view .LVU3370
 10335 097c A3FB0723 		umull	r2, r3, r3, r7
 10336 0980 5B08     		lsrs	r3, r3, #1
 344:src/display.c **** #endif
 10337              		.loc 1 344 35 view .LVU3371
 10338 0982 154A     		ldr	r2, .L1102+24
 344:src/display.c **** #endif
 10339              		.loc 1 344 32 view .LVU3372
 10340 0984 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccTlkAzC.s 			page 288


 10341              	.LBE538:
 10342              	.LBE537:
 10343              	.LBE536:
 10344              	.LBE535:
2067:src/display.c **** 			}
 10345              		.loc 1 2067 7 view .LVU3373
 10346 0986 08F11207 		add	r7, r8, #18
 10347              	.LVL1194:
 10348              	.LBB542:
 10349              	.LBB541:
 10350              	.LBB540:
 10351              	.LBB539:
 344:src/display.c **** #endif
 10352              		.loc 1 344 35 view .LVU3374
 10353 098a 02F81310 		strb	r1, [r2, r3, lsl #1]
 347:src/display.c **** }
 10354              		.loc 1 347 2 is_stmt 1 view .LVU3375
 10355              	.LVL1195:
 347:src/display.c **** }
 10356              		.loc 1 347 2 is_stmt 0 view .LVU3376
 10357              	.LBE539:
 10358              	.LBE540:
 347:src/display.c **** }
 10359              		.loc 1 347 2 is_stmt 1 view .LVU3377
 347:src/display.c **** }
 10360              		.loc 1 347 2 is_stmt 0 view .LVU3378
 10361              	.LBE541:
 10362              	.LBE542:
2067:src/display.c **** 			}
 10363              		.loc 1 2067 5 is_stmt 1 view .LVU3379
2067:src/display.c **** 			}
 10364              		.loc 1 2067 5 is_stmt 0 view .LVU3380
 10365              	.LBE546:
2051:src/display.c **** 			int k = i + base - start;
 10366              		.loc 1 2051 38 is_stmt 1 view .LVU3381
2051:src/display.c **** 			int k = i + base - start;
 10367              		.loc 1 2051 19 view .LVU3382
 10368 098e 0136     		adds	r6, r6, #1
2051:src/display.c **** 			int k = i + base - start;
 10369              		.loc 1 2051 39 is_stmt 0 view .LVU3383
 10370 0990 4FF0050B 		mov	fp, #5
 10371              	.LVL1196:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10372              		.loc 1 2044 9 view .LVU3384
 10373 0994 B846     		mov	r8, r7
 10374 0996 85E7     		b	.L856
 10375              	.LVL1197:
 10376              	.L828:
2044:src/display.c **** 			end = LOCAL_FLAG_BASE + 15;
 10377              		.loc 1 2044 9 view .LVU3385
 10378              	.LBE548:
 10379              	.LBE512:
 10380              	.LBE511:
2313:src/display.c **** 			}
 10381              		.loc 1 2313 6 is_stmt 1 view .LVU3386
2313:src/display.c **** 			}
 10382              		.loc 1 2313 11 is_stmt 0 view .LVU3387
ARM GAS  /tmp/ccTlkAzC.s 			page 289


 10383 0998 2189     		ldrh	r1, [r4, #8]
 10384 099a FFF7FEFF 		bl	num_arg_0
 10385              	.LVL1198:
2313:src/display.c **** 			}
 10386              		.loc 1 2313 11 view .LVU3388
 10387 099e 34E6     		b	.L827
 10388              	.LVL1199:
 10389              	.L878:
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10390              		.loc 1 2400 10 is_stmt 1 view .LVU3389
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10391              		.loc 1 2400 14 is_stmt 0 view .LVU3390
 10392 09a0 DFF84480 		ldr	r8, .L1102+40
 10393              	.LVL1200:
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10394              		.loc 1 2400 14 view .LVU3391
 10395 09a4 B8F90030 		ldrsh	r3, [r8]
2400:src/display.c **** 			set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 10396              		.loc 1 2400 13 view .LVU3392
 10397 09a8 002B     		cmp	r3, #0
 10398 09aa 40F00E81 		bne	.L1091
2402:src/display.c **** #if 0
 10399              		.loc 1 2402 10 is_stmt 1 view .LVU3393
2402:src/display.c **** #if 0
 10400              		.loc 1 2402 13 is_stmt 0 view .LVU3394
 10401 09ae 0907     		lsls	r1, r1, #28
 10402 09b0 00F1D680 		bmi	.L1092
 10403              	.LVL1201:
2456:src/display.c **** nostk:	show_flags();
 10404              		.loc 1 2456 2 is_stmt 1 view .LVU3395
 10405 09b4 FFF7FEFF 		bl	show_stack
 10406              	.LVL1202:
2457:src/display.c **** 	if (!skip) {
 10407              		.loc 1 2457 8 view .LVU3396
2426:src/display.c **** 		}
 10408              		.loc 1 2426 10 is_stmt 0 view .LVU3397
 10409 09b8 0125     		movs	r5, #1
2457:src/display.c **** 	if (!skip) {
 10410              		.loc 1 2457 8 view .LVU3398
 10411 09ba FFF7FEFF 		bl	show_flags
 10412              	.LVL1203:
2458:src/display.c **** 		if (State2.runmode) {
 10413              		.loc 1 2458 2 is_stmt 1 view .LVU3399
 10414 09be 45E4     		b	.L816
 10415              	.L1103:
 10416              		.align	2
 10417              	.L1102:
 10418 09c0 00000000 		.word	PersistentRam
 10419 09c4 3C000000 		.word	.LC29
 10420 09c8 00000000 		.word	StackBase
 10421 09cc 00000000 		.word	DispMsg
 10422 09d0 00000000 		.word	multicmds
 10423 09d4 00000000 		.word	.LANCHOR22
 10424 09d8 00000000 		.word	LastDisplayedNumber
 10425 09dc 98000000 		.word	.LC39
 10426 09e0 8C000000 		.word	.LC38
 10427 09e4 398EE338 		.word	954437177
ARM GAS  /tmp/ccTlkAzC.s 			page 290


 10428 09e8 00000000 		.word	DispPlot
 10429 09ec 00000000 		.word	ShowRegister
 10430 09f0 00000000 		.word	.LANCHOR21
 10431              	.LVL1204:
 10432              	.L877:
2432:src/display.c **** 		if (i > 0)
 10433              		.loc 1 2432 3 view .LVU3400
2432:src/display.c **** 		if (i > 0)
 10434              		.loc 1 2432 7 is_stmt 0 view .LVU3401
 10435 09f4 C14B     		ldr	r3, .L1104
 10436 09f6 B3F8E007 		ldrh	r0, [r3, #2016]
 10437              	.LVL1205:
2433:src/display.c **** 			set_status(prt(getprog(i), buf));
 10438              		.loc 1 2433 3 is_stmt 1 view .LVU3402
2433:src/display.c **** 			set_status(prt(getprog(i), buf));
 10439              		.loc 1 2433 6 is_stmt 0 view .LVU3403
 10440 09fa 0028     		cmp	r0, #0
 10441 09fc 71D0     		beq	.L888
2434:src/display.c **** 		else
 10442              		.loc 1 2434 4 is_stmt 1 view .LVU3404
 10443 09fe FFF7FEFF 		bl	getprog
 10444              	.LVL1206:
2434:src/display.c **** 		else
 10445              		.loc 1 2434 4 is_stmt 0 view .LVU3405
 10446 0a02 1EA9     		add	r1, sp, #120
 10447 0a04 FFF7FEFF 		bl	prt
 10448              	.LVL1207:
 10449 0a08 FFF7FEFF 		bl	set_status
 10450              	.LVL1208:
 10451              	.L889:
2437:src/display.c **** #if 0
 10452              		.loc 1 2437 3 is_stmt 1 view .LVU3406
 10453 0a0c 8920     		movs	r0, #137
 10454 0a0e FFF7FEFF 		bl	set_dot
 10455              	.LVL1209:
2452:src/display.c **** 			annuc = 1;
 10456              		.loc 1 2452 3 view .LVU3407
2452:src/display.c **** 			annuc = 1;
 10457              		.loc 1 2452 7 is_stmt 0 view .LVU3408
 10458 0a12 FFF7FEFF 		bl	cur_shift
 10459              	.LVL1210:
2452:src/display.c **** 			annuc = 1;
 10460              		.loc 1 2452 46 view .LVU3409
 10461 0a16 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10462 0a18 03F00603 		and	r3, r3, #6
 10463 0a1c 1843     		orrs	r0, r0, r3
 10464 0a1e 10F0FF0F 		tst	r0, #255
 10465 0a22 45D1     		bne	.L890
2457:src/display.c **** 	if (!skip) {
 10466              		.loc 1 2457 8 is_stmt 1 view .LVU3410
 10467 0a24 FFF7FEFF 		bl	show_flags
 10468              	.LVL1211:
2458:src/display.c **** 		if (State2.runmode) {
 10469              		.loc 1 2458 2 view .LVU3411
 10470 0a28 B54E     		ldr	r6, .L1104+4
 10471 0a2a DFF80C83 		ldr	r8, .L1104+60
 10472              	.LVL1212:
ARM GAS  /tmp/ccTlkAzC.s 			page 291


2458:src/display.c **** 		if (State2.runmode) {
 10473              		.loc 1 2458 2 is_stmt 0 view .LVU3412
 10474 0a2e 0DE4     		b	.L816
 10475              	.LVL1213:
 10476              	.L1070:
2388:src/display.c **** 		skip = 1;
 10477              		.loc 1 2388 3 is_stmt 1 view .LVU3413
 10478              	.LBB552:
 10479              	.LBI552:
2122:src/display.c **** 	char buf[16], *bp;
 10480              		.loc 1 2122 13 view .LVU3414
 10481              	.LBB553:
2123:src/display.c **** 	int n = State2.digval;
 10482              		.loc 1 2123 2 view .LVU3415
2124:src/display.c **** 	
 10483              		.loc 1 2124 2 view .LVU3416
2124:src/display.c **** 	
 10484              		.loc 1 2124 6 is_stmt 0 view .LVU3417
 10485 0a30 B4F80880 		ldrh	r8, [r4, #8]
 10486              	.LVL1214:
2131:src/display.c **** 			n;
 10487              		.loc 1 2131 2 is_stmt 1 view .LVU3418
2131:src/display.c **** 			n;
 10488              		.loc 1 2131 54 is_stmt 0 view .LVU3419
 10489 0a34 CA07     		lsls	r2, r1, #31
 10490 0a36 4CBF     		ite	mi
 10491 0a38 08F17007 		addmi	r7, r8, #112
2124:src/display.c **** 	
 10492              		.loc 1 2124 6 view .LVU3420
 10493 0a3c 4746     		movpl	r7, r8
 10494              	.LVL1215:
2135:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10495              		.loc 1 2135 2 is_stmt 1 view .LVU3421
2135:src/display.c **** 		set_status(alpha_rcl_s(reg, buf));
 10496              		.loc 1 2135 5 is_stmt 0 view .LVU3422
 10497 0a3e 11F00401 		ands	r1, r1, #4
 10498 0a42 19D0     		beq	.L868
2136:src/display.c **** 	}
 10499              		.loc 1 2136 3 is_stmt 1 view .LVU3423
2136:src/display.c **** 	}
 10500              		.loc 1 2136 14 is_stmt 0 view .LVU3424
 10501 0a44 15A9     		add	r1, sp, #84
 10502 0a46 3846     		mov	r0, r7
 10503 0a48 FFF7FEFF 		bl	alpha_rcl_s
 10504              	.LVL1216:
2136:src/display.c **** 	}
 10505              		.loc 1 2136 3 view .LVU3425
 10506 0a4c FFF7FEFF 		bl	set_status
 10507              	.LVL1217:
 10508              	.L869:
2158:src/display.c **** }
 10509              		.loc 1 2158 2 is_stmt 1 view .LVU3426
 10510 0a50 3846     		mov	r0, r7
 10511 0a52 0021     		movs	r1, #0
 10512 0a54 FFF7FEFF 		bl	format_reg
 10513              	.LVL1218:
 10514              	.LBE553:
ARM GAS  /tmp/ccTlkAzC.s 			page 292


 10515              	.LBE552:
2389:src/display.c **** 		if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10516              		.loc 1 2389 3 view .LVU3427
2390:src/display.c **** 			annunciators();
 10517              		.loc 1 2390 3 view .LVU3428
2390:src/display.c **** 			annunciators();
 10518              		.loc 1 2390 6 is_stmt 0 view .LVU3429
 10519 0a58 BAF1000F 		cmp	r10, #0
 10520 0a5c 09D1     		bne	.L875
2390:src/display.c **** 			annunciators();
 10521              		.loc 1 2390 24 discriminator 1 view .LVU3430
 10522 0a5e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10523 0a60 012B     		cmp	r3, #1
 10524 0a62 7FF4A9AE 		bne	.L1053
2390:src/display.c **** 			annunciators();
 10525              		.loc 1 2390 55 discriminator 2 view .LVU3431
 10526 0a66 A54B     		ldr	r3, .L1104
 10527 0a68 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10528 0a6c DE07     		lsls	r6, r3, #31
 10529 0a6e 7FF5A3AE 		bpl	.L1053
 10530              	.L875:
2391:src/display.c **** 		}
 10531              		.loc 1 2391 4 is_stmt 1 view .LVU3432
 10532 0a72 FFF7FEFF 		bl	annunciators
 10533              	.LVL1219:
2456:src/display.c **** nostk:	show_flags();
 10534              		.loc 1 2456 2 view .LVU3433
 10535 0a76 9FE6     		b	.L1053
 10536              	.LVL1220:
 10537              	.L868:
 10538              	.LBB556:
 10539              	.LBB554:
2139:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 10540              		.loc 1 2139 3 view .LVU3434
 10541 0a78 15AE     		add	r6, sp, #84
 10542 0a7a 1022     		movs	r2, #16
 10543 0a7c 3046     		mov	r0, r6
 10544 0a7e FFF7FEFF 		bl	xset
 10545              	.LVL1221:
2143:src/display.c **** #endif
 10546              		.loc 1 2143 3 view .LVU3435
2143:src/display.c **** #endif
 10547              		.loc 1 2143 8 is_stmt 0 view .LVU3436
 10548 0a82 A049     		ldr	r1, .L1104+8
 10549 0a84 3046     		mov	r0, r6
 10550 0a86 FFF7FEFF 		bl	scopy_spc
 10551              	.LVL1222:
2145:src/display.c **** 			*bp++ = '.';
 10552              		.loc 1 2145 7 view .LVU3437
 10553 0a8a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 10554              	.LVL1223:
2145:src/display.c **** 			*bp++ = '.';
 10555              		.loc 1 2145 3 is_stmt 1 view .LVU3438
2145:src/display.c **** 			*bp++ = '.';
 10556              		.loc 1 2145 6 is_stmt 0 view .LVU3439
 10557 0a8c DB07     		lsls	r3, r3, #31
 10558 0a8e 40F1D780 		bpl	.L870
ARM GAS  /tmp/ccTlkAzC.s 			page 293


2146:src/display.c **** 			if (n >= 100) {
 10559              		.loc 1 2146 4 is_stmt 1 view .LVU3440
 10560              	.LVL1224:
2146:src/display.c **** 			if (n >= 100) {
 10561              		.loc 1 2146 10 is_stmt 0 view .LVU3441
 10562 0a92 2E23     		movs	r3, #46
2147:src/display.c **** 				*bp++ = '1';
 10563              		.loc 1 2147 7 view .LVU3442
 10564 0a94 B8F1630F 		cmp	r8, #99
2146:src/display.c **** 			if (n >= 100) {
 10565              		.loc 1 2146 10 view .LVU3443
 10566 0a98 0370     		strb	r3, [r0]
2147:src/display.c **** 				*bp++ = '1';
 10567              		.loc 1 2147 4 is_stmt 1 view .LVU3444
2147:src/display.c **** 				*bp++ = '1';
 10568              		.loc 1 2147 7 is_stmt 0 view .LVU3445
 10569 0a9a 00F3CC80 		bgt	.L871
2146:src/display.c **** 			if (n >= 100) {
 10570              		.loc 1 2146 7 view .LVU3446
 10571 0a9e 0130     		adds	r0, r0, #1
 10572              	.LVL1225:
 10573              	.L872:
2153:src/display.c **** 		else
 10574              		.loc 1 2153 4 is_stmt 1 view .LVU3447
2153:src/display.c **** 		else
 10575              		.loc 1 2153 9 is_stmt 0 view .LVU3448
 10576 0aa0 4146     		mov	r1, r8
 10577 0aa2 0222     		movs	r2, #2
 10578 0aa4 FFF7FEFF 		bl	num_arg_0
 10579              	.LVL1226:
 10580              	.L874:
2156:src/display.c **** 	}
 10581              		.loc 1 2156 3 is_stmt 1 view .LVU3449
 10582 0aa8 3046     		mov	r0, r6
 10583 0aaa FFF7FEFF 		bl	set_status
 10584              	.LVL1227:
 10585 0aae CFE7     		b	.L869
 10586              	.LVL1228:
 10587              	.L890:
2156:src/display.c **** 	}
 10588              		.loc 1 2156 3 is_stmt 0 view .LVU3450
 10589              	.LBE554:
 10590              	.LBE556:
2453:src/display.c **** 		goto nostk;
 10591              		.loc 1 2453 4 is_stmt 1 view .LVU3451
2457:src/display.c **** 	if (!skip) {
 10592              		.loc 1 2457 8 view .LVU3452
 10593 0ab0 FFF7FEFF 		bl	show_flags
 10594              	.LVL1229:
2458:src/display.c **** 		if (State2.runmode) {
 10595              		.loc 1 2458 2 view .LVU3453
 10596 0ab4 924E     		ldr	r6, .L1104+4
 10597 0ab6 DFF88082 		ldr	r8, .L1104+60
 10598              	.LVL1230:
2453:src/display.c **** 		goto nostk;
 10599              		.loc 1 2453 10 is_stmt 0 view .LVU3454
 10600 0aba 0125     		movs	r5, #1
ARM GAS  /tmp/ccTlkAzC.s 			page 294


 10601 0abc FFF7C6BB 		b	.L816
 10602              	.LVL1231:
 10603              	.L1077:
 10604              	.LBB557:
 10605              	.LBB478:
 10606              	.LBB471:
 936:src/display.c **** 					p++;
 10607              		.loc 1 936 6 is_stmt 1 view .LVU3455
 937:src/display.c **** 					if (!double_dot)
 10608              		.loc 1 937 6 view .LVU3456
 937:src/display.c **** 					if (!double_dot)
 10609              		.loc 1 937 7 is_stmt 0 view .LVU3457
 10610 0ac0 0AF1010A 		add	r10, r10, #1
 10611              	.LVL1232:
 938:src/display.c **** 						i = 2*SEGS_PER_DIGIT;
 10612              		.loc 1 938 6 is_stmt 1 view .LVU3458
 939:src/display.c **** 				}
 10613              		.loc 1 939 7 view .LVU3459
 939:src/display.c **** 				}
 10614              		.loc 1 939 9 is_stmt 0 view .LVU3460
 10615 0ac4 4FF0120B 		mov	fp, #18
 10616 0ac8 7DE6     		b	.L910
 10617              	.LVL1233:
 10618              	.L834:
 939:src/display.c **** 				}
 10619              		.loc 1 939 9 view .LVU3461
 10620              	.LBE471:
 10621              	.LBE478:
 10622              	.LBE557:
 10623              	.LBB558:
2338:src/display.c **** 			else
 10624              		.loc 1 2338 5 is_stmt 1 view .LVU3462
 10625 0aca 0021     		movs	r1, #0
 10626 0acc 8E48     		ldr	r0, .L1104+12
 10627 0ace FFF7FEFF 		bl	set_digits_string
 10628              	.LVL1234:
2372:src/display.c **** 	} else if (State2.multi) {
 10629              		.loc 1 2372 3 view .LVU3463
 10630 0ad2 1EA8     		add	r0, sp, #120
 10631 0ad4 FFF7FEFF 		bl	set_status
 10632              	.LVL1235:
2372:src/display.c **** 	} else if (State2.multi) {
 10633              		.loc 1 2372 3 is_stmt 0 view .LVU3464
 10634              	.LBE558:
2456:src/display.c **** nostk:	show_flags();
 10635              		.loc 1 2456 2 is_stmt 1 view .LVU3465
 10636 0ad8 FFF7FEFF 		bl	show_stack
 10637              	.LVL1236:
2457:src/display.c **** 	if (!skip) {
 10638              		.loc 1 2457 8 view .LVU3466
 10639 0adc FFF7FEFF 		bl	show_flags
 10640              	.LVL1237:
2458:src/display.c **** 		if (State2.runmode) {
 10641              		.loc 1 2458 2 view .LVU3467
 10642 0ae0 21E6     		b	.L836
 10643              	.LVL1238:
 10644              	.L888:
ARM GAS  /tmp/ccTlkAzC.s 			page 295


2436:src/display.c **** 		set_dot(STO_annun);
 10645              		.loc 1 2436 4 view .LVU3468
 10646 0ae2 8A48     		ldr	r0, .L1104+16
 10647              	.LVL1239:
2436:src/display.c **** 		set_dot(STO_annun);
 10648              		.loc 1 2436 4 is_stmt 0 view .LVU3469
 10649 0ae4 FFF7FEFF 		bl	set_status
 10650              	.LVL1240:
2436:src/display.c **** 		set_dot(STO_annun);
 10651              		.loc 1 2436 4 view .LVU3470
 10652 0ae8 90E7     		b	.L889
 10653              	.LVL1241:
 10654              	.L1082:
 10655              	.LBB559:
 10656              	.LBB496:
2344:src/display.c **** 				decimal64 z;
 10657              		.loc 1 2344 5 is_stmt 1 view .LVU3471
2345:src/display.c **** 
 10658              		.loc 1 2345 5 view .LVU3472
2347:src/display.c **** 				if (opKIND(op) == KIND_MON) {
 10659              		.loc 1 2347 5 view .LVU3473
 10660 0aea 0CA8     		add	r0, sp, #48
 10661 0aec FFF7FEFF 		bl	getX
 10662              	.LVL1242:
2348:src/display.c **** 					const unsigned int f = argKIND(op);
 10663              		.loc 1 2348 5 view .LVU3474
2348:src/display.c **** 					const unsigned int f = argKIND(op);
 10664              		.loc 1 2348 8 is_stmt 0 view .LVU3475
 10665 0af0 CAF30723 		ubfx	r3, r10, #8, #8
 10666 0af4 022B     		cmp	r3, #2
 10667 0af6 2BD1     		bne	.L839
 10668              	.LBB492:
2349:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10669              		.loc 1 2349 6 is_stmt 1 view .LVU3476
2349:src/display.c **** 					if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 10670              		.loc 1 2349 25 is_stmt 0 view .LVU3477
 10671 0af8 5FFA8AFA 		uxtb	r10, r10
 10672              	.LVL1243:
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10673              		.loc 1 2350 6 is_stmt 1 view .LVU3478
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10674              		.loc 1 2350 9 is_stmt 0 view .LVU3479
 10675 0afc BAF1980F 		cmp	r10, #152
 10676              	.LBB493:
2353:src/display.c **** 					}
 10677              		.loc 1 2353 7 view .LVU3480
 10678 0b00 15AE     		add	r6, sp, #84
 10679              	.LBE493:
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10680              		.loc 1 2350 9 view .LVU3481
 10681 0b02 21D8     		bhi	.L840
2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10682              		.loc 1 2350 31 discriminator 1 view .LVU3482
 10683 0b04 1823     		movs	r3, #24
 10684 0b06 824A     		ldr	r2, .L1104+20
 10685 0b08 03FB0AF3 		mul	r3, r3, r10
 10686 0b0c D358     		ldr	r3, [r2, r3]
ARM GAS  /tmp/ccTlkAzC.s 			page 296


2350:src/display.c **** 						FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 10687              		.loc 1 2350 26 discriminator 1 view .LVU3483
 10688 0b0e DBB1     		cbz	r3, .L840
 10689              	.LBB494:
2351:src/display.c **** 						update_speed(0);
 10690              		.loc 1 2351 7 is_stmt 1 view .LVU3484
 10691              	.LVL1244:
2352:src/display.c **** 						fp(&r, &x);
 10692              		.loc 1 2352 22 view .LVU3485
2353:src/display.c **** 					}
 10693              		.loc 1 2353 7 view .LVU3486
 10694 0b10 0CA9     		add	r1, sp, #48
 10695 0b12 3046     		mov	r0, r6
 10696 0b14 9847     		blx	r3
 10697              	.LVL1245:
 10698              	.L841:
2353:src/display.c **** 					}
 10699              		.loc 1 2353 7 is_stmt 0 view .LVU3487
 10700              	.LBE494:
 10701              	.LBE492:
2359:src/display.c **** 				packed_from_number(&z, &r);
 10702              		.loc 1 2359 5 is_stmt 1 discriminator 1 view .LVU3488
 10703 0b16 7F4A     		ldr	r2, .L1104+24
 10704 0b18 3146     		mov	r1, r6
 10705 0b1a 3046     		mov	r0, r6
 10706 0b1c FFF7FEFF 		bl	decNumberNormalize
 10707              	.LVL1246:
2360:src/display.c **** 				set_x((REGISTER *)&z, CNULL, 0);
 10708              		.loc 1 2360 5 discriminator 1 view .LVU3489
 10709 0b20 06A8     		add	r0, sp, #24
 10710 0b22 3146     		mov	r1, r6
 10711 0b24 FFF7FEFF 		bl	packed_from_number
 10712              	.LVL1247:
2361:src/display.c **** 				skip = 1;
 10713              		.loc 1 2361 5 discriminator 1 view .LVU3490
 10714 0b28 0022     		movs	r2, #0
 10715 0b2a 06A8     		add	r0, sp, #24
 10716 0b2c 3EE6     		b	.L1052
 10717              	.LVL1248:
 10718              	.L865:
2361:src/display.c **** 				skip = 1;
 10719              		.loc 1 2361 5 is_stmt 0 discriminator 1 view .LVU3491
 10720              	.LBE496:
 10721              	.LBE559:
 10722              	.LBB560:
 10723              	.LBB510:
2112:src/display.c **** #ifndef REALBUILD
 10724              		.loc 1 2112 5 is_stmt 1 view .LVU3492
2112:src/display.c **** #ifndef REALBUILD
 10725              		.loc 1 2112 34 is_stmt 0 view .LVU3493
 10726 0b2e 06EB8600 		add	r0, r6, r6, lsl #2
2112:src/display.c **** #ifndef REALBUILD
 10727              		.loc 1 2112 5 view .LVU3494
 10728 0b32 4044     		add	r0, r0, r8
 10729 0b34 0021     		movs	r1, #0
 10730 0b36 FFF7FEFF 		bl	set_exp_digits_string
 10731              	.LVL1249:
ARM GAS  /tmp/ccTlkAzC.s 			page 297


2114:src/display.c **** #endif
 10732              		.loc 1 2114 5 is_stmt 1 view .LVU3495
2114:src/display.c **** #endif
 10733              		.loc 1 2114 44 is_stmt 0 view .LVU3496
 10734 0b3a 0A21     		movs	r1, #10
2114:src/display.c **** #endif
 10735              		.loc 1 2114 5 view .LVU3497
 10736 0b3c 01FB0671 		mla	r1, r1, r6, r7
 10737 0b40 7548     		ldr	r0, .L1104+28
 10738 0b42 FFF7FEFF 		bl	scopy
 10739              	.LVL1250:
2114:src/display.c **** #endif
 10740              		.loc 1 2114 5 view .LVU3498
 10741              	.LBE510:
 10742              	.LBE560:
2456:src/display.c **** nostk:	show_flags();
 10743              		.loc 1 2456 2 is_stmt 1 view .LVU3499
 10744 0b46 37E6     		b	.L1053
 10745              	.LVL1251:
 10746              	.L840:
 10747              	.LBB561:
 10748              	.LBB497:
 10749              	.LBB495:
2356:src/display.c **** 				} else
 10750              		.loc 1 2356 7 view .LVU3500
 10751 0b48 3046     		mov	r0, r6
 10752 0b4a FFF7FEFF 		bl	set_NaN
 10753              	.LVL1252:
 10754 0b4e E2E7     		b	.L841
 10755              	.LVL1253:
 10756              	.L839:
2356:src/display.c **** 				} else
 10757              		.loc 1 2356 7 is_stmt 0 view .LVU3501
 10758              	.LBE495:
2358:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10759              		.loc 1 2358 6 is_stmt 1 view .LVU3502
 10760 0b50 15AE     		add	r6, sp, #84
 10761 0b52 0CAA     		add	r2, sp, #48
 10762 0b54 0AF07F01 		and	r1, r10, #127
 10763 0b58 3046     		mov	r0, r6
 10764 0b5a FFF7FEFF 		bl	do_conv
 10765              	.LVL1254:
 10766 0b5e DAE7     		b	.L841
 10767              	.LVL1255:
 10768              	.L1092:
2358:src/display.c **** 				decNumberNormalize(&r, &r, &Ctx);
 10769              		.loc 1 2358 6 is_stmt 0 view .LVU3503
 10770              	.LBE497:
 10771              	.LBE561:
2406:src/display.c **** 			j = State2.alpha_pos;
 10772              		.loc 1 2406 4 is_stmt 1 view .LVU3504
2406:src/display.c **** 			j = State2.alpha_pos;
 10773              		.loc 1 2406 9 is_stmt 0 view .LVU3505
 10774 0b60 6E49     		ldr	r1, .L1104+32
 10775 0b62 0193     		str	r3, [sp, #4]
 10776 0b64 1EA8     		add	r0, sp, #120
 10777 0b66 FFF7FEFF 		bl	scopy
ARM GAS  /tmp/ccTlkAzC.s 			page 298


 10778              	.LVL1256:
2407:src/display.c **** 			if (j != 0) {
 10779              		.loc 1 2407 14 view .LVU3506
 10780 0b6a 94F80DB0 		ldrb	fp, [r4, #13]	@ zero_extendqisi2
 10781              	.LVL1257:
2407:src/display.c **** 			if (j != 0) {
 10782              		.loc 1 2407 4 is_stmt 1 view .LVU3507
2408:src/display.c **** 				i = slen(buf);
 10783              		.loc 1 2408 4 view .LVU3508
2408:src/display.c **** 				i = slen(buf);
 10784              		.loc 1 2408 7 is_stmt 0 view .LVU3509
 10785 0b6e BBF1000F 		cmp	fp, #0
 10786 0b72 12D1     		bne	.L1093
2419:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10787              		.loc 1 2419 5 is_stmt 1 view .LVU3510
2419:src/display.c **** 					*bp++ = 021 + shift - SHIFT_F;
 10788              		.loc 1 2419 8 is_stmt 0 view .LVU3511
 10789 0b74 BAF1000F 		cmp	r10, #0
 10790 0b78 05D0     		beq	.L887
2420:src/display.c **** 					*bp++ = '\0';
 10791              		.loc 1 2420 6 is_stmt 1 view .LVU3512
 10792              	.LVL1258:
2420:src/display.c **** 					*bp++ = '\0';
 10793              		.loc 1 2420 26 is_stmt 0 view .LVU3513
 10794 0b7a 0AF1100A 		add	r10, r10, #16
2420:src/display.c **** 					*bp++ = '\0';
 10795              		.loc 1 2420 12 view .LVU3514
 10796 0b7e 80F800A0 		strb	r10, [r0]
2421:src/display.c **** 				}
 10797              		.loc 1 2421 6 is_stmt 1 view .LVU3515
 10798              	.LVL1259:
2421:src/display.c **** 				}
 10799              		.loc 1 2421 12 is_stmt 0 view .LVU3516
 10800 0b82 80F801B0 		strb	fp, [r0, #1]
 10801              	.LVL1260:
 10802              	.L887:
2423:src/display.c **** 			}
 10803              		.loc 1 2423 5 is_stmt 1 view .LVU3517
 10804 0b86 1EA8     		add	r0, sp, #120
 10805 0b88 FFF7FEFF 		bl	set_status_right
 10806              	.LVL1261:
2456:src/display.c **** nostk:	show_flags();
 10807              		.loc 1 2456 2 view .LVU3518
2219:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10808              		.loc 1 2219 6 is_stmt 0 view .LVU3519
 10809 0b8c 0025     		movs	r5, #0
2456:src/display.c **** nostk:	show_flags();
 10810              		.loc 1 2456 2 view .LVU3520
 10811 0b8e FFF7FEFF 		bl	show_stack
 10812              	.LVL1262:
2457:src/display.c **** 	if (!skip) {
 10813              		.loc 1 2457 8 is_stmt 1 view .LVU3521
 10814 0b92 FFF7FEFF 		bl	show_flags
 10815              	.LVL1263:
2458:src/display.c **** 		if (State2.runmode) {
 10816              		.loc 1 2458 2 view .LVU3522
 10817 0b96 FFF759BB 		b	.L816
ARM GAS  /tmp/ccTlkAzC.s 			page 299


 10818              	.LVL1264:
 10819              	.L1093:
2409:src/display.c **** 				j *= 6;
 10820              		.loc 1 2409 5 view .LVU3523
2409:src/display.c **** 				j *= 6;
 10821              		.loc 1 2409 9 is_stmt 0 view .LVU3524
 10822 0b9a 1EA8     		add	r0, sp, #120
 10823              	.LVL1265:
2409:src/display.c **** 				j *= 6;
 10824              		.loc 1 2409 9 view .LVU3525
 10825 0b9c FFF7FEFF 		bl	slen
 10826              	.LVL1266:
2410:src/display.c **** 				if ( i - j >= 12 ) {
 10827              		.loc 1 2410 5 is_stmt 1 view .LVU3526
2411:src/display.c **** 					buf[ (i - j) ] = '\0';
 10828              		.loc 1 2411 5 view .LVU3527
2410:src/display.c **** 				if ( i - j >= 12 ) {
 10829              		.loc 1 2410 7 is_stmt 0 view .LVU3528
 10830 0ba0 0BEB4B0B 		add	fp, fp, fp, lsl #1
 10831              	.LVL1267:
2411:src/display.c **** 					buf[ (i - j) ] = '\0';
 10832              		.loc 1 2411 12 view .LVU3529
 10833 0ba4 A0EB4B00 		sub	r0, r0, fp, lsl #1
 10834              	.LVL1268:
2411:src/display.c **** 					buf[ (i - j) ] = '\0';
 10835              		.loc 1 2411 8 view .LVU3530
 10836 0ba8 0B28     		cmp	r0, #11
 10837 0baa 7FF721AB 		ble	.L819
2412:src/display.c **** 					set_status_right(buf);
 10838              		.loc 1 2412 6 is_stmt 1 view .LVU3531
2412:src/display.c **** 					set_status_right(buf);
 10839              		.loc 1 2412 21 is_stmt 0 view .LVU3532
 10840 0bae 28AB     		add	r3, sp, #160
 10841 0bb0 1A18     		adds	r2, r3, r0
 10842 0bb2 019B     		ldr	r3, [sp, #4]
 10843 0bb4 02F8283C 		strb	r3, [r2, #-40]
2413:src/display.c **** 				}
 10844              		.loc 1 2413 6 is_stmt 1 view .LVU3533
 10845 0bb8 1EA8     		add	r0, sp, #120
 10846 0bba FFF7FEFF 		bl	set_status_right
 10847              	.LVL1269:
2456:src/display.c **** nostk:	show_flags();
 10848              		.loc 1 2456 2 view .LVU3534
 10849 0bbe FFF7FEFF 		bl	show_stack
 10850              	.LVL1270:
2457:src/display.c **** 	if (!skip) {
 10851              		.loc 1 2457 8 view .LVU3535
 10852 0bc2 FFF7FEFF 		bl	show_flags
 10853              	.LVL1271:
2458:src/display.c **** 		if (State2.runmode) {
 10854              		.loc 1 2458 2 view .LVU3536
 10855 0bc6 FFF741BB 		b	.L816
 10856              	.L1091:
2401:src/display.c **** 		} else if (State2.alphas) {
 10857              		.loc 1 2401 4 view .LVU3537
2401:src/display.c **** 		} else if (State2.alphas) {
 10858              		.loc 1 2401 46 is_stmt 0 view .LVU3538
ARM GAS  /tmp/ccTlkAzC.s 			page 300


 10859 0bca 581E     		subs	r0, r3, #1
 10860 0bcc FFF7FEFF 		bl	get_reg_n
 10861              	.LVL1272:
 10862              	.LBB562:
 10863              	.LBI562:
2550:src/display.c **** 	int glen = *graphic++;
 10864              		.loc 1 2550 13 is_stmt 1 view .LVU3539
 10865              	.LBB563:
2551:src/display.c **** 	int i, j;
 10866              		.loc 1 2551 2 view .LVU3540
2559:src/display.c **** #endif
 10867              		.loc 1 2559 15 is_stmt 0 view .LVU3541
 10868 0bd0 5349     		ldr	r1, .L1104+36
2551:src/display.c **** 	int i, j;
 10869              		.loc 1 2551 6 view .LVU3542
 10870 0bd2 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 10871              	.LVL1273:
2552:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10872              		.loc 1 2552 2 is_stmt 1 view .LVU3543
2559:src/display.c **** #endif
 10873              		.loc 1 2559 2 view .LVU3544
2559:src/display.c **** #endif
 10874              		.loc 1 2559 15 is_stmt 0 view .LVU3545
 10875 0bd4 0123     		movs	r3, #1
 10876 0bd6 0B70     		strb	r3, [r1]
2561:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10877              		.loc 1 2561 2 is_stmt 1 view .LVU3546
2561:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 10878              		.loc 1 2561 5 is_stmt 0 view .LVU3547
 10879 0bd8 3AB3     		cbz	r2, .L880
2562:src/display.c **** 
 10880              		.loc 1 2562 2 is_stmt 1 view .LVU3548
 10881              	.LVL1274:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10882              		.loc 1 2564 2 view .LVU3549
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10883              		.loc 1 2564 12 view .LVU3550
 10884 0bda C118     		adds	r1, r0, r3
 10885 0bdc 0391     		str	r1, [sp, #12]
 10886 0bde 2B2A     		cmp	r2, #43
 10887 0be0 D4BF     		ite	le
 10888 0be2 8918     		addle	r1, r1, r2
 10889 0be4 2B31     		addgt	r1, r1, #43
 10890 0be6 CDE90113 		strd	r1, r3, [sp, #4]
 10891 0bea CDE90456 		strd	r5, r6, [sp, #16]
 10892              	.LVL1275:
 10893              	.L881:
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10894              		.loc 1 2565 13 view .LVU3551
 10895 0bee 029B     		ldr	r3, [sp, #8]
 10896 0bf0 039E     		ldr	r6, [sp, #12]
 10897 0bf2 03FA0BFA 		lsl	r10, r3, fp
 10898 0bf6 0BF19405 		add	r5, fp, #148
 10899 0bfa 06E0     		b	.L884
 10900              	.LVL1276:
 10901              	.L1095:
 10902              	.LBB564:
ARM GAS  /tmp/ccTlkAzC.s 			page 301


 10903              	.LBB565:
 327:src/display.c **** 	else	clr_dot(n);
 10904              		.loc 1 327 10 is_stmt 0 view .LVU3552
 10905 0bfc FFF7FEFF 		bl	set_dot
 10906              	.LVL1277:
 10907              	.L883:
 327:src/display.c **** 	else	clr_dot(n);
 10908              		.loc 1 327 10 view .LVU3553
 10909              	.LBE565:
 10910              	.LBE564:
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10911              		.loc 1 2565 22 is_stmt 1 view .LVU3554
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10912              		.loc 1 2565 13 view .LVU3555
2565:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 10913              		.loc 1 2565 3 is_stmt 0 view .LVU3556
 10914 0c00 019B     		ldr	r3, [sp, #4]
 10915 0c02 9E42     		cmp	r6, r3
 10916 0c04 05F10605 		add	r5, r5, #6
 10917 0c08 08D0     		beq	.L1094
 10918              	.LVL1278:
 10919              	.L884:
2570:src/display.c **** #endif
 10920              		.loc 1 2570 4 is_stmt 1 view .LVU3557
 10921              	.LBB568:
 10922              	.LBI564:
 326:src/display.c **** 	if (on)	set_dot(n);
 10923              		.loc 1 326 6 view .LVU3558
 10924              	.LBB566:
 327:src/display.c **** 	else	clr_dot(n);
 10925              		.loc 1 327 2 view .LVU3559
 327:src/display.c **** 	else	clr_dot(n);
 10926              		.loc 1 327 10 view .LVU3560
 328:src/display.c **** }
 10927              		.loc 1 328 7 view .LVU3561
 10928              	.LBE566:
 10929              	.LBE568:
2570:src/display.c **** #endif
 10930              		.loc 1 2570 35 is_stmt 0 view .LVU3562
 10931 0c0a 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 10932              	.LVL1279:
 10933              	.LBB569:
 10934              	.LBB567:
 327:src/display.c **** 	else	clr_dot(n);
 10935              		.loc 1 327 5 view .LVU3563
 10936 0c0e 13EA0A0F 		tst	r3, r10
 327:src/display.c **** 	else	clr_dot(n);
 10937              		.loc 1 327 10 view .LVU3564
 10938 0c12 2846     		mov	r0, r5
 327:src/display.c **** 	else	clr_dot(n);
 10939              		.loc 1 327 5 view .LVU3565
 10940 0c14 F2D1     		bne	.L1095
 328:src/display.c **** }
 10941              		.loc 1 328 7 view .LVU3566
 10942 0c16 FFF7FEFF 		bl	clr_dot
 10943              	.LVL1280:
 10944 0c1a F1E7     		b	.L883
ARM GAS  /tmp/ccTlkAzC.s 			page 302


 10945              	.LVL1281:
 10946              	.L1094:
 328:src/display.c **** }
 10947              		.loc 1 328 7 view .LVU3567
 10948              	.LBE567:
 10949              	.LBE569:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10950              		.loc 1 2564 17 is_stmt 1 view .LVU3568
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10951              		.loc 1 2564 18 is_stmt 0 view .LVU3569
 10952 0c1c 0BF1010B 		add	fp, fp, #1
 10953              	.LVL1282:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10954              		.loc 1 2564 12 is_stmt 1 view .LVU3570
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10955              		.loc 1 2564 2 is_stmt 0 view .LVU3571
 10956 0c20 BBF1060F 		cmp	fp, #6
 10957 0c24 E3D1     		bne	.L881
 10958 0c26 DDE90456 		ldrd	r5, r6, [sp, #16]
 10959              	.LVL1283:
 10960              	.L880:
2564:src/display.c **** 		for (j=1; j<=glen; j++) {
 10961              		.loc 1 2564 2 view .LVU3572
 10962              	.LBE563:
 10963              	.LBE562:
2456:src/display.c **** nostk:	show_flags();
 10964              		.loc 1 2456 2 is_stmt 1 view .LVU3573
 10965 0c2a FFF7FEFF 		bl	show_stack
 10966              	.LVL1284:
2457:src/display.c **** 	if (!skip) {
 10967              		.loc 1 2457 8 view .LVU3574
 10968 0c2e FFF7FEFF 		bl	show_flags
 10969              	.LVL1285:
2458:src/display.c **** 		if (State2.runmode) {
 10970              		.loc 1 2458 2 view .LVU3575
 10971 0c32 FFF70BBB 		b	.L816
 10972              	.LVL1286:
 10973              	.L871:
 10974              	.LBB570:
 10975              	.LBB555:
2148:src/display.c **** 				n -= 100;
 10976              		.loc 1 2148 5 view .LVU3576
2148:src/display.c **** 				n -= 100;
 10977              		.loc 1 2148 11 is_stmt 0 view .LVU3577
 10978 0c36 3123     		movs	r3, #49
 10979 0c38 4370     		strb	r3, [r0, #1]
2149:src/display.c **** 			}
 10980              		.loc 1 2149 5 is_stmt 1 view .LVU3578
2149:src/display.c **** 			}
 10981              		.loc 1 2149 7 is_stmt 0 view .LVU3579
 10982 0c3a A8F16408 		sub	r8, r8, #100
 10983              	.LVL1287:
2148:src/display.c **** 				n -= 100;
 10984              		.loc 1 2148 8 view .LVU3580
 10985 0c3e 0230     		adds	r0, r0, #2
 10986              	.LVL1288:
 10987              	.L870:
ARM GAS  /tmp/ccTlkAzC.s 			page 303


2152:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 10988              		.loc 1 2152 3 is_stmt 1 view .LVU3581
2152:src/display.c **** 			bp = num_arg_0(bp, n, 2);
 10989              		.loc 1 2152 6 is_stmt 0 view .LVU3582
 10990 0c40 B8F1630F 		cmp	r8, #99
 10991 0c44 7FF72CAF 		ble	.L872
2155:src/display.c **** 		set_status(buf);
 10992              		.loc 1 2155 4 is_stmt 1 view .LVU3583
 10993              	.LVL1289:
2155:src/display.c **** 		set_status(buf);
 10994              		.loc 1 2155 20 is_stmt 0 view .LVU3584
 10995 0c48 364B     		ldr	r3, .L1104+40
 10996 0c4a 9844     		add	r8, r8, r3
 10997              	.LVL1290:
2155:src/display.c **** 		set_status(buf);
 10998              		.loc 1 2155 10 view .LVU3585
 10999 0c4c 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11000 0c50 0370     		strb	r3, [r0]
 11001 0c52 29E7     		b	.L874
 11002              	.LVL1291:
 11003              	.L1086:
2155:src/display.c **** 		set_status(buf);
 11004              		.loc 1 2155 10 view .LVU3586
 11005              	.LBE555:
 11006              	.LBE570:
 11007              	.LBB571:
 11008              	.LBB551:
 11009              	.LBB549:
2037:src/display.c **** 			end = regK_idx;
 11010              		.loc 1 2037 4 is_stmt 1 view .LVU3587
2038:src/display.c **** 			start = 3;
 11011              		.loc 1 2038 4 view .LVU3588
2039:src/display.c **** 			group = 4;
 11012              		.loc 1 2039 4 view .LVU3589
2040:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11013              		.loc 1 2040 4 view .LVU3590
2041:src/display.c **** 		}
 11014              		.loc 1 2041 4 view .LVU3591
 11015 0c54 3448     		ldr	r0, .L1104+44
 11016 0c56 FFF7FEFF 		bl	set_status
 11017              	.LVL1292:
 11018 0c5a 4FF0070A 		mov	r10, #7
 11019 0c5e 0822     		movs	r2, #8
 11020 0c60 4FF02408 		mov	r8, #36
 11021              	.LVL1293:
2041:src/display.c **** 		}
 11022              		.loc 1 2041 4 is_stmt 0 view .LVU3592
 11023 0c64 2220     		movs	r0, #34
2039:src/display.c **** 			group = 4;
 11024              		.loc 1 2039 10 view .LVU3593
 11025 0c66 4FF0030B 		mov	fp, #3
2040:src/display.c **** 			set_status("XYZT\006A:D\006LIJK");
 11026              		.loc 1 2040 10 view .LVU3594
 11027 0c6a 0426     		movs	r6, #4
2038:src/display.c **** 			start = 3;
 11028              		.loc 1 2038 8 view .LVU3595
 11029 0c6c 4FF06F09 		mov	r9, #111
ARM GAS  /tmp/ccTlkAzC.s 			page 304


 11030              	.LVL1294:
2037:src/display.c **** 			end = regK_idx;
 11031              		.loc 1 2037 9 view .LVU3596
 11032 0c70 6427     		movs	r7, #100
 11033              	.LVL1295:
2037:src/display.c **** 			end = regK_idx;
 11034              		.loc 1 2037 9 view .LVU3597
 11035 0c72 06E6     		b	.L851
 11036              	.LVL1296:
 11037              	.L1083:
2037:src/display.c **** 			end = regK_idx;
 11038              		.loc 1 2037 9 view .LVU3598
 11039              	.LBE549:
1997:src/display.c **** 		p = num_arg(buf, free_mem());
 11040              		.loc 1 1997 3 is_stmt 1 view .LVU3599
 11041 0c74 2D48     		ldr	r0, .L1104+48
 11042 0c76 214F     		ldr	r7, .L1104
 11043              	.LVL1297:
1997:src/display.c **** 		p = num_arg(buf, free_mem());
 11044              		.loc 1 1997 3 is_stmt 0 view .LVU3600
 11045 0c78 FFF7FEFF 		bl	set_status
 11046              	.LVL1298:
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11047              		.loc 1 1998 3 is_stmt 1 view .LVU3601
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11048              		.loc 1 1998 20 is_stmt 0 view .LVU3602
 11049 0c7c FFF7FEFF 		bl	free_mem
 11050              	.LVL1299:
 11051 0c80 0146     		mov	r1, r0
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11052              		.loc 1 1998 7 view .LVU3603
 11053 0c82 15A8     		add	r0, sp, #84
 11054              	.LVL1300:
1998:src/display.c **** 		p = scopy(p, " , FL. ");
 11055              		.loc 1 1998 7 view .LVU3604
 11056 0c84 FFF7FEFF 		bl	num_arg
 11057              	.LVL1301:
1999:src/display.c **** 		p = num_arg(p, free_flash());
 11058              		.loc 1 1999 3 is_stmt 1 view .LVU3605
1999:src/display.c **** 		p = num_arg(p, free_flash());
 11059              		.loc 1 1999 7 is_stmt 0 view .LVU3606
 11060 0c88 2949     		ldr	r1, .L1104+52
 11061 0c8a FFF7FEFF 		bl	scopy
 11062              	.LVL1302:
1999:src/display.c **** 		p = num_arg(p, free_flash());
 11063              		.loc 1 1999 7 view .LVU3607
 11064 0c8e 0646     		mov	r6, r0
 11065              	.LVL1303:
2000:src/display.c **** 		*p = '\0';
 11066              		.loc 1 2000 3 is_stmt 1 view .LVU3608
2000:src/display.c **** 		*p = '\0';
 11067              		.loc 1 2000 18 is_stmt 0 view .LVU3609
 11068 0c90 FFF7FEFF 		bl	free_flash
 11069              	.LVL1304:
2000:src/display.c **** 		*p = '\0';
 11070              		.loc 1 2000 18 view .LVU3610
 11071 0c94 0146     		mov	r1, r0
ARM GAS  /tmp/ccTlkAzC.s 			page 305


2000:src/display.c **** 		*p = '\0';
 11072              		.loc 1 2000 7 view .LVU3611
 11073 0c96 3046     		mov	r0, r6
 11074 0c98 FFF7FEFF 		bl	num_arg
 11075              	.LVL1305:
 11076 0c9c 0346     		mov	r3, r0
 11077              	.LVL1306:
2001:src/display.c **** 		set_digits_string(buf, 0);
 11078              		.loc 1 2001 3 is_stmt 1 view .LVU3612
2001:src/display.c **** 		set_digits_string(buf, 0);
 11079              		.loc 1 2001 6 is_stmt 0 view .LVU3613
 11080 0c9e 0021     		movs	r1, #0
2002:src/display.c **** 	}
 11081              		.loc 1 2002 3 view .LVU3614
 11082 0ca0 15A8     		add	r0, sp, #84
 11083              	.LVL1307:
2001:src/display.c **** 		set_digits_string(buf, 0);
 11084              		.loc 1 2001 6 view .LVU3615
 11085 0ca2 1970     		strb	r1, [r3]
2002:src/display.c **** 	}
 11086              		.loc 1 2002 3 is_stmt 1 view .LVU3616
 11087 0ca4 FFF7FEFF 		bl	set_digits_string
 11088              	.LVL1308:
2002:src/display.c **** 	}
 11089              		.loc 1 2002 3 is_stmt 0 view .LVU3617
 11090 0ca8 24E6     		b	.L846
 11091              	.LVL1309:
 11092              	.L1085:
 11093              	.LBB550:
2027:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11094              		.loc 1 2027 4 is_stmt 1 view .LVU3618
2027:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11095              		.loc 1 2027 9 is_stmt 0 view .LVU3619
 11096 0caa 07EB8707 		add	r7, r7, r7, lsl #2
 11097              	.LVL1310:
2027:src/display.c **** 			end = base >= 70 ? 99 : base + 29;
 11098              		.loc 1 2027 9 view .LVU3620
 11099 0cae 7F00     		lsls	r7, r7, #1
 11100              	.LVL1311:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11101              		.loc 1 2028 4 is_stmt 1 view .LVU3621
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11102              		.loc 1 2028 26 is_stmt 0 view .LVU3622
 11103 0cb0 462F     		cmp	r7, #70
2029:src/display.c **** 			p = num_arg_0(p, base, 2);
 11104              		.loc 1 2029 8 view .LVU3623
 11105 0cb2 2049     		ldr	r1, .L1104+56
 11106 0cb4 15A8     		add	r0, sp, #84
 11107              	.LVL1312:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11108              		.loc 1 2028 26 view .LVU3624
 11109 0cb6 B946     		mov	r9, r7
 11110              	.LVL1313:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11111              		.loc 1 2028 26 view .LVU3625
 11112 0cb8 A8BF     		it	ge
 11113 0cba 4FF04609 		movge	r9, #70
ARM GAS  /tmp/ccTlkAzC.s 			page 306


2029:src/display.c **** 			p = num_arg_0(p, base, 2);
 11114              		.loc 1 2029 8 view .LVU3626
 11115 0cbe FFF7FEFF 		bl	scopy
 11116              	.LVL1314:
2030:src/display.c **** 			*p++ = '-';
 11117              		.loc 1 2030 8 view .LVU3627
 11118 0cc2 3946     		mov	r1, r7
 11119 0cc4 0222     		movs	r2, #2
 11120 0cc6 FFF7FEFF 		bl	num_arg_0
 11121              	.LVL1315:
2028:src/display.c **** 			p = scopy(buf, "FL ");
 11122              		.loc 1 2028 8 view .LVU3628
 11123 0cca 09F11D09 		add	r9, r9, #29
 11124              	.LVL1316:
2029:src/display.c **** 			p = num_arg_0(p, base, 2);
 11125              		.loc 1 2029 4 is_stmt 1 view .LVU3629
2030:src/display.c **** 			*p++ = '-';
 11126              		.loc 1 2030 4 view .LVU3630
2031:src/display.c **** 			p = num_arg_0(p, end, 2);
 11127              		.loc 1 2031 4 view .LVU3631
2031:src/display.c **** 			p = num_arg_0(p, end, 2);
 11128              		.loc 1 2031 9 is_stmt 0 view .LVU3632
 11129 0cce 2D23     		movs	r3, #45
 11130 0cd0 00F8013B 		strb	r3, [r0], #1
 11131              	.LVL1317:
2032:src/display.c **** 			*p = '\0';
 11132              		.loc 1 2032 4 is_stmt 1 view .LVU3633
2032:src/display.c **** 			*p = '\0';
 11133              		.loc 1 2032 8 is_stmt 0 view .LVU3634
 11134 0cd4 4946     		mov	r1, r9
 11135 0cd6 0222     		movs	r2, #2
 11136 0cd8 FFF7FEFF 		bl	num_arg_0
 11137              	.LVL1318:
2032:src/display.c **** 			*p = '\0';
 11138              		.loc 1 2032 8 view .LVU3635
 11139 0cdc 0246     		mov	r2, r0
 11140              	.LVL1319:
2033:src/display.c **** 			set_status(buf);
 11141              		.loc 1 2033 4 is_stmt 1 view .LVU3636
2033:src/display.c **** 			set_status(buf);
 11142              		.loc 1 2033 7 is_stmt 0 view .LVU3637
 11143 0cde 4FF0000B 		mov	fp, #0
2034:src/display.c **** 		}
 11144              		.loc 1 2034 4 view .LVU3638
 11145 0ce2 15A8     		add	r0, sp, #84
 11146              	.LVL1320:
2033:src/display.c **** 			set_status(buf);
 11147              		.loc 1 2033 7 view .LVU3639
 11148 0ce4 82F800B0 		strb	fp, [r2]
2034:src/display.c **** 		}
 11149              		.loc 1 2034 4 is_stmt 1 view .LVU3640
 11150 0ce8 4FF00A0A 		mov	r10, #10
 11151 0cec FFF7FEFF 		bl	set_status
 11152              	.LVL1321:
2023:src/display.c **** 		int start = 0;
 11153              		.loc 1 2023 7 is_stmt 0 view .LVU3641
 11154 0cf0 5646     		mov	r6, r10
ARM GAS  /tmp/ccTlkAzC.s 			page 307


 11155 0cf2 0222     		movs	r2, #2
 11156 0cf4 4FF00908 		mov	r8, #9
 11157              	.LVL1322:
2023:src/display.c **** 		int start = 0;
 11158              		.loc 1 2023 7 view .LVU3642
 11159 0cf8 0720     		movs	r0, #7
 11160 0cfa C2E5     		b	.L851
 11161              	.L1105:
 11162              		.align	2
 11163              	.L1104:
 11164 0cfc 00000000 		.word	PersistentRam
 11165 0d00 00000000 		.word	DispMsg
 11166 0d04 A0000000 		.word	.LC40
 11167 0d08 40000000 		.word	.LC30
 11168 0d0c A8000000 		.word	.LC41
 11169 0d10 00000000 		.word	monfuncs
 11170 0d14 00000000 		.word	Ctx
 11171 0d18 00000000 		.word	LastDisplayedNumber
 11172 0d1c B0070000 		.word	PersistentRam+1968
 11173 0d20 00000000 		.word	forceDispPlot
 11174 0d24 BC000000 		.word	.LC27
 11175 0d28 7C000000 		.word	.LC37
 11176 0d2c 4C000000 		.word	.LC31
 11177 0d30 54000000 		.word	.LC32
 11178 0d34 78000000 		.word	.LC36
 11179 0d38 00000000 		.word	DispPlot
 11180              	.LVL1323:
 11181              	.L1084:
2023:src/display.c **** 		int start = 0;
 11182              		.loc 1 2023 7 view .LVU3643
 11183              	.LBE550:
2006:src/display.c **** 		if (SizeStatRegs)
 11184              		.loc 1 2006 3 is_stmt 1 view .LVU3644
2006:src/display.c **** 		if (SizeStatRegs)
 11185              		.loc 1 2006 7 is_stmt 0 view .LVU3645
 11186 0d3c 15AE     		add	r6, sp, #84
 11187              	.LVL1324:
2006:src/display.c **** 		if (SizeStatRegs)
 11188              		.loc 1 2006 7 view .LVU3646
 11189 0d3e 1849     		ldr	r1, .L1106
 11190 0d40 3046     		mov	r0, r6
 11191 0d42 FFF7FEFF 		bl	scopy
 11192              	.LVL1325:
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11193              		.loc 1 2007 7 view .LVU3647
 11194 0d46 174A     		ldr	r2, .L1106+4
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11195              		.loc 1 2007 6 view .LVU3648
 11196 0d48 1268     		ldr	r2, [r2]
2006:src/display.c **** 		if (SizeStatRegs)
 11197              		.loc 1 2006 7 view .LVU3649
 11198 0d4a 0346     		mov	r3, r0
 11199              	.LVL1326:
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11200              		.loc 1 2007 3 is_stmt 1 view .LVU3650
2007:src/display.c **** 			p = scopy(p, " \221\006\006+");
 11201              		.loc 1 2007 6 is_stmt 0 view .LVU3651
ARM GAS  /tmp/ccTlkAzC.s 			page 308


 11202 0d4c B2B9     		cbnz	r2, .L1096
 11203              	.L848:
2009:src/display.c **** 		set_status(buf);
 11204              		.loc 1 2009 3 is_stmt 1 view .LVU3652
2009:src/display.c **** 		set_status(buf);
 11205              		.loc 1 2009 6 is_stmt 0 view .LVU3653
 11206 0d4e 0022     		movs	r2, #0
 11207 0d50 1A70     		strb	r2, [r3]
2010:src/display.c **** 
 11208              		.loc 1 2010 3 is_stmt 1 view .LVU3654
 11209 0d52 3046     		mov	r0, r6
 11210              	.LVL1327:
2010:src/display.c **** 
 11211              		.loc 1 2010 3 is_stmt 0 view .LVU3655
 11212 0d54 FFF7FEFF 		bl	set_status
 11213              	.LVL1328:
2013:src/display.c **** 		if (LocalRegs < 0) {
 11214              		.loc 1 2013 3 is_stmt 1 view .LVU3656
2013:src/display.c **** 		if (LocalRegs < 0) {
 11215              		.loc 1 2013 7 is_stmt 0 view .LVU3657
 11216 0d58 FFF7FEFF 		bl	global_regs
 11217              	.LVL1329:
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11218              		.loc 1 2014 7 view .LVU3658
 11219 0d5c 124F     		ldr	r7, .L1106+8
 11220              	.LVL1330:
2013:src/display.c **** 		if (LocalRegs < 0) {
 11221              		.loc 1 2013 7 view .LVU3659
 11222 0d5e 0146     		mov	r1, r0
 11223 0d60 3046     		mov	r0, r6
 11224 0d62 FFF7FEFF 		bl	num_arg
 11225              	.LVL1331:
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11226              		.loc 1 2014 6 view .LVU3660
 11227 0d66 B7F9DE27 		ldrsh	r2, [r7, #2014]
 11228 0d6a 002A     		cmp	r2, #0
2013:src/display.c **** 		if (LocalRegs < 0) {
 11229              		.loc 1 2013 7 view .LVU3661
 11230 0d6c 0346     		mov	r3, r0
 11231              	.LVL1332:
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11232              		.loc 1 2014 3 is_stmt 1 view .LVU3662
2014:src/display.c **** 			p = scopy(p, " , Loc. ");
 11233              		.loc 1 2014 6 is_stmt 0 view .LVU3663
 11234 0d6e 0ADB     		blt	.L1097
 11235              	.LVL1333:
 11236              	.L849:
2018:src/display.c **** 		set_digits_string(buf, 0);
 11237              		.loc 1 2018 3 is_stmt 1 view .LVU3664
2018:src/display.c **** 		set_digits_string(buf, 0);
 11238              		.loc 1 2018 6 is_stmt 0 view .LVU3665
 11239 0d70 0021     		movs	r1, #0
2019:src/display.c **** 	} else {
 11240              		.loc 1 2019 3 view .LVU3666
 11241 0d72 3046     		mov	r0, r6
 11242              	.LVL1334:
2018:src/display.c **** 		set_digits_string(buf, 0);
ARM GAS  /tmp/ccTlkAzC.s 			page 309


 11243              		.loc 1 2018 6 view .LVU3667
 11244 0d74 1970     		strb	r1, [r3]
2019:src/display.c **** 	} else {
 11245              		.loc 1 2019 3 is_stmt 1 view .LVU3668
 11246 0d76 FFF7FEFF 		bl	set_digits_string
 11247              	.LVL1335:
2019:src/display.c **** 	} else {
 11248              		.loc 1 2019 3 is_stmt 0 view .LVU3669
 11249 0d7a BBE5     		b	.L846
 11250              	.LVL1336:
 11251              	.L1096:
2008:src/display.c **** 		*p = '\0';
 11252              		.loc 1 2008 4 is_stmt 1 view .LVU3670
2008:src/display.c **** 		*p = '\0';
 11253              		.loc 1 2008 8 is_stmt 0 view .LVU3671
 11254 0d7c 0B49     		ldr	r1, .L1106+12
 11255 0d7e FFF7FEFF 		bl	scopy
 11256              	.LVL1337:
2008:src/display.c **** 		*p = '\0';
 11257              		.loc 1 2008 8 view .LVU3672
 11258 0d82 0346     		mov	r3, r0
 11259              	.LVL1338:
2008:src/display.c **** 		*p = '\0';
 11260              		.loc 1 2008 8 view .LVU3673
 11261 0d84 E3E7     		b	.L848
 11262              	.LVL1339:
 11263              	.L1097:
2015:src/display.c **** 			p = num_arg(p, local_regs());
 11264              		.loc 1 2015 4 is_stmt 1 view .LVU3674
2015:src/display.c **** 			p = num_arg(p, local_regs());
 11265              		.loc 1 2015 8 is_stmt 0 view .LVU3675
 11266 0d86 0A49     		ldr	r1, .L1106+16
 11267 0d88 FFF7FEFF 		bl	scopy
 11268              	.LVL1340:
2015:src/display.c **** 			p = num_arg(p, local_regs());
 11269              		.loc 1 2015 8 view .LVU3676
 11270 0d8c 8046     		mov	r8, r0
 11271              	.LVL1341:
2016:src/display.c **** 		}
 11272              		.loc 1 2016 4 is_stmt 1 view .LVU3677
2016:src/display.c **** 		}
 11273              		.loc 1 2016 19 is_stmt 0 view .LVU3678
 11274 0d8e FFF7FEFF 		bl	local_regs
 11275              	.LVL1342:
2016:src/display.c **** 		}
 11276              		.loc 1 2016 19 view .LVU3679
 11277 0d92 0146     		mov	r1, r0
2016:src/display.c **** 		}
 11278              		.loc 1 2016 8 view .LVU3680
 11279 0d94 4046     		mov	r0, r8
 11280 0d96 FFF7FEFF 		bl	num_arg
 11281              	.LVL1343:
 11282 0d9a 0346     		mov	r3, r0
 11283              	.LVL1344:
2016:src/display.c **** 		}
 11284              		.loc 1 2016 8 view .LVU3681
 11285 0d9c E8E7     		b	.L849
ARM GAS  /tmp/ccTlkAzC.s 			page 310


 11286              	.L1107:
 11287 0d9e 00BF     		.align	2
 11288              	.L1106:
 11289 0da0 5C000000 		.word	.LC33
 11290 0da4 00000000 		.word	SizeStatRegs
 11291 0da8 00000000 		.word	PersistentRam
 11292 0dac 64000000 		.word	.LC34
 11293 0db0 6C000000 		.word	.LC35
 11294              	.LBE551:
 11295              	.LBE571:
 11296              		.cfi_endproc
 11297              	.LFE34:
 11299              		.section	.text.frozen_display,"ax",%progbits
 11300              		.align	1
 11301              		.p2align 2,,3
 11302              		.global	frozen_display
 11303              		.syntax unified
 11304              		.thumb
 11305              		.thumb_func
 11306              		.fpu fpv4-sp-d16
 11308              	frozen_display:
 11309              	.LFB35:
2544:src/display.c **** 	State2.disp_freeze = 0;
 11310              		.loc 1 2544 1 is_stmt 1 view -0
 11311              		.cfi_startproc
 11312              		@ args = 0, pretend = 0, frame = 0
 11313              		@ frame_needed = 0, uses_anonymous_args = 0
2545:src/display.c **** 	display();
 11314              		.loc 1 2545 2 view .LVU3683
2544:src/display.c **** 	State2.disp_freeze = 0;
 11315              		.loc 1 2544 1 is_stmt 0 view .LVU3684
 11316 0000 10B5     		push	{r4, lr}
 11317              		.cfi_def_cfa_offset 8
 11318              		.cfi_offset 4, -8
 11319              		.cfi_offset 14, -4
2545:src/display.c **** 	display();
 11320              		.loc 1 2545 21 view .LVU3685
 11321 0002 064C     		ldr	r4, .L1110
 11322 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11323 0006 6FF30413 		bfc	r3, #4, #1
 11324 000a E375     		strb	r3, [r4, #23]
2546:src/display.c **** 	State2.disp_freeze = 1;
 11325              		.loc 1 2546 2 is_stmt 1 view .LVU3686
 11326 000c FFF7FEFF 		bl	display
 11327              	.LVL1345:
2547:src/display.c **** }
 11328              		.loc 1 2547 2 view .LVU3687
2547:src/display.c **** }
 11329              		.loc 1 2547 21 is_stmt 0 view .LVU3688
 11330 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11331 0012 43F01003 		orr	r3, r3, #16
 11332 0016 E375     		strb	r3, [r4, #23]
2548:src/display.c **** 
 11333              		.loc 1 2548 1 view .LVU3689
 11334 0018 10BD     		pop	{r4, pc}
 11335              	.L1111:
 11336 001a 00BF     		.align	2
ARM GAS  /tmp/ccTlkAzC.s 			page 311


 11337              	.L1110:
 11338 001c 00000000 		.word	StateWhileOn
 11339              		.cfi_endproc
 11340              	.LFE35:
 11342              		.section	.text.message,"ax",%progbits
 11343              		.align	1
 11344              		.p2align 2,,3
 11345              		.global	message
 11346              		.syntax unified
 11347              		.thumb
 11348              		.thumb_func
 11349              		.fpu fpv4-sp-d16
 11351              	message:
 11352              	.LVL1346:
 11353              	.LFB41:
2740:src/display.c **** 	State2.disp_freeze = 0;
 11354              		.loc 1 2740 1 is_stmt 1 view -0
 11355              		.cfi_startproc
 11356              		@ args = 0, pretend = 0, frame = 0
 11357              		@ frame_needed = 0, uses_anonymous_args = 0
2741:src/display.c **** 	State2.disp_small = 0;
 11358              		.loc 1 2741 2 view .LVU3691
2742:src/display.c **** 	WasDataEntry = 0;
 11359              		.loc 1 2742 2 view .LVU3692
2742:src/display.c **** 	WasDataEntry = 0;
 11360              		.loc 1 2742 20 is_stmt 0 view .LVU3693
 11361 0000 174A     		ldr	r2, .L1122
2740:src/display.c **** 	State2.disp_freeze = 0;
 11362              		.loc 1 2740 1 view .LVU3694
 11363 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11364              		.cfi_def_cfa_offset 24
 11365              		.cfi_offset 3, -24
 11366              		.cfi_offset 4, -20
 11367              		.cfi_offset 5, -16
 11368              		.cfi_offset 6, -12
 11369              		.cfi_offset 7, -8
 11370              		.cfi_offset 14, -4
2742:src/display.c **** 	WasDataEntry = 0;
 11371              		.loc 1 2742 20 view .LVU3695
 11372 0004 D38A     		ldrh	r3, [r2, #22]
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11373              		.loc 1 2743 15 view .LVU3696
 11374 0006 174E     		ldr	r6, .L1122+4
2742:src/display.c **** 	WasDataEntry = 0;
 11375              		.loc 1 2742 20 view .LVU3697
 11376 0008 23F48453 		bic	r3, r3, #4224
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11377              		.loc 1 2743 15 view .LVU3698
 11378 000c 0027     		movs	r7, #0
2742:src/display.c **** 	WasDataEntry = 0;
 11379              		.loc 1 2742 20 view .LVU3699
 11380 000e D382     		strh	r3, [r2, #22]	@ movhi
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11381              		.loc 1 2743 2 is_stmt 1 view .LVU3700
2744:src/display.c **** 		// Complete redraw necessary
 11382              		.loc 1 2744 5 is_stmt 0 view .LVU3701
 11383 0010 9B05     		lsls	r3, r3, #22
ARM GAS  /tmp/ccTlkAzC.s 			page 312


2740:src/display.c **** 	State2.disp_freeze = 0;
 11384              		.loc 1 2740 1 view .LVU3702
 11385 0012 0546     		mov	r5, r0
 11386 0014 0C46     		mov	r4, r1
2743:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11387              		.loc 1 2743 15 view .LVU3703
 11388 0016 3760     		str	r7, [r6]
2744:src/display.c **** 		// Complete redraw necessary
 11389              		.loc 1 2744 2 is_stmt 1 view .LVU3704
2744:src/display.c **** 		// Complete redraw necessary
 11390              		.loc 1 2744 5 is_stmt 0 view .LVU3705
 11391 0018 12D5     		bpl	.L1113
2744:src/display.c **** 		// Complete redraw necessary
 11392              		.loc 1 2744 27 discriminator 1 view .LVU3706
 11393 001a D1B1     		cbz	r1, .L1121
 11394              	.L1114:
2751:src/display.c **** 			ShowRPN = 0;
 11395              		.loc 1 2751 4 is_stmt 1 view .LVU3707
 11396 001c FFF7FEFF 		bl	reset_disp
 11397              	.LVL1347:
2752:src/display.c **** 			set_annunciators();
 11398              		.loc 1 2752 4 view .LVU3708
2752:src/display.c **** 			set_annunciators();
 11399              		.loc 1 2752 12 is_stmt 0 view .LVU3709
 11400 0020 114B     		ldr	r3, .L1122+8
 11401 0022 0026     		movs	r6, #0
 11402 0024 1E60     		str	r6, [r3]
2753:src/display.c **** 			set_digits_string( str2, 0 );
 11403              		.loc 1 2753 4 is_stmt 1 view .LVU3710
 11404 0026 FFF7FEFF 		bl	set_annunciators
 11405              	.LVL1348:
2754:src/display.c **** 		}
 11406              		.loc 1 2754 4 view .LVU3711
 11407 002a 3146     		mov	r1, r6
 11408 002c 2046     		mov	r0, r4
 11409 002e FFF7FEFF 		bl	set_digits_string
 11410              	.LVL1349:
2756:src/display.c **** 		finish_display();
 11411              		.loc 1 2756 3 view .LVU3712
 11412 0032 2846     		mov	r0, r5
 11413 0034 FFF7FEFF 		bl	set_status
 11414              	.LVL1350:
2757:src/display.c **** 	}
 11415              		.loc 1 2757 3 view .LVU3713
2759:src/display.c **** 
 11416              		.loc 1 2759 1 is_stmt 0 view .LVU3714
 11417 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11418              		.cfi_remember_state
 11419              		.cfi_restore 14
 11420              		.cfi_restore 7
 11421              		.cfi_restore 6
 11422              		.cfi_restore 5
 11423              		.cfi_restore 4
 11424              		.cfi_restore 3
 11425              		.cfi_def_cfa_offset 0
 11426              	.LVL1351:
2757:src/display.c **** 	}
ARM GAS  /tmp/ccTlkAzC.s 			page 313


 11427              		.loc 1 2757 3 view .LVU3715
 11428 003c FFF7FEBF 		b	finish_display
 11429              	.LVL1352:
 11430              	.L1113:
 11431              		.cfi_restore_state
2750:src/display.c **** 			reset_disp();
 11432              		.loc 1 2750 3 is_stmt 1 view .LVU3716
2750:src/display.c **** 			reset_disp();
 11433              		.loc 1 2750 6 is_stmt 0 view .LVU3717
 11434 0040 0029     		cmp	r1, #0
 11435 0042 EBD1     		bne	.L1114
2756:src/display.c **** 		finish_display();
 11436              		.loc 1 2756 3 is_stmt 1 view .LVU3718
 11437 0044 2846     		mov	r0, r5
 11438              	.LVL1353:
2756:src/display.c **** 		finish_display();
 11439              		.loc 1 2756 3 is_stmt 0 view .LVU3719
 11440 0046 FFF7FEFF 		bl	set_status
 11441              	.LVL1354:
2757:src/display.c **** 	}
 11442              		.loc 1 2757 3 is_stmt 1 view .LVU3720
2759:src/display.c **** 
 11443              		.loc 1 2759 1 is_stmt 0 view .LVU3721
 11444 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11445              		.cfi_remember_state
 11446              		.cfi_restore 14
 11447              		.cfi_restore 7
 11448              		.cfi_restore 6
 11449              		.cfi_restore 5
 11450              		.cfi_restore 4
 11451              		.cfi_restore 3
 11452              		.cfi_def_cfa_offset 0
 11453              	.LVL1355:
2757:src/display.c **** 	}
 11454              		.loc 1 2757 3 view .LVU3722
 11455 004e FFF7FEBF 		b	finish_display
 11456              	.LVL1356:
 11457              	.L1121:
 11458              		.cfi_restore_state
2746:src/display.c **** 		display();
 11459              		.loc 1 2746 3 is_stmt 1 view .LVU3723
2746:src/display.c **** 		display();
 11460              		.loc 1 2746 11 is_stmt 0 view .LVU3724
 11461 0052 064B     		ldr	r3, .L1122+12
 11462 0054 1860     		str	r0, [r3]
2747:src/display.c **** 	}
 11463              		.loc 1 2747 3 is_stmt 1 view .LVU3725
2759:src/display.c **** 
 11464              		.loc 1 2759 1 is_stmt 0 view .LVU3726
 11465 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11466              		.cfi_restore 14
 11467              		.cfi_restore 7
 11468              		.cfi_restore 6
 11469              		.cfi_restore 5
 11470              		.cfi_restore 4
 11471              		.cfi_restore 3
 11472              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccTlkAzC.s 			page 314


2747:src/display.c **** 	}
 11473              		.loc 1 2747 3 view .LVU3727
 11474 005a FFF7FEBF 		b	display
 11475              	.LVL1357:
 11476              	.L1123:
2747:src/display.c **** 	}
 11477              		.loc 1 2747 3 view .LVU3728
 11478 005e 00BF     		.align	2
 11479              	.L1122:
 11480 0060 00000000 		.word	StateWhileOn
 11481 0064 00000000 		.word	WasDataEntry
 11482 0068 00000000 		.word	ShowRPN
 11483 006c 00000000 		.word	DispMsg
 11484              		.cfi_endproc
 11485              	.LFE41:
 11487              		.section	.text.error_message,"ax",%progbits
 11488              		.align	1
 11489              		.p2align 2,,3
 11490              		.global	error_message
 11491              		.syntax unified
 11492              		.thumb
 11493              		.thumb_func
 11494              		.fpu fpv4-sp-d16
 11496              	error_message:
 11497              	.LVL1358:
 11498              	.LFB1:
 121:src/display.c **** #define MSG1(top) top "\0"
 11499              		.loc 1 121 1 is_stmt 1 view -0
 11500              		.cfi_startproc
 11501              		@ args = 0, pretend = 0, frame = 0
 11502              		@ frame_needed = 0, uses_anonymous_args = 0
 126:src/display.c **** 	{
 11503              		.loc 1 126 2 view .LVU3730
 184:src/display.c **** 	{
 11504              		.loc 1 184 2 view .LVU3731
 219:src/display.c **** 		const char *p = error_table[e];
 11505              		.loc 1 219 2 view .LVU3732
 121:src/display.c **** #define MSG1(top) top "\0"
 11506              		.loc 1 121 1 is_stmt 0 view .LVU3733
 11507 0000 38B5     		push	{r3, r4, r5, lr}
 11508              		.cfi_def_cfa_offset 16
 11509              		.cfi_offset 3, -16
 11510              		.cfi_offset 4, -12
 11511              		.cfi_offset 5, -8
 11512              		.cfi_offset 14, -4
 219:src/display.c **** 		const char *p = error_table[e];
 11513              		.loc 1 219 20 view .LVU3734
 11514 0002 1A4B     		ldr	r3, .L1135
 11515 0004 1B68     		ldr	r3, [r3]
 11516 0006 0343     		orrs	r3, r0, r3
 11517 0008 2CD0     		beq	.L1124
 11518              	.LBB572:
 220:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11519              		.loc 1 220 3 is_stmt 1 view .LVU3735
 220:src/display.c **** 		const char *q = find_char(p, '\0') + 1;
 11520              		.loc 1 220 15 is_stmt 0 view .LVU3736
 11521 000a 194B     		ldr	r3, .L1135+4
ARM GAS  /tmp/ccTlkAzC.s 			page 315


 11522 000c 53F82050 		ldr	r5, [r3, r0, lsl #2]
 11523              	.LVL1359:
 221:src/display.c **** 		if (*q == '\0')
 11524              		.loc 1 221 3 is_stmt 1 view .LVU3737
 11525 0010 0446     		mov	r4, r0
 221:src/display.c **** 		if (*q == '\0')
 11526              		.loc 1 221 19 is_stmt 0 view .LVU3738
 11527 0012 0021     		movs	r1, #0
 11528 0014 2846     		mov	r0, r5
 11529              	.LVL1360:
 221:src/display.c **** 		if (*q == '\0')
 11530              		.loc 1 221 19 view .LVU3739
 11531 0016 FFF7FEFF 		bl	find_char
 11532              	.LVL1361:
 222:src/display.c **** 			q = S7_ERROR;
 11533              		.loc 1 222 3 is_stmt 1 view .LVU3740
 222:src/display.c **** 			q = S7_ERROR;
 11534              		.loc 1 222 7 is_stmt 0 view .LVU3741
 11535 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 222:src/display.c **** 			q = S7_ERROR;
 11536              		.loc 1 222 6 view .LVU3742
 11537 001c 9BB9     		cbnz	r3, .L1133
 223:src/display.c **** 		if (*q == 'X') {
 11538              		.loc 1 223 6 view .LVU3743
 11539 001e 1549     		ldr	r1, .L1135+8
 11540              	.L1126:
 11541              	.LVL1362:
 233:src/display.c **** 			State2.disp_freeze = (e != ERR_NONE);
 11542              		.loc 1 233 4 is_stmt 1 view .LVU3744
 11543 0020 2846     		mov	r0, r5
 11544 0022 FFF7FEFF 		bl	message
 11545              	.LVL1363:
 234:src/display.c **** #ifndef REALBUILD
 11546              		.loc 1 234 4 view .LVU3745
 234:src/display.c **** #ifndef REALBUILD
 11547              		.loc 1 234 23 is_stmt 0 view .LVU3746
 11548 0026 144B     		ldr	r3, .L1135+12
 236:src/display.c **** #endif
 11549              		.loc 1 236 4 view .LVU3747
 11550 0028 1449     		ldr	r1, .L1135+16
 234:src/display.c **** #ifndef REALBUILD
 11551              		.loc 1 234 23 view .LVU3748
 11552 002a DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 236:src/display.c **** #endif
 11553              		.loc 1 236 4 view .LVU3749
 11554 002c 51F82410 		ldr	r1, [r1, r4, lsl #2]
 11555 0030 1348     		ldr	r0, .L1135+20
 234:src/display.c **** #ifndef REALBUILD
 11556              		.loc 1 234 28 view .LVU3750
 11557 0032 003C     		subs	r4, r4, #0
 234:src/display.c **** #ifndef REALBUILD
 11558              		.loc 1 234 28 view .LVU3751
 11559 0034 18BF     		it	ne
 11560 0036 0124     		movne	r4, #1
 11561              	.LVL1364:
 234:src/display.c **** #ifndef REALBUILD
 11562              		.loc 1 234 23 view .LVU3752
ARM GAS  /tmp/ccTlkAzC.s 			page 316


 11563 0038 64F30412 		bfi	r2, r4, #4, #1
 11564 003c DA75     		strb	r2, [r3, #23]
 236:src/display.c **** #endif
 11565              		.loc 1 236 4 is_stmt 1 view .LVU3753
 11566              	.LBE572:
 261:src/display.c **** 
 11567              		.loc 1 261 1 is_stmt 0 view .LVU3754
 11568 003e BDE83840 		pop	{r3, r4, r5, lr}
 11569              		.cfi_remember_state
 11570              		.cfi_restore 14
 11571              		.cfi_restore 5
 11572              		.cfi_restore 4
 11573              		.cfi_restore 3
 11574              		.cfi_def_cfa_offset 0
 11575              	.LVL1365:
 11576              	.LBB579:
 236:src/display.c **** #endif
 11577              		.loc 1 236 4 view .LVU3755
 11578 0042 FFF7FEBF 		b	scopy
 11579              	.LVL1366:
 11580              	.L1133:
 11581              		.cfi_restore_state
 224:src/display.c **** 			DispMsg = p;
 11582              		.loc 1 224 3 is_stmt 1 view .LVU3756
 224:src/display.c **** 			DispMsg = p;
 11583              		.loc 1 224 6 is_stmt 0 view .LVU3757
 11584 0046 582B     		cmp	r3, #88
 11585 0048 0DD1     		bne	.L1134
 225:src/display.c **** 			frozen_display();
 11586              		.loc 1 225 4 is_stmt 1 view .LVU3758
 11587              	.LBB573:
 11588              	.LBB574:
2545:src/display.c **** 	display();
 11589              		.loc 1 2545 21 is_stmt 0 view .LVU3759
 11590 004a 0B4C     		ldr	r4, .L1135+12
 11591              	.LVL1367:
2545:src/display.c **** 	display();
 11592              		.loc 1 2545 21 view .LVU3760
 11593              	.LBE574:
 11594              	.LBE573:
 225:src/display.c **** 			frozen_display();
 11595              		.loc 1 225 12 view .LVU3761
 11596 004c 0D4A     		ldr	r2, .L1135+24
 11597              	.LBB577:
 11598              	.LBB575:
2545:src/display.c **** 	display();
 11599              		.loc 1 2545 21 view .LVU3762
 11600 004e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11601              	.LBE575:
 11602              	.LBE577:
 225:src/display.c **** 			frozen_display();
 11603              		.loc 1 225 12 view .LVU3763
 11604 0050 1560     		str	r5, [r2]
 226:src/display.c **** 		}
 11605              		.loc 1 226 4 is_stmt 1 view .LVU3764
 11606              	.LBB578:
 11607              	.LBI573:
ARM GAS  /tmp/ccTlkAzC.s 			page 317


2543:src/display.c **** {
 11608              		.loc 1 2543 6 view .LVU3765
 11609              	.LBB576:
2545:src/display.c **** 	display();
 11610              		.loc 1 2545 2 view .LVU3766
2545:src/display.c **** 	display();
 11611              		.loc 1 2545 21 is_stmt 0 view .LVU3767
 11612 0052 6FF30413 		bfc	r3, #4, #1
 11613 0056 E375     		strb	r3, [r4, #23]
2546:src/display.c **** 	State2.disp_freeze = 1;
 11614              		.loc 1 2546 2 is_stmt 1 view .LVU3768
 11615 0058 FFF7FEFF 		bl	display
 11616              	.LVL1368:
2547:src/display.c **** }
 11617              		.loc 1 2547 2 view .LVU3769
2547:src/display.c **** }
 11618              		.loc 1 2547 21 is_stmt 0 view .LVU3770
 11619 005c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11620 005e 43F01003 		orr	r3, r3, #16
 11621 0062 E375     		strb	r3, [r4, #23]
 11622              	.LVL1369:
 11623              	.L1124:
2547:src/display.c **** }
 11624              		.loc 1 2547 21 view .LVU3771
 11625              	.LBE576:
 11626              	.LBE578:
 11627              	.LBE579:
 261:src/display.c **** 
 11628              		.loc 1 261 1 view .LVU3772
 11629 0064 38BD     		pop	{r3, r4, r5, pc}
 11630              	.LVL1370:
 11631              	.L1134:
 11632              	.LBB580:
 221:src/display.c **** 		if (*q == '\0')
 11633              		.loc 1 221 15 view .LVU3773
 11634 0066 411C     		adds	r1, r0, #1
 11635 0068 DAE7     		b	.L1126
 11636              	.L1136:
 11637 006a 00BF     		.align	2
 11638              	.L1135:
 11639 006c 00000000 		.word	Running
 11640 0070 00000000 		.word	.LANCHOR26
 11641 0074 00000000 		.word	.LANCHOR25
 11642 0078 00000000 		.word	StateWhileOn
 11643 007c 00000000 		.word	.LANCHOR27
 11644 0080 00000000 		.word	LastDisplayedNumber
 11645 0084 00000000 		.word	DispMsg
 11646              	.LBE580:
 11647              		.cfi_endproc
 11648              	.LFE1:
 11650              		.section	.rodata.str1.4,"aMS",%progbits,1
 11651              		.align	2
 11652              	.LC43:
 11653 0000 06316306 		.ascii	"\0061c\006\006\000"
 11653      0600
 11654 0006 0000     		.align	2
 11655              	.LC44:
ARM GAS  /tmp/ccTlkAzC.s 			page 318


 11656 0008 756E0600 		.ascii	"un\006\000"
 11657              		.align	2
 11658              	.LC45:
 11659 000c 736D00   		.ascii	"sm\000"
 11660              		.set	CSWTCH.270,CSWTCH.268
 11661 000f 00       		.align	2
 11662              	.LC46:
 11663 0010 20502072 		.ascii	" P r o g r a m \000"
 11663      206F2067 
 11663      20722061 
 11663      206D2000 
 11664              		.align	2
 11665              	.LC47:
 11666 0020 206F2072 		.ascii	" o r   d a t e \000"
 11666      20202064 
 11666      20612074 
 11666      20652000 
 11667              		.align	2
 11668              	.LC48:
 11669 0030 204F2070 		.ascii	" O p - c o d e \000"
 11669      202D2063 
 11669      206F2064 
 11669      20652000 
 11670              		.align	2
 11671              	.LC49:
 11672 0040 204C2061 		.ascii	" L a b e l \000"
 11672      20622065 
 11672      206C2000 
 11673              		.align	2
 11674              	.LC50:
 11675 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 11675      20652072 
 11675      20612074 
 11675      2069206F 
 11675      206E2000 
 11676              		.align	2
 11677              	.LC51:
 11678 0060 20462075 		.ascii	" F u l l \000"
 11678      206C206C 
 11678      2000
 11679 006a 0000     		.align	2
 11680              	.LC52:
 11681 006c 2043206C 		.ascii	" C l a s h \000"
 11681      20612073 
 11681      20682000 
 11682              		.align	2
 11683              	.LC53:
 11684 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 11684      206F2020 
 11684      2073206D 
 11684      2061206C 
 11684      206C2000 
 11685              		.align	2
 11686              	.LC54:
 11687 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 11687      20742061 
 11687      20202070 
ARM GAS  /tmp/ccTlkAzC.s 			page 319


 11687      206F2069 
 11687      206E2074 
 11688              		.align	2
 11689              	.LC55:
 11690 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 11690      20722061 
 11690      206D2065 
 11690      20742065 
 11690      20722000 
 11691              		.align	2
 11692              	.LC56:
 11693 00b8 20442061 		.ascii	" D a t a \000"
 11693      20742061 
 11693      2000
 11694 00c2 0000     		.align	2
 11695              	.LC57:
 11696 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 11696      206F2074 
 11696      20652063 
 11696      20742065 
 11696      20642000 
 11697              		.align	2
 11698              	.LC58:
 11699 00d8 2046206F 		.ascii	" F o u n d \000"
 11699      2075206E 
 11699      20642000 
 11700              		.align	2
 11701              	.LC59:
 11702 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 11702      2073206D 
 11702      20612074 
 11702      20632068 
 11702      2000
 11703 00f6 0000     		.align	2
 11704              	.LC60:
 11705 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 11705      20732074 
 11705      2061206C 
 11705      206C2065 
 11705      20642000 
 11706              		.global	DIGITS
 11707              		.comm	IoAnnunciator,4,4
 11708              		.comm	IntMaxWindow,4,4
 11709              		.comm	JustDisplayed,4,4
 11710              		.comm	ShowRPN,4,4
 11711              		.comm	forceDispPlot,1,1
 11712              		.comm	LastDisplayedExponent,5,4
 11713              		.comm	LastDisplayedNumber,26,4
 11714              		.comm	LastDisplayedText,31,4
 11715              		.comm	DispPlot,2,2
 11716              		.comm	DispMsg,4,4
 11717              		.global	SvnRevision
 11718              		.section	.rodata
 11719              		.align	2
 11720              		.set	.LANCHOR17,. + 0
 11721              	.LC18:
 11722 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
ARM GAS  /tmp/ccTlkAzC.s 			page 320


 11722      22002E00 
 11722      00
 11723 0009 000000   		.space	3
 11724              	.LC22:
 11725 000c 33345306 		.ascii	"34S\0063.3\006\006\000"
 11725      332E3306 
 11725      0600
 11726 0016 00000000 		.space	4
 11727 001a 0000     		.space	2
 11728              	.LC61:
 11729 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 11729      696E6700 
 11729      50726F47 
 11729      72614D6D 
 11729      00
 11730 002d 000000   		.space	3
 11731              	.LC62:
 11732 0030 446F6D61 		.ascii	"Domain\000\000"
 11732      696E0000 
 11733              	.LC63:
 11734 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 11734      74696D65 
 11734      006F7220 
 11734      64417445 
 11734      00
 11735 0049 000000   		.space	3
 11736              	.LC64:
 11737 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 11737      66696E65 
 11737      64004F70 
 11737      2D434F64 
 11737      4500
 11738 005e 0000     		.space	2
 11739              	.LC65:
 11740 0060 2B9F0000 		.ascii	"+\237\000\000"
 11741              	.LC66:
 11742 0064 2D9F0000 		.ascii	"-\237\000\000"
 11743              	.LC67:
 11744 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 11744      75636800 
 11744      4C416245 
 11744      4C00
 11745 0076 0000     		.space	2
 11746              	.LC68:
 11747 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 11747      67616C00 
 11747      4F504572 
 11747      4174696F 
 11747      6E00
 11748 008a 0000     		.space	2
 11749              	.LC69:
 11750 008c 4F757420 		.ascii	"Out of range\000\000"
 11750      6F662072 
 11750      616E6765 
 11750      0000
 11751 009a 0000     		.space	2
 11752              	.LC70:
ARM GAS  /tmp/ccTlkAzC.s 			page 321


 11753 009c 42616420 		.ascii	"Bad digit\000\000"
 11753      64696769 
 11753      740000
 11754 00a7 00       		.space	1
 11755              	.LC71:
 11756 00a8 546F6F20 		.ascii	"Too long\000\000"
 11756      6C6F6E67 
 11756      0000
 11757 00b2 0000     		.space	2
 11758              	.LC72:
 11759 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 11759      69730046 
 11759      754C4C00 
 11760              	.LC73:
 11761 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 11761      6B00434C 
 11761      41534800 
 11762              	.LC74:
 11763 00cc 42616420 		.ascii	"Bad mode\000\000"
 11763      6D6F6465 
 11763      0000
 11764 00d6 0000     		.space	2
 11765              	.LC75:
 11766 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 11766      06060673 
 11766      697A6500 
 11766      746F6F20 
 11766      534D6D41 
 11767 00ef 00       		.space	1
 11768              	.LC76:
 11769 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 11769      66657700 
 11769      64417441 
 11769      20506F69 
 11769      6E745300 
 11770              	.LC77:
 11771 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 11771      6C696400 
 11771      50617261 
 11771      4D6D4574 
 11771      457200
 11772 0117 00       		.space	1
 11773              	.LC78:
 11774 0118 492F4F00 		.ascii	"I/O\000\000"
 11774      00
 11775 011d 000000   		.space	3
 11776              	.LC79:
 11777 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 11777      6C696400 
 11777      64417441 
 11777      00
 11778 012d 000000   		.space	3
 11779              	.LC80:
 11780 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 11780      65005072 
 11780      6F744563 
 11780      74456400 
ARM GAS  /tmp/ccTlkAzC.s 			page 322


 11781              	.LC81:
 11782 0140 4E6F2072 		.ascii	"No root\000Found\000"
 11782      6F6F7400 
 11782      466F756E 
 11782      6400
 11783 014e 0000     		.space	2
 11784              	.LC82:
 11785 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 11785      6978004D 
 11785      6D49534D 
 11785      6D417443 
 11785      4800
 11786 0162 0000     		.space	2
 11787              	.LC83:
 11788 0164 53696E67 		.ascii	"Singular\000\000"
 11788      756C6172 
 11788      0000
 11789 016e 0000     		.space	2
 11790              	.LC84:
 11791 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 11791      68206973 
 11791      0046754C 
 11791      4C00
 11792 017e 0000     		.space	2
 11793              	.LC85:
 11794 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 11794      72797374 
 11794      616C0049 
 11794      6E537461 
 11794      4C4C4564 
 11795 0195 000000   		.space	3
 11796              	.LC86:
 11797 0198 04201D00 		.ascii	"\004 \035\000X\000"
 11797      5800
 11798              		.section	.bss.DecimalMode,"aw",%nobits
 11799              		.set	.LANCHOR1,. + 0
 11802              	DecimalMode:
 11803 0000 00       		.space	1
 11804              		.section	.bss.SeparatorMode,"aw",%nobits
 11805              		.set	.LANCHOR0,. + 0
 11808              	SeparatorMode:
 11809 0000 00       		.space	1
 11810              		.section	.rodata.CSWTCH.268,"a"
 11811              		.align	2
 11812              		.set	.LANCHOR11,. + 0
 11815              	CSWTCH.268:
 11816 0000 02000000 		.word	2
 11817 0004 08000000 		.word	8
 11818 0008 0A000000 		.word	10
 11819 000c 10000000 		.word	16
 11820              		.section	.rodata.CSWTCH.290,"a"
 11821              		.align	2
 11822              		.set	.LANCHOR16,. + 0
 11825              	CSWTCH.290:
 11826 0000 00000000 		.word	.LC43
 11827 0004 08000000 		.word	.LC44
 11828 0008 0C000000 		.word	.LC45
ARM GAS  /tmp/ccTlkAzC.s 			page 323


 11829              		.section	.rodata.DIGITS,"a"
 11830              		.align	2
 11831              		.set	.LANCHOR12,. + 0
 11834              	DIGITS:
 11835 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 11835      34353637 
 11835      38394142 
 11835      43444546 
 11835      00
 11836              		.section	.rodata.S7_ERROR,"a"
 11837              		.align	2
 11838              		.set	.LANCHOR25,. + 0
 11841              	S7_ERROR:
 11842 0000 4572726F 		.ascii	"Error\000"
 11842      7200
 11843              		.section	.rodata.S7_INF,"a"
 11844              		.align	2
 11845              		.set	.LANCHOR5,. + 0
 11848              	S7_INF:
 11849 0000 496E6669 		.ascii	"Infinity\000"
 11849      6E697479 
 11849      00
 11850              		.section	.rodata.S7_INF_Text,"a"
 11851              		.align	2
 11852              		.set	.LANCHOR7,. + 0
 11855              	S7_INF_Text:
 11856 0000 2049206E 		.ascii	" I n f i n i t y \000"
 11856      20662069 
 11856      206E2069 
 11856      20742079 
 11856      2000
 11857              		.section	.rodata.S7_NEG_INF_Text,"a"
 11858              		.align	2
 11859              		.set	.LANCHOR6,. + 0
 11862              	S7_NEG_INF_Text:
 11863 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 11863      20662069 
 11863      206E2069 
 11863      20742079 
 11863      2000
 11864              		.section	.rodata.S7_NaN,"a"
 11865              		.align	2
 11866              		.set	.LANCHOR3,. + 0
 11869              	S7_NaN:
 11870 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 11870      6E754D6D 
 11870      45726963 
 11870      00
 11871              		.section	.rodata.S7_NaN_Text,"a"
 11872              		.align	2
 11873              		.set	.LANCHOR4,. + 0
 11876              	S7_NaN_Text:
 11877 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 11877      20742020 
 11877      206E2075 
 11877      206D2065 
 11877      20722069 
ARM GAS  /tmp/ccTlkAzC.s 			page 324


 11878              		.section	.rodata.S7_STEP,"a"
 11879              		.align	2
 11880              		.set	.LANCHOR24,. + 0
 11883              	S7_STEP:
 11884 0000 53744550 		.ascii	"StEP \000"
 11884      2000
 11885              		.section	.rodata.S7_STEP_ShortText,"a"
 11886              		.align	2
 11887              		.set	.LANCHOR18,. + 0
 11890              	S7_STEP_ShortText:
 11891 0000 53544550 		.ascii	"STEP\000"
 11891      00
 11892              		.section	.rodata.S7_fract_EQ,"a"
 11893              		.align	2
 11894              		.set	.LANCHOR9,. + 0
 11897              	S7_fract_EQ:
 11898 0000 203D2000 		.ascii	" = \000"
 11899              		.section	.rodata.S7_fract_GT,"a"
 11900              		.align	2
 11901              		.set	.LANCHOR10,. + 0
 11904              	S7_fract_GT:
 11905 0000 20477400 		.ascii	" Gt\000"
 11906              		.section	.rodata.S7_fract_LT,"a"
 11907              		.align	2
 11908              		.set	.LANCHOR8,. + 0
 11911              	S7_fract_LT:
 11912 0000 204C7400 		.ascii	" Lt\000"
 11913              		.section	.rodata.S_SURE,"a"
 11914              		.align	2
 11915              		.set	.LANCHOR20,. + 0
 11918              	S_SURE:
 11919 0000 53757265 		.ascii	"Sure?\000"
 11919      3F00
 11920              		.section	.rodata.SvnRevision,"a"
 11921              		.align	2
 11922              		.set	.LANCHOR19,. + 0
 11925              	SvnRevision:
 11926 0000 30202020 		.ascii	"0   "
 11927              		.section	.rodata.digtbl,"a"
 11928              		.align	2
 11929              		.set	.LANCHOR2,. + 0
 11932              	digtbl:
 11933 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 11933      02421252 
 11933      2D000000 
 11933      00000000 
 11933      00
 11934 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 11934      00000017 
 11934      01000000 
 11934      00
 11935 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 11935      28000000 
 11935      0020664B 
 11935      00000010 
 11936 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 11936      5E5B3973 
ARM GAS  /tmp/ccTlkAzC.s 			page 325


 11936      77497F7B 
 11936      00000612 
 11936      0300787D 
 11937 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 11937      673D240F 
 11937      75266C6D 
 11937      6F7C7914 
 11937      73362F00 
 11938 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 11938      161F7674 
 11938      6735040F 
 11938      75266915 
 11938      177C7914 
 11939 0076 000F003B 		.ascii	"\000\017\000;"
 11940              		.section	.rodata.error_table.8489,"a"
 11941              		.align	2
 11942              		.set	.LANCHOR26,. + 0
 11945              	error_table.8489:
 11946 0000 1C000000 		.word	.LC61
 11947 0004 30000000 		.word	.LC62
 11948 0008 38000000 		.word	.LC63
 11949 000c 4C000000 		.word	.LC64
 11950 0010 60000000 		.word	.LC65
 11951 0014 64000000 		.word	.LC66
 11952 0018 68000000 		.word	.LC67
 11953 001c 78000000 		.word	.LC68
 11954 0020 8C000000 		.word	.LC69
 11955 0024 9C000000 		.word	.LC70
 11956 0028 A8000000 		.word	.LC71
 11957 002c B4000000 		.word	.LC72
 11958 0030 C0000000 		.word	.LC73
 11959 0034 CC000000 		.word	.LC74
 11960 0038 D8000000 		.word	.LC75
 11961 003c F0000000 		.word	.LC76
 11962 0040 04010000 		.word	.LC77
 11963 0044 18010000 		.word	.LC78
 11964 0048 20010000 		.word	.LC79
 11965 004c 30010000 		.word	.LC80
 11966 0050 40010000 		.word	.LC81
 11967 0054 50010000 		.word	.LC82
 11968 0058 64010000 		.word	.LC83
 11969 005c 70010000 		.word	.LC84
 11970 0060 80010000 		.word	.LC85
 11971 0064 98010000 		.word	.LC86
 11972              		.section	.rodata.error_table_text.8490,"a"
 11973              		.align	2
 11974              		.set	.LANCHOR27,. + 0
 11977              	error_table_text.8490:
 11978 0000 10000000 		.word	.LC46
 11979 0004 A8000000 		.word	.LC41
 11980 0008 20000000 		.word	.LC47
 11981 000c 30000000 		.word	.LC48
 11982 0010 A8000000 		.word	.LC41
 11983 0014 A8000000 		.word	.LC41
 11984 0018 40000000 		.word	.LC49
 11985 001c 4C000000 		.word	.LC50
 11986 0020 A8000000 		.word	.LC41
ARM GAS  /tmp/ccTlkAzC.s 			page 326


 11987 0024 A8000000 		.word	.LC41
 11988 0028 A8000000 		.word	.LC41
 11989 002c 60000000 		.word	.LC51
 11990 0030 6C000000 		.word	.LC52
 11991 0034 A8000000 		.word	.LC41
 11992 0038 78000000 		.word	.LC53
 11993 003c 8C000000 		.word	.LC54
 11994 0040 A4000000 		.word	.LC55
 11995 0044 A8000000 		.word	.LC41
 11996 0048 B8000000 		.word	.LC56
 11997 004c C4000000 		.word	.LC57
 11998 0050 D8000000 		.word	.LC58
 11999 0054 E4000000 		.word	.LC59
 12000 0058 A8000000 		.word	.LC41
 12001 005c 60000000 		.word	.LC51
 12002 0060 F8000000 		.word	.LC60
 12003 0064 A8000000 		.word	.LC41
 12004              		.section	.rodata.libname,"a"
 12005              		.align	2
 12006              		.set	.LANCHOR21,. + 0
 12009              	libname:
 12010 0000 72414D6D 		.ascii	"rAMm\000"
 12010      00
 12011 0005 4C696220 		.ascii	"Lib \000"
 12011      00
 12012 000a 42757020 		.ascii	"Bup \000"
 12012      00
 12013 000f 726F4D6D 		.ascii	"roMm\000"
 12013      00
 12014              		.section	.rodata.libname_shorttext,"a"
 12015              		.align	2
 12016              		.set	.LANCHOR23,. + 0
 12019              	libname_shorttext:
 12020 0000 52616D00 		.ascii	"Ram\000"
 12021 0004 00       		.space	1
 12022 0005 4C696200 		.ascii	"Lib\000"
 12023 0009 00       		.space	1
 12024 000a 42757000 		.ascii	"Bup\000"
 12025 000e 00       		.space	1
 12026 000f 526F6D00 		.ascii	"Rom\000"
 12027 0013 00       		.space	1
 12028              		.section	.rodata.libname_text,"a"
 12029              		.align	2
 12030              		.set	.LANCHOR22,. + 0
 12033              	libname_text:
 12034 0000 20522061 		.ascii	" R a m \000"
 12034      206D2000 
 12035 0008 0000     		.space	2
 12036 000a 204C2069 		.ascii	" L i b \000"
 12036      20622000 
 12037 0012 0000     		.space	2
 12038 0014 20422075 		.ascii	" B u p \000"
 12038      20702000 
 12039 001c 0000     		.space	2
 12040 001e 2052206F 		.ascii	" R o m \000"
 12040      206D2000 
 12041 0026 0000     		.space	2
ARM GAS  /tmp/ccTlkAzC.s 			page 327


 12042              		.section	.rodata.shift_chars.8586,"a"
 12043              		.align	2
 12044              		.set	.LANCHOR15,. + 0
 12047              	shift_chars.8586:
 12048 0000 20111213 		.ascii	" \021\022\023"
 12049              		.section	.rodata.small_dots.8773,"a"
 12050              		.align	2
 12051              		.set	.LANCHOR14,. + 0
 12054              	small_dots.8773:
 12055 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12055      07E12C06 
 12055      07E12C06 
 12055      06
 12056              		.section	.rodata.small_minus.8772,"a"
 12057              		.align	2
 12058              		.set	.LANCHOR13,. + 0
 12061              	small_minus.8772:
 12062 0000 07C22D06 		.ascii	"\007\302-\006"
 12063              		.text
 12064              	.Letext0:
 12065              		.file 2 "src/decNumber/decContext.h"
 12066              		.file 3 "src/decNumber/decNumber.h"
 12067              		.file 4 "src/decNumber/decimal64.h"
 12068              		.file 5 "src/decNumber/decimal128.h"
 12069              		.file 6 "src/xeq.h"
 12070              		.file 7 "src/data.h"
 12071              		.file 8 "src/storage.h"
 12072              		.file 9 "src/display.h"
 12073              		.file 10 "src/consts.h"
 12074              		.file 11 "src/stats.h"
 12075              		.file 12 "src/revision.h"
 12076              		.file 13 "src/charset7.h"
 12077              		.file 14 "src/lcd.h"
 12078              		.file 15 "src/decn.h"
 12079              		.file 16 "src/alpha.h"
 12080              		.file 17 "src/int.h"
ARM GAS  /tmp/ccTlkAzC.s 			page 328


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccTlkAzC.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccTlkAzC.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccTlkAzC.s:118    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccTlkAzC.s:125    .text.set_dig:0000000000000000 $t
     /tmp/ccTlkAzC.s:132    .text.set_dig:0000000000000000 set_dig
     /tmp/ccTlkAzC.s:252    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccTlkAzC.s:261    .text.hms_render:0000000000000000 $t
     /tmp/ccTlkAzC.s:268    .text.hms_render:0000000000000000 hms_render
     /tmp/ccTlkAzC.s:467    .text.hms_render:00000000000000a4 $d
     /tmp/ccTlkAzC.s:474    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccTlkAzC.s:481    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccTlkAzC.s:595    .text.hms_step:0000000000000000 $t
     /tmp/ccTlkAzC.s:602    .text.hms_step:0000000000000000 hms_step
     /tmp/ccTlkAzC.s:663    .text.hms_step:0000000000000034 $d
     /tmp/ccTlkAzC.s:668    .text.set_status_sized:0000000000000000 $t
     /tmp/ccTlkAzC.s:675    .text.set_status_sized:0000000000000000 set_status_sized
     /tmp/ccTlkAzC.s:1120   .text.set_status_sized:0000000000000190 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccTlkAzC.s:1128   .rodata.set_exp.str1.4:0000000000000000 $d
     /tmp/ccTlkAzC.s:1132   .text.set_exp:0000000000000000 $t
     /tmp/ccTlkAzC.s:1139   .text.set_exp:0000000000000000 set_exp
     /tmp/ccTlkAzC.s:1360   .text.set_exp:00000000000000b0 $d
     /tmp/ccTlkAzC.s:1366   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccTlkAzC.s:1373   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccTlkAzC.s:1441   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccTlkAzC.s:1447   .text.set_decimal:0000000000000000 $t
     /tmp/ccTlkAzC.s:1454   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccTlkAzC.s:1550   .text.set_decimal:000000000000004c $d
     /tmp/ccTlkAzC.s:1558   .text.set_digits_string:0000000000000000 $t
     /tmp/ccTlkAzC.s:1565   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccTlkAzC.s:1659   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccTlkAzC.s:1663   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccTlkAzC.s:1670   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccTlkAzC.s:1817   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccTlkAzC.s:1829   .text.set_x_hms:0000000000000000 $t
     /tmp/ccTlkAzC.s:1836   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccTlkAzC.s:2337   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccTlkAzC.s:2347   .text.set_x_fract:0000000000000000 $t
     /tmp/ccTlkAzC.s:2354   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccTlkAzC.s:2789   .text.set_x_fract:0000000000000198 $d
     /tmp/ccTlkAzC.s:2804   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccTlkAzC.s:2805   .rodata.carry_overflow.str1.4:0000000000000000 .LC2
     /tmp/ccTlkAzC.s:2808   .text.carry_overflow:0000000000000000 $t
     /tmp/ccTlkAzC.s:2815   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccTlkAzC.s:2951   .text.carry_overflow:0000000000000070 $d
     /tmp/ccTlkAzC.s:2961   .text.set_int_x:0000000000000000 $t
     /tmp/ccTlkAzC.s:2968   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccTlkAzC.s:3723   .text.set_int_x:0000000000000344 $d
               .rodata.CSWTCH.268:0000000000000000 CSWTCH.270
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccTlkAzC.s:3733   .text.set_int_x:000000000000035c $t
     /tmp/ccTlkAzC.s:3783   .text.set_int_x:000000000000038c $d
ARM GAS  /tmp/ccTlkAzC.s 			page 329


     /tmp/ccTlkAzC.s:3789   .text.set_annunciators:0000000000000000 $t
     /tmp/ccTlkAzC.s:3796   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccTlkAzC.s:4132   .text.set_annunciators:00000000000000c8 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccTlkAzC.s:4144   .text.getdig:0000000000000000 $t
     /tmp/ccTlkAzC.s:4152   .text.getdig:0000000000000000 getdig
     /tmp/ccTlkAzC.s:4172   .text.getdig:0000000000000008 $d
     /tmp/ccTlkAzC.s:4177   .text.dot:0000000000000000 $t
     /tmp/ccTlkAzC.s:4185   .text.dot:0000000000000000 dot
     /tmp/ccTlkAzC.s:4208   .text.std_round_fix:0000000000000000 $t
     /tmp/ccTlkAzC.s:4216   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccTlkAzC.s:4297   .text.std_round_fix:000000000000004c $d
     /tmp/ccTlkAzC.s:4303   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccTlkAzC.s:4311   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccTlkAzC.s:4372   .text.set_IO_annunciator:0000000000000020 $d
     /tmp/ccTlkAzC.s:4379   .text.pixel_length:0000000000000000 $t
     /tmp/ccTlkAzC.s:4387   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccTlkAzC.s:4478   .text.set_status:0000000000000000 $t
     /tmp/ccTlkAzC.s:4485   .text.set_status:0000000000000000 set_status
     /tmp/ccTlkAzC.s:4553   .text.set_status:0000000000000034 $d
     /tmp/ccTlkAzC.s:4558   .text.set_x_dn:0000000000000000 $t
     /tmp/ccTlkAzC.s:4566   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccTlkAzC.s:5333   .text.set_x_dn:0000000000000328 $d
     /tmp/ccTlkAzC.s:5342   .text.set_x_dn:000000000000033c $t
     /tmp/ccTlkAzC.s:5459   .text.set_x_dn:00000000000003d8 $d
     /tmp/ccTlkAzC.s:5465   .text.set_x_dn:00000000000003ec $t
     /tmp/ccTlkAzC.s:5490   .text.set_x_dn:0000000000000416 $d
     /tmp/ccTlkAzC.s:5496   .text.set_x_dn:0000000000000420 $t
     /tmp/ccTlkAzC.s:6000   .text.set_x_dn:000000000000063c $d
     /tmp/ccTlkAzC.s:6016   .text.set_x_dn:0000000000000658 $t
     /tmp/ccTlkAzC.s:6730   .text.set_x_dn:0000000000000948 $d
     /tmp/ccTlkAzC.s:6739   .text.set_x:0000000000000000 $t
     /tmp/ccTlkAzC.s:6746   .text.set_x:0000000000000000 set_x
     /tmp/ccTlkAzC.s:6814   .text.format_reg:0000000000000000 $t
     /tmp/ccTlkAzC.s:6822   .text.format_reg:0000000000000000 format_reg
     /tmp/ccTlkAzC.s:6940   .text.format_reg:0000000000000064 $d
     /tmp/ccTlkAzC.s:6946   .text.set_status_right:0000000000000000 $t
     /tmp/ccTlkAzC.s:6953   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccTlkAzC.s:7090   .text.set_status_right:0000000000000060 $d
     /tmp/ccTlkAzC.s:7095   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccTlkAzC.s:7144   .text.annunciators:0000000000000000 $t
     /tmp/ccTlkAzC.s:7151   .text.annunciators:0000000000000000 annunciators
     /tmp/ccTlkAzC.s:7893   .text.annunciators:0000000000000330 $d
     /tmp/ccTlkAzC.s:7914   .text.annunciators:0000000000000378 $t
     /tmp/ccTlkAzC.s:8063   .text.annunciators:000000000000040c $d
     /tmp/ccTlkAzC.s:8077   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccTlkAzC.s:8144   .text.display:0000000000000000 $t
     /tmp/ccTlkAzC.s:8152   .text.display:0000000000000000 display
     /tmp/ccTlkAzC.s:8827   .text.display:00000000000002fc $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccTlkAzC.s:8845   .text.display:0000000000000330 $t
     /tmp/ccTlkAzC.s:9544   .text.display:0000000000000638 $d
     /tmp/ccTlkAzC.s:9574   .text.display:0000000000000690 $t
     /tmp/ccTlkAzC.s:10418  .text.display:00000000000009c0 $d
     /tmp/ccTlkAzC.s:10435  .text.display:00000000000009f4 $t
ARM GAS  /tmp/ccTlkAzC.s 			page 330


     /tmp/ccTlkAzC.s:11164  .text.display:0000000000000cfc $d
     /tmp/ccTlkAzC.s:11186  .text.display:0000000000000d3c $t
     /tmp/ccTlkAzC.s:11289  .text.display:0000000000000da0 $d
     /tmp/ccTlkAzC.s:11300  .text.frozen_display:0000000000000000 $t
     /tmp/ccTlkAzC.s:11308  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccTlkAzC.s:11338  .text.frozen_display:000000000000001c $d
     /tmp/ccTlkAzC.s:11343  .text.message:0000000000000000 $t
     /tmp/ccTlkAzC.s:11351  .text.message:0000000000000000 message
     /tmp/ccTlkAzC.s:11480  .text.message:0000000000000060 $d
     /tmp/ccTlkAzC.s:11488  .text.error_message:0000000000000000 $t
     /tmp/ccTlkAzC.s:11496  .text.error_message:0000000000000000 error_message
     /tmp/ccTlkAzC.s:11639  .text.error_message:000000000000006c $d
     /tmp/ccTlkAzC.s:11651  .rodata.str1.4:0000000000000000 $d
     /tmp/ccTlkAzC.s:11815  .rodata.CSWTCH.268:0000000000000000 CSWTCH.268
     /tmp/ccTlkAzC.s:11834  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccTlkAzC.s:11925  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccTlkAzC.s:11719  .rodata:0000000000000000 $d
     /tmp/ccTlkAzC.s:11802  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccTlkAzC.s:11803  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccTlkAzC.s:11808  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccTlkAzC.s:11809  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccTlkAzC.s:11811  .rodata.CSWTCH.268:0000000000000000 $d
     /tmp/ccTlkAzC.s:11821  .rodata.CSWTCH.290:0000000000000000 $d
     /tmp/ccTlkAzC.s:11825  .rodata.CSWTCH.290:0000000000000000 CSWTCH.290
     /tmp/ccTlkAzC.s:11830  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccTlkAzC.s:11837  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccTlkAzC.s:11841  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccTlkAzC.s:11844  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccTlkAzC.s:11848  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccTlkAzC.s:11851  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccTlkAzC.s:11855  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccTlkAzC.s:11858  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccTlkAzC.s:11862  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccTlkAzC.s:11865  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccTlkAzC.s:11869  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccTlkAzC.s:11872  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccTlkAzC.s:11876  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccTlkAzC.s:11879  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccTlkAzC.s:11883  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccTlkAzC.s:11886  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccTlkAzC.s:11890  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccTlkAzC.s:11893  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccTlkAzC.s:11897  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccTlkAzC.s:11900  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccTlkAzC.s:11904  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccTlkAzC.s:11907  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccTlkAzC.s:11911  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccTlkAzC.s:11914  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccTlkAzC.s:11918  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccTlkAzC.s:11921  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccTlkAzC.s:11928  .rodata.digtbl:0000000000000000 $d
     /tmp/ccTlkAzC.s:11932  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccTlkAzC.s:11941  .rodata.error_table.8489:0000000000000000 $d
     /tmp/ccTlkAzC.s:11945  .rodata.error_table.8489:0000000000000000 error_table.8489
     /tmp/ccTlkAzC.s:11973  .rodata.error_table_text.8490:0000000000000000 $d
     /tmp/ccTlkAzC.s:11977  .rodata.error_table_text.8490:0000000000000000 error_table_text.8490
ARM GAS  /tmp/ccTlkAzC.s 			page 331


     /tmp/ccTlkAzC.s:12005  .rodata.libname:0000000000000000 $d
     /tmp/ccTlkAzC.s:12009  .rodata.libname:0000000000000000 libname
     /tmp/ccTlkAzC.s:12015  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccTlkAzC.s:12019  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccTlkAzC.s:12029  .rodata.libname_text:0000000000000000 $d
     /tmp/ccTlkAzC.s:12033  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccTlkAzC.s:12043  .rodata.shift_chars.8586:0000000000000000 $d
     /tmp/ccTlkAzC.s:12047  .rodata.shift_chars.8586:0000000000000000 shift_chars.8586
     /tmp/ccTlkAzC.s:12050  .rodata.small_dots.8773:0000000000000000 $d
     /tmp/ccTlkAzC.s:12054  .rodata.small_dots.8773:0000000000000000 small_dots.8773
     /tmp/ccTlkAzC.s:12057  .rodata.small_minus.8772:0000000000000000 $d
     /tmp/ccTlkAzC.s:12061  .rodata.small_minus.8772:0000000000000000 small_minus.8772

UNDEFINED SYMBOLS
PersistentRam
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg_0
num_arg
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
ARM GAS  /tmp/ccTlkAzC.s 			page 332


get_trig_mode
get_user_flag
finish_display
Running
dn_1
const_1
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
ProgFree
scopy_char
argcmds
current_catalogue
catcmd
copyreg
sigma_val
get_const
getprog
prt
findmultilbl
find_label_from
StackBase
multicmds
alpha_rcl_s
getX
packed_from_number
set_NaN
do_conv
slen
free_mem
free_flash
monfuncs
global_regs
local_regs
ARM GAS  /tmp/ccTlkAzC.s 			page 333


SizeStatRegs

ARM GAS  /tmp/ccdg5rgB.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/ccdg5rgB.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** #ifndef REALBUILD
  59:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  60:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  61:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  62:src/display.c **** char forceDispPlot;
  63:src/display.c **** #endif
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** #ifndef REALBUILD
  79:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  80:src/display.c **** #endif
  81:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  82:src/display.c **** #ifndef REALBUILD
  83:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  84:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
ARM GAS  /tmp/ccdg5rgB.s 			page 3


  88:src/display.c **** #ifndef REALBUILD
  89:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  90:src/display.c **** #endif
  91:src/display.c **** 
  92:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  93:src/display.c **** static const char S7_fract_LT[] = " Lt";
  94:src/display.c **** static const char S7_fract_GT[] = " Gt";
  95:src/display.c **** 
  96:src/display.c **** static const char libname[][5] = {
  97:src/display.c ****   "rAMm", "Lib ", "Bup ",
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c ****   "roMm"
 100:src/display.c **** #endif
 101:src/display.c **** };
 102:src/display.c **** 
 103:src/display.c **** #ifndef REALBUILD
 104:src/display.c **** static const char libname_text[][10] = {
 105:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 106:src/display.c **** };
 107:src/display.c **** static const char libname_shorttext[][5] = {
 108:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 109:src/display.c **** };
 110:src/display.c **** #endif
 111:src/display.c **** 
 112:src/display.c **** 
 113:src/display.c **** /* Set the separator and decimal mode globals
 114:src/display.c ****  */
 115:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 115 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 116:src/display.c ****   // Separators used by various modes
 117:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 117 3 view .LVU1
  35              		.loc 1 117 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 118:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 118 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 117 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 117 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 115:src/display.c ****   // Separators used by various modes
  44              		.loc 1 115 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 117 6 view .LVU7
  50 0010 0ED0     		beq	.L2
ARM GAS  /tmp/ccdg5rgB.s 			page 4


  51              		.loc 1 118 5 is_stmt 1 view .LVU8
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 119 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 120:src/display.c ****   }
 121:src/display.c ****   else {
 122:src/display.c ****     SeparatorMode = SEP_COMMA;
 123:src/display.c ****     DecimalMode = DECIMAL_DOT;
 124:src/display.c ****   }
 125:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 125 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 119 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 118 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 119 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 125 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 118 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 119 5 is_stmt 1 view .LVU16
  67              		.loc 1 125 3 view .LVU17
  68              		.loc 1 125 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 125 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 126:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 126 5 is_stmt 1 view .LVU20
  76              		.loc 1 126 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 127:src/display.c **** }
  80              		.loc 1 127 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 122 5 is_stmt 1 view .LVU23
 123:src/display.c ****   }
  90              		.loc 1 123 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
ARM GAS  /tmp/ccdg5rgB.s 			page 5


 125:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 125 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
 123:src/display.c ****   }
  94              		.loc 1 123 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 122 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 125:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 125 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 122 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 123:src/display.c ****   }
 102              		.loc 1 123 5 is_stmt 1 view .LVU30
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 125 3 view .LVU31
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 125 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 125 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 127 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 128:src/display.c **** 
 129:src/display.c **** 
 130:src/display.c **** /* Table of error messages.
 131:src/display.c ****  * These consist of a double string.  The first is displayed in the
 132:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 133:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
ARM GAS  /tmp/ccdg5rgB.s 			page 6


 134:src/display.c ****  */
 135:src/display.c **** void error_message(const unsigned int e) 
 136:src/display.c **** {
 137:src/display.c **** #define MSG1(top) top "\0"
 138:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 139:src/display.c **** 
 140:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 141:src/display.c ****   static const char *const error_table[] = 
 142:src/display.c ****     {
 143:src/display.c ****       // manually get the order correct!
 144:src/display.c ****       MSG2("Running", "ProGraMm"),
 145:src/display.c ****       MSG1("Domain"),
 146:src/display.c ****       MSG2("Bad time", "or dAtE"),
 147:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 148:src/display.c ****       MSG1("+\237"),
 149:src/display.c ****       MSG1("-\237"),
 150:src/display.c ****       MSG2("No such", "LAbEL"),
 151:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 152:src/display.c ****       MSG1("Out of range"),
 153:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 154:src/display.c ****       MSG2("Bad digit", "1"),
 155:src/display.c ****       MSG2("Too long", "1"),
 156:src/display.c **** #else
 157:src/display.c ****       MSG1("Bad digit"),
 158:src/display.c ****       MSG1("Too long"),
 159:src/display.c **** #endif
 160:src/display.c ****       MSG2("RAM is", "FuLL"),
 161:src/display.c ****       MSG2("Stack", "CLASH"),
 162:src/display.c ****       MSG1("Bad mode"),
 163:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 164:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 165:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 166:src/display.c ****       MSG1("I/O"),
 167:src/display.c ****       MSG2("Invalid", "dAtA"),
 168:src/display.c ****       MSG2("Write", "ProtEctEd"),
 169:src/display.c ****       MSG2("No root", "Found"),
 170:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 171:src/display.c ****       MSG1("Singular"),
 172:src/display.c ****       MSG2("Flash is", "FuLL"),
 173:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 174:src/display.c **** #ifndef SHIFT_EXPONENT
 175:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 176:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 177:src/display.c ****       MSG2("Too\007\304 small", "1"),
 178:src/display.c **** #     else
 179:src/display.c ****       MSG2("Too small", "1"),
 180:src/display.c **** #     endif
 181:src/display.c ****       MSG2("Too big", "1"),
 182:src/display.c **** #  else
 183:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 184:src/display.c ****       MSG1("Too\007\304 small"),
 185:src/display.c **** #     else
 186:src/display.c ****       MSG1("Too small"),
 187:src/display.c **** #     endif
 188:src/display.c ****       MSG1("Too big"),
 189:src/display.c **** #  endif
 190:src/display.c **** #endif
ARM GAS  /tmp/ccdg5rgB.s 			page 7


 191:src/display.c **** #ifdef INCLUDE_C_LOCK
 192:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 193:src/display.c **** #endif
 194:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 195:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 196:src/display.c ****       MSG2("Interrupted", "X"),
 197:src/display.c **** #endif
 198:src/display.c ****     };
 199:src/display.c **** #undef MSG1
 200:src/display.c **** #undef MSG2
 201:src/display.c **** #ifndef REALBUILD
 202:src/display.c ****   static const char *const error_table_text[] =
 203:src/display.c ****     {
 204:src/display.c ****       " P r o g r a m ",
 205:src/display.c ****       "",
 206:src/display.c ****       " o r   d a t e ",
 207:src/display.c ****       " O p - c o d e ",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " L a b e l ",
 211:src/display.c ****       " O p e r a t i o n ",
 212:src/display.c ****       "",
 213:src/display.c ****       "",
 214:src/display.c ****       "",
 215:src/display.c ****       " F u l l ",
 216:src/display.c ****       " C l a s h ",
 217:src/display.c ****       "",
 218:src/display.c ****       " T o o   s m a l l ",
 219:src/display.c ****       " D a t a   p o i n t s ",
 220:src/display.c ****       " P a r a m e t e r ",
 221:src/display.c ****       "",
 222:src/display.c ****       " D a t a ",
 223:src/display.c ****       " P r o t e c t e d ",
 224:src/display.c ****       " F o u n d ",
 225:src/display.c ****       " M i s m a t c h ",
 226:src/display.c ****       "",
 227:src/display.c ****       " F u l l ",
 228:src/display.c ****       " I n s t a l l e d ",
 229:src/display.c **** #ifndef SHIFT_EXPONENT
 230:src/display.c ****       "",
 231:src/display.c ****       "",
 232:src/display.c **** #endif
 233:src/display.c **** #ifdef INCLUDE_C_LOCK
 234:src/display.c ****       "",
 235:src/display.c **** #endif
 236:src/display.c ****       "",
 237:src/display.c ****     };
 238:src/display.c **** #endif
 239:src/display.c **** 
 240:src/display.c ****   if (e != ERR_NONE || Running) {
 241:src/display.c ****     const char *p = error_table[e];
 242:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 243:src/display.c ****     if (*q == '\0')
 244:src/display.c ****       q = S7_ERROR;
 245:src/display.c ****     if (*q == 'X') {
 246:src/display.c ****       DispMsg = p;
 247:src/display.c ****       frozen_display();
ARM GAS  /tmp/ccdg5rgB.s 			page 8


 248:src/display.c ****     }
 249:src/display.c ****     else {
 250:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 251:src/display.c ****       if (*q == '1')
 252:src/display.c **** 	q = CNULL;
 253:src/display.c **** #endif
 254:src/display.c ****       message(p, q);
 255:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 256:src/display.c **** #ifndef REALBUILD
 257:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 258:src/display.c **** #endif
 259:src/display.c ****     }
 260:src/display.c **** #ifdef INFRARED
 261:src/display.c ****     if (Tracing) {
 262:src/display.c ****       if (*q == 'X')
 263:src/display.c **** 	print_reg(regX_idx, p, 0);
 264:src/display.c ****       else {
 265:src/display.c **** 	print_tab(0);
 266:src/display.c **** 	print_line(p, 0);
 267:src/display.c **** 	print(' ');
 268:src/display.c **** 	while (*q != '\0') {
 269:src/display.c **** 	  int c = *q;
 270:src/display.c **** 	  if (c >= 'A')
 271:src/display.c **** 	    c |= 0x60; // ASCII lower case
 272:src/display.c **** 	  print(c);
 273:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 274:src/display.c **** 	    ++q;
 275:src/display.c **** 	  ++q;
 276:src/display.c **** 	}
 277:src/display.c **** 	print_advance( 0 );
 278:src/display.c ****       }
 279:src/display.c ****     }
 280:src/display.c **** #endif
 281:src/display.c ****   }
 282:src/display.c **** }
 283:src/display.c **** 
 284:src/display.c **** 
 285:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 286:src/display.c ****  * display.
 287:src/display.c ****  */
 288:src/display.c **** #define D_TOP 64
 289:src/display.c **** #define D_TL 32
 290:src/display.c **** #define D_TR 8
 291:src/display.c **** #define D_MIDDLE 16
 292:src/display.c **** #define D_BL 4
 293:src/display.c **** #define D_BR 1
 294:src/display.c **** #define D_BOTTOM 2
 295:src/display.c **** 
 296:src/display.c **** #include "charset7.h"
 297:src/display.c **** 
 298:src/display.c **** #ifndef REALBUILD
 299:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 300:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 301:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 302:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 303:src/display.c **** 
 304:src/display.c **** static void set_mant_sign_dot()
ARM GAS  /tmp/ccdg5rgB.s 			page 9


 305:src/display.c **** {
 306:src/display.c ****   LastDisplayedNumber[0]='-';
 307:src/display.c ****   set_dot(MANT_SIGN);
 308:src/display.c **** }
 309:src/display.c **** 
 310:src/display.c **** static void clr_mant_sign_dot()
 311:src/display.c **** {
 312:src/display.c ****   LastDisplayedNumber[0]=' ';
 313:src/display.c ****   clr_dot(MANT_SIGN);
 314:src/display.c **** }
 315:src/display.c **** 
 316:src/display.c **** static void set_exp_sign_dot()
 317:src/display.c **** {
 318:src/display.c ****   LastDisplayedExponent[0]='-';
 319:src/display.c ****   set_dot(EXP_SIGN);
 320:src/display.c **** }
 321:src/display.c **** 
 322:src/display.c **** static void clr_exp_sign_dot()
 323:src/display.c **** {
 324:src/display.c ****   LastDisplayedExponent[0]=' ';
 325:src/display.c ****   clr_dot(EXP_SIGN);
 326:src/display.c **** }
 327:src/display.c **** 
 328:src/display.c **** #else
 329:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 330:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 331:src/display.c **** 
 332:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 333:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 334:src/display.c **** 
 335:src/display.c **** #endif
 336:src/display.c **** 
 337:src/display.c **** #ifndef REALBUILD
 338:src/display.c **** int getdig(int ch)
 339:src/display.c **** #else
 340:src/display.c ****   static int getdig(int ch)
 341:src/display.c **** #endif
 342:src/display.c **** {
 343:src/display.c ****   // perform index lookup
 344:src/display.c ****   return digtbl[ch&0xff];
 345:src/display.c **** }
 346:src/display.c **** 
 347:src/display.c **** void dot(int n, int on) {
 348:src/display.c ****   if (on)	set_dot(n);
 349:src/display.c ****   else	clr_dot(n);
 350:src/display.c **** }
 351:src/display.c **** 
 352:src/display.c **** 
 353:src/display.c **** /* Set the decimal point *after* the indicated digit
 354:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 355:src/display.c ****  * of decimal.
 356:src/display.c ****  */
 357:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 358:src/display.c ****   if (res) {
 359:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 360:src/display.c ****   } else {
 361:src/display.c ****     set_dot(posn+7);
ARM GAS  /tmp/ccdg5rgB.s 			page 10


 362:src/display.c ****     if (decimal != DECIMAL_DOT)
 363:src/display.c ****       set_dot(posn+8);
 364:src/display.c **** #ifndef REALBUILD
 365:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 366:src/display.c **** #endif
 367:src/display.c ****   }
 368:src/display.c ****   return res;
 369:src/display.c **** }
 370:src/display.c **** 
 371:src/display.c **** /* Set the digit group separator *before* the specified digit.
 372:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 373:src/display.c ****  * sep argument.
 374:src/display.c ****  */
 375:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 376:src/display.c ****   if (sep == SEP_NONE)
 377:src/display.c ****     return res;
 378:src/display.c ****   if (res) {
 379:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 380:src/display.c ****     else *res++ = '.';
 381:src/display.c ****   } else {
 382:src/display.c ****     posn -= SEGS_PER_DIGIT;
 383:src/display.c ****     set_dot(posn+7);
 384:src/display.c ****     if (sep == SEP_COMMA)
 385:src/display.c ****       set_dot(posn+8);
 386:src/display.c **** #ifndef REALBUILD
 387:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 388:src/display.c **** #endif
 389:src/display.c ****   }
 390:src/display.c ****   return res;
 391:src/display.c **** }
 392:src/display.c **** 
 393:src/display.c **** /* Set a digit in positions [base, base+6] */
 394:src/display.c **** static void set_dig(int base, int ch)
 395:src/display.c **** {
 136              		.loc 1 395 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/display.c ****   int i;
 140              		.loc 1 396 3 view .LVU36
 397:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 397 3 view .LVU37
 142              	.LBB178:
 143              	.LBI178:
 338:src/display.c **** #else
 144              		.loc 1 338 5 view .LVU38
 145              	.LBB179:
 344:src/display.c **** }
 146              		.loc 1 344 3 view .LVU39
 344:src/display.c **** }
 147              		.loc 1 344 16 is_stmt 0 view .LVU40
 148 0000 184A     		ldr	r2, .L27
 344:src/display.c **** }
 149              		.loc 1 344 19 view .LVU41
 150 0002 CBB2     		uxtb	r3, r1
 151              	.LBE179:
 152              	.LBE178:
ARM GAS  /tmp/ccdg5rgB.s 			page 11


 398:src/display.c **** #ifndef REALBUILD
 399:src/display.c ****   if(base<SEGS_EXP_BASE)
 153              		.loc 1 399 5 view .LVU42
 154 0004 6B28     		cmp	r0, #107
 395:src/display.c ****   int i;
 155              		.loc 1 395 1 view .LVU43
 156 0006 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB181:
 163              	.LBB180:
 344:src/display.c **** }
 164              		.loc 1 344 16 view .LVU44
 165 0008 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 166              	.LVL1:
 344:src/display.c **** }
 167              		.loc 1 344 16 view .LVU45
 168              	.LBE180:
 169              	.LBE181:
 170              		.loc 1 399 3 is_stmt 1 view .LVU46
 171              		.loc 1 399 5 is_stmt 0 view .LVU47
 172 000a 1EDC     		bgt	.L17
 400:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 173              		.loc 1 400 5 is_stmt 1 view .LVU48
 174              		.loc 1 400 30 is_stmt 0 view .LVU49
 175 000c 164C     		ldr	r4, .L27+4
 176              		.loc 1 400 39 view .LVU50
 177 000e 174B     		ldr	r3, .L27+8
 178              		.loc 1 400 30 view .LVU51
 179 0010 84FB0024 		smull	r2, r4, r4, r0
 180 0014 C217     		asrs	r2, r0, #31
 181 0016 C2EB6402 		rsb	r2, r2, r4, asr #1
 182              		.loc 1 400 39 view .LVU52
 183 001a 0029     		cmp	r1, #0
 184 001c 03EB4203 		add	r3, r3, r2, lsl #1
 185 0020 08BF     		it	eq
 186 0022 2021     		moveq	r1, #32
 187              	.LVL2:
 188              		.loc 1 400 39 view .LVU53
 189 0024 5970     		strb	r1, [r3, #1]
 190              	.L19:
 191 0026 851D     		adds	r5, r0, #6
 192 0028 0624     		movs	r4, #6
 193 002a 03E0     		b	.L22
 194              	.LVL3:
 195              	.L26:
 401:src/display.c ****   else
 402:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 403:src/display.c **** #endif
 404:src/display.c ****   for (i=6; i>=0; i--)
 405:src/display.c ****     {
 406:src/display.c ****       //		dot(base, c & (1 << i));
 407:src/display.c ****       if (c & (1 << i))
 408:src/display.c **** 	set_dot(base);
ARM GAS  /tmp/ccdg5rgB.s 			page 12


 196              		.loc 1 408 2 view .LVU54
 197 002c FFF7FEFF 		bl	set_dot
 198              	.LVL4:
 409:src/display.c ****       else
 410:src/display.c **** 	clr_dot(base);
 411:src/display.c ****       base++;
 199              		.loc 1 411 7 is_stmt 1 view .LVU55
 404:src/display.c ****     {
 200              		.loc 1 404 19 view .LVU56
 404:src/display.c ****     {
 201              		.loc 1 404 3 is_stmt 0 view .LVU57
 202 0030 013C     		subs	r4, r4, #1
 203              	.LVL5:
 404:src/display.c ****     {
 204              		.loc 1 404 3 view .LVU58
 205 0032 09D3     		bcc	.L25
 206              	.LVL6:
 207              	.L22:
 408:src/display.c ****       else
 208              		.loc 1 408 2 is_stmt 1 view .LVU59
 410:src/display.c ****       base++;
 209              		.loc 1 410 2 view .LVU60
 407:src/display.c **** 	set_dot(base);
 210              		.loc 1 407 11 is_stmt 0 view .LVU61
 211 0034 46FA04F3 		asr	r3, r6, r4
 407:src/display.c **** 	set_dot(base);
 212              		.loc 1 407 10 view .LVU62
 213 0038 DB07     		lsls	r3, r3, #31
 214 003a A5EB0400 		sub	r0, r5, r4
 215              	.LVL7:
 407:src/display.c **** 	set_dot(base);
 216              		.loc 1 407 7 is_stmt 1 view .LVU63
 407:src/display.c **** 	set_dot(base);
 217              		.loc 1 407 10 is_stmt 0 view .LVU64
 218 003e F5D4     		bmi	.L26
 410:src/display.c ****       base++;
 219              		.loc 1 410 2 view .LVU65
 220 0040 FFF7FEFF 		bl	clr_dot
 221              	.LVL8:
 222              		.loc 1 411 7 is_stmt 1 view .LVU66
 404:src/display.c ****     {
 223              		.loc 1 404 19 view .LVU67
 404:src/display.c ****     {
 224              		.loc 1 404 3 is_stmt 0 view .LVU68
 225 0044 013C     		subs	r4, r4, #1
 226              	.LVL9:
 404:src/display.c ****     {
 227              		.loc 1 404 3 view .LVU69
 228 0046 F5D2     		bcs	.L22
 229              	.LVL10:
 230              	.L25:
 412:src/display.c ****     }
 413:src/display.c **** }
 231              		.loc 1 413 1 view .LVU70
 232 0048 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL11:
 234              	.L17:
ARM GAS  /tmp/ccdg5rgB.s 			page 13


 402:src/display.c **** #endif
 235              		.loc 1 402 5 is_stmt 1 view .LVU71
 402:src/display.c **** #endif
 236              		.loc 1 402 47 is_stmt 0 view .LVU72
 237 004a 094B     		ldr	r3, .L27+12
 402:src/display.c **** #endif
 238              		.loc 1 402 53 view .LVU73
 239 004c 094C     		ldr	r4, .L27+16
 402:src/display.c **** #endif
 240              		.loc 1 402 32 view .LVU74
 241 004e A0F16C02 		sub	r2, r0, #108
 402:src/display.c **** #endif
 242              		.loc 1 402 47 view .LVU75
 243 0052 A3FB0253 		umull	r5, r3, r3, r2
 244 0056 D21A     		subs	r2, r2, r3
 245 0058 03EB5203 		add	r3, r3, r2, lsr #1
 402:src/display.c **** #endif
 246              		.loc 1 402 53 view .LVU76
 247 005c 04EB9303 		add	r3, r4, r3, lsr #2
 248 0060 5970     		strb	r1, [r3, #1]
 249 0062 E0E7     		b	.L19
 250              	.L28:
 251              		.align	2
 252              	.L27:
 253 0064 00000000 		.word	.LANCHOR2
 254 0068 398EE338 		.word	954437177
 255 006c 00000000 		.word	LastDisplayedNumber
 256 0070 25499224 		.word	613566757
 257 0074 00000000 		.word	LastDisplayedExponent
 258              		.cfi_endproc
 259              	.LFE10:
 261              		.section	.text.hms_render,"ax",%progbits
 262              		.align	1
 263              		.p2align 2,,3
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	hms_render:
 270              	.LVL12:
 271              	.LFB21:
 414:src/display.c **** 
 415:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 416:src/display.c ****   if (res) *res++ = ch;
 417:src/display.c ****   else	set_dig(base, ch);
 418:src/display.c ****   return res;
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** 
 422:src/display.c **** static void set_digits_string(const char *msg, int j) {
 423:src/display.c ****   for (; *msg != '\0'; msg++) {
 424:src/display.c ****     if (*msg == '.' || *msg == ',')
 425:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 426:src/display.c ****     else {
 427:src/display.c ****       set_dig_s(j, *msg, CNULL);
 428:src/display.c ****       j += SEGS_PER_DIGIT;
 429:src/display.c ****     }
ARM GAS  /tmp/ccdg5rgB.s 			page 14


 430:src/display.c ****   }
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 434:src/display.c ****   int i;
 435:src/display.c ****   const int n = res == NULL ? 3 : 4;
 436:src/display.c **** 
 437:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 438:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 439:src/display.c **** }
 440:src/display.c **** 
 441:src/display.c **** /* Force the exponent display
 442:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 443:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 444:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 445:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 446:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 447:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 448:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 449:src/display.c ****  */
 450:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 451:src/display.c ****   union {
 452:src/display.c ****     char buf[4];
 453:src/display.c ****     int i;
 454:src/display.c ****   } u;
 455:src/display.c ****   int negative;
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 457:src/display.c ****   int thousands;
 458:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 459:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 460:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 461:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 462:src/display.c **** #  else
 463:src/display.c ****   const int show_large_exponent = 1;
 464:src/display.c **** #  endif
 465:src/display.c **** #else
 466:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 467:src/display.c ****   int thousands;
 468:src/display.c **** #  endif
 469:src/display.c ****   const int show_large_exponent = 0;
 470:src/display.c **** #endif
 471:src/display.c **** 
 472:src/display.c ****   negative = flags & 2;
 473:src/display.c ****   if (exp < 0) {
 474:src/display.c ****     negative = 1;
 475:src/display.c ****     exp = -exp;
 476:src/display.c ****   }
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c ****   thousands = exp / 1000;
 479:src/display.c **** #endif
 480:src/display.c ****   if (res) {
 481:src/display.c **** #ifdef INCLUDE_YREG_CODE
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 483:src/display.c ****     if (thousands != 0) {
 484:src/display.c **** #else
 485:src/display.c ****       if (exp > 999) {
 486:src/display.c **** #endif
ARM GAS  /tmp/ccdg5rgB.s 			page 15


 487:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 488:src/display.c **** 	// No exponent separator for large -ve exponents
 489:src/display.c ****       }
 490:src/display.c ****       else *res++ = 'e'; // Normal separator
 491:src/display.c **** #else
 492:src/display.c ****       *res++ = 'e';
 493:src/display.c **** #endif
 494:src/display.c ****       if (negative) *res++ = '-';
 495:src/display.c ****     }
 496:src/display.c ****     else {
 497:src/display.c ****       if (negative) SET_EXP_SIGN;
 498:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 499:src/display.c ****       if (thousands != 0) {
 500:src/display.c **** #else
 501:src/display.c **** 	if (exp > 999) {
 502:src/display.c **** #endif
 503:src/display.c **** 	  if (!show_large_exponent
 504:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 505:src/display.c **** 	      && (flags & 8) == 0
 506:src/display.c **** #endif
 507:src/display.c **** 	      ) {
 508:src/display.c **** #ifdef REALBUILD
 509:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 510:src/display.c **** #else
 511:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 512:src/display.c **** #endif
 513:src/display.c **** 	    goto no_number;
 514:src/display.c **** 	  }
 515:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 516:src/display.c **** 	  else {
 517:src/display.c **** 	    exp -= thousands * 1000;
 518:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 519:src/display.c **** 	    if (flags & 16) {
 520:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 521:src/display.c **** 	      int i;
 522:src/display.c **** 
 523:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 524:src/display.c **** 		// Clear digits and separators
 525:src/display.c **** 		clr_dot(i);
 526:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 527:src/display.c **** 	    }
 528:src/display.c **** #  endif
 529:src/display.c **** 	    if (negative) {
 530:src/display.c **** 	      CLR_EXP_SIGN;
 531:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 532:src/display.c **** 	    }
 533:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 534:src/display.c **** 	    flags = 1;
 535:src/display.c **** 	  }
 536:src/display.c **** #endif
 537:src/display.c **** 	}
 538:src/display.c ****       }
 539:src/display.c **** #ifdef REALBUILD
 540:src/display.c ****       u.i = 0; // Smaller ARM code
 541:src/display.c **** #else
 542:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 543:src/display.c **** #endif
ARM GAS  /tmp/ccdg5rgB.s 			page 16


 544:src/display.c ****       if (flags & 5) {
 545:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 546:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 547:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 548:src/display.c **** 	  int i;
 549:src/display.c **** 
 550:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 551:src/display.c **** 	    if (u.buf[i] == '0')
 552:src/display.c **** 	      u.buf[i] = ' ';
 553:src/display.c **** 	    else
 554:src/display.c **** 	      break;
 555:src/display.c **** 	  }
 556:src/display.c **** 	  if (i != 0 && negative) {
 557:src/display.c **** 	    // Move minus sign to right in front of exponent
 558:src/display.c **** 	    CLR_EXP_SIGN;
 559:src/display.c **** 	    u.buf[i - 1] = '-';
 560:src/display.c **** 	  }
 561:src/display.c **** 	}
 562:src/display.c **** #endif
 563:src/display.c ****       }
 564:src/display.c ****       else
 565:src/display.c **** 	num_arg(u.buf, exp);
 566:src/display.c ****     no_number:
 567:src/display.c ****       set_exp_digits_string(u.buf, res);
 568:src/display.c ****     }
 569:src/display.c **** 
 570:src/display.c ****     static void carry_overflow(void) {
 571:src/display.c ****       const int base = SEGS_EXP_BASE;
 572:src/display.c ****       int c;
 573:src/display.c ****       unsigned int b;
 574:src/display.c **** 
 575:src/display.c ****       // Figure out the base
 576:src/display.c ****       switch (State2.smode) {
 577:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 578:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 579:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 580:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 581:src/display.c ****       default:	b = UState.int_base+1;	break;
 582:src/display.c ****       }
 583:src/display.c **** 
 584:src/display.c ****       // Display the base as the first exponent digit
 585:src/display.c ****       if (b > 10 && b < 16)
 586:src/display.c **** 	SET_EXP_SIGN;
 587:src/display.c ****       c = "B34567o9D12345h"[b-2];
 588:src/display.c ****       set_dig(base, c);
 589:src/display.c **** 
 590:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 591:src/display.c ****       if (get_carry())
 592:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 593:src/display.c ****       if (get_overflow())
 594:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 595:src/display.c ****     }
 596:src/display.c **** 
 597:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 598:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 599:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 600:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
ARM GAS  /tmp/ccdg5rgB.s 			page 17


 601:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 602:src/display.c **** #endif
 603:src/display.c **** 
 604:src/display.c ****     /* Display the annunicator text line.
 605:src/display.c ****      * Care needs to be taken to keep things aligned.
 606:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 607:src/display.c ****      */
 608:src/display.c **** #ifdef TOP_ROW
 609:src/display.c ****     static void annunciators(void) {
 610:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 611:src/display.c ****       char buf[42], *p = buf, *q="";
 612:src/display.c ****       char buf2[42], *p2 = buf2;
 613:src/display.c ****       int n;
 614:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 615:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 616:src/display.c ****       // Constant variables and code branches depending on a constant variable
 617:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 618:src/display.c ****       // feature run-time configurable if needed.
 619:src/display.c **** #ifdef INCLUDE_YREG_CODE
 620:src/display.c **** #  ifdef YREG_ALWAYS_ON
 621:src/display.c ****       const int yreg_enabled = 1;
 622:src/display.c **** #  else
 623:src/display.c ****       const int yreg_enabled = UState.show_y;
 624:src/display.c **** #  endif
 625:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 626:src/display.c ****       const int yreg_hms = 1;
 627:src/display.c **** #  else
 628:src/display.c ****       const int yreg_hms = 0;
 629:src/display.c **** #  endif
 630:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 631:src/display.c ****       const int yreg_fract = 1;
 632:src/display.c **** #  else
 633:src/display.c ****       const int yreg_fract = 0;
 634:src/display.c **** #  endif
 635:src/display.c **** #else
 636:src/display.c ****       const int yreg_enabled = 0;
 637:src/display.c ****       const int yreg_hms = 0;
 638:src/display.c ****       const int yreg_fract = 0;
 639:src/display.c **** #endif
 640:src/display.c **** #ifdef RP_PREFIX
 641:src/display.c ****       const int rp_prefix = 1;
 642:src/display.c **** #else
 643:src/display.c ****       const int rp_prefix = 0;
 644:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 645:src/display.c **** #endif
 646:src/display.c ****       // Indicates whether font escape code is compiled in.
 647:src/display.c ****       // This variable will always be set at compile time.
 648:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 649:src/display.c ****       const int has_FONT_ESCAPE = 1;
 650:src/display.c **** #else
 651:src/display.c ****       const int has_FONT_ESCAPE = 0;
 652:src/display.c **** #endif
 653:src/display.c **** 
 654:src/display.c ****       xset(buf, '\0', sizeof(buf));
 655:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 656:src/display.c ****       
 657:src/display.c ****       if (is_intmode()) {
ARM GAS  /tmp/ccdg5rgB.s 			page 18


 658:src/display.c **** #ifdef SHOW_STACK_SIZE
 659:src/display.c **** 	if (shift_char == ' ') {
 660:src/display.c **** 	  *p2++ = '\007';
 661:src/display.c **** 	  *p2++ = '\346';
 662:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 663:src/display.c **** 	}
 664:src/display.c **** 	else
 665:src/display.c **** #endif
 666:src/display.c **** 	  {
 667:src/display.c **** 	    *p2++ = shift_char;
 668:src/display.c **** 	    *p2++ = '\006';
 669:src/display.c **** 	  }
 670:src/display.c **** 
 671:src/display.c **** 	switch(int_mode()) {
 672:src/display.c **** 	default:
 673:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 674:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 675:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 676:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 677:src/display.c **** 	}
 678:src/display.c **** 	q = scopy(p2, q);
 679:src/display.c **** 	*q++ = '\006';
 680:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 681:src/display.c **** 
 682:src/display.c **** 	if (IntMaxWindow > 0) {
 683:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 684:src/display.c **** 	  if (*q == '1')
 685:src/display.c **** 	    n += 2;
 686:src/display.c **** 	  if (q[1] == '1')
 687:src/display.c **** 	    n += 2;
 688:src/display.c **** 	  while (n-- > 0)
 689:src/display.c **** 	    *p2++ = '\006';
 690:src/display.c **** 
 691:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 692:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 693:src/display.c **** 	}
 694:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 695:src/display.c ****       }
 696:src/display.c **** #ifdef INCLUDE_C_LOCK
 697:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 698:src/display.c **** #else
 699:src/display.c ****       else if (!yreg_enabled
 700:src/display.c **** #endif
 701:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 702:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 703:src/display.c **** #endif
 704:src/display.c **** 	       ) {
 705:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 706:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 707:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 708:src/display.c **** 	if (shift_char == ' ') {
 709:src/display.c **** 	  *p2++ = '\007';
 710:src/display.c **** 	  *p2++ = '\342';
 711:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 712:src/display.c **** 	  *p2++ = '\007';
 713:src/display.c **** 	  *p2++ = '\344';
 714:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
ARM GAS  /tmp/ccdg5rgB.s 			page 19


 715:src/display.c **** 	}
 716:src/display.c **** 	else
 717:src/display.c **** #endif
 718:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 719:src/display.c **** 	    *p2++ = shift_char;
 720:src/display.c **** 	    *p2++ = '\006';
 721:src/display.c **** 	  }
 722:src/display.c **** 	  else {
 723:src/display.c **** 	    *p2++ = 'D';
 724:src/display.c **** 	  }
 725:src/display.c **** 
 726:src/display.c **** 	if (State2.cmplx) {
 727:src/display.c **** 	  *p2++ = ' ';
 728:src/display.c **** 	  *p2 = '\024';
 729:src/display.c **** 	  goto skip;
 730:src/display.c **** 	}
 731:src/display.c **** 	if (State2.arrow) {
 732:src/display.c **** 	  *p2++ = ' ';
 733:src/display.c **** 	  *p2 = '\015';
 734:src/display.c **** 	  goto skip;
 735:src/display.c **** 	}
 736:src/display.c **** 
 737:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 738:src/display.c **** 	  if (State2.wascomplex) {
 739:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 740:src/display.c **** 	  }
 741:src/display.c **** 	  else if (rp_prefix) {
 742:src/display.c **** 	    if (RectPolConv == 1) {
 743:src/display.c **** 	      q = "\007\306<";
 744:src/display.c **** 	    }
 745:src/display.c **** 	    else {
 746:src/display.c **** 	      q = "\007\306y";
 747:src/display.c **** 	    }
 748:src/display.c **** 	  }
 749:src/display.c **** 	  p = scopy(buf, q);
 750:src/display.c **** 
 751:src/display.c **** 	  goto display_yreg;
 752:src/display.c **** 	}
 753:src/display.c **** 
 754:src/display.c **** 	switch (UState.date_mode) {
 755:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 756:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 757:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 758:src/display.c **** #endif
 759:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 760:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 761:src/display.c **** #endif
 762:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 763:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 764:src/display.c **** #endif
 765:src/display.c **** #endif
 766:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 767:src/display.c **** 	}
 768:src/display.c **** 	p2 = scopy(p2, q);
 769:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 770:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 771:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
ARM GAS  /tmp/ccdg5rgB.s 			page 20


 772:src/display.c **** 	}
 773:src/display.c **** #else
 774:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 775:src/display.c **** 	*p2++ = '\007';
 776:src/display.c **** 	*p2++ = '\342';
 777:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 778:src/display.c **** #endif
 779:src/display.c ****       }
 780:src/display.c ****       else { // yreg_enabled
 781:src/display.c **** 	// do top-related things first
 782:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 783:src/display.c **** 	if (State2.cmplx) {
 784:src/display.c **** 	  *p2++ = '\007';
 785:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 786:src/display.c **** 	  *p2++ = shift_char;
 787:src/display.c **** 	  *p2++ = '\024';
 788:src/display.c **** 	}
 789:src/display.c **** 	else {// if (shift_char != ' ') {
 790:src/display.c **** 	  *p2++ = '\007';
 791:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 792:src/display.c **** 	  *p2++ = shift_char;
 793:src/display.c **** 	}
 794:src/display.c **** #endif
 795:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 796:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 797:src/display.c **** 	  *p2++ = '\007';
 798:src/display.c **** 	  *p2++ = '\207';
 799:src/display.c **** 	  *p2++ = '\007';	    
 800:src/display.c **** 	}
 801:src/display.c **** 	else {
 802:src/display.c **** 	  *p2++ = '\007';
 803:src/display.c **** 	  *p2++ = '\207';
 804:src/display.c **** 	  *p2++ = ' ';
 805:src/display.c **** 	}
 806:src/display.c **** #endif
 807:src/display.c **** #ifndef SHOW_STACK_SIZE
 808:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 809:src/display.c **** 	p2 = scopy(p2, q);
 810:src/display.c **** #else
 811:src/display.c **** 	if (is_dblmode()) {
 812:src/display.c **** 	  *p2++ = '\007';
 813:src/display.c **** 	  *p2++ = '\342';
 814:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 815:src/display.c **** 	  *p2++ = '\007';
 816:src/display.c **** 	  *p2++ = '\345';
 817:src/display.c **** 	  *p2++ = 'D';
 818:src/display.c **** 	}
 819:src/display.c **** 	else {
 820:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 821:src/display.c **** 	  p2 = scopy(p2, q);
 822:src/display.c **** 	}
 823:src/display.c **** #endif
 824:src/display.c **** 
 825:src/display.c **** 	switch (UState.date_mode) {
 826:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 827:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 828:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
ARM GAS  /tmp/ccdg5rgB.s 			page 21


 829:src/display.c **** #endif
 830:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 831:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 832:src/display.c **** #endif
 833:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 834:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 835:src/display.c **** #endif
 836:src/display.c **** #endif
 837:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 838:src/display.c **** 	}
 839:src/display.c **** 	  
 840:src/display.c **** 	//      no_copy:
 841:src/display.c **** 	// display either arrow or datemode
 842:src/display.c **** 	if (State2.arrow) {
 843:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 844:src/display.c **** 	} // no need to skip y display with arrow here
 845:src/display.c **** 	else {
 846:src/display.c **** 	  p2 = scopy(p2, q);
 847:src/display.c **** 	}
 848:src/display.c **** 	// now do the annotations, if any, for the middle row:
 849:src/display.c **** #ifdef INCLUDE_C_LOCK
 850:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 851:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 852:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 853:src/display.c **** 	  }
 854:src/display.c **** 	  else {
 855:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 856:src/display.c **** 	  }
 857:src/display.c **** 	  scopy(p, q);
 858:src/display.c **** 	  goto skip;
 859:src/display.c **** 	}
 860:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 861:src/display.c **** 	  q = "\007\307<";
 862:src/display.c **** 	  p = scopy(p, q);
 863:src/display.c **** 	}
 864:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 865:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 866:src/display.c **** 	  p = scopy(p, q);
 867:src/display.c **** 	}
 868:src/display.c **** #else
 869:src/display.c **** 	
 870:src/display.c **** 	if (State2.wascomplex) {
 871:src/display.c **** 	  q = "\007\207i";
 872:src/display.c **** 	  p = scopy(p, q);
 873:src/display.c **** 	  //	    goto no_copy;
 874:src/display.c **** 	}
 875:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 876:src/display.c **** 	  q = "\007\307<";
 877:src/display.c **** 	  p = scopy(p, q);
 878:src/display.c **** 	  //	    goto no_copy;
 879:src/display.c **** 	}
 880:src/display.c **** 	else
 881:src/display.c **** #endif
 882:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 883:src/display.c **** 	    q = "\007\307y";
 884:src/display.c **** 	    p = scopy(p, q);
 885:src/display.c **** 	    //	    goto no_copy;
ARM GAS  /tmp/ccdg5rgB.s 			page 22


 886:src/display.c **** 	  }
 887:src/display.c ****       
 888:src/display.c **** 	if (State2.runmode) {
 889:src/display.c **** 	  decNumber y;
 890:src/display.c **** 	display_yreg:
 891:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 892:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 893:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 894:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 895:src/display.c **** 	   */
 896:src/display.c **** 	  if (is_intmode()) {
 897:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 898:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 899:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 900:src/display.c **** 	    goto skip;
 901:src/display.c **** 	  }
 902:src/display.c **** #ifdef INCLUDE_C_LOCK
 903:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 904:src/display.c **** 	    getRegister(&y, regK_idx);
 905:src/display.c **** 	  }
 906:src/display.c **** 	  else {
 907:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 908:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 909:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 910:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 911:src/display.c **** 	  }
 912:src/display.c **** #else
 913:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 914:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 915:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 916:src/display.c **** #endif
 917:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 918:src/display.c **** #ifdef INCLUDE_C_LOCK
 919:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 920:src/display.c **** #else
 921:src/display.c **** 	    if (yreg_hms && State2.hms) {
 922:src/display.c **** #endif
 923:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 924:src/display.c **** 
 925:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 926:src/display.c **** 	      UState.nothousands = 1;
 927:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 928:src/display.c **** 	      UState.nothousands = saved_nothousands;
 929:src/display.c **** 	      // First replace the '@' character with the degree symbol
 930:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 931:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 932:src/display.c **** 	      // then remove the fractional part of the seconds.
 933:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 934:src/display.c **** 	      while (*p) {
 935:src/display.c **** 		replace_char(buf, p[0], p[1]);
 936:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 937:src/display.c **** 		  goto skip;
 938:src/display.c **** 		}
 939:src/display.c **** 		p += 2;
 940:src/display.c **** 	      }
 941:src/display.c **** 	      goto skip;
 942:src/display.c **** 	    }
ARM GAS  /tmp/ccdg5rgB.s 			page 23


 943:src/display.c **** 	    if (yreg_fract && UState.fract
 944:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 945:src/display.c **** 		&& !State2.cmplx
 946:src/display.c **** #endif
 947:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 948:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 949:src/display.c **** #endif
 950:src/display.c **** 		&& set_x_fract(&y, p)) {
 951:src/display.c **** 	      char ltgteq;
 952:src/display.c **** 
 953:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 954:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 955:src/display.c **** 	      ltgteq = *q;
 956:src/display.c **** 	      switch (ltgteq) {
 957:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 958:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 959:src/display.c **** 	      }
 960:src/display.c **** 	      scopy(q, "\007\344?");
 961:src/display.c **** 	      q[2] = ltgteq;
 962:src/display.c **** 
 963:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 964:src/display.c **** 		goto skip;
 965:src/display.c **** 	      }
 966:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 967:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 968:src/display.c **** 		goto skip;
 969:src/display.c **** 	      }
 970:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 971:src/display.c **** 	    }
 972:src/display.c **** 	  }
 973:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 974:src/display.c **** 	    int extra_pixels;
 975:src/display.c **** 
 976:src/display.c **** 	    set_x_dn(&y, p, &n);
 977:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 978:src/display.c **** 	    if (extra_pixels <= 0)
 979:src/display.c **** 	      break;
 980:src/display.c **** 
 981:src/display.c **** 	    xset(p, '\0', n+10);
 982:src/display.c **** 
 983:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 984:src/display.c **** 	  }
 985:src/display.c **** 	}
 986:src/display.c ****       }
 987:src/display.c ****       
 988:src/display.c ****     skip:
 989:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 990:src/display.c ****       set_status_top_always(buf2);
 991:src/display.c ****       
 992:src/display.c ****     }
 993:src/display.c **** #else
 994:src/display.c ****     static void annunciators(void) {
 995:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 996:src/display.c ****       char buf[42], *p = buf, *q="";
 997:src/display.c ****       int n;
 998:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 999:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
ARM GAS  /tmp/ccdg5rgB.s 			page 24


1000:src/display.c ****       // Constant variables and code branches depending on a constant variable
1001:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
1002:src/display.c ****       // feature run-time configurable if needed.
1003:src/display.c **** #ifdef INCLUDE_YREG_CODE
1004:src/display.c **** #  ifdef YREG_ALWAYS_ON
1005:src/display.c ****       const int yreg_enabled = 1;
1006:src/display.c **** #  else
1007:src/display.c ****       const int yreg_enabled = UState.show_y;
1008:src/display.c **** #  endif
1009:src/display.c **** #  ifdef INCLUDE_YREG_HMS
1010:src/display.c ****       const int yreg_hms = 1;
1011:src/display.c **** #  else
1012:src/display.c ****       const int yreg_hms = 0;
1013:src/display.c **** #  endif
1014:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
1015:src/display.c ****       const int yreg_fract = 1;
1016:src/display.c **** #  else
1017:src/display.c ****       const int yreg_fract = 0;
1018:src/display.c **** #  endif
1019:src/display.c **** #else
1020:src/display.c ****       const int yreg_enabled = 0;
1021:src/display.c ****       const int yreg_hms = 0;
1022:src/display.c ****       const int yreg_fract = 0;
1023:src/display.c **** #endif
1024:src/display.c **** #ifdef RP_PREFIX
1025:src/display.c ****       const int rp_prefix = 1;
1026:src/display.c **** #else
1027:src/display.c ****       const int rp_prefix = 0;
1028:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
1029:src/display.c **** #endif
1030:src/display.c ****       // Indicates whether font escape code is compiled in.
1031:src/display.c ****       // This variable will always be set at compile time.
1032:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1033:src/display.c ****       const int has_FONT_ESCAPE = 1;
1034:src/display.c **** #else
1035:src/display.c ****       const int has_FONT_ESCAPE = 0;
1036:src/display.c **** #endif
1037:src/display.c **** 
1038:src/display.c ****       xset(buf, '\0', sizeof(buf));
1039:src/display.c ****       
1040:src/display.c ****       if (is_intmode()) {
1041:src/display.c **** #ifdef SHOW_STACK_SIZE
1042:src/display.c **** 	if (shift_char == ' ') {
1043:src/display.c **** 	  *p++ = '\007';
1044:src/display.c **** 	  *p++ = '\346';
1045:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1046:src/display.c **** 	}
1047:src/display.c **** 	else
1048:src/display.c **** #endif
1049:src/display.c **** 	  {
1050:src/display.c **** 	    *p++ = shift_char;
1051:src/display.c **** 	    *p++ = '\006';
1052:src/display.c **** 	  }
1053:src/display.c **** 
1054:src/display.c **** 	switch(int_mode()) {
1055:src/display.c **** 	default:
1056:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
ARM GAS  /tmp/ccdg5rgB.s 			page 25


1057:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1058:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1059:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1060:src/display.c **** 	}
1061:src/display.c **** 	q = scopy(p, q);
1062:src/display.c **** 	*q++ = '\006';
1063:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1064:src/display.c **** 
1065:src/display.c **** 	if (IntMaxWindow > 0) {
1066:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1067:src/display.c **** 	  if (*q == '1')
1068:src/display.c **** 	    n += 2;
1069:src/display.c **** 	  if (q[1] == '1')
1070:src/display.c **** 	    n += 2;
1071:src/display.c **** 	  while (n-- > 0)
1072:src/display.c **** 	    *p++ = '\006';
1073:src/display.c **** 
1074:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1075:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1076:src/display.c **** 	}
1077:src/display.c ****       }
1078:src/display.c **** #ifdef INCLUDE_C_LOCK
1079:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1080:src/display.c **** #else
1081:src/display.c ****       else if (!yreg_enabled
1082:src/display.c **** #endif
1083:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1084:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1085:src/display.c **** #endif
1086:src/display.c **** 	       ) {
1087:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1088:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1089:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1090:src/display.c **** 	if (shift_char == ' ') {
1091:src/display.c **** 	  *p++ = '\007';
1092:src/display.c **** 	  *p++ = '\342';
1093:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1094:src/display.c **** 	  *p++ = '\007';
1095:src/display.c **** 	  *p++ = '\344';
1096:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1097:src/display.c **** 	}
1098:src/display.c **** 	else
1099:src/display.c **** #endif
1100:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1101:src/display.c **** 	    *p++ = shift_char;
1102:src/display.c **** 	    *p++ = '\006';
1103:src/display.c **** 	  }
1104:src/display.c **** 	  else {
1105:src/display.c **** 	    *p++ = 'D';
1106:src/display.c **** 	  }
1107:src/display.c **** 
1108:src/display.c **** 	if (State2.cmplx) {
1109:src/display.c **** 	  *p++ = ' ';
1110:src/display.c **** 	  *p = '\024';
1111:src/display.c **** 	  goto skip;
1112:src/display.c **** 	}
1113:src/display.c **** 	if (State2.arrow) {
ARM GAS  /tmp/ccdg5rgB.s 			page 26


1114:src/display.c **** 	  *p++ = ' ';
1115:src/display.c **** 	  *p = '\015';
1116:src/display.c **** 	  goto skip;
1117:src/display.c **** 	}
1118:src/display.c **** 
1119:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1120:src/display.c **** 	  if (State2.wascomplex) {
1121:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1122:src/display.c **** 	  }
1123:src/display.c **** 	  else if (rp_prefix) {
1124:src/display.c **** 	    if (RectPolConv == 1) {
1125:src/display.c **** 	      q = "\007\306<";
1126:src/display.c **** 	    }
1127:src/display.c **** 	    else {
1128:src/display.c **** 	      q = "\007\306y";
1129:src/display.c **** 	    }
1130:src/display.c **** 	  }
1131:src/display.c **** 	  p = scopy(buf, q);
1132:src/display.c **** 
1133:src/display.c **** 	  goto display_yreg;
1134:src/display.c **** 	}
1135:src/display.c **** 
1136:src/display.c **** 	switch (UState.date_mode) {
1137:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1138:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1139:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1140:src/display.c **** #endif
1141:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1142:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1143:src/display.c **** #endif
1144:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1145:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1146:src/display.c **** #endif
1147:src/display.c **** #endif
1148:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1149:src/display.c **** 	}
1150:src/display.c **** 	p = scopy(p, q);
1151:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1152:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1153:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1154:src/display.c **** 	}
1155:src/display.c **** #else
1156:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1157:src/display.c **** 	*p++ = '\007';
1158:src/display.c **** 	*p++ = '\342';
1159:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1160:src/display.c **** #endif
1161:src/display.c ****       }
1162:src/display.c ****       else { // yreg_enabled
1163:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1164:src/display.c **** 	if (State2.cmplx) {
1165:src/display.c **** 	  *p++ = '\007';
1166:src/display.c **** 	  *p++ = '\344';
1167:src/display.c **** 	  *p++ = shift_char;
1168:src/display.c **** 	  q = "\024";
1169:src/display.c **** 	}
1170:src/display.c **** 	else if (shift_char != ' ') {
ARM GAS  /tmp/ccdg5rgB.s 			page 27


1171:src/display.c **** 	  *p++ = '\007';
1172:src/display.c **** 	  *p++ = '\307';
1173:src/display.c **** 	  *p++ = shift_char;
1174:src/display.c **** 	  goto no_copy;
1175:src/display.c **** 	}
1176:src/display.c **** 	else
1177:src/display.c **** #endif
1178:src/display.c **** #ifdef INCLUDE_C_LOCK
1179:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1180:src/display.c **** 			if ( POLAR_DISPLAY ) {
1181:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1182:src/display.c **** 			}
1183:src/display.c **** 			else {
1184:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1185:src/display.c **** 			}
1186:src/display.c **** 			scopy(p, q);
1187:src/display.c **** 			goto skip;
1188:src/display.c **** 		}
1189:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1190:src/display.c **** 			q = "\007\307<";
1191:src/display.c **** 		}
1192:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1193:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1194:src/display.c **** 		}
1195:src/display.c **** #else
1196:src/display.c **** 	  if (State2.wascomplex) {
1197:src/display.c **** 	    q = "\007\207i";
1198:src/display.c **** 	  }
1199:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1200:src/display.c **** 	    q = "\007\307<";
1201:src/display.c **** 	  }
1202:src/display.c **** #endif
1203:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1204:src/display.c **** 	    q = "\007\307y";
1205:src/display.c **** 	  }
1206:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1207:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1208:src/display.c **** 	    q = "\007\207\007";
1209:src/display.c **** 	  }
1210:src/display.c **** #endif
1211:src/display.c **** 	  else {
1212:src/display.c **** #ifndef SHOW_STACK_SIZE
1213:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1214:src/display.c **** #else
1215:src/display.c **** 	    if (is_dblmode()) {
1216:src/display.c **** 	      *p++ = '\007';
1217:src/display.c **** 	      *p++ = '\342';
1218:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1219:src/display.c **** 	      q = "\007\345D";
1220:src/display.c **** 	    }
1221:src/display.c **** 	    else {
1222:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1223:src/display.c **** 	    }
1224:src/display.c **** #endif
1225:src/display.c **** 	  }
1226:src/display.c **** 	p = scopy(p, q);
1227:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccdg5rgB.s 			page 28


1228:src/display.c ****       no_copy:
1229:src/display.c **** #endif
1230:src/display.c **** 
1231:src/display.c **** 	if (State2.arrow) {
1232:src/display.c **** 	  scopy(p, "\007\204\006\015");
1233:src/display.c **** 	} else if (State2.runmode) {
1234:src/display.c **** 	  decNumber y;
1235:src/display.c **** 	display_yreg:
1236:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1237:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1238:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1239:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1240:src/display.c **** 	   */
1241:src/display.c **** #ifdef INCLUDE_C_LOCK
1242:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1243:src/display.c **** 		    getRegister(&y, regK_idx);
1244:src/display.c **** 		  }
1245:src/display.c **** 		  else {
1246:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1247:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1248:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1249:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1250:src/display.c **** 		  }
1251:src/display.c **** #else
1252:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1253:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1254:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1255:src/display.c **** #endif
1256:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1257:src/display.c **** #ifdef INCLUDE_C_LOCK
1258:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1259:src/display.c **** #else
1260:src/display.c **** 	    if (yreg_hms && State2.hms) {
1261:src/display.c **** #endif
1262:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1263:src/display.c **** 
1264:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1265:src/display.c **** 	      UState.nothousands = 1;
1266:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1267:src/display.c **** 	      UState.nothousands = saved_nothousands;
1268:src/display.c **** 	      // First replace the '@' character with the degree symbol
1269:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1270:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1271:src/display.c **** 	      // then remove the fractional part of the seconds.
1272:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1273:src/display.c **** 	      while (*p) {
1274:src/display.c **** 		replace_char(buf, p[0], p[1]);
1275:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1276:src/display.c **** 		  goto skip;
1277:src/display.c **** 		}
1278:src/display.c **** 		p += 2;
1279:src/display.c **** 	      }
1280:src/display.c **** 	      goto skip;
1281:src/display.c **** 	    }
1282:src/display.c **** 	    if (yreg_fract && UState.fract
1283:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1284:src/display.c **** 		&& !State2.cmplx
ARM GAS  /tmp/ccdg5rgB.s 			page 29


1285:src/display.c **** #endif
1286:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1287:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1288:src/display.c **** #endif
1289:src/display.c **** 		&& set_x_fract(&y, p)) {
1290:src/display.c **** 	      char ltgteq;
1291:src/display.c **** 
1292:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1293:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1294:src/display.c **** 	      ltgteq = *q;
1295:src/display.c **** 	      switch (ltgteq) {
1296:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1297:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1298:src/display.c **** 	      }
1299:src/display.c **** 	      scopy(q, "\007\344?");
1300:src/display.c **** 	      q[2] = ltgteq;
1301:src/display.c **** 
1302:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1303:src/display.c **** 		goto skip;
1304:src/display.c **** 	      }
1305:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1306:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1307:src/display.c **** 		goto skip;
1308:src/display.c **** 	      }
1309:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1310:src/display.c **** 	    }
1311:src/display.c **** 	  }
1312:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1313:src/display.c **** 	    int extra_pixels;
1314:src/display.c **** 
1315:src/display.c **** 	    set_x_dn(&y, p, &n);
1316:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1317:src/display.c **** 	    if (extra_pixels <= 0)
1318:src/display.c **** 	      break;
1319:src/display.c **** 
1320:src/display.c **** 	    xset(p, '\0', n+10);
1321:src/display.c **** 
1322:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1323:src/display.c **** 	  }
1324:src/display.c **** 	}
1325:src/display.c ****       }
1326:src/display.c ****       
1327:src/display.c ****     skip:	set_status_top(buf);
1328:src/display.c ****     }
1329:src/display.c **** #endif //top_row
1330:src/display.c ****     static void disp_x(const char *p) {
1331:src/display.c ****       int i;
1332:src/display.c ****       int gotdot = -1;
1333:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1334:src/display.c ****       const
1335:src/display.c **** #endif
1336:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1337:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1338:src/display.c ****       int overflow_to_left = 0;
1339:src/display.c **** #endif
1340:src/display.c **** 
1341:src/display.c ****       if (*p == '-') {
ARM GAS  /tmp/ccdg5rgB.s 			page 30


1342:src/display.c **** 	SET_MANT_SIGN;
1343:src/display.c **** 	p++;
1344:src/display.c ****       }
1345:src/display.c **** 
1346:src/display.c ****       if (is_intmode()) {
1347:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1348:src/display.c **** 	  set_dig(i, *p);
1349:src/display.c **** 	  i += SEGS_PER_DIGIT;
1350:src/display.c **** 	}
1351:src/display.c **** 	carry_overflow();
1352:src/display.c ****       } else {
1353:src/display.c **** 	set_separator_decimal_modes();
1354:src/display.c **** 
1355:src/display.c **** 	i = 0;
1356:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1357:src/display.c **** 	if ( CmdLineDot > 1 ) {
1358:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1359:src/display.c **** 	  const
1360:src/display.c **** #  endif
1361:src/display.c **** 	    int double_dot = 0;
1362:src/display.c **** 	  int j;
1363:src/display.c **** 
1364:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1365:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1366:src/display.c **** 	      gotdot = j;
1367:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1368:src/display.c **** 	      double_dot = (p[j+1] == '.');
1369:src/display.c **** #  endif
1370:src/display.c **** 	    }
1371:src/display.c **** 	  }
1372:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1373:src/display.c **** 	  if (j > 0) {
1374:src/display.c **** 	    p += j + 1;
1375:src/display.c **** 	    i = SEGS_PER_DIGIT;
1376:src/display.c **** 	    if (gotdot <= j) {
1377:src/display.c **** 	      gotdot = 0;
1378:src/display.c **** 	      if (double_dot)
1379:src/display.c **** 		p++;
1380:src/display.c **** 	    }
1381:src/display.c **** 	    else if (*p == '.') {
1382:src/display.c **** 	      gotdot = 0;
1383:src/display.c **** 	      p++;
1384:src/display.c **** 	      if (!double_dot)
1385:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1386:src/display.c **** 	    }
1387:src/display.c **** 	    else gotdot = -1;
1388:src/display.c **** 	    set_dig(0, '<');
1389:src/display.c **** 	    overflow_to_left = 1;
1390:src/display.c **** 	  }
1391:src/display.c **** 	  else gotdot = -1;
1392:src/display.c **** 	}
1393:src/display.c **** #endif
1394:src/display.c **** 
1395:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1396:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1397:src/display.c **** 	       && *p != 'D'
1398:src/display.c **** #endif
ARM GAS  /tmp/ccdg5rgB.s 			page 31


1399:src/display.c **** 	       ; p++) {
1400:src/display.c **** 	  if (*p == '.') {
1401:src/display.c **** 	    if (gotdot < 0)
1402:src/display.c **** 	      gotdot = i;
1403:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1404:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1405:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1406:src/display.c **** 	      if ( *(p+1) == '.' ) {
1407:src/display.c **** 		p++;
1408:src/display.c **** 	      }
1409:src/display.c **** #  else
1410:src/display.c **** 	      if ( i != gotdot ) {
1411:src/display.c **** #  endif
1412:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1413:src/display.c **** 		i += segs_per_digit;
1414:src/display.c **** 	      }
1415:src/display.c **** 	      else {
1416:src/display.c **** 		if ( CmdLineDot > 1 ) {
1417:src/display.c **** 		  i += segs_per_digit;
1418:src/display.c **** 		}
1419:src/display.c **** 		else {
1420:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1421:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1422:src/display.c **** 		}
1423:src/display.c **** 	      }
1424:src/display.c **** #else
1425:src/display.c **** 	      if (i > 0)
1426:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1427:src/display.c **** 	      else {
1428:src/display.c **** 		set_dig(i, '0');
1429:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1430:src/display.c **** 		i += segs_per_digit;
1431:src/display.c **** 	      }
1432:src/display.c **** #endif
1433:src/display.c **** 	    } else {
1434:src/display.c **** 	      set_dig(i, *p);
1435:src/display.c **** 	      i += segs_per_digit;
1436:src/display.c **** 	    }
1437:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1438:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1439:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1440:src/display.c **** #endif
1441:src/display.c **** 	  }
1442:src/display.c **** 
1443:src/display.c **** 	  /* Implement a floating comma */
1444:src/display.c **** 	  if (gotdot < 0)
1445:src/display.c **** 	    gotdot = i;
1446:src/display.c **** 	  for (;;) {
1447:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1448:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1449:src/display.c **** 	      break;
1450:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1451:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1452:src/display.c **** 	      break;
1453:src/display.c **** #endif
1454:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1455:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 32


1456:src/display.c **** 
1457:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1458:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1459:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1460:src/display.c **** 	    int flags = 8;
1461:src/display.c **** #  else
1462:src/display.c **** 	    int flags = 12;
1463:src/display.c **** #  endif
1464:src/display.c **** 
1465:src/display.c **** 	    if (*p == 'D')
1466:src/display.c **** 	      flags |= 2;
1467:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1468:src/display.c **** 	      flags |= 16;
1469:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1470:src/display.c **** 	  }
1471:src/display.c **** #else
1472:src/display.c **** 	  if (*p == 'E') {
1473:src/display.c **** 	    p++;
1474:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1475:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1476:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1477:src/display.c **** #  else
1478:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1479:src/display.c **** #  endif
1480:src/display.c **** 	  } 
1481:src/display.c **** #endif
1482:src/display.c **** 	}
1483:src/display.c ****       }
1484:src/display.c **** 
1485:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1486:src/display.c **** 
1487:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1488:src/display.c **** 	const int ws = word_size();
1489:src/display.c **** 	unsigned int b;
1490:src/display.c **** 	long long int vs = value;
1491:src/display.c **** 	unsigned long long int v;
1492:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1493:src/display.c **** 	int i, j, k;
1494:src/display.c **** 	int sign = 0;
1495:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1496:src/display.c **** 
1497:src/display.c **** 	switch (State2.smode) {
1498:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1499:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1500:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1501:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1502:src/display.c **** 	default:	b = int_base();	break;
1503:src/display.c **** 	}
1504:src/display.c **** 
1505:src/display.c **** 	if (!res) {
1506:src/display.c **** 	  IntMaxWindow = 0;
1507:src/display.c **** 	  carry_overflow();
1508:src/display.c **** 	}
1509:src/display.c **** 
1510:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1511:src/display.c **** 	  v = extract_value(value, &sign);
1512:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
ARM GAS  /tmp/ccdg5rgB.s 			page 33


1513:src/display.c **** 	    v = value;
1514:src/display.c **** 	  if (v == 0) {
1515:src/display.c **** 	    if (sign)
1516:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1517:src/display.c **** 	    set_dig_s(dig, '0', res);
1518:src/display.c **** 	    return;
1519:src/display.c **** 	  } else
1520:src/display.c **** 	    for (i=0; v != 0; i++) {
1521:src/display.c **** 	      const int r = v % b;
1522:src/display.c **** 	      v /= b;
1523:src/display.c **** 	      buf[i] = DIGITS[r];
1524:src/display.c **** 	    }
1525:src/display.c **** 	} else {
1526:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1527:src/display.c **** 	  if (ws < 64) {
1528:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1529:src/display.c **** 	    vs &= mask;
1530:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1531:src/display.c **** 	      vs |= ~mask;
1532:src/display.c **** 	  }
1533:src/display.c **** 
1534:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1535:src/display.c **** 	    set_dig_s(dig, '0', res);
1536:src/display.c **** 	    return;
1537:src/display.c **** 	  } else if (!UState.leadzero) {
1538:src/display.c **** 	    v = (unsigned long long int)vs;
1539:src/display.c **** 	    for (i=0; v != 0; i++) {
1540:src/display.c **** 	      const int r = v % b;
1541:src/display.c **** 	      v /= b;
1542:src/display.c **** 	      buf[i] = DIGITS[r];
1543:src/display.c **** 	    }
1544:src/display.c **** 	  } else {
1545:src/display.c **** 	    int n;
1546:src/display.c **** 	    const unsigned int b1 = b >> 1;
1547:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1548:src/display.c **** 	    v = (unsigned long long int)vs;
1549:src/display.c **** 
1550:src/display.c **** 	    n = (ws + fac) / (fac+1);
1551:src/display.c **** 	    for (i=0; i<n; i++) {
1552:src/display.c **** 	      const int r = v % b;
1553:src/display.c **** 	      v /= b;
1554:src/display.c **** 	      buf[i] = DIGITS[r];
1555:src/display.c **** 	    }
1556:src/display.c **** 	  }
1557:src/display.c **** 	}
1558:src/display.c **** #ifdef BIGGER_DISPLAY
1559:src/display.c **** #define MAX_INT_Y_DIG 13
1560:src/display.c **** #else
1561:src/display.c **** #define MAX_INT_Y_DIG 7
1562:src/display.c **** #endif
1563:src/display.c **** 	/* At this point i is the number of digits in the output */
1564:src/display.c **** 	int nd = i;
1565:src/display.c **** 	if (res) {
1566:src/display.c **** 	  if (sign) *res++ = '-';
1567:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1568:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1569:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/ccdg5rgB.s 			page 34


1570:src/display.c **** 	    *res++ = '.';
1571:src/display.c **** 	    *res++ = '.';
1572:src/display.c **** 	  }
1573:src/display.c **** 	  else {
1574:src/display.c **** 	    while (--i >= 0)
1575:src/display.c **** 	      *res++ = buf[i];
1576:src/display.c **** 	  }
1577:src/display.c **** 	} else {
1578:src/display.c **** #if 0
1579:src/display.c **** 	  set_separator_decimal_modes();
1580:src/display.c **** 
1581:src/display.c **** 	  // Allows configuration of digit grouping per base
1582:src/display.c **** 	  static const char grouping[] = 
1583:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1584:src/display.c **** 		    //	   2     3     4     5     6     7     8
1585:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1586:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1587:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1588:src/display.c **** 	    : grouping[b - 2] >> 4;
1589:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1590:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1591:src/display.c **** #else
1592:src/display.c **** 	  // Less flexible but shorter
1593:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1594:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1595:src/display.c **** 	    : b == 16 ? 2 : 3;
1596:src/display.c **** 	  set_separator_decimal_modes();
1597:src/display.c **** #endif
1598:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1599:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1600:src/display.c **** 	    State2.window = 0;
1601:src/display.c **** 	  buf[i] = '\0';
1602:src/display.c **** 
1603:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1604:src/display.c **** 	  for (k = 0; k < 12; k++)
1605:src/display.c **** 	    if (buf[j + k] == '\0')
1606:src/display.c **** 	      break;
1607:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1608:src/display.c **** 	    int ch = buf[j++];
1609:src/display.c **** 	    if (i >= shift)
1610:src/display.c **** 	      ch -= 030;
1611:src/display.c **** 	    set_dig(dig, ch);
1612:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1613:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1614:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1615:src/display.c **** 	  }
1616:src/display.c **** 	  if (sign) {
1617:src/display.c **** 	    if (dig >= 0)
1618:src/display.c **** 	      set_dig(dig, '-');
1619:src/display.c **** 	    else	SET_MANT_SIGN;
1620:src/display.c **** 	  }
1621:src/display.c **** 	}
1622:src/display.c ****       }
1623:src/display.c **** 
1624:src/display.c ****       /* Handle special cases.
1625:src/display.c ****        * return non-zero if the number is special.
1626:src/display.c ****        */
ARM GAS  /tmp/ccdg5rgB.s 			page 35


1627:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1628:src/display.c **** 	if (decNumberIsSpecial(x)) {
1629:src/display.c **** 	  if (decNumberIsNaN(x)) {
1630:src/display.c **** 	    if (res) {
1631:src/display.c **** 	      scopy(res, "NaN");
1632:src/display.c **** 	    } else {
1633:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1634:src/display.c **** #ifndef REALBUILD
1635:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1636:src/display.c **** 	      forceDispPlot=0;
1637:src/display.c **** #endif
1638:src/display.c **** 	    }
1639:src/display.c **** 	    return 1;
1640:src/display.c **** 	  } else {
1641:src/display.c **** 	    if (decNumberIsNegative(x)) {
1642:src/display.c **** 	      if (res) *res++ = '-';
1643:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1644:src/display.c **** 	    }
1645:src/display.c **** 	    if (res)
1646:src/display.c **** 	      *res++ = '\237';
1647:src/display.c **** 	    else {
1648:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1649:src/display.c **** #ifndef REALBUILD
1650:src/display.c **** 	      if (decNumberIsNegative(x)) {
1651:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1652:src/display.c **** 	      }
1653:src/display.c **** 	      else {
1654:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1655:src/display.c **** 	      }
1656:src/display.c **** 	      forceDispPlot=0;
1657:src/display.c **** #endif
1658:src/display.c **** 	    }
1659:src/display.c **** 	    return 1;
1660:src/display.c **** 	  }
1661:src/display.c **** 	}
1662:src/display.c **** 	return 0;
1663:src/display.c ****       }
1664:src/display.c **** 
1665:src/display.c **** 
1666:src/display.c ****       /* Extract the two lowest integral digits from the number
1667:src/display.c ****        */
1668:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1669:src/display.c **** 	decNumber n;
1670:src/display.c **** 
1671:src/display.c **** 	decNumberMod(&n, x, &const_100);
1672:src/display.c **** 	*v = dn_to_int(&n);
1673:src/display.c **** 	dn_mulpow10(&n, x, -2);
1674:src/display.c **** 	decNumberTrunc(res, &n);
1675:src/display.c ****       }
1676:src/display.c **** 
1677:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 272              		.loc 1 1677 87 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 4, pretend = 0, frame = 32
 275              		@ frame_needed = 0, uses_anonymous_args = 0
1678:src/display.c **** 	char b[32];
 276              		.loc 1 1678 2 view .LVU78
ARM GAS  /tmp/ccdg5rgB.s 			page 36


1679:src/display.c **** 	int i, j;
 277              		.loc 1 1679 2 view .LVU79
1680:src/display.c **** 
1681:src/display.c **** 	for (i=0; i<n; i++) {
 278              		.loc 1 1681 2 view .LVU80
 279              		.loc 1 1681 12 view .LVU81
1677:src/display.c **** 	char b[32];
 280              		.loc 1 1677 87 is_stmt 0 view .LVU82
 281 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 282              		.cfi_def_cfa_offset 28
 283              		.cfi_offset 4, -28
 284              		.cfi_offset 5, -24
 285              		.cfi_offset 6, -20
 286              		.cfi_offset 7, -16
 287              		.cfi_offset 8, -12
 288              		.cfi_offset 9, -8
 289              		.cfi_offset 14, -4
1682:src/display.c **** 	  if (v == 0)
1683:src/display.c **** 	    b[i] = spaces?' ':'0';
1684:src/display.c **** 	  else {
1685:src/display.c **** 	    j = v % 10;
 290              		.loc 1 1685 12 view .LVU83
 291 0004 DFF89CE0 		ldr	lr, .L45
1677:src/display.c **** 	char b[32];
 292              		.loc 1 1677 87 view .LVU84
 293 0008 89B0     		sub	sp, sp, #36
 294              		.cfi_def_cfa_offset 64
1677:src/display.c **** 	char b[32];
 295              		.loc 1 1677 87 view .LVU85
 296 000a 1746     		mov	r7, r2
 297 000c EC46     		mov	ip, sp
1681:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1681 8 view .LVU86
 299 000e 0026     		movs	r6, #0
 300              	.LVL13:
 301              	.L33:
1682:src/display.c **** 	  if (v == 0)
 302              		.loc 1 1682 4 is_stmt 1 view .LVU87
 303              		.loc 1 1685 6 view .LVU88
 304              		.loc 1 1685 12 is_stmt 0 view .LVU89
 305 0010 AEFB0024 		umull	r2, r4, lr, r0
 306 0014 E408     		lsrs	r4, r4, #3
 307 0016 04EB8402 		add	r2, r4, r4, lsl #2
 308 001a 2546     		mov	r5, r4
 309 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 310              	.LVL14:
1686:src/display.c **** 	    v /= 10;
 311              		.loc 1 1686 6 is_stmt 1 view .LVU90
1687:src/display.c **** 	    b[i] = j + '0';
 312              		.loc 1 1687 15 is_stmt 0 view .LVU91
 313 0020 3034     		adds	r4, r4, #48
 314              	.LVL15:
1681:src/display.c **** 	  if (v == 0)
 315              		.loc 1 1681 18 view .LVU92
 316 0022 721C     		adds	r2, r6, #1
1682:src/display.c **** 	    b[i] = spaces?' ':'0';
 317              		.loc 1 1682 7 view .LVU93
ARM GAS  /tmp/ccdg5rgB.s 			page 37


 318 0024 30B1     		cbz	r0, .L44
1681:src/display.c **** 	  if (v == 0)
 319              		.loc 1 1681 2 view .LVU94
 320 0026 9342     		cmp	r3, r2
 321              		.loc 1 1687 11 view .LVU95
 322 0028 0CF8014B 		strb	r4, [ip], #1
1686:src/display.c **** 	    b[i] = j + '0';
 323              		.loc 1 1686 8 view .LVU96
 324 002c 2846     		mov	r0, r5
 325              	.LVL16:
 326              		.loc 1 1687 6 is_stmt 1 view .LVU97
1681:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1681 17 view .LVU98
1681:src/display.c **** 	  if (v == 0)
 328              		.loc 1 1681 12 view .LVU99
1681:src/display.c **** 	  if (v == 0)
 329              		.loc 1 1681 2 is_stmt 0 view .LVU100
 330 002e 12D0     		beq	.L34
 331 0030 1646     		mov	r6, r2
 332 0032 EDE7     		b	.L33
 333              	.LVL17:
 334              	.L44:
1681:src/display.c **** 	  if (v == 0)
 335              		.loc 1 1681 2 view .LVU101
 336 0034 109A     		ldr	r2, [sp, #64]
 337 0036 002A     		cmp	r2, #0
 338 0038 14BF     		ite	ne
 339 003a 2024     		movne	r4, #32
 340              	.LVL18:
1681:src/display.c **** 	  if (v == 0)
 341              		.loc 1 1681 2 view .LVU102
 342 003c 3024     		moveq	r4, #48
 343 003e 0DEB0600 		add	r0, sp, r6
 344              	.LVL19:
1682:src/display.c **** 	    b[i] = spaces?' ':'0';
 345              		.loc 1 1682 7 view .LVU103
 346 0042 3246     		mov	r2, r6
 347              	.LVL20:
 348              	.L31:
1683:src/display.c **** 	  else {
 349              		.loc 1 1683 6 is_stmt 1 view .LVU104
1681:src/display.c **** 	  if (v == 0)
 350              		.loc 1 1681 18 is_stmt 0 view .LVU105
 351 0044 0132     		adds	r2, r2, #1
 352              	.LVL21:
1681:src/display.c **** 	  if (v == 0)
 353              		.loc 1 1681 2 view .LVU106
 354 0046 9342     		cmp	r3, r2
1683:src/display.c **** 	  else {
 355              		.loc 1 1683 11 view .LVU107
 356 0048 00F8014B 		strb	r4, [r0], #1
 357              	.LVL22:
1681:src/display.c **** 	  if (v == 0)
 358              		.loc 1 1681 17 is_stmt 1 view .LVU108
1681:src/display.c **** 	  if (v == 0)
 359              		.loc 1 1681 12 view .LVU109
1681:src/display.c **** 	  if (v == 0)
ARM GAS  /tmp/ccdg5rgB.s 			page 38


 360              		.loc 1 1681 2 is_stmt 0 view .LVU110
 361 004c FADC     		bgt	.L31
 362 004e 5A1E     		subs	r2, r3, #1
 363              	.LVL23:
1681:src/display.c **** 	  if (v == 0)
 364              		.loc 1 1681 2 view .LVU111
 365 0050 B342     		cmp	r3, r6
 366 0052 C8BF     		it	gt
 367 0054 1646     		movgt	r6, r2
 368              	.LVL24:
 369              	.L34:
1688:src/display.c **** 	  }
1689:src/display.c **** 	}
1690:src/display.c **** 	if (b[0] == ' ')
 370              		.loc 1 1690 2 is_stmt 1 view .LVU112
 371              		.loc 1 1690 5 is_stmt 0 view .LVU113
 372 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 373              	.LVL25:
1691:src/display.c **** 	  b[0] = '0';
1692:src/display.c **** 
1693:src/display.c **** 	/* Copy across and appropriately leading space things
1694:src/display.c **** 	 */
1695:src/display.c **** 	j = *jin;
 374              		.loc 1 1695 4 view .LVU114
 375 005a D7F80090 		ldr	r9, [r7]
1690:src/display.c **** 	  b[0] = '0';
 376              		.loc 1 1690 5 view .LVU115
 377 005e 202B     		cmp	r3, #32
1691:src/display.c **** 	  b[0] = '0';
 378              		.loc 1 1691 4 is_stmt 1 view .LVU116
1691:src/display.c **** 	  b[0] = '0';
 379              		.loc 1 1691 9 is_stmt 0 view .LVU117
 380 0060 04BF     		itt	eq
 381 0062 3023     		moveq	r3, #48
 382 0064 8DF80030 		strbeq	r3, [sp]
 383              		.loc 1 1695 2 is_stmt 1 view .LVU118
 384              	.LVL26:
1696:src/display.c **** 	while (--i >= 0) {
 385              		.loc 1 1696 2 view .LVU119
 386              		.loc 1 1696 8 view .LVU120
1695:src/display.c **** 	while (--i >= 0) {
 387              		.loc 1 1695 4 is_stmt 0 view .LVU121
 388 0068 0D46     		mov	r5, r1
 389 006a C846     		mov	r8, r9
 390              		.loc 1 1696 8 view .LVU122
 391 006c 3446     		mov	r4, r6
 392              	.LVL27:
 393              	.L38:
1697:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 394              		.loc 1 1697 4 is_stmt 1 view .LVU123
 395              	.LBB182:
 396              	.LBB183:
 416:src/display.c ****   else	set_dig(base, ch);
 397              		.loc 1 416 12 view .LVU124
 398              	.LBE183:
 399              	.LBE182:
 400              		.loc 1 1697 24 is_stmt 0 view .LVU125
ARM GAS  /tmp/ccdg5rgB.s 			page 39


 401 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 402              	.LBB187:
 403              	.LBB184:
 416:src/display.c ****   else	set_dig(base, ch);
 404              		.loc 1 416 16 view .LVU126
 405 0072 2B46     		mov	r3, r5
 406              	.LVL28:
 416:src/display.c ****   else	set_dig(base, ch);
 407              		.loc 1 416 16 view .LVU127
 408              	.LBE184:
 409              	.LBI182:
 415:src/display.c ****   if (res) *res++ = ch;
 410              		.loc 1 415 14 is_stmt 1 view .LVU128
 411              	.LBB185:
 416:src/display.c ****   else	set_dig(base, ch);
 412              		.loc 1 416 3 view .LVU129
 416:src/display.c ****   else	set_dig(base, ch);
 413              		.loc 1 416 6 is_stmt 0 view .LVU130
 414 0074 95B1     		cbz	r5, .L36
 415              	.LVL29:
 416:src/display.c ****   else	set_dig(base, ch);
 416              		.loc 1 416 19 view .LVU131
 417 0076 03F8011B 		strb	r1, [r3], #1
 418              	.LVL30:
 416:src/display.c ****   else	set_dig(base, ch);
 419              		.loc 1 416 16 view .LVU132
 420 007a 1D46     		mov	r5, r3
 421              	.LVL31:
 422              	.L37:
 418:src/display.c **** }
 423              		.loc 1 418 3 is_stmt 1 view .LVU133
 418:src/display.c **** }
 424              		.loc 1 418 3 is_stmt 0 view .LVU134
 425              	.LBE185:
 426              	.LBE187:
1698:src/display.c **** 	  j += SEGS_PER_DIGIT;
 427              		.loc 1 1698 4 is_stmt 1 view .LVU135
1696:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 428              		.loc 1 1696 8 is_stmt 0 view .LVU136
 429 007c 013C     		subs	r4, r4, #1
 430              	.LVL32:
 431              		.loc 1 1698 6 view .LVU137
 432 007e 08F10908 		add	r8, r8, #9
 433              	.LVL33:
1696:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 434              		.loc 1 1696 8 is_stmt 1 view .LVU138
 435 0082 F4D5     		bpl	.L38
1699:src/display.c **** 	}
1700:src/display.c **** 	*jin = j;
 436              		.loc 1 1700 7 is_stmt 0 view .LVU139
 437 0084 26EAE676 		bic	r6, r6, r6, asr #31
 438 0088 09F10909 		add	r9, r9, #9
 439              		.loc 1 1700 2 is_stmt 1 view .LVU140
 440              		.loc 1 1700 7 is_stmt 0 view .LVU141
 441 008c 06EBC606 		add	r6, r6, r6, lsl #3
 442 0090 4E44     		add	r6, r6, r9
1701:src/display.c **** 	return str;
ARM GAS  /tmp/ccdg5rgB.s 			page 40


1702:src/display.c ****       }
 443              		.loc 1 1702 7 view .LVU142
 444 0092 2846     		mov	r0, r5
1700:src/display.c **** 	return str;
 445              		.loc 1 1700 7 view .LVU143
 446 0094 3E60     		str	r6, [r7]
1701:src/display.c **** 	return str;
 447              		.loc 1 1701 2 is_stmt 1 view .LVU144
 448              		.loc 1 1702 7 is_stmt 0 view .LVU145
 449 0096 09B0     		add	sp, sp, #36
 450              		.cfi_remember_state
 451              		.cfi_def_cfa_offset 28
 452              		@ sp needed
 453 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 454              	.LVL34:
 455              	.L36:
 456              		.cfi_restore_state
 457              	.LBB188:
 458              	.LBB186:
 417:src/display.c ****   return res;
 459              		.loc 1 417 8 is_stmt 1 view .LVU146
 460 009c 4046     		mov	r0, r8
 461 009e FFF7FEFF 		bl	set_dig
 462              	.LVL35:
 417:src/display.c ****   return res;
 463              		.loc 1 417 8 is_stmt 0 view .LVU147
 464 00a2 EBE7     		b	.L37
 465              	.L46:
 466              		.align	2
 467              	.L45:
 468 00a4 CDCCCCCC 		.word	-858993459
 469              	.LBE186:
 470              	.LBE188:
 471              		.cfi_endproc
 472              	.LFE21:
 474              		.section	.text.set_exp_digits_string,"ax",%progbits
 475              		.align	1
 476              		.p2align 2,,3
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	set_exp_digits_string:
 483              	.LVL36:
 484              	.LFB13:
 433:src/display.c ****   int i;
 485              		.loc 1 433 63 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 434:src/display.c ****   const int n = res == NULL ? 3 : 4;
 489              		.loc 1 434 3 view .LVU149
 435:src/display.c **** 
 490              		.loc 1 435 3 view .LVU150
 433:src/display.c ****   int i;
 491              		.loc 1 433 63 is_stmt 0 view .LVU151
 492 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccdg5rgB.s 			page 41


 493              		.cfi_def_cfa_offset 24
 494              		.cfi_offset 3, -24
 495              		.cfi_offset 4, -20
 496              		.cfi_offset 5, -16
 497              		.cfi_offset 6, -12
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 435:src/display.c **** 
 500              		.loc 1 435 33 view .LVU152
 501 0002 0D1E     		subs	r5, r1, #0
 502 0004 0CBF     		ite	eq
 503 0006 0326     		moveq	r6, #3
 504 0008 0426     		movne	r6, #4
 505              	.LVL37:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 506              		.loc 1 437 3 is_stmt 1 view .LVU153
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 507              		.loc 1 437 13 view .LVU154
 508 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 509 000e 0446     		mov	r4, r0
 510 0010 0644     		add	r6, r6, r0
 511              	.LVL38:
 512              	.LBB189:
 513              	.LBB190:
 417:src/display.c ****   return res;
 514              		.loc 1 417 8 is_stmt 0 view .LVU155
 515 0012 03F16507 		add	r7, r3, #101
 516 0016 04E0     		b	.L49
 517              	.LVL39:
 518              	.L57:
 416:src/display.c ****   else	set_dig(base, ch);
 519              		.loc 1 416 19 view .LVU156
 520 0018 03F8011B 		strb	r1, [r3], #1
 521              	.LVL40:
 416:src/display.c ****   else	set_dig(base, ch);
 522              		.loc 1 416 19 view .LVU157
 523              	.LBE190:
 524              	.LBE189:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 525              		.loc 1 437 3 view .LVU158
 526 001c B442     		cmp	r4, r6
 527              	.LBB196:
 528              	.LBB191:
 416:src/display.c ****   else	set_dig(base, ch);
 529              		.loc 1 416 16 view .LVU159
 530 001e 1D46     		mov	r5, r3
 531              	.LVL41:
 418:src/display.c **** }
 532              		.loc 1 418 3 is_stmt 1 view .LVU160
 418:src/display.c **** }
 533              		.loc 1 418 3 is_stmt 0 view .LVU161
 534              	.LBE191:
 535              	.LBE196:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 536              		.loc 1 437 36 is_stmt 1 view .LVU162
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 537              		.loc 1 437 13 view .LVU163
ARM GAS  /tmp/ccdg5rgB.s 			page 42


 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 538              		.loc 1 437 3 is_stmt 0 view .LVU164
 539 0020 0CD0     		beq	.L47
 540              	.LVL42:
 541              	.L49:
 438:src/display.c **** }
 542              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU165
 543              	.LBB197:
 544              	.LBB192:
 416:src/display.c ****   else	set_dig(base, ch);
 545              		.loc 1 416 12 discriminator 3 view .LVU166
 416:src/display.c ****   else	set_dig(base, ch);
 546              		.loc 1 416 12 is_stmt 0 discriminator 3 view .LVU167
 547              	.LBE192:
 548              	.LBE197:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 549              		.loc 1 437 23 discriminator 3 view .LVU168
 550 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 551              	.LVL43:
 552              	.LBB198:
 553              	.LBB193:
 416:src/display.c ****   else	set_dig(base, ch);
 554              		.loc 1 416 16 discriminator 3 view .LVU169
 555 0026 2B46     		mov	r3, r5
 556              	.LVL44:
 416:src/display.c ****   else	set_dig(base, ch);
 557              		.loc 1 416 16 discriminator 3 view .LVU170
 558              	.LBE193:
 559              	.LBI189:
 415:src/display.c ****   if (res) *res++ = ch;
 560              		.loc 1 415 14 is_stmt 1 discriminator 3 view .LVU171
 561              	.LBB194:
 416:src/display.c ****   else	set_dig(base, ch);
 562              		.loc 1 416 3 discriminator 3 view .LVU172
 563              	.LBE194:
 564              	.LBE198:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 565              		.loc 1 437 17 is_stmt 0 discriminator 3 view .LVU173
 566 0028 41B1     		cbz	r1, .L47
 567              	.LVL45:
 568              	.LBB199:
 569              	.LBB195:
 416:src/display.c ****   else	set_dig(base, ch);
 570              		.loc 1 416 6 discriminator 4 view .LVU174
 571 002a 002D     		cmp	r5, #0
 572 002c F4D1     		bne	.L57
 417:src/display.c ****   return res;
 573              		.loc 1 417 8 is_stmt 1 view .LVU175
 574 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 575 0032 3844     		add	r0, r0, r7
 576 0034 FFF7FEFF 		bl	set_dig
 577              	.LVL46:
 418:src/display.c **** }
 578              		.loc 1 418 3 view .LVU176
 418:src/display.c **** }
 579              		.loc 1 418 3 is_stmt 0 view .LVU177
 580              	.LBE195:
ARM GAS  /tmp/ccdg5rgB.s 			page 43


 581              	.LBE199:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 582              		.loc 1 437 36 is_stmt 1 view .LVU178
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 583              		.loc 1 437 13 view .LVU179
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 584              		.loc 1 437 3 is_stmt 0 view .LVU180
 585 0038 B442     		cmp	r4, r6
 586 003a F2D1     		bne	.L49
 587              	.LVL47:
 588              	.L47:
 439:src/display.c **** 
 589              		.loc 1 439 1 view .LVU181
 590 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 439:src/display.c **** 
 591              		.loc 1 439 1 view .LVU182
 592              		.cfi_endproc
 593              	.LFE13:
 595 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 596              		.align	1
 597              		.p2align 2,,3
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	hms_step:
 604              	.LVL48:
 605              	.LFB20:
1668:src/display.c **** 	decNumber n;
 606              		.loc 1 1668 75 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 40
 609              		@ frame_needed = 0, uses_anonymous_args = 0
1669:src/display.c **** 
 610              		.loc 1 1669 2 view .LVU184
1671:src/display.c **** 	*v = dn_to_int(&n);
 611              		.loc 1 1671 2 view .LVU185
1668:src/display.c **** 	decNumber n;
 612              		.loc 1 1668 75 is_stmt 0 view .LVU186
 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 8AB0     		sub	sp, sp, #40
 620              		.cfi_def_cfa_offset 56
1668:src/display.c **** 	decNumber n;
 621              		.loc 1 1668 75 view .LVU187
 622 0004 0446     		mov	r4, r0
 623 0006 1646     		mov	r6, r2
1671:src/display.c **** 	*v = dn_to_int(&n);
 624              		.loc 1 1671 2 view .LVU188
 625 0008 01A8     		add	r0, sp, #4
 626              	.LVL49:
1671:src/display.c **** 	*v = dn_to_int(&n);
 627              		.loc 1 1671 2 view .LVU189
ARM GAS  /tmp/ccdg5rgB.s 			page 44


 628 000a 0A4A     		ldr	r2, .L60
 629              	.LVL50:
1668:src/display.c **** 	decNumber n;
 630              		.loc 1 1668 75 view .LVU190
 631 000c 0D46     		mov	r5, r1
1671:src/display.c **** 	*v = dn_to_int(&n);
 632              		.loc 1 1671 2 view .LVU191
 633 000e FFF7FEFF 		bl	decNumberMod
 634              	.LVL51:
1672:src/display.c **** 	dn_mulpow10(&n, x, -2);
 635              		.loc 1 1672 2 is_stmt 1 view .LVU192
1672:src/display.c **** 	dn_mulpow10(&n, x, -2);
 636              		.loc 1 1672 7 is_stmt 0 view .LVU193
 637 0012 01A8     		add	r0, sp, #4
 638 0014 FFF7FEFF 		bl	dn_to_int
 639              	.LVL52:
1673:src/display.c **** 	decNumberTrunc(res, &n);
 640              		.loc 1 1673 2 view .LVU194
 641 0018 2946     		mov	r1, r5
1672:src/display.c **** 	dn_mulpow10(&n, x, -2);
 642              		.loc 1 1672 5 view .LVU195
 643 001a 3060     		str	r0, [r6]
1673:src/display.c **** 	decNumberTrunc(res, &n);
 644              		.loc 1 1673 2 is_stmt 1 view .LVU196
 645 001c 6FF00102 		mvn	r2, #1
 646 0020 01A8     		add	r0, sp, #4
 647 0022 FFF7FEFF 		bl	dn_mulpow10
 648              	.LVL53:
1674:src/display.c ****       }
 649              		.loc 1 1674 2 view .LVU197
 650 0026 01A9     		add	r1, sp, #4
 651 0028 2046     		mov	r0, r4
 652 002a FFF7FEFF 		bl	decNumberTrunc
 653              	.LVL54:
1675:src/display.c **** 
 654              		.loc 1 1675 7 is_stmt 0 view .LVU198
 655 002e 0AB0     		add	sp, sp, #40
 656              		.cfi_def_cfa_offset 16
 657              		@ sp needed
 658 0030 70BD     		pop	{r4, r5, r6, pc}
 659              	.LVL55:
 660              	.L61:
1675:src/display.c **** 
 661              		.loc 1 1675 7 view .LVU199
 662 0032 00BF     		.align	2
 663              	.L60:
 664 0034 00000000 		.word	const_100
 665              		.cfi_endproc
 666              	.LFE20:
 668              		.section	.text.s_s_sized,"ax",%progbits
 669              		.align	1
 670              		.p2align 2,,3
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 674              		.fpu fpv4-sp-d16
 676              	s_s_sized:
ARM GAS  /tmp/ccdg5rgB.s 			page 45


 677              	.LVL56:
 678              	.LFB39:
1703:src/display.c **** 
1704:src/display.c **** 
1705:src/display.c ****       /* Display the number in H.MS mode.
1706:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1707:src/display.c ****        */
1708:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1709:src/display.c **** 	decNumber x, y, a, t, u;
1710:src/display.c **** 	int j=0;
1711:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1712:src/display.c **** 	unsigned int hr, min, sec, fs;
1713:src/display.c **** 
1714:src/display.c **** 	if (check_special_dn(rgx, res)) {
1715:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1716:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1717:src/display.c **** 	  return;
1718:src/display.c **** 	}
1719:src/display.c **** 
1720:src/display.c **** 	set_separator_decimal_modes();
1721:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1722:src/display.c **** 	dn_abs(&a, rgx);
1723:src/display.c **** 	if (decNumberIsNegative(&x)) {
1724:src/display.c **** 	  if (res != NULL)
1725:src/display.c **** 	    *res++ += '-';
1726:src/display.c **** 	  else
1727:src/display.c **** 	    SET_MANT_SIGN;
1728:src/display.c **** 	  dn_minus(&x, &x);
1729:src/display.c **** 	}
1730:src/display.c **** 
1731:src/display.c **** 	decNumberHR2HMS(&y, &x);
1732:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1733:src/display.c **** 	decNumberRound(&u, &t);
1734:src/display.c **** 
1735:src/display.c **** 	hms_step(&t, &u, &fs);
1736:src/display.c **** 	hms_step(&u, &t, &sec);
1737:src/display.c **** 	hms_step(&t, &u, &min);
1738:src/display.c **** 	hr = dn_to_int(&t);
1739:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1740:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1741:src/display.c **** 
1742:src/display.c **** 	// degrees
1743:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1744:src/display.c **** 	res = set_dig_s(j, '@', res);
1745:src/display.c **** 	j += SEGS_PER_DIGIT;
1746:src/display.c **** 
1747:src/display.c **** 	// minutes
1748:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1749:src/display.c **** 	res = set_dig_s(j, '\'', res);
1750:src/display.c **** 	j += SEGS_PER_DIGIT;
1751:src/display.c **** 
1752:src/display.c **** 	// seconds
1753:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1754:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1755:src/display.c **** 
1756:src/display.c **** 	// Fractional seconds
1757:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
ARM GAS  /tmp/ccdg5rgB.s 			page 46


1758:src/display.c **** 
1759:src/display.c **** 	// We're now pointing at the exponent's first digit...
1760:src/display.c **** 	res = set_dig_s(j, '"', res);
1761:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1762:src/display.c **** 
1763:src/display.c **** 	// Check for values too big or small
1764:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1765:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1766:src/display.c **** 	} else if (! dn_eq0(&a)) {
1767:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1768:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1769:src/display.c **** 	  }
1770:src/display.c **** 	}
1771:src/display.c ****       }
1772:src/display.c **** 
1773:src/display.c **** 
1774:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1775:src/display.c **** 	decNumber x, w, n, d, t;
1776:src/display.c **** 	char buf[32], *p = buf;
1777:src/display.c **** 	int j;
1778:src/display.c **** 
1779:src/display.c **** 	if (check_special_dn(rgx, res))
1780:src/display.c **** 	  return 1;
1781:src/display.c **** 	dn_abs(&x, rgx);
1782:src/display.c **** 	if (dn_ge(&x, &const_100000))
1783:src/display.c **** 	  return 0;
1784:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1785:src/display.c **** 	  return 0;
1786:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1787:src/display.c **** 	  if (res != NULL)
1788:src/display.c **** 	    *res++ += '-';
1789:src/display.c **** 	  else
1790:src/display.c **** 	    SET_MANT_SIGN;
1791:src/display.c **** 	}
1792:src/display.c **** 	decNumberFrac(&w, &x);
1793:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1794:src/display.c **** 
1795:src/display.c **** 	dn_divide(&t, &n, &d);
1796:src/display.c **** 	dn_compare(&t, &t, &w);
1797:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1798:src/display.c **** 
1799:src/display.c **** 	if (dn_eq(&n, &d)) {
1800:src/display.c **** 	  dn_inc(&w);
1801:src/display.c **** 	  decNumberZero(&n);
1802:src/display.c **** 	}
1803:src/display.c **** 
1804:src/display.c **** 	if (!UState.improperfrac) {
1805:src/display.c **** 	  if (!dn_eq0(&w)) {
1806:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1807:src/display.c **** 	    *p++ = ' ';
1808:src/display.c **** 	  }
1809:src/display.c **** 	} else {
1810:src/display.c **** 	  dn_multiply(&x, &w, &d);
1811:src/display.c **** 	  dn_add(&n, &n, &x);
1812:src/display.c **** 	}
1813:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1814:src/display.c **** 	*p++ = '/';
ARM GAS  /tmp/ccdg5rgB.s 			page 47


1815:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1816:src/display.c **** 	*p = '\0';
1817:src/display.c **** 	if ((p - 12) > buf) {
1818:src/display.c **** 	  p -= 12;
1819:src/display.c **** 	  *p = '<';
1820:src/display.c **** 	} else	p = buf;
1821:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1822:src/display.c **** 	  res = set_dig_s(j, *p, res);
1823:src/display.c **** 	  j += SEGS_PER_DIGIT;
1824:src/display.c **** 	}
1825:src/display.c **** 
1826:src/display.c **** 	if (dn_eq0(&t))
1827:src/display.c **** 	  p = (char *)S7_fract_EQ;
1828:src/display.c **** 	else if (decNumberIsNegative(&t))
1829:src/display.c **** 	  p = (char *)S7_fract_LT;
1830:src/display.c **** 	else
1831:src/display.c **** 	  p = (char *)S7_fract_GT;
1832:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1833:src/display.c **** 	  res = set_dig_s(j, *p, res);
1834:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1835:src/display.c **** 	}
1836:src/display.c **** 	return 1;
1837:src/display.c ****       }
1838:src/display.c **** 
1839:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1840:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1841:src/display.c **** 	decNumber c;
1842:src/display.c **** 	int true_exp, x=0;
1843:src/display.c **** 	int min_pos_exp, max_neg_exp;
1844:src/display.c **** 
1845:src/display.c **** 	if ( mode != MODE_STD ) {
1846:src/display.c **** 	  min_pos_exp = 9;
1847:src/display.c **** 	  max_neg_exp = -5;
1848:src/display.c **** 	}
1849:src/display.c **** 	else {
1850:src/display.c **** 	  min_pos_exp = 12;
1851:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1852:src/display.c **** 	}
1853:src/display.c **** 
1854:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1855:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1856:src/display.c **** 
1857:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1858:src/display.c **** 	  x = *dd;
1859:src/display.c **** 	}
1860:src/display.c **** 
1861:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1862:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1863:src/display.c **** 	  *dd += -true_exp;
1864:src/display.c **** 	  return MODE_FIX;
1865:src/display.c **** 	}
1866:src/display.c **** 
1867:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1868:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1869:src/display.c **** 	}
1870:src/display.c **** 	else {
1871:src/display.c **** 	  return MODE_STD;
ARM GAS  /tmp/ccdg5rgB.s 			page 48


1872:src/display.c **** 	}
1873:src/display.c ****       }
1874:src/display.c **** #else
1875:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1876:src/display.c **** 	decNumber b, c;
1877:src/display.c **** 
1878:src/display.c **** 	dn_1(&b);
1879:src/display.c **** 	b.exponent -= UState.dispdigs;
1880:src/display.c **** 	dn_abs(&c, z);
1881:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1882:src/display.c **** 	  return MODE_FIX;
1883:src/display.c **** 	return MODE_STD;
1884:src/display.c ****       }
1885:src/display.c **** #endif
1886:src/display.c **** 
1887:src/display.c ****       /* SHOW display mode
1888:src/display.c ****        * in double precision show left or right part
1889:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1890:src/display.c ****        */
1891:src/display.c ****       static void show_x(char *x, int exp) {
1892:src/display.c **** 	const int dbl = is_dblmode();
1893:src/display.c **** 	char *p;
1894:src/display.c **** 	int i, j;
1895:src/display.c **** 	char *upper_str;
1896:src/display.c **** 	enum separator_modes separator_mode;
1897:src/display.c **** 	char decimal_mark;
1898:src/display.c **** 	char thousands_sep;
1899:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1900:src/display.c **** 	const int grouping = 0;
1901:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1902:src/display.c **** 	const int grouping = !UState.nothousands;
1903:src/display.c **** #else
1904:src/display.c **** 	const int grouping = 1;
1905:src/display.c **** #endif
1906:src/display.c **** 	int negative;
1907:src/display.c **** 
1908:src/display.c **** 	if (x[0] == '-') {
1909:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1910:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1911:src/display.c **** 
1912:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1913:src/display.c **** 	  xcopy(x, small_minus, 4);
1914:src/display.c **** 	  x += 4;
1915:src/display.c **** 	  negative = 4;
1916:src/display.c **** #else
1917:src/display.c **** 	  ++x;
1918:src/display.c **** 	  negative = 1;
1919:src/display.c **** #endif
1920:src/display.c **** 	}
1921:src/display.c **** 	else negative = 0;
1922:src/display.c **** 
1923:src/display.c **** 	p = find_char(x, '\0');
1924:src/display.c **** 	xset(p, '0', 34 - (p - x));
1925:src/display.c **** 
1926:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1927:src/display.c **** 	  separator_mode = SEP_COMMA;
1928:src/display.c **** 	  decimal_mark = '.';
ARM GAS  /tmp/ccdg5rgB.s 			page 49


1929:src/display.c **** 	  thousands_sep = ',';
1930:src/display.c **** 	}
1931:src/display.c **** 	else {
1932:src/display.c **** 	  separator_mode = SEP_DOT;
1933:src/display.c **** 	  decimal_mark = ',';
1934:src/display.c **** 	  thousands_sep = '.';
1935:src/display.c **** 	}
1936:src/display.c **** 
1937:src/display.c **** 	if (State2.window) { // right half in double precision mode
1938:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1939:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1940:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1941:src/display.c **** 
1942:src/display.c **** 	  upper_str = x + 3;
1943:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1944:src/display.c **** 	  if (grouping) {
1945:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1946:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1947:src/display.c **** 	    x += 3 + 13 + 7;
1948:src/display.c **** 	  }
1949:src/display.c **** 	  else x += 3 + 13 + 6;
1950:src/display.c **** #else
1951:src/display.c **** 	  upper_str = x + 13;
1952:src/display.c **** 	  xset(upper_str, '.', 3);
1953:src/display.c **** 	  if (grouping) {
1954:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1955:src/display.c **** 	    upper_str[6] = thousands_sep;
1956:src/display.c **** 	    x += 13 + 3 + 7;
1957:src/display.c **** 	  }
1958:src/display.c **** 	  else x += 13 + 3 + 6;
1959:src/display.c **** #endif
1960:src/display.c **** 	  negative = 0;
1961:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1962:src/display.c **** 	}
1963:src/display.c **** 	else {
1964:src/display.c **** 	  upper_str = x;
1965:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1966:src/display.c **** 	  x[1] = decimal_mark;
1967:src/display.c **** 	  if (grouping) {
1968:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1969:src/display.c **** 	    x[5] = thousands_sep;
1970:src/display.c **** 	    x += 9;
1971:src/display.c **** 	  }
1972:src/display.c **** 	  else x += 8;
1973:src/display.c **** 	  if (dbl) {
1974:src/display.c **** 	    if (exp < 0) {
1975:src/display.c **** 	      x[9] = '-';
1976:src/display.c **** 	      exp = -exp;
1977:src/display.c **** 	    }
1978:src/display.c **** 	    else
1979:src/display.c **** 	      x[9] = ' ';
1980:src/display.c **** 	    j = exp / 1000;
1981:src/display.c **** 	    x[10] = '0' + j;
1982:src/display.c **** 	    exp -= 1000 * j;
1983:src/display.c **** 	  }
1984:src/display.c **** 	  else {
1985:src/display.c **** 	    x[9] = '\0';
ARM GAS  /tmp/ccdg5rgB.s 			page 50


1986:src/display.c **** 	    x[10] = '\0';
1987:src/display.c **** 	  }
1988:src/display.c **** 	  xcopy(x + 1, x, 11);
1989:src/display.c **** 	  *x = 0;
1990:src/display.c **** 	  set_exp(exp, 1, CNULL);
1991:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1992:src/display.c **** 	}
1993:src/display.c **** 	if (grouping) {
1994:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1995:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1996:src/display.c **** 	  }
1997:src/display.c **** 	}
1998:src/display.c **** 
1999:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
2000:src/display.c **** 	  set_dig(j, x[i]);
2001:src/display.c **** 
2002:src/display.c **** 	*x = '\0';
2003:src/display.c **** 	set_status(upper_str - negative);
2004:src/display.c ****       }
2005:src/display.c **** 
2006:src/display.c **** 
2007:src/display.c ****       /* Display the X register in the numeric portion of the display.
2008:src/display.c ****        * We have to account for the various display modes and numbers of
2009:src/display.c ****        * digits.
2010:src/display.c ****        */
2011:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
2012:src/display.c **** 	decNumber z;
2013:src/display.c **** 	int digits = DISPLAY_DIGITS;
2014:src/display.c **** 
2015:src/display.c **** 	if (dbl)
2016:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
2017:src/display.c **** 	else
2018:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
2019:src/display.c **** 	set_x_dn(&z, res, &digits);
2020:src/display.c ****       }
2021:src/display.c **** 
2022:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
2023:src/display.c **** 	char x[50], *obp = x;
2024:src/display.c **** 	int odig = 0;
2025:src/display.c **** 	int show_exp = 0;
2026:src/display.c **** 	int j;
2027:src/display.c **** 	char mantissa[64];
2028:src/display.c **** 	int exp = 0;
2029:src/display.c **** 	char *p = mantissa;
2030:src/display.c **** 	char *r;
2031:src/display.c **** 	const char *q;
2032:src/display.c **** 	int count, i;
2033:src/display.c **** 	int extra_digits = 0;
2034:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2035:src/display.c **** 	int dd;
2036:src/display.c **** 	int dispdigs;
2037:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
2038:src/display.c **** #else
2039:src/display.c **** 	int dd = UState.dispdigs;
2040:src/display.c **** 	int mode = UState.dispmode;
2041:src/display.c **** #endif
2042:src/display.c **** 	int c;
ARM GAS  /tmp/ccdg5rgB.s 			page 51


2043:src/display.c **** 	int negative = 0;
2044:src/display.c **** 	int trimzeros = 0;
2045:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
2046:src/display.c **** 	const int show_large_exponent = 0;
2047:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
2048:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
2049:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
2050:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
2051:src/display.c **** #else
2052:src/display.c **** 	const int show_large_exponent = 1;
2053:src/display.c **** #endif
2054:src/display.c **** 
2055:src/display.c **** 	set_separator_decimal_modes();
2056:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2057:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
2058:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
2059:src/display.c **** 	    if (State2.hms) {
2060:src/display.c **** 	      set_x_hms(z, res);
2061:src/display.c **** 	      return;
2062:src/display.c **** 	    }
2063:src/display.c **** 	    else if (UState.fract) {
2064:src/display.c **** 	      if (set_x_fract(z, res))
2065:src/display.c **** 		return;
2066:src/display.c **** 	    }
2067:src/display.c **** 	  }
2068:src/display.c **** 	}		
2069:src/display.c **** #else
2070:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
2071:src/display.c **** 	  if (State2.hms) {
2072:src/display.c **** 	    set_x_hms(z, res);
2073:src/display.c **** 	    State2.hms = 0;
2074:src/display.c **** 	    return;
2075:src/display.c **** 	  } else if (UState.fract) {
2076:src/display.c **** 	    if (set_x_fract(z, res))
2077:src/display.c **** 	      return;
2078:src/display.c **** 	  }
2079:src/display.c **** 	}
2080:src/display.c **** #endif
2081:src/display.c **** 
2082:src/display.c **** 	if (check_special_dn(z, res))
2083:src/display.c **** 	  return;
2084:src/display.c **** 
2085:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2086:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
2087:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2088:src/display.c **** 	  z->exponent = 0;
2089:src/display.c **** 	}
2090:src/display.c **** 
2091:src/display.c **** 	xset(x, '\0', sizeof(x));
2092:src/display.c **** 
2093:src/display.c **** 	if (dn_eq0(z)) {
2094:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2095:src/display.c **** 	    x[0] = '-';
2096:src/display.c **** 	    x[1] = '0';
2097:src/display.c **** 	  } else
2098:src/display.c **** 	    x[0] = '0';
2099:src/display.c **** 	} else
ARM GAS  /tmp/ccdg5rgB.s 			page 52


2100:src/display.c **** 	  decNumberToString(z, x);
2101:src/display.c **** 
2102:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2103:src/display.c **** 	  show_x(x, exp);
2104:src/display.c **** 	  return;
2105:src/display.c **** 	}
2106:src/display.c **** 
2107:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2108:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2109:src/display.c **** 	  //  ALL mode: fill the display
2110:src/display.c **** 	  dd = *display_digits - 1;
2111:src/display.c **** 	else
2112:src/display.c **** 	  dd = dispdigs;
2113:src/display.c **** 
2114:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2115:src/display.c **** 	  int orig_mode = mode;
2116:src/display.c **** 
2117:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2118:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2119:src/display.c **** 	    // allow zeros to be trimmed
2120:src/display.c **** 	    trimzeros = 1;
2121:src/display.c **** 	  if (orig_mode == MODE_STD)
2122:src/display.c **** 	    dd = *display_digits - 1;
2123:src/display.c ****  	}
2124:src/display.c **** #else
2125:src/display.c **** 	if (mode == MODE_STD) {
2126:src/display.c **** 	  mode = std_round_fix(z);
2127:src/display.c **** 	  trimzeros = 1;
2128:src/display.c **** 	  dd = *display_digits - 1;
2129:src/display.c **** 	} else if (dd >= *display_digits)
2130:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2131:src/display.c **** 	  dd = *display_digits - 1;
2132:src/display.c **** #endif
2133:src/display.c **** 
2134:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2135:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2136:src/display.c **** 
2137:src/display.c **** 	q = find_char(x, 'E');
2138:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2139:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2140:src/display.c **** 	if (q == NULL) exp = 0;
2141:src/display.c **** 	else {
2142:src/display.c **** 	  exp = s_to_i(q+1);
2143:src/display.c **** 	  if (*q == 'D') exp = -exp;
2144:src/display.c **** 	}
2145:src/display.c **** #else
2146:src/display.c **** 	if (q == NULL) exp = 0;
2147:src/display.c **** 	else exp = s_to_i(q+1);
2148:src/display.c **** #endif
2149:src/display.c **** 
2150:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2151:src/display.c **** 	for (q=x; *q == ' '; q++);
2152:src/display.c **** 	if (!res) {
2153:src/display.c **** 	  CLR_EXP_SIGN;
2154:src/display.c **** 	  CLR_MANT_SIGN;
2155:src/display.c **** 	}
2156:src/display.c **** 	if (*q == '-') {
ARM GAS  /tmp/ccdg5rgB.s 			page 53


2157:src/display.c **** 	  negative = 1;
2158:src/display.c **** 	  q++;
2159:src/display.c **** 	} else if (*q == '+')
2160:src/display.c **** 	  q++;
2161:src/display.c **** 	for (; *q == '0'; q++);
2162:src/display.c **** 	if (*q == '.') {
2163:src/display.c **** 	  do
2164:src/display.c **** 	    exp--;
2165:src/display.c **** 	  while (*++q == '0');
2166:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2167:src/display.c **** 	    *p++ = *q++;
2168:src/display.c **** 	} else {
2169:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2170:src/display.c **** 	    *p++ = *q++;
2171:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2172:src/display.c **** 	    *p++ = *q++;
2173:src/display.c **** 	    exp++;
2174:src/display.c **** 	  }
2175:src/display.c **** 	  if (*q == '.') {
2176:src/display.c **** 	    q++;
2177:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2178:src/display.c **** 	      *p++ = *q++;
2179:src/display.c **** 	  }
2180:src/display.c **** 	}
2181:src/display.c **** 
2182:src/display.c **** 	if (mode == MODE_FIX) {
2183:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2184:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2185:src/display.c **** 	  else {
2186:src/display.c **** 	    extra_digits = exp;
2187:src/display.c **** 	    /* We might have push the fixed decimals off the
2188:src/display.c **** 	     * screen so adjust if so.
2189:src/display.c **** 	     */
2190:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2191:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2192:src/display.c **** 	  }
2193:src/display.c **** 	}
2194:src/display.c **** 
2195:src/display.c **** 	// Round the mantissa to the number of digits desired
2196:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2197:src/display.c **** 	if (*p >= '5') {	// Round up
2198:src/display.c **** 	  *p = '0';
2199:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2200:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2201:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2202:src/display.c **** 	    mantissa[0] = '1';
2203:src/display.c **** 	    exp++;
2204:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2205:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2206:src/display.c **** 	      extra_digits = 0;
2207:src/display.c **** 	    }
2208:src/display.c **** 	  } else {
2209:src/display.c **** 	    while (*--p == '9')
2210:src/display.c **** 	      *p = '0';
2211:src/display.c **** 	    (*p)++;
2212:src/display.c **** 	  }
2213:src/display.c **** 	}
ARM GAS  /tmp/ccdg5rgB.s 			page 54


2214:src/display.c **** 
2215:src/display.c **** 	// Zap what is left
2216:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2217:src/display.c **** 
2218:src/display.c **** 	p = mantissa;
2219:src/display.c **** 	switch (mode) {
2220:src/display.c **** 	default:
2221:src/display.c **** 	case MODE_STD:   
2222:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2223:src/display.c **** 	  if (count != *display_digits)
2224:src/display.c **** 	    count++;
2225:src/display.c **** 	  // Too big or too small to fit on display
2226:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2227:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2228:src/display.c **** 	    case -1:
2229:src/display.c **** 	    case 2:
2230:src/display.c **** 	      *obp++ = *p++;
2231:src/display.c **** 	      odig++;
2232:src/display.c **** 	      dd--;
2233:src/display.c **** 	      exp--;
2234:src/display.c **** 	    case -2:
2235:src/display.c **** 	    case 1:
2236:src/display.c **** 	      *obp++ = *p++;
2237:src/display.c **** 	      odig++;
2238:src/display.c **** 	      dd--;
2239:src/display.c **** 	      exp--;
2240:src/display.c **** 	    case 0:
2241:src/display.c **** 	      ;
2242:src/display.c **** 	    };
2243:src/display.c **** 	    *obp++ = *p++;
2244:src/display.c **** 	    odig++;
2245:src/display.c **** 	    *obp++ = '.';
2246:src/display.c **** 	    for (i=1; i<count; i++) {
2247:src/display.c **** 	      *obp++ = *p++;
2248:src/display.c **** 	      odig++;
2249:src/display.c **** 	    }
2250:src/display.c **** 	    show_exp = 1;
2251:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2252:src/display.c **** 	    for(i=0; i<=exp; i++) {
2253:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2254:src/display.c **** 		*obp++ = ',';
2255:src/display.c **** 	      *obp++ = *p++;
2256:src/display.c **** 	      odig++;
2257:src/display.c **** 	    }
2258:src/display.c **** 	    *obp++ = '.';
2259:src/display.c **** 	    if (count > (exp + 1)) {
2260:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2261:src/display.c **** 		*obp++ = *p++;
2262:src/display.c **** 		odig++;
2263:src/display.c **** 	      }
2264:src/display.c **** 	    }
2265:src/display.c **** 	  } else {		// All digits to right of decimal point
2266:src/display.c **** 	    *obp++ = '0';
2267:src/display.c **** 	    odig++;
2268:src/display.c **** 	    *obp++ = '.';
2269:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2270:src/display.c **** 	      *obp++ = '0';
ARM GAS  /tmp/ccdg5rgB.s 			page 55


2271:src/display.c **** 	      odig++;
2272:src/display.c **** 	    }
2273:src/display.c **** 	    for (i=0; i<count; i++) {
2274:src/display.c **** 	      *obp++ = *p++;
2275:src/display.c **** 	      odig++;
2276:src/display.c **** 	    }
2277:src/display.c **** 	  }
2278:src/display.c **** 	  break;
2279:src/display.c **** 
2280:src/display.c **** 	case MODE_FIX:
2281:src/display.c **** 	  j = 0;
2282:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2283:src/display.c **** 	    for (i=0; i<=exp; i++) {
2284:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2285:src/display.c **** 		*obp++ = ',';
2286:src/display.c **** 	      *obp++ = *p++;
2287:src/display.c **** 	      odig++;
2288:src/display.c **** 	    }
2289:src/display.c **** 	    *obp++ = '.';
2290:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2291:src/display.c **** 	      *obp++ = *p++;
2292:src/display.c **** 	      odig++;
2293:src/display.c **** 	    }
2294:src/display.c **** 	  } else {		// All digits to right of decimal point
2295:src/display.c **** 	    *obp++ = '0';
2296:src/display.c **** 	    odig++;
2297:src/display.c **** 	    *obp++ = '.';
2298:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2299:src/display.c **** 	      *obp++ = '0';
2300:src/display.c **** 	      odig++;
2301:src/display.c **** 	      dd--;
2302:src/display.c **** 	    }
2303:src/display.c **** 	    while (dd-- > 0) {
2304:src/display.c **** 	      *obp++ = *p++;
2305:src/display.c **** 	      odig++;
2306:src/display.c **** 	    }
2307:src/display.c **** 	  }
2308:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2309:src/display.c **** 	  if (trimzeros)
2310:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2311:src/display.c **** 	      obp--;
2312:src/display.c **** 	      odig--;
2313:src/display.c **** 	    }
2314:src/display.c **** #endif			
2315:src/display.c **** 	  break;
2316:src/display.c **** 
2317:src/display.c **** 	case MODE_ENG:
2318:src/display.c **** 	  switch (exp % 3) {
2319:src/display.c **** 	  case -1:
2320:src/display.c **** 	  case 2:
2321:src/display.c **** 	    *obp++ = *p++;
2322:src/display.c **** 	    odig++;
2323:src/display.c **** 	    dd--;
2324:src/display.c **** 	    exp--;
2325:src/display.c **** 	  case -2:
2326:src/display.c **** 	  case 1:
2327:src/display.c **** 	    *obp++ = *p++;
ARM GAS  /tmp/ccdg5rgB.s 			page 56


2328:src/display.c **** 	    odig++;
2329:src/display.c **** 	    dd--;
2330:src/display.c **** 	    exp--;
2331:src/display.c **** 	  case 0:
2332:src/display.c **** 	    ;
2333:src/display.c **** 	  };
2334:src/display.c **** 	  // Falling through
2335:src/display.c **** 
2336:src/display.c **** 	case MODE_SCI:
2337:src/display.c **** 	  *obp++ = *p++;
2338:src/display.c **** 	  odig++;
2339:src/display.c **** 	  *obp++ = '.';
2340:src/display.c **** 	  dd--;
2341:src/display.c **** 	  while (dd-- >= 0) {
2342:src/display.c **** 	    *obp++ = *p++;
2343:src/display.c **** 	    odig++;
2344:src/display.c **** 	  }
2345:src/display.c **** 	  show_exp = 1;
2346:src/display.c **** 	}
2347:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2348:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2349:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2350:src/display.c **** 	    obp--;
2351:src/display.c **** 	    odig--;
2352:src/display.c **** 	  }
2353:src/display.c **** #endif	
2354:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2355:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2356:src/display.c **** 	  set_x_dn(z, res, display_digits);
2357:src/display.c **** 	  return;
2358:src/display.c **** 	}
2359:src/display.c **** 	/* Finally, send the output to the display */
2360:src/display.c **** 	*obp = '\0';
2361:src/display.c **** 	if (odig > *display_digits)
2362:src/display.c **** 	  odig = *display_digits;
2363:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2364:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2365:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2366:src/display.c **** 	if (negative) {
2367:src/display.c **** 	  if (res) *res++ = '-';
2368:src/display.c **** 	  else {
2369:src/display.c **** 	    if (j == 0)
2370:src/display.c **** 	      SET_MANT_SIGN;
2371:src/display.c **** 	    else
2372:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2373:src/display.c **** 	  }
2374:src/display.c **** 	}
2375:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2376:src/display.c **** 	  if (c == '.') {
2377:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2378:src/display.c **** 	  } else if (c == ',') {
2379:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2380:src/display.c **** 	  } else {
2381:src/display.c **** 	    res = set_dig_s(j, c, res);
2382:src/display.c **** 	    j += SEGS_PER_DIGIT;
2383:src/display.c **** 	  }
2384:src/display.c **** 	}
ARM GAS  /tmp/ccdg5rgB.s 			page 57


2385:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2386:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2387:src/display.c **** 	  if ( !res ) {
2388:src/display.c **** 	    set_exp(exp, 4, res);
2389:src/display.c **** 	  }
2390:src/display.c **** 	  else {
2391:src/display.c **** 	    set_exp(exp, 0, res);
2392:src/display.c **** 	  }
2393:src/display.c **** 	}
2394:src/display.c **** #else
2395:src/display.c **** 	if (show_exp)
2396:src/display.c **** 	  set_exp(exp, 0, res);
2397:src/display.c **** #endif
2398:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2399:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2400:src/display.c **** 	*display_digits = odig;
2401:src/display.c ****       }
2402:src/display.c **** 
2403:src/display.c **** #if defined(QTGUI) || defined(IOS)
2404:src/display.c ****       void format_display(char *buf) {
2405:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2406:src/display.c **** 	  {
2407:src/display.c **** 	    const char *p = get_cmdline();
2408:src/display.c **** 	    if (p == NULL) {
2409:src/display.c **** 	      format_reg(regX_idx, buf);
2410:src/display.c **** 	    } else {
2411:src/display.c **** 	      scopy(buf, p);
2412:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2413:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2414:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2415:src/display.c **** 		buf[CmdLineEex] = 'E';
2416:src/display.c **** 		buf[CmdLineEex+1] = '-';
2417:src/display.c **** 	      }
2418:src/display.c **** #  endif
2419:src/display.c **** 	    }
2420:src/display.c **** 	  }
2421:src/display.c **** 	else {
2422:src/display.c **** 	  buf[0]=0;
2423:src/display.c **** 	}
2424:src/display.c ****       }
2425:src/display.c **** #endif
2426:src/display.c **** 
2427:src/display.c ****       void format_reg(int index, char *buf) {
2428:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2429:src/display.c **** 
2430:src/display.c **** 	if (is_intmode())
2431:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2432:src/display.c **** #ifndef HP16C_MODE_CHANGE
2433:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2434:src/display.c **** 	  decNumber x;
2435:src/display.c **** 	  int s;
2436:src/display.c **** 	  unsigned long long int v;
2437:src/display.c **** 
2438:src/display.c **** 	  getRegister(&x, index);
2439:src/display.c **** 	  v = dn_to_ull(&x, &s);
2440:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2441:src/display.c **** 	}
ARM GAS  /tmp/ccdg5rgB.s 			page 58


2442:src/display.c **** #endif
2443:src/display.c **** 	else
2444:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2445:src/display.c ****       }
2446:src/display.c **** 
2447:src/display.c ****       /* Display the status screen */
2448:src/display.c ****       static void show_status(void) {
2449:src/display.c **** 	int i, n;
2450:src/display.c **** 	int j = SEGS_EXP_BASE;
2451:src/display.c **** 	const int status = State2.status - 3;
2452:src/display.c **** 	char buf[16], *p = buf;
2453:src/display.c **** 	unsigned int pc;
2454:src/display.c **** 
2455:src/display.c **** 	if (status == -2) {
2456:src/display.c **** 	  set_status("Free:");
2457:src/display.c **** 	  p = num_arg(buf, free_mem());
2458:src/display.c **** 	  p = scopy(p, " , FL. ");
2459:src/display.c **** 	  p = num_arg(p, free_flash());
2460:src/display.c **** 	  *p = '\0';
2461:src/display.c **** 	  set_digits_string(buf, 0);
2462:src/display.c **** 	}
2463:src/display.c **** 	else if (status == -1) {
2464:src/display.c **** 	  /* Top line */
2465:src/display.c **** 	  p = scopy(buf, "Regs:");
2466:src/display.c **** 	  if (SizeStatRegs)
2467:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2468:src/display.c **** 	  *p = '\0';
2469:src/display.c **** 	  set_status(buf);
2470:src/display.c **** 
2471:src/display.c **** 	  /* Bottom line */
2472:src/display.c **** 	  p = num_arg(buf, global_regs());
2473:src/display.c **** 	  if (LocalRegs < 0) {
2474:src/display.c **** 	    p = scopy(p, " , Loc. ");
2475:src/display.c **** 	    p = num_arg(p, local_regs());
2476:src/display.c **** 	  }
2477:src/display.c **** 	  *p = '\0';
2478:src/display.c **** 	  set_digits_string(buf, 0);
2479:src/display.c **** 	} else {
2480:src/display.c **** 	  int base;
2481:src/display.c **** 	  int end;
2482:src/display.c **** 	  int group = 10;
2483:src/display.c **** 	  int start = 0;
2484:src/display.c **** 		
2485:src/display.c **** 	  if (status <= 9) {
2486:src/display.c **** 	    base = 10 * status;
2487:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2488:src/display.c **** 	    p = scopy(buf, "FL ");
2489:src/display.c **** 	    p = num_arg_0(p, base, 2);
2490:src/display.c **** 	    *p++ = '-';
2491:src/display.c **** 	    p = num_arg_0(p, end, 2);
2492:src/display.c **** 	    *p = '\0';
2493:src/display.c **** 	    set_status(buf);
2494:src/display.c **** 	  }
2495:src/display.c **** 	  else if (status == 10) {
2496:src/display.c **** 	    base = regX_idx;
2497:src/display.c **** 	    end = regK_idx;
2498:src/display.c **** 	    start = 3;
ARM GAS  /tmp/ccdg5rgB.s 			page 59


2499:src/display.c **** 	    group = 4;
2500:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2501:src/display.c **** 	  }
2502:src/display.c **** 	  else { // status == 11
2503:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2504:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2505:src/display.c **** 	    set_status("FL.00-.15");
2506:src/display.c **** 	  }
2507:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2508:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2509:src/display.c **** 	  j += SEGS_PER_DIGIT;
2510:src/display.c **** 	  for (i = start; i < group + start; i++) {
2511:src/display.c **** 	    int k = i + base - start;
2512:src/display.c **** 	    int l = get_user_flag(k);
2513:src/display.c **** 	    k += group;
2514:src/display.c **** 	    if (end >= k) {
2515:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2516:src/display.c **** 	      k += group;
2517:src/display.c **** 	      if (end >= k)
2518:src/display.c **** 		l |= (get_user_flag(k) << 2);
2519:src/display.c **** 	    }
2520:src/display.c **** 	    set_dig(j, l);
2521:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2522:src/display.c **** 	    j += SEGS_PER_DIGIT;
2523:src/display.c **** 	    if (i == 4) {
2524:src/display.c **** 	      set_dig(j, 8);
2525:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2526:src/display.c **** 	      j += SEGS_PER_DIGIT;
2527:src/display.c **** 	    }
2528:src/display.c **** 	  }
2529:src/display.c **** 	}
2530:src/display.c **** 
2531:src/display.c **** 	j = SEGS_EXP_BASE;
2532:src/display.c **** 	pc = state_pc();
2533:src/display.c **** 	if (isXROM(pc))
2534:src/display.c **** 	  pc = 1;
2535:src/display.c **** 	for (n=i=0; i<4; i++) {
2536:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2537:src/display.c **** 	    if (++n == 4) {
2538:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2539:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2540:src/display.c **** 	    } else {
2541:src/display.c **** 	      set_dig(j, 'A'+i);
2542:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2543:src/display.c **** 	    }
2544:src/display.c **** 	  }
2545:src/display.c **** 	}
2546:src/display.c ****       }
2547:src/display.c **** 
2548:src/display.c **** 
2549:src/display.c ****       /* Display the list of alpha labels */
2550:src/display.c ****       static void show_label(void) {
2551:src/display.c **** 	char buf[16];
2552:src/display.c **** 	unsigned short int pc = State2.digval;
2553:src/display.c **** 	unsigned int op = getprog(pc);
2554:src/display.c **** 	int n = nLIB(pc);
2555:src/display.c **** 	unsigned short int lblpc;
ARM GAS  /tmp/ccdg5rgB.s 			page 60


2556:src/display.c **** 
2557:src/display.c **** 	set_status(prt((opcode)op, buf));
2558:src/display.c **** 	set_digits_string(libname[n], 0);
2559:src/display.c **** #ifndef REALBUILD
2560:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2561:src/display.c **** #endif
2562:src/display.c **** 
2563:src/display.c **** 	if (op & OP_DBL) {
2564:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2565:src/display.c **** 	  if (lblpc != pc) {
2566:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2567:src/display.c **** 	    n = nLIB(lblpc);
2568:src/display.c **** 	    if (n == REGION_RAM)
2569:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2570:src/display.c **** 	    else {
2571:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2572:src/display.c **** #ifndef REALBUILD
2573:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2574:src/display.c **** #endif
2575:src/display.c **** 	    }
2576:src/display.c **** 	  }
2577:src/display.c **** 	}
2578:src/display.c ****       }
2579:src/display.c **** 
2580:src/display.c ****       /* Display a list of register contents */
2581:src/display.c ****       static void show_registers(void) {
2582:src/display.c **** 	char buf[16], *bp;
2583:src/display.c **** 	int n = State2.digval;
2584:src/display.c **** 	
2585:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2586:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2587:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2588:src/display.c **** 	  n;
2589:src/display.c **** #else
2590:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2591:src/display.c **** 	  n;
2592:src/display.c **** #endif
2593:src/display.c **** 
2594:src/display.c **** 	if (State2.disp_as_alpha) {
2595:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2596:src/display.c **** 	}
2597:src/display.c **** 	else {
2598:src/display.c **** 	  xset(buf, '\0', 16);
2599:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2600:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2601:src/display.c **** #else
2602:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2603:src/display.c **** #endif
2604:src/display.c **** 	  if (State2.local) {
2605:src/display.c **** 	    *bp++ = '.';
2606:src/display.c **** 	    if (n >= 100) {
2607:src/display.c **** 	      *bp++ = '1';
2608:src/display.c **** 	      n -= 100;
2609:src/display.c **** 	    }
2610:src/display.c **** 	  }
2611:src/display.c **** 	  if (n < 100)
2612:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
ARM GAS  /tmp/ccdg5rgB.s 			page 61


2613:src/display.c **** 	  else
2614:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2615:src/display.c **** 	  set_status(buf);
2616:src/display.c **** 	}
2617:src/display.c **** 	format_reg(reg, CNULL);
2618:src/display.c ****       }
2619:src/display.c **** 
2620:src/display.c **** 
2621:src/display.c ****       static void set_annunciators(void)
2622:src/display.c ****       {
2623:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2624:src/display.c **** 
2625:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2626:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2627:src/display.c **** 	 * browsing constants.
2628:src/display.c **** 	 */
2629:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2630:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2631:src/display.c **** #else
2632:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2633:src/display.c **** #endif
2634:src/display.c **** #ifdef INCLUDE_C_LOCK
2635:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2636:src/display.c **** #endif
2637:src/display.c **** 
2638:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2639:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2640:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2641:src/display.c **** 	set_IO_annunciator();
2642:src/display.c **** 
2643:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2644:src/display.c **** 	 */
2645:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2646:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2647:src/display.c ****       }
2648:src/display.c **** 
2649:src/display.c **** 
2650:src/display.c ****       /*
2651:src/display.c ****        *  Toggle the little "=" sign
2652:src/display.c ****        */
2653:src/display.c ****       void set_IO_annunciator(void) {
2654:src/display.c **** #ifndef DM42
2655:src/display.c **** 	int on = SerialOn
2656:src/display.c **** #endif
2657:src/display.c **** #ifdef DM42
2658:src/display.c **** 	  int on = 0
2659:src/display.c **** #endif
2660:src/display.c **** #ifdef REALBUILD
2661:src/display.c **** 	  || DebugFlag
2662:src/display.c **** #endif
2663:src/display.c **** #ifdef INFRARED
2664:src/display.c **** 	  || PrinterColumn != 0
2665:src/display.c **** #endif
2666:src/display.c **** 	  ;
2667:src/display.c **** 
2668:src/display.c **** 	if (on != IoAnnunciator) {
2669:src/display.c **** 	  dot(LIT_EQ, on);
ARM GAS  /tmp/ccdg5rgB.s 			page 62


2670:src/display.c **** 	  IoAnnunciator = on;
2671:src/display.c **** 	  finish_display(); //LIT_EQ
2672:src/display.c **** 	}
2673:src/display.c ****       }
2674:src/display.c **** 
2675:src/display.c **** #ifdef TOP_ROW
2676:src/display.c ****       /*
2677:src/display.c ****        *  Update the display
2678:src/display.c ****        */
2679:src/display.c ****       void display(void) {
2680:src/display.c **** 	int i, j;
2681:src/display.c **** 	char buf[40], *bp = buf;
2682:src/display.c **** 	const char *p;
2683:src/display.c **** 	int annuc = 0;
2684:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2685:src/display.c **** 	int skip = 0;
2686:src/display.c **** 	int x_disp = 0;
2687:src/display.c **** 	const int shift = cur_shift();
2688:src/display.c **** 
2689:src/display.c **** 	no_status_top = 0;
2690:src/display.c **** 	if (State2.disp_freeze) {
2691:src/display.c **** 	  State2.disp_freeze = 0;
2692:src/display.c **** 	  State2.disp_temp = 1;
2693:src/display.c **** #ifdef CONSOLE
2694:src/display.c **** 	  JustDisplayed = 1;
2695:src/display.c **** #endif
2696:src/display.c **** 	  ShowRPN = 0;
2697:src/display.c **** 	  return;
2698:src/display.c **** 	}
2699:src/display.c **** 
2700:src/display.c **** 	if (WasDataEntry) {
2701:src/display.c **** #if defined(QTGUI) || defined(IOS)
2702:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2703:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2704:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2705:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2706:src/display.c **** #endif
2707:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2708:src/display.c **** 
2709:src/display.c **** 	  // Erase 7-segment display
2710:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2711:src/display.c **** 	    clr_dot(i);
2712:src/display.c **** 	  }
2713:src/display.c **** 	  goto only_update_x;
2714:src/display.c **** 	}
2715:src/display.c **** #ifdef INCLUDE_YREG_CODE
2716:src/display.c **** #  ifdef YREG_ALWAYS_ON
2717:src/display.c **** 	const int yreg_enabled = 1;
2718:src/display.c **** #  else
2719:src/display.c **** 	const int yreg_enabled = UState.show_y;
2720:src/display.c **** #  endif
2721:src/display.c **** #else
2722:src/display.c **** 	const int yreg_enabled = 0;
2723:src/display.c **** #endif
2724:src/display.c **** 	// Clear display
2725:src/display.c **** 	reset_disp();
2726:src/display.c **** 
ARM GAS  /tmp/ccdg5rgB.s 			page 63


2727:src/display.c **** 	
2728:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2729:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2730:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2731:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2732:src/display.c **** 	/*   set_status(buf); */
2733:src/display.c **** 	/* } */
2734:src/display.c **** 	if (State2.version) {
2735:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2736:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2737:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2738:src/display.c **** #ifndef REALBUILD
2739:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2740:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2741:src/display.c **** #endif
2742:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2743:src/display.c **** 	  set_status(vers);
2744:src/display.c **** 	  skip = 1;
2745:src/display.c **** 	  goto nostk;
2746:src/display.c **** 	} else if (State2.confirm) {
2747:src/display.c **** 	  if (yreg_enabled) {
2748:src/display.c **** 	    set_status_top(S_SURE);
2749:src/display.c **** 	    no_status_top = 1;
2750:src/display.c **** 	    annuc = 1;
2751:src/display.c **** 	  }
2752:src/display.c **** 	  else {
2753:src/display.c **** 	    set_status(S_SURE);
2754:src/display.c **** 	  }
2755:src/display.c **** 	} else if (State2.hyp) {
2756:src/display.c **** 	  bp = scopy(bp, "HYP");
2757:src/display.c **** 	  if (! State2.dot)
2758:src/display.c **** 	    *bp++ = '\235';
2759:src/display.c **** 	  if (yreg_enabled) {
2760:src/display.c **** 	    set_status_top(buf);
2761:src/display.c **** 	    no_status_top = 1;
2762:src/display.c **** 	    annuc = 1;
2763:src/display.c **** 	  }
2764:src/display.c **** 	  else {
2765:src/display.c **** 	    set_status(buf);
2766:src/display.c **** 	  }
2767:src/display.c **** 	} else if (State2.gtodot) {
2768:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2769:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2770:src/display.c **** 	  if (State2.numdigit > 0)
2771:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2772:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2773:src/display.c **** 	  *bp++ = '_';
2774:src/display.c **** 	  if (yreg_enabled) {
2775:src/display.c **** 	    set_status_top(buf);
2776:src/display.c **** 	    no_status_top = 1;
2777:src/display.c **** 	    annuc = 1;
2778:src/display.c **** 	  }
2779:src/display.c **** 	  else {
2780:src/display.c **** 	    set_status(buf);
2781:src/display.c **** 	  }
2782:src/display.c **** 	} else if (State2.rarg) {
2783:src/display.c **** 	  /* Commands with arguments */
ARM GAS  /tmp/ccdg5rgB.s 			page 64


2784:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2785:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2786:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2787:src/display.c **** #endif
2788:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2789:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2790:src/display.c **** 	  if (State2.dot) {
2791:src/display.c **** 	    *bp++ = 's';
2792:src/display.c **** 	    *bp++ = '_';
2793:src/display.c **** 	  } else if (shift == SHIFT_F) {
2794:src/display.c **** 	    *bp++ = '\021';
2795:src/display.c **** 	    *bp++ = '_';
2796:src/display.c **** 	  } else {
2797:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2798:src/display.c **** 	       : State2.ind ? 2 
2799:src/display.c **** 	       : num_arg_digits(CmdBase); */
2800:src/display.c **** 	    if (State2.local)
2801:src/display.c **** 	      *bp++ = '.';
2802:src/display.c **** 	    if (State2.numdigit > 0) {
2803:src/display.c **** 	      if (State2.shuffle)
2804:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2805:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2806:src/display.c **** 	      else
2807:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2808:src/display.c **** 	    }
2809:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2810:src/display.c **** 	    *bp++ = '_';
2811:src/display.c **** 	  }
2812:src/display.c **** 	  if (yreg_enabled) {
2813:src/display.c **** 	    set_status_top(buf);
2814:src/display.c **** 	    no_status_top = 1;
2815:src/display.c **** 	    annuc = 1;
2816:src/display.c **** 	  }
2817:src/display.c **** 	  else {
2818:src/display.c **** 	    set_status(buf);
2819:src/display.c **** 	  }
2820:src/display.c **** 	} else if (State2.test != TST_NONE) {
2821:src/display.c **** 	  *bp++ = 'x';
2822:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2823:src/display.c **** 	  *bp++ = '_';
2824:src/display.c **** 	  *bp++ = '?';
2825:src/display.c **** 	  if (yreg_enabled) {
2826:src/display.c **** 	    set_status_top(buf);
2827:src/display.c **** 	    no_status_top = 1;
2828:src/display.c **** 	    annuc = 1;
2829:src/display.c **** 	  }
2830:src/display.c **** 	  else {
2831:src/display.c **** 	    set_status(buf);
2832:src/display.c **** 	  }
2833:src/display.c **** 	} else if (cata) {
2834:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2835:src/display.c **** 	  char b2[16];
2836:src/display.c **** 	  const char *p;
2837:src/display.c **** 
2838:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2839:src/display.c **** 	  p = catcmd(op, b2);
2840:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
ARM GAS  /tmp/ccdg5rgB.s 			page 65


2841:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2842:src/display.c **** 	  bp = scopy(bp, p);
2843:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2844:src/display.c **** 	    // State2.disp_small = 1;
2845:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2846:src/display.c **** 	      set_digits_string("0 to 255", 0);
2847:src/display.c **** 	    else
2848:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2849:src/display.c **** 	    skip = 1;
2850:src/display.c **** 	  } else if (State2.runmode) {
2851:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2852:src/display.c **** 	      decNumber x, r;
2853:src/display.c **** 	      decimal64 z;
2854:src/display.c **** 
2855:src/display.c **** 	      getX(&x);
2856:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2857:src/display.c **** 		const unsigned int f = argKIND(op);
2858:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2859:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2860:src/display.c **** 		  update_speed(0);
2861:src/display.c **** 		  fp(&r, &x);
2862:src/display.c **** 		}
2863:src/display.c **** 		else
2864:src/display.c **** 		  set_NaN(&r);
2865:src/display.c **** 	      } else
2866:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2867:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2868:src/display.c **** 	      packed_from_number(&z, &r);
2869:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2870:src/display.c **** 	      skip = 1;
2871:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2872:src/display.c **** 	      REGISTER z, *const x = StackBase;
2873:src/display.c **** 	      copyreg(&z, x);
2874:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2875:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2876:src/display.c **** 	      copyreg(x, &z);
2877:src/display.c **** 	      skip = 1;
2878:src/display.c **** 	    }
2879:src/display.c **** 	  }
2880:src/display.c **** 	  if (yreg_enabled) {
2881:src/display.c **** 	    set_status_top(buf);
2882:src/display.c **** 	    no_status_top = 1;
2883:src/display.c **** 	    annuc = 1;
2884:src/display.c **** 	  }
2885:src/display.c **** 	  else {
2886:src/display.c **** 	    set_status(buf);
2887:src/display.c **** 	  }
2888:src/display.c **** 	} else if (State2.multi) {
2889:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2890:src/display.c **** 	  if (State2.numdigit > 0) {
2891:src/display.c **** 	    *bp++ = (char) State2.digval;
2892:src/display.c **** 	    if (State2.numdigit > 1)
2893:src/display.c **** 	      *bp++ = State2.digval2;
2894:src/display.c **** 	  }
2895:src/display.c **** 	  if (yreg_enabled) {
2896:src/display.c **** 	    set_status_top(buf);
2897:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/ccdg5rgB.s 			page 66


2898:src/display.c **** 	    annuc = 1;
2899:src/display.c **** 	  }
2900:src/display.c **** 	  else {
2901:src/display.c **** 	    set_status(buf);
2902:src/display.c **** 	  }
2903:src/display.c **** 	} else if (State2.status) {
2904:src/display.c **** 	  show_status();
2905:src/display.c **** 	  skip = 1;
2906:src/display.c **** 	} else if (State2.labellist) {
2907:src/display.c **** 	  show_label();
2908:src/display.c **** 	  skip = 1;
2909:src/display.c **** 	} else if (State2.registerlist) {
2910:src/display.c **** 	  show_registers();
2911:src/display.c **** 	  skip = 1;
2912:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2913:src/display.c **** 	    annunciators();
2914:src/display.c **** 	  }
2915:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2916:src/display.c **** 	} else if (State2.disp_as_alpha) {
2917:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2918:src/display.c **** #endif
2919:src/display.c **** 	} else if (State2.runmode) {
2920:src/display.c **** 	  if (DispMsg) { 
2921:src/display.c **** 	    set_status(DispMsg);
2922:src/display.c **** 	  } else if (DispPlot) {
2923:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2924:src/display.c **** 	  } else if (State2.alphas) {
2925:src/display.c **** 	    bp = scopy(buf, Alpha);
2926:src/display.c **** 	    j = State2.alpha_pos;
2927:src/display.c **** 	    if (j != 0) {
2928:src/display.c **** 	      i = slen(buf);
2929:src/display.c **** 	      j *= 6;
2930:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2931:src/display.c **** 		{
2932:src/display.c **** 		  buf[ (i - j) ] = '\0';
2933:src/display.c **** 		  set_status_right(buf);
2934:src/display.c **** 		}
2935:src/display.c **** 	      else {
2936:src/display.c **** 		set_status(buf);
2937:src/display.c **** 	      }
2938:src/display.c **** 	    }
2939:src/display.c **** 	    else {
2940:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2941:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2942:src/display.c **** 		*bp++ = '\0';
2943:src/display.c **** 	      }
2944:src/display.c **** 	      set_status_right(buf);
2945:src/display.c **** 	    }
2946:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2947:src/display.c **** 	      bp = buf;
2948:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2949:src/display.c **** 	      *bp++ = '\0';
2950:src/display.c **** 	      set_status_top(buf);
2951:src/display.c **** 	      no_status_top = 1;
2952:src/display.c **** 	      //annuc = 1;
2953:src/display.c **** 	    }
2954:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 67


2955:src/display.c **** 	  else {
2956:src/display.c **** 	    annuc = 1;
2957:src/display.c **** 	  }
2958:src/display.c **** 	}
2959:src/display.c **** 	else {
2960:src/display.c **** #ifndef DM42
2961:src/display.c **** 	  show_progtrace(buf);
2962:src/display.c **** #endif
2963:src/display.c **** 	  i = state_pc();
2964:src/display.c **** 	  if (i > 0)
2965:src/display.c **** 	    set_status(prt(getprog(i), buf));
2966:src/display.c **** 	  else
2967:src/display.c **** 	    set_status("");
2968:src/display.c **** 	  set_dot(STO_annun);
2969:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2970:src/display.c **** 	    annuc = 1;
2971:src/display.c **** 	  goto nostk;
2972:src/display.c **** 	}
2973:src/display.c **** 	show_stack();
2974:src/display.c ****       nostk:
2975:src/display.c **** 	show_flags();
2976:src/display.c **** 	if (!skip) {
2977:src/display.c **** 	  if (State2.runmode) {
2978:src/display.c **** 	  only_update_x:
2979:src/display.c **** 	    p = get_cmdline();
2980:src/display.c **** 	    if (p == NULL || cata) {
2981:src/display.c **** 	      if (ShowRegister != -1) {
2982:src/display.c **** #ifdef INCLUDE_C_LOCK
2983:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2984:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2985:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2986:src/display.c **** 		    SET_POLAR_READY;
2987:src/display.c **** 		  }
2988:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2989:src/display.c **** 		    State2.hms = 0;
2990:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2991:src/display.c **** 		    State2.hms = 1;
2992:src/display.c **** 		  }
2993:src/display.c **** 		  else {
2994:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2995:src/display.c **** 		  }
2996:src/display.c **** 		  x_disp = 1;
2997:src/display.c **** 		}
2998:src/display.c **** 		else {
2999:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3000:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3001:src/display.c **** 		}
3002:src/display.c **** #else		
3003:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3004:src/display.c **** 		format_reg(ShowRegister, CNULL);
3005:src/display.c **** #endif
3006:src/display.c **** 	      }
3007:src/display.c **** 	      else
3008:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3009:src/display.c **** 	    } else {
3010:src/display.c **** 	      disp_x(p);
3011:src/display.c **** 	      x_disp = 1;
ARM GAS  /tmp/ccdg5rgB.s 			page 68


3012:src/display.c **** 	    }
3013:src/display.c **** 	    if (WasDataEntry) {
3014:src/display.c **** 	      goto finish;
3015:src/display.c **** 	    }
3016:src/display.c **** 	  } else {
3017:src/display.c **** 	    unsigned int pc = state_pc();
3018:src/display.c **** 	    unsigned int upc = user_pc(pc);
3019:src/display.c **** 	    const int n = nLIB(pc);
3020:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3021:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3022:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3023:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3024:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3025:src/display.c **** #ifndef REALBUILD
3026:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3027:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3028:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3029:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3030:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3031:src/display.c **** 	      char *b=buf;
3032:src/display.c **** 	      char *l=LastDisplayedNumber;
3033:src/display.c **** 	      *l++=' ';
3034:src/display.c **** 	      while(*b) {
3035:src/display.c **** 		*l++=*b++;
3036:src/display.c **** 		*l++=' ';
3037:src/display.c **** 	      }
3038:src/display.c **** 	      *l=0;
3039:src/display.c **** 	    }
3040:src/display.c **** #endif
3041:src/display.c **** 	  }
3042:src/display.c **** 	}
3043:src/display.c **** 	set_annunciators();
3044:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3045:src/display.c **** 	  ShowRPN = 0;
3046:src/display.c **** 	  dot(RPN, 0);
3047:src/display.c **** 	}
3048:src/display.c **** 	// disp_temp disables the <- key
3049:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3050:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3051:src/display.c **** 
3052:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3053:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3054:src/display.c **** 	  annunciators();
3055:src/display.c ****  	State2.hms = 0;
3056:src/display.c **** #else
3057:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3058:src/display.c **** 	  annunciators();
3059:src/display.c **** #endif
3060:src/display.c **** 
3061:src/display.c ****       finish:
3062:src/display.c **** 	State2.version = 0;
3063:src/display.c **** 	State2.disp_as_alpha = 0;
3064:src/display.c **** 	State2.smode = SDISP_NORMAL;
3065:src/display.c **** 	State2.invalid_disp = 0;
3066:src/display.c **** 	ShowRegister = regX_idx;
3067:src/display.c **** 	DispMsg = CNULL;
3068:src/display.c **** 	DispPlot = 0;
ARM GAS  /tmp/ccdg5rgB.s 			page 69


3069:src/display.c **** 	State2.disp_small = 0;
3070:src/display.c **** 	finish_display();
3071:src/display.c **** 	no_status_top = 0;
3072:src/display.c **** #ifdef CONSOLE
3073:src/display.c **** 	JustDisplayed = 1;
3074:src/display.c **** #endif
3075:src/display.c ****       }
3076:src/display.c **** #else
3077:src/display.c ****       /*
3078:src/display.c ****        *  Update the display
3079:src/display.c ****        */
3080:src/display.c ****       void display(void) {
3081:src/display.c **** 	int i, j;
3082:src/display.c **** 	char buf[40], *bp = buf;
3083:src/display.c **** 	const char *p;
3084:src/display.c **** 	int annuc = 0;
3085:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
3086:src/display.c **** 	int skip = 0;
3087:src/display.c **** 	int x_disp = 0;
3088:src/display.c **** 	const int shift = cur_shift();
3089:src/display.c **** 
3090:src/display.c **** 
3091:src/display.c **** 
3092:src/display.c **** 	if (State2.disp_freeze) {
3093:src/display.c **** 	  State2.disp_freeze = 0;
3094:src/display.c **** 	  State2.disp_temp = 1;
3095:src/display.c **** #ifdef CONSOLE
3096:src/display.c **** 	  JustDisplayed = 1;
3097:src/display.c **** #endif
3098:src/display.c **** 	  ShowRPN = 0;
3099:src/display.c **** 	  return;
3100:src/display.c **** 	}
3101:src/display.c **** 
3102:src/display.c **** 	if (WasDataEntry) {
3103:src/display.c **** #if defined(QTGUI) || defined(IOS)
3104:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3105:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
3106:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
3107:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
3108:src/display.c **** #endif
3109:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3110:src/display.c **** 
3111:src/display.c **** 	  // Erase 7-segment display
3112:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3113:src/display.c **** 	    clr_dot(i);
3114:src/display.c **** 	  }
3115:src/display.c **** 	  goto only_update_x;
3116:src/display.c **** 	}
3117:src/display.c **** 
3118:src/display.c **** 	// Clear display
3119:src/display.c **** 	reset_disp();
3120:src/display.c **** 
3121:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3122:src/display.c **** 	if (State2.cmplx  && !cata) {
3123:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3124:src/display.c **** 	  set_status(buf);
3125:src/display.c **** 	}
ARM GAS  /tmp/ccdg5rgB.s 			page 70


3126:src/display.c **** 	if (State2.version) {
3127:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3128:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3129:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3130:src/display.c **** #ifndef REALBUILD
3131:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3132:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3133:src/display.c **** #endif
3134:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3135:src/display.c **** 	  set_status(vers);
3136:src/display.c **** 	  skip = 1;
3137:src/display.c **** 	  goto nostk;
3138:src/display.c **** 	} else if (State2.confirm) {
3139:src/display.c **** 	  set_status(S_SURE);
3140:src/display.c **** 	} else if (State2.hyp) {
3141:src/display.c **** 	  bp = scopy(bp, "HYP");
3142:src/display.c **** 	  if (! State2.dot)
3143:src/display.c **** 	    *bp++ = '\235';
3144:src/display.c **** 	  set_status(buf);
3145:src/display.c **** 	} else if (State2.gtodot) {
3146:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3147:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3148:src/display.c **** 	  if (State2.numdigit > 0)
3149:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3150:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3151:src/display.c **** 	  *bp++ = '_';
3152:src/display.c **** 	  set_status(buf);
3153:src/display.c **** 	} else if (State2.rarg) {
3154:src/display.c **** 	  /* Commands with arguments */
3155:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3156:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3157:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3158:src/display.c **** #endif
3159:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3160:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3161:src/display.c **** 	  if (State2.dot) {
3162:src/display.c **** 	    *bp++ = 's';
3163:src/display.c **** 	    *bp++ = '_';
3164:src/display.c **** 	  } else if (shift == SHIFT_F) {
3165:src/display.c **** 	    *bp++ = '\021';
3166:src/display.c **** 	    *bp++ = '_';
3167:src/display.c **** 	  } else {
3168:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3169:src/display.c **** 	       : State2.ind ? 2 
3170:src/display.c **** 	       : num_arg_digits(CmdBase); */
3171:src/display.c **** 	    if (State2.local)
3172:src/display.c **** 	      *bp++ = '.';
3173:src/display.c **** 	    if (State2.numdigit > 0) {
3174:src/display.c **** 	      if (State2.shuffle)
3175:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3176:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3177:src/display.c **** 	      else
3178:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3179:src/display.c **** 	    }
3180:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3181:src/display.c **** 	    *bp++ = '_';
3182:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 71


3183:src/display.c **** 	  set_status(buf);
3184:src/display.c **** 	} else if (State2.test != TST_NONE) {
3185:src/display.c **** 	  *bp++ = 'x';
3186:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3187:src/display.c **** 	  *bp++ = '_';
3188:src/display.c **** 	  *bp++ = '?';
3189:src/display.c **** 	  set_status(buf);
3190:src/display.c **** 	} else if (cata) {
3191:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3192:src/display.c **** 	  char b2[16];
3193:src/display.c **** 	  const char *p;
3194:src/display.c **** 
3195:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3196:src/display.c **** 	  p = catcmd(op, b2);
3197:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3198:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3199:src/display.c **** 	  bp = scopy(bp, p);
3200:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3201:src/display.c **** 	    // State2.disp_small = 1;
3202:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3203:src/display.c **** 	      set_digits_string("0 to 255", 0);
3204:src/display.c **** 	    else
3205:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3206:src/display.c **** 	    skip = 1;
3207:src/display.c **** 	  } else if (State2.runmode) {
3208:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3209:src/display.c **** 	      decNumber x, r;
3210:src/display.c **** 	      decimal64 z;
3211:src/display.c **** 
3212:src/display.c **** 	      getX(&x);
3213:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3214:src/display.c **** 		const unsigned int f = argKIND(op);
3215:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3216:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3217:src/display.c **** 		  update_speed(0);
3218:src/display.c **** 		  fp(&r, &x);
3219:src/display.c **** 		}
3220:src/display.c **** 		else
3221:src/display.c **** 		  set_NaN(&r);
3222:src/display.c **** 	      } else
3223:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3224:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3225:src/display.c **** 	      packed_from_number(&z, &r);
3226:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3227:src/display.c **** 	      skip = 1;
3228:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3229:src/display.c **** 	      REGISTER z, *const x = StackBase;
3230:src/display.c **** 	      copyreg(&z, x);
3231:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3232:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3233:src/display.c **** 	      copyreg(x, &z);
3234:src/display.c **** 	      skip = 1;
3235:src/display.c **** 	    }
3236:src/display.c **** 	  }
3237:src/display.c **** 	  set_status(buf);
3238:src/display.c **** 	} else if (State2.multi) {
3239:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
ARM GAS  /tmp/ccdg5rgB.s 			page 72


3240:src/display.c **** 	  if (State2.numdigit > 0) {
3241:src/display.c **** 	    *bp++ = (char) State2.digval;
3242:src/display.c **** 	    if (State2.numdigit > 1)
3243:src/display.c **** 	      *bp++ = State2.digval2;
3244:src/display.c **** 	  }
3245:src/display.c **** 	  set_status(buf);
3246:src/display.c **** 	} else if (State2.status) {
3247:src/display.c **** 	  show_status();
3248:src/display.c **** 	  skip = 1;
3249:src/display.c **** 	} else if (State2.labellist) {
3250:src/display.c **** 	  show_label();
3251:src/display.c **** 	  skip = 1;
3252:src/display.c **** 	} else if (State2.registerlist) {
3253:src/display.c **** 	  show_registers();
3254:src/display.c **** 	  skip = 1;
3255:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3256:src/display.c **** 	    annunciators();
3257:src/display.c **** 	  }
3258:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3259:src/display.c **** 	} else if (State2.disp_as_alpha) {
3260:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3261:src/display.c **** #endif
3262:src/display.c **** 	} else if (State2.runmode) {
3263:src/display.c **** 	  if (DispMsg) { 
3264:src/display.c **** 	    set_status(DispMsg);
3265:src/display.c **** 	  } else if (DispPlot) {
3266:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3267:src/display.c **** 	  } else if (State2.alphas) {
3268:src/display.c **** #if 0
3269:src/display.c **** 	    set_digits_string("AlpHA", 0);
3270:src/display.c **** #endif
3271:src/display.c **** 	    bp = scopy(buf, Alpha);
3272:src/display.c **** 	    j = State2.alpha_pos;
3273:src/display.c **** 	    if (j != 0) {
3274:src/display.c **** 	      i = slen(buf);
3275:src/display.c **** 	      //				
3276:src/display.c **** 	      j *= 6;
3277:src/display.c **** #ifdef BIGGER_DISPLAY
3278:src/display.c **** 	      if ( i - j >= 20 )
3279:src/display.c **** #else
3280:src/display.c **** 	      if ( i - j >= 12 )
3281:src/display.c **** #endif
3282:src/display.c **** 		{
3283:src/display.c **** 		buf[ (i - j) ] = '\0';
3284:src/display.c **** 		set_status_right(buf);
3285:src/display.c **** 		}
3286:src/display.c **** 	      else {
3287:src/display.c **** 		set_status(buf);
3288:src/display.c **** 	      }
3289:src/display.c **** 	    } else {
3290:src/display.c **** 	      if (shift != SHIFT_N) {
3291:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3292:src/display.c **** 		*bp++ = '\0';
3293:src/display.c **** 	      }
3294:src/display.c **** 	      set_status_right(buf);
3295:src/display.c **** 	    }
3296:src/display.c **** 	  } else {
ARM GAS  /tmp/ccdg5rgB.s 			page 73


3297:src/display.c **** 	    annuc = 1;
3298:src/display.c **** 	  }
3299:src/display.c **** 	} else {
3300:src/display.c **** #ifndef DM42
3301:src/display.c **** 	  show_progtrace(buf);
3302:src/display.c **** #endif
3303:src/display.c **** 	  i = state_pc();
3304:src/display.c **** 	  if (i > 0)
3305:src/display.c **** 	    set_status(prt(getprog(i), buf));
3306:src/display.c **** 	  else
3307:src/display.c **** 	    set_status("");
3308:src/display.c **** 	  set_dot(STO_annun);
3309:src/display.c **** #if 0
3310:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3311:src/display.c **** 	    unsigned short int crc;
3312:src/display.c **** 	    crc = checksum_program();
3313:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3314:src/display.c **** 	    for (i=0; i<4; i++) {
3315:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3316:src/display.c **** 	      crc >>= 4;
3317:src/display.c **** 	      j += SEGS_PER_DIGIT;
3318:src/display.c **** 	    }
3319:src/display.c **** 	    skip = 1;
3320:src/display.c **** 	  }
3321:src/display.c **** 	  else
3322:src/display.c **** #endif
3323:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3324:src/display.c **** 	      annuc = 1;
3325:src/display.c **** 	  goto nostk;
3326:src/display.c **** 	}
3327:src/display.c **** 	show_stack();
3328:src/display.c ****       nostk:	show_flags();
3329:src/display.c **** 	if (!skip) {
3330:src/display.c **** 	  if (State2.runmode) {
3331:src/display.c **** 	  only_update_x:
3332:src/display.c **** 	    p = get_cmdline();
3333:src/display.c **** 	    if (p == NULL || cata) {
3334:src/display.c **** 	      if (ShowRegister != -1) {
3335:src/display.c **** #ifdef INCLUDE_C_LOCK
3336:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3337:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3338:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3339:src/display.c **** 		    SET_POLAR_READY;
3340:src/display.c **** 		  }
3341:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3342:src/display.c **** 		    State2.hms = 0;
3343:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3344:src/display.c **** 		    State2.hms = 1;
3345:src/display.c **** 		  }
3346:src/display.c **** 		  else {
3347:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3348:src/display.c **** 		  }
3349:src/display.c **** 		  x_disp = 1;
3350:src/display.c **** 		}
3351:src/display.c **** 		else {
3352:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3353:src/display.c **** 		  format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/ccdg5rgB.s 			page 74


3354:src/display.c **** 		}
3355:src/display.c **** #else
3356:src/display.c **** 
3357:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3358:src/display.c **** 		format_reg(ShowRegister, CNULL);
3359:src/display.c **** #endif
3360:src/display.c **** 	      }
3361:src/display.c **** 	      else
3362:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3363:src/display.c **** 	    } else {
3364:src/display.c **** 	      disp_x(p);
3365:src/display.c **** 	      x_disp = 1;
3366:src/display.c **** 	    }
3367:src/display.c **** 	    if (WasDataEntry) {
3368:src/display.c **** 	      goto finish;
3369:src/display.c **** 	    }
3370:src/display.c **** 	  } else {
3371:src/display.c **** 	    unsigned int pc = state_pc();
3372:src/display.c **** 	    unsigned int upc = user_pc(pc);
3373:src/display.c **** 	    const int n = nLIB(pc);
3374:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3375:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3376:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3377:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3378:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3379:src/display.c **** #ifndef REALBUILD
3380:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3381:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3382:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3383:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3384:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3385:src/display.c **** 	      char *b=buf;
3386:src/display.c **** 	      char *l=LastDisplayedNumber;
3387:src/display.c **** 	      *l++=' ';
3388:src/display.c **** 	      while(*b) {
3389:src/display.c **** 		*l++=*b++;
3390:src/display.c **** 		*l++=' ';
3391:src/display.c **** 	      }
3392:src/display.c **** 	      *l=0;
3393:src/display.c **** 	    }
3394:src/display.c **** #endif
3395:src/display.c **** 	  }
3396:src/display.c **** 	}
3397:src/display.c **** 	set_annunciators();
3398:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3399:src/display.c **** 	  ShowRPN = 0;
3400:src/display.c **** 	  dot(RPN, 0);
3401:src/display.c **** 	}
3402:src/display.c **** 	// disp_temp disables the <- key
3403:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3404:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3405:src/display.c **** 
3406:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3407:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3408:src/display.c **** 	  annunciators();
3409:src/display.c ****  	State2.hms = 0;
3410:src/display.c **** #else
ARM GAS  /tmp/ccdg5rgB.s 			page 75


3411:src/display.c **** 
3412:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3413:src/display.c **** 	  annunciators();
3414:src/display.c **** 	
3415:src/display.c **** 
3416:src/display.c **** 
3417:src/display.c **** #endif
3418:src/display.c **** 
3419:src/display.c ****       finish:
3420:src/display.c **** 	State2.version = 0;
3421:src/display.c **** 	State2.disp_as_alpha = 0;
3422:src/display.c **** 	State2.smode = SDISP_NORMAL;
3423:src/display.c **** 	State2.invalid_disp = 0;
3424:src/display.c **** 	ShowRegister = regX_idx;
3425:src/display.c **** 	DispMsg = CNULL;
3426:src/display.c **** 	DispPlot = 0;
3427:src/display.c **** 	State2.disp_small = 0;
3428:src/display.c **** 	finish_display();
3429:src/display.c **** #ifdef CONSOLE
3430:src/display.c **** 	JustDisplayed = 1;
3431:src/display.c **** #endif
3432:src/display.c ****       }
3433:src/display.c **** #endif
3434:src/display.c ****       /*
3435:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3436:src/display.c ****        */
3437:src/display.c ****       void frozen_display()
3438:src/display.c ****       {
3439:src/display.c **** 	State2.disp_freeze = 0;
3440:src/display.c **** 	display();
3441:src/display.c **** 	State2.disp_freeze = 1;
3442:src/display.c ****       }
3443:src/display.c **** 
3444:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3445:src/display.c **** 	int glen = *graphic++;
3446:src/display.c **** 	int i, j;
3447:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3448:src/display.c **** 	unsigned long long int mat[6];
3449:src/display.c **** 
3450:src/display.c **** 	xset(mat, 0, sizeof(mat));
3451:src/display.c **** #endif
3452:src/display.c **** #ifndef REALBUILD
3453:src/display.c **** 	forceDispPlot=1;
3454:src/display.c **** #endif
3455:src/display.c **** 	if (glen <= 0)			return;
3456:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3457:src/display.c **** 
3458:src/display.c **** 	for (i=0; i<6; i++)
3459:src/display.c **** 	  for (j=1; j<=glen; j++) {
3460:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3461:src/display.c **** 	    if (graphic[j] & (1 << i))
3462:src/display.c **** 	      mat[i] |= 1LL << j;
3463:src/display.c **** #else
3464:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3465:src/display.c **** #endif
3466:src/display.c **** 	  }
3467:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
ARM GAS  /tmp/ccdg5rgB.s 			page 76


3468:src/display.c **** 	set_status_grob(mat);
3469:src/display.c **** #endif
3470:src/display.c ****       }
3471:src/display.c **** 
3472:src/display.c **** 
3473:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3474:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3475:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3476:src/display.c ****        * column is almost always blank.
3477:src/display.c ****        */
3478:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3479:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3480:src/display.c ****       }
3481:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3482:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3483:src/display.c ****       }
3484:src/display.c **** 
3485:src/display.c ****       
3486:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 679              		.loc 1 3486 85 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 4, pretend = 0, frame = 560
 682              		@ frame_needed = 0, uses_anonymous_args = 0
3487:src/display.c **** 	unsigned short int posns[257];
 683              		.loc 1 3487 2 view .LVU201
3488:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3489:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3490:src/display.c **** 	int posns_state = 255;
 684              		.loc 1 3490 2 view .LVU202
3491:src/display.c **** #endif
3492:src/display.c **** 	unsigned int x = 0;
 685              		.loc 1 3492 2 view .LVU203
3493:src/display.c **** 	int i, j;
 686              		.loc 1 3493 2 view .LVU204
3494:src/display.c **** 	const int offset = smallp ? 256 : 0;
 687              		.loc 1 3494 2 view .LVU205
3486:src/display.c **** 	unsigned short int posns[257];
 688              		.loc 1 3486 85 is_stmt 0 view .LVU206
 689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 690              		.cfi_def_cfa_offset 36
 691              		.cfi_offset 4, -36
 692              		.cfi_offset 5, -32
 693              		.cfi_offset 6, -28
 694              		.cfi_offset 7, -24
 695              		.cfi_offset 8, -20
 696              		.cfi_offset 9, -16
 697              		.cfi_offset 10, -12
 698              		.cfi_offset 11, -8
 699              		.cfi_offset 14, -4
3495:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3496:src/display.c **** 	unsigned long long int mat[6];
3497:src/display.c **** 
3498:src/display.c **** 	xset(mat, 0, sizeof(mat));
3499:src/display.c **** #endif
3500:src/display.c **** #ifndef REALBUILD
3501:src/display.c **** 	scopy(LastDisplayedText, str);
 700              		.loc 1 3501 2 view .LVU207
ARM GAS  /tmp/ccdg5rgB.s 			page 77


 701 0004 6B4C     		ldr	r4, .L119
3486:src/display.c **** 	unsigned short int posns[257];
 702              		.loc 1 3486 85 view .LVU208
 703 0006 ADF50D7D 		sub	sp, sp, #564
 704              		.cfi_def_cfa_offset 600
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 705              		.loc 1 3494 34 view .LVU209
 706 000a 0D1E     		subs	r5, r1, #0
3486:src/display.c **** 	unsigned short int posns[257];
 707              		.loc 1 3486 85 view .LVU210
 708 000c 0593     		str	r3, [sp, #20]
 709 000e 0390     		str	r0, [sp, #12]
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 710              		.loc 1 3494 34 view .LVU211
 711 0010 14BF     		ite	ne
 712 0012 4FF48073 		movne	r3, #256
 713              	.LVL57:
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 714              		.loc 1 3494 34 view .LVU212
 715 0016 0023     		moveq	r3, #0
 716              		.loc 1 3501 2 view .LVU213
 717 0018 0146     		mov	r1, r0
 718              	.LVL58:
 719              		.loc 1 3501 2 view .LVU214
 720 001a 2046     		mov	r0, r4
 721              	.LVL59:
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 722              		.loc 1 3494 34 view .LVU215
 723 001c 0793     		str	r3, [sp, #28]
 724              	.LVL60:
 725              		.loc 1 3501 2 is_stmt 1 view .LVU216
3494:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 726              		.loc 1 3494 34 is_stmt 0 view .LVU217
 727 001e 0695     		str	r5, [sp, #24]
3486:src/display.c **** 	unsigned short int posns[257];
 728              		.loc 1 3486 85 view .LVU218
 729 0020 9246     		mov	r10, r2
 730              		.loc 1 3501 2 view .LVU219
 731 0022 FFF7FEFF 		bl	scopy
 732              	.LVL61:
3502:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3503:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
 733              		.loc 1 3503 2 is_stmt 1 view .LVU220
 734              		.loc 1 3503 14 view .LVU221
 735              		.loc 1 3503 31 is_stmt 0 view .LVU222
 736 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 737              		.loc 1 3503 2 view .LVU223
 738 0028 13B9     		cbnz	r3, .L70
 739 002a 07E0     		b	.L68
 740              	.LVL62:
 741              	.L69:
 742              		.loc 1 3503 14 is_stmt 1 discriminator 1 view .LVU224
 743 002c 0134     		adds	r4, r4, #1
 744              		.loc 1 3503 2 is_stmt 0 discriminator 1 view .LVU225
 745 002e 2BB1     		cbz	r3, .L68
 746              	.L70:
 747              	.LVL63:
ARM GAS  /tmp/ccdg5rgB.s 			page 78


3504:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
 748              		.loc 1 3504 4 is_stmt 1 view .LVU226
 749              		.loc 1 3504 7 is_stmt 0 view .LVU227
 750 0030 072B     		cmp	r3, #7
 751              		.loc 1 3504 39 view .LVU228
 752 0032 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 753              		.loc 1 3504 7 view .LVU229
 754 0034 FAD1     		bne	.L69
 755              		.loc 1 3504 39 discriminator 1 view .LVU230
 756 0036 002B     		cmp	r3, #0
 757 0038 40F0AB80 		bne	.L114
 758              	.LVL64:
 759              	.L68:
3505:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3506:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3507:src/display.c **** 	      ++i;
3508:src/display.c **** 	  }
3509:src/display.c **** 	  else {
3510:src/display.c **** 	    ++i;
3511:src/display.c **** 	  }
3512:src/display.c **** 	}
3513:src/display.c **** #endif
3514:src/display.c **** 	forceDispPlot=0;
 760              		.loc 1 3514 2 is_stmt 1 view .LVU231
3515:src/display.c **** #endif
3516:src/display.c **** #ifdef RP_PREFIX
3517:src/display.c **** 	RectPolConv = 0;
 761              		.loc 1 3517 14 is_stmt 0 view .LVU232
 762 003c 5E4A     		ldr	r2, .L119+4
3514:src/display.c **** #endif
 763              		.loc 1 3514 15 view .LVU233
 764 003e 5F49     		ldr	r1, .L119+8
 765 0040 0023     		movs	r3, #0
 766              		.loc 1 3517 14 view .LVU234
 767 0042 1360     		str	r3, [r2]
3518:src/display.c **** #endif
3519:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3520:src/display.c **** 	findlengths(posns, smallp);
3521:src/display.c **** #endif
3522:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 768              		.loc 1 3522 9 view .LVU235
 769 0044 039A     		ldr	r2, [sp, #12]
3514:src/display.c **** #endif
 770              		.loc 1 3514 15 view .LVU236
 771 0046 0B70     		strb	r3, [r1]
3517:src/display.c **** #endif
 772              		.loc 1 3517 2 is_stmt 1 view .LVU237
 773              		.loc 1 3522 2 view .LVU238
 774              	.LVL65:
 775              		.loc 1 3522 8 view .LVU239
 776              		.loc 1 3522 9 is_stmt 0 view .LVU240
 777 0048 1678     		ldrb	r6, [r2]	@ zero_extendqisi2
 778              		.loc 1 3522 8 view .LVU241
 779 004a 002E     		cmp	r6, #0
 780 004c 00F0AE80 		beq	.L115
3492:src/display.c **** 	int i, j;
 781              		.loc 1 3492 15 view .LVU242
ARM GAS  /tmp/ccdg5rgB.s 			page 79


 782 0050 9846     		mov	r8, r3
 783              	.LBB200:
3523:src/display.c **** 	  int c;
3524:src/display.c **** 	  int width;
3525:src/display.c **** 	  unsigned char cmap[6];
3526:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3527:src/display.c **** 	  int real_width;
3528:src/display.c **** 	  int current_smallp;
3529:src/display.c **** 
3530:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3531:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3532:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3533:src/display.c **** 	  //           01 -> (not used)
3534:src/display.c **** 	  //           10 -> use big font
3535:src/display.c **** 	  //           11 -> use small font
3536:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3537:src/display.c **** 	  if (str[0] == '\007') {
 784              		.loc 1 3537 7 view .LVU243
 785 0052 072E     		cmp	r6, #7
 786              	.LBE200:
3522:src/display.c **** 	  int c;
 787              		.loc 1 3522 33 view .LVU244
 788 0054 0AF10103 		add	r3, r10, #1
 789 0058 0493     		str	r3, [sp, #16]
3490:src/display.c **** #endif
 790              		.loc 1 3490 6 view .LVU245
 791 005a 4FF0FF04 		mov	r4, #255
 792              	.LVL66:
 793              	.LBB209:
3523:src/display.c **** 	  int c;
 794              		.loc 1 3523 4 is_stmt 1 view .LVU246
3524:src/display.c **** 	  unsigned char cmap[6];
 795              		.loc 1 3524 4 view .LVU247
3525:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 796              		.loc 1 3525 4 view .LVU248
3527:src/display.c **** 	  int current_smallp;
 797              		.loc 1 3527 4 view .LVU249
3528:src/display.c **** 
 798              		.loc 1 3528 4 view .LVU250
 799              		.loc 1 3537 4 view .LVU251
 800              		.loc 1 3537 7 is_stmt 0 view .LVU252
 801 005e 69D1     		bne	.L72
 802              	.LVL67:
 803              	.L117:
3538:src/display.c **** 	    width = str[1] & 0x1F;
 804              		.loc 1 3538 6 is_stmt 1 view .LVU253
 805              		.loc 1 3538 17 is_stmt 0 view .LVU254
 806 0060 039B     		ldr	r3, [sp, #12]
 807 0062 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 808 0064 05F06003 		and	r3, r5, #96
3539:src/display.c **** 	    switch (str[1] & 0x60) {
 809              		.loc 1 3539 6 view .LVU255
 810 0068 402B     		cmp	r3, #64
3538:src/display.c **** 	    width = str[1] & 0x1F;
 811              		.loc 1 3538 12 view .LVU256
 812 006a 05F01F05 		and	r5, r5, #31
 813              	.LVL68:
ARM GAS  /tmp/ccdg5rgB.s 			page 80


 814              		.loc 1 3539 6 is_stmt 1 view .LVU257
 815 006e 00F08B80 		beq	.L73
 816 0072 602B     		cmp	r3, #96
 817 0074 00F08180 		beq	.L74
 818              	.LVL69:
3540:src/display.c **** 	    default:
3541:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3542:src/display.c **** 	      break;
3543:src/display.c **** 	    case 0x40:	current_smallp = 0;
3544:src/display.c **** 	      break;
3545:src/display.c **** 	    case 0x60:	current_smallp = 1;
3546:src/display.c **** 	      break;
3547:src/display.c **** 	    }
3548:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 819              		.loc 1 3548 6 view .LVU258
 820              		.loc 1 3548 10 is_stmt 0 view .LVU259
 821 0078 039B     		ldr	r3, [sp, #12]
 822 007a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 823              		.loc 1 3548 57 view .LVU260
 824 007c 069B     		ldr	r3, [sp, #24]
 825 007e 002B     		cmp	r3, #0
 826 0080 00F09180 		beq	.L92
 827 0084 06F58076 		add	r6, r6, #256
 828 0088 0293     		str	r3, [sp, #8]
 829              	.LVL70:
 830              	.L76:
3549:src/display.c **** 	    str += 3;
 831              		.loc 1 3549 6 is_stmt 1 discriminator 4 view .LVU261
3550:src/display.c **** 
3551:src/display.c **** 	    real_width = charlengths(c);
 832              		.loc 1 3551 19 is_stmt 0 discriminator 4 view .LVU262
 833 008a 3046     		mov	r0, r6
 834 008c FFF7FEFF 		bl	charlengths
 835              	.LVL71:
3549:src/display.c **** 	    str += 3;
 836              		.loc 1 3549 10 discriminator 4 view .LVU263
 837 0090 039B     		ldr	r3, [sp, #12]
 838 0092 0333     		adds	r3, r3, #3
 839 0094 0393     		str	r3, [sp, #12]
 840              	.LVL72:
 841              		.loc 1 3551 6 is_stmt 1 discriminator 4 view .LVU264
3552:src/display.c **** 	  } else {
3553:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3554:src/display.c **** 	    real_width = width = charlengths(c);
3555:src/display.c **** 	    current_smallp = smallp;
3556:src/display.c **** 	  }
3557:src/display.c **** 
3558:src/display.c **** 	  if (x + real_width > b_w + 1)
 842              		.loc 1 3558 4 discriminator 4 view .LVU265
 843              		.loc 1 3558 7 is_stmt 0 discriminator 4 view .LVU266
 844 0096 049B     		ldr	r3, [sp, #16]
 845              	.LVL73:
 846              		.loc 1 3558 10 discriminator 4 view .LVU267
 847 0098 4044     		add	r0, r0, r8
 848              		.loc 1 3558 7 discriminator 4 view .LVU268
 849 009a 9842     		cmp	r0, r3
 850 009c 59D8     		bhi	.L113
ARM GAS  /tmp/ccdg5rgB.s 			page 81


 851              	.L118:
3559:src/display.c **** 	    break;
3560:src/display.c **** 
3561:src/display.c **** 	  if (posns_state != current_smallp) {
 852              		.loc 1 3561 4 is_stmt 1 view .LVU269
 853              		.loc 1 3561 7 is_stmt 0 view .LVU270
 854 009e 029B     		ldr	r3, [sp, #8]
 855 00a0 A342     		cmp	r3, r4
3562:src/display.c **** 	    findlengths(posns, current_smallp);
 856              		.loc 1 3562 6 view .LVU271
 857 00a2 0BAB     		add	r3, sp, #44
3561:src/display.c **** 	    findlengths(posns, current_smallp);
 858              		.loc 1 3561 7 view .LVU272
 859 00a4 05D0     		beq	.L79
 860              		.loc 1 3562 6 is_stmt 1 view .LVU273
 861 00a6 1846     		mov	r0, r3
 862 00a8 0299     		ldr	r1, [sp, #8]
 863 00aa 0193     		str	r3, [sp, #4]
 864 00ac FFF7FEFF 		bl	findlengths
 865              	.LVL74:
 866 00b0 019B     		ldr	r3, [sp, #4]
3563:src/display.c **** 	    posns_state = current_smallp;
 867              		.loc 1 3563 6 view .LVU274
 868              	.LVL75:
 869              	.L79:
3564:src/display.c **** 	  }
3565:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 870              		.loc 1 3565 4 view .LVU275
 871 00b2 029A     		ldr	r2, [sp, #8]
 872 00b4 3046     		mov	r0, r6
 873 00b6 09A9     		add	r1, sp, #36
 874 00b8 FFF7FEFF 		bl	unpackchar
 875              	.LVL76:
3566:src/display.c **** #else
3567:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3568:src/display.c **** 
3569:src/display.c **** 	  //cmap = &charset[c][0];
3570:src/display.c **** 	  width = charlengths(c);
3571:src/display.c **** 
3572:src/display.c **** 	  if (x + width > b_w+1)
3573:src/display.c **** 	    break;
3574:src/display.c **** 
3575:src/display.c **** 	  /* Decode the packed character bytes */
3576:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3577:src/display.c **** #endif
3578:src/display.c **** 
3579:src/display.c **** 	  for (i=0; i<6; i++)
 876              		.loc 1 3579 4 view .LVU276
 877              		.loc 1 3579 14 view .LVU277
 878 00bc 059B     		ldr	r3, [sp, #20]
 879 00be 08EB4809 		add	r9, r8, r8, lsl #1
 880 00c2 03EB4903 		add	r3, r3, r9, lsl #1
 881 00c6 09AC     		add	r4, sp, #36
 882 00c8 0193     		str	r3, [sp, #4]
 883              		.loc 1 3579 10 is_stmt 0 view .LVU278
 884 00ca 0027     		movs	r7, #0
 885 00cc AAEB0806 		sub	r6, r10, r8
ARM GAS  /tmp/ccdg5rgB.s 			page 82


 886              	.LVL77:
 887              	.L80:
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3580 16 is_stmt 1 view .LVU279
 889              		.loc 1 3580 6 is_stmt 0 view .LVU280
 890 00d0 002D     		cmp	r5, #0
 891 00d2 20DD     		ble	.L86
3581:src/display.c **** 	      if (x+j >= b_w)
 892              		.loc 1 3581 8 is_stmt 1 view .LVU281
 893              		.loc 1 3581 11 is_stmt 0 view .LVU282
 894 00d4 D045     		cmp	r8, r10
 895 00d6 1ED2     		bcs	.L86
 896 00d8 019B     		ldr	r3, [sp, #4]
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 897              		.loc 1 3580 12 view .LVU283
 898 00da 4FF00009 		mov	r9, #0
 899 00de 07EB030B 		add	fp, r7, r3
 900 00e2 09E0     		b	.L81
 901              	.LVL78:
 902              	.L116:
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 903              		.loc 1 3580 26 view .LVU284
 904 00e4 09F10109 		add	r9, r9, #1
 905              	.LVL79:
 906              	.LBB201:
 907              	.LBB202:
 348:src/display.c ****   else	clr_dot(n);
 908              		.loc 1 348 11 view .LVU285
 909 00e8 FFF7FEFF 		bl	set_dot
 910              	.LVL80:
 348:src/display.c ****   else	clr_dot(n);
 911              		.loc 1 348 11 view .LVU286
 912              	.LBE202:
 913              	.LBE201:
 914              		.loc 1 3581 8 is_stmt 1 view .LVU287
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 915              		.loc 1 3580 25 view .LVU288
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 916              		.loc 1 3580 16 view .LVU289
3580:src/display.c **** 	    for (j=0; j<width; j++) {
 917              		.loc 1 3580 6 is_stmt 0 view .LVU290
 918 00ec 4D45     		cmp	r5, r9
 919 00ee 0BF1060B 		add	fp, fp, #6
 920 00f2 10D0     		beq	.L86
 921              	.L85:
 922              		.loc 1 3581 11 view .LVU291
 923 00f4 4E45     		cmp	r6, r9
 924 00f6 0ED0     		beq	.L86
 925              	.LVL81:
 926              	.L81:
3582:src/display.c **** 		break;
3583:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3584:src/display.c **** 	      if (cmap[i] & (1 << j))
3585:src/display.c **** 		mat[i] |= 1LL << (x+j);
3586:src/display.c **** #else
3587:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 927              		.loc 1 3587 8 is_stmt 1 discriminator 2 view .LVU292
ARM GAS  /tmp/ccdg5rgB.s 			page 83


 928              	.LBB206:
 929              	.LBI201:
 347:src/display.c ****   if (on)	set_dot(n);
 930              		.loc 1 347 6 discriminator 2 view .LVU293
 931              	.LBB203:
 348:src/display.c ****   else	clr_dot(n);
 932              		.loc 1 348 3 discriminator 2 view .LVU294
 348:src/display.c ****   else	clr_dot(n);
 933              		.loc 1 348 11 discriminator 2 view .LVU295
 349:src/display.c **** }
 934              		.loc 1 349 8 discriminator 2 view .LVU296
 935              	.LBE203:
 936              	.LBE206:
 937              		.loc 1 3587 32 is_stmt 0 discriminator 2 view .LVU297
 938 00f8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 939              		.loc 1 3587 47 discriminator 2 view .LVU298
 940 00fa 43FA09F3 		asr	r3, r3, r9
 941              	.LBB207:
 942              	.LBB204:
 348:src/display.c ****   else	clr_dot(n);
 943              		.loc 1 348 6 discriminator 2 view .LVU299
 944 00fe 13F0010F 		tst	r3, #1
 348:src/display.c ****   else	clr_dot(n);
 945              		.loc 1 348 11 discriminator 2 view .LVU300
 946 0102 5846     		mov	r0, fp
 348:src/display.c ****   else	clr_dot(n);
 947              		.loc 1 348 6 discriminator 2 view .LVU301
 948 0104 EED1     		bne	.L116
 949              	.LBE204:
 950              	.LBE207:
3580:src/display.c **** 	      if (x+j >= b_w)
 951              		.loc 1 3580 26 view .LVU302
 952 0106 09F10109 		add	r9, r9, #1
 953              	.LVL82:
 954              	.LBB208:
 955              	.LBB205:
 349:src/display.c **** }
 956              		.loc 1 349 8 view .LVU303
 957 010a FFF7FEFF 		bl	clr_dot
 958              	.LVL83:
 349:src/display.c **** }
 959              		.loc 1 349 8 view .LVU304
 960              	.LBE205:
 961              	.LBE208:
3581:src/display.c **** 		break;
 962              		.loc 1 3581 8 is_stmt 1 view .LVU305
3580:src/display.c **** 	      if (x+j >= b_w)
 963              		.loc 1 3580 25 view .LVU306
3580:src/display.c **** 	      if (x+j >= b_w)
 964              		.loc 1 3580 16 view .LVU307
3580:src/display.c **** 	      if (x+j >= b_w)
 965              		.loc 1 3580 6 is_stmt 0 view .LVU308
 966 010e 4D45     		cmp	r5, r9
 967 0110 0BF1060B 		add	fp, fp, #6
 968 0114 EED1     		bne	.L85
 969              	.LVL84:
 970              	.L86:
ARM GAS  /tmp/ccdg5rgB.s 			page 84


3579:src/display.c **** 	    for (j=0; j<width; j++) {
 971              		.loc 1 3579 19 is_stmt 1 view .LVU309
3579:src/display.c **** 	    for (j=0; j<width; j++) {
 972              		.loc 1 3579 20 is_stmt 0 view .LVU310
 973 0116 0137     		adds	r7, r7, #1
 974              	.LVL85:
3579:src/display.c **** 	    for (j=0; j<width; j++) {
 975              		.loc 1 3579 14 is_stmt 1 view .LVU311
3579:src/display.c **** 	    for (j=0; j<width; j++) {
 976              		.loc 1 3579 4 is_stmt 0 view .LVU312
 977 0118 062F     		cmp	r7, #6
 978 011a 04F10104 		add	r4, r4, #1
 979 011e D7D1     		bne	.L80
3588:src/display.c **** #endif
3589:src/display.c **** 	    }
3590:src/display.c **** 	  x += width;
 980              		.loc 1 3590 4 is_stmt 1 view .LVU313
 981              	.LBE209:
3522:src/display.c **** 	  int c;
 982              		.loc 1 3522 9 is_stmt 0 view .LVU314
 983 0120 039B     		ldr	r3, [sp, #12]
 984 0122 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 985              	.LBB210:
 986              		.loc 1 3590 6 view .LVU315
 987 0124 A844     		add	r8, r8, r5
 988              	.LVL86:
 989              		.loc 1 3590 6 view .LVU316
 990              	.LBE210:
3522:src/display.c **** 	  int c;
 991              		.loc 1 3522 8 is_stmt 1 view .LVU317
 992 0126 A6B1     		cbz	r6, .L113
3522:src/display.c **** 	  int c;
 993              		.loc 1 3522 22 is_stmt 0 discriminator 1 view .LVU318
 994 0128 049B     		ldr	r3, [sp, #16]
 995              	.LVL87:
3522:src/display.c **** 	  int c;
 996              		.loc 1 3522 22 discriminator 1 view .LVU319
 997 012a 9845     		cmp	r8, r3
 998 012c 11D8     		bhi	.L113
 999              	.LBB211:
3537:src/display.c **** 	    width = str[1] & 0x1F;
 1000              		.loc 1 3537 7 view .LVU320
 1001 012e 072E     		cmp	r6, #7
 1002              	.LBE211:
 1003 0130 029C     		ldr	r4, [sp, #8]
 1004              	.LBB212:
3523:src/display.c **** 	  int width;
 1005              		.loc 1 3523 4 is_stmt 1 view .LVU321
3524:src/display.c **** 	  unsigned char cmap[6];
 1006              		.loc 1 3524 4 view .LVU322
3525:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 1007              		.loc 1 3525 4 view .LVU323
3527:src/display.c **** 	  int current_smallp;
 1008              		.loc 1 3527 4 view .LVU324
3528:src/display.c **** 
 1009              		.loc 1 3528 4 view .LVU325
3537:src/display.c **** 	    width = str[1] & 0x1F;
ARM GAS  /tmp/ccdg5rgB.s 			page 85


 1010              		.loc 1 3537 4 view .LVU326
3537:src/display.c **** 	    width = str[1] & 0x1F;
 1011              		.loc 1 3537 7 is_stmt 0 view .LVU327
 1012 0132 95D0     		beq	.L117
 1013              	.LVL88:
 1014              	.L72:
3553:src/display.c **** 	    real_width = width = charlengths(c);
 1015              		.loc 1 3553 6 is_stmt 1 view .LVU328
3553:src/display.c **** 	    real_width = width = charlengths(c);
 1016              		.loc 1 3553 8 is_stmt 0 view .LVU329
 1017 0134 079B     		ldr	r3, [sp, #28]
 1018 0136 1E44     		add	r6, r6, r3
3554:src/display.c **** 	    current_smallp = smallp;
 1019              		.loc 1 3554 27 view .LVU330
 1020 0138 3046     		mov	r0, r6
 1021 013a FFF7FEFF 		bl	charlengths
 1022              	.LVL89:
3553:src/display.c **** 	    real_width = width = charlengths(c);
 1023              		.loc 1 3553 30 view .LVU331
 1024 013e 039B     		ldr	r3, [sp, #12]
 1025 0140 0133     		adds	r3, r3, #1
 1026 0142 0393     		str	r3, [sp, #12]
 1027              	.LVL90:
3554:src/display.c **** 	    current_smallp = smallp;
 1028              		.loc 1 3554 6 is_stmt 1 view .LVU332
3554:src/display.c **** 	    current_smallp = smallp;
 1029              		.loc 1 3554 25 is_stmt 0 view .LVU333
 1030 0144 069B     		ldr	r3, [sp, #24]
 1031              	.LVL91:
3554:src/display.c **** 	    current_smallp = smallp;
 1032              		.loc 1 3554 25 view .LVU334
 1033 0146 0293     		str	r3, [sp, #8]
3558:src/display.c **** 	    break;
 1034              		.loc 1 3558 7 view .LVU335
 1035 0148 049B     		ldr	r3, [sp, #16]
3554:src/display.c **** 	    current_smallp = smallp;
 1036              		.loc 1 3554 25 view .LVU336
 1037 014a 0546     		mov	r5, r0
 1038              	.LVL92:
3555:src/display.c **** 	  }
 1039              		.loc 1 3555 6 is_stmt 1 view .LVU337
3558:src/display.c **** 	    break;
 1040              		.loc 1 3558 4 view .LVU338
3558:src/display.c **** 	    break;
 1041              		.loc 1 3558 10 is_stmt 0 view .LVU339
 1042 014c 4044     		add	r0, r0, r8
 1043              	.LVL93:
3558:src/display.c **** 	    break;
 1044              		.loc 1 3558 7 view .LVU340
 1045 014e 9842     		cmp	r0, r3
 1046 0150 A5D9     		bls	.L118
 1047              	.LVL94:
 1048              	.L113:
3558:src/display.c **** 	    break;
 1049              		.loc 1 3558 7 view .LVU341
 1050 0152 059B     		ldr	r3, [sp, #20]
 1051 0154 08EB4808 		add	r8, r8, r8, lsl #1
ARM GAS  /tmp/ccdg5rgB.s 			page 86


 1052              	.LVL95:
3558:src/display.c **** 	    break;
 1053              		.loc 1 3558 7 view .LVU342
 1054 0158 03EB4808 		add	r8, r3, r8, lsl #1
 1055              	.LVL96:
 1056              	.L71:
3558:src/display.c **** 	    break;
 1057              		.loc 1 3558 7 view .LVU343
 1058              	.LBE212:
3591:src/display.c **** 	}
3592:src/display.c **** 
3593:src/display.c **** 
3594:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3595:src/display.c **** 	set_status_grob(mat);
3596:src/display.c **** #else
3597:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 1059              		.loc 1 3597 2 is_stmt 1 view .LVU344
 1060              		.loc 1 3597 20 view .LVU345
 1061              		.loc 1 3597 2 is_stmt 0 view .LVU346
 1062 015c 969B     		ldr	r3, [sp, #600]
 1063 015e 9845     		cmp	r8, r3
 1064 0160 07DA     		bge	.L62
 1065 0162 1C46     		mov	r4, r3
 1066              	.L89:
3598:src/display.c **** 	  clr_dot(i);
 1067              		.loc 1 3598 4 is_stmt 1 discriminator 3 view .LVU347
 1068 0164 4046     		mov	r0, r8
3597:src/display.c **** 	  clr_dot(i);
 1069              		.loc 1 3597 28 is_stmt 0 discriminator 3 view .LVU348
 1070 0166 08F10108 		add	r8, r8, #1
 1071              	.LVL97:
 1072              		.loc 1 3598 4 discriminator 3 view .LVU349
 1073 016a FFF7FEFF 		bl	clr_dot
 1074              	.LVL98:
3597:src/display.c **** 	  clr_dot(i);
 1075              		.loc 1 3597 27 is_stmt 1 discriminator 3 view .LVU350
3597:src/display.c **** 	  clr_dot(i);
 1076              		.loc 1 3597 20 discriminator 3 view .LVU351
3597:src/display.c **** 	  clr_dot(i);
 1077              		.loc 1 3597 2 is_stmt 0 discriminator 3 view .LVU352
 1078 016e 4445     		cmp	r4, r8
 1079 0170 F8D1     		bne	.L89
 1080              	.L62:
3599:src/display.c **** #endif
3600:src/display.c ****       }
 1081              		.loc 1 3600 7 view .LVU353
 1082 0172 0DF50D7D 		add	sp, sp, #564
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0176 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              	.LVL99:
 1088              	.L74:
 1089              		.cfi_restore_state
 1090              	.LBB213:
3545:src/display.c **** 	      break;
 1091              		.loc 1 3545 17 is_stmt 1 view .LVU354
ARM GAS  /tmp/ccdg5rgB.s 			page 87


3546:src/display.c **** 	    }
 1092              		.loc 1 3546 8 view .LVU355
3548:src/display.c **** 	    str += 3;
 1093              		.loc 1 3548 6 view .LVU356
3548:src/display.c **** 	    str += 3;
 1094              		.loc 1 3548 10 is_stmt 0 view .LVU357
 1095 017a 039B     		ldr	r3, [sp, #12]
 1096 017c 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3545:src/display.c **** 	      break;
 1097              		.loc 1 3545 32 view .LVU358
 1098 017e 0123     		movs	r3, #1
 1099 0180 0293     		str	r3, [sp, #8]
 1100 0182 06F58076 		add	r6, r6, #256
 1101 0186 80E7     		b	.L76
 1102              	.LVL100:
 1103              	.L73:
3543:src/display.c **** 	      break;
 1104              		.loc 1 3543 17 is_stmt 1 view .LVU359
3544:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1105              		.loc 1 3544 8 view .LVU360
3548:src/display.c **** 	    str += 3;
 1106              		.loc 1 3548 6 view .LVU361
3548:src/display.c **** 	    str += 3;
 1107              		.loc 1 3548 10 is_stmt 0 view .LVU362
 1108 0188 039B     		ldr	r3, [sp, #12]
 1109 018a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3543:src/display.c **** 	      break;
 1110              		.loc 1 3543 32 view .LVU363
 1111 018c 0023     		movs	r3, #0
 1112 018e 0293     		str	r3, [sp, #8]
 1113 0190 7BE7     		b	.L76
 1114              	.LVL101:
 1115              	.L114:
3543:src/display.c **** 	      break;
 1116              		.loc 1 3543 32 view .LVU364
 1117              	.LBE213:
3505:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
 1118              		.loc 1 3505 6 is_stmt 1 view .LVU365
 1119 0192 A11C     		adds	r1, r4, #2
 1120 0194 2046     		mov	r0, r4
 1121 0196 FFF7FEFF 		bl	scopy
 1122              	.LVL102:
3506:src/display.c **** 	      ++i;
 1123              		.loc 1 3506 6 view .LVU366
3506:src/display.c **** 	      ++i;
 1124              		.loc 1 3506 9 is_stmt 0 view .LVU367
 1125 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1126 019c 002B     		cmp	r3, #0
 1127 019e 3FF44DAF 		beq	.L68
 1128 01a2 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1129 01a4 42E7     		b	.L69
 1130              	.LVL103:
 1131              	.L92:
 1132              	.LBB214:
3506:src/display.c **** 	      ++i;
 1133              		.loc 1 3506 9 view .LVU368
 1134 01a6 069B     		ldr	r3, [sp, #24]
ARM GAS  /tmp/ccdg5rgB.s 			page 88


 1135              	.LVL104:
3506:src/display.c **** 	      ++i;
 1136              		.loc 1 3506 9 view .LVU369
 1137 01a8 0293     		str	r3, [sp, #8]
 1138 01aa 6EE7     		b	.L76
 1139              	.LVL105:
 1140              	.L115:
3506:src/display.c **** 	      ++i;
 1141              		.loc 1 3506 9 view .LVU370
 1142 01ac DDF81480 		ldr	r8, [sp, #20]
 1143 01b0 D4E7     		b	.L71
 1144              	.L120:
 1145 01b2 00BF     		.align	2
 1146              	.L119:
 1147 01b4 00000000 		.word	LastDisplayedText
 1148 01b8 00000000 		.word	RectPolConv
 1149 01bc 00000000 		.word	forceDispPlot
 1150              	.LBE214:
 1151              		.cfi_endproc
 1152              	.LFE39:
 1154              		.section	.text.set_exp,"ax",%progbits
 1155              		.align	1
 1156              		.p2align 2,,3
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
 1162              	set_exp:
 1163              	.LVL106:
 1164              	.LFB14:
 450:src/display.c ****   union {
 1165              		.loc 1 450 52 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 8
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 451:src/display.c ****     char buf[4];
 1169              		.loc 1 451 3 view .LVU372
 455:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1170              		.loc 1 455 3 view .LVU373
 457:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1171              		.loc 1 457 3 view .LVU374
 463:src/display.c **** #  endif
 1172              		.loc 1 463 3 view .LVU375
 472:src/display.c ****   if (exp < 0) {
 1173              		.loc 1 472 3 view .LVU376
 450:src/display.c ****   union {
 1174              		.loc 1 450 52 is_stmt 0 view .LVU377
 1175 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1176              		.cfi_def_cfa_offset 24
 1177              		.cfi_offset 4, -24
 1178              		.cfi_offset 5, -20
 1179              		.cfi_offset 6, -16
 1180              		.cfi_offset 7, -12
 1181              		.cfi_offset 8, -8
 1182              		.cfi_offset 14, -4
 473:src/display.c ****     negative = 1;
 1183              		.loc 1 473 6 view .LVU378
ARM GAS  /tmp/ccdg5rgB.s 			page 89


 1184 0004 051E     		subs	r5, r0, #0
 450:src/display.c ****   union {
 1185              		.loc 1 450 52 view .LVU379
 1186 0006 82B0     		sub	sp, sp, #8
 1187              		.cfi_def_cfa_offset 32
 450:src/display.c ****   union {
 1188              		.loc 1 450 52 view .LVU380
 1189 0008 0F46     		mov	r7, r1
 1190              	.LVL107:
 473:src/display.c ****     negative = 1;
 1191              		.loc 1 473 3 is_stmt 1 view .LVU381
 473:src/display.c ****     negative = 1;
 1192              		.loc 1 473 6 is_stmt 0 view .LVU382
 1193 000a 67DB     		blt	.L153
 478:src/display.c **** #endif
 1194              		.loc 1 478 13 view .LVU383
 1195 000c 424B     		ldr	r3, .L155
 1196 000e EC17     		asrs	r4, r5, #31
 1197 0010 83FB0513 		smull	r1, r3, r3, r5
 1198              	.LVL108:
 478:src/display.c **** #endif
 1199              		.loc 1 478 13 view .LVU384
 1200 0014 C4EBA314 		rsb	r4, r4, r3, asr #6
 472:src/display.c ****   if (exp < 0) {
 1201              		.loc 1 472 12 view .LVU385
 1202 0018 07F00208 		and	r8, r7, #2
 1203              	.LVL109:
 478:src/display.c **** #endif
 1204              		.loc 1 478 3 is_stmt 1 view .LVU386
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1205              		.loc 1 480 3 view .LVU387
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1206              		.loc 1 480 6 is_stmt 0 view .LVU388
 1207 001c 002A     		cmp	r2, #0
 1208 001e 6CD0     		beq	.L126
 483:src/display.c **** #else
 1209              		.loc 1 483 5 is_stmt 1 view .LVU389
 483:src/display.c **** #else
 1210              		.loc 1 483 8 is_stmt 0 view .LVU390
 1211 0020 3CB1     		cbz	r4, .L127
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1212              		.loc 1 487 2 is_stmt 1 view .LVU391
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1213              		.loc 1 487 5 is_stmt 0 view .LVU392
 1214 0022 B8F1000F 		cmp	r8, #0
 1215 0026 0CD1     		bne	.L124
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1216              		.loc 1 487 17 is_stmt 1 discriminator 1 view .LVU393
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1217              		.loc 1 487 21 is_stmt 0 discriminator 1 view .LVU394
 1218 0028 1446     		mov	r4, r2
 1219              	.LVL110:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1220              		.loc 1 487 24 discriminator 1 view .LVU395
 1221 002a 3A23     		movs	r3, #58
 1222              	.LVL111:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
ARM GAS  /tmp/ccdg5rgB.s 			page 90


 1223              		.loc 1 487 24 discriminator 1 view .LVU396
 1224 002c 04F8013B 		strb	r3, [r4], #1
 1225              	.LVL112:
 494:src/display.c ****     }
 1226              		.loc 1 494 7 is_stmt 1 discriminator 1 view .LVU397
 1227 0030 0BE0     		b	.L128
 1228              	.LVL113:
 1229              	.L127:
 490:src/display.c **** #else
 1230              		.loc 1 490 12 view .LVU398
 490:src/display.c **** #else
 1231              		.loc 1 490 16 is_stmt 0 view .LVU399
 1232 0032 1446     		mov	r4, r2
 1233              	.LVL114:
 490:src/display.c **** #else
 1234              		.loc 1 490 19 view .LVU400
 1235 0034 6523     		movs	r3, #101
 1236              	.LVL115:
 490:src/display.c **** #else
 1237              		.loc 1 490 19 view .LVU401
 1238 0036 04F8013B 		strb	r3, [r4], #1
 1239              	.LVL116:
 494:src/display.c ****     }
 1240              		.loc 1 494 7 is_stmt 1 view .LVU402
 494:src/display.c ****     }
 1241              		.loc 1 494 10 is_stmt 0 view .LVU403
 1242 003a B8F1000F 		cmp	r8, #0
 1243 003e 04D0     		beq	.L128
 490:src/display.c **** #else
 1244              		.loc 1 490 16 view .LVU404
 1245 0040 2246     		mov	r2, r4
 1246              	.LVL117:
 1247              	.L124:
 494:src/display.c ****     }
 1248              		.loc 1 494 21 is_stmt 1 discriminator 1 view .LVU405
 494:src/display.c ****     }
 1249              		.loc 1 494 25 is_stmt 0 discriminator 1 view .LVU406
 1250 0042 1446     		mov	r4, r2
 1251              	.LVL118:
 494:src/display.c ****     }
 1252              		.loc 1 494 28 discriminator 1 view .LVU407
 1253 0044 2D23     		movs	r3, #45
 1254 0046 04F8013B 		strb	r3, [r4], #1
 1255              	.LVL119:
 1256              	.L128:
 542:src/display.c **** #endif
 1257              		.loc 1 542 7 is_stmt 1 view .LVU408
 1258 004a 01AE     		add	r6, sp, #4
 1259 004c 3046     		mov	r0, r6
 1260 004e 0422     		movs	r2, #4
 1261 0050 0021     		movs	r1, #0
 1262 0052 FFF7FEFF 		bl	xset
 1263              	.LVL120:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1264              		.loc 1 544 7 view .LVU409
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1265              		.loc 1 544 10 is_stmt 0 view .LVU410
ARM GAS  /tmp/ccdg5rgB.s 			page 91


 1266 0056 17F0050F 		tst	r7, #5
 1267 005a 33D1     		bne	.L133
 1268              	.L135:
 565:src/display.c ****     no_number:
 1269              		.loc 1 565 2 is_stmt 1 view .LVU411
 1270 005c 2946     		mov	r1, r5
 1271 005e 3046     		mov	r0, r6
 1272 0060 FFF7FEFF 		bl	num_arg
 1273              	.LVL121:
 567:src/display.c ****     }
 1274              		.loc 1 567 7 view .LVU412
 1275 0064 2146     		mov	r1, r4
 1276 0066 3046     		mov	r0, r6
 1277 0068 FFF7FEFF 		bl	set_exp_digits_string
 1278              	.LVL122:
 568:src/display.c **** 
 1279              		.loc 1 568 5 is_stmt 0 view .LVU413
 1280 006c 02B0     		add	sp, sp, #8
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 24
 1283              		@ sp needed
 1284 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1285              	.LVL123:
 1286              	.L136:
 1287              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1288              		.loc 1 474 14 view .LVU414
 1289 0072 4FF00108 		mov	r8, #1
 1290              	.LVL124:
 1291              	.L123:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1292              		.loc 1 497 21 is_stmt 1 view .LVU415
 1293              	.LBB215:
 1294              	.LBI215:
 316:src/display.c **** {
 1295              		.loc 1 316 13 view .LVU416
 1296              	.LBB216:
 318:src/display.c ****   set_dot(EXP_SIGN);
 1297              		.loc 1 318 3 view .LVU417
 318:src/display.c ****   set_dot(EXP_SIGN);
 1298              		.loc 1 318 27 is_stmt 0 view .LVU418
 1299 0076 294B     		ldr	r3, .L155+4
 1300 0078 2D22     		movs	r2, #45
 1301              	.LVL125:
 319:src/display.c **** }
 1302              		.loc 1 319 3 view .LVU419
 1303 007a 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 1304              		.loc 1 318 27 view .LVU420
 1305 007c 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 1306              		.loc 1 319 3 is_stmt 1 view .LVU421
 1307 007e FFF7FEFF 		bl	set_dot
 1308              	.LVL126:
 1309              	.L129:
 319:src/display.c **** }
 1310              		.loc 1 319 3 is_stmt 0 view .LVU422
ARM GAS  /tmp/ccdg5rgB.s 			page 92


 1311              	.LBE216:
 1312              	.LBE215:
 499:src/display.c **** #else
 1313              		.loc 1 499 7 is_stmt 1 view .LVU423
 499:src/display.c **** #else
 1314              		.loc 1 499 10 is_stmt 0 view .LVU424
 1315 0082 002C     		cmp	r4, #0
 1316 0084 E1D0     		beq	.L128
 503:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1317              		.loc 1 503 4 is_stmt 1 view .LVU425
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1318              		.loc 1 517 6 view .LVU426
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1319              		.loc 1 517 23 is_stmt 0 view .LVU427
 1320 0086 264B     		ldr	r3, .L155+8
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1321              		.loc 1 517 10 view .LVU428
 1322 0088 03FB0455 		mla	r5, r3, r4, r5
 1323              	.LVL127:
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1324              		.loc 1 519 6 is_stmt 1 view .LVU429
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1325              		.loc 1 519 9 is_stmt 0 view .LVU430
 1326 008c FB06     		lsls	r3, r7, #27
 1327 008e 0AD5     		bpl	.L130
 1328              	.LBB217:
 523:src/display.c **** 		// Clear digits and separators
 1329              		.loc 1 523 15 view .LVU431
 1330 0090 4F26     		movs	r6, #79
 1331              	.L131:
 1332              	.LVL128:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1333              		.loc 1 525 3 is_stmt 1 discriminator 3 view .LVU432
 1334 0092 3046     		mov	r0, r6
 523:src/display.c **** 		// Clear digits and separators
 1335              		.loc 1 523 66 is_stmt 0 discriminator 3 view .LVU433
 1336 0094 0136     		adds	r6, r6, #1
 1337              	.LVL129:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1338              		.loc 1 525 3 discriminator 3 view .LVU434
 1339 0096 FFF7FEFF 		bl	clr_dot
 1340              	.LVL130:
 523:src/display.c **** 		// Clear digits and separators
 1341              		.loc 1 523 66 is_stmt 1 discriminator 3 view .LVU435
 523:src/display.c **** 		// Clear digits and separators
 1342              		.loc 1 523 41 discriminator 3 view .LVU436
 523:src/display.c **** 		// Clear digits and separators
 1343              		.loc 1 523 8 is_stmt 0 discriminator 3 view .LVU437
 1344 009a 632E     		cmp	r6, #99
 1345 009c F9D1     		bne	.L131
 526:src/display.c **** 	    }
 1346              		.loc 1 526 8 is_stmt 1 view .LVU438
 1347 009e 3E21     		movs	r1, #62
 1348 00a0 5120     		movs	r0, #81
 1349 00a2 FFF7FEFF 		bl	set_dig
 1350              	.LVL131:
 1351              	.L130:
ARM GAS  /tmp/ccdg5rgB.s 			page 93


 526:src/display.c **** 	    }
 1352              		.loc 1 526 8 is_stmt 0 view .LVU439
 1353              	.LBE217:
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1354              		.loc 1 529 6 is_stmt 1 view .LVU440
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1355              		.loc 1 529 9 is_stmt 0 view .LVU441
 1356 00a6 B8F1000F 		cmp	r8, #0
 1357 00aa 2AD1     		bne	.L154
 1358              	.L132:
 533:src/display.c **** 	    flags = 1;
 1359              		.loc 1 533 6 is_stmt 1 view .LVU442
 1360 00ac 04F13001 		add	r1, r4, #48
 1361 00b0 6320     		movs	r0, #99
 542:src/display.c **** #endif
 1362              		.loc 1 542 7 is_stmt 0 view .LVU443
 1363 00b2 01AE     		add	r6, sp, #4
 533:src/display.c **** 	    flags = 1;
 1364              		.loc 1 533 6 view .LVU444
 1365 00b4 FFF7FEFF 		bl	set_dig
 1366              	.LVL132:
 534:src/display.c **** 	  }
 1367              		.loc 1 534 6 is_stmt 1 view .LVU445
 542:src/display.c **** #endif
 1368              		.loc 1 542 7 view .LVU446
 1369 00b8 3046     		mov	r0, r6
 1370 00ba 0422     		movs	r2, #4
 1371 00bc 0021     		movs	r1, #0
 1372 00be FFF7FEFF 		bl	xset
 1373              	.LVL133:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1374              		.loc 1 544 7 view .LVU447
 542:src/display.c **** #endif
 1375              		.loc 1 542 7 is_stmt 0 view .LVU448
 1376 00c2 0024     		movs	r4, #0
 1377              	.LVL134:
 1378              	.L133:
 545:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1379              		.loc 1 545 2 is_stmt 1 view .LVU449
 1380 00c4 2946     		mov	r1, r5
 1381 00c6 0322     		movs	r2, #3
 1382 00c8 3046     		mov	r0, r6
 1383 00ca FFF7FEFF 		bl	num_arg_0
 1384              	.LVL135:
 567:src/display.c ****     }
 1385              		.loc 1 567 7 view .LVU450
 1386 00ce 2146     		mov	r1, r4
 1387 00d0 3046     		mov	r0, r6
 1388 00d2 FFF7FEFF 		bl	set_exp_digits_string
 1389              	.LVL136:
 568:src/display.c **** 
 1390              		.loc 1 568 5 is_stmt 0 view .LVU451
 1391 00d6 02B0     		add	sp, sp, #8
 1392              		.cfi_remember_state
 1393              		.cfi_def_cfa_offset 24
 1394              		@ sp needed
 1395 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccdg5rgB.s 			page 94


 1396              	.LVL137:
 1397              	.L153:
 1398              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1399              		.loc 1 474 5 is_stmt 1 view .LVU452
 475:src/display.c ****   }
 1400              		.loc 1 475 5 view .LVU453
 478:src/display.c **** #endif
 1401              		.loc 1 478 13 is_stmt 0 view .LVU454
 1402 00dc 0E4C     		ldr	r4, .L155
 475:src/display.c ****   }
 1403              		.loc 1 475 9 view .LVU455
 1404 00de 6D42     		rsbs	r5, r5, #0
 1405              	.LVL138:
 478:src/display.c **** #endif
 1406              		.loc 1 478 3 is_stmt 1 view .LVU456
 478:src/display.c **** #endif
 1407              		.loc 1 478 13 is_stmt 0 view .LVU457
 1408 00e0 A4FB0534 		umull	r3, r4, r4, r5
 1409 00e4 A409     		lsrs	r4, r4, #6
 1410              	.LVL139:
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1411              		.loc 1 480 3 is_stmt 1 view .LVU458
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1412              		.loc 1 480 6 is_stmt 0 view .LVU459
 1413 00e6 002A     		cmp	r2, #0
 1414 00e8 C3D0     		beq	.L136
 483:src/display.c **** #else
 1415              		.loc 1 483 5 is_stmt 1 view .LVU460
 483:src/display.c **** #else
 1416              		.loc 1 483 8 is_stmt 0 view .LVU461
 1417 00ea 002C     		cmp	r4, #0
 1418 00ec A9D1     		bne	.L124
 490:src/display.c **** #else
 1419              		.loc 1 490 12 is_stmt 1 view .LVU462
 490:src/display.c **** #else
 1420              		.loc 1 490 16 is_stmt 0 view .LVU463
 1421 00ee 1446     		mov	r4, r2
 1422              	.LVL140:
 490:src/display.c **** #else
 1423              		.loc 1 490 19 view .LVU464
 1424 00f0 6523     		movs	r3, #101
 1425 00f2 04F8013B 		strb	r3, [r4], #1
 1426              	.LVL141:
 494:src/display.c ****     }
 1427              		.loc 1 494 7 is_stmt 1 view .LVU465
 490:src/display.c **** #else
 1428              		.loc 1 490 16 is_stmt 0 view .LVU466
 1429 00f6 2246     		mov	r2, r4
 1430 00f8 A3E7     		b	.L124
 1431              	.LVL142:
 1432              	.L126:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1433              		.loc 1 497 7 is_stmt 1 view .LVU467
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1434              		.loc 1 497 10 is_stmt 0 view .LVU468
 1435 00fa B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/ccdg5rgB.s 			page 95


 1436 00fe C0D0     		beq	.L129
 1437 0100 B9E7     		b	.L123
 1438              	.LVL143:
 1439              	.L154:
 530:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1440              		.loc 1 530 8 is_stmt 1 view .LVU469
 1441              	.LBB218:
 1442              	.LBI218:
 322:src/display.c **** {
 1443              		.loc 1 322 13 view .LVU470
 1444              	.LBB219:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1445              		.loc 1 324 3 view .LVU471
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1446              		.loc 1 324 27 is_stmt 0 view .LVU472
 1447 0102 064B     		ldr	r3, .L155+4
 1448 0104 2022     		movs	r2, #32
 325:src/display.c **** }
 1449              		.loc 1 325 3 view .LVU473
 1450 0106 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 1451              		.loc 1 324 27 view .LVU474
 1452 0108 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 1453              		.loc 1 325 3 is_stmt 1 view .LVU475
 1454 010a FFF7FEFF 		bl	clr_dot
 1455              	.LVL144:
 1456              	.LBE219:
 1457              	.LBE218:
 531:src/display.c **** 	    }
 1458              		.loc 1 531 8 view .LVU476
 1459 010e 2D21     		movs	r1, #45
 1460 0110 5A20     		movs	r0, #90
 1461 0112 FFF7FEFF 		bl	set_dig
 1462              	.LVL145:
 1463 0116 C9E7     		b	.L132
 1464              	.L156:
 1465              		.align	2
 1466              	.L155:
 1467 0118 D34D6210 		.word	274877907
 1468 011c 00000000 		.word	LastDisplayedExponent
 1469 0120 18FCFFFF 		.word	-1000
 1470              		.cfi_endproc
 1471              	.LFE14:
 1473              		.section	.text.set_separator.part.0,"ax",%progbits
 1474              		.align	1
 1475              		.p2align 2,,3
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu fpv4-sp-d16
 1481              	set_separator.part.0:
 1482              	.LVL146:
 1483              	.LFB50:
 375:src/display.c ****   if (sep == SEP_NONE)
 1484              		.loc 1 375 14 view -0
 1485              		.cfi_startproc
ARM GAS  /tmp/ccdg5rgB.s 			page 96


 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/display.c ****     set_dot(posn+7);
 1488              		.loc 1 382 5 view .LVU478
 375:src/display.c ****   if (sep == SEP_NONE)
 1489              		.loc 1 375 14 is_stmt 0 view .LVU479
 1490 0000 70B5     		push	{r4, r5, r6, lr}
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 4, -16
 1493              		.cfi_offset 5, -12
 1494              		.cfi_offset 6, -8
 1495              		.cfi_offset 14, -4
 375:src/display.c ****   if (sep == SEP_NONE)
 1496              		.loc 1 375 14 view .LVU480
 1497 0002 0546     		mov	r5, r0
 1498 0004 0E46     		mov	r6, r1
 383:src/display.c ****     if (sep == SEP_COMMA)
 1499              		.loc 1 383 5 view .LVU481
 1500 0006 0238     		subs	r0, r0, #2
 1501              	.LVL147:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1502              		.loc 1 383 5 view .LVU482
 1503 0008 FFF7FEFF 		bl	set_dot
 1504              	.LVL148:
 384:src/display.c ****       set_dot(posn+8);
 1505              		.loc 1 384 8 view .LVU483
 1506 000c 012E     		cmp	r6, #1
 382:src/display.c ****     set_dot(posn+7);
 1507              		.loc 1 382 10 view .LVU484
 1508 000e A5F10904 		sub	r4, r5, #9
 1509              	.LVL149:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1510              		.loc 1 383 5 is_stmt 1 view .LVU485
 384:src/display.c ****       set_dot(posn+8);
 1511              		.loc 1 384 5 view .LVU486
 384:src/display.c ****       set_dot(posn+8);
 1512              		.loc 1 384 8 is_stmt 0 view .LVU487
 1513 0012 0CD0     		beq	.L161
 387:src/display.c **** #endif
 1514              		.loc 1 387 39 view .LVU488
 1515 0014 2E21     		movs	r1, #46
 1516              	.L158:
 387:src/display.c **** #endif
 1517              		.loc 1 387 30 view .LVU489
 1518 0016 084B     		ldr	r3, .L162
 387:src/display.c **** #endif
 1519              		.loc 1 387 39 view .LVU490
 1520 0018 084A     		ldr	r2, .L162+4
 387:src/display.c **** #endif
 1521              		.loc 1 387 30 view .LVU491
 1522 001a 83FB0403 		smull	r0, r3, r3, r4
 1523 001e E417     		asrs	r4, r4, #31
 1524              	.LVL150:
 387:src/display.c **** #endif
 1525              		.loc 1 387 30 view .LVU492
 1526 0020 C4EB6304 		rsb	r4, r4, r3, asr #1
 387:src/display.c **** #endif
ARM GAS  /tmp/ccdg5rgB.s 			page 97


 1527              		.loc 1 387 35 view .LVU493
 1528 0024 0134     		adds	r4, r4, #1
 391:src/display.c **** 
 1529              		.loc 1 391 1 view .LVU494
 1530 0026 0020     		movs	r0, #0
 387:src/display.c **** #endif
 1531              		.loc 1 387 39 view .LVU495
 1532 0028 02F81410 		strb	r1, [r2, r4, lsl #1]
 1533              	.LVL151:
 391:src/display.c **** 
 1534              		.loc 1 391 1 view .LVU496
 1535 002c 70BD     		pop	{r4, r5, r6, pc}
 1536              	.LVL152:
 1537              	.L161:
 385:src/display.c **** #ifndef REALBUILD
 1538              		.loc 1 385 7 is_stmt 1 view .LVU497
 1539 002e 681E     		subs	r0, r5, #1
 1540 0030 FFF7FEFF 		bl	set_dot
 1541              	.LVL153:
 387:src/display.c **** #endif
 1542              		.loc 1 387 5 view .LVU498
 387:src/display.c **** #endif
 1543              		.loc 1 387 39 is_stmt 0 view .LVU499
 1544 0034 2C21     		movs	r1, #44
 1545 0036 EEE7     		b	.L158
 1546              	.L163:
 1547              		.align	2
 1548              	.L162:
 1549 0038 398EE338 		.word	954437177
 1550 003c 00000000 		.word	LastDisplayedNumber
 1551              		.cfi_endproc
 1552              	.LFE50:
 1554              		.section	.text.set_decimal,"ax",%progbits
 1555              		.align	1
 1556              		.p2align 2,,3
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv4-sp-d16
 1562              	set_decimal:
 1563              	.LVL154:
 1564              	.LFB8:
 357:src/display.c ****   if (res) {
 1565              		.loc 1 357 87 is_stmt 1 view -0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1569              		.loc 1 358 3 view .LVU501
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1570              		.loc 1 358 6 is_stmt 0 view .LVU502
 1571 0000 3AB1     		cbz	r2, .L165
 359:src/display.c ****   } else {
 1572              		.loc 1 359 5 is_stmt 1 view .LVU503
 359:src/display.c ****   } else {
 1573              		.loc 1 359 12 is_stmt 0 view .LVU504
 1574 0002 0029     		cmp	r1, #0
ARM GAS  /tmp/ccdg5rgB.s 			page 98


 359:src/display.c ****   } else {
 1575              		.loc 1 359 9 view .LVU505
 1576 0004 1046     		mov	r0, r2
 1577              	.LVL155:
 359:src/display.c ****   } else {
 1578              		.loc 1 359 12 view .LVU506
 1579 0006 0CBF     		ite	eq
 1580 0008 2E23     		moveq	r3, #46
 1581 000a 2C23     		movne	r3, #44
 1582 000c 00F8013B 		strb	r3, [r0], #1
 1583              	.LVL156:
 369:src/display.c **** 
 1584              		.loc 1 369 1 view .LVU507
 1585 0010 7047     		bx	lr
 1586              	.LVL157:
 1587              	.L165:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1588              		.loc 1 361 5 is_stmt 1 view .LVU508
 357:src/display.c ****   if (res) {
 1589              		.loc 1 357 87 is_stmt 0 view .LVU509
 1590 0012 10B5     		push	{r4, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 4, -8
 1593              		.cfi_offset 14, -4
 1594 0014 82B0     		sub	sp, sp, #8
 1595              		.cfi_def_cfa_offset 16
 1596 0016 0446     		mov	r4, r0
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1597              		.loc 1 361 5 view .LVU510
 1598 0018 0730     		adds	r0, r0, #7
 1599              	.LVL158:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1600              		.loc 1 361 5 view .LVU511
 1601 001a 0191     		str	r1, [sp, #4]
 1602 001c FFF7FEFF 		bl	set_dot
 1603              	.LVL159:
 362:src/display.c ****       set_dot(posn+8);
 1604              		.loc 1 362 5 is_stmt 1 view .LVU512
 362:src/display.c ****       set_dot(posn+8);
 1605              		.loc 1 362 8 is_stmt 0 view .LVU513
 1606 0020 0199     		ldr	r1, [sp, #4]
 1607 0022 69B9     		cbnz	r1, .L174
 1608              	.LBB222:
 1609              	.LBB223:
 365:src/display.c **** #endif
 1610              		.loc 1 365 38 view .LVU514
 1611 0024 2E22     		movs	r2, #46
 1612              	.L168:
 365:src/display.c **** #endif
 1613              		.loc 1 365 30 view .LVU515
 1614 0026 0948     		ldr	r0, .L175
 365:src/display.c **** #endif
 1615              		.loc 1 365 38 view .LVU516
 1616 0028 094B     		ldr	r3, .L175+4
 365:src/display.c **** #endif
 1617              		.loc 1 365 30 view .LVU517
 1618 002a 80FB0410 		smull	r1, r0, r0, r4
ARM GAS  /tmp/ccdg5rgB.s 			page 99


 1619 002e E417     		asrs	r4, r4, #31
 1620              	.LVL160:
 365:src/display.c **** #endif
 1621              		.loc 1 365 30 view .LVU518
 1622 0030 C4EB6004 		rsb	r4, r4, r0, asr #1
 365:src/display.c **** #endif
 1623              		.loc 1 365 35 view .LVU519
 1624 0034 0134     		adds	r4, r4, #1
 365:src/display.c **** #endif
 1625              		.loc 1 365 38 view .LVU520
 1626 0036 0020     		movs	r0, #0
 1627 0038 03F81420 		strb	r2, [r3, r4, lsl #1]
 1628              	.LVL161:
 368:src/display.c **** }
 1629              		.loc 1 368 3 is_stmt 1 view .LVU521
 368:src/display.c **** }
 1630              		.loc 1 368 3 is_stmt 0 view .LVU522
 1631              	.LBE223:
 1632              	.LBE222:
 368:src/display.c **** }
 1633              		.loc 1 368 3 is_stmt 1 view .LVU523
 369:src/display.c **** 
 1634              		.loc 1 369 1 is_stmt 0 view .LVU524
 1635 003c 02B0     		add	sp, sp, #8
 1636              		.cfi_remember_state
 1637              		.cfi_def_cfa_offset 8
 1638              		@ sp needed
 1639 003e 10BD     		pop	{r4, pc}
 1640              	.LVL162:
 1641              	.L174:
 1642              		.cfi_restore_state
 363:src/display.c **** #ifndef REALBUILD
 1643              		.loc 1 363 7 is_stmt 1 view .LVU525
 1644 0040 04F10800 		add	r0, r4, #8
 1645 0044 FFF7FEFF 		bl	set_dot
 1646              	.LVL163:
 1647              	.LBB225:
 1648              	.LBI222:
 357:src/display.c ****   if (res) {
 1649              		.loc 1 357 14 view .LVU526
 1650              	.LBB224:
 365:src/display.c **** #endif
 1651              		.loc 1 365 5 view .LVU527
 365:src/display.c **** #endif
 1652              		.loc 1 365 38 is_stmt 0 view .LVU528
 1653 0048 2C22     		movs	r2, #44
 1654 004a ECE7     		b	.L168
 1655              	.L176:
 1656              		.align	2
 1657              	.L175:
 1658 004c 398EE338 		.word	954437177
 1659 0050 00000000 		.word	LastDisplayedNumber
 1660              	.LBE224:
 1661              	.LBE225:
 1662              		.cfi_endproc
 1663              	.LFE8:
 1665              		.section	.text.set_digits_string,"ax",%progbits
ARM GAS  /tmp/ccdg5rgB.s 			page 100


 1666              		.align	1
 1667              		.p2align 2,,3
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.fpu fpv4-sp-d16
 1673              	set_digits_string:
 1674              	.LVL164:
 1675              	.LFB12:
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1676              		.loc 1 422 55 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1680              		.loc 1 423 3 view .LVU530
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1681              		.loc 1 422 55 is_stmt 0 view .LVU531
 1682 0000 38B5     		push	{r3, r4, r5, lr}
 1683              		.cfi_def_cfa_offset 16
 1684              		.cfi_offset 3, -16
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 5, -8
 1687              		.cfi_offset 14, -4
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1688              		.loc 1 423 10 view .LVU532
 1689 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1690              		.loc 1 423 10 is_stmt 1 view .LVU533
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1691              		.loc 1 423 3 is_stmt 0 view .LVU534
 1692 0004 E3B1     		cbz	r3, .L177
 1693 0006 0546     		mov	r5, r0
 1694 0008 0C46     		mov	r4, r1
 1695 000a 06E0     		b	.L181
 1696              	.LVL165:
 1697              	.L179:
 1698              	.LBB226:
 1699              	.LBB227:
 417:src/display.c ****   return res;
 1700              		.loc 1 417 8 view .LVU535
 1701 000c 2046     		mov	r0, r4
 1702 000e FFF7FEFF 		bl	set_dig
 1703              	.LVL166:
 418:src/display.c **** }
 1704              		.loc 1 418 3 is_stmt 1 view .LVU536
 418:src/display.c **** }
 1705              		.loc 1 418 3 is_stmt 0 view .LVU537
 1706              	.LBE227:
 1707              	.LBE226:
 428:src/display.c ****     }
 1708              		.loc 1 428 7 is_stmt 1 view .LVU538
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1709              		.loc 1 423 10 is_stmt 0 view .LVU539
 1710 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1711              	.LVL167:
 428:src/display.c ****     }
ARM GAS  /tmp/ccdg5rgB.s 			page 101


 1712              		.loc 1 428 9 view .LVU540
 1713 0016 0934     		adds	r4, r4, #9
 1714              	.LVL168:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1715              		.loc 1 423 24 is_stmt 1 view .LVU541
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1716              		.loc 1 423 10 view .LVU542
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1717              		.loc 1 423 3 is_stmt 0 view .LVU543
 1718 0018 93B1     		cbz	r3, .L177
 1719              	.LVL169:
 1720              	.L181:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1721              		.loc 1 424 5 is_stmt 1 view .LVU544
 425:src/display.c ****     else {
 1722              		.loc 1 425 7 view .LVU545
 427:src/display.c ****       j += SEGS_PER_DIGIT;
 1723              		.loc 1 427 7 view .LVU546
 1724              	.LBB230:
 1725              	.LBI226:
 415:src/display.c ****   if (res) *res++ = ch;
 1726              		.loc 1 415 14 view .LVU547
 1727              	.LBB228:
 416:src/display.c ****   else	set_dig(base, ch);
 1728              		.loc 1 416 3 view .LVU548
 417:src/display.c ****   return res;
 1729              		.loc 1 417 8 view .LVU549
 1730              	.LBE228:
 1731              	.LBE230:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1732              		.loc 1 424 21 is_stmt 0 view .LVU550
 1733 001a 03F0FD02 		and	r2, r3, #253
 1734 001e 2C2A     		cmp	r2, #44
 425:src/display.c ****     else {
 1735              		.loc 1 425 7 view .LVU551
 1736 0020 A4F10900 		sub	r0, r4, #9
 1737 0024 4FF00002 		mov	r2, #0
 1738              	.LBB231:
 1739              	.LBB229:
 417:src/display.c ****   return res;
 1740              		.loc 1 417 8 view .LVU552
 1741 0028 1946     		mov	r1, r3
 1742              	.LBE229:
 1743              	.LBE231:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1744              		.loc 1 424 21 view .LVU553
 1745 002a EFD1     		bne	.L179
 425:src/display.c ****     else {
 1746              		.loc 1 425 7 view .LVU554
 1747 002c B3F12E01 		subs	r1, r3, #46
 1748 0030 18BF     		it	ne
 1749 0032 0121     		movne	r1, #1
 1750 0034 FFF7FEFF 		bl	set_decimal
 1751              	.LVL170:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1752              		.loc 1 423 24 is_stmt 1 view .LVU555
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
ARM GAS  /tmp/ccdg5rgB.s 			page 102


 1753              		.loc 1 423 10 view .LVU556
 1754 0038 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1755              	.LVL171:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1756              		.loc 1 423 3 is_stmt 0 view .LVU557
 1757 003c 002B     		cmp	r3, #0
 1758 003e ECD1     		bne	.L181
 1759              	.LVL172:
 1760              	.L177:
 431:src/display.c **** 
 1761              		.loc 1 431 1 view .LVU558
 1762 0040 38BD     		pop	{r3, r4, r5, pc}
 1763              		.cfi_endproc
 1764              	.LFE12:
 1766 0042 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1767              		.align	2
 1768              	.LC0:
 1769 0000 4E614E00 		.ascii	"NaN\000"
 1770              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1771              		.align	1
 1772              		.p2align 2,,3
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv4-sp-d16
 1778              	check_special_dn.isra.0:
 1779              	.LVL173:
 1780              	.LFB52:
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1781              		.loc 1 1627 18 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1628:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1785              		.loc 1 1628 2 view .LVU560
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1786              		.loc 1 1627 18 is_stmt 0 view .LVU561
 1787 0000 38B5     		push	{r3, r4, r5, lr}
 1788              		.cfi_def_cfa_offset 16
 1789              		.cfi_offset 3, -16
 1790              		.cfi_offset 4, -12
 1791              		.cfi_offset 5, -8
 1792              		.cfi_offset 14, -4
1628:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1793              		.loc 1 1628 6 view .LVU562
 1794 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1795              		.loc 1 1627 18 view .LVU563
 1796 0004 0546     		mov	r5, r0
1628:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1797              		.loc 1 1628 5 view .LVU564
 1798 0006 13F07000 		ands	r0, r3, #112
 1799 000a 09D0     		beq	.L187
1629:src/display.c **** 	    if (res) {
 1800              		.loc 1 1629 4 is_stmt 1 view .LVU565
1629:src/display.c **** 	    if (res) {
 1801              		.loc 1 1629 7 is_stmt 0 view .LVU566
ARM GAS  /tmp/ccdg5rgB.s 			page 103


 1802 000c 13F0300F 		tst	r3, #48
 1803 0010 0C46     		mov	r4, r1
 1804 0012 06D0     		beq	.L189
 1805              	.LVL174:
 1806              	.LBB234:
 1807              	.LBI234:
1627:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1808              		.loc 1 1627 18 is_stmt 1 view .LVU567
 1809              	.LBB235:
1630:src/display.c **** 	      scopy(res, "NaN");
 1810              		.loc 1 1630 6 view .LVU568
1630:src/display.c **** 	      scopy(res, "NaN");
 1811              		.loc 1 1630 9 is_stmt 0 view .LVU569
 1812 0014 89B1     		cbz	r1, .L190
1631:src/display.c **** 	    } else {
 1813              		.loc 1 1631 8 is_stmt 1 view .LVU570
 1814 0016 0846     		mov	r0, r1
 1815 0018 1849     		ldr	r1, .L203
 1816              	.LVL175:
1631:src/display.c **** 	    } else {
 1817              		.loc 1 1631 8 is_stmt 0 view .LVU571
 1818 001a FFF7FEFF 		bl	scopy
 1819              	.LVL176:
1631:src/display.c **** 	    } else {
 1820              		.loc 1 1631 8 view .LVU572
 1821 001e 0120     		movs	r0, #1
 1822              	.LVL177:
 1823              	.L187:
1631:src/display.c **** 	    } else {
 1824              		.loc 1 1631 8 view .LVU573
 1825              	.LBE235:
 1826              	.LBE234:
1663:src/display.c **** 
 1827              		.loc 1 1663 7 view .LVU574
 1828 0020 38BD     		pop	{r3, r4, r5, pc}
 1829              	.LVL178:
 1830              	.L189:
1641:src/display.c **** 	      if (res) *res++ = '-';
 1831              		.loc 1 1641 6 is_stmt 1 view .LVU575
1641:src/display.c **** 	      if (res) *res++ = '-';
 1832              		.loc 1 1641 9 is_stmt 0 view .LVU576
 1833 0022 1B06     		lsls	r3, r3, #24
 1834 0024 04D4     		bmi	.L202
1645:src/display.c **** 	      *res++ = '\237';
 1835              		.loc 1 1645 6 is_stmt 1 view .LVU577
1645:src/display.c **** 	      *res++ = '\237';
 1836              		.loc 1 1645 9 is_stmt 0 view .LVU578
 1837 0026 B9B1     		cbz	r1, .L194
 1838              	.LVL179:
 1839              	.L193:
1646:src/display.c **** 	    else {
 1840              		.loc 1 1646 8 is_stmt 1 view .LVU579
1646:src/display.c **** 	    else {
 1841              		.loc 1 1646 15 is_stmt 0 view .LVU580
 1842 0028 9F23     		movs	r3, #159
 1843 002a 2370     		strb	r3, [r4]
1659:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 104


 1844              		.loc 1 1659 13 view .LVU581
 1845 002c 0120     		movs	r0, #1
1663:src/display.c **** 
 1846              		.loc 1 1663 7 view .LVU582
 1847 002e 38BD     		pop	{r3, r4, r5, pc}
 1848              	.LVL180:
 1849              	.L202:
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1850              		.loc 1 1642 8 is_stmt 1 view .LVU583
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1851              		.loc 1 1642 11 is_stmt 0 view .LVU584
 1852 0030 71B1     		cbz	r1, .L192
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1853              		.loc 1 1642 17 is_stmt 1 view .LVU585
 1854              	.LVL181:
1642:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1855              		.loc 1 1642 24 is_stmt 0 view .LVU586
 1856 0032 2D23     		movs	r3, #45
 1857 0034 04F8013B 		strb	r3, [r4], #1
 1858              	.LVL182:
1645:src/display.c **** 	      *res++ = '\237';
 1859              		.loc 1 1645 6 is_stmt 1 view .LVU587
 1860 0038 F6E7     		b	.L193
 1861              	.LVL183:
 1862              	.L190:
 1863              	.LBB237:
 1864              	.LBB236:
1633:src/display.c **** #ifndef REALBUILD
 1865              		.loc 1 1633 8 view .LVU588
 1866 003a 1148     		ldr	r0, .L203+4
 1867 003c FFF7FEFF 		bl	set_digits_string
 1868              	.LVL184:
1635:src/display.c **** 	      forceDispPlot=0;
 1869              		.loc 1 1635 8 view .LVU589
 1870 0040 1049     		ldr	r1, .L203+8
 1871 0042 1148     		ldr	r0, .L203+12
 1872 0044 FFF7FEFF 		bl	scopy
 1873              	.LVL185:
1636:src/display.c **** #endif
 1874              		.loc 1 1636 8 view .LVU590
1636:src/display.c **** #endif
 1875              		.loc 1 1636 21 is_stmt 0 view .LVU591
 1876 0048 104B     		ldr	r3, .L203+16
 1877 004a 1C70     		strb	r4, [r3]
 1878 004c 0120     		movs	r0, #1
 1879              	.LBE236:
 1880              	.LBE237:
1663:src/display.c **** 
 1881              		.loc 1 1663 7 view .LVU592
 1882 004e 38BD     		pop	{r3, r4, r5, pc}
 1883              	.LVL186:
 1884              	.L192:
1643:src/display.c **** 	    }
 1885              		.loc 1 1643 13 is_stmt 1 view .LVU593
 1886 0050 2D21     		movs	r1, #45
 1887              	.LVL187:
1643:src/display.c **** 	    }
ARM GAS  /tmp/ccdg5rgB.s 			page 105


 1888              		.loc 1 1643 13 is_stmt 0 view .LVU594
 1889 0052 0920     		movs	r0, #9
 1890 0054 FFF7FEFF 		bl	set_dig
 1891              	.LVL188:
1645:src/display.c **** 	      *res++ = '\237';
 1892              		.loc 1 1645 6 is_stmt 1 view .LVU595
 1893              	.L194:
1648:src/display.c **** #ifndef REALBUILD
 1894              		.loc 1 1648 8 view .LVU596
 1895 0058 1221     		movs	r1, #18
 1896 005a 0D48     		ldr	r0, .L203+20
 1897 005c FFF7FEFF 		bl	set_digits_string
 1898              	.LVL189:
1650:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1899              		.loc 1 1650 8 view .LVU597
1650:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1900              		.loc 1 1650 11 is_stmt 0 view .LVU598
 1901 0060 95F90030 		ldrsb	r3, [r5]
1654:src/display.c **** 	      }
 1902              		.loc 1 1654 3 view .LVU599
 1903 0064 0848     		ldr	r0, .L203+12
1650:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
 1904              		.loc 1 1650 11 view .LVU600
 1905 0066 002B     		cmp	r3, #0
1651:src/display.c **** 	      }
 1906              		.loc 1 1651 3 is_stmt 1 view .LVU601
 1907 0068 B4BF     		ite	lt
 1908 006a 0A49     		ldrlt	r1, .L203+24
1654:src/display.c **** 	      }
 1909              		.loc 1 1654 3 view .LVU602
 1910 006c 0A49     		ldrge	r1, .L203+28
 1911 006e FFF7FEFF 		bl	scopy
 1912              	.LVL190:
1656:src/display.c **** #endif
 1913              		.loc 1 1656 8 view .LVU603
1656:src/display.c **** #endif
 1914              		.loc 1 1656 21 is_stmt 0 view .LVU604
 1915 0072 064B     		ldr	r3, .L203+16
 1916 0074 0022     		movs	r2, #0
 1917 0076 1A70     		strb	r2, [r3]
1659:src/display.c **** 	  }
 1918              		.loc 1 1659 13 view .LVU605
 1919 0078 0120     		movs	r0, #1
1663:src/display.c **** 
 1920              		.loc 1 1663 7 view .LVU606
 1921 007a 38BD     		pop	{r3, r4, r5, pc}
 1922              	.L204:
 1923              		.align	2
 1924              	.L203:
 1925 007c 00000000 		.word	.LC0
 1926 0080 00000000 		.word	.LANCHOR3
 1927 0084 00000000 		.word	.LANCHOR4
 1928 0088 00000000 		.word	LastDisplayedNumber
 1929 008c 00000000 		.word	forceDispPlot
 1930 0090 00000000 		.word	.LANCHOR5
 1931 0094 00000000 		.word	.LANCHOR6
 1932 0098 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccdg5rgB.s 			page 106


 1933              		.cfi_endproc
 1934              	.LFE52:
 1936              		.section	.text.set_x_hms,"ax",%progbits
 1937              		.align	1
 1938              		.p2align 2,,3
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	set_x_hms:
 1945              	.LVL191:
 1946              	.LFB22:
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1947              		.loc 1 1708 62 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 200
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1709:src/display.c **** 	int j=0;
 1951              		.loc 1 1709 2 view .LVU608
1710:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1952              		.loc 1 1710 2 view .LVU609
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1953              		.loc 1 1708 62 is_stmt 0 view .LVU610
 1954 0000 30B5     		push	{r4, r5, lr}
 1955              		.cfi_def_cfa_offset 12
 1956              		.cfi_offset 4, -12
 1957              		.cfi_offset 5, -8
 1958              		.cfi_offset 14, -4
 1959 0002 B5B0     		sub	sp, sp, #212
 1960              		.cfi_def_cfa_offset 224
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1961              		.loc 1 1708 62 view .LVU611
 1962 0004 0446     		mov	r4, r0
1710:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1963              		.loc 1 1710 6 view .LVU612
 1964 0006 0023     		movs	r3, #0
1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1965              		.loc 1 1714 6 view .LVU613
 1966 0008 0830     		adds	r0, r0, #8
 1967              	.LVL192:
1708:src/display.c **** 	decNumber x, y, a, t, u;
 1968              		.loc 1 1708 62 view .LVU614
 1969 000a 0D46     		mov	r5, r1
1710:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1970              		.loc 1 1710 6 view .LVU615
 1971 000c 0393     		str	r3, [sp, #12]
1711:src/display.c **** 	unsigned int hr, min, sec, fs;
 1972              		.loc 1 1711 2 is_stmt 1 view .LVU616
 1973              	.LVL193:
1712:src/display.c **** 
 1974              		.loc 1 1712 2 view .LVU617
1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1975              		.loc 1 1714 2 view .LVU618
1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1976              		.loc 1 1714 6 is_stmt 0 view .LVU619
 1977 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1978              	.LVL194:
ARM GAS  /tmp/ccdg5rgB.s 			page 107


1714:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1979              		.loc 1 1714 5 view .LVU620
 1980 0012 48B1     		cbz	r0, .L206
1715:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1981              		.loc 1 1715 4 is_stmt 1 view .LVU621
1715:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1982              		.loc 1 1715 7 is_stmt 0 view .LVU622
 1983 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1984 0016 5B06     		lsls	r3, r3, #25
 1985 0018 04D5     		bpl	.L205
1716:src/display.c **** 	  return;
 1986              		.loc 1 1716 6 is_stmt 1 view .LVU623
 1987              	.LVL195:
 1988              	.LBB238:
 1989              	.LBI238:
 415:src/display.c ****   if (res) *res++ = ch;
 1990              		.loc 1 415 14 view .LVU624
 1991              	.LBB239:
 416:src/display.c ****   else	set_dig(base, ch);
 1992              		.loc 1 416 3 view .LVU625
 416:src/display.c ****   else	set_dig(base, ch);
 1993              		.loc 1 416 6 is_stmt 0 view .LVU626
 1994 001a 002D     		cmp	r5, #0
 1995 001c 00F0B580 		beq	.L209
 416:src/display.c ****   else	set_dig(base, ch);
 1996              		.loc 1 416 12 is_stmt 1 view .LVU627
 1997              	.LVL196:
 416:src/display.c ****   else	set_dig(base, ch);
 1998              		.loc 1 416 19 is_stmt 0 view .LVU628
 1999 0020 6F23     		movs	r3, #111
 2000 0022 2B70     		strb	r3, [r5]
 2001              	.LVL197:
 2002              	.L205:
 416:src/display.c ****   else	set_dig(base, ch);
 2003              		.loc 1 416 19 view .LVU629
 2004              	.LBE239:
 2005              	.LBE238:
1771:src/display.c **** 
 2006              		.loc 1 1771 7 view .LVU630
 2007 0024 35B0     		add	sp, sp, #212
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 0026 30BD     		pop	{r4, r5, pc}
 2012              	.LVL198:
 2013              	.L206:
 2014              		.cfi_restore_state
1720:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 2015              		.loc 1 1720 2 is_stmt 1 view .LVU631
 2016 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 2017              	.LVL199:
1721:src/display.c **** 	dn_abs(&a, rgx);
 2018              		.loc 1 1721 2 view .LVU632
 2019 002c 624A     		ldr	r2, .L236
 2020 002e 2146     		mov	r1, r4
 2021 0030 07A8     		add	r0, sp, #28
 2022 0032 FFF7FEFF 		bl	decNumberMod
ARM GAS  /tmp/ccdg5rgB.s 			page 108


 2023              	.LVL200:
1722:src/display.c **** 	if (decNumberIsNegative(&x)) {
 2024              		.loc 1 1722 2 view .LVU633
 2025 0036 2146     		mov	r1, r4
 2026 0038 19A8     		add	r0, sp, #100
 2027 003a FFF7FEFF 		bl	dn_abs
 2028              	.LVL201:
1723:src/display.c **** 	  if (res != NULL)
 2029              		.loc 1 1723 2 view .LVU634
1723:src/display.c **** 	  if (res != NULL)
 2030              		.loc 1 1723 5 is_stmt 0 view .LVU635
 2031 003e 9DF92430 		ldrsb	r3, [sp, #36]
 2032 0042 002B     		cmp	r3, #0
 2033 0044 72DB     		blt	.L234
 2034              	.L210:
1731:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 2035              		.loc 1 1731 2 is_stmt 1 view .LVU636
 2036 0046 07A9     		add	r1, sp, #28
 2037 0048 10A8     		add	r0, sp, #64
 2038 004a FFF7FEFF 		bl	decNumberHR2HMS
 2039              	.LVL202:
1732:src/display.c **** 	decNumberRound(&u, &t);
 2040              		.loc 1 1732 2 view .LVU637
 2041 004e 0622     		movs	r2, #6
 2042 0050 10A9     		add	r1, sp, #64
 2043 0052 22A8     		add	r0, sp, #136
 2044 0054 FFF7FEFF 		bl	dn_mulpow10
 2045              	.LVL203:
1733:src/display.c **** 
 2046              		.loc 1 1733 2 view .LVU638
 2047 0058 22A9     		add	r1, sp, #136
 2048 005a 2BA8     		add	r0, sp, #172
 2049 005c FFF7FEFF 		bl	decNumberRound
 2050              	.LVL204:
1735:src/display.c **** 	hms_step(&u, &t, &sec);
 2051              		.loc 1 1735 2 view .LVU639
 2052 0060 2BA9     		add	r1, sp, #172
 2053 0062 22A8     		add	r0, sp, #136
 2054 0064 06AA     		add	r2, sp, #24
 2055 0066 FFF7FEFF 		bl	hms_step
 2056              	.LVL205:
1736:src/display.c **** 	hms_step(&t, &u, &min);
 2057              		.loc 1 1736 2 view .LVU640
 2058 006a 22A9     		add	r1, sp, #136
 2059 006c 2BA8     		add	r0, sp, #172
 2060 006e 05AA     		add	r2, sp, #20
 2061 0070 FFF7FEFF 		bl	hms_step
 2062              	.LVL206:
1737:src/display.c **** 	hr = dn_to_int(&t);
 2063              		.loc 1 1737 2 view .LVU641
 2064 0074 04AA     		add	r2, sp, #16
 2065 0076 2BA9     		add	r1, sp, #172
 2066 0078 22A8     		add	r0, sp, #136
 2067 007a FFF7FEFF 		bl	hms_step
 2068              	.LVL207:
1738:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2069              		.loc 1 1738 2 view .LVU642
ARM GAS  /tmp/ccdg5rgB.s 			page 109


1738:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 2070              		.loc 1 1738 7 is_stmt 0 view .LVU643
 2071 007e 22A8     		add	r0, sp, #136
 2072 0080 FFF7FEFF 		bl	dn_to_int
 2073              	.LVL208:
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2074              		.loc 1 1739 33 view .LVU644
 2075 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2076              		.loc 1 1739 5 view .LVU645
 2077 0088 3B2A     		cmp	r2, #59
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2078              		.loc 1 1739 19 is_stmt 1 view .LVU646
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2079              		.loc 1 1739 23 is_stmt 0 view .LVU647
 2080 008a 82BF     		ittt	hi
 2081 008c 3C3A     		subhi	r2, r2, #60
1739:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 2082              		.loc 1 1739 33 view .LVU648
 2083 008e 0133     		addhi	r3, r3, #1
 2084 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1740:src/display.c **** 
 2085              		.loc 1 1740 2 is_stmt 1 view .LVU649
1740:src/display.c **** 
 2086              		.loc 1 1740 5 is_stmt 0 view .LVU650
 2087 0094 3B2B     		cmp	r3, #59
 2088 0096 02D9     		bls	.L215
1740:src/display.c **** 
 2089              		.loc 1 1740 19 is_stmt 1 discriminator 1 view .LVU651
1740:src/display.c **** 
 2090              		.loc 1 1740 23 is_stmt 0 discriminator 1 view .LVU652
 2091 0098 3C3B     		subs	r3, r3, #60
 2092 009a 0493     		str	r3, [sp, #16]
1740:src/display.c **** 
 2093              		.loc 1 1740 30 is_stmt 1 discriminator 1 view .LVU653
1740:src/display.c **** 
 2094              		.loc 1 1740 32 is_stmt 0 discriminator 1 view .LVU654
 2095 009c 0130     		adds	r0, r0, #1
 2096              	.LVL209:
 2097              	.L215:
1743:src/display.c **** 	res = set_dig_s(j, '@', res);
 2098              		.loc 1 1743 2 is_stmt 1 view .LVU655
1743:src/display.c **** 	res = set_dig_s(j, '@', res);
 2099              		.loc 1 1743 8 is_stmt 0 view .LVU656
 2100 009e 0123     		movs	r3, #1
 2101 00a0 0093     		str	r3, [sp]
 2102 00a2 2946     		mov	r1, r5
 2103 00a4 03AA     		add	r2, sp, #12
 2104 00a6 0423     		movs	r3, #4
 2105 00a8 FFF7FEFF 		bl	hms_render
 2106              	.LVL210:
1744:src/display.c **** 	j += SEGS_PER_DIGIT;
 2107              		.loc 1 1744 2 is_stmt 1 view .LVU657
 2108              	.LBB241:
 2109              	.LBI241:
 415:src/display.c ****   if (res) *res++ = ch;
 2110              		.loc 1 415 14 view .LVU658
ARM GAS  /tmp/ccdg5rgB.s 			page 110


 2111              	.LBB242:
 416:src/display.c ****   else	set_dig(base, ch);
 2112              		.loc 1 416 3 view .LVU659
 416:src/display.c ****   else	set_dig(base, ch);
 2113              		.loc 1 416 6 is_stmt 0 view .LVU660
 2114 00ac 0446     		mov	r4, r0
 2115              	.LVL211:
 416:src/display.c ****   else	set_dig(base, ch);
 2116              		.loc 1 416 6 view .LVU661
 2117 00ae 0028     		cmp	r0, #0
 2118 00b0 76D0     		beq	.L216
 416:src/display.c ****   else	set_dig(base, ch);
 2119              		.loc 1 416 12 is_stmt 1 view .LVU662
 416:src/display.c ****   else	set_dig(base, ch);
 2120              		.loc 1 416 16 is_stmt 0 view .LVU663
 2121 00b2 0146     		mov	r1, r0
 2122              	.LVL212:
 416:src/display.c ****   else	set_dig(base, ch);
 2123              		.loc 1 416 19 view .LVU664
 2124 00b4 4023     		movs	r3, #64
 2125 00b6 01F8013B 		strb	r3, [r1], #1
 2126              	.LVL213:
 2127              	.L217:
 418:src/display.c **** }
 2128              		.loc 1 418 3 is_stmt 1 view .LVU665
 418:src/display.c **** }
 2129              		.loc 1 418 3 is_stmt 0 view .LVU666
 2130              	.LBE242:
 2131              	.LBE241:
1745:src/display.c **** 
 2132              		.loc 1 1745 2 is_stmt 1 view .LVU667
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2133              		.loc 1 1748 8 is_stmt 0 view .LVU668
 2134 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 2135 00be 0122     		movs	r2, #1
1745:src/display.c **** 
 2136              		.loc 1 1745 4 view .LVU669
 2137 00c0 03F10904 		add	r4, r3, #9
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2138              		.loc 1 1748 8 view .LVU670
 2139 00c4 0092     		str	r2, [sp]
 2140 00c6 0223     		movs	r3, #2
 2141 00c8 03AA     		add	r2, sp, #12
1745:src/display.c **** 
 2142              		.loc 1 1745 4 view .LVU671
 2143 00ca 0394     		str	r4, [sp, #12]
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2144              		.loc 1 1748 2 is_stmt 1 view .LVU672
1748:src/display.c **** 	res = set_dig_s(j, '\'', res);
 2145              		.loc 1 1748 8 is_stmt 0 view .LVU673
 2146 00cc FFF7FEFF 		bl	hms_render
 2147              	.LVL214:
1749:src/display.c **** 	j += SEGS_PER_DIGIT;
 2148              		.loc 1 1749 2 is_stmt 1 view .LVU674
 2149              	.LBB244:
 2150              	.LBI244:
 415:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccdg5rgB.s 			page 111


 2151              		.loc 1 415 14 view .LVU675
 2152              	.LBB245:
 416:src/display.c ****   else	set_dig(base, ch);
 2153              		.loc 1 416 3 view .LVU676
 416:src/display.c ****   else	set_dig(base, ch);
 2154              		.loc 1 416 6 is_stmt 0 view .LVU677
 2155 00d0 0446     		mov	r4, r0
 2156 00d2 0028     		cmp	r0, #0
 2157 00d4 5ED0     		beq	.L218
 416:src/display.c ****   else	set_dig(base, ch);
 2158              		.loc 1 416 12 is_stmt 1 view .LVU678
 416:src/display.c ****   else	set_dig(base, ch);
 2159              		.loc 1 416 16 is_stmt 0 view .LVU679
 2160 00d6 0146     		mov	r1, r0
 2161              	.LVL215:
 416:src/display.c ****   else	set_dig(base, ch);
 2162              		.loc 1 416 19 view .LVU680
 2163 00d8 2723     		movs	r3, #39
 2164 00da 01F8013B 		strb	r3, [r1], #1
 2165              	.LVL216:
 2166              	.L219:
 418:src/display.c **** }
 2167              		.loc 1 418 3 is_stmt 1 view .LVU681
 418:src/display.c **** }
 2168              		.loc 1 418 3 is_stmt 0 view .LVU682
 2169              	.LBE245:
 2170              	.LBE244:
1750:src/display.c **** 
 2171              		.loc 1 1750 2 is_stmt 1 view .LVU683
1750:src/display.c **** 
 2172              		.loc 1 1750 4 is_stmt 0 view .LVU684
 2173 00de 039B     		ldr	r3, [sp, #12]
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2174              		.loc 1 1753 8 view .LVU685
 2175 00e0 0598     		ldr	r0, [sp, #20]
 2176 00e2 0122     		movs	r2, #1
1750:src/display.c **** 
 2177              		.loc 1 1750 4 view .LVU686
 2178 00e4 03F10904 		add	r4, r3, #9
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2179              		.loc 1 1753 8 view .LVU687
 2180 00e8 0092     		str	r2, [sp]
 2181 00ea 0223     		movs	r3, #2
 2182 00ec 03AA     		add	r2, sp, #12
1750:src/display.c **** 
 2183              		.loc 1 1750 4 view .LVU688
 2184 00ee 0394     		str	r4, [sp, #12]
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2185              		.loc 1 1753 2 is_stmt 1 view .LVU689
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 2186              		.loc 1 1753 8 is_stmt 0 view .LVU690
 2187 00f0 FFF7FEFF 		bl	hms_render
 2188              	.LVL217:
1754:src/display.c **** 
 2189              		.loc 1 1754 8 view .LVU691
 2190 00f4 3149     		ldr	r1, .L236+4
1753:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
ARM GAS  /tmp/ccdg5rgB.s 			page 112


 2191              		.loc 1 1753 8 view .LVU692
 2192 00f6 0246     		mov	r2, r0
 2193              	.LVL218:
1754:src/display.c **** 
 2194              		.loc 1 1754 2 is_stmt 1 view .LVU693
1754:src/display.c **** 
 2195              		.loc 1 1754 8 is_stmt 0 view .LVU694
 2196 00f8 0398     		ldr	r0, [sp, #12]
 2197              	.LVL219:
1754:src/display.c **** 
 2198              		.loc 1 1754 8 view .LVU695
 2199 00fa 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2200 00fc 0938     		subs	r0, r0, #9
 2201 00fe FFF7FEFF 		bl	set_decimal
 2202              	.LVL220:
1757:src/display.c **** 
 2203              		.loc 1 1757 8 view .LVU696
 2204 0102 0023     		movs	r3, #0
1754:src/display.c **** 
 2205              		.loc 1 1754 8 view .LVU697
 2206 0104 0146     		mov	r1, r0
 2207              	.LVL221:
1757:src/display.c **** 
 2208              		.loc 1 1757 2 is_stmt 1 view .LVU698
1757:src/display.c **** 
 2209              		.loc 1 1757 8 is_stmt 0 view .LVU699
 2210 0106 0093     		str	r3, [sp]
 2211 0108 0698     		ldr	r0, [sp, #24]
 2212              	.LVL222:
1757:src/display.c **** 
 2213              		.loc 1 1757 8 view .LVU700
 2214 010a 03AA     		add	r2, sp, #12
 2215 010c 0223     		movs	r3, #2
 2216 010e FFF7FEFF 		bl	hms_render
 2217              	.LVL223:
1760:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 2218              		.loc 1 1760 2 is_stmt 1 view .LVU701
 2219              	.LBB247:
 2220              	.LBI247:
 415:src/display.c ****   if (res) *res++ = ch;
 2221              		.loc 1 415 14 view .LVU702
 2222              	.LBB248:
 416:src/display.c ****   else	set_dig(base, ch);
 2223              		.loc 1 416 3 view .LVU703
 416:src/display.c ****   else	set_dig(base, ch);
 2224              		.loc 1 416 6 is_stmt 0 view .LVU704
 2225 0112 0446     		mov	r4, r0
 2226 0114 78B3     		cbz	r0, .L220
 416:src/display.c ****   else	set_dig(base, ch);
 2227              		.loc 1 416 12 is_stmt 1 view .LVU705
 2228              	.LVL224:
 416:src/display.c ****   else	set_dig(base, ch);
 2229              		.loc 1 416 19 is_stmt 0 view .LVU706
 2230 0116 2223     		movs	r3, #34
 2231 0118 0370     		strb	r3, [r0]
 2232              	.LVL225:
 418:src/display.c **** }
ARM GAS  /tmp/ccdg5rgB.s 			page 113


 2233              		.loc 1 418 3 is_stmt 1 view .LVU707
 418:src/display.c **** }
 2234              		.loc 1 418 3 is_stmt 0 view .LVU708
 2235              	.LBE248:
 2236              	.LBE247:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2237              		.loc 1 1764 2 is_stmt 1 view .LVU709
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2238              		.loc 1 1764 6 is_stmt 0 view .LVU710
 2239 011a 2749     		ldr	r1, .L236
 2240 011c 19A8     		add	r0, sp, #100
 2241              	.LVL226:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2242              		.loc 1 1764 6 view .LVU711
 2243 011e FFF7FEFF 		bl	dn_lt
 2244              	.LVL227:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2245              		.loc 1 1764 5 view .LVU712
 2246 0122 78B9     		cbnz	r0, .L235
1765:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2247              		.loc 1 1765 4 is_stmt 1 view .LVU713
 2248              	.LVL228:
 2249              	.LBB251:
 2250              	.LBI251:
 415:src/display.c ****   if (res) *res++ = ch;
 2251              		.loc 1 415 14 view .LVU714
 2252              	.LBB252:
 416:src/display.c ****   else	set_dig(base, ch);
 2253              		.loc 1 416 3 view .LVU715
 416:src/display.c ****   else	set_dig(base, ch);
 2254              		.loc 1 416 12 view .LVU716
 416:src/display.c ****   else	set_dig(base, ch);
 2255              		.loc 1 416 19 is_stmt 0 view .LVU717
 2256 0124 6F23     		movs	r3, #111
 2257 0126 6370     		strb	r3, [r4, #1]
 2258              	.LBE252:
 2259              	.LBE251:
1771:src/display.c **** 
 2260              		.loc 1 1771 7 view .LVU718
 2261 0128 35B0     		add	sp, sp, #212
 2262              		.cfi_remember_state
 2263              		.cfi_def_cfa_offset 12
 2264              		@ sp needed
 2265 012a 30BD     		pop	{r4, r5, pc}
 2266              	.LVL229:
 2267              	.L234:
 2268              		.cfi_restore_state
1724:src/display.c **** 	    *res++ += '-';
 2269              		.loc 1 1724 4 is_stmt 1 view .LVU719
1724:src/display.c **** 	    *res++ += '-';
 2270              		.loc 1 1724 7 is_stmt 0 view .LVU720
 2271 012c E5B1     		cbz	r5, .L211
1725:src/display.c **** 	  else
 2272              		.loc 1 1725 6 is_stmt 1 view .LVU721
1725:src/display.c **** 	  else
 2273              		.loc 1 1725 10 is_stmt 0 view .LVU722
 2274 012e 2B46     		mov	r3, r5
ARM GAS  /tmp/ccdg5rgB.s 			page 114


 2275              	.LVL230:
1725:src/display.c **** 	  else
 2276              		.loc 1 1725 13 view .LVU723
 2277 0130 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2278              	.LVL231:
1725:src/display.c **** 	  else
 2279              		.loc 1 1725 13 view .LVU724
 2280 0134 2D32     		adds	r2, r2, #45
 2281 0136 2A70     		strb	r2, [r5]
1725:src/display.c **** 	  else
 2282              		.loc 1 1725 10 view .LVU725
 2283 0138 1D46     		mov	r5, r3
 2284              	.LVL232:
 2285              	.L212:
1728:src/display.c **** 	}
 2286              		.loc 1 1728 4 is_stmt 1 view .LVU726
 2287 013a 07A9     		add	r1, sp, #28
 2288 013c 0846     		mov	r0, r1
 2289 013e FFF7FEFF 		bl	dn_minus
 2290              	.LVL233:
 2291 0142 80E7     		b	.L210
 2292              	.LVL234:
 2293              	.L235:
 2294              	.LBB253:
 2295              	.LBB249:
 416:src/display.c ****   else	set_dig(base, ch);
 2296              		.loc 1 416 16 is_stmt 0 view .LVU727
 2297 0144 0134     		adds	r4, r4, #1
 2298              	.LVL235:
 2299              	.L223:
 416:src/display.c ****   else	set_dig(base, ch);
 2300              		.loc 1 416 16 view .LVU728
 2301              	.LBE249:
 2302              	.LBE253:
1766:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2303              		.loc 1 1766 9 is_stmt 1 view .LVU729
1766:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2304              		.loc 1 1766 15 is_stmt 0 view .LVU730
 2305 0146 19A8     		add	r0, sp, #100
 2306 0148 FFF7FEFF 		bl	dn_eq0
 2307              	.LVL236:
1766:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2308              		.loc 1 1766 12 view .LVU731
 2309 014c 0028     		cmp	r0, #0
 2310 014e 7FF469AF 		bne	.L205
1767:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2311              		.loc 1 1767 4 is_stmt 1 view .LVU732
1767:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2312              		.loc 1 1767 8 is_stmt 0 view .LVU733
 2313 0152 1B48     		ldr	r0, .L236+8
 2314 0154 19A9     		add	r1, sp, #100
 2315 0156 FFF7FEFF 		bl	dn_lt
 2316              	.LVL237:
1767:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2317              		.loc 1 1767 7 view .LVU734
 2318 015a 0028     		cmp	r0, #0
 2319 015c 7FF462AF 		bne	.L205
ARM GAS  /tmp/ccdg5rgB.s 			page 115


1768:src/display.c **** 	  }
 2320              		.loc 1 1768 6 is_stmt 1 view .LVU735
 2321              	.LVL238:
 2322              	.LBB254:
 2323              	.LBI254:
 415:src/display.c ****   if (res) *res++ = ch;
 2324              		.loc 1 415 14 view .LVU736
 2325              	.LBB255:
 416:src/display.c ****   else	set_dig(base, ch);
 2326              		.loc 1 416 3 view .LVU737
 416:src/display.c ****   else	set_dig(base, ch);
 2327              		.loc 1 416 6 is_stmt 0 view .LVU738
 2328 0160 24B3     		cbz	r4, .L225
 416:src/display.c ****   else	set_dig(base, ch);
 2329              		.loc 1 416 12 is_stmt 1 view .LVU739
 2330              	.LVL239:
 416:src/display.c ****   else	set_dig(base, ch);
 2331              		.loc 1 416 19 is_stmt 0 view .LVU740
 2332 0162 7523     		movs	r3, #117
 2333 0164 2370     		strb	r3, [r4]
 2334 0166 5DE7     		b	.L205
 2335              	.LVL240:
 2336              	.L211:
 416:src/display.c ****   else	set_dig(base, ch);
 2337              		.loc 1 416 19 view .LVU741
 2338              	.LBE255:
 2339              	.LBE254:
1727:src/display.c **** 	  dn_minus(&x, &x);
 2340              		.loc 1 1727 6 is_stmt 1 view .LVU742
 2341              	.LBB257:
 2342              	.LBI257:
 304:src/display.c **** {
 2343              		.loc 1 304 13 view .LVU743
 2344              	.LBB258:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2345              		.loc 1 306 3 view .LVU744
 306:src/display.c ****   set_dot(MANT_SIGN);
 2346              		.loc 1 306 25 is_stmt 0 view .LVU745
 2347 0168 164B     		ldr	r3, .L236+12
 2348 016a 2D22     		movs	r2, #45
 307:src/display.c **** }
 2349              		.loc 1 307 3 view .LVU746
 2350 016c 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2351              		.loc 1 306 25 view .LVU747
 2352 016e 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2353              		.loc 1 307 3 is_stmt 1 view .LVU748
 2354 0170 FFF7FEFF 		bl	set_dot
 2355              	.LVL241:
 308:src/display.c **** 
 2356              		.loc 1 308 1 is_stmt 0 view .LVU749
 2357 0174 E1E7     		b	.L212
 2358              	.LVL242:
 2359              	.L220:
 308:src/display.c **** 
 2360              		.loc 1 308 1 view .LVU750
ARM GAS  /tmp/ccdg5rgB.s 			page 116


 2361              	.LBE258:
 2362              	.LBE257:
 2363              	.LBB259:
 2364              	.LBB250:
 417:src/display.c ****   return res;
 2365              		.loc 1 417 8 is_stmt 1 view .LVU751
 2366 0176 0398     		ldr	r0, [sp, #12]
 2367              	.LVL243:
 417:src/display.c ****   return res;
 2368              		.loc 1 417 8 is_stmt 0 view .LVU752
 2369 0178 2221     		movs	r1, #34
 2370 017a FFF7FEFF 		bl	set_dig
 2371              	.LVL244:
 418:src/display.c **** }
 2372              		.loc 1 418 3 is_stmt 1 view .LVU753
 418:src/display.c **** }
 2373              		.loc 1 418 3 is_stmt 0 view .LVU754
 2374              	.LBE250:
 2375              	.LBE259:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2376              		.loc 1 1764 2 is_stmt 1 view .LVU755
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2377              		.loc 1 1764 6 is_stmt 0 view .LVU756
 2378 017e 0E49     		ldr	r1, .L236
 2379 0180 19A8     		add	r0, sp, #100
 2380 0182 FFF7FEFF 		bl	dn_lt
 2381              	.LVL245:
1764:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2382              		.loc 1 1764 5 view .LVU757
 2383 0186 0028     		cmp	r0, #0
 2384 0188 DDD1     		bne	.L223
 2385              	.LVL246:
 2386              	.L209:
 2387              	.LBB260:
 2388              	.LBB240:
 417:src/display.c ****   return res;
 2389              		.loc 1 417 8 is_stmt 1 view .LVU758
 2390 018a 6F21     		movs	r1, #111
 2391 018c 7A20     		movs	r0, #122
 2392 018e FFF7FEFF 		bl	set_dig
 2393              	.LVL247:
 2394              	.LBE240:
 2395              	.LBE260:
1717:src/display.c **** 	}
 2396              		.loc 1 1717 4 view .LVU759
 2397 0192 47E7     		b	.L205
 2398              	.LVL248:
 2399              	.L218:
 2400              	.LBB261:
 2401              	.LBB246:
 417:src/display.c ****   return res;
 2402              		.loc 1 417 8 view .LVU760
 2403 0194 2721     		movs	r1, #39
 2404 0196 0398     		ldr	r0, [sp, #12]
 2405              	.LVL249:
 417:src/display.c ****   return res;
 2406              		.loc 1 417 8 is_stmt 0 view .LVU761
ARM GAS  /tmp/ccdg5rgB.s 			page 117


 2407 0198 FFF7FEFF 		bl	set_dig
 2408              	.LVL250:
 417:src/display.c ****   return res;
 2409              		.loc 1 417 8 view .LVU762
 2410 019c 2146     		mov	r1, r4
 2411 019e 9EE7     		b	.L219
 2412              	.LVL251:
 2413              	.L216:
 417:src/display.c ****   return res;
 2414              		.loc 1 417 8 view .LVU763
 2415              	.LBE246:
 2416              	.LBE261:
 2417              	.LBB262:
 2418              	.LBB243:
 417:src/display.c ****   return res;
 2419              		.loc 1 417 8 is_stmt 1 view .LVU764
 2420 01a0 4021     		movs	r1, #64
 2421 01a2 0398     		ldr	r0, [sp, #12]
 2422              	.LVL252:
 417:src/display.c ****   return res;
 2423              		.loc 1 417 8 is_stmt 0 view .LVU765
 2424 01a4 FFF7FEFF 		bl	set_dig
 2425              	.LVL253:
 417:src/display.c ****   return res;
 2426              		.loc 1 417 8 view .LVU766
 2427 01a8 2146     		mov	r1, r4
 2428 01aa 86E7     		b	.L217
 2429              	.LVL254:
 2430              	.L225:
 417:src/display.c ****   return res;
 2431              		.loc 1 417 8 view .LVU767
 2432              	.LBE243:
 2433              	.LBE262:
 2434              	.LBB263:
 2435              	.LBB256:
 417:src/display.c ****   return res;
 2436              		.loc 1 417 8 is_stmt 1 view .LVU768
 2437 01ac 7521     		movs	r1, #117
 2438 01ae 7A20     		movs	r0, #122
 2439 01b0 FFF7FEFF 		bl	set_dig
 2440              	.LVL255:
 2441 01b4 36E7     		b	.L205
 2442              	.L237:
 2443 01b6 00BF     		.align	2
 2444              	.L236:
 2445 01b8 00000000 		.word	const_9000
 2446 01bc 00000000 		.word	.LANCHOR1
 2447 01c0 00000000 		.word	const_hms_threshold
 2448 01c4 00000000 		.word	LastDisplayedNumber
 2449              	.LBE256:
 2450              	.LBE263:
 2451              		.cfi_endproc
 2452              	.LFE22:
 2454              		.section	.text.set_x_fract,"ax",%progbits
 2455              		.align	1
 2456              		.p2align 2,,3
 2457              		.syntax unified
ARM GAS  /tmp/ccdg5rgB.s 			page 118


 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv4-sp-d16
 2462              	set_x_fract:
 2463              	.LVL256:
 2464              	.LFB23:
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2465              		.loc 1 1774 63 view -0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 216
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
1775:src/display.c **** 	char buf[32], *p = buf;
 2469              		.loc 1 1775 2 view .LVU770
1776:src/display.c **** 	int j;
 2470              		.loc 1 1776 2 view .LVU771
1777:src/display.c **** 
 2471              		.loc 1 1777 2 view .LVU772
1779:src/display.c **** 	  return 1;
 2472              		.loc 1 1779 2 view .LVU773
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2473              		.loc 1 1774 63 is_stmt 0 view .LVU774
 2474 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2475              		.cfi_def_cfa_offset 20
 2476              		.cfi_offset 4, -20
 2477              		.cfi_offset 5, -16
 2478              		.cfi_offset 6, -12
 2479              		.cfi_offset 7, -8
 2480              		.cfi_offset 14, -4
 2481 0002 0646     		mov	r6, r0
 2482 0004 B7B0     		sub	sp, sp, #220
 2483              		.cfi_def_cfa_offset 240
1779:src/display.c **** 	  return 1;
 2484              		.loc 1 1779 6 view .LVU775
 2485 0006 0830     		adds	r0, r0, #8
 2486              	.LVL257:
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2487              		.loc 1 1774 63 view .LVU776
 2488 0008 0C46     		mov	r4, r1
1779:src/display.c **** 	  return 1;
 2489              		.loc 1 1779 6 view .LVU777
 2490 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2491              	.LVL258:
1779:src/display.c **** 	  return 1;
 2492              		.loc 1 1779 5 view .LVU778
 2493 000e 18B1     		cbz	r0, .L269
 2494              	.LVL259:
 2495              	.L258:
1780:src/display.c **** 	dn_abs(&x, rgx);
 2496              		.loc 1 1780 11 view .LVU779
 2497 0010 0125     		movs	r5, #1
 2498              	.L238:
1837:src/display.c **** 
 2499              		.loc 1 1837 7 view .LVU780
 2500 0012 2846     		mov	r0, r5
 2501 0014 37B0     		add	sp, sp, #220
 2502              		.cfi_remember_state
 2503              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccdg5rgB.s 			page 119


 2504              		@ sp needed
 2505 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2506              	.LVL260:
 2507              	.L269:
 2508              		.cfi_restore_state
 2509              	.LBB272:
 2510              	.LBI272:
1774:src/display.c **** 	decNumber x, w, n, d, t;
 2511              		.loc 1 1774 18 is_stmt 1 view .LVU781
 2512              	.LBB273:
1781:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2513              		.loc 1 1781 2 view .LVU782
 2514 0018 3146     		mov	r1, r6
 2515 001a 0546     		mov	r5, r0
 2516 001c 09A8     		add	r0, sp, #36
 2517 001e FFF7FEFF 		bl	dn_abs
 2518              	.LVL261:
1782:src/display.c **** 	  return 0;
 2519              		.loc 1 1782 2 view .LVU783
1782:src/display.c **** 	  return 0;
 2520              		.loc 1 1782 6 is_stmt 0 view .LVU784
 2521 0022 5D49     		ldr	r1, .L274
 2522 0024 09A8     		add	r0, sp, #36
 2523 0026 FFF7FEFF 		bl	dn_lt
 2524              	.LVL262:
1782:src/display.c **** 	  return 0;
 2525              		.loc 1 1782 5 view .LVU785
 2526 002a 0028     		cmp	r0, #0
 2527 002c F1D0     		beq	.L238
1784:src/display.c **** 	  return 0;
 2528              		.loc 1 1784 2 is_stmt 1 view .LVU786
1784:src/display.c **** 	  return 0;
 2529              		.loc 1 1784 6 is_stmt 0 view .LVU787
 2530 002e 5B49     		ldr	r1, .L274+4
 2531 0030 09A8     		add	r0, sp, #36
 2532 0032 FFF7FEFF 		bl	dn_lt
 2533              	.LVL263:
1784:src/display.c **** 	  return 0;
 2534              		.loc 1 1784 5 view .LVU788
 2535 0036 0746     		mov	r7, r0
 2536 0038 0028     		cmp	r0, #0
 2537 003a EAD1     		bne	.L238
1786:src/display.c **** 	  if (res != NULL)
 2538              		.loc 1 1786 2 is_stmt 1 view .LVU789
1786:src/display.c **** 	  if (res != NULL)
 2539              		.loc 1 1786 5 is_stmt 0 view .LVU790
 2540 003c 96F90830 		ldrsb	r3, [r6, #8]
 2541 0040 002B     		cmp	r3, #0
 2542 0042 C0F28680 		blt	.L270
 2543              	.LVL264:
 2544              	.L243:
1792:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2545              		.loc 1 1792 2 is_stmt 1 view .LVU791
 2546 0046 09A9     		add	r1, sp, #36
 2547 0048 12A8     		add	r0, sp, #72
 2548 004a FFF7FEFF 		bl	decNumberFrac
 2549              	.LVL265:
ARM GAS  /tmp/ccdg5rgB.s 			page 120


1793:src/display.c **** 
 2550              		.loc 1 1793 2 view .LVU792
 2551 004e 12AA     		add	r2, sp, #72
 2552 0050 24A9     		add	r1, sp, #144
 2553 0052 1BA8     		add	r0, sp, #108
 2554 0054 FFF7FEFF 		bl	decNumber2Fraction
 2555              	.LVL266:
1795:src/display.c **** 	dn_compare(&t, &t, &w);
 2556              		.loc 1 1795 2 view .LVU793
 2557 0058 24AA     		add	r2, sp, #144
 2558 005a 1BA9     		add	r1, sp, #108
 2559 005c 2DA8     		add	r0, sp, #180
 2560 005e FFF7FEFF 		bl	dn_divide
 2561              	.LVL267:
1796:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2562              		.loc 1 1796 2 view .LVU794
 2563 0062 2DA9     		add	r1, sp, #180
 2564 0064 12AA     		add	r2, sp, #72
 2565 0066 0846     		mov	r0, r1
 2566 0068 FFF7FEFF 		bl	dn_compare
 2567              	.LVL268:
1797:src/display.c **** 
 2568              		.loc 1 1797 2 view .LVU795
 2569 006c 09A9     		add	r1, sp, #36
 2570 006e 12A8     		add	r0, sp, #72
 2571 0070 FFF7FEFF 		bl	decNumberTrunc
 2572              	.LVL269:
1799:src/display.c **** 	  dn_inc(&w);
 2573              		.loc 1 1799 2 view .LVU796
1799:src/display.c **** 	  dn_inc(&w);
 2574              		.loc 1 1799 6 is_stmt 0 view .LVU797
 2575 0074 24A9     		add	r1, sp, #144
 2576 0076 1BA8     		add	r0, sp, #108
 2577 0078 FFF7FEFF 		bl	dn_eq
 2578              	.LVL270:
1799:src/display.c **** 	  dn_inc(&w);
 2579              		.loc 1 1799 5 view .LVU798
 2580 007c 0028     		cmp	r0, #0
 2581 007e 70D1     		bne	.L271
 2582              	.L245:
1804:src/display.c **** 	  if (!dn_eq0(&w)) {
 2583              		.loc 1 1804 2 is_stmt 1 view .LVU799
1804:src/display.c **** 	  if (!dn_eq0(&w)) {
 2584              		.loc 1 1804 6 is_stmt 0 view .LVU800
 2585 0080 474B     		ldr	r3, .L274+8
 2586 0082 1B68     		ldr	r3, [r3]
 2587 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1804:src/display.c **** 	  if (!dn_eq0(&w)) {
 2588              		.loc 1 1804 5 view .LVU801
 2589 0088 DB06     		lsls	r3, r3, #27
 2590 008a 55D4     		bmi	.L246
1805:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2591              		.loc 1 1805 4 is_stmt 1 view .LVU802
1805:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2592              		.loc 1 1805 9 is_stmt 0 view .LVU803
 2593 008c 12A8     		add	r0, sp, #72
 2594 008e FFF7FEFF 		bl	dn_eq0
ARM GAS  /tmp/ccdg5rgB.s 			page 121


 2595              	.LVL271:
1805:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2596              		.loc 1 1805 7 view .LVU804
 2597 0092 0028     		cmp	r0, #0
 2598 0094 6CD0     		beq	.L272
1776:src/display.c **** 	int j;
 2599              		.loc 1 1776 17 view .LVU805
 2600 0096 01AE     		add	r6, sp, #4
 2601              	.LVL272:
1776:src/display.c **** 	int j;
 2602              		.loc 1 1776 17 view .LVU806
 2603 0098 3546     		mov	r5, r6
 2604              	.L247:
 2605              	.LVL273:
1813:src/display.c **** 	*p++ = '/';
 2606              		.loc 1 1813 2 is_stmt 1 view .LVU807
1813:src/display.c **** 	*p++ = '/';
 2607              		.loc 1 1813 17 is_stmt 0 view .LVU808
 2608 009a 1BA8     		add	r0, sp, #108
 2609 009c FFF7FEFF 		bl	dn_to_int
 2610              	.LVL274:
 2611 00a0 0146     		mov	r1, r0
1813:src/display.c **** 	*p++ = '/';
 2612              		.loc 1 1813 6 view .LVU809
 2613 00a2 2846     		mov	r0, r5
 2614 00a4 FFF7FEFF 		bl	num_arg
 2615              	.LVL275:
1814:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2616              		.loc 1 1814 2 is_stmt 1 view .LVU810
1814:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2617              		.loc 1 1814 4 is_stmt 0 view .LVU811
 2618 00a8 0546     		mov	r5, r0
 2619              	.LVL276:
1814:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2620              		.loc 1 1814 7 view .LVU812
 2621 00aa 2F23     		movs	r3, #47
 2622 00ac 05F8013B 		strb	r3, [r5], #1
 2623              	.LVL277:
1815:src/display.c **** 	*p = '\0';
 2624              		.loc 1 1815 2 is_stmt 1 view .LVU813
1815:src/display.c **** 	*p = '\0';
 2625              		.loc 1 1815 17 is_stmt 0 view .LVU814
 2626 00b0 24A8     		add	r0, sp, #144
 2627 00b2 FFF7FEFF 		bl	dn_to_int
 2628              	.LVL278:
 2629 00b6 0146     		mov	r1, r0
1815:src/display.c **** 	*p = '\0';
 2630              		.loc 1 1815 6 view .LVU815
 2631 00b8 2846     		mov	r0, r5
 2632 00ba FFF7FEFF 		bl	num_arg
 2633              	.LVL279:
1816:src/display.c **** 	if ((p - 12) > buf) {
 2634              		.loc 1 1816 2 is_stmt 1 view .LVU816
1816:src/display.c **** 	if ((p - 12) > buf) {
 2635              		.loc 1 1816 5 is_stmt 0 view .LVU817
 2636 00be 0546     		mov	r5, r0
 2637 00c0 0023     		movs	r3, #0
ARM GAS  /tmp/ccdg5rgB.s 			page 122


 2638 00c2 05F80C39 		strb	r3, [r5], #-12
1817:src/display.c **** 	  p -= 12;
 2639              		.loc 1 1817 2 is_stmt 1 view .LVU818
1817:src/display.c **** 	  p -= 12;
 2640              		.loc 1 1817 5 is_stmt 0 view .LVU819
 2641 00c6 B542     		cmp	r5, r6
 2642 00c8 32D8     		bhi	.L248
 2643 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2644              	.LVL280:
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2645              		.loc 1 1821 12 is_stmt 1 view .LVU820
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2646              		.loc 1 1821 2 is_stmt 0 view .LVU821
 2647 00ce 51B1     		cbz	r1, .L250
1820:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2648              		.loc 1 1820 11 view .LVU822
 2649 00d0 3546     		mov	r5, r6
 2650              	.LVL281:
 2651              	.L253:
1822:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2652              		.loc 1 1822 4 is_stmt 1 view .LVU823
 2653              	.LBB274:
 2654              	.LBI274:
 415:src/display.c ****   if (res) *res++ = ch;
 2655              		.loc 1 415 14 view .LVU824
 2656              	.LBB275:
 416:src/display.c ****   else	set_dig(base, ch);
 2657              		.loc 1 416 3 view .LVU825
 416:src/display.c ****   else	set_dig(base, ch);
 2658              		.loc 1 416 12 view .LVU826
 416:src/display.c ****   else	set_dig(base, ch);
 2659              		.loc 1 416 16 is_stmt 0 view .LVU827
 2660 00d2 2346     		mov	r3, r4
 2661              	.LVL282:
 416:src/display.c ****   else	set_dig(base, ch);
 2662              		.loc 1 416 6 view .LVU828
 2663 00d4 34B3     		cbz	r4, .L251
 2664              	.LVL283:
 416:src/display.c ****   else	set_dig(base, ch);
 2665              		.loc 1 416 19 view .LVU829
 2666 00d6 03F8011B 		strb	r1, [r3], #1
 2667              	.LVL284:
 416:src/display.c ****   else	set_dig(base, ch);
 2668              		.loc 1 416 16 view .LVU830
 2669 00da 1C46     		mov	r4, r3
 2670              	.LVL285:
 2671              	.L252:
 418:src/display.c **** }
 2672              		.loc 1 418 3 is_stmt 1 view .LVU831
 418:src/display.c **** }
 2673              		.loc 1 418 3 is_stmt 0 view .LVU832
 2674              	.LBE275:
 2675              	.LBE274:
1823:src/display.c **** 	}
 2676              		.loc 1 1823 4 is_stmt 1 view .LVU833
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2677              		.loc 1 1821 12 is_stmt 0 view .LVU834
ARM GAS  /tmp/ccdg5rgB.s 			page 123


 2678 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2679              	.LVL286:
1823:src/display.c **** 	}
 2680              		.loc 1 1823 6 view .LVU835
 2681 00e0 0937     		adds	r7, r7, #9
 2682              	.LVL287:
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2683              		.loc 1 1821 24 is_stmt 1 view .LVU836
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2684              		.loc 1 1821 12 view .LVU837
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2685              		.loc 1 1821 2 is_stmt 0 view .LVU838
 2686 00e2 0029     		cmp	r1, #0
 2687 00e4 F5D1     		bne	.L253
 2688              	.LVL288:
 2689              	.L250:
1826:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2690              		.loc 1 1826 2 is_stmt 1 view .LVU839
1826:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2691              		.loc 1 1826 6 is_stmt 0 view .LVU840
 2692 00e6 2DA8     		add	r0, sp, #180
 2693 00e8 FFF7FEFF 		bl	dn_eq0
 2694              	.LVL289:
1826:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2695              		.loc 1 1826 5 view .LVU841
 2696 00ec F0B9     		cbnz	r0, .L261
1828:src/display.c **** 	  p = (char *)S7_fract_LT;
 2697              		.loc 1 1828 7 is_stmt 1 view .LVU842
1828:src/display.c **** 	  p = (char *)S7_fract_LT;
 2698              		.loc 1 1828 10 is_stmt 0 view .LVU843
 2699 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1831:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2700              		.loc 1 1831 6 view .LVU844
 2701 00f2 2C4D     		ldr	r5, .L274+12
 2702 00f4 2C4B     		ldr	r3, .L274+16
 2703 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2704 00fa 38BF     		it	cc
 2705 00fc 1D46     		movcc	r5, r3
 2706              	.L254:
 2707              	.LVL290:
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2708              		.loc 1 1832 26 is_stmt 1 view .LVU845
 2709              	.LBB278:
 2710              	.LBB276:
 416:src/display.c ****   else	set_dig(base, ch);
 2711              		.loc 1 416 16 is_stmt 0 view .LVU846
 2712 00fe 6C26     		movs	r6, #108
 2713 0100 2021     		movs	r1, #32
 2714 0102 08E0     		b	.L257
 2715              	.LVL291:
 2716              	.L273:
 416:src/display.c ****   else	set_dig(base, ch);
 2717              		.loc 1 416 16 view .LVU847
 2718              	.LBE276:
 2719              	.LBE278:
 2720              	.LBB279:
 2721              	.LBB280:
ARM GAS  /tmp/ccdg5rgB.s 			page 124


 416:src/display.c ****   else	set_dig(base, ch);
 2722              		.loc 1 416 19 view .LVU848
 2723 0104 03F8011B 		strb	r1, [r3], #1
 2724              	.LVL292:
 416:src/display.c ****   else	set_dig(base, ch);
 2725              		.loc 1 416 16 view .LVU849
 2726 0108 1C46     		mov	r4, r3
 2727              	.LVL293:
 2728              	.L256:
 418:src/display.c **** }
 2729              		.loc 1 418 3 is_stmt 1 view .LVU850
 418:src/display.c **** }
 2730              		.loc 1 418 3 is_stmt 0 view .LVU851
 2731              	.LBE280:
 2732              	.LBE279:
1834:src/display.c **** 	}
 2733              		.loc 1 1834 4 is_stmt 1 view .LVU852
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2734              		.loc 1 1832 26 is_stmt 0 view .LVU853
 2735 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2736              	.LVL294:
1834:src/display.c **** 	}
 2737              		.loc 1 1834 6 view .LVU854
 2738 010e 0736     		adds	r6, r6, #7
 2739              	.LVL295:
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2740              		.loc 1 1832 38 is_stmt 1 view .LVU855
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2741              		.loc 1 1832 26 view .LVU856
1832:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2742              		.loc 1 1832 2 is_stmt 0 view .LVU857
 2743 0110 0029     		cmp	r1, #0
 2744 0112 3FF47DAF 		beq	.L258
 2745              	.LVL296:
 2746              	.L257:
1833:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2747              		.loc 1 1833 4 is_stmt 1 view .LVU858
 2748              	.LBB282:
 2749              	.LBI279:
 415:src/display.c ****   if (res) *res++ = ch;
 2750              		.loc 1 415 14 view .LVU859
 2751              	.LBB281:
 416:src/display.c ****   else	set_dig(base, ch);
 2752              		.loc 1 416 3 view .LVU860
 416:src/display.c ****   else	set_dig(base, ch);
 2753              		.loc 1 416 12 view .LVU861
 416:src/display.c ****   else	set_dig(base, ch);
 2754              		.loc 1 416 16 is_stmt 0 view .LVU862
 2755 0116 2346     		mov	r3, r4
 2756              	.LVL297:
 416:src/display.c ****   else	set_dig(base, ch);
 2757              		.loc 1 416 6 view .LVU863
 2758 0118 002C     		cmp	r4, #0
 2759 011a F3D1     		bne	.L273
 2760              	.LVL298:
 417:src/display.c ****   return res;
 2761              		.loc 1 417 8 is_stmt 1 view .LVU864
ARM GAS  /tmp/ccdg5rgB.s 			page 125


 2762 011c 3046     		mov	r0, r6
 2763 011e FFF7FEFF 		bl	set_dig
 2764              	.LVL299:
 417:src/display.c ****   return res;
 2765              		.loc 1 417 8 is_stmt 0 view .LVU865
 2766 0122 F2E7     		b	.L256
 2767              	.LVL300:
 2768              	.L251:
 417:src/display.c ****   return res;
 2769              		.loc 1 417 8 view .LVU866
 2770              	.LBE281:
 2771              	.LBE282:
 2772              	.LBB283:
 2773              	.LBB277:
 417:src/display.c ****   return res;
 2774              		.loc 1 417 8 is_stmt 1 view .LVU867
 2775 0124 3846     		mov	r0, r7
 2776 0126 FFF7FEFF 		bl	set_dig
 2777              	.LVL301:
 417:src/display.c ****   return res;
 2778              		.loc 1 417 8 is_stmt 0 view .LVU868
 2779 012a D7E7     		b	.L252
 2780              	.LVL302:
 2781              	.L261:
 417:src/display.c ****   return res;
 2782              		.loc 1 417 8 view .LVU869
 2783              	.LBE277:
 2784              	.LBE283:
1827:src/display.c **** 	else if (decNumberIsNegative(&t))
 2785              		.loc 1 1827 6 view .LVU870
 2786 012c 1F4D     		ldr	r5, .L274+20
 2787 012e E6E7     		b	.L254
 2788              	.LVL303:
 2789              	.L248:
1818:src/display.c **** 	  *p = '<';
 2790              		.loc 1 1818 4 is_stmt 1 view .LVU871
1819:src/display.c **** 	} else	p = buf;
 2791              		.loc 1 1819 4 view .LVU872
1819:src/display.c **** 	} else	p = buf;
 2792              		.loc 1 1819 7 is_stmt 0 view .LVU873
 2793 0130 3C21     		movs	r1, #60
 2794 0132 00F80C1C 		strb	r1, [r0, #-12]
 2795              	.LVL304:
1821:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2796              		.loc 1 1821 12 is_stmt 1 view .LVU874
 2797 0136 CCE7     		b	.L253
 2798              	.LVL305:
 2799              	.L246:
1810:src/display.c **** 	  dn_add(&n, &n, &x);
 2800              		.loc 1 1810 4 view .LVU875
 2801 0138 12A9     		add	r1, sp, #72
 2802 013a 24AA     		add	r2, sp, #144
 2803 013c 09A8     		add	r0, sp, #36
 2804 013e FFF7FEFF 		bl	dn_multiply
 2805              	.LVL306:
1811:src/display.c **** 	}
 2806              		.loc 1 1811 4 view .LVU876
ARM GAS  /tmp/ccdg5rgB.s 			page 126


 2807 0142 1BA9     		add	r1, sp, #108
 2808 0144 09AA     		add	r2, sp, #36
 2809 0146 0846     		mov	r0, r1
1776:src/display.c **** 	int j;
 2810              		.loc 1 1776 17 is_stmt 0 view .LVU877
 2811 0148 01AE     		add	r6, sp, #4
 2812              	.LVL307:
1811:src/display.c **** 	}
 2813              		.loc 1 1811 4 view .LVU878
 2814 014a FFF7FEFF 		bl	dn_add
 2815              	.LVL308:
1776:src/display.c **** 	int j;
 2816              		.loc 1 1776 17 view .LVU879
 2817 014e 3546     		mov	r5, r6
 2818 0150 A3E7     		b	.L247
 2819              	.LVL309:
 2820              	.L270:
1787:src/display.c **** 	    *res++ += '-';
 2821              		.loc 1 1787 4 is_stmt 1 view .LVU880
1787:src/display.c **** 	    *res++ += '-';
 2822              		.loc 1 1787 7 is_stmt 0 view .LVU881
 2823 0152 D4B1     		cbz	r4, .L244
1788:src/display.c **** 	  else
 2824              		.loc 1 1788 6 is_stmt 1 view .LVU882
1788:src/display.c **** 	  else
 2825              		.loc 1 1788 10 is_stmt 0 view .LVU883
 2826 0154 2346     		mov	r3, r4
 2827              	.LVL310:
1788:src/display.c **** 	  else
 2828              		.loc 1 1788 13 view .LVU884
 2829 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2830              	.LVL311:
1788:src/display.c **** 	  else
 2831              		.loc 1 1788 13 view .LVU885
 2832 015a 2D32     		adds	r2, r2, #45
 2833 015c 2270     		strb	r2, [r4]
1788:src/display.c **** 	  else
 2834              		.loc 1 1788 10 view .LVU886
 2835 015e 1C46     		mov	r4, r3
 2836              	.LVL312:
1788:src/display.c **** 	  else
 2837              		.loc 1 1788 10 view .LVU887
 2838 0160 71E7     		b	.L243
 2839              	.LVL313:
 2840              	.L271:
1800:src/display.c **** 	  decNumberZero(&n);
 2841              		.loc 1 1800 4 is_stmt 1 view .LVU888
 2842 0162 12A8     		add	r0, sp, #72
 2843 0164 FFF7FEFF 		bl	dn_inc
 2844              	.LVL314:
1801:src/display.c **** 	}
 2845              		.loc 1 1801 4 view .LVU889
 2846 0168 1BA8     		add	r0, sp, #108
 2847 016a FFF7FEFF 		bl	decNumberZero
 2848              	.LVL315:
 2849 016e 87E7     		b	.L245
 2850              	.L272:
ARM GAS  /tmp/ccdg5rgB.s 			page 127


1806:src/display.c **** 	    *p++ = ' ';
 2851              		.loc 1 1806 6 view .LVU890
1806:src/display.c **** 	    *p++ = ' ';
 2852              		.loc 1 1806 21 is_stmt 0 view .LVU891
 2853 0170 12A8     		add	r0, sp, #72
 2854 0172 FFF7FEFF 		bl	dn_to_int
 2855              	.LVL316:
1806:src/display.c **** 	    *p++ = ' ';
 2856              		.loc 1 1806 10 view .LVU892
 2857 0176 01AE     		add	r6, sp, #4
 2858              	.LVL317:
1806:src/display.c **** 	    *p++ = ' ';
 2859              		.loc 1 1806 21 view .LVU893
 2860 0178 0146     		mov	r1, r0
1806:src/display.c **** 	    *p++ = ' ';
 2861              		.loc 1 1806 10 view .LVU894
 2862 017a 3046     		mov	r0, r6
 2863 017c FFF7FEFF 		bl	num_arg
 2864              	.LVL318:
1807:src/display.c **** 	  }
 2865              		.loc 1 1807 6 is_stmt 1 view .LVU895
1807:src/display.c **** 	  }
 2866              		.loc 1 1807 8 is_stmt 0 view .LVU896
 2867 0180 0546     		mov	r5, r0
 2868              	.LVL319:
1807:src/display.c **** 	  }
 2869              		.loc 1 1807 11 view .LVU897
 2870 0182 2023     		movs	r3, #32
 2871 0184 05F8013B 		strb	r3, [r5], #1
 2872              	.LVL320:
1807:src/display.c **** 	  }
 2873              		.loc 1 1807 11 view .LVU898
 2874 0188 87E7     		b	.L247
 2875              	.LVL321:
 2876              	.L244:
1790:src/display.c **** 	}
 2877              		.loc 1 1790 6 is_stmt 1 view .LVU899
 2878              	.LBB284:
 2879              	.LBI284:
 304:src/display.c **** {
 2880              		.loc 1 304 13 view .LVU900
 2881              	.LBB285:
 306:src/display.c ****   set_dot(MANT_SIGN);
 2882              		.loc 1 306 3 view .LVU901
 306:src/display.c ****   set_dot(MANT_SIGN);
 2883              		.loc 1 306 25 is_stmt 0 view .LVU902
 2884 018a 094B     		ldr	r3, .L274+24
 2885 018c 2D22     		movs	r2, #45
 307:src/display.c **** }
 2886              		.loc 1 307 3 view .LVU903
 2887 018e 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 2888              		.loc 1 306 25 view .LVU904
 2889 0190 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 2890              		.loc 1 307 3 is_stmt 1 view .LVU905
 2891 0192 FFF7FEFF 		bl	set_dot
ARM GAS  /tmp/ccdg5rgB.s 			page 128


 2892              	.LVL322:
 308:src/display.c **** 
 2893              		.loc 1 308 1 is_stmt 0 view .LVU906
 2894 0196 56E7     		b	.L243
 2895              	.L275:
 2896              		.align	2
 2897              	.L274:
 2898 0198 00000000 		.word	const_100000
 2899 019c 00000000 		.word	const_0_0001
 2900 01a0 00000000 		.word	main_ram
 2901 01a4 00000000 		.word	.LANCHOR8
 2902 01a8 00000000 		.word	.LANCHOR10
 2903 01ac 00000000 		.word	.LANCHOR9
 2904 01b0 00000000 		.word	LastDisplayedNumber
 2905              	.LBE285:
 2906              	.LBE284:
 2907              	.LBE273:
 2908              	.LBE272:
 2909              		.cfi_endproc
 2910              	.LFE23:
 2912              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2913              		.align	2
 2914              	.LC1:
 2915 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2915      36376F39 
 2915      44313233 
 2915      34356800 
 2916              		.section	.text.carry_overflow,"ax",%progbits
 2917              		.align	1
 2918              		.p2align 2,,3
 2919              		.syntax unified
 2920              		.thumb
 2921              		.thumb_func
 2922              		.fpu fpv4-sp-d16
 2924              	carry_overflow:
 2925              	.LFB15:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2926              		.loc 1 570 38 is_stmt 1 view -0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 0, uses_anonymous_args = 0
 571:src/display.c ****       int c;
 2930              		.loc 1 571 7 view .LVU908
 2931              	.LVL323:
 572:src/display.c ****       unsigned int b;
 2932              		.loc 1 572 7 view .LVU909
 573:src/display.c **** 
 2933              		.loc 1 573 7 view .LVU910
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2934              		.loc 1 576 7 view .LVU911
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2935              		.loc 1 570 38 is_stmt 0 view .LVU912
 2936 0000 10B5     		push	{r4, lr}
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 4, -8
 2939              		.cfi_offset 14, -4
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
ARM GAS  /tmp/ccdg5rgB.s 			page 129


 2940              		.loc 1 576 21 view .LVU913
 2941 0002 1B4B     		ldr	r3, .L289
 2942 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2943 0006 023B     		subs	r3, r3, #2
 2944 0008 DBB2     		uxtb	r3, r3
 2945 000a 032B     		cmp	r3, #3
 2946 000c 14D8     		bhi	.L277
 2947 000e 194A     		ldr	r2, .L289+4
 2948 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2949              	.LVL324:
 585:src/display.c **** 	SET_EXP_SIGN;
 2950              		.loc 1 585 7 is_stmt 1 view .LVU914
 585:src/display.c **** 	SET_EXP_SIGN;
 2951              		.loc 1 585 18 is_stmt 0 view .LVU915
 2952 0014 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2953              		.loc 1 585 10 view .LVU916
 2954 0018 042B     		cmp	r3, #4
 2955 001a 17D9     		bls	.L286
 2956              	.L279:
 587:src/display.c ****       set_dig(base, c);
 2957              		.loc 1 587 7 is_stmt 1 view .LVU917
 2958              	.LVL325:
 588:src/display.c **** 
 2959              		.loc 1 588 7 view .LVU918
 587:src/display.c ****       set_dig(base, c);
 2960              		.loc 1 587 28 is_stmt 0 view .LVU919
 2961 001c 164B     		ldr	r3, .L289+8
 2962 001e 1C44     		add	r4, r4, r3
 2963              	.LVL326:
 588:src/display.c **** 
 2964              		.loc 1 588 7 view .LVU920
 2965 0020 6C20     		movs	r0, #108
 2966 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2967 0026 FFF7FEFF 		bl	set_dig
 2968              	.LVL327:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2969              		.loc 1 591 7 is_stmt 1 view .LVU921
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2970              		.loc 1 591 11 is_stmt 0 view .LVU922
 2971 002a FFF7FEFF 		bl	get_carry
 2972              	.LVL328:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2973              		.loc 1 591 10 view .LVU923
 2974 002e D0B9     		cbnz	r0, .L287
 2975              	.L280:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2976              		.loc 1 593 7 is_stmt 1 view .LVU924
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2977              		.loc 1 593 11 is_stmt 0 view .LVU925
 2978 0030 FFF7FEFF 		bl	get_overflow
 2979              	.LVL329:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2980              		.loc 1 593 10 view .LVU926
 2981 0034 88B9     		cbnz	r0, .L288
 595:src/display.c **** 
 2982              		.loc 1 595 5 view .LVU927
ARM GAS  /tmp/ccdg5rgB.s 			page 130


 2983 0036 10BD     		pop	{r4, pc}
 2984              	.LVL330:
 2985              	.L277:
 581:src/display.c ****       }
 2986              		.loc 1 581 16 is_stmt 1 view .LVU928
 581:src/display.c ****       }
 2987              		.loc 1 581 26 is_stmt 0 view .LVU929
 2988 0038 104B     		ldr	r3, .L289+12
 2989 003a 1B68     		ldr	r3, [r3]
 2990 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2991 0040 2409     		lsrs	r4, r4, #4
 581:src/display.c ****       }
 2992              		.loc 1 581 35 view .LVU930
 2993 0042 0134     		adds	r4, r4, #1
 2994              	.LVL331:
 581:src/display.c ****       }
 2995              		.loc 1 581 39 is_stmt 1 view .LVU931
 585:src/display.c **** 	SET_EXP_SIGN;
 2996              		.loc 1 585 7 view .LVU932
 585:src/display.c **** 	SET_EXP_SIGN;
 2997              		.loc 1 585 18 is_stmt 0 view .LVU933
 2998 0044 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2999              		.loc 1 585 10 view .LVU934
 3000 0048 042B     		cmp	r3, #4
 3001 004a E7D8     		bhi	.L279
 3002              	.L286:
 586:src/display.c ****       c = "B34567o9D12345h"[b-2];
 3003              		.loc 1 586 2 is_stmt 1 view .LVU935
 3004              	.LBB292:
 3005              	.LBI292:
 316:src/display.c **** {
 3006              		.loc 1 316 13 view .LVU936
 3007              	.LBB293:
 318:src/display.c ****   set_dot(EXP_SIGN);
 3008              		.loc 1 318 3 view .LVU937
 318:src/display.c ****   set_dot(EXP_SIGN);
 3009              		.loc 1 318 27 is_stmt 0 view .LVU938
 3010 004c 0C4B     		ldr	r3, .L289+16
 3011 004e 2D22     		movs	r2, #45
 319:src/display.c **** }
 3012              		.loc 1 319 3 view .LVU939
 3013 0050 8220     		movs	r0, #130
 318:src/display.c ****   set_dot(EXP_SIGN);
 3014              		.loc 1 318 27 view .LVU940
 3015 0052 1A70     		strb	r2, [r3]
 319:src/display.c **** }
 3016              		.loc 1 319 3 is_stmt 1 view .LVU941
 3017 0054 FFF7FEFF 		bl	set_dot
 3018              	.LVL332:
 320:src/display.c **** 
 3019              		.loc 1 320 1 is_stmt 0 view .LVU942
 3020 0058 E0E7     		b	.L279
 3021              	.LVL333:
 3022              	.L288:
 320:src/display.c **** 
 3023              		.loc 1 320 1 view .LVU943
ARM GAS  /tmp/ccdg5rgB.s 			page 131


 3024              	.LBE293:
 3025              	.LBE292:
 3026              	.LBB294:
 3027              	.LBI294:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 3028              		.loc 1 570 17 is_stmt 1 view .LVU944
 3029              	.LBB295:
 594:src/display.c ****     }
 3030              		.loc 1 594 2 view .LVU945
 3031              	.LBE295:
 3032              	.LBE294:
 595:src/display.c **** 
 3033              		.loc 1 595 5 is_stmt 0 view .LVU946
 3034 005a BDE81040 		pop	{r4, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 4
 3038              		.cfi_def_cfa_offset 0
 3039              	.LVL334:
 3040              	.LBB297:
 3041              	.LBB296:
 594:src/display.c ****     }
 3042              		.loc 1 594 2 view .LVU947
 3043 005e 6F21     		movs	r1, #111
 3044 0060 7A20     		movs	r0, #122
 3045 0062 FFF7FEBF 		b	set_dig
 3046              	.LVL335:
 3047              	.L287:
 3048              		.cfi_restore_state
 594:src/display.c ****     }
 3049              		.loc 1 594 2 view .LVU948
 3050              	.LBE296:
 3051              	.LBE297:
 592:src/display.c ****       if (get_overflow())
 3052              		.loc 1 592 2 is_stmt 1 view .LVU949
 3053 0066 6321     		movs	r1, #99
 3054 0068 7320     		movs	r0, #115
 3055 006a FFF7FEFF 		bl	set_dig
 3056              	.LVL336:
 3057 006e DFE7     		b	.L280
 3058              	.L290:
 3059              		.align	2
 3060              	.L289:
 3061 0070 00000000 		.word	StateWhileOn
 3062 0074 00000000 		.word	.LANCHOR11
 3063 0078 00000000 		.word	.LC1
 3064 007c 00000000 		.word	main_ram
 3065 0080 00000000 		.word	LastDisplayedExponent
 3066              		.cfi_endproc
 3067              	.LFE15:
 3069              		.global	__aeabi_uldivmod
 3070              		.section	.text.set_int_x,"ax",%progbits
 3071              		.align	1
 3072              		.p2align 2,,3
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
ARM GAS  /tmp/ccdg5rgB.s 			page 132


 3076              		.fpu fpv4-sp-d16
 3078              	set_int_x:
 3079              	.LVL337:
 3080              	.LFB18:
1487:src/display.c **** 	const int ws = word_size();
 3081              		.loc 1 1487 67 view -0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 88
 3084              		@ frame_needed = 0, uses_anonymous_args = 0
1487:src/display.c **** 	const int ws = word_size();
 3085              		.loc 1 1487 67 is_stmt 0 view .LVU951
 3086 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3087              		.cfi_def_cfa_offset 36
 3088              		.cfi_offset 4, -36
 3089              		.cfi_offset 5, -32
 3090              		.cfi_offset 6, -28
 3091              		.cfi_offset 7, -24
 3092              		.cfi_offset 8, -20
 3093              		.cfi_offset 9, -16
 3094              		.cfi_offset 10, -12
 3095              		.cfi_offset 11, -8
 3096              		.cfi_offset 14, -4
 3097 0004 97B0     		sub	sp, sp, #92
 3098              		.cfi_def_cfa_offset 128
1487:src/display.c **** 	const int ws = word_size();
 3099              		.loc 1 1487 67 view .LVU952
 3100 0006 1546     		mov	r5, r2
 3101 0008 0646     		mov	r6, r0
 3102 000a 0F46     		mov	r7, r1
1488:src/display.c **** 	unsigned int b;
 3103              		.loc 1 1488 2 is_stmt 1 view .LVU953
1488:src/display.c **** 	unsigned int b;
 3104              		.loc 1 1488 17 is_stmt 0 view .LVU954
 3105 000c FFF7FEFF 		bl	word_size
 3106              	.LVL338:
1488:src/display.c **** 	unsigned int b;
 3107              		.loc 1 1488 17 view .LVU955
 3108 0010 CD4B     		ldr	r3, .L383
 3109 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3110 0014 023B     		subs	r3, r3, #2
 3111 0016 DBB2     		uxtb	r3, r3
1494:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3112              		.loc 1 1494 6 view .LVU956
 3113 0018 0022     		movs	r2, #0
 3114 001a 032B     		cmp	r3, #3
1488:src/display.c **** 	unsigned int b;
 3115              		.loc 1 1488 17 view .LVU957
 3116 001c 8346     		mov	fp, r0
 3117              	.LVL339:
1489:src/display.c **** 	long long int vs = value;
 3118              		.loc 1 1489 2 is_stmt 1 view .LVU958
1490:src/display.c **** 	unsigned long long int v;
 3119              		.loc 1 1490 2 view .LVU959
1491:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 3120              		.loc 1 1491 2 view .LVU960
1492:src/display.c **** 	int i, j, k;
 3121              		.loc 1 1492 2 view .LVU961
ARM GAS  /tmp/ccdg5rgB.s 			page 133


1493:src/display.c **** 	int sign = 0;
 3122              		.loc 1 1493 2 view .LVU962
1494:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3123              		.loc 1 1494 2 view .LVU963
1494:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 3124              		.loc 1 1494 6 is_stmt 0 view .LVU964
 3125 001e 0492     		str	r2, [sp, #16]
1495:src/display.c **** 
 3126              		.loc 1 1495 2 is_stmt 1 view .LVU965
 3127              	.LVL340:
1497:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 3128              		.loc 1 1497 2 view .LVU966
 3129 0020 00F24181 		bhi	.L292
 3130 0024 C94A     		ldr	r2, .L383+4
 3131 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 3132              	.LVL341:
1505:src/display.c **** 	  IntMaxWindow = 0;
 3133              		.loc 1 1505 2 view .LVU967
1505:src/display.c **** 	  IntMaxWindow = 0;
 3134              		.loc 1 1505 5 is_stmt 0 view .LVU968
 3135 002a 002D     		cmp	r5, #0
 3136 002c 00F04181 		beq	.L374
 3137              	.LVL342:
 3138              	.L294:
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3139              		.loc 1 1510 2 is_stmt 1 view .LVU969
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3140              		.loc 1 1510 24 is_stmt 0 view .LVU970
 3141 0030 0AF1FF33 		add	r3, r10, #-1
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3142              		.loc 1 1510 30 view .LVU971
 3143 0034 47F67574 		movw	r4, #32629
 3144 0038 1C41     		asrs	r4, r4, r3
1510:src/display.c **** 	  v = extract_value(value, &sign);
 3145              		.loc 1 1510 5 view .LVU972
 3146 003a 14F00104 		ands	r4, r4, #1
 3147 003e 40F0F380 		bne	.L375
1527:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3148              		.loc 1 1527 4 is_stmt 1 view .LVU973
1527:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 3149              		.loc 1 1527 7 is_stmt 0 view .LVU974
 3150 0042 BBF13F0F 		cmp	fp, #63
 3151 0046 17DC     		bgt	.L305
 3152              	.LBB298:
1528:src/display.c **** 	    vs &= mask;
 3153              		.loc 1 1528 6 is_stmt 1 view .LVU975
1528:src/display.c **** 	    vs &= mask;
 3154              		.loc 1 1528 38 is_stmt 0 view .LVU976
 3155 0048 0121     		movs	r1, #1
 3156 004a ABF1200C 		sub	ip, fp, #32
 3157 004e CBF12000 		rsb	r0, fp, #32
 3158 0052 21FA00F0 		lsr	r0, r1, r0
 3159 0056 01FA0CF3 		lsl	r3, r1, ip
 3160 005a 01FA0BF2 		lsl	r2, r1, fp
 3161 005e 0343     		orrs	r3, r3, r0
 3162              	.LVL343:
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
ARM GAS  /tmp/ccdg5rgB.s 			page 134


 3163              		.loc 1 1529 6 is_stmt 1 view .LVU977
1528:src/display.c **** 	    vs &= mask;
 3164              		.loc 1 1528 26 is_stmt 0 view .LVU978
 3165 0060 12F1FF30 		adds	r0, r2, #-1
 3166 0064 43F1FF31 		adc	r1, r3, #-1
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3167              		.loc 1 1529 9 view .LVU979
 3168 0068 3040     		ands	r0, r0, r6
 3169 006a 3940     		ands	r1, r1, r7
 3170              	.LVL344:
1530:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1530 9 view .LVU980
 3172 006c BAF10A0F 		cmp	r10, #10
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3173              		.loc 1 1529 9 view .LVU981
 3174 0070 0646     		mov	r6, r0
 3175              	.LVL345:
1529:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 3176              		.loc 1 1529 9 view .LVU982
 3177 0072 0F46     		mov	r7, r1
1530:src/display.c **** 	      vs |= ~mask;
 3178              		.loc 1 1530 6 is_stmt 1 view .LVU983
1530:src/display.c **** 	      vs |= ~mask;
 3179              		.loc 1 1530 9 is_stmt 0 view .LVU984
 3180 0074 00F03D81 		beq	.L376
 3181              	.LVL346:
 3182              	.L305:
1530:src/display.c **** 	      vs |= ~mask;
 3183              		.loc 1 1530 9 view .LVU985
 3184              	.LBE298:
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3185              		.loc 1 1534 4 is_stmt 1 view .LVU986
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3186              		.loc 1 1534 8 is_stmt 0 view .LVU987
 3187 0078 B54B     		ldr	r3, .L383+8
 3188 007a 1B68     		ldr	r3, [r3]
 3189 007c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3190              		.loc 1 1534 7 view .LVU988
 3191 0080 9A07     		lsls	r2, r3, #30
 3192 0082 41D5     		bpl	.L336
1537:src/display.c **** 	    v = (unsigned long long int)vs;
 3193              		.loc 1 1537 11 is_stmt 1 view .LVU989
 3194              	.LBB299:
1545:src/display.c **** 	    const unsigned int b1 = b >> 1;
 3195              		.loc 1 1545 6 view .LVU990
1546:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3196              		.loc 1 1546 6 view .LVU991
1546:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 3197              		.loc 1 1546 25 is_stmt 0 view .LVU992
 3198 0084 4FEA5A02 		lsr	r2, r10, #1
 3199              	.LVL347:
1547:src/display.c **** 	    v = (unsigned long long int)vs;
 3200              		.loc 1 1547 6 is_stmt 1 view .LVU993
1547:src/display.c **** 	    v = (unsigned long long int)vs;
 3201              		.loc 1 1547 43 is_stmt 0 view .LVU994
 3202 0088 12F00A0F 		tst	r2, #10
ARM GAS  /tmp/ccdg5rgB.s 			page 135


 3203 008c 14BF     		ite	ne
 3204 008e 0123     		movne	r3, #1
 3205 0090 0023     		moveq	r3, #0
1547:src/display.c **** 	    v = (unsigned long long int)vs;
 3206              		.loc 1 1547 70 view .LVU995
 3207 0092 12F00C0F 		tst	r2, #12
 3208 0096 18BF     		it	ne
 3209 0098 43F00203 		orrne	r3, r3, #2
 3210              	.LVL348:
 3211              	.L311:
1548:src/display.c **** 
 3212              		.loc 1 1548 6 is_stmt 1 discriminator 4 view .LVU996
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3213              		.loc 1 1550 14 is_stmt 0 discriminator 4 view .LVU997
 3214 009c 0BEB0308 		add	r8, fp, r3
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3215              		.loc 1 1550 27 discriminator 4 view .LVU998
 3216 00a0 0133     		adds	r3, r3, #1
 3217              	.LVL349:
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3218              		.loc 1 1550 21 discriminator 4 view .LVU999
 3219 00a2 B8FBF3F8 		udiv	r8, r8, r3
1551:src/display.c **** 	      const int r = v % b;
 3220              		.loc 1 1551 6 discriminator 4 view .LVU1000
 3221 00a6 B8F1000F 		cmp	r8, #0
1548:src/display.c **** 
 3222              		.loc 1 1548 8 discriminator 4 view .LVU1001
 3223 00aa 3046     		mov	r0, r6
 3224 00ac 3946     		mov	r1, r7
 3225              	.LVL350:
1550:src/display.c **** 	    for (i=0; i<n; i++) {
 3226              		.loc 1 1550 6 is_stmt 1 discriminator 4 view .LVU1002
1551:src/display.c **** 	      const int r = v % b;
 3227              		.loc 1 1551 6 discriminator 4 view .LVU1003
1551:src/display.c **** 	      const int r = v % b;
 3228              		.loc 1 1551 16 discriminator 4 view .LVU1004
1551:src/display.c **** 	      const int r = v % b;
 3229              		.loc 1 1551 6 is_stmt 0 discriminator 4 view .LVU1005
 3230 00ae 40F38381 		ble	.L337
 3231 00b2 05AC     		add	r4, sp, #20
 3232 00b4 DFF8A4B2 		ldr	fp, .L383+20
 3233              	.LVL351:
1551:src/display.c **** 	      const int r = v % b;
 3234              		.loc 1 1551 6 discriminator 4 view .LVU1006
 3235 00b8 08EB0406 		add	r6, r8, r4
 3236              	.LVL352:
 3237              	.L312:
 3238              	.LBB300:
1552:src/display.c **** 	      v /= b;
 3239              		.loc 1 1552 8 is_stmt 1 discriminator 3 view .LVU1007
 3240 00bc 5246     		mov	r2, r10
 3241 00be 0023     		movs	r3, #0
 3242 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 3243              	.LVL353:
1553:src/display.c **** 	      buf[i] = DIGITS[r];
 3244              		.loc 1 1553 8 discriminator 3 view .LVU1008
1554:src/display.c **** 	    }
ARM GAS  /tmp/ccdg5rgB.s 			page 136


 3245              		.loc 1 1554 15 is_stmt 0 discriminator 3 view .LVU1009
 3246 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 3247 00c8 04F8013B 		strb	r3, [r4], #1
 3248              	.LVL354:
1554:src/display.c **** 	    }
 3249              		.loc 1 1554 8 is_stmt 1 discriminator 3 view .LVU1010
 3250              	.LBE300:
1551:src/display.c **** 	      const int r = v % b;
 3251              		.loc 1 1551 21 discriminator 3 view .LVU1011
1551:src/display.c **** 	      const int r = v % b;
 3252              		.loc 1 1551 16 discriminator 3 view .LVU1012
1551:src/display.c **** 	      const int r = v % b;
 3253              		.loc 1 1551 6 is_stmt 0 discriminator 3 view .LVU1013
 3254 00cc B442     		cmp	r4, r6
 3255 00ce F5D1     		bne	.L312
 3256 00d0 08F1FF31 		add	r1, r8, #-1
 3257              	.LVL355:
1551:src/display.c **** 	      const int r = v % b;
 3258              		.loc 1 1551 6 view .LVU1014
 3259 00d4 4446     		mov	r4, r8
 3260              	.LVL356:
 3261              	.L304:
1551:src/display.c **** 	      const int r = v % b;
 3262              		.loc 1 1551 6 view .LVU1015
 3263              	.LBE299:
1564:src/display.c **** 	if (res) {
 3264              		.loc 1 1564 2 is_stmt 1 view .LVU1016
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3265              		.loc 1 1565 2 view .LVU1017
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3266              		.loc 1 1565 5 is_stmt 0 view .LVU1018
 3267 00d6 002D     		cmp	r5, #0
 3268 00d8 3ED0     		beq	.L313
 3269              	.LVL357:
 3270              	.L377:
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3271              		.loc 1 1566 4 is_stmt 1 view .LVU1019
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3272              		.loc 1 1566 7 is_stmt 0 view .LVU1020
 3273 00da 049B     		ldr	r3, [sp, #16]
 3274 00dc 13B1     		cbz	r3, .L314
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3275              		.loc 1 1566 14 is_stmt 1 discriminator 1 view .LVU1021
 3276              	.LVL358:
1566:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3277              		.loc 1 1566 21 is_stmt 0 discriminator 1 view .LVU1022
 3278 00de 2D23     		movs	r3, #45
 3279 00e0 05F8013B 		strb	r3, [r5], #1
 3280              	.LVL359:
 3281              	.L314:
1567:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3282              		.loc 1 1567 4 is_stmt 1 view .LVU1023
1567:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3283              		.loc 1 1567 7 is_stmt 0 view .LVU1024
 3284 00e4 0D2C     		cmp	r4, #13
 3285 00e6 00F3E980 		bgt	.L315
1574:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/ccdg5rgB.s 			page 137


 3286              		.loc 1 1574 12 is_stmt 1 view .LVU1025
 3287              	.LVL360:
1574:src/display.c **** 	      *res++ = buf[i];
 3288              		.loc 1 1574 12 is_stmt 0 view .LVU1026
 3289 00ea 481C     		adds	r0, r1, #1
 3290 00ec 09D0     		beq	.L291
 3291 00ee 0131     		adds	r1, r1, #1
 3292 00f0 05AA     		add	r2, sp, #20
 3293 00f2 013D     		subs	r5, r5, #1
 3294 00f4 1144     		add	r1, r1, r2
 3295              	.LVL361:
 3296              	.L318:
1575:src/display.c **** 	  }
 3297              		.loc 1 1575 8 is_stmt 1 view .LVU1027
1575:src/display.c **** 	  }
 3298              		.loc 1 1575 15 is_stmt 0 view .LVU1028
 3299 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3300              	.LVL362:
1575:src/display.c **** 	  }
 3301              		.loc 1 1575 15 view .LVU1029
 3302 00fa 05F8013F 		strb	r3, [r5, #1]!
 3303              	.LVL363:
1574:src/display.c **** 	      *res++ = buf[i];
 3304              		.loc 1 1574 12 is_stmt 1 view .LVU1030
1574:src/display.c **** 	      *res++ = buf[i];
 3305              		.loc 1 1574 12 is_stmt 0 view .LVU1031
 3306 00fe 9142     		cmp	r1, r2
 3307 0100 F9D1     		bne	.L318
 3308              	.LVL364:
 3309              	.L291:
1622:src/display.c **** 
 3310              		.loc 1 1622 7 view .LVU1032
 3311 0102 17B0     		add	sp, sp, #92
 3312              		.cfi_remember_state
 3313              		.cfi_def_cfa_offset 36
 3314              		@ sp needed
 3315 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3316              	.LVL365:
 3317              	.L336:
 3318              		.cfi_restore_state
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3319              		.loc 1 1534 25 discriminator 1 view .LVU1033
 3320 0108 56EA0703 		orrs	r3, r6, r7
 3321 010c 00F0C480 		beq	.L299
1537:src/display.c **** 	    v = (unsigned long long int)vs;
 3322              		.loc 1 1537 11 is_stmt 1 view .LVU1034
1538:src/display.c **** 	    for (i=0; v != 0; i++) {
 3323              		.loc 1 1538 6 view .LVU1035
 3324 0110 DFF848B2 		ldr	fp, .L383+20
 3325              	.LVL366:
1538:src/display.c **** 	    for (i=0; v != 0; i++) {
 3326              		.loc 1 1538 6 is_stmt 0 view .LVU1036
 3327 0114 CDF800A0 		str	r10, [sp]
 3328 0118 0023     		movs	r3, #0
1538:src/display.c **** 	    for (i=0; v != 0; i++) {
 3329              		.loc 1 1538 8 view .LVU1037
 3330 011a B046     		mov	r8, r6
ARM GAS  /tmp/ccdg5rgB.s 			page 138


 3331 011c D946     		mov	r9, fp
 3332 011e 3E46     		mov	r6, r7
1539:src/display.c **** 	      const int r = v % b;
 3333              		.loc 1 1539 6 is_stmt 1 view .LVU1038
 3334              	.LVL367:
1539:src/display.c **** 	      const int r = v % b;
 3335              		.loc 1 1539 16 view .LVU1039
 3336 0120 9B46     		mov	fp, r3
 3337 0122 05AF     		add	r7, sp, #20
 3338              	.LVL368:
 3339              	.L310:
 3340              	.LBB301:
1540:src/display.c **** 	      v /= b;
 3341              		.loc 1 1540 8 discriminator 3 view .LVU1040
 3342 0124 4046     		mov	r0, r8
 3343 0126 3146     		mov	r1, r6
 3344 0128 5246     		mov	r2, r10
 3345 012a 5B46     		mov	r3, fp
 3346 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3347              	.LVL369:
 3348 0130 3346     		mov	r3, r6
 3349 0132 9446     		mov	ip, r2
 3350              	.LVL370:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3351              		.loc 1 1541 8 discriminator 3 view .LVU1041
 3352              	.LBE301:
1539:src/display.c **** 	      const int r = v % b;
 3353              		.loc 1 1539 6 is_stmt 0 discriminator 3 view .LVU1042
 3354 0134 5B45     		cmp	r3, fp
 3355 0136 4246     		mov	r2, r8
 3356              	.LVL371:
 3357              	.LBB302:
1542:src/display.c **** 	    }
 3358              		.loc 1 1542 15 discriminator 3 view .LVU1043
 3359 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3360              	.LVL372:
1542:src/display.c **** 	    }
 3361              		.loc 1 1542 15 discriminator 3 view .LVU1044
 3362 013c 07F801CB 		strb	ip, [r7], #1
 3363              	.LBE302:
1539:src/display.c **** 	      const int r = v % b;
 3364              		.loc 1 1539 6 discriminator 3 view .LVU1045
 3365 0140 08BF     		it	eq
 3366 0142 5245     		cmpeq	r2, r10
 3367              	.LBB303:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3368              		.loc 1 1541 10 discriminator 3 view .LVU1046
 3369 0144 0E46     		mov	r6, r1
 3370              	.LVL373:
1542:src/display.c **** 	    }
 3371              		.loc 1 1542 8 is_stmt 1 discriminator 3 view .LVU1047
 3372              	.LBE303:
1539:src/display.c **** 	      const int r = v % b;
 3373              		.loc 1 1539 24 discriminator 3 view .LVU1048
 3374              	.LBB304:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3375              		.loc 1 1541 10 is_stmt 0 discriminator 3 view .LVU1049
ARM GAS  /tmp/ccdg5rgB.s 			page 139


 3376 0146 8046     		mov	r8, r0
 3377 0148 2146     		mov	r1, r4
 3378              	.LVL374:
1541:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1541 10 discriminator 3 view .LVU1050
 3380              	.LBE304:
1539:src/display.c **** 	      const int r = v % b;
 3381              		.loc 1 1539 25 discriminator 3 view .LVU1051
 3382 014a 04F10104 		add	r4, r4, #1
 3383              	.LVL375:
1539:src/display.c **** 	      const int r = v % b;
 3384              		.loc 1 1539 16 is_stmt 1 discriminator 3 view .LVU1052
1539:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1539 6 is_stmt 0 discriminator 3 view .LVU1053
 3386 014e E9D2     		bcs	.L310
 3387 0150 DDF800A0 		ldr	r10, [sp]
 3388              	.LVL376:
1564:src/display.c **** 	if (res) {
 3389              		.loc 1 1564 2 is_stmt 1 view .LVU1054
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3390              		.loc 1 1565 2 view .LVU1055
1565:src/display.c **** 	  if (sign) *res++ = '-';
 3391              		.loc 1 1565 5 is_stmt 0 view .LVU1056
 3392 0154 002D     		cmp	r5, #0
 3393 0156 C0D1     		bne	.L377
 3394              	.LVL377:
 3395              	.L313:
 3396              	.LBB305:
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3397              		.loc 1 1593 4 is_stmt 1 view .LVU1057
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3398              		.loc 1 1593 33 is_stmt 0 view .LVU1058
 3399 0158 BAF1020F 		cmp	r10, #2
 3400 015c 00F0F080 		beq	.L378
 3401              	.LVL378:
1594:src/display.c **** 	    : b == 16 ? 2 : 3;
 3402              		.loc 1 1594 4 is_stmt 1 view .LVU1059
1594:src/display.c **** 	    : b == 16 ? 2 : 3;
 3403              		.loc 1 1594 30 is_stmt 0 view .LVU1060
 3404 0160 BAF1040F 		cmp	r10, #4
 3405 0164 00F01F81 		beq	.L379
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3406              		.loc 1 1593 33 view .LVU1061
 3407 0168 BAF1100F 		cmp	r10, #16
 3408 016c 0CBF     		ite	eq
 3409 016e 4FF0020A 		moveq	r10, #2
 3410 0172 4FF0030A 		movne	r10, #3
 3411 0176 0C26     		movs	r6, #12
 3412              	.LVL379:
 3413              	.L320:
1596:src/display.c **** #endif
 3414              		.loc 1 1596 4 is_stmt 1 view .LVU1062
 3415 0178 0091     		str	r1, [sp]
 3416 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3417              	.LVL380:
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3418              		.loc 1 1598 4 view .LVU1063
ARM GAS  /tmp/ccdg5rgB.s 			page 140


1599:src/display.c **** 	    State2.window = 0;
 3419              		.loc 1 1599 26 is_stmt 0 view .LVU1064
 3420 017e 724B     		ldr	r3, .L383
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3421              		.loc 1 1598 17 view .LVU1065
 3422 0180 744A     		ldr	r2, .L383+12
1599:src/display.c **** 	    State2.window = 0;
 3423              		.loc 1 1599 26 view .LVU1066
 3424 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3425              		.loc 1 1598 27 view .LVU1067
 3426 0184 0099     		ldr	r1, [sp]
 3427 0186 91FBF6F1 		sdiv	r1, r1, r6
1599:src/display.c **** 	    State2.window = 0;
 3428              		.loc 1 1599 8 view .LVU1068
 3429 018a C3F3C207 		ubfx	r7, r3, #3, #3
1599:src/display.c **** 	    State2.window = 0;
 3430              		.loc 1 1599 7 view .LVU1069
 3431 018e B942     		cmp	r1, r7
1598:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3432              		.loc 1 1598 17 view .LVU1070
 3433 0190 1160     		str	r1, [r2]
1599:src/display.c **** 	    State2.window = 0;
 3434              		.loc 1 1599 4 is_stmt 1 view .LVU1071
1599:src/display.c **** 	    State2.window = 0;
 3435              		.loc 1 1599 7 is_stmt 0 view .LVU1072
 3436 0192 C0F2F680 		blt	.L322
 3437 0196 06FB07F7 		mul	r7, r6, r7
 3438              	.L323:
1601:src/display.c **** 
 3439              		.loc 1 1601 4 is_stmt 1 view .LVU1073
1601:src/display.c **** 
 3440              		.loc 1 1601 11 is_stmt 0 view .LVU1074
 3441 019a 16AB     		add	r3, sp, #88
 3442 019c 16AA     		add	r2, sp, #88
 3443 019e 1C44     		add	r4, r4, r3
 3444              	.LVL381:
1601:src/display.c **** 
 3445              		.loc 1 1601 11 view .LVU1075
 3446 01a0 D519     		adds	r5, r2, r7
 3447 01a2 0023     		movs	r3, #0
 3448 01a4 453D     		subs	r5, r5, #69
 3449 01a6 04F8443C 		strb	r3, [r4, #-68]
1603:src/display.c **** 	  for (k = 0; k < 12; k++)
 3450              		.loc 1 1603 4 is_stmt 1 view .LVU1076
 3451              	.LVL382:
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3452              		.loc 1 1604 4 view .LVU1077
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3453              		.loc 1 1604 16 view .LVU1078
1601:src/display.c **** 
 3454              		.loc 1 1601 11 is_stmt 0 view .LVU1079
 3455 01aa 2A46     		mov	r2, r5
 3456              	.LVL383:
 3457              	.L325:
1605:src/display.c **** 	      break;
 3458              		.loc 1 1605 6 is_stmt 1 view .LVU1080
ARM GAS  /tmp/ccdg5rgB.s 			page 141


1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3459              		.loc 1 1604 24 view .LVU1081
1605:src/display.c **** 	      break;
 3460              		.loc 1 1605 9 is_stmt 0 view .LVU1082
 3461 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3462 01b0 0029     		cmp	r1, #0
 3463 01b2 00F0EC80 		beq	.L324
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3464              		.loc 1 1604 25 discriminator 2 view .LVU1083
 3465 01b6 0133     		adds	r3, r3, #1
 3466              	.LVL384:
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3467              		.loc 1 1604 16 is_stmt 1 discriminator 2 view .LVU1084
1604:src/display.c **** 	    if (buf[j + k] == '\0')
 3468              		.loc 1 1604 4 is_stmt 0 discriminator 2 view .LVU1085
 3469 01b8 0C2B     		cmp	r3, #12
 3470 01ba F7D1     		bne	.L325
1607:src/display.c **** 	    int ch = buf[j++];
 3471              		.loc 1 1607 4 view .LVU1086
 3472 01bc 4FF00B08 		mov	r8, #11
 3473              	.LVL385:
 3474              	.L326:
1607:src/display.c **** 	    int ch = buf[j++];
 3475              		.loc 1 1607 4 view .LVU1087
 3476 01c0 0137     		adds	r7, r7, #1
 3477 01c2 4744     		add	r7, r7, r8
 3478 01c4 4446     		mov	r4, r8
 3479 01c6 4FF0630B 		mov	fp, #99
 3480 01ca 09E0     		b	.L331
 3481              	.LVL386:
 3482              	.L380:
 3483              	.LBB306:
1613:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3484              		.loc 1 1613 8 view .LVU1088
 3485 01cc 624B     		ldr	r3, .L383+16
 3486 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3487              	.LVL387:
 3488              	.LBB307:
 3489              	.LBI307:
 375:src/display.c ****   if (sep == SEP_NONE)
 3490              		.loc 1 375 14 is_stmt 1 view .LVU1089
 3491              	.LBB308:
 376:src/display.c ****     return res;
 3492              		.loc 1 376 3 view .LVU1090
 376:src/display.c ****     return res;
 3493              		.loc 1 376 6 is_stmt 0 view .LVU1091
 3494 01d0 09B1     		cbz	r1, .L329
 376:src/display.c ****     return res;
 3495              		.loc 1 376 6 view .LVU1092
 3496 01d2 FFF7FEFF 		bl	set_separator.part.0
 3497              	.LVL388:
 3498              	.L329:
 376:src/display.c ****     return res;
 3499              		.loc 1 376 6 view .LVU1093
 3500              	.LBE308:
 3501              	.LBE307:
1614:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 142


 3502              		.loc 1 1614 6 is_stmt 1 discriminator 2 view .LVU1094
 3503              	.LBE306:
1607:src/display.c **** 	    int ch = buf[j++];
 3504              		.loc 1 1607 4 is_stmt 0 discriminator 2 view .LVU1095
 3505 01d6 013C     		subs	r4, r4, #1
1607:src/display.c **** 	    int ch = buf[j++];
 3506              		.loc 1 1607 4 discriminator 2 view .LVU1096
 3507 01d8 621C     		adds	r2, r4, #1
 3508              	.LBB311:
1614:src/display.c **** 	  }
 3509              		.loc 1 1614 10 discriminator 2 view .LVU1097
 3510 01da ABF1090B 		sub	fp, fp, #9
 3511              	.LVL389:
1614:src/display.c **** 	  }
 3512              		.loc 1 1614 10 discriminator 2 view .LVU1098
 3513              	.LBE311:
1607:src/display.c **** 	    int ch = buf[j++];
 3514              		.loc 1 1607 24 is_stmt 1 discriminator 2 view .LVU1099
1607:src/display.c **** 	    int ch = buf[j++];
 3515              		.loc 1 1607 14 discriminator 2 view .LVU1100
1607:src/display.c **** 	    int ch = buf[j++];
 3516              		.loc 1 1607 4 is_stmt 0 discriminator 2 view .LVU1101
 3517 01de 16D0     		beq	.L335
 3518              	.LVL390:
 3519              	.L331:
 3520              	.LBB312:
1608:src/display.c **** 	    if (i >= shift)
 3521              		.loc 1 1608 6 is_stmt 1 view .LVU1102
1610:src/display.c **** 	    set_dig(dig, ch);
 3522              		.loc 1 1610 8 view .LVU1103
1608:src/display.c **** 	    if (i >= shift)
 3523              		.loc 1 1608 10 is_stmt 0 view .LVU1104
 3524 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1609:src/display.c **** 	      ch -= 030;
 3525              		.loc 1 1609 9 view .LVU1105
 3526 01e4 A8EB0402 		sub	r2, r8, r4
 3527 01e8 B242     		cmp	r2, r6
 3528 01ea A7EB0409 		sub	r9, r7, r4
 3529              	.LVL391:
1609:src/display.c **** 	      ch -= 030;
 3530              		.loc 1 1609 6 is_stmt 1 view .LVU1106
1611:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3531              		.loc 1 1611 6 is_stmt 0 view .LVU1107
 3532 01ee 5846     		mov	r0, fp
1610:src/display.c **** 	    set_dig(dig, ch);
 3533              		.loc 1 1610 11 view .LVU1108
 3534 01f0 A8BF     		it	ge
 3535 01f2 1839     		subge	r1, r1, #24
 3536              	.LVL392:
1611:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3537              		.loc 1 1611 6 is_stmt 1 view .LVU1109
 3538 01f4 FFF7FEFF 		bl	set_dig
 3539              	.LVL393:
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3540              		.loc 1 1612 6 view .LVU1110
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3541              		.loc 1 1612 13 is_stmt 0 view .LVU1111
ARM GAS  /tmp/ccdg5rgB.s 			page 143


 3542 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3543 01fc 0AFB1393 		mls	r3, r10, r3, r9
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3544              		.loc 1 1612 9 view .LVU1112
 3545 0200 002B     		cmp	r3, #0
 3546 0202 E8D1     		bne	.L329
1613:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3547              		.loc 1 1613 8 is_stmt 1 discriminator 1 view .LVU1113
 3548              	.LBB310:
 3549              	.LBB309:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3550              		.loc 1 378 3 discriminator 1 view .LVU1114
 3551 0204 5846     		mov	r0, fp
 3552              	.LBE309:
 3553              	.LBE310:
1612:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3554              		.loc 1 1612 27 is_stmt 0 discriminator 1 view .LVU1115
 3555 0206 002C     		cmp	r4, #0
 3556 0208 E0D1     		bne	.L380
1614:src/display.c **** 	  }
 3557              		.loc 1 1614 6 is_stmt 1 view .LVU1116
1614:src/display.c **** 	  }
 3558              		.loc 1 1614 10 is_stmt 0 view .LVU1117
 3559 020a ABF1090B 		sub	fp, fp, #9
 3560              	.LVL394:
1614:src/display.c **** 	  }
 3561              		.loc 1 1614 10 view .LVU1118
 3562              	.LBE312:
1607:src/display.c **** 	    int ch = buf[j++];
 3563              		.loc 1 1607 24 is_stmt 1 view .LVU1119
1607:src/display.c **** 	    int ch = buf[j++];
 3564              		.loc 1 1607 14 view .LVU1120
 3565              	.L335:
1616:src/display.c **** 	    if (dig >= 0)
 3566              		.loc 1 1616 4 view .LVU1121
1616:src/display.c **** 	    if (dig >= 0)
 3567              		.loc 1 1616 7 is_stmt 0 view .LVU1122
 3568 020e 049B     		ldr	r3, [sp, #16]
 3569 0210 002B     		cmp	r3, #0
 3570 0212 3FF476AF 		beq	.L291
1617:src/display.c **** 	      set_dig(dig, '-');
 3571              		.loc 1 1617 6 is_stmt 1 view .LVU1123
1617:src/display.c **** 	      set_dig(dig, '-');
 3572              		.loc 1 1617 9 is_stmt 0 view .LVU1124
 3573 0216 BBF1000F 		cmp	fp, #0
 3574 021a C0F2C680 		blt	.L381
 3575              	.LVL395:
 3576              	.L334:
1618:src/display.c **** 	    else	SET_MANT_SIGN;
 3577              		.loc 1 1618 8 is_stmt 1 view .LVU1125
 3578 021e 5846     		mov	r0, fp
 3579 0220 2D21     		movs	r1, #45
 3580 0222 FFF7FEFF 		bl	set_dig
 3581              	.LVL396:
 3582 0226 6CE7     		b	.L291
 3583              	.LVL397:
 3584              	.L375:
ARM GAS  /tmp/ccdg5rgB.s 			page 144


1618:src/display.c **** 	    else	SET_MANT_SIGN;
 3585              		.loc 1 1618 8 is_stmt 0 view .LVU1126
 3586              	.LBE305:
1511:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3587              		.loc 1 1511 4 is_stmt 1 view .LVU1127
1511:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3588              		.loc 1 1511 8 is_stmt 0 view .LVU1128
 3589 0228 04AA     		add	r2, sp, #16
 3590 022a 3046     		mov	r0, r6
 3591 022c 3946     		mov	r1, r7
 3592 022e FFF7FEFF 		bl	extract_value
 3593              	.LVL398:
 3594 0232 8046     		mov	r8, r0
 3595 0234 8946     		mov	r9, r1
 3596              	.LVL399:
1512:src/display.c **** 	    v = value;
 3597              		.loc 1 1512 4 is_stmt 1 view .LVU1129
1512:src/display.c **** 	    v = value;
 3598              		.loc 1 1512 8 is_stmt 0 view .LVU1130
 3599 0236 FFF7FEFF 		bl	int_mode
 3600              	.LVL400:
1512:src/display.c **** 	    v = value;
 3601              		.loc 1 1512 7 view .LVU1131
 3602 023a 38BB     		cbnz	r0, .L296
1512:src/display.c **** 	    v = value;
 3603              		.loc 1 1512 33 discriminator 1 view .LVU1132
 3604 023c 049B     		ldr	r3, [sp, #16]
 3605 023e 012B     		cmp	r3, #1
 3606 0240 24D1     		bne	.L296
1512:src/display.c **** 	    v = value;
 3607              		.loc 1 1512 46 discriminator 2 view .LVU1133
 3608 0242 58EA0903 		orrs	r3, r8, r9
 3609 0246 00F08B80 		beq	.L382
 3610              	.LVL401:
 3611              	.L297:
1512:src/display.c **** 	    v = value;
 3612              		.loc 1 1512 46 discriminator 2 view .LVU1134
 3613 024a DFF810B1 		ldr	fp, .L383+20
 3614              	.LVL402:
1487:src/display.c **** 	const int ws = word_size();
 3615              		.loc 1 1487 67 discriminator 3 view .LVU1135
 3616 024e 0395     		str	r5, [sp, #12]
 3617 0250 05AB     		add	r3, sp, #20
 3618 0252 5D46     		mov	r5, fp
 3619              	.LVL403:
1487:src/display.c **** 	const int ws = word_size();
 3620              		.loc 1 1487 67 discriminator 3 view .LVU1136
 3621 0254 5646     		mov	r6, r10
 3622 0256 0027     		movs	r7, #0
 3623 0258 0024     		movs	r4, #0
 3624 025a 9B46     		mov	fp, r3
 3625              	.LVL404:
 3626              	.L303:
 3627              	.LBB315:
1521:src/display.c **** 	      v /= b;
 3628              		.loc 1 1521 8 is_stmt 1 discriminator 3 view .LVU1137
 3629 025c 4046     		mov	r0, r8
ARM GAS  /tmp/ccdg5rgB.s 			page 145


 3630 025e 4946     		mov	r1, r9
 3631 0260 3246     		mov	r2, r6
 3632 0262 3B46     		mov	r3, r7
 3633 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3634              	.LVL405:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3635              		.loc 1 1522 8 discriminator 3 view .LVU1138
 3636 0268 CDE90089 		strd	r8, [sp]
1523:src/display.c **** 	    }
 3637              		.loc 1 1523 15 is_stmt 0 discriminator 3 view .LVU1139
 3638 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3639 026e 0BF8013B 		strb	r3, [fp], #1
 3640              	.LBE315:
1520:src/display.c **** 	      const int r = v % b;
 3641              		.loc 1 1520 6 discriminator 3 view .LVU1140
 3642 0272 DDE90023 		ldrd	r2, [sp]
 3643              	.LVL406:
1520:src/display.c **** 	      const int r = v % b;
 3644              		.loc 1 1520 6 discriminator 3 view .LVU1141
 3645 0276 BB42     		cmp	r3, r7
 3646 0278 08BF     		it	eq
 3647 027a B242     		cmpeq	r2, r6
 3648              	.LBB316:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3649              		.loc 1 1522 10 discriminator 3 view .LVU1142
 3650 027c 8946     		mov	r9, r1
 3651              	.LVL407:
1523:src/display.c **** 	    }
 3652              		.loc 1 1523 8 is_stmt 1 discriminator 3 view .LVU1143
 3653              	.LBE316:
1520:src/display.c **** 	      const int r = v % b;
 3654              		.loc 1 1520 24 discriminator 3 view .LVU1144
 3655              	.LBB317:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3656              		.loc 1 1522 10 is_stmt 0 discriminator 3 view .LVU1145
 3657 027e 8046     		mov	r8, r0
 3658 0280 2146     		mov	r1, r4
 3659              	.LVL408:
1522:src/display.c **** 	      buf[i] = DIGITS[r];
 3660              		.loc 1 1522 10 discriminator 3 view .LVU1146
 3661              	.LBE317:
1520:src/display.c **** 	      const int r = v % b;
 3662              		.loc 1 1520 25 discriminator 3 view .LVU1147
 3663 0282 04F10104 		add	r4, r4, #1
 3664              	.LVL409:
1520:src/display.c **** 	      const int r = v % b;
 3665              		.loc 1 1520 16 is_stmt 1 discriminator 3 view .LVU1148
1520:src/display.c **** 	      const int r = v % b;
 3666              		.loc 1 1520 6 is_stmt 0 discriminator 3 view .LVU1149
 3667 0286 E9D2     		bcs	.L303
 3668 0288 039D     		ldr	r5, [sp, #12]
 3669 028a 24E7     		b	.L304
 3670              	.LVL410:
 3671              	.L296:
1514:src/display.c **** 	    if (sign)
 3672              		.loc 1 1514 4 is_stmt 1 view .LVU1150
1514:src/display.c **** 	    if (sign)
ARM GAS  /tmp/ccdg5rgB.s 			page 146


 3673              		.loc 1 1514 7 is_stmt 0 view .LVU1151
 3674 028c 58EA0903 		orrs	r3, r8, r9
 3675 0290 DBD1     		bne	.L297
1515:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3676              		.loc 1 1515 6 is_stmt 1 view .LVU1152
1515:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3677              		.loc 1 1515 9 is_stmt 0 view .LVU1153
 3678 0292 049B     		ldr	r3, [sp, #16]
 3679 0294 002B     		cmp	r3, #0
 3680 0296 69D1     		bne	.L298
 3681              	.LVL411:
 3682              	.L299:
1517:src/display.c **** 	    return;
 3683              		.loc 1 1517 6 is_stmt 1 view .LVU1154
 3684              	.LBB318:
 3685              	.LBI318:
 415:src/display.c ****   if (res) *res++ = ch;
 3686              		.loc 1 415 14 view .LVU1155
 3687              	.LBB319:
 416:src/display.c ****   else	set_dig(base, ch);
 3688              		.loc 1 416 3 view .LVU1156
 416:src/display.c ****   else	set_dig(base, ch);
 3689              		.loc 1 416 6 is_stmt 0 view .LVU1157
 3690 0298 002D     		cmp	r5, #0
 3691 029a 6DD0     		beq	.L301
 3692              	.LVL412:
 3693              	.L300:
 416:src/display.c ****   else	set_dig(base, ch);
 3694              		.loc 1 416 12 is_stmt 1 view .LVU1158
 416:src/display.c ****   else	set_dig(base, ch);
 3695              		.loc 1 416 19 is_stmt 0 view .LVU1159
 3696 029c 3023     		movs	r3, #48
 3697 029e 2B70     		strb	r3, [r5]
 3698              	.LBE319:
 3699              	.LBE318:
1622:src/display.c **** 
 3700              		.loc 1 1622 7 view .LVU1160
 3701 02a0 17B0     		add	sp, sp, #92
 3702              		.cfi_remember_state
 3703              		.cfi_def_cfa_offset 36
 3704              		@ sp needed
 3705 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3706              	.LVL413:
 3707              	.L292:
 3708              		.cfi_restore_state
1502:src/display.c **** 	}
 3709              		.loc 1 1502 11 is_stmt 1 view .LVU1161
1502:src/display.c **** 	}
 3710              		.loc 1 1502 15 is_stmt 0 view .LVU1162
 3711 02a6 FFF7FEFF 		bl	int_base
 3712              	.LVL414:
1502:src/display.c **** 	}
 3713              		.loc 1 1502 15 view .LVU1163
 3714 02aa 8246     		mov	r10, r0
 3715              	.LVL415:
1502:src/display.c **** 	}
 3716              		.loc 1 1502 27 is_stmt 1 view .LVU1164
ARM GAS  /tmp/ccdg5rgB.s 			page 147


1505:src/display.c **** 	  IntMaxWindow = 0;
 3717              		.loc 1 1505 2 view .LVU1165
1505:src/display.c **** 	  IntMaxWindow = 0;
 3718              		.loc 1 1505 5 is_stmt 0 view .LVU1166
 3719 02ac 002D     		cmp	r5, #0
 3720 02ae 7FF4BFAE 		bne	.L294
 3721              	.LVL416:
 3722              	.L374:
1506:src/display.c **** 	  carry_overflow();
 3723              		.loc 1 1506 4 is_stmt 1 view .LVU1167
1506:src/display.c **** 	  carry_overflow();
 3724              		.loc 1 1506 17 is_stmt 0 view .LVU1168
 3725 02b2 284B     		ldr	r3, .L383+12
 3726 02b4 1D60     		str	r5, [r3]
1507:src/display.c **** 	}
 3727              		.loc 1 1507 4 is_stmt 1 view .LVU1169
 3728 02b6 FFF7FEFF 		bl	carry_overflow
 3729              	.LVL417:
 3730 02ba B9E6     		b	.L294
 3731              	.LVL418:
 3732              	.L315:
1568:src/display.c **** 	      *res++ = buf[i];
 3733              		.loc 1 1568 12 view .LVU1170
1568:src/display.c **** 	      *res++ = buf[i];
 3734              		.loc 1 1568 12 is_stmt 0 view .LVU1171
 3735 02bc 05AB     		add	r3, sp, #20
 3736 02be 5818     		adds	r0, r3, r1
1568:src/display.c **** 	      *res++ = buf[i];
 3737              		.loc 1 1568 24 view .LVU1172
 3738 02c0 A4F10D06 		sub	r6, r4, #13
 3739 02c4 6A1E     		subs	r2, r5, #1
 3740              	.LVL419:
 3741              	.L317:
1569:src/display.c **** 	    *res++ = '.';
 3742              		.loc 1 1569 8 is_stmt 1 view .LVU1173
1569:src/display.c **** 	    *res++ = '.';
 3743              		.loc 1 1569 20 is_stmt 0 view .LVU1174
 3744 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3745              	.LVL420:
1569:src/display.c **** 	    *res++ = '.';
 3746              		.loc 1 1569 15 view .LVU1175
 3747 02ca 02F8013F 		strb	r3, [r2, #1]!
 3748              	.LVL421:
1568:src/display.c **** 	      *res++ = buf[i];
 3749              		.loc 1 1568 12 is_stmt 1 view .LVU1176
1568:src/display.c **** 	      *res++ = buf[i];
 3750              		.loc 1 1568 12 is_stmt 0 view .LVU1177
 3751 02ce D343     		mvns	r3, r2
 3752 02d0 0B44     		add	r3, r3, r1
 3753 02d2 2B44     		add	r3, r3, r5
 3754 02d4 9E42     		cmp	r6, r3
 3755 02d6 F6DD     		ble	.L317
 3756 02d8 01F10E03 		add	r3, r1, #14
 3757 02dc 1C1B     		subs	r4, r3, r4
 3758              	.LVL422:
1568:src/display.c **** 	      *res++ = buf[i];
 3759              		.loc 1 1568 12 view .LVU1178
ARM GAS  /tmp/ccdg5rgB.s 			page 148


 3760 02de 8E42     		cmp	r6, r1
 3761 02e0 C8BF     		it	gt
 3762 02e2 0124     		movgt	r4, #1
 3763 02e4 2A19     		adds	r2, r5, r4
 3764              	.LVL423:
1570:src/display.c **** 	    *res++ = '.';
 3765              		.loc 1 1570 6 is_stmt 1 view .LVU1179
1570:src/display.c **** 	    *res++ = '.';
 3766              		.loc 1 1570 13 is_stmt 0 view .LVU1180
 3767 02e6 2E23     		movs	r3, #46
 3768 02e8 2B55     		strb	r3, [r5, r4]
1571:src/display.c **** 	  }
 3769              		.loc 1 1571 6 is_stmt 1 view .LVU1181
 3770              	.LVL424:
1571:src/display.c **** 	  }
 3771              		.loc 1 1571 13 is_stmt 0 view .LVU1182
 3772 02ea 5370     		strb	r3, [r2, #1]
1622:src/display.c **** 
 3773              		.loc 1 1622 7 view .LVU1183
 3774 02ec 17B0     		add	sp, sp, #92
 3775              		.cfi_remember_state
 3776              		.cfi_def_cfa_offset 36
 3777              		@ sp needed
 3778 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3779              	.LVL425:
 3780              	.L376:
 3781              		.cfi_restore_state
 3782              	.LBB321:
1530:src/display.c **** 	      vs |= ~mask;
 3783              		.loc 1 1530 38 discriminator 1 view .LVU1184
 3784 02f2 0BF1FF31 		add	r1, fp, #-1
1530:src/display.c **** 	      vs |= ~mask;
 3785              		.loc 1 1530 18 discriminator 1 view .LVU1185
 3786 02f6 CBF1210C 		rsb	ip, fp, #33
 3787 02fa C840     		lsrs	r0, r0, r1
 3788 02fc 07FA0CFC 		lsl	ip, r7, ip
 3789 0300 2039     		subs	r1, r1, #32
 3790 0302 40EA0C00 		orr	r0, r0, ip
 3791 0306 5CBF     		itt	pl
 3792 0308 47FA01F1 		asrpl	r1, r7, r1
 3793 030c 0843     		orrpl	r0, r0, r1
 3794 030e 00F00108 		and	r8, r0, #1
 3795 0312 4FF00009 		mov	r9, #0
 3796 0316 58EA0901 		orrs	r1, r8, r9
 3797 031a 08D0     		beq	.L306
1531:src/display.c **** 	  }
 3798              		.loc 1 1531 8 is_stmt 1 view .LVU1186
1531:src/display.c **** 	  }
 3799              		.loc 1 1531 11 is_stmt 0 view .LVU1187
 3800 031c 5042     		rsbs	r0, r2, #0
 3801 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3802 0322 40EA0602 		orr	r2, r0, r6
 3803              	.LVL426:
1531:src/display.c **** 	  }
 3804              		.loc 1 1531 11 view .LVU1188
 3805 0326 41EA0703 		orr	r3, r1, r7
 3806              	.LVL427:
ARM GAS  /tmp/ccdg5rgB.s 			page 149


1531:src/display.c **** 	  }
 3807              		.loc 1 1531 11 view .LVU1189
 3808 032a 1646     		mov	r6, r2
 3809              	.LVL428:
1531:src/display.c **** 	  }
 3810              		.loc 1 1531 11 view .LVU1190
 3811 032c 1F46     		mov	r7, r3
 3812              	.L306:
1531:src/display.c **** 	  }
 3813              		.loc 1 1531 11 view .LVU1191
 3814              	.LBE321:
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3815              		.loc 1 1534 4 is_stmt 1 view .LVU1192
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3816              		.loc 1 1534 8 is_stmt 0 view .LVU1193
 3817 032e 084B     		ldr	r3, .L383+8
 3818 0330 1B68     		ldr	r3, [r3]
 3819 0332 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1534:src/display.c **** 	    set_dig_s(dig, '0', res);
 3820              		.loc 1 1534 7 view .LVU1194
 3821 0336 9B07     		lsls	r3, r3, #30
 3822 0338 7FF5E6AE 		bpl	.L336
 3823 033c 0223     		movs	r3, #2
 3824 033e ADE6     		b	.L311
 3825              	.LVL429:
 3826              	.L378:
 3827              	.LBB322:
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3828              		.loc 1 1593 33 view .LVU1195
 3829 0340 0826     		movs	r6, #8
1595:src/display.c **** 	  set_separator_decimal_modes();
 3830              		.loc 1 1595 6 view .LVU1196
 3831 0342 4FF0040A 		mov	r10, #4
 3832 0346 17E7     		b	.L320
 3833              	.L384:
 3834              		.align	2
 3835              	.L383:
 3836 0348 00000000 		.word	StateWhileOn
 3837 034c 00000000 		.word	CSWTCH.385
 3838 0350 00000000 		.word	main_ram
 3839 0354 00000000 		.word	IntMaxWindow
 3840 0358 00000000 		.word	.LANCHOR0
 3841 035c 00000000 		.word	.LANCHOR12
 3842              	.LVL430:
 3843              	.L382:
1595:src/display.c **** 	  set_separator_decimal_modes();
 3844              		.loc 1 1595 6 view .LVU1197
 3845              	.LBE322:
1513:src/display.c **** 	  if (v == 0) {
 3846              		.loc 1 1513 6 is_stmt 1 view .LVU1198
1513:src/display.c **** 	  if (v == 0) {
 3847              		.loc 1 1513 8 is_stmt 0 view .LVU1199
 3848 0360 B046     		mov	r8, r6
 3849              	.LVL431:
1513:src/display.c **** 	  if (v == 0) {
 3850              		.loc 1 1513 8 view .LVU1200
 3851 0362 B946     		mov	r9, r7
ARM GAS  /tmp/ccdg5rgB.s 			page 150


 3852              	.LVL432:
1514:src/display.c **** 	    if (sign)
 3853              		.loc 1 1514 4 is_stmt 1 view .LVU1201
1514:src/display.c **** 	    if (sign)
 3854              		.loc 1 1514 7 is_stmt 0 view .LVU1202
 3855 0364 58EA0903 		orrs	r3, r8, r9
 3856 0368 7FF46FAF 		bne	.L297
 3857              	.LVL433:
 3858              	.L298:
1516:src/display.c **** 	    set_dig_s(dig, '0', res);
 3859              		.loc 1 1516 8 is_stmt 1 view .LVU1203
 3860              	.LBB323:
 3861              	.LBI323:
 415:src/display.c ****   if (res) *res++ = ch;
 3862              		.loc 1 415 14 view .LVU1204
 3863              	.LBB324:
 416:src/display.c ****   else	set_dig(base, ch);
 3864              		.loc 1 416 3 view .LVU1205
 416:src/display.c ****   else	set_dig(base, ch);
 3865              		.loc 1 416 6 is_stmt 0 view .LVU1206
 3866 036c 002D     		cmp	r5, #0
 3867 036e 95D1     		bne	.L300
 417:src/display.c ****   return res;
 3868              		.loc 1 417 8 is_stmt 1 view .LVU1207
 3869 0370 2D21     		movs	r1, #45
 3870 0372 5A20     		movs	r0, #90
 3871 0374 FFF7FEFF 		bl	set_dig
 3872              	.LVL434:
 417:src/display.c ****   return res;
 3873              		.loc 1 417 8 is_stmt 0 view .LVU1208
 3874              	.LBE324:
 3875              	.LBE323:
1517:src/display.c **** 	    return;
 3876              		.loc 1 1517 6 is_stmt 1 view .LVU1209
 3877              	.LBB325:
 415:src/display.c ****   if (res) *res++ = ch;
 3878              		.loc 1 415 14 view .LVU1210
 3879              	.LBB320:
 416:src/display.c ****   else	set_dig(base, ch);
 3880              		.loc 1 416 3 view .LVU1211
 3881              	.L301:
 417:src/display.c ****   return res;
 3882              		.loc 1 417 8 view .LVU1212
 3883 0378 3021     		movs	r1, #48
 3884 037a 6320     		movs	r0, #99
 3885 037c FFF7FEFF 		bl	set_dig
 3886              	.LVL435:
 3887 0380 BFE6     		b	.L291
 3888              	.LVL436:
 3889              	.L322:
 417:src/display.c ****   return res;
 3890              		.loc 1 417 8 is_stmt 0 view .LVU1213
 3891              	.LBE320:
 3892              	.LBE325:
 3893              	.LBB326:
1600:src/display.c **** 	  buf[i] = '\0';
 3894              		.loc 1 1600 6 is_stmt 1 view .LVU1214
ARM GAS  /tmp/ccdg5rgB.s 			page 151


1600:src/display.c **** 	  buf[i] = '\0';
 3895              		.loc 1 1600 20 is_stmt 0 view .LVU1215
 3896 0382 0F4A     		ldr	r2, .L385
 3897 0384 6FF3C503 		bfc	r3, #3, #3
 3898 0388 1375     		strb	r3, [r2, #20]
 3899 038a 0027     		movs	r7, #0
 3900 038c 05E7     		b	.L323
 3901              	.LVL437:
 3902              	.L324:
1607:src/display.c **** 	    int ch = buf[j++];
 3903              		.loc 1 1607 14 is_stmt 1 discriminator 1 view .LVU1216
1607:src/display.c **** 	    int ch = buf[j++];
 3904              		.loc 1 1607 4 is_stmt 0 discriminator 1 view .LVU1217
 3905 038e 03F1FF38 		add	r8, r3, #-1
 3906              	.LVL438:
1607:src/display.c **** 	    int ch = buf[j++];
 3907              		.loc 1 1607 4 discriminator 1 view .LVU1218
 3908 0392 002B     		cmp	r3, #0
 3909 0394 7FF414AF 		bne	.L326
1616:src/display.c **** 	    if (dig >= 0)
 3910              		.loc 1 1616 4 is_stmt 1 view .LVU1219
1616:src/display.c **** 	    if (dig >= 0)
 3911              		.loc 1 1616 7 is_stmt 0 view .LVU1220
 3912 0398 049B     		ldr	r3, [sp, #16]
 3913 039a 002B     		cmp	r3, #0
 3914 039c 3FF4B1AE 		beq	.L291
 3915 03a0 4FF0630B 		mov	fp, #99
 3916 03a4 3BE7     		b	.L334
 3917              	.LVL439:
 3918              	.L379:
1593:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3919              		.loc 1 1593 33 view .LVU1221
 3920 03a6 0C26     		movs	r6, #12
 3921 03a8 E6E6     		b	.L320
 3922              	.LVL440:
 3923              	.L381:
1619:src/display.c **** 	  }
 3924              		.loc 1 1619 11 is_stmt 1 view .LVU1222
 3925              	.LBB313:
 3926              	.LBI313:
 304:src/display.c **** {
 3927              		.loc 1 304 13 view .LVU1223
 3928              	.LBB314:
 306:src/display.c ****   set_dot(MANT_SIGN);
 3929              		.loc 1 306 3 view .LVU1224
 306:src/display.c ****   set_dot(MANT_SIGN);
 3930              		.loc 1 306 25 is_stmt 0 view .LVU1225
 3931 03aa 064B     		ldr	r3, .L385+4
 3932 03ac 2D22     		movs	r2, #45
 307:src/display.c **** }
 3933              		.loc 1 307 3 view .LVU1226
 3934 03ae 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 3935              		.loc 1 306 25 view .LVU1227
 3936 03b0 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 3937              		.loc 1 307 3 is_stmt 1 view .LVU1228
ARM GAS  /tmp/ccdg5rgB.s 			page 152


 3938 03b2 FFF7FEFF 		bl	set_dot
 3939              	.LVL441:
 308:src/display.c **** 
 3940              		.loc 1 308 1 is_stmt 0 view .LVU1229
 3941 03b6 A4E6     		b	.L291
 3942              	.LVL442:
 3943              	.L337:
 308:src/display.c **** 
 3944              		.loc 1 308 1 view .LVU1230
 3945              	.LBE314:
 3946              	.LBE313:
 3947              	.LBE326:
 3948              	.LBB327:
1551:src/display.c **** 	      const int r = v % b;
 3949              		.loc 1 1551 6 view .LVU1231
 3950 03b8 4FF0FF31 		mov	r1, #-1
 3951 03bc 8BE6     		b	.L304
 3952              	.L386:
 3953 03be 00BF     		.align	2
 3954              	.L385:
 3955 03c0 00000000 		.word	StateWhileOn
 3956 03c4 00000000 		.word	LastDisplayedNumber
 3957              	.LBE327:
 3958              		.cfi_endproc
 3959              	.LFE18:
 3961              		.section	.text.getdig,"ax",%progbits
 3962              		.align	1
 3963              		.p2align 2,,3
 3964              		.global	getdig
 3965              		.syntax unified
 3966              		.thumb
 3967              		.thumb_func
 3968              		.fpu fpv4-sp-d16
 3970              	getdig:
 3971              	.LVL443:
 3972              	.LFB6:
 342:src/display.c ****   // perform index lookup
 3973              		.loc 1 342 1 is_stmt 1 view -0
 3974              		.cfi_startproc
 3975              		@ args = 0, pretend = 0, frame = 0
 3976              		@ frame_needed = 0, uses_anonymous_args = 0
 3977              		@ link register save eliminated.
 344:src/display.c **** }
 3978              		.loc 1 344 3 view .LVU1233
 344:src/display.c **** }
 3979              		.loc 1 344 16 is_stmt 0 view .LVU1234
 3980 0000 014B     		ldr	r3, .L388
 344:src/display.c **** }
 3981              		.loc 1 344 19 view .LVU1235
 3982 0002 C0B2     		uxtb	r0, r0
 3983              	.LVL444:
 345:src/display.c **** 
 3984              		.loc 1 345 1 view .LVU1236
 3985 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 3986 0006 7047     		bx	lr
 3987              	.L389:
 3988              		.align	2
ARM GAS  /tmp/ccdg5rgB.s 			page 153


 3989              	.L388:
 3990 0008 00000000 		.word	.LANCHOR2
 3991              		.cfi_endproc
 3992              	.LFE6:
 3994              		.section	.text.dot,"ax",%progbits
 3995              		.align	1
 3996              		.p2align 2,,3
 3997              		.global	dot
 3998              		.syntax unified
 3999              		.thumb
 4000              		.thumb_func
 4001              		.fpu fpv4-sp-d16
 4003              	dot:
 4004              	.LVL445:
 4005              	.LFB7:
 347:src/display.c ****   if (on)	set_dot(n);
 4006              		.loc 1 347 25 is_stmt 1 view -0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
 4010              		@ link register save eliminated.
 348:src/display.c ****   else	clr_dot(n);
 4011              		.loc 1 348 3 view .LVU1238
 348:src/display.c ****   else	clr_dot(n);
 4012              		.loc 1 348 6 is_stmt 0 view .LVU1239
 4013 0000 09B1     		cbz	r1, .L391
 348:src/display.c ****   else	clr_dot(n);
 4014              		.loc 1 348 11 is_stmt 1 discriminator 1 view .LVU1240
 4015 0002 FFF7FEBF 		b	set_dot
 4016              	.LVL446:
 4017              	.L391:
 349:src/display.c **** }
 4018              		.loc 1 349 8 view .LVU1241
 4019 0006 FFF7FEBF 		b	clr_dot
 4020              	.LVL447:
 349:src/display.c **** }
 4021              		.loc 1 349 8 is_stmt 0 view .LVU1242
 4022              		.cfi_endproc
 4023              	.LFE7:
 4025 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 4026              		.align	1
 4027              		.p2align 2,,3
 4028              		.global	std_round_fix
 4029              		.syntax unified
 4030              		.thumb
 4031              		.thumb_func
 4032              		.fpu fpv4-sp-d16
 4034              	std_round_fix:
 4035              	.LVL448:
 4036              	.LFB24:
1840:src/display.c **** 	decNumber c;
 4037              		.loc 1 1840 93 is_stmt 1 view -0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 40
 4040              		@ frame_needed = 0, uses_anonymous_args = 0
1840:src/display.c **** 	decNumber c;
 4041              		.loc 1 1840 93 is_stmt 0 view .LVU1244
ARM GAS  /tmp/ccdg5rgB.s 			page 154


 4042 0000 70B5     		push	{r4, r5, r6, lr}
 4043              		.cfi_def_cfa_offset 16
 4044              		.cfi_offset 4, -16
 4045              		.cfi_offset 5, -12
 4046              		.cfi_offset 6, -8
 4047              		.cfi_offset 14, -4
 4048 0002 0E46     		mov	r6, r1
1841:src/display.c **** 	int true_exp, x=0;
 4049              		.loc 1 1841 2 is_stmt 1 view .LVU1245
1842:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4050              		.loc 1 1842 2 view .LVU1246
 4051              	.LVL449:
1843:src/display.c **** 
 4052              		.loc 1 1843 2 view .LVU1247
1845:src/display.c **** 	  min_pos_exp = 9;
 4053              		.loc 1 1845 2 view .LVU1248
1840:src/display.c **** 	decNumber c;
 4054              		.loc 1 1840 93 is_stmt 0 view .LVU1249
 4055 0004 8AB0     		sub	sp, sp, #40
 4056              		.cfi_def_cfa_offset 56
1845:src/display.c **** 	  min_pos_exp = 9;
 4057              		.loc 1 1845 5 view .LVU1250
 4058 0006 92B9     		cbnz	r2, .L393
1850:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 4059              		.loc 1 1850 4 is_stmt 1 view .LVU1251
 4060              	.LVL450:
1851:src/display.c **** 	}
 4061              		.loc 1 1851 4 view .LVU1252
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4062              		.loc 1 1854 2 view .LVU1253
 4063 0008 0146     		mov	r1, r0
 4064              	.LVL451:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4065              		.loc 1 1854 2 is_stmt 0 view .LVU1254
 4066 000a 01A8     		add	r0, sp, #4
 4067              	.LVL452:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4068              		.loc 1 1854 2 view .LVU1255
 4069 000c 1D46     		mov	r5, r3
 4070 000e FFF7FEFF 		bl	dn_abs
 4071              	.LVL453:
1855:src/display.c **** 
 4072              		.loc 1 1855 2 is_stmt 1 view .LVU1256
1855:src/display.c **** 
 4073              		.loc 1 1855 24 is_stmt 0 view .LVU1257
 4074 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 4075 0016 1844     		add	r0, r0, r3
 4076              	.LVL454:
1857:src/display.c **** 	  x = *dd;
 4077              		.loc 1 1857 2 is_stmt 1 view .LVU1258
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4078              		.loc 1 1861 2 view .LVU1259
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4079              		.loc 1 1861 5 is_stmt 0 view .LVU1260
 4080 0018 0138     		subs	r0, r0, #1
 4081 001a 1AD5     		bpl	.L397
1851:src/display.c **** 	}
ARM GAS  /tmp/ccdg5rgB.s 			page 155


 4082              		.loc 1 1851 16 view .LVU1261
 4083 001c EB43     		mvns	r3, r5
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4084              		.loc 1 1861 21 view .LVU1262
 4085 001e 8342     		cmp	r3, r0
 4086 0020 17DA     		bge	.L397
 4087              	.LVL455:
 4088              	.L399:
1863:src/display.c **** 	  return MODE_FIX;
 4089              		.loc 1 1863 4 is_stmt 1 view .LVU1263
1863:src/display.c **** 	  return MODE_FIX;
 4090              		.loc 1 1863 8 is_stmt 0 view .LVU1264
 4091 0022 3368     		ldr	r3, [r6]
 4092 0024 181A     		subs	r0, r3, r0
 4093 0026 3060     		str	r0, [r6]
1864:src/display.c **** 	}
 4094              		.loc 1 1864 4 is_stmt 1 view .LVU1265
1864:src/display.c **** 	}
 4095              		.loc 1 1864 11 is_stmt 0 view .LVU1266
 4096 0028 0120     		movs	r0, #1
1873:src/display.c **** #else
 4097              		.loc 1 1873 7 view .LVU1267
 4098 002a 0AB0     		add	sp, sp, #40
 4099              		.cfi_remember_state
 4100              		.cfi_def_cfa_offset 16
 4101              		@ sp needed
 4102 002c 70BD     		pop	{r4, r5, r6, pc}
 4103              	.LVL456:
 4104              	.L393:
 4105              		.cfi_restore_state
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4106              		.loc 1 1854 2 is_stmt 1 view .LVU1268
 4107 002e 0146     		mov	r1, r0
 4108              	.LVL457:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4109              		.loc 1 1854 2 is_stmt 0 view .LVU1269
 4110 0030 01A8     		add	r0, sp, #4
 4111              	.LVL458:
1854:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 4112              		.loc 1 1854 2 view .LVU1270
 4113 0032 1446     		mov	r4, r2
 4114 0034 FFF7FEFF 		bl	dn_abs
 4115              	.LVL459:
1855:src/display.c **** 
 4116              		.loc 1 1855 2 is_stmt 1 view .LVU1271
1855:src/display.c **** 
 4117              		.loc 1 1855 24 is_stmt 0 view .LVU1272
 4118 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1857:src/display.c **** 	  x = *dd;
 4119              		.loc 1 1857 5 view .LVU1273
 4120 003c 052C     		cmp	r4, #5
1855:src/display.c **** 
 4121              		.loc 1 1855 24 view .LVU1274
 4122 003e 1344     		add	r3, r3, r2
1855:src/display.c **** 
 4123              		.loc 1 1855 11 view .LVU1275
 4124 0040 03F1FF30 		add	r0, r3, #-1
ARM GAS  /tmp/ccdg5rgB.s 			page 156


 4125              	.LVL460:
1857:src/display.c **** 	  x = *dd;
 4126              		.loc 1 1857 2 is_stmt 1 view .LVU1276
1857:src/display.c **** 	  x = *dd;
 4127              		.loc 1 1857 5 is_stmt 0 view .LVU1277
 4128 0044 15D1     		bne	.L401
1858:src/display.c **** 	}
 4129              		.loc 1 1858 4 is_stmt 1 view .LVU1278
1858:src/display.c **** 	}
 4130              		.loc 1 1858 6 is_stmt 0 view .LVU1279
 4131 0046 3268     		ldr	r2, [r6]
 4132              	.LVL461:
 4133              	.L396:
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4134              		.loc 1 1861 2 is_stmt 1 view .LVU1280
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4135              		.loc 1 1861 5 is_stmt 0 view .LVU1281
 4136 0048 8242     		cmp	r2, r0
 4137 004a 05DC     		bgt	.L405
1867:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 4138              		.loc 1 1867 53 discriminator 2 view .LVU1282
 4139 004c 0333     		adds	r3, r3, #3
 4140 004e 0C2B     		cmp	r3, #12
 4141 0050 04D8     		bhi	.L400
 4142              	.LVL462:
 4143              	.L397:
1871:src/display.c **** 	}
 4144              		.loc 1 1871 11 view .LVU1283
 4145 0052 0020     		movs	r0, #0
1873:src/display.c **** #else
 4146              		.loc 1 1873 7 view .LVU1284
 4147 0054 0AB0     		add	sp, sp, #40
 4148              		.cfi_remember_state
 4149              		.cfi_def_cfa_offset 16
 4150              		@ sp needed
 4151 0056 70BD     		pop	{r4, r5, r6, pc}
 4152              	.LVL463:
 4153              	.L405:
 4154              		.cfi_restore_state
1861:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 4155              		.loc 1 1861 21 view .LVU1285
 4156 0058 031D     		adds	r3, r0, #4
 4157 005a E2DA     		bge	.L399
 4158              	.L400:
 4159              	.LBB330:
 4160              	.LBI330:
1840:src/display.c **** 	decNumber c;
 4161              		.loc 1 1840 26 is_stmt 1 view .LVU1286
 4162              	.LVL464:
 4163              	.LBB331:
1868:src/display.c **** 	}
 4164              		.loc 1 1868 4 view .LVU1287
1868:src/display.c **** 	}
 4165              		.loc 1 1868 24 is_stmt 0 view .LVU1288
 4166 005c 064B     		ldr	r3, .L406
 4167 005e 1B68     		ldr	r3, [r3]
 4168 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
ARM GAS  /tmp/ccdg5rgB.s 			page 157


1868:src/display.c **** 	}
 4169              		.loc 1 1868 33 view .LVU1289
 4170 0064 13F0100F 		tst	r3, #16
 4171 0068 14BF     		ite	ne
 4172 006a 0320     		movne	r0, #3
 4173 006c 0220     		moveq	r0, #2
 4174              	.LBE331:
 4175              	.LBE330:
1873:src/display.c **** #else
 4176              		.loc 1 1873 7 view .LVU1290
 4177 006e 0AB0     		add	sp, sp, #40
 4178              		.cfi_remember_state
 4179              		.cfi_def_cfa_offset 16
 4180              		@ sp needed
 4181 0070 70BD     		pop	{r4, r5, r6, pc}
 4182              	.LVL465:
 4183              	.L401:
 4184              		.cfi_restore_state
1842:src/display.c **** 	int min_pos_exp, max_neg_exp;
 4185              		.loc 1 1842 16 view .LVU1291
 4186 0072 0022     		movs	r2, #0
 4187 0074 E8E7     		b	.L396
 4188              	.L407:
 4189 0076 00BF     		.align	2
 4190              	.L406:
 4191 0078 00000000 		.word	main_ram
 4192              		.cfi_endproc
 4193              	.LFE24:
 4195              		.section	.text.set_IO_annunciator,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	set_IO_annunciator
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	set_IO_annunciator:
 4205              	.LFB33:
2653:src/display.c **** #ifndef DM42
 4206              		.loc 1 2653 37 is_stmt 1 view -0
 4207              		.cfi_startproc
 4208              		@ args = 0, pretend = 0, frame = 0
 4209              		@ frame_needed = 0, uses_anonymous_args = 0
2658:src/display.c **** #endif
 4210              		.loc 1 2658 4 view .LVU1293
2653:src/display.c **** #ifndef DM42
 4211              		.loc 1 2653 37 is_stmt 0 view .LVU1294
 4212 0000 38B5     		push	{r3, r4, r5, lr}
 4213              		.cfi_def_cfa_offset 16
 4214              		.cfi_offset 3, -16
 4215              		.cfi_offset 4, -12
 4216              		.cfi_offset 5, -8
 4217              		.cfi_offset 14, -4
2664:src/display.c **** #endif
 4218              		.loc 1 2664 4 view .LVU1295
 4219 0002 0D4B     		ldr	r3, .L414
2668:src/display.c **** 	  dot(LIT_EQ, on);
ARM GAS  /tmp/ccdg5rgB.s 			page 158


 4220              		.loc 1 2668 9 view .LVU1296
 4221 0004 0D4C     		ldr	r4, .L414+4
2664:src/display.c **** #endif
 4222              		.loc 1 2664 4 view .LVU1297
 4223 0006 1B68     		ldr	r3, [r3]
2668:src/display.c **** 	  dot(LIT_EQ, on);
 4224              		.loc 1 2668 5 view .LVU1298
 4225 0008 2268     		ldr	r2, [r4]
2664:src/display.c **** #endif
 4226              		.loc 1 2664 4 view .LVU1299
 4227 000a 1D1E     		subs	r5, r3, #0
 4228 000c 18BF     		it	ne
 4229 000e 0125     		movne	r5, #1
 4230              	.LVL466:
2668:src/display.c **** 	  dot(LIT_EQ, on);
 4231              		.loc 1 2668 2 is_stmt 1 view .LVU1300
2668:src/display.c **** 	  dot(LIT_EQ, on);
 4232              		.loc 1 2668 5 is_stmt 0 view .LVU1301
 4233 0010 AA42     		cmp	r2, r5
 4234 0012 0FD0     		beq	.L408
2669:src/display.c **** 	  IoAnnunciator = on;
 4235              		.loc 1 2669 4 is_stmt 1 view .LVU1302
 4236              	.LVL467:
 4237              	.LBB332:
 4238              	.LBI332:
 347:src/display.c ****   if (on)	set_dot(n);
 4239              		.loc 1 347 6 view .LVU1303
 4240              	.LBB333:
 348:src/display.c ****   else	clr_dot(n);
 4241              		.loc 1 348 3 view .LVU1304
 348:src/display.c ****   else	clr_dot(n);
 4242              		.loc 1 348 11 is_stmt 0 view .LVU1305
 4243 0014 8420     		movs	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4244              		.loc 1 348 6 view .LVU1306
 4245 0016 33B9     		cbnz	r3, .L413
 349:src/display.c **** }
 4246              		.loc 1 349 8 is_stmt 1 view .LVU1307
 4247 0018 FFF7FEFF 		bl	clr_dot
 4248              	.LVL468:
 349:src/display.c **** }
 4249              		.loc 1 349 8 is_stmt 0 view .LVU1308
 4250              	.LBE333:
 4251              	.LBE332:
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4252              		.loc 1 2670 4 is_stmt 1 view .LVU1309
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4253              		.loc 1 2670 18 is_stmt 0 view .LVU1310
 4254 001c 2560     		str	r5, [r4]
2671:src/display.c **** 	}
 4255              		.loc 1 2671 4 is_stmt 1 view .LVU1311
2673:src/display.c **** 
 4256              		.loc 1 2673 7 is_stmt 0 view .LVU1312
 4257 001e BDE83840 		pop	{r3, r4, r5, lr}
 4258              		.cfi_remember_state
 4259              		.cfi_restore 14
 4260              		.cfi_restore 5
ARM GAS  /tmp/ccdg5rgB.s 			page 159


 4261              		.cfi_restore 4
 4262              		.cfi_restore 3
 4263              		.cfi_def_cfa_offset 0
 4264              	.LVL469:
2671:src/display.c **** 	}
 4265              		.loc 1 2671 4 view .LVU1313
 4266 0022 FFF7FEBF 		b	finish_display
 4267              	.LVL470:
 4268              	.L413:
 4269              		.cfi_restore_state
 4270              	.LBB335:
 4271              	.LBB334:
 348:src/display.c ****   else	clr_dot(n);
 4272              		.loc 1 348 11 is_stmt 1 view .LVU1314
 4273 0026 FFF7FEFF 		bl	set_dot
 4274              	.LVL471:
 348:src/display.c ****   else	clr_dot(n);
 4275              		.loc 1 348 11 is_stmt 0 view .LVU1315
 4276              	.LBE334:
 4277              	.LBE335:
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4278              		.loc 1 2670 4 is_stmt 1 view .LVU1316
2670:src/display.c **** 	  finish_display(); //LIT_EQ
 4279              		.loc 1 2670 18 is_stmt 0 view .LVU1317
 4280 002a 2560     		str	r5, [r4]
2671:src/display.c **** 	}
 4281              		.loc 1 2671 4 is_stmt 1 view .LVU1318
2673:src/display.c **** 
 4282              		.loc 1 2673 7 is_stmt 0 view .LVU1319
 4283 002c BDE83840 		pop	{r3, r4, r5, lr}
 4284              		.cfi_remember_state
 4285              		.cfi_restore 14
 4286              		.cfi_restore 5
 4287              		.cfi_restore 4
 4288              		.cfi_restore 3
 4289              		.cfi_def_cfa_offset 0
 4290              	.LVL472:
2671:src/display.c **** 	}
 4291              		.loc 1 2671 4 view .LVU1320
 4292 0030 FFF7FEBF 		b	finish_display
 4293              	.LVL473:
 4294              	.L408:
 4295              		.cfi_restore_state
2673:src/display.c **** 
 4296              		.loc 1 2673 7 view .LVU1321
 4297 0034 38BD     		pop	{r3, r4, r5, pc}
 4298              	.LVL474:
 4299              	.L415:
2673:src/display.c **** 
 4300              		.loc 1 2673 7 view .LVU1322
 4301 0036 00BF     		.align	2
 4302              	.L414:
 4303 0038 00000000 		.word	PrinterColumn
 4304 003c 00000000 		.word	IoAnnunciator
 4305              		.cfi_endproc
 4306              	.LFE33:
 4308              		.section	.text.set_annunciators,"ax",%progbits
ARM GAS  /tmp/ccdg5rgB.s 			page 160


 4309              		.align	1
 4310              		.p2align 2,,3
 4311              		.syntax unified
 4312              		.thumb
 4313              		.thumb_func
 4314              		.fpu fpv4-sp-d16
 4316              	set_annunciators:
 4317              	.LFB32:
2622:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4318              		.loc 1 2622 7 is_stmt 1 view -0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 0
 4321              		@ frame_needed = 0, uses_anonymous_args = 0
2623:src/display.c **** 
 4322              		.loc 1 2623 2 view .LVU1324
2622:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4323              		.loc 1 2622 7 is_stmt 0 view .LVU1325
 4324 0000 70B5     		push	{r4, r5, r6, lr}
 4325              		.cfi_def_cfa_offset 16
 4326              		.cfi_offset 4, -16
 4327              		.cfi_offset 5, -12
 4328              		.cfi_offset 6, -8
 4329              		.cfi_offset 14, -4
2630:src/display.c **** #else
 4330              		.loc 1 2630 11 view .LVU1326
 4331 0002 364C     		ldr	r4, .L446
2623:src/display.c **** 
 4332              		.loc 1 2623 29 view .LVU1327
 4333 0004 FFF7FEFF 		bl	get_trig_mode
 4334              	.LVL475:
2630:src/display.c **** #else
 4335              		.loc 1 2630 11 view .LVU1328
 4336 0008 2368     		ldr	r3, [r4]
 4337 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2630:src/display.c **** #else
 4338              		.loc 1 2630 2 view .LVU1329
 4339 000e 1B07     		lsls	r3, r3, #28
2623:src/display.c **** 
 4340              		.loc 1 2623 29 view .LVU1330
 4341 0010 0546     		mov	r5, r0
 4342              	.LVL476:
2630:src/display.c **** #else
 4343              		.loc 1 2630 2 is_stmt 1 view .LVU1331
 4344              	.LBB336:
 4345              	.LBB337:
 348:src/display.c ****   else	clr_dot(n);
 4346              		.loc 1 348 11 is_stmt 0 view .LVU1332
 4347 0012 4FF08800 		mov	r0, #136
 4348              	.LBE337:
 4349              	.LBE336:
2630:src/display.c **** #else
 4350              		.loc 1 2630 2 view .LVU1333
 4351 0016 03D5     		bpl	.L417
2630:src/display.c **** #else
 4352              		.loc 1 2630 33 discriminator 1 view .LVU1334
 4353 0018 314B     		ldr	r3, .L446+4
2630:src/display.c **** #else
ARM GAS  /tmp/ccdg5rgB.s 			page 161


 4354              		.loc 1 2630 2 discriminator 1 view .LVU1335
 4355 001a 1B68     		ldr	r3, [r3]
 4356 001c 002B     		cmp	r3, #0
 4357 001e 5AD0     		beq	.L443
 4358              	.L417:
 4359              	.LVL477:
 4360              	.LBB340:
 4361              	.LBI336:
 347:src/display.c ****   if (on)	set_dot(n);
 4362              		.loc 1 347 6 is_stmt 1 view .LVU1336
 4363              	.LBB338:
 348:src/display.c ****   else	clr_dot(n);
 4364              		.loc 1 348 3 view .LVU1337
 349:src/display.c **** }
 4365              		.loc 1 349 8 view .LVU1338
 4366 0020 FFF7FEFF 		bl	clr_dot
 4367              	.LVL478:
 4368              	.L418:
 349:src/display.c **** }
 4369              		.loc 1 349 8 is_stmt 0 view .LVU1339
 4370              	.LBE338:
 4371              	.LBE340:
2635:src/display.c **** #endif
 4372              		.loc 1 2635 2 is_stmt 1 view .LVU1340
2635:src/display.c **** #endif
 4373              		.loc 1 2635 14 is_stmt 0 view .LVU1341
 4374 0024 2368     		ldr	r3, [r4]
 4375 0026 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2635:src/display.c **** #endif
 4376              		.loc 1 2635 2 view .LVU1342
 4377 002a 5607     		lsls	r6, r2, #29
 4378              	.LBB341:
 4379              	.LBB342:
 348:src/display.c ****   else	clr_dot(n);
 4380              		.loc 1 348 11 view .LVU1343
 4381 002c 4FF08400 		mov	r0, #132
 4382              	.LBE342:
 4383              	.LBE341:
2635:src/display.c **** #endif
 4384              		.loc 1 2635 2 view .LVU1344
 4385 0030 03D5     		bpl	.L419
2635:src/display.c **** #endif
 4386              		.loc 1 2635 14 discriminator 1 view .LVU1345
 4387 0032 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
2635:src/display.c **** #endif
 4388              		.loc 1 2635 2 discriminator 1 view .LVU1346
 4389 0036 5907     		lsls	r1, r3, #29
 4390 0038 4AD4     		bmi	.L420
 4391              	.L419:
 4392              	.LVL479:
 4393              	.LBB345:
 4394              	.LBI341:
 347:src/display.c ****   if (on)	set_dot(n);
 4395              		.loc 1 347 6 is_stmt 1 view .LVU1347
 4396              	.LBB343:
 348:src/display.c ****   else	clr_dot(n);
 4397              		.loc 1 348 3 view .LVU1348
ARM GAS  /tmp/ccdg5rgB.s 			page 162


 349:src/display.c **** }
 4398              		.loc 1 349 8 view .LVU1349
 4399 003a FFF7FEFF 		bl	clr_dot
 4400              	.LVL480:
 4401              	.L421:
 349:src/display.c **** }
 4402              		.loc 1 349 8 is_stmt 0 view .LVU1350
 4403              	.LBE343:
 4404              	.LBE345:
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4405              		.loc 1 2638 2 is_stmt 1 view .LVU1351
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4406              		.loc 1 2638 19 is_stmt 0 view .LVU1352
 4407 003e 294E     		ldr	r6, .L446+8
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4408              		.loc 1 2638 2 view .LVU1353
 4409 0040 B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4410              	.LBB346:
 4411              	.LBB347:
 348:src/display.c ****   else	clr_dot(n);
 4412              		.loc 1 348 11 view .LVU1354
 4413 0042 8620     		movs	r0, #134
 4414              	.LBE347:
 4415              	.LBE346:
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4416              		.loc 1 2638 2 view .LVU1355
 4417 0044 23B9     		cbnz	r3, .L422
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4418              		.loc 1 2638 47 discriminator 2 view .LVU1356
 4419 0046 7269     		ldr	r2, [r6, #20]
 4420 0048 274B     		ldr	r3, .L446+12
 4421 004a 1340     		ands	r3, r3, r2
2638:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4422              		.loc 1 2638 2 discriminator 2 view .LVU1357
 4423 004c 002B     		cmp	r3, #0
 4424 004e 3CD0     		beq	.L444
 4425              	.L422:
 4426              	.LBB350:
 4427              	.LBB348:
 348:src/display.c ****   else	clr_dot(n);
 4428              		.loc 1 348 11 is_stmt 1 view .LVU1358
 4429 0050 FFF7FEFF 		bl	set_dot
 4430              	.LVL481:
 4431              	.L423:
 4432              	.LBE348:
 4433              	.LBE350:
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4434              		.loc 1 2639 2 view .LVU1359
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4435              		.loc 1 2639 31 is_stmt 0 view .LVU1360
 4436 0054 254A     		ldr	r2, .L446+16
 4437 0056 7369     		ldr	r3, [r6, #20]
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4438              		.loc 1 2639 2 view .LVU1361
 4439 0058 1A42     		tst	r2, r3
 4440              	.LBB351:
 4441              	.LBB352:
ARM GAS  /tmp/ccdg5rgB.s 			page 163


 348:src/display.c ****   else	clr_dot(n);
 4442              		.loc 1 348 11 view .LVU1362
 4443 005a 4FF08500 		mov	r0, #133
 4444              	.LBE352:
 4445              	.LBE351:
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4446              		.loc 1 2639 2 view .LVU1363
 4447 005e 02D0     		beq	.L424
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4448              		.loc 1 2639 48 discriminator 1 view .LVU1364
 4449 0060 B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2639:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4450              		.loc 1 2639 2 discriminator 1 view .LVU1365
 4451 0062 DA06     		lsls	r2, r3, #27
 4452 0064 2ED4     		bmi	.L425
 4453              	.L424:
 4454              	.LVL482:
 4455              	.LBB355:
 4456              	.LBI351:
 347:src/display.c ****   if (on)	set_dot(n);
 4457              		.loc 1 347 6 is_stmt 1 view .LVU1366
 4458              	.LBB353:
 348:src/display.c ****   else	clr_dot(n);
 4459              		.loc 1 348 3 view .LVU1367
 349:src/display.c **** }
 4460              		.loc 1 349 8 view .LVU1368
 4461 0066 FFF7FEFF 		bl	clr_dot
 4462              	.LVL483:
 4463              	.L426:
 349:src/display.c **** }
 4464              		.loc 1 349 8 is_stmt 0 view .LVU1369
 4465              	.LBE353:
 4466              	.LBE355:
2640:src/display.c **** 	set_IO_annunciator();
 4467              		.loc 1 2640 2 is_stmt 1 view .LVU1370
 4468 006a 6820     		movs	r0, #104
 4469 006c FFF7FEFF 		bl	get_user_flag
 4470              	.LVL484:
 4471              	.LBB356:
 4472              	.LBI356:
 347:src/display.c ****   if (on)	set_dot(n);
 4473              		.loc 1 347 6 view .LVU1371
 4474              	.LBB357:
 348:src/display.c ****   else	clr_dot(n);
 4475              		.loc 1 348 3 view .LVU1372
 348:src/display.c ****   else	clr_dot(n);
 4476              		.loc 1 348 6 is_stmt 0 view .LVU1373
 4477 0070 20B3     		cbz	r0, .L427
 348:src/display.c ****   else	clr_dot(n);
 4478              		.loc 1 348 11 is_stmt 1 view .LVU1374
 4479 0072 8320     		movs	r0, #131
 4480              	.LVL485:
 348:src/display.c ****   else	clr_dot(n);
 4481              		.loc 1 348 11 is_stmt 0 view .LVU1375
 4482 0074 FFF7FEFF 		bl	set_dot
 4483              	.LVL486:
 4484              	.L428:
ARM GAS  /tmp/ccdg5rgB.s 			page 164


 348:src/display.c ****   else	clr_dot(n);
 4485              		.loc 1 348 11 view .LVU1376
 4486              	.LBE357:
 4487              	.LBE356:
2641:src/display.c **** 
 4488              		.loc 1 2641 2 is_stmt 1 view .LVU1377
 4489 0078 FFF7FEFF 		bl	set_IO_annunciator
 4490              	.LVL487:
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4491              		.loc 1 2645 2 view .LVU1378
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4492              		.loc 1 2645 11 is_stmt 0 view .LVU1379
 4493 007c 2368     		ldr	r3, [r4]
 4494 007e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4495 0082 03F00103 		and	r3, r3, #1
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4496              		.loc 1 2645 2 view .LVU1380
 4497 0086 2B43     		orrs	r3, r3, r5
 4498 0088 13F0FF0F 		tst	r3, #255
 4499              	.LBB359:
 4500              	.LBB360:
 348:src/display.c ****   else	clr_dot(n);
 4501              		.loc 1 348 11 view .LVU1381
 4502 008c 4FF08C00 		mov	r0, #140
 4503              	.LBE360:
 4504              	.LBE359:
2645:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4505              		.loc 1 2645 2 view .LVU1382
 4506 0090 06D1     		bne	.L445
 4507              	.LVL488:
 4508              	.LBB363:
 4509              	.LBI359:
 347:src/display.c ****   if (on)	set_dot(n);
 4510              		.loc 1 347 6 is_stmt 1 view .LVU1383
 4511              	.LBB361:
 348:src/display.c ****   else	clr_dot(n);
 4512              		.loc 1 348 3 view .LVU1384
 348:src/display.c ****   else	clr_dot(n);
 4513              		.loc 1 348 11 view .LVU1385
 4514 0092 FFF7FEFF 		bl	set_dot
 4515              	.LVL489:
 348:src/display.c ****   else	clr_dot(n);
 4516              		.loc 1 348 11 is_stmt 0 view .LVU1386
 4517              	.LBE361:
 4518              	.LBE363:
2646:src/display.c ****       }
 4519              		.loc 1 2646 2 is_stmt 1 view .LVU1387
 4520              	.L431:
 4521              	.LBB364:
 4522              	.LBI364:
 347:src/display.c ****   if (on)	set_dot(n);
 4523              		.loc 1 347 6 view .LVU1388
 4524              	.LBB365:
 348:src/display.c ****   else	clr_dot(n);
 4525              		.loc 1 348 3 view .LVU1389
 349:src/display.c **** }
 4526              		.loc 1 349 8 view .LVU1390
ARM GAS  /tmp/ccdg5rgB.s 			page 165


 4527              	.LBE365:
 4528              	.LBE364:
2647:src/display.c **** 
 4529              		.loc 1 2647 7 is_stmt 0 view .LVU1391
 4530 0096 BDE87040 		pop	{r4, r5, r6, lr}
 4531              		.cfi_remember_state
 4532              		.cfi_restore 14
 4533              		.cfi_restore 6
 4534              		.cfi_restore 5
 4535              		.cfi_restore 4
 4536              		.cfi_def_cfa_offset 0
 4537              	.LVL490:
 4538              	.LBB369:
 4539              	.LBB366:
 349:src/display.c **** }
 4540              		.loc 1 349 8 view .LVU1392
 4541 009a 8B20     		movs	r0, #139
 4542 009c FFF7FEBF 		b	clr_dot
 4543              	.LVL491:
 4544              	.L445:
 4545              		.cfi_restore_state
 349:src/display.c **** }
 4546              		.loc 1 349 8 view .LVU1393
 4547              	.LBE366:
 4548              	.LBE369:
 4549              	.LBB370:
 347:src/display.c ****   if (on)	set_dot(n);
 4550              		.loc 1 347 6 is_stmt 1 view .LVU1394
 4551              	.LBB362:
 348:src/display.c ****   else	clr_dot(n);
 4552              		.loc 1 348 3 view .LVU1395
 349:src/display.c **** }
 4553              		.loc 1 349 8 view .LVU1396
 4554 00a0 FFF7FEFF 		bl	clr_dot
 4555              	.LVL492:
 349:src/display.c **** }
 4556              		.loc 1 349 8 is_stmt 0 view .LVU1397
 4557              	.LBE362:
 4558              	.LBE370:
2646:src/display.c ****       }
 4559              		.loc 1 2646 2 is_stmt 1 view .LVU1398
2646:src/display.c ****       }
 4560              		.loc 1 2646 11 is_stmt 0 view .LVU1399
 4561 00a4 2368     		ldr	r3, [r4]
 4562 00a6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2646:src/display.c ****       }
 4563              		.loc 1 2646 2 view .LVU1400
 4564 00aa DB07     		lsls	r3, r3, #31
 4565 00ac F3D4     		bmi	.L431
2646:src/display.c ****       }
 4566              		.loc 1 2646 2 discriminator 1 view .LVU1401
 4567 00ae 012D     		cmp	r5, #1
 4568 00b0 F1D1     		bne	.L431
 4569              	.LVL493:
 4570              	.LBB371:
 347:src/display.c ****   if (on)	set_dot(n);
 4571              		.loc 1 347 6 is_stmt 1 view .LVU1402
ARM GAS  /tmp/ccdg5rgB.s 			page 166


 4572              	.LBB367:
 348:src/display.c ****   else	clr_dot(n);
 4573              		.loc 1 348 3 view .LVU1403
 348:src/display.c ****   else	clr_dot(n);
 4574              		.loc 1 348 11 view .LVU1404
 4575              	.LBE367:
 4576              	.LBE371:
2647:src/display.c **** 
 4577              		.loc 1 2647 7 is_stmt 0 view .LVU1405
 4578 00b2 BDE87040 		pop	{r4, r5, r6, lr}
 4579              		.cfi_remember_state
 4580              		.cfi_restore 14
 4581              		.cfi_restore 6
 4582              		.cfi_restore 5
 4583              		.cfi_restore 4
 4584              		.cfi_def_cfa_offset 0
 4585              	.LVL494:
 4586              	.LBB372:
 4587              	.LBB368:
 348:src/display.c ****   else	clr_dot(n);
 4588              		.loc 1 348 11 view .LVU1406
 4589 00b6 8B20     		movs	r0, #139
 4590 00b8 FFF7FEBF 		b	set_dot
 4591              	.LVL495:
 4592              	.L427:
 4593              		.cfi_restore_state
 348:src/display.c ****   else	clr_dot(n);
 4594              		.loc 1 348 11 view .LVU1407
 4595              	.LBE368:
 4596              	.LBE372:
 4597              	.LBB373:
 4598              	.LBB358:
 349:src/display.c **** }
 4599              		.loc 1 349 8 is_stmt 1 view .LVU1408
 4600 00bc 8320     		movs	r0, #131
 4601              	.LVL496:
 349:src/display.c **** }
 4602              		.loc 1 349 8 is_stmt 0 view .LVU1409
 4603 00be FFF7FEFF 		bl	clr_dot
 4604              	.LVL497:
 4605 00c2 D9E7     		b	.L428
 4606              	.LVL498:
 4607              	.L425:
 349:src/display.c **** }
 4608              		.loc 1 349 8 view .LVU1410
 4609              	.LBE358:
 4610              	.LBE373:
 4611              	.LBB374:
 347:src/display.c ****   if (on)	set_dot(n);
 4612              		.loc 1 347 6 is_stmt 1 view .LVU1411
 4613              	.LBB354:
 348:src/display.c ****   else	clr_dot(n);
 4614              		.loc 1 348 3 view .LVU1412
 348:src/display.c ****   else	clr_dot(n);
 4615              		.loc 1 348 11 view .LVU1413
 4616 00c4 FFF7FEFF 		bl	set_dot
 4617              	.LVL499:
ARM GAS  /tmp/ccdg5rgB.s 			page 167


 4618 00c8 CFE7     		b	.L426
 4619              	.LVL500:
 4620              	.L444:
 348:src/display.c ****   else	clr_dot(n);
 4621              		.loc 1 348 11 is_stmt 0 view .LVU1414
 4622              	.LBE354:
 4623              	.LBE374:
 4624              	.LBB375:
 4625              	.LBI346:
 347:src/display.c ****   if (on)	set_dot(n);
 4626              		.loc 1 347 6 is_stmt 1 view .LVU1415
 4627              	.LBB349:
 348:src/display.c ****   else	clr_dot(n);
 4628              		.loc 1 348 3 view .LVU1416
 349:src/display.c **** }
 4629              		.loc 1 349 8 view .LVU1417
 4630 00ca FFF7FEFF 		bl	clr_dot
 4631              	.LVL501:
 4632 00ce C1E7     		b	.L423
 4633              	.LVL502:
 4634              	.L420:
 349:src/display.c **** }
 4635              		.loc 1 349 8 is_stmt 0 view .LVU1418
 4636              	.LBE349:
 4637              	.LBE375:
 4638              	.LBB376:
 347:src/display.c ****   if (on)	set_dot(n);
 4639              		.loc 1 347 6 is_stmt 1 view .LVU1419
 4640              	.LBB344:
 348:src/display.c ****   else	clr_dot(n);
 4641              		.loc 1 348 3 view .LVU1420
 348:src/display.c ****   else	clr_dot(n);
 4642              		.loc 1 348 11 view .LVU1421
 4643 00d0 FFF7FEFF 		bl	set_dot
 4644              	.LVL503:
 4645 00d4 B3E7     		b	.L421
 4646              	.LVL504:
 4647              	.L443:
 348:src/display.c ****   else	clr_dot(n);
 4648              		.loc 1 348 11 is_stmt 0 view .LVU1422
 4649              	.LBE344:
 4650              	.LBE376:
 4651              	.LBB377:
 347:src/display.c ****   if (on)	set_dot(n);
 4652              		.loc 1 347 6 is_stmt 1 view .LVU1423
 4653              	.LBB339:
 348:src/display.c ****   else	clr_dot(n);
 4654              		.loc 1 348 3 view .LVU1424
 348:src/display.c ****   else	clr_dot(n);
 4655              		.loc 1 348 11 view .LVU1425
 4656 00d6 FFF7FEFF 		bl	set_dot
 4657              	.LVL505:
 4658 00da A3E7     		b	.L418
 4659              	.L447:
 4660              		.align	2
 4661              	.L446:
 4662 00dc 00000000 		.word	main_ram
ARM GAS  /tmp/ccdg5rgB.s 			page 168


 4663 00e0 00000000 		.word	Running
 4664 00e4 00000000 		.word	StateWhileOn
 4665 00e8 07000800 		.word	524295
 4666 00ec 00080800 		.word	526336
 4667              	.LBE339:
 4668              	.LBE377:
 4669              		.cfi_endproc
 4670              	.LFE32:
 4672              		.section	.text.pixel_length,"ax",%progbits
 4673              		.align	1
 4674              		.p2align 2,,3
 4675              		.global	pixel_length
 4676              		.syntax unified
 4677              		.thumb
 4678              		.thumb_func
 4679              		.fpu fpv4-sp-d16
 4681              	pixel_length:
 4682              	.LVL506:
 4683              	.LFB40:
3601:src/display.c **** 
3602:src/display.c **** 
3603:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3604:src/display.c ****        */
3605:src/display.c ****       int pixel_length(const char *s, int smallp)
3606:src/display.c ****       {
 4684              		.loc 1 3606 7 view -0
 4685              		.cfi_startproc
 4686              		@ args = 0, pretend = 0, frame = 0
 4687              		@ frame_needed = 0, uses_anonymous_args = 0
3607:src/display.c **** 	int len = 0;
 4688              		.loc 1 3607 2 view .LVU1427
3608:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4689              		.loc 1 3608 2 view .LVU1428
3606:src/display.c **** 	int len = 0;
 4690              		.loc 1 3606 7 is_stmt 0 view .LVU1429
 4691 0000 70B5     		push	{r4, r5, r6, lr}
 4692              		.cfi_def_cfa_offset 16
 4693              		.cfi_offset 4, -16
 4694              		.cfi_offset 5, -12
 4695              		.cfi_offset 6, -8
 4696              		.cfi_offset 14, -4
3606:src/display.c **** 	int len = 0;
 4697              		.loc 1 3606 7 view .LVU1430
 4698 0002 0446     		mov	r4, r0
3609:src/display.c **** 	while (*s != '\0') {
 4699              		.loc 1 3609 9 view .LVU1431
 4700 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4701              	.LVL507:
3608:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4702              		.loc 1 3608 34 view .LVU1432
 4703 0006 0E1E     		subs	r6, r1, #0
 4704 0008 18BF     		it	ne
 4705 000a 4FF48076 		movne	r6, #256
 4706              	.LVL508:
 4707              		.loc 1 3609 2 is_stmt 1 view .LVU1433
 4708              		.loc 1 3609 8 view .LVU1434
 4709 000e A0B1     		cbz	r0, .L455
ARM GAS  /tmp/ccdg5rgB.s 			page 169


3607:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4710              		.loc 1 3607 6 is_stmt 0 view .LVU1435
 4711 0010 0025     		movs	r5, #0
 4712 0012 06E0     		b	.L453
 4713              	.LVL509:
 4714              	.L451:
3610:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3611:src/display.c **** 	  if (s[0] == '\007') {
3612:src/display.c **** 	    len += s[1] & 0x1F;
3613:src/display.c **** 	    s += 3;
3614:src/display.c **** 	    continue;
3615:src/display.c **** 	  }
3616:src/display.c **** #endif
3617:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4715              		.loc 1 3617 11 view .LVU1436
 4716 0014 3044     		add	r0, r0, r6
 4717 0016 FFF7FEFF 		bl	charlengths
 4718              	.LVL510:
 4719              		.loc 1 3617 42 view .LVU1437
 4720 001a 0134     		adds	r4, r4, #1
 4721              	.LVL511:
 4722              		.loc 1 3617 8 view .LVU1438
 4723 001c 0544     		add	r5, r5, r0
 4724              	.LVL512:
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4725              		.loc 1 3609 8 is_stmt 1 view .LVU1439
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4726              		.loc 1 3609 9 is_stmt 0 view .LVU1440
 4727 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4728              		.loc 1 3609 8 view .LVU1441
 4729 0020 48B1     		cbz	r0, .L448
 4730              	.LVL513:
 4731              	.L453:
3611:src/display.c **** 	    len += s[1] & 0x1F;
 4732              		.loc 1 3611 4 is_stmt 1 view .LVU1442
 4733              		.loc 1 3617 4 view .LVU1443
3611:src/display.c **** 	    len += s[1] & 0x1F;
 4734              		.loc 1 3611 7 is_stmt 0 view .LVU1444
 4735 0022 0728     		cmp	r0, #7
 4736 0024 F6D1     		bne	.L451
3612:src/display.c **** 	    s += 3;
 4737              		.loc 1 3612 6 is_stmt 1 view .LVU1445
3612:src/display.c **** 	    s += 3;
 4738              		.loc 1 3612 18 is_stmt 0 view .LVU1446
 4739 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4740              		.loc 1 3609 9 view .LVU1447
 4741 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3612:src/display.c **** 	    s += 3;
 4742              		.loc 1 3612 18 view .LVU1448
 4743 002a 03F01F03 		and	r3, r3, #31
3613:src/display.c **** 	    continue;
 4744              		.loc 1 3613 8 view .LVU1449
 4745 002e 0334     		adds	r4, r4, #3
 4746              	.LVL514:
3612:src/display.c **** 	    s += 3;
ARM GAS  /tmp/ccdg5rgB.s 			page 170


 4747              		.loc 1 3612 10 view .LVU1450
 4748 0030 1D44     		add	r5, r5, r3
 4749              	.LVL515:
3613:src/display.c **** 	    continue;
 4750              		.loc 1 3613 6 is_stmt 1 view .LVU1451
3614:src/display.c **** 	  }
 4751              		.loc 1 3614 6 view .LVU1452
3609:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4752              		.loc 1 3609 8 view .LVU1453
 4753 0032 0028     		cmp	r0, #0
 4754 0034 F5D1     		bne	.L453
 4755              	.L448:
3618:src/display.c **** 	}
3619:src/display.c **** 	return len;
3620:src/display.c ****       }
 4756              		.loc 1 3620 7 is_stmt 0 view .LVU1454
 4757 0036 2846     		mov	r0, r5
 4758 0038 70BD     		pop	{r4, r5, r6, pc}
 4759              	.LVL516:
 4760              	.L455:
3607:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4761              		.loc 1 3607 6 view .LVU1455
 4762 003a 0546     		mov	r5, r0
3619:src/display.c ****       }
 4763              		.loc 1 3619 2 is_stmt 1 view .LVU1456
 4764              		.loc 1 3620 7 is_stmt 0 view .LVU1457
 4765 003c 2846     		mov	r0, r5
 4766 003e 70BD     		pop	{r4, r5, r6, pc}
 4767              		.loc 1 3620 7 view .LVU1458
 4768              		.cfi_endproc
 4769              	.LFE40:
 4771              		.section	.text.set_status,"ax",%progbits
 4772              		.align	1
 4773              		.p2align 2,,3
 4774              		.syntax unified
 4775              		.thumb
 4776              		.thumb_func
 4777              		.fpu fpv4-sp-d16
 4779              	set_status:
 4780              	.LVL517:
 4781              	.LFB43:
3621:src/display.c **** 
3622:src/display.c **** 
3623:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3624:src/display.c ****        * If this is larger than the display, return true.
3625:src/display.c ****        */
3626:src/display.c ****       static int string_too_large(const char *s) {
3627:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3628:src/display.c ****       }
3629:src/display.c ****       static int string_too_large_top(const char *s) {
3630:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3631:src/display.c ****       }
3632:src/display.c **** 
3633:src/display.c **** 
3634:src/display.c ****       /* Display the given string on the screen.
3635:src/display.c ****        */
3636:src/display.c ****       static void set_status(const char *str) {
ARM GAS  /tmp/ccdg5rgB.s 			page 171


 4782              		.loc 1 3636 47 is_stmt 1 view -0
 4783              		.cfi_startproc
 4784              		@ args = 0, pretend = 0, frame = 0
 4785              		@ frame_needed = 0, uses_anonymous_args = 0
3637:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4786              		.loc 1 3637 2 view .LVU1460
3636:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4787              		.loc 1 3636 47 is_stmt 0 view .LVU1461
 4788 0000 10B5     		push	{r4, lr}
 4789              		.cfi_def_cfa_offset 8
 4790              		.cfi_offset 4, -8
 4791              		.cfi_offset 14, -4
 4792              		.loc 1 3637 24 view .LVU1462
 4793 0002 0D4B     		ldr	r3, .L463
 4794              		.loc 1 3637 2 view .LVU1463
 4795 0004 93F91630 		ldrsb	r3, [r3, #22]
 4796 0008 002B     		cmp	r3, #0
3636:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4797              		.loc 1 3636 47 view .LVU1464
 4798 000a 82B0     		sub	sp, sp, #8
 4799              		.cfi_def_cfa_offset 16
3636:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4800              		.loc 1 3636 47 view .LVU1465
 4801 000c 0446     		mov	r4, r0
 4802              		.loc 1 3637 2 view .LVU1466
 4803 000e 0ADA     		bge	.L462
 4804 0010 0121     		movs	r1, #1
 4805              	.LVL518:
 4806              	.L459:
 4807              	.LBB378:
 4808              	.LBI378:
3478:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4809              		.loc 1 3478 19 is_stmt 1 discriminator 6 view .LVU1467
 4810              	.LBB379:
3479:src/display.c ****       }
 4811              		.loc 1 3479 2 discriminator 6 view .LVU1468
 4812 0012 40F24A23 		movw	r3, #586
 4813 0016 0093     		str	r3, [sp]
 4814 0018 2046     		mov	r0, r4
 4815 001a 8E23     		movs	r3, #142
 4816 001c 4A22     		movs	r2, #74
 4817 001e FFF7FEFF 		bl	s_s_sized
 4818              	.LVL519:
3479:src/display.c ****       }
 4819              		.loc 1 3479 2 is_stmt 0 discriminator 6 view .LVU1469
 4820              	.LBE379:
 4821              	.LBE378:
3638:src/display.c ****       }
 4822              		.loc 1 3638 7 discriminator 6 view .LVU1470
 4823 0022 02B0     		add	sp, sp, #8
 4824              		.cfi_remember_state
 4825              		.cfi_def_cfa_offset 8
 4826              		@ sp needed
 4827 0024 10BD     		pop	{r4, pc}
 4828              	.LVL520:
 4829              	.L462:
 4830              		.cfi_restore_state
ARM GAS  /tmp/ccdg5rgB.s 			page 172


 4831              	.LBB380:
 4832              	.LBI380:
3626:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4833              		.loc 1 3626 18 is_stmt 1 view .LVU1471
 4834              	.LBB381:
3627:src/display.c ****       }
 4835              		.loc 1 3627 2 view .LVU1472
3627:src/display.c ****       }
 4836              		.loc 1 3627 9 is_stmt 0 view .LVU1473
 4837 0026 0021     		movs	r1, #0
 4838 0028 FFF7FEFF 		bl	pixel_length
 4839              	.LVL521:
3627:src/display.c ****       }
 4840              		.loc 1 3627 9 view .LVU1474
 4841              	.LBE381:
 4842              	.LBE380:
3637:src/display.c ****       }
 4843              		.loc 1 3637 2 view .LVU1475
 4844 002c 4B28     		cmp	r0, #75
 4845 002e D4BF     		ite	le
 4846 0030 0021     		movle	r1, #0
 4847 0032 0121     		movgt	r1, #1
 4848 0034 EDE7     		b	.L459
 4849              	.L464:
 4850 0036 00BF     		.align	2
 4851              	.L463:
 4852 0038 00000000 		.word	StateWhileOn
 4853              		.cfi_endproc
 4854              	.LFE43:
 4856              		.section	.text.set_x_dn,"ax",%progbits
 4857              		.align	1
 4858              		.p2align 2,,3
 4859              		.global	set_x_dn
 4860              		.syntax unified
 4861              		.thumb
 4862              		.thumb_func
 4863              		.fpu fpv4-sp-d16
 4865              	set_x_dn:
 4866              	.LVL522:
 4867              	.LFB27:
2022:src/display.c **** 	char x[50], *obp = x;
 4868              		.loc 1 2022 67 is_stmt 1 view -0
 4869              		.cfi_startproc
 4870              		@ args = 0, pretend = 0, frame = 152
 4871              		@ frame_needed = 0, uses_anonymous_args = 0
2023:src/display.c **** 	int odig = 0;
 4872              		.loc 1 2023 2 view .LVU1477
2022:src/display.c **** 	char x[50], *obp = x;
 4873              		.loc 1 2022 67 is_stmt 0 view .LVU1478
 4874 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4875              		.cfi_def_cfa_offset 36
 4876              		.cfi_offset 4, -36
 4877              		.cfi_offset 5, -32
 4878              		.cfi_offset 6, -28
 4879              		.cfi_offset 7, -24
 4880              		.cfi_offset 8, -20
 4881              		.cfi_offset 9, -16
ARM GAS  /tmp/ccdg5rgB.s 			page 173


 4882              		.cfi_offset 10, -12
 4883              		.cfi_offset 11, -8
 4884              		.cfi_offset 14, -4
 4885 0004 A7B0     		sub	sp, sp, #156
 4886              		.cfi_def_cfa_offset 192
 4887              	.LVL523:
2024:src/display.c **** 	int show_exp = 0;
 4888              		.loc 1 2024 2 is_stmt 1 view .LVU1479
2025:src/display.c **** 	int j;
 4889              		.loc 1 2025 2 view .LVU1480
2026:src/display.c **** 	char mantissa[64];
 4890              		.loc 1 2026 2 view .LVU1481
2027:src/display.c **** 	int exp = 0;
 4891              		.loc 1 2027 2 view .LVU1482
2028:src/display.c **** 	char *p = mantissa;
 4892              		.loc 1 2028 2 view .LVU1483
2029:src/display.c **** 	char *r;
 4893              		.loc 1 2029 2 view .LVU1484
2030:src/display.c **** 	const char *q;
 4894              		.loc 1 2030 2 view .LVU1485
2031:src/display.c **** 	int count, i;
 4895              		.loc 1 2031 2 view .LVU1486
2032:src/display.c **** 	int extra_digits = 0;
 4896              		.loc 1 2032 2 view .LVU1487
2033:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4897              		.loc 1 2033 2 view .LVU1488
2035:src/display.c **** 	int dispdigs;
 4898              		.loc 1 2035 2 view .LVU1489
2036:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4899              		.loc 1 2036 2 view .LVU1490
2037:src/display.c **** #else
 4900              		.loc 1 2037 2 view .LVU1491
2022:src/display.c **** 	char x[50], *obp = x;
 4901              		.loc 1 2022 67 is_stmt 0 view .LVU1492
 4902 0006 0746     		mov	r7, r0
2037:src/display.c **** #else
 4903              		.loc 1 2037 13 view .LVU1493
 4904 0008 08A8     		add	r0, sp, #32
 4905              	.LVL524:
2022:src/display.c **** 	char x[50], *obp = x;
 4906              		.loc 1 2022 67 view .LVU1494
 4907 000a 0C46     		mov	r4, r1
 4908 000c 0192     		str	r2, [sp, #4]
2037:src/display.c **** #else
 4909              		.loc 1 2037 13 view .LVU1495
 4910 000e FFF7FEFF 		bl	get_dispmode_digs
 4911              	.LVL525:
2037:src/display.c **** #else
 4912              		.loc 1 2037 13 view .LVU1496
 4913 0012 0546     		mov	r5, r0
 4914              	.LVL526:
2042:src/display.c **** 	int negative = 0;
 4915              		.loc 1 2042 2 is_stmt 1 view .LVU1497
2043:src/display.c **** 	int trimzeros = 0;
 4916              		.loc 1 2043 2 view .LVU1498
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4917              		.loc 1 2044 2 view .LVU1499
ARM GAS  /tmp/ccdg5rgB.s 			page 174


2052:src/display.c **** #endif
 4918              		.loc 1 2052 2 view .LVU1500
2055:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4919              		.loc 1 2055 2 view .LVU1501
 4920 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4921              	.LVL527:
2057:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4922              		.loc 1 2057 2 view .LVU1502
2057:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4923              		.loc 1 2057 5 is_stmt 0 view .LVU1503
 4924 0018 002C     		cmp	r4, #0
 4925 001a 00F08181 		beq	.L466
 4926              	.L469:
2082:src/display.c **** 	  return;
 4927              		.loc 1 2082 2 is_stmt 1 view .LVU1504
2082:src/display.c **** 	  return;
 4928              		.loc 1 2082 6 is_stmt 0 view .LVU1505
 4929 001e 2146     		mov	r1, r4
 4930 0020 07F10800 		add	r0, r7, #8
 4931 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4932              	.LVL528:
2082:src/display.c **** 	  return;
 4933              		.loc 1 2082 5 view .LVU1506
 4934 0028 8246     		mov	r10, r0
 4935 002a 0028     		cmp	r0, #0
 4936 002c 40F07081 		bne	.L465
2085:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4937              		.loc 1 2085 2 is_stmt 1 view .LVU1507
2085:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4938              		.loc 1 2085 12 is_stmt 0 view .LVU1508
 4939 0030 C94E     		ldr	r6, .L714
2085:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4940              		.loc 1 2085 5 view .LVU1509
 4941 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4942 0034 012B     		cmp	r3, #1
 4943 0036 00F0EC82 		beq	.L691
2028:src/display.c **** 	char *p = mantissa;
 4944              		.loc 1 2028 6 view .LVU1510
 4945 003a 8046     		mov	r8, r0
 4946              	.LVL529:
 4947              	.L472:
2091:src/display.c **** 
 4948              		.loc 1 2091 2 is_stmt 1 view .LVU1511
 4949 003c 0DF1240B 		add	fp, sp, #36
 4950              	.LVL530:
2091:src/display.c **** 
 4951              		.loc 1 2091 2 is_stmt 0 view .LVU1512
 4952 0040 5846     		mov	r0, fp
 4953 0042 3222     		movs	r2, #50
 4954 0044 0021     		movs	r1, #0
 4955 0046 FFF7FEFF 		bl	xset
 4956              	.LVL531:
2093:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4957              		.loc 1 2093 2 is_stmt 1 view .LVU1513
2093:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4958              		.loc 1 2093 6 is_stmt 0 view .LVU1514
 4959 004a 3846     		mov	r0, r7
ARM GAS  /tmp/ccdg5rgB.s 			page 175


 4960 004c FFF7FEFF 		bl	dn_eq0
 4961              	.LVL532:
2093:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4962              		.loc 1 2093 5 view .LVU1515
 4963 0050 0028     		cmp	r0, #0
 4964 0052 00F06081 		beq	.L473
2094:src/display.c **** 	    x[0] = '-';
 4965              		.loc 1 2094 4 is_stmt 1 view .LVU1516
2094:src/display.c **** 	    x[0] = '-';
 4966              		.loc 1 2094 7 is_stmt 0 view .LVU1517
 4967 0056 97F90830 		ldrsb	r3, [r7, #8]
 4968 005a 002B     		cmp	r3, #0
 4969 005c C0F20083 		blt	.L692
 4970              	.L474:
2098:src/display.c **** 	} else
 4971              		.loc 1 2098 6 is_stmt 1 view .LVU1518
2098:src/display.c **** 	} else
 4972              		.loc 1 2098 11 is_stmt 0 view .LVU1519
 4973 0060 3023     		movs	r3, #48
 4974 0062 8DF82430 		strb	r3, [sp, #36]
 4975              	.L475:
2102:src/display.c **** 	  show_x(x, exp);
 4976              		.loc 1 2102 2 is_stmt 1 view .LVU1520
2102:src/display.c **** 	  show_x(x, exp);
 4977              		.loc 1 2102 12 is_stmt 0 view .LVU1521
 4978 0066 96F81190 		ldrb	r9, [r6, #17]	@ zero_extendqisi2
2102:src/display.c **** 	  show_x(x, exp);
 4979              		.loc 1 2102 5 view .LVU1522
 4980 006a B9F1010F 		cmp	r9, #1
 4981 006e 00F04583 		beq	.L693
2108:src/display.c **** 	  //  ALL mode: fill the display
 4982              		.loc 1 2108 2 is_stmt 1 view .LVU1523
2108:src/display.c **** 	  //  ALL mode: fill the display
 4983              		.loc 1 2108 5 is_stmt 0 view .LVU1524
 4984 0072 002D     		cmp	r5, #0
 4985 0074 40F07881 		bne	.L694
2110:src/display.c **** 	else
 4986              		.loc 1 2110 4 is_stmt 1 view .LVU1525
2110:src/display.c **** 	else
 4987              		.loc 1 2110 25 is_stmt 0 view .LVU1526
 4988 0078 019E     		ldr	r6, [sp, #4]
 4989              	.LBB399:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4990              		.loc 1 2117 11 view .LVU1527
 4991 007a 089B     		ldr	r3, [sp, #32]
 4992              	.LBE399:
2110:src/display.c **** 	else
 4993              		.loc 1 2110 25 view .LVU1528
 4994 007c 3168     		ldr	r1, [r6]
 4995              	.LBB400:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4996              		.loc 1 2117 11 view .LVU1529
 4997 007e 2A46     		mov	r2, r5
 4998 0080 3846     		mov	r0, r7
 4999              	.LBE400:
2110:src/display.c **** 	else
 5000              		.loc 1 2110 25 view .LVU1530
ARM GAS  /tmp/ccdg5rgB.s 			page 176


 5001 0082 4D1E     		subs	r5, r1, #1
 5002              	.LVL533:
 5003              	.LBB401:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5004              		.loc 1 2117 11 view .LVU1531
 5005 0084 07A9     		add	r1, sp, #28
 5006              	.LBE401:
2110:src/display.c **** 	else
 5007              		.loc 1 2110 7 view .LVU1532
 5008 0086 0795     		str	r5, [sp, #28]
2114:src/display.c **** 	  int orig_mode = mode;
 5009              		.loc 1 2114 2 is_stmt 1 view .LVU1533
 5010              	.LBB402:
2115:src/display.c **** 
 5011              		.loc 1 2115 4 view .LVU1534
 5012              	.LVL534:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5013              		.loc 1 2117 4 view .LVU1535
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5014              		.loc 1 2117 11 is_stmt 0 view .LVU1536
 5015 0088 FFF7FEFF 		bl	std_round_fix
 5016              	.LVL535:
2122:src/display.c ****  	}
 5017              		.loc 1 2122 27 view .LVU1537
 5018 008c 3368     		ldr	r3, [r6]
 5019 008e 013B     		subs	r3, r3, #1
2122:src/display.c ****  	}
 5020              		.loc 1 2122 9 view .LVU1538
 5021 0090 0793     		str	r3, [sp, #28]
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5022              		.loc 1 2120 16 view .LVU1539
 5023 0092 0123     		movs	r3, #1
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5024              		.loc 1 2117 11 view .LVU1540
 5025 0094 0546     		mov	r5, r0
 5026              	.LVL536:
2118:src/display.c **** 	    // allow zeros to be trimmed
 5027              		.loc 1 2118 4 is_stmt 1 view .LVU1541
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5028              		.loc 1 2120 6 view .LVU1542
2121:src/display.c **** 	    dd = *display_digits - 1;
 5029              		.loc 1 2121 4 view .LVU1543
2122:src/display.c ****  	}
 5030              		.loc 1 2122 6 view .LVU1544
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5031              		.loc 1 2120 16 is_stmt 0 view .LVU1545
 5032 0096 0493     		str	r3, [sp, #16]
 5033              	.LVL537:
 5034              	.L594:
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5035              		.loc 1 2120 16 view .LVU1546
 5036              	.LBE402:
2134:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 5037              		.loc 1 2134 2 is_stmt 1 view .LVU1547
 5038 0098 0DF15809 		add	r9, sp, #88
 5039              	.LVL538:
2134:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
ARM GAS  /tmp/ccdg5rgB.s 			page 177


 5040              		.loc 1 2134 2 is_stmt 0 view .LVU1548
 5041 009c 3F22     		movs	r2, #63
 5042 009e 3021     		movs	r1, #48
 5043 00a0 4846     		mov	r0, r9
 5044 00a2 FFF7FEFF 		bl	xset
 5045              	.LVL539:
2135:src/display.c **** 
 5046              		.loc 1 2135 2 is_stmt 1 view .LVU1549
2135:src/display.c **** 
 5047              		.loc 1 2135 31 is_stmt 0 view .LVU1550
 5048 00a6 0023     		movs	r3, #0
2137:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5049              		.loc 1 2137 6 view .LVU1551
 5050 00a8 4521     		movs	r1, #69
 5051 00aa 5846     		mov	r0, fp
2135:src/display.c **** 
 5052              		.loc 1 2135 31 view .LVU1552
 5053 00ac 8DF89730 		strb	r3, [sp, #151]
2137:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5054              		.loc 1 2137 2 is_stmt 1 view .LVU1553
2137:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 5055              		.loc 1 2137 6 is_stmt 0 view .LVU1554
 5056 00b0 FFF7FEFF 		bl	find_char
 5057              	.LVL540:
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5058              		.loc 1 2139 2 is_stmt 1 view .LVU1555
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5059              		.loc 1 2139 5 is_stmt 0 view .LVU1556
 5060 00b4 0646     		mov	r6, r0
 5061 00b6 0028     		cmp	r0, #0
 5062 00b8 00F06481 		beq	.L695
 5063              	.L491:
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5064              		.loc 1 2142 4 is_stmt 1 view .LVU1557
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5065              		.loc 1 2142 10 is_stmt 0 view .LVU1558
 5066 00bc 701C     		adds	r0, r6, #1
 5067              	.LVL541:
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5068              		.loc 1 2142 10 view .LVU1559
 5069 00be FFF7FEFF 		bl	s_to_i
 5070              	.LVL542:
2143:src/display.c **** 	}
 5071              		.loc 1 2143 7 view .LVU1560
 5072 00c2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 5073 00c4 442B     		cmp	r3, #68
2142:src/display.c **** 	  if (*q == 'D') exp = -exp;
 5074              		.loc 1 2142 10 view .LVU1561
 5075 00c6 0646     		mov	r6, r0
 5076              	.LVL543:
2143:src/display.c **** 	}
 5077              		.loc 1 2143 4 is_stmt 1 view .LVU1562
2143:src/display.c **** 	}
 5078              		.loc 1 2143 19 view .LVU1563
2143:src/display.c **** 	}
 5079              		.loc 1 2143 23 is_stmt 0 view .LVU1564
 5080 00c8 08BF     		it	eq
ARM GAS  /tmp/ccdg5rgB.s 			page 178


 5081 00ca 4642     		rsbeq	r6, r0, #0
 5082              	.LVL544:
 5083              	.L492:
2151:src/display.c **** 	if (!res) {
 5084              		.loc 1 2151 2 is_stmt 1 view .LVU1565
2151:src/display.c **** 	if (!res) {
 5085              		.loc 1 2151 12 view .LVU1566
2151:src/display.c **** 	if (!res) {
 5086              		.loc 1 2151 2 is_stmt 0 view .LVU1567
 5087 00cc 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 5088 00d0 202B     		cmp	r3, #32
2151:src/display.c **** 	if (!res) {
 5089              		.loc 1 2151 8 view .LVU1568
 5090 00d2 D846     		mov	r8, fp
2151:src/display.c **** 	if (!res) {
 5091              		.loc 1 2151 2 view .LVU1569
 5092 00d4 03D1     		bne	.L493
 5093              	.LVL545:
 5094              	.L494:
2151:src/display.c **** 	if (!res) {
 5095              		.loc 1 2151 27 is_stmt 1 discriminator 3 view .LVU1570
2151:src/display.c **** 	if (!res) {
 5096              		.loc 1 2151 23 discriminator 3 view .LVU1571
2151:src/display.c **** 	if (!res) {
 5097              		.loc 1 2151 12 discriminator 3 view .LVU1572
2151:src/display.c **** 	if (!res) {
 5098              		.loc 1 2151 2 is_stmt 0 discriminator 3 view .LVU1573
 5099 00d6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5100              	.LVL546:
2151:src/display.c **** 	if (!res) {
 5101              		.loc 1 2151 2 discriminator 3 view .LVU1574
 5102 00da 202B     		cmp	r3, #32
 5103 00dc FBD0     		beq	.L494
 5104              	.LVL547:
 5105              	.L493:
2152:src/display.c **** 	  CLR_EXP_SIGN;
 5106              		.loc 1 2152 2 is_stmt 1 view .LVU1575
2152:src/display.c **** 	  CLR_EXP_SIGN;
 5107              		.loc 1 2152 5 is_stmt 0 view .LVU1576
 5108 00de 002C     		cmp	r4, #0
 5109 00e0 00F0C982 		beq	.L696
 5110              	.L495:
2156:src/display.c **** 	  negative = 1;
 5111              		.loc 1 2156 2 is_stmt 1 view .LVU1577
2156:src/display.c **** 	  negative = 1;
 5112              		.loc 1 2156 6 is_stmt 0 view .LVU1578
 5113 00e4 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2156:src/display.c **** 	  negative = 1;
 5114              		.loc 1 2156 5 view .LVU1579
 5115 00e8 2D2B     		cmp	r3, #45
 5116 00ea 00F0DB81 		beq	.L697
2159:src/display.c **** 	  q++;
 5117              		.loc 1 2159 9 is_stmt 1 view .LVU1580
2159:src/display.c **** 	  q++;
 5118              		.loc 1 2159 12 is_stmt 0 view .LVU1581
 5119 00ee 2B2B     		cmp	r3, #43
 5120 00f0 00F0AF82 		beq	.L698
ARM GAS  /tmp/ccdg5rgB.s 			page 179


2043:src/display.c **** 	int trimzeros = 0;
 5121              		.loc 1 2043 6 view .LVU1582
 5122 00f4 0022     		movs	r2, #0
 5123 00f6 0392     		str	r2, [sp, #12]
 5124              	.LVL548:
 5125              	.L497:
2161:src/display.c **** 	if (*q == '.') {
 5126              		.loc 1 2161 9 is_stmt 1 discriminator 1 view .LVU1583
2161:src/display.c **** 	if (*q == '.') {
 5127              		.loc 1 2161 2 is_stmt 0 discriminator 1 view .LVU1584
 5128 00f8 302B     		cmp	r3, #48
 5129 00fa 03D1     		bne	.L499
 5130              	.LVL549:
 5131              	.L498:
2161:src/display.c **** 	if (*q == '.') {
 5132              		.loc 1 2161 24 is_stmt 1 discriminator 2 view .LVU1585
2161:src/display.c **** 	if (*q == '.') {
 5133              		.loc 1 2161 20 discriminator 2 view .LVU1586
2161:src/display.c **** 	if (*q == '.') {
 5134              		.loc 1 2161 9 discriminator 2 view .LVU1587
 5135 00fc 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5136              	.LVL550:
2161:src/display.c **** 	if (*q == '.') {
 5137              		.loc 1 2161 2 is_stmt 0 discriminator 2 view .LVU1588
 5138 0100 302B     		cmp	r3, #48
 5139 0102 FBD0     		beq	.L498
 5140              	.LVL551:
 5141              	.L499:
2162:src/display.c **** 	  do
 5142              		.loc 1 2162 2 is_stmt 1 view .LVU1589
2162:src/display.c **** 	  do
 5143              		.loc 1 2162 5 is_stmt 0 view .LVU1590
 5144 0104 2E2B     		cmp	r3, #46
 5145 0106 00F0B581 		beq	.L699
2169:src/display.c **** 	    *p++ = *q++;
 5146              		.loc 1 2169 4 is_stmt 1 view .LVU1591
2169:src/display.c **** 	    *p++ = *q++;
 5147              		.loc 1 2169 7 is_stmt 0 view .LVU1592
 5148 010a A3F13002 		sub	r2, r3, #48
 5149 010e 092A     		cmp	r2, #9
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5150              		.loc 1 2170 6 is_stmt 1 view .LVU1593
 5151              	.LVL552:
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5152              		.loc 1 2170 15 is_stmt 0 view .LVU1594
 5153 0110 9CBF     		itt	ls
 5154 0112 08F10108 		addls	r8, r8, #1
 5155              	.LVL553:
2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5156              		.loc 1 2170 11 view .LVU1595
 5157 0116 8DF85830 		strbls	r3, [sp, #88]
2171:src/display.c **** 	    *p++ = *q++;
 5158              		.loc 1 2171 11 view .LVU1596
 5159 011a 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2171:src/display.c **** 	    *p++ = *q++;
 5160              		.loc 1 2171 10 view .LVU1597
 5161 011e A2F13003 		sub	r3, r2, #48
ARM GAS  /tmp/ccdg5rgB.s 			page 180


2170:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 5162              		.loc 1 2170 8 view .LVU1598
 5163 0122 94BF     		ite	ls
 5164 0124 0DF15901 		addls	r1, sp, #89
2029:src/display.c **** 	char *r;
 5165              		.loc 1 2029 8 view .LVU1599
 5166 0128 4946     		movhi	r1, r9
 5167              	.LVL554:
2171:src/display.c **** 	    *p++ = *q++;
 5168              		.loc 1 2171 10 is_stmt 1 view .LVU1600
 5169 012a 092B     		cmp	r3, #9
 5170 012c 0ED8     		bhi	.L505
 5171 012e A6EB0800 		sub	r0, r6, r8
 5172 0132 08F10103 		add	r3, r8, #1
 5173              	.L506:
 5174              	.LVL555:
2172:src/display.c **** 	    exp++;
 5175              		.loc 1 2172 6 view .LVU1601
2172:src/display.c **** 	    exp++;
 5176              		.loc 1 2172 11 is_stmt 0 view .LVU1602
 5177 0136 01F8012B 		strb	r2, [r1], #1
 5178              	.LVL556:
2172:src/display.c **** 	    exp++;
 5179              		.loc 1 2172 15 view .LVU1603
 5180 013a 9846     		mov	r8, r3
 5181              	.LVL557:
2173:src/display.c **** 	  }
 5182              		.loc 1 2173 6 is_stmt 1 view .LVU1604
 5183 013c C618     		adds	r6, r0, r3
 5184              	.LVL558:
2171:src/display.c **** 	    *p++ = *q++;
 5185              		.loc 1 2171 10 view .LVU1605
2171:src/display.c **** 	    *p++ = *q++;
 5186              		.loc 1 2171 11 is_stmt 0 view .LVU1606
 5187 013e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 5188              	.LVL559:
2171:src/display.c **** 	    *p++ = *q++;
 5189              		.loc 1 2171 10 view .LVU1607
 5190 0142 A2F1300C 		sub	ip, r2, #48
 5191 0146 BCF1090F 		cmp	ip, #9
 5192 014a F4D9     		bls	.L506
 5193              	.LVL560:
 5194              	.L505:
2175:src/display.c **** 	    q++;
 5195              		.loc 1 2175 4 is_stmt 1 view .LVU1608
2175:src/display.c **** 	    q++;
 5196              		.loc 1 2175 7 is_stmt 0 view .LVU1609
 5197 014c 2E2A     		cmp	r2, #46
 5198 014e 00F06E82 		beq	.L700
 5199              	.LVL561:
 5200              	.L502:
2182:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5201              		.loc 1 2182 2 is_stmt 1 view .LVU1610
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5202              		.loc 1 2183 12 is_stmt 0 view .LVU1611
 5203 0152 019B     		ldr	r3, [sp, #4]
 5204 0154 079A     		ldr	r2, [sp, #28]
ARM GAS  /tmp/ccdg5rgB.s 			page 181


 5205 0156 1B68     		ldr	r3, [r3]
 5206 0158 0293     		str	r3, [sp, #8]
2182:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 5207              		.loc 1 2182 5 view .LVU1612
 5208 015a 012D     		cmp	r5, #1
 5209 015c 00F07A81 		beq	.L508
 5210              	.LVL562:
 5211              	.L690:
2184:src/display.c **** 	  else {
 5212              		.loc 1 2184 35 view .LVU1613
 5213 0160 0021     		movs	r1, #0
 5214              	.LVL563:
 5215              	.L509:
2196:src/display.c **** 	if (*p >= '5') {	// Round up
 5216              		.loc 1 2196 2 is_stmt 1 view .LVU1614
 5217 0162 02F1010E 		add	lr, r2, #1
2196:src/display.c **** 	if (*p >= '5') {	// Round up
 5218              		.loc 1 2196 35 is_stmt 0 view .LVU1615
 5219 0166 7144     		add	r1, r1, lr
2196:src/display.c **** 	if (*p >= '5') {	// Round up
 5220              		.loc 1 2196 4 view .LVU1616
 5221 0168 09EB0103 		add	r3, r9, r1
 5222              	.LVL564:
2197:src/display.c **** 	  *p = '0';
 5223              		.loc 1 2197 2 is_stmt 1 view .LVU1617
2197:src/display.c **** 	  *p = '0';
 5224              		.loc 1 2197 6 is_stmt 0 view .LVU1618
 5225 016c 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
2197:src/display.c **** 	  *p = '0';
 5226              		.loc 1 2197 5 view .LVU1619
 5227 0170 3428     		cmp	r0, #52
 5228 0172 26D9     		bls	.L514
2198:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5229              		.loc 1 2198 4 is_stmt 1 view .LVU1620
2198:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5230              		.loc 1 2198 7 is_stmt 0 view .LVU1621
 5231 0174 3020     		movs	r0, #48
 5232 0176 09F80100 		strb	r0, [r9, r1]
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5233              		.loc 1 2199 4 is_stmt 1 view .LVU1622
 5234              	.LVL565:
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5235              		.loc 1 2199 23 view .LVU1623
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5236              		.loc 1 2199 4 is_stmt 0 view .LVU1624
 5237 017a 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5238 017e 3928     		cmp	r0, #57
 5239 0180 40F0DD83 		bne	.L515
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5240              		.loc 1 2199 11 view .LVU1625
 5241 0184 4846     		mov	r0, r9
 5242              	.LVL566:
 5243              	.L516:
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5244              		.loc 1 2199 38 is_stmt 1 discriminator 3 view .LVU1626
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5245              		.loc 1 2199 34 discriminator 3 view .LVU1627
ARM GAS  /tmp/ccdg5rgB.s 			page 182


2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5246              		.loc 1 2199 23 discriminator 3 view .LVU1628
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5247              		.loc 1 2199 4 is_stmt 0 discriminator 3 view .LVU1629
 5248 0186 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5249              	.LVL567:
2199:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5250              		.loc 1 2199 4 discriminator 3 view .LVU1630
 5251 018a BCF1390F 		cmp	ip, #57
 5252 018e FAD0     		beq	.L516
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5253              		.loc 1 2200 4 is_stmt 1 view .LVU1631
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5254              		.loc 1 2200 7 is_stmt 0 view .LVU1632
 5255 0190 8342     		cmp	r3, r0
 5256 0192 00F00D81 		beq	.L701
 5257              	.LVL568:
 5258              	.L592:
2209:src/display.c **** 	      *p = '0';
 5259              		.loc 1 2209 12 is_stmt 1 view .LVU1633
2209:src/display.c **** 	      *p = '0';
 5260              		.loc 1 2209 13 is_stmt 0 view .LVU1634
 5261 0196 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2209:src/display.c **** 	      *p = '0';
 5262              		.loc 1 2209 12 view .LVU1635
 5263 019a BCF1390F 		cmp	ip, #57
 5264 019e 03F1FF30 		add	r0, r3, #-1
 5265              	.LVL569:
2209:src/display.c **** 	      *p = '0';
 5266              		.loc 1 2209 12 view .LVU1636
 5267 01a2 08D1     		bne	.L519
2210:src/display.c **** 	    (*p)++;
 5268              		.loc 1 2210 11 view .LVU1637
 5269 01a4 4FF0300E 		mov	lr, #48
 5270              	.L518:
2210:src/display.c **** 	    (*p)++;
 5271              		.loc 1 2210 8 is_stmt 1 view .LVU1638
2210:src/display.c **** 	    (*p)++;
 5272              		.loc 1 2210 11 is_stmt 0 view .LVU1639
 5273 01a8 80F800E0 		strb	lr, [r0]
2209:src/display.c **** 	      *p = '0';
 5274              		.loc 1 2209 12 is_stmt 1 view .LVU1640
 5275              	.LVL570:
2209:src/display.c **** 	      *p = '0';
 5276              		.loc 1 2209 13 is_stmt 0 view .LVU1641
 5277 01ac 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5278              	.LVL571:
2209:src/display.c **** 	      *p = '0';
 5279              		.loc 1 2209 12 view .LVU1642
 5280 01b0 BCF1390F 		cmp	ip, #57
 5281 01b4 F8D0     		beq	.L518
 5282              	.L519:
2211:src/display.c **** 	  }
 5283              		.loc 1 2211 6 is_stmt 1 view .LVU1643
2211:src/display.c **** 	  }
 5284              		.loc 1 2211 10 is_stmt 0 view .LVU1644
 5285 01b6 0CF1010C 		add	ip, ip, #1
ARM GAS  /tmp/ccdg5rgB.s 			page 183


 5286 01ba 80F800C0 		strb	ip, [r0]
 5287              	.LVL572:
 5288              	.L689:
2211:src/display.c **** 	  }
 5289              		.loc 1 2211 10 view .LVU1645
 5290 01be 19F80100 		ldrb	r0, [r9, r1]	@ zero_extendqisi2
 5291              	.L514:
2216:src/display.c **** 
 5292              		.loc 1 2216 2 is_stmt 1 view .LVU1646
 5293              	.LVL573:
2216:src/display.c **** 
 5294              		.loc 1 2216 45 view .LVU1647
2216:src/display.c **** 
 5295              		.loc 1 2216 2 is_stmt 0 view .LVU1648
 5296 01c2 28B1     		cbz	r0, .L525
 5297              	.LVL574:
 5298              	.L591:
2216:src/display.c **** 
 5299              		.loc 1 2216 62 view .LVU1649
 5300 01c4 3020     		movs	r0, #48
 5301              	.L526:
2216:src/display.c **** 
 5302              		.loc 1 2216 68 is_stmt 1 discriminator 3 view .LVU1650
2216:src/display.c **** 
 5303              		.loc 1 2216 57 discriminator 3 view .LVU1651
 5304              	.LVL575:
2216:src/display.c **** 
 5305              		.loc 1 2216 62 is_stmt 0 discriminator 3 view .LVU1652
 5306 01c6 03F8010B 		strb	r0, [r3], #1
 5307              	.LVL576:
2216:src/display.c **** 
 5308              		.loc 1 2216 45 is_stmt 1 discriminator 3 view .LVU1653
2216:src/display.c **** 
 5309              		.loc 1 2216 2 is_stmt 0 discriminator 3 view .LVU1654
 5310 01ca 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5311 01cc 0029     		cmp	r1, #0
 5312 01ce FAD1     		bne	.L526
 5313              	.L525:
2218:src/display.c **** 	switch (mode) {
 5314              		.loc 1 2218 2 is_stmt 1 view .LVU1655
 5315              	.LVL577:
2219:src/display.c **** 	default:
 5316              		.loc 1 2219 2 view .LVU1656
 5317 01d0 022D     		cmp	r5, #2
 5318 01d2 00F06D81 		beq	.L563
 5319 01d6 032D     		cmp	r5, #3
 5320 01d8 00F00F81 		beq	.L528
 5321 01dc 012D     		cmp	r5, #1
 5322 01de 00F0E081 		beq	.L529
2222:src/display.c **** 	  if (count != *display_digits)
 5323              		.loc 1 2222 4 view .LVU1657
 5324              	.LVL578:
2222:src/display.c **** 	  if (count != *display_digits)
 5325              		.loc 1 2222 34 view .LVU1658
2222:src/display.c **** 	  if (count != *display_digits)
 5326              		.loc 1 2222 42 is_stmt 0 view .LVU1659
 5327 01e2 0298     		ldr	r0, [sp, #8]
ARM GAS  /tmp/ccdg5rgB.s 			page 184


 5328 01e4 26AB     		add	r3, sp, #152
 5329 01e6 0344     		add	r3, r3, r0
2222:src/display.c **** 	  if (count != *display_digits)
 5330              		.loc 1 2222 4 view .LVU1660
 5331 01e8 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5332 01ec 302B     		cmp	r3, #48
 5333 01ee 40F09983 		bne	.L607
 5334 01f2 411E     		subs	r1, r0, #1
 5335 01f4 4944     		add	r1, r1, r9
 5336              	.LVL579:
 5337              	.L533:
2222:src/display.c **** 	  if (count != *display_digits)
 5338              		.loc 1 2222 66 is_stmt 1 discriminator 3 view .LVU1661
2222:src/display.c **** 	  if (count != *display_digits)
 5339              		.loc 1 2222 58 discriminator 3 view .LVU1662
2222:src/display.c **** 	  if (count != *display_digits)
 5340              		.loc 1 2222 42 is_stmt 0 discriminator 3 view .LVU1663
 5341 01f6 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2222:src/display.c **** 	  if (count != *display_digits)
 5342              		.loc 1 2222 4 discriminator 3 view .LVU1664
 5343 01fa 302D     		cmp	r5, #48
 5344 01fc 0346     		mov	r3, r0
2222:src/display.c **** 	  if (count != *display_digits)
 5345              		.loc 1 2222 63 discriminator 3 view .LVU1665
 5346 01fe 00F1FF30 		add	r0, r0, #-1
 5347              	.LVL580:
2222:src/display.c **** 	  if (count != *display_digits)
 5348              		.loc 1 2222 34 is_stmt 1 discriminator 3 view .LVU1666
2222:src/display.c **** 	  if (count != *display_digits)
 5349              		.loc 1 2222 4 is_stmt 0 discriminator 3 view .LVU1667
 5350 0202 F8D0     		beq	.L533
2223:src/display.c **** 	    count++;
 5351              		.loc 1 2223 4 is_stmt 1 view .LVU1668
2223:src/display.c **** 	    count++;
 5352              		.loc 1 2223 7 is_stmt 0 view .LVU1669
 5353 0204 0299     		ldr	r1, [sp, #8]
 5354 0206 8842     		cmp	r0, r1
 5355 0208 08BF     		it	eq
 5356 020a 0B46     		moveq	r3, r1
 5357              	.LVL581:
 5358              	.L532:
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5359              		.loc 1 2226 4 is_stmt 1 view .LVU1670
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5360              		.loc 1 2226 7 is_stmt 0 view .LVU1671
 5361 020c 0299     		ldr	r1, [sp, #8]
 5362 020e 8E42     		cmp	r6, r1
 5363 0210 80F20581 		bge	.L534
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5364              		.loc 1 2226 47 discriminator 1 view .LVU1672
 5365 0214 591A     		subs	r1, r3, r1
2226:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5366              		.loc 1 2226 31 discriminator 1 view .LVU1673
 5367 0216 B142     		cmp	r1, r6
 5368 0218 00F30181 		bgt	.L534
2251:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5369              		.loc 1 2251 11 is_stmt 1 view .LVU1674
ARM GAS  /tmp/ccdg5rgB.s 			page 185


2251:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5370              		.loc 1 2251 14 is_stmt 0 view .LVU1675
 5371 021c 002E     		cmp	r6, #0
 5372 021e C0F2A483 		blt	.L543
 5373 0222 721C     		adds	r2, r6, #1
2253:src/display.c **** 		*obp++ = ',';
 5374              		.loc 1 2253 31 view .LVU1676
 5375 0224 DFF838E1 		ldr	lr, .L714+8
 5376 0228 0592     		str	r2, [sp, #20]
 5377 022a 09EB0200 		add	r0, r9, r2
2218:src/display.c **** 	switch (mode) {
 5378              		.loc 1 2218 4 view .LVU1677
 5379 022e CC46     		mov	ip, r9
2023:src/display.c **** 	int odig = 0;
 5380              		.loc 1 2023 15 view .LVU1678
 5381 0230 5946     		mov	r1, fp
 5382 0232 05E0     		b	.L544
 5383              	.LVL582:
 5384              	.L547:
2254:src/display.c **** 	      *obp++ = *p++;
 5385              		.loc 1 2254 3 is_stmt 1 view .LVU1679
2253:src/display.c **** 		*obp++ = ',';
 5386              		.loc 1 2253 18 is_stmt 0 view .LVU1680
 5387 0234 022D     		cmp	r5, #2
2254:src/display.c **** 	      *obp++ = *p++;
 5388              		.loc 1 2254 10 view .LVU1681
 5389 0236 05BF     		ittet	eq
 5390 0238 2C22     		moveq	r2, #44
 5391 023a 4A70     		strbeq	r2, [r1, #1]
2255:src/display.c **** 	      odig++;
 5392              		.loc 1 2255 12 view .LVU1682
 5393 023c 0131     		addne	r1, r1, #1
 5394              	.LVL583:
2254:src/display.c **** 	      *obp++ = *p++;
 5395              		.loc 1 2254 7 view .LVU1683
 5396 023e 0231     		addeq	r1, r1, #2
 5397              	.LVL584:
 5398              	.L544:
2255:src/display.c **** 	      odig++;
 5399              		.loc 1 2255 8 is_stmt 1 discriminator 2 view .LVU1684
2255:src/display.c **** 	      odig++;
 5400              		.loc 1 2255 15 is_stmt 0 discriminator 2 view .LVU1685
 5401 0240 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5402              	.LVL585:
2253:src/display.c **** 		*obp++ = ',';
 5403              		.loc 1 2253 8 is_stmt 1 discriminator 2 view .LVU1686
2255:src/display.c **** 	      odig++;
 5404              		.loc 1 2255 15 is_stmt 0 discriminator 2 view .LVU1687
 5405 0244 0A70     		strb	r2, [r1]
2256:src/display.c **** 	    }
 5406              		.loc 1 2256 8 is_stmt 1 discriminator 2 view .LVU1688
 5407              	.LVL586:
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5408              		.loc 1 2252 23 discriminator 2 view .LVU1689
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5409              		.loc 1 2252 15 discriminator 2 view .LVU1690
2253:src/display.c **** 		*obp++ = ',';
ARM GAS  /tmp/ccdg5rgB.s 			page 186


 5410              		.loc 1 2253 31 is_stmt 0 discriminator 2 view .LVU1691
 5411 0246 A9EB0C02 		sub	r2, r9, ip
 5412 024a 3244     		add	r2, r2, r6
 5413 024c 8EFB0285 		smull	r8, r5, lr, r2
 5414 0250 A5EBE275 		sub	r5, r5, r2, asr #31
 5415 0254 05EB4505 		add	r5, r5, r5, lsl #1
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5416              		.loc 1 2252 6 discriminator 2 view .LVU1692
 5417 0258 6045     		cmp	r0, ip
2253:src/display.c **** 		*obp++ = ',';
 5418              		.loc 1 2253 31 discriminator 2 view .LVU1693
 5419 025a A2EB0505 		sub	r5, r2, r5
2252:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5420              		.loc 1 2252 6 discriminator 2 view .LVU1694
 5421 025e E9D1     		bne	.L547
 5422 0260 059D     		ldr	r5, [sp, #20]
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5423              		.loc 1 2258 6 is_stmt 1 view .LVU1695
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5424              		.loc 1 2258 13 is_stmt 0 view .LVU1696
 5425 0262 2E22     		movs	r2, #46
2259:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5426              		.loc 1 2259 9 view .LVU1697
 5427 0264 AB42     		cmp	r3, r5
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5428              		.loc 1 2258 13 view .LVU1698
 5429 0266 4A70     		strb	r2, [r1, #1]
2258:src/display.c **** 	    if (count > (exp + 1)) {
 5430              		.loc 1 2258 10 view .LVU1699
 5431 0268 01F10208 		add	r8, r1, #2
 5432              	.LVL587:
2259:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5433              		.loc 1 2259 6 is_stmt 1 view .LVU1700
2259:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5434              		.loc 1 2259 9 is_stmt 0 view .LVU1701
 5435 026c 40F34281 		ble	.L541
 5436 0270 9A1B     		subs	r2, r3, r6
 5437 0272 0A44     		add	r2, r2, r1
 5438 0274 0131     		adds	r1, r1, #1
 5439              	.LVL588:
 5440              	.L548:
2261:src/display.c **** 		odig++;
 5441              		.loc 1 2261 3 is_stmt 1 discriminator 3 view .LVU1702
2261:src/display.c **** 		odig++;
 5442              		.loc 1 2261 10 is_stmt 0 discriminator 3 view .LVU1703
 5443 0276 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5444              	.LVL589:
2261:src/display.c **** 		odig++;
 5445              		.loc 1 2261 10 discriminator 3 view .LVU1704
 5446 027a 01F8015F 		strb	r5, [r1, #1]!
2262:src/display.c **** 	      }
 5447              		.loc 1 2262 3 is_stmt 1 discriminator 3 view .LVU1705
2260:src/display.c **** 		*obp++ = *p++;
 5448              		.loc 1 2260 31 discriminator 3 view .LVU1706
2260:src/display.c **** 		*obp++ = *p++;
 5449              		.loc 1 2260 22 discriminator 3 view .LVU1707
2260:src/display.c **** 		*obp++ = *p++;
ARM GAS  /tmp/ccdg5rgB.s 			page 187


 5450              		.loc 1 2260 8 is_stmt 0 discriminator 3 view .LVU1708
 5451 027e 9142     		cmp	r1, r2
 5452 0280 F9D1     		bne	.L548
 5453 0282 F243     		mvns	r2, r6
 5454 0284 1A44     		add	r2, r2, r3
 5455 0286 9044     		add	r8, r8, r2
 5456              	.LVL590:
2262:src/display.c **** 	      }
 5457              		.loc 1 2262 7 view .LVU1709
 5458 0288 1D46     		mov	r5, r3
 5459 028a 33E1     		b	.L541
 5460              	.LVL591:
 5461              	.L611:
2262:src/display.c **** 	      }
 5462              		.loc 1 2262 7 view .LVU1710
 5463 028c D846     		mov	r8, fp
 5464              	.LVL592:
 5465              	.L570:
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5466              		.loc 1 2354 2 is_stmt 1 view .LVU1711
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5467              		.loc 1 2354 5 is_stmt 0 view .LVU1712
 5468 028e 029B     		ldr	r3, [sp, #8]
 5469 0290 0A2B     		cmp	r3, #10
 5470 0292 02DD     		ble	.L573
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5471              		.loc 1 2354 50 discriminator 1 view .LVU1713
 5472 0294 002C     		cmp	r4, #0
 5473 0296 00F0FB81 		beq	.L702
 5474              	.L573:
2360:src/display.c **** 	if (odig > *display_digits)
 5475              		.loc 1 2360 2 is_stmt 1 view .LVU1714
 5476 029a 029B     		ldr	r3, [sp, #8]
 5477 029c 9D42     		cmp	r5, r3
 5478 029e A8BF     		it	ge
 5479 02a0 1D46     		movge	r5, r3
 5480              	.LVL593:
2363:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5481              		.loc 1 2363 23 is_stmt 0 view .LVU1715
 5482 02a2 5F1B     		subs	r7, r3, r5
 5483              	.LVL594:
2363:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5484              		.loc 1 2363 4 view .LVU1716
 5485 02a4 07EBC707 		add	r7, r7, r7, lsl #3
2360:src/display.c **** 	if (odig > *display_digits)
 5486              		.loc 1 2360 7 view .LVU1717
 5487 02a8 0023     		movs	r3, #0
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5488              		.loc 1 2364 5 view .LVU1718
 5489 02aa 9F42     		cmp	r7, r3
2360:src/display.c **** 	if (odig > *display_digits)
 5490              		.loc 1 2360 7 view .LVU1719
 5491 02ac 88F80030 		strb	r3, [r8]
2361:src/display.c **** 	  odig = *display_digits;
 5492              		.loc 1 2361 2 is_stmt 1 view .LVU1720
 5493              	.LVL595:
2363:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
ARM GAS  /tmp/ccdg5rgB.s 			page 188


 5494              		.loc 1 2363 2 view .LVU1721
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5495              		.loc 1 2364 2 view .LVU1722
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5496              		.loc 1 2364 5 is_stmt 0 view .LVU1723
 5497 02b0 03DD     		ble	.L574
2364:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5498              		.loc 1 2364 35 discriminator 1 view .LVU1724
 5499 02b2 16F57A7F 		cmn	r6, #1000
2365:src/display.c **** 	if (negative) {
 5500              		.loc 1 2365 4 is_stmt 1 discriminator 1 view .LVU1725
2365:src/display.c **** 	if (negative) {
 5501              		.loc 1 2365 6 is_stmt 0 discriminator 1 view .LVU1726
 5502 02b6 D8BF     		it	le
 5503 02b8 093F     		suble	r7, r7, #9
 5504              	.LVL596:
 5505              	.L574:
2366:src/display.c **** 	  if (res) *res++ = '-';
 5506              		.loc 1 2366 2 is_stmt 1 view .LVU1727
2366:src/display.c **** 	  if (res) *res++ = '-';
 5507              		.loc 1 2366 5 is_stmt 0 view .LVU1728
 5508 02ba 039B     		ldr	r3, [sp, #12]
 5509 02bc 2BB1     		cbz	r3, .L575
2367:src/display.c **** 	  else {
 5510              		.loc 1 2367 4 is_stmt 1 view .LVU1729
2367:src/display.c **** 	  else {
 5511              		.loc 1 2367 7 is_stmt 0 view .LVU1730
 5512 02be 002C     		cmp	r4, #0
 5513 02c0 00F0FE81 		beq	.L576
2367:src/display.c **** 	  else {
 5514              		.loc 1 2367 13 is_stmt 1 discriminator 1 view .LVU1731
 5515              	.LVL597:
2367:src/display.c **** 	  else {
 5516              		.loc 1 2367 20 is_stmt 0 discriminator 1 view .LVU1732
 5517 02c4 2D23     		movs	r3, #45
 5518 02c6 04F8013B 		strb	r3, [r4], #1
 5519              	.LVL598:
 5520              	.L575:
2375:src/display.c **** 	  if (c == '.') {
 5521              		.loc 1 2375 12 is_stmt 1 discriminator 1 view .LVU1733
2375:src/display.c **** 	  if (c == '.') {
 5522              		.loc 1 2375 18 is_stmt 0 discriminator 1 view .LVU1734
 5523 02ca 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 5524              	.LVL599:
2375:src/display.c **** 	  if (c == '.') {
 5525              		.loc 1 2375 2 discriminator 1 view .LVU1735
 5526 02ce A2B1     		cbz	r2, .L577
2375:src/display.c **** 	  if (c == '.') {
 5527              		.loc 1 2375 31 view .LVU1736
 5528 02d0 6B2F     		cmp	r7, #107
 5529 02d2 12DC     		bgt	.L577
 5530              	.LVL600:
 5531              	.L578:
2377:src/display.c **** 	  } else if (c == ',') {
 5532              		.loc 1 2377 12 view .LVU1737
 5533 02d4 DFF88C90 		ldr	r9, .L714+12
 5534              	.LVL601:
ARM GAS  /tmp/ccdg5rgB.s 			page 189


 5535              	.L587:
2376:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5536              		.loc 1 2376 4 is_stmt 1 view .LVU1738
2376:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5537              		.loc 1 2376 7 is_stmt 0 view .LVU1739
 5538 02d8 2E2A     		cmp	r2, #46
 5539 02da 00F02081 		beq	.L703
2378:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5540              		.loc 1 2378 11 is_stmt 1 view .LVU1740
2378:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5541              		.loc 1 2378 14 is_stmt 0 view .LVU1741
 5542 02de 2C2A     		cmp	r2, #44
 5543 02e0 00F04681 		beq	.L704
2381:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5544              		.loc 1 2381 6 is_stmt 1 view .LVU1742
 5545              	.LVL602:
 5546              	.LBB403:
 5547              	.LBI403:
 415:src/display.c ****   if (res) *res++ = ch;
 5548              		.loc 1 415 14 view .LVU1743
 5549              	.LBB404:
 416:src/display.c ****   else	set_dig(base, ch);
 5550              		.loc 1 416 3 view .LVU1744
 416:src/display.c ****   else	set_dig(base, ch);
 5551              		.loc 1 416 6 is_stmt 0 view .LVU1745
 5552 02e4 002C     		cmp	r4, #0
 5553 02e6 00F05281 		beq	.L585
 416:src/display.c ****   else	set_dig(base, ch);
 5554              		.loc 1 416 12 is_stmt 1 view .LVU1746
 5555              	.LVL603:
 416:src/display.c ****   else	set_dig(base, ch);
 5556              		.loc 1 416 19 is_stmt 0 view .LVU1747
 5557 02ea 04F8012B 		strb	r2, [r4], #1
 5558              	.LVL604:
 5559              	.L586:
 418:src/display.c **** }
 5560              		.loc 1 418 3 is_stmt 1 view .LVU1748
 418:src/display.c **** }
 5561              		.loc 1 418 3 is_stmt 0 view .LVU1749
 5562              	.LBE404:
 5563              	.LBE403:
2382:src/display.c **** 	  }
 5564              		.loc 1 2382 6 is_stmt 1 view .LVU1750
2375:src/display.c **** 	  if (c == '.') {
 5565              		.loc 1 2375 18 is_stmt 0 view .LVU1751
 5566 02ee 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 5567              	.LVL605:
2382:src/display.c **** 	  }
 5568              		.loc 1 2382 8 view .LVU1752
 5569 02f2 0937     		adds	r7, r7, #9
 5570              	.LVL606:
2375:src/display.c **** 	  if (c == '.') {
 5571              		.loc 1 2375 53 is_stmt 1 view .LVU1753
2375:src/display.c **** 	  if (c == '.') {
 5572              		.loc 1 2375 12 view .LVU1754
2375:src/display.c **** 	  if (c == '.') {
 5573              		.loc 1 2375 2 is_stmt 0 view .LVU1755
ARM GAS  /tmp/ccdg5rgB.s 			page 190


 5574 02f4 0AB1     		cbz	r2, .L577
2375:src/display.c **** 	  if (c == '.') {
 5575              		.loc 1 2375 31 discriminator 3 view .LVU1756
 5576 02f6 6B2F     		cmp	r7, #107
 5577 02f8 EEDD     		ble	.L587
 5578              	.LVL607:
 5579              	.L577:
2395:src/display.c **** 	  set_exp(exp, 0, res);
 5580              		.loc 1 2395 2 is_stmt 1 view .LVU1757
2395:src/display.c **** 	  set_exp(exp, 0, res);
 5581              		.loc 1 2395 5 is_stmt 0 view .LVU1758
 5582 02fa BAF1000F 		cmp	r10, #0
 5583 02fe 40F01F81 		bne	.L705
 5584              	.L588:
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5585              		.loc 1 2398 2 is_stmt 1 view .LVU1759
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5586              		.loc 1 2398 5 is_stmt 0 view .LVU1760
 5587 0302 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5588 0306 2E2B     		cmp	r3, #46
 5589 0308 00F02481 		beq	.L706
 5590              	.LVL608:
 5591              	.L589:
2400:src/display.c ****       }
 5592              		.loc 1 2400 2 is_stmt 1 view .LVU1761
2400:src/display.c ****       }
 5593              		.loc 1 2400 18 is_stmt 0 view .LVU1762
 5594 030c 019B     		ldr	r3, [sp, #4]
 5595 030e 1D60     		str	r5, [r3]
 5596              	.LVL609:
 5597              	.L465:
2401:src/display.c **** 
 5598              		.loc 1 2401 7 view .LVU1763
 5599 0310 27B0     		add	sp, sp, #156
 5600              		.cfi_remember_state
 5601              		.cfi_def_cfa_offset 36
 5602              		@ sp needed
 5603 0312 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5604              	.LVL610:
 5605              	.L473:
 5606              		.cfi_restore_state
2100:src/display.c **** 
 5607              		.loc 1 2100 4 is_stmt 1 view .LVU1764
 5608 0316 5946     		mov	r1, fp
 5609 0318 3846     		mov	r0, r7
 5610 031a FFF7FEFF 		bl	decNumberToString
 5611              	.LVL611:
 5612 031e A2E6     		b	.L475
 5613              	.LVL612:
 5614              	.L466:
2058:src/display.c **** 	    if (State2.hms) {
 5615              		.loc 1 2058 4 view .LVU1765
2058:src/display.c **** 	    if (State2.hms) {
 5616              		.loc 1 2058 25 is_stmt 0 view .LVU1766
 5617 0320 0D4B     		ldr	r3, .L714
 5618 0322 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
2058:src/display.c **** 	    if (State2.hms) {
ARM GAS  /tmp/ccdg5rgB.s 			page 191


 5619              		.loc 1 2058 22 view .LVU1767
 5620 0324 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
2058:src/display.c **** 	    if (State2.hms) {
 5621              		.loc 1 2058 25 view .LVU1768
 5622 0326 01F00201 		and	r1, r1, #2
2058:src/display.c **** 	    if (State2.hms) {
 5623              		.loc 1 2058 22 view .LVU1769
 5624 032a 1143     		orrs	r1, r1, r2
 5625 032c 7FF477AE 		bne	.L469
2059:src/display.c **** 	      set_x_hms(z, res);
 5626              		.loc 1 2059 6 is_stmt 1 view .LVU1770
2059:src/display.c **** 	      set_x_hms(z, res);
 5627              		.loc 1 2059 10 is_stmt 0 view .LVU1771
 5628 0330 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
2059:src/display.c **** 	      set_x_hms(z, res);
 5629              		.loc 1 2059 9 view .LVU1772
 5630 0332 DE07     		lsls	r6, r3, #31
 5631 0334 00F1F282 		bmi	.L707
2063:src/display.c **** 	      if (set_x_fract(z, res))
 5632              		.loc 1 2063 11 is_stmt 1 view .LVU1773
2063:src/display.c **** 	      if (set_x_fract(z, res))
 5633              		.loc 1 2063 15 is_stmt 0 view .LVU1774
 5634 0338 084B     		ldr	r3, .L714+4
 5635 033a 1B68     		ldr	r3, [r3]
 5636 033c 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
2063:src/display.c **** 	      if (set_x_fract(z, res))
 5637              		.loc 1 2063 14 view .LVU1775
 5638 0340 9806     		lsls	r0, r3, #26
 5639 0342 7FF56CAE 		bpl	.L469
2064:src/display.c **** 		return;
 5640              		.loc 1 2064 8 is_stmt 1 view .LVU1776
2064:src/display.c **** 		return;
 5641              		.loc 1 2064 12 is_stmt 0 view .LVU1777
 5642 0346 2146     		mov	r1, r4
 5643 0348 3846     		mov	r0, r7
 5644 034a FFF7FEFF 		bl	set_x_fract
 5645              	.LVL613:
2064:src/display.c **** 		return;
 5646              		.loc 1 2064 11 view .LVU1778
 5647 034e 0028     		cmp	r0, #0
 5648 0350 3FF465AE 		beq	.L469
 5649 0354 DCE7     		b	.L465
 5650              	.L715:
 5651 0356 00BF     		.align	2
 5652              	.L714:
 5653 0358 00000000 		.word	StateWhileOn
 5654 035c 00000000 		.word	main_ram
 5655 0360 56555555 		.word	1431655766
 5656 0364 00000000 		.word	.LANCHOR1
 5657              	.LVL614:
 5658              	.L694:
2108:src/display.c **** 	  //  ALL mode: fill the display
 5659              		.loc 1 2108 38 discriminator 1 view .LVU1779
 5660 0368 019B     		ldr	r3, [sp, #4]
 5661 036a 1A68     		ldr	r2, [r3]
2108:src/display.c **** 	  //  ALL mode: fill the display
 5662              		.loc 1 2108 35 discriminator 1 view .LVU1780
ARM GAS  /tmp/ccdg5rgB.s 			page 192


 5663 036c 089B     		ldr	r3, [sp, #32]
2108:src/display.c **** 	  //  ALL mode: fill the display
 5664              		.loc 1 2108 23 discriminator 1 view .LVU1781
 5665 036e 9A42     		cmp	r2, r3
 5666 0370 11DD     		ble	.L488
2112:src/display.c **** 
 5667              		.loc 1 2112 4 is_stmt 1 view .LVU1782
2114:src/display.c **** 	  int orig_mode = mode;
 5668              		.loc 1 2114 23 is_stmt 0 view .LVU1783
 5669 0372 042D     		cmp	r5, #4
2112:src/display.c **** 
 5670              		.loc 1 2112 7 view .LVU1784
 5671 0374 0793     		str	r3, [sp, #28]
2114:src/display.c **** 	  int orig_mode = mode;
 5672              		.loc 1 2114 2 is_stmt 1 view .LVU1785
2114:src/display.c **** 	  int orig_mode = mode;
 5673              		.loc 1 2114 23 is_stmt 0 view .LVU1786
 5674 0376 12D0     		beq	.L489
 5675              	.L708:
2114:src/display.c **** 	  int orig_mode = mode;
 5676              		.loc 1 2114 43 discriminator 2 view .LVU1787
 5677 0378 052D     		cmp	r5, #5
 5678 037a 00F09881 		beq	.L490
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5679              		.loc 1 2044 6 view .LVU1788
 5680 037e 0023     		movs	r3, #0
 5681 0380 0493     		str	r3, [sp, #16]
 5682 0382 89E6     		b	.L594
 5683              	.LVL615:
 5684              	.L695:
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5685              		.loc 1 2139 17 is_stmt 1 discriminator 1 view .LVU1789
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5686              		.loc 1 2139 21 is_stmt 0 discriminator 1 view .LVU1790
 5687 0384 4421     		movs	r1, #68
 5688 0386 5846     		mov	r0, fp
 5689              	.LVL616:
2139:src/display.c **** 	if (q == NULL) exp = 0;
 5690              		.loc 1 2139 21 discriminator 1 view .LVU1791
 5691 0388 FFF7FEFF 		bl	find_char
 5692              	.LVL617:
2140:src/display.c **** 	else {
 5693              		.loc 1 2140 2 is_stmt 1 discriminator 1 view .LVU1792
2140:src/display.c **** 	else {
 5694              		.loc 1 2140 5 is_stmt 0 discriminator 1 view .LVU1793
 5695 038c 0646     		mov	r6, r0
 5696 038e 0028     		cmp	r0, #0
 5697 0390 3FF49CAE 		beq	.L492
 5698 0394 92E6     		b	.L491
 5699              	.LVL618:
 5700              	.L488:
2110:src/display.c **** 	else
 5701              		.loc 1 2110 4 is_stmt 1 view .LVU1794
2110:src/display.c **** 	else
 5702              		.loc 1 2110 25 is_stmt 0 view .LVU1795
 5703 0396 013A     		subs	r2, r2, #1
2114:src/display.c **** 	  int orig_mode = mode;
ARM GAS  /tmp/ccdg5rgB.s 			page 193


 5704              		.loc 1 2114 23 view .LVU1796
 5705 0398 042D     		cmp	r5, #4
2110:src/display.c **** 	else
 5706              		.loc 1 2110 7 view .LVU1797
 5707 039a 0792     		str	r2, [sp, #28]
2114:src/display.c **** 	  int orig_mode = mode;
 5708              		.loc 1 2114 2 is_stmt 1 view .LVU1798
2114:src/display.c **** 	  int orig_mode = mode;
 5709              		.loc 1 2114 23 is_stmt 0 view .LVU1799
 5710 039c ECD1     		bne	.L708
 5711              	.L489:
 5712              	.LBB406:
2115:src/display.c **** 
 5713              		.loc 1 2115 4 is_stmt 1 view .LVU1800
 5714              	.LVL619:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5715              		.loc 1 2117 4 view .LVU1801
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5716              		.loc 1 2117 11 is_stmt 0 view .LVU1802
 5717 039e 2A46     		mov	r2, r5
 5718 03a0 07A9     		add	r1, sp, #28
 5719 03a2 3846     		mov	r0, r7
 5720 03a4 FFF7FEFF 		bl	std_round_fix
 5721              	.LVL620:
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5722              		.loc 1 2120 16 view .LVU1803
 5723 03a8 0123     		movs	r3, #1
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5724              		.loc 1 2117 11 view .LVU1804
 5725 03aa 0546     		mov	r5, r0
 5726              	.LVL621:
2118:src/display.c **** 	    // allow zeros to be trimmed
 5727              		.loc 1 2118 4 is_stmt 1 view .LVU1805
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5728              		.loc 1 2120 6 view .LVU1806
2121:src/display.c **** 	    dd = *display_digits - 1;
 5729              		.loc 1 2121 4 view .LVU1807
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5730              		.loc 1 2120 16 is_stmt 0 view .LVU1808
 5731 03ac 0493     		str	r3, [sp, #16]
 5732 03ae 73E6     		b	.L594
 5733              	.LVL622:
 5734              	.L701:
2120:src/display.c **** 	  if (orig_mode == MODE_STD)
 5735              		.loc 1 2120 16 view .LVU1809
 5736              	.LBE406:
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5737              		.loc 1 2200 7 view .LVU1810
 5738 03b0 4846     		mov	r0, r9
 5739              	.LVL623:
2201:src/display.c **** 	    mantissa[0] = '1';
 5740              		.loc 1 2201 41 view .LVU1811
 5741 03b2 4FF03008 		mov	r8, #48
 5742              	.L520:
 5743              	.LVL624:
2201:src/display.c **** 	    mantissa[0] = '1';
 5744              		.loc 1 2201 47 is_stmt 1 discriminator 3 view .LVU1812
ARM GAS  /tmp/ccdg5rgB.s 			page 194


2201:src/display.c **** 	    mantissa[0] = '1';
 5745              		.loc 1 2201 36 discriminator 3 view .LVU1813
2201:src/display.c **** 	    mantissa[0] = '1';
 5746              		.loc 1 2201 41 is_stmt 0 discriminator 3 view .LVU1814
 5747 03b6 00F8018B 		strb	r8, [r0], #1
 5748              	.LVL625:
2201:src/display.c **** 	    mantissa[0] = '1';
 5749              		.loc 1 2201 25 is_stmt 1 discriminator 3 view .LVU1815
2201:src/display.c **** 	    mantissa[0] = '1';
 5750              		.loc 1 2201 6 is_stmt 0 discriminator 3 view .LVU1816
 5751 03ba 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5752 03be BCF1390F 		cmp	ip, #57
 5753 03c2 F8D0     		beq	.L520
 5754              	.LVL626:
 5755              	.L593:
2202:src/display.c **** 	    exp++;
 5756              		.loc 1 2202 6 is_stmt 1 view .LVU1817
2202:src/display.c **** 	    exp++;
 5757              		.loc 1 2202 18 is_stmt 0 view .LVU1818
 5758 03c4 3120     		movs	r0, #49
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5759              		.loc 1 2204 9 view .LVU1819
 5760 03c6 012D     		cmp	r5, #1
2203:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5761              		.loc 1 2203 9 view .LVU1820
 5762 03c8 06F10106 		add	r6, r6, #1
 5763              	.LVL627:
2202:src/display.c **** 	    exp++;
 5764              		.loc 1 2202 18 view .LVU1821
 5765 03cc 8DF85800 		strb	r0, [sp, #88]
2203:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5766              		.loc 1 2203 6 is_stmt 1 view .LVU1822
 5767              	.LVL628:
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5768              		.loc 1 2204 6 view .LVU1823
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5769              		.loc 1 2204 9 is_stmt 0 view .LVU1824
 5770 03d0 7FF4F5AE 		bne	.L689
2204:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5771              		.loc 1 2204 27 discriminator 1 view .LVU1825
 5772 03d4 0298     		ldr	r0, [sp, #8]
 5773 03d6 8642     		cmp	r6, r0
 5774 03d8 C0F2DE80 		blt	.L522
2205:src/display.c **** 	      extra_digits = 0;
 5775              		.loc 1 2205 8 is_stmt 1 view .LVU1826
2205:src/display.c **** 	      extra_digits = 0;
 5776              		.loc 1 2205 28 is_stmt 0 view .LVU1827
 5777 03dc C04B     		ldr	r3, .L716
 5778              	.LVL629:
2205:src/display.c **** 	      extra_digits = 0;
 5779              		.loc 1 2205 28 view .LVU1828
 5780 03de 1B68     		ldr	r3, [r3]
 5781 03e0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2205:src/display.c **** 	      extra_digits = 0;
 5782              		.loc 1 2205 37 view .LVU1829
 5783 03e4 D906     		lsls	r1, r3, #27
 5784              	.LVL630:
ARM GAS  /tmp/ccdg5rgB.s 			page 195


2205:src/display.c **** 	      extra_digits = 0;
 5785              		.loc 1 2205 37 view .LVU1830
 5786 03e6 40F1E582 		bpl	.L709
 5787              	.LVL631:
2216:src/display.c **** 
 5788              		.loc 1 2216 2 is_stmt 1 view .LVU1831
 5789 03ea 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2216:src/display.c **** 
 5790              		.loc 1 2216 9 is_stmt 0 view .LVU1832
 5791 03ee 09EB0E03 		add	r3, r9, lr
 5792              	.LVL632:
2216:src/display.c **** 
 5793              		.loc 1 2216 45 is_stmt 1 view .LVU1833
2205:src/display.c **** 	      extra_digits = 0;
 5794              		.loc 1 2205 37 is_stmt 0 view .LVU1834
 5795 03f2 0325     		movs	r5, #3
2216:src/display.c **** 
 5796              		.loc 1 2216 2 view .LVU1835
 5797 03f4 0029     		cmp	r1, #0
 5798 03f6 7FF4E5AE 		bne	.L591
 5799              	.LVL633:
 5800              	.L528:
2318:src/display.c **** 	  case -1:
 5801              		.loc 1 2318 4 is_stmt 1 view .LVU1836
2318:src/display.c **** 	  case -1:
 5802              		.loc 1 2318 16 is_stmt 0 view .LVU1837
 5803 03fa BA4B     		ldr	r3, .L716+4
 5804 03fc 83FB0613 		smull	r1, r3, r3, r6
 5805 0400 A3EBE673 		sub	r3, r3, r6, asr #31
 5806 0404 03EB4303 		add	r3, r3, r3, lsl #1
 5807 0408 F31A     		subs	r3, r6, r3
 5808 040a 0233     		adds	r3, r3, #2
 5809 040c 042B     		cmp	r3, #4
 5810 040e 4FD8     		bhi	.L563
 5811 0410 DFE813F0 		tbh	[pc, r3, lsl #1]
 5812              	.L565:
 5813 0414 2C02     		.2byte	(.L566-.L565)/2
 5814 0416 1A02     		.2byte	(.L564-.L565)/2
 5815 0418 4E00     		.2byte	(.L563-.L565)/2
 5816 041a 2C02     		.2byte	(.L566-.L565)/2
 5817 041c 1A02     		.2byte	(.L564-.L565)/2
 5818              	.LVL634:
 5819              		.p2align 1
 5820              	.L534:
2227:src/display.c **** 	    case -1:
 5821              		.loc 1 2227 6 is_stmt 1 view .LVU1838
2227:src/display.c **** 	    case -1:
 5822              		.loc 1 2227 32 is_stmt 0 view .LVU1839
 5823 041e B048     		ldr	r0, .L716
2227:src/display.c **** 	    case -1:
 5824              		.loc 1 2227 19 view .LVU1840
 5825 0420 B049     		ldr	r1, .L716+4
2227:src/display.c **** 	    case -1:
 5826              		.loc 1 2227 32 view .LVU1841
 5827 0422 0068     		ldr	r0, [r0]
2227:src/display.c **** 	    case -1:
 5828              		.loc 1 2227 19 view .LVU1842
ARM GAS  /tmp/ccdg5rgB.s 			page 196


 5829 0424 81FB0651 		smull	r5, r1, r1, r6
2227:src/display.c **** 	    case -1:
 5830              		.loc 1 2227 32 view .LVU1843
 5831 0428 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2227:src/display.c **** 	    case -1:
 5832              		.loc 1 2227 19 view .LVU1844
 5833 042c A1EBE671 		sub	r1, r1, r6, asr #31
 5834 0430 01EB4101 		add	r1, r1, r1, lsl #1
 5835 0434 711A     		subs	r1, r6, r1
2227:src/display.c **** 	    case -1:
 5836              		.loc 1 2227 32 view .LVU1845
 5837 0436 C0F30010 		ubfx	r0, r0, #4, #1
2227:src/display.c **** 	    case -1:
 5838              		.loc 1 2227 24 view .LVU1846
 5839 043a 01FB00F1 		mul	r1, r1, r0
 5840 043e 0231     		adds	r1, r1, #2
 5841 0440 0429     		cmp	r1, #4
 5842 0442 00F27182 		bhi	.L608
 5843 0446 DFE811F0 		tbh	[pc, r1, lsl #1]
 5844              	.L538:
 5845 044a 4B02     		.2byte	(.L539-.L538)/2
 5846 044c 2002     		.2byte	(.L537-.L538)/2
 5847 044e 6F02     		.2byte	(.L608-.L538)/2
 5848 0450 4B02     		.2byte	(.L539-.L538)/2
 5849 0452 2002     		.2byte	(.L537-.L538)/2
 5850              	.LVL635:
 5851              		.p2align 1
 5852              	.L508:
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5853              		.loc 1 2183 4 is_stmt 1 view .LVU1847
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5854              		.loc 1 2183 7 is_stmt 0 view .LVU1848
 5855 0454 B342     		cmp	r3, r6
 5856 0456 03DD     		ble	.L511
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5857              		.loc 1 2183 45 discriminator 1 view .LVU1849
 5858 0458 5342     		rsbs	r3, r2, #0
2183:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5859              		.loc 1 2183 36 discriminator 1 view .LVU1850
 5860 045a B342     		cmp	r3, r6
 5861 045c 40F30A82 		ble	.L512
 5862              	.L511:
2184:src/display.c **** 	  else {
 5863              		.loc 1 2184 6 is_stmt 1 view .LVU1851
2184:src/display.c **** 	  else {
 5864              		.loc 1 2184 26 is_stmt 0 view .LVU1852
 5865 0460 9F4B     		ldr	r3, .L716
 5866 0462 1B68     		ldr	r3, [r3]
 5867 0464 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2184:src/display.c **** 	  else {
 5868              		.loc 1 2184 35 view .LVU1853
 5869 0468 13F0100F 		tst	r3, #16
 5870 046c 14BF     		ite	ne
 5871 046e 0325     		movne	r5, #3
 5872              	.LVL636:
2184:src/display.c **** 	  else {
 5873              		.loc 1 2184 35 view .LVU1854
ARM GAS  /tmp/ccdg5rgB.s 			page 197


 5874 0470 0225     		moveq	r5, #2
 5875 0472 75E6     		b	.L690
 5876              	.LVL637:
 5877              	.L699:
2184:src/display.c **** 	  else {
 5878              		.loc 1 2184 35 view .LVU1855
 5879 0474 013E     		subs	r6, r6, #1
 5880 0476 08EB0602 		add	r2, r8, r6
 5881              	.L501:
2163:src/display.c **** 	    exp--;
 5882              		.loc 1 2163 4 is_stmt 1 discriminator 1 view .LVU1856
2164:src/display.c **** 	  while (*++q == '0');
 5883              		.loc 1 2164 6 discriminator 1 view .LVU1857
 5884 047a A2EB0806 		sub	r6, r2, r8
 5885              	.LVL638:
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5886              		.loc 1 2165 10 discriminator 1 view .LVU1858
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5887              		.loc 1 2165 11 is_stmt 0 discriminator 1 view .LVU1859
 5888 047e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5889              	.LVL639:
2165:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5890              		.loc 1 2165 4 discriminator 1 view .LVU1860
 5891 0482 302B     		cmp	r3, #48
 5892 0484 F9D0     		beq	.L501
2166:src/display.c **** 	    *p++ = *q++;
 5893              		.loc 1 2166 10 is_stmt 1 view .LVU1861
 5894 0486 A3F13002 		sub	r2, r3, #48
 5895 048a 092A     		cmp	r2, #9
 5896 048c 3FF661AE 		bhi	.L502
2029:src/display.c **** 	char *r;
 5897              		.loc 1 2029 8 is_stmt 0 view .LVU1862
 5898 0490 4A46     		mov	r2, r9
 5899              	.LVL640:
 5900              	.L503:
2167:src/display.c **** 	} else {
 5901              		.loc 1 2167 6 is_stmt 1 view .LVU1863
2167:src/display.c **** 	} else {
 5902              		.loc 1 2167 11 is_stmt 0 view .LVU1864
 5903 0492 02F8013B 		strb	r3, [r2], #1
 5904              	.LVL641:
2166:src/display.c **** 	    *p++ = *q++;
 5905              		.loc 1 2166 10 is_stmt 1 view .LVU1865
2166:src/display.c **** 	    *p++ = *q++;
 5906              		.loc 1 2166 11 is_stmt 0 view .LVU1866
 5907 0496 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2166:src/display.c **** 	    *p++ = *q++;
 5908              		.loc 1 2166 10 view .LVU1867
 5909 049a A3F13001 		sub	r1, r3, #48
 5910 049e 0929     		cmp	r1, #9
 5911 04a0 F7D9     		bls	.L503
 5912 04a2 56E6     		b	.L502
 5913              	.LVL642:
 5914              	.L697:
2157:src/display.c **** 	  q++;
 5915              		.loc 1 2157 4 is_stmt 1 view .LVU1868
2158:src/display.c **** 	} else if (*q == '+')
ARM GAS  /tmp/ccdg5rgB.s 			page 198


 5916              		.loc 1 2158 4 view .LVU1869
2157:src/display.c **** 	  q++;
 5917              		.loc 1 2157 13 is_stmt 0 view .LVU1870
 5918 04a4 0122     		movs	r2, #1
 5919 04a6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5920 04aa 0392     		str	r2, [sp, #12]
2158:src/display.c **** 	} else if (*q == '+')
 5921              		.loc 1 2158 5 view .LVU1871
 5922 04ac 9044     		add	r8, r8, r2
 5923              	.LVL643:
2158:src/display.c **** 	} else if (*q == '+')
 5924              		.loc 1 2158 5 view .LVU1872
 5925 04ae 23E6     		b	.L497
 5926              	.LVL644:
 5927              	.L563:
2158:src/display.c **** 	} else if (*q == '+')
 5928              		.loc 1 2158 5 view .LVU1873
 5929 04b0 079A     		ldr	r2, [sp, #28]
2318:src/display.c **** 	  case -1:
 5930              		.loc 1 2318 16 view .LVU1874
 5931 04b2 0125     		movs	r5, #1
2023:src/display.c **** 	int odig = 0;
 5932              		.loc 1 2023 15 view .LVU1875
 5933 04b4 5946     		mov	r1, fp
 5934              	.LVL645:
 5935              	.L531:
2332:src/display.c **** 	  };
 5936              		.loc 1 2332 6 is_stmt 1 view .LVU1876
2333:src/display.c **** 	  // Falling through
 5937              		.loc 1 2333 5 view .LVU1877
2337:src/display.c **** 	  odig++;
 5938              		.loc 1 2337 4 view .LVU1878
2337:src/display.c **** 	  odig++;
 5939              		.loc 1 2337 15 is_stmt 0 view .LVU1879
 5940 04b6 4B46     		mov	r3, r9
 5941              	.LVL646:
2337:src/display.c **** 	  odig++;
 5942              		.loc 1 2337 11 view .LVU1880
 5943 04b8 8846     		mov	r8, r1
 5944 04ba 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5945              	.LVL647:
2337:src/display.c **** 	  odig++;
 5946              		.loc 1 2337 11 view .LVU1881
 5947 04be 08F8020B 		strb	r0, [r8], #2
2338:src/display.c **** 	  *obp++ = '.';
 5948              		.loc 1 2338 4 is_stmt 1 view .LVU1882
2339:src/display.c **** 	  dd--;
 5949              		.loc 1 2339 4 view .LVU1883
 5950              	.LVL648:
2339:src/display.c **** 	  dd--;
 5951              		.loc 1 2339 11 is_stmt 0 view .LVU1884
 5952 04c2 4FF02E0C 		mov	ip, #46
2341:src/display.c **** 	    *obp++ = *p++;
 5953              		.loc 1 2341 13 view .LVU1885
 5954 04c6 901E     		subs	r0, r2, #2
2341:src/display.c **** 	    *obp++ = *p++;
 5955              		.loc 1 2341 10 view .LVU1886
ARM GAS  /tmp/ccdg5rgB.s 			page 199


 5956 04c8 002A     		cmp	r2, #0
2339:src/display.c **** 	  dd--;
 5957              		.loc 1 2339 11 view .LVU1887
 5958 04ca 81F801C0 		strb	ip, [r1, #1]
2340:src/display.c **** 	  while (dd-- >= 0) {
 5959              		.loc 1 2340 4 is_stmt 1 view .LVU1888
2341:src/display.c **** 	    *obp++ = *p++;
 5960              		.loc 1 2341 4 view .LVU1889
2341:src/display.c **** 	    *obp++ = *p++;
 5961              		.loc 1 2341 10 view .LVU1890
2341:src/display.c **** 	    *obp++ = *p++;
 5962              		.loc 1 2341 13 is_stmt 0 view .LVU1891
 5963 04ce 0790     		str	r0, [sp, #28]
2341:src/display.c **** 	    *obp++ = *p++;
 5964              		.loc 1 2341 10 view .LVU1892
 5965 04d0 40F32D82 		ble	.L609
2341:src/display.c **** 	    *obp++ = *p++;
 5966              		.loc 1 2341 10 view .LVU1893
 5967 04d4 501C     		adds	r0, r2, #1
 5968 04d6 0131     		adds	r1, r1, #1
 5969 04d8 8144     		add	r9, r9, r0
 5970              	.LVL649:
 5971              	.L569:
2342:src/display.c **** 	    odig++;
 5972              		.loc 1 2342 6 is_stmt 1 view .LVU1894
2342:src/display.c **** 	    odig++;
 5973              		.loc 1 2342 13 is_stmt 0 view .LVU1895
 5974 04da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5975              	.LVL650:
2342:src/display.c **** 	    odig++;
 5976              		.loc 1 2342 13 view .LVU1896
 5977 04de 01F8010F 		strb	r0, [r1, #1]!
2343:src/display.c **** 	  }
 5978              		.loc 1 2343 6 is_stmt 1 view .LVU1897
2341:src/display.c **** 	    *obp++ = *p++;
 5979              		.loc 1 2341 10 view .LVU1898
 5980 04e2 4B45     		cmp	r3, r9
 5981 04e4 F9D1     		bne	.L569
 5982 04e6 6FF00103 		mvn	r3, #1
 5983              	.LVL651:
2341:src/display.c **** 	    *obp++ = *p++;
 5984              		.loc 1 2341 10 is_stmt 0 view .LVU1899
 5985 04ea 9044     		add	r8, r8, r2
 5986 04ec 1544     		add	r5, r5, r2
 5987 04ee 0793     		str	r3, [sp, #28]
2345:src/display.c **** 	}
 5988              		.loc 1 2345 13 view .LVU1900
 5989 04f0 4FF0010A 		mov	r10, #1
 5990              	.L541:
 5991              	.LVL652:
2348:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5992              		.loc 1 2348 2 is_stmt 1 view .LVU1901
2348:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5993              		.loc 1 2348 5 is_stmt 0 view .LVU1902
 5994 04f4 049B     		ldr	r3, [sp, #16]
 5995 04f6 002B     		cmp	r3, #0
 5996 04f8 3FF4C9AE 		beq	.L570
ARM GAS  /tmp/ccdg5rgB.s 			page 200


2349:src/display.c **** 	    obp--;
 5997              		.loc 1 2349 10 is_stmt 1 view .LVU1903
 5998 04fc D845     		cmp	r8, fp
 5999 04fe 7FF6C6AE 		bls	.L570
 6000 0502 4346     		mov	r3, r8
 6001 0504 04E0     		b	.L571
 6002              	.LVL653:
 6003              	.L572:
2349:src/display.c **** 	    obp--;
 6004              		.loc 1 2349 10 is_stmt 0 view .LVU1904
 6005 0506 9B45     		cmp	fp, r3
2351:src/display.c **** 	  }
 6006              		.loc 1 2351 10 view .LVU1905
 6007 0508 05F1FF35 		add	r5, r5, #-1
 6008              	.LVL654:
2349:src/display.c **** 	    obp--;
 6009              		.loc 1 2349 10 is_stmt 1 view .LVU1906
 6010 050c 3FF4BEAE 		beq	.L611
 6011              	.LVL655:
 6012              	.L571:
2350:src/display.c **** 	    odig--;
 6013              		.loc 1 2350 6 discriminator 1 view .LVU1907
 6014 0510 9846     		mov	r8, r3
 6015              	.LVL656:
2350:src/display.c **** 	    odig--;
 6016              		.loc 1 2350 6 is_stmt 0 discriminator 1 view .LVU1908
 6017 0512 013B     		subs	r3, r3, #1
 6018              	.LVL657:
2351:src/display.c **** 	  }
 6019              		.loc 1 2351 6 is_stmt 1 discriminator 1 view .LVU1909
2349:src/display.c **** 	    obp--;
 6020              		.loc 1 2349 19 is_stmt 0 discriminator 1 view .LVU1910
 6021 0514 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 6022 0518 302A     		cmp	r2, #48
 6023 051a F4D0     		beq	.L572
2349:src/display.c **** 	    obp--;
 6024              		.loc 1 2349 19 discriminator 1 view .LVU1911
 6025 051c B7E6     		b	.L570
 6026              	.LVL658:
 6027              	.L703:
2377:src/display.c **** 	  } else if (c == ',') {
 6028              		.loc 1 2377 6 is_stmt 1 view .LVU1912
2377:src/display.c **** 	  } else if (c == ',') {
 6029              		.loc 1 2377 12 is_stmt 0 view .LVU1913
 6030 051e 2246     		mov	r2, r4
 6031              	.LVL659:
2377:src/display.c **** 	  } else if (c == ',') {
 6032              		.loc 1 2377 12 view .LVU1914
 6033 0520 99F80010 		ldrb	r1, [r9]	@ zero_extendqisi2
 6034 0524 A7F10900 		sub	r0, r7, #9
 6035 0528 FFF7FEFF 		bl	set_decimal
 6036              	.LVL660:
 6037 052c 0446     		mov	r4, r0
 6038              	.LVL661:
 6039              	.L581:
2375:src/display.c **** 	  if (c == '.') {
 6040              		.loc 1 2375 53 is_stmt 1 view .LVU1915
ARM GAS  /tmp/ccdg5rgB.s 			page 201


2375:src/display.c **** 	  if (c == '.') {
 6041              		.loc 1 2375 12 view .LVU1916
2375:src/display.c **** 	  if (c == '.') {
 6042              		.loc 1 2375 18 is_stmt 0 view .LVU1917
 6043 052e 1BF8012F 		ldrb	r2, [fp, #1]!	@ zero_extendqisi2
 6044              	.LVL662:
2375:src/display.c **** 	  if (c == '.') {
 6045              		.loc 1 2375 2 view .LVU1918
 6046 0532 002A     		cmp	r2, #0
 6047 0534 7FF4D0AE 		bne	.L587
2395:src/display.c **** 	  set_exp(exp, 0, res);
 6048              		.loc 1 2395 2 is_stmt 1 view .LVU1919
2395:src/display.c **** 	  set_exp(exp, 0, res);
 6049              		.loc 1 2395 5 is_stmt 0 view .LVU1920
 6050 0538 BAF1000F 		cmp	r10, #0
 6051 053c 3FF4E1AE 		beq	.L588
 6052              	.LVL663:
 6053              	.L705:
2396:src/display.c **** #endif
 6054              		.loc 1 2396 4 is_stmt 1 view .LVU1921
 6055 0540 3046     		mov	r0, r6
 6056 0542 2246     		mov	r2, r4
 6057              	.LVL664:
2396:src/display.c **** #endif
 6058              		.loc 1 2396 4 is_stmt 0 view .LVU1922
 6059 0544 0021     		movs	r1, #0
 6060 0546 FFF7FEFF 		bl	set_exp
 6061              	.LVL665:
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6062              		.loc 1 2398 2 is_stmt 1 view .LVU1923
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6063              		.loc 1 2398 5 is_stmt 0 view .LVU1924
 6064 054a 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 6065 054e 2E2B     		cmp	r3, #46
 6066 0550 7FF4DCAE 		bne	.L589
 6067              	.L706:
2398:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 6068              		.loc 1 2398 21 discriminator 1 view .LVU1925
 6069 0554 002C     		cmp	r4, #0
 6070 0556 7FF4D9AE 		bne	.L589
2399:src/display.c **** 	*display_digits = odig;
 6071              		.loc 1 2399 4 is_stmt 1 view .LVU1926
2399:src/display.c **** 	*display_digits = odig;
 6072              		.loc 1 2399 33 is_stmt 0 view .LVU1927
 6073 055a 019B     		ldr	r3, [sp, #4]
 6074 055c 1868     		ldr	r0, [r3]
2399:src/display.c **** 	*display_digits = odig;
 6075              		.loc 1 2399 4 view .LVU1928
 6076 055e 624B     		ldr	r3, .L716+8
2399:src/display.c **** 	*display_digits = odig;
 6077              		.loc 1 2399 33 view .LVU1929
 6078 0560 0138     		subs	r0, r0, #1
2399:src/display.c **** 	*display_digits = odig;
 6079              		.loc 1 2399 4 view .LVU1930
 6080 0562 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6081 0564 2246     		mov	r2, r4
 6082 0566 00EBC000 		add	r0, r0, r0, lsl #3
ARM GAS  /tmp/ccdg5rgB.s 			page 202


 6083 056a FFF7FEFF 		bl	set_decimal
 6084              	.LVL666:
 6085 056e CDE6     		b	.L589
 6086              	.LVL667:
 6087              	.L704:
2379:src/display.c **** 	  } else {
 6088              		.loc 1 2379 6 is_stmt 1 view .LVU1931
2379:src/display.c **** 	  } else {
 6089              		.loc 1 2379 12 is_stmt 0 view .LVU1932
 6090 0570 5E4B     		ldr	r3, .L716+12
 6091 0572 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6092              	.LVL668:
 6093              	.LBB407:
 6094              	.LBI407:
 375:src/display.c ****   if (sep == SEP_NONE)
 6095              		.loc 1 375 14 is_stmt 1 view .LVU1933
 6096              	.LBB408:
 376:src/display.c ****     return res;
 6097              		.loc 1 376 3 view .LVU1934
 376:src/display.c ****     return res;
 6098              		.loc 1 376 6 is_stmt 0 view .LVU1935
 6099 0574 0029     		cmp	r1, #0
 6100 0576 DAD0     		beq	.L581
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6101              		.loc 1 378 3 is_stmt 1 view .LVU1936
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6102              		.loc 1 378 6 is_stmt 0 view .LVU1937
 6103 0578 002C     		cmp	r4, #0
 6104 057a 00F0DB81 		beq	.L583
 379:src/display.c ****     else *res++ = '.';
 6105              		.loc 1 379 5 is_stmt 1 view .LVU1938
 379:src/display.c ****     else *res++ = '.';
 6106              		.loc 1 379 8 is_stmt 0 view .LVU1939
 6107 057e 0129     		cmp	r1, #1
 379:src/display.c ****     else *res++ = '.';
 6108              		.loc 1 379 27 is_stmt 1 view .LVU1940
 6109              	.LVL669:
 380:src/display.c ****   } else {
 6110              		.loc 1 380 17 is_stmt 0 view .LVU1941
 6111 0580 16BF     		itet	ne
 6112 0582 2E23     		movne	r3, #46
 379:src/display.c ****     else *res++ = '.';
 6113              		.loc 1 379 34 view .LVU1942
 6114 0584 04F8012B 		strbeq	r2, [r4], #1
 6115              	.LVL670:
 380:src/display.c ****   } else {
 6116              		.loc 1 380 10 is_stmt 1 view .LVU1943
 380:src/display.c ****   } else {
 6117              		.loc 1 380 17 is_stmt 0 view .LVU1944
 6118 0588 04F8013B 		strbne	r3, [r4], #1
 6119              	.LVL671:
 380:src/display.c ****   } else {
 6120              		.loc 1 380 17 view .LVU1945
 6121 058c CFE7     		b	.L581
 6122              	.LVL672:
 6123              	.L585:
 380:src/display.c ****   } else {
ARM GAS  /tmp/ccdg5rgB.s 			page 203


 6124              		.loc 1 380 17 view .LVU1946
 6125              	.LBE408:
 6126              	.LBE407:
 6127              	.LBB410:
 6128              	.LBB405:
 417:src/display.c ****   return res;
 6129              		.loc 1 417 8 is_stmt 1 view .LVU1947
 6130 058e 1146     		mov	r1, r2
 6131 0590 3846     		mov	r0, r7
 6132 0592 FFF7FEFF 		bl	set_dig
 6133              	.LVL673:
 417:src/display.c ****   return res;
 6134              		.loc 1 417 8 is_stmt 0 view .LVU1948
 6135 0596 AAE6     		b	.L586
 6136              	.LVL674:
 6137              	.L522:
 417:src/display.c ****   return res;
 6138              		.loc 1 417 8 view .LVU1949
 6139              	.LBE405:
 6140              	.LBE410:
2216:src/display.c **** 
 6141              		.loc 1 2216 2 is_stmt 1 view .LVU1950
2216:src/display.c **** 
 6142              		.loc 1 2216 45 view .LVU1951
2216:src/display.c **** 
 6143              		.loc 1 2216 2 is_stmt 0 view .LVU1952
 6144 0598 19F80110 		ldrb	r1, [r9, r1]	@ zero_extendqisi2
 6145 059c 0029     		cmp	r1, #0
 6146 059e 7FF411AE 		bne	.L591
 6147              	.LVL675:
 6148              	.L529:
2281:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 6149              		.loc 1 2281 4 is_stmt 1 view .LVU1953
2282:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6150              		.loc 1 2282 4 view .LVU1954
2282:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6151              		.loc 1 2282 7 is_stmt 0 view .LVU1955
 6152 05a2 002E     		cmp	r6, #0
 6153 05a4 C0F22181 		blt	.L552
2282:src/display.c **** 	    for (i=0; i<=exp; i++) {
 6154              		.loc 1 2282 7 view .LVU1956
 6155 05a8 731C     		adds	r3, r6, #1
2284:src/display.c **** 		*obp++ = ',';
 6156              		.loc 1 2284 31 view .LVU1957
 6157 05aa DFF838E1 		ldr	lr, .L716+4
 6158 05ae 0593     		str	r3, [sp, #20]
 6159 05b0 09EB030C 		add	ip, r9, r3
2218:src/display.c **** 	switch (mode) {
 6160              		.loc 1 2218 4 view .LVU1958
 6161 05b4 4D46     		mov	r5, r9
2023:src/display.c **** 	int odig = 0;
 6162              		.loc 1 2023 15 view .LVU1959
 6163 05b6 5846     		mov	r0, fp
 6164 05b8 05E0     		b	.L553
 6165              	.LVL676:
 6166              	.L556:
2285:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccdg5rgB.s 			page 204


 6167              		.loc 1 2285 3 is_stmt 1 view .LVU1960
2284:src/display.c **** 		*obp++ = ',';
 6168              		.loc 1 2284 18 is_stmt 0 view .LVU1961
 6169 05ba 0229     		cmp	r1, #2
2285:src/display.c **** 	      *obp++ = *p++;
 6170              		.loc 1 2285 10 view .LVU1962
 6171 05bc 05BF     		ittet	eq
 6172 05be 2C23     		moveq	r3, #44
 6173 05c0 4370     		strbeq	r3, [r0, #1]
2286:src/display.c **** 	      odig++;
 6174              		.loc 1 2286 12 view .LVU1963
 6175 05c2 0130     		addne	r0, r0, #1
 6176              	.LVL677:
2285:src/display.c **** 	      *obp++ = *p++;
 6177              		.loc 1 2285 7 view .LVU1964
 6178 05c4 0230     		addeq	r0, r0, #2
 6179              	.LVL678:
 6180              	.L553:
2286:src/display.c **** 	      odig++;
 6181              		.loc 1 2286 8 is_stmt 1 discriminator 2 view .LVU1965
2286:src/display.c **** 	      odig++;
 6182              		.loc 1 2286 15 is_stmt 0 discriminator 2 view .LVU1966
 6183 05c6 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6184              	.LVL679:
2284:src/display.c **** 		*obp++ = ',';
 6185              		.loc 1 2284 8 is_stmt 1 discriminator 2 view .LVU1967
2286:src/display.c **** 	      odig++;
 6186              		.loc 1 2286 15 is_stmt 0 discriminator 2 view .LVU1968
 6187 05ca 0370     		strb	r3, [r0]
2287:src/display.c **** 	    }
 6188              		.loc 1 2287 8 is_stmt 1 discriminator 2 view .LVU1969
 6189              	.LVL680:
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6190              		.loc 1 2283 24 discriminator 2 view .LVU1970
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6191              		.loc 1 2283 16 discriminator 2 view .LVU1971
2284:src/display.c **** 		*obp++ = ',';
 6192              		.loc 1 2284 31 is_stmt 0 discriminator 2 view .LVU1972
 6193 05cc A9EB0503 		sub	r3, r9, r5
 6194 05d0 3344     		add	r3, r3, r6
 6195 05d2 8EFB0381 		smull	r8, r1, lr, r3
 6196 05d6 A1EBE371 		sub	r1, r1, r3, asr #31
 6197 05da 01EB4101 		add	r1, r1, r1, lsl #1
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6198              		.loc 1 2283 6 discriminator 2 view .LVU1973
 6199 05de AC45     		cmp	ip, r5
2284:src/display.c **** 		*obp++ = ',';
 6200              		.loc 1 2284 31 discriminator 2 view .LVU1974
 6201 05e0 A3EB0101 		sub	r1, r3, r1
2283:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6202              		.loc 1 2283 6 discriminator 2 view .LVU1975
 6203 05e4 E9D1     		bne	.L556
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6204              		.loc 1 2289 13 view .LVU1976
 6205 05e6 2E23     		movs	r3, #46
2290:src/display.c **** 	      *obp++ = *p++;
 6206              		.loc 1 2290 6 view .LVU1977
ARM GAS  /tmp/ccdg5rgB.s 			page 205


 6207 05e8 002A     		cmp	r2, #0
 6208 05ea 059D     		ldr	r5, [sp, #20]
 6209              	.LVL681:
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6210              		.loc 1 2289 6 is_stmt 1 view .LVU1978
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6211              		.loc 1 2289 13 is_stmt 0 view .LVU1979
 6212 05ec 4370     		strb	r3, [r0, #1]
2289:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6213              		.loc 1 2289 10 view .LVU1980
 6214 05ee 00F10208 		add	r8, r0, #2
 6215              	.LVL682:
2290:src/display.c **** 	      *obp++ = *p++;
 6216              		.loc 1 2290 6 is_stmt 1 view .LVU1981
2290:src/display.c **** 	      *obp++ = *p++;
 6217              		.loc 1 2290 16 view .LVU1982
2290:src/display.c **** 	      *obp++ = *p++;
 6218              		.loc 1 2290 6 is_stmt 0 view .LVU1983
 6219 05f2 7FF77FAF 		ble	.L541
 6220 05f6 0130     		adds	r0, r0, #1
 6221 05f8 0CEB0201 		add	r1, ip, r2
 6222              	.LVL683:
 6223              	.L557:
2291:src/display.c **** 	      odig++;
 6224              		.loc 1 2291 8 is_stmt 1 discriminator 4 view .LVU1984
2291:src/display.c **** 	      odig++;
 6225              		.loc 1 2291 15 is_stmt 0 discriminator 4 view .LVU1985
 6226 05fc 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6227              	.LVL684:
2291:src/display.c **** 	      odig++;
 6228              		.loc 1 2291 15 discriminator 4 view .LVU1986
 6229 0600 00F8013F 		strb	r3, [r0, #1]!
2292:src/display.c **** 	    }
 6230              		.loc 1 2292 8 is_stmt 1 discriminator 4 view .LVU1987
2290:src/display.c **** 	      *obp++ = *p++;
 6231              		.loc 1 2290 43 discriminator 4 view .LVU1988
2290:src/display.c **** 	      *obp++ = *p++;
 6232              		.loc 1 2290 16 discriminator 4 view .LVU1989
2290:src/display.c **** 	      *obp++ = *p++;
 6233              		.loc 1 2290 6 is_stmt 0 discriminator 4 view .LVU1990
 6234 0604 8C45     		cmp	ip, r1
 6235 0606 F9D1     		bne	.L557
 6236 0608 059B     		ldr	r3, [sp, #20]
 6237 060a 1344     		add	r3, r3, r2
 6238 060c 9044     		add	r8, r8, r2
 6239              	.LVL685:
2290:src/display.c **** 	      *obp++ = *p++;
 6240              		.loc 1 2290 6 discriminator 4 view .LVU1991
 6241 060e 1D46     		mov	r5, r3
 6242 0610 70E7     		b	.L541
 6243              	.LVL686:
 6244              	.L691:
2086:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6245              		.loc 1 2086 4 is_stmt 1 view .LVU1992
 6246 0612 374A     		ldr	r2, .L716+16
 6247 0614 3946     		mov	r1, r7
 6248 0616 3846     		mov	r0, r7
ARM GAS  /tmp/ccdg5rgB.s 			page 206


 6249 0618 FFF7FEFF 		bl	decNumberNormalize
 6250              	.LVL687:
2087:src/display.c **** 	  z->exponent = 0;
 6251              		.loc 1 2087 4 view .LVU1993
2087:src/display.c **** 	  z->exponent = 0;
 6252              		.loc 1 2087 22 is_stmt 0 view .LVU1994
 6253 061c D7E90023 		ldrd	r2, r3, [r7]
 6254 0620 03EB0208 		add	r8, r3, r2
2088:src/display.c **** 	}
 6255              		.loc 1 2088 16 view .LVU1995
 6256 0624 C7F804A0 		str	r10, [r7, #4]
2087:src/display.c **** 	  z->exponent = 0;
 6257              		.loc 1 2087 8 view .LVU1996
 6258 0628 08F1FF38 		add	r8, r8, #-1
 6259              	.LVL688:
2088:src/display.c **** 	}
 6260              		.loc 1 2088 4 is_stmt 1 view .LVU1997
 6261 062c 06E5     		b	.L472
 6262              	.LVL689:
 6263              	.L700:
2176:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6264              		.loc 1 2176 6 view .LVU1998
2177:src/display.c **** 	      *p++ = *q++;
 6265              		.loc 1 2177 13 is_stmt 0 view .LVU1999
 6266 062e 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2177:src/display.c **** 	      *p++ = *q++;
 6267              		.loc 1 2177 12 view .LVU2000
 6268 0632 A3F13002 		sub	r2, r3, #48
 6269 0636 092A     		cmp	r2, #9
2176:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6270              		.loc 1 2176 7 view .LVU2001
 6271 0638 08F10108 		add	r8, r8, #1
 6272              	.LVL690:
2177:src/display.c **** 	      *p++ = *q++;
 6273              		.loc 1 2177 6 is_stmt 1 view .LVU2002
2177:src/display.c **** 	      *p++ = *q++;
 6274              		.loc 1 2177 12 view .LVU2003
 6275 063c 3FF689AD 		bhi	.L502
 6276              	.LVL691:
 6277              	.L507:
2178:src/display.c **** 	  }
 6278              		.loc 1 2178 8 view .LVU2004
2178:src/display.c **** 	  }
 6279              		.loc 1 2178 13 is_stmt 0 view .LVU2005
 6280 0640 01F8013B 		strb	r3, [r1], #1
 6281              	.LVL692:
2177:src/display.c **** 	      *p++ = *q++;
 6282              		.loc 1 2177 12 is_stmt 1 view .LVU2006
2177:src/display.c **** 	      *p++ = *q++;
 6283              		.loc 1 2177 13 is_stmt 0 view .LVU2007
 6284 0644 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2177:src/display.c **** 	      *p++ = *q++;
 6285              		.loc 1 2177 12 view .LVU2008
 6286 0648 A3F13002 		sub	r2, r3, #48
 6287 064c 092A     		cmp	r2, #9
 6288 064e F7D9     		bls	.L507
 6289 0650 7FE5     		b	.L502
ARM GAS  /tmp/ccdg5rgB.s 			page 207


 6290              	.LVL693:
 6291              	.L698:
2160:src/display.c **** 	for (; *q == '0'; q++);
 6292              		.loc 1 2160 4 is_stmt 1 view .LVU2009
2043:src/display.c **** 	int trimzeros = 0;
 6293              		.loc 1 2043 6 is_stmt 0 view .LVU2010
 6294 0652 0022     		movs	r2, #0
 6295 0654 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6296 0658 0392     		str	r2, [sp, #12]
2160:src/display.c **** 	for (; *q == '0'; q++);
 6297              		.loc 1 2160 5 view .LVU2011
 6298 065a 08F10108 		add	r8, r8, #1
 6299              	.LVL694:
2160:src/display.c **** 	for (; *q == '0'; q++);
 6300              		.loc 1 2160 5 view .LVU2012
 6301 065e 4BE5     		b	.L497
 6302              	.LVL695:
 6303              	.L692:
2094:src/display.c **** 	    x[0] = '-';
 6304              		.loc 1 2094 34 discriminator 1 view .LVU2013
 6305 0660 6B20     		movs	r0, #107
 6306 0662 FFF7FEFF 		bl	get_user_flag
 6307              	.LVL696:
2094:src/display.c **** 	    x[0] = '-';
 6308              		.loc 1 2094 31 discriminator 1 view .LVU2014
 6309 0666 0028     		cmp	r0, #0
 6310 0668 3FF4FAAC 		beq	.L474
2095:src/display.c **** 	    x[1] = '0';
 6311              		.loc 1 2095 6 is_stmt 1 view .LVU2015
2096:src/display.c **** 	  } else
 6312              		.loc 1 2096 6 view .LVU2016
2095:src/display.c **** 	    x[1] = '0';
 6313              		.loc 1 2095 11 is_stmt 0 view .LVU2017
 6314 066c 43F22D03 		movw	r3, #12333
 6315 0670 ADF82430 		strh	r3, [sp, #36]	@ movhi
2096:src/display.c **** 	  } else
 6316              		.loc 1 2096 11 view .LVU2018
 6317 0674 F7E4     		b	.L475
 6318              	.LVL697:
 6319              	.L696:
2153:src/display.c **** 	  CLR_MANT_SIGN;
 6320              		.loc 1 2153 4 is_stmt 1 view .LVU2019
 6321              	.LBB411:
 6322              	.LBI411:
 322:src/display.c **** {
 6323              		.loc 1 322 13 view .LVU2020
 6324              	.LBB412:
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6325              		.loc 1 324 3 view .LVU2021
 325:src/display.c **** }
 6326              		.loc 1 325 3 view .LVU2022
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6327              		.loc 1 324 27 is_stmt 0 view .LVU2023
 6328 0676 1F4B     		ldr	r3, .L716+20
 6329 0678 2022     		movs	r2, #32
 325:src/display.c **** }
 6330              		.loc 1 325 3 view .LVU2024
ARM GAS  /tmp/ccdg5rgB.s 			page 208


 6331 067a 8220     		movs	r0, #130
 324:src/display.c ****   clr_dot(EXP_SIGN);
 6332              		.loc 1 324 27 view .LVU2025
 6333 067c 1A70     		strb	r2, [r3]
 325:src/display.c **** }
 6334              		.loc 1 325 3 view .LVU2026
 6335 067e FFF7FEFF 		bl	clr_dot
 6336              	.LVL698:
 6337              	.LBE412:
 6338              	.LBE411:
2154:src/display.c **** 	}
 6339              		.loc 1 2154 4 is_stmt 1 view .LVU2027
 6340              	.LBB413:
 6341              	.LBI413:
 310:src/display.c **** {
 6342              		.loc 1 310 13 view .LVU2028
 6343              	.LBB414:
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6344              		.loc 1 312 3 view .LVU2029
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6345              		.loc 1 312 25 is_stmt 0 view .LVU2030
 6346 0682 1D4B     		ldr	r3, .L716+24
 6347 0684 2022     		movs	r2, #32
 313:src/display.c **** }
 6348              		.loc 1 313 3 view .LVU2031
 6349 0686 8120     		movs	r0, #129
 312:src/display.c ****   clr_dot(MANT_SIGN);
 6350              		.loc 1 312 25 view .LVU2032
 6351 0688 1A70     		strb	r2, [r3]
 313:src/display.c **** }
 6352              		.loc 1 313 3 is_stmt 1 view .LVU2033
 6353 068a FFF7FEFF 		bl	clr_dot
 6354              	.LVL699:
 314:src/display.c **** 
 6355              		.loc 1 314 1 is_stmt 0 view .LVU2034
 6356 068e 29E5     		b	.L495
 6357              	.LVL700:
 6358              	.L702:
 314:src/display.c **** 
 6359              		.loc 1 314 1 view .LVU2035
 6360              	.LBE414:
 6361              	.LBE413:
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6362              		.loc 1 2354 72 discriminator 2 view .LVU2036
 6363 0690 06F2E732 		addw	r2, r6, #999
2354:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6364              		.loc 1 2354 58 discriminator 2 view .LVU2037
 6365 0694 40F2CE73 		movw	r3, #1998
 6366 0698 9A42     		cmp	r2, r3
 6367 069a 7FF6FEAD 		bls	.L573
2355:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6368              		.loc 1 2355 4 is_stmt 1 view .LVU2038
2355:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6369              		.loc 1 2355 20 is_stmt 0 view .LVU2039
 6370 069e 019A     		ldr	r2, [sp, #4]
 6371 06a0 0A23     		movs	r3, #10
2356:src/display.c **** 	  return;
ARM GAS  /tmp/ccdg5rgB.s 			page 209


 6372              		.loc 1 2356 4 view .LVU2040
 6373 06a2 2146     		mov	r1, r4
 6374 06a4 3846     		mov	r0, r7
2355:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6375              		.loc 1 2355 20 view .LVU2041
 6376 06a6 1360     		str	r3, [r2]
2356:src/display.c **** 	  return;
 6377              		.loc 1 2356 4 is_stmt 1 view .LVU2042
 6378 06a8 FFF7FEFF 		bl	set_x_dn
 6379              	.LVL701:
2357:src/display.c **** 	}
 6380              		.loc 1 2357 4 view .LVU2043
 6381 06ac 30E6     		b	.L465
 6382              	.LVL702:
 6383              	.L490:
 6384              	.LBB415:
2115:src/display.c **** 
 6385              		.loc 1 2115 4 view .LVU2044
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6386              		.loc 1 2117 4 view .LVU2045
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6387              		.loc 1 2117 11 is_stmt 0 view .LVU2046
 6388 06ae 2A46     		mov	r2, r5
 6389 06b0 07A9     		add	r1, sp, #28
 6390 06b2 3846     		mov	r0, r7
 6391 06b4 FFF7FEFF 		bl	std_round_fix
 6392              	.LVL703:
 6393              	.LBE415:
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6394              		.loc 1 2044 6 view .LVU2047
 6395 06b8 0023     		movs	r3, #0
 6396              	.LBB416:
2117:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6397              		.loc 1 2117 11 view .LVU2048
 6398 06ba 0546     		mov	r5, r0
 6399              	.LVL704:
2118:src/display.c **** 	    // allow zeros to be trimmed
 6400              		.loc 1 2118 4 is_stmt 1 view .LVU2049
 6401              	.LBE416:
2044:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6402              		.loc 1 2044 6 is_stmt 0 view .LVU2050
 6403 06bc 0493     		str	r3, [sp, #16]
 6404 06be EBE4     		b	.L594
 6405              	.LVL705:
 6406              	.L576:
2369:src/display.c **** 	      SET_MANT_SIGN;
 6407              		.loc 1 2369 6 is_stmt 1 view .LVU2051
2369:src/display.c **** 	      SET_MANT_SIGN;
 6408              		.loc 1 2369 9 is_stmt 0 view .LVU2052
 6409 06c0 002F     		cmp	r7, #0
 6410 06c2 40F01181 		bne	.L579
2370:src/display.c **** 	    else
 6411              		.loc 1 2370 8 is_stmt 1 view .LVU2053
 6412              	.LBB417:
 6413              	.LBI417:
 304:src/display.c **** {
 6414              		.loc 1 304 13 view .LVU2054
ARM GAS  /tmp/ccdg5rgB.s 			page 210


 6415              	.LBB418:
 306:src/display.c ****   set_dot(MANT_SIGN);
 6416              		.loc 1 306 3 view .LVU2055
 306:src/display.c ****   set_dot(MANT_SIGN);
 6417              		.loc 1 306 25 is_stmt 0 view .LVU2056
 6418 06c6 0C4B     		ldr	r3, .L716+24
 6419 06c8 2D22     		movs	r2, #45
 307:src/display.c **** }
 6420              		.loc 1 307 3 view .LVU2057
 6421 06ca 8120     		movs	r0, #129
 306:src/display.c ****   set_dot(MANT_SIGN);
 6422              		.loc 1 306 25 view .LVU2058
 6423 06cc 1A70     		strb	r2, [r3]
 307:src/display.c **** }
 6424              		.loc 1 307 3 is_stmt 1 view .LVU2059
 6425 06ce FFF7FEFF 		bl	set_dot
 6426              	.LVL706:
 307:src/display.c **** }
 6427              		.loc 1 307 3 is_stmt 0 view .LVU2060
 6428              	.LBE418:
 6429              	.LBE417:
2375:src/display.c **** 	  if (c == '.') {
 6430              		.loc 1 2375 12 is_stmt 1 view .LVU2061
2375:src/display.c **** 	  if (c == '.') {
 6431              		.loc 1 2375 18 is_stmt 0 view .LVU2062
 6432 06d2 9DF82420 		ldrb	r2, [sp, #36]	@ zero_extendqisi2
 6433              	.LVL707:
2375:src/display.c **** 	  if (c == '.') {
 6434              		.loc 1 2375 2 view .LVU2063
 6435 06d6 002A     		cmp	r2, #0
 6436 06d8 7FF4FCAD 		bne	.L578
 6437 06dc 0DE6     		b	.L577
 6438              	.L717:
 6439 06de 00BF     		.align	2
 6440              	.L716:
 6441 06e0 00000000 		.word	main_ram
 6442 06e4 56555555 		.word	1431655766
 6443 06e8 00000000 		.word	.LANCHOR1
 6444 06ec 00000000 		.word	.LANCHOR0
 6445 06f0 00000000 		.word	Ctx
 6446 06f4 00000000 		.word	LastDisplayedExponent
 6447 06f8 00000000 		.word	LastDisplayedNumber
 6448              	.LVL708:
 6449              	.L693:
2103:src/display.c **** 	  return;
 6450              		.loc 1 2103 4 is_stmt 1 view .LVU2064
 6451              	.LBB419:
 6452              	.LBI419:
1891:src/display.c **** 	const int dbl = is_dblmode();
 6453              		.loc 1 1891 19 view .LVU2065
 6454              	.LBB420:
1892:src/display.c **** 	char *p;
 6455              		.loc 1 1892 2 view .LVU2066
1892:src/display.c **** 	char *p;
 6456              		.loc 1 1892 18 is_stmt 0 view .LVU2067
 6457 06fc FFF7FEFF 		bl	is_dblmode
 6458              	.LVL709:
ARM GAS  /tmp/ccdg5rgB.s 			page 211


1908:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6459              		.loc 1 1908 5 view .LVU2068
 6460 0700 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6461 0704 2D2B     		cmp	r3, #45
1892:src/display.c **** 	char *p;
 6462              		.loc 1 1892 18 view .LVU2069
 6463 0706 0446     		mov	r4, r0
 6464              	.LVL710:
1893:src/display.c **** 	int i, j;
 6465              		.loc 1 1893 2 is_stmt 1 view .LVU2070
1894:src/display.c **** 	char *upper_str;
 6466              		.loc 1 1894 2 view .LVU2071
1895:src/display.c **** 	enum separator_modes separator_mode;
 6467              		.loc 1 1895 2 view .LVU2072
1896:src/display.c **** 	char decimal_mark;
 6468              		.loc 1 1896 2 view .LVU2073
1897:src/display.c **** 	char thousands_sep;
 6469              		.loc 1 1897 2 view .LVU2074
1898:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6470              		.loc 1 1898 2 view .LVU2075
1904:src/display.c **** #endif
 6471              		.loc 1 1904 2 view .LVU2076
1906:src/display.c **** 
 6472              		.loc 1 1906 2 view .LVU2077
1908:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6473              		.loc 1 1908 2 view .LVU2078
1908:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6474              		.loc 1 1908 5 is_stmt 0 view .LVU2079
 6475 0708 00F02081 		beq	.L710
1921:src/display.c **** 
 6476              		.loc 1 1921 16 view .LVU2080
 6477 070c 0027     		movs	r7, #0
 6478              	.LVL711:
 6479              	.L477:
1923:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6480              		.loc 1 1923 2 is_stmt 1 view .LVU2081
1923:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6481              		.loc 1 1923 6 is_stmt 0 view .LVU2082
 6482 070e 0021     		movs	r1, #0
 6483 0710 5846     		mov	r0, fp
 6484 0712 FFF7FEFF 		bl	find_char
 6485              	.LVL712:
1924:src/display.c **** 
 6486              		.loc 1 1924 2 is_stmt 1 view .LVU2083
1924:src/display.c **** 
 6487              		.loc 1 1924 23 is_stmt 0 view .LVU2084
 6488 0716 A0EB0B02 		sub	r2, r0, fp
1924:src/display.c **** 
 6489              		.loc 1 1924 2 view .LVU2085
 6490 071a C2F12202 		rsb	r2, r2, #34
 6491 071e 3021     		movs	r1, #48
 6492 0720 FFF7FEFF 		bl	xset
 6493              	.LVL713:
1926:src/display.c **** 	  separator_mode = SEP_COMMA;
 6494              		.loc 1 1926 2 is_stmt 1 view .LVU2086
1926:src/display.c **** 	  separator_mode = SEP_COMMA;
 6495              		.loc 1 1926 18 is_stmt 0 view .LVU2087
ARM GAS  /tmp/ccdg5rgB.s 			page 212


 6496 0724 AC4A     		ldr	r2, .L718
1937:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6497              		.loc 1 1937 6 view .LVU2088
 6498 0726 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1926:src/display.c **** 	  separator_mode = SEP_COMMA;
 6499              		.loc 1 1926 5 view .LVU2089
 6500 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1934:src/display.c **** 	}
 6501              		.loc 1 1934 18 view .LVU2090
 6502 072a 002A     		cmp	r2, #0
 6503 072c 15BF     		itete	ne
 6504 072e 4FF00209 		movne	r9, #2
 6505 0732 2C26     		moveq	r6, #44
 6506 0734 2E26     		movne	r6, #46
 6507              	.LVL714:
1934:src/display.c **** 	}
 6508              		.loc 1 1934 18 view .LVU2091
 6509 0736 2E25     		moveq	r5, #46
 6510              	.LVL715:
1934:src/display.c **** 	}
 6511              		.loc 1 1934 18 view .LVU2092
 6512 0738 18BF     		it	ne
 6513 073a 2C25     		movne	r5, #44
 6514              	.LVL716:
1937:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6515              		.loc 1 1937 2 is_stmt 1 view .LVU2093
1937:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6516              		.loc 1 1937 5 is_stmt 0 view .LVU2094
 6517 073c 13F0380F 		tst	r3, #56
 6518 0740 40F0D880 		bne	.L711
1964:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6519              		.loc 1 1964 4 is_stmt 1 view .LVU2095
 6520              	.LVL717:
1965:src/display.c **** 	  x[1] = decimal_mark;
 6521              		.loc 1 1965 4 view .LVU2096
 6522 0744 1022     		movs	r2, #16
 6523 0746 0BF10101 		add	r1, fp, #1
 6524 074a 0BF10200 		add	r0, fp, #2
 6525 074e FFF7FEFF 		bl	xcopy
 6526              	.LVL718:
1966:src/display.c **** 	  if (grouping) {
 6527              		.loc 1 1966 4 view .LVU2097
1968:src/display.c **** 	    x[5] = thousands_sep;
 6528              		.loc 1 1968 6 is_stmt 0 view .LVU2098
 6529 0752 0D22     		movs	r2, #13
 6530 0754 0BF10501 		add	r1, fp, #5
 6531 0758 0BF10600 		add	r0, fp, #6
1966:src/display.c **** 	  if (grouping) {
 6532              		.loc 1 1966 9 view .LVU2099
 6533 075c 8BF80150 		strb	r5, [fp, #1]
1967:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6534              		.loc 1 1967 4 is_stmt 1 view .LVU2100
1968:src/display.c **** 	    x[5] = thousands_sep;
 6535              		.loc 1 1968 6 view .LVU2101
 6536 0760 FFF7FEFF 		bl	xcopy
 6537              	.LVL719:
1969:src/display.c **** 	    x += 9;
ARM GAS  /tmp/ccdg5rgB.s 			page 213


 6538              		.loc 1 1969 6 view .LVU2102
1970:src/display.c **** 	  }
 6539              		.loc 1 1970 8 is_stmt 0 view .LVU2103
 6540 0764 0BF10905 		add	r5, fp, #9
 6541              	.LVL720:
1969:src/display.c **** 	    x += 9;
 6542              		.loc 1 1969 11 view .LVU2104
 6543 0768 8BF80560 		strb	r6, [fp, #5]
1970:src/display.c **** 	  }
 6544              		.loc 1 1970 6 is_stmt 1 view .LVU2105
 6545              	.LVL721:
1973:src/display.c **** 	    if (exp < 0) {
 6546              		.loc 1 1973 4 view .LVU2106
1973:src/display.c **** 	    if (exp < 0) {
 6547              		.loc 1 1973 7 is_stmt 0 view .LVU2107
 6548 076c 002C     		cmp	r4, #0
 6549 076e 00F0EA80 		beq	.L481
1974:src/display.c **** 	      x[9] = '-';
 6550              		.loc 1 1974 6 is_stmt 1 view .LVU2108
1974:src/display.c **** 	      x[9] = '-';
 6551              		.loc 1 1974 9 is_stmt 0 view .LVU2109
 6552 0772 B8F1000F 		cmp	r8, #0
1975:src/display.c **** 	      exp = -exp;
 6553              		.loc 1 1975 8 is_stmt 1 view .LVU2110
1976:src/display.c **** 	    }
 6554              		.loc 1 1976 8 view .LVU2111
1980:src/display.c **** 	    x[10] = '0' + j;
 6555              		.loc 1 1980 8 is_stmt 0 view .LVU2112
 6556 0776 994B     		ldr	r3, .L718+4
1982:src/display.c **** 	  }
 6557              		.loc 1 1982 18 view .LVU2113
 6558 0778 9949     		ldr	r1, .L718+8
1975:src/display.c **** 	      exp = -exp;
 6559              		.loc 1 1975 13 view .LVU2114
 6560 077a B6BF     		itet	lt
 6561 077c 2D22     		movlt	r2, #45
1979:src/display.c **** 	    j = exp / 1000;
 6562              		.loc 1 1979 13 view .LVU2115
 6563 077e 2022     		movge	r2, #32
1976:src/display.c **** 	    }
 6564              		.loc 1 1976 12 view .LVU2116
 6565 0780 C8F10008 		rsblt	r8, r8, #0
 6566              	.LVL722:
1976:src/display.c **** 	    }
 6567              		.loc 1 1976 12 view .LVU2117
 6568 0784 8BF81220 		strb	r2, [fp, #18]
1980:src/display.c **** 	    x[10] = '0' + j;
 6569              		.loc 1 1980 6 is_stmt 1 view .LVU2118
1980:src/display.c **** 	    x[10] = '0' + j;
 6570              		.loc 1 1980 8 is_stmt 0 view .LVU2119
 6571 0788 A3FB0823 		umull	r2, r3, r3, r8
 6572 078c 9B09     		lsrs	r3, r3, #6
 6573              	.LVL723:
1981:src/display.c **** 	    exp -= 1000 * j;
 6574              		.loc 1 1981 6 is_stmt 1 view .LVU2120
1981:src/display.c **** 	    exp -= 1000 * j;
 6575              		.loc 1 1981 18 is_stmt 0 view .LVU2121
ARM GAS  /tmp/ccdg5rgB.s 			page 214


 6576 078e 03F13002 		add	r2, r3, #48
1982:src/display.c **** 	  }
 6577              		.loc 1 1982 10 view .LVU2122
 6578 0792 01FB0388 		mla	r8, r1, r3, r8
 6579              	.LVL724:
1981:src/display.c **** 	    exp -= 1000 * j;
 6580              		.loc 1 1981 12 view .LVU2123
 6581 0796 8BF81320 		strb	r2, [fp, #19]
1982:src/display.c **** 	  }
 6582              		.loc 1 1982 6 is_stmt 1 view .LVU2124
 6583              	.LVL725:
 6584              	.L483:
1988:src/display.c **** 	  *x = 0;
 6585              		.loc 1 1988 4 view .LVU2125
 6586 079a 0B22     		movs	r2, #11
 6587 079c 2946     		mov	r1, r5
 6588 079e 0BF10A00 		add	r0, fp, #10
 6589 07a2 FFF7FEFF 		bl	xcopy
 6590              	.LVL726:
1989:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6591              		.loc 1 1989 4 view .LVU2126
1989:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6592              		.loc 1 1989 7 is_stmt 0 view .LVU2127
 6593 07a6 0022     		movs	r2, #0
1990:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6594              		.loc 1 1990 4 view .LVU2128
 6595 07a8 4046     		mov	r0, r8
 6596 07aa 0121     		movs	r1, #1
1989:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6597              		.loc 1 1989 7 view .LVU2129
 6598 07ac 8BF80920 		strb	r2, [fp, #9]
1990:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6599              		.loc 1 1990 4 is_stmt 1 view .LVU2130
 6600 07b0 FFF7FEFF 		bl	set_exp
 6601              	.LVL727:
1991:src/display.c **** 	}
 6602              		.loc 1 1991 4 view .LVU2131
1991:src/display.c **** 	}
 6603              		.loc 1 1991 4 is_stmt 0 view .LVU2132
 6604 07b4 ABEB0707 		sub	r7, fp, r7
 6605              	.LVL728:
1991:src/display.c **** 	}
 6606              		.loc 1 1991 6 view .LVU2133
 6607 07b8 0924     		movs	r4, #9
 6608              	.LVL729:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6609              		.loc 1 1994 11 is_stmt 1 view .LVU2134
 6610              	.L484:
1995:src/display.c **** 	  }
 6611              		.loc 1 1995 6 view .LVU2135
 6612              	.LBB421:
 6613              	.LBI421:
 375:src/display.c ****   if (sep == SEP_NONE)
 6614              		.loc 1 375 14 view .LVU2136
 6615              	.LBB422:
 376:src/display.c ****     return res;
 6616              		.loc 1 376 3 view .LVU2137
ARM GAS  /tmp/ccdg5rgB.s 			page 215


 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6617              		.loc 1 378 3 view .LVU2138
 6618 07ba 2046     		mov	r0, r4
 6619 07bc 4946     		mov	r1, r9
 6620              	.LBE422:
 6621              	.LBE421:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6622              		.loc 1 1994 38 is_stmt 0 view .LVU2139
 6623 07be 1B34     		adds	r4, r4, #27
 6624              	.LVL730:
 6625              	.LBB424:
 6626              	.LBB423:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6627              		.loc 1 1994 38 view .LVU2140
 6628 07c0 FFF7FEFF 		bl	set_separator.part.0
 6629              	.LVL731:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6630              		.loc 1 1994 38 view .LVU2141
 6631              	.LBE423:
 6632              	.LBE424:
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6633              		.loc 1 1994 36 is_stmt 1 view .LVU2142
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6634              		.loc 1 1994 11 view .LVU2143
1994:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6635              		.loc 1 1994 4 is_stmt 0 view .LVU2144
 6636 07c4 512C     		cmp	r4, #81
 6637 07c6 F8DD     		ble	.L484
 6638 07c8 6C1E     		subs	r4, r5, #1
 6639              	.LVL732:
 6640              	.L486:
2000:src/display.c **** 
 6641              		.loc 1 2000 4 is_stmt 1 view .LVU2145
 6642 07ca 5046     		mov	r0, r10
 6643 07cc 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1999:src/display.c **** 	  set_dig(j, x[i]);
 6644              		.loc 1 1999 33 is_stmt 0 view .LVU2146
 6645 07d0 0AF1090A 		add	r10, r10, #9
 6646              	.LVL733:
2000:src/display.c **** 
 6647              		.loc 1 2000 4 view .LVU2147
 6648 07d4 FFF7FEFF 		bl	set_dig
 6649              	.LVL734:
1999:src/display.c **** 	  set_dig(j, x[i]);
 6650              		.loc 1 1999 26 is_stmt 1 view .LVU2148
1999:src/display.c **** 	  set_dig(j, x[i]);
 6651              		.loc 1 1999 18 view .LVU2149
1999:src/display.c **** 	  set_dig(j, x[i]);
 6652              		.loc 1 1999 2 is_stmt 0 view .LVU2150
 6653 07d8 BAF16C0F 		cmp	r10, #108
 6654 07dc F5D1     		bne	.L486
2002:src/display.c **** 	set_status(upper_str - negative);
 6655              		.loc 1 2002 2 is_stmt 1 view .LVU2151
2002:src/display.c **** 	set_status(upper_str - negative);
 6656              		.loc 1 2002 5 is_stmt 0 view .LVU2152
 6657 07de 0023     		movs	r3, #0
2003:src/display.c ****       }
ARM GAS  /tmp/ccdg5rgB.s 			page 216


 6658              		.loc 1 2003 2 view .LVU2153
 6659 07e0 3846     		mov	r0, r7
2002:src/display.c **** 	set_status(upper_str - negative);
 6660              		.loc 1 2002 5 view .LVU2154
 6661 07e2 2B70     		strb	r3, [r5]
2003:src/display.c ****       }
 6662              		.loc 1 2003 2 is_stmt 1 view .LVU2155
 6663 07e4 FFF7FEFF 		bl	set_status
 6664              	.LVL735:
2004:src/display.c **** 
 6665              		.loc 1 2004 7 is_stmt 0 view .LVU2156
 6666 07e8 92E5     		b	.L465
 6667              	.LVL736:
 6668              	.L552:
2004:src/display.c **** 
 6669              		.loc 1 2004 7 view .LVU2157
 6670              	.LBE420:
 6671              	.LBE419:
2295:src/display.c **** 	    odig++;
 6672              		.loc 1 2295 6 is_stmt 1 view .LVU2158
2296:src/display.c **** 	    *obp++ = '.';
 6673              		.loc 1 2296 6 view .LVU2159
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6674              		.loc 1 2297 6 view .LVU2160
2295:src/display.c **** 	    odig++;
 6675              		.loc 1 2295 13 is_stmt 0 view .LVU2161
 6676 07ea 42F63063 		movw	r3, #11824
 6677 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2298:src/display.c **** 	      *obp++ = '0';
 6678              		.loc 1 2298 6 is_stmt 1 view .LVU2162
 6679              	.LVL737:
2298:src/display.c **** 	      *obp++ = '0';
 6680              		.loc 1 2298 20 view .LVU2163
2298:src/display.c **** 	      *obp++ = '0';
 6681              		.loc 1 2298 6 is_stmt 0 view .LVU2164
 6682 07f2 731C     		adds	r3, r6, #1
 6683              	.LVL738:
2298:src/display.c **** 	      *obp++ = '0';
 6684              		.loc 1 2298 6 view .LVU2165
 6685 07f4 00F0E580 		beq	.L712
 6686 07f8 C6F10102 		rsb	r2, r6, #1
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6687              		.loc 1 2297 10 view .LVU2166
 6688 07fc 0DF12600 		add	r0, sp, #38
 6689              	.LVL739:
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6690              		.loc 1 2297 10 view .LVU2167
 6691 0800 079D     		ldr	r5, [sp, #28]
 6692 0802 5A44     		add	r2, r2, fp
 6693 0804 0346     		mov	r3, r0
 6694              	.LVL740:
2299:src/display.c **** 	      odig++;
 6695              		.loc 1 2299 15 view .LVU2168
 6696 0806 3021     		movs	r1, #48
 6697              	.LVL741:
 6698              	.L560:
2299:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccdg5rgB.s 			page 217


 6699              		.loc 1 2299 8 is_stmt 1 discriminator 3 view .LVU2169
2299:src/display.c **** 	      odig++;
 6700              		.loc 1 2299 15 is_stmt 0 discriminator 3 view .LVU2170
 6701 0808 03F8011B 		strb	r1, [r3], #1
 6702              	.LVL742:
2300:src/display.c **** 	      dd--;
 6703              		.loc 1 2300 8 is_stmt 1 discriminator 3 view .LVU2171
2301:src/display.c **** 	    }
 6704              		.loc 1 2301 8 discriminator 3 view .LVU2172
2298:src/display.c **** 	      *obp++ = '0';
 6705              		.loc 1 2298 25 discriminator 3 view .LVU2173
2298:src/display.c **** 	      *obp++ = '0';
 6706              		.loc 1 2298 20 discriminator 3 view .LVU2174
2298:src/display.c **** 	      *obp++ = '0';
 6707              		.loc 1 2298 6 is_stmt 0 discriminator 3 view .LVU2175
 6708 080c 9342     		cmp	r3, r2
 6709 080e FBD1     		bne	.L560
 6710 0810 AB19     		adds	r3, r5, r6
 6711              	.LVL743:
2298:src/display.c **** 	      *obp++ = '0';
 6712              		.loc 1 2298 6 discriminator 3 view .LVU2176
 6713 0812 6FEA0608 		mvn	r8, r6
 6714 0816 0133     		adds	r3, r3, #1
 6715 0818 8044     		add	r8, r8, r0
 6716 081a 7542     		rsbs	r5, r6, #0
 6717              	.L559:
 6718              	.LVL744:
2303:src/display.c **** 	      *obp++ = *p++;
 6719              		.loc 1 2303 12 is_stmt 1 view .LVU2177
2303:src/display.c **** 	      *obp++ = *p++;
 6720              		.loc 1 2303 15 is_stmt 0 view .LVU2178
 6721 081c 5A1E     		subs	r2, r3, #1
2303:src/display.c **** 	      *obp++ = *p++;
 6722              		.loc 1 2303 12 view .LVU2179
 6723 081e 002B     		cmp	r3, #0
2303:src/display.c **** 	      *obp++ = *p++;
 6724              		.loc 1 2303 15 view .LVU2180
 6725 0820 0792     		str	r2, [sp, #28]
2303:src/display.c **** 	      *obp++ = *p++;
 6726              		.loc 1 2303 12 view .LVU2181
 6727 0822 7FF767AE 		ble	.L541
 6728 0826 4344     		add	r3, r3, r8
 6729 0828 581E     		subs	r0, r3, #1
 6730 082a 08F1FF38 		add	r8, r8, #-1
 6731              	.LVL745:
 6732              	.L561:
2304:src/display.c **** 	      odig++;
 6733              		.loc 1 2304 8 is_stmt 1 view .LVU2182
2304:src/display.c **** 	      odig++;
 6734              		.loc 1 2304 15 is_stmt 0 view .LVU2183
 6735 082e 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
 6736              	.LVL746:
2304:src/display.c **** 	      odig++;
 6737              		.loc 1 2304 15 view .LVU2184
 6738 0832 08F8011F 		strb	r1, [r8, #1]!
2305:src/display.c **** 	    }
 6739              		.loc 1 2305 8 is_stmt 1 view .LVU2185
ARM GAS  /tmp/ccdg5rgB.s 			page 218


2303:src/display.c **** 	      *obp++ = *p++;
 6740              		.loc 1 2303 12 view .LVU2186
 6741 0836 8045     		cmp	r8, r0
 6742 0838 F9D1     		bne	.L561
 6743              	.LVL747:
2303:src/display.c **** 	      *obp++ = *p++;
 6744              		.loc 1 2303 12 is_stmt 0 view .LVU2187
 6745 083a 0135     		adds	r5, r5, #1
 6746 083c 4FF0FF31 		mov	r1, #-1
 6747 0840 1544     		add	r5, r5, r2
 6748 0842 9846     		mov	r8, r3
 6749 0844 0791     		str	r1, [sp, #28]
 6750 0846 55E6     		b	.L541
 6751              	.LVL748:
 6752              	.L564:
2321:src/display.c **** 	    odig++;
 6753              		.loc 1 2321 6 is_stmt 1 view .LVU2188
2321:src/display.c **** 	    odig++;
 6754              		.loc 1 2321 13 is_stmt 0 view .LVU2189
 6755 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6756 084c 8DF82430 		strb	r3, [sp, #36]
2322:src/display.c **** 	    dd--;
 6757              		.loc 1 2322 6 is_stmt 1 view .LVU2190
 6758              	.LVL749:
2323:src/display.c **** 	    exp--;
 6759              		.loc 1 2323 6 view .LVU2191
2323:src/display.c **** 	    exp--;
 6760              		.loc 1 2323 8 is_stmt 0 view .LVU2192
 6761 0850 013A     		subs	r2, r2, #1
2324:src/display.c **** 	  case -2:
 6762              		.loc 1 2324 6 is_stmt 1 view .LVU2193
2324:src/display.c **** 	  case -2:
 6763              		.loc 1 2324 9 is_stmt 0 view .LVU2194
 6764 0852 013E     		subs	r6, r6, #1
 6765              	.LVL750:
2324:src/display.c **** 	  case -2:
 6766              		.loc 1 2324 9 view .LVU2195
 6767 0854 0325     		movs	r5, #3
2321:src/display.c **** 	    odig++;
 6768              		.loc 1 2321 17 view .LVU2196
 6769 0856 0DF15909 		add	r9, sp, #89
 6770              	.LVL751:
2321:src/display.c **** 	    odig++;
 6771              		.loc 1 2321 10 view .LVU2197
 6772 085a 0DF12501 		add	r1, sp, #37
 6773              	.LVL752:
 6774              	.L567:
2327:src/display.c **** 	    odig++;
 6775              		.loc 1 2327 6 is_stmt 1 view .LVU2198
2327:src/display.c **** 	    odig++;
 6776              		.loc 1 2327 13 is_stmt 0 view .LVU2199
 6777 085e 19F8013B 		ldrb	r3, [r9], #1	@ zero_extendqisi2
 6778              	.LVL753:
2327:src/display.c **** 	    odig++;
 6779              		.loc 1 2327 13 view .LVU2200
 6780 0862 01F8013B 		strb	r3, [r1], #1
 6781              	.LVL754:
ARM GAS  /tmp/ccdg5rgB.s 			page 219


2328:src/display.c **** 	    dd--;
 6782              		.loc 1 2328 6 is_stmt 1 view .LVU2201
2329:src/display.c **** 	    exp--;
 6783              		.loc 1 2329 6 view .LVU2202
2329:src/display.c **** 	    exp--;
 6784              		.loc 1 2329 8 is_stmt 0 view .LVU2203
 6785 0866 013A     		subs	r2, r2, #1
2330:src/display.c **** 	  case 0:
 6786              		.loc 1 2330 6 is_stmt 1 view .LVU2204
2330:src/display.c **** 	  case 0:
 6787              		.loc 1 2330 9 is_stmt 0 view .LVU2205
 6788 0868 013E     		subs	r6, r6, #1
 6789              	.LVL755:
2330:src/display.c **** 	  case 0:
 6790              		.loc 1 2330 9 view .LVU2206
 6791 086a 24E6     		b	.L531
 6792              	.LVL756:
 6793              	.L566:
2330:src/display.c **** 	  case 0:
 6794              		.loc 1 2330 9 view .LVU2207
 6795 086c 079A     		ldr	r2, [sp, #28]
2318:src/display.c **** 	  case -1:
 6796              		.loc 1 2318 16 view .LVU2208
 6797 086e 0225     		movs	r5, #2
2023:src/display.c **** 	int odig = 0;
 6798              		.loc 1 2023 15 view .LVU2209
 6799 0870 5946     		mov	r1, fp
 6800 0872 F4E7     		b	.L567
 6801              	.LVL757:
 6802              	.L512:
2186:src/display.c **** 	    /* We might have push the fixed decimals off the
 6803              		.loc 1 2186 6 is_stmt 1 view .LVU2210
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6804              		.loc 1 2190 6 view .LVU2211
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6805              		.loc 1 2190 9 is_stmt 0 view .LVU2212
 6806 0874 0299     		ldr	r1, [sp, #8]
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6807              		.loc 1 2190 23 view .LVU2213
 6808 0876 9319     		adds	r3, r2, r6
2190:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6809              		.loc 1 2190 9 view .LVU2214
 6810 0878 9942     		cmp	r1, r3
2191:src/display.c **** 	  }
 6811              		.loc 1 2191 8 is_stmt 1 view .LVU2215
2191:src/display.c **** 	  }
 6812              		.loc 1 2191 30 is_stmt 0 view .LVU2216
 6813 087a DFBF     		itttt	le
 6814 087c 029B     		ldrle	r3, [sp, #8]
 6815 087e 03F1FF32 		addle	r2, r3, #-1
2191:src/display.c **** 	  }
 6816              		.loc 1 2191 35 view .LVU2217
 6817 0882 921B     		suble	r2, r2, r6
2191:src/display.c **** 	  }
 6818              		.loc 1 2191 11 view .LVU2218
 6819 0884 0792     		strle	r2, [sp, #28]
 6820 0886 3146     		mov	r1, r6
ARM GAS  /tmp/ccdg5rgB.s 			page 220


 6821 0888 6BE4     		b	.L509
 6822              	.LVL758:
 6823              	.L537:
2230:src/display.c **** 	      odig++;
 6824              		.loc 1 2230 8 is_stmt 1 view .LVU2219
2230:src/display.c **** 	      odig++;
 6825              		.loc 1 2230 15 is_stmt 0 view .LVU2220
 6826 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6827 088e 8DF82410 		strb	r1, [sp, #36]
2231:src/display.c **** 	      dd--;
 6828              		.loc 1 2231 8 is_stmt 1 view .LVU2221
 6829              	.LVL759:
2232:src/display.c **** 	      exp--;
 6830              		.loc 1 2232 8 view .LVU2222
2232:src/display.c **** 	      exp--;
 6831              		.loc 1 2232 10 is_stmt 0 view .LVU2223
 6832 0892 013A     		subs	r2, r2, #1
2233:src/display.c **** 	    case -2:
 6833              		.loc 1 2233 8 is_stmt 1 view .LVU2224
2233:src/display.c **** 	    case -2:
 6834              		.loc 1 2233 11 is_stmt 0 view .LVU2225
 6835 0894 013E     		subs	r6, r6, #1
 6836              	.LVL760:
2233:src/display.c **** 	    case -2:
 6837              		.loc 1 2233 11 view .LVU2226
 6838 0896 0325     		movs	r5, #3
2230:src/display.c **** 	      odig++;
 6839              		.loc 1 2230 19 view .LVU2227
 6840 0898 0DF15909 		add	r9, sp, #89
 6841              	.LVL761:
2230:src/display.c **** 	      odig++;
 6842              		.loc 1 2230 12 view .LVU2228
 6843 089c 0DF12501 		add	r1, sp, #37
 6844              	.LVL762:
 6845              	.L540:
2236:src/display.c **** 	      odig++;
 6846              		.loc 1 2236 8 is_stmt 1 view .LVU2229
2236:src/display.c **** 	      odig++;
 6847              		.loc 1 2236 15 is_stmt 0 view .LVU2230
 6848 08a0 19F8010B 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 6849              	.LVL763:
2236:src/display.c **** 	      odig++;
 6850              		.loc 1 2236 15 view .LVU2231
 6851 08a4 01F8010B 		strb	r0, [r1], #1
 6852              	.LVL764:
2237:src/display.c **** 	      dd--;
 6853              		.loc 1 2237 8 is_stmt 1 view .LVU2232
2238:src/display.c **** 	      exp--;
 6854              		.loc 1 2238 8 view .LVU2233
2239:src/display.c **** 	    case 0:
 6855              		.loc 1 2239 8 view .LVU2234
2238:src/display.c **** 	      exp--;
 6856              		.loc 1 2238 10 is_stmt 0 view .LVU2235
 6857 08a8 013A     		subs	r2, r2, #1
 6858 08aa 0792     		str	r2, [sp, #28]
2239:src/display.c **** 	    case 0:
 6859              		.loc 1 2239 11 view .LVU2236
ARM GAS  /tmp/ccdg5rgB.s 			page 221


 6860 08ac 013E     		subs	r6, r6, #1
 6861              	.LVL765:
 6862              	.L536:
2241:src/display.c **** 	    };
 6863              		.loc 1 2241 8 is_stmt 1 view .LVU2237
2242:src/display.c **** 	    *obp++ = *p++;
 6864              		.loc 1 2242 7 view .LVU2238
2243:src/display.c **** 	    odig++;
 6865              		.loc 1 2243 6 view .LVU2239
2243:src/display.c **** 	    odig++;
 6866              		.loc 1 2243 17 is_stmt 0 view .LVU2240
 6867 08ae 4A46     		mov	r2, r9
 6868              	.LVL766:
2243:src/display.c **** 	    odig++;
 6869              		.loc 1 2243 13 view .LVU2241
 6870 08b0 8846     		mov	r8, r1
 6871 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6872              	.LVL767:
2243:src/display.c **** 	    odig++;
 6873              		.loc 1 2243 13 view .LVU2242
 6874 08b6 08F8020B 		strb	r0, [r8], #2
2244:src/display.c **** 	    *obp++ = '.';
 6875              		.loc 1 2244 6 is_stmt 1 view .LVU2243
2245:src/display.c **** 	    for (i=1; i<count; i++) {
 6876              		.loc 1 2245 6 view .LVU2244
 6877              	.LVL768:
2246:src/display.c **** 	      *obp++ = *p++;
 6878              		.loc 1 2246 6 is_stmt 0 view .LVU2245
 6879 08ba 012B     		cmp	r3, #1
2245:src/display.c **** 	    for (i=1; i<count; i++) {
 6880              		.loc 1 2245 13 view .LVU2246
 6881 08bc 4FF02E00 		mov	r0, #46
 6882 08c0 4870     		strb	r0, [r1, #1]
2246:src/display.c **** 	      *obp++ = *p++;
 6883              		.loc 1 2246 6 is_stmt 1 view .LVU2247
 6884              	.LVL769:
2246:src/display.c **** 	      *obp++ = *p++;
 6885              		.loc 1 2246 16 view .LVU2248
2246:src/display.c **** 	      *obp++ = *p++;
 6886              		.loc 1 2246 6 is_stmt 0 view .LVU2249
 6887 08c2 34DD     		ble	.L609
2246:src/display.c **** 	      *obp++ = *p++;
 6888              		.loc 1 2246 6 view .LVU2250
 6889 08c4 0131     		adds	r1, r1, #1
 6890 08c6 9944     		add	r9, r9, r3
 6891              	.LVL770:
 6892              	.L542:
2247:src/display.c **** 	      odig++;
 6893              		.loc 1 2247 8 is_stmt 1 discriminator 3 view .LVU2251
2247:src/display.c **** 	      odig++;
 6894              		.loc 1 2247 15 is_stmt 0 discriminator 3 view .LVU2252
 6895 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6896              	.LVL771:
2247:src/display.c **** 	      odig++;
 6897              		.loc 1 2247 15 discriminator 3 view .LVU2253
 6898 08cc 01F8010F 		strb	r0, [r1, #1]!
2248:src/display.c **** 	    }
ARM GAS  /tmp/ccdg5rgB.s 			page 222


 6899              		.loc 1 2248 8 is_stmt 1 discriminator 3 view .LVU2254
2246:src/display.c **** 	      *obp++ = *p++;
 6900              		.loc 1 2246 25 discriminator 3 view .LVU2255
2246:src/display.c **** 	      *obp++ = *p++;
 6901              		.loc 1 2246 16 discriminator 3 view .LVU2256
2246:src/display.c **** 	      *obp++ = *p++;
 6902              		.loc 1 2246 6 is_stmt 0 discriminator 3 view .LVU2257
 6903 08d0 4A45     		cmp	r2, r9
 6904 08d2 F9D1     		bne	.L542
 6905 08d4 013B     		subs	r3, r3, #1
 6906              	.LVL772:
2246:src/display.c **** 	      *obp++ = *p++;
 6907              		.loc 1 2246 6 discriminator 3 view .LVU2258
 6908 08d6 9844     		add	r8, r8, r3
 6909 08d8 1D44     		add	r5, r5, r3
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6910              		.loc 1 2250 15 view .LVU2259
 6911 08da 4FF0010A 		mov	r10, #1
 6912 08de 09E6     		b	.L541
 6913              	.LVL773:
 6914              	.L539:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6915              		.loc 1 2250 15 view .LVU2260
 6916 08e0 079A     		ldr	r2, [sp, #28]
2227:src/display.c **** 	    case -1:
 6917              		.loc 1 2227 24 view .LVU2261
 6918 08e2 0225     		movs	r5, #2
2023:src/display.c **** 	int odig = 0;
 6919              		.loc 1 2023 15 view .LVU2262
 6920 08e4 5946     		mov	r1, fp
 6921 08e6 DBE7     		b	.L540
 6922              	.LVL774:
 6923              	.L579:
2372:src/display.c **** 	  }
 6924              		.loc 1 2372 8 is_stmt 1 view .LVU2263
 6925 08e8 2D21     		movs	r1, #45
 6926 08ea A7F10900 		sub	r0, r7, #9
 6927 08ee FFF7FEFF 		bl	set_dig
 6928              	.LVL775:
 6929 08f2 EAE4     		b	.L575
 6930              	.LVL776:
 6931              	.L711:
 6932              	.LBB429:
 6933              	.LBB427:
 6934              	.LBB425:
1939:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6935              		.loc 1 1939 4 view .LVU2264
1942:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6936              		.loc 1 1942 4 view .LVU2265
1942:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6937              		.loc 1 1942 14 is_stmt 0 view .LVU2266
 6938 08f4 0BF10307 		add	r7, fp, #3
 6939              	.LVL777:
1943:src/display.c **** 	  if (grouping) {
 6940              		.loc 1 1943 4 is_stmt 1 view .LVU2267
 6941 08f8 3A49     		ldr	r1, .L718+12
 6942 08fa 0D22     		movs	r2, #13
ARM GAS  /tmp/ccdg5rgB.s 			page 223


 6943 08fc 3846     		mov	r0, r7
 6944 08fe FFF7FEFF 		bl	xcopy
 6945              	.LVL778:
1944:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6946              		.loc 1 1944 4 view .LVU2268
1945:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6947              		.loc 1 1945 6 view .LVU2269
 6948 0902 1322     		movs	r2, #19
 6949 0904 0BEB0201 		add	r1, fp, r2
 6950 0908 0BF11400 		add	r0, fp, #20
 6951 090c FFF7FEFF 		bl	xcopy
 6952              	.LVL779:
1946:src/display.c **** 	    x += 3 + 13 + 7;
 6953              		.loc 1 1946 6 view .LVU2270
1947:src/display.c **** 	  }
 6954              		.loc 1 1947 8 is_stmt 0 view .LVU2271
 6955 0910 0BF11705 		add	r5, fp, #23
 6956              	.LVL780:
1946:src/display.c **** 	    x += 3 + 13 + 7;
 6957              		.loc 1 1946 24 view .LVU2272
 6958 0914 8BF81360 		strb	r6, [fp, #19]
1947:src/display.c **** 	  }
 6959              		.loc 1 1947 6 is_stmt 1 view .LVU2273
 6960              	.LVL781:
1960:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6961              		.loc 1 1960 4 view .LVU2274
1961:src/display.c **** 	}
 6962              		.loc 1 1961 4 view .LVU2275
1961:src/display.c **** 	}
 6963              		.loc 1 1961 6 is_stmt 0 view .LVU2276
 6964 0918 1B24     		movs	r4, #27
 6965              	.LVL782:
1961:src/display.c **** 	}
 6966              		.loc 1 1961 6 view .LVU2277
 6967              	.LBE425:
 6968 091a 4EE7     		b	.L484
 6969              	.LVL783:
 6970              	.L707:
1961:src/display.c **** 	}
 6971              		.loc 1 1961 6 view .LVU2278
 6972              	.LBE427:
 6973              	.LBE429:
2060:src/display.c **** 	      return;
 6974              		.loc 1 2060 8 is_stmt 1 view .LVU2279
 6975 091c 3846     		mov	r0, r7
 6976 091e FFF7FEFF 		bl	set_x_hms
 6977              	.LVL784:
2061:src/display.c **** 	    }
 6978              		.loc 1 2061 8 view .LVU2280
 6979 0922 F5E4     		b	.L465
 6980              	.LVL785:
 6981              	.L607:
2222:src/display.c **** 	  if (count != *display_digits)
 6982              		.loc 1 2222 4 is_stmt 0 view .LVU2281
 6983 0924 029B     		ldr	r3, [sp, #8]
 6984 0926 71E4     		b	.L532
 6985              	.LVL786:
ARM GAS  /tmp/ccdg5rgB.s 			page 224


 6986              	.L608:
2227:src/display.c **** 	    case -1:
 6987              		.loc 1 2227 24 view .LVU2282
 6988 0928 0125     		movs	r5, #1
 6989 092a 5946     		mov	r1, fp
 6990 092c BFE7     		b	.L536
 6991              	.LVL787:
 6992              	.L609:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6993              		.loc 1 2250 15 view .LVU2283
 6994 092e 4FF0010A 		mov	r10, #1
 6995 0932 DFE5     		b	.L541
 6996              	.LVL788:
 6997              	.L583:
 6998              	.LBB430:
 6999              	.LBB409:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7000              		.loc 1 2250 15 view .LVU2284
 7001 0934 3846     		mov	r0, r7
 7002 0936 FFF7FEFF 		bl	set_separator.part.0
 7003              	.LVL789:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7004              		.loc 1 2250 15 view .LVU2285
 7005 093a 0446     		mov	r4, r0
 7006              	.LVL790:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7007              		.loc 1 2250 15 view .LVU2286
 7008 093c F7E5     		b	.L581
 7009              	.LVL791:
 7010              	.L515:
2250:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 7011              		.loc 1 2250 15 view .LVU2287
 7012              	.LBE409:
 7013              	.LBE430:
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7014              		.loc 1 2200 4 is_stmt 1 view .LVU2288
2200:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 7015              		.loc 1 2200 7 is_stmt 0 view .LVU2289
 7016 093e 4B45     		cmp	r3, r9
 7017 0940 7FF429AC 		bne	.L592
 7018 0944 3EE5     		b	.L593
 7019              	.LVL792:
 7020              	.L481:
 7021              	.LBB431:
 7022              	.LBB428:
1985:src/display.c **** 	    x[10] = '\0';
 7023              		.loc 1 1985 6 is_stmt 1 view .LVU2290
1986:src/display.c **** 	  }
 7024              		.loc 1 1986 6 view .LVU2291
1985:src/display.c **** 	    x[10] = '\0';
 7025              		.loc 1 1985 11 is_stmt 0 view .LVU2292
 7026 0946 ABF81240 		strh	r4, [fp, #18]	@ movhi
 7027 094a 26E7     		b	.L483
 7028              	.LVL793:
 7029              	.L710:
 7030              	.LBB426:
1910:src/display.c **** 
ARM GAS  /tmp/ccdg5rgB.s 			page 225


 7031              		.loc 1 1910 4 is_stmt 1 view .LVU2293
1912:src/display.c **** 	  xcopy(x, small_minus, 4);
 7032              		.loc 1 1912 4 view .LVU2294
 7033 094c 2222     		movs	r2, #34
 7034 094e 0DF12501 		add	r1, sp, #37
 7035 0952 0AA8     		add	r0, sp, #40
 7036              	.LVL794:
1912:src/display.c **** 	  xcopy(x, small_minus, 4);
 7037              		.loc 1 1912 4 is_stmt 0 view .LVU2295
 7038 0954 FFF7FEFF 		bl	xcopy
 7039              	.LVL795:
1913:src/display.c **** 	  x += 4;
 7040              		.loc 1 1913 4 is_stmt 1 view .LVU2296
 7041 0958 5846     		mov	r0, fp
 7042 095a 2349     		ldr	r1, .L718+16
 7043 095c 0422     		movs	r2, #4
 7044 095e FFF7FEFF 		bl	xcopy
 7045              	.LVL796:
1914:src/display.c **** 	  negative = 4;
 7046              		.loc 1 1914 4 view .LVU2297
1915:src/display.c **** #else
 7047              		.loc 1 1915 4 view .LVU2298
1914:src/display.c **** 	  negative = 4;
 7048              		.loc 1 1914 6 is_stmt 0 view .LVU2299
 7049 0962 0DF1280B 		add	fp, sp, #40
 7050              	.LVL797:
1915:src/display.c **** #else
 7051              		.loc 1 1915 13 view .LVU2300
 7052 0966 0427     		movs	r7, #4
 7053              	.LVL798:
1915:src/display.c **** #else
 7054              		.loc 1 1915 13 view .LVU2301
 7055              	.LBE426:
 7056 0968 D1E6     		b	.L477
 7057              	.LVL799:
 7058              	.L543:
1915:src/display.c **** #else
 7059              		.loc 1 1915 13 view .LVU2302
 7060              	.LBE428:
 7061              	.LBE431:
2266:src/display.c **** 	    odig++;
 7062              		.loc 1 2266 6 is_stmt 1 view .LVU2303
2267:src/display.c **** 	    *obp++ = '.';
 7063              		.loc 1 2267 6 view .LVU2304
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7064              		.loc 1 2268 6 view .LVU2305
2266:src/display.c **** 	    odig++;
 7065              		.loc 1 2266 13 is_stmt 0 view .LVU2306
 7066 096a 42F63062 		movw	r2, #11824
 7067 096e ADF82420 		strh	r2, [sp, #36]	@ movhi
2269:src/display.c **** 	      *obp++ = '0';
 7068              		.loc 1 2269 6 is_stmt 1 view .LVU2307
 7069              	.LVL800:
2269:src/display.c **** 	      *obp++ = '0';
 7070              		.loc 1 2269 20 view .LVU2308
2269:src/display.c **** 	      *obp++ = '0';
 7071              		.loc 1 2269 6 is_stmt 0 view .LVU2309
ARM GAS  /tmp/ccdg5rgB.s 			page 226


 7072 0972 721C     		adds	r2, r6, #1
 7073              	.LVL801:
2269:src/display.c **** 	      *obp++ = '0';
 7074              		.loc 1 2269 6 view .LVU2310
 7075 0974 2AD0     		beq	.L610
 7076 0976 C6F10101 		rsb	r1, r6, #1
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7077              		.loc 1 2268 10 view .LVU2311
 7078 097a 0DF12600 		add	r0, sp, #38
 7079              	.LVL802:
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7080              		.loc 1 2268 10 view .LVU2312
 7081 097e 5944     		add	r1, r1, fp
 7082 0980 0246     		mov	r2, r0
 7083              	.LVL803:
2270:src/display.c **** 	      odig++;
 7084              		.loc 1 2270 15 view .LVU2313
 7085 0982 3025     		movs	r5, #48
 7086              	.LVL804:
 7087              	.L550:
2270:src/display.c **** 	      odig++;
 7088              		.loc 1 2270 8 is_stmt 1 discriminator 3 view .LVU2314
2270:src/display.c **** 	      odig++;
 7089              		.loc 1 2270 15 is_stmt 0 discriminator 3 view .LVU2315
 7090 0984 02F8015B 		strb	r5, [r2], #1
 7091              	.LVL805:
2271:src/display.c **** 	    }
 7092              		.loc 1 2271 8 is_stmt 1 discriminator 3 view .LVU2316
2269:src/display.c **** 	      *obp++ = '0';
 7093              		.loc 1 2269 25 discriminator 3 view .LVU2317
2269:src/display.c **** 	      *obp++ = '0';
 7094              		.loc 1 2269 20 discriminator 3 view .LVU2318
2269:src/display.c **** 	      *obp++ = '0';
 7095              		.loc 1 2269 6 is_stmt 0 discriminator 3 view .LVU2319
 7096 0988 8A42     		cmp	r2, r1
 7097 098a FBD1     		bne	.L550
 7098 098c 6FEA0608 		mvn	r8, r6
 7099 0990 8044     		add	r8, r8, r0
 7100 0992 7542     		rsbs	r5, r6, #0
 7101              	.LVL806:
 7102              	.L549:
2273:src/display.c **** 	      *obp++ = *p++;
 7103              		.loc 1 2273 16 is_stmt 1 view .LVU2320
2273:src/display.c **** 	      *obp++ = *p++;
 7104              		.loc 1 2273 6 is_stmt 0 view .LVU2321
 7105 0994 002B     		cmp	r3, #0
 7106 0996 7FF7ADAD 		ble	.L541
 7107 099a 581E     		subs	r0, r3, #1
 7108 099c 4044     		add	r0, r0, r8
 7109 099e 08F1FF32 		add	r2, r8, #-1
 7110              	.LVL807:
 7111              	.L551:
2274:src/display.c **** 	      odig++;
 7112              		.loc 1 2274 8 is_stmt 1 discriminator 3 view .LVU2322
2274:src/display.c **** 	      odig++;
 7113              		.loc 1 2274 15 is_stmt 0 discriminator 3 view .LVU2323
 7114 09a2 19F8011B 		ldrb	r1, [r9], #1	@ zero_extendqisi2
ARM GAS  /tmp/ccdg5rgB.s 			page 227


 7115              	.LVL808:
2274:src/display.c **** 	      odig++;
 7116              		.loc 1 2274 15 discriminator 3 view .LVU2324
 7117 09a6 02F8011F 		strb	r1, [r2, #1]!
2275:src/display.c **** 	    }
 7118              		.loc 1 2275 8 is_stmt 1 discriminator 3 view .LVU2325
2273:src/display.c **** 	      *obp++ = *p++;
 7119              		.loc 1 2273 25 discriminator 3 view .LVU2326
 7120              	.LVL809:
2273:src/display.c **** 	      *obp++ = *p++;
 7121              		.loc 1 2273 16 discriminator 3 view .LVU2327
2273:src/display.c **** 	      *obp++ = *p++;
 7122              		.loc 1 2273 6 is_stmt 0 discriminator 3 view .LVU2328
 7123 09aa 9042     		cmp	r0, r2
 7124 09ac F9D1     		bne	.L551
 7125              	.LVL810:
2273:src/display.c **** 	      *obp++ = *p++;
 7126              		.loc 1 2273 6 discriminator 3 view .LVU2329
 7127 09ae 9844     		add	r8, r8, r3
 7128              	.LVL811:
2273:src/display.c **** 	      *obp++ = *p++;
 7129              		.loc 1 2273 6 discriminator 3 view .LVU2330
 7130 09b0 1D44     		add	r5, r5, r3
 7131 09b2 9FE5     		b	.L541
 7132              	.LVL812:
 7133              	.L709:
2216:src/display.c **** 
 7134              		.loc 1 2216 2 is_stmt 1 view .LVU2331
 7135 09b4 19F80E10 		ldrb	r1, [r9, lr]	@ zero_extendqisi2
2216:src/display.c **** 
 7136              		.loc 1 2216 9 is_stmt 0 view .LVU2332
 7137 09b8 09EB0E03 		add	r3, r9, lr
 7138              	.LVL813:
2216:src/display.c **** 
 7139              		.loc 1 2216 45 is_stmt 1 view .LVU2333
2216:src/display.c **** 
 7140              		.loc 1 2216 2 is_stmt 0 view .LVU2334
 7141 09bc 51B1     		cbz	r1, .L713
2205:src/display.c **** 	      extra_digits = 0;
 7142              		.loc 1 2205 37 view .LVU2335
 7143 09be 0225     		movs	r5, #2
 7144 09c0 00E4     		b	.L591
 7145              	.LVL814:
 7146              	.L712:
2205:src/display.c **** 	      extra_digits = 0;
 7147              		.loc 1 2205 37 view .LVU2336
 7148 09c2 079B     		ldr	r3, [sp, #28]
 7149              	.LVL815:
2296:src/display.c **** 	    *obp++ = '.';
 7150              		.loc 1 2296 10 view .LVU2337
 7151 09c4 0125     		movs	r5, #1
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7152              		.loc 1 2297 10 view .LVU2338
 7153 09c6 0DF12608 		add	r8, sp, #38
 7154              	.LVL816:
2297:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7155              		.loc 1 2297 10 view .LVU2339
ARM GAS  /tmp/ccdg5rgB.s 			page 228


 7156 09ca 27E7     		b	.L559
 7157              	.LVL817:
 7158              	.L610:
2267:src/display.c **** 	    *obp++ = '.';
 7159              		.loc 1 2267 10 view .LVU2340
 7160 09cc 0125     		movs	r5, #1
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7161              		.loc 1 2268 10 view .LVU2341
 7162 09ce 0DF12608 		add	r8, sp, #38
 7163              	.LVL818:
2268:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 7164              		.loc 1 2268 10 view .LVU2342
 7165 09d2 DFE7     		b	.L549
 7166              	.LVL819:
 7167              	.L713:
2023:src/display.c **** 	int odig = 0;
 7168              		.loc 1 2023 15 view .LVU2343
 7169 09d4 5946     		mov	r1, fp
 7170 09d6 6EE5     		b	.L531
 7171              	.L719:
 7172              		.align	2
 7173              	.L718:
 7174 09d8 00000000 		.word	.LANCHOR1
 7175 09dc D34D6210 		.word	274877907
 7176 09e0 18FCFFFF 		.word	-1000
 7177 09e4 00000000 		.word	.LANCHOR14
 7178 09e8 00000000 		.word	.LANCHOR13
 7179              		.cfi_endproc
 7180              	.LFE27:
 7182              		.section	.text.set_x,"ax",%progbits
 7183              		.align	1
 7184              		.p2align 2,,3
 7185              		.syntax unified
 7186              		.thumb
 7187              		.thumb_func
 7188              		.fpu fpv4-sp-d16
 7190              	set_x:
 7191              	.LVL820:
 7192              	.LFB26:
2011:src/display.c **** 	decNumber z;
 7193              		.loc 1 2011 66 is_stmt 1 view -0
 7194              		.cfi_startproc
 7195              		@ args = 0, pretend = 0, frame = 40
 7196              		@ frame_needed = 0, uses_anonymous_args = 0
2012:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7197              		.loc 1 2012 2 view .LVU2345
2013:src/display.c **** 
 7198              		.loc 1 2013 2 view .LVU2346
2011:src/display.c **** 	decNumber z;
 7199              		.loc 1 2011 66 is_stmt 0 view .LVU2347
 7200 0000 30B5     		push	{r4, r5, lr}
 7201              		.cfi_def_cfa_offset 12
 7202              		.cfi_offset 4, -12
 7203              		.cfi_offset 5, -8
 7204              		.cfi_offset 14, -4
 7205 0002 8BB0     		sub	sp, sp, #44
 7206              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccdg5rgB.s 			page 229


2013:src/display.c **** 
 7207              		.loc 1 2013 6 view .LVU2348
 7208 0004 0C23     		movs	r3, #12
2016:src/display.c **** 	else
 7209              		.loc 1 2016 4 view .LVU2349
 7210 0006 01AD     		add	r5, sp, #4
2011:src/display.c **** 	decNumber z;
 7211              		.loc 1 2011 66 view .LVU2350
 7212 0008 0C46     		mov	r4, r1
2013:src/display.c **** 
 7213              		.loc 1 2013 6 view .LVU2351
 7214 000a 0093     		str	r3, [sp]
2015:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7215              		.loc 1 2015 2 is_stmt 1 view .LVU2352
2016:src/display.c **** 	else
 7216              		.loc 1 2016 4 is_stmt 0 view .LVU2353
 7217 000c 2946     		mov	r1, r5
 7218              	.LVL821:
2015:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7219              		.loc 1 2015 5 view .LVU2354
 7220 000e 42B1     		cbz	r2, .L721
2016:src/display.c **** 	else
 7221              		.loc 1 2016 4 is_stmt 1 view .LVU2355
 7222 0010 FFF7FEFF 		bl	decimal128ToNumber
 7223              	.LVL822:
2019:src/display.c ****       }
 7224              		.loc 1 2019 2 view .LVU2356
 7225 0014 2146     		mov	r1, r4
 7226 0016 2846     		mov	r0, r5
 7227 0018 6A46     		mov	r2, sp
 7228 001a FFF7FEFF 		bl	set_x_dn
 7229              	.LVL823:
2020:src/display.c **** 
 7230              		.loc 1 2020 7 is_stmt 0 view .LVU2357
 7231 001e 0BB0     		add	sp, sp, #44
 7232              		.cfi_remember_state
 7233              		.cfi_def_cfa_offset 12
 7234              		@ sp needed
 7235 0020 30BD     		pop	{r4, r5, pc}
 7236              	.LVL824:
 7237              	.L721:
 7238              		.cfi_restore_state
2018:src/display.c **** 	set_x_dn(&z, res, &digits);
 7239              		.loc 1 2018 4 is_stmt 1 view .LVU2358
 7240 0022 FFF7FEFF 		bl	decimal64ToNumber
 7241              	.LVL825:
2019:src/display.c ****       }
 7242              		.loc 1 2019 2 view .LVU2359
 7243 0026 2146     		mov	r1, r4
 7244 0028 2846     		mov	r0, r5
 7245 002a 6A46     		mov	r2, sp
 7246 002c FFF7FEFF 		bl	set_x_dn
 7247              	.LVL826:
2020:src/display.c **** 
 7248              		.loc 1 2020 7 is_stmt 0 view .LVU2360
 7249 0030 0BB0     		add	sp, sp, #44
 7250              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccdg5rgB.s 			page 230


 7251              		@ sp needed
 7252 0032 30BD     		pop	{r4, r5, pc}
2020:src/display.c **** 
 7253              		.loc 1 2020 7 view .LVU2361
 7254              		.cfi_endproc
 7255              	.LFE26:
 7257              		.section	.text.format_reg,"ax",%progbits
 7258              		.align	1
 7259              		.p2align 2,,3
 7260              		.global	format_reg
 7261              		.syntax unified
 7262              		.thumb
 7263              		.thumb_func
 7264              		.fpu fpv4-sp-d16
 7266              	format_reg:
 7267              	.LVL827:
 7268              	.LFB28:
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7269              		.loc 1 2427 45 is_stmt 1 view -0
 7270              		.cfi_startproc
 7271              		@ args = 0, pretend = 0, frame = 40
 7272              		@ frame_needed = 0, uses_anonymous_args = 0
2428:src/display.c **** 
 7273              		.loc 1 2428 2 view .LVU2363
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7274              		.loc 1 2427 45 is_stmt 0 view .LVU2364
 7275 0000 30B5     		push	{r4, r5, lr}
 7276              		.cfi_def_cfa_offset 12
 7277              		.cfi_offset 4, -12
 7278              		.cfi_offset 5, -8
 7279              		.cfi_offset 14, -4
 7280 0002 8BB0     		sub	sp, sp, #44
 7281              		.cfi_def_cfa_offset 56
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7282              		.loc 1 2427 45 view .LVU2365
 7283 0004 0C46     		mov	r4, r1
 7284 0006 0546     		mov	r5, r0
2428:src/display.c **** 
 7285              		.loc 1 2428 28 view .LVU2366
 7286 0008 FFF7FEFF 		bl	get_reg_n
 7287              	.LVL828:
2430:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7288              		.loc 1 2430 6 view .LVU2367
 7289 000c 154B     		ldr	r3, .L731
 7290 000e 1B68     		ldr	r3, [r3]
 7291 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7292              	.LVL829:
2430:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7293              		.loc 1 2430 2 is_stmt 1 view .LVU2368
2430:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7294              		.loc 1 2430 5 is_stmt 0 view .LVU2369
 7295 0014 D207     		lsls	r2, r2, #31
 7296 0016 1DD4     		bmi	.L729
2433:src/display.c **** 	  decNumber x;
 7297              		.loc 1 2433 7 is_stmt 1 view .LVU2370
2433:src/display.c **** 	  decNumber x;
 7298              		.loc 1 2433 10 is_stmt 0 view .LVU2371
ARM GAS  /tmp/ccdg5rgB.s 			page 231


 7299 0018 44B1     		cbz	r4, .L730
 7300              	.L727:
2444:src/display.c ****       }
 7301              		.loc 1 2444 4 is_stmt 1 view .LVU2372
2444:src/display.c ****       }
 7302              		.loc 1 2444 24 is_stmt 0 view .LVU2373
 7303 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2444:src/display.c ****       }
 7304              		.loc 1 2444 4 view .LVU2374
 7305 001e 2146     		mov	r1, r4
 7306 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7307 0024 FFF7FEFF 		bl	set_x
 7308              	.LVL830:
2445:src/display.c **** 
 7309              		.loc 1 2445 7 view .LVU2375
 7310 0028 0BB0     		add	sp, sp, #44
 7311              		.cfi_remember_state
 7312              		.cfi_def_cfa_offset 12
 7313              		@ sp needed
 7314 002a 30BD     		pop	{r4, r5, pc}
 7315              	.LVL831:
 7316              	.L730:
 7317              		.cfi_restore_state
2433:src/display.c **** 	  decNumber x;
 7318              		.loc 1 2433 32 discriminator 1 view .LVU2376
 7319 002c 0E4A     		ldr	r2, .L731+4
2433:src/display.c **** 	  decNumber x;
 7320              		.loc 1 2433 23 discriminator 1 view .LVU2377
 7321 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7322 0030 012A     		cmp	r2, #1
 7323 0032 F2D9     		bls	.L727
 7324              	.LVL832:
 7325              	.LBB435:
 7326              	.LBI435:
2427:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7327              		.loc 1 2427 12 is_stmt 1 view .LVU2378
 7328              	.LBB436:
 7329              	.LBB437:
2434:src/display.c **** 	  int s;
 7330              		.loc 1 2434 4 view .LVU2379
2435:src/display.c **** 	  unsigned long long int v;
 7331              		.loc 1 2435 4 view .LVU2380
2436:src/display.c **** 
 7332              		.loc 1 2436 4 view .LVU2381
2438:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7333              		.loc 1 2438 4 view .LVU2382
 7334 0034 2946     		mov	r1, r5
 7335 0036 01A8     		add	r0, sp, #4
 7336              	.LVL833:
2438:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7337              		.loc 1 2438 4 is_stmt 0 view .LVU2383
 7338 0038 FFF7FEFF 		bl	getRegister
 7339              	.LVL834:
2439:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7340              		.loc 1 2439 4 is_stmt 1 view .LVU2384
2439:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7341              		.loc 1 2439 8 is_stmt 0 view .LVU2385
ARM GAS  /tmp/ccdg5rgB.s 			page 232


 7342 003c 01A8     		add	r0, sp, #4
 7343 003e 6946     		mov	r1, sp
 7344 0040 FFF7FEFF 		bl	dn_to_ull
 7345              	.LVL835:
2440:src/display.c **** 	}
 7346              		.loc 1 2440 4 is_stmt 1 view .LVU2386
 7347 0044 009A     		ldr	r2, [sp]
 7348 0046 FFF7FEFF 		bl	build_value
 7349              	.LVL836:
2440:src/display.c **** 	}
 7350              		.loc 1 2440 4 is_stmt 0 view .LVU2387
 7351 004a 2246     		mov	r2, r4
 7352 004c FFF7FEFF 		bl	set_int_x
 7353              	.LVL837:
 7354              	.LBE437:
 7355              	.LBE436:
 7356              	.LBE435:
2445:src/display.c **** 
 7357              		.loc 1 2445 7 view .LVU2388
 7358 0050 0BB0     		add	sp, sp, #44
 7359              		.cfi_remember_state
 7360              		.cfi_def_cfa_offset 12
 7361              		@ sp needed
 7362 0052 30BD     		pop	{r4, r5, pc}
 7363              	.LVL838:
 7364              	.L729:
 7365              		.cfi_restore_state
2431:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7366              		.loc 1 2431 4 is_stmt 1 view .LVU2389
 7367 0054 2846     		mov	r0, r5
 7368              	.LVL839:
2431:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7369              		.loc 1 2431 4 is_stmt 0 view .LVU2390
 7370 0056 FFF7FEFF 		bl	get_reg_n_int
 7371              	.LVL840:
 7372 005a 2246     		mov	r2, r4
 7373 005c FFF7FEFF 		bl	set_int_x
 7374              	.LVL841:
2445:src/display.c **** 
 7375              		.loc 1 2445 7 view .LVU2391
 7376 0060 0BB0     		add	sp, sp, #44
 7377              		.cfi_def_cfa_offset 12
 7378              		@ sp needed
 7379 0062 30BD     		pop	{r4, r5, pc}
 7380              	.LVL842:
 7381              	.L732:
2445:src/display.c **** 
 7382              		.loc 1 2445 7 view .LVU2392
 7383              		.align	2
 7384              	.L731:
 7385 0064 00000000 		.word	main_ram
 7386 0068 00000000 		.word	StateWhileOn
 7387              		.cfi_endproc
 7388              	.LFE28:
 7390              		.section	.text.set_status_right,"ax",%progbits
 7391              		.align	1
 7392              		.p2align 2,,3
ARM GAS  /tmp/ccdg5rgB.s 			page 233


 7393              		.syntax unified
 7394              		.thumb
 7395              		.thumb_func
 7396              		.fpu fpv4-sp-d16
 7398              	set_status_right:
 7399              	.LVL843:
 7400              	.LFB49:
3639:src/display.c ****       static void set_status_top(const char *str) {
3640:src/display.c **** 	if (no_status_top) return;
3641:src/display.c **** 	if (State2.runmode) {
3642:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3643:src/display.c **** 	}
3644:src/display.c **** 	else {
3645:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3646:src/display.c **** 	}
3647:src/display.c ****       }
3648:src/display.c **** #ifdef TOP_ROW
3649:src/display.c ****       static void set_status_top_always(const char *str) {
3650:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3651:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3652:src/display.c ****       }
3653:src/display.c **** #endif
3654:src/display.c **** 
3655:src/display.c ****       /*
3656:src/display.c ****        *  Display messages (global function)
3657:src/display.c ****        */
3658:src/display.c ****       extern void message(const char *str1, const char *str2)
3659:src/display.c ****       {
3660:src/display.c **** 	State2.disp_freeze = 0;
3661:src/display.c **** 	State2.disp_small = 0;
3662:src/display.c **** 	WasDataEntry = 0;
3663:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3664:src/display.c **** 	  // Complete redraw necessary
3665:src/display.c **** 	  DispMsg = str1;
3666:src/display.c **** 	  display();
3667:src/display.c **** 	}
3668:src/display.c **** 	else {
3669:src/display.c **** 	  if ( str2 != NULL ) {
3670:src/display.c **** 	    reset_disp();
3671:src/display.c **** 	    ShowRPN = 0;
3672:src/display.c **** 	    set_annunciators();
3673:src/display.c **** 	    set_digits_string( str2, 0 );
3674:src/display.c **** 	  }
3675:src/display.c **** 	  set_status( str1 );
3676:src/display.c **** 	  finish_display();// message
3677:src/display.c **** 	}
3678:src/display.c ****       }
3679:src/display.c **** 
3680:src/display.c **** #ifdef INCLUDE_STOPWATCH
3681:src/display.c **** 
3682:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3683:src/display.c **** 	int j = SEGS_EXP_BASE;
3684:src/display.c **** 	for (; *exponent!=0; exponent++) {
3685:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3686:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3687:src/display.c **** 	}
3688:src/display.c ****       }
ARM GAS  /tmp/ccdg5rgB.s 			page 234


3689:src/display.c **** 
3690:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3691:src/display.c ****       {
3692:src/display.c **** #ifndef REALBUILD
3693:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3694:src/display.c **** #endif
3695:src/display.c **** 	reset_disp();
3696:src/display.c **** 	set_dot(DEG);
3697:src/display.c **** 	set_digits_string( str2, 0 );
3698:src/display.c **** 	State2.disp_small = force_small;
3699:src/display.c **** 	if( exponent!=NULL ) {
3700:src/display.c **** 	  stopwatch_exponent(exponent);
3701:src/display.c **** 	}
3702:src/display.c **** 	set_status( str1 );
3703:src/display.c **** 	finish_display();
3704:src/display.c ****       }
3705:src/display.c **** 
3706:src/display.c **** 
3707:src/display.c **** #endif // INCLUDE_STOPWATCH
3708:src/display.c **** 
3709:src/display.c ****       /* Display the right hand characters from the given string.
3710:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3711:src/display.c ****        * and reduce font size if required.
3712:src/display.c ****        */
3713:src/display.c ****       static void set_status_right(const char *str) {
 7401              		.loc 1 3713 53 is_stmt 1 view -0
 7402              		.cfi_startproc
 7403              		@ args = 0, pretend = 0, frame = 0
 7404              		@ frame_needed = 0, uses_anonymous_args = 0
3714:src/display.c **** 	unsigned int x = 0;
 7405              		.loc 1 3714 2 view .LVU2394
3715:src/display.c **** 	const char *p;
 7406              		.loc 1 3715 2 view .LVU2395
3716:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7407              		.loc 1 3716 2 view .LVU2396
3713:src/display.c **** 	unsigned int x = 0;
 7408              		.loc 1 3713 53 is_stmt 0 view .LVU2397
 7409 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7410              		.cfi_def_cfa_offset 28
 7411              		.cfi_offset 4, -28
 7412              		.cfi_offset 5, -24
 7413              		.cfi_offset 6, -20
 7414              		.cfi_offset 7, -16
 7415              		.cfi_offset 8, -12
 7416              		.cfi_offset 9, -8
 7417              		.cfi_offset 14, -4
 7418              		.loc 1 3716 23 view .LVU2398
 7419 0004 194B     		ldr	r3, .L748
 7420              		.loc 1 3716 41 view .LVU2399
 7421 0006 93F91630 		ldrsb	r3, [r3, #22]
 7422 000a 002B     		cmp	r3, #0
3713:src/display.c **** 	unsigned int x = 0;
 7423              		.loc 1 3713 53 view .LVU2400
 7424 000c 83B0     		sub	sp, sp, #12
 7425              		.cfi_def_cfa_offset 40
3713:src/display.c **** 	unsigned int x = 0;
 7426              		.loc 1 3713 53 view .LVU2401
ARM GAS  /tmp/ccdg5rgB.s 			page 235


 7427 000e 0646     		mov	r6, r0
 7428              		.loc 1 3716 41 view .LVU2402
 7429 0010 23DA     		bge	.L747
 7430              	.LVL844:
 7431              	.L734:
 7432              		.loc 1 3716 12 view .LVU2403
 7433 0012 4FF00108 		mov	r8, #1
3717:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7434              		.loc 1 3717 36 view .LVU2404
 7435 0016 4FF48077 		mov	r7, #256
 7436              	.L735:
 7437              	.LVL845:
3718:src/display.c **** 
3719:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7438              		.loc 1 3719 2 is_stmt 1 discriminator 4 view .LVU2405
 7439              		.loc 1 3719 14 discriminator 4 view .LVU2406
 7440              		.loc 1 3719 2 is_stmt 0 discriminator 4 view .LVU2407
 7441 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7442 001c 3446     		mov	r4, r6
 7443 001e 1BB1     		cbz	r3, .L736
 7444              	.LVL846:
 7445              	.L737:
 7446              		.loc 1 3719 30 is_stmt 1 discriminator 3 view .LVU2408
 7447              		.loc 1 3719 26 discriminator 3 view .LVU2409
 7448              		.loc 1 3719 14 discriminator 3 view .LVU2410
 7449              		.loc 1 3719 2 is_stmt 0 discriminator 3 view .LVU2411
 7450 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7451              	.LVL847:
 7452              		.loc 1 3719 2 discriminator 3 view .LVU2412
 7453 0024 002B     		cmp	r3, #0
 7454 0026 FBD1     		bne	.L737
 7455              	.L736:
3714:src/display.c **** 	const char *p;
 7456              		.loc 1 3714 15 view .LVU2413
 7457 0028 0025     		movs	r5, #0
 7458 002a 06E0     		b	.L738
 7459              	.LVL848:
 7460              	.L739:
 7461              	.LBB438:
3720:src/display.c **** 	while (--p >= str) {
3721:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7462              		.loc 1 3721 27 view .LVU2414
 7463 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3722:src/display.c **** 
3723:src/display.c **** 	  x += charlengths(c);
 7464              		.loc 1 3723 9 view .LVU2415
 7465 002e 3844     		add	r0, r0, r7
 7466 0030 FFF7FEFF 		bl	charlengths
 7467              	.LVL849:
 7468              		.loc 1 3723 6 view .LVU2416
 7469 0034 0544     		add	r5, r5, r0
 7470              	.LVL850:
3724:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7471              		.loc 1 3724 4 is_stmt 1 view .LVU2417
 7472              		.loc 1 3724 7 is_stmt 0 view .LVU2418
 7473 0036 4B2D     		cmp	r5, #75
 7474 0038 03D8     		bhi	.L740
ARM GAS  /tmp/ccdg5rgB.s 			page 236


 7475              	.LVL851:
 7476              	.L738:
3721:src/display.c **** 
 7477              		.loc 1 3721 4 is_stmt 1 view .LVU2419
3721:src/display.c **** 
 7478              		.loc 1 3721 4 is_stmt 0 view .LVU2420
 7479              	.LBE438:
3720:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7480              		.loc 1 3720 8 is_stmt 1 view .LVU2421
 7481 003a A146     		mov	r9, r4
 7482 003c 013C     		subs	r4, r4, #1
 7483              	.LVL852:
 7484              	.LBB439:
3723:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7485              		.loc 1 3723 4 view .LVU2422
3723:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7486              		.loc 1 3723 4 is_stmt 0 view .LVU2423
 7487              	.LBE439:
3720:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7488              		.loc 1 3720 8 view .LVU2424
 7489 003e A642     		cmp	r6, r4
 7490 0040 F4D9     		bls	.L739
 7491              	.LVL853:
 7492              	.L740:
3725:src/display.c **** 	    break;
3726:src/display.c **** 	}
3727:src/display.c **** 	set_status_sized(p+1, toolarge);
 7493              		.loc 1 3727 2 is_stmt 1 view .LVU2425
 7494              	.LBB440:
 7495              	.LBI440:
3478:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7496              		.loc 1 3478 19 view .LVU2426
 7497              	.LBB441:
3479:src/display.c ****       }
 7498              		.loc 1 3479 2 view .LVU2427
 7499 0042 40F24A23 		movw	r3, #586
 7500 0046 0093     		str	r3, [sp]
 7501 0048 4146     		mov	r1, r8
 7502 004a 4846     		mov	r0, r9
 7503 004c 8E23     		movs	r3, #142
 7504 004e 4A22     		movs	r2, #74
 7505 0050 FFF7FEFF 		bl	s_s_sized
 7506              	.LVL854:
3479:src/display.c ****       }
 7507              		.loc 1 3479 2 is_stmt 0 view .LVU2428
 7508              	.LBE441:
 7509              	.LBE440:
3728:src/display.c ****       }
 7510              		.loc 1 3728 7 view .LVU2429
 7511 0054 03B0     		add	sp, sp, #12
 7512              		.cfi_remember_state
 7513              		.cfi_def_cfa_offset 28
 7514              		@ sp needed
 7515 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7516              	.LVL855:
 7517              	.L747:
 7518              		.cfi_restore_state
ARM GAS  /tmp/ccdg5rgB.s 			page 237


 7519              	.LBB442:
 7520              	.LBI442:
3626:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7521              		.loc 1 3626 18 is_stmt 1 view .LVU2430
 7522              	.LBB443:
3627:src/display.c ****       }
 7523              		.loc 1 3627 2 view .LVU2431
3627:src/display.c ****       }
 7524              		.loc 1 3627 9 is_stmt 0 view .LVU2432
 7525 005a 0021     		movs	r1, #0
 7526 005c FFF7FEFF 		bl	pixel_length
 7527              	.LVL856:
3627:src/display.c ****       }
 7528              		.loc 1 3627 9 view .LVU2433
 7529              	.LBE443:
 7530              	.LBE442:
3716:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7531              		.loc 1 3716 41 view .LVU2434
 7532 0060 4B28     		cmp	r0, #75
 7533 0062 D6DC     		bgt	.L734
3716:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7534              		.loc 1 3716 12 view .LVU2435
 7535 0064 4FF00008 		mov	r8, #0
3717:src/display.c **** 
 7536              		.loc 1 3717 36 view .LVU2436
 7537 0068 4746     		mov	r7, r8
 7538 006a D6E7     		b	.L735
 7539              	.L749:
 7540              		.align	2
 7541              	.L748:
 7542 006c 00000000 		.word	StateWhileOn
 7543              		.cfi_endproc
 7544              	.LFE49:
 7546              		.section	.text.set_status_top.part.0,"ax",%progbits
 7547              		.align	1
 7548              		.p2align 2,,3
 7549              		.syntax unified
 7550              		.thumb
 7551              		.thumb_func
 7552              		.fpu fpv4-sp-d16
 7554              	set_status_top.part.0:
 7555              	.LVL857:
 7556              	.LFB58:
3639:src/display.c **** 	if (no_status_top) return;
 7557              		.loc 1 3639 19 is_stmt 1 view -0
 7558              		.cfi_startproc
 7559              		@ args = 0, pretend = 0, frame = 0
 7560              		@ frame_needed = 0, uses_anonymous_args = 0
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7561              		.loc 1 3641 2 view .LVU2438
3639:src/display.c **** 	if (no_status_top) return;
 7562              		.loc 1 3639 19 is_stmt 0 view .LVU2439
 7563 0000 10B5     		push	{r4, lr}
 7564              		.cfi_def_cfa_offset 8
 7565              		.cfi_offset 4, -8
 7566              		.cfi_offset 14, -4
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
ARM GAS  /tmp/ccdg5rgB.s 			page 238


 7567              		.loc 1 3641 6 view .LVU2440
 7568 0002 184B     		ldr	r3, .L760
 7569 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7570              		.loc 1 3641 5 view .LVU2441
 7571 0006 13F04001 		ands	r1, r3, #64
3639:src/display.c **** 	if (no_status_top) return;
 7572              		.loc 1 3639 19 view .LVU2442
 7573 000a 82B0     		sub	sp, sp, #8
 7574              		.cfi_def_cfa_offset 16
3639:src/display.c **** 	if (no_status_top) return;
 7575              		.loc 1 3639 19 view .LVU2443
 7576 000c 0446     		mov	r4, r0
3641:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7577              		.loc 1 3641 5 view .LVU2444
 7578 000e 0DD0     		beq	.L751
3642:src/display.c **** 	}
 7579              		.loc 1 3642 4 is_stmt 1 view .LVU2445
 7580 0010 1A06     		lsls	r2, r3, #24
 7581 0012 18D5     		bpl	.L758
 7582 0014 0121     		movs	r1, #1
 7583              	.LVL858:
 7584              	.L752:
 7585              	.LBB444:
 7586              	.LBI444:
3481:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7587              		.loc 1 3481 19 view .LVU2446
 7588              	.LBB445:
3482:src/display.c ****       }
 7589              		.loc 1 3482 2 view .LVU2447
 7590 0016 4FF45373 		mov	r3, #844
 7591 001a 0093     		str	r3, [sp]
 7592 001c 2046     		mov	r0, r4
 7593 001e 40F24A23 		movw	r3, #586
 7594 0022 2B22     		movs	r2, #43
 7595 0024 FFF7FEFF 		bl	s_s_sized
 7596              	.LVL859:
3482:src/display.c ****       }
 7597              		.loc 1 3482 2 is_stmt 0 view .LVU2448
 7598              	.LBE445:
 7599              	.LBE444:
3647:src/display.c **** #ifdef TOP_ROW
 7600              		.loc 1 3647 7 view .LVU2449
 7601 0028 02B0     		add	sp, sp, #8
 7602              		.cfi_remember_state
 7603              		.cfi_def_cfa_offset 8
 7604              		@ sp needed
 7605 002a 10BD     		pop	{r4, pc}
 7606              	.LVL860:
 7607              	.L751:
 7608              		.cfi_restore_state
3645:src/display.c **** 	}
 7609              		.loc 1 3645 4 is_stmt 1 view .LVU2450
 7610 002c 1B06     		lsls	r3, r3, #24
 7611 002e 12D5     		bpl	.L759
 7612 0030 0121     		movs	r1, #1
 7613              	.LVL861:
ARM GAS  /tmp/ccdg5rgB.s 			page 239


 7614              	.L754:
 7615              	.LBB446:
 7616              	.LBI446:
3478:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7617              		.loc 1 3478 19 view .LVU2451
 7618              	.LBB447:
3479:src/display.c ****       }
 7619              		.loc 1 3479 2 view .LVU2452
 7620 0032 40F24A23 		movw	r3, #586
 7621 0036 0093     		str	r3, [sp]
 7622 0038 2046     		mov	r0, r4
 7623 003a 8E23     		movs	r3, #142
 7624 003c 4A22     		movs	r2, #74
 7625 003e FFF7FEFF 		bl	s_s_sized
 7626              	.LVL862:
3479:src/display.c ****       }
 7627              		.loc 1 3479 2 is_stmt 0 view .LVU2453
 7628              	.LBE447:
 7629              	.LBE446:
3647:src/display.c **** #ifdef TOP_ROW
 7630              		.loc 1 3647 7 view .LVU2454
 7631 0042 02B0     		add	sp, sp, #8
 7632              		.cfi_remember_state
 7633              		.cfi_def_cfa_offset 8
 7634              		@ sp needed
 7635 0044 10BD     		pop	{r4, pc}
 7636              	.LVL863:
 7637              	.L758:
 7638              		.cfi_restore_state
 7639              	.LBB448:
 7640              	.LBI448:
3629:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7641              		.loc 1 3629 18 is_stmt 1 view .LVU2455
 7642              	.LBB449:
3630:src/display.c ****       }
 7643              		.loc 1 3630 2 view .LVU2456
3630:src/display.c ****       }
 7644              		.loc 1 3630 9 is_stmt 0 view .LVU2457
 7645 0046 0021     		movs	r1, #0
 7646 0048 FFF7FEFF 		bl	pixel_length
 7647              	.LVL864:
3630:src/display.c ****       }
 7648              		.loc 1 3630 9 view .LVU2458
 7649              	.LBE449:
 7650              	.LBE448:
3642:src/display.c **** 	}
 7651              		.loc 1 3642 4 view .LVU2459
 7652 004c 2C28     		cmp	r0, #44
 7653 004e D4BF     		ite	le
 7654 0050 0021     		movle	r1, #0
 7655 0052 0121     		movgt	r1, #1
 7656 0054 DFE7     		b	.L752
 7657              	.LVL865:
 7658              	.L759:
 7659              	.LBB450:
 7660              	.LBI450:
3626:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
ARM GAS  /tmp/ccdg5rgB.s 			page 240


 7661              		.loc 1 3626 18 is_stmt 1 view .LVU2460
 7662              	.LBB451:
3627:src/display.c ****       }
 7663              		.loc 1 3627 2 view .LVU2461
3627:src/display.c ****       }
 7664              		.loc 1 3627 9 is_stmt 0 view .LVU2462
 7665 0056 FFF7FEFF 		bl	pixel_length
 7666              	.LVL866:
3627:src/display.c ****       }
 7667              		.loc 1 3627 9 view .LVU2463
 7668              	.LBE451:
 7669              	.LBE450:
3645:src/display.c **** 	}
 7670              		.loc 1 3645 4 view .LVU2464
 7671 005a 4B28     		cmp	r0, #75
 7672 005c D4BF     		ite	le
 7673 005e 0021     		movle	r1, #0
 7674 0060 0121     		movgt	r1, #1
 7675 0062 E6E7     		b	.L754
 7676              	.L761:
 7677              		.align	2
 7678              	.L760:
 7679 0064 00000000 		.word	StateWhileOn
 7680              		.cfi_endproc
 7681              	.LFE58:
 7683              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7684              		.align	2
 7685              	.LC2:
 7686 0000 32630600 		.ascii	"2c\006\000"
 7687              		.align	2
 7688              	.LC3:
 7689 0004 07C63C00 		.ascii	"\007\306<\000"
 7690              		.align	2
 7691              	.LC4:
 7692 0008 07876900 		.ascii	"\007\207i\000"
 7693              		.align	2
 7694              	.LC5:
 7695 000c 07C67900 		.ascii	"\007\306y\000"
 7696              		.align	2
 7697              	.LC6:
 7698 0010 07950600 		.ascii	"\007\225\006\000"
 7699              		.align	2
 7700              	.LC7:
 7701 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7701      060600
 7702 001b 00       		.align	2
 7703              	.LC8:
 7704 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7704      060600
 7705 0023 00       		.align	2
 7706              	.LC9:
 7707 0024 07C74400 		.ascii	"\007\307D\000"
 7708              		.align	2
 7709              	.LC10:
 7710 0028 07872000 		.ascii	"\007\207 \000"
 7711              		.align	2
 7712              	.LC11:
ARM GAS  /tmp/ccdg5rgB.s 			page 241


 7713 002c 4C656E67 		.ascii	"Length:\000"
 7713      74683A00 
 7714              		.align	2
 7715              	.LC12:
 7716 0034 5265616C 		.ascii	"Real:\000"
 7716      3A00
 7717 003a 0000     		.align	2
 7718              	.LC13:
 7719 003c 416E676C 		.ascii	"Angle:\000"
 7719      653A00
 7720 0043 00       		.align	2
 7721              	.LC14:
 7722 0044 496D6167 		.ascii	"Imag:\000"
 7722      3A00
 7723 004a 0000     		.align	2
 7724              	.LC15:
 7725 004c 07876A00 		.ascii	"\007\207j\000"
 7726              		.align	2
 7727              	.LC16:
 7728 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7728      0700
 7729 0056 0000     		.align	2
 7730              	.LC17:
 7731 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7731      00
 7732 005d 000000   		.align	2
 7733              	.LC18:
 7734 0060 07C73C00 		.ascii	"\007\307<\000"
 7735              		.align	2
 7736              	.LC19:
 7737 0064 07C77900 		.ascii	"\007\307y\000"
 7738              		.align	2
 7739              	.LC21:
 7740 0068 07E43F00 		.ascii	"\007\344?\000"
 7741              		.section	.text.annunciators,"ax",%progbits
 7742              		.align	1
 7743              		.p2align 2,,3
 7744              		.syntax unified
 7745              		.thumb
 7746              		.thumb_func
 7747              		.fpu fpv4-sp-d16
 7749              	annunciators:
 7750              	.LFB16:
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7751              		.loc 1 609 36 is_stmt 1 view -0
 7752              		.cfi_startproc
 7753              		@ args = 0, pretend = 0, frame = 128
 7754              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 7755              		.loc 1 611 7 view .LVU2466
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7756              		.loc 1 609 36 is_stmt 0 view .LVU2467
 7757 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7758              		.cfi_def_cfa_offset 28
 7759              		.cfi_offset 4, -28
 7760              		.cfi_offset 5, -24
 7761              		.cfi_offset 6, -20
ARM GAS  /tmp/ccdg5rgB.s 			page 242


 7762              		.cfi_offset 7, -16
 7763              		.cfi_offset 8, -12
 7764              		.cfi_offset 9, -8
 7765              		.cfi_offset 14, -4
 623:src/display.c **** #  endif
 7766              		.loc 1 623 38 view .LVU2468
 7767 0004 9D4C     		ldr	r4, .L949
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7768              		.loc 1 609 36 view .LVU2469
 7769 0006 A3B0     		sub	sp, sp, #140
 7770              		.cfi_def_cfa_offset 168
 7771              	.LVL867:
 612:src/display.c ****       int n;
 7772              		.loc 1 612 7 is_stmt 1 view .LVU2470
 613:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7773              		.loc 1 613 7 view .LVU2471
 614:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7774              		.loc 1 614 7 view .LVU2472
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7775              		.loc 1 615 7 view .LVU2473
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7776              		.loc 1 615 43 is_stmt 0 view .LVU2474
 7777 0008 FFF7FEFF 		bl	cur_shift
 7778              	.LVL868:
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7779              		.loc 1 615 18 view .LVU2475
 7780 000c 9C4B     		ldr	r3, .L949+4
 623:src/display.c **** #  endif
 7781              		.loc 1 623 38 view .LVU2476
 7782 000e 2268     		ldr	r2, [r4]
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7783              		.loc 1 615 18 view .LVU2477
 7784 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7785              	.LVL869:
 623:src/display.c **** #  endif
 7786              		.loc 1 623 7 is_stmt 1 view .LVU2478
 623:src/display.c **** #  endif
 7787              		.loc 1 623 38 is_stmt 0 view .LVU2479
 7788 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7789              		.loc 1 654 7 view .LVU2480
 7790 0018 0CAE     		add	r6, sp, #48
 7791              	.LVL870:
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7792              		.loc 1 654 7 view .LVU2481
 7793 001a 2A22     		movs	r2, #42
 7794 001c 0021     		movs	r1, #0
 7795 001e 3046     		mov	r0, r6
 7796 0020 FFF7FEFF 		bl	xset
 7797              	.LVL871:
 655:src/display.c ****       
 7798              		.loc 1 655 7 view .LVU2482
 7799 0024 2A22     		movs	r2, #42
 7800 0026 17A8     		add	r0, sp, #92
 7801              	.LVL872:
 655:src/display.c ****       
 7802              		.loc 1 655 7 view .LVU2483
ARM GAS  /tmp/ccdg5rgB.s 			page 243


 7803 0028 0021     		movs	r1, #0
 7804 002a FFF7FEFF 		bl	xset
 7805              	.LVL873:
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7806              		.loc 1 657 11 view .LVU2484
 7807 002e 2368     		ldr	r3, [r4]
 7808 0030 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7809              		.loc 1 657 10 view .LVU2485
 7810 0034 D507     		lsls	r5, r2, #31
 623:src/display.c **** #  endif
 7811              		.loc 1 623 17 view .LVU2486
 7812 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7813              	.LVL874:
 626:src/display.c **** #  else
 7814              		.loc 1 626 7 is_stmt 1 view .LVU2487
 631:src/display.c **** #  else
 7815              		.loc 1 631 7 view .LVU2488
 641:src/display.c **** #else
 7816              		.loc 1 641 7 view .LVU2489
 649:src/display.c **** #else
 7817              		.loc 1 649 7 view .LVU2490
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7818              		.loc 1 654 7 view .LVU2491
 655:src/display.c ****       
 7819              		.loc 1 655 7 view .LVU2492
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7820              		.loc 1 657 7 view .LVU2493
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7821              		.loc 1 657 10 is_stmt 0 view .LVU2494
 7822 003a 00F13B81 		bmi	.L930
 697:src/display.c **** #else
 7823              		.loc 1 697 12 is_stmt 1 view .LVU2495
 697:src/display.c **** #else
 7824              		.loc 1 697 15 is_stmt 0 view .LVU2496
 7825 003e 002F     		cmp	r7, #0
 7826 0040 56D0     		beq	.L931
 7827              	.L777:
 783:src/display.c **** 	  *p2++ = '\007';
 7828              		.loc 1 783 2 is_stmt 1 view .LVU2497
 783:src/display.c **** 	  *p2++ = '\007';
 7829              		.loc 1 783 6 is_stmt 0 view .LVU2498
 7830 0042 904D     		ldr	r5, .L949+8
 7831 0044 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 783:src/display.c **** 	  *p2++ = '\007';
 7832              		.loc 1 783 5 view .LVU2499
 7833 0046 9A07     		lsls	r2, r3, #30
 7834 0048 40F19B81 		bpl	.L787
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7835              		.loc 1 784 4 is_stmt 1 view .LVU2500
 7836              	.LVL875:
 785:src/display.c **** 	  *p2++ = shift_char;
 7837              		.loc 1 785 4 view .LVU2501
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7838              		.loc 1 784 10 is_stmt 0 view .LVU2502
 7839 004c 4EF20742 		movw	r2, #58375
 787:src/display.c **** 	}
ARM GAS  /tmp/ccdg5rgB.s 			page 244


 7840              		.loc 1 787 10 view .LVU2503
 7841 0050 1423     		movs	r3, #20
 786:src/display.c **** 	  *p2++ = '\024';
 7842              		.loc 1 786 10 view .LVU2504
 7843 0052 8DF85E80 		strb	r8, [sp, #94]
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7844              		.loc 1 784 10 view .LVU2505
 7845 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 786:src/display.c **** 	  *p2++ = '\024';
 7846              		.loc 1 786 4 is_stmt 1 view .LVU2506
 7847              	.LVL876:
 787:src/display.c **** 	}
 7848              		.loc 1 787 4 view .LVU2507
 787:src/display.c **** 	}
 7849              		.loc 1 787 10 is_stmt 0 view .LVU2508
 7850 005a 8DF85F30 		strb	r3, [sp, #95]
 787:src/display.c **** 	}
 7851              		.loc 1 787 7 view .LVU2509
 7852 005e 0DF16008 		add	r8, sp, #96
 7853              	.LVL877:
 7854              	.L788:
 796:src/display.c **** 	  *p2++ = '\007';
 7855              		.loc 1 796 2 is_stmt 1 view .LVU2510
 796:src/display.c **** 	  *p2++ = '\007';
 7856              		.loc 1 796 6 is_stmt 0 view .LVU2511
 7857 0062 FFF7FEFF 		bl	get_trig_mode
 7858              	.LVL878:
 797:src/display.c **** 	  *p2++ = '\207';
 7859              		.loc 1 797 10 view .LVU2512
 7860 0066 0723     		movs	r3, #7
 796:src/display.c **** 	  *p2++ = '\007';
 7861              		.loc 1 796 5 view .LVU2513
 7862 0068 0228     		cmp	r0, #2
 798:src/display.c **** 	  *p2++ = '\007';	    
 7863              		.loc 1 798 10 view .LVU2514
 7864 006a 4FF08702 		mov	r2, #135
 797:src/display.c **** 	  *p2++ = '\207';
 7865              		.loc 1 797 10 view .LVU2515
 7866 006e 88F80030 		strb	r3, [r8]
 796:src/display.c **** 	  *p2++ = '\007';
 7867              		.loc 1 796 5 view .LVU2516
 7868 0072 00F04C82 		beq	.L932
 802:src/display.c **** 	  *p2++ = '\207';
 7869              		.loc 1 802 4 is_stmt 1 view .LVU2517
 7870              	.LVL879:
 803:src/display.c **** 	  *p2++ = ' ';
 7871              		.loc 1 803 4 view .LVU2518
 804:src/display.c **** 	}
 7872              		.loc 1 804 10 is_stmt 0 view .LVU2519
 7873 0076 2023     		movs	r3, #32
 803:src/display.c **** 	  *p2++ = ' ';
 7874              		.loc 1 803 10 view .LVU2520
 7875 0078 88F80120 		strb	r2, [r8, #1]
 804:src/display.c **** 	}
 7876              		.loc 1 804 4 is_stmt 1 view .LVU2521
 804:src/display.c **** 	}
 7877              		.loc 1 804 10 is_stmt 0 view .LVU2522
ARM GAS  /tmp/ccdg5rgB.s 			page 245


 7878 007c 88F80230 		strb	r3, [r8, #2]
 804:src/display.c **** 	}
 7879              		.loc 1 804 7 view .LVU2523
 7880 0080 08F10308 		add	r8, r8, #3
 7881              	.LVL880:
 7882              	.L790:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7883              		.loc 1 808 2 is_stmt 1 view .LVU2524
 808:src/display.c **** 	p2 = scopy(p2, q);
 7884              		.loc 1 808 7 is_stmt 0 view .LVU2525
 7885 0084 FFF7FEFF 		bl	is_dblmode
 7886              	.LVL881:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7887              		.loc 1 808 34 view .LVU2526
 7888 0088 7F4B     		ldr	r3, .L949+12
 7889 008a 804A     		ldr	r2, .L949+16
 808:src/display.c **** 	p2 = scopy(p2, q);
 7890              		.loc 1 808 7 view .LVU2527
 7891 008c 0146     		mov	r1, r0
 7892              	.LVL882:
 809:src/display.c **** #else
 7893              		.loc 1 809 2 is_stmt 1 view .LVU2528
 809:src/display.c **** #else
 7894              		.loc 1 809 7 is_stmt 0 view .LVU2529
 7895 008e 0029     		cmp	r1, #0
 7896 0090 14BF     		ite	ne
 7897 0092 1146     		movne	r1, r2
 7898 0094 1946     		moveq	r1, r3
 7899              	.LVL883:
 809:src/display.c **** #else
 7900              		.loc 1 809 7 view .LVU2530
 7901 0096 4046     		mov	r0, r8
 7902 0098 FFF7FEFF 		bl	scopy
 7903              	.LVL884:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7904              		.loc 1 825 16 view .LVU2531
 7905 009c 2368     		ldr	r3, [r4]
 7906 009e 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 7907 00a2 C1F30111 		ubfx	r1, r1, #4, #2
 7908              	.LVL885:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7909              		.loc 1 825 2 is_stmt 1 view .LVU2532
 7910 00a6 0129     		cmp	r1, #1
 7911 00a8 00F03882 		beq	.L848
 7912 00ac 784B     		ldr	r3, .L949+20
 7913 00ae 794A     		ldr	r2, .L949+24
 7914 00b0 0229     		cmp	r1, #2
 7915 00b2 14BF     		ite	ne
 7916 00b4 1946     		movne	r1, r3
 7917 00b6 1146     		moveq	r1, r2
 7918              	.L792:
 7919              	.LVL886:
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7920              		.loc 1 842 2 view .LVU2533
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7921              		.loc 1 842 6 is_stmt 0 view .LVU2534
 7922 00b8 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccdg5rgB.s 			page 246


 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7923              		.loc 1 842 5 view .LVU2535
 7924 00ba 5B07     		lsls	r3, r3, #29
 843:src/display.c **** 	} // no need to skip y display with arrow here
 7925              		.loc 1 843 4 is_stmt 1 view .LVU2536
 7926 00bc 48BF     		it	mi
 7927 00be 7649     		ldrmi	r1, .L949+28
 7928              	.LVL887:
 846:src/display.c **** 	}
 7929              		.loc 1 846 4 view .LVU2537
 846:src/display.c **** 	}
 7930              		.loc 1 846 9 is_stmt 0 view .LVU2538
 7931 00c0 FFF7FEFF 		bl	scopy
 7932              	.LVL888:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7933              		.loc 1 850 2 is_stmt 1 view .LVU2539
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7934              		.loc 1 850 8 is_stmt 0 view .LVU2540
 7935 00c4 2268     		ldr	r2, [r4]
 7936 00c6 92F8E437 		ldrb	r3, [r2, #2020]	@ zero_extendqisi2
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7937              		.loc 1 850 5 view .LVU2541
 7938 00ca 13F00800 		ands	r0, r3, #8
 7939 00ce 46D1     		bne	.L795
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7940              		.loc 1 850 18 discriminator 2 view .LVU2542
 7941 00d0 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
 7942 00d4 0907     		lsls	r1, r1, #28
 7943 00d6 42D4     		bmi	.L795
 860:src/display.c **** 	  q = "\007\307<";
 7944              		.loc 1 860 7 is_stmt 1 view .LVU2543
 860:src/display.c **** 	  q = "\007\307<";
 7945              		.loc 1 860 22 is_stmt 0 view .LVU2544
 7946 00d8 DFF8CC91 		ldr	r9, .L949+44
 860:src/display.c **** 	  q = "\007\307<";
 7947              		.loc 1 860 10 view .LVU2545
 7948 00dc D9F80010 		ldr	r1, [r9]
 7949 00e0 0129     		cmp	r1, #1
 7950 00e2 00F01D82 		beq	.L801
 860:src/display.c **** 	  q = "\007\307<";
 7951              		.loc 1 860 43 discriminator 1 view .LVU2546
 7952 00e6 5907     		lsls	r1, r3, #29
 7953 00e8 43D5     		bpl	.L802
 7954 00ea 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7955 00ee 63E1     		b	.L839
 7956              	.LVL889:
 7957              	.L931:
 697:src/display.c **** #else
 7958              		.loc 1 697 36 discriminator 1 view .LVU2547
 7959 00f0 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 697:src/display.c **** #else
 7960              		.loc 1 697 32 discriminator 1 view .LVU2548
 7961 00f4 5007     		lsls	r0, r2, #29
 7962 00f6 00F14D81 		bmi	.L933
 7963              	.L778:
 718:src/display.c **** 	    *p2++ = shift_char;
 7964              		.loc 1 718 4 is_stmt 1 view .LVU2549
ARM GAS  /tmp/ccdg5rgB.s 			page 247


 718:src/display.c **** 	    *p2++ = shift_char;
 7965              		.loc 1 718 7 is_stmt 0 view .LVU2550
 7966 00fa B8F1200F 		cmp	r8, #32
 7967 00fe 00F04382 		beq	.L779
 7968              	.L781:
 719:src/display.c **** 	    *p2++ = '\006';
 7969              		.loc 1 719 6 is_stmt 1 view .LVU2551
 7970              	.LVL890:
 720:src/display.c **** 	  }
 7971              		.loc 1 720 12 is_stmt 0 view .LVU2552
 7972 0102 0623     		movs	r3, #6
 719:src/display.c **** 	    *p2++ = '\006';
 7973              		.loc 1 719 12 view .LVU2553
 7974 0104 8DF85C80 		strb	r8, [sp, #92]
 720:src/display.c **** 	  }
 7975              		.loc 1 720 6 is_stmt 1 view .LVU2554
 7976              	.LVL891:
 720:src/display.c **** 	  }
 7977              		.loc 1 720 12 is_stmt 0 view .LVU2555
 7978 0108 8DF85D30 		strb	r3, [sp, #93]
 720:src/display.c **** 	  }
 7979              		.loc 1 720 9 view .LVU2556
 7980 010c 0DF15E00 		add	r0, sp, #94
 7981              	.LVL892:
 7982              	.L780:
 726:src/display.c **** 	  *p2++ = ' ';
 7983              		.loc 1 726 2 is_stmt 1 view .LVU2557
 726:src/display.c **** 	  *p2++ = ' ';
 7984              		.loc 1 726 6 is_stmt 0 view .LVU2558
 7985 0110 5C4D     		ldr	r5, .L949+8
 7986 0112 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 726:src/display.c **** 	  *p2++ = ' ';
 7987              		.loc 1 726 5 view .LVU2559
 7988 0114 9A07     		lsls	r2, r3, #30
 7989 0116 00F18B81 		bmi	.L934
 731:src/display.c **** 	  *p2++ = ' ';
 7990              		.loc 1 731 2 is_stmt 1 view .LVU2560
 731:src/display.c **** 	  *p2++ = ' ';
 7991              		.loc 1 731 5 is_stmt 0 view .LVU2561
 7992 011a 5907     		lsls	r1, r3, #29
 7993 011c 00F12282 		bmi	.L935
 737:src/display.c **** 	  if (State2.wascomplex) {
 7994              		.loc 1 737 2 is_stmt 1 view .LVU2562
 737:src/display.c **** 	  if (State2.wascomplex) {
 7995              		.loc 1 737 5 is_stmt 0 view .LVU2563
 7996 0120 B8F1200F 		cmp	r8, #32
 7997 0124 00F05A82 		beq	.L936
 7998              	.L784:
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7999              		.loc 1 754 2 is_stmt 1 view .LVU2564
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8000              		.loc 1 754 16 is_stmt 0 view .LVU2565
 8001 0128 2368     		ldr	r3, [r4]
 8002 012a 93F8EA17 		ldrb	r1, [r3, #2026]	@ zero_extendqisi2
 8003 012e C1F30111 		ubfx	r1, r1, #4, #2
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 8004              		.loc 1 754 2 view .LVU2566
ARM GAS  /tmp/ccdg5rgB.s 			page 248


 8005 0132 0129     		cmp	r1, #1
 8006 0134 00F07782 		beq	.L845
 8007 0138 554B     		ldr	r3, .L949+20
 8008 013a 564A     		ldr	r2, .L949+24
 8009 013c 0229     		cmp	r1, #2
 8010 013e 14BF     		ite	ne
 8011 0140 1946     		movne	r1, r3
 8012 0142 1146     		moveq	r1, r2
 8013              	.L786:
 8014              	.LVL893:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8015              		.loc 1 768 2 is_stmt 1 view .LVU2567
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8016              		.loc 1 768 7 is_stmt 0 view .LVU2568
 8017 0144 FFF7FEFF 		bl	scopy
 8018              	.LVL894:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 8019              		.loc 1 768 7 view .LVU2569
 8020 0148 0446     		mov	r4, r0
 8021              	.LVL895:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8022              		.loc 1 770 2 is_stmt 1 view .LVU2570
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8023              		.loc 1 770 6 is_stmt 0 view .LVU2571
 8024 014a FFF7FEFF 		bl	get_trig_mode
 8025              	.LVL896:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 8026              		.loc 1 770 5 view .LVU2572
 8027 014e 0228     		cmp	r0, #2
 8028 0150 40F00581 		bne	.L776
 771:src/display.c **** 	}
 8029              		.loc 1 771 4 is_stmt 1 view .LVU2573
 8030 0154 5149     		ldr	r1, .L949+32
 8031 0156 2046     		mov	r0, r4
 8032 0158 FFF7FEFF 		bl	scopy
 8033              	.LVL897:
 8034 015c FFE0     		b	.L776
 8035              	.LVL898:
 8036              	.L795:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 8037              		.loc 1 850 32 is_stmt 0 discriminator 3 view .LVU2574
 8038 015e 5907     		lsls	r1, r3, #29
 8039 0160 00F11E81 		bmi	.L937
 860:src/display.c **** 	  q = "\007\307<";
 8040              		.loc 1 860 7 is_stmt 1 view .LVU2575
 860:src/display.c **** 	  q = "\007\307<";
 8041              		.loc 1 860 22 is_stmt 0 view .LVU2576
 8042 0164 DFF84091 		ldr	r9, .L949+44
 860:src/display.c **** 	  q = "\007\307<";
 8043              		.loc 1 860 10 view .LVU2577
 8044 0168 D9F80030 		ldr	r3, [r9]
 8045 016c 012B     		cmp	r3, #1
 8046 016e 00F0D781 		beq	.L801
 8047              	.L802:
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8048              		.loc 1 864 7 is_stmt 1 view .LVU2578
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
ARM GAS  /tmp/ccdg5rgB.s 			page 249


 8049              		.loc 1 864 11 is_stmt 0 view .LVU2579
 8050 0172 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8051              		.loc 1 864 10 view .LVU2580
 8052 0174 13F0C00F 		tst	r3, #192
 8053 0178 00F02B81 		beq	.L856
 8054 017c 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 8055              	.L837:
 865:src/display.c **** 	  p = scopy(p, q);
 8056              		.loc 1 865 4 is_stmt 1 view .LVU2581
 865:src/display.c **** 	  p = scopy(p, q);
 8057              		.loc 1 865 28 is_stmt 0 view .LVU2582
 8058 0180 474A     		ldr	r2, .L949+36
 8059 0182 4849     		ldr	r1, .L949+40
 8060 0184 13F0020F 		tst	r3, #2
 8061              	.LVL899:
 866:src/display.c **** 	}
 8062              		.loc 1 866 4 is_stmt 1 view .LVU2583
 866:src/display.c **** 	}
 8063              		.loc 1 866 8 is_stmt 0 view .LVU2584
 8064 0188 08BF     		it	eq
 8065 018a 1146     		moveq	r1, r2
 8066              	.LVL900:
 866:src/display.c **** 	}
 8067              		.loc 1 866 8 view .LVU2585
 8068 018c 3046     		mov	r0, r6
 8069 018e FFF7FEFF 		bl	scopy
 8070              	.LVL901:
 866:src/display.c **** 	}
 8071              		.loc 1 866 8 view .LVU2586
 8072 0192 8046     		mov	r8, r0
 8073              	.LVL902:
 8074              	.L804:
 882:src/display.c **** 	    q = "\007\307y";
 8075              		.loc 1 882 4 is_stmt 1 view .LVU2587
 882:src/display.c **** 	    q = "\007\307y";
 8076              		.loc 1 882 7 is_stmt 0 view .LVU2588
 8077 0194 D9F80030 		ldr	r3, [r9]
 8078 0198 022B     		cmp	r3, #2
 8079 019a 00F0C781 		beq	.L938
 8080              	.L806:
 888:src/display.c **** 	  decNumber y;
 8081              		.loc 1 888 2 is_stmt 1 view .LVU2589
 888:src/display.c **** 	  decNumber y;
 8082              		.loc 1 888 6 is_stmt 0 view .LVU2590
 8083 019e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 888:src/display.c **** 	  decNumber y;
 8084              		.loc 1 888 5 view .LVU2591
 8085 01a0 5A06     		lsls	r2, r3, #25
 8086 01a2 40F1DF80 		bpl	.L834
 8087              	.L766:
 8088              	.LBB462:
 889:src/display.c **** 	display_yreg:
 8089              		.loc 1 889 4 is_stmt 1 view .LVU2592
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8090              		.loc 1 896 4 view .LVU2593
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
ARM GAS  /tmp/ccdg5rgB.s 			page 250


 8091              		.loc 1 896 8 is_stmt 0 view .LVU2594
 8092 01a6 2368     		ldr	r3, [r4]
 8093 01a8 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8094              		.loc 1 896 7 view .LVU2595
 8095 01ac D007     		lsls	r0, r2, #31
 8096 01ae 00F11C81 		bmi	.L939
 8097              	.L808:
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8098              		.loc 1 903 4 is_stmt 1 view .LVU2596
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8099              		.loc 1 903 9 is_stmt 0 view .LVU2597
 8100 01b2 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8101              		.loc 1 903 7 view .LVU2598
 8102 01b6 5207     		lsls	r2, r2, #29
 8103 01b8 06D5     		bpl	.L815
 903:src/display.c **** 	    getRegister(&y, regK_idx);
 8104              		.loc 1 903 35 discriminator 1 view .LVU2599
 8105 01ba 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 8106 01be 03F01C03 		and	r3, r3, #28
 8107 01c2 0C2B     		cmp	r3, #12
 8108 01c4 00F03382 		beq	.L940
 8109              	.L815:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8110              		.loc 1 907 6 is_stmt 1 view .LVU2600
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8111              		.loc 1 907 36 is_stmt 0 view .LVU2601
 8112 01c8 DFF8E090 		ldr	r9, .L949+48
 8113 01cc D9F80010 		ldr	r1, [r9]
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8114              		.loc 1 907 6 view .LVU2602
 8115 01d0 6329     		cmp	r1, #99
 8116 01d2 00F3B181 		bgt	.L941
 8117              	.LVL903:
 8118              	.L817:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8119              		.loc 1 907 6 discriminator 3 view .LVU2603
 8120 01d6 0131     		adds	r1, r1, #1
 8121              	.L821:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8122              		.loc 1 907 6 discriminator 4 view .LVU2604
 8123 01d8 03AF     		add	r7, sp, #12
 8124 01da 3846     		mov	r0, r7
 8125 01dc FFF7FEFF 		bl	getRegister
 8126              	.LVL904:
 8127              	.L816:
 917:src/display.c **** #ifdef INCLUDE_C_LOCK
 8128              		.loc 1 917 4 is_stmt 1 view .LVU2605
 917:src/display.c **** #ifdef INCLUDE_C_LOCK
 8129              		.loc 1 917 7 is_stmt 0 view .LVU2606
 8130 01e0 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8131 01e4 13F0700F 		tst	r3, #112
 8132 01e8 40F06E81 		bne	.L823
 919:src/display.c **** #else
 8133              		.loc 1 919 6 is_stmt 1 view .LVU2607
 919:src/display.c **** #else
ARM GAS  /tmp/ccdg5rgB.s 			page 251


 8134              		.loc 1 919 19 is_stmt 0 view .LVU2608
 8135 01ec EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 919:src/display.c **** #else
 8136              		.loc 1 919 9 view .LVU2609
 8137 01ee 13F0010F 		tst	r3, #1
 919:src/display.c **** #else
 8138              		.loc 1 919 39 view .LVU2610
 8139 01f2 2368     		ldr	r3, [r4]
 919:src/display.c **** #else
 8140              		.loc 1 919 9 view .LVU2611
 8141 01f4 00F02781 		beq	.L826
 919:src/display.c **** #else
 8142              		.loc 1 919 39 discriminator 1 view .LVU2612
 8143 01f8 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 919:src/display.c **** #else
 8144              		.loc 1 919 33 discriminator 1 view .LVU2613
 8145 01fc 5007     		lsls	r0, r2, #29
 8146 01fe 0CD5     		bpl	.L825
 919:src/display.c **** #else
 8147              		.loc 1 919 39 discriminator 2 view .LVU2614
 8148 0200 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 919:src/display.c **** #else
 8149              		.loc 1 919 38 discriminator 2 view .LVU2615
 8150 0204 5107     		lsls	r1, r2, #29
 8151 0206 08D5     		bpl	.L825
 919:src/display.c **** #else
 8152              		.loc 1 919 62 discriminator 5 view .LVU2616
 8153 0208 1207     		lsls	r2, r2, #28
 8154 020a 40F11C81 		bpl	.L826
 919:src/display.c **** #else
 8155              		.loc 1 919 119 discriminator 6 view .LVU2617
 8156 020e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 919:src/display.c **** #else
 8157              		.loc 1 919 80 discriminator 6 view .LVU2618
 8158 0212 12F0C00F 		tst	r2, #192
 8159 0216 40F01681 		bne	.L826
 8160              	.L825:
 8161              	.LBB463:
 923:src/display.c **** 
 8162              		.loc 1 923 8 is_stmt 1 view .LVU2619
 925:src/display.c **** 	      UState.nothousands = 1;
 8163              		.loc 1 925 8 is_stmt 0 view .LVU2620
 8164 021a 2A22     		movs	r2, #42
 8165 021c 0021     		movs	r1, #0
 8166 021e 3046     		mov	r0, r6
 923:src/display.c **** 
 8167              		.loc 1 923 44 view .LVU2621
 8168 0220 93F8E797 		ldrb	r9, [r3, #2023]	@ zero_extendqisi2
 8169 0224 DFF88880 		ldr	r8, .L949+52
 8170              	.LVL905:
 925:src/display.c **** 	      UState.nothousands = 1;
 8171              		.loc 1 925 8 view .LVU2622
 8172 0228 FFF7FEFF 		bl	xset
 8173              	.LVL906:
 926:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8174              		.loc 1 926 27 view .LVU2623
 8175 022c 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccdg5rgB.s 			page 252


 8176 022e 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 8177 0232 43F04003 		orr	r3, r3, #64
 8178 0236 82F8E737 		strb	r3, [r2, #2023]
 927:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8179              		.loc 1 927 8 view .LVU2624
 8180 023a 3146     		mov	r1, r6
 8181 023c 3846     		mov	r0, r7
 8182 023e FFF7FEFF 		bl	set_x_hms
 8183              	.LVL907:
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8184              		.loc 1 928 27 view .LVU2625
 8185 0242 2368     		ldr	r3, [r4]
 8186 0244 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
 923:src/display.c **** 
 8187              		.loc 1 923 44 view .LVU2626
 8188 0248 C9F38019 		ubfx	r9, r9, #6, #1
 8189              	.LVL908:
 925:src/display.c **** 	      UState.nothousands = 1;
 8190              		.loc 1 925 8 is_stmt 1 view .LVU2627
 926:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8191              		.loc 1 926 8 view .LVU2628
 927:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8192              		.loc 1 927 8 view .LVU2629
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8193              		.loc 1 928 8 view .LVU2630
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8194              		.loc 1 928 27 is_stmt 0 view .LVU2631
 8195 024c 69F38612 		bfi	r2, r9, #6, #1
 8196 0250 83F8E727 		strb	r2, [r3, #2023]
 933:src/display.c **** 	      while (*p) {
 8197              		.loc 1 933 8 is_stmt 1 view .LVU2632
 8198              	.LVL909:
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8199              		.loc 1 934 8 view .LVU2633
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8200              		.loc 1 934 14 view .LVU2634
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8201              		.loc 1 934 15 is_stmt 0 view .LVU2635
 8202 0254 4021     		movs	r1, #64
 928:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8203              		.loc 1 928 27 view .LVU2636
 8204 0256 0522     		movs	r2, #5
 8205 0258 05E0     		b	.L828
 8206              	.LVL910:
 8207              	.L942:
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8208              		.loc 1 934 15 view .LVU2637
 8209 025a 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8210              	.LVL911:
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8211              		.loc 1 934 14 view .LVU2638
 8212 025e 0029     		cmp	r1, #0
 8213 0260 7DD0     		beq	.L776
 8214 0262 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8215              	.LVL912:
 8216              	.L828:
 935:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
ARM GAS  /tmp/ccdg5rgB.s 			page 253


 8217              		.loc 1 935 3 is_stmt 1 view .LVU2639
 8218 0266 3046     		mov	r0, r6
 8219 0268 FFF7FEFF 		bl	replace_char
 8220              	.LVL913:
 936:src/display.c **** 		  goto skip;
 8221              		.loc 1 936 3 view .LVU2640
 936:src/display.c **** 		  goto skip;
 8222              		.loc 1 936 7 is_stmt 0 view .LVU2641
 8223 026c 0121     		movs	r1, #1
 8224 026e 3046     		mov	r0, r6
 8225 0270 FFF7FEFF 		bl	pixel_length
 8226              	.LVL914:
 939:src/display.c **** 	      }
 8227              		.loc 1 939 3 is_stmt 1 view .LVU2642
 934:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8228              		.loc 1 934 14 view .LVU2643
 936:src/display.c **** 		  goto skip;
 8229              		.loc 1 936 6 is_stmt 0 view .LVU2644
 8230 0274 2C28     		cmp	r0, #44
 8231 0276 F0DC     		bgt	.L942
 8232 0278 71E0     		b	.L776
 8233              	.L950:
 8234 027a 00BF     		.align	2
 8235              	.L949:
 8236 027c 00000000 		.word	main_ram
 8237 0280 00000000 		.word	.LANCHOR15
 8238 0284 00000000 		.word	StateWhileOn
 8239 0288 28000000 		.word	.LC10
 8240 028c 24000000 		.word	.LC9
 8241 0290 10000000 		.word	.LC6
 8242 0294 1C000000 		.word	.LC8
 8243 0298 58000000 		.word	.LC17
 8244 029c 50000000 		.word	.LC16
 8245 02a0 08000000 		.word	.LC4
 8246 02a4 4C000000 		.word	.LC15
 8247 02a8 00000000 		.word	RectPolConv
 8248 02ac 00000000 		.word	ShowRegister
 8249 02b0 00000000 		.word	.LANCHOR17
 8250              	.LVL915:
 8251              	.L930:
 936:src/display.c **** 		  goto skip;
 8252              		.loc 1 936 6 view .LVU2645
 8253              	.LBE463:
 8254              	.LBE462:
 667:src/display.c **** 	    *p2++ = '\006';
 8255              		.loc 1 667 6 is_stmt 1 view .LVU2646
 668:src/display.c **** 	  }
 8256              		.loc 1 668 12 is_stmt 0 view .LVU2647
 8257 02b4 0623     		movs	r3, #6
 8258 02b6 8DF85D30 		strb	r3, [sp, #93]
 667:src/display.c **** 	    *p2++ = '\006';
 8259              		.loc 1 667 12 view .LVU2648
 8260 02ba 8DF85C80 		strb	r8, [sp, #92]
 668:src/display.c **** 	  }
 8261              		.loc 1 668 6 is_stmt 1 view .LVU2649
 8262              	.LVL916:
 671:src/display.c **** 	default:
ARM GAS  /tmp/ccdg5rgB.s 			page 254


 8263              		.loc 1 671 2 view .LVU2650
 671:src/display.c **** 	default:
 8264              		.loc 1 671 9 is_stmt 0 view .LVU2651
 8265 02be FFF7FEFF 		bl	int_mode
 8266              	.LVL917:
 8267 02c2 0138     		subs	r0, r0, #1
 8268 02c4 C0B2     		uxtb	r0, r0
 8269 02c6 0228     		cmp	r0, #2
 8270 02c8 96BF     		itet	ls
 8271 02ca B54B     		ldrls	r3, .L951
 8272 02cc B549     		ldrhi	r1, .L951+4
 8273 02ce 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 8274              	.LVL918:
 678:src/display.c **** 	*q++ = '\006';
 8275              		.loc 1 678 2 is_stmt 1 view .LVU2652
 678:src/display.c **** 	*q++ = '\006';
 8276              		.loc 1 678 6 is_stmt 0 view .LVU2653
 8277 02d2 0DF15E00 		add	r0, sp, #94
 8278              	.LVL919:
 678:src/display.c **** 	*q++ = '\006';
 8279              		.loc 1 678 6 view .LVU2654
 8280 02d6 FFF7FEFF 		bl	scopy
 8281              	.LVL920:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8282              		.loc 1 679 7 view .LVU2655
 8283 02da 8046     		mov	r8, r0
 8284              	.LVL921:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8285              		.loc 1 679 7 view .LVU2656
 8286 02dc 0623     		movs	r3, #6
 8287 02de 08F8013B 		strb	r3, [r8], #1
 678:src/display.c **** 	*q++ = '\006';
 8288              		.loc 1 678 6 view .LVU2657
 8289 02e2 0546     		mov	r5, r0
 8290              	.LVL922:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 8291              		.loc 1 679 2 is_stmt 1 view .LVU2658
 680:src/display.c **** 
 8292              		.loc 1 680 2 view .LVU2659
 680:src/display.c **** 
 8293              		.loc 1 680 7 is_stmt 0 view .LVU2660
 8294 02e4 FFF7FEFF 		bl	word_size
 8295              	.LVL923:
 8296 02e8 0222     		movs	r2, #2
 8297 02ea 0146     		mov	r1, r0
 8298 02ec 4046     		mov	r0, r8
 8299 02ee FFF7FEFF 		bl	num_arg_0
 8300              	.LVL924:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8301              		.loc 1 682 19 view .LVU2661
 8302 02f2 DFF8E0C2 		ldr	ip, .L951+52
 8303 02f6 DCF80030 		ldr	r3, [ip]
 8304              	.LVL925:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8305              		.loc 1 682 2 is_stmt 1 view .LVU2662
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 8306              		.loc 1 682 5 is_stmt 0 view .LVU2663
ARM GAS  /tmp/ccdg5rgB.s 			page 255


 8307 02fa 002B     		cmp	r3, #0
 8308 02fc 6BDD     		ble	.L928
 683:src/display.c **** 	  if (*q == '1')
 8309              		.loc 1 683 4 is_stmt 1 view .LVU2664
 683:src/display.c **** 	  if (*q == '1')
 8310              		.loc 1 683 10 is_stmt 0 view .LVU2665
 8311 02fe C3F10702 		rsb	r2, r3, #7
 8312 0302 5200     		lsls	r2, r2, #1
 683:src/display.c **** 	  if (*q == '1')
 8313              		.loc 1 683 6 view .LVU2666
 8314 0304 0292     		str	r2, [sp, #8]
 684:src/display.c **** 	    n += 2;
 8315              		.loc 1 684 4 is_stmt 1 view .LVU2667
 684:src/display.c **** 	    n += 2;
 8316              		.loc 1 684 7 is_stmt 0 view .LVU2668
 8317 0306 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 8318 0308 3129     		cmp	r1, #49
 685:src/display.c **** 	  if (q[1] == '1')
 8319              		.loc 1 685 6 is_stmt 1 view .LVU2669
 685:src/display.c **** 	  if (q[1] == '1')
 8320              		.loc 1 685 8 is_stmt 0 view .LVU2670
 8321 030a 04BF     		itt	eq
 8322 030c 0232     		addeq	r2, r2, #2
 8323 030e 0292     		streq	r2, [sp, #8]
 686:src/display.c **** 	    n += 2;
 8324              		.loc 1 686 4 is_stmt 1 view .LVU2671
 686:src/display.c **** 	    n += 2;
 8325              		.loc 1 686 7 is_stmt 0 view .LVU2672
 8326 0310 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 8327 0312 3129     		cmp	r1, #49
 8328 0314 00D1     		bne	.L769
 687:src/display.c **** 	  while (n-- > 0)
 8329              		.loc 1 687 6 is_stmt 1 view .LVU2673
 687:src/display.c **** 	  while (n-- > 0)
 8330              		.loc 1 687 8 is_stmt 0 view .LVU2674
 8331 0316 0232     		adds	r2, r2, #2
 8332              	.L769:
 688:src/display.c **** 	    *p2++ = '\006';
 8333              		.loc 1 688 10 is_stmt 1 view .LVU2675
 688:src/display.c **** 	    *p2++ = '\006';
 8334              		.loc 1 688 12 is_stmt 0 view .LVU2676
 8335 0318 511E     		subs	r1, r2, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8336              		.loc 1 688 10 view .LVU2677
 8337 031a 002A     		cmp	r2, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8338              		.loc 1 688 12 view .LVU2678
 8339 031c 0291     		str	r1, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8340              		.loc 1 688 10 view .LVU2679
 8341 031e 40F38481 		ble	.L926
 689:src/display.c **** 
 8342              		.loc 1 689 12 view .LVU2680
 8343 0322 0621     		movs	r1, #6
 8344              	.L770:
 689:src/display.c **** 
 8345              		.loc 1 689 6 is_stmt 1 view .LVU2681
ARM GAS  /tmp/ccdg5rgB.s 			page 256


 8346              	.LVL926:
 689:src/display.c **** 
 8347              		.loc 1 689 12 is_stmt 0 view .LVU2682
 8348 0324 00F8011B 		strb	r1, [r0], #1
 8349              	.LVL927:
 688:src/display.c **** 	    *p2++ = '\006';
 8350              		.loc 1 688 10 is_stmt 1 view .LVU2683
 688:src/display.c **** 	    *p2++ = '\006';
 8351              		.loc 1 688 12 is_stmt 0 view .LVU2684
 8352 0328 029B     		ldr	r3, [sp, #8]
 8353 032a 5A1E     		subs	r2, r3, #1
 688:src/display.c **** 	    *p2++ = '\006';
 8354              		.loc 1 688 10 view .LVU2685
 8355 032c 002B     		cmp	r3, #0
 688:src/display.c **** 	    *p2++ = '\006';
 8356              		.loc 1 688 12 view .LVU2686
 8357 032e 0292     		str	r2, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 8358              		.loc 1 688 10 view .LVU2687
 8359 0330 F8DC     		bgt	.L770
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8360              		.loc 1 691 4 is_stmt 1 view .LVU2688
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8361              		.loc 1 691 11 is_stmt 0 view .LVU2689
 8362 0332 DCF80030 		ldr	r3, [ip]
 8363 0336 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8364              		.loc 1 691 27 is_stmt 1 view .LVU2690
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8365              		.loc 1 691 4 is_stmt 0 view .LVU2691
 8366 0338 002B     		cmp	r3, #0
 8367 033a 4CDB     		blt	.L928
 8368              	.L838:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8369              		.loc 1 691 4 view .LVU2692
 8370 033c 9A4D     		ldr	r5, .L951+8
 8371              	.L775:
 692:src/display.c **** 	}
 8372              		.loc 1 692 6 is_stmt 1 view .LVU2693
 692:src/display.c **** 	}
 8373              		.loc 1 692 20 is_stmt 0 view .LVU2694
 8374 033e 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 8375 0340 C2F3C202 		ubfx	r2, r2, #3, #3
 692:src/display.c **** 	}
 8376              		.loc 1 692 12 view .LVU2695
 8377 0344 9A42     		cmp	r2, r3
 8378 0346 0CBF     		ite	eq
 8379 0348 7C23     		moveq	r3, #124
 8380 034a 2723     		movne	r3, #39
 8381              	.LVL928:
 692:src/display.c **** 	}
 8382              		.loc 1 692 12 view .LVU2696
 8383 034c 00F8013B 		strb	r3, [r0], #1
 8384              	.LVL929:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8385              		.loc 1 691 35 is_stmt 1 view .LVU2697
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccdg5rgB.s 			page 257


 8386              		.loc 1 691 36 is_stmt 0 view .LVU2698
 8387 0350 029B     		ldr	r3, [sp, #8]
 8388 0352 013B     		subs	r3, r3, #1
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8389              		.loc 1 691 4 view .LVU2699
 8390 0354 002B     		cmp	r3, #0
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8391              		.loc 1 691 36 view .LVU2700
 8392 0356 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8393              		.loc 1 691 27 is_stmt 1 view .LVU2701
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8394              		.loc 1 691 4 is_stmt 0 view .LVU2702
 8395 0358 F1DA     		bge	.L775
 694:src/display.c ****       }
 8396              		.loc 1 694 2 is_stmt 1 view .LVU2703
 694:src/display.c ****       }
 8397              		.loc 1 694 5 is_stmt 0 view .LVU2704
 8398 035a 002F     		cmp	r7, #0
 8399 035c 3ED1     		bne	.L943
 8400              	.LVL930:
 8401              	.L776:
 989:src/display.c ****       set_status_top_always(buf2);
 8402              		.loc 1 989 7 is_stmt 1 view .LVU2705
 989:src/display.c ****       set_status_top_always(buf2);
 8403              		.loc 1 989 11 is_stmt 0 view .LVU2706
 8404 035e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 989:src/display.c ****       set_status_top_always(buf2);
 8405              		.loc 1 989 10 view .LVU2707
 8406 0360 5906     		lsls	r1, r3, #25
 8407 0362 52D4     		bmi	.L944
 8408              	.L834:
 8409              	.LBB469:
 8410              	.LBB470:
3651:src/display.c ****       }
 8411              		.loc 1 3651 2 is_stmt 1 view .LVU2708
 8412 0364 1B06     		lsls	r3, r3, #24
 8413 0366 5AD5     		bpl	.L945
 8414              	.L855:
 8415 0368 0121     		movs	r1, #1
 8416              	.L836:
 8417              	.LVL931:
 8418              	.LBB471:
 8419              	.LBI471:
3481:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 8420              		.loc 1 3481 19 view .LVU2709
 8421              	.LBB472:
3482:src/display.c ****       }
 8422              		.loc 1 3482 2 view .LVU2710
 8423 036a 4FF45373 		mov	r3, #844
 8424 036e 0093     		str	r3, [sp]
 8425 0370 17A8     		add	r0, sp, #92
 8426              	.LVL932:
3482:src/display.c ****       }
 8427              		.loc 1 3482 2 is_stmt 0 view .LVU2711
 8428 0372 40F24A23 		movw	r3, #586
 8429 0376 2B22     		movs	r2, #43
ARM GAS  /tmp/ccdg5rgB.s 			page 258


 8430 0378 FFF7FEFF 		bl	s_s_sized
 8431              	.LVL933:
3482:src/display.c ****       }
 8432              		.loc 1 3482 2 view .LVU2712
 8433              	.LBE472:
 8434              	.LBE471:
 8435              	.LBE470:
 8436              	.LBE469:
 992:src/display.c **** #else
 8437              		.loc 1 992 5 view .LVU2713
 8438 037c 23B0     		add	sp, sp, #140
 8439              		.cfi_remember_state
 8440              		.cfi_def_cfa_offset 28
 8441              		@ sp needed
 8442 037e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8443              	.LVL934:
 8444              	.L787:
 8445              		.cfi_restore_state
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8446              		.loc 1 790 4 is_stmt 1 view .LVU2714
 791:src/display.c **** 	  *p2++ = shift_char;
 8447              		.loc 1 791 4 view .LVU2715
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8448              		.loc 1 790 10 is_stmt 0 view .LVU2716
 8449 0382 4CF20773 		movw	r3, #50951
 792:src/display.c **** 	}
 8450              		.loc 1 792 10 view .LVU2717
 8451 0386 8DF85E80 		strb	r8, [sp, #94]
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8452              		.loc 1 790 10 view .LVU2718
 8453 038a ADF85C30 		strh	r3, [sp, #92]	@ movhi
 792:src/display.c **** 	}
 8454              		.loc 1 792 4 is_stmt 1 view .LVU2719
 8455              	.LVL935:
 792:src/display.c **** 	}
 8456              		.loc 1 792 7 is_stmt 0 view .LVU2720
 8457 038e 0DF15F08 		add	r8, sp, #95
 8458              	.LVL936:
 792:src/display.c **** 	}
 8459              		.loc 1 792 7 view .LVU2721
 8460 0392 66E6     		b	.L788
 8461              	.LVL937:
 8462              	.L933:
 697:src/display.c **** #else
 8463              		.loc 1 697 36 discriminator 2 view .LVU2722
 8464 0394 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 697:src/display.c **** #else
 8465              		.loc 1 697 35 discriminator 2 view .LVU2723
 8466 0398 5907     		lsls	r1, r3, #29
 8467 039a 3FF552AE 		bmi	.L777
 8468 039e ACE6     		b	.L778
 8469              	.LVL938:
 8470              	.L937:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 8471              		.loc 1 850 35 discriminator 4 view .LVU2724
 8472 03a0 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 8473 03a4 5A07     		lsls	r2, r3, #29
ARM GAS  /tmp/ccdg5rgB.s 			page 259


 8474 03a6 00F1E280 		bmi	.L946
 860:src/display.c **** 	  q = "\007\307<";
 8475              		.loc 1 860 7 is_stmt 1 view .LVU2725
 860:src/display.c **** 	  q = "\007\307<";
 8476              		.loc 1 860 22 is_stmt 0 view .LVU2726
 8477 03aa DFF80492 		ldr	r9, .L951+16
 860:src/display.c **** 	  q = "\007\307<";
 8478              		.loc 1 860 10 view .LVU2727
 8479 03ae D9F80020 		ldr	r2, [r9]
 8480 03b2 012A     		cmp	r2, #1
 8481 03b4 00F0B480 		beq	.L801
 8482              	.L839:
 860:src/display.c **** 	  q = "\007\307<";
 8483              		.loc 1 860 56 discriminator 2 view .LVU2728
 8484 03b8 03F00C02 		and	r2, r3, #12
 8485 03bc 0C2A     		cmp	r2, #12
 8486 03be 00F0AF80 		beq	.L801
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8487              		.loc 1 864 7 is_stmt 1 view .LVU2729
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8488              		.loc 1 864 11 is_stmt 0 view .LVU2730
 8489 03c2 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8490              		.loc 1 864 32 view .LVU2731
 8491 03c4 03F00402 		and	r2, r3, #4
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8492              		.loc 1 864 11 view .LVU2732
 8493 03c8 21F03F01 		bic	r1, r1, #63
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8494              		.loc 1 864 32 view .LVU2733
 8495 03cc 0A43     		orrs	r2, r1, r2
 8496 03ce 7FF4D7AE 		bne	.L837
 8497              	.L856:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8498              		.loc 1 611 22 view .LVU2734
 8499 03d2 B046     		mov	r8, r6
 8500 03d4 DEE6     		b	.L804
 8501              	.LVL939:
 8502              	.L928:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8503              		.loc 1 611 22 view .LVU2735
 8504 03d6 744D     		ldr	r5, .L951+8
 694:src/display.c ****       }
 8505              		.loc 1 694 2 is_stmt 1 view .LVU2736
 694:src/display.c ****       }
 8506              		.loc 1 694 5 is_stmt 0 view .LVU2737
 8507 03d8 002F     		cmp	r7, #0
 8508 03da C0D0     		beq	.L776
 8509              	.L943:
 8510              	.LBB477:
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8511              		.loc 1 896 8 view .LVU2738
 8512 03dc 2368     		ldr	r3, [r4]
 8513 03de 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8514              		.loc 1 896 7 view .LVU2739
 8515 03e2 D007     		lsls	r0, r2, #31
ARM GAS  /tmp/ccdg5rgB.s 			page 260


 8516              	.LVL940:
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8517              		.loc 1 896 7 view .LVU2740
 8518              	.LBE477:
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8519              		.loc 1 611 22 view .LVU2741
 8520 03e4 B046     		mov	r8, r6
 8521              	.LVL941:
 8522              	.LBB478:
 889:src/display.c **** 	display_yreg:
 8523              		.loc 1 889 4 is_stmt 1 view .LVU2742
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8524              		.loc 1 896 4 view .LVU2743
 896:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 8525              		.loc 1 896 7 is_stmt 0 view .LVU2744
 8526 03e6 7FF5E4AE 		bpl	.L808
 8527              	.L939:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8528              		.loc 1 897 6 is_stmt 1 view .LVU2745
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8529              		.loc 1 897 44 is_stmt 0 view .LVU2746
 8530 03ea DFF8EC91 		ldr	r9, .L951+56
 8531 03ee D9F80030 		ldr	r3, [r9]
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8532              		.loc 1 897 6 view .LVU2747
 8533 03f2 632B     		cmp	r3, #99
 8534 03f4 00F30581 		bgt	.L947
 8535              	.L809:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8536              		.loc 1 897 6 discriminator 5 view .LVU2748
 8537 03f8 581C     		adds	r0, r3, #1
 8538              	.L813:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8539              		.loc 1 897 6 discriminator 6 view .LVU2749
 8540 03fa FFF7FEFF 		bl	get_reg_n_int
 8541              	.LVL942:
 8542 03fe 4246     		mov	r2, r8
 8543 0400 FFF7FEFF 		bl	set_int_x
 8544              	.LVL943:
 900:src/display.c **** 	  }
 8545              		.loc 1 900 6 is_stmt 1 discriminator 6 view .LVU2750
 8546              	.LBE478:
 989:src/display.c ****       set_status_top_always(buf2);
 8547              		.loc 1 989 7 discriminator 6 view .LVU2751
 989:src/display.c ****       set_status_top_always(buf2);
 8548              		.loc 1 989 11 is_stmt 0 discriminator 6 view .LVU2752
 8549 0404 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 989:src/display.c ****       set_status_top_always(buf2);
 8550              		.loc 1 989 10 discriminator 6 view .LVU2753
 8551 0406 5906     		lsls	r1, r3, #25
 8552 0408 ACD5     		bpl	.L834
 8553              	.LVL944:
 8554              	.L944:
 989:src/display.c ****       set_status_top_always(buf2);
 8555              		.loc 1 989 27 is_stmt 1 discriminator 1 view .LVU2754
 8556 040a 3046     		mov	r0, r6
 8557 040c FFF7FEFF 		bl	set_status
ARM GAS  /tmp/ccdg5rgB.s 			page 261


 8558              	.LVL945:
 990:src/display.c ****       
 8559              		.loc 1 990 7 discriminator 1 view .LVU2755
 8560              	.LBB479:
 8561              	.LBI469:
3649:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8562              		.loc 1 3649 19 discriminator 1 view .LVU2756
 8563              	.LBB475:
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8564              		.loc 1 3650 2 discriminator 1 view .LVU2757
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8565              		.loc 1 3650 6 is_stmt 0 discriminator 1 view .LVU2758
 8566 0410 664B     		ldr	r3, .L951+12
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8567              		.loc 1 3650 5 discriminator 1 view .LVU2759
 8568 0412 B3F90030 		ldrsh	r3, [r3]
 8569 0416 83B9     		cbnz	r3, .L833
 8570 0418 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
3651:src/display.c ****       }
 8571              		.loc 1 3651 2 is_stmt 1 view .LVU2760
 8572 041a 1B06     		lsls	r3, r3, #24
 8573 041c A4D4     		bmi	.L855
 8574              	.LVL946:
 8575              	.L945:
 8576              	.LBB473:
 8577              	.LBI473:
3629:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 8578              		.loc 1 3629 18 view .LVU2761
 8579              	.LBB474:
3630:src/display.c ****       }
 8580              		.loc 1 3630 2 view .LVU2762
3630:src/display.c ****       }
 8581              		.loc 1 3630 9 is_stmt 0 view .LVU2763
 8582 041e 0021     		movs	r1, #0
 8583 0420 17A8     		add	r0, sp, #92
 8584              	.LVL947:
3630:src/display.c ****       }
 8585              		.loc 1 3630 9 view .LVU2764
 8586 0422 FFF7FEFF 		bl	pixel_length
 8587              	.LVL948:
3630:src/display.c ****       }
 8588              		.loc 1 3630 9 view .LVU2765
 8589              	.LBE474:
 8590              	.LBE473:
3651:src/display.c ****       }
 8591              		.loc 1 3651 2 view .LVU2766
 8592 0426 2C28     		cmp	r0, #44
 8593 0428 D4BF     		ite	le
 8594 042a 0021     		movle	r1, #0
 8595 042c 0121     		movgt	r1, #1
 8596 042e 9CE7     		b	.L836
 8597              	.LVL949:
 8598              	.L934:
3651:src/display.c ****       }
 8599              		.loc 1 3651 2 view .LVU2767
 8600              	.LBE475:
 8601              	.LBE479:
ARM GAS  /tmp/ccdg5rgB.s 			page 262


 727:src/display.c **** 	  *p2 = '\024';
 8602              		.loc 1 727 4 is_stmt 1 view .LVU2768
 727:src/display.c **** 	  *p2 = '\024';
 8603              		.loc 1 727 10 is_stmt 0 view .LVU2769
 8604 0430 2022     		movs	r2, #32
 728:src/display.c **** 	  goto skip;
 8605              		.loc 1 728 8 view .LVU2770
 8606 0432 1423     		movs	r3, #20
 727:src/display.c **** 	  *p2 = '\024';
 8607              		.loc 1 727 10 view .LVU2771
 8608 0434 0270     		strb	r2, [r0]
 728:src/display.c **** 	  goto skip;
 8609              		.loc 1 728 4 is_stmt 1 view .LVU2772
 728:src/display.c **** 	  goto skip;
 8610              		.loc 1 728 8 is_stmt 0 view .LVU2773
 8611 0436 4370     		strb	r3, [r0, #1]
 729:src/display.c **** 	}
 8612              		.loc 1 729 4 is_stmt 1 view .LVU2774
 8613 0438 91E7     		b	.L776
 8614              	.LVL950:
 8615              	.L833:
 8616              	.LBB480:
 8617              	.LBB476:
3650:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8618              		.loc 1 3650 22 is_stmt 0 view .LVU2775
 8619 043a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8620 043c 5A06     		lsls	r2, r3, #25
 8621 043e 91D5     		bpl	.L834
 8622              	.LBE476:
 8623              	.LBE480:
 992:src/display.c **** #else
 8624              		.loc 1 992 5 view .LVU2776
 8625 0440 23B0     		add	sp, sp, #140
 8626              		.cfi_remember_state
 8627              		.cfi_def_cfa_offset 28
 8628              		@ sp needed
 8629 0442 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8630              	.LVL951:
 8631              	.L826:
 8632              		.cfi_restore_state
 8633              	.LBB481:
 943:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8634              		.loc 1 943 6 is_stmt 1 view .LVU2777
 943:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8635              		.loc 1 943 21 is_stmt 0 view .LVU2778
 8636 0446 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
 943:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8637              		.loc 1 943 9 view .LVU2779
 8638 044a 9806     		lsls	r0, r3, #26
 8639 044c 3CD5     		bpl	.L823
 945:src/display.c **** #endif
 8640              		.loc 1 945 6 view .LVU2780
 8641 044e 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 945:src/display.c **** #endif
 8642              		.loc 1 945 3 view .LVU2781
 8643 0450 13F00204 		ands	r4, r3, #2
 8644 0454 38D1     		bne	.L823
ARM GAS  /tmp/ccdg5rgB.s 			page 263


 948:src/display.c **** #endif
 8645              		.loc 1 948 6 view .LVU2782
 8646 0456 564B     		ldr	r3, .L951+16
 948:src/display.c **** #endif
 8647              		.loc 1 948 3 view .LVU2783
 8648 0458 1B68     		ldr	r3, [r3]
 8649 045a 012B     		cmp	r3, #1
 8650 045c 34D0     		beq	.L823
 950:src/display.c **** 	      char ltgteq;
 8651              		.loc 1 950 6 view .LVU2784
 8652 045e 4146     		mov	r1, r8
 8653 0460 3846     		mov	r0, r7
 8654 0462 FFF7FEFF 		bl	set_x_fract
 8655              	.LVL952:
 950:src/display.c **** 	      char ltgteq;
 8656              		.loc 1 950 3 view .LVU2785
 8657 0466 78B3     		cbz	r0, .L823
 8658              	.LBB464:
 951:src/display.c **** 
 8659              		.loc 1 951 8 is_stmt 1 view .LVU2786
 953:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8660              		.loc 1 953 8 view .LVU2787
 953:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8661              		.loc 1 953 12 is_stmt 0 view .LVU2788
 8662 0468 2146     		mov	r1, r4
 8663 046a 3046     		mov	r0, r6
 8664 046c FFF7FEFF 		bl	find_char
 8665              	.LVL953:
 8666 0470 0446     		mov	r4, r0
 953:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8667              		.loc 1 953 10 view .LVU2789
 8668 0472 0238     		subs	r0, r0, #2
 8669              	.LVL954:
 955:src/display.c **** 	      switch (ltgteq) {
 8670              		.loc 1 955 8 is_stmt 1 view .LVU2790
 955:src/display.c **** 	      switch (ltgteq) {
 8671              		.loc 1 955 15 is_stmt 0 view .LVU2791
 8672 0474 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8673              	.LVL955:
 956:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8674              		.loc 1 956 8 is_stmt 1 view .LVU2792
 8675 0478 B9F1470F 		cmp	r9, #71
 8676 047c 00F0E580 		beq	.L853
 958:src/display.c **** 	      }
 8677              		.loc 1 958 25 is_stmt 0 view .LVU2793
 8678 0480 B9F14C0F 		cmp	r9, #76
 8679 0484 08BF     		it	eq
 8680 0486 4FF03C09 		moveq	r9, #60
 8681              	.LVL956:
 8682              	.L830:
 960:src/display.c **** 	      q[2] = ltgteq;
 8683              		.loc 1 960 8 is_stmt 1 view .LVU2794
 8684 048a 4A49     		ldr	r1, .L951+20
 8685 048c FFF7FEFF 		bl	scopy
 8686              	.LVL957:
 961:src/display.c **** 
 8687              		.loc 1 961 8 view .LVU2795
ARM GAS  /tmp/ccdg5rgB.s 			page 264


 961:src/display.c **** 
 8688              		.loc 1 961 13 is_stmt 0 view .LVU2796
 8689 0490 84F80090 		strb	r9, [r4]
 963:src/display.c **** 		goto skip;
 8690              		.loc 1 963 8 is_stmt 1 view .LVU2797
 963:src/display.c **** 		goto skip;
 8691              		.loc 1 963 12 is_stmt 0 view .LVU2798
 8692 0494 0121     		movs	r1, #1
 8693 0496 3046     		mov	r0, r6
 8694 0498 FFF7FEFF 		bl	pixel_length
 8695              	.LVL958:
 963:src/display.c **** 		goto skip;
 8696              		.loc 1 963 11 view .LVU2799
 8697 049c 2C28     		cmp	r0, #44
 8698 049e 7FF75EAF 		ble	.L776
 966:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8699              		.loc 1 966 8 is_stmt 1 view .LVU2800
 966:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8700              		.loc 1 966 14 is_stmt 0 view .LVU2801
 8701 04a2 4FF00009 		mov	r9, #0
 8702              	.LVL959:
 966:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8703              		.loc 1 966 14 view .LVU2802
 8704 04a6 04F8039C 		strb	r9, [r4, #-3]
 967:src/display.c **** 		goto skip;
 8705              		.loc 1 967 8 is_stmt 1 view .LVU2803
 967:src/display.c **** 		goto skip;
 8706              		.loc 1 967 12 is_stmt 0 view .LVU2804
 8707 04aa 0121     		movs	r1, #1
 8708 04ac 3046     		mov	r0, r6
 8709 04ae FFF7FEFF 		bl	pixel_length
 8710              	.LVL960:
 967:src/display.c **** 		goto skip;
 8711              		.loc 1 967 11 view .LVU2805
 8712 04b2 2C28     		cmp	r0, #44
 8713 04b4 7FF753AF 		ble	.L776
 970:src/display.c **** 	    }
 8714              		.loc 1 970 8 is_stmt 1 view .LVU2806
 970:src/display.c **** 	    }
 8715              		.loc 1 970 39 is_stmt 0 view .LVU2807
 8716 04b8 A8EB0602 		sub	r2, r8, r6
 970:src/display.c **** 	    }
 8717              		.loc 1 970 8 view .LVU2808
 8718 04bc 4946     		mov	r1, r9
 8719 04be C2F12A02 		rsb	r2, r2, #42
 8720 04c2 4046     		mov	r0, r8
 8721 04c4 FFF7FEFF 		bl	xset
 8722              	.LVL961:
 8723              	.L823:
 970:src/display.c **** 	    }
 8724              		.loc 1 970 8 view .LVU2809
 8725              	.LBE464:
 973:src/display.c **** 	    int extra_pixels;
 8726              		.loc 1 973 4 is_stmt 1 view .LVU2810
 973:src/display.c **** 	    int extra_pixels;
 8727              		.loc 1 973 10 is_stmt 0 view .LVU2811
 8728 04c8 0C23     		movs	r3, #12
ARM GAS  /tmp/ccdg5rgB.s 			page 265


 8729 04ca 0293     		str	r3, [sp, #8]
 973:src/display.c **** 	    int extra_pixels;
 8730              		.loc 1 973 27 is_stmt 1 view .LVU2812
 8731 04cc 0FE0     		b	.L832
 8732              	.LVL962:
 8733              	.L948:
 8734              	.LBB465:
 981:src/display.c **** 
 8735              		.loc 1 981 6 is_stmt 0 view .LVU2813
 8736 04ce 029A     		ldr	r2, [sp, #8]
 8737 04d0 0A32     		adds	r2, r2, #10
 8738 04d2 FFF7FEFF 		bl	xset
 8739              	.LVL963:
 983:src/display.c **** 	  }
 8740              		.loc 1 983 6 is_stmt 1 view .LVU2814
 983:src/display.c **** 	  }
 8741              		.loc 1 983 30 is_stmt 0 view .LVU2815
 8742 04d6 B4F14802 		subs	r2, r4, #72
 983:src/display.c **** 	  }
 8743              		.loc 1 983 8 view .LVU2816
 8744 04da 029B     		ldr	r3, [sp, #8]
 983:src/display.c **** 	  }
 8745              		.loc 1 983 30 view .LVU2817
 8746 04dc 48BF     		it	mi
 8747 04de A4F14502 		submi	r2, r4, #69
 983:src/display.c **** 	  }
 8748              		.loc 1 983 8 view .LVU2818
 8749 04e2 A3EBA203 		sub	r3, r3, r2, asr #2
 8750              	.LBE465:
 973:src/display.c **** 	    int extra_pixels;
 8751              		.loc 1 973 4 view .LVU2819
 8752 04e6 012B     		cmp	r3, #1
 8753              	.LBB466:
 983:src/display.c **** 	  }
 8754              		.loc 1 983 8 view .LVU2820
 8755 04e8 0293     		str	r3, [sp, #8]
 8756              	.LBE466:
 973:src/display.c **** 	    int extra_pixels;
 8757              		.loc 1 973 27 is_stmt 1 view .LVU2821
 973:src/display.c **** 	    int extra_pixels;
 8758              		.loc 1 973 4 is_stmt 0 view .LVU2822
 8759 04ea 7FF738AF 		ble	.L776
 8760              	.LVL964:
 8761              	.L832:
 8762              	.LBB467:
 974:src/display.c **** 
 8763              		.loc 1 974 6 is_stmt 1 view .LVU2823
 976:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8764              		.loc 1 976 6 view .LVU2824
 8765 04ee 02AA     		add	r2, sp, #8
 8766 04f0 4146     		mov	r1, r8
 8767 04f2 3846     		mov	r0, r7
 8768 04f4 FFF7FEFF 		bl	set_x_dn
 8769              	.LVL965:
 977:src/display.c **** 	    if (extra_pixels <= 0)
 8770              		.loc 1 977 6 view .LVU2825
 977:src/display.c **** 	    if (extra_pixels <= 0)
ARM GAS  /tmp/ccdg5rgB.s 			page 266


 8771              		.loc 1 977 21 is_stmt 0 view .LVU2826
 8772 04f8 0121     		movs	r1, #1
 8773 04fa 3046     		mov	r0, r6
 8774 04fc FFF7FEFF 		bl	pixel_length
 8775              	.LVL966:
 981:src/display.c **** 
 8776              		.loc 1 981 6 is_stmt 1 view .LVU2827
 977:src/display.c **** 	    if (extra_pixels <= 0)
 8777              		.loc 1 977 21 is_stmt 0 view .LVU2828
 8778 0500 0446     		mov	r4, r0
 8779              	.LVL967:
 978:src/display.c **** 	      break;
 8780              		.loc 1 978 6 is_stmt 1 view .LVU2829
 978:src/display.c **** 	      break;
 8781              		.loc 1 978 9 is_stmt 0 view .LVU2830
 8782 0502 4B2C     		cmp	r4, #75
 981:src/display.c **** 
 8783              		.loc 1 981 6 view .LVU2831
 8784 0504 4FF00001 		mov	r1, #0
 8785 0508 4046     		mov	r0, r8
 8786              	.LVL968:
 978:src/display.c **** 	      break;
 8787              		.loc 1 978 9 view .LVU2832
 8788 050a E0DC     		bgt	.L948
 8789              	.LVL969:
 978:src/display.c **** 	      break;
 8790              		.loc 1 978 9 view .LVU2833
 8791              	.LBE467:
 8792 050c 27E7     		b	.L776
 8793              	.LVL970:
 8794              	.L932:
 978:src/display.c **** 	      break;
 8795              		.loc 1 978 9 view .LVU2834
 8796              	.LBE481:
 797:src/display.c **** 	  *p2++ = '\207';
 8797              		.loc 1 797 4 is_stmt 1 view .LVU2835
 798:src/display.c **** 	  *p2++ = '\007';	    
 8798              		.loc 1 798 4 view .LVU2836
 799:src/display.c **** 	}
 8799              		.loc 1 799 10 is_stmt 0 view .LVU2837
 8800 050e 88F80230 		strb	r3, [r8, #2]
 798:src/display.c **** 	  *p2++ = '\007';	    
 8801              		.loc 1 798 10 view .LVU2838
 8802 0512 88F80120 		strb	r2, [r8, #1]
 799:src/display.c **** 	}
 8803              		.loc 1 799 4 is_stmt 1 view .LVU2839
 799:src/display.c **** 	}
 8804              		.loc 1 799 7 is_stmt 0 view .LVU2840
 8805 0516 08F10308 		add	r8, r8, #3
 8806              	.LVL971:
 799:src/display.c **** 	}
 8807              		.loc 1 799 7 view .LVU2841
 8808 051a B3E5     		b	.L790
 8809              	.LVL972:
 8810              	.L848:
 831:src/display.c **** #endif
 8811              		.loc 1 831 19 view .LVU2842
ARM GAS  /tmp/ccdg5rgB.s 			page 267


 8812 051c 2649     		ldr	r1, .L951+24
 8813 051e CBE5     		b	.L792
 8814              	.LVL973:
 8815              	.L801:
 861:src/display.c **** 	  p = scopy(p, q);
 8816              		.loc 1 861 4 is_stmt 1 view .LVU2843
 862:src/display.c **** 	}
 8817              		.loc 1 862 4 view .LVU2844
 862:src/display.c **** 	}
 8818              		.loc 1 862 8 is_stmt 0 view .LVU2845
 8819 0520 2649     		ldr	r1, .L951+28
 8820 0522 3046     		mov	r0, r6
 8821 0524 FFF7FEFF 		bl	scopy
 8822              	.LVL974:
 8823 0528 8046     		mov	r8, r0
 8824              	.LVL975:
 862:src/display.c **** 	}
 8825              		.loc 1 862 6 view .LVU2846
 8826 052a 33E6     		b	.L804
 8827              	.LVL976:
 8828              	.L938:
 883:src/display.c **** 	    p = scopy(p, q);
 8829              		.loc 1 883 6 is_stmt 1 view .LVU2847
 884:src/display.c **** 	    //	    goto no_copy;
 8830              		.loc 1 884 6 view .LVU2848
 884:src/display.c **** 	    //	    goto no_copy;
 8831              		.loc 1 884 10 is_stmt 0 view .LVU2849
 8832 052c 4046     		mov	r0, r8
 8833 052e 2449     		ldr	r1, .L951+32
 8834 0530 FFF7FEFF 		bl	scopy
 8835              	.LVL977:
 8836 0534 8046     		mov	r8, r0
 8837              	.LVL978:
 884:src/display.c **** 	    //	    goto no_copy;
 8838              		.loc 1 884 10 view .LVU2850
 8839 0536 32E6     		b	.L806
 8840              	.LVL979:
 8841              	.L941:
 8842              	.LBB482:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8843              		.loc 1 907 77 discriminator 2 view .LVU2851
 8844 0538 FFF7FEFF 		bl	stack_size
 8845              	.LVL980:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8846              		.loc 1 907 64 discriminator 2 view .LVU2852
 8847 053c D9F80010 		ldr	r1, [r9]
 8848 0540 6330     		adds	r0, r0, #99
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8849              		.loc 1 907 48 discriminator 2 view .LVU2853
 8850 0542 8842     		cmp	r0, r1
 8851 0544 FFF647AE 		blt	.L817
 908:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8852              		.loc 1 908 13 view .LVU2854
 8853 0548 FFF7FEFF 		bl	get_cmdline
 8854              	.LVL981:
 908:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8855              		.loc 1 908 9 view .LVU2855
ARM GAS  /tmp/ccdg5rgB.s 			page 268


 8856 054c 0028     		cmp	r0, #0
 8857 054e 74D0     		beq	.L819
 908:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8858              		.loc 1 908 27 discriminator 1 view .LVU2856
 8859 0550 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8860 0552 002B     		cmp	r3, #0
 8861 0554 71D1     		bne	.L819
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8862              		.loc 1 909 9 view .LVU2857
 8863 0556 17B1     		cbz	r7, .L820
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8864              		.loc 1 909 30 discriminator 1 view .LVU2858
 8865 0558 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8866              		.loc 1 909 12 discriminator 1 view .LVU2859
 8867 055a 5F06     		lsls	r7, r3, #25
 8868              	.LVL982:
 909:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8869              		.loc 1 909 12 discriminator 1 view .LVU2860
 8870 055c 6DD5     		bpl	.L819
 8871              	.L820:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8872              		.loc 1 907 6 discriminator 5 view .LVU2861
 8873 055e D9F80010 		ldr	r1, [r9]
 8874 0562 39E6     		b	.L821
 8875              	.LVL983:
 8876              	.L935:
 907:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8877              		.loc 1 907 6 discriminator 5 view .LVU2862
 8878              	.LBE482:
 732:src/display.c **** 	  *p2 = '\015';
 8879              		.loc 1 732 4 is_stmt 1 view .LVU2863
 732:src/display.c **** 	  *p2 = '\015';
 8880              		.loc 1 732 10 is_stmt 0 view .LVU2864
 8881 0564 2022     		movs	r2, #32
 733:src/display.c **** 	  goto skip;
 8882              		.loc 1 733 8 view .LVU2865
 8883 0566 0D23     		movs	r3, #13
 732:src/display.c **** 	  *p2 = '\015';
 8884              		.loc 1 732 10 view .LVU2866
 8885 0568 0270     		strb	r2, [r0]
 733:src/display.c **** 	  goto skip;
 8886              		.loc 1 733 4 is_stmt 1 view .LVU2867
 733:src/display.c **** 	  goto skip;
 8887              		.loc 1 733 8 is_stmt 0 view .LVU2868
 8888 056a 4370     		strb	r3, [r0, #1]
 734:src/display.c **** 	}
 8889              		.loc 1 734 4 is_stmt 1 view .LVU2869
 8890 056c F7E6     		b	.L776
 8891              	.LVL984:
 8892              	.L946:
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8893              		.loc 1 851 4 view .LVU2870
 852:src/display.c **** 	  }
 8894              		.loc 1 852 6 view .LVU2871
 855:src/display.c **** 	  }
 8895              		.loc 1 855 6 view .LVU2872
ARM GAS  /tmp/ccdg5rgB.s 			page 269


 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8896              		.loc 1 851 7 is_stmt 0 view .LVU2873
 8897 056e 1C07     		lsls	r4, r3, #28
 852:src/display.c **** 	  }
 8898              		.loc 1 852 33 view .LVU2874
 8899 0570 47BF     		ittee	mi
 8900 0572 144B     		ldrmi	r3, .L951+36
 8901 0574 1449     		ldrmi	r1, .L951+40
 855:src/display.c **** 	  }
 8902              		.loc 1 855 31 view .LVU2875
 8903 0576 154B     		ldrpl	r3, .L951+44
 8904 0578 1549     		ldrpl	r1, .L951+48
 8905 057a 0028     		cmp	r0, #0
 8906 057c 18BF     		it	ne
 8907 057e 1946     		movne	r1, r3
 8908              	.LVL985:
 857:src/display.c **** 	  goto skip;
 8909              		.loc 1 857 4 is_stmt 1 view .LVU2876
 8910 0580 3046     		mov	r0, r6
 8911 0582 FFF7FEFF 		bl	scopy
 8912              	.LVL986:
 858:src/display.c **** 	}
 8913              		.loc 1 858 4 view .LVU2877
 8914 0586 EAE6     		b	.L776
 8915              	.LVL987:
 8916              	.L779:
 718:src/display.c **** 	    *p2++ = shift_char;
 8917              		.loc 1 718 30 is_stmt 0 discriminator 1 view .LVU2878
 8918 0588 FFF7FEFF 		bl	is_dblmode
 8919              	.LVL988:
 718:src/display.c **** 	    *p2++ = shift_char;
 8920              		.loc 1 718 26 discriminator 1 view .LVU2879
 8921 058c 0028     		cmp	r0, #0
 8922 058e 3FF4B8AD 		beq	.L781
 723:src/display.c **** 	  }
 8923              		.loc 1 723 6 is_stmt 1 view .LVU2880
 8924              	.LVL989:
 723:src/display.c **** 	  }
 8925              		.loc 1 723 12 is_stmt 0 view .LVU2881
 8926 0592 4423     		movs	r3, #68
 8927 0594 8DF85C30 		strb	r3, [sp, #92]
 723:src/display.c **** 	  }
 8928              		.loc 1 723 9 view .LVU2882
 8929 0598 0DF15D00 		add	r0, sp, #93
 8930              	.LVL990:
 723:src/display.c **** 	  }
 8931              		.loc 1 723 9 view .LVU2883
 8932 059c B8E5     		b	.L780
 8933              	.L952:
 8934 059e 00BF     		.align	2
 8935              	.L951:
 8936 05a0 00000000 		.word	.LANCHOR16
 8937 05a4 00000000 		.word	.LC2
 8938 05a8 00000000 		.word	StateWhileOn
 8939 05ac 00000000 		.word	.LANCHOR18
 8940 05b0 00000000 		.word	RectPolConv
 8941 05b4 68000000 		.word	.LC21
ARM GAS  /tmp/ccdg5rgB.s 			page 270


 8942 05b8 14000000 		.word	.LC7
 8943 05bc 60000000 		.word	.LC18
 8944 05c0 64000000 		.word	.LC19
 8945 05c4 2C000000 		.word	.LC11
 8946 05c8 3C000000 		.word	.LC13
 8947 05cc 34000000 		.word	.LC12
 8948 05d0 44000000 		.word	.LC14
 8949 05d4 00000000 		.word	IntMaxWindow
 8950 05d8 00000000 		.word	ShowRegister
 8951              	.L936:
 737:src/display.c **** 	  if (State2.wascomplex) {
 8952              		.loc 1 737 28 discriminator 1 view .LVU2884
 8953 05dc 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 737:src/display.c **** 	  if (State2.wascomplex) {
 8954              		.loc 1 737 24 discriminator 1 view .LVU2885
 8955 05de 13F0C00F 		tst	r3, #192
 8956 05e2 2DD1     		bne	.L843
 737:src/display.c **** 	  if (State2.wascomplex) {
 8957              		.loc 1 737 60 discriminator 2 view .LVU2886
 8958 05e4 1A4B     		ldr	r3, .L953
 8959 05e6 1B68     		ldr	r3, [r3]
 737:src/display.c **** 	  if (State2.wascomplex) {
 8960              		.loc 1 737 46 discriminator 2 view .LVU2887
 8961 05e8 002B     		cmp	r3, #0
 8962 05ea 3FF49DAD 		beq	.L784
 738:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8963              		.loc 1 738 4 is_stmt 1 view .LVU2888
 741:src/display.c **** 	    if (RectPolConv == 1) {
 8964              		.loc 1 741 9 view .LVU2889
 742:src/display.c **** 	      q = "\007\306<";
 8965              		.loc 1 742 6 view .LVU2890
 746:src/display.c **** 	    }
 8966              		.loc 1 746 10 is_stmt 0 view .LVU2891
 8967 05ee 1949     		ldr	r1, .L953+4
 8968 05f0 194A     		ldr	r2, .L953+8
 8969 05f2 012B     		cmp	r3, #1
 8970 05f4 18BF     		it	ne
 8971 05f6 1146     		movne	r1, r2
 8972              	.L785:
 8973              	.LVL991:
 749:src/display.c **** 
 8974              		.loc 1 749 4 is_stmt 1 view .LVU2892
 749:src/display.c **** 
 8975              		.loc 1 749 8 is_stmt 0 view .LVU2893
 8976 05f8 3046     		mov	r0, r6
 8977              	.LVL992:
 749:src/display.c **** 
 8978              		.loc 1 749 8 view .LVU2894
 8979 05fa FFF7FEFF 		bl	scopy
 8980              	.LVL993:
 749:src/display.c **** 
 8981              		.loc 1 749 8 view .LVU2895
 8982 05fe 8046     		mov	r8, r0
 8983              	.LVL994:
 751:src/display.c **** 	}
 8984              		.loc 1 751 4 is_stmt 1 view .LVU2896
 8985 0600 D1E5     		b	.L766
ARM GAS  /tmp/ccdg5rgB.s 			page 271


 8986              	.LVL995:
 8987              	.L947:
 8988              	.LBB483:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8989              		.loc 1 897 85 is_stmt 0 discriminator 2 view .LVU2897
 8990 0602 FFF7FEFF 		bl	stack_size
 8991              	.LVL996:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8992              		.loc 1 897 72 discriminator 2 view .LVU2898
 8993 0606 D9F80030 		ldr	r3, [r9]
 8994 060a 6330     		adds	r0, r0, #99
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8995              		.loc 1 897 56 discriminator 2 view .LVU2899
 8996 060c 9842     		cmp	r0, r3
 8997 060e FFF6F3AE 		blt	.L809
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8998              		.loc 1 897 101 discriminator 4 view .LVU2900
 8999 0612 FFF7FEFF 		bl	get_cmdline
 9000              	.LVL997:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 9001              		.loc 1 897 98 discriminator 4 view .LVU2901
 9002 0616 18B1     		cbz	r0, .L812
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 9003              		.loc 1 898 7 view .LVU2902
 9004 0618 A7B1     		cbz	r7, .L811
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 9005              		.loc 1 898 28 discriminator 1 view .LVU2903
 9006 061a EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 9007              		.loc 1 898 10 discriminator 1 view .LVU2904
 9008 061c 5906     		lsls	r1, r3, #25
 9009 061e 11D4     		bmi	.L811
 9010              	.L812:
 9011 0620 D9F80030 		ldr	r3, [r9]
 9012 0624 E8E6     		b	.L809
 9013              	.LVL998:
 9014              	.L845:
 898:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 9015              		.loc 1 898 10 discriminator 1 view .LVU2905
 9016              	.LBE483:
 760:src/display.c **** #endif
 9017              		.loc 1 760 19 view .LVU2906
 9018 0626 0D49     		ldr	r1, .L953+12
 9019 0628 8CE5     		b	.L786
 9020              	.LVL999:
 9021              	.L926:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 9022              		.loc 1 691 4 is_stmt 1 view .LVU2907
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 9023              		.loc 1 691 11 is_stmt 0 view .LVU2908
 9024 062a 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 9025              		.loc 1 691 27 is_stmt 1 view .LVU2909
 9026 062c 86E6     		b	.L838
 9027              	.LVL1000:
 9028              	.L940:
 9029              	.LBB484:
ARM GAS  /tmp/ccdg5rgB.s 			page 272


 904:src/display.c **** 	  }
 9030              		.loc 1 904 6 view .LVU2910
 9031 062e 03AF     		add	r7, sp, #12
 9032              	.LVL1001:
 904:src/display.c **** 	  }
 9033              		.loc 1 904 6 is_stmt 0 view .LVU2911
 9034 0630 3846     		mov	r0, r7
 9035 0632 6F21     		movs	r1, #111
 9036 0634 FFF7FEFF 		bl	getRegister
 9037              	.LVL1002:
 9038 0638 D2E5     		b	.L816
 9039              	.L819:
 9040 063a D9F80010 		ldr	r1, [r9]
 9041 063e CAE5     		b	.L817
 9042              	.LVL1003:
 9043              	.L843:
 904:src/display.c **** 	  }
 9044              		.loc 1 904 6 view .LVU2912
 9045              	.LBE484:
 739:src/display.c **** 	  }
 9046              		.loc 1 739 8 view .LVU2913
 9047 0640 0749     		ldr	r1, .L953+16
 9048 0642 D9E7     		b	.L785
 9049              	.LVL1004:
 9050              	.L811:
 9051              	.LBB485:
 897:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 9052              		.loc 1 897 6 discriminator 7 view .LVU2914
 9053 0644 D9F80000 		ldr	r0, [r9]
 9054 0648 D7E6     		b	.L813
 9055              	.LVL1005:
 9056              	.L853:
 9057              	.LBB468:
 957:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 9058              		.loc 1 957 25 view .LVU2915
 9059 064a 4FF03E09 		mov	r9, #62
 9060              	.LVL1006:
 957:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 9061              		.loc 1 957 25 view .LVU2916
 9062 064e 1CE7     		b	.L830
 9063              	.L954:
 9064              		.align	2
 9065              	.L953:
 9066 0650 00000000 		.word	RectPolConv
 9067 0654 04000000 		.word	.LC3
 9068 0658 0C000000 		.word	.LC5
 9069 065c 14000000 		.word	.LC7
 9070 0660 08000000 		.word	.LC4
 9071              	.LBE468:
 9072              	.LBE485:
 9073              		.cfi_endproc
 9074              	.LFE16:
 9076              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 9077              		.align	2
 9078              	.LC22:
 9079 0000 0D00     		.ascii	"\015\000"
 9080 0002 0000     		.align	2
ARM GAS  /tmp/ccdg5rgB.s 			page 273


 9081              	.LC23:
 9082 0004 060600   		.ascii	"\006\006\000"
 9083 0007 00       		.align	2
 9084              	.LC25:
 9085 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 9085      492C2057 
 9085      77414C74 
 9085      4500
 9086 0016 0000     		.align	2
 9087              	.LC26:
 9088 0018 20502041 		.ascii	" P A U L I,  W A L T E R \000"
 9088      2055204C 
 9088      20492C20 
 9088      20572041 
 9088      204C2054 
 9089 0032 0000     		.align	2
 9090              	.LC27:
 9091 0034 2000     		.ascii	" \000"
 9092 0036 0000     		.align	2
 9093              	.LC28:
 9094 0038 48595000 		.ascii	"HYP\000"
 9095              		.align	2
 9096              	.LC29:
 9097 003c 7F060600 		.ascii	"\177\006\006\000"
 9098              		.align	2
 9099              	.LC32:
 9100 0040 3020746F 		.ascii	"0 to 255\000"
 9100      20323535 
 9100      00
 9101 0049 000000   		.align	2
 9102              	.LC33:
 9103 004c 46726565 		.ascii	"Free:\000"
 9103      3A00
 9104 0052 0000     		.align	2
 9105              	.LC34:
 9106 0054 202C2046 		.ascii	" , FL. \000"
 9106      4C2E2000 
 9107              		.align	2
 9108              	.LC35:
 9109 005c 52656773 		.ascii	"Regs:\000"
 9109      3A00
 9110 0062 0000     		.align	2
 9111              	.LC36:
 9112 0064 20910606 		.ascii	" \221\006\006+\000"
 9112      2B00
 9113 006a 0000     		.align	2
 9114              	.LC37:
 9115 006c 202C204C 		.ascii	" , Loc. \000"
 9115      6F632E20 
 9115      00
 9116 0075 000000   		.align	2
 9117              	.LC38:
 9118 0078 464C2000 		.ascii	"FL \000"
 9119              		.align	2
 9120              	.LC39:
 9121 007c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 9121      06413A44 
ARM GAS  /tmp/ccdg5rgB.s 			page 274


 9121      064C494A 
 9121      4B00
 9122 008a 0000     		.align	2
 9123              	.LC40:
 9124 008c 464C2E30 		.ascii	"FL.00-.15\000"
 9124      302D2E31 
 9124      3500
 9125 0096 0000     		.align	2
 9126              	.LC41:
 9127 0098 43414C4C 		.ascii	"CALLS\000"
 9127      5300
 9128 009e 0000     		.align	2
 9129              	.LC42:
 9130 00a0 52656720 		.ascii	"Reg \000"
 9130      00
 9131 00a5 000000   		.align	2
 9132              	.LC43:
 9133 00a8 00       		.ascii	"\000"
 9134 00a9 000000   		.align	2
 9135              	.LC44:
 9136 00ac 202D2D2D 		.ascii	" ---\000"
 9136      00
 9137 00b1 000000   		.align	2
 9138              	.LC31:
 9139 00b4 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 9139      093E0A00 
 9140              		.align	2
 9141              	.LC30:
 9142 00bc 58595A54 		.ascii	"XYZTABCDLIJK\000"
 9142      41424344 
 9142      4C494A4B 
 9142      00
 9143              		.section	.text.display,"ax",%progbits
 9144              		.align	1
 9145              		.p2align 2,,3
 9146              		.global	display
 9147              		.syntax unified
 9148              		.thumb
 9149              		.thumb_func
 9150              		.fpu fpv4-sp-d16
 9152              	display:
 9153              	.LFB34:
2679:src/display.c **** 	int i, j;
 9154              		.loc 1 2679 26 is_stmt 1 view -0
 9155              		.cfi_startproc
 9156              		@ args = 0, pretend = 0, frame = 160
 9157              		@ frame_needed = 0, uses_anonymous_args = 0
2680:src/display.c **** 	char buf[40], *bp = buf;
 9158              		.loc 1 2680 2 view .LVU2918
2681:src/display.c **** 	const char *p;
 9159              		.loc 1 2681 2 view .LVU2919
2679:src/display.c **** 	int i, j;
 9160              		.loc 1 2679 26 is_stmt 0 view .LVU2920
 9161 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9162              		.cfi_def_cfa_offset 36
 9163              		.cfi_offset 4, -36
 9164              		.cfi_offset 5, -32
ARM GAS  /tmp/ccdg5rgB.s 			page 275


 9165              		.cfi_offset 6, -28
 9166              		.cfi_offset 7, -24
 9167              		.cfi_offset 8, -20
 9168              		.cfi_offset 9, -16
 9169              		.cfi_offset 10, -12
 9170              		.cfi_offset 11, -8
 9171              		.cfi_offset 14, -4
2684:src/display.c **** 	int skip = 0;
 9172              		.loc 1 2684 24 view .LVU2921
 9173 0004 C34C     		ldr	r4, .L1296
2689:src/display.c **** 	if (State2.disp_freeze) {
 9174              		.loc 1 2689 16 view .LVU2922
 9175 0006 DFF84093 		ldr	r9, .L1296+52
2684:src/display.c **** 	int skip = 0;
 9176              		.loc 1 2684 24 view .LVU2923
 9177 000a 94F80EA0 		ldrb	r10, [r4, #14]	@ zero_extendqisi2
2679:src/display.c **** 	int i, j;
 9178              		.loc 1 2679 26 view .LVU2924
 9179 000e A9B0     		sub	sp, sp, #164
 9180              		.cfi_def_cfa_offset 200
 9181              	.LVL1007:
2682:src/display.c **** 	int annuc = 0;
 9182              		.loc 1 2682 2 is_stmt 1 view .LVU2925
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9183              		.loc 1 2683 2 view .LVU2926
2684:src/display.c **** 	int skip = 0;
 9184              		.loc 1 2684 2 view .LVU2927
2685:src/display.c **** 	int x_disp = 0;
 9185              		.loc 1 2685 2 view .LVU2928
2686:src/display.c **** 	const int shift = cur_shift();
 9186              		.loc 1 2686 2 view .LVU2929
2687:src/display.c **** 
 9187              		.loc 1 2687 2 view .LVU2930
2687:src/display.c **** 
 9188              		.loc 1 2687 20 is_stmt 0 view .LVU2931
 9189 0010 FFF7FEFF 		bl	cur_shift
 9190              	.LVL1008:
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9191              		.loc 1 2690 6 view .LVU2932
 9192 0014 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2689:src/display.c **** 	if (State2.disp_freeze) {
 9193              		.loc 1 2689 16 view .LVU2933
 9194 0016 0022     		movs	r2, #0
 9195              	.LVL1009:
2689:src/display.c **** 	if (State2.disp_freeze) {
 9196              		.loc 1 2689 2 is_stmt 1 view .LVU2934
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9197              		.loc 1 2690 5 is_stmt 0 view .LVU2935
 9198 0018 13F01007 		ands	r7, r3, #16
2689:src/display.c **** 	if (State2.disp_freeze) {
 9199              		.loc 1 2689 16 view .LVU2936
 9200 001c A9F80020 		strh	r2, [r9]	@ movhi
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9201              		.loc 1 2690 2 is_stmt 1 view .LVU2937
2690:src/display.c **** 	  State2.disp_freeze = 0;
 9202              		.loc 1 2690 5 is_stmt 0 view .LVU2938
 9203 0020 40F0FC80 		bne	.L1256
ARM GAS  /tmp/ccdg5rgB.s 			page 276


2700:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9204              		.loc 1 2700 2 is_stmt 1 view .LVU2939
2700:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9205              		.loc 1 2700 6 is_stmt 0 view .LVU2940
 9206 0024 DFF82483 		ldr	r8, .L1296+56
 9207 0028 D8F80060 		ldr	r6, [r8]
2700:src/display.c **** #if defined(QTGUI) || defined(IOS)
 9208              		.loc 1 2700 5 view .LVU2941
 9209 002c 002E     		cmp	r6, #0
 9210 002e 40F08280 		bne	.L1257
2719:src/display.c **** #  endif
 9211              		.loc 1 2719 2 is_stmt 1 view .LVU2942
2719:src/display.c **** #  endif
 9212              		.loc 1 2719 33 is_stmt 0 view .LVU2943
 9213 0032 B94B     		ldr	r3, .L1296+4
 9214 0034 1B68     		ldr	r3, [r3]
 9215 0036 0546     		mov	r5, r0
 9216 0038 93F8EAB7 		ldrb	fp, [r3, #2026]	@ zero_extendqisi2
2725:src/display.c **** 
 9217              		.loc 1 2725 2 view .LVU2944
 9218 003c FFF7FEFF 		bl	reset_disp
 9219              	.LVL1010:
2728:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9220              		.loc 1 2728 2 view .LVU2945
 9221 0040 3146     		mov	r1, r6
 9222 0042 1EA8     		add	r0, sp, #120
 9223              	.LVL1011:
2728:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9224              		.loc 1 2728 2 view .LVU2946
 9225 0044 2822     		movs	r2, #40
 9226 0046 FFF7FEFF 		bl	xset
 9227              	.LVL1012:
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9228              		.loc 1 2734 6 view .LVU2947
 9229 004a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9230              		.loc 1 2734 5 view .LVU2948
 9231 004c D906     		lsls	r1, r3, #27
2719:src/display.c **** #  endif
 9232              		.loc 1 2719 12 view .LVU2949
 9233 004e CBF3800B 		ubfx	fp, fp, #2, #1
 9234              	.LVL1013:
2725:src/display.c **** 
 9235              		.loc 1 2725 2 is_stmt 1 view .LVU2950
2728:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 9236              		.loc 1 2728 2 view .LVU2951
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9237              		.loc 1 2734 2 view .LVU2952
2734:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 9238              		.loc 1 2734 5 is_stmt 0 view .LVU2953
 9239 0052 00F19381 		bmi	.L1258
2746:src/display.c **** 	  if (yreg_enabled) {
 9240              		.loc 1 2746 9 is_stmt 1 view .LVU2954
2746:src/display.c **** 	  if (yreg_enabled) {
 9241              		.loc 1 2746 13 is_stmt 0 view .LVU2955
 9242 0056 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2746:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/ccdg5rgB.s 			page 277


 9243              		.loc 1 2746 12 view .LVU2956
 9244 0058 5207     		lsls	r2, r2, #29
 9245 005a 00F0E980 		beq	.L963
2747:src/display.c **** 	    set_status_top(S_SURE);
 9246              		.loc 1 2747 4 is_stmt 1 view .LVU2957
2747:src/display.c **** 	    set_status_top(S_SURE);
 9247              		.loc 1 2747 7 is_stmt 0 view .LVU2958
 9248 005e BBF1000F 		cmp	fp, #0
 9249 0062 00F0C081 		beq	.L964
2748:src/display.c **** 	    no_status_top = 1;
 9250              		.loc 1 2748 6 is_stmt 1 view .LVU2959
 9251              	.LVL1014:
 9252              	.LBB546:
 9253              	.LBI546:
3639:src/display.c **** 	if (no_status_top) return;
 9254              		.loc 1 3639 19 view .LVU2960
 9255              	.LBB547:
3640:src/display.c **** 	if (State2.runmode) {
 9256              		.loc 1 3640 2 view .LVU2961
3640:src/display.c **** 	if (State2.runmode) {
 9257              		.loc 1 3640 5 is_stmt 0 view .LVU2962
 9258 0066 B9F90030 		ldrsh	r3, [r9]
 9259 006a 13B9     		cbnz	r3, .L966
 9260 006c AB48     		ldr	r0, .L1296+8
 9261 006e FFF7FEFF 		bl	set_status_top.part.0
 9262              	.LVL1015:
 9263              	.L966:
3640:src/display.c **** 	if (State2.runmode) {
 9264              		.loc 1 3640 5 view .LVU2963
 9265              	.LBE547:
 9266              	.LBE546:
2749:src/display.c **** 	    annuc = 1;
 9267              		.loc 1 2749 6 is_stmt 1 view .LVU2964
2749:src/display.c **** 	    annuc = 1;
 9268              		.loc 1 2749 20 is_stmt 0 view .LVU2965
 9269 0072 0126     		movs	r6, #1
 9270 0074 A9F80060 		strh	r6, [r9]	@ movhi
2750:src/display.c **** 	  }
 9271              		.loc 1 2750 6 is_stmt 1 view .LVU2966
 9272              	.LVL1016:
2973:src/display.c ****       nostk:
 9273              		.loc 1 2973 2 view .LVU2967
 9274 0078 FFF7FEFF 		bl	show_stack
 9275              	.LVL1017:
2975:src/display.c **** 	if (!skip) {
 9276              		.loc 1 2975 2 view .LVU2968
 9277 007c A84B     		ldr	r3, .L1296+12
 9278 007e A94F     		ldr	r7, .L1296+16
 9279 0080 0093     		str	r3, [sp]
 9280 0082 FFF7FEFF 		bl	show_flags
 9281              	.LVL1018:
2976:src/display.c **** 	  if (State2.runmode) {
 9282              		.loc 1 2976 2 view .LVU2969
 9283              	.L967:
2977:src/display.c **** 	  only_update_x:
 9284              		.loc 1 2977 4 view .LVU2970
2977:src/display.c **** 	  only_update_x:
ARM GAS  /tmp/ccdg5rgB.s 			page 278


 9285              		.loc 1 2977 8 is_stmt 0 view .LVU2971
 9286 0086 A57D     		ldrb	r5, [r4, #22]	@ zero_extendqisi2
2977:src/display.c **** 	  only_update_x:
 9287              		.loc 1 2977 7 view .LVU2972
 9288 0088 15F04005 		ands	r5, r5, #64
 9289 008c 5FD1     		bne	.L960
 9290              	.LBB548:
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9291              		.loc 1 3017 6 is_stmt 1 view .LVU2973
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9292              		.loc 1 3017 24 is_stmt 0 view .LVU2974
 9293 008e A24B     		ldr	r3, .L1296+4
3021:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9294              		.loc 1 3021 6 view .LVU2975
 9295 0090 DFF8BCA2 		ldr	r10, .L1296+60
 9296              	.LVL1019:
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9297              		.loc 1 3017 24 view .LVU2976
 9298 0094 1B68     		ldr	r3, [r3]
3017:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9299              		.loc 1 3017 19 view .LVU2977
 9300 0096 B3F8E0B7 		ldrh	fp, [r3, #2016]
 9301              	.LVL1020:
3018:src/display.c **** 	    const int n = nLIB(pc);
 9302              		.loc 1 3018 6 is_stmt 1 view .LVU2978
3018:src/display.c **** 	    const int n = nLIB(pc);
 9303              		.loc 1 3018 25 is_stmt 0 view .LVU2979
 9304 009a 5846     		mov	r0, fp
 9305 009c FFF7FEFF 		bl	user_pc
 9306              	.LVL1021:
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9307              		.loc 1 3020 6 view .LVU2980
 9308 00a0 2822     		movs	r2, #40
 9309 00a2 2946     		mov	r1, r5
3018:src/display.c **** 	    const int n = nLIB(pc);
 9310              		.loc 1 3018 25 view .LVU2981
 9311 00a4 8046     		mov	r8, r0
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9312              		.loc 1 3020 6 view .LVU2982
 9313 00a6 1EA8     		add	r0, sp, #120
 9314              	.LVL1022:
3019:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9315              		.loc 1 3019 6 is_stmt 1 view .LVU2983
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9316              		.loc 1 3020 6 is_stmt 0 view .LVU2984
 9317 00a8 FFF7FEFF 		bl	xset
 9318              	.LVL1023:
3019:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9319              		.loc 1 3019 20 view .LVU2985
 9320 00ac 4FEA9B3B 		lsr	fp, fp, #14
 9321              	.LVL1024:
3020:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9322              		.loc 1 3020 6 is_stmt 1 view .LVU2986
3021:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9323              		.loc 1 3021 6 view .LVU2987
 9324 00b0 DAF80000 		ldr	r0, [r10]
 9325 00b4 2A46     		mov	r2, r5
ARM GAS  /tmp/ccdg5rgB.s 			page 279


 9326 00b6 0121     		movs	r1, #1
 9327 00b8 FFF7FEFF 		bl	set_exp
 9328              	.LVL1025:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9329              		.loc 1 3022 6 view .LVU2988
 9330 00bc BBF1000F 		cmp	fp, #0
 9331 00c0 40F0E881 		bne	.L1259
 9332 00c4 9849     		ldr	r1, .L1296+20
 9333 00c6 1EA8     		add	r0, sp, #120
 9334 00c8 FFF7FEFF 		bl	scopy_spc
 9335              	.LVL1026:
 9336 00cc 0322     		movs	r2, #3
 9337 00ce 4146     		mov	r1, r8
 9338 00d0 FFF7FEFF 		bl	num_arg_0
 9339              	.LVL1027:
3024:src/display.c **** #ifndef REALBUILD
 9340              		.loc 1 3024 6 view .LVU2989
 9341 00d4 0921     		movs	r1, #9
 9342 00d6 1EA8     		add	r0, sp, #120
 9343 00d8 FFF7FEFF 		bl	set_digits_string
 9344              	.LVL1028:
3026:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9345              		.loc 1 3026 6 view .LVU2990
 9346 00dc 5946     		mov	r1, fp
 9347 00de 2822     		movs	r2, #40
 9348 00e0 1EA8     		add	r0, sp, #120
 9349 00e2 FFF7FEFF 		bl	xset
 9350              	.LVL1029:
3027:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 9351              		.loc 1 3027 6 view .LVU2991
 9352 00e6 5A46     		mov	r2, fp
 9353 00e8 0121     		movs	r1, #1
 9354 00ea DAF80000 		ldr	r0, [r10]
 9355 00ee FFF7FEFF 		bl	set_exp
 9356              	.LVL1030:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9357              		.loc 1 3028 6 view .LVU2992
 9358 00f2 8E49     		ldr	r1, .L1296+24
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9359              		.loc 1 3022 6 is_stmt 0 view .LVU2993
 9360 00f4 4FF0030B 		mov	fp, #3
 9361              	.LVL1031:
 9362              	.L1105:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9363              		.loc 1 3028 6 discriminator 4 view .LVU2994
 9364 00f8 1EA8     		add	r0, sp, #120
 9365 00fa FFF7FEFF 		bl	scopy_spc
 9366              	.LVL1032:
 9367 00fe 4146     		mov	r1, r8
 9368 0100 5A46     		mov	r2, fp
 9369 0102 FFF7FEFF 		bl	num_arg_0
 9370              	.LVL1033:
 9371              	.LBB549:
3031:src/display.c **** 	      char *l=LastDisplayedNumber;
 9372              		.loc 1 3031 8 is_stmt 1 discriminator 4 view .LVU2995
3032:src/display.c **** 	      *l++=' ';
 9373              		.loc 1 3032 8 discriminator 4 view .LVU2996
ARM GAS  /tmp/ccdg5rgB.s 			page 280


3033:src/display.c **** 	      while(*b) {
 9374              		.loc 1 3033 8 discriminator 4 view .LVU2997
3033:src/display.c **** 	      while(*b) {
 9375              		.loc 1 3033 12 is_stmt 0 discriminator 4 view .LVU2998
 9376 0106 8A4B     		ldr	r3, .L1296+28
3034:src/display.c **** 		*l++=*b++;
 9377              		.loc 1 3034 14 discriminator 4 view .LVU2999
 9378 0108 9DF87810 		ldrb	r1, [sp, #120]	@ zero_extendqisi2
3033:src/display.c **** 	      while(*b) {
 9379              		.loc 1 3033 12 discriminator 4 view .LVU3000
 9380 010c 2025     		movs	r5, #32
 9381 010e 1D70     		strb	r5, [r3]
3034:src/display.c **** 		*l++=*b++;
 9382              		.loc 1 3034 8 is_stmt 1 discriminator 4 view .LVU3001
3034:src/display.c **** 		*l++=*b++;
 9383              		.loc 1 3034 13 discriminator 4 view .LVU3002
 9384 0110 0029     		cmp	r1, #0
 9385 0112 00F02C83 		beq	.L1120
 9386 0116 0333     		adds	r3, r3, #3
 9387 0118 1EA8     		add	r0, sp, #120
 9388              	.LVL1034:
 9389              	.L1098:
3035:src/display.c **** 		*l++=' ';
 9390              		.loc 1 3035 3 view .LVU3003
3035:src/display.c **** 		*l++=' ';
 9391              		.loc 1 3035 7 is_stmt 0 view .LVU3004
 9392 011a 03F8021C 		strb	r1, [r3, #-2]
3036:src/display.c **** 	      }
 9393              		.loc 1 3036 3 is_stmt 1 view .LVU3005
 9394              	.LVL1035:
3034:src/display.c **** 		*l++=*b++;
 9395              		.loc 1 3034 14 is_stmt 0 view .LVU3006
 9396 011e 10F8011F 		ldrb	r1, [r0, #1]!	@ zero_extendqisi2
 9397              	.LVL1036:
3036:src/display.c **** 	      }
 9398              		.loc 1 3036 7 view .LVU3007
 9399 0122 03F8015C 		strb	r5, [r3, #-1]
3034:src/display.c **** 		*l++=*b++;
 9400              		.loc 1 3034 13 is_stmt 1 view .LVU3008
 9401 0126 1A46     		mov	r2, r3
 9402 0128 0233     		adds	r3, r3, #2
 9403              	.LVL1037:
3034:src/display.c **** 		*l++=*b++;
 9404              		.loc 1 3034 13 is_stmt 0 view .LVU3009
 9405 012a 0029     		cmp	r1, #0
 9406 012c F5D1     		bne	.L1098
 9407              	.LVL1038:
 9408              	.L1097:
3038:src/display.c **** 	    }
 9409              		.loc 1 3038 8 is_stmt 1 view .LVU3010
3038:src/display.c **** 	    }
 9410              		.loc 1 3038 10 is_stmt 0 view .LVU3011
 9411 012e 0023     		movs	r3, #0
 9412 0130 804D     		ldr	r5, .L1296+32
 9413 0132 1370     		strb	r3, [r2]
 9414              	.LVL1039:
3038:src/display.c **** 	    }
ARM GAS  /tmp/ccdg5rgB.s 			page 281


 9415              		.loc 1 3038 10 view .LVU3012
 9416              	.LBE549:
 9417              	.LBE548:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9418              		.loc 1 3043 2 is_stmt 1 view .LVU3013
 9419 0134 2FE0     		b	.L1255
 9420              	.LVL1040:
 9421              	.L1257:
2707:src/display.c **** 
 9422              		.loc 1 2707 4 view .LVU3014
 9423 0136 FFF7FEFF 		bl	wait_for_display
 9424              	.LVL1041:
2710:src/display.c **** 	    clr_dot(i);
 9425              		.loc 1 2710 4 view .LVU3015
2710:src/display.c **** 	    clr_dot(i);
 9426              		.loc 1 2710 16 view .LVU3016
 9427              	.L959:
2711:src/display.c **** 	  }
 9428              		.loc 1 2711 6 discriminator 3 view .LVU3017
 9429 013a 3846     		mov	r0, r7
2710:src/display.c **** 	    clr_dot(i);
 9430              		.loc 1 2710 31 is_stmt 0 discriminator 3 view .LVU3018
 9431 013c 0137     		adds	r7, r7, #1
 9432              	.LVL1042:
2711:src/display.c **** 	  }
 9433              		.loc 1 2711 6 discriminator 3 view .LVU3019
 9434 013e FFF7FEFF 		bl	clr_dot
 9435              	.LVL1043:
2710:src/display.c **** 	    clr_dot(i);
 9436              		.loc 1 2710 31 is_stmt 1 discriminator 3 view .LVU3020
2710:src/display.c **** 	    clr_dot(i);
 9437              		.loc 1 2710 16 discriminator 3 view .LVU3021
2710:src/display.c **** 	    clr_dot(i);
 9438              		.loc 1 2710 4 is_stmt 0 discriminator 3 view .LVU3022
 9439 0142 832F     		cmp	r7, #131
 9440 0144 F9D1     		bne	.L959
 9441 0146 764B     		ldr	r3, .L1296+12
 9442 0148 764F     		ldr	r7, .L1296+16
 9443              	.LVL1044:
2710:src/display.c **** 	    clr_dot(i);
 9444              		.loc 1 2710 4 discriminator 3 view .LVU3023
 9445 014a 0093     		str	r3, [sp]
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 9446              		.loc 1 2683 6 view .LVU3024
 9447 014c 0026     		movs	r6, #0
 9448              	.LVL1045:
 9449              	.L960:
2979:src/display.c **** 	    if (p == NULL || cata) {
 9450              		.loc 1 2979 6 is_stmt 1 view .LVU3025
2979:src/display.c **** 	    if (p == NULL || cata) {
 9451              		.loc 1 2979 10 is_stmt 0 view .LVU3026
 9452 014e FFF7FEFF 		bl	get_cmdline
 9453              	.LVL1046:
2980:src/display.c **** 	      if (ShowRegister != -1) {
 9454              		.loc 1 2980 6 is_stmt 1 view .LVU3027
2980:src/display.c **** 	      if (ShowRegister != -1) {
 9455              		.loc 1 2980 9 is_stmt 0 view .LVU3028
ARM GAS  /tmp/ccdg5rgB.s 			page 282


 9456 0152 0546     		mov	r5, r0
 9457 0154 18B1     		cbz	r0, .L1054
2980:src/display.c **** 	      if (ShowRegister != -1) {
 9458              		.loc 1 2980 20 discriminator 1 view .LVU3029
 9459 0156 BAF1000F 		cmp	r10, #0
 9460 015a 00F0A480 		beq	.L1055
 9461              	.L1054:
2981:src/display.c **** #ifdef INCLUDE_C_LOCK
 9462              		.loc 1 2981 8 is_stmt 1 view .LVU3030
2981:src/display.c **** #ifdef INCLUDE_C_LOCK
 9463              		.loc 1 2981 25 is_stmt 0 view .LVU3031
 9464 015e 754D     		ldr	r5, .L1296+32
 9465 0160 2868     		ldr	r0, [r5]
 9466              	.LVL1047:
2981:src/display.c **** #ifdef INCLUDE_C_LOCK
 9467              		.loc 1 2981 11 view .LVU3032
 9468 0162 431C     		adds	r3, r0, #1
 9469 0164 00F03581 		beq	.L1056
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9470              		.loc 1 2983 3 is_stmt 1 view .LVU3033
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9471              		.loc 1 2983 8 is_stmt 0 view .LVU3034
 9472 0168 6B49     		ldr	r1, .L1296+4
 9473 016a 0B68     		ldr	r3, [r1]
 9474 016c 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9475              		.loc 1 2983 6 view .LVU3035
 9476 0170 5107     		lsls	r1, r2, #29
 9477 0172 07D5     		bpl	.L1057
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9478              		.loc 1 2983 17 discriminator 1 view .LVU3036
 9479 0174 93F8DEE7 		ldrb	lr, [r3, #2014]	@ zero_extendqisi2
 9480 0178 0EF00C0C 		and	ip, lr, #12
 9481 017c BCF10C0F 		cmp	ip, #12
 9482 0180 00F06581 		beq	.L1260
 9483              	.LVL1048:
 9484              	.L1057:
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9485              		.loc 1 2999 5 is_stmt 1 view .LVU3037
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9486              		.loc 1 2999 41 is_stmt 0 view .LVU3038
 9487 0184 6428     		cmp	r0, #100
 9488 0186 00F0E580 		beq	.L1261
 9489              	.L1063:
3000:src/display.c **** 		}
 9490              		.loc 1 3000 5 is_stmt 1 view .LVU3039
 9491 018a 0021     		movs	r1, #0
 9492 018c FFF7FEFF 		bl	format_reg
 9493              	.LVL1049:
3013:src/display.c **** 	      goto finish;
 9494              		.loc 1 3013 6 view .LVU3040
3013:src/display.c **** 	      goto finish;
 9495              		.loc 1 3013 9 is_stmt 0 view .LVU3041
 9496 0190 D8F80030 		ldr	r3, [r8]
 9497 0194 73BB     		cbnz	r3, .L1061
 9498              	.L1255:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
ARM GAS  /tmp/ccdg5rgB.s 			page 283


 9499              		.loc 1 3043 2 view .LVU3042
 9500 0196 FFF7FEFF 		bl	set_annunciators
 9501              	.LVL1050:
3044:src/display.c **** 	  ShowRPN = 0;
 9502              		.loc 1 3044 2 is_stmt 1 view .LVU3043
 9503              	.L962:
3045:src/display.c **** 	  dot(RPN, 0);
 9504              		.loc 1 3045 4 view .LVU3044
3045:src/display.c **** 	  dot(RPN, 0);
 9505              		.loc 1 3045 12 is_stmt 0 view .LVU3045
 9506 019a DFF89C81 		ldr	r8, .L1296+36
 9507 019e 0023     		movs	r3, #0
 9508              	.LBB551:
 9509              	.LBB552:
 349:src/display.c **** }
 9510              		.loc 1 349 8 view .LVU3046
 9511 01a0 8D20     		movs	r0, #141
 9512              	.LBE552:
 9513              	.LBE551:
3045:src/display.c **** 	  dot(RPN, 0);
 9514              		.loc 1 3045 12 view .LVU3047
 9515 01a2 C8F80030 		str	r3, [r8]
3046:src/display.c **** 	}
 9516              		.loc 1 3046 4 is_stmt 1 view .LVU3048
 9517              	.LVL1051:
 9518              	.LBB554:
 9519              	.LBI551:
 347:src/display.c ****   if (on)	set_dot(n);
 9520              		.loc 1 347 6 view .LVU3049
 9521              	.LBB553:
 348:src/display.c ****   else	clr_dot(n);
 9522              		.loc 1 348 3 view .LVU3050
 349:src/display.c **** }
 9523              		.loc 1 349 8 view .LVU3051
 9524 01a6 FFF7FEFF 		bl	clr_dot
 9525              	.LVL1052:
 9526              	.L1099:
 349:src/display.c **** }
 9527              		.loc 1 349 8 is_stmt 0 view .LVU3052
 9528              	.LBE553:
 9529              	.LBE554:
3049:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9530              		.loc 1 3049 2 is_stmt 1 view .LVU3053
3050:src/display.c **** 
 9531              		.loc 1 3050 4 is_stmt 0 view .LVU3054
 9532 01aa D8F80030 		ldr	r3, [r8]
 9533 01ae 002B     		cmp	r3, #0
 9534 01b0 40F0E280 		bne	.L1121
3049:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9535              		.loc 1 3049 31 view .LVU3055
 9536 01b4 A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9537 01b6 12F04003 		ands	r3, r2, #64
 9538 01ba 08D0     		beq	.L1100
3050:src/display.c **** 
 9539              		.loc 1 3050 8 view .LVU3056
 9540 01bc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3050:src/display.c **** 
ARM GAS  /tmp/ccdg5rgB.s 			page 284


 9541              		.loc 1 3050 4 view .LVU3057
 9542 01be 1B07     		lsls	r3, r3, #28
 9543 01c0 40F10581 		bpl	.L1123
3050:src/display.c **** 
 9544              		.loc 1 3050 30 discriminator 3 view .LVU3058
 9545 01c4 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9546 01c6 012B     		cmp	r3, #1
 9547 01c8 01D0     		beq	.L1100
3050:src/display.c **** 
 9548              		.loc 1 3050 60 discriminator 5 view .LVU3059
 9549 01ca C2F38003 		ubfx	r3, r2, #2, #1
 9550              	.L1100:
3049:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9551              		.loc 1 3049 19 discriminator 9 view .LVU3060
 9552 01ce E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9553 01d0 63F34512 		bfi	r2, r3, #5, #1
 9554 01d4 E275     		strb	r2, [r4, #23]
3053:src/display.c **** 	  annunciators();
 9555              		.loc 1 3053 2 is_stmt 1 discriminator 9 view .LVU3061
3053:src/display.c **** 	  annunciators();
 9556              		.loc 1 3053 5 is_stmt 0 discriminator 9 view .LVU3062
 9557 01d6 002E     		cmp	r6, #0
 9558 01d8 00F0C880 		beq	.L1101
3053:src/display.c **** 	  annunciators();
 9559              		.loc 1 3053 36 discriminator 1 view .LVU3063
 9560 01dc D3B2     		uxtb	r3, r2
3053:src/display.c **** 	  annunciators();
 9561              		.loc 1 3053 13 discriminator 1 view .LVU3064
 9562 01de 03F02103 		and	r3, r3, #33
 9563 01e2 202B     		cmp	r3, #32
 9564 01e4 00F0C280 		beq	.L1101
 9565              	.L1102:
3054:src/display.c ****  	State2.hms = 0;
 9566              		.loc 1 3054 4 is_stmt 1 view .LVU3065
 9567 01e8 FFF7FEFF 		bl	annunciators
 9568              	.LVL1053:
 9569              	.L1103:
3055:src/display.c **** #else
 9570              		.loc 1 3055 3 view .LVU3066
3055:src/display.c **** #else
 9571              		.loc 1 3055 14 is_stmt 0 view .LVU3067
 9572 01ec E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9573 01ee 6FF30003 		bfc	r3, #0, #1
 9574 01f2 E375     		strb	r3, [r4, #23]
 9575              	.L1061:
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9576              		.loc 1 3062 2 is_stmt 1 view .LVU3068
3063:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9577              		.loc 1 3063 2 view .LVU3069
3064:src/display.c **** 	State2.invalid_disp = 0;
 9578              		.loc 1 3064 2 view .LVU3070
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9579              		.loc 1 3062 17 is_stmt 0 view .LVU3071
 9580 01f4 6369     		ldr	r3, [r4, #20]
3068:src/display.c **** 	State2.disp_small = 0;
 9581              		.loc 1 3068 11 view .LVU3072
 9582 01f6 009A     		ldr	r2, [sp]
ARM GAS  /tmp/ccdg5rgB.s 			page 285


3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9583              		.loc 1 3062 17 view .LVU3073
 9584 01f8 23F02173 		bic	r3, r3, #42205184
 9585 01fc 23F48053 		bic	r3, r3, #4096
3064:src/display.c **** 	State2.invalid_disp = 0;
 9586              		.loc 1 3064 15 view .LVU3074
 9587 0200 0026     		movs	r6, #0
3062:src/display.c **** 	State2.disp_as_alpha = 0;
 9588              		.loc 1 3062 17 view .LVU3075
 9589 0202 6361     		str	r3, [r4, #20]
3066:src/display.c **** 	DispMsg = CNULL;
 9590              		.loc 1 3066 15 view .LVU3076
 9591 0204 6423     		movs	r3, #100
3064:src/display.c **** 	State2.invalid_disp = 0;
 9592              		.loc 1 3064 15 view .LVU3077
 9593 0206 6674     		strb	r6, [r4, #17]
3065:src/display.c **** 	ShowRegister = regX_idx;
 9594              		.loc 1 3065 2 is_stmt 1 view .LVU3078
3066:src/display.c **** 	DispMsg = CNULL;
 9595              		.loc 1 3066 2 view .LVU3079
3067:src/display.c **** 	DispPlot = 0;
 9596              		.loc 1 3067 10 is_stmt 0 view .LVU3080
 9597 0208 3E60     		str	r6, [r7]
3068:src/display.c **** 	State2.disp_small = 0;
 9598              		.loc 1 3068 11 view .LVU3081
 9599 020a 1680     		strh	r6, [r2]	@ movhi
3066:src/display.c **** 	DispMsg = CNULL;
 9600              		.loc 1 3066 15 view .LVU3082
 9601 020c 2B60     		str	r3, [r5]
3067:src/display.c **** 	DispPlot = 0;
 9602              		.loc 1 3067 2 is_stmt 1 view .LVU3083
3068:src/display.c **** 	State2.disp_small = 0;
 9603              		.loc 1 3068 2 view .LVU3084
3069:src/display.c **** 	finish_display();
 9604              		.loc 1 3069 2 view .LVU3085
3070:src/display.c **** 	no_status_top = 0;
 9605              		.loc 1 3070 2 view .LVU3086
 9606 020e FFF7FEFF 		bl	finish_display
 9607              	.LVL1054:
3071:src/display.c **** #ifdef CONSOLE
 9608              		.loc 1 3071 2 view .LVU3087
3071:src/display.c **** #ifdef CONSOLE
 9609              		.loc 1 3071 16 is_stmt 0 view .LVU3088
 9610 0212 A9F80060 		strh	r6, [r9]	@ movhi
3075:src/display.c **** #else
 9611              		.loc 1 3075 7 view .LVU3089
 9612 0216 29B0     		add	sp, sp, #164
 9613              		.cfi_remember_state
 9614              		.cfi_def_cfa_offset 36
 9615              		@ sp needed
 9616 0218 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9617              	.LVL1055:
 9618              	.L1256:
 9619              		.cfi_restore_state
2691:src/display.c **** 	  State2.disp_temp = 1;
 9620              		.loc 1 2691 4 is_stmt 1 view .LVU3090
2692:src/display.c **** #ifdef CONSOLE
ARM GAS  /tmp/ccdg5rgB.s 			page 286


 9621              		.loc 1 2692 4 view .LVU3091
2696:src/display.c **** 	  return;
 9622              		.loc 1 2696 12 is_stmt 0 view .LVU3092
 9623 021c 4649     		ldr	r1, .L1296+36
2691:src/display.c **** 	  State2.disp_temp = 1;
 9624              		.loc 1 2691 23 view .LVU3093
 9625 021e 23F03003 		bic	r3, r3, #48
 9626 0222 43F02003 		orr	r3, r3, #32
 9627 0226 E375     		strb	r3, [r4, #23]
2696:src/display.c **** 	  return;
 9628              		.loc 1 2696 4 is_stmt 1 view .LVU3094
2696:src/display.c **** 	  return;
 9629              		.loc 1 2696 12 is_stmt 0 view .LVU3095
 9630 0228 0A60     		str	r2, [r1]
2697:src/display.c **** 	}
 9631              		.loc 1 2697 4 is_stmt 1 view .LVU3096
3075:src/display.c **** #else
 9632              		.loc 1 3075 7 is_stmt 0 view .LVU3097
 9633 022a 29B0     		add	sp, sp, #164
 9634              		.cfi_remember_state
 9635              		.cfi_def_cfa_offset 36
 9636              		@ sp needed
 9637 022c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9638              	.LVL1056:
 9639              	.L963:
 9640              		.cfi_restore_state
2755:src/display.c **** 	  bp = scopy(bp, "HYP");
 9641              		.loc 1 2755 9 is_stmt 1 view .LVU3098
2755:src/display.c **** 	  bp = scopy(bp, "HYP");
 9642              		.loc 1 2755 12 is_stmt 0 view .LVU3099
 9643 0230 9F06     		lsls	r7, r3, #26
 9644 0232 00F1E380 		bmi	.L1262
2767:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9645              		.loc 1 2767 9 is_stmt 1 view .LVU3100
2767:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9646              		.loc 1 2767 12 is_stmt 0 view .LVU3101
 9647 0236 D907     		lsls	r1, r3, #31
 9648 0238 00F17981 		bmi	.L1263
2782:src/display.c **** 	  /* Commands with arguments */
 9649              		.loc 1 2782 9 is_stmt 1 view .LVU3102
2782:src/display.c **** 	  /* Commands with arguments */
 9650              		.loc 1 2782 13 is_stmt 0 view .LVU3103
 9651 023c A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2782:src/display.c **** 	  /* Commands with arguments */
 9652              		.loc 1 2782 12 view .LVU3104
 9653 023e 8A06     		lsls	r2, r1, #26
 9654 0240 40F1E780 		bpl	.L975
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9655              		.loc 1 2785 4 is_stmt 1 view .LVU3105
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9656              		.loc 1 2785 8 is_stmt 0 view .LVU3106
 9657 0244 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9658              		.loc 1 2785 7 view .LVU3107
 9659 0246 4D2B     		cmp	r3, #77
 9660 0248 00F0A681 		beq	.L976
2785:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
ARM GAS  /tmp/ccdg5rgB.s 			page 287


 9661              		.loc 1 2785 28 discriminator 1 view .LVU3108
 9662 024c 03F16C02 		add	r2, r3, #108
 9663 0250 D2B2     		uxtb	r2, r2
 9664 0252 012A     		cmp	r2, #1
 9665 0254 40F2A081 		bls	.L976
2681:src/display.c **** 	const char *p;
 9666              		.loc 1 2681 17 view .LVU3109
 9667 0258 1EA8     		add	r0, sp, #120
 9668              	.LVL1057:
 9669              	.L977:
2788:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9670              		.loc 1 2788 4 is_stmt 1 view .LVU3110
2788:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9671              		.loc 1 2788 35 is_stmt 0 view .LVU3111
 9672 025a 0622     		movs	r2, #6
 9673 025c 3749     		ldr	r1, .L1296+40
 9674 025e 02EB0313 		add	r3, r2, r3, lsl #4
2788:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9675              		.loc 1 2788 9 view .LVU3112
 9676 0262 1944     		add	r1, r1, r3
 9677 0264 FFF7FEFF 		bl	scopy
 9678              	.LVL1058:
2789:src/display.c **** 	  if (State2.dot) {
 9679              		.loc 1 2789 4 is_stmt 1 view .LVU3113
2789:src/display.c **** 	  if (State2.dot) {
 9680              		.loc 1 2789 9 is_stmt 0 view .LVU3114
 9681 0268 354B     		ldr	r3, .L1296+44
 9682 026a 94F91510 		ldrsb	r1, [r4, #21]
 9683 026e 354A     		ldr	r2, .L1296+48
 9684 0270 12EA2101 		ands	r1, r2, r1, asr #32
 9685 0274 38BF     		it	cc
 9686 0276 1946     		movcc	r1, r3
 9687 0278 FFF7FEFF 		bl	scopy
 9688              	.LVL1059:
2790:src/display.c **** 	    *bp++ = 's';
 9689              		.loc 1 2790 8 view .LVU3115
 9690 027c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9691              	.LVL1060:
2790:src/display.c **** 	    *bp++ = 's';
 9692              		.loc 1 2790 4 is_stmt 1 view .LVU3116
2790:src/display.c **** 	    *bp++ = 's';
 9693              		.loc 1 2790 7 is_stmt 0 view .LVU3117
 9694 027e 5F06     		lsls	r7, r3, #25
 9695 0280 40F19081 		bpl	.L979
2791:src/display.c **** 	    *bp++ = '_';
 9696              		.loc 1 2791 6 is_stmt 1 view .LVU3118
 9697              	.LVL1061:
2791:src/display.c **** 	    *bp++ = '_';
 9698              		.loc 1 2791 12 is_stmt 0 view .LVU3119
 9699 0284 7322     		movs	r2, #115
2792:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9700              		.loc 1 2792 12 view .LVU3120
 9701 0286 5F23     		movs	r3, #95
2791:src/display.c **** 	    *bp++ = '_';
 9702              		.loc 1 2791 12 view .LVU3121
 9703 0288 0270     		strb	r2, [r0]
2792:src/display.c **** 	  } else if (shift == SHIFT_F) {
ARM GAS  /tmp/ccdg5rgB.s 			page 288


 9704              		.loc 1 2792 6 is_stmt 1 view .LVU3122
 9705              	.LVL1062:
2792:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9706              		.loc 1 2792 12 is_stmt 0 view .LVU3123
 9707 028a 4370     		strb	r3, [r0, #1]
 9708              	.LVL1063:
 9709              	.L1003:
2895:src/display.c **** 	    set_status_top(buf);
 9710              		.loc 1 2895 4 is_stmt 1 view .LVU3124
2895:src/display.c **** 	    set_status_top(buf);
 9711              		.loc 1 2895 7 is_stmt 0 view .LVU3125
 9712 028c BBF1000F 		cmp	fp, #0
 9713 0290 00F0D280 		beq	.L970
 9714              	.L1245:
2896:src/display.c **** 	    no_status_top = 1;
 9715              		.loc 1 2896 6 is_stmt 1 view .LVU3126
 9716              	.LVL1064:
 9717              	.LBB555:
 9718              	.LBI555:
3639:src/display.c **** 	if (no_status_top) return;
 9719              		.loc 1 3639 19 view .LVU3127
 9720              	.LBB556:
3640:src/display.c **** 	if (State2.runmode) {
 9721              		.loc 1 3640 2 view .LVU3128
3640:src/display.c **** 	if (State2.runmode) {
 9722              		.loc 1 3640 5 is_stmt 0 view .LVU3129
 9723 0294 B9F90030 		ldrsh	r3, [r9]
 9724 0298 002B     		cmp	r3, #0
 9725 029a 7FF4EAAE 		bne	.L966
 9726              	.LBE556:
 9727              	.LBE555:
 9728              	.LBB557:
 9729              	.LBB558:
 9730 029e 1EA8     		add	r0, sp, #120
 9731              	.LVL1065:
3640:src/display.c **** 	if (State2.runmode) {
 9732              		.loc 1 3640 5 view .LVU3130
 9733 02a0 FFF7FEFF 		bl	set_status_top.part.0
 9734              	.LVL1066:
3640:src/display.c **** 	if (State2.runmode) {
 9735              		.loc 1 3640 5 view .LVU3131
 9736 02a4 E5E6     		b	.L966
 9737              	.LVL1067:
 9738              	.L1055:
3640:src/display.c **** 	if (State2.runmode) {
 9739              		.loc 1 3640 5 view .LVU3132
 9740              	.LBE558:
 9741              	.LBE557:
3010:src/display.c **** 	      x_disp = 1;
 9742              		.loc 1 3010 8 is_stmt 1 view .LVU3133
 9743              	.LBB559:
 9744              	.LBI559:
1330:src/display.c ****       int i;
 9745              		.loc 1 1330 17 view .LVU3134
 9746              	.LBB560:
1331:src/display.c ****       int gotdot = -1;
 9747              		.loc 1 1331 7 view .LVU3135
ARM GAS  /tmp/ccdg5rgB.s 			page 289


1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9748              		.loc 1 1332 7 view .LVU3136
1334:src/display.c **** #endif
 9749              		.loc 1 1334 7 view .LVU3137
1338:src/display.c **** #endif
 9750              		.loc 1 1338 7 view .LVU3138
1341:src/display.c **** 	SET_MANT_SIGN;
 9751              		.loc 1 1341 7 view .LVU3139
1341:src/display.c **** 	SET_MANT_SIGN;
 9752              		.loc 1 1341 10 is_stmt 0 view .LVU3140
 9753 02a6 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9754 02a8 2D2B     		cmp	r3, #45
 9755 02aa 00F09B81 		beq	.L1264
 9756              	.LVL1068:
 9757              	.L1066:
1346:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9758              		.loc 1 1346 7 is_stmt 1 view .LVU3141
1346:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9759              		.loc 1 1346 11 is_stmt 0 view .LVU3142
 9760 02ae 1A4B     		ldr	r3, .L1296+4
 9761 02b0 1B68     		ldr	r3, [r3]
 9762 02b2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1346:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9763              		.loc 1 1346 10 view .LVU3143
 9764 02b6 13F0010B 		ands	fp, r3, #1
 9765 02ba 00F04981 		beq	.L1067
 9766              	.LVL1069:
1347:src/display.c **** 	  set_dig(i, *p);
 9767              		.loc 1 1347 12 is_stmt 1 view .LVU3144
 9768 02be 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1347:src/display.c **** 	  set_dig(i, *p);
 9769              		.loc 1 1347 8 is_stmt 0 view .LVU3145
 9770 02c0 4FF0000A 		mov	r10, #0
 9771              	.LVL1070:
1347:src/display.c **** 	  set_dig(i, *p);
 9772              		.loc 1 1347 2 view .LVU3146
 9773 02c4 41B1     		cbz	r1, .L1069
 9774              	.LVL1071:
 9775              	.L1068:
1348:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9776              		.loc 1 1348 4 is_stmt 1 view .LVU3147
 9777 02c6 5046     		mov	r0, r10
 9778 02c8 FFF7FEFF 		bl	set_dig
 9779              	.LVL1072:
1349:src/display.c **** 	}
 9780              		.loc 1 1349 4 view .LVU3148
1347:src/display.c **** 	  set_dig(i, *p);
 9781              		.loc 1 1347 12 is_stmt 0 view .LVU3149
 9782 02cc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9783              	.LVL1073:
1349:src/display.c **** 	}
 9784              		.loc 1 1349 6 view .LVU3150
 9785 02d0 0AF1090A 		add	r10, r10, #9
 9786              	.LVL1074:
1347:src/display.c **** 	  set_dig(i, *p);
 9787              		.loc 1 1347 24 is_stmt 1 view .LVU3151
1347:src/display.c **** 	  set_dig(i, *p);
ARM GAS  /tmp/ccdg5rgB.s 			page 290


 9788              		.loc 1 1347 12 view .LVU3152
1347:src/display.c **** 	  set_dig(i, *p);
 9789              		.loc 1 1347 2 is_stmt 0 view .LVU3153
 9790 02d4 0029     		cmp	r1, #0
 9791 02d6 F6D1     		bne	.L1068
 9792              	.LVL1075:
 9793              	.L1069:
1351:src/display.c ****       } else {
 9794              		.loc 1 1351 2 is_stmt 1 view .LVU3154
 9795 02d8 FFF7FEFF 		bl	carry_overflow
 9796              	.LVL1076:
1351:src/display.c ****       } else {
 9797              		.loc 1 1351 2 is_stmt 0 view .LVU3155
 9798              	.LBE560:
 9799              	.LBE559:
3013:src/display.c **** 	      goto finish;
 9800              		.loc 1 3013 6 is_stmt 1 view .LVU3156
3013:src/display.c **** 	      goto finish;
 9801              		.loc 1 3013 9 is_stmt 0 view .LVU3157
 9802 02dc D8F80030 		ldr	r3, [r8]
 9803 02e0 002B     		cmp	r3, #0
 9804 02e2 40F02281 		bne	.L1165
 9805              	.LVL1077:
 9806              	.L1253:
3013:src/display.c **** 	      goto finish;
 9807              		.loc 1 3013 9 view .LVU3158
 9808 02e6 134D     		ldr	r5, .L1296+32
 9809              	.LVL1078:
 9810              	.L1060:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9811              		.loc 1 3043 2 is_stmt 1 view .LVU3159
 9812 02e8 FFF7FEFF 		bl	set_annunciators
 9813              	.LVL1079:
3044:src/display.c **** 	  ShowRPN = 0;
 9814              		.loc 1 3044 2 view .LVU3160
3044:src/display.c **** 	  ShowRPN = 0;
 9815              		.loc 1 3044 50 is_stmt 0 view .LVU3161
 9816 02ec 3B68     		ldr	r3, [r7]
 9817 02ee 002B     		cmp	r3, #0
 9818 02f0 7FF453AF 		bne	.L962
3044:src/display.c **** 	  ShowRPN = 0;
 9819              		.loc 1 3044 69 discriminator 3 view .LVU3162
 9820 02f4 009B     		ldr	r3, [sp]
 9821 02f6 B3F90030 		ldrsh	r3, [r3]
 9822 02fa 002B     		cmp	r3, #0
 9823 02fc 7FF44DAF 		bne	.L962
3044:src/display.c **** 	  ShowRPN = 0;
 9824              		.loc 1 3044 81 discriminator 4 view .LVU3163
 9825 0300 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9826 0302 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9827 0304 03F00403 		and	r3, r3, #4
 9828 0308 1343     		orrs	r3, r3, r2
 9829 030a 7FF446AF 		bne	.L962
 9830 030e DFF82880 		ldr	r8, .L1296+36
 9831 0312 4AE7     		b	.L1099
 9832              	.L1297:
 9833              		.align	2
ARM GAS  /tmp/ccdg5rgB.s 			page 291


 9834              	.L1296:
 9835 0314 00000000 		.word	StateWhileOn
 9836 0318 00000000 		.word	main_ram
 9837 031c 00000000 		.word	.LANCHOR21
 9838 0320 00000000 		.word	DispPlot
 9839 0324 00000000 		.word	DispMsg
 9840 0328 00000000 		.word	.LANCHOR25
 9841 032c 00000000 		.word	.LANCHOR19
 9842 0330 00000000 		.word	LastDisplayedNumber
 9843 0334 00000000 		.word	ShowRegister
 9844 0338 00000000 		.word	ShowRPN
 9845 033c 00000000 		.word	argcmds
 9846 0340 04000000 		.word	.LC23
 9847 0344 00000000 		.word	.LC22
 9848 0348 00000000 		.word	.LANCHOR18
 9849 034c 00000000 		.word	WasDataEntry
 9850 0350 00000000 		.word	ProgFree
 9851              	.LVL1080:
 9852              	.L1261:
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9853              		.loc 1 2999 44 discriminator 1 view .LVU3164
 9854 0354 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2999:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9855              		.loc 1 2999 41 discriminator 1 view .LVU3165
 9856 0356 13F00101 		ands	r1, r3, #1
 9857 035a 7FF416AF 		bne	.L1063
 9858              	.LVL1081:
3000:src/display.c **** 		}
 9859              		.loc 1 3000 5 is_stmt 1 view .LVU3166
 9860 035e FFF7FEFF 		bl	format_reg
 9861              	.LVL1082:
3013:src/display.c **** 	      goto finish;
 9862              		.loc 1 3013 6 view .LVU3167
3013:src/display.c **** 	      goto finish;
 9863              		.loc 1 3013 9 is_stmt 0 view .LVU3168
 9864 0362 D8F80030 		ldr	r3, [r8]
 9865 0366 002B     		cmp	r3, #0
 9866 0368 BED0     		beq	.L1060
 9867 036a 43E7     		b	.L1061
 9868              	.LVL1083:
 9869              	.L1101:
3053:src/display.c **** 	  annunciators();
 9870              		.loc 1 3053 52 discriminator 3 view .LVU3169
 9871 036c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9872 036e 13F0C00F 		tst	r3, #192
 9873 0372 3FF43BAF 		beq	.L1103
 9874 0376 37E7     		b	.L1102
 9875              	.L1121:
 9876 0378 0023     		movs	r3, #0
 9877 037a 28E7     		b	.L1100
 9878              	.LVL1084:
 9879              	.L1258:
 9880              	.LBB589:
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9881              		.loc 1 2735 4 is_stmt 1 view .LVU3170
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9882              		.loc 1 2735 9 is_stmt 0 view .LVU3171
ARM GAS  /tmp/ccdg5rgB.s 			page 292


 9883 037c BD4B     		ldr	r3, .L1298
 9884 037e CDF85D60 		str	r6, [sp, #93]	@ unaligned
2736:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9885              		.loc 1 2736 4 is_stmt 1 view .LVU3172
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9886              		.loc 1 2735 9 is_stmt 0 view .LVU3173
 9887 0382 93E80700 		ldm	r3, {r0, r1, r2}
 9888 0386 15AB     		add	r3, sp, #84
 9889 0388 03C3     		stmia	r3!, {r0, r1}
2736:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9890              		.loc 1 2736 4 view .LVU3174
 9891 038a 3146     		mov	r1, r6
 9892 038c BA48     		ldr	r0, .L1298+4
2735:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9893              		.loc 1 2735 9 view .LVU3175
 9894 038e 1A70     		strb	r2, [r3]
2736:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9895              		.loc 1 2736 4 view .LVU3176
 9896 0390 FFF7FEFF 		bl	set_digits_string
 9897              	.LVL1085:
2737:src/display.c **** #ifndef REALBUILD
 9898              		.loc 1 2737 4 is_stmt 1 view .LVU3177
 9899              	.LBB590:
 9900              	.LBI590:
 415:src/display.c ****   if (res) *res++ = ch;
 9901              		.loc 1 415 14 view .LVU3178
 9902              	.LBB591:
 416:src/display.c ****   else	set_dig(base, ch);
 9903              		.loc 1 416 3 view .LVU3179
 417:src/display.c ****   return res;
 9904              		.loc 1 417 8 view .LVU3180
 9905 0394 7221     		movs	r1, #114
 9906 0396 6C20     		movs	r0, #108
 9907 0398 FFF7FEFF 		bl	set_dig
 9908              	.LVL1086:
 418:src/display.c **** }
 9909              		.loc 1 418 3 view .LVU3181
 418:src/display.c **** }
 9910              		.loc 1 418 3 is_stmt 0 view .LVU3182
 9911              	.LBE591:
 9912              	.LBE590:
2739:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
 9913              		.loc 1 2739 4 is_stmt 1 view .LVU3183
 9914 039c B749     		ldr	r1, .L1298+8
 9915 039e B848     		ldr	r0, .L1298+12
 9916 03a0 B84F     		ldr	r7, .L1298+16
 9917 03a2 B94D     		ldr	r5, .L1298+20
 9918 03a4 FFF7FEFF 		bl	scopy
 9919              	.LVL1087:
2740:src/display.c **** #endif
 9920              		.loc 1 2740 4 view .LVU3184
 9921 03a8 B849     		ldr	r1, .L1298+24
 9922 03aa B948     		ldr	r0, .L1298+28
 9923 03ac FFF7FEFF 		bl	scopy
 9924              	.LVL1088:
2742:src/display.c **** 	  set_status(vers);
 9925              		.loc 1 2742 4 view .LVU3185
ARM GAS  /tmp/ccdg5rgB.s 			page 293


 9926 03b0 B849     		ldr	r1, .L1298+32
 9927 03b2 0422     		movs	r2, #4
 9928 03b4 17A8     		add	r0, sp, #92
 9929 03b6 FFF7FEFF 		bl	xcopy
 9930              	.LVL1089:
2743:src/display.c **** 	  skip = 1;
 9931              		.loc 1 2743 4 view .LVU3186
 9932 03ba 15A8     		add	r0, sp, #84
 9933 03bc FFF7FEFF 		bl	set_status
 9934              	.LVL1090:
2744:src/display.c **** 	  goto nostk;
 9935              		.loc 1 2744 4 view .LVU3187
2745:src/display.c **** 	} else if (State2.confirm) {
 9936              		.loc 1 2745 4 view .LVU3188
2745:src/display.c **** 	} else if (State2.confirm) {
 9937              		.loc 1 2745 4 is_stmt 0 view .LVU3189
 9938              	.LBE589:
2975:src/display.c **** 	if (!skip) {
 9939              		.loc 1 2975 2 is_stmt 1 view .LVU3190
 9940 03c0 B54B     		ldr	r3, .L1298+36
 9941 03c2 0093     		str	r3, [sp]
 9942 03c4 FFF7FEFF 		bl	show_flags
 9943              	.LVL1091:
2976:src/display.c **** 	  if (State2.runmode) {
 9944              		.loc 1 2976 2 view .LVU3191
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9945              		.loc 1 3043 2 view .LVU3192
 9946 03c8 FFF7FEFF 		bl	set_annunciators
 9947              	.LVL1092:
3044:src/display.c **** 	  ShowRPN = 0;
 9948              		.loc 1 3044 2 view .LVU3193
 9949 03cc E5E6     		b	.L962
 9950              	.LVL1093:
 9951              	.L1123:
3044:src/display.c **** 	  ShowRPN = 0;
 9952              		.loc 1 3044 2 is_stmt 0 view .LVU3194
 9953 03ce 0123     		movs	r3, #1
 9954 03d0 FDE6     		b	.L1100
 9955              	.LVL1094:
 9956              	.L1056:
3008:src/display.c **** 	    } else {
 9957              		.loc 1 3008 3 is_stmt 1 view .LVU3195
 9958 03d2 B248     		ldr	r0, .L1298+40
 9959 03d4 2421     		movs	r1, #36
 9960 03d6 FFF7FEFF 		bl	set_digits_string
 9961              	.LVL1095:
3013:src/display.c **** 	      goto finish;
 9962              		.loc 1 3013 6 view .LVU3196
3013:src/display.c **** 	      goto finish;
 9963              		.loc 1 3013 9 is_stmt 0 view .LVU3197
 9964 03da D8F80030 		ldr	r3, [r8]
 9965 03de 002B     		cmp	r3, #0
 9966 03e0 3FF4D9AE 		beq	.L1255
 9967 03e4 06E7     		b	.L1061
 9968              	.LVL1096:
 9969              	.L964:
2753:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 294


 9970              		.loc 1 2753 6 is_stmt 1 view .LVU3198
 9971 03e6 AC4B     		ldr	r3, .L1298+36
 9972 03e8 AD48     		ldr	r0, .L1298+44
 9973 03ea 0093     		str	r3, [sp]
 9974 03ec A54F     		ldr	r7, .L1298+16
 9975 03ee FFF7FEFF 		bl	set_status
 9976              	.LVL1097:
2973:src/display.c ****       nostk:
 9977              		.loc 1 2973 2 view .LVU3199
 9978 03f2 FFF7FEFF 		bl	show_stack
 9979              	.LVL1098:
2975:src/display.c **** 	if (!skip) {
 9980              		.loc 1 2975 2 view .LVU3200
 9981 03f6 FFF7FEFF 		bl	show_flags
 9982              	.LVL1099:
2976:src/display.c **** 	  if (State2.runmode) {
 9983              		.loc 1 2976 2 view .LVU3201
 9984 03fa 44E6     		b	.L967
 9985              	.L1262:
2756:src/display.c **** 	  if (! State2.dot)
 9986              		.loc 1 2756 4 view .LVU3202
2756:src/display.c **** 	  if (! State2.dot)
 9987              		.loc 1 2756 9 is_stmt 0 view .LVU3203
 9988 03fc A949     		ldr	r1, .L1298+48
 9989 03fe 1EA8     		add	r0, sp, #120
 9990              	.LVL1100:
2756:src/display.c **** 	  if (! State2.dot)
 9991              		.loc 1 2756 9 view .LVU3204
 9992 0400 FFF7FEFF 		bl	scopy
 9993              	.LVL1101:
2757:src/display.c **** 	    *bp++ = '\235';
 9994              		.loc 1 2757 8 view .LVU3205
 9995 0404 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9996              	.LVL1102:
2757:src/display.c **** 	    *bp++ = '\235';
 9997              		.loc 1 2757 4 is_stmt 1 view .LVU3206
2757:src/display.c **** 	    *bp++ = '\235';
 9998              		.loc 1 2757 7 is_stmt 0 view .LVU3207
 9999 0406 5D06     		lsls	r5, r3, #25
 10000 0408 3FF540AF 		bmi	.L1003
2758:src/display.c **** 	  if (yreg_enabled) {
 10001              		.loc 1 2758 6 is_stmt 1 view .LVU3208
 10002              	.LVL1103:
2758:src/display.c **** 	  if (yreg_enabled) {
 10003              		.loc 1 2758 12 is_stmt 0 view .LVU3209
 10004 040c 9D23     		movs	r3, #157
 10005 040e 0370     		strb	r3, [r0]
 10006 0410 3CE7     		b	.L1003
 10007              	.LVL1104:
 10008              	.L975:
2820:src/display.c **** 	  *bp++ = 'x';
 10009              		.loc 1 2820 9 is_stmt 1 view .LVU3210
2820:src/display.c **** 	  *bp++ = 'x';
 10010              		.loc 1 2820 19 is_stmt 0 view .LVU3211
 10011 0412 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2820:src/display.c **** 	  *bp++ = 'x';
 10012              		.loc 1 2820 12 view .LVU3212
ARM GAS  /tmp/ccdg5rgB.s 			page 295


 10013 0414 072A     		cmp	r2, #7
 10014 0416 00F06781 		beq	.L986
2821:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 10015              		.loc 1 2821 4 is_stmt 1 view .LVU3213
 10016              	.LVL1105:
2822:src/display.c **** 	  *bp++ = '_';
 10017              		.loc 1 2822 33 is_stmt 0 view .LVU3214
 10018 041a A34B     		ldr	r3, .L1298+52
2822:src/display.c **** 	  *bp++ = '_';
 10019              		.loc 1 2822 10 view .LVU3215
 10020 041c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10021 041e 8DF87930 		strb	r3, [sp, #121]
2821:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 10022              		.loc 1 2821 10 view .LVU3216
 10023 0422 7822     		movs	r2, #120
2823:src/display.c **** 	  *bp++ = '?';
 10024              		.loc 1 2823 10 view .LVU3217
 10025 0424 43F65F73 		movw	r3, #16223
2821:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 10026              		.loc 1 2821 10 view .LVU3218
 10027 0428 8DF87820 		strb	r2, [sp, #120]
2822:src/display.c **** 	  *bp++ = '_';
 10028              		.loc 1 2822 4 is_stmt 1 view .LVU3219
 10029              	.LVL1106:
2823:src/display.c **** 	  *bp++ = '?';
 10030              		.loc 1 2823 4 view .LVU3220
2824:src/display.c **** 	  if (yreg_enabled) {
 10031              		.loc 1 2824 4 view .LVU3221
2823:src/display.c **** 	  *bp++ = '?';
 10032              		.loc 1 2823 10 is_stmt 0 view .LVU3222
 10033 042c ADF87A30 		strh	r3, [sp, #122]	@ movhi
2825:src/display.c **** 	    set_status_top(buf);
 10034              		.loc 1 2825 4 is_stmt 1 view .LVU3223
2825:src/display.c **** 	    set_status_top(buf);
 10035              		.loc 1 2825 7 is_stmt 0 view .LVU3224
 10036 0430 BBF1000F 		cmp	fp, #0
 10037 0434 7FF42EAF 		bne	.L1245
 10038              	.LVL1107:
 10039              	.L970:
2765:src/display.c **** 	  }
 10040              		.loc 1 2765 6 is_stmt 1 view .LVU3225
 10041 0438 1EA8     		add	r0, sp, #120
 10042 043a FFF7FEFF 		bl	set_status
 10043              	.LVL1108:
2973:src/display.c ****       nostk:
 10044              		.loc 1 2973 2 view .LVU3226
 10045 043e 964B     		ldr	r3, .L1298+36
 10046 0440 0093     		str	r3, [sp]
 10047 0442 904F     		ldr	r7, .L1298+16
 10048 0444 FFF7FEFF 		bl	show_stack
 10049              	.LVL1109:
2975:src/display.c **** 	if (!skip) {
 10050              		.loc 1 2975 2 view .LVU3227
 10051 0448 FFF7FEFF 		bl	show_flags
 10052              	.LVL1110:
2976:src/display.c **** 	  if (State2.runmode) {
 10053              		.loc 1 2976 2 view .LVU3228
ARM GAS  /tmp/ccdg5rgB.s 			page 296


 10054 044c 1BE6     		b	.L967
 10055              	.LVL1111:
 10056              	.L1260:
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 10057              		.loc 1 2983 34 is_stmt 0 discriminator 2 view .LVU3229
 10058 044e 1207     		lsls	r2, r2, #28
 10059 0450 3FF598AE 		bmi	.L1057
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 10060              		.loc 1 2983 49 discriminator 3 view .LVU3230
 10061 0454 93F8EBA7 		ldrb	r10, [r3, #2027]	@ zero_extendqisi2
 10062              	.LVL1112:
2983:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 10063              		.loc 1 2983 37 discriminator 3 view .LVU3231
 10064 0458 1AF0080A 		ands	r10, r10, #8
 10065 045c 7FF492AE 		bne	.L1057
2984:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 10066              		.loc 1 2984 5 is_stmt 1 view .LVU3232
2984:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 10067              		.loc 1 2984 8 is_stmt 0 view .LVU3233
 10068 0460 1EF0100F 		tst	lr, #16
 10069 0464 40F0D982 		bne	.L1265
 10070              	.L1058:
2988:src/display.c **** 		    State2.hms = 0;
 10071              		.loc 1 2988 5 is_stmt 1 view .LVU3234
2988:src/display.c **** 		    State2.hms = 0;
 10072              		.loc 1 2988 9 is_stmt 0 view .LVU3235
 10073 0468 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2988:src/display.c **** 		    State2.hms = 0;
 10074              		.loc 1 2988 8 view .LVU3236
 10075 046a 13F00101 		ands	r1, r3, #1
 10076 046e 00F08F81 		beq	.L1059
2989:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 10077              		.loc 1 2989 7 is_stmt 1 view .LVU3237
2989:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 10078              		.loc 1 2989 18 is_stmt 0 view .LVU3238
 10079 0472 6FF30003 		bfc	r3, #0, #1
2990:src/display.c **** 		    State2.hms = 1;
 10080              		.loc 1 2990 7 view .LVU3239
 10081 0476 0021     		movs	r1, #0
 10082 0478 6E20     		movs	r0, #110
2989:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 10083              		.loc 1 2989 18 view .LVU3240
 10084 047a E375     		strb	r3, [r4, #23]
2990:src/display.c **** 		    State2.hms = 1;
 10085              		.loc 1 2990 7 is_stmt 1 view .LVU3241
 10086 047c FFF7FEFF 		bl	format_reg
 10087              	.LVL1113:
2991:src/display.c **** 		  }
 10088              		.loc 1 2991 7 view .LVU3242
2991:src/display.c **** 		  }
 10089              		.loc 1 2991 18 is_stmt 0 view .LVU3243
 10090 0480 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3013:src/display.c **** 	      goto finish;
 10091              		.loc 1 3013 9 view .LVU3244
 10092 0482 D8F80020 		ldr	r2, [r8]
2991:src/display.c **** 		  }
 10093              		.loc 1 2991 18 view .LVU3245
ARM GAS  /tmp/ccdg5rgB.s 			page 297


 10094 0486 43F00103 		orr	r3, r3, #1
 10095 048a E375     		strb	r3, [r4, #23]
 10096              	.LVL1114:
3013:src/display.c **** 	      goto finish;
 10097              		.loc 1 3013 6 is_stmt 1 view .LVU3246
3013:src/display.c **** 	      goto finish;
 10098              		.loc 1 3013 9 is_stmt 0 view .LVU3247
 10099 048c 002A     		cmp	r2, #0
 10100 048e 3FF42BAF 		beq	.L1060
 10101 0492 AFE6     		b	.L1061
 10102              	.LVL1115:
 10103              	.L1259:
 10104              	.LBB592:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10105              		.loc 1 3022 6 discriminator 1 view .LVU3248
 10106 0494 8549     		ldr	r1, .L1298+56
 10107 0496 0BEB8B03 		add	r3, fp, fp, lsl #2
3023:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 10108              		.loc 1 3023 21 discriminator 1 view .LVU3249
 10109 049a 0BF0010B 		and	fp, fp, #1
 10110              	.LVL1116:
3022:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10111              		.loc 1 3022 6 discriminator 1 view .LVU3250
 10112 049e 1944     		add	r1, r1, r3
 10113 04a0 1EA8     		add	r0, sp, #120
 10114 04a2 0BF1030B 		add	fp, fp, #3
 10115 04a6 0193     		str	r3, [sp, #4]
 10116 04a8 FFF7FEFF 		bl	scopy_spc
 10117              	.LVL1117:
 10118 04ac 5A46     		mov	r2, fp
 10119 04ae 4146     		mov	r1, r8
 10120 04b0 FFF7FEFF 		bl	num_arg_0
 10121              	.LVL1118:
3024:src/display.c **** #ifndef REALBUILD
 10122              		.loc 1 3024 6 is_stmt 1 discriminator 1 view .LVU3251
 10123 04b4 0921     		movs	r1, #9
 10124 04b6 1EA8     		add	r0, sp, #120
 10125 04b8 FFF7FEFF 		bl	set_digits_string
 10126              	.LVL1119:
3026:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 10127              		.loc 1 3026 6 discriminator 1 view .LVU3252
 10128 04bc 2822     		movs	r2, #40
 10129 04be 2946     		mov	r1, r5
 10130 04c0 1EA8     		add	r0, sp, #120
 10131 04c2 FFF7FEFF 		bl	xset
 10132              	.LVL1120:
3027:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
 10133              		.loc 1 3027 6 discriminator 1 view .LVU3253
 10134 04c6 0121     		movs	r1, #1
 10135 04c8 DAF80000 		ldr	r0, [r10]
 10136 04cc 2A46     		mov	r2, r5
 10137 04ce FFF7FEFF 		bl	set_exp
 10138              	.LVL1121:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10139              		.loc 1 3028 6 discriminator 1 view .LVU3254
 10140 04d2 7749     		ldr	r1, .L1298+60
 10141 04d4 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccdg5rgB.s 			page 298


 10142 04d6 1944     		add	r1, r1, r3
 10143 04d8 0EE6     		b	.L1105
 10144              	.LVL1122:
 10145              	.L1086:
3028:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 10146              		.loc 1 3028 6 is_stmt 0 discriminator 1 view .LVU3255
 10147              	.LBE592:
 10148              	.LBB593:
 10149              	.LBB580:
1444:src/display.c **** 	    gotdot = i;
 10150              		.loc 1 1444 4 is_stmt 1 view .LVU3256
1444:src/display.c **** 	    gotdot = i;
 10151              		.loc 1 1444 7 is_stmt 0 view .LVU3257
 10152 04da BAF1FF3F 		cmp	r10, #-1
 10153 04de 08BF     		it	eq
 10154 04e0 DA46     		moveq	r10, fp
 10155              	.LVL1123:
1446:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10156              		.loc 1 1446 4 is_stmt 1 view .LVU3258
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10157              		.loc 1 1447 6 view .LVU3259
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10158              		.loc 1 1447 13 is_stmt 0 view .LVU3260
 10159 04e2 AAF11B0A 		sub	r10, r10, #27
 10160              	.LVL1124:
1448:src/display.c **** 	      break;
 10161              		.loc 1 1448 6 is_stmt 1 view .LVU3261
1448:src/display.c **** 	      break;
 10162              		.loc 1 1448 9 is_stmt 0 view .LVU3262
 10163 04e6 BAF1000F 		cmp	r10, #0
 10164 04ea 13DD     		ble	.L1071
1448:src/display.c **** 	      break;
 10165              		.loc 1 1448 9 view .LVU3263
 10166 04ec 0296     		str	r6, [sp, #8]
 10167 04ee 5646     		mov	r6, r10
 10168              	.LVL1125:
1448:src/display.c **** 	      break;
 10169              		.loc 1 1448 9 view .LVU3264
 10170 04f0 BA46     		mov	r10, r7
 10171              	.LVL1126:
1448:src/display.c **** 	      break;
 10172              		.loc 1 1448 9 view .LVU3265
 10173 04f2 2F46     		mov	r7, r5
 10174 04f4 019D     		ldr	r5, [sp, #4]
 10175              	.LVL1127:
 10176              	.L1090:
1451:src/display.c **** 	      break;
 10177              		.loc 1 1451 6 is_stmt 1 view .LVU3266
1454:src/display.c **** 	  }
 10178              		.loc 1 1454 6 view .LVU3267
 10179              	.LBB561:
 10180              	.LBB562:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 10181              		.loc 1 378 3 view .LVU3268
 10182 04f6 3046     		mov	r0, r6
 10183              	.LBE562:
 10184              	.LBE561:
ARM GAS  /tmp/ccdg5rgB.s 			page 299


1451:src/display.c **** 	      break;
 10185              		.loc 1 1451 9 is_stmt 0 view .LVU3269
 10186 04f8 0DB1     		cbz	r5, .L1091
 10187              	.LVL1128:
1451:src/display.c **** 	      break;
 10188              		.loc 1 1451 27 view .LVU3270
 10189 04fa 092E     		cmp	r6, #9
 10190 04fc 07D0     		beq	.L1242
 10191              	.L1091:
1454:src/display.c **** 	  }
 10192              		.loc 1 1454 6 view .LVU3271
 10193 04fe 6D4B     		ldr	r3, .L1298+64
 10194 0500 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10195              	.LVL1129:
 10196              	.LBB564:
 10197              	.LBI561:
 375:src/display.c ****   if (sep == SEP_NONE)
 10198              		.loc 1 375 14 is_stmt 1 view .LVU3272
 10199              	.LBB563:
 376:src/display.c ****     return res;
 10200              		.loc 1 376 3 view .LVU3273
 376:src/display.c ****     return res;
 10201              		.loc 1 376 6 is_stmt 0 view .LVU3274
 10202 0502 09B1     		cbz	r1, .L1092
 10203 0504 FFF7FEFF 		bl	set_separator.part.0
 10204              	.LVL1130:
 10205              	.L1092:
 376:src/display.c ****     return res;
 10206              		.loc 1 376 6 view .LVU3275
 10207              	.LBE563:
 10208              	.LBE564:
1446:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10209              		.loc 1 1446 4 is_stmt 1 view .LVU3276
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10210              		.loc 1 1447 6 view .LVU3277
1447:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10211              		.loc 1 1447 13 is_stmt 0 view .LVU3278
 10212 0508 1B3E     		subs	r6, r6, #27
 10213              	.LVL1131:
1448:src/display.c **** 	      break;
 10214              		.loc 1 1448 6 is_stmt 1 view .LVU3279
1448:src/display.c **** 	      break;
 10215              		.loc 1 1448 9 is_stmt 0 view .LVU3280
 10216 050a 002E     		cmp	r6, #0
 10217 050c F3DC     		bgt	.L1090
 10218              	.L1242:
1448:src/display.c **** 	      break;
 10219              		.loc 1 1448 9 view .LVU3281
 10220 050e 029E     		ldr	r6, [sp, #8]
 10221              	.LVL1132:
1448:src/display.c **** 	      break;
 10222              		.loc 1 1448 9 view .LVU3282
 10223 0510 3D46     		mov	r5, r7
 10224 0512 5746     		mov	r7, r10
 10225              	.LVL1133:
 10226              	.L1071:
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
ARM GAS  /tmp/ccdg5rgB.s 			page 300


 10227              		.loc 1 1458 4 is_stmt 1 view .LVU3283
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10228              		.loc 1 1458 8 is_stmt 0 view .LVU3284
 10229 0514 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10230              		.loc 1 1458 7 view .LVU3285
 10231 0516 A2F14401 		sub	r1, r2, #68
 10232 051a 0129     		cmp	r1, #1
 10233 051c 40F20781 		bls	.L1266
 10234              	.L1093:
 10235              	.LVL1134:
1458:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10236              		.loc 1 1458 7 view .LVU3286
 10237              	.LBE580:
 10238              	.LBE593:
3013:src/display.c **** 	      goto finish;
 10239              		.loc 1 3013 6 is_stmt 1 view .LVU3287
3013:src/display.c **** 	      goto finish;
 10240              		.loc 1 3013 9 is_stmt 0 view .LVU3288
 10241 0520 D8F80030 		ldr	r3, [r8]
 10242 0524 002B     		cmp	r3, #0
 10243 0526 3FF4DEAE 		beq	.L1253
 10244              	.L1165:
 10245 052a 574D     		ldr	r5, .L1298+20
 10246 052c 62E6     		b	.L1061
 10247              	.LVL1135:
 10248              	.L1263:
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10249              		.loc 1 2769 4 is_stmt 1 view .LVU3289
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10250              		.loc 1 2769 9 is_stmt 0 view .LVU3290
 10251 052e 2E22     		movs	r2, #46
 10252 0530 6149     		ldr	r1, .L1298+68
 10253 0532 1EA8     		add	r0, sp, #120
 10254              	.LVL1136:
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10255              		.loc 1 2769 9 view .LVU3291
 10256 0534 FFF7FEFF 		bl	scopy_char
 10257              	.LVL1137:
2770:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10258              		.loc 1 2770 14 view .LVU3292
 10259 0538 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2769:src/display.c **** 	  if (State2.numdigit > 0)
 10260              		.loc 1 2769 9 view .LVU3293
 10261 053a 0346     		mov	r3, r0
 10262              	.LVL1138:
2770:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10263              		.loc 1 2770 4 is_stmt 1 view .LVU3294
2770:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 10264              		.loc 1 2770 7 is_stmt 0 view .LVU3295
 10265 053c 002A     		cmp	r2, #0
 10266 053e 40F0CE80 		bne	.L1267
 10267              	.L973:
2773:src/display.c **** 	  if (yreg_enabled) {
 10268              		.loc 1 2773 4 is_stmt 1 view .LVU3296
 10269              	.LVL1139:
2773:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/ccdg5rgB.s 			page 301


 10270              		.loc 1 2773 10 is_stmt 0 view .LVU3297
 10271 0542 5F22     		movs	r2, #95
 10272 0544 1A70     		strb	r2, [r3]
2774:src/display.c **** 	    set_status_top(buf);
 10273              		.loc 1 2774 4 is_stmt 1 view .LVU3298
2774:src/display.c **** 	    set_status_top(buf);
 10274              		.loc 1 2774 7 is_stmt 0 view .LVU3299
 10275 0546 BBF1000F 		cmp	fp, #0
 10276 054a 7FF4A3AE 		bne	.L1245
2774:src/display.c **** 	    set_status_top(buf);
 10277              		.loc 1 2774 7 view .LVU3300
 10278 054e 73E7     		b	.L970
 10279              	.LVL1140:
 10280              	.L1067:
 10281              	.LBB594:
 10282              	.LBB581:
1353:src/display.c **** 
 10283              		.loc 1 1353 2 is_stmt 1 view .LVU3301
 10284 0550 FFF7FEFF 		bl	set_separator_decimal_modes
 10285              	.LVL1141:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10286              		.loc 1 1355 2 view .LVU3302
1357:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10287              		.loc 1 1357 2 view .LVU3303
1357:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10288              		.loc 1 1357 5 is_stmt 0 view .LVU3304
 10289 0554 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10290              	.LBB565:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10291              		.loc 1 1364 15 view .LVU3305
 10292 0556 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 10293              	.LBE565:
1357:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10294              		.loc 1 1357 5 view .LVU3306
 10295 0558 012B     		cmp	r3, #1
 10296 055a 40F20081 		bls	.L1070
 10297              	.LVL1142:
 10298              	.LBB566:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10299              		.loc 1 1364 14 is_stmt 1 view .LVU3307
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10300              		.loc 1 1364 4 is_stmt 0 view .LVU3308
 10301 055e 0029     		cmp	r1, #0
 10302 0560 00F05582 		beq	.L1114
1361:src/display.c **** 	  int j;
 10303              		.loc 1 1361 10 view .LVU3309
 10304 0564 5B46     		mov	r3, fp
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10305              		.loc 1 1364 10 view .LVU3310
 10306 0566 5A46     		mov	r2, fp
 10307 0568 AC46     		mov	ip, r5
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10308              		.loc 1 1364 4 view .LVU3311
 10309 056a 0846     		mov	r0, r1
 10310              	.LBE566:
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10311              		.loc 1 1332 11 view .LVU3312
ARM GAS  /tmp/ccdg5rgB.s 			page 302


 10312 056c 4FF0FF3E 		mov	lr, #-1
 10313 0570 04E0     		b	.L1073
 10314              	.LVL1143:
 10315              	.L1072:
 10316              	.LBB567:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10317              		.loc 1 1364 28 is_stmt 1 view .LVU3313
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10318              		.loc 1 1364 15 is_stmt 0 view .LVU3314
 10319 0572 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10320              		.loc 1 1364 29 view .LVU3315
 10321 0576 0132     		adds	r2, r2, #1
 10322              	.LVL1144:
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10323              		.loc 1 1364 14 is_stmt 1 view .LVU3316
1364:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 10324              		.loc 1 1364 4 is_stmt 0 view .LVU3317
 10325 0578 0028     		cmp	r0, #0
 10326 057a 3AD0     		beq	.L1268
 10327              	.LVL1145:
 10328              	.L1073:
1365:src/display.c **** 	      gotdot = j;
 10329              		.loc 1 1365 6 is_stmt 1 view .LVU3318
1365:src/display.c **** 	      gotdot = j;
 10330              		.loc 1 1365 9 is_stmt 0 view .LVU3319
 10331 057c 2E28     		cmp	r0, #46
 10332 057e F8D1     		bne	.L1072
1366:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 10333              		.loc 1 1366 8 is_stmt 1 view .LVU3320
 10334              	.LVL1146:
1368:src/display.c **** #  endif
 10335              		.loc 1 1368 8 view .LVU3321
1365:src/display.c **** 	      gotdot = j;
 10336              		.loc 1 1365 22 is_stmt 0 view .LVU3322
 10337 0580 BEF1FF3F 		cmp	lr, #-1
 10338 0584 F5D1     		bne	.L1072
1368:src/display.c **** #  endif
 10339              		.loc 1 1368 29 view .LVU3323
 10340 0586 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 10341 058a A3F12E03 		sub	r3, #46
 10342 058e B3FA83F3 		clz	r3, r3
1368:src/display.c **** #  endif
 10343              		.loc 1 1368 19 view .LVU3324
 10344 0592 9646     		mov	lr, r2
1368:src/display.c **** #  endif
 10345              		.loc 1 1368 29 view .LVU3325
 10346 0594 5B09     		lsrs	r3, r3, #5
 10347              	.LVL1147:
1368:src/display.c **** #  endif
 10348              		.loc 1 1368 29 view .LVU3326
 10349 0596 ECE7     		b	.L1072
 10350              	.LVL1148:
 10351              	.L976:
1368:src/display.c **** #  endif
 10352              		.loc 1 1368 29 view .LVU3327
 10353              	.LBE567:
ARM GAS  /tmp/ccdg5rgB.s 			page 303


 10354              	.LBE581:
 10355              	.LBE594:
2786:src/display.c **** #endif
 10356              		.loc 1 2786 6 is_stmt 1 view .LVU3328
2786:src/display.c **** #endif
 10357              		.loc 1 2786 11 is_stmt 0 view .LVU3329
 10358 0598 4849     		ldr	r1, .L1298+72
 10359 059a 1EA8     		add	r0, sp, #120
 10360              	.LVL1149:
2786:src/display.c **** #endif
 10361              		.loc 1 2786 11 view .LVU3330
 10362 059c FFF7FEFF 		bl	scopy
 10363              	.LVL1150:
2786:src/display.c **** #endif
 10364              		.loc 1 2786 11 view .LVU3331
 10365 05a0 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 10366 05a2 5AE6     		b	.L977
 10367              	.L979:
2793:src/display.c **** 	    *bp++ = '\021';
 10368              		.loc 1 2793 11 is_stmt 1 view .LVU3332
2793:src/display.c **** 	    *bp++ = '\021';
 10369              		.loc 1 2793 14 is_stmt 0 view .LVU3333
 10370 05a4 012D     		cmp	r5, #1
 10371 05a6 00F0EE80 		beq	.L1269
2800:src/display.c **** 	      *bp++ = '.';
 10372              		.loc 1 2800 6 is_stmt 1 view .LVU3334
2800:src/display.c **** 	      *bp++ = '.';
 10373              		.loc 1 2800 10 is_stmt 0 view .LVU3335
 10374 05aa A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2800:src/display.c **** 	      *bp++ = '.';
 10375              		.loc 1 2800 9 view .LVU3336
 10376 05ac DD07     		lsls	r5, r3, #31
2801:src/display.c **** 	    if (State2.numdigit > 0) {
 10377              		.loc 1 2801 8 is_stmt 1 view .LVU3337
 10378              	.LVL1151:
2801:src/display.c **** 	    if (State2.numdigit > 0) {
 10379              		.loc 1 2801 14 is_stmt 0 view .LVU3338
 10380 05ae 44BF     		itt	mi
 10381 05b0 2E23     		movmi	r3, #46
 10382 05b2 00F8013B 		strbmi	r3, [r0], #1
 10383              	.LVL1152:
2802:src/display.c **** 	      if (State2.shuffle)
 10384              		.loc 1 2802 6 is_stmt 1 view .LVU3339
2802:src/display.c **** 	      if (State2.shuffle)
 10385              		.loc 1 2802 16 is_stmt 0 view .LVU3340
 10386 05b6 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2802:src/display.c **** 	      if (State2.shuffle)
 10387              		.loc 1 2802 9 view .LVU3341
 10388 05b8 8AB1     		cbz	r2, .L983
2803:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10389              		.loc 1 2803 8 is_stmt 1 view .LVU3342
2803:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10390              		.loc 1 2803 12 is_stmt 0 view .LVU3343
 10391 05ba A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2803:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 10392              		.loc 1 2803 11 view .LVU3344
 10393 05bc 9907     		lsls	r1, r3, #30
ARM GAS  /tmp/ccdg5rgB.s 			page 304


 10394 05be 40F12882 		bpl	.L984
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10395              		.loc 1 2804 3 is_stmt 1 view .LVU3345
 10396              	.LVL1153:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10397              		.loc 1 2804 17 is_stmt 0 view .LVU3346
 10398 05c2 2289     		ldrh	r2, [r4, #8]
 10399              	.LVL1154:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10400              		.loc 1 2804 34 is_stmt 1 view .LVU3347
 10401 05c4 3E49     		ldr	r1, .L1298+76
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10402              		.loc 1 2804 10 is_stmt 0 view .LVU3348
 10403 05c6 0023     		movs	r3, #0
 10404              	.LVL1155:
 10405              	.L985:
2805:src/display.c **** 	      else
 10406              		.loc 1 2805 5 is_stmt 1 discriminator 3 view .LVU3349
2805:src/display.c **** 	      else
 10407              		.loc 1 2805 24 is_stmt 0 discriminator 3 view .LVU3350
 10408 05c8 02F00305 		and	r5, r2, #3
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10409              		.loc 1 2804 54 discriminator 3 view .LVU3351
 10410 05cc 0133     		adds	r3, r3, #1
 10411              	.LVL1156:
2805:src/display.c **** 	      else
 10412              		.loc 1 2805 11 discriminator 3 view .LVU3352
 10413 05ce 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 10414 05d0 00F8015B 		strb	r5, [r0], #1
 10415              	.LVL1157:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10416              		.loc 1 2804 53 is_stmt 1 discriminator 3 view .LVU3353
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10417              		.loc 1 2804 42 is_stmt 0 discriminator 3 view .LVU3354
 10418 05d4 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10419              		.loc 1 2804 3 discriminator 3 view .LVU3355
 10420 05d6 9D42     		cmp	r5, r3
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10421              		.loc 1 2804 60 discriminator 3 view .LVU3356
 10422 05d8 4FEAA202 		asr	r2, r2, #2
 10423              	.LVL1158:
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10424              		.loc 1 2804 34 is_stmt 1 discriminator 3 view .LVU3357
2804:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 10425              		.loc 1 2804 3 is_stmt 0 discriminator 3 view .LVU3358
 10426 05dc F4DC     		bgt	.L985
 10427              	.LVL1159:
 10428              	.L983:
2810:src/display.c **** 	  }
 10429              		.loc 1 2810 6 is_stmt 1 view .LVU3359
2810:src/display.c **** 	  }
 10430              		.loc 1 2810 12 is_stmt 0 view .LVU3360
 10431 05de 5F23     		movs	r3, #95
 10432 05e0 0370     		strb	r3, [r0]
 10433 05e2 53E6     		b	.L1003
 10434              	.LVL1160:
ARM GAS  /tmp/ccdg5rgB.s 			page 305


 10435              	.L1264:
 10436              	.LBB595:
 10437              	.LBB582:
1342:src/display.c **** 	p++;
 10438              		.loc 1 1342 2 is_stmt 1 view .LVU3361
 10439              	.LBB568:
 10440              	.LBI568:
 304:src/display.c **** {
 10441              		.loc 1 304 13 view .LVU3362
 10442              	.LBB569:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10443              		.loc 1 306 3 view .LVU3363
 306:src/display.c ****   set_dot(MANT_SIGN);
 10444              		.loc 1 306 25 is_stmt 0 view .LVU3364
 10445 05e4 264A     		ldr	r2, .L1298+12
 307:src/display.c **** }
 10446              		.loc 1 307 3 view .LVU3365
 10447 05e6 8120     		movs	r0, #129
 10448              	.LVL1161:
 306:src/display.c ****   set_dot(MANT_SIGN);
 10449              		.loc 1 306 25 view .LVU3366
 10450 05e8 1370     		strb	r3, [r2]
 307:src/display.c **** }
 10451              		.loc 1 307 3 is_stmt 1 view .LVU3367
 10452              	.LBE569:
 10453              	.LBE568:
1343:src/display.c ****       }
 10454              		.loc 1 1343 3 is_stmt 0 view .LVU3368
 10455 05ea 0135     		adds	r5, r5, #1
 10456              	.LVL1162:
 10457              	.LBB571:
 10458              	.LBB570:
 307:src/display.c **** }
 10459              		.loc 1 307 3 view .LVU3369
 10460 05ec FFF7FEFF 		bl	set_dot
 10461              	.LVL1163:
 10462              	.LBE570:
 10463              	.LBE571:
1343:src/display.c ****       }
 10464              		.loc 1 1343 2 is_stmt 1 view .LVU3370
1343:src/display.c ****       }
 10465              		.loc 1 1343 2 is_stmt 0 view .LVU3371
 10466 05f0 5DE6     		b	.L1066
 10467              	.LVL1164:
 10468              	.L1268:
 10469              	.LBB572:
1372:src/display.c **** 	  if (j > 0) {
 10470              		.loc 1 1372 4 is_stmt 1 view .LVU3372
1372:src/display.c **** 	  if (j > 0) {
 10471              		.loc 1 1372 24 is_stmt 0 view .LVU3373
 10472 05f2 03F10C0C 		add	ip, r3, #12
1372:src/display.c **** 	  if (j > 0) {
 10473              		.loc 1 1372 6 view .LVU3374
 10474 05f6 A2EB0C02 		sub	r2, r2, ip
 10475              	.LVL1165:
1373:src/display.c **** 	    p += j + 1;
 10476              		.loc 1 1373 4 is_stmt 1 view .LVU3375
ARM GAS  /tmp/ccdg5rgB.s 			page 306


1373:src/display.c **** 	    p += j + 1;
 10477              		.loc 1 1373 7 is_stmt 0 view .LVU3376
 10478 05fa 002A     		cmp	r2, #0
 10479 05fc 40F3E380 		ble	.L1115
1374:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10480              		.loc 1 1374 6 is_stmt 1 view .LVU3377
1374:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10481              		.loc 1 1374 8 is_stmt 0 view .LVU3378
 10482 0600 511C     		adds	r1, r2, #1
1376:src/display.c **** 	      gotdot = 0;
 10483              		.loc 1 1376 9 view .LVU3379
 10484 0602 7245     		cmp	r2, lr
1374:src/display.c **** 	    i = SEGS_PER_DIGIT;
 10485              		.loc 1 1374 8 view .LVU3380
 10486 0604 0D44     		add	r5, r5, r1
 10487              	.LVL1166:
1375:src/display.c **** 	    if (gotdot <= j) {
 10488              		.loc 1 1375 6 is_stmt 1 view .LVU3381
1376:src/display.c **** 	      gotdot = 0;
 10489              		.loc 1 1376 6 view .LVU3382
1376:src/display.c **** 	      gotdot = 0;
 10490              		.loc 1 1376 9 is_stmt 0 view .LVU3383
 10491 0606 C0F2CC80 		blt	.L1075
1377:src/display.c **** 	      if (double_dot)
 10492              		.loc 1 1377 8 is_stmt 1 view .LVU3384
 10493              	.LVL1167:
1378:src/display.c **** 		p++;
 10494              		.loc 1 1378 8 view .LVU3385
1378:src/display.c **** 		p++;
 10495              		.loc 1 1378 11 is_stmt 0 view .LVU3386
 10496 060a 002B     		cmp	r3, #0
 10497 060c 00F03282 		beq	.L1116
1379:src/display.c **** 	    }
 10498              		.loc 1 1379 3 is_stmt 1 view .LVU3387
1379:src/display.c **** 	    }
 10499              		.loc 1 1379 4 is_stmt 0 view .LVU3388
 10500 0610 0135     		adds	r5, r5, #1
 10501              	.LVL1168:
1375:src/display.c **** 	    if (gotdot <= j) {
 10502              		.loc 1 1375 8 view .LVU3389
 10503 0612 4FF0090B 		mov	fp, #9
 10504              	.LVL1169:
 10505              	.L1076:
1388:src/display.c **** 	    overflow_to_left = 1;
 10506              		.loc 1 1388 6 is_stmt 1 view .LVU3390
 10507 0616 3C21     		movs	r1, #60
 10508              	.LVL1170:
1388:src/display.c **** 	    overflow_to_left = 1;
 10509              		.loc 1 1388 6 is_stmt 0 view .LVU3391
 10510 0618 0020     		movs	r0, #0
 10511 061a FFF7FEFF 		bl	set_dig
 10512              	.LVL1171:
1389:src/display.c **** 	  }
 10513              		.loc 1 1389 6 is_stmt 1 view .LVU3392
1389:src/display.c **** 	  }
 10514              		.loc 1 1389 6 is_stmt 0 view .LVU3393
 10515 061e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
ARM GAS  /tmp/ccdg5rgB.s 			page 307


1389:src/display.c **** 	  }
 10516              		.loc 1 1389 6 view .LVU3394
 10517              	.LBE572:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10518              		.loc 1 1395 9 is_stmt 1 view .LVU3395
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10519              		.loc 1 1395 2 is_stmt 0 view .LVU3396
 10520 0620 4FF0000A 		mov	r10, #0
 10521              	.LVL1172:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10522              		.loc 1 1395 2 view .LVU3397
 10523 0624 0029     		cmp	r1, #0
 10524 0626 3FF47BAF 		beq	.L1093
 10525              	.LVL1173:
 10526              	.L1106:
 10527              	.LBB573:
1389:src/display.c **** 	  }
 10528              		.loc 1 1389 23 view .LVU3398
 10529 062a 0123     		movs	r3, #1
 10530 062c 0193     		str	r3, [sp, #4]
 10531 062e 13E0     		b	.L1085
 10532              	.LVL1174:
 10533              	.L1270:
1389:src/display.c **** 	  }
 10534              		.loc 1 1389 23 view .LVU3399
 10535              	.LBE573:
1401:src/display.c **** 	      gotdot = i;
 10536              		.loc 1 1401 6 is_stmt 1 view .LVU3400
1401:src/display.c **** 	      gotdot = i;
 10537              		.loc 1 1401 9 is_stmt 0 view .LVU3401
 10538 0630 BAF1FF3F 		cmp	r10, #-1
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10539              		.loc 1 1405 9 view .LVU3402
 10540 0634 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1401:src/display.c **** 	      gotdot = i;
 10541              		.loc 1 1401 9 view .LVU3403
 10542 0636 45D0     		beq	.L1079
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10543              		.loc 1 1405 6 is_stmt 1 view .LVU3404
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10544              		.loc 1 1405 9 is_stmt 0 view .LVU3405
 10545 0638 2E2B     		cmp	r3, #46
 10546 063a 4ED0     		beq	.L1104
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10547              		.loc 1 1405 25 view .LVU3406
 10548 063c D345     		cmp	fp, r10
 10549 063e 43D0     		beq	.L1082
 10550              	.L1081:
1412:src/display.c **** 		i += segs_per_digit;
 10551              		.loc 1 1412 3 is_stmt 1 view .LVU3407
 10552 0640 5846     		mov	r0, fp
 10553 0642 2F21     		movs	r1, #47
 10554 0644 FFF7FEFF 		bl	set_dig
 10555              	.LVL1175:
1413:src/display.c **** 	      }
 10556              		.loc 1 1413 3 view .LVU3408
1413:src/display.c **** 	      }
ARM GAS  /tmp/ccdg5rgB.s 			page 308


 10557              		.loc 1 1413 5 is_stmt 0 view .LVU3409
 10558 0648 0BF1090B 		add	fp, fp, #9
 10559              	.LVL1176:
1413:src/display.c **** 	      }
 10560              		.loc 1 1413 5 view .LVU3410
 10561 064c 2B46     		mov	r3, r5
 10562              	.LVL1177:
 10563              	.L1083:
1399:src/display.c **** 	  if (*p == '.') {
 10564              		.loc 1 1399 11 is_stmt 1 view .LVU3411
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10565              		.loc 1 1395 9 is_stmt 0 view .LVU3412
 10566 064e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1399:src/display.c **** 	  if (*p == '.') {
 10567              		.loc 1 1399 12 view .LVU3413
 10568 0650 0135     		adds	r5, r5, #1
 10569              	.LVL1178:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10570              		.loc 1 1395 9 is_stmt 1 view .LVU3414
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10571              		.loc 1 1395 2 is_stmt 0 view .LVU3415
 10572 0652 0029     		cmp	r1, #0
 10573 0654 3FF441AF 		beq	.L1086
 10574              	.LVL1179:
 10575              	.L1085:
1397:src/display.c **** #endif
 10576              		.loc 1 1397 9 view .LVU3416
 10577 0658 A1F14403 		sub	r3, r1, #68
 10578 065c 012B     		cmp	r3, #1
 10579 065e 7FF63CAF 		bls	.L1086
1400:src/display.c **** 	    if (gotdot < 0)
 10580              		.loc 1 1400 4 is_stmt 1 view .LVU3417
1400:src/display.c **** 	    if (gotdot < 0)
 10581              		.loc 1 1400 7 is_stmt 0 view .LVU3418
 10582 0662 2E29     		cmp	r1, #46
 10583 0664 E4D0     		beq	.L1270
1434:src/display.c **** 	      i += segs_per_digit;
 10584              		.loc 1 1434 8 is_stmt 1 view .LVU3419
 10585 0666 5846     		mov	r0, fp
 10586 0668 FFF7FEFF 		bl	set_dig
 10587              	.LVL1180:
1435:src/display.c **** 	    }
 10588              		.loc 1 1435 8 view .LVU3420
1435:src/display.c **** 	    }
 10589              		.loc 1 1435 10 is_stmt 0 view .LVU3421
 10590 066c 0BF1090B 		add	fp, fp, #9
 10591              	.LVL1181:
1435:src/display.c **** 	    }
 10592              		.loc 1 1435 10 view .LVU3422
 10593 0670 2B46     		mov	r3, r5
 10594 0672 ECE7     		b	.L1083
 10595              	.L1299:
 10596              		.align	2
 10597              	.L1298:
 10598 0674 0C000000 		.word	.LANCHOR17+12
 10599 0678 08000000 		.word	.LC25
 10600 067c 18000000 		.word	.LC26
ARM GAS  /tmp/ccdg5rgB.s 			page 309


 10601 0680 00000000 		.word	LastDisplayedNumber
 10602 0684 00000000 		.word	DispMsg
 10603 0688 00000000 		.word	ShowRegister
 10604 068c 34000000 		.word	.LC27
 10605 0690 00000000 		.word	LastDisplayedExponent
 10606 0694 00000000 		.word	.LANCHOR20
 10607 0698 00000000 		.word	DispPlot
 10608 069c AC000000 		.word	.LC44
 10609 06a0 00000000 		.word	.LANCHOR21
 10610 06a4 38000000 		.word	.LC28
 10611 06a8 B4000000 		.word	.LC31
 10612 06ac 00000000 		.word	.LANCHOR22
 10613 06b0 00000000 		.word	.LANCHOR24
 10614 06b4 00000000 		.word	.LANCHOR0
 10615 06b8 56040000 		.word	argcmds+1110
 10616 06bc 3C000000 		.word	.LC29
 10617 06c0 BC000000 		.word	.LC30
 10618              	.L1079:
1402:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10619              		.loc 1 1402 8 is_stmt 1 view .LVU3423
 10620              	.LVL1182:
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10621              		.loc 1 1405 6 view .LVU3424
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10622              		.loc 1 1405 9 is_stmt 0 view .LVU3425
 10623 06c4 2E2B     		cmp	r3, #46
 10624 06c6 07D0     		beq	.L1271
 10625              	.LVL1183:
 10626              	.L1082:
1416:src/display.c **** 		  i += segs_per_digit;
 10627              		.loc 1 1416 3 is_stmt 1 view .LVU3426
1416:src/display.c **** 		  i += segs_per_digit;
 10628              		.loc 1 1416 6 is_stmt 0 view .LVU3427
 10629 06c8 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10630 06ca 012B     		cmp	r3, #1
 10631 06cc 51D9     		bls	.L1084
1417:src/display.c **** 		}
 10632              		.loc 1 1417 5 is_stmt 1 view .LVU3428
 10633              	.LVL1184:
1417:src/display.c **** 		}
 10634              		.loc 1 1417 5 is_stmt 0 view .LVU3429
 10635 06ce DA46     		mov	r10, fp
 10636 06d0 2B46     		mov	r3, r5
1417:src/display.c **** 		}
 10637              		.loc 1 1417 7 view .LVU3430
 10638 06d2 0BF1090B 		add	fp, fp, #9
 10639              	.LVL1185:
1417:src/display.c **** 		}
 10640              		.loc 1 1417 7 view .LVU3431
 10641 06d6 BAE7     		b	.L1083
 10642              	.LVL1186:
 10643              	.L1271:
1405:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10644              		.loc 1 1405 9 view .LVU3432
 10645 06d8 DA46     		mov	r10, fp
 10646              	.LVL1187:
 10647              	.L1104:
ARM GAS  /tmp/ccdg5rgB.s 			page 310


1406:src/display.c **** 		p++;
 10648              		.loc 1 1406 8 is_stmt 1 view .LVU3433
1407:src/display.c **** 	      }
 10649              		.loc 1 1407 3 view .LVU3434
1407:src/display.c **** 	      }
 10650              		.loc 1 1407 4 is_stmt 0 view .LVU3435
 10651 06da 0135     		adds	r5, r5, #1
 10652              	.LVL1188:
1407:src/display.c **** 	      }
 10653              		.loc 1 1407 4 view .LVU3436
 10654 06dc B0E7     		b	.L1081
 10655              	.LVL1189:
 10656              	.L1267:
1407:src/display.c **** 	      }
 10657              		.loc 1 1407 4 view .LVU3437
 10658              	.LBE582:
 10659              	.LBE595:
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10660              		.loc 1 2771 6 is_stmt 1 view .LVU3438
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10661              		.loc 1 2771 11 is_stmt 0 view .LVU3439
 10662 06de 2189     		ldrh	r1, [r4, #8]
 10663 06e0 FFF7FEFF 		bl	num_arg_0
 10664              	.LVL1190:
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10665              		.loc 1 2771 11 view .LVU3440
 10666 06e4 0346     		mov	r3, r0
 10667              	.LVL1191:
2771:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10668              		.loc 1 2771 11 view .LVU3441
 10669 06e6 2CE7     		b	.L973
 10670              	.LVL1192:
 10671              	.L986:
2833:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10672              		.loc 1 2833 9 is_stmt 1 view .LVU3442
2833:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10673              		.loc 1 2833 12 is_stmt 0 view .LVU3443
 10674 06e8 BAF1000F 		cmp	r10, #0
 10675 06ec 70D1     		bne	.L1272
2888:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10676              		.loc 1 2888 9 is_stmt 1 view .LVU3444
2888:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10677              		.loc 1 2888 12 is_stmt 0 view .LVU3445
 10678 06ee 1F07     		lsls	r7, r3, #28
 10679 06f0 00F1D480 		bmi	.L1273
2903:src/display.c **** 	  show_status();
 10680              		.loc 1 2903 9 is_stmt 1 view .LVU3446
2903:src/display.c **** 	  show_status();
 10681              		.loc 1 2903 19 is_stmt 0 view .LVU3447
 10682 06f4 277B     		ldrb	r7, [r4, #12]	@ zero_extendqisi2
2903:src/display.c **** 	  show_status();
 10683              		.loc 1 2903 12 view .LVU3448
 10684 06f6 002F     		cmp	r7, #0
 10685 06f8 40F00B81 		bne	.L1274
2906:src/display.c **** 	  show_label();
 10686              		.loc 1 2906 9 is_stmt 1 view .LVU3449
2906:src/display.c **** 	  show_label();
ARM GAS  /tmp/ccdg5rgB.s 			page 311


 10687              		.loc 1 2906 13 is_stmt 0 view .LVU3450
 10688 06fc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2906:src/display.c **** 	  show_label();
 10689              		.loc 1 2906 12 view .LVU3451
 10690 06fe 5A07     		lsls	r2, r3, #29
 10691 0700 00F1E280 		bmi	.L1275
2909:src/display.c **** 	  show_registers();
 10692              		.loc 1 2909 9 is_stmt 1 view .LVU3452
2909:src/display.c **** 	  show_registers();
 10693              		.loc 1 2909 12 is_stmt 0 view .LVU3453
 10694 0704 1807     		lsls	r0, r3, #28
 10695 0706 00F13D83 		bmi	.L1276
2919:src/display.c **** 	  if (DispMsg) { 
 10696              		.loc 1 2919 9 is_stmt 1 view .LVU3454
2919:src/display.c **** 	  if (DispMsg) { 
 10697              		.loc 1 2919 12 is_stmt 0 view .LVU3455
 10698 070a 4806     		lsls	r0, r1, #25
 10699 070c 40F14782 		bpl	.L1037
2920:src/display.c **** 	    set_status(DispMsg);
 10700              		.loc 1 2920 4 is_stmt 1 view .LVU3456
2920:src/display.c **** 	    set_status(DispMsg);
 10701              		.loc 1 2920 8 is_stmt 0 view .LVU3457
 10702 0710 CC4F     		ldr	r7, .L1300
 10703 0712 3B68     		ldr	r3, [r7]
2920:src/display.c **** 	    set_status(DispMsg);
 10704              		.loc 1 2920 7 view .LVU3458
 10705 0714 002B     		cmp	r3, #0
 10706 0716 00F0B081 		beq	.L1038
2921:src/display.c **** 	  } else if (DispPlot) {
 10707              		.loc 1 2921 6 is_stmt 1 view .LVU3459
 10708 071a 1846     		mov	r0, r3
 10709 071c FFF7FEFF 		bl	set_status
 10710              	.LVL1193:
2973:src/display.c ****       nostk:
 10711              		.loc 1 2973 2 view .LVU3460
 10712 0720 C94B     		ldr	r3, .L1300+4
 10713 0722 0093     		str	r3, [sp]
 10714 0724 FFF7FEFF 		bl	show_stack
 10715              	.LVL1194:
2975:src/display.c **** 	if (!skip) {
 10716              		.loc 1 2975 2 view .LVU3461
 10717 0728 FFF7FEFF 		bl	show_flags
 10718              	.LVL1195:
2976:src/display.c **** 	  if (State2.runmode) {
 10719              		.loc 1 2976 2 view .LVU3462
 10720 072c ABE4     		b	.L967
 10721              	.LVL1196:
 10722              	.L1266:
 10723              	.LBB596:
 10724              	.LBB583:
 10725              	.LBB574:
1462:src/display.c **** #  endif
 10726              		.loc 1 1462 6 view .LVU3463
1465:src/display.c **** 	      flags |= 2;
 10727              		.loc 1 1465 6 view .LVU3464
1466:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10728              		.loc 1 1466 14 is_stmt 0 view .LVU3465
ARM GAS  /tmp/ccdg5rgB.s 			page 312


 10729 072e 442A     		cmp	r2, #68
 10730 0730 14BF     		ite	ne
 10731 0732 4FF00C0A 		movne	r10, #12
 10732 0736 4FF00E0A 		moveq	r10, #14
 10733              	.LVL1197:
1467:src/display.c **** 	      flags |= 16;
 10734              		.loc 1 1467 6 is_stmt 1 view .LVU3466
1467:src/display.c **** 	      flags |= 16;
 10735              		.loc 1 1467 9 is_stmt 0 view .LVU3467
 10736 073a BBF15A0F 		cmp	fp, #90
1468:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10737              		.loc 1 1468 8 is_stmt 1 view .LVU3468
1468:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10738              		.loc 1 1468 14 is_stmt 0 view .LVU3469
 10739 073e C8BF     		it	gt
 10740 0740 4AF0100A 		orrgt	r10, r10, #16
 10741              	.LVL1198:
1469:src/display.c **** 	  }
 10742              		.loc 1 1469 6 is_stmt 1 view .LVU3470
 10743 0744 681C     		adds	r0, r5, #1
 10744 0746 FFF7FEFF 		bl	s_to_i
 10745              	.LVL1199:
 10746 074a 5146     		mov	r1, r10
 10747 074c 0022     		movs	r2, #0
 10748 074e FFF7FEFF 		bl	set_exp
 10749              	.LVL1200:
1469:src/display.c **** 	  }
 10750              		.loc 1 1469 6 is_stmt 0 view .LVU3471
 10751              	.LBE574:
 10752              	.LBE583:
 10753              	.LBE596:
3013:src/display.c **** 	      goto finish;
 10754              		.loc 1 3013 6 is_stmt 1 view .LVU3472
3013:src/display.c **** 	      goto finish;
 10755              		.loc 1 3013 9 is_stmt 0 view .LVU3473
 10756 0752 D8F80030 		ldr	r3, [r8]
 10757 0756 002B     		cmp	r3, #0
 10758 0758 3FF4C5AD 		beq	.L1253
 10759 075c E5E6     		b	.L1165
 10760              	.LVL1201:
 10761              	.L1070:
 10762              	.LBB597:
 10763              	.LBB584:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10764              		.loc 1 1395 9 is_stmt 1 view .LVU3474
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10765              		.loc 1 1395 2 is_stmt 0 view .LVU3475
 10766 075e 0029     		cmp	r1, #0
 10767 0760 00F05581 		beq	.L1114
1338:src/display.c **** #endif
 10768              		.loc 1 1338 11 view .LVU3476
 10769 0764 CDF804B0 		str	fp, [sp, #4]
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10770              		.loc 1 1332 11 view .LVU3477
 10771 0768 4FF0FF3A 		mov	r10, #-1
 10772              	.LVL1202:
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
ARM GAS  /tmp/ccdg5rgB.s 			page 313


 10773              		.loc 1 1332 11 view .LVU3478
 10774 076c 74E7     		b	.L1085
 10775              	.LVL1203:
 10776              	.L1120:
1332:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10777              		.loc 1 1332 11 view .LVU3479
 10778              	.LBE584:
 10779              	.LBE597:
 10780              	.LBB598:
 10781              	.LBB550:
3033:src/display.c **** 	      while(*b) {
 10782              		.loc 1 3033 10 view .LVU3480
 10783 076e 5A1C     		adds	r2, r3, #1
 10784 0770 DDE4     		b	.L1097
 10785              	.LVL1204:
 10786              	.L1084:
3033:src/display.c **** 	      while(*b) {
 10787              		.loc 1 3033 10 view .LVU3481
 10788              	.LBE550:
 10789              	.LBE598:
 10790              	.LBB599:
 10791              	.LBB585:
1420:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10792              		.loc 1 1420 5 is_stmt 1 view .LVU3482
 10793 0772 B64B     		ldr	r3, .L1300+8
 10794 0774 0022     		movs	r2, #0
 10795 0776 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10796 0778 ABF10900 		sub	r0, fp, #9
 10797 077c FFF7FEFF 		bl	set_decimal
 10798              	.LVL1205:
 10799 0780 DA46     		mov	r10, fp
 10800 0782 2B46     		mov	r3, r5
 10801 0784 63E7     		b	.L1083
 10802              	.LVL1206:
 10803              	.L1269:
1420:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10804              		.loc 1 1420 5 is_stmt 0 view .LVU3483
 10805              	.LBE585:
 10806              	.LBE599:
2794:src/display.c **** 	    *bp++ = '_';
 10807              		.loc 1 2794 6 is_stmt 1 view .LVU3484
2794:src/display.c **** 	    *bp++ = '_';
 10808              		.loc 1 2794 12 is_stmt 0 view .LVU3485
 10809 0786 1122     		movs	r2, #17
2795:src/display.c **** 	  } else {
 10810              		.loc 1 2795 12 view .LVU3486
 10811 0788 5F23     		movs	r3, #95
2794:src/display.c **** 	    *bp++ = '_';
 10812              		.loc 1 2794 12 view .LVU3487
 10813 078a 0270     		strb	r2, [r0]
2795:src/display.c **** 	  } else {
 10814              		.loc 1 2795 6 is_stmt 1 view .LVU3488
 10815              	.LVL1207:
2795:src/display.c **** 	  } else {
 10816              		.loc 1 2795 12 is_stmt 0 view .LVU3489
 10817 078c 4370     		strb	r3, [r0, #1]
 10818 078e 7DE5     		b	.L1003
ARM GAS  /tmp/ccdg5rgB.s 			page 314


 10819              	.LVL1208:
 10820              	.L1059:
2994:src/display.c **** 		  }
 10821              		.loc 1 2994 7 is_stmt 1 view .LVU3490
 10822 0790 6E20     		movs	r0, #110
 10823 0792 FFF7FEFF 		bl	format_reg
 10824              	.LVL1209:
3013:src/display.c **** 	      goto finish;
 10825              		.loc 1 3013 6 view .LVU3491
3013:src/display.c **** 	      goto finish;
 10826              		.loc 1 3013 9 is_stmt 0 view .LVU3492
 10827 0796 D8F80030 		ldr	r3, [r8]
 10828 079a 002B     		cmp	r3, #0
 10829 079c 3FF4A4AD 		beq	.L1060
 10830 07a0 28E5     		b	.L1061
 10831              	.LVL1210:
 10832              	.L1075:
 10833              	.LBB600:
 10834              	.LBB586:
 10835              	.LBB575:
1381:src/display.c **** 	      gotdot = 0;
 10836              		.loc 1 1381 11 is_stmt 1 view .LVU3493
1381:src/display.c **** 	      gotdot = 0;
 10837              		.loc 1 1381 14 is_stmt 0 view .LVU3494
 10838 07a2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10839              	.LVL1211:
1381:src/display.c **** 	      gotdot = 0;
 10840              		.loc 1 1381 14 view .LVU3495
 10841 07a4 2E2A     		cmp	r2, #46
 10842 07a6 00F04481 		beq	.L1277
 10843              	.LVL1212:
1388:src/display.c **** 	    overflow_to_left = 1;
 10844              		.loc 1 1388 6 is_stmt 1 view .LVU3496
 10845 07aa 3C21     		movs	r1, #60
 10846              	.LVL1213:
1388:src/display.c **** 	    overflow_to_left = 1;
 10847              		.loc 1 1388 6 is_stmt 0 view .LVU3497
 10848 07ac FFF7FEFF 		bl	set_dig
 10849              	.LVL1214:
1389:src/display.c **** 	  }
 10850              		.loc 1 1389 6 is_stmt 1 view .LVU3498
1389:src/display.c **** 	  }
 10851              		.loc 1 1389 6 is_stmt 0 view .LVU3499
 10852 07b0 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1389:src/display.c **** 	  }
 10853              		.loc 1 1389 6 view .LVU3500
 10854              	.LBE575:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10855              		.loc 1 1395 9 is_stmt 1 view .LVU3501
 10856              	.LBB576:
1375:src/display.c **** 	    if (gotdot <= j) {
 10857              		.loc 1 1375 8 is_stmt 0 view .LVU3502
 10858 07b2 4FF0090B 		mov	fp, #9
 10859              	.LBE576:
1395:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10860              		.loc 1 1395 2 view .LVU3503
 10861 07b6 0029     		cmp	r1, #0
ARM GAS  /tmp/ccdg5rgB.s 			page 315


 10862 07b8 3FF4ACAE 		beq	.L1071
 10863              	.LBB577:
1387:src/display.c **** 	    set_dig(0, '<');
 10864              		.loc 1 1387 18 view .LVU3504
 10865 07bc 4FF0FF3A 		mov	r10, #-1
 10866              	.LVL1215:
1375:src/display.c **** 	    if (gotdot <= j) {
 10867              		.loc 1 1375 8 view .LVU3505
 10868 07c0 4FF0090B 		mov	fp, #9
 10869 07c4 31E7     		b	.L1106
 10870              	.LVL1216:
 10871              	.L1115:
1375:src/display.c **** 	    if (gotdot <= j) {
 10872              		.loc 1 1375 8 view .LVU3506
 10873              	.LBE577:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10874              		.loc 1 1355 4 view .LVU3507
 10875 07c6 8346     		mov	fp, r0
1338:src/display.c **** #endif
 10876              		.loc 1 1338 11 view .LVU3508
 10877 07c8 0190     		str	r0, [sp, #4]
 10878              	.LBB578:
1391:src/display.c **** 	}
 10879              		.loc 1 1391 16 view .LVU3509
 10880 07ca 4FF0FF3A 		mov	r10, #-1
 10881              	.LVL1217:
1391:src/display.c **** 	}
 10882              		.loc 1 1391 16 view .LVU3510
 10883 07ce 43E7     		b	.L1085
 10884              	.LVL1218:
 10885              	.L1272:
1391:src/display.c **** 	}
 10886              		.loc 1 1391 16 view .LVU3511
 10887              	.LBE578:
 10888              	.LBE586:
 10889              	.LBE600:
 10890              	.LBB601:
2834:src/display.c **** 	  char b2[16];
 10891              		.loc 1 2834 4 is_stmt 1 view .LVU3512
2834:src/display.c **** 	  char b2[16];
 10892              		.loc 1 2834 45 is_stmt 0 view .LVU3513
 10893 07d0 9F4B     		ldr	r3, .L1300+12
 10894 07d2 1B68     		ldr	r3, [r3]
 10895 07d4 B3F8DC07 		ldrh	r0, [r3, #2012]
2834:src/display.c **** 	  char b2[16];
 10896              		.loc 1 2834 22 view .LVU3514
 10897 07d8 C0F34610 		ubfx	r0, r0, #5, #7
 10898 07dc FFF7FEFF 		bl	current_catalogue
 10899              	.LVL1219:
2838:src/display.c **** 	  p = catcmd(op, b2);
 10900              		.loc 1 2838 9 view .LVU3515
 10901 07e0 9C49     		ldr	r1, .L1300+16
2834:src/display.c **** 	  char b2[16];
 10902              		.loc 1 2834 22 view .LVU3516
 10903 07e2 0546     		mov	r5, r0
 10904              	.LVL1220:
2835:src/display.c **** 	  const char *p;
ARM GAS  /tmp/ccdg5rgB.s 			page 316


 10905              		.loc 1 2835 4 is_stmt 1 view .LVU3517
2836:src/display.c **** 
 10906              		.loc 1 2836 4 view .LVU3518
2838:src/display.c **** 	  p = catcmd(op, b2);
 10907              		.loc 1 2838 4 view .LVU3519
2838:src/display.c **** 	  p = catcmd(op, b2);
 10908              		.loc 1 2838 9 is_stmt 0 view .LVU3520
 10909 07e4 1EA8     		add	r0, sp, #120
 10910              	.LVL1221:
2838:src/display.c **** 	  p = catcmd(op, b2);
 10911              		.loc 1 2838 9 view .LVU3521
 10912 07e6 FFF7FEFF 		bl	scopy
 10913              	.LVL1222:
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10914              		.loc 1 2839 8 view .LVU3522
 10915 07ea 08A9     		add	r1, sp, #32
2838:src/display.c **** 	  p = catcmd(op, b2);
 10916              		.loc 1 2838 9 view .LVU3523
 10917 07ec 0646     		mov	r6, r0
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10918              		.loc 1 2839 8 view .LVU3524
 10919 07ee 2846     		mov	r0, r5
 10920              	.LVL1223:
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10921              		.loc 1 2839 4 is_stmt 1 view .LVU3525
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10922              		.loc 1 2839 8 is_stmt 0 view .LVU3526
 10923 07f0 FFF7FEFF 		bl	catcmd
 10924              	.LVL1224:
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10925              		.loc 1 2840 7 view .LVU3527
 10926 07f4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10927 07f6 142B     		cmp	r3, #20
2839:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10928              		.loc 1 2839 8 view .LVU3528
 10929 07f8 0146     		mov	r1, r0
 10930              	.LVL1225:
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10931              		.loc 1 2840 4 is_stmt 1 view .LVU3529
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10932              		.loc 1 2840 7 is_stmt 0 view .LVU3530
 10933 07fa 07D0     		beq	.L988
2840:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10934              		.loc 1 2840 29 discriminator 1 view .LVU3531
 10935 07fc 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10936 07fe 9B07     		lsls	r3, r3, #30
 10937 0800 04D5     		bpl	.L988
2841:src/display.c **** 	  bp = scopy(bp, p);
 10938              		.loc 1 2841 6 is_stmt 1 view .LVU3532
2841:src/display.c **** 	  bp = scopy(bp, p);
 10939              		.loc 1 2841 9 is_stmt 0 view .LVU3533
 10940 0802 3346     		mov	r3, r6
 10941              	.LVL1226:
2841:src/display.c **** 	  bp = scopy(bp, p);
 10942              		.loc 1 2841 12 view .LVU3534
 10943 0804 1422     		movs	r2, #20
 10944 0806 03F8012B 		strb	r2, [r3], #1
ARM GAS  /tmp/ccdg5rgB.s 			page 317


 10945              	.LVL1227:
2841:src/display.c **** 	  bp = scopy(bp, p);
 10946              		.loc 1 2841 9 view .LVU3535
 10947 080a 1E46     		mov	r6, r3
 10948              	.LVL1228:
 10949              	.L988:
2842:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10950              		.loc 1 2842 4 is_stmt 1 view .LVU3536
2842:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10951              		.loc 1 2842 9 is_stmt 0 view .LVU3537
 10952 080c 3046     		mov	r0, r6
 10953              	.LVL1229:
2842:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10954              		.loc 1 2842 9 view .LVU3538
 10955 080e FFF7FEFF 		bl	scopy
 10956              	.LVL1230:
2843:src/display.c **** 	    // State2.disp_small = 1;
 10957              		.loc 1 2843 4 is_stmt 1 view .LVU3539
2843:src/display.c **** 	    // State2.disp_small = 1;
 10958              		.loc 1 2843 7 is_stmt 0 view .LVU3540
 10959 0812 AAF11003 		sub	r3, r10, #16
 10960 0816 012B     		cmp	r3, #1
 10961 0818 2DD9     		bls	.L1278
2850:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10962              		.loc 1 2850 11 is_stmt 1 view .LVU3541
2850:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10963              		.loc 1 2850 15 is_stmt 0 view .LVU3542
 10964 081a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2850:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10965              		.loc 1 2850 14 view .LVU3543
 10966 081c 13F04003 		ands	r3, r3, #64
 10967 0820 08D0     		beq	.L1110
2851:src/display.c **** 	      decNumber x, r;
 10968              		.loc 1 2851 6 is_stmt 1 view .LVU3544
2851:src/display.c **** 	      decNumber x, r;
 10969              		.loc 1 2851 9 is_stmt 0 view .LVU3545
 10970 0822 BAF1120F 		cmp	r10, #18
 10971 0826 00F0F682 		beq	.L1279
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10972              		.loc 1 2871 13 is_stmt 1 view .LVU3546
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10973              		.loc 1 2871 46 is_stmt 0 view .LVU3547
 10974 082a A5F58873 		sub	r3, r5, #272
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10975              		.loc 1 2871 16 view .LVU3548
 10976 082e 0D2B     		cmp	r3, #13
 10977 0830 40F2C782 		bls	.L1280
 10978              	.L1110:
2871:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10979              		.loc 1 2871 16 view .LVU3549
 10980              	.LBE601:
2685:src/display.c **** 	int x_disp = 0;
 10981              		.loc 1 2685 6 view .LVU3550
 10982 0834 0025     		movs	r5, #0
 10983              	.LVL1231:
 10984              	.L992:
 10985              	.LBB611:
ARM GAS  /tmp/ccdg5rgB.s 			page 318


2880:src/display.c **** 	    set_status_top(buf);
 10986              		.loc 1 2880 4 is_stmt 1 view .LVU3551
2880:src/display.c **** 	    set_status_top(buf);
 10987              		.loc 1 2880 7 is_stmt 0 view .LVU3552
 10988 0836 BBF1000F 		cmp	fp, #0
 10989 083a 17D0     		beq	.L997
2881:src/display.c **** 	    no_status_top = 1;
 10990              		.loc 1 2881 6 is_stmt 1 view .LVU3553
 10991              	.LVL1232:
 10992              	.LBB602:
 10993              	.LBI602:
3639:src/display.c **** 	if (no_status_top) return;
 10994              		.loc 1 3639 19 view .LVU3554
 10995              	.LBB603:
3640:src/display.c **** 	if (State2.runmode) {
 10996              		.loc 1 3640 2 view .LVU3555
3640:src/display.c **** 	if (State2.runmode) {
 10997              		.loc 1 3640 5 is_stmt 0 view .LVU3556
 10998 083c B9F90030 		ldrsh	r3, [r9]
 10999 0840 13B9     		cbnz	r3, .L998
 11000 0842 1EA8     		add	r0, sp, #120
 11001              	.LVL1233:
3640:src/display.c **** 	if (State2.runmode) {
 11002              		.loc 1 3640 5 view .LVU3557
 11003 0844 FFF7FEFF 		bl	set_status_top.part.0
 11004              	.LVL1234:
 11005              	.L998:
3640:src/display.c **** 	if (State2.runmode) {
 11006              		.loc 1 3640 5 view .LVU3558
 11007              	.LBE603:
 11008              	.LBE602:
2882:src/display.c **** 	    annuc = 1;
 11009              		.loc 1 2882 6 is_stmt 1 view .LVU3559
2882:src/display.c **** 	    annuc = 1;
 11010              		.loc 1 2882 20 is_stmt 0 view .LVU3560
 11011 0848 0123     		movs	r3, #1
2883:src/display.c **** 	  }
 11012              		.loc 1 2883 12 view .LVU3561
 11013 084a 5E46     		mov	r6, fp
2882:src/display.c **** 	    annuc = 1;
 11014              		.loc 1 2882 20 view .LVU3562
 11015 084c A9F80030 		strh	r3, [r9]	@ movhi
2883:src/display.c **** 	  }
 11016              		.loc 1 2883 6 is_stmt 1 view .LVU3563
 11017              	.LVL1235:
 11018              	.L999:
2883:src/display.c **** 	  }
 11019              		.loc 1 2883 6 is_stmt 0 view .LVU3564
 11020              	.LBE611:
2973:src/display.c ****       nostk:
 11021              		.loc 1 2973 2 is_stmt 1 view .LVU3565
 11022 0850 FFF7FEFF 		bl	show_stack
 11023              	.LVL1236:
 11024              	.LDL1:
2975:src/display.c **** 	if (!skip) {
 11025              		.loc 1 2975 2 view .LVU3566
 11026 0854 FFF7FEFF 		bl	show_flags
ARM GAS  /tmp/ccdg5rgB.s 			page 319


 11027              	.LVL1237:
2976:src/display.c **** 	  if (State2.runmode) {
 11028              		.loc 1 2976 2 view .LVU3567
2976:src/display.c **** 	  if (State2.runmode) {
 11029              		.loc 1 2976 5 is_stmt 0 view .LVU3568
 11030 0858 002D     		cmp	r5, #0
 11031 085a 00F0B281 		beq	.L1251
 11032              	.LVL1238:
 11033              	.L1000:
3043:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 11034              		.loc 1 3043 2 is_stmt 1 view .LVU3569
 11035 085e FFF7FEFF 		bl	set_annunciators
 11036              	.LVL1239:
3044:src/display.c **** 	  ShowRPN = 0;
 11037              		.loc 1 3044 2 view .LVU3570
 11038 0862 794B     		ldr	r3, .L1300+4
 11039 0864 774F     		ldr	r7, .L1300
 11040 0866 7C4D     		ldr	r5, .L1300+20
 11041 0868 0093     		str	r3, [sp]
 11042 086a 96E4     		b	.L962
 11043              	.LVL1240:
 11044              	.L997:
 11045              	.LBB612:
2886:src/display.c **** 	  }
 11046              		.loc 1 2886 6 view .LVU3571
 11047 086c 1EA8     		add	r0, sp, #120
 11048 086e FFF7FEFF 		bl	set_status
 11049              	.LVL1241:
 11050              	.LBE612:
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11051              		.loc 1 2683 6 is_stmt 0 view .LVU3572
 11052 0872 5E46     		mov	r6, fp
 11053 0874 ECE7     		b	.L999
 11054              	.LVL1242:
 11055              	.L1278:
 11056              	.LBB613:
2845:src/display.c **** 	      set_digits_string("0 to 255", 0);
 11057              		.loc 1 2845 6 is_stmt 1 view .LVU3573
2845:src/display.c **** 	      set_digits_string("0 to 255", 0);
 11058              		.loc 1 2845 9 is_stmt 0 view .LVU3574
 11059 0876 B5F5274F 		cmp	r5, #42752
 11060 087a 00F0B882 		beq	.L990
2845:src/display.c **** 	      set_digits_string("0 to 255", 0);
 11061              		.loc 1 2845 41 discriminator 1 view .LVU3575
 11062 087e B5F5284F 		cmp	r5, #43008
 11063 0882 00F0B482 		beq	.L990
2848:src/display.c **** 	    skip = 1;
 11064              		.loc 1 2848 8 is_stmt 1 view .LVU3576
2848:src/display.c **** 	    skip = 1;
 11065              		.loc 1 2848 14 is_stmt 0 view .LVU3577
 11066 0886 05F07F00 		and	r0, r5, #127
 11067 088a 0021     		movs	r1, #0
 11068 088c FFF7FEFF 		bl	get_const
 11069              	.LVL1243:
2848:src/display.c **** 	    skip = 1;
 11070              		.loc 1 2848 8 view .LVU3578
 11071 0890 0022     		movs	r2, #0
ARM GAS  /tmp/ccdg5rgB.s 			page 320


 11072 0892 1146     		mov	r1, r2
 11073 0894 FFF7FEFF 		bl	set_x
 11074              	.LVL1244:
2849:src/display.c **** 	  } else if (State2.runmode) {
 11075              		.loc 1 2849 11 view .LVU3579
 11076 0898 0125     		movs	r5, #1
 11077              	.LVL1245:
2849:src/display.c **** 	  } else if (State2.runmode) {
 11078              		.loc 1 2849 11 view .LVU3580
 11079 089a CCE7     		b	.L992
 11080              	.LVL1246:
 11081              	.L1273:
2849:src/display.c **** 	  } else if (State2.runmode) {
 11082              		.loc 1 2849 11 view .LVU3581
 11083              	.LBE613:
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11084              		.loc 1 2889 4 is_stmt 1 view .LVU3582
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11085              		.loc 1 2889 42 is_stmt 0 view .LVU3583
 11086 089c E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 11087 089e 6F49     		ldr	r1, .L1300+24
 11088 08a0 0423     		movs	r3, #4
 11089 08a2 03EB0213 		add	r3, r3, r2, lsl #4
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11090              		.loc 1 2889 9 view .LVU3584
 11091 08a6 1944     		add	r1, r1, r3
 11092 08a8 2722     		movs	r2, #39
 11093 08aa 1EA8     		add	r0, sp, #120
 11094              	.LVL1247:
2889:src/display.c **** 	  if (State2.numdigit > 0) {
 11095              		.loc 1 2889 9 view .LVU3585
 11096 08ac FFF7FEFF 		bl	scopy_char
 11097              	.LVL1248:
2890:src/display.c **** 	    *bp++ = (char) State2.digval;
 11098              		.loc 1 2890 7 view .LVU3586
 11099 08b0 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11100              	.LVL1249:
2890:src/display.c **** 	    *bp++ = (char) State2.digval;
 11101              		.loc 1 2890 4 is_stmt 1 view .LVU3587
2890:src/display.c **** 	    *bp++ = (char) State2.digval;
 11102              		.loc 1 2890 7 is_stmt 0 view .LVU3588
 11103 08b2 002B     		cmp	r3, #0
 11104 08b4 3FF4EAAC 		beq	.L1003
2891:src/display.c **** 	    if (State2.numdigit > 1)
 11105              		.loc 1 2891 6 is_stmt 1 view .LVU3589
 11106              	.LVL1250:
2891:src/display.c **** 	    if (State2.numdigit > 1)
 11107              		.loc 1 2891 14 is_stmt 0 view .LVU3590
 11108 08b8 2389     		ldrh	r3, [r4, #8]
 11109 08ba 0370     		strb	r3, [r0]
2892:src/display.c **** 	      *bp++ = State2.digval2;
 11110              		.loc 1 2892 6 is_stmt 1 view .LVU3591
2892:src/display.c **** 	      *bp++ = State2.digval2;
 11111              		.loc 1 2892 9 is_stmt 0 view .LVU3592
 11112 08bc E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 11113 08be 012B     		cmp	r3, #1
2893:src/display.c **** 	  }
ARM GAS  /tmp/ccdg5rgB.s 			page 321


 11114              		.loc 1 2893 8 is_stmt 1 view .LVU3593
 11115              	.LVL1251:
2893:src/display.c **** 	  }
 11116              		.loc 1 2893 22 is_stmt 0 view .LVU3594
 11117 08c0 84BF     		itt	hi
 11118 08c2 A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2893:src/display.c **** 	  }
 11119              		.loc 1 2893 14 view .LVU3595
 11120 08c4 4370     		strbhi	r3, [r0, #1]
 11121 08c6 E1E4     		b	.L1003
 11122              	.LVL1252:
 11123              	.L1275:
2907:src/display.c **** 	  skip = 1;
 11124              		.loc 1 2907 4 is_stmt 1 view .LVU3596
 11125              	.LBB614:
 11126              	.LBI614:
2550:src/display.c **** 	char buf[16];
 11127              		.loc 1 2550 19 view .LVU3597
 11128              	.LBB615:
2551:src/display.c **** 	unsigned short int pc = State2.digval;
 11129              		.loc 1 2551 2 view .LVU3598
2552:src/display.c **** 	unsigned int op = getprog(pc);
 11130              		.loc 1 2552 2 view .LVU3599
2552:src/display.c **** 	unsigned int op = getprog(pc);
 11131              		.loc 1 2552 21 is_stmt 0 view .LVU3600
 11132 08c8 B4F808B0 		ldrh	fp, [r4, #8]
 11133              	.LVL1253:
2553:src/display.c **** 	int n = nLIB(pc);
 11134              		.loc 1 2553 2 is_stmt 1 view .LVU3601
2558:src/display.c **** #ifndef REALBUILD
 11135              		.loc 1 2558 27 is_stmt 0 view .LVU3602
 11136 08cc DFF8A0A1 		ldr	r10, .L1300+44
 11137              	.LVL1254:
2553:src/display.c **** 	int n = nLIB(pc);
 11138              		.loc 1 2553 20 view .LVU3603
 11139 08d0 5846     		mov	r0, fp
 11140 08d2 FFF7FEFF 		bl	getprog
 11141              	.LVL1255:
 11142 08d6 4FEA9B35 		lsr	r5, fp, #14
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11143              		.loc 1 2557 2 view .LVU3604
 11144 08da 15A9     		add	r1, sp, #84
2553:src/display.c **** 	int n = nLIB(pc);
 11145              		.loc 1 2553 20 view .LVU3605
 11146 08dc 8046     		mov	r8, r0
 11147              	.LVL1256:
2554:src/display.c **** 	unsigned short int lblpc;
 11148              		.loc 1 2554 2 is_stmt 1 view .LVU3606
2555:src/display.c **** 
 11149              		.loc 1 2555 2 view .LVU3607
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11150              		.loc 1 2557 2 view .LVU3608
2558:src/display.c **** #ifndef REALBUILD
 11151              		.loc 1 2558 27 is_stmt 0 view .LVU3609
 11152 08de 05EB8505 		add	r5, r5, r5, lsl #2
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11153              		.loc 1 2557 2 view .LVU3610
ARM GAS  /tmp/ccdg5rgB.s 			page 322


 11154 08e2 FFF7FEFF 		bl	prt
 11155              	.LVL1257:
2557:src/display.c **** 	set_digits_string(libname[n], 0);
 11156              		.loc 1 2557 2 view .LVU3611
 11157 08e6 FFF7FEFF 		bl	set_status
 11158              	.LVL1258:
2558:src/display.c **** #ifndef REALBUILD
 11159              		.loc 1 2558 2 is_stmt 1 view .LVU3612
 11160 08ea 0AEB0500 		add	r0, r10, r5
 11161 08ee 3946     		mov	r1, r7
 11162 08f0 FFF7FEFF 		bl	set_digits_string
 11163              	.LVL1259:
2560:src/display.c **** #endif
 11164              		.loc 1 2560 2 view .LVU3613
 11165 08f4 5A4B     		ldr	r3, .L1300+28
 11166 08f6 5B48     		ldr	r0, .L1300+32
 11167 08f8 03EB4501 		add	r1, r3, r5, lsl #1
 11168 08fc FFF7FEFF 		bl	scopy
 11169              	.LVL1260:
2563:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11170              		.loc 1 2563 2 view .LVU3614
2563:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11171              		.loc 1 2563 5 is_stmt 0 view .LVU3615
 11172 0900 18F4704F 		tst	r8, #61440
 11173 0904 40F00C82 		bne	.L1281
 11174              	.LVL1261:
 11175              	.L1254:
2563:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 11176              		.loc 1 2563 5 view .LVU3616
 11177              	.LBE615:
 11178              	.LBE614:
2973:src/display.c ****       nostk:
 11179              		.loc 1 2973 2 is_stmt 1 view .LVU3617
 11180 0908 FFF7FEFF 		bl	show_stack
 11181              	.LVL1262:
2975:src/display.c **** 	if (!skip) {
 11182              		.loc 1 2975 2 view .LVU3618
 11183 090c FFF7FEFF 		bl	show_flags
 11184              	.LVL1263:
2976:src/display.c **** 	  if (State2.runmode) {
 11185              		.loc 1 2976 2 view .LVU3619
 11186 0910 A5E7     		b	.L1000
 11187              	.LVL1264:
 11188              	.L1274:
2904:src/display.c **** 	  skip = 1;
 11189              		.loc 1 2904 4 view .LVU3620
 11190              	.LBB618:
 11191              	.LBI618:
2448:src/display.c **** 	int i, n;
 11192              		.loc 1 2448 19 view .LVU3621
 11193              	.LBB619:
2449:src/display.c **** 	int j = SEGS_EXP_BASE;
 11194              		.loc 1 2449 2 view .LVU3622
2450:src/display.c **** 	const int status = State2.status - 3;
 11195              		.loc 1 2450 2 view .LVU3623
2451:src/display.c **** 	char buf[16], *p = buf;
 11196              		.loc 1 2451 2 view .LVU3624
ARM GAS  /tmp/ccdg5rgB.s 			page 323


2455:src/display.c **** 	  set_status("Free:");
 11197              		.loc 1 2455 5 is_stmt 0 view .LVU3625
 11198 0912 012F     		cmp	r7, #1
2451:src/display.c **** 	char buf[16], *p = buf;
 11199              		.loc 1 2451 12 view .LVU3626
 11200 0914 A7F10303 		sub	r3, r7, #3
 11201              	.LVL1265:
2452:src/display.c **** 	unsigned int pc;
 11202              		.loc 1 2452 2 is_stmt 1 view .LVU3627
2453:src/display.c **** 
 11203              		.loc 1 2453 2 view .LVU3628
2455:src/display.c **** 	  set_status("Free:");
 11204              		.loc 1 2455 2 view .LVU3629
2455:src/display.c **** 	  set_status("Free:");
 11205              		.loc 1 2455 5 is_stmt 0 view .LVU3630
 11206 0918 00F0E881 		beq	.L1282
2463:src/display.c **** 	  /* Top line */
 11207              		.loc 1 2463 7 is_stmt 1 view .LVU3631
2463:src/display.c **** 	  /* Top line */
 11208              		.loc 1 2463 10 is_stmt 0 view .LVU3632
 11209 091c 581C     		adds	r0, r3, #1
 11210 091e 00F0E080 		beq	.L1283
 11211              	.LBB620:
2480:src/display.c **** 	  int end;
 11212              		.loc 1 2480 4 is_stmt 1 view .LVU3633
2481:src/display.c **** 	  int group = 10;
 11213              		.loc 1 2481 4 view .LVU3634
2482:src/display.c **** 	  int start = 0;
 11214              		.loc 1 2482 4 view .LVU3635
 11215              	.LVL1266:
2483:src/display.c **** 		
 11216              		.loc 1 2483 4 view .LVU3636
2485:src/display.c **** 	    base = 10 * status;
 11217              		.loc 1 2485 4 view .LVU3637
2485:src/display.c **** 	    base = 10 * status;
 11218              		.loc 1 2485 7 is_stmt 0 view .LVU3638
 11219 0922 092B     		cmp	r3, #9
 11220 0924 40F3BA80 		ble	.L1284
2495:src/display.c **** 	    base = regX_idx;
 11221              		.loc 1 2495 9 is_stmt 1 view .LVU3639
2495:src/display.c **** 	    base = regX_idx;
 11222              		.loc 1 2495 12 is_stmt 0 view .LVU3640
 11223 0928 0A2B     		cmp	r3, #10
 11224 092a 00F0D281 		beq	.L1285
2503:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11225              		.loc 1 2503 6 is_stmt 1 view .LVU3641
 11226              	.LVL1267:
2504:src/display.c **** 	    set_status("FL.00-.15");
 11227              		.loc 1 2504 6 view .LVU3642
2505:src/display.c **** 	  }
 11228              		.loc 1 2505 6 view .LVU3643
 11229 092e 4E48     		ldr	r0, .L1300+36
 11230 0930 FFF7FEFF 		bl	set_status
 11231              	.LVL1268:
2483:src/display.c **** 		
 11232              		.loc 1 2483 8 is_stmt 0 view .LVU3644
 11233 0934 4FF0000B 		mov	fp, #0
ARM GAS  /tmp/ccdg5rgB.s 			page 324


2482:src/display.c **** 	  int start = 0;
 11234              		.loc 1 2482 8 view .LVU3645
 11235 0938 4FF00A0A 		mov	r10, #10
 11236              	.LVL1269:
2504:src/display.c **** 	    set_status("FL.00-.15");
 11237              		.loc 1 2504 10 view .LVU3646
 11238 093c 4FF07F08 		mov	r8, #127
2503:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 11239              		.loc 1 2503 11 view .LVU3647
 11240 0940 7027     		movs	r7, #112
 11241              	.LVL1270:
 11242              	.L1012:
2507:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11243              		.loc 1 2507 4 is_stmt 1 view .LVU3648
2507:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 11244              		.loc 1 2507 6 is_stmt 0 view .LVU3649
 11245 0942 0BEBCB05 		add	r5, fp, fp, lsl #3
 11246              	.LVL1271:
2508:src/display.c **** 	  j += SEGS_PER_DIGIT;
 11247              		.loc 1 2508 4 is_stmt 1 view .LVU3650
 11248              	.LBB621:
 11249              	.LBI621:
 357:src/display.c ****   if (res) {
 11250              		.loc 1 357 14 view .LVU3651
 11251              	.LBB622:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11252              		.loc 1 358 3 view .LVU3652
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11253              		.loc 1 361 5 view .LVU3653
 11254              	.LBB623:
 11255              	.LBB624:
 365:src/display.c **** #endif
 11256              		.loc 1 365 35 is_stmt 0 view .LVU3654
 11257 0946 0BF10103 		add	r3, fp, #1
 11258              	.LBE624:
 11259              	.LBE623:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11260              		.loc 1 361 5 view .LVU3655
 11261 094a E81D     		adds	r0, r5, #7
 11262              	.LBB627:
 11263              	.LBB625:
 365:src/display.c **** #endif
 11264              		.loc 1 365 35 view .LVU3656
 11265 094c 0093     		str	r3, [sp]
 11266              	.LBE625:
 11267              	.LBE627:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11268              		.loc 1 361 5 view .LVU3657
 11269 094e FFF7FEFF 		bl	set_dot
 11270              	.LVL1272:
 362:src/display.c ****       set_dot(posn+8);
 11271              		.loc 1 362 5 is_stmt 1 view .LVU3658
 11272              	.LBB628:
 11273              	.LBI623:
 357:src/display.c ****   if (res) {
 11274              		.loc 1 357 14 view .LVU3659
 11275              	.LBB626:
ARM GAS  /tmp/ccdg5rgB.s 			page 325


 365:src/display.c **** #endif
 11276              		.loc 1 365 5 view .LVU3660
 365:src/display.c **** #endif
 11277              		.loc 1 365 38 is_stmt 0 view .LVU3661
 11278 0952 4449     		ldr	r1, .L1300+32
 11279 0954 009B     		ldr	r3, [sp]
 11280 0956 2E22     		movs	r2, #46
 11281 0958 01F81320 		strb	r2, [r1, r3, lsl #1]
 368:src/display.c **** }
 11282              		.loc 1 368 3 is_stmt 1 view .LVU3662
 11283              	.LVL1273:
 368:src/display.c **** }
 11284              		.loc 1 368 3 is_stmt 0 view .LVU3663
 11285              	.LBE626:
 11286              	.LBE628:
 368:src/display.c **** }
 11287              		.loc 1 368 3 is_stmt 1 view .LVU3664
 368:src/display.c **** }
 11288              		.loc 1 368 3 is_stmt 0 view .LVU3665
 11289              	.LBE622:
 11290              	.LBE621:
2509:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11291              		.loc 1 2509 4 is_stmt 1 view .LVU3666
 11292 095c CBEB4A01 		rsb	r1, fp, r10, lsl #1
 11293 0960 CB19     		adds	r3, r1, r7
 11294 0962 0393     		str	r3, [sp, #12]
2510:src/display.c **** 	    int k = i + base - start;
 11295              		.loc 1 2510 30 is_stmt 0 view .LVU3667
 11296 0964 0BEB0A03 		add	r3, fp, r10
 11297 0968 0293     		str	r3, [sp, #8]
 11298 096a A7EB0B03 		sub	r3, r7, fp
 11299 096e CDE90436 		strd	r3, r6, [sp, #16]
2509:src/display.c **** 	  for (i = start; i < group + start; i++) {
 11300              		.loc 1 2509 6 view .LVU3668
 11301 0972 0935     		adds	r5, r5, #9
 11302              	.LVL1274:
2510:src/display.c **** 	    int k = i + base - start;
 11303              		.loc 1 2510 4 is_stmt 1 view .LVU3669
2510:src/display.c **** 	    int k = i + base - start;
 11304              		.loc 1 2510 20 view .LVU3670
 11305              	.LBB629:
 11306              	.LBB630:
 11307              	.LBB631:
 11308              	.LBB632:
 11309              	.LBB633:
 365:src/display.c **** #endif
 11310              		.loc 1 365 38 is_stmt 0 view .LVU3671
 11311 0974 0192     		str	r2, [sp, #4]
 11312 0976 BA44     		add	r10, r10, r7
 11313              	.LVL1275:
 365:src/display.c **** #endif
 11314              		.loc 1 365 38 view .LVU3672
 11315 0978 1DE0     		b	.L1016
 11316              	.LVL1276:
 11317              	.L1014:
 365:src/display.c **** #endif
 11318              		.loc 1 365 38 view .LVU3673
ARM GAS  /tmp/ccdg5rgB.s 			page 326


 11319              	.LBE633:
 11320              	.LBE632:
 11321              	.LBE631:
 11322              	.LBE630:
2520:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 11323              		.loc 1 2520 6 is_stmt 1 view .LVU3674
 11324 097a 3146     		mov	r1, r6
 11325 097c 2846     		mov	r0, r5
 11326 097e FFF7FEFF 		bl	set_dig
 11327              	.LVL1277:
2521:src/display.c **** 	    j += SEGS_PER_DIGIT;
 11328              		.loc 1 2521 6 view .LVU3675
 11329              	.LBB640:
 11330              	.LBI630:
 357:src/display.c ****   if (res) {
 11331              		.loc 1 357 14 view .LVU3676
 11332              	.LBB638:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11333              		.loc 1 358 3 view .LVU3677
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11334              		.loc 1 361 5 view .LVU3678
 11335 0982 E81D     		adds	r0, r5, #7
 11336 0984 FFF7FEFF 		bl	set_dot
 11337              	.LVL1278:
 362:src/display.c ****       set_dot(posn+8);
 11338              		.loc 1 362 5 view .LVU3679
 11339              	.LBB636:
 11340              	.LBI632:
 357:src/display.c ****   if (res) {
 11341              		.loc 1 357 14 view .LVU3680
 11342              	.LBB634:
 365:src/display.c **** #endif
 11343              		.loc 1 365 5 view .LVU3681
 365:src/display.c **** #endif
 11344              		.loc 1 365 30 is_stmt 0 view .LVU3682
 11345 0988 384B     		ldr	r3, .L1300+40
 365:src/display.c **** #endif
 11346              		.loc 1 365 38 view .LVU3683
 11347 098a 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11348              		.loc 1 365 30 view .LVU3684
 11349 098c A3FB0523 		umull	r2, r3, r3, r5
 11350 0990 5B08     		lsrs	r3, r3, #1
 365:src/display.c **** #endif
 11351              		.loc 1 365 38 view .LVU3685
 11352 0992 344A     		ldr	r2, .L1300+32
 365:src/display.c **** #endif
 11353              		.loc 1 365 35 view .LVU3686
 11354 0994 0133     		adds	r3, r3, #1
 11355              	.LBE634:
 11356              	.LBE636:
 11357              	.LBE638:
 11358              	.LBE640:
2523:src/display.c **** 	      set_dig(j, 8);
 11359              		.loc 1 2523 9 view .LVU3687
 11360 0996 BBF1040F 		cmp	fp, #4
 11361              	.LBB641:
ARM GAS  /tmp/ccdg5rgB.s 			page 327


 11362              	.LBB639:
 11363              	.LBB637:
 11364              	.LBB635:
 365:src/display.c **** #endif
 11365              		.loc 1 365 38 view .LVU3688
 11366 099a 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11367              		.loc 1 368 3 is_stmt 1 view .LVU3689
 11368              	.LVL1279:
 368:src/display.c **** }
 11369              		.loc 1 368 3 is_stmt 0 view .LVU3690
 11370              	.LBE635:
 11371              	.LBE637:
 368:src/display.c **** }
 11372              		.loc 1 368 3 is_stmt 1 view .LVU3691
 368:src/display.c **** }
 11373              		.loc 1 368 3 is_stmt 0 view .LVU3692
 11374              	.LBE639:
 11375              	.LBE641:
2522:src/display.c **** 	    if (i == 4) {
 11376              		.loc 1 2522 6 is_stmt 1 view .LVU3693
2523:src/display.c **** 	      set_dig(j, 8);
 11377              		.loc 1 2523 6 view .LVU3694
2523:src/display.c **** 	      set_dig(j, 8);
 11378              		.loc 1 2523 9 is_stmt 0 view .LVU3695
 11379 099e 23D0     		beq	.L1286
2522:src/display.c **** 	    if (i == 4) {
 11380              		.loc 1 2522 8 view .LVU3696
 11381 09a0 3D46     		mov	r5, r7
 11382              	.LVL1280:
 11383              	.L1015:
2522:src/display.c **** 	    if (i == 4) {
 11384              		.loc 1 2522 8 view .LVU3697
 11385              	.LBE629:
2510:src/display.c **** 	    int k = i + base - start;
 11386              		.loc 1 2510 39 is_stmt 1 view .LVU3698
2510:src/display.c **** 	    int k = i + base - start;
 11387              		.loc 1 2510 40 is_stmt 0 view .LVU3699
 11388 09a2 009B     		ldr	r3, [sp]
2510:src/display.c **** 	    int k = i + base - start;
 11389              		.loc 1 2510 4 view .LVU3700
 11390 09a4 0299     		ldr	r1, [sp, #8]
 11391 09a6 8B42     		cmp	r3, r1
 11392 09a8 0AF1010A 		add	r10, r10, #1
2510:src/display.c **** 	    int k = i + base - start;
 11393              		.loc 1 2510 40 view .LVU3701
 11394 09ac 9B46     		mov	fp, r3
 11395              	.LVL1281:
2510:src/display.c **** 	    int k = i + base - start;
 11396              		.loc 1 2510 20 is_stmt 1 view .LVU3702
2510:src/display.c **** 	    int k = i + base - start;
 11397              		.loc 1 2510 4 is_stmt 0 view .LVU3703
 11398 09ae 00F09B81 		beq	.L1239
2510:src/display.c **** 	    int k = i + base - start;
 11399              		.loc 1 2510 4 view .LVU3704
 11400 09b2 0133     		adds	r3, r3, #1
 11401              	.LVL1282:
ARM GAS  /tmp/ccdg5rgB.s 			page 328


2510:src/display.c **** 	    int k = i + base - start;
 11402              		.loc 1 2510 4 view .LVU3705
 11403 09b4 0093     		str	r3, [sp]
 11404              	.LVL1283:
 11405              	.L1016:
 11406              	.LBB650:
2511:src/display.c **** 	    int l = get_user_flag(k);
 11407              		.loc 1 2511 6 is_stmt 1 view .LVU3706
2512:src/display.c **** 	    k += group;
 11408              		.loc 1 2512 6 view .LVU3707
2512:src/display.c **** 	    k += group;
 11409              		.loc 1 2512 14 is_stmt 0 view .LVU3708
 11410 09b6 049B     		ldr	r3, [sp, #16]
 11411 09b8 03EB0B00 		add	r0, r3, fp
 11412 09bc FFF7FEFF 		bl	get_user_flag
 11413              	.LVL1284:
2514:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11414              		.loc 1 2514 9 view .LVU3709
 11415 09c0 C245     		cmp	r10, r8
2512:src/display.c **** 	    k += group;
 11416              		.loc 1 2512 14 view .LVU3710
 11417 09c2 0646     		mov	r6, r0
 11418              	.LVL1285:
2513:src/display.c **** 	    if (end >= k) {
 11419              		.loc 1 2513 6 is_stmt 1 view .LVU3711
2514:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11420              		.loc 1 2514 6 view .LVU3712
2522:src/display.c **** 	    if (i == 4) {
 11421              		.loc 1 2522 8 is_stmt 0 view .LVU3713
 11422 09c4 05F10907 		add	r7, r5, #9
2514:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 11423              		.loc 1 2514 9 view .LVU3714
 11424 09c8 D7DC     		bgt	.L1014
2515:src/display.c **** 	      k += group;
 11425              		.loc 1 2515 8 is_stmt 1 view .LVU3715
2515:src/display.c **** 	      k += group;
 11426              		.loc 1 2515 14 is_stmt 0 view .LVU3716
 11427 09ca 5046     		mov	r0, r10
 11428              	.LVL1286:
2515:src/display.c **** 	      k += group;
 11429              		.loc 1 2515 14 view .LVU3717
 11430 09cc FFF7FEFF 		bl	get_user_flag
 11431              	.LVL1287:
 11432 09d0 039B     		ldr	r3, [sp, #12]
 11433 09d2 5B44     		add	r3, r3, fp
2517:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11434              		.loc 1 2517 11 view .LVU3718
 11435 09d4 9845     		cmp	r8, r3
2515:src/display.c **** 	      k += group;
 11436              		.loc 1 2515 10 view .LVU3719
 11437 09d6 46EA4006 		orr	r6, r6, r0, lsl #1
 11438              	.LVL1288:
2516:src/display.c **** 	      if (end >= k)
 11439              		.loc 1 2516 8 is_stmt 1 view .LVU3720
2517:src/display.c **** 		l |= (get_user_flag(k) << 2);
 11440              		.loc 1 2517 8 view .LVU3721
2517:src/display.c **** 		l |= (get_user_flag(k) << 2);
ARM GAS  /tmp/ccdg5rgB.s 			page 329


 11441              		.loc 1 2517 11 is_stmt 0 view .LVU3722
 11442 09da CEDB     		blt	.L1014
2518:src/display.c **** 	    }
 11443              		.loc 1 2518 3 is_stmt 1 view .LVU3723
2518:src/display.c **** 	    }
 11444              		.loc 1 2518 9 is_stmt 0 view .LVU3724
 11445 09dc 1846     		mov	r0, r3
 11446 09de FFF7FEFF 		bl	get_user_flag
 11447              	.LVL1289:
2518:src/display.c **** 	    }
 11448              		.loc 1 2518 5 view .LVU3725
 11449 09e2 46EA8006 		orr	r6, r6, r0, lsl #2
 11450              	.LVL1290:
2518:src/display.c **** 	    }
 11451              		.loc 1 2518 5 view .LVU3726
 11452 09e6 C8E7     		b	.L1014
 11453              	.LVL1291:
 11454              	.L1286:
2524:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 11455              		.loc 1 2524 8 is_stmt 1 view .LVU3727
 11456 09e8 0821     		movs	r1, #8
 11457 09ea 3846     		mov	r0, r7
 11458 09ec FFF7FEFF 		bl	set_dig
 11459              	.LVL1292:
2525:src/display.c **** 	      j += SEGS_PER_DIGIT;
 11460              		.loc 1 2525 8 view .LVU3728
 11461              	.LBB642:
 11462              	.LBI642:
 357:src/display.c ****   if (res) {
 11463              		.loc 1 357 14 view .LVU3729
 11464              	.LBB643:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 11465              		.loc 1 358 3 view .LVU3730
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 11466              		.loc 1 361 5 view .LVU3731
 11467 09f0 05F11000 		add	r0, r5, #16
 11468 09f4 FFF7FEFF 		bl	set_dot
 11469              	.LVL1293:
 362:src/display.c ****       set_dot(posn+8);
 11470              		.loc 1 362 5 view .LVU3732
 11471              	.LBB644:
 11472              	.LBI644:
 357:src/display.c ****   if (res) {
 11473              		.loc 1 357 14 view .LVU3733
 11474              	.LBB645:
 365:src/display.c **** #endif
 11475              		.loc 1 365 5 view .LVU3734
 365:src/display.c **** #endif
 11476              		.loc 1 365 30 is_stmt 0 view .LVU3735
 11477 09f8 1C4B     		ldr	r3, .L1300+40
 365:src/display.c **** #endif
 11478              		.loc 1 365 38 view .LVU3736
 11479 09fa 0199     		ldr	r1, [sp, #4]
 365:src/display.c **** #endif
 11480              		.loc 1 365 30 view .LVU3737
 11481 09fc A3FB0723 		umull	r2, r3, r3, r7
 11482 0a00 5B08     		lsrs	r3, r3, #1
ARM GAS  /tmp/ccdg5rgB.s 			page 330


 365:src/display.c **** #endif
 11483              		.loc 1 365 38 view .LVU3738
 11484 0a02 184A     		ldr	r2, .L1300+32
 365:src/display.c **** #endif
 11485              		.loc 1 365 35 view .LVU3739
 11486 0a04 0133     		adds	r3, r3, #1
 11487              	.LBE645:
 11488              	.LBE644:
 11489              	.LBE643:
 11490              	.LBE642:
2526:src/display.c **** 	    }
 11491              		.loc 1 2526 10 view .LVU3740
 11492 0a06 1235     		adds	r5, r5, #18
 11493              	.LBB649:
 11494              	.LBB648:
 11495              	.LBB647:
 11496              	.LBB646:
 365:src/display.c **** #endif
 11497              		.loc 1 365 38 view .LVU3741
 11498 0a08 02F81310 		strb	r1, [r2, r3, lsl #1]
 368:src/display.c **** }
 11499              		.loc 1 368 3 is_stmt 1 view .LVU3742
 11500              	.LVL1294:
 368:src/display.c **** }
 11501              		.loc 1 368 3 is_stmt 0 view .LVU3743
 11502              	.LBE646:
 11503              	.LBE647:
 368:src/display.c **** }
 11504              		.loc 1 368 3 is_stmt 1 view .LVU3744
 368:src/display.c **** }
 11505              		.loc 1 368 3 is_stmt 0 view .LVU3745
 11506              	.LBE648:
 11507              	.LBE649:
2526:src/display.c **** 	    }
 11508              		.loc 1 2526 8 is_stmt 1 view .LVU3746
2526:src/display.c **** 	    }
 11509              		.loc 1 2526 8 is_stmt 0 view .LVU3747
 11510 0a0c C9E7     		b	.L1015
 11511              	.LVL1295:
 11512              	.L1114:
2526:src/display.c **** 	    }
 11513              		.loc 1 2526 8 view .LVU3748
 11514              	.LBE650:
 11515              	.LBE620:
 11516              	.LBE619:
 11517              	.LBE618:
 11518              	.LBB655:
 11519              	.LBB587:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11520              		.loc 1 1355 4 view .LVU3749
 11521 0a0e 8B46     		mov	fp, r1
 11522 0a10 80E5     		b	.L1071
 11523              	.LVL1296:
 11524              	.L984:
1355:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11525              		.loc 1 1355 4 view .LVU3750
 11526              	.LBE587:
ARM GAS  /tmp/ccdg5rgB.s 			page 331


 11527              	.LBE655:
2807:src/display.c **** 	    }
 11528              		.loc 1 2807 3 is_stmt 1 view .LVU3751
2807:src/display.c **** 	    }
 11529              		.loc 1 2807 8 is_stmt 0 view .LVU3752
 11530 0a12 2189     		ldrh	r1, [r4, #8]
 11531 0a14 FFF7FEFF 		bl	num_arg_0
 11532              	.LVL1297:
2807:src/display.c **** 	    }
 11533              		.loc 1 2807 8 view .LVU3753
 11534 0a18 E1E5     		b	.L983
 11535              	.LVL1298:
 11536              	.L1265:
2985:src/display.c **** 		    SET_POLAR_READY;
 11537              		.loc 1 2985 7 is_stmt 1 view .LVU3754
 11538 0a1a 5046     		mov	r0, r10
 11539 0a1c FFF7FEFF 		bl	op_r2p
 11540              	.LVL1299:
2986:src/display.c **** 		  }
 11541              		.loc 1 2986 7 view .LVU3755
 11542 0a20 0B49     		ldr	r1, .L1300+12
 11543 0a22 0B68     		ldr	r3, [r1]
 11544 0a24 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 11545 0a28 6AF30412 		bfi	r2, r10, #4, #1
 11546 0a2c 83F8DE27 		strb	r2, [r3, #2014]
 11547 0a30 1AE5     		b	.L1058
 11548              	.LVL1300:
 11549              	.L1277:
 11550              	.LBB656:
 11551              	.LBB588:
 11552              	.LBB579:
1382:src/display.c **** 	      p++;
 11553              		.loc 1 1382 8 view .LVU3756
1383:src/display.c **** 	      if (!double_dot)
 11554              		.loc 1 1383 8 view .LVU3757
1385:src/display.c **** 	    }
 11555              		.loc 1 1385 5 is_stmt 0 view .LVU3758
 11556 0a32 002B     		cmp	r3, #0
1383:src/display.c **** 	      if (!double_dot)
 11557              		.loc 1 1383 9 view .LVU3759
 11558 0a34 05F10105 		add	r5, r5, #1
 11559              	.LVL1301:
1384:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 11560              		.loc 1 1384 8 is_stmt 1 view .LVU3760
1385:src/display.c **** 	    }
 11561              		.loc 1 1385 5 is_stmt 0 view .LVU3761
 11562 0a38 14BF     		ite	ne
 11563 0a3a 4FF0090B 		movne	fp, #9
 11564 0a3e 4FF0120B 		moveq	fp, #18
 11565 0a42 E8E5     		b	.L1076
 11566              	.L1301:
 11567              		.align	2
 11568              	.L1300:
 11569 0a44 00000000 		.word	DispMsg
 11570 0a48 00000000 		.word	DispPlot
 11571 0a4c 00000000 		.word	.LANCHOR1
 11572 0a50 00000000 		.word	main_ram
ARM GAS  /tmp/ccdg5rgB.s 			page 332


 11573 0a54 3C000000 		.word	.LC29
 11574 0a58 00000000 		.word	ShowRegister
 11575 0a5c 00000000 		.word	multicmds
 11576 0a60 00000000 		.word	.LANCHOR23
 11577 0a64 00000000 		.word	LastDisplayedNumber
 11578 0a68 8C000000 		.word	.LC40
 11579 0a6c 398EE338 		.word	954437177
 11580 0a70 00000000 		.word	.LANCHOR22
 11581              	.LVL1302:
 11582              	.L1116:
1375:src/display.c **** 	    if (gotdot <= j) {
 11583              		.loc 1 1375 8 view .LVU3762
 11584 0a74 4FF0090B 		mov	fp, #9
 11585 0a78 CDE5     		b	.L1076
 11586              	.LVL1303:
 11587              	.L1038:
1375:src/display.c **** 	    if (gotdot <= j) {
 11588              		.loc 1 1375 8 view .LVU3763
 11589              	.LBE579:
 11590              	.LBE588:
 11591              	.LBE656:
2922:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11592              		.loc 1 2922 11 is_stmt 1 view .LVU3764
2922:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11593              		.loc 1 2922 15 is_stmt 0 view .LVU3765
 11594 0a7a B44A     		ldr	r2, .L1302
 11595 0a7c 0092     		str	r2, [sp]
 11596 0a7e B2F90020 		ldrsh	r2, [r2]
2922:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11597              		.loc 1 2922 14 view .LVU3766
 11598 0a82 002A     		cmp	r2, #0
 11599 0a84 40F0EA80 		bne	.L1287
2924:src/display.c **** 	    bp = scopy(buf, Alpha);
 11600              		.loc 1 2924 11 is_stmt 1 view .LVU3767
2924:src/display.c **** 	    bp = scopy(buf, Alpha);
 11601              		.loc 1 2924 14 is_stmt 0 view .LVU3768
 11602 0a88 0907     		lsls	r1, r1, #28
 11603 0a8a 00F1A380 		bmi	.L1288
 11604              	.LVL1304:
2973:src/display.c ****       nostk:
 11605              		.loc 1 2973 2 is_stmt 1 view .LVU3769
 11606 0a8e FFF7FEFF 		bl	show_stack
 11607              	.LVL1305:
2975:src/display.c **** 	if (!skip) {
 11608              		.loc 1 2975 2 view .LVU3770
2956:src/display.c **** 	  }
 11609              		.loc 1 2956 12 is_stmt 0 view .LVU3771
 11610 0a92 0126     		movs	r6, #1
2975:src/display.c **** 	if (!skip) {
 11611              		.loc 1 2975 2 view .LVU3772
 11612 0a94 FFF7FEFF 		bl	show_flags
 11613              	.LVL1306:
2976:src/display.c **** 	  if (State2.runmode) {
 11614              		.loc 1 2976 2 is_stmt 1 view .LVU3773
 11615 0a98 FFF7F5BA 		b	.L967
 11616              	.LVL1307:
 11617              	.L1284:
ARM GAS  /tmp/ccdg5rgB.s 			page 333


 11618              	.LBB657:
 11619              	.LBB653:
 11620              	.LBB651:
2486:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11621              		.loc 1 2486 6 view .LVU3774
2486:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11622              		.loc 1 2486 11 is_stmt 0 view .LVU3775
 11623 0a9c 4FF00A0A 		mov	r10, #10
 11624              	.LVL1308:
2486:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11625              		.loc 1 2486 11 view .LVU3776
 11626 0aa0 0AFB03F7 		mul	r7, r10, r3
 11627              	.LVL1309:
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 11628              		.loc 1 2487 6 is_stmt 1 view .LVU3777
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 11629              		.loc 1 2487 28 is_stmt 0 view .LVU3778
 11630 0aa4 462F     		cmp	r7, #70
2488:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11631              		.loc 1 2488 10 view .LVU3779
 11632 0aa6 AA49     		ldr	r1, .L1302+4
 11633 0aa8 15A8     		add	r0, sp, #84
 11634              	.LVL1310:
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 11635              		.loc 1 2487 28 view .LVU3780
 11636 0aaa B846     		mov	r8, r7
 11637 0aac A8BF     		it	ge
 11638 0aae 4FF04608 		movge	r8, #70
2488:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11639              		.loc 1 2488 10 view .LVU3781
 11640 0ab2 FFF7FEFF 		bl	scopy
 11641              	.LVL1311:
2489:src/display.c **** 	    *p++ = '-';
 11642              		.loc 1 2489 10 view .LVU3782
 11643 0ab6 3946     		mov	r1, r7
 11644 0ab8 0222     		movs	r2, #2
 11645 0aba FFF7FEFF 		bl	num_arg_0
 11646              	.LVL1312:
2487:src/display.c **** 	    p = scopy(buf, "FL ");
 11647              		.loc 1 2487 10 view .LVU3783
 11648 0abe 08F11D08 		add	r8, r8, #29
 11649              	.LVL1313:
2488:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11650              		.loc 1 2488 6 is_stmt 1 view .LVU3784
2489:src/display.c **** 	    *p++ = '-';
 11651              		.loc 1 2489 6 view .LVU3785
2490:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11652              		.loc 1 2490 6 view .LVU3786
2490:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11653              		.loc 1 2490 11 is_stmt 0 view .LVU3787
 11654 0ac2 2D23     		movs	r3, #45
 11655 0ac4 00F8013B 		strb	r3, [r0], #1
 11656              	.LVL1314:
2491:src/display.c **** 	    *p = '\0';
 11657              		.loc 1 2491 6 is_stmt 1 view .LVU3788
2491:src/display.c **** 	    *p = '\0';
 11658              		.loc 1 2491 10 is_stmt 0 view .LVU3789
ARM GAS  /tmp/ccdg5rgB.s 			page 334


 11659 0ac8 4146     		mov	r1, r8
 11660 0aca 0222     		movs	r2, #2
 11661 0acc FFF7FEFF 		bl	num_arg_0
 11662              	.LVL1315:
2491:src/display.c **** 	    *p = '\0';
 11663              		.loc 1 2491 10 view .LVU3790
 11664 0ad0 0246     		mov	r2, r0
 11665              	.LVL1316:
2492:src/display.c **** 	    set_status(buf);
 11666              		.loc 1 2492 6 is_stmt 1 view .LVU3791
2492:src/display.c **** 	    set_status(buf);
 11667              		.loc 1 2492 9 is_stmt 0 view .LVU3792
 11668 0ad2 4FF0000B 		mov	fp, #0
2493:src/display.c **** 	  }
 11669              		.loc 1 2493 6 view .LVU3793
 11670 0ad6 15A8     		add	r0, sp, #84
 11671              	.LVL1317:
2492:src/display.c **** 	    set_status(buf);
 11672              		.loc 1 2492 9 view .LVU3794
 11673 0ad8 82F800B0 		strb	fp, [r2]
2493:src/display.c **** 	  }
 11674              		.loc 1 2493 6 is_stmt 1 view .LVU3795
 11675 0adc FFF7FEFF 		bl	set_status
 11676              	.LVL1318:
2493:src/display.c **** 	  }
 11677              		.loc 1 2493 6 is_stmt 0 view .LVU3796
 11678 0ae0 2FE7     		b	.L1012
 11679              	.LVL1319:
 11680              	.L1283:
2493:src/display.c **** 	  }
 11681              		.loc 1 2493 6 view .LVU3797
 11682              	.LBE651:
2465:src/display.c **** 	  if (SizeStatRegs)
 11683              		.loc 1 2465 4 is_stmt 1 view .LVU3798
2465:src/display.c **** 	  if (SizeStatRegs)
 11684              		.loc 1 2465 8 is_stmt 0 view .LVU3799
 11685 0ae2 15AF     		add	r7, sp, #84
 11686              	.LVL1320:
2465:src/display.c **** 	  if (SizeStatRegs)
 11687              		.loc 1 2465 8 view .LVU3800
 11688 0ae4 9B49     		ldr	r1, .L1302+8
 11689 0ae6 3846     		mov	r0, r7
 11690 0ae8 FFF7FEFF 		bl	scopy
 11691              	.LVL1321:
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11692              		.loc 1 2466 8 view .LVU3801
 11693 0aec 9A4A     		ldr	r2, .L1302+12
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11694              		.loc 1 2466 7 view .LVU3802
 11695 0aee 1268     		ldr	r2, [r2]
2465:src/display.c **** 	  if (SizeStatRegs)
 11696              		.loc 1 2465 8 view .LVU3803
 11697 0af0 0346     		mov	r3, r0
 11698              	.LVL1322:
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11699              		.loc 1 2466 4 is_stmt 1 view .LVU3804
2466:src/display.c **** 	    p = scopy(p, " \221\006\006+");
ARM GAS  /tmp/ccdg5rgB.s 			page 335


 11700              		.loc 1 2466 7 is_stmt 0 view .LVU3805
 11701 0af2 002A     		cmp	r2, #0
 11702 0af4 4ED1     		bne	.L1289
 11703              	.L1009:
2468:src/display.c **** 	  set_status(buf);
 11704              		.loc 1 2468 4 is_stmt 1 view .LVU3806
2468:src/display.c **** 	  set_status(buf);
 11705              		.loc 1 2468 7 is_stmt 0 view .LVU3807
 11706 0af6 0022     		movs	r2, #0
 11707 0af8 1A70     		strb	r2, [r3]
2469:src/display.c **** 
 11708              		.loc 1 2469 4 is_stmt 1 view .LVU3808
 11709 0afa 3846     		mov	r0, r7
 11710              	.LVL1323:
2469:src/display.c **** 
 11711              		.loc 1 2469 4 is_stmt 0 view .LVU3809
 11712 0afc FFF7FEFF 		bl	set_status
 11713              	.LVL1324:
2472:src/display.c **** 	  if (LocalRegs < 0) {
 11714              		.loc 1 2472 4 is_stmt 1 view .LVU3810
2472:src/display.c **** 	  if (LocalRegs < 0) {
 11715              		.loc 1 2472 8 is_stmt 0 view .LVU3811
 11716 0b00 FFF7FEFF 		bl	global_regs
 11717              	.LVL1325:
 11718 0b04 0146     		mov	r1, r0
 11719 0b06 3846     		mov	r0, r7
 11720 0b08 FFF7FEFF 		bl	num_arg
 11721              	.LVL1326:
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11722              		.loc 1 2473 8 view .LVU3812
 11723 0b0c 934B     		ldr	r3, .L1302+16
 11724 0b0e 1A68     		ldr	r2, [r3]
 11725 0b10 B2F8DE27 		ldrh	r2, [r2, #2014]
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11726              		.loc 1 2473 7 view .LVU3813
 11727 0b14 1104     		lsls	r1, r2, #16
2472:src/display.c **** 	  if (LocalRegs < 0) {
 11728              		.loc 1 2472 8 view .LVU3814
 11729 0b16 0346     		mov	r3, r0
 11730              	.LVL1327:
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11731              		.loc 1 2473 4 is_stmt 1 view .LVU3815
2473:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11732              		.loc 1 2473 7 is_stmt 0 view .LVU3816
 11733 0b18 30D4     		bmi	.L1290
 11734              	.L1010:
2477:src/display.c **** 	  set_digits_string(buf, 0);
 11735              		.loc 1 2477 4 is_stmt 1 view .LVU3817
2477:src/display.c **** 	  set_digits_string(buf, 0);
 11736              		.loc 1 2477 7 is_stmt 0 view .LVU3818
 11737 0b1a 0021     		movs	r1, #0
2478:src/display.c **** 	} else {
 11738              		.loc 1 2478 4 view .LVU3819
 11739 0b1c 3846     		mov	r0, r7
 11740              	.LVL1328:
2477:src/display.c **** 	  set_digits_string(buf, 0);
 11741              		.loc 1 2477 7 view .LVU3820
ARM GAS  /tmp/ccdg5rgB.s 			page 336


 11742 0b1e 1970     		strb	r1, [r3]
2478:src/display.c **** 	} else {
 11743              		.loc 1 2478 4 is_stmt 1 view .LVU3821
 11744 0b20 FFF7FEFF 		bl	set_digits_string
 11745              	.LVL1329:
 11746              	.L1007:
2531:src/display.c **** 	pc = state_pc();
 11747              		.loc 1 2531 2 view .LVU3822
2532:src/display.c **** 	if (isXROM(pc))
 11748              		.loc 1 2532 2 view .LVU3823
2532:src/display.c **** 	if (isXROM(pc))
 11749              		.loc 1 2532 7 is_stmt 0 view .LVU3824
 11750 0b24 8D4B     		ldr	r3, .L1302+16
 11751 0b26 1B68     		ldr	r3, [r3]
2532:src/display.c **** 	if (isXROM(pc))
 11752              		.loc 1 2532 5 view .LVU3825
 11753 0b28 B3F8E077 		ldrh	r7, [r3, #2016]
 11754              	.LVL1330:
2533:src/display.c **** 	  pc = 1;
 11755              		.loc 1 2533 2 is_stmt 1 view .LVU3826
2533:src/display.c **** 	  pc = 1;
 11756              		.loc 1 2533 6 is_stmt 0 view .LVU3827
 11757 0b2c BB0B     		lsrs	r3, r7, #14
2534:src/display.c **** 	for (n=i=0; i<4; i++) {
 11758              		.loc 1 2534 7 view .LVU3828
 11759 0b2e 032B     		cmp	r3, #3
 11760 0b30 08BF     		it	eq
 11761 0b32 0127     		moveq	r7, #1
 11762              	.LVL1331:
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11763              		.loc 1 2535 2 is_stmt 1 view .LVU3829
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11764              		.loc 1 2535 14 view .LVU3830
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11765              		.loc 1 2535 8 is_stmt 0 view .LVU3831
 11766 0b34 4FF0000A 		mov	r10, #0
 11767 0b38 6425     		movs	r5, #100
2531:src/display.c **** 	pc = state_pc();
 11768              		.loc 1 2531 4 view .LVU3832
 11769 0b3a 4FF06C08 		mov	r8, #108
 11770              	.LVL1332:
 11771              	.L1020:
2536:src/display.c **** 	    if (++n == 4) {
 11772              		.loc 1 2536 4 is_stmt 1 view .LVU3833
2536:src/display.c **** 	    if (++n == 4) {
 11773              		.loc 1 2536 8 is_stmt 0 view .LVU3834
 11774 0b3e 0222     		movs	r2, #2
 11775 0b40 2946     		mov	r1, r5
 11776 0b42 3846     		mov	r0, r7
 11777 0b44 FFF7FEFF 		bl	find_label_from
 11778              	.LVL1333:
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11779              		.loc 1 2537 6 is_stmt 1 view .LVU3835
2536:src/display.c **** 	    if (++n == 4) {
 11780              		.loc 1 2536 7 is_stmt 0 view .LVU3836
 11781 0b48 58B1     		cbz	r0, .L1018
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
ARM GAS  /tmp/ccdg5rgB.s 			page 337


 11782              		.loc 1 2537 9 view .LVU3837
 11783 0b4a 0AF1010A 		add	r10, r10, #1
 11784              	.LVL1334:
2541:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11785              		.loc 1 2541 8 is_stmt 1 view .LVU3838
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11786              		.loc 1 2537 9 is_stmt 0 view .LVU3839
 11787 0b4e BAF1040F 		cmp	r10, #4
2541:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11788              		.loc 1 2541 8 view .LVU3840
 11789 0b52 A5F12301 		sub	r1, r5, #35
 11790 0b56 4046     		mov	r0, r8
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11791              		.loc 1 2537 9 view .LVU3841
 11792 0b58 07D0     		beq	.L1291
2541:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11793              		.loc 1 2541 8 view .LVU3842
 11794 0b5a FFF7FEFF 		bl	set_dig
 11795              	.LVL1335:
2542:src/display.c **** 	    }
 11796              		.loc 1 2542 8 is_stmt 1 view .LVU3843
2542:src/display.c **** 	    }
 11797              		.loc 1 2542 10 is_stmt 0 view .LVU3844
 11798 0b5e 08F10708 		add	r8, r8, #7
 11799              	.LVL1336:
 11800              	.L1018:
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11801              		.loc 1 2535 19 is_stmt 1 view .LVU3845
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11802              		.loc 1 2535 14 view .LVU3846
 11803 0b62 0135     		adds	r5, r5, #1
 11804              	.LVL1337:
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11805              		.loc 1 2535 2 is_stmt 0 view .LVU3847
 11806 0b64 682D     		cmp	r5, #104
 11807 0b66 EAD1     		bne	.L1020
2535:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11808              		.loc 1 2535 2 view .LVU3848
 11809 0b68 CEE6     		b	.L1254
 11810              	.LVL1338:
 11811              	.L1291:
2538:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11812              		.loc 1 2538 8 is_stmt 1 view .LVU3849
 11813 0b6a 4C21     		movs	r1, #76
 11814 0b6c 7320     		movs	r0, #115
 11815              	.LVL1339:
2538:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11816              		.loc 1 2538 8 is_stmt 0 view .LVU3850
 11817 0b6e FFF7FEFF 		bl	set_dig
 11818              	.LVL1340:
2539:src/display.c **** 	    } else {
 11819              		.loc 1 2539 8 is_stmt 1 view .LVU3851
 11820 0b72 4C21     		movs	r1, #76
 11821 0b74 7A20     		movs	r0, #122
 11822 0b76 FFF7FEFF 		bl	set_dig
 11823              	.LVL1341:
 11824 0b7a F2E7     		b	.L1018
ARM GAS  /tmp/ccdg5rgB.s 			page 338


 11825              	.LVL1342:
 11826              	.L1290:
2474:src/display.c **** 	    p = num_arg(p, local_regs());
 11827              		.loc 1 2474 6 view .LVU3852
2474:src/display.c **** 	    p = num_arg(p, local_regs());
 11828              		.loc 1 2474 10 is_stmt 0 view .LVU3853
 11829 0b7c 7849     		ldr	r1, .L1302+20
 11830 0b7e FFF7FEFF 		bl	scopy
 11831              	.LVL1343:
2474:src/display.c **** 	    p = num_arg(p, local_regs());
 11832              		.loc 1 2474 10 view .LVU3854
 11833 0b82 0546     		mov	r5, r0
 11834              	.LVL1344:
2475:src/display.c **** 	  }
 11835              		.loc 1 2475 6 is_stmt 1 view .LVU3855
2475:src/display.c **** 	  }
 11836              		.loc 1 2475 21 is_stmt 0 view .LVU3856
 11837 0b84 FFF7FEFF 		bl	local_regs
 11838              	.LVL1345:
2475:src/display.c **** 	  }
 11839              		.loc 1 2475 21 view .LVU3857
 11840 0b88 0146     		mov	r1, r0
2475:src/display.c **** 	  }
 11841              		.loc 1 2475 10 view .LVU3858
 11842 0b8a 2846     		mov	r0, r5
 11843 0b8c FFF7FEFF 		bl	num_arg
 11844              	.LVL1346:
 11845 0b90 0346     		mov	r3, r0
 11846              	.LVL1347:
2475:src/display.c **** 	  }
 11847              		.loc 1 2475 10 view .LVU3859
 11848 0b92 C2E7     		b	.L1010
 11849              	.L1289:
2467:src/display.c **** 	  *p = '\0';
 11850              		.loc 1 2467 6 is_stmt 1 view .LVU3860
2467:src/display.c **** 	  *p = '\0';
 11851              		.loc 1 2467 10 is_stmt 0 view .LVU3861
 11852 0b94 7349     		ldr	r1, .L1302+24
 11853 0b96 FFF7FEFF 		bl	scopy
 11854              	.LVL1348:
2467:src/display.c **** 	  *p = '\0';
 11855              		.loc 1 2467 10 view .LVU3862
 11856 0b9a 0346     		mov	r3, r0
 11857              	.LVL1349:
2467:src/display.c **** 	  *p = '\0';
 11858              		.loc 1 2467 10 view .LVU3863
 11859 0b9c ABE7     		b	.L1009
 11860              	.LVL1350:
 11861              	.L1037:
2467:src/display.c **** 	  *p = '\0';
 11862              		.loc 1 2467 10 view .LVU3864
 11863              	.LBE653:
 11864              	.LBE657:
2963:src/display.c **** 	  if (i > 0)
 11865              		.loc 1 2963 4 is_stmt 1 view .LVU3865
2963:src/display.c **** 	  if (i > 0)
 11866              		.loc 1 2963 8 is_stmt 0 view .LVU3866
ARM GAS  /tmp/ccdg5rgB.s 			page 339


 11867 0b9e 6F4B     		ldr	r3, .L1302+16
 11868 0ba0 1B68     		ldr	r3, [r3]
 11869 0ba2 B3F8E007 		ldrh	r0, [r3, #2016]
 11870              	.LVL1351:
2964:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11871              		.loc 1 2964 4 is_stmt 1 view .LVU3867
2964:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11872              		.loc 1 2964 7 is_stmt 0 view .LVU3868
 11873 0ba6 88B1     		cbz	r0, .L1051
2965:src/display.c **** 	  else
 11874              		.loc 1 2965 6 is_stmt 1 view .LVU3869
 11875 0ba8 FFF7FEFF 		bl	getprog
 11876              	.LVL1352:
2965:src/display.c **** 	  else
 11877              		.loc 1 2965 6 is_stmt 0 view .LVU3870
 11878 0bac 1EA9     		add	r1, sp, #120
 11879              	.LVL1353:
2965:src/display.c **** 	  else
 11880              		.loc 1 2965 6 view .LVU3871
 11881 0bae FFF7FEFF 		bl	prt
 11882              	.LVL1354:
2965:src/display.c **** 	  else
 11883              		.loc 1 2965 6 view .LVU3872
 11884 0bb2 FFF7FEFF 		bl	set_status
 11885              	.LVL1355:
 11886              	.L1052:
2968:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11887              		.loc 1 2968 4 is_stmt 1 view .LVU3873
 11888 0bb6 8920     		movs	r0, #137
 11889 0bb8 FFF7FEFF 		bl	set_dot
 11890              	.LVL1356:
2970:src/display.c **** 	  goto nostk;
 11891              		.loc 1 2970 6 view .LVU3874
2971:src/display.c **** 	}
 11892              		.loc 1 2971 4 view .LVU3875
2975:src/display.c **** 	if (!skip) {
 11893              		.loc 1 2975 2 view .LVU3876
2970:src/display.c **** 	  goto nostk;
 11894              		.loc 1 2970 12 is_stmt 0 view .LVU3877
 11895 0bbc 0126     		movs	r6, #1
2975:src/display.c **** 	if (!skip) {
 11896              		.loc 1 2975 2 view .LVU3878
 11897 0bbe FFF7FEFF 		bl	show_flags
 11898              	.LVL1357:
 11899              	.L1251:
2976:src/display.c **** 	  if (State2.runmode) {
 11900              		.loc 1 2976 2 is_stmt 1 view .LVU3879
 11901 0bc2 624B     		ldr	r3, .L1302
 11902 0bc4 684F     		ldr	r7, .L1302+28
 11903 0bc6 0093     		str	r3, [sp]
 11904 0bc8 FFF75DBA 		b	.L967
 11905              	.LVL1358:
 11906              	.L1051:
2967:src/display.c **** 	  set_dot(STO_annun);
 11907              		.loc 1 2967 6 view .LVU3880
 11908 0bcc 6748     		ldr	r0, .L1302+32
 11909              	.LVL1359:
ARM GAS  /tmp/ccdg5rgB.s 			page 340


2967:src/display.c **** 	  set_dot(STO_annun);
 11910              		.loc 1 2967 6 is_stmt 0 view .LVU3881
 11911 0bce FFF7FEFF 		bl	set_status
 11912              	.LVL1360:
2967:src/display.c **** 	  set_dot(STO_annun);
 11913              		.loc 1 2967 6 view .LVU3882
 11914 0bd2 F0E7     		b	.L1052
 11915              	.L1288:
2925:src/display.c **** 	    j = State2.alpha_pos;
 11916              		.loc 1 2925 6 is_stmt 1 view .LVU3883
2925:src/display.c **** 	    j = State2.alpha_pos;
 11917              		.loc 1 2925 22 is_stmt 0 view .LVU3884
 11918 0bd4 614B     		ldr	r3, .L1302+16
 11919 0bd6 0192     		str	r2, [sp, #4]
 11920 0bd8 1968     		ldr	r1, [r3]
2925:src/display.c **** 	    j = State2.alpha_pos;
 11921              		.loc 1 2925 11 view .LVU3885
 11922 0bda 1EA8     		add	r0, sp, #120
 11923              	.LVL1361:
2925:src/display.c **** 	    j = State2.alpha_pos;
 11924              		.loc 1 2925 11 view .LVU3886
 11925 0bdc 01F5F661 		add	r1, r1, #1968
 11926 0be0 FFF7FEFF 		bl	scopy
 11927              	.LVL1362:
2926:src/display.c **** 	    if (j != 0) {
 11928              		.loc 1 2926 16 view .LVU3887
 11929 0be4 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11930              	.LVL1363:
2926:src/display.c **** 	    if (j != 0) {
 11931              		.loc 1 2926 6 is_stmt 1 view .LVU3888
2927:src/display.c **** 	      i = slen(buf);
 11932              		.loc 1 2927 6 view .LVU3889
2927:src/display.c **** 	      i = slen(buf);
 11933              		.loc 1 2927 9 is_stmt 0 view .LVU3890
 11934 0be6 2BBB     		cbnz	r3, .L1292
2940:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11935              		.loc 1 2940 8 is_stmt 1 view .LVU3891
2940:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11936              		.loc 1 2940 11 is_stmt 0 view .LVU3892
 11937 0be8 3DB1     		cbz	r5, .L1049
2940:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11938              		.loc 1 2940 31 discriminator 1 view .LVU3893
 11939 0bea BBF1000F 		cmp	fp, #0
 11940 0bee 04D1     		bne	.L1049
2941:src/display.c **** 		*bp++ = '\0';
 11941              		.loc 1 2941 3 is_stmt 1 view .LVU3894
 11942              	.LVL1364:
2941:src/display.c **** 		*bp++ = '\0';
 11943              		.loc 1 2941 23 is_stmt 0 view .LVU3895
 11944 0bf0 05F11003 		add	r3, r5, #16
 11945              	.LVL1365:
2942:src/display.c **** 	      }
 11946              		.loc 1 2942 9 view .LVU3896
 11947 0bf4 0022     		movs	r2, #0
2941:src/display.c **** 		*bp++ = '\0';
 11948              		.loc 1 2941 9 view .LVU3897
 11949 0bf6 0370     		strb	r3, [r0]
ARM GAS  /tmp/ccdg5rgB.s 			page 341


 11950              	.LVL1366:
2942:src/display.c **** 	      }
 11951              		.loc 1 2942 3 is_stmt 1 view .LVU3898
2942:src/display.c **** 	      }
 11952              		.loc 1 2942 9 is_stmt 0 view .LVU3899
 11953 0bf8 4270     		strb	r2, [r0, #1]
 11954              	.LVL1367:
 11955              	.L1049:
2944:src/display.c **** 	    }
 11956              		.loc 1 2944 8 is_stmt 1 view .LVU3900
 11957 0bfa 1EA8     		add	r0, sp, #120
 11958 0bfc FFF7FEFF 		bl	set_status_right
 11959              	.LVL1368:
 11960              	.L1048:
2946:src/display.c **** 	      bp = buf;
 11961              		.loc 1 2946 6 view .LVU3901
2946:src/display.c **** 	      bp = buf;
 11962              		.loc 1 2946 9 is_stmt 0 view .LVU3902
 11963 0c00 002D     		cmp	r5, #0
 11964 0c02 5CD0     		beq	.L1040
2946:src/display.c **** 	      bp = buf;
 11965              		.loc 1 2946 27 discriminator 1 view .LVU3903
 11966 0c04 BBF1000F 		cmp	fp, #0
 11967 0c08 59D0     		beq	.L1040
2947:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11968              		.loc 1 2947 8 is_stmt 1 view .LVU3904
 11969              	.LVL1369:
2948:src/display.c **** 	      *bp++ = '\0';
 11970              		.loc 1 2948 8 view .LVU3905
 11971              	.LBB658:
 11972              	.LBB659:
3640:src/display.c **** 	if (State2.runmode) {
 11973              		.loc 1 3640 5 is_stmt 0 view .LVU3906
 11974 0c0a B9F90030 		ldrsh	r3, [r9]
 11975              	.LBE659:
 11976              	.LBE658:
2948:src/display.c **** 	      *bp++ = '\0';
 11977              		.loc 1 2948 28 view .LVU3907
 11978 0c0e 1035     		adds	r5, r5, #16
2949:src/display.c **** 	      set_status_top(buf);
 11979              		.loc 1 2949 14 view .LVU3908
 11980 0c10 0022     		movs	r2, #0
2948:src/display.c **** 	      *bp++ = '\0';
 11981              		.loc 1 2948 14 view .LVU3909
 11982 0c12 8DF87850 		strb	r5, [sp, #120]
2949:src/display.c **** 	      set_status_top(buf);
 11983              		.loc 1 2949 8 is_stmt 1 view .LVU3910
 11984              	.LVL1370:
2949:src/display.c **** 	      set_status_top(buf);
 11985              		.loc 1 2949 14 is_stmt 0 view .LVU3911
 11986 0c16 8DF87920 		strb	r2, [sp, #121]
2950:src/display.c **** 	      no_status_top = 1;
 11987              		.loc 1 2950 8 is_stmt 1 view .LVU3912
 11988              	.LVL1371:
 11989              	.LBB661:
 11990              	.LBI658:
3639:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/ccdg5rgB.s 			page 342


 11991              		.loc 1 3639 19 view .LVU3913
 11992              	.LBB660:
3640:src/display.c **** 	if (State2.runmode) {
 11993              		.loc 1 3640 2 view .LVU3914
3640:src/display.c **** 	if (State2.runmode) {
 11994              		.loc 1 3640 5 is_stmt 0 view .LVU3915
 11995 0c1a 13B9     		cbnz	r3, .L1050
 11996 0c1c 1EA8     		add	r0, sp, #120
 11997              	.LVL1372:
3640:src/display.c **** 	if (State2.runmode) {
 11998              		.loc 1 3640 5 view .LVU3916
 11999 0c1e FFF7FEFF 		bl	set_status_top.part.0
 12000              	.LVL1373:
 12001              	.L1050:
3640:src/display.c **** 	if (State2.runmode) {
 12002              		.loc 1 3640 5 view .LVU3917
 12003              	.LBE660:
 12004              	.LBE661:
2951:src/display.c **** 	      //annuc = 1;
 12005              		.loc 1 2951 8 is_stmt 1 view .LVU3918
2951:src/display.c **** 	      //annuc = 1;
 12006              		.loc 1 2951 22 is_stmt 0 view .LVU3919
 12007 0c22 0123     		movs	r3, #1
 12008 0c24 A9F80030 		strh	r3, [r9]	@ movhi
2973:src/display.c ****       nostk:
 12009              		.loc 1 2973 2 is_stmt 1 view .LVU3920
 12010 0c28 FFF7FEFF 		bl	show_stack
 12011              	.LVL1374:
2975:src/display.c **** 	if (!skip) {
 12012              		.loc 1 2975 2 view .LVU3921
 12013 0c2c FFF7FEFF 		bl	show_flags
 12014              	.LVL1375:
2976:src/display.c **** 	  if (State2.runmode) {
 12015              		.loc 1 2976 2 view .LVU3922
 12016 0c30 FFF729BA 		b	.L967
 12017              	.LVL1376:
 12018              	.L1292:
2928:src/display.c **** 	      j *= 6;
 12019              		.loc 1 2928 8 view .LVU3923
2928:src/display.c **** 	      j *= 6;
 12020              		.loc 1 2928 12 is_stmt 0 view .LVU3924
 12021 0c34 1EA8     		add	r0, sp, #120
 12022              	.LVL1377:
2928:src/display.c **** 	      j *= 6;
 12023              		.loc 1 2928 12 view .LVU3925
 12024 0c36 0293     		str	r3, [sp, #8]
 12025 0c38 FFF7FEFF 		bl	slen
 12026              	.LVL1378:
2929:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12027              		.loc 1 2929 8 is_stmt 1 view .LVU3926
2930:src/display.c **** 		{
 12028              		.loc 1 2930 8 view .LVU3927
2929:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 12029              		.loc 1 2929 10 is_stmt 0 view .LVU3928
 12030 0c3c 029B     		ldr	r3, [sp, #8]
 12031 0c3e 03EB4303 		add	r3, r3, r3, lsl #1
2930:src/display.c **** 		{
ARM GAS  /tmp/ccdg5rgB.s 			page 343


 12032              		.loc 1 2930 15 view .LVU3929
 12033 0c42 A0EB4300 		sub	r0, r0, r3, lsl #1
 12034              	.LVL1379:
2930:src/display.c **** 		{
 12035              		.loc 1 2930 11 view .LVU3930
 12036 0c46 1328     		cmp	r0, #19
 12037 0c48 3FDD     		ble	.L1047
2932:src/display.c **** 		  set_status_right(buf);
 12038              		.loc 1 2932 5 is_stmt 1 view .LVU3931
2932:src/display.c **** 		  set_status_right(buf);
 12039              		.loc 1 2932 20 is_stmt 0 view .LVU3932
 12040 0c4a 28AB     		add	r3, sp, #160
 12041 0c4c 0344     		add	r3, r3, r0
 12042 0c4e 019A     		ldr	r2, [sp, #4]
 12043 0c50 03F8282C 		strb	r2, [r3, #-40]
2933:src/display.c **** 		}
 12044              		.loc 1 2933 5 is_stmt 1 view .LVU3933
 12045 0c54 1EA8     		add	r0, sp, #120
 12046 0c56 FFF7FEFF 		bl	set_status_right
 12047              	.LVL1380:
 12048 0c5a D1E7     		b	.L1048
 12049              	.LVL1381:
 12050              	.L1287:
2923:src/display.c **** 	  } else if (State2.alphas) {
 12051              		.loc 1 2923 6 view .LVU3934
2923:src/display.c **** 	  } else if (State2.alphas) {
 12052              		.loc 1 2923 48 is_stmt 0 view .LVU3935
 12053 0c5c 501E     		subs	r0, r2, #1
 12054 0c5e 0293     		str	r3, [sp, #8]
 12055 0c60 FFF7FEFF 		bl	get_reg_n
 12056              	.LVL1382:
 12057              	.LBB662:
 12058              	.LBI662:
3444:src/display.c **** 	int glen = *graphic++;
 12059              		.loc 1 3444 19 is_stmt 1 view .LVU3936
 12060              	.LBB663:
3445:src/display.c **** 	int i, j;
 12061              		.loc 1 3445 2 view .LVU3937
3453:src/display.c **** #endif
 12062              		.loc 1 3453 15 is_stmt 0 view .LVU3938
 12063 0c64 424D     		ldr	r5, .L1302+36
3445:src/display.c **** 	int i, j;
 12064              		.loc 1 3445 6 view .LVU3939
 12065 0c66 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 12066              	.LVL1383:
3446:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12067              		.loc 1 3446 2 is_stmt 1 view .LVU3940
3453:src/display.c **** #endif
 12068              		.loc 1 3453 2 view .LVU3941
3453:src/display.c **** #endif
 12069              		.loc 1 3453 15 is_stmt 0 view .LVU3942
 12070 0c68 0122     		movs	r2, #1
 12071 0c6a 2A70     		strb	r2, [r5]
3455:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 12072              		.loc 1 3455 2 is_stmt 1 view .LVU3943
3455:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 12073              		.loc 1 3455 5 is_stmt 0 view .LVU3944
ARM GAS  /tmp/ccdg5rgB.s 			page 344


 12074 0c6c 39B3     		cbz	r1, .L1040
3456:src/display.c **** 
 12075              		.loc 1 3456 2 is_stmt 1 view .LVU3945
 12076              	.LVL1384:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12077              		.loc 1 3458 2 view .LVU3946
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12078              		.loc 1 3458 12 view .LVU3947
 12079 0c6e 8318     		adds	r3, r0, r2
 12080 0c70 0393     		str	r3, [sp, #12]
 12081 0c72 4A29     		cmp	r1, #74
 12082 0c74 D4BF     		ite	le
 12083 0c76 5B18     		addle	r3, r3, r1
 12084 0c78 4A33     		addgt	r3, r3, #74
 12085 0c7a 0193     		str	r3, [sp, #4]
 12086 0c7c CDE90467 		strd	r6, r7, [sp, #16]
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12087              		.loc 1 3458 8 is_stmt 0 view .LVU3948
 12088 0c80 029B     		ldr	r3, [sp, #8]
 12089 0c82 0292     		str	r2, [sp, #8]
 12090 0c84 1D46     		mov	r5, r3
 12091              	.LVL1385:
 12092              	.L1041:
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12093              		.loc 1 3459 14 is_stmt 1 view .LVU3949
 12094 0c86 029B     		ldr	r3, [sp, #8]
 12095 0c88 039F     		ldr	r7, [sp, #12]
 12096 0c8a 03FA05FB 		lsl	fp, r3, r5
 12097 0c8e 05F19406 		add	r6, r5, #148
 12098 0c92 06E0     		b	.L1044
 12099              	.LVL1386:
 12100              	.L1294:
 12101              	.LBB664:
 12102              	.LBB665:
 348:src/display.c ****   else	clr_dot(n);
 12103              		.loc 1 348 11 is_stmt 0 view .LVU3950
 12104 0c94 FFF7FEFF 		bl	set_dot
 12105              	.LVL1387:
 12106              	.L1043:
 348:src/display.c ****   else	clr_dot(n);
 12107              		.loc 1 348 11 view .LVU3951
 12108              	.LBE665:
 12109              	.LBE664:
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12110              		.loc 1 3459 23 is_stmt 1 view .LVU3952
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12111              		.loc 1 3459 14 view .LVU3953
3459:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 12112              		.loc 1 3459 4 is_stmt 0 view .LVU3954
 12113 0c98 019B     		ldr	r3, [sp, #4]
 12114 0c9a BB42     		cmp	r3, r7
 12115 0c9c 06F10606 		add	r6, r6, #6
 12116 0ca0 08D0     		beq	.L1293
 12117              	.LVL1388:
 12118              	.L1044:
3464:src/display.c **** #endif
 12119              		.loc 1 3464 6 is_stmt 1 view .LVU3955
ARM GAS  /tmp/ccdg5rgB.s 			page 345


 12120              	.LBB668:
 12121              	.LBI664:
 347:src/display.c ****   if (on)	set_dot(n);
 12122              		.loc 1 347 6 view .LVU3956
 12123              	.LBB666:
 348:src/display.c ****   else	clr_dot(n);
 12124              		.loc 1 348 3 view .LVU3957
 348:src/display.c ****   else	clr_dot(n);
 12125              		.loc 1 348 11 view .LVU3958
 349:src/display.c **** }
 12126              		.loc 1 349 8 view .LVU3959
 12127              	.LBE666:
 12128              	.LBE668:
3464:src/display.c **** #endif
 12129              		.loc 1 3464 37 is_stmt 0 view .LVU3960
 12130 0ca2 17F8013F 		ldrb	r3, [r7, #1]!	@ zero_extendqisi2
 12131              	.LVL1389:
 12132              	.LBB669:
 12133              	.LBB667:
 348:src/display.c ****   else	clr_dot(n);
 12134              		.loc 1 348 6 view .LVU3961
 12135 0ca6 13EA0B0F 		tst	r3, fp
 348:src/display.c ****   else	clr_dot(n);
 12136              		.loc 1 348 11 view .LVU3962
 12137 0caa 3046     		mov	r0, r6
 348:src/display.c ****   else	clr_dot(n);
 12138              		.loc 1 348 6 view .LVU3963
 12139 0cac F2D1     		bne	.L1294
 349:src/display.c **** }
 12140              		.loc 1 349 8 view .LVU3964
 12141 0cae FFF7FEFF 		bl	clr_dot
 12142              	.LVL1390:
 12143 0cb2 F1E7     		b	.L1043
 12144              	.LVL1391:
 12145              	.L1293:
 349:src/display.c **** }
 12146              		.loc 1 349 8 view .LVU3965
 12147              	.LBE667:
 12148              	.LBE669:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12149              		.loc 1 3458 17 is_stmt 1 view .LVU3966
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12150              		.loc 1 3458 18 is_stmt 0 view .LVU3967
 12151 0cb4 0135     		adds	r5, r5, #1
 12152              	.LVL1392:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12153              		.loc 1 3458 12 is_stmt 1 view .LVU3968
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12154              		.loc 1 3458 2 is_stmt 0 view .LVU3969
 12155 0cb6 062D     		cmp	r5, #6
 12156 0cb8 E5D1     		bne	.L1041
 12157 0cba DDE90467 		ldrd	r6, r7, [sp, #16]
 12158              	.LVL1393:
 12159              	.L1040:
3458:src/display.c **** 	  for (j=1; j<=glen; j++) {
 12160              		.loc 1 3458 2 view .LVU3970
 12161              	.LBE663:
ARM GAS  /tmp/ccdg5rgB.s 			page 346


 12162              	.LBE662:
2973:src/display.c ****       nostk:
 12163              		.loc 1 2973 2 is_stmt 1 view .LVU3971
 12164 0cbe FFF7FEFF 		bl	show_stack
 12165              	.LVL1394:
2975:src/display.c **** 	if (!skip) {
 12166              		.loc 1 2975 2 view .LVU3972
 12167 0cc2 FFF7FEFF 		bl	show_flags
 12168              	.LVL1395:
2976:src/display.c **** 	  if (State2.runmode) {
 12169              		.loc 1 2976 2 view .LVU3973
 12170 0cc6 FFF7DEB9 		b	.L967
 12171              	.LVL1396:
 12172              	.L1047:
2936:src/display.c **** 	      }
 12173              		.loc 1 2936 3 view .LVU3974
 12174 0cca 1EA8     		add	r0, sp, #120
 12175 0ccc FFF7FEFF 		bl	set_status
 12176              	.LVL1397:
 12177 0cd0 96E7     		b	.L1048
 12178              	.LVL1398:
 12179              	.L1285:
 12180              	.LBB670:
 12181              	.LBB654:
 12182              	.LBB652:
2496:src/display.c **** 	    end = regK_idx;
 12183              		.loc 1 2496 6 view .LVU3975
2497:src/display.c **** 	    start = 3;
 12184              		.loc 1 2497 6 view .LVU3976
2498:src/display.c **** 	    group = 4;
 12185              		.loc 1 2498 6 view .LVU3977
2499:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 12186              		.loc 1 2499 6 view .LVU3978
2500:src/display.c **** 	  }
 12187              		.loc 1 2500 6 view .LVU3979
 12188 0cd2 2848     		ldr	r0, .L1302+40
 12189 0cd4 FFF7FEFF 		bl	set_status
 12190              	.LVL1399:
2498:src/display.c **** 	    group = 4;
 12191              		.loc 1 2498 12 is_stmt 0 view .LVU3980
 12192 0cd8 4FF0030B 		mov	fp, #3
2499:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 12193              		.loc 1 2499 12 view .LVU3981
 12194 0cdc 4FF0040A 		mov	r10, #4
 12195              	.LVL1400:
2497:src/display.c **** 	    start = 3;
 12196              		.loc 1 2497 10 view .LVU3982
 12197 0ce0 4FF06F08 		mov	r8, #111
2496:src/display.c **** 	    end = regK_idx;
 12198              		.loc 1 2496 11 view .LVU3983
 12199 0ce4 6427     		movs	r7, #100
 12200              	.LVL1401:
2496:src/display.c **** 	    end = regK_idx;
 12201              		.loc 1 2496 11 view .LVU3984
 12202 0ce6 2CE6     		b	.L1012
 12203              	.LVL1402:
 12204              	.L1239:
ARM GAS  /tmp/ccdg5rgB.s 			page 347


2496:src/display.c **** 	    end = regK_idx;
 12205              		.loc 1 2496 11 view .LVU3985
 12206 0ce8 059E     		ldr	r6, [sp, #20]
 12207              	.LVL1403:
2496:src/display.c **** 	    end = regK_idx;
 12208              		.loc 1 2496 11 view .LVU3986
 12209 0cea 1BE7     		b	.L1007
 12210              	.LVL1404:
 12211              	.L1282:
2496:src/display.c **** 	    end = regK_idx;
 12212              		.loc 1 2496 11 view .LVU3987
 12213              	.LBE652:
2456:src/display.c **** 	  p = num_arg(buf, free_mem());
 12214              		.loc 1 2456 4 is_stmt 1 view .LVU3988
 12215 0cec 2248     		ldr	r0, .L1302+44
 12216 0cee FFF7FEFF 		bl	set_status
 12217              	.LVL1405:
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 12218              		.loc 1 2457 4 view .LVU3989
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 12219              		.loc 1 2457 21 is_stmt 0 view .LVU3990
 12220 0cf2 FFF7FEFF 		bl	free_mem
 12221              	.LVL1406:
 12222 0cf6 0146     		mov	r1, r0
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 12223              		.loc 1 2457 8 view .LVU3991
 12224 0cf8 15A8     		add	r0, sp, #84
 12225              	.LVL1407:
2457:src/display.c **** 	  p = scopy(p, " , FL. ");
 12226              		.loc 1 2457 8 view .LVU3992
 12227 0cfa FFF7FEFF 		bl	num_arg
 12228              	.LVL1408:
2458:src/display.c **** 	  p = num_arg(p, free_flash());
 12229              		.loc 1 2458 4 is_stmt 1 view .LVU3993
2458:src/display.c **** 	  p = num_arg(p, free_flash());
 12230              		.loc 1 2458 8 is_stmt 0 view .LVU3994
 12231 0cfe 1F49     		ldr	r1, .L1302+48
 12232 0d00 FFF7FEFF 		bl	scopy
 12233              	.LVL1409:
2458:src/display.c **** 	  p = num_arg(p, free_flash());
 12234              		.loc 1 2458 8 view .LVU3995
 12235 0d04 0546     		mov	r5, r0
 12236              	.LVL1410:
2459:src/display.c **** 	  *p = '\0';
 12237              		.loc 1 2459 4 is_stmt 1 view .LVU3996
2459:src/display.c **** 	  *p = '\0';
 12238              		.loc 1 2459 19 is_stmt 0 view .LVU3997
 12239 0d06 FFF7FEFF 		bl	free_flash
 12240              	.LVL1411:
2459:src/display.c **** 	  *p = '\0';
 12241              		.loc 1 2459 19 view .LVU3998
 12242 0d0a 0146     		mov	r1, r0
2459:src/display.c **** 	  *p = '\0';
 12243              		.loc 1 2459 8 view .LVU3999
 12244 0d0c 2846     		mov	r0, r5
 12245 0d0e FFF7FEFF 		bl	num_arg
 12246              	.LVL1412:
ARM GAS  /tmp/ccdg5rgB.s 			page 348


 12247 0d12 0346     		mov	r3, r0
 12248              	.LVL1413:
2460:src/display.c **** 	  set_digits_string(buf, 0);
 12249              		.loc 1 2460 4 is_stmt 1 view .LVU4000
2460:src/display.c **** 	  set_digits_string(buf, 0);
 12250              		.loc 1 2460 7 is_stmt 0 view .LVU4001
 12251 0d14 0021     		movs	r1, #0
2461:src/display.c **** 	}
 12252              		.loc 1 2461 4 view .LVU4002
 12253 0d16 15A8     		add	r0, sp, #84
 12254              	.LVL1414:
2460:src/display.c **** 	  set_digits_string(buf, 0);
 12255              		.loc 1 2460 7 view .LVU4003
 12256 0d18 1970     		strb	r1, [r3]
2461:src/display.c **** 	}
 12257              		.loc 1 2461 4 is_stmt 1 view .LVU4004
 12258 0d1a FFF7FEFF 		bl	set_digits_string
 12259              	.LVL1415:
2461:src/display.c **** 	}
 12260              		.loc 1 2461 4 is_stmt 0 view .LVU4005
 12261 0d1e 01E7     		b	.L1007
 12262              	.LVL1416:
 12263              	.L1281:
2461:src/display.c **** 	}
 12264              		.loc 1 2461 4 view .LVU4006
 12265              	.LBE654:
 12266              	.LBE670:
 12267              	.LBB671:
 12268              	.LBB616:
2564:src/display.c **** 	  if (lblpc != pc) {
 12269              		.loc 1 2564 4 is_stmt 1 view .LVU4007
2564:src/display.c **** 	  if (lblpc != pc) {
 12270              		.loc 1 2564 12 is_stmt 0 view .LVU4008
 12271 0d20 4046     		mov	r0, r8
 12272 0d22 3946     		mov	r1, r7
 12273 0d24 FFF7FEFF 		bl	findmultilbl
 12274              	.LVL1417:
2564:src/display.c **** 	  if (lblpc != pc) {
 12275              		.loc 1 2564 10 view .LVU4009
 12276 0d28 85B2     		uxth	r5, r0
 12277              	.LVL1418:
2565:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12278              		.loc 1 2565 4 is_stmt 1 view .LVU4010
2565:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12279              		.loc 1 2565 7 is_stmt 0 view .LVU4011
 12280 0d2a AB45     		cmp	fp, r5
2564:src/display.c **** 	  if (lblpc != pc) {
 12281              		.loc 1 2564 12 view .LVU4012
 12282 0d2c 8046     		mov	r8, r0
 12283              	.LVL1419:
2565:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 12284              		.loc 1 2565 7 view .LVU4013
 12285 0d2e 3FF4EBAD 		beq	.L1254
2566:src/display.c **** 	    n = nLIB(lblpc);
 12286              		.loc 1 2566 6 is_stmt 1 view .LVU4014
 12287 0d32 1348     		ldr	r0, .L1302+52
 12288 0d34 3F21     		movs	r1, #63
ARM GAS  /tmp/ccdg5rgB.s 			page 349


 12289 0d36 FFF7FEFF 		bl	set_digits_string
 12290              	.LVL1420:
2567:src/display.c **** 	    if (n == REGION_RAM)
 12291              		.loc 1 2567 6 view .LVU4015
2568:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12292              		.loc 1 2568 6 view .LVU4016
2568:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12293              		.loc 1 2568 9 is_stmt 0 view .LVU4017
 12294 0d3a AD0B     		lsrs	r5, r5, #14
 12295              	.LVL1421:
2568:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 12296              		.loc 1 2568 9 view .LVU4018
 12297 0d3c 5DD1     		bne	.L1025
2569:src/display.c **** 	    else {
 12298              		.loc 1 2569 8 is_stmt 1 view .LVU4019
 12299 0d3e 2A46     		mov	r2, r5
 12300 0d40 1FFA88F0 		uxth	r0, r8
 12301 0d44 0121     		movs	r1, #1
 12302 0d46 FFF7FEFF 		bl	set_exp
 12303              	.LVL1422:
 12304 0d4a DDE5     		b	.L1254
 12305              	.L1303:
 12306              		.align	2
 12307              	.L1302:
 12308 0d4c 00000000 		.word	DispPlot
 12309 0d50 78000000 		.word	.LC38
 12310 0d54 5C000000 		.word	.LC35
 12311 0d58 00000000 		.word	SizeStatRegs
 12312 0d5c 00000000 		.word	main_ram
 12313 0d60 6C000000 		.word	.LC37
 12314 0d64 64000000 		.word	.LC36
 12315 0d68 00000000 		.word	DispMsg
 12316 0d6c A8000000 		.word	.LC43
 12317 0d70 00000000 		.word	forceDispPlot
 12318 0d74 7C000000 		.word	.LC39
 12319 0d78 4C000000 		.word	.LC33
 12320 0d7c 54000000 		.word	.LC34
 12321 0d80 98000000 		.word	.LC41
 12322              	.LVL1423:
 12323              	.L1276:
2569:src/display.c **** 	    else {
 12324              		.loc 1 2569 8 is_stmt 0 view .LVU4020
 12325              	.LBE616:
 12326              	.LBE671:
2910:src/display.c **** 	  skip = 1;
 12327              		.loc 1 2910 4 is_stmt 1 view .LVU4021
 12328              	.LBB672:
 12329              	.LBI672:
2581:src/display.c **** 	char buf[16], *bp;
 12330              		.loc 1 2581 19 view .LVU4022
 12331              	.LBB673:
2582:src/display.c **** 	int n = State2.digval;
 12332              		.loc 1 2582 2 view .LVU4023
2583:src/display.c **** 	
 12333              		.loc 1 2583 2 view .LVU4024
2583:src/display.c **** 	
 12334              		.loc 1 2583 6 is_stmt 0 view .LVU4025
ARM GAS  /tmp/ccdg5rgB.s 			page 350


 12335 0d84 B4F808A0 		ldrh	r10, [r4, #8]
 12336              	.LVL1424:
2590:src/display.c **** 	  n;
 12337              		.loc 1 2590 2 is_stmt 1 view .LVU4026
2590:src/display.c **** 	  n;
 12338              		.loc 1 2590 54 is_stmt 0 view .LVU4027
 12339 0d88 CA07     		lsls	r2, r1, #31
 12340 0d8a 4CBF     		ite	mi
 12341 0d8c 0AF17008 		addmi	r8, r10, #112
2583:src/display.c **** 	
 12342              		.loc 1 2583 6 view .LVU4028
 12343 0d90 D046     		movpl	r8, r10
 12344              	.LVL1425:
2594:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12345              		.loc 1 2594 2 is_stmt 1 view .LVU4029
2594:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 12346              		.loc 1 2594 5 is_stmt 0 view .LVU4030
 12347 0d92 11F00401 		ands	r1, r1, #4
 12348 0d96 6CD0     		beq	.L1028
2595:src/display.c **** 	}
 12349              		.loc 1 2595 4 is_stmt 1 view .LVU4031
2595:src/display.c **** 	}
 12350              		.loc 1 2595 15 is_stmt 0 view .LVU4032
 12351 0d98 15A9     		add	r1, sp, #84
 12352 0d9a 4046     		mov	r0, r8
 12353 0d9c FFF7FEFF 		bl	alpha_rcl_s
 12354              	.LVL1426:
2595:src/display.c **** 	}
 12355              		.loc 1 2595 4 view .LVU4033
 12356 0da0 FFF7FEFF 		bl	set_status
 12357              	.LVL1427:
 12358              	.L1029:
2617:src/display.c ****       }
 12359              		.loc 1 2617 2 is_stmt 1 view .LVU4034
 12360 0da4 4046     		mov	r0, r8
 12361 0da6 0021     		movs	r1, #0
 12362 0da8 FFF7FEFF 		bl	format_reg
 12363              	.LVL1428:
2617:src/display.c ****       }
 12364              		.loc 1 2617 2 is_stmt 0 view .LVU4035
 12365              	.LBE673:
 12366              	.LBE672:
2911:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 12367              		.loc 1 2911 4 is_stmt 1 view .LVU4036
2912:src/display.c **** 	    annunciators();
 12368              		.loc 1 2912 4 view .LVU4037
2912:src/display.c **** 	    annunciators();
 12369              		.loc 1 2912 7 is_stmt 0 view .LVU4038
 12370 0dac 002D     		cmp	r5, #0
 12371 0dae 5DD1     		bne	.L1035
2912:src/display.c **** 	    annunciators();
 12372              		.loc 1 2912 25 discriminator 1 view .LVU4039
 12373 0db0 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 12374 0db2 012B     		cmp	r3, #1
 12375 0db4 54D0     		beq	.L1295
 12376              	.L1036:
2973:src/display.c ****       nostk:
ARM GAS  /tmp/ccdg5rgB.s 			page 351


 12377              		.loc 1 2973 2 is_stmt 1 view .LVU4040
 12378 0db6 FFF7FEFF 		bl	show_stack
 12379              	.LVL1429:
2975:src/display.c **** 	if (!skip) {
 12380              		.loc 1 2975 2 view .LVU4041
2683:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 12381              		.loc 1 2683 6 is_stmt 0 view .LVU4042
 12382 0dba 0026     		movs	r6, #0
2975:src/display.c **** 	if (!skip) {
 12383              		.loc 1 2975 2 view .LVU4043
 12384 0dbc FFF7FEFF 		bl	show_flags
 12385              	.LVL1430:
2976:src/display.c **** 	  if (State2.runmode) {
 12386              		.loc 1 2976 2 is_stmt 1 view .LVU4044
 12387 0dc0 4DE5     		b	.L1000
 12388              	.LVL1431:
 12389              	.L1280:
 12390              	.LBB676:
 12391              	.LBB604:
2872:src/display.c **** 	      copyreg(&z, x);
 12392              		.loc 1 2872 8 view .LVU4045
2872:src/display.c **** 	      copyreg(&z, x);
 12393              		.loc 1 2872 27 is_stmt 0 view .LVU4046
 12394 0dc2 464B     		ldr	r3, .L1304
 12395 0dc4 1E68     		ldr	r6, [r3]
 12396              	.LVL1432:
2873:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 12397              		.loc 1 2873 8 is_stmt 1 view .LVU4047
 12398 0dc6 15A8     		add	r0, sp, #84
 12399 0dc8 3146     		mov	r1, r6
 12400 0dca FFF7FEFF 		bl	copyreg
 12401              	.LVL1433:
2874:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 12402              		.loc 1 2874 8 view .LVU4048
 12403 0dce E8B2     		uxtb	r0, r5
 12404 0dd0 FFF7FEFF 		bl	sigma_val
 12405              	.LVL1434:
2875:src/display.c **** 	      copyreg(x, &z);
 12406              		.loc 1 2875 8 view .LVU4049
 12407 0dd4 FFF7FEFF 		bl	is_dblmode
 12408              	.LVL1435:
 12409 0dd8 0021     		movs	r1, #0
 12410 0dda 0246     		mov	r2, r0
 12411 0ddc 3046     		mov	r0, r6
 12412 0dde FFF7FEFF 		bl	set_x
 12413              	.LVL1436:
2876:src/display.c **** 	      skip = 1;
 12414              		.loc 1 2876 8 view .LVU4050
 12415 0de2 15A9     		add	r1, sp, #84
 12416 0de4 3046     		mov	r0, r6
 12417 0de6 FFF7FEFF 		bl	copyreg
 12418              	.LVL1437:
2877:src/display.c **** 	    }
 12419              		.loc 1 2877 8 view .LVU4051
2877:src/display.c **** 	    }
 12420              		.loc 1 2877 13 is_stmt 0 view .LVU4052
 12421 0dea 0125     		movs	r5, #1
ARM GAS  /tmp/ccdg5rgB.s 			page 352


 12422              	.LVL1438:
2877:src/display.c **** 	    }
 12423              		.loc 1 2877 13 view .LVU4053
 12424 0dec 23E5     		b	.L992
 12425              	.LVL1439:
 12426              	.L990:
2877:src/display.c **** 	    }
 12427              		.loc 1 2877 13 view .LVU4054
 12428              	.LBE604:
2846:src/display.c **** 	    else
 12429              		.loc 1 2846 8 is_stmt 1 view .LVU4055
 12430 0dee 3C48     		ldr	r0, .L1304+4
 12431 0df0 0021     		movs	r1, #0
 12432 0df2 FFF7FEFF 		bl	set_digits_string
 12433              	.LVL1440:
2849:src/display.c **** 	  } else if (State2.runmode) {
 12434              		.loc 1 2849 11 is_stmt 0 view .LVU4056
 12435 0df6 0125     		movs	r5, #1
 12436              	.LVL1441:
2846:src/display.c **** 	    else
 12437              		.loc 1 2846 8 view .LVU4057
 12438 0df8 1DE5     		b	.L992
 12439              	.LVL1442:
 12440              	.L1025:
2846:src/display.c **** 	    else
 12441              		.loc 1 2846 8 view .LVU4058
 12442              	.LBE676:
 12443              	.LBB677:
 12444              	.LBB617:
2571:src/display.c **** #ifndef REALBUILD
 12445              		.loc 1 2571 8 is_stmt 1 view .LVU4059
2571:src/display.c **** #ifndef REALBUILD
 12446              		.loc 1 2571 37 is_stmt 0 view .LVU4060
 12447 0dfa 05EB8500 		add	r0, r5, r5, lsl #2
2571:src/display.c **** #ifndef REALBUILD
 12448              		.loc 1 2571 8 view .LVU4061
 12449 0dfe 3946     		mov	r1, r7
 12450 0e00 5044     		add	r0, r0, r10
 12451 0e02 FFF7FEFF 		bl	set_exp_digits_string
 12452              	.LVL1443:
2573:src/display.c **** #endif
 12453              		.loc 1 2573 8 is_stmt 1 view .LVU4062
 12454 0e06 374B     		ldr	r3, .L1304+8
 12455 0e08 3748     		ldr	r0, .L1304+12
2573:src/display.c **** #endif
 12456              		.loc 1 2573 47 is_stmt 0 view .LVU4063
 12457 0e0a 0A21     		movs	r1, #10
2573:src/display.c **** #endif
 12458              		.loc 1 2573 8 view .LVU4064
 12459 0e0c 01FB0531 		mla	r1, r1, r5, r3
 12460 0e10 FFF7FEFF 		bl	scopy
 12461              	.LVL1444:
2573:src/display.c **** #endif
 12462              		.loc 1 2573 8 view .LVU4065
 12463              	.LBE617:
 12464              	.LBE677:
2973:src/display.c ****       nostk:
ARM GAS  /tmp/ccdg5rgB.s 			page 353


 12465              		.loc 1 2973 2 is_stmt 1 view .LVU4066
 12466 0e14 78E5     		b	.L1254
 12467              	.LVL1445:
 12468              	.L1279:
 12469              	.LBB678:
 12470              	.LBB605:
2852:src/display.c **** 	      decimal64 z;
 12471              		.loc 1 2852 8 view .LVU4067
2853:src/display.c **** 
 12472              		.loc 1 2853 8 view .LVU4068
2855:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 12473              		.loc 1 2855 8 view .LVU4069
 12474 0e16 0CA8     		add	r0, sp, #48
 12475 0e18 FFF7FEFF 		bl	getX
 12476              	.LVL1446:
2856:src/display.c **** 		const unsigned int f = argKIND(op);
 12477              		.loc 1 2856 8 view .LVU4070
2856:src/display.c **** 		const unsigned int f = argKIND(op);
 12478              		.loc 1 2856 11 is_stmt 0 view .LVU4071
 12479 0e1c C5F30723 		ubfx	r3, r5, #8, #8
 12480 0e20 022B     		cmp	r3, #2
 12481 0e22 44D1     		bne	.L994
 12482              	.LBB606:
2857:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12483              		.loc 1 2857 3 is_stmt 1 view .LVU4072
2857:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 12484              		.loc 1 2857 22 is_stmt 0 view .LVU4073
 12485 0e24 EDB2     		uxtb	r5, r5
 12486              	.LVL1447:
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12487              		.loc 1 2858 3 is_stmt 1 view .LVU4074
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12488              		.loc 1 2858 6 is_stmt 0 view .LVU4075
 12489 0e26 9B2D     		cmp	r5, #155
 12490              	.LBB607:
2861:src/display.c **** 		}
 12491              		.loc 1 2861 5 view .LVU4076
 12492 0e28 15AF     		add	r7, sp, #84
 12493              	.LBE607:
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12494              		.loc 1 2858 6 view .LVU4077
 12495 0e2a 3CD8     		bhi	.L995
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12496              		.loc 1 2858 28 discriminator 1 view .LVU4078
 12497 0e2c 1823     		movs	r3, #24
 12498 0e2e 2F4A     		ldr	r2, .L1304+16
 12499 0e30 03FB05F3 		mul	r3, r3, r5
 12500 0e34 D358     		ldr	r3, [r2, r3]
2858:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 12501              		.loc 1 2858 23 discriminator 1 view .LVU4079
 12502 0e36 002B     		cmp	r3, #0
 12503 0e38 35D0     		beq	.L995
 12504              	.LBB608:
2859:src/display.c **** 		  update_speed(0);
 12505              		.loc 1 2859 5 is_stmt 1 view .LVU4080
 12506              	.LVL1448:
2860:src/display.c **** 		  fp(&r, &x);
ARM GAS  /tmp/ccdg5rgB.s 			page 354


 12507              		.loc 1 2860 20 view .LVU4081
2861:src/display.c **** 		}
 12508              		.loc 1 2861 5 view .LVU4082
 12509 0e3a 0CA9     		add	r1, sp, #48
 12510 0e3c 3846     		mov	r0, r7
 12511 0e3e 9847     		blx	r3
 12512              	.LVL1449:
 12513              	.L996:
2861:src/display.c **** 		}
 12514              		.loc 1 2861 5 is_stmt 0 view .LVU4083
 12515              	.LBE608:
 12516              	.LBE606:
2867:src/display.c **** 	      packed_from_number(&z, &r);
 12517              		.loc 1 2867 8 is_stmt 1 discriminator 1 view .LVU4084
 12518 0e40 2B4A     		ldr	r2, .L1304+20
 12519 0e42 3946     		mov	r1, r7
 12520 0e44 3846     		mov	r0, r7
 12521 0e46 FFF7FEFF 		bl	decNumberNormalize
 12522              	.LVL1450:
2868:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 12523              		.loc 1 2868 8 discriminator 1 view .LVU4085
 12524 0e4a 3946     		mov	r1, r7
 12525 0e4c 06A8     		add	r0, sp, #24
 12526 0e4e FFF7FEFF 		bl	packed_from_number
 12527              	.LVL1451:
2869:src/display.c **** 	      skip = 1;
 12528              		.loc 1 2869 8 discriminator 1 view .LVU4086
 12529 0e52 0022     		movs	r2, #0
 12530 0e54 06A8     		add	r0, sp, #24
 12531 0e56 1146     		mov	r1, r2
 12532 0e58 FFF7FEFF 		bl	set_x
 12533              	.LVL1452:
2870:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12534              		.loc 1 2870 8 discriminator 1 view .LVU4087
2870:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12535              		.loc 1 2870 13 is_stmt 0 discriminator 1 view .LVU4088
 12536 0e5c 0125     		movs	r5, #1
 12537              	.LBE605:
 12538 0e5e EAE4     		b	.L992
 12539              	.LVL1453:
 12540              	.L1295:
2870:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12541              		.loc 1 2870 13 discriminator 1 view .LVU4089
 12542              	.LBE678:
2912:src/display.c **** 	    annunciators();
 12543              		.loc 1 2912 56 discriminator 2 view .LVU4090
 12544 0e60 244B     		ldr	r3, .L1304+24
 12545 0e62 1B68     		ldr	r3, [r3]
 12546 0e64 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 12547 0e68 DD07     		lsls	r5, r3, #31
 12548 0e6a A4D5     		bpl	.L1036
 12549              	.L1035:
2913:src/display.c **** 	  }
 12550              		.loc 1 2913 6 is_stmt 1 view .LVU4091
 12551 0e6c FFF7FEFF 		bl	annunciators
 12552              	.LVL1454:
 12553 0e70 4AE5     		b	.L1254
ARM GAS  /tmp/ccdg5rgB.s 			page 355


 12554              	.LVL1455:
 12555              	.L1028:
 12556              	.LBB679:
 12557              	.LBB674:
2598:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 12558              		.loc 1 2598 4 view .LVU4092
 12559 0e72 15AF     		add	r7, sp, #84
 12560 0e74 1022     		movs	r2, #16
 12561 0e76 3846     		mov	r0, r7
 12562 0e78 FFF7FEFF 		bl	xset
 12563              	.LVL1456:
2602:src/display.c **** #endif
 12564              		.loc 1 2602 4 view .LVU4093
2602:src/display.c **** #endif
 12565              		.loc 1 2602 9 is_stmt 0 view .LVU4094
 12566 0e7c 1E49     		ldr	r1, .L1304+28
 12567 0e7e 3846     		mov	r0, r7
 12568 0e80 FFF7FEFF 		bl	scopy_spc
 12569              	.LVL1457:
2604:src/display.c **** 	    *bp++ = '.';
 12570              		.loc 1 2604 8 view .LVU4095
 12571 0e84 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 12572              	.LVL1458:
2604:src/display.c **** 	    *bp++ = '.';
 12573              		.loc 1 2604 4 is_stmt 1 view .LVU4096
2604:src/display.c **** 	    *bp++ = '.';
 12574              		.loc 1 2604 7 is_stmt 0 view .LVU4097
 12575 0e86 DB07     		lsls	r3, r3, #31
 12576 0e88 1ED5     		bpl	.L1030
2605:src/display.c **** 	    if (n >= 100) {
 12577              		.loc 1 2605 6 is_stmt 1 view .LVU4098
 12578              	.LVL1459:
2605:src/display.c **** 	    if (n >= 100) {
 12579              		.loc 1 2605 12 is_stmt 0 view .LVU4099
 12580 0e8a 2E23     		movs	r3, #46
2606:src/display.c **** 	      *bp++ = '1';
 12581              		.loc 1 2606 9 view .LVU4100
 12582 0e8c BAF1630F 		cmp	r10, #99
2605:src/display.c **** 	    if (n >= 100) {
 12583              		.loc 1 2605 12 view .LVU4101
 12584 0e90 0370     		strb	r3, [r0]
2606:src/display.c **** 	      *bp++ = '1';
 12585              		.loc 1 2606 6 is_stmt 1 view .LVU4102
2606:src/display.c **** 	      *bp++ = '1';
 12586              		.loc 1 2606 9 is_stmt 0 view .LVU4103
 12587 0e92 14DC     		bgt	.L1031
2605:src/display.c **** 	    if (n >= 100) {
 12588              		.loc 1 2605 9 view .LVU4104
 12589 0e94 0130     		adds	r0, r0, #1
 12590              	.LVL1460:
 12591              	.L1032:
2612:src/display.c **** 	  else
 12592              		.loc 1 2612 6 is_stmt 1 view .LVU4105
2612:src/display.c **** 	  else
 12593              		.loc 1 2612 11 is_stmt 0 view .LVU4106
 12594 0e96 5146     		mov	r1, r10
 12595 0e98 0222     		movs	r2, #2
ARM GAS  /tmp/ccdg5rgB.s 			page 356


 12596 0e9a FFF7FEFF 		bl	num_arg_0
 12597              	.LVL1461:
 12598              	.L1034:
2615:src/display.c **** 	}
 12599              		.loc 1 2615 4 is_stmt 1 view .LVU4107
 12600 0e9e 3846     		mov	r0, r7
 12601 0ea0 FFF7FEFF 		bl	set_status
 12602              	.LVL1462:
 12603 0ea4 7EE7     		b	.L1029
 12604              	.LVL1463:
 12605              	.L995:
2615:src/display.c **** 	}
 12606              		.loc 1 2615 4 is_stmt 0 view .LVU4108
 12607              	.LBE674:
 12608              	.LBE679:
 12609              	.LBB680:
 12610              	.LBB610:
 12611              	.LBB609:
2864:src/display.c **** 	      } else
 12612              		.loc 1 2864 5 is_stmt 1 view .LVU4109
 12613 0ea6 3846     		mov	r0, r7
 12614 0ea8 FFF7FEFF 		bl	set_NaN
 12615              	.LVL1464:
 12616 0eac C8E7     		b	.L996
 12617              	.LVL1465:
 12618              	.L994:
2864:src/display.c **** 	      } else
 12619              		.loc 1 2864 5 is_stmt 0 view .LVU4110
 12620              	.LBE609:
2866:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12621              		.loc 1 2866 3 is_stmt 1 view .LVU4111
 12622 0eae 15AF     		add	r7, sp, #84
 12623 0eb0 0CAA     		add	r2, sp, #48
 12624 0eb2 05F07F01 		and	r1, r5, #127
 12625 0eb6 3846     		mov	r0, r7
 12626 0eb8 FFF7FEFF 		bl	do_conv
 12627              	.LVL1466:
 12628 0ebc C0E7     		b	.L996
 12629              	.LVL1467:
 12630              	.L1031:
2866:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12631              		.loc 1 2866 3 is_stmt 0 view .LVU4112
 12632              	.LBE610:
 12633              	.LBE680:
 12634              	.LBB681:
 12635              	.LBB675:
2607:src/display.c **** 	      n -= 100;
 12636              		.loc 1 2607 8 is_stmt 1 view .LVU4113
2607:src/display.c **** 	      n -= 100;
 12637              		.loc 1 2607 14 is_stmt 0 view .LVU4114
 12638 0ebe 3123     		movs	r3, #49
 12639 0ec0 4370     		strb	r3, [r0, #1]
2608:src/display.c **** 	    }
 12640              		.loc 1 2608 8 is_stmt 1 view .LVU4115
2608:src/display.c **** 	    }
 12641              		.loc 1 2608 10 is_stmt 0 view .LVU4116
 12642 0ec2 AAF1640A 		sub	r10, r10, #100
ARM GAS  /tmp/ccdg5rgB.s 			page 357


 12643              	.LVL1468:
2607:src/display.c **** 	      n -= 100;
 12644              		.loc 1 2607 11 view .LVU4117
 12645 0ec6 0230     		adds	r0, r0, #2
 12646              	.LVL1469:
 12647              	.L1030:
2611:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12648              		.loc 1 2611 4 is_stmt 1 view .LVU4118
2611:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12649              		.loc 1 2611 7 is_stmt 0 view .LVU4119
 12650 0ec8 BAF1630F 		cmp	r10, #99
 12651 0ecc E3DD     		ble	.L1032
2614:src/display.c **** 	  set_status(buf);
 12652              		.loc 1 2614 6 is_stmt 1 view .LVU4120
 12653              	.LVL1470:
2614:src/display.c **** 	  set_status(buf);
 12654              		.loc 1 2614 22 is_stmt 0 view .LVU4121
 12655 0ece 0B4B     		ldr	r3, .L1304+32
 12656 0ed0 5344     		add	r3, r3, r10
2614:src/display.c **** 	  set_status(buf);
 12657              		.loc 1 2614 12 view .LVU4122
 12658 0ed2 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12659 0ed6 0370     		strb	r3, [r0]
 12660 0ed8 E1E7     		b	.L1034
 12661              	.L1305:
 12662 0eda 00BF     		.align	2
 12663              	.L1304:
 12664 0edc 00000000 		.word	StackBase
 12665 0ee0 40000000 		.word	.LC32
 12666 0ee4 00000000 		.word	.LANCHOR23
 12667 0ee8 00000000 		.word	LastDisplayedNumber
 12668 0eec 00000000 		.word	monfuncs
 12669 0ef0 00000000 		.word	Ctx
 12670 0ef4 00000000 		.word	main_ram
 12671 0ef8 A0000000 		.word	.LC42
 12672 0efc BC000000 		.word	.LC30
 12673              	.LBE675:
 12674              	.LBE681:
 12675              		.cfi_endproc
 12676              	.LFE34:
 12678              		.section	.text.frozen_display,"ax",%progbits
 12679              		.align	1
 12680              		.p2align 2,,3
 12681              		.global	frozen_display
 12682              		.syntax unified
 12683              		.thumb
 12684              		.thumb_func
 12685              		.fpu fpv4-sp-d16
 12687              	frozen_display:
 12688              	.LFB35:
3438:src/display.c **** 	State2.disp_freeze = 0;
 12689              		.loc 1 3438 7 is_stmt 1 view -0
 12690              		.cfi_startproc
 12691              		@ args = 0, pretend = 0, frame = 0
 12692              		@ frame_needed = 0, uses_anonymous_args = 0
3439:src/display.c **** 	display();
 12693              		.loc 1 3439 2 view .LVU4124
ARM GAS  /tmp/ccdg5rgB.s 			page 358


3438:src/display.c **** 	State2.disp_freeze = 0;
 12694              		.loc 1 3438 7 is_stmt 0 view .LVU4125
 12695 0000 10B5     		push	{r4, lr}
 12696              		.cfi_def_cfa_offset 8
 12697              		.cfi_offset 4, -8
 12698              		.cfi_offset 14, -4
3439:src/display.c **** 	display();
 12699              		.loc 1 3439 21 view .LVU4126
 12700 0002 064C     		ldr	r4, .L1308
 12701 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12702 0006 6FF30413 		bfc	r3, #4, #1
 12703 000a E375     		strb	r3, [r4, #23]
3440:src/display.c **** 	State2.disp_freeze = 1;
 12704              		.loc 1 3440 2 is_stmt 1 view .LVU4127
 12705 000c FFF7FEFF 		bl	display
 12706              	.LVL1471:
3441:src/display.c ****       }
 12707              		.loc 1 3441 2 view .LVU4128
3441:src/display.c ****       }
 12708              		.loc 1 3441 21 is_stmt 0 view .LVU4129
 12709 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12710 0012 43F01003 		orr	r3, r3, #16
 12711 0016 E375     		strb	r3, [r4, #23]
3442:src/display.c **** 
 12712              		.loc 1 3442 7 view .LVU4130
 12713 0018 10BD     		pop	{r4, pc}
 12714              	.L1309:
 12715 001a 00BF     		.align	2
 12716              	.L1308:
 12717 001c 00000000 		.word	StateWhileOn
 12718              		.cfi_endproc
 12719              	.LFE35:
 12721              		.section	.text.message,"ax",%progbits
 12722              		.align	1
 12723              		.p2align 2,,3
 12724              		.global	message
 12725              		.syntax unified
 12726              		.thumb
 12727              		.thumb_func
 12728              		.fpu fpv4-sp-d16
 12730              	message:
 12731              	.LVL1472:
 12732              	.LFB46:
3659:src/display.c **** 	State2.disp_freeze = 0;
 12733              		.loc 1 3659 7 is_stmt 1 view -0
 12734              		.cfi_startproc
 12735              		@ args = 0, pretend = 0, frame = 0
 12736              		@ frame_needed = 0, uses_anonymous_args = 0
3660:src/display.c **** 	State2.disp_small = 0;
 12737              		.loc 1 3660 2 view .LVU4132
3661:src/display.c **** 	WasDataEntry = 0;
 12738              		.loc 1 3661 2 view .LVU4133
3661:src/display.c **** 	WasDataEntry = 0;
 12739              		.loc 1 3661 20 is_stmt 0 view .LVU4134
 12740 0000 174A     		ldr	r2, .L1320
3659:src/display.c **** 	State2.disp_freeze = 0;
 12741              		.loc 1 3659 7 view .LVU4135
ARM GAS  /tmp/ccdg5rgB.s 			page 359


 12742 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12743              		.cfi_def_cfa_offset 24
 12744              		.cfi_offset 3, -24
 12745              		.cfi_offset 4, -20
 12746              		.cfi_offset 5, -16
 12747              		.cfi_offset 6, -12
 12748              		.cfi_offset 7, -8
 12749              		.cfi_offset 14, -4
3661:src/display.c **** 	WasDataEntry = 0;
 12750              		.loc 1 3661 20 view .LVU4136
 12751 0004 D38A     		ldrh	r3, [r2, #22]
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12752              		.loc 1 3662 15 view .LVU4137
 12753 0006 174E     		ldr	r6, .L1320+4
3661:src/display.c **** 	WasDataEntry = 0;
 12754              		.loc 1 3661 20 view .LVU4138
 12755 0008 23F48453 		bic	r3, r3, #4224
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12756              		.loc 1 3662 15 view .LVU4139
 12757 000c 0027     		movs	r7, #0
3661:src/display.c **** 	WasDataEntry = 0;
 12758              		.loc 1 3661 20 view .LVU4140
 12759 000e D382     		strh	r3, [r2, #22]	@ movhi
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12760              		.loc 1 3662 2 is_stmt 1 view .LVU4141
3663:src/display.c **** 	  // Complete redraw necessary
 12761              		.loc 1 3663 5 is_stmt 0 view .LVU4142
 12762 0010 9B05     		lsls	r3, r3, #22
3659:src/display.c **** 	State2.disp_freeze = 0;
 12763              		.loc 1 3659 7 view .LVU4143
 12764 0012 0546     		mov	r5, r0
 12765 0014 0C46     		mov	r4, r1
3662:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12766              		.loc 1 3662 15 view .LVU4144
 12767 0016 3760     		str	r7, [r6]
3663:src/display.c **** 	  // Complete redraw necessary
 12768              		.loc 1 3663 2 is_stmt 1 view .LVU4145
3663:src/display.c **** 	  // Complete redraw necessary
 12769              		.loc 1 3663 5 is_stmt 0 view .LVU4146
 12770 0018 12D5     		bpl	.L1311
3663:src/display.c **** 	  // Complete redraw necessary
 12771              		.loc 1 3663 27 discriminator 1 view .LVU4147
 12772 001a D1B1     		cbz	r1, .L1319
 12773              	.L1312:
3670:src/display.c **** 	    ShowRPN = 0;
 12774              		.loc 1 3670 6 is_stmt 1 view .LVU4148
 12775 001c FFF7FEFF 		bl	reset_disp
 12776              	.LVL1473:
3671:src/display.c **** 	    set_annunciators();
 12777              		.loc 1 3671 6 view .LVU4149
3671:src/display.c **** 	    set_annunciators();
 12778              		.loc 1 3671 14 is_stmt 0 view .LVU4150
 12779 0020 114B     		ldr	r3, .L1320+8
 12780 0022 0026     		movs	r6, #0
 12781 0024 1E60     		str	r6, [r3]
3672:src/display.c **** 	    set_digits_string( str2, 0 );
 12782              		.loc 1 3672 6 is_stmt 1 view .LVU4151
ARM GAS  /tmp/ccdg5rgB.s 			page 360


 12783 0026 FFF7FEFF 		bl	set_annunciators
 12784              	.LVL1474:
3673:src/display.c **** 	  }
 12785              		.loc 1 3673 6 view .LVU4152
 12786 002a 3146     		mov	r1, r6
 12787 002c 2046     		mov	r0, r4
 12788 002e FFF7FEFF 		bl	set_digits_string
 12789              	.LVL1475:
3675:src/display.c **** 	  finish_display();// message
 12790              		.loc 1 3675 4 view .LVU4153
 12791 0032 2846     		mov	r0, r5
 12792 0034 FFF7FEFF 		bl	set_status
 12793              	.LVL1476:
3676:src/display.c **** 	}
 12794              		.loc 1 3676 4 view .LVU4154
3678:src/display.c **** 
 12795              		.loc 1 3678 7 is_stmt 0 view .LVU4155
 12796 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12797              		.cfi_remember_state
 12798              		.cfi_restore 14
 12799              		.cfi_restore 7
 12800              		.cfi_restore 6
 12801              		.cfi_restore 5
 12802              		.cfi_restore 4
 12803              		.cfi_restore 3
 12804              		.cfi_def_cfa_offset 0
 12805              	.LVL1477:
3676:src/display.c **** 	}
 12806              		.loc 1 3676 4 view .LVU4156
 12807 003c FFF7FEBF 		b	finish_display
 12808              	.LVL1478:
 12809              	.L1311:
 12810              		.cfi_restore_state
3669:src/display.c **** 	    reset_disp();
 12811              		.loc 1 3669 4 is_stmt 1 view .LVU4157
3669:src/display.c **** 	    reset_disp();
 12812              		.loc 1 3669 7 is_stmt 0 view .LVU4158
 12813 0040 0029     		cmp	r1, #0
 12814 0042 EBD1     		bne	.L1312
3675:src/display.c **** 	  finish_display();// message
 12815              		.loc 1 3675 4 is_stmt 1 view .LVU4159
 12816 0044 2846     		mov	r0, r5
 12817              	.LVL1479:
3675:src/display.c **** 	  finish_display();// message
 12818              		.loc 1 3675 4 is_stmt 0 view .LVU4160
 12819 0046 FFF7FEFF 		bl	set_status
 12820              	.LVL1480:
3676:src/display.c **** 	}
 12821              		.loc 1 3676 4 is_stmt 1 view .LVU4161
3678:src/display.c **** 
 12822              		.loc 1 3678 7 is_stmt 0 view .LVU4162
 12823 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12824              		.cfi_remember_state
 12825              		.cfi_restore 14
 12826              		.cfi_restore 7
 12827              		.cfi_restore 6
 12828              		.cfi_restore 5
ARM GAS  /tmp/ccdg5rgB.s 			page 361


 12829              		.cfi_restore 4
 12830              		.cfi_restore 3
 12831              		.cfi_def_cfa_offset 0
 12832              	.LVL1481:
3676:src/display.c **** 	}
 12833              		.loc 1 3676 4 view .LVU4163
 12834 004e FFF7FEBF 		b	finish_display
 12835              	.LVL1482:
 12836              	.L1319:
 12837              		.cfi_restore_state
3665:src/display.c **** 	  display();
 12838              		.loc 1 3665 4 is_stmt 1 view .LVU4164
3665:src/display.c **** 	  display();
 12839              		.loc 1 3665 12 is_stmt 0 view .LVU4165
 12840 0052 064B     		ldr	r3, .L1320+12
 12841 0054 1860     		str	r0, [r3]
3666:src/display.c **** 	}
 12842              		.loc 1 3666 4 is_stmt 1 view .LVU4166
3678:src/display.c **** 
 12843              		.loc 1 3678 7 is_stmt 0 view .LVU4167
 12844 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12845              		.cfi_restore 14
 12846              		.cfi_restore 7
 12847              		.cfi_restore 6
 12848              		.cfi_restore 5
 12849              		.cfi_restore 4
 12850              		.cfi_restore 3
 12851              		.cfi_def_cfa_offset 0
3666:src/display.c **** 	}
 12852              		.loc 1 3666 4 view .LVU4168
 12853 005a FFF7FEBF 		b	display
 12854              	.LVL1483:
 12855              	.L1321:
3666:src/display.c **** 	}
 12856              		.loc 1 3666 4 view .LVU4169
 12857 005e 00BF     		.align	2
 12858              	.L1320:
 12859 0060 00000000 		.word	StateWhileOn
 12860 0064 00000000 		.word	WasDataEntry
 12861 0068 00000000 		.word	ShowRPN
 12862 006c 00000000 		.word	DispMsg
 12863              		.cfi_endproc
 12864              	.LFE46:
 12866              		.section	.text.error_message,"ax",%progbits
 12867              		.align	1
 12868              		.p2align 2,,3
 12869              		.global	error_message
 12870              		.syntax unified
 12871              		.thumb
 12872              		.thumb_func
 12873              		.fpu fpv4-sp-d16
 12875              	error_message:
 12876              	.LVL1484:
 12877              	.LFB1:
 136:src/display.c **** #define MSG1(top) top "\0"
 12878              		.loc 1 136 1 is_stmt 1 view -0
 12879              		.cfi_startproc
ARM GAS  /tmp/ccdg5rgB.s 			page 362


 12880              		@ args = 0, pretend = 0, frame = 0
 12881              		@ frame_needed = 0, uses_anonymous_args = 0
 141:src/display.c ****     {
 12882              		.loc 1 141 3 view .LVU4171
 202:src/display.c ****     {
 12883              		.loc 1 202 3 view .LVU4172
 240:src/display.c ****     const char *p = error_table[e];
 12884              		.loc 1 240 3 view .LVU4173
 240:src/display.c ****     const char *p = error_table[e];
 12885              		.loc 1 240 21 is_stmt 0 view .LVU4174
 12886 0000 364B     		ldr	r3, .L1348
 12887 0002 1B68     		ldr	r3, [r3]
 12888 0004 0343     		orrs	r3, r0, r3
 12889 0006 00D1     		bne	.L1344
 12890 0008 7047     		bx	lr
 12891              	.L1344:
 12892              	.LBB682:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12893              		.loc 1 241 5 is_stmt 1 view .LVU4175
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12894              		.loc 1 241 17 is_stmt 0 view .LVU4176
 12895 000a 354B     		ldr	r3, .L1348+4
 12896              	.LBE682:
 136:src/display.c **** #define MSG1(top) top "\0"
 12897              		.loc 1 136 1 view .LVU4177
 12898 000c 70B5     		push	{r4, r5, r6, lr}
 12899              		.cfi_def_cfa_offset 16
 12900              		.cfi_offset 4, -16
 12901              		.cfi_offset 5, -12
 12902              		.cfi_offset 6, -8
 12903              		.cfi_offset 14, -4
 12904              	.LBB694:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12905              		.loc 1 241 17 view .LVU4178
 12906 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12907              	.LVL1485:
 242:src/display.c ****     if (*q == '\0')
 12908              		.loc 1 242 5 is_stmt 1 view .LVU4179
 12909 0012 0446     		mov	r4, r0
 242:src/display.c ****     if (*q == '\0')
 12910              		.loc 1 242 21 is_stmt 0 view .LVU4180
 12911 0014 0021     		movs	r1, #0
 12912 0016 3046     		mov	r0, r6
 12913              	.LVL1486:
 242:src/display.c ****     if (*q == '\0')
 12914              		.loc 1 242 21 view .LVU4181
 12915 0018 FFF7FEFF 		bl	find_char
 12916              	.LVL1487:
 243:src/display.c ****       q = S7_ERROR;
 12917              		.loc 1 243 5 is_stmt 1 view .LVU4182
 243:src/display.c ****       q = S7_ERROR;
 12918              		.loc 1 243 9 is_stmt 0 view .LVU4183
 12919 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 243:src/display.c ****       q = S7_ERROR;
 12920              		.loc 1 243 8 view .LVU4184
 12921 001e 002B     		cmp	r3, #0
 12922 0020 3CD0     		beq	.L1333
ARM GAS  /tmp/ccdg5rgB.s 			page 363


 245:src/display.c ****       DispMsg = p;
 12923              		.loc 1 245 8 view .LVU4185
 12924 0022 582B     		cmp	r3, #88
 242:src/display.c ****     if (*q == '\0')
 12925              		.loc 1 242 17 view .LVU4186
 12926 0024 00F10105 		add	r5, r0, #1
 12927              	.LVL1488:
 245:src/display.c ****       DispMsg = p;
 12928              		.loc 1 245 5 is_stmt 1 view .LVU4187
 245:src/display.c ****       DispMsg = p;
 12929              		.loc 1 245 8 is_stmt 0 view .LVU4188
 12930 0028 39D1     		bne	.L1325
 246:src/display.c ****       frozen_display();
 12931              		.loc 1 246 7 is_stmt 1 view .LVU4189
 12932              	.LBB683:
 12933              	.LBB684:
3439:src/display.c **** 	display();
 12934              		.loc 1 3439 21 is_stmt 0 view .LVU4190
 12935 002a 2E4C     		ldr	r4, .L1348+8
 12936              	.LVL1489:
3439:src/display.c **** 	display();
 12937              		.loc 1 3439 21 view .LVU4191
 12938              	.LBE684:
 12939              	.LBE683:
 246:src/display.c ****       frozen_display();
 12940              		.loc 1 246 15 view .LVU4192
 12941 002c 2E4A     		ldr	r2, .L1348+12
 12942              	.LBB688:
 12943              	.LBB685:
3439:src/display.c **** 	display();
 12944              		.loc 1 3439 21 view .LVU4193
 12945 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12946              	.LBE685:
 12947              	.LBE688:
 246:src/display.c ****       frozen_display();
 12948              		.loc 1 246 15 view .LVU4194
 12949 0030 1660     		str	r6, [r2]
 247:src/display.c ****     }
 12950              		.loc 1 247 7 is_stmt 1 view .LVU4195
 12951              	.LBB689:
 12952              	.LBI683:
3437:src/display.c ****       {
 12953              		.loc 1 3437 12 view .LVU4196
 12954              	.LBB686:
3439:src/display.c **** 	display();
 12955              		.loc 1 3439 2 view .LVU4197
3439:src/display.c **** 	display();
 12956              		.loc 1 3439 21 is_stmt 0 view .LVU4198
 12957 0032 6FF30413 		bfc	r3, #4, #1
 12958 0036 E375     		strb	r3, [r4, #23]
3440:src/display.c **** 	State2.disp_freeze = 1;
 12959              		.loc 1 3440 2 is_stmt 1 view .LVU4199
 12960 0038 FFF7FEFF 		bl	display
 12961              	.LVL1490:
3441:src/display.c ****       }
 12962              		.loc 1 3441 2 view .LVU4200
 12963              	.LBE686:
ARM GAS  /tmp/ccdg5rgB.s 			page 364


 12964              	.LBE689:
 261:src/display.c ****       if (*q == 'X')
 12965              		.loc 1 261 5 view .LVU4201
 12966              	.LBB690:
 12967              	.LBB687:
3441:src/display.c ****       }
 12968              		.loc 1 3441 21 is_stmt 0 view .LVU4202
 12969 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12970 003e 43F01003 		orr	r3, r3, #16
 12971 0042 E375     		strb	r3, [r4, #23]
 12972              	.LBE687:
 12973              	.LBE690:
 261:src/display.c ****       if (*q == 'X')
 12974              		.loc 1 261 9 view .LVU4203
 12975 0044 294B     		ldr	r3, .L1348+16
 261:src/display.c ****       if (*q == 'X')
 12976              		.loc 1 261 8 view .LVU4204
 12977 0046 1B68     		ldr	r3, [r3]
 12978 0048 002B     		cmp	r3, #0
 12979 004a 3ED0     		beq	.L1322
 12980              	.LVL1491:
 12981              	.L1347:
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12982              		.loc 1 262 7 is_stmt 1 view .LVU4205
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12983              		.loc 1 262 10 is_stmt 0 view .LVU4206
 12984 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12985 004e 582B     		cmp	r3, #88
 12986 0050 3CD0     		beq	.L1345
 265:src/display.c **** 	print_line(p, 0);
 12987              		.loc 1 265 2 is_stmt 1 view .LVU4207
 12988 0052 0020     		movs	r0, #0
 12989 0054 FFF7FEFF 		bl	print_tab
 12990              	.LVL1492:
 266:src/display.c **** 	print(' ');
 12991              		.loc 1 266 2 view .LVU4208
 12992 0058 3046     		mov	r0, r6
 12993 005a 0021     		movs	r1, #0
 12994 005c FFF7FEFF 		bl	print_line
 12995              	.LVL1493:
 267:src/display.c **** 	while (*q != '\0') {
 12996              		.loc 1 267 2 view .LVU4209
 12997 0060 2020     		movs	r0, #32
 12998 0062 FFF7FEFF 		bl	print
 12999              	.LVL1494:
 268:src/display.c **** 	  int c = *q;
 13000              		.loc 1 268 2 view .LVU4210
 268:src/display.c **** 	  int c = *q;
 13001              		.loc 1 268 8 view .LVU4211
 268:src/display.c **** 	  int c = *q;
 13002              		.loc 1 268 9 is_stmt 0 view .LVU4212
 13003 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 268:src/display.c **** 	  int c = *q;
 13004              		.loc 1 268 8 view .LVU4213
 13005 0068 73B9     		cbnz	r3, .L1329
 13006              	.L1332:
 277:src/display.c ****       }
ARM GAS  /tmp/ccdg5rgB.s 			page 365


 13007              		.loc 1 277 2 is_stmt 1 view .LVU4214
 13008              	.LBE694:
 282:src/display.c **** 
 13009              		.loc 1 282 1 is_stmt 0 view .LVU4215
 13010 006a BDE87040 		pop	{r4, r5, r6, lr}
 13011              		.cfi_remember_state
 13012              		.cfi_restore 14
 13013              		.cfi_restore 6
 13014              		.cfi_restore 5
 13015              		.cfi_restore 4
 13016              		.cfi_def_cfa_offset 0
 13017              	.LVL1495:
 13018              	.LBB695:
 277:src/display.c ****       }
 13019              		.loc 1 277 2 view .LVU4216
 13020 006e 0020     		movs	r0, #0
 13021 0070 FFF7FEBF 		b	print_advance
 13022              	.LVL1496:
 13023              	.L1346:
 13024              		.cfi_restore_state
 13025              	.LBB691:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13026              		.loc 1 272 4 view .LVU4217
 13027 0074 FFF7FEFF 		bl	print
 13028              	.LVL1497:
 273:src/display.c **** 	    ++q;
 13029              		.loc 1 273 4 is_stmt 1 view .LVU4218
 274:src/display.c **** 	  ++q;
 13030              		.loc 1 274 6 view .LVU4219
 273:src/display.c **** 	    ++q;
 13031              		.loc 1 273 7 is_stmt 0 view .LVU4220
 13032 0078 6D2C     		cmp	r4, #109
 274:src/display.c **** 	  ++q;
 13033              		.loc 1 274 6 view .LVU4221
 13034 007a 0CBF     		ite	eq
 13035 007c 691C     		addeq	r1, r5, #1
 13036              	.LVL1498:
 274:src/display.c **** 	  ++q;
 13037              		.loc 1 274 6 view .LVU4222
 13038 007e 2946     		movne	r1, r5
 13039              	.LVL1499:
 13040              	.L1331:
 275:src/display.c **** 	}
 13041              		.loc 1 275 4 is_stmt 1 view .LVU4223
 13042              	.LBE691:
 268:src/display.c **** 	  int c = *q;
 13043              		.loc 1 268 9 is_stmt 0 view .LVU4224
 13044 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 13045              	.LBB692:
 275:src/display.c **** 	}
 13046              		.loc 1 275 4 view .LVU4225
 13047 0082 4D1C     		adds	r5, r1, #1
 13048              	.LVL1500:
 275:src/display.c **** 	}
 13049              		.loc 1 275 4 view .LVU4226
 13050              	.LBE692:
 268:src/display.c **** 	  int c = *q;
ARM GAS  /tmp/ccdg5rgB.s 			page 366


 13051              		.loc 1 268 8 is_stmt 1 view .LVU4227
 13052 0084 002B     		cmp	r3, #0
 13053 0086 F0D0     		beq	.L1332
 13054              	.LVL1501:
 13055              	.L1329:
 13056              	.LBB693:
 269:src/display.c **** 	  if (c >= 'A')
 13057              		.loc 1 269 4 view .LVU4228
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13058              		.loc 1 270 4 view .LVU4229
 271:src/display.c **** 	  print(c);
 13059              		.loc 1 271 6 view .LVU4230
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13060              		.loc 1 272 4 view .LVU4231
 13061 0088 43F06004 		orr	r4, r3, #96
 13062              	.LVL1502:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13063              		.loc 1 272 4 view .LVU4232
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13064              		.loc 1 270 7 is_stmt 0 view .LVU4233
 13065 008c 402B     		cmp	r3, #64
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13066              		.loc 1 272 4 view .LVU4234
 13067 008e 2046     		mov	r0, r4
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 13068              		.loc 1 270 7 view .LVU4235
 13069 0090 F0DC     		bgt	.L1346
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13070              		.loc 1 272 4 view .LVU4236
 13071 0092 1846     		mov	r0, r3
 13072 0094 FFF7FEFF 		bl	print
 13073              	.LVL1503:
 273:src/display.c **** 	    ++q;
 13074              		.loc 1 273 4 is_stmt 1 view .LVU4237
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13075              		.loc 1 272 4 is_stmt 0 view .LVU4238
 13076 0098 2946     		mov	r1, r5
 13077 009a F1E7     		b	.L1331
 13078              	.LVL1504:
 13079              	.L1333:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 13080              		.loc 1 272 4 view .LVU4239
 13081              	.LBE693:
 244:src/display.c ****     if (*q == 'X') {
 13082              		.loc 1 244 9 view .LVU4240
 13083 009c 144D     		ldr	r5, .L1348+20
 13084              	.L1325:
 13085              	.LVL1505:
 254:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 13086              		.loc 1 254 7 is_stmt 1 view .LVU4241
 13087 009e 2946     		mov	r1, r5
 13088 00a0 3046     		mov	r0, r6
 13089 00a2 FFF7FEFF 		bl	message
 13090              	.LVL1506:
 255:src/display.c **** #ifndef REALBUILD
 13091              		.loc 1 255 7 view .LVU4242
 255:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccdg5rgB.s 			page 367


 13092              		.loc 1 255 26 is_stmt 0 view .LVU4243
 13093 00a6 0F4B     		ldr	r3, .L1348+8
 257:src/display.c **** #endif
 13094              		.loc 1 257 7 view .LVU4244
 13095 00a8 1249     		ldr	r1, .L1348+24
 255:src/display.c **** #ifndef REALBUILD
 13096              		.loc 1 255 26 view .LVU4245
 13097 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 257:src/display.c **** #endif
 13098              		.loc 1 257 7 view .LVU4246
 13099 00ac 51F82410 		ldr	r1, [r1, r4, lsl #2]
 13100 00b0 1148     		ldr	r0, .L1348+28
 255:src/display.c **** #ifndef REALBUILD
 13101              		.loc 1 255 31 view .LVU4247
 13102 00b2 003C     		subs	r4, r4, #0
 255:src/display.c **** #ifndef REALBUILD
 13103              		.loc 1 255 31 view .LVU4248
 13104 00b4 18BF     		it	ne
 13105 00b6 0124     		movne	r4, #1
 13106              	.LVL1507:
 255:src/display.c **** #ifndef REALBUILD
 13107              		.loc 1 255 26 view .LVU4249
 13108 00b8 64F30412 		bfi	r2, r4, #4, #1
 13109 00bc DA75     		strb	r2, [r3, #23]
 257:src/display.c **** #endif
 13110              		.loc 1 257 7 is_stmt 1 view .LVU4250
 13111 00be FFF7FEFF 		bl	scopy
 13112              	.LVL1508:
 261:src/display.c ****       if (*q == 'X')
 13113              		.loc 1 261 5 view .LVU4251
 261:src/display.c ****       if (*q == 'X')
 13114              		.loc 1 261 9 is_stmt 0 view .LVU4252
 13115 00c2 0A4B     		ldr	r3, .L1348+16
 261:src/display.c ****       if (*q == 'X')
 13116              		.loc 1 261 8 view .LVU4253
 13117 00c4 1B68     		ldr	r3, [r3]
 13118 00c6 002B     		cmp	r3, #0
 13119 00c8 C0D1     		bne	.L1347
 13120              	.LVL1509:
 13121              	.L1322:
 261:src/display.c ****       if (*q == 'X')
 13122              		.loc 1 261 8 view .LVU4254
 13123              	.LBE695:
 282:src/display.c **** 
 13124              		.loc 1 282 1 view .LVU4255
 13125 00ca 70BD     		pop	{r4, r5, r6, pc}
 13126              	.LVL1510:
 13127              	.L1345:
 13128              	.LBB696:
 263:src/display.c ****       else {
 13129              		.loc 1 263 2 is_stmt 1 view .LVU4256
 13130 00cc 3146     		mov	r1, r6
 13131 00ce 0022     		movs	r2, #0
 13132              	.LBE696:
 282:src/display.c **** 
 13133              		.loc 1 282 1 is_stmt 0 view .LVU4257
 13134 00d0 BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/ccdg5rgB.s 			page 368


 13135              		.cfi_restore 14
 13136              		.cfi_restore 6
 13137              		.cfi_restore 5
 13138              		.cfi_restore 4
 13139              		.cfi_def_cfa_offset 0
 13140              	.LVL1511:
 13141              	.LBB697:
 263:src/display.c ****       else {
 13142              		.loc 1 263 2 view .LVU4258
 13143 00d4 6420     		movs	r0, #100
 13144 00d6 FFF7FEBF 		b	print_reg
 13145              	.LVL1512:
 13146              	.L1349:
 263:src/display.c ****       else {
 13147              		.loc 1 263 2 view .LVU4259
 13148 00da 00BF     		.align	2
 13149              	.L1348:
 13150 00dc 00000000 		.word	Running
 13151 00e0 00000000 		.word	.LANCHOR27
 13152 00e4 00000000 		.word	StateWhileOn
 13153 00e8 00000000 		.word	DispMsg
 13154 00ec 00000000 		.word	Tracing
 13155 00f0 00000000 		.word	.LANCHOR26
 13156 00f4 00000000 		.word	.LANCHOR28
 13157 00f8 00000000 		.word	LastDisplayedNumber
 13158              	.LBE697:
 13159              		.cfi_endproc
 13160              	.LFE1:
 13162              		.section	.text.stopwatch_message,"ax",%progbits
 13163              		.align	1
 13164              		.p2align 2,,3
 13165              		.global	stopwatch_message
 13166              		.syntax unified
 13167              		.thumb
 13168              		.thumb_func
 13169              		.fpu fpv4-sp-d16
 13171              	stopwatch_message:
 13172              	.LVL1513:
 13173              	.LFB48:
3691:src/display.c **** #ifndef REALBUILD
 13174              		.loc 1 3691 7 is_stmt 1 view -0
 13175              		.cfi_startproc
 13176              		@ args = 0, pretend = 0, frame = 0
 13177              		@ frame_needed = 0, uses_anonymous_args = 0
3693:src/display.c **** #endif
 13178              		.loc 1 3693 2 view .LVU4261
3691:src/display.c **** #ifndef REALBUILD
 13179              		.loc 1 3691 7 is_stmt 0 view .LVU4262
 13180 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 13181              		.cfi_def_cfa_offset 24
 13182              		.cfi_offset 3, -24
 13183              		.cfi_offset 4, -20
 13184              		.cfi_offset 5, -16
 13185              		.cfi_offset 6, -12
 13186              		.cfi_offset 7, -8
 13187              		.cfi_offset 14, -4
3691:src/display.c **** #ifndef REALBUILD
ARM GAS  /tmp/ccdg5rgB.s 			page 369


 13188              		.loc 1 3691 7 view .LVU4263
 13189 0002 0F46     		mov	r7, r1
 13190 0004 1446     		mov	r4, r2
3693:src/display.c **** #endif
 13191              		.loc 1 3693 2 view .LVU4264
 13192 0006 2021     		movs	r1, #32
 13193              	.LVL1514:
3693:src/display.c **** #endif
 13194              		.loc 1 3693 2 view .LVU4265
 13195 0008 1922     		movs	r2, #25
 13196              	.LVL1515:
3691:src/display.c **** #ifndef REALBUILD
 13197              		.loc 1 3691 7 view .LVU4266
 13198 000a 0646     		mov	r6, r0
3693:src/display.c **** #endif
 13199              		.loc 1 3693 2 view .LVU4267
 13200 000c 1248     		ldr	r0, .L1361
 13201              	.LVL1516:
3691:src/display.c **** #ifndef REALBUILD
 13202              		.loc 1 3691 7 view .LVU4268
 13203 000e 1D46     		mov	r5, r3
3693:src/display.c **** #endif
 13204              		.loc 1 3693 2 view .LVU4269
 13205 0010 FFF7FEFF 		bl	xset
 13206              	.LVL1517:
3695:src/display.c **** 	set_dot(DEG);
 13207              		.loc 1 3695 2 is_stmt 1 view .LVU4270
 13208 0014 FFF7FEFF 		bl	reset_disp
 13209              	.LVL1518:
3696:src/display.c **** 	set_digits_string( str2, 0 );
 13210              		.loc 1 3696 2 view .LVU4271
 13211 0018 8C20     		movs	r0, #140
 13212 001a FFF7FEFF 		bl	set_dot
 13213              	.LVL1519:
3697:src/display.c **** 	State2.disp_small = force_small;
 13214              		.loc 1 3697 2 view .LVU4272
 13215 001e 3846     		mov	r0, r7
 13216 0020 0021     		movs	r1, #0
 13217 0022 FFF7FEFF 		bl	set_digits_string
 13218              	.LVL1520:
3698:src/display.c **** 	if( exponent!=NULL ) {
 13219              		.loc 1 3698 2 view .LVU4273
3698:src/display.c **** 	if( exponent!=NULL ) {
 13220              		.loc 1 3698 20 is_stmt 0 view .LVU4274
 13221 0026 0D4B     		ldr	r3, .L1361+4
 13222 0028 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 13223 002a 64F3C712 		bfi	r2, r4, #7, #1
 13224              	.LVL1521:
3698:src/display.c **** 	if( exponent!=NULL ) {
 13225              		.loc 1 3698 20 view .LVU4275
 13226 002e 9A75     		strb	r2, [r3, #22]
3699:src/display.c **** 	  stopwatch_exponent(exponent);
 13227              		.loc 1 3699 2 is_stmt 1 view .LVU4276
3699:src/display.c **** 	  stopwatch_exponent(exponent);
 13228              		.loc 1 3699 4 is_stmt 0 view .LVU4277
 13229 0030 55B1     		cbz	r5, .L1351
 13230              	.LVL1522:
ARM GAS  /tmp/ccdg5rgB.s 			page 370


 13231              	.LBB698:
 13232              	.LBB699:
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13233              		.loc 1 3684 9 is_stmt 1 view .LVU4278
 13234 0032 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13235              		.loc 1 3684 2 is_stmt 0 view .LVU4279
 13236 0034 41B1     		cbz	r1, .L1351
3683:src/display.c **** 	for (; *exponent!=0; exponent++) {
 13237              		.loc 1 3683 6 view .LVU4280
 13238 0036 6C24     		movs	r4, #108
 13239              	.LVL1523:
 13240              	.L1352:
3685:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 13241              		.loc 1 3685 4 is_stmt 1 view .LVU4281
 13242              	.LBB700:
 13243              	.LBI700:
 415:src/display.c ****   if (res) *res++ = ch;
 13244              		.loc 1 415 14 view .LVU4282
 13245              	.LBB701:
 416:src/display.c ****   else	set_dig(base, ch);
 13246              		.loc 1 416 3 view .LVU4283
 417:src/display.c ****   return res;
 13247              		.loc 1 417 8 view .LVU4284
 13248 0038 2046     		mov	r0, r4
 13249 003a FFF7FEFF 		bl	set_dig
 13250              	.LVL1524:
 418:src/display.c **** }
 13251              		.loc 1 418 3 view .LVU4285
 418:src/display.c **** }
 13252              		.loc 1 418 3 is_stmt 0 view .LVU4286
 13253              	.LBE701:
 13254              	.LBE700:
3686:src/display.c **** 	}
 13255              		.loc 1 3686 4 is_stmt 1 view .LVU4287
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13256              		.loc 1 3684 9 is_stmt 0 view .LVU4288
 13257 003e 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 13258              	.LVL1525:
3686:src/display.c **** 	}
 13259              		.loc 1 3686 6 view .LVU4289
 13260 0042 0734     		adds	r4, r4, #7
 13261              	.LVL1526:
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13262              		.loc 1 3684 23 is_stmt 1 view .LVU4290
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13263              		.loc 1 3684 9 view .LVU4291
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13264              		.loc 1 3684 2 is_stmt 0 view .LVU4292
 13265 0044 0029     		cmp	r1, #0
 13266 0046 F7D1     		bne	.L1352
 13267              	.LVL1527:
 13268              	.L1351:
3684:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 13269              		.loc 1 3684 2 view .LVU4293
 13270              	.LBE699:
 13271              	.LBE698:
ARM GAS  /tmp/ccdg5rgB.s 			page 371


3702:src/display.c **** 	finish_display();
 13272              		.loc 1 3702 2 is_stmt 1 view .LVU4294
 13273 0048 3046     		mov	r0, r6
 13274 004a FFF7FEFF 		bl	set_status
 13275              	.LVL1528:
3703:src/display.c ****       }
 13276              		.loc 1 3703 2 view .LVU4295
3704:src/display.c **** 
 13277              		.loc 1 3704 7 is_stmt 0 view .LVU4296
 13278 004e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 13279              		.cfi_restore 14
 13280              		.cfi_restore 7
 13281              		.cfi_restore 6
 13282              		.cfi_restore 5
 13283              		.cfi_restore 4
 13284              		.cfi_restore 3
 13285              		.cfi_def_cfa_offset 0
 13286              	.LVL1529:
3703:src/display.c ****       }
 13287              		.loc 1 3703 2 view .LVU4297
 13288 0052 FFF7FEBF 		b	finish_display
 13289              	.LVL1530:
 13290              	.L1362:
 13291 0056 00BF     		.align	2
 13292              	.L1361:
 13293 0058 00000000 		.word	LastDisplayedNumber
 13294 005c 00000000 		.word	StateWhileOn
 13295              		.cfi_endproc
 13296              	.LFE48:
 13298              		.section	.rodata.str1.4,"aMS",%progbits,1
 13299              		.align	2
 13300              	.LC45:
 13301 0000 06316306 		.ascii	"\0061c\006\006\000"
 13301      0600
 13302 0006 0000     		.align	2
 13303              	.LC46:
 13304 0008 756E0600 		.ascii	"un\006\000"
 13305              		.align	2
 13306              	.LC47:
 13307 000c 736D00   		.ascii	"sm\000"
 13308              		.set	CSWTCH.385,CSWTCH.383
 13309 000f 00       		.align	2
 13310              	.LC48:
 13311 0010 20502072 		.ascii	" P r o g r a m \000"
 13311      206F2067 
 13311      20722061 
 13311      206D2000 
 13312              		.align	2
 13313              	.LC49:
 13314 0020 206F2072 		.ascii	" o r   d a t e \000"
 13314      20202064 
 13314      20612074 
 13314      20652000 
 13315              		.align	2
 13316              	.LC50:
 13317 0030 204F2070 		.ascii	" O p - c o d e \000"
 13317      202D2063 
ARM GAS  /tmp/ccdg5rgB.s 			page 372


 13317      206F2064 
 13317      20652000 
 13318              		.align	2
 13319              	.LC51:
 13320 0040 204C2061 		.ascii	" L a b e l \000"
 13320      20622065 
 13320      206C2000 
 13321              		.align	2
 13322              	.LC52:
 13323 004c 204F2070 		.ascii	" O p e r a t i o n \000"
 13323      20652072 
 13323      20612074 
 13323      2069206F 
 13323      206E2000 
 13324              		.align	2
 13325              	.LC53:
 13326 0060 20462075 		.ascii	" F u l l \000"
 13326      206C206C 
 13326      2000
 13327 006a 0000     		.align	2
 13328              	.LC54:
 13329 006c 2043206C 		.ascii	" C l a s h \000"
 13329      20612073 
 13329      20682000 
 13330              		.align	2
 13331              	.LC55:
 13332 0078 2054206F 		.ascii	" T o o   s m a l l \000"
 13332      206F2020 
 13332      2073206D 
 13332      2061206C 
 13332      206C2000 
 13333              		.align	2
 13334              	.LC56:
 13335 008c 20442061 		.ascii	" D a t a   p o i n t s \000"
 13335      20742061 
 13335      20202070 
 13335      206F2069 
 13335      206E2074 
 13336              		.align	2
 13337              	.LC57:
 13338 00a4 20502061 		.ascii	" P a r a m e t e r \000"
 13338      20722061 
 13338      206D2065 
 13338      20742065 
 13338      20722000 
 13339              		.align	2
 13340              	.LC58:
 13341 00b8 20442061 		.ascii	" D a t a \000"
 13341      20742061 
 13341      2000
 13342 00c2 0000     		.align	2
 13343              	.LC59:
 13344 00c4 20502072 		.ascii	" P r o t e c t e d \000"
 13344      206F2074 
 13344      20652063 
 13344      20742065 
 13344      20642000 
ARM GAS  /tmp/ccdg5rgB.s 			page 373


 13345              		.align	2
 13346              	.LC60:
 13347 00d8 2046206F 		.ascii	" F o u n d \000"
 13347      2075206E 
 13347      20642000 
 13348              		.align	2
 13349              	.LC61:
 13350 00e4 204D2069 		.ascii	" M i s m a t c h \000"
 13350      2073206D 
 13350      20612074 
 13350      20632068 
 13350      2000
 13351 00f6 0000     		.align	2
 13352              	.LC62:
 13353 00f8 2049206E 		.ascii	" I n s t a l l e d \000"
 13353      20732074 
 13353      2061206C 
 13353      206C2065 
 13353      20642000 
 13354              		.global	DIGITS
 13355              		.comm	IoAnnunciator,4,4
 13356              		.comm	IntMaxWindow,4,4
 13357              		.comm	JustDisplayed,4,4
 13358              		.comm	ShowRPN,4,4
 13359              		.comm	forceDispPlot,1,1
 13360              		.comm	LastDisplayedExponent,5,4
 13361              		.comm	LastDisplayedNumber,26,4
 13362              		.comm	LastDisplayedText,31,4
 13363              		.global	no_status_top
 13364              		.comm	DispPlot,2,2
 13365              		.comm	DispMsg,4,4
 13366              		.global	SvnRevision
 13367              		.section	.rodata
 13368              		.align	2
 13369              		.set	.LANCHOR17,. + 0
 13370              	.LC20:
 13371 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 13371      22002E00 
 13371      00
 13372 0009 000000   		.space	3
 13373              	.LC24:
 13374 000c 33344306 		.ascii	"34C\0063.3\222\000"
 13374      332E3392 
 13374      00
 13375 0015 00000000 		.space	4
 13376 0019 000000   		.space	3
 13377              	.LC63:
 13378 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 13378      696E6700 
 13378      50726F47 
 13378      72614D6D 
 13378      00
 13379 002d 000000   		.space	3
 13380              	.LC64:
 13381 0030 446F6D61 		.ascii	"Domain\000\000"
 13381      696E0000 
 13382              	.LC65:
ARM GAS  /tmp/ccdg5rgB.s 			page 374


 13383 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 13383      74696D65 
 13383      006F7220 
 13383      64417445 
 13383      00
 13384 0049 000000   		.space	3
 13385              	.LC66:
 13386 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 13386      66696E65 
 13386      64004F70 
 13386      2D434F64 
 13386      4500
 13387 005e 0000     		.space	2
 13388              	.LC67:
 13389 0060 2B9F0000 		.ascii	"+\237\000\000"
 13390              	.LC68:
 13391 0064 2D9F0000 		.ascii	"-\237\000\000"
 13392              	.LC69:
 13393 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 13393      75636800 
 13393      4C416245 
 13393      4C00
 13394 0076 0000     		.space	2
 13395              	.LC70:
 13396 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 13396      67616C00 
 13396      4F504572 
 13396      4174696F 
 13396      6E00
 13397 008a 0000     		.space	2
 13398              	.LC71:
 13399 008c 4F757420 		.ascii	"Out of range\000\000"
 13399      6F662072 
 13399      616E6765 
 13399      0000
 13400 009a 0000     		.space	2
 13401              	.LC72:
 13402 009c 42616420 		.ascii	"Bad digit\000\000"
 13402      64696769 
 13402      740000
 13403 00a7 00       		.space	1
 13404              	.LC73:
 13405 00a8 546F6F20 		.ascii	"Too long\000\000"
 13405      6C6F6E67 
 13405      0000
 13406 00b2 0000     		.space	2
 13407              	.LC74:
 13408 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 13408      69730046 
 13408      754C4C00 
 13409              	.LC75:
 13410 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 13410      6B00434C 
 13410      41534800 
 13411              	.LC76:
 13412 00cc 42616420 		.ascii	"Bad mode\000\000"
 13412      6D6F6465 
ARM GAS  /tmp/ccdg5rgB.s 			page 375


 13412      0000
 13413 00d6 0000     		.space	2
 13414              	.LC77:
 13415 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 13415      06060673 
 13415      697A6500 
 13415      746F6F20 
 13415      534D6D41 
 13416 00ef 00       		.space	1
 13417              	.LC78:
 13418 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 13418      66657700 
 13418      64417441 
 13418      20506F69 
 13418      6E745300 
 13419              	.LC79:
 13420 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 13420      6C696400 
 13420      50617261 
 13420      4D6D4574 
 13420      457200
 13421 0117 00       		.space	1
 13422              	.LC80:
 13423 0118 492F4F00 		.ascii	"I/O\000\000"
 13423      00
 13424 011d 000000   		.space	3
 13425              	.LC81:
 13426 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 13426      6C696400 
 13426      64417441 
 13426      00
 13427 012d 000000   		.space	3
 13428              	.LC82:
 13429 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 13429      65005072 
 13429      6F744563 
 13429      74456400 
 13430              	.LC83:
 13431 0140 4E6F2072 		.ascii	"No root\000Found\000"
 13431      6F6F7400 
 13431      466F756E 
 13431      6400
 13432 014e 0000     		.space	2
 13433              	.LC84:
 13434 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 13434      6978004D 
 13434      6D49534D 
 13434      6D417443 
 13434      4800
 13435 0162 0000     		.space	2
 13436              	.LC85:
 13437 0164 53696E67 		.ascii	"Singular\000\000"
 13437      756C6172 
 13437      0000
 13438 016e 0000     		.space	2
 13439              	.LC86:
 13440 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
ARM GAS  /tmp/ccdg5rgB.s 			page 376


 13440      68206973 
 13440      0046754C 
 13440      4C00
 13441 017e 0000     		.space	2
 13442              	.LC87:
 13443 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 13443      72797374 
 13443      616C0049 
 13443      6E537461 
 13443      4C4C4564 
 13444 0195 000000   		.space	3
 13445              	.LC88:
 13446 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 13446      6576656E 
 13446      20726567 
 13446      00666F72 
 13446      20436F4D 
 13447 01b2 0000     		.space	2
 13448              	.LC89:
 13449 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 13449      5800
 13450              		.section	.bss.DecimalMode,"aw",%nobits
 13451              		.set	.LANCHOR1,. + 0
 13454              	DecimalMode:
 13455 0000 00       		.space	1
 13456              		.section	.bss.SeparatorMode,"aw",%nobits
 13457              		.set	.LANCHOR0,. + 0
 13460              	SeparatorMode:
 13461 0000 00       		.space	1
 13462              		.section	.bss.no_status_top,"aw",%nobits
 13463              		.align	1
 13464              		.set	.LANCHOR18,. + 0
 13467              	no_status_top:
 13468 0000 0000     		.space	2
 13469              		.section	.rodata.CSWTCH.383,"a"
 13470              		.align	2
 13471              		.set	.LANCHOR11,. + 0
 13474              	CSWTCH.383:
 13475 0000 02000000 		.word	2
 13476 0004 08000000 		.word	8
 13477 0008 0A000000 		.word	10
 13478 000c 10000000 		.word	16
 13479              		.section	.rodata.CSWTCH.410,"a"
 13480              		.align	2
 13481              		.set	.LANCHOR16,. + 0
 13484              	CSWTCH.410:
 13485 0000 00000000 		.word	.LC45
 13486 0004 08000000 		.word	.LC46
 13487 0008 0C000000 		.word	.LC47
 13488              		.section	.rodata.DIGITS,"a"
 13489              		.align	2
 13490              		.set	.LANCHOR12,. + 0
 13493              	DIGITS:
 13494 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 13494      34353637 
 13494      38394142 
 13494      43444546 
ARM GAS  /tmp/ccdg5rgB.s 			page 377


 13494      00
 13495              		.section	.rodata.S7_ERROR,"a"
 13496              		.align	2
 13497              		.set	.LANCHOR26,. + 0
 13500              	S7_ERROR:
 13501 0000 4572726F 		.ascii	"Error\000"
 13501      7200
 13502              		.section	.rodata.S7_INF,"a"
 13503              		.align	2
 13504              		.set	.LANCHOR5,. + 0
 13507              	S7_INF:
 13508 0000 496E6669 		.ascii	"Infinity\000"
 13508      6E697479 
 13508      00
 13509              		.section	.rodata.S7_INF_Text,"a"
 13510              		.align	2
 13511              		.set	.LANCHOR7,. + 0
 13514              	S7_INF_Text:
 13515 0000 2049206E 		.ascii	" I n f i n i t y \000"
 13515      20662069 
 13515      206E2069 
 13515      20742079 
 13515      2000
 13516              		.section	.rodata.S7_NEG_INF_Text,"a"
 13517              		.align	2
 13518              		.set	.LANCHOR6,. + 0
 13521              	S7_NEG_INF_Text:
 13522 0000 2D49206E 		.ascii	"-I n f i n i t y \000"
 13522      20662069 
 13522      206E2069 
 13522      20742079 
 13522      2000
 13523              		.section	.rodata.S7_NaN,"a"
 13524              		.align	2
 13525              		.set	.LANCHOR3,. + 0
 13528              	S7_NaN:
 13529 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 13529      6E754D6D 
 13529      45726963 
 13529      00
 13530              		.section	.rodata.S7_NaN_Text,"a"
 13531              		.align	2
 13532              		.set	.LANCHOR4,. + 0
 13535              	S7_NaN_Text:
 13536 0000 204E206F 		.ascii	" N o t   n u m e r i c \000"
 13536      20742020 
 13536      206E2075 
 13536      206D2065 
 13536      20722069 
 13537              		.section	.rodata.S7_STEP,"a"
 13538              		.align	2
 13539              		.set	.LANCHOR25,. + 0
 13542              	S7_STEP:
 13543 0000 53744550 		.ascii	"StEP \000"
 13543      2000
 13544              		.section	.rodata.S7_STEP_ShortText,"a"
 13545              		.align	2
ARM GAS  /tmp/ccdg5rgB.s 			page 378


 13546              		.set	.LANCHOR19,. + 0
 13549              	S7_STEP_ShortText:
 13550 0000 53544550 		.ascii	"STEP\000"
 13550      00
 13551              		.section	.rodata.S7_fract_EQ,"a"
 13552              		.align	2
 13553              		.set	.LANCHOR9,. + 0
 13556              	S7_fract_EQ:
 13557 0000 203D2000 		.ascii	" = \000"
 13558              		.section	.rodata.S7_fract_GT,"a"
 13559              		.align	2
 13560              		.set	.LANCHOR10,. + 0
 13563              	S7_fract_GT:
 13564 0000 20477400 		.ascii	" Gt\000"
 13565              		.section	.rodata.S7_fract_LT,"a"
 13566              		.align	2
 13567              		.set	.LANCHOR8,. + 0
 13570              	S7_fract_LT:
 13571 0000 204C7400 		.ascii	" Lt\000"
 13572              		.section	.rodata.S_SURE,"a"
 13573              		.align	2
 13574              		.set	.LANCHOR21,. + 0
 13577              	S_SURE:
 13578 0000 53757265 		.ascii	"Sure?\000"
 13578      3F00
 13579              		.section	.rodata.SvnRevision,"a"
 13580              		.align	2
 13581              		.set	.LANCHOR20,. + 0
 13584              	SvnRevision:
 13585 0000 30202020 		.ascii	"0   "
 13586              		.section	.rodata.digtbl,"a"
 13587              		.align	2
 13588              		.set	.LANCHOR2,. + 0
 13591              	digtbl:
 13592 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 13592      02421252 
 13592      2D000000 
 13592      00000000 
 13592      00
 13593 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 13593      00000017 
 13593      01000000 
 13593      00
 13594 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 13594      28000000 
 13594      0020664B 
 13594      00000010 
 13595 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 13595      5E5B3973 
 13595      77497F7B 
 13595      00000612 
 13595      0300787D 
 13596 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 13596      673D240F 
 13596      75266C6D 
 13596      6F7C7914 
 13596      73362F00 
ARM GAS  /tmp/ccdg5rgB.s 			page 379


 13597 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 13597      161F7674 
 13597      6735040F 
 13597      75266915 
 13597      177C7914 
 13598 0076 000F003B 		.ascii	"\000\017\000;"
 13599              		.section	.rodata.error_table.8674,"a"
 13600              		.align	2
 13601              		.set	.LANCHOR27,. + 0
 13604              	error_table.8674:
 13605 0000 1C000000 		.word	.LC63
 13606 0004 30000000 		.word	.LC64
 13607 0008 38000000 		.word	.LC65
 13608 000c 4C000000 		.word	.LC66
 13609 0010 60000000 		.word	.LC67
 13610 0014 64000000 		.word	.LC68
 13611 0018 68000000 		.word	.LC69
 13612 001c 78000000 		.word	.LC70
 13613 0020 8C000000 		.word	.LC71
 13614 0024 9C000000 		.word	.LC72
 13615 0028 A8000000 		.word	.LC73
 13616 002c B4000000 		.word	.LC74
 13617 0030 C0000000 		.word	.LC75
 13618 0034 CC000000 		.word	.LC76
 13619 0038 D8000000 		.word	.LC77
 13620 003c F0000000 		.word	.LC78
 13621 0040 04010000 		.word	.LC79
 13622 0044 18010000 		.word	.LC80
 13623 0048 20010000 		.word	.LC81
 13624 004c 30010000 		.word	.LC82
 13625 0050 40010000 		.word	.LC83
 13626 0054 50010000 		.word	.LC84
 13627 0058 64010000 		.word	.LC85
 13628 005c 70010000 		.word	.LC86
 13629 0060 80010000 		.word	.LC87
 13630 0064 98010000 		.word	.LC88
 13631 0068 B4010000 		.word	.LC89
 13632              		.section	.rodata.error_table_text.8675,"a"
 13633              		.align	2
 13634              		.set	.LANCHOR28,. + 0
 13637              	error_table_text.8675:
 13638 0000 10000000 		.word	.LC48
 13639 0004 A8000000 		.word	.LC43
 13640 0008 20000000 		.word	.LC49
 13641 000c 30000000 		.word	.LC50
 13642 0010 A8000000 		.word	.LC43
 13643 0014 A8000000 		.word	.LC43
 13644 0018 40000000 		.word	.LC51
 13645 001c 4C000000 		.word	.LC52
 13646 0020 A8000000 		.word	.LC43
 13647 0024 A8000000 		.word	.LC43
 13648 0028 A8000000 		.word	.LC43
 13649 002c 60000000 		.word	.LC53
 13650 0030 6C000000 		.word	.LC54
 13651 0034 A8000000 		.word	.LC43
 13652 0038 78000000 		.word	.LC55
 13653 003c 8C000000 		.word	.LC56
ARM GAS  /tmp/ccdg5rgB.s 			page 380


 13654 0040 A4000000 		.word	.LC57
 13655 0044 A8000000 		.word	.LC43
 13656 0048 B8000000 		.word	.LC58
 13657 004c C4000000 		.word	.LC59
 13658 0050 D8000000 		.word	.LC60
 13659 0054 E4000000 		.word	.LC61
 13660 0058 A8000000 		.word	.LC43
 13661 005c 60000000 		.word	.LC53
 13662 0060 F8000000 		.word	.LC62
 13663 0064 A8000000 		.word	.LC43
 13664 0068 A8000000 		.word	.LC43
 13665              		.section	.rodata.libname,"a"
 13666              		.align	2
 13667              		.set	.LANCHOR22,. + 0
 13670              	libname:
 13671 0000 72414D6D 		.ascii	"rAMm\000"
 13671      00
 13672 0005 4C696220 		.ascii	"Lib \000"
 13672      00
 13673 000a 42757020 		.ascii	"Bup \000"
 13673      00
 13674 000f 726F4D6D 		.ascii	"roMm\000"
 13674      00
 13675              		.section	.rodata.libname_shorttext,"a"
 13676              		.align	2
 13677              		.set	.LANCHOR24,. + 0
 13680              	libname_shorttext:
 13681 0000 52616D00 		.ascii	"Ram\000"
 13682 0004 00       		.space	1
 13683 0005 4C696200 		.ascii	"Lib\000"
 13684 0009 00       		.space	1
 13685 000a 42757000 		.ascii	"Bup\000"
 13686 000e 00       		.space	1
 13687 000f 526F6D00 		.ascii	"Rom\000"
 13688 0013 00       		.space	1
 13689              		.section	.rodata.libname_text,"a"
 13690              		.align	2
 13691              		.set	.LANCHOR23,. + 0
 13694              	libname_text:
 13695 0000 20522061 		.ascii	" R a m \000"
 13695      206D2000 
 13696 0008 0000     		.space	2
 13697 000a 204C2069 		.ascii	" L i b \000"
 13697      20622000 
 13698 0012 0000     		.space	2
 13699 0014 20422075 		.ascii	" B u p \000"
 13699      20702000 
 13700 001c 0000     		.space	2
 13701 001e 2052206F 		.ascii	" R o m \000"
 13701      206D2000 
 13702 0026 0000     		.space	2
 13703              		.section	.rodata.shift_chars.8782,"a"
 13704              		.align	2
 13705              		.set	.LANCHOR15,. + 0
 13708              	shift_chars.8782:
 13709 0000 20111213 		.ascii	" \021\022\023"
 13710              		.section	.rodata.small_dots.8983,"a"
ARM GAS  /tmp/ccdg5rgB.s 			page 381


 13711              		.align	2
 13712              		.set	.LANCHOR14,. + 0
 13715              	small_dots.8983:
 13716 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 13716      07E12C06 
 13716      07E12C06 
 13716      06
 13717              		.section	.rodata.small_minus.8982,"a"
 13718              		.align	2
 13719              		.set	.LANCHOR13,. + 0
 13722              	small_minus.8982:
 13723 0000 07C22D06 		.ascii	"\007\302-\006"
 13724              		.text
 13725              	.Letext0:
 13726              		.file 2 "src/decNumber/decContext.h"
 13727              		.file 3 "src/decNumber/decNumber.h"
 13728              		.file 4 "src/decNumber/decimal64.h"
 13729              		.file 5 "src/decNumber/decimal128.h"
 13730              		.file 6 "src/xeq.h"
 13731              		.file 7 "src/data.h"
 13732              		.file 8 "src/storage.h"
 13733              		.file 9 "src/display.h"
 13734              		.file 10 "src/consts.h"
 13735              		.file 11 "src/stats.h"
 13736              		.file 12 "src/revision.h"
 13737              		.file 13 "src/printer.h"
 13738              		.file 14 "src/charset7.h"
 13739              		.file 15 "src/lcd.h"
 13740              		.file 16 "src/decn.h"
 13741              		.file 17 "src/alpha.h"
 13742              		.file 18 "src/int.h"
ARM GAS  /tmp/ccdg5rgB.s 			page 382


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccdg5rgB.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccdg5rgB.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccdg5rgB.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccdg5rgB.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccdg5rgB.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccdg5rgB.s:253    .text.set_dig:0000000000000064 $d
                            *COM*:000000000000001a LastDisplayedNumber
                            *COM*:0000000000000005 LastDisplayedExponent
     /tmp/ccdg5rgB.s:262    .text.hms_render:0000000000000000 $t
     /tmp/ccdg5rgB.s:269    .text.hms_render:0000000000000000 hms_render
     /tmp/ccdg5rgB.s:468    .text.hms_render:00000000000000a4 $d
     /tmp/ccdg5rgB.s:475    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccdg5rgB.s:482    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccdg5rgB.s:596    .text.hms_step:0000000000000000 $t
     /tmp/ccdg5rgB.s:603    .text.hms_step:0000000000000000 hms_step
     /tmp/ccdg5rgB.s:664    .text.hms_step:0000000000000034 $d
     /tmp/ccdg5rgB.s:669    .text.s_s_sized:0000000000000000 $t
     /tmp/ccdg5rgB.s:676    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/ccdg5rgB.s:1147   .text.s_s_sized:00000000000001b4 $d
                            *COM*:000000000000001f LastDisplayedText
                            *COM*:0000000000000001 forceDispPlot
     /tmp/ccdg5rgB.s:1155   .text.set_exp:0000000000000000 $t
     /tmp/ccdg5rgB.s:1162   .text.set_exp:0000000000000000 set_exp
     /tmp/ccdg5rgB.s:1467   .text.set_exp:0000000000000118 $d
     /tmp/ccdg5rgB.s:1474   .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccdg5rgB.s:1481   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccdg5rgB.s:1549   .text.set_separator.part.0:0000000000000038 $d
     /tmp/ccdg5rgB.s:1555   .text.set_decimal:0000000000000000 $t
     /tmp/ccdg5rgB.s:1562   .text.set_decimal:0000000000000000 set_decimal
     /tmp/ccdg5rgB.s:1658   .text.set_decimal:000000000000004c $d
     /tmp/ccdg5rgB.s:1666   .text.set_digits_string:0000000000000000 $t
     /tmp/ccdg5rgB.s:1673   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccdg5rgB.s:1767   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccdg5rgB.s:1771   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccdg5rgB.s:1778   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccdg5rgB.s:1925   .text.check_special_dn.isra.0:000000000000007c $d
     /tmp/ccdg5rgB.s:1937   .text.set_x_hms:0000000000000000 $t
     /tmp/ccdg5rgB.s:1944   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccdg5rgB.s:2445   .text.set_x_hms:00000000000001b8 $d
     /tmp/ccdg5rgB.s:2455   .text.set_x_fract:0000000000000000 $t
     /tmp/ccdg5rgB.s:2462   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccdg5rgB.s:2898   .text.set_x_fract:0000000000000198 $d
     /tmp/ccdg5rgB.s:2913   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccdg5rgB.s:2914   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccdg5rgB.s:2917   .text.carry_overflow:0000000000000000 $t
     /tmp/ccdg5rgB.s:2924   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccdg5rgB.s:3061   .text.carry_overflow:0000000000000070 $d
     /tmp/ccdg5rgB.s:3071   .text.set_int_x:0000000000000000 $t
     /tmp/ccdg5rgB.s:3078   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccdg5rgB.s:3836   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.383:0000000000000000 CSWTCH.385
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccdg5rgB.s:3848   .text.set_int_x:0000000000000360 $t
     /tmp/ccdg5rgB.s:3955   .text.set_int_x:00000000000003c0 $d
     /tmp/ccdg5rgB.s:3962   .text.getdig:0000000000000000 $t
ARM GAS  /tmp/ccdg5rgB.s 			page 383


     /tmp/ccdg5rgB.s:3970   .text.getdig:0000000000000000 getdig
     /tmp/ccdg5rgB.s:3990   .text.getdig:0000000000000008 $d
     /tmp/ccdg5rgB.s:3995   .text.dot:0000000000000000 $t
     /tmp/ccdg5rgB.s:4003   .text.dot:0000000000000000 dot
     /tmp/ccdg5rgB.s:4026   .text.std_round_fix:0000000000000000 $t
     /tmp/ccdg5rgB.s:4034   .text.std_round_fix:0000000000000000 std_round_fix
     /tmp/ccdg5rgB.s:4191   .text.std_round_fix:0000000000000078 $d
     /tmp/ccdg5rgB.s:4196   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccdg5rgB.s:4204   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccdg5rgB.s:4303   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccdg5rgB.s:4309   .text.set_annunciators:0000000000000000 $t
     /tmp/ccdg5rgB.s:4316   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccdg5rgB.s:4662   .text.set_annunciators:00000000000000dc $d
     /tmp/ccdg5rgB.s:4673   .text.pixel_length:0000000000000000 $t
     /tmp/ccdg5rgB.s:4681   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccdg5rgB.s:4772   .text.set_status:0000000000000000 $t
     /tmp/ccdg5rgB.s:4779   .text.set_status:0000000000000000 set_status
     /tmp/ccdg5rgB.s:4852   .text.set_status:0000000000000038 $d
     /tmp/ccdg5rgB.s:4857   .text.set_x_dn:0000000000000000 $t
     /tmp/ccdg5rgB.s:4865   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccdg5rgB.s:5653   .text.set_x_dn:0000000000000358 $d
     /tmp/ccdg5rgB.s:5660   .text.set_x_dn:0000000000000368 $t
     /tmp/ccdg5rgB.s:5813   .text.set_x_dn:0000000000000414 $d
     /tmp/ccdg5rgB.s:5819   .text.set_x_dn:000000000000041e $t
     /tmp/ccdg5rgB.s:5845   .text.set_x_dn:000000000000044a $d
     /tmp/ccdg5rgB.s:5851   .text.set_x_dn:0000000000000454 $t
     /tmp/ccdg5rgB.s:6441   .text.set_x_dn:00000000000006e0 $d
     /tmp/ccdg5rgB.s:6457   .text.set_x_dn:00000000000006fc $t
     /tmp/ccdg5rgB.s:7174   .text.set_x_dn:00000000000009d8 $d
     /tmp/ccdg5rgB.s:7183   .text.set_x:0000000000000000 $t
     /tmp/ccdg5rgB.s:7190   .text.set_x:0000000000000000 set_x
     /tmp/ccdg5rgB.s:7258   .text.format_reg:0000000000000000 $t
     /tmp/ccdg5rgB.s:7266   .text.format_reg:0000000000000000 format_reg
     /tmp/ccdg5rgB.s:7385   .text.format_reg:0000000000000064 $d
     /tmp/ccdg5rgB.s:7391   .text.set_status_right:0000000000000000 $t
     /tmp/ccdg5rgB.s:7398   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccdg5rgB.s:7542   .text.set_status_right:000000000000006c $d
     /tmp/ccdg5rgB.s:7547   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/ccdg5rgB.s:7554   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/ccdg5rgB.s:7679   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/ccdg5rgB.s:7684   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccdg5rgB.s:7742   .text.annunciators:0000000000000000 $t
     /tmp/ccdg5rgB.s:7749   .text.annunciators:0000000000000000 annunciators
     /tmp/ccdg5rgB.s:8236   .text.annunciators:000000000000027c $d
     /tmp/ccdg5rgB.s:8257   .text.annunciators:00000000000002b4 $t
     /tmp/ccdg5rgB.s:8936   .text.annunciators:00000000000005a0 $d
     /tmp/ccdg5rgB.s:8953   .text.annunciators:00000000000005dc $t
     /tmp/ccdg5rgB.s:9066   .text.annunciators:0000000000000650 $d
     /tmp/ccdg5rgB.s:9077   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccdg5rgB.s:9144   .text.display:0000000000000000 $t
     /tmp/ccdg5rgB.s:9152   .text.display:0000000000000000 display
     /tmp/ccdg5rgB.s:9835   .text.display:0000000000000314 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
     /tmp/ccdg5rgB.s:9854   .text.display:0000000000000354 $t
ARM GAS  /tmp/ccdg5rgB.s 			page 384


     /tmp/ccdg5rgB.s:10598  .text.display:0000000000000674 $d
     /tmp/ccdg5rgB.s:10623  .text.display:00000000000006c4 $t
     /tmp/ccdg5rgB.s:11569  .text.display:0000000000000a44 $d
     /tmp/ccdg5rgB.s:11584  .text.display:0000000000000a74 $t
     /tmp/ccdg5rgB.s:12308  .text.display:0000000000000d4c $d
     /tmp/ccdg5rgB.s:12335  .text.display:0000000000000d84 $t
     /tmp/ccdg5rgB.s:12664  .text.display:0000000000000edc $d
     /tmp/ccdg5rgB.s:12679  .text.frozen_display:0000000000000000 $t
     /tmp/ccdg5rgB.s:12687  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccdg5rgB.s:12717  .text.frozen_display:000000000000001c $d
     /tmp/ccdg5rgB.s:12722  .text.message:0000000000000000 $t
     /tmp/ccdg5rgB.s:12730  .text.message:0000000000000000 message
     /tmp/ccdg5rgB.s:12859  .text.message:0000000000000060 $d
     /tmp/ccdg5rgB.s:12867  .text.error_message:0000000000000000 $t
     /tmp/ccdg5rgB.s:12875  .text.error_message:0000000000000000 error_message
     /tmp/ccdg5rgB.s:13150  .text.error_message:00000000000000dc $d
     /tmp/ccdg5rgB.s:13163  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccdg5rgB.s:13171  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccdg5rgB.s:13293  .text.stopwatch_message:0000000000000058 $d
     /tmp/ccdg5rgB.s:13299  .rodata.str1.4:0000000000000000 $d
     /tmp/ccdg5rgB.s:13474  .rodata.CSWTCH.383:0000000000000000 CSWTCH.383
     /tmp/ccdg5rgB.s:13493  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccdg5rgB.s:13467  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccdg5rgB.s:13584  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccdg5rgB.s:13368  .rodata:0000000000000000 $d
     /tmp/ccdg5rgB.s:13454  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccdg5rgB.s:13455  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccdg5rgB.s:13460  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccdg5rgB.s:13461  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccdg5rgB.s:13463  .bss.no_status_top:0000000000000000 $d
     /tmp/ccdg5rgB.s:13470  .rodata.CSWTCH.383:0000000000000000 $d
     /tmp/ccdg5rgB.s:13480  .rodata.CSWTCH.410:0000000000000000 $d
     /tmp/ccdg5rgB.s:13484  .rodata.CSWTCH.410:0000000000000000 CSWTCH.410
     /tmp/ccdg5rgB.s:13489  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccdg5rgB.s:13496  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccdg5rgB.s:13500  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccdg5rgB.s:13503  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccdg5rgB.s:13507  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccdg5rgB.s:13510  .rodata.S7_INF_Text:0000000000000000 $d
     /tmp/ccdg5rgB.s:13514  .rodata.S7_INF_Text:0000000000000000 S7_INF_Text
     /tmp/ccdg5rgB.s:13517  .rodata.S7_NEG_INF_Text:0000000000000000 $d
     /tmp/ccdg5rgB.s:13521  .rodata.S7_NEG_INF_Text:0000000000000000 S7_NEG_INF_Text
     /tmp/ccdg5rgB.s:13524  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccdg5rgB.s:13528  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccdg5rgB.s:13531  .rodata.S7_NaN_Text:0000000000000000 $d
     /tmp/ccdg5rgB.s:13535  .rodata.S7_NaN_Text:0000000000000000 S7_NaN_Text
     /tmp/ccdg5rgB.s:13538  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccdg5rgB.s:13542  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccdg5rgB.s:13545  .rodata.S7_STEP_ShortText:0000000000000000 $d
     /tmp/ccdg5rgB.s:13549  .rodata.S7_STEP_ShortText:0000000000000000 S7_STEP_ShortText
     /tmp/ccdg5rgB.s:13552  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccdg5rgB.s:13556  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccdg5rgB.s:13559  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccdg5rgB.s:13563  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccdg5rgB.s:13566  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccdg5rgB.s:13570  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
ARM GAS  /tmp/ccdg5rgB.s 			page 385


     /tmp/ccdg5rgB.s:13573  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccdg5rgB.s:13577  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccdg5rgB.s:13580  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccdg5rgB.s:13587  .rodata.digtbl:0000000000000000 $d
     /tmp/ccdg5rgB.s:13591  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccdg5rgB.s:13600  .rodata.error_table.8674:0000000000000000 $d
     /tmp/ccdg5rgB.s:13604  .rodata.error_table.8674:0000000000000000 error_table.8674
     /tmp/ccdg5rgB.s:13633  .rodata.error_table_text.8675:0000000000000000 $d
     /tmp/ccdg5rgB.s:13637  .rodata.error_table_text.8675:0000000000000000 error_table_text.8675
     /tmp/ccdg5rgB.s:13666  .rodata.libname:0000000000000000 $d
     /tmp/ccdg5rgB.s:13670  .rodata.libname:0000000000000000 libname
     /tmp/ccdg5rgB.s:13676  .rodata.libname_shorttext:0000000000000000 $d
     /tmp/ccdg5rgB.s:13680  .rodata.libname_shorttext:0000000000000000 libname_shorttext
     /tmp/ccdg5rgB.s:13690  .rodata.libname_text:0000000000000000 $d
     /tmp/ccdg5rgB.s:13694  .rodata.libname_text:0000000000000000 libname_text
     /tmp/ccdg5rgB.s:13704  .rodata.shift_chars.8782:0000000000000000 $d
     /tmp/ccdg5rgB.s:13708  .rodata.shift_chars.8782:0000000000000000 shift_chars.8782
     /tmp/ccdg5rgB.s:13711  .rodata.small_dots.8983:0000000000000000 $d
     /tmp/ccdg5rgB.s:13715  .rodata.small_dots.8983:0000000000000000 small_dots.8983
     /tmp/ccdg5rgB.s:13718  .rodata.small_minus.8982:0000000000000000 $d
     /tmp/ccdg5rgB.s:13722  .rodata.small_minus.8982:0000000000000000 small_minus.8982

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
scopy
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
ARM GAS  /tmp/ccdg5rgB.s 			page 386


const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
replace_char
ShowRegister
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
scopy_spc
wait_for_display
argcmds
WasDataEntry
ProgFree
scopy_char
current_catalogue
catcmd
get_const
getprog
prt
op_r2p
multicmds
global_regs
find_label_from
local_regs
slen
free_mem
free_flash
ARM GAS  /tmp/ccdg5rgB.s 			page 387


findmultilbl
SizeStatRegs
alpha_rcl_s
copyreg
sigma_val
getX
packed_from_number
set_NaN
do_conv
StackBase
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing

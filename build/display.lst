ARM GAS  /tmp/cc9o0abE.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/cc9o0abE.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** #if !defined(REALBUILD) && !defined(DM42) 
  59:src/display.c **** char LastDisplayedText[NUMALPHA + 1];	   // For clipboard export
  60:src/display.c **** char LastDisplayedNumber[NUMBER_LENGTH + 1];
  61:src/display.c **** char LastDisplayedExponent[EXPONENT_LENGTH + 1];
  62:src/display.c **** char forceDispPlot;
  63:src/display.c **** #endif
  64:src/display.c **** 
  65:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  66:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  67:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  68:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  69:src/display.c **** 
  70:src/display.c **** /* Message strings
  71:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  72:src/display.c ****  * are for the upper dot matrix line.
  73:src/display.c ****  */
  74:src/display.c **** static const char S_SURE[] = "Sure?";
  75:src/display.c **** 
  76:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  77:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  78:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
  79:src/display.c **** static const char S7_NaN_Text[] = " N o t   n u m e r i c ";
  80:src/display.c **** #endif
  81:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  82:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
  83:src/display.c **** static const char S7_INF_Text[] = " I n f i n i t y ";
  84:src/display.c **** static const char S7_NEG_INF_Text[] = "-I n f i n i t y ";
  85:src/display.c **** #endif
  86:src/display.c **** 
  87:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
ARM GAS  /tmp/cc9o0abE.s 			page 3


  88:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
  89:src/display.c **** static const char S7_STEP_ShortText[] = "STEP";
  90:src/display.c **** #endif
  91:src/display.c **** 
  92:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  93:src/display.c **** static const char S7_fract_LT[] = " Lt";
  94:src/display.c **** static const char S7_fract_GT[] = " Gt";
  95:src/display.c **** 
  96:src/display.c **** static const char libname[][5] = {
  97:src/display.c ****   "rAMm", "Lib ", "Bup ",
  98:src/display.c **** #ifndef REALBUILD
  99:src/display.c ****   "roMm"
 100:src/display.c **** #endif
 101:src/display.c **** };
 102:src/display.c **** 
 103:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 104:src/display.c **** static const char libname_text[][10] = {
 105:src/display.c ****   " R a m ", " L i b ", " B u p ",	" R o m "
 106:src/display.c **** };
 107:src/display.c **** static const char libname_shorttext[][5] = {
 108:src/display.c ****   "Ram", "Lib", "Bup", "Rom"
 109:src/display.c **** };
 110:src/display.c **** #endif
 111:src/display.c **** 
 112:src/display.c **** 
 113:src/display.c **** /* Set the separator and decimal mode globals
 114:src/display.c ****  */
 115:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 115 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 116:src/display.c ****   // Separators used by various modes
 117:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 117 3 view .LVU1
  35              		.loc 1 117 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
 118:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 118 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 117 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E73F 		ldrb	r3, [r2, #4071]	@ zero_extendqisi2
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 117 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
 115:src/display.c ****   // Separators used by various modes
  44              		.loc 1 115 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 117:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 117 6 view .LVU7
  50 0010 0ED0     		beq	.L2
ARM GAS  /tmp/cc9o0abE.s 			page 4


  51              		.loc 1 118 5 is_stmt 1 view .LVU8
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 119 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
 120:src/display.c ****   }
 121:src/display.c ****   else {
 122:src/display.c ****     SeparatorMode = SEP_COMMA;
 123:src/display.c ****     DecimalMode = DECIMAL_DOT;
 124:src/display.c ****   }
 125:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 125 8 view .LVU10
  55 0014 92F8E82F 		ldrb	r2, [r2, #4072]	@ zero_extendqisi2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 119 17 view .LVU11
  57 0018 0124     		movs	r4, #1
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 118 19 view .LVU12
  59 001a 0225     		movs	r5, #2
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 119 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 125 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
 118:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 118 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
 119:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 119 5 is_stmt 1 view .LVU16
  67              		.loc 1 125 3 view .LVU17
  68              		.loc 1 125 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 125 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 126:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 126 5 is_stmt 1 view .LVU20
  76              		.loc 1 126 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 127:src/display.c **** }
  80              		.loc 1 127 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 122 5 is_stmt 1 view .LVU23
 123:src/display.c ****   }
  90              		.loc 1 123 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
ARM GAS  /tmp/cc9o0abE.s 			page 5


 125:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 125 8 view .LVU25
  93 0032 92F8E82F 		ldrb	r2, [r2, #4072]	@ zero_extendqisi2
 123:src/display.c ****   }
  94              		.loc 1 123 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 122 19 view .LVU27
  97 0038 0125     		movs	r5, #1
 125:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 125 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
 122:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 122 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
 123:src/display.c ****   }
 102              		.loc 1 123 5 is_stmt 1 view .LVU30
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 125 3 view .LVU31
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 125 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
 125:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 125 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 127 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB6:
 128:src/display.c **** 
 129:src/display.c **** 
 130:src/display.c **** /* Table of error messages.
 131:src/display.c ****  * These consist of a double string.  The first is displayed in the
 132:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 133:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
ARM GAS  /tmp/cc9o0abE.s 			page 6


 134:src/display.c ****  */
 135:src/display.c **** void error_message(const unsigned int e) 
 136:src/display.c **** {
 137:src/display.c **** #define MSG1(top) top "\0"
 138:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 139:src/display.c **** 
 140:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 141:src/display.c ****   static const char *const error_table[] = 
 142:src/display.c ****     {
 143:src/display.c ****       // manually get the order correct!
 144:src/display.c ****       MSG2("Running", "ProGraMm"),
 145:src/display.c ****       MSG1("Domain"),
 146:src/display.c ****       MSG2("Bad time", "or dAtE"),
 147:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 148:src/display.c ****       MSG1("+\237"),
 149:src/display.c ****       MSG1("-\237"),
 150:src/display.c ****       MSG2("No such", "LAbEL"),
 151:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 152:src/display.c ****       MSG1("Out of range"),
 153:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 154:src/display.c ****       MSG2("Bad digit", "1"),
 155:src/display.c ****       MSG2("Too long", "1"),
 156:src/display.c **** #else
 157:src/display.c ****       MSG1("Bad digit"),
 158:src/display.c ****       MSG1("Too long"),
 159:src/display.c **** #endif
 160:src/display.c ****       MSG2("RAM is", "FuLL"),
 161:src/display.c ****       MSG2("Stack", "CLASH"),
 162:src/display.c ****       MSG1("Bad mode"),
 163:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 164:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 165:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 166:src/display.c ****       MSG1("I/O"),
 167:src/display.c ****       MSG2("Invalid", "dAtA"),
 168:src/display.c ****       MSG2("Write", "ProtEctEd"),
 169:src/display.c ****       MSG2("No root", "Found"),
 170:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 171:src/display.c ****       MSG1("Singular"),
 172:src/display.c ****       MSG2("Flash is", "FuLL"),
 173:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 174:src/display.c **** #ifndef SHIFT_EXPONENT
 175:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 176:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 177:src/display.c ****       MSG2("Too\007\304 small", "1"),
 178:src/display.c **** #     else
 179:src/display.c ****       MSG2("Too small", "1"),
 180:src/display.c **** #     endif
 181:src/display.c ****       MSG2("Too big", "1"),
 182:src/display.c **** #  else
 183:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 184:src/display.c ****       MSG1("Too\007\304 small"),
 185:src/display.c **** #     else
 186:src/display.c ****       MSG1("Too small"),
 187:src/display.c **** #     endif
 188:src/display.c ****       MSG1("Too big"),
 189:src/display.c **** #  endif
 190:src/display.c **** #endif
ARM GAS  /tmp/cc9o0abE.s 			page 7


 191:src/display.c **** #ifdef INCLUDE_C_LOCK
 192:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 193:src/display.c **** #endif
 194:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 195:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 196:src/display.c ****       MSG2("Interrupted", "X"),
 197:src/display.c **** #endif
 198:src/display.c ****     };
 199:src/display.c **** #undef MSG1
 200:src/display.c **** #undef MSG2
 201:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 202:src/display.c ****   static const char *const error_table_text[] =
 203:src/display.c ****     {
 204:src/display.c ****       " P r o g r a m ",
 205:src/display.c ****       "",
 206:src/display.c ****       " o r   d a t e ",
 207:src/display.c ****       " O p - c o d e ",
 208:src/display.c ****       "",
 209:src/display.c ****       "",
 210:src/display.c ****       " L a b e l ",
 211:src/display.c ****       " O p e r a t i o n ",
 212:src/display.c ****       "",
 213:src/display.c ****       "",
 214:src/display.c ****       "",
 215:src/display.c ****       " F u l l ",
 216:src/display.c ****       " C l a s h ",
 217:src/display.c ****       "",
 218:src/display.c ****       " T o o   s m a l l ",
 219:src/display.c ****       " D a t a   p o i n t s ",
 220:src/display.c ****       " P a r a m e t e r ",
 221:src/display.c ****       "",
 222:src/display.c ****       " D a t a ",
 223:src/display.c ****       " P r o t e c t e d ",
 224:src/display.c ****       " F o u n d ",
 225:src/display.c ****       " M i s m a t c h ",
 226:src/display.c ****       "",
 227:src/display.c ****       " F u l l ",
 228:src/display.c ****       " I n s t a l l e d ",
 229:src/display.c **** #ifndef SHIFT_EXPONENT
 230:src/display.c ****       "",
 231:src/display.c ****       "",
 232:src/display.c **** #endif
 233:src/display.c **** #ifdef INCLUDE_C_LOCK
 234:src/display.c ****       "",
 235:src/display.c **** #endif
 236:src/display.c ****       "",
 237:src/display.c ****     };
 238:src/display.c **** #endif
 239:src/display.c **** 
 240:src/display.c ****   if (e != ERR_NONE || Running) {
 241:src/display.c ****     const char *p = error_table[e];
 242:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 243:src/display.c ****     if (*q == '\0')
 244:src/display.c ****       q = S7_ERROR;
 245:src/display.c ****     if (*q == 'X') {
 246:src/display.c ****       DispMsg = p;
 247:src/display.c ****       frozen_display();
ARM GAS  /tmp/cc9o0abE.s 			page 8


 248:src/display.c ****     }
 249:src/display.c ****     else {
 250:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 251:src/display.c ****       if (*q == '1')
 252:src/display.c **** 	q = CNULL;
 253:src/display.c **** #endif
 254:src/display.c ****       message(p, q);
 255:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 256:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 257:src/display.c ****       scopy(LastDisplayedNumber, error_table_text[e]);
 258:src/display.c **** #endif
 259:src/display.c ****     }
 260:src/display.c **** #ifdef INFRARED
 261:src/display.c ****     if (Tracing) {
 262:src/display.c ****       if (*q == 'X')
 263:src/display.c **** 	print_reg(regX_idx, p, 0);
 264:src/display.c ****       else {
 265:src/display.c **** 	print_tab(0);
 266:src/display.c **** 	print_line(p, 0);
 267:src/display.c **** 	print(' ');
 268:src/display.c **** 	while (*q != '\0') {
 269:src/display.c **** 	  int c = *q;
 270:src/display.c **** 	  if (c >= 'A')
 271:src/display.c **** 	    c |= 0x60; // ASCII lower case
 272:src/display.c **** 	  print(c);
 273:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 274:src/display.c **** 	    ++q;
 275:src/display.c **** 	  ++q;
 276:src/display.c **** 	}
 277:src/display.c **** 	print_advance( 0 );
 278:src/display.c ****       }
 279:src/display.c ****     }
 280:src/display.c **** #endif
 281:src/display.c ****   }
 282:src/display.c **** }
 283:src/display.c **** 
 284:src/display.c **** 
 285:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 286:src/display.c ****  * display.
 287:src/display.c ****  */
 288:src/display.c **** #define D_TOP 64
 289:src/display.c **** #define D_TL 32
 290:src/display.c **** #define D_TR 8
 291:src/display.c **** #define D_MIDDLE 16
 292:src/display.c **** #define D_BL 4
 293:src/display.c **** #define D_BR 1
 294:src/display.c **** #define D_BOTTOM 2
 295:src/display.c **** 
 296:src/display.c **** #include "charset7.h"
 297:src/display.c **** 
 298:src/display.c **** #if !defined(REALBUILD) && !defined(DM42) 
 299:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 300:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 301:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 302:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 303:src/display.c **** 
 304:src/display.c **** static void set_mant_sign_dot()
ARM GAS  /tmp/cc9o0abE.s 			page 9


 305:src/display.c **** {
 306:src/display.c ****   LastDisplayedNumber[0]='-';
 307:src/display.c ****   set_dot(MANT_SIGN);
 308:src/display.c **** }
 309:src/display.c **** 
 310:src/display.c **** static void clr_mant_sign_dot()
 311:src/display.c **** {
 312:src/display.c ****   LastDisplayedNumber[0]=' ';
 313:src/display.c ****   clr_dot(MANT_SIGN);
 314:src/display.c **** }
 315:src/display.c **** 
 316:src/display.c **** static void set_exp_sign_dot()
 317:src/display.c **** {
 318:src/display.c ****   LastDisplayedExponent[0]='-';
 319:src/display.c ****   set_dot(EXP_SIGN);
 320:src/display.c **** }
 321:src/display.c **** 
 322:src/display.c **** static void clr_exp_sign_dot()
 323:src/display.c **** {
 324:src/display.c ****   LastDisplayedExponent[0]=' ';
 325:src/display.c ****   clr_dot(EXP_SIGN);
 326:src/display.c **** }
 327:src/display.c **** 
 328:src/display.c **** #else
 329:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 330:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 331:src/display.c **** 
 332:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 333:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 334:src/display.c **** 
 335:src/display.c **** #endif
 336:src/display.c **** 
 337:src/display.c **** #ifndef REALBUILD
 338:src/display.c **** int getdig(int ch)
 339:src/display.c **** #else
 340:src/display.c ****   static int getdig(int ch)
 341:src/display.c **** #endif
 342:src/display.c **** {
 343:src/display.c ****   // perform index lookup
 344:src/display.c ****   return digtbl[ch&0xff];
 345:src/display.c **** }
 346:src/display.c **** 
 347:src/display.c **** void dot(int n, int on) {
 348:src/display.c ****   if (on)	set_dot(n);
 349:src/display.c ****   else	clr_dot(n);
 350:src/display.c **** }
 351:src/display.c **** 
 352:src/display.c **** 
 353:src/display.c **** /* Set the decimal point *after* the indicated digit
 354:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 355:src/display.c ****  * of decimal.
 356:src/display.c ****  */
 357:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 358:src/display.c ****   if (res) {
 359:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 360:src/display.c ****   } else {
 361:src/display.c ****     set_dot(posn+7);
ARM GAS  /tmp/cc9o0abE.s 			page 10


 362:src/display.c ****     if (decimal != DECIMAL_DOT)
 363:src/display.c ****       set_dot(posn+8);
 364:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 365:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2]= decimal == DECIMAL_DOT?'.':',';
 366:src/display.c **** #endif
 367:src/display.c ****   }
 368:src/display.c ****   return res;
 369:src/display.c **** }
 370:src/display.c **** 
 371:src/display.c **** /* Set the digit group separator *before* the specified digit.
 372:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 373:src/display.c ****  * sep argument.
 374:src/display.c ****  */
 375:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 376:src/display.c ****   if (sep == SEP_NONE)
 377:src/display.c ****     return res;
 378:src/display.c ****   if (res) {
 379:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 380:src/display.c ****     else *res++ = '.';
 381:src/display.c ****   } else {
 382:src/display.c ****     posn -= SEGS_PER_DIGIT;
 383:src/display.c ****     set_dot(posn+7);
 384:src/display.c ****     if (sep == SEP_COMMA)
 385:src/display.c ****       set_dot(posn+8);
 386:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 387:src/display.c ****     LastDisplayedNumber[(posn/9)*2+2] = sep == SEP_COMMA?',':'.';
 388:src/display.c **** #endif
 389:src/display.c ****   }
 390:src/display.c ****   return res;
 391:src/display.c **** }
 392:src/display.c **** 
 393:src/display.c **** /* Set a digit in positions [base, base+6] */
 394:src/display.c **** static void set_dig(int base, int ch)
 395:src/display.c **** {
 136              		.loc 1 395 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 396:src/display.c ****   int i;
 140              		.loc 1 396 3 view .LVU36
 397:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 397 3 view .LVU37
 142              	.LBB162:
 143              	.LBI162:
 338:src/display.c **** #else
 144              		.loc 1 338 5 view .LVU38
 145              	.LBB163:
 344:src/display.c **** }
 146              		.loc 1 344 3 view .LVU39
 344:src/display.c **** }
 147              		.loc 1 344 16 is_stmt 0 view .LVU40
 148 0000 0A4B     		ldr	r3, .L24
 344:src/display.c **** }
 149              		.loc 1 344 19 view .LVU41
 150 0002 C9B2     		uxtb	r1, r1
 151              	.LVL1:
 344:src/display.c **** }
ARM GAS  /tmp/cc9o0abE.s 			page 11


 152              		.loc 1 344 19 view .LVU42
 153              	.LBE163:
 154              	.LBE162:
 395:src/display.c ****   int i;
 155              		.loc 1 395 1 view .LVU43
 156 0004 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB165:
 163              	.LBB164:
 344:src/display.c **** }
 164              		.loc 1 344 16 view .LVU44
 165 0006 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 166              	.LVL2:
 344:src/display.c **** }
 167              		.loc 1 344 16 view .LVU45
 168              	.LBE164:
 169              	.LBE165:
 398:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 399:src/display.c ****   if(base<SEGS_EXP_BASE)
 400:src/display.c ****     LastDisplayedNumber[(base/9)*2+1] = ch==0?' ':ch;
 401:src/display.c ****   else
 402:src/display.c ****     LastDisplayedExponent[(base-SEGS_EXP_BASE)/7+1] = ch;
 403:src/display.c **** #endif
 404:src/display.c ****   for (i=6; i>=0; i--)
 170              		.loc 1 404 3 is_stmt 1 view .LVU46
 171              		.loc 1 404 13 view .LVU47
 172 0008 851D     		adds	r5, r0, #6
 173              		.loc 1 404 9 is_stmt 0 view .LVU48
 174 000a 0624     		movs	r4, #6
 175 000c 03E0     		b	.L19
 176              	.LVL3:
 177              	.L23:
 405:src/display.c ****     {
 406:src/display.c ****       //		dot(base, c & (1 << i));
 407:src/display.c ****       if (c & (1 << i))
 408:src/display.c **** 	set_dot(base);
 178              		.loc 1 408 2 view .LVU49
 179 000e FFF7FEFF 		bl	set_dot
 180              	.LVL4:
 409:src/display.c ****       else
 410:src/display.c **** 	clr_dot(base);
 411:src/display.c ****       base++;
 181              		.loc 1 411 7 is_stmt 1 view .LVU50
 404:src/display.c ****     {
 182              		.loc 1 404 19 view .LVU51
 404:src/display.c ****     {
 183              		.loc 1 404 3 is_stmt 0 view .LVU52
 184 0012 013C     		subs	r4, r4, #1
 185              	.LVL5:
 404:src/display.c ****     {
 186              		.loc 1 404 3 view .LVU53
 187 0014 09D3     		bcc	.L22
 188              	.LVL6:
ARM GAS  /tmp/cc9o0abE.s 			page 12


 189              	.L19:
 408:src/display.c ****       else
 190              		.loc 1 408 2 is_stmt 1 view .LVU54
 410:src/display.c ****       base++;
 191              		.loc 1 410 2 view .LVU55
 407:src/display.c **** 	set_dot(base);
 192              		.loc 1 407 11 is_stmt 0 view .LVU56
 193 0016 46FA04F3 		asr	r3, r6, r4
 407:src/display.c **** 	set_dot(base);
 194              		.loc 1 407 10 view .LVU57
 195 001a DB07     		lsls	r3, r3, #31
 196 001c A5EB0400 		sub	r0, r5, r4
 197              	.LVL7:
 407:src/display.c **** 	set_dot(base);
 198              		.loc 1 407 7 is_stmt 1 view .LVU58
 407:src/display.c **** 	set_dot(base);
 199              		.loc 1 407 10 is_stmt 0 view .LVU59
 200 0020 F5D4     		bmi	.L23
 410:src/display.c ****       base++;
 201              		.loc 1 410 2 view .LVU60
 202 0022 FFF7FEFF 		bl	clr_dot
 203              	.LVL8:
 204              		.loc 1 411 7 is_stmt 1 view .LVU61
 404:src/display.c ****     {
 205              		.loc 1 404 19 view .LVU62
 404:src/display.c ****     {
 206              		.loc 1 404 3 is_stmt 0 view .LVU63
 207 0026 013C     		subs	r4, r4, #1
 208              	.LVL9:
 404:src/display.c ****     {
 209              		.loc 1 404 3 view .LVU64
 210 0028 F5D2     		bcs	.L19
 211              	.LVL10:
 212              	.L22:
 412:src/display.c ****     }
 413:src/display.c **** }
 213              		.loc 1 413 1 view .LVU65
 214 002a 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL11:
 216              	.L25:
 217              		.loc 1 413 1 view .LVU66
 218              		.align	2
 219              	.L24:
 220 002c 00000000 		.word	.LANCHOR2
 221              		.cfi_endproc
 222              	.LFE6:
 224              		.section	.text.hms_render,"ax",%progbits
 225              		.align	1
 226              		.p2align 2,,3
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	hms_render:
 233              	.LVL12:
 234              	.LFB17:
 414:src/display.c **** 
ARM GAS  /tmp/cc9o0abE.s 			page 13


 415:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 416:src/display.c ****   if (res) *res++ = ch;
 417:src/display.c ****   else	set_dig(base, ch);
 418:src/display.c ****   return res;
 419:src/display.c **** }
 420:src/display.c **** 
 421:src/display.c **** 
 422:src/display.c **** static void set_digits_string(const char *msg, int j) {
 423:src/display.c ****   for (; *msg != '\0'; msg++) {
 424:src/display.c ****     if (*msg == '.' || *msg == ',')
 425:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 426:src/display.c ****     else {
 427:src/display.c ****       set_dig_s(j, *msg, CNULL);
 428:src/display.c ****       j += SEGS_PER_DIGIT;
 429:src/display.c ****     }
 430:src/display.c ****   }
 431:src/display.c **** }
 432:src/display.c **** 
 433:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 434:src/display.c ****   int i;
 435:src/display.c ****   const int n = res == NULL ? 3 : 4;
 436:src/display.c **** 
 437:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 438:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 439:src/display.c **** }
 440:src/display.c **** 
 441:src/display.c **** /* Force the exponent display
 442:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 443:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 444:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 445:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 446:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 447:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 448:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 449:src/display.c ****  */
 450:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 451:src/display.c ****   union {
 452:src/display.c ****     char buf[4];
 453:src/display.c ****     int i;
 454:src/display.c ****   } u;
 455:src/display.c ****   int negative;
 456:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 457:src/display.c ****   int thousands;
 458:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 459:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 460:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 461:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 462:src/display.c **** #  else
 463:src/display.c ****   const int show_large_exponent = 1;
 464:src/display.c **** #  endif
 465:src/display.c **** #else
 466:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 467:src/display.c ****   int thousands;
 468:src/display.c **** #  endif
 469:src/display.c ****   const int show_large_exponent = 0;
 470:src/display.c **** #endif
 471:src/display.c **** 
ARM GAS  /tmp/cc9o0abE.s 			page 14


 472:src/display.c ****   negative = flags & 2;
 473:src/display.c ****   if (exp < 0) {
 474:src/display.c ****     negative = 1;
 475:src/display.c ****     exp = -exp;
 476:src/display.c ****   }
 477:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 478:src/display.c ****   thousands = exp / 1000;
 479:src/display.c **** #endif
 480:src/display.c ****   if (res) {
 481:src/display.c **** #ifdef INCLUDE_YREG_CODE
 482:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 483:src/display.c ****     if (thousands != 0) {
 484:src/display.c **** #else
 485:src/display.c ****       if (exp > 999) {
 486:src/display.c **** #endif
 487:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 488:src/display.c **** 	// No exponent separator for large -ve exponents
 489:src/display.c ****       }
 490:src/display.c ****       else *res++ = 'e'; // Normal separator
 491:src/display.c **** #else
 492:src/display.c ****       *res++ = 'e';
 493:src/display.c **** #endif
 494:src/display.c ****       if (negative) *res++ = '-';
 495:src/display.c ****     }
 496:src/display.c ****     else {
 497:src/display.c ****       if (negative) SET_EXP_SIGN;
 498:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 499:src/display.c ****       if (thousands != 0) {
 500:src/display.c **** #else
 501:src/display.c **** 	if (exp > 999) {
 502:src/display.c **** #endif
 503:src/display.c **** 	  if (!show_large_exponent
 504:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 505:src/display.c **** 	      && (flags & 8) == 0
 506:src/display.c **** #endif
 507:src/display.c **** 	      ) {
 508:src/display.c **** #ifdef REALBUILD
 509:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 510:src/display.c **** #else
 511:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 512:src/display.c **** #endif
 513:src/display.c **** 	    goto no_number;
 514:src/display.c **** 	  }
 515:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 516:src/display.c **** 	  else {
 517:src/display.c **** 	    exp -= thousands * 1000;
 518:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 519:src/display.c **** 	    if (flags & 16) {
 520:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 521:src/display.c **** 	      int i;
 522:src/display.c **** 
 523:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 524:src/display.c **** 		// Clear digits and separators
 525:src/display.c **** 		clr_dot(i);
 526:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 527:src/display.c **** 	    }
 528:src/display.c **** #  endif
ARM GAS  /tmp/cc9o0abE.s 			page 15


 529:src/display.c **** 	    if (negative) {
 530:src/display.c **** 	      CLR_EXP_SIGN;
 531:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 532:src/display.c **** 	    }
 533:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 534:src/display.c **** 	    flags = 1;
 535:src/display.c **** 	  }
 536:src/display.c **** #endif
 537:src/display.c **** 	}
 538:src/display.c ****       }
 539:src/display.c **** #ifdef REALBUILD
 540:src/display.c ****       u.i = 0; // Smaller ARM code
 541:src/display.c **** #else
 542:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 543:src/display.c **** #endif
 544:src/display.c ****       if (flags & 5) {
 545:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 546:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 547:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 548:src/display.c **** 	  int i;
 549:src/display.c **** 
 550:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 551:src/display.c **** 	    if (u.buf[i] == '0')
 552:src/display.c **** 	      u.buf[i] = ' ';
 553:src/display.c **** 	    else
 554:src/display.c **** 	      break;
 555:src/display.c **** 	  }
 556:src/display.c **** 	  if (i != 0 && negative) {
 557:src/display.c **** 	    // Move minus sign to right in front of exponent
 558:src/display.c **** 	    CLR_EXP_SIGN;
 559:src/display.c **** 	    u.buf[i - 1] = '-';
 560:src/display.c **** 	  }
 561:src/display.c **** 	}
 562:src/display.c **** #endif
 563:src/display.c ****       }
 564:src/display.c ****       else
 565:src/display.c **** 	num_arg(u.buf, exp);
 566:src/display.c ****     no_number:
 567:src/display.c ****       set_exp_digits_string(u.buf, res);
 568:src/display.c ****     }
 569:src/display.c **** 
 570:src/display.c ****     static void carry_overflow(void) {
 571:src/display.c ****       const int base = SEGS_EXP_BASE;
 572:src/display.c ****       int c;
 573:src/display.c ****       unsigned int b;
 574:src/display.c **** 
 575:src/display.c ****       // Figure out the base
 576:src/display.c ****       switch (State2.smode) {
 577:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 578:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 579:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 580:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 581:src/display.c ****       default:	b = UState.int_base+1;	break;
 582:src/display.c ****       }
 583:src/display.c **** 
 584:src/display.c ****       // Display the base as the first exponent digit
 585:src/display.c ****       if (b > 10 && b < 16)
ARM GAS  /tmp/cc9o0abE.s 			page 16


 586:src/display.c **** 	SET_EXP_SIGN;
 587:src/display.c ****       c = "B34567o9D12345h"[b-2];
 588:src/display.c ****       set_dig(base, c);
 589:src/display.c **** 
 590:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 591:src/display.c ****       if (get_carry())
 592:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 593:src/display.c ****       if (get_overflow())
 594:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 595:src/display.c ****     }
 596:src/display.c **** 
 597:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 598:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 599:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 600:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 601:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 602:src/display.c **** #endif
 603:src/display.c **** 
 604:src/display.c ****     /* Display the annunicator text line.
 605:src/display.c ****      * Care needs to be taken to keep things aligned.
 606:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 607:src/display.c ****      */
 608:src/display.c **** #ifdef TOP_ROW
 609:src/display.c ****     static void annunciators(void) {
 610:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 611:src/display.c ****       char buf[42], *p = buf, *q="";
 612:src/display.c ****       char buf2[42], *p2 = buf2;
 613:src/display.c ****       int n;
 614:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 615:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 616:src/display.c ****       // Constant variables and code branches depending on a constant variable
 617:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 618:src/display.c ****       // feature run-time configurable if needed.
 619:src/display.c **** #ifdef INCLUDE_YREG_CODE
 620:src/display.c **** #  ifdef YREG_ALWAYS_ON
 621:src/display.c ****       const int yreg_enabled = 1;
 622:src/display.c **** #  else
 623:src/display.c ****       const int yreg_enabled = UState.show_y;
 624:src/display.c **** #  endif
 625:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 626:src/display.c ****       const int yreg_hms = 1;
 627:src/display.c **** #  else
 628:src/display.c ****       const int yreg_hms = 0;
 629:src/display.c **** #  endif
 630:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 631:src/display.c ****       const int yreg_fract = 1;
 632:src/display.c **** #  else
 633:src/display.c ****       const int yreg_fract = 0;
 634:src/display.c **** #  endif
 635:src/display.c **** #else
 636:src/display.c ****       const int yreg_enabled = 0;
 637:src/display.c ****       const int yreg_hms = 0;
 638:src/display.c ****       const int yreg_fract = 0;
 639:src/display.c **** #endif
 640:src/display.c **** #ifdef RP_PREFIX
 641:src/display.c ****       const int rp_prefix = 1;
 642:src/display.c **** #else
ARM GAS  /tmp/cc9o0abE.s 			page 17


 643:src/display.c ****       const int rp_prefix = 0;
 644:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 645:src/display.c **** #endif
 646:src/display.c ****       // Indicates whether font escape code is compiled in.
 647:src/display.c ****       // This variable will always be set at compile time.
 648:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 649:src/display.c ****       const int has_FONT_ESCAPE = 1;
 650:src/display.c **** #else
 651:src/display.c ****       const int has_FONT_ESCAPE = 0;
 652:src/display.c **** #endif
 653:src/display.c **** 
 654:src/display.c ****       xset(buf, '\0', sizeof(buf));
 655:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 656:src/display.c ****       
 657:src/display.c ****       if (is_intmode()) {
 658:src/display.c **** #ifdef SHOW_STACK_SIZE
 659:src/display.c **** 	if (shift_char == ' ') {
 660:src/display.c **** 	  *p2++ = '\007';
 661:src/display.c **** 	  *p2++ = '\346';
 662:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 663:src/display.c **** 	}
 664:src/display.c **** 	else
 665:src/display.c **** #endif
 666:src/display.c **** 	  {
 667:src/display.c **** 	    *p2++ = shift_char;
 668:src/display.c **** 	    *p2++ = '\006';
 669:src/display.c **** 	  }
 670:src/display.c **** 
 671:src/display.c **** 	switch(int_mode()) {
 672:src/display.c **** 	default:
 673:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 674:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 675:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 676:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 677:src/display.c **** 	}
 678:src/display.c **** 	q = scopy(p2, q);
 679:src/display.c **** 	*q++ = '\006';
 680:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 681:src/display.c **** 
 682:src/display.c **** 	if (IntMaxWindow > 0) {
 683:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 684:src/display.c **** 	  if (*q == '1')
 685:src/display.c **** 	    n += 2;
 686:src/display.c **** 	  if (q[1] == '1')
 687:src/display.c **** 	    n += 2;
 688:src/display.c **** 	  while (n-- > 0)
 689:src/display.c **** 	    *p2++ = '\006';
 690:src/display.c **** 
 691:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 692:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 693:src/display.c **** 	}
 694:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 695:src/display.c ****       }
 696:src/display.c **** #ifdef INCLUDE_C_LOCK
 697:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 698:src/display.c **** #else
 699:src/display.c ****       else if (!yreg_enabled
ARM GAS  /tmp/cc9o0abE.s 			page 18


 700:src/display.c **** #endif
 701:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 702:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 703:src/display.c **** #endif
 704:src/display.c **** 	       ) {
 705:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 706:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 707:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 708:src/display.c **** 	if (shift_char == ' ') {
 709:src/display.c **** 	  *p2++ = '\007';
 710:src/display.c **** 	  *p2++ = '\342';
 711:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 712:src/display.c **** 	  *p2++ = '\007';
 713:src/display.c **** 	  *p2++ = '\344';
 714:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 715:src/display.c **** 	}
 716:src/display.c **** 	else
 717:src/display.c **** #endif
 718:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 719:src/display.c **** 	    *p2++ = shift_char;
 720:src/display.c **** 	    *p2++ = '\006';
 721:src/display.c **** 	  }
 722:src/display.c **** 	  else {
 723:src/display.c **** 	    *p2++ = 'D';
 724:src/display.c **** 	  }
 725:src/display.c **** 
 726:src/display.c **** 	if (State2.cmplx) {
 727:src/display.c **** 	  *p2++ = ' ';
 728:src/display.c **** 	  *p2 = '\024';
 729:src/display.c **** 	  goto skip;
 730:src/display.c **** 	}
 731:src/display.c **** 	if (State2.arrow) {
 732:src/display.c **** 	  *p2++ = ' ';
 733:src/display.c **** 	  *p2 = '\015';
 734:src/display.c **** 	  goto skip;
 735:src/display.c **** 	}
 736:src/display.c **** 
 737:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 738:src/display.c **** 	  if (State2.wascomplex) {
 739:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 740:src/display.c **** 	  }
 741:src/display.c **** 	  else if (rp_prefix) {
 742:src/display.c **** 	    if (RectPolConv == 1) {
 743:src/display.c **** 	      q = "\007\306<";
 744:src/display.c **** 	    }
 745:src/display.c **** 	    else {
 746:src/display.c **** 	      q = "\007\306y";
 747:src/display.c **** 	    }
 748:src/display.c **** 	  }
 749:src/display.c **** 	  p = scopy(buf, q);
 750:src/display.c **** 
 751:src/display.c **** 	  goto display_yreg;
 752:src/display.c **** 	}
 753:src/display.c **** 
 754:src/display.c **** 	switch (UState.date_mode) {
 755:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 756:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
ARM GAS  /tmp/cc9o0abE.s 			page 19


 757:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 758:src/display.c **** #endif
 759:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 760:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 761:src/display.c **** #endif
 762:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 763:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 764:src/display.c **** #endif
 765:src/display.c **** #endif
 766:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 767:src/display.c **** 	}
 768:src/display.c **** 	p2 = scopy(p2, q);
 769:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 770:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 771:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 772:src/display.c **** 	}
 773:src/display.c **** #else
 774:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 775:src/display.c **** 	*p2++ = '\007';
 776:src/display.c **** 	*p2++ = '\342';
 777:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 778:src/display.c **** #endif
 779:src/display.c ****       }
 780:src/display.c ****       else { // yreg_enabled
 781:src/display.c **** 	// do top-related things first
 782:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 783:src/display.c **** 	if (State2.cmplx) {
 784:src/display.c **** 	  *p2++ = '\007';
 785:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 786:src/display.c **** 	  *p2++ = shift_char;
 787:src/display.c **** 	  *p2++ = '\024';
 788:src/display.c **** 	}
 789:src/display.c **** 	else {// if (shift_char != ' ') {
 790:src/display.c **** 	  *p2++ = '\007';
 791:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 792:src/display.c **** 	  *p2++ = shift_char;
 793:src/display.c **** 	}
 794:src/display.c **** #endif
 795:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 796:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 797:src/display.c **** 	  *p2++ = '\007';
 798:src/display.c **** 	  *p2++ = '\207';
 799:src/display.c **** 	  *p2++ = '\007';	    
 800:src/display.c **** 	}
 801:src/display.c **** 	else {
 802:src/display.c **** 	  *p2++ = '\007';
 803:src/display.c **** 	  *p2++ = '\207';
 804:src/display.c **** 	  *p2++ = ' ';
 805:src/display.c **** 	}
 806:src/display.c **** #endif
 807:src/display.c **** #ifndef SHOW_STACK_SIZE
 808:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 809:src/display.c **** 	p2 = scopy(p2, q);
 810:src/display.c **** #else
 811:src/display.c **** 	if (is_dblmode()) {
 812:src/display.c **** 	  *p2++ = '\007';
 813:src/display.c **** 	  *p2++ = '\342';
ARM GAS  /tmp/cc9o0abE.s 			page 20


 814:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 815:src/display.c **** 	  *p2++ = '\007';
 816:src/display.c **** 	  *p2++ = '\345';
 817:src/display.c **** 	  *p2++ = 'D';
 818:src/display.c **** 	}
 819:src/display.c **** 	else {
 820:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 821:src/display.c **** 	  p2 = scopy(p2, q);
 822:src/display.c **** 	}
 823:src/display.c **** #endif
 824:src/display.c **** 
 825:src/display.c **** 	switch (UState.date_mode) {
 826:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 827:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 828:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 829:src/display.c **** #endif
 830:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 831:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 832:src/display.c **** #endif
 833:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 834:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 835:src/display.c **** #endif
 836:src/display.c **** #endif
 837:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 838:src/display.c **** 	}
 839:src/display.c **** 	  
 840:src/display.c **** 	//      no_copy:
 841:src/display.c **** 	// display either arrow or datemode
 842:src/display.c **** 	if (State2.arrow) {
 843:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 844:src/display.c **** 	} // no need to skip y display with arrow here
 845:src/display.c **** 	else {
 846:src/display.c **** 	  p2 = scopy(p2, q);
 847:src/display.c **** 	}
 848:src/display.c **** 	// now do the annotations, if any, for the middle row:
 849:src/display.c **** #ifdef INCLUDE_C_LOCK
 850:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 851:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 852:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 853:src/display.c **** 	  }
 854:src/display.c **** 	  else {
 855:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 856:src/display.c **** 	  }
 857:src/display.c **** 	  scopy(p, q);
 858:src/display.c **** 	  goto skip;
 859:src/display.c **** 	}
 860:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 861:src/display.c **** 	  q = "\007\307<";
 862:src/display.c **** 	  p = scopy(p, q);
 863:src/display.c **** 	}
 864:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 865:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 866:src/display.c **** 	  p = scopy(p, q);
 867:src/display.c **** 	}
 868:src/display.c **** #else
 869:src/display.c **** 	
 870:src/display.c **** 	if (State2.wascomplex) {
ARM GAS  /tmp/cc9o0abE.s 			page 21


 871:src/display.c **** 	  q = "\007\207i";
 872:src/display.c **** 	  p = scopy(p, q);
 873:src/display.c **** 	  //	    goto no_copy;
 874:src/display.c **** 	}
 875:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 876:src/display.c **** 	  q = "\007\307<";
 877:src/display.c **** 	  p = scopy(p, q);
 878:src/display.c **** 	  //	    goto no_copy;
 879:src/display.c **** 	}
 880:src/display.c **** 	else
 881:src/display.c **** #endif
 882:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 883:src/display.c **** 	    q = "\007\307y";
 884:src/display.c **** 	    p = scopy(p, q);
 885:src/display.c **** 	    //	    goto no_copy;
 886:src/display.c **** 	  }
 887:src/display.c ****       
 888:src/display.c **** 	if (State2.runmode) {
 889:src/display.c **** 	  decNumber y;
 890:src/display.c **** 	display_yreg:
 891:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 892:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 893:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 894:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 895:src/display.c **** 	   */
 896:src/display.c **** 	  if (is_intmode()) {
 897:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 898:src/display.c **** 	    goto skip;
 899:src/display.c **** 	  }
 900:src/display.c **** #ifdef INCLUDE_C_LOCK
 901:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 902:src/display.c **** 	    getRegister(&y, regK_idx);
 903:src/display.c **** 	  }
 904:src/display.c **** 	  else {
 905:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 906:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 907:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 908:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 909:src/display.c **** 	  }
 910:src/display.c **** #else
 911:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 912:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 913:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 914:src/display.c **** #endif
 915:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 916:src/display.c **** #ifdef INCLUDE_C_LOCK
 917:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 918:src/display.c **** #else
 919:src/display.c **** 	    if (yreg_hms && State2.hms) {
 920:src/display.c **** #endif
 921:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 922:src/display.c **** 
 923:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 924:src/display.c **** 	      UState.nothousands = 1;
 925:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 926:src/display.c **** 	      UState.nothousands = saved_nothousands;
 927:src/display.c **** 	      // First replace the '@' character with the degree symbol
ARM GAS  /tmp/cc9o0abE.s 			page 22


 928:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 929:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 930:src/display.c **** 	      // then remove the fractional part of the seconds.
 931:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 932:src/display.c **** 	      while (*p) {
 933:src/display.c **** 		replace_char(buf, p[0], p[1]);
 934:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 935:src/display.c **** 		  goto skip;
 936:src/display.c **** 		}
 937:src/display.c **** 		p += 2;
 938:src/display.c **** 	      }
 939:src/display.c **** 	      goto skip;
 940:src/display.c **** 	    }
 941:src/display.c **** 	    if (yreg_fract && UState.fract
 942:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 943:src/display.c **** 		&& !State2.cmplx
 944:src/display.c **** #endif
 945:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 946:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 947:src/display.c **** #endif
 948:src/display.c **** 		&& set_x_fract(&y, p)) {
 949:src/display.c **** 	      char ltgteq;
 950:src/display.c **** 
 951:src/display.c **** 	      q = find_char(buf, '\0') - 2;
 952:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 953:src/display.c **** 	      ltgteq = *q;
 954:src/display.c **** 	      switch (ltgteq) {
 955:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 956:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 957:src/display.c **** 	      }
 958:src/display.c **** 	      scopy(q, "\007\344?");
 959:src/display.c **** 	      q[2] = ltgteq;
 960:src/display.c **** 
 961:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 962:src/display.c **** 		goto skip;
 963:src/display.c **** 	      }
 964:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 965:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 966:src/display.c **** 		goto skip;
 967:src/display.c **** 	      }
 968:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 969:src/display.c **** 	    }
 970:src/display.c **** 	  }
 971:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 972:src/display.c **** 	    int extra_pixels;
 973:src/display.c **** 
 974:src/display.c **** 	    set_x_dn(&y, p, &n);
 975:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 976:src/display.c **** 	    if (extra_pixels <= 0)
 977:src/display.c **** 	      break;
 978:src/display.c **** 
 979:src/display.c **** 	    xset(p, '\0', n+10);
 980:src/display.c **** 
 981:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 982:src/display.c **** 	  }
 983:src/display.c **** 	}
 984:src/display.c ****       }
ARM GAS  /tmp/cc9o0abE.s 			page 23


 985:src/display.c ****       
 986:src/display.c ****     skip:
 987:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 988:src/display.c ****       set_status_top_always(buf2);
 989:src/display.c ****       
 990:src/display.c ****     }
 991:src/display.c **** #else
 992:src/display.c ****     static void annunciators(void) {
 993:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 994:src/display.c ****       char buf[42], *p = buf, *q="";
 995:src/display.c ****       int n;
 996:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 997:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 998:src/display.c ****       // Constant variables and code branches depending on a constant variable
 999:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
1000:src/display.c ****       // feature run-time configurable if needed.
1001:src/display.c **** #ifdef INCLUDE_YREG_CODE
1002:src/display.c **** #  ifdef YREG_ALWAYS_ON
1003:src/display.c ****       const int yreg_enabled = 1;
1004:src/display.c **** #  else
1005:src/display.c ****       const int yreg_enabled = UState.show_y;
1006:src/display.c **** #  endif
1007:src/display.c **** #  ifdef INCLUDE_YREG_HMS
1008:src/display.c ****       const int yreg_hms = 1;
1009:src/display.c **** #  else
1010:src/display.c ****       const int yreg_hms = 0;
1011:src/display.c **** #  endif
1012:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
1013:src/display.c ****       const int yreg_fract = 1;
1014:src/display.c **** #  else
1015:src/display.c ****       const int yreg_fract = 0;
1016:src/display.c **** #  endif
1017:src/display.c **** #else
1018:src/display.c ****       const int yreg_enabled = 0;
1019:src/display.c ****       const int yreg_hms = 0;
1020:src/display.c ****       const int yreg_fract = 0;
1021:src/display.c **** #endif
1022:src/display.c **** #ifdef RP_PREFIX
1023:src/display.c ****       const int rp_prefix = 1;
1024:src/display.c **** #else
1025:src/display.c ****       const int rp_prefix = 0;
1026:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
1027:src/display.c **** #endif
1028:src/display.c ****       // Indicates whether font escape code is compiled in.
1029:src/display.c ****       // This variable will always be set at compile time.
1030:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1031:src/display.c ****       const int has_FONT_ESCAPE = 1;
1032:src/display.c **** #else
1033:src/display.c ****       const int has_FONT_ESCAPE = 0;
1034:src/display.c **** #endif
1035:src/display.c **** 
1036:src/display.c ****       xset(buf, '\0', sizeof(buf));
1037:src/display.c ****       
1038:src/display.c ****       if (is_intmode()) {
1039:src/display.c **** #ifdef SHOW_STACK_SIZE
1040:src/display.c **** 	if (shift_char == ' ') {
1041:src/display.c **** 	  *p++ = '\007';
ARM GAS  /tmp/cc9o0abE.s 			page 24


1042:src/display.c **** 	  *p++ = '\346';
1043:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1044:src/display.c **** 	}
1045:src/display.c **** 	else
1046:src/display.c **** #endif
1047:src/display.c **** 	  {
1048:src/display.c **** 	    *p++ = shift_char;
1049:src/display.c **** 	    *p++ = '\006';
1050:src/display.c **** 	  }
1051:src/display.c **** 
1052:src/display.c **** 	switch(int_mode()) {
1053:src/display.c **** 	default:
1054:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
1055:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
1056:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
1057:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
1058:src/display.c **** 	}
1059:src/display.c **** 	q = scopy(p, q);
1060:src/display.c **** 	*q++ = '\006';
1061:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
1062:src/display.c **** 
1063:src/display.c **** 	if (IntMaxWindow > 0) {
1064:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
1065:src/display.c **** 	  if (*q == '1')
1066:src/display.c **** 	    n += 2;
1067:src/display.c **** 	  if (q[1] == '1')
1068:src/display.c **** 	    n += 2;
1069:src/display.c **** 	  while (n-- > 0)
1070:src/display.c **** 	    *p++ = '\006';
1071:src/display.c **** 
1072:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
1073:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
1074:src/display.c **** 	}
1075:src/display.c ****       }
1076:src/display.c **** #ifdef INCLUDE_C_LOCK
1077:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
1078:src/display.c **** #else
1079:src/display.c ****       else if (!yreg_enabled
1080:src/display.c **** #endif
1081:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1082:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1083:src/display.c **** #endif
1084:src/display.c **** 	       ) {
1085:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1086:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1087:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1088:src/display.c **** 	if (shift_char == ' ') {
1089:src/display.c **** 	  *p++ = '\007';
1090:src/display.c **** 	  *p++ = '\342';
1091:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1092:src/display.c **** 	  *p++ = '\007';
1093:src/display.c **** 	  *p++ = '\344';
1094:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1095:src/display.c **** 	}
1096:src/display.c **** 	else
1097:src/display.c **** #endif
1098:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
ARM GAS  /tmp/cc9o0abE.s 			page 25


1099:src/display.c **** 	    *p++ = shift_char;
1100:src/display.c **** 	    *p++ = '\006';
1101:src/display.c **** 	  }
1102:src/display.c **** 	  else {
1103:src/display.c **** 	    *p++ = 'D';
1104:src/display.c **** 	  }
1105:src/display.c **** 
1106:src/display.c **** 	if (State2.cmplx) {
1107:src/display.c **** 	  *p++ = ' ';
1108:src/display.c **** 	  *p = '\024';
1109:src/display.c **** 	  goto skip;
1110:src/display.c **** 	}
1111:src/display.c **** 	if (State2.arrow) {
1112:src/display.c **** 	  *p++ = ' ';
1113:src/display.c **** 	  *p = '\015';
1114:src/display.c **** 	  goto skip;
1115:src/display.c **** 	}
1116:src/display.c **** 
1117:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1118:src/display.c **** 	  if (State2.wascomplex) {
1119:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1120:src/display.c **** 	  }
1121:src/display.c **** 	  else if (rp_prefix) {
1122:src/display.c **** 	    if (RectPolConv == 1) {
1123:src/display.c **** 	      q = "\007\306<";
1124:src/display.c **** 	    }
1125:src/display.c **** 	    else {
1126:src/display.c **** 	      q = "\007\306y";
1127:src/display.c **** 	    }
1128:src/display.c **** 	  }
1129:src/display.c **** 	  p = scopy(buf, q);
1130:src/display.c **** 
1131:src/display.c **** 	  goto display_yreg;
1132:src/display.c **** 	}
1133:src/display.c **** 
1134:src/display.c **** 	switch (UState.date_mode) {
1135:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1136:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1137:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1138:src/display.c **** #endif
1139:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1140:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1141:src/display.c **** #endif
1142:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1143:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1144:src/display.c **** #endif
1145:src/display.c **** #endif
1146:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1147:src/display.c **** 	}
1148:src/display.c **** 	p = scopy(p, q);
1149:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1150:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1151:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1152:src/display.c **** 	}
1153:src/display.c **** #else
1154:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1155:src/display.c **** 	*p++ = '\007';
ARM GAS  /tmp/cc9o0abE.s 			page 26


1156:src/display.c **** 	*p++ = '\342';
1157:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1158:src/display.c **** #endif
1159:src/display.c ****       }
1160:src/display.c ****       else { // yreg_enabled
1161:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1162:src/display.c **** 	if (State2.cmplx) {
1163:src/display.c **** 	  *p++ = '\007';
1164:src/display.c **** 	  *p++ = '\344';
1165:src/display.c **** 	  *p++ = shift_char;
1166:src/display.c **** 	  q = "\024";
1167:src/display.c **** 	}
1168:src/display.c **** 	else if (shift_char != ' ') {
1169:src/display.c **** 	  *p++ = '\007';
1170:src/display.c **** 	  *p++ = '\307';
1171:src/display.c **** 	  *p++ = shift_char;
1172:src/display.c **** 	  goto no_copy;
1173:src/display.c **** 	}
1174:src/display.c **** 	else
1175:src/display.c **** #endif
1176:src/display.c **** #ifdef INCLUDE_C_LOCK
1177:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1178:src/display.c **** 			if ( POLAR_DISPLAY ) {
1179:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
1180:src/display.c **** 			}
1181:src/display.c **** 			else {
1182:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1183:src/display.c **** 			}
1184:src/display.c **** 			scopy(p, q);
1185:src/display.c **** 			goto skip;
1186:src/display.c **** 		}
1187:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1188:src/display.c **** 			q = "\007\307<";
1189:src/display.c **** 		}
1190:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1191:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1192:src/display.c **** 		}
1193:src/display.c **** #else
1194:src/display.c **** 	  if (State2.wascomplex) {
1195:src/display.c **** 	    q = "\007\207i";
1196:src/display.c **** 	  }
1197:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1198:src/display.c **** 	    q = "\007\307<";
1199:src/display.c **** 	  }
1200:src/display.c **** #endif
1201:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1202:src/display.c **** 	    q = "\007\307y";
1203:src/display.c **** 	  }
1204:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1205:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1206:src/display.c **** 	    q = "\007\207\007";
1207:src/display.c **** 	  }
1208:src/display.c **** #endif
1209:src/display.c **** 	  else {
1210:src/display.c **** #ifndef SHOW_STACK_SIZE
1211:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1212:src/display.c **** #else
ARM GAS  /tmp/cc9o0abE.s 			page 27


1213:src/display.c **** 	    if (is_dblmode()) {
1214:src/display.c **** 	      *p++ = '\007';
1215:src/display.c **** 	      *p++ = '\342';
1216:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1217:src/display.c **** 	      q = "\007\345D";
1218:src/display.c **** 	    }
1219:src/display.c **** 	    else {
1220:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1221:src/display.c **** 	    }
1222:src/display.c **** #endif
1223:src/display.c **** 	  }
1224:src/display.c **** 	p = scopy(p, q);
1225:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1226:src/display.c ****       no_copy:
1227:src/display.c **** #endif
1228:src/display.c **** 
1229:src/display.c **** 	if (State2.arrow) {
1230:src/display.c **** 	  scopy(p, "\007\204\006\015");
1231:src/display.c **** 	} else if (State2.runmode) {
1232:src/display.c **** 	  decNumber y;
1233:src/display.c **** 	display_yreg:
1234:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1235:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1236:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
1237:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1238:src/display.c **** 	   */
1239:src/display.c **** #ifdef INCLUDE_C_LOCK
1240:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1241:src/display.c **** 		    getRegister(&y, regK_idx);
1242:src/display.c **** 		  }
1243:src/display.c **** 		  else {
1244:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1245:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1246:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1247:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1248:src/display.c **** 		  }
1249:src/display.c **** #else
1250:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1251:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1252:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1253:src/display.c **** #endif
1254:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1255:src/display.c **** #ifdef INCLUDE_C_LOCK
1256:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1257:src/display.c **** #else
1258:src/display.c **** 	    if (yreg_hms && State2.hms) {
1259:src/display.c **** #endif
1260:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1261:src/display.c **** 
1262:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1263:src/display.c **** 	      UState.nothousands = 1;
1264:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1265:src/display.c **** 	      UState.nothousands = saved_nothousands;
1266:src/display.c **** 	      // First replace the '@' character with the degree symbol
1267:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1268:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1269:src/display.c **** 	      // then remove the fractional part of the seconds.
ARM GAS  /tmp/cc9o0abE.s 			page 28


1270:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1271:src/display.c **** 	      while (*p) {
1272:src/display.c **** 		replace_char(buf, p[0], p[1]);
1273:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1274:src/display.c **** 		  goto skip;
1275:src/display.c **** 		}
1276:src/display.c **** 		p += 2;
1277:src/display.c **** 	      }
1278:src/display.c **** 	      goto skip;
1279:src/display.c **** 	    }
1280:src/display.c **** 	    if (yreg_fract && UState.fract
1281:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1282:src/display.c **** 		&& !State2.cmplx
1283:src/display.c **** #endif
1284:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1285:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1286:src/display.c **** #endif
1287:src/display.c **** 		&& set_x_fract(&y, p)) {
1288:src/display.c **** 	      char ltgteq;
1289:src/display.c **** 
1290:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1291:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1292:src/display.c **** 	      ltgteq = *q;
1293:src/display.c **** 	      switch (ltgteq) {
1294:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1295:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1296:src/display.c **** 	      }
1297:src/display.c **** 	      scopy(q, "\007\344?");
1298:src/display.c **** 	      q[2] = ltgteq;
1299:src/display.c **** 
1300:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1301:src/display.c **** 		goto skip;
1302:src/display.c **** 	      }
1303:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1304:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1305:src/display.c **** 		goto skip;
1306:src/display.c **** 	      }
1307:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1308:src/display.c **** 	    }
1309:src/display.c **** 	  }
1310:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1311:src/display.c **** 	    int extra_pixels;
1312:src/display.c **** 
1313:src/display.c **** 	    set_x_dn(&y, p, &n);
1314:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1315:src/display.c **** 	    if (extra_pixels <= 0)
1316:src/display.c **** 	      break;
1317:src/display.c **** 
1318:src/display.c **** 	    xset(p, '\0', n+10);
1319:src/display.c **** 
1320:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1321:src/display.c **** 	  }
1322:src/display.c **** 	}
1323:src/display.c ****       }
1324:src/display.c ****       
1325:src/display.c ****     skip:	set_status_top(buf);
1326:src/display.c ****     }
ARM GAS  /tmp/cc9o0abE.s 			page 29


1327:src/display.c **** #endif //top_row
1328:src/display.c ****     static void disp_x(const char *p) {
1329:src/display.c ****       int i;
1330:src/display.c ****       int gotdot = -1;
1331:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1332:src/display.c ****       const
1333:src/display.c **** #endif
1334:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1335:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1336:src/display.c ****       int overflow_to_left = 0;
1337:src/display.c **** #endif
1338:src/display.c **** 
1339:src/display.c ****       if (*p == '-') {
1340:src/display.c **** 	SET_MANT_SIGN;
1341:src/display.c **** 	p++;
1342:src/display.c ****       }
1343:src/display.c **** 
1344:src/display.c ****       if (is_intmode()) {
1345:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1346:src/display.c **** 	  set_dig(i, *p);
1347:src/display.c **** 	  i += SEGS_PER_DIGIT;
1348:src/display.c **** 	}
1349:src/display.c **** 	carry_overflow();
1350:src/display.c ****       } else {
1351:src/display.c **** 	set_separator_decimal_modes();
1352:src/display.c **** 
1353:src/display.c **** 	i = 0;
1354:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1355:src/display.c **** 	if ( CmdLineDot > 1 ) {
1356:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1357:src/display.c **** 	  const
1358:src/display.c **** #  endif
1359:src/display.c **** 	    int double_dot = 0;
1360:src/display.c **** 	  int j;
1361:src/display.c **** 
1362:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1363:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1364:src/display.c **** 	      gotdot = j;
1365:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1366:src/display.c **** 	      double_dot = (p[j+1] == '.');
1367:src/display.c **** #  endif
1368:src/display.c **** 	    }
1369:src/display.c **** 	  }
1370:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1371:src/display.c **** 	  if (j > 0) {
1372:src/display.c **** 	    p += j + 1;
1373:src/display.c **** 	    i = SEGS_PER_DIGIT;
1374:src/display.c **** 	    if (gotdot <= j) {
1375:src/display.c **** 	      gotdot = 0;
1376:src/display.c **** 	      if (double_dot)
1377:src/display.c **** 		p++;
1378:src/display.c **** 	    }
1379:src/display.c **** 	    else if (*p == '.') {
1380:src/display.c **** 	      gotdot = 0;
1381:src/display.c **** 	      p++;
1382:src/display.c **** 	      if (!double_dot)
1383:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
ARM GAS  /tmp/cc9o0abE.s 			page 30


1384:src/display.c **** 	    }
1385:src/display.c **** 	    else gotdot = -1;
1386:src/display.c **** 	    set_dig(0, '<');
1387:src/display.c **** 	    overflow_to_left = 1;
1388:src/display.c **** 	  }
1389:src/display.c **** 	  else gotdot = -1;
1390:src/display.c **** 	}
1391:src/display.c **** #endif
1392:src/display.c **** 
1393:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1394:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1395:src/display.c **** 	       && *p != 'D'
1396:src/display.c **** #endif
1397:src/display.c **** 	       ; p++) {
1398:src/display.c **** 	  if (*p == '.') {
1399:src/display.c **** 	    if (gotdot < 0)
1400:src/display.c **** 	      gotdot = i;
1401:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1402:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1403:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1404:src/display.c **** 	      if ( *(p+1) == '.' ) {
1405:src/display.c **** 		p++;
1406:src/display.c **** 	      }
1407:src/display.c **** #  else
1408:src/display.c **** 	      if ( i != gotdot ) {
1409:src/display.c **** #  endif
1410:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1411:src/display.c **** 		i += segs_per_digit;
1412:src/display.c **** 	      }
1413:src/display.c **** 	      else {
1414:src/display.c **** 		if ( CmdLineDot > 1 ) {
1415:src/display.c **** 		  i += segs_per_digit;
1416:src/display.c **** 		}
1417:src/display.c **** 		else {
1418:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1419:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1420:src/display.c **** 		}
1421:src/display.c **** 	      }
1422:src/display.c **** #else
1423:src/display.c **** 	      if (i > 0)
1424:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1425:src/display.c **** 	      else {
1426:src/display.c **** 		set_dig(i, '0');
1427:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1428:src/display.c **** 		i += segs_per_digit;
1429:src/display.c **** 	      }
1430:src/display.c **** #endif
1431:src/display.c **** 	    } else {
1432:src/display.c **** 	      set_dig(i, *p);
1433:src/display.c **** 	      i += segs_per_digit;
1434:src/display.c **** 	    }
1435:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1436:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1437:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1438:src/display.c **** #endif
1439:src/display.c **** 	  }
1440:src/display.c **** 
ARM GAS  /tmp/cc9o0abE.s 			page 31


1441:src/display.c **** 	  /* Implement a floating comma */
1442:src/display.c **** 	  if (gotdot < 0)
1443:src/display.c **** 	    gotdot = i;
1444:src/display.c **** 	  for (;;) {
1445:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1446:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1447:src/display.c **** 	      break;
1448:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1449:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1450:src/display.c **** 	      break;
1451:src/display.c **** #endif
1452:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1453:src/display.c **** 	  }
1454:src/display.c **** 
1455:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1456:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1457:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1458:src/display.c **** 	    int flags = 8;
1459:src/display.c **** #  else
1460:src/display.c **** 	    int flags = 12;
1461:src/display.c **** #  endif
1462:src/display.c **** 
1463:src/display.c **** 	    if (*p == 'D')
1464:src/display.c **** 	      flags |= 2;
1465:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1466:src/display.c **** 	      flags |= 16;
1467:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1468:src/display.c **** 	  }
1469:src/display.c **** #else
1470:src/display.c **** 	  if (*p == 'E') {
1471:src/display.c **** 	    p++;
1472:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1473:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1474:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1475:src/display.c **** #  else
1476:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1477:src/display.c **** #  endif
1478:src/display.c **** 	  } 
1479:src/display.c **** #endif
1480:src/display.c **** 	}
1481:src/display.c ****       }
1482:src/display.c **** 
1483:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1484:src/display.c **** 
1485:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1486:src/display.c **** 	const int ws = word_size();
1487:src/display.c **** 	unsigned int b;
1488:src/display.c **** 	long long int vs = value;
1489:src/display.c **** 	unsigned long long int v;
1490:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1491:src/display.c **** 	int i, j, k;
1492:src/display.c **** 	int sign = 0;
1493:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1494:src/display.c **** 
1495:src/display.c **** 	switch (State2.smode) {
1496:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1497:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
ARM GAS  /tmp/cc9o0abE.s 			page 32


1498:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1499:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1500:src/display.c **** 	default:	b = int_base();	break;
1501:src/display.c **** 	}
1502:src/display.c **** 
1503:src/display.c **** 	if (!res) {
1504:src/display.c **** 	  IntMaxWindow = 0;
1505:src/display.c **** 	  carry_overflow();
1506:src/display.c **** 	}
1507:src/display.c **** 
1508:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1509:src/display.c **** 	  v = extract_value(value, &sign);
1510:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1511:src/display.c **** 	    v = value;
1512:src/display.c **** 	  if (v == 0) {
1513:src/display.c **** 	    if (sign)
1514:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1515:src/display.c **** 	    set_dig_s(dig, '0', res);
1516:src/display.c **** 	    return;
1517:src/display.c **** 	  } else
1518:src/display.c **** 	    for (i=0; v != 0; i++) {
1519:src/display.c **** 	      const int r = v % b;
1520:src/display.c **** 	      v /= b;
1521:src/display.c **** 	      buf[i] = DIGITS[r];
1522:src/display.c **** 	    }
1523:src/display.c **** 	} else {
1524:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1525:src/display.c **** 	  if (ws < 64) {
1526:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1527:src/display.c **** 	    vs &= mask;
1528:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1529:src/display.c **** 	      vs |= ~mask;
1530:src/display.c **** 	  }
1531:src/display.c **** 
1532:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1533:src/display.c **** 	    set_dig_s(dig, '0', res);
1534:src/display.c **** 	    return;
1535:src/display.c **** 	  } else if (!UState.leadzero) {
1536:src/display.c **** 	    v = (unsigned long long int)vs;
1537:src/display.c **** 	    for (i=0; v != 0; i++) {
1538:src/display.c **** 	      const int r = v % b;
1539:src/display.c **** 	      v /= b;
1540:src/display.c **** 	      buf[i] = DIGITS[r];
1541:src/display.c **** 	    }
1542:src/display.c **** 	  } else {
1543:src/display.c **** 	    int n;
1544:src/display.c **** 	    const unsigned int b1 = b >> 1;
1545:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1546:src/display.c **** 	    v = (unsigned long long int)vs;
1547:src/display.c **** 
1548:src/display.c **** 	    n = (ws + fac) / (fac+1);
1549:src/display.c **** 	    for (i=0; i<n; i++) {
1550:src/display.c **** 	      const int r = v % b;
1551:src/display.c **** 	      v /= b;
1552:src/display.c **** 	      buf[i] = DIGITS[r];
1553:src/display.c **** 	    }
1554:src/display.c **** 	  }
ARM GAS  /tmp/cc9o0abE.s 			page 33


1555:src/display.c **** 	}
1556:src/display.c **** #ifdef BIGGER_DISPLAY
1557:src/display.c **** #define MAX_INT_Y_DIG 13
1558:src/display.c **** #else
1559:src/display.c **** #define MAX_INT_Y_DIG 7
1560:src/display.c **** #endif
1561:src/display.c **** 	/* At this point i is the number of digits in the output */
1562:src/display.c **** 	int nd = i;
1563:src/display.c **** 	if (res) {
1564:src/display.c **** 	  if (sign) *res++ = '-';
1565:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1566:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1567:src/display.c **** 	      *res++ = buf[i];
1568:src/display.c **** 	    *res++ = '.';
1569:src/display.c **** 	    *res++ = '.';
1570:src/display.c **** 	  }
1571:src/display.c **** 	  else {
1572:src/display.c **** 	    while (--i >= 0)
1573:src/display.c **** 	      *res++ = buf[i];
1574:src/display.c **** 	  }
1575:src/display.c **** 	} else {
1576:src/display.c **** #if 0
1577:src/display.c **** 	  set_separator_decimal_modes();
1578:src/display.c **** 
1579:src/display.c **** 	  // Allows configuration of digit grouping per base
1580:src/display.c **** 	  static const char grouping[] = 
1581:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1582:src/display.c **** 		    //	   2     3     4     5     6     7     8
1583:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1584:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1585:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1586:src/display.c **** 	    : grouping[b - 2] >> 4;
1587:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1588:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1589:src/display.c **** #else
1590:src/display.c **** 	  // Less flexible but shorter
1591:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1592:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1593:src/display.c **** 	    : b == 16 ? 2 : 3;
1594:src/display.c **** 	  set_separator_decimal_modes();
1595:src/display.c **** #endif
1596:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1597:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1598:src/display.c **** 	    State2.window = 0;
1599:src/display.c **** 	  buf[i] = '\0';
1600:src/display.c **** 
1601:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1602:src/display.c **** 	  for (k = 0; k < 12; k++)
1603:src/display.c **** 	    if (buf[j + k] == '\0')
1604:src/display.c **** 	      break;
1605:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1606:src/display.c **** 	    int ch = buf[j++];
1607:src/display.c **** 	    if (i >= shift)
1608:src/display.c **** 	      ch -= 030;
1609:src/display.c **** 	    set_dig(dig, ch);
1610:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1611:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
ARM GAS  /tmp/cc9o0abE.s 			page 34


1612:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1613:src/display.c **** 	  }
1614:src/display.c **** 	  if (sign) {
1615:src/display.c **** 	    if (dig >= 0)
1616:src/display.c **** 	      set_dig(dig, '-');
1617:src/display.c **** 	    else	SET_MANT_SIGN;
1618:src/display.c **** 	  }
1619:src/display.c **** 	}
1620:src/display.c ****       }
1621:src/display.c **** 
1622:src/display.c ****       /* Handle special cases.
1623:src/display.c ****        * return non-zero if the number is special.
1624:src/display.c ****        */
1625:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1626:src/display.c **** 	if (decNumberIsSpecial(x)) {
1627:src/display.c **** 	  if (decNumberIsNaN(x)) {
1628:src/display.c **** 	    if (res) {
1629:src/display.c **** 	      scopy(res, "NaN");
1630:src/display.c **** 	    } else {
1631:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1632:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
1633:src/display.c **** 	      scopy(LastDisplayedNumber, S7_NaN_Text);
1634:src/display.c **** 	      forceDispPlot=0;
1635:src/display.c **** #endif
1636:src/display.c **** 	    }
1637:src/display.c **** 	    return 1;
1638:src/display.c **** 	  } else {
1639:src/display.c **** 	    if (decNumberIsNegative(x)) {
1640:src/display.c **** 	      if (res) *res++ = '-';
1641:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1642:src/display.c **** 	    }
1643:src/display.c **** 	    if (res)
1644:src/display.c **** 	      *res++ = '\237';
1645:src/display.c **** 	    else {
1646:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1647:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
1648:src/display.c **** 	      if (decNumberIsNegative(x)) {
1649:src/display.c **** 		scopy(LastDisplayedNumber, S7_NEG_INF_Text);
1650:src/display.c **** 	      }
1651:src/display.c **** 	      else {
1652:src/display.c **** 		scopy(LastDisplayedNumber, S7_INF_Text);
1653:src/display.c **** 	      }
1654:src/display.c **** 	      forceDispPlot=0;
1655:src/display.c **** #endif
1656:src/display.c **** 	    }
1657:src/display.c **** 	    return 1;
1658:src/display.c **** 	  }
1659:src/display.c **** 	}
1660:src/display.c **** 	return 0;
1661:src/display.c ****       }
1662:src/display.c **** 
1663:src/display.c **** 
1664:src/display.c ****       /* Extract the two lowest integral digits from the number
1665:src/display.c ****        */
1666:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1667:src/display.c **** 	decNumber n;
1668:src/display.c **** 
ARM GAS  /tmp/cc9o0abE.s 			page 35


1669:src/display.c **** 	decNumberMod(&n, x, &const_100);
1670:src/display.c **** 	*v = dn_to_int(&n);
1671:src/display.c **** 	dn_mulpow10(&n, x, -2);
1672:src/display.c **** 	decNumberTrunc(res, &n);
1673:src/display.c ****       }
1674:src/display.c **** 
1675:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 235              		.loc 1 1675 87 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 32
 238              		@ frame_needed = 0, uses_anonymous_args = 0
1676:src/display.c **** 	char b[32];
 239              		.loc 1 1676 2 view .LVU68
1677:src/display.c **** 	int i, j;
 240              		.loc 1 1677 2 view .LVU69
1678:src/display.c **** 
1679:src/display.c **** 	for (i=0; i<n; i++) {
 241              		.loc 1 1679 2 view .LVU70
 242              		.loc 1 1679 12 view .LVU71
1675:src/display.c **** 	char b[32];
 243              		.loc 1 1675 87 is_stmt 0 view .LVU72
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              		.cfi_def_cfa_offset 28
 246              		.cfi_offset 4, -28
 247              		.cfi_offset 5, -24
 248              		.cfi_offset 6, -20
 249              		.cfi_offset 7, -16
 250              		.cfi_offset 8, -12
 251              		.cfi_offset 9, -8
 252              		.cfi_offset 14, -4
1680:src/display.c **** 	  if (v == 0)
1681:src/display.c **** 	    b[i] = spaces?' ':'0';
1682:src/display.c **** 	  else {
1683:src/display.c **** 	    j = v % 10;
 253              		.loc 1 1683 12 view .LVU73
 254 0004 DFF89CE0 		ldr	lr, .L42
1675:src/display.c **** 	char b[32];
 255              		.loc 1 1675 87 view .LVU74
 256 0008 89B0     		sub	sp, sp, #36
 257              		.cfi_def_cfa_offset 64
1675:src/display.c **** 	char b[32];
 258              		.loc 1 1675 87 view .LVU75
 259 000a 1746     		mov	r7, r2
 260 000c EC46     		mov	ip, sp
1679:src/display.c **** 	  if (v == 0)
 261              		.loc 1 1679 8 view .LVU76
 262 000e 0026     		movs	r6, #0
 263              	.LVL13:
 264              	.L30:
1680:src/display.c **** 	  if (v == 0)
 265              		.loc 1 1680 4 is_stmt 1 view .LVU77
 266              		.loc 1 1683 6 view .LVU78
 267              		.loc 1 1683 12 is_stmt 0 view .LVU79
 268 0010 AEFB0024 		umull	r2, r4, lr, r0
 269 0014 E408     		lsrs	r4, r4, #3
 270 0016 04EB8402 		add	r2, r4, r4, lsl #2
 271 001a 2546     		mov	r5, r4
ARM GAS  /tmp/cc9o0abE.s 			page 36


 272 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 273              	.LVL14:
1684:src/display.c **** 	    v /= 10;
 274              		.loc 1 1684 6 is_stmt 1 view .LVU80
1685:src/display.c **** 	    b[i] = j + '0';
 275              		.loc 1 1685 15 is_stmt 0 view .LVU81
 276 0020 3034     		adds	r4, r4, #48
 277              	.LVL15:
1679:src/display.c **** 	  if (v == 0)
 278              		.loc 1 1679 18 view .LVU82
 279 0022 721C     		adds	r2, r6, #1
1680:src/display.c **** 	    b[i] = spaces?' ':'0';
 280              		.loc 1 1680 7 view .LVU83
 281 0024 30B1     		cbz	r0, .L41
1679:src/display.c **** 	  if (v == 0)
 282              		.loc 1 1679 2 view .LVU84
 283 0026 9342     		cmp	r3, r2
 284              		.loc 1 1685 11 view .LVU85
 285 0028 0CF8014B 		strb	r4, [ip], #1
1684:src/display.c **** 	    b[i] = j + '0';
 286              		.loc 1 1684 8 view .LVU86
 287 002c 2846     		mov	r0, r5
 288              	.LVL16:
 289              		.loc 1 1685 6 is_stmt 1 view .LVU87
1679:src/display.c **** 	  if (v == 0)
 290              		.loc 1 1679 17 view .LVU88
1679:src/display.c **** 	  if (v == 0)
 291              		.loc 1 1679 12 view .LVU89
1679:src/display.c **** 	  if (v == 0)
 292              		.loc 1 1679 2 is_stmt 0 view .LVU90
 293 002e 12D0     		beq	.L31
 294 0030 1646     		mov	r6, r2
 295 0032 EDE7     		b	.L30
 296              	.LVL17:
 297              	.L41:
1679:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1679 2 view .LVU91
 299 0034 109A     		ldr	r2, [sp, #64]
 300 0036 002A     		cmp	r2, #0
 301 0038 14BF     		ite	ne
 302 003a 2024     		movne	r4, #32
 303              	.LVL18:
1679:src/display.c **** 	  if (v == 0)
 304              		.loc 1 1679 2 view .LVU92
 305 003c 3024     		moveq	r4, #48
 306 003e 0DEB0600 		add	r0, sp, r6
 307              	.LVL19:
1680:src/display.c **** 	    b[i] = spaces?' ':'0';
 308              		.loc 1 1680 7 view .LVU93
 309 0042 3246     		mov	r2, r6
 310              	.LVL20:
 311              	.L28:
1681:src/display.c **** 	  else {
 312              		.loc 1 1681 6 is_stmt 1 view .LVU94
1679:src/display.c **** 	  if (v == 0)
 313              		.loc 1 1679 18 is_stmt 0 view .LVU95
 314 0044 0132     		adds	r2, r2, #1
ARM GAS  /tmp/cc9o0abE.s 			page 37


 315              	.LVL21:
1679:src/display.c **** 	  if (v == 0)
 316              		.loc 1 1679 2 view .LVU96
 317 0046 9342     		cmp	r3, r2
1681:src/display.c **** 	  else {
 318              		.loc 1 1681 11 view .LVU97
 319 0048 00F8014B 		strb	r4, [r0], #1
 320              	.LVL22:
1679:src/display.c **** 	  if (v == 0)
 321              		.loc 1 1679 17 is_stmt 1 view .LVU98
1679:src/display.c **** 	  if (v == 0)
 322              		.loc 1 1679 12 view .LVU99
1679:src/display.c **** 	  if (v == 0)
 323              		.loc 1 1679 2 is_stmt 0 view .LVU100
 324 004c FADC     		bgt	.L28
 325 004e 5A1E     		subs	r2, r3, #1
 326              	.LVL23:
1679:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1679 2 view .LVU101
 328 0050 B342     		cmp	r3, r6
 329 0052 C8BF     		it	gt
 330 0054 1646     		movgt	r6, r2
 331              	.LVL24:
 332              	.L31:
1686:src/display.c **** 	  }
1687:src/display.c **** 	}
1688:src/display.c **** 	if (b[0] == ' ')
 333              		.loc 1 1688 2 is_stmt 1 view .LVU102
 334              		.loc 1 1688 5 is_stmt 0 view .LVU103
 335 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 336              	.LVL25:
1689:src/display.c **** 	  b[0] = '0';
1690:src/display.c **** 
1691:src/display.c **** 	/* Copy across and appropriately leading space things
1692:src/display.c **** 	 */
1693:src/display.c **** 	j = *jin;
 337              		.loc 1 1693 4 view .LVU104
 338 005a D7F80090 		ldr	r9, [r7]
1688:src/display.c **** 	  b[0] = '0';
 339              		.loc 1 1688 5 view .LVU105
 340 005e 202B     		cmp	r3, #32
1689:src/display.c **** 	  b[0] = '0';
 341              		.loc 1 1689 4 is_stmt 1 view .LVU106
1689:src/display.c **** 	  b[0] = '0';
 342              		.loc 1 1689 9 is_stmt 0 view .LVU107
 343 0060 04BF     		itt	eq
 344 0062 3023     		moveq	r3, #48
 345 0064 8DF80030 		strbeq	r3, [sp]
 346              		.loc 1 1693 2 is_stmt 1 view .LVU108
 347              	.LVL26:
1694:src/display.c **** 	while (--i >= 0) {
 348              		.loc 1 1694 2 view .LVU109
 349              		.loc 1 1694 8 view .LVU110
1693:src/display.c **** 	while (--i >= 0) {
 350              		.loc 1 1693 4 is_stmt 0 view .LVU111
 351 0068 0D46     		mov	r5, r1
 352 006a C846     		mov	r8, r9
ARM GAS  /tmp/cc9o0abE.s 			page 38


 353              		.loc 1 1694 8 view .LVU112
 354 006c 3446     		mov	r4, r6
 355              	.LVL27:
 356              	.L35:
1695:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 357              		.loc 1 1695 4 is_stmt 1 view .LVU113
 358              	.LBB166:
 359              	.LBB167:
 416:src/display.c ****   else	set_dig(base, ch);
 360              		.loc 1 416 12 view .LVU114
 361              	.LBE167:
 362              	.LBE166:
 363              		.loc 1 1695 24 is_stmt 0 view .LVU115
 364 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 365              	.LBB171:
 366              	.LBB168:
 416:src/display.c ****   else	set_dig(base, ch);
 367              		.loc 1 416 16 view .LVU116
 368 0072 2B46     		mov	r3, r5
 369              	.LVL28:
 416:src/display.c ****   else	set_dig(base, ch);
 370              		.loc 1 416 16 view .LVU117
 371              	.LBE168:
 372              	.LBI166:
 415:src/display.c ****   if (res) *res++ = ch;
 373              		.loc 1 415 14 is_stmt 1 view .LVU118
 374              	.LBB169:
 416:src/display.c ****   else	set_dig(base, ch);
 375              		.loc 1 416 3 view .LVU119
 416:src/display.c ****   else	set_dig(base, ch);
 376              		.loc 1 416 6 is_stmt 0 view .LVU120
 377 0074 95B1     		cbz	r5, .L33
 378              	.LVL29:
 416:src/display.c ****   else	set_dig(base, ch);
 379              		.loc 1 416 19 view .LVU121
 380 0076 03F8011B 		strb	r1, [r3], #1
 381              	.LVL30:
 416:src/display.c ****   else	set_dig(base, ch);
 382              		.loc 1 416 16 view .LVU122
 383 007a 1D46     		mov	r5, r3
 384              	.LVL31:
 385              	.L34:
 418:src/display.c **** }
 386              		.loc 1 418 3 is_stmt 1 view .LVU123
 418:src/display.c **** }
 387              		.loc 1 418 3 is_stmt 0 view .LVU124
 388              	.LBE169:
 389              	.LBE171:
1696:src/display.c **** 	  j += SEGS_PER_DIGIT;
 390              		.loc 1 1696 4 is_stmt 1 view .LVU125
1694:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 391              		.loc 1 1694 8 is_stmt 0 view .LVU126
 392 007c 013C     		subs	r4, r4, #1
 393              	.LVL32:
 394              		.loc 1 1696 6 view .LVU127
 395 007e 08F10908 		add	r8, r8, #9
 396              	.LVL33:
ARM GAS  /tmp/cc9o0abE.s 			page 39


1694:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 397              		.loc 1 1694 8 is_stmt 1 view .LVU128
 398 0082 F4D5     		bpl	.L35
1697:src/display.c **** 	}
1698:src/display.c **** 	*jin = j;
 399              		.loc 1 1698 7 is_stmt 0 view .LVU129
 400 0084 26EAE676 		bic	r6, r6, r6, asr #31
 401 0088 09F10909 		add	r9, r9, #9
 402              		.loc 1 1698 2 is_stmt 1 view .LVU130
 403              		.loc 1 1698 7 is_stmt 0 view .LVU131
 404 008c 06EBC606 		add	r6, r6, r6, lsl #3
 405 0090 4E44     		add	r6, r6, r9
1699:src/display.c **** 	return str;
1700:src/display.c ****       }
 406              		.loc 1 1700 7 view .LVU132
 407 0092 2846     		mov	r0, r5
1698:src/display.c **** 	return str;
 408              		.loc 1 1698 7 view .LVU133
 409 0094 3E60     		str	r6, [r7]
1699:src/display.c **** 	return str;
 410              		.loc 1 1699 2 is_stmt 1 view .LVU134
 411              		.loc 1 1700 7 is_stmt 0 view .LVU135
 412 0096 09B0     		add	sp, sp, #36
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.LVL34:
 418              	.L33:
 419              		.cfi_restore_state
 420              	.LBB172:
 421              	.LBB170:
 417:src/display.c ****   return res;
 422              		.loc 1 417 8 is_stmt 1 view .LVU136
 423 009c 4046     		mov	r0, r8
 424 009e FFF7FEFF 		bl	set_dig
 425              	.LVL35:
 417:src/display.c ****   return res;
 426              		.loc 1 417 8 is_stmt 0 view .LVU137
 427 00a2 EBE7     		b	.L34
 428              	.L43:
 429              		.align	2
 430              	.L42:
 431 00a4 CDCCCCCC 		.word	-858993459
 432              	.LBE170:
 433              	.LBE172:
 434              		.cfi_endproc
 435              	.LFE17:
 437              		.section	.text.set_exp_digits_string,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	set_exp_digits_string:
 446              	.LVL36:
ARM GAS  /tmp/cc9o0abE.s 			page 40


 447              	.LFB9:
 433:src/display.c ****   int i;
 448              		.loc 1 433 63 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 434:src/display.c ****   const int n = res == NULL ? 3 : 4;
 452              		.loc 1 434 3 view .LVU139
 435:src/display.c **** 
 453              		.loc 1 435 3 view .LVU140
 433:src/display.c ****   int i;
 454              		.loc 1 433 63 is_stmt 0 view .LVU141
 455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 456              		.cfi_def_cfa_offset 24
 457              		.cfi_offset 3, -24
 458              		.cfi_offset 4, -20
 459              		.cfi_offset 5, -16
 460              		.cfi_offset 6, -12
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 435:src/display.c **** 
 463              		.loc 1 435 33 view .LVU142
 464 0002 0D1E     		subs	r5, r1, #0
 465 0004 0CBF     		ite	eq
 466 0006 0326     		moveq	r6, #3
 467 0008 0426     		movne	r6, #4
 468              	.LVL37:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 469              		.loc 1 437 3 is_stmt 1 view .LVU143
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 470              		.loc 1 437 13 view .LVU144
 471 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 472 000e 0446     		mov	r4, r0
 473 0010 0644     		add	r6, r6, r0
 474              	.LVL38:
 475              	.LBB173:
 476              	.LBB174:
 417:src/display.c ****   return res;
 477              		.loc 1 417 8 is_stmt 0 view .LVU145
 478 0012 03F16507 		add	r7, r3, #101
 479 0016 04E0     		b	.L46
 480              	.LVL39:
 481              	.L54:
 416:src/display.c ****   else	set_dig(base, ch);
 482              		.loc 1 416 19 view .LVU146
 483 0018 03F8011B 		strb	r1, [r3], #1
 484              	.LVL40:
 416:src/display.c ****   else	set_dig(base, ch);
 485              		.loc 1 416 19 view .LVU147
 486              	.LBE174:
 487              	.LBE173:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 488              		.loc 1 437 3 view .LVU148
 489 001c B442     		cmp	r4, r6
 490              	.LBB180:
 491              	.LBB175:
 416:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/cc9o0abE.s 			page 41


 492              		.loc 1 416 16 view .LVU149
 493 001e 1D46     		mov	r5, r3
 494              	.LVL41:
 418:src/display.c **** }
 495              		.loc 1 418 3 is_stmt 1 view .LVU150
 418:src/display.c **** }
 496              		.loc 1 418 3 is_stmt 0 view .LVU151
 497              	.LBE175:
 498              	.LBE180:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 499              		.loc 1 437 36 is_stmt 1 view .LVU152
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 500              		.loc 1 437 13 view .LVU153
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 501              		.loc 1 437 3 is_stmt 0 view .LVU154
 502 0020 0CD0     		beq	.L44
 503              	.LVL42:
 504              	.L46:
 438:src/display.c **** }
 505              		.loc 1 438 5 is_stmt 1 discriminator 3 view .LVU155
 506              	.LBB181:
 507              	.LBB176:
 416:src/display.c ****   else	set_dig(base, ch);
 508              		.loc 1 416 12 discriminator 3 view .LVU156
 416:src/display.c ****   else	set_dig(base, ch);
 509              		.loc 1 416 12 is_stmt 0 discriminator 3 view .LVU157
 510              	.LBE176:
 511              	.LBE181:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 512              		.loc 1 437 23 discriminator 3 view .LVU158
 513 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 514              	.LVL43:
 515              	.LBB182:
 516              	.LBB177:
 416:src/display.c ****   else	set_dig(base, ch);
 517              		.loc 1 416 16 discriminator 3 view .LVU159
 518 0026 2B46     		mov	r3, r5
 519              	.LVL44:
 416:src/display.c ****   else	set_dig(base, ch);
 520              		.loc 1 416 16 discriminator 3 view .LVU160
 521              	.LBE177:
 522              	.LBI173:
 415:src/display.c ****   if (res) *res++ = ch;
 523              		.loc 1 415 14 is_stmt 1 discriminator 3 view .LVU161
 524              	.LBB178:
 416:src/display.c ****   else	set_dig(base, ch);
 525              		.loc 1 416 3 discriminator 3 view .LVU162
 526              	.LBE178:
 527              	.LBE182:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 528              		.loc 1 437 17 is_stmt 0 discriminator 3 view .LVU163
 529 0028 41B1     		cbz	r1, .L44
 530              	.LVL45:
 531              	.LBB183:
 532              	.LBB179:
 416:src/display.c ****   else	set_dig(base, ch);
 533              		.loc 1 416 6 discriminator 4 view .LVU164
ARM GAS  /tmp/cc9o0abE.s 			page 42


 534 002a 002D     		cmp	r5, #0
 535 002c F4D1     		bne	.L54
 417:src/display.c ****   return res;
 536              		.loc 1 417 8 is_stmt 1 view .LVU165
 537 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 538 0032 3844     		add	r0, r0, r7
 539 0034 FFF7FEFF 		bl	set_dig
 540              	.LVL46:
 418:src/display.c **** }
 541              		.loc 1 418 3 view .LVU166
 418:src/display.c **** }
 542              		.loc 1 418 3 is_stmt 0 view .LVU167
 543              	.LBE179:
 544              	.LBE183:
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 545              		.loc 1 437 36 is_stmt 1 view .LVU168
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 546              		.loc 1 437 13 view .LVU169
 437:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 547              		.loc 1 437 3 is_stmt 0 view .LVU170
 548 0038 B442     		cmp	r4, r6
 549 003a F2D1     		bne	.L46
 550              	.LVL47:
 551              	.L44:
 439:src/display.c **** 
 552              		.loc 1 439 1 view .LVU171
 553 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 439:src/display.c **** 
 554              		.loc 1 439 1 view .LVU172
 555              		.cfi_endproc
 556              	.LFE9:
 558 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 559              		.align	1
 560              		.p2align 2,,3
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	hms_step:
 567              	.LVL48:
 568              	.LFB16:
1666:src/display.c **** 	decNumber n;
 569              		.loc 1 1666 75 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 40
 572              		@ frame_needed = 0, uses_anonymous_args = 0
1667:src/display.c **** 
 573              		.loc 1 1667 2 view .LVU174
1669:src/display.c **** 	*v = dn_to_int(&n);
 574              		.loc 1 1669 2 view .LVU175
1666:src/display.c **** 	decNumber n;
 575              		.loc 1 1666 75 is_stmt 0 view .LVU176
 576 0000 70B5     		push	{r4, r5, r6, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
ARM GAS  /tmp/cc9o0abE.s 			page 43


 581              		.cfi_offset 14, -4
 582 0002 8AB0     		sub	sp, sp, #40
 583              		.cfi_def_cfa_offset 56
1666:src/display.c **** 	decNumber n;
 584              		.loc 1 1666 75 view .LVU177
 585 0004 0446     		mov	r4, r0
 586 0006 1646     		mov	r6, r2
1669:src/display.c **** 	*v = dn_to_int(&n);
 587              		.loc 1 1669 2 view .LVU178
 588 0008 01A8     		add	r0, sp, #4
 589              	.LVL49:
1669:src/display.c **** 	*v = dn_to_int(&n);
 590              		.loc 1 1669 2 view .LVU179
 591 000a 0A4A     		ldr	r2, .L57
 592              	.LVL50:
1666:src/display.c **** 	decNumber n;
 593              		.loc 1 1666 75 view .LVU180
 594 000c 0D46     		mov	r5, r1
1669:src/display.c **** 	*v = dn_to_int(&n);
 595              		.loc 1 1669 2 view .LVU181
 596 000e FFF7FEFF 		bl	decNumberMod
 597              	.LVL51:
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 598              		.loc 1 1670 2 is_stmt 1 view .LVU182
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 599              		.loc 1 1670 7 is_stmt 0 view .LVU183
 600 0012 01A8     		add	r0, sp, #4
 601 0014 FFF7FEFF 		bl	dn_to_int
 602              	.LVL52:
1671:src/display.c **** 	decNumberTrunc(res, &n);
 603              		.loc 1 1671 2 view .LVU184
 604 0018 2946     		mov	r1, r5
1670:src/display.c **** 	dn_mulpow10(&n, x, -2);
 605              		.loc 1 1670 5 view .LVU185
 606 001a 3060     		str	r0, [r6]
1671:src/display.c **** 	decNumberTrunc(res, &n);
 607              		.loc 1 1671 2 is_stmt 1 view .LVU186
 608 001c 6FF00102 		mvn	r2, #1
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	dn_mulpow10
 611              	.LVL53:
1672:src/display.c ****       }
 612              		.loc 1 1672 2 view .LVU187
 613 0026 01A9     		add	r1, sp, #4
 614 0028 2046     		mov	r0, r4
 615 002a FFF7FEFF 		bl	decNumberTrunc
 616              	.LVL54:
1673:src/display.c **** 
 617              		.loc 1 1673 7 is_stmt 0 view .LVU188
 618 002e 0AB0     		add	sp, sp, #40
 619              		.cfi_def_cfa_offset 16
 620              		@ sp needed
 621 0030 70BD     		pop	{r4, r5, r6, pc}
 622              	.LVL55:
 623              	.L58:
1673:src/display.c **** 
 624              		.loc 1 1673 7 view .LVU189
ARM GAS  /tmp/cc9o0abE.s 			page 44


 625 0032 00BF     		.align	2
 626              	.L57:
 627 0034 00000000 		.word	const_100
 628              		.cfi_endproc
 629              	.LFE16:
 631              		.section	.text.s_s_sized,"ax",%progbits
 632              		.align	1
 633              		.p2align 2,,3
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	s_s_sized:
 640              	.LVL56:
 641              	.LFB35:
1701:src/display.c **** 
1702:src/display.c **** 
1703:src/display.c ****       /* Display the number in H.MS mode.
1704:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1705:src/display.c ****        */
1706:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
1707:src/display.c **** 	decNumber x, y, a, t, u;
1708:src/display.c **** 	int j=0;
1709:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1710:src/display.c **** 	unsigned int hr, min, sec, fs;
1711:src/display.c **** 
1712:src/display.c **** 	if (check_special_dn(rgx, res)) {
1713:src/display.c **** 	  if (decNumberIsInfinite(rgx))
1714:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
1715:src/display.c **** 	  return;
1716:src/display.c **** 	}
1717:src/display.c **** 
1718:src/display.c **** 	set_separator_decimal_modes();
1719:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1720:src/display.c **** 	dn_abs(&a, rgx);
1721:src/display.c **** 	if (decNumberIsNegative(&x)) {
1722:src/display.c **** 	  if (res != NULL)
1723:src/display.c **** 	    *res++ += '-';
1724:src/display.c **** 	  else
1725:src/display.c **** 	    SET_MANT_SIGN;
1726:src/display.c **** 	  dn_minus(&x, &x);
1727:src/display.c **** 	}
1728:src/display.c **** 
1729:src/display.c **** 	decNumberHR2HMS(&y, &x);
1730:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1731:src/display.c **** 	decNumberRound(&u, &t);
1732:src/display.c **** 
1733:src/display.c **** 	hms_step(&t, &u, &fs);
1734:src/display.c **** 	hms_step(&u, &t, &sec);
1735:src/display.c **** 	hms_step(&t, &u, &min);
1736:src/display.c **** 	hr = dn_to_int(&t);
1737:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1738:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1739:src/display.c **** 
1740:src/display.c **** 	// degrees
1741:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1742:src/display.c **** 	res = set_dig_s(j, '@', res);
ARM GAS  /tmp/cc9o0abE.s 			page 45


1743:src/display.c **** 	j += SEGS_PER_DIGIT;
1744:src/display.c **** 
1745:src/display.c **** 	// minutes
1746:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1747:src/display.c **** 	res = set_dig_s(j, '\'', res);
1748:src/display.c **** 	j += SEGS_PER_DIGIT;
1749:src/display.c **** 
1750:src/display.c **** 	// seconds
1751:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1752:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1753:src/display.c **** 
1754:src/display.c **** 	// Fractional seconds
1755:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1756:src/display.c **** 
1757:src/display.c **** 	// We're now pointing at the exponent's first digit...
1758:src/display.c **** 	res = set_dig_s(j, '"', res);
1759:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1760:src/display.c **** 
1761:src/display.c **** 	// Check for values too big or small
1762:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1763:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1764:src/display.c **** 	} else if (! dn_eq0(&a)) {
1765:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1766:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1767:src/display.c **** 	  }
1768:src/display.c **** 	}
1769:src/display.c ****       }
1770:src/display.c **** 
1771:src/display.c **** 
1772:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
1773:src/display.c **** 	decNumber x, w, n, d, t;
1774:src/display.c **** 	char buf[32], *p = buf;
1775:src/display.c **** 	int j;
1776:src/display.c **** 
1777:src/display.c **** 	if (check_special_dn(rgx, res))
1778:src/display.c **** 	  return 1;
1779:src/display.c **** 	dn_abs(&x, rgx);
1780:src/display.c **** 	if (dn_ge(&x, &const_100000))
1781:src/display.c **** 	  return 0;
1782:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1783:src/display.c **** 	  return 0;
1784:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1785:src/display.c **** 	  if (res != NULL)
1786:src/display.c **** 	    *res++ += '-';
1787:src/display.c **** 	  else
1788:src/display.c **** 	    SET_MANT_SIGN;
1789:src/display.c **** 	}
1790:src/display.c **** 	decNumberFrac(&w, &x);
1791:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1792:src/display.c **** 
1793:src/display.c **** 	dn_divide(&t, &n, &d);
1794:src/display.c **** 	dn_compare(&t, &t, &w);
1795:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1796:src/display.c **** 
1797:src/display.c **** 	if (dn_eq(&n, &d)) {
1798:src/display.c **** 	  dn_inc(&w);
1799:src/display.c **** 	  decNumberZero(&n);
ARM GAS  /tmp/cc9o0abE.s 			page 46


1800:src/display.c **** 	}
1801:src/display.c **** 
1802:src/display.c **** 	if (!UState.improperfrac) {
1803:src/display.c **** 	  if (!dn_eq0(&w)) {
1804:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1805:src/display.c **** 	    *p++ = ' ';
1806:src/display.c **** 	  }
1807:src/display.c **** 	} else {
1808:src/display.c **** 	  dn_multiply(&x, &w, &d);
1809:src/display.c **** 	  dn_add(&n, &n, &x);
1810:src/display.c **** 	}
1811:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1812:src/display.c **** 	*p++ = '/';
1813:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1814:src/display.c **** 	*p = '\0';
1815:src/display.c **** 	if ((p - 12) > buf) {
1816:src/display.c **** 	  p -= 12;
1817:src/display.c **** 	  *p = '<';
1818:src/display.c **** 	} else	p = buf;
1819:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1820:src/display.c **** 	  res = set_dig_s(j, *p, res);
1821:src/display.c **** 	  j += SEGS_PER_DIGIT;
1822:src/display.c **** 	}
1823:src/display.c **** 
1824:src/display.c **** 	if (dn_eq0(&t))
1825:src/display.c **** 	  p = (char *)S7_fract_EQ;
1826:src/display.c **** 	else if (decNumberIsNegative(&t))
1827:src/display.c **** 	  p = (char *)S7_fract_LT;
1828:src/display.c **** 	else
1829:src/display.c **** 	  p = (char *)S7_fract_GT;
1830:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1831:src/display.c **** 	  res = set_dig_s(j, *p, res);
1832:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1833:src/display.c **** 	}
1834:src/display.c **** 	return 1;
1835:src/display.c ****       }
1836:src/display.c **** 
1837:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1838:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1839:src/display.c **** 	decNumber c;
1840:src/display.c **** 	int true_exp, x=0;
1841:src/display.c **** 	int min_pos_exp, max_neg_exp;
1842:src/display.c **** 
1843:src/display.c **** 	if ( mode != MODE_STD ) {
1844:src/display.c **** 	  min_pos_exp = 9;
1845:src/display.c **** 	  max_neg_exp = -5;
1846:src/display.c **** 	}
1847:src/display.c **** 	else {
1848:src/display.c **** 	  min_pos_exp = 12;
1849:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1850:src/display.c **** 	}
1851:src/display.c **** 
1852:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1853:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1854:src/display.c **** 
1855:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1856:src/display.c **** 	  x = *dd;
ARM GAS  /tmp/cc9o0abE.s 			page 47


1857:src/display.c **** 	}
1858:src/display.c **** 
1859:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1860:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1861:src/display.c **** 	  *dd += -true_exp;
1862:src/display.c **** 	  return MODE_FIX;
1863:src/display.c **** 	}
1864:src/display.c **** 
1865:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1866:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1867:src/display.c **** 	}
1868:src/display.c **** 	else {
1869:src/display.c **** 	  return MODE_STD;
1870:src/display.c **** 	}
1871:src/display.c ****       }
1872:src/display.c **** #else
1873:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1874:src/display.c **** 	decNumber b, c;
1875:src/display.c **** 
1876:src/display.c **** 	dn_1(&b);
1877:src/display.c **** 	b.exponent -= UState.dispdigs;
1878:src/display.c **** 	dn_abs(&c, z);
1879:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1880:src/display.c **** 	  return MODE_FIX;
1881:src/display.c **** 	return MODE_STD;
1882:src/display.c ****       }
1883:src/display.c **** #endif
1884:src/display.c **** 
1885:src/display.c ****       /* SHOW display mode
1886:src/display.c ****        * in double precision show left or right part
1887:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1888:src/display.c ****        */
1889:src/display.c ****       static void show_x(char *x, int exp) {
1890:src/display.c **** 	const int dbl = is_dblmode();
1891:src/display.c **** 	char *p;
1892:src/display.c **** 	int i, j;
1893:src/display.c **** 	char *upper_str;
1894:src/display.c **** 	enum separator_modes separator_mode;
1895:src/display.c **** 	char decimal_mark;
1896:src/display.c **** 	char thousands_sep;
1897:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1898:src/display.c **** 	const int grouping = 0;
1899:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1900:src/display.c **** 	const int grouping = !UState.nothousands;
1901:src/display.c **** #else
1902:src/display.c **** 	const int grouping = 1;
1903:src/display.c **** #endif
1904:src/display.c **** 	int negative;
1905:src/display.c **** 
1906:src/display.c **** 	if (x[0] == '-') {
1907:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1908:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1909:src/display.c **** 
1910:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1911:src/display.c **** 	  xcopy(x, small_minus, 4);
1912:src/display.c **** 	  x += 4;
1913:src/display.c **** 	  negative = 4;
ARM GAS  /tmp/cc9o0abE.s 			page 48


1914:src/display.c **** #else
1915:src/display.c **** 	  ++x;
1916:src/display.c **** 	  negative = 1;
1917:src/display.c **** #endif
1918:src/display.c **** 	}
1919:src/display.c **** 	else negative = 0;
1920:src/display.c **** 
1921:src/display.c **** 	p = find_char(x, '\0');
1922:src/display.c **** 	xset(p, '0', 34 - (p - x));
1923:src/display.c **** 
1924:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1925:src/display.c **** 	  separator_mode = SEP_COMMA;
1926:src/display.c **** 	  decimal_mark = '.';
1927:src/display.c **** 	  thousands_sep = ',';
1928:src/display.c **** 	}
1929:src/display.c **** 	else {
1930:src/display.c **** 	  separator_mode = SEP_DOT;
1931:src/display.c **** 	  decimal_mark = ',';
1932:src/display.c **** 	  thousands_sep = '.';
1933:src/display.c **** 	}
1934:src/display.c **** 
1935:src/display.c **** 	if (State2.window) { // right half in double precision mode
1936:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1937:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1938:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1939:src/display.c **** 
1940:src/display.c **** 	  upper_str = x + 3;
1941:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1942:src/display.c **** 	  if (grouping) {
1943:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
1944:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1945:src/display.c **** 	    x += 3 + 13 + 7;
1946:src/display.c **** 	  }
1947:src/display.c **** 	  else x += 3 + 13 + 6;
1948:src/display.c **** #else
1949:src/display.c **** 	  upper_str = x + 13;
1950:src/display.c **** 	  xset(upper_str, '.', 3);
1951:src/display.c **** 	  if (grouping) {
1952:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1953:src/display.c **** 	    upper_str[6] = thousands_sep;
1954:src/display.c **** 	    x += 13 + 3 + 7;
1955:src/display.c **** 	  }
1956:src/display.c **** 	  else x += 13 + 3 + 6;
1957:src/display.c **** #endif
1958:src/display.c **** 	  negative = 0;
1959:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1960:src/display.c **** 	}
1961:src/display.c **** 	else {
1962:src/display.c **** 	  upper_str = x;
1963:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1964:src/display.c **** 	  x[1] = decimal_mark;
1965:src/display.c **** 	  if (grouping) {
1966:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1967:src/display.c **** 	    x[5] = thousands_sep;
1968:src/display.c **** 	    x += 9;
1969:src/display.c **** 	  }
1970:src/display.c **** 	  else x += 8;
ARM GAS  /tmp/cc9o0abE.s 			page 49


1971:src/display.c **** 	  if (dbl) {
1972:src/display.c **** 	    if (exp < 0) {
1973:src/display.c **** 	      x[9] = '-';
1974:src/display.c **** 	      exp = -exp;
1975:src/display.c **** 	    }
1976:src/display.c **** 	    else
1977:src/display.c **** 	      x[9] = ' ';
1978:src/display.c **** 	    j = exp / 1000;
1979:src/display.c **** 	    x[10] = '0' + j;
1980:src/display.c **** 	    exp -= 1000 * j;
1981:src/display.c **** 	  }
1982:src/display.c **** 	  else {
1983:src/display.c **** 	    x[9] = '\0';
1984:src/display.c **** 	    x[10] = '\0';
1985:src/display.c **** 	  }
1986:src/display.c **** 	  xcopy(x + 1, x, 11);
1987:src/display.c **** 	  *x = 0;
1988:src/display.c **** 	  set_exp(exp, 1, CNULL);
1989:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1990:src/display.c **** 	}
1991:src/display.c **** 	if (grouping) {
1992:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1993:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1994:src/display.c **** 	  }
1995:src/display.c **** 	}
1996:src/display.c **** 
1997:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1998:src/display.c **** 	  set_dig(j, x[i]);
1999:src/display.c **** 
2000:src/display.c **** 	*x = '\0';
2001:src/display.c **** 	set_status(upper_str - negative);
2002:src/display.c ****       }
2003:src/display.c **** 
2004:src/display.c **** 
2005:src/display.c ****       /* Display the X register in the numeric portion of the display.
2006:src/display.c ****        * We have to account for the various display modes and numbers of
2007:src/display.c ****        * digits.
2008:src/display.c ****        */
2009:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
2010:src/display.c **** 	decNumber z;
2011:src/display.c **** 	int digits = DISPLAY_DIGITS;
2012:src/display.c **** 
2013:src/display.c **** 	if (dbl)
2014:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
2015:src/display.c **** 	else
2016:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
2017:src/display.c **** 	set_x_dn(&z, res, &digits);
2018:src/display.c ****       }
2019:src/display.c **** 
2020:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
2021:src/display.c **** 	char x[50], *obp = x;
2022:src/display.c **** 	int odig = 0;
2023:src/display.c **** 	int show_exp = 0;
2024:src/display.c **** 	int j;
2025:src/display.c **** 	char mantissa[64];
2026:src/display.c **** 	int exp = 0;
2027:src/display.c **** 	char *p = mantissa;
ARM GAS  /tmp/cc9o0abE.s 			page 50


2028:src/display.c **** 	char *r;
2029:src/display.c **** 	const char *q;
2030:src/display.c **** 	int count, i;
2031:src/display.c **** 	int extra_digits = 0;
2032:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2033:src/display.c **** 	int dd;
2034:src/display.c **** 	int dispdigs;
2035:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
2036:src/display.c **** #else
2037:src/display.c **** 	int dd = UState.dispdigs;
2038:src/display.c **** 	int mode = UState.dispmode;
2039:src/display.c **** #endif
2040:src/display.c **** 	int c;
2041:src/display.c **** 	int negative = 0;
2042:src/display.c **** 	int trimzeros = 0;
2043:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
2044:src/display.c **** 	const int show_large_exponent = 0;
2045:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
2046:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
2047:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
2048:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
2049:src/display.c **** #else
2050:src/display.c **** 	const int show_large_exponent = 1;
2051:src/display.c **** #endif
2052:src/display.c **** 
2053:src/display.c **** 	set_separator_decimal_modes();
2054:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2055:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
2056:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
2057:src/display.c **** 	    if (State2.hms) {
2058:src/display.c **** 	      set_x_hms(z, res);
2059:src/display.c **** 	      return;
2060:src/display.c **** 	    }
2061:src/display.c **** 	    else if (UState.fract) {
2062:src/display.c **** 	      if (set_x_fract(z, res))
2063:src/display.c **** 		return;
2064:src/display.c **** 	    }
2065:src/display.c **** 	  }
2066:src/display.c **** 	}		
2067:src/display.c **** #else
2068:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
2069:src/display.c **** 	  if (State2.hms) {
2070:src/display.c **** 	    set_x_hms(z, res);
2071:src/display.c **** 	    State2.hms = 0;
2072:src/display.c **** 	    return;
2073:src/display.c **** 	  } else if (UState.fract) {
2074:src/display.c **** 	    if (set_x_fract(z, res))
2075:src/display.c **** 	      return;
2076:src/display.c **** 	  }
2077:src/display.c **** 	}
2078:src/display.c **** #endif
2079:src/display.c **** 
2080:src/display.c **** 	if (check_special_dn(z, res))
2081:src/display.c **** 	  return;
2082:src/display.c **** 
2083:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2084:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
ARM GAS  /tmp/cc9o0abE.s 			page 51


2085:src/display.c **** 	  exp = z->exponent + z->digits - 1;
2086:src/display.c **** 	  z->exponent = 0;
2087:src/display.c **** 	}
2088:src/display.c **** 
2089:src/display.c **** 	xset(x, '\0', sizeof(x));
2090:src/display.c **** 
2091:src/display.c **** 	if (dn_eq0(z)) {
2092:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
2093:src/display.c **** 	    x[0] = '-';
2094:src/display.c **** 	    x[1] = '0';
2095:src/display.c **** 	  } else
2096:src/display.c **** 	    x[0] = '0';
2097:src/display.c **** 	} else
2098:src/display.c **** 	  decNumberToString(z, x);
2099:src/display.c **** 
2100:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2101:src/display.c **** 	  show_x(x, exp);
2102:src/display.c **** 	  return;
2103:src/display.c **** 	}
2104:src/display.c **** 
2105:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2106:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2107:src/display.c **** 	  //  ALL mode: fill the display
2108:src/display.c **** 	  dd = *display_digits - 1;
2109:src/display.c **** 	else
2110:src/display.c **** 	  dd = dispdigs;
2111:src/display.c **** 
2112:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2113:src/display.c **** 	  int orig_mode = mode;
2114:src/display.c **** 
2115:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2116:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2117:src/display.c **** 	    // allow zeros to be trimmed
2118:src/display.c **** 	    trimzeros = 1;
2119:src/display.c **** 	  if (orig_mode == MODE_STD)
2120:src/display.c **** 	    dd = *display_digits - 1;
2121:src/display.c ****  	}
2122:src/display.c **** #else
2123:src/display.c **** 	if (mode == MODE_STD) {
2124:src/display.c **** 	  mode = std_round_fix(z);
2125:src/display.c **** 	  trimzeros = 1;
2126:src/display.c **** 	  dd = *display_digits - 1;
2127:src/display.c **** 	} else if (dd >= *display_digits)
2128:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2129:src/display.c **** 	  dd = *display_digits - 1;
2130:src/display.c **** #endif
2131:src/display.c **** 
2132:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2133:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2134:src/display.c **** 
2135:src/display.c **** 	q = find_char(x, 'E');
2136:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2137:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2138:src/display.c **** 	if (q == NULL) exp = 0;
2139:src/display.c **** 	else {
2140:src/display.c **** 	  exp = s_to_i(q+1);
2141:src/display.c **** 	  if (*q == 'D') exp = -exp;
ARM GAS  /tmp/cc9o0abE.s 			page 52


2142:src/display.c **** 	}
2143:src/display.c **** #else
2144:src/display.c **** 	if (q == NULL) exp = 0;
2145:src/display.c **** 	else exp = s_to_i(q+1);
2146:src/display.c **** #endif
2147:src/display.c **** 
2148:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2149:src/display.c **** 	for (q=x; *q == ' '; q++);
2150:src/display.c **** 	if (!res) {
2151:src/display.c **** 	  CLR_EXP_SIGN;
2152:src/display.c **** 	  CLR_MANT_SIGN;
2153:src/display.c **** 	}
2154:src/display.c **** 	if (*q == '-') {
2155:src/display.c **** 	  negative = 1;
2156:src/display.c **** 	  q++;
2157:src/display.c **** 	} else if (*q == '+')
2158:src/display.c **** 	  q++;
2159:src/display.c **** 	for (; *q == '0'; q++);
2160:src/display.c **** 	if (*q == '.') {
2161:src/display.c **** 	  do
2162:src/display.c **** 	    exp--;
2163:src/display.c **** 	  while (*++q == '0');
2164:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2165:src/display.c **** 	    *p++ = *q++;
2166:src/display.c **** 	} else {
2167:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2168:src/display.c **** 	    *p++ = *q++;
2169:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2170:src/display.c **** 	    *p++ = *q++;
2171:src/display.c **** 	    exp++;
2172:src/display.c **** 	  }
2173:src/display.c **** 	  if (*q == '.') {
2174:src/display.c **** 	    q++;
2175:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2176:src/display.c **** 	      *p++ = *q++;
2177:src/display.c **** 	  }
2178:src/display.c **** 	}
2179:src/display.c **** 
2180:src/display.c **** 	if (mode == MODE_FIX) {
2181:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2182:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2183:src/display.c **** 	  else {
2184:src/display.c **** 	    extra_digits = exp;
2185:src/display.c **** 	    /* We might have push the fixed decimals off the
2186:src/display.c **** 	     * screen so adjust if so.
2187:src/display.c **** 	     */
2188:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2189:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2190:src/display.c **** 	  }
2191:src/display.c **** 	}
2192:src/display.c **** 
2193:src/display.c **** 	// Round the mantissa to the number of digits desired
2194:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2195:src/display.c **** 	if (*p >= '5') {	// Round up
2196:src/display.c **** 	  *p = '0';
2197:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2198:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
ARM GAS  /tmp/cc9o0abE.s 			page 53


2199:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2200:src/display.c **** 	    mantissa[0] = '1';
2201:src/display.c **** 	    exp++;
2202:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2203:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2204:src/display.c **** 	      extra_digits = 0;
2205:src/display.c **** 	    }
2206:src/display.c **** 	  } else {
2207:src/display.c **** 	    while (*--p == '9')
2208:src/display.c **** 	      *p = '0';
2209:src/display.c **** 	    (*p)++;
2210:src/display.c **** 	  }
2211:src/display.c **** 	}
2212:src/display.c **** 
2213:src/display.c **** 	// Zap what is left
2214:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2215:src/display.c **** 
2216:src/display.c **** 	p = mantissa;
2217:src/display.c **** 	switch (mode) {
2218:src/display.c **** 	default:
2219:src/display.c **** 	case MODE_STD:   
2220:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2221:src/display.c **** 	  if (count != *display_digits)
2222:src/display.c **** 	    count++;
2223:src/display.c **** 	  // Too big or too small to fit on display
2224:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2225:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2226:src/display.c **** 	    case -1:
2227:src/display.c **** 	    case 2:
2228:src/display.c **** 	      *obp++ = *p++;
2229:src/display.c **** 	      odig++;
2230:src/display.c **** 	      dd--;
2231:src/display.c **** 	      exp--;
2232:src/display.c **** 	    case -2:
2233:src/display.c **** 	    case 1:
2234:src/display.c **** 	      *obp++ = *p++;
2235:src/display.c **** 	      odig++;
2236:src/display.c **** 	      dd--;
2237:src/display.c **** 	      exp--;
2238:src/display.c **** 	    case 0:
2239:src/display.c **** 	      ;
2240:src/display.c **** 	    };
2241:src/display.c **** 	    *obp++ = *p++;
2242:src/display.c **** 	    odig++;
2243:src/display.c **** 	    *obp++ = '.';
2244:src/display.c **** 	    for (i=1; i<count; i++) {
2245:src/display.c **** 	      *obp++ = *p++;
2246:src/display.c **** 	      odig++;
2247:src/display.c **** 	    }
2248:src/display.c **** 	    show_exp = 1;
2249:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2250:src/display.c **** 	    for(i=0; i<=exp; i++) {
2251:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2252:src/display.c **** 		*obp++ = ',';
2253:src/display.c **** 	      *obp++ = *p++;
2254:src/display.c **** 	      odig++;
2255:src/display.c **** 	    }
ARM GAS  /tmp/cc9o0abE.s 			page 54


2256:src/display.c **** 	    *obp++ = '.';
2257:src/display.c **** 	    if (count > (exp + 1)) {
2258:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2259:src/display.c **** 		*obp++ = *p++;
2260:src/display.c **** 		odig++;
2261:src/display.c **** 	      }
2262:src/display.c **** 	    }
2263:src/display.c **** 	  } else {		// All digits to right of decimal point
2264:src/display.c **** 	    *obp++ = '0';
2265:src/display.c **** 	    odig++;
2266:src/display.c **** 	    *obp++ = '.';
2267:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2268:src/display.c **** 	      *obp++ = '0';
2269:src/display.c **** 	      odig++;
2270:src/display.c **** 	    }
2271:src/display.c **** 	    for (i=0; i<count; i++) {
2272:src/display.c **** 	      *obp++ = *p++;
2273:src/display.c **** 	      odig++;
2274:src/display.c **** 	    }
2275:src/display.c **** 	  }
2276:src/display.c **** 	  break;
2277:src/display.c **** 
2278:src/display.c **** 	case MODE_FIX:
2279:src/display.c **** 	  j = 0;
2280:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2281:src/display.c **** 	    for (i=0; i<=exp; i++) {
2282:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2283:src/display.c **** 		*obp++ = ',';
2284:src/display.c **** 	      *obp++ = *p++;
2285:src/display.c **** 	      odig++;
2286:src/display.c **** 	    }
2287:src/display.c **** 	    *obp++ = '.';
2288:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2289:src/display.c **** 	      *obp++ = *p++;
2290:src/display.c **** 	      odig++;
2291:src/display.c **** 	    }
2292:src/display.c **** 	  } else {		// All digits to right of decimal point
2293:src/display.c **** 	    *obp++ = '0';
2294:src/display.c **** 	    odig++;
2295:src/display.c **** 	    *obp++ = '.';
2296:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2297:src/display.c **** 	      *obp++ = '0';
2298:src/display.c **** 	      odig++;
2299:src/display.c **** 	      dd--;
2300:src/display.c **** 	    }
2301:src/display.c **** 	    while (dd-- > 0) {
2302:src/display.c **** 	      *obp++ = *p++;
2303:src/display.c **** 	      odig++;
2304:src/display.c **** 	    }
2305:src/display.c **** 	  }
2306:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2307:src/display.c **** 	  if (trimzeros)
2308:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2309:src/display.c **** 	      obp--;
2310:src/display.c **** 	      odig--;
2311:src/display.c **** 	    }
2312:src/display.c **** #endif			
ARM GAS  /tmp/cc9o0abE.s 			page 55


2313:src/display.c **** 	  break;
2314:src/display.c **** 
2315:src/display.c **** 	case MODE_ENG:
2316:src/display.c **** 	  switch (exp % 3) {
2317:src/display.c **** 	  case -1:
2318:src/display.c **** 	  case 2:
2319:src/display.c **** 	    *obp++ = *p++;
2320:src/display.c **** 	    odig++;
2321:src/display.c **** 	    dd--;
2322:src/display.c **** 	    exp--;
2323:src/display.c **** 	  case -2:
2324:src/display.c **** 	  case 1:
2325:src/display.c **** 	    *obp++ = *p++;
2326:src/display.c **** 	    odig++;
2327:src/display.c **** 	    dd--;
2328:src/display.c **** 	    exp--;
2329:src/display.c **** 	  case 0:
2330:src/display.c **** 	    ;
2331:src/display.c **** 	  };
2332:src/display.c **** 	  // Falling through
2333:src/display.c **** 
2334:src/display.c **** 	case MODE_SCI:
2335:src/display.c **** 	  *obp++ = *p++;
2336:src/display.c **** 	  odig++;
2337:src/display.c **** 	  *obp++ = '.';
2338:src/display.c **** 	  dd--;
2339:src/display.c **** 	  while (dd-- >= 0) {
2340:src/display.c **** 	    *obp++ = *p++;
2341:src/display.c **** 	    odig++;
2342:src/display.c **** 	  }
2343:src/display.c **** 	  show_exp = 1;
2344:src/display.c **** 	}
2345:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2346:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2347:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2348:src/display.c **** 	    obp--;
2349:src/display.c **** 	    odig--;
2350:src/display.c **** 	  }
2351:src/display.c **** #endif	
2352:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2353:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2354:src/display.c **** 	  set_x_dn(z, res, display_digits);
2355:src/display.c **** 	  return;
2356:src/display.c **** 	}
2357:src/display.c **** 	/* Finally, send the output to the display */
2358:src/display.c **** 	*obp = '\0';
2359:src/display.c **** 	if (odig > *display_digits)
2360:src/display.c **** 	  odig = *display_digits;
2361:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2362:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2363:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2364:src/display.c **** 	if (negative) {
2365:src/display.c **** 	  if (res) *res++ = '-';
2366:src/display.c **** 	  else {
2367:src/display.c **** 	    if (j == 0)
2368:src/display.c **** 	      SET_MANT_SIGN;
2369:src/display.c **** 	    else
ARM GAS  /tmp/cc9o0abE.s 			page 56


2370:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2371:src/display.c **** 	  }
2372:src/display.c **** 	}
2373:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2374:src/display.c **** 	  if (c == '.') {
2375:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2376:src/display.c **** 	  } else if (c == ',') {
2377:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2378:src/display.c **** 	  } else {
2379:src/display.c **** 	    res = set_dig_s(j, c, res);
2380:src/display.c **** 	    j += SEGS_PER_DIGIT;
2381:src/display.c **** 	  }
2382:src/display.c **** 	}
2383:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2384:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2385:src/display.c **** 	  if ( !res ) {
2386:src/display.c **** 	    set_exp(exp, 4, res);
2387:src/display.c **** 	  }
2388:src/display.c **** 	  else {
2389:src/display.c **** 	    set_exp(exp, 0, res);
2390:src/display.c **** 	  }
2391:src/display.c **** 	}
2392:src/display.c **** #else
2393:src/display.c **** 	if (show_exp)
2394:src/display.c **** 	  set_exp(exp, 0, res);
2395:src/display.c **** #endif
2396:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2397:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2398:src/display.c **** 	*display_digits = odig;
2399:src/display.c ****       }
2400:src/display.c **** 
2401:src/display.c **** #if defined(QTGUI) || defined(IOS)
2402:src/display.c ****       void format_display(char *buf) {
2403:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2404:src/display.c **** 	  {
2405:src/display.c **** 	    const char *p = get_cmdline();
2406:src/display.c **** 	    if (p == NULL) {
2407:src/display.c **** 	      format_reg(regX_idx, buf);
2408:src/display.c **** 	    } else {
2409:src/display.c **** 	      scopy(buf, p);
2410:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2411:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2412:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2413:src/display.c **** 		buf[CmdLineEex] = 'E';
2414:src/display.c **** 		buf[CmdLineEex+1] = '-';
2415:src/display.c **** 	      }
2416:src/display.c **** #  endif
2417:src/display.c **** 	    }
2418:src/display.c **** 	  }
2419:src/display.c **** 	else {
2420:src/display.c **** 	  buf[0]=0;
2421:src/display.c **** 	}
2422:src/display.c ****       }
2423:src/display.c **** #endif
2424:src/display.c **** 
2425:src/display.c ****       void format_reg(int index, char *buf) {
2426:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
ARM GAS  /tmp/cc9o0abE.s 			page 57


2427:src/display.c **** 
2428:src/display.c **** 	if (is_intmode())
2429:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2430:src/display.c **** #ifndef HP16C_MODE_CHANGE
2431:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2432:src/display.c **** 	  decNumber x;
2433:src/display.c **** 	  int s;
2434:src/display.c **** 	  unsigned long long int v;
2435:src/display.c **** 
2436:src/display.c **** 	  getRegister(&x, index);
2437:src/display.c **** 	  v = dn_to_ull(&x, &s);
2438:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2439:src/display.c **** 	}
2440:src/display.c **** #endif
2441:src/display.c **** 	else
2442:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2443:src/display.c ****       }
2444:src/display.c **** 
2445:src/display.c ****       /* Display the status screen */
2446:src/display.c ****       static void show_status(void) {
2447:src/display.c **** 	int i, n;
2448:src/display.c **** 	int j = SEGS_EXP_BASE;
2449:src/display.c **** 	const int status = State2.status - 3;
2450:src/display.c **** 	char buf[16], *p = buf;
2451:src/display.c **** 	unsigned int pc;
2452:src/display.c **** 
2453:src/display.c **** 	if (status == -2) {
2454:src/display.c **** 	  set_status("Free:");
2455:src/display.c **** 	  p = num_arg(buf, free_mem());
2456:src/display.c **** 	  p = scopy(p, " , FL. ");
2457:src/display.c **** 	  p = num_arg(p, free_flash());
2458:src/display.c **** 	  *p = '\0';
2459:src/display.c **** 	  set_digits_string(buf, 0);
2460:src/display.c **** 	}
2461:src/display.c **** 	else if (status == -1) {
2462:src/display.c **** 	  /* Top line */
2463:src/display.c **** 	  p = scopy(buf, "Regs:");
2464:src/display.c **** 	  if (SizeStatRegs)
2465:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2466:src/display.c **** 	  *p = '\0';
2467:src/display.c **** 	  set_status(buf);
2468:src/display.c **** 
2469:src/display.c **** 	  /* Bottom line */
2470:src/display.c **** 	  p = num_arg(buf, global_regs());
2471:src/display.c **** 	  if (LocalRegs < 0) {
2472:src/display.c **** 	    p = scopy(p, " , Loc. ");
2473:src/display.c **** 	    p = num_arg(p, local_regs());
2474:src/display.c **** 	  }
2475:src/display.c **** 	  *p = '\0';
2476:src/display.c **** 	  set_digits_string(buf, 0);
2477:src/display.c **** 	} else {
2478:src/display.c **** 	  int base;
2479:src/display.c **** 	  int end;
2480:src/display.c **** 	  int group = 10;
2481:src/display.c **** 	  int start = 0;
2482:src/display.c **** 		
2483:src/display.c **** 	  if (status <= 9) {
ARM GAS  /tmp/cc9o0abE.s 			page 58


2484:src/display.c **** 	    base = 10 * status;
2485:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2486:src/display.c **** 	    p = scopy(buf, "FL ");
2487:src/display.c **** 	    p = num_arg_0(p, base, 2);
2488:src/display.c **** 	    *p++ = '-';
2489:src/display.c **** 	    p = num_arg_0(p, end, 2);
2490:src/display.c **** 	    *p = '\0';
2491:src/display.c **** 	    set_status(buf);
2492:src/display.c **** 	  }
2493:src/display.c **** 	  else if (status == 10) {
2494:src/display.c **** 	    base = regX_idx;
2495:src/display.c **** 	    end = regK_idx;
2496:src/display.c **** 	    start = 3;
2497:src/display.c **** 	    group = 4;
2498:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2499:src/display.c **** 	  }
2500:src/display.c **** 	  else { // status == 11
2501:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2502:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2503:src/display.c **** 	    set_status("FL.00-.15");
2504:src/display.c **** 	  }
2505:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2506:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2507:src/display.c **** 	  j += SEGS_PER_DIGIT;
2508:src/display.c **** 	  for (i = start; i < group + start; i++) {
2509:src/display.c **** 	    int k = i + base - start;
2510:src/display.c **** 	    int l = get_user_flag(k);
2511:src/display.c **** 	    k += group;
2512:src/display.c **** 	    if (end >= k) {
2513:src/display.c **** 	      l |= (get_user_flag(k) << 1);
2514:src/display.c **** 	      k += group;
2515:src/display.c **** 	      if (end >= k)
2516:src/display.c **** 		l |= (get_user_flag(k) << 2);
2517:src/display.c **** 	    }
2518:src/display.c **** 	    set_dig(j, l);
2519:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2520:src/display.c **** 	    j += SEGS_PER_DIGIT;
2521:src/display.c **** 	    if (i == 4) {
2522:src/display.c **** 	      set_dig(j, 8);
2523:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2524:src/display.c **** 	      j += SEGS_PER_DIGIT;
2525:src/display.c **** 	    }
2526:src/display.c **** 	  }
2527:src/display.c **** 	}
2528:src/display.c **** 
2529:src/display.c **** 	j = SEGS_EXP_BASE;
2530:src/display.c **** 	pc = state_pc();
2531:src/display.c **** 	if (isXROM(pc))
2532:src/display.c **** 	  pc = 1;
2533:src/display.c **** 	for (n=i=0; i<4; i++) {
2534:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2535:src/display.c **** 	    if (++n == 4) {
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2537:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2538:src/display.c **** 	    } else {
2539:src/display.c **** 	      set_dig(j, 'A'+i);
2540:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
ARM GAS  /tmp/cc9o0abE.s 			page 59


2541:src/display.c **** 	    }
2542:src/display.c **** 	  }
2543:src/display.c **** 	}
2544:src/display.c ****       }
2545:src/display.c **** 
2546:src/display.c **** 
2547:src/display.c ****       /* Display the list of alpha labels */
2548:src/display.c ****       static void show_label(void) {
2549:src/display.c **** 	char buf[16];
2550:src/display.c **** 	unsigned short int pc = State2.digval;
2551:src/display.c **** 	unsigned int op = getprog(pc);
2552:src/display.c **** 	int n = nLIB(pc);
2553:src/display.c **** 	unsigned short int lblpc;
2554:src/display.c **** 
2555:src/display.c **** 	set_status(prt((opcode)op, buf));
2556:src/display.c **** 	set_digits_string(libname[n], 0);
2557:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
2558:src/display.c **** 	scopy(LastDisplayedNumber, libname_text[n]);
2559:src/display.c **** #endif
2560:src/display.c **** 
2561:src/display.c **** 	if (op & OP_DBL) {
2562:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2563:src/display.c **** 	  if (lblpc != pc) {
2564:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2565:src/display.c **** 	    n = nLIB(lblpc);
2566:src/display.c **** 	    if (n == REGION_RAM)
2567:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2568:src/display.c **** 	    else {
2569:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2570:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
2571:src/display.c **** 	      scopy(LastDisplayedNumber, libname_text[n]);
2572:src/display.c **** #endif
2573:src/display.c **** 	    }
2574:src/display.c **** 	  }
2575:src/display.c **** 	}
2576:src/display.c ****       }
2577:src/display.c **** 
2578:src/display.c ****       /* Display a list of register contents */
2579:src/display.c ****       static void show_registers(void) {
2580:src/display.c **** 	char buf[16], *bp;
2581:src/display.c **** 	int n = State2.digval;
2582:src/display.c **** 	
2583:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2584:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2585:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2586:src/display.c **** 	  n;
2587:src/display.c **** #else
2588:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2589:src/display.c **** 	  n;
2590:src/display.c **** #endif
2591:src/display.c **** 
2592:src/display.c **** 	if (State2.disp_as_alpha) {
2593:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2594:src/display.c **** 	}
2595:src/display.c **** 	else {
2596:src/display.c **** 	  xset(buf, '\0', 16);
2597:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
ARM GAS  /tmp/cc9o0abE.s 			page 60


2598:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2599:src/display.c **** #else
2600:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2601:src/display.c **** #endif
2602:src/display.c **** 	  if (State2.local) {
2603:src/display.c **** 	    *bp++ = '.';
2604:src/display.c **** 	    if (n >= 100) {
2605:src/display.c **** 	      *bp++ = '1';
2606:src/display.c **** 	      n -= 100;
2607:src/display.c **** 	    }
2608:src/display.c **** 	  }
2609:src/display.c **** 	  if (n < 100)
2610:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2611:src/display.c **** 	  else
2612:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2613:src/display.c **** 	  set_status(buf);
2614:src/display.c **** 	}
2615:src/display.c **** 	format_reg(reg, CNULL);
2616:src/display.c ****       }
2617:src/display.c **** 
2618:src/display.c **** 
2619:src/display.c ****       static void set_annunciators(void)
2620:src/display.c ****       {
2621:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2622:src/display.c **** 
2623:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2624:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2625:src/display.c **** 	 * browsing constants.
2626:src/display.c **** 	 */
2627:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2628:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2629:src/display.c **** #else
2630:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2631:src/display.c **** #endif
2632:src/display.c **** #ifdef INCLUDE_C_LOCK
2633:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
2634:src/display.c **** #endif
2635:src/display.c **** 
2636:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2637:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2638:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2639:src/display.c **** 	set_IO_annunciator();
2640:src/display.c **** 
2641:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2642:src/display.c **** 	 */
2643:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2644:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2645:src/display.c ****       }
2646:src/display.c **** 
2647:src/display.c **** 
2648:src/display.c ****       /*
2649:src/display.c ****        *  Toggle the little "=" sign
2650:src/display.c ****        */
2651:src/display.c ****       void set_IO_annunciator(void) {
2652:src/display.c **** #ifndef DM42
2653:src/display.c **** 	int on = SerialOn
2654:src/display.c **** #endif
ARM GAS  /tmp/cc9o0abE.s 			page 61


2655:src/display.c **** #ifdef DM42
2656:src/display.c **** 	  int on = 0
2657:src/display.c **** #endif
2658:src/display.c **** #ifdef REALBUILD
2659:src/display.c **** 	  || DebugFlag
2660:src/display.c **** #endif
2661:src/display.c **** #ifdef INFRARED
2662:src/display.c **** 	  || PrinterColumn != 0
2663:src/display.c **** #endif
2664:src/display.c **** 	  ;
2665:src/display.c **** 
2666:src/display.c **** 	if (on != IoAnnunciator) {
2667:src/display.c **** 	  dot(LIT_EQ, on);
2668:src/display.c **** 	  IoAnnunciator = on;
2669:src/display.c **** 	  finish_display(); //LIT_EQ
2670:src/display.c **** 	}
2671:src/display.c ****       }
2672:src/display.c **** 
2673:src/display.c **** #ifdef TOP_ROW
2674:src/display.c ****       /*
2675:src/display.c ****        *  Update the display
2676:src/display.c ****        */
2677:src/display.c ****       void display(void) {
2678:src/display.c **** 	int i, j;
2679:src/display.c **** 	char buf[40], *bp = buf;
2680:src/display.c **** 	const char *p;
2681:src/display.c **** 	int annuc = 0;
2682:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2683:src/display.c **** 	int skip = 0;
2684:src/display.c **** 	int x_disp = 0;
2685:src/display.c **** 	const int shift = cur_shift();
2686:src/display.c **** 
2687:src/display.c **** 	no_status_top = 0;
2688:src/display.c **** 	if (State2.disp_freeze) {
2689:src/display.c **** 	  State2.disp_freeze = 0;
2690:src/display.c **** 	  State2.disp_temp = 1;
2691:src/display.c **** #ifdef CONSOLE
2692:src/display.c **** 	  JustDisplayed = 1;
2693:src/display.c **** #endif
2694:src/display.c **** 	  ShowRPN = 0;
2695:src/display.c **** 	  return;
2696:src/display.c **** 	}
2697:src/display.c **** 
2698:src/display.c **** 	if (WasDataEntry) {
2699:src/display.c **** #if defined(QTGUI) || defined(IOS)
2700:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
2701:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
2702:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
2703:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
2704:src/display.c **** #endif
2705:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2706:src/display.c **** 
2707:src/display.c **** 	  // Erase 7-segment display
2708:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2709:src/display.c **** 	    clr_dot(i);
2710:src/display.c **** 	  }
2711:src/display.c **** 	  goto only_update_x;
ARM GAS  /tmp/cc9o0abE.s 			page 62


2712:src/display.c **** 	}
2713:src/display.c **** #ifdef INCLUDE_YREG_CODE
2714:src/display.c **** #  ifdef YREG_ALWAYS_ON
2715:src/display.c **** 	const int yreg_enabled = 1;
2716:src/display.c **** #  else
2717:src/display.c **** 	const int yreg_enabled = UState.show_y;
2718:src/display.c **** #  endif
2719:src/display.c **** #else
2720:src/display.c **** 	const int yreg_enabled = 0;
2721:src/display.c **** #endif
2722:src/display.c **** 	// Clear display
2723:src/display.c **** 	reset_disp();
2724:src/display.c **** 
2725:src/display.c **** 	
2726:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2727:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2728:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2729:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2730:src/display.c **** 	/*   set_status(buf); */
2731:src/display.c **** 	/* } */
2732:src/display.c **** 	if (State2.version) {
2733:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2734:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2735:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2736:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
2737:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
2738:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
2739:src/display.c **** #endif
2740:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2741:src/display.c **** 	  set_status(vers);
2742:src/display.c **** 	  skip = 1;
2743:src/display.c **** 	  goto nostk;
2744:src/display.c **** 	} else if (State2.confirm) {
2745:src/display.c **** 	  if (yreg_enabled) {
2746:src/display.c **** 	    set_status_top(S_SURE);
2747:src/display.c **** 	    no_status_top = 1;
2748:src/display.c **** 	    annuc = 1;
2749:src/display.c **** 	  }
2750:src/display.c **** 	  else {
2751:src/display.c **** 	    set_status(S_SURE);
2752:src/display.c **** 	  }
2753:src/display.c **** 	} else if (State2.hyp) {
2754:src/display.c **** 	  bp = scopy(bp, "HYP");
2755:src/display.c **** 	  if (! State2.dot)
2756:src/display.c **** 	    *bp++ = '\235';
2757:src/display.c **** 	  if (yreg_enabled) {
2758:src/display.c **** 	    set_status_top(buf);
2759:src/display.c **** 	    no_status_top = 1;
2760:src/display.c **** 	    annuc = 1;
2761:src/display.c **** 	  }
2762:src/display.c **** 	  else {
2763:src/display.c **** 	    set_status(buf);
2764:src/display.c **** 	  }
2765:src/display.c **** 	} else if (State2.gtodot) {
2766:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2767:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2768:src/display.c **** 	  if (State2.numdigit > 0)
ARM GAS  /tmp/cc9o0abE.s 			page 63


2769:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2770:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2771:src/display.c **** 	  *bp++ = '_';
2772:src/display.c **** 	  if (yreg_enabled) {
2773:src/display.c **** 	    set_status_top(buf);
2774:src/display.c **** 	    no_status_top = 1;
2775:src/display.c **** 	    annuc = 1;
2776:src/display.c **** 	  }
2777:src/display.c **** 	  else {
2778:src/display.c **** 	    set_status(buf);
2779:src/display.c **** 	  }
2780:src/display.c **** 	} else if (State2.rarg) {
2781:src/display.c **** 	  /* Commands with arguments */
2782:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2783:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2784:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2785:src/display.c **** #endif
2786:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2787:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2788:src/display.c **** 	  if (State2.dot) {
2789:src/display.c **** 	    *bp++ = 's';
2790:src/display.c **** 	    *bp++ = '_';
2791:src/display.c **** 	  } else if (shift == SHIFT_F) {
2792:src/display.c **** 	    *bp++ = '\021';
2793:src/display.c **** 	    *bp++ = '_';
2794:src/display.c **** 	  } else {
2795:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2796:src/display.c **** 	       : State2.ind ? 2 
2797:src/display.c **** 	       : num_arg_digits(CmdBase); */
2798:src/display.c **** 	    if (State2.local)
2799:src/display.c **** 	      *bp++ = '.';
2800:src/display.c **** 	    if (State2.numdigit > 0) {
2801:src/display.c **** 	      if (State2.shuffle)
2802:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2803:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2804:src/display.c **** 	      else
2805:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2806:src/display.c **** 	    }
2807:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2808:src/display.c **** 	    *bp++ = '_';
2809:src/display.c **** 	  }
2810:src/display.c **** 	  if (yreg_enabled) {
2811:src/display.c **** 	    set_status_top(buf);
2812:src/display.c **** 	    no_status_top = 1;
2813:src/display.c **** 	    annuc = 1;
2814:src/display.c **** 	  }
2815:src/display.c **** 	  else {
2816:src/display.c **** 	    set_status(buf);
2817:src/display.c **** 	  }
2818:src/display.c **** 	} else if (State2.test != TST_NONE) {
2819:src/display.c **** 	  *bp++ = 'x';
2820:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2821:src/display.c **** 	  *bp++ = '_';
2822:src/display.c **** 	  *bp++ = '?';
2823:src/display.c **** 	  if (yreg_enabled) {
2824:src/display.c **** 	    set_status_top(buf);
2825:src/display.c **** 	    no_status_top = 1;
ARM GAS  /tmp/cc9o0abE.s 			page 64


2826:src/display.c **** 	    annuc = 1;
2827:src/display.c **** 	  }
2828:src/display.c **** 	  else {
2829:src/display.c **** 	    set_status(buf);
2830:src/display.c **** 	  }
2831:src/display.c **** 	} else if (cata) {
2832:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2833:src/display.c **** 	  char b2[16];
2834:src/display.c **** 	  const char *p;
2835:src/display.c **** 
2836:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2837:src/display.c **** 	  p = catcmd(op, b2);
2838:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2839:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2840:src/display.c **** 	  bp = scopy(bp, p);
2841:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2842:src/display.c **** 	    // State2.disp_small = 1;
2843:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2844:src/display.c **** 	      set_digits_string("0 to 255", 0);
2845:src/display.c **** 	    else
2846:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2847:src/display.c **** 	    skip = 1;
2848:src/display.c **** 	  } else if (State2.runmode) {
2849:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2850:src/display.c **** 	      decNumber x, r;
2851:src/display.c **** 	      decimal64 z;
2852:src/display.c **** 
2853:src/display.c **** 	      getX(&x);
2854:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2855:src/display.c **** 		const unsigned int f = argKIND(op);
2856:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2857:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2858:src/display.c **** 		  update_speed(0);
2859:src/display.c **** 		  fp(&r, &x);
2860:src/display.c **** 		}
2861:src/display.c **** 		else
2862:src/display.c **** 		  set_NaN(&r);
2863:src/display.c **** 	      } else
2864:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2865:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2866:src/display.c **** 	      packed_from_number(&z, &r);
2867:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2868:src/display.c **** 	      skip = 1;
2869:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2870:src/display.c **** 	      REGISTER z, *const x = StackBase;
2871:src/display.c **** 	      copyreg(&z, x);
2872:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2873:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2874:src/display.c **** 	      copyreg(x, &z);
2875:src/display.c **** 	      skip = 1;
2876:src/display.c **** 	    }
2877:src/display.c **** 	  }
2878:src/display.c **** 	  if (yreg_enabled) {
2879:src/display.c **** 	    set_status_top(buf);
2880:src/display.c **** 	    no_status_top = 1;
2881:src/display.c **** 	    annuc = 1;
2882:src/display.c **** 	  }
ARM GAS  /tmp/cc9o0abE.s 			page 65


2883:src/display.c **** 	  else {
2884:src/display.c **** 	    set_status(buf);
2885:src/display.c **** 	  }
2886:src/display.c **** 	} else if (State2.multi) {
2887:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2888:src/display.c **** 	  if (State2.numdigit > 0) {
2889:src/display.c **** 	    *bp++ = (char) State2.digval;
2890:src/display.c **** 	    if (State2.numdigit > 1)
2891:src/display.c **** 	      *bp++ = State2.digval2;
2892:src/display.c **** 	  }
2893:src/display.c **** 	  if (yreg_enabled) {
2894:src/display.c **** 	    set_status_top(buf);
2895:src/display.c **** 	    no_status_top = 1;
2896:src/display.c **** 	    annuc = 1;
2897:src/display.c **** 	  }
2898:src/display.c **** 	  else {
2899:src/display.c **** 	    set_status(buf);
2900:src/display.c **** 	  }
2901:src/display.c **** 	} else if (State2.status) {
2902:src/display.c **** 	  show_status();
2903:src/display.c **** 	  skip = 1;
2904:src/display.c **** 	} else if (State2.labellist) {
2905:src/display.c **** 	  show_label();
2906:src/display.c **** 	  skip = 1;
2907:src/display.c **** 	} else if (State2.registerlist) {
2908:src/display.c **** 	  show_registers();
2909:src/display.c **** 	  skip = 1;
2910:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2911:src/display.c **** 	    annunciators();
2912:src/display.c **** 	  }
2913:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2914:src/display.c **** 	} else if (State2.disp_as_alpha) {
2915:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2916:src/display.c **** #endif
2917:src/display.c **** 	} else if (State2.runmode) {
2918:src/display.c **** 	  if (DispMsg) { 
2919:src/display.c **** 	    set_status(DispMsg);
2920:src/display.c **** 	  } else if (DispPlot) {
2921:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2922:src/display.c **** 	  } else if (State2.alphas) {
2923:src/display.c **** 	    bp = scopy(buf, Alpha);
2924:src/display.c **** 	    j = State2.alpha_pos;
2925:src/display.c **** 	    if (j != 0) {
2926:src/display.c **** 	      i = slen(buf);
2927:src/display.c **** 	      j *= 6;
2928:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
2929:src/display.c **** 		{
2930:src/display.c **** 		  buf[ (i - j) ] = '\0';
2931:src/display.c **** 		  set_status_right(buf);
2932:src/display.c **** 		}
2933:src/display.c **** 	      else {
2934:src/display.c **** 		set_status(buf);
2935:src/display.c **** 	      }
2936:src/display.c **** 	    }
2937:src/display.c **** 	    else {
2938:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2939:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
ARM GAS  /tmp/cc9o0abE.s 			page 66


2940:src/display.c **** 		*bp++ = '\0';
2941:src/display.c **** 	      }
2942:src/display.c **** 	      set_status_right(buf);
2943:src/display.c **** 	    }
2944:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2945:src/display.c **** 	      bp = buf;
2946:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2947:src/display.c **** 	      *bp++ = '\0';
2948:src/display.c **** 	      set_status_top(buf);
2949:src/display.c **** 	      no_status_top = 1;
2950:src/display.c **** 	      //annuc = 1;
2951:src/display.c **** 	    }
2952:src/display.c **** 	  }
2953:src/display.c **** 	  else {
2954:src/display.c **** 	    annuc = 1;
2955:src/display.c **** 	  }
2956:src/display.c **** 	}
2957:src/display.c **** 	else {
2958:src/display.c **** #ifndef DM42
2959:src/display.c **** 	  show_progtrace(buf);
2960:src/display.c **** #endif
2961:src/display.c **** 	  i = state_pc();
2962:src/display.c **** 	  if (i > 0)
2963:src/display.c **** 	    set_status(prt(getprog(i), buf));
2964:src/display.c **** 	  else
2965:src/display.c **** 	    set_status("");
2966:src/display.c **** 	  set_dot(STO_annun);
2967:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2968:src/display.c **** 	    annuc = 1;
2969:src/display.c **** 	  goto nostk;
2970:src/display.c **** 	}
2971:src/display.c **** 	show_stack();
2972:src/display.c ****       nostk:
2973:src/display.c **** 	show_flags();
2974:src/display.c **** 	if (!skip) {
2975:src/display.c **** 	  if (State2.runmode) {
2976:src/display.c **** 	  only_update_x:
2977:src/display.c **** 	    p = get_cmdline();
2978:src/display.c **** 	    if (p == NULL || cata) {
2979:src/display.c **** 	      if (ShowRegister != -1) {
2980:src/display.c **** #ifdef INCLUDE_C_LOCK
2981:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2982:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2983:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2984:src/display.c **** 		    SET_POLAR_READY;
2985:src/display.c **** 		  }
2986:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2987:src/display.c **** 		    State2.hms = 0;
2988:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2989:src/display.c **** 		    State2.hms = 1;
2990:src/display.c **** 		  }
2991:src/display.c **** 		  else {
2992:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2993:src/display.c **** 		  }
2994:src/display.c **** 		  x_disp = 1;
2995:src/display.c **** 		}
2996:src/display.c **** 		else {
ARM GAS  /tmp/cc9o0abE.s 			page 67


2997:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2998:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2999:src/display.c **** 		}
3000:src/display.c **** #else		
3001:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3002:src/display.c **** 		format_reg(ShowRegister, CNULL);
3003:src/display.c **** #endif
3004:src/display.c **** 	      }
3005:src/display.c **** 	      else
3006:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3007:src/display.c **** 	    } else {
3008:src/display.c **** 	      disp_x(p);
3009:src/display.c **** 	      x_disp = 1;
3010:src/display.c **** 	    }
3011:src/display.c **** 	    if (WasDataEntry) {
3012:src/display.c **** 	      goto finish;
3013:src/display.c **** 	    }
3014:src/display.c **** 	  } else {
3015:src/display.c **** 	    unsigned int pc = state_pc();
3016:src/display.c **** 	    unsigned int upc = user_pc(pc);
3017:src/display.c **** 	    const int n = nLIB(pc);
3018:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3019:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3020:src/display.c **** #ifdef FOUR_K
3021:src/display.c **** 	    if ((upc<1000) && n == 0) {
3022:src/display.c **** 	      num_arg_0(scopy_spc(buf, S7_STEP), upc, 3);
3023:src/display.c **** 	    }
3024:src/display.c **** 	    else {
3025:src/display.c **** 	      num_arg_0(scopy(buf, n == 0 ? S7_STEP : libname[n]), 
3026:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
3027:src/display.c **** 	    }	      
3028:src/display.c **** #else
3029:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3030:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3031:src/display.c **** #endif
3032:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3033:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
3034:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3035:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3036:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3037:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3038:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3039:src/display.c **** 	      char *b=buf;
3040:src/display.c **** 	      char *l=LastDisplayedNumber;
3041:src/display.c **** 	      *l++=' ';
3042:src/display.c **** 	      while(*b) {
3043:src/display.c **** 		*l++=*b++;
3044:src/display.c **** 		*l++=' ';
3045:src/display.c **** 	      }
3046:src/display.c **** 	      *l=0;
3047:src/display.c **** 	    }
3048:src/display.c **** #endif
3049:src/display.c **** 	  }
3050:src/display.c **** 	}
3051:src/display.c **** 	set_annunciators();
3052:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3053:src/display.c **** 	  ShowRPN = 0;
ARM GAS  /tmp/cc9o0abE.s 			page 68


3054:src/display.c **** 	  dot(RPN, 0);
3055:src/display.c **** 	}
3056:src/display.c **** 	// disp_temp disables the <- key
3057:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3058:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3059:src/display.c **** 
3060:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3061:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3062:src/display.c **** 	  annunciators();
3063:src/display.c ****  	State2.hms = 0;
3064:src/display.c **** #else
3065:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3066:src/display.c **** 	  annunciators();
3067:src/display.c **** #endif
3068:src/display.c **** 
3069:src/display.c ****       finish:
3070:src/display.c **** 	State2.version = 0;
3071:src/display.c **** 	State2.disp_as_alpha = 0;
3072:src/display.c **** 	State2.smode = SDISP_NORMAL;
3073:src/display.c **** 	State2.invalid_disp = 0;
3074:src/display.c **** 	ShowRegister = regX_idx;
3075:src/display.c **** 	DispMsg = CNULL;
3076:src/display.c **** 	DispPlot = 0;
3077:src/display.c **** 	State2.disp_small = 0;
3078:src/display.c **** 	finish_display();
3079:src/display.c **** 	no_status_top = 0;
3080:src/display.c **** #ifdef CONSOLE
3081:src/display.c **** 	JustDisplayed = 1;
3082:src/display.c **** #endif
3083:src/display.c ****       }
3084:src/display.c **** #else
3085:src/display.c ****       /*
3086:src/display.c ****        *  Update the display
3087:src/display.c ****        */
3088:src/display.c ****       void display(void) {
3089:src/display.c **** 	int i, j;
3090:src/display.c **** 	char buf[40], *bp = buf;
3091:src/display.c **** 	const char *p;
3092:src/display.c **** 	int annuc = 0;
3093:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
3094:src/display.c **** 	int skip = 0;
3095:src/display.c **** 	int x_disp = 0;
3096:src/display.c **** 	const int shift = cur_shift();
3097:src/display.c **** 
3098:src/display.c **** 
3099:src/display.c **** 
3100:src/display.c **** 	if (State2.disp_freeze) {
3101:src/display.c **** 	  State2.disp_freeze = 0;
3102:src/display.c **** 	  State2.disp_temp = 1;
3103:src/display.c **** #ifdef CONSOLE
3104:src/display.c **** 	  JustDisplayed = 1;
3105:src/display.c **** #endif
3106:src/display.c **** 	  ShowRPN = 0;
3107:src/display.c **** 	  return;
3108:src/display.c **** 	}
3109:src/display.c **** 
3110:src/display.c **** 	if (WasDataEntry) {
ARM GAS  /tmp/cc9o0abE.s 			page 69


3111:src/display.c **** #if defined(QTGUI) || defined(IOS)
3112:src/display.c **** 	  xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3113:src/display.c **** 	  LastDisplayedNumber[NUMBER_LENGTH]=0;
3114:src/display.c **** 	  xset(LastDisplayedExponent, ' ', EXPONENT_LENGTH);
3115:src/display.c **** 	  LastDisplayedExponent[EXPONENT_LENGTH]=0;
3116:src/display.c **** #endif
3117:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
3118:src/display.c **** 
3119:src/display.c **** 	  // Erase 7-segment display
3120:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
3121:src/display.c **** 	    clr_dot(i);
3122:src/display.c **** 	  }
3123:src/display.c **** 	  goto only_update_x;
3124:src/display.c **** 	}
3125:src/display.c **** 
3126:src/display.c **** 	// Clear display
3127:src/display.c **** 	reset_disp();
3128:src/display.c **** 
3129:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3130:src/display.c **** 	if (State2.cmplx  && !cata) {
3131:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3132:src/display.c **** 	  set_status(buf);
3133:src/display.c **** 	}
3134:src/display.c **** 	if (State2.version) {
3135:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3136:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3137:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3138:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
3139:src/display.c **** 	  scopy(LastDisplayedNumber, " P A U L I,  W A L T E R ");
3140:src/display.c **** 	  scopy(LastDisplayedExponent, " ");
3141:src/display.c **** #endif
3142:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3143:src/display.c **** 	  set_status(vers);
3144:src/display.c **** 	  skip = 1;
3145:src/display.c **** 	  goto nostk;
3146:src/display.c **** 	} else if (State2.confirm) {
3147:src/display.c **** 	  set_status(S_SURE);
3148:src/display.c **** 	} else if (State2.hyp) {
3149:src/display.c **** 	  bp = scopy(bp, "HYP");
3150:src/display.c **** 	  if (! State2.dot)
3151:src/display.c **** 	    *bp++ = '\235';
3152:src/display.c **** 	  set_status(buf);
3153:src/display.c **** 	} else if (State2.gtodot) {
3154:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3155:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3156:src/display.c **** 	  if (State2.numdigit > 0)
3157:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3158:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3159:src/display.c **** 	  *bp++ = '_';
3160:src/display.c **** 	  set_status(buf);
3161:src/display.c **** 	} else if (State2.rarg) {
3162:src/display.c **** 	  /* Commands with arguments */
3163:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3164:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3165:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3166:src/display.c **** #endif
3167:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
ARM GAS  /tmp/cc9o0abE.s 			page 70


3168:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3169:src/display.c **** 	  if (State2.dot) {
3170:src/display.c **** 	    *bp++ = 's';
3171:src/display.c **** 	    *bp++ = '_';
3172:src/display.c **** 	  } else if (shift == SHIFT_F) {
3173:src/display.c **** 	    *bp++ = '\021';
3174:src/display.c **** 	    *bp++ = '_';
3175:src/display.c **** 	  } else {
3176:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3177:src/display.c **** 	       : State2.ind ? 2 
3178:src/display.c **** 	       : num_arg_digits(CmdBase); */
3179:src/display.c **** 	    if (State2.local)
3180:src/display.c **** 	      *bp++ = '.';
3181:src/display.c **** 	    if (State2.numdigit > 0) {
3182:src/display.c **** 	      if (State2.shuffle)
3183:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3184:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3185:src/display.c **** 	      else
3186:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3187:src/display.c **** 	    }
3188:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3189:src/display.c **** 	    *bp++ = '_';
3190:src/display.c **** 	  }
3191:src/display.c **** 	  set_status(buf);
3192:src/display.c **** 	} else if (State2.test != TST_NONE) {
3193:src/display.c **** 	  *bp++ = 'x';
3194:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3195:src/display.c **** 	  *bp++ = '_';
3196:src/display.c **** 	  *bp++ = '?';
3197:src/display.c **** 	  set_status(buf);
3198:src/display.c **** 	} else if (cata) {
3199:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3200:src/display.c **** 	  char b2[16];
3201:src/display.c **** 	  const char *p;
3202:src/display.c **** 
3203:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3204:src/display.c **** 	  p = catcmd(op, b2);
3205:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3206:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3207:src/display.c **** 	  bp = scopy(bp, p);
3208:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3209:src/display.c **** 	    // State2.disp_small = 1;
3210:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3211:src/display.c **** 	      set_digits_string("0 to 255", 0);
3212:src/display.c **** 	    else
3213:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3214:src/display.c **** 	    skip = 1;
3215:src/display.c **** 	  } else if (State2.runmode) {
3216:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3217:src/display.c **** 	      decNumber x, r;
3218:src/display.c **** 	      decimal64 z;
3219:src/display.c **** 
3220:src/display.c **** 	      getX(&x);
3221:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3222:src/display.c **** 		const unsigned int f = argKIND(op);
3223:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3224:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
ARM GAS  /tmp/cc9o0abE.s 			page 71


3225:src/display.c **** 		  update_speed(0);
3226:src/display.c **** 		  fp(&r, &x);
3227:src/display.c **** 		}
3228:src/display.c **** 		else
3229:src/display.c **** 		  set_NaN(&r);
3230:src/display.c **** 	      } else
3231:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
3232:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3233:src/display.c **** 	      packed_from_number(&z, &r);
3234:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3235:src/display.c **** 	      skip = 1;
3236:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3237:src/display.c **** 	      REGISTER z, *const x = StackBase;
3238:src/display.c **** 	      copyreg(&z, x);
3239:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3240:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3241:src/display.c **** 	      copyreg(x, &z);
3242:src/display.c **** 	      skip = 1;
3243:src/display.c **** 	    }
3244:src/display.c **** 	  }
3245:src/display.c **** 	  set_status(buf);
3246:src/display.c **** 	} else if (State2.multi) {
3247:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3248:src/display.c **** 	  if (State2.numdigit > 0) {
3249:src/display.c **** 	    *bp++ = (char) State2.digval;
3250:src/display.c **** 	    if (State2.numdigit > 1)
3251:src/display.c **** 	      *bp++ = State2.digval2;
3252:src/display.c **** 	  }
3253:src/display.c **** 	  set_status(buf);
3254:src/display.c **** 	} else if (State2.status) {
3255:src/display.c **** 	  show_status();
3256:src/display.c **** 	  skip = 1;
3257:src/display.c **** 	} else if (State2.labellist) {
3258:src/display.c **** 	  show_label();
3259:src/display.c **** 	  skip = 1;
3260:src/display.c **** 	} else if (State2.registerlist) {
3261:src/display.c **** 	  show_registers();
3262:src/display.c **** 	  skip = 1;
3263:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3264:src/display.c **** 	    annunciators();
3265:src/display.c **** 	  }
3266:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3267:src/display.c **** 	} else if (State2.disp_as_alpha) {
3268:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3269:src/display.c **** #endif
3270:src/display.c **** 	} else if (State2.runmode) {
3271:src/display.c **** 	  if (DispMsg) { 
3272:src/display.c **** 	    set_status(DispMsg);
3273:src/display.c **** 	  } else if (DispPlot) {
3274:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3275:src/display.c **** 	  } else if (State2.alphas) {
3276:src/display.c **** #if 0
3277:src/display.c **** 	    set_digits_string("AlpHA", 0);
3278:src/display.c **** #endif
3279:src/display.c **** 	    bp = scopy(buf, Alpha);
3280:src/display.c **** 	    j = State2.alpha_pos;
3281:src/display.c **** 	    if (j != 0) {
ARM GAS  /tmp/cc9o0abE.s 			page 72


3282:src/display.c **** 	      i = slen(buf);
3283:src/display.c **** 	      //				
3284:src/display.c **** 	      j *= 6;
3285:src/display.c **** #ifdef BIGGER_DISPLAY
3286:src/display.c **** 	      if ( i - j >= 20 )
3287:src/display.c **** #else
3288:src/display.c **** 	      if ( i - j >= 12 )
3289:src/display.c **** #endif
3290:src/display.c **** 		{
3291:src/display.c **** 		buf[ (i - j) ] = '\0';
3292:src/display.c **** 		set_status_right(buf);
3293:src/display.c **** 		}
3294:src/display.c **** 	      else {
3295:src/display.c **** 		set_status(buf);
3296:src/display.c **** 	      }
3297:src/display.c **** 	    } else {
3298:src/display.c **** 	      if (shift != SHIFT_N) {
3299:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3300:src/display.c **** 		*bp++ = '\0';
3301:src/display.c **** 	      }
3302:src/display.c **** 	      set_status_right(buf);
3303:src/display.c **** 	    }
3304:src/display.c **** 	  } else {
3305:src/display.c **** 	    annuc = 1;
3306:src/display.c **** 	  }
3307:src/display.c **** 	} else {
3308:src/display.c **** #ifndef DM42
3309:src/display.c **** 	  show_progtrace(buf);
3310:src/display.c **** #endif
3311:src/display.c **** 	  i = state_pc();
3312:src/display.c **** 	  if (i > 0)
3313:src/display.c **** 	    set_status(prt(getprog(i), buf));
3314:src/display.c **** 	  else
3315:src/display.c **** 	    set_status("");
3316:src/display.c **** 	  set_dot(STO_annun);
3317:src/display.c **** #if 0
3318:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3319:src/display.c **** 	    unsigned short int crc;
3320:src/display.c **** 	    crc = checksum_program();
3321:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3322:src/display.c **** 	    for (i=0; i<4; i++) {
3323:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3324:src/display.c **** 	      crc >>= 4;
3325:src/display.c **** 	      j += SEGS_PER_DIGIT;
3326:src/display.c **** 	    }
3327:src/display.c **** 	    skip = 1;
3328:src/display.c **** 	  }
3329:src/display.c **** 	  else
3330:src/display.c **** #endif
3331:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3332:src/display.c **** 	      annuc = 1;
3333:src/display.c **** 	  goto nostk;
3334:src/display.c **** 	}
3335:src/display.c **** 	show_stack();
3336:src/display.c ****       nostk:	show_flags();
3337:src/display.c **** 	if (!skip) {
3338:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/cc9o0abE.s 			page 73


3339:src/display.c **** 	  only_update_x:
3340:src/display.c **** 	    p = get_cmdline();
3341:src/display.c **** 	    if (p == NULL || cata) {
3342:src/display.c **** 	      if (ShowRegister != -1) {
3343:src/display.c **** #ifdef INCLUDE_C_LOCK
3344:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3345:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
3346:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3347:src/display.c **** 		    SET_POLAR_READY;
3348:src/display.c **** 		  }
3349:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3350:src/display.c **** 		    State2.hms = 0;
3351:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3352:src/display.c **** 		    State2.hms = 1;
3353:src/display.c **** 		  }
3354:src/display.c **** 		  else {
3355:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3356:src/display.c **** 		  }
3357:src/display.c **** 		  x_disp = 1;
3358:src/display.c **** 		}
3359:src/display.c **** 		else {
3360:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3361:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3362:src/display.c **** 		}
3363:src/display.c **** #else
3364:src/display.c **** 
3365:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3366:src/display.c **** 		format_reg(ShowRegister, CNULL);
3367:src/display.c **** #endif
3368:src/display.c **** 	      }
3369:src/display.c **** 	      else
3370:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3371:src/display.c **** 	    } else {
3372:src/display.c **** 	      disp_x(p);
3373:src/display.c **** 	      x_disp = 1;
3374:src/display.c **** 	    }
3375:src/display.c **** 	    if (WasDataEntry) {
3376:src/display.c **** 	      goto finish;
3377:src/display.c **** 	    }
3378:src/display.c **** 	  } else {
3379:src/display.c **** 	    unsigned int pc = state_pc();
3380:src/display.c **** 	    unsigned int upc = user_pc(pc);
3381:src/display.c **** 	    const int n = nLIB(pc);
3382:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3383:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3384:src/display.c **** #ifdef FOUR_K
3385:src/display.c **** 	    if ((upc<1000) && n == 0) {
3386:src/display.c **** 	      num_arg_0(scopy_spc(buf, S7_STEP), upc, 3);
3387:src/display.c **** 	    }
3388:src/display.c **** 	    else {
3389:src/display.c **** 	      num_arg_0(scopy(buf, n == 0 ? S7_STEP : libname[n]), 
3390:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
3391:src/display.c **** 	    }	      
3392:src/display.c **** #else
3393:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3394:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3395:src/display.c **** #endif
ARM GAS  /tmp/cc9o0abE.s 			page 74


3396:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3397:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
3398:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3399:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3400:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3401:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3402:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3403:src/display.c **** 	      char *b=buf;
3404:src/display.c **** 	      char *l=LastDisplayedNumber;
3405:src/display.c **** 	      *l++=' ';
3406:src/display.c **** 	      while(*b) {
3407:src/display.c **** 		*l++=*b++;
3408:src/display.c **** 		*l++=' ';
3409:src/display.c **** 	      }
3410:src/display.c **** 	      *l=0;
3411:src/display.c **** 	    }
3412:src/display.c **** #endif
3413:src/display.c **** 	  }
3414:src/display.c **** 	}
3415:src/display.c **** 	set_annunciators();
3416:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3417:src/display.c **** 	  ShowRPN = 0;
3418:src/display.c **** 	  dot(RPN, 0);
3419:src/display.c **** 	}
3420:src/display.c **** 	// disp_temp disables the <- key
3421:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3422:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3423:src/display.c **** 
3424:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3425:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3426:src/display.c **** 	  annunciators();
3427:src/display.c ****  	State2.hms = 0;
3428:src/display.c **** #else
3429:src/display.c **** 
3430:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3431:src/display.c **** 	  annunciators();
3432:src/display.c **** 	
3433:src/display.c **** 
3434:src/display.c **** 
3435:src/display.c **** #endif
3436:src/display.c **** 
3437:src/display.c ****       finish:
3438:src/display.c **** 	State2.version = 0;
3439:src/display.c **** 	State2.disp_as_alpha = 0;
3440:src/display.c **** 	State2.smode = SDISP_NORMAL;
3441:src/display.c **** 	State2.invalid_disp = 0;
3442:src/display.c **** 	ShowRegister = regX_idx;
3443:src/display.c **** 	DispMsg = CNULL;
3444:src/display.c **** 	DispPlot = 0;
3445:src/display.c **** 	State2.disp_small = 0;
3446:src/display.c **** 	finish_display();
3447:src/display.c **** #ifdef CONSOLE
3448:src/display.c **** 	JustDisplayed = 1;
3449:src/display.c **** #endif
3450:src/display.c ****       }
3451:src/display.c **** #endif
3452:src/display.c ****       /*
ARM GAS  /tmp/cc9o0abE.s 			page 75


3453:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3454:src/display.c ****        */
3455:src/display.c ****       void frozen_display()
3456:src/display.c ****       {
3457:src/display.c **** 	State2.disp_freeze = 0;
3458:src/display.c **** 	display();
3459:src/display.c **** 	State2.disp_freeze = 1;
3460:src/display.c ****       }
3461:src/display.c **** 
3462:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3463:src/display.c **** 	int glen = *graphic++;
3464:src/display.c **** 	int i, j;
3465:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3466:src/display.c **** 	unsigned long long int mat[6];
3467:src/display.c **** 
3468:src/display.c **** 	xset(mat, 0, sizeof(mat));
3469:src/display.c **** #endif
3470:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
3471:src/display.c **** 	forceDispPlot=1;
3472:src/display.c **** #endif
3473:src/display.c **** 	if (glen <= 0)			return;
3474:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3475:src/display.c **** 
3476:src/display.c **** 	for (i=0; i<6; i++)
3477:src/display.c **** 	  for (j=1; j<=glen; j++) {
3478:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3479:src/display.c **** 	    if (graphic[j] & (1 << i))
3480:src/display.c **** 	      mat[i] |= 1LL << j;
3481:src/display.c **** #else
3482:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3483:src/display.c **** #endif
3484:src/display.c **** 	  }
3485:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3486:src/display.c **** 	set_status_grob(mat);
3487:src/display.c **** #endif
3488:src/display.c ****       }
3489:src/display.c **** 
3490:src/display.c **** 
3491:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3492:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3493:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3494:src/display.c ****        * column is almost always blank.
3495:src/display.c ****        */
3496:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3497:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3498:src/display.c ****       }
3499:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3500:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3501:src/display.c ****       }
3502:src/display.c **** 
3503:src/display.c ****       
3504:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 642              		.loc 1 3504 85 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 4, pretend = 0, frame = 560
 645              		@ frame_needed = 0, uses_anonymous_args = 0
3505:src/display.c **** 	unsigned short int posns[257];
ARM GAS  /tmp/cc9o0abE.s 			page 76


 646              		.loc 1 3505 2 view .LVU191
3506:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3507:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3508:src/display.c **** 	int posns_state = 255;
 647              		.loc 1 3508 2 view .LVU192
3509:src/display.c **** #endif
3510:src/display.c **** 	unsigned int x = 0;
 648              		.loc 1 3510 2 view .LVU193
3511:src/display.c **** 	int i, j;
 649              		.loc 1 3511 2 view .LVU194
3512:src/display.c **** 	const int offset = smallp ? 256 : 0;
 650              		.loc 1 3512 2 view .LVU195
3504:src/display.c **** 	unsigned short int posns[257];
 651              		.loc 1 3504 85 is_stmt 0 view .LVU196
 652 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 653              		.cfi_def_cfa_offset 36
 654              		.cfi_offset 4, -36
 655              		.cfi_offset 5, -32
 656              		.cfi_offset 6, -28
 657              		.cfi_offset 7, -24
 658              		.cfi_offset 8, -20
 659              		.cfi_offset 9, -16
 660              		.cfi_offset 10, -12
 661              		.cfi_offset 11, -8
 662              		.cfi_offset 14, -4
 663 0004 ADF50D7D 		sub	sp, sp, #564
 664              		.cfi_def_cfa_offset 600
3513:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3514:src/display.c **** 	unsigned long long int mat[6];
3515:src/display.c **** 
3516:src/display.c **** 	xset(mat, 0, sizeof(mat));
3517:src/display.c **** #endif
3518:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
3519:src/display.c **** 	scopy(LastDisplayedText, str);
3520:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3521:src/display.c **** 	for (i = 0; LastDisplayedText[i] != '\0'; ) { // Remove 007 escapes
3522:src/display.c **** 	  if (LastDisplayedText[i] == '\007' && LastDisplayedText[i + 1] != '\0') {
3523:src/display.c **** 	    scopy(LastDisplayedText + i, LastDisplayedText + i + 2);
3524:src/display.c **** 	    if (LastDisplayedText[i] != '\0')
3525:src/display.c **** 	      ++i;
3526:src/display.c **** 	  }
3527:src/display.c **** 	  else {
3528:src/display.c **** 	    ++i;
3529:src/display.c **** 	  }
3530:src/display.c **** 	}
3531:src/display.c **** #endif
3532:src/display.c **** 	forceDispPlot=0;
3533:src/display.c **** #endif
3534:src/display.c **** #ifdef RP_PREFIX
3535:src/display.c **** 	RectPolConv = 0;
 665              		.loc 1 3535 14 view .LVU197
 666 0008 5B4C     		ldr	r4, .L99
3504:src/display.c **** 	unsigned short int posns[257];
 667              		.loc 1 3504 85 view .LVU198
 668 000a 0390     		str	r0, [sp, #12]
 669 000c 0546     		mov	r5, r0
 670              		.loc 1 3535 14 view .LVU199
ARM GAS  /tmp/cc9o0abE.s 			page 77


 671 000e 0020     		movs	r0, #0
 672              	.LVL57:
 673              		.loc 1 3535 14 view .LVU200
 674 0010 2060     		str	r0, [r4]
3512:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 675              		.loc 1 3512 34 view .LVU201
 676 0012 0029     		cmp	r1, #0
3536:src/display.c **** #endif
3537:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3538:src/display.c **** 	findlengths(posns, smallp);
3539:src/display.c **** #endif
3540:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 677              		.loc 1 3540 9 view .LVU202
 678 0014 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
3504:src/display.c **** 	unsigned short int posns[257];
 679              		.loc 1 3504 85 view .LVU203
 680 0016 CDE90531 		strd	r3, r1, [sp, #20]
3512:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 681              		.loc 1 3512 34 view .LVU204
 682 001a 14BF     		ite	ne
 683 001c 4FF48073 		movne	r3, #256
 684              	.LVL58:
3512:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 685              		.loc 1 3512 34 view .LVU205
 686 0020 0346     		moveq	r3, r0
 687 0022 0793     		str	r3, [sp, #28]
 688              	.LVL59:
3535:src/display.c **** #endif
 689              		.loc 1 3535 2 is_stmt 1 view .LVU206
 690              		.loc 1 3540 2 view .LVU207
 691              		.loc 1 3540 8 view .LVU208
 692 0024 002E     		cmp	r6, #0
 693 0026 00F0A480 		beq	.L95
 694              		.loc 1 3540 33 is_stmt 0 view .LVU209
 695 002a 531C     		adds	r3, r2, #1
 696              	.LVL60:
 697              	.LBB184:
3541:src/display.c **** 	  int c;
3542:src/display.c **** 	  int width;
3543:src/display.c **** 	  unsigned char cmap[6];
3544:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3545:src/display.c **** 	  int real_width;
3546:src/display.c **** 	  int current_smallp;
3547:src/display.c **** 
3548:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
3549:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3550:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3551:src/display.c **** 	  //           01 -> (not used)
3552:src/display.c **** 	  //           10 -> use big font
3553:src/display.c **** 	  //           11 -> use small font
3554:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3555:src/display.c **** 	  if (str[0] == '\007') {
 698              		.loc 1 3555 7 view .LVU210
 699 002c 072E     		cmp	r6, #7
 700 002e 9246     		mov	r10, r2
 701              	.LBE184:
3510:src/display.c **** 	int i, j;
ARM GAS  /tmp/cc9o0abE.s 			page 78


 702              		.loc 1 3510 15 view .LVU211
 703 0030 8046     		mov	r8, r0
3540:src/display.c **** 	  int c;
 704              		.loc 1 3540 33 view .LVU212
 705 0032 0493     		str	r3, [sp, #16]
3508:src/display.c **** #endif
 706              		.loc 1 3508 6 view .LVU213
 707 0034 4FF0FF04 		mov	r4, #255
 708              	.LVL61:
 709              	.LBB193:
3541:src/display.c **** 	  int width;
 710              		.loc 1 3541 4 is_stmt 1 view .LVU214
3542:src/display.c **** 	  unsigned char cmap[6];
 711              		.loc 1 3542 4 view .LVU215
3543:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 712              		.loc 1 3543 4 view .LVU216
3545:src/display.c **** 	  int current_smallp;
 713              		.loc 1 3545 4 view .LVU217
3546:src/display.c **** 
 714              		.loc 1 3546 4 view .LVU218
 715              		.loc 1 3555 4 view .LVU219
 716              		.loc 1 3555 7 is_stmt 0 view .LVU220
 717 0038 69D1     		bne	.L63
 718              	.LVL62:
 719              	.L97:
3556:src/display.c **** 	    width = str[1] & 0x1F;
 720              		.loc 1 3556 6 is_stmt 1 view .LVU221
 721              		.loc 1 3556 17 is_stmt 0 view .LVU222
 722 003a 039B     		ldr	r3, [sp, #12]
 723 003c 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 724 003e 05F06003 		and	r3, r5, #96
3557:src/display.c **** 	    switch (str[1] & 0x60) {
 725              		.loc 1 3557 6 view .LVU223
 726 0042 402B     		cmp	r3, #64
3556:src/display.c **** 	    width = str[1] & 0x1F;
 727              		.loc 1 3556 12 view .LVU224
 728 0044 05F01F05 		and	r5, r5, #31
 729              	.LVL63:
 730              		.loc 1 3557 6 is_stmt 1 view .LVU225
 731 0048 00F08480 		beq	.L64
 732 004c 602B     		cmp	r3, #96
 733 004e 00F08680 		beq	.L65
 734              	.LVL64:
3558:src/display.c **** 	    default:
3559:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3560:src/display.c **** 	      break;
3561:src/display.c **** 	    case 0x40:	current_smallp = 0;
3562:src/display.c **** 	      break;
3563:src/display.c **** 	    case 0x60:	current_smallp = 1;
3564:src/display.c **** 	      break;
3565:src/display.c **** 	    }
3566:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
 735              		.loc 1 3566 6 view .LVU226
 736              		.loc 1 3566 10 is_stmt 0 view .LVU227
 737 0052 039B     		ldr	r3, [sp, #12]
 738 0054 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 739              		.loc 1 3566 57 view .LVU228
ARM GAS  /tmp/cc9o0abE.s 			page 79


 740 0056 069B     		ldr	r3, [sp, #24]
 741 0058 002B     		cmp	r3, #0
 742 005a 00F08780 		beq	.L83
 743 005e 06F58076 		add	r6, r6, #256
 744 0062 0293     		str	r3, [sp, #8]
 745              	.LVL65:
 746              	.L67:
3567:src/display.c **** 	    str += 3;
 747              		.loc 1 3567 6 is_stmt 1 discriminator 4 view .LVU229
3568:src/display.c **** 
3569:src/display.c **** 	    real_width = charlengths(c);
 748              		.loc 1 3569 19 is_stmt 0 discriminator 4 view .LVU230
 749 0064 3046     		mov	r0, r6
 750 0066 FFF7FEFF 		bl	charlengths
 751              	.LVL66:
3567:src/display.c **** 	    str += 3;
 752              		.loc 1 3567 10 discriminator 4 view .LVU231
 753 006a 039B     		ldr	r3, [sp, #12]
 754 006c 0333     		adds	r3, r3, #3
 755 006e 0393     		str	r3, [sp, #12]
 756              	.LVL67:
 757              		.loc 1 3569 6 is_stmt 1 discriminator 4 view .LVU232
3570:src/display.c **** 	  } else {
3571:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3572:src/display.c **** 	    real_width = width = charlengths(c);
3573:src/display.c **** 	    current_smallp = smallp;
3574:src/display.c **** 	  }
3575:src/display.c **** 
3576:src/display.c **** 	  if (x + real_width > b_w + 1)
 758              		.loc 1 3576 4 discriminator 4 view .LVU233
 759              		.loc 1 3576 7 is_stmt 0 discriminator 4 view .LVU234
 760 0070 049B     		ldr	r3, [sp, #16]
 761              	.LVL68:
 762              		.loc 1 3576 10 discriminator 4 view .LVU235
 763 0072 4044     		add	r0, r0, r8
 764              		.loc 1 3576 7 discriminator 4 view .LVU236
 765 0074 9842     		cmp	r0, r3
 766 0076 59D8     		bhi	.L94
 767              	.L98:
3577:src/display.c **** 	    break;
3578:src/display.c **** 
3579:src/display.c **** 	  if (posns_state != current_smallp) {
 768              		.loc 1 3579 4 is_stmt 1 view .LVU237
 769              		.loc 1 3579 7 is_stmt 0 view .LVU238
 770 0078 029B     		ldr	r3, [sp, #8]
 771 007a A342     		cmp	r3, r4
3580:src/display.c **** 	    findlengths(posns, current_smallp);
 772              		.loc 1 3580 6 view .LVU239
 773 007c 0BAB     		add	r3, sp, #44
3579:src/display.c **** 	    findlengths(posns, current_smallp);
 774              		.loc 1 3579 7 view .LVU240
 775 007e 05D0     		beq	.L70
 776              		.loc 1 3580 6 is_stmt 1 view .LVU241
 777 0080 1846     		mov	r0, r3
 778 0082 0299     		ldr	r1, [sp, #8]
 779 0084 0193     		str	r3, [sp, #4]
 780 0086 FFF7FEFF 		bl	findlengths
ARM GAS  /tmp/cc9o0abE.s 			page 80


 781              	.LVL69:
 782 008a 019B     		ldr	r3, [sp, #4]
3581:src/display.c **** 	    posns_state = current_smallp;
 783              		.loc 1 3581 6 view .LVU242
 784              	.LVL70:
 785              	.L70:
3582:src/display.c **** 	  }
3583:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 786              		.loc 1 3583 4 view .LVU243
 787 008c 029A     		ldr	r2, [sp, #8]
 788 008e 3046     		mov	r0, r6
 789 0090 09A9     		add	r1, sp, #36
 790 0092 FFF7FEFF 		bl	unpackchar
 791              	.LVL71:
3584:src/display.c **** #else
3585:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3586:src/display.c **** 
3587:src/display.c **** 	  //cmap = &charset[c][0];
3588:src/display.c **** 	  width = charlengths(c);
3589:src/display.c **** 
3590:src/display.c **** 	  if (x + width > b_w+1)
3591:src/display.c **** 	    break;
3592:src/display.c **** 
3593:src/display.c **** 	  /* Decode the packed character bytes */
3594:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3595:src/display.c **** #endif
3596:src/display.c **** 
3597:src/display.c **** 	  for (i=0; i<6; i++)
 792              		.loc 1 3597 4 view .LVU244
 793              		.loc 1 3597 14 view .LVU245
 794 0096 059B     		ldr	r3, [sp, #20]
 795 0098 08EB4809 		add	r9, r8, r8, lsl #1
 796 009c 03EB4903 		add	r3, r3, r9, lsl #1
 797 00a0 09AC     		add	r4, sp, #36
 798 00a2 0193     		str	r3, [sp, #4]
 799              		.loc 1 3597 10 is_stmt 0 view .LVU246
 800 00a4 0027     		movs	r7, #0
 801 00a6 AAEB0806 		sub	r6, r10, r8
 802              	.LVL72:
 803              	.L71:
3598:src/display.c **** 	    for (j=0; j<width; j++) {
 804              		.loc 1 3598 16 is_stmt 1 view .LVU247
 805              		.loc 1 3598 6 is_stmt 0 view .LVU248
 806 00aa 002D     		cmp	r5, #0
 807 00ac 20DD     		ble	.L77
3599:src/display.c **** 	      if (x+j >= b_w)
 808              		.loc 1 3599 8 is_stmt 1 view .LVU249
 809              		.loc 1 3599 11 is_stmt 0 view .LVU250
 810 00ae C245     		cmp	r10, r8
 811 00b0 1ED9     		bls	.L77
 812 00b2 019B     		ldr	r3, [sp, #4]
3598:src/display.c **** 	    for (j=0; j<width; j++) {
 813              		.loc 1 3598 12 view .LVU251
 814 00b4 4FF00009 		mov	r9, #0
 815 00b8 07EB030B 		add	fp, r7, r3
 816 00bc 09E0     		b	.L72
 817              	.LVL73:
ARM GAS  /tmp/cc9o0abE.s 			page 81


 818              	.L96:
3598:src/display.c **** 	    for (j=0; j<width; j++) {
 819              		.loc 1 3598 26 view .LVU252
 820 00be 09F10109 		add	r9, r9, #1
 821              	.LVL74:
 822              	.LBB185:
 823              	.LBB186:
 348:src/display.c ****   else	clr_dot(n);
 824              		.loc 1 348 11 view .LVU253
 825 00c2 FFF7FEFF 		bl	set_dot
 826              	.LVL75:
 348:src/display.c ****   else	clr_dot(n);
 827              		.loc 1 348 11 view .LVU254
 828              	.LBE186:
 829              	.LBE185:
 830              		.loc 1 3599 8 is_stmt 1 view .LVU255
3598:src/display.c **** 	    for (j=0; j<width; j++) {
 831              		.loc 1 3598 25 view .LVU256
3598:src/display.c **** 	    for (j=0; j<width; j++) {
 832              		.loc 1 3598 16 view .LVU257
3598:src/display.c **** 	    for (j=0; j<width; j++) {
 833              		.loc 1 3598 6 is_stmt 0 view .LVU258
 834 00c6 4D45     		cmp	r5, r9
 835 00c8 0BF1060B 		add	fp, fp, #6
 836 00cc 10D0     		beq	.L77
 837              	.L76:
 838              		.loc 1 3599 11 view .LVU259
 839 00ce 4E45     		cmp	r6, r9
 840 00d0 0ED0     		beq	.L77
 841              	.LVL76:
 842              	.L72:
3600:src/display.c **** 		break;
3601:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3602:src/display.c **** 	      if (cmap[i] & (1 << j))
3603:src/display.c **** 		mat[i] |= 1LL << (x+j);
3604:src/display.c **** #else
3605:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 843              		.loc 1 3605 8 is_stmt 1 discriminator 2 view .LVU260
 844              	.LBB190:
 845              	.LBI185:
 347:src/display.c ****   if (on)	set_dot(n);
 846              		.loc 1 347 6 discriminator 2 view .LVU261
 847              	.LBB187:
 348:src/display.c ****   else	clr_dot(n);
 848              		.loc 1 348 3 discriminator 2 view .LVU262
 348:src/display.c ****   else	clr_dot(n);
 849              		.loc 1 348 11 discriminator 2 view .LVU263
 349:src/display.c **** }
 850              		.loc 1 349 8 discriminator 2 view .LVU264
 851              	.LBE187:
 852              	.LBE190:
 853              		.loc 1 3605 32 is_stmt 0 discriminator 2 view .LVU265
 854 00d2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 855              		.loc 1 3605 47 discriminator 2 view .LVU266
 856 00d4 43FA09F3 		asr	r3, r3, r9
 857              	.LBB191:
 858              	.LBB188:
ARM GAS  /tmp/cc9o0abE.s 			page 82


 348:src/display.c ****   else	clr_dot(n);
 859              		.loc 1 348 6 discriminator 2 view .LVU267
 860 00d8 13F0010F 		tst	r3, #1
 348:src/display.c ****   else	clr_dot(n);
 861              		.loc 1 348 11 discriminator 2 view .LVU268
 862 00dc 5846     		mov	r0, fp
 348:src/display.c ****   else	clr_dot(n);
 863              		.loc 1 348 6 discriminator 2 view .LVU269
 864 00de EED1     		bne	.L96
 865              	.LBE188:
 866              	.LBE191:
3598:src/display.c **** 	      if (x+j >= b_w)
 867              		.loc 1 3598 26 view .LVU270
 868 00e0 09F10109 		add	r9, r9, #1
 869              	.LVL77:
 870              	.LBB192:
 871              	.LBB189:
 349:src/display.c **** }
 872              		.loc 1 349 8 view .LVU271
 873 00e4 FFF7FEFF 		bl	clr_dot
 874              	.LVL78:
 349:src/display.c **** }
 875              		.loc 1 349 8 view .LVU272
 876              	.LBE189:
 877              	.LBE192:
3599:src/display.c **** 		break;
 878              		.loc 1 3599 8 is_stmt 1 view .LVU273
3598:src/display.c **** 	      if (x+j >= b_w)
 879              		.loc 1 3598 25 view .LVU274
3598:src/display.c **** 	      if (x+j >= b_w)
 880              		.loc 1 3598 16 view .LVU275
3598:src/display.c **** 	      if (x+j >= b_w)
 881              		.loc 1 3598 6 is_stmt 0 view .LVU276
 882 00e8 4D45     		cmp	r5, r9
 883 00ea 0BF1060B 		add	fp, fp, #6
 884 00ee EED1     		bne	.L76
 885              	.LVL79:
 886              	.L77:
3597:src/display.c **** 	    for (j=0; j<width; j++) {
 887              		.loc 1 3597 19 is_stmt 1 view .LVU277
3597:src/display.c **** 	    for (j=0; j<width; j++) {
 888              		.loc 1 3597 20 is_stmt 0 view .LVU278
 889 00f0 0137     		adds	r7, r7, #1
 890              	.LVL80:
3597:src/display.c **** 	    for (j=0; j<width; j++) {
 891              		.loc 1 3597 14 is_stmt 1 view .LVU279
3597:src/display.c **** 	    for (j=0; j<width; j++) {
 892              		.loc 1 3597 4 is_stmt 0 view .LVU280
 893 00f2 062F     		cmp	r7, #6
 894 00f4 04F10104 		add	r4, r4, #1
 895 00f8 D7D1     		bne	.L71
3606:src/display.c **** #endif
3607:src/display.c **** 	    }
3608:src/display.c **** 	  x += width;
 896              		.loc 1 3608 4 is_stmt 1 view .LVU281
 897              	.LBE193:
3540:src/display.c **** 	  int c;
ARM GAS  /tmp/cc9o0abE.s 			page 83


 898              		.loc 1 3540 9 is_stmt 0 view .LVU282
 899 00fa 039B     		ldr	r3, [sp, #12]
 900 00fc 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 901              	.LBB194:
 902              		.loc 1 3608 6 view .LVU283
 903 00fe A844     		add	r8, r8, r5
 904              	.LVL81:
 905              		.loc 1 3608 6 view .LVU284
 906              	.LBE194:
3540:src/display.c **** 	  int c;
 907              		.loc 1 3540 8 is_stmt 1 view .LVU285
 908 0100 A6B1     		cbz	r6, .L94
3540:src/display.c **** 	  int c;
 909              		.loc 1 3540 22 is_stmt 0 discriminator 1 view .LVU286
 910 0102 049B     		ldr	r3, [sp, #16]
 911              	.LVL82:
3540:src/display.c **** 	  int c;
 912              		.loc 1 3540 22 discriminator 1 view .LVU287
 913 0104 9845     		cmp	r8, r3
 914 0106 11D8     		bhi	.L94
 915              	.LBB195:
3555:src/display.c **** 	    width = str[1] & 0x1F;
 916              		.loc 1 3555 7 view .LVU288
 917 0108 072E     		cmp	r6, #7
 918              	.LBE195:
 919 010a 029C     		ldr	r4, [sp, #8]
 920              	.LBB196:
3541:src/display.c **** 	  int width;
 921              		.loc 1 3541 4 is_stmt 1 view .LVU289
3542:src/display.c **** 	  unsigned char cmap[6];
 922              		.loc 1 3542 4 view .LVU290
3543:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 923              		.loc 1 3543 4 view .LVU291
3545:src/display.c **** 	  int current_smallp;
 924              		.loc 1 3545 4 view .LVU292
3546:src/display.c **** 
 925              		.loc 1 3546 4 view .LVU293
3555:src/display.c **** 	    width = str[1] & 0x1F;
 926              		.loc 1 3555 4 view .LVU294
3555:src/display.c **** 	    width = str[1] & 0x1F;
 927              		.loc 1 3555 7 is_stmt 0 view .LVU295
 928 010c 95D0     		beq	.L97
 929              	.LVL83:
 930              	.L63:
3571:src/display.c **** 	    real_width = width = charlengths(c);
 931              		.loc 1 3571 6 is_stmt 1 view .LVU296
3571:src/display.c **** 	    real_width = width = charlengths(c);
 932              		.loc 1 3571 8 is_stmt 0 view .LVU297
 933 010e 079B     		ldr	r3, [sp, #28]
 934 0110 1E44     		add	r6, r6, r3
3572:src/display.c **** 	    current_smallp = smallp;
 935              		.loc 1 3572 27 view .LVU298
 936 0112 3046     		mov	r0, r6
 937 0114 FFF7FEFF 		bl	charlengths
 938              	.LVL84:
3571:src/display.c **** 	    real_width = width = charlengths(c);
 939              		.loc 1 3571 30 view .LVU299
ARM GAS  /tmp/cc9o0abE.s 			page 84


 940 0118 039B     		ldr	r3, [sp, #12]
 941 011a 0133     		adds	r3, r3, #1
 942 011c 0393     		str	r3, [sp, #12]
 943              	.LVL85:
3572:src/display.c **** 	    current_smallp = smallp;
 944              		.loc 1 3572 6 is_stmt 1 view .LVU300
3572:src/display.c **** 	    current_smallp = smallp;
 945              		.loc 1 3572 25 is_stmt 0 view .LVU301
 946 011e 069B     		ldr	r3, [sp, #24]
 947              	.LVL86:
3572:src/display.c **** 	    current_smallp = smallp;
 948              		.loc 1 3572 25 view .LVU302
 949 0120 0293     		str	r3, [sp, #8]
3576:src/display.c **** 	    break;
 950              		.loc 1 3576 7 view .LVU303
 951 0122 049B     		ldr	r3, [sp, #16]
3572:src/display.c **** 	    current_smallp = smallp;
 952              		.loc 1 3572 25 view .LVU304
 953 0124 0546     		mov	r5, r0
 954              	.LVL87:
3573:src/display.c **** 	  }
 955              		.loc 1 3573 6 is_stmt 1 view .LVU305
3576:src/display.c **** 	    break;
 956              		.loc 1 3576 4 view .LVU306
3576:src/display.c **** 	    break;
 957              		.loc 1 3576 10 is_stmt 0 view .LVU307
 958 0126 4044     		add	r0, r0, r8
 959              	.LVL88:
3576:src/display.c **** 	    break;
 960              		.loc 1 3576 7 view .LVU308
 961 0128 9842     		cmp	r0, r3
 962 012a A5D9     		bls	.L98
 963              	.LVL89:
 964              	.L94:
3576:src/display.c **** 	    break;
 965              		.loc 1 3576 7 view .LVU309
 966 012c 059B     		ldr	r3, [sp, #20]
 967 012e 08EB4808 		add	r8, r8, r8, lsl #1
 968              	.LVL90:
3576:src/display.c **** 	    break;
 969              		.loc 1 3576 7 view .LVU310
 970 0132 03EB4808 		add	r8, r3, r8, lsl #1
 971              	.LVL91:
 972              	.L62:
3576:src/display.c **** 	    break;
 973              		.loc 1 3576 7 view .LVU311
 974              	.LBE196:
3609:src/display.c **** 	}
3610:src/display.c **** 
3611:src/display.c **** 
3612:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3613:src/display.c **** 	set_status_grob(mat);
3614:src/display.c **** #else
3615:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 975              		.loc 1 3615 2 is_stmt 1 view .LVU312
 976              		.loc 1 3615 20 view .LVU313
 977              		.loc 1 3615 2 is_stmt 0 view .LVU314
ARM GAS  /tmp/cc9o0abE.s 			page 85


 978 0136 969B     		ldr	r3, [sp, #600]
 979 0138 9845     		cmp	r8, r3
 980 013a 07DA     		bge	.L59
 981 013c 1C46     		mov	r4, r3
 982              	.L80:
3616:src/display.c **** 	  clr_dot(i);
 983              		.loc 1 3616 4 is_stmt 1 discriminator 3 view .LVU315
 984 013e 4046     		mov	r0, r8
3615:src/display.c **** 	  clr_dot(i);
 985              		.loc 1 3615 28 is_stmt 0 discriminator 3 view .LVU316
 986 0140 08F10108 		add	r8, r8, #1
 987              	.LVL92:
 988              		.loc 1 3616 4 discriminator 3 view .LVU317
 989 0144 FFF7FEFF 		bl	clr_dot
 990              	.LVL93:
3615:src/display.c **** 	  clr_dot(i);
 991              		.loc 1 3615 27 is_stmt 1 discriminator 3 view .LVU318
3615:src/display.c **** 	  clr_dot(i);
 992              		.loc 1 3615 20 discriminator 3 view .LVU319
3615:src/display.c **** 	  clr_dot(i);
 993              		.loc 1 3615 2 is_stmt 0 discriminator 3 view .LVU320
 994 0148 4445     		cmp	r4, r8
 995 014a F8D1     		bne	.L80
 996              	.L59:
3617:src/display.c **** #endif
3618:src/display.c ****       }
 997              		.loc 1 3618 7 view .LVU321
 998 014c 0DF50D7D 		add	sp, sp, #564
 999              		.cfi_remember_state
 1000              		.cfi_def_cfa_offset 36
 1001              		@ sp needed
 1002 0150 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1003              	.LVL94:
 1004              	.L64:
 1005              		.cfi_restore_state
 1006              	.LBB197:
3561:src/display.c **** 	      break;
 1007              		.loc 1 3561 17 is_stmt 1 view .LVU322
3562:src/display.c **** 	    case 0x60:	current_smallp = 1;
 1008              		.loc 1 3562 8 view .LVU323
3566:src/display.c **** 	    str += 3;
 1009              		.loc 1 3566 6 view .LVU324
3566:src/display.c **** 	    str += 3;
 1010              		.loc 1 3566 10 is_stmt 0 view .LVU325
 1011 0154 039B     		ldr	r3, [sp, #12]
 1012 0156 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3561:src/display.c **** 	      break;
 1013              		.loc 1 3561 32 view .LVU326
 1014 0158 0023     		movs	r3, #0
 1015 015a 0293     		str	r3, [sp, #8]
 1016 015c 82E7     		b	.L67
 1017              	.LVL95:
 1018              	.L65:
3563:src/display.c **** 	      break;
 1019              		.loc 1 3563 17 is_stmt 1 view .LVU327
3564:src/display.c **** 	    }
 1020              		.loc 1 3564 8 view .LVU328
ARM GAS  /tmp/cc9o0abE.s 			page 86


3566:src/display.c **** 	    str += 3;
 1021              		.loc 1 3566 6 view .LVU329
3566:src/display.c **** 	    str += 3;
 1022              		.loc 1 3566 10 is_stmt 0 view .LVU330
 1023 015e 039B     		ldr	r3, [sp, #12]
 1024 0160 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
3563:src/display.c **** 	      break;
 1025              		.loc 1 3563 32 view .LVU331
 1026 0162 0123     		movs	r3, #1
 1027 0164 0293     		str	r3, [sp, #8]
 1028 0166 06F58076 		add	r6, r6, #256
 1029 016a 7BE7     		b	.L67
 1030              	.LVL96:
 1031              	.L83:
3563:src/display.c **** 	      break;
 1032              		.loc 1 3563 32 view .LVU332
 1033 016c 069B     		ldr	r3, [sp, #24]
 1034              	.LVL97:
3563:src/display.c **** 	      break;
 1035              		.loc 1 3563 32 view .LVU333
 1036 016e 0293     		str	r3, [sp, #8]
 1037 0170 78E7     		b	.L67
 1038              	.LVL98:
 1039              	.L95:
3563:src/display.c **** 	      break;
 1040              		.loc 1 3563 32 view .LVU334
 1041 0172 DDF81480 		ldr	r8, [sp, #20]
 1042 0176 DEE7     		b	.L62
 1043              	.L100:
 1044              		.align	2
 1045              	.L99:
 1046 0178 00000000 		.word	RectPolConv
 1047              	.LBE197:
 1048              		.cfi_endproc
 1049              	.LFE35:
 1051              		.section	.text.set_exp,"ax",%progbits
 1052              		.align	1
 1053              		.p2align 2,,3
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	set_exp:
 1060              	.LVL99:
 1061              	.LFB10:
 450:src/display.c ****   union {
 1062              		.loc 1 450 52 is_stmt 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 8
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 451:src/display.c ****     char buf[4];
 1066              		.loc 1 451 3 view .LVU336
 455:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 1067              		.loc 1 455 3 view .LVU337
 457:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 1068              		.loc 1 457 3 view .LVU338
 463:src/display.c **** #  endif
ARM GAS  /tmp/cc9o0abE.s 			page 87


 1069              		.loc 1 463 3 view .LVU339
 472:src/display.c ****   if (exp < 0) {
 1070              		.loc 1 472 3 view .LVU340
 450:src/display.c ****   union {
 1071              		.loc 1 450 52 is_stmt 0 view .LVU341
 1072 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1073              		.cfi_def_cfa_offset 20
 1074              		.cfi_offset 4, -20
 1075              		.cfi_offset 5, -16
 1076              		.cfi_offset 6, -12
 1077              		.cfi_offset 7, -8
 1078              		.cfi_offset 14, -4
 473:src/display.c ****     negative = 1;
 1079              		.loc 1 473 6 view .LVU342
 1080 0002 051E     		subs	r5, r0, #0
 450:src/display.c ****   union {
 1081              		.loc 1 450 52 view .LVU343
 1082 0004 83B0     		sub	sp, sp, #12
 1083              		.cfi_def_cfa_offset 32
 450:src/display.c ****   union {
 1084              		.loc 1 450 52 view .LVU344
 1085 0006 0E46     		mov	r6, r1
 1086              	.LVL100:
 473:src/display.c ****     negative = 1;
 1087              		.loc 1 473 3 is_stmt 1 view .LVU345
 473:src/display.c ****     negative = 1;
 1088              		.loc 1 473 6 is_stmt 0 view .LVU346
 1089 0008 5BDB     		blt	.L133
 478:src/display.c **** #endif
 1090              		.loc 1 478 13 view .LVU347
 1091 000a 3B4B     		ldr	r3, .L135
 1092 000c EC17     		asrs	r4, r5, #31
 1093 000e 83FB0513 		smull	r1, r3, r3, r5
 1094              	.LVL101:
 478:src/display.c **** #endif
 1095              		.loc 1 478 13 view .LVU348
 1096 0012 C4EBA314 		rsb	r4, r4, r3, asr #6
 472:src/display.c ****   if (exp < 0) {
 1097              		.loc 1 472 12 view .LVU349
 1098 0016 06F00207 		and	r7, r6, #2
 1099              	.LVL102:
 478:src/display.c **** #endif
 1100              		.loc 1 478 3 is_stmt 1 view .LVU350
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1101              		.loc 1 480 3 view .LVU351
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1102              		.loc 1 480 6 is_stmt 0 view .LVU352
 1103 001a 002A     		cmp	r2, #0
 1104 001c 60D0     		beq	.L106
 483:src/display.c **** #else
 1105              		.loc 1 483 5 is_stmt 1 view .LVU353
 483:src/display.c **** #else
 1106              		.loc 1 483 8 is_stmt 0 view .LVU354
 1107 001e 2CB1     		cbz	r4, .L107
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1108              		.loc 1 487 2 is_stmt 1 view .LVU355
 487:src/display.c **** 	// No exponent separator for large -ve exponents
ARM GAS  /tmp/cc9o0abE.s 			page 88


 1109              		.loc 1 487 5 is_stmt 0 view .LVU356
 1110 0020 57B9     		cbnz	r7, .L104
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1111              		.loc 1 487 17 is_stmt 1 discriminator 1 view .LVU357
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1112              		.loc 1 487 21 is_stmt 0 discriminator 1 view .LVU358
 1113 0022 1446     		mov	r4, r2
 1114              	.LVL103:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1115              		.loc 1 487 24 discriminator 1 view .LVU359
 1116 0024 3A23     		movs	r3, #58
 1117              	.LVL104:
 487:src/display.c **** 	// No exponent separator for large -ve exponents
 1118              		.loc 1 487 24 discriminator 1 view .LVU360
 1119 0026 04F8013B 		strb	r3, [r4], #1
 1120              	.LVL105:
 494:src/display.c ****     }
 1121              		.loc 1 494 7 is_stmt 1 discriminator 1 view .LVU361
 1122 002a 09E0     		b	.L108
 1123              	.LVL106:
 1124              	.L107:
 490:src/display.c **** #else
 1125              		.loc 1 490 12 view .LVU362
 490:src/display.c **** #else
 1126              		.loc 1 490 16 is_stmt 0 view .LVU363
 1127 002c 1446     		mov	r4, r2
 1128              	.LVL107:
 490:src/display.c **** #else
 1129              		.loc 1 490 19 view .LVU364
 1130 002e 6523     		movs	r3, #101
 1131              	.LVL108:
 490:src/display.c **** #else
 1132              		.loc 1 490 19 view .LVU365
 1133 0030 04F8013B 		strb	r3, [r4], #1
 1134              	.LVL109:
 494:src/display.c ****     }
 1135              		.loc 1 494 7 is_stmt 1 view .LVU366
 494:src/display.c ****     }
 1136              		.loc 1 494 10 is_stmt 0 view .LVU367
 1137 0034 27B1     		cbz	r7, .L108
 490:src/display.c **** #else
 1138              		.loc 1 490 16 view .LVU368
 1139 0036 2246     		mov	r2, r4
 1140              	.LVL110:
 1141              	.L104:
 494:src/display.c ****     }
 1142              		.loc 1 494 21 is_stmt 1 discriminator 1 view .LVU369
 494:src/display.c ****     }
 1143              		.loc 1 494 25 is_stmt 0 discriminator 1 view .LVU370
 1144 0038 1446     		mov	r4, r2
 1145              	.LVL111:
 494:src/display.c ****     }
 1146              		.loc 1 494 28 discriminator 1 view .LVU371
 1147 003a 2D23     		movs	r3, #45
 1148 003c 04F8013B 		strb	r3, [r4], #1
 1149              	.LVL112:
 1150              	.L108:
ARM GAS  /tmp/cc9o0abE.s 			page 89


 542:src/display.c **** #endif
 1151              		.loc 1 542 7 is_stmt 1 view .LVU372
 1152 0040 01AF     		add	r7, sp, #4
 1153 0042 3846     		mov	r0, r7
 1154 0044 0422     		movs	r2, #4
 1155 0046 0021     		movs	r1, #0
 1156 0048 FFF7FEFF 		bl	xset
 1157              	.LVL113:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1158              		.loc 1 544 7 view .LVU373
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1159              		.loc 1 544 10 is_stmt 0 view .LVU374
 1160 004c 16F0050F 		tst	r6, #5
 1161 0050 2CD1     		bne	.L113
 1162              	.L115:
 565:src/display.c ****     no_number:
 1163              		.loc 1 565 2 is_stmt 1 view .LVU375
 1164 0052 2946     		mov	r1, r5
 1165 0054 3846     		mov	r0, r7
 1166 0056 FFF7FEFF 		bl	num_arg
 1167              	.LVL114:
 567:src/display.c ****     }
 1168              		.loc 1 567 7 view .LVU376
 1169 005a 2146     		mov	r1, r4
 1170 005c 3846     		mov	r0, r7
 1171 005e FFF7FEFF 		bl	set_exp_digits_string
 1172              	.LVL115:
 568:src/display.c **** 
 1173              		.loc 1 568 5 is_stmt 0 view .LVU377
 1174 0062 03B0     		add	sp, sp, #12
 1175              		.cfi_remember_state
 1176              		.cfi_def_cfa_offset 20
 1177              		@ sp needed
 1178 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 1179              	.LVL116:
 1180              	.L116:
 1181              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1182              		.loc 1 474 14 view .LVU378
 1183 0066 0127     		movs	r7, #1
 1184              	.LVL117:
 1185              	.L103:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1186              		.loc 1 497 21 is_stmt 1 discriminator 1 view .LVU379
 1187 0068 8220     		movs	r0, #130
 1188 006a FFF7FEFF 		bl	set_dot
 1189              	.LVL118:
 1190              	.L109:
 499:src/display.c **** #else
 1191              		.loc 1 499 7 view .LVU380
 499:src/display.c **** #else
 1192              		.loc 1 499 10 is_stmt 0 view .LVU381
 1193 006e 002C     		cmp	r4, #0
 1194 0070 E6D0     		beq	.L108
 503:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 1195              		.loc 1 503 4 is_stmt 1 view .LVU382
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/cc9o0abE.s 			page 90


 1196              		.loc 1 517 6 view .LVU383
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1197              		.loc 1 517 23 is_stmt 0 view .LVU384
 1198 0072 224B     		ldr	r3, .L135+4
 517:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 1199              		.loc 1 517 10 view .LVU385
 1200 0074 03FB0455 		mla	r5, r3, r4, r5
 1201              	.LVL119:
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1202              		.loc 1 519 6 is_stmt 1 view .LVU386
 519:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 1203              		.loc 1 519 9 is_stmt 0 view .LVU387
 1204 0078 F306     		lsls	r3, r6, #27
 1205 007a 0AD5     		bpl	.L110
 1206              	.LBB198:
 523:src/display.c **** 		// Clear digits and separators
 1207              		.loc 1 523 15 view .LVU388
 1208 007c 4F26     		movs	r6, #79
 1209              	.LVL120:
 1210              	.L111:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1211              		.loc 1 525 3 is_stmt 1 discriminator 3 view .LVU389
 1212 007e 3046     		mov	r0, r6
 523:src/display.c **** 		// Clear digits and separators
 1213              		.loc 1 523 66 is_stmt 0 discriminator 3 view .LVU390
 1214 0080 0136     		adds	r6, r6, #1
 1215              	.LVL121:
 525:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 1216              		.loc 1 525 3 discriminator 3 view .LVU391
 1217 0082 FFF7FEFF 		bl	clr_dot
 1218              	.LVL122:
 523:src/display.c **** 		// Clear digits and separators
 1219              		.loc 1 523 66 is_stmt 1 discriminator 3 view .LVU392
 523:src/display.c **** 		// Clear digits and separators
 1220              		.loc 1 523 41 discriminator 3 view .LVU393
 523:src/display.c **** 		// Clear digits and separators
 1221              		.loc 1 523 8 is_stmt 0 discriminator 3 view .LVU394
 1222 0086 632E     		cmp	r6, #99
 1223 0088 F9D1     		bne	.L111
 526:src/display.c **** 	    }
 1224              		.loc 1 526 8 is_stmt 1 view .LVU395
 1225 008a 3E21     		movs	r1, #62
 1226 008c 5120     		movs	r0, #81
 1227 008e FFF7FEFF 		bl	set_dig
 1228              	.LVL123:
 1229              	.L110:
 526:src/display.c **** 	    }
 1230              		.loc 1 526 8 is_stmt 0 view .LVU396
 1231              	.LBE198:
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1232              		.loc 1 529 6 is_stmt 1 view .LVU397
 529:src/display.c **** 	      CLR_EXP_SIGN;
 1233              		.loc 1 529 9 is_stmt 0 view .LVU398
 1234 0092 47BB     		cbnz	r7, .L134
 1235              	.L112:
 533:src/display.c **** 	    flags = 1;
 1236              		.loc 1 533 6 is_stmt 1 view .LVU399
ARM GAS  /tmp/cc9o0abE.s 			page 91


 1237 0094 04F13001 		add	r1, r4, #48
 1238 0098 6320     		movs	r0, #99
 542:src/display.c **** #endif
 1239              		.loc 1 542 7 is_stmt 0 view .LVU400
 1240 009a 01AF     		add	r7, sp, #4
 533:src/display.c **** 	    flags = 1;
 1241              		.loc 1 533 6 view .LVU401
 1242 009c FFF7FEFF 		bl	set_dig
 1243              	.LVL124:
 534:src/display.c **** 	  }
 1244              		.loc 1 534 6 is_stmt 1 view .LVU402
 542:src/display.c **** #endif
 1245              		.loc 1 542 7 view .LVU403
 1246 00a0 3846     		mov	r0, r7
 1247 00a2 0422     		movs	r2, #4
 1248 00a4 0021     		movs	r1, #0
 1249 00a6 FFF7FEFF 		bl	xset
 1250              	.LVL125:
 544:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 1251              		.loc 1 544 7 view .LVU404
 542:src/display.c **** #endif
 1252              		.loc 1 542 7 is_stmt 0 view .LVU405
 1253 00aa 0024     		movs	r4, #0
 1254              	.LVL126:
 1255              	.L113:
 545:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 1256              		.loc 1 545 2 is_stmt 1 view .LVU406
 1257 00ac 2946     		mov	r1, r5
 1258 00ae 0322     		movs	r2, #3
 1259 00b0 3846     		mov	r0, r7
 1260 00b2 FFF7FEFF 		bl	num_arg_0
 1261              	.LVL127:
 567:src/display.c ****     }
 1262              		.loc 1 567 7 view .LVU407
 1263 00b6 2146     		mov	r1, r4
 1264 00b8 3846     		mov	r0, r7
 1265 00ba FFF7FEFF 		bl	set_exp_digits_string
 1266              	.LVL128:
 568:src/display.c **** 
 1267              		.loc 1 568 5 is_stmt 0 view .LVU408
 1268 00be 03B0     		add	sp, sp, #12
 1269              		.cfi_remember_state
 1270              		.cfi_def_cfa_offset 20
 1271              		@ sp needed
 1272 00c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1273              	.LVL129:
 1274              	.L133:
 1275              		.cfi_restore_state
 474:src/display.c ****     exp = -exp;
 1276              		.loc 1 474 5 is_stmt 1 view .LVU409
 475:src/display.c ****   }
 1277              		.loc 1 475 5 view .LVU410
 478:src/display.c **** #endif
 1278              		.loc 1 478 13 is_stmt 0 view .LVU411
 1279 00c2 0D4C     		ldr	r4, .L135
 475:src/display.c ****   }
 1280              		.loc 1 475 9 view .LVU412
ARM GAS  /tmp/cc9o0abE.s 			page 92


 1281 00c4 6D42     		rsbs	r5, r5, #0
 1282              	.LVL130:
 478:src/display.c **** #endif
 1283              		.loc 1 478 3 is_stmt 1 view .LVU413
 478:src/display.c **** #endif
 1284              		.loc 1 478 13 is_stmt 0 view .LVU414
 1285 00c6 A4FB0534 		umull	r3, r4, r4, r5
 1286 00ca A409     		lsrs	r4, r4, #6
 1287              	.LVL131:
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1288              		.loc 1 480 3 is_stmt 1 view .LVU415
 480:src/display.c **** #ifdef INCLUDE_YREG_CODE
 1289              		.loc 1 480 6 is_stmt 0 view .LVU416
 1290 00cc 002A     		cmp	r2, #0
 1291 00ce CAD0     		beq	.L116
 483:src/display.c **** #else
 1292              		.loc 1 483 5 is_stmt 1 view .LVU417
 483:src/display.c **** #else
 1293              		.loc 1 483 8 is_stmt 0 view .LVU418
 1294 00d0 002C     		cmp	r4, #0
 1295 00d2 B1D1     		bne	.L104
 490:src/display.c **** #else
 1296              		.loc 1 490 12 is_stmt 1 view .LVU419
 490:src/display.c **** #else
 1297              		.loc 1 490 16 is_stmt 0 view .LVU420
 1298 00d4 1446     		mov	r4, r2
 1299              	.LVL132:
 490:src/display.c **** #else
 1300              		.loc 1 490 19 view .LVU421
 1301 00d6 6523     		movs	r3, #101
 1302 00d8 04F8013B 		strb	r3, [r4], #1
 1303              	.LVL133:
 494:src/display.c ****     }
 1304              		.loc 1 494 7 is_stmt 1 view .LVU422
 490:src/display.c **** #else
 1305              		.loc 1 490 16 is_stmt 0 view .LVU423
 1306 00dc 2246     		mov	r2, r4
 1307 00de ABE7     		b	.L104
 1308              	.LVL134:
 1309              	.L106:
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1310              		.loc 1 497 7 is_stmt 1 view .LVU424
 497:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 1311              		.loc 1 497 10 is_stmt 0 view .LVU425
 1312 00e0 002F     		cmp	r7, #0
 1313 00e2 C4D0     		beq	.L109
 1314 00e4 C0E7     		b	.L103
 1315              	.LVL135:
 1316              	.L134:
 530:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 1317              		.loc 1 530 8 is_stmt 1 view .LVU426
 1318 00e6 8220     		movs	r0, #130
 1319 00e8 FFF7FEFF 		bl	clr_dot
 1320              	.LVL136:
 531:src/display.c **** 	    }
 1321              		.loc 1 531 8 view .LVU427
 1322 00ec 2D21     		movs	r1, #45
ARM GAS  /tmp/cc9o0abE.s 			page 93


 1323 00ee 5A20     		movs	r0, #90
 1324 00f0 FFF7FEFF 		bl	set_dig
 1325              	.LVL137:
 1326 00f4 CEE7     		b	.L112
 1327              	.L136:
 1328 00f6 00BF     		.align	2
 1329              	.L135:
 1330 00f8 D34D6210 		.word	274877907
 1331 00fc 18FCFFFF 		.word	-1000
 1332              		.cfi_endproc
 1333              	.LFE10:
 1335              		.section	.text.set_separator.part.0,"ax",%progbits
 1336              		.align	1
 1337              		.p2align 2,,3
 1338              		.syntax unified
 1339              		.thumb
 1340              		.thumb_func
 1341              		.fpu fpv4-sp-d16
 1343              	set_separator.part.0:
 1344              	.LVL138:
 1345              	.LFB46:
 375:src/display.c ****   if (sep == SEP_NONE)
 1346              		.loc 1 375 14 view -0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 382:src/display.c ****     set_dot(posn+7);
 1350              		.loc 1 382 5 view .LVU429
 375:src/display.c ****   if (sep == SEP_NONE)
 1351              		.loc 1 375 14 is_stmt 0 view .LVU430
 1352 0000 38B5     		push	{r3, r4, r5, lr}
 1353              		.cfi_def_cfa_offset 16
 1354              		.cfi_offset 3, -16
 1355              		.cfi_offset 4, -12
 1356              		.cfi_offset 5, -8
 1357              		.cfi_offset 14, -4
 375:src/display.c ****   if (sep == SEP_NONE)
 1358              		.loc 1 375 14 view .LVU431
 1359 0002 0D46     		mov	r5, r1
 1360 0004 0446     		mov	r4, r0
 1361              	.LVL139:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1362              		.loc 1 383 5 is_stmt 1 view .LVU432
 1363 0006 0238     		subs	r0, r0, #2
 1364              	.LVL140:
 383:src/display.c ****     if (sep == SEP_COMMA)
 1365              		.loc 1 383 5 is_stmt 0 view .LVU433
 1366 0008 FFF7FEFF 		bl	set_dot
 1367              	.LVL141:
 384:src/display.c ****       set_dot(posn+8);
 1368              		.loc 1 384 5 is_stmt 1 view .LVU434
 384:src/display.c ****       set_dot(posn+8);
 1369              		.loc 1 384 8 is_stmt 0 view .LVU435
 1370 000c 012D     		cmp	r5, #1
 1371 000e 01D0     		beq	.L140
 1372              	.LVL142:
 391:src/display.c **** 
ARM GAS  /tmp/cc9o0abE.s 			page 94


 1373              		.loc 1 391 1 view .LVU436
 1374 0010 0020     		movs	r0, #0
 1375 0012 38BD     		pop	{r3, r4, r5, pc}
 1376              	.LVL143:
 1377              	.L140:
 385:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 1378              		.loc 1 385 7 is_stmt 1 view .LVU437
 1379 0014 601E     		subs	r0, r4, #1
 1380 0016 FFF7FEFF 		bl	set_dot
 1381              	.LVL144:
 391:src/display.c **** 
 1382              		.loc 1 391 1 is_stmt 0 view .LVU438
 1383 001a 0020     		movs	r0, #0
 1384 001c 38BD     		pop	{r3, r4, r5, pc}
 391:src/display.c **** 
 1385              		.loc 1 391 1 view .LVU439
 1386              		.cfi_endproc
 1387              	.LFE46:
 1389 001e 00BF     		.section	.text.set_decimal.part.0,"ax",%progbits
 1390              		.align	1
 1391              		.p2align 2,,3
 1392              		.syntax unified
 1393              		.thumb
 1394              		.thumb_func
 1395              		.fpu fpv4-sp-d16
 1397              	set_decimal.part.0:
 1398              	.LVL145:
 1399              	.LFB47:
 357:src/display.c ****   if (res) {
 1400              		.loc 1 357 14 is_stmt 1 view -0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1404              		.loc 1 361 5 view .LVU441
 357:src/display.c ****   if (res) {
 1405              		.loc 1 357 14 is_stmt 0 view .LVU442
 1406 0000 38B5     		push	{r3, r4, r5, lr}
 1407              		.cfi_def_cfa_offset 16
 1408              		.cfi_offset 3, -16
 1409              		.cfi_offset 4, -12
 1410              		.cfi_offset 5, -8
 1411              		.cfi_offset 14, -4
 357:src/display.c ****   if (res) {
 1412              		.loc 1 357 14 view .LVU443
 1413 0002 0446     		mov	r4, r0
 1414 0004 0D46     		mov	r5, r1
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1415              		.loc 1 361 5 view .LVU444
 1416 0006 0730     		adds	r0, r0, #7
 1417              	.LVL146:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 1418              		.loc 1 361 5 view .LVU445
 1419 0008 FFF7FEFF 		bl	set_dot
 1420              	.LVL147:
 362:src/display.c ****       set_dot(posn+8);
 1421              		.loc 1 362 5 is_stmt 1 view .LVU446
ARM GAS  /tmp/cc9o0abE.s 			page 95


 362:src/display.c ****       set_dot(posn+8);
 1422              		.loc 1 362 8 is_stmt 0 view .LVU447
 1423 000c 0DB9     		cbnz	r5, .L147
 1424              	.LVL148:
 368:src/display.c **** }
 1425              		.loc 1 368 3 is_stmt 1 view .LVU448
 369:src/display.c **** 
 1426              		.loc 1 369 1 is_stmt 0 view .LVU449
 1427 000e 0020     		movs	r0, #0
 1428 0010 38BD     		pop	{r3, r4, r5, pc}
 1429              	.LVL149:
 1430              	.L147:
 363:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 1431              		.loc 1 363 7 is_stmt 1 view .LVU450
 1432 0012 04F10800 		add	r0, r4, #8
 1433 0016 FFF7FEFF 		bl	set_dot
 1434              	.LVL150:
 368:src/display.c **** }
 1435              		.loc 1 368 3 view .LVU451
 369:src/display.c **** 
 1436              		.loc 1 369 1 is_stmt 0 view .LVU452
 1437 001a 0020     		movs	r0, #0
 1438 001c 38BD     		pop	{r3, r4, r5, pc}
 369:src/display.c **** 
 1439              		.loc 1 369 1 view .LVU453
 1440              		.cfi_endproc
 1441              	.LFE47:
 1443 001e 00BF     		.section	.text.set_digits_string,"ax",%progbits
 1444              		.align	1
 1445              		.p2align 2,,3
 1446              		.syntax unified
 1447              		.thumb
 1448              		.thumb_func
 1449              		.fpu fpv4-sp-d16
 1451              	set_digits_string:
 1452              	.LVL151:
 1453              	.LFB8:
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1454              		.loc 1 422 55 is_stmt 1 view -0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1458              		.loc 1 423 3 view .LVU455
 422:src/display.c ****   for (; *msg != '\0'; msg++) {
 1459              		.loc 1 422 55 is_stmt 0 view .LVU456
 1460 0000 38B5     		push	{r3, r4, r5, lr}
 1461              		.cfi_def_cfa_offset 16
 1462              		.cfi_offset 3, -16
 1463              		.cfi_offset 4, -12
 1464              		.cfi_offset 5, -8
 1465              		.cfi_offset 14, -4
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1466              		.loc 1 423 10 view .LVU457
 1467 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1468              		.loc 1 423 10 is_stmt 1 view .LVU458
ARM GAS  /tmp/cc9o0abE.s 			page 96


 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1469              		.loc 1 423 3 is_stmt 0 view .LVU459
 1470 0004 D3B1     		cbz	r3, .L148
 1471 0006 0546     		mov	r5, r0
 1472 0008 0C46     		mov	r4, r1
 1473 000a 06E0     		b	.L152
 1474              	.LVL152:
 1475              	.L150:
 1476              	.LBB199:
 1477              	.LBB200:
 417:src/display.c ****   return res;
 1478              		.loc 1 417 8 view .LVU460
 1479 000c 2046     		mov	r0, r4
 1480              	.LVL153:
 417:src/display.c ****   return res;
 1481              		.loc 1 417 8 view .LVU461
 1482 000e FFF7FEFF 		bl	set_dig
 1483              	.LVL154:
 418:src/display.c **** }
 1484              		.loc 1 418 3 is_stmt 1 view .LVU462
 418:src/display.c **** }
 1485              		.loc 1 418 3 is_stmt 0 view .LVU463
 1486              	.LBE200:
 1487              	.LBE199:
 428:src/display.c ****     }
 1488              		.loc 1 428 7 is_stmt 1 view .LVU464
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1489              		.loc 1 423 10 is_stmt 0 view .LVU465
 1490 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1491              	.LVL155:
 428:src/display.c ****     }
 1492              		.loc 1 428 9 view .LVU466
 1493 0016 0934     		adds	r4, r4, #9
 1494              	.LVL156:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1495              		.loc 1 423 24 is_stmt 1 view .LVU467
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1496              		.loc 1 423 10 view .LVU468
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1497              		.loc 1 423 3 is_stmt 0 view .LVU469
 1498 0018 83B1     		cbz	r3, .L148
 1499              	.LVL157:
 1500              	.L152:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1501              		.loc 1 424 5 is_stmt 1 view .LVU470
 425:src/display.c ****     else {
 1502              		.loc 1 425 7 view .LVU471
 1503              	.LBB203:
 1504              	.LBI203:
 357:src/display.c ****   if (res) {
 1505              		.loc 1 357 14 view .LVU472
 1506              	.LBB204:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1507              		.loc 1 358 3 view .LVU473
 1508              	.LBE204:
 1509              	.LBE203:
 427:src/display.c ****       j += SEGS_PER_DIGIT;
ARM GAS  /tmp/cc9o0abE.s 			page 97


 1510              		.loc 1 427 7 view .LVU474
 1511              	.LBB207:
 1512              	.LBI199:
 415:src/display.c ****   if (res) *res++ = ch;
 1513              		.loc 1 415 14 view .LVU475
 1514              	.LBB201:
 416:src/display.c ****   else	set_dig(base, ch);
 1515              		.loc 1 416 3 view .LVU476
 417:src/display.c ****   return res;
 1516              		.loc 1 417 8 view .LVU477
 1517              	.LBE201:
 1518              	.LBE207:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1519              		.loc 1 424 21 is_stmt 0 view .LVU478
 1520 001a 03F0FD02 		and	r2, r3, #253
 1521 001e 2C2A     		cmp	r2, #44
 1522              	.LBB208:
 1523              	.LBB205:
 1524 0020 A4F10900 		sub	r0, r4, #9
 1525              	.LVL158:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1526              		.loc 1 424 21 view .LVU479
 1527              	.LBE205:
 1528              	.LBE208:
 1529              	.LBB209:
 1530              	.LBB202:
 417:src/display.c ****   return res;
 1531              		.loc 1 417 8 view .LVU480
 1532 0024 1946     		mov	r1, r3
 1533              	.LBE202:
 1534              	.LBE209:
 424:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1535              		.loc 1 424 21 view .LVU481
 1536 0026 F1D1     		bne	.L150
 1537              	.LBB210:
 1538              	.LBB206:
 1539 0028 B3F12E01 		subs	r1, r3, #46
 1540 002c 18BF     		it	ne
 1541 002e 0121     		movne	r1, #1
 1542 0030 FFF7FEFF 		bl	set_decimal.part.0
 1543              	.LVL159:
 368:src/display.c **** }
 1544              		.loc 1 368 3 is_stmt 1 view .LVU482
 368:src/display.c **** }
 1545              		.loc 1 368 3 is_stmt 0 view .LVU483
 1546              	.LBE206:
 1547              	.LBE210:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1548              		.loc 1 423 24 is_stmt 1 view .LVU484
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1549              		.loc 1 423 10 view .LVU485
 1550 0034 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1551              	.LVL160:
 423:src/display.c ****     if (*msg == '.' || *msg == ',')
 1552              		.loc 1 423 3 is_stmt 0 view .LVU486
 1553 0038 002B     		cmp	r3, #0
 1554 003a EED1     		bne	.L152
ARM GAS  /tmp/cc9o0abE.s 			page 98


 1555              	.LVL161:
 1556              	.L148:
 431:src/display.c **** 
 1557              		.loc 1 431 1 view .LVU487
 1558 003c 38BD     		pop	{r3, r4, r5, pc}
 1559              		.cfi_endproc
 1560              	.LFE8:
 1562 003e 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1563              		.align	2
 1564              	.LC0:
 1565 0000 4E614E00 		.ascii	"NaN\000"
 1566              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1567              		.align	1
 1568              		.p2align 2,,3
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu fpv4-sp-d16
 1574              	check_special_dn.isra.0:
 1575              	.LVL162:
 1576              	.LFB48:
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1577              		.loc 1 1625 18 is_stmt 1 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1581              		.loc 1 1626 2 view .LVU489
1626:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1582              		.loc 1 1626 5 is_stmt 0 view .LVU490
 1583 0000 10F07002 		ands	r2, r0, #112
 1584 0004 0BD0     		beq	.L166
1627:src/display.c **** 	    if (res) {
 1585              		.loc 1 1627 4 is_stmt 1 view .LVU491
1627:src/display.c **** 	    if (res) {
 1586              		.loc 1 1627 7 is_stmt 0 view .LVU492
 1587 0006 10F0300F 		tst	r0, #48
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1588              		.loc 1 1625 18 view .LVU493
 1589 000a 08B5     		push	{r3, lr}
 1590              		.cfi_def_cfa_offset 8
 1591              		.cfi_offset 3, -8
 1592              		.cfi_offset 14, -4
 1593 000c 0B46     		mov	r3, r1
1627:src/display.c **** 	    if (res) {
 1594              		.loc 1 1627 7 view .LVU494
 1595 000e 08D0     		beq	.L160
 1596              	.LVL163:
 1597              	.LBB213:
 1598              	.LBI213:
1625:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1599              		.loc 1 1625 18 is_stmt 1 view .LVU495
 1600              	.LBB214:
1628:src/display.c **** 	      scopy(res, "NaN");
 1601              		.loc 1 1628 6 view .LVU496
1628:src/display.c **** 	      scopy(res, "NaN");
 1602              		.loc 1 1628 9 is_stmt 0 view .LVU497
ARM GAS  /tmp/cc9o0abE.s 			page 99


 1603 0010 99B1     		cbz	r1, .L161
1629:src/display.c **** 	    } else {
 1604              		.loc 1 1629 8 is_stmt 1 view .LVU498
 1605 0012 0846     		mov	r0, r1
 1606 0014 1049     		ldr	r1, .L175
 1607              	.LVL164:
1629:src/display.c **** 	    } else {
 1608              		.loc 1 1629 8 is_stmt 0 view .LVU499
 1609 0016 FFF7FEFF 		bl	scopy
 1610              	.LVL165:
1629:src/display.c **** 	    } else {
 1611              		.loc 1 1629 8 view .LVU500
 1612 001a 0120     		movs	r0, #1
 1613              	.LBE214:
 1614              	.LBE213:
1661:src/display.c **** 
 1615              		.loc 1 1661 7 view .LVU501
 1616 001c 08BD     		pop	{r3, pc}
 1617              	.LVL166:
 1618              	.L166:
 1619              		.cfi_def_cfa_offset 0
 1620              		.cfi_restore 3
 1621              		.cfi_restore 14
1660:src/display.c ****       }
 1622              		.loc 1 1660 9 view .LVU502
 1623 001e 1046     		mov	r0, r2
1661:src/display.c **** 
 1624              		.loc 1 1661 7 view .LVU503
 1625 0020 7047     		bx	lr
 1626              	.L160:
 1627              		.cfi_def_cfa_offset 8
 1628              		.cfi_offset 3, -8
 1629              		.cfi_offset 14, -4
1639:src/display.c **** 	      if (res) *res++ = '-';
 1630              		.loc 1 1639 6 is_stmt 1 view .LVU504
1639:src/display.c **** 	      if (res) *res++ = '-';
 1631              		.loc 1 1639 9 is_stmt 0 view .LVU505
 1632 0022 0206     		lsls	r2, r0, #24
 1633 0024 04D4     		bmi	.L174
1643:src/display.c **** 	      *res++ = '\237';
 1634              		.loc 1 1643 6 is_stmt 1 view .LVU506
1643:src/display.c **** 	      *res++ = '\237';
 1635              		.loc 1 1643 9 is_stmt 0 view .LVU507
 1636 0026 89B1     		cbz	r1, .L165
 1637              	.LVL167:
 1638              	.L164:
1644:src/display.c **** 	    else {
 1639              		.loc 1 1644 8 is_stmt 1 view .LVU508
1644:src/display.c **** 	    else {
 1640              		.loc 1 1644 15 is_stmt 0 view .LVU509
 1641 0028 9F22     		movs	r2, #159
 1642 002a 1A70     		strb	r2, [r3]
1657:src/display.c **** 	  }
 1643              		.loc 1 1657 13 view .LVU510
 1644 002c 0120     		movs	r0, #1
1661:src/display.c **** 
 1645              		.loc 1 1661 7 view .LVU511
ARM GAS  /tmp/cc9o0abE.s 			page 100


 1646 002e 08BD     		pop	{r3, pc}
 1647              	.LVL168:
 1648              	.L174:
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1649              		.loc 1 1640 8 is_stmt 1 view .LVU512
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1650              		.loc 1 1640 11 is_stmt 0 view .LVU513
 1651 0030 41B1     		cbz	r1, .L163
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1652              		.loc 1 1640 17 is_stmt 1 view .LVU514
 1653              	.LVL169:
1640:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1654              		.loc 1 1640 24 is_stmt 0 view .LVU515
 1655 0032 2D22     		movs	r2, #45
 1656 0034 03F8012B 		strb	r2, [r3], #1
 1657              	.LVL170:
1643:src/display.c **** 	      *res++ = '\237';
 1658              		.loc 1 1643 6 is_stmt 1 view .LVU516
 1659 0038 F6E7     		b	.L164
 1660              	.LVL171:
 1661              	.L161:
 1662              	.LBB216:
 1663              	.LBB215:
1631:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 1664              		.loc 1 1631 8 view .LVU517
 1665 003a 0848     		ldr	r0, .L175+4
 1666 003c FFF7FEFF 		bl	set_digits_string
 1667              	.LVL172:
1631:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 1668              		.loc 1 1631 8 is_stmt 0 view .LVU518
 1669 0040 0120     		movs	r0, #1
 1670              	.LBE215:
 1671              	.LBE216:
1661:src/display.c **** 
 1672              		.loc 1 1661 7 view .LVU519
 1673 0042 08BD     		pop	{r3, pc}
 1674              	.LVL173:
 1675              	.L163:
1641:src/display.c **** 	    }
 1676              		.loc 1 1641 13 is_stmt 1 view .LVU520
 1677 0044 2D21     		movs	r1, #45
 1678              	.LVL174:
1641:src/display.c **** 	    }
 1679              		.loc 1 1641 13 is_stmt 0 view .LVU521
 1680 0046 0920     		movs	r0, #9
 1681 0048 FFF7FEFF 		bl	set_dig
 1682              	.LVL175:
1643:src/display.c **** 	      *res++ = '\237';
 1683              		.loc 1 1643 6 is_stmt 1 view .LVU522
 1684              	.L165:
1646:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 1685              		.loc 1 1646 8 view .LVU523
 1686 004c 0448     		ldr	r0, .L175+8
 1687 004e 1221     		movs	r1, #18
 1688 0050 FFF7FEFF 		bl	set_digits_string
 1689              	.LVL176:
1657:src/display.c **** 	  }
ARM GAS  /tmp/cc9o0abE.s 			page 101


 1690              		.loc 1 1657 13 is_stmt 0 view .LVU524
 1691 0054 0120     		movs	r0, #1
1661:src/display.c **** 
 1692              		.loc 1 1661 7 view .LVU525
 1693 0056 08BD     		pop	{r3, pc}
 1694              	.L176:
 1695              		.align	2
 1696              	.L175:
 1697 0058 00000000 		.word	.LC0
 1698 005c 00000000 		.word	.LANCHOR3
 1699 0060 00000000 		.word	.LANCHOR4
 1700              		.cfi_endproc
 1701              	.LFE48:
 1703              		.section	.text.set_x_hms,"ax",%progbits
 1704              		.align	1
 1705              		.p2align 2,,3
 1706              		.syntax unified
 1707              		.thumb
 1708              		.thumb_func
 1709              		.fpu fpv4-sp-d16
 1711              	set_x_hms:
 1712              	.LVL177:
 1713              	.LFB18:
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1714              		.loc 1 1706 62 is_stmt 1 view -0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 200
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
1707:src/display.c **** 	int j=0;
 1718              		.loc 1 1707 2 view .LVU527
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1719              		.loc 1 1708 2 view .LVU528
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1720              		.loc 1 1706 62 is_stmt 0 view .LVU529
 1721 0000 30B5     		push	{r4, r5, lr}
 1722              		.cfi_def_cfa_offset 12
 1723              		.cfi_offset 4, -12
 1724              		.cfi_offset 5, -8
 1725              		.cfi_offset 14, -4
 1726 0002 B5B0     		sub	sp, sp, #212
 1727              		.cfi_def_cfa_offset 224
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1728              		.loc 1 1706 62 view .LVU530
 1729 0004 0446     		mov	r4, r0
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1730              		.loc 1 1708 6 view .LVU531
 1731 0006 0023     		movs	r3, #0
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1732              		.loc 1 1712 6 view .LVU532
 1733 0008 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 1734              	.LVL178:
1708:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1735              		.loc 1 1708 6 view .LVU533
 1736 000a 0393     		str	r3, [sp, #12]
1709:src/display.c **** 	unsigned int hr, min, sec, fs;
 1737              		.loc 1 1709 2 is_stmt 1 view .LVU534
 1738              	.LVL179:
ARM GAS  /tmp/cc9o0abE.s 			page 102


1710:src/display.c **** 
 1739              		.loc 1 1710 2 view .LVU535
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1740              		.loc 1 1712 2 view .LVU536
1706:src/display.c **** 	decNumber x, y, a, t, u;
 1741              		.loc 1 1706 62 is_stmt 0 view .LVU537
 1742 000c 0D46     		mov	r5, r1
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1743              		.loc 1 1712 6 view .LVU538
 1744 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1745              	.LVL180:
1712:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1746              		.loc 1 1712 5 view .LVU539
 1747 0012 48B1     		cbz	r0, .L178
1713:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1748              		.loc 1 1713 4 is_stmt 1 view .LVU540
1713:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1749              		.loc 1 1713 7 is_stmt 0 view .LVU541
 1750 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1751 0016 5B06     		lsls	r3, r3, #25
 1752 0018 04D5     		bpl	.L177
1714:src/display.c **** 	  return;
 1753              		.loc 1 1714 6 is_stmt 1 view .LVU542
 1754              	.LVL181:
 1755              	.LBB217:
 1756              	.LBI217:
 415:src/display.c ****   if (res) *res++ = ch;
 1757              		.loc 1 415 14 view .LVU543
 1758              	.LBB218:
 416:src/display.c ****   else	set_dig(base, ch);
 1759              		.loc 1 416 3 view .LVU544
 416:src/display.c ****   else	set_dig(base, ch);
 1760              		.loc 1 416 6 is_stmt 0 view .LVU545
 1761 001a 002D     		cmp	r5, #0
 1762 001c 00F0BB80 		beq	.L181
 416:src/display.c ****   else	set_dig(base, ch);
 1763              		.loc 1 416 12 is_stmt 1 view .LVU546
 1764              	.LVL182:
 416:src/display.c ****   else	set_dig(base, ch);
 1765              		.loc 1 416 19 is_stmt 0 view .LVU547
 1766 0020 6F23     		movs	r3, #111
 1767 0022 2B70     		strb	r3, [r5]
 1768              	.LVL183:
 1769              	.L177:
 416:src/display.c ****   else	set_dig(base, ch);
 1770              		.loc 1 416 19 view .LVU548
 1771              	.LBE218:
 1772              	.LBE217:
1769:src/display.c **** 
 1773              		.loc 1 1769 7 view .LVU549
 1774 0024 35B0     		add	sp, sp, #212
 1775              		.cfi_remember_state
 1776              		.cfi_def_cfa_offset 12
 1777              		@ sp needed
 1778 0026 30BD     		pop	{r4, r5, pc}
 1779              	.LVL184:
 1780              	.L178:
ARM GAS  /tmp/cc9o0abE.s 			page 103


 1781              		.cfi_restore_state
1718:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1782              		.loc 1 1718 2 is_stmt 1 view .LVU550
 1783 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1784              	.LVL185:
1719:src/display.c **** 	dn_abs(&a, rgx);
 1785              		.loc 1 1719 2 view .LVU551
 1786 002c 654A     		ldr	r2, .L212
 1787 002e 2146     		mov	r1, r4
 1788 0030 07A8     		add	r0, sp, #28
 1789 0032 FFF7FEFF 		bl	decNumberMod
 1790              	.LVL186:
1720:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1791              		.loc 1 1720 2 view .LVU552
 1792 0036 2146     		mov	r1, r4
 1793 0038 19A8     		add	r0, sp, #100
 1794 003a FFF7FEFF 		bl	dn_abs
 1795              	.LVL187:
1721:src/display.c **** 	  if (res != NULL)
 1796              		.loc 1 1721 2 view .LVU553
1721:src/display.c **** 	  if (res != NULL)
 1797              		.loc 1 1721 5 is_stmt 0 view .LVU554
 1798 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1799 0042 002B     		cmp	r3, #0
 1800 0044 75DB     		blt	.L210
 1801              	.L182:
1729:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1802              		.loc 1 1729 2 is_stmt 1 view .LVU555
 1803 0046 07A9     		add	r1, sp, #28
 1804 0048 10A8     		add	r0, sp, #64
 1805 004a FFF7FEFF 		bl	decNumberHR2HMS
 1806              	.LVL188:
1730:src/display.c **** 	decNumberRound(&u, &t);
 1807              		.loc 1 1730 2 view .LVU556
 1808 004e 0622     		movs	r2, #6
 1809 0050 10A9     		add	r1, sp, #64
 1810 0052 22A8     		add	r0, sp, #136
 1811 0054 FFF7FEFF 		bl	dn_mulpow10
 1812              	.LVL189:
1731:src/display.c **** 
 1813              		.loc 1 1731 2 view .LVU557
 1814 0058 22A9     		add	r1, sp, #136
 1815 005a 2BA8     		add	r0, sp, #172
 1816 005c FFF7FEFF 		bl	decNumberRound
 1817              	.LVL190:
1733:src/display.c **** 	hms_step(&u, &t, &sec);
 1818              		.loc 1 1733 2 view .LVU558
 1819 0060 2BA9     		add	r1, sp, #172
 1820 0062 22A8     		add	r0, sp, #136
 1821 0064 06AA     		add	r2, sp, #24
 1822 0066 FFF7FEFF 		bl	hms_step
 1823              	.LVL191:
1734:src/display.c **** 	hms_step(&t, &u, &min);
 1824              		.loc 1 1734 2 view .LVU559
 1825 006a 22A9     		add	r1, sp, #136
 1826 006c 2BA8     		add	r0, sp, #172
 1827 006e 05AA     		add	r2, sp, #20
ARM GAS  /tmp/cc9o0abE.s 			page 104


 1828 0070 FFF7FEFF 		bl	hms_step
 1829              	.LVL192:
1735:src/display.c **** 	hr = dn_to_int(&t);
 1830              		.loc 1 1735 2 view .LVU560
 1831 0074 04AA     		add	r2, sp, #16
 1832 0076 2BA9     		add	r1, sp, #172
 1833 0078 22A8     		add	r0, sp, #136
 1834 007a FFF7FEFF 		bl	hms_step
 1835              	.LVL193:
1736:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1836              		.loc 1 1736 2 view .LVU561
1736:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1837              		.loc 1 1736 7 is_stmt 0 view .LVU562
 1838 007e 22A8     		add	r0, sp, #136
 1839 0080 FFF7FEFF 		bl	dn_to_int
 1840              	.LVL194:
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1841              		.loc 1 1737 33 view .LVU563
 1842 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1843              		.loc 1 1737 5 view .LVU564
 1844 0088 3B2A     		cmp	r2, #59
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1845              		.loc 1 1737 19 is_stmt 1 view .LVU565
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1846              		.loc 1 1737 23 is_stmt 0 view .LVU566
 1847 008a 82BF     		ittt	hi
 1848 008c 3C3A     		subhi	r2, r2, #60
1737:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1849              		.loc 1 1737 33 view .LVU567
 1850 008e 0133     		addhi	r3, r3, #1
 1851 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1738:src/display.c **** 
 1852              		.loc 1 1738 2 is_stmt 1 view .LVU568
1738:src/display.c **** 
 1853              		.loc 1 1738 5 is_stmt 0 view .LVU569
 1854 0094 3B2B     		cmp	r3, #59
 1855 0096 02D9     		bls	.L187
1738:src/display.c **** 
 1856              		.loc 1 1738 19 is_stmt 1 discriminator 1 view .LVU570
1738:src/display.c **** 
 1857              		.loc 1 1738 23 is_stmt 0 discriminator 1 view .LVU571
 1858 0098 3C3B     		subs	r3, r3, #60
 1859 009a 0493     		str	r3, [sp, #16]
1738:src/display.c **** 
 1860              		.loc 1 1738 30 is_stmt 1 discriminator 1 view .LVU572
1738:src/display.c **** 
 1861              		.loc 1 1738 32 is_stmt 0 discriminator 1 view .LVU573
 1862 009c 0130     		adds	r0, r0, #1
 1863              	.LVL195:
 1864              	.L187:
1741:src/display.c **** 	res = set_dig_s(j, '@', res);
 1865              		.loc 1 1741 2 is_stmt 1 view .LVU574
1741:src/display.c **** 	res = set_dig_s(j, '@', res);
 1866              		.loc 1 1741 8 is_stmt 0 view .LVU575
 1867 009e 0123     		movs	r3, #1
 1868 00a0 0093     		str	r3, [sp]
ARM GAS  /tmp/cc9o0abE.s 			page 105


 1869 00a2 2946     		mov	r1, r5
 1870 00a4 03AA     		add	r2, sp, #12
 1871 00a6 0423     		movs	r3, #4
 1872 00a8 FFF7FEFF 		bl	hms_render
 1873              	.LVL196:
1742:src/display.c **** 	j += SEGS_PER_DIGIT;
 1874              		.loc 1 1742 2 is_stmt 1 view .LVU576
 1875              	.LBB220:
 1876              	.LBI220:
 415:src/display.c ****   if (res) *res++ = ch;
 1877              		.loc 1 415 14 view .LVU577
 1878              	.LBB221:
 416:src/display.c ****   else	set_dig(base, ch);
 1879              		.loc 1 416 3 view .LVU578
 416:src/display.c ****   else	set_dig(base, ch);
 1880              		.loc 1 416 6 is_stmt 0 view .LVU579
 1881 00ac 0446     		mov	r4, r0
 1882              	.LVL197:
 416:src/display.c ****   else	set_dig(base, ch);
 1883              		.loc 1 416 6 view .LVU580
 1884 00ae 0028     		cmp	r0, #0
 1885 00b0 7CD0     		beq	.L188
 416:src/display.c ****   else	set_dig(base, ch);
 1886              		.loc 1 416 12 is_stmt 1 view .LVU581
 416:src/display.c ****   else	set_dig(base, ch);
 1887              		.loc 1 416 16 is_stmt 0 view .LVU582
 1888 00b2 0146     		mov	r1, r0
 1889              	.LVL198:
 416:src/display.c ****   else	set_dig(base, ch);
 1890              		.loc 1 416 19 view .LVU583
 1891 00b4 4023     		movs	r3, #64
 1892 00b6 01F8013B 		strb	r3, [r1], #1
 1893              	.LVL199:
 1894              	.L189:
 418:src/display.c **** }
 1895              		.loc 1 418 3 is_stmt 1 view .LVU584
 418:src/display.c **** }
 1896              		.loc 1 418 3 is_stmt 0 view .LVU585
 1897              	.LBE221:
 1898              	.LBE220:
1743:src/display.c **** 
 1899              		.loc 1 1743 2 is_stmt 1 view .LVU586
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1900              		.loc 1 1746 8 is_stmt 0 view .LVU587
 1901 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 1902 00be 0122     		movs	r2, #1
1743:src/display.c **** 
 1903              		.loc 1 1743 4 view .LVU588
 1904 00c0 03F10904 		add	r4, r3, #9
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1905              		.loc 1 1746 8 view .LVU589
 1906 00c4 0092     		str	r2, [sp]
 1907 00c6 0223     		movs	r3, #2
 1908 00c8 03AA     		add	r2, sp, #12
1743:src/display.c **** 
 1909              		.loc 1 1743 4 view .LVU590
 1910 00ca 0394     		str	r4, [sp, #12]
ARM GAS  /tmp/cc9o0abE.s 			page 106


1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1911              		.loc 1 1746 2 is_stmt 1 view .LVU591
1746:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1912              		.loc 1 1746 8 is_stmt 0 view .LVU592
 1913 00cc FFF7FEFF 		bl	hms_render
 1914              	.LVL200:
1747:src/display.c **** 	j += SEGS_PER_DIGIT;
 1915              		.loc 1 1747 2 is_stmt 1 view .LVU593
 1916              	.LBB223:
 1917              	.LBI223:
 415:src/display.c ****   if (res) *res++ = ch;
 1918              		.loc 1 415 14 view .LVU594
 1919              	.LBB224:
 416:src/display.c ****   else	set_dig(base, ch);
 1920              		.loc 1 416 3 view .LVU595
 416:src/display.c ****   else	set_dig(base, ch);
 1921              		.loc 1 416 6 is_stmt 0 view .LVU596
 1922 00d0 0446     		mov	r4, r0
 1923 00d2 0028     		cmp	r0, #0
 1924 00d4 64D0     		beq	.L190
 416:src/display.c ****   else	set_dig(base, ch);
 1925              		.loc 1 416 12 is_stmt 1 view .LVU597
 416:src/display.c ****   else	set_dig(base, ch);
 1926              		.loc 1 416 16 is_stmt 0 view .LVU598
 1927 00d6 0146     		mov	r1, r0
 1928              	.LVL201:
 416:src/display.c ****   else	set_dig(base, ch);
 1929              		.loc 1 416 19 view .LVU599
 1930 00d8 2723     		movs	r3, #39
 1931 00da 01F8013B 		strb	r3, [r1], #1
 1932              	.LVL202:
 1933              	.L191:
 418:src/display.c **** }
 1934              		.loc 1 418 3 is_stmt 1 view .LVU600
 418:src/display.c **** }
 1935              		.loc 1 418 3 is_stmt 0 view .LVU601
 1936              	.LBE224:
 1937              	.LBE223:
1748:src/display.c **** 
 1938              		.loc 1 1748 2 is_stmt 1 view .LVU602
1748:src/display.c **** 
 1939              		.loc 1 1748 4 is_stmt 0 view .LVU603
 1940 00de 039B     		ldr	r3, [sp, #12]
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1941              		.loc 1 1751 8 view .LVU604
 1942 00e0 0598     		ldr	r0, [sp, #20]
 1943 00e2 0122     		movs	r2, #1
1748:src/display.c **** 
 1944              		.loc 1 1748 4 view .LVU605
 1945 00e4 03F10904 		add	r4, r3, #9
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1946              		.loc 1 1751 8 view .LVU606
 1947 00e8 0092     		str	r2, [sp]
 1948 00ea 0223     		movs	r3, #2
 1949 00ec 03AA     		add	r2, sp, #12
1748:src/display.c **** 
 1950              		.loc 1 1748 4 view .LVU607
ARM GAS  /tmp/cc9o0abE.s 			page 107


 1951 00ee 0394     		str	r4, [sp, #12]
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1952              		.loc 1 1751 2 is_stmt 1 view .LVU608
1751:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1953              		.loc 1 1751 8 is_stmt 0 view .LVU609
 1954 00f0 FFF7FEFF 		bl	hms_render
 1955              	.LVL203:
1752:src/display.c **** 
 1956              		.loc 1 1752 2 is_stmt 1 view .LVU610
1752:src/display.c **** 
 1957              		.loc 1 1752 8 is_stmt 0 view .LVU611
 1958 00f4 344B     		ldr	r3, .L212+4
 1959 00f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1960              	.LVL204:
 1961              	.LBB226:
 1962              	.LBI226:
 357:src/display.c ****   if (res) {
 1963              		.loc 1 357 14 is_stmt 1 view .LVU612
 1964              	.LBB227:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1965              		.loc 1 358 3 view .LVU613
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1966              		.loc 1 358 6 is_stmt 0 view .LVU614
 1967 00f8 0028     		cmp	r0, #0
 1968 00fa 38D0     		beq	.L192
 359:src/display.c ****   } else {
 1969              		.loc 1 359 5 is_stmt 1 view .LVU615
 359:src/display.c ****   } else {
 1970              		.loc 1 359 12 is_stmt 0 view .LVU616
 1971 00fc 0029     		cmp	r1, #0
 359:src/display.c ****   } else {
 1972              		.loc 1 359 9 view .LVU617
 1973 00fe 0146     		mov	r1, r0
 1974              	.LVL205:
 359:src/display.c ****   } else {
 1975              		.loc 1 359 12 view .LVU618
 1976 0100 0CBF     		ite	eq
 1977 0102 2E23     		moveq	r3, #46
 1978 0104 2C23     		movne	r3, #44
 1979 0106 01F8013B 		strb	r3, [r1], #1
 1980              	.LVL206:
 1981              	.L194:
 368:src/display.c **** }
 1982              		.loc 1 368 3 is_stmt 1 view .LVU619
 368:src/display.c **** }
 1983              		.loc 1 368 3 is_stmt 0 view .LVU620
 1984              	.LBE227:
 1985              	.LBE226:
1755:src/display.c **** 
 1986              		.loc 1 1755 2 is_stmt 1 view .LVU621
1755:src/display.c **** 
 1987              		.loc 1 1755 8 is_stmt 0 view .LVU622
 1988 010a 0023     		movs	r3, #0
 1989 010c 0093     		str	r3, [sp]
 1990 010e 0698     		ldr	r0, [sp, #24]
 1991 0110 03AA     		add	r2, sp, #12
 1992 0112 0223     		movs	r3, #2
ARM GAS  /tmp/cc9o0abE.s 			page 108


 1993 0114 FFF7FEFF 		bl	hms_render
 1994              	.LVL207:
1758:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 1995              		.loc 1 1758 2 is_stmt 1 view .LVU623
 1996              	.LBB229:
 1997              	.LBI229:
 415:src/display.c ****   if (res) *res++ = ch;
 1998              		.loc 1 415 14 view .LVU624
 1999              	.LBB230:
 416:src/display.c ****   else	set_dig(base, ch);
 2000              		.loc 1 416 3 view .LVU625
 416:src/display.c ****   else	set_dig(base, ch);
 2001              		.loc 1 416 6 is_stmt 0 view .LVU626
 2002 0118 0446     		mov	r4, r0
 2003 011a 90B3     		cbz	r0, .L195
 416:src/display.c ****   else	set_dig(base, ch);
 2004              		.loc 1 416 12 is_stmt 1 view .LVU627
 2005              	.LVL208:
 416:src/display.c ****   else	set_dig(base, ch);
 2006              		.loc 1 416 19 is_stmt 0 view .LVU628
 2007 011c 2223     		movs	r3, #34
 2008 011e 0370     		strb	r3, [r0]
 2009              	.LVL209:
 418:src/display.c **** }
 2010              		.loc 1 418 3 is_stmt 1 view .LVU629
 418:src/display.c **** }
 2011              		.loc 1 418 3 is_stmt 0 view .LVU630
 2012              	.LBE230:
 2013              	.LBE229:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2014              		.loc 1 1762 2 is_stmt 1 view .LVU631
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2015              		.loc 1 1762 6 is_stmt 0 view .LVU632
 2016 0120 2849     		ldr	r1, .L212
 2017 0122 19A8     		add	r0, sp, #100
 2018              	.LVL210:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2019              		.loc 1 1762 6 view .LVU633
 2020 0124 FFF7FEFF 		bl	dn_lt
 2021              	.LVL211:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2022              		.loc 1 1762 5 view .LVU634
 2023 0128 78B9     		cbnz	r0, .L211
1763:src/display.c **** 	} else if (! dn_eq0(&a)) {
 2024              		.loc 1 1763 4 is_stmt 1 view .LVU635
 2025              	.LVL212:
 2026              	.LBB233:
 2027              	.LBI233:
 415:src/display.c ****   if (res) *res++ = ch;
 2028              		.loc 1 415 14 view .LVU636
 2029              	.LBB234:
 416:src/display.c ****   else	set_dig(base, ch);
 2030              		.loc 1 416 3 view .LVU637
 416:src/display.c ****   else	set_dig(base, ch);
 2031              		.loc 1 416 12 view .LVU638
 416:src/display.c ****   else	set_dig(base, ch);
 2032              		.loc 1 416 19 is_stmt 0 view .LVU639
ARM GAS  /tmp/cc9o0abE.s 			page 109


 2033 012a 6F23     		movs	r3, #111
 2034 012c 6370     		strb	r3, [r4, #1]
 2035              	.LBE234:
 2036              	.LBE233:
1769:src/display.c **** 
 2037              		.loc 1 1769 7 view .LVU640
 2038 012e 35B0     		add	sp, sp, #212
 2039              		.cfi_remember_state
 2040              		.cfi_def_cfa_offset 12
 2041              		@ sp needed
 2042 0130 30BD     		pop	{r4, r5, pc}
 2043              	.LVL213:
 2044              	.L210:
 2045              		.cfi_restore_state
1722:src/display.c **** 	    *res++ += '-';
 2046              		.loc 1 1722 4 is_stmt 1 view .LVU641
1722:src/display.c **** 	    *res++ += '-';
 2047              		.loc 1 1722 7 is_stmt 0 view .LVU642
 2048 0132 15B3     		cbz	r5, .L183
1723:src/display.c **** 	  else
 2049              		.loc 1 1723 6 is_stmt 1 view .LVU643
1723:src/display.c **** 	  else
 2050              		.loc 1 1723 10 is_stmt 0 view .LVU644
 2051 0134 2B46     		mov	r3, r5
 2052              	.LVL214:
1723:src/display.c **** 	  else
 2053              		.loc 1 1723 13 view .LVU645
 2054 0136 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2055              	.LVL215:
1723:src/display.c **** 	  else
 2056              		.loc 1 1723 13 view .LVU646
 2057 013a 2D32     		adds	r2, r2, #45
 2058 013c 2A70     		strb	r2, [r5]
1723:src/display.c **** 	  else
 2059              		.loc 1 1723 10 view .LVU647
 2060 013e 1D46     		mov	r5, r3
 2061              	.LVL216:
 2062              	.L184:
1726:src/display.c **** 	}
 2063              		.loc 1 1726 4 is_stmt 1 view .LVU648
 2064 0140 07A9     		add	r1, sp, #28
 2065 0142 0846     		mov	r0, r1
 2066 0144 FFF7FEFF 		bl	dn_minus
 2067              	.LVL217:
 2068 0148 7DE7     		b	.L182
 2069              	.LVL218:
 2070              	.L211:
 2071              	.LBB235:
 2072              	.LBB231:
 416:src/display.c ****   else	set_dig(base, ch);
 2073              		.loc 1 416 16 is_stmt 0 view .LVU649
 2074 014a 0134     		adds	r4, r4, #1
 2075              	.LVL219:
 2076              	.L198:
 416:src/display.c ****   else	set_dig(base, ch);
 2077              		.loc 1 416 16 view .LVU650
 2078              	.LBE231:
ARM GAS  /tmp/cc9o0abE.s 			page 110


 2079              	.LBE235:
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2080              		.loc 1 1764 9 is_stmt 1 view .LVU651
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2081              		.loc 1 1764 15 is_stmt 0 view .LVU652
 2082 014c 19A8     		add	r0, sp, #100
 2083 014e FFF7FEFF 		bl	dn_eq0
 2084              	.LVL220:
1764:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 2085              		.loc 1 1764 12 view .LVU653
 2086 0152 0028     		cmp	r0, #0
 2087 0154 7FF466AF 		bne	.L177
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2088              		.loc 1 1765 4 is_stmt 1 view .LVU654
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2089              		.loc 1 1765 8 is_stmt 0 view .LVU655
 2090 0158 1C48     		ldr	r0, .L212+8
 2091 015a 19A9     		add	r1, sp, #100
 2092 015c FFF7FEFF 		bl	dn_lt
 2093              	.LVL221:
1765:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 2094              		.loc 1 1765 7 view .LVU656
 2095 0160 0028     		cmp	r0, #0
 2096 0162 7FF45FAF 		bne	.L177
1766:src/display.c **** 	  }
 2097              		.loc 1 1766 6 is_stmt 1 view .LVU657
 2098              	.LVL222:
 2099              	.LBB236:
 2100              	.LBI236:
 415:src/display.c ****   if (res) *res++ = ch;
 2101              		.loc 1 415 14 view .LVU658
 2102              	.LBB237:
 416:src/display.c ****   else	set_dig(base, ch);
 2103              		.loc 1 416 3 view .LVU659
 416:src/display.c ****   else	set_dig(base, ch);
 2104              		.loc 1 416 6 is_stmt 0 view .LVU660
 2105 0166 3CB3     		cbz	r4, .L200
 416:src/display.c ****   else	set_dig(base, ch);
 2106              		.loc 1 416 12 is_stmt 1 view .LVU661
 2107              	.LVL223:
 416:src/display.c ****   else	set_dig(base, ch);
 2108              		.loc 1 416 19 is_stmt 0 view .LVU662
 2109 0168 7523     		movs	r3, #117
 2110 016a 2370     		strb	r3, [r4]
 2111 016c 5AE7     		b	.L177
 2112              	.LVL224:
 2113              	.L192:
 416:src/display.c ****   else	set_dig(base, ch);
 2114              		.loc 1 416 19 view .LVU663
 2115              	.LBE237:
 2116              	.LBE236:
1752:src/display.c **** 
 2117              		.loc 1 1752 8 view .LVU664
 2118 016e 0398     		ldr	r0, [sp, #12]
 2119              	.LVL225:
 2120              	.LBB239:
 2121              	.LBB228:
ARM GAS  /tmp/cc9o0abE.s 			page 111


1752:src/display.c **** 
 2122              		.loc 1 1752 8 view .LVU665
 2123 0170 0938     		subs	r0, r0, #9
 2124 0172 FFF7FEFF 		bl	set_decimal.part.0
 2125              	.LVL226:
1752:src/display.c **** 
 2126              		.loc 1 1752 8 view .LVU666
 2127 0176 0146     		mov	r1, r0
 2128 0178 C7E7     		b	.L194
 2129              	.LVL227:
 2130              	.L183:
1752:src/display.c **** 
 2131              		.loc 1 1752 8 view .LVU667
 2132              	.LBE228:
 2133              	.LBE239:
1725:src/display.c **** 	  dn_minus(&x, &x);
 2134              		.loc 1 1725 6 is_stmt 1 view .LVU668
 2135 017a 8120     		movs	r0, #129
 2136 017c FFF7FEFF 		bl	set_dot
 2137              	.LVL228:
 2138 0180 DEE7     		b	.L184
 2139              	.LVL229:
 2140              	.L195:
 2141              	.LBB240:
 2142              	.LBB232:
 417:src/display.c ****   return res;
 2143              		.loc 1 417 8 view .LVU669
 2144 0182 0398     		ldr	r0, [sp, #12]
 2145              	.LVL230:
 417:src/display.c ****   return res;
 2146              		.loc 1 417 8 is_stmt 0 view .LVU670
 2147 0184 2221     		movs	r1, #34
 2148 0186 FFF7FEFF 		bl	set_dig
 2149              	.LVL231:
 418:src/display.c **** }
 2150              		.loc 1 418 3 is_stmt 1 view .LVU671
 418:src/display.c **** }
 2151              		.loc 1 418 3 is_stmt 0 view .LVU672
 2152              	.LBE232:
 2153              	.LBE240:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2154              		.loc 1 1762 2 is_stmt 1 view .LVU673
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2155              		.loc 1 1762 6 is_stmt 0 view .LVU674
 2156 018a 0E49     		ldr	r1, .L212
 2157 018c 19A8     		add	r0, sp, #100
 2158 018e FFF7FEFF 		bl	dn_lt
 2159              	.LVL232:
1762:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 2160              		.loc 1 1762 5 view .LVU675
 2161 0192 0028     		cmp	r0, #0
 2162 0194 DAD1     		bne	.L198
 2163              	.LVL233:
 2164              	.L181:
 2165              	.LBB241:
 2166              	.LBB219:
 417:src/display.c ****   return res;
ARM GAS  /tmp/cc9o0abE.s 			page 112


 2167              		.loc 1 417 8 is_stmt 1 view .LVU676
 2168 0196 6F21     		movs	r1, #111
 2169 0198 7A20     		movs	r0, #122
 2170 019a FFF7FEFF 		bl	set_dig
 2171              	.LVL234:
 2172              	.LBE219:
 2173              	.LBE241:
1715:src/display.c **** 	}
 2174              		.loc 1 1715 4 view .LVU677
 2175 019e 41E7     		b	.L177
 2176              	.LVL235:
 2177              	.L190:
 2178              	.LBB242:
 2179              	.LBB225:
 417:src/display.c ****   return res;
 2180              		.loc 1 417 8 view .LVU678
 2181 01a0 2721     		movs	r1, #39
 2182 01a2 0398     		ldr	r0, [sp, #12]
 2183              	.LVL236:
 417:src/display.c ****   return res;
 2184              		.loc 1 417 8 is_stmt 0 view .LVU679
 2185 01a4 FFF7FEFF 		bl	set_dig
 2186              	.LVL237:
 417:src/display.c ****   return res;
 2187              		.loc 1 417 8 view .LVU680
 2188 01a8 2146     		mov	r1, r4
 2189 01aa 98E7     		b	.L191
 2190              	.LVL238:
 2191              	.L188:
 417:src/display.c ****   return res;
 2192              		.loc 1 417 8 view .LVU681
 2193              	.LBE225:
 2194              	.LBE242:
 2195              	.LBB243:
 2196              	.LBB222:
 417:src/display.c ****   return res;
 2197              		.loc 1 417 8 is_stmt 1 view .LVU682
 2198 01ac 4021     		movs	r1, #64
 2199 01ae 0398     		ldr	r0, [sp, #12]
 2200              	.LVL239:
 417:src/display.c ****   return res;
 2201              		.loc 1 417 8 is_stmt 0 view .LVU683
 2202 01b0 FFF7FEFF 		bl	set_dig
 2203              	.LVL240:
 417:src/display.c ****   return res;
 2204              		.loc 1 417 8 view .LVU684
 2205 01b4 2146     		mov	r1, r4
 2206 01b6 80E7     		b	.L189
 2207              	.LVL241:
 2208              	.L200:
 417:src/display.c ****   return res;
 2209              		.loc 1 417 8 view .LVU685
 2210              	.LBE222:
 2211              	.LBE243:
 2212              	.LBB244:
 2213              	.LBB238:
 417:src/display.c ****   return res;
ARM GAS  /tmp/cc9o0abE.s 			page 113


 2214              		.loc 1 417 8 is_stmt 1 view .LVU686
 2215 01b8 7521     		movs	r1, #117
 2216 01ba 7A20     		movs	r0, #122
 2217 01bc FFF7FEFF 		bl	set_dig
 2218              	.LVL242:
 2219 01c0 30E7     		b	.L177
 2220              	.L213:
 2221 01c2 00BF     		.align	2
 2222              	.L212:
 2223 01c4 00000000 		.word	const_9000
 2224 01c8 00000000 		.word	.LANCHOR1
 2225 01cc 00000000 		.word	const_hms_threshold
 2226              	.LBE238:
 2227              	.LBE244:
 2228              		.cfi_endproc
 2229              	.LFE18:
 2231              		.section	.text.set_x_fract,"ax",%progbits
 2232              		.align	1
 2233              		.p2align 2,,3
 2234              		.syntax unified
 2235              		.thumb
 2236              		.thumb_func
 2237              		.fpu fpv4-sp-d16
 2239              	set_x_fract:
 2240              	.LVL243:
 2241              	.LFB19:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2242              		.loc 1 1772 63 view -0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 216
 2245              		@ frame_needed = 0, uses_anonymous_args = 0
1773:src/display.c **** 	char buf[32], *p = buf;
 2246              		.loc 1 1773 2 view .LVU688
1774:src/display.c **** 	int j;
 2247              		.loc 1 1774 2 view .LVU689
1775:src/display.c **** 
 2248              		.loc 1 1775 2 view .LVU690
1777:src/display.c **** 	  return 1;
 2249              		.loc 1 1777 2 view .LVU691
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2250              		.loc 1 1772 63 is_stmt 0 view .LVU692
 2251 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2252              		.cfi_def_cfa_offset 20
 2253              		.cfi_offset 4, -20
 2254              		.cfi_offset 5, -16
 2255              		.cfi_offset 6, -12
 2256              		.cfi_offset 7, -8
 2257              		.cfi_offset 14, -4
 2258 0002 0646     		mov	r6, r0
 2259 0004 B7B0     		sub	sp, sp, #220
 2260              		.cfi_def_cfa_offset 240
1777:src/display.c **** 	  return 1;
 2261              		.loc 1 1777 6 view .LVU693
 2262 0006 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 2263              	.LVL244:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2264              		.loc 1 1772 63 view .LVU694
ARM GAS  /tmp/cc9o0abE.s 			page 114


 2265 0008 0C46     		mov	r4, r1
1777:src/display.c **** 	  return 1;
 2266              		.loc 1 1777 6 view .LVU695
 2267 000a FFF7FEFF 		bl	check_special_dn.isra.0
 2268              	.LVL245:
1777:src/display.c **** 	  return 1;
 2269              		.loc 1 1777 5 view .LVU696
 2270 000e 18B1     		cbz	r0, .L245
 2271              	.LVL246:
 2272              	.L234:
1778:src/display.c **** 	dn_abs(&x, rgx);
 2273              		.loc 1 1778 11 view .LVU697
 2274 0010 0125     		movs	r5, #1
 2275              	.L214:
1835:src/display.c **** 
 2276              		.loc 1 1835 7 view .LVU698
 2277 0012 2846     		mov	r0, r5
 2278 0014 37B0     		add	sp, sp, #220
 2279              		.cfi_remember_state
 2280              		.cfi_def_cfa_offset 20
 2281              		@ sp needed
 2282 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 2283              	.LVL247:
 2284              	.L245:
 2285              		.cfi_restore_state
 2286              	.LBB251:
 2287              	.LBI251:
1772:src/display.c **** 	decNumber x, w, n, d, t;
 2288              		.loc 1 1772 18 is_stmt 1 view .LVU699
 2289              	.LBB252:
1779:src/display.c **** 	if (dn_ge(&x, &const_100000))
 2290              		.loc 1 1779 2 view .LVU700
 2291 0018 3146     		mov	r1, r6
 2292 001a 0546     		mov	r5, r0
 2293 001c 09A8     		add	r0, sp, #36
 2294 001e FFF7FEFF 		bl	dn_abs
 2295              	.LVL248:
1780:src/display.c **** 	  return 0;
 2296              		.loc 1 1780 2 view .LVU701
1780:src/display.c **** 	  return 0;
 2297              		.loc 1 1780 6 is_stmt 0 view .LVU702
 2298 0022 5C49     		ldr	r1, .L250
 2299 0024 09A8     		add	r0, sp, #36
 2300 0026 FFF7FEFF 		bl	dn_lt
 2301              	.LVL249:
1780:src/display.c **** 	  return 0;
 2302              		.loc 1 1780 5 view .LVU703
 2303 002a 0028     		cmp	r0, #0
 2304 002c F1D0     		beq	.L214
1782:src/display.c **** 	  return 0;
 2305              		.loc 1 1782 2 is_stmt 1 view .LVU704
1782:src/display.c **** 	  return 0;
 2306              		.loc 1 1782 6 is_stmt 0 view .LVU705
 2307 002e 5A49     		ldr	r1, .L250+4
 2308 0030 09A8     		add	r0, sp, #36
 2309 0032 FFF7FEFF 		bl	dn_lt
 2310              	.LVL250:
ARM GAS  /tmp/cc9o0abE.s 			page 115


1782:src/display.c **** 	  return 0;
 2311              		.loc 1 1782 5 view .LVU706
 2312 0036 0746     		mov	r7, r0
 2313 0038 0028     		cmp	r0, #0
 2314 003a EAD1     		bne	.L214
1784:src/display.c **** 	  if (res != NULL)
 2315              		.loc 1 1784 2 is_stmt 1 view .LVU707
1784:src/display.c **** 	  if (res != NULL)
 2316              		.loc 1 1784 5 is_stmt 0 view .LVU708
 2317 003c 96F90830 		ldrsb	r3, [r6, #8]
 2318 0040 002B     		cmp	r3, #0
 2319 0042 C0F28680 		blt	.L246
 2320              	.LVL251:
 2321              	.L219:
1790:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 2322              		.loc 1 1790 2 is_stmt 1 view .LVU709
 2323 0046 09A9     		add	r1, sp, #36
 2324 0048 12A8     		add	r0, sp, #72
 2325 004a FFF7FEFF 		bl	decNumberFrac
 2326              	.LVL252:
1791:src/display.c **** 
 2327              		.loc 1 1791 2 view .LVU710
 2328 004e 12AA     		add	r2, sp, #72
 2329 0050 24A9     		add	r1, sp, #144
 2330 0052 1BA8     		add	r0, sp, #108
 2331 0054 FFF7FEFF 		bl	decNumber2Fraction
 2332              	.LVL253:
1793:src/display.c **** 	dn_compare(&t, &t, &w);
 2333              		.loc 1 1793 2 view .LVU711
 2334 0058 24AA     		add	r2, sp, #144
 2335 005a 1BA9     		add	r1, sp, #108
 2336 005c 2DA8     		add	r0, sp, #180
 2337 005e FFF7FEFF 		bl	dn_divide
 2338              	.LVL254:
1794:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 2339              		.loc 1 1794 2 view .LVU712
 2340 0062 2DA9     		add	r1, sp, #180
 2341 0064 12AA     		add	r2, sp, #72
 2342 0066 0846     		mov	r0, r1
 2343 0068 FFF7FEFF 		bl	dn_compare
 2344              	.LVL255:
1795:src/display.c **** 
 2345              		.loc 1 1795 2 view .LVU713
 2346 006c 09A9     		add	r1, sp, #36
 2347 006e 12A8     		add	r0, sp, #72
 2348 0070 FFF7FEFF 		bl	decNumberTrunc
 2349              	.LVL256:
1797:src/display.c **** 	  dn_inc(&w);
 2350              		.loc 1 1797 2 view .LVU714
1797:src/display.c **** 	  dn_inc(&w);
 2351              		.loc 1 1797 6 is_stmt 0 view .LVU715
 2352 0074 24A9     		add	r1, sp, #144
 2353 0076 1BA8     		add	r0, sp, #108
 2354 0078 FFF7FEFF 		bl	dn_eq
 2355              	.LVL257:
1797:src/display.c **** 	  dn_inc(&w);
 2356              		.loc 1 1797 5 view .LVU716
ARM GAS  /tmp/cc9o0abE.s 			page 116


 2357 007c 0028     		cmp	r0, #0
 2358 007e 70D1     		bne	.L247
 2359              	.L221:
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2360              		.loc 1 1802 2 is_stmt 1 view .LVU717
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2361              		.loc 1 1802 6 is_stmt 0 view .LVU718
 2362 0080 464B     		ldr	r3, .L250+8
 2363 0082 1B68     		ldr	r3, [r3]
 2364 0084 93F8E63F 		ldrb	r3, [r3, #4070]	@ zero_extendqisi2
1802:src/display.c **** 	  if (!dn_eq0(&w)) {
 2365              		.loc 1 1802 5 view .LVU719
 2366 0088 DB06     		lsls	r3, r3, #27
 2367 008a 55D4     		bmi	.L222
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2368              		.loc 1 1803 4 is_stmt 1 view .LVU720
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2369              		.loc 1 1803 9 is_stmt 0 view .LVU721
 2370 008c 12A8     		add	r0, sp, #72
 2371 008e FFF7FEFF 		bl	dn_eq0
 2372              	.LVL258:
1803:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 2373              		.loc 1 1803 7 view .LVU722
 2374 0092 0028     		cmp	r0, #0
 2375 0094 6CD0     		beq	.L248
1774:src/display.c **** 	int j;
 2376              		.loc 1 1774 17 view .LVU723
 2377 0096 01AE     		add	r6, sp, #4
 2378              	.LVL259:
1774:src/display.c **** 	int j;
 2379              		.loc 1 1774 17 view .LVU724
 2380 0098 3546     		mov	r5, r6
 2381              	.L223:
 2382              	.LVL260:
1811:src/display.c **** 	*p++ = '/';
 2383              		.loc 1 1811 2 is_stmt 1 view .LVU725
1811:src/display.c **** 	*p++ = '/';
 2384              		.loc 1 1811 17 is_stmt 0 view .LVU726
 2385 009a 1BA8     		add	r0, sp, #108
 2386 009c FFF7FEFF 		bl	dn_to_int
 2387              	.LVL261:
 2388 00a0 0146     		mov	r1, r0
1811:src/display.c **** 	*p++ = '/';
 2389              		.loc 1 1811 6 view .LVU727
 2390 00a2 2846     		mov	r0, r5
 2391 00a4 FFF7FEFF 		bl	num_arg
 2392              	.LVL262:
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2393              		.loc 1 1812 2 is_stmt 1 view .LVU728
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2394              		.loc 1 1812 4 is_stmt 0 view .LVU729
 2395 00a8 0546     		mov	r5, r0
 2396              	.LVL263:
1812:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2397              		.loc 1 1812 7 view .LVU730
 2398 00aa 2F23     		movs	r3, #47
 2399 00ac 05F8013B 		strb	r3, [r5], #1
ARM GAS  /tmp/cc9o0abE.s 			page 117


 2400              	.LVL264:
1813:src/display.c **** 	*p = '\0';
 2401              		.loc 1 1813 2 is_stmt 1 view .LVU731
1813:src/display.c **** 	*p = '\0';
 2402              		.loc 1 1813 17 is_stmt 0 view .LVU732
 2403 00b0 24A8     		add	r0, sp, #144
 2404 00b2 FFF7FEFF 		bl	dn_to_int
 2405              	.LVL265:
 2406 00b6 0146     		mov	r1, r0
1813:src/display.c **** 	*p = '\0';
 2407              		.loc 1 1813 6 view .LVU733
 2408 00b8 2846     		mov	r0, r5
 2409 00ba FFF7FEFF 		bl	num_arg
 2410              	.LVL266:
1814:src/display.c **** 	if ((p - 12) > buf) {
 2411              		.loc 1 1814 2 is_stmt 1 view .LVU734
1814:src/display.c **** 	if ((p - 12) > buf) {
 2412              		.loc 1 1814 5 is_stmt 0 view .LVU735
 2413 00be 0546     		mov	r5, r0
 2414 00c0 0023     		movs	r3, #0
 2415 00c2 05F80C39 		strb	r3, [r5], #-12
1815:src/display.c **** 	  p -= 12;
 2416              		.loc 1 1815 2 is_stmt 1 view .LVU736
1815:src/display.c **** 	  p -= 12;
 2417              		.loc 1 1815 5 is_stmt 0 view .LVU737
 2418 00c6 B542     		cmp	r5, r6
 2419 00c8 32D8     		bhi	.L224
 2420 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2421              	.LVL267:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2422              		.loc 1 1819 12 is_stmt 1 view .LVU738
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2423              		.loc 1 1819 2 is_stmt 0 view .LVU739
 2424 00ce 51B1     		cbz	r1, .L226
1818:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2425              		.loc 1 1818 11 view .LVU740
 2426 00d0 3546     		mov	r5, r6
 2427              	.LVL268:
 2428              	.L229:
1820:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2429              		.loc 1 1820 4 is_stmt 1 view .LVU741
 2430              	.LBB253:
 2431              	.LBI253:
 415:src/display.c ****   if (res) *res++ = ch;
 2432              		.loc 1 415 14 view .LVU742
 2433              	.LBB254:
 416:src/display.c ****   else	set_dig(base, ch);
 2434              		.loc 1 416 3 view .LVU743
 416:src/display.c ****   else	set_dig(base, ch);
 2435              		.loc 1 416 12 view .LVU744
 416:src/display.c ****   else	set_dig(base, ch);
 2436              		.loc 1 416 16 is_stmt 0 view .LVU745
 2437 00d2 2346     		mov	r3, r4
 2438              	.LVL269:
 416:src/display.c ****   else	set_dig(base, ch);
 2439              		.loc 1 416 6 view .LVU746
 2440 00d4 34B3     		cbz	r4, .L227
ARM GAS  /tmp/cc9o0abE.s 			page 118


 2441              	.LVL270:
 416:src/display.c ****   else	set_dig(base, ch);
 2442              		.loc 1 416 19 view .LVU747
 2443 00d6 03F8011B 		strb	r1, [r3], #1
 2444              	.LVL271:
 416:src/display.c ****   else	set_dig(base, ch);
 2445              		.loc 1 416 16 view .LVU748
 2446 00da 1C46     		mov	r4, r3
 2447              	.LVL272:
 2448              	.L228:
 418:src/display.c **** }
 2449              		.loc 1 418 3 is_stmt 1 view .LVU749
 418:src/display.c **** }
 2450              		.loc 1 418 3 is_stmt 0 view .LVU750
 2451              	.LBE254:
 2452              	.LBE253:
1821:src/display.c **** 	}
 2453              		.loc 1 1821 4 is_stmt 1 view .LVU751
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2454              		.loc 1 1819 12 is_stmt 0 view .LVU752
 2455 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2456              	.LVL273:
1821:src/display.c **** 	}
 2457              		.loc 1 1821 6 view .LVU753
 2458 00e0 0937     		adds	r7, r7, #9
 2459              	.LVL274:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2460              		.loc 1 1819 24 is_stmt 1 view .LVU754
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2461              		.loc 1 1819 12 view .LVU755
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2462              		.loc 1 1819 2 is_stmt 0 view .LVU756
 2463 00e2 0029     		cmp	r1, #0
 2464 00e4 F5D1     		bne	.L229
 2465              	.LVL275:
 2466              	.L226:
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2467              		.loc 1 1824 2 is_stmt 1 view .LVU757
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2468              		.loc 1 1824 6 is_stmt 0 view .LVU758
 2469 00e6 2DA8     		add	r0, sp, #180
 2470 00e8 FFF7FEFF 		bl	dn_eq0
 2471              	.LVL276:
1824:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2472              		.loc 1 1824 5 view .LVU759
 2473 00ec F0B9     		cbnz	r0, .L237
1826:src/display.c **** 	  p = (char *)S7_fract_LT;
 2474              		.loc 1 1826 7 is_stmt 1 view .LVU760
1826:src/display.c **** 	  p = (char *)S7_fract_LT;
 2475              		.loc 1 1826 10 is_stmt 0 view .LVU761
 2476 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1829:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2477              		.loc 1 1829 6 view .LVU762
 2478 00f2 2B4D     		ldr	r5, .L250+12
 2479 00f4 2B4B     		ldr	r3, .L250+16
 2480 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2481 00fa 38BF     		it	cc
ARM GAS  /tmp/cc9o0abE.s 			page 119


 2482 00fc 1D46     		movcc	r5, r3
 2483              	.L230:
 2484              	.LVL277:
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2485              		.loc 1 1830 26 is_stmt 1 view .LVU763
 2486              	.LBB257:
 2487              	.LBB255:
 416:src/display.c ****   else	set_dig(base, ch);
 2488              		.loc 1 416 16 is_stmt 0 view .LVU764
 2489 00fe 6C26     		movs	r6, #108
 2490 0100 2021     		movs	r1, #32
 2491 0102 08E0     		b	.L233
 2492              	.LVL278:
 2493              	.L249:
 416:src/display.c ****   else	set_dig(base, ch);
 2494              		.loc 1 416 16 view .LVU765
 2495              	.LBE255:
 2496              	.LBE257:
 2497              	.LBB258:
 2498              	.LBB259:
 416:src/display.c ****   else	set_dig(base, ch);
 2499              		.loc 1 416 19 view .LVU766
 2500 0104 03F8011B 		strb	r1, [r3], #1
 2501              	.LVL279:
 416:src/display.c ****   else	set_dig(base, ch);
 2502              		.loc 1 416 16 view .LVU767
 2503 0108 1C46     		mov	r4, r3
 2504              	.LVL280:
 2505              	.L232:
 418:src/display.c **** }
 2506              		.loc 1 418 3 is_stmt 1 view .LVU768
 418:src/display.c **** }
 2507              		.loc 1 418 3 is_stmt 0 view .LVU769
 2508              	.LBE259:
 2509              	.LBE258:
1832:src/display.c **** 	}
 2510              		.loc 1 1832 4 is_stmt 1 view .LVU770
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2511              		.loc 1 1830 26 is_stmt 0 view .LVU771
 2512 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2513              	.LVL281:
1832:src/display.c **** 	}
 2514              		.loc 1 1832 6 view .LVU772
 2515 010e 0736     		adds	r6, r6, #7
 2516              	.LVL282:
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2517              		.loc 1 1830 38 is_stmt 1 view .LVU773
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2518              		.loc 1 1830 26 view .LVU774
1830:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2519              		.loc 1 1830 2 is_stmt 0 view .LVU775
 2520 0110 0029     		cmp	r1, #0
 2521 0112 3FF47DAF 		beq	.L234
 2522              	.LVL283:
 2523              	.L233:
1831:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2524              		.loc 1 1831 4 is_stmt 1 view .LVU776
ARM GAS  /tmp/cc9o0abE.s 			page 120


 2525              	.LBB261:
 2526              	.LBI258:
 415:src/display.c ****   if (res) *res++ = ch;
 2527              		.loc 1 415 14 view .LVU777
 2528              	.LBB260:
 416:src/display.c ****   else	set_dig(base, ch);
 2529              		.loc 1 416 3 view .LVU778
 416:src/display.c ****   else	set_dig(base, ch);
 2530              		.loc 1 416 12 view .LVU779
 416:src/display.c ****   else	set_dig(base, ch);
 2531              		.loc 1 416 16 is_stmt 0 view .LVU780
 2532 0116 2346     		mov	r3, r4
 2533              	.LVL284:
 416:src/display.c ****   else	set_dig(base, ch);
 2534              		.loc 1 416 6 view .LVU781
 2535 0118 002C     		cmp	r4, #0
 2536 011a F3D1     		bne	.L249
 2537              	.LVL285:
 417:src/display.c ****   return res;
 2538              		.loc 1 417 8 is_stmt 1 view .LVU782
 2539 011c 3046     		mov	r0, r6
 2540 011e FFF7FEFF 		bl	set_dig
 2541              	.LVL286:
 417:src/display.c ****   return res;
 2542              		.loc 1 417 8 is_stmt 0 view .LVU783
 2543 0122 F2E7     		b	.L232
 2544              	.LVL287:
 2545              	.L227:
 417:src/display.c ****   return res;
 2546              		.loc 1 417 8 view .LVU784
 2547              	.LBE260:
 2548              	.LBE261:
 2549              	.LBB262:
 2550              	.LBB256:
 417:src/display.c ****   return res;
 2551              		.loc 1 417 8 is_stmt 1 view .LVU785
 2552 0124 3846     		mov	r0, r7
 2553 0126 FFF7FEFF 		bl	set_dig
 2554              	.LVL288:
 417:src/display.c ****   return res;
 2555              		.loc 1 417 8 is_stmt 0 view .LVU786
 2556 012a D7E7     		b	.L228
 2557              	.LVL289:
 2558              	.L237:
 417:src/display.c ****   return res;
 2559              		.loc 1 417 8 view .LVU787
 2560              	.LBE256:
 2561              	.LBE262:
1825:src/display.c **** 	else if (decNumberIsNegative(&t))
 2562              		.loc 1 1825 6 view .LVU788
 2563 012c 1E4D     		ldr	r5, .L250+20
 2564 012e E6E7     		b	.L230
 2565              	.LVL290:
 2566              	.L224:
1816:src/display.c **** 	  *p = '<';
 2567              		.loc 1 1816 4 is_stmt 1 view .LVU789
1817:src/display.c **** 	} else	p = buf;
ARM GAS  /tmp/cc9o0abE.s 			page 121


 2568              		.loc 1 1817 4 view .LVU790
1817:src/display.c **** 	} else	p = buf;
 2569              		.loc 1 1817 7 is_stmt 0 view .LVU791
 2570 0130 3C21     		movs	r1, #60
 2571 0132 00F80C1C 		strb	r1, [r0, #-12]
 2572              	.LVL291:
1819:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2573              		.loc 1 1819 12 is_stmt 1 view .LVU792
 2574 0136 CCE7     		b	.L229
 2575              	.LVL292:
 2576              	.L222:
1808:src/display.c **** 	  dn_add(&n, &n, &x);
 2577              		.loc 1 1808 4 view .LVU793
 2578 0138 12A9     		add	r1, sp, #72
 2579 013a 24AA     		add	r2, sp, #144
 2580 013c 09A8     		add	r0, sp, #36
 2581 013e FFF7FEFF 		bl	dn_multiply
 2582              	.LVL293:
1809:src/display.c **** 	}
 2583              		.loc 1 1809 4 view .LVU794
 2584 0142 1BA9     		add	r1, sp, #108
 2585 0144 09AA     		add	r2, sp, #36
 2586 0146 0846     		mov	r0, r1
1774:src/display.c **** 	int j;
 2587              		.loc 1 1774 17 is_stmt 0 view .LVU795
 2588 0148 01AE     		add	r6, sp, #4
 2589              	.LVL294:
1809:src/display.c **** 	}
 2590              		.loc 1 1809 4 view .LVU796
 2591 014a FFF7FEFF 		bl	dn_add
 2592              	.LVL295:
1774:src/display.c **** 	int j;
 2593              		.loc 1 1774 17 view .LVU797
 2594 014e 3546     		mov	r5, r6
 2595 0150 A3E7     		b	.L223
 2596              	.LVL296:
 2597              	.L246:
1785:src/display.c **** 	    *res++ += '-';
 2598              		.loc 1 1785 4 is_stmt 1 view .LVU798
1785:src/display.c **** 	    *res++ += '-';
 2599              		.loc 1 1785 7 is_stmt 0 view .LVU799
 2600 0152 D4B1     		cbz	r4, .L220
1786:src/display.c **** 	  else
 2601              		.loc 1 1786 6 is_stmt 1 view .LVU800
1786:src/display.c **** 	  else
 2602              		.loc 1 1786 10 is_stmt 0 view .LVU801
 2603 0154 2346     		mov	r3, r4
 2604              	.LVL297:
1786:src/display.c **** 	  else
 2605              		.loc 1 1786 13 view .LVU802
 2606 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2607              	.LVL298:
1786:src/display.c **** 	  else
 2608              		.loc 1 1786 13 view .LVU803
 2609 015a 2D32     		adds	r2, r2, #45
 2610 015c 2270     		strb	r2, [r4]
1786:src/display.c **** 	  else
ARM GAS  /tmp/cc9o0abE.s 			page 122


 2611              		.loc 1 1786 10 view .LVU804
 2612 015e 1C46     		mov	r4, r3
 2613              	.LVL299:
1786:src/display.c **** 	  else
 2614              		.loc 1 1786 10 view .LVU805
 2615 0160 71E7     		b	.L219
 2616              	.LVL300:
 2617              	.L247:
1798:src/display.c **** 	  decNumberZero(&n);
 2618              		.loc 1 1798 4 is_stmt 1 view .LVU806
 2619 0162 12A8     		add	r0, sp, #72
 2620 0164 FFF7FEFF 		bl	dn_inc
 2621              	.LVL301:
1799:src/display.c **** 	}
 2622              		.loc 1 1799 4 view .LVU807
 2623 0168 1BA8     		add	r0, sp, #108
 2624 016a FFF7FEFF 		bl	decNumberZero
 2625              	.LVL302:
 2626 016e 87E7     		b	.L221
 2627              	.L248:
1804:src/display.c **** 	    *p++ = ' ';
 2628              		.loc 1 1804 6 view .LVU808
1804:src/display.c **** 	    *p++ = ' ';
 2629              		.loc 1 1804 21 is_stmt 0 view .LVU809
 2630 0170 12A8     		add	r0, sp, #72
 2631 0172 FFF7FEFF 		bl	dn_to_int
 2632              	.LVL303:
1804:src/display.c **** 	    *p++ = ' ';
 2633              		.loc 1 1804 10 view .LVU810
 2634 0176 01AE     		add	r6, sp, #4
 2635              	.LVL304:
1804:src/display.c **** 	    *p++ = ' ';
 2636              		.loc 1 1804 21 view .LVU811
 2637 0178 0146     		mov	r1, r0
1804:src/display.c **** 	    *p++ = ' ';
 2638              		.loc 1 1804 10 view .LVU812
 2639 017a 3046     		mov	r0, r6
 2640 017c FFF7FEFF 		bl	num_arg
 2641              	.LVL305:
1805:src/display.c **** 	  }
 2642              		.loc 1 1805 6 is_stmt 1 view .LVU813
1805:src/display.c **** 	  }
 2643              		.loc 1 1805 8 is_stmt 0 view .LVU814
 2644 0180 0546     		mov	r5, r0
 2645              	.LVL306:
1805:src/display.c **** 	  }
 2646              		.loc 1 1805 11 view .LVU815
 2647 0182 2023     		movs	r3, #32
 2648 0184 05F8013B 		strb	r3, [r5], #1
 2649              	.LVL307:
1805:src/display.c **** 	  }
 2650              		.loc 1 1805 11 view .LVU816
 2651 0188 87E7     		b	.L223
 2652              	.LVL308:
 2653              	.L220:
1788:src/display.c **** 	}
 2654              		.loc 1 1788 6 is_stmt 1 view .LVU817
ARM GAS  /tmp/cc9o0abE.s 			page 123


 2655 018a 8120     		movs	r0, #129
 2656 018c FFF7FEFF 		bl	set_dot
 2657              	.LVL309:
 2658 0190 59E7     		b	.L219
 2659              	.L251:
 2660 0192 00BF     		.align	2
 2661              	.L250:
 2662 0194 00000000 		.word	const_100000
 2663 0198 00000000 		.word	const_0_0001
 2664 019c 00000000 		.word	main_ram
 2665 01a0 00000000 		.word	.LANCHOR5
 2666 01a4 00000000 		.word	.LANCHOR7
 2667 01a8 00000000 		.word	.LANCHOR6
 2668              	.LBE252:
 2669              	.LBE251:
 2670              		.cfi_endproc
 2671              	.LFE19:
 2673              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2674              		.align	2
 2675              	.LC1:
 2676 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2676      36376F39 
 2676      44313233 
 2676      34356800 
 2677              		.section	.text.carry_overflow,"ax",%progbits
 2678              		.align	1
 2679              		.p2align 2,,3
 2680              		.syntax unified
 2681              		.thumb
 2682              		.thumb_func
 2683              		.fpu fpv4-sp-d16
 2685              	carry_overflow:
 2686              	.LFB11:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2687              		.loc 1 570 38 view -0
 2688              		.cfi_startproc
 2689              		@ args = 0, pretend = 0, frame = 0
 2690              		@ frame_needed = 0, uses_anonymous_args = 0
 571:src/display.c ****       int c;
 2691              		.loc 1 571 7 view .LVU819
 2692              	.LVL310:
 572:src/display.c ****       unsigned int b;
 2693              		.loc 1 572 7 view .LVU820
 573:src/display.c **** 
 2694              		.loc 1 573 7 view .LVU821
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2695              		.loc 1 576 7 view .LVU822
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2696              		.loc 1 570 38 is_stmt 0 view .LVU823
 2697 0000 10B5     		push	{r4, lr}
 2698              		.cfi_def_cfa_offset 8
 2699              		.cfi_offset 4, -8
 2700              		.cfi_offset 14, -4
 576:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2701              		.loc 1 576 21 view .LVU824
 2702 0002 1A4B     		ldr	r3, .L265
 2703 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
ARM GAS  /tmp/cc9o0abE.s 			page 124


 2704 0006 023B     		subs	r3, r3, #2
 2705 0008 DBB2     		uxtb	r3, r3
 2706 000a 032B     		cmp	r3, #3
 2707 000c 14D8     		bhi	.L253
 2708 000e 184A     		ldr	r2, .L265+4
 2709 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2710              	.LVL311:
 585:src/display.c **** 	SET_EXP_SIGN;
 2711              		.loc 1 585 7 is_stmt 1 view .LVU825
 585:src/display.c **** 	SET_EXP_SIGN;
 2712              		.loc 1 585 18 is_stmt 0 view .LVU826
 2713 0014 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2714              		.loc 1 585 10 view .LVU827
 2715 0018 042B     		cmp	r3, #4
 2716 001a 17D9     		bls	.L262
 2717              	.L255:
 587:src/display.c ****       set_dig(base, c);
 2718              		.loc 1 587 7 is_stmt 1 view .LVU828
 2719              	.LVL312:
 588:src/display.c **** 
 2720              		.loc 1 588 7 view .LVU829
 587:src/display.c ****       set_dig(base, c);
 2721              		.loc 1 587 28 is_stmt 0 view .LVU830
 2722 001c 154B     		ldr	r3, .L265+8
 2723 001e 1C44     		add	r4, r4, r3
 2724              	.LVL313:
 588:src/display.c **** 
 2725              		.loc 1 588 7 view .LVU831
 2726 0020 6C20     		movs	r0, #108
 2727 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2728 0026 FFF7FEFF 		bl	set_dig
 2729              	.LVL314:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2730              		.loc 1 591 7 is_stmt 1 view .LVU832
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2731              		.loc 1 591 11 is_stmt 0 view .LVU833
 2732 002a FFF7FEFF 		bl	get_carry
 2733              	.LVL315:
 591:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2734              		.loc 1 591 10 view .LVU834
 2735 002e B8B9     		cbnz	r0, .L263
 2736              	.L256:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2737              		.loc 1 593 7 is_stmt 1 view .LVU835
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2738              		.loc 1 593 11 is_stmt 0 view .LVU836
 2739 0030 FFF7FEFF 		bl	get_overflow
 2740              	.LVL316:
 593:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2741              		.loc 1 593 10 view .LVU837
 2742 0034 70B9     		cbnz	r0, .L264
 595:src/display.c **** 
 2743              		.loc 1 595 5 view .LVU838
 2744 0036 10BD     		pop	{r4, pc}
 2745              	.LVL317:
 2746              	.L253:
ARM GAS  /tmp/cc9o0abE.s 			page 125


 581:src/display.c ****       }
 2747              		.loc 1 581 16 is_stmt 1 view .LVU839
 581:src/display.c ****       }
 2748              		.loc 1 581 26 is_stmt 0 view .LVU840
 2749 0038 0F4B     		ldr	r3, .L265+12
 2750 003a 1B68     		ldr	r3, [r3]
 2751 003c 93F8E84F 		ldrb	r4, [r3, #4072]	@ zero_extendqisi2
 2752 0040 2409     		lsrs	r4, r4, #4
 581:src/display.c ****       }
 2753              		.loc 1 581 35 view .LVU841
 2754 0042 0134     		adds	r4, r4, #1
 2755              	.LVL318:
 581:src/display.c ****       }
 2756              		.loc 1 581 39 is_stmt 1 view .LVU842
 585:src/display.c **** 	SET_EXP_SIGN;
 2757              		.loc 1 585 7 view .LVU843
 585:src/display.c **** 	SET_EXP_SIGN;
 2758              		.loc 1 585 18 is_stmt 0 view .LVU844
 2759 0044 A4F10B03 		sub	r3, r4, #11
 585:src/display.c **** 	SET_EXP_SIGN;
 2760              		.loc 1 585 10 view .LVU845
 2761 0048 042B     		cmp	r3, #4
 2762 004a E7D8     		bhi	.L255
 2763              	.L262:
 586:src/display.c ****       c = "B34567o9D12345h"[b-2];
 2764              		.loc 1 586 2 is_stmt 1 view .LVU846
 2765 004c 8220     		movs	r0, #130
 2766 004e FFF7FEFF 		bl	set_dot
 2767              	.LVL319:
 2768 0052 E3E7     		b	.L255
 2769              	.LVL320:
 2770              	.L264:
 2771              	.LBB265:
 2772              	.LBI265:
 570:src/display.c ****       const int base = SEGS_EXP_BASE;
 2773              		.loc 1 570 17 view .LVU847
 2774              	.LBB266:
 594:src/display.c ****     }
 2775              		.loc 1 594 2 view .LVU848
 2776              	.LBE266:
 2777              	.LBE265:
 595:src/display.c **** 
 2778              		.loc 1 595 5 is_stmt 0 view .LVU849
 2779 0054 BDE81040 		pop	{r4, lr}
 2780              		.cfi_remember_state
 2781              		.cfi_restore 14
 2782              		.cfi_restore 4
 2783              		.cfi_def_cfa_offset 0
 2784              	.LVL321:
 2785              	.LBB268:
 2786              	.LBB267:
 594:src/display.c ****     }
 2787              		.loc 1 594 2 view .LVU850
 2788 0058 6F21     		movs	r1, #111
 2789 005a 7A20     		movs	r0, #122
 2790 005c FFF7FEBF 		b	set_dig
 2791              	.LVL322:
ARM GAS  /tmp/cc9o0abE.s 			page 126


 2792              	.L263:
 2793              		.cfi_restore_state
 594:src/display.c ****     }
 2794              		.loc 1 594 2 view .LVU851
 2795              	.LBE267:
 2796              	.LBE268:
 592:src/display.c ****       if (get_overflow())
 2797              		.loc 1 592 2 is_stmt 1 view .LVU852
 2798 0060 6321     		movs	r1, #99
 2799 0062 7320     		movs	r0, #115
 2800 0064 FFF7FEFF 		bl	set_dig
 2801              	.LVL323:
 2802 0068 E2E7     		b	.L256
 2803              	.L266:
 2804 006a 00BF     		.align	2
 2805              	.L265:
 2806 006c 00000000 		.word	StateWhileOn
 2807 0070 00000000 		.word	.LANCHOR8
 2808 0074 00000000 		.word	.LC1
 2809 0078 00000000 		.word	main_ram
 2810              		.cfi_endproc
 2811              	.LFE11:
 2813              		.global	__aeabi_uldivmod
 2814              		.section	.text.set_int_x,"ax",%progbits
 2815              		.align	1
 2816              		.p2align 2,,3
 2817              		.syntax unified
 2818              		.thumb
 2819              		.thumb_func
 2820              		.fpu fpv4-sp-d16
 2822              	set_int_x:
 2823              	.LVL324:
 2824              	.LFB14:
1485:src/display.c **** 	const int ws = word_size();
 2825              		.loc 1 1485 67 view -0
 2826              		.cfi_startproc
 2827              		@ args = 0, pretend = 0, frame = 88
 2828              		@ frame_needed = 0, uses_anonymous_args = 0
1485:src/display.c **** 	const int ws = word_size();
 2829              		.loc 1 1485 67 is_stmt 0 view .LVU854
 2830 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2831              		.cfi_def_cfa_offset 36
 2832              		.cfi_offset 4, -36
 2833              		.cfi_offset 5, -32
 2834              		.cfi_offset 6, -28
 2835              		.cfi_offset 7, -24
 2836              		.cfi_offset 8, -20
 2837              		.cfi_offset 9, -16
 2838              		.cfi_offset 10, -12
 2839              		.cfi_offset 11, -8
 2840              		.cfi_offset 14, -4
 2841 0004 97B0     		sub	sp, sp, #92
 2842              		.cfi_def_cfa_offset 128
1485:src/display.c **** 	const int ws = word_size();
 2843              		.loc 1 1485 67 view .LVU855
 2844 0006 1546     		mov	r5, r2
 2845 0008 0646     		mov	r6, r0
ARM GAS  /tmp/cc9o0abE.s 			page 127


 2846 000a 0F46     		mov	r7, r1
1486:src/display.c **** 	unsigned int b;
 2847              		.loc 1 1486 2 is_stmt 1 view .LVU856
1486:src/display.c **** 	unsigned int b;
 2848              		.loc 1 1486 17 is_stmt 0 view .LVU857
 2849 000c FFF7FEFF 		bl	word_size
 2850              	.LVL325:
1486:src/display.c **** 	unsigned int b;
 2851              		.loc 1 1486 17 view .LVU858
 2852 0010 CD4B     		ldr	r3, .L359
 2853 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2854 0014 023B     		subs	r3, r3, #2
 2855 0016 DBB2     		uxtb	r3, r3
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2856              		.loc 1 1492 6 view .LVU859
 2857 0018 0022     		movs	r2, #0
 2858 001a 032B     		cmp	r3, #3
1486:src/display.c **** 	unsigned int b;
 2859              		.loc 1 1486 17 view .LVU860
 2860 001c 8346     		mov	fp, r0
 2861              	.LVL326:
1487:src/display.c **** 	long long int vs = value;
 2862              		.loc 1 1487 2 is_stmt 1 view .LVU861
1488:src/display.c **** 	unsigned long long int v;
 2863              		.loc 1 1488 2 view .LVU862
1489:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 2864              		.loc 1 1489 2 view .LVU863
1490:src/display.c **** 	int i, j, k;
 2865              		.loc 1 1490 2 view .LVU864
1491:src/display.c **** 	int sign = 0;
 2866              		.loc 1 1491 2 view .LVU865
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2867              		.loc 1 1492 2 view .LVU866
1492:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2868              		.loc 1 1492 6 is_stmt 0 view .LVU867
 2869 001e 0492     		str	r2, [sp, #16]
1493:src/display.c **** 
 2870              		.loc 1 1493 2 is_stmt 1 view .LVU868
 2871              	.LVL327:
1495:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2872              		.loc 1 1495 2 view .LVU869
 2873 0020 00F24181 		bhi	.L268
 2874 0024 C94A     		ldr	r2, .L359+4
 2875 0026 52F823A0 		ldr	r10, [r2, r3, lsl #2]
 2876              	.LVL328:
1503:src/display.c **** 	  IntMaxWindow = 0;
 2877              		.loc 1 1503 2 view .LVU870
1503:src/display.c **** 	  IntMaxWindow = 0;
 2878              		.loc 1 1503 5 is_stmt 0 view .LVU871
 2879 002a 002D     		cmp	r5, #0
 2880 002c 00F04181 		beq	.L350
 2881              	.LVL329:
 2882              	.L270:
1508:src/display.c **** 	  v = extract_value(value, &sign);
 2883              		.loc 1 1508 2 is_stmt 1 view .LVU872
1508:src/display.c **** 	  v = extract_value(value, &sign);
 2884              		.loc 1 1508 24 is_stmt 0 view .LVU873
ARM GAS  /tmp/cc9o0abE.s 			page 128


 2885 0030 0AF1FF33 		add	r3, r10, #-1
1508:src/display.c **** 	  v = extract_value(value, &sign);
 2886              		.loc 1 1508 30 view .LVU874
 2887 0034 47F67574 		movw	r4, #32629
 2888 0038 1C41     		asrs	r4, r4, r3
1508:src/display.c **** 	  v = extract_value(value, &sign);
 2889              		.loc 1 1508 5 view .LVU875
 2890 003a 14F00104 		ands	r4, r4, #1
 2891 003e 40F0F380 		bne	.L351
1525:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2892              		.loc 1 1525 4 is_stmt 1 view .LVU876
1525:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2893              		.loc 1 1525 7 is_stmt 0 view .LVU877
 2894 0042 BBF13F0F 		cmp	fp, #63
 2895 0046 17DC     		bgt	.L281
 2896              	.LBB269:
1526:src/display.c **** 	    vs &= mask;
 2897              		.loc 1 1526 6 is_stmt 1 view .LVU878
1526:src/display.c **** 	    vs &= mask;
 2898              		.loc 1 1526 38 is_stmt 0 view .LVU879
 2899 0048 0121     		movs	r1, #1
 2900 004a ABF1200C 		sub	ip, fp, #32
 2901 004e CBF12000 		rsb	r0, fp, #32
 2902 0052 21FA00F0 		lsr	r0, r1, r0
 2903 0056 01FA0CF3 		lsl	r3, r1, ip
 2904 005a 01FA0BF2 		lsl	r2, r1, fp
 2905 005e 0343     		orrs	r3, r3, r0
 2906              	.LVL330:
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2907              		.loc 1 1527 6 is_stmt 1 view .LVU880
1526:src/display.c **** 	    vs &= mask;
 2908              		.loc 1 1526 26 is_stmt 0 view .LVU881
 2909 0060 12F1FF30 		adds	r0, r2, #-1
 2910 0064 43F1FF31 		adc	r1, r3, #-1
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2911              		.loc 1 1527 9 view .LVU882
 2912 0068 3040     		ands	r0, r0, r6
 2913 006a 3940     		ands	r1, r1, r7
 2914              	.LVL331:
1528:src/display.c **** 	      vs |= ~mask;
 2915              		.loc 1 1528 9 view .LVU883
 2916 006c BAF10A0F 		cmp	r10, #10
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2917              		.loc 1 1527 9 view .LVU884
 2918 0070 0646     		mov	r6, r0
 2919              	.LVL332:
1527:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2920              		.loc 1 1527 9 view .LVU885
 2921 0072 0F46     		mov	r7, r1
1528:src/display.c **** 	      vs |= ~mask;
 2922              		.loc 1 1528 6 is_stmt 1 view .LVU886
1528:src/display.c **** 	      vs |= ~mask;
 2923              		.loc 1 1528 9 is_stmt 0 view .LVU887
 2924 0074 00F03D81 		beq	.L352
 2925              	.LVL333:
 2926              	.L281:
1528:src/display.c **** 	      vs |= ~mask;
ARM GAS  /tmp/cc9o0abE.s 			page 129


 2927              		.loc 1 1528 9 view .LVU888
 2928              	.LBE269:
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 2929              		.loc 1 1532 4 is_stmt 1 view .LVU889
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 2930              		.loc 1 1532 8 is_stmt 0 view .LVU890
 2931 0078 B54B     		ldr	r3, .L359+8
 2932 007a 1B68     		ldr	r3, [r3]
 2933 007c 93F8E83F 		ldrb	r3, [r3, #4072]	@ zero_extendqisi2
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 2934              		.loc 1 1532 7 view .LVU891
 2935 0080 9A07     		lsls	r2, r3, #30
 2936 0082 41D5     		bpl	.L312
1535:src/display.c **** 	    v = (unsigned long long int)vs;
 2937              		.loc 1 1535 11 is_stmt 1 view .LVU892
 2938              	.LBB270:
1543:src/display.c **** 	    const unsigned int b1 = b >> 1;
 2939              		.loc 1 1543 6 view .LVU893
1544:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2940              		.loc 1 1544 6 view .LVU894
1544:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2941              		.loc 1 1544 25 is_stmt 0 view .LVU895
 2942 0084 4FEA5A02 		lsr	r2, r10, #1
 2943              	.LVL334:
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 2944              		.loc 1 1545 6 is_stmt 1 view .LVU896
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 2945              		.loc 1 1545 43 is_stmt 0 view .LVU897
 2946 0088 12F00A0F 		tst	r2, #10
 2947 008c 14BF     		ite	ne
 2948 008e 0123     		movne	r3, #1
 2949 0090 0023     		moveq	r3, #0
1545:src/display.c **** 	    v = (unsigned long long int)vs;
 2950              		.loc 1 1545 70 view .LVU898
 2951 0092 12F00C0F 		tst	r2, #12
 2952 0096 18BF     		it	ne
 2953 0098 43F00203 		orrne	r3, r3, #2
 2954              	.LVL335:
 2955              	.L287:
1546:src/display.c **** 
 2956              		.loc 1 1546 6 is_stmt 1 discriminator 4 view .LVU899
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 2957              		.loc 1 1548 14 is_stmt 0 discriminator 4 view .LVU900
 2958 009c 0BEB0308 		add	r8, fp, r3
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 2959              		.loc 1 1548 27 discriminator 4 view .LVU901
 2960 00a0 0133     		adds	r3, r3, #1
 2961              	.LVL336:
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 2962              		.loc 1 1548 21 discriminator 4 view .LVU902
 2963 00a2 B8FBF3F8 		udiv	r8, r8, r3
1549:src/display.c **** 	      const int r = v % b;
 2964              		.loc 1 1549 6 discriminator 4 view .LVU903
 2965 00a6 B8F1000F 		cmp	r8, #0
1546:src/display.c **** 
 2966              		.loc 1 1546 8 discriminator 4 view .LVU904
 2967 00aa 3046     		mov	r0, r6
ARM GAS  /tmp/cc9o0abE.s 			page 130


 2968 00ac 3946     		mov	r1, r7
 2969              	.LVL337:
1548:src/display.c **** 	    for (i=0; i<n; i++) {
 2970              		.loc 1 1548 6 is_stmt 1 discriminator 4 view .LVU905
1549:src/display.c **** 	      const int r = v % b;
 2971              		.loc 1 1549 6 discriminator 4 view .LVU906
1549:src/display.c **** 	      const int r = v % b;
 2972              		.loc 1 1549 16 discriminator 4 view .LVU907
1549:src/display.c **** 	      const int r = v % b;
 2973              		.loc 1 1549 6 is_stmt 0 discriminator 4 view .LVU908
 2974 00ae 40F38081 		ble	.L313
 2975 00b2 05AC     		add	r4, sp, #20
 2976 00b4 DFF8A4B2 		ldr	fp, .L359+20
 2977              	.LVL338:
1549:src/display.c **** 	      const int r = v % b;
 2978              		.loc 1 1549 6 discriminator 4 view .LVU909
 2979 00b8 08EB0406 		add	r6, r8, r4
 2980              	.LVL339:
 2981              	.L288:
 2982              	.LBB271:
1550:src/display.c **** 	      v /= b;
 2983              		.loc 1 1550 8 is_stmt 1 discriminator 3 view .LVU910
 2984 00bc 5246     		mov	r2, r10
 2985 00be 0023     		movs	r3, #0
 2986 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 2987              	.LVL340:
1551:src/display.c **** 	      buf[i] = DIGITS[r];
 2988              		.loc 1 1551 8 discriminator 3 view .LVU911
1552:src/display.c **** 	    }
 2989              		.loc 1 1552 15 is_stmt 0 discriminator 3 view .LVU912
 2990 00c4 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 2991 00c8 04F8013B 		strb	r3, [r4], #1
 2992              	.LVL341:
1552:src/display.c **** 	    }
 2993              		.loc 1 1552 8 is_stmt 1 discriminator 3 view .LVU913
 2994              	.LBE271:
1549:src/display.c **** 	      const int r = v % b;
 2995              		.loc 1 1549 21 discriminator 3 view .LVU914
1549:src/display.c **** 	      const int r = v % b;
 2996              		.loc 1 1549 16 discriminator 3 view .LVU915
1549:src/display.c **** 	      const int r = v % b;
 2997              		.loc 1 1549 6 is_stmt 0 discriminator 3 view .LVU916
 2998 00cc B442     		cmp	r4, r6
 2999 00ce F5D1     		bne	.L288
 3000 00d0 08F1FF31 		add	r1, r8, #-1
 3001              	.LVL342:
1549:src/display.c **** 	      const int r = v % b;
 3002              		.loc 1 1549 6 view .LVU917
 3003 00d4 4446     		mov	r4, r8
 3004              	.LVL343:
 3005              	.L280:
1549:src/display.c **** 	      const int r = v % b;
 3006              		.loc 1 1549 6 view .LVU918
 3007              	.LBE270:
1562:src/display.c **** 	if (res) {
 3008              		.loc 1 1562 2 is_stmt 1 view .LVU919
1563:src/display.c **** 	  if (sign) *res++ = '-';
ARM GAS  /tmp/cc9o0abE.s 			page 131


 3009              		.loc 1 1563 2 view .LVU920
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3010              		.loc 1 1563 5 is_stmt 0 view .LVU921
 3011 00d6 002D     		cmp	r5, #0
 3012 00d8 3ED0     		beq	.L289
 3013              	.LVL344:
 3014              	.L353:
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3015              		.loc 1 1564 4 is_stmt 1 view .LVU922
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3016              		.loc 1 1564 7 is_stmt 0 view .LVU923
 3017 00da 049B     		ldr	r3, [sp, #16]
 3018 00dc 13B1     		cbz	r3, .L290
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3019              		.loc 1 1564 14 is_stmt 1 discriminator 1 view .LVU924
 3020              	.LVL345:
1564:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 3021              		.loc 1 1564 21 is_stmt 0 discriminator 1 view .LVU925
 3022 00de 2D23     		movs	r3, #45
 3023 00e0 05F8013B 		strb	r3, [r5], #1
 3024              	.LVL346:
 3025              	.L290:
1565:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3026              		.loc 1 1565 4 is_stmt 1 view .LVU926
1565:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 3027              		.loc 1 1565 7 is_stmt 0 view .LVU927
 3028 00e4 0D2C     		cmp	r4, #13
 3029 00e6 00F3E980 		bgt	.L291
1572:src/display.c **** 	      *res++ = buf[i];
 3030              		.loc 1 1572 12 is_stmt 1 view .LVU928
 3031              	.LVL347:
1572:src/display.c **** 	      *res++ = buf[i];
 3032              		.loc 1 1572 12 is_stmt 0 view .LVU929
 3033 00ea 481C     		adds	r0, r1, #1
 3034 00ec 09D0     		beq	.L267
 3035 00ee 0131     		adds	r1, r1, #1
 3036 00f0 05AA     		add	r2, sp, #20
 3037 00f2 013D     		subs	r5, r5, #1
 3038 00f4 1144     		add	r1, r1, r2
 3039              	.LVL348:
 3040              	.L294:
1573:src/display.c **** 	  }
 3041              		.loc 1 1573 8 is_stmt 1 view .LVU930
1573:src/display.c **** 	  }
 3042              		.loc 1 1573 15 is_stmt 0 view .LVU931
 3043 00f6 11F8013D 		ldrb	r3, [r1, #-1]!	@ zero_extendqisi2
 3044              	.LVL349:
1573:src/display.c **** 	  }
 3045              		.loc 1 1573 15 view .LVU932
 3046 00fa 05F8013F 		strb	r3, [r5, #1]!
 3047              	.LVL350:
1572:src/display.c **** 	      *res++ = buf[i];
 3048              		.loc 1 1572 12 is_stmt 1 view .LVU933
1572:src/display.c **** 	      *res++ = buf[i];
 3049              		.loc 1 1572 12 is_stmt 0 view .LVU934
 3050 00fe 9142     		cmp	r1, r2
 3051 0100 F9D1     		bne	.L294
ARM GAS  /tmp/cc9o0abE.s 			page 132


 3052              	.LVL351:
 3053              	.L267:
1620:src/display.c **** 
 3054              		.loc 1 1620 7 view .LVU935
 3055 0102 17B0     		add	sp, sp, #92
 3056              		.cfi_remember_state
 3057              		.cfi_def_cfa_offset 36
 3058              		@ sp needed
 3059 0104 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3060              	.LVL352:
 3061              	.L312:
 3062              		.cfi_restore_state
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3063              		.loc 1 1532 25 discriminator 1 view .LVU936
 3064 0108 56EA0703 		orrs	r3, r6, r7
 3065 010c 00F0C480 		beq	.L275
1535:src/display.c **** 	    v = (unsigned long long int)vs;
 3066              		.loc 1 1535 11 is_stmt 1 view .LVU937
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3067              		.loc 1 1536 6 view .LVU938
 3068 0110 DFF848B2 		ldr	fp, .L359+20
 3069              	.LVL353:
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3070              		.loc 1 1536 6 is_stmt 0 view .LVU939
 3071 0114 CDF800A0 		str	r10, [sp]
 3072 0118 0023     		movs	r3, #0
1536:src/display.c **** 	    for (i=0; v != 0; i++) {
 3073              		.loc 1 1536 8 view .LVU940
 3074 011a B046     		mov	r8, r6
 3075 011c D946     		mov	r9, fp
 3076 011e 3E46     		mov	r6, r7
1537:src/display.c **** 	      const int r = v % b;
 3077              		.loc 1 1537 6 is_stmt 1 view .LVU941
 3078              	.LVL354:
1537:src/display.c **** 	      const int r = v % b;
 3079              		.loc 1 1537 16 view .LVU942
 3080 0120 9B46     		mov	fp, r3
 3081 0122 05AF     		add	r7, sp, #20
 3082              	.LVL355:
 3083              	.L286:
 3084              	.LBB272:
1538:src/display.c **** 	      v /= b;
 3085              		.loc 1 1538 8 discriminator 3 view .LVU943
 3086 0124 4046     		mov	r0, r8
 3087 0126 3146     		mov	r1, r6
 3088 0128 5246     		mov	r2, r10
 3089 012a 5B46     		mov	r3, fp
 3090 012c FFF7FEFF 		bl	__aeabi_uldivmod
 3091              	.LVL356:
 3092 0130 3346     		mov	r3, r6
 3093 0132 9446     		mov	ip, r2
 3094              	.LVL357:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3095              		.loc 1 1539 8 discriminator 3 view .LVU944
 3096              	.LBE272:
1537:src/display.c **** 	      const int r = v % b;
 3097              		.loc 1 1537 6 is_stmt 0 discriminator 3 view .LVU945
ARM GAS  /tmp/cc9o0abE.s 			page 133


 3098 0134 5B45     		cmp	r3, fp
 3099 0136 4246     		mov	r2, r8
 3100              	.LVL358:
 3101              	.LBB273:
1540:src/display.c **** 	    }
 3102              		.loc 1 1540 15 discriminator 3 view .LVU946
 3103 0138 19F80CC0 		ldrb	ip, [r9, ip]	@ zero_extendqisi2
 3104              	.LVL359:
1540:src/display.c **** 	    }
 3105              		.loc 1 1540 15 discriminator 3 view .LVU947
 3106 013c 07F801CB 		strb	ip, [r7], #1
 3107              	.LBE273:
1537:src/display.c **** 	      const int r = v % b;
 3108              		.loc 1 1537 6 discriminator 3 view .LVU948
 3109 0140 08BF     		it	eq
 3110 0142 5245     		cmpeq	r2, r10
 3111              	.LBB274:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3112              		.loc 1 1539 10 discriminator 3 view .LVU949
 3113 0144 0E46     		mov	r6, r1
 3114              	.LVL360:
1540:src/display.c **** 	    }
 3115              		.loc 1 1540 8 is_stmt 1 discriminator 3 view .LVU950
 3116              	.LBE274:
1537:src/display.c **** 	      const int r = v % b;
 3117              		.loc 1 1537 24 discriminator 3 view .LVU951
 3118              	.LBB275:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3119              		.loc 1 1539 10 is_stmt 0 discriminator 3 view .LVU952
 3120 0146 8046     		mov	r8, r0
 3121 0148 2146     		mov	r1, r4
 3122              	.LVL361:
1539:src/display.c **** 	      buf[i] = DIGITS[r];
 3123              		.loc 1 1539 10 discriminator 3 view .LVU953
 3124              	.LBE275:
1537:src/display.c **** 	      const int r = v % b;
 3125              		.loc 1 1537 25 discriminator 3 view .LVU954
 3126 014a 04F10104 		add	r4, r4, #1
 3127              	.LVL362:
1537:src/display.c **** 	      const int r = v % b;
 3128              		.loc 1 1537 16 is_stmt 1 discriminator 3 view .LVU955
1537:src/display.c **** 	      const int r = v % b;
 3129              		.loc 1 1537 6 is_stmt 0 discriminator 3 view .LVU956
 3130 014e E9D2     		bcs	.L286
 3131 0150 DDF800A0 		ldr	r10, [sp]
 3132              	.LVL363:
1562:src/display.c **** 	if (res) {
 3133              		.loc 1 1562 2 is_stmt 1 view .LVU957
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3134              		.loc 1 1563 2 view .LVU958
1563:src/display.c **** 	  if (sign) *res++ = '-';
 3135              		.loc 1 1563 5 is_stmt 0 view .LVU959
 3136 0154 002D     		cmp	r5, #0
 3137 0156 C0D1     		bne	.L353
 3138              	.LVL364:
 3139              	.L289:
 3140              	.LBB276:
ARM GAS  /tmp/cc9o0abE.s 			page 134


1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3141              		.loc 1 1591 4 is_stmt 1 view .LVU960
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3142              		.loc 1 1591 33 is_stmt 0 view .LVU961
 3143 0158 BAF1020F 		cmp	r10, #2
 3144 015c 00F0F080 		beq	.L354
 3145              	.LVL365:
1592:src/display.c **** 	    : b == 16 ? 2 : 3;
 3146              		.loc 1 1592 4 is_stmt 1 view .LVU962
1592:src/display.c **** 	    : b == 16 ? 2 : 3;
 3147              		.loc 1 1592 30 is_stmt 0 view .LVU963
 3148 0160 BAF1040F 		cmp	r10, #4
 3149 0164 00F01F81 		beq	.L355
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3150              		.loc 1 1591 33 view .LVU964
 3151 0168 BAF1100F 		cmp	r10, #16
 3152 016c 0CBF     		ite	eq
 3153 016e 4FF0020A 		moveq	r10, #2
 3154 0172 4FF0030A 		movne	r10, #3
 3155 0176 0C26     		movs	r6, #12
 3156              	.LVL366:
 3157              	.L296:
1594:src/display.c **** #endif
 3158              		.loc 1 1594 4 is_stmt 1 view .LVU965
 3159 0178 0091     		str	r1, [sp]
 3160 017a FFF7FEFF 		bl	set_separator_decimal_modes
 3161              	.LVL367:
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3162              		.loc 1 1596 4 view .LVU966
1597:src/display.c **** 	    State2.window = 0;
 3163              		.loc 1 1597 26 is_stmt 0 view .LVU967
 3164 017e 724B     		ldr	r3, .L359
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3165              		.loc 1 1596 17 view .LVU968
 3166 0180 744A     		ldr	r2, .L359+12
1597:src/display.c **** 	    State2.window = 0;
 3167              		.loc 1 1597 26 view .LVU969
 3168 0182 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3169              		.loc 1 1596 27 view .LVU970
 3170 0184 0099     		ldr	r1, [sp]
 3171 0186 91FBF6F1 		sdiv	r1, r1, r6
1597:src/display.c **** 	    State2.window = 0;
 3172              		.loc 1 1597 8 view .LVU971
 3173 018a C3F3C207 		ubfx	r7, r3, #3, #3
1597:src/display.c **** 	    State2.window = 0;
 3174              		.loc 1 1597 7 view .LVU972
 3175 018e B942     		cmp	r1, r7
1596:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 3176              		.loc 1 1596 17 view .LVU973
 3177 0190 1160     		str	r1, [r2]
1597:src/display.c **** 	    State2.window = 0;
 3178              		.loc 1 1597 4 is_stmt 1 view .LVU974
1597:src/display.c **** 	    State2.window = 0;
 3179              		.loc 1 1597 7 is_stmt 0 view .LVU975
 3180 0192 C0F2F680 		blt	.L298
 3181 0196 06FB07F7 		mul	r7, r6, r7
ARM GAS  /tmp/cc9o0abE.s 			page 135


 3182              	.L299:
1599:src/display.c **** 
 3183              		.loc 1 1599 4 is_stmt 1 view .LVU976
1599:src/display.c **** 
 3184              		.loc 1 1599 11 is_stmt 0 view .LVU977
 3185 019a 16AB     		add	r3, sp, #88
 3186 019c 16AA     		add	r2, sp, #88
 3187 019e 1C44     		add	r4, r4, r3
 3188              	.LVL368:
1599:src/display.c **** 
 3189              		.loc 1 1599 11 view .LVU978
 3190 01a0 D519     		adds	r5, r2, r7
 3191 01a2 0023     		movs	r3, #0
 3192 01a4 453D     		subs	r5, r5, #69
 3193 01a6 04F8443C 		strb	r3, [r4, #-68]
1601:src/display.c **** 	  for (k = 0; k < 12; k++)
 3194              		.loc 1 1601 4 is_stmt 1 view .LVU979
 3195              	.LVL369:
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3196              		.loc 1 1602 4 view .LVU980
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3197              		.loc 1 1602 16 view .LVU981
1599:src/display.c **** 
 3198              		.loc 1 1599 11 is_stmt 0 view .LVU982
 3199 01aa 2A46     		mov	r2, r5
 3200              	.LVL370:
 3201              	.L301:
1603:src/display.c **** 	      break;
 3202              		.loc 1 1603 6 is_stmt 1 view .LVU983
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3203              		.loc 1 1602 24 view .LVU984
1603:src/display.c **** 	      break;
 3204              		.loc 1 1603 9 is_stmt 0 view .LVU985
 3205 01ac 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 3206 01b0 0029     		cmp	r1, #0
 3207 01b2 00F0EC80 		beq	.L300
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3208              		.loc 1 1602 25 discriminator 2 view .LVU986
 3209 01b6 0133     		adds	r3, r3, #1
 3210              	.LVL371:
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3211              		.loc 1 1602 16 is_stmt 1 discriminator 2 view .LVU987
1602:src/display.c **** 	    if (buf[j + k] == '\0')
 3212              		.loc 1 1602 4 is_stmt 0 discriminator 2 view .LVU988
 3213 01b8 0C2B     		cmp	r3, #12
 3214 01ba F7D1     		bne	.L301
1605:src/display.c **** 	    int ch = buf[j++];
 3215              		.loc 1 1605 4 view .LVU989
 3216 01bc 4FF00B08 		mov	r8, #11
 3217              	.LVL372:
 3218              	.L302:
1605:src/display.c **** 	    int ch = buf[j++];
 3219              		.loc 1 1605 4 view .LVU990
 3220 01c0 0137     		adds	r7, r7, #1
 3221 01c2 4744     		add	r7, r7, r8
 3222 01c4 4446     		mov	r4, r8
 3223 01c6 4FF0630B 		mov	fp, #99
ARM GAS  /tmp/cc9o0abE.s 			page 136


 3224 01ca 09E0     		b	.L307
 3225              	.LVL373:
 3226              	.L356:
 3227              	.LBB277:
1611:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3228              		.loc 1 1611 8 view .LVU991
 3229 01cc 624B     		ldr	r3, .L359+16
 3230 01ce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3231              	.LVL374:
 3232              	.LBB278:
 3233              	.LBI278:
 375:src/display.c ****   if (sep == SEP_NONE)
 3234              		.loc 1 375 14 is_stmt 1 view .LVU992
 3235              	.LBB279:
 376:src/display.c ****     return res;
 3236              		.loc 1 376 3 view .LVU993
 376:src/display.c ****     return res;
 3237              		.loc 1 376 6 is_stmt 0 view .LVU994
 3238 01d0 09B1     		cbz	r1, .L305
 376:src/display.c ****     return res;
 3239              		.loc 1 376 6 view .LVU995
 3240 01d2 FFF7FEFF 		bl	set_separator.part.0
 3241              	.LVL375:
 3242              	.L305:
 376:src/display.c ****     return res;
 3243              		.loc 1 376 6 view .LVU996
 3244              	.LBE279:
 3245              	.LBE278:
1612:src/display.c **** 	  }
 3246              		.loc 1 1612 6 is_stmt 1 discriminator 2 view .LVU997
 3247              	.LBE277:
1605:src/display.c **** 	    int ch = buf[j++];
 3248              		.loc 1 1605 4 is_stmt 0 discriminator 2 view .LVU998
 3249 01d6 013C     		subs	r4, r4, #1
1605:src/display.c **** 	    int ch = buf[j++];
 3250              		.loc 1 1605 4 discriminator 2 view .LVU999
 3251 01d8 621C     		adds	r2, r4, #1
 3252              	.LBB282:
1612:src/display.c **** 	  }
 3253              		.loc 1 1612 10 discriminator 2 view .LVU1000
 3254 01da ABF1090B 		sub	fp, fp, #9
 3255              	.LVL376:
1612:src/display.c **** 	  }
 3256              		.loc 1 1612 10 discriminator 2 view .LVU1001
 3257              	.LBE282:
1605:src/display.c **** 	    int ch = buf[j++];
 3258              		.loc 1 1605 24 is_stmt 1 discriminator 2 view .LVU1002
1605:src/display.c **** 	    int ch = buf[j++];
 3259              		.loc 1 1605 14 discriminator 2 view .LVU1003
1605:src/display.c **** 	    int ch = buf[j++];
 3260              		.loc 1 1605 4 is_stmt 0 discriminator 2 view .LVU1004
 3261 01de 16D0     		beq	.L311
 3262              	.LVL377:
 3263              	.L307:
 3264              	.LBB283:
1606:src/display.c **** 	    if (i >= shift)
 3265              		.loc 1 1606 6 is_stmt 1 view .LVU1005
ARM GAS  /tmp/cc9o0abE.s 			page 137


1608:src/display.c **** 	    set_dig(dig, ch);
 3266              		.loc 1 1608 8 view .LVU1006
1606:src/display.c **** 	    if (i >= shift)
 3267              		.loc 1 1606 10 is_stmt 0 view .LVU1007
 3268 01e0 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
1607:src/display.c **** 	      ch -= 030;
 3269              		.loc 1 1607 9 view .LVU1008
 3270 01e4 A8EB0402 		sub	r2, r8, r4
 3271 01e8 B242     		cmp	r2, r6
 3272 01ea A7EB0409 		sub	r9, r7, r4
 3273              	.LVL378:
1607:src/display.c **** 	      ch -= 030;
 3274              		.loc 1 1607 6 is_stmt 1 view .LVU1009
1609:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3275              		.loc 1 1609 6 is_stmt 0 view .LVU1010
 3276 01ee 5846     		mov	r0, fp
1608:src/display.c **** 	    set_dig(dig, ch);
 3277              		.loc 1 1608 11 view .LVU1011
 3278 01f0 A8BF     		it	ge
 3279 01f2 1839     		subge	r1, r1, #24
 3280              	.LVL379:
1609:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 3281              		.loc 1 1609 6 is_stmt 1 view .LVU1012
 3282 01f4 FFF7FEFF 		bl	set_dig
 3283              	.LVL380:
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3284              		.loc 1 1610 6 view .LVU1013
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3285              		.loc 1 1610 13 is_stmt 0 view .LVU1014
 3286 01f8 99FBFAF3 		sdiv	r3, r9, r10
 3287 01fc 0AFB1393 		mls	r3, r10, r3, r9
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3288              		.loc 1 1610 9 view .LVU1015
 3289 0200 002B     		cmp	r3, #0
 3290 0202 E8D1     		bne	.L305
1611:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 3291              		.loc 1 1611 8 is_stmt 1 discriminator 1 view .LVU1016
 3292              	.LBB281:
 3293              	.LBB280:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 3294              		.loc 1 378 3 discriminator 1 view .LVU1017
 3295 0204 5846     		mov	r0, fp
 3296              	.LBE280:
 3297              	.LBE281:
1610:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 3298              		.loc 1 1610 27 is_stmt 0 discriminator 1 view .LVU1018
 3299 0206 002C     		cmp	r4, #0
 3300 0208 E0D1     		bne	.L356
1612:src/display.c **** 	  }
 3301              		.loc 1 1612 6 is_stmt 1 view .LVU1019
1612:src/display.c **** 	  }
 3302              		.loc 1 1612 10 is_stmt 0 view .LVU1020
 3303 020a ABF1090B 		sub	fp, fp, #9
 3304              	.LVL381:
1612:src/display.c **** 	  }
 3305              		.loc 1 1612 10 view .LVU1021
 3306              	.LBE283:
ARM GAS  /tmp/cc9o0abE.s 			page 138


1605:src/display.c **** 	    int ch = buf[j++];
 3307              		.loc 1 1605 24 is_stmt 1 view .LVU1022
1605:src/display.c **** 	    int ch = buf[j++];
 3308              		.loc 1 1605 14 view .LVU1023
 3309              	.L311:
1614:src/display.c **** 	    if (dig >= 0)
 3310              		.loc 1 1614 4 view .LVU1024
1614:src/display.c **** 	    if (dig >= 0)
 3311              		.loc 1 1614 7 is_stmt 0 view .LVU1025
 3312 020e 049B     		ldr	r3, [sp, #16]
 3313 0210 002B     		cmp	r3, #0
 3314 0212 3FF476AF 		beq	.L267
1615:src/display.c **** 	      set_dig(dig, '-');
 3315              		.loc 1 1615 6 is_stmt 1 view .LVU1026
1615:src/display.c **** 	      set_dig(dig, '-');
 3316              		.loc 1 1615 9 is_stmt 0 view .LVU1027
 3317 0216 BBF1000F 		cmp	fp, #0
 3318 021a C0F2C680 		blt	.L357
 3319              	.LVL382:
 3320              	.L310:
1616:src/display.c **** 	    else	SET_MANT_SIGN;
 3321              		.loc 1 1616 8 is_stmt 1 view .LVU1028
 3322 021e 5846     		mov	r0, fp
 3323 0220 2D21     		movs	r1, #45
 3324 0222 FFF7FEFF 		bl	set_dig
 3325              	.LVL383:
 3326 0226 6CE7     		b	.L267
 3327              	.LVL384:
 3328              	.L351:
1616:src/display.c **** 	    else	SET_MANT_SIGN;
 3329              		.loc 1 1616 8 is_stmt 0 view .LVU1029
 3330              	.LBE276:
1509:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3331              		.loc 1 1509 4 is_stmt 1 view .LVU1030
1509:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 3332              		.loc 1 1509 8 is_stmt 0 view .LVU1031
 3333 0228 04AA     		add	r2, sp, #16
 3334 022a 3046     		mov	r0, r6
 3335 022c 3946     		mov	r1, r7
 3336 022e FFF7FEFF 		bl	extract_value
 3337              	.LVL385:
 3338 0232 8046     		mov	r8, r0
 3339 0234 8946     		mov	r9, r1
 3340              	.LVL386:
1510:src/display.c **** 	    v = value;
 3341              		.loc 1 1510 4 is_stmt 1 view .LVU1032
1510:src/display.c **** 	    v = value;
 3342              		.loc 1 1510 8 is_stmt 0 view .LVU1033
 3343 0236 FFF7FEFF 		bl	int_mode
 3344              	.LVL387:
1510:src/display.c **** 	    v = value;
 3345              		.loc 1 1510 7 view .LVU1034
 3346 023a 38BB     		cbnz	r0, .L272
1510:src/display.c **** 	    v = value;
 3347              		.loc 1 1510 33 discriminator 1 view .LVU1035
 3348 023c 049B     		ldr	r3, [sp, #16]
 3349 023e 012B     		cmp	r3, #1
ARM GAS  /tmp/cc9o0abE.s 			page 139


 3350 0240 24D1     		bne	.L272
1510:src/display.c **** 	    v = value;
 3351              		.loc 1 1510 46 discriminator 2 view .LVU1036
 3352 0242 58EA0903 		orrs	r3, r8, r9
 3353 0246 00F08B80 		beq	.L358
 3354              	.LVL388:
 3355              	.L273:
1510:src/display.c **** 	    v = value;
 3356              		.loc 1 1510 46 discriminator 2 view .LVU1037
 3357 024a DFF810B1 		ldr	fp, .L359+20
 3358              	.LVL389:
1485:src/display.c **** 	const int ws = word_size();
 3359              		.loc 1 1485 67 discriminator 3 view .LVU1038
 3360 024e 0395     		str	r5, [sp, #12]
 3361 0250 05AB     		add	r3, sp, #20
 3362 0252 5D46     		mov	r5, fp
 3363              	.LVL390:
1485:src/display.c **** 	const int ws = word_size();
 3364              		.loc 1 1485 67 discriminator 3 view .LVU1039
 3365 0254 5646     		mov	r6, r10
 3366 0256 0027     		movs	r7, #0
 3367 0258 0024     		movs	r4, #0
 3368 025a 9B46     		mov	fp, r3
 3369              	.LVL391:
 3370              	.L279:
 3371              	.LBB284:
1519:src/display.c **** 	      v /= b;
 3372              		.loc 1 1519 8 is_stmt 1 discriminator 3 view .LVU1040
 3373 025c 4046     		mov	r0, r8
 3374 025e 4946     		mov	r1, r9
 3375 0260 3246     		mov	r2, r6
 3376 0262 3B46     		mov	r3, r7
 3377 0264 FFF7FEFF 		bl	__aeabi_uldivmod
 3378              	.LVL392:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3379              		.loc 1 1520 8 discriminator 3 view .LVU1041
 3380 0268 CDE90089 		strd	r8, [sp]
1521:src/display.c **** 	    }
 3381              		.loc 1 1521 15 is_stmt 0 discriminator 3 view .LVU1042
 3382 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3383 026e 0BF8013B 		strb	r3, [fp], #1
 3384              	.LBE284:
1518:src/display.c **** 	      const int r = v % b;
 3385              		.loc 1 1518 6 discriminator 3 view .LVU1043
 3386 0272 DDE90023 		ldrd	r2, [sp]
 3387              	.LVL393:
1518:src/display.c **** 	      const int r = v % b;
 3388              		.loc 1 1518 6 discriminator 3 view .LVU1044
 3389 0276 BB42     		cmp	r3, r7
 3390 0278 08BF     		it	eq
 3391 027a B242     		cmpeq	r2, r6
 3392              	.LBB285:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3393              		.loc 1 1520 10 discriminator 3 view .LVU1045
 3394 027c 8946     		mov	r9, r1
 3395              	.LVL394:
1521:src/display.c **** 	    }
ARM GAS  /tmp/cc9o0abE.s 			page 140


 3396              		.loc 1 1521 8 is_stmt 1 discriminator 3 view .LVU1046
 3397              	.LBE285:
1518:src/display.c **** 	      const int r = v % b;
 3398              		.loc 1 1518 24 discriminator 3 view .LVU1047
 3399              	.LBB286:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3400              		.loc 1 1520 10 is_stmt 0 discriminator 3 view .LVU1048
 3401 027e 8046     		mov	r8, r0
 3402 0280 2146     		mov	r1, r4
 3403              	.LVL395:
1520:src/display.c **** 	      buf[i] = DIGITS[r];
 3404              		.loc 1 1520 10 discriminator 3 view .LVU1049
 3405              	.LBE286:
1518:src/display.c **** 	      const int r = v % b;
 3406              		.loc 1 1518 25 discriminator 3 view .LVU1050
 3407 0282 04F10104 		add	r4, r4, #1
 3408              	.LVL396:
1518:src/display.c **** 	      const int r = v % b;
 3409              		.loc 1 1518 16 is_stmt 1 discriminator 3 view .LVU1051
1518:src/display.c **** 	      const int r = v % b;
 3410              		.loc 1 1518 6 is_stmt 0 discriminator 3 view .LVU1052
 3411 0286 E9D2     		bcs	.L279
 3412 0288 039D     		ldr	r5, [sp, #12]
 3413 028a 24E7     		b	.L280
 3414              	.LVL397:
 3415              	.L272:
1512:src/display.c **** 	    if (sign)
 3416              		.loc 1 1512 4 is_stmt 1 view .LVU1053
1512:src/display.c **** 	    if (sign)
 3417              		.loc 1 1512 7 is_stmt 0 view .LVU1054
 3418 028c 58EA0903 		orrs	r3, r8, r9
 3419 0290 DBD1     		bne	.L273
1513:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3420              		.loc 1 1513 6 is_stmt 1 view .LVU1055
1513:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3421              		.loc 1 1513 9 is_stmt 0 view .LVU1056
 3422 0292 049B     		ldr	r3, [sp, #16]
 3423 0294 002B     		cmp	r3, #0
 3424 0296 69D1     		bne	.L274
 3425              	.LVL398:
 3426              	.L275:
1515:src/display.c **** 	    return;
 3427              		.loc 1 1515 6 is_stmt 1 view .LVU1057
 3428              	.LBB287:
 3429              	.LBI287:
 415:src/display.c ****   if (res) *res++ = ch;
 3430              		.loc 1 415 14 view .LVU1058
 3431              	.LBB288:
 416:src/display.c ****   else	set_dig(base, ch);
 3432              		.loc 1 416 3 view .LVU1059
 416:src/display.c ****   else	set_dig(base, ch);
 3433              		.loc 1 416 6 is_stmt 0 view .LVU1060
 3434 0298 002D     		cmp	r5, #0
 3435 029a 6DD0     		beq	.L277
 3436              	.LVL399:
 3437              	.L276:
 416:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/cc9o0abE.s 			page 141


 3438              		.loc 1 416 12 is_stmt 1 view .LVU1061
 416:src/display.c ****   else	set_dig(base, ch);
 3439              		.loc 1 416 19 is_stmt 0 view .LVU1062
 3440 029c 3023     		movs	r3, #48
 3441 029e 2B70     		strb	r3, [r5]
 3442              	.LBE288:
 3443              	.LBE287:
1620:src/display.c **** 
 3444              		.loc 1 1620 7 view .LVU1063
 3445 02a0 17B0     		add	sp, sp, #92
 3446              		.cfi_remember_state
 3447              		.cfi_def_cfa_offset 36
 3448              		@ sp needed
 3449 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3450              	.LVL400:
 3451              	.L268:
 3452              		.cfi_restore_state
1500:src/display.c **** 	}
 3453              		.loc 1 1500 11 is_stmt 1 view .LVU1064
1500:src/display.c **** 	}
 3454              		.loc 1 1500 15 is_stmt 0 view .LVU1065
 3455 02a6 FFF7FEFF 		bl	int_base
 3456              	.LVL401:
1500:src/display.c **** 	}
 3457              		.loc 1 1500 15 view .LVU1066
 3458 02aa 8246     		mov	r10, r0
 3459              	.LVL402:
1500:src/display.c **** 	}
 3460              		.loc 1 1500 27 is_stmt 1 view .LVU1067
1503:src/display.c **** 	  IntMaxWindow = 0;
 3461              		.loc 1 1503 2 view .LVU1068
1503:src/display.c **** 	  IntMaxWindow = 0;
 3462              		.loc 1 1503 5 is_stmt 0 view .LVU1069
 3463 02ac 002D     		cmp	r5, #0
 3464 02ae 7FF4BFAE 		bne	.L270
 3465              	.LVL403:
 3466              	.L350:
1504:src/display.c **** 	  carry_overflow();
 3467              		.loc 1 1504 4 is_stmt 1 view .LVU1070
1504:src/display.c **** 	  carry_overflow();
 3468              		.loc 1 1504 17 is_stmt 0 view .LVU1071
 3469 02b2 284B     		ldr	r3, .L359+12
 3470 02b4 1D60     		str	r5, [r3]
1505:src/display.c **** 	}
 3471              		.loc 1 1505 4 is_stmt 1 view .LVU1072
 3472 02b6 FFF7FEFF 		bl	carry_overflow
 3473              	.LVL404:
 3474 02ba B9E6     		b	.L270
 3475              	.LVL405:
 3476              	.L291:
1566:src/display.c **** 	      *res++ = buf[i];
 3477              		.loc 1 1566 12 view .LVU1073
1566:src/display.c **** 	      *res++ = buf[i];
 3478              		.loc 1 1566 12 is_stmt 0 view .LVU1074
 3479 02bc 05AB     		add	r3, sp, #20
 3480 02be 5818     		adds	r0, r3, r1
1566:src/display.c **** 	      *res++ = buf[i];
ARM GAS  /tmp/cc9o0abE.s 			page 142


 3481              		.loc 1 1566 24 view .LVU1075
 3482 02c0 A4F10D06 		sub	r6, r4, #13
 3483 02c4 6A1E     		subs	r2, r5, #1
 3484              	.LVL406:
 3485              	.L293:
1567:src/display.c **** 	    *res++ = '.';
 3486              		.loc 1 1567 8 is_stmt 1 view .LVU1076
1567:src/display.c **** 	    *res++ = '.';
 3487              		.loc 1 1567 20 is_stmt 0 view .LVU1077
 3488 02c6 10F80139 		ldrb	r3, [r0], #-1	@ zero_extendqisi2
 3489              	.LVL407:
1567:src/display.c **** 	    *res++ = '.';
 3490              		.loc 1 1567 15 view .LVU1078
 3491 02ca 02F8013F 		strb	r3, [r2, #1]!
 3492              	.LVL408:
1566:src/display.c **** 	      *res++ = buf[i];
 3493              		.loc 1 1566 12 is_stmt 1 view .LVU1079
1566:src/display.c **** 	      *res++ = buf[i];
 3494              		.loc 1 1566 12 is_stmt 0 view .LVU1080
 3495 02ce D343     		mvns	r3, r2
 3496 02d0 0B44     		add	r3, r3, r1
 3497 02d2 2B44     		add	r3, r3, r5
 3498 02d4 9E42     		cmp	r6, r3
 3499 02d6 F6DD     		ble	.L293
 3500 02d8 01F10E03 		add	r3, r1, #14
 3501 02dc 1C1B     		subs	r4, r3, r4
 3502              	.LVL409:
1566:src/display.c **** 	      *res++ = buf[i];
 3503              		.loc 1 1566 12 view .LVU1081
 3504 02de 8E42     		cmp	r6, r1
 3505 02e0 C8BF     		it	gt
 3506 02e2 0124     		movgt	r4, #1
 3507 02e4 2A19     		adds	r2, r5, r4
 3508              	.LVL410:
1568:src/display.c **** 	    *res++ = '.';
 3509              		.loc 1 1568 6 is_stmt 1 view .LVU1082
1568:src/display.c **** 	    *res++ = '.';
 3510              		.loc 1 1568 13 is_stmt 0 view .LVU1083
 3511 02e6 2E23     		movs	r3, #46
 3512 02e8 2B55     		strb	r3, [r5, r4]
1569:src/display.c **** 	  }
 3513              		.loc 1 1569 6 is_stmt 1 view .LVU1084
 3514              	.LVL411:
1569:src/display.c **** 	  }
 3515              		.loc 1 1569 13 is_stmt 0 view .LVU1085
 3516 02ea 5370     		strb	r3, [r2, #1]
1620:src/display.c **** 
 3517              		.loc 1 1620 7 view .LVU1086
 3518 02ec 17B0     		add	sp, sp, #92
 3519              		.cfi_remember_state
 3520              		.cfi_def_cfa_offset 36
 3521              		@ sp needed
 3522 02ee BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3523              	.LVL412:
 3524              	.L352:
 3525              		.cfi_restore_state
 3526              	.LBB290:
ARM GAS  /tmp/cc9o0abE.s 			page 143


1528:src/display.c **** 	      vs |= ~mask;
 3527              		.loc 1 1528 38 discriminator 1 view .LVU1087
 3528 02f2 0BF1FF31 		add	r1, fp, #-1
1528:src/display.c **** 	      vs |= ~mask;
 3529              		.loc 1 1528 18 discriminator 1 view .LVU1088
 3530 02f6 CBF1210C 		rsb	ip, fp, #33
 3531 02fa C840     		lsrs	r0, r0, r1
 3532 02fc 07FA0CFC 		lsl	ip, r7, ip
 3533 0300 2039     		subs	r1, r1, #32
 3534 0302 40EA0C00 		orr	r0, r0, ip
 3535 0306 5CBF     		itt	pl
 3536 0308 47FA01F1 		asrpl	r1, r7, r1
 3537 030c 0843     		orrpl	r0, r0, r1
 3538 030e 00F00108 		and	r8, r0, #1
 3539 0312 4FF00009 		mov	r9, #0
 3540 0316 58EA0901 		orrs	r1, r8, r9
 3541 031a 08D0     		beq	.L282
1529:src/display.c **** 	  }
 3542              		.loc 1 1529 8 is_stmt 1 view .LVU1089
1529:src/display.c **** 	  }
 3543              		.loc 1 1529 11 is_stmt 0 view .LVU1090
 3544 031c 5042     		rsbs	r0, r2, #0
 3545 031e 63EB4301 		sbc	r1, r3, r3, lsl #1
 3546 0322 40EA0602 		orr	r2, r0, r6
 3547              	.LVL413:
1529:src/display.c **** 	  }
 3548              		.loc 1 1529 11 view .LVU1091
 3549 0326 41EA0703 		orr	r3, r1, r7
 3550              	.LVL414:
1529:src/display.c **** 	  }
 3551              		.loc 1 1529 11 view .LVU1092
 3552 032a 1646     		mov	r6, r2
 3553              	.LVL415:
1529:src/display.c **** 	  }
 3554              		.loc 1 1529 11 view .LVU1093
 3555 032c 1F46     		mov	r7, r3
 3556              	.L282:
1529:src/display.c **** 	  }
 3557              		.loc 1 1529 11 view .LVU1094
 3558              	.LBE290:
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3559              		.loc 1 1532 4 is_stmt 1 view .LVU1095
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3560              		.loc 1 1532 8 is_stmt 0 view .LVU1096
 3561 032e 084B     		ldr	r3, .L359+8
 3562 0330 1B68     		ldr	r3, [r3]
 3563 0332 93F8E83F 		ldrb	r3, [r3, #4072]	@ zero_extendqisi2
1532:src/display.c **** 	    set_dig_s(dig, '0', res);
 3564              		.loc 1 1532 7 view .LVU1097
 3565 0336 9B07     		lsls	r3, r3, #30
 3566 0338 7FF5E6AE 		bpl	.L312
 3567 033c 0223     		movs	r3, #2
 3568 033e ADE6     		b	.L287
 3569              	.LVL416:
 3570              	.L354:
 3571              	.LBB291:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
ARM GAS  /tmp/cc9o0abE.s 			page 144


 3572              		.loc 1 1591 33 view .LVU1098
 3573 0340 0826     		movs	r6, #8
1593:src/display.c **** 	  set_separator_decimal_modes();
 3574              		.loc 1 1593 6 view .LVU1099
 3575 0342 4FF0040A 		mov	r10, #4
 3576 0346 17E7     		b	.L296
 3577              	.L360:
 3578              		.align	2
 3579              	.L359:
 3580 0348 00000000 		.word	StateWhileOn
 3581 034c 00000000 		.word	CSWTCH.352
 3582 0350 00000000 		.word	main_ram
 3583 0354 00000000 		.word	IntMaxWindow
 3584 0358 00000000 		.word	.LANCHOR0
 3585 035c 00000000 		.word	.LANCHOR9
 3586              	.LVL417:
 3587              	.L358:
1593:src/display.c **** 	  set_separator_decimal_modes();
 3588              		.loc 1 1593 6 view .LVU1100
 3589              	.LBE291:
1511:src/display.c **** 	  if (v == 0) {
 3590              		.loc 1 1511 6 is_stmt 1 view .LVU1101
1511:src/display.c **** 	  if (v == 0) {
 3591              		.loc 1 1511 8 is_stmt 0 view .LVU1102
 3592 0360 B046     		mov	r8, r6
 3593              	.LVL418:
1511:src/display.c **** 	  if (v == 0) {
 3594              		.loc 1 1511 8 view .LVU1103
 3595 0362 B946     		mov	r9, r7
 3596              	.LVL419:
1512:src/display.c **** 	    if (sign)
 3597              		.loc 1 1512 4 is_stmt 1 view .LVU1104
1512:src/display.c **** 	    if (sign)
 3598              		.loc 1 1512 7 is_stmt 0 view .LVU1105
 3599 0364 58EA0903 		orrs	r3, r8, r9
 3600 0368 7FF46FAF 		bne	.L273
 3601              	.LVL420:
 3602              	.L274:
1514:src/display.c **** 	    set_dig_s(dig, '0', res);
 3603              		.loc 1 1514 8 is_stmt 1 view .LVU1106
 3604              	.LBB292:
 3605              	.LBI292:
 415:src/display.c ****   if (res) *res++ = ch;
 3606              		.loc 1 415 14 view .LVU1107
 3607              	.LBB293:
 416:src/display.c ****   else	set_dig(base, ch);
 3608              		.loc 1 416 3 view .LVU1108
 416:src/display.c ****   else	set_dig(base, ch);
 3609              		.loc 1 416 6 is_stmt 0 view .LVU1109
 3610 036c 002D     		cmp	r5, #0
 3611 036e 95D1     		bne	.L276
 417:src/display.c ****   return res;
 3612              		.loc 1 417 8 is_stmt 1 view .LVU1110
 3613 0370 2D21     		movs	r1, #45
 3614 0372 5A20     		movs	r0, #90
 3615 0374 FFF7FEFF 		bl	set_dig
 3616              	.LVL421:
ARM GAS  /tmp/cc9o0abE.s 			page 145


 417:src/display.c ****   return res;
 3617              		.loc 1 417 8 is_stmt 0 view .LVU1111
 3618              	.LBE293:
 3619              	.LBE292:
1515:src/display.c **** 	    return;
 3620              		.loc 1 1515 6 is_stmt 1 view .LVU1112
 3621              	.LBB294:
 415:src/display.c ****   if (res) *res++ = ch;
 3622              		.loc 1 415 14 view .LVU1113
 3623              	.LBB289:
 416:src/display.c ****   else	set_dig(base, ch);
 3624              		.loc 1 416 3 view .LVU1114
 3625              	.L277:
 417:src/display.c ****   return res;
 3626              		.loc 1 417 8 view .LVU1115
 3627 0378 3021     		movs	r1, #48
 3628 037a 6320     		movs	r0, #99
 3629 037c FFF7FEFF 		bl	set_dig
 3630              	.LVL422:
 3631 0380 BFE6     		b	.L267
 3632              	.LVL423:
 3633              	.L298:
 417:src/display.c ****   return res;
 3634              		.loc 1 417 8 is_stmt 0 view .LVU1116
 3635              	.LBE289:
 3636              	.LBE294:
 3637              	.LBB295:
1598:src/display.c **** 	  buf[i] = '\0';
 3638              		.loc 1 1598 6 is_stmt 1 view .LVU1117
1598:src/display.c **** 	  buf[i] = '\0';
 3639              		.loc 1 1598 20 is_stmt 0 view .LVU1118
 3640 0382 0D4A     		ldr	r2, .L361
 3641 0384 6FF3C503 		bfc	r3, #3, #3
 3642 0388 1375     		strb	r3, [r2, #20]
 3643 038a 0027     		movs	r7, #0
 3644 038c 05E7     		b	.L299
 3645              	.LVL424:
 3646              	.L300:
1605:src/display.c **** 	    int ch = buf[j++];
 3647              		.loc 1 1605 14 is_stmt 1 discriminator 1 view .LVU1119
1605:src/display.c **** 	    int ch = buf[j++];
 3648              		.loc 1 1605 4 is_stmt 0 discriminator 1 view .LVU1120
 3649 038e 03F1FF38 		add	r8, r3, #-1
 3650              	.LVL425:
1605:src/display.c **** 	    int ch = buf[j++];
 3651              		.loc 1 1605 4 discriminator 1 view .LVU1121
 3652 0392 002B     		cmp	r3, #0
 3653 0394 7FF414AF 		bne	.L302
1614:src/display.c **** 	    if (dig >= 0)
 3654              		.loc 1 1614 4 is_stmt 1 view .LVU1122
1614:src/display.c **** 	    if (dig >= 0)
 3655              		.loc 1 1614 7 is_stmt 0 view .LVU1123
 3656 0398 049B     		ldr	r3, [sp, #16]
 3657 039a 002B     		cmp	r3, #0
 3658 039c 3FF4B1AE 		beq	.L267
 3659 03a0 4FF0630B 		mov	fp, #99
 3660 03a4 3BE7     		b	.L310
ARM GAS  /tmp/cc9o0abE.s 			page 146


 3661              	.LVL426:
 3662              	.L355:
1591:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3663              		.loc 1 1591 33 view .LVU1124
 3664 03a6 0C26     		movs	r6, #12
 3665 03a8 E6E6     		b	.L296
 3666              	.LVL427:
 3667              	.L357:
1617:src/display.c **** 	  }
 3668              		.loc 1 1617 11 is_stmt 1 view .LVU1125
 3669 03aa 8120     		movs	r0, #129
 3670 03ac FFF7FEFF 		bl	set_dot
 3671              	.LVL428:
 3672 03b0 A7E6     		b	.L267
 3673              	.LVL429:
 3674              	.L313:
1617:src/display.c **** 	  }
 3675              		.loc 1 1617 11 is_stmt 0 view .LVU1126
 3676              	.LBE295:
 3677              	.LBB296:
1549:src/display.c **** 	      const int r = v % b;
 3678              		.loc 1 1549 6 view .LVU1127
 3679 03b2 4FF0FF31 		mov	r1, #-1
 3680 03b6 8EE6     		b	.L280
 3681              	.L362:
 3682              		.align	2
 3683              	.L361:
 3684 03b8 00000000 		.word	StateWhileOn
 3685              	.LBE296:
 3686              		.cfi_endproc
 3687              	.LFE14:
 3689              		.section	.text.getdig,"ax",%progbits
 3690              		.align	1
 3691              		.p2align 2,,3
 3692              		.global	getdig
 3693              		.syntax unified
 3694              		.thumb
 3695              		.thumb_func
 3696              		.fpu fpv4-sp-d16
 3698              	getdig:
 3699              	.LVL430:
 3700              	.LFB2:
 342:src/display.c ****   // perform index lookup
 3701              		.loc 1 342 1 is_stmt 1 view -0
 3702              		.cfi_startproc
 3703              		@ args = 0, pretend = 0, frame = 0
 3704              		@ frame_needed = 0, uses_anonymous_args = 0
 3705              		@ link register save eliminated.
 344:src/display.c **** }
 3706              		.loc 1 344 3 view .LVU1129
 344:src/display.c **** }
 3707              		.loc 1 344 16 is_stmt 0 view .LVU1130
 3708 0000 014B     		ldr	r3, .L364
 344:src/display.c **** }
 3709              		.loc 1 344 19 view .LVU1131
 3710 0002 C0B2     		uxtb	r0, r0
 3711              	.LVL431:
ARM GAS  /tmp/cc9o0abE.s 			page 147


 345:src/display.c **** 
 3712              		.loc 1 345 1 view .LVU1132
 3713 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 3714 0006 7047     		bx	lr
 3715              	.L365:
 3716              		.align	2
 3717              	.L364:
 3718 0008 00000000 		.word	.LANCHOR2
 3719              		.cfi_endproc
 3720              	.LFE2:
 3722              		.section	.text.dot,"ax",%progbits
 3723              		.align	1
 3724              		.p2align 2,,3
 3725              		.global	dot
 3726              		.syntax unified
 3727              		.thumb
 3728              		.thumb_func
 3729              		.fpu fpv4-sp-d16
 3731              	dot:
 3732              	.LVL432:
 3733              	.LFB3:
 347:src/display.c ****   if (on)	set_dot(n);
 3734              		.loc 1 347 25 is_stmt 1 view -0
 3735              		.cfi_startproc
 3736              		@ args = 0, pretend = 0, frame = 0
 3737              		@ frame_needed = 0, uses_anonymous_args = 0
 3738              		@ link register save eliminated.
 348:src/display.c ****   else	clr_dot(n);
 3739              		.loc 1 348 3 view .LVU1134
 348:src/display.c ****   else	clr_dot(n);
 3740              		.loc 1 348 6 is_stmt 0 view .LVU1135
 3741 0000 09B1     		cbz	r1, .L367
 348:src/display.c ****   else	clr_dot(n);
 3742              		.loc 1 348 11 is_stmt 1 discriminator 1 view .LVU1136
 3743 0002 FFF7FEBF 		b	set_dot
 3744              	.LVL433:
 3745              	.L367:
 349:src/display.c **** }
 3746              		.loc 1 349 8 view .LVU1137
 3747 0006 FFF7FEBF 		b	clr_dot
 3748              	.LVL434:
 349:src/display.c **** }
 3749              		.loc 1 349 8 is_stmt 0 view .LVU1138
 3750              		.cfi_endproc
 3751              	.LFE3:
 3753 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 3754              		.align	1
 3755              		.p2align 2,,3
 3756              		.global	std_round_fix
 3757              		.syntax unified
 3758              		.thumb
 3759              		.thumb_func
 3760              		.fpu fpv4-sp-d16
 3762              	std_round_fix:
 3763              	.LVL435:
 3764              	.LFB20:
1838:src/display.c **** 	decNumber c;
ARM GAS  /tmp/cc9o0abE.s 			page 148


 3765              		.loc 1 1838 93 is_stmt 1 view -0
 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 40
 3768              		@ frame_needed = 0, uses_anonymous_args = 0
1838:src/display.c **** 	decNumber c;
 3769              		.loc 1 1838 93 is_stmt 0 view .LVU1140
 3770 0000 70B5     		push	{r4, r5, r6, lr}
 3771              		.cfi_def_cfa_offset 16
 3772              		.cfi_offset 4, -16
 3773              		.cfi_offset 5, -12
 3774              		.cfi_offset 6, -8
 3775              		.cfi_offset 14, -4
 3776 0002 0E46     		mov	r6, r1
1839:src/display.c **** 	int true_exp, x=0;
 3777              		.loc 1 1839 2 is_stmt 1 view .LVU1141
1840:src/display.c **** 	int min_pos_exp, max_neg_exp;
 3778              		.loc 1 1840 2 view .LVU1142
 3779              	.LVL436:
1841:src/display.c **** 
 3780              		.loc 1 1841 2 view .LVU1143
1843:src/display.c **** 	  min_pos_exp = 9;
 3781              		.loc 1 1843 2 view .LVU1144
1838:src/display.c **** 	decNumber c;
 3782              		.loc 1 1838 93 is_stmt 0 view .LVU1145
 3783 0004 8AB0     		sub	sp, sp, #40
 3784              		.cfi_def_cfa_offset 56
1843:src/display.c **** 	  min_pos_exp = 9;
 3785              		.loc 1 1843 5 view .LVU1146
 3786 0006 92B9     		cbnz	r2, .L369
1848:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 3787              		.loc 1 1848 4 is_stmt 1 view .LVU1147
 3788              	.LVL437:
1849:src/display.c **** 	}
 3789              		.loc 1 1849 4 view .LVU1148
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3790              		.loc 1 1852 2 view .LVU1149
 3791 0008 0146     		mov	r1, r0
 3792              	.LVL438:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3793              		.loc 1 1852 2 is_stmt 0 view .LVU1150
 3794 000a 01A8     		add	r0, sp, #4
 3795              	.LVL439:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3796              		.loc 1 1852 2 view .LVU1151
 3797 000c 1D46     		mov	r5, r3
 3798 000e FFF7FEFF 		bl	dn_abs
 3799              	.LVL440:
1853:src/display.c **** 
 3800              		.loc 1 1853 2 is_stmt 1 view .LVU1152
1853:src/display.c **** 
 3801              		.loc 1 1853 24 is_stmt 0 view .LVU1153
 3802 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 3803 0016 1844     		add	r0, r0, r3
 3804              	.LVL441:
1855:src/display.c **** 	  x = *dd;
 3805              		.loc 1 1855 2 is_stmt 1 view .LVU1154
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
ARM GAS  /tmp/cc9o0abE.s 			page 149


 3806              		.loc 1 1859 2 view .LVU1155
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3807              		.loc 1 1859 5 is_stmt 0 view .LVU1156
 3808 0018 0138     		subs	r0, r0, #1
 3809 001a 1AD5     		bpl	.L373
1849:src/display.c **** 	}
 3810              		.loc 1 1849 16 view .LVU1157
 3811 001c EB43     		mvns	r3, r5
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3812              		.loc 1 1859 21 view .LVU1158
 3813 001e 8342     		cmp	r3, r0
 3814 0020 17DA     		bge	.L373
 3815              	.LVL442:
 3816              	.L375:
1861:src/display.c **** 	  return MODE_FIX;
 3817              		.loc 1 1861 4 is_stmt 1 view .LVU1159
1861:src/display.c **** 	  return MODE_FIX;
 3818              		.loc 1 1861 8 is_stmt 0 view .LVU1160
 3819 0022 3368     		ldr	r3, [r6]
 3820 0024 181A     		subs	r0, r3, r0
 3821 0026 3060     		str	r0, [r6]
1862:src/display.c **** 	}
 3822              		.loc 1 1862 4 is_stmt 1 view .LVU1161
1862:src/display.c **** 	}
 3823              		.loc 1 1862 11 is_stmt 0 view .LVU1162
 3824 0028 0120     		movs	r0, #1
1871:src/display.c **** #else
 3825              		.loc 1 1871 7 view .LVU1163
 3826 002a 0AB0     		add	sp, sp, #40
 3827              		.cfi_remember_state
 3828              		.cfi_def_cfa_offset 16
 3829              		@ sp needed
 3830 002c 70BD     		pop	{r4, r5, r6, pc}
 3831              	.LVL443:
 3832              	.L369:
 3833              		.cfi_restore_state
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3834              		.loc 1 1852 2 is_stmt 1 view .LVU1164
 3835 002e 0146     		mov	r1, r0
 3836              	.LVL444:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3837              		.loc 1 1852 2 is_stmt 0 view .LVU1165
 3838 0030 01A8     		add	r0, sp, #4
 3839              	.LVL445:
1852:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3840              		.loc 1 1852 2 view .LVU1166
 3841 0032 1446     		mov	r4, r2
 3842 0034 FFF7FEFF 		bl	dn_abs
 3843              	.LVL446:
1853:src/display.c **** 
 3844              		.loc 1 1853 2 is_stmt 1 view .LVU1167
1853:src/display.c **** 
 3845              		.loc 1 1853 24 is_stmt 0 view .LVU1168
 3846 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1855:src/display.c **** 	  x = *dd;
 3847              		.loc 1 1855 5 view .LVU1169
 3848 003c 052C     		cmp	r4, #5
ARM GAS  /tmp/cc9o0abE.s 			page 150


1853:src/display.c **** 
 3849              		.loc 1 1853 24 view .LVU1170
 3850 003e 1344     		add	r3, r3, r2
1853:src/display.c **** 
 3851              		.loc 1 1853 11 view .LVU1171
 3852 0040 03F1FF30 		add	r0, r3, #-1
 3853              	.LVL447:
1855:src/display.c **** 	  x = *dd;
 3854              		.loc 1 1855 2 is_stmt 1 view .LVU1172
1855:src/display.c **** 	  x = *dd;
 3855              		.loc 1 1855 5 is_stmt 0 view .LVU1173
 3856 0044 15D1     		bne	.L377
1856:src/display.c **** 	}
 3857              		.loc 1 1856 4 is_stmt 1 view .LVU1174
1856:src/display.c **** 	}
 3858              		.loc 1 1856 6 is_stmt 0 view .LVU1175
 3859 0046 3268     		ldr	r2, [r6]
 3860              	.LVL448:
 3861              	.L372:
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3862              		.loc 1 1859 2 is_stmt 1 view .LVU1176
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3863              		.loc 1 1859 5 is_stmt 0 view .LVU1177
 3864 0048 8242     		cmp	r2, r0
 3865 004a 05DC     		bgt	.L381
1865:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 3866              		.loc 1 1865 53 discriminator 2 view .LVU1178
 3867 004c 0333     		adds	r3, r3, #3
 3868 004e 0C2B     		cmp	r3, #12
 3869 0050 04D8     		bhi	.L376
 3870              	.LVL449:
 3871              	.L373:
1869:src/display.c **** 	}
 3872              		.loc 1 1869 11 view .LVU1179
 3873 0052 0020     		movs	r0, #0
1871:src/display.c **** #else
 3874              		.loc 1 1871 7 view .LVU1180
 3875 0054 0AB0     		add	sp, sp, #40
 3876              		.cfi_remember_state
 3877              		.cfi_def_cfa_offset 16
 3878              		@ sp needed
 3879 0056 70BD     		pop	{r4, r5, r6, pc}
 3880              	.LVL450:
 3881              	.L381:
 3882              		.cfi_restore_state
1859:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3883              		.loc 1 1859 21 view .LVU1181
 3884 0058 031D     		adds	r3, r0, #4
 3885 005a E2DA     		bge	.L375
 3886              	.L376:
 3887              	.LBB299:
 3888              	.LBI299:
1838:src/display.c **** 	decNumber c;
 3889              		.loc 1 1838 26 is_stmt 1 view .LVU1182
 3890              	.LVL451:
 3891              	.LBB300:
1866:src/display.c **** 	}
ARM GAS  /tmp/cc9o0abE.s 			page 151


 3892              		.loc 1 1866 4 view .LVU1183
1866:src/display.c **** 	}
 3893              		.loc 1 1866 24 is_stmt 0 view .LVU1184
 3894 005c 064B     		ldr	r3, .L382
 3895 005e 1B68     		ldr	r3, [r3]
 3896 0060 93F8E73F 		ldrb	r3, [r3, #4071]	@ zero_extendqisi2
1866:src/display.c **** 	}
 3897              		.loc 1 1866 33 view .LVU1185
 3898 0064 13F0100F 		tst	r3, #16
 3899 0068 14BF     		ite	ne
 3900 006a 0320     		movne	r0, #3
 3901 006c 0220     		moveq	r0, #2
 3902              	.LBE300:
 3903              	.LBE299:
1871:src/display.c **** #else
 3904              		.loc 1 1871 7 view .LVU1186
 3905 006e 0AB0     		add	sp, sp, #40
 3906              		.cfi_remember_state
 3907              		.cfi_def_cfa_offset 16
 3908              		@ sp needed
 3909 0070 70BD     		pop	{r4, r5, r6, pc}
 3910              	.LVL452:
 3911              	.L377:
 3912              		.cfi_restore_state
1840:src/display.c **** 	int min_pos_exp, max_neg_exp;
 3913              		.loc 1 1840 16 view .LVU1187
 3914 0072 0022     		movs	r2, #0
 3915 0074 E8E7     		b	.L372
 3916              	.L383:
 3917 0076 00BF     		.align	2
 3918              	.L382:
 3919 0078 00000000 		.word	main_ram
 3920              		.cfi_endproc
 3921              	.LFE20:
 3923              		.section	.text.set_IO_annunciator,"ax",%progbits
 3924              		.align	1
 3925              		.p2align 2,,3
 3926              		.global	set_IO_annunciator
 3927              		.syntax unified
 3928              		.thumb
 3929              		.thumb_func
 3930              		.fpu fpv4-sp-d16
 3932              	set_IO_annunciator:
 3933              	.LFB29:
2651:src/display.c **** #ifndef DM42
 3934              		.loc 1 2651 37 is_stmt 1 view -0
 3935              		.cfi_startproc
 3936              		@ args = 0, pretend = 0, frame = 0
 3937              		@ frame_needed = 0, uses_anonymous_args = 0
2656:src/display.c **** #endif
 3938              		.loc 1 2656 4 view .LVU1189
2651:src/display.c **** #ifndef DM42
 3939              		.loc 1 2651 37 is_stmt 0 view .LVU1190
 3940 0000 38B5     		push	{r3, r4, r5, lr}
 3941              		.cfi_def_cfa_offset 16
 3942              		.cfi_offset 3, -16
 3943              		.cfi_offset 4, -12
ARM GAS  /tmp/cc9o0abE.s 			page 152


 3944              		.cfi_offset 5, -8
 3945              		.cfi_offset 14, -4
2662:src/display.c **** #endif
 3946              		.loc 1 2662 4 view .LVU1191
 3947 0002 0D4B     		ldr	r3, .L390
2666:src/display.c **** 	  dot(LIT_EQ, on);
 3948              		.loc 1 2666 9 view .LVU1192
 3949 0004 0D4C     		ldr	r4, .L390+4
2662:src/display.c **** #endif
 3950              		.loc 1 2662 4 view .LVU1193
 3951 0006 1B68     		ldr	r3, [r3]
2666:src/display.c **** 	  dot(LIT_EQ, on);
 3952              		.loc 1 2666 5 view .LVU1194
 3953 0008 2268     		ldr	r2, [r4]
2662:src/display.c **** #endif
 3954              		.loc 1 2662 4 view .LVU1195
 3955 000a 1D1E     		subs	r5, r3, #0
 3956 000c 18BF     		it	ne
 3957 000e 0125     		movne	r5, #1
 3958              	.LVL453:
2666:src/display.c **** 	  dot(LIT_EQ, on);
 3959              		.loc 1 2666 2 is_stmt 1 view .LVU1196
2666:src/display.c **** 	  dot(LIT_EQ, on);
 3960              		.loc 1 2666 5 is_stmt 0 view .LVU1197
 3961 0010 AA42     		cmp	r2, r5
 3962 0012 0FD0     		beq	.L384
2667:src/display.c **** 	  IoAnnunciator = on;
 3963              		.loc 1 2667 4 is_stmt 1 view .LVU1198
 3964              	.LVL454:
 3965              	.LBB301:
 3966              	.LBI301:
 347:src/display.c ****   if (on)	set_dot(n);
 3967              		.loc 1 347 6 view .LVU1199
 3968              	.LBB302:
 348:src/display.c ****   else	clr_dot(n);
 3969              		.loc 1 348 3 view .LVU1200
 348:src/display.c ****   else	clr_dot(n);
 3970              		.loc 1 348 11 is_stmt 0 view .LVU1201
 3971 0014 8420     		movs	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 3972              		.loc 1 348 6 view .LVU1202
 3973 0016 33B9     		cbnz	r3, .L389
 349:src/display.c **** }
 3974              		.loc 1 349 8 is_stmt 1 view .LVU1203
 3975 0018 FFF7FEFF 		bl	clr_dot
 3976              	.LVL455:
 349:src/display.c **** }
 3977              		.loc 1 349 8 is_stmt 0 view .LVU1204
 3978              	.LBE302:
 3979              	.LBE301:
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 3980              		.loc 1 2668 4 is_stmt 1 view .LVU1205
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 3981              		.loc 1 2668 18 is_stmt 0 view .LVU1206
 3982 001c 2560     		str	r5, [r4]
2669:src/display.c **** 	}
 3983              		.loc 1 2669 4 is_stmt 1 view .LVU1207
ARM GAS  /tmp/cc9o0abE.s 			page 153


2671:src/display.c **** 
 3984              		.loc 1 2671 7 is_stmt 0 view .LVU1208
 3985 001e BDE83840 		pop	{r3, r4, r5, lr}
 3986              		.cfi_remember_state
 3987              		.cfi_restore 14
 3988              		.cfi_restore 5
 3989              		.cfi_restore 4
 3990              		.cfi_restore 3
 3991              		.cfi_def_cfa_offset 0
 3992              	.LVL456:
2669:src/display.c **** 	}
 3993              		.loc 1 2669 4 view .LVU1209
 3994 0022 FFF7FEBF 		b	finish_display
 3995              	.LVL457:
 3996              	.L389:
 3997              		.cfi_restore_state
 3998              	.LBB304:
 3999              	.LBB303:
 348:src/display.c ****   else	clr_dot(n);
 4000              		.loc 1 348 11 is_stmt 1 view .LVU1210
 4001 0026 FFF7FEFF 		bl	set_dot
 4002              	.LVL458:
 348:src/display.c ****   else	clr_dot(n);
 4003              		.loc 1 348 11 is_stmt 0 view .LVU1211
 4004              	.LBE303:
 4005              	.LBE304:
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4006              		.loc 1 2668 4 is_stmt 1 view .LVU1212
2668:src/display.c **** 	  finish_display(); //LIT_EQ
 4007              		.loc 1 2668 18 is_stmt 0 view .LVU1213
 4008 002a 2560     		str	r5, [r4]
2669:src/display.c **** 	}
 4009              		.loc 1 2669 4 is_stmt 1 view .LVU1214
2671:src/display.c **** 
 4010              		.loc 1 2671 7 is_stmt 0 view .LVU1215
 4011 002c BDE83840 		pop	{r3, r4, r5, lr}
 4012              		.cfi_remember_state
 4013              		.cfi_restore 14
 4014              		.cfi_restore 5
 4015              		.cfi_restore 4
 4016              		.cfi_restore 3
 4017              		.cfi_def_cfa_offset 0
 4018              	.LVL459:
2669:src/display.c **** 	}
 4019              		.loc 1 2669 4 view .LVU1216
 4020 0030 FFF7FEBF 		b	finish_display
 4021              	.LVL460:
 4022              	.L384:
 4023              		.cfi_restore_state
2671:src/display.c **** 
 4024              		.loc 1 2671 7 view .LVU1217
 4025 0034 38BD     		pop	{r3, r4, r5, pc}
 4026              	.LVL461:
 4027              	.L391:
2671:src/display.c **** 
 4028              		.loc 1 2671 7 view .LVU1218
 4029 0036 00BF     		.align	2
ARM GAS  /tmp/cc9o0abE.s 			page 154


 4030              	.L390:
 4031 0038 00000000 		.word	PrinterColumn
 4032 003c 00000000 		.word	IoAnnunciator
 4033              		.cfi_endproc
 4034              	.LFE29:
 4036              		.section	.text.set_annunciators,"ax",%progbits
 4037              		.align	1
 4038              		.p2align 2,,3
 4039              		.syntax unified
 4040              		.thumb
 4041              		.thumb_func
 4042              		.fpu fpv4-sp-d16
 4044              	set_annunciators:
 4045              	.LFB28:
2620:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4046              		.loc 1 2620 7 is_stmt 1 view -0
 4047              		.cfi_startproc
 4048              		@ args = 0, pretend = 0, frame = 0
 4049              		@ frame_needed = 0, uses_anonymous_args = 0
2621:src/display.c **** 
 4050              		.loc 1 2621 2 view .LVU1220
2620:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4051              		.loc 1 2620 7 is_stmt 0 view .LVU1221
 4052 0000 70B5     		push	{r4, r5, r6, lr}
 4053              		.cfi_def_cfa_offset 16
 4054              		.cfi_offset 4, -16
 4055              		.cfi_offset 5, -12
 4056              		.cfi_offset 6, -8
 4057              		.cfi_offset 14, -4
2628:src/display.c **** #else
 4058              		.loc 1 2628 11 view .LVU1222
 4059 0002 354C     		ldr	r4, .L418
2621:src/display.c **** 
 4060              		.loc 1 2621 29 view .LVU1223
 4061 0004 FFF7FEFF 		bl	get_trig_mode
 4062              	.LVL462:
2628:src/display.c **** #else
 4063              		.loc 1 2628 11 view .LVU1224
 4064 0008 2368     		ldr	r3, [r4]
 4065 000a 93F8EA3F 		ldrb	r3, [r3, #4074]	@ zero_extendqisi2
2628:src/display.c **** #else
 4066              		.loc 1 2628 2 view .LVU1225
 4067 000e 1907     		lsls	r1, r3, #28
2621:src/display.c **** 
 4068              		.loc 1 2621 29 view .LVU1226
 4069 0010 0546     		mov	r5, r0
 4070              	.LVL463:
2628:src/display.c **** #else
 4071              		.loc 1 2628 2 is_stmt 1 view .LVU1227
 4072              	.LBB305:
 4073              	.LBB306:
 348:src/display.c ****   else	clr_dot(n);
 4074              		.loc 1 348 11 is_stmt 0 view .LVU1228
 4075 0012 4FF08800 		mov	r0, #136
 4076              	.LBE306:
 4077              	.LBE305:
2628:src/display.c **** #else
ARM GAS  /tmp/cc9o0abE.s 			page 155


 4078              		.loc 1 2628 2 view .LVU1229
 4079 0016 03D5     		bpl	.L393
2628:src/display.c **** #else
 4080              		.loc 1 2628 33 discriminator 1 view .LVU1230
 4081 0018 304B     		ldr	r3, .L418+4
2628:src/display.c **** #else
 4082              		.loc 1 2628 2 discriminator 1 view .LVU1231
 4083 001a 1B68     		ldr	r3, [r3]
 4084 001c 002B     		cmp	r3, #0
 4085 001e 58D0     		beq	.L415
 4086              	.L393:
 4087              	.LVL464:
 4088              	.LBB309:
 4089              	.LBI305:
 347:src/display.c ****   if (on)	set_dot(n);
 4090              		.loc 1 347 6 is_stmt 1 view .LVU1232
 4091              	.LBB307:
 348:src/display.c ****   else	clr_dot(n);
 4092              		.loc 1 348 3 view .LVU1233
 349:src/display.c **** }
 4093              		.loc 1 349 8 view .LVU1234
 4094 0020 FFF7FEFF 		bl	clr_dot
 4095              	.LVL465:
 4096              	.L394:
 349:src/display.c **** }
 4097              		.loc 1 349 8 is_stmt 0 view .LVU1235
 4098              	.LBE307:
 4099              	.LBE309:
2633:src/display.c **** #endif
 4100              		.loc 1 2633 2 is_stmt 1 view .LVU1236
 4101              	.LBB310:
 4102              	.LBI310:
 347:src/display.c ****   if (on)	set_dot(n);
 4103              		.loc 1 347 6 view .LVU1237
 4104              	.LBB311:
 348:src/display.c ****   else	clr_dot(n);
 4105              		.loc 1 348 3 view .LVU1238
 4106              	.LBE311:
 4107              	.LBE310:
2633:src/display.c **** #endif
 4108              		.loc 1 2633 14 is_stmt 0 view .LVU1239
 4109 0024 2368     		ldr	r3, [r4]
 4110 0026 93F8AC3F 		ldrb	r3, [r3, #4012]	@ zero_extendqisi2
 4111              	.LBB314:
 4112              	.LBB312:
 348:src/display.c ****   else	clr_dot(n);
 4113              		.loc 1 348 6 view .LVU1240
 4114 002a 03F04103 		and	r3, r3, #65
 4115 002e 412B     		cmp	r3, #65
 348:src/display.c ****   else	clr_dot(n);
 4116              		.loc 1 348 11 view .LVU1241
 4117 0030 4FF08400 		mov	r0, #132
 348:src/display.c ****   else	clr_dot(n);
 4118              		.loc 1 348 6 view .LVU1242
 4119 0034 44D1     		bne	.L395
 348:src/display.c ****   else	clr_dot(n);
 4120              		.loc 1 348 11 is_stmt 1 view .LVU1243
ARM GAS  /tmp/cc9o0abE.s 			page 156


 4121 0036 FFF7FEFF 		bl	set_dot
 4122              	.LVL466:
 4123              	.L396:
 348:src/display.c ****   else	clr_dot(n);
 4124              		.loc 1 348 11 is_stmt 0 view .LVU1244
 4125              	.LBE312:
 4126              	.LBE314:
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4127              		.loc 1 2636 2 is_stmt 1 view .LVU1245
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4128              		.loc 1 2636 19 is_stmt 0 view .LVU1246
 4129 003a 294E     		ldr	r6, .L418+8
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4130              		.loc 1 2636 2 view .LVU1247
 4131 003c B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4132              	.LBB315:
 4133              	.LBB316:
 348:src/display.c ****   else	clr_dot(n);
 4134              		.loc 1 348 11 view .LVU1248
 4135 003e 8620     		movs	r0, #134
 4136              	.LBE316:
 4137              	.LBE315:
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4138              		.loc 1 2636 2 view .LVU1249
 4139 0040 23B9     		cbnz	r3, .L397
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4140              		.loc 1 2636 47 discriminator 2 view .LVU1250
 4141 0042 7269     		ldr	r2, [r6, #20]
 4142 0044 274B     		ldr	r3, .L418+12
 4143 0046 1340     		ands	r3, r3, r2
2636:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4144              		.loc 1 2636 2 discriminator 2 view .LVU1251
 4145 0048 002B     		cmp	r3, #0
 4146 004a 3FD0     		beq	.L416
 4147              	.L397:
 4148              	.LBB319:
 4149              	.LBB317:
 348:src/display.c ****   else	clr_dot(n);
 4150              		.loc 1 348 11 is_stmt 1 view .LVU1252
 4151 004c FFF7FEFF 		bl	set_dot
 4152              	.LVL467:
 4153              	.L398:
 4154              	.LBE317:
 4155              	.LBE319:
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4156              		.loc 1 2637 2 view .LVU1253
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4157              		.loc 1 2637 31 is_stmt 0 view .LVU1254
 4158 0050 254A     		ldr	r2, .L418+16
 4159 0052 7369     		ldr	r3, [r6, #20]
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4160              		.loc 1 2637 2 view .LVU1255
 4161 0054 1A42     		tst	r2, r3
 4162              	.LBB320:
 4163              	.LBB321:
 348:src/display.c ****   else	clr_dot(n);
 4164              		.loc 1 348 11 view .LVU1256
ARM GAS  /tmp/cc9o0abE.s 			page 157


 4165 0056 4FF08500 		mov	r0, #133
 4166              	.LBE321:
 4167              	.LBE320:
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4168              		.loc 1 2637 2 view .LVU1257
 4169 005a 02D0     		beq	.L399
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4170              		.loc 1 2637 48 discriminator 1 view .LVU1258
 4171 005c B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2637:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4172              		.loc 1 2637 2 discriminator 1 view .LVU1259
 4173 005e DA06     		lsls	r2, r3, #27
 4174 0060 31D4     		bmi	.L400
 4175              	.L399:
 4176              	.LVL468:
 4177              	.LBB324:
 4178              	.LBI320:
 347:src/display.c ****   if (on)	set_dot(n);
 4179              		.loc 1 347 6 is_stmt 1 view .LVU1260
 4180              	.LBB322:
 348:src/display.c ****   else	clr_dot(n);
 4181              		.loc 1 348 3 view .LVU1261
 349:src/display.c **** }
 4182              		.loc 1 349 8 view .LVU1262
 4183 0062 FFF7FEFF 		bl	clr_dot
 4184              	.LVL469:
 4185              	.L401:
 349:src/display.c **** }
 4186              		.loc 1 349 8 is_stmt 0 view .LVU1263
 4187              	.LBE322:
 4188              	.LBE324:
2638:src/display.c **** 	set_IO_annunciator();
 4189              		.loc 1 2638 2 is_stmt 1 view .LVU1264
 4190 0066 6820     		movs	r0, #104
 4191 0068 FFF7FEFF 		bl	get_user_flag
 4192              	.LVL470:
 4193              	.LBB325:
 4194              	.LBI325:
 347:src/display.c ****   if (on)	set_dot(n);
 4195              		.loc 1 347 6 view .LVU1265
 4196              	.LBB326:
 348:src/display.c ****   else	clr_dot(n);
 4197              		.loc 1 348 3 view .LVU1266
 348:src/display.c ****   else	clr_dot(n);
 4198              		.loc 1 348 6 is_stmt 0 view .LVU1267
 4199 006c 20B3     		cbz	r0, .L402
 348:src/display.c ****   else	clr_dot(n);
 4200              		.loc 1 348 11 is_stmt 1 view .LVU1268
 4201 006e 8320     		movs	r0, #131
 4202              	.LVL471:
 348:src/display.c ****   else	clr_dot(n);
 4203              		.loc 1 348 11 is_stmt 0 view .LVU1269
 4204 0070 FFF7FEFF 		bl	set_dot
 4205              	.LVL472:
 4206              	.L403:
 348:src/display.c ****   else	clr_dot(n);
 4207              		.loc 1 348 11 view .LVU1270
ARM GAS  /tmp/cc9o0abE.s 			page 158


 4208              	.LBE326:
 4209              	.LBE325:
2639:src/display.c **** 
 4210              		.loc 1 2639 2 is_stmt 1 view .LVU1271
 4211 0074 FFF7FEFF 		bl	set_IO_annunciator
 4212              	.LVL473:
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4213              		.loc 1 2643 2 view .LVU1272
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4214              		.loc 1 2643 11 is_stmt 0 view .LVU1273
 4215 0078 2368     		ldr	r3, [r4]
 4216 007a 93F8E83F 		ldrb	r3, [r3, #4072]	@ zero_extendqisi2
 4217 007e 03F00103 		and	r3, r3, #1
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4218              		.loc 1 2643 2 view .LVU1274
 4219 0082 2B43     		orrs	r3, r3, r5
 4220 0084 13F0FF0F 		tst	r3, #255
 4221              	.LBB328:
 4222              	.LBB329:
 348:src/display.c ****   else	clr_dot(n);
 4223              		.loc 1 348 11 view .LVU1275
 4224 0088 4FF08C00 		mov	r0, #140
 4225              	.LBE329:
 4226              	.LBE328:
2643:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4227              		.loc 1 2643 2 view .LVU1276
 4228 008c 06D1     		bne	.L417
 4229              	.LVL474:
 4230              	.LBB332:
 4231              	.LBI328:
 347:src/display.c ****   if (on)	set_dot(n);
 4232              		.loc 1 347 6 is_stmt 1 view .LVU1277
 4233              	.LBB330:
 348:src/display.c ****   else	clr_dot(n);
 4234              		.loc 1 348 3 view .LVU1278
 348:src/display.c ****   else	clr_dot(n);
 4235              		.loc 1 348 11 view .LVU1279
 4236 008e FFF7FEFF 		bl	set_dot
 4237              	.LVL475:
 348:src/display.c ****   else	clr_dot(n);
 4238              		.loc 1 348 11 is_stmt 0 view .LVU1280
 4239              	.LBE330:
 4240              	.LBE332:
2644:src/display.c ****       }
 4241              		.loc 1 2644 2 is_stmt 1 view .LVU1281
 4242              	.L406:
 4243              	.LBB333:
 4244              	.LBI333:
 347:src/display.c ****   if (on)	set_dot(n);
 4245              		.loc 1 347 6 view .LVU1282
 4246              	.LBB334:
 348:src/display.c ****   else	clr_dot(n);
 4247              		.loc 1 348 3 view .LVU1283
 349:src/display.c **** }
 4248              		.loc 1 349 8 view .LVU1284
 4249              	.LBE334:
 4250              	.LBE333:
ARM GAS  /tmp/cc9o0abE.s 			page 159


2645:src/display.c **** 
 4251              		.loc 1 2645 7 is_stmt 0 view .LVU1285
 4252 0092 BDE87040 		pop	{r4, r5, r6, lr}
 4253              		.cfi_remember_state
 4254              		.cfi_restore 14
 4255              		.cfi_restore 6
 4256              		.cfi_restore 5
 4257              		.cfi_restore 4
 4258              		.cfi_def_cfa_offset 0
 4259              	.LVL476:
 4260              	.LBB338:
 4261              	.LBB335:
 349:src/display.c **** }
 4262              		.loc 1 349 8 view .LVU1286
 4263 0096 8B20     		movs	r0, #139
 4264 0098 FFF7FEBF 		b	clr_dot
 4265              	.LVL477:
 4266              	.L417:
 4267              		.cfi_restore_state
 349:src/display.c **** }
 4268              		.loc 1 349 8 view .LVU1287
 4269              	.LBE335:
 4270              	.LBE338:
 4271              	.LBB339:
 347:src/display.c ****   if (on)	set_dot(n);
 4272              		.loc 1 347 6 is_stmt 1 view .LVU1288
 4273              	.LBB331:
 348:src/display.c ****   else	clr_dot(n);
 4274              		.loc 1 348 3 view .LVU1289
 349:src/display.c **** }
 4275              		.loc 1 349 8 view .LVU1290
 4276 009c FFF7FEFF 		bl	clr_dot
 4277              	.LVL478:
 349:src/display.c **** }
 4278              		.loc 1 349 8 is_stmt 0 view .LVU1291
 4279              	.LBE331:
 4280              	.LBE339:
2644:src/display.c ****       }
 4281              		.loc 1 2644 2 is_stmt 1 view .LVU1292
2644:src/display.c ****       }
 4282              		.loc 1 2644 11 is_stmt 0 view .LVU1293
 4283 00a0 2368     		ldr	r3, [r4]
 4284 00a2 93F8E83F 		ldrb	r3, [r3, #4072]	@ zero_extendqisi2
2644:src/display.c ****       }
 4285              		.loc 1 2644 2 view .LVU1294
 4286 00a6 DB07     		lsls	r3, r3, #31
 4287 00a8 F3D4     		bmi	.L406
2644:src/display.c ****       }
 4288              		.loc 1 2644 2 discriminator 1 view .LVU1295
 4289 00aa 012D     		cmp	r5, #1
 4290 00ac F1D1     		bne	.L406
 4291              	.LVL479:
 4292              	.LBB340:
 347:src/display.c ****   if (on)	set_dot(n);
 4293              		.loc 1 347 6 is_stmt 1 view .LVU1296
 4294              	.LBB336:
 348:src/display.c ****   else	clr_dot(n);
ARM GAS  /tmp/cc9o0abE.s 			page 160


 4295              		.loc 1 348 3 view .LVU1297
 348:src/display.c ****   else	clr_dot(n);
 4296              		.loc 1 348 11 view .LVU1298
 4297              	.LBE336:
 4298              	.LBE340:
2645:src/display.c **** 
 4299              		.loc 1 2645 7 is_stmt 0 view .LVU1299
 4300 00ae BDE87040 		pop	{r4, r5, r6, lr}
 4301              		.cfi_remember_state
 4302              		.cfi_restore 14
 4303              		.cfi_restore 6
 4304              		.cfi_restore 5
 4305              		.cfi_restore 4
 4306              		.cfi_def_cfa_offset 0
 4307              	.LVL480:
 4308              	.LBB341:
 4309              	.LBB337:
 348:src/display.c ****   else	clr_dot(n);
 4310              		.loc 1 348 11 view .LVU1300
 4311 00b2 8B20     		movs	r0, #139
 4312 00b4 FFF7FEBF 		b	set_dot
 4313              	.LVL481:
 4314              	.L402:
 4315              		.cfi_restore_state
 348:src/display.c ****   else	clr_dot(n);
 4316              		.loc 1 348 11 view .LVU1301
 4317              	.LBE337:
 4318              	.LBE341:
 4319              	.LBB342:
 4320              	.LBB327:
 349:src/display.c **** }
 4321              		.loc 1 349 8 is_stmt 1 view .LVU1302
 4322 00b8 8320     		movs	r0, #131
 4323              	.LVL482:
 349:src/display.c **** }
 4324              		.loc 1 349 8 is_stmt 0 view .LVU1303
 4325 00ba FFF7FEFF 		bl	clr_dot
 4326              	.LVL483:
 4327 00be D9E7     		b	.L403
 4328              	.LVL484:
 4329              	.L395:
 349:src/display.c **** }
 4330              		.loc 1 349 8 view .LVU1304
 4331              	.LBE327:
 4332              	.LBE342:
 4333              	.LBB343:
 4334              	.LBB313:
 349:src/display.c **** }
 4335              		.loc 1 349 8 is_stmt 1 view .LVU1305
 4336 00c0 FFF7FEFF 		bl	clr_dot
 4337              	.LVL485:
 349:src/display.c **** }
 4338              		.loc 1 349 8 is_stmt 0 view .LVU1306
 4339 00c4 B9E7     		b	.L396
 4340              	.LVL486:
 4341              	.L400:
 349:src/display.c **** }
ARM GAS  /tmp/cc9o0abE.s 			page 161


 4342              		.loc 1 349 8 view .LVU1307
 4343              	.LBE313:
 4344              	.LBE343:
 4345              	.LBB344:
 347:src/display.c ****   if (on)	set_dot(n);
 4346              		.loc 1 347 6 is_stmt 1 view .LVU1308
 4347              	.LBB323:
 348:src/display.c ****   else	clr_dot(n);
 4348              		.loc 1 348 3 view .LVU1309
 348:src/display.c ****   else	clr_dot(n);
 4349              		.loc 1 348 11 view .LVU1310
 4350 00c6 FFF7FEFF 		bl	set_dot
 4351              	.LVL487:
 4352 00ca CCE7     		b	.L401
 4353              	.LVL488:
 4354              	.L416:
 348:src/display.c ****   else	clr_dot(n);
 4355              		.loc 1 348 11 is_stmt 0 view .LVU1311
 4356              	.LBE323:
 4357              	.LBE344:
 4358              	.LBB345:
 4359              	.LBI315:
 347:src/display.c ****   if (on)	set_dot(n);
 4360              		.loc 1 347 6 is_stmt 1 view .LVU1312
 4361              	.LBB318:
 348:src/display.c ****   else	clr_dot(n);
 4362              		.loc 1 348 3 view .LVU1313
 349:src/display.c **** }
 4363              		.loc 1 349 8 view .LVU1314
 4364 00cc FFF7FEFF 		bl	clr_dot
 4365              	.LVL489:
 4366 00d0 BEE7     		b	.L398
 4367              	.LVL490:
 4368              	.L415:
 349:src/display.c **** }
 4369              		.loc 1 349 8 is_stmt 0 view .LVU1315
 4370              	.LBE318:
 4371              	.LBE345:
 4372              	.LBB346:
 347:src/display.c ****   if (on)	set_dot(n);
 4373              		.loc 1 347 6 is_stmt 1 view .LVU1316
 4374              	.LBB308:
 348:src/display.c ****   else	clr_dot(n);
 4375              		.loc 1 348 3 view .LVU1317
 348:src/display.c ****   else	clr_dot(n);
 4376              		.loc 1 348 11 view .LVU1318
 4377 00d2 FFF7FEFF 		bl	set_dot
 4378              	.LVL491:
 4379 00d6 A5E7     		b	.L394
 4380              	.L419:
 4381              		.align	2
 4382              	.L418:
 4383 00d8 00000000 		.word	main_ram
 4384 00dc 00000000 		.word	Running
 4385 00e0 00000000 		.word	StateWhileOn
 4386 00e4 07000800 		.word	524295
 4387 00e8 00080800 		.word	526336
ARM GAS  /tmp/cc9o0abE.s 			page 162


 4388              	.LBE308:
 4389              	.LBE346:
 4390              		.cfi_endproc
 4391              	.LFE28:
 4393              		.section	.text.pixel_length,"ax",%progbits
 4394              		.align	1
 4395              		.p2align 2,,3
 4396              		.global	pixel_length
 4397              		.syntax unified
 4398              		.thumb
 4399              		.thumb_func
 4400              		.fpu fpv4-sp-d16
 4402              	pixel_length:
 4403              	.LVL492:
 4404              	.LFB36:
3619:src/display.c **** 
3620:src/display.c **** 
3621:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3622:src/display.c ****        */
3623:src/display.c ****       int pixel_length(const char *s, int smallp)
3624:src/display.c ****       {
 4405              		.loc 1 3624 7 view -0
 4406              		.cfi_startproc
 4407              		@ args = 0, pretend = 0, frame = 0
 4408              		@ frame_needed = 0, uses_anonymous_args = 0
3625:src/display.c **** 	int len = 0;
 4409              		.loc 1 3625 2 view .LVU1320
3626:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4410              		.loc 1 3626 2 view .LVU1321
3624:src/display.c **** 	int len = 0;
 4411              		.loc 1 3624 7 is_stmt 0 view .LVU1322
 4412 0000 70B5     		push	{r4, r5, r6, lr}
 4413              		.cfi_def_cfa_offset 16
 4414              		.cfi_offset 4, -16
 4415              		.cfi_offset 5, -12
 4416              		.cfi_offset 6, -8
 4417              		.cfi_offset 14, -4
3624:src/display.c **** 	int len = 0;
 4418              		.loc 1 3624 7 view .LVU1323
 4419 0002 0446     		mov	r4, r0
3627:src/display.c **** 	while (*s != '\0') {
 4420              		.loc 1 3627 9 view .LVU1324
 4421 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4422              	.LVL493:
3626:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4423              		.loc 1 3626 34 view .LVU1325
 4424 0006 0E1E     		subs	r6, r1, #0
 4425 0008 18BF     		it	ne
 4426 000a 4FF48076 		movne	r6, #256
 4427              	.LVL494:
 4428              		.loc 1 3627 2 is_stmt 1 view .LVU1326
 4429              		.loc 1 3627 8 view .LVU1327
 4430 000e A0B1     		cbz	r0, .L427
3625:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4431              		.loc 1 3625 6 is_stmt 0 view .LVU1328
 4432 0010 0025     		movs	r5, #0
 4433 0012 06E0     		b	.L425
ARM GAS  /tmp/cc9o0abE.s 			page 163


 4434              	.LVL495:
 4435              	.L423:
3628:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3629:src/display.c **** 	  if (s[0] == '\007') {
3630:src/display.c **** 	    len += s[1] & 0x1F;
3631:src/display.c **** 	    s += 3;
3632:src/display.c **** 	    continue;
3633:src/display.c **** 	  }
3634:src/display.c **** #endif
3635:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4436              		.loc 1 3635 11 view .LVU1329
 4437 0014 3044     		add	r0, r0, r6
 4438 0016 FFF7FEFF 		bl	charlengths
 4439              	.LVL496:
 4440              		.loc 1 3635 42 view .LVU1330
 4441 001a 0134     		adds	r4, r4, #1
 4442              	.LVL497:
 4443              		.loc 1 3635 8 view .LVU1331
 4444 001c 0544     		add	r5, r5, r0
 4445              	.LVL498:
3627:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4446              		.loc 1 3627 8 is_stmt 1 view .LVU1332
3627:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4447              		.loc 1 3627 9 is_stmt 0 view .LVU1333
 4448 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3627:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4449              		.loc 1 3627 8 view .LVU1334
 4450 0020 48B1     		cbz	r0, .L420
 4451              	.LVL499:
 4452              	.L425:
3629:src/display.c **** 	    len += s[1] & 0x1F;
 4453              		.loc 1 3629 4 is_stmt 1 view .LVU1335
 4454              		.loc 1 3635 4 view .LVU1336
3629:src/display.c **** 	    len += s[1] & 0x1F;
 4455              		.loc 1 3629 7 is_stmt 0 view .LVU1337
 4456 0022 0728     		cmp	r0, #7
 4457 0024 F6D1     		bne	.L423
3630:src/display.c **** 	    s += 3;
 4458              		.loc 1 3630 6 is_stmt 1 view .LVU1338
3630:src/display.c **** 	    s += 3;
 4459              		.loc 1 3630 18 is_stmt 0 view .LVU1339
 4460 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3627:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4461              		.loc 1 3627 9 view .LVU1340
 4462 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3630:src/display.c **** 	    s += 3;
 4463              		.loc 1 3630 18 view .LVU1341
 4464 002a 03F01F03 		and	r3, r3, #31
3631:src/display.c **** 	    continue;
 4465              		.loc 1 3631 8 view .LVU1342
 4466 002e 0334     		adds	r4, r4, #3
 4467              	.LVL500:
3630:src/display.c **** 	    s += 3;
 4468              		.loc 1 3630 10 view .LVU1343
 4469 0030 1D44     		add	r5, r5, r3
 4470              	.LVL501:
3631:src/display.c **** 	    continue;
ARM GAS  /tmp/cc9o0abE.s 			page 164


 4471              		.loc 1 3631 6 is_stmt 1 view .LVU1344
3632:src/display.c **** 	  }
 4472              		.loc 1 3632 6 view .LVU1345
3627:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4473              		.loc 1 3627 8 view .LVU1346
 4474 0032 0028     		cmp	r0, #0
 4475 0034 F5D1     		bne	.L425
 4476              	.L420:
3636:src/display.c **** 	}
3637:src/display.c **** 	return len;
3638:src/display.c ****       }
 4477              		.loc 1 3638 7 is_stmt 0 view .LVU1347
 4478 0036 2846     		mov	r0, r5
 4479 0038 70BD     		pop	{r4, r5, r6, pc}
 4480              	.LVL502:
 4481              	.L427:
3625:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4482              		.loc 1 3625 6 view .LVU1348
 4483 003a 0546     		mov	r5, r0
3637:src/display.c ****       }
 4484              		.loc 1 3637 2 is_stmt 1 view .LVU1349
 4485              		.loc 1 3638 7 is_stmt 0 view .LVU1350
 4486 003c 2846     		mov	r0, r5
 4487 003e 70BD     		pop	{r4, r5, r6, pc}
 4488              		.loc 1 3638 7 view .LVU1351
 4489              		.cfi_endproc
 4490              	.LFE36:
 4492              		.section	.text.set_status,"ax",%progbits
 4493              		.align	1
 4494              		.p2align 2,,3
 4495              		.syntax unified
 4496              		.thumb
 4497              		.thumb_func
 4498              		.fpu fpv4-sp-d16
 4500              	set_status:
 4501              	.LVL503:
 4502              	.LFB39:
3639:src/display.c **** 
3640:src/display.c **** 
3641:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3642:src/display.c ****        * If this is larger than the display, return true.
3643:src/display.c ****        */
3644:src/display.c ****       static int string_too_large(const char *s) {
3645:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3646:src/display.c ****       }
3647:src/display.c ****       static int string_too_large_top(const char *s) {
3648:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3649:src/display.c ****       }
3650:src/display.c **** 
3651:src/display.c **** 
3652:src/display.c ****       /* Display the given string on the screen.
3653:src/display.c ****        */
3654:src/display.c ****       static void set_status(const char *str) {
 4503              		.loc 1 3654 47 is_stmt 1 view -0
 4504              		.cfi_startproc
 4505              		@ args = 0, pretend = 0, frame = 0
 4506              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc9o0abE.s 			page 165


3655:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4507              		.loc 1 3655 2 view .LVU1353
3654:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4508              		.loc 1 3654 47 is_stmt 0 view .LVU1354
 4509 0000 10B5     		push	{r4, lr}
 4510              		.cfi_def_cfa_offset 8
 4511              		.cfi_offset 4, -8
 4512              		.cfi_offset 14, -4
 4513              		.loc 1 3655 24 view .LVU1355
 4514 0002 0D4B     		ldr	r3, .L435
 4515              		.loc 1 3655 2 view .LVU1356
 4516 0004 93F91630 		ldrsb	r3, [r3, #22]
 4517 0008 002B     		cmp	r3, #0
3654:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4518              		.loc 1 3654 47 view .LVU1357
 4519 000a 82B0     		sub	sp, sp, #8
 4520              		.cfi_def_cfa_offset 16
3654:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4521              		.loc 1 3654 47 view .LVU1358
 4522 000c 0446     		mov	r4, r0
 4523              		.loc 1 3655 2 view .LVU1359
 4524 000e 0ADA     		bge	.L434
 4525 0010 0121     		movs	r1, #1
 4526              	.LVL504:
 4527              	.L431:
 4528              	.LBB347:
 4529              	.LBI347:
3496:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4530              		.loc 1 3496 19 is_stmt 1 discriminator 6 view .LVU1360
 4531              	.LBB348:
3497:src/display.c ****       }
 4532              		.loc 1 3497 2 discriminator 6 view .LVU1361
 4533 0012 40F24A23 		movw	r3, #586
 4534 0016 0093     		str	r3, [sp]
 4535 0018 2046     		mov	r0, r4
 4536 001a 8E23     		movs	r3, #142
 4537 001c 4A22     		movs	r2, #74
 4538 001e FFF7FEFF 		bl	s_s_sized
 4539              	.LVL505:
3497:src/display.c ****       }
 4540              		.loc 1 3497 2 is_stmt 0 discriminator 6 view .LVU1362
 4541              	.LBE348:
 4542              	.LBE347:
3656:src/display.c ****       }
 4543              		.loc 1 3656 7 discriminator 6 view .LVU1363
 4544 0022 02B0     		add	sp, sp, #8
 4545              		.cfi_remember_state
 4546              		.cfi_def_cfa_offset 8
 4547              		@ sp needed
 4548 0024 10BD     		pop	{r4, pc}
 4549              	.LVL506:
 4550              	.L434:
 4551              		.cfi_restore_state
 4552              	.LBB349:
 4553              	.LBI349:
3644:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4554              		.loc 1 3644 18 is_stmt 1 view .LVU1364
ARM GAS  /tmp/cc9o0abE.s 			page 166


 4555              	.LBB350:
3645:src/display.c ****       }
 4556              		.loc 1 3645 2 view .LVU1365
3645:src/display.c ****       }
 4557              		.loc 1 3645 9 is_stmt 0 view .LVU1366
 4558 0026 0021     		movs	r1, #0
 4559 0028 FFF7FEFF 		bl	pixel_length
 4560              	.LVL507:
3645:src/display.c ****       }
 4561              		.loc 1 3645 9 view .LVU1367
 4562              	.LBE350:
 4563              	.LBE349:
3655:src/display.c ****       }
 4564              		.loc 1 3655 2 view .LVU1368
 4565 002c 4B28     		cmp	r0, #75
 4566 002e D4BF     		ite	le
 4567 0030 0021     		movle	r1, #0
 4568 0032 0121     		movgt	r1, #1
 4569 0034 EDE7     		b	.L431
 4570              	.L436:
 4571 0036 00BF     		.align	2
 4572              	.L435:
 4573 0038 00000000 		.word	StateWhileOn
 4574              		.cfi_endproc
 4575              	.LFE39:
 4577              		.section	.text.set_x_dn,"ax",%progbits
 4578              		.align	1
 4579              		.p2align 2,,3
 4580              		.global	set_x_dn
 4581              		.syntax unified
 4582              		.thumb
 4583              		.thumb_func
 4584              		.fpu fpv4-sp-d16
 4586              	set_x_dn:
 4587              	.LVL508:
 4588              	.LFB23:
2020:src/display.c **** 	char x[50], *obp = x;
 4589              		.loc 1 2020 67 is_stmt 1 view -0
 4590              		.cfi_startproc
 4591              		@ args = 0, pretend = 0, frame = 152
 4592              		@ frame_needed = 0, uses_anonymous_args = 0
2021:src/display.c **** 	int odig = 0;
 4593              		.loc 1 2021 2 view .LVU1370
2020:src/display.c **** 	char x[50], *obp = x;
 4594              		.loc 1 2020 67 is_stmt 0 view .LVU1371
 4595 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4596              		.cfi_def_cfa_offset 36
 4597              		.cfi_offset 4, -36
 4598              		.cfi_offset 5, -32
 4599              		.cfi_offset 6, -28
 4600              		.cfi_offset 7, -24
 4601              		.cfi_offset 8, -20
 4602              		.cfi_offset 9, -16
 4603              		.cfi_offset 10, -12
 4604              		.cfi_offset 11, -8
 4605              		.cfi_offset 14, -4
 4606 0004 A7B0     		sub	sp, sp, #156
ARM GAS  /tmp/cc9o0abE.s 			page 167


 4607              		.cfi_def_cfa_offset 192
 4608              	.LVL509:
2022:src/display.c **** 	int show_exp = 0;
 4609              		.loc 1 2022 2 is_stmt 1 view .LVU1372
2023:src/display.c **** 	int j;
 4610              		.loc 1 2023 2 view .LVU1373
2024:src/display.c **** 	char mantissa[64];
 4611              		.loc 1 2024 2 view .LVU1374
2025:src/display.c **** 	int exp = 0;
 4612              		.loc 1 2025 2 view .LVU1375
2026:src/display.c **** 	char *p = mantissa;
 4613              		.loc 1 2026 2 view .LVU1376
2027:src/display.c **** 	char *r;
 4614              		.loc 1 2027 2 view .LVU1377
2028:src/display.c **** 	const char *q;
 4615              		.loc 1 2028 2 view .LVU1378
2029:src/display.c **** 	int count, i;
 4616              		.loc 1 2029 2 view .LVU1379
2030:src/display.c **** 	int extra_digits = 0;
 4617              		.loc 1 2030 2 view .LVU1380
2031:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
 4618              		.loc 1 2031 2 view .LVU1381
2033:src/display.c **** 	int dispdigs;
 4619              		.loc 1 2033 2 view .LVU1382
2034:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4620              		.loc 1 2034 2 view .LVU1383
2035:src/display.c **** #else
 4621              		.loc 1 2035 2 view .LVU1384
2020:src/display.c **** 	char x[50], *obp = x;
 4622              		.loc 1 2020 67 is_stmt 0 view .LVU1385
 4623 0006 8246     		mov	r10, r0
2035:src/display.c **** #else
 4624              		.loc 1 2035 13 view .LVU1386
 4625 0008 08A8     		add	r0, sp, #32
 4626              	.LVL510:
2020:src/display.c **** 	char x[50], *obp = x;
 4627              		.loc 1 2020 67 view .LVU1387
 4628 000a 0C46     		mov	r4, r1
 4629 000c 0192     		str	r2, [sp, #4]
2035:src/display.c **** #else
 4630              		.loc 1 2035 13 view .LVU1388
 4631 000e FFF7FEFF 		bl	get_dispmode_digs
 4632              	.LVL511:
2035:src/display.c **** #else
 4633              		.loc 1 2035 13 view .LVU1389
 4634 0012 0546     		mov	r5, r0
 4635              	.LVL512:
2040:src/display.c **** 	int negative = 0;
 4636              		.loc 1 2040 2 is_stmt 1 view .LVU1390
2041:src/display.c **** 	int trimzeros = 0;
 4637              		.loc 1 2041 2 view .LVU1391
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4638              		.loc 1 2042 2 view .LVU1392
2050:src/display.c **** #endif
 4639              		.loc 1 2050 2 view .LVU1393
2053:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4640              		.loc 1 2053 2 view .LVU1394
ARM GAS  /tmp/cc9o0abE.s 			page 168


 4641 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4642              	.LVL513:
2055:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4643              		.loc 1 2055 2 view .LVU1395
2055:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4644              		.loc 1 2055 5 is_stmt 0 view .LVU1396
 4645 0018 002C     		cmp	r4, #0
 4646 001a 00F08781 		beq	.L438
 4647              	.L441:
2080:src/display.c **** 	  return;
 4648              		.loc 1 2080 2 is_stmt 1 view .LVU1397
2080:src/display.c **** 	  return;
 4649              		.loc 1 2080 6 is_stmt 0 view .LVU1398
 4650 001e 9AF80800 		ldrb	r0, [r10, #8]	@ zero_extendqisi2
 4651 0022 2146     		mov	r1, r4
 4652 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4653              	.LVL514:
2080:src/display.c **** 	  return;
 4654              		.loc 1 2080 5 view .LVU1399
 4655 0028 8146     		mov	r9, r0
 4656 002a 0028     		cmp	r0, #0
 4657 002c 40F07681 		bne	.L437
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4658              		.loc 1 2083 2 is_stmt 1 view .LVU1400
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4659              		.loc 1 2083 12 is_stmt 0 view .LVU1401
 4660 0030 CC4E     		ldr	r6, .L689
2083:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4661              		.loc 1 2083 5 view .LVU1402
 4662 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4663 0034 012B     		cmp	r3, #1
 4664 0036 00F0FB82 		beq	.L666
2026:src/display.c **** 	char *p = mantissa;
 4665              		.loc 1 2026 6 view .LVU1403
 4666 003a 8046     		mov	r8, r0
 4667              	.LVL515:
 4668              	.L444:
2089:src/display.c **** 
 4669              		.loc 1 2089 2 is_stmt 1 view .LVU1404
 4670 003c 09AF     		add	r7, sp, #36
 4671              	.LVL516:
2089:src/display.c **** 
 4672              		.loc 1 2089 2 is_stmt 0 view .LVU1405
 4673 003e 3846     		mov	r0, r7
 4674 0040 3222     		movs	r2, #50
 4675 0042 0021     		movs	r1, #0
 4676 0044 FFF7FEFF 		bl	xset
 4677              	.LVL517:
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4678              		.loc 1 2091 2 is_stmt 1 view .LVU1406
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4679              		.loc 1 2091 6 is_stmt 0 view .LVU1407
 4680 0048 5046     		mov	r0, r10
 4681 004a FFF7FEFF 		bl	dn_eq0
 4682              	.LVL518:
2091:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4683              		.loc 1 2091 5 view .LVU1408
ARM GAS  /tmp/cc9o0abE.s 			page 169


 4684 004e 0028     		cmp	r0, #0
 4685 0050 00F06781 		beq	.L445
2092:src/display.c **** 	    x[0] = '-';
 4686              		.loc 1 2092 4 is_stmt 1 view .LVU1409
2092:src/display.c **** 	    x[0] = '-';
 4687              		.loc 1 2092 7 is_stmt 0 view .LVU1410
 4688 0054 9AF90830 		ldrsb	r3, [r10, #8]
 4689 0058 002B     		cmp	r3, #0
 4690 005a C0F21083 		blt	.L667
 4691              	.L446:
2096:src/display.c **** 	} else
 4692              		.loc 1 2096 6 is_stmt 1 view .LVU1411
2096:src/display.c **** 	} else
 4693              		.loc 1 2096 11 is_stmt 0 view .LVU1412
 4694 005e 3023     		movs	r3, #48
 4695 0060 8DF82430 		strb	r3, [sp, #36]
 4696              	.L447:
2100:src/display.c **** 	  show_x(x, exp);
 4697              		.loc 1 2100 2 is_stmt 1 view .LVU1413
2100:src/display.c **** 	  show_x(x, exp);
 4698              		.loc 1 2100 12 is_stmt 0 view .LVU1414
 4699 0064 96F811B0 		ldrb	fp, [r6, #17]	@ zero_extendqisi2
2100:src/display.c **** 	  show_x(x, exp);
 4700              		.loc 1 2100 5 view .LVU1415
 4701 0068 BBF1010F 		cmp	fp, #1
 4702 006c 00F04883 		beq	.L668
2106:src/display.c **** 	  //  ALL mode: fill the display
 4703              		.loc 1 2106 2 is_stmt 1 view .LVU1416
2106:src/display.c **** 	  //  ALL mode: fill the display
 4704              		.loc 1 2106 5 is_stmt 0 view .LVU1417
 4705 0070 002D     		cmp	r5, #0
 4706 0072 40F08181 		bne	.L669
2108:src/display.c **** 	else
 4707              		.loc 1 2108 4 is_stmt 1 view .LVU1418
2108:src/display.c **** 	else
 4708              		.loc 1 2108 25 is_stmt 0 view .LVU1419
 4709 0076 019E     		ldr	r6, [sp, #4]
 4710              	.LBB366:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4711              		.loc 1 2115 11 view .LVU1420
 4712 0078 089B     		ldr	r3, [sp, #32]
 4713              	.LBE366:
2108:src/display.c **** 	else
 4714              		.loc 1 2108 25 view .LVU1421
 4715 007a 3168     		ldr	r1, [r6]
 4716              	.LBB367:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4717              		.loc 1 2115 11 view .LVU1422
 4718 007c 2A46     		mov	r2, r5
 4719 007e 5046     		mov	r0, r10
 4720              	.LBE367:
2108:src/display.c **** 	else
 4721              		.loc 1 2108 25 view .LVU1423
 4722 0080 4D1E     		subs	r5, r1, #1
 4723              	.LVL519:
 4724              	.LBB368:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
ARM GAS  /tmp/cc9o0abE.s 			page 170


 4725              		.loc 1 2115 11 view .LVU1424
 4726 0082 07A9     		add	r1, sp, #28
 4727              	.LBE368:
2108:src/display.c **** 	else
 4728              		.loc 1 2108 7 view .LVU1425
 4729 0084 0795     		str	r5, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 4730              		.loc 1 2112 2 is_stmt 1 view .LVU1426
 4731              	.LBB369:
2113:src/display.c **** 
 4732              		.loc 1 2113 4 view .LVU1427
 4733              	.LVL520:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4734              		.loc 1 2115 4 view .LVU1428
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4735              		.loc 1 2115 11 is_stmt 0 view .LVU1429
 4736 0086 FFF7FEFF 		bl	std_round_fix
 4737              	.LVL521:
2120:src/display.c ****  	}
 4738              		.loc 1 2120 27 view .LVU1430
 4739 008a 3368     		ldr	r3, [r6]
 4740 008c 013B     		subs	r3, r3, #1
2120:src/display.c ****  	}
 4741              		.loc 1 2120 9 view .LVU1431
 4742 008e 0793     		str	r3, [sp, #28]
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 4743              		.loc 1 2118 16 view .LVU1432
 4744 0090 0123     		movs	r3, #1
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4745              		.loc 1 2115 11 view .LVU1433
 4746 0092 0546     		mov	r5, r0
 4747              	.LVL522:
2116:src/display.c **** 	    // allow zeros to be trimmed
 4748              		.loc 1 2116 4 is_stmt 1 view .LVU1434
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 4749              		.loc 1 2118 6 view .LVU1435
2119:src/display.c **** 	    dd = *display_digits - 1;
 4750              		.loc 1 2119 4 view .LVU1436
2120:src/display.c ****  	}
 4751              		.loc 1 2120 6 view .LVU1437
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 4752              		.loc 1 2118 16 is_stmt 0 view .LVU1438
 4753 0094 0493     		str	r3, [sp, #16]
 4754              	.LVL523:
 4755              	.L568:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 4756              		.loc 1 2118 16 view .LVU1439
 4757              	.LBE369:
2132:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4758              		.loc 1 2132 2 is_stmt 1 view .LVU1440
 4759 0096 0DF1580B 		add	fp, sp, #88
 4760              	.LVL524:
2132:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4761              		.loc 1 2132 2 is_stmt 0 view .LVU1441
 4762 009a 3F22     		movs	r2, #63
 4763 009c 3021     		movs	r1, #48
 4764 009e 5846     		mov	r0, fp
ARM GAS  /tmp/cc9o0abE.s 			page 171


 4765 00a0 FFF7FEFF 		bl	xset
 4766              	.LVL525:
2133:src/display.c **** 
 4767              		.loc 1 2133 2 is_stmt 1 view .LVU1442
2133:src/display.c **** 
 4768              		.loc 1 2133 31 is_stmt 0 view .LVU1443
 4769 00a4 0023     		movs	r3, #0
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4770              		.loc 1 2135 6 view .LVU1444
 4771 00a6 4521     		movs	r1, #69
 4772 00a8 3846     		mov	r0, r7
2133:src/display.c **** 
 4773              		.loc 1 2133 31 view .LVU1445
 4774 00aa 8DF89730 		strb	r3, [sp, #151]
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4775              		.loc 1 2135 2 is_stmt 1 view .LVU1446
2135:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4776              		.loc 1 2135 6 is_stmt 0 view .LVU1447
 4777 00ae FFF7FEFF 		bl	find_char
 4778              	.LVL526:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 4779              		.loc 1 2137 2 is_stmt 1 view .LVU1448
2137:src/display.c **** 	if (q == NULL) exp = 0;
 4780              		.loc 1 2137 5 is_stmt 0 view .LVU1449
 4781 00b2 0646     		mov	r6, r0
 4782 00b4 0028     		cmp	r0, #0
 4783 00b6 00F06D81 		beq	.L670
 4784              	.L463:
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4785              		.loc 1 2140 4 is_stmt 1 view .LVU1450
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4786              		.loc 1 2140 10 is_stmt 0 view .LVU1451
 4787 00ba 701C     		adds	r0, r6, #1
 4788              	.LVL527:
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4789              		.loc 1 2140 10 view .LVU1452
 4790 00bc FFF7FEFF 		bl	s_to_i
 4791              	.LVL528:
2141:src/display.c **** 	}
 4792              		.loc 1 2141 7 view .LVU1453
 4793 00c0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4794 00c2 442B     		cmp	r3, #68
2140:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4795              		.loc 1 2140 10 view .LVU1454
 4796 00c4 0646     		mov	r6, r0
 4797              	.LVL529:
2141:src/display.c **** 	}
 4798              		.loc 1 2141 4 is_stmt 1 view .LVU1455
2141:src/display.c **** 	}
 4799              		.loc 1 2141 19 view .LVU1456
2141:src/display.c **** 	}
 4800              		.loc 1 2141 23 is_stmt 0 view .LVU1457
 4801 00c6 08BF     		it	eq
 4802 00c8 4642     		rsbeq	r6, r0, #0
 4803              	.LVL530:
 4804              	.L464:
2149:src/display.c **** 	if (!res) {
ARM GAS  /tmp/cc9o0abE.s 			page 172


 4805              		.loc 1 2149 2 is_stmt 1 view .LVU1458
2149:src/display.c **** 	if (!res) {
 4806              		.loc 1 2149 12 view .LVU1459
2149:src/display.c **** 	if (!res) {
 4807              		.loc 1 2149 2 is_stmt 0 view .LVU1460
 4808 00ca 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4809 00ce 202B     		cmp	r3, #32
2149:src/display.c **** 	if (!res) {
 4810              		.loc 1 2149 8 view .LVU1461
 4811 00d0 B846     		mov	r8, r7
2149:src/display.c **** 	if (!res) {
 4812              		.loc 1 2149 2 view .LVU1462
 4813 00d2 03D1     		bne	.L465
 4814              	.LVL531:
 4815              	.L466:
2149:src/display.c **** 	if (!res) {
 4816              		.loc 1 2149 27 is_stmt 1 discriminator 3 view .LVU1463
2149:src/display.c **** 	if (!res) {
 4817              		.loc 1 2149 23 discriminator 3 view .LVU1464
2149:src/display.c **** 	if (!res) {
 4818              		.loc 1 2149 12 discriminator 3 view .LVU1465
2149:src/display.c **** 	if (!res) {
 4819              		.loc 1 2149 2 is_stmt 0 discriminator 3 view .LVU1466
 4820 00d4 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4821              	.LVL532:
2149:src/display.c **** 	if (!res) {
 4822              		.loc 1 2149 2 discriminator 3 view .LVU1467
 4823 00d8 202B     		cmp	r3, #32
 4824 00da FBD0     		beq	.L466
 4825              	.LVL533:
 4826              	.L465:
2150:src/display.c **** 	  CLR_EXP_SIGN;
 4827              		.loc 1 2150 2 is_stmt 1 view .LVU1468
2150:src/display.c **** 	  CLR_EXP_SIGN;
 4828              		.loc 1 2150 5 is_stmt 0 view .LVU1469
 4829 00dc 002C     		cmp	r4, #0
 4830 00de 00F0D982 		beq	.L671
 4831              	.L467:
2154:src/display.c **** 	  negative = 1;
 4832              		.loc 1 2154 2 is_stmt 1 view .LVU1470
2154:src/display.c **** 	  negative = 1;
 4833              		.loc 1 2154 6 is_stmt 0 view .LVU1471
 4834 00e2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2154:src/display.c **** 	  negative = 1;
 4835              		.loc 1 2154 5 view .LVU1472
 4836 00e6 2D2B     		cmp	r3, #45
 4837 00e8 00F0E481 		beq	.L672
2157:src/display.c **** 	  q++;
 4838              		.loc 1 2157 9 is_stmt 1 view .LVU1473
2157:src/display.c **** 	  q++;
 4839              		.loc 1 2157 12 is_stmt 0 view .LVU1474
 4840 00ec 2B2B     		cmp	r3, #43
 4841 00ee 00F0BF82 		beq	.L673
2041:src/display.c **** 	int trimzeros = 0;
 4842              		.loc 1 2041 6 view .LVU1475
 4843 00f2 0022     		movs	r2, #0
 4844 00f4 0392     		str	r2, [sp, #12]
ARM GAS  /tmp/cc9o0abE.s 			page 173


 4845              	.LVL534:
 4846              	.L469:
2159:src/display.c **** 	if (*q == '.') {
 4847              		.loc 1 2159 9 is_stmt 1 discriminator 1 view .LVU1476
2159:src/display.c **** 	if (*q == '.') {
 4848              		.loc 1 2159 2 is_stmt 0 discriminator 1 view .LVU1477
 4849 00f6 302B     		cmp	r3, #48
 4850 00f8 03D1     		bne	.L471
 4851              	.LVL535:
 4852              	.L470:
2159:src/display.c **** 	if (*q == '.') {
 4853              		.loc 1 2159 24 is_stmt 1 discriminator 2 view .LVU1478
2159:src/display.c **** 	if (*q == '.') {
 4854              		.loc 1 2159 20 discriminator 2 view .LVU1479
2159:src/display.c **** 	if (*q == '.') {
 4855              		.loc 1 2159 9 discriminator 2 view .LVU1480
 4856 00fa 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4857              	.LVL536:
2159:src/display.c **** 	if (*q == '.') {
 4858              		.loc 1 2159 2 is_stmt 0 discriminator 2 view .LVU1481
 4859 00fe 302B     		cmp	r3, #48
 4860 0100 FBD0     		beq	.L470
 4861              	.LVL537:
 4862              	.L471:
2160:src/display.c **** 	  do
 4863              		.loc 1 2160 2 is_stmt 1 view .LVU1482
2160:src/display.c **** 	  do
 4864              		.loc 1 2160 5 is_stmt 0 view .LVU1483
 4865 0102 2E2B     		cmp	r3, #46
 4866 0104 00F0BE81 		beq	.L674
2167:src/display.c **** 	    *p++ = *q++;
 4867              		.loc 1 2167 4 is_stmt 1 view .LVU1484
2167:src/display.c **** 	    *p++ = *q++;
 4868              		.loc 1 2167 7 is_stmt 0 view .LVU1485
 4869 0108 A3F13002 		sub	r2, r3, #48
 4870 010c 092A     		cmp	r2, #9
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4871              		.loc 1 2168 6 is_stmt 1 view .LVU1486
 4872              	.LVL538:
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4873              		.loc 1 2168 15 is_stmt 0 view .LVU1487
 4874 010e 9CBF     		itt	ls
 4875 0110 08F10108 		addls	r8, r8, #1
 4876              	.LVL539:
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4877              		.loc 1 2168 11 view .LVU1488
 4878 0114 8DF85830 		strbls	r3, [sp, #88]
2169:src/display.c **** 	    *p++ = *q++;
 4879              		.loc 1 2169 11 view .LVU1489
 4880 0118 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2169:src/display.c **** 	    *p++ = *q++;
 4881              		.loc 1 2169 10 view .LVU1490
 4882 011c A2F13003 		sub	r3, r2, #48
2168:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4883              		.loc 1 2168 8 view .LVU1491
 4884 0120 94BF     		ite	ls
 4885 0122 0DF15901 		addls	r1, sp, #89
ARM GAS  /tmp/cc9o0abE.s 			page 174


2027:src/display.c **** 	char *r;
 4886              		.loc 1 2027 8 view .LVU1492
 4887 0126 5946     		movhi	r1, fp
 4888              	.LVL540:
2169:src/display.c **** 	    *p++ = *q++;
 4889              		.loc 1 2169 10 is_stmt 1 view .LVU1493
 4890 0128 092B     		cmp	r3, #9
 4891 012a 0ED8     		bhi	.L477
 4892 012c A6EB0800 		sub	r0, r6, r8
 4893 0130 08F10103 		add	r3, r8, #1
 4894              	.L478:
 4895              	.LVL541:
2170:src/display.c **** 	    exp++;
 4896              		.loc 1 2170 6 view .LVU1494
2170:src/display.c **** 	    exp++;
 4897              		.loc 1 2170 11 is_stmt 0 view .LVU1495
 4898 0134 01F8012B 		strb	r2, [r1], #1
 4899              	.LVL542:
2170:src/display.c **** 	    exp++;
 4900              		.loc 1 2170 15 view .LVU1496
 4901 0138 9846     		mov	r8, r3
 4902              	.LVL543:
2171:src/display.c **** 	  }
 4903              		.loc 1 2171 6 is_stmt 1 view .LVU1497
 4904 013a C618     		adds	r6, r0, r3
 4905              	.LVL544:
2169:src/display.c **** 	    *p++ = *q++;
 4906              		.loc 1 2169 10 view .LVU1498
2169:src/display.c **** 	    *p++ = *q++;
 4907              		.loc 1 2169 11 is_stmt 0 view .LVU1499
 4908 013c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4909              	.LVL545:
2169:src/display.c **** 	    *p++ = *q++;
 4910              		.loc 1 2169 10 view .LVU1500
 4911 0140 A2F1300C 		sub	ip, r2, #48
 4912 0144 BCF1090F 		cmp	ip, #9
 4913 0148 F4D9     		bls	.L478
 4914              	.LVL546:
 4915              	.L477:
2173:src/display.c **** 	    q++;
 4916              		.loc 1 2173 4 is_stmt 1 view .LVU1501
2173:src/display.c **** 	    q++;
 4917              		.loc 1 2173 7 is_stmt 0 view .LVU1502
 4918 014a 2E2A     		cmp	r2, #46
 4919 014c 00F07E82 		beq	.L675
 4920              	.LVL547:
 4921              	.L474:
2180:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4922              		.loc 1 2180 2 is_stmt 1 view .LVU1503
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4923              		.loc 1 2181 12 is_stmt 0 view .LVU1504
 4924 0150 019B     		ldr	r3, [sp, #4]
 4925 0152 079A     		ldr	r2, [sp, #28]
 4926 0154 1B68     		ldr	r3, [r3]
 4927 0156 0293     		str	r3, [sp, #8]
2180:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4928              		.loc 1 2180 5 view .LVU1505
ARM GAS  /tmp/cc9o0abE.s 			page 175


 4929 0158 012D     		cmp	r5, #1
 4930 015a 00F08381 		beq	.L480
 4931              	.LVL548:
 4932              	.L665:
2182:src/display.c **** 	  else {
 4933              		.loc 1 2182 35 view .LVU1506
 4934 015e 0021     		movs	r1, #0
 4935              	.LVL549:
 4936              	.L481:
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 4937              		.loc 1 2194 2 is_stmt 1 view .LVU1507
 4938 0160 02F1010E 		add	lr, r2, #1
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 4939              		.loc 1 2194 35 is_stmt 0 view .LVU1508
 4940 0164 7144     		add	r1, r1, lr
2194:src/display.c **** 	if (*p >= '5') {	// Round up
 4941              		.loc 1 2194 4 view .LVU1509
 4942 0166 0BEB0103 		add	r3, fp, r1
 4943              	.LVL550:
2195:src/display.c **** 	  *p = '0';
 4944              		.loc 1 2195 2 is_stmt 1 view .LVU1510
2195:src/display.c **** 	  *p = '0';
 4945              		.loc 1 2195 6 is_stmt 0 view .LVU1511
 4946 016a 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
2195:src/display.c **** 	  *p = '0';
 4947              		.loc 1 2195 5 view .LVU1512
 4948 016e 3428     		cmp	r0, #52
 4949 0170 26D9     		bls	.L486
2196:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4950              		.loc 1 2196 4 is_stmt 1 view .LVU1513
2196:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 4951              		.loc 1 2196 7 is_stmt 0 view .LVU1514
 4952 0172 3020     		movs	r0, #48
 4953 0174 0BF80100 		strb	r0, [fp, r1]
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4954              		.loc 1 2197 4 is_stmt 1 view .LVU1515
 4955              	.LVL551:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4956              		.loc 1 2197 23 view .LVU1516
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4957              		.loc 1 2197 4 is_stmt 0 view .LVU1517
 4958 0178 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 4959 017c 3928     		cmp	r0, #57
 4960 017e 40F0D783 		bne	.L487
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4961              		.loc 1 2197 11 view .LVU1518
 4962 0182 5846     		mov	r0, fp
 4963              	.LVL552:
 4964              	.L488:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4965              		.loc 1 2197 38 is_stmt 1 discriminator 3 view .LVU1519
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4966              		.loc 1 2197 34 discriminator 3 view .LVU1520
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4967              		.loc 1 2197 23 discriminator 3 view .LVU1521
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4968              		.loc 1 2197 4 is_stmt 0 discriminator 3 view .LVU1522
ARM GAS  /tmp/cc9o0abE.s 			page 176


 4969 0184 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 4970              	.LVL553:
2197:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 4971              		.loc 1 2197 4 discriminator 3 view .LVU1523
 4972 0188 BCF1390F 		cmp	ip, #57
 4973 018c FAD0     		beq	.L488
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4974              		.loc 1 2198 4 is_stmt 1 view .LVU1524
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 4975              		.loc 1 2198 7 is_stmt 0 view .LVU1525
 4976 018e 8342     		cmp	r3, r0
 4977 0190 00F01681 		beq	.L676
 4978              	.LVL554:
 4979              	.L566:
2207:src/display.c **** 	      *p = '0';
 4980              		.loc 1 2207 12 is_stmt 1 view .LVU1526
2207:src/display.c **** 	      *p = '0';
 4981              		.loc 1 2207 13 is_stmt 0 view .LVU1527
 4982 0194 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2207:src/display.c **** 	      *p = '0';
 4983              		.loc 1 2207 12 view .LVU1528
 4984 0198 BCF1390F 		cmp	ip, #57
 4985 019c 03F1FF30 		add	r0, r3, #-1
 4986              	.LVL555:
2207:src/display.c **** 	      *p = '0';
 4987              		.loc 1 2207 12 view .LVU1529
 4988 01a0 08D1     		bne	.L491
2208:src/display.c **** 	    (*p)++;
 4989              		.loc 1 2208 11 view .LVU1530
 4990 01a2 4FF0300E 		mov	lr, #48
 4991              	.L490:
2208:src/display.c **** 	    (*p)++;
 4992              		.loc 1 2208 8 is_stmt 1 view .LVU1531
2208:src/display.c **** 	    (*p)++;
 4993              		.loc 1 2208 11 is_stmt 0 view .LVU1532
 4994 01a6 80F800E0 		strb	lr, [r0]
2207:src/display.c **** 	      *p = '0';
 4995              		.loc 1 2207 12 is_stmt 1 view .LVU1533
 4996              	.LVL556:
2207:src/display.c **** 	      *p = '0';
 4997              		.loc 1 2207 13 is_stmt 0 view .LVU1534
 4998 01aa 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 4999              	.LVL557:
2207:src/display.c **** 	      *p = '0';
 5000              		.loc 1 2207 12 view .LVU1535
 5001 01ae BCF1390F 		cmp	ip, #57
 5002 01b2 F8D0     		beq	.L490
 5003              	.L491:
2209:src/display.c **** 	  }
 5004              		.loc 1 2209 6 is_stmt 1 view .LVU1536
2209:src/display.c **** 	  }
 5005              		.loc 1 2209 10 is_stmt 0 view .LVU1537
 5006 01b4 0CF1010C 		add	ip, ip, #1
 5007 01b8 80F800C0 		strb	ip, [r0]
 5008              	.LVL558:
 5009              	.L664:
2209:src/display.c **** 	  }
ARM GAS  /tmp/cc9o0abE.s 			page 177


 5010              		.loc 1 2209 10 view .LVU1538
 5011 01bc 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
 5012              	.L486:
2214:src/display.c **** 
 5013              		.loc 1 2214 2 is_stmt 1 view .LVU1539
 5014              	.LVL559:
2214:src/display.c **** 
 5015              		.loc 1 2214 45 view .LVU1540
2214:src/display.c **** 
 5016              		.loc 1 2214 2 is_stmt 0 view .LVU1541
 5017 01c0 28B1     		cbz	r0, .L497
 5018              	.LVL560:
 5019              	.L565:
2214:src/display.c **** 
 5020              		.loc 1 2214 62 view .LVU1542
 5021 01c2 3020     		movs	r0, #48
 5022              	.L498:
2214:src/display.c **** 
 5023              		.loc 1 2214 68 is_stmt 1 discriminator 3 view .LVU1543
2214:src/display.c **** 
 5024              		.loc 1 2214 57 discriminator 3 view .LVU1544
 5025              	.LVL561:
2214:src/display.c **** 
 5026              		.loc 1 2214 62 is_stmt 0 discriminator 3 view .LVU1545
 5027 01c4 03F8010B 		strb	r0, [r3], #1
 5028              	.LVL562:
2214:src/display.c **** 
 5029              		.loc 1 2214 45 is_stmt 1 discriminator 3 view .LVU1546
2214:src/display.c **** 
 5030              		.loc 1 2214 2 is_stmt 0 discriminator 3 view .LVU1547
 5031 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5032 01ca 0029     		cmp	r1, #0
 5033 01cc FAD1     		bne	.L498
 5034              	.L497:
2216:src/display.c **** 	switch (mode) {
 5035              		.loc 1 2216 2 is_stmt 1 view .LVU1548
 5036              	.LVL563:
2217:src/display.c **** 	default:
 5037              		.loc 1 2217 2 view .LVU1549
 5038 01ce 022D     		cmp	r5, #2
 5039 01d0 00F07681 		beq	.L535
 5040 01d4 032D     		cmp	r5, #3
 5041 01d6 00F01881 		beq	.L500
 5042 01da 012D     		cmp	r5, #1
 5043 01dc 00F0F081 		beq	.L501
2220:src/display.c **** 	  if (count != *display_digits)
 5044              		.loc 1 2220 4 view .LVU1550
 5045              	.LVL564:
2220:src/display.c **** 	  if (count != *display_digits)
 5046              		.loc 1 2220 34 view .LVU1551
2220:src/display.c **** 	  if (count != *display_digits)
 5047              		.loc 1 2220 42 is_stmt 0 view .LVU1552
 5048 01e0 0298     		ldr	r0, [sp, #8]
 5049 01e2 26AB     		add	r3, sp, #152
 5050 01e4 0344     		add	r3, r3, r0
2220:src/display.c **** 	  if (count != *display_digits)
 5051              		.loc 1 2220 4 view .LVU1553
ARM GAS  /tmp/cc9o0abE.s 			page 178


 5052 01e6 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5053 01ea 302B     		cmp	r3, #48
 5054 01ec 40F09883 		bne	.L581
 5055 01f0 411E     		subs	r1, r0, #1
 5056 01f2 5944     		add	r1, r1, fp
 5057              	.LVL565:
 5058              	.L505:
2220:src/display.c **** 	  if (count != *display_digits)
 5059              		.loc 1 2220 66 is_stmt 1 discriminator 3 view .LVU1554
2220:src/display.c **** 	  if (count != *display_digits)
 5060              		.loc 1 2220 58 discriminator 3 view .LVU1555
2220:src/display.c **** 	  if (count != *display_digits)
 5061              		.loc 1 2220 42 is_stmt 0 discriminator 3 view .LVU1556
 5062 01f4 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2220:src/display.c **** 	  if (count != *display_digits)
 5063              		.loc 1 2220 4 discriminator 3 view .LVU1557
 5064 01f8 302D     		cmp	r5, #48
 5065 01fa 0346     		mov	r3, r0
2220:src/display.c **** 	  if (count != *display_digits)
 5066              		.loc 1 2220 63 discriminator 3 view .LVU1558
 5067 01fc 00F1FF30 		add	r0, r0, #-1
 5068              	.LVL566:
2220:src/display.c **** 	  if (count != *display_digits)
 5069              		.loc 1 2220 34 is_stmt 1 discriminator 3 view .LVU1559
2220:src/display.c **** 	  if (count != *display_digits)
 5070              		.loc 1 2220 4 is_stmt 0 discriminator 3 view .LVU1560
 5071 0200 F8D0     		beq	.L505
2221:src/display.c **** 	    count++;
 5072              		.loc 1 2221 4 is_stmt 1 view .LVU1561
2221:src/display.c **** 	    count++;
 5073              		.loc 1 2221 7 is_stmt 0 view .LVU1562
 5074 0202 0299     		ldr	r1, [sp, #8]
 5075 0204 8842     		cmp	r0, r1
 5076 0206 08BF     		it	eq
 5077 0208 0B46     		moveq	r3, r1
 5078              	.LVL567:
 5079              	.L504:
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5080              		.loc 1 2224 4 is_stmt 1 view .LVU1563
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5081              		.loc 1 2224 7 is_stmt 0 view .LVU1564
 5082 020a 0299     		ldr	r1, [sp, #8]
 5083 020c 8E42     		cmp	r6, r1
 5084 020e 80F20E81 		bge	.L506
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5085              		.loc 1 2224 47 discriminator 1 view .LVU1565
 5086 0212 591A     		subs	r1, r3, r1
2224:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5087              		.loc 1 2224 31 discriminator 1 view .LVU1566
 5088 0214 B142     		cmp	r1, r6
 5089 0216 00F30A81 		bgt	.L506
2249:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5090              		.loc 1 2249 11 is_stmt 1 view .LVU1567
2249:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5091              		.loc 1 2249 14 is_stmt 0 view .LVU1568
 5092 021a 002E     		cmp	r6, #0
 5093 021c C0F29D83 		blt	.L515
ARM GAS  /tmp/cc9o0abE.s 			page 179


 5094 0220 721C     		adds	r2, r6, #1
2251:src/display.c **** 		*obp++ = ',';
 5095              		.loc 1 2251 31 view .LVU1569
 5096 0222 DFF84CE1 		ldr	lr, .L689+12
 5097 0226 0592     		str	r2, [sp, #20]
 5098 0228 0BEB0200 		add	r0, fp, r2
2216:src/display.c **** 	switch (mode) {
 5099              		.loc 1 2216 4 view .LVU1570
 5100 022c DC46     		mov	ip, fp
2021:src/display.c **** 	int odig = 0;
 5101              		.loc 1 2021 15 view .LVU1571
 5102 022e 3946     		mov	r1, r7
 5103 0230 05E0     		b	.L516
 5104              	.LVL568:
 5105              	.L519:
2252:src/display.c **** 	      *obp++ = *p++;
 5106              		.loc 1 2252 3 is_stmt 1 view .LVU1572
2251:src/display.c **** 		*obp++ = ',';
 5107              		.loc 1 2251 18 is_stmt 0 view .LVU1573
 5108 0232 022D     		cmp	r5, #2
2252:src/display.c **** 	      *obp++ = *p++;
 5109              		.loc 1 2252 10 view .LVU1574
 5110 0234 05BF     		ittet	eq
 5111 0236 2C22     		moveq	r2, #44
 5112 0238 4A70     		strbeq	r2, [r1, #1]
2253:src/display.c **** 	      odig++;
 5113              		.loc 1 2253 12 view .LVU1575
 5114 023a 0131     		addne	r1, r1, #1
 5115              	.LVL569:
2252:src/display.c **** 	      *obp++ = *p++;
 5116              		.loc 1 2252 7 view .LVU1576
 5117 023c 0231     		addeq	r1, r1, #2
 5118              	.LVL570:
 5119              	.L516:
2253:src/display.c **** 	      odig++;
 5120              		.loc 1 2253 8 is_stmt 1 discriminator 2 view .LVU1577
2253:src/display.c **** 	      odig++;
 5121              		.loc 1 2253 15 is_stmt 0 discriminator 2 view .LVU1578
 5122 023e 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5123              	.LVL571:
2251:src/display.c **** 		*obp++ = ',';
 5124              		.loc 1 2251 8 is_stmt 1 discriminator 2 view .LVU1579
2253:src/display.c **** 	      odig++;
 5125              		.loc 1 2253 15 is_stmt 0 discriminator 2 view .LVU1580
 5126 0242 0A70     		strb	r2, [r1]
2254:src/display.c **** 	    }
 5127              		.loc 1 2254 8 is_stmt 1 discriminator 2 view .LVU1581
 5128              	.LVL572:
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5129              		.loc 1 2250 23 discriminator 2 view .LVU1582
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5130              		.loc 1 2250 15 discriminator 2 view .LVU1583
2251:src/display.c **** 		*obp++ = ',';
 5131              		.loc 1 2251 31 is_stmt 0 discriminator 2 view .LVU1584
 5132 0244 ABEB0C02 		sub	r2, fp, ip
 5133 0248 3244     		add	r2, r2, r6
 5134 024a 8EFB0285 		smull	r8, r5, lr, r2
ARM GAS  /tmp/cc9o0abE.s 			page 180


 5135 024e A5EBE275 		sub	r5, r5, r2, asr #31
 5136 0252 05EB4505 		add	r5, r5, r5, lsl #1
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5137              		.loc 1 2250 6 discriminator 2 view .LVU1585
 5138 0256 6045     		cmp	r0, ip
2251:src/display.c **** 		*obp++ = ',';
 5139              		.loc 1 2251 31 discriminator 2 view .LVU1586
 5140 0258 A2EB0505 		sub	r5, r2, r5
2250:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5141              		.loc 1 2250 6 discriminator 2 view .LVU1587
 5142 025c E9D1     		bne	.L519
 5143 025e 059D     		ldr	r5, [sp, #20]
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5144              		.loc 1 2256 6 is_stmt 1 view .LVU1588
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5145              		.loc 1 2256 13 is_stmt 0 view .LVU1589
 5146 0260 2E22     		movs	r2, #46
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5147              		.loc 1 2257 9 view .LVU1590
 5148 0262 AB42     		cmp	r3, r5
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5149              		.loc 1 2256 13 view .LVU1591
 5150 0264 4A70     		strb	r2, [r1, #1]
2256:src/display.c **** 	    if (count > (exp + 1)) {
 5151              		.loc 1 2256 10 view .LVU1592
 5152 0266 01F10208 		add	r8, r1, #2
 5153              	.LVL573:
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5154              		.loc 1 2257 6 is_stmt 1 view .LVU1593
2257:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5155              		.loc 1 2257 9 is_stmt 0 view .LVU1594
 5156 026a 40F34B81 		ble	.L513
 5157 026e 9A1B     		subs	r2, r3, r6
 5158 0270 0A44     		add	r2, r2, r1
 5159 0272 0131     		adds	r1, r1, #1
 5160              	.LVL574:
 5161              	.L520:
2259:src/display.c **** 		odig++;
 5162              		.loc 1 2259 3 is_stmt 1 discriminator 3 view .LVU1595
2259:src/display.c **** 		odig++;
 5163              		.loc 1 2259 10 is_stmt 0 discriminator 3 view .LVU1596
 5164 0274 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5165              	.LVL575:
2259:src/display.c **** 		odig++;
 5166              		.loc 1 2259 10 discriminator 3 view .LVU1597
 5167 0278 01F8015F 		strb	r5, [r1, #1]!
2260:src/display.c **** 	      }
 5168              		.loc 1 2260 3 is_stmt 1 discriminator 3 view .LVU1598
2258:src/display.c **** 		*obp++ = *p++;
 5169              		.loc 1 2258 31 discriminator 3 view .LVU1599
2258:src/display.c **** 		*obp++ = *p++;
 5170              		.loc 1 2258 22 discriminator 3 view .LVU1600
2258:src/display.c **** 		*obp++ = *p++;
 5171              		.loc 1 2258 8 is_stmt 0 discriminator 3 view .LVU1601
 5172 027c 9142     		cmp	r1, r2
 5173 027e F9D1     		bne	.L520
 5174 0280 F243     		mvns	r2, r6
ARM GAS  /tmp/cc9o0abE.s 			page 181


 5175 0282 1A44     		add	r2, r2, r3
 5176 0284 9044     		add	r8, r8, r2
 5177              	.LVL576:
2260:src/display.c **** 	      }
 5178              		.loc 1 2260 7 view .LVU1602
 5179 0286 1D46     		mov	r5, r3
 5180 0288 3CE1     		b	.L513
 5181              	.LVL577:
 5182              	.L585:
2260:src/display.c **** 	      }
 5183              		.loc 1 2260 7 view .LVU1603
 5184 028a B846     		mov	r8, r7
 5185              	.LVL578:
 5186              	.L542:
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5187              		.loc 1 2352 2 is_stmt 1 view .LVU1604
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5188              		.loc 1 2352 5 is_stmt 0 view .LVU1605
 5189 028c 029B     		ldr	r3, [sp, #8]
 5190 028e 0A2B     		cmp	r3, #10
 5191 0290 02DD     		ble	.L545
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5192              		.loc 1 2352 50 discriminator 1 view .LVU1606
 5193 0292 002C     		cmp	r4, #0
 5194 0294 00F00E82 		beq	.L677
 5195              	.L545:
2358:src/display.c **** 	if (odig > *display_digits)
 5196              		.loc 1 2358 2 is_stmt 1 view .LVU1607
 5197 0298 029B     		ldr	r3, [sp, #8]
 5198 029a 9D42     		cmp	r5, r3
 5199 029c A8BF     		it	ge
 5200 029e 1D46     		movge	r5, r3
 5201              	.LVL579:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5202              		.loc 1 2361 23 is_stmt 0 view .LVU1608
 5203 02a0 A3EB050A 		sub	r10, r3, r5
 5204              	.LVL580:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5205              		.loc 1 2361 23 view .LVU1609
 5206 02a4 1A46     		mov	r2, r3
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5207              		.loc 1 2361 4 view .LVU1610
 5208 02a6 0AEBCA0A 		add	r10, r10, r10, lsl #3
2358:src/display.c **** 	if (odig > *display_digits)
 5209              		.loc 1 2358 7 view .LVU1611
 5210 02aa 0023     		movs	r3, #0
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5211              		.loc 1 2362 5 view .LVU1612
 5212 02ac 9A45     		cmp	r10, r3
2358:src/display.c **** 	if (odig > *display_digits)
 5213              		.loc 1 2358 7 view .LVU1613
 5214 02ae 88F80030 		strb	r3, [r8]
2359:src/display.c **** 	  odig = *display_digits;
 5215              		.loc 1 2359 2 is_stmt 1 view .LVU1614
 5216              	.LVL581:
2361:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5217              		.loc 1 2361 2 view .LVU1615
ARM GAS  /tmp/cc9o0abE.s 			page 182


2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5218              		.loc 1 2362 2 view .LVU1616
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5219              		.loc 1 2362 5 is_stmt 0 view .LVU1617
 5220 02b2 04DD     		ble	.L546
2362:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5221              		.loc 1 2362 35 discriminator 1 view .LVU1618
 5222 02b4 16F57A7F 		cmn	r6, #1000
2363:src/display.c **** 	if (negative) {
 5223              		.loc 1 2363 4 is_stmt 1 discriminator 1 view .LVU1619
2363:src/display.c **** 	if (negative) {
 5224              		.loc 1 2363 6 is_stmt 0 discriminator 1 view .LVU1620
 5225 02b8 D8BF     		it	le
 5226 02ba AAF1090A 		suble	r10, r10, #9
 5227              	.LVL582:
 5228              	.L546:
2364:src/display.c **** 	  if (res) *res++ = '-';
 5229              		.loc 1 2364 2 is_stmt 1 view .LVU1621
2364:src/display.c **** 	  if (res) *res++ = '-';
 5230              		.loc 1 2364 5 is_stmt 0 view .LVU1622
 5231 02be 039B     		ldr	r3, [sp, #12]
 5232 02c0 2BB1     		cbz	r3, .L547
2365:src/display.c **** 	  else {
 5233              		.loc 1 2365 4 is_stmt 1 view .LVU1623
2365:src/display.c **** 	  else {
 5234              		.loc 1 2365 7 is_stmt 0 view .LVU1624
 5235 02c2 002C     		cmp	r4, #0
 5236 02c4 00F00582 		beq	.L548
2365:src/display.c **** 	  else {
 5237              		.loc 1 2365 13 is_stmt 1 discriminator 1 view .LVU1625
 5238              	.LVL583:
2365:src/display.c **** 	  else {
 5239              		.loc 1 2365 20 is_stmt 0 discriminator 1 view .LVU1626
 5240 02c8 2D23     		movs	r3, #45
 5241 02ca 04F8013B 		strb	r3, [r4], #1
 5242              	.LVL584:
 5243              	.L547:
2373:src/display.c **** 	  if (c == '.') {
 5244              		.loc 1 2373 12 is_stmt 1 discriminator 1 view .LVU1627
2373:src/display.c **** 	  if (c == '.') {
 5245              		.loc 1 2373 18 is_stmt 0 discriminator 1 view .LVU1628
 5246 02ce 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 5247              	.LVL585:
2373:src/display.c **** 	  if (c == '.') {
 5248              		.loc 1 2373 2 discriminator 1 view .LVU1629
 5249 02d2 C1B1     		cbz	r1, .L549
2373:src/display.c **** 	  if (c == '.') {
 5250              		.loc 1 2373 31 view .LVU1630
 5251 02d4 BAF16B0F 		cmp	r10, #107
 5252 02d8 15DC     		bgt	.L549
 5253              	.LVL586:
 5254              	.L550:
2377:src/display.c **** 	  } else {
 5255              		.loc 1 2377 12 view .LVU1631
 5256 02da 234B     		ldr	r3, .L689+4
2375:src/display.c **** 	  } else if (c == ',') {
 5257              		.loc 1 2375 12 view .LVU1632
ARM GAS  /tmp/cc9o0abE.s 			page 183


 5258 02dc DFF894B0 		ldr	fp, .L689+16
 5259              	.LVL587:
 5260              	.L561:
2374:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5261              		.loc 1 2374 4 is_stmt 1 view .LVU1633
2374:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5262              		.loc 1 2374 7 is_stmt 0 view .LVU1634
 5263 02e0 2E29     		cmp	r1, #46
 5264 02e2 00F02481 		beq	.L678
2376:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5265              		.loc 1 2376 11 is_stmt 1 view .LVU1635
2376:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5266              		.loc 1 2376 14 is_stmt 0 view .LVU1636
 5267 02e6 2C29     		cmp	r1, #44
 5268 02e8 00F04B81 		beq	.L679
2379:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5269              		.loc 1 2379 6 is_stmt 1 view .LVU1637
 5270              	.LVL588:
 5271              	.LBB370:
 5272              	.LBI370:
 415:src/display.c ****   if (res) *res++ = ch;
 5273              		.loc 1 415 14 view .LVU1638
 5274              	.LBB371:
 416:src/display.c ****   else	set_dig(base, ch);
 5275              		.loc 1 416 3 view .LVU1639
 416:src/display.c ****   else	set_dig(base, ch);
 5276              		.loc 1 416 6 is_stmt 0 view .LVU1640
 5277 02ec 002C     		cmp	r4, #0
 5278 02ee 00F05D81 		beq	.L559
 416:src/display.c ****   else	set_dig(base, ch);
 5279              		.loc 1 416 12 is_stmt 1 view .LVU1641
 5280              	.LVL589:
 416:src/display.c ****   else	set_dig(base, ch);
 5281              		.loc 1 416 19 is_stmt 0 view .LVU1642
 5282 02f2 04F8011B 		strb	r1, [r4], #1
 5283              	.LVL590:
 5284              	.L560:
 418:src/display.c **** }
 5285              		.loc 1 418 3 is_stmt 1 view .LVU1643
 418:src/display.c **** }
 5286              		.loc 1 418 3 is_stmt 0 view .LVU1644
 5287              	.LBE371:
 5288              	.LBE370:
2380:src/display.c **** 	  }
 5289              		.loc 1 2380 6 is_stmt 1 view .LVU1645
2373:src/display.c **** 	  if (c == '.') {
 5290              		.loc 1 2373 18 is_stmt 0 view .LVU1646
 5291 02f6 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5292              	.LVL591:
2380:src/display.c **** 	  }
 5293              		.loc 1 2380 8 view .LVU1647
 5294 02fa 0AF1090A 		add	r10, r10, #9
 5295              	.LVL592:
2373:src/display.c **** 	  if (c == '.') {
 5296              		.loc 1 2373 53 is_stmt 1 view .LVU1648
2373:src/display.c **** 	  if (c == '.') {
 5297              		.loc 1 2373 12 view .LVU1649
ARM GAS  /tmp/cc9o0abE.s 			page 184


2373:src/display.c **** 	  if (c == '.') {
 5298              		.loc 1 2373 2 is_stmt 0 view .LVU1650
 5299 02fe 11B1     		cbz	r1, .L549
2373:src/display.c **** 	  if (c == '.') {
 5300              		.loc 1 2373 31 discriminator 3 view .LVU1651
 5301 0300 BAF16B0F 		cmp	r10, #107
 5302 0304 ECDD     		ble	.L561
 5303              	.LVL593:
 5304              	.L549:
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5305              		.loc 1 2393 2 is_stmt 1 view .LVU1652
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5306              		.loc 1 2393 5 is_stmt 0 view .LVU1653
 5307 0306 B9F1000F 		cmp	r9, #0
 5308 030a 40F02381 		bne	.L680
 5309              	.L562:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5310              		.loc 1 2396 2 is_stmt 1 view .LVU1654
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5311              		.loc 1 2396 5 is_stmt 0 view .LVU1655
 5312 030e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5313 0312 2E2B     		cmp	r3, #46
 5314 0314 00F02881 		beq	.L681
 5315              	.LVL594:
 5316              	.L563:
2398:src/display.c ****       }
 5317              		.loc 1 2398 2 is_stmt 1 view .LVU1656
2398:src/display.c ****       }
 5318              		.loc 1 2398 18 is_stmt 0 view .LVU1657
 5319 0318 019B     		ldr	r3, [sp, #4]
 5320 031a 1D60     		str	r5, [r3]
 5321              	.LVL595:
 5322              	.L437:
2399:src/display.c **** 
 5323              		.loc 1 2399 7 view .LVU1658
 5324 031c 27B0     		add	sp, sp, #156
 5325              		.cfi_remember_state
 5326              		.cfi_def_cfa_offset 36
 5327              		@ sp needed
 5328 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5329              	.LVL596:
 5330              	.L445:
 5331              		.cfi_restore_state
2098:src/display.c **** 
 5332              		.loc 1 2098 4 is_stmt 1 view .LVU1659
 5333 0322 3946     		mov	r1, r7
 5334 0324 5046     		mov	r0, r10
 5335 0326 FFF7FEFF 		bl	decNumberToString
 5336              	.LVL597:
 5337 032a 9BE6     		b	.L447
 5338              	.LVL598:
 5339              	.L438:
2056:src/display.c **** 	    if (State2.hms) {
 5340              		.loc 1 2056 4 view .LVU1660
2056:src/display.c **** 	    if (State2.hms) {
 5341              		.loc 1 2056 25 is_stmt 0 view .LVU1661
 5342 032c 0D4B     		ldr	r3, .L689
ARM GAS  /tmp/cc9o0abE.s 			page 185


 5343 032e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
2056:src/display.c **** 	    if (State2.hms) {
 5344              		.loc 1 2056 22 view .LVU1662
 5345 0330 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
2056:src/display.c **** 	    if (State2.hms) {
 5346              		.loc 1 2056 25 view .LVU1663
 5347 0332 01F00201 		and	r1, r1, #2
2056:src/display.c **** 	    if (State2.hms) {
 5348              		.loc 1 2056 22 view .LVU1664
 5349 0336 1143     		orrs	r1, r1, r2
 5350 0338 7FF471AE 		bne	.L441
2057:src/display.c **** 	      set_x_hms(z, res);
 5351              		.loc 1 2057 6 is_stmt 1 view .LVU1665
2057:src/display.c **** 	      set_x_hms(z, res);
 5352              		.loc 1 2057 10 is_stmt 0 view .LVU1666
 5353 033c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
2057:src/display.c **** 	      set_x_hms(z, res);
 5354              		.loc 1 2057 9 view .LVU1667
 5355 033e DE07     		lsls	r6, r3, #31
 5356 0340 00F1EA82 		bmi	.L682
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5357              		.loc 1 2061 11 is_stmt 1 view .LVU1668
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5358              		.loc 1 2061 15 is_stmt 0 view .LVU1669
 5359 0344 094B     		ldr	r3, .L689+8
 5360 0346 1B68     		ldr	r3, [r3]
 5361 0348 93F8E63F 		ldrb	r3, [r3, #4070]	@ zero_extendqisi2
2061:src/display.c **** 	      if (set_x_fract(z, res))
 5362              		.loc 1 2061 14 view .LVU1670
 5363 034c 9806     		lsls	r0, r3, #26
 5364 034e 7FF566AE 		bpl	.L441
2062:src/display.c **** 		return;
 5365              		.loc 1 2062 8 is_stmt 1 view .LVU1671
2062:src/display.c **** 		return;
 5366              		.loc 1 2062 12 is_stmt 0 view .LVU1672
 5367 0352 2146     		mov	r1, r4
 5368 0354 5046     		mov	r0, r10
 5369 0356 FFF7FEFF 		bl	set_x_fract
 5370              	.LVL599:
2062:src/display.c **** 		return;
 5371              		.loc 1 2062 11 view .LVU1673
 5372 035a 0028     		cmp	r0, #0
 5373 035c 3FF45FAE 		beq	.L441
 5374 0360 DCE7     		b	.L437
 5375              	.L690:
 5376 0362 00BF     		.align	2
 5377              	.L689:
 5378 0364 00000000 		.word	StateWhileOn
 5379 0368 00000000 		.word	.LANCHOR0
 5380 036c 00000000 		.word	main_ram
 5381 0370 56555555 		.word	1431655766
 5382 0374 00000000 		.word	.LANCHOR1
 5383              	.LVL600:
 5384              	.L669:
2106:src/display.c **** 	  //  ALL mode: fill the display
 5385              		.loc 1 2106 38 discriminator 1 view .LVU1674
 5386 0378 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc9o0abE.s 			page 186


 5387 037a 1A68     		ldr	r2, [r3]
2106:src/display.c **** 	  //  ALL mode: fill the display
 5388              		.loc 1 2106 35 discriminator 1 view .LVU1675
 5389 037c 089B     		ldr	r3, [sp, #32]
2106:src/display.c **** 	  //  ALL mode: fill the display
 5390              		.loc 1 2106 23 discriminator 1 view .LVU1676
 5391 037e 9A42     		cmp	r2, r3
 5392 0380 11DD     		ble	.L460
2110:src/display.c **** 
 5393              		.loc 1 2110 4 is_stmt 1 view .LVU1677
2112:src/display.c **** 	  int orig_mode = mode;
 5394              		.loc 1 2112 23 is_stmt 0 view .LVU1678
 5395 0382 042D     		cmp	r5, #4
2110:src/display.c **** 
 5396              		.loc 1 2110 7 view .LVU1679
 5397 0384 0793     		str	r3, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5398              		.loc 1 2112 2 is_stmt 1 view .LVU1680
2112:src/display.c **** 	  int orig_mode = mode;
 5399              		.loc 1 2112 23 is_stmt 0 view .LVU1681
 5400 0386 12D0     		beq	.L461
 5401              	.L683:
2112:src/display.c **** 	  int orig_mode = mode;
 5402              		.loc 1 2112 43 discriminator 2 view .LVU1682
 5403 0388 052D     		cmp	r5, #5
 5404 038a 00F08A81 		beq	.L462
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5405              		.loc 1 2042 6 view .LVU1683
 5406 038e 0023     		movs	r3, #0
 5407 0390 0493     		str	r3, [sp, #16]
 5408 0392 80E6     		b	.L568
 5409              	.LVL601:
 5410              	.L670:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5411              		.loc 1 2137 17 is_stmt 1 discriminator 1 view .LVU1684
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5412              		.loc 1 2137 21 is_stmt 0 discriminator 1 view .LVU1685
 5413 0394 4421     		movs	r1, #68
 5414 0396 3846     		mov	r0, r7
 5415              	.LVL602:
2137:src/display.c **** 	if (q == NULL) exp = 0;
 5416              		.loc 1 2137 21 discriminator 1 view .LVU1686
 5417 0398 FFF7FEFF 		bl	find_char
 5418              	.LVL603:
2138:src/display.c **** 	else {
 5419              		.loc 1 2138 2 is_stmt 1 discriminator 1 view .LVU1687
2138:src/display.c **** 	else {
 5420              		.loc 1 2138 5 is_stmt 0 discriminator 1 view .LVU1688
 5421 039c 0646     		mov	r6, r0
 5422 039e 0028     		cmp	r0, #0
 5423 03a0 3FF493AE 		beq	.L464
 5424 03a4 89E6     		b	.L463
 5425              	.LVL604:
 5426              	.L460:
2108:src/display.c **** 	else
 5427              		.loc 1 2108 4 is_stmt 1 view .LVU1689
2108:src/display.c **** 	else
ARM GAS  /tmp/cc9o0abE.s 			page 187


 5428              		.loc 1 2108 25 is_stmt 0 view .LVU1690
 5429 03a6 013A     		subs	r2, r2, #1
2112:src/display.c **** 	  int orig_mode = mode;
 5430              		.loc 1 2112 23 view .LVU1691
 5431 03a8 042D     		cmp	r5, #4
2108:src/display.c **** 	else
 5432              		.loc 1 2108 7 view .LVU1692
 5433 03aa 0792     		str	r2, [sp, #28]
2112:src/display.c **** 	  int orig_mode = mode;
 5434              		.loc 1 2112 2 is_stmt 1 view .LVU1693
2112:src/display.c **** 	  int orig_mode = mode;
 5435              		.loc 1 2112 23 is_stmt 0 view .LVU1694
 5436 03ac ECD1     		bne	.L683
 5437              	.L461:
 5438              	.LBB373:
2113:src/display.c **** 
 5439              		.loc 1 2113 4 is_stmt 1 view .LVU1695
 5440              	.LVL605:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5441              		.loc 1 2115 4 view .LVU1696
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5442              		.loc 1 2115 11 is_stmt 0 view .LVU1697
 5443 03ae 2A46     		mov	r2, r5
 5444 03b0 07A9     		add	r1, sp, #28
 5445 03b2 5046     		mov	r0, r10
 5446 03b4 FFF7FEFF 		bl	std_round_fix
 5447              	.LVL606:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5448              		.loc 1 2118 16 view .LVU1698
 5449 03b8 0123     		movs	r3, #1
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5450              		.loc 1 2115 11 view .LVU1699
 5451 03ba 0546     		mov	r5, r0
 5452              	.LVL607:
2116:src/display.c **** 	    // allow zeros to be trimmed
 5453              		.loc 1 2116 4 is_stmt 1 view .LVU1700
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5454              		.loc 1 2118 6 view .LVU1701
2119:src/display.c **** 	    dd = *display_digits - 1;
 5455              		.loc 1 2119 4 view .LVU1702
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5456              		.loc 1 2118 16 is_stmt 0 view .LVU1703
 5457 03bc 0493     		str	r3, [sp, #16]
 5458 03be 6AE6     		b	.L568
 5459              	.LVL608:
 5460              	.L676:
2118:src/display.c **** 	  if (orig_mode == MODE_STD)
 5461              		.loc 1 2118 16 view .LVU1704
 5462              	.LBE373:
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5463              		.loc 1 2198 7 view .LVU1705
 5464 03c0 5846     		mov	r0, fp
 5465              	.LVL609:
2199:src/display.c **** 	    mantissa[0] = '1';
 5466              		.loc 1 2199 41 view .LVU1706
 5467 03c2 4FF03008 		mov	r8, #48
 5468              	.L492:
ARM GAS  /tmp/cc9o0abE.s 			page 188


 5469              	.LVL610:
2199:src/display.c **** 	    mantissa[0] = '1';
 5470              		.loc 1 2199 47 is_stmt 1 discriminator 3 view .LVU1707
2199:src/display.c **** 	    mantissa[0] = '1';
 5471              		.loc 1 2199 36 discriminator 3 view .LVU1708
2199:src/display.c **** 	    mantissa[0] = '1';
 5472              		.loc 1 2199 41 is_stmt 0 discriminator 3 view .LVU1709
 5473 03c6 00F8018B 		strb	r8, [r0], #1
 5474              	.LVL611:
2199:src/display.c **** 	    mantissa[0] = '1';
 5475              		.loc 1 2199 25 is_stmt 1 discriminator 3 view .LVU1710
2199:src/display.c **** 	    mantissa[0] = '1';
 5476              		.loc 1 2199 6 is_stmt 0 discriminator 3 view .LVU1711
 5477 03ca 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5478 03ce BCF1390F 		cmp	ip, #57
 5479 03d2 F8D0     		beq	.L492
 5480              	.LVL612:
 5481              	.L567:
2200:src/display.c **** 	    exp++;
 5482              		.loc 1 2200 6 is_stmt 1 view .LVU1712
2200:src/display.c **** 	    exp++;
 5483              		.loc 1 2200 18 is_stmt 0 view .LVU1713
 5484 03d4 3120     		movs	r0, #49
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5485              		.loc 1 2202 9 view .LVU1714
 5486 03d6 012D     		cmp	r5, #1
2201:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5487              		.loc 1 2201 9 view .LVU1715
 5488 03d8 06F10106 		add	r6, r6, #1
 5489              	.LVL613:
2200:src/display.c **** 	    exp++;
 5490              		.loc 1 2200 18 view .LVU1716
 5491 03dc 8DF85800 		strb	r0, [sp, #88]
2201:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5492              		.loc 1 2201 6 is_stmt 1 view .LVU1717
 5493              	.LVL614:
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5494              		.loc 1 2202 6 view .LVU1718
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5495              		.loc 1 2202 9 is_stmt 0 view .LVU1719
 5496 03e0 7FF4ECAE 		bne	.L664
2202:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5497              		.loc 1 2202 27 discriminator 1 view .LVU1720
 5498 03e4 0298     		ldr	r0, [sp, #8]
 5499 03e6 8642     		cmp	r6, r0
 5500 03e8 C0F2E580 		blt	.L494
2203:src/display.c **** 	      extra_digits = 0;
 5501              		.loc 1 2203 8 is_stmt 1 view .LVU1721
2203:src/display.c **** 	      extra_digits = 0;
 5502              		.loc 1 2203 28 is_stmt 0 view .LVU1722
 5503 03ec BF4B     		ldr	r3, .L691
 5504              	.LVL615:
2203:src/display.c **** 	      extra_digits = 0;
 5505              		.loc 1 2203 28 view .LVU1723
 5506 03ee 1B68     		ldr	r3, [r3]
 5507 03f0 93F8E73F 		ldrb	r3, [r3, #4071]	@ zero_extendqisi2
2203:src/display.c **** 	      extra_digits = 0;
ARM GAS  /tmp/cc9o0abE.s 			page 189


 5508              		.loc 1 2203 37 view .LVU1724
 5509 03f4 D906     		lsls	r1, r3, #27
 5510              	.LVL616:
2203:src/display.c **** 	      extra_digits = 0;
 5511              		.loc 1 2203 37 view .LVU1725
 5512 03f6 40F1D582 		bpl	.L684
 5513              	.LVL617:
2214:src/display.c **** 
 5514              		.loc 1 2214 2 is_stmt 1 view .LVU1726
 5515 03fa 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2214:src/display.c **** 
 5516              		.loc 1 2214 9 is_stmt 0 view .LVU1727
 5517 03fe 0BEB0E03 		add	r3, fp, lr
 5518              	.LVL618:
2214:src/display.c **** 
 5519              		.loc 1 2214 45 is_stmt 1 view .LVU1728
2203:src/display.c **** 	      extra_digits = 0;
 5520              		.loc 1 2203 37 is_stmt 0 view .LVU1729
 5521 0402 0325     		movs	r5, #3
2214:src/display.c **** 
 5522              		.loc 1 2214 2 view .LVU1730
 5523 0404 0029     		cmp	r1, #0
 5524 0406 7FF4DCAE 		bne	.L565
 5525              	.LVL619:
 5526              	.L500:
2316:src/display.c **** 	  case -1:
 5527              		.loc 1 2316 4 is_stmt 1 view .LVU1731
2316:src/display.c **** 	  case -1:
 5528              		.loc 1 2316 16 is_stmt 0 view .LVU1732
 5529 040a B94B     		ldr	r3, .L691+4
 5530 040c 83FB0613 		smull	r1, r3, r3, r6
 5531 0410 A3EBE673 		sub	r3, r3, r6, asr #31
 5532 0414 03EB4303 		add	r3, r3, r3, lsl #1
 5533 0418 F31A     		subs	r3, r6, r3
 5534 041a 0233     		adds	r3, r3, #2
 5535 041c 042B     		cmp	r3, #4
 5536 041e 4FD8     		bhi	.L535
 5537 0420 DFE813F0 		tbh	[pc, r3, lsl #1]
 5538              	.L537:
 5539 0424 2402     		.2byte	(.L538-.L537)/2
 5540 0426 1202     		.2byte	(.L536-.L537)/2
 5541 0428 4E00     		.2byte	(.L535-.L537)/2
 5542 042a 2402     		.2byte	(.L538-.L537)/2
 5543 042c 1202     		.2byte	(.L536-.L537)/2
 5544              	.LVL620:
 5545              		.p2align 1
 5546              	.L506:
2225:src/display.c **** 	    case -1:
 5547              		.loc 1 2225 6 is_stmt 1 view .LVU1733
2225:src/display.c **** 	    case -1:
 5548              		.loc 1 2225 32 is_stmt 0 view .LVU1734
 5549 042e AF48     		ldr	r0, .L691
2225:src/display.c **** 	    case -1:
 5550              		.loc 1 2225 19 view .LVU1735
 5551 0430 AF49     		ldr	r1, .L691+4
2225:src/display.c **** 	    case -1:
 5552              		.loc 1 2225 32 view .LVU1736
ARM GAS  /tmp/cc9o0abE.s 			page 190


 5553 0432 0068     		ldr	r0, [r0]
2225:src/display.c **** 	    case -1:
 5554              		.loc 1 2225 19 view .LVU1737
 5555 0434 81FB0651 		smull	r5, r1, r1, r6
2225:src/display.c **** 	    case -1:
 5556              		.loc 1 2225 32 view .LVU1738
 5557 0438 90F8E70F 		ldrb	r0, [r0, #4071]	@ zero_extendqisi2
2225:src/display.c **** 	    case -1:
 5558              		.loc 1 2225 19 view .LVU1739
 5559 043c A1EBE671 		sub	r1, r1, r6, asr #31
 5560 0440 01EB4101 		add	r1, r1, r1, lsl #1
 5561 0444 711A     		subs	r1, r6, r1
2225:src/display.c **** 	    case -1:
 5562              		.loc 1 2225 32 view .LVU1740
 5563 0446 C0F30010 		ubfx	r0, r0, #4, #1
2225:src/display.c **** 	    case -1:
 5564              		.loc 1 2225 24 view .LVU1741
 5565 044a 01FB00F1 		mul	r1, r1, r0
 5566 044e 0231     		adds	r1, r1, #2
 5567 0450 0429     		cmp	r1, #4
 5568 0452 00F26782 		bhi	.L582
 5569 0456 DFE811F0 		tbh	[pc, r1, lsl #1]
 5570              	.L510:
 5571 045a 4302     		.2byte	(.L511-.L510)/2
 5572 045c 1802     		.2byte	(.L509-.L510)/2
 5573 045e 6502     		.2byte	(.L582-.L510)/2
 5574 0460 4302     		.2byte	(.L511-.L510)/2
 5575 0462 1802     		.2byte	(.L509-.L510)/2
 5576              	.LVL621:
 5577              		.p2align 1
 5578              	.L480:
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5579              		.loc 1 2181 4 is_stmt 1 view .LVU1742
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5580              		.loc 1 2181 7 is_stmt 0 view .LVU1743
 5581 0464 B342     		cmp	r3, r6
 5582 0466 03DD     		ble	.L483
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5583              		.loc 1 2181 45 discriminator 1 view .LVU1744
 5584 0468 5342     		rsbs	r3, r2, #0
2181:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5585              		.loc 1 2181 36 discriminator 1 view .LVU1745
 5586 046a B342     		cmp	r3, r6
 5587 046c 40F30282 		ble	.L484
 5588              	.L483:
2182:src/display.c **** 	  else {
 5589              		.loc 1 2182 6 is_stmt 1 view .LVU1746
2182:src/display.c **** 	  else {
 5590              		.loc 1 2182 26 is_stmt 0 view .LVU1747
 5591 0470 9E4B     		ldr	r3, .L691
 5592 0472 1B68     		ldr	r3, [r3]
 5593 0474 93F8E73F 		ldrb	r3, [r3, #4071]	@ zero_extendqisi2
2182:src/display.c **** 	  else {
 5594              		.loc 1 2182 35 view .LVU1748
 5595 0478 13F0100F 		tst	r3, #16
 5596 047c 14BF     		ite	ne
 5597 047e 0325     		movne	r5, #3
ARM GAS  /tmp/cc9o0abE.s 			page 191


 5598              	.LVL622:
2182:src/display.c **** 	  else {
 5599              		.loc 1 2182 35 view .LVU1749
 5600 0480 0225     		moveq	r5, #2
 5601 0482 6CE6     		b	.L665
 5602              	.LVL623:
 5603              	.L674:
2182:src/display.c **** 	  else {
 5604              		.loc 1 2182 35 view .LVU1750
 5605 0484 013E     		subs	r6, r6, #1
 5606 0486 08EB0602 		add	r2, r8, r6
 5607              	.L473:
2161:src/display.c **** 	    exp--;
 5608              		.loc 1 2161 4 is_stmt 1 discriminator 1 view .LVU1751
2162:src/display.c **** 	  while (*++q == '0');
 5609              		.loc 1 2162 6 discriminator 1 view .LVU1752
 5610 048a A2EB0806 		sub	r6, r2, r8
 5611              	.LVL624:
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5612              		.loc 1 2163 10 discriminator 1 view .LVU1753
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5613              		.loc 1 2163 11 is_stmt 0 discriminator 1 view .LVU1754
 5614 048e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5615              	.LVL625:
2163:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5616              		.loc 1 2163 4 discriminator 1 view .LVU1755
 5617 0492 302B     		cmp	r3, #48
 5618 0494 F9D0     		beq	.L473
2164:src/display.c **** 	    *p++ = *q++;
 5619              		.loc 1 2164 10 is_stmt 1 view .LVU1756
 5620 0496 A3F13002 		sub	r2, r3, #48
 5621 049a 092A     		cmp	r2, #9
 5622 049c 3FF658AE 		bhi	.L474
2027:src/display.c **** 	char *r;
 5623              		.loc 1 2027 8 is_stmt 0 view .LVU1757
 5624 04a0 5A46     		mov	r2, fp
 5625              	.LVL626:
 5626              	.L475:
2165:src/display.c **** 	} else {
 5627              		.loc 1 2165 6 is_stmt 1 view .LVU1758
2165:src/display.c **** 	} else {
 5628              		.loc 1 2165 11 is_stmt 0 view .LVU1759
 5629 04a2 02F8013B 		strb	r3, [r2], #1
 5630              	.LVL627:
2164:src/display.c **** 	    *p++ = *q++;
 5631              		.loc 1 2164 10 is_stmt 1 view .LVU1760
2164:src/display.c **** 	    *p++ = *q++;
 5632              		.loc 1 2164 11 is_stmt 0 view .LVU1761
 5633 04a6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2164:src/display.c **** 	    *p++ = *q++;
 5634              		.loc 1 2164 10 view .LVU1762
 5635 04aa A3F13001 		sub	r1, r3, #48
 5636 04ae 0929     		cmp	r1, #9
 5637 04b0 F7D9     		bls	.L475
 5638 04b2 4DE6     		b	.L474
 5639              	.LVL628:
 5640              	.L672:
ARM GAS  /tmp/cc9o0abE.s 			page 192


2155:src/display.c **** 	  q++;
 5641              		.loc 1 2155 4 is_stmt 1 view .LVU1763
2156:src/display.c **** 	} else if (*q == '+')
 5642              		.loc 1 2156 4 view .LVU1764
2155:src/display.c **** 	  q++;
 5643              		.loc 1 2155 13 is_stmt 0 view .LVU1765
 5644 04b4 0122     		movs	r2, #1
 5645 04b6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5646 04ba 0392     		str	r2, [sp, #12]
2156:src/display.c **** 	} else if (*q == '+')
 5647              		.loc 1 2156 5 view .LVU1766
 5648 04bc 9044     		add	r8, r8, r2
 5649              	.LVL629:
2156:src/display.c **** 	} else if (*q == '+')
 5650              		.loc 1 2156 5 view .LVU1767
 5651 04be 1AE6     		b	.L469
 5652              	.LVL630:
 5653              	.L535:
2156:src/display.c **** 	} else if (*q == '+')
 5654              		.loc 1 2156 5 view .LVU1768
 5655 04c0 079A     		ldr	r2, [sp, #28]
2316:src/display.c **** 	  case -1:
 5656              		.loc 1 2316 16 view .LVU1769
 5657 04c2 0125     		movs	r5, #1
2021:src/display.c **** 	int odig = 0;
 5658              		.loc 1 2021 15 view .LVU1770
 5659 04c4 3946     		mov	r1, r7
 5660              	.LVL631:
 5661              	.L503:
2330:src/display.c **** 	  };
 5662              		.loc 1 2330 6 is_stmt 1 view .LVU1771
2331:src/display.c **** 	  // Falling through
 5663              		.loc 1 2331 5 view .LVU1772
2335:src/display.c **** 	  odig++;
 5664              		.loc 1 2335 4 view .LVU1773
2335:src/display.c **** 	  odig++;
 5665              		.loc 1 2335 15 is_stmt 0 view .LVU1774
 5666 04c6 5B46     		mov	r3, fp
 5667              	.LVL632:
2335:src/display.c **** 	  odig++;
 5668              		.loc 1 2335 11 view .LVU1775
 5669 04c8 8846     		mov	r8, r1
 5670 04ca 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5671              	.LVL633:
2335:src/display.c **** 	  odig++;
 5672              		.loc 1 2335 11 view .LVU1776
 5673 04ce 08F8020B 		strb	r0, [r8], #2
2336:src/display.c **** 	  *obp++ = '.';
 5674              		.loc 1 2336 4 is_stmt 1 view .LVU1777
2337:src/display.c **** 	  dd--;
 5675              		.loc 1 2337 4 view .LVU1778
 5676              	.LVL634:
2337:src/display.c **** 	  dd--;
 5677              		.loc 1 2337 11 is_stmt 0 view .LVU1779
 5678 04d2 4FF02E0C 		mov	ip, #46
2339:src/display.c **** 	    *obp++ = *p++;
 5679              		.loc 1 2339 13 view .LVU1780
ARM GAS  /tmp/cc9o0abE.s 			page 193


 5680 04d6 901E     		subs	r0, r2, #2
2339:src/display.c **** 	    *obp++ = *p++;
 5681              		.loc 1 2339 10 view .LVU1781
 5682 04d8 002A     		cmp	r2, #0
2337:src/display.c **** 	  dd--;
 5683              		.loc 1 2337 11 view .LVU1782
 5684 04da 81F801C0 		strb	ip, [r1, #1]
2338:src/display.c **** 	  while (dd-- >= 0) {
 5685              		.loc 1 2338 4 is_stmt 1 view .LVU1783
2339:src/display.c **** 	    *obp++ = *p++;
 5686              		.loc 1 2339 4 view .LVU1784
2339:src/display.c **** 	    *obp++ = *p++;
 5687              		.loc 1 2339 10 view .LVU1785
2339:src/display.c **** 	    *obp++ = *p++;
 5688              		.loc 1 2339 13 is_stmt 0 view .LVU1786
 5689 04de 0790     		str	r0, [sp, #28]
2339:src/display.c **** 	    *obp++ = *p++;
 5690              		.loc 1 2339 10 view .LVU1787
 5691 04e0 40F32382 		ble	.L583
2339:src/display.c **** 	    *obp++ = *p++;
 5692              		.loc 1 2339 10 view .LVU1788
 5693 04e4 501C     		adds	r0, r2, #1
 5694 04e6 0131     		adds	r1, r1, #1
 5695 04e8 8344     		add	fp, fp, r0
 5696              	.LVL635:
 5697              	.L541:
2340:src/display.c **** 	    odig++;
 5698              		.loc 1 2340 6 is_stmt 1 view .LVU1789
2340:src/display.c **** 	    odig++;
 5699              		.loc 1 2340 13 is_stmt 0 view .LVU1790
 5700 04ea 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5701              	.LVL636:
2340:src/display.c **** 	    odig++;
 5702              		.loc 1 2340 13 view .LVU1791
 5703 04ee 01F8010F 		strb	r0, [r1, #1]!
2341:src/display.c **** 	  }
 5704              		.loc 1 2341 6 is_stmt 1 view .LVU1792
2339:src/display.c **** 	    *obp++ = *p++;
 5705              		.loc 1 2339 10 view .LVU1793
 5706 04f2 5B45     		cmp	r3, fp
 5707 04f4 F9D1     		bne	.L541
 5708 04f6 6FF00103 		mvn	r3, #1
 5709              	.LVL637:
2339:src/display.c **** 	    *obp++ = *p++;
 5710              		.loc 1 2339 10 is_stmt 0 view .LVU1794
 5711 04fa 9044     		add	r8, r8, r2
 5712 04fc 1544     		add	r5, r5, r2
 5713 04fe 0793     		str	r3, [sp, #28]
2343:src/display.c **** 	}
 5714              		.loc 1 2343 13 view .LVU1795
 5715 0500 4FF00109 		mov	r9, #1
 5716              	.L513:
 5717              	.LVL638:
2346:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5718              		.loc 1 2346 2 is_stmt 1 view .LVU1796
2346:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5719              		.loc 1 2346 5 is_stmt 0 view .LVU1797
ARM GAS  /tmp/cc9o0abE.s 			page 194


 5720 0504 049B     		ldr	r3, [sp, #16]
 5721 0506 002B     		cmp	r3, #0
 5722 0508 3FF4C0AE 		beq	.L542
2347:src/display.c **** 	    obp--;
 5723              		.loc 1 2347 10 is_stmt 1 view .LVU1798
 5724 050c B845     		cmp	r8, r7
 5725 050e 7FF6BDAE 		bls	.L542
 5726 0512 4346     		mov	r3, r8
 5727 0514 04E0     		b	.L543
 5728              	.LVL639:
 5729              	.L544:
2347:src/display.c **** 	    obp--;
 5730              		.loc 1 2347 10 is_stmt 0 view .LVU1799
 5731 0516 9F42     		cmp	r7, r3
2349:src/display.c **** 	  }
 5732              		.loc 1 2349 10 view .LVU1800
 5733 0518 05F1FF35 		add	r5, r5, #-1
 5734              	.LVL640:
2347:src/display.c **** 	    obp--;
 5735              		.loc 1 2347 10 is_stmt 1 view .LVU1801
 5736 051c 3FF4B5AE 		beq	.L585
 5737              	.LVL641:
 5738              	.L543:
2348:src/display.c **** 	    odig--;
 5739              		.loc 1 2348 6 discriminator 1 view .LVU1802
 5740 0520 9846     		mov	r8, r3
 5741              	.LVL642:
2348:src/display.c **** 	    odig--;
 5742              		.loc 1 2348 6 is_stmt 0 discriminator 1 view .LVU1803
 5743 0522 013B     		subs	r3, r3, #1
 5744              	.LVL643:
2349:src/display.c **** 	  }
 5745              		.loc 1 2349 6 is_stmt 1 discriminator 1 view .LVU1804
2347:src/display.c **** 	    obp--;
 5746              		.loc 1 2347 19 is_stmt 0 discriminator 1 view .LVU1805
 5747 0524 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5748 0528 302A     		cmp	r2, #48
 5749 052a F4D0     		beq	.L544
2347:src/display.c **** 	    obp--;
 5750              		.loc 1 2347 19 discriminator 1 view .LVU1806
 5751 052c AEE6     		b	.L542
 5752              	.LVL644:
 5753              	.L678:
2375:src/display.c **** 	  } else if (c == ',') {
 5754              		.loc 1 2375 6 is_stmt 1 view .LVU1807
2375:src/display.c **** 	  } else if (c == ',') {
 5755              		.loc 1 2375 12 is_stmt 0 view .LVU1808
 5756 052e 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 5757              	.LVL645:
 5758              	.LBB374:
 5759              	.LBI374:
 357:src/display.c ****   if (res) {
 5760              		.loc 1 357 14 is_stmt 1 view .LVU1809
 5761              	.LBB375:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5762              		.loc 1 358 3 view .LVU1810
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
ARM GAS  /tmp/cc9o0abE.s 			page 195


 5763              		.loc 1 358 6 is_stmt 0 view .LVU1811
 5764 0532 002C     		cmp	r4, #0
 5765 0534 33D0     		beq	.L553
 359:src/display.c ****   } else {
 5766              		.loc 1 359 5 is_stmt 1 view .LVU1812
 359:src/display.c ****   } else {
 5767              		.loc 1 359 12 is_stmt 0 view .LVU1813
 5768 0536 0029     		cmp	r1, #0
 5769              	.LVL646:
 359:src/display.c ****   } else {
 5770              		.loc 1 359 12 view .LVU1814
 5771 0538 0CBF     		ite	eq
 5772 053a 2E22     		moveq	r2, #46
 5773 053c 2C22     		movne	r2, #44
 5774 053e 04F8012B 		strb	r2, [r4], #1
 5775              	.LVL647:
 5776              	.L555:
 359:src/display.c ****   } else {
 5777              		.loc 1 359 12 view .LVU1815
 5778              	.LBE375:
 5779              	.LBE374:
2373:src/display.c **** 	  if (c == '.') {
 5780              		.loc 1 2373 53 is_stmt 1 view .LVU1816
2373:src/display.c **** 	  if (c == '.') {
 5781              		.loc 1 2373 12 view .LVU1817
2373:src/display.c **** 	  if (c == '.') {
 5782              		.loc 1 2373 18 is_stmt 0 view .LVU1818
 5783 0542 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5784              	.LVL648:
2373:src/display.c **** 	  if (c == '.') {
 5785              		.loc 1 2373 2 view .LVU1819
 5786 0546 0029     		cmp	r1, #0
 5787 0548 7FF4CAAE 		bne	.L561
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5788              		.loc 1 2393 2 is_stmt 1 view .LVU1820
2393:src/display.c **** 	  set_exp(exp, 0, res);
 5789              		.loc 1 2393 5 is_stmt 0 view .LVU1821
 5790 054c B9F1000F 		cmp	r9, #0
 5791 0550 3FF4DDAE 		beq	.L562
 5792              	.LVL649:
 5793              	.L680:
2394:src/display.c **** #endif
 5794              		.loc 1 2394 4 is_stmt 1 view .LVU1822
 5795 0554 3046     		mov	r0, r6
 5796 0556 2246     		mov	r2, r4
 5797 0558 0021     		movs	r1, #0
 5798              	.LVL650:
2394:src/display.c **** #endif
 5799              		.loc 1 2394 4 is_stmt 0 view .LVU1823
 5800 055a FFF7FEFF 		bl	set_exp
 5801              	.LVL651:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5802              		.loc 1 2396 2 is_stmt 1 view .LVU1824
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5803              		.loc 1 2396 5 is_stmt 0 view .LVU1825
 5804 055e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5805 0562 2E2B     		cmp	r3, #46
ARM GAS  /tmp/cc9o0abE.s 			page 196


 5806 0564 7FF4D8AE 		bne	.L563
 5807              	.L681:
2396:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5808              		.loc 1 2396 21 discriminator 1 view .LVU1826
 5809 0568 002C     		cmp	r4, #0
 5810 056a 7FF4D5AE 		bne	.L563
2397:src/display.c **** 	*display_digits = odig;
 5811              		.loc 1 2397 4 is_stmt 1 view .LVU1827
 5812              	.LVL652:
 5813              	.LBB377:
 5814              	.LBI377:
 357:src/display.c ****   if (res) {
 5815              		.loc 1 357 14 view .LVU1828
 5816              	.LBB378:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5817              		.loc 1 358 3 view .LVU1829
 5818              	.LBE378:
 5819              	.LBE377:
2397:src/display.c **** 	*display_digits = odig;
 5820              		.loc 1 2397 33 is_stmt 0 view .LVU1830
 5821 056e 019B     		ldr	r3, [sp, #4]
 5822 0570 1868     		ldr	r0, [r3]
2397:src/display.c **** 	*display_digits = odig;
 5823              		.loc 1 2397 4 view .LVU1831
 5824 0572 604B     		ldr	r3, .L691+8
2397:src/display.c **** 	*display_digits = odig;
 5825              		.loc 1 2397 33 view .LVU1832
 5826 0574 0138     		subs	r0, r0, #1
 5827              	.LBB380:
 5828              	.LBB379:
 5829 0576 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5830 0578 00EBC000 		add	r0, r0, r0, lsl #3
 5831 057c FFF7FEFF 		bl	set_decimal.part.0
 5832              	.LVL653:
 368:src/display.c **** }
 5833              		.loc 1 368 3 is_stmt 1 view .LVU1833
 368:src/display.c **** }
 5834              		.loc 1 368 10 is_stmt 0 view .LVU1834
 5835 0580 CAE6     		b	.L563
 5836              	.LVL654:
 5837              	.L679:
 368:src/display.c **** }
 5838              		.loc 1 368 10 view .LVU1835
 5839              	.LBE379:
 5840              	.LBE380:
2377:src/display.c **** 	  } else {
 5841              		.loc 1 2377 6 is_stmt 1 view .LVU1836
2377:src/display.c **** 	  } else {
 5842              		.loc 1 2377 12 is_stmt 0 view .LVU1837
 5843 0582 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5844              	.LVL655:
 5845              	.LBB381:
 5846              	.LBI381:
 375:src/display.c ****   if (sep == SEP_NONE)
 5847              		.loc 1 375 14 is_stmt 1 view .LVU1838
 5848              	.LBB382:
 376:src/display.c ****     return res;
ARM GAS  /tmp/cc9o0abE.s 			page 197


 5849              		.loc 1 376 3 view .LVU1839
 376:src/display.c ****     return res;
 5850              		.loc 1 376 6 is_stmt 0 view .LVU1840
 5851 0584 002A     		cmp	r2, #0
 5852 0586 DCD0     		beq	.L555
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5853              		.loc 1 378 3 is_stmt 1 view .LVU1841
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5854              		.loc 1 378 6 is_stmt 0 view .LVU1842
 5855 0588 002C     		cmp	r4, #0
 5856 058a 00F02781 		beq	.L557
 379:src/display.c ****     else *res++ = '.';
 5857              		.loc 1 379 5 is_stmt 1 view .LVU1843
 379:src/display.c ****     else *res++ = '.';
 5858              		.loc 1 379 8 is_stmt 0 view .LVU1844
 5859 058e 012A     		cmp	r2, #1
 379:src/display.c ****     else *res++ = '.';
 5860              		.loc 1 379 27 is_stmt 1 view .LVU1845
 5861              	.LVL656:
 380:src/display.c ****   } else {
 5862              		.loc 1 380 17 is_stmt 0 view .LVU1846
 5863 0590 16BF     		itet	ne
 5864 0592 2E22     		movne	r2, #46
 5865              	.LVL657:
 379:src/display.c ****     else *res++ = '.';
 5866              		.loc 1 379 34 view .LVU1847
 5867 0594 04F8011B 		strbeq	r1, [r4], #1
 5868              	.LVL658:
 380:src/display.c ****   } else {
 5869              		.loc 1 380 10 is_stmt 1 view .LVU1848
 380:src/display.c ****   } else {
 5870              		.loc 1 380 17 is_stmt 0 view .LVU1849
 5871 0598 04F8012B 		strbne	r2, [r4], #1
 5872              	.LVL659:
 380:src/display.c ****   } else {
 5873              		.loc 1 380 17 view .LVU1850
 5874 059c D1E7     		b	.L555
 5875              	.LVL660:
 5876              	.L553:
 380:src/display.c ****   } else {
 5877              		.loc 1 380 17 view .LVU1851
 5878              	.LBE382:
 5879              	.LBE381:
 5880              	.LBB384:
 5881              	.LBB376:
 5882 059e AAF10900 		sub	r0, r10, #9
 5883 05a2 FFF7FEFF 		bl	set_decimal.part.0
 5884              	.LVL661:
 380:src/display.c ****   } else {
 5885              		.loc 1 380 17 view .LVU1852
 5886 05a6 544B     		ldr	r3, .L691+12
 5887 05a8 0446     		mov	r4, r0
 5888              	.LVL662:
 380:src/display.c ****   } else {
 5889              		.loc 1 380 17 view .LVU1853
 5890 05aa CAE7     		b	.L555
 5891              	.LVL663:
ARM GAS  /tmp/cc9o0abE.s 			page 198


 5892              	.L559:
 380:src/display.c ****   } else {
 5893              		.loc 1 380 17 view .LVU1854
 5894              	.LBE376:
 5895              	.LBE384:
 5896              	.LBB385:
 5897              	.LBB372:
 417:src/display.c ****   return res;
 5898              		.loc 1 417 8 is_stmt 1 view .LVU1855
 5899 05ac 5046     		mov	r0, r10
 5900 05ae FFF7FEFF 		bl	set_dig
 5901              	.LVL664:
 417:src/display.c ****   return res;
 5902              		.loc 1 417 8 is_stmt 0 view .LVU1856
 5903 05b2 514B     		ldr	r3, .L691+12
 5904 05b4 9FE6     		b	.L560
 5905              	.LVL665:
 5906              	.L494:
 417:src/display.c ****   return res;
 5907              		.loc 1 417 8 view .LVU1857
 5908              	.LBE372:
 5909              	.LBE385:
2214:src/display.c **** 
 5910              		.loc 1 2214 2 is_stmt 1 view .LVU1858
2214:src/display.c **** 
 5911              		.loc 1 2214 45 view .LVU1859
2214:src/display.c **** 
 5912              		.loc 1 2214 2 is_stmt 0 view .LVU1860
 5913 05b6 1BF80110 		ldrb	r1, [fp, r1]	@ zero_extendqisi2
 5914 05ba 0029     		cmp	r1, #0
 5915 05bc 7FF401AE 		bne	.L565
 5916              	.LVL666:
 5917              	.L501:
2279:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5918              		.loc 1 2279 4 is_stmt 1 view .LVU1861
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5919              		.loc 1 2280 4 view .LVU1862
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5920              		.loc 1 2280 7 is_stmt 0 view .LVU1863
 5921 05c0 002E     		cmp	r6, #0
 5922 05c2 C0F21281 		blt	.L524
2280:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5923              		.loc 1 2280 7 view .LVU1864
 5924 05c6 731C     		adds	r3, r6, #1
2282:src/display.c **** 		*obp++ = ',';
 5925              		.loc 1 2282 31 view .LVU1865
 5926 05c8 DFF824E1 		ldr	lr, .L691+4
 5927 05cc 0593     		str	r3, [sp, #20]
 5928 05ce 0BEB030C 		add	ip, fp, r3
2216:src/display.c **** 	switch (mode) {
 5929              		.loc 1 2216 4 view .LVU1866
 5930 05d2 5D46     		mov	r5, fp
2021:src/display.c **** 	int odig = 0;
 5931              		.loc 1 2021 15 view .LVU1867
 5932 05d4 3846     		mov	r0, r7
 5933 05d6 05E0     		b	.L525
 5934              	.LVL667:
ARM GAS  /tmp/cc9o0abE.s 			page 199


 5935              	.L528:
2283:src/display.c **** 	      *obp++ = *p++;
 5936              		.loc 1 2283 3 is_stmt 1 view .LVU1868
2282:src/display.c **** 		*obp++ = ',';
 5937              		.loc 1 2282 18 is_stmt 0 view .LVU1869
 5938 05d8 0229     		cmp	r1, #2
2283:src/display.c **** 	      *obp++ = *p++;
 5939              		.loc 1 2283 10 view .LVU1870
 5940 05da 05BF     		ittet	eq
 5941 05dc 2C23     		moveq	r3, #44
 5942 05de 4370     		strbeq	r3, [r0, #1]
2284:src/display.c **** 	      odig++;
 5943              		.loc 1 2284 12 view .LVU1871
 5944 05e0 0130     		addne	r0, r0, #1
 5945              	.LVL668:
2283:src/display.c **** 	      *obp++ = *p++;
 5946              		.loc 1 2283 7 view .LVU1872
 5947 05e2 0230     		addeq	r0, r0, #2
 5948              	.LVL669:
 5949              	.L525:
2284:src/display.c **** 	      odig++;
 5950              		.loc 1 2284 8 is_stmt 1 discriminator 2 view .LVU1873
2284:src/display.c **** 	      odig++;
 5951              		.loc 1 2284 15 is_stmt 0 discriminator 2 view .LVU1874
 5952 05e4 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 5953              	.LVL670:
2282:src/display.c **** 		*obp++ = ',';
 5954              		.loc 1 2282 8 is_stmt 1 discriminator 2 view .LVU1875
2284:src/display.c **** 	      odig++;
 5955              		.loc 1 2284 15 is_stmt 0 discriminator 2 view .LVU1876
 5956 05e8 0370     		strb	r3, [r0]
2285:src/display.c **** 	    }
 5957              		.loc 1 2285 8 is_stmt 1 discriminator 2 view .LVU1877
 5958              	.LVL671:
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5959              		.loc 1 2281 24 discriminator 2 view .LVU1878
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5960              		.loc 1 2281 16 discriminator 2 view .LVU1879
2282:src/display.c **** 		*obp++ = ',';
 5961              		.loc 1 2282 31 is_stmt 0 discriminator 2 view .LVU1880
 5962 05ea ABEB0503 		sub	r3, fp, r5
 5963 05ee 3344     		add	r3, r3, r6
 5964 05f0 8EFB0381 		smull	r8, r1, lr, r3
 5965 05f4 A1EBE371 		sub	r1, r1, r3, asr #31
 5966 05f8 01EB4101 		add	r1, r1, r1, lsl #1
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5967              		.loc 1 2281 6 discriminator 2 view .LVU1881
 5968 05fc AC45     		cmp	ip, r5
2282:src/display.c **** 		*obp++ = ',';
 5969              		.loc 1 2282 31 discriminator 2 view .LVU1882
 5970 05fe A3EB0101 		sub	r1, r3, r1
2281:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5971              		.loc 1 2281 6 discriminator 2 view .LVU1883
 5972 0602 E9D1     		bne	.L528
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5973              		.loc 1 2287 13 view .LVU1884
 5974 0604 2E23     		movs	r3, #46
ARM GAS  /tmp/cc9o0abE.s 			page 200


2288:src/display.c **** 	      *obp++ = *p++;
 5975              		.loc 1 2288 6 view .LVU1885
 5976 0606 002A     		cmp	r2, #0
 5977 0608 059D     		ldr	r5, [sp, #20]
 5978              	.LVL672:
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5979              		.loc 1 2287 6 is_stmt 1 view .LVU1886
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5980              		.loc 1 2287 13 is_stmt 0 view .LVU1887
 5981 060a 4370     		strb	r3, [r0, #1]
2287:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 5982              		.loc 1 2287 10 view .LVU1888
 5983 060c 00F10208 		add	r8, r0, #2
 5984              	.LVL673:
2288:src/display.c **** 	      *obp++ = *p++;
 5985              		.loc 1 2288 6 is_stmt 1 view .LVU1889
2288:src/display.c **** 	      *obp++ = *p++;
 5986              		.loc 1 2288 16 view .LVU1890
2288:src/display.c **** 	      *obp++ = *p++;
 5987              		.loc 1 2288 6 is_stmt 0 view .LVU1891
 5988 0610 7FF778AF 		ble	.L513
 5989 0614 0130     		adds	r0, r0, #1
 5990 0616 0CEB0201 		add	r1, ip, r2
 5991              	.LVL674:
 5992              	.L529:
2289:src/display.c **** 	      odig++;
 5993              		.loc 1 2289 8 is_stmt 1 discriminator 4 view .LVU1892
2289:src/display.c **** 	      odig++;
 5994              		.loc 1 2289 15 is_stmt 0 discriminator 4 view .LVU1893
 5995 061a 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 5996              	.LVL675:
2289:src/display.c **** 	      odig++;
 5997              		.loc 1 2289 15 discriminator 4 view .LVU1894
 5998 061e 00F8013F 		strb	r3, [r0, #1]!
2290:src/display.c **** 	    }
 5999              		.loc 1 2290 8 is_stmt 1 discriminator 4 view .LVU1895
2288:src/display.c **** 	      *obp++ = *p++;
 6000              		.loc 1 2288 43 discriminator 4 view .LVU1896
2288:src/display.c **** 	      *obp++ = *p++;
 6001              		.loc 1 2288 16 discriminator 4 view .LVU1897
2288:src/display.c **** 	      *obp++ = *p++;
 6002              		.loc 1 2288 6 is_stmt 0 discriminator 4 view .LVU1898
 6003 0622 8C45     		cmp	ip, r1
 6004 0624 F9D1     		bne	.L529
 6005 0626 059B     		ldr	r3, [sp, #20]
 6006 0628 1344     		add	r3, r3, r2
 6007 062a 9044     		add	r8, r8, r2
 6008              	.LVL676:
2288:src/display.c **** 	      *obp++ = *p++;
 6009              		.loc 1 2288 6 discriminator 4 view .LVU1899
 6010 062c 1D46     		mov	r5, r3
 6011 062e 69E7     		b	.L513
 6012              	.LVL677:
 6013              	.L666:
2084:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6014              		.loc 1 2084 4 is_stmt 1 view .LVU1900
 6015 0630 324A     		ldr	r2, .L691+16
ARM GAS  /tmp/cc9o0abE.s 			page 201


 6016 0632 5146     		mov	r1, r10
 6017 0634 5046     		mov	r0, r10
 6018 0636 FFF7FEFF 		bl	decNumberNormalize
 6019              	.LVL678:
2085:src/display.c **** 	  z->exponent = 0;
 6020              		.loc 1 2085 4 view .LVU1901
2085:src/display.c **** 	  z->exponent = 0;
 6021              		.loc 1 2085 22 is_stmt 0 view .LVU1902
 6022 063a DAE90023 		ldrd	r2, r3, [r10]
 6023 063e 03EB0208 		add	r8, r3, r2
2086:src/display.c **** 	}
 6024              		.loc 1 2086 16 view .LVU1903
 6025 0642 CAF80490 		str	r9, [r10, #4]
2085:src/display.c **** 	  z->exponent = 0;
 6026              		.loc 1 2085 8 view .LVU1904
 6027 0646 08F1FF38 		add	r8, r8, #-1
 6028              	.LVL679:
2086:src/display.c **** 	}
 6029              		.loc 1 2086 4 is_stmt 1 view .LVU1905
 6030 064a F7E4     		b	.L444
 6031              	.LVL680:
 6032              	.L675:
2174:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6033              		.loc 1 2174 6 view .LVU1906
2175:src/display.c **** 	      *p++ = *q++;
 6034              		.loc 1 2175 13 is_stmt 0 view .LVU1907
 6035 064c 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2175:src/display.c **** 	      *p++ = *q++;
 6036              		.loc 1 2175 12 view .LVU1908
 6037 0650 A3F13002 		sub	r2, r3, #48
 6038 0654 092A     		cmp	r2, #9
2174:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6039              		.loc 1 2174 7 view .LVU1909
 6040 0656 08F10108 		add	r8, r8, #1
 6041              	.LVL681:
2175:src/display.c **** 	      *p++ = *q++;
 6042              		.loc 1 2175 6 is_stmt 1 view .LVU1910
2175:src/display.c **** 	      *p++ = *q++;
 6043              		.loc 1 2175 12 view .LVU1911
 6044 065a 3FF679AD 		bhi	.L474
 6045              	.LVL682:
 6046              	.L479:
2176:src/display.c **** 	  }
 6047              		.loc 1 2176 8 view .LVU1912
2176:src/display.c **** 	  }
 6048              		.loc 1 2176 13 is_stmt 0 view .LVU1913
 6049 065e 01F8013B 		strb	r3, [r1], #1
 6050              	.LVL683:
2175:src/display.c **** 	      *p++ = *q++;
 6051              		.loc 1 2175 12 is_stmt 1 view .LVU1914
2175:src/display.c **** 	      *p++ = *q++;
 6052              		.loc 1 2175 13 is_stmt 0 view .LVU1915
 6053 0662 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2175:src/display.c **** 	      *p++ = *q++;
 6054              		.loc 1 2175 12 view .LVU1916
 6055 0666 A3F13002 		sub	r2, r3, #48
 6056 066a 092A     		cmp	r2, #9
ARM GAS  /tmp/cc9o0abE.s 			page 202


 6057 066c F7D9     		bls	.L479
 6058 066e 6FE5     		b	.L474
 6059              	.LVL684:
 6060              	.L673:
2158:src/display.c **** 	for (; *q == '0'; q++);
 6061              		.loc 1 2158 4 is_stmt 1 view .LVU1917
2041:src/display.c **** 	int trimzeros = 0;
 6062              		.loc 1 2041 6 is_stmt 0 view .LVU1918
 6063 0670 0022     		movs	r2, #0
 6064 0672 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6065 0676 0392     		str	r2, [sp, #12]
2158:src/display.c **** 	for (; *q == '0'; q++);
 6066              		.loc 1 2158 5 view .LVU1919
 6067 0678 08F10108 		add	r8, r8, #1
 6068              	.LVL685:
2158:src/display.c **** 	for (; *q == '0'; q++);
 6069              		.loc 1 2158 5 view .LVU1920
 6070 067c 3BE5     		b	.L469
 6071              	.LVL686:
 6072              	.L667:
2092:src/display.c **** 	    x[0] = '-';
 6073              		.loc 1 2092 34 discriminator 1 view .LVU1921
 6074 067e 6B20     		movs	r0, #107
 6075 0680 FFF7FEFF 		bl	get_user_flag
 6076              	.LVL687:
2092:src/display.c **** 	    x[0] = '-';
 6077              		.loc 1 2092 31 discriminator 1 view .LVU1922
 6078 0684 0028     		cmp	r0, #0
 6079 0686 3FF4EAAC 		beq	.L446
2093:src/display.c **** 	    x[1] = '0';
 6080              		.loc 1 2093 6 is_stmt 1 view .LVU1923
2094:src/display.c **** 	  } else
 6081              		.loc 1 2094 6 view .LVU1924
2093:src/display.c **** 	    x[1] = '0';
 6082              		.loc 1 2093 11 is_stmt 0 view .LVU1925
 6083 068a 43F22D03 		movw	r3, #12333
 6084 068e ADF82430 		strh	r3, [sp, #36]	@ movhi
2094:src/display.c **** 	  } else
 6085              		.loc 1 2094 11 view .LVU1926
 6086 0692 E7E4     		b	.L447
 6087              	.LVL688:
 6088              	.L671:
2151:src/display.c **** 	  CLR_MANT_SIGN;
 6089              		.loc 1 2151 4 is_stmt 1 view .LVU1927
 6090 0694 8220     		movs	r0, #130
 6091 0696 FFF7FEFF 		bl	clr_dot
 6092              	.LVL689:
2152:src/display.c **** 	}
 6093              		.loc 1 2152 4 view .LVU1928
 6094 069a 8120     		movs	r0, #129
 6095 069c FFF7FEFF 		bl	clr_dot
 6096              	.LVL690:
 6097 06a0 1FE5     		b	.L467
 6098              	.LVL691:
 6099              	.L462:
 6100              	.LBB386:
2113:src/display.c **** 
ARM GAS  /tmp/cc9o0abE.s 			page 203


 6101              		.loc 1 2113 4 view .LVU1929
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6102              		.loc 1 2115 4 view .LVU1930
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6103              		.loc 1 2115 11 is_stmt 0 view .LVU1931
 6104 06a2 2A46     		mov	r2, r5
 6105 06a4 07A9     		add	r1, sp, #28
 6106 06a6 5046     		mov	r0, r10
 6107 06a8 FFF7FEFF 		bl	std_round_fix
 6108              	.LVL692:
 6109              	.LBE386:
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6110              		.loc 1 2042 6 view .LVU1932
 6111 06ac 0023     		movs	r3, #0
 6112              	.LBB387:
2115:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6113              		.loc 1 2115 11 view .LVU1933
 6114 06ae 0546     		mov	r5, r0
 6115              	.LVL693:
2116:src/display.c **** 	    // allow zeros to be trimmed
 6116              		.loc 1 2116 4 is_stmt 1 view .LVU1934
 6117              	.LBE387:
2042:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6118              		.loc 1 2042 6 is_stmt 0 view .LVU1935
 6119 06b0 0493     		str	r3, [sp, #16]
 6120 06b2 F0E4     		b	.L568
 6121              	.LVL694:
 6122              	.L677:
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6123              		.loc 1 2352 72 discriminator 2 view .LVU1936
 6124 06b4 06F2E732 		addw	r2, r6, #999
2352:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6125              		.loc 1 2352 58 discriminator 2 view .LVU1937
 6126 06b8 40F2CE73 		movw	r3, #1998
 6127 06bc 9A42     		cmp	r2, r3
 6128 06be 7FF6EBAD 		bls	.L545
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6129              		.loc 1 2353 4 is_stmt 1 view .LVU1938
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6130              		.loc 1 2353 20 is_stmt 0 view .LVU1939
 6131 06c2 019A     		ldr	r2, [sp, #4]
 6132 06c4 0A23     		movs	r3, #10
2354:src/display.c **** 	  return;
 6133              		.loc 1 2354 4 view .LVU1940
 6134 06c6 2146     		mov	r1, r4
 6135 06c8 5046     		mov	r0, r10
2353:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6136              		.loc 1 2353 20 view .LVU1941
 6137 06ca 1360     		str	r3, [r2]
2354:src/display.c **** 	  return;
 6138              		.loc 1 2354 4 is_stmt 1 view .LVU1942
 6139 06cc FFF7FEFF 		bl	set_x_dn
 6140              	.LVL695:
2355:src/display.c **** 	}
 6141              		.loc 1 2355 4 view .LVU1943
 6142 06d0 24E6     		b	.L437
 6143              	.LVL696:
ARM GAS  /tmp/cc9o0abE.s 			page 204


 6144              	.L548:
2367:src/display.c **** 	      SET_MANT_SIGN;
 6145              		.loc 1 2367 6 view .LVU1944
2367:src/display.c **** 	      SET_MANT_SIGN;
 6146              		.loc 1 2367 9 is_stmt 0 view .LVU1945
 6147 06d2 BAF1000F 		cmp	r10, #0
 6148 06d6 40F00781 		bne	.L551
2368:src/display.c **** 	    else
 6149              		.loc 1 2368 8 is_stmt 1 view .LVU1946
 6150 06da 8120     		movs	r0, #129
 6151 06dc FFF7FEFF 		bl	set_dot
 6152              	.LVL697:
2373:src/display.c **** 	  if (c == '.') {
 6153              		.loc 1 2373 12 view .LVU1947
2373:src/display.c **** 	  if (c == '.') {
 6154              		.loc 1 2373 18 is_stmt 0 view .LVU1948
 6155 06e0 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 6156              	.LVL698:
2373:src/display.c **** 	  if (c == '.') {
 6157              		.loc 1 2373 2 view .LVU1949
 6158 06e4 0029     		cmp	r1, #0
 6159 06e6 7FF4F8AD 		bne	.L550
 6160 06ea 0CE6     		b	.L549
 6161              	.L692:
 6162              		.align	2
 6163              	.L691:
 6164 06ec 00000000 		.word	main_ram
 6165 06f0 56555555 		.word	1431655766
 6166 06f4 00000000 		.word	.LANCHOR1
 6167 06f8 00000000 		.word	.LANCHOR0
 6168 06fc 00000000 		.word	Ctx
 6169              	.LVL699:
 6170              	.L668:
2101:src/display.c **** 	  return;
 6171              		.loc 1 2101 4 is_stmt 1 view .LVU1950
 6172              	.LBB388:
 6173              	.LBI388:
1889:src/display.c **** 	const int dbl = is_dblmode();
 6174              		.loc 1 1889 19 view .LVU1951
 6175              	.LBB389:
1890:src/display.c **** 	char *p;
 6176              		.loc 1 1890 2 view .LVU1952
1890:src/display.c **** 	char *p;
 6177              		.loc 1 1890 18 is_stmt 0 view .LVU1953
 6178 0700 FFF7FEFF 		bl	is_dblmode
 6179              	.LVL700:
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6180              		.loc 1 1906 5 view .LVU1954
 6181 0704 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6182 0708 2D2B     		cmp	r3, #45
1890:src/display.c **** 	char *p;
 6183              		.loc 1 1890 18 view .LVU1955
 6184 070a 0446     		mov	r4, r0
 6185              	.LVL701:
1891:src/display.c **** 	int i, j;
 6186              		.loc 1 1891 2 is_stmt 1 view .LVU1956
1892:src/display.c **** 	char *upper_str;
ARM GAS  /tmp/cc9o0abE.s 			page 205


 6187              		.loc 1 1892 2 view .LVU1957
1893:src/display.c **** 	enum separator_modes separator_mode;
 6188              		.loc 1 1893 2 view .LVU1958
1894:src/display.c **** 	char decimal_mark;
 6189              		.loc 1 1894 2 view .LVU1959
1895:src/display.c **** 	char thousands_sep;
 6190              		.loc 1 1895 2 view .LVU1960
1896:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6191              		.loc 1 1896 2 view .LVU1961
1902:src/display.c **** #endif
 6192              		.loc 1 1902 2 view .LVU1962
1904:src/display.c **** 
 6193              		.loc 1 1904 2 view .LVU1963
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6194              		.loc 1 1906 2 view .LVU1964
1906:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6195              		.loc 1 1906 5 is_stmt 0 view .LVU1965
 6196 070c 00F01681 		beq	.L685
1919:src/display.c **** 
 6197              		.loc 1 1919 16 view .LVU1966
 6198 0710 4FF0000A 		mov	r10, #0
 6199              	.LVL702:
 6200              	.L449:
1921:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6201              		.loc 1 1921 2 is_stmt 1 view .LVU1967
1921:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6202              		.loc 1 1921 6 is_stmt 0 view .LVU1968
 6203 0714 0021     		movs	r1, #0
 6204 0716 3846     		mov	r0, r7
 6205 0718 FFF7FEFF 		bl	find_char
 6206              	.LVL703:
1922:src/display.c **** 
 6207              		.loc 1 1922 2 is_stmt 1 view .LVU1969
1922:src/display.c **** 
 6208              		.loc 1 1922 23 is_stmt 0 view .LVU1970
 6209 071c C21B     		subs	r2, r0, r7
1922:src/display.c **** 
 6210              		.loc 1 1922 2 view .LVU1971
 6211 071e C2F12202 		rsb	r2, r2, #34
 6212 0722 3021     		movs	r1, #48
 6213 0724 FFF7FEFF 		bl	xset
 6214              	.LVL704:
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6215              		.loc 1 1924 2 is_stmt 1 view .LVU1972
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6216              		.loc 1 1924 18 is_stmt 0 view .LVU1973
 6217 0728 A74A     		ldr	r2, .L693
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6218              		.loc 1 1935 6 view .LVU1974
 6219 072a 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1924:src/display.c **** 	  separator_mode = SEP_COMMA;
 6220              		.loc 1 1924 5 view .LVU1975
 6221 072c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1932:src/display.c **** 	}
 6222              		.loc 1 1932 18 view .LVU1976
 6223 072e 002A     		cmp	r2, #0
 6224 0730 15BF     		itete	ne
ARM GAS  /tmp/cc9o0abE.s 			page 206


 6225 0732 4FF0020B 		movne	fp, #2
 6226 0736 2C26     		moveq	r6, #44
 6227 0738 2E26     		movne	r6, #46
 6228              	.LVL705:
1932:src/display.c **** 	}
 6229              		.loc 1 1932 18 view .LVU1977
 6230 073a 2E25     		moveq	r5, #46
 6231              	.LVL706:
1932:src/display.c **** 	}
 6232              		.loc 1 1932 18 view .LVU1978
 6233 073c 18BF     		it	ne
 6234 073e 2C25     		movne	r5, #44
 6235              	.LVL707:
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6236              		.loc 1 1935 2 is_stmt 1 view .LVU1979
1935:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6237              		.loc 1 1935 5 is_stmt 0 view .LVU1980
 6238 0740 13F0380F 		tst	r3, #56
 6239 0744 40F0D680 		bne	.L686
1962:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6240              		.loc 1 1962 4 is_stmt 1 view .LVU1981
 6241              	.LVL708:
1963:src/display.c **** 	  x[1] = decimal_mark;
 6242              		.loc 1 1963 4 view .LVU1982
 6243 0748 1022     		movs	r2, #16
 6244 074a 791C     		adds	r1, r7, #1
 6245 074c B81C     		adds	r0, r7, #2
 6246 074e FFF7FEFF 		bl	xcopy
 6247              	.LVL709:
1964:src/display.c **** 	  if (grouping) {
 6248              		.loc 1 1964 4 view .LVU1983
1966:src/display.c **** 	    x[5] = thousands_sep;
 6249              		.loc 1 1966 6 is_stmt 0 view .LVU1984
 6250 0752 0D22     		movs	r2, #13
 6251 0754 791D     		adds	r1, r7, #5
 6252 0756 B81D     		adds	r0, r7, #6
1964:src/display.c **** 	  if (grouping) {
 6253              		.loc 1 1964 9 view .LVU1985
 6254 0758 7D70     		strb	r5, [r7, #1]
1965:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6255              		.loc 1 1965 4 is_stmt 1 view .LVU1986
1966:src/display.c **** 	    x[5] = thousands_sep;
 6256              		.loc 1 1966 6 view .LVU1987
 6257 075a FFF7FEFF 		bl	xcopy
 6258              	.LVL710:
1967:src/display.c **** 	    x += 9;
 6259              		.loc 1 1967 6 view .LVU1988
1968:src/display.c **** 	  }
 6260              		.loc 1 1968 8 is_stmt 0 view .LVU1989
 6261 075e 07F10905 		add	r5, r7, #9
 6262              	.LVL711:
1967:src/display.c **** 	    x += 9;
 6263              		.loc 1 1967 11 view .LVU1990
 6264 0762 7E71     		strb	r6, [r7, #5]
1968:src/display.c **** 	  }
 6265              		.loc 1 1968 6 is_stmt 1 view .LVU1991
 6266              	.LVL712:
ARM GAS  /tmp/cc9o0abE.s 			page 207


1971:src/display.c **** 	    if (exp < 0) {
 6267              		.loc 1 1971 4 view .LVU1992
1971:src/display.c **** 	    if (exp < 0) {
 6268              		.loc 1 1971 7 is_stmt 0 view .LVU1993
 6269 0764 002C     		cmp	r4, #0
 6270 0766 00F0E780 		beq	.L453
1972:src/display.c **** 	      x[9] = '-';
 6271              		.loc 1 1972 6 is_stmt 1 view .LVU1994
1972:src/display.c **** 	      x[9] = '-';
 6272              		.loc 1 1972 9 is_stmt 0 view .LVU1995
 6273 076a B8F1000F 		cmp	r8, #0
1973:src/display.c **** 	      exp = -exp;
 6274              		.loc 1 1973 8 is_stmt 1 view .LVU1996
1974:src/display.c **** 	    }
 6275              		.loc 1 1974 8 view .LVU1997
1978:src/display.c **** 	    x[10] = '0' + j;
 6276              		.loc 1 1978 8 is_stmt 0 view .LVU1998
 6277 076e 974B     		ldr	r3, .L693+4
1980:src/display.c **** 	  }
 6278              		.loc 1 1980 18 view .LVU1999
 6279 0770 9749     		ldr	r1, .L693+8
1973:src/display.c **** 	      exp = -exp;
 6280              		.loc 1 1973 13 view .LVU2000
 6281 0772 B6BF     		itet	lt
 6282 0774 2D22     		movlt	r2, #45
1977:src/display.c **** 	    j = exp / 1000;
 6283              		.loc 1 1977 13 view .LVU2001
 6284 0776 2022     		movge	r2, #32
1974:src/display.c **** 	    }
 6285              		.loc 1 1974 12 view .LVU2002
 6286 0778 C8F10008 		rsblt	r8, r8, #0
 6287              	.LVL713:
1974:src/display.c **** 	    }
 6288              		.loc 1 1974 12 view .LVU2003
 6289 077c BA74     		strb	r2, [r7, #18]
1978:src/display.c **** 	    x[10] = '0' + j;
 6290              		.loc 1 1978 6 is_stmt 1 view .LVU2004
1978:src/display.c **** 	    x[10] = '0' + j;
 6291              		.loc 1 1978 8 is_stmt 0 view .LVU2005
 6292 077e A3FB0823 		umull	r2, r3, r3, r8
 6293 0782 9B09     		lsrs	r3, r3, #6
 6294              	.LVL714:
1979:src/display.c **** 	    exp -= 1000 * j;
 6295              		.loc 1 1979 6 is_stmt 1 view .LVU2006
1979:src/display.c **** 	    exp -= 1000 * j;
 6296              		.loc 1 1979 18 is_stmt 0 view .LVU2007
 6297 0784 03F13002 		add	r2, r3, #48
1980:src/display.c **** 	  }
 6298              		.loc 1 1980 10 view .LVU2008
 6299 0788 01FB0388 		mla	r8, r1, r3, r8
 6300              	.LVL715:
1979:src/display.c **** 	    exp -= 1000 * j;
 6301              		.loc 1 1979 12 view .LVU2009
 6302 078c FA74     		strb	r2, [r7, #19]
1980:src/display.c **** 	  }
 6303              		.loc 1 1980 6 is_stmt 1 view .LVU2010
 6304              	.LVL716:
ARM GAS  /tmp/cc9o0abE.s 			page 208


 6305              	.L455:
1986:src/display.c **** 	  *x = 0;
 6306              		.loc 1 1986 4 view .LVU2011
 6307 078e 0B22     		movs	r2, #11
 6308 0790 2946     		mov	r1, r5
 6309 0792 07F10A00 		add	r0, r7, #10
 6310 0796 FFF7FEFF 		bl	xcopy
 6311              	.LVL717:
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6312              		.loc 1 1987 4 view .LVU2012
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6313              		.loc 1 1987 7 is_stmt 0 view .LVU2013
 6314 079a 0022     		movs	r2, #0
1988:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6315              		.loc 1 1988 4 view .LVU2014
 6316 079c 4046     		mov	r0, r8
 6317 079e 0121     		movs	r1, #1
1987:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6318              		.loc 1 1987 7 view .LVU2015
 6319 07a0 7A72     		strb	r2, [r7, #9]
1988:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6320              		.loc 1 1988 4 is_stmt 1 view .LVU2016
 6321 07a2 FFF7FEFF 		bl	set_exp
 6322              	.LVL718:
1989:src/display.c **** 	}
 6323              		.loc 1 1989 4 view .LVU2017
1989:src/display.c **** 	}
 6324              		.loc 1 1989 4 is_stmt 0 view .LVU2018
 6325 07a6 A7EB0A0A 		sub	r10, r7, r10
 6326              	.LVL719:
1989:src/display.c **** 	}
 6327              		.loc 1 1989 6 view .LVU2019
 6328 07aa 0924     		movs	r4, #9
 6329              	.LVL720:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6330              		.loc 1 1992 11 is_stmt 1 view .LVU2020
 6331              	.L456:
1993:src/display.c **** 	  }
 6332              		.loc 1 1993 6 view .LVU2021
 6333              	.LBB390:
 6334              	.LBI390:
 375:src/display.c ****   if (sep == SEP_NONE)
 6335              		.loc 1 375 14 view .LVU2022
 6336              	.LBB391:
 376:src/display.c ****     return res;
 6337              		.loc 1 376 3 view .LVU2023
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6338              		.loc 1 378 3 view .LVU2024
 6339 07ac 2046     		mov	r0, r4
 6340 07ae 5946     		mov	r1, fp
 6341              	.LBE391:
 6342              	.LBE390:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6343              		.loc 1 1992 38 is_stmt 0 view .LVU2025
 6344 07b0 1B34     		adds	r4, r4, #27
 6345              	.LVL721:
 6346              	.LBB393:
ARM GAS  /tmp/cc9o0abE.s 			page 209


 6347              	.LBB392:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6348              		.loc 1 1992 38 view .LVU2026
 6349 07b2 FFF7FEFF 		bl	set_separator.part.0
 6350              	.LVL722:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6351              		.loc 1 1992 38 view .LVU2027
 6352              	.LBE392:
 6353              	.LBE393:
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6354              		.loc 1 1992 36 is_stmt 1 view .LVU2028
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6355              		.loc 1 1992 11 view .LVU2029
1992:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6356              		.loc 1 1992 4 is_stmt 0 view .LVU2030
 6357 07b6 512C     		cmp	r4, #81
 6358 07b8 F8DD     		ble	.L456
 6359 07ba 6C1E     		subs	r4, r5, #1
 6360              	.LVL723:
 6361              	.L458:
1998:src/display.c **** 
 6362              		.loc 1 1998 4 is_stmt 1 view .LVU2031
 6363 07bc 4846     		mov	r0, r9
 6364 07be 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1997:src/display.c **** 	  set_dig(j, x[i]);
 6365              		.loc 1 1997 33 is_stmt 0 view .LVU2032
 6366 07c2 09F10909 		add	r9, r9, #9
 6367              	.LVL724:
1998:src/display.c **** 
 6368              		.loc 1 1998 4 view .LVU2033
 6369 07c6 FFF7FEFF 		bl	set_dig
 6370              	.LVL725:
1997:src/display.c **** 	  set_dig(j, x[i]);
 6371              		.loc 1 1997 26 is_stmt 1 view .LVU2034
1997:src/display.c **** 	  set_dig(j, x[i]);
 6372              		.loc 1 1997 18 view .LVU2035
1997:src/display.c **** 	  set_dig(j, x[i]);
 6373              		.loc 1 1997 2 is_stmt 0 view .LVU2036
 6374 07ca B9F16C0F 		cmp	r9, #108
 6375 07ce F5D1     		bne	.L458
2000:src/display.c **** 	set_status(upper_str - negative);
 6376              		.loc 1 2000 2 is_stmt 1 view .LVU2037
2000:src/display.c **** 	set_status(upper_str - negative);
 6377              		.loc 1 2000 5 is_stmt 0 view .LVU2038
 6378 07d0 0023     		movs	r3, #0
2001:src/display.c ****       }
 6379              		.loc 1 2001 2 view .LVU2039
 6380 07d2 5046     		mov	r0, r10
2000:src/display.c **** 	set_status(upper_str - negative);
 6381              		.loc 1 2000 5 view .LVU2040
 6382 07d4 2B70     		strb	r3, [r5]
2001:src/display.c ****       }
 6383              		.loc 1 2001 2 is_stmt 1 view .LVU2041
 6384 07d6 FFF7FEFF 		bl	set_status
 6385              	.LVL726:
2002:src/display.c **** 
 6386              		.loc 1 2002 7 is_stmt 0 view .LVU2042
ARM GAS  /tmp/cc9o0abE.s 			page 210


 6387 07da 9FE5     		b	.L437
 6388              	.LVL727:
 6389              	.L557:
2002:src/display.c **** 
 6390              		.loc 1 2002 7 view .LVU2043
 6391              	.LBE389:
 6392              	.LBE388:
 6393              	.LBB398:
 6394              	.LBB383:
 6395 07dc 1146     		mov	r1, r2
 6396              	.LVL728:
2002:src/display.c **** 
 6397              		.loc 1 2002 7 view .LVU2044
 6398 07de 5046     		mov	r0, r10
 6399 07e0 FFF7FEFF 		bl	set_separator.part.0
 6400              	.LVL729:
2002:src/display.c **** 
 6401              		.loc 1 2002 7 view .LVU2045
 6402 07e4 7B4B     		ldr	r3, .L693+12
 6403 07e6 0446     		mov	r4, r0
 6404              	.LVL730:
2002:src/display.c **** 
 6405              		.loc 1 2002 7 view .LVU2046
 6406 07e8 ABE6     		b	.L555
 6407              	.LVL731:
 6408              	.L524:
2002:src/display.c **** 
 6409              		.loc 1 2002 7 view .LVU2047
 6410              	.LBE383:
 6411              	.LBE398:
2293:src/display.c **** 	    odig++;
 6412              		.loc 1 2293 6 is_stmt 1 view .LVU2048
2294:src/display.c **** 	    *obp++ = '.';
 6413              		.loc 1 2294 6 view .LVU2049
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6414              		.loc 1 2295 6 view .LVU2050
2293:src/display.c **** 	    odig++;
 6415              		.loc 1 2293 13 is_stmt 0 view .LVU2051
 6416 07ea 42F63063 		movw	r3, #11824
 6417 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2296:src/display.c **** 	      *obp++ = '0';
 6418              		.loc 1 2296 6 is_stmt 1 view .LVU2052
 6419              	.LVL732:
2296:src/display.c **** 	      *obp++ = '0';
 6420              		.loc 1 2296 20 view .LVU2053
2296:src/display.c **** 	      *obp++ = '0';
 6421              		.loc 1 2296 6 is_stmt 0 view .LVU2054
 6422 07f2 731C     		adds	r3, r6, #1
 6423              	.LVL733:
2296:src/display.c **** 	      *obp++ = '0';
 6424              		.loc 1 2296 6 view .LVU2055
 6425 07f4 00F0DD80 		beq	.L687
 6426 07f8 C6F10102 		rsb	r2, r6, #1
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6427              		.loc 1 2295 10 view .LVU2056
 6428 07fc 0DF12600 		add	r0, sp, #38
 6429              	.LVL734:
ARM GAS  /tmp/cc9o0abE.s 			page 211


2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6430              		.loc 1 2295 10 view .LVU2057
 6431 0800 079D     		ldr	r5, [sp, #28]
 6432 0802 3A44     		add	r2, r2, r7
 6433 0804 0346     		mov	r3, r0
 6434              	.LVL735:
2297:src/display.c **** 	      odig++;
 6435              		.loc 1 2297 15 view .LVU2058
 6436 0806 3021     		movs	r1, #48
 6437              	.LVL736:
 6438              	.L532:
2297:src/display.c **** 	      odig++;
 6439              		.loc 1 2297 8 is_stmt 1 discriminator 3 view .LVU2059
2297:src/display.c **** 	      odig++;
 6440              		.loc 1 2297 15 is_stmt 0 discriminator 3 view .LVU2060
 6441 0808 03F8011B 		strb	r1, [r3], #1
 6442              	.LVL737:
2298:src/display.c **** 	      dd--;
 6443              		.loc 1 2298 8 is_stmt 1 discriminator 3 view .LVU2061
2299:src/display.c **** 	    }
 6444              		.loc 1 2299 8 discriminator 3 view .LVU2062
2296:src/display.c **** 	      *obp++ = '0';
 6445              		.loc 1 2296 25 discriminator 3 view .LVU2063
2296:src/display.c **** 	      *obp++ = '0';
 6446              		.loc 1 2296 20 discriminator 3 view .LVU2064
2296:src/display.c **** 	      *obp++ = '0';
 6447              		.loc 1 2296 6 is_stmt 0 discriminator 3 view .LVU2065
 6448 080c 9342     		cmp	r3, r2
 6449 080e FBD1     		bne	.L532
 6450 0810 7319     		adds	r3, r6, r5
 6451              	.LVL738:
2296:src/display.c **** 	      *obp++ = '0';
 6452              		.loc 1 2296 6 discriminator 3 view .LVU2066
 6453 0812 6FEA0608 		mvn	r8, r6
 6454 0816 0133     		adds	r3, r3, #1
 6455 0818 8044     		add	r8, r8, r0
 6456 081a 7542     		rsbs	r5, r6, #0
 6457              	.L531:
 6458              	.LVL739:
2301:src/display.c **** 	      *obp++ = *p++;
 6459              		.loc 1 2301 12 is_stmt 1 view .LVU2067
2301:src/display.c **** 	      *obp++ = *p++;
 6460              		.loc 1 2301 15 is_stmt 0 view .LVU2068
 6461 081c 5A1E     		subs	r2, r3, #1
2301:src/display.c **** 	      *obp++ = *p++;
 6462              		.loc 1 2301 12 view .LVU2069
 6463 081e 002B     		cmp	r3, #0
2301:src/display.c **** 	      *obp++ = *p++;
 6464              		.loc 1 2301 15 view .LVU2070
 6465 0820 0792     		str	r2, [sp, #28]
2301:src/display.c **** 	      *obp++ = *p++;
 6466              		.loc 1 2301 12 view .LVU2071
 6467 0822 7FF76FAE 		ble	.L513
 6468 0826 4344     		add	r3, r3, r8
 6469 0828 581E     		subs	r0, r3, #1
 6470 082a 08F1FF38 		add	r8, r8, #-1
 6471              	.LVL740:
ARM GAS  /tmp/cc9o0abE.s 			page 212


 6472              	.L533:
2302:src/display.c **** 	      odig++;
 6473              		.loc 1 2302 8 is_stmt 1 view .LVU2072
2302:src/display.c **** 	      odig++;
 6474              		.loc 1 2302 15 is_stmt 0 view .LVU2073
 6475 082e 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6476              	.LVL741:
2302:src/display.c **** 	      odig++;
 6477              		.loc 1 2302 15 view .LVU2074
 6478 0832 08F8011F 		strb	r1, [r8, #1]!
2303:src/display.c **** 	    }
 6479              		.loc 1 2303 8 is_stmt 1 view .LVU2075
2301:src/display.c **** 	      *obp++ = *p++;
 6480              		.loc 1 2301 12 view .LVU2076
 6481 0836 8045     		cmp	r8, r0
 6482 0838 F9D1     		bne	.L533
 6483              	.LVL742:
2301:src/display.c **** 	      *obp++ = *p++;
 6484              		.loc 1 2301 12 is_stmt 0 view .LVU2077
 6485 083a 681C     		adds	r0, r5, #1
 6486 083c 4FF0FF31 		mov	r1, #-1
 6487 0840 1518     		adds	r5, r2, r0
 6488 0842 9846     		mov	r8, r3
 6489 0844 0791     		str	r1, [sp, #28]
 6490 0846 5DE6     		b	.L513
 6491              	.LVL743:
 6492              	.L536:
2319:src/display.c **** 	    odig++;
 6493              		.loc 1 2319 6 is_stmt 1 view .LVU2078
2319:src/display.c **** 	    odig++;
 6494              		.loc 1 2319 13 is_stmt 0 view .LVU2079
 6495 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6496 084c 8DF82430 		strb	r3, [sp, #36]
2320:src/display.c **** 	    dd--;
 6497              		.loc 1 2320 6 is_stmt 1 view .LVU2080
 6498              	.LVL744:
2321:src/display.c **** 	    exp--;
 6499              		.loc 1 2321 6 view .LVU2081
2321:src/display.c **** 	    exp--;
 6500              		.loc 1 2321 8 is_stmt 0 view .LVU2082
 6501 0850 013A     		subs	r2, r2, #1
2322:src/display.c **** 	  case -2:
 6502              		.loc 1 2322 6 is_stmt 1 view .LVU2083
2322:src/display.c **** 	  case -2:
 6503              		.loc 1 2322 9 is_stmt 0 view .LVU2084
 6504 0852 013E     		subs	r6, r6, #1
 6505              	.LVL745:
2322:src/display.c **** 	  case -2:
 6506              		.loc 1 2322 9 view .LVU2085
 6507 0854 0325     		movs	r5, #3
2319:src/display.c **** 	    odig++;
 6508              		.loc 1 2319 17 view .LVU2086
 6509 0856 0DF1590B 		add	fp, sp, #89
 6510              	.LVL746:
2319:src/display.c **** 	    odig++;
 6511              		.loc 1 2319 10 view .LVU2087
 6512 085a 0DF12501 		add	r1, sp, #37
ARM GAS  /tmp/cc9o0abE.s 			page 213


 6513              	.LVL747:
 6514              	.L539:
2325:src/display.c **** 	    odig++;
 6515              		.loc 1 2325 6 is_stmt 1 view .LVU2088
2325:src/display.c **** 	    odig++;
 6516              		.loc 1 2325 13 is_stmt 0 view .LVU2089
 6517 085e 1BF8013B 		ldrb	r3, [fp], #1	@ zero_extendqisi2
 6518              	.LVL748:
2325:src/display.c **** 	    odig++;
 6519              		.loc 1 2325 13 view .LVU2090
 6520 0862 01F8013B 		strb	r3, [r1], #1
 6521              	.LVL749:
2326:src/display.c **** 	    dd--;
 6522              		.loc 1 2326 6 is_stmt 1 view .LVU2091
2327:src/display.c **** 	    exp--;
 6523              		.loc 1 2327 6 view .LVU2092
2327:src/display.c **** 	    exp--;
 6524              		.loc 1 2327 8 is_stmt 0 view .LVU2093
 6525 0866 013A     		subs	r2, r2, #1
2328:src/display.c **** 	  case 0:
 6526              		.loc 1 2328 6 is_stmt 1 view .LVU2094
2328:src/display.c **** 	  case 0:
 6527              		.loc 1 2328 9 is_stmt 0 view .LVU2095
 6528 0868 013E     		subs	r6, r6, #1
 6529              	.LVL750:
2328:src/display.c **** 	  case 0:
 6530              		.loc 1 2328 9 view .LVU2096
 6531 086a 2CE6     		b	.L503
 6532              	.LVL751:
 6533              	.L538:
2328:src/display.c **** 	  case 0:
 6534              		.loc 1 2328 9 view .LVU2097
 6535 086c 079A     		ldr	r2, [sp, #28]
2316:src/display.c **** 	  case -1:
 6536              		.loc 1 2316 16 view .LVU2098
 6537 086e 0225     		movs	r5, #2
2021:src/display.c **** 	int odig = 0;
 6538              		.loc 1 2021 15 view .LVU2099
 6539 0870 3946     		mov	r1, r7
 6540 0872 F4E7     		b	.L539
 6541              	.LVL752:
 6542              	.L484:
2184:src/display.c **** 	    /* We might have push the fixed decimals off the
 6543              		.loc 1 2184 6 is_stmt 1 view .LVU2100
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6544              		.loc 1 2188 6 view .LVU2101
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6545              		.loc 1 2188 9 is_stmt 0 view .LVU2102
 6546 0874 0299     		ldr	r1, [sp, #8]
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6547              		.loc 1 2188 23 view .LVU2103
 6548 0876 9319     		adds	r3, r2, r6
2188:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6549              		.loc 1 2188 9 view .LVU2104
 6550 0878 9942     		cmp	r1, r3
2189:src/display.c **** 	  }
 6551              		.loc 1 2189 8 is_stmt 1 view .LVU2105
ARM GAS  /tmp/cc9o0abE.s 			page 214


2189:src/display.c **** 	  }
 6552              		.loc 1 2189 30 is_stmt 0 view .LVU2106
 6553 087a DFBF     		itttt	le
 6554 087c 029B     		ldrle	r3, [sp, #8]
 6555 087e 03F1FF32 		addle	r2, r3, #-1
2189:src/display.c **** 	  }
 6556              		.loc 1 2189 35 view .LVU2107
 6557 0882 921B     		suble	r2, r2, r6
2189:src/display.c **** 	  }
 6558              		.loc 1 2189 11 view .LVU2108
 6559 0884 0792     		strle	r2, [sp, #28]
 6560 0886 3146     		mov	r1, r6
 6561 0888 6AE4     		b	.L481
 6562              	.LVL753:
 6563              	.L509:
2228:src/display.c **** 	      odig++;
 6564              		.loc 1 2228 8 is_stmt 1 view .LVU2109
2228:src/display.c **** 	      odig++;
 6565              		.loc 1 2228 15 is_stmt 0 view .LVU2110
 6566 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6567 088e 8DF82410 		strb	r1, [sp, #36]
2229:src/display.c **** 	      dd--;
 6568              		.loc 1 2229 8 is_stmt 1 view .LVU2111
 6569              	.LVL754:
2230:src/display.c **** 	      exp--;
 6570              		.loc 1 2230 8 view .LVU2112
2230:src/display.c **** 	      exp--;
 6571              		.loc 1 2230 10 is_stmt 0 view .LVU2113
 6572 0892 013A     		subs	r2, r2, #1
2231:src/display.c **** 	    case -2:
 6573              		.loc 1 2231 8 is_stmt 1 view .LVU2114
2231:src/display.c **** 	    case -2:
 6574              		.loc 1 2231 11 is_stmt 0 view .LVU2115
 6575 0894 013E     		subs	r6, r6, #1
 6576              	.LVL755:
2231:src/display.c **** 	    case -2:
 6577              		.loc 1 2231 11 view .LVU2116
 6578 0896 0325     		movs	r5, #3
2228:src/display.c **** 	      odig++;
 6579              		.loc 1 2228 19 view .LVU2117
 6580 0898 0DF1590B 		add	fp, sp, #89
 6581              	.LVL756:
2228:src/display.c **** 	      odig++;
 6582              		.loc 1 2228 12 view .LVU2118
 6583 089c 0DF12501 		add	r1, sp, #37
 6584              	.LVL757:
 6585              	.L512:
2234:src/display.c **** 	      odig++;
 6586              		.loc 1 2234 8 is_stmt 1 view .LVU2119
2234:src/display.c **** 	      odig++;
 6587              		.loc 1 2234 15 is_stmt 0 view .LVU2120
 6588 08a0 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2
 6589              	.LVL758:
2234:src/display.c **** 	      odig++;
 6590              		.loc 1 2234 15 view .LVU2121
 6591 08a4 01F8010B 		strb	r0, [r1], #1
 6592              	.LVL759:
ARM GAS  /tmp/cc9o0abE.s 			page 215


2235:src/display.c **** 	      dd--;
 6593              		.loc 1 2235 8 is_stmt 1 view .LVU2122
2236:src/display.c **** 	      exp--;
 6594              		.loc 1 2236 8 view .LVU2123
2237:src/display.c **** 	    case 0:
 6595              		.loc 1 2237 8 view .LVU2124
2236:src/display.c **** 	      exp--;
 6596              		.loc 1 2236 10 is_stmt 0 view .LVU2125
 6597 08a8 013A     		subs	r2, r2, #1
 6598 08aa 0792     		str	r2, [sp, #28]
2237:src/display.c **** 	    case 0:
 6599              		.loc 1 2237 11 view .LVU2126
 6600 08ac 013E     		subs	r6, r6, #1
 6601              	.LVL760:
 6602              	.L508:
2239:src/display.c **** 	    };
 6603              		.loc 1 2239 8 is_stmt 1 view .LVU2127
2240:src/display.c **** 	    *obp++ = *p++;
 6604              		.loc 1 2240 7 view .LVU2128
2241:src/display.c **** 	    odig++;
 6605              		.loc 1 2241 6 view .LVU2129
2241:src/display.c **** 	    odig++;
 6606              		.loc 1 2241 17 is_stmt 0 view .LVU2130
 6607 08ae 5A46     		mov	r2, fp
 6608              	.LVL761:
2241:src/display.c **** 	    odig++;
 6609              		.loc 1 2241 13 view .LVU2131
 6610 08b0 8846     		mov	r8, r1
 6611 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6612              	.LVL762:
2241:src/display.c **** 	    odig++;
 6613              		.loc 1 2241 13 view .LVU2132
 6614 08b6 08F8020B 		strb	r0, [r8], #2
2242:src/display.c **** 	    *obp++ = '.';
 6615              		.loc 1 2242 6 is_stmt 1 view .LVU2133
2243:src/display.c **** 	    for (i=1; i<count; i++) {
 6616              		.loc 1 2243 6 view .LVU2134
 6617              	.LVL763:
2244:src/display.c **** 	      *obp++ = *p++;
 6618              		.loc 1 2244 6 is_stmt 0 view .LVU2135
 6619 08ba 012B     		cmp	r3, #1
2243:src/display.c **** 	    for (i=1; i<count; i++) {
 6620              		.loc 1 2243 13 view .LVU2136
 6621 08bc 4FF02E00 		mov	r0, #46
 6622 08c0 4870     		strb	r0, [r1, #1]
2244:src/display.c **** 	      *obp++ = *p++;
 6623              		.loc 1 2244 6 is_stmt 1 view .LVU2137
 6624              	.LVL764:
2244:src/display.c **** 	      *obp++ = *p++;
 6625              		.loc 1 2244 16 view .LVU2138
2244:src/display.c **** 	      *obp++ = *p++;
 6626              		.loc 1 2244 6 is_stmt 0 view .LVU2139
 6627 08c2 32DD     		ble	.L583
2244:src/display.c **** 	      *obp++ = *p++;
 6628              		.loc 1 2244 6 view .LVU2140
 6629 08c4 0131     		adds	r1, r1, #1
 6630 08c6 9B44     		add	fp, fp, r3
ARM GAS  /tmp/cc9o0abE.s 			page 216


 6631              	.LVL765:
 6632              	.L514:
2245:src/display.c **** 	      odig++;
 6633              		.loc 1 2245 8 is_stmt 1 discriminator 3 view .LVU2141
2245:src/display.c **** 	      odig++;
 6634              		.loc 1 2245 15 is_stmt 0 discriminator 3 view .LVU2142
 6635 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6636              	.LVL766:
2245:src/display.c **** 	      odig++;
 6637              		.loc 1 2245 15 discriminator 3 view .LVU2143
 6638 08cc 01F8010F 		strb	r0, [r1, #1]!
2246:src/display.c **** 	    }
 6639              		.loc 1 2246 8 is_stmt 1 discriminator 3 view .LVU2144
2244:src/display.c **** 	      *obp++ = *p++;
 6640              		.loc 1 2244 25 discriminator 3 view .LVU2145
2244:src/display.c **** 	      *obp++ = *p++;
 6641              		.loc 1 2244 16 discriminator 3 view .LVU2146
2244:src/display.c **** 	      *obp++ = *p++;
 6642              		.loc 1 2244 6 is_stmt 0 discriminator 3 view .LVU2147
 6643 08d0 5A45     		cmp	r2, fp
 6644 08d2 F9D1     		bne	.L514
 6645 08d4 013B     		subs	r3, r3, #1
 6646              	.LVL767:
2244:src/display.c **** 	      *obp++ = *p++;
 6647              		.loc 1 2244 6 discriminator 3 view .LVU2148
 6648 08d6 9844     		add	r8, r8, r3
 6649 08d8 1D44     		add	r5, r5, r3
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6650              		.loc 1 2248 15 view .LVU2149
 6651 08da 4FF00109 		mov	r9, #1
 6652 08de 11E6     		b	.L513
 6653              	.LVL768:
 6654              	.L511:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6655              		.loc 1 2248 15 view .LVU2150
 6656 08e0 079A     		ldr	r2, [sp, #28]
2225:src/display.c **** 	    case -1:
 6657              		.loc 1 2225 24 view .LVU2151
 6658 08e2 0225     		movs	r5, #2
2021:src/display.c **** 	int odig = 0;
 6659              		.loc 1 2021 15 view .LVU2152
 6660 08e4 3946     		mov	r1, r7
 6661 08e6 DBE7     		b	.L512
 6662              	.LVL769:
 6663              	.L551:
2370:src/display.c **** 	  }
 6664              		.loc 1 2370 8 is_stmt 1 view .LVU2153
 6665 08e8 2D21     		movs	r1, #45
 6666 08ea AAF10900 		sub	r0, r10, #9
 6667 08ee FFF7FEFF 		bl	set_dig
 6668              	.LVL770:
 6669 08f2 ECE4     		b	.L547
 6670              	.LVL771:
 6671              	.L686:
 6672              	.LBB399:
 6673              	.LBB396:
 6674              	.LBB394:
ARM GAS  /tmp/cc9o0abE.s 			page 217


1937:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6675              		.loc 1 1937 4 view .LVU2154
1940:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6676              		.loc 1 1940 4 view .LVU2155
1940:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6677              		.loc 1 1940 14 is_stmt 0 view .LVU2156
 6678 08f4 07F1030A 		add	r10, r7, #3
 6679              	.LVL772:
1941:src/display.c **** 	  if (grouping) {
 6680              		.loc 1 1941 4 is_stmt 1 view .LVU2157
 6681 08f8 3749     		ldr	r1, .L693+16
 6682 08fa 0D22     		movs	r2, #13
 6683 08fc 5046     		mov	r0, r10
 6684 08fe FFF7FEFF 		bl	xcopy
 6685              	.LVL773:
1942:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6686              		.loc 1 1942 4 view .LVU2158
1943:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6687              		.loc 1 1943 6 view .LVU2159
 6688 0902 1322     		movs	r2, #19
 6689 0904 B918     		adds	r1, r7, r2
 6690 0906 07F11400 		add	r0, r7, #20
 6691 090a FFF7FEFF 		bl	xcopy
 6692              	.LVL774:
1944:src/display.c **** 	    x += 3 + 13 + 7;
 6693              		.loc 1 1944 6 view .LVU2160
1945:src/display.c **** 	  }
 6694              		.loc 1 1945 8 is_stmt 0 view .LVU2161
 6695 090e 07F11705 		add	r5, r7, #23
 6696              	.LVL775:
1944:src/display.c **** 	    x += 3 + 13 + 7;
 6697              		.loc 1 1944 24 view .LVU2162
 6698 0912 FE74     		strb	r6, [r7, #19]
1945:src/display.c **** 	  }
 6699              		.loc 1 1945 6 is_stmt 1 view .LVU2163
 6700              	.LVL776:
1958:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6701              		.loc 1 1958 4 view .LVU2164
1959:src/display.c **** 	}
 6702              		.loc 1 1959 4 view .LVU2165
1959:src/display.c **** 	}
 6703              		.loc 1 1959 6 is_stmt 0 view .LVU2166
 6704 0914 1B24     		movs	r4, #27
 6705              	.LVL777:
1959:src/display.c **** 	}
 6706              		.loc 1 1959 6 view .LVU2167
 6707              	.LBE394:
 6708 0916 49E7     		b	.L456
 6709              	.LVL778:
 6710              	.L682:
1959:src/display.c **** 	}
 6711              		.loc 1 1959 6 view .LVU2168
 6712              	.LBE396:
 6713              	.LBE399:
2058:src/display.c **** 	      return;
 6714              		.loc 1 2058 8 is_stmt 1 view .LVU2169
 6715 0918 5046     		mov	r0, r10
ARM GAS  /tmp/cc9o0abE.s 			page 218


 6716 091a FFF7FEFF 		bl	set_x_hms
 6717              	.LVL779:
2059:src/display.c **** 	    }
 6718              		.loc 1 2059 8 view .LVU2170
 6719 091e FDE4     		b	.L437
 6720              	.LVL780:
 6721              	.L581:
2220:src/display.c **** 	  if (count != *display_digits)
 6722              		.loc 1 2220 4 is_stmt 0 view .LVU2171
 6723 0920 029B     		ldr	r3, [sp, #8]
 6724 0922 72E4     		b	.L504
 6725              	.LVL781:
 6726              	.L582:
2225:src/display.c **** 	    case -1:
 6727              		.loc 1 2225 24 view .LVU2172
 6728 0924 0125     		movs	r5, #1
 6729 0926 3946     		mov	r1, r7
 6730 0928 C1E7     		b	.L508
 6731              	.LVL782:
 6732              	.L583:
2248:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6733              		.loc 1 2248 15 view .LVU2173
 6734 092a 4FF00109 		mov	r9, #1
 6735 092e E9E5     		b	.L513
 6736              	.LVL783:
 6737              	.L487:
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6738              		.loc 1 2198 4 is_stmt 1 view .LVU2174
2198:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6739              		.loc 1 2198 7 is_stmt 0 view .LVU2175
 6740 0930 5B45     		cmp	r3, fp
 6741 0932 7FF42FAC 		bne	.L566
 6742 0936 4DE5     		b	.L567
 6743              	.LVL784:
 6744              	.L453:
 6745              	.LBB400:
 6746              	.LBB397:
1983:src/display.c **** 	    x[10] = '\0';
 6747              		.loc 1 1983 6 is_stmt 1 view .LVU2176
1984:src/display.c **** 	  }
 6748              		.loc 1 1984 6 view .LVU2177
1983:src/display.c **** 	    x[10] = '\0';
 6749              		.loc 1 1983 11 is_stmt 0 view .LVU2178
 6750 0938 7C82     		strh	r4, [r7, #18]	@ movhi
 6751 093a 28E7     		b	.L455
 6752              	.LVL785:
 6753              	.L685:
 6754              	.LBB395:
1908:src/display.c **** 
 6755              		.loc 1 1908 4 is_stmt 1 view .LVU2179
1910:src/display.c **** 	  xcopy(x, small_minus, 4);
 6756              		.loc 1 1910 4 view .LVU2180
 6757 093c 2222     		movs	r2, #34
 6758 093e 0DF12501 		add	r1, sp, #37
 6759 0942 0AA8     		add	r0, sp, #40
 6760              	.LVL786:
1910:src/display.c **** 	  xcopy(x, small_minus, 4);
ARM GAS  /tmp/cc9o0abE.s 			page 219


 6761              		.loc 1 1910 4 is_stmt 0 view .LVU2181
 6762 0944 FFF7FEFF 		bl	xcopy
 6763              	.LVL787:
1911:src/display.c **** 	  x += 4;
 6764              		.loc 1 1911 4 is_stmt 1 view .LVU2182
 6765 0948 3846     		mov	r0, r7
 6766 094a 2449     		ldr	r1, .L693+20
 6767 094c 0422     		movs	r2, #4
 6768 094e FFF7FEFF 		bl	xcopy
 6769              	.LVL788:
1912:src/display.c **** 	  negative = 4;
 6770              		.loc 1 1912 4 view .LVU2183
1913:src/display.c **** #else
 6771              		.loc 1 1913 4 view .LVU2184
1912:src/display.c **** 	  negative = 4;
 6772              		.loc 1 1912 6 is_stmt 0 view .LVU2185
 6773 0952 0AAF     		add	r7, sp, #40
 6774              	.LVL789:
1913:src/display.c **** #else
 6775              		.loc 1 1913 13 view .LVU2186
 6776 0954 4FF0040A 		mov	r10, #4
 6777              	.LVL790:
1913:src/display.c **** #else
 6778              		.loc 1 1913 13 view .LVU2187
 6779              	.LBE395:
 6780 0958 DCE6     		b	.L449
 6781              	.LVL791:
 6782              	.L515:
1913:src/display.c **** #else
 6783              		.loc 1 1913 13 view .LVU2188
 6784              	.LBE397:
 6785              	.LBE400:
2264:src/display.c **** 	    odig++;
 6786              		.loc 1 2264 6 is_stmt 1 view .LVU2189
2265:src/display.c **** 	    *obp++ = '.';
 6787              		.loc 1 2265 6 view .LVU2190
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6788              		.loc 1 2266 6 view .LVU2191
2264:src/display.c **** 	    odig++;
 6789              		.loc 1 2264 13 is_stmt 0 view .LVU2192
 6790 095a 42F63062 		movw	r2, #11824
 6791 095e ADF82420 		strh	r2, [sp, #36]	@ movhi
2267:src/display.c **** 	      *obp++ = '0';
 6792              		.loc 1 2267 6 is_stmt 1 view .LVU2193
 6793              	.LVL792:
2267:src/display.c **** 	      *obp++ = '0';
 6794              		.loc 1 2267 20 view .LVU2194
2267:src/display.c **** 	      *obp++ = '0';
 6795              		.loc 1 2267 6 is_stmt 0 view .LVU2195
 6796 0962 721C     		adds	r2, r6, #1
 6797              	.LVL793:
2267:src/display.c **** 	      *obp++ = '0';
 6798              		.loc 1 2267 6 view .LVU2196
 6799 0964 2AD0     		beq	.L584
 6800 0966 C6F10101 		rsb	r1, r6, #1
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6801              		.loc 1 2266 10 view .LVU2197
ARM GAS  /tmp/cc9o0abE.s 			page 220


 6802 096a 0DF12600 		add	r0, sp, #38
 6803              	.LVL794:
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6804              		.loc 1 2266 10 view .LVU2198
 6805 096e 3944     		add	r1, r1, r7
 6806 0970 0246     		mov	r2, r0
 6807              	.LVL795:
2268:src/display.c **** 	      odig++;
 6808              		.loc 1 2268 15 view .LVU2199
 6809 0972 3025     		movs	r5, #48
 6810              	.LVL796:
 6811              	.L522:
2268:src/display.c **** 	      odig++;
 6812              		.loc 1 2268 8 is_stmt 1 discriminator 3 view .LVU2200
2268:src/display.c **** 	      odig++;
 6813              		.loc 1 2268 15 is_stmt 0 discriminator 3 view .LVU2201
 6814 0974 02F8015B 		strb	r5, [r2], #1
 6815              	.LVL797:
2269:src/display.c **** 	    }
 6816              		.loc 1 2269 8 is_stmt 1 discriminator 3 view .LVU2202
2267:src/display.c **** 	      *obp++ = '0';
 6817              		.loc 1 2267 25 discriminator 3 view .LVU2203
2267:src/display.c **** 	      *obp++ = '0';
 6818              		.loc 1 2267 20 discriminator 3 view .LVU2204
2267:src/display.c **** 	      *obp++ = '0';
 6819              		.loc 1 2267 6 is_stmt 0 discriminator 3 view .LVU2205
 6820 0978 8A42     		cmp	r2, r1
 6821 097a FBD1     		bne	.L522
 6822 097c 6FEA0608 		mvn	r8, r6
 6823 0980 8044     		add	r8, r8, r0
 6824 0982 7542     		rsbs	r5, r6, #0
 6825              	.LVL798:
 6826              	.L521:
2271:src/display.c **** 	      *obp++ = *p++;
 6827              		.loc 1 2271 16 is_stmt 1 view .LVU2206
2271:src/display.c **** 	      *obp++ = *p++;
 6828              		.loc 1 2271 6 is_stmt 0 view .LVU2207
 6829 0984 002B     		cmp	r3, #0
 6830 0986 7FF7BDAD 		ble	.L513
 6831 098a 581E     		subs	r0, r3, #1
 6832 098c 4044     		add	r0, r0, r8
 6833 098e 08F1FF32 		add	r2, r8, #-1
 6834              	.LVL799:
 6835              	.L523:
2272:src/display.c **** 	      odig++;
 6836              		.loc 1 2272 8 is_stmt 1 discriminator 3 view .LVU2208
2272:src/display.c **** 	      odig++;
 6837              		.loc 1 2272 15 is_stmt 0 discriminator 3 view .LVU2209
 6838 0992 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6839              	.LVL800:
2272:src/display.c **** 	      odig++;
 6840              		.loc 1 2272 15 discriminator 3 view .LVU2210
 6841 0996 02F8011F 		strb	r1, [r2, #1]!
2273:src/display.c **** 	    }
 6842              		.loc 1 2273 8 is_stmt 1 discriminator 3 view .LVU2211
2271:src/display.c **** 	      *obp++ = *p++;
 6843              		.loc 1 2271 25 discriminator 3 view .LVU2212
ARM GAS  /tmp/cc9o0abE.s 			page 221


 6844              	.LVL801:
2271:src/display.c **** 	      *obp++ = *p++;
 6845              		.loc 1 2271 16 discriminator 3 view .LVU2213
2271:src/display.c **** 	      *obp++ = *p++;
 6846              		.loc 1 2271 6 is_stmt 0 discriminator 3 view .LVU2214
 6847 099a 9042     		cmp	r0, r2
 6848 099c F9D1     		bne	.L523
 6849              	.LVL802:
2271:src/display.c **** 	      *obp++ = *p++;
 6850              		.loc 1 2271 6 discriminator 3 view .LVU2215
 6851 099e 9844     		add	r8, r8, r3
 6852              	.LVL803:
2271:src/display.c **** 	      *obp++ = *p++;
 6853              		.loc 1 2271 6 discriminator 3 view .LVU2216
 6854 09a0 1D44     		add	r5, r5, r3
 6855 09a2 AFE5     		b	.L513
 6856              	.LVL804:
 6857              	.L684:
2214:src/display.c **** 
 6858              		.loc 1 2214 2 is_stmt 1 view .LVU2217
 6859 09a4 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2214:src/display.c **** 
 6860              		.loc 1 2214 9 is_stmt 0 view .LVU2218
 6861 09a8 0BEB0E03 		add	r3, fp, lr
 6862              	.LVL805:
2214:src/display.c **** 
 6863              		.loc 1 2214 45 is_stmt 1 view .LVU2219
2214:src/display.c **** 
 6864              		.loc 1 2214 2 is_stmt 0 view .LVU2220
 6865 09ac 51B1     		cbz	r1, .L688
2203:src/display.c **** 	      extra_digits = 0;
 6866              		.loc 1 2203 37 view .LVU2221
 6867 09ae 0225     		movs	r5, #2
 6868 09b0 07E4     		b	.L565
 6869              	.LVL806:
 6870              	.L687:
2203:src/display.c **** 	      extra_digits = 0;
 6871              		.loc 1 2203 37 view .LVU2222
 6872 09b2 079B     		ldr	r3, [sp, #28]
 6873              	.LVL807:
2294:src/display.c **** 	    *obp++ = '.';
 6874              		.loc 1 2294 10 view .LVU2223
 6875 09b4 0125     		movs	r5, #1
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6876              		.loc 1 2295 10 view .LVU2224
 6877 09b6 0DF12608 		add	r8, sp, #38
 6878              	.LVL808:
2295:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6879              		.loc 1 2295 10 view .LVU2225
 6880 09ba 2FE7     		b	.L531
 6881              	.LVL809:
 6882              	.L584:
2265:src/display.c **** 	    *obp++ = '.';
 6883              		.loc 1 2265 10 view .LVU2226
 6884 09bc 0125     		movs	r5, #1
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6885              		.loc 1 2266 10 view .LVU2227
ARM GAS  /tmp/cc9o0abE.s 			page 222


 6886 09be 0DF12608 		add	r8, sp, #38
 6887              	.LVL810:
2266:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6888              		.loc 1 2266 10 view .LVU2228
 6889 09c2 DFE7     		b	.L521
 6890              	.LVL811:
 6891              	.L688:
2021:src/display.c **** 	int odig = 0;
 6892              		.loc 1 2021 15 view .LVU2229
 6893 09c4 3946     		mov	r1, r7
 6894 09c6 7EE5     		b	.L503
 6895              	.L694:
 6896              		.align	2
 6897              	.L693:
 6898 09c8 00000000 		.word	.LANCHOR1
 6899 09cc D34D6210 		.word	274877907
 6900 09d0 18FCFFFF 		.word	-1000
 6901 09d4 00000000 		.word	.LANCHOR0
 6902 09d8 00000000 		.word	.LANCHOR11
 6903 09dc 00000000 		.word	.LANCHOR10
 6904              		.cfi_endproc
 6905              	.LFE23:
 6907              		.section	.text.set_x,"ax",%progbits
 6908              		.align	1
 6909              		.p2align 2,,3
 6910              		.syntax unified
 6911              		.thumb
 6912              		.thumb_func
 6913              		.fpu fpv4-sp-d16
 6915              	set_x:
 6916              	.LVL812:
 6917              	.LFB22:
2009:src/display.c **** 	decNumber z;
 6918              		.loc 1 2009 66 is_stmt 1 view -0
 6919              		.cfi_startproc
 6920              		@ args = 0, pretend = 0, frame = 40
 6921              		@ frame_needed = 0, uses_anonymous_args = 0
2010:src/display.c **** 	int digits = DISPLAY_DIGITS;
 6922              		.loc 1 2010 2 view .LVU2231
2011:src/display.c **** 
 6923              		.loc 1 2011 2 view .LVU2232
2009:src/display.c **** 	decNumber z;
 6924              		.loc 1 2009 66 is_stmt 0 view .LVU2233
 6925 0000 30B5     		push	{r4, r5, lr}
 6926              		.cfi_def_cfa_offset 12
 6927              		.cfi_offset 4, -12
 6928              		.cfi_offset 5, -8
 6929              		.cfi_offset 14, -4
 6930 0002 8BB0     		sub	sp, sp, #44
 6931              		.cfi_def_cfa_offset 56
2011:src/display.c **** 
 6932              		.loc 1 2011 6 view .LVU2234
 6933 0004 0C23     		movs	r3, #12
2014:src/display.c **** 	else
 6934              		.loc 1 2014 4 view .LVU2235
 6935 0006 01AD     		add	r5, sp, #4
2009:src/display.c **** 	decNumber z;
ARM GAS  /tmp/cc9o0abE.s 			page 223


 6936              		.loc 1 2009 66 view .LVU2236
 6937 0008 0C46     		mov	r4, r1
2011:src/display.c **** 
 6938              		.loc 1 2011 6 view .LVU2237
 6939 000a 0093     		str	r3, [sp]
2013:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6940              		.loc 1 2013 2 is_stmt 1 view .LVU2238
2014:src/display.c **** 	else
 6941              		.loc 1 2014 4 is_stmt 0 view .LVU2239
 6942 000c 2946     		mov	r1, r5
 6943              	.LVL813:
2013:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 6944              		.loc 1 2013 5 view .LVU2240
 6945 000e 42B1     		cbz	r2, .L696
2014:src/display.c **** 	else
 6946              		.loc 1 2014 4 is_stmt 1 view .LVU2241
 6947 0010 FFF7FEFF 		bl	decimal128ToNumber
 6948              	.LVL814:
2017:src/display.c ****       }
 6949              		.loc 1 2017 2 view .LVU2242
 6950 0014 2146     		mov	r1, r4
 6951 0016 2846     		mov	r0, r5
 6952 0018 6A46     		mov	r2, sp
 6953 001a FFF7FEFF 		bl	set_x_dn
 6954              	.LVL815:
2018:src/display.c **** 
 6955              		.loc 1 2018 7 is_stmt 0 view .LVU2243
 6956 001e 0BB0     		add	sp, sp, #44
 6957              		.cfi_remember_state
 6958              		.cfi_def_cfa_offset 12
 6959              		@ sp needed
 6960 0020 30BD     		pop	{r4, r5, pc}
 6961              	.LVL816:
 6962              	.L696:
 6963              		.cfi_restore_state
2016:src/display.c **** 	set_x_dn(&z, res, &digits);
 6964              		.loc 1 2016 4 is_stmt 1 view .LVU2244
 6965 0022 FFF7FEFF 		bl	decimal64ToNumber
 6966              	.LVL817:
2017:src/display.c ****       }
 6967              		.loc 1 2017 2 view .LVU2245
 6968 0026 2146     		mov	r1, r4
 6969 0028 2846     		mov	r0, r5
 6970 002a 6A46     		mov	r2, sp
 6971 002c FFF7FEFF 		bl	set_x_dn
 6972              	.LVL818:
2018:src/display.c **** 
 6973              		.loc 1 2018 7 is_stmt 0 view .LVU2246
 6974 0030 0BB0     		add	sp, sp, #44
 6975              		.cfi_def_cfa_offset 12
 6976              		@ sp needed
 6977 0032 30BD     		pop	{r4, r5, pc}
2018:src/display.c **** 
 6978              		.loc 1 2018 7 view .LVU2247
 6979              		.cfi_endproc
 6980              	.LFE22:
 6982              		.section	.text.format_reg,"ax",%progbits
ARM GAS  /tmp/cc9o0abE.s 			page 224


 6983              		.align	1
 6984              		.p2align 2,,3
 6985              		.global	format_reg
 6986              		.syntax unified
 6987              		.thumb
 6988              		.thumb_func
 6989              		.fpu fpv4-sp-d16
 6991              	format_reg:
 6992              	.LVL819:
 6993              	.LFB24:
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6994              		.loc 1 2425 45 is_stmt 1 view -0
 6995              		.cfi_startproc
 6996              		@ args = 0, pretend = 0, frame = 40
 6997              		@ frame_needed = 0, uses_anonymous_args = 0
2426:src/display.c **** 
 6998              		.loc 1 2426 2 view .LVU2249
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 6999              		.loc 1 2425 45 is_stmt 0 view .LVU2250
 7000 0000 30B5     		push	{r4, r5, lr}
 7001              		.cfi_def_cfa_offset 12
 7002              		.cfi_offset 4, -12
 7003              		.cfi_offset 5, -8
 7004              		.cfi_offset 14, -4
 7005 0002 8BB0     		sub	sp, sp, #44
 7006              		.cfi_def_cfa_offset 56
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7007              		.loc 1 2425 45 view .LVU2251
 7008 0004 0C46     		mov	r4, r1
 7009 0006 0546     		mov	r5, r0
2426:src/display.c **** 
 7010              		.loc 1 2426 28 view .LVU2252
 7011 0008 FFF7FEFF 		bl	get_reg_n
 7012              	.LVL820:
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7013              		.loc 1 2428 6 view .LVU2253
 7014 000c 154B     		ldr	r3, .L706
 7015 000e 1B68     		ldr	r3, [r3]
 7016 0010 93F8E82F 		ldrb	r2, [r3, #4072]	@ zero_extendqisi2
 7017              	.LVL821:
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7018              		.loc 1 2428 2 is_stmt 1 view .LVU2254
2428:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7019              		.loc 1 2428 5 is_stmt 0 view .LVU2255
 7020 0014 D207     		lsls	r2, r2, #31
 7021 0016 1DD4     		bmi	.L704
2431:src/display.c **** 	  decNumber x;
 7022              		.loc 1 2431 7 is_stmt 1 view .LVU2256
2431:src/display.c **** 	  decNumber x;
 7023              		.loc 1 2431 10 is_stmt 0 view .LVU2257
 7024 0018 44B1     		cbz	r4, .L705
 7025              	.L702:
2442:src/display.c ****       }
 7026              		.loc 1 2442 4 is_stmt 1 view .LVU2258
2442:src/display.c ****       }
 7027              		.loc 1 2442 24 is_stmt 0 view .LVU2259
 7028 001a 93F8E92F 		ldrb	r2, [r3, #4073]	@ zero_extendqisi2
ARM GAS  /tmp/cc9o0abE.s 			page 225


2442:src/display.c ****       }
 7029              		.loc 1 2442 4 view .LVU2260
 7030 001e 2146     		mov	r1, r4
 7031 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7032 0024 FFF7FEFF 		bl	set_x
 7033              	.LVL822:
2443:src/display.c **** 
 7034              		.loc 1 2443 7 view .LVU2261
 7035 0028 0BB0     		add	sp, sp, #44
 7036              		.cfi_remember_state
 7037              		.cfi_def_cfa_offset 12
 7038              		@ sp needed
 7039 002a 30BD     		pop	{r4, r5, pc}
 7040              	.LVL823:
 7041              	.L705:
 7042              		.cfi_restore_state
2431:src/display.c **** 	  decNumber x;
 7043              		.loc 1 2431 32 discriminator 1 view .LVU2262
 7044 002c 0E4A     		ldr	r2, .L706+4
2431:src/display.c **** 	  decNumber x;
 7045              		.loc 1 2431 23 discriminator 1 view .LVU2263
 7046 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7047 0030 012A     		cmp	r2, #1
 7048 0032 F2D9     		bls	.L702
 7049              	.LVL824:
 7050              	.LBB404:
 7051              	.LBI404:
2425:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7052              		.loc 1 2425 12 is_stmt 1 view .LVU2264
 7053              	.LBB405:
 7054              	.LBB406:
2432:src/display.c **** 	  int s;
 7055              		.loc 1 2432 4 view .LVU2265
2433:src/display.c **** 	  unsigned long long int v;
 7056              		.loc 1 2433 4 view .LVU2266
2434:src/display.c **** 
 7057              		.loc 1 2434 4 view .LVU2267
2436:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7058              		.loc 1 2436 4 view .LVU2268
 7059 0034 2946     		mov	r1, r5
 7060 0036 01A8     		add	r0, sp, #4
 7061              	.LVL825:
2436:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7062              		.loc 1 2436 4 is_stmt 0 view .LVU2269
 7063 0038 FFF7FEFF 		bl	getRegister
 7064              	.LVL826:
2437:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7065              		.loc 1 2437 4 is_stmt 1 view .LVU2270
2437:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7066              		.loc 1 2437 8 is_stmt 0 view .LVU2271
 7067 003c 01A8     		add	r0, sp, #4
 7068 003e 6946     		mov	r1, sp
 7069 0040 FFF7FEFF 		bl	dn_to_ull
 7070              	.LVL827:
2438:src/display.c **** 	}
 7071              		.loc 1 2438 4 is_stmt 1 view .LVU2272
 7072 0044 009A     		ldr	r2, [sp]
ARM GAS  /tmp/cc9o0abE.s 			page 226


 7073 0046 FFF7FEFF 		bl	build_value
 7074              	.LVL828:
2438:src/display.c **** 	}
 7075              		.loc 1 2438 4 is_stmt 0 view .LVU2273
 7076 004a 2246     		mov	r2, r4
 7077 004c FFF7FEFF 		bl	set_int_x
 7078              	.LVL829:
 7079              	.LBE406:
 7080              	.LBE405:
 7081              	.LBE404:
2443:src/display.c **** 
 7082              		.loc 1 2443 7 view .LVU2274
 7083 0050 0BB0     		add	sp, sp, #44
 7084              		.cfi_remember_state
 7085              		.cfi_def_cfa_offset 12
 7086              		@ sp needed
 7087 0052 30BD     		pop	{r4, r5, pc}
 7088              	.LVL830:
 7089              	.L704:
 7090              		.cfi_restore_state
2429:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7091              		.loc 1 2429 4 is_stmt 1 view .LVU2275
 7092 0054 2846     		mov	r0, r5
 7093              	.LVL831:
2429:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7094              		.loc 1 2429 4 is_stmt 0 view .LVU2276
 7095 0056 FFF7FEFF 		bl	get_reg_n_int
 7096              	.LVL832:
 7097 005a 2246     		mov	r2, r4
 7098 005c FFF7FEFF 		bl	set_int_x
 7099              	.LVL833:
2443:src/display.c **** 
 7100              		.loc 1 2443 7 view .LVU2277
 7101 0060 0BB0     		add	sp, sp, #44
 7102              		.cfi_def_cfa_offset 12
 7103              		@ sp needed
 7104 0062 30BD     		pop	{r4, r5, pc}
 7105              	.LVL834:
 7106              	.L707:
2443:src/display.c **** 
 7107              		.loc 1 2443 7 view .LVU2278
 7108              		.align	2
 7109              	.L706:
 7110 0064 00000000 		.word	main_ram
 7111 0068 00000000 		.word	StateWhileOn
 7112              		.cfi_endproc
 7113              	.LFE24:
 7115              		.section	.text.set_status_right,"ax",%progbits
 7116              		.align	1
 7117              		.p2align 2,,3
 7118              		.syntax unified
 7119              		.thumb
 7120              		.thumb_func
 7121              		.fpu fpv4-sp-d16
 7123              	set_status_right:
 7124              	.LVL835:
 7125              	.LFB45:
ARM GAS  /tmp/cc9o0abE.s 			page 227


3657:src/display.c ****       static void set_status_top(const char *str) {
3658:src/display.c **** 	if (no_status_top) return;
3659:src/display.c **** 	if (State2.runmode) {
3660:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3661:src/display.c **** 	}
3662:src/display.c **** 	else {
3663:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3664:src/display.c **** 	}
3665:src/display.c ****       }
3666:src/display.c **** #ifdef TOP_ROW
3667:src/display.c ****       static void set_status_top_always(const char *str) {
3668:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3669:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3670:src/display.c ****       }
3671:src/display.c **** #endif
3672:src/display.c **** 
3673:src/display.c ****       /*
3674:src/display.c ****        *  Display messages (global function)
3675:src/display.c ****        */
3676:src/display.c ****       extern void message(const char *str1, const char *str2)
3677:src/display.c ****       {
3678:src/display.c **** 	State2.disp_freeze = 0;
3679:src/display.c **** 	State2.disp_small = 0;
3680:src/display.c **** 	WasDataEntry = 0;
3681:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3682:src/display.c **** 	  // Complete redraw necessary
3683:src/display.c **** 	  DispMsg = str1;
3684:src/display.c **** 	  display();
3685:src/display.c **** 	}
3686:src/display.c **** 	else {
3687:src/display.c **** 	  if ( str2 != NULL ) {
3688:src/display.c **** 	    reset_disp();
3689:src/display.c **** 	    ShowRPN = 0;
3690:src/display.c **** 	    set_annunciators();
3691:src/display.c **** 	    set_digits_string( str2, 0 );
3692:src/display.c **** 	  }
3693:src/display.c **** 	  set_status( str1 );
3694:src/display.c **** 	  finish_display();// message
3695:src/display.c **** 	}
3696:src/display.c ****       }
3697:src/display.c **** 
3698:src/display.c **** #ifdef INCLUDE_STOPWATCH
3699:src/display.c **** 
3700:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3701:src/display.c **** 	int j = SEGS_EXP_BASE;
3702:src/display.c **** 	for (; *exponent!=0; exponent++) {
3703:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3704:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3705:src/display.c **** 	}
3706:src/display.c ****       }
3707:src/display.c **** 
3708:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3709:src/display.c ****       {
3710:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
3711:src/display.c **** 	xset(LastDisplayedNumber, ' ', NUMBER_LENGTH);
3712:src/display.c **** #endif
3713:src/display.c **** 	reset_disp();
ARM GAS  /tmp/cc9o0abE.s 			page 228


3714:src/display.c **** 	set_dot(DEG);
3715:src/display.c **** 	set_digits_string( str2, 0 );
3716:src/display.c **** 	State2.disp_small = force_small;
3717:src/display.c **** 	if( exponent!=NULL ) {
3718:src/display.c **** 	  stopwatch_exponent(exponent);
3719:src/display.c **** 	}
3720:src/display.c **** 	set_status( str1 );
3721:src/display.c **** 	finish_display();
3722:src/display.c ****       }
3723:src/display.c **** 
3724:src/display.c **** 
3725:src/display.c **** #endif // INCLUDE_STOPWATCH
3726:src/display.c **** 
3727:src/display.c ****       /* Display the right hand characters from the given string.
3728:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3729:src/display.c ****        * and reduce font size if required.
3730:src/display.c ****        */
3731:src/display.c ****       static void set_status_right(const char *str) {
 7126              		.loc 1 3731 53 is_stmt 1 view -0
 7127              		.cfi_startproc
 7128              		@ args = 0, pretend = 0, frame = 0
 7129              		@ frame_needed = 0, uses_anonymous_args = 0
3732:src/display.c **** 	unsigned int x = 0;
 7130              		.loc 1 3732 2 view .LVU2280
3733:src/display.c **** 	const char *p;
 7131              		.loc 1 3733 2 view .LVU2281
3734:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7132              		.loc 1 3734 2 view .LVU2282
3731:src/display.c **** 	unsigned int x = 0;
 7133              		.loc 1 3731 53 is_stmt 0 view .LVU2283
 7134 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7135              		.cfi_def_cfa_offset 28
 7136              		.cfi_offset 4, -28
 7137              		.cfi_offset 5, -24
 7138              		.cfi_offset 6, -20
 7139              		.cfi_offset 7, -16
 7140              		.cfi_offset 8, -12
 7141              		.cfi_offset 9, -8
 7142              		.cfi_offset 14, -4
 7143              		.loc 1 3734 23 view .LVU2284
 7144 0004 194B     		ldr	r3, .L723
 7145              		.loc 1 3734 41 view .LVU2285
 7146 0006 93F91630 		ldrsb	r3, [r3, #22]
 7147 000a 002B     		cmp	r3, #0
3731:src/display.c **** 	unsigned int x = 0;
 7148              		.loc 1 3731 53 view .LVU2286
 7149 000c 83B0     		sub	sp, sp, #12
 7150              		.cfi_def_cfa_offset 40
3731:src/display.c **** 	unsigned int x = 0;
 7151              		.loc 1 3731 53 view .LVU2287
 7152 000e 0646     		mov	r6, r0
 7153              		.loc 1 3734 41 view .LVU2288
 7154 0010 23DA     		bge	.L722
 7155              	.LVL836:
 7156              	.L709:
 7157              		.loc 1 3734 12 view .LVU2289
 7158 0012 4FF00108 		mov	r8, #1
ARM GAS  /tmp/cc9o0abE.s 			page 229


3735:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7159              		.loc 1 3735 36 view .LVU2290
 7160 0016 4FF48077 		mov	r7, #256
 7161              	.L710:
 7162              	.LVL837:
3736:src/display.c **** 
3737:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7163              		.loc 1 3737 2 is_stmt 1 discriminator 4 view .LVU2291
 7164              		.loc 1 3737 14 discriminator 4 view .LVU2292
 7165              		.loc 1 3737 2 is_stmt 0 discriminator 4 view .LVU2293
 7166 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7167 001c 3446     		mov	r4, r6
 7168 001e 1BB1     		cbz	r3, .L711
 7169              	.LVL838:
 7170              	.L712:
 7171              		.loc 1 3737 30 is_stmt 1 discriminator 3 view .LVU2294
 7172              		.loc 1 3737 26 discriminator 3 view .LVU2295
 7173              		.loc 1 3737 14 discriminator 3 view .LVU2296
 7174              		.loc 1 3737 2 is_stmt 0 discriminator 3 view .LVU2297
 7175 0020 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7176              	.LVL839:
 7177              		.loc 1 3737 2 discriminator 3 view .LVU2298
 7178 0024 002B     		cmp	r3, #0
 7179 0026 FBD1     		bne	.L712
 7180              	.L711:
3732:src/display.c **** 	const char *p;
 7181              		.loc 1 3732 15 view .LVU2299
 7182 0028 0025     		movs	r5, #0
 7183 002a 06E0     		b	.L713
 7184              	.LVL840:
 7185              	.L714:
 7186              	.LBB407:
3738:src/display.c **** 	while (--p >= str) {
3739:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7187              		.loc 1 3739 27 view .LVU2300
 7188 002c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3740:src/display.c **** 
3741:src/display.c **** 	  x += charlengths(c);
 7189              		.loc 1 3741 9 view .LVU2301
 7190 002e 3844     		add	r0, r0, r7
 7191 0030 FFF7FEFF 		bl	charlengths
 7192              	.LVL841:
 7193              		.loc 1 3741 6 view .LVU2302
 7194 0034 0544     		add	r5, r5, r0
 7195              	.LVL842:
3742:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7196              		.loc 1 3742 4 is_stmt 1 view .LVU2303
 7197              		.loc 1 3742 7 is_stmt 0 view .LVU2304
 7198 0036 4B2D     		cmp	r5, #75
 7199 0038 03D8     		bhi	.L715
 7200              	.LVL843:
 7201              	.L713:
3739:src/display.c **** 
 7202              		.loc 1 3739 4 is_stmt 1 view .LVU2305
3739:src/display.c **** 
 7203              		.loc 1 3739 4 is_stmt 0 view .LVU2306
 7204              	.LBE407:
ARM GAS  /tmp/cc9o0abE.s 			page 230


3738:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7205              		.loc 1 3738 8 is_stmt 1 view .LVU2307
 7206 003a A146     		mov	r9, r4
 7207 003c 013C     		subs	r4, r4, #1
 7208              	.LVL844:
 7209              	.LBB408:
3741:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7210              		.loc 1 3741 4 view .LVU2308
3741:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7211              		.loc 1 3741 4 is_stmt 0 view .LVU2309
 7212              	.LBE408:
3738:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7213              		.loc 1 3738 8 view .LVU2310
 7214 003e A642     		cmp	r6, r4
 7215 0040 F4D9     		bls	.L714
 7216              	.LVL845:
 7217              	.L715:
3743:src/display.c **** 	    break;
3744:src/display.c **** 	}
3745:src/display.c **** 	set_status_sized(p+1, toolarge);
 7218              		.loc 1 3745 2 is_stmt 1 view .LVU2311
 7219              	.LBB409:
 7220              	.LBI409:
3496:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7221              		.loc 1 3496 19 view .LVU2312
 7222              	.LBB410:
3497:src/display.c ****       }
 7223              		.loc 1 3497 2 view .LVU2313
 7224 0042 40F24A23 		movw	r3, #586
 7225 0046 0093     		str	r3, [sp]
 7226 0048 4146     		mov	r1, r8
 7227 004a 4846     		mov	r0, r9
 7228 004c 8E23     		movs	r3, #142
 7229 004e 4A22     		movs	r2, #74
 7230 0050 FFF7FEFF 		bl	s_s_sized
 7231              	.LVL846:
3497:src/display.c ****       }
 7232              		.loc 1 3497 2 is_stmt 0 view .LVU2314
 7233              	.LBE410:
 7234              	.LBE409:
3746:src/display.c ****       }
 7235              		.loc 1 3746 7 view .LVU2315
 7236 0054 03B0     		add	sp, sp, #12
 7237              		.cfi_remember_state
 7238              		.cfi_def_cfa_offset 28
 7239              		@ sp needed
 7240 0056 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7241              	.LVL847:
 7242              	.L722:
 7243              		.cfi_restore_state
 7244              	.LBB411:
 7245              	.LBI411:
3644:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7246              		.loc 1 3644 18 is_stmt 1 view .LVU2316
 7247              	.LBB412:
3645:src/display.c ****       }
 7248              		.loc 1 3645 2 view .LVU2317
ARM GAS  /tmp/cc9o0abE.s 			page 231


3645:src/display.c ****       }
 7249              		.loc 1 3645 9 is_stmt 0 view .LVU2318
 7250 005a 0021     		movs	r1, #0
 7251 005c FFF7FEFF 		bl	pixel_length
 7252              	.LVL848:
3645:src/display.c ****       }
 7253              		.loc 1 3645 9 view .LVU2319
 7254              	.LBE412:
 7255              	.LBE411:
3734:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7256              		.loc 1 3734 41 view .LVU2320
 7257 0060 4B28     		cmp	r0, #75
 7258 0062 D6DC     		bgt	.L709
3734:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7259              		.loc 1 3734 12 view .LVU2321
 7260 0064 4FF00008 		mov	r8, #0
3735:src/display.c **** 
 7261              		.loc 1 3735 36 view .LVU2322
 7262 0068 4746     		mov	r7, r8
 7263 006a D6E7     		b	.L710
 7264              	.L724:
 7265              		.align	2
 7266              	.L723:
 7267 006c 00000000 		.word	StateWhileOn
 7268              		.cfi_endproc
 7269              	.LFE45:
 7271              		.section	.text.set_status_top.part.0,"ax",%progbits
 7272              		.align	1
 7273              		.p2align 2,,3
 7274              		.syntax unified
 7275              		.thumb
 7276              		.thumb_func
 7277              		.fpu fpv4-sp-d16
 7279              	set_status_top.part.0:
 7280              	.LVL849:
 7281              	.LFB54:
3657:src/display.c **** 	if (no_status_top) return;
 7282              		.loc 1 3657 19 is_stmt 1 view -0
 7283              		.cfi_startproc
 7284              		@ args = 0, pretend = 0, frame = 0
 7285              		@ frame_needed = 0, uses_anonymous_args = 0
3659:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7286              		.loc 1 3659 2 view .LVU2324
3657:src/display.c **** 	if (no_status_top) return;
 7287              		.loc 1 3657 19 is_stmt 0 view .LVU2325
 7288 0000 10B5     		push	{r4, lr}
 7289              		.cfi_def_cfa_offset 8
 7290              		.cfi_offset 4, -8
 7291              		.cfi_offset 14, -4
3659:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7292              		.loc 1 3659 6 view .LVU2326
 7293 0002 184B     		ldr	r3, .L735
 7294 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3659:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7295              		.loc 1 3659 5 view .LVU2327
 7296 0006 13F04001 		ands	r1, r3, #64
3657:src/display.c **** 	if (no_status_top) return;
ARM GAS  /tmp/cc9o0abE.s 			page 232


 7297              		.loc 1 3657 19 view .LVU2328
 7298 000a 82B0     		sub	sp, sp, #8
 7299              		.cfi_def_cfa_offset 16
3657:src/display.c **** 	if (no_status_top) return;
 7300              		.loc 1 3657 19 view .LVU2329
 7301 000c 0446     		mov	r4, r0
3659:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7302              		.loc 1 3659 5 view .LVU2330
 7303 000e 0DD0     		beq	.L726
3660:src/display.c **** 	}
 7304              		.loc 1 3660 4 is_stmt 1 view .LVU2331
 7305 0010 1A06     		lsls	r2, r3, #24
 7306 0012 18D5     		bpl	.L733
 7307 0014 0121     		movs	r1, #1
 7308              	.LVL850:
 7309              	.L727:
 7310              	.LBB413:
 7311              	.LBI413:
3499:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7312              		.loc 1 3499 19 view .LVU2332
 7313              	.LBB414:
3500:src/display.c ****       }
 7314              		.loc 1 3500 2 view .LVU2333
 7315 0016 4FF45373 		mov	r3, #844
 7316 001a 0093     		str	r3, [sp]
 7317 001c 2046     		mov	r0, r4
 7318 001e 40F24A23 		movw	r3, #586
 7319 0022 2B22     		movs	r2, #43
 7320 0024 FFF7FEFF 		bl	s_s_sized
 7321              	.LVL851:
3500:src/display.c ****       }
 7322              		.loc 1 3500 2 is_stmt 0 view .LVU2334
 7323              	.LBE414:
 7324              	.LBE413:
3665:src/display.c **** #ifdef TOP_ROW
 7325              		.loc 1 3665 7 view .LVU2335
 7326 0028 02B0     		add	sp, sp, #8
 7327              		.cfi_remember_state
 7328              		.cfi_def_cfa_offset 8
 7329              		@ sp needed
 7330 002a 10BD     		pop	{r4, pc}
 7331              	.LVL852:
 7332              	.L726:
 7333              		.cfi_restore_state
3663:src/display.c **** 	}
 7334              		.loc 1 3663 4 is_stmt 1 view .LVU2336
 7335 002c 1B06     		lsls	r3, r3, #24
 7336 002e 12D5     		bpl	.L734
 7337 0030 0121     		movs	r1, #1
 7338              	.LVL853:
 7339              	.L729:
 7340              	.LBB415:
 7341              	.LBI415:
3496:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7342              		.loc 1 3496 19 view .LVU2337
 7343              	.LBB416:
3497:src/display.c ****       }
ARM GAS  /tmp/cc9o0abE.s 			page 233


 7344              		.loc 1 3497 2 view .LVU2338
 7345 0032 40F24A23 		movw	r3, #586
 7346 0036 0093     		str	r3, [sp]
 7347 0038 2046     		mov	r0, r4
 7348 003a 8E23     		movs	r3, #142
 7349 003c 4A22     		movs	r2, #74
 7350 003e FFF7FEFF 		bl	s_s_sized
 7351              	.LVL854:
3497:src/display.c ****       }
 7352              		.loc 1 3497 2 is_stmt 0 view .LVU2339
 7353              	.LBE416:
 7354              	.LBE415:
3665:src/display.c **** #ifdef TOP_ROW
 7355              		.loc 1 3665 7 view .LVU2340
 7356 0042 02B0     		add	sp, sp, #8
 7357              		.cfi_remember_state
 7358              		.cfi_def_cfa_offset 8
 7359              		@ sp needed
 7360 0044 10BD     		pop	{r4, pc}
 7361              	.LVL855:
 7362              	.L733:
 7363              		.cfi_restore_state
 7364              	.LBB417:
 7365              	.LBI417:
3647:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7366              		.loc 1 3647 18 is_stmt 1 view .LVU2341
 7367              	.LBB418:
3648:src/display.c ****       }
 7368              		.loc 1 3648 2 view .LVU2342
3648:src/display.c ****       }
 7369              		.loc 1 3648 9 is_stmt 0 view .LVU2343
 7370 0046 0021     		movs	r1, #0
 7371 0048 FFF7FEFF 		bl	pixel_length
 7372              	.LVL856:
3648:src/display.c ****       }
 7373              		.loc 1 3648 9 view .LVU2344
 7374              	.LBE418:
 7375              	.LBE417:
3660:src/display.c **** 	}
 7376              		.loc 1 3660 4 view .LVU2345
 7377 004c 2C28     		cmp	r0, #44
 7378 004e D4BF     		ite	le
 7379 0050 0021     		movle	r1, #0
 7380 0052 0121     		movgt	r1, #1
 7381 0054 DFE7     		b	.L727
 7382              	.LVL857:
 7383              	.L734:
 7384              	.LBB419:
 7385              	.LBI419:
3644:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7386              		.loc 1 3644 18 is_stmt 1 view .LVU2346
 7387              	.LBB420:
3645:src/display.c ****       }
 7388              		.loc 1 3645 2 view .LVU2347
3645:src/display.c ****       }
 7389              		.loc 1 3645 9 is_stmt 0 view .LVU2348
 7390 0056 FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/cc9o0abE.s 			page 234


 7391              	.LVL858:
3645:src/display.c ****       }
 7392              		.loc 1 3645 9 view .LVU2349
 7393              	.LBE420:
 7394              	.LBE419:
3663:src/display.c **** 	}
 7395              		.loc 1 3663 4 view .LVU2350
 7396 005a 4B28     		cmp	r0, #75
 7397 005c D4BF     		ite	le
 7398 005e 0021     		movle	r1, #0
 7399 0060 0121     		movgt	r1, #1
 7400 0062 E6E7     		b	.L729
 7401              	.L736:
 7402              		.align	2
 7403              	.L735:
 7404 0064 00000000 		.word	StateWhileOn
 7405              		.cfi_endproc
 7406              	.LFE54:
 7408              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7409              		.align	2
 7410              	.LC2:
 7411 0000 32630600 		.ascii	"2c\006\000"
 7412              		.align	2
 7413              	.LC3:
 7414 0004 07C63C00 		.ascii	"\007\306<\000"
 7415              		.align	2
 7416              	.LC4:
 7417 0008 07876900 		.ascii	"\007\207i\000"
 7418              		.align	2
 7419              	.LC5:
 7420 000c 07C67900 		.ascii	"\007\306y\000"
 7421              		.align	2
 7422              	.LC6:
 7423 0010 07950600 		.ascii	"\007\225\006\000"
 7424              		.align	2
 7425              	.LC7:
 7426 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7426      060600
 7427 001b 00       		.align	2
 7428              	.LC8:
 7429 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7429      060600
 7430 0023 00       		.align	2
 7431              	.LC9:
 7432 0024 07C74400 		.ascii	"\007\307D\000"
 7433              		.align	2
 7434              	.LC10:
 7435 0028 07872000 		.ascii	"\007\207 \000"
 7436              		.align	2
 7437              	.LC11:
 7438 002c 4C656E67 		.ascii	"Length:\000"
 7438      74683A00 
 7439              		.align	2
 7440              	.LC12:
 7441 0034 5265616C 		.ascii	"Real:\000"
 7441      3A00
 7442 003a 0000     		.align	2
ARM GAS  /tmp/cc9o0abE.s 			page 235


 7443              	.LC13:
 7444 003c 416E676C 		.ascii	"Angle:\000"
 7444      653A00
 7445 0043 00       		.align	2
 7446              	.LC14:
 7447 0044 496D6167 		.ascii	"Imag:\000"
 7447      3A00
 7448 004a 0000     		.align	2
 7449              	.LC15:
 7450 004c 07876A00 		.ascii	"\007\207j\000"
 7451              		.align	2
 7452              	.LC16:
 7453 0050 06060788 		.ascii	"\006\006\007\210\007\000"
 7453      0700
 7454 0056 0000     		.align	2
 7455              	.LC17:
 7456 0058 0784060D 		.ascii	"\007\204\006\015\000"
 7456      00
 7457 005d 000000   		.align	2
 7458              	.LC18:
 7459 0060 07C73C00 		.ascii	"\007\307<\000"
 7460              		.align	2
 7461              	.LC19:
 7462 0064 07C77900 		.ascii	"\007\307y\000"
 7463              		.align	2
 7464              	.LC21:
 7465 0068 07E43F00 		.ascii	"\007\344?\000"
 7466              		.section	.text.annunciators,"ax",%progbits
 7467              		.align	1
 7468              		.p2align 2,,3
 7469              		.syntax unified
 7470              		.thumb
 7471              		.thumb_func
 7472              		.fpu fpv4-sp-d16
 7474              	annunciators:
 7475              	.LFB12:
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7476              		.loc 1 609 36 is_stmt 1 view -0
 7477              		.cfi_startproc
 7478              		@ args = 0, pretend = 0, frame = 128
 7479              		@ frame_needed = 0, uses_anonymous_args = 0
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 7480              		.loc 1 611 7 view .LVU2352
 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7481              		.loc 1 609 36 is_stmt 0 view .LVU2353
 7482 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7483              		.cfi_def_cfa_offset 28
 7484              		.cfi_offset 4, -28
 7485              		.cfi_offset 5, -24
 7486              		.cfi_offset 6, -20
 7487              		.cfi_offset 7, -16
 7488              		.cfi_offset 8, -12
 7489              		.cfi_offset 9, -8
 7490              		.cfi_offset 14, -4
 623:src/display.c **** #  endif
 7491              		.loc 1 623 38 view .LVU2354
 7492 0004 C44C     		ldr	r4, .L888
ARM GAS  /tmp/cc9o0abE.s 			page 236


 609:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7493              		.loc 1 609 36 view .LVU2355
 7494 0006 A3B0     		sub	sp, sp, #140
 7495              		.cfi_def_cfa_offset 168
 7496              	.LVL859:
 612:src/display.c ****       int n;
 7497              		.loc 1 612 7 is_stmt 1 view .LVU2356
 613:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7498              		.loc 1 613 7 view .LVU2357
 614:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7499              		.loc 1 614 7 view .LVU2358
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7500              		.loc 1 615 7 view .LVU2359
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7501              		.loc 1 615 43 is_stmt 0 view .LVU2360
 7502 0008 FFF7FEFF 		bl	cur_shift
 7503              	.LVL860:
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7504              		.loc 1 615 18 view .LVU2361
 7505 000c C34B     		ldr	r3, .L888+4
 623:src/display.c **** #  endif
 7506              		.loc 1 623 38 view .LVU2362
 7507 000e 2268     		ldr	r2, [r4]
 615:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7508              		.loc 1 615 18 view .LVU2363
 7509 0010 13F80080 		ldrb	r8, [r3, r0]	@ zero_extendqisi2
 7510              	.LVL861:
 623:src/display.c **** #  endif
 7511              		.loc 1 623 7 is_stmt 1 view .LVU2364
 623:src/display.c **** #  endif
 7512              		.loc 1 623 38 is_stmt 0 view .LVU2365
 7513 0014 92F8EA7F 		ldrb	r7, [r2, #4074]	@ zero_extendqisi2
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7514              		.loc 1 654 7 view .LVU2366
 7515 0018 0CAE     		add	r6, sp, #48
 7516              	.LVL862:
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7517              		.loc 1 654 7 view .LVU2367
 7518 001a 2A22     		movs	r2, #42
 7519 001c 0021     		movs	r1, #0
 7520 001e 3046     		mov	r0, r6
 7521 0020 FFF7FEFF 		bl	xset
 7522              	.LVL863:
 655:src/display.c ****       
 7523              		.loc 1 655 7 view .LVU2368
 7524 0024 2A22     		movs	r2, #42
 7525 0026 0021     		movs	r1, #0
 7526 0028 17A8     		add	r0, sp, #92
 7527              	.LVL864:
 655:src/display.c ****       
 7528              		.loc 1 655 7 view .LVU2369
 7529 002a FFF7FEFF 		bl	xset
 7530              	.LVL865:
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7531              		.loc 1 657 11 view .LVU2370
 7532 002e 2368     		ldr	r3, [r4]
 7533 0030 93F8E82F 		ldrb	r2, [r3, #4072]	@ zero_extendqisi2
ARM GAS  /tmp/cc9o0abE.s 			page 237


 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7534              		.loc 1 657 10 view .LVU2371
 7535 0034 D107     		lsls	r1, r2, #31
 623:src/display.c **** #  endif
 7536              		.loc 1 623 17 view .LVU2372
 7537 0036 C7F38007 		ubfx	r7, r7, #2, #1
 7538              	.LVL866:
 626:src/display.c **** #  else
 7539              		.loc 1 626 7 is_stmt 1 view .LVU2373
 631:src/display.c **** #  else
 7540              		.loc 1 631 7 view .LVU2374
 641:src/display.c **** #else
 7541              		.loc 1 641 7 view .LVU2375
 649:src/display.c **** #else
 7542              		.loc 1 649 7 view .LVU2376
 654:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 7543              		.loc 1 654 7 view .LVU2377
 655:src/display.c ****       
 7544              		.loc 1 655 7 view .LVU2378
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7545              		.loc 1 657 7 view .LVU2379
 657:src/display.c **** #ifdef SHOW_STACK_SIZE
 7546              		.loc 1 657 10 is_stmt 0 view .LVU2380
 7547 003a 00F1C380 		bmi	.L871
 697:src/display.c **** #else
 7548              		.loc 1 697 12 is_stmt 1 view .LVU2381
 697:src/display.c **** #else
 7549              		.loc 1 697 15 is_stmt 0 view .LVU2382
 7550 003e 002F     		cmp	r7, #0
 7551 0040 79D0     		beq	.L872
 7552              	.L752:
 783:src/display.c **** 	  *p2++ = '\007';
 7553              		.loc 1 783 2 is_stmt 1 view .LVU2383
 783:src/display.c **** 	  *p2++ = '\007';
 7554              		.loc 1 783 6 is_stmt 0 view .LVU2384
 7555 0042 B74D     		ldr	r5, .L888+8
 7556 0044 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 783:src/display.c **** 	  *p2++ = '\007';
 7557              		.loc 1 783 5 view .LVU2385
 7558 0046 9A07     		lsls	r2, r3, #30
 7559 0048 40F19781 		bpl	.L761
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7560              		.loc 1 784 4 is_stmt 1 view .LVU2386
 7561              	.LVL867:
 785:src/display.c **** 	  *p2++ = shift_char;
 7562              		.loc 1 785 4 view .LVU2387
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7563              		.loc 1 784 10 is_stmt 0 view .LVU2388
 7564 004c 4EF20742 		movw	r2, #58375
 787:src/display.c **** 	}
 7565              		.loc 1 787 10 view .LVU2389
 7566 0050 1423     		movs	r3, #20
 786:src/display.c **** 	  *p2++ = '\024';
 7567              		.loc 1 786 10 view .LVU2390
 7568 0052 8DF85E80 		strb	r8, [sp, #94]
 784:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 7569              		.loc 1 784 10 view .LVU2391
ARM GAS  /tmp/cc9o0abE.s 			page 238


 7570 0056 ADF85C20 		strh	r2, [sp, #92]	@ movhi
 786:src/display.c **** 	  *p2++ = '\024';
 7571              		.loc 1 786 4 is_stmt 1 view .LVU2392
 7572              	.LVL868:
 787:src/display.c **** 	}
 7573              		.loc 1 787 4 view .LVU2393
 787:src/display.c **** 	}
 7574              		.loc 1 787 10 is_stmt 0 view .LVU2394
 7575 005a 8DF85F30 		strb	r3, [sp, #95]
 787:src/display.c **** 	}
 7576              		.loc 1 787 7 view .LVU2395
 7577 005e 0DF16008 		add	r8, sp, #96
 7578              	.LVL869:
 7579              	.L762:
 796:src/display.c **** 	  *p2++ = '\007';
 7580              		.loc 1 796 2 is_stmt 1 view .LVU2396
 796:src/display.c **** 	  *p2++ = '\007';
 7581              		.loc 1 796 6 is_stmt 0 view .LVU2397
 7582 0062 FFF7FEFF 		bl	get_trig_mode
 7583              	.LVL870:
 797:src/display.c **** 	  *p2++ = '\207';
 7584              		.loc 1 797 10 view .LVU2398
 7585 0066 0723     		movs	r3, #7
 796:src/display.c **** 	  *p2++ = '\007';
 7586              		.loc 1 796 5 view .LVU2399
 7587 0068 0228     		cmp	r0, #2
 798:src/display.c **** 	  *p2++ = '\007';	    
 7588              		.loc 1 798 10 view .LVU2400
 7589 006a 4FF08702 		mov	r2, #135
 797:src/display.c **** 	  *p2++ = '\207';
 7590              		.loc 1 797 10 view .LVU2401
 7591 006e 88F80030 		strb	r3, [r8]
 796:src/display.c **** 	  *p2++ = '\007';
 7592              		.loc 1 796 5 view .LVU2402
 7593 0072 00F01182 		beq	.L873
 802:src/display.c **** 	  *p2++ = '\207';
 7594              		.loc 1 802 4 is_stmt 1 view .LVU2403
 7595              	.LVL871:
 803:src/display.c **** 	  *p2++ = ' ';
 7596              		.loc 1 803 4 view .LVU2404
 804:src/display.c **** 	}
 7597              		.loc 1 804 10 is_stmt 0 view .LVU2405
 7598 0076 2023     		movs	r3, #32
 803:src/display.c **** 	  *p2++ = ' ';
 7599              		.loc 1 803 10 view .LVU2406
 7600 0078 88F80120 		strb	r2, [r8, #1]
 804:src/display.c **** 	}
 7601              		.loc 1 804 4 is_stmt 1 view .LVU2407
 804:src/display.c **** 	}
 7602              		.loc 1 804 10 is_stmt 0 view .LVU2408
 7603 007c 88F80230 		strb	r3, [r8, #2]
 804:src/display.c **** 	}
 7604              		.loc 1 804 7 view .LVU2409
 7605 0080 08F10308 		add	r8, r8, #3
 7606              	.LVL872:
 7607              	.L764:
 808:src/display.c **** 	p2 = scopy(p2, q);
ARM GAS  /tmp/cc9o0abE.s 			page 239


 7608              		.loc 1 808 2 is_stmt 1 view .LVU2410
 808:src/display.c **** 	p2 = scopy(p2, q);
 7609              		.loc 1 808 7 is_stmt 0 view .LVU2411
 7610 0084 FFF7FEFF 		bl	is_dblmode
 7611              	.LVL873:
 808:src/display.c **** 	p2 = scopy(p2, q);
 7612              		.loc 1 808 34 view .LVU2412
 7613 0088 A64B     		ldr	r3, .L888+12
 7614 008a A74A     		ldr	r2, .L888+16
 808:src/display.c **** 	p2 = scopy(p2, q);
 7615              		.loc 1 808 7 view .LVU2413
 7616 008c 0146     		mov	r1, r0
 7617              	.LVL874:
 809:src/display.c **** #else
 7618              		.loc 1 809 2 is_stmt 1 view .LVU2414
 809:src/display.c **** #else
 7619              		.loc 1 809 7 is_stmt 0 view .LVU2415
 7620 008e 0029     		cmp	r1, #0
 7621 0090 14BF     		ite	ne
 7622 0092 1146     		movne	r1, r2
 7623 0094 1946     		moveq	r1, r3
 7624              	.LVL875:
 809:src/display.c **** #else
 7625              		.loc 1 809 7 view .LVU2416
 7626 0096 4046     		mov	r0, r8
 7627 0098 FFF7FEFF 		bl	scopy
 7628              	.LVL876:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7629              		.loc 1 825 16 view .LVU2417
 7630 009c 2368     		ldr	r3, [r4]
 7631 009e 93F8EA3F 		ldrb	r3, [r3, #4074]	@ zero_extendqisi2
 7632 00a2 C3F30113 		ubfx	r3, r3, #4, #2
 7633              	.LVL877:
 825:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7634              		.loc 1 825 2 is_stmt 1 view .LVU2418
 7635 00a6 012B     		cmp	r3, #1
 7636 00a8 00F0FD81 		beq	.L812
 7637 00ac 9F49     		ldr	r1, .L888+20
 7638 00ae A04A     		ldr	r2, .L888+24
 7639 00b0 022B     		cmp	r3, #2
 7640 00b2 08BF     		it	eq
 7641 00b4 1146     		moveq	r1, r2
 7642              	.L766:
 7643              	.LVL878:
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7644              		.loc 1 842 2 view .LVU2419
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7645              		.loc 1 842 6 is_stmt 0 view .LVU2420
 7646 00b6 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 842:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 7647              		.loc 1 842 5 view .LVU2421
 7648 00b8 5B07     		lsls	r3, r3, #29
 843:src/display.c **** 	} // no need to skip y display with arrow here
 7649              		.loc 1 843 4 is_stmt 1 view .LVU2422
 7650 00ba 48BF     		it	mi
 7651 00bc 9D49     		ldrmi	r1, .L888+28
 7652              	.LVL879:
ARM GAS  /tmp/cc9o0abE.s 			page 240


 846:src/display.c **** 	}
 7653              		.loc 1 846 4 view .LVU2423
 846:src/display.c **** 	}
 7654              		.loc 1 846 9 is_stmt 0 view .LVU2424
 7655 00be FFF7FEFF 		bl	scopy
 7656              	.LVL880:
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7657              		.loc 1 850 2 is_stmt 1 view .LVU2425
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7658              		.loc 1 850 18 is_stmt 0 view .LVU2426
 7659 00c2 2368     		ldr	r3, [r4]
 7660 00c4 93F8AC3F 		ldrb	r3, [r3, #4012]	@ zero_extendqisi2
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7661              		.loc 1 850 5 view .LVU2427
 7662 00c8 13F0060F 		tst	r3, #6
 7663 00cc 04D0     		beq	.L769
 850:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 7664              		.loc 1 850 32 discriminator 1 view .LVU2428
 7665 00ce 03F04102 		and	r2, r3, #65
 7666 00d2 412A     		cmp	r2, #65
 7667 00d4 00F01782 		beq	.L874
 7668              	.L769:
 860:src/display.c **** 	  q = "\007\307<";
 7669              		.loc 1 860 7 is_stmt 1 view .LVU2429
 860:src/display.c **** 	  q = "\007\307<";
 7670              		.loc 1 860 22 is_stmt 0 view .LVU2430
 7671 00d8 DFF86C92 		ldr	r9, .L888+48
 7672 00dc D9F80020 		ldr	r2, [r9]
 860:src/display.c **** 	  q = "\007\307<";
 7673              		.loc 1 860 10 view .LVU2431
 7674 00e0 012A     		cmp	r2, #1
 7675 00e2 00F0CA81 		beq	.L772
 860:src/display.c **** 	  q = "\007\307<";
 7676              		.loc 1 860 43 discriminator 1 view .LVU2432
 7677 00e6 03F0C101 		and	r1, r3, #193
 7678 00ea C129     		cmp	r1, #193
 7679 00ec 00F0C581 		beq	.L772
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7680              		.loc 1 864 7 is_stmt 1 view .LVU2433
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7681              		.loc 1 864 11 is_stmt 0 view .LVU2434
 7682 00f0 297D     		ldrb	r1, [r5, #20]	@ zero_extendqisi2
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 7683              		.loc 1 864 10 view .LVU2435
 7684 00f2 11F0C00F 		tst	r1, #192
 7685 00f6 00F04B81 		beq	.L875
 7686              	.L775:
 865:src/display.c **** 	  p = scopy(p, q);
 7687              		.loc 1 865 4 is_stmt 1 view .LVU2436
 865:src/display.c **** 	  p = scopy(p, q);
 7688              		.loc 1 865 28 is_stmt 0 view .LVU2437
 7689 00fa 8F4A     		ldr	r2, .L888+32
 7690 00fc 8F49     		ldr	r1, .L888+36
 7691 00fe 13F0200F 		tst	r3, #32
 7692              	.LVL881:
 866:src/display.c **** 	}
 7693              		.loc 1 866 4 is_stmt 1 view .LVU2438
ARM GAS  /tmp/cc9o0abE.s 			page 241


 866:src/display.c **** 	}
 7694              		.loc 1 866 8 is_stmt 0 view .LVU2439
 7695 0102 08BF     		it	eq
 7696 0104 1146     		moveq	r1, r2
 7697              	.LVL882:
 866:src/display.c **** 	}
 7698              		.loc 1 866 8 view .LVU2440
 7699 0106 3046     		mov	r0, r6
 7700 0108 FFF7FEFF 		bl	scopy
 7701              	.LVL883:
 866:src/display.c **** 	}
 7702              		.loc 1 866 8 view .LVU2441
 7703 010c D9F80020 		ldr	r2, [r9]
 7704 0110 8046     		mov	r8, r0
 7705              	.LVL884:
 7706              	.L774:
 882:src/display.c **** 	    q = "\007\307y";
 7707              		.loc 1 882 4 is_stmt 1 view .LVU2442
 882:src/display.c **** 	    q = "\007\307y";
 7708              		.loc 1 882 7 is_stmt 0 view .LVU2443
 7709 0112 022A     		cmp	r2, #2
 7710 0114 00F0C981 		beq	.L876
 7711              	.L777:
 888:src/display.c **** 	  decNumber y;
 7712              		.loc 1 888 2 is_stmt 1 view .LVU2444
 888:src/display.c **** 	  decNumber y;
 7713              		.loc 1 888 6 is_stmt 0 view .LVU2445
 7714 0118 AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 888:src/display.c **** 	  decNumber y;
 7715              		.loc 1 888 5 view .LVU2446
 7716 011a 5A06     		lsls	r2, r3, #25
 7717 011c 00F1AA80 		bmi	.L741
 7718              	.LBB431:
 7719              	.LBB432:
3669:src/display.c ****       }
 7720              		.loc 1 3669 2 is_stmt 1 view .LVU2447
 7721 0120 1B06     		lsls	r3, r3, #24
 7722 0122 42D4     		bmi	.L820
 7723              	.LVL885:
 7724              	.L882:
 7725              	.LBB433:
 7726              	.LBI433:
3647:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
 7727              		.loc 1 3647 18 view .LVU2448
 7728              	.LBB434:
3648:src/display.c ****       }
 7729              		.loc 1 3648 2 view .LVU2449
3648:src/display.c ****       }
 7730              		.loc 1 3648 9 is_stmt 0 view .LVU2450
 7731 0124 0021     		movs	r1, #0
 7732 0126 17A8     		add	r0, sp, #92
 7733              	.LVL886:
3648:src/display.c ****       }
 7734              		.loc 1 3648 9 view .LVU2451
 7735 0128 FFF7FEFF 		bl	pixel_length
 7736              	.LVL887:
3648:src/display.c ****       }
ARM GAS  /tmp/cc9o0abE.s 			page 242


 7737              		.loc 1 3648 9 view .LVU2452
 7738              	.LBE434:
 7739              	.LBE433:
3669:src/display.c ****       }
 7740              		.loc 1 3669 2 view .LVU2453
 7741 012c 2C28     		cmp	r0, #44
 7742 012e D4BF     		ite	le
 7743 0130 0021     		movle	r1, #0
 7744 0132 0121     		movgt	r1, #1
 7745 0134 3AE0     		b	.L802
 7746              	.LVL888:
 7747              	.L872:
3669:src/display.c ****       }
 7748              		.loc 1 3669 2 view .LVU2454
 7749              	.LBE432:
 7750              	.LBE431:
 697:src/display.c **** #else
 7751              		.loc 1 697 35 discriminator 1 view .LVU2455
 7752 0136 93F8AC3F 		ldrb	r3, [r3, #4012]	@ zero_extendqisi2
 697:src/display.c **** #else
 7753              		.loc 1 697 32 discriminator 1 view .LVU2456
 7754 013a 03F04103 		and	r3, r3, #65
 7755 013e 412B     		cmp	r3, #65
 7756 0140 3FF47FAF 		beq	.L752
 718:src/display.c **** 	    *p2++ = shift_char;
 7757              		.loc 1 718 4 is_stmt 1 view .LVU2457
 718:src/display.c **** 	    *p2++ = shift_char;
 7758              		.loc 1 718 7 is_stmt 0 view .LVU2458
 7759 0144 B8F1200F 		cmp	r8, #32
 7760 0148 00F0EB81 		beq	.L753
 7761              	.L755:
 719:src/display.c **** 	    *p2++ = '\006';
 7762              		.loc 1 719 6 is_stmt 1 view .LVU2459
 7763              	.LVL889:
 720:src/display.c **** 	  }
 7764              		.loc 1 720 12 is_stmt 0 view .LVU2460
 7765 014c 0623     		movs	r3, #6
 719:src/display.c **** 	    *p2++ = '\006';
 7766              		.loc 1 719 12 view .LVU2461
 7767 014e 8DF85C80 		strb	r8, [sp, #92]
 720:src/display.c **** 	  }
 7768              		.loc 1 720 6 is_stmt 1 view .LVU2462
 7769              	.LVL890:
 720:src/display.c **** 	  }
 7770              		.loc 1 720 12 is_stmt 0 view .LVU2463
 7771 0152 8DF85D30 		strb	r3, [sp, #93]
 720:src/display.c **** 	  }
 7772              		.loc 1 720 9 view .LVU2464
 7773 0156 0DF15E00 		add	r0, sp, #94
 7774              	.LVL891:
 7775              	.L754:
 726:src/display.c **** 	  *p2++ = ' ';
 7776              		.loc 1 726 2 is_stmt 1 view .LVU2465
 726:src/display.c **** 	  *p2++ = ' ';
 7777              		.loc 1 726 6 is_stmt 0 view .LVU2466
 7778 015a 714D     		ldr	r5, .L888+8
 7779 015c 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
ARM GAS  /tmp/cc9o0abE.s 			page 243


 726:src/display.c **** 	  *p2++ = ' ';
 7780              		.loc 1 726 5 view .LVU2467
 7781 015e 9A07     		lsls	r2, r3, #30
 7782 0160 00F1A981 		bmi	.L877
 731:src/display.c **** 	  *p2++ = ' ';
 7783              		.loc 1 731 2 is_stmt 1 view .LVU2468
 731:src/display.c **** 	  *p2++ = ' ';
 7784              		.loc 1 731 5 is_stmt 0 view .LVU2469
 7785 0164 5907     		lsls	r1, r3, #29
 7786 0166 00F1E781 		bmi	.L878
 737:src/display.c **** 	  if (State2.wascomplex) {
 7787              		.loc 1 737 2 is_stmt 1 view .LVU2470
 737:src/display.c **** 	  if (State2.wascomplex) {
 7788              		.loc 1 737 5 is_stmt 0 view .LVU2471
 7789 016a B8F1200F 		cmp	r8, #32
 7790 016e 00F0E881 		beq	.L879
 7791              	.L758:
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7792              		.loc 1 754 2 is_stmt 1 view .LVU2472
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7793              		.loc 1 754 16 is_stmt 0 view .LVU2473
 7794 0172 2368     		ldr	r3, [r4]
 7795 0174 93F8EA1F 		ldrb	r1, [r3, #4074]	@ zero_extendqisi2
 7796 0178 C1F30111 		ubfx	r1, r1, #4, #2
 754:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7797              		.loc 1 754 2 view .LVU2474
 7798 017c 0129     		cmp	r1, #1
 7799 017e 00F0F381 		beq	.L809
 7800 0182 6A4B     		ldr	r3, .L888+20
 7801 0184 6A4A     		ldr	r2, .L888+24
 7802 0186 0229     		cmp	r1, #2
 7803 0188 14BF     		ite	ne
 7804 018a 1946     		movne	r1, r3
 7805 018c 1146     		moveq	r1, r2
 7806              	.L760:
 7807              	.LVL892:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7808              		.loc 1 768 2 is_stmt 1 view .LVU2475
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7809              		.loc 1 768 7 is_stmt 0 view .LVU2476
 7810 018e FFF7FEFF 		bl	scopy
 7811              	.LVL893:
 768:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7812              		.loc 1 768 7 view .LVU2477
 7813 0192 0446     		mov	r4, r0
 7814              	.LVL894:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7815              		.loc 1 770 2 is_stmt 1 view .LVU2478
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7816              		.loc 1 770 6 is_stmt 0 view .LVU2479
 7817 0194 FFF7FEFF 		bl	get_trig_mode
 7818              	.LVL895:
 770:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7819              		.loc 1 770 5 view .LVU2480
 7820 0198 0228     		cmp	r0, #2
 7821 019a 00F0EC81 		beq	.L880
 7822              	.LVL896:
ARM GAS  /tmp/cc9o0abE.s 			page 244


 7823              	.L751:
 987:src/display.c ****       set_status_top_always(buf2);
 7824              		.loc 1 987 7 is_stmt 1 view .LVU2481
 987:src/display.c ****       set_status_top_always(buf2);
 7825              		.loc 1 987 11 is_stmt 0 view .LVU2482
 7826 019e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 987:src/display.c ****       set_status_top_always(buf2);
 7827              		.loc 1 987 10 view .LVU2483
 7828 01a0 5906     		lsls	r1, r3, #25
 7829 01a2 00F1FC80 		bmi	.L881
 7830              	.L800:
 7831              	.LBB440:
 7832              	.LBB437:
3669:src/display.c ****       }
 7833              		.loc 1 3669 2 is_stmt 1 view .LVU2484
 7834 01a6 1B06     		lsls	r3, r3, #24
 7835 01a8 BCD5     		bpl	.L882
 7836              	.L820:
 7837 01aa 0121     		movs	r1, #1
 7838              	.L802:
 7839              	.LVL897:
 7840              	.LBB435:
 7841              	.LBI435:
3499:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
 7842              		.loc 1 3499 19 view .LVU2485
 7843              	.LBB436:
3500:src/display.c ****       }
 7844              		.loc 1 3500 2 view .LVU2486
 7845 01ac 4FF45373 		mov	r3, #844
 7846 01b0 0093     		str	r3, [sp]
 7847 01b2 17A8     		add	r0, sp, #92
 7848              	.LVL898:
3500:src/display.c ****       }
 7849              		.loc 1 3500 2 is_stmt 0 view .LVU2487
 7850 01b4 40F24A23 		movw	r3, #586
 7851 01b8 2B22     		movs	r2, #43
 7852 01ba FFF7FEFF 		bl	s_s_sized
 7853              	.LVL899:
3500:src/display.c ****       }
 7854              		.loc 1 3500 2 view .LVU2488
 7855              	.LBE436:
 7856              	.LBE435:
 7857              	.LBE437:
 7858              	.LBE440:
 990:src/display.c **** #else
 7859              		.loc 1 990 5 view .LVU2489
 7860 01be 23B0     		add	sp, sp, #140
 7861              		.cfi_remember_state
 7862              		.cfi_def_cfa_offset 28
 7863              		@ sp needed
 7864 01c0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7865              	.LVL900:
 7866              	.L871:
 7867              		.cfi_restore_state
 667:src/display.c **** 	    *p2++ = '\006';
 7868              		.loc 1 667 6 is_stmt 1 view .LVU2490
 668:src/display.c **** 	  }
ARM GAS  /tmp/cc9o0abE.s 			page 245


 7869              		.loc 1 668 12 is_stmt 0 view .LVU2491
 7870 01c4 0623     		movs	r3, #6
 7871 01c6 8DF85D30 		strb	r3, [sp, #93]
 667:src/display.c **** 	    *p2++ = '\006';
 7872              		.loc 1 667 12 view .LVU2492
 7873 01ca 8DF85C80 		strb	r8, [sp, #92]
 668:src/display.c **** 	  }
 7874              		.loc 1 668 6 is_stmt 1 view .LVU2493
 7875              	.LVL901:
 671:src/display.c **** 	default:
 7876              		.loc 1 671 2 view .LVU2494
 671:src/display.c **** 	default:
 7877              		.loc 1 671 9 is_stmt 0 view .LVU2495
 7878 01ce FFF7FEFF 		bl	int_mode
 7879              	.LVL902:
 7880 01d2 0138     		subs	r0, r0, #1
 7881 01d4 C0B2     		uxtb	r0, r0
 7882 01d6 0228     		cmp	r0, #2
 7883 01d8 96BF     		itet	ls
 7884 01da 594B     		ldrls	r3, .L888+40
 7885 01dc 5949     		ldrhi	r1, .L888+44
 7886 01de 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7887              	.LVL903:
 678:src/display.c **** 	*q++ = '\006';
 7888              		.loc 1 678 2 is_stmt 1 view .LVU2496
 678:src/display.c **** 	*q++ = '\006';
 7889              		.loc 1 678 6 is_stmt 0 view .LVU2497
 7890 01e2 0DF15E00 		add	r0, sp, #94
 7891              	.LVL904:
 678:src/display.c **** 	*q++ = '\006';
 7892              		.loc 1 678 6 view .LVU2498
 7893 01e6 FFF7FEFF 		bl	scopy
 7894              	.LVL905:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7895              		.loc 1 679 7 view .LVU2499
 7896 01ea 8046     		mov	r8, r0
 7897              	.LVL906:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7898              		.loc 1 679 7 view .LVU2500
 7899 01ec 0623     		movs	r3, #6
 7900 01ee 08F8013B 		strb	r3, [r8], #1
 678:src/display.c **** 	*q++ = '\006';
 7901              		.loc 1 678 6 view .LVU2501
 7902 01f2 0546     		mov	r5, r0
 7903              	.LVL907:
 679:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 7904              		.loc 1 679 2 is_stmt 1 view .LVU2502
 680:src/display.c **** 
 7905              		.loc 1 680 2 view .LVU2503
 680:src/display.c **** 
 7906              		.loc 1 680 7 is_stmt 0 view .LVU2504
 7907 01f4 FFF7FEFF 		bl	word_size
 7908              	.LVL908:
 7909 01f8 0222     		movs	r2, #2
 7910 01fa 0146     		mov	r1, r0
 7911 01fc 4046     		mov	r0, r8
 7912 01fe FFF7FEFF 		bl	num_arg_0
ARM GAS  /tmp/cc9o0abE.s 			page 246


 7913              	.LVL909:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7914              		.loc 1 682 19 view .LVU2505
 7915 0202 DFF848C1 		ldr	ip, .L888+52
 7916 0206 DCF80030 		ldr	r3, [ip]
 7917              	.LVL910:
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7918              		.loc 1 682 2 is_stmt 1 view .LVU2506
 682:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7919              		.loc 1 682 5 is_stmt 0 view .LVU2507
 7920 020a 002B     		cmp	r3, #0
 7921 020c 40F3BE80 		ble	.L868
 683:src/display.c **** 	  if (*q == '1')
 7922              		.loc 1 683 4 is_stmt 1 view .LVU2508
 683:src/display.c **** 	  if (*q == '1')
 7923              		.loc 1 683 10 is_stmt 0 view .LVU2509
 7924 0210 C3F10702 		rsb	r2, r3, #7
 7925 0214 5200     		lsls	r2, r2, #1
 683:src/display.c **** 	  if (*q == '1')
 7926              		.loc 1 683 6 view .LVU2510
 7927 0216 0292     		str	r2, [sp, #8]
 684:src/display.c **** 	    n += 2;
 7928              		.loc 1 684 4 is_stmt 1 view .LVU2511
 684:src/display.c **** 	    n += 2;
 7929              		.loc 1 684 7 is_stmt 0 view .LVU2512
 7930 0218 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 7931 021a 3129     		cmp	r1, #49
 685:src/display.c **** 	  if (q[1] == '1')
 7932              		.loc 1 685 6 is_stmt 1 view .LVU2513
 685:src/display.c **** 	  if (q[1] == '1')
 7933              		.loc 1 685 8 is_stmt 0 view .LVU2514
 7934 021c 04BF     		itt	eq
 7935 021e 0232     		addeq	r2, r2, #2
 7936 0220 0292     		streq	r2, [sp, #8]
 686:src/display.c **** 	    n += 2;
 7937              		.loc 1 686 4 is_stmt 1 view .LVU2515
 686:src/display.c **** 	    n += 2;
 7938              		.loc 1 686 7 is_stmt 0 view .LVU2516
 7939 0222 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 7940 0224 3129     		cmp	r1, #49
 7941 0226 00D1     		bne	.L744
 687:src/display.c **** 	  while (n-- > 0)
 7942              		.loc 1 687 6 is_stmt 1 view .LVU2517
 687:src/display.c **** 	  while (n-- > 0)
 7943              		.loc 1 687 8 is_stmt 0 view .LVU2518
 7944 0228 0232     		adds	r2, r2, #2
 7945              	.L744:
 688:src/display.c **** 	    *p2++ = '\006';
 7946              		.loc 1 688 10 is_stmt 1 view .LVU2519
 688:src/display.c **** 	    *p2++ = '\006';
 7947              		.loc 1 688 12 is_stmt 0 view .LVU2520
 7948 022a 511E     		subs	r1, r2, #1
 688:src/display.c **** 	    *p2++ = '\006';
 7949              		.loc 1 688 10 view .LVU2521
 7950 022c 002A     		cmp	r2, #0
 688:src/display.c **** 	    *p2++ = '\006';
 7951              		.loc 1 688 12 view .LVU2522
ARM GAS  /tmp/cc9o0abE.s 			page 247


 7952 022e 0291     		str	r1, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 7953              		.loc 1 688 10 view .LVU2523
 7954 0230 40F39C81 		ble	.L866
 689:src/display.c **** 
 7955              		.loc 1 689 12 view .LVU2524
 7956 0234 0621     		movs	r1, #6
 7957              	.L745:
 689:src/display.c **** 
 7958              		.loc 1 689 6 is_stmt 1 view .LVU2525
 7959              	.LVL911:
 689:src/display.c **** 
 7960              		.loc 1 689 12 is_stmt 0 view .LVU2526
 7961 0236 00F8011B 		strb	r1, [r0], #1
 7962              	.LVL912:
 688:src/display.c **** 	    *p2++ = '\006';
 7963              		.loc 1 688 10 is_stmt 1 view .LVU2527
 688:src/display.c **** 	    *p2++ = '\006';
 7964              		.loc 1 688 12 is_stmt 0 view .LVU2528
 7965 023a 029B     		ldr	r3, [sp, #8]
 7966 023c 5A1E     		subs	r2, r3, #1
 688:src/display.c **** 	    *p2++ = '\006';
 7967              		.loc 1 688 10 view .LVU2529
 7968 023e 002B     		cmp	r3, #0
 688:src/display.c **** 	    *p2++ = '\006';
 7969              		.loc 1 688 12 view .LVU2530
 7970 0240 0292     		str	r2, [sp, #8]
 688:src/display.c **** 	    *p2++ = '\006';
 7971              		.loc 1 688 10 view .LVU2531
 7972 0242 F8DC     		bgt	.L745
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7973              		.loc 1 691 4 is_stmt 1 view .LVU2532
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7974              		.loc 1 691 11 is_stmt 0 view .LVU2533
 7975 0244 DCF80030 		ldr	r3, [ip]
 7976 0248 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7977              		.loc 1 691 27 is_stmt 1 view .LVU2534
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7978              		.loc 1 691 4 is_stmt 0 view .LVU2535
 7979 024a 002B     		cmp	r3, #0
 7980 024c C0F29E80 		blt	.L868
 7981              	.L803:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7982              		.loc 1 691 4 view .LVU2536
 7983 0250 334D     		ldr	r5, .L888+8
 7984              	.L750:
 692:src/display.c **** 	}
 7985              		.loc 1 692 6 is_stmt 1 view .LVU2537
 692:src/display.c **** 	}
 7986              		.loc 1 692 20 is_stmt 0 view .LVU2538
 7987 0252 2A7D     		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 7988 0254 C2F3C202 		ubfx	r2, r2, #3, #3
 692:src/display.c **** 	}
 7989              		.loc 1 692 12 view .LVU2539
 7990 0258 9A42     		cmp	r2, r3
 7991 025a 0CBF     		ite	eq
ARM GAS  /tmp/cc9o0abE.s 			page 248


 7992 025c 7C23     		moveq	r3, #124
 7993 025e 2723     		movne	r3, #39
 7994              	.LVL913:
 692:src/display.c **** 	}
 7995              		.loc 1 692 12 view .LVU2540
 7996 0260 00F8013B 		strb	r3, [r0], #1
 7997              	.LVL914:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7998              		.loc 1 691 35 is_stmt 1 view .LVU2541
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 7999              		.loc 1 691 36 is_stmt 0 view .LVU2542
 8000 0264 029B     		ldr	r3, [sp, #8]
 8001 0266 013B     		subs	r3, r3, #1
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8002              		.loc 1 691 4 view .LVU2543
 8003 0268 002B     		cmp	r3, #0
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8004              		.loc 1 691 36 view .LVU2544
 8005 026a 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8006              		.loc 1 691 27 is_stmt 1 view .LVU2545
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8007              		.loc 1 691 4 is_stmt 0 view .LVU2546
 8008 026c F1DA     		bge	.L750
 8009              	.L748:
 694:src/display.c ****       }
 8010              		.loc 1 694 2 is_stmt 1 view .LVU2547
 694:src/display.c ****       }
 8011              		.loc 1 694 5 is_stmt 0 view .LVU2548
 8012 026e 002F     		cmp	r7, #0
 8013 0270 95D0     		beq	.L751
 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8014              		.loc 1 611 22 view .LVU2549
 8015 0272 B046     		mov	r8, r6
 8016              	.LVL915:
 8017              	.L741:
 8018              	.LBB441:
 889:src/display.c **** 	display_yreg:
 8019              		.loc 1 889 4 is_stmt 1 view .LVU2550
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8020              		.loc 1 896 4 view .LVU2551
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8021              		.loc 1 896 8 is_stmt 0 view .LVU2552
 8022 0274 2368     		ldr	r3, [r4]
 8023 0276 93F8E82F 		ldrb	r2, [r3, #4072]	@ zero_extendqisi2
 896:src/display.c **** 	    set_int_x(get_reg_n_int(regY_idx), p);
 8024              		.loc 1 896 7 view .LVU2553
 8025 027a D007     		lsls	r0, r2, #31
 8026 027c 00F13681 		bmi	.L883
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8027              		.loc 1 901 4 is_stmt 1 view .LVU2554
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8028              		.loc 1 901 35 is_stmt 0 view .LVU2555
 8029 0280 B3F8AC2F 		ldrh	r2, [r3, #4012]
 8030 0284 40F2C113 		movw	r3, #449
 901:src/display.c **** 	    getRegister(&y, regK_idx);
 8031              		.loc 1 901 7 view .LVU2556
ARM GAS  /tmp/cc9o0abE.s 			page 249


 8032 0288 1340     		ands	r3, r3, r2
 8033 028a C12B     		cmp	r3, #193
 8034 028c 00F03581 		beq	.L884
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8035              		.loc 1 905 6 is_stmt 1 view .LVU2557
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8036              		.loc 1 905 36 is_stmt 0 view .LVU2558
 8037 0290 DFF8BC90 		ldr	r9, .L888+56
 8038 0294 D9F80010 		ldr	r1, [r9]
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8039              		.loc 1 905 6 view .LVU2559
 8040 0298 6329     		cmp	r1, #99
 8041 029a 00F31181 		bgt	.L885
 8042              	.L783:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8043              		.loc 1 905 6 discriminator 3 view .LVU2560
 8044 029e 0131     		adds	r1, r1, #1
 8045              	.L787:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8046              		.loc 1 905 6 discriminator 4 view .LVU2561
 8047 02a0 03AF     		add	r7, sp, #12
 8048              	.LVL916:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8049              		.loc 1 905 6 discriminator 4 view .LVU2562
 8050 02a2 3846     		mov	r0, r7
 8051 02a4 FFF7FEFF 		bl	getRegister
 8052              	.LVL917:
 8053              	.L782:
 915:src/display.c **** #ifdef INCLUDE_C_LOCK
 8054              		.loc 1 915 4 is_stmt 1 view .LVU2563
 915:src/display.c **** #ifdef INCLUDE_C_LOCK
 8055              		.loc 1 915 7 is_stmt 0 view .LVU2564
 8056 02a8 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8057 02ac 13F0700F 		tst	r3, #112
 8058 02b0 40F0C080 		bne	.L789
 917:src/display.c **** #else
 8059              		.loc 1 917 6 is_stmt 1 view .LVU2565
 917:src/display.c **** #else
 8060              		.loc 1 917 19 is_stmt 0 view .LVU2566
 8061 02b4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 917:src/display.c **** #else
 8062              		.loc 1 917 9 view .LVU2567
 8063 02b6 13F0010F 		tst	r3, #1
 917:src/display.c **** #else
 8064              		.loc 1 917 39 view .LVU2568
 8065 02ba 2368     		ldr	r3, [r4]
 917:src/display.c **** #else
 8066              		.loc 1 917 9 view .LVU2569
 8067 02bc 79D0     		beq	.L792
 917:src/display.c **** #else
 8068              		.loc 1 917 38 discriminator 1 view .LVU2570
 8069 02be 93F8AC2F 		ldrb	r2, [r3, #4012]	@ zero_extendqisi2
 917:src/display.c **** #else
 8070              		.loc 1 917 33 discriminator 1 view .LVU2571
 8071 02c2 02F04101 		and	r1, r2, #65
 8072 02c6 4129     		cmp	r1, #65
 8073 02c8 06D1     		bne	.L791
ARM GAS  /tmp/cc9o0abE.s 			page 250


 917:src/display.c **** #else
 8074              		.loc 1 917 48 discriminator 2 view .LVU2572
 8075 02ca 1206     		lsls	r2, r2, #24
 8076 02cc 71D5     		bpl	.L792
 917:src/display.c **** #else
 8077              		.loc 1 917 119 discriminator 3 view .LVU2573
 8078 02ce 93F8EA2F 		ldrb	r2, [r3, #4074]	@ zero_extendqisi2
 917:src/display.c **** #else
 8079              		.loc 1 917 80 discriminator 3 view .LVU2574
 8080 02d2 12F0C00F 		tst	r2, #192
 8081 02d6 6CD1     		bne	.L792
 8082              	.L791:
 8083              	.LBB442:
 921:src/display.c **** 
 8084              		.loc 1 921 8 is_stmt 1 view .LVU2575
 923:src/display.c **** 	      UState.nothousands = 1;
 8085              		.loc 1 923 8 is_stmt 0 view .LVU2576
 8086 02d8 2A22     		movs	r2, #42
 8087 02da 0021     		movs	r1, #0
 8088 02dc 3046     		mov	r0, r6
 921:src/display.c **** 
 8089              		.loc 1 921 44 view .LVU2577
 8090 02de 93F8E79F 		ldrb	r9, [r3, #4071]	@ zero_extendqisi2
 8091 02e2 DFF87080 		ldr	r8, .L888+60
 8092              	.LVL918:
 923:src/display.c **** 	      UState.nothousands = 1;
 8093              		.loc 1 923 8 view .LVU2578
 8094 02e6 FFF7FEFF 		bl	xset
 8095              	.LVL919:
 924:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8096              		.loc 1 924 27 view .LVU2579
 8097 02ea 2268     		ldr	r2, [r4]
 8098 02ec 92F8E73F 		ldrb	r3, [r2, #4071]	@ zero_extendqisi2
 8099 02f0 43F04003 		orr	r3, r3, #64
 8100 02f4 82F8E73F 		strb	r3, [r2, #4071]
 925:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8101              		.loc 1 925 8 view .LVU2580
 8102 02f8 3146     		mov	r1, r6
 8103 02fa 3846     		mov	r0, r7
 8104 02fc FFF7FEFF 		bl	set_x_hms
 8105              	.LVL920:
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8106              		.loc 1 926 27 view .LVU2581
 8107 0300 2368     		ldr	r3, [r4]
 8108 0302 93F8E72F 		ldrb	r2, [r3, #4071]	@ zero_extendqisi2
 921:src/display.c **** 
 8109              		.loc 1 921 44 view .LVU2582
 8110 0306 C9F38019 		ubfx	r9, r9, #6, #1
 8111              	.LVL921:
 923:src/display.c **** 	      UState.nothousands = 1;
 8112              		.loc 1 923 8 is_stmt 1 view .LVU2583
 924:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 8113              		.loc 1 924 8 view .LVU2584
 925:src/display.c **** 	      UState.nothousands = saved_nothousands;
 8114              		.loc 1 925 8 view .LVU2585
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8115              		.loc 1 926 8 view .LVU2586
ARM GAS  /tmp/cc9o0abE.s 			page 251


 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8116              		.loc 1 926 27 is_stmt 0 view .LVU2587
 8117 030a 69F38612 		bfi	r2, r9, #6, #1
 8118 030e 83F8E72F 		strb	r2, [r3, #4071]
 931:src/display.c **** 	      while (*p) {
 8119              		.loc 1 931 8 is_stmt 1 view .LVU2588
 8120              	.LVL922:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8121              		.loc 1 932 8 view .LVU2589
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8122              		.loc 1 932 14 view .LVU2590
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8123              		.loc 1 932 15 is_stmt 0 view .LVU2591
 8124 0312 4021     		movs	r1, #64
 926:src/display.c **** 	      // First replace the '@' character with the degree symbol
 8125              		.loc 1 926 27 view .LVU2592
 8126 0314 0522     		movs	r2, #5
 8127 0316 26E0     		b	.L794
 8128              	.L889:
 8129              		.align	2
 8130              	.L888:
 8131 0318 00000000 		.word	main_ram
 8132 031c 00000000 		.word	.LANCHOR12
 8133 0320 00000000 		.word	StateWhileOn
 8134 0324 28000000 		.word	.LC10
 8135 0328 24000000 		.word	.LC9
 8136 032c 10000000 		.word	.LC6
 8137 0330 1C000000 		.word	.LC8
 8138 0334 58000000 		.word	.LC17
 8139 0338 08000000 		.word	.LC4
 8140 033c 4C000000 		.word	.LC15
 8141 0340 00000000 		.word	.LANCHOR13
 8142 0344 00000000 		.word	.LC2
 8143 0348 00000000 		.word	RectPolConv
 8144 034c 00000000 		.word	IntMaxWindow
 8145 0350 00000000 		.word	ShowRegister
 8146 0354 00000000 		.word	.LANCHOR14
 8147              	.LVL923:
 8148              	.L886:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8149              		.loc 1 932 15 view .LVU2593
 8150 0358 18F8021F 		ldrb	r1, [r8, #2]!	@ zero_extendqisi2
 8151              	.LVL924:
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8152              		.loc 1 932 14 view .LVU2594
 8153 035c 0029     		cmp	r1, #0
 8154 035e 3FF41EAF 		beq	.L751
 8155 0362 98F80120 		ldrb	r2, [r8, #1]	@ zero_extendqisi2
 8156              	.LVL925:
 8157              	.L794:
 933:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8158              		.loc 1 933 3 is_stmt 1 view .LVU2595
 8159 0366 3046     		mov	r0, r6
 8160 0368 FFF7FEFF 		bl	replace_char
 8161              	.LVL926:
 934:src/display.c **** 		  goto skip;
 8162              		.loc 1 934 3 view .LVU2596
ARM GAS  /tmp/cc9o0abE.s 			page 252


 934:src/display.c **** 		  goto skip;
 8163              		.loc 1 934 7 is_stmt 0 view .LVU2597
 8164 036c 0121     		movs	r1, #1
 8165 036e 3046     		mov	r0, r6
 8166 0370 FFF7FEFF 		bl	pixel_length
 8167              	.LVL927:
 937:src/display.c **** 	      }
 8168              		.loc 1 937 3 is_stmt 1 view .LVU2598
 932:src/display.c **** 		replace_char(buf, p[0], p[1]);
 8169              		.loc 1 932 14 view .LVU2599
 934:src/display.c **** 		  goto skip;
 8170              		.loc 1 934 6 is_stmt 0 view .LVU2600
 8171 0374 2C28     		cmp	r0, #44
 8172 0376 EFDC     		bgt	.L886
 8173 0378 11E7     		b	.L751
 8174              	.LVL928:
 8175              	.L761:
 934:src/display.c **** 		  goto skip;
 8176              		.loc 1 934 6 view .LVU2601
 8177              	.LBE442:
 8178              	.LBE441:
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8179              		.loc 1 790 4 is_stmt 1 view .LVU2602
 791:src/display.c **** 	  *p2++ = shift_char;
 8180              		.loc 1 791 4 view .LVU2603
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8181              		.loc 1 790 10 is_stmt 0 view .LVU2604
 8182 037a 4CF20773 		movw	r3, #50951
 792:src/display.c **** 	}
 8183              		.loc 1 792 10 view .LVU2605
 8184 037e 8DF85E80 		strb	r8, [sp, #94]
 790:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 8185              		.loc 1 790 10 view .LVU2606
 8186 0382 ADF85C30 		strh	r3, [sp, #92]	@ movhi
 792:src/display.c **** 	}
 8187              		.loc 1 792 4 is_stmt 1 view .LVU2607
 8188              	.LVL929:
 792:src/display.c **** 	}
 8189              		.loc 1 792 7 is_stmt 0 view .LVU2608
 8190 0386 0DF15F08 		add	r8, sp, #95
 8191              	.LVL930:
 792:src/display.c **** 	}
 8192              		.loc 1 792 7 view .LVU2609
 8193 038a 6AE6     		b	.L762
 8194              	.LVL931:
 8195              	.L868:
 792:src/display.c **** 	}
 8196              		.loc 1 792 7 view .LVU2610
 8197 038c 7F4D     		ldr	r5, .L890
 8198 038e 6EE7     		b	.L748
 8199              	.LVL932:
 8200              	.L875:
 864:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 8201              		.loc 1 864 29 discriminator 1 view .LVU2611
 8202 0390 03F04101 		and	r1, r3, #65
 8203 0394 4129     		cmp	r1, #65
 8204 0396 3FF4B0AE 		beq	.L775
ARM GAS  /tmp/cc9o0abE.s 			page 253


 611:src/display.c ****       char buf2[42], *p2 = buf2;
 8205              		.loc 1 611 22 view .LVU2612
 8206 039a B046     		mov	r8, r6
 8207 039c B9E6     		b	.L774
 8208              	.LVL933:
 8209              	.L881:
 987:src/display.c ****       set_status_top_always(buf2);
 8210              		.loc 1 987 27 is_stmt 1 discriminator 1 view .LVU2613
 8211 039e 3046     		mov	r0, r6
 8212 03a0 FFF7FEFF 		bl	set_status
 8213              	.LVL934:
 988:src/display.c ****       
 8214              		.loc 1 988 7 discriminator 1 view .LVU2614
 8215              	.LBB448:
 8216              	.LBI431:
3667:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
 8217              		.loc 1 3667 19 discriminator 1 view .LVU2615
 8218              	.LBB438:
3668:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8219              		.loc 1 3668 2 discriminator 1 view .LVU2616
3668:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8220              		.loc 1 3668 6 is_stmt 0 discriminator 1 view .LVU2617
 8221 03a4 7A4B     		ldr	r3, .L890+4
3668:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8222              		.loc 1 3668 5 discriminator 1 view .LVU2618
 8223 03a6 B3F90030 		ldrsh	r3, [r3]
 8224 03aa 002B     		cmp	r3, #0
 8225 03ac 6DD1     		bne	.L799
 8226 03ae AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8227 03b0 F9E6     		b	.L800
 8228              	.LVL935:
 8229              	.L792:
3668:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8230              		.loc 1 3668 5 discriminator 1 view .LVU2619
 8231              	.LBE438:
 8232              	.LBE448:
 8233              	.LBB449:
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8234              		.loc 1 941 6 is_stmt 1 view .LVU2620
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8235              		.loc 1 941 21 is_stmt 0 view .LVU2621
 8236 03b2 93F8E63F 		ldrb	r3, [r3, #4070]	@ zero_extendqisi2
 941:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8237              		.loc 1 941 9 view .LVU2622
 8238 03b6 9806     		lsls	r0, r3, #26
 8239 03b8 3CD5     		bpl	.L789
 943:src/display.c **** #endif
 8240              		.loc 1 943 6 view .LVU2623
 8241 03ba 6B7D     		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 943:src/display.c **** #endif
 8242              		.loc 1 943 3 view .LVU2624
 8243 03bc 13F00204 		ands	r4, r3, #2
 8244 03c0 38D1     		bne	.L789
 946:src/display.c **** #endif
 8245              		.loc 1 946 6 view .LVU2625
 8246 03c2 744B     		ldr	r3, .L890+8
 946:src/display.c **** #endif
ARM GAS  /tmp/cc9o0abE.s 			page 254


 8247              		.loc 1 946 3 view .LVU2626
 8248 03c4 1B68     		ldr	r3, [r3]
 8249 03c6 012B     		cmp	r3, #1
 8250 03c8 34D0     		beq	.L789
 948:src/display.c **** 	      char ltgteq;
 8251              		.loc 1 948 6 view .LVU2627
 8252 03ca 4146     		mov	r1, r8
 8253 03cc 3846     		mov	r0, r7
 8254 03ce FFF7FEFF 		bl	set_x_fract
 8255              	.LVL936:
 948:src/display.c **** 	      char ltgteq;
 8256              		.loc 1 948 3 view .LVU2628
 8257 03d2 78B3     		cbz	r0, .L789
 8258              	.LBB443:
 949:src/display.c **** 
 8259              		.loc 1 949 8 is_stmt 1 view .LVU2629
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8260              		.loc 1 951 8 view .LVU2630
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8261              		.loc 1 951 12 is_stmt 0 view .LVU2631
 8262 03d4 2146     		mov	r1, r4
 8263 03d6 3046     		mov	r0, r6
 8264 03d8 FFF7FEFF 		bl	find_char
 8265              	.LVL937:
 8266 03dc 0446     		mov	r4, r0
 951:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8267              		.loc 1 951 10 view .LVU2632
 8268 03de 0238     		subs	r0, r0, #2
 8269              	.LVL938:
 953:src/display.c **** 	      switch (ltgteq) {
 8270              		.loc 1 953 8 is_stmt 1 view .LVU2633
 953:src/display.c **** 	      switch (ltgteq) {
 8271              		.loc 1 953 15 is_stmt 0 view .LVU2634
 8272 03e0 14F8029C 		ldrb	r9, [r4, #-2]	@ zero_extendqisi2
 8273              	.LVL939:
 954:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8274              		.loc 1 954 8 is_stmt 1 view .LVU2635
 8275 03e4 B9F1470F 		cmp	r9, #71
 8276 03e8 00F0CC80 		beq	.L818
 956:src/display.c **** 	      }
 8277              		.loc 1 956 25 is_stmt 0 view .LVU2636
 8278 03ec B9F14C0F 		cmp	r9, #76
 8279 03f0 08BF     		it	eq
 8280 03f2 4FF03C09 		moveq	r9, #60
 8281              	.LVL940:
 8282              	.L796:
 958:src/display.c **** 	      q[2] = ltgteq;
 8283              		.loc 1 958 8 is_stmt 1 view .LVU2637
 8284 03f6 6849     		ldr	r1, .L890+12
 8285 03f8 FFF7FEFF 		bl	scopy
 8286              	.LVL941:
 959:src/display.c **** 
 8287              		.loc 1 959 8 view .LVU2638
 959:src/display.c **** 
 8288              		.loc 1 959 13 is_stmt 0 view .LVU2639
 8289 03fc 84F80090 		strb	r9, [r4]
 961:src/display.c **** 		goto skip;
ARM GAS  /tmp/cc9o0abE.s 			page 255


 8290              		.loc 1 961 8 is_stmt 1 view .LVU2640
 961:src/display.c **** 		goto skip;
 8291              		.loc 1 961 12 is_stmt 0 view .LVU2641
 8292 0400 0121     		movs	r1, #1
 8293 0402 3046     		mov	r0, r6
 8294 0404 FFF7FEFF 		bl	pixel_length
 8295              	.LVL942:
 961:src/display.c **** 		goto skip;
 8296              		.loc 1 961 11 view .LVU2642
 8297 0408 2C28     		cmp	r0, #44
 8298 040a 7FF7C8AE 		ble	.L751
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8299              		.loc 1 964 8 is_stmt 1 view .LVU2643
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8300              		.loc 1 964 14 is_stmt 0 view .LVU2644
 8301 040e 4FF00009 		mov	r9, #0
 8302              	.LVL943:
 964:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8303              		.loc 1 964 14 view .LVU2645
 8304 0412 04F8039C 		strb	r9, [r4, #-3]
 965:src/display.c **** 		goto skip;
 8305              		.loc 1 965 8 is_stmt 1 view .LVU2646
 965:src/display.c **** 		goto skip;
 8306              		.loc 1 965 12 is_stmt 0 view .LVU2647
 8307 0416 0121     		movs	r1, #1
 8308 0418 3046     		mov	r0, r6
 8309 041a FFF7FEFF 		bl	pixel_length
 8310              	.LVL944:
 965:src/display.c **** 		goto skip;
 8311              		.loc 1 965 11 view .LVU2648
 8312 041e 2C28     		cmp	r0, #44
 8313 0420 7FF7BDAE 		ble	.L751
 968:src/display.c **** 	    }
 8314              		.loc 1 968 8 is_stmt 1 view .LVU2649
 968:src/display.c **** 	    }
 8315              		.loc 1 968 39 is_stmt 0 view .LVU2650
 8316 0424 A8EB0602 		sub	r2, r8, r6
 968:src/display.c **** 	    }
 8317              		.loc 1 968 8 view .LVU2651
 8318 0428 4946     		mov	r1, r9
 8319 042a C2F12A02 		rsb	r2, r2, #42
 8320 042e 4046     		mov	r0, r8
 8321 0430 FFF7FEFF 		bl	xset
 8322              	.LVL945:
 8323              	.L789:
 968:src/display.c **** 	    }
 8324              		.loc 1 968 8 view .LVU2652
 8325              	.LBE443:
 971:src/display.c **** 	    int extra_pixels;
 8326              		.loc 1 971 4 is_stmt 1 view .LVU2653
 971:src/display.c **** 	    int extra_pixels;
 8327              		.loc 1 971 10 is_stmt 0 view .LVU2654
 8328 0434 0C23     		movs	r3, #12
 8329 0436 0293     		str	r3, [sp, #8]
 971:src/display.c **** 	    int extra_pixels;
 8330              		.loc 1 971 27 is_stmt 1 view .LVU2655
 8331 0438 0FE0     		b	.L798
ARM GAS  /tmp/cc9o0abE.s 			page 256


 8332              	.LVL946:
 8333              	.L887:
 8334              	.LBB444:
 979:src/display.c **** 
 8335              		.loc 1 979 6 is_stmt 0 view .LVU2656
 8336 043a 029A     		ldr	r2, [sp, #8]
 8337 043c 0A32     		adds	r2, r2, #10
 8338 043e FFF7FEFF 		bl	xset
 8339              	.LVL947:
 981:src/display.c **** 	  }
 8340              		.loc 1 981 6 is_stmt 1 view .LVU2657
 981:src/display.c **** 	  }
 8341              		.loc 1 981 30 is_stmt 0 view .LVU2658
 8342 0442 B4F14802 		subs	r2, r4, #72
 981:src/display.c **** 	  }
 8343              		.loc 1 981 8 view .LVU2659
 8344 0446 029B     		ldr	r3, [sp, #8]
 981:src/display.c **** 	  }
 8345              		.loc 1 981 30 view .LVU2660
 8346 0448 48BF     		it	mi
 8347 044a A4F14502 		submi	r2, r4, #69
 981:src/display.c **** 	  }
 8348              		.loc 1 981 8 view .LVU2661
 8349 044e A3EBA203 		sub	r3, r3, r2, asr #2
 8350              	.LBE444:
 971:src/display.c **** 	    int extra_pixels;
 8351              		.loc 1 971 4 view .LVU2662
 8352 0452 012B     		cmp	r3, #1
 8353              	.LBB445:
 981:src/display.c **** 	  }
 8354              		.loc 1 981 8 view .LVU2663
 8355 0454 0293     		str	r3, [sp, #8]
 8356              	.LBE445:
 971:src/display.c **** 	    int extra_pixels;
 8357              		.loc 1 971 27 is_stmt 1 view .LVU2664
 971:src/display.c **** 	    int extra_pixels;
 8358              		.loc 1 971 4 is_stmt 0 view .LVU2665
 8359 0456 7FF7A2AE 		ble	.L751
 8360              	.LVL948:
 8361              	.L798:
 8362              	.LBB446:
 972:src/display.c **** 
 8363              		.loc 1 972 6 is_stmt 1 view .LVU2666
 974:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 8364              		.loc 1 974 6 view .LVU2667
 8365 045a 02AA     		add	r2, sp, #8
 8366 045c 4146     		mov	r1, r8
 8367 045e 3846     		mov	r0, r7
 8368 0460 FFF7FEFF 		bl	set_x_dn
 8369              	.LVL949:
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8370              		.loc 1 975 6 view .LVU2668
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8371              		.loc 1 975 21 is_stmt 0 view .LVU2669
 8372 0464 0121     		movs	r1, #1
 8373 0466 3046     		mov	r0, r6
 8374 0468 FFF7FEFF 		bl	pixel_length
ARM GAS  /tmp/cc9o0abE.s 			page 257


 8375              	.LVL950:
 979:src/display.c **** 
 8376              		.loc 1 979 6 is_stmt 1 view .LVU2670
 975:src/display.c **** 	    if (extra_pixels <= 0)
 8377              		.loc 1 975 21 is_stmt 0 view .LVU2671
 8378 046c 0446     		mov	r4, r0
 8379              	.LVL951:
 976:src/display.c **** 	      break;
 8380              		.loc 1 976 6 is_stmt 1 view .LVU2672
 976:src/display.c **** 	      break;
 8381              		.loc 1 976 9 is_stmt 0 view .LVU2673
 8382 046e 4B2C     		cmp	r4, #75
 979:src/display.c **** 
 8383              		.loc 1 979 6 view .LVU2674
 8384 0470 4FF00001 		mov	r1, #0
 8385 0474 4046     		mov	r0, r8
 8386              	.LVL952:
 976:src/display.c **** 	      break;
 8387              		.loc 1 976 9 view .LVU2675
 8388 0476 E0DC     		bgt	.L887
 8389              	.LVL953:
 976:src/display.c **** 	      break;
 8390              		.loc 1 976 9 view .LVU2676
 8391              	.LBE446:
 8392 0478 91E6     		b	.L751
 8393              	.LVL954:
 8394              	.L772:
 976:src/display.c **** 	      break;
 8395              		.loc 1 976 9 view .LVU2677
 8396              	.LBE449:
 861:src/display.c **** 	  p = scopy(p, q);
 8397              		.loc 1 861 4 is_stmt 1 view .LVU2678
 862:src/display.c **** 	}
 8398              		.loc 1 862 4 view .LVU2679
 862:src/display.c **** 	}
 8399              		.loc 1 862 8 is_stmt 0 view .LVU2680
 8400 047a 4849     		ldr	r1, .L890+16
 8401 047c 3046     		mov	r0, r6
 8402 047e FFF7FEFF 		bl	scopy
 8403              	.LVL955:
 8404 0482 D9F80020 		ldr	r2, [r9]
 8405 0486 8046     		mov	r8, r0
 8406              	.LVL956:
 862:src/display.c **** 	}
 8407              		.loc 1 862 6 view .LVU2681
 8408 0488 43E6     		b	.L774
 8409              	.LVL957:
 8410              	.L799:
 8411              	.LBB450:
 8412              	.LBB439:
3668:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 8413              		.loc 1 3668 22 view .LVU2682
 8414 048a AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 8415 048c 5A06     		lsls	r2, r3, #25
 8416 048e 7FF58AAE 		bpl	.L800
 8417              	.LBE439:
 8418              	.LBE450:
ARM GAS  /tmp/cc9o0abE.s 			page 258


 990:src/display.c **** #else
 8419              		.loc 1 990 5 view .LVU2683
 8420 0492 23B0     		add	sp, sp, #140
 8421              		.cfi_remember_state
 8422              		.cfi_def_cfa_offset 28
 8423              		@ sp needed
 8424 0494 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 8425              	.LVL958:
 8426              	.L873:
 8427              		.cfi_restore_state
 797:src/display.c **** 	  *p2++ = '\207';
 8428              		.loc 1 797 4 is_stmt 1 view .LVU2684
 798:src/display.c **** 	  *p2++ = '\007';	    
 8429              		.loc 1 798 4 view .LVU2685
 799:src/display.c **** 	}
 8430              		.loc 1 799 10 is_stmt 0 view .LVU2686
 8431 0498 88F80230 		strb	r3, [r8, #2]
 798:src/display.c **** 	  *p2++ = '\007';	    
 8432              		.loc 1 798 10 view .LVU2687
 8433 049c 88F80120 		strb	r2, [r8, #1]
 799:src/display.c **** 	}
 8434              		.loc 1 799 4 is_stmt 1 view .LVU2688
 799:src/display.c **** 	}
 8435              		.loc 1 799 7 is_stmt 0 view .LVU2689
 8436 04a0 08F10308 		add	r8, r8, #3
 8437              	.LVL959:
 799:src/display.c **** 	}
 8438              		.loc 1 799 7 view .LVU2690
 8439 04a4 EEE5     		b	.L764
 8440              	.LVL960:
 8441              	.L812:
 831:src/display.c **** #endif
 8442              		.loc 1 831 19 view .LVU2691
 8443 04a6 3E49     		ldr	r1, .L890+20
 8444 04a8 05E6     		b	.L766
 8445              	.LVL961:
 8446              	.L876:
 883:src/display.c **** 	    p = scopy(p, q);
 8447              		.loc 1 883 6 is_stmt 1 view .LVU2692
 884:src/display.c **** 	    //	    goto no_copy;
 8448              		.loc 1 884 6 view .LVU2693
 884:src/display.c **** 	    //	    goto no_copy;
 8449              		.loc 1 884 10 is_stmt 0 view .LVU2694
 8450 04aa 4046     		mov	r0, r8
 8451 04ac 3D49     		ldr	r1, .L890+24
 8452 04ae FFF7FEFF 		bl	scopy
 8453              	.LVL962:
 8454 04b2 8046     		mov	r8, r0
 8455              	.LVL963:
 884:src/display.c **** 	    //	    goto no_copy;
 8456              		.loc 1 884 10 view .LVU2695
 8457 04b4 30E6     		b	.L777
 8458              	.LVL964:
 8459              	.L877:
 727:src/display.c **** 	  *p2 = '\024';
 8460              		.loc 1 727 4 is_stmt 1 view .LVU2696
 727:src/display.c **** 	  *p2 = '\024';
ARM GAS  /tmp/cc9o0abE.s 			page 259


 8461              		.loc 1 727 10 is_stmt 0 view .LVU2697
 8462 04b6 2022     		movs	r2, #32
 728:src/display.c **** 	  goto skip;
 8463              		.loc 1 728 8 view .LVU2698
 8464 04b8 1423     		movs	r3, #20
 727:src/display.c **** 	  *p2 = '\024';
 8465              		.loc 1 727 10 view .LVU2699
 8466 04ba 0270     		strb	r2, [r0]
 728:src/display.c **** 	  goto skip;
 8467              		.loc 1 728 4 is_stmt 1 view .LVU2700
 728:src/display.c **** 	  goto skip;
 8468              		.loc 1 728 8 is_stmt 0 view .LVU2701
 8469 04bc 4370     		strb	r3, [r0, #1]
 729:src/display.c **** 	}
 8470              		.loc 1 729 4 is_stmt 1 view .LVU2702
 8471 04be 6EE6     		b	.L751
 8472              	.LVL965:
 8473              	.L885:
 8474              	.LBB451:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8475              		.loc 1 905 77 is_stmt 0 discriminator 2 view .LVU2703
 8476 04c0 FFF7FEFF 		bl	stack_size
 8477              	.LVL966:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8478              		.loc 1 905 64 discriminator 2 view .LVU2704
 8479 04c4 D9F80010 		ldr	r1, [r9]
 8480 04c8 6330     		adds	r0, r0, #99
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8481              		.loc 1 905 48 discriminator 2 view .LVU2705
 8482 04ca 8842     		cmp	r0, r1
 8483 04cc FFF6E7AE 		blt	.L783
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8484              		.loc 1 906 13 view .LVU2706
 8485 04d0 FFF7FEFF 		bl	get_cmdline
 8486              	.LVL967:
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8487              		.loc 1 906 9 view .LVU2707
 8488 04d4 0028     		cmp	r0, #0
 8489 04d6 4BD0     		beq	.L785
 906:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8490              		.loc 1 906 27 discriminator 1 view .LVU2708
 8491 04d8 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 8492 04da 002B     		cmp	r3, #0
 8493 04dc 48D1     		bne	.L785
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8494              		.loc 1 907 9 view .LVU2709
 8495 04de 17B1     		cbz	r7, .L786
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8496              		.loc 1 907 30 discriminator 1 view .LVU2710
 8497 04e0 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 907:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 8498              		.loc 1 907 12 discriminator 1 view .LVU2711
 8499 04e2 5906     		lsls	r1, r3, #25
 8500 04e4 44D5     		bpl	.L785
 8501              	.L786:
 905:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 8502              		.loc 1 905 6 discriminator 5 view .LVU2712
ARM GAS  /tmp/cc9o0abE.s 			page 260


 8503 04e6 D9F80010 		ldr	r1, [r9]
 8504 04ea D9E6     		b	.L787
 8505              	.L883:
 897:src/display.c **** 	    goto skip;
 8506              		.loc 1 897 6 is_stmt 1 view .LVU2713
 8507 04ec 6520     		movs	r0, #101
 8508 04ee FFF7FEFF 		bl	get_reg_n_int
 8509              	.LVL968:
 8510 04f2 4246     		mov	r2, r8
 8511 04f4 FFF7FEFF 		bl	set_int_x
 8512              	.LVL969:
 898:src/display.c **** 	  }
 8513              		.loc 1 898 6 view .LVU2714
 8514 04f8 51E6     		b	.L751
 8515              	.L884:
 902:src/display.c **** 	  }
 8516              		.loc 1 902 6 view .LVU2715
 8517 04fa 03AF     		add	r7, sp, #12
 8518              	.LVL970:
 902:src/display.c **** 	  }
 8519              		.loc 1 902 6 is_stmt 0 view .LVU2716
 8520 04fc 3846     		mov	r0, r7
 8521 04fe 6F21     		movs	r1, #111
 8522 0500 FFF7FEFF 		bl	getRegister
 8523              	.LVL971:
 8524 0504 D0E6     		b	.L782
 8525              	.LVL972:
 8526              	.L874:
 902:src/display.c **** 	  }
 8527              		.loc 1 902 6 view .LVU2717
 8528              	.LBE451:
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8529              		.loc 1 851 4 is_stmt 1 view .LVU2718
 852:src/display.c **** 	  }
 8530              		.loc 1 852 6 view .LVU2719
 855:src/display.c **** 	  }
 8531              		.loc 1 855 6 view .LVU2720
 851:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 8532              		.loc 1 851 7 is_stmt 0 view .LVU2721
 8533 0506 1906     		lsls	r1, r3, #24
 852:src/display.c **** 	  }
 8534              		.loc 1 852 33 view .LVU2722
 8535 0508 4BBF     		itete	mi
 8536 050a 274A     		ldrmi	r2, .L890+28
 855:src/display.c **** 	  }
 8537              		.loc 1 855 31 view .LVU2723
 8538 050c 274A     		ldrpl	r2, .L890+32
 852:src/display.c **** 	  }
 8539              		.loc 1 852 33 view .LVU2724
 8540 050e 2849     		ldrmi	r1, .L890+36
 855:src/display.c **** 	  }
 8541              		.loc 1 855 31 view .LVU2725
 8542 0510 2849     		ldrpl	r1, .L890+40
 8543 0512 13F0020F 		tst	r3, #2
 8544 0516 08BF     		it	eq
 8545 0518 1146     		moveq	r1, r2
 8546              	.LVL973:
ARM GAS  /tmp/cc9o0abE.s 			page 261


 857:src/display.c **** 	  goto skip;
 8547              		.loc 1 857 4 is_stmt 1 view .LVU2726
 8548 051a 3046     		mov	r0, r6
 8549 051c FFF7FEFF 		bl	scopy
 8550              	.LVL974:
 858:src/display.c **** 	}
 8551              		.loc 1 858 4 view .LVU2727
 8552 0520 3DE6     		b	.L751
 8553              	.LVL975:
 8554              	.L753:
 718:src/display.c **** 	    *p2++ = shift_char;
 8555              		.loc 1 718 30 is_stmt 0 discriminator 1 view .LVU2728
 8556 0522 FFF7FEFF 		bl	is_dblmode
 8557              	.LVL976:
 718:src/display.c **** 	    *p2++ = shift_char;
 8558              		.loc 1 718 26 discriminator 1 view .LVU2729
 8559 0526 0028     		cmp	r0, #0
 8560 0528 3FF410AE 		beq	.L755
 723:src/display.c **** 	  }
 8561              		.loc 1 723 6 is_stmt 1 view .LVU2730
 8562              	.LVL977:
 723:src/display.c **** 	  }
 8563              		.loc 1 723 12 is_stmt 0 view .LVU2731
 8564 052c 4423     		movs	r3, #68
 8565 052e 8DF85C30 		strb	r3, [sp, #92]
 723:src/display.c **** 	  }
 8566              		.loc 1 723 9 view .LVU2732
 8567 0532 0DF15D00 		add	r0, sp, #93
 8568              	.LVL978:
 723:src/display.c **** 	  }
 8569              		.loc 1 723 9 view .LVU2733
 8570 0536 10E6     		b	.L754
 8571              	.L878:
 732:src/display.c **** 	  *p2 = '\015';
 8572              		.loc 1 732 4 is_stmt 1 view .LVU2734
 8573              	.LVL979:
 732:src/display.c **** 	  *p2 = '\015';
 8574              		.loc 1 732 10 is_stmt 0 view .LVU2735
 8575 0538 2022     		movs	r2, #32
 733:src/display.c **** 	  goto skip;
 8576              		.loc 1 733 8 view .LVU2736
 8577 053a 0D23     		movs	r3, #13
 732:src/display.c **** 	  *p2 = '\015';
 8578              		.loc 1 732 10 view .LVU2737
 8579 053c 0270     		strb	r2, [r0]
 733:src/display.c **** 	  goto skip;
 8580              		.loc 1 733 4 is_stmt 1 view .LVU2738
 733:src/display.c **** 	  goto skip;
 8581              		.loc 1 733 8 is_stmt 0 view .LVU2739
 8582 053e 4370     		strb	r3, [r0, #1]
 734:src/display.c **** 	}
 8583              		.loc 1 734 4 is_stmt 1 view .LVU2740
 8584 0540 2DE6     		b	.L751
 8585              	.LVL980:
 8586              	.L879:
 737:src/display.c **** 	  if (State2.wascomplex) {
 8587              		.loc 1 737 28 is_stmt 0 discriminator 1 view .LVU2741
ARM GAS  /tmp/cc9o0abE.s 			page 262


 8588 0542 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 737:src/display.c **** 	  if (State2.wascomplex) {
 8589              		.loc 1 737 24 discriminator 1 view .LVU2742
 8590 0544 13F0C00F 		tst	r3, #192
 8591 0548 1AD1     		bne	.L807
 737:src/display.c **** 	  if (State2.wascomplex) {
 8592              		.loc 1 737 60 discriminator 2 view .LVU2743
 8593 054a 124B     		ldr	r3, .L890+8
 8594 054c 1B68     		ldr	r3, [r3]
 737:src/display.c **** 	  if (State2.wascomplex) {
 8595              		.loc 1 737 46 discriminator 2 view .LVU2744
 8596 054e 002B     		cmp	r3, #0
 8597 0550 3FF40FAE 		beq	.L758
 738:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8598              		.loc 1 738 4 is_stmt 1 view .LVU2745
 741:src/display.c **** 	    if (RectPolConv == 1) {
 8599              		.loc 1 741 9 view .LVU2746
 742:src/display.c **** 	      q = "\007\306<";
 8600              		.loc 1 742 6 view .LVU2747
 746:src/display.c **** 	    }
 8601              		.loc 1 746 10 is_stmt 0 view .LVU2748
 8602 0554 1849     		ldr	r1, .L890+44
 8603 0556 194A     		ldr	r2, .L890+48
 8604 0558 012B     		cmp	r3, #1
 8605 055a 18BF     		it	ne
 8606 055c 1146     		movne	r1, r2
 8607              	.L759:
 8608              	.LVL981:
 749:src/display.c **** 
 8609              		.loc 1 749 4 is_stmt 1 view .LVU2749
 749:src/display.c **** 
 8610              		.loc 1 749 8 is_stmt 0 view .LVU2750
 8611 055e 3046     		mov	r0, r6
 8612              	.LVL982:
 749:src/display.c **** 
 8613              		.loc 1 749 8 view .LVU2751
 8614 0560 FFF7FEFF 		bl	scopy
 8615              	.LVL983:
 749:src/display.c **** 
 8616              		.loc 1 749 8 view .LVU2752
 8617 0564 8046     		mov	r8, r0
 8618              	.LVL984:
 751:src/display.c **** 	}
 8619              		.loc 1 751 4 is_stmt 1 view .LVU2753
 8620 0566 85E6     		b	.L741
 8621              	.LVL985:
 8622              	.L809:
 760:src/display.c **** #endif
 8623              		.loc 1 760 19 is_stmt 0 view .LVU2754
 8624 0568 0D49     		ldr	r1, .L890+20
 8625 056a 10E6     		b	.L760
 8626              	.LVL986:
 8627              	.L866:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8628              		.loc 1 691 4 is_stmt 1 view .LVU2755
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8629              		.loc 1 691 11 is_stmt 0 view .LVU2756
ARM GAS  /tmp/cc9o0abE.s 			page 263


 8630 056c 0293     		str	r3, [sp, #8]
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8631              		.loc 1 691 27 is_stmt 1 view .LVU2757
 8632 056e 6FE6     		b	.L803
 8633              	.LVL987:
 8634              	.L785:
 691:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 8635              		.loc 1 691 27 is_stmt 0 view .LVU2758
 8636 0570 D9F80010 		ldr	r1, [r9]
 8637 0574 93E6     		b	.L783
 8638              	.LVL988:
 8639              	.L880:
 771:src/display.c **** 	}
 8640              		.loc 1 771 4 is_stmt 1 view .LVU2759
 8641 0576 1249     		ldr	r1, .L890+52
 8642 0578 2046     		mov	r0, r4
 8643 057a FFF7FEFF 		bl	scopy
 8644              	.LVL989:
 8645 057e 0EE6     		b	.L751
 8646              	.LVL990:
 8647              	.L807:
 739:src/display.c **** 	  }
 8648              		.loc 1 739 8 is_stmt 0 view .LVU2760
 8649 0580 1049     		ldr	r1, .L890+56
 8650 0582 ECE7     		b	.L759
 8651              	.LVL991:
 8652              	.L818:
 8653              	.LBB452:
 8654              	.LBB447:
 955:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8655              		.loc 1 955 25 view .LVU2761
 8656 0584 4FF03E09 		mov	r9, #62
 8657              	.LVL992:
 955:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8658              		.loc 1 955 25 view .LVU2762
 8659 0588 35E7     		b	.L796
 8660              	.L891:
 8661 058a 00BF     		.align	2
 8662              	.L890:
 8663 058c 00000000 		.word	StateWhileOn
 8664 0590 00000000 		.word	.LANCHOR15
 8665 0594 00000000 		.word	RectPolConv
 8666 0598 68000000 		.word	.LC21
 8667 059c 60000000 		.word	.LC18
 8668 05a0 14000000 		.word	.LC7
 8669 05a4 64000000 		.word	.LC19
 8670 05a8 3C000000 		.word	.LC13
 8671 05ac 44000000 		.word	.LC14
 8672 05b0 2C000000 		.word	.LC11
 8673 05b4 34000000 		.word	.LC12
 8674 05b8 04000000 		.word	.LC3
 8675 05bc 0C000000 		.word	.LC5
 8676 05c0 50000000 		.word	.LC16
 8677 05c4 08000000 		.word	.LC4
 8678              	.LBE447:
 8679              	.LBE452:
 8680              		.cfi_endproc
ARM GAS  /tmp/cc9o0abE.s 			page 264


 8681              	.LFE12:
 8683              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8684              		.align	2
 8685              	.LC22:
 8686 0000 0D00     		.ascii	"\015\000"
 8687 0002 0000     		.align	2
 8688              	.LC23:
 8689 0004 060600   		.ascii	"\006\006\000"
 8690 0007 00       		.align	2
 8691              	.LC25:
 8692 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8692      492C2057 
 8692      77414C74 
 8692      4500
 8693 0016 0000     		.align	2
 8694              	.LC26:
 8695 0018 48595000 		.ascii	"HYP\000"
 8696              		.align	2
 8697              	.LC27:
 8698 001c 7F060600 		.ascii	"\177\006\006\000"
 8699              		.align	2
 8700              	.LC30:
 8701 0020 3020746F 		.ascii	"0 to 255\000"
 8701      20323535 
 8701      00
 8702 0029 000000   		.align	2
 8703              	.LC31:
 8704 002c 46726565 		.ascii	"Free:\000"
 8704      3A00
 8705 0032 0000     		.align	2
 8706              	.LC32:
 8707 0034 202C2046 		.ascii	" , FL. \000"
 8707      4C2E2000 
 8708              		.align	2
 8709              	.LC33:
 8710 003c 52656773 		.ascii	"Regs:\000"
 8710      3A00
 8711 0042 0000     		.align	2
 8712              	.LC34:
 8713 0044 20910606 		.ascii	" \221\006\006+\000"
 8713      2B00
 8714 004a 0000     		.align	2
 8715              	.LC35:
 8716 004c 202C204C 		.ascii	" , Loc. \000"
 8716      6F632E20 
 8716      00
 8717 0055 000000   		.align	2
 8718              	.LC36:
 8719 0058 464C2000 		.ascii	"FL \000"
 8720              		.align	2
 8721              	.LC37:
 8722 005c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8722      06413A44 
 8722      064C494A 
 8722      4B00
 8723 006a 0000     		.align	2
 8724              	.LC38:
ARM GAS  /tmp/cc9o0abE.s 			page 265


 8725 006c 464C2E30 		.ascii	"FL.00-.15\000"
 8725      302D2E31 
 8725      3500
 8726 0076 0000     		.align	2
 8727              	.LC39:
 8728 0078 43414C4C 		.ascii	"CALLS\000"
 8728      5300
 8729 007e 0000     		.align	2
 8730              	.LC40:
 8731 0080 52656720 		.ascii	"Reg \000"
 8731      00
 8732 0085 000000   		.align	2
 8733              	.LC41:
 8734 0088 00       		.ascii	"\000"
 8735 0089 000000   		.align	2
 8736              	.LC42:
 8737 008c 202D2D2D 		.ascii	" ---\000"
 8737      00
 8738 0091 000000   		.align	2
 8739              	.LC29:
 8740 0094 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8740      093E0A00 
 8741              		.align	2
 8742              	.LC28:
 8743 009c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8743      41424344 
 8743      4C494A4B 
 8743      00
 8744              		.section	.text.display,"ax",%progbits
 8745              		.align	1
 8746              		.p2align 2,,3
 8747              		.global	display
 8748              		.syntax unified
 8749              		.thumb
 8750              		.thumb_func
 8751              		.fpu fpv4-sp-d16
 8753              	display:
 8754              	.LFB30:
2677:src/display.c **** 	int i, j;
 8755              		.loc 1 2677 26 is_stmt 1 view -0
 8756              		.cfi_startproc
 8757              		@ args = 0, pretend = 0, frame = 160
 8758              		@ frame_needed = 0, uses_anonymous_args = 0
2678:src/display.c **** 	char buf[40], *bp = buf;
 8759              		.loc 1 2678 2 view .LVU2764
2679:src/display.c **** 	const char *p;
 8760              		.loc 1 2679 2 view .LVU2765
2677:src/display.c **** 	int i, j;
 8761              		.loc 1 2677 26 is_stmt 0 view .LVU2766
 8762 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8763              		.cfi_def_cfa_offset 36
 8764              		.cfi_offset 4, -36
 8765              		.cfi_offset 5, -32
 8766              		.cfi_offset 6, -28
 8767              		.cfi_offset 7, -24
 8768              		.cfi_offset 8, -20
 8769              		.cfi_offset 9, -16
ARM GAS  /tmp/cc9o0abE.s 			page 266


 8770              		.cfi_offset 10, -12
 8771              		.cfi_offset 11, -8
 8772              		.cfi_offset 14, -4
2682:src/display.c **** 	int skip = 0;
 8773              		.loc 1 2682 24 view .LVU2767
 8774 0004 BF4C     		ldr	r4, .L1230
2687:src/display.c **** 	if (State2.disp_freeze) {
 8775              		.loc 1 2687 16 view .LVU2768
 8776 0006 C04F     		ldr	r7, .L1230+4
2682:src/display.c **** 	int skip = 0;
 8777              		.loc 1 2682 24 view .LVU2769
 8778 0008 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
2677:src/display.c **** 	int i, j;
 8779              		.loc 1 2677 26 view .LVU2770
 8780 000a A9B0     		sub	sp, sp, #164
 8781              		.cfi_def_cfa_offset 200
 8782              	.LVL993:
2680:src/display.c **** 	int annuc = 0;
 8783              		.loc 1 2680 2 is_stmt 1 view .LVU2771
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8784              		.loc 1 2681 2 view .LVU2772
2682:src/display.c **** 	int skip = 0;
 8785              		.loc 1 2682 2 view .LVU2773
2682:src/display.c **** 	int skip = 0;
 8786              		.loc 1 2682 24 is_stmt 0 view .LVU2774
 8787 000c 0193     		str	r3, [sp, #4]
 8788              	.LVL994:
2683:src/display.c **** 	int x_disp = 0;
 8789              		.loc 1 2683 2 is_stmt 1 view .LVU2775
2684:src/display.c **** 	const int shift = cur_shift();
 8790              		.loc 1 2684 2 view .LVU2776
2685:src/display.c **** 
 8791              		.loc 1 2685 2 view .LVU2777
2685:src/display.c **** 
 8792              		.loc 1 2685 20 is_stmt 0 view .LVU2778
 8793 000e FFF7FEFF 		bl	cur_shift
 8794              	.LVL995:
2688:src/display.c **** 	  State2.disp_freeze = 0;
 8795              		.loc 1 2688 6 view .LVU2779
 8796 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2687:src/display.c **** 	if (State2.disp_freeze) {
 8797              		.loc 1 2687 16 view .LVU2780
 8798 0014 0022     		movs	r2, #0
 8799              	.LVL996:
2687:src/display.c **** 	if (State2.disp_freeze) {
 8800              		.loc 1 2687 2 is_stmt 1 view .LVU2781
2688:src/display.c **** 	  State2.disp_freeze = 0;
 8801              		.loc 1 2688 5 is_stmt 0 view .LVU2782
 8802 0016 13F01008 		ands	r8, r3, #16
2687:src/display.c **** 	if (State2.disp_freeze) {
 8803              		.loc 1 2687 16 view .LVU2783
 8804 001a 3A80     		strh	r2, [r7]	@ movhi
2688:src/display.c **** 	  State2.disp_freeze = 0;
 8805              		.loc 1 2688 2 is_stmt 1 view .LVU2784
2688:src/display.c **** 	  State2.disp_freeze = 0;
 8806              		.loc 1 2688 5 is_stmt 0 view .LVU2785
 8807 001c 40F0D280 		bne	.L1188
ARM GAS  /tmp/cc9o0abE.s 			page 267


2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8808              		.loc 1 2698 2 is_stmt 1 view .LVU2786
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8809              		.loc 1 2698 6 is_stmt 0 view .LVU2787
 8810 0020 DFF81093 		ldr	r9, .L1230+48
 8811 0024 D9F80060 		ldr	r6, [r9]
2698:src/display.c **** #if defined(QTGUI) || defined(IOS)
 8812              		.loc 1 2698 5 view .LVU2788
 8813 0028 002E     		cmp	r6, #0
 8814 002a 5AD1     		bne	.L1189
2717:src/display.c **** #  endif
 8815              		.loc 1 2717 2 is_stmt 1 view .LVU2789
2717:src/display.c **** #  endif
 8816              		.loc 1 2717 33 is_stmt 0 view .LVU2790
 8817 002c DFF8F0B2 		ldr	fp, .L1230+28
 8818 0030 DBF80030 		ldr	r3, [fp]
 8819 0034 0546     		mov	r5, r0
 8820 0036 93F8EAAF 		ldrb	r10, [r3, #4074]	@ zero_extendqisi2
2723:src/display.c **** 
 8821              		.loc 1 2723 2 view .LVU2791
 8822 003a FFF7FEFF 		bl	reset_disp
 8823              	.LVL997:
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8824              		.loc 1 2726 2 view .LVU2792
 8825 003e 1EA8     		add	r0, sp, #120
 8826              	.LVL998:
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8827              		.loc 1 2726 2 view .LVU2793
 8828 0040 2822     		movs	r2, #40
 8829 0042 3146     		mov	r1, r6
 8830 0044 FFF7FEFF 		bl	xset
 8831              	.LVL999:
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8832              		.loc 1 2732 6 view .LVU2794
 8833 0048 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8834              		.loc 1 2732 5 view .LVU2795
 8835 004a D806     		lsls	r0, r3, #27
2717:src/display.c **** #  endif
 8836              		.loc 1 2717 12 view .LVU2796
 8837 004c CAF3800A 		ubfx	r10, r10, #2, #1
 8838              	.LVL1000:
2723:src/display.c **** 
 8839              		.loc 1 2723 2 is_stmt 1 view .LVU2797
2726:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
 8840              		.loc 1 2726 2 view .LVU2798
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8841              		.loc 1 2732 2 view .LVU2799
2732:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8842              		.loc 1 2732 5 is_stmt 0 view .LVU2800
 8843 0050 00F17481 		bmi	.L1190
2744:src/display.c **** 	  if (yreg_enabled) {
 8844              		.loc 1 2744 9 is_stmt 1 view .LVU2801
2744:src/display.c **** 	  if (yreg_enabled) {
 8845              		.loc 1 2744 13 is_stmt 0 view .LVU2802
 8846 0054 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
2744:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/cc9o0abE.s 			page 268


 8847              		.loc 1 2744 12 view .LVU2803
 8848 0056 5107     		lsls	r1, r2, #29
 8849 0058 00F0BE80 		beq	.L900
2745:src/display.c **** 	    set_status_top(S_SURE);
 8850              		.loc 1 2745 4 is_stmt 1 view .LVU2804
2745:src/display.c **** 	    set_status_top(S_SURE);
 8851              		.loc 1 2745 7 is_stmt 0 view .LVU2805
 8852 005c BAF1000F 		cmp	r10, #0
 8853 0060 00F0A581 		beq	.L901
2746:src/display.c **** 	    no_status_top = 1;
 8854              		.loc 1 2746 6 is_stmt 1 view .LVU2806
 8855              	.LVL1001:
 8856              	.LBB512:
 8857              	.LBI512:
3657:src/display.c **** 	if (no_status_top) return;
 8858              		.loc 1 3657 19 view .LVU2807
 8859              	.LBB513:
3658:src/display.c **** 	if (State2.runmode) {
 8860              		.loc 1 3658 2 view .LVU2808
3658:src/display.c **** 	if (State2.runmode) {
 8861              		.loc 1 3658 5 is_stmt 0 view .LVU2809
 8862 0064 B7F90030 		ldrsh	r3, [r7]
 8863 0068 13B9     		cbnz	r3, .L903
 8864 006a A848     		ldr	r0, .L1230+8
 8865 006c FFF7FEFF 		bl	set_status_top.part.0
 8866              	.LVL1002:
 8867              	.L903:
3658:src/display.c **** 	if (State2.runmode) {
 8868              		.loc 1 3658 5 view .LVU2810
 8869              	.LBE513:
 8870              	.LBE512:
2747:src/display.c **** 	    annuc = 1;
 8871              		.loc 1 2747 6 is_stmt 1 view .LVU2811
2747:src/display.c **** 	    annuc = 1;
 8872              		.loc 1 2747 20 is_stmt 0 view .LVU2812
 8873 0070 0126     		movs	r6, #1
 8874 0072 3E80     		strh	r6, [r7]	@ movhi
2748:src/display.c **** 	  }
 8875              		.loc 1 2748 6 is_stmt 1 view .LVU2813
 8876              	.LVL1003:
2971:src/display.c ****       nostk:
 8877              		.loc 1 2971 2 view .LVU2814
 8878 0074 FFF7FEFF 		bl	show_stack
 8879              	.LVL1004:
2973:src/display.c **** 	if (!skip) {
 8880              		.loc 1 2973 2 view .LVU2815
 8881 0078 A54B     		ldr	r3, .L1230+12
 8882 007a DFF8BC82 		ldr	r8, .L1230+52
 8883 007e 0093     		str	r3, [sp]
 8884 0080 FFF7FEFF 		bl	show_flags
 8885              	.LVL1005:
2974:src/display.c **** 	  if (State2.runmode) {
 8886              		.loc 1 2974 2 view .LVU2816
 8887              	.L904:
2975:src/display.c **** 	  only_update_x:
 8888              		.loc 1 2975 4 view .LVU2817
2975:src/display.c **** 	  only_update_x:
ARM GAS  /tmp/cc9o0abE.s 			page 269


 8889              		.loc 1 2975 8 is_stmt 0 view .LVU2818
 8890 0084 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2975:src/display.c **** 	  only_update_x:
 8891              		.loc 1 2975 7 view .LVU2819
 8892 0086 13F04005 		ands	r5, r3, #64
 8893 008a 39D1     		bne	.L897
 8894              	.LBB514:
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8895              		.loc 1 3015 6 is_stmt 1 view .LVU2820
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8896              		.loc 1 3015 24 is_stmt 0 view .LVU2821
 8897 008c DBF80030 		ldr	r3, [fp]
3015:src/display.c **** 	    unsigned int upc = user_pc(pc);
 8898              		.loc 1 3015 19 view .LVU2822
 8899 0090 B3F8E09F 		ldrh	r9, [r3, #4064]
 8900              	.LVL1006:
3016:src/display.c **** 	    const int n = nLIB(pc);
 8901              		.loc 1 3016 6 is_stmt 1 view .LVU2823
3016:src/display.c **** 	    const int n = nLIB(pc);
 8902              		.loc 1 3016 25 is_stmt 0 view .LVU2824
 8903 0094 4846     		mov	r0, r9
 8904 0096 FFF7FEFF 		bl	user_pc
 8905              	.LVL1007:
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8906              		.loc 1 3018 6 view .LVU2825
 8907 009a 2822     		movs	r2, #40
3016:src/display.c **** 	    const int n = nLIB(pc);
 8908              		.loc 1 3016 25 view .LVU2826
 8909 009c 8246     		mov	r10, r0
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8910              		.loc 1 3018 6 view .LVU2827
 8911 009e 2946     		mov	r1, r5
 8912 00a0 1EA8     		add	r0, sp, #120
 8913              	.LVL1008:
3017:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8914              		.loc 1 3017 6 is_stmt 1 view .LVU2828
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8915              		.loc 1 3018 6 is_stmt 0 view .LVU2829
 8916 00a2 FFF7FEFF 		bl	xset
 8917              	.LVL1009:
3019:src/display.c **** #ifdef FOUR_K
 8918              		.loc 1 3019 6 view .LVU2830
 8919 00a6 9B4B     		ldr	r3, .L1230+16
 8920 00a8 2A46     		mov	r2, r5
 8921 00aa 1868     		ldr	r0, [r3]
 8922 00ac 0121     		movs	r1, #1
 8923 00ae FFF7FEFF 		bl	set_exp
 8924              	.LVL1010:
3021:src/display.c **** 	      num_arg_0(scopy_spc(buf, S7_STEP), upc, 3);
 8925              		.loc 1 3021 9 view .LVU2831
 8926 00b2 BAF57A7F 		cmp	r10, #1000
3017:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 8927              		.loc 1 3017 20 view .LVU2832
 8928 00b6 4FEA9939 		lsr	r9, r9, #14
 8929              	.LVL1011:
3018:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 8930              		.loc 1 3018 6 is_stmt 1 view .LVU2833
ARM GAS  /tmp/cc9o0abE.s 			page 270


3019:src/display.c **** #ifdef FOUR_K
 8931              		.loc 1 3019 6 view .LVU2834
3021:src/display.c **** 	      num_arg_0(scopy_spc(buf, S7_STEP), upc, 3);
 8932              		.loc 1 3021 6 view .LVU2835
3021:src/display.c **** 	      num_arg_0(scopy_spc(buf, S7_STEP), upc, 3);
 8933              		.loc 1 3021 9 is_stmt 0 view .LVU2836
 8934 00ba C0F0B981 		bcc	.L1191
3025:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
 8935              		.loc 1 3025 8 is_stmt 1 view .LVU2837
 8936 00be B9F1000F 		cmp	r9, #0
 8937 00c2 40F0B981 		bne	.L1034
 8938 00c6 9449     		ldr	r1, .L1230+20
 8939              	.LVL1012:
 8940              	.L1036:
3025:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
 8941              		.loc 1 3025 8 is_stmt 0 discriminator 4 view .LVU2838
 8942 00c8 1EA8     		add	r0, sp, #120
 8943 00ca FFF7FEFF 		bl	scopy
 8944              	.LVL1013:
 8945 00ce 5146     		mov	r1, r10
 8946 00d0 0422     		movs	r2, #4
 8947 00d2 FFF7FEFF 		bl	num_arg_0
 8948              	.LVL1014:
 8949              	.L1035:
3032:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 8950              		.loc 1 3032 6 is_stmt 1 view .LVU2839
 8951 00d6 1EA8     		add	r0, sp, #120
 8952 00d8 0921     		movs	r1, #9
 8953 00da FFF7FEFF 		bl	set_digits_string
 8954              	.LVL1015:
3032:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 8955              		.loc 1 3032 6 is_stmt 0 view .LVU2840
 8956              	.LBE514:
3051:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8957              		.loc 1 3051 2 is_stmt 1 view .LVU2841
 8958 00de 8F4D     		ldr	r5, .L1230+24
 8959 00e0 2DE0     		b	.L1187
 8960              	.LVL1016:
 8961              	.L1189:
2705:src/display.c **** 
 8962              		.loc 1 2705 4 view .LVU2842
 8963 00e2 FFF7FEFF 		bl	wait_for_display
 8964              	.LVL1017:
2708:src/display.c **** 	    clr_dot(i);
 8965              		.loc 1 2708 4 view .LVU2843
2708:src/display.c **** 	    clr_dot(i);
 8966              		.loc 1 2708 16 view .LVU2844
 8967              	.L896:
2709:src/display.c **** 	  }
 8968              		.loc 1 2709 6 discriminator 3 view .LVU2845
 8969 00e6 4046     		mov	r0, r8
2708:src/display.c **** 	    clr_dot(i);
 8970              		.loc 1 2708 31 is_stmt 0 discriminator 3 view .LVU2846
 8971 00e8 08F10108 		add	r8, r8, #1
 8972              	.LVL1018:
2709:src/display.c **** 	  }
 8973              		.loc 1 2709 6 discriminator 3 view .LVU2847
ARM GAS  /tmp/cc9o0abE.s 			page 271


 8974 00ec FFF7FEFF 		bl	clr_dot
 8975              	.LVL1019:
2708:src/display.c **** 	    clr_dot(i);
 8976              		.loc 1 2708 31 is_stmt 1 discriminator 3 view .LVU2848
2708:src/display.c **** 	    clr_dot(i);
 8977              		.loc 1 2708 16 discriminator 3 view .LVU2849
2708:src/display.c **** 	    clr_dot(i);
 8978              		.loc 1 2708 4 is_stmt 0 discriminator 3 view .LVU2850
 8979 00f0 B8F1830F 		cmp	r8, #131
 8980 00f4 F7D1     		bne	.L896
 8981 00f6 864B     		ldr	r3, .L1230+12
 8982 00f8 DFF83C82 		ldr	r8, .L1230+52
 8983              	.LVL1020:
2708:src/display.c **** 	    clr_dot(i);
 8984              		.loc 1 2708 4 discriminator 3 view .LVU2851
 8985 00fc 0093     		str	r3, [sp]
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8986              		.loc 1 2681 6 view .LVU2852
 8987 00fe 0026     		movs	r6, #0
 8988              	.LVL1021:
 8989              	.L897:
2977:src/display.c **** 	    if (p == NULL || cata) {
 8990              		.loc 1 2977 6 is_stmt 1 view .LVU2853
2977:src/display.c **** 	    if (p == NULL || cata) {
 8991              		.loc 1 2977 10 is_stmt 0 view .LVU2854
 8992 0100 FFF7FEFF 		bl	get_cmdline
 8993              	.LVL1022:
2978:src/display.c **** 	      if (ShowRegister != -1) {
 8994              		.loc 1 2978 6 is_stmt 1 view .LVU2855
2978:src/display.c **** 	      if (ShowRegister != -1) {
 8995              		.loc 1 2978 9 is_stmt 0 view .LVU2856
 8996 0104 0546     		mov	r5, r0
 8997 0106 18B1     		cbz	r0, .L991
2978:src/display.c **** 	      if (ShowRegister != -1) {
 8998              		.loc 1 2978 20 discriminator 1 view .LVU2857
 8999 0108 019B     		ldr	r3, [sp, #4]
 9000 010a 002B     		cmp	r3, #0
 9001 010c 00F09F80 		beq	.L992
 9002              	.L991:
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9003              		.loc 1 2979 8 is_stmt 1 view .LVU2858
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9004              		.loc 1 2979 25 is_stmt 0 view .LVU2859
 9005 0110 824D     		ldr	r5, .L1230+24
 9006 0112 2868     		ldr	r0, [r5]
 9007              	.LVL1023:
2979:src/display.c **** #ifdef INCLUDE_C_LOCK
 9008              		.loc 1 2979 11 view .LVU2860
 9009 0114 411C     		adds	r1, r0, #1
 9010 0116 00F04081 		beq	.L993
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9011              		.loc 1 2981 3 is_stmt 1 view .LVU2861
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9012              		.loc 1 2981 8 is_stmt 0 view .LVU2862
 9013 011a 814A     		ldr	r2, .L1230+28
 9014 011c 1168     		ldr	r1, [r2]
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
ARM GAS  /tmp/cc9o0abE.s 			page 272


 9015              		.loc 1 2981 34 view .LVU2863
 9016 011e 91F8AC3F 		ldrb	r3, [r1, #4012]	@ zero_extendqisi2
2981:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 9017              		.loc 1 2981 6 view .LVU2864
 9018 0122 03F0C703 		and	r3, r3, #199
 9019 0126 C12B     		cmp	r3, #193
 9020 0128 00F0C980 		beq	.L1192
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9021              		.loc 1 2997 5 is_stmt 1 view .LVU2865
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9022              		.loc 1 2997 41 is_stmt 0 view .LVU2866
 9023 012c 6428     		cmp	r0, #100
 9024 012e 00F06981 		beq	.L1193
 9025              	.L1000:
2998:src/display.c **** 		}
 9026              		.loc 1 2998 5 is_stmt 1 view .LVU2867
 9027 0132 0021     		movs	r1, #0
 9028 0134 FFF7FEFF 		bl	format_reg
 9029              	.LVL1024:
3011:src/display.c **** 	      goto finish;
 9030              		.loc 1 3011 6 view .LVU2868
3011:src/display.c **** 	      goto finish;
 9031              		.loc 1 3011 9 is_stmt 0 view .LVU2869
 9032 0138 D9F80030 		ldr	r3, [r9]
 9033 013c 73BB     		cbnz	r3, .L998
 9034              	.L1187:
3051:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9035              		.loc 1 3051 2 view .LVU2870
 9036 013e FFF7FEFF 		bl	set_annunciators
 9037              	.LVL1025:
3052:src/display.c **** 	  ShowRPN = 0;
 9038              		.loc 1 3052 2 is_stmt 1 view .LVU2871
 9039              	.L899:
3053:src/display.c **** 	  dot(RPN, 0);
 9040              		.loc 1 3053 4 view .LVU2872
3053:src/display.c **** 	  dot(RPN, 0);
 9041              		.loc 1 3053 12 is_stmt 0 view .LVU2873
 9042 0142 DFF8E091 		ldr	r9, .L1230+32
 9043 0146 0023     		movs	r3, #0
 9044              	.LBB515:
 9045              	.LBB516:
 349:src/display.c **** }
 9046              		.loc 1 349 8 view .LVU2874
 9047 0148 8D20     		movs	r0, #141
 9048              	.LBE516:
 9049              	.LBE515:
3053:src/display.c **** 	  dot(RPN, 0);
 9050              		.loc 1 3053 12 view .LVU2875
 9051 014a C9F80030 		str	r3, [r9]
3054:src/display.c **** 	}
 9052              		.loc 1 3054 4 is_stmt 1 view .LVU2876
 9053              	.LVL1026:
 9054              	.LBB518:
 9055              	.LBI515:
 347:src/display.c ****   if (on)	set_dot(n);
 9056              		.loc 1 347 6 view .LVU2877
 9057              	.LBB517:
ARM GAS  /tmp/cc9o0abE.s 			page 273


 348:src/display.c ****   else	clr_dot(n);
 9058              		.loc 1 348 3 view .LVU2878
 349:src/display.c **** }
 9059              		.loc 1 349 8 view .LVU2879
 9060 014e FFF7FEFF 		bl	clr_dot
 9061              	.LVL1027:
 9062              	.L1037:
 349:src/display.c **** }
 9063              		.loc 1 349 8 is_stmt 0 view .LVU2880
 9064              	.LBE517:
 9065              	.LBE518:
3057:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9066              		.loc 1 3057 2 is_stmt 1 view .LVU2881
3058:src/display.c **** 
 9067              		.loc 1 3058 4 is_stmt 0 view .LVU2882
 9068 0152 D9F80030 		ldr	r3, [r9]
 9069 0156 002B     		cmp	r3, #0
 9070 0158 40F0D180 		bne	.L1058
3057:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9071              		.loc 1 3057 31 view .LVU2883
 9072 015c A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9073 015e 12F04003 		ands	r3, r2, #64
 9074 0162 08D0     		beq	.L1038
3058:src/display.c **** 
 9075              		.loc 1 3058 8 view .LVU2884
 9076 0164 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3058:src/display.c **** 
 9077              		.loc 1 3058 4 view .LVU2885
 9078 0166 1B07     		lsls	r3, r3, #28
 9079 0168 40F10A81 		bpl	.L1060
3058:src/display.c **** 
 9080              		.loc 1 3058 30 discriminator 3 view .LVU2886
 9081 016c 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9082 016e 012B     		cmp	r3, #1
 9083 0170 01D0     		beq	.L1038
3058:src/display.c **** 
 9084              		.loc 1 3058 60 discriminator 5 view .LVU2887
 9085 0172 C2F38003 		ubfx	r3, r2, #2, #1
 9086              	.L1038:
3057:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9087              		.loc 1 3057 19 discriminator 9 view .LVU2888
 9088 0176 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9089 0178 63F34512 		bfi	r2, r3, #5, #1
 9090 017c E275     		strb	r2, [r4, #23]
3061:src/display.c **** 	  annunciators();
 9091              		.loc 1 3061 2 is_stmt 1 discriminator 9 view .LVU2889
3061:src/display.c **** 	  annunciators();
 9092              		.loc 1 3061 5 is_stmt 0 discriminator 9 view .LVU2890
 9093 017e 002E     		cmp	r6, #0
 9094 0180 00F0B780 		beq	.L1039
3061:src/display.c **** 	  annunciators();
 9095              		.loc 1 3061 36 discriminator 1 view .LVU2891
 9096 0184 D3B2     		uxtb	r3, r2
3061:src/display.c **** 	  annunciators();
 9097              		.loc 1 3061 13 discriminator 1 view .LVU2892
 9098 0186 03F02103 		and	r3, r3, #33
 9099 018a 202B     		cmp	r3, #32
ARM GAS  /tmp/cc9o0abE.s 			page 274


 9100 018c 00F0B180 		beq	.L1039
 9101              	.L1040:
3062:src/display.c ****  	State2.hms = 0;
 9102              		.loc 1 3062 4 is_stmt 1 view .LVU2893
 9103 0190 FFF7FEFF 		bl	annunciators
 9104              	.LVL1028:
 9105              	.L1041:
3063:src/display.c **** #else
 9106              		.loc 1 3063 3 view .LVU2894
3063:src/display.c **** #else
 9107              		.loc 1 3063 14 is_stmt 0 view .LVU2895
 9108 0194 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 9109 0196 6FF30003 		bfc	r3, #0, #1
 9110 019a E375     		strb	r3, [r4, #23]
 9111              	.L998:
3070:src/display.c **** 	State2.disp_as_alpha = 0;
 9112              		.loc 1 3070 2 is_stmt 1 view .LVU2896
3071:src/display.c **** 	State2.smode = SDISP_NORMAL;
 9113              		.loc 1 3071 2 view .LVU2897
3072:src/display.c **** 	State2.invalid_disp = 0;
 9114              		.loc 1 3072 2 view .LVU2898
3070:src/display.c **** 	State2.disp_as_alpha = 0;
 9115              		.loc 1 3070 17 is_stmt 0 view .LVU2899
 9116 019c 6369     		ldr	r3, [r4, #20]
3076:src/display.c **** 	State2.disp_small = 0;
 9117              		.loc 1 3076 11 view .LVU2900
 9118 019e 009A     		ldr	r2, [sp]
3070:src/display.c **** 	State2.disp_as_alpha = 0;
 9119              		.loc 1 3070 17 view .LVU2901
 9120 01a0 23F02173 		bic	r3, r3, #42205184
 9121 01a4 23F48053 		bic	r3, r3, #4096
3072:src/display.c **** 	State2.invalid_disp = 0;
 9122              		.loc 1 3072 15 view .LVU2902
 9123 01a8 0026     		movs	r6, #0
3070:src/display.c **** 	State2.disp_as_alpha = 0;
 9124              		.loc 1 3070 17 view .LVU2903
 9125 01aa 6361     		str	r3, [r4, #20]
3074:src/display.c **** 	DispMsg = CNULL;
 9126              		.loc 1 3074 15 view .LVU2904
 9127 01ac 6423     		movs	r3, #100
3072:src/display.c **** 	State2.invalid_disp = 0;
 9128              		.loc 1 3072 15 view .LVU2905
 9129 01ae 6674     		strb	r6, [r4, #17]
3073:src/display.c **** 	ShowRegister = regX_idx;
 9130              		.loc 1 3073 2 is_stmt 1 view .LVU2906
3074:src/display.c **** 	DispMsg = CNULL;
 9131              		.loc 1 3074 2 view .LVU2907
3075:src/display.c **** 	DispPlot = 0;
 9132              		.loc 1 3075 10 is_stmt 0 view .LVU2908
 9133 01b0 C8F80060 		str	r6, [r8]
3076:src/display.c **** 	State2.disp_small = 0;
 9134              		.loc 1 3076 11 view .LVU2909
 9135 01b4 1680     		strh	r6, [r2]	@ movhi
3074:src/display.c **** 	DispMsg = CNULL;
 9136              		.loc 1 3074 15 view .LVU2910
 9137 01b6 2B60     		str	r3, [r5]
3075:src/display.c **** 	DispPlot = 0;
ARM GAS  /tmp/cc9o0abE.s 			page 275


 9138              		.loc 1 3075 2 is_stmt 1 view .LVU2911
3076:src/display.c **** 	State2.disp_small = 0;
 9139              		.loc 1 3076 2 view .LVU2912
3077:src/display.c **** 	finish_display();
 9140              		.loc 1 3077 2 view .LVU2913
3078:src/display.c **** 	no_status_top = 0;
 9141              		.loc 1 3078 2 view .LVU2914
 9142 01b8 FFF7FEFF 		bl	finish_display
 9143              	.LVL1029:
3079:src/display.c **** #ifdef CONSOLE
 9144              		.loc 1 3079 2 view .LVU2915
3079:src/display.c **** #ifdef CONSOLE
 9145              		.loc 1 3079 16 is_stmt 0 view .LVU2916
 9146 01bc 3E80     		strh	r6, [r7]	@ movhi
3083:src/display.c **** #else
 9147              		.loc 1 3083 7 view .LVU2917
 9148 01be 29B0     		add	sp, sp, #164
 9149              		.cfi_remember_state
 9150              		.cfi_def_cfa_offset 36
 9151              		@ sp needed
 9152 01c0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9153              	.LVL1030:
 9154              	.L1188:
 9155              		.cfi_restore_state
2689:src/display.c **** 	  State2.disp_temp = 1;
 9156              		.loc 1 2689 4 is_stmt 1 view .LVU2918
2690:src/display.c **** #ifdef CONSOLE
 9157              		.loc 1 2690 4 view .LVU2919
2694:src/display.c **** 	  return;
 9158              		.loc 1 2694 12 is_stmt 0 view .LVU2920
 9159 01c4 5749     		ldr	r1, .L1230+32
2689:src/display.c **** 	  State2.disp_temp = 1;
 9160              		.loc 1 2689 23 view .LVU2921
 9161 01c6 23F03003 		bic	r3, r3, #48
 9162 01ca 43F02003 		orr	r3, r3, #32
 9163 01ce E375     		strb	r3, [r4, #23]
2694:src/display.c **** 	  return;
 9164              		.loc 1 2694 4 is_stmt 1 view .LVU2922
2694:src/display.c **** 	  return;
 9165              		.loc 1 2694 12 is_stmt 0 view .LVU2923
 9166 01d0 0A60     		str	r2, [r1]
2695:src/display.c **** 	}
 9167              		.loc 1 2695 4 is_stmt 1 view .LVU2924
3083:src/display.c **** #else
 9168              		.loc 1 3083 7 is_stmt 0 view .LVU2925
 9169 01d2 29B0     		add	sp, sp, #164
 9170              		.cfi_remember_state
 9171              		.cfi_def_cfa_offset 36
 9172              		@ sp needed
 9173 01d4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9174              	.LVL1031:
 9175              	.L900:
 9176              		.cfi_restore_state
2753:src/display.c **** 	  bp = scopy(bp, "HYP");
 9177              		.loc 1 2753 9 is_stmt 1 view .LVU2926
2753:src/display.c **** 	  bp = scopy(bp, "HYP");
 9178              		.loc 1 2753 12 is_stmt 0 view .LVU2927
ARM GAS  /tmp/cc9o0abE.s 			page 276


 9179 01d8 9A06     		lsls	r2, r3, #26
 9180 01da 00F1D380 		bmi	.L1194
2765:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9181              		.loc 1 2765 9 is_stmt 1 view .LVU2928
2765:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 9182              		.loc 1 2765 12 is_stmt 0 view .LVU2929
 9183 01de D907     		lsls	r1, r3, #31
 9184 01e0 00F15981 		bmi	.L1195
2780:src/display.c **** 	  /* Commands with arguments */
 9185              		.loc 1 2780 9 is_stmt 1 view .LVU2930
2780:src/display.c **** 	  /* Commands with arguments */
 9186              		.loc 1 2780 13 is_stmt 0 view .LVU2931
 9187 01e4 A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
2780:src/display.c **** 	  /* Commands with arguments */
 9188              		.loc 1 2780 12 view .LVU2932
 9189 01e6 8A06     		lsls	r2, r1, #26
 9190 01e8 40F1ED80 		bpl	.L912
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9191              		.loc 1 2783 4 is_stmt 1 view .LVU2933
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9192              		.loc 1 2783 8 is_stmt 0 view .LVU2934
 9193 01ec E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9194              		.loc 1 2783 7 view .LVU2935
 9195 01ee 4D2B     		cmp	r3, #77
 9196 01f0 00F08681 		beq	.L913
2783:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 9197              		.loc 1 2783 28 discriminator 1 view .LVU2936
 9198 01f4 03F16C02 		add	r2, r3, #108
 9199 01f8 D2B2     		uxtb	r2, r2
 9200 01fa 012A     		cmp	r2, #1
 9201 01fc 40F28081 		bls	.L913
2679:src/display.c **** 	const char *p;
 9202              		.loc 1 2679 17 view .LVU2937
 9203 0200 1EA8     		add	r0, sp, #120
 9204              	.LVL1032:
 9205              	.L914:
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9206              		.loc 1 2786 4 is_stmt 1 view .LVU2938
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9207              		.loc 1 2786 35 is_stmt 0 view .LVU2939
 9208 0202 0622     		movs	r2, #6
 9209 0204 4849     		ldr	r1, .L1230+36
 9210 0206 02EB0313 		add	r3, r2, r3, lsl #4
2786:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 9211              		.loc 1 2786 9 view .LVU2940
 9212 020a 1944     		add	r1, r1, r3
 9213 020c FFF7FEFF 		bl	scopy
 9214              	.LVL1033:
2787:src/display.c **** 	  if (State2.dot) {
 9215              		.loc 1 2787 4 is_stmt 1 view .LVU2941
2787:src/display.c **** 	  if (State2.dot) {
 9216              		.loc 1 2787 9 is_stmt 0 view .LVU2942
 9217 0210 464B     		ldr	r3, .L1230+40
 9218 0212 94F91510 		ldrsb	r1, [r4, #21]
 9219 0216 464A     		ldr	r2, .L1230+44
 9220 0218 12EA2101 		ands	r1, r2, r1, asr #32
ARM GAS  /tmp/cc9o0abE.s 			page 277


 9221 021c 38BF     		it	cc
 9222 021e 1946     		movcc	r1, r3
 9223 0220 FFF7FEFF 		bl	scopy
 9224              	.LVL1034:
2788:src/display.c **** 	    *bp++ = 's';
 9225              		.loc 1 2788 8 view .LVU2943
 9226 0224 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9227              	.LVL1035:
2788:src/display.c **** 	    *bp++ = 's';
 9228              		.loc 1 2788 4 is_stmt 1 view .LVU2944
2788:src/display.c **** 	    *bp++ = 's';
 9229              		.loc 1 2788 7 is_stmt 0 view .LVU2945
 9230 0226 5B06     		lsls	r3, r3, #25
 9231 0228 40F17C81 		bpl	.L916
2789:src/display.c **** 	    *bp++ = '_';
 9232              		.loc 1 2789 6 is_stmt 1 view .LVU2946
 9233              	.LVL1036:
2789:src/display.c **** 	    *bp++ = '_';
 9234              		.loc 1 2789 12 is_stmt 0 view .LVU2947
 9235 022c 7322     		movs	r2, #115
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9236              		.loc 1 2790 12 view .LVU2948
 9237 022e 5F23     		movs	r3, #95
2789:src/display.c **** 	    *bp++ = '_';
 9238              		.loc 1 2789 12 view .LVU2949
 9239 0230 0270     		strb	r2, [r0]
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9240              		.loc 1 2790 6 is_stmt 1 view .LVU2950
 9241              	.LVL1037:
2790:src/display.c **** 	  } else if (shift == SHIFT_F) {
 9242              		.loc 1 2790 12 is_stmt 0 view .LVU2951
 9243 0232 4370     		strb	r3, [r0, #1]
 9244              	.LVL1038:
 9245              	.L940:
2893:src/display.c **** 	    set_status_top(buf);
 9246              		.loc 1 2893 4 is_stmt 1 view .LVU2952
2893:src/display.c **** 	    set_status_top(buf);
 9247              		.loc 1 2893 7 is_stmt 0 view .LVU2953
 9248 0234 BAF1000F 		cmp	r10, #0
 9249 0238 00F0D880 		beq	.L907
 9250              	.L1177:
2894:src/display.c **** 	    no_status_top = 1;
 9251              		.loc 1 2894 6 is_stmt 1 view .LVU2954
 9252              	.LVL1039:
 9253              	.LBB519:
 9254              	.LBI519:
3657:src/display.c **** 	if (no_status_top) return;
 9255              		.loc 1 3657 19 view .LVU2955
 9256              	.LBB520:
3658:src/display.c **** 	if (State2.runmode) {
 9257              		.loc 1 3658 2 view .LVU2956
3658:src/display.c **** 	if (State2.runmode) {
 9258              		.loc 1 3658 5 is_stmt 0 view .LVU2957
 9259 023c B7F90030 		ldrsh	r3, [r7]
 9260 0240 002B     		cmp	r3, #0
 9261 0242 7FF415AF 		bne	.L903
 9262              	.LBE520:
ARM GAS  /tmp/cc9o0abE.s 			page 278


 9263              	.LBE519:
 9264              	.LBB521:
 9265              	.LBB522:
 9266 0246 1EA8     		add	r0, sp, #120
 9267              	.LVL1040:
3658:src/display.c **** 	if (State2.runmode) {
 9268              		.loc 1 3658 5 view .LVU2958
 9269 0248 FFF7FEFF 		bl	set_status_top.part.0
 9270              	.LVL1041:
3658:src/display.c **** 	if (State2.runmode) {
 9271              		.loc 1 3658 5 view .LVU2959
 9272 024c 10E7     		b	.L903
 9273              	.LVL1042:
 9274              	.L992:
3658:src/display.c **** 	if (State2.runmode) {
 9275              		.loc 1 3658 5 view .LVU2960
 9276              	.LBE522:
 9277              	.LBE521:
3008:src/display.c **** 	      x_disp = 1;
 9278              		.loc 1 3008 8 is_stmt 1 view .LVU2961
 9279              	.LBB523:
 9280              	.LBI523:
1328:src/display.c ****       int i;
 9281              		.loc 1 1328 17 view .LVU2962
 9282              	.LBB524:
1329:src/display.c ****       int gotdot = -1;
 9283              		.loc 1 1329 7 view .LVU2963
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9284              		.loc 1 1330 7 view .LVU2964
1332:src/display.c **** #endif
 9285              		.loc 1 1332 7 view .LVU2965
1336:src/display.c **** #endif
 9286              		.loc 1 1336 7 view .LVU2966
1339:src/display.c **** 	SET_MANT_SIGN;
 9287              		.loc 1 1339 7 view .LVU2967
1339:src/display.c **** 	SET_MANT_SIGN;
 9288              		.loc 1 1339 10 is_stmt 0 view .LVU2968
 9289 024e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 9290 0250 2D2B     		cmp	r3, #45
 9291 0252 00F08781 		beq	.L1196
 9292              	.LVL1043:
 9293              	.L1003:
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9294              		.loc 1 1344 7 is_stmt 1 view .LVU2969
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9295              		.loc 1 1344 11 is_stmt 0 view .LVU2970
 9296 0256 324B     		ldr	r3, .L1230+28
 9297 0258 1B68     		ldr	r3, [r3]
 9298 025a 93F8E83F 		ldrb	r3, [r3, #4072]	@ zero_extendqisi2
1344:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 9299              		.loc 1 1344 10 view .LVU2971
 9300 025e 13F0010A 		ands	r10, r3, #1
 9301 0262 00F02981 		beq	.L1004
 9302              	.LVL1044:
1345:src/display.c **** 	  set_dig(i, *p);
 9303              		.loc 1 1345 12 is_stmt 1 view .LVU2972
 9304 0266 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
ARM GAS  /tmp/cc9o0abE.s 			page 279


1345:src/display.c **** 	  set_dig(i, *p);
 9305              		.loc 1 1345 8 is_stmt 0 view .LVU2973
 9306 0268 4FF0000A 		mov	r10, #0
1345:src/display.c **** 	  set_dig(i, *p);
 9307              		.loc 1 1345 2 view .LVU2974
 9308 026c 41B1     		cbz	r1, .L1006
 9309              	.LVL1045:
 9310              	.L1005:
1346:src/display.c **** 	  i += SEGS_PER_DIGIT;
 9311              		.loc 1 1346 4 is_stmt 1 view .LVU2975
 9312 026e 5046     		mov	r0, r10
 9313 0270 FFF7FEFF 		bl	set_dig
 9314              	.LVL1046:
1347:src/display.c **** 	}
 9315              		.loc 1 1347 4 view .LVU2976
1345:src/display.c **** 	  set_dig(i, *p);
 9316              		.loc 1 1345 12 is_stmt 0 view .LVU2977
 9317 0274 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 9318              	.LVL1047:
1347:src/display.c **** 	}
 9319              		.loc 1 1347 6 view .LVU2978
 9320 0278 0AF1090A 		add	r10, r10, #9
 9321              	.LVL1048:
1345:src/display.c **** 	  set_dig(i, *p);
 9322              		.loc 1 1345 24 is_stmt 1 view .LVU2979
1345:src/display.c **** 	  set_dig(i, *p);
 9323              		.loc 1 1345 12 view .LVU2980
1345:src/display.c **** 	  set_dig(i, *p);
 9324              		.loc 1 1345 2 is_stmt 0 view .LVU2981
 9325 027c 0029     		cmp	r1, #0
 9326 027e F6D1     		bne	.L1005
 9327              	.LVL1049:
 9328              	.L1006:
1349:src/display.c ****       } else {
 9329              		.loc 1 1349 2 is_stmt 1 view .LVU2982
 9330 0280 FFF7FEFF 		bl	carry_overflow
 9331              	.LVL1050:
1349:src/display.c ****       } else {
 9332              		.loc 1 1349 2 is_stmt 0 view .LVU2983
 9333              	.LBE524:
 9334              	.LBE523:
3011:src/display.c **** 	      goto finish;
 9335              		.loc 1 3011 6 is_stmt 1 view .LVU2984
3011:src/display.c **** 	      goto finish;
 9336              		.loc 1 3011 9 is_stmt 0 view .LVU2985
 9337 0284 D9F80030 		ldr	r3, [r9]
 9338 0288 002B     		cmp	r3, #0
 9339 028a 40F00281 		bne	.L1100
 9340              	.LVL1051:
 9341              	.L1185:
3011:src/display.c **** 	      goto finish;
 9342              		.loc 1 3011 9 view .LVU2986
 9343 028e 234D     		ldr	r5, .L1230+24
 9344              	.LVL1052:
 9345              	.L997:
3051:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9346              		.loc 1 3051 2 is_stmt 1 view .LVU2987
ARM GAS  /tmp/cc9o0abE.s 			page 280


 9347 0290 FFF7FEFF 		bl	set_annunciators
 9348              	.LVL1053:
3052:src/display.c **** 	  ShowRPN = 0;
 9349              		.loc 1 3052 2 view .LVU2988
3052:src/display.c **** 	  ShowRPN = 0;
 9350              		.loc 1 3052 50 is_stmt 0 view .LVU2989
 9351 0294 D8F80030 		ldr	r3, [r8]
 9352 0298 002B     		cmp	r3, #0
 9353 029a 7FF452AF 		bne	.L899
3052:src/display.c **** 	  ShowRPN = 0;
 9354              		.loc 1 3052 69 discriminator 3 view .LVU2990
 9355 029e 009B     		ldr	r3, [sp]
 9356 02a0 B3F90030 		ldrsh	r3, [r3]
 9357 02a4 002B     		cmp	r3, #0
 9358 02a6 7FF44CAF 		bne	.L899
3052:src/display.c **** 	  ShowRPN = 0;
 9359              		.loc 1 3052 81 discriminator 4 view .LVU2991
 9360 02aa A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9361 02ac 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9362 02ae 03F00403 		and	r3, r3, #4
 9363 02b2 1343     		orrs	r3, r3, r2
 9364 02b4 7FF445AF 		bne	.L899
 9365 02b8 DFF86890 		ldr	r9, .L1230+32
 9366 02bc 49E7     		b	.L1037
 9367              	.LVL1054:
 9368              	.L1192:
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9369              		.loc 1 2982 5 is_stmt 1 view .LVU2992
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9370              		.loc 1 2982 10 is_stmt 0 view .LVU2993
 9371 02be 91F8AD3F 		ldrb	r3, [r1, #4013]	@ zero_extendqisi2
2982:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9372              		.loc 1 2982 8 view .LVU2994
 9373 02c2 DA07     		lsls	r2, r3, #31
 9374 02c4 00F12281 		bmi	.L1197
 9375              	.L995:
2986:src/display.c **** 		    State2.hms = 0;
 9376              		.loc 1 2986 5 is_stmt 1 view .LVU2995
2986:src/display.c **** 		    State2.hms = 0;
 9377              		.loc 1 2986 9 is_stmt 0 view .LVU2996
 9378 02c8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2986:src/display.c **** 		    State2.hms = 0;
 9379              		.loc 1 2986 8 view .LVU2997
 9380 02ca 13F00101 		ands	r1, r3, #1
 9381 02ce 00F0A680 		beq	.L996
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9382              		.loc 1 2987 7 is_stmt 1 view .LVU2998
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9383              		.loc 1 2987 18 is_stmt 0 view .LVU2999
 9384 02d2 6FF30003 		bfc	r3, #0, #1
2988:src/display.c **** 		    State2.hms = 1;
 9385              		.loc 1 2988 7 view .LVU3000
 9386 02d6 0021     		movs	r1, #0
 9387 02d8 6E20     		movs	r0, #110
2987:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9388              		.loc 1 2987 18 view .LVU3001
 9389 02da E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/cc9o0abE.s 			page 281


2988:src/display.c **** 		    State2.hms = 1;
 9390              		.loc 1 2988 7 is_stmt 1 view .LVU3002
 9391 02dc FFF7FEFF 		bl	format_reg
 9392              	.LVL1055:
2989:src/display.c **** 		  }
 9393              		.loc 1 2989 7 view .LVU3003
2989:src/display.c **** 		  }
 9394              		.loc 1 2989 18 is_stmt 0 view .LVU3004
 9395 02e0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3011:src/display.c **** 	      goto finish;
 9396              		.loc 1 3011 9 view .LVU3005
 9397 02e2 D9F80020 		ldr	r2, [r9]
2989:src/display.c **** 		  }
 9398              		.loc 1 2989 18 view .LVU3006
 9399 02e6 43F00103 		orr	r3, r3, #1
 9400 02ea E375     		strb	r3, [r4, #23]
 9401              	.LVL1056:
3011:src/display.c **** 	      goto finish;
 9402              		.loc 1 3011 6 is_stmt 1 view .LVU3007
3011:src/display.c **** 	      goto finish;
 9403              		.loc 1 3011 9 is_stmt 0 view .LVU3008
 9404 02ec 002A     		cmp	r2, #0
 9405 02ee CFD0     		beq	.L997
 9406 02f0 54E7     		b	.L998
 9407              	.LVL1057:
 9408              	.L1039:
3061:src/display.c **** 	  annunciators();
 9409              		.loc 1 3061 52 discriminator 3 view .LVU3009
 9410 02f2 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9411 02f4 13F0C00F 		tst	r3, #192
 9412 02f8 3FF44CAF 		beq	.L1041
 9413 02fc 48E7     		b	.L1040
 9414              	.L1058:
 9415 02fe 0023     		movs	r3, #0
 9416 0300 39E7     		b	.L1038
 9417              	.L1231:
 9418 0302 00BF     		.align	2
 9419              	.L1230:
 9420 0304 00000000 		.word	StateWhileOn
 9421 0308 00000000 		.word	.LANCHOR15
 9422 030c 00000000 		.word	.LANCHOR18
 9423 0310 00000000 		.word	DispPlot
 9424 0314 00000000 		.word	ProgFree
 9425 0318 00000000 		.word	.LANCHOR16
 9426 031c 00000000 		.word	ShowRegister
 9427 0320 00000000 		.word	main_ram
 9428 0324 00000000 		.word	ShowRPN
 9429 0328 00000000 		.word	argcmds
 9430 032c 04000000 		.word	.LC23
 9431 0330 00000000 		.word	.LC22
 9432 0334 00000000 		.word	WasDataEntry
 9433 0338 00000000 		.word	DispMsg
 9434              	.LVL1058:
 9435              	.L1190:
 9436              	.LBB553:
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9437              		.loc 1 2733 4 is_stmt 1 view .LVU3010
ARM GAS  /tmp/cc9o0abE.s 			page 282


2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9438              		.loc 1 2733 9 is_stmt 0 view .LVU3011
 9439 033c B34B     		ldr	r3, .L1232
 9440 033e CDF85D60 		str	r6, [sp, #93]	@ unaligned
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9441              		.loc 1 2734 4 is_stmt 1 view .LVU3012
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9442              		.loc 1 2733 9 is_stmt 0 view .LVU3013
 9443 0342 93E80700 		ldm	r3, {r0, r1, r2}
 9444 0346 15AB     		add	r3, sp, #84
 9445 0348 03C3     		stmia	r3!, {r0, r1}
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9446              		.loc 1 2734 4 view .LVU3014
 9447 034a 3146     		mov	r1, r6
 9448 034c B048     		ldr	r0, .L1232+4
2733:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9449              		.loc 1 2733 9 view .LVU3015
 9450 034e 1A70     		strb	r2, [r3]
2734:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9451              		.loc 1 2734 4 view .LVU3016
 9452 0350 FFF7FEFF 		bl	set_digits_string
 9453              	.LVL1059:
2735:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 9454              		.loc 1 2735 4 is_stmt 1 view .LVU3017
 9455              	.LBB554:
 9456              	.LBI554:
 415:src/display.c ****   if (res) *res++ = ch;
 9457              		.loc 1 415 14 view .LVU3018
 9458              	.LBB555:
 416:src/display.c ****   else	set_dig(base, ch);
 9459              		.loc 1 416 3 view .LVU3019
 417:src/display.c ****   return res;
 9460              		.loc 1 417 8 view .LVU3020
 9461 0354 7221     		movs	r1, #114
 9462 0356 6C20     		movs	r0, #108
 9463 0358 FFF7FEFF 		bl	set_dig
 9464              	.LVL1060:
 418:src/display.c **** }
 9465              		.loc 1 418 3 view .LVU3021
 418:src/display.c **** }
 9466              		.loc 1 418 3 is_stmt 0 view .LVU3022
 9467              	.LBE555:
 9468              	.LBE554:
2740:src/display.c **** 	  set_status(vers);
 9469              		.loc 1 2740 4 is_stmt 1 view .LVU3023
 9470 035c AD49     		ldr	r1, .L1232+8
 9471 035e DFF8E882 		ldr	r8, .L1232+60
 9472 0362 AD4D     		ldr	r5, .L1232+12
 9473 0364 0422     		movs	r2, #4
 9474 0366 17A8     		add	r0, sp, #92
 9475 0368 FFF7FEFF 		bl	xcopy
 9476              	.LVL1061:
2741:src/display.c **** 	  skip = 1;
 9477              		.loc 1 2741 4 view .LVU3024
 9478 036c 15A8     		add	r0, sp, #84
 9479 036e FFF7FEFF 		bl	set_status
 9480              	.LVL1062:
ARM GAS  /tmp/cc9o0abE.s 			page 283


2742:src/display.c **** 	  goto nostk;
 9481              		.loc 1 2742 4 view .LVU3025
2743:src/display.c **** 	} else if (State2.confirm) {
 9482              		.loc 1 2743 4 view .LVU3026
2743:src/display.c **** 	} else if (State2.confirm) {
 9483              		.loc 1 2743 4 is_stmt 0 view .LVU3027
 9484              	.LBE553:
2973:src/display.c **** 	if (!skip) {
 9485              		.loc 1 2973 2 is_stmt 1 view .LVU3028
 9486 0372 AA4B     		ldr	r3, .L1232+16
 9487 0374 0093     		str	r3, [sp]
 9488 0376 FFF7FEFF 		bl	show_flags
 9489              	.LVL1063:
2974:src/display.c **** 	  if (State2.runmode) {
 9490              		.loc 1 2974 2 view .LVU3029
3051:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9491              		.loc 1 3051 2 view .LVU3030
 9492 037a FFF7FEFF 		bl	set_annunciators
 9493              	.LVL1064:
3052:src/display.c **** 	  ShowRPN = 0;
 9494              		.loc 1 3052 2 view .LVU3031
 9495 037e E0E6     		b	.L899
 9496              	.LVL1065:
 9497              	.L1060:
3052:src/display.c **** 	  ShowRPN = 0;
 9498              		.loc 1 3052 2 is_stmt 0 view .LVU3032
 9499 0380 0123     		movs	r3, #1
 9500 0382 F8E6     		b	.L1038
 9501              	.LVL1066:
 9502              	.L1194:
2754:src/display.c **** 	  if (! State2.dot)
 9503              		.loc 1 2754 4 is_stmt 1 view .LVU3033
2754:src/display.c **** 	  if (! State2.dot)
 9504              		.loc 1 2754 9 is_stmt 0 view .LVU3034
 9505 0384 A649     		ldr	r1, .L1232+20
 9506 0386 1EA8     		add	r0, sp, #120
 9507              	.LVL1067:
2754:src/display.c **** 	  if (! State2.dot)
 9508              		.loc 1 2754 9 view .LVU3035
 9509 0388 FFF7FEFF 		bl	scopy
 9510              	.LVL1068:
2755:src/display.c **** 	    *bp++ = '\235';
 9511              		.loc 1 2755 8 view .LVU3036
 9512 038c 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9513              	.LVL1069:
2755:src/display.c **** 	    *bp++ = '\235';
 9514              		.loc 1 2755 4 is_stmt 1 view .LVU3037
2755:src/display.c **** 	    *bp++ = '\235';
 9515              		.loc 1 2755 7 is_stmt 0 view .LVU3038
 9516 038e 5D06     		lsls	r5, r3, #25
 9517 0390 3FF550AF 		bmi	.L940
2756:src/display.c **** 	  if (yreg_enabled) {
 9518              		.loc 1 2756 6 is_stmt 1 view .LVU3039
 9519              	.LVL1070:
2756:src/display.c **** 	  if (yreg_enabled) {
 9520              		.loc 1 2756 12 is_stmt 0 view .LVU3040
 9521 0394 9D23     		movs	r3, #157
ARM GAS  /tmp/cc9o0abE.s 			page 284


 9522 0396 0370     		strb	r3, [r0]
 9523              	.LVL1071:
2756:src/display.c **** 	  if (yreg_enabled) {
 9524              		.loc 1 2756 12 view .LVU3041
 9525 0398 4CE7     		b	.L940
 9526              	.LVL1072:
 9527              	.L993:
3006:src/display.c **** 	    } else {
 9528              		.loc 1 3006 3 is_stmt 1 view .LVU3042
 9529 039a A248     		ldr	r0, .L1232+24
 9530 039c 2421     		movs	r1, #36
 9531 039e FFF7FEFF 		bl	set_digits_string
 9532              	.LVL1073:
3011:src/display.c **** 	      goto finish;
 9533              		.loc 1 3011 6 view .LVU3043
3011:src/display.c **** 	      goto finish;
 9534              		.loc 1 3011 9 is_stmt 0 view .LVU3044
 9535 03a2 D9F80030 		ldr	r3, [r9]
 9536 03a6 002B     		cmp	r3, #0
 9537 03a8 3FF4C9AE 		beq	.L1187
 9538 03ac F6E6     		b	.L998
 9539              	.LVL1074:
 9540              	.L901:
2751:src/display.c **** 	  }
 9541              		.loc 1 2751 6 is_stmt 1 view .LVU3045
 9542 03ae 9B4B     		ldr	r3, .L1232+16
 9543 03b0 9D48     		ldr	r0, .L1232+28
 9544 03b2 0093     		str	r3, [sp]
 9545 03b4 DFF89082 		ldr	r8, .L1232+60
 9546 03b8 FFF7FEFF 		bl	set_status
 9547              	.LVL1075:
2971:src/display.c ****       nostk:
 9548              		.loc 1 2971 2 view .LVU3046
 9549 03bc FFF7FEFF 		bl	show_stack
 9550              	.LVL1076:
2973:src/display.c **** 	if (!skip) {
 9551              		.loc 1 2973 2 view .LVU3047
 9552 03c0 FFF7FEFF 		bl	show_flags
 9553              	.LVL1077:
2974:src/display.c **** 	  if (State2.runmode) {
 9554              		.loc 1 2974 2 view .LVU3048
 9555 03c4 5EE6     		b	.L904
 9556              	.L912:
2818:src/display.c **** 	  *bp++ = 'x';
 9557              		.loc 1 2818 9 view .LVU3049
2818:src/display.c **** 	  *bp++ = 'x';
 9558              		.loc 1 2818 19 is_stmt 0 view .LVU3050
 9559 03c6 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
2818:src/display.c **** 	  *bp++ = 'x';
 9560              		.loc 1 2818 12 view .LVU3051
 9561 03c8 072A     		cmp	r2, #7
 9562 03ca 00F03F81 		beq	.L923
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9563              		.loc 1 2819 4 is_stmt 1 view .LVU3052
 9564              	.LVL1078:
2820:src/display.c **** 	  *bp++ = '_';
 9565              		.loc 1 2820 33 is_stmt 0 view .LVU3053
ARM GAS  /tmp/cc9o0abE.s 			page 285


 9566 03ce 974B     		ldr	r3, .L1232+32
2820:src/display.c **** 	  *bp++ = '_';
 9567              		.loc 1 2820 10 view .LVU3054
 9568 03d0 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9569 03d2 8DF87930 		strb	r3, [sp, #121]
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9570              		.loc 1 2819 10 view .LVU3055
 9571 03d6 7822     		movs	r2, #120
2821:src/display.c **** 	  *bp++ = '?';
 9572              		.loc 1 2821 10 view .LVU3056
 9573 03d8 43F65F73 		movw	r3, #16223
2819:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9574              		.loc 1 2819 10 view .LVU3057
 9575 03dc 8DF87820 		strb	r2, [sp, #120]
2820:src/display.c **** 	  *bp++ = '_';
 9576              		.loc 1 2820 4 is_stmt 1 view .LVU3058
 9577              	.LVL1079:
2821:src/display.c **** 	  *bp++ = '?';
 9578              		.loc 1 2821 4 view .LVU3059
2822:src/display.c **** 	  if (yreg_enabled) {
 9579              		.loc 1 2822 4 view .LVU3060
2821:src/display.c **** 	  *bp++ = '?';
 9580              		.loc 1 2821 10 is_stmt 0 view .LVU3061
 9581 03e0 ADF87A30 		strh	r3, [sp, #122]	@ movhi
2823:src/display.c **** 	    set_status_top(buf);
 9582              		.loc 1 2823 4 is_stmt 1 view .LVU3062
2823:src/display.c **** 	    set_status_top(buf);
 9583              		.loc 1 2823 7 is_stmt 0 view .LVU3063
 9584 03e4 BAF1000F 		cmp	r10, #0
 9585 03e8 7FF428AF 		bne	.L1177
 9586              	.LVL1080:
 9587              	.L907:
2763:src/display.c **** 	  }
 9588              		.loc 1 2763 6 is_stmt 1 view .LVU3064
 9589 03ec 1EA8     		add	r0, sp, #120
 9590 03ee FFF7FEFF 		bl	set_status
 9591              	.LVL1081:
2971:src/display.c ****       nostk:
 9592              		.loc 1 2971 2 view .LVU3065
 9593 03f2 8A4B     		ldr	r3, .L1232+16
 9594 03f4 0093     		str	r3, [sp]
 9595 03f6 DFF85082 		ldr	r8, .L1232+60
 9596 03fa FFF7FEFF 		bl	show_stack
 9597              	.LVL1082:
2973:src/display.c **** 	if (!skip) {
 9598              		.loc 1 2973 2 view .LVU3066
 9599 03fe FFF7FEFF 		bl	show_flags
 9600              	.LVL1083:
2974:src/display.c **** 	  if (State2.runmode) {
 9601              		.loc 1 2974 2 view .LVU3067
 9602 0402 3FE6     		b	.L904
 9603              	.LVL1084:
 9604              	.L1193:
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9605              		.loc 1 2997 44 is_stmt 0 discriminator 1 view .LVU3068
 9606 0404 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2997:src/display.c **** 		  format_reg(ShowRegister, CNULL);
ARM GAS  /tmp/cc9o0abE.s 			page 286


 9607              		.loc 1 2997 41 discriminator 1 view .LVU3069
 9608 0406 13F00101 		ands	r1, r3, #1
 9609 040a 7FF492AE 		bne	.L1000
 9610              	.LVL1085:
2998:src/display.c **** 		}
 9611              		.loc 1 2998 5 is_stmt 1 view .LVU3070
 9612 040e FFF7FEFF 		bl	format_reg
 9613              	.LVL1086:
3011:src/display.c **** 	      goto finish;
 9614              		.loc 1 3011 6 view .LVU3071
3011:src/display.c **** 	      goto finish;
 9615              		.loc 1 3011 9 is_stmt 0 view .LVU3072
 9616 0412 D9F80030 		ldr	r3, [r9]
 9617 0416 002B     		cmp	r3, #0
 9618 0418 3FF43AAF 		beq	.L997
 9619 041c BEE6     		b	.L998
 9620              	.LVL1087:
 9621              	.L996:
2992:src/display.c **** 		  }
 9622              		.loc 1 2992 7 is_stmt 1 view .LVU3073
 9623 041e 6E20     		movs	r0, #110
 9624 0420 FFF7FEFF 		bl	format_reg
 9625              	.LVL1088:
3011:src/display.c **** 	      goto finish;
 9626              		.loc 1 3011 6 view .LVU3074
3011:src/display.c **** 	      goto finish;
 9627              		.loc 1 3011 9 is_stmt 0 view .LVU3075
 9628 0424 D9F80030 		ldr	r3, [r9]
 9629 0428 002B     		cmp	r3, #0
 9630 042a 3FF431AF 		beq	.L997
 9631 042e B5E6     		b	.L998
 9632              	.LVL1089:
 9633              	.L1191:
 9634              	.LBB556:
3021:src/display.c **** 	      num_arg_0(scopy_spc(buf, S7_STEP), upc, 3);
 9635              		.loc 1 3021 21 discriminator 1 view .LVU3076
 9636 0430 B9F1000F 		cmp	r9, #0
 9637 0434 00F05681 		beq	.L1198
 9638              	.L1034:
3025:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
 9639              		.loc 1 3025 8 discriminator 1 view .LVU3077
 9640 0438 7D49     		ldr	r1, .L1232+36
 9641 043a 09EB8909 		add	r9, r9, r9, lsl #2
 9642              	.LVL1090:
3025:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
 9643              		.loc 1 3025 8 discriminator 1 view .LVU3078
 9644 043e 4944     		add	r1, r1, r9
 9645 0440 42E6     		b	.L1036
 9646              	.LVL1091:
 9647              	.L1023:
3025:src/display.c **** 		      upc, 4);  // 4 digits in ROM and Library
 9648              		.loc 1 3025 8 discriminator 1 view .LVU3079
 9649              	.LBE556:
 9650              	.LBB557:
 9651              	.LBB543:
1442:src/display.c **** 	    gotdot = i;
 9652              		.loc 1 1442 4 is_stmt 1 view .LVU3080
ARM GAS  /tmp/cc9o0abE.s 			page 287


1442:src/display.c **** 	    gotdot = i;
 9653              		.loc 1 1442 7 is_stmt 0 view .LVU3081
 9654 0442 BBF1FF3F 		cmp	fp, #-1
 9655 0446 08BF     		it	eq
 9656 0448 D346     		moveq	fp, r10
 9657              	.LVL1092:
1444:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9658              		.loc 1 1444 4 is_stmt 1 view .LVU3082
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9659              		.loc 1 1445 6 view .LVU3083
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9660              		.loc 1 1445 13 is_stmt 0 view .LVU3084
 9661 044a ABF11B0B 		sub	fp, fp, #27
 9662              	.LVL1093:
1446:src/display.c **** 	      break;
 9663              		.loc 1 1446 6 is_stmt 1 view .LVU3085
1446:src/display.c **** 	      break;
 9664              		.loc 1 1446 9 is_stmt 0 view .LVU3086
 9665 044e BBF1000F 		cmp	fp, #0
 9666 0452 13DD     		ble	.L1008
1446:src/display.c **** 	      break;
 9667              		.loc 1 1446 9 view .LVU3087
 9668 0454 0296     		str	r6, [sp, #8]
 9669 0456 5E46     		mov	r6, fp
 9670              	.LVL1094:
1446:src/display.c **** 	      break;
 9671              		.loc 1 1446 9 view .LVU3088
 9672 0458 C346     		mov	fp, r8
 9673              	.LVL1095:
1446:src/display.c **** 	      break;
 9674              		.loc 1 1446 9 view .LVU3089
 9675 045a A846     		mov	r8, r5
 9676 045c 019D     		ldr	r5, [sp, #4]
 9677              	.LVL1096:
 9678              	.L1027:
1449:src/display.c **** 	      break;
 9679              		.loc 1 1449 6 is_stmt 1 view .LVU3090
1452:src/display.c **** 	  }
 9680              		.loc 1 1452 6 view .LVU3091
 9681              	.LBB525:
 9682              	.LBB526:
 378:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9683              		.loc 1 378 3 view .LVU3092
 9684 045e 3046     		mov	r0, r6
 9685              	.LBE526:
 9686              	.LBE525:
1449:src/display.c **** 	      break;
 9687              		.loc 1 1449 9 is_stmt 0 view .LVU3093
 9688 0460 0DB1     		cbz	r5, .L1028
 9689              	.LVL1097:
1449:src/display.c **** 	      break;
 9690              		.loc 1 1449 27 view .LVU3094
 9691 0462 092E     		cmp	r6, #9
 9692 0464 07D0     		beq	.L1174
 9693              	.L1028:
1452:src/display.c **** 	  }
 9694              		.loc 1 1452 6 view .LVU3095
ARM GAS  /tmp/cc9o0abE.s 			page 288


 9695 0466 734B     		ldr	r3, .L1232+40
 9696 0468 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9697              	.LVL1098:
 9698              	.LBB528:
 9699              	.LBI525:
 375:src/display.c ****   if (sep == SEP_NONE)
 9700              		.loc 1 375 14 is_stmt 1 view .LVU3096
 9701              	.LBB527:
 376:src/display.c ****     return res;
 9702              		.loc 1 376 3 view .LVU3097
 376:src/display.c ****     return res;
 9703              		.loc 1 376 6 is_stmt 0 view .LVU3098
 9704 046a 09B1     		cbz	r1, .L1029
 9705 046c FFF7FEFF 		bl	set_separator.part.0
 9706              	.LVL1099:
 9707              	.L1029:
 376:src/display.c ****     return res;
 9708              		.loc 1 376 6 view .LVU3099
 9709              	.LBE527:
 9710              	.LBE528:
1444:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9711              		.loc 1 1444 4 is_stmt 1 view .LVU3100
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9712              		.loc 1 1445 6 view .LVU3101
1445:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9713              		.loc 1 1445 13 is_stmt 0 view .LVU3102
 9714 0470 1B3E     		subs	r6, r6, #27
 9715              	.LVL1100:
1446:src/display.c **** 	      break;
 9716              		.loc 1 1446 6 is_stmt 1 view .LVU3103
1446:src/display.c **** 	      break;
 9717              		.loc 1 1446 9 is_stmt 0 view .LVU3104
 9718 0472 002E     		cmp	r6, #0
 9719 0474 F3DC     		bgt	.L1027
 9720              	.L1174:
1446:src/display.c **** 	      break;
 9721              		.loc 1 1446 9 view .LVU3105
 9722 0476 029E     		ldr	r6, [sp, #8]
 9723              	.LVL1101:
1446:src/display.c **** 	      break;
 9724              		.loc 1 1446 9 view .LVU3106
 9725 0478 4546     		mov	r5, r8
 9726 047a D846     		mov	r8, fp
 9727              	.LVL1102:
 9728              	.L1008:
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9729              		.loc 1 1456 4 is_stmt 1 view .LVU3107
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9730              		.loc 1 1456 8 is_stmt 0 view .LVU3108
 9731 047c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9732              		.loc 1 1456 7 view .LVU3109
 9733 047e A3F14401 		sub	r1, r3, #68
 9734 0482 0129     		cmp	r1, #1
 9735 0484 40F20E81 		bls	.L1199
 9736              	.L1030:
 9737              	.LVL1103:
ARM GAS  /tmp/cc9o0abE.s 			page 289


1456:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 9738              		.loc 1 1456 7 view .LVU3110
 9739              	.LBE543:
 9740              	.LBE557:
3011:src/display.c **** 	      goto finish;
 9741              		.loc 1 3011 6 is_stmt 1 view .LVU3111
3011:src/display.c **** 	      goto finish;
 9742              		.loc 1 3011 9 is_stmt 0 view .LVU3112
 9743 0488 D9F80030 		ldr	r3, [r9]
 9744 048c 002B     		cmp	r3, #0
 9745 048e 3FF4FEAE 		beq	.L1185
 9746              	.L1100:
 9747 0492 614D     		ldr	r5, .L1232+12
 9748 0494 82E6     		b	.L998
 9749              	.LVL1104:
 9750              	.L1195:
2767:src/display.c **** 	  if (State2.numdigit > 0)
 9751              		.loc 1 2767 4 is_stmt 1 view .LVU3113
2767:src/display.c **** 	  if (State2.numdigit > 0)
 9752              		.loc 1 2767 9 is_stmt 0 view .LVU3114
 9753 0496 2E22     		movs	r2, #46
 9754 0498 6749     		ldr	r1, .L1232+44
 9755 049a 1EA8     		add	r0, sp, #120
 9756              	.LVL1105:
2767:src/display.c **** 	  if (State2.numdigit > 0)
 9757              		.loc 1 2767 9 view .LVU3115
 9758 049c FFF7FEFF 		bl	scopy_char
 9759              	.LVL1106:
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9760              		.loc 1 2768 14 view .LVU3116
 9761 04a0 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2767:src/display.c **** 	  if (State2.numdigit > 0)
 9762              		.loc 1 2767 9 view .LVU3117
 9763 04a2 0346     		mov	r3, r0
 9764              	.LVL1107:
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9765              		.loc 1 2768 4 is_stmt 1 view .LVU3118
2768:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9766              		.loc 1 2768 7 is_stmt 0 view .LVU3119
 9767 04a4 002A     		cmp	r2, #0
 9768 04a6 40F0F880 		bne	.L1200
 9769              	.L910:
2771:src/display.c **** 	  if (yreg_enabled) {
 9770              		.loc 1 2771 4 is_stmt 1 view .LVU3120
 9771              	.LVL1108:
2771:src/display.c **** 	  if (yreg_enabled) {
 9772              		.loc 1 2771 10 is_stmt 0 view .LVU3121
 9773 04aa 5F22     		movs	r2, #95
 9774 04ac 1A70     		strb	r2, [r3]
2772:src/display.c **** 	    set_status_top(buf);
 9775              		.loc 1 2772 4 is_stmt 1 view .LVU3122
2772:src/display.c **** 	    set_status_top(buf);
 9776              		.loc 1 2772 7 is_stmt 0 view .LVU3123
 9777 04ae BAF1000F 		cmp	r10, #0
 9778 04b2 7FF4C3AE 		bne	.L1177
2772:src/display.c **** 	    set_status_top(buf);
 9779              		.loc 1 2772 7 view .LVU3124
ARM GAS  /tmp/cc9o0abE.s 			page 290


 9780 04b6 99E7     		b	.L907
 9781              	.LVL1109:
 9782              	.L1004:
 9783              	.LBB558:
 9784              	.LBB544:
1351:src/display.c **** 
 9785              		.loc 1 1351 2 is_stmt 1 view .LVU3125
 9786 04b8 FFF7FEFF 		bl	set_separator_decimal_modes
 9787              	.LVL1110:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9788              		.loc 1 1353 2 view .LVU3126
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9789              		.loc 1 1355 2 view .LVU3127
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9790              		.loc 1 1355 5 is_stmt 0 view .LVU3128
 9791 04bc A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9792              	.LBB529:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9793              		.loc 1 1362 15 view .LVU3129
 9794 04be 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 9795              	.LBE529:
1355:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9796              		.loc 1 1355 5 view .LVU3130
 9797 04c0 012B     		cmp	r3, #1
 9798 04c2 40F20781 		bls	.L1007
 9799              	.LVL1111:
 9800              	.LBB530:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9801              		.loc 1 1362 14 is_stmt 1 view .LVU3131
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9802              		.loc 1 1362 4 is_stmt 0 view .LVU3132
 9803 04c6 0029     		cmp	r1, #0
 9804 04c8 00F09F81 		beq	.L1051
1359:src/display.c **** 	  int j;
 9805              		.loc 1 1359 10 view .LVU3133
 9806 04cc 5346     		mov	r3, r10
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9807              		.loc 1 1362 10 view .LVU3134
 9808 04ce 5246     		mov	r2, r10
 9809 04d0 AC46     		mov	ip, r5
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9810              		.loc 1 1362 4 view .LVU3135
 9811 04d2 0846     		mov	r0, r1
 9812              	.LBE530:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9813              		.loc 1 1330 11 view .LVU3136
 9814 04d4 4FF0FF3E 		mov	lr, #-1
 9815 04d8 04E0     		b	.L1010
 9816              	.LVL1112:
 9817              	.L1009:
 9818              	.LBB531:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9819              		.loc 1 1362 28 is_stmt 1 view .LVU3137
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9820              		.loc 1 1362 15 is_stmt 0 view .LVU3138
 9821 04da 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
ARM GAS  /tmp/cc9o0abE.s 			page 291


 9822              		.loc 1 1362 29 view .LVU3139
 9823 04de 0132     		adds	r2, r2, #1
 9824              	.LVL1113:
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9825              		.loc 1 1362 14 is_stmt 1 view .LVU3140
1362:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9826              		.loc 1 1362 4 is_stmt 0 view .LVU3141
 9827 04e0 0028     		cmp	r0, #0
 9828 04e2 44D0     		beq	.L1201
 9829              	.LVL1114:
 9830              	.L1010:
1363:src/display.c **** 	      gotdot = j;
 9831              		.loc 1 1363 6 is_stmt 1 view .LVU3142
1363:src/display.c **** 	      gotdot = j;
 9832              		.loc 1 1363 9 is_stmt 0 view .LVU3143
 9833 04e4 2E28     		cmp	r0, #46
 9834 04e6 F8D1     		bne	.L1009
1364:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9835              		.loc 1 1364 8 is_stmt 1 view .LVU3144
 9836              	.LVL1115:
1366:src/display.c **** #  endif
 9837              		.loc 1 1366 8 view .LVU3145
1363:src/display.c **** 	      gotdot = j;
 9838              		.loc 1 1363 22 is_stmt 0 view .LVU3146
 9839 04e8 BEF1FF3F 		cmp	lr, #-1
 9840 04ec F5D1     		bne	.L1009
1366:src/display.c **** #  endif
 9841              		.loc 1 1366 29 view .LVU3147
 9842 04ee 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 9843 04f2 A3F12E03 		sub	r3, #46
 9844 04f6 B3FA83F3 		clz	r3, r3
1366:src/display.c **** #  endif
 9845              		.loc 1 1366 19 view .LVU3148
 9846 04fa 9646     		mov	lr, r2
1366:src/display.c **** #  endif
 9847              		.loc 1 1366 29 view .LVU3149
 9848 04fc 5B09     		lsrs	r3, r3, #5
 9849              	.LVL1116:
1366:src/display.c **** #  endif
 9850              		.loc 1 1366 29 view .LVU3150
 9851 04fe ECE7     		b	.L1009
 9852              	.LVL1117:
 9853              	.L913:
1366:src/display.c **** #  endif
 9854              		.loc 1 1366 29 view .LVU3151
 9855              	.LBE531:
 9856              	.LBE544:
 9857              	.LBE558:
2784:src/display.c **** #endif
 9858              		.loc 1 2784 6 is_stmt 1 view .LVU3152
2784:src/display.c **** #endif
 9859              		.loc 1 2784 11 is_stmt 0 view .LVU3153
 9860 0500 4E49     		ldr	r1, .L1232+48
 9861 0502 1EA8     		add	r0, sp, #120
 9862              	.LVL1118:
2784:src/display.c **** #endif
 9863              		.loc 1 2784 11 view .LVU3154
ARM GAS  /tmp/cc9o0abE.s 			page 292


 9864 0504 FFF7FEFF 		bl	scopy
 9865              	.LVL1119:
2784:src/display.c **** #endif
 9866              		.loc 1 2784 11 view .LVU3155
 9867 0508 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 9868 050a 7AE6     		b	.L914
 9869              	.LVL1120:
 9870              	.L1197:
2983:src/display.c **** 		    SET_POLAR_READY;
 9871              		.loc 1 2983 7 is_stmt 1 view .LVU3156
 9872 050c 0020     		movs	r0, #0
 9873 050e FFF7FEFF 		bl	op_r2p
 9874              	.LVL1121:
2984:src/display.c **** 		  }
 9875              		.loc 1 2984 7 view .LVU3157
 9876 0512 4B4A     		ldr	r2, .L1232+52
 9877 0514 1368     		ldr	r3, [r2]
 9878 0516 93F8AD2F 		ldrb	r2, [r3, #4013]	@ zero_extendqisi2
 9879 051a 6FF30002 		bfc	r2, #0, #1
 9880 051e 83F8AD2F 		strb	r2, [r3, #4013]
 9881 0522 D1E6     		b	.L995
 9882              	.LVL1122:
 9883              	.L916:
2791:src/display.c **** 	    *bp++ = '\021';
 9884              		.loc 1 2791 11 view .LVU3158
2791:src/display.c **** 	    *bp++ = '\021';
 9885              		.loc 1 2791 14 is_stmt 0 view .LVU3159
 9886 0524 012D     		cmp	r5, #1
 9887 0526 00F0EF80 		beq	.L1202
2798:src/display.c **** 	      *bp++ = '.';
 9888              		.loc 1 2798 6 is_stmt 1 view .LVU3160
2798:src/display.c **** 	      *bp++ = '.';
 9889              		.loc 1 2798 10 is_stmt 0 view .LVU3161
 9890 052a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2798:src/display.c **** 	      *bp++ = '.';
 9891              		.loc 1 2798 9 view .LVU3162
 9892 052c DD07     		lsls	r5, r3, #31
2799:src/display.c **** 	    if (State2.numdigit > 0) {
 9893              		.loc 1 2799 8 is_stmt 1 view .LVU3163
 9894              	.LVL1123:
2799:src/display.c **** 	    if (State2.numdigit > 0) {
 9895              		.loc 1 2799 14 is_stmt 0 view .LVU3164
 9896 052e 44BF     		itt	mi
 9897 0530 2E23     		movmi	r3, #46
 9898 0532 00F8013B 		strbmi	r3, [r0], #1
 9899              	.LVL1124:
2800:src/display.c **** 	      if (State2.shuffle)
 9900              		.loc 1 2800 6 is_stmt 1 view .LVU3165
2800:src/display.c **** 	      if (State2.shuffle)
 9901              		.loc 1 2800 16 is_stmt 0 view .LVU3166
 9902 0536 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
2800:src/display.c **** 	      if (State2.shuffle)
 9903              		.loc 1 2800 9 view .LVU3167
 9904 0538 8AB1     		cbz	r2, .L920
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9905              		.loc 1 2801 8 is_stmt 1 view .LVU3168
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
ARM GAS  /tmp/cc9o0abE.s 			page 293


 9906              		.loc 1 2801 12 is_stmt 0 view .LVU3169
 9907 053a A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2801:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9908              		.loc 1 2801 11 view .LVU3170
 9909 053c 9907     		lsls	r1, r3, #30
 9910 053e 40F16681 		bpl	.L921
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9911              		.loc 1 2802 3 is_stmt 1 view .LVU3171
 9912              	.LVL1125:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9913              		.loc 1 2802 17 is_stmt 0 view .LVU3172
 9914 0542 2289     		ldrh	r2, [r4, #8]
 9915              	.LVL1126:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9916              		.loc 1 2802 34 is_stmt 1 view .LVU3173
 9917 0544 3F49     		ldr	r1, .L1232+56
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9918              		.loc 1 2802 10 is_stmt 0 view .LVU3174
 9919 0546 0023     		movs	r3, #0
 9920              	.LVL1127:
 9921              	.L922:
2803:src/display.c **** 	      else
 9922              		.loc 1 2803 5 is_stmt 1 discriminator 3 view .LVU3175
2803:src/display.c **** 	      else
 9923              		.loc 1 2803 24 is_stmt 0 discriminator 3 view .LVU3176
 9924 0548 02F00305 		and	r5, r2, #3
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9925              		.loc 1 2802 54 discriminator 3 view .LVU3177
 9926 054c 0133     		adds	r3, r3, #1
 9927              	.LVL1128:
2803:src/display.c **** 	      else
 9928              		.loc 1 2803 11 discriminator 3 view .LVU3178
 9929 054e 4D5D     		ldrb	r5, [r1, r5]	@ zero_extendqisi2
 9930 0550 00F8015B 		strb	r5, [r0], #1
 9931              	.LVL1129:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9932              		.loc 1 2802 53 is_stmt 1 discriminator 3 view .LVU3179
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9933              		.loc 1 2802 42 is_stmt 0 discriminator 3 view .LVU3180
 9934 0554 E57A     		ldrb	r5, [r4, #11]	@ zero_extendqisi2
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9935              		.loc 1 2802 3 discriminator 3 view .LVU3181
 9936 0556 9D42     		cmp	r5, r3
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9937              		.loc 1 2802 60 discriminator 3 view .LVU3182
 9938 0558 4FEAA202 		asr	r2, r2, #2
 9939              	.LVL1130:
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9940              		.loc 1 2802 34 is_stmt 1 discriminator 3 view .LVU3183
2802:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9941              		.loc 1 2802 3 is_stmt 0 discriminator 3 view .LVU3184
 9942 055c F4DC     		bgt	.L922
 9943              	.LVL1131:
 9944              	.L920:
2808:src/display.c **** 	  }
 9945              		.loc 1 2808 6 is_stmt 1 view .LVU3185
2808:src/display.c **** 	  }
ARM GAS  /tmp/cc9o0abE.s 			page 294


 9946              		.loc 1 2808 12 is_stmt 0 view .LVU3186
 9947 055e 5F23     		movs	r3, #95
 9948 0560 0370     		strb	r3, [r0]
 9949              	.LVL1132:
2808:src/display.c **** 	  }
 9950              		.loc 1 2808 12 view .LVU3187
 9951 0562 67E6     		b	.L940
 9952              	.LVL1133:
 9953              	.L1196:
 9954              	.LBB559:
 9955              	.LBB545:
1340:src/display.c **** 	p++;
 9956              		.loc 1 1340 2 is_stmt 1 view .LVU3188
 9957 0564 8120     		movs	r0, #129
 9958              	.LVL1134:
1340:src/display.c **** 	p++;
 9959              		.loc 1 1340 2 is_stmt 0 view .LVU3189
 9960 0566 FFF7FEFF 		bl	set_dot
 9961              	.LVL1135:
1341:src/display.c ****       }
 9962              		.loc 1 1341 2 is_stmt 1 view .LVU3190
1341:src/display.c ****       }
 9963              		.loc 1 1341 3 is_stmt 0 view .LVU3191
 9964 056a 0135     		adds	r5, r5, #1
 9965              	.LVL1136:
1341:src/display.c ****       }
 9966              		.loc 1 1341 3 view .LVU3192
 9967 056c 73E6     		b	.L1003
 9968              	.LVL1137:
 9969              	.L1201:
 9970              	.LBB532:
1370:src/display.c **** 	  if (j > 0) {
 9971              		.loc 1 1370 4 is_stmt 1 view .LVU3193
1370:src/display.c **** 	  if (j > 0) {
 9972              		.loc 1 1370 24 is_stmt 0 view .LVU3194
 9973 056e 03F10C0C 		add	ip, r3, #12
1370:src/display.c **** 	  if (j > 0) {
 9974              		.loc 1 1370 6 view .LVU3195
 9975 0572 A2EB0C02 		sub	r2, r2, ip
 9976              	.LVL1138:
1371:src/display.c **** 	    p += j + 1;
 9977              		.loc 1 1371 4 is_stmt 1 view .LVU3196
1371:src/display.c **** 	    p += j + 1;
 9978              		.loc 1 1371 7 is_stmt 0 view .LVU3197
 9979 0576 002A     		cmp	r2, #0
 9980 0578 40F3DC80 		ble	.L1052
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9981              		.loc 1 1372 6 is_stmt 1 view .LVU3198
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9982              		.loc 1 1372 8 is_stmt 0 view .LVU3199
 9983 057c 511C     		adds	r1, r2, #1
1374:src/display.c **** 	      gotdot = 0;
 9984              		.loc 1 1374 9 view .LVU3200
 9985 057e 7245     		cmp	r2, lr
1372:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9986              		.loc 1 1372 8 view .LVU3201
 9987 0580 0D44     		add	r5, r5, r1
ARM GAS  /tmp/cc9o0abE.s 			page 295


 9988              	.LVL1139:
1373:src/display.c **** 	    if (gotdot <= j) {
 9989              		.loc 1 1373 6 is_stmt 1 view .LVU3202
1374:src/display.c **** 	      gotdot = 0;
 9990              		.loc 1 1374 6 view .LVU3203
1374:src/display.c **** 	      gotdot = 0;
 9991              		.loc 1 1374 9 is_stmt 0 view .LVU3204
 9992 0582 C0F2C680 		blt	.L1012
1375:src/display.c **** 	      if (double_dot)
 9993              		.loc 1 1375 8 is_stmt 1 view .LVU3205
 9994              	.LVL1140:
1376:src/display.c **** 		p++;
 9995              		.loc 1 1376 8 view .LVU3206
1376:src/display.c **** 		p++;
 9996              		.loc 1 1376 11 is_stmt 0 view .LVU3207
 9997 0586 002B     		cmp	r3, #0
 9998 0588 00F0E681 		beq	.L1053
1377:src/display.c **** 	    }
 9999              		.loc 1 1377 3 is_stmt 1 view .LVU3208
1377:src/display.c **** 	    }
 10000              		.loc 1 1377 4 is_stmt 0 view .LVU3209
 10001 058c 0135     		adds	r5, r5, #1
 10002              	.LVL1141:
1373:src/display.c **** 	    if (gotdot <= j) {
 10003              		.loc 1 1373 8 view .LVU3210
 10004 058e 4FF0090A 		mov	r10, #9
 10005              	.LVL1142:
 10006              	.L1013:
1386:src/display.c **** 	    overflow_to_left = 1;
 10007              		.loc 1 1386 6 is_stmt 1 view .LVU3211
 10008 0592 3C21     		movs	r1, #60
 10009              	.LVL1143:
1386:src/display.c **** 	    overflow_to_left = 1;
 10010              		.loc 1 1386 6 is_stmt 0 view .LVU3212
 10011 0594 0020     		movs	r0, #0
 10012 0596 FFF7FEFF 		bl	set_dig
 10013              	.LVL1144:
1387:src/display.c **** 	  }
 10014              		.loc 1 1387 6 is_stmt 1 view .LVU3213
1387:src/display.c **** 	  }
 10015              		.loc 1 1387 6 is_stmt 0 view .LVU3214
 10016 059a 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1387:src/display.c **** 	  }
 10017              		.loc 1 1387 6 view .LVU3215
 10018              	.LBE532:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10019              		.loc 1 1393 9 is_stmt 1 view .LVU3216
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10020              		.loc 1 1393 2 is_stmt 0 view .LVU3217
 10021 059c 4FF0000B 		mov	fp, #0
 10022 05a0 0029     		cmp	r1, #0
 10023 05a2 3FF471AF 		beq	.L1030
 10024              	.LVL1145:
 10025              	.L1043:
 10026              	.LBB533:
1387:src/display.c **** 	  }
 10027              		.loc 1 1387 23 view .LVU3218
ARM GAS  /tmp/cc9o0abE.s 			page 296


 10028 05a6 0123     		movs	r3, #1
 10029 05a8 0193     		str	r3, [sp, #4]
 10030 05aa 13E0     		b	.L1022
 10031              	.LVL1146:
 10032              	.L1203:
1387:src/display.c **** 	  }
 10033              		.loc 1 1387 23 view .LVU3219
 10034              	.LBE533:
1399:src/display.c **** 	      gotdot = i;
 10035              		.loc 1 1399 6 is_stmt 1 view .LVU3220
1399:src/display.c **** 	      gotdot = i;
 10036              		.loc 1 1399 9 is_stmt 0 view .LVU3221
 10037 05ac BBF1FF3F 		cmp	fp, #-1
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10038              		.loc 1 1403 9 view .LVU3222
 10039 05b0 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
1399:src/display.c **** 	      gotdot = i;
 10040              		.loc 1 1399 9 view .LVU3223
 10041 05b2 1DD0     		beq	.L1016
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10042              		.loc 1 1403 6 is_stmt 1 view .LVU3224
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10043              		.loc 1 1403 9 is_stmt 0 view .LVU3225
 10044 05b4 2E2B     		cmp	r3, #46
 10045 05b6 26D0     		beq	.L1042
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10046              		.loc 1 1403 25 view .LVU3226
 10047 05b8 DA45     		cmp	r10, fp
 10048 05ba 1BD0     		beq	.L1019
 10049              	.L1018:
1410:src/display.c **** 		i += segs_per_digit;
 10050              		.loc 1 1410 3 is_stmt 1 view .LVU3227
 10051 05bc 5046     		mov	r0, r10
 10052 05be 2F21     		movs	r1, #47
 10053 05c0 FFF7FEFF 		bl	set_dig
 10054              	.LVL1147:
1411:src/display.c **** 	      }
 10055              		.loc 1 1411 3 view .LVU3228
1411:src/display.c **** 	      }
 10056              		.loc 1 1411 5 is_stmt 0 view .LVU3229
 10057 05c4 0AF1090A 		add	r10, r10, #9
 10058              	.LVL1148:
1411:src/display.c **** 	      }
 10059              		.loc 1 1411 5 view .LVU3230
 10060 05c8 2B46     		mov	r3, r5
 10061              	.LVL1149:
 10062              	.L1020:
1397:src/display.c **** 	  if (*p == '.') {
 10063              		.loc 1 1397 11 is_stmt 1 view .LVU3231
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10064              		.loc 1 1393 9 is_stmt 0 view .LVU3232
 10065 05ca 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1397:src/display.c **** 	  if (*p == '.') {
 10066              		.loc 1 1397 12 view .LVU3233
 10067 05cc 0135     		adds	r5, r5, #1
 10068              	.LVL1150:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
ARM GAS  /tmp/cc9o0abE.s 			page 297


 10069              		.loc 1 1393 9 is_stmt 1 view .LVU3234
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10070              		.loc 1 1393 2 is_stmt 0 view .LVU3235
 10071 05ce 0029     		cmp	r1, #0
 10072 05d0 3FF437AF 		beq	.L1023
 10073              	.LVL1151:
 10074              	.L1022:
1395:src/display.c **** #endif
 10075              		.loc 1 1395 9 view .LVU3236
 10076 05d4 A1F14403 		sub	r3, r1, #68
 10077 05d8 012B     		cmp	r3, #1
 10078 05da 7FF632AF 		bls	.L1023
1398:src/display.c **** 	    if (gotdot < 0)
 10079              		.loc 1 1398 4 is_stmt 1 view .LVU3237
1398:src/display.c **** 	    if (gotdot < 0)
 10080              		.loc 1 1398 7 is_stmt 0 view .LVU3238
 10081 05de 2E29     		cmp	r1, #46
 10082 05e0 E4D0     		beq	.L1203
1432:src/display.c **** 	      i += segs_per_digit;
 10083              		.loc 1 1432 8 is_stmt 1 view .LVU3239
 10084 05e2 5046     		mov	r0, r10
 10085 05e4 FFF7FEFF 		bl	set_dig
 10086              	.LVL1152:
1433:src/display.c **** 	    }
 10087              		.loc 1 1433 8 view .LVU3240
1433:src/display.c **** 	    }
 10088              		.loc 1 1433 10 is_stmt 0 view .LVU3241
 10089 05e8 0AF1090A 		add	r10, r10, #9
 10090              	.LVL1153:
1433:src/display.c **** 	    }
 10091              		.loc 1 1433 10 view .LVU3242
 10092 05ec 2B46     		mov	r3, r5
 10093 05ee ECE7     		b	.L1020
 10094              	.L1016:
1400:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 10095              		.loc 1 1400 8 is_stmt 1 view .LVU3243
 10096              	.LVL1154:
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10097              		.loc 1 1403 6 view .LVU3244
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10098              		.loc 1 1403 9 is_stmt 0 view .LVU3245
 10099 05f0 2E2B     		cmp	r3, #46
 10100 05f2 07D0     		beq	.L1204
 10101              	.LVL1155:
 10102              	.L1019:
1414:src/display.c **** 		  i += segs_per_digit;
 10103              		.loc 1 1414 3 is_stmt 1 view .LVU3246
1414:src/display.c **** 		  i += segs_per_digit;
 10104              		.loc 1 1414 6 is_stmt 0 view .LVU3247
 10105 05f4 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 10106 05f6 012B     		cmp	r3, #1
 10107 05f8 7DD9     		bls	.L1021
1415:src/display.c **** 		}
 10108              		.loc 1 1415 5 is_stmt 1 view .LVU3248
 10109              	.LVL1156:
1415:src/display.c **** 		}
 10110              		.loc 1 1415 5 is_stmt 0 view .LVU3249
ARM GAS  /tmp/cc9o0abE.s 			page 298


 10111 05fa D346     		mov	fp, r10
 10112 05fc 2B46     		mov	r3, r5
1415:src/display.c **** 		}
 10113              		.loc 1 1415 7 view .LVU3250
 10114 05fe 0AF1090A 		add	r10, r10, #9
 10115              	.LVL1157:
1415:src/display.c **** 		}
 10116              		.loc 1 1415 7 view .LVU3251
 10117 0602 E2E7     		b	.L1020
 10118              	.LVL1158:
 10119              	.L1204:
1403:src/display.c **** 	      if ( *(p+1) == '.' ) {
 10120              		.loc 1 1403 9 view .LVU3252
 10121 0604 D346     		mov	fp, r10
 10122              	.LVL1159:
 10123              	.L1042:
1404:src/display.c **** 		p++;
 10124              		.loc 1 1404 8 is_stmt 1 view .LVU3253
1405:src/display.c **** 	      }
 10125              		.loc 1 1405 3 view .LVU3254
1405:src/display.c **** 	      }
 10126              		.loc 1 1405 4 is_stmt 0 view .LVU3255
 10127 0606 0135     		adds	r5, r5, #1
 10128              	.LVL1160:
1405:src/display.c **** 	      }
 10129              		.loc 1 1405 4 view .LVU3256
 10130 0608 D8E7     		b	.L1018
 10131              	.L1233:
 10132 060a 00BF     		.align	2
 10133              	.L1232:
 10134 060c 0C000000 		.word	.LANCHOR14+12
 10135 0610 08000000 		.word	.LC25
 10136 0614 00000000 		.word	.LANCHOR17
 10137 0618 00000000 		.word	ShowRegister
 10138 061c 00000000 		.word	DispPlot
 10139 0620 18000000 		.word	.LC26
 10140 0624 8C000000 		.word	.LC42
 10141 0628 00000000 		.word	.LANCHOR18
 10142 062c 94000000 		.word	.LC29
 10143 0630 00000000 		.word	.LANCHOR19
 10144 0634 00000000 		.word	.LANCHOR0
 10145 0638 56040000 		.word	argcmds+1110
 10146 063c 1C000000 		.word	.LC27
 10147 0640 00000000 		.word	main_ram
 10148 0644 9C000000 		.word	.LC28
 10149 0648 00000000 		.word	DispMsg
 10150              	.LVL1161:
 10151              	.L923:
1405:src/display.c **** 	      }
 10152              		.loc 1 1405 4 view .LVU3257
 10153              	.LBE545:
 10154              	.LBE559:
2831:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10155              		.loc 1 2831 9 is_stmt 1 view .LVU3258
2831:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 10156              		.loc 1 2831 12 is_stmt 0 view .LVU3259
 10157 064c 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/cc9o0abE.s 			page 299


 10158 064e 002A     		cmp	r2, #0
 10159 0650 75D1     		bne	.L1205
2886:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10160              		.loc 1 2886 9 is_stmt 1 view .LVU3260
2886:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 10161              		.loc 1 2886 12 is_stmt 0 view .LVU3261
 10162 0652 1B07     		lsls	r3, r3, #28
 10163 0654 00F1E880 		bmi	.L1206
2901:src/display.c **** 	  show_status();
 10164              		.loc 1 2901 9 is_stmt 1 view .LVU3262
2901:src/display.c **** 	  show_status();
 10165              		.loc 1 2901 19 is_stmt 0 view .LVU3263
 10166 0658 94F80C80 		ldrb	r8, [r4, #12]	@ zero_extendqisi2
2901:src/display.c **** 	  show_status();
 10167              		.loc 1 2901 12 view .LVU3264
 10168 065c B8F1000F 		cmp	r8, #0
 10169 0660 40F01681 		bne	.L1207
2904:src/display.c **** 	  show_label();
 10170              		.loc 1 2904 9 is_stmt 1 view .LVU3265
2904:src/display.c **** 	  show_label();
 10171              		.loc 1 2904 13 is_stmt 0 view .LVU3266
 10172 0664 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
2904:src/display.c **** 	  show_label();
 10173              		.loc 1 2904 12 view .LVU3267
 10174 0666 5A07     		lsls	r2, r3, #29
 10175 0668 00F1F480 		bmi	.L1208
2907:src/display.c **** 	  show_registers();
 10176              		.loc 1 2907 9 is_stmt 1 view .LVU3268
2907:src/display.c **** 	  show_registers();
 10177              		.loc 1 2907 12 is_stmt 0 view .LVU3269
 10178 066c 1B07     		lsls	r3, r3, #28
 10179 066e 00F1E682 		bmi	.L1209
2917:src/display.c **** 	  if (DispMsg) { 
 10180              		.loc 1 2917 9 is_stmt 1 view .LVU3270
2917:src/display.c **** 	  if (DispMsg) { 
 10181              		.loc 1 2917 12 is_stmt 0 view .LVU3271
 10182 0672 4B06     		lsls	r3, r1, #25
 10183 0674 40F1C982 		bpl	.L974
2918:src/display.c **** 	    set_status(DispMsg);
 10184              		.loc 1 2918 4 is_stmt 1 view .LVU3272
2918:src/display.c **** 	    set_status(DispMsg);
 10185              		.loc 1 2918 8 is_stmt 0 view .LVU3273
 10186 0678 DFF83883 		ldr	r8, .L1234+32
 10187 067c D8F80020 		ldr	r2, [r8]
2918:src/display.c **** 	    set_status(DispMsg);
 10188              		.loc 1 2918 7 view .LVU3274
 10189 0680 002A     		cmp	r2, #0
 10190 0682 00F06C81 		beq	.L975
2919:src/display.c **** 	  } else if (DispPlot) {
 10191              		.loc 1 2919 6 is_stmt 1 view .LVU3275
 10192 0686 1046     		mov	r0, r2
 10193 0688 FFF7FEFF 		bl	set_status
 10194              	.LVL1162:
2971:src/display.c ****       nostk:
 10195              		.loc 1 2971 2 view .LVU3276
 10196 068c C14B     		ldr	r3, .L1234
 10197 068e 0093     		str	r3, [sp]
ARM GAS  /tmp/cc9o0abE.s 			page 300


 10198 0690 FFF7FEFF 		bl	show_stack
 10199              	.LVL1163:
2973:src/display.c **** 	if (!skip) {
 10200              		.loc 1 2973 2 view .LVU3277
 10201 0694 FFF7FEFF 		bl	show_flags
 10202              	.LVL1164:
2974:src/display.c **** 	  if (State2.runmode) {
 10203              		.loc 1 2974 2 view .LVU3278
 10204 0698 F4E4     		b	.L904
 10205              	.LVL1165:
 10206              	.L1200:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10207              		.loc 1 2769 6 view .LVU3279
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10208              		.loc 1 2769 11 is_stmt 0 view .LVU3280
 10209 069a 2189     		ldrh	r1, [r4, #8]
 10210 069c FFF7FEFF 		bl	num_arg_0
 10211              	.LVL1166:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10212              		.loc 1 2769 11 view .LVU3281
 10213 06a0 0346     		mov	r3, r0
 10214              	.LVL1167:
2769:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 10215              		.loc 1 2769 11 view .LVU3282
 10216 06a2 02E7     		b	.L910
 10217              	.LVL1168:
 10218              	.L1199:
 10219              	.LBB560:
 10220              	.LBB546:
 10221              	.LBB534:
1460:src/display.c **** #  endif
 10222              		.loc 1 1460 6 is_stmt 1 view .LVU3283
1463:src/display.c **** 	      flags |= 2;
 10223              		.loc 1 1463 6 view .LVU3284
1464:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10224              		.loc 1 1464 14 is_stmt 0 view .LVU3285
 10225 06a4 442B     		cmp	r3, #68
 10226 06a6 14BF     		ite	ne
 10227 06a8 4FF00C0B 		movne	fp, #12
 10228 06ac 4FF00E0B 		moveq	fp, #14
 10229              	.LVL1169:
1465:src/display.c **** 	      flags |= 16;
 10230              		.loc 1 1465 6 is_stmt 1 view .LVU3286
1465:src/display.c **** 	      flags |= 16;
 10231              		.loc 1 1465 9 is_stmt 0 view .LVU3287
 10232 06b0 BAF15A0F 		cmp	r10, #90
1466:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10233              		.loc 1 1466 8 is_stmt 1 view .LVU3288
1466:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10234              		.loc 1 1466 14 is_stmt 0 view .LVU3289
 10235 06b4 C8BF     		it	gt
 10236 06b6 4BF0100B 		orrgt	fp, fp, #16
 10237              	.LVL1170:
1467:src/display.c **** 	  }
 10238              		.loc 1 1467 6 is_stmt 1 view .LVU3290
 10239 06ba 681C     		adds	r0, r5, #1
 10240 06bc FFF7FEFF 		bl	s_to_i
ARM GAS  /tmp/cc9o0abE.s 			page 301


 10241              	.LVL1171:
 10242 06c0 5946     		mov	r1, fp
 10243 06c2 0022     		movs	r2, #0
 10244 06c4 FFF7FEFF 		bl	set_exp
 10245              	.LVL1172:
1467:src/display.c **** 	  }
 10246              		.loc 1 1467 6 is_stmt 0 view .LVU3291
 10247              	.LBE534:
 10248              	.LBE546:
 10249              	.LBE560:
3011:src/display.c **** 	      goto finish;
 10250              		.loc 1 3011 6 is_stmt 1 view .LVU3292
3011:src/display.c **** 	      goto finish;
 10251              		.loc 1 3011 9 is_stmt 0 view .LVU3293
 10252 06c8 D9F80030 		ldr	r3, [r9]
 10253 06cc 002B     		cmp	r3, #0
 10254 06ce 3FF4DEAD 		beq	.L1185
 10255 06d2 DEE6     		b	.L1100
 10256              	.LVL1173:
 10257              	.L1007:
 10258              	.LBB561:
 10259              	.LBB547:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10260              		.loc 1 1393 9 is_stmt 1 view .LVU3294
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10261              		.loc 1 1393 2 is_stmt 0 view .LVU3295
 10262 06d4 0029     		cmp	r1, #0
 10263 06d6 00F09880 		beq	.L1051
1336:src/display.c **** #endif
 10264              		.loc 1 1336 11 view .LVU3296
 10265 06da CDF804A0 		str	r10, [sp, #4]
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10266              		.loc 1 1330 11 view .LVU3297
 10267 06de 4FF0FF3B 		mov	fp, #-1
 10268              	.LVL1174:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10269              		.loc 1 1330 11 view .LVU3298
 10270 06e2 77E7     		b	.L1022
 10271              	.LVL1175:
 10272              	.L1198:
1330:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10273              		.loc 1 1330 11 view .LVU3299
 10274              	.LBE547:
 10275              	.LBE561:
 10276              	.LBB562:
3022:src/display.c **** 	    }
 10277              		.loc 1 3022 8 is_stmt 1 view .LVU3300
 10278 06e4 AC49     		ldr	r1, .L1234+4
 10279 06e6 1EA8     		add	r0, sp, #120
 10280 06e8 FFF7FEFF 		bl	scopy_spc
 10281              	.LVL1176:
 10282 06ec 5146     		mov	r1, r10
 10283 06ee 0322     		movs	r2, #3
 10284 06f0 FFF7FEFF 		bl	num_arg_0
 10285              	.LVL1177:
 10286 06f4 EFE4     		b	.L1035
 10287              	.LVL1178:
ARM GAS  /tmp/cc9o0abE.s 			page 302


 10288              	.L1021:
3022:src/display.c **** 	    }
 10289              		.loc 1 3022 8 is_stmt 0 view .LVU3301
 10290              	.LBE562:
 10291              	.LBB563:
 10292              	.LBB548:
1418:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10293              		.loc 1 1418 5 is_stmt 1 view .LVU3302
 10294              	.LBB535:
 10295              	.LBI535:
 357:src/display.c ****   if (res) {
 10296              		.loc 1 357 14 view .LVU3303
 10297              	.LBB536:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10298              		.loc 1 358 3 view .LVU3304
 10299 06f6 A94B     		ldr	r3, .L1234+8
 10300 06f8 AAF10900 		sub	r0, r10, #9
 10301              	.LVL1179:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10302              		.loc 1 358 3 is_stmt 0 view .LVU3305
 10303 06fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10304 06fe FFF7FEFF 		bl	set_decimal.part.0
 10305              	.LVL1180:
 368:src/display.c **** }
 10306              		.loc 1 368 3 is_stmt 1 view .LVU3306
 368:src/display.c **** }
 10307              		.loc 1 368 10 is_stmt 0 view .LVU3307
 10308 0702 D346     		mov	fp, r10
 10309 0704 2B46     		mov	r3, r5
 10310 0706 60E7     		b	.L1020
 10311              	.LVL1181:
 10312              	.L1202:
 368:src/display.c **** }
 10313              		.loc 1 368 10 view .LVU3308
 10314              	.LBE536:
 10315              	.LBE535:
 10316              	.LBE548:
 10317              	.LBE563:
2792:src/display.c **** 	    *bp++ = '_';
 10318              		.loc 1 2792 6 is_stmt 1 view .LVU3309
2792:src/display.c **** 	    *bp++ = '_';
 10319              		.loc 1 2792 12 is_stmt 0 view .LVU3310
 10320 0708 1122     		movs	r2, #17
2793:src/display.c **** 	  } else {
 10321              		.loc 1 2793 12 view .LVU3311
 10322 070a 5F23     		movs	r3, #95
2792:src/display.c **** 	    *bp++ = '_';
 10323              		.loc 1 2792 12 view .LVU3312
 10324 070c 0270     		strb	r2, [r0]
2793:src/display.c **** 	  } else {
 10325              		.loc 1 2793 6 is_stmt 1 view .LVU3313
 10326              	.LVL1182:
2793:src/display.c **** 	  } else {
 10327              		.loc 1 2793 12 is_stmt 0 view .LVU3314
 10328 070e 4370     		strb	r3, [r0, #1]
 10329              	.LVL1183:
2793:src/display.c **** 	  } else {
ARM GAS  /tmp/cc9o0abE.s 			page 303


 10330              		.loc 1 2793 12 view .LVU3315
 10331 0710 90E5     		b	.L940
 10332              	.LVL1184:
 10333              	.L1012:
 10334              	.LBB564:
 10335              	.LBB549:
 10336              	.LBB537:
1379:src/display.c **** 	      gotdot = 0;
 10337              		.loc 1 1379 11 is_stmt 1 view .LVU3316
1379:src/display.c **** 	      gotdot = 0;
 10338              		.loc 1 1379 14 is_stmt 0 view .LVU3317
 10339 0712 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 10340              	.LVL1185:
1379:src/display.c **** 	      gotdot = 0;
 10341              		.loc 1 1379 14 view .LVU3318
 10342 0714 2E2A     		cmp	r2, #46
 10343 0716 7ED0     		beq	.L1210
 10344              	.LVL1186:
1386:src/display.c **** 	    overflow_to_left = 1;
 10345              		.loc 1 1386 6 is_stmt 1 view .LVU3319
 10346 0718 3C21     		movs	r1, #60
 10347              	.LVL1187:
1386:src/display.c **** 	    overflow_to_left = 1;
 10348              		.loc 1 1386 6 is_stmt 0 view .LVU3320
 10349 071a FFF7FEFF 		bl	set_dig
 10350              	.LVL1188:
1387:src/display.c **** 	  }
 10351              		.loc 1 1387 6 is_stmt 1 view .LVU3321
1387:src/display.c **** 	  }
 10352              		.loc 1 1387 6 is_stmt 0 view .LVU3322
 10353 071e 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
1387:src/display.c **** 	  }
 10354              		.loc 1 1387 6 view .LVU3323
 10355              	.LBE537:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10356              		.loc 1 1393 9 is_stmt 1 view .LVU3324
 10357              	.LBB538:
1373:src/display.c **** 	    if (gotdot <= j) {
 10358              		.loc 1 1373 8 is_stmt 0 view .LVU3325
 10359 0720 4FF0090A 		mov	r10, #9
 10360              	.LBE538:
1393:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10361              		.loc 1 1393 2 view .LVU3326
 10362 0724 0029     		cmp	r1, #0
 10363 0726 3FF4A9AE 		beq	.L1008
 10364              	.LBB539:
1385:src/display.c **** 	    set_dig(0, '<');
 10365              		.loc 1 1385 18 view .LVU3327
 10366 072a 4FF0FF3B 		mov	fp, #-1
1373:src/display.c **** 	    if (gotdot <= j) {
 10367              		.loc 1 1373 8 view .LVU3328
 10368 072e 4FF0090A 		mov	r10, #9
 10369 0732 38E7     		b	.L1043
 10370              	.LVL1189:
 10371              	.L1052:
1373:src/display.c **** 	    if (gotdot <= j) {
 10372              		.loc 1 1373 8 view .LVU3329
ARM GAS  /tmp/cc9o0abE.s 			page 304


 10373              	.LBE539:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10374              		.loc 1 1353 4 view .LVU3330
 10375 0734 8246     		mov	r10, r0
1336:src/display.c **** #endif
 10376              		.loc 1 1336 11 view .LVU3331
 10377 0736 0190     		str	r0, [sp, #4]
 10378              	.LBB540:
1389:src/display.c **** 	}
 10379              		.loc 1 1389 16 view .LVU3332
 10380 0738 4FF0FF3B 		mov	fp, #-1
 10381 073c 4AE7     		b	.L1022
 10382              	.LVL1190:
 10383              	.L1205:
1389:src/display.c **** 	}
 10384              		.loc 1 1389 16 view .LVU3333
 10385              	.LBE540:
 10386              	.LBE549:
 10387              	.LBE564:
 10388              	.LBB565:
2832:src/display.c **** 	  char b2[16];
 10389              		.loc 1 2832 4 is_stmt 1 view .LVU3334
2832:src/display.c **** 	  char b2[16];
 10390              		.loc 1 2832 45 is_stmt 0 view .LVU3335
 10391 073e DBF80030 		ldr	r3, [fp]
 10392 0742 B3F8DC0F 		ldrh	r0, [r3, #4060]
2832:src/display.c **** 	  char b2[16];
 10393              		.loc 1 2832 22 view .LVU3336
 10394 0746 C0F34610 		ubfx	r0, r0, #5, #7
 10395 074a FFF7FEFF 		bl	current_catalogue
 10396              	.LVL1191:
2836:src/display.c **** 	  p = catcmd(op, b2);
 10397              		.loc 1 2836 9 view .LVU3337
 10398 074e 9449     		ldr	r1, .L1234+12
2832:src/display.c **** 	  char b2[16];
 10399              		.loc 1 2832 22 view .LVU3338
 10400 0750 0546     		mov	r5, r0
 10401              	.LVL1192:
2833:src/display.c **** 	  const char *p;
 10402              		.loc 1 2833 4 is_stmt 1 view .LVU3339
2834:src/display.c **** 
 10403              		.loc 1 2834 4 view .LVU3340
2836:src/display.c **** 	  p = catcmd(op, b2);
 10404              		.loc 1 2836 4 view .LVU3341
2836:src/display.c **** 	  p = catcmd(op, b2);
 10405              		.loc 1 2836 9 is_stmt 0 view .LVU3342
 10406 0752 1EA8     		add	r0, sp, #120
 10407              	.LVL1193:
2836:src/display.c **** 	  p = catcmd(op, b2);
 10408              		.loc 1 2836 9 view .LVU3343
 10409 0754 FFF7FEFF 		bl	scopy
 10410              	.LVL1194:
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10411              		.loc 1 2837 8 view .LVU3344
 10412 0758 08A9     		add	r1, sp, #32
2836:src/display.c **** 	  p = catcmd(op, b2);
 10413              		.loc 1 2836 9 view .LVU3345
ARM GAS  /tmp/cc9o0abE.s 			page 305


 10414 075a 0646     		mov	r6, r0
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10415              		.loc 1 2837 8 view .LVU3346
 10416 075c 2846     		mov	r0, r5
 10417              	.LVL1195:
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10418              		.loc 1 2837 4 is_stmt 1 view .LVU3347
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10419              		.loc 1 2837 8 is_stmt 0 view .LVU3348
 10420 075e FFF7FEFF 		bl	catcmd
 10421              	.LVL1196:
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10422              		.loc 1 2838 7 view .LVU3349
 10423 0762 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10424 0764 142B     		cmp	r3, #20
2837:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10425              		.loc 1 2837 8 view .LVU3350
 10426 0766 0146     		mov	r1, r0
 10427              	.LVL1197:
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10428              		.loc 1 2838 4 is_stmt 1 view .LVU3351
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10429              		.loc 1 2838 7 is_stmt 0 view .LVU3352
 10430 0768 07D0     		beq	.L925
2838:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10431              		.loc 1 2838 29 discriminator 1 view .LVU3353
 10432 076a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10433 076c 9A07     		lsls	r2, r3, #30
 10434 076e 04D5     		bpl	.L925
2839:src/display.c **** 	  bp = scopy(bp, p);
 10435              		.loc 1 2839 6 is_stmt 1 view .LVU3354
2839:src/display.c **** 	  bp = scopy(bp, p);
 10436              		.loc 1 2839 9 is_stmt 0 view .LVU3355
 10437 0770 3346     		mov	r3, r6
 10438              	.LVL1198:
2839:src/display.c **** 	  bp = scopy(bp, p);
 10439              		.loc 1 2839 12 view .LVU3356
 10440 0772 1422     		movs	r2, #20
 10441 0774 03F8012B 		strb	r2, [r3], #1
 10442              	.LVL1199:
2839:src/display.c **** 	  bp = scopy(bp, p);
 10443              		.loc 1 2839 9 view .LVU3357
 10444 0778 1E46     		mov	r6, r3
 10445              	.LVL1200:
 10446              	.L925:
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10447              		.loc 1 2840 4 is_stmt 1 view .LVU3358
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10448              		.loc 1 2840 9 is_stmt 0 view .LVU3359
 10449 077a 3046     		mov	r0, r6
 10450              	.LVL1201:
2840:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10451              		.loc 1 2840 9 view .LVU3360
 10452 077c FFF7FEFF 		bl	scopy
 10453              	.LVL1202:
2841:src/display.c **** 	    // State2.disp_small = 1;
 10454              		.loc 1 2841 4 is_stmt 1 view .LVU3361
ARM GAS  /tmp/cc9o0abE.s 			page 306


2841:src/display.c **** 	    // State2.disp_small = 1;
 10455              		.loc 1 2841 7 is_stmt 0 view .LVU3362
 10456 0780 019B     		ldr	r3, [sp, #4]
 10457 0782 103B     		subs	r3, r3, #16
 10458 0784 012B     		cmp	r3, #1
 10459 0786 2DD9     		bls	.L1211
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10460              		.loc 1 2848 11 is_stmt 1 view .LVU3363
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10461              		.loc 1 2848 15 is_stmt 0 view .LVU3364
 10462 0788 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
2848:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10463              		.loc 1 2848 14 view .LVU3365
 10464 078a 13F04003 		ands	r3, r3, #64
 10465 078e 08D0     		beq	.L1047
2849:src/display.c **** 	      decNumber x, r;
 10466              		.loc 1 2849 6 is_stmt 1 view .LVU3366
2849:src/display.c **** 	      decNumber x, r;
 10467              		.loc 1 2849 9 is_stmt 0 view .LVU3367
 10468 0790 019B     		ldr	r3, [sp, #4]
 10469 0792 122B     		cmp	r3, #18
 10470 0794 00F0D482 		beq	.L1212
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10471              		.loc 1 2869 13 is_stmt 1 view .LVU3368
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10472              		.loc 1 2869 46 is_stmt 0 view .LVU3369
 10473 0798 A5F58873 		sub	r3, r5, #272
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10474              		.loc 1 2869 16 view .LVU3370
 10475 079c 0D2B     		cmp	r3, #13
 10476 079e 40F2A182 		bls	.L1213
 10477              	.L1047:
2869:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10478              		.loc 1 2869 16 view .LVU3371
 10479              	.LBE565:
2683:src/display.c **** 	int x_disp = 0;
 10480              		.loc 1 2683 6 view .LVU3372
 10481 07a2 0025     		movs	r5, #0
 10482              	.LVL1203:
 10483              	.L929:
 10484              	.LBB575:
2878:src/display.c **** 	    set_status_top(buf);
 10485              		.loc 1 2878 4 is_stmt 1 view .LVU3373
2878:src/display.c **** 	    set_status_top(buf);
 10486              		.loc 1 2878 7 is_stmt 0 view .LVU3374
 10487 07a4 BAF1000F 		cmp	r10, #0
 10488 07a8 17D0     		beq	.L934
2879:src/display.c **** 	    no_status_top = 1;
 10489              		.loc 1 2879 6 is_stmt 1 view .LVU3375
 10490              	.LVL1204:
 10491              	.LBB566:
 10492              	.LBI566:
3657:src/display.c **** 	if (no_status_top) return;
 10493              		.loc 1 3657 19 view .LVU3376
 10494              	.LBB567:
3658:src/display.c **** 	if (State2.runmode) {
 10495              		.loc 1 3658 2 view .LVU3377
ARM GAS  /tmp/cc9o0abE.s 			page 307


3658:src/display.c **** 	if (State2.runmode) {
 10496              		.loc 1 3658 5 is_stmt 0 view .LVU3378
 10497 07aa B7F90030 		ldrsh	r3, [r7]
 10498 07ae 13B9     		cbnz	r3, .L935
 10499 07b0 1EA8     		add	r0, sp, #120
 10500              	.LVL1205:
3658:src/display.c **** 	if (State2.runmode) {
 10501              		.loc 1 3658 5 view .LVU3379
 10502 07b2 FFF7FEFF 		bl	set_status_top.part.0
 10503              	.LVL1206:
 10504              	.L935:
3658:src/display.c **** 	if (State2.runmode) {
 10505              		.loc 1 3658 5 view .LVU3380
 10506              	.LBE567:
 10507              	.LBE566:
2880:src/display.c **** 	    annuc = 1;
 10508              		.loc 1 2880 6 is_stmt 1 view .LVU3381
2880:src/display.c **** 	    annuc = 1;
 10509              		.loc 1 2880 20 is_stmt 0 view .LVU3382
 10510 07b6 0123     		movs	r3, #1
2881:src/display.c **** 	  }
 10511              		.loc 1 2881 12 view .LVU3383
 10512 07b8 5646     		mov	r6, r10
2880:src/display.c **** 	    annuc = 1;
 10513              		.loc 1 2880 20 view .LVU3384
 10514 07ba 3B80     		strh	r3, [r7]	@ movhi
2881:src/display.c **** 	  }
 10515              		.loc 1 2881 6 is_stmt 1 view .LVU3385
 10516              	.LVL1207:
 10517              	.L936:
2881:src/display.c **** 	  }
 10518              		.loc 1 2881 6 is_stmt 0 view .LVU3386
 10519              	.LBE575:
2971:src/display.c ****       nostk:
 10520              		.loc 1 2971 2 is_stmt 1 view .LVU3387
 10521 07bc FFF7FEFF 		bl	show_stack
 10522              	.LVL1208:
 10523              	.LDL1:
2973:src/display.c **** 	if (!skip) {
 10524              		.loc 1 2973 2 view .LVU3388
 10525 07c0 FFF7FEFF 		bl	show_flags
 10526              	.LVL1209:
2974:src/display.c **** 	  if (State2.runmode) {
 10527              		.loc 1 2974 2 view .LVU3389
2974:src/display.c **** 	  if (State2.runmode) {
 10528              		.loc 1 2974 5 is_stmt 0 view .LVU3390
 10529 07c4 002D     		cmp	r5, #0
 10530 07c6 00F03482 		beq	.L1183
 10531              	.LVL1210:
 10532              	.L937:
3051:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10533              		.loc 1 3051 2 is_stmt 1 view .LVU3391
 10534 07ca FFF7FEFF 		bl	set_annunciators
 10535              	.LVL1211:
3052:src/display.c **** 	  ShowRPN = 0;
 10536              		.loc 1 3052 2 view .LVU3392
 10537 07ce 714B     		ldr	r3, .L1234
ARM GAS  /tmp/cc9o0abE.s 			page 308


 10538 07d0 DFF8E081 		ldr	r8, .L1234+32
 10539 07d4 734D     		ldr	r5, .L1234+16
 10540 07d6 0093     		str	r3, [sp]
 10541 07d8 B3E4     		b	.L899
 10542              	.LVL1212:
 10543              	.L934:
 10544              	.LBB576:
2884:src/display.c **** 	  }
 10545              		.loc 1 2884 6 view .LVU3393
 10546 07da 1EA8     		add	r0, sp, #120
 10547 07dc FFF7FEFF 		bl	set_status
 10548              	.LVL1213:
 10549              	.LBE576:
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 10550              		.loc 1 2681 6 is_stmt 0 view .LVU3394
 10551 07e0 5646     		mov	r6, r10
 10552 07e2 EBE7     		b	.L936
 10553              	.LVL1214:
 10554              	.L1211:
 10555              	.LBB577:
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10556              		.loc 1 2843 6 is_stmt 1 view .LVU3395
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10557              		.loc 1 2843 9 is_stmt 0 view .LVU3396
 10558 07e4 B5F5274F 		cmp	r5, #42752
 10559 07e8 00F0CF82 		beq	.L927
2843:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10560              		.loc 1 2843 41 discriminator 1 view .LVU3397
 10561 07ec B5F5284F 		cmp	r5, #43008
 10562 07f0 00F0CB82 		beq	.L927
2846:src/display.c **** 	    skip = 1;
 10563              		.loc 1 2846 8 is_stmt 1 view .LVU3398
2846:src/display.c **** 	    skip = 1;
 10564              		.loc 1 2846 14 is_stmt 0 view .LVU3399
 10565 07f4 05F07F00 		and	r0, r5, #127
 10566 07f8 0021     		movs	r1, #0
 10567 07fa FFF7FEFF 		bl	get_const
 10568              	.LVL1215:
2846:src/display.c **** 	    skip = 1;
 10569              		.loc 1 2846 8 view .LVU3400
 10570 07fe 0022     		movs	r2, #0
 10571 0800 1146     		mov	r1, r2
 10572 0802 FFF7FEFF 		bl	set_x
 10573              	.LVL1216:
2847:src/display.c **** 	  } else if (State2.runmode) {
 10574              		.loc 1 2847 11 view .LVU3401
 10575 0806 0125     		movs	r5, #1
 10576              	.LVL1217:
2847:src/display.c **** 	  } else if (State2.runmode) {
 10577              		.loc 1 2847 11 view .LVU3402
 10578 0808 CCE7     		b	.L929
 10579              	.LVL1218:
 10580              	.L1051:
2847:src/display.c **** 	  } else if (State2.runmode) {
 10581              		.loc 1 2847 11 view .LVU3403
 10582              	.LBE577:
 10583              	.LBB578:
ARM GAS  /tmp/cc9o0abE.s 			page 309


 10584              	.LBB550:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10585              		.loc 1 1353 4 view .LVU3404
 10586 080a 8A46     		mov	r10, r1
 10587 080c 36E6     		b	.L1008
 10588              	.LVL1219:
 10589              	.L921:
1353:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10590              		.loc 1 1353 4 view .LVU3405
 10591              	.LBE550:
 10592              	.LBE578:
2805:src/display.c **** 	    }
 10593              		.loc 1 2805 3 is_stmt 1 view .LVU3406
2805:src/display.c **** 	    }
 10594              		.loc 1 2805 8 is_stmt 0 view .LVU3407
 10595 080e 2189     		ldrh	r1, [r4, #8]
 10596 0810 FFF7FEFF 		bl	num_arg_0
 10597              	.LVL1220:
2805:src/display.c **** 	    }
 10598              		.loc 1 2805 8 view .LVU3408
 10599 0814 A3E6     		b	.L920
 10600              	.LVL1221:
 10601              	.L1210:
 10602              	.LBB579:
 10603              	.LBB551:
 10604              	.LBB541:
1380:src/display.c **** 	      p++;
 10605              		.loc 1 1380 8 is_stmt 1 view .LVU3409
1381:src/display.c **** 	      if (!double_dot)
 10606              		.loc 1 1381 8 view .LVU3410
1383:src/display.c **** 	    }
 10607              		.loc 1 1383 5 is_stmt 0 view .LVU3411
 10608 0816 002B     		cmp	r3, #0
1381:src/display.c **** 	      if (!double_dot)
 10609              		.loc 1 1381 9 view .LVU3412
 10610 0818 05F10105 		add	r5, r5, #1
 10611              	.LVL1222:
1382:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10612              		.loc 1 1382 8 is_stmt 1 view .LVU3413
1383:src/display.c **** 	    }
 10613              		.loc 1 1383 5 is_stmt 0 view .LVU3414
 10614 081c 14BF     		ite	ne
 10615 081e 4FF0090A 		movne	r10, #9
 10616 0822 4FF0120A 		moveq	r10, #18
 10617 0826 B4E6     		b	.L1013
 10618              	.LVL1223:
 10619              	.L1206:
1383:src/display.c **** 	    }
 10620              		.loc 1 1383 5 view .LVU3415
 10621              	.LBE541:
 10622              	.LBE551:
 10623              	.LBE579:
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 10624              		.loc 1 2887 4 is_stmt 1 view .LVU3416
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 10625              		.loc 1 2887 42 is_stmt 0 view .LVU3417
 10626 0828 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
ARM GAS  /tmp/cc9o0abE.s 			page 310


 10627 082a 5F49     		ldr	r1, .L1234+20
 10628 082c 0423     		movs	r3, #4
 10629 082e 03EB0213 		add	r3, r3, r2, lsl #4
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 10630              		.loc 1 2887 9 view .LVU3418
 10631 0832 1944     		add	r1, r1, r3
 10632 0834 2722     		movs	r2, #39
 10633 0836 1EA8     		add	r0, sp, #120
 10634              	.LVL1224:
2887:src/display.c **** 	  if (State2.numdigit > 0) {
 10635              		.loc 1 2887 9 view .LVU3419
 10636 0838 FFF7FEFF 		bl	scopy_char
 10637              	.LVL1225:
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 10638              		.loc 1 2888 7 view .LVU3420
 10639 083c E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10640              	.LVL1226:
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 10641              		.loc 1 2888 4 is_stmt 1 view .LVU3421
2888:src/display.c **** 	    *bp++ = (char) State2.digval;
 10642              		.loc 1 2888 7 is_stmt 0 view .LVU3422
 10643 083e 002B     		cmp	r3, #0
 10644 0840 3FF4F8AC 		beq	.L940
2889:src/display.c **** 	    if (State2.numdigit > 1)
 10645              		.loc 1 2889 6 is_stmt 1 view .LVU3423
 10646              	.LVL1227:
2889:src/display.c **** 	    if (State2.numdigit > 1)
 10647              		.loc 1 2889 14 is_stmt 0 view .LVU3424
 10648 0844 2389     		ldrh	r3, [r4, #8]
 10649 0846 0370     		strb	r3, [r0]
2890:src/display.c **** 	      *bp++ = State2.digval2;
 10650              		.loc 1 2890 6 is_stmt 1 view .LVU3425
2890:src/display.c **** 	      *bp++ = State2.digval2;
 10651              		.loc 1 2890 9 is_stmt 0 view .LVU3426
 10652 0848 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 10653 084a 012B     		cmp	r3, #1
2891:src/display.c **** 	  }
 10654              		.loc 1 2891 8 is_stmt 1 view .LVU3427
 10655              	.LVL1228:
2891:src/display.c **** 	  }
 10656              		.loc 1 2891 22 is_stmt 0 view .LVU3428
 10657 084c 84BF     		itt	hi
 10658 084e A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
2891:src/display.c **** 	  }
 10659              		.loc 1 2891 14 view .LVU3429
 10660 0850 4370     		strbhi	r3, [r0, #1]
 10661              	.LVL1229:
2891:src/display.c **** 	  }
 10662              		.loc 1 2891 14 view .LVU3430
 10663 0852 EFE4     		b	.L940
 10664              	.LVL1230:
 10665              	.L1208:
2905:src/display.c **** 	  skip = 1;
 10666              		.loc 1 2905 4 is_stmt 1 view .LVU3431
 10667              	.LBB580:
 10668              	.LBI580:
2548:src/display.c **** 	char buf[16];
ARM GAS  /tmp/cc9o0abE.s 			page 311


 10669              		.loc 1 2548 19 view .LVU3432
 10670              	.LBB581:
2549:src/display.c **** 	unsigned short int pc = State2.digval;
 10671              		.loc 1 2549 2 view .LVU3433
2550:src/display.c **** 	unsigned int op = getprog(pc);
 10672              		.loc 1 2550 2 view .LVU3434
2550:src/display.c **** 	unsigned int op = getprog(pc);
 10673              		.loc 1 2550 21 is_stmt 0 view .LVU3435
 10674 0854 B4F808B0 		ldrh	fp, [r4, #8]
 10675              	.LVL1231:
2551:src/display.c **** 	int n = nLIB(pc);
 10676              		.loc 1 2551 2 is_stmt 1 view .LVU3436
2556:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 10677              		.loc 1 2556 27 is_stmt 0 view .LVU3437
 10678 0858 DFF85C91 		ldr	r9, .L1234+36
2551:src/display.c **** 	int n = nLIB(pc);
 10679              		.loc 1 2551 20 view .LVU3438
 10680 085c 5846     		mov	r0, fp
 10681 085e FFF7FEFF 		bl	getprog
 10682              	.LVL1232:
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 10683              		.loc 1 2555 2 view .LVU3439
 10684 0862 15A9     		add	r1, sp, #84
2551:src/display.c **** 	int n = nLIB(pc);
 10685              		.loc 1 2551 20 view .LVU3440
 10686 0864 0546     		mov	r5, r0
 10687              	.LVL1233:
2552:src/display.c **** 	unsigned short int lblpc;
 10688              		.loc 1 2552 2 is_stmt 1 view .LVU3441
2553:src/display.c **** 
 10689              		.loc 1 2553 2 view .LVU3442
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 10690              		.loc 1 2555 2 view .LVU3443
 10691 0866 FFF7FEFF 		bl	prt
 10692              	.LVL1234:
2555:src/display.c **** 	set_digits_string(libname[n], 0);
 10693              		.loc 1 2555 2 is_stmt 0 view .LVU3444
 10694 086a FFF7FEFF 		bl	set_status
 10695              	.LVL1235:
2556:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 10696              		.loc 1 2556 2 is_stmt 1 view .LVU3445
2556:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 10697              		.loc 1 2556 27 is_stmt 0 view .LVU3446
 10698 086e 4FEA9B30 		lsr	r0, fp, #14
 10699 0872 00EB8000 		add	r0, r0, r0, lsl #2
2556:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 10700              		.loc 1 2556 2 view .LVU3447
 10701 0876 4844     		add	r0, r0, r9
 10702 0878 4146     		mov	r1, r8
 10703 087a FFF7FEFF 		bl	set_digits_string
 10704              	.LVL1236:
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10705              		.loc 1 2561 2 is_stmt 1 view .LVU3448
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10706              		.loc 1 2561 5 is_stmt 0 view .LVU3449
 10707 087e 15F4704F 		tst	r5, #61440
 10708 0882 40F0E480 		bne	.L1214
ARM GAS  /tmp/cc9o0abE.s 			page 312


 10709              	.LVL1237:
 10710              	.L1186:
2561:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10711              		.loc 1 2561 5 view .LVU3450
 10712              	.LBE581:
 10713              	.LBE580:
2971:src/display.c ****       nostk:
 10714              		.loc 1 2971 2 is_stmt 1 view .LVU3451
 10715 0886 FFF7FEFF 		bl	show_stack
 10716              	.LVL1238:
2973:src/display.c **** 	if (!skip) {
 10717              		.loc 1 2973 2 view .LVU3452
 10718 088a FFF7FEFF 		bl	show_flags
 10719              	.LVL1239:
2974:src/display.c **** 	  if (State2.runmode) {
 10720              		.loc 1 2974 2 view .LVU3453
 10721 088e 9CE7     		b	.L937
 10722              	.LVL1240:
 10723              	.L1207:
2902:src/display.c **** 	  skip = 1;
 10724              		.loc 1 2902 4 view .LVU3454
 10725              	.LBB584:
 10726              	.LBI584:
2446:src/display.c **** 	int i, n;
 10727              		.loc 1 2446 19 view .LVU3455
 10728              	.LBB585:
2447:src/display.c **** 	int j = SEGS_EXP_BASE;
 10729              		.loc 1 2447 2 view .LVU3456
2448:src/display.c **** 	const int status = State2.status - 3;
 10730              		.loc 1 2448 2 view .LVU3457
2449:src/display.c **** 	char buf[16], *p = buf;
 10731              		.loc 1 2449 2 view .LVU3458
2453:src/display.c **** 	  set_status("Free:");
 10732              		.loc 1 2453 5 is_stmt 0 view .LVU3459
 10733 0890 B8F1010F 		cmp	r8, #1
2449:src/display.c **** 	char buf[16], *p = buf;
 10734              		.loc 1 2449 12 view .LVU3460
 10735 0894 A8F10303 		sub	r3, r8, #3
 10736              	.LVL1241:
2450:src/display.c **** 	unsigned int pc;
 10737              		.loc 1 2450 2 is_stmt 1 view .LVU3461
2451:src/display.c **** 
 10738              		.loc 1 2451 2 view .LVU3462
2453:src/display.c **** 	  set_status("Free:");
 10739              		.loc 1 2453 2 view .LVU3463
2453:src/display.c **** 	  set_status("Free:");
 10740              		.loc 1 2453 5 is_stmt 0 view .LVU3464
 10741 0898 00F0BF80 		beq	.L1215
2461:src/display.c **** 	  /* Top line */
 10742              		.loc 1 2461 7 is_stmt 1 view .LVU3465
2461:src/display.c **** 	  /* Top line */
 10743              		.loc 1 2461 10 is_stmt 0 view .LVU3466
 10744 089c 581C     		adds	r0, r3, #1
 10745 089e 00F09181 		beq	.L1216
 10746              	.LBB586:
2478:src/display.c **** 	  int end;
 10747              		.loc 1 2478 4 is_stmt 1 view .LVU3467
ARM GAS  /tmp/cc9o0abE.s 			page 313


2479:src/display.c **** 	  int group = 10;
 10748              		.loc 1 2479 4 view .LVU3468
2480:src/display.c **** 	  int start = 0;
 10749              		.loc 1 2480 4 view .LVU3469
 10750              	.LVL1242:
2481:src/display.c **** 		
 10751              		.loc 1 2481 4 view .LVU3470
2483:src/display.c **** 	    base = 10 * status;
 10752              		.loc 1 2483 4 view .LVU3471
2483:src/display.c **** 	    base = 10 * status;
 10753              		.loc 1 2483 7 is_stmt 0 view .LVU3472
 10754 08a2 092B     		cmp	r3, #9
 10755 08a4 40F36981 		ble	.L1217
2493:src/display.c **** 	    base = regX_idx;
 10756              		.loc 1 2493 9 is_stmt 1 view .LVU3473
2493:src/display.c **** 	    base = regX_idx;
 10757              		.loc 1 2493 12 is_stmt 0 view .LVU3474
 10758 08a8 0A2B     		cmp	r3, #10
 10759 08aa 69D0     		beq	.L1218
2501:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10760              		.loc 1 2501 6 is_stmt 1 view .LVU3475
 10761              	.LVL1243:
2502:src/display.c **** 	    set_status("FL.00-.15");
 10762              		.loc 1 2502 6 view .LVU3476
2503:src/display.c **** 	  }
 10763              		.loc 1 2503 6 view .LVU3477
 10764 08ac 3F48     		ldr	r0, .L1234+24
 10765 08ae FFF7FEFF 		bl	set_status
 10766              	.LVL1244:
2481:src/display.c **** 		
 10767              		.loc 1 2481 8 is_stmt 0 view .LVU3478
 10768 08b2 4FF0000A 		mov	r10, #0
2480:src/display.c **** 	  int start = 0;
 10769              		.loc 1 2480 8 view .LVU3479
 10770 08b6 0A25     		movs	r5, #10
2502:src/display.c **** 	    set_status("FL.00-.15");
 10771              		.loc 1 2502 10 view .LVU3480
 10772 08b8 4FF07F09 		mov	r9, #127
2501:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10773              		.loc 1 2501 11 view .LVU3481
 10774 08bc 7023     		movs	r3, #112
 10775              	.LVL1245:
 10776              	.L949:
2505:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10777              		.loc 1 2505 4 is_stmt 1 view .LVU3482
2505:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10778              		.loc 1 2505 6 is_stmt 0 view .LVU3483
 10779 08be 0AEBCA08 		add	r8, r10, r10, lsl #3
 10780              	.LVL1246:
2506:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10781              		.loc 1 2506 4 is_stmt 1 view .LVU3484
 10782              	.LBB587:
 10783              	.LBI587:
 357:src/display.c ****   if (res) {
 10784              		.loc 1 357 14 view .LVU3485
 10785              	.LBE587:
 10786              	.LBE586:
ARM GAS  /tmp/cc9o0abE.s 			page 314


 10787              	.LBE585:
 10788              	.LBE584:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10789              		.loc 1 358 3 view .LVU3486
 10790              	.LBB622:
 10791              	.LBB613:
 10792              	.LBB605:
 10793              	.LBB590:
 10794              	.LBB588:
 10795              	.LBI588:
 357:src/display.c ****   if (res) {
 10796              		.loc 1 357 14 view .LVU3487
 10797              	.LBB589:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 10798              		.loc 1 361 5 view .LVU3488
 10799 08c2 08F10700 		add	r0, r8, #7
 10800 08c6 0093     		str	r3, [sp]
 10801 08c8 FFF7FEFF 		bl	set_dot
 10802              	.LVL1247:
 362:src/display.c ****       set_dot(posn+8);
 10803              		.loc 1 362 5 view .LVU3489
 368:src/display.c **** }
 10804              		.loc 1 368 3 view .LVU3490
 368:src/display.c **** }
 10805              		.loc 1 368 3 is_stmt 0 view .LVU3491
 10806              	.LBE589:
 10807              	.LBE588:
 10808              	.LBE590:
 10809              	.LBE605:
 10810              	.LBE613:
 10811              	.LBE622:
 368:src/display.c **** }
 10812              		.loc 1 368 3 is_stmt 1 view .LVU3492
 10813              	.LBB623:
 10814              	.LBB614:
 10815              	.LBB606:
2507:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10816              		.loc 1 2507 4 view .LVU3493
 10817 08cc 009B     		ldr	r3, [sp]
 10818 08ce CAEB4502 		rsb	r2, r10, r5, lsl #1
 10819 08d2 1A44     		add	r2, r2, r3
 10820 08d4 0192     		str	r2, [sp, #4]
 10821              	.LVL1248:
2508:src/display.c **** 	    int k = i + base - start;
 10822              		.loc 1 2508 30 is_stmt 0 view .LVU3494
 10823 08d6 0AEB0502 		add	r2, r10, r5
 10824 08da 1D44     		add	r5, r5, r3
 10825              	.LVL1249:
2508:src/display.c **** 	    int k = i + base - start;
 10826              		.loc 1 2508 30 view .LVU3495
 10827 08dc A3EB0A03 		sub	r3, r3, r10
 10828 08e0 CDE90236 		strd	r3, r6, [sp, #8]
2507:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10829              		.loc 1 2507 6 view .LVU3496
 10830 08e4 08F10908 		add	r8, r8, #9
 10831              	.LVL1250:
2508:src/display.c **** 	    int k = i + base - start;
ARM GAS  /tmp/cc9o0abE.s 			page 315


 10832              		.loc 1 2508 4 is_stmt 1 view .LVU3497
2508:src/display.c **** 	    int k = i + base - start;
 10833              		.loc 1 2508 20 view .LVU3498
2508:src/display.c **** 	    int k = i + base - start;
 10834              		.loc 1 2508 30 is_stmt 0 view .LVU3499
 10835 08e8 0092     		str	r2, [sp]
 10836 08ea 14E0     		b	.L953
 10837              	.LVL1251:
 10838              	.L951:
 10839              	.LBB591:
2518:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10840              		.loc 1 2518 6 is_stmt 1 view .LVU3500
 10841 08ec 3146     		mov	r1, r6
 10842 08ee 4046     		mov	r0, r8
 10843 08f0 FFF7FEFF 		bl	set_dig
 10844              	.LVL1252:
2519:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10845              		.loc 1 2519 6 view .LVU3501
 10846              	.LBB592:
 10847              	.LBI592:
 357:src/display.c ****   if (res) {
 10848              		.loc 1 357 14 view .LVU3502
 10849              	.LBE592:
 10850              	.LBE591:
 10851              	.LBE606:
 10852              	.LBE614:
 10853              	.LBE623:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10854              		.loc 1 358 3 view .LVU3503
 10855              	.LBB624:
 10856              	.LBB615:
 10857              	.LBB607:
 10858              	.LBB600:
 10859              	.LBB595:
 10860              	.LBB593:
 10861              	.LBI593:
 357:src/display.c ****   if (res) {
 10862              		.loc 1 357 14 view .LVU3504
 10863              	.LBB594:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 10864              		.loc 1 361 5 view .LVU3505
 10865 08f4 08F10700 		add	r0, r8, #7
 10866 08f8 FFF7FEFF 		bl	set_dot
 10867              	.LVL1253:
 362:src/display.c ****       set_dot(posn+8);
 10868              		.loc 1 362 5 view .LVU3506
 368:src/display.c **** }
 10869              		.loc 1 368 3 view .LVU3507
 368:src/display.c **** }
 10870              		.loc 1 368 3 is_stmt 0 view .LVU3508
 10871              	.LBE594:
 10872              	.LBE593:
 10873              	.LBE595:
 10874              	.LBE600:
 10875              	.LBE607:
 10876              	.LBE615:
 10877              	.LBE624:
ARM GAS  /tmp/cc9o0abE.s 			page 316


 368:src/display.c **** }
 10878              		.loc 1 368 3 is_stmt 1 view .LVU3509
 10879              	.LBB625:
 10880              	.LBB616:
 10881              	.LBB608:
 10882              	.LBB601:
2520:src/display.c **** 	    if (i == 4) {
 10883              		.loc 1 2520 6 view .LVU3510
2521:src/display.c **** 	      set_dig(j, 8);
 10884              		.loc 1 2521 9 is_stmt 0 view .LVU3511
 10885 08fc BAF1040F 		cmp	r10, #4
2520:src/display.c **** 	    if (i == 4) {
 10886              		.loc 1 2520 8 view .LVU3512
 10887 0900 08F10900 		add	r0, r8, #9
 10888              	.LVL1254:
2521:src/display.c **** 	      set_dig(j, 8);
 10889              		.loc 1 2521 6 is_stmt 1 view .LVU3513
2521:src/display.c **** 	      set_dig(j, 8);
 10890              		.loc 1 2521 9 is_stmt 0 view .LVU3514
 10891 0904 1ED0     		beq	.L1219
2520:src/display.c **** 	    if (i == 4) {
 10892              		.loc 1 2520 8 view .LVU3515
 10893 0906 8046     		mov	r8, r0
 10894              	.LVL1255:
 10895              	.L952:
2520:src/display.c **** 	    if (i == 4) {
 10896              		.loc 1 2520 8 view .LVU3516
 10897              	.LBE601:
2508:src/display.c **** 	    int k = i + base - start;
 10898              		.loc 1 2508 39 is_stmt 1 view .LVU3517
2508:src/display.c **** 	    int k = i + base - start;
 10899              		.loc 1 2508 4 is_stmt 0 view .LVU3518
 10900 0908 009B     		ldr	r3, [sp]
2508:src/display.c **** 	    int k = i + base - start;
 10901              		.loc 1 2508 40 view .LVU3519
 10902 090a 0AF1010A 		add	r10, r10, #1
 10903              	.LVL1256:
2508:src/display.c **** 	    int k = i + base - start;
 10904              		.loc 1 2508 20 is_stmt 1 view .LVU3520
2508:src/display.c **** 	    int k = i + base - start;
 10905              		.loc 1 2508 4 is_stmt 0 view .LVU3521
 10906 090e 9A45     		cmp	r10, r3
 10907 0910 05F10105 		add	r5, r5, #1
 10908 0914 52D0     		beq	.L1220
 10909              	.LVL1257:
 10910              	.L953:
 10911              	.LBB602:
2509:src/display.c **** 	    int l = get_user_flag(k);
 10912              		.loc 1 2509 6 is_stmt 1 view .LVU3522
2510:src/display.c **** 	    k += group;
 10913              		.loc 1 2510 6 view .LVU3523
2510:src/display.c **** 	    k += group;
 10914              		.loc 1 2510 14 is_stmt 0 view .LVU3524
 10915 0916 029B     		ldr	r3, [sp, #8]
 10916 0918 03EB0A00 		add	r0, r3, r10
 10917 091c FFF7FEFF 		bl	get_user_flag
 10918              	.LVL1258:
ARM GAS  /tmp/cc9o0abE.s 			page 317


2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10919              		.loc 1 2512 9 view .LVU3525
 10920 0920 4D45     		cmp	r5, r9
2510:src/display.c **** 	    k += group;
 10921              		.loc 1 2510 14 view .LVU3526
 10922 0922 0646     		mov	r6, r0
 10923              	.LVL1259:
2511:src/display.c **** 	    if (end >= k) {
 10924              		.loc 1 2511 6 is_stmt 1 view .LVU3527
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10925              		.loc 1 2512 6 view .LVU3528
2512:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10926              		.loc 1 2512 9 is_stmt 0 view .LVU3529
 10927 0924 E2DC     		bgt	.L951
2513:src/display.c **** 	      k += group;
 10928              		.loc 1 2513 8 is_stmt 1 view .LVU3530
2513:src/display.c **** 	      k += group;
 10929              		.loc 1 2513 14 is_stmt 0 view .LVU3531
 10930 0926 2846     		mov	r0, r5
 10931              	.LVL1260:
2513:src/display.c **** 	      k += group;
 10932              		.loc 1 2513 14 view .LVU3532
 10933 0928 FFF7FEFF 		bl	get_user_flag
 10934              	.LVL1261:
 10935 092c 019B     		ldr	r3, [sp, #4]
 10936 092e 5344     		add	r3, r3, r10
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10937              		.loc 1 2515 11 view .LVU3533
 10938 0930 9945     		cmp	r9, r3
2513:src/display.c **** 	      k += group;
 10939              		.loc 1 2513 10 view .LVU3534
 10940 0932 46EA4006 		orr	r6, r6, r0, lsl #1
 10941              	.LVL1262:
2514:src/display.c **** 	      if (end >= k)
 10942              		.loc 1 2514 8 is_stmt 1 view .LVU3535
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10943              		.loc 1 2515 8 view .LVU3536
2515:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10944              		.loc 1 2515 11 is_stmt 0 view .LVU3537
 10945 0936 D9DB     		blt	.L951
2516:src/display.c **** 	    }
 10946              		.loc 1 2516 3 is_stmt 1 view .LVU3538
2516:src/display.c **** 	    }
 10947              		.loc 1 2516 9 is_stmt 0 view .LVU3539
 10948 0938 1846     		mov	r0, r3
 10949 093a FFF7FEFF 		bl	get_user_flag
 10950              	.LVL1263:
2516:src/display.c **** 	    }
 10951              		.loc 1 2516 5 view .LVU3540
 10952 093e 46EA8006 		orr	r6, r6, r0, lsl #2
 10953              	.LVL1264:
2516:src/display.c **** 	    }
 10954              		.loc 1 2516 5 view .LVU3541
 10955 0942 D3E7     		b	.L951
 10956              	.LVL1265:
 10957              	.L1219:
2522:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
ARM GAS  /tmp/cc9o0abE.s 			page 318


 10958              		.loc 1 2522 8 is_stmt 1 view .LVU3542
 10959 0944 0821     		movs	r1, #8
 10960 0946 FFF7FEFF 		bl	set_dig
 10961              	.LVL1266:
2523:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10962              		.loc 1 2523 8 view .LVU3543
 10963              	.LBB596:
 10964              	.LBI596:
 357:src/display.c ****   if (res) {
 10965              		.loc 1 357 14 view .LVU3544
 10966              	.LBE596:
 10967              	.LBE602:
 10968              	.LBE608:
 10969              	.LBE616:
 10970              	.LBE625:
 358:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10971              		.loc 1 358 3 view .LVU3545
 10972              	.LBB626:
 10973              	.LBB617:
 10974              	.LBB609:
 10975              	.LBB603:
 10976              	.LBB599:
 10977              	.LBB597:
 10978              	.LBI597:
 357:src/display.c ****   if (res) {
 10979              		.loc 1 357 14 view .LVU3546
 10980              	.LBB598:
 361:src/display.c ****     if (decimal != DECIMAL_DOT)
 10981              		.loc 1 361 5 view .LVU3547
 10982 094a 08F11000 		add	r0, r8, #16
 10983 094e FFF7FEFF 		bl	set_dot
 10984              	.LVL1267:
 362:src/display.c ****       set_dot(posn+8);
 10985              		.loc 1 362 5 view .LVU3548
 368:src/display.c **** }
 10986              		.loc 1 368 3 view .LVU3549
 368:src/display.c **** }
 10987              		.loc 1 368 3 is_stmt 0 view .LVU3550
 10988              	.LBE598:
 10989              	.LBE597:
 10990              	.LBE599:
 10991              	.LBE603:
 10992              	.LBE609:
 10993              	.LBE617:
 10994              	.LBE626:
 368:src/display.c **** }
 10995              		.loc 1 368 3 is_stmt 1 view .LVU3551
 10996              	.LBB627:
 10997              	.LBB618:
 10998              	.LBB610:
 10999              	.LBB604:
2524:src/display.c **** 	    }
 11000              		.loc 1 2524 8 view .LVU3552
2524:src/display.c **** 	    }
 11001              		.loc 1 2524 10 is_stmt 0 view .LVU3553
 11002 0952 08F11208 		add	r8, r8, #18
 11003              	.LVL1268:
ARM GAS  /tmp/cc9o0abE.s 			page 319


2524:src/display.c **** 	    }
 11004              		.loc 1 2524 10 view .LVU3554
 11005 0956 D7E7     		b	.L952
 11006              	.LVL1269:
 11007              	.L1053:
2524:src/display.c **** 	    }
 11008              		.loc 1 2524 10 view .LVU3555
 11009              	.LBE604:
 11010              	.LBE610:
 11011              	.LBE618:
 11012              	.LBE627:
 11013              	.LBB628:
 11014              	.LBB552:
 11015              	.LBB542:
1373:src/display.c **** 	    if (gotdot <= j) {
 11016              		.loc 1 1373 8 view .LVU3556
 11017 0958 4FF0090A 		mov	r10, #9
 11018 095c 19E6     		b	.L1013
 11019              	.LVL1270:
 11020              	.L975:
1373:src/display.c **** 	    if (gotdot <= j) {
 11021              		.loc 1 1373 8 view .LVU3557
 11022              	.LBE542:
 11023              	.LBE552:
 11024              	.LBE628:
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11025              		.loc 1 2920 11 is_stmt 1 view .LVU3558
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11026              		.loc 1 2920 15 is_stmt 0 view .LVU3559
 11027 095e 0D4B     		ldr	r3, .L1234
 11028 0960 0093     		str	r3, [sp]
 11029 0962 B3F90030 		ldrsh	r3, [r3]
2920:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11030              		.loc 1 2920 14 view .LVU3560
 11031 0966 002B     		cmp	r3, #0
 11032 0968 40F0D580 		bne	.L1221
2922:src/display.c **** 	    bp = scopy(buf, Alpha);
 11033              		.loc 1 2922 11 is_stmt 1 view .LVU3561
2922:src/display.c **** 	    bp = scopy(buf, Alpha);
 11034              		.loc 1 2922 14 is_stmt 0 view .LVU3562
 11035 096c 0807     		lsls	r0, r1, #28
 11036 096e 00F18180 		bmi	.L1222
 11037              	.LVL1271:
2971:src/display.c ****       nostk:
 11038              		.loc 1 2971 2 is_stmt 1 view .LVU3563
 11039 0972 FFF7FEFF 		bl	show_stack
 11040              	.LVL1272:
2973:src/display.c **** 	if (!skip) {
 11041              		.loc 1 2973 2 view .LVU3564
2954:src/display.c **** 	  }
 11042              		.loc 1 2954 12 is_stmt 0 view .LVU3565
 11043 0976 0126     		movs	r6, #1
2973:src/display.c **** 	if (!skip) {
 11044              		.loc 1 2973 2 view .LVU3566
 11045 0978 FFF7FEFF 		bl	show_flags
 11046              	.LVL1273:
2974:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/cc9o0abE.s 			page 320


 11047              		.loc 1 2974 2 is_stmt 1 view .LVU3567
 11048 097c FFF782BB 		b	.L904
 11049              	.LVL1274:
 11050              	.L1218:
 11051              	.LBB629:
 11052              	.LBB619:
 11053              	.LBB611:
2494:src/display.c **** 	    end = regK_idx;
 11054              		.loc 1 2494 6 view .LVU3568
2495:src/display.c **** 	    start = 3;
 11055              		.loc 1 2495 6 view .LVU3569
2496:src/display.c **** 	    group = 4;
 11056              		.loc 1 2496 6 view .LVU3570
2497:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11057              		.loc 1 2497 6 view .LVU3571
2498:src/display.c **** 	  }
 11058              		.loc 1 2498 6 view .LVU3572
 11059 0980 0B48     		ldr	r0, .L1234+28
 11060 0982 FFF7FEFF 		bl	set_status
 11061              	.LVL1275:
2496:src/display.c **** 	    group = 4;
 11062              		.loc 1 2496 12 is_stmt 0 view .LVU3573
 11063 0986 4FF0030A 		mov	r10, #3
2497:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11064              		.loc 1 2497 12 view .LVU3574
 11065 098a 0425     		movs	r5, #4
2495:src/display.c **** 	    start = 3;
 11066              		.loc 1 2495 10 view .LVU3575
 11067 098c 4FF06F09 		mov	r9, #111
2494:src/display.c **** 	    end = regK_idx;
 11068              		.loc 1 2494 11 view .LVU3576
 11069 0990 6423     		movs	r3, #100
 11070 0992 94E7     		b	.L949
 11071              	.L1235:
 11072              		.align	2
 11073              	.L1234:
 11074 0994 00000000 		.word	DispPlot
 11075 0998 00000000 		.word	.LANCHOR16
 11076 099c 00000000 		.word	.LANCHOR1
 11077 09a0 1C000000 		.word	.LC27
 11078 09a4 00000000 		.word	ShowRegister
 11079 09a8 00000000 		.word	multicmds
 11080 09ac 6C000000 		.word	.LC38
 11081 09b0 5C000000 		.word	.LC37
 11082 09b4 00000000 		.word	DispMsg
 11083 09b8 00000000 		.word	.LANCHOR19
 11084              	.LVL1276:
 11085              	.L1220:
2494:src/display.c **** 	    end = regK_idx;
 11086              		.loc 1 2494 11 view .LVU3577
 11087 09bc 039E     		ldr	r6, [sp, #12]
 11088              	.LVL1277:
 11089              	.L944:
2494:src/display.c **** 	    end = regK_idx;
 11090              		.loc 1 2494 11 view .LVU3578
 11091              	.LBE611:
2529:src/display.c **** 	pc = state_pc();
ARM GAS  /tmp/cc9o0abE.s 			page 321


 11092              		.loc 1 2529 2 is_stmt 1 view .LVU3579
2530:src/display.c **** 	if (isXROM(pc))
 11093              		.loc 1 2530 2 view .LVU3580
2530:src/display.c **** 	if (isXROM(pc))
 11094              		.loc 1 2530 7 is_stmt 0 view .LVU3581
 11095 09be DBF80030 		ldr	r3, [fp]
2530:src/display.c **** 	if (isXROM(pc))
 11096              		.loc 1 2530 5 view .LVU3582
 11097 09c2 B3F8E08F 		ldrh	r8, [r3, #4064]
 11098              	.LVL1278:
2531:src/display.c **** 	  pc = 1;
 11099              		.loc 1 2531 2 is_stmt 1 view .LVU3583
2531:src/display.c **** 	  pc = 1;
 11100              		.loc 1 2531 6 is_stmt 0 view .LVU3584
 11101 09c6 4FEA9833 		lsr	r3, r8, #14
2532:src/display.c **** 	for (n=i=0; i<4; i++) {
 11102              		.loc 1 2532 7 view .LVU3585
 11103 09ca 032B     		cmp	r3, #3
 11104 09cc 08BF     		it	eq
 11105 09ce 4FF00108 		moveq	r8, #1
 11106              	.LVL1279:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11107              		.loc 1 2533 2 is_stmt 1 view .LVU3586
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11108              		.loc 1 2533 14 view .LVU3587
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11109              		.loc 1 2533 8 is_stmt 0 view .LVU3588
 11110 09d2 4FF0000A 		mov	r10, #0
 11111 09d6 6425     		movs	r5, #100
2529:src/display.c **** 	pc = state_pc();
 11112              		.loc 1 2529 4 view .LVU3589
 11113 09d8 4FF06C09 		mov	r9, #108
 11114              	.LVL1280:
 11115              	.L957:
2534:src/display.c **** 	    if (++n == 4) {
 11116              		.loc 1 2534 4 is_stmt 1 view .LVU3590
2534:src/display.c **** 	    if (++n == 4) {
 11117              		.loc 1 2534 8 is_stmt 0 view .LVU3591
 11118 09dc 0222     		movs	r2, #2
 11119 09de 2946     		mov	r1, r5
 11120 09e0 4046     		mov	r0, r8
 11121 09e2 FFF7FEFF 		bl	find_label_from
 11122              	.LVL1281:
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11123              		.loc 1 2535 6 is_stmt 1 view .LVU3592
2534:src/display.c **** 	    if (++n == 4) {
 11124              		.loc 1 2534 7 is_stmt 0 view .LVU3593
 11125 09e6 58B1     		cbz	r0, .L955
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11126              		.loc 1 2535 9 view .LVU3594
 11127 09e8 0AF1010A 		add	r10, r10, #1
 11128              	.LVL1282:
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11129              		.loc 1 2539 8 is_stmt 1 view .LVU3595
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11130              		.loc 1 2535 9 is_stmt 0 view .LVU3596
 11131 09ec BAF1040F 		cmp	r10, #4
ARM GAS  /tmp/cc9o0abE.s 			page 322


2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11132              		.loc 1 2539 8 view .LVU3597
 11133 09f0 A5F12301 		sub	r1, r5, #35
 11134 09f4 4846     		mov	r0, r9
2535:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 11135              		.loc 1 2535 9 view .LVU3598
 11136 09f6 07D0     		beq	.L1223
2539:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 11137              		.loc 1 2539 8 view .LVU3599
 11138 09f8 FFF7FEFF 		bl	set_dig
 11139              	.LVL1283:
2540:src/display.c **** 	    }
 11140              		.loc 1 2540 8 is_stmt 1 view .LVU3600
2540:src/display.c **** 	    }
 11141              		.loc 1 2540 10 is_stmt 0 view .LVU3601
 11142 09fc 09F10709 		add	r9, r9, #7
 11143              	.LVL1284:
 11144              	.L955:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11145              		.loc 1 2533 19 is_stmt 1 view .LVU3602
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11146              		.loc 1 2533 14 view .LVU3603
 11147 0a00 0135     		adds	r5, r5, #1
 11148              	.LVL1285:
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11149              		.loc 1 2533 2 is_stmt 0 view .LVU3604
 11150 0a02 682D     		cmp	r5, #104
 11151 0a04 EAD1     		bne	.L957
2533:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 11152              		.loc 1 2533 2 view .LVU3605
 11153 0a06 3EE7     		b	.L1186
 11154              	.LVL1286:
 11155              	.L1223:
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11156              		.loc 1 2536 8 is_stmt 1 view .LVU3606
 11157 0a08 4C21     		movs	r1, #76
 11158 0a0a 7320     		movs	r0, #115
 11159              	.LVL1287:
2536:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 11160              		.loc 1 2536 8 is_stmt 0 view .LVU3607
 11161 0a0c FFF7FEFF 		bl	set_dig
 11162              	.LVL1288:
2537:src/display.c **** 	    } else {
 11163              		.loc 1 2537 8 is_stmt 1 view .LVU3608
 11164 0a10 4C21     		movs	r1, #76
 11165 0a12 7A20     		movs	r0, #122
 11166 0a14 FFF7FEFF 		bl	set_dig
 11167              	.LVL1289:
 11168 0a18 F2E7     		b	.L955
 11169              	.LVL1290:
 11170              	.L1215:
2454:src/display.c **** 	  p = num_arg(buf, free_mem());
 11171              		.loc 1 2454 4 view .LVU3609
 11172 0a1a BD48     		ldr	r0, .L1236
 11173 0a1c FFF7FEFF 		bl	set_status
 11174              	.LVL1291:
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
ARM GAS  /tmp/cc9o0abE.s 			page 323


 11175              		.loc 1 2455 4 view .LVU3610
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11176              		.loc 1 2455 21 is_stmt 0 view .LVU3611
 11177 0a20 FFF7FEFF 		bl	free_mem
 11178              	.LVL1292:
 11179 0a24 0146     		mov	r1, r0
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11180              		.loc 1 2455 8 view .LVU3612
 11181 0a26 15A8     		add	r0, sp, #84
 11182              	.LVL1293:
2455:src/display.c **** 	  p = scopy(p, " , FL. ");
 11183              		.loc 1 2455 8 view .LVU3613
 11184 0a28 FFF7FEFF 		bl	num_arg
 11185              	.LVL1294:
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 11186              		.loc 1 2456 4 is_stmt 1 view .LVU3614
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 11187              		.loc 1 2456 8 is_stmt 0 view .LVU3615
 11188 0a2c B949     		ldr	r1, .L1236+4
 11189 0a2e FFF7FEFF 		bl	scopy
 11190              	.LVL1295:
2456:src/display.c **** 	  p = num_arg(p, free_flash());
 11191              		.loc 1 2456 8 view .LVU3616
 11192 0a32 0546     		mov	r5, r0
 11193              	.LVL1296:
2457:src/display.c **** 	  *p = '\0';
 11194              		.loc 1 2457 4 is_stmt 1 view .LVU3617
2457:src/display.c **** 	  *p = '\0';
 11195              		.loc 1 2457 19 is_stmt 0 view .LVU3618
 11196 0a34 FFF7FEFF 		bl	free_flash
 11197              	.LVL1297:
2457:src/display.c **** 	  *p = '\0';
 11198              		.loc 1 2457 19 view .LVU3619
 11199 0a38 0146     		mov	r1, r0
2457:src/display.c **** 	  *p = '\0';
 11200              		.loc 1 2457 8 view .LVU3620
 11201 0a3a 2846     		mov	r0, r5
 11202 0a3c FFF7FEFF 		bl	num_arg
 11203              	.LVL1298:
 11204 0a40 0346     		mov	r3, r0
 11205              	.LVL1299:
2458:src/display.c **** 	  set_digits_string(buf, 0);
 11206              		.loc 1 2458 4 is_stmt 1 view .LVU3621
2458:src/display.c **** 	  set_digits_string(buf, 0);
 11207              		.loc 1 2458 7 is_stmt 0 view .LVU3622
 11208 0a42 0021     		movs	r1, #0
2459:src/display.c **** 	}
 11209              		.loc 1 2459 4 view .LVU3623
 11210 0a44 15A8     		add	r0, sp, #84
 11211              	.LVL1300:
2458:src/display.c **** 	  set_digits_string(buf, 0);
 11212              		.loc 1 2458 7 view .LVU3624
 11213 0a46 1970     		strb	r1, [r3]
 11214              	.LVL1301:
2459:src/display.c **** 	}
 11215              		.loc 1 2459 4 is_stmt 1 view .LVU3625
 11216 0a48 FFF7FEFF 		bl	set_digits_string
ARM GAS  /tmp/cc9o0abE.s 			page 324


 11217              	.LVL1302:
2459:src/display.c **** 	}
 11218              		.loc 1 2459 4 is_stmt 0 view .LVU3626
 11219 0a4c B7E7     		b	.L944
 11220              	.LVL1303:
 11221              	.L1214:
2459:src/display.c **** 	}
 11222              		.loc 1 2459 4 view .LVU3627
 11223              	.LBE619:
 11224              	.LBE629:
 11225              	.LBB630:
 11226              	.LBB582:
2562:src/display.c **** 	  if (lblpc != pc) {
 11227              		.loc 1 2562 4 is_stmt 1 view .LVU3628
2562:src/display.c **** 	  if (lblpc != pc) {
 11228              		.loc 1 2562 12 is_stmt 0 view .LVU3629
 11229 0a4e 2846     		mov	r0, r5
 11230 0a50 4146     		mov	r1, r8
 11231 0a52 FFF7FEFF 		bl	findmultilbl
 11232              	.LVL1304:
2562:src/display.c **** 	  if (lblpc != pc) {
 11233              		.loc 1 2562 10 view .LVU3630
 11234 0a56 85B2     		uxth	r5, r0
 11235              	.LVL1305:
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11236              		.loc 1 2563 4 is_stmt 1 view .LVU3631
2563:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 11237              		.loc 1 2563 7 is_stmt 0 view .LVU3632
 11238 0a58 AB45     		cmp	fp, r5
 11239 0a5a 3FF414AF 		beq	.L1186
2564:src/display.c **** 	    n = nLIB(lblpc);
 11240              		.loc 1 2564 6 is_stmt 1 view .LVU3633
 11241 0a5e AE48     		ldr	r0, .L1236+8
 11242 0a60 3F21     		movs	r1, #63
 11243 0a62 FFF7FEFF 		bl	set_digits_string
 11244              	.LVL1306:
2565:src/display.c **** 	    if (n == REGION_RAM)
 11245              		.loc 1 2565 6 view .LVU3634
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11246              		.loc 1 2566 6 view .LVU3635
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11247              		.loc 1 2566 9 is_stmt 0 view .LVU3636
 11248 0a66 AA0B     		lsrs	r2, r5, #14
 11249              	.LVL1307:
2566:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 11250              		.loc 1 2566 9 view .LVU3637
 11251 0a68 7FD1     		bne	.L962
2567:src/display.c **** 	    else {
 11252              		.loc 1 2567 8 is_stmt 1 view .LVU3638
 11253 0a6a 2846     		mov	r0, r5
 11254 0a6c 0121     		movs	r1, #1
 11255 0a6e FFF7FEFF 		bl	set_exp
 11256              	.LVL1308:
2567:src/display.c **** 	    else {
 11257              		.loc 1 2567 8 is_stmt 0 view .LVU3639
 11258 0a72 08E7     		b	.L1186
 11259              	.LVL1309:
ARM GAS  /tmp/cc9o0abE.s 			page 325


 11260              	.L1222:
2567:src/display.c **** 	    else {
 11261              		.loc 1 2567 8 view .LVU3640
 11262              	.LBE582:
 11263              	.LBE630:
2923:src/display.c **** 	    j = State2.alpha_pos;
 11264              		.loc 1 2923 6 is_stmt 1 view .LVU3641
2923:src/display.c **** 	    j = State2.alpha_pos;
 11265              		.loc 1 2923 22 is_stmt 0 view .LVU3642
 11266 0a74 DBF80010 		ldr	r1, [fp]
 11267 0a78 0293     		str	r3, [sp, #8]
2923:src/display.c **** 	    j = State2.alpha_pos;
 11268              		.loc 1 2923 11 view .LVU3643
 11269 0a7a 1EA8     		add	r0, sp, #120
 11270              	.LVL1310:
2923:src/display.c **** 	    j = State2.alpha_pos;
 11271              		.loc 1 2923 11 view .LVU3644
 11272 0a7c 01F57B61 		add	r1, r1, #4016
 11273 0a80 FFF7FEFF 		bl	scopy
 11274              	.LVL1311:
2924:src/display.c **** 	    if (j != 0) {
 11275              		.loc 1 2924 16 view .LVU3645
 11276 0a84 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 11277              	.LVL1312:
2924:src/display.c **** 	    if (j != 0) {
 11278              		.loc 1 2924 6 is_stmt 1 view .LVU3646
2925:src/display.c **** 	      i = slen(buf);
 11279              		.loc 1 2925 6 view .LVU3647
2925:src/display.c **** 	      i = slen(buf);
 11280              		.loc 1 2925 9 is_stmt 0 view .LVU3648
 11281 0a86 1ABB     		cbnz	r2, .L1224
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11282              		.loc 1 2938 8 is_stmt 1 view .LVU3649
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11283              		.loc 1 2938 11 is_stmt 0 view .LVU3650
 11284 0a88 3DB1     		cbz	r5, .L986
2938:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11285              		.loc 1 2938 31 discriminator 1 view .LVU3651
 11286 0a8a BAF1000F 		cmp	r10, #0
 11287 0a8e 04D1     		bne	.L986
2939:src/display.c **** 		*bp++ = '\0';
 11288              		.loc 1 2939 3 is_stmt 1 view .LVU3652
 11289              	.LVL1313:
2939:src/display.c **** 		*bp++ = '\0';
 11290              		.loc 1 2939 23 is_stmt 0 view .LVU3653
 11291 0a90 05F11003 		add	r3, r5, #16
2940:src/display.c **** 	      }
 11292              		.loc 1 2940 9 view .LVU3654
 11293 0a94 0022     		movs	r2, #0
 11294              	.LVL1314:
2939:src/display.c **** 		*bp++ = '\0';
 11295              		.loc 1 2939 9 view .LVU3655
 11296 0a96 0370     		strb	r3, [r0]
 11297              	.LVL1315:
2940:src/display.c **** 	      }
 11298              		.loc 1 2940 3 is_stmt 1 view .LVU3656
2940:src/display.c **** 	      }
ARM GAS  /tmp/cc9o0abE.s 			page 326


 11299              		.loc 1 2940 9 is_stmt 0 view .LVU3657
 11300 0a98 4270     		strb	r2, [r0, #1]
 11301              	.LVL1316:
 11302              	.L986:
2942:src/display.c **** 	    }
 11303              		.loc 1 2942 8 is_stmt 1 view .LVU3658
 11304 0a9a 1EA8     		add	r0, sp, #120
 11305 0a9c FFF7FEFF 		bl	set_status_right
 11306              	.LVL1317:
 11307              	.L985:
2944:src/display.c **** 	      bp = buf;
 11308              		.loc 1 2944 6 view .LVU3659
2944:src/display.c **** 	      bp = buf;
 11309              		.loc 1 2944 9 is_stmt 0 view .LVU3660
 11310 0aa0 7DB3     		cbz	r5, .L977
2944:src/display.c **** 	      bp = buf;
 11311              		.loc 1 2944 27 discriminator 1 view .LVU3661
 11312 0aa2 BAF1000F 		cmp	r10, #0
 11313 0aa6 2CD0     		beq	.L977
2945:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
 11314              		.loc 1 2945 8 is_stmt 1 view .LVU3662
 11315              	.LVL1318:
2946:src/display.c **** 	      *bp++ = '\0';
 11316              		.loc 1 2946 8 view .LVU3663
 11317              	.LBB631:
 11318              	.LBB632:
3658:src/display.c **** 	if (State2.runmode) {
 11319              		.loc 1 3658 5 is_stmt 0 view .LVU3664
 11320 0aa8 B7F90030 		ldrsh	r3, [r7]
 11321              	.LBE632:
 11322              	.LBE631:
2946:src/display.c **** 	      *bp++ = '\0';
 11323              		.loc 1 2946 28 view .LVU3665
 11324 0aac 1035     		adds	r5, r5, #16
2947:src/display.c **** 	      set_status_top(buf);
 11325              		.loc 1 2947 14 view .LVU3666
 11326 0aae 0022     		movs	r2, #0
2946:src/display.c **** 	      *bp++ = '\0';
 11327              		.loc 1 2946 14 view .LVU3667
 11328 0ab0 8DF87850 		strb	r5, [sp, #120]
2947:src/display.c **** 	      set_status_top(buf);
 11329              		.loc 1 2947 8 is_stmt 1 view .LVU3668
 11330              	.LVL1319:
2947:src/display.c **** 	      set_status_top(buf);
 11331              		.loc 1 2947 14 is_stmt 0 view .LVU3669
 11332 0ab4 8DF87920 		strb	r2, [sp, #121]
2948:src/display.c **** 	      no_status_top = 1;
 11333              		.loc 1 2948 8 is_stmt 1 view .LVU3670
 11334              	.LVL1320:
 11335              	.LBB634:
 11336              	.LBI631:
3657:src/display.c **** 	if (no_status_top) return;
 11337              		.loc 1 3657 19 view .LVU3671
 11338              	.LBB633:
3658:src/display.c **** 	if (State2.runmode) {
 11339              		.loc 1 3658 2 view .LVU3672
3658:src/display.c **** 	if (State2.runmode) {
ARM GAS  /tmp/cc9o0abE.s 			page 327


 11340              		.loc 1 3658 5 is_stmt 0 view .LVU3673
 11341 0ab8 13B9     		cbnz	r3, .L987
 11342 0aba 1EA8     		add	r0, sp, #120
 11343              	.LVL1321:
3658:src/display.c **** 	if (State2.runmode) {
 11344              		.loc 1 3658 5 view .LVU3674
 11345 0abc FFF7FEFF 		bl	set_status_top.part.0
 11346              	.LVL1322:
 11347              	.L987:
3658:src/display.c **** 	if (State2.runmode) {
 11348              		.loc 1 3658 5 view .LVU3675
 11349              	.LBE633:
 11350              	.LBE634:
2949:src/display.c **** 	      //annuc = 1;
 11351              		.loc 1 2949 8 is_stmt 1 view .LVU3676
2949:src/display.c **** 	      //annuc = 1;
 11352              		.loc 1 2949 22 is_stmt 0 view .LVU3677
 11353 0ac0 0123     		movs	r3, #1
 11354 0ac2 3B80     		strh	r3, [r7]	@ movhi
2971:src/display.c ****       nostk:
 11355              		.loc 1 2971 2 is_stmt 1 view .LVU3678
 11356 0ac4 FFF7FEFF 		bl	show_stack
 11357              	.LVL1323:
2973:src/display.c **** 	if (!skip) {
 11358              		.loc 1 2973 2 view .LVU3679
 11359 0ac8 FFF7FEFF 		bl	show_flags
 11360              	.LVL1324:
2974:src/display.c **** 	  if (State2.runmode) {
 11361              		.loc 1 2974 2 view .LVU3680
 11362 0acc FFF7DABA 		b	.L904
 11363              	.LVL1325:
 11364              	.L1224:
2926:src/display.c **** 	      j *= 6;
 11365              		.loc 1 2926 8 view .LVU3681
2926:src/display.c **** 	      j *= 6;
 11366              		.loc 1 2926 12 is_stmt 0 view .LVU3682
 11367 0ad0 1EA8     		add	r0, sp, #120
 11368              	.LVL1326:
2926:src/display.c **** 	      j *= 6;
 11369              		.loc 1 2926 12 view .LVU3683
 11370 0ad2 0392     		str	r2, [sp, #12]
 11371 0ad4 FFF7FEFF 		bl	slen
 11372              	.LVL1327:
2927:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11373              		.loc 1 2927 8 is_stmt 1 view .LVU3684
2928:src/display.c **** 		{
 11374              		.loc 1 2928 8 view .LVU3685
2927:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
 11375              		.loc 1 2927 10 is_stmt 0 view .LVU3686
 11376 0ad8 039A     		ldr	r2, [sp, #12]
 11377 0ada 02EB4202 		add	r2, r2, r2, lsl #1
2928:src/display.c **** 		{
 11378              		.loc 1 2928 15 view .LVU3687
 11379 0ade A0EB4200 		sub	r0, r0, r2, lsl #1
 11380              	.LVL1328:
2928:src/display.c **** 		{
 11381              		.loc 1 2928 11 view .LVU3688
ARM GAS  /tmp/cc9o0abE.s 			page 328


 11382 0ae2 1328     		cmp	r0, #19
 11383 0ae4 13DD     		ble	.L984
2930:src/display.c **** 		  set_status_right(buf);
 11384              		.loc 1 2930 5 is_stmt 1 view .LVU3689
2930:src/display.c **** 		  set_status_right(buf);
 11385              		.loc 1 2930 20 is_stmt 0 view .LVU3690
 11386 0ae6 28AB     		add	r3, sp, #160
 11387 0ae8 1A18     		adds	r2, r3, r0
 11388 0aea 029B     		ldr	r3, [sp, #8]
 11389 0aec 02F8283C 		strb	r3, [r2, #-40]
2931:src/display.c **** 		}
 11390              		.loc 1 2931 5 is_stmt 1 view .LVU3691
 11391 0af0 1EA8     		add	r0, sp, #120
 11392 0af2 FFF7FEFF 		bl	set_status_right
 11393              	.LVL1329:
 11394 0af6 D3E7     		b	.L985
 11395              	.LVL1330:
 11396              	.L1225:
 11397              	.LBB635:
 11398              	.LBB636:
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11399              		.loc 1 3476 17 view .LVU3692
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11400              		.loc 1 3476 18 is_stmt 0 view .LVU3693
 11401 0af8 0135     		adds	r5, r5, #1
 11402              	.LVL1331:
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11403              		.loc 1 3476 12 is_stmt 1 view .LVU3694
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11404              		.loc 1 3476 2 is_stmt 0 view .LVU3695
 11405 0afa 062D     		cmp	r5, #6
 11406 0afc 1DD1     		bne	.L978
 11407 0afe DDE90468 		ldrd	r6, r8, [sp, #16]
 11408              	.LVL1332:
 11409              	.L977:
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11410              		.loc 1 3476 2 view .LVU3696
 11411              	.LBE636:
 11412              	.LBE635:
2971:src/display.c ****       nostk:
 11413              		.loc 1 2971 2 is_stmt 1 view .LVU3697
 11414 0b02 FFF7FEFF 		bl	show_stack
 11415              	.LVL1333:
2973:src/display.c **** 	if (!skip) {
 11416              		.loc 1 2973 2 view .LVU3698
 11417 0b06 FFF7FEFF 		bl	show_flags
 11418              	.LVL1334:
2974:src/display.c **** 	  if (State2.runmode) {
 11419              		.loc 1 2974 2 view .LVU3699
 11420 0b0a FFF7BBBA 		b	.L904
 11421              	.LVL1335:
 11422              	.L984:
2934:src/display.c **** 	      }
 11423              		.loc 1 2934 3 view .LVU3700
 11424 0b0e 1EA8     		add	r0, sp, #120
 11425 0b10 FFF7FEFF 		bl	set_status
 11426              	.LVL1336:
ARM GAS  /tmp/cc9o0abE.s 			page 329


 11427 0b14 C4E7     		b	.L985
 11428              	.LVL1337:
 11429              	.L1221:
2921:src/display.c **** 	  } else if (State2.alphas) {
 11430              		.loc 1 2921 6 view .LVU3701
2921:src/display.c **** 	  } else if (State2.alphas) {
 11431              		.loc 1 2921 48 is_stmt 0 view .LVU3702
 11432 0b16 581E     		subs	r0, r3, #1
 11433 0b18 0492     		str	r2, [sp, #16]
 11434 0b1a FFF7FEFF 		bl	get_reg_n
 11435              	.LVL1338:
 11436              	.LBB644:
 11437              	.LBI635:
3462:src/display.c **** 	int glen = *graphic++;
 11438              		.loc 1 3462 19 is_stmt 1 view .LVU3703
 11439              	.LBB643:
3463:src/display.c **** 	int i, j;
 11440              		.loc 1 3463 2 view .LVU3704
3463:src/display.c **** 	int i, j;
 11441              		.loc 1 3463 6 is_stmt 0 view .LVU3705
 11442 0b1e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 11443              	.LVL1339:
3464:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11444              		.loc 1 3464 2 is_stmt 1 view .LVU3706
3473:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11445              		.loc 1 3473 2 view .LVU3707
3473:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11446              		.loc 1 3473 5 is_stmt 0 view .LVU3708
 11447 0b20 002B     		cmp	r3, #0
 11448 0b22 EED0     		beq	.L977
3474:src/display.c **** 
 11449              		.loc 1 3474 2 is_stmt 1 view .LVU3709
 11450              	.LVL1340:
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11451              		.loc 1 3476 2 view .LVU3710
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11452              		.loc 1 3476 12 view .LVU3711
 11453 0b24 421C     		adds	r2, r0, #1
 11454 0b26 0392     		str	r2, [sp, #12]
 11455 0b28 4A2B     		cmp	r3, #74
 11456 0b2a D4BF     		ite	le
 11457 0b2c D218     		addle	r2, r2, r3
 11458 0b2e 4A32     		addgt	r2, r2, #74
 11459 0b30 0292     		str	r2, [sp, #8]
3476:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11460              		.loc 1 3476 8 is_stmt 0 view .LVU3712
 11461 0b32 049A     		ldr	r2, [sp, #16]
 11462 0b34 CDE90468 		strd	r6, r8, [sp, #16]
 11463 0b38 1546     		mov	r5, r2
 11464              	.LVL1341:
 11465              	.L978:
3477:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11466              		.loc 1 3477 14 is_stmt 1 view .LVU3713
 11467 0b3a 0123     		movs	r3, #1
 11468 0b3c DDF80C80 		ldr	r8, [sp, #12]
 11469 0b40 03FA05FA 		lsl	r10, r3, r5
 11470 0b44 05F19406 		add	r6, r5, #148
ARM GAS  /tmp/cc9o0abE.s 			page 330


 11471 0b48 06E0     		b	.L981
 11472              	.LVL1342:
 11473              	.L1226:
 11474              	.LBB637:
 11475              	.LBB638:
 348:src/display.c ****   else	clr_dot(n);
 11476              		.loc 1 348 11 is_stmt 0 view .LVU3714
 11477 0b4a FFF7FEFF 		bl	set_dot
 11478              	.LVL1343:
 11479              	.L980:
 348:src/display.c ****   else	clr_dot(n);
 11480              		.loc 1 348 11 view .LVU3715
 11481              	.LBE638:
 11482              	.LBE637:
3477:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11483              		.loc 1 3477 23 is_stmt 1 view .LVU3716
3477:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11484              		.loc 1 3477 14 view .LVU3717
3477:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11485              		.loc 1 3477 4 is_stmt 0 view .LVU3718
 11486 0b4e 029B     		ldr	r3, [sp, #8]
 11487 0b50 4345     		cmp	r3, r8
 11488 0b52 06F10606 		add	r6, r6, #6
 11489 0b56 CFD0     		beq	.L1225
 11490              	.LVL1344:
 11491              	.L981:
3482:src/display.c **** #endif
 11492              		.loc 1 3482 6 is_stmt 1 view .LVU3719
 11493              	.LBB641:
 11494              	.LBI637:
 347:src/display.c ****   if (on)	set_dot(n);
 11495              		.loc 1 347 6 view .LVU3720
 11496              	.LBB639:
 348:src/display.c ****   else	clr_dot(n);
 11497              		.loc 1 348 3 view .LVU3721
 348:src/display.c ****   else	clr_dot(n);
 11498              		.loc 1 348 11 view .LVU3722
 349:src/display.c **** }
 11499              		.loc 1 349 8 view .LVU3723
 11500              	.LBE639:
 11501              	.LBE641:
3482:src/display.c **** #endif
 11502              		.loc 1 3482 37 is_stmt 0 view .LVU3724
 11503 0b58 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 11504              	.LVL1345:
 11505              	.LBB642:
 11506              	.LBB640:
 348:src/display.c ****   else	clr_dot(n);
 11507              		.loc 1 348 6 view .LVU3725
 11508 0b5c 13EA0A0F 		tst	r3, r10
 348:src/display.c ****   else	clr_dot(n);
 11509              		.loc 1 348 11 view .LVU3726
 11510 0b60 3046     		mov	r0, r6
 348:src/display.c ****   else	clr_dot(n);
 11511              		.loc 1 348 6 view .LVU3727
 11512 0b62 F2D1     		bne	.L1226
 349:src/display.c **** }
ARM GAS  /tmp/cc9o0abE.s 			page 331


 11513              		.loc 1 349 8 view .LVU3728
 11514 0b64 FFF7FEFF 		bl	clr_dot
 11515              	.LVL1346:
 11516 0b68 F1E7     		b	.L980
 11517              	.LVL1347:
 11518              	.L962:
 349:src/display.c **** }
 11519              		.loc 1 349 8 view .LVU3729
 11520              	.LBE640:
 11521              	.LBE642:
 11522              	.LBE643:
 11523              	.LBE644:
 11524              	.LBB645:
 11525              	.LBB583:
2569:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 11526              		.loc 1 2569 8 is_stmt 1 view .LVU3730
2569:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 11527              		.loc 1 2569 37 is_stmt 0 view .LVU3731
 11528 0b6a 02EB8202 		add	r2, r2, r2, lsl #2
 11529              	.LVL1348:
2569:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 11530              		.loc 1 2569 8 view .LVU3732
 11531 0b6e 09EB0200 		add	r0, r9, r2
 11532 0b72 4146     		mov	r1, r8
 11533 0b74 FFF7FEFF 		bl	set_exp_digits_string
 11534              	.LVL1349:
2569:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 11535              		.loc 1 2569 8 view .LVU3733
 11536              	.LBE583:
 11537              	.LBE645:
2971:src/display.c ****       nostk:
 11538              		.loc 1 2971 2 is_stmt 1 view .LVU3734
 11539 0b78 85E6     		b	.L1186
 11540              	.LVL1350:
 11541              	.L1217:
 11542              	.LBB646:
 11543              	.LBB620:
 11544              	.LBB612:
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11545              		.loc 1 2484 6 view .LVU3735
2484:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11546              		.loc 1 2484 11 is_stmt 0 view .LVU3736
 11547 0b7a 0A25     		movs	r5, #10
 11548 0b7c 05FB03F3 		mul	r3, r5, r3
 11549              	.LVL1351:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11550              		.loc 1 2485 6 is_stmt 1 view .LVU3737
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11551              		.loc 1 2485 28 is_stmt 0 view .LVU3738
 11552 0b80 462B     		cmp	r3, #70
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11553              		.loc 1 2486 10 view .LVU3739
 11554 0b82 6649     		ldr	r1, .L1236+12
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11555              		.loc 1 2485 28 view .LVU3740
 11556 0b84 0093     		str	r3, [sp]
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
ARM GAS  /tmp/cc9o0abE.s 			page 332


 11557              		.loc 1 2486 10 view .LVU3741
 11558 0b86 15A8     		add	r0, sp, #84
 11559              	.LVL1352:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11560              		.loc 1 2485 28 view .LVU3742
 11561 0b88 9946     		mov	r9, r3
 11562 0b8a A8BF     		it	ge
 11563 0b8c 4FF04609 		movge	r9, #70
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11564              		.loc 1 2486 10 view .LVU3743
 11565 0b90 FFF7FEFF 		bl	scopy
 11566              	.LVL1353:
2487:src/display.c **** 	    *p++ = '-';
 11567              		.loc 1 2487 10 view .LVU3744
 11568 0b94 009B     		ldr	r3, [sp]
 11569 0b96 0222     		movs	r2, #2
 11570 0b98 1946     		mov	r1, r3
 11571 0b9a FFF7FEFF 		bl	num_arg_0
 11572              	.LVL1354:
2485:src/display.c **** 	    p = scopy(buf, "FL ");
 11573              		.loc 1 2485 10 view .LVU3745
 11574 0b9e 09F11D09 		add	r9, r9, #29
 11575              	.LVL1355:
2486:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11576              		.loc 1 2486 6 is_stmt 1 view .LVU3746
2487:src/display.c **** 	    *p++ = '-';
 11577              		.loc 1 2487 6 view .LVU3747
2488:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11578              		.loc 1 2488 6 view .LVU3748
2488:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11579              		.loc 1 2488 11 is_stmt 0 view .LVU3749
 11580 0ba2 2D22     		movs	r2, #45
 11581 0ba4 00F8012B 		strb	r2, [r0], #1
 11582              	.LVL1356:
2489:src/display.c **** 	    *p = '\0';
 11583              		.loc 1 2489 6 is_stmt 1 view .LVU3750
2489:src/display.c **** 	    *p = '\0';
 11584              		.loc 1 2489 10 is_stmt 0 view .LVU3751
 11585 0ba8 4946     		mov	r1, r9
 11586 0baa 0222     		movs	r2, #2
 11587 0bac FFF7FEFF 		bl	num_arg_0
 11588              	.LVL1357:
2489:src/display.c **** 	    *p = '\0';
 11589              		.loc 1 2489 10 view .LVU3752
 11590 0bb0 0146     		mov	r1, r0
 11591              	.LVL1358:
2490:src/display.c **** 	    set_status(buf);
 11592              		.loc 1 2490 6 is_stmt 1 view .LVU3753
2490:src/display.c **** 	    set_status(buf);
 11593              		.loc 1 2490 9 is_stmt 0 view .LVU3754
 11594 0bb2 4FF0000A 		mov	r10, #0
2491:src/display.c **** 	  }
 11595              		.loc 1 2491 6 view .LVU3755
 11596 0bb6 15A8     		add	r0, sp, #84
 11597              	.LVL1359:
2490:src/display.c **** 	    set_status(buf);
 11598              		.loc 1 2490 9 view .LVU3756
ARM GAS  /tmp/cc9o0abE.s 			page 333


 11599 0bb8 81F800A0 		strb	r10, [r1]
2491:src/display.c **** 	  }
 11600              		.loc 1 2491 6 is_stmt 1 view .LVU3757
 11601 0bbc FFF7FEFF 		bl	set_status
 11602              	.LVL1360:
2491:src/display.c **** 	  }
 11603              		.loc 1 2491 6 is_stmt 0 view .LVU3758
 11604 0bc0 009B     		ldr	r3, [sp]
 11605 0bc2 7CE6     		b	.L949
 11606              	.LVL1361:
 11607              	.L1216:
2491:src/display.c **** 	  }
 11608              		.loc 1 2491 6 view .LVU3759
 11609              	.LBE612:
2463:src/display.c **** 	  if (SizeStatRegs)
 11610              		.loc 1 2463 4 is_stmt 1 view .LVU3760
2463:src/display.c **** 	  if (SizeStatRegs)
 11611              		.loc 1 2463 8 is_stmt 0 view .LVU3761
 11612 0bc4 0DF15408 		add	r8, sp, #84
 11613              	.LVL1362:
2463:src/display.c **** 	  if (SizeStatRegs)
 11614              		.loc 1 2463 8 view .LVU3762
 11615 0bc8 5549     		ldr	r1, .L1236+16
 11616 0bca 4046     		mov	r0, r8
 11617 0bcc FFF7FEFF 		bl	scopy
 11618              	.LVL1363:
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11619              		.loc 1 2464 8 view .LVU3763
 11620 0bd0 544A     		ldr	r2, .L1236+20
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11621              		.loc 1 2464 7 view .LVU3764
 11622 0bd2 1268     		ldr	r2, [r2]
2463:src/display.c **** 	  if (SizeStatRegs)
 11623              		.loc 1 2463 8 view .LVU3765
 11624 0bd4 0346     		mov	r3, r0
 11625              	.LVL1364:
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11626              		.loc 1 2464 4 is_stmt 1 view .LVU3766
2464:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11627              		.loc 1 2464 7 is_stmt 0 view .LVU3767
 11628 0bd6 002A     		cmp	r2, #0
 11629 0bd8 5BD1     		bne	.L1227
 11630              	.L946:
2466:src/display.c **** 	  set_status(buf);
 11631              		.loc 1 2466 4 is_stmt 1 view .LVU3768
2466:src/display.c **** 	  set_status(buf);
 11632              		.loc 1 2466 7 is_stmt 0 view .LVU3769
 11633 0bda 0022     		movs	r2, #0
 11634 0bdc 1A70     		strb	r2, [r3]
2467:src/display.c **** 
 11635              		.loc 1 2467 4 is_stmt 1 view .LVU3770
 11636 0bde 4046     		mov	r0, r8
 11637              	.LVL1365:
2467:src/display.c **** 
 11638              		.loc 1 2467 4 is_stmt 0 view .LVU3771
 11639 0be0 FFF7FEFF 		bl	set_status
 11640              	.LVL1366:
ARM GAS  /tmp/cc9o0abE.s 			page 334


2470:src/display.c **** 	  if (LocalRegs < 0) {
 11641              		.loc 1 2470 4 is_stmt 1 view .LVU3772
2470:src/display.c **** 	  if (LocalRegs < 0) {
 11642              		.loc 1 2470 8 is_stmt 0 view .LVU3773
 11643 0be4 FFF7FEFF 		bl	global_regs
 11644              	.LVL1367:
 11645 0be8 0146     		mov	r1, r0
 11646 0bea 4046     		mov	r0, r8
 11647 0bec FFF7FEFF 		bl	num_arg
 11648              	.LVL1368:
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11649              		.loc 1 2471 8 view .LVU3774
 11650 0bf0 DBF80020 		ldr	r2, [fp]
 11651 0bf4 B2F8DE2F 		ldrh	r2, [r2, #4062]
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11652              		.loc 1 2471 7 view .LVU3775
 11653 0bf8 1104     		lsls	r1, r2, #16
2470:src/display.c **** 	  if (LocalRegs < 0) {
 11654              		.loc 1 2470 8 view .LVU3776
 11655 0bfa 0346     		mov	r3, r0
 11656              	.LVL1369:
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11657              		.loc 1 2471 4 is_stmt 1 view .LVU3777
2471:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11658              		.loc 1 2471 7 is_stmt 0 view .LVU3778
 11659 0bfc 3DD4     		bmi	.L1228
 11660              	.L947:
2475:src/display.c **** 	  set_digits_string(buf, 0);
 11661              		.loc 1 2475 4 is_stmt 1 view .LVU3779
2475:src/display.c **** 	  set_digits_string(buf, 0);
 11662              		.loc 1 2475 7 is_stmt 0 view .LVU3780
 11663 0bfe 0021     		movs	r1, #0
2476:src/display.c **** 	} else {
 11664              		.loc 1 2476 4 view .LVU3781
 11665 0c00 4046     		mov	r0, r8
 11666              	.LVL1370:
2475:src/display.c **** 	  set_digits_string(buf, 0);
 11667              		.loc 1 2475 7 view .LVU3782
 11668 0c02 1970     		strb	r1, [r3]
 11669              	.LVL1371:
2476:src/display.c **** 	} else {
 11670              		.loc 1 2476 4 is_stmt 1 view .LVU3783
 11671 0c04 FFF7FEFF 		bl	set_digits_string
 11672              	.LVL1372:
2476:src/display.c **** 	} else {
 11673              		.loc 1 2476 4 is_stmt 0 view .LVU3784
 11674 0c08 D9E6     		b	.L944
 11675              	.LVL1373:
 11676              	.L974:
2476:src/display.c **** 	} else {
 11677              		.loc 1 2476 4 view .LVU3785
 11678              	.LBE620:
 11679              	.LBE646:
2961:src/display.c **** 	  if (i > 0)
 11680              		.loc 1 2961 4 is_stmt 1 view .LVU3786
2961:src/display.c **** 	  if (i > 0)
 11681              		.loc 1 2961 8 is_stmt 0 view .LVU3787
ARM GAS  /tmp/cc9o0abE.s 			page 335


 11682 0c0a DBF80030 		ldr	r3, [fp]
 11683 0c0e B3F8E00F 		ldrh	r0, [r3, #4064]
 11684              	.LVL1374:
2962:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11685              		.loc 1 2962 4 is_stmt 1 view .LVU3788
2962:src/display.c **** 	    set_status(prt(getprog(i), buf));
 11686              		.loc 1 2962 7 is_stmt 0 view .LVU3789
 11687 0c12 0028     		cmp	r0, #0
 11688 0c14 00F0BF80 		beq	.L988
2963:src/display.c **** 	  else
 11689              		.loc 1 2963 6 is_stmt 1 view .LVU3790
 11690 0c18 FFF7FEFF 		bl	getprog
 11691              	.LVL1375:
2963:src/display.c **** 	  else
 11692              		.loc 1 2963 6 is_stmt 0 view .LVU3791
 11693 0c1c 1EA9     		add	r1, sp, #120
 11694              	.LVL1376:
2963:src/display.c **** 	  else
 11695              		.loc 1 2963 6 view .LVU3792
 11696 0c1e FFF7FEFF 		bl	prt
 11697              	.LVL1377:
2963:src/display.c **** 	  else
 11698              		.loc 1 2963 6 view .LVU3793
 11699 0c22 FFF7FEFF 		bl	set_status
 11700              	.LVL1378:
 11701              	.L989:
2966:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
 11702              		.loc 1 2966 4 is_stmt 1 view .LVU3794
 11703 0c26 8920     		movs	r0, #137
 11704 0c28 FFF7FEFF 		bl	set_dot
 11705              	.LVL1379:
2968:src/display.c **** 	  goto nostk;
 11706              		.loc 1 2968 6 view .LVU3795
2969:src/display.c **** 	}
 11707              		.loc 1 2969 4 view .LVU3796
2973:src/display.c **** 	if (!skip) {
 11708              		.loc 1 2973 2 view .LVU3797
2968:src/display.c **** 	  goto nostk;
 11709              		.loc 1 2968 12 is_stmt 0 view .LVU3798
 11710 0c2c 0126     		movs	r6, #1
2973:src/display.c **** 	if (!skip) {
 11711              		.loc 1 2973 2 view .LVU3799
 11712 0c2e FFF7FEFF 		bl	show_flags
 11713              	.LVL1380:
 11714              	.L1183:
2974:src/display.c **** 	  if (State2.runmode) {
 11715              		.loc 1 2974 2 is_stmt 1 view .LVU3800
 11716 0c32 3D4B     		ldr	r3, .L1236+24
 11717 0c34 DFF80481 		ldr	r8, .L1236+44
 11718 0c38 0093     		str	r3, [sp]
 11719 0c3a FFF723BA 		b	.L904
 11720              	.LVL1381:
 11721              	.L1209:
2908:src/display.c **** 	  skip = 1;
 11722              		.loc 1 2908 4 view .LVU3801
 11723              	.LBB647:
 11724              	.LBI647:
ARM GAS  /tmp/cc9o0abE.s 			page 336


2579:src/display.c **** 	char buf[16], *bp;
 11725              		.loc 1 2579 19 view .LVU3802
 11726              	.LBB648:
2580:src/display.c **** 	int n = State2.digval;
 11727              		.loc 1 2580 2 view .LVU3803
2581:src/display.c **** 	
 11728              		.loc 1 2581 2 view .LVU3804
2581:src/display.c **** 	
 11729              		.loc 1 2581 6 is_stmt 0 view .LVU3805
 11730 0c3e B4F808A0 		ldrh	r10, [r4, #8]
 11731              	.LVL1382:
2588:src/display.c **** 	  n;
 11732              		.loc 1 2588 2 is_stmt 1 view .LVU3806
2588:src/display.c **** 	  n;
 11733              		.loc 1 2588 54 is_stmt 0 view .LVU3807
 11734 0c42 C807     		lsls	r0, r1, #31
 11735 0c44 4CBF     		ite	mi
 11736 0c46 0AF17009 		addmi	r9, r10, #112
2581:src/display.c **** 	
 11737              		.loc 1 2581 6 view .LVU3808
 11738 0c4a D146     		movpl	r9, r10
 11739              	.LVL1383:
2592:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11740              		.loc 1 2592 2 is_stmt 1 view .LVU3809
2592:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 11741              		.loc 1 2592 5 is_stmt 0 view .LVU3810
 11742 0c4c 11F00401 		ands	r1, r1, #4
 11743 0c50 2DD0     		beq	.L965
2593:src/display.c **** 	}
 11744              		.loc 1 2593 4 is_stmt 1 view .LVU3811
2593:src/display.c **** 	}
 11745              		.loc 1 2593 15 is_stmt 0 view .LVU3812
 11746 0c52 15A9     		add	r1, sp, #84
 11747 0c54 4846     		mov	r0, r9
 11748 0c56 FFF7FEFF 		bl	alpha_rcl_s
 11749              	.LVL1384:
2593:src/display.c **** 	}
 11750              		.loc 1 2593 4 view .LVU3813
 11751 0c5a FFF7FEFF 		bl	set_status
 11752              	.LVL1385:
 11753              	.L966:
2615:src/display.c ****       }
 11754              		.loc 1 2615 2 is_stmt 1 view .LVU3814
 11755 0c5e 4846     		mov	r0, r9
 11756 0c60 0021     		movs	r1, #0
 11757 0c62 FFF7FEFF 		bl	format_reg
 11758              	.LVL1386:
2615:src/display.c ****       }
 11759              		.loc 1 2615 2 is_stmt 0 view .LVU3815
 11760              	.LBE648:
 11761              	.LBE647:
2909:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 11762              		.loc 1 2909 4 is_stmt 1 view .LVU3816
2910:src/display.c **** 	    annunciators();
 11763              		.loc 1 2910 4 view .LVU3817
2910:src/display.c **** 	    annunciators();
 11764              		.loc 1 2910 7 is_stmt 0 view .LVU3818
ARM GAS  /tmp/cc9o0abE.s 			page 337


 11765 0c66 FDB9     		cbnz	r5, .L972
2910:src/display.c **** 	    annunciators();
 11766              		.loc 1 2910 25 discriminator 1 view .LVU3819
 11767 0c68 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 11768 0c6a 012B     		cmp	r3, #1
 11769 0c6c 16D0     		beq	.L1229
 11770              	.L973:
2971:src/display.c ****       nostk:
 11771              		.loc 1 2971 2 is_stmt 1 view .LVU3820
 11772 0c6e FFF7FEFF 		bl	show_stack
 11773              	.LVL1387:
2973:src/display.c **** 	if (!skip) {
 11774              		.loc 1 2973 2 view .LVU3821
2681:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11775              		.loc 1 2681 6 is_stmt 0 view .LVU3822
 11776 0c72 0026     		movs	r6, #0
2973:src/display.c **** 	if (!skip) {
 11777              		.loc 1 2973 2 view .LVU3823
 11778 0c74 FFF7FEFF 		bl	show_flags
 11779              	.LVL1388:
2974:src/display.c **** 	  if (State2.runmode) {
 11780              		.loc 1 2974 2 is_stmt 1 view .LVU3824
 11781 0c78 A7E5     		b	.L937
 11782              	.LVL1389:
 11783              	.L1228:
 11784              	.LBB651:
 11785              	.LBB621:
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 11786              		.loc 1 2472 6 view .LVU3825
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 11787              		.loc 1 2472 10 is_stmt 0 view .LVU3826
 11788 0c7a 2C49     		ldr	r1, .L1236+28
 11789 0c7c FFF7FEFF 		bl	scopy
 11790              	.LVL1390:
2472:src/display.c **** 	    p = num_arg(p, local_regs());
 11791              		.loc 1 2472 10 view .LVU3827
 11792 0c80 0546     		mov	r5, r0
 11793              	.LVL1391:
2473:src/display.c **** 	  }
 11794              		.loc 1 2473 6 is_stmt 1 view .LVU3828
2473:src/display.c **** 	  }
 11795              		.loc 1 2473 21 is_stmt 0 view .LVU3829
 11796 0c82 FFF7FEFF 		bl	local_regs
 11797              	.LVL1392:
2473:src/display.c **** 	  }
 11798              		.loc 1 2473 21 view .LVU3830
 11799 0c86 0146     		mov	r1, r0
2473:src/display.c **** 	  }
 11800              		.loc 1 2473 10 view .LVU3831
 11801 0c88 2846     		mov	r0, r5
 11802 0c8a FFF7FEFF 		bl	num_arg
 11803              	.LVL1393:
 11804 0c8e 0346     		mov	r3, r0
 11805              	.LVL1394:
2473:src/display.c **** 	  }
 11806              		.loc 1 2473 10 view .LVU3832
 11807 0c90 B5E7     		b	.L947
ARM GAS  /tmp/cc9o0abE.s 			page 338


 11808              	.L1227:
2465:src/display.c **** 	  *p = '\0';
 11809              		.loc 1 2465 6 is_stmt 1 view .LVU3833
2465:src/display.c **** 	  *p = '\0';
 11810              		.loc 1 2465 10 is_stmt 0 view .LVU3834
 11811 0c92 2749     		ldr	r1, .L1236+32
 11812 0c94 FFF7FEFF 		bl	scopy
 11813              	.LVL1395:
2465:src/display.c **** 	  *p = '\0';
 11814              		.loc 1 2465 10 view .LVU3835
 11815 0c98 0346     		mov	r3, r0
 11816              	.LVL1396:
2465:src/display.c **** 	  *p = '\0';
 11817              		.loc 1 2465 10 view .LVU3836
 11818 0c9a 9EE7     		b	.L946
 11819              	.LVL1397:
 11820              	.L1229:
2465:src/display.c **** 	  *p = '\0';
 11821              		.loc 1 2465 10 view .LVU3837
 11822              	.LBE621:
 11823              	.LBE651:
2910:src/display.c **** 	    annunciators();
 11824              		.loc 1 2910 56 discriminator 2 view .LVU3838
 11825 0c9c DBF80030 		ldr	r3, [fp]
 11826 0ca0 93F8E83F 		ldrb	r3, [r3, #4072]	@ zero_extendqisi2
 11827 0ca4 DA07     		lsls	r2, r3, #31
 11828 0ca6 E2D5     		bpl	.L973
 11829              	.L972:
2911:src/display.c **** 	  }
 11830              		.loc 1 2911 6 is_stmt 1 view .LVU3839
 11831 0ca8 FFF7FEFF 		bl	annunciators
 11832              	.LVL1398:
 11833 0cac EBE5     		b	.L1186
 11834              	.LVL1399:
 11835              	.L965:
 11836              	.LBB652:
 11837              	.LBB649:
2596:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11838              		.loc 1 2596 4 view .LVU3840
 11839 0cae 0DF15408 		add	r8, sp, #84
 11840 0cb2 1022     		movs	r2, #16
 11841 0cb4 4046     		mov	r0, r8
 11842 0cb6 FFF7FEFF 		bl	xset
 11843              	.LVL1400:
2600:src/display.c **** #endif
 11844              		.loc 1 2600 4 view .LVU3841
2600:src/display.c **** #endif
 11845              		.loc 1 2600 9 is_stmt 0 view .LVU3842
 11846 0cba 1E49     		ldr	r1, .L1236+36
 11847 0cbc 4046     		mov	r0, r8
 11848 0cbe FFF7FEFF 		bl	scopy_spc
 11849              	.LVL1401:
2602:src/display.c **** 	    *bp++ = '.';
 11850              		.loc 1 2602 8 view .LVU3843
 11851 0cc2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11852              	.LVL1402:
2602:src/display.c **** 	    *bp++ = '.';
ARM GAS  /tmp/cc9o0abE.s 			page 339


 11853              		.loc 1 2602 4 is_stmt 1 view .LVU3844
2602:src/display.c **** 	    *bp++ = '.';
 11854              		.loc 1 2602 7 is_stmt 0 view .LVU3845
 11855 0cc4 D907     		lsls	r1, r3, #31
 11856 0cc6 6FD5     		bpl	.L967
2603:src/display.c **** 	    if (n >= 100) {
 11857              		.loc 1 2603 6 is_stmt 1 view .LVU3846
 11858              	.LVL1403:
2603:src/display.c **** 	    if (n >= 100) {
 11859              		.loc 1 2603 12 is_stmt 0 view .LVU3847
 11860 0cc8 2E23     		movs	r3, #46
2604:src/display.c **** 	      *bp++ = '1';
 11861              		.loc 1 2604 9 view .LVU3848
 11862 0cca BAF1630F 		cmp	r10, #99
2603:src/display.c **** 	    if (n >= 100) {
 11863              		.loc 1 2603 12 view .LVU3849
 11864 0cce 0370     		strb	r3, [r0]
2604:src/display.c **** 	      *bp++ = '1';
 11865              		.loc 1 2604 6 is_stmt 1 view .LVU3850
2604:src/display.c **** 	      *bp++ = '1';
 11866              		.loc 1 2604 9 is_stmt 0 view .LVU3851
 11867 0cd0 65DC     		bgt	.L968
2603:src/display.c **** 	    if (n >= 100) {
 11868              		.loc 1 2603 9 view .LVU3852
 11869 0cd2 0130     		adds	r0, r0, #1
 11870              	.LVL1404:
 11871              	.L969:
2610:src/display.c **** 	  else
 11872              		.loc 1 2610 6 is_stmt 1 view .LVU3853
2610:src/display.c **** 	  else
 11873              		.loc 1 2610 11 is_stmt 0 view .LVU3854
 11874 0cd4 5146     		mov	r1, r10
 11875 0cd6 0222     		movs	r2, #2
 11876 0cd8 FFF7FEFF 		bl	num_arg_0
 11877              	.LVL1405:
 11878              	.L971:
2613:src/display.c **** 	}
 11879              		.loc 1 2613 4 is_stmt 1 view .LVU3855
 11880 0cdc 4046     		mov	r0, r8
 11881 0cde FFF7FEFF 		bl	set_status
 11882              	.LVL1406:
 11883 0ce2 BCE7     		b	.L966
 11884              	.LVL1407:
 11885              	.L1213:
2613:src/display.c **** 	}
 11886              		.loc 1 2613 4 is_stmt 0 view .LVU3856
 11887              	.LBE649:
 11888              	.LBE652:
 11889              	.LBB653:
 11890              	.LBB568:
2870:src/display.c **** 	      copyreg(&z, x);
 11891              		.loc 1 2870 8 is_stmt 1 view .LVU3857
2870:src/display.c **** 	      copyreg(&z, x);
 11892              		.loc 1 2870 27 is_stmt 0 view .LVU3858
 11893 0ce4 144B     		ldr	r3, .L1236+40
 11894 0ce6 1E68     		ldr	r6, [r3]
 11895              	.LVL1408:
ARM GAS  /tmp/cc9o0abE.s 			page 340


2871:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 11896              		.loc 1 2871 8 is_stmt 1 view .LVU3859
 11897 0ce8 15A8     		add	r0, sp, #84
 11898 0cea 3146     		mov	r1, r6
 11899 0cec FFF7FEFF 		bl	copyreg
 11900              	.LVL1409:
2872:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 11901              		.loc 1 2872 8 view .LVU3860
 11902 0cf0 E8B2     		uxtb	r0, r5
 11903 0cf2 FFF7FEFF 		bl	sigma_val
 11904              	.LVL1410:
2873:src/display.c **** 	      copyreg(x, &z);
 11905              		.loc 1 2873 8 view .LVU3861
 11906 0cf6 FFF7FEFF 		bl	is_dblmode
 11907              	.LVL1411:
 11908 0cfa 0021     		movs	r1, #0
 11909 0cfc 0246     		mov	r2, r0
 11910 0cfe 3046     		mov	r0, r6
 11911 0d00 FFF7FEFF 		bl	set_x
 11912              	.LVL1412:
2874:src/display.c **** 	      skip = 1;
 11913              		.loc 1 2874 8 view .LVU3862
 11914 0d04 15A9     		add	r1, sp, #84
 11915 0d06 3046     		mov	r0, r6
 11916 0d08 FFF7FEFF 		bl	copyreg
 11917              	.LVL1413:
2875:src/display.c **** 	    }
 11918              		.loc 1 2875 8 view .LVU3863
2875:src/display.c **** 	    }
 11919              		.loc 1 2875 13 is_stmt 0 view .LVU3864
 11920 0d0c 0125     		movs	r5, #1
 11921              	.LVL1414:
2875:src/display.c **** 	    }
 11922              		.loc 1 2875 13 view .LVU3865
 11923 0d0e 49E5     		b	.L929
 11924              	.L1237:
 11925              		.align	2
 11926              	.L1236:
 11927 0d10 2C000000 		.word	.LC31
 11928 0d14 34000000 		.word	.LC32
 11929 0d18 78000000 		.word	.LC39
 11930 0d1c 58000000 		.word	.LC36
 11931 0d20 3C000000 		.word	.LC33
 11932 0d24 00000000 		.word	SizeStatRegs
 11933 0d28 00000000 		.word	DispPlot
 11934 0d2c 4C000000 		.word	.LC35
 11935 0d30 44000000 		.word	.LC34
 11936 0d34 80000000 		.word	.LC40
 11937 0d38 00000000 		.word	StackBase
 11938 0d3c 00000000 		.word	DispMsg
 11939              	.LVL1415:
 11940              	.L1212:
2875:src/display.c **** 	    }
 11941              		.loc 1 2875 13 view .LVU3866
 11942              	.LBE568:
 11943              	.LBB569:
2850:src/display.c **** 	      decimal64 z;
ARM GAS  /tmp/cc9o0abE.s 			page 341


 11944              		.loc 1 2850 8 is_stmt 1 view .LVU3867
2851:src/display.c **** 
 11945              		.loc 1 2851 8 view .LVU3868
2853:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11946              		.loc 1 2853 8 view .LVU3869
 11947 0d40 0CA8     		add	r0, sp, #48
 11948 0d42 FFF7FEFF 		bl	getX
 11949              	.LVL1416:
2854:src/display.c **** 		const unsigned int f = argKIND(op);
 11950              		.loc 1 2854 8 view .LVU3870
2854:src/display.c **** 		const unsigned int f = argKIND(op);
 11951              		.loc 1 2854 11 is_stmt 0 view .LVU3871
 11952 0d46 C5F30723 		ubfx	r3, r5, #8, #8
 11953 0d4a 022B     		cmp	r3, #2
 11954 0d4c 39D1     		bne	.L931
 11955              	.LBB570:
2855:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11956              		.loc 1 2855 3 is_stmt 1 view .LVU3872
2855:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11957              		.loc 1 2855 22 is_stmt 0 view .LVU3873
 11958 0d4e EDB2     		uxtb	r5, r5
 11959              	.LVL1417:
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11960              		.loc 1 2856 3 is_stmt 1 view .LVU3874
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11961              		.loc 1 2856 6 is_stmt 0 view .LVU3875
 11962 0d50 9B2D     		cmp	r5, #155
 11963              	.LBB571:
2859:src/display.c **** 		}
 11964              		.loc 1 2859 5 view .LVU3876
 11965 0d52 0DF15408 		add	r8, sp, #84
 11966              	.LBE571:
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11967              		.loc 1 2856 6 view .LVU3877
 11968 0d56 30D8     		bhi	.L932
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11969              		.loc 1 2856 28 discriminator 1 view .LVU3878
 11970 0d58 1823     		movs	r3, #24
 11971 0d5a 1E4A     		ldr	r2, .L1238
 11972 0d5c 03FB05F3 		mul	r3, r3, r5
 11973 0d60 D358     		ldr	r3, [r2, r3]
2856:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11974              		.loc 1 2856 23 discriminator 1 view .LVU3879
 11975 0d62 53B3     		cbz	r3, .L932
 11976              	.LBB572:
2857:src/display.c **** 		  update_speed(0);
 11977              		.loc 1 2857 5 is_stmt 1 view .LVU3880
 11978              	.LVL1418:
2858:src/display.c **** 		  fp(&r, &x);
 11979              		.loc 1 2858 20 view .LVU3881
2859:src/display.c **** 		}
 11980              		.loc 1 2859 5 view .LVU3882
 11981 0d64 0CA9     		add	r1, sp, #48
 11982 0d66 4046     		mov	r0, r8
 11983 0d68 9847     		blx	r3
 11984              	.LVL1419:
 11985              	.L933:
ARM GAS  /tmp/cc9o0abE.s 			page 342


2859:src/display.c **** 		}
 11986              		.loc 1 2859 5 is_stmt 0 view .LVU3883
 11987              	.LBE572:
 11988              	.LBE570:
2865:src/display.c **** 	      packed_from_number(&z, &r);
 11989              		.loc 1 2865 8 is_stmt 1 discriminator 1 view .LVU3884
 11990 0d6a 1B4A     		ldr	r2, .L1238+4
 11991 0d6c 4146     		mov	r1, r8
 11992 0d6e 4046     		mov	r0, r8
 11993 0d70 FFF7FEFF 		bl	decNumberNormalize
 11994              	.LVL1420:
2866:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11995              		.loc 1 2866 8 discriminator 1 view .LVU3885
 11996 0d74 4146     		mov	r1, r8
 11997 0d76 06A8     		add	r0, sp, #24
 11998 0d78 FFF7FEFF 		bl	packed_from_number
 11999              	.LVL1421:
2867:src/display.c **** 	      skip = 1;
 12000              		.loc 1 2867 8 discriminator 1 view .LVU3886
 12001 0d7c 0022     		movs	r2, #0
 12002 0d7e 06A8     		add	r0, sp, #24
 12003 0d80 1146     		mov	r1, r2
 12004 0d82 FFF7FEFF 		bl	set_x
 12005              	.LVL1422:
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12006              		.loc 1 2868 8 discriminator 1 view .LVU3887
2868:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 12007              		.loc 1 2868 13 is_stmt 0 discriminator 1 view .LVU3888
 12008 0d86 0125     		movs	r5, #1
 12009              	.LBE569:
 12010 0d88 0CE5     		b	.L929
 12011              	.LVL1423:
 12012              	.L927:
2844:src/display.c **** 	    else
 12013              		.loc 1 2844 8 is_stmt 1 view .LVU3889
 12014 0d8a 1448     		ldr	r0, .L1238+8
 12015 0d8c 0021     		movs	r1, #0
 12016 0d8e FFF7FEFF 		bl	set_digits_string
 12017              	.LVL1424:
2847:src/display.c **** 	  } else if (State2.runmode) {
 12018              		.loc 1 2847 11 is_stmt 0 view .LVU3890
 12019 0d92 0125     		movs	r5, #1
 12020              	.LVL1425:
2844:src/display.c **** 	    else
 12021              		.loc 1 2844 8 view .LVU3891
 12022 0d94 06E5     		b	.L929
 12023              	.LVL1426:
 12024              	.L988:
2844:src/display.c **** 	    else
 12025              		.loc 1 2844 8 view .LVU3892
 12026              	.LBE653:
2965:src/display.c **** 	  set_dot(STO_annun);
 12027              		.loc 1 2965 6 is_stmt 1 view .LVU3893
 12028 0d96 1248     		ldr	r0, .L1238+12
 12029              	.LVL1427:
2965:src/display.c **** 	  set_dot(STO_annun);
 12030              		.loc 1 2965 6 is_stmt 0 view .LVU3894
ARM GAS  /tmp/cc9o0abE.s 			page 343


 12031 0d98 FFF7FEFF 		bl	set_status
 12032              	.LVL1428:
2965:src/display.c **** 	  set_dot(STO_annun);
 12033              		.loc 1 2965 6 view .LVU3895
 12034 0d9c 43E7     		b	.L989
 12035              	.LVL1429:
 12036              	.L968:
 12037              	.LBB654:
 12038              	.LBB650:
2605:src/display.c **** 	      n -= 100;
 12039              		.loc 1 2605 8 is_stmt 1 view .LVU3896
2605:src/display.c **** 	      n -= 100;
 12040              		.loc 1 2605 14 is_stmt 0 view .LVU3897
 12041 0d9e 3123     		movs	r3, #49
 12042 0da0 4370     		strb	r3, [r0, #1]
2606:src/display.c **** 	    }
 12043              		.loc 1 2606 8 is_stmt 1 view .LVU3898
2606:src/display.c **** 	    }
 12044              		.loc 1 2606 10 is_stmt 0 view .LVU3899
 12045 0da2 AAF1640A 		sub	r10, r10, #100
 12046              	.LVL1430:
2605:src/display.c **** 	      n -= 100;
 12047              		.loc 1 2605 11 view .LVU3900
 12048 0da6 0230     		adds	r0, r0, #2
 12049              	.LVL1431:
 12050              	.L967:
2609:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12051              		.loc 1 2609 4 is_stmt 1 view .LVU3901
2609:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 12052              		.loc 1 2609 7 is_stmt 0 view .LVU3902
 12053 0da8 BAF1630F 		cmp	r10, #99
 12054 0dac 92DD     		ble	.L969
2612:src/display.c **** 	  set_status(buf);
 12055              		.loc 1 2612 6 is_stmt 1 view .LVU3903
 12056              	.LVL1432:
2612:src/display.c **** 	  set_status(buf);
 12057              		.loc 1 2612 22 is_stmt 0 view .LVU3904
 12058 0dae 0D4B     		ldr	r3, .L1238+16
 12059 0db0 5344     		add	r3, r3, r10
2612:src/display.c **** 	  set_status(buf);
 12060              		.loc 1 2612 12 view .LVU3905
 12061 0db2 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 12062 0db6 0370     		strb	r3, [r0]
 12063 0db8 90E7     		b	.L971
 12064              	.LVL1433:
 12065              	.L932:
2612:src/display.c **** 	  set_status(buf);
 12066              		.loc 1 2612 12 view .LVU3906
 12067              	.LBE650:
 12068              	.LBE654:
 12069              	.LBB655:
 12070              	.LBB574:
 12071              	.LBB573:
2862:src/display.c **** 	      } else
 12072              		.loc 1 2862 5 is_stmt 1 view .LVU3907
 12073 0dba 4046     		mov	r0, r8
 12074 0dbc FFF7FEFF 		bl	set_NaN
ARM GAS  /tmp/cc9o0abE.s 			page 344


 12075              	.LVL1434:
 12076 0dc0 D3E7     		b	.L933
 12077              	.LVL1435:
 12078              	.L931:
2862:src/display.c **** 	      } else
 12079              		.loc 1 2862 5 is_stmt 0 view .LVU3908
 12080              	.LBE573:
2864:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 12081              		.loc 1 2864 3 is_stmt 1 view .LVU3909
 12082 0dc2 0DF15408 		add	r8, sp, #84
 12083 0dc6 0CAA     		add	r2, sp, #48
 12084 0dc8 05F07F01 		and	r1, r5, #127
 12085 0dcc 4046     		mov	r0, r8
 12086 0dce FFF7FEFF 		bl	do_conv
 12087              	.LVL1436:
 12088 0dd2 CAE7     		b	.L933
 12089              	.L1239:
 12090              		.align	2
 12091              	.L1238:
 12092 0dd4 00000000 		.word	monfuncs
 12093 0dd8 00000000 		.word	Ctx
 12094 0ddc 20000000 		.word	.LC30
 12095 0de0 88000000 		.word	.LC41
 12096 0de4 9C000000 		.word	.LC28
 12097              	.LBE574:
 12098              	.LBE655:
 12099              		.cfi_endproc
 12100              	.LFE30:
 12102              		.section	.text.frozen_display,"ax",%progbits
 12103              		.align	1
 12104              		.p2align 2,,3
 12105              		.global	frozen_display
 12106              		.syntax unified
 12107              		.thumb
 12108              		.thumb_func
 12109              		.fpu fpv4-sp-d16
 12111              	frozen_display:
 12112              	.LFB31:
3456:src/display.c **** 	State2.disp_freeze = 0;
 12113              		.loc 1 3456 7 view -0
 12114              		.cfi_startproc
 12115              		@ args = 0, pretend = 0, frame = 0
 12116              		@ frame_needed = 0, uses_anonymous_args = 0
3457:src/display.c **** 	display();
 12117              		.loc 1 3457 2 view .LVU3911
3456:src/display.c **** 	State2.disp_freeze = 0;
 12118              		.loc 1 3456 7 is_stmt 0 view .LVU3912
 12119 0000 10B5     		push	{r4, lr}
 12120              		.cfi_def_cfa_offset 8
 12121              		.cfi_offset 4, -8
 12122              		.cfi_offset 14, -4
3457:src/display.c **** 	display();
 12123              		.loc 1 3457 21 view .LVU3913
 12124 0002 064C     		ldr	r4, .L1242
 12125 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12126 0006 6FF30413 		bfc	r3, #4, #1
 12127 000a E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/cc9o0abE.s 			page 345


3458:src/display.c **** 	State2.disp_freeze = 1;
 12128              		.loc 1 3458 2 is_stmt 1 view .LVU3914
 12129 000c FFF7FEFF 		bl	display
 12130              	.LVL1437:
3459:src/display.c ****       }
 12131              		.loc 1 3459 2 view .LVU3915
3459:src/display.c ****       }
 12132              		.loc 1 3459 21 is_stmt 0 view .LVU3916
 12133 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12134 0012 43F01003 		orr	r3, r3, #16
 12135 0016 E375     		strb	r3, [r4, #23]
3460:src/display.c **** 
 12136              		.loc 1 3460 7 view .LVU3917
 12137 0018 10BD     		pop	{r4, pc}
 12138              	.L1243:
 12139 001a 00BF     		.align	2
 12140              	.L1242:
 12141 001c 00000000 		.word	StateWhileOn
 12142              		.cfi_endproc
 12143              	.LFE31:
 12145              		.section	.text.message,"ax",%progbits
 12146              		.align	1
 12147              		.p2align 2,,3
 12148              		.global	message
 12149              		.syntax unified
 12150              		.thumb
 12151              		.thumb_func
 12152              		.fpu fpv4-sp-d16
 12154              	message:
 12155              	.LVL1438:
 12156              	.LFB42:
3677:src/display.c **** 	State2.disp_freeze = 0;
 12157              		.loc 1 3677 7 is_stmt 1 view -0
 12158              		.cfi_startproc
 12159              		@ args = 0, pretend = 0, frame = 0
 12160              		@ frame_needed = 0, uses_anonymous_args = 0
3678:src/display.c **** 	State2.disp_small = 0;
 12161              		.loc 1 3678 2 view .LVU3919
3679:src/display.c **** 	WasDataEntry = 0;
 12162              		.loc 1 3679 2 view .LVU3920
3679:src/display.c **** 	WasDataEntry = 0;
 12163              		.loc 1 3679 20 is_stmt 0 view .LVU3921
 12164 0000 174A     		ldr	r2, .L1254
3677:src/display.c **** 	State2.disp_freeze = 0;
 12165              		.loc 1 3677 7 view .LVU3922
 12166 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12167              		.cfi_def_cfa_offset 24
 12168              		.cfi_offset 3, -24
 12169              		.cfi_offset 4, -20
 12170              		.cfi_offset 5, -16
 12171              		.cfi_offset 6, -12
 12172              		.cfi_offset 7, -8
 12173              		.cfi_offset 14, -4
3679:src/display.c **** 	WasDataEntry = 0;
 12174              		.loc 1 3679 20 view .LVU3923
 12175 0004 D38A     		ldrh	r3, [r2, #22]
3680:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
ARM GAS  /tmp/cc9o0abE.s 			page 346


 12176              		.loc 1 3680 15 view .LVU3924
 12177 0006 174E     		ldr	r6, .L1254+4
3679:src/display.c **** 	WasDataEntry = 0;
 12178              		.loc 1 3679 20 view .LVU3925
 12179 0008 23F48453 		bic	r3, r3, #4224
3680:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12180              		.loc 1 3680 15 view .LVU3926
 12181 000c 0027     		movs	r7, #0
3679:src/display.c **** 	WasDataEntry = 0;
 12182              		.loc 1 3679 20 view .LVU3927
 12183 000e D382     		strh	r3, [r2, #22]	@ movhi
3680:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12184              		.loc 1 3680 2 is_stmt 1 view .LVU3928
3681:src/display.c **** 	  // Complete redraw necessary
 12185              		.loc 1 3681 5 is_stmt 0 view .LVU3929
 12186 0010 9B05     		lsls	r3, r3, #22
3677:src/display.c **** 	State2.disp_freeze = 0;
 12187              		.loc 1 3677 7 view .LVU3930
 12188 0012 0546     		mov	r5, r0
 12189 0014 0C46     		mov	r4, r1
3680:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 12190              		.loc 1 3680 15 view .LVU3931
 12191 0016 3760     		str	r7, [r6]
3681:src/display.c **** 	  // Complete redraw necessary
 12192              		.loc 1 3681 2 is_stmt 1 view .LVU3932
3681:src/display.c **** 	  // Complete redraw necessary
 12193              		.loc 1 3681 5 is_stmt 0 view .LVU3933
 12194 0018 12D5     		bpl	.L1245
3681:src/display.c **** 	  // Complete redraw necessary
 12195              		.loc 1 3681 27 discriminator 1 view .LVU3934
 12196 001a D1B1     		cbz	r1, .L1253
 12197              	.L1246:
3688:src/display.c **** 	    ShowRPN = 0;
 12198              		.loc 1 3688 6 is_stmt 1 view .LVU3935
 12199 001c FFF7FEFF 		bl	reset_disp
 12200              	.LVL1439:
3689:src/display.c **** 	    set_annunciators();
 12201              		.loc 1 3689 6 view .LVU3936
3689:src/display.c **** 	    set_annunciators();
 12202              		.loc 1 3689 14 is_stmt 0 view .LVU3937
 12203 0020 114B     		ldr	r3, .L1254+8
 12204 0022 0026     		movs	r6, #0
 12205 0024 1E60     		str	r6, [r3]
3690:src/display.c **** 	    set_digits_string( str2, 0 );
 12206              		.loc 1 3690 6 is_stmt 1 view .LVU3938
 12207 0026 FFF7FEFF 		bl	set_annunciators
 12208              	.LVL1440:
3691:src/display.c **** 	  }
 12209              		.loc 1 3691 6 view .LVU3939
 12210 002a 3146     		mov	r1, r6
 12211 002c 2046     		mov	r0, r4
 12212 002e FFF7FEFF 		bl	set_digits_string
 12213              	.LVL1441:
3693:src/display.c **** 	  finish_display();// message
 12214              		.loc 1 3693 4 view .LVU3940
 12215 0032 2846     		mov	r0, r5
 12216 0034 FFF7FEFF 		bl	set_status
ARM GAS  /tmp/cc9o0abE.s 			page 347


 12217              	.LVL1442:
3694:src/display.c **** 	}
 12218              		.loc 1 3694 4 view .LVU3941
3696:src/display.c **** 
 12219              		.loc 1 3696 7 is_stmt 0 view .LVU3942
 12220 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12221              		.cfi_remember_state
 12222              		.cfi_restore 14
 12223              		.cfi_restore 7
 12224              		.cfi_restore 6
 12225              		.cfi_restore 5
 12226              		.cfi_restore 4
 12227              		.cfi_restore 3
 12228              		.cfi_def_cfa_offset 0
 12229              	.LVL1443:
3694:src/display.c **** 	}
 12230              		.loc 1 3694 4 view .LVU3943
 12231 003c FFF7FEBF 		b	finish_display
 12232              	.LVL1444:
 12233              	.L1245:
 12234              		.cfi_restore_state
3687:src/display.c **** 	    reset_disp();
 12235              		.loc 1 3687 4 is_stmt 1 view .LVU3944
3687:src/display.c **** 	    reset_disp();
 12236              		.loc 1 3687 7 is_stmt 0 view .LVU3945
 12237 0040 0029     		cmp	r1, #0
 12238 0042 EBD1     		bne	.L1246
3693:src/display.c **** 	  finish_display();// message
 12239              		.loc 1 3693 4 is_stmt 1 view .LVU3946
 12240 0044 2846     		mov	r0, r5
 12241              	.LVL1445:
3693:src/display.c **** 	  finish_display();// message
 12242              		.loc 1 3693 4 is_stmt 0 view .LVU3947
 12243 0046 FFF7FEFF 		bl	set_status
 12244              	.LVL1446:
3694:src/display.c **** 	}
 12245              		.loc 1 3694 4 is_stmt 1 view .LVU3948
3696:src/display.c **** 
 12246              		.loc 1 3696 7 is_stmt 0 view .LVU3949
 12247 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12248              		.cfi_remember_state
 12249              		.cfi_restore 14
 12250              		.cfi_restore 7
 12251              		.cfi_restore 6
 12252              		.cfi_restore 5
 12253              		.cfi_restore 4
 12254              		.cfi_restore 3
 12255              		.cfi_def_cfa_offset 0
 12256              	.LVL1447:
3694:src/display.c **** 	}
 12257              		.loc 1 3694 4 view .LVU3950
 12258 004e FFF7FEBF 		b	finish_display
 12259              	.LVL1448:
 12260              	.L1253:
 12261              		.cfi_restore_state
3683:src/display.c **** 	  display();
 12262              		.loc 1 3683 4 is_stmt 1 view .LVU3951
ARM GAS  /tmp/cc9o0abE.s 			page 348


3683:src/display.c **** 	  display();
 12263              		.loc 1 3683 12 is_stmt 0 view .LVU3952
 12264 0052 064B     		ldr	r3, .L1254+12
 12265 0054 1860     		str	r0, [r3]
3684:src/display.c **** 	}
 12266              		.loc 1 3684 4 is_stmt 1 view .LVU3953
3696:src/display.c **** 
 12267              		.loc 1 3696 7 is_stmt 0 view .LVU3954
 12268 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12269              		.cfi_restore 14
 12270              		.cfi_restore 7
 12271              		.cfi_restore 6
 12272              		.cfi_restore 5
 12273              		.cfi_restore 4
 12274              		.cfi_restore 3
 12275              		.cfi_def_cfa_offset 0
3684:src/display.c **** 	}
 12276              		.loc 1 3684 4 view .LVU3955
 12277 005a FFF7FEBF 		b	display
 12278              	.LVL1449:
 12279              	.L1255:
3684:src/display.c **** 	}
 12280              		.loc 1 3684 4 view .LVU3956
 12281 005e 00BF     		.align	2
 12282              	.L1254:
 12283 0060 00000000 		.word	StateWhileOn
 12284 0064 00000000 		.word	WasDataEntry
 12285 0068 00000000 		.word	ShowRPN
 12286 006c 00000000 		.word	DispMsg
 12287              		.cfi_endproc
 12288              	.LFE42:
 12290              		.section	.text.error_message,"ax",%progbits
 12291              		.align	1
 12292              		.p2align 2,,3
 12293              		.global	error_message
 12294              		.syntax unified
 12295              		.thumb
 12296              		.thumb_func
 12297              		.fpu fpv4-sp-d16
 12299              	error_message:
 12300              	.LVL1450:
 12301              	.LFB1:
 136:src/display.c **** #define MSG1(top) top "\0"
 12302              		.loc 1 136 1 is_stmt 1 view -0
 12303              		.cfi_startproc
 12304              		@ args = 0, pretend = 0, frame = 0
 12305              		@ frame_needed = 0, uses_anonymous_args = 0
 141:src/display.c ****     {
 12306              		.loc 1 141 3 view .LVU3958
 240:src/display.c ****     const char *p = error_table[e];
 12307              		.loc 1 240 3 view .LVU3959
 240:src/display.c ****     const char *p = error_table[e];
 12308              		.loc 1 240 21 is_stmt 0 view .LVU3960
 12309 0000 334B     		ldr	r3, .L1282
 12310 0002 1B68     		ldr	r3, [r3]
 12311 0004 0343     		orrs	r3, r0, r3
 12312 0006 00D1     		bne	.L1278
ARM GAS  /tmp/cc9o0abE.s 			page 349


 12313 0008 7047     		bx	lr
 12314              	.L1278:
 12315              	.LBB656:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12316              		.loc 1 241 5 is_stmt 1 view .LVU3961
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12317              		.loc 1 241 17 is_stmt 0 view .LVU3962
 12318 000a 324B     		ldr	r3, .L1282+4
 12319              	.LBE656:
 136:src/display.c **** #define MSG1(top) top "\0"
 12320              		.loc 1 136 1 view .LVU3963
 12321 000c 70B5     		push	{r4, r5, r6, lr}
 12322              		.cfi_def_cfa_offset 16
 12323              		.cfi_offset 4, -16
 12324              		.cfi_offset 5, -12
 12325              		.cfi_offset 6, -8
 12326              		.cfi_offset 14, -4
 12327              	.LBB668:
 241:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 12328              		.loc 1 241 17 view .LVU3964
 12329 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 12330              	.LVL1451:
 242:src/display.c ****     if (*q == '\0')
 12331              		.loc 1 242 5 is_stmt 1 view .LVU3965
 12332 0012 0446     		mov	r4, r0
 242:src/display.c ****     if (*q == '\0')
 12333              		.loc 1 242 21 is_stmt 0 view .LVU3966
 12334 0014 0021     		movs	r1, #0
 12335 0016 3046     		mov	r0, r6
 12336              	.LVL1452:
 242:src/display.c ****     if (*q == '\0')
 12337              		.loc 1 242 21 view .LVU3967
 12338 0018 FFF7FEFF 		bl	find_char
 12339              	.LVL1453:
 243:src/display.c ****       q = S7_ERROR;
 12340              		.loc 1 243 5 is_stmt 1 view .LVU3968
 243:src/display.c ****       q = S7_ERROR;
 12341              		.loc 1 243 9 is_stmt 0 view .LVU3969
 12342 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 243:src/display.c ****       q = S7_ERROR;
 12343              		.loc 1 243 8 view .LVU3970
 12344 001e 002B     		cmp	r3, #0
 12345 0020 3CD0     		beq	.L1267
 245:src/display.c ****       DispMsg = p;
 12346              		.loc 1 245 8 view .LVU3971
 12347 0022 582B     		cmp	r3, #88
 242:src/display.c ****     if (*q == '\0')
 12348              		.loc 1 242 17 view .LVU3972
 12349 0024 00F10105 		add	r5, r0, #1
 12350              	.LVL1454:
 245:src/display.c ****       DispMsg = p;
 12351              		.loc 1 245 5 is_stmt 1 view .LVU3973
 245:src/display.c ****       DispMsg = p;
 12352              		.loc 1 245 8 is_stmt 0 view .LVU3974
 12353 0028 39D1     		bne	.L1259
 246:src/display.c ****       frozen_display();
 12354              		.loc 1 246 7 is_stmt 1 view .LVU3975
ARM GAS  /tmp/cc9o0abE.s 			page 350


 12355              	.LBB657:
 12356              	.LBB658:
3457:src/display.c **** 	display();
 12357              		.loc 1 3457 21 is_stmt 0 view .LVU3976
 12358 002a 2B4C     		ldr	r4, .L1282+8
 12359              	.LVL1455:
3457:src/display.c **** 	display();
 12360              		.loc 1 3457 21 view .LVU3977
 12361              	.LBE658:
 12362              	.LBE657:
 246:src/display.c ****       frozen_display();
 12363              		.loc 1 246 15 view .LVU3978
 12364 002c 2B4A     		ldr	r2, .L1282+12
 12365              	.LBB662:
 12366              	.LBB659:
3457:src/display.c **** 	display();
 12367              		.loc 1 3457 21 view .LVU3979
 12368 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12369              	.LBE659:
 12370              	.LBE662:
 246:src/display.c ****       frozen_display();
 12371              		.loc 1 246 15 view .LVU3980
 12372 0030 1660     		str	r6, [r2]
 247:src/display.c ****     }
 12373              		.loc 1 247 7 is_stmt 1 view .LVU3981
 12374              	.LBB663:
 12375              	.LBI657:
3455:src/display.c ****       {
 12376              		.loc 1 3455 12 view .LVU3982
 12377              	.LBB660:
3457:src/display.c **** 	display();
 12378              		.loc 1 3457 2 view .LVU3983
3457:src/display.c **** 	display();
 12379              		.loc 1 3457 21 is_stmt 0 view .LVU3984
 12380 0032 6FF30413 		bfc	r3, #4, #1
 12381 0036 E375     		strb	r3, [r4, #23]
3458:src/display.c **** 	State2.disp_freeze = 1;
 12382              		.loc 1 3458 2 is_stmt 1 view .LVU3985
 12383 0038 FFF7FEFF 		bl	display
 12384              	.LVL1456:
3459:src/display.c ****       }
 12385              		.loc 1 3459 2 view .LVU3986
 12386              	.LBE660:
 12387              	.LBE663:
 261:src/display.c ****       if (*q == 'X')
 12388              		.loc 1 261 5 view .LVU3987
 12389              	.LBB664:
 12390              	.LBB661:
3459:src/display.c ****       }
 12391              		.loc 1 3459 21 is_stmt 0 view .LVU3988
 12392 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12393 003e 43F01003 		orr	r3, r3, #16
 12394 0042 E375     		strb	r3, [r4, #23]
 12395              	.LBE661:
 12396              	.LBE664:
 261:src/display.c ****       if (*q == 'X')
 12397              		.loc 1 261 9 view .LVU3989
ARM GAS  /tmp/cc9o0abE.s 			page 351


 12398 0044 264B     		ldr	r3, .L1282+16
 261:src/display.c ****       if (*q == 'X')
 12399              		.loc 1 261 8 view .LVU3990
 12400 0046 1B68     		ldr	r3, [r3]
 12401 0048 002B     		cmp	r3, #0
 12402 004a 38D0     		beq	.L1256
 12403              	.LVL1457:
 12404              	.L1281:
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12405              		.loc 1 262 7 is_stmt 1 view .LVU3991
 262:src/display.c **** 	print_reg(regX_idx, p, 0);
 12406              		.loc 1 262 10 is_stmt 0 view .LVU3992
 12407 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12408 004e 582B     		cmp	r3, #88
 12409 0050 36D0     		beq	.L1279
 265:src/display.c **** 	print_line(p, 0);
 12410              		.loc 1 265 2 is_stmt 1 view .LVU3993
 12411 0052 0020     		movs	r0, #0
 12412 0054 FFF7FEFF 		bl	print_tab
 12413              	.LVL1458:
 266:src/display.c **** 	print(' ');
 12414              		.loc 1 266 2 view .LVU3994
 12415 0058 3046     		mov	r0, r6
 12416 005a 0021     		movs	r1, #0
 12417 005c FFF7FEFF 		bl	print_line
 12418              	.LVL1459:
 267:src/display.c **** 	while (*q != '\0') {
 12419              		.loc 1 267 2 view .LVU3995
 12420 0060 2020     		movs	r0, #32
 12421 0062 FFF7FEFF 		bl	print
 12422              	.LVL1460:
 268:src/display.c **** 	  int c = *q;
 12423              		.loc 1 268 2 view .LVU3996
 268:src/display.c **** 	  int c = *q;
 12424              		.loc 1 268 8 view .LVU3997
 268:src/display.c **** 	  int c = *q;
 12425              		.loc 1 268 9 is_stmt 0 view .LVU3998
 12426 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 268:src/display.c **** 	  int c = *q;
 12427              		.loc 1 268 8 view .LVU3999
 12428 0068 73B9     		cbnz	r3, .L1263
 12429              	.L1266:
 277:src/display.c ****       }
 12430              		.loc 1 277 2 is_stmt 1 view .LVU4000
 12431              	.LBE668:
 282:src/display.c **** 
 12432              		.loc 1 282 1 is_stmt 0 view .LVU4001
 12433 006a BDE87040 		pop	{r4, r5, r6, lr}
 12434              		.cfi_remember_state
 12435              		.cfi_restore 14
 12436              		.cfi_restore 6
 12437              		.cfi_restore 5
 12438              		.cfi_restore 4
 12439              		.cfi_def_cfa_offset 0
 12440              	.LVL1461:
 12441              	.LBB669:
 277:src/display.c ****       }
ARM GAS  /tmp/cc9o0abE.s 			page 352


 12442              		.loc 1 277 2 view .LVU4002
 12443 006e 0020     		movs	r0, #0
 12444 0070 FFF7FEBF 		b	print_advance
 12445              	.LVL1462:
 12446              	.L1280:
 12447              		.cfi_restore_state
 12448              	.LBB665:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12449              		.loc 1 272 4 view .LVU4003
 12450 0074 FFF7FEFF 		bl	print
 12451              	.LVL1463:
 273:src/display.c **** 	    ++q;
 12452              		.loc 1 273 4 is_stmt 1 view .LVU4004
 274:src/display.c **** 	  ++q;
 12453              		.loc 1 274 6 view .LVU4005
 273:src/display.c **** 	    ++q;
 12454              		.loc 1 273 7 is_stmt 0 view .LVU4006
 12455 0078 6D2C     		cmp	r4, #109
 274:src/display.c **** 	  ++q;
 12456              		.loc 1 274 6 view .LVU4007
 12457 007a 0CBF     		ite	eq
 12458 007c 691C     		addeq	r1, r5, #1
 12459              	.LVL1464:
 274:src/display.c **** 	  ++q;
 12460              		.loc 1 274 6 view .LVU4008
 12461 007e 2946     		movne	r1, r5
 12462              	.LVL1465:
 12463              	.L1265:
 275:src/display.c **** 	}
 12464              		.loc 1 275 4 is_stmt 1 view .LVU4009
 12465              	.LBE665:
 268:src/display.c **** 	  int c = *q;
 12466              		.loc 1 268 9 is_stmt 0 view .LVU4010
 12467 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12468              	.LBB666:
 275:src/display.c **** 	}
 12469              		.loc 1 275 4 view .LVU4011
 12470 0082 4D1C     		adds	r5, r1, #1
 12471              	.LVL1466:
 275:src/display.c **** 	}
 12472              		.loc 1 275 4 view .LVU4012
 12473              	.LBE666:
 268:src/display.c **** 	  int c = *q;
 12474              		.loc 1 268 8 is_stmt 1 view .LVU4013
 12475 0084 002B     		cmp	r3, #0
 12476 0086 F0D0     		beq	.L1266
 12477              	.LVL1467:
 12478              	.L1263:
 12479              	.LBB667:
 269:src/display.c **** 	  if (c >= 'A')
 12480              		.loc 1 269 4 view .LVU4014
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12481              		.loc 1 270 4 view .LVU4015
 271:src/display.c **** 	  print(c);
 12482              		.loc 1 271 6 view .LVU4016
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12483              		.loc 1 272 4 view .LVU4017
ARM GAS  /tmp/cc9o0abE.s 			page 353


 12484 0088 43F06004 		orr	r4, r3, #96
 12485              	.LVL1468:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12486              		.loc 1 272 4 view .LVU4018
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12487              		.loc 1 270 7 is_stmt 0 view .LVU4019
 12488 008c 402B     		cmp	r3, #64
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12489              		.loc 1 272 4 view .LVU4020
 12490 008e 2046     		mov	r0, r4
 270:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12491              		.loc 1 270 7 view .LVU4021
 12492 0090 F0DC     		bgt	.L1280
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12493              		.loc 1 272 4 view .LVU4022
 12494 0092 1846     		mov	r0, r3
 12495 0094 FFF7FEFF 		bl	print
 12496              	.LVL1469:
 273:src/display.c **** 	    ++q;
 12497              		.loc 1 273 4 is_stmt 1 view .LVU4023
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12498              		.loc 1 272 4 is_stmt 0 view .LVU4024
 12499 0098 2946     		mov	r1, r5
 12500 009a F1E7     		b	.L1265
 12501              	.LVL1470:
 12502              	.L1267:
 272:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12503              		.loc 1 272 4 view .LVU4025
 12504              	.LBE667:
 244:src/display.c ****     if (*q == 'X') {
 12505              		.loc 1 244 9 view .LVU4026
 12506 009c 114D     		ldr	r5, .L1282+20
 12507              	.L1259:
 12508              	.LVL1471:
 254:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12509              		.loc 1 254 7 is_stmt 1 view .LVU4027
 12510 009e 2946     		mov	r1, r5
 12511 00a0 3046     		mov	r0, r6
 12512 00a2 FFF7FEFF 		bl	message
 12513              	.LVL1472:
 255:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12514              		.loc 1 255 7 view .LVU4028
 255:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12515              		.loc 1 255 26 is_stmt 0 view .LVU4029
 12516 00a6 0C4B     		ldr	r3, .L1282+8
 255:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12517              		.loc 1 255 31 view .LVU4030
 12518 00a8 003C     		subs	r4, r4, #0
 255:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12519              		.loc 1 255 26 view .LVU4031
 12520 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 255:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12521              		.loc 1 255 31 view .LVU4032
 12522 00ac 18BF     		it	ne
 12523 00ae 0124     		movne	r4, #1
 12524              	.LVL1473:
 255:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
ARM GAS  /tmp/cc9o0abE.s 			page 354


 12525              		.loc 1 255 26 view .LVU4033
 12526 00b0 64F30412 		bfi	r2, r4, #4, #1
 12527 00b4 DA75     		strb	r2, [r3, #23]
 261:src/display.c ****       if (*q == 'X')
 12528              		.loc 1 261 5 is_stmt 1 view .LVU4034
 261:src/display.c ****       if (*q == 'X')
 12529              		.loc 1 261 9 is_stmt 0 view .LVU4035
 12530 00b6 0A4B     		ldr	r3, .L1282+16
 261:src/display.c ****       if (*q == 'X')
 12531              		.loc 1 261 8 view .LVU4036
 12532 00b8 1B68     		ldr	r3, [r3]
 12533 00ba 002B     		cmp	r3, #0
 12534 00bc C6D1     		bne	.L1281
 12535              	.LVL1474:
 12536              	.L1256:
 261:src/display.c ****       if (*q == 'X')
 12537              		.loc 1 261 8 view .LVU4037
 12538              	.LBE669:
 282:src/display.c **** 
 12539              		.loc 1 282 1 view .LVU4038
 12540 00be 70BD     		pop	{r4, r5, r6, pc}
 12541              	.LVL1475:
 12542              	.L1279:
 12543              	.LBB670:
 263:src/display.c ****       else {
 12544              		.loc 1 263 2 is_stmt 1 view .LVU4039
 12545 00c0 3146     		mov	r1, r6
 12546 00c2 0022     		movs	r2, #0
 12547              	.LBE670:
 282:src/display.c **** 
 12548              		.loc 1 282 1 is_stmt 0 view .LVU4040
 12549 00c4 BDE87040 		pop	{r4, r5, r6, lr}
 12550              		.cfi_restore 14
 12551              		.cfi_restore 6
 12552              		.cfi_restore 5
 12553              		.cfi_restore 4
 12554              		.cfi_def_cfa_offset 0
 12555              	.LVL1476:
 12556              	.LBB671:
 263:src/display.c ****       else {
 12557              		.loc 1 263 2 view .LVU4041
 12558 00c8 6420     		movs	r0, #100
 12559 00ca FFF7FEBF 		b	print_reg
 12560              	.LVL1477:
 12561              	.L1283:
 263:src/display.c ****       else {
 12562              		.loc 1 263 2 view .LVU4042
 12563 00ce 00BF     		.align	2
 12564              	.L1282:
 12565 00d0 00000000 		.word	Running
 12566 00d4 00000000 		.word	.LANCHOR21
 12567 00d8 00000000 		.word	StateWhileOn
 12568 00dc 00000000 		.word	DispMsg
 12569 00e0 00000000 		.word	Tracing
 12570 00e4 00000000 		.word	.LANCHOR20
 12571              	.LBE671:
 12572              		.cfi_endproc
ARM GAS  /tmp/cc9o0abE.s 			page 355


 12573              	.LFE1:
 12575              		.section	.text.stopwatch_message,"ax",%progbits
 12576              		.align	1
 12577              		.p2align 2,,3
 12578              		.global	stopwatch_message
 12579              		.syntax unified
 12580              		.thumb
 12581              		.thumb_func
 12582              		.fpu fpv4-sp-d16
 12584              	stopwatch_message:
 12585              	.LVL1478:
 12586              	.LFB44:
3709:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12587              		.loc 1 3709 7 is_stmt 1 view -0
 12588              		.cfi_startproc
 12589              		@ args = 0, pretend = 0, frame = 0
 12590              		@ frame_needed = 0, uses_anonymous_args = 0
3713:src/display.c **** 	set_dot(DEG);
 12591              		.loc 1 3713 2 view .LVU4044
3709:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12592              		.loc 1 3709 7 is_stmt 0 view .LVU4045
 12593 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12594              		.cfi_def_cfa_offset 24
 12595              		.cfi_offset 3, -24
 12596              		.cfi_offset 4, -20
 12597              		.cfi_offset 5, -16
 12598              		.cfi_offset 6, -12
 12599              		.cfi_offset 7, -8
 12600              		.cfi_offset 14, -4
3709:src/display.c **** #if !defined(REALBUILD) && !defined(DM42)
 12601              		.loc 1 3709 7 view .LVU4046
 12602 0002 1446     		mov	r4, r2
 12603 0004 0F46     		mov	r7, r1
 12604 0006 1D46     		mov	r5, r3
 12605 0008 0646     		mov	r6, r0
3713:src/display.c **** 	set_dot(DEG);
 12606              		.loc 1 3713 2 view .LVU4047
 12607 000a FFF7FEFF 		bl	reset_disp
 12608              	.LVL1479:
3714:src/display.c **** 	set_digits_string( str2, 0 );
 12609              		.loc 1 3714 2 is_stmt 1 view .LVU4048
 12610 000e 8C20     		movs	r0, #140
 12611 0010 FFF7FEFF 		bl	set_dot
 12612              	.LVL1480:
3715:src/display.c **** 	State2.disp_small = force_small;
 12613              		.loc 1 3715 2 view .LVU4049
 12614 0014 3846     		mov	r0, r7
 12615 0016 0021     		movs	r1, #0
 12616 0018 FFF7FEFF 		bl	set_digits_string
 12617              	.LVL1481:
3716:src/display.c **** 	if( exponent!=NULL ) {
 12618              		.loc 1 3716 2 view .LVU4050
3716:src/display.c **** 	if( exponent!=NULL ) {
 12619              		.loc 1 3716 20 is_stmt 0 view .LVU4051
 12620 001c 0B4B     		ldr	r3, .L1295
 12621 001e 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 12622 0020 64F3C712 		bfi	r2, r4, #7, #1
ARM GAS  /tmp/cc9o0abE.s 			page 356


 12623              	.LVL1482:
3716:src/display.c **** 	if( exponent!=NULL ) {
 12624              		.loc 1 3716 20 view .LVU4052
 12625 0024 9A75     		strb	r2, [r3, #22]
3717:src/display.c **** 	  stopwatch_exponent(exponent);
 12626              		.loc 1 3717 2 is_stmt 1 view .LVU4053
3717:src/display.c **** 	  stopwatch_exponent(exponent);
 12627              		.loc 1 3717 4 is_stmt 0 view .LVU4054
 12628 0026 55B1     		cbz	r5, .L1285
 12629              	.LVL1483:
 12630              	.LBB672:
 12631              	.LBB673:
3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12632              		.loc 1 3702 9 is_stmt 1 view .LVU4055
 12633 0028 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12634              		.loc 1 3702 2 is_stmt 0 view .LVU4056
 12635 002a 41B1     		cbz	r1, .L1285
3701:src/display.c **** 	for (; *exponent!=0; exponent++) {
 12636              		.loc 1 3701 6 view .LVU4057
 12637 002c 6C24     		movs	r4, #108
 12638              	.LVL1484:
 12639              	.L1286:
3703:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 12640              		.loc 1 3703 4 is_stmt 1 view .LVU4058
 12641              	.LBB674:
 12642              	.LBI674:
 415:src/display.c ****   if (res) *res++ = ch;
 12643              		.loc 1 415 14 view .LVU4059
 12644              	.LBB675:
 416:src/display.c ****   else	set_dig(base, ch);
 12645              		.loc 1 416 3 view .LVU4060
 417:src/display.c ****   return res;
 12646              		.loc 1 417 8 view .LVU4061
 12647 002e 2046     		mov	r0, r4
 12648 0030 FFF7FEFF 		bl	set_dig
 12649              	.LVL1485:
 418:src/display.c **** }
 12650              		.loc 1 418 3 view .LVU4062
 418:src/display.c **** }
 12651              		.loc 1 418 3 is_stmt 0 view .LVU4063
 12652              	.LBE675:
 12653              	.LBE674:
3704:src/display.c **** 	}
 12654              		.loc 1 3704 4 is_stmt 1 view .LVU4064
3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12655              		.loc 1 3702 9 is_stmt 0 view .LVU4065
 12656 0034 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 12657              	.LVL1486:
3704:src/display.c **** 	}
 12658              		.loc 1 3704 6 view .LVU4066
 12659 0038 0734     		adds	r4, r4, #7
 12660              	.LVL1487:
3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12661              		.loc 1 3702 23 is_stmt 1 view .LVU4067
3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12662              		.loc 1 3702 9 view .LVU4068
ARM GAS  /tmp/cc9o0abE.s 			page 357


3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12663              		.loc 1 3702 2 is_stmt 0 view .LVU4069
 12664 003a 0029     		cmp	r1, #0
 12665 003c F7D1     		bne	.L1286
 12666              	.LVL1488:
 12667              	.L1285:
3702:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12668              		.loc 1 3702 2 view .LVU4070
 12669              	.LBE673:
 12670              	.LBE672:
3720:src/display.c **** 	finish_display();
 12671              		.loc 1 3720 2 is_stmt 1 view .LVU4071
 12672 003e 3046     		mov	r0, r6
 12673 0040 FFF7FEFF 		bl	set_status
 12674              	.LVL1489:
3721:src/display.c ****       }
 12675              		.loc 1 3721 2 view .LVU4072
3722:src/display.c **** 
 12676              		.loc 1 3722 7 is_stmt 0 view .LVU4073
 12677 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12678              		.cfi_restore 14
 12679              		.cfi_restore 7
 12680              		.cfi_restore 6
 12681              		.cfi_restore 5
 12682              		.cfi_restore 4
 12683              		.cfi_restore 3
 12684              		.cfi_def_cfa_offset 0
 12685              	.LVL1490:
3721:src/display.c ****       }
 12686              		.loc 1 3721 2 view .LVU4074
 12687 0048 FFF7FEBF 		b	finish_display
 12688              	.LVL1491:
 12689              	.L1296:
 12690              		.align	2
 12691              	.L1295:
 12692 004c 00000000 		.word	StateWhileOn
 12693              		.cfi_endproc
 12694              	.LFE44:
 12696              		.section	.rodata.str1.4,"aMS",%progbits,1
 12697              		.align	2
 12698              	.LC43:
 12699 0000 06316306 		.ascii	"\0061c\006\006\000"
 12699      0600
 12700 0006 0000     		.align	2
 12701              	.LC44:
 12702 0008 756E0600 		.ascii	"un\006\000"
 12703              		.align	2
 12704              	.LC45:
 12705 000c 736D00   		.ascii	"sm\000"
 12706              		.set	CSWTCH.352,CSWTCH.350
 12707              		.global	DIGITS
 12708              		.comm	IoAnnunciator,4,4
 12709              		.comm	IntMaxWindow,4,4
 12710              		.comm	JustDisplayed,4,4
 12711              		.comm	ShowRPN,4,4
 12712              		.global	no_status_top
 12713              		.comm	DispPlot,2,2
ARM GAS  /tmp/cc9o0abE.s 			page 358


 12714              		.comm	DispMsg,4,4
 12715              		.global	SvnRevision
 12716              		.section	.rodata
 12717              		.align	2
 12718              		.set	.LANCHOR14,. + 0
 12719              	.LC20:
 12720 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12720      22002E00 
 12720      00
 12721 0009 000000   		.space	3
 12722              	.LC24:
 12723 000c 33344306 		.ascii	"34C\0063.3\222\000"
 12723      332E3392 
 12723      00
 12724 0015 00000000 		.space	4
 12725 0019 000000   		.space	3
 12726              	.LC46:
 12727 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12727      696E6700 
 12727      50726F47 
 12727      72614D6D 
 12727      00
 12728 002d 000000   		.space	3
 12729              	.LC47:
 12730 0030 446F6D61 		.ascii	"Domain\000\000"
 12730      696E0000 
 12731              	.LC48:
 12732 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12732      74696D65 
 12732      006F7220 
 12732      64417445 
 12732      00
 12733 0049 000000   		.space	3
 12734              	.LC49:
 12735 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12735      66696E65 
 12735      64004F70 
 12735      2D434F64 
 12735      4500
 12736 005e 0000     		.space	2
 12737              	.LC50:
 12738 0060 2B9F0000 		.ascii	"+\237\000\000"
 12739              	.LC51:
 12740 0064 2D9F0000 		.ascii	"-\237\000\000"
 12741              	.LC52:
 12742 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12742      75636800 
 12742      4C416245 
 12742      4C00
 12743 0076 0000     		.space	2
 12744              	.LC53:
 12745 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12745      67616C00 
 12745      4F504572 
 12745      4174696F 
 12745      6E00
 12746 008a 0000     		.space	2
ARM GAS  /tmp/cc9o0abE.s 			page 359


 12747              	.LC54:
 12748 008c 4F757420 		.ascii	"Out of range\000\000"
 12748      6F662072 
 12748      616E6765 
 12748      0000
 12749 009a 0000     		.space	2
 12750              	.LC55:
 12751 009c 42616420 		.ascii	"Bad digit\000\000"
 12751      64696769 
 12751      740000
 12752 00a7 00       		.space	1
 12753              	.LC56:
 12754 00a8 546F6F20 		.ascii	"Too long\000\000"
 12754      6C6F6E67 
 12754      0000
 12755 00b2 0000     		.space	2
 12756              	.LC57:
 12757 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12757      69730046 
 12757      754C4C00 
 12758              	.LC58:
 12759 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12759      6B00434C 
 12759      41534800 
 12760              	.LC59:
 12761 00cc 42616420 		.ascii	"Bad mode\000\000"
 12761      6D6F6465 
 12761      0000
 12762 00d6 0000     		.space	2
 12763              	.LC60:
 12764 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
 12764      06060673 
 12764      697A6500 
 12764      746F6F20 
 12764      534D6D41 
 12765 00ef 00       		.space	1
 12766              	.LC61:
 12767 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12767      66657700 
 12767      64417441 
 12767      20506F69 
 12767      6E745300 
 12768              	.LC62:
 12769 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12769      6C696400 
 12769      50617261 
 12769      4D6D4574 
 12769      457200
 12770 0117 00       		.space	1
 12771              	.LC63:
 12772 0118 492F4F00 		.ascii	"I/O\000\000"
 12772      00
 12773 011d 000000   		.space	3
 12774              	.LC64:
 12775 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12775      6C696400 
 12775      64417441 
ARM GAS  /tmp/cc9o0abE.s 			page 360


 12775      00
 12776 012d 000000   		.space	3
 12777              	.LC65:
 12778 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12778      65005072 
 12778      6F744563 
 12778      74456400 
 12779              	.LC66:
 12780 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12780      6F6F7400 
 12780      466F756E 
 12780      6400
 12781 014e 0000     		.space	2
 12782              	.LC67:
 12783 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12783      6978004D 
 12783      6D49534D 
 12783      6D417443 
 12783      4800
 12784 0162 0000     		.space	2
 12785              	.LC68:
 12786 0164 53696E67 		.ascii	"Singular\000\000"
 12786      756C6172 
 12786      0000
 12787 016e 0000     		.space	2
 12788              	.LC69:
 12789 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12789      68206973 
 12789      0046754C 
 12789      4C00
 12790 017e 0000     		.space	2
 12791              	.LC70:
 12792 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12792      72797374 
 12792      616C0049 
 12792      6E537461 
 12792      4C4C4564 
 12793 0195 000000   		.space	3
 12794              	.LC71:
 12795 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 12795      6576656E 
 12795      20726567 
 12795      00666F72 
 12795      20436F4D 
 12796 01b2 0000     		.space	2
 12797              	.LC72:
 12798 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 12798      5800
 12799              		.section	.bss.DecimalMode,"aw",%nobits
 12800              		.set	.LANCHOR1,. + 0
 12803              	DecimalMode:
 12804 0000 00       		.space	1
 12805              		.section	.bss.SeparatorMode,"aw",%nobits
 12806              		.set	.LANCHOR0,. + 0
 12809              	SeparatorMode:
 12810 0000 00       		.space	1
 12811              		.section	.bss.no_status_top,"aw",%nobits
ARM GAS  /tmp/cc9o0abE.s 			page 361


 12812              		.align	1
 12813              		.set	.LANCHOR15,. + 0
 12816              	no_status_top:
 12817 0000 0000     		.space	2
 12818              		.section	.rodata.CSWTCH.350,"a"
 12819              		.align	2
 12820              		.set	.LANCHOR8,. + 0
 12823              	CSWTCH.350:
 12824 0000 02000000 		.word	2
 12825 0004 08000000 		.word	8
 12826 0008 0A000000 		.word	10
 12827 000c 10000000 		.word	16
 12828              		.section	.rodata.CSWTCH.377,"a"
 12829              		.align	2
 12830              		.set	.LANCHOR13,. + 0
 12833              	CSWTCH.377:
 12834 0000 00000000 		.word	.LC43
 12835 0004 08000000 		.word	.LC44
 12836 0008 0C000000 		.word	.LC45
 12837              		.section	.rodata.DIGITS,"a"
 12838              		.align	2
 12839              		.set	.LANCHOR9,. + 0
 12842              	DIGITS:
 12843 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12843      34353637 
 12843      38394142 
 12843      43444546 
 12843      00
 12844              		.section	.rodata.S7_ERROR,"a"
 12845              		.align	2
 12846              		.set	.LANCHOR20,. + 0
 12849              	S7_ERROR:
 12850 0000 4572726F 		.ascii	"Error\000"
 12850      7200
 12851              		.section	.rodata.S7_INF,"a"
 12852              		.align	2
 12853              		.set	.LANCHOR4,. + 0
 12856              	S7_INF:
 12857 0000 496E6669 		.ascii	"Infinity\000"
 12857      6E697479 
 12857      00
 12858              		.section	.rodata.S7_NaN,"a"
 12859              		.align	2
 12860              		.set	.LANCHOR3,. + 0
 12863              	S7_NaN:
 12864 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12864      6E754D6D 
 12864      45726963 
 12864      00
 12865              		.section	.rodata.S7_STEP,"a"
 12866              		.align	2
 12867              		.set	.LANCHOR16,. + 0
 12870              	S7_STEP:
 12871 0000 53744550 		.ascii	"StEP \000"
 12871      2000
 12872              		.section	.rodata.S7_fract_EQ,"a"
 12873              		.align	2
ARM GAS  /tmp/cc9o0abE.s 			page 362


 12874              		.set	.LANCHOR6,. + 0
 12877              	S7_fract_EQ:
 12878 0000 203D2000 		.ascii	" = \000"
 12879              		.section	.rodata.S7_fract_GT,"a"
 12880              		.align	2
 12881              		.set	.LANCHOR7,. + 0
 12884              	S7_fract_GT:
 12885 0000 20477400 		.ascii	" Gt\000"
 12886              		.section	.rodata.S7_fract_LT,"a"
 12887              		.align	2
 12888              		.set	.LANCHOR5,. + 0
 12891              	S7_fract_LT:
 12892 0000 204C7400 		.ascii	" Lt\000"
 12893              		.section	.rodata.S_SURE,"a"
 12894              		.align	2
 12895              		.set	.LANCHOR18,. + 0
 12898              	S_SURE:
 12899 0000 53757265 		.ascii	"Sure?\000"
 12899      3F00
 12900              		.section	.rodata.SvnRevision,"a"
 12901              		.align	2
 12902              		.set	.LANCHOR17,. + 0
 12905              	SvnRevision:
 12906 0000 30202020 		.ascii	"0   "
 12907              		.section	.rodata.digtbl,"a"
 12908              		.align	2
 12909              		.set	.LANCHOR2,. + 0
 12912              	digtbl:
 12913 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12913      02421252 
 12913      2D000000 
 12913      00000000 
 12913      00
 12914 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12914      00000017 
 12914      01000000 
 12914      00
 12915 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12915      28000000 
 12915      0020664B 
 12915      00000010 
 12916 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12916      5E5B3973 
 12916      77497F7B 
 12916      00000612 
 12916      0300787D 
 12917 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12917      673D240F 
 12917      75266C6D 
 12917      6F7C7914 
 12917      73362F00 
 12918 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12918      161F7674 
 12918      6735040F 
 12918      75266915 
 12918      177C7914 
 12919 0076 000F003B 		.ascii	"\000\017\000;"
ARM GAS  /tmp/cc9o0abE.s 			page 363


 12920              		.section	.rodata.error_table.8663,"a"
 12921              		.align	2
 12922              		.set	.LANCHOR21,. + 0
 12925              	error_table.8663:
 12926 0000 1C000000 		.word	.LC46
 12927 0004 30000000 		.word	.LC47
 12928 0008 38000000 		.word	.LC48
 12929 000c 4C000000 		.word	.LC49
 12930 0010 60000000 		.word	.LC50
 12931 0014 64000000 		.word	.LC51
 12932 0018 68000000 		.word	.LC52
 12933 001c 78000000 		.word	.LC53
 12934 0020 8C000000 		.word	.LC54
 12935 0024 9C000000 		.word	.LC55
 12936 0028 A8000000 		.word	.LC56
 12937 002c B4000000 		.word	.LC57
 12938 0030 C0000000 		.word	.LC58
 12939 0034 CC000000 		.word	.LC59
 12940 0038 D8000000 		.word	.LC60
 12941 003c F0000000 		.word	.LC61
 12942 0040 04010000 		.word	.LC62
 12943 0044 18010000 		.word	.LC63
 12944 0048 20010000 		.word	.LC64
 12945 004c 30010000 		.word	.LC65
 12946 0050 40010000 		.word	.LC66
 12947 0054 50010000 		.word	.LC67
 12948 0058 64010000 		.word	.LC68
 12949 005c 70010000 		.word	.LC69
 12950 0060 80010000 		.word	.LC70
 12951 0064 98010000 		.word	.LC71
 12952 0068 B4010000 		.word	.LC72
 12953              		.section	.rodata.libname,"a"
 12954              		.align	2
 12955              		.set	.LANCHOR19,. + 0
 12958              	libname:
 12959 0000 72414D6D 		.ascii	"rAMm\000"
 12959      00
 12960 0005 4C696220 		.ascii	"Lib \000"
 12960      00
 12961 000a 42757020 		.ascii	"Bup \000"
 12961      00
 12962 000f 726F4D6D 		.ascii	"roMm\000"
 12962      00
 12963              		.section	.rodata.shift_chars.8762,"a"
 12964              		.align	2
 12965              		.set	.LANCHOR12,. + 0
 12968              	shift_chars.8762:
 12969 0000 20111213 		.ascii	" \021\022\023"
 12970              		.section	.rodata.small_dots.8963,"a"
 12971              		.align	2
 12972              		.set	.LANCHOR11,. + 0
 12975              	small_dots.8963:
 12976 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12976      07E12C06 
 12976      07E12C06 
 12976      06
 12977              		.section	.rodata.small_minus.8962,"a"
ARM GAS  /tmp/cc9o0abE.s 			page 364


 12978              		.align	2
 12979              		.set	.LANCHOR10,. + 0
 12982              	small_minus.8962:
 12983 0000 07C22D06 		.ascii	"\007\302-\006"
 12984              		.text
 12985              	.Letext0:
 12986              		.file 2 "src/decNumber/decContext.h"
 12987              		.file 3 "src/decNumber/decNumber.h"
 12988              		.file 4 "src/decNumber/decimal64.h"
 12989              		.file 5 "src/decNumber/decimal128.h"
 12990              		.file 6 "src/xeq.h"
 12991              		.file 7 "src/data.h"
 12992              		.file 8 "src/storage.h"
 12993              		.file 9 "src/display.h"
 12994              		.file 10 "src/consts.h"
 12995              		.file 11 "src/stats.h"
 12996              		.file 12 "src/revision.h"
 12997              		.file 13 "src/printer.h"
 12998              		.file 14 "src/charset7.h"
 12999              		.file 15 "src/lcd.h"
 13000              		.file 16 "src/decn.h"
 13001              		.file 17 "src/alpha.h"
 13002              		.file 18 "src/int.h"
ARM GAS  /tmp/cc9o0abE.s 			page 365


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/cc9o0abE.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/cc9o0abE.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/cc9o0abE.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/cc9o0abE.s:126    .text.set_dig:0000000000000000 $t
     /tmp/cc9o0abE.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/cc9o0abE.s:220    .text.set_dig:000000000000002c $d
     /tmp/cc9o0abE.s:225    .text.hms_render:0000000000000000 $t
     /tmp/cc9o0abE.s:232    .text.hms_render:0000000000000000 hms_render
     /tmp/cc9o0abE.s:431    .text.hms_render:00000000000000a4 $d
     /tmp/cc9o0abE.s:438    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/cc9o0abE.s:445    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/cc9o0abE.s:559    .text.hms_step:0000000000000000 $t
     /tmp/cc9o0abE.s:566    .text.hms_step:0000000000000000 hms_step
     /tmp/cc9o0abE.s:627    .text.hms_step:0000000000000034 $d
     /tmp/cc9o0abE.s:632    .text.s_s_sized:0000000000000000 $t
     /tmp/cc9o0abE.s:639    .text.s_s_sized:0000000000000000 s_s_sized
     /tmp/cc9o0abE.s:1046   .text.s_s_sized:0000000000000178 $d
     /tmp/cc9o0abE.s:1052   .text.set_exp:0000000000000000 $t
     /tmp/cc9o0abE.s:1059   .text.set_exp:0000000000000000 set_exp
     /tmp/cc9o0abE.s:1330   .text.set_exp:00000000000000f8 $d
     /tmp/cc9o0abE.s:1336   .text.set_separator.part.0:0000000000000000 $t
     /tmp/cc9o0abE.s:1343   .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/cc9o0abE.s:1390   .text.set_decimal.part.0:0000000000000000 $t
     /tmp/cc9o0abE.s:1397   .text.set_decimal.part.0:0000000000000000 set_decimal.part.0
     /tmp/cc9o0abE.s:1444   .text.set_digits_string:0000000000000000 $t
     /tmp/cc9o0abE.s:1451   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/cc9o0abE.s:1563   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/cc9o0abE.s:1567   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/cc9o0abE.s:1574   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/cc9o0abE.s:1697   .text.check_special_dn.isra.0:0000000000000058 $d
     /tmp/cc9o0abE.s:1704   .text.set_x_hms:0000000000000000 $t
     /tmp/cc9o0abE.s:1711   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/cc9o0abE.s:2223   .text.set_x_hms:00000000000001c4 $d
     /tmp/cc9o0abE.s:2232   .text.set_x_fract:0000000000000000 $t
     /tmp/cc9o0abE.s:2239   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/cc9o0abE.s:2662   .text.set_x_fract:0000000000000194 $d
     /tmp/cc9o0abE.s:2674   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/cc9o0abE.s:2675   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/cc9o0abE.s:2678   .text.carry_overflow:0000000000000000 $t
     /tmp/cc9o0abE.s:2685   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/cc9o0abE.s:2806   .text.carry_overflow:000000000000006c $d
     /tmp/cc9o0abE.s:2815   .text.set_int_x:0000000000000000 $t
     /tmp/cc9o0abE.s:2822   .text.set_int_x:0000000000000000 set_int_x
     /tmp/cc9o0abE.s:3580   .text.set_int_x:0000000000000348 $d
               .rodata.CSWTCH.350:0000000000000000 CSWTCH.352
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/cc9o0abE.s:3592   .text.set_int_x:0000000000000360 $t
     /tmp/cc9o0abE.s:3684   .text.set_int_x:00000000000003b8 $d
     /tmp/cc9o0abE.s:3690   .text.getdig:0000000000000000 $t
     /tmp/cc9o0abE.s:3698   .text.getdig:0000000000000000 getdig
     /tmp/cc9o0abE.s:3718   .text.getdig:0000000000000008 $d
     /tmp/cc9o0abE.s:3723   .text.dot:0000000000000000 $t
     /tmp/cc9o0abE.s:3731   .text.dot:0000000000000000 dot
     /tmp/cc9o0abE.s:3754   .text.std_round_fix:0000000000000000 $t
     /tmp/cc9o0abE.s:3762   .text.std_round_fix:0000000000000000 std_round_fix
ARM GAS  /tmp/cc9o0abE.s 			page 366


     /tmp/cc9o0abE.s:3919   .text.std_round_fix:0000000000000078 $d
     /tmp/cc9o0abE.s:3924   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/cc9o0abE.s:3932   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/cc9o0abE.s:4031   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/cc9o0abE.s:4037   .text.set_annunciators:0000000000000000 $t
     /tmp/cc9o0abE.s:4044   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/cc9o0abE.s:4383   .text.set_annunciators:00000000000000d8 $d
     /tmp/cc9o0abE.s:4394   .text.pixel_length:0000000000000000 $t
     /tmp/cc9o0abE.s:4402   .text.pixel_length:0000000000000000 pixel_length
     /tmp/cc9o0abE.s:4493   .text.set_status:0000000000000000 $t
     /tmp/cc9o0abE.s:4500   .text.set_status:0000000000000000 set_status
     /tmp/cc9o0abE.s:4573   .text.set_status:0000000000000038 $d
     /tmp/cc9o0abE.s:4578   .text.set_x_dn:0000000000000000 $t
     /tmp/cc9o0abE.s:4586   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/cc9o0abE.s:5378   .text.set_x_dn:0000000000000364 $d
     /tmp/cc9o0abE.s:5386   .text.set_x_dn:0000000000000378 $t
     /tmp/cc9o0abE.s:5539   .text.set_x_dn:0000000000000424 $d
     /tmp/cc9o0abE.s:5545   .text.set_x_dn:000000000000042e $t
     /tmp/cc9o0abE.s:5571   .text.set_x_dn:000000000000045a $d
     /tmp/cc9o0abE.s:5577   .text.set_x_dn:0000000000000464 $t
     /tmp/cc9o0abE.s:6164   .text.set_x_dn:00000000000006ec $d
     /tmp/cc9o0abE.s:6178   .text.set_x_dn:0000000000000700 $t
     /tmp/cc9o0abE.s:6898   .text.set_x_dn:00000000000009c8 $d
     /tmp/cc9o0abE.s:6908   .text.set_x:0000000000000000 $t
     /tmp/cc9o0abE.s:6915   .text.set_x:0000000000000000 set_x
     /tmp/cc9o0abE.s:6983   .text.format_reg:0000000000000000 $t
     /tmp/cc9o0abE.s:6991   .text.format_reg:0000000000000000 format_reg
     /tmp/cc9o0abE.s:7110   .text.format_reg:0000000000000064 $d
     /tmp/cc9o0abE.s:7116   .text.set_status_right:0000000000000000 $t
     /tmp/cc9o0abE.s:7123   .text.set_status_right:0000000000000000 set_status_right
     /tmp/cc9o0abE.s:7267   .text.set_status_right:000000000000006c $d
     /tmp/cc9o0abE.s:7272   .text.set_status_top.part.0:0000000000000000 $t
     /tmp/cc9o0abE.s:7279   .text.set_status_top.part.0:0000000000000000 set_status_top.part.0
     /tmp/cc9o0abE.s:7404   .text.set_status_top.part.0:0000000000000064 $d
     /tmp/cc9o0abE.s:7409   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/cc9o0abE.s:7467   .text.annunciators:0000000000000000 $t
     /tmp/cc9o0abE.s:7474   .text.annunciators:0000000000000000 annunciators
     /tmp/cc9o0abE.s:8131   .text.annunciators:0000000000000318 $d
     /tmp/cc9o0abE.s:8150   .text.annunciators:0000000000000358 $t
     /tmp/cc9o0abE.s:8663   .text.annunciators:000000000000058c $d
     /tmp/cc9o0abE.s:8684   .rodata.display.str1.4:0000000000000000 $d
     /tmp/cc9o0abE.s:8745   .text.display:0000000000000000 $t
     /tmp/cc9o0abE.s:8753   .text.display:0000000000000000 display
     /tmp/cc9o0abE.s:9420   .text.display:0000000000000304 $d
                            *COM*:0000000000000002 DispPlot
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000004 DispMsg
     /tmp/cc9o0abE.s:9439   .text.display:000000000000033c $t
     /tmp/cc9o0abE.s:10134  .text.display:000000000000060c $d
     /tmp/cc9o0abE.s:10157  .text.display:000000000000064c $t
     /tmp/cc9o0abE.s:11074  .text.display:0000000000000994 $d
     /tmp/cc9o0abE.s:11087  .text.display:00000000000009bc $t
     /tmp/cc9o0abE.s:11927  .text.display:0000000000000d10 $d
     /tmp/cc9o0abE.s:11947  .text.display:0000000000000d40 $t
     /tmp/cc9o0abE.s:12092  .text.display:0000000000000dd4 $d
     /tmp/cc9o0abE.s:12103  .text.frozen_display:0000000000000000 $t
ARM GAS  /tmp/cc9o0abE.s 			page 367


     /tmp/cc9o0abE.s:12111  .text.frozen_display:0000000000000000 frozen_display
     /tmp/cc9o0abE.s:12141  .text.frozen_display:000000000000001c $d
     /tmp/cc9o0abE.s:12146  .text.message:0000000000000000 $t
     /tmp/cc9o0abE.s:12154  .text.message:0000000000000000 message
     /tmp/cc9o0abE.s:12283  .text.message:0000000000000060 $d
     /tmp/cc9o0abE.s:12291  .text.error_message:0000000000000000 $t
     /tmp/cc9o0abE.s:12299  .text.error_message:0000000000000000 error_message
     /tmp/cc9o0abE.s:12565  .text.error_message:00000000000000d0 $d
     /tmp/cc9o0abE.s:12576  .text.stopwatch_message:0000000000000000 $t
     /tmp/cc9o0abE.s:12584  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/cc9o0abE.s:12692  .text.stopwatch_message:000000000000004c $d
     /tmp/cc9o0abE.s:12697  .rodata.str1.4:0000000000000000 $d
     /tmp/cc9o0abE.s:12823  .rodata.CSWTCH.350:0000000000000000 CSWTCH.350
     /tmp/cc9o0abE.s:12842  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/cc9o0abE.s:12816  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/cc9o0abE.s:12905  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/cc9o0abE.s:12717  .rodata:0000000000000000 $d
     /tmp/cc9o0abE.s:12803  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/cc9o0abE.s:12804  .bss.DecimalMode:0000000000000000 $d
     /tmp/cc9o0abE.s:12809  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/cc9o0abE.s:12810  .bss.SeparatorMode:0000000000000000 $d
     /tmp/cc9o0abE.s:12812  .bss.no_status_top:0000000000000000 $d
     /tmp/cc9o0abE.s:12819  .rodata.CSWTCH.350:0000000000000000 $d
     /tmp/cc9o0abE.s:12829  .rodata.CSWTCH.377:0000000000000000 $d
     /tmp/cc9o0abE.s:12833  .rodata.CSWTCH.377:0000000000000000 CSWTCH.377
     /tmp/cc9o0abE.s:12838  .rodata.DIGITS:0000000000000000 $d
     /tmp/cc9o0abE.s:12845  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/cc9o0abE.s:12849  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/cc9o0abE.s:12852  .rodata.S7_INF:0000000000000000 $d
     /tmp/cc9o0abE.s:12856  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/cc9o0abE.s:12859  .rodata.S7_NaN:0000000000000000 $d
     /tmp/cc9o0abE.s:12863  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/cc9o0abE.s:12866  .rodata.S7_STEP:0000000000000000 $d
     /tmp/cc9o0abE.s:12870  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/cc9o0abE.s:12873  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/cc9o0abE.s:12877  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/cc9o0abE.s:12880  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/cc9o0abE.s:12884  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/cc9o0abE.s:12887  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/cc9o0abE.s:12891  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/cc9o0abE.s:12894  .rodata.S_SURE:0000000000000000 $d
     /tmp/cc9o0abE.s:12898  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/cc9o0abE.s:12901  .rodata.SvnRevision:0000000000000000 $d
     /tmp/cc9o0abE.s:12908  .rodata.digtbl:0000000000000000 $d
     /tmp/cc9o0abE.s:12912  .rodata.digtbl:0000000000000000 digtbl
     /tmp/cc9o0abE.s:12921  .rodata.error_table.8663:0000000000000000 $d
     /tmp/cc9o0abE.s:12925  .rodata.error_table.8663:0000000000000000 error_table.8663
     /tmp/cc9o0abE.s:12954  .rodata.libname:0000000000000000 $d
     /tmp/cc9o0abE.s:12958  .rodata.libname:0000000000000000 libname
     /tmp/cc9o0abE.s:12964  .rodata.shift_chars.8762:0000000000000000 $d
     /tmp/cc9o0abE.s:12968  .rodata.shift_chars.8762:0000000000000000 shift_chars.8762
     /tmp/cc9o0abE.s:12971  .rodata.small_dots.8963:0000000000000000 $d
     /tmp/cc9o0abE.s:12975  .rodata.small_dots.8963:0000000000000000 small_dots.8963
     /tmp/cc9o0abE.s:12978  .rodata.small_minus.8962:0000000000000000 $d
     /tmp/cc9o0abE.s:12982  .rodata.small_minus.8962:0000000000000000 small_minus.8962

ARM GAS  /tmp/cc9o0abE.s 			page 368


UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
dn_to_int
dn_mulpow10
decNumberTrunc
const_100
charlengths
findlengths
unpackchar
RectPolConv
xset
num_arg
num_arg_0
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
ARM GAS  /tmp/cc9o0abE.s 			page 369


decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
build_value
get_reg_n_int
cur_shift
ShowRegister
replace_char
stack_size
get_cmdline
reset_disp
show_stack
show_flags
user_pc
wait_for_display
ProgFree
argcmds
WasDataEntry
scopy_char
op_r2p
scopy_spc
current_catalogue
catcmd
get_const
getprog
prt
multicmds
find_label_from
free_mem
free_flash
findmultilbl
slen
global_regs
alpha_rcl_s
local_regs
copyreg
sigma_val
SizeStatRegs
StackBase
getX
packed_from_number
set_NaN
do_conv
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing

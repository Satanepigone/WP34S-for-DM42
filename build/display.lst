ARM GAS  /tmp/ccdQiHBS.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"display.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.set_separator_decimal_modes,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	set_separator_decimal_modes:
  27              	.LFB0:
  28              		.file 1 "src/display.c"
   1:src/display.c **** /* This file is part of 34S.
   2:src/display.c ****  * 
   3:src/display.c ****  * 34S is free software: you can redistribute it and/or modify
   4:src/display.c ****  * it under the terms of the GNU General Public License as published by
   5:src/display.c ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/display.c ****  * (at your option) any later version.
   7:src/display.c ****  * 
   8:src/display.c ****  * 34S is distributed in the hope that it will be useful,
   9:src/display.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/display.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/display.c ****  * GNU General Public License for more details.
  12:src/display.c ****  * 
  13:src/display.c ****  * You should have received a copy of the GNU General Public License
  14:src/display.c ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/display.c ****  */
  16:src/display.c **** 
  17:src/display.c **** #include "features.h"
  18:src/display.c **** #include "xeq.h" 
  19:src/display.c **** #include "storage.h"
  20:src/display.c **** #include "display.h"
  21:src/display.c **** #include "lcd.h"
  22:src/display.c **** #include "int.h"
  23:src/display.c **** #include "consts.h"
  24:src/display.c **** #include "alpha.h"
  25:src/display.c **** #include "stats.h"
  26:src/display.c **** #include "decn.h"
  27:src/display.c **** #include "revision.h"
  28:src/display.c **** #ifdef INFRARED
  29:src/display.c **** #include "printer.h"
  30:src/display.c **** #endif
ARM GAS  /tmp/ccdQiHBS.s 			page 2


  31:src/display.c **** #ifndef DM42
  32:src/display.c **** #include "serial.h"
  33:src/display.c **** #endif
  34:src/display.c **** 
  35:src/display.c **** static enum separator_modes { SEP_NONE, SEP_COMMA, SEP_DOT } SeparatorMode;
  36:src/display.c **** static enum decimal_modes { DECIMAL_DOT, DECIMAL_COMMA } DecimalMode;
  37:src/display.c **** 
  38:src/display.c **** static void set_status_sized(const char *, int);
  39:src/display.c **** static void set_status_sized_top(const char *, int);
  40:src/display.c **** static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d);
  41:src/display.c **** 
  42:src/display.c **** static void set_status(const char *);
  43:src/display.c **** static void set_status_top(const char *);
  44:src/display.c **** #ifdef TOP_ROW
  45:src/display.c **** static void set_status_top_always(const char *);
  46:src/display.c **** #endif
  47:src/display.c **** 
  48:src/display.c **** static void set_status_right(const char *);
  49:src/display.c **** static void set_status_graphic(const unsigned char *);
  50:src/display.c **** 
  51:src/display.c **** static void set_int_x(const long long int value, char *res);
  52:src/display.c **** 
  53:src/display.c **** const char *DispMsg; // What to display in message area
  54:src/display.c **** 
  55:src/display.c **** short int DispPlot;
  56:src/display.c **** short int no_status_top = 0;
  57:src/display.c **** 
  58:src/display.c **** FLAG ShowRPN;		   // controls visibility of RPN annunciator
  59:src/display.c **** FLAG JustDisplayed;	   // Avoid duplicate calls to display()
  60:src/display.c **** SMALL_INT IntMaxWindow;    // Number of windows for integer display
  61:src/display.c **** FLAG IoAnnunciator;	   // Status of the little "=" sign
  62:src/display.c **** 
  63:src/display.c **** /* Message strings
  64:src/display.c ****  * Strings starting S7_ are for the lower 7 segment line.  Strings starting S_
  65:src/display.c ****  * are for the upper dot matrix line.
  66:src/display.c ****  */
  67:src/display.c **** static const char S_SURE[] = "Sure?";
  68:src/display.c **** 
  69:src/display.c **** static const char S7_ERROR[] = "Error";		/* Default lower line error display */
  70:src/display.c **** static const char S7_NaN[] = "not nuMmEric";	/* Displaying NaN in lower line */
  71:src/display.c **** static const char S7_INF[] = "Infinity";	/* Displaying infinity in lower line */
  72:src/display.c **** static const char S7_STEP[] = "StEP ";		/* Step marker in program mode (lower line) */
  73:src/display.c **** 
  74:src/display.c **** static const char S7_fract_EQ[] = " = ";	/* Exponent in fraction mode indicates low, equal or high 
  75:src/display.c **** static const char S7_fract_LT[] = " Lt";
  76:src/display.c **** static const char S7_fract_GT[] = " Gt";
  77:src/display.c **** 
  78:src/display.c **** static const char libname[][5] = {
  79:src/display.c ****   "rAMm", "Lib ", "Bup ",
  80:src/display.c **** #ifndef REALBUILD
  81:src/display.c ****   "roMm"
  82:src/display.c **** #endif
  83:src/display.c **** };
  84:src/display.c **** 
  85:src/display.c **** 
  86:src/display.c **** 
  87:src/display.c **** /* Set the separator and decimal mode globals
ARM GAS  /tmp/ccdQiHBS.s 			page 3


  88:src/display.c ****  */
  89:src/display.c **** static void set_separator_decimal_modes(void) {
  29              		.loc 1 89 47 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  90:src/display.c ****   // Separators used by various modes
  91:src/display.c ****   if (UState.fraccomma) {
  34              		.loc 1 91 3 view .LVU1
  35              		.loc 1 91 7 is_stmt 0 view .LVU2
  36 0000 114B     		ldr	r3, .L14
  92:src/display.c ****     SeparatorMode = SEP_DOT;
  37              		.loc 1 92 19 view .LVU3
  38 0002 1249     		ldr	r1, .L14+4
  91:src/display.c ****     SeparatorMode = SEP_DOT;
  39              		.loc 1 91 7 view .LVU4
  40 0004 1A68     		ldr	r2, [r3]
  41 0006 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
  91:src/display.c ****     SeparatorMode = SEP_DOT;
  42              		.loc 1 91 6 view .LVU5
  43 000a 13F02000 		ands	r0, r3, #32
  89:src/display.c ****   // Separators used by various modes
  44              		.loc 1 89 47 view .LVU6
  45 000e 30B4     		push	{r4, r5}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
  91:src/display.c ****     SeparatorMode = SEP_DOT;
  49              		.loc 1 91 6 view .LVU7
  50 0010 0ED0     		beq	.L2
  51              		.loc 1 92 5 is_stmt 1 view .LVU8
  93:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  52              		.loc 1 93 17 is_stmt 0 view .LVU9
  53 0012 0F48     		ldr	r0, .L14+8
  94:src/display.c ****   }
  95:src/display.c ****   else {
  96:src/display.c ****     SeparatorMode = SEP_COMMA;
  97:src/display.c ****     DecimalMode = DECIMAL_DOT;
  98:src/display.c ****   }
  99:src/display.c ****   if ((UState.intm && UState.nointseparator) || (!UState.intm && UState.nothousands))
  54              		.loc 1 99 8 view .LVU10
  55 0014 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
  93:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  56              		.loc 1 93 17 view .LVU11
  57 0018 0124     		movs	r4, #1
  92:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  58              		.loc 1 92 19 view .LVU12
  59 001a 0225     		movs	r5, #2
  93:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  60              		.loc 1 93 17 view .LVU13
  61 001c 0470     		strb	r4, [r0]
  62              		.loc 1 99 6 view .LVU14
  63 001e D007     		lsls	r0, r2, #31
  92:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  64              		.loc 1 92 19 view .LVU15
  65 0020 0D70     		strb	r5, [r1]
ARM GAS  /tmp/ccdQiHBS.s 			page 4


  93:src/display.c ****     DecimalMode = DECIMAL_COMMA;
  66              		.loc 1 93 5 is_stmt 1 view .LVU16
  67              		.loc 1 99 3 view .LVU17
  68              		.loc 1 99 6 is_stmt 0 view .LVU18
  69 0022 0DD4     		bmi	.L13
  70              	.L4:
  71              		.loc 1 99 63 discriminator 4 view .LVU19
  72 0024 5B06     		lsls	r3, r3, #25
  73 0026 01D5     		bpl	.L1
  74              	.L5:
 100:src/display.c ****     SeparatorMode = SEP_NONE;
  75              		.loc 1 100 5 is_stmt 1 view .LVU20
  76              		.loc 1 100 19 is_stmt 0 view .LVU21
  77 0028 0023     		movs	r3, #0
  78 002a 0B70     		strb	r3, [r1]
  79              	.L1:
 101:src/display.c **** }
  80              		.loc 1 101 1 view .LVU22
  81 002c 30BC     		pop	{r4, r5}
  82              		.cfi_remember_state
  83              		.cfi_restore 5
  84              		.cfi_restore 4
  85              		.cfi_def_cfa_offset 0
  86 002e 7047     		bx	lr
  87              	.L2:
  88              		.cfi_restore_state
  96:src/display.c ****     DecimalMode = DECIMAL_DOT;
  89              		.loc 1 96 5 is_stmt 1 view .LVU23
  97:src/display.c ****   }
  90              		.loc 1 97 17 is_stmt 0 view .LVU24
  91 0030 074C     		ldr	r4, .L14+8
  99:src/display.c ****     SeparatorMode = SEP_NONE;
  92              		.loc 1 99 8 view .LVU25
  93 0032 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
  97:src/display.c ****   }
  94              		.loc 1 97 17 view .LVU26
  95 0036 2070     		strb	r0, [r4]
  96:src/display.c ****     DecimalMode = DECIMAL_DOT;
  96              		.loc 1 96 19 view .LVU27
  97 0038 0125     		movs	r5, #1
  99:src/display.c ****     SeparatorMode = SEP_NONE;
  98              		.loc 1 99 6 view .LVU28
  99 003a D007     		lsls	r0, r2, #31
  96:src/display.c ****     DecimalMode = DECIMAL_DOT;
 100              		.loc 1 96 19 view .LVU29
 101 003c 0D70     		strb	r5, [r1]
  97:src/display.c ****   }
 102              		.loc 1 97 5 is_stmt 1 view .LVU30
  99:src/display.c ****     SeparatorMode = SEP_NONE;
 103              		.loc 1 99 3 view .LVU31
  99:src/display.c ****     SeparatorMode = SEP_NONE;
 104              		.loc 1 99 6 is_stmt 0 view .LVU32
 105 003e F1D5     		bpl	.L4
 106              	.L13:
  99:src/display.c ****     SeparatorMode = SEP_NONE;
 107              		.loc 1 99 20 discriminator 1 view .LVU33
 108 0040 1A06     		lsls	r2, r3, #24
ARM GAS  /tmp/ccdQiHBS.s 			page 5


 109 0042 F1D4     		bmi	.L5
 110              		.loc 1 101 1 view .LVU34
 111 0044 30BC     		pop	{r4, r5}
 112              		.cfi_restore 5
 113              		.cfi_restore 4
 114              		.cfi_def_cfa_offset 0
 115 0046 7047     		bx	lr
 116              	.L15:
 117              		.align	2
 118              	.L14:
 119 0048 00000000 		.word	main_ram
 120 004c 00000000 		.word	.LANCHOR0
 121 0050 00000000 		.word	.LANCHOR1
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.set_dig,"ax",%progbits
 126              		.align	1
 127              		.p2align 2,,3
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	set_dig:
 134              	.LVL0:
 135              	.LFB10:
 102:src/display.c **** 
 103:src/display.c **** 
 104:src/display.c **** /* Table of error messages.
 105:src/display.c ****  * These consist of a double string.  The first is displayed in the
 106:src/display.c ****  * top line, the second in the bottom.  If the second is empty, "Error"
 107:src/display.c ****  * is displayed instead.  To get a blank lower line, include a space.
 108:src/display.c ****  */
 109:src/display.c **** void error_message(const unsigned int e) 
 110:src/display.c **** {
 111:src/display.c **** #define MSG1(top) top "\0"
 112:src/display.c **** #define MSG2(top,bottom) top "\0" bottom
 113:src/display.c **** 
 114:src/display.c ****   // NB: this MUST be in the same order as the error #defines in errors.h
 115:src/display.c ****   static const char *const error_table[] = 
 116:src/display.c ****     {
 117:src/display.c ****       // manually get the order correct!
 118:src/display.c ****       MSG2("Running", "ProGraMm"),
 119:src/display.c ****       MSG1("Domain"),
 120:src/display.c ****       MSG2("Bad time", "or dAtE"),
 121:src/display.c ****       MSG2("Undefined", "Op-COdE"),
 122:src/display.c ****       MSG1("+\237"),
 123:src/display.c ****       MSG1("-\237"),
 124:src/display.c ****       MSG2("No such", "LAbEL"),
 125:src/display.c ****       MSG2("Illegal", "OPErAtion"),
 126:src/display.c ****       MSG1("Out of range"),
 127:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 128:src/display.c ****       MSG2("Bad digit", "1"),
 129:src/display.c ****       MSG2("Too long", "1"),
 130:src/display.c **** #else
 131:src/display.c ****       MSG1("Bad digit"),
 132:src/display.c ****       MSG1("Too long"),
 133:src/display.c **** #endif
ARM GAS  /tmp/ccdQiHBS.s 			page 6


 134:src/display.c ****       MSG2("RAM is", "FuLL"),
 135:src/display.c ****       MSG2("Stack", "CLASH"),
 136:src/display.c ****       MSG1("Bad mode"),
 137:src/display.c ****       MSG2("Word\006\006\006size", "too SMmALL"),
 138:src/display.c ****       MSG2("Too few", "dAtA PointS"),
 139:src/display.c ****       MSG2("Invalid", "ParaMmEtEr"),
 140:src/display.c ****       MSG1("I/O"),
 141:src/display.c ****       MSG2("Invalid", "dAtA"),
 142:src/display.c ****       MSG2("Write", "ProtEctEd"),
 143:src/display.c ****       MSG2("No root", "Found"),
 144:src/display.c ****       MSG2("Matrix", "MmISMmAtCH"),
 145:src/display.c ****       MSG1("Singular"),
 146:src/display.c ****       MSG2("Flash is", "FuLL"),
 147:src/display.c ****       MSG2("No crystal", "InStaLLEd"),
 148:src/display.c **** #ifndef SHIFT_EXPONENT
 149:src/display.c **** #  ifdef WARNINGS_IN_UPPER_LINE_ONLY
 150:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 151:src/display.c ****       MSG2("Too\007\304 small", "1"),
 152:src/display.c **** #     else
 153:src/display.c ****       MSG2("Too small", "1"),
 154:src/display.c **** #     endif
 155:src/display.c ****       MSG2("Too big", "1"),
 156:src/display.c **** #  else
 157:src/display.c **** #     ifdef INCLUDE_FONT_ESCAPE
 158:src/display.c ****       MSG1("Too\007\304 small"),
 159:src/display.c **** #     else
 160:src/display.c ****       MSG1("Too small"),
 161:src/display.c **** #     endif
 162:src/display.c ****       MSG1("Too big"),
 163:src/display.c **** #  endif
 164:src/display.c **** #endif
 165:src/display.c **** #ifdef INCLUDE_C_LOCK
 166:src/display.c ****       MSG2("Use even reg","for CoMmPLEH"),
 167:src/display.c **** #endif
 168:src/display.c ****       MSG2("\004 \035", "X"),		// Integral ~
 169:src/display.c **** #if INTERRUPT_XROM_TICKS > 0
 170:src/display.c ****       MSG2("Interrupted", "X"),
 171:src/display.c **** #endif
 172:src/display.c ****     };
 173:src/display.c **** #undef MSG1
 174:src/display.c **** #undef MSG2
 175:src/display.c **** 
 176:src/display.c ****   if (e != ERR_NONE || Running) {
 177:src/display.c ****     const char *p = error_table[e];
 178:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 179:src/display.c ****     if (*q == '\0')
 180:src/display.c ****       q = S7_ERROR;
 181:src/display.c ****     if (*q == 'X') {
 182:src/display.c ****       DispMsg = p;
 183:src/display.c ****       frozen_display();
 184:src/display.c ****     }
 185:src/display.c ****     else {
 186:src/display.c **** #ifdef WARNINGS_IN_UPPER_LINE_ONLY
 187:src/display.c ****       if (*q == '1')
 188:src/display.c **** 	q = CNULL;
 189:src/display.c **** #endif
 190:src/display.c ****       message(p, q);
ARM GAS  /tmp/ccdQiHBS.s 			page 7


 191:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 192:src/display.c ****     }
 193:src/display.c **** #ifdef INFRARED
 194:src/display.c ****     if (Tracing) {
 195:src/display.c ****       if (*q == 'X')
 196:src/display.c **** 	print_reg(regX_idx, p, 0);
 197:src/display.c ****       else {
 198:src/display.c **** 	print_tab(0);
 199:src/display.c **** 	print_line(p, 0);
 200:src/display.c **** 	print(' ');
 201:src/display.c **** 	while (*q != '\0') {
 202:src/display.c **** 	  int c = *q;
 203:src/display.c **** 	  if (c >= 'A')
 204:src/display.c **** 	    c |= 0x60; // ASCII lower case
 205:src/display.c **** 	  print(c);
 206:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 207:src/display.c **** 	    ++q;
 208:src/display.c **** 	  ++q;
 209:src/display.c **** 	}
 210:src/display.c **** 	print_advance( 0 );
 211:src/display.c ****       }
 212:src/display.c ****     }
 213:src/display.c **** #endif
 214:src/display.c ****   }
 215:src/display.c **** }
 216:src/display.c **** 
 217:src/display.c **** 
 218:src/display.c **** /* Define a limited character set for the 7-segment portion of the
 219:src/display.c ****  * display.
 220:src/display.c ****  */
 221:src/display.c **** #define D_TOP 64
 222:src/display.c **** #define D_TL 32
 223:src/display.c **** #define D_TR 8
 224:src/display.c **** #define D_MIDDLE 16
 225:src/display.c **** #define D_BL 4
 226:src/display.c **** #define D_BR 1
 227:src/display.c **** #define D_BOTTOM 2
 228:src/display.c **** 
 229:src/display.c **** #include "charset7.h"
 230:src/display.c **** 
 231:src/display.c **** #ifndef REALBUILD
 232:src/display.c **** #define SET_MANT_SIGN set_mant_sign_dot()
 233:src/display.c **** #define CLR_MANT_SIGN clr_mant_sign_dot()
 234:src/display.c **** #define SET_EXP_SIGN set_exp_sign_dot()
 235:src/display.c **** #define CLR_EXP_SIGN clr_exp_sign_dot()
 236:src/display.c **** 
 237:src/display.c **** static void set_mant_sign_dot()
 238:src/display.c **** {
 239:src/display.c ****   set_dot(MANT_SIGN);
 240:src/display.c **** }
 241:src/display.c **** 
 242:src/display.c **** static void clr_mant_sign_dot()
 243:src/display.c **** {
 244:src/display.c ****   clr_dot(MANT_SIGN);
 245:src/display.c **** }
 246:src/display.c **** 
 247:src/display.c **** static void set_exp_sign_dot()
ARM GAS  /tmp/ccdQiHBS.s 			page 8


 248:src/display.c **** {
 249:src/display.c ****   set_dot(EXP_SIGN);
 250:src/display.c **** }
 251:src/display.c **** 
 252:src/display.c **** static void clr_exp_sign_dot()
 253:src/display.c **** {
 254:src/display.c ****   clr_dot(EXP_SIGN);
 255:src/display.c **** }
 256:src/display.c **** 
 257:src/display.c **** #else
 258:src/display.c **** #define SET_MANT_SIGN set_dot(MANT_SIGN)
 259:src/display.c **** #define CLR_MANT_SIGN clr_dot(MANT_SIGN)
 260:src/display.c **** 
 261:src/display.c **** #define SET_EXP_SIGN set_dot(EXP_SIGN)
 262:src/display.c **** #define CLR_EXP_SIGN clr_dot(EXP_SIGN)
 263:src/display.c **** 
 264:src/display.c **** #endif
 265:src/display.c **** 
 266:src/display.c **** #ifndef REALBUILD
 267:src/display.c **** int getdig(int ch)
 268:src/display.c **** #else
 269:src/display.c ****   static int getdig(int ch)
 270:src/display.c **** #endif
 271:src/display.c **** {
 272:src/display.c ****   // perform index lookup
 273:src/display.c ****   return digtbl[ch&0xff];
 274:src/display.c **** }
 275:src/display.c **** 
 276:src/display.c **** void dot(int n, int on) {
 277:src/display.c ****   if (on)	set_dot(n);
 278:src/display.c ****   else	clr_dot(n);
 279:src/display.c **** }
 280:src/display.c **** 
 281:src/display.c **** 
 282:src/display.c **** /* Set the decimal point *after* the indicated digit
 283:src/display.c ****  * The marker can be either a comma or a dot depending on the value
 284:src/display.c ****  * of decimal.
 285:src/display.c ****  */
 286:src/display.c **** static char *set_decimal(const int posn, const enum decimal_modes decimal, char *res) {
 287:src/display.c ****   if (res) {
 288:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 289:src/display.c ****   } else {
 290:src/display.c ****     set_dot(posn+7);
 291:src/display.c ****     if (decimal != DECIMAL_DOT)
 292:src/display.c ****       set_dot(posn+8);
 293:src/display.c ****   }
 294:src/display.c ****   return res;
 295:src/display.c **** }
 296:src/display.c **** 
 297:src/display.c **** /* Set the digit group separator *before* the specified digit.
 298:src/display.c ****  * This can be nothing, a comma or a dot depending on the state of the
 299:src/display.c ****  * sep argument.
 300:src/display.c ****  */
 301:src/display.c **** static char *set_separator(int posn, const enum separator_modes sep, char *res) {
 302:src/display.c ****   if (sep == SEP_NONE)
 303:src/display.c ****     return res;
 304:src/display.c ****   if (res) {
ARM GAS  /tmp/ccdQiHBS.s 			page 9


 305:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 306:src/display.c ****     else *res++ = '.';
 307:src/display.c ****   } else {
 308:src/display.c ****     posn -= SEGS_PER_DIGIT;
 309:src/display.c ****     set_dot(posn+7);
 310:src/display.c ****     if (sep == SEP_COMMA)
 311:src/display.c ****       set_dot(posn+8);
 312:src/display.c ****   }
 313:src/display.c ****   return res;
 314:src/display.c **** }
 315:src/display.c **** 
 316:src/display.c **** /* Set a digit in positions [base, base+6] */
 317:src/display.c **** static void set_dig(int base, int ch)
 318:src/display.c **** {
 136              		.loc 1 318 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 319:src/display.c ****   int i;
 140              		.loc 1 319 3 view .LVU36
 320:src/display.c ****   int c = getdig(ch);
 141              		.loc 1 320 3 view .LVU37
 142              	.LBB162:
 143              	.LBI162:
 267:src/display.c **** #else
 144              		.loc 1 267 5 view .LVU38
 145              	.LBB163:
 273:src/display.c **** }
 146              		.loc 1 273 3 view .LVU39
 273:src/display.c **** }
 147              		.loc 1 273 16 is_stmt 0 view .LVU40
 148 0000 0A4B     		ldr	r3, .L24
 273:src/display.c **** }
 149              		.loc 1 273 19 view .LVU41
 150 0002 C9B2     		uxtb	r1, r1
 151              	.LVL1:
 273:src/display.c **** }
 152              		.loc 1 273 19 view .LVU42
 153              	.LBE163:
 154              	.LBE162:
 318:src/display.c ****   int i;
 155              		.loc 1 318 1 view .LVU43
 156 0004 70B5     		push	{r4, r5, r6, lr}
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162              	.LBB165:
 163              	.LBB164:
 273:src/display.c **** }
 164              		.loc 1 273 16 view .LVU44
 165 0006 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 166              	.LVL2:
 273:src/display.c **** }
 167              		.loc 1 273 16 view .LVU45
 168              	.LBE164:
ARM GAS  /tmp/ccdQiHBS.s 			page 10


 169              	.LBE165:
 321:src/display.c ****   for (i=6; i>=0; i--)
 170              		.loc 1 321 3 is_stmt 1 view .LVU46
 171              		.loc 1 321 13 view .LVU47
 172 0008 851D     		adds	r5, r0, #6
 173              		.loc 1 321 9 is_stmt 0 view .LVU48
 174 000a 0624     		movs	r4, #6
 175 000c 03E0     		b	.L19
 176              	.LVL3:
 177              	.L23:
 322:src/display.c ****     {
 323:src/display.c ****       //		dot(base, c & (1 << i));
 324:src/display.c ****       if (c & (1 << i))
 325:src/display.c **** 	set_dot(base);
 178              		.loc 1 325 2 view .LVU49
 179 000e FFF7FEFF 		bl	set_dot
 180              	.LVL4:
 326:src/display.c ****       else
 327:src/display.c **** 	clr_dot(base);
 328:src/display.c ****       base++;
 181              		.loc 1 328 7 is_stmt 1 view .LVU50
 321:src/display.c ****     {
 182              		.loc 1 321 19 view .LVU51
 321:src/display.c ****     {
 183              		.loc 1 321 3 is_stmt 0 view .LVU52
 184 0012 013C     		subs	r4, r4, #1
 185              	.LVL5:
 321:src/display.c ****     {
 186              		.loc 1 321 3 view .LVU53
 187 0014 09D3     		bcc	.L22
 188              	.LVL6:
 189              	.L19:
 325:src/display.c ****       else
 190              		.loc 1 325 2 is_stmt 1 view .LVU54
 327:src/display.c ****       base++;
 191              		.loc 1 327 2 view .LVU55
 324:src/display.c **** 	set_dot(base);
 192              		.loc 1 324 11 is_stmt 0 view .LVU56
 193 0016 46FA04F3 		asr	r3, r6, r4
 324:src/display.c **** 	set_dot(base);
 194              		.loc 1 324 10 view .LVU57
 195 001a DB07     		lsls	r3, r3, #31
 196 001c A5EB0400 		sub	r0, r5, r4
 197              	.LVL7:
 324:src/display.c **** 	set_dot(base);
 198              		.loc 1 324 7 is_stmt 1 view .LVU58
 324:src/display.c **** 	set_dot(base);
 199              		.loc 1 324 10 is_stmt 0 view .LVU59
 200 0020 F5D4     		bmi	.L23
 327:src/display.c ****       base++;
 201              		.loc 1 327 2 view .LVU60
 202 0022 FFF7FEFF 		bl	clr_dot
 203              	.LVL8:
 204              		.loc 1 328 7 is_stmt 1 view .LVU61
 321:src/display.c ****     {
 205              		.loc 1 321 19 view .LVU62
 321:src/display.c ****     {
ARM GAS  /tmp/ccdQiHBS.s 			page 11


 206              		.loc 1 321 3 is_stmt 0 view .LVU63
 207 0026 013C     		subs	r4, r4, #1
 208              	.LVL9:
 321:src/display.c ****     {
 209              		.loc 1 321 3 view .LVU64
 210 0028 F5D2     		bcs	.L19
 211              	.LVL10:
 212              	.L22:
 329:src/display.c ****     }
 330:src/display.c **** }
 213              		.loc 1 330 1 view .LVU65
 214 002a 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL11:
 216              	.L25:
 217              		.loc 1 330 1 view .LVU66
 218              		.align	2
 219              	.L24:
 220 002c 00000000 		.word	.LANCHOR2
 221              		.cfi_endproc
 222              	.LFE10:
 224              		.section	.text.hms_render,"ax",%progbits
 225              		.align	1
 226              		.p2align 2,,3
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	hms_render:
 233              	.LVL12:
 234              	.LFB21:
 331:src/display.c **** 
 332:src/display.c **** static char *set_dig_s(int base, int ch, char *res) {
 333:src/display.c ****   if (res) *res++ = ch;
 334:src/display.c ****   else	set_dig(base, ch);
 335:src/display.c ****   return res;
 336:src/display.c **** }
 337:src/display.c **** 
 338:src/display.c **** 
 339:src/display.c **** static void set_digits_string(const char *msg, int j) {
 340:src/display.c ****   for (; *msg != '\0'; msg++) {
 341:src/display.c ****     if (*msg == '.' || *msg == ',')
 342:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 343:src/display.c ****     else {
 344:src/display.c ****       set_dig_s(j, *msg, CNULL);
 345:src/display.c ****       j += SEGS_PER_DIGIT;
 346:src/display.c ****     }
 347:src/display.c ****   }
 348:src/display.c **** }
 349:src/display.c **** 
 350:src/display.c **** static void set_exp_digits_string(const char *msg, char *res) {
 351:src/display.c ****   int i;
 352:src/display.c ****   const int n = res == NULL ? 3 : 4;
 353:src/display.c **** 
 354:src/display.c ****   for (i=0; i<n && msg[i] != '\0'; i++)
 355:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 356:src/display.c **** }
 357:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 12


 358:src/display.c **** /* Force the exponent display
 359:src/display.c ****  * Flags: Bit 0 (LSB): Zero pad.
 360:src/display.c ****  *            1:       Exponent is negative (useful for negative zero).
 361:src/display.c ****  *            2:       Pad with spaces. Overrides bit 0 if PAD_EXPONENTS_WITH_SPACES
 362:src/display.c ****  *                     is enabled, otherwise it's the same as bit 0.
 363:src/display.c ****  *            3:       Exponent is being entered. Show all four digits if
 364:src/display.c ****  *                     LARGE_EXPONENT_ENTRY is enabled;
 365:src/display.c ****  *            4:       The mantissa is too long, cut off the last three digits.
 366:src/display.c ****  */
 367:src/display.c **** static void set_exp(int exp, int flags, char *res) {
 368:src/display.c ****   union {
 369:src/display.c ****     char buf[4];
 370:src/display.c ****     int i;
 371:src/display.c ****   } u;
 372:src/display.c ****   int negative;
 373:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 374:src/display.c ****   int thousands;
 375:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 376:src/display.c ****   const int show_large_exponent = !get_user_flag(regL_idx);
 377:src/display.c **** #  elif SHOW_LARGE_EXPONENT == 2
 378:src/display.c ****   const int show_large_exponent = get_user_flag(regL_idx);
 379:src/display.c **** #  else
 380:src/display.c ****   const int show_large_exponent = 1;
 381:src/display.c **** #  endif
 382:src/display.c **** #else
 383:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 384:src/display.c ****   int thousands;
 385:src/display.c **** #  endif
 386:src/display.c ****   const int show_large_exponent = 0;
 387:src/display.c **** #endif
 388:src/display.c **** 
 389:src/display.c ****   negative = flags & 2;
 390:src/display.c ****   if (exp < 0) {
 391:src/display.c ****     negative = 1;
 392:src/display.c ****     exp = -exp;
 393:src/display.c ****   }
 394:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 395:src/display.c ****   thousands = exp / 1000;
 396:src/display.c **** #endif
 397:src/display.c ****   if (res) {
 398:src/display.c **** #ifdef INCLUDE_YREG_CODE
 399:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 400:src/display.c ****     if (thousands != 0) {
 401:src/display.c **** #else
 402:src/display.c ****       if (exp > 999) {
 403:src/display.c **** #endif
 404:src/display.c **** 	if (!negative) *res++ = ':'; // Separator for large +ve exponents
 405:src/display.c **** 	// No exponent separator for large -ve exponents
 406:src/display.c ****       }
 407:src/display.c ****       else *res++ = 'e'; // Normal separator
 408:src/display.c **** #else
 409:src/display.c ****       *res++ = 'e';
 410:src/display.c **** #endif
 411:src/display.c ****       if (negative) *res++ = '-';
 412:src/display.c ****     }
 413:src/display.c ****     else {
 414:src/display.c ****       if (negative) SET_EXP_SIGN;
ARM GAS  /tmp/ccdQiHBS.s 			page 13


 415:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 416:src/display.c ****       if (thousands != 0) {
 417:src/display.c **** #else
 418:src/display.c **** 	if (exp > 999) {
 419:src/display.c **** #endif
 420:src/display.c **** 	  if (!show_large_exponent
 421:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 422:src/display.c **** 	      && (flags & 8) == 0
 423:src/display.c **** #endif
 424:src/display.c **** 	      ) {
 425:src/display.c **** #ifdef REALBUILD
 426:src/display.c **** 	    u.i = 'H' + 'I' * 0x100 + 'G' * 0x10000L; // Smaller ARM code
 427:src/display.c **** #else
 428:src/display.c **** 	    scopy(u.buf, "HIG"); // More portable code
 429:src/display.c **** #endif
 430:src/display.c **** 	    goto no_number;
 431:src/display.c **** 	  }
 432:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 433:src/display.c **** 	  else {
 434:src/display.c **** 	    exp -= thousands * 1000;
 435:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 436:src/display.c **** 	    if (flags & 16) {
 437:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 438:src/display.c **** 	      int i;
 439:src/display.c **** 
 440:src/display.c **** 	      for (i = 9 * SEGS_PER_DIGIT - 2; i < 11 * SEGS_PER_DIGIT; ++i)
 441:src/display.c **** 		// Clear digits and separators
 442:src/display.c **** 		clr_dot(i);
 443:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 444:src/display.c **** 	    }
 445:src/display.c **** #  endif
 446:src/display.c **** 	    if (negative) {
 447:src/display.c **** 	      CLR_EXP_SIGN;
 448:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 449:src/display.c **** 	    }
 450:src/display.c **** 	    set_dig(11 * SEGS_PER_DIGIT, thousands + '0');
 451:src/display.c **** 	    flags = 1;
 452:src/display.c **** 	  }
 453:src/display.c **** #endif
 454:src/display.c **** 	}
 455:src/display.c ****       }
 456:src/display.c **** #ifdef REALBUILD
 457:src/display.c ****       u.i = 0; // Smaller ARM code
 458:src/display.c **** #else
 459:src/display.c ****       xset(u.buf, '\0', sizeof(u.buf)); // More portable code
 460:src/display.c **** #endif
 461:src/display.c ****       if (flags & 5) {
 462:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 463:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 464:src/display.c **** 	if (flags & 4) { // Pad exponent with spaces instead of zeros
 465:src/display.c **** 	  int i;
 466:src/display.c **** 
 467:src/display.c **** 	  for (i = 0; i < 2; ++i) {
 468:src/display.c **** 	    if (u.buf[i] == '0')
 469:src/display.c **** 	      u.buf[i] = ' ';
 470:src/display.c **** 	    else
 471:src/display.c **** 	      break;
ARM GAS  /tmp/ccdQiHBS.s 			page 14


 472:src/display.c **** 	  }
 473:src/display.c **** 	  if (i != 0 && negative) {
 474:src/display.c **** 	    // Move minus sign to right in front of exponent
 475:src/display.c **** 	    CLR_EXP_SIGN;
 476:src/display.c **** 	    u.buf[i - 1] = '-';
 477:src/display.c **** 	  }
 478:src/display.c **** 	}
 479:src/display.c **** #endif
 480:src/display.c ****       }
 481:src/display.c ****       else
 482:src/display.c **** 	num_arg(u.buf, exp);
 483:src/display.c ****     no_number:
 484:src/display.c ****       set_exp_digits_string(u.buf, res);
 485:src/display.c ****     }
 486:src/display.c **** 
 487:src/display.c ****     static void carry_overflow(void) {
 488:src/display.c ****       const int base = SEGS_EXP_BASE;
 489:src/display.c ****       int c;
 490:src/display.c ****       unsigned int b;
 491:src/display.c **** 
 492:src/display.c ****       // Figure out the base
 493:src/display.c ****       switch (State2.smode) {
 494:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 495:src/display.c ****       case SDISP_OCT:	b = 8;		break;
 496:src/display.c ****       case SDISP_DEC:	b = 10;		break;
 497:src/display.c ****       case SDISP_HEX:	b = 16;		break;
 498:src/display.c ****       default:	b = UState.int_base+1;	break;
 499:src/display.c ****       }
 500:src/display.c **** 
 501:src/display.c ****       // Display the base as the first exponent digit
 502:src/display.c ****       if (b > 10 && b < 16)
 503:src/display.c **** 	SET_EXP_SIGN;
 504:src/display.c ****       c = "B34567o9D12345h"[b-2];
 505:src/display.c ****       set_dig(base, c);
 506:src/display.c **** 
 507:src/display.c ****       // Carry and overflow are the next two exponent digits if they are set
 508:src/display.c ****       if (get_carry())
 509:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 510:src/display.c ****       if (get_overflow())
 511:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 512:src/display.c ****     }
 513:src/display.c **** 
 514:src/display.c ****     static int set_x_fract(const decNumber *rgx, char *res);
 515:src/display.c ****     static void set_x_hms(const decNumber *rgx, char *res);
 516:src/display.c **** #if !(defined INCLUDE_YREG_CODE && defined INCLUDE_YREG_HMS)
 517:src/display.c ****     // replace_char() isn't used or implemented unless HMS Y register display is enabled
 518:src/display.c ****     static void replace_char(char *a, char b, char c) { }
 519:src/display.c **** #endif
 520:src/display.c **** 
 521:src/display.c ****     /* Display the annunicator text line.
 522:src/display.c ****      * Care needs to be taken to keep things aligned.
 523:src/display.c ****      * Spaces are 5 pixels wide, \006 is a single pixel space.
 524:src/display.c ****      */
 525:src/display.c **** #ifdef TOP_ROW
 526:src/display.c ****     static void annunciators(void) {
 527:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 528:src/display.c ****       char buf[42], *p = buf, *q="";
ARM GAS  /tmp/ccdQiHBS.s 			page 15


 529:src/display.c ****       char buf2[42], *p2 = buf2;
 530:src/display.c ****       int n;
 531:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 532:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 533:src/display.c ****       // Constant variables and code branches depending on a constant variable
 534:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 535:src/display.c ****       // feature run-time configurable if needed.
 536:src/display.c **** #ifdef INCLUDE_YREG_CODE
 537:src/display.c **** #  ifdef YREG_ALWAYS_ON
 538:src/display.c ****       const int yreg_enabled = 1;
 539:src/display.c **** #  else
 540:src/display.c ****       const int yreg_enabled = UState.show_y;
 541:src/display.c **** #  endif
 542:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 543:src/display.c ****       const int yreg_hms = 1;
 544:src/display.c **** #  else
 545:src/display.c ****       const int yreg_hms = 0;
 546:src/display.c **** #  endif
 547:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 548:src/display.c ****       const int yreg_fract = 1;
 549:src/display.c **** #  else
 550:src/display.c ****       const int yreg_fract = 0;
 551:src/display.c **** #  endif
 552:src/display.c **** #else
 553:src/display.c ****       const int yreg_enabled = 0;
 554:src/display.c ****       const int yreg_hms = 0;
 555:src/display.c ****       const int yreg_fract = 0;
 556:src/display.c **** #endif
 557:src/display.c **** #ifdef RP_PREFIX
 558:src/display.c ****       const int rp_prefix = 1;
 559:src/display.c **** #else
 560:src/display.c ****       const int rp_prefix = 0;
 561:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 562:src/display.c **** #endif
 563:src/display.c ****       // Indicates whether font escape code is compiled in.
 564:src/display.c ****       // This variable will always be set at compile time.
 565:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 566:src/display.c ****       const int has_FONT_ESCAPE = 1;
 567:src/display.c **** #else
 568:src/display.c ****       const int has_FONT_ESCAPE = 0;
 569:src/display.c **** #endif
 570:src/display.c **** 
 571:src/display.c ****       xset(buf, '\0', sizeof(buf));
 572:src/display.c ****       xset(buf2, '\0', sizeof(buf2));
 573:src/display.c ****       
 574:src/display.c ****       if (is_intmode()) {
 575:src/display.c **** #ifdef SHOW_STACK_SIZE
 576:src/display.c **** 	if (shift_char == ' ') {
 577:src/display.c **** 	  *p2++ = '\007';
 578:src/display.c **** 	  *p2++ = '\346';
 579:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 580:src/display.c **** 	}
 581:src/display.c **** 	else
 582:src/display.c **** #endif
 583:src/display.c **** 	  {
 584:src/display.c **** 	    *p2++ = shift_char;
 585:src/display.c **** 	    *p2++ = '\006';
ARM GAS  /tmp/ccdQiHBS.s 			page 16


 586:src/display.c **** 	  }
 587:src/display.c **** 
 588:src/display.c **** 	switch(int_mode()) {
 589:src/display.c **** 	default:
 590:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 591:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 592:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 593:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 594:src/display.c **** 	}
 595:src/display.c **** 	q = scopy(p2, q);
 596:src/display.c **** 	*q++ = '\006';
 597:src/display.c **** 	p2 = num_arg_0(q, word_size(), 2);
 598:src/display.c **** 
 599:src/display.c **** 	if (IntMaxWindow > 0) {
 600:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 601:src/display.c **** 	  if (*q == '1')
 602:src/display.c **** 	    n += 2;
 603:src/display.c **** 	  if (q[1] == '1')
 604:src/display.c **** 	    n += 2;
 605:src/display.c **** 	  while (n-- > 0)
 606:src/display.c **** 	    *p2++ = '\006';
 607:src/display.c **** 
 608:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 609:src/display.c **** 	    *p2++ = State2.window == n ? '|' : '\'';
 610:src/display.c **** 	}
 611:src/display.c **** 	if (yreg_enabled) goto display_yreg;
 612:src/display.c ****       }
 613:src/display.c **** #ifdef INCLUDE_C_LOCK
 614:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 615:src/display.c **** #else
 616:src/display.c ****       else if (!yreg_enabled
 617:src/display.c **** #endif
 618:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
 619:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
 620:src/display.c **** #endif
 621:src/display.c **** 	       ) {
 622:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
 623:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
 624:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
 625:src/display.c **** 	if (shift_char == ' ') {
 626:src/display.c **** 	  *p2++ = '\007';
 627:src/display.c **** 	  *p2++ = '\342';
 628:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 629:src/display.c **** 	  *p2++ = '\007';
 630:src/display.c **** 	  *p2++ = '\344';
 631:src/display.c **** 	  *p2++ = (is_dblmode() ? 'D' : ' ');
 632:src/display.c **** 	}
 633:src/display.c **** 	else
 634:src/display.c **** #endif
 635:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
 636:src/display.c **** 	    *p2++ = shift_char;
 637:src/display.c **** 	    *p2++ = '\006';
 638:src/display.c **** 	  }
 639:src/display.c **** 	  else {
 640:src/display.c **** 	    *p2++ = 'D';
 641:src/display.c **** 	  }
 642:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 17


 643:src/display.c **** 	if (State2.cmplx) {
 644:src/display.c **** 	  *p2++ = ' ';
 645:src/display.c **** 	  *p2 = '\024';
 646:src/display.c **** 	  goto skip;
 647:src/display.c **** 	}
 648:src/display.c **** 	if (State2.arrow) {
 649:src/display.c **** 	  *p2++ = ' ';
 650:src/display.c **** 	  *p2 = '\015';
 651:src/display.c **** 	  goto skip;
 652:src/display.c **** 	}
 653:src/display.c **** 
 654:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
 655:src/display.c **** 	  if (State2.wascomplex) {
 656:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 657:src/display.c **** 	  }
 658:src/display.c **** 	  else if (rp_prefix) {
 659:src/display.c **** 	    if (RectPolConv == 1) {
 660:src/display.c **** 	      q = "\007\306<";
 661:src/display.c **** 	    }
 662:src/display.c **** 	    else {
 663:src/display.c **** 	      q = "\007\306y";
 664:src/display.c **** 	    }
 665:src/display.c **** 	  }
 666:src/display.c **** 	  p = scopy(buf, q);
 667:src/display.c **** 
 668:src/display.c **** 	  goto display_yreg;
 669:src/display.c **** 	}
 670:src/display.c **** 
 671:src/display.c **** 	switch (UState.date_mode) {
 672:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 673:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 674:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 675:src/display.c **** #endif
 676:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 677:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 678:src/display.c **** #endif
 679:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 680:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 681:src/display.c **** #endif
 682:src/display.c **** #endif
 683:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 684:src/display.c **** 	}
 685:src/display.c **** 	p2 = scopy(p2, q);
 686:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 687:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 688:src/display.c **** 	  scopy(p2, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 689:src/display.c **** 	}
 690:src/display.c **** #else
 691:src/display.c **** 	p2 = scopy(p2, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
 692:src/display.c **** 	*p2++ = '\007';
 693:src/display.c **** 	*p2++ = '\342';
 694:src/display.c **** 	*p2 =  (UState.stack_depth ? ':' : '.');
 695:src/display.c **** #endif
 696:src/display.c ****       }
 697:src/display.c ****       else { // yreg_enabled
 698:src/display.c **** 	// do top-related things first
 699:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
ARM GAS  /tmp/ccdQiHBS.s 			page 18


 700:src/display.c **** 	if (State2.cmplx) {
 701:src/display.c **** 	  *p2++ = '\007';
 702:src/display.c **** 	  *p2++ = '\344'; // small font; 4 px wide
 703:src/display.c **** 	  *p2++ = shift_char;
 704:src/display.c **** 	  *p2++ = '\024';
 705:src/display.c **** 	}
 706:src/display.c **** 	else {// if (shift_char != ' ') {
 707:src/display.c **** 	  *p2++ = '\007';
 708:src/display.c **** 	  *p2++ = '\307'; // big font; 7 px wide 
 709:src/display.c **** 	  *p2++ = shift_char;
 710:src/display.c **** 	}
 711:src/display.c **** #endif
 712:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
 713:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
 714:src/display.c **** 	  *p2++ = '\007';
 715:src/display.c **** 	  *p2++ = '\207';
 716:src/display.c **** 	  *p2++ = '\007';	    
 717:src/display.c **** 	}
 718:src/display.c **** 	else {
 719:src/display.c **** 	  *p2++ = '\007';
 720:src/display.c **** 	  *p2++ = '\207';
 721:src/display.c **** 	  *p2++ = ' ';
 722:src/display.c **** 	}
 723:src/display.c **** #endif
 724:src/display.c **** #ifndef SHOW_STACK_SIZE
 725:src/display.c **** 	q = (is_dblmode() ? "\007\307D" : "\007\207 ");
 726:src/display.c **** 	p2 = scopy(p2, q);
 727:src/display.c **** #else
 728:src/display.c **** 	if (is_dblmode()) {
 729:src/display.c **** 	  *p2++ = '\007';
 730:src/display.c **** 	  *p2++ = '\342';
 731:src/display.c **** 	  *p2++ = (UState.stack_depth ? ':' : '.');
 732:src/display.c **** 	  *p2++ = '\007';
 733:src/display.c **** 	  *p2++ = '\345';
 734:src/display.c **** 	  *p2++ = 'D';
 735:src/display.c **** 	}
 736:src/display.c **** 	else {
 737:src/display.c **** 	  q = (UState.stack_depth ? "\007\347:" : "\007\347.");
 738:src/display.c **** 	  p2 = scopy(p2, q);
 739:src/display.c **** 	}
 740:src/display.c **** #endif
 741:src/display.c **** 
 742:src/display.c **** 	switch (UState.date_mode) {
 743:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 744:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
 745:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
 746:src/display.c **** #endif
 747:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
 748:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
 749:src/display.c **** #endif
 750:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
 751:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
 752:src/display.c **** #endif
 753:src/display.c **** #endif
 754:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
 755:src/display.c **** 	}
 756:src/display.c **** 	  
ARM GAS  /tmp/ccdQiHBS.s 			page 19


 757:src/display.c **** 	//      no_copy:
 758:src/display.c **** 	// display either arrow or datemode
 759:src/display.c **** 	if (State2.arrow) {
 760:src/display.c **** 	  scopy(p2, "\007\204\006\015");
 761:src/display.c **** 	} // no need to skip y display with arrow here
 762:src/display.c **** 	else {
 763:src/display.c **** 	  p2 = scopy(p2, q);
 764:src/display.c **** 	}
 765:src/display.c **** 	// now do the annotations, if any, for the middle row:
 766:src/display.c **** #ifdef INCLUDE_C_LOCK
 767:src/display.c **** 	if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
 768:src/display.c **** 	  if ( POLAR_DISPLAY ) {
 769:src/display.c **** 	    q = (REAL_FLAG ? "Length:" : "Angle:");
 770:src/display.c **** 	  }
 771:src/display.c **** 	  else {
 772:src/display.c **** 	    q = (REAL_FLAG ? "Real:" : "Imag:");
 773:src/display.c **** 	  }
 774:src/display.c **** 	  scopy(p, q);
 775:src/display.c **** 	  goto skip;
 776:src/display.c **** 	}
 777:src/display.c **** 	else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
 778:src/display.c **** 	  q = "\007\307<";
 779:src/display.c **** 	  p = scopy(p, q);
 780:src/display.c **** 	}
 781:src/display.c **** 	else if (State2.wascomplex || C_LOCKED) {
 782:src/display.c **** 	  q = CPX_J ? "\007\207j" : "\007\207i";
 783:src/display.c **** 	  p = scopy(p, q);
 784:src/display.c **** 	}
 785:src/display.c **** #else
 786:src/display.c **** 	
 787:src/display.c **** 	if (State2.wascomplex) {
 788:src/display.c **** 	  q = "\007\207i";
 789:src/display.c **** 	  p = scopy(p, q);
 790:src/display.c **** 	  //	    goto no_copy;
 791:src/display.c **** 	}
 792:src/display.c **** 	else if (rp_prefix && RectPolConv == 1) {
 793:src/display.c **** 	  q = "\007\307<";
 794:src/display.c **** 	  p = scopy(p, q);
 795:src/display.c **** 	  //	    goto no_copy;
 796:src/display.c **** 	}
 797:src/display.c **** 	else
 798:src/display.c **** #endif
 799:src/display.c **** 	  if (rp_prefix && RectPolConv == 2) {
 800:src/display.c **** 	    q = "\007\307y";
 801:src/display.c **** 	    p = scopy(p, q);
 802:src/display.c **** 	    //	    goto no_copy;
 803:src/display.c **** 	  }
 804:src/display.c ****       
 805:src/display.c **** 	if (State2.runmode) {
 806:src/display.c **** 	  decNumber y;
 807:src/display.c **** 	display_yreg:
 808:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
 809:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
 810:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
 811:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
 812:src/display.c **** 	   */
 813:src/display.c **** 	  if (is_intmode()) {
ARM GAS  /tmp/ccdQiHBS.s 			page 20


 814:src/display.c **** 	    set_int_x(get_reg_n_int((ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() &&
 815:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 816:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1), p);
 817:src/display.c **** 	    goto skip;
 818:src/display.c **** 	  }
 819:src/display.c **** #ifdef INCLUDE_C_LOCK
 820:src/display.c **** 	  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
 821:src/display.c **** 	    getRegister(&y, regK_idx);
 822:src/display.c **** 	  }
 823:src/display.c **** 	  else {
 824:src/display.c **** 	    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
 825:src/display.c **** 			     && (get_cmdline() && !State2.catalogue)
 826:src/display.c **** 			     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 827:src/display.c **** 			     ) ? ShowRegister : ShowRegister+1);
 828:src/display.c **** 	  }
 829:src/display.c **** #else
 830:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
 831:src/display.c **** 	      && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 832:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
 833:src/display.c **** #endif
 834:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
 835:src/display.c **** #ifdef INCLUDE_C_LOCK
 836:src/display.c **** 	    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_modes
 837:src/display.c **** #else
 838:src/display.c **** 	    if (yreg_hms && State2.hms) {
 839:src/display.c **** #endif
 840:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
 841:src/display.c **** 
 842:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
 843:src/display.c **** 	      UState.nothousands = 1;
 844:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 845:src/display.c **** 	      UState.nothousands = saved_nothousands;
 846:src/display.c **** 	      // First replace the '@' character with the degree symbol
 847:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
 848:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
 849:src/display.c **** 	      // then remove the fractional part of the seconds.
 850:src/display.c **** 	      p = "@\005 \006\"\0.\0";
 851:src/display.c **** 	      while (*p) {
 852:src/display.c **** 		replace_char(buf, p[0], p[1]);
 853:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 854:src/display.c **** 		  goto skip;
 855:src/display.c **** 		}
 856:src/display.c **** 		p += 2;
 857:src/display.c **** 	      }
 858:src/display.c **** 	      goto skip;
 859:src/display.c **** 	    }
 860:src/display.c **** 	    if (yreg_fract && UState.fract
 861:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 862:src/display.c **** 		&& !State2.cmplx
 863:src/display.c **** #endif
 864:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
 865:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
 866:src/display.c **** #endif
 867:src/display.c **** 		&& set_x_fract(&y, p)) {
 868:src/display.c **** 	      char ltgteq;
 869:src/display.c **** 
 870:src/display.c **** 	      q = find_char(buf, '\0') - 2;
ARM GAS  /tmp/ccdQiHBS.s 			page 21


 871:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 872:src/display.c **** 	      ltgteq = *q;
 873:src/display.c **** 	      switch (ltgteq) {
 874:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 875:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 876:src/display.c **** 	      }
 877:src/display.c **** 	      scopy(q, "\007\344?");
 878:src/display.c **** 	      q[2] = ltgteq;
 879:src/display.c **** 
 880:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 881:src/display.c **** 		goto skip;
 882:src/display.c **** 	      }
 883:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
 884:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 885:src/display.c **** 		goto skip;
 886:src/display.c **** 	      }
 887:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
 888:src/display.c **** 	    }
 889:src/display.c **** 	  }
 890:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
 891:src/display.c **** 	    int extra_pixels;
 892:src/display.c **** 
 893:src/display.c **** 	    set_x_dn(&y, p, &n);
 894:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BITMAP_WIDTH + 1);
 895:src/display.c **** 	    if (extra_pixels <= 0)
 896:src/display.c **** 	      break;
 897:src/display.c **** 
 898:src/display.c **** 	    xset(p, '\0', n+10);
 899:src/display.c **** 
 900:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
 901:src/display.c **** 	  }
 902:src/display.c **** 	}
 903:src/display.c ****       }
 904:src/display.c ****       
 905:src/display.c ****     skip:
 906:src/display.c ****       if (State2.runmode) set_status(buf); // don't overwrite program line with blank
 907:src/display.c ****       set_status_top_always(buf2);
 908:src/display.c ****       
 909:src/display.c ****     }
 910:src/display.c **** #else
 911:src/display.c ****     static void annunciators(void) {
 912:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 913:src/display.c ****       char buf[42], *p = buf, *q="";
 914:src/display.c ****       int n;
 915:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 916:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 917:src/display.c ****       // Constant variables and code branches depending on a constant variable
 918:src/display.c ****       // that's set to 0 will be optimized away. This way it's easier to make a
 919:src/display.c ****       // feature run-time configurable if needed.
 920:src/display.c **** #ifdef INCLUDE_YREG_CODE
 921:src/display.c **** #  ifdef YREG_ALWAYS_ON
 922:src/display.c ****       const int yreg_enabled = 1;
 923:src/display.c **** #  else
 924:src/display.c ****       const int yreg_enabled = UState.show_y;
 925:src/display.c **** #  endif
 926:src/display.c **** #  ifdef INCLUDE_YREG_HMS
 927:src/display.c ****       const int yreg_hms = 1;
ARM GAS  /tmp/ccdQiHBS.s 			page 22


 928:src/display.c **** #  else
 929:src/display.c ****       const int yreg_hms = 0;
 930:src/display.c **** #  endif
 931:src/display.c **** #  ifdef INCLUDE_YREG_FRACT
 932:src/display.c ****       const int yreg_fract = 1;
 933:src/display.c **** #  else
 934:src/display.c ****       const int yreg_fract = 0;
 935:src/display.c **** #  endif
 936:src/display.c **** #else
 937:src/display.c ****       const int yreg_enabled = 0;
 938:src/display.c ****       const int yreg_hms = 0;
 939:src/display.c ****       const int yreg_fract = 0;
 940:src/display.c **** #endif
 941:src/display.c **** #ifdef RP_PREFIX
 942:src/display.c ****       const int rp_prefix = 1;
 943:src/display.c **** #else
 944:src/display.c ****       const int rp_prefix = 0;
 945:src/display.c ****       const int RectPolConv = -1; // This variable doesn't exist without RP_PREFIX
 946:src/display.c **** #endif
 947:src/display.c ****       // Indicates whether font escape code is compiled in.
 948:src/display.c ****       // This variable will always be set at compile time.
 949:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 950:src/display.c ****       const int has_FONT_ESCAPE = 1;
 951:src/display.c **** #else
 952:src/display.c ****       const int has_FONT_ESCAPE = 0;
 953:src/display.c **** #endif
 954:src/display.c **** 
 955:src/display.c ****       xset(buf, '\0', sizeof(buf));
 956:src/display.c ****       
 957:src/display.c ****       if (is_intmode()) {
 958:src/display.c **** #ifdef SHOW_STACK_SIZE
 959:src/display.c **** 	if (shift_char == ' ') {
 960:src/display.c **** 	  *p++ = '\007';
 961:src/display.c **** 	  *p++ = '\346';
 962:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
 963:src/display.c **** 	}
 964:src/display.c **** 	else
 965:src/display.c **** #endif
 966:src/display.c **** 	  {
 967:src/display.c **** 	    *p++ = shift_char;
 968:src/display.c **** 	    *p++ = '\006';
 969:src/display.c **** 	  }
 970:src/display.c **** 
 971:src/display.c **** 	switch(int_mode()) {
 972:src/display.c **** 	default:
 973:src/display.c **** 	case MODE_2COMP:	q = "2c\006";		break;
 974:src/display.c **** 	case MODE_UNSIGNED:	q = "un\006";		break;
 975:src/display.c **** 	case MODE_1COMP:	q = "\0061c\006\006";	break;
 976:src/display.c **** 	case MODE_SGNMANT:	q = "sm";		break;
 977:src/display.c **** 	}
 978:src/display.c **** 	q = scopy(p, q);
 979:src/display.c **** 	*q++ = '\006';
 980:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 981:src/display.c **** 
 982:src/display.c **** 	if (IntMaxWindow > 0) {
 983:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 984:src/display.c **** 	  if (*q == '1')
ARM GAS  /tmp/ccdQiHBS.s 			page 23


 985:src/display.c **** 	    n += 2;
 986:src/display.c **** 	  if (q[1] == '1')
 987:src/display.c **** 	    n += 2;
 988:src/display.c **** 	  while (n-- > 0)
 989:src/display.c **** 	    *p++ = '\006';
 990:src/display.c **** 
 991:src/display.c **** 	  for (n = IntMaxWindow; n >= 0; n--)
 992:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 993:src/display.c **** 	}
 994:src/display.c ****       }
 995:src/display.c **** #ifdef INCLUDE_C_LOCK
 996:src/display.c ****       else if ( (!yreg_enabled && !C_LOCKED) // force y-reg display in complex lock mode
 997:src/display.c **** #else
 998:src/display.c ****       else if (!yreg_enabled
 999:src/display.c **** #endif
1000:src/display.c **** #ifdef SHIFT_AND_CMPLX_SUPPRESS_YREG
1001:src/display.c **** 	       || shift_char != ' ' || State2.cmplx
1002:src/display.c **** #endif
1003:src/display.c **** 	       ) {
1004:src/display.c **** 	// The stack size indicator is displayed on the right if date mode indication is enabled
1005:src/display.c **** 	// because the 'D' in small font doesn't look good next to the date mode indicator.
1006:src/display.c **** #if defined SHOW_STACK_SIZE && defined NO_DATEMODE_INDICATION
1007:src/display.c **** 	if (shift_char == ' ') {
1008:src/display.c **** 	  *p++ = '\007';
1009:src/display.c **** 	  *p++ = '\342';
1010:src/display.c **** 	  *p++ = (UState.stack_depth ? ':' : '.');
1011:src/display.c **** 	  *p++ = '\007';
1012:src/display.c **** 	  *p++ = '\344';
1013:src/display.c **** 	  *p++ = (is_dblmode() ? 'D' : ' ');
1014:src/display.c **** 	}
1015:src/display.c **** 	else
1016:src/display.c **** #endif
1017:src/display.c **** 	  if (shift_char != ' ' || !is_dblmode()) {
1018:src/display.c **** 	    *p++ = shift_char;
1019:src/display.c **** 	    *p++ = '\006';
1020:src/display.c **** 	  }
1021:src/display.c **** 	  else {
1022:src/display.c **** 	    *p++ = 'D';
1023:src/display.c **** 	  }
1024:src/display.c **** 
1025:src/display.c **** 	if (State2.cmplx) {
1026:src/display.c **** 	  *p++ = ' ';
1027:src/display.c **** 	  *p = '\024';
1028:src/display.c **** 	  goto skip;
1029:src/display.c **** 	}
1030:src/display.c **** 	if (State2.arrow) {
1031:src/display.c **** 	  *p++ = ' ';
1032:src/display.c **** 	  *p = '\015';
1033:src/display.c **** 	  goto skip;
1034:src/display.c **** 	}
1035:src/display.c **** 
1036:src/display.c **** 	if (shift_char == ' ' && (State2.wascomplex || (rp_prefix && RectPolConv != 0))) {
1037:src/display.c **** 	  if (State2.wascomplex) {
1038:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
1039:src/display.c **** 	  }
1040:src/display.c **** 	  else if (rp_prefix) {
1041:src/display.c **** 	    if (RectPolConv == 1) {
ARM GAS  /tmp/ccdQiHBS.s 			page 24


1042:src/display.c **** 	      q = "\007\306<";
1043:src/display.c **** 	    }
1044:src/display.c **** 	    else {
1045:src/display.c **** 	      q = "\007\306y";
1046:src/display.c **** 	    }
1047:src/display.c **** 	  }
1048:src/display.c **** 	  p = scopy(buf, q);
1049:src/display.c **** 
1050:src/display.c **** 	  goto display_yreg;
1051:src/display.c **** 	}
1052:src/display.c **** 
1053:src/display.c **** 	switch (UState.date_mode) {
1054:src/display.c **** #ifndef NO_DATEMODE_INDICATION
1055:src/display.c **** #if defined(DEFAULT_DATEMODE) && (DEFAULT_DATEMODE != 0)
1056:src/display.c **** 	case DATE_DMY:	q = "d.my\006\006";	break;
1057:src/display.c **** #endif
1058:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 1)
1059:src/display.c **** 	case DATE_YMD:	q = "y.md\006\006";	break;
1060:src/display.c **** #endif
1061:src/display.c **** #if ! defined(DEFAULT_DATEMODE) || (DEFAULT_DATEMODE != 2)
1062:src/display.c **** 	case DATE_MDY:	q = "m.dy\006\006";	break;
1063:src/display.c **** #endif
1064:src/display.c **** #endif
1065:src/display.c **** 	default:	q = (has_FONT_ESCAPE ? "\007\225\006" : "    \006");	break; // 21 pixels
1066:src/display.c **** 	}
1067:src/display.c **** 	p = scopy(p, q);
1068:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
1069:src/display.c **** 	if (get_trig_mode() == TRIG_GRAD) {
1070:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
1071:src/display.c **** 	}
1072:src/display.c **** #else
1073:src/display.c **** 	p = scopy(p, (get_trig_mode() == TRIG_GRAD ? "\006\006\007\210\007" : "  "));
1074:src/display.c **** 	*p++ = '\007';
1075:src/display.c **** 	*p++ = '\342';
1076:src/display.c **** 	*p =  (UState.stack_depth ? ':' : '.');
1077:src/display.c **** #endif
1078:src/display.c ****       }
1079:src/display.c ****       else { // yreg_enabled
1080:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1081:src/display.c **** 	if (State2.cmplx) {
1082:src/display.c **** 	  *p++ = '\007';
1083:src/display.c **** 	  *p++ = '\344';
1084:src/display.c **** 	  *p++ = shift_char;
1085:src/display.c **** 	  q = "\024";
1086:src/display.c **** 	}
1087:src/display.c **** 	else if (shift_char != ' ') {
1088:src/display.c **** 	  *p++ = '\007';
1089:src/display.c **** 	  *p++ = '\307';
1090:src/display.c **** 	  *p++ = shift_char;
1091:src/display.c **** 	  goto no_copy;
1092:src/display.c **** 	}
1093:src/display.c **** 	else
1094:src/display.c **** #endif
1095:src/display.c **** #ifdef INCLUDE_C_LOCK
1096:src/display.c **** 		if ( (REAL_FLAG || IMAG_FLAG) && C_LOCKED ) {
1097:src/display.c **** 			if ( POLAR_DISPLAY ) {
1098:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
ARM GAS  /tmp/ccdQiHBS.s 			page 25


1099:src/display.c **** 			}
1100:src/display.c **** 			else {
1101:src/display.c **** 				q = (REAL_FLAG ? "Real:" : "Imag:");
1102:src/display.c **** 			}
1103:src/display.c **** 			scopy(p, q);
1104:src/display.c **** 			goto skip;
1105:src/display.c **** 		}
1106:src/display.c **** 		else if ((rp_prefix && RectPolConv == 1) || (C_LOCKED && POLAR_DISPLAY)) {
1107:src/display.c **** 			q = "\007\307<";
1108:src/display.c **** 		}
1109:src/display.c **** 		else if (State2.wascomplex || C_LOCKED) {
1110:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
1111:src/display.c **** 		}
1112:src/display.c **** #else
1113:src/display.c **** 	  if (State2.wascomplex) {
1114:src/display.c **** 	    q = "\007\207i";
1115:src/display.c **** 	  }
1116:src/display.c **** 	  else if (rp_prefix && RectPolConv == 1) {
1117:src/display.c **** 	    q = "\007\307<";
1118:src/display.c **** 	  }
1119:src/display.c **** #endif
1120:src/display.c **** 	  else if (rp_prefix && RectPolConv == 2) {
1121:src/display.c **** 	    q = "\007\307y";
1122:src/display.c **** 	  }
1123:src/display.c **** #ifdef SHOW_GRADIAN_PREFIX
1124:src/display.c **** 	  else if (get_trig_mode() == TRIG_GRAD) {
1125:src/display.c **** 	    q = "\007\207\007";
1126:src/display.c **** 	  }
1127:src/display.c **** #endif
1128:src/display.c **** 	  else {
1129:src/display.c **** #ifndef SHOW_STACK_SIZE
1130:src/display.c **** 	    q = (is_dblmode() ? "\007\307D" : "\007\207 ");
1131:src/display.c **** #else
1132:src/display.c **** 	    if (is_dblmode()) {
1133:src/display.c **** 	      *p++ = '\007';
1134:src/display.c **** 	      *p++ = '\342';
1135:src/display.c **** 	      *p++ = (UState.stack_depth ? ':' : '.');
1136:src/display.c **** 	      q = "\007\345D";
1137:src/display.c **** 	    }
1138:src/display.c **** 	    else {
1139:src/display.c **** 	      q = (UState.stack_depth ? "\007\347:" : "\007\347.");
1140:src/display.c **** 	    }
1141:src/display.c **** #endif
1142:src/display.c **** 	  }
1143:src/display.c **** 	p = scopy(p, q);
1144:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1145:src/display.c ****       no_copy:
1146:src/display.c **** #endif
1147:src/display.c **** 
1148:src/display.c **** 	if (State2.arrow) {
1149:src/display.c **** 	  scopy(p, "\007\204\006\015");
1150:src/display.c **** 	} else if (State2.runmode) {
1151:src/display.c **** 	  decNumber y;
1152:src/display.c **** 	display_yreg:
1153:src/display.c **** 	  /* This is a bit convoluted.  ShowRegister is the real portion being shown.  Normally
1154:src/display.c **** 	   * ShowRegister+1 would contain the complex component, however if the register being
1155:src/display.c **** 	   * examined is on the stack and there is a command line present, the stack will be lifted
ARM GAS  /tmp/ccdQiHBS.s 			page 26


1156:src/display.c **** 	   * after we execute so we need to show ShowRegister instead.
1157:src/display.c **** 	   */
1158:src/display.c **** #ifdef INCLUDE_C_LOCK
1159:src/display.c **** 		  if ( C_LOCKED && POLAR_DISPLAY && !POLAR_FORM_NOT_READY) {
1160:src/display.c **** 		    getRegister(&y, regK_idx);
1161:src/display.c **** 		  }
1162:src/display.c **** 		  else {
1163:src/display.c **** 		    getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size()
1164:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
1165:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1166:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
1167:src/display.c **** 		  }
1168:src/display.c **** #else
1169:src/display.c **** 	  getRegister(&y, (ShowRegister >= regX_idx && ShowRegister < regX_idx + stack_size() && get_cmdli
1170:src/display.c **** 			   && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
1171:src/display.c **** 			   ) ? ShowRegister : ShowRegister+1);
1172:src/display.c **** #endif
1173:src/display.c **** 	  if ((yreg_hms || yreg_fract) && !decNumberIsSpecial(&y)) {
1174:src/display.c **** #ifdef INCLUDE_C_LOCK
1175:src/display.c **** 		    if (yreg_hms && State2.hms && ( !C_LOCKED || ( C_LOCKED && (POLAR_DISPLAY && ((enum trig_mode
1176:src/display.c **** #else
1177:src/display.c **** 	    if (yreg_hms && State2.hms) {
1178:src/display.c **** #endif
1179:src/display.c **** 	      const int saved_nothousands = UState.nothousands;
1180:src/display.c **** 
1181:src/display.c **** 	      xset(buf, '\0', sizeof(buf));
1182:src/display.c **** 	      UState.nothousands = 1;
1183:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
1184:src/display.c **** 	      UState.nothousands = saved_nothousands;
1185:src/display.c **** 	      // First replace the '@' character with the degree symbol
1186:src/display.c **** 	      // Then, if the string doesn't fit in the dot matrix display, replace spaces with narrow spa
1187:src/display.c **** 	      // then remove the second symbol (") and the overflow or underflow signs,
1188:src/display.c **** 	      // then remove the fractional part of the seconds.
1189:src/display.c **** 	      p = "@\005 \006\"\0.\0";
1190:src/display.c **** 	      while (*p) {
1191:src/display.c **** 		replace_char(buf, p[0], p[1]);
1192:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
1193:src/display.c **** 		  goto skip;
1194:src/display.c **** 		}
1195:src/display.c **** 		p += 2;
1196:src/display.c **** 	      }
1197:src/display.c **** 	      goto skip;
1198:src/display.c **** 	    }
1199:src/display.c **** 	    if (yreg_fract && UState.fract
1200:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
1201:src/display.c **** 		&& !State2.cmplx
1202:src/display.c **** #endif
1203:src/display.c **** #ifdef ANGLES_NOT_SHOWN_AS_FRACTIONS
1204:src/display.c **** 		&& !(rp_prefix && RectPolConv == 1)
1205:src/display.c **** #endif
1206:src/display.c **** 		&& set_x_fract(&y, p)) {
1207:src/display.c **** 	      char ltgteq;
1208:src/display.c **** 
1209:src/display.c **** 	      q = find_char(buf, '\0') - 2;
1210:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
1211:src/display.c **** 	      ltgteq = *q;
1212:src/display.c **** 	      switch (ltgteq) {
ARM GAS  /tmp/ccdQiHBS.s 			page 27


1213:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
1214:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
1215:src/display.c **** 	      }
1216:src/display.c **** 	      scopy(q, "\007\344?");
1217:src/display.c **** 	      q[2] = ltgteq;
1218:src/display.c **** 
1219:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1220:src/display.c **** 		goto skip;
1221:src/display.c **** 	      }
1222:src/display.c **** 	      q[-1] = '\0'; // Remove </>/= if string doesn't fit in the dot matrix display
1223:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
1224:src/display.c **** 		goto skip;
1225:src/display.c **** 	      }
1226:src/display.c **** 	      xset(p, '\0', sizeof(buf) - (p - buf));
1227:src/display.c **** 	    }
1228:src/display.c **** 	  }
1229:src/display.c **** 	  for (n=DISPLAY_DIGITS; n>1; ) {
1230:src/display.c **** 	    int extra_pixels;
1231:src/display.c **** 
1232:src/display.c **** 	    set_x_dn(&y, p, &n);
1233:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
1234:src/display.c **** 	    if (extra_pixels <= 0)
1235:src/display.c **** 	      break;
1236:src/display.c **** 
1237:src/display.c **** 	    xset(p, '\0', n+10);
1238:src/display.c **** 
1239:src/display.c **** 	    n -= (extra_pixels + 3) / 4; // The maximum width of digits in the small font is 4 pixels.
1240:src/display.c **** 	  }
1241:src/display.c **** 	}
1242:src/display.c ****       }
1243:src/display.c ****       
1244:src/display.c ****     skip:	set_status_top(buf);
1245:src/display.c ****     }
1246:src/display.c **** #endif //top_row
1247:src/display.c ****     static void disp_x(const char *p) {
1248:src/display.c ****       int i;
1249:src/display.c ****       int gotdot = -1;
1250:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1251:src/display.c ****       const
1252:src/display.c **** #endif
1253:src/display.c **** 	int segs_per_digit = SEGS_PER_DIGIT;
1254:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1255:src/display.c ****       int overflow_to_left = 0;
1256:src/display.c **** #endif
1257:src/display.c **** 
1258:src/display.c ****       if (*p == '-') {
1259:src/display.c **** 	SET_MANT_SIGN;
1260:src/display.c **** 	p++;
1261:src/display.c ****       }
1262:src/display.c **** 
1263:src/display.c ****       if (is_intmode()) {
1264:src/display.c **** 	for (i=0; *p != '\0'; p++) {
1265:src/display.c **** 	  set_dig(i, *p);
1266:src/display.c **** 	  i += SEGS_PER_DIGIT;
1267:src/display.c **** 	}
1268:src/display.c **** 	carry_overflow();
1269:src/display.c ****       } else {
ARM GAS  /tmp/ccdQiHBS.s 			page 28


1270:src/display.c **** 	set_separator_decimal_modes();
1271:src/display.c **** 
1272:src/display.c **** 	i = 0;
1273:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1274:src/display.c **** 	if ( CmdLineDot > 1 ) {
1275:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1276:src/display.c **** 	  const
1277:src/display.c **** #  endif
1278:src/display.c **** 	    int double_dot = 0;
1279:src/display.c **** 	  int j;
1280:src/display.c **** 
1281:src/display.c **** 	  for (j=0; p[j] != '\0'; j++) {
1282:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
1283:src/display.c **** 	      gotdot = j;
1284:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1285:src/display.c **** 	      double_dot = (p[j+1] == '.');
1286:src/display.c **** #  endif
1287:src/display.c **** 	    }
1288:src/display.c **** 	  }
1289:src/display.c **** 	  j -= DISPLAY_DIGITS + double_dot;
1290:src/display.c **** 	  if (j > 0) {
1291:src/display.c **** 	    p += j + 1;
1292:src/display.c **** 	    i = SEGS_PER_DIGIT;
1293:src/display.c **** 	    if (gotdot <= j) {
1294:src/display.c **** 	      gotdot = 0;
1295:src/display.c **** 	      if (double_dot)
1296:src/display.c **** 		p++;
1297:src/display.c **** 	    }
1298:src/display.c **** 	    else if (*p == '.') {
1299:src/display.c **** 	      gotdot = 0;
1300:src/display.c **** 	      p++;
1301:src/display.c **** 	      if (!double_dot)
1302:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
1303:src/display.c **** 	    }
1304:src/display.c **** 	    else gotdot = -1;
1305:src/display.c **** 	    set_dig(0, '<');
1306:src/display.c **** 	    overflow_to_left = 1;
1307:src/display.c **** 	  }
1308:src/display.c **** 	  else gotdot = -1;
1309:src/display.c **** 	}
1310:src/display.c **** #endif
1311:src/display.c **** 
1312:src/display.c **** 	for (; *p != '\0' && *p != 'E'
1313:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1314:src/display.c **** 	       && *p != 'D'
1315:src/display.c **** #endif
1316:src/display.c **** 	       ; p++) {
1317:src/display.c **** 	  if (*p == '.') {
1318:src/display.c **** 	    if (gotdot < 0)
1319:src/display.c **** 	      gotdot = i;
1320:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
1321:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1322:src/display.c **** 	    if ( *(p+1) == '.' || ( i != gotdot ) ) {
1323:src/display.c **** 	      if ( *(p+1) == '.' ) {
1324:src/display.c **** 		p++;
1325:src/display.c **** 	      }
1326:src/display.c **** #  else
ARM GAS  /tmp/ccdQiHBS.s 			page 29


1327:src/display.c **** 	      if ( i != gotdot ) {
1328:src/display.c **** #  endif
1329:src/display.c **** 		set_dig(i, '/'); // put in a fraction separator
1330:src/display.c **** 		i += segs_per_digit;
1331:src/display.c **** 	      }
1332:src/display.c **** 	      else {
1333:src/display.c **** 		if ( CmdLineDot > 1 ) {
1334:src/display.c **** 		  i += segs_per_digit;
1335:src/display.c **** 		}
1336:src/display.c **** 		else {
1337:src/display.c **** 		  set_decimal(i - SEGS_PER_DIGIT, DecimalMode, CNULL);
1338:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
1339:src/display.c **** 		}
1340:src/display.c **** 	      }
1341:src/display.c **** #else
1342:src/display.c **** 	      if (i > 0)
1343:src/display.c **** 		set_decimal(i - segs_per_digit, DecimalMode, CNULL);
1344:src/display.c **** 	      else {
1345:src/display.c **** 		set_dig(i, '0');
1346:src/display.c **** 		set_decimal(i, DecimalMode, CNULL);
1347:src/display.c **** 		i += segs_per_digit;
1348:src/display.c **** 	      }
1349:src/display.c **** #endif
1350:src/display.c **** 	    } else {
1351:src/display.c **** 	      set_dig(i, *p);
1352:src/display.c **** 	      i += segs_per_digit;
1353:src/display.c **** 	    }
1354:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && !defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1355:src/display.c **** 	    if (i == SEGS_EXP_BASE)
1356:src/display.c **** 	      segs_per_digit = SEGS_PER_EXP_DIGIT;
1357:src/display.c **** #endif
1358:src/display.c **** 	  }
1359:src/display.c **** 
1360:src/display.c **** 	  /* Implement a floating comma */
1361:src/display.c **** 	  if (gotdot < 0)
1362:src/display.c **** 	    gotdot = i;
1363:src/display.c **** 	  for (;;) {
1364:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
1365:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
1366:src/display.c **** 	      break;
1367:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
1368:src/display.c **** 	    if (overflow_to_left && gotdot == SEGS_PER_DIGIT)
1369:src/display.c **** 	      break;
1370:src/display.c **** #endif
1371:src/display.c **** 	    set_separator(gotdot, SeparatorMode, CNULL);
1372:src/display.c **** 	  }
1373:src/display.c **** 
1374:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
1375:src/display.c **** 	  if (*p == 'E' || *p == 'D') {
1376:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1377:src/display.c **** 	    int flags = 8;
1378:src/display.c **** #  else
1379:src/display.c **** 	    int flags = 12;
1380:src/display.c **** #  endif
1381:src/display.c **** 
1382:src/display.c **** 	    if (*p == 'D')
1383:src/display.c **** 	      flags |= 2;
ARM GAS  /tmp/ccdQiHBS.s 			page 30


1384:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
1385:src/display.c **** 	      flags |= 16;
1386:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
1387:src/display.c **** 	  }
1388:src/display.c **** #else
1389:src/display.c **** 	  if (*p == 'E') {
1390:src/display.c **** 	    p++;
1391:src/display.c **** 	    // set_exp() takes care of setting the exponent sign
1392:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
1393:src/display.c **** 	    set_exp(s_to_i(p), 2 * (*p == '-'), CNULL);
1394:src/display.c **** #  else
1395:src/display.c **** 	    set_exp(s_to_i(p), 4 + 2 * (*p == '-'), CNULL);
1396:src/display.c **** #  endif
1397:src/display.c **** 	  } 
1398:src/display.c **** #endif
1399:src/display.c **** 	}
1400:src/display.c ****       }
1401:src/display.c **** 
1402:src/display.c ****       const char DIGITS[] = "0123456789ABCDEF";
1403:src/display.c **** 
1404:src/display.c ****       static void set_int_x(const long long int value, char *res) {
1405:src/display.c **** 	const int ws = word_size();
1406:src/display.c **** 	unsigned int b;
1407:src/display.c **** 	long long int vs = value;
1408:src/display.c **** 	unsigned long long int v;
1409:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
1410:src/display.c **** 	int i, j, k;
1411:src/display.c **** 	int sign = 0;
1412:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
1413:src/display.c **** 
1414:src/display.c **** 	switch (State2.smode) {
1415:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
1416:src/display.c **** 	case SDISP_OCT:	b = 8;		break;
1417:src/display.c **** 	case SDISP_DEC:	b = 10;		break;
1418:src/display.c **** 	case SDISP_HEX:	b = 16;		break;
1419:src/display.c **** 	default:	b = int_base();	break;
1420:src/display.c **** 	}
1421:src/display.c **** 
1422:src/display.c **** 	if (!res) {
1423:src/display.c **** 	  IntMaxWindow = 0;
1424:src/display.c **** 	  carry_overflow();
1425:src/display.c **** 	}
1426:src/display.c **** 
1427:src/display.c **** 	if ((0x7f75 & (1 << (b-1))) != 0) { // excludes bases 2, 4, 8, 16
1428:src/display.c **** 	  v = extract_value(value, &sign);
1429:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
1430:src/display.c **** 	    v = value;
1431:src/display.c **** 	  if (v == 0) {
1432:src/display.c **** 	    if (sign)
1433:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
1434:src/display.c **** 	    set_dig_s(dig, '0', res);
1435:src/display.c **** 	    return;
1436:src/display.c **** 	  } else
1437:src/display.c **** 	    for (i=0; v != 0; i++) {
1438:src/display.c **** 	      const int r = v % b;
1439:src/display.c **** 	      v /= b;
1440:src/display.c **** 	      buf[i] = DIGITS[r];
ARM GAS  /tmp/ccdQiHBS.s 			page 31


1441:src/display.c **** 	    }
1442:src/display.c **** 	} else {
1443:src/display.c **** 	  // Truncate down to the current word size and then sign extend it back
1444:src/display.c **** 	  if (ws < 64) {
1445:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
1446:src/display.c **** 	    vs &= mask;
1447:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
1448:src/display.c **** 	      vs |= ~mask;
1449:src/display.c **** 	  }
1450:src/display.c **** 
1451:src/display.c **** 	  if (!UState.leadzero && vs == 0) {
1452:src/display.c **** 	    set_dig_s(dig, '0', res);
1453:src/display.c **** 	    return;
1454:src/display.c **** 	  } else if (!UState.leadzero) {
1455:src/display.c **** 	    v = (unsigned long long int)vs;
1456:src/display.c **** 	    for (i=0; v != 0; i++) {
1457:src/display.c **** 	      const int r = v % b;
1458:src/display.c **** 	      v /= b;
1459:src/display.c **** 	      buf[i] = DIGITS[r];
1460:src/display.c **** 	    }
1461:src/display.c **** 	  } else {
1462:src/display.c **** 	    int n;
1463:src/display.c **** 	    const unsigned int b1 = b >> 1;
1464:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
1465:src/display.c **** 	    v = (unsigned long long int)vs;
1466:src/display.c **** 
1467:src/display.c **** 	    n = (ws + fac) / (fac+1);
1468:src/display.c **** 	    for (i=0; i<n; i++) {
1469:src/display.c **** 	      const int r = v % b;
1470:src/display.c **** 	      v /= b;
1471:src/display.c **** 	      buf[i] = DIGITS[r];
1472:src/display.c **** 	    }
1473:src/display.c **** 	  }
1474:src/display.c **** 	}
1475:src/display.c **** #ifdef BIGGER_DISPLAY
1476:src/display.c **** #define MAX_INT_Y_DIG 13
1477:src/display.c **** #else
1478:src/display.c **** #define MAX_INT_Y_DIG 7
1479:src/display.c **** #endif
1480:src/display.c **** 	/* At this point i is the number of digits in the output */
1481:src/display.c **** 	int nd = i;
1482:src/display.c **** 	if (res) {
1483:src/display.c **** 	  if (sign) *res++ = '-';
1484:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
1485:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
1486:src/display.c **** 	      *res++ = buf[i];
1487:src/display.c **** 	    *res++ = '.';
1488:src/display.c **** 	    *res++ = '.';
1489:src/display.c **** 	  }
1490:src/display.c **** 	  else {
1491:src/display.c **** 	    while (--i >= 0)
1492:src/display.c **** 	      *res++ = buf[i];
1493:src/display.c **** 	  }
1494:src/display.c **** 	} else {
1495:src/display.c **** #if 0
1496:src/display.c **** 	  set_separator_decimal_modes();
1497:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 32


1498:src/display.c **** 	  // Allows configuration of digit grouping per base
1499:src/display.c **** 	  static const char grouping[] = 
1500:src/display.c **** 	    {       0x84, 0xb3, 0xb4, 0xb3, 0xb3, 0xb3, 0xb3, 
1501:src/display.c **** 		    //	   2     3     4     5     6     7     8
1502:src/display.c **** 		    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2 };
1503:src/display.c **** 	  //     9    10    11    12    13    14    15    16
1504:src/display.c **** 	  const int shift = SeparatorMode == SEP_NONE ? 12 
1505:src/display.c **** 	    : grouping[b - 2] >> 4;
1506:src/display.c **** 	  const int group = SeparatorMode == SEP_NONE ? 16
1507:src/display.c **** 	    : (grouping[b - 2] & 0xf);
1508:src/display.c **** #else
1509:src/display.c **** 	  // Less flexible but shorter
1510:src/display.c **** 	  const int shift = b == 2 ? 8 : 12;
1511:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
1512:src/display.c **** 	    : b == 16 ? 2 : 3;
1513:src/display.c **** 	  set_separator_decimal_modes();
1514:src/display.c **** #endif
1515:src/display.c **** 	  IntMaxWindow = (i - 1) / shift;
1516:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
1517:src/display.c **** 	    State2.window = 0;
1518:src/display.c **** 	  buf[i] = '\0';
1519:src/display.c **** 
1520:src/display.c **** 	  j = State2.window * shift;	// digits at a time
1521:src/display.c **** 	  for (k = 0; k < 12; k++)
1522:src/display.c **** 	    if (buf[j + k] == '\0')
1523:src/display.c **** 	      break;
1524:src/display.c **** 	  for (i=0; --k >= 0; i++) {
1525:src/display.c **** 	    int ch = buf[j++];
1526:src/display.c **** 	    if (i >= shift)
1527:src/display.c **** 	      ch -= 030;
1528:src/display.c **** 	    set_dig(dig, ch);
1529:src/display.c **** 	    if ((j % group) == 0 && k != 0)
1530:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
1531:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
1532:src/display.c **** 	  }
1533:src/display.c **** 	  if (sign) {
1534:src/display.c **** 	    if (dig >= 0)
1535:src/display.c **** 	      set_dig(dig, '-');
1536:src/display.c **** 	    else	SET_MANT_SIGN;
1537:src/display.c **** 	  }
1538:src/display.c **** 	}
1539:src/display.c ****       }
1540:src/display.c **** 
1541:src/display.c ****       /* Handle special cases.
1542:src/display.c ****        * return non-zero if the number is special.
1543:src/display.c ****        */
1544:src/display.c ****       static int check_special_dn(const decNumber *x, char *res) {
1545:src/display.c **** 	if (decNumberIsSpecial(x)) {
1546:src/display.c **** 	  if (decNumberIsNaN(x)) {
1547:src/display.c **** 	    if (res) {
1548:src/display.c **** 	      scopy(res, "NaN");
1549:src/display.c **** 	    } else {
1550:src/display.c **** 	      set_digits_string(S7_NaN, 0);
1551:src/display.c **** 	    }
1552:src/display.c **** 	    return 1;
1553:src/display.c **** 	  } else {
1554:src/display.c **** 	    if (decNumberIsNegative(x)) {
ARM GAS  /tmp/ccdQiHBS.s 			page 33


1555:src/display.c **** 	      if (res) *res++ = '-';
1556:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
1557:src/display.c **** 	    }
1558:src/display.c **** 	    if (res)
1559:src/display.c **** 	      *res++ = '\237';
1560:src/display.c **** 	    else {
1561:src/display.c **** 	      set_digits_string(S7_INF, SEGS_PER_DIGIT * 2);
1562:src/display.c **** 	    }
1563:src/display.c **** 	    return 1;
1564:src/display.c **** 	  }
1565:src/display.c **** 	}
1566:src/display.c **** 	return 0;
1567:src/display.c ****       }
1568:src/display.c **** 
1569:src/display.c **** 
1570:src/display.c ****       /* Extract the two lowest integral digits from the number
1571:src/display.c ****        */
1572:src/display.c ****       static void hms_step(decNumber *res, decNumber *x, unsigned int *v) {
1573:src/display.c **** 	decNumber n;
1574:src/display.c **** 
1575:src/display.c **** 	decNumberMod(&n, x, &const_100);
1576:src/display.c **** 	*v = dn_to_int(&n);
1577:src/display.c **** 	dn_mulpow10(&n, x, -2);
1578:src/display.c **** 	decNumberTrunc(res, &n);
1579:src/display.c ****       }
1580:src/display.c **** 
1581:src/display.c ****       static char *hms_render(unsigned int v, char *str, int *jin, int n, int spaces) {
 235              		.loc 1 1581 87 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 4, pretend = 0, frame = 32
 238              		@ frame_needed = 0, uses_anonymous_args = 0
1582:src/display.c **** 	char b[32];
 239              		.loc 1 1582 2 view .LVU68
1583:src/display.c **** 	int i, j;
 240              		.loc 1 1583 2 view .LVU69
1584:src/display.c **** 
1585:src/display.c **** 	for (i=0; i<n; i++) {
 241              		.loc 1 1585 2 view .LVU70
 242              		.loc 1 1585 12 view .LVU71
1581:src/display.c **** 	char b[32];
 243              		.loc 1 1581 87 is_stmt 0 view .LVU72
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              		.cfi_def_cfa_offset 28
 246              		.cfi_offset 4, -28
 247              		.cfi_offset 5, -24
 248              		.cfi_offset 6, -20
 249              		.cfi_offset 7, -16
 250              		.cfi_offset 8, -12
 251              		.cfi_offset 9, -8
 252              		.cfi_offset 14, -4
1586:src/display.c **** 	  if (v == 0)
1587:src/display.c **** 	    b[i] = spaces?' ':'0';
1588:src/display.c **** 	  else {
1589:src/display.c **** 	    j = v % 10;
 253              		.loc 1 1589 12 view .LVU73
 254 0004 DFF89CE0 		ldr	lr, .L42
1581:src/display.c **** 	char b[32];
ARM GAS  /tmp/ccdQiHBS.s 			page 34


 255              		.loc 1 1581 87 view .LVU74
 256 0008 89B0     		sub	sp, sp, #36
 257              		.cfi_def_cfa_offset 64
1581:src/display.c **** 	char b[32];
 258              		.loc 1 1581 87 view .LVU75
 259 000a 1746     		mov	r7, r2
 260 000c EC46     		mov	ip, sp
1585:src/display.c **** 	  if (v == 0)
 261              		.loc 1 1585 8 view .LVU76
 262 000e 0026     		movs	r6, #0
 263              	.LVL13:
 264              	.L30:
1586:src/display.c **** 	  if (v == 0)
 265              		.loc 1 1586 4 is_stmt 1 view .LVU77
 266              		.loc 1 1589 6 view .LVU78
 267              		.loc 1 1589 12 is_stmt 0 view .LVU79
 268 0010 AEFB0024 		umull	r2, r4, lr, r0
 269 0014 E408     		lsrs	r4, r4, #3
 270 0016 04EB8402 		add	r2, r4, r4, lsl #2
 271 001a 2546     		mov	r5, r4
 272 001c A0EB4204 		sub	r4, r0, r2, lsl #1
 273              	.LVL14:
1590:src/display.c **** 	    v /= 10;
 274              		.loc 1 1590 6 is_stmt 1 view .LVU80
1591:src/display.c **** 	    b[i] = j + '0';
 275              		.loc 1 1591 15 is_stmt 0 view .LVU81
 276 0020 3034     		adds	r4, r4, #48
 277              	.LVL15:
1585:src/display.c **** 	  if (v == 0)
 278              		.loc 1 1585 18 view .LVU82
 279 0022 721C     		adds	r2, r6, #1
1586:src/display.c **** 	    b[i] = spaces?' ':'0';
 280              		.loc 1 1586 7 view .LVU83
 281 0024 30B1     		cbz	r0, .L41
1585:src/display.c **** 	  if (v == 0)
 282              		.loc 1 1585 2 view .LVU84
 283 0026 9342     		cmp	r3, r2
 284              		.loc 1 1591 11 view .LVU85
 285 0028 0CF8014B 		strb	r4, [ip], #1
1590:src/display.c **** 	    b[i] = j + '0';
 286              		.loc 1 1590 8 view .LVU86
 287 002c 2846     		mov	r0, r5
 288              	.LVL16:
 289              		.loc 1 1591 6 is_stmt 1 view .LVU87
1585:src/display.c **** 	  if (v == 0)
 290              		.loc 1 1585 17 view .LVU88
1585:src/display.c **** 	  if (v == 0)
 291              		.loc 1 1585 12 view .LVU89
1585:src/display.c **** 	  if (v == 0)
 292              		.loc 1 1585 2 is_stmt 0 view .LVU90
 293 002e 12D0     		beq	.L31
 294 0030 1646     		mov	r6, r2
 295 0032 EDE7     		b	.L30
 296              	.LVL17:
 297              	.L41:
1585:src/display.c **** 	  if (v == 0)
 298              		.loc 1 1585 2 view .LVU91
ARM GAS  /tmp/ccdQiHBS.s 			page 35


 299 0034 109A     		ldr	r2, [sp, #64]
 300 0036 002A     		cmp	r2, #0
 301 0038 14BF     		ite	ne
 302 003a 2024     		movne	r4, #32
 303              	.LVL18:
1585:src/display.c **** 	  if (v == 0)
 304              		.loc 1 1585 2 view .LVU92
 305 003c 3024     		moveq	r4, #48
 306 003e 0DEB0600 		add	r0, sp, r6
 307              	.LVL19:
1586:src/display.c **** 	    b[i] = spaces?' ':'0';
 308              		.loc 1 1586 7 view .LVU93
 309 0042 3246     		mov	r2, r6
 310              	.LVL20:
 311              	.L28:
1587:src/display.c **** 	  else {
 312              		.loc 1 1587 6 is_stmt 1 view .LVU94
1585:src/display.c **** 	  if (v == 0)
 313              		.loc 1 1585 18 is_stmt 0 view .LVU95
 314 0044 0132     		adds	r2, r2, #1
 315              	.LVL21:
1585:src/display.c **** 	  if (v == 0)
 316              		.loc 1 1585 2 view .LVU96
 317 0046 9342     		cmp	r3, r2
1587:src/display.c **** 	  else {
 318              		.loc 1 1587 11 view .LVU97
 319 0048 00F8014B 		strb	r4, [r0], #1
 320              	.LVL22:
1585:src/display.c **** 	  if (v == 0)
 321              		.loc 1 1585 17 is_stmt 1 view .LVU98
1585:src/display.c **** 	  if (v == 0)
 322              		.loc 1 1585 12 view .LVU99
1585:src/display.c **** 	  if (v == 0)
 323              		.loc 1 1585 2 is_stmt 0 view .LVU100
 324 004c FADC     		bgt	.L28
 325 004e 5A1E     		subs	r2, r3, #1
 326              	.LVL23:
1585:src/display.c **** 	  if (v == 0)
 327              		.loc 1 1585 2 view .LVU101
 328 0050 B342     		cmp	r3, r6
 329 0052 C8BF     		it	gt
 330 0054 1646     		movgt	r6, r2
 331              	.LVL24:
 332              	.L31:
1592:src/display.c **** 	  }
1593:src/display.c **** 	}
1594:src/display.c **** 	if (b[0] == ' ')
 333              		.loc 1 1594 2 is_stmt 1 view .LVU102
 334              		.loc 1 1594 5 is_stmt 0 view .LVU103
 335 0056 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 336              	.LVL25:
1595:src/display.c **** 	  b[0] = '0';
1596:src/display.c **** 
1597:src/display.c **** 	/* Copy across and appropriately leading space things
1598:src/display.c **** 	 */
1599:src/display.c **** 	j = *jin;
 337              		.loc 1 1599 4 view .LVU104
ARM GAS  /tmp/ccdQiHBS.s 			page 36


 338 005a D7F80090 		ldr	r9, [r7]
1594:src/display.c **** 	  b[0] = '0';
 339              		.loc 1 1594 5 view .LVU105
 340 005e 202B     		cmp	r3, #32
1595:src/display.c **** 	  b[0] = '0';
 341              		.loc 1 1595 4 is_stmt 1 view .LVU106
1595:src/display.c **** 	  b[0] = '0';
 342              		.loc 1 1595 9 is_stmt 0 view .LVU107
 343 0060 04BF     		itt	eq
 344 0062 3023     		moveq	r3, #48
 345 0064 8DF80030 		strbeq	r3, [sp]
 346              		.loc 1 1599 2 is_stmt 1 view .LVU108
 347              	.LVL26:
1600:src/display.c **** 	while (--i >= 0) {
 348              		.loc 1 1600 2 view .LVU109
 349              		.loc 1 1600 8 view .LVU110
1599:src/display.c **** 	while (--i >= 0) {
 350              		.loc 1 1599 4 is_stmt 0 view .LVU111
 351 0068 0D46     		mov	r5, r1
 352 006a C846     		mov	r8, r9
 353              		.loc 1 1600 8 view .LVU112
 354 006c 3446     		mov	r4, r6
 355              	.LVL27:
 356              	.L35:
1601:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 357              		.loc 1 1601 4 is_stmt 1 view .LVU113
 358              	.LBB166:
 359              	.LBB167:
 333:src/display.c ****   else	set_dig(base, ch);
 360              		.loc 1 333 12 view .LVU114
 361              	.LBE167:
 362              	.LBE166:
 363              		.loc 1 1601 24 is_stmt 0 view .LVU115
 364 006e 1DF80410 		ldrb	r1, [sp, r4]	@ zero_extendqisi2
 365              	.LBB171:
 366              	.LBB168:
 333:src/display.c ****   else	set_dig(base, ch);
 367              		.loc 1 333 16 view .LVU116
 368 0072 2B46     		mov	r3, r5
 369              	.LVL28:
 333:src/display.c ****   else	set_dig(base, ch);
 370              		.loc 1 333 16 view .LVU117
 371              	.LBE168:
 372              	.LBI166:
 332:src/display.c ****   if (res) *res++ = ch;
 373              		.loc 1 332 14 is_stmt 1 view .LVU118
 374              	.LBB169:
 333:src/display.c ****   else	set_dig(base, ch);
 375              		.loc 1 333 3 view .LVU119
 333:src/display.c ****   else	set_dig(base, ch);
 376              		.loc 1 333 6 is_stmt 0 view .LVU120
 377 0074 95B1     		cbz	r5, .L33
 378              	.LVL29:
 333:src/display.c ****   else	set_dig(base, ch);
 379              		.loc 1 333 19 view .LVU121
 380 0076 03F8011B 		strb	r1, [r3], #1
 381              	.LVL30:
ARM GAS  /tmp/ccdQiHBS.s 			page 37


 333:src/display.c ****   else	set_dig(base, ch);
 382              		.loc 1 333 16 view .LVU122
 383 007a 1D46     		mov	r5, r3
 384              	.LVL31:
 385              	.L34:
 335:src/display.c **** }
 386              		.loc 1 335 3 is_stmt 1 view .LVU123
 335:src/display.c **** }
 387              		.loc 1 335 3 is_stmt 0 view .LVU124
 388              	.LBE169:
 389              	.LBE171:
1602:src/display.c **** 	  j += SEGS_PER_DIGIT;
 390              		.loc 1 1602 4 is_stmt 1 view .LVU125
1600:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 391              		.loc 1 1600 8 is_stmt 0 view .LVU126
 392 007c 013C     		subs	r4, r4, #1
 393              	.LVL32:
 394              		.loc 1 1602 6 view .LVU127
 395 007e 08F10908 		add	r8, r8, #9
 396              	.LVL33:
1600:src/display.c **** 	  str = set_dig_s(j, b[i], str);
 397              		.loc 1 1600 8 is_stmt 1 view .LVU128
 398 0082 F4D5     		bpl	.L35
1603:src/display.c **** 	}
1604:src/display.c **** 	*jin = j;
 399              		.loc 1 1604 7 is_stmt 0 view .LVU129
 400 0084 26EAE676 		bic	r6, r6, r6, asr #31
 401 0088 09F10909 		add	r9, r9, #9
 402              		.loc 1 1604 2 is_stmt 1 view .LVU130
 403              		.loc 1 1604 7 is_stmt 0 view .LVU131
 404 008c 06EBC606 		add	r6, r6, r6, lsl #3
 405 0090 4E44     		add	r6, r6, r9
1605:src/display.c **** 	return str;
1606:src/display.c ****       }
 406              		.loc 1 1606 7 view .LVU132
 407 0092 2846     		mov	r0, r5
1604:src/display.c **** 	return str;
 408              		.loc 1 1604 7 view .LVU133
 409 0094 3E60     		str	r6, [r7]
1605:src/display.c **** 	return str;
 410              		.loc 1 1605 2 is_stmt 1 view .LVU134
 411              		.loc 1 1606 7 is_stmt 0 view .LVU135
 412 0096 09B0     		add	sp, sp, #36
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 0098 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.LVL34:
 418              	.L33:
 419              		.cfi_restore_state
 420              	.LBB172:
 421              	.LBB170:
 334:src/display.c ****   return res;
 422              		.loc 1 334 8 is_stmt 1 view .LVU136
 423 009c 4046     		mov	r0, r8
 424 009e FFF7FEFF 		bl	set_dig
 425              	.LVL35:
ARM GAS  /tmp/ccdQiHBS.s 			page 38


 334:src/display.c ****   return res;
 426              		.loc 1 334 8 is_stmt 0 view .LVU137
 427 00a2 EBE7     		b	.L34
 428              	.L43:
 429              		.align	2
 430              	.L42:
 431 00a4 CDCCCCCC 		.word	-858993459
 432              	.LBE170:
 433              	.LBE172:
 434              		.cfi_endproc
 435              	.LFE21:
 437              		.section	.text.set_exp_digits_string,"ax",%progbits
 438              		.align	1
 439              		.p2align 2,,3
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	set_exp_digits_string:
 446              	.LVL36:
 447              	.LFB13:
 350:src/display.c ****   int i;
 448              		.loc 1 350 63 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 351:src/display.c ****   const int n = res == NULL ? 3 : 4;
 452              		.loc 1 351 3 view .LVU139
 352:src/display.c **** 
 453              		.loc 1 352 3 view .LVU140
 350:src/display.c ****   int i;
 454              		.loc 1 350 63 is_stmt 0 view .LVU141
 455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 456              		.cfi_def_cfa_offset 24
 457              		.cfi_offset 3, -24
 458              		.cfi_offset 4, -20
 459              		.cfi_offset 5, -16
 460              		.cfi_offset 6, -12
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 352:src/display.c **** 
 463              		.loc 1 352 33 view .LVU142
 464 0002 0D1E     		subs	r5, r1, #0
 465 0004 0CBF     		ite	eq
 466 0006 0326     		moveq	r6, #3
 467 0008 0426     		movne	r6, #4
 468              	.LVL37:
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 469              		.loc 1 354 3 is_stmt 1 view .LVU143
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 470              		.loc 1 354 13 view .LVU144
 471 000a A0EBC003 		sub	r3, r0, r0, lsl #3
 472 000e 0446     		mov	r4, r0
 473 0010 0644     		add	r6, r6, r0
 474              	.LVL38:
 475              	.LBB173:
 476              	.LBB174:
ARM GAS  /tmp/ccdQiHBS.s 			page 39


 334:src/display.c ****   return res;
 477              		.loc 1 334 8 is_stmt 0 view .LVU145
 478 0012 03F16507 		add	r7, r3, #101
 479 0016 04E0     		b	.L46
 480              	.LVL39:
 481              	.L54:
 333:src/display.c ****   else	set_dig(base, ch);
 482              		.loc 1 333 19 view .LVU146
 483 0018 03F8011B 		strb	r1, [r3], #1
 484              	.LVL40:
 333:src/display.c ****   else	set_dig(base, ch);
 485              		.loc 1 333 19 view .LVU147
 486              	.LBE174:
 487              	.LBE173:
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 488              		.loc 1 354 3 view .LVU148
 489 001c B442     		cmp	r4, r6
 490              	.LBB180:
 491              	.LBB175:
 333:src/display.c ****   else	set_dig(base, ch);
 492              		.loc 1 333 16 view .LVU149
 493 001e 1D46     		mov	r5, r3
 494              	.LVL41:
 335:src/display.c **** }
 495              		.loc 1 335 3 is_stmt 1 view .LVU150
 335:src/display.c **** }
 496              		.loc 1 335 3 is_stmt 0 view .LVU151
 497              	.LBE175:
 498              	.LBE180:
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 499              		.loc 1 354 36 is_stmt 1 view .LVU152
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 500              		.loc 1 354 13 view .LVU153
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 501              		.loc 1 354 3 is_stmt 0 view .LVU154
 502 0020 0CD0     		beq	.L44
 503              	.LVL42:
 504              	.L46:
 355:src/display.c **** }
 505              		.loc 1 355 5 is_stmt 1 discriminator 3 view .LVU155
 506              	.LBB181:
 507              	.LBB176:
 333:src/display.c ****   else	set_dig(base, ch);
 508              		.loc 1 333 12 discriminator 3 view .LVU156
 333:src/display.c ****   else	set_dig(base, ch);
 509              		.loc 1 333 12 is_stmt 0 discriminator 3 view .LVU157
 510              	.LBE176:
 511              	.LBE181:
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 512              		.loc 1 354 23 discriminator 3 view .LVU158
 513 0022 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 514              	.LVL43:
 515              	.LBB182:
 516              	.LBB177:
 333:src/display.c ****   else	set_dig(base, ch);
 517              		.loc 1 333 16 discriminator 3 view .LVU159
 518 0026 2B46     		mov	r3, r5
ARM GAS  /tmp/ccdQiHBS.s 			page 40


 519              	.LVL44:
 333:src/display.c ****   else	set_dig(base, ch);
 520              		.loc 1 333 16 discriminator 3 view .LVU160
 521              	.LBE177:
 522              	.LBI173:
 332:src/display.c ****   if (res) *res++ = ch;
 523              		.loc 1 332 14 is_stmt 1 discriminator 3 view .LVU161
 524              	.LBB178:
 333:src/display.c ****   else	set_dig(base, ch);
 525              		.loc 1 333 3 discriminator 3 view .LVU162
 526              	.LBE178:
 527              	.LBE182:
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 528              		.loc 1 354 17 is_stmt 0 discriminator 3 view .LVU163
 529 0028 41B1     		cbz	r1, .L44
 530              	.LVL45:
 531              	.LBB183:
 532              	.LBB179:
 333:src/display.c ****   else	set_dig(base, ch);
 533              		.loc 1 333 6 discriminator 4 view .LVU164
 534 002a 002D     		cmp	r5, #0
 535 002c F4D1     		bne	.L54
 334:src/display.c ****   return res;
 536              		.loc 1 334 8 is_stmt 1 view .LVU165
 537 002e C4EBC400 		rsb	r0, r4, r4, lsl #3
 538 0032 3844     		add	r0, r0, r7
 539 0034 FFF7FEFF 		bl	set_dig
 540              	.LVL46:
 335:src/display.c **** }
 541              		.loc 1 335 3 view .LVU166
 335:src/display.c **** }
 542              		.loc 1 335 3 is_stmt 0 view .LVU167
 543              	.LBE179:
 544              	.LBE183:
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 545              		.loc 1 354 36 is_stmt 1 view .LVU168
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 546              		.loc 1 354 13 view .LVU169
 354:src/display.c ****     res = set_dig_s(SEGS_EXP_BASE + i * SEGS_PER_EXP_DIGIT, msg[i], res);
 547              		.loc 1 354 3 is_stmt 0 view .LVU170
 548 0038 B442     		cmp	r4, r6
 549 003a F2D1     		bne	.L46
 550              	.LVL47:
 551              	.L44:
 356:src/display.c **** 
 552              		.loc 1 356 1 view .LVU171
 553 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 356:src/display.c **** 
 554              		.loc 1 356 1 view .LVU172
 555              		.cfi_endproc
 556              	.LFE13:
 558 003e 00BF     		.section	.text.hms_step,"ax",%progbits
 559              		.align	1
 560              		.p2align 2,,3
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
ARM GAS  /tmp/ccdQiHBS.s 			page 41


 564              		.fpu fpv4-sp-d16
 566              	hms_step:
 567              	.LVL48:
 568              	.LFB20:
1572:src/display.c **** 	decNumber n;
 569              		.loc 1 1572 75 is_stmt 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 40
 572              		@ frame_needed = 0, uses_anonymous_args = 0
1573:src/display.c **** 
 573              		.loc 1 1573 2 view .LVU174
1575:src/display.c **** 	*v = dn_to_int(&n);
 574              		.loc 1 1575 2 view .LVU175
1572:src/display.c **** 	decNumber n;
 575              		.loc 1 1572 75 is_stmt 0 view .LVU176
 576 0000 70B5     		push	{r4, r5, r6, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 8AB0     		sub	sp, sp, #40
 583              		.cfi_def_cfa_offset 56
1572:src/display.c **** 	decNumber n;
 584              		.loc 1 1572 75 view .LVU177
 585 0004 0446     		mov	r4, r0
 586 0006 1646     		mov	r6, r2
1575:src/display.c **** 	*v = dn_to_int(&n);
 587              		.loc 1 1575 2 view .LVU178
 588 0008 01A8     		add	r0, sp, #4
 589              	.LVL49:
1575:src/display.c **** 	*v = dn_to_int(&n);
 590              		.loc 1 1575 2 view .LVU179
 591 000a 0A4A     		ldr	r2, .L57
 592              	.LVL50:
1572:src/display.c **** 	decNumber n;
 593              		.loc 1 1572 75 view .LVU180
 594 000c 0D46     		mov	r5, r1
1575:src/display.c **** 	*v = dn_to_int(&n);
 595              		.loc 1 1575 2 view .LVU181
 596 000e FFF7FEFF 		bl	decNumberMod
 597              	.LVL51:
1576:src/display.c **** 	dn_mulpow10(&n, x, -2);
 598              		.loc 1 1576 2 is_stmt 1 view .LVU182
1576:src/display.c **** 	dn_mulpow10(&n, x, -2);
 599              		.loc 1 1576 7 is_stmt 0 view .LVU183
 600 0012 01A8     		add	r0, sp, #4
 601 0014 FFF7FEFF 		bl	dn_to_int
 602              	.LVL52:
1577:src/display.c **** 	decNumberTrunc(res, &n);
 603              		.loc 1 1577 2 view .LVU184
 604 0018 2946     		mov	r1, r5
1576:src/display.c **** 	dn_mulpow10(&n, x, -2);
 605              		.loc 1 1576 5 view .LVU185
 606 001a 3060     		str	r0, [r6]
1577:src/display.c **** 	decNumberTrunc(res, &n);
 607              		.loc 1 1577 2 is_stmt 1 view .LVU186
ARM GAS  /tmp/ccdQiHBS.s 			page 42


 608 001c 6FF00102 		mvn	r2, #1
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	dn_mulpow10
 611              	.LVL53:
1578:src/display.c ****       }
 612              		.loc 1 1578 2 view .LVU187
 613 0026 01A9     		add	r1, sp, #4
 614 0028 2046     		mov	r0, r4
 615 002a FFF7FEFF 		bl	decNumberTrunc
 616              	.LVL54:
1579:src/display.c **** 
 617              		.loc 1 1579 7 is_stmt 0 view .LVU188
 618 002e 0AB0     		add	sp, sp, #40
 619              		.cfi_def_cfa_offset 16
 620              		@ sp needed
 621 0030 70BD     		pop	{r4, r5, r6, pc}
 622              	.LVL55:
 623              	.L58:
1579:src/display.c **** 
 624              		.loc 1 1579 7 view .LVU189
 625 0032 00BF     		.align	2
 626              	.L57:
 627 0034 00000000 		.word	const_100
 628              		.cfi_endproc
 629              	.LFE20:
 631              		.section	.text.set_exp,"ax",%progbits
 632              		.align	1
 633              		.p2align 2,,3
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	set_exp:
 640              	.LVL56:
 641              	.LFB14:
 367:src/display.c ****   union {
 642              		.loc 1 367 52 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 368:src/display.c ****     char buf[4];
 646              		.loc 1 368 3 view .LVU191
 372:src/display.c **** #if SHOW_LARGE_EXPONENT > 0
 647              		.loc 1 372 3 view .LVU192
 374:src/display.c **** #  if SHOW_LARGE_EXPONENT == 3
 648              		.loc 1 374 3 view .LVU193
 380:src/display.c **** #  endif
 649              		.loc 1 380 3 view .LVU194
 389:src/display.c ****   if (exp < 0) {
 650              		.loc 1 389 3 view .LVU195
 367:src/display.c ****   union {
 651              		.loc 1 367 52 is_stmt 0 view .LVU196
 652 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 653              		.cfi_def_cfa_offset 20
 654              		.cfi_offset 4, -20
 655              		.cfi_offset 5, -16
 656              		.cfi_offset 6, -12
ARM GAS  /tmp/ccdQiHBS.s 			page 43


 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 390:src/display.c ****     negative = 1;
 659              		.loc 1 390 6 view .LVU197
 660 0002 051E     		subs	r5, r0, #0
 367:src/display.c ****   union {
 661              		.loc 1 367 52 view .LVU198
 662 0004 83B0     		sub	sp, sp, #12
 663              		.cfi_def_cfa_offset 32
 367:src/display.c ****   union {
 664              		.loc 1 367 52 view .LVU199
 665 0006 0E46     		mov	r6, r1
 666              	.LVL57:
 390:src/display.c ****     negative = 1;
 667              		.loc 1 390 3 is_stmt 1 view .LVU200
 390:src/display.c ****     negative = 1;
 668              		.loc 1 390 6 is_stmt 0 view .LVU201
 669 0008 5BDB     		blt	.L91
 395:src/display.c **** #endif
 670              		.loc 1 395 13 view .LVU202
 671 000a 3B4B     		ldr	r3, .L93
 672 000c EC17     		asrs	r4, r5, #31
 673 000e 83FB0513 		smull	r1, r3, r3, r5
 674              	.LVL58:
 395:src/display.c **** #endif
 675              		.loc 1 395 13 view .LVU203
 676 0012 C4EBA314 		rsb	r4, r4, r3, asr #6
 389:src/display.c ****   if (exp < 0) {
 677              		.loc 1 389 12 view .LVU204
 678 0016 06F00207 		and	r7, r6, #2
 679              	.LVL59:
 395:src/display.c **** #endif
 680              		.loc 1 395 3 is_stmt 1 view .LVU205
 397:src/display.c **** #ifdef INCLUDE_YREG_CODE
 681              		.loc 1 397 3 view .LVU206
 397:src/display.c **** #ifdef INCLUDE_YREG_CODE
 682              		.loc 1 397 6 is_stmt 0 view .LVU207
 683 001a 002A     		cmp	r2, #0
 684 001c 60D0     		beq	.L64
 400:src/display.c **** #else
 685              		.loc 1 400 5 is_stmt 1 view .LVU208
 400:src/display.c **** #else
 686              		.loc 1 400 8 is_stmt 0 view .LVU209
 687 001e 2CB1     		cbz	r4, .L65
 404:src/display.c **** 	// No exponent separator for large -ve exponents
 688              		.loc 1 404 2 is_stmt 1 view .LVU210
 404:src/display.c **** 	// No exponent separator for large -ve exponents
 689              		.loc 1 404 5 is_stmt 0 view .LVU211
 690 0020 57B9     		cbnz	r7, .L62
 404:src/display.c **** 	// No exponent separator for large -ve exponents
 691              		.loc 1 404 17 is_stmt 1 discriminator 1 view .LVU212
 404:src/display.c **** 	// No exponent separator for large -ve exponents
 692              		.loc 1 404 21 is_stmt 0 discriminator 1 view .LVU213
 693 0022 1446     		mov	r4, r2
 694              	.LVL60:
 404:src/display.c **** 	// No exponent separator for large -ve exponents
 695              		.loc 1 404 24 discriminator 1 view .LVU214
ARM GAS  /tmp/ccdQiHBS.s 			page 44


 696 0024 3A23     		movs	r3, #58
 697              	.LVL61:
 404:src/display.c **** 	// No exponent separator for large -ve exponents
 698              		.loc 1 404 24 discriminator 1 view .LVU215
 699 0026 04F8013B 		strb	r3, [r4], #1
 700              	.LVL62:
 411:src/display.c ****     }
 701              		.loc 1 411 7 is_stmt 1 discriminator 1 view .LVU216
 702 002a 09E0     		b	.L66
 703              	.LVL63:
 704              	.L65:
 407:src/display.c **** #else
 705              		.loc 1 407 12 view .LVU217
 407:src/display.c **** #else
 706              		.loc 1 407 16 is_stmt 0 view .LVU218
 707 002c 1446     		mov	r4, r2
 708              	.LVL64:
 407:src/display.c **** #else
 709              		.loc 1 407 19 view .LVU219
 710 002e 6523     		movs	r3, #101
 711              	.LVL65:
 407:src/display.c **** #else
 712              		.loc 1 407 19 view .LVU220
 713 0030 04F8013B 		strb	r3, [r4], #1
 714              	.LVL66:
 411:src/display.c ****     }
 715              		.loc 1 411 7 is_stmt 1 view .LVU221
 411:src/display.c ****     }
 716              		.loc 1 411 10 is_stmt 0 view .LVU222
 717 0034 27B1     		cbz	r7, .L66
 407:src/display.c **** #else
 718              		.loc 1 407 16 view .LVU223
 719 0036 2246     		mov	r2, r4
 720              	.LVL67:
 721              	.L62:
 411:src/display.c ****     }
 722              		.loc 1 411 21 is_stmt 1 discriminator 1 view .LVU224
 411:src/display.c ****     }
 723              		.loc 1 411 25 is_stmt 0 discriminator 1 view .LVU225
 724 0038 1446     		mov	r4, r2
 725              	.LVL68:
 411:src/display.c ****     }
 726              		.loc 1 411 28 discriminator 1 view .LVU226
 727 003a 2D23     		movs	r3, #45
 728 003c 04F8013B 		strb	r3, [r4], #1
 729              	.LVL69:
 730              	.L66:
 459:src/display.c **** #endif
 731              		.loc 1 459 7 is_stmt 1 view .LVU227
 732 0040 01AF     		add	r7, sp, #4
 733 0042 3846     		mov	r0, r7
 734 0044 0422     		movs	r2, #4
 735 0046 0021     		movs	r1, #0
 736 0048 FFF7FEFF 		bl	xset
 737              	.LVL70:
 461:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 738              		.loc 1 461 7 view .LVU228
ARM GAS  /tmp/ccdQiHBS.s 			page 45


 461:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 739              		.loc 1 461 10 is_stmt 0 view .LVU229
 740 004c 16F0050F 		tst	r6, #5
 741 0050 2CD1     		bne	.L71
 742              	.L73:
 482:src/display.c ****     no_number:
 743              		.loc 1 482 2 is_stmt 1 view .LVU230
 744 0052 2946     		mov	r1, r5
 745 0054 3846     		mov	r0, r7
 746 0056 FFF7FEFF 		bl	num_arg
 747              	.LVL71:
 484:src/display.c ****     }
 748              		.loc 1 484 7 view .LVU231
 749 005a 2146     		mov	r1, r4
 750 005c 3846     		mov	r0, r7
 751 005e FFF7FEFF 		bl	set_exp_digits_string
 752              	.LVL72:
 485:src/display.c **** 
 753              		.loc 1 485 5 is_stmt 0 view .LVU232
 754 0062 03B0     		add	sp, sp, #12
 755              		.cfi_remember_state
 756              		.cfi_def_cfa_offset 20
 757              		@ sp needed
 758 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 759              	.LVL73:
 760              	.L74:
 761              		.cfi_restore_state
 391:src/display.c ****     exp = -exp;
 762              		.loc 1 391 14 view .LVU233
 763 0066 0127     		movs	r7, #1
 764              	.LVL74:
 765              	.L61:
 414:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 766              		.loc 1 414 21 is_stmt 1 view .LVU234
 767              	.LBB184:
 768              	.LBI184:
 247:src/display.c **** {
 769              		.loc 1 247 13 view .LVU235
 770              	.LBB185:
 249:src/display.c **** }
 771              		.loc 1 249 3 view .LVU236
 772 0068 8220     		movs	r0, #130
 773 006a FFF7FEFF 		bl	set_dot
 774              	.LVL75:
 775              	.L67:
 249:src/display.c **** }
 776              		.loc 1 249 3 is_stmt 0 view .LVU237
 777              	.LBE185:
 778              	.LBE184:
 416:src/display.c **** #else
 779              		.loc 1 416 7 is_stmt 1 view .LVU238
 416:src/display.c **** #else
 780              		.loc 1 416 10 is_stmt 0 view .LVU239
 781 006e 002C     		cmp	r4, #0
 782 0070 E6D0     		beq	.L66
 420:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 783              		.loc 1 420 4 is_stmt 1 view .LVU240
ARM GAS  /tmp/ccdQiHBS.s 			page 46


 434:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 784              		.loc 1 434 6 view .LVU241
 434:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 785              		.loc 1 434 23 is_stmt 0 view .LVU242
 786 0072 224B     		ldr	r3, .L93+4
 434:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
 787              		.loc 1 434 10 view .LVU243
 788 0074 03FB0455 		mla	r5, r3, r4, r5
 789              	.LVL76:
 436:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 790              		.loc 1 436 6 is_stmt 1 view .LVU244
 436:src/display.c **** 	      // Cut off the last three digits of the mantissa.
 791              		.loc 1 436 9 is_stmt 0 view .LVU245
 792 0078 F306     		lsls	r3, r6, #27
 793 007a 0AD5     		bpl	.L68
 794              	.LBB186:
 440:src/display.c **** 		// Clear digits and separators
 795              		.loc 1 440 15 view .LVU246
 796 007c 4F26     		movs	r6, #79
 797              	.LVL77:
 798              	.L69:
 442:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 799              		.loc 1 442 3 is_stmt 1 discriminator 3 view .LVU247
 800 007e 3046     		mov	r0, r6
 440:src/display.c **** 		// Clear digits and separators
 801              		.loc 1 440 66 is_stmt 0 discriminator 3 view .LVU248
 802 0080 0136     		adds	r6, r6, #1
 803              	.LVL78:
 442:src/display.c **** 	      set_dig(9 * SEGS_PER_DIGIT, '>');
 804              		.loc 1 442 3 discriminator 3 view .LVU249
 805 0082 FFF7FEFF 		bl	clr_dot
 806              	.LVL79:
 440:src/display.c **** 		// Clear digits and separators
 807              		.loc 1 440 66 is_stmt 1 discriminator 3 view .LVU250
 440:src/display.c **** 		// Clear digits and separators
 808              		.loc 1 440 41 discriminator 3 view .LVU251
 440:src/display.c **** 		// Clear digits and separators
 809              		.loc 1 440 8 is_stmt 0 discriminator 3 view .LVU252
 810 0086 632E     		cmp	r6, #99
 811 0088 F9D1     		bne	.L69
 443:src/display.c **** 	    }
 812              		.loc 1 443 8 is_stmt 1 view .LVU253
 813 008a 3E21     		movs	r1, #62
 814 008c 5120     		movs	r0, #81
 815 008e FFF7FEFF 		bl	set_dig
 816              	.LVL80:
 817              	.L68:
 443:src/display.c **** 	    }
 818              		.loc 1 443 8 is_stmt 0 view .LVU254
 819              	.LBE186:
 446:src/display.c **** 	      CLR_EXP_SIGN;
 820              		.loc 1 446 6 is_stmt 1 view .LVU255
 446:src/display.c **** 	      CLR_EXP_SIGN;
 821              		.loc 1 446 9 is_stmt 0 view .LVU256
 822 0092 47BB     		cbnz	r7, .L92
 823              	.L70:
 450:src/display.c **** 	    flags = 1;
ARM GAS  /tmp/ccdQiHBS.s 			page 47


 824              		.loc 1 450 6 is_stmt 1 view .LVU257
 825 0094 04F13001 		add	r1, r4, #48
 826 0098 6320     		movs	r0, #99
 459:src/display.c **** #endif
 827              		.loc 1 459 7 is_stmt 0 view .LVU258
 828 009a 01AF     		add	r7, sp, #4
 450:src/display.c **** 	    flags = 1;
 829              		.loc 1 450 6 view .LVU259
 830 009c FFF7FEFF 		bl	set_dig
 831              	.LVL81:
 451:src/display.c **** 	  }
 832              		.loc 1 451 6 is_stmt 1 view .LVU260
 459:src/display.c **** #endif
 833              		.loc 1 459 7 view .LVU261
 834 00a0 3846     		mov	r0, r7
 835 00a2 0422     		movs	r2, #4
 836 00a4 0021     		movs	r1, #0
 837 00a6 FFF7FEFF 		bl	xset
 838              	.LVL82:
 461:src/display.c **** 	num_arg_0(u.buf, exp, 3);
 839              		.loc 1 461 7 view .LVU262
 459:src/display.c **** #endif
 840              		.loc 1 459 7 is_stmt 0 view .LVU263
 841 00aa 0024     		movs	r4, #0
 842              	.LVL83:
 843              	.L71:
 462:src/display.c **** #if defined(PAD_EXPONENTS_WITH_SPACES) && !defined(DONT_PAD_EXPONENT_ENTRY)
 844              		.loc 1 462 2 is_stmt 1 view .LVU264
 845 00ac 2946     		mov	r1, r5
 846 00ae 0322     		movs	r2, #3
 847 00b0 3846     		mov	r0, r7
 848 00b2 FFF7FEFF 		bl	num_arg_0
 849              	.LVL84:
 484:src/display.c ****     }
 850              		.loc 1 484 7 view .LVU265
 851 00b6 2146     		mov	r1, r4
 852 00b8 3846     		mov	r0, r7
 853 00ba FFF7FEFF 		bl	set_exp_digits_string
 854              	.LVL85:
 485:src/display.c **** 
 855              		.loc 1 485 5 is_stmt 0 view .LVU266
 856 00be 03B0     		add	sp, sp, #12
 857              		.cfi_remember_state
 858              		.cfi_def_cfa_offset 20
 859              		@ sp needed
 860 00c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 861              	.LVL86:
 862              	.L91:
 863              		.cfi_restore_state
 391:src/display.c ****     exp = -exp;
 864              		.loc 1 391 5 is_stmt 1 view .LVU267
 392:src/display.c ****   }
 865              		.loc 1 392 5 view .LVU268
 395:src/display.c **** #endif
 866              		.loc 1 395 13 is_stmt 0 view .LVU269
 867 00c2 0D4C     		ldr	r4, .L93
 392:src/display.c ****   }
ARM GAS  /tmp/ccdQiHBS.s 			page 48


 868              		.loc 1 392 9 view .LVU270
 869 00c4 6D42     		rsbs	r5, r5, #0
 870              	.LVL87:
 395:src/display.c **** #endif
 871              		.loc 1 395 3 is_stmt 1 view .LVU271
 395:src/display.c **** #endif
 872              		.loc 1 395 13 is_stmt 0 view .LVU272
 873 00c6 A4FB0534 		umull	r3, r4, r4, r5
 874 00ca A409     		lsrs	r4, r4, #6
 875              	.LVL88:
 397:src/display.c **** #ifdef INCLUDE_YREG_CODE
 876              		.loc 1 397 3 is_stmt 1 view .LVU273
 397:src/display.c **** #ifdef INCLUDE_YREG_CODE
 877              		.loc 1 397 6 is_stmt 0 view .LVU274
 878 00cc 002A     		cmp	r2, #0
 879 00ce CAD0     		beq	.L74
 400:src/display.c **** #else
 880              		.loc 1 400 5 is_stmt 1 view .LVU275
 400:src/display.c **** #else
 881              		.loc 1 400 8 is_stmt 0 view .LVU276
 882 00d0 002C     		cmp	r4, #0
 883 00d2 B1D1     		bne	.L62
 407:src/display.c **** #else
 884              		.loc 1 407 12 is_stmt 1 view .LVU277
 407:src/display.c **** #else
 885              		.loc 1 407 16 is_stmt 0 view .LVU278
 886 00d4 1446     		mov	r4, r2
 887              	.LVL89:
 407:src/display.c **** #else
 888              		.loc 1 407 19 view .LVU279
 889 00d6 6523     		movs	r3, #101
 890 00d8 04F8013B 		strb	r3, [r4], #1
 891              	.LVL90:
 411:src/display.c ****     }
 892              		.loc 1 411 7 is_stmt 1 view .LVU280
 407:src/display.c **** #else
 893              		.loc 1 407 16 is_stmt 0 view .LVU281
 894 00dc 2246     		mov	r2, r4
 895 00de ABE7     		b	.L62
 896              	.LVL91:
 897              	.L64:
 414:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 898              		.loc 1 414 7 is_stmt 1 view .LVU282
 414:src/display.c **** #if SHOW_LARGE_EXPONENT > 0 || defined(LARGE_EXPONENT_ENTRY)
 899              		.loc 1 414 10 is_stmt 0 view .LVU283
 900 00e0 002F     		cmp	r7, #0
 901 00e2 C4D0     		beq	.L67
 902 00e4 C0E7     		b	.L61
 903              	.LVL92:
 904              	.L92:
 447:src/display.c **** 	      set_dig(10 * SEGS_PER_DIGIT, '-');
 905              		.loc 1 447 8 is_stmt 1 view .LVU284
 906              	.LBB187:
 907              	.LBI187:
 252:src/display.c **** {
 908              		.loc 1 252 13 view .LVU285
 909              	.LBB188:
ARM GAS  /tmp/ccdQiHBS.s 			page 49


 254:src/display.c **** }
 910              		.loc 1 254 3 view .LVU286
 911 00e6 8220     		movs	r0, #130
 912 00e8 FFF7FEFF 		bl	clr_dot
 913              	.LVL93:
 914              	.LBE188:
 915              	.LBE187:
 448:src/display.c **** 	    }
 916              		.loc 1 448 8 view .LVU287
 917 00ec 2D21     		movs	r1, #45
 918 00ee 5A20     		movs	r0, #90
 919 00f0 FFF7FEFF 		bl	set_dig
 920              	.LVL94:
 921 00f4 CEE7     		b	.L70
 922              	.L94:
 923 00f6 00BF     		.align	2
 924              	.L93:
 925 00f8 D34D6210 		.word	274877907
 926 00fc 18FCFFFF 		.word	-1000
 927              		.cfi_endproc
 928              	.LFE14:
 930              		.section	.text.set_separator.part.0,"ax",%progbits
 931              		.align	1
 932              		.p2align 2,,3
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.fpu fpv4-sp-d16
 938              	set_separator.part.0:
 939              	.LVL95:
 940              	.LFB49:
 301:src/display.c ****   if (sep == SEP_NONE)
 941              		.loc 1 301 14 view -0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 308:src/display.c ****     set_dot(posn+7);
 945              		.loc 1 308 5 view .LVU289
 301:src/display.c ****   if (sep == SEP_NONE)
 946              		.loc 1 301 14 is_stmt 0 view .LVU290
 947 0000 38B5     		push	{r3, r4, r5, lr}
 948              		.cfi_def_cfa_offset 16
 949              		.cfi_offset 3, -16
 950              		.cfi_offset 4, -12
 951              		.cfi_offset 5, -8
 952              		.cfi_offset 14, -4
 301:src/display.c ****   if (sep == SEP_NONE)
 953              		.loc 1 301 14 view .LVU291
 954 0002 0D46     		mov	r5, r1
 955 0004 0446     		mov	r4, r0
 956              	.LVL96:
 309:src/display.c ****     if (sep == SEP_COMMA)
 957              		.loc 1 309 5 is_stmt 1 view .LVU292
 958 0006 0238     		subs	r0, r0, #2
 959              	.LVL97:
 309:src/display.c ****     if (sep == SEP_COMMA)
 960              		.loc 1 309 5 is_stmt 0 view .LVU293
ARM GAS  /tmp/ccdQiHBS.s 			page 50


 961 0008 FFF7FEFF 		bl	set_dot
 962              	.LVL98:
 310:src/display.c ****       set_dot(posn+8);
 963              		.loc 1 310 5 is_stmt 1 view .LVU294
 310:src/display.c ****       set_dot(posn+8);
 964              		.loc 1 310 8 is_stmt 0 view .LVU295
 965 000c 012D     		cmp	r5, #1
 966 000e 01D0     		beq	.L98
 967              	.LVL99:
 314:src/display.c **** 
 968              		.loc 1 314 1 view .LVU296
 969 0010 0020     		movs	r0, #0
 970 0012 38BD     		pop	{r3, r4, r5, pc}
 971              	.LVL100:
 972              	.L98:
 311:src/display.c ****   }
 973              		.loc 1 311 7 is_stmt 1 view .LVU297
 974 0014 601E     		subs	r0, r4, #1
 975 0016 FFF7FEFF 		bl	set_dot
 976              	.LVL101:
 314:src/display.c **** 
 977              		.loc 1 314 1 is_stmt 0 view .LVU298
 978 001a 0020     		movs	r0, #0
 979 001c 38BD     		pop	{r3, r4, r5, pc}
 314:src/display.c **** 
 980              		.loc 1 314 1 view .LVU299
 981              		.cfi_endproc
 982              	.LFE49:
 984 001e 00BF     		.section	.text.set_decimal.part.0,"ax",%progbits
 985              		.align	1
 986              		.p2align 2,,3
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 990              		.fpu fpv4-sp-d16
 992              	set_decimal.part.0:
 993              	.LVL102:
 994              	.LFB50:
 286:src/display.c ****   if (res) {
 995              		.loc 1 286 14 is_stmt 1 view -0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 290:src/display.c ****     if (decimal != DECIMAL_DOT)
 999              		.loc 1 290 5 view .LVU301
 286:src/display.c ****   if (res) {
 1000              		.loc 1 286 14 is_stmt 0 view .LVU302
 1001 0000 38B5     		push	{r3, r4, r5, lr}
 1002              		.cfi_def_cfa_offset 16
 1003              		.cfi_offset 3, -16
 1004              		.cfi_offset 4, -12
 1005              		.cfi_offset 5, -8
 1006              		.cfi_offset 14, -4
 286:src/display.c ****   if (res) {
 1007              		.loc 1 286 14 view .LVU303
 1008 0002 0446     		mov	r4, r0
 1009 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccdQiHBS.s 			page 51


 290:src/display.c ****     if (decimal != DECIMAL_DOT)
 1010              		.loc 1 290 5 view .LVU304
 1011 0006 0730     		adds	r0, r0, #7
 1012              	.LVL103:
 290:src/display.c ****     if (decimal != DECIMAL_DOT)
 1013              		.loc 1 290 5 view .LVU305
 1014 0008 FFF7FEFF 		bl	set_dot
 1015              	.LVL104:
 291:src/display.c ****       set_dot(posn+8);
 1016              		.loc 1 291 5 is_stmt 1 view .LVU306
 291:src/display.c ****       set_dot(posn+8);
 1017              		.loc 1 291 8 is_stmt 0 view .LVU307
 1018 000c 0DB9     		cbnz	r5, .L105
 1019              	.LVL105:
 294:src/display.c **** }
 1020              		.loc 1 294 3 is_stmt 1 view .LVU308
 295:src/display.c **** 
 1021              		.loc 1 295 1 is_stmt 0 view .LVU309
 1022 000e 0020     		movs	r0, #0
 1023 0010 38BD     		pop	{r3, r4, r5, pc}
 1024              	.LVL106:
 1025              	.L105:
 292:src/display.c ****   }
 1026              		.loc 1 292 7 is_stmt 1 view .LVU310
 1027 0012 04F10800 		add	r0, r4, #8
 1028 0016 FFF7FEFF 		bl	set_dot
 1029              	.LVL107:
 294:src/display.c **** }
 1030              		.loc 1 294 3 view .LVU311
 295:src/display.c **** 
 1031              		.loc 1 295 1 is_stmt 0 view .LVU312
 1032 001a 0020     		movs	r0, #0
 1033 001c 38BD     		pop	{r3, r4, r5, pc}
 295:src/display.c **** 
 1034              		.loc 1 295 1 view .LVU313
 1035              		.cfi_endproc
 1036              	.LFE50:
 1038 001e 00BF     		.section	.text.set_digits_string,"ax",%progbits
 1039              		.align	1
 1040              		.p2align 2,,3
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv4-sp-d16
 1046              	set_digits_string:
 1047              	.LVL108:
 1048              	.LFB12:
 339:src/display.c ****   for (; *msg != '\0'; msg++) {
 1049              		.loc 1 339 55 is_stmt 1 view -0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1053              		.loc 1 340 3 view .LVU315
 339:src/display.c ****   for (; *msg != '\0'; msg++) {
 1054              		.loc 1 339 55 is_stmt 0 view .LVU316
 1055 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccdQiHBS.s 			page 52


 1056              		.cfi_def_cfa_offset 16
 1057              		.cfi_offset 3, -16
 1058              		.cfi_offset 4, -12
 1059              		.cfi_offset 5, -8
 1060              		.cfi_offset 14, -4
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1061              		.loc 1 340 10 view .LVU317
 1062 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1063              		.loc 1 340 10 is_stmt 1 view .LVU318
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1064              		.loc 1 340 3 is_stmt 0 view .LVU319
 1065 0004 D3B1     		cbz	r3, .L106
 1066 0006 0546     		mov	r5, r0
 1067 0008 0C46     		mov	r4, r1
 1068 000a 06E0     		b	.L110
 1069              	.LVL109:
 1070              	.L108:
 1071              	.LBB189:
 1072              	.LBB190:
 334:src/display.c ****   return res;
 1073              		.loc 1 334 8 view .LVU320
 1074 000c 2046     		mov	r0, r4
 1075              	.LVL110:
 334:src/display.c ****   return res;
 1076              		.loc 1 334 8 view .LVU321
 1077 000e FFF7FEFF 		bl	set_dig
 1078              	.LVL111:
 335:src/display.c **** }
 1079              		.loc 1 335 3 is_stmt 1 view .LVU322
 335:src/display.c **** }
 1080              		.loc 1 335 3 is_stmt 0 view .LVU323
 1081              	.LBE190:
 1082              	.LBE189:
 345:src/display.c ****     }
 1083              		.loc 1 345 7 is_stmt 1 view .LVU324
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1084              		.loc 1 340 10 is_stmt 0 view .LVU325
 1085 0012 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1086              	.LVL112:
 345:src/display.c ****     }
 1087              		.loc 1 345 9 view .LVU326
 1088 0016 0934     		adds	r4, r4, #9
 1089              	.LVL113:
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1090              		.loc 1 340 24 is_stmt 1 view .LVU327
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1091              		.loc 1 340 10 view .LVU328
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1092              		.loc 1 340 3 is_stmt 0 view .LVU329
 1093 0018 83B1     		cbz	r3, .L106
 1094              	.LVL114:
 1095              	.L110:
 341:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1096              		.loc 1 341 5 is_stmt 1 view .LVU330
 342:src/display.c ****     else {
 1097              		.loc 1 342 7 view .LVU331
ARM GAS  /tmp/ccdQiHBS.s 			page 53


 1098              	.LBB193:
 1099              	.LBI193:
 286:src/display.c ****   if (res) {
 1100              		.loc 1 286 14 view .LVU332
 1101              	.LBB194:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1102              		.loc 1 287 3 view .LVU333
 1103              	.LBE194:
 1104              	.LBE193:
 344:src/display.c ****       j += SEGS_PER_DIGIT;
 1105              		.loc 1 344 7 view .LVU334
 1106              	.LBB197:
 1107              	.LBI189:
 332:src/display.c ****   if (res) *res++ = ch;
 1108              		.loc 1 332 14 view .LVU335
 1109              	.LBB191:
 333:src/display.c ****   else	set_dig(base, ch);
 1110              		.loc 1 333 3 view .LVU336
 334:src/display.c ****   return res;
 1111              		.loc 1 334 8 view .LVU337
 1112              	.LBE191:
 1113              	.LBE197:
 341:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1114              		.loc 1 341 21 is_stmt 0 view .LVU338
 1115 001a 03F0FD02 		and	r2, r3, #253
 1116 001e 2C2A     		cmp	r2, #44
 1117              	.LBB198:
 1118              	.LBB195:
 1119 0020 A4F10900 		sub	r0, r4, #9
 1120              	.LVL115:
 341:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1121              		.loc 1 341 21 view .LVU339
 1122              	.LBE195:
 1123              	.LBE198:
 1124              	.LBB199:
 1125              	.LBB192:
 334:src/display.c ****   return res;
 1126              		.loc 1 334 8 view .LVU340
 1127 0024 1946     		mov	r1, r3
 1128              	.LBE192:
 1129              	.LBE199:
 341:src/display.c ****       set_decimal(j - SEGS_PER_DIGIT, *msg == '.' ? DECIMAL_DOT : DECIMAL_COMMA, CNULL);
 1130              		.loc 1 341 21 view .LVU341
 1131 0026 F1D1     		bne	.L108
 1132              	.LBB200:
 1133              	.LBB196:
 1134 0028 B3F12E01 		subs	r1, r3, #46
 1135 002c 18BF     		it	ne
 1136 002e 0121     		movne	r1, #1
 1137 0030 FFF7FEFF 		bl	set_decimal.part.0
 1138              	.LVL116:
 294:src/display.c **** }
 1139              		.loc 1 294 3 is_stmt 1 view .LVU342
 294:src/display.c **** }
 1140              		.loc 1 294 3 is_stmt 0 view .LVU343
 1141              	.LBE196:
 1142              	.LBE200:
ARM GAS  /tmp/ccdQiHBS.s 			page 54


 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1143              		.loc 1 340 24 is_stmt 1 view .LVU344
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1144              		.loc 1 340 10 view .LVU345
 1145 0034 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 1146              	.LVL117:
 340:src/display.c ****     if (*msg == '.' || *msg == ',')
 1147              		.loc 1 340 3 is_stmt 0 view .LVU346
 1148 0038 002B     		cmp	r3, #0
 1149 003a EED1     		bne	.L110
 1150              	.LVL118:
 1151              	.L106:
 348:src/display.c **** 
 1152              		.loc 1 348 1 view .LVU347
 1153 003c 38BD     		pop	{r3, r4, r5, pc}
 1154              		.cfi_endproc
 1155              	.LFE12:
 1157 003e 00BF     		.section	.rodata.check_special_dn.isra.0.str1.4,"aMS",%progbits,1
 1158              		.align	2
 1159              	.LC0:
 1160 0000 4E614E00 		.ascii	"NaN\000"
 1161              		.section	.text.check_special_dn.isra.0,"ax",%progbits
 1162              		.align	1
 1163              		.p2align 2,,3
 1164              		.syntax unified
 1165              		.thumb
 1166              		.thumb_func
 1167              		.fpu fpv4-sp-d16
 1169              	check_special_dn.isra.0:
 1170              	.LVL119:
 1171              	.LFB51:
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1172              		.loc 1 1544 18 is_stmt 1 view -0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
1545:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1176              		.loc 1 1545 2 view .LVU349
1545:src/display.c **** 	  if (decNumberIsNaN(x)) {
 1177              		.loc 1 1545 5 is_stmt 0 view .LVU350
 1178 0000 10F07002 		ands	r2, r0, #112
 1179 0004 0BD0     		beq	.L124
1546:src/display.c **** 	    if (res) {
 1180              		.loc 1 1546 4 is_stmt 1 view .LVU351
1546:src/display.c **** 	    if (res) {
 1181              		.loc 1 1546 7 is_stmt 0 view .LVU352
 1182 0006 10F0300F 		tst	r0, #48
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1183              		.loc 1 1544 18 view .LVU353
 1184 000a 08B5     		push	{r3, lr}
 1185              		.cfi_def_cfa_offset 8
 1186              		.cfi_offset 3, -8
 1187              		.cfi_offset 14, -4
 1188 000c 0B46     		mov	r3, r1
1546:src/display.c **** 	    if (res) {
 1189              		.loc 1 1546 7 view .LVU354
 1190 000e 08D0     		beq	.L118
ARM GAS  /tmp/ccdQiHBS.s 			page 55


 1191              	.LVL120:
 1192              	.LBB203:
 1193              	.LBI203:
1544:src/display.c **** 	if (decNumberIsSpecial(x)) {
 1194              		.loc 1 1544 18 is_stmt 1 view .LVU355
 1195              	.LBB204:
1547:src/display.c **** 	      scopy(res, "NaN");
 1196              		.loc 1 1547 6 view .LVU356
1547:src/display.c **** 	      scopy(res, "NaN");
 1197              		.loc 1 1547 9 is_stmt 0 view .LVU357
 1198 0010 99B1     		cbz	r1, .L119
1548:src/display.c **** 	    } else {
 1199              		.loc 1 1548 8 is_stmt 1 view .LVU358
 1200 0012 0846     		mov	r0, r1
 1201 0014 1049     		ldr	r1, .L133
 1202              	.LVL121:
1548:src/display.c **** 	    } else {
 1203              		.loc 1 1548 8 is_stmt 0 view .LVU359
 1204 0016 FFF7FEFF 		bl	scopy
 1205              	.LVL122:
1548:src/display.c **** 	    } else {
 1206              		.loc 1 1548 8 view .LVU360
 1207 001a 0120     		movs	r0, #1
 1208              	.LBE204:
 1209              	.LBE203:
1567:src/display.c **** 
 1210              		.loc 1 1567 7 view .LVU361
 1211 001c 08BD     		pop	{r3, pc}
 1212              	.LVL123:
 1213              	.L124:
 1214              		.cfi_def_cfa_offset 0
 1215              		.cfi_restore 3
 1216              		.cfi_restore 14
1566:src/display.c ****       }
 1217              		.loc 1 1566 9 view .LVU362
 1218 001e 1046     		mov	r0, r2
1567:src/display.c **** 
 1219              		.loc 1 1567 7 view .LVU363
 1220 0020 7047     		bx	lr
 1221              	.L118:
 1222              		.cfi_def_cfa_offset 8
 1223              		.cfi_offset 3, -8
 1224              		.cfi_offset 14, -4
1554:src/display.c **** 	      if (res) *res++ = '-';
 1225              		.loc 1 1554 6 is_stmt 1 view .LVU364
1554:src/display.c **** 	      if (res) *res++ = '-';
 1226              		.loc 1 1554 9 is_stmt 0 view .LVU365
 1227 0022 0206     		lsls	r2, r0, #24
 1228 0024 04D4     		bmi	.L132
1558:src/display.c **** 	      *res++ = '\237';
 1229              		.loc 1 1558 6 is_stmt 1 view .LVU366
1558:src/display.c **** 	      *res++ = '\237';
 1230              		.loc 1 1558 9 is_stmt 0 view .LVU367
 1231 0026 89B1     		cbz	r1, .L123
 1232              	.LVL124:
 1233              	.L122:
1559:src/display.c **** 	    else {
ARM GAS  /tmp/ccdQiHBS.s 			page 56


 1234              		.loc 1 1559 8 is_stmt 1 view .LVU368
1559:src/display.c **** 	    else {
 1235              		.loc 1 1559 15 is_stmt 0 view .LVU369
 1236 0028 9F22     		movs	r2, #159
 1237 002a 1A70     		strb	r2, [r3]
1563:src/display.c **** 	  }
 1238              		.loc 1 1563 13 view .LVU370
 1239 002c 0120     		movs	r0, #1
1567:src/display.c **** 
 1240              		.loc 1 1567 7 view .LVU371
 1241 002e 08BD     		pop	{r3, pc}
 1242              	.LVL125:
 1243              	.L132:
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1244              		.loc 1 1555 8 is_stmt 1 view .LVU372
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1245              		.loc 1 1555 11 is_stmt 0 view .LVU373
 1246 0030 41B1     		cbz	r1, .L121
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1247              		.loc 1 1555 17 is_stmt 1 view .LVU374
 1248              	.LVL126:
1555:src/display.c **** 	      else	set_dig(SEGS_PER_DIGIT, '-');
 1249              		.loc 1 1555 24 is_stmt 0 view .LVU375
 1250 0032 2D22     		movs	r2, #45
 1251 0034 03F8012B 		strb	r2, [r3], #1
 1252              	.LVL127:
1558:src/display.c **** 	      *res++ = '\237';
 1253              		.loc 1 1558 6 is_stmt 1 view .LVU376
 1254 0038 F6E7     		b	.L122
 1255              	.LVL128:
 1256              	.L119:
 1257              	.LBB206:
 1258              	.LBB205:
1550:src/display.c **** 	    }
 1259              		.loc 1 1550 8 view .LVU377
 1260 003a 0848     		ldr	r0, .L133+4
 1261 003c FFF7FEFF 		bl	set_digits_string
 1262              	.LVL129:
1550:src/display.c **** 	    }
 1263              		.loc 1 1550 8 is_stmt 0 view .LVU378
 1264 0040 0120     		movs	r0, #1
 1265              	.LBE205:
 1266              	.LBE206:
1567:src/display.c **** 
 1267              		.loc 1 1567 7 view .LVU379
 1268 0042 08BD     		pop	{r3, pc}
 1269              	.LVL130:
 1270              	.L121:
1556:src/display.c **** 	    }
 1271              		.loc 1 1556 13 is_stmt 1 view .LVU380
 1272 0044 2D21     		movs	r1, #45
 1273              	.LVL131:
1556:src/display.c **** 	    }
 1274              		.loc 1 1556 13 is_stmt 0 view .LVU381
 1275 0046 0920     		movs	r0, #9
 1276 0048 FFF7FEFF 		bl	set_dig
 1277              	.LVL132:
ARM GAS  /tmp/ccdQiHBS.s 			page 57


1558:src/display.c **** 	      *res++ = '\237';
 1278              		.loc 1 1558 6 is_stmt 1 view .LVU382
 1279              	.L123:
1561:src/display.c **** 	    }
 1280              		.loc 1 1561 8 view .LVU383
 1281 004c 0448     		ldr	r0, .L133+8
 1282 004e 1221     		movs	r1, #18
 1283 0050 FFF7FEFF 		bl	set_digits_string
 1284              	.LVL133:
1563:src/display.c **** 	  }
 1285              		.loc 1 1563 13 is_stmt 0 view .LVU384
 1286 0054 0120     		movs	r0, #1
1567:src/display.c **** 
 1287              		.loc 1 1567 7 view .LVU385
 1288 0056 08BD     		pop	{r3, pc}
 1289              	.L134:
 1290              		.align	2
 1291              	.L133:
 1292 0058 00000000 		.word	.LC0
 1293 005c 00000000 		.word	.LANCHOR3
 1294 0060 00000000 		.word	.LANCHOR4
 1295              		.cfi_endproc
 1296              	.LFE51:
 1298              		.section	.text.set_x_hms,"ax",%progbits
 1299              		.align	1
 1300              		.p2align 2,,3
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1304              		.fpu fpv4-sp-d16
 1306              	set_x_hms:
 1307              	.LVL134:
 1308              	.LFB22:
1607:src/display.c **** 
1608:src/display.c **** 
1609:src/display.c ****       /* Display the number in H.MS mode.
1610:src/display.c ****        * HMS is hhh[degrees]mm'ss.ss" fixed formated modulo reduced to range
1611:src/display.c ****        */
1612:src/display.c ****       static void set_x_hms(const decNumber *rgx, char *res) {
 1309              		.loc 1 1612 62 is_stmt 1 view -0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 200
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
1613:src/display.c **** 	decNumber x, y, a, t, u;
 1313              		.loc 1 1613 2 view .LVU387
1614:src/display.c **** 	int j=0;
 1314              		.loc 1 1614 2 view .LVU388
1612:src/display.c **** 	decNumber x, y, a, t, u;
 1315              		.loc 1 1612 62 is_stmt 0 view .LVU389
 1316 0000 30B5     		push	{r4, r5, lr}
 1317              		.cfi_def_cfa_offset 12
 1318              		.cfi_offset 4, -12
 1319              		.cfi_offset 5, -8
 1320              		.cfi_offset 14, -4
 1321 0002 B5B0     		sub	sp, sp, #212
 1322              		.cfi_def_cfa_offset 224
1612:src/display.c **** 	decNumber x, y, a, t, u;
ARM GAS  /tmp/ccdQiHBS.s 			page 58


 1323              		.loc 1 1612 62 view .LVU390
 1324 0004 0446     		mov	r4, r0
 1325              		.loc 1 1614 6 view .LVU391
 1326 0006 0023     		movs	r3, #0
1615:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
1616:src/display.c **** 	unsigned int hr, min, sec, fs;
1617:src/display.c **** 
1618:src/display.c **** 	if (check_special_dn(rgx, res)) {
 1327              		.loc 1 1618 6 view .LVU392
 1328 0008 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 1329              	.LVL135:
1614:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1330              		.loc 1 1614 6 view .LVU393
 1331 000a 0393     		str	r3, [sp, #12]
1615:src/display.c **** 	const int exp_last = SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT;
 1332              		.loc 1 1615 2 is_stmt 1 view .LVU394
 1333              	.LVL136:
1616:src/display.c **** 
 1334              		.loc 1 1616 2 view .LVU395
 1335              		.loc 1 1618 2 view .LVU396
1612:src/display.c **** 	decNumber x, y, a, t, u;
 1336              		.loc 1 1612 62 is_stmt 0 view .LVU397
 1337 000c 0D46     		mov	r5, r1
 1338              		.loc 1 1618 6 view .LVU398
 1339 000e FFF7FEFF 		bl	check_special_dn.isra.0
 1340              	.LVL137:
 1341              		.loc 1 1618 5 view .LVU399
 1342 0012 48B1     		cbz	r0, .L136
1619:src/display.c **** 	  if (decNumberIsInfinite(rgx))
 1343              		.loc 1 1619 4 is_stmt 1 view .LVU400
 1344              		.loc 1 1619 7 is_stmt 0 view .LVU401
 1345 0014 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1346 0016 5B06     		lsls	r3, r3, #25
 1347 0018 04D5     		bpl	.L135
1620:src/display.c **** 	    res = set_dig_s(exp_last, 'o', res);
 1348              		.loc 1 1620 6 is_stmt 1 view .LVU402
 1349              	.LVL138:
 1350              	.LBB207:
 1351              	.LBI207:
 332:src/display.c ****   if (res) *res++ = ch;
 1352              		.loc 1 332 14 view .LVU403
 1353              	.LBB208:
 333:src/display.c ****   else	set_dig(base, ch);
 1354              		.loc 1 333 3 view .LVU404
 333:src/display.c ****   else	set_dig(base, ch);
 1355              		.loc 1 333 6 is_stmt 0 view .LVU405
 1356 001a 002D     		cmp	r5, #0
 1357 001c 00F0BB80 		beq	.L139
 333:src/display.c ****   else	set_dig(base, ch);
 1358              		.loc 1 333 12 is_stmt 1 view .LVU406
 1359              	.LVL139:
 333:src/display.c ****   else	set_dig(base, ch);
 1360              		.loc 1 333 19 is_stmt 0 view .LVU407
 1361 0020 6F23     		movs	r3, #111
 1362 0022 2B70     		strb	r3, [r5]
 1363              	.LVL140:
 1364              	.L135:
ARM GAS  /tmp/ccdQiHBS.s 			page 59


 333:src/display.c ****   else	set_dig(base, ch);
 1365              		.loc 1 333 19 view .LVU408
 1366              	.LBE208:
 1367              	.LBE207:
1621:src/display.c **** 	  return;
1622:src/display.c **** 	}
1623:src/display.c **** 
1624:src/display.c **** 	set_separator_decimal_modes();
1625:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
1626:src/display.c **** 	dn_abs(&a, rgx);
1627:src/display.c **** 	if (decNumberIsNegative(&x)) {
1628:src/display.c **** 	  if (res != NULL)
1629:src/display.c **** 	    *res++ += '-';
1630:src/display.c **** 	  else
1631:src/display.c **** 	    SET_MANT_SIGN;
1632:src/display.c **** 	  dn_minus(&x, &x);
1633:src/display.c **** 	}
1634:src/display.c **** 
1635:src/display.c **** 	decNumberHR2HMS(&y, &x);
1636:src/display.c **** 	dn_mulpow10(&t, &y, 6);
1637:src/display.c **** 	decNumberRound(&u, &t);
1638:src/display.c **** 
1639:src/display.c **** 	hms_step(&t, &u, &fs);
1640:src/display.c **** 	hms_step(&u, &t, &sec);
1641:src/display.c **** 	hms_step(&t, &u, &min);
1642:src/display.c **** 	hr = dn_to_int(&t);
1643:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
1644:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
1645:src/display.c **** 
1646:src/display.c **** 	// degrees
1647:src/display.c **** 	res = hms_render(hr, res, &j, 4, 1);
1648:src/display.c **** 	res = set_dig_s(j, '@', res);
1649:src/display.c **** 	j += SEGS_PER_DIGIT;
1650:src/display.c **** 
1651:src/display.c **** 	// minutes
1652:src/display.c **** 	res = hms_render(min, res, &j, 2, 1);
1653:src/display.c **** 	res = set_dig_s(j, '\'', res);
1654:src/display.c **** 	j += SEGS_PER_DIGIT;
1655:src/display.c **** 
1656:src/display.c **** 	// seconds
1657:src/display.c **** 	res = hms_render(sec, res, &j, 2, 1);
1658:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
1659:src/display.c **** 
1660:src/display.c **** 	// Fractional seconds
1661:src/display.c **** 	res = hms_render(fs, res, &j, 2, 0);
1662:src/display.c **** 
1663:src/display.c **** 	// We're now pointing at the exponent's first digit...
1664:src/display.c **** 	res = set_dig_s(j, '"', res);
1665:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
1666:src/display.c **** 
1667:src/display.c **** 	// Check for values too big or small
1668:src/display.c **** 	if (dn_ge(&a, &const_9000)) {
1669:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
1670:src/display.c **** 	} else if (! dn_eq0(&a)) {
1671:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
1672:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
1673:src/display.c **** 	  }
ARM GAS  /tmp/ccdQiHBS.s 			page 60


1674:src/display.c **** 	}
1675:src/display.c ****       }
 1368              		.loc 1 1675 7 view .LVU409
 1369 0024 35B0     		add	sp, sp, #212
 1370              		.cfi_remember_state
 1371              		.cfi_def_cfa_offset 12
 1372              		@ sp needed
 1373 0026 30BD     		pop	{r4, r5, pc}
 1374              	.LVL141:
 1375              	.L136:
 1376              		.cfi_restore_state
1624:src/display.c **** 	decNumberMod(&x, rgx, &const_9000);
 1377              		.loc 1 1624 2 is_stmt 1 view .LVU410
 1378 0028 FFF7FEFF 		bl	set_separator_decimal_modes
 1379              	.LVL142:
1625:src/display.c **** 	dn_abs(&a, rgx);
 1380              		.loc 1 1625 2 view .LVU411
 1381 002c 654A     		ldr	r2, .L170
 1382 002e 2146     		mov	r1, r4
 1383 0030 07A8     		add	r0, sp, #28
 1384 0032 FFF7FEFF 		bl	decNumberMod
 1385              	.LVL143:
1626:src/display.c **** 	if (decNumberIsNegative(&x)) {
 1386              		.loc 1 1626 2 view .LVU412
 1387 0036 2146     		mov	r1, r4
 1388 0038 19A8     		add	r0, sp, #100
 1389 003a FFF7FEFF 		bl	dn_abs
 1390              	.LVL144:
1627:src/display.c **** 	  if (res != NULL)
 1391              		.loc 1 1627 2 view .LVU413
1627:src/display.c **** 	  if (res != NULL)
 1392              		.loc 1 1627 5 is_stmt 0 view .LVU414
 1393 003e 9DF92430 		ldrsb	r3, [sp, #36]
 1394 0042 002B     		cmp	r3, #0
 1395 0044 75DB     		blt	.L168
 1396              	.L140:
1635:src/display.c **** 	dn_mulpow10(&t, &y, 6);
 1397              		.loc 1 1635 2 is_stmt 1 view .LVU415
 1398 0046 07A9     		add	r1, sp, #28
 1399 0048 10A8     		add	r0, sp, #64
 1400 004a FFF7FEFF 		bl	decNumberHR2HMS
 1401              	.LVL145:
1636:src/display.c **** 	decNumberRound(&u, &t);
 1402              		.loc 1 1636 2 view .LVU416
 1403 004e 0622     		movs	r2, #6
 1404 0050 10A9     		add	r1, sp, #64
 1405 0052 22A8     		add	r0, sp, #136
 1406 0054 FFF7FEFF 		bl	dn_mulpow10
 1407              	.LVL146:
1637:src/display.c **** 
 1408              		.loc 1 1637 2 view .LVU417
 1409 0058 22A9     		add	r1, sp, #136
 1410 005a 2BA8     		add	r0, sp, #172
 1411 005c FFF7FEFF 		bl	decNumberRound
 1412              	.LVL147:
1639:src/display.c **** 	hms_step(&u, &t, &sec);
 1413              		.loc 1 1639 2 view .LVU418
ARM GAS  /tmp/ccdQiHBS.s 			page 61


 1414 0060 2BA9     		add	r1, sp, #172
 1415 0062 22A8     		add	r0, sp, #136
 1416 0064 06AA     		add	r2, sp, #24
 1417 0066 FFF7FEFF 		bl	hms_step
 1418              	.LVL148:
1640:src/display.c **** 	hms_step(&t, &u, &min);
 1419              		.loc 1 1640 2 view .LVU419
 1420 006a 22A9     		add	r1, sp, #136
 1421 006c 2BA8     		add	r0, sp, #172
 1422 006e 05AA     		add	r2, sp, #20
 1423 0070 FFF7FEFF 		bl	hms_step
 1424              	.LVL149:
1641:src/display.c **** 	hr = dn_to_int(&t);
 1425              		.loc 1 1641 2 view .LVU420
 1426 0074 04AA     		add	r2, sp, #16
 1427 0076 2BA9     		add	r1, sp, #172
 1428 0078 22A8     		add	r0, sp, #136
 1429 007a FFF7FEFF 		bl	hms_step
 1430              	.LVL150:
1642:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1431              		.loc 1 1642 2 view .LVU421
1642:src/display.c **** 	if (sec >= 60) { sec -= 60; min++;	}
 1432              		.loc 1 1642 7 is_stmt 0 view .LVU422
 1433 007e 22A8     		add	r0, sp, #136
 1434 0080 FFF7FEFF 		bl	dn_to_int
 1435              	.LVL151:
1643:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1436              		.loc 1 1643 33 view .LVU423
 1437 0084 DDE90432 		ldrd	r3, r2, [sp, #16]
1643:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1438              		.loc 1 1643 5 view .LVU424
 1439 0088 3B2A     		cmp	r2, #59
1643:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1440              		.loc 1 1643 19 is_stmt 1 view .LVU425
1643:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1441              		.loc 1 1643 23 is_stmt 0 view .LVU426
 1442 008a 82BF     		ittt	hi
 1443 008c 3C3A     		subhi	r2, r2, #60
1643:src/display.c **** 	if (min >= 60) { min -= 60; hr++;	}
 1444              		.loc 1 1643 33 view .LVU427
 1445 008e 0133     		addhi	r3, r3, #1
 1446 0090 CDE90432 		strdhi	r3, r2, [sp, #16]
1644:src/display.c **** 
 1447              		.loc 1 1644 2 is_stmt 1 view .LVU428
1644:src/display.c **** 
 1448              		.loc 1 1644 5 is_stmt 0 view .LVU429
 1449 0094 3B2B     		cmp	r3, #59
 1450 0096 02D9     		bls	.L145
1644:src/display.c **** 
 1451              		.loc 1 1644 19 is_stmt 1 discriminator 1 view .LVU430
1644:src/display.c **** 
 1452              		.loc 1 1644 23 is_stmt 0 discriminator 1 view .LVU431
 1453 0098 3C3B     		subs	r3, r3, #60
 1454 009a 0493     		str	r3, [sp, #16]
1644:src/display.c **** 
 1455              		.loc 1 1644 30 is_stmt 1 discriminator 1 view .LVU432
1644:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 62


 1456              		.loc 1 1644 32 is_stmt 0 discriminator 1 view .LVU433
 1457 009c 0130     		adds	r0, r0, #1
 1458              	.LVL152:
 1459              	.L145:
1647:src/display.c **** 	res = set_dig_s(j, '@', res);
 1460              		.loc 1 1647 2 is_stmt 1 view .LVU434
1647:src/display.c **** 	res = set_dig_s(j, '@', res);
 1461              		.loc 1 1647 8 is_stmt 0 view .LVU435
 1462 009e 0123     		movs	r3, #1
 1463 00a0 0093     		str	r3, [sp]
 1464 00a2 2946     		mov	r1, r5
 1465 00a4 03AA     		add	r2, sp, #12
 1466 00a6 0423     		movs	r3, #4
 1467 00a8 FFF7FEFF 		bl	hms_render
 1468              	.LVL153:
1648:src/display.c **** 	j += SEGS_PER_DIGIT;
 1469              		.loc 1 1648 2 is_stmt 1 view .LVU436
 1470              	.LBB210:
 1471              	.LBI210:
 332:src/display.c ****   if (res) *res++ = ch;
 1472              		.loc 1 332 14 view .LVU437
 1473              	.LBB211:
 333:src/display.c ****   else	set_dig(base, ch);
 1474              		.loc 1 333 3 view .LVU438
 333:src/display.c ****   else	set_dig(base, ch);
 1475              		.loc 1 333 6 is_stmt 0 view .LVU439
 1476 00ac 0446     		mov	r4, r0
 1477              	.LVL154:
 333:src/display.c ****   else	set_dig(base, ch);
 1478              		.loc 1 333 6 view .LVU440
 1479 00ae 0028     		cmp	r0, #0
 1480 00b0 7CD0     		beq	.L146
 333:src/display.c ****   else	set_dig(base, ch);
 1481              		.loc 1 333 12 is_stmt 1 view .LVU441
 333:src/display.c ****   else	set_dig(base, ch);
 1482              		.loc 1 333 16 is_stmt 0 view .LVU442
 1483 00b2 0146     		mov	r1, r0
 1484              	.LVL155:
 333:src/display.c ****   else	set_dig(base, ch);
 1485              		.loc 1 333 19 view .LVU443
 1486 00b4 4023     		movs	r3, #64
 1487 00b6 01F8013B 		strb	r3, [r1], #1
 1488              	.LVL156:
 1489              	.L147:
 335:src/display.c **** }
 1490              		.loc 1 335 3 is_stmt 1 view .LVU444
 335:src/display.c **** }
 1491              		.loc 1 335 3 is_stmt 0 view .LVU445
 1492              	.LBE211:
 1493              	.LBE210:
1649:src/display.c **** 
 1494              		.loc 1 1649 2 is_stmt 1 view .LVU446
1652:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1495              		.loc 1 1652 8 is_stmt 0 view .LVU447
 1496 00ba DDE90330 		ldrd	r3, r0, [sp, #12]
 1497 00be 0122     		movs	r2, #1
1649:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 63


 1498              		.loc 1 1649 4 view .LVU448
 1499 00c0 03F10904 		add	r4, r3, #9
1652:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1500              		.loc 1 1652 8 view .LVU449
 1501 00c4 0092     		str	r2, [sp]
 1502 00c6 0223     		movs	r3, #2
 1503 00c8 03AA     		add	r2, sp, #12
1649:src/display.c **** 
 1504              		.loc 1 1649 4 view .LVU450
 1505 00ca 0394     		str	r4, [sp, #12]
1652:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1506              		.loc 1 1652 2 is_stmt 1 view .LVU451
1652:src/display.c **** 	res = set_dig_s(j, '\'', res);
 1507              		.loc 1 1652 8 is_stmt 0 view .LVU452
 1508 00cc FFF7FEFF 		bl	hms_render
 1509              	.LVL157:
1653:src/display.c **** 	j += SEGS_PER_DIGIT;
 1510              		.loc 1 1653 2 is_stmt 1 view .LVU453
 1511              	.LBB213:
 1512              	.LBI213:
 332:src/display.c ****   if (res) *res++ = ch;
 1513              		.loc 1 332 14 view .LVU454
 1514              	.LBB214:
 333:src/display.c ****   else	set_dig(base, ch);
 1515              		.loc 1 333 3 view .LVU455
 333:src/display.c ****   else	set_dig(base, ch);
 1516              		.loc 1 333 6 is_stmt 0 view .LVU456
 1517 00d0 0446     		mov	r4, r0
 1518 00d2 0028     		cmp	r0, #0
 1519 00d4 64D0     		beq	.L148
 333:src/display.c ****   else	set_dig(base, ch);
 1520              		.loc 1 333 12 is_stmt 1 view .LVU457
 333:src/display.c ****   else	set_dig(base, ch);
 1521              		.loc 1 333 16 is_stmt 0 view .LVU458
 1522 00d6 0146     		mov	r1, r0
 1523              	.LVL158:
 333:src/display.c ****   else	set_dig(base, ch);
 1524              		.loc 1 333 19 view .LVU459
 1525 00d8 2723     		movs	r3, #39
 1526 00da 01F8013B 		strb	r3, [r1], #1
 1527              	.LVL159:
 1528              	.L149:
 335:src/display.c **** }
 1529              		.loc 1 335 3 is_stmt 1 view .LVU460
 335:src/display.c **** }
 1530              		.loc 1 335 3 is_stmt 0 view .LVU461
 1531              	.LBE214:
 1532              	.LBE213:
1654:src/display.c **** 
 1533              		.loc 1 1654 2 is_stmt 1 view .LVU462
1654:src/display.c **** 
 1534              		.loc 1 1654 4 is_stmt 0 view .LVU463
 1535 00de 039B     		ldr	r3, [sp, #12]
1657:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1536              		.loc 1 1657 8 view .LVU464
 1537 00e0 0598     		ldr	r0, [sp, #20]
 1538 00e2 0122     		movs	r2, #1
ARM GAS  /tmp/ccdQiHBS.s 			page 64


1654:src/display.c **** 
 1539              		.loc 1 1654 4 view .LVU465
 1540 00e4 03F10904 		add	r4, r3, #9
1657:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1541              		.loc 1 1657 8 view .LVU466
 1542 00e8 0092     		str	r2, [sp]
 1543 00ea 0223     		movs	r3, #2
 1544 00ec 03AA     		add	r2, sp, #12
1654:src/display.c **** 
 1545              		.loc 1 1654 4 view .LVU467
 1546 00ee 0394     		str	r4, [sp, #12]
1657:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1547              		.loc 1 1657 2 is_stmt 1 view .LVU468
1657:src/display.c **** 	res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 1548              		.loc 1 1657 8 is_stmt 0 view .LVU469
 1549 00f0 FFF7FEFF 		bl	hms_render
 1550              	.LVL160:
1658:src/display.c **** 
 1551              		.loc 1 1658 2 is_stmt 1 view .LVU470
1658:src/display.c **** 
 1552              		.loc 1 1658 8 is_stmt 0 view .LVU471
 1553 00f4 344B     		ldr	r3, .L170+4
 1554 00f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1555              	.LVL161:
 1556              	.LBB216:
 1557              	.LBI216:
 286:src/display.c ****   if (res) {
 1558              		.loc 1 286 14 is_stmt 1 view .LVU472
 1559              	.LBB217:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1560              		.loc 1 287 3 view .LVU473
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 1561              		.loc 1 287 6 is_stmt 0 view .LVU474
 1562 00f8 0028     		cmp	r0, #0
 1563 00fa 38D0     		beq	.L150
 288:src/display.c ****   } else {
 1564              		.loc 1 288 5 is_stmt 1 view .LVU475
 288:src/display.c ****   } else {
 1565              		.loc 1 288 12 is_stmt 0 view .LVU476
 1566 00fc 0029     		cmp	r1, #0
 288:src/display.c ****   } else {
 1567              		.loc 1 288 9 view .LVU477
 1568 00fe 0146     		mov	r1, r0
 1569              	.LVL162:
 288:src/display.c ****   } else {
 1570              		.loc 1 288 12 view .LVU478
 1571 0100 0CBF     		ite	eq
 1572 0102 2E23     		moveq	r3, #46
 1573 0104 2C23     		movne	r3, #44
 1574 0106 01F8013B 		strb	r3, [r1], #1
 1575              	.LVL163:
 1576              	.L152:
 294:src/display.c **** }
 1577              		.loc 1 294 3 is_stmt 1 view .LVU479
 294:src/display.c **** }
 1578              		.loc 1 294 3 is_stmt 0 view .LVU480
 1579              	.LBE217:
ARM GAS  /tmp/ccdQiHBS.s 			page 65


 1580              	.LBE216:
1661:src/display.c **** 
 1581              		.loc 1 1661 2 is_stmt 1 view .LVU481
1661:src/display.c **** 
 1582              		.loc 1 1661 8 is_stmt 0 view .LVU482
 1583 010a 0023     		movs	r3, #0
 1584 010c 0093     		str	r3, [sp]
 1585 010e 0698     		ldr	r0, [sp, #24]
 1586 0110 03AA     		add	r2, sp, #12
 1587 0112 0223     		movs	r3, #2
 1588 0114 FFF7FEFF 		bl	hms_render
 1589              	.LVL164:
1664:src/display.c **** 	// j += SEGS_PER_EXP_DIGIT;
 1590              		.loc 1 1664 2 is_stmt 1 view .LVU483
 1591              	.LBB219:
 1592              	.LBI219:
 332:src/display.c ****   if (res) *res++ = ch;
 1593              		.loc 1 332 14 view .LVU484
 1594              	.LBB220:
 333:src/display.c ****   else	set_dig(base, ch);
 1595              		.loc 1 333 3 view .LVU485
 333:src/display.c ****   else	set_dig(base, ch);
 1596              		.loc 1 333 6 is_stmt 0 view .LVU486
 1597 0118 0446     		mov	r4, r0
 1598 011a 90B3     		cbz	r0, .L153
 333:src/display.c ****   else	set_dig(base, ch);
 1599              		.loc 1 333 12 is_stmt 1 view .LVU487
 1600              	.LVL165:
 333:src/display.c ****   else	set_dig(base, ch);
 1601              		.loc 1 333 19 is_stmt 0 view .LVU488
 1602 011c 2223     		movs	r3, #34
 1603 011e 0370     		strb	r3, [r0]
 1604              	.LVL166:
 335:src/display.c **** }
 1605              		.loc 1 335 3 is_stmt 1 view .LVU489
 335:src/display.c **** }
 1606              		.loc 1 335 3 is_stmt 0 view .LVU490
 1607              	.LBE220:
 1608              	.LBE219:
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1609              		.loc 1 1668 2 is_stmt 1 view .LVU491
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1610              		.loc 1 1668 6 is_stmt 0 view .LVU492
 1611 0120 2849     		ldr	r1, .L170
 1612 0122 19A8     		add	r0, sp, #100
 1613              	.LVL167:
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1614              		.loc 1 1668 6 view .LVU493
 1615 0124 FFF7FEFF 		bl	dn_lt
 1616              	.LVL168:
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1617              		.loc 1 1668 5 view .LVU494
 1618 0128 78B9     		cbnz	r0, .L169
1669:src/display.c **** 	} else if (! dn_eq0(&a)) {
 1619              		.loc 1 1669 4 is_stmt 1 view .LVU495
 1620              	.LVL169:
 1621              	.LBB223:
ARM GAS  /tmp/ccdQiHBS.s 			page 66


 1622              	.LBI223:
 332:src/display.c ****   if (res) *res++ = ch;
 1623              		.loc 1 332 14 view .LVU496
 1624              	.LBB224:
 333:src/display.c ****   else	set_dig(base, ch);
 1625              		.loc 1 333 3 view .LVU497
 333:src/display.c ****   else	set_dig(base, ch);
 1626              		.loc 1 333 12 view .LVU498
 333:src/display.c ****   else	set_dig(base, ch);
 1627              		.loc 1 333 19 is_stmt 0 view .LVU499
 1628 012a 6F23     		movs	r3, #111
 1629 012c 6370     		strb	r3, [r4, #1]
 1630              	.LBE224:
 1631              	.LBE223:
 1632              		.loc 1 1675 7 view .LVU500
 1633 012e 35B0     		add	sp, sp, #212
 1634              		.cfi_remember_state
 1635              		.cfi_def_cfa_offset 12
 1636              		@ sp needed
 1637 0130 30BD     		pop	{r4, r5, pc}
 1638              	.LVL170:
 1639              	.L168:
 1640              		.cfi_restore_state
1628:src/display.c **** 	    *res++ += '-';
 1641              		.loc 1 1628 4 is_stmt 1 view .LVU501
1628:src/display.c **** 	    *res++ += '-';
 1642              		.loc 1 1628 7 is_stmt 0 view .LVU502
 1643 0132 15B3     		cbz	r5, .L141
1629:src/display.c **** 	  else
 1644              		.loc 1 1629 6 is_stmt 1 view .LVU503
1629:src/display.c **** 	  else
 1645              		.loc 1 1629 10 is_stmt 0 view .LVU504
 1646 0134 2B46     		mov	r3, r5
 1647              	.LVL171:
1629:src/display.c **** 	  else
 1648              		.loc 1 1629 13 view .LVU505
 1649 0136 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1650              	.LVL172:
1629:src/display.c **** 	  else
 1651              		.loc 1 1629 13 view .LVU506
 1652 013a 2D32     		adds	r2, r2, #45
 1653 013c 2A70     		strb	r2, [r5]
1629:src/display.c **** 	  else
 1654              		.loc 1 1629 10 view .LVU507
 1655 013e 1D46     		mov	r5, r3
 1656              	.LVL173:
 1657              	.L142:
1632:src/display.c **** 	}
 1658              		.loc 1 1632 4 is_stmt 1 view .LVU508
 1659 0140 07A9     		add	r1, sp, #28
 1660 0142 0846     		mov	r0, r1
 1661 0144 FFF7FEFF 		bl	dn_minus
 1662              	.LVL174:
 1663 0148 7DE7     		b	.L140
 1664              	.LVL175:
 1665              	.L169:
 1666              	.LBB225:
ARM GAS  /tmp/ccdQiHBS.s 			page 67


 1667              	.LBB221:
 333:src/display.c ****   else	set_dig(base, ch);
 1668              		.loc 1 333 16 is_stmt 0 view .LVU509
 1669 014a 0134     		adds	r4, r4, #1
 1670              	.LVL176:
 1671              	.L156:
 333:src/display.c ****   else	set_dig(base, ch);
 1672              		.loc 1 333 16 view .LVU510
 1673              	.LBE221:
 1674              	.LBE225:
1670:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1675              		.loc 1 1670 9 is_stmt 1 view .LVU511
1670:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1676              		.loc 1 1670 15 is_stmt 0 view .LVU512
 1677 014c 19A8     		add	r0, sp, #100
 1678 014e FFF7FEFF 		bl	dn_eq0
 1679              	.LVL177:
1670:src/display.c **** 	  if (dn_le(&a, &const_hms_threshold)) {
 1680              		.loc 1 1670 12 view .LVU513
 1681 0152 0028     		cmp	r0, #0
 1682 0154 7FF466AF 		bne	.L135
1671:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1683              		.loc 1 1671 4 is_stmt 1 view .LVU514
1671:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1684              		.loc 1 1671 8 is_stmt 0 view .LVU515
 1685 0158 1C48     		ldr	r0, .L170+8
 1686 015a 19A9     		add	r1, sp, #100
 1687 015c FFF7FEFF 		bl	dn_lt
 1688              	.LVL178:
1671:src/display.c **** 	    res = set_dig_s(exp_last, 'u', res);
 1689              		.loc 1 1671 7 view .LVU516
 1690 0160 0028     		cmp	r0, #0
 1691 0162 7FF45FAF 		bne	.L135
1672:src/display.c **** 	  }
 1692              		.loc 1 1672 6 is_stmt 1 view .LVU517
 1693              	.LVL179:
 1694              	.LBB226:
 1695              	.LBI226:
 332:src/display.c ****   if (res) *res++ = ch;
 1696              		.loc 1 332 14 view .LVU518
 1697              	.LBB227:
 333:src/display.c ****   else	set_dig(base, ch);
 1698              		.loc 1 333 3 view .LVU519
 333:src/display.c ****   else	set_dig(base, ch);
 1699              		.loc 1 333 6 is_stmt 0 view .LVU520
 1700 0166 3CB3     		cbz	r4, .L158
 333:src/display.c ****   else	set_dig(base, ch);
 1701              		.loc 1 333 12 is_stmt 1 view .LVU521
 1702              	.LVL180:
 333:src/display.c ****   else	set_dig(base, ch);
 1703              		.loc 1 333 19 is_stmt 0 view .LVU522
 1704 0168 7523     		movs	r3, #117
 1705 016a 2370     		strb	r3, [r4]
 1706 016c 5AE7     		b	.L135
 1707              	.LVL181:
 1708              	.L150:
 333:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccdQiHBS.s 			page 68


 1709              		.loc 1 333 19 view .LVU523
 1710              	.LBE227:
 1711              	.LBE226:
1658:src/display.c **** 
 1712              		.loc 1 1658 8 view .LVU524
 1713 016e 0398     		ldr	r0, [sp, #12]
 1714              	.LVL182:
 1715              	.LBB229:
 1716              	.LBB218:
1658:src/display.c **** 
 1717              		.loc 1 1658 8 view .LVU525
 1718 0170 0938     		subs	r0, r0, #9
 1719 0172 FFF7FEFF 		bl	set_decimal.part.0
 1720              	.LVL183:
1658:src/display.c **** 
 1721              		.loc 1 1658 8 view .LVU526
 1722 0176 0146     		mov	r1, r0
 1723 0178 C7E7     		b	.L152
 1724              	.LVL184:
 1725              	.L141:
1658:src/display.c **** 
 1726              		.loc 1 1658 8 view .LVU527
 1727              	.LBE218:
 1728              	.LBE229:
1631:src/display.c **** 	  dn_minus(&x, &x);
 1729              		.loc 1 1631 6 is_stmt 1 view .LVU528
 1730              	.LBB230:
 1731              	.LBI230:
 237:src/display.c **** {
 1732              		.loc 1 237 13 view .LVU529
 1733              	.LBB231:
 239:src/display.c **** }
 1734              		.loc 1 239 3 view .LVU530
 1735 017a 8120     		movs	r0, #129
 1736 017c FFF7FEFF 		bl	set_dot
 1737              	.LVL185:
 240:src/display.c **** 
 1738              		.loc 1 240 1 is_stmt 0 view .LVU531
 1739 0180 DEE7     		b	.L142
 1740              	.LVL186:
 1741              	.L153:
 240:src/display.c **** 
 1742              		.loc 1 240 1 view .LVU532
 1743              	.LBE231:
 1744              	.LBE230:
 1745              	.LBB232:
 1746              	.LBB222:
 334:src/display.c ****   return res;
 1747              		.loc 1 334 8 is_stmt 1 view .LVU533
 1748 0182 0398     		ldr	r0, [sp, #12]
 1749              	.LVL187:
 334:src/display.c ****   return res;
 1750              		.loc 1 334 8 is_stmt 0 view .LVU534
 1751 0184 2221     		movs	r1, #34
 1752 0186 FFF7FEFF 		bl	set_dig
 1753              	.LVL188:
 335:src/display.c **** }
ARM GAS  /tmp/ccdQiHBS.s 			page 69


 1754              		.loc 1 335 3 is_stmt 1 view .LVU535
 335:src/display.c **** }
 1755              		.loc 1 335 3 is_stmt 0 view .LVU536
 1756              	.LBE222:
 1757              	.LBE232:
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1758              		.loc 1 1668 2 is_stmt 1 view .LVU537
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1759              		.loc 1 1668 6 is_stmt 0 view .LVU538
 1760 018a 0E49     		ldr	r1, .L170
 1761 018c 19A8     		add	r0, sp, #100
 1762 018e FFF7FEFF 		bl	dn_lt
 1763              	.LVL189:
1668:src/display.c **** 	  res = set_dig_s(exp_last, 'o', res);
 1764              		.loc 1 1668 5 view .LVU539
 1765 0192 0028     		cmp	r0, #0
 1766 0194 DAD1     		bne	.L156
 1767              	.LVL190:
 1768              	.L139:
 1769              	.LBB233:
 1770              	.LBB209:
 334:src/display.c ****   return res;
 1771              		.loc 1 334 8 is_stmt 1 view .LVU540
 1772 0196 6F21     		movs	r1, #111
 1773 0198 7A20     		movs	r0, #122
 1774 019a FFF7FEFF 		bl	set_dig
 1775              	.LVL191:
 1776              	.LBE209:
 1777              	.LBE233:
1621:src/display.c **** 	}
 1778              		.loc 1 1621 4 view .LVU541
 1779 019e 41E7     		b	.L135
 1780              	.LVL192:
 1781              	.L148:
 1782              	.LBB234:
 1783              	.LBB215:
 334:src/display.c ****   return res;
 1784              		.loc 1 334 8 view .LVU542
 1785 01a0 2721     		movs	r1, #39
 1786 01a2 0398     		ldr	r0, [sp, #12]
 1787              	.LVL193:
 334:src/display.c ****   return res;
 1788              		.loc 1 334 8 is_stmt 0 view .LVU543
 1789 01a4 FFF7FEFF 		bl	set_dig
 1790              	.LVL194:
 334:src/display.c ****   return res;
 1791              		.loc 1 334 8 view .LVU544
 1792 01a8 2146     		mov	r1, r4
 1793 01aa 98E7     		b	.L149
 1794              	.LVL195:
 1795              	.L146:
 334:src/display.c ****   return res;
 1796              		.loc 1 334 8 view .LVU545
 1797              	.LBE215:
 1798              	.LBE234:
 1799              	.LBB235:
 1800              	.LBB212:
ARM GAS  /tmp/ccdQiHBS.s 			page 70


 334:src/display.c ****   return res;
 1801              		.loc 1 334 8 is_stmt 1 view .LVU546
 1802 01ac 4021     		movs	r1, #64
 1803 01ae 0398     		ldr	r0, [sp, #12]
 1804              	.LVL196:
 334:src/display.c ****   return res;
 1805              		.loc 1 334 8 is_stmt 0 view .LVU547
 1806 01b0 FFF7FEFF 		bl	set_dig
 1807              	.LVL197:
 334:src/display.c ****   return res;
 1808              		.loc 1 334 8 view .LVU548
 1809 01b4 2146     		mov	r1, r4
 1810 01b6 80E7     		b	.L147
 1811              	.LVL198:
 1812              	.L158:
 334:src/display.c ****   return res;
 1813              		.loc 1 334 8 view .LVU549
 1814              	.LBE212:
 1815              	.LBE235:
 1816              	.LBB236:
 1817              	.LBB228:
 334:src/display.c ****   return res;
 1818              		.loc 1 334 8 is_stmt 1 view .LVU550
 1819 01b8 7521     		movs	r1, #117
 1820 01ba 7A20     		movs	r0, #122
 1821 01bc FFF7FEFF 		bl	set_dig
 1822              	.LVL199:
 1823 01c0 30E7     		b	.L135
 1824              	.L171:
 1825 01c2 00BF     		.align	2
 1826              	.L170:
 1827 01c4 00000000 		.word	const_9000
 1828 01c8 00000000 		.word	.LANCHOR1
 1829 01cc 00000000 		.word	const_hms_threshold
 1830              	.LBE228:
 1831              	.LBE236:
 1832              		.cfi_endproc
 1833              	.LFE22:
 1835              		.section	.text.set_x_fract,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.syntax unified
 1839              		.thumb
 1840              		.thumb_func
 1841              		.fpu fpv4-sp-d16
 1843              	set_x_fract:
 1844              	.LVL200:
 1845              	.LFB23:
1676:src/display.c **** 
1677:src/display.c **** 
1678:src/display.c ****       static int set_x_fract(const decNumber *rgx, char *res) {
 1846              		.loc 1 1678 63 view -0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 216
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
1679:src/display.c **** 	decNumber x, w, n, d, t;
 1850              		.loc 1 1679 2 view .LVU552
ARM GAS  /tmp/ccdQiHBS.s 			page 71


1680:src/display.c **** 	char buf[32], *p = buf;
 1851              		.loc 1 1680 2 view .LVU553
1681:src/display.c **** 	int j;
 1852              		.loc 1 1681 2 view .LVU554
1682:src/display.c **** 
1683:src/display.c **** 	if (check_special_dn(rgx, res))
 1853              		.loc 1 1683 2 view .LVU555
1678:src/display.c **** 	decNumber x, w, n, d, t;
 1854              		.loc 1 1678 63 is_stmt 0 view .LVU556
 1855 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1856              		.cfi_def_cfa_offset 20
 1857              		.cfi_offset 4, -20
 1858              		.cfi_offset 5, -16
 1859              		.cfi_offset 6, -12
 1860              		.cfi_offset 7, -8
 1861              		.cfi_offset 14, -4
 1862 0002 0646     		mov	r6, r0
 1863 0004 B7B0     		sub	sp, sp, #220
 1864              		.cfi_def_cfa_offset 240
 1865              		.loc 1 1683 6 view .LVU557
 1866 0006 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 1867              	.LVL201:
1678:src/display.c **** 	decNumber x, w, n, d, t;
 1868              		.loc 1 1678 63 view .LVU558
 1869 0008 0C46     		mov	r4, r1
 1870              		.loc 1 1683 6 view .LVU559
 1871 000a FFF7FEFF 		bl	check_special_dn.isra.0
 1872              	.LVL202:
 1873              		.loc 1 1683 5 view .LVU560
 1874 000e 18B1     		cbz	r0, .L203
 1875              	.LVL203:
 1876              	.L192:
1684:src/display.c **** 	  return 1;
 1877              		.loc 1 1684 11 view .LVU561
 1878 0010 0125     		movs	r5, #1
 1879              	.L172:
1685:src/display.c **** 	dn_abs(&x, rgx);
1686:src/display.c **** 	if (dn_ge(&x, &const_100000))
1687:src/display.c **** 	  return 0;
1688:src/display.c **** 	if (dn_lt(&x, &const_0_0001))
1689:src/display.c **** 	  return 0;
1690:src/display.c **** 	if (decNumberIsNegative(rgx)) {
1691:src/display.c **** 	  if (res != NULL)
1692:src/display.c **** 	    *res++ += '-';
1693:src/display.c **** 	  else
1694:src/display.c **** 	    SET_MANT_SIGN;
1695:src/display.c **** 	}
1696:src/display.c **** 	decNumberFrac(&w, &x);
1697:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
1698:src/display.c **** 
1699:src/display.c **** 	dn_divide(&t, &n, &d);
1700:src/display.c **** 	dn_compare(&t, &t, &w);
1701:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
1702:src/display.c **** 
1703:src/display.c **** 	if (dn_eq(&n, &d)) {
1704:src/display.c **** 	  dn_inc(&w);
1705:src/display.c **** 	  decNumberZero(&n);
ARM GAS  /tmp/ccdQiHBS.s 			page 72


1706:src/display.c **** 	}
1707:src/display.c **** 
1708:src/display.c **** 	if (!UState.improperfrac) {
1709:src/display.c **** 	  if (!dn_eq0(&w)) {
1710:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
1711:src/display.c **** 	    *p++ = ' ';
1712:src/display.c **** 	  }
1713:src/display.c **** 	} else {
1714:src/display.c **** 	  dn_multiply(&x, &w, &d);
1715:src/display.c **** 	  dn_add(&n, &n, &x);
1716:src/display.c **** 	}
1717:src/display.c **** 	p = num_arg(p, dn_to_int(&n));
1718:src/display.c **** 	*p++ = '/';
1719:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
1720:src/display.c **** 	*p = '\0';
1721:src/display.c **** 	if ((p - 12) > buf) {
1722:src/display.c **** 	  p -= 12;
1723:src/display.c **** 	  *p = '<';
1724:src/display.c **** 	} else	p = buf;
1725:src/display.c **** 	for (j=0; *p != '\0'; p++) {
1726:src/display.c **** 	  res = set_dig_s(j, *p, res);
1727:src/display.c **** 	  j += SEGS_PER_DIGIT;
1728:src/display.c **** 	}
1729:src/display.c **** 
1730:src/display.c **** 	if (dn_eq0(&t))
1731:src/display.c **** 	  p = (char *)S7_fract_EQ;
1732:src/display.c **** 	else if (decNumberIsNegative(&t))
1733:src/display.c **** 	  p = (char *)S7_fract_LT;
1734:src/display.c **** 	else
1735:src/display.c **** 	  p = (char *)S7_fract_GT;
1736:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
1737:src/display.c **** 	  res = set_dig_s(j, *p, res);
1738:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
1739:src/display.c **** 	}
1740:src/display.c **** 	return 1;
1741:src/display.c ****       }
 1880              		.loc 1 1741 7 view .LVU562
 1881 0012 2846     		mov	r0, r5
 1882 0014 37B0     		add	sp, sp, #220
 1883              		.cfi_remember_state
 1884              		.cfi_def_cfa_offset 20
 1885              		@ sp needed
 1886 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 1887              	.LVL204:
 1888              	.L203:
 1889              		.cfi_restore_state
 1890              	.LBB245:
 1891              	.LBI245:
1678:src/display.c **** 	decNumber x, w, n, d, t;
 1892              		.loc 1 1678 18 is_stmt 1 view .LVU563
 1893              	.LBB246:
1685:src/display.c **** 	dn_abs(&x, rgx);
 1894              		.loc 1 1685 2 view .LVU564
 1895 0018 3146     		mov	r1, r6
 1896 001a 0546     		mov	r5, r0
 1897 001c 09A8     		add	r0, sp, #36
 1898 001e FFF7FEFF 		bl	dn_abs
ARM GAS  /tmp/ccdQiHBS.s 			page 73


 1899              	.LVL205:
1686:src/display.c **** 	  return 0;
 1900              		.loc 1 1686 2 view .LVU565
1686:src/display.c **** 	  return 0;
 1901              		.loc 1 1686 6 is_stmt 0 view .LVU566
 1902 0022 5C49     		ldr	r1, .L208
 1903 0024 09A8     		add	r0, sp, #36
 1904 0026 FFF7FEFF 		bl	dn_lt
 1905              	.LVL206:
1686:src/display.c **** 	  return 0;
 1906              		.loc 1 1686 5 view .LVU567
 1907 002a 0028     		cmp	r0, #0
 1908 002c F1D0     		beq	.L172
1688:src/display.c **** 	  return 0;
 1909              		.loc 1 1688 2 is_stmt 1 view .LVU568
1688:src/display.c **** 	  return 0;
 1910              		.loc 1 1688 6 is_stmt 0 view .LVU569
 1911 002e 5A49     		ldr	r1, .L208+4
 1912 0030 09A8     		add	r0, sp, #36
 1913 0032 FFF7FEFF 		bl	dn_lt
 1914              	.LVL207:
1688:src/display.c **** 	  return 0;
 1915              		.loc 1 1688 5 view .LVU570
 1916 0036 0746     		mov	r7, r0
 1917 0038 0028     		cmp	r0, #0
 1918 003a EAD1     		bne	.L172
1690:src/display.c **** 	  if (res != NULL)
 1919              		.loc 1 1690 2 is_stmt 1 view .LVU571
1690:src/display.c **** 	  if (res != NULL)
 1920              		.loc 1 1690 5 is_stmt 0 view .LVU572
 1921 003c 96F90830 		ldrsb	r3, [r6, #8]
 1922 0040 002B     		cmp	r3, #0
 1923 0042 C0F28680 		blt	.L204
 1924              	.LVL208:
 1925              	.L177:
1696:src/display.c **** 	decNumber2Fraction(&n, &d, &w);	/* Get the number as a numerator & denominator */
 1926              		.loc 1 1696 2 is_stmt 1 view .LVU573
 1927 0046 09A9     		add	r1, sp, #36
 1928 0048 12A8     		add	r0, sp, #72
 1929 004a FFF7FEFF 		bl	decNumberFrac
 1930              	.LVL209:
1697:src/display.c **** 
 1931              		.loc 1 1697 2 view .LVU574
 1932 004e 12AA     		add	r2, sp, #72
 1933 0050 24A9     		add	r1, sp, #144
 1934 0052 1BA8     		add	r0, sp, #108
 1935 0054 FFF7FEFF 		bl	decNumber2Fraction
 1936              	.LVL210:
1699:src/display.c **** 	dn_compare(&t, &t, &w);
 1937              		.loc 1 1699 2 view .LVU575
 1938 0058 24AA     		add	r2, sp, #144
 1939 005a 1BA9     		add	r1, sp, #108
 1940 005c 2DA8     		add	r0, sp, #180
 1941 005e FFF7FEFF 		bl	dn_divide
 1942              	.LVL211:
1700:src/display.c **** 	decNumberTrunc(&w, &x);		/* Extract the whole part */
 1943              		.loc 1 1700 2 view .LVU576
ARM GAS  /tmp/ccdQiHBS.s 			page 74


 1944 0062 2DA9     		add	r1, sp, #180
 1945 0064 12AA     		add	r2, sp, #72
 1946 0066 0846     		mov	r0, r1
 1947 0068 FFF7FEFF 		bl	dn_compare
 1948              	.LVL212:
1701:src/display.c **** 
 1949              		.loc 1 1701 2 view .LVU577
 1950 006c 09A9     		add	r1, sp, #36
 1951 006e 12A8     		add	r0, sp, #72
 1952 0070 FFF7FEFF 		bl	decNumberTrunc
 1953              	.LVL213:
1703:src/display.c **** 	  dn_inc(&w);
 1954              		.loc 1 1703 2 view .LVU578
1703:src/display.c **** 	  dn_inc(&w);
 1955              		.loc 1 1703 6 is_stmt 0 view .LVU579
 1956 0074 24A9     		add	r1, sp, #144
 1957 0076 1BA8     		add	r0, sp, #108
 1958 0078 FFF7FEFF 		bl	dn_eq
 1959              	.LVL214:
1703:src/display.c **** 	  dn_inc(&w);
 1960              		.loc 1 1703 5 view .LVU580
 1961 007c 0028     		cmp	r0, #0
 1962 007e 70D1     		bne	.L205
 1963              	.L179:
1708:src/display.c **** 	  if (!dn_eq0(&w)) {
 1964              		.loc 1 1708 2 is_stmt 1 view .LVU581
1708:src/display.c **** 	  if (!dn_eq0(&w)) {
 1965              		.loc 1 1708 6 is_stmt 0 view .LVU582
 1966 0080 464B     		ldr	r3, .L208+8
 1967 0082 1B68     		ldr	r3, [r3]
 1968 0084 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1708:src/display.c **** 	  if (!dn_eq0(&w)) {
 1969              		.loc 1 1708 5 view .LVU583
 1970 0088 DB06     		lsls	r3, r3, #27
 1971 008a 55D4     		bmi	.L180
1709:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 1972              		.loc 1 1709 4 is_stmt 1 view .LVU584
1709:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 1973              		.loc 1 1709 9 is_stmt 0 view .LVU585
 1974 008c 12A8     		add	r0, sp, #72
 1975 008e FFF7FEFF 		bl	dn_eq0
 1976              	.LVL215:
1709:src/display.c **** 	    p = num_arg(p, dn_to_int(&w));
 1977              		.loc 1 1709 7 view .LVU586
 1978 0092 0028     		cmp	r0, #0
 1979 0094 6CD0     		beq	.L206
1680:src/display.c **** 	int j;
 1980              		.loc 1 1680 17 view .LVU587
 1981 0096 01AE     		add	r6, sp, #4
 1982              	.LVL216:
1680:src/display.c **** 	int j;
 1983              		.loc 1 1680 17 view .LVU588
 1984 0098 3546     		mov	r5, r6
 1985              	.L181:
 1986              	.LVL217:
1717:src/display.c **** 	*p++ = '/';
 1987              		.loc 1 1717 2 is_stmt 1 view .LVU589
ARM GAS  /tmp/ccdQiHBS.s 			page 75


1717:src/display.c **** 	*p++ = '/';
 1988              		.loc 1 1717 17 is_stmt 0 view .LVU590
 1989 009a 1BA8     		add	r0, sp, #108
 1990 009c FFF7FEFF 		bl	dn_to_int
 1991              	.LVL218:
 1992 00a0 0146     		mov	r1, r0
1717:src/display.c **** 	*p++ = '/';
 1993              		.loc 1 1717 6 view .LVU591
 1994 00a2 2846     		mov	r0, r5
 1995 00a4 FFF7FEFF 		bl	num_arg
 1996              	.LVL219:
1718:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 1997              		.loc 1 1718 2 is_stmt 1 view .LVU592
1718:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 1998              		.loc 1 1718 4 is_stmt 0 view .LVU593
 1999 00a8 0546     		mov	r5, r0
 2000              	.LVL220:
1718:src/display.c **** 	p = num_arg(p, dn_to_int(&d));
 2001              		.loc 1 1718 7 view .LVU594
 2002 00aa 2F23     		movs	r3, #47
 2003 00ac 05F8013B 		strb	r3, [r5], #1
 2004              	.LVL221:
1719:src/display.c **** 	*p = '\0';
 2005              		.loc 1 1719 2 is_stmt 1 view .LVU595
1719:src/display.c **** 	*p = '\0';
 2006              		.loc 1 1719 17 is_stmt 0 view .LVU596
 2007 00b0 24A8     		add	r0, sp, #144
 2008 00b2 FFF7FEFF 		bl	dn_to_int
 2009              	.LVL222:
 2010 00b6 0146     		mov	r1, r0
1719:src/display.c **** 	*p = '\0';
 2011              		.loc 1 1719 6 view .LVU597
 2012 00b8 2846     		mov	r0, r5
 2013 00ba FFF7FEFF 		bl	num_arg
 2014              	.LVL223:
1720:src/display.c **** 	if ((p - 12) > buf) {
 2015              		.loc 1 1720 2 is_stmt 1 view .LVU598
1720:src/display.c **** 	if ((p - 12) > buf) {
 2016              		.loc 1 1720 5 is_stmt 0 view .LVU599
 2017 00be 0546     		mov	r5, r0
 2018 00c0 0023     		movs	r3, #0
 2019 00c2 05F80C39 		strb	r3, [r5], #-12
1721:src/display.c **** 	  p -= 12;
 2020              		.loc 1 1721 2 is_stmt 1 view .LVU600
1721:src/display.c **** 	  p -= 12;
 2021              		.loc 1 1721 5 is_stmt 0 view .LVU601
 2022 00c6 B542     		cmp	r5, r6
 2023 00c8 32D8     		bhi	.L182
 2024 00ca 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 2025              	.LVL224:
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2026              		.loc 1 1725 12 is_stmt 1 view .LVU602
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2027              		.loc 1 1725 2 is_stmt 0 view .LVU603
 2028 00ce 51B1     		cbz	r1, .L184
1724:src/display.c **** 	for (j=0; *p != '\0'; p++) {
 2029              		.loc 1 1724 11 view .LVU604
ARM GAS  /tmp/ccdQiHBS.s 			page 76


 2030 00d0 3546     		mov	r5, r6
 2031              	.LVL225:
 2032              	.L187:
1726:src/display.c **** 	  j += SEGS_PER_DIGIT;
 2033              		.loc 1 1726 4 is_stmt 1 view .LVU605
 2034              	.LBB247:
 2035              	.LBI247:
 332:src/display.c ****   if (res) *res++ = ch;
 2036              		.loc 1 332 14 view .LVU606
 2037              	.LBB248:
 333:src/display.c ****   else	set_dig(base, ch);
 2038              		.loc 1 333 3 view .LVU607
 333:src/display.c ****   else	set_dig(base, ch);
 2039              		.loc 1 333 12 view .LVU608
 333:src/display.c ****   else	set_dig(base, ch);
 2040              		.loc 1 333 16 is_stmt 0 view .LVU609
 2041 00d2 2346     		mov	r3, r4
 2042              	.LVL226:
 333:src/display.c ****   else	set_dig(base, ch);
 2043              		.loc 1 333 6 view .LVU610
 2044 00d4 34B3     		cbz	r4, .L185
 2045              	.LVL227:
 333:src/display.c ****   else	set_dig(base, ch);
 2046              		.loc 1 333 19 view .LVU611
 2047 00d6 03F8011B 		strb	r1, [r3], #1
 2048              	.LVL228:
 333:src/display.c ****   else	set_dig(base, ch);
 2049              		.loc 1 333 16 view .LVU612
 2050 00da 1C46     		mov	r4, r3
 2051              	.LVL229:
 2052              	.L186:
 335:src/display.c **** }
 2053              		.loc 1 335 3 is_stmt 1 view .LVU613
 335:src/display.c **** }
 2054              		.loc 1 335 3 is_stmt 0 view .LVU614
 2055              	.LBE248:
 2056              	.LBE247:
1727:src/display.c **** 	}
 2057              		.loc 1 1727 4 is_stmt 1 view .LVU615
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2058              		.loc 1 1725 12 is_stmt 0 view .LVU616
 2059 00dc 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2060              	.LVL230:
1727:src/display.c **** 	}
 2061              		.loc 1 1727 6 view .LVU617
 2062 00e0 0937     		adds	r7, r7, #9
 2063              	.LVL231:
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2064              		.loc 1 1725 24 is_stmt 1 view .LVU618
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2065              		.loc 1 1725 12 view .LVU619
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2066              		.loc 1 1725 2 is_stmt 0 view .LVU620
 2067 00e2 0029     		cmp	r1, #0
 2068 00e4 F5D1     		bne	.L187
 2069              	.LVL232:
 2070              	.L184:
ARM GAS  /tmp/ccdQiHBS.s 			page 77


1730:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2071              		.loc 1 1730 2 is_stmt 1 view .LVU621
1730:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2072              		.loc 1 1730 6 is_stmt 0 view .LVU622
 2073 00e6 2DA8     		add	r0, sp, #180
 2074 00e8 FFF7FEFF 		bl	dn_eq0
 2075              	.LVL233:
1730:src/display.c **** 	  p = (char *)S7_fract_EQ;
 2076              		.loc 1 1730 5 view .LVU623
 2077 00ec F0B9     		cbnz	r0, .L195
1732:src/display.c **** 	  p = (char *)S7_fract_LT;
 2078              		.loc 1 1732 7 is_stmt 1 view .LVU624
1732:src/display.c **** 	  p = (char *)S7_fract_LT;
 2079              		.loc 1 1732 10 is_stmt 0 view .LVU625
 2080 00ee 9DF9BC20 		ldrsb	r2, [sp, #188]
1735:src/display.c **** 	for (j = SEGS_EXP_BASE; *p != '\0'; p++) {
 2081              		.loc 1 1735 6 view .LVU626
 2082 00f2 2B4D     		ldr	r5, .L208+12
 2083 00f4 2B4B     		ldr	r3, .L208+16
 2084 00f6 15EA2205 		ands	r5, r5, r2, asr #32
 2085 00fa 38BF     		it	cc
 2086 00fc 1D46     		movcc	r5, r3
 2087              	.L188:
 2088              	.LVL234:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2089              		.loc 1 1736 26 is_stmt 1 view .LVU627
 2090              	.LBB251:
 2091              	.LBB249:
 333:src/display.c ****   else	set_dig(base, ch);
 2092              		.loc 1 333 16 is_stmt 0 view .LVU628
 2093 00fe 6C26     		movs	r6, #108
 2094 0100 2021     		movs	r1, #32
 2095 0102 08E0     		b	.L191
 2096              	.LVL235:
 2097              	.L207:
 333:src/display.c ****   else	set_dig(base, ch);
 2098              		.loc 1 333 16 view .LVU629
 2099              	.LBE249:
 2100              	.LBE251:
 2101              	.LBB252:
 2102              	.LBB253:
 333:src/display.c ****   else	set_dig(base, ch);
 2103              		.loc 1 333 19 view .LVU630
 2104 0104 03F8011B 		strb	r1, [r3], #1
 2105              	.LVL236:
 333:src/display.c ****   else	set_dig(base, ch);
 2106              		.loc 1 333 16 view .LVU631
 2107 0108 1C46     		mov	r4, r3
 2108              	.LVL237:
 2109              	.L190:
 335:src/display.c **** }
 2110              		.loc 1 335 3 is_stmt 1 view .LVU632
 335:src/display.c **** }
 2111              		.loc 1 335 3 is_stmt 0 view .LVU633
 2112              	.LBE253:
 2113              	.LBE252:
1738:src/display.c **** 	}
ARM GAS  /tmp/ccdQiHBS.s 			page 78


 2114              		.loc 1 1738 4 is_stmt 1 view .LVU634
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2115              		.loc 1 1736 26 is_stmt 0 view .LVU635
 2116 010a 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 2117              	.LVL238:
1738:src/display.c **** 	}
 2118              		.loc 1 1738 6 view .LVU636
 2119 010e 0736     		adds	r6, r6, #7
 2120              	.LVL239:
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2121              		.loc 1 1736 38 is_stmt 1 view .LVU637
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2122              		.loc 1 1736 26 view .LVU638
1736:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2123              		.loc 1 1736 2 is_stmt 0 view .LVU639
 2124 0110 0029     		cmp	r1, #0
 2125 0112 3FF47DAF 		beq	.L192
 2126              	.LVL240:
 2127              	.L191:
1737:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 2128              		.loc 1 1737 4 is_stmt 1 view .LVU640
 2129              	.LBB255:
 2130              	.LBI252:
 332:src/display.c ****   if (res) *res++ = ch;
 2131              		.loc 1 332 14 view .LVU641
 2132              	.LBB254:
 333:src/display.c ****   else	set_dig(base, ch);
 2133              		.loc 1 333 3 view .LVU642
 333:src/display.c ****   else	set_dig(base, ch);
 2134              		.loc 1 333 12 view .LVU643
 333:src/display.c ****   else	set_dig(base, ch);
 2135              		.loc 1 333 16 is_stmt 0 view .LVU644
 2136 0116 2346     		mov	r3, r4
 2137              	.LVL241:
 333:src/display.c ****   else	set_dig(base, ch);
 2138              		.loc 1 333 6 view .LVU645
 2139 0118 002C     		cmp	r4, #0
 2140 011a F3D1     		bne	.L207
 2141              	.LVL242:
 334:src/display.c ****   return res;
 2142              		.loc 1 334 8 is_stmt 1 view .LVU646
 2143 011c 3046     		mov	r0, r6
 2144 011e FFF7FEFF 		bl	set_dig
 2145              	.LVL243:
 334:src/display.c ****   return res;
 2146              		.loc 1 334 8 is_stmt 0 view .LVU647
 2147 0122 F2E7     		b	.L190
 2148              	.LVL244:
 2149              	.L185:
 334:src/display.c ****   return res;
 2150              		.loc 1 334 8 view .LVU648
 2151              	.LBE254:
 2152              	.LBE255:
 2153              	.LBB256:
 2154              	.LBB250:
 334:src/display.c ****   return res;
 2155              		.loc 1 334 8 is_stmt 1 view .LVU649
ARM GAS  /tmp/ccdQiHBS.s 			page 79


 2156 0124 3846     		mov	r0, r7
 2157 0126 FFF7FEFF 		bl	set_dig
 2158              	.LVL245:
 334:src/display.c ****   return res;
 2159              		.loc 1 334 8 is_stmt 0 view .LVU650
 2160 012a D7E7     		b	.L186
 2161              	.LVL246:
 2162              	.L195:
 334:src/display.c ****   return res;
 2163              		.loc 1 334 8 view .LVU651
 2164              	.LBE250:
 2165              	.LBE256:
1731:src/display.c **** 	else if (decNumberIsNegative(&t))
 2166              		.loc 1 1731 6 view .LVU652
 2167 012c 1E4D     		ldr	r5, .L208+20
 2168 012e E6E7     		b	.L188
 2169              	.LVL247:
 2170              	.L182:
1722:src/display.c **** 	  *p = '<';
 2171              		.loc 1 1722 4 is_stmt 1 view .LVU653
1723:src/display.c **** 	} else	p = buf;
 2172              		.loc 1 1723 4 view .LVU654
1723:src/display.c **** 	} else	p = buf;
 2173              		.loc 1 1723 7 is_stmt 0 view .LVU655
 2174 0130 3C21     		movs	r1, #60
 2175 0132 00F80C1C 		strb	r1, [r0, #-12]
 2176              	.LVL248:
1725:src/display.c **** 	  res = set_dig_s(j, *p, res);
 2177              		.loc 1 1725 12 is_stmt 1 view .LVU656
 2178 0136 CCE7     		b	.L187
 2179              	.LVL249:
 2180              	.L180:
1714:src/display.c **** 	  dn_add(&n, &n, &x);
 2181              		.loc 1 1714 4 view .LVU657
 2182 0138 12A9     		add	r1, sp, #72
 2183 013a 24AA     		add	r2, sp, #144
 2184 013c 09A8     		add	r0, sp, #36
 2185 013e FFF7FEFF 		bl	dn_multiply
 2186              	.LVL250:
1715:src/display.c **** 	}
 2187              		.loc 1 1715 4 view .LVU658
 2188 0142 1BA9     		add	r1, sp, #108
 2189 0144 09AA     		add	r2, sp, #36
 2190 0146 0846     		mov	r0, r1
1680:src/display.c **** 	int j;
 2191              		.loc 1 1680 17 is_stmt 0 view .LVU659
 2192 0148 01AE     		add	r6, sp, #4
 2193              	.LVL251:
1715:src/display.c **** 	}
 2194              		.loc 1 1715 4 view .LVU660
 2195 014a FFF7FEFF 		bl	dn_add
 2196              	.LVL252:
1680:src/display.c **** 	int j;
 2197              		.loc 1 1680 17 view .LVU661
 2198 014e 3546     		mov	r5, r6
 2199 0150 A3E7     		b	.L181
 2200              	.LVL253:
ARM GAS  /tmp/ccdQiHBS.s 			page 80


 2201              	.L204:
1691:src/display.c **** 	    *res++ += '-';
 2202              		.loc 1 1691 4 is_stmt 1 view .LVU662
1691:src/display.c **** 	    *res++ += '-';
 2203              		.loc 1 1691 7 is_stmt 0 view .LVU663
 2204 0152 D4B1     		cbz	r4, .L178
1692:src/display.c **** 	  else
 2205              		.loc 1 1692 6 is_stmt 1 view .LVU664
1692:src/display.c **** 	  else
 2206              		.loc 1 1692 10 is_stmt 0 view .LVU665
 2207 0154 2346     		mov	r3, r4
 2208              	.LVL254:
1692:src/display.c **** 	  else
 2209              		.loc 1 1692 13 view .LVU666
 2210 0156 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2211              	.LVL255:
1692:src/display.c **** 	  else
 2212              		.loc 1 1692 13 view .LVU667
 2213 015a 2D32     		adds	r2, r2, #45
 2214 015c 2270     		strb	r2, [r4]
1692:src/display.c **** 	  else
 2215              		.loc 1 1692 10 view .LVU668
 2216 015e 1C46     		mov	r4, r3
 2217              	.LVL256:
1692:src/display.c **** 	  else
 2218              		.loc 1 1692 10 view .LVU669
 2219 0160 71E7     		b	.L177
 2220              	.LVL257:
 2221              	.L205:
1704:src/display.c **** 	  decNumberZero(&n);
 2222              		.loc 1 1704 4 is_stmt 1 view .LVU670
 2223 0162 12A8     		add	r0, sp, #72
 2224 0164 FFF7FEFF 		bl	dn_inc
 2225              	.LVL258:
1705:src/display.c **** 	}
 2226              		.loc 1 1705 4 view .LVU671
 2227 0168 1BA8     		add	r0, sp, #108
 2228 016a FFF7FEFF 		bl	decNumberZero
 2229              	.LVL259:
 2230 016e 87E7     		b	.L179
 2231              	.L206:
1710:src/display.c **** 	    *p++ = ' ';
 2232              		.loc 1 1710 6 view .LVU672
1710:src/display.c **** 	    *p++ = ' ';
 2233              		.loc 1 1710 21 is_stmt 0 view .LVU673
 2234 0170 12A8     		add	r0, sp, #72
 2235 0172 FFF7FEFF 		bl	dn_to_int
 2236              	.LVL260:
1710:src/display.c **** 	    *p++ = ' ';
 2237              		.loc 1 1710 10 view .LVU674
 2238 0176 01AE     		add	r6, sp, #4
 2239              	.LVL261:
1710:src/display.c **** 	    *p++ = ' ';
 2240              		.loc 1 1710 21 view .LVU675
 2241 0178 0146     		mov	r1, r0
1710:src/display.c **** 	    *p++ = ' ';
 2242              		.loc 1 1710 10 view .LVU676
ARM GAS  /tmp/ccdQiHBS.s 			page 81


 2243 017a 3046     		mov	r0, r6
 2244 017c FFF7FEFF 		bl	num_arg
 2245              	.LVL262:
1711:src/display.c **** 	  }
 2246              		.loc 1 1711 6 is_stmt 1 view .LVU677
1711:src/display.c **** 	  }
 2247              		.loc 1 1711 8 is_stmt 0 view .LVU678
 2248 0180 0546     		mov	r5, r0
 2249              	.LVL263:
1711:src/display.c **** 	  }
 2250              		.loc 1 1711 11 view .LVU679
 2251 0182 2023     		movs	r3, #32
 2252 0184 05F8013B 		strb	r3, [r5], #1
 2253              	.LVL264:
1711:src/display.c **** 	  }
 2254              		.loc 1 1711 11 view .LVU680
 2255 0188 87E7     		b	.L181
 2256              	.LVL265:
 2257              	.L178:
1694:src/display.c **** 	}
 2258              		.loc 1 1694 6 is_stmt 1 view .LVU681
 2259              	.LBB257:
 2260              	.LBI257:
 237:src/display.c **** {
 2261              		.loc 1 237 13 view .LVU682
 2262              	.LBB258:
 239:src/display.c **** }
 2263              		.loc 1 239 3 view .LVU683
 2264 018a 8120     		movs	r0, #129
 2265 018c FFF7FEFF 		bl	set_dot
 2266              	.LVL266:
 240:src/display.c **** 
 2267              		.loc 1 240 1 is_stmt 0 view .LVU684
 2268 0190 59E7     		b	.L177
 2269              	.L209:
 2270 0192 00BF     		.align	2
 2271              	.L208:
 2272 0194 00000000 		.word	const_100000
 2273 0198 00000000 		.word	const_0_0001
 2274 019c 00000000 		.word	main_ram
 2275 01a0 00000000 		.word	.LANCHOR5
 2276 01a4 00000000 		.word	.LANCHOR7
 2277 01a8 00000000 		.word	.LANCHOR6
 2278              	.LBE258:
 2279              	.LBE257:
 2280              	.LBE246:
 2281              	.LBE245:
 2282              		.cfi_endproc
 2283              	.LFE23:
 2285              		.section	.rodata.carry_overflow.str1.4,"aMS",%progbits,1
 2286              		.align	2
 2287              	.LC1:
 2288 0000 42333435 		.ascii	"B34567o9D12345h\000"
 2288      36376F39 
 2288      44313233 
 2288      34356800 
 2289              		.section	.text.carry_overflow,"ax",%progbits
ARM GAS  /tmp/ccdQiHBS.s 			page 82


 2290              		.align	1
 2291              		.p2align 2,,3
 2292              		.syntax unified
 2293              		.thumb
 2294              		.thumb_func
 2295              		.fpu fpv4-sp-d16
 2297              	carry_overflow:
 2298              	.LFB15:
 487:src/display.c ****       const int base = SEGS_EXP_BASE;
 2299              		.loc 1 487 38 is_stmt 1 view -0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 0
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 488:src/display.c ****       int c;
 2303              		.loc 1 488 7 view .LVU686
 2304              	.LVL267:
 489:src/display.c ****       unsigned int b;
 2305              		.loc 1 489 7 view .LVU687
 490:src/display.c **** 
 2306              		.loc 1 490 7 view .LVU688
 493:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2307              		.loc 1 493 7 view .LVU689
 487:src/display.c ****       const int base = SEGS_EXP_BASE;
 2308              		.loc 1 487 38 is_stmt 0 view .LVU690
 2309 0000 10B5     		push	{r4, lr}
 2310              		.cfi_def_cfa_offset 8
 2311              		.cfi_offset 4, -8
 2312              		.cfi_offset 14, -4
 493:src/display.c ****       case SDISP_BIN:	b = 2;		break;
 2313              		.loc 1 493 21 view .LVU691
 2314 0002 1A4B     		ldr	r3, .L223
 2315 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2316 0006 023B     		subs	r3, r3, #2
 2317 0008 DBB2     		uxtb	r3, r3
 2318 000a 032B     		cmp	r3, #3
 2319 000c 14D8     		bhi	.L211
 2320 000e 184A     		ldr	r2, .L223+4
 2321 0010 52F82340 		ldr	r4, [r2, r3, lsl #2]
 2322              	.LVL268:
 502:src/display.c **** 	SET_EXP_SIGN;
 2323              		.loc 1 502 7 is_stmt 1 view .LVU692
 502:src/display.c **** 	SET_EXP_SIGN;
 2324              		.loc 1 502 18 is_stmt 0 view .LVU693
 2325 0014 A4F10B03 		sub	r3, r4, #11
 502:src/display.c **** 	SET_EXP_SIGN;
 2326              		.loc 1 502 10 view .LVU694
 2327 0018 042B     		cmp	r3, #4
 2328 001a 17D9     		bls	.L220
 2329              	.L213:
 504:src/display.c ****       set_dig(base, c);
 2330              		.loc 1 504 7 is_stmt 1 view .LVU695
 2331              	.LVL269:
 505:src/display.c **** 
 2332              		.loc 1 505 7 view .LVU696
 504:src/display.c ****       set_dig(base, c);
 2333              		.loc 1 504 28 is_stmt 0 view .LVU697
 2334 001c 154B     		ldr	r3, .L223+8
ARM GAS  /tmp/ccdQiHBS.s 			page 83


 2335 001e 1C44     		add	r4, r4, r3
 2336              	.LVL270:
 505:src/display.c **** 
 2337              		.loc 1 505 7 view .LVU698
 2338 0020 6C20     		movs	r0, #108
 2339 0022 14F8021C 		ldrb	r1, [r4, #-2]	@ zero_extendqisi2
 2340 0026 FFF7FEFF 		bl	set_dig
 2341              	.LVL271:
 508:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2342              		.loc 1 508 7 is_stmt 1 view .LVU699
 508:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2343              		.loc 1 508 11 is_stmt 0 view .LVU700
 2344 002a FFF7FEFF 		bl	get_carry
 2345              	.LVL272:
 508:src/display.c **** 	set_dig(base + SEGS_PER_EXP_DIGIT, 'c');
 2346              		.loc 1 508 10 view .LVU701
 2347 002e B8B9     		cbnz	r0, .L221
 2348              	.L214:
 510:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2349              		.loc 1 510 7 is_stmt 1 view .LVU702
 510:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2350              		.loc 1 510 11 is_stmt 0 view .LVU703
 2351 0030 FFF7FEFF 		bl	get_overflow
 2352              	.LVL273:
 510:src/display.c **** 	set_dig(base + 2*SEGS_PER_EXP_DIGIT, 'o');
 2353              		.loc 1 510 10 view .LVU704
 2354 0034 70B9     		cbnz	r0, .L222
 512:src/display.c **** 
 2355              		.loc 1 512 5 view .LVU705
 2356 0036 10BD     		pop	{r4, pc}
 2357              	.LVL274:
 2358              	.L211:
 498:src/display.c ****       }
 2359              		.loc 1 498 16 is_stmt 1 view .LVU706
 498:src/display.c ****       }
 2360              		.loc 1 498 26 is_stmt 0 view .LVU707
 2361 0038 0F4B     		ldr	r3, .L223+12
 2362 003a 1B68     		ldr	r3, [r3]
 2363 003c 93F8E847 		ldrb	r4, [r3, #2024]	@ zero_extendqisi2
 2364 0040 2409     		lsrs	r4, r4, #4
 498:src/display.c ****       }
 2365              		.loc 1 498 35 view .LVU708
 2366 0042 0134     		adds	r4, r4, #1
 2367              	.LVL275:
 498:src/display.c ****       }
 2368              		.loc 1 498 39 is_stmt 1 view .LVU709
 502:src/display.c **** 	SET_EXP_SIGN;
 2369              		.loc 1 502 7 view .LVU710
 502:src/display.c **** 	SET_EXP_SIGN;
 2370              		.loc 1 502 18 is_stmt 0 view .LVU711
 2371 0044 A4F10B03 		sub	r3, r4, #11
 502:src/display.c **** 	SET_EXP_SIGN;
 2372              		.loc 1 502 10 view .LVU712
 2373 0048 042B     		cmp	r3, #4
 2374 004a E7D8     		bhi	.L213
 2375              	.L220:
 503:src/display.c ****       c = "B34567o9D12345h"[b-2];
ARM GAS  /tmp/ccdQiHBS.s 			page 84


 2376              		.loc 1 503 2 is_stmt 1 view .LVU713
 2377              	.LBB265:
 2378              	.LBI265:
 247:src/display.c **** {
 2379              		.loc 1 247 13 view .LVU714
 2380              	.LBB266:
 249:src/display.c **** }
 2381              		.loc 1 249 3 view .LVU715
 2382 004c 8220     		movs	r0, #130
 2383 004e FFF7FEFF 		bl	set_dot
 2384              	.LVL276:
 250:src/display.c **** 
 2385              		.loc 1 250 1 is_stmt 0 view .LVU716
 2386 0052 E3E7     		b	.L213
 2387              	.LVL277:
 2388              	.L222:
 250:src/display.c **** 
 2389              		.loc 1 250 1 view .LVU717
 2390              	.LBE266:
 2391              	.LBE265:
 2392              	.LBB267:
 2393              	.LBI267:
 487:src/display.c ****       const int base = SEGS_EXP_BASE;
 2394              		.loc 1 487 17 is_stmt 1 view .LVU718
 2395              	.LBB268:
 511:src/display.c ****     }
 2396              		.loc 1 511 2 view .LVU719
 2397              	.LBE268:
 2398              	.LBE267:
 512:src/display.c **** 
 2399              		.loc 1 512 5 is_stmt 0 view .LVU720
 2400 0054 BDE81040 		pop	{r4, lr}
 2401              		.cfi_remember_state
 2402              		.cfi_restore 14
 2403              		.cfi_restore 4
 2404              		.cfi_def_cfa_offset 0
 2405              	.LVL278:
 2406              	.LBB270:
 2407              	.LBB269:
 511:src/display.c ****     }
 2408              		.loc 1 511 2 view .LVU721
 2409 0058 6F21     		movs	r1, #111
 2410 005a 7A20     		movs	r0, #122
 2411 005c FFF7FEBF 		b	set_dig
 2412              	.LVL279:
 2413              	.L221:
 2414              		.cfi_restore_state
 511:src/display.c ****     }
 2415              		.loc 1 511 2 view .LVU722
 2416              	.LBE269:
 2417              	.LBE270:
 509:src/display.c ****       if (get_overflow())
 2418              		.loc 1 509 2 is_stmt 1 view .LVU723
 2419 0060 6321     		movs	r1, #99
 2420 0062 7320     		movs	r0, #115
 2421 0064 FFF7FEFF 		bl	set_dig
 2422              	.LVL280:
ARM GAS  /tmp/ccdQiHBS.s 			page 85


 2423 0068 E2E7     		b	.L214
 2424              	.L224:
 2425 006a 00BF     		.align	2
 2426              	.L223:
 2427 006c 00000000 		.word	StateWhileOn
 2428 0070 00000000 		.word	.LANCHOR8
 2429 0074 00000000 		.word	.LC1
 2430 0078 00000000 		.word	main_ram
 2431              		.cfi_endproc
 2432              	.LFE15:
 2434              		.global	__aeabi_uldivmod
 2435              		.section	.text.set_int_x,"ax",%progbits
 2436              		.align	1
 2437              		.p2align 2,,3
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	set_int_x:
 2444              	.LVL281:
 2445              	.LFB18:
1404:src/display.c **** 	const int ws = word_size();
 2446              		.loc 1 1404 67 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 80
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
1404:src/display.c **** 	const int ws = word_size();
 2450              		.loc 1 1404 67 is_stmt 0 view .LVU725
 2451 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2452              		.cfi_def_cfa_offset 36
 2453              		.cfi_offset 4, -36
 2454              		.cfi_offset 5, -32
 2455              		.cfi_offset 6, -28
 2456              		.cfi_offset 7, -24
 2457              		.cfi_offset 8, -20
 2458              		.cfi_offset 9, -16
 2459              		.cfi_offset 10, -12
 2460              		.cfi_offset 11, -8
 2461              		.cfi_offset 14, -4
 2462 0004 95B0     		sub	sp, sp, #84
 2463              		.cfi_def_cfa_offset 120
1404:src/display.c **** 	const int ws = word_size();
 2464              		.loc 1 1404 67 view .LVU726
 2465 0006 0646     		mov	r6, r0
 2466 0008 0092     		str	r2, [sp]
 2467 000a 0F46     		mov	r7, r1
1405:src/display.c **** 	unsigned int b;
 2468              		.loc 1 1405 2 is_stmt 1 view .LVU727
1405:src/display.c **** 	unsigned int b;
 2469              		.loc 1 1405 17 is_stmt 0 view .LVU728
 2470 000c FFF7FEFF 		bl	word_size
 2471              	.LVL282:
1405:src/display.c **** 	unsigned int b;
 2472              		.loc 1 1405 17 view .LVU729
 2473 0010 B94B     		ldr	r3, .L317
 2474 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 2475 0014 023B     		subs	r3, r3, #2
ARM GAS  /tmp/ccdQiHBS.s 			page 86


 2476 0016 DBB2     		uxtb	r3, r3
1411:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2477              		.loc 1 1411 6 view .LVU730
 2478 0018 0022     		movs	r2, #0
 2479 001a 032B     		cmp	r3, #3
1405:src/display.c **** 	unsigned int b;
 2480              		.loc 1 1405 17 view .LVU731
 2481 001c 8346     		mov	fp, r0
 2482              	.LVL283:
1406:src/display.c **** 	long long int vs = value;
 2483              		.loc 1 1406 2 is_stmt 1 view .LVU732
1407:src/display.c **** 	unsigned long long int v;
 2484              		.loc 1 1407 2 view .LVU733
1408:src/display.c **** 	char buf[MAX_WORD_SIZE + 1];
 2485              		.loc 1 1408 2 view .LVU734
1409:src/display.c **** 	int i, j, k;
 2486              		.loc 1 1409 2 view .LVU735
1410:src/display.c **** 	int sign = 0;
 2487              		.loc 1 1410 2 view .LVU736
1411:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2488              		.loc 1 1411 2 view .LVU737
1411:src/display.c **** 	int dig = SEGS_PER_DIGIT * 11;
 2489              		.loc 1 1411 6 is_stmt 0 view .LVU738
 2490 001e 0292     		str	r2, [sp, #8]
1412:src/display.c **** 
 2491              		.loc 1 1412 2 is_stmt 1 view .LVU739
 2492              	.LVL284:
1414:src/display.c **** 	case SDISP_BIN:	b = 2;		break;
 2493              		.loc 1 1414 2 view .LVU740
 2494 0020 00F24281 		bhi	.L226
 2495 0024 B54A     		ldr	r2, .L317+4
 2496 0026 52F82350 		ldr	r5, [r2, r3, lsl #2]
 2497              	.LVL285:
1422:src/display.c **** 	  IntMaxWindow = 0;
 2498              		.loc 1 1422 2 view .LVU741
1422:src/display.c **** 	  IntMaxWindow = 0;
 2499              		.loc 1 1422 5 is_stmt 0 view .LVU742
 2500 002a 009B     		ldr	r3, [sp]
 2501 002c 002B     		cmp	r3, #0
 2502 002e 00F04281 		beq	.L308
 2503              	.LVL286:
 2504              	.L228:
1427:src/display.c **** 	  v = extract_value(value, &sign);
 2505              		.loc 1 1427 2 is_stmt 1 view .LVU743
1427:src/display.c **** 	  v = extract_value(value, &sign);
 2506              		.loc 1 1427 24 is_stmt 0 view .LVU744
 2507 0032 6B1E     		subs	r3, r5, #1
1427:src/display.c **** 	  v = extract_value(value, &sign);
 2508              		.loc 1 1427 30 view .LVU745
 2509 0034 47F67574 		movw	r4, #32629
 2510 0038 1C41     		asrs	r4, r4, r3
1427:src/display.c **** 	  v = extract_value(value, &sign);
 2511              		.loc 1 1427 5 view .LVU746
 2512 003a 14F00104 		ands	r4, r4, #1
 2513 003e 40F0F280 		bne	.L309
1444:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2514              		.loc 1 1444 4 is_stmt 1 view .LVU747
ARM GAS  /tmp/ccdQiHBS.s 			page 87


1444:src/display.c **** 	    const long long int mask = (1LL << ws) - 1;
 2515              		.loc 1 1444 7 is_stmt 0 view .LVU748
 2516 0042 BBF13F0F 		cmp	fp, #63
 2517 0046 16DC     		bgt	.L239
 2518              	.LBB271:
1445:src/display.c **** 	    vs &= mask;
 2519              		.loc 1 1445 6 is_stmt 1 view .LVU749
1445:src/display.c **** 	    vs &= mask;
 2520              		.loc 1 1445 38 is_stmt 0 view .LVU750
 2521 0048 0121     		movs	r1, #1
 2522 004a ABF1200C 		sub	ip, fp, #32
 2523 004e CBF12000 		rsb	r0, fp, #32
 2524 0052 21FA00F0 		lsr	r0, r1, r0
 2525 0056 01FA0CF3 		lsl	r3, r1, ip
 2526 005a 01FA0BF2 		lsl	r2, r1, fp
 2527 005e 0343     		orrs	r3, r3, r0
 2528              	.LVL287:
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2529              		.loc 1 1446 6 is_stmt 1 view .LVU751
1445:src/display.c **** 	    vs &= mask;
 2530              		.loc 1 1445 26 is_stmt 0 view .LVU752
 2531 0060 12F1FF30 		adds	r0, r2, #-1
 2532 0064 43F1FF31 		adc	r1, r3, #-1
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2533              		.loc 1 1446 9 view .LVU753
 2534 0068 3040     		ands	r0, r0, r6
 2535 006a 3940     		ands	r1, r1, r7
 2536              	.LVL288:
1447:src/display.c **** 	      vs |= ~mask;
 2537              		.loc 1 1447 9 view .LVU754
 2538 006c 0A2D     		cmp	r5, #10
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2539              		.loc 1 1446 9 view .LVU755
 2540 006e 0646     		mov	r6, r0
 2541              	.LVL289:
1446:src/display.c **** 	    if (b == 10 && (vs & (1LL << (ws-1))))
 2542              		.loc 1 1446 9 view .LVU756
 2543 0070 0F46     		mov	r7, r1
1447:src/display.c **** 	      vs |= ~mask;
 2544              		.loc 1 1447 6 is_stmt 1 view .LVU757
1447:src/display.c **** 	      vs |= ~mask;
 2545              		.loc 1 1447 9 is_stmt 0 view .LVU758
 2546 0072 00F04D81 		beq	.L310
 2547              	.LVL290:
 2548              	.L239:
1447:src/display.c **** 	      vs |= ~mask;
 2549              		.loc 1 1447 9 view .LVU759
 2550              	.LBE271:
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 2551              		.loc 1 1451 4 is_stmt 1 view .LVU760
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 2552              		.loc 1 1451 8 is_stmt 0 view .LVU761
 2553 0076 A24B     		ldr	r3, .L317+8
 2554 0078 1B68     		ldr	r3, [r3]
 2555 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 2556              		.loc 1 1451 7 view .LVU762
ARM GAS  /tmp/ccdQiHBS.s 			page 88


 2557 007e 9807     		lsls	r0, r3, #30
 2558 0080 46D5     		bpl	.L270
1454:src/display.c **** 	    v = (unsigned long long int)vs;
 2559              		.loc 1 1454 11 is_stmt 1 view .LVU763
 2560              	.LBB272:
1462:src/display.c **** 	    const unsigned int b1 = b >> 1;
 2561              		.loc 1 1462 6 view .LVU764
1463:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2562              		.loc 1 1463 6 view .LVU765
1463:src/display.c **** 	    const unsigned int fac = ((b1 & 0xa) != 0) | (((b1 & 0xc) != 0) << 1);
 2563              		.loc 1 1463 25 is_stmt 0 view .LVU766
 2564 0082 6A08     		lsrs	r2, r5, #1
 2565              	.LVL291:
1464:src/display.c **** 	    v = (unsigned long long int)vs;
 2566              		.loc 1 1464 6 is_stmt 1 view .LVU767
1464:src/display.c **** 	    v = (unsigned long long int)vs;
 2567              		.loc 1 1464 43 is_stmt 0 view .LVU768
 2568 0084 12F00A0F 		tst	r2, #10
 2569 0088 14BF     		ite	ne
 2570 008a 0123     		movne	r3, #1
 2571 008c 0023     		moveq	r3, #0
1464:src/display.c **** 	    v = (unsigned long long int)vs;
 2572              		.loc 1 1464 70 view .LVU769
 2573 008e 12F00C0F 		tst	r2, #12
 2574 0092 18BF     		it	ne
 2575 0094 43F00203 		orrne	r3, r3, #2
 2576              	.LVL292:
 2577              	.L245:
1465:src/display.c **** 
 2578              		.loc 1 1465 6 is_stmt 1 discriminator 4 view .LVU770
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 2579              		.loc 1 1467 14 is_stmt 0 discriminator 4 view .LVU771
 2580 0098 0BEB0308 		add	r8, fp, r3
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 2581              		.loc 1 1467 27 discriminator 4 view .LVU772
 2582 009c 0133     		adds	r3, r3, #1
 2583              	.LVL293:
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 2584              		.loc 1 1467 21 discriminator 4 view .LVU773
 2585 009e B8FBF3F8 		udiv	r8, r8, r3
1468:src/display.c **** 	      const int r = v % b;
 2586              		.loc 1 1468 6 discriminator 4 view .LVU774
 2587 00a2 B8F1000F 		cmp	r8, #0
1465:src/display.c **** 
 2588              		.loc 1 1465 8 discriminator 4 view .LVU775
 2589 00a6 3046     		mov	r0, r6
 2590 00a8 3946     		mov	r1, r7
 2591              	.LVL294:
1467:src/display.c **** 	    for (i=0; i<n; i++) {
 2592              		.loc 1 1467 6 is_stmt 1 discriminator 4 view .LVU776
1468:src/display.c **** 	      const int r = v % b;
 2593              		.loc 1 1468 6 discriminator 4 view .LVU777
1468:src/display.c **** 	      const int r = v % b;
 2594              		.loc 1 1468 16 discriminator 4 view .LVU778
1468:src/display.c **** 	      const int r = v % b;
 2595              		.loc 1 1468 6 is_stmt 0 discriminator 4 view .LVU779
 2596 00aa 40F38781 		ble	.L271
ARM GAS  /tmp/ccdQiHBS.s 			page 89


 2597 00ae 03AC     		add	r4, sp, #12
 2598 00b0 DFF858B2 		ldr	fp, .L317+20
 2599              	.LVL295:
1468:src/display.c **** 	      const int r = v % b;
 2600              		.loc 1 1468 6 discriminator 4 view .LVU780
 2601 00b4 08EB0406 		add	r6, r8, r4
 2602              	.LVL296:
 2603              	.L246:
 2604              	.LBB273:
1469:src/display.c **** 	      v /= b;
 2605              		.loc 1 1469 8 is_stmt 1 discriminator 3 view .LVU781
 2606 00b8 2A46     		mov	r2, r5
 2607 00ba 0023     		movs	r3, #0
 2608 00bc FFF7FEFF 		bl	__aeabi_uldivmod
 2609              	.LVL297:
1470:src/display.c **** 	      buf[i] = DIGITS[r];
 2610              		.loc 1 1470 8 discriminator 3 view .LVU782
1471:src/display.c **** 	    }
 2611              		.loc 1 1471 15 is_stmt 0 discriminator 3 view .LVU783
 2612 00c0 1BF80230 		ldrb	r3, [fp, r2]	@ zero_extendqisi2
 2613 00c4 04F8013B 		strb	r3, [r4], #1
 2614              	.LVL298:
1471:src/display.c **** 	    }
 2615              		.loc 1 1471 8 is_stmt 1 discriminator 3 view .LVU784
 2616              	.LBE273:
1468:src/display.c **** 	      const int r = v % b;
 2617              		.loc 1 1468 21 discriminator 3 view .LVU785
1468:src/display.c **** 	      const int r = v % b;
 2618              		.loc 1 1468 16 discriminator 3 view .LVU786
1468:src/display.c **** 	      const int r = v % b;
 2619              		.loc 1 1468 6 is_stmt 0 discriminator 3 view .LVU787
 2620 00c8 B442     		cmp	r4, r6
 2621 00ca F5D1     		bne	.L246
 2622 00cc 08F1FF33 		add	r3, r8, #-1
1468:src/display.c **** 	      const int r = v % b;
 2623              		.loc 1 1468 6 view .LVU788
 2624 00d0 4446     		mov	r4, r8
 2625              	.LVL299:
 2626              	.L238:
1468:src/display.c **** 	      const int r = v % b;
 2627              		.loc 1 1468 6 view .LVU789
 2628              	.LBE272:
1481:src/display.c **** 	if (res) {
 2629              		.loc 1 1481 2 is_stmt 1 view .LVU790
1482:src/display.c **** 	  if (sign) *res++ = '-';
 2630              		.loc 1 1482 2 view .LVU791
1482:src/display.c **** 	  if (sign) *res++ = '-';
 2631              		.loc 1 1482 5 is_stmt 0 view .LVU792
 2632 00d2 0099     		ldr	r1, [sp]
 2633 00d4 0029     		cmp	r1, #0
 2634 00d6 41D0     		beq	.L247
 2635              	.L311:
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2636              		.loc 1 1483 4 is_stmt 1 view .LVU793
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2637              		.loc 1 1483 7 is_stmt 0 view .LVU794
 2638 00d8 029A     		ldr	r2, [sp, #8]
ARM GAS  /tmp/ccdQiHBS.s 			page 90


 2639 00da 2AB1     		cbz	r2, .L248
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2640              		.loc 1 1483 14 is_stmt 1 discriminator 1 view .LVU795
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2641              		.loc 1 1483 18 is_stmt 0 discriminator 1 view .LVU796
 2642 00dc 8A46     		mov	r10, r1
 2643              	.LVL300:
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2644              		.loc 1 1483 21 discriminator 1 view .LVU797
 2645 00de 2D22     		movs	r2, #45
 2646 00e0 0AF8012B 		strb	r2, [r10], #1
 2647              	.LVL301:
1483:src/display.c **** 	  if (i > MAX_INT_Y_DIG) {
 2648              		.loc 1 1483 18 discriminator 1 view .LVU798
 2649 00e4 CDF800A0 		str	r10, [sp]
 2650              	.LVL302:
 2651              	.L248:
1484:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2652              		.loc 1 1484 4 is_stmt 1 view .LVU799
1484:src/display.c **** 	    while (--i >= (nd - MAX_INT_Y_DIG))
 2653              		.loc 1 1484 7 is_stmt 0 view .LVU800
 2654 00e8 072C     		cmp	r4, #7
 2655 00ea 00F3EA80 		bgt	.L249
1491:src/display.c **** 	      *res++ = buf[i];
 2656              		.loc 1 1491 12 is_stmt 1 view .LVU801
 2657              	.LVL303:
1491:src/display.c **** 	      *res++ = buf[i];
 2658              		.loc 1 1491 12 is_stmt 0 view .LVU802
 2659 00ee 591C     		adds	r1, r3, #1
 2660 00f0 0BD0     		beq	.L225
 2661 00f2 0099     		ldr	r1, [sp]
 2662 00f4 03AA     		add	r2, sp, #12
 2663 00f6 1A44     		add	r2, r2, r3
 2664 00f8 01F1FF3A 		add	r10, r1, #-1
 2665 00fc 0B44     		add	r3, r3, r1
 2666              	.LVL304:
 2667              	.L252:
1492:src/display.c **** 	  }
 2668              		.loc 1 1492 8 is_stmt 1 view .LVU803
1492:src/display.c **** 	  }
 2669              		.loc 1 1492 20 is_stmt 0 view .LVU804
 2670 00fe 12F80119 		ldrb	r1, [r2], #-1	@ zero_extendqisi2
 2671              	.LVL305:
1492:src/display.c **** 	  }
 2672              		.loc 1 1492 15 view .LVU805
 2673 0102 0AF8011F 		strb	r1, [r10, #1]!
 2674              	.LVL306:
1491:src/display.c **** 	      *res++ = buf[i];
 2675              		.loc 1 1491 12 is_stmt 1 view .LVU806
1491:src/display.c **** 	      *res++ = buf[i];
 2676              		.loc 1 1491 12 is_stmt 0 view .LVU807
 2677 0106 9A45     		cmp	r10, r3
 2678 0108 F9D1     		bne	.L252
 2679              	.LVL307:
 2680              	.L225:
1539:src/display.c **** 
 2681              		.loc 1 1539 7 view .LVU808
ARM GAS  /tmp/ccdQiHBS.s 			page 91


 2682 010a 15B0     		add	sp, sp, #84
 2683              		.cfi_remember_state
 2684              		.cfi_def_cfa_offset 36
 2685              		@ sp needed
 2686 010c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2687              	.LVL308:
 2688              	.L270:
 2689              		.cfi_restore_state
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 2690              		.loc 1 1451 25 discriminator 1 view .LVU809
 2691 0110 56EA0703 		orrs	r3, r6, r7
 2692 0114 00F0BE80 		beq	.L233
1454:src/display.c **** 	    v = (unsigned long long int)vs;
 2693              		.loc 1 1454 11 is_stmt 1 view .LVU810
1455:src/display.c **** 	    for (i=0; v != 0; i++) {
 2694              		.loc 1 1455 6 view .LVU811
 2695 0118 DFF8F0B1 		ldr	fp, .L317+20
 2696              	.LVL309:
1455:src/display.c **** 	    for (i=0; v != 0; i++) {
 2697              		.loc 1 1455 8 is_stmt 0 view .LVU812
 2698 011c B046     		mov	r8, r6
 2699 011e A946     		mov	r9, r5
 2700 0120 3E46     		mov	r6, r7
1456:src/display.c **** 	      const int r = v % b;
 2701              		.loc 1 1456 6 is_stmt 1 view .LVU813
 2702              	.LVL310:
1456:src/display.c **** 	      const int r = v % b;
 2703              		.loc 1 1456 16 view .LVU814
 2704 0122 4FF0000A 		mov	r10, #0
 2705 0126 03AF     		add	r7, sp, #12
 2706              	.LVL311:
 2707              	.L244:
 2708              	.LBB274:
1457:src/display.c **** 	      v /= b;
 2709              		.loc 1 1457 8 discriminator 3 view .LVU815
 2710 0128 4046     		mov	r0, r8
 2711 012a 3146     		mov	r1, r6
 2712 012c 4A46     		mov	r2, r9
 2713 012e 5346     		mov	r3, r10
 2714 0130 FFF7FEFF 		bl	__aeabi_uldivmod
 2715              	.LVL312:
 2716 0134 3346     		mov	r3, r6
 2717 0136 9446     		mov	ip, r2
 2718              	.LVL313:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 2719              		.loc 1 1458 8 discriminator 3 view .LVU816
 2720              	.LBE274:
1456:src/display.c **** 	      const int r = v % b;
 2721              		.loc 1 1456 6 is_stmt 0 discriminator 3 view .LVU817
 2722 0138 5345     		cmp	r3, r10
 2723 013a 4246     		mov	r2, r8
 2724              	.LVL314:
 2725              	.LBB275:
1459:src/display.c **** 	    }
 2726              		.loc 1 1459 15 discriminator 3 view .LVU818
 2727 013c 1BF80CC0 		ldrb	ip, [fp, ip]	@ zero_extendqisi2
 2728              	.LVL315:
ARM GAS  /tmp/ccdQiHBS.s 			page 92


1459:src/display.c **** 	    }
 2729              		.loc 1 1459 15 discriminator 3 view .LVU819
 2730 0140 07F801CB 		strb	ip, [r7], #1
 2731              	.LBE275:
1456:src/display.c **** 	      const int r = v % b;
 2732              		.loc 1 1456 6 discriminator 3 view .LVU820
 2733 0144 08BF     		it	eq
 2734 0146 4A45     		cmpeq	r2, r9
 2735              	.LBB276:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 2736              		.loc 1 1458 10 discriminator 3 view .LVU821
 2737 0148 0E46     		mov	r6, r1
 2738              	.LVL316:
1459:src/display.c **** 	    }
 2739              		.loc 1 1459 8 is_stmt 1 discriminator 3 view .LVU822
 2740              	.LBE276:
1456:src/display.c **** 	      const int r = v % b;
 2741              		.loc 1 1456 24 discriminator 3 view .LVU823
 2742              	.LBB277:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 2743              		.loc 1 1458 10 is_stmt 0 discriminator 3 view .LVU824
 2744 014a 8046     		mov	r8, r0
 2745 014c 2146     		mov	r1, r4
 2746              	.LVL317:
1458:src/display.c **** 	      buf[i] = DIGITS[r];
 2747              		.loc 1 1458 10 discriminator 3 view .LVU825
 2748              	.LBE277:
1456:src/display.c **** 	      const int r = v % b;
 2749              		.loc 1 1456 25 discriminator 3 view .LVU826
 2750 014e 04F10104 		add	r4, r4, #1
 2751              	.LVL318:
1456:src/display.c **** 	      const int r = v % b;
 2752              		.loc 1 1456 16 is_stmt 1 discriminator 3 view .LVU827
1456:src/display.c **** 	      const int r = v % b;
 2753              		.loc 1 1456 6 is_stmt 0 discriminator 3 view .LVU828
 2754 0152 E9D2     		bcs	.L244
 2755 0154 0B46     		mov	r3, r1
1481:src/display.c **** 	if (res) {
 2756              		.loc 1 1481 2 is_stmt 1 view .LVU829
 2757              	.LVL319:
1482:src/display.c **** 	  if (sign) *res++ = '-';
 2758              		.loc 1 1482 2 view .LVU830
1482:src/display.c **** 	  if (sign) *res++ = '-';
 2759              		.loc 1 1482 5 is_stmt 0 view .LVU831
 2760 0156 0099     		ldr	r1, [sp]
 2761 0158 0029     		cmp	r1, #0
 2762 015a BDD1     		bne	.L311
 2763              	.LVL320:
 2764              	.L247:
 2765              	.LBB278:
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2766              		.loc 1 1510 4 is_stmt 1 view .LVU832
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2767              		.loc 1 1510 33 is_stmt 0 view .LVU833
 2768 015c 022D     		cmp	r5, #2
 2769 015e 00F0FE80 		beq	.L312
 2770              	.LVL321:
ARM GAS  /tmp/ccdQiHBS.s 			page 93


1511:src/display.c **** 	    : b == 16 ? 2 : 3;
 2771              		.loc 1 1511 4 is_stmt 1 view .LVU834
1511:src/display.c **** 	    : b == 16 ? 2 : 3;
 2772              		.loc 1 1511 30 is_stmt 0 view .LVU835
 2773 0162 042D     		cmp	r5, #4
 2774 0164 00F02481 		beq	.L313
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 2775              		.loc 1 1510 33 view .LVU836
 2776 0168 102D     		cmp	r5, #16
 2777 016a 0CBF     		ite	eq
 2778 016c 0225     		moveq	r5, #2
 2779 016e 0325     		movne	r5, #3
 2780 0170 0C27     		movs	r7, #12
 2781              	.LVL322:
 2782              	.L254:
1513:src/display.c **** #endif
 2783              		.loc 1 1513 4 is_stmt 1 view .LVU837
 2784 0172 0093     		str	r3, [sp]
 2785              	.LVL323:
1513:src/display.c **** #endif
 2786              		.loc 1 1513 4 is_stmt 0 view .LVU838
 2787 0174 FFF7FEFF 		bl	set_separator_decimal_modes
 2788              	.LVL324:
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2789              		.loc 1 1515 4 is_stmt 1 view .LVU839
1516:src/display.c **** 	    State2.window = 0;
 2790              		.loc 1 1516 26 is_stmt 0 view .LVU840
 2791 0178 5F4A     		ldr	r2, .L317
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2792              		.loc 1 1515 17 view .LVU841
 2793 017a 6249     		ldr	r1, .L317+12
1516:src/display.c **** 	    State2.window = 0;
 2794              		.loc 1 1516 26 view .LVU842
 2795 017c 127D     		ldrb	r2, [r2, #20]	@ zero_extendqisi2
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2796              		.loc 1 1515 27 view .LVU843
 2797 017e 009B     		ldr	r3, [sp]
 2798 0180 93FBF7F3 		sdiv	r3, r3, r7
1516:src/display.c **** 	    State2.window = 0;
 2799              		.loc 1 1516 8 view .LVU844
 2800 0184 C2F3C208 		ubfx	r8, r2, #3, #3
1516:src/display.c **** 	    State2.window = 0;
 2801              		.loc 1 1516 7 view .LVU845
 2802 0188 4345     		cmp	r3, r8
1515:src/display.c **** 	  if ((SMALL_INT) State2.window > IntMaxWindow)
 2803              		.loc 1 1515 17 view .LVU846
 2804 018a 0B60     		str	r3, [r1]
1516:src/display.c **** 	    State2.window = 0;
 2805              		.loc 1 1516 4 is_stmt 1 view .LVU847
1516:src/display.c **** 	    State2.window = 0;
 2806              		.loc 1 1516 7 is_stmt 0 view .LVU848
 2807 018c C0F2EA80 		blt	.L256
 2808 0190 07FB08F8 		mul	r8, r7, r8
 2809              	.L257:
1518:src/display.c **** 
 2810              		.loc 1 1518 4 is_stmt 1 view .LVU849
1518:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 94


 2811              		.loc 1 1518 11 is_stmt 0 view .LVU850
 2812 0194 14AB     		add	r3, sp, #80
 2813 0196 14AA     		add	r2, sp, #80
 2814 0198 1C44     		add	r4, r4, r3
 2815              	.LVL325:
1518:src/display.c **** 
 2816              		.loc 1 1518 11 view .LVU851
 2817 019a 02EB0806 		add	r6, r2, r8
 2818 019e 0023     		movs	r3, #0
 2819 01a0 453E     		subs	r6, r6, #69
 2820 01a2 04F8443C 		strb	r3, [r4, #-68]
1520:src/display.c **** 	  for (k = 0; k < 12; k++)
 2821              		.loc 1 1520 4 is_stmt 1 view .LVU852
 2822              	.LVL326:
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 2823              		.loc 1 1521 4 view .LVU853
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 2824              		.loc 1 1521 16 view .LVU854
1518:src/display.c **** 
 2825              		.loc 1 1518 11 is_stmt 0 view .LVU855
 2826 01a6 3246     		mov	r2, r6
 2827              	.LVL327:
 2828              	.L259:
1522:src/display.c **** 	      break;
 2829              		.loc 1 1522 6 is_stmt 1 view .LVU856
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 2830              		.loc 1 1521 24 view .LVU857
1522:src/display.c **** 	      break;
 2831              		.loc 1 1522 9 is_stmt 0 view .LVU858
 2832 01a8 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 2833 01ac 0029     		cmp	r1, #0
 2834 01ae 00F0E080 		beq	.L258
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 2835              		.loc 1 1521 25 discriminator 2 view .LVU859
 2836 01b2 0133     		adds	r3, r3, #1
 2837              	.LVL328:
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 2838              		.loc 1 1521 16 is_stmt 1 discriminator 2 view .LVU860
1521:src/display.c **** 	    if (buf[j + k] == '\0')
 2839              		.loc 1 1521 4 is_stmt 0 discriminator 2 view .LVU861
 2840 01b4 0C2B     		cmp	r3, #12
 2841 01b6 F7D1     		bne	.L259
1524:src/display.c **** 	    int ch = buf[j++];
 2842              		.loc 1 1524 4 view .LVU862
 2843 01b8 4FF00B09 		mov	r9, #11
 2844              	.LVL329:
 2845              	.L260:
1524:src/display.c **** 	    int ch = buf[j++];
 2846              		.loc 1 1524 4 view .LVU863
 2847 01bc 08F10108 		add	r8, r8, #1
 2848 01c0 C844     		add	r8, r8, r9
 2849 01c2 4C46     		mov	r4, r9
 2850 01c4 4FF0630B 		mov	fp, #99
 2851 01c8 09E0     		b	.L265
 2852              	.LVL330:
 2853              	.L314:
 2854              	.LBB279:
ARM GAS  /tmp/ccdQiHBS.s 			page 95


1530:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 2855              		.loc 1 1530 8 view .LVU864
 2856 01ca 4F4B     		ldr	r3, .L317+16
 2857 01cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2858              	.LVL331:
 2859              	.LBB280:
 2860              	.LBI280:
 301:src/display.c ****   if (sep == SEP_NONE)
 2861              		.loc 1 301 14 is_stmt 1 view .LVU865
 2862              	.LBB281:
 302:src/display.c ****     return res;
 2863              		.loc 1 302 3 view .LVU866
 302:src/display.c ****     return res;
 2864              		.loc 1 302 6 is_stmt 0 view .LVU867
 2865 01ce 09B1     		cbz	r1, .L263
 302:src/display.c ****     return res;
 2866              		.loc 1 302 6 view .LVU868
 2867 01d0 FFF7FEFF 		bl	set_separator.part.0
 2868              	.LVL332:
 2869              	.L263:
 302:src/display.c ****     return res;
 2870              		.loc 1 302 6 view .LVU869
 2871              	.LBE281:
 2872              	.LBE280:
1531:src/display.c **** 	  }
 2873              		.loc 1 1531 6 is_stmt 1 discriminator 2 view .LVU870
 2874              	.LBE279:
1524:src/display.c **** 	    int ch = buf[j++];
 2875              		.loc 1 1524 4 is_stmt 0 discriminator 2 view .LVU871
 2876 01d4 013C     		subs	r4, r4, #1
1524:src/display.c **** 	    int ch = buf[j++];
 2877              		.loc 1 1524 4 discriminator 2 view .LVU872
 2878 01d6 621C     		adds	r2, r4, #1
 2879              	.LBB284:
1531:src/display.c **** 	  }
 2880              		.loc 1 1531 10 discriminator 2 view .LVU873
 2881 01d8 ABF1090B 		sub	fp, fp, #9
 2882              	.LVL333:
1531:src/display.c **** 	  }
 2883              		.loc 1 1531 10 discriminator 2 view .LVU874
 2884              	.LBE284:
1524:src/display.c **** 	    int ch = buf[j++];
 2885              		.loc 1 1524 24 is_stmt 1 discriminator 2 view .LVU875
1524:src/display.c **** 	    int ch = buf[j++];
 2886              		.loc 1 1524 14 discriminator 2 view .LVU876
1524:src/display.c **** 	    int ch = buf[j++];
 2887              		.loc 1 1524 4 is_stmt 0 discriminator 2 view .LVU877
 2888 01dc 16D0     		beq	.L269
 2889              	.LVL334:
 2890              	.L265:
 2891              	.LBB285:
1525:src/display.c **** 	    if (i >= shift)
 2892              		.loc 1 1525 6 is_stmt 1 view .LVU878
1527:src/display.c **** 	    set_dig(dig, ch);
 2893              		.loc 1 1527 8 view .LVU879
1525:src/display.c **** 	    if (i >= shift)
 2894              		.loc 1 1525 10 is_stmt 0 view .LVU880
ARM GAS  /tmp/ccdQiHBS.s 			page 96


 2895 01de 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
1526:src/display.c **** 	      ch -= 030;
 2896              		.loc 1 1526 9 view .LVU881
 2897 01e2 A9EB0402 		sub	r2, r9, r4
 2898 01e6 BA42     		cmp	r2, r7
 2899 01e8 A8EB040A 		sub	r10, r8, r4
 2900              	.LVL335:
1526:src/display.c **** 	      ch -= 030;
 2901              		.loc 1 1526 6 is_stmt 1 view .LVU882
1528:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 2902              		.loc 1 1528 6 is_stmt 0 view .LVU883
 2903 01ec 5846     		mov	r0, fp
1527:src/display.c **** 	    set_dig(dig, ch);
 2904              		.loc 1 1527 11 view .LVU884
 2905 01ee A8BF     		it	ge
 2906 01f0 1839     		subge	r1, r1, #24
 2907              	.LVL336:
1528:src/display.c **** 	    if ((j % group) == 0 && k != 0)
 2908              		.loc 1 1528 6 is_stmt 1 view .LVU885
 2909 01f2 FFF7FEFF 		bl	set_dig
 2910              	.LVL337:
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2911              		.loc 1 1529 6 view .LVU886
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2912              		.loc 1 1529 13 is_stmt 0 view .LVU887
 2913 01f6 9AFBF5F3 		sdiv	r3, r10, r5
 2914 01fa 05FB13A3 		mls	r3, r5, r3, r10
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2915              		.loc 1 1529 9 view .LVU888
 2916 01fe 002B     		cmp	r3, #0
 2917 0200 E8D1     		bne	.L263
1530:src/display.c **** 	    dig -= SEGS_PER_DIGIT;
 2918              		.loc 1 1530 8 is_stmt 1 discriminator 1 view .LVU889
 2919              	.LBB283:
 2920              	.LBB282:
 304:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 2921              		.loc 1 304 3 discriminator 1 view .LVU890
 2922 0202 5846     		mov	r0, fp
 2923              	.LBE282:
 2924              	.LBE283:
1529:src/display.c **** 	      set_separator(dig, SeparatorMode, CNULL);
 2925              		.loc 1 1529 27 is_stmt 0 discriminator 1 view .LVU891
 2926 0204 002C     		cmp	r4, #0
 2927 0206 E0D1     		bne	.L314
1531:src/display.c **** 	  }
 2928              		.loc 1 1531 6 is_stmt 1 view .LVU892
1531:src/display.c **** 	  }
 2929              		.loc 1 1531 10 is_stmt 0 view .LVU893
 2930 0208 ABF1090B 		sub	fp, fp, #9
 2931              	.LVL338:
1531:src/display.c **** 	  }
 2932              		.loc 1 1531 10 view .LVU894
 2933              	.LBE285:
1524:src/display.c **** 	    int ch = buf[j++];
 2934              		.loc 1 1524 24 is_stmt 1 view .LVU895
1524:src/display.c **** 	    int ch = buf[j++];
 2935              		.loc 1 1524 14 view .LVU896
ARM GAS  /tmp/ccdQiHBS.s 			page 97


 2936              	.L269:
1533:src/display.c **** 	    if (dig >= 0)
 2937              		.loc 1 1533 4 view .LVU897
1533:src/display.c **** 	    if (dig >= 0)
 2938              		.loc 1 1533 7 is_stmt 0 view .LVU898
 2939 020c 029B     		ldr	r3, [sp, #8]
 2940 020e 002B     		cmp	r3, #0
 2941 0210 3FF47BAF 		beq	.L225
1534:src/display.c **** 	      set_dig(dig, '-');
 2942              		.loc 1 1534 6 is_stmt 1 view .LVU899
1534:src/display.c **** 	      set_dig(dig, '-');
 2943              		.loc 1 1534 9 is_stmt 0 view .LVU900
 2944 0214 BBF1000F 		cmp	fp, #0
 2945 0218 C0F2CC80 		blt	.L315
 2946              	.LVL339:
 2947              	.L268:
1535:src/display.c **** 	    else	SET_MANT_SIGN;
 2948              		.loc 1 1535 8 is_stmt 1 view .LVU901
 2949 021c 5846     		mov	r0, fp
 2950 021e 2D21     		movs	r1, #45
 2951 0220 FFF7FEFF 		bl	set_dig
 2952              	.LVL340:
 2953 0224 71E7     		b	.L225
 2954              	.LVL341:
 2955              	.L309:
1535:src/display.c **** 	    else	SET_MANT_SIGN;
 2956              		.loc 1 1535 8 is_stmt 0 view .LVU902
 2957              	.LBE278:
1428:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 2958              		.loc 1 1428 4 is_stmt 1 view .LVU903
1428:src/display.c **** 	  if (int_mode() == MODE_2COMP && sign == 1 && v == 0)
 2959              		.loc 1 1428 8 is_stmt 0 view .LVU904
 2960 0226 02AA     		add	r2, sp, #8
 2961 0228 3046     		mov	r0, r6
 2962 022a 3946     		mov	r1, r7
 2963 022c FFF7FEFF 		bl	extract_value
 2964              	.LVL342:
 2965 0230 8046     		mov	r8, r0
 2966 0232 8946     		mov	r9, r1
 2967              	.LVL343:
1429:src/display.c **** 	    v = value;
 2968              		.loc 1 1429 4 is_stmt 1 view .LVU905
1429:src/display.c **** 	    v = value;
 2969              		.loc 1 1429 8 is_stmt 0 view .LVU906
 2970 0234 FFF7FEFF 		bl	int_mode
 2971              	.LVL344:
1429:src/display.c **** 	    v = value;
 2972              		.loc 1 1429 7 view .LVU907
 2973 0238 28BB     		cbnz	r0, .L230
1429:src/display.c **** 	    v = value;
 2974              		.loc 1 1429 33 discriminator 1 view .LVU908
 2975 023a 029B     		ldr	r3, [sp, #8]
 2976 023c 012B     		cmp	r3, #1
 2977 023e 22D1     		bne	.L230
1429:src/display.c **** 	    v = value;
 2978              		.loc 1 1429 46 discriminator 2 view .LVU909
 2979 0240 58EA0903 		orrs	r3, r8, r9
ARM GAS  /tmp/ccdQiHBS.s 			page 98


 2980 0244 00F0A180 		beq	.L316
 2981              	.LVL345:
 2982              	.L231:
1429:src/display.c **** 	    v = value;
 2983              		.loc 1 1429 46 discriminator 2 view .LVU910
 2984 0248 DFF8C0B0 		ldr	fp, .L317+20
 2985              	.LVL346:
1404:src/display.c **** 	const int ws = word_size();
 2986              		.loc 1 1404 67 discriminator 3 view .LVU911
 2987 024c 0195     		str	r5, [sp, #4]
 2988 024e 2E46     		mov	r6, r5
 2989 0250 0027     		movs	r7, #0
 2990 0252 0DF10C0A 		add	r10, sp, #12
 2991 0256 0024     		movs	r4, #0
 2992 0258 5D46     		mov	r5, fp
 2993              	.LVL347:
 2994              	.L237:
 2995              	.LBB288:
1438:src/display.c **** 	      v /= b;
 2996              		.loc 1 1438 8 is_stmt 1 discriminator 3 view .LVU912
 2997 025a 4046     		mov	r0, r8
 2998 025c 4946     		mov	r1, r9
 2999 025e 3246     		mov	r2, r6
 3000 0260 3B46     		mov	r3, r7
 3001 0262 FFF7FEFF 		bl	__aeabi_uldivmod
 3002              	.LVL348:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3003              		.loc 1 1439 8 discriminator 3 view .LVU913
 3004 0266 CC46     		mov	ip, r9
 3005 0268 C346     		mov	fp, r8
 3006              	.LBE288:
1437:src/display.c **** 	      const int r = v % b;
 3007              		.loc 1 1437 6 is_stmt 0 discriminator 3 view .LVU914
 3008 026a BC45     		cmp	ip, r7
 3009              	.LBB289:
1440:src/display.c **** 	    }
 3010              		.loc 1 1440 15 discriminator 3 view .LVU915
 3011 026c AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3012 026e 0AF8013B 		strb	r3, [r10], #1
 3013              	.LBE289:
1437:src/display.c **** 	      const int r = v % b;
 3014              		.loc 1 1437 6 discriminator 3 view .LVU916
 3015 0272 08BF     		it	eq
 3016 0274 B345     		cmpeq	fp, r6
 3017 0276 2346     		mov	r3, r4
 3018              	.LBB290:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3019              		.loc 1 1439 10 discriminator 3 view .LVU917
 3020 0278 8046     		mov	r8, r0
 3021              	.LVL349:
1439:src/display.c **** 	      buf[i] = DIGITS[r];
 3022              		.loc 1 1439 10 discriminator 3 view .LVU918
 3023 027a 8946     		mov	r9, r1
 3024              	.LVL350:
1440:src/display.c **** 	    }
 3025              		.loc 1 1440 8 is_stmt 1 discriminator 3 view .LVU919
 3026              	.LBE290:
ARM GAS  /tmp/ccdQiHBS.s 			page 99


1437:src/display.c **** 	      const int r = v % b;
 3027              		.loc 1 1437 24 discriminator 3 view .LVU920
1437:src/display.c **** 	      const int r = v % b;
 3028              		.loc 1 1437 25 is_stmt 0 discriminator 3 view .LVU921
 3029 027c 04F10104 		add	r4, r4, #1
 3030              	.LVL351:
1437:src/display.c **** 	      const int r = v % b;
 3031              		.loc 1 1437 16 is_stmt 1 discriminator 3 view .LVU922
1437:src/display.c **** 	      const int r = v % b;
 3032              		.loc 1 1437 6 is_stmt 0 discriminator 3 view .LVU923
 3033 0280 EBD2     		bcs	.L237
 3034 0282 019D     		ldr	r5, [sp, #4]
 3035 0284 25E7     		b	.L238
 3036              	.LVL352:
 3037              	.L230:
1431:src/display.c **** 	    if (sign)
 3038              		.loc 1 1431 4 is_stmt 1 view .LVU924
1431:src/display.c **** 	    if (sign)
 3039              		.loc 1 1431 7 is_stmt 0 view .LVU925
 3040 0286 58EA0903 		orrs	r3, r8, r9
 3041 028a DDD1     		bne	.L231
1432:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3042              		.loc 1 1432 6 is_stmt 1 view .LVU926
1432:src/display.c **** 	      set_dig_s(dig-SEGS_PER_DIGIT, '-', res);
 3043              		.loc 1 1432 9 is_stmt 0 view .LVU927
 3044 028c 029B     		ldr	r3, [sp, #8]
 3045 028e 002B     		cmp	r3, #0
 3046 0290 40F08180 		bne	.L232
 3047              	.LVL353:
 3048              	.L233:
1434:src/display.c **** 	    return;
 3049              		.loc 1 1434 6 is_stmt 1 view .LVU928
 3050              	.LBB291:
 3051              	.LBI291:
 332:src/display.c ****   if (res) *res++ = ch;
 3052              		.loc 1 332 14 view .LVU929
 3053              	.LBB292:
 333:src/display.c ****   else	set_dig(base, ch);
 3054              		.loc 1 333 3 view .LVU930
 333:src/display.c ****   else	set_dig(base, ch);
 3055              		.loc 1 333 6 is_stmt 0 view .LVU931
 3056 0294 009B     		ldr	r3, [sp]
 3057 0296 002B     		cmp	r3, #0
 3058 0298 00F08580 		beq	.L235
 3059              	.LVL354:
 3060              	.L234:
 333:src/display.c ****   else	set_dig(base, ch);
 3061              		.loc 1 333 12 is_stmt 1 view .LVU932
 333:src/display.c ****   else	set_dig(base, ch);
 3062              		.loc 1 333 19 is_stmt 0 view .LVU933
 3063 029c 009A     		ldr	r2, [sp]
 3064 029e 3023     		movs	r3, #48
 3065 02a0 1370     		strb	r3, [r2]
 3066              	.LBE292:
 3067              	.LBE291:
1539:src/display.c **** 
 3068              		.loc 1 1539 7 view .LVU934
ARM GAS  /tmp/ccdQiHBS.s 			page 100


 3069 02a2 15B0     		add	sp, sp, #84
 3070              		.cfi_remember_state
 3071              		.cfi_def_cfa_offset 36
 3072              	.LVL355:
1539:src/display.c **** 
 3073              		.loc 1 1539 7 view .LVU935
 3074              		@ sp needed
 3075 02a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3076              	.LVL356:
 3077              	.L226:
 3078              		.cfi_restore_state
1419:src/display.c **** 	}
 3079              		.loc 1 1419 11 is_stmt 1 view .LVU936
1419:src/display.c **** 	}
 3080              		.loc 1 1419 15 is_stmt 0 view .LVU937
 3081 02a8 FFF7FEFF 		bl	int_base
 3082              	.LVL357:
1422:src/display.c **** 	  IntMaxWindow = 0;
 3083              		.loc 1 1422 5 view .LVU938
 3084 02ac 009B     		ldr	r3, [sp]
1419:src/display.c **** 	}
 3085              		.loc 1 1419 15 view .LVU939
 3086 02ae 0546     		mov	r5, r0
 3087              	.LVL358:
1419:src/display.c **** 	}
 3088              		.loc 1 1419 27 is_stmt 1 view .LVU940
1422:src/display.c **** 	  IntMaxWindow = 0;
 3089              		.loc 1 1422 2 view .LVU941
1422:src/display.c **** 	  IntMaxWindow = 0;
 3090              		.loc 1 1422 5 is_stmt 0 view .LVU942
 3091 02b0 002B     		cmp	r3, #0
 3092 02b2 7FF4BEAE 		bne	.L228
 3093              	.LVL359:
 3094              	.L308:
1423:src/display.c **** 	  carry_overflow();
 3095              		.loc 1 1423 4 is_stmt 1 view .LVU943
1423:src/display.c **** 	  carry_overflow();
 3096              		.loc 1 1423 17 is_stmt 0 view .LVU944
 3097 02b6 134B     		ldr	r3, .L317+12
 3098 02b8 009A     		ldr	r2, [sp]
 3099 02ba 1A60     		str	r2, [r3]
1424:src/display.c **** 	}
 3100              		.loc 1 1424 4 is_stmt 1 view .LVU945
 3101 02bc FFF7FEFF 		bl	carry_overflow
 3102              	.LVL360:
 3103 02c0 B7E6     		b	.L228
 3104              	.LVL361:
 3105              	.L249:
1485:src/display.c **** 	      *res++ = buf[i];
 3106              		.loc 1 1485 12 view .LVU946
1485:src/display.c **** 	      *res++ = buf[i];
 3107              		.loc 1 1485 24 is_stmt 0 view .LVU947
 3108 02c2 0098     		ldr	r0, [sp]
 3109 02c4 03AA     		add	r2, sp, #12
 3110 02c6 D118     		adds	r1, r2, r3
 3111 02c8 E51F     		subs	r5, r4, #7
 3112 02ca 0246     		mov	r2, r0
ARM GAS  /tmp/ccdQiHBS.s 			page 101


 3113 02cc C618     		adds	r6, r0, r3
 3114              	.LVL362:
 3115              	.L251:
1486:src/display.c **** 	    *res++ = '.';
 3116              		.loc 1 1486 8 is_stmt 1 view .LVU948
1486:src/display.c **** 	    *res++ = '.';
 3117              		.loc 1 1486 20 is_stmt 0 view .LVU949
 3118 02ce 11F80109 		ldrb	r0, [r1], #-1	@ zero_extendqisi2
 3119              	.LVL363:
1486:src/display.c **** 	    *res++ = '.';
 3120              		.loc 1 1486 15 view .LVU950
 3121 02d2 02F8010B 		strb	r0, [r2], #1
 3122              	.LVL364:
1485:src/display.c **** 	      *res++ = buf[i];
 3123              		.loc 1 1485 12 is_stmt 1 view .LVU951
1485:src/display.c **** 	      *res++ = buf[i];
 3124              		.loc 1 1485 12 is_stmt 0 view .LVU952
 3125 02d6 B01A     		subs	r0, r6, r2
 3126 02d8 8542     		cmp	r5, r0
 3127 02da F8DD     		ble	.L251
 3128 02dc 03F10802 		add	r2, r3, #8
 3129              	.LVL365:
1485:src/display.c **** 	      *res++ = buf[i];
 3130              		.loc 1 1485 12 view .LVU953
 3131 02e0 0099     		ldr	r1, [sp]
 3132              	.LVL366:
1485:src/display.c **** 	      *res++ = buf[i];
 3133              		.loc 1 1485 12 view .LVU954
 3134 02e2 141B     		subs	r4, r2, r4
 3135              	.LVL367:
1485:src/display.c **** 	      *res++ = buf[i];
 3136              		.loc 1 1485 12 view .LVU955
 3137 02e4 9D42     		cmp	r5, r3
 3138 02e6 C8BF     		it	gt
 3139 02e8 0124     		movgt	r4, #1
 3140 02ea 0A19     		adds	r2, r1, r4
1487:src/display.c **** 	    *res++ = '.';
 3141              		.loc 1 1487 6 is_stmt 1 view .LVU956
 3142              	.LVL368:
1487:src/display.c **** 	    *res++ = '.';
 3143              		.loc 1 1487 13 is_stmt 0 view .LVU957
 3144 02ec 2E23     		movs	r3, #46
 3145 02ee 0B55     		strb	r3, [r1, r4]
1488:src/display.c **** 	  }
 3146              		.loc 1 1488 6 is_stmt 1 view .LVU958
 3147              	.LVL369:
1488:src/display.c **** 	  }
 3148              		.loc 1 1488 13 is_stmt 0 view .LVU959
 3149 02f0 5370     		strb	r3, [r2, #1]
1539:src/display.c **** 
 3150              		.loc 1 1539 7 view .LVU960
 3151 02f2 15B0     		add	sp, sp, #84
 3152              		.cfi_remember_state
 3153              		.cfi_def_cfa_offset 36
 3154              		@ sp needed
 3155 02f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3156              	.LVL370:
ARM GAS  /tmp/ccdQiHBS.s 			page 102


 3157              	.L318:
1539:src/display.c **** 
 3158              		.loc 1 1539 7 view .LVU961
 3159              		.align	2
 3160              	.L317:
 3161 02f8 00000000 		.word	StateWhileOn
 3162 02fc 00000000 		.word	CSWTCH.343
 3163 0300 00000000 		.word	main_ram
 3164 0304 00000000 		.word	IntMaxWindow
 3165 0308 00000000 		.word	.LANCHOR0
 3166 030c 00000000 		.word	.LANCHOR9
 3167              	.LVL371:
 3168              	.L310:
 3169              		.cfi_restore_state
 3170              	.LBB294:
1447:src/display.c **** 	      vs |= ~mask;
 3171              		.loc 1 1447 38 discriminator 1 view .LVU962
 3172 0310 0BF1FF31 		add	r1, fp, #-1
1447:src/display.c **** 	      vs |= ~mask;
 3173              		.loc 1 1447 18 discriminator 1 view .LVU963
 3174 0314 CBF1210C 		rsb	ip, fp, #33
 3175 0318 C840     		lsrs	r0, r0, r1
 3176 031a 07FA0CFC 		lsl	ip, r7, ip
 3177 031e 2039     		subs	r1, r1, #32
 3178 0320 40EA0C00 		orr	r0, r0, ip
 3179 0324 5CBF     		itt	pl
 3180 0326 47FA01F1 		asrpl	r1, r7, r1
 3181 032a 0843     		orrpl	r0, r0, r1
 3182 032c 00F00108 		and	r8, r0, #1
 3183 0330 4FF00009 		mov	r9, #0
 3184 0334 58EA0901 		orrs	r1, r8, r9
 3185 0338 08D0     		beq	.L240
1448:src/display.c **** 	  }
 3186              		.loc 1 1448 8 is_stmt 1 view .LVU964
1448:src/display.c **** 	  }
 3187              		.loc 1 1448 11 is_stmt 0 view .LVU965
 3188 033a 5042     		rsbs	r0, r2, #0
 3189 033c 63EB4301 		sbc	r1, r3, r3, lsl #1
 3190 0340 40EA0602 		orr	r2, r0, r6
 3191              	.LVL372:
1448:src/display.c **** 	  }
 3192              		.loc 1 1448 11 view .LVU966
 3193 0344 41EA0703 		orr	r3, r1, r7
 3194              	.LVL373:
1448:src/display.c **** 	  }
 3195              		.loc 1 1448 11 view .LVU967
 3196 0348 1646     		mov	r6, r2
 3197              	.LVL374:
1448:src/display.c **** 	  }
 3198              		.loc 1 1448 11 view .LVU968
 3199 034a 1F46     		mov	r7, r3
 3200              	.L240:
1448:src/display.c **** 	  }
 3201              		.loc 1 1448 11 view .LVU969
 3202              	.LBE294:
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3203              		.loc 1 1451 4 is_stmt 1 view .LVU970
ARM GAS  /tmp/ccdQiHBS.s 			page 103


1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3204              		.loc 1 1451 8 is_stmt 0 view .LVU971
 3205 034c 1D4B     		ldr	r3, .L319
 3206 034e 1B68     		ldr	r3, [r3]
 3207 0350 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1451:src/display.c **** 	    set_dig_s(dig, '0', res);
 3208              		.loc 1 1451 7 view .LVU972
 3209 0354 9B07     		lsls	r3, r3, #30
 3210 0356 7FF5DBAE 		bpl	.L270
 3211 035a 0223     		movs	r3, #2
 3212 035c 9CE6     		b	.L245
 3213              	.LVL375:
 3214              	.L312:
 3215              	.LBB295:
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3216              		.loc 1 1510 33 view .LVU973
 3217 035e 0827     		movs	r7, #8
1512:src/display.c **** 	  set_separator_decimal_modes();
 3218              		.loc 1 1512 6 view .LVU974
 3219 0360 0425     		movs	r5, #4
 3220 0362 06E7     		b	.L254
 3221              	.LVL376:
 3222              	.L256:
1517:src/display.c **** 	  buf[i] = '\0';
 3223              		.loc 1 1517 6 is_stmt 1 view .LVU975
1517:src/display.c **** 	  buf[i] = '\0';
 3224              		.loc 1 1517 20 is_stmt 0 view .LVU976
 3225 0364 184B     		ldr	r3, .L319+4
 3226 0366 6FF3C502 		bfc	r2, #3, #3
 3227 036a 1A75     		strb	r2, [r3, #20]
 3228 036c 4FF00008 		mov	r8, #0
 3229 0370 10E7     		b	.L257
 3230              	.LVL377:
 3231              	.L258:
1524:src/display.c **** 	    int ch = buf[j++];
 3232              		.loc 1 1524 14 is_stmt 1 discriminator 1 view .LVU977
1524:src/display.c **** 	    int ch = buf[j++];
 3233              		.loc 1 1524 4 is_stmt 0 discriminator 1 view .LVU978
 3234 0372 03F1FF39 		add	r9, r3, #-1
 3235              	.LVL378:
1524:src/display.c **** 	    int ch = buf[j++];
 3236              		.loc 1 1524 4 discriminator 1 view .LVU979
 3237 0376 002B     		cmp	r3, #0
 3238 0378 7FF420AF 		bne	.L260
1533:src/display.c **** 	    if (dig >= 0)
 3239              		.loc 1 1533 4 is_stmt 1 view .LVU980
1533:src/display.c **** 	    if (dig >= 0)
 3240              		.loc 1 1533 7 is_stmt 0 view .LVU981
 3241 037c 029B     		ldr	r3, [sp, #8]
 3242 037e 002B     		cmp	r3, #0
 3243 0380 3FF4C3AE 		beq	.L225
 3244 0384 4FF0630B 		mov	fp, #99
 3245 0388 48E7     		b	.L268
 3246              	.LVL379:
 3247              	.L316:
1533:src/display.c **** 	    if (dig >= 0)
 3248              		.loc 1 1533 7 view .LVU982
ARM GAS  /tmp/ccdQiHBS.s 			page 104


 3249              	.LBE295:
1430:src/display.c **** 	  if (v == 0) {
 3250              		.loc 1 1430 6 is_stmt 1 view .LVU983
1430:src/display.c **** 	  if (v == 0) {
 3251              		.loc 1 1430 8 is_stmt 0 view .LVU984
 3252 038a B046     		mov	r8, r6
 3253              	.LVL380:
1430:src/display.c **** 	  if (v == 0) {
 3254              		.loc 1 1430 8 view .LVU985
 3255 038c B946     		mov	r9, r7
 3256              	.LVL381:
1431:src/display.c **** 	    if (sign)
 3257              		.loc 1 1431 4 is_stmt 1 view .LVU986
1431:src/display.c **** 	    if (sign)
 3258              		.loc 1 1431 7 is_stmt 0 view .LVU987
 3259 038e 58EA0903 		orrs	r3, r8, r9
 3260 0392 7FF459AF 		bne	.L231
 3261              	.LVL382:
 3262              	.L232:
1433:src/display.c **** 	    set_dig_s(dig, '0', res);
 3263              		.loc 1 1433 8 is_stmt 1 view .LVU988
 3264              	.LBB296:
 3265              	.LBI296:
 332:src/display.c ****   if (res) *res++ = ch;
 3266              		.loc 1 332 14 view .LVU989
 3267              	.LBB297:
 333:src/display.c ****   else	set_dig(base, ch);
 3268              		.loc 1 333 3 view .LVU990
 333:src/display.c ****   else	set_dig(base, ch);
 3269              		.loc 1 333 6 is_stmt 0 view .LVU991
 3270 0396 009B     		ldr	r3, [sp]
 3271 0398 002B     		cmp	r3, #0
 3272 039a 7FF47FAF 		bne	.L234
 334:src/display.c ****   return res;
 3273              		.loc 1 334 8 is_stmt 1 view .LVU992
 3274 039e 2D21     		movs	r1, #45
 3275 03a0 5A20     		movs	r0, #90
 3276 03a2 FFF7FEFF 		bl	set_dig
 3277              	.LVL383:
 334:src/display.c ****   return res;
 3278              		.loc 1 334 8 is_stmt 0 view .LVU993
 3279              	.LBE297:
 3280              	.LBE296:
1434:src/display.c **** 	    return;
 3281              		.loc 1 1434 6 is_stmt 1 view .LVU994
 3282              	.LBB298:
 332:src/display.c ****   if (res) *res++ = ch;
 3283              		.loc 1 332 14 view .LVU995
 3284              	.LBB293:
 333:src/display.c ****   else	set_dig(base, ch);
 3285              		.loc 1 333 3 view .LVU996
 3286              	.L235:
 334:src/display.c ****   return res;
 3287              		.loc 1 334 8 view .LVU997
 3288 03a6 3021     		movs	r1, #48
 3289 03a8 6320     		movs	r0, #99
 3290 03aa FFF7FEFF 		bl	set_dig
ARM GAS  /tmp/ccdQiHBS.s 			page 105


 3291              	.LVL384:
 3292 03ae ACE6     		b	.L225
 3293              	.LVL385:
 3294              	.L313:
 334:src/display.c ****   return res;
 3295              		.loc 1 334 8 is_stmt 0 view .LVU998
 3296              	.LBE293:
 3297              	.LBE298:
 3298              	.LBB299:
1510:src/display.c **** 	  const int group = (b == 2 || b == 4) ? 4
 3299              		.loc 1 1510 33 view .LVU999
 3300 03b0 0C27     		movs	r7, #12
 3301 03b2 DEE6     		b	.L254
 3302              	.LVL386:
 3303              	.L315:
1536:src/display.c **** 	  }
 3304              		.loc 1 1536 11 is_stmt 1 view .LVU1000
 3305              	.LBB286:
 3306              	.LBI286:
 237:src/display.c **** {
 3307              		.loc 1 237 13 view .LVU1001
 3308              	.LBB287:
 239:src/display.c **** }
 3309              		.loc 1 239 3 view .LVU1002
 3310 03b4 8120     		movs	r0, #129
 3311 03b6 FFF7FEFF 		bl	set_dot
 3312              	.LVL387:
 240:src/display.c **** 
 3313              		.loc 1 240 1 is_stmt 0 view .LVU1003
 3314 03ba A6E6     		b	.L225
 3315              	.LVL388:
 3316              	.L271:
 240:src/display.c **** 
 3317              		.loc 1 240 1 view .LVU1004
 3318              	.LBE287:
 3319              	.LBE286:
 3320              	.LBE299:
 3321              	.LBB300:
1468:src/display.c **** 	      const int r = v % b;
 3322              		.loc 1 1468 6 view .LVU1005
 3323 03bc 4FF0FF33 		mov	r3, #-1
 3324              	.LVL389:
1468:src/display.c **** 	      const int r = v % b;
 3325              		.loc 1 1468 6 view .LVU1006
 3326 03c0 87E6     		b	.L238
 3327              	.L320:
 3328 03c2 00BF     		.align	2
 3329              	.L319:
 3330 03c4 00000000 		.word	main_ram
 3331 03c8 00000000 		.word	StateWhileOn
 3332              	.LBE300:
 3333              		.cfi_endproc
 3334              	.LFE18:
 3336              		.section	.text.s_s_sized.constprop.0,"ax",%progbits
 3337              		.align	1
 3338              		.p2align 2,,3
 3339              		.syntax unified
ARM GAS  /tmp/ccdQiHBS.s 			page 106


 3340              		.thumb
 3341              		.thumb_func
 3342              		.fpu fpv4-sp-d16
 3344              	s_s_sized.constprop.0:
 3345              	.LVL390:
 3346              	.LFB57:
1742:src/display.c **** 
1743:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
1744:src/display.c ****       enum display_modes std_round_fix(const decNumber *z, int *dd, int mode, int dispdigs) {
1745:src/display.c **** 	decNumber c;
1746:src/display.c **** 	int true_exp, x=0;
1747:src/display.c **** 	int min_pos_exp, max_neg_exp;
1748:src/display.c **** 
1749:src/display.c **** 	if ( mode != MODE_STD ) {
1750:src/display.c **** 	  min_pos_exp = 9;
1751:src/display.c **** 	  max_neg_exp = -5;
1752:src/display.c **** 	}
1753:src/display.c **** 	else {
1754:src/display.c **** 	  min_pos_exp = 12;
1755:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
1756:src/display.c **** 	}
1757:src/display.c **** 
1758:src/display.c **** 	dn_abs(&c, z); // c is abs(z)
1759:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
1760:src/display.c **** 
1761:src/display.c **** 	if (mode == MODE_SIG0) { //trailing zeros display
1762:src/display.c **** 	  x = *dd;
1763:src/display.c **** 	}
1764:src/display.c **** 
1765:src/display.c **** 	if ((true_exp < x) && (true_exp > max_neg_exp)) {
1766:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
1767:src/display.c **** 	  *dd += -true_exp;
1768:src/display.c **** 	  return MODE_FIX;
1769:src/display.c **** 	}
1770:src/display.c **** 
1771:src/display.c **** 	if ((mode != MODE_STD) && (true_exp <= max_neg_exp || true_exp >= min_pos_exp)) {
1772:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
1773:src/display.c **** 	}
1774:src/display.c **** 	else {
1775:src/display.c **** 	  return MODE_STD;
1776:src/display.c **** 	}
1777:src/display.c ****       }
1778:src/display.c **** #else
1779:src/display.c ****       enum display_modes std_round_fix(const decNumber *z) {
1780:src/display.c **** 	decNumber b, c;
1781:src/display.c **** 
1782:src/display.c **** 	dn_1(&b);
1783:src/display.c **** 	b.exponent -= UState.dispdigs;
1784:src/display.c **** 	dn_abs(&c, z);
1785:src/display.c **** 	if (dn_gt(&c, &b) && dn_lt(&c, &const_1))
1786:src/display.c **** 	  return MODE_FIX;
1787:src/display.c **** 	return MODE_STD;
1788:src/display.c ****       }
1789:src/display.c **** #endif
1790:src/display.c **** 
1791:src/display.c ****       /* SHOW display mode
1792:src/display.c ****        * in double precision show left or right part
ARM GAS  /tmp/ccdQiHBS.s 			page 107


1793:src/display.c ****        * 4 + 12 + 3 or 6 + 10 + 4 version
1794:src/display.c ****        */
1795:src/display.c ****       static void show_x(char *x, int exp) {
1796:src/display.c **** 	const int dbl = is_dblmode();
1797:src/display.c **** 	char *p;
1798:src/display.c **** 	int i, j;
1799:src/display.c **** 	char *upper_str;
1800:src/display.c **** 	enum separator_modes separator_mode;
1801:src/display.c **** 	char decimal_mark;
1802:src/display.c **** 	char thousands_sep;
1803:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
1804:src/display.c **** 	const int grouping = 0;
1805:src/display.c **** #elif defined(FULL_NUMBER_GROUPING_TS)
1806:src/display.c **** 	const int grouping = !UState.nothousands;
1807:src/display.c **** #else
1808:src/display.c **** 	const int grouping = 1;
1809:src/display.c **** #endif
1810:src/display.c **** 	int negative;
1811:src/display.c **** 
1812:src/display.c **** 	if (x[0] == '-') {
1813:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
1814:src/display.c **** 	  static const char small_minus[4] = { '\007', '\302', '-', '\006' };
1815:src/display.c **** 
1816:src/display.c **** 	  xcopy(x + 4, x + 1, 34);
1817:src/display.c **** 	  xcopy(x, small_minus, 4);
1818:src/display.c **** 	  x += 4;
1819:src/display.c **** 	  negative = 4;
1820:src/display.c **** #else
1821:src/display.c **** 	  ++x;
1822:src/display.c **** 	  negative = 1;
1823:src/display.c **** #endif
1824:src/display.c **** 	}
1825:src/display.c **** 	else negative = 0;
1826:src/display.c **** 
1827:src/display.c **** 	p = find_char(x, '\0');
1828:src/display.c **** 	xset(p, '0', 34 - (p - x));
1829:src/display.c **** 
1830:src/display.c **** 	if (DecimalMode == DECIMAL_DOT) {
1831:src/display.c **** 	  separator_mode = SEP_COMMA;
1832:src/display.c **** 	  decimal_mark = '.';
1833:src/display.c **** 	  thousands_sep = ',';
1834:src/display.c **** 	}
1835:src/display.c **** 	else {
1836:src/display.c **** 	  separator_mode = SEP_DOT;
1837:src/display.c **** 	  decimal_mark = ',';
1838:src/display.c **** 	  thousands_sep = '.';
1839:src/display.c **** 	}
1840:src/display.c **** 
1841:src/display.c **** 	if (State2.window) { // right half in double precision mode
1842:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
1843:src/display.c **** 	  static const char small_dots[13] = { '\007', '\341', ',', '\006',
1844:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
1845:src/display.c **** 
1846:src/display.c **** 	  upper_str = x + 3;
1847:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
1848:src/display.c **** 	  if (grouping) {
1849:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
ARM GAS  /tmp/ccdQiHBS.s 			page 108


1850:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
1851:src/display.c **** 	    x += 3 + 13 + 7;
1852:src/display.c **** 	  }
1853:src/display.c **** 	  else x += 3 + 13 + 6;
1854:src/display.c **** #else
1855:src/display.c **** 	  upper_str = x + 13;
1856:src/display.c **** 	  xset(upper_str, '.', 3);
1857:src/display.c **** 	  if (grouping) {
1858:src/display.c **** 	    xcopy(upper_str + 7, upper_str + 6, 19);
1859:src/display.c **** 	    upper_str[6] = thousands_sep;
1860:src/display.c **** 	    x += 13 + 3 + 7;
1861:src/display.c **** 	  }
1862:src/display.c **** 	  else x += 13 + 3 + 6;
1863:src/display.c **** #endif
1864:src/display.c **** 	  negative = 0;
1865:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
1866:src/display.c **** 	}
1867:src/display.c **** 	else {
1868:src/display.c **** 	  upper_str = x;
1869:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
1870:src/display.c **** 	  x[1] = decimal_mark;
1871:src/display.c **** 	  if (grouping) {
1872:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
1873:src/display.c **** 	    x[5] = thousands_sep;
1874:src/display.c **** 	    x += 9;
1875:src/display.c **** 	  }
1876:src/display.c **** 	  else x += 8;
1877:src/display.c **** 	  if (dbl) {
1878:src/display.c **** 	    if (exp < 0) {
1879:src/display.c **** 	      x[9] = '-';
1880:src/display.c **** 	      exp = -exp;
1881:src/display.c **** 	    }
1882:src/display.c **** 	    else
1883:src/display.c **** 	      x[9] = ' ';
1884:src/display.c **** 	    j = exp / 1000;
1885:src/display.c **** 	    x[10] = '0' + j;
1886:src/display.c **** 	    exp -= 1000 * j;
1887:src/display.c **** 	  }
1888:src/display.c **** 	  else {
1889:src/display.c **** 	    x[9] = '\0';
1890:src/display.c **** 	    x[10] = '\0';
1891:src/display.c **** 	  }
1892:src/display.c **** 	  xcopy(x + 1, x, 11);
1893:src/display.c **** 	  *x = 0;
1894:src/display.c **** 	  set_exp(exp, 1, CNULL);
1895:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
1896:src/display.c **** 	}
1897:src/display.c **** 	if (grouping) {
1898:src/display.c **** 	  for (; i <= 9 * SEGS_PER_DIGIT; i += 3 * SEGS_PER_DIGIT) {
1899:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
1900:src/display.c **** 	  }
1901:src/display.c **** 	}
1902:src/display.c **** 
1903:src/display.c **** 	for (i = j = 0; i < 12; ++i, j += SEGS_PER_DIGIT)
1904:src/display.c **** 	  set_dig(j, x[i]);
1905:src/display.c **** 
1906:src/display.c **** 	*x = '\0';
ARM GAS  /tmp/ccdQiHBS.s 			page 109


1907:src/display.c **** 	set_status(upper_str - negative);
1908:src/display.c ****       }
1909:src/display.c **** 
1910:src/display.c **** 
1911:src/display.c ****       /* Display the X register in the numeric portion of the display.
1912:src/display.c ****        * We have to account for the various display modes and numbers of
1913:src/display.c ****        * digits.
1914:src/display.c ****        */
1915:src/display.c ****       static void set_x(const REGISTER *rgx, char *res, int dbl) {
1916:src/display.c **** 	decNumber z;
1917:src/display.c **** 	int digits = DISPLAY_DIGITS;
1918:src/display.c **** 
1919:src/display.c **** 	if (dbl)
1920:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
1921:src/display.c **** 	else
1922:src/display.c **** 	  decimal64ToNumber(&(rgx->s), &z);
1923:src/display.c **** 	set_x_dn(&z, res, &digits);
1924:src/display.c ****       }
1925:src/display.c **** 
1926:src/display.c ****       void set_x_dn(decNumber *z, char *res, int *display_digits) {
1927:src/display.c **** 	char x[50], *obp = x;
1928:src/display.c **** 	int odig = 0;
1929:src/display.c **** 	int show_exp = 0;
1930:src/display.c **** 	int j;
1931:src/display.c **** 	char mantissa[64];
1932:src/display.c **** 	int exp = 0;
1933:src/display.c **** 	char *p = mantissa;
1934:src/display.c **** 	char *r;
1935:src/display.c **** 	const char *q;
1936:src/display.c **** 	int count, i;
1937:src/display.c **** 	int extra_digits = 0;
1938:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
1939:src/display.c **** 	int dd;
1940:src/display.c **** 	int dispdigs;
1941:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
1942:src/display.c **** #else
1943:src/display.c **** 	int dd = UState.dispdigs;
1944:src/display.c **** 	int mode = UState.dispmode;
1945:src/display.c **** #endif
1946:src/display.c **** 	int c;
1947:src/display.c **** 	int negative = 0;
1948:src/display.c **** 	int trimzeros = 0;
1949:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
1950:src/display.c **** 	const int show_large_exponent = 0;
1951:src/display.c **** #elif SHOW_LARGE_EXPONENT == 3
1952:src/display.c **** 	const int show_large_exponent = !get_user_flag(regL_idx);
1953:src/display.c **** #elif SHOW_LARGE_EXPONENT == 2
1954:src/display.c **** 	const int show_large_exponent = get_user_flag(regL_idx);
1955:src/display.c **** #else
1956:src/display.c **** 	const int show_large_exponent = 1;
1957:src/display.c **** #endif
1958:src/display.c **** 
1959:src/display.c **** 	set_separator_decimal_modes();
1960:src/display.c **** #if defined(INCLUDE_YREG_CODE)
1961:src/display.c **** 	if ( !res ) { // no hms or fraction displays for the dot matrix display
1962:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
1963:src/display.c **** 	    if (State2.hms) {
ARM GAS  /tmp/ccdQiHBS.s 			page 110


1964:src/display.c **** 	      set_x_hms(z, res);
1965:src/display.c **** 	      return;
1966:src/display.c **** 	    }
1967:src/display.c **** 	    else if (UState.fract) {
1968:src/display.c **** 	      if (set_x_fract(z, res))
1969:src/display.c **** 		return;
1970:src/display.c **** 	    }
1971:src/display.c **** 	  }
1972:src/display.c **** 	}		
1973:src/display.c **** #else
1974:src/display.c **** 	if (!State2.smode && ! State2.cmplx && ! State2.wascomplex) {
1975:src/display.c **** 	  if (State2.hms) {
1976:src/display.c **** 	    set_x_hms(z, res);
1977:src/display.c **** 	    State2.hms = 0;
1978:src/display.c **** 	    return;
1979:src/display.c **** 	  } else if (UState.fract) {
1980:src/display.c **** 	    if (set_x_fract(z, res))
1981:src/display.c **** 	      return;
1982:src/display.c **** 	  }
1983:src/display.c **** 	}
1984:src/display.c **** #endif
1985:src/display.c **** 
1986:src/display.c **** 	if (check_special_dn(z, res))
1987:src/display.c **** 	  return;
1988:src/display.c **** 
1989:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
1990:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
1991:src/display.c **** 	  exp = z->exponent + z->digits - 1;
1992:src/display.c **** 	  z->exponent = 0;
1993:src/display.c **** 	}
1994:src/display.c **** 
1995:src/display.c **** 	xset(x, '\0', sizeof(x));
1996:src/display.c **** 
1997:src/display.c **** 	if (dn_eq0(z)) {
1998:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
1999:src/display.c **** 	    x[0] = '-';
2000:src/display.c **** 	    x[1] = '0';
2001:src/display.c **** 	  } else
2002:src/display.c **** 	    x[0] = '0';
2003:src/display.c **** 	} else
2004:src/display.c **** 	  decNumberToString(z, x);
2005:src/display.c **** 
2006:src/display.c **** 	if (State2.smode == SDISP_SHOW) {
2007:src/display.c **** 	  show_x(x, exp);
2008:src/display.c **** 	  return;
2009:src/display.c **** 	}
2010:src/display.c **** 
2011:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2012:src/display.c **** 	if (mode == MODE_STD || dispdigs >= *display_digits)
2013:src/display.c **** 	  //  ALL mode: fill the display
2014:src/display.c **** 	  dd = *display_digits - 1;
2015:src/display.c **** 	else
2016:src/display.c **** 	  dd = dispdigs;
2017:src/display.c **** 
2018:src/display.c **** 	if (mode == MODE_STD || mode == MODE_SIG || mode == MODE_SIG0) {
2019:src/display.c **** 	  int orig_mode = mode;
2020:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 111


2021:src/display.c **** 	  mode = std_round_fix(z, &dd, mode, dispdigs); // modified function called
2022:src/display.c **** 	  if (orig_mode != MODE_SIG0)
2023:src/display.c **** 	    // allow zeros to be trimmed
2024:src/display.c **** 	    trimzeros = 1;
2025:src/display.c **** 	  if (orig_mode == MODE_STD)
2026:src/display.c **** 	    dd = *display_digits - 1;
2027:src/display.c ****  	}
2028:src/display.c **** #else
2029:src/display.c **** 	if (mode == MODE_STD) {
2030:src/display.c **** 	  mode = std_round_fix(z);
2031:src/display.c **** 	  trimzeros = 1;
2032:src/display.c **** 	  dd = *display_digits - 1;
2033:src/display.c **** 	} else if (dd >= *display_digits)
2034:src/display.c **** 	  // Do not allow non ALL modes to produce more digits than we're being asked to display.
2035:src/display.c **** 	  dd = *display_digits - 1;
2036:src/display.c **** #endif
2037:src/display.c **** 
2038:src/display.c **** 	xset(mantissa, '0', sizeof(mantissa)-1);
2039:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
2040:src/display.c **** 
2041:src/display.c **** 	q = find_char(x, 'E');
2042:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
2043:src/display.c **** 	if (q == NULL) q = find_char(x, 'D');
2044:src/display.c **** 	if (q == NULL) exp = 0;
2045:src/display.c **** 	else {
2046:src/display.c **** 	  exp = s_to_i(q+1);
2047:src/display.c **** 	  if (*q == 'D') exp = -exp;
2048:src/display.c **** 	}
2049:src/display.c **** #else
2050:src/display.c **** 	if (q == NULL) exp = 0;
2051:src/display.c **** 	else exp = s_to_i(q+1);
2052:src/display.c **** #endif
2053:src/display.c **** 
2054:src/display.c **** 	// Skip leading spaces and zeros.  Also grab the sign if it is there
2055:src/display.c **** 	for (q=x; *q == ' '; q++);
2056:src/display.c **** 	if (!res) {
2057:src/display.c **** 	  CLR_EXP_SIGN;
2058:src/display.c **** 	  CLR_MANT_SIGN;
2059:src/display.c **** 	}
2060:src/display.c **** 	if (*q == '-') {
2061:src/display.c **** 	  negative = 1;
2062:src/display.c **** 	  q++;
2063:src/display.c **** 	} else if (*q == '+')
2064:src/display.c **** 	  q++;
2065:src/display.c **** 	for (; *q == '0'; q++);
2066:src/display.c **** 	if (*q == '.') {
2067:src/display.c **** 	  do
2068:src/display.c **** 	    exp--;
2069:src/display.c **** 	  while (*++q == '0');
2070:src/display.c **** 	  while (*q >= '0' && *q <= '9')
2071:src/display.c **** 	    *p++ = *q++;
2072:src/display.c **** 	} else {
2073:src/display.c **** 	  if (*q >= '0' && *q <= '9')
2074:src/display.c **** 	    *p++ = *q++;
2075:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
2076:src/display.c **** 	    *p++ = *q++;
2077:src/display.c **** 	    exp++;
ARM GAS  /tmp/ccdQiHBS.s 			page 112


2078:src/display.c **** 	  }
2079:src/display.c **** 	  if (*q == '.') {
2080:src/display.c **** 	    q++;
2081:src/display.c **** 	    while (*q >= '0' && *q <= '9')
2082:src/display.c **** 	      *p++ = *q++;
2083:src/display.c **** 	  }
2084:src/display.c **** 	}
2085:src/display.c **** 
2086:src/display.c **** 	if (mode == MODE_FIX) {
2087:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
2088:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
2089:src/display.c **** 	  else {
2090:src/display.c **** 	    extra_digits = exp;
2091:src/display.c **** 	    /* We might have push the fixed decimals off the
2092:src/display.c **** 	     * screen so adjust if so.
2093:src/display.c **** 	     */
2094:src/display.c **** 	    if (extra_digits + dd > (*display_digits - 1))
2095:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
2096:src/display.c **** 	  }
2097:src/display.c **** 	}
2098:src/display.c **** 
2099:src/display.c **** 	// Round the mantissa to the number of digits desired
2100:src/display.c **** 	p = mantissa + dd + extra_digits + 1;
2101:src/display.c **** 	if (*p >= '5') {	// Round up
2102:src/display.c **** 	  *p = '0';
2103:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
2104:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
2105:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
2106:src/display.c **** 	    mantissa[0] = '1';
2107:src/display.c **** 	    exp++;
2108:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
2109:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
2110:src/display.c **** 	      extra_digits = 0;
2111:src/display.c **** 	    }
2112:src/display.c **** 	  } else {
2113:src/display.c **** 	    while (*--p == '9')
2114:src/display.c **** 	      *p = '0';
2115:src/display.c **** 	    (*p)++;
2116:src/display.c **** 	  }
2117:src/display.c **** 	}
2118:src/display.c **** 
2119:src/display.c **** 	// Zap what is left
2120:src/display.c **** 	for (p = mantissa + dd + extra_digits + 1; *p != '\0'; *p++ = '0');
2121:src/display.c **** 
2122:src/display.c **** 	p = mantissa;
2123:src/display.c **** 	switch (mode) {
2124:src/display.c **** 	default:
2125:src/display.c **** 	case MODE_STD:   
2126:src/display.c **** 	  for (count = *display_digits; mantissa[count] == '0'; count--);
2127:src/display.c **** 	  if (count != *display_digits)
2128:src/display.c **** 	    count++;
2129:src/display.c **** 	  // Too big or too small to fit on display
2130:src/display.c **** 	  if (exp >= *display_digits || exp < (count - *display_digits)) {
2131:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
2132:src/display.c **** 	    case -1:
2133:src/display.c **** 	    case 2:
2134:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccdQiHBS.s 			page 113


2135:src/display.c **** 	      odig++;
2136:src/display.c **** 	      dd--;
2137:src/display.c **** 	      exp--;
2138:src/display.c **** 	    case -2:
2139:src/display.c **** 	    case 1:
2140:src/display.c **** 	      *obp++ = *p++;
2141:src/display.c **** 	      odig++;
2142:src/display.c **** 	      dd--;
2143:src/display.c **** 	      exp--;
2144:src/display.c **** 	    case 0:
2145:src/display.c **** 	      ;
2146:src/display.c **** 	    };
2147:src/display.c **** 	    *obp++ = *p++;
2148:src/display.c **** 	    odig++;
2149:src/display.c **** 	    *obp++ = '.';
2150:src/display.c **** 	    for (i=1; i<count; i++) {
2151:src/display.c **** 	      *obp++ = *p++;
2152:src/display.c **** 	      odig++;
2153:src/display.c **** 	    }
2154:src/display.c **** 	    show_exp = 1;
2155:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
2156:src/display.c **** 	    for(i=0; i<=exp; i++) {
2157:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2158:src/display.c **** 		*obp++ = ',';
2159:src/display.c **** 	      *obp++ = *p++;
2160:src/display.c **** 	      odig++;
2161:src/display.c **** 	    }
2162:src/display.c **** 	    *obp++ = '.';
2163:src/display.c **** 	    if (count > (exp + 1)) {
2164:src/display.c **** 	      for (i=exp+1; i<count; i++) {
2165:src/display.c **** 		*obp++ = *p++;
2166:src/display.c **** 		odig++;
2167:src/display.c **** 	      }
2168:src/display.c **** 	    }
2169:src/display.c **** 	  } else {		// All digits to right of decimal point
2170:src/display.c **** 	    *obp++ = '0';
2171:src/display.c **** 	    odig++;
2172:src/display.c **** 	    *obp++ = '.';
2173:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2174:src/display.c **** 	      *obp++ = '0';
2175:src/display.c **** 	      odig++;
2176:src/display.c **** 	    }
2177:src/display.c **** 	    for (i=0; i<count; i++) {
2178:src/display.c **** 	      *obp++ = *p++;
2179:src/display.c **** 	      odig++;
2180:src/display.c **** 	    }
2181:src/display.c **** 	  }
2182:src/display.c **** 	  break;
2183:src/display.c **** 
2184:src/display.c **** 	case MODE_FIX:
2185:src/display.c **** 	  j = 0;
2186:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
2187:src/display.c **** 	    for (i=0; i<=exp; i++) {
2188:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
2189:src/display.c **** 		*obp++ = ',';
2190:src/display.c **** 	      *obp++ = *p++;
2191:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccdQiHBS.s 			page 114


2192:src/display.c **** 	    }
2193:src/display.c **** 	    *obp++ = '.';
2194:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
2195:src/display.c **** 	      *obp++ = *p++;
2196:src/display.c **** 	      odig++;
2197:src/display.c **** 	    }
2198:src/display.c **** 	  } else {		// All digits to right of decimal point
2199:src/display.c **** 	    *obp++ = '0';
2200:src/display.c **** 	    odig++;
2201:src/display.c **** 	    *obp++ = '.';
2202:src/display.c **** 	    for (i=exp+1; i<0; i++) {
2203:src/display.c **** 	      *obp++ = '0';
2204:src/display.c **** 	      odig++;
2205:src/display.c **** 	      dd--;
2206:src/display.c **** 	    }
2207:src/display.c **** 	    while (dd-- > 0) {
2208:src/display.c **** 	      *obp++ = *p++;
2209:src/display.c **** 	      odig++;
2210:src/display.c **** 	    }
2211:src/display.c **** 	  }
2212:src/display.c **** #if !defined(INCLUDE_SIGFIG_MODE)
2213:src/display.c **** 	  if (trimzeros)
2214:src/display.c **** 	    while (obp > x && obp[-1] == '0') {
2215:src/display.c **** 	      obp--;
2216:src/display.c **** 	      odig--;
2217:src/display.c **** 	    }
2218:src/display.c **** #endif			
2219:src/display.c **** 	  break;
2220:src/display.c **** 
2221:src/display.c **** 	case MODE_ENG:
2222:src/display.c **** 	  switch (exp % 3) {
2223:src/display.c **** 	  case -1:
2224:src/display.c **** 	  case 2:
2225:src/display.c **** 	    *obp++ = *p++;
2226:src/display.c **** 	    odig++;
2227:src/display.c **** 	    dd--;
2228:src/display.c **** 	    exp--;
2229:src/display.c **** 	  case -2:
2230:src/display.c **** 	  case 1:
2231:src/display.c **** 	    *obp++ = *p++;
2232:src/display.c **** 	    odig++;
2233:src/display.c **** 	    dd--;
2234:src/display.c **** 	    exp--;
2235:src/display.c **** 	  case 0:
2236:src/display.c **** 	    ;
2237:src/display.c **** 	  };
2238:src/display.c **** 	  // Falling through
2239:src/display.c **** 
2240:src/display.c **** 	case MODE_SCI:
2241:src/display.c **** 	  *obp++ = *p++;
2242:src/display.c **** 	  odig++;
2243:src/display.c **** 	  *obp++ = '.';
2244:src/display.c **** 	  dd--;
2245:src/display.c **** 	  while (dd-- >= 0) {
2246:src/display.c **** 	    *obp++ = *p++;
2247:src/display.c **** 	    odig++;
2248:src/display.c **** 	  }
ARM GAS  /tmp/ccdQiHBS.s 			page 115


2249:src/display.c **** 	  show_exp = 1;
2250:src/display.c **** 	}
2251:src/display.c **** #if defined(INCLUDE_SIGFIG_MODE)
2252:src/display.c **** 	if (trimzeros) // ND change: trimzeros generally available
2253:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
2254:src/display.c **** 	    obp--;
2255:src/display.c **** 	    odig--;
2256:src/display.c **** 	  }
2257:src/display.c **** #endif	
2258:src/display.c **** 	if (show_large_exponent && *display_digits > 10 && !res && (exp > 999 || exp < -999)) {
2259:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
2260:src/display.c **** 	  set_x_dn(z, res, display_digits);
2261:src/display.c **** 	  return;
2262:src/display.c **** 	}
2263:src/display.c **** 	/* Finally, send the output to the display */
2264:src/display.c **** 	*obp = '\0';
2265:src/display.c **** 	if (odig > *display_digits)
2266:src/display.c **** 	  odig = *display_digits;
2267:src/display.c **** 	j = (*display_digits - odig) * SEGS_PER_DIGIT;
2268:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
2269:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
2270:src/display.c **** 	if (negative) {
2271:src/display.c **** 	  if (res) *res++ = '-';
2272:src/display.c **** 	  else {
2273:src/display.c **** 	    if (j == 0)
2274:src/display.c **** 	      SET_MANT_SIGN;
2275:src/display.c **** 	    else
2276:src/display.c **** 	      set_dig(j - SEGS_PER_DIGIT, '-');
2277:src/display.c **** 	  }
2278:src/display.c **** 	}
2279:src/display.c **** 	for (i=0; (c = x[i]) != '\0' && j < SEGS_EXP_BASE; i++) {
2280:src/display.c **** 	  if (c == '.') {
2281:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
2282:src/display.c **** 	  } else if (c == ',') {
2283:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
2284:src/display.c **** 	  } else {
2285:src/display.c **** 	    res = set_dig_s(j, c, res);
2286:src/display.c **** 	    j += SEGS_PER_DIGIT;
2287:src/display.c **** 	  }
2288:src/display.c **** 	}
2289:src/display.c **** #if defined(INCLUDE_RIGHT_EXP)
2290:src/display.c **** 	if (show_exp) { // ND change: leading zeros in exponent in seven-segment display
2291:src/display.c **** 	  if ( !res ) {
2292:src/display.c **** 	    set_exp(exp, 4, res);
2293:src/display.c **** 	  }
2294:src/display.c **** 	  else {
2295:src/display.c **** 	    set_exp(exp, 0, res);
2296:src/display.c **** 	  }
2297:src/display.c **** 	}
2298:src/display.c **** #else
2299:src/display.c **** 	if (show_exp)
2300:src/display.c **** 	  set_exp(exp, 0, res);
2301:src/display.c **** #endif
2302:src/display.c **** 	if (obp[-1] == '.' && res == NULL)
2303:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
2304:src/display.c **** 	*display_digits = odig;
2305:src/display.c ****       }
ARM GAS  /tmp/ccdQiHBS.s 			page 116


2306:src/display.c **** 
2307:src/display.c **** #if defined(QTGUI) || defined(IOS)
2308:src/display.c ****       void format_display(char *buf) {
2309:src/display.c **** 	if (State2.runmode && !State2.labellist && !State2.registerlist && !State2.status)
2310:src/display.c **** 	  {
2311:src/display.c **** 	    const char *p = get_cmdline();
2312:src/display.c **** 	    if (p == NULL) {
2313:src/display.c **** 	      format_reg(regX_idx, buf);
2314:src/display.c **** 	    } else {
2315:src/display.c **** 	      scopy(buf, p);
2316:src/display.c **** #  ifdef LARGE_EXPONENT_ENTRY
2317:src/display.c **** 	      if (CmdLineEex != 0 && Cmdline[CmdLineEex] == 'D') {
2318:src/display.c **** 		scopy(buf + CmdLineEex + 2, p + CmdLineEex + 1);
2319:src/display.c **** 		buf[CmdLineEex] = 'E';
2320:src/display.c **** 		buf[CmdLineEex+1] = '-';
2321:src/display.c **** 	      }
2322:src/display.c **** #  endif
2323:src/display.c **** 	    }
2324:src/display.c **** 	  }
2325:src/display.c **** 	else {
2326:src/display.c **** 	  buf[0]=0;
2327:src/display.c **** 	}
2328:src/display.c ****       }
2329:src/display.c **** #endif
2330:src/display.c **** 
2331:src/display.c ****       void format_reg(int index, char *buf) {
2332:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
2333:src/display.c **** 
2334:src/display.c **** 	if (is_intmode())
2335:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
2336:src/display.c **** #ifndef HP16C_MODE_CHANGE
2337:src/display.c **** 	else if (buf == NULL && State2.smode > SDISP_SHOW) {
2338:src/display.c **** 	  decNumber x;
2339:src/display.c **** 	  int s;
2340:src/display.c **** 	  unsigned long long int v;
2341:src/display.c **** 
2342:src/display.c **** 	  getRegister(&x, index);
2343:src/display.c **** 	  v = dn_to_ull(&x, &s);
2344:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
2345:src/display.c **** 	}
2346:src/display.c **** #endif
2347:src/display.c **** 	else
2348:src/display.c **** 	  set_x(r, buf, UState.mode_double);
2349:src/display.c ****       }
2350:src/display.c **** 
2351:src/display.c ****       /* Display the status screen */
2352:src/display.c ****       static void show_status(void) {
2353:src/display.c **** 	int i, n;
2354:src/display.c **** 	int j = SEGS_EXP_BASE;
2355:src/display.c **** 	const int status = State2.status - 3;
2356:src/display.c **** 	char buf[16], *p = buf;
2357:src/display.c **** 	unsigned int pc;
2358:src/display.c **** 
2359:src/display.c **** 	if (status == -2) {
2360:src/display.c **** 	  set_status("Free:");
2361:src/display.c **** 	  p = num_arg(buf, free_mem());
2362:src/display.c **** 	  p = scopy(p, " , FL. ");
ARM GAS  /tmp/ccdQiHBS.s 			page 117


2363:src/display.c **** 	  p = num_arg(p, free_flash());
2364:src/display.c **** 	  *p = '\0';
2365:src/display.c **** 	  set_digits_string(buf, 0);
2366:src/display.c **** 	}
2367:src/display.c **** 	else if (status == -1) {
2368:src/display.c **** 	  /* Top line */
2369:src/display.c **** 	  p = scopy(buf, "Regs:");
2370:src/display.c **** 	  if (SizeStatRegs)
2371:src/display.c **** 	    p = scopy(p, " \221\006\006+");
2372:src/display.c **** 	  *p = '\0';
2373:src/display.c **** 	  set_status(buf);
2374:src/display.c **** 
2375:src/display.c **** 	  /* Bottom line */
2376:src/display.c **** 	  p = num_arg(buf, global_regs());
2377:src/display.c **** 	  if (LocalRegs < 0) {
2378:src/display.c **** 	    p = scopy(p, " , Loc. ");
2379:src/display.c **** 	    p = num_arg(p, local_regs());
2380:src/display.c **** 	  }
2381:src/display.c **** 	  *p = '\0';
2382:src/display.c **** 	  set_digits_string(buf, 0);
2383:src/display.c **** 	} else {
2384:src/display.c **** 	  int base;
2385:src/display.c **** 	  int end;
2386:src/display.c **** 	  int group = 10;
2387:src/display.c **** 	  int start = 0;
2388:src/display.c **** 		
2389:src/display.c **** 	  if (status <= 9) {
2390:src/display.c **** 	    base = 10 * status;
2391:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
2392:src/display.c **** 	    p = scopy(buf, "FL ");
2393:src/display.c **** 	    p = num_arg_0(p, base, 2);
2394:src/display.c **** 	    *p++ = '-';
2395:src/display.c **** 	    p = num_arg_0(p, end, 2);
2396:src/display.c **** 	    *p = '\0';
2397:src/display.c **** 	    set_status(buf);
2398:src/display.c **** 	  }
2399:src/display.c **** 	  else if (status == 10) {
2400:src/display.c **** 	    base = regX_idx;
2401:src/display.c **** 	    end = regK_idx;
2402:src/display.c **** 	    start = 3;
2403:src/display.c **** 	    group = 4;
2404:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
2405:src/display.c **** 	  }
2406:src/display.c **** 	  else { // status == 11
2407:src/display.c **** 	    base = LOCAL_FLAG_BASE;
2408:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
2409:src/display.c **** 	    set_status("FL.00-.15");
2410:src/display.c **** 	  }
2411:src/display.c **** 	  j = start * SEGS_PER_DIGIT;
2412:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
2413:src/display.c **** 	  j += SEGS_PER_DIGIT;
2414:src/display.c **** 	  for (i = start; i < group + start; i++) {
2415:src/display.c **** 	    int k = i + base - start;
2416:src/display.c **** 	    int l = get_user_flag(k);
2417:src/display.c **** 	    k += group;
2418:src/display.c **** 	    if (end >= k) {
2419:src/display.c **** 	      l |= (get_user_flag(k) << 1);
ARM GAS  /tmp/ccdQiHBS.s 			page 118


2420:src/display.c **** 	      k += group;
2421:src/display.c **** 	      if (end >= k)
2422:src/display.c **** 		l |= (get_user_flag(k) << 2);
2423:src/display.c **** 	    }
2424:src/display.c **** 	    set_dig(j, l);
2425:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
2426:src/display.c **** 	    j += SEGS_PER_DIGIT;
2427:src/display.c **** 	    if (i == 4) {
2428:src/display.c **** 	      set_dig(j, 8);
2429:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
2430:src/display.c **** 	      j += SEGS_PER_DIGIT;
2431:src/display.c **** 	    }
2432:src/display.c **** 	  }
2433:src/display.c **** 	}
2434:src/display.c **** 
2435:src/display.c **** 	j = SEGS_EXP_BASE;
2436:src/display.c **** 	pc = state_pc();
2437:src/display.c **** 	if (isXROM(pc))
2438:src/display.c **** 	  pc = 1;
2439:src/display.c **** 	for (n=i=0; i<4; i++) {
2440:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
2441:src/display.c **** 	    if (++n == 4) {
2442:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
2443:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
2444:src/display.c **** 	    } else {
2445:src/display.c **** 	      set_dig(j, 'A'+i);
2446:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
2447:src/display.c **** 	    }
2448:src/display.c **** 	  }
2449:src/display.c **** 	}
2450:src/display.c ****       }
2451:src/display.c **** 
2452:src/display.c **** 
2453:src/display.c ****       /* Display the list of alpha labels */
2454:src/display.c ****       static void show_label(void) {
2455:src/display.c **** 	char buf[16];
2456:src/display.c **** 	unsigned short int pc = State2.digval;
2457:src/display.c **** 	unsigned int op = getprog(pc);
2458:src/display.c **** 	int n = nLIB(pc);
2459:src/display.c **** 	unsigned short int lblpc;
2460:src/display.c **** 
2461:src/display.c **** 	set_status(prt((opcode)op, buf));
2462:src/display.c **** 	set_digits_string(libname[n], 0);
2463:src/display.c **** 
2464:src/display.c **** 	if (op & OP_DBL) {
2465:src/display.c **** 	  lblpc = findmultilbl(op, 0);
2466:src/display.c **** 	  if (lblpc != pc) {
2467:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
2468:src/display.c **** 	    n = nLIB(lblpc);
2469:src/display.c **** 	    if (n == REGION_RAM)
2470:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
2471:src/display.c **** 	    else {
2472:src/display.c **** 	      set_exp_digits_string(libname[n], CNULL);
2473:src/display.c **** 	    }
2474:src/display.c **** 	  }
2475:src/display.c **** 	}
2476:src/display.c ****       }
ARM GAS  /tmp/ccdQiHBS.s 			page 119


2477:src/display.c **** 
2478:src/display.c ****       /* Display a list of register contents */
2479:src/display.c ****       static void show_registers(void) {
2480:src/display.c **** 	char buf[16], *bp;
2481:src/display.c **** 	int n = State2.digval;
2482:src/display.c **** 	
2483:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2484:src/display.c **** 	const int reg = State2.digval2 ? FLASH_REG_BASE + n : 
2485:src/display.c **** 	  State2.local   ? LOCAL_REG_BASE + n : 
2486:src/display.c **** 	  n;
2487:src/display.c **** #else
2488:src/display.c **** 	const int reg = State2.local   ? LOCAL_REG_BASE + n : 
2489:src/display.c **** 	  n;
2490:src/display.c **** #endif
2491:src/display.c **** 
2492:src/display.c **** 	if (State2.disp_as_alpha) {
2493:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
2494:src/display.c **** 	}
2495:src/display.c **** 	else {
2496:src/display.c **** 	  xset(buf, '\0', 16);
2497:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
2498:src/display.c **** 	  bp = scopy_spc(buf, State2.digval2 ? "Bkup" : "Reg ");
2499:src/display.c **** #else
2500:src/display.c **** 	  bp = scopy_spc(buf, "Reg ");
2501:src/display.c **** #endif
2502:src/display.c **** 	  if (State2.local) {
2503:src/display.c **** 	    *bp++ = '.';
2504:src/display.c **** 	    if (n >= 100) {
2505:src/display.c **** 	      *bp++ = '1';
2506:src/display.c **** 	      n -= 100;
2507:src/display.c **** 	    }
2508:src/display.c **** 	  }
2509:src/display.c **** 	  if (n < 100)
2510:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
2511:src/display.c **** 	  else
2512:src/display.c **** 	    *bp++ = REGNAMES[n - regX_idx];
2513:src/display.c **** 	  set_status(buf);
2514:src/display.c **** 	}
2515:src/display.c **** 	format_reg(reg, CNULL);
2516:src/display.c ****       }
2517:src/display.c **** 
2518:src/display.c **** 
2519:src/display.c ****       static void set_annunciators(void)
2520:src/display.c ****       {
2521:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
2522:src/display.c **** 
2523:src/display.c **** 	/* Turn INPUT on for alpha mode.  Turn down arrow on if we're
2524:src/display.c **** 	 * typing lower case in alpha mode.  Turn the big equals if we're
2525:src/display.c **** 	 * browsing constants.
2526:src/display.c **** 	 */
2527:src/display.c **** #ifdef MODIFY_BEG_SSIZE8
2528:src/display.c **** 	dot(BEG, UState.stack_depth && ! Running);
2529:src/display.c **** #else
2530:src/display.c **** 	dot(BEG, state_pc() <= 1 && ! Running);
2531:src/display.c **** #endif
2532:src/display.c **** #ifdef INCLUDE_C_LOCK
2533:src/display.c **** 	dot(LIT_EQ, C_LOCKED);
ARM GAS  /tmp/ccdQiHBS.s 			page 120


2534:src/display.c **** #endif
2535:src/display.c **** 
2536:src/display.c **** 	dot(INPUT, State2.catalogue || State2.alphas || State2.confirm);
2537:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
2538:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
2539:src/display.c **** 	set_IO_annunciator();
2540:src/display.c **** 
2541:src/display.c **** 	/* Set the trig mode indicator 360 or RAD.  Grad is handled elsewhere.
2542:src/display.c **** 	 */
2543:src/display.c **** 	dot(DEG, !is_intmode() && tm == TRIG_DEG);
2544:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
2545:src/display.c ****       }
2546:src/display.c **** 
2547:src/display.c **** 
2548:src/display.c ****       /*
2549:src/display.c ****        *  Toggle the little "=" sign
2550:src/display.c ****        */
2551:src/display.c ****       void set_IO_annunciator(void) {
2552:src/display.c **** #ifndef DM42
2553:src/display.c **** 	int on = SerialOn
2554:src/display.c **** #endif
2555:src/display.c **** #ifdef DM42
2556:src/display.c **** 	  int on = 0
2557:src/display.c **** #endif
2558:src/display.c **** #ifdef REALBUILD
2559:src/display.c **** 	  || DebugFlag
2560:src/display.c **** #endif
2561:src/display.c **** #ifdef INFRARED
2562:src/display.c **** 	  || PrinterColumn != 0
2563:src/display.c **** #endif
2564:src/display.c **** 	  ;
2565:src/display.c **** 
2566:src/display.c **** 	if (on != IoAnnunciator) {
2567:src/display.c **** 	  dot(LIT_EQ, on);
2568:src/display.c **** 	  IoAnnunciator = on;
2569:src/display.c **** 	  finish_display(); //LIT_EQ
2570:src/display.c **** 	}
2571:src/display.c ****       }
2572:src/display.c **** 
2573:src/display.c **** #ifdef TOP_ROW
2574:src/display.c ****       /*
2575:src/display.c ****        *  Update the display
2576:src/display.c ****        */
2577:src/display.c ****       void display(void) {
2578:src/display.c **** 	int i, j;
2579:src/display.c **** 	char buf[40], *bp = buf;
2580:src/display.c **** 	const char *p;
2581:src/display.c **** 	int annuc = 0;
2582:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2583:src/display.c **** 	int skip = 0;
2584:src/display.c **** 	int x_disp = 0;
2585:src/display.c **** 	const int shift = cur_shift();
2586:src/display.c **** 
2587:src/display.c **** 	no_status_top = 0;
2588:src/display.c **** 	if (State2.disp_freeze) {
2589:src/display.c **** 	  State2.disp_freeze = 0;
2590:src/display.c **** 	  State2.disp_temp = 1;
ARM GAS  /tmp/ccdQiHBS.s 			page 121


2591:src/display.c **** #ifdef CONSOLE
2592:src/display.c **** 	  JustDisplayed = 1;
2593:src/display.c **** #endif
2594:src/display.c **** 	  ShowRPN = 0;
2595:src/display.c **** 	  return;
2596:src/display.c **** 	}
2597:src/display.c **** 
2598:src/display.c **** 	if (WasDataEntry) {
2599:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2600:src/display.c **** 
2601:src/display.c **** 	  // Erase 7-segment display
2602:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2603:src/display.c **** 	    clr_dot(i);
2604:src/display.c **** 	  }
2605:src/display.c **** 	  goto only_update_x;
2606:src/display.c **** 	}
2607:src/display.c **** #ifdef INCLUDE_YREG_CODE
2608:src/display.c **** #  ifdef YREG_ALWAYS_ON
2609:src/display.c **** 	const int yreg_enabled = 1;
2610:src/display.c **** #  else
2611:src/display.c **** 	const int yreg_enabled = UState.show_y;
2612:src/display.c **** #  endif
2613:src/display.c **** #else
2614:src/display.c **** 	const int yreg_enabled = 0;
2615:src/display.c **** #endif
2616:src/display.c **** 	// Clear display
2617:src/display.c **** 	reset_disp();
2618:src/display.c **** 
2619:src/display.c **** 	
2620:src/display.c **** 	xset(buf, '\0', sizeof(buf));
2621:src/display.c **** 	// Not clear why this code is needed - "c" is done in annunciators.
2622:src/display.c **** 	/* if (State2.cmplx  && !cata) { */
2623:src/display.c **** 	/*   *bp++ = COMPLEX_PREFIX; */
2624:src/display.c **** 	/*   set_status(buf); */
2625:src/display.c **** 	/* } */
2626:src/display.c **** 	if (State2.version) {
2627:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
2628:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
2629:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
2630:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
2631:src/display.c **** 	  set_status(vers);
2632:src/display.c **** 	  skip = 1;
2633:src/display.c **** 	  goto nostk;
2634:src/display.c **** 	} else if (State2.confirm) {
2635:src/display.c **** 	  if (yreg_enabled) {
2636:src/display.c **** 	    set_status_top(S_SURE);
2637:src/display.c **** 	    no_status_top = 1;
2638:src/display.c **** 	    annuc = 1;
2639:src/display.c **** 	  }
2640:src/display.c **** 	  else {
2641:src/display.c **** 	    set_status(S_SURE);
2642:src/display.c **** 	  }
2643:src/display.c **** 	} else if (State2.hyp) {
2644:src/display.c **** 	  bp = scopy(bp, "HYP");
2645:src/display.c **** 	  if (! State2.dot)
2646:src/display.c **** 	    *bp++ = '\235';
2647:src/display.c **** 	  if (yreg_enabled) {
ARM GAS  /tmp/ccdQiHBS.s 			page 122


2648:src/display.c **** 	    set_status_top(buf);
2649:src/display.c **** 	    no_status_top = 1;
2650:src/display.c **** 	    annuc = 1;
2651:src/display.c **** 	  }
2652:src/display.c **** 	  else {
2653:src/display.c **** 	    set_status(buf);
2654:src/display.c **** 	  }
2655:src/display.c **** 	} else if (State2.gtodot) {
2656:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
2657:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
2658:src/display.c **** 	  if (State2.numdigit > 0)
2659:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2660:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
2661:src/display.c **** 	  *bp++ = '_';
2662:src/display.c **** 	  if (yreg_enabled) {
2663:src/display.c **** 	    set_status_top(buf);
2664:src/display.c **** 	    no_status_top = 1;
2665:src/display.c **** 	    annuc = 1;
2666:src/display.c **** 	  }
2667:src/display.c **** 	  else {
2668:src/display.c **** 	    set_status(buf);
2669:src/display.c **** 	  }
2670:src/display.c **** 	} else if (State2.rarg) {
2671:src/display.c **** 	  /* Commands with arguments */
2672:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
2673:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
2674:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
2675:src/display.c **** #endif
2676:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
2677:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
2678:src/display.c **** 	  if (State2.dot) {
2679:src/display.c **** 	    *bp++ = 's';
2680:src/display.c **** 	    *bp++ = '_';
2681:src/display.c **** 	  } else if (shift == SHIFT_F) {
2682:src/display.c **** 	    *bp++ = '\021';
2683:src/display.c **** 	    *bp++ = '_';
2684:src/display.c **** 	  } else {
2685:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
2686:src/display.c **** 	       : State2.ind ? 2 
2687:src/display.c **** 	       : num_arg_digits(CmdBase); */
2688:src/display.c **** 	    if (State2.local)
2689:src/display.c **** 	      *bp++ = '.';
2690:src/display.c **** 	    if (State2.numdigit > 0) {
2691:src/display.c **** 	      if (State2.shuffle)
2692:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
2693:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
2694:src/display.c **** 	      else
2695:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
2696:src/display.c **** 	    }
2697:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
2698:src/display.c **** 	    *bp++ = '_';
2699:src/display.c **** 	  }
2700:src/display.c **** 	  if (yreg_enabled) {
2701:src/display.c **** 	    set_status_top(buf);
2702:src/display.c **** 	    no_status_top = 1;
2703:src/display.c **** 	    annuc = 1;
2704:src/display.c **** 	  }
ARM GAS  /tmp/ccdQiHBS.s 			page 123


2705:src/display.c **** 	  else {
2706:src/display.c **** 	    set_status(buf);
2707:src/display.c **** 	  }
2708:src/display.c **** 	} else if (State2.test != TST_NONE) {
2709:src/display.c **** 	  *bp++ = 'x';
2710:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
2711:src/display.c **** 	  *bp++ = '_';
2712:src/display.c **** 	  *bp++ = '?';
2713:src/display.c **** 	  if (yreg_enabled) {
2714:src/display.c **** 	    set_status_top(buf);
2715:src/display.c **** 	    no_status_top = 1;
2716:src/display.c **** 	    annuc = 1;
2717:src/display.c **** 	  }
2718:src/display.c **** 	  else {
2719:src/display.c **** 	    set_status(buf);
2720:src/display.c **** 	  }
2721:src/display.c **** 	} else if (cata) {
2722:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
2723:src/display.c **** 	  char b2[16];
2724:src/display.c **** 	  const char *p;
2725:src/display.c **** 
2726:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
2727:src/display.c **** 	  p = catcmd(op, b2);
2728:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
2729:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
2730:src/display.c **** 	  bp = scopy(bp, p);
2731:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
2732:src/display.c **** 	    // State2.disp_small = 1;
2733:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
2734:src/display.c **** 	      set_digits_string("0 to 255", 0);
2735:src/display.c **** 	    else
2736:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
2737:src/display.c **** 	    skip = 1;
2738:src/display.c **** 	  } else if (State2.runmode) {
2739:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
2740:src/display.c **** 	      decNumber x, r;
2741:src/display.c **** 	      decimal64 z;
2742:src/display.c **** 
2743:src/display.c **** 	      getX(&x);
2744:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
2745:src/display.c **** 		const unsigned int f = argKIND(op);
2746:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
2747:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
2748:src/display.c **** 		  update_speed(0);
2749:src/display.c **** 		  fp(&r, &x);
2750:src/display.c **** 		}
2751:src/display.c **** 		else
2752:src/display.c **** 		  set_NaN(&r);
2753:src/display.c **** 	      } else
2754:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
2755:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
2756:src/display.c **** 	      packed_from_number(&z, &r);
2757:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
2758:src/display.c **** 	      skip = 1;
2759:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
2760:src/display.c **** 	      REGISTER z, *const x = StackBase;
2761:src/display.c **** 	      copyreg(&z, x);
ARM GAS  /tmp/ccdQiHBS.s 			page 124


2762:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
2763:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
2764:src/display.c **** 	      copyreg(x, &z);
2765:src/display.c **** 	      skip = 1;
2766:src/display.c **** 	    }
2767:src/display.c **** 	  }
2768:src/display.c **** 	  if (yreg_enabled) {
2769:src/display.c **** 	    set_status_top(buf);
2770:src/display.c **** 	    no_status_top = 1;
2771:src/display.c **** 	    annuc = 1;
2772:src/display.c **** 	  }
2773:src/display.c **** 	  else {
2774:src/display.c **** 	    set_status(buf);
2775:src/display.c **** 	  }
2776:src/display.c **** 	} else if (State2.multi) {
2777:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
2778:src/display.c **** 	  if (State2.numdigit > 0) {
2779:src/display.c **** 	    *bp++ = (char) State2.digval;
2780:src/display.c **** 	    if (State2.numdigit > 1)
2781:src/display.c **** 	      *bp++ = State2.digval2;
2782:src/display.c **** 	  }
2783:src/display.c **** 	  if (yreg_enabled) {
2784:src/display.c **** 	    set_status_top(buf);
2785:src/display.c **** 	    no_status_top = 1;
2786:src/display.c **** 	    annuc = 1;
2787:src/display.c **** 	  }
2788:src/display.c **** 	  else {
2789:src/display.c **** 	    set_status(buf);
2790:src/display.c **** 	  }
2791:src/display.c **** 	} else if (State2.status) {
2792:src/display.c **** 	  show_status();
2793:src/display.c **** 	  skip = 1;
2794:src/display.c **** 	} else if (State2.labellist) {
2795:src/display.c **** 	  show_label();
2796:src/display.c **** 	  skip = 1;
2797:src/display.c **** 	} else if (State2.registerlist) {
2798:src/display.c **** 	  show_registers();
2799:src/display.c **** 	  skip = 1;
2800:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
2801:src/display.c **** 	    annunciators();
2802:src/display.c **** 	  }
2803:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
2804:src/display.c **** 	} else if (State2.disp_as_alpha) {
2805:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
2806:src/display.c **** #endif
2807:src/display.c **** 	} else if (State2.runmode) {
2808:src/display.c **** 	  if (DispMsg) { 
2809:src/display.c **** 	    set_status(DispMsg);
2810:src/display.c **** 	  } else if (DispPlot) {
2811:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
2812:src/display.c **** 	  } else if (State2.alphas) {
2813:src/display.c **** 	    bp = scopy(buf, Alpha);
2814:src/display.c **** 	    j = State2.alpha_pos;
2815:src/display.c **** 	    if (j != 0) {
2816:src/display.c **** 	      i = slen(buf);
2817:src/display.c **** 	      j *= 6;
2818:src/display.c **** 	      if ( i - j >= ALPHA_SWITCH )
ARM GAS  /tmp/ccdQiHBS.s 			page 125


2819:src/display.c **** 		{
2820:src/display.c **** 		  buf[ (i - j) ] = '\0';
2821:src/display.c **** 		  set_status_right(buf);
2822:src/display.c **** 		}
2823:src/display.c **** 	      else {
2824:src/display.c **** 		set_status(buf);
2825:src/display.c **** 	      }
2826:src/display.c **** 	    }
2827:src/display.c **** 	    else {
2828:src/display.c **** 	      if ((shift != SHIFT_N) && !yreg_enabled) {
2829:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
2830:src/display.c **** 		*bp++ = '\0';
2831:src/display.c **** 	      }
2832:src/display.c **** 	      set_status_right(buf);
2833:src/display.c **** 	    }
2834:src/display.c **** 	    if (shift != SHIFT_N && yreg_enabled) {
2835:src/display.c **** 	      bp = buf;
2836:src/display.c **** 	      *bp++ = 021 + shift - SHIFT_F;
2837:src/display.c **** 	      *bp++ = '\0';
2838:src/display.c **** 	      set_status_top(buf);
2839:src/display.c **** 	      no_status_top = 1;
2840:src/display.c **** 	      //annuc = 1;
2841:src/display.c **** 	    }
2842:src/display.c **** 	  }
2843:src/display.c **** 	  else {
2844:src/display.c **** 	    annuc = 1;
2845:src/display.c **** 	  }
2846:src/display.c **** 	}
2847:src/display.c **** 	else {
2848:src/display.c **** #ifndef DM42
2849:src/display.c **** 	  show_progtrace(buf);
2850:src/display.c **** #endif
2851:src/display.c **** 	  i = state_pc();
2852:src/display.c **** 	  if (i > 0)
2853:src/display.c **** 	    set_status(prt(getprog(i), buf));
2854:src/display.c **** 	  else
2855:src/display.c **** 	    set_status("");
2856:src/display.c **** 	  set_dot(STO_annun);
2857:src/display.c **** 	  //	  if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
2858:src/display.c **** 	    annuc = 1;
2859:src/display.c **** 	  goto nostk;
2860:src/display.c **** 	}
2861:src/display.c **** 	show_stack();
2862:src/display.c ****       nostk:
2863:src/display.c **** 	show_flags();
2864:src/display.c **** 	if (!skip) {
2865:src/display.c **** 	  if (State2.runmode) {
2866:src/display.c **** 	  only_update_x:
2867:src/display.c **** 	    p = get_cmdline();
2868:src/display.c **** 	    if (p == NULL || cata) {
2869:src/display.c **** 	      if (ShowRegister != -1) {
2870:src/display.c **** #ifdef INCLUDE_C_LOCK
2871:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
2872:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
2873:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
2874:src/display.c **** 		    SET_POLAR_READY;
2875:src/display.c **** 		  }
ARM GAS  /tmp/ccdQiHBS.s 			page 126


2876:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
2877:src/display.c **** 		    State2.hms = 0;
2878:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2879:src/display.c **** 		    State2.hms = 1;
2880:src/display.c **** 		  }
2881:src/display.c **** 		  else {
2882:src/display.c **** 		    format_reg(regJ_idx, CNULL);
2883:src/display.c **** 		  }
2884:src/display.c **** 		  x_disp = 1;
2885:src/display.c **** 		}
2886:src/display.c **** 		else {
2887:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
2888:src/display.c **** 		  format_reg(ShowRegister, CNULL);
2889:src/display.c **** 		}
2890:src/display.c **** #else		
2891:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
2892:src/display.c **** 		format_reg(ShowRegister, CNULL);
2893:src/display.c **** #endif
2894:src/display.c **** 	      }
2895:src/display.c **** 	      else
2896:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
2897:src/display.c **** 	    } else {
2898:src/display.c **** 	      disp_x(p);
2899:src/display.c **** 	      x_disp = 1;
2900:src/display.c **** 	    }
2901:src/display.c **** 	    if (WasDataEntry) {
2902:src/display.c **** 	      goto finish;
2903:src/display.c **** 	    }
2904:src/display.c **** 	  } else {
2905:src/display.c **** 	    unsigned int pc = state_pc();
2906:src/display.c **** 	    unsigned int upc = user_pc(pc);
2907:src/display.c **** 	    const int n = nLIB(pc);
2908:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2909:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2910:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
2911:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2912:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
2913:src/display.c **** #if 0
2914:src/display.c **** #ifndef REALBUILD
2915:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
2916:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
2917:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
2918:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
2919:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
2920:src/display.c **** 	      char *b=buf;
2921:src/display.c **** 	      char *l=LastDisplayedNumber;
2922:src/display.c **** 	      *l++=' ';
2923:src/display.c **** 	      while(*b) {
2924:src/display.c **** 		*l++=*b++;
2925:src/display.c **** 		*l++=' ';
2926:src/display.c **** 	      }
2927:src/display.c **** 	      *l=0;
2928:src/display.c **** 	    }
2929:src/display.c **** #endif
2930:src/display.c **** #endif
2931:src/display.c **** 	  }
2932:src/display.c **** 	}
ARM GAS  /tmp/ccdQiHBS.s 			page 127


2933:src/display.c **** 	set_annunciators();
2934:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
2935:src/display.c **** 	  ShowRPN = 0;
2936:src/display.c **** 	  dot(RPN, 0);
2937:src/display.c **** 	}
2938:src/display.c **** 	// disp_temp disables the <- key
2939:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
2940:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
2941:src/display.c **** 
2942:src/display.c **** #if defined(INCLUDE_YREG_CODE)
2943:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
2944:src/display.c **** 	  annunciators();
2945:src/display.c ****  	State2.hms = 0;
2946:src/display.c **** #else
2947:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
2948:src/display.c **** 	  annunciators();
2949:src/display.c **** #endif
2950:src/display.c **** 
2951:src/display.c ****       finish:
2952:src/display.c **** 	State2.version = 0;
2953:src/display.c **** 	State2.disp_as_alpha = 0;
2954:src/display.c **** 	State2.smode = SDISP_NORMAL;
2955:src/display.c **** 	State2.invalid_disp = 0;
2956:src/display.c **** 	ShowRegister = regX_idx;
2957:src/display.c **** 	DispMsg = CNULL;
2958:src/display.c **** 	DispPlot = 0;
2959:src/display.c **** 	State2.disp_small = 0;
2960:src/display.c **** 	finish_display();
2961:src/display.c **** 	no_status_top = 0;
2962:src/display.c **** #ifdef CONSOLE
2963:src/display.c **** 	JustDisplayed = 1;
2964:src/display.c **** #endif
2965:src/display.c ****       }
2966:src/display.c **** #else
2967:src/display.c ****       /*
2968:src/display.c ****        *  Update the display
2969:src/display.c ****        */
2970:src/display.c ****       void display(void) {
2971:src/display.c **** 	int i, j;
2972:src/display.c **** 	char buf[40], *bp = buf;
2973:src/display.c **** 	const char *p;
2974:src/display.c **** 	int annuc = 0;
2975:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
2976:src/display.c **** 	int skip = 0;
2977:src/display.c **** 	int x_disp = 0;
2978:src/display.c **** 	const int shift = cur_shift();
2979:src/display.c **** 
2980:src/display.c **** 
2981:src/display.c **** 
2982:src/display.c **** 	if (State2.disp_freeze) {
2983:src/display.c **** 	  State2.disp_freeze = 0;
2984:src/display.c **** 	  State2.disp_temp = 1;
2985:src/display.c **** #ifdef CONSOLE
2986:src/display.c **** 	  JustDisplayed = 1;
2987:src/display.c **** #endif
2988:src/display.c **** 	  ShowRPN = 0;
2989:src/display.c **** 	  return;
ARM GAS  /tmp/ccdQiHBS.s 			page 128


2990:src/display.c **** 	}
2991:src/display.c **** 
2992:src/display.c **** 	if (WasDataEntry) {
2993:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
2994:src/display.c **** 
2995:src/display.c **** 	  // Erase 7-segment display
2996:src/display.c **** 	  for (i = 0; i <= EXP_SIGN; ++i) {
2997:src/display.c **** 	    clr_dot(i);
2998:src/display.c **** 	  }
2999:src/display.c **** 	  goto only_update_x;
3000:src/display.c **** 	}
3001:src/display.c **** 
3002:src/display.c **** 	// Clear display
3003:src/display.c **** 	reset_disp();
3004:src/display.c **** 
3005:src/display.c **** 	xset(buf, '\0', sizeof(buf));
3006:src/display.c **** 	if (State2.cmplx  && !cata) {
3007:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
3008:src/display.c **** 	  set_status(buf);
3009:src/display.c **** 	}
3010:src/display.c **** 	if (State2.version) {
3011:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
3012:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
3013:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
3014:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
3015:src/display.c **** 	  set_status(vers);
3016:src/display.c **** 	  skip = 1;
3017:src/display.c **** 	  goto nostk;
3018:src/display.c **** 	} else if (State2.confirm) {
3019:src/display.c **** 	  set_status(S_SURE);
3020:src/display.c **** 	} else if (State2.hyp) {
3021:src/display.c **** 	  bp = scopy(bp, "HYP");
3022:src/display.c **** 	  if (! State2.dot)
3023:src/display.c **** 	    *bp++ = '\235';
3024:src/display.c **** 	  set_status(buf);
3025:src/display.c **** 	} else if (State2.gtodot) {
3026:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
3027:src/display.c **** 	  bp = scopy_char(bp, argcmds[RARG_GTO].cmd, '.');
3028:src/display.c **** 	  if (State2.numdigit > 0)
3029:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3030:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
3031:src/display.c **** 	  *bp++ = '_';
3032:src/display.c **** 	  set_status(buf);
3033:src/display.c **** 	} else if (State2.rarg) {
3034:src/display.c **** 	  /* Commands with arguments */
3035:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
3036:src/display.c **** 	  if (CmdBase == RARG_FIX || CmdBase == RARG_SIG || CmdBase == RARG_SIG0)
3037:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
3038:src/display.c **** #endif
3039:src/display.c **** 	  bp = scopy(bp, argcmds[CmdBase].cmd);
3040:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
3041:src/display.c **** 	  if (State2.dot) {
3042:src/display.c **** 	    *bp++ = 's';
3043:src/display.c **** 	    *bp++ = '_';
3044:src/display.c **** 	  } else if (shift == SHIFT_F) {
3045:src/display.c **** 	    *bp++ = '\021';
3046:src/display.c **** 	    *bp++ = '_';
ARM GAS  /tmp/ccdQiHBS.s 			page 129


3047:src/display.c **** 	  } else {
3048:src/display.c **** 	    /* const int maxdigits = State2.shuffle ? 4 
3049:src/display.c **** 	       : State2.ind ? 2 
3050:src/display.c **** 	       : num_arg_digits(CmdBase); */
3051:src/display.c **** 	    if (State2.local)
3052:src/display.c **** 	      *bp++ = '.';
3053:src/display.c **** 	    if (State2.numdigit > 0) {
3054:src/display.c **** 	      if (State2.shuffle)
3055:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
3056:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
3057:src/display.c **** 	      else
3058:src/display.c **** 		bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
3059:src/display.c **** 	    }
3060:src/display.c **** 	    // for (i = State2.numdigit; i < maxdigits; i++)
3061:src/display.c **** 	    *bp++ = '_';
3062:src/display.c **** 	  }
3063:src/display.c **** 	  set_status(buf);
3064:src/display.c **** 	} else if (State2.test != TST_NONE) {
3065:src/display.c **** 	  *bp++ = 'x';
3066:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
3067:src/display.c **** 	  *bp++ = '_';
3068:src/display.c **** 	  *bp++ = '?';
3069:src/display.c **** 	  set_status(buf);
3070:src/display.c **** 	} else if (cata) {
3071:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
3072:src/display.c **** 	  char b2[16];
3073:src/display.c **** 	  const char *p;
3074:src/display.c **** 
3075:src/display.c **** 	  bp = scopy(bp, "\177\006\006");
3076:src/display.c **** 	  p = catcmd(op, b2);
3077:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
3078:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
3079:src/display.c **** 	  bp = scopy(bp, p);
3080:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
3081:src/display.c **** 	    // State2.disp_small = 1;
3082:src/display.c **** 	    if (op == RARG_BASEOP(RARG_INTNUM) || op == RARG_BASEOP(RARG_INTNUM_CMPLX))
3083:src/display.c **** 	      set_digits_string("0 to 255", 0);
3084:src/display.c **** 	    else
3085:src/display.c **** 	      set_x(get_const(op & RARG_MASK, 0), CNULL, 0);
3086:src/display.c **** 	    skip = 1;
3087:src/display.c **** 	  } else if (State2.runmode) {
3088:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
3089:src/display.c **** 	      decNumber x, r;
3090:src/display.c **** 	      decimal64 z;
3091:src/display.c **** 
3092:src/display.c **** 	      getX(&x);
3093:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
3094:src/display.c **** 		const unsigned int f = argKIND(op);
3095:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
3096:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
3097:src/display.c **** 		  update_speed(0);
3098:src/display.c **** 		  fp(&r, &x);
3099:src/display.c **** 		}
3100:src/display.c **** 		else
3101:src/display.c **** 		  set_NaN(&r);
3102:src/display.c **** 	      } else
3103:src/display.c **** 		do_conv(&r, op & RARG_MASK, &x);
ARM GAS  /tmp/ccdQiHBS.s 			page 130


3104:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
3105:src/display.c **** 	      packed_from_number(&z, &r);
3106:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
3107:src/display.c **** 	      skip = 1;
3108:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
3109:src/display.c **** 	      REGISTER z, *const x = StackBase;
3110:src/display.c **** 	      copyreg(&z, x);
3111:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
3112:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
3113:src/display.c **** 	      copyreg(x, &z);
3114:src/display.c **** 	      skip = 1;
3115:src/display.c **** 	    }
3116:src/display.c **** 	  }
3117:src/display.c **** 	  set_status(buf);
3118:src/display.c **** 	} else if (State2.multi) {
3119:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
3120:src/display.c **** 	  if (State2.numdigit > 0) {
3121:src/display.c **** 	    *bp++ = (char) State2.digval;
3122:src/display.c **** 	    if (State2.numdigit > 1)
3123:src/display.c **** 	      *bp++ = State2.digval2;
3124:src/display.c **** 	  }
3125:src/display.c **** 	  set_status(buf);
3126:src/display.c **** 	} else if (State2.status) {
3127:src/display.c **** 	  show_status();
3128:src/display.c **** 	  skip = 1;
3129:src/display.c **** 	} else if (State2.labellist) {
3130:src/display.c **** 	  show_label();
3131:src/display.c **** 	  skip = 1;
3132:src/display.c **** 	} else if (State2.registerlist) {
3133:src/display.c **** 	  show_registers();
3134:src/display.c **** 	  skip = 1;
3135:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
3136:src/display.c **** 	    annunciators();
3137:src/display.c **** 	  }
3138:src/display.c **** #ifdef SHIFT_HOLD_TEMPVIEW
3139:src/display.c **** 	} else if (State2.disp_as_alpha) {
3140:src/display.c **** 	  set_status(alpha_rcl_s(regX_idx, buf));
3141:src/display.c **** #endif
3142:src/display.c **** 	} else if (State2.runmode) {
3143:src/display.c **** 	  if (DispMsg) { 
3144:src/display.c **** 	    set_status(DispMsg);
3145:src/display.c **** 	  } else if (DispPlot) {
3146:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
3147:src/display.c **** 	  } else if (State2.alphas) {
3148:src/display.c **** #if 0
3149:src/display.c **** 	    set_digits_string("AlpHA", 0);
3150:src/display.c **** #endif
3151:src/display.c **** 	    bp = scopy(buf, Alpha);
3152:src/display.c **** 	    j = State2.alpha_pos;
3153:src/display.c **** 	    if (j != 0) {
3154:src/display.c **** 	      i = slen(buf);
3155:src/display.c **** 	      //				
3156:src/display.c **** 	      j *= 6;
3157:src/display.c **** #ifdef BIGGER_DISPLAY
3158:src/display.c **** 	      if ( i - j >= 20 )
3159:src/display.c **** #else
3160:src/display.c **** 	      if ( i - j >= 12 )
ARM GAS  /tmp/ccdQiHBS.s 			page 131


3161:src/display.c **** #endif
3162:src/display.c **** 		{
3163:src/display.c **** 		buf[ (i - j) ] = '\0';
3164:src/display.c **** 		set_status_right(buf);
3165:src/display.c **** 		}
3166:src/display.c **** 	      else {
3167:src/display.c **** 		set_status(buf);
3168:src/display.c **** 	      }
3169:src/display.c **** 	    } else {
3170:src/display.c **** 	      if (shift != SHIFT_N) {
3171:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
3172:src/display.c **** 		*bp++ = '\0';
3173:src/display.c **** 	      }
3174:src/display.c **** 	      set_status_right(buf);
3175:src/display.c **** 	    }
3176:src/display.c **** 	  } else {
3177:src/display.c **** 	    annuc = 1;
3178:src/display.c **** 	  }
3179:src/display.c **** 	} else {
3180:src/display.c **** #ifndef DM42
3181:src/display.c **** 	  show_progtrace(buf);
3182:src/display.c **** #endif
3183:src/display.c **** 	  i = state_pc();
3184:src/display.c **** 	  if (i > 0)
3185:src/display.c **** 	    set_status(prt(getprog(i), buf));
3186:src/display.c **** 	  else
3187:src/display.c **** 	    set_status("");
3188:src/display.c **** 	  set_dot(STO_annun);
3189:src/display.c **** #if 0
3190:src/display.c **** 	  if (State2.smode == SDISP_SHOW) {
3191:src/display.c **** 	    unsigned short int crc;
3192:src/display.c **** 	    crc = checksum_program();
3193:src/display.c **** 	    j = SEGS_PER_DIGIT * 0;
3194:src/display.c **** 	    for (i=0; i<4; i++) {
3195:src/display.c **** 	      set_dig(j, "0123456789ABCDEF"[crc & 0xf]);
3196:src/display.c **** 	      crc >>= 4;
3197:src/display.c **** 	      j += SEGS_PER_DIGIT;
3198:src/display.c **** 	    }
3199:src/display.c **** 	    skip = 1;
3200:src/display.c **** 	  }
3201:src/display.c **** 	  else
3202:src/display.c **** #endif
3203:src/display.c **** 	    if (cur_shift() != SHIFT_N || State2.cmplx || State2.arrow)
3204:src/display.c **** 	      annuc = 1;
3205:src/display.c **** 	  goto nostk;
3206:src/display.c **** 	}
3207:src/display.c **** 	show_stack();
3208:src/display.c ****       nostk:	show_flags();
3209:src/display.c **** 	if (!skip) {
3210:src/display.c **** 	  if (State2.runmode) {
3211:src/display.c **** 	  only_update_x:
3212:src/display.c **** 	    p = get_cmdline();
3213:src/display.c **** 	    if (p == NULL || cata) {
3214:src/display.c **** 	      if (ShowRegister != -1) {
3215:src/display.c **** #ifdef INCLUDE_C_LOCK
3216:src/display.c **** 		if ( C_LOCKED && POLAR_DISPLAY && !(REAL_FLAG || IMAG_FLAG) ) {
3217:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
ARM GAS  /tmp/ccdQiHBS.s 			page 132


3218:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
3219:src/display.c **** 		    SET_POLAR_READY;
3220:src/display.c **** 		  }
3221:src/display.c **** 		  if (State2.hms) { // no hms display for mod, only arg
3222:src/display.c **** 		    State2.hms = 0;
3223:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3224:src/display.c **** 		    State2.hms = 1;
3225:src/display.c **** 		  }
3226:src/display.c **** 		  else {
3227:src/display.c **** 		    format_reg(regJ_idx, CNULL);
3228:src/display.c **** 		  }
3229:src/display.c **** 		  x_disp = 1;
3230:src/display.c **** 		}
3231:src/display.c **** 		else {
3232:src/display.c **** 		  x_disp = (ShowRegister == regX_idx) && !State2.hms;
3233:src/display.c **** 		  format_reg(ShowRegister, CNULL);
3234:src/display.c **** 		}
3235:src/display.c **** #else
3236:src/display.c **** 
3237:src/display.c **** 		x_disp = (ShowRegister == regX_idx) && !State2.hms;
3238:src/display.c **** 		format_reg(ShowRegister, CNULL);
3239:src/display.c **** #endif
3240:src/display.c **** 	      }
3241:src/display.c **** 	      else
3242:src/display.c **** 		set_digits_string(" ---", 4 * SEGS_PER_DIGIT);
3243:src/display.c **** 	    } else {
3244:src/display.c **** 	      disp_x(p);
3245:src/display.c **** 	      x_disp = 1;
3246:src/display.c **** 	    }
3247:src/display.c **** 	    if (WasDataEntry) {
3248:src/display.c **** 	      goto finish;
3249:src/display.c **** 	    }
3250:src/display.c **** 	  } else {
3251:src/display.c **** 	    unsigned int pc = state_pc();
3252:src/display.c **** 	    unsigned int upc = user_pc(pc);
3253:src/display.c **** 	    const int n = nLIB(pc);
3254:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3255:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3256:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
3257:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3258:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
3259:src/display.c **** #if 0
3260:src/display.c **** #ifndef REALBUILD
3261:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
3262:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
3263:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP_ShortText : libname_shorttext[n]),
3264:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
3265:src/display.c **** 	    { // allow local declaration of b and l in C (not C++) on VisualStudio
3266:src/display.c **** 	      char *b=buf;
3267:src/display.c **** 	      char *l=LastDisplayedNumber;
3268:src/display.c **** 	      *l++=' ';
3269:src/display.c **** 	      while(*b) {
3270:src/display.c **** 		*l++=*b++;
3271:src/display.c **** 		*l++=' ';
3272:src/display.c **** 	      }
3273:src/display.c **** 	      *l=0;
3274:src/display.c **** 	    }
ARM GAS  /tmp/ccdQiHBS.s 			page 133


3275:src/display.c **** #endif
3276:src/display.c **** #endif
3277:src/display.c **** 	  }
3278:src/display.c **** 	}
3279:src/display.c **** 	set_annunciators();
3280:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
3281:src/display.c **** 	  ShowRPN = 0;
3282:src/display.c **** 	  dot(RPN, 0);
3283:src/display.c **** 	}
3284:src/display.c **** 	// disp_temp disables the <- key
3285:src/display.c **** 	State2.disp_temp = ! ShowRPN && State2.runmode 
3286:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
3287:src/display.c **** 
3288:src/display.c **** #if defined(INCLUDE_YREG_CODE)
3289:src/display.c **** 	if ((annuc && (! State2.disp_temp || State2.hms)) || State2.wascomplex) // makes sure that hms num
3290:src/display.c **** 	  annunciators();
3291:src/display.c ****  	State2.hms = 0;
3292:src/display.c **** #else
3293:src/display.c **** 
3294:src/display.c **** 	if ((annuc && ! State2.disp_temp) || State2.wascomplex)
3295:src/display.c **** 	  annunciators();
3296:src/display.c **** 	
3297:src/display.c **** 
3298:src/display.c **** 
3299:src/display.c **** #endif
3300:src/display.c **** 
3301:src/display.c ****       finish:
3302:src/display.c **** 	State2.version = 0;
3303:src/display.c **** 	State2.disp_as_alpha = 0;
3304:src/display.c **** 	State2.smode = SDISP_NORMAL;
3305:src/display.c **** 	State2.invalid_disp = 0;
3306:src/display.c **** 	ShowRegister = regX_idx;
3307:src/display.c **** 	DispMsg = CNULL;
3308:src/display.c **** 	DispPlot = 0;
3309:src/display.c **** 	State2.disp_small = 0;
3310:src/display.c **** 	finish_display();
3311:src/display.c **** #ifdef CONSOLE
3312:src/display.c **** 	JustDisplayed = 1;
3313:src/display.c **** #endif
3314:src/display.c ****       }
3315:src/display.c **** #endif
3316:src/display.c ****       /*
3317:src/display.c ****        *  Frozen display will revert to normal only after another call to display();
3318:src/display.c ****        */
3319:src/display.c ****       void frozen_display()
3320:src/display.c ****       {
3321:src/display.c **** 	State2.disp_freeze = 0;
3322:src/display.c **** 	display();
3323:src/display.c **** 	State2.disp_freeze = 1;
3324:src/display.c ****       }
3325:src/display.c **** 
3326:src/display.c ****       static void set_status_graphic(const unsigned char *graphic) {
3327:src/display.c **** 	int glen = *graphic++;
3328:src/display.c **** 	int i, j;
3329:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3330:src/display.c **** 	unsigned long long int mat[6];
3331:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 134


3332:src/display.c **** 	xset(mat, 0, sizeof(mat));
3333:src/display.c **** #endif
3334:src/display.c **** 	if (glen <= 0)			return;
3335:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
3336:src/display.c **** 
3337:src/display.c **** 	for (i=0; i<6; i++)
3338:src/display.c **** 	  for (j=1; j<=glen; j++) {
3339:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3340:src/display.c **** 	    if (graphic[j] & (1 << i))
3341:src/display.c **** 	      mat[i] |= 1LL << j;
3342:src/display.c **** #else
3343:src/display.c **** 	    dot(j*6+i+MATRIX_BASE, (graphic[j] & (1 << i))?1:0);
3344:src/display.c **** #endif
3345:src/display.c **** 	  }
3346:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3347:src/display.c **** 	set_status_grob(mat);
3348:src/display.c **** #endif
3349:src/display.c ****       }
3350:src/display.c **** 
3351:src/display.c **** 
3352:src/display.c ****       /* Take the given string and display as much of it as possible on the top
3353:src/display.c ****        * line of the display.  The font size is set by the smallp parameter.
3354:src/display.c ****        * We allow character to go one pixel beyond the display since the rightmost
3355:src/display.c ****        * column is almost always blank.
3356:src/display.c ****        */
3357:src/display.c ****       static void set_status_sized(const char *str, int smallp) {
3358:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
3359:src/display.c ****       }
3360:src/display.c ****       static void set_status_sized_top(const char *str, int smallp) {
3361:src/display.c **** 	s_s_sized(str, smallp, BW_TOP, MB_TOP, TOP_DOTS);
3362:src/display.c ****       }
3363:src/display.c **** 
3364:src/display.c ****       
3365:src/display.c ****       static void s_s_sized(const char *str, int smallp, int b_w, int m_b, int m_d) {	
 3347              		.loc 1 3365 19 is_stmt 1 view -0
 3348              		.cfi_startproc
 3349              		@ args = 0, pretend = 0, frame = 544
 3350              		@ frame_needed = 0, uses_anonymous_args = 0
3366:src/display.c **** 	unsigned short int posns[257];
 3351              		.loc 1 3366 2 view .LVU1008
3367:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3368:src/display.c **** 	// Mark posns as uninitialized, smallp must be 0 or 1 for this to work correctly.
3369:src/display.c **** 	int posns_state = 255;
 3352              		.loc 1 3369 2 view .LVU1009
3370:src/display.c **** #endif
3371:src/display.c **** 	unsigned int x = 0;
 3353              		.loc 1 3371 2 view .LVU1010
3372:src/display.c **** 	int i, j;
 3354              		.loc 1 3372 2 view .LVU1011
3373:src/display.c **** 	const int offset = smallp ? 256 : 0;
 3355              		.loc 1 3373 2 view .LVU1012
3365:src/display.c **** 	unsigned short int posns[257];
 3356              		.loc 1 3365 19 is_stmt 0 view .LVU1013
 3357 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3358              		.cfi_def_cfa_offset 36
 3359              		.cfi_offset 4, -36
 3360              		.cfi_offset 5, -32
ARM GAS  /tmp/ccdQiHBS.s 			page 135


 3361              		.cfi_offset 6, -28
 3362              		.cfi_offset 7, -24
 3363              		.cfi_offset 8, -20
 3364              		.cfi_offset 9, -16
 3365              		.cfi_offset 10, -12
 3366              		.cfi_offset 11, -8
 3367              		.cfi_offset 14, -4
3374:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3375:src/display.c **** 	unsigned long long int mat[6];
3376:src/display.c **** 
3377:src/display.c **** 	xset(mat, 0, sizeof(mat));
3378:src/display.c **** #endif
3379:src/display.c **** #ifdef RP_PREFIX
3380:src/display.c **** 	RectPolConv = 0;
 3368              		.loc 1 3380 14 view .LVU1014
 3369 0004 544B     		ldr	r3, .L359
 3370 0006 0027     		movs	r7, #0
3365:src/display.c **** 	unsigned short int posns[257];
 3371              		.loc 1 3365 19 view .LVU1015
 3372 0008 ADF5097D 		sub	sp, sp, #548
 3373              		.cfi_def_cfa_offset 584
 3374              		.loc 1 3380 14 view .LVU1016
 3375 000c 1F60     		str	r7, [r3]
3381:src/display.c **** #endif
3382:src/display.c **** #ifndef INCLUDE_FONT_ESCAPE
3383:src/display.c **** 	findlengths(posns, smallp);
3384:src/display.c **** #endif
3385:src/display.c **** 	while (*str != '\0' && x <= b_w+1)  {
 3376              		.loc 1 3385 9 view .LVU1017
 3377 000e 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
3365:src/display.c **** 	unsigned short int posns[257];
 3378              		.loc 1 3365 19 view .LVU1018
 3379 0010 0090     		str	r0, [sp]
3373:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 3380              		.loc 1 3373 34 view .LVU1019
 3381 0012 0B1E     		subs	r3, r1, #0
 3382 0014 0293     		str	r3, [sp, #8]
 3383 0016 14BF     		ite	ne
 3384 0018 4FF48073 		movne	r3, #256
 3385 001c 3B46     		moveq	r3, r7
 3386 001e 0393     		str	r3, [sp, #12]
 3387              	.LVL391:
3380:src/display.c **** #endif
 3388              		.loc 1 3380 2 is_stmt 1 view .LVU1020
 3389              		.loc 1 3385 2 view .LVU1021
 3390              		.loc 1 3385 8 view .LVU1022
 3391 0020 002D     		cmp	r5, #0
 3392 0022 00F09680 		beq	.L345
 3393              	.LBB301:
3386:src/display.c **** 	  int c;
3387:src/display.c **** 	  int width;
3388:src/display.c **** 	  unsigned char cmap[6];
3389:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
3390:src/display.c **** 	  int real_width;
3391:src/display.c **** 	  int current_smallp;
3392:src/display.c **** 
3393:src/display.c **** 	  // A 007 byte followed by a mode byte changes the way the following character is printed.
ARM GAS  /tmp/ccdQiHBS.s 			page 136


3394:src/display.c **** 	  // Bit 7 (MSB) of the mode byte is currently unused and should be set to 1.
3395:src/display.c **** 	  // Bits 6-5: 00 -> don't change font
3396:src/display.c **** 	  //           01 -> (not used)
3397:src/display.c **** 	  //           10 -> use big font
3398:src/display.c **** 	  //           11 -> use small font
3399:src/display.c **** 	  // Bits 4-0: character will be considered this wide
3400:src/display.c **** 	  if (str[0] == '\007') {
 3394              		.loc 1 3400 7 is_stmt 0 view .LVU1023
 3395 0026 072D     		cmp	r5, #7
 3396              	.LBE301:
3369:src/display.c **** #endif
 3397              		.loc 1 3369 6 view .LVU1024
 3398 0028 4FF0FF04 		mov	r4, #255
 3399              	.LVL392:
 3400              	.LBB310:
3386:src/display.c **** 	  int c;
 3401              		.loc 1 3386 4 is_stmt 1 view .LVU1025
3387:src/display.c **** 	  unsigned char cmap[6];
 3402              		.loc 1 3387 4 view .LVU1026
3388:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 3403              		.loc 1 3388 4 view .LVU1027
3390:src/display.c **** 	  int current_smallp;
 3404              		.loc 1 3390 4 view .LVU1028
3391:src/display.c **** 
 3405              		.loc 1 3391 4 view .LVU1029
 3406              		.loc 1 3400 4 view .LVU1030
 3407              		.loc 1 3400 7 is_stmt 0 view .LVU1031
 3408 002c 62D1     		bne	.L324
 3409              	.LVL393:
 3410              	.L357:
3401:src/display.c **** 	    width = str[1] & 0x1F;
 3411              		.loc 1 3401 6 is_stmt 1 view .LVU1032
 3412              		.loc 1 3401 17 is_stmt 0 view .LVU1033
 3413 002e 009B     		ldr	r3, [sp]
 3414 0030 5E78     		ldrb	r6, [r3, #1]	@ zero_extendqisi2
 3415 0032 06F06003 		and	r3, r6, #96
3402:src/display.c **** 	    switch (str[1] & 0x60) {
 3416              		.loc 1 3402 6 view .LVU1034
 3417 0036 402B     		cmp	r3, #64
3401:src/display.c **** 	    width = str[1] & 0x1F;
 3418              		.loc 1 3401 12 view .LVU1035
 3419 0038 06F01F06 		and	r6, r6, #31
 3420              	.LVL394:
 3421              		.loc 1 3402 6 is_stmt 1 view .LVU1036
 3422 003c 7AD0     		beq	.L325
 3423 003e 602B     		cmp	r3, #96
 3424 0040 7DD0     		beq	.L326
 3425              	.LVL395:
3403:src/display.c **** 	    default:
3404:src/display.c **** 	    case 0x00:	current_smallp = smallp;
3405:src/display.c **** 	      break;
3406:src/display.c **** 	    case 0x40:	current_smallp = 0;
3407:src/display.c **** 	      break;
3408:src/display.c **** 	    case 0x60:	current_smallp = 1;
3409:src/display.c **** 	      break;
3410:src/display.c **** 	    }
3411:src/display.c **** 	    c = (unsigned char) str[2] + (current_smallp ? 256 : 0);
ARM GAS  /tmp/ccdQiHBS.s 			page 137


 3426              		.loc 1 3411 6 view .LVU1037
 3427              		.loc 1 3411 10 is_stmt 0 view .LVU1038
 3428 0042 009B     		ldr	r3, [sp]
 3429 0044 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 3430              		.loc 1 3411 57 view .LVU1039
 3431 0046 029B     		ldr	r3, [sp, #8]
 3432 0048 002B     		cmp	r3, #0
 3433 004a 7FD0     		beq	.L346
 3434 004c 05F58075 		add	r5, r5, #256
 3435 0050 9A46     		mov	r10, r3
 3436              	.LVL396:
 3437              	.L328:
3412:src/display.c **** 	    str += 3;
 3438              		.loc 1 3412 6 is_stmt 1 view .LVU1040
3413:src/display.c **** 
3414:src/display.c **** 	    real_width = charlengths(c);
 3439              		.loc 1 3414 19 is_stmt 0 view .LVU1041
 3440 0052 2846     		mov	r0, r5
 3441 0054 FFF7FEFF 		bl	charlengths
 3442              	.LVL397:
3412:src/display.c **** 	    str += 3;
 3443              		.loc 1 3412 10 view .LVU1042
 3444 0058 009B     		ldr	r3, [sp]
3415:src/display.c **** 	  } else {
3416:src/display.c **** 	    c = (unsigned char) *str++ + offset;
3417:src/display.c **** 	    real_width = width = charlengths(c);
3418:src/display.c **** 	    current_smallp = smallp;
3419:src/display.c **** 	  }
3420:src/display.c **** 
3421:src/display.c **** 	  if (x + real_width > b_w + 1)
 3445              		.loc 1 3421 10 view .LVU1043
 3446 005a 3844     		add	r0, r0, r7
3412:src/display.c **** 
 3447              		.loc 1 3412 10 view .LVU1044
 3448 005c 0333     		adds	r3, r3, #3
 3449              		.loc 1 3421 7 view .LVU1045
 3450 005e 2C28     		cmp	r0, #44
3412:src/display.c **** 
 3451              		.loc 1 3412 10 view .LVU1046
 3452 0060 0093     		str	r3, [sp]
 3453              	.LVL398:
3414:src/display.c **** 	  } else {
 3454              		.loc 1 3414 6 is_stmt 1 view .LVU1047
 3455              		.loc 1 3421 4 view .LVU1048
 3456              		.loc 1 3421 7 is_stmt 0 view .LVU1049
 3457 0062 55D8     		bhi	.L340
 3458              	.L358:
3422:src/display.c **** 	    break;
3423:src/display.c **** 
3424:src/display.c **** 	  if (posns_state != current_smallp) {
 3459              		.loc 1 3424 4 is_stmt 1 view .LVU1050
 3460              		.loc 1 3424 7 is_stmt 0 view .LVU1051
 3461 0064 A245     		cmp	r10, r4
3425:src/display.c **** 	    findlengths(posns, current_smallp);
 3462              		.loc 1 3425 6 view .LVU1052
 3463 0066 07AB     		add	r3, sp, #28
 3464              	.LVL399:
ARM GAS  /tmp/ccdQiHBS.s 			page 138


3424:src/display.c **** 	    findlengths(posns, current_smallp);
 3465              		.loc 1 3424 7 view .LVU1053
 3466 0068 05D0     		beq	.L331
 3467              		.loc 1 3425 6 is_stmt 1 view .LVU1054
 3468 006a 1846     		mov	r0, r3
 3469 006c 5146     		mov	r1, r10
 3470 006e 0193     		str	r3, [sp, #4]
 3471 0070 FFF7FEFF 		bl	findlengths
 3472              	.LVL400:
 3473 0074 019B     		ldr	r3, [sp, #4]
3426:src/display.c **** 	    posns_state = current_smallp;
 3474              		.loc 1 3426 6 view .LVU1055
 3475              	.LVL401:
 3476              	.L331:
3427:src/display.c **** 	  }
3428:src/display.c **** 	  unpackchar(c, cmap, current_smallp, posns);
 3477              		.loc 1 3428 4 view .LVU1056
 3478 0076 2846     		mov	r0, r5
 3479 0078 05A9     		add	r1, sp, #20
 3480 007a 5246     		mov	r2, r10
 3481 007c 07EB4708 		add	r8, r7, r7, lsl #1
 3482 0080 FFF7FEFF 		bl	unpackchar
 3483              	.LVL402:
3429:src/display.c **** #else
3430:src/display.c **** 	  c = (unsigned char) *str++ + offset; //doesn't matter if c is 256 too big;
3431:src/display.c **** 
3432:src/display.c **** 	  //cmap = &charset[c][0];
3433:src/display.c **** 	  width = charlengths(c);
3434:src/display.c **** 
3435:src/display.c **** 	  if (x + width > b_w+1)
3436:src/display.c **** 	    break;
3437:src/display.c **** 
3438:src/display.c **** 	  /* Decode the packed character bytes */
3439:src/display.c **** 	  unpackchar(c, cmap, smallp, posns);
3440:src/display.c **** #endif
3441:src/display.c **** 
3442:src/display.c **** 	  for (i=0; i<6; i++)
 3484              		.loc 1 3442 4 view .LVU1057
 3485              		.loc 1 3442 14 view .LVU1058
 3486 0084 4FEA4808 		lsl	r8, r8, #1
 3487 0088 05AD     		add	r5, sp, #20
 3488              	.LVL403:
 3489              		.loc 1 3442 14 is_stmt 0 view .LVU1059
 3490 008a A8F58178 		sub	r8, r8, #258
3428:src/display.c **** #else
 3491              		.loc 1 3428 4 view .LVU1060
 3492 008e 4FF4C874 		mov	r4, #400
 3493              	.LVL404:
 3494              	.L332:
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 3495              		.loc 1 3443 16 is_stmt 1 view .LVU1061
 3496              		.loc 1 3443 6 is_stmt 0 view .LVU1062
 3497 0092 002E     		cmp	r6, #0
 3498 0094 1FDD     		ble	.L338
3444:src/display.c **** 	      if (x+j >= b_w)
 3499              		.loc 1 3444 8 is_stmt 1 view .LVU1063
 3500              		.loc 1 3444 11 is_stmt 0 view .LVU1064
ARM GAS  /tmp/ccdQiHBS.s 			page 139


 3501 0096 2A2F     		cmp	r7, #42
 3502 0098 1DD8     		bhi	.L338
 3503 009a 08EB0409 		add	r9, r8, r4
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 3504              		.loc 1 3443 12 view .LVU1065
 3505 009e 4FF0000B 		mov	fp, #0
 3506 00a2 09E0     		b	.L333
 3507              	.LVL405:
 3508              	.L356:
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 3509              		.loc 1 3443 26 view .LVU1066
 3510 00a4 0BF1010B 		add	fp, fp, #1
 3511              	.LVL406:
 3512              	.LBB302:
 3513              	.LBB303:
 277:src/display.c ****   else	clr_dot(n);
 3514              		.loc 1 277 11 view .LVU1067
 3515 00a8 FFF7FEFF 		bl	set_dot
 3516              	.LVL407:
 277:src/display.c ****   else	clr_dot(n);
 3517              		.loc 1 277 11 view .LVU1068
 3518              	.LBE303:
 3519              	.LBE302:
 3520              		.loc 1 3444 8 is_stmt 1 view .LVU1069
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 3521              		.loc 1 3443 25 view .LVU1070
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 3522              		.loc 1 3443 16 view .LVU1071
3443:src/display.c **** 	    for (j=0; j<width; j++) {
 3523              		.loc 1 3443 6 is_stmt 0 view .LVU1072
 3524 00ac B345     		cmp	fp, r6
 3525 00ae 09F10609 		add	r9, r9, #6
 3526 00b2 10D0     		beq	.L338
 3527              	.L337:
 3528              		.loc 1 3444 11 view .LVU1073
 3529 00b4 A145     		cmp	r9, r4
 3530 00b6 0ED0     		beq	.L338
 3531              	.LVL408:
 3532              	.L333:
3445:src/display.c **** 		break;
3446:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3447:src/display.c **** 	      if (cmap[i] & (1 << j))
3448:src/display.c **** 		mat[i] |= 1LL << (x+j);
3449:src/display.c **** #else
3450:src/display.c **** 	      dot((x+j)*6+i+m_b, (cmap[i] & (1 << j))?1:0);
 3533              		.loc 1 3450 8 is_stmt 1 view .LVU1074
 3534              	.LBB307:
 3535              	.LBI302:
 276:src/display.c ****   if (on)	set_dot(n);
 3536              		.loc 1 276 6 view .LVU1075
 3537              	.LBB304:
 277:src/display.c ****   else	clr_dot(n);
 3538              		.loc 1 277 3 view .LVU1076
 277:src/display.c ****   else	clr_dot(n);
 3539              		.loc 1 277 11 view .LVU1077
 278:src/display.c **** }
 3540              		.loc 1 278 8 view .LVU1078
ARM GAS  /tmp/ccdQiHBS.s 			page 140


 3541              	.LBE304:
 3542              	.LBE307:
 3543              		.loc 1 3450 32 is_stmt 0 view .LVU1079
 3544 00b8 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 3545              		.loc 1 3450 47 view .LVU1080
 3546 00ba 41FA0BF1 		asr	r1, r1, fp
 3547              	.LBB308:
 3548              	.LBB305:
 277:src/display.c ****   else	clr_dot(n);
 3549              		.loc 1 277 6 view .LVU1081
 3550 00be 11F0010F 		tst	r1, #1
 277:src/display.c ****   else	clr_dot(n);
 3551              		.loc 1 277 11 view .LVU1082
 3552 00c2 4846     		mov	r0, r9
 277:src/display.c ****   else	clr_dot(n);
 3553              		.loc 1 277 6 view .LVU1083
 3554 00c4 EED1     		bne	.L356
 3555              	.LBE305:
 3556              	.LBE308:
3443:src/display.c **** 	      if (x+j >= b_w)
 3557              		.loc 1 3443 26 view .LVU1084
 3558 00c6 0BF1010B 		add	fp, fp, #1
 3559              	.LVL409:
 3560              	.LBB309:
 3561              	.LBB306:
 278:src/display.c **** }
 3562              		.loc 1 278 8 view .LVU1085
 3563 00ca FFF7FEFF 		bl	clr_dot
 3564              	.LVL410:
 278:src/display.c **** }
 3565              		.loc 1 278 8 view .LVU1086
 3566              	.LBE306:
 3567              	.LBE309:
3444:src/display.c **** 		break;
 3568              		.loc 1 3444 8 is_stmt 1 view .LVU1087
3443:src/display.c **** 	      if (x+j >= b_w)
 3569              		.loc 1 3443 25 view .LVU1088
3443:src/display.c **** 	      if (x+j >= b_w)
 3570              		.loc 1 3443 16 view .LVU1089
3443:src/display.c **** 	      if (x+j >= b_w)
 3571              		.loc 1 3443 6 is_stmt 0 view .LVU1090
 3572 00ce B345     		cmp	fp, r6
 3573 00d0 09F10609 		add	r9, r9, #6
 3574 00d4 EED1     		bne	.L337
 3575              	.LVL411:
 3576              	.L338:
3442:src/display.c **** 	    for (j=0; j<width; j++) {
 3577              		.loc 1 3442 19 is_stmt 1 view .LVU1091
3442:src/display.c **** 	    for (j=0; j<width; j++) {
 3578              		.loc 1 3442 14 view .LVU1092
 3579 00d6 0134     		adds	r4, r4, #1
 3580              	.LVL412:
3442:src/display.c **** 	    for (j=0; j<width; j++) {
 3581              		.loc 1 3442 4 is_stmt 0 view .LVU1093
 3582 00d8 B4F5CB7F 		cmp	r4, #406
 3583 00dc 05F10105 		add	r5, r5, #1
 3584 00e0 D7D1     		bne	.L332
ARM GAS  /tmp/ccdQiHBS.s 			page 141


3451:src/display.c **** #endif
3452:src/display.c **** 	    }
3453:src/display.c **** 	  x += width;
 3585              		.loc 1 3453 4 is_stmt 1 view .LVU1094
 3586              	.LBE310:
3385:src/display.c **** 	  int c;
 3587              		.loc 1 3385 9 is_stmt 0 view .LVU1095
 3588 00e2 009B     		ldr	r3, [sp]
 3589 00e4 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 3590              	.LBB311:
 3591              		.loc 1 3453 6 view .LVU1096
 3592 00e6 3744     		add	r7, r7, r6
 3593              	.LVL413:
 3594              		.loc 1 3453 6 view .LVU1097
 3595              	.LBE311:
3385:src/display.c **** 	  int c;
 3596              		.loc 1 3385 8 is_stmt 1 view .LVU1098
 3597 00e8 95B1     		cbz	r5, .L340
3385:src/display.c **** 	  int c;
 3598              		.loc 1 3385 22 is_stmt 0 view .LVU1099
 3599 00ea 2C2F     		cmp	r7, #44
 3600 00ec 10D8     		bhi	.L340
 3601              	.LBB312:
3400:src/display.c **** 	    width = str[1] & 0x1F;
 3602              		.loc 1 3400 7 view .LVU1100
 3603 00ee 072D     		cmp	r5, #7
 3604              	.LBE312:
 3605 00f0 5446     		mov	r4, r10
 3606              	.LVL414:
 3607              	.LBB313:
3386:src/display.c **** 	  int width;
 3608              		.loc 1 3386 4 is_stmt 1 view .LVU1101
3387:src/display.c **** 	  unsigned char cmap[6];
 3609              		.loc 1 3387 4 view .LVU1102
3388:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 3610              		.loc 1 3388 4 view .LVU1103
3390:src/display.c **** 	  int current_smallp;
 3611              		.loc 1 3390 4 view .LVU1104
3391:src/display.c **** 
 3612              		.loc 1 3391 4 view .LVU1105
3400:src/display.c **** 	    width = str[1] & 0x1F;
 3613              		.loc 1 3400 4 view .LVU1106
3400:src/display.c **** 	    width = str[1] & 0x1F;
 3614              		.loc 1 3400 7 is_stmt 0 view .LVU1107
 3615 00f2 9CD0     		beq	.L357
 3616              	.LVL415:
 3617              	.L324:
3416:src/display.c **** 	    real_width = width = charlengths(c);
 3618              		.loc 1 3416 6 is_stmt 1 view .LVU1108
3416:src/display.c **** 	    real_width = width = charlengths(c);
 3619              		.loc 1 3416 8 is_stmt 0 view .LVU1109
 3620 00f4 039B     		ldr	r3, [sp, #12]
 3621 00f6 1D44     		add	r5, r5, r3
3417:src/display.c **** 	    current_smallp = smallp;
 3622              		.loc 1 3417 27 view .LVU1110
 3623 00f8 2846     		mov	r0, r5
 3624 00fa FFF7FEFF 		bl	charlengths
ARM GAS  /tmp/ccdQiHBS.s 			page 142


 3625              	.LVL416:
3416:src/display.c **** 	    real_width = width = charlengths(c);
 3626              		.loc 1 3416 30 view .LVU1111
 3627 00fe 009B     		ldr	r3, [sp]
3417:src/display.c **** 	    current_smallp = smallp;
 3628              		.loc 1 3417 25 view .LVU1112
 3629 0100 DDF808A0 		ldr	r10, [sp, #8]
 3630 0104 0646     		mov	r6, r0
3421:src/display.c **** 	    break;
 3631              		.loc 1 3421 10 view .LVU1113
 3632 0106 3844     		add	r0, r0, r7
3416:src/display.c **** 	    real_width = width = charlengths(c);
 3633              		.loc 1 3416 30 view .LVU1114
 3634 0108 0133     		adds	r3, r3, #1
3421:src/display.c **** 	    break;
 3635              		.loc 1 3421 7 view .LVU1115
 3636 010a 2C28     		cmp	r0, #44
3416:src/display.c **** 	    real_width = width = charlengths(c);
 3637              		.loc 1 3416 30 view .LVU1116
 3638 010c 0093     		str	r3, [sp]
 3639              	.LVL417:
3417:src/display.c **** 	    current_smallp = smallp;
 3640              		.loc 1 3417 6 is_stmt 1 view .LVU1117
3418:src/display.c **** 	  }
 3641              		.loc 1 3418 6 view .LVU1118
3421:src/display.c **** 	    break;
 3642              		.loc 1 3421 4 view .LVU1119
3421:src/display.c **** 	    break;
 3643              		.loc 1 3421 7 is_stmt 0 view .LVU1120
 3644 010e A9D9     		bls	.L358
 3645              	.LVL418:
 3646              	.L340:
3421:src/display.c **** 	    break;
 3647              		.loc 1 3421 7 view .LVU1121
 3648              	.LBE313:
3454:src/display.c **** 	}
3455:src/display.c **** 
3456:src/display.c **** 
3457:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
3458:src/display.c **** 	set_status_grob(mat);
3459:src/display.c **** #else
3460:src/display.c **** 	for (i=m_b + 6*x; i<m_d; i++)
 3649              		.loc 1 3460 2 is_stmt 1 view .LVU1122
 3650              		.loc 1 3460 16 is_stmt 0 view .LVU1123
 3651 0110 07EB4704 		add	r4, r7, r7, lsl #1
 3652 0114 6400     		lsls	r4, r4, #1
 3653              		.loc 1 3460 13 view .LVU1124
 3654 0116 8E34     		adds	r4, r4, #142
 3655              	.LVL419:
 3656              		.loc 1 3460 20 is_stmt 1 view .LVU1125
 3657              		.loc 1 3460 2 is_stmt 0 view .LVU1126
 3658 0118 B4F5C87F 		cmp	r4, #400
 3659 011c 06DA     		bge	.L321
 3660              	.LVL420:
 3661              	.L342:
3461:src/display.c **** 	  clr_dot(i);
 3662              		.loc 1 3461 4 is_stmt 1 view .LVU1127
ARM GAS  /tmp/ccdQiHBS.s 			page 143


 3663 011e 2046     		mov	r0, r4
3460:src/display.c **** 	  clr_dot(i);
 3664              		.loc 1 3460 28 is_stmt 0 view .LVU1128
 3665 0120 0134     		adds	r4, r4, #1
 3666              	.LVL421:
 3667              		.loc 1 3461 4 view .LVU1129
 3668 0122 FFF7FEFF 		bl	clr_dot
 3669              	.LVL422:
3460:src/display.c **** 	  clr_dot(i);
 3670              		.loc 1 3460 27 is_stmt 1 view .LVU1130
3460:src/display.c **** 	  clr_dot(i);
 3671              		.loc 1 3460 20 view .LVU1131
3460:src/display.c **** 	  clr_dot(i);
 3672              		.loc 1 3460 2 is_stmt 0 view .LVU1132
 3673 0126 B4F5C87F 		cmp	r4, #400
 3674 012a F8D1     		bne	.L342
 3675              	.L321:
3462:src/display.c **** #endif
3463:src/display.c ****       }
 3676              		.loc 1 3463 7 view .LVU1133
 3677 012c 0DF5097D 		add	sp, sp, #548
 3678              		.cfi_remember_state
 3679              		.cfi_def_cfa_offset 36
 3680              	.LVL423:
 3681              		.loc 1 3463 7 view .LVU1134
 3682              		@ sp needed
 3683 0130 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3684              	.LVL424:
 3685              	.L325:
 3686              		.cfi_restore_state
 3687              	.LBB314:
3406:src/display.c **** 	      break;
 3688              		.loc 1 3406 17 is_stmt 1 view .LVU1135
3407:src/display.c **** 	    case 0x60:	current_smallp = 1;
 3689              		.loc 1 3407 8 view .LVU1136
3411:src/display.c **** 	    str += 3;
 3690              		.loc 1 3411 6 view .LVU1137
3411:src/display.c **** 	    str += 3;
 3691              		.loc 1 3411 10 is_stmt 0 view .LVU1138
 3692 0134 009B     		ldr	r3, [sp]
3406:src/display.c **** 	      break;
 3693              		.loc 1 3406 32 view .LVU1139
 3694 0136 4FF0000A 		mov	r10, #0
3411:src/display.c **** 	    str += 3;
 3695              		.loc 1 3411 10 view .LVU1140
 3696 013a 9D78     		ldrb	r5, [r3, #2]	@ zero_extendqisi2
 3697 013c 89E7     		b	.L328
 3698              	.LVL425:
 3699              	.L326:
3408:src/display.c **** 	      break;
 3700              		.loc 1 3408 17 is_stmt 1 view .LVU1141
3409:src/display.c **** 	    }
 3701              		.loc 1 3409 8 view .LVU1142
3411:src/display.c **** 	    str += 3;
 3702              		.loc 1 3411 6 view .LVU1143
3411:src/display.c **** 	    str += 3;
 3703              		.loc 1 3411 10 is_stmt 0 view .LVU1144
ARM GAS  /tmp/ccdQiHBS.s 			page 144


 3704 013e 009B     		ldr	r3, [sp]
 3705 0140 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
3408:src/display.c **** 	      break;
 3706              		.loc 1 3408 32 view .LVU1145
 3707 0142 4FF0010A 		mov	r10, #1
 3708 0146 00F58075 		add	r5, r0, #256
 3709 014a 82E7     		b	.L328
 3710              	.LVL426:
 3711              	.L346:
3408:src/display.c **** 	      break;
 3712              		.loc 1 3408 32 view .LVU1146
 3713 014c DDF808A0 		ldr	r10, [sp, #8]
 3714 0150 7FE7     		b	.L328
 3715              	.LVL427:
 3716              	.L345:
3408:src/display.c **** 	      break;
 3717              		.loc 1 3408 32 view .LVU1147
 3718              	.LBE314:
3460:src/display.c **** 	  clr_dot(i);
 3719              		.loc 1 3460 8 view .LVU1148
 3720 0152 8E24     		movs	r4, #142
 3721 0154 E3E7     		b	.L342
 3722              	.L360:
 3723 0156 00BF     		.align	2
 3724              	.L359:
 3725 0158 00000000 		.word	RectPolConv
 3726              		.cfi_endproc
 3727              	.LFE57:
 3729              		.section	.text.getdig,"ax",%progbits
 3730              		.align	1
 3731              		.p2align 2,,3
 3732              		.global	getdig
 3733              		.syntax unified
 3734              		.thumb
 3735              		.thumb_func
 3736              		.fpu fpv4-sp-d16
 3738              	getdig:
 3739              	.LVL428:
 3740              	.LFB6:
 271:src/display.c ****   // perform index lookup
 3741              		.loc 1 271 1 is_stmt 1 view -0
 3742              		.cfi_startproc
 3743              		@ args = 0, pretend = 0, frame = 0
 3744              		@ frame_needed = 0, uses_anonymous_args = 0
 3745              		@ link register save eliminated.
 273:src/display.c **** }
 3746              		.loc 1 273 3 view .LVU1150
 273:src/display.c **** }
 3747              		.loc 1 273 16 is_stmt 0 view .LVU1151
 3748 0000 014B     		ldr	r3, .L362
 273:src/display.c **** }
 3749              		.loc 1 273 19 view .LVU1152
 3750 0002 C0B2     		uxtb	r0, r0
 3751              	.LVL429:
 274:src/display.c **** 
 3752              		.loc 1 274 1 view .LVU1153
 3753 0004 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccdQiHBS.s 			page 145


 3754 0006 7047     		bx	lr
 3755              	.L363:
 3756              		.align	2
 3757              	.L362:
 3758 0008 00000000 		.word	.LANCHOR2
 3759              		.cfi_endproc
 3760              	.LFE6:
 3762              		.section	.text.dot,"ax",%progbits
 3763              		.align	1
 3764              		.p2align 2,,3
 3765              		.global	dot
 3766              		.syntax unified
 3767              		.thumb
 3768              		.thumb_func
 3769              		.fpu fpv4-sp-d16
 3771              	dot:
 3772              	.LVL430:
 3773              	.LFB7:
 276:src/display.c ****   if (on)	set_dot(n);
 3774              		.loc 1 276 25 is_stmt 1 view -0
 3775              		.cfi_startproc
 3776              		@ args = 0, pretend = 0, frame = 0
 3777              		@ frame_needed = 0, uses_anonymous_args = 0
 3778              		@ link register save eliminated.
 277:src/display.c ****   else	clr_dot(n);
 3779              		.loc 1 277 3 view .LVU1155
 277:src/display.c ****   else	clr_dot(n);
 3780              		.loc 1 277 6 is_stmt 0 view .LVU1156
 3781 0000 09B1     		cbz	r1, .L365
 277:src/display.c ****   else	clr_dot(n);
 3782              		.loc 1 277 11 is_stmt 1 discriminator 1 view .LVU1157
 3783 0002 FFF7FEBF 		b	set_dot
 3784              	.LVL431:
 3785              	.L365:
 278:src/display.c **** }
 3786              		.loc 1 278 8 view .LVU1158
 3787 0006 FFF7FEBF 		b	clr_dot
 3788              	.LVL432:
 278:src/display.c **** }
 3789              		.loc 1 278 8 is_stmt 0 view .LVU1159
 3790              		.cfi_endproc
 3791              	.LFE7:
 3793 000a 00BF     		.section	.text.std_round_fix,"ax",%progbits
 3794              		.align	1
 3795              		.p2align 2,,3
 3796              		.global	std_round_fix
 3797              		.syntax unified
 3798              		.thumb
 3799              		.thumb_func
 3800              		.fpu fpv4-sp-d16
 3802              	std_round_fix:
 3803              	.LVL433:
 3804              	.LFB24:
1744:src/display.c **** 	decNumber c;
 3805              		.loc 1 1744 93 is_stmt 1 view -0
 3806              		.cfi_startproc
 3807              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccdQiHBS.s 			page 146


 3808              		@ frame_needed = 0, uses_anonymous_args = 0
1744:src/display.c **** 	decNumber c;
 3809              		.loc 1 1744 93 is_stmt 0 view .LVU1161
 3810 0000 70B5     		push	{r4, r5, r6, lr}
 3811              		.cfi_def_cfa_offset 16
 3812              		.cfi_offset 4, -16
 3813              		.cfi_offset 5, -12
 3814              		.cfi_offset 6, -8
 3815              		.cfi_offset 14, -4
 3816 0002 0E46     		mov	r6, r1
1745:src/display.c **** 	int true_exp, x=0;
 3817              		.loc 1 1745 2 is_stmt 1 view .LVU1162
1746:src/display.c **** 	int min_pos_exp, max_neg_exp;
 3818              		.loc 1 1746 2 view .LVU1163
 3819              	.LVL434:
1747:src/display.c **** 
 3820              		.loc 1 1747 2 view .LVU1164
1749:src/display.c **** 	  min_pos_exp = 9;
 3821              		.loc 1 1749 2 view .LVU1165
1744:src/display.c **** 	decNumber c;
 3822              		.loc 1 1744 93 is_stmt 0 view .LVU1166
 3823 0004 8AB0     		sub	sp, sp, #40
 3824              		.cfi_def_cfa_offset 56
1749:src/display.c **** 	  min_pos_exp = 9;
 3825              		.loc 1 1749 5 view .LVU1167
 3826 0006 92B9     		cbnz	r2, .L367
1754:src/display.c **** 	  max_neg_exp = -1 - dispdigs;
 3827              		.loc 1 1754 4 is_stmt 1 view .LVU1168
 3828              	.LVL435:
1755:src/display.c **** 	}
 3829              		.loc 1 1755 4 view .LVU1169
1758:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3830              		.loc 1 1758 2 view .LVU1170
 3831 0008 0146     		mov	r1, r0
 3832              	.LVL436:
1758:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3833              		.loc 1 1758 2 is_stmt 0 view .LVU1171
 3834 000a 01A8     		add	r0, sp, #4
 3835              	.LVL437:
1758:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3836              		.loc 1 1758 2 view .LVU1172
 3837 000c 1D46     		mov	r5, r3
 3838 000e FFF7FEFF 		bl	dn_abs
 3839              	.LVL438:
1759:src/display.c **** 
 3840              		.loc 1 1759 2 is_stmt 1 view .LVU1173
1759:src/display.c **** 
 3841              		.loc 1 1759 24 is_stmt 0 view .LVU1174
 3842 0012 DDE90130 		ldrd	r3, r0, [sp, #4]
 3843 0016 1844     		add	r0, r0, r3
 3844              	.LVL439:
1761:src/display.c **** 	  x = *dd;
 3845              		.loc 1 1761 2 is_stmt 1 view .LVU1175
1765:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3846              		.loc 1 1765 2 view .LVU1176
1765:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3847              		.loc 1 1765 5 is_stmt 0 view .LVU1177
ARM GAS  /tmp/ccdQiHBS.s 			page 147


 3848 0018 0138     		subs	r0, r0, #1
 3849 001a 1AD5     		bpl	.L371
1755:src/display.c **** 	}
 3850              		.loc 1 1755 16 view .LVU1178
 3851 001c EB43     		mvns	r3, r5
1765:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3852              		.loc 1 1765 21 view .LVU1179
 3853 001e 8342     		cmp	r3, r0
 3854 0020 17DA     		bge	.L371
 3855              	.LVL440:
 3856              	.L373:
1767:src/display.c **** 	  return MODE_FIX;
 3857              		.loc 1 1767 4 is_stmt 1 view .LVU1180
1767:src/display.c **** 	  return MODE_FIX;
 3858              		.loc 1 1767 8 is_stmt 0 view .LVU1181
 3859 0022 3368     		ldr	r3, [r6]
 3860 0024 181A     		subs	r0, r3, r0
 3861 0026 3060     		str	r0, [r6]
1768:src/display.c **** 	}
 3862              		.loc 1 1768 4 is_stmt 1 view .LVU1182
1768:src/display.c **** 	}
 3863              		.loc 1 1768 11 is_stmt 0 view .LVU1183
 3864 0028 0120     		movs	r0, #1
1777:src/display.c **** #else
 3865              		.loc 1 1777 7 view .LVU1184
 3866 002a 0AB0     		add	sp, sp, #40
 3867              		.cfi_remember_state
 3868              		.cfi_def_cfa_offset 16
 3869              		@ sp needed
 3870 002c 70BD     		pop	{r4, r5, r6, pc}
 3871              	.LVL441:
 3872              	.L367:
 3873              		.cfi_restore_state
1758:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3874              		.loc 1 1758 2 is_stmt 1 view .LVU1185
 3875 002e 0146     		mov	r1, r0
 3876              	.LVL442:
1758:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3877              		.loc 1 1758 2 is_stmt 0 view .LVU1186
 3878 0030 01A8     		add	r0, sp, #4
 3879              	.LVL443:
1758:src/display.c **** 	true_exp = c.exponent + c.digits - 1;
 3880              		.loc 1 1758 2 view .LVU1187
 3881 0032 1446     		mov	r4, r2
 3882 0034 FFF7FEFF 		bl	dn_abs
 3883              	.LVL444:
1759:src/display.c **** 
 3884              		.loc 1 1759 2 is_stmt 1 view .LVU1188
1759:src/display.c **** 
 3885              		.loc 1 1759 24 is_stmt 0 view .LVU1189
 3886 0038 DDE90123 		ldrd	r2, r3, [sp, #4]
1761:src/display.c **** 	  x = *dd;
 3887              		.loc 1 1761 5 view .LVU1190
 3888 003c 052C     		cmp	r4, #5
1759:src/display.c **** 
 3889              		.loc 1 1759 24 view .LVU1191
 3890 003e 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccdQiHBS.s 			page 148


1759:src/display.c **** 
 3891              		.loc 1 1759 11 view .LVU1192
 3892 0040 03F1FF30 		add	r0, r3, #-1
 3893              	.LVL445:
1761:src/display.c **** 	  x = *dd;
 3894              		.loc 1 1761 2 is_stmt 1 view .LVU1193
1761:src/display.c **** 	  x = *dd;
 3895              		.loc 1 1761 5 is_stmt 0 view .LVU1194
 3896 0044 15D1     		bne	.L375
1762:src/display.c **** 	}
 3897              		.loc 1 1762 4 is_stmt 1 view .LVU1195
1762:src/display.c **** 	}
 3898              		.loc 1 1762 6 is_stmt 0 view .LVU1196
 3899 0046 3268     		ldr	r2, [r6]
 3900              	.LVL446:
 3901              	.L370:
1765:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3902              		.loc 1 1765 2 is_stmt 1 view .LVU1197
1765:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3903              		.loc 1 1765 5 is_stmt 0 view .LVU1198
 3904 0048 8242     		cmp	r2, r0
 3905 004a 05DC     		bgt	.L379
1771:src/display.c **** 	  return UState.fixeng?MODE_ENG:MODE_SCI; // force ENG/SCI mode for big / small numbers
 3906              		.loc 1 1771 53 discriminator 2 view .LVU1199
 3907 004c 0333     		adds	r3, r3, #3
 3908 004e 0C2B     		cmp	r3, #12
 3909 0050 04D8     		bhi	.L374
 3910              	.LVL447:
 3911              	.L371:
1775:src/display.c **** 	}
 3912              		.loc 1 1775 11 view .LVU1200
 3913 0052 0020     		movs	r0, #0
1777:src/display.c **** #else
 3914              		.loc 1 1777 7 view .LVU1201
 3915 0054 0AB0     		add	sp, sp, #40
 3916              		.cfi_remember_state
 3917              		.cfi_def_cfa_offset 16
 3918              		@ sp needed
 3919 0056 70BD     		pop	{r4, r5, r6, pc}
 3920              	.LVL448:
 3921              	.L379:
 3922              		.cfi_restore_state
1765:src/display.c **** 	  // decimals needed; *dd adjusted to provide correct number
 3923              		.loc 1 1765 21 view .LVU1202
 3924 0058 031D     		adds	r3, r0, #4
 3925 005a E2DA     		bge	.L373
 3926              	.L374:
 3927              	.LBB317:
 3928              	.LBI317:
1744:src/display.c **** 	decNumber c;
 3929              		.loc 1 1744 26 is_stmt 1 view .LVU1203
 3930              	.LVL449:
 3931              	.LBB318:
1772:src/display.c **** 	}
 3932              		.loc 1 1772 4 view .LVU1204
1772:src/display.c **** 	}
 3933              		.loc 1 1772 24 is_stmt 0 view .LVU1205
ARM GAS  /tmp/ccdQiHBS.s 			page 149


 3934 005c 064B     		ldr	r3, .L380
 3935 005e 1B68     		ldr	r3, [r3]
 3936 0060 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
1772:src/display.c **** 	}
 3937              		.loc 1 1772 33 view .LVU1206
 3938 0064 13F0100F 		tst	r3, #16
 3939 0068 14BF     		ite	ne
 3940 006a 0320     		movne	r0, #3
 3941 006c 0220     		moveq	r0, #2
 3942              	.LBE318:
 3943              	.LBE317:
1777:src/display.c **** #else
 3944              		.loc 1 1777 7 view .LVU1207
 3945 006e 0AB0     		add	sp, sp, #40
 3946              		.cfi_remember_state
 3947              		.cfi_def_cfa_offset 16
 3948              		@ sp needed
 3949 0070 70BD     		pop	{r4, r5, r6, pc}
 3950              	.LVL450:
 3951              	.L375:
 3952              		.cfi_restore_state
1746:src/display.c **** 	int min_pos_exp, max_neg_exp;
 3953              		.loc 1 1746 16 view .LVU1208
 3954 0072 0022     		movs	r2, #0
 3955 0074 E8E7     		b	.L370
 3956              	.L381:
 3957 0076 00BF     		.align	2
 3958              	.L380:
 3959 0078 00000000 		.word	main_ram
 3960              		.cfi_endproc
 3961              	.LFE24:
 3963              		.section	.text.set_IO_annunciator,"ax",%progbits
 3964              		.align	1
 3965              		.p2align 2,,3
 3966              		.global	set_IO_annunciator
 3967              		.syntax unified
 3968              		.thumb
 3969              		.thumb_func
 3970              		.fpu fpv4-sp-d16
 3972              	set_IO_annunciator:
 3973              	.LFB33:
2551:src/display.c **** #ifndef DM42
 3974              		.loc 1 2551 37 is_stmt 1 view -0
 3975              		.cfi_startproc
 3976              		@ args = 0, pretend = 0, frame = 0
 3977              		@ frame_needed = 0, uses_anonymous_args = 0
2556:src/display.c **** #endif
 3978              		.loc 1 2556 4 view .LVU1210
2551:src/display.c **** #ifndef DM42
 3979              		.loc 1 2551 37 is_stmt 0 view .LVU1211
 3980 0000 38B5     		push	{r3, r4, r5, lr}
 3981              		.cfi_def_cfa_offset 16
 3982              		.cfi_offset 3, -16
 3983              		.cfi_offset 4, -12
 3984              		.cfi_offset 5, -8
 3985              		.cfi_offset 14, -4
2562:src/display.c **** #endif
ARM GAS  /tmp/ccdQiHBS.s 			page 150


 3986              		.loc 1 2562 4 view .LVU1212
 3987 0002 0D4B     		ldr	r3, .L388
2566:src/display.c **** 	  dot(LIT_EQ, on);
 3988              		.loc 1 2566 9 view .LVU1213
 3989 0004 0D4C     		ldr	r4, .L388+4
2562:src/display.c **** #endif
 3990              		.loc 1 2562 4 view .LVU1214
 3991 0006 1B68     		ldr	r3, [r3]
2566:src/display.c **** 	  dot(LIT_EQ, on);
 3992              		.loc 1 2566 5 view .LVU1215
 3993 0008 2268     		ldr	r2, [r4]
2562:src/display.c **** #endif
 3994              		.loc 1 2562 4 view .LVU1216
 3995 000a 1D1E     		subs	r5, r3, #0
 3996 000c 18BF     		it	ne
 3997 000e 0125     		movne	r5, #1
 3998              	.LVL451:
2566:src/display.c **** 	  dot(LIT_EQ, on);
 3999              		.loc 1 2566 2 is_stmt 1 view .LVU1217
2566:src/display.c **** 	  dot(LIT_EQ, on);
 4000              		.loc 1 2566 5 is_stmt 0 view .LVU1218
 4001 0010 AA42     		cmp	r2, r5
 4002 0012 0FD0     		beq	.L382
2567:src/display.c **** 	  IoAnnunciator = on;
 4003              		.loc 1 2567 4 is_stmt 1 view .LVU1219
 4004              	.LVL452:
 4005              	.LBB319:
 4006              	.LBI319:
 276:src/display.c ****   if (on)	set_dot(n);
 4007              		.loc 1 276 6 view .LVU1220
 4008              	.LBB320:
 277:src/display.c ****   else	clr_dot(n);
 4009              		.loc 1 277 3 view .LVU1221
 277:src/display.c ****   else	clr_dot(n);
 4010              		.loc 1 277 11 is_stmt 0 view .LVU1222
 4011 0014 8420     		movs	r0, #132
 277:src/display.c ****   else	clr_dot(n);
 4012              		.loc 1 277 6 view .LVU1223
 4013 0016 33B9     		cbnz	r3, .L387
 278:src/display.c **** }
 4014              		.loc 1 278 8 is_stmt 1 view .LVU1224
 4015 0018 FFF7FEFF 		bl	clr_dot
 4016              	.LVL453:
 278:src/display.c **** }
 4017              		.loc 1 278 8 is_stmt 0 view .LVU1225
 4018              	.LBE320:
 4019              	.LBE319:
2568:src/display.c **** 	  finish_display(); //LIT_EQ
 4020              		.loc 1 2568 4 is_stmt 1 view .LVU1226
2568:src/display.c **** 	  finish_display(); //LIT_EQ
 4021              		.loc 1 2568 18 is_stmt 0 view .LVU1227
 4022 001c 2560     		str	r5, [r4]
2569:src/display.c **** 	}
 4023              		.loc 1 2569 4 is_stmt 1 view .LVU1228
2571:src/display.c **** 
 4024              		.loc 1 2571 7 is_stmt 0 view .LVU1229
 4025 001e BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/ccdQiHBS.s 			page 151


 4026              		.cfi_remember_state
 4027              		.cfi_restore 14
 4028              		.cfi_restore 5
 4029              		.cfi_restore 4
 4030              		.cfi_restore 3
 4031              		.cfi_def_cfa_offset 0
 4032              	.LVL454:
2569:src/display.c **** 	}
 4033              		.loc 1 2569 4 view .LVU1230
 4034 0022 FFF7FEBF 		b	finish_display
 4035              	.LVL455:
 4036              	.L387:
 4037              		.cfi_restore_state
 4038              	.LBB322:
 4039              	.LBB321:
 277:src/display.c ****   else	clr_dot(n);
 4040              		.loc 1 277 11 is_stmt 1 view .LVU1231
 4041 0026 FFF7FEFF 		bl	set_dot
 4042              	.LVL456:
 277:src/display.c ****   else	clr_dot(n);
 4043              		.loc 1 277 11 is_stmt 0 view .LVU1232
 4044              	.LBE321:
 4045              	.LBE322:
2568:src/display.c **** 	  finish_display(); //LIT_EQ
 4046              		.loc 1 2568 4 is_stmt 1 view .LVU1233
2568:src/display.c **** 	  finish_display(); //LIT_EQ
 4047              		.loc 1 2568 18 is_stmt 0 view .LVU1234
 4048 002a 2560     		str	r5, [r4]
2569:src/display.c **** 	}
 4049              		.loc 1 2569 4 is_stmt 1 view .LVU1235
2571:src/display.c **** 
 4050              		.loc 1 2571 7 is_stmt 0 view .LVU1236
 4051 002c BDE83840 		pop	{r3, r4, r5, lr}
 4052              		.cfi_remember_state
 4053              		.cfi_restore 14
 4054              		.cfi_restore 5
 4055              		.cfi_restore 4
 4056              		.cfi_restore 3
 4057              		.cfi_def_cfa_offset 0
 4058              	.LVL457:
2569:src/display.c **** 	}
 4059              		.loc 1 2569 4 view .LVU1237
 4060 0030 FFF7FEBF 		b	finish_display
 4061              	.LVL458:
 4062              	.L382:
 4063              		.cfi_restore_state
2571:src/display.c **** 
 4064              		.loc 1 2571 7 view .LVU1238
 4065 0034 38BD     		pop	{r3, r4, r5, pc}
 4066              	.LVL459:
 4067              	.L389:
2571:src/display.c **** 
 4068              		.loc 1 2571 7 view .LVU1239
 4069 0036 00BF     		.align	2
 4070              	.L388:
 4071 0038 00000000 		.word	PrinterColumn
 4072 003c 00000000 		.word	IoAnnunciator
ARM GAS  /tmp/ccdQiHBS.s 			page 152


 4073              		.cfi_endproc
 4074              	.LFE33:
 4076              		.section	.text.set_annunciators,"ax",%progbits
 4077              		.align	1
 4078              		.p2align 2,,3
 4079              		.syntax unified
 4080              		.thumb
 4081              		.thumb_func
 4082              		.fpu fpv4-sp-d16
 4084              	set_annunciators:
 4085              	.LFB32:
2520:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4086              		.loc 1 2520 7 is_stmt 1 view -0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 0, uses_anonymous_args = 0
2521:src/display.c **** 
 4090              		.loc 1 2521 2 view .LVU1241
2520:src/display.c **** 	const enum trig_modes tm = get_trig_mode();
 4091              		.loc 1 2520 7 is_stmt 0 view .LVU1242
 4092 0000 70B5     		push	{r4, r5, r6, lr}
 4093              		.cfi_def_cfa_offset 16
 4094              		.cfi_offset 4, -16
 4095              		.cfi_offset 5, -12
 4096              		.cfi_offset 6, -8
 4097              		.cfi_offset 14, -4
2528:src/display.c **** #else
 4098              		.loc 1 2528 11 view .LVU1243
 4099 0002 354C     		ldr	r4, .L416
2521:src/display.c **** 
 4100              		.loc 1 2521 29 view .LVU1244
 4101 0004 FFF7FEFF 		bl	get_trig_mode
 4102              	.LVL460:
2528:src/display.c **** #else
 4103              		.loc 1 2528 11 view .LVU1245
 4104 0008 2368     		ldr	r3, [r4]
 4105 000a 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
2528:src/display.c **** #else
 4106              		.loc 1 2528 2 view .LVU1246
 4107 000e 1907     		lsls	r1, r3, #28
2521:src/display.c **** 
 4108              		.loc 1 2521 29 view .LVU1247
 4109 0010 0546     		mov	r5, r0
 4110              	.LVL461:
2528:src/display.c **** #else
 4111              		.loc 1 2528 2 is_stmt 1 view .LVU1248
 4112              	.LBB323:
 4113              	.LBB324:
 277:src/display.c ****   else	clr_dot(n);
 4114              		.loc 1 277 11 is_stmt 0 view .LVU1249
 4115 0012 4FF08800 		mov	r0, #136
 4116              	.LBE324:
 4117              	.LBE323:
2528:src/display.c **** #else
 4118              		.loc 1 2528 2 view .LVU1250
 4119 0016 03D5     		bpl	.L391
2528:src/display.c **** #else
ARM GAS  /tmp/ccdQiHBS.s 			page 153


 4120              		.loc 1 2528 33 discriminator 1 view .LVU1251
 4121 0018 304B     		ldr	r3, .L416+4
2528:src/display.c **** #else
 4122              		.loc 1 2528 2 discriminator 1 view .LVU1252
 4123 001a 1B68     		ldr	r3, [r3]
 4124 001c 002B     		cmp	r3, #0
 4125 001e 58D0     		beq	.L413
 4126              	.L391:
 4127              	.LVL462:
 4128              	.LBB327:
 4129              	.LBI323:
 276:src/display.c ****   if (on)	set_dot(n);
 4130              		.loc 1 276 6 is_stmt 1 view .LVU1253
 4131              	.LBB325:
 277:src/display.c ****   else	clr_dot(n);
 4132              		.loc 1 277 3 view .LVU1254
 278:src/display.c **** }
 4133              		.loc 1 278 8 view .LVU1255
 4134 0020 FFF7FEFF 		bl	clr_dot
 4135              	.LVL463:
 4136              	.L392:
 278:src/display.c **** }
 4137              		.loc 1 278 8 is_stmt 0 view .LVU1256
 4138              	.LBE325:
 4139              	.LBE327:
2533:src/display.c **** #endif
 4140              		.loc 1 2533 2 is_stmt 1 view .LVU1257
 4141              	.LBB328:
 4142              	.LBI328:
 276:src/display.c ****   if (on)	set_dot(n);
 4143              		.loc 1 276 6 view .LVU1258
 4144              	.LBB329:
 277:src/display.c ****   else	clr_dot(n);
 4145              		.loc 1 277 3 view .LVU1259
 4146              	.LBE329:
 4147              	.LBE328:
2533:src/display.c **** #endif
 4148              		.loc 1 2533 14 is_stmt 0 view .LVU1260
 4149 0024 2368     		ldr	r3, [r4]
 4150 0026 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 4151              	.LBB332:
 4152              	.LBB330:
 277:src/display.c ****   else	clr_dot(n);
 4153              		.loc 1 277 6 view .LVU1261
 4154 002a 03F04103 		and	r3, r3, #65
 4155 002e 412B     		cmp	r3, #65
 277:src/display.c ****   else	clr_dot(n);
 4156              		.loc 1 277 11 view .LVU1262
 4157 0030 4FF08400 		mov	r0, #132
 277:src/display.c ****   else	clr_dot(n);
 4158              		.loc 1 277 6 view .LVU1263
 4159 0034 44D1     		bne	.L393
 277:src/display.c ****   else	clr_dot(n);
 4160              		.loc 1 277 11 is_stmt 1 view .LVU1264
 4161 0036 FFF7FEFF 		bl	set_dot
 4162              	.LVL464:
 4163              	.L394:
ARM GAS  /tmp/ccdQiHBS.s 			page 154


 277:src/display.c ****   else	clr_dot(n);
 4164              		.loc 1 277 11 is_stmt 0 view .LVU1265
 4165              	.LBE330:
 4166              	.LBE332:
2536:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4167              		.loc 1 2536 2 is_stmt 1 view .LVU1266
2536:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4168              		.loc 1 2536 19 is_stmt 0 view .LVU1267
 4169 003a 294E     		ldr	r6, .L416+8
2536:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4170              		.loc 1 2536 2 view .LVU1268
 4171 003c B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 4172              	.LBB333:
 4173              	.LBB334:
 277:src/display.c ****   else	clr_dot(n);
 4174              		.loc 1 277 11 view .LVU1269
 4175 003e 8620     		movs	r0, #134
 4176              	.LBE334:
 4177              	.LBE333:
2536:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4178              		.loc 1 2536 2 view .LVU1270
 4179 0040 23B9     		cbnz	r3, .L395
2536:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4180              		.loc 1 2536 47 discriminator 2 view .LVU1271
 4181 0042 7269     		ldr	r2, [r6, #20]
 4182 0044 274B     		ldr	r3, .L416+12
 4183 0046 1340     		ands	r3, r3, r2
2536:src/display.c **** 	dot(DOWN_ARR, (State2.alphas || State2.multi) && State2.alphashift);
 4184              		.loc 1 2536 2 discriminator 2 view .LVU1272
 4185 0048 002B     		cmp	r3, #0
 4186 004a 3FD0     		beq	.L414
 4187              	.L395:
 4188              	.LBB337:
 4189              	.LBB335:
 277:src/display.c ****   else	clr_dot(n);
 4190              		.loc 1 277 11 is_stmt 1 view .LVU1273
 4191 004c FFF7FEFF 		bl	set_dot
 4192              	.LVL465:
 4193              	.L396:
 4194              	.LBE335:
 4195              	.LBE337:
2537:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4196              		.loc 1 2537 2 view .LVU1274
2537:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4197              		.loc 1 2537 31 is_stmt 0 view .LVU1275
 4198 0050 254A     		ldr	r2, .L416+16
 4199 0052 7369     		ldr	r3, [r6, #20]
2537:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4200              		.loc 1 2537 2 view .LVU1276
 4201 0054 1A42     		tst	r2, r3
 4202              	.LBB338:
 4203              	.LBB339:
 277:src/display.c ****   else	clr_dot(n);
 4204              		.loc 1 277 11 view .LVU1277
 4205 0056 4FF08500 		mov	r0, #133
 4206              	.LBE339:
 4207              	.LBE338:
ARM GAS  /tmp/ccdQiHBS.s 			page 155


2537:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4208              		.loc 1 2537 2 view .LVU1278
 4209 005a 02D0     		beq	.L397
2537:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4210              		.loc 1 2537 48 discriminator 1 view .LVU1279
 4211 005c B37D     		ldrb	r3, [r6, #22]	@ zero_extendqisi2
2537:src/display.c **** 	dot(BIG_EQ, get_user_flag(A_FLAG));
 4212              		.loc 1 2537 2 discriminator 1 view .LVU1280
 4213 005e DA06     		lsls	r2, r3, #27
 4214 0060 31D4     		bmi	.L398
 4215              	.L397:
 4216              	.LVL466:
 4217              	.LBB342:
 4218              	.LBI338:
 276:src/display.c ****   if (on)	set_dot(n);
 4219              		.loc 1 276 6 is_stmt 1 view .LVU1281
 4220              	.LBB340:
 277:src/display.c ****   else	clr_dot(n);
 4221              		.loc 1 277 3 view .LVU1282
 278:src/display.c **** }
 4222              		.loc 1 278 8 view .LVU1283
 4223 0062 FFF7FEFF 		bl	clr_dot
 4224              	.LVL467:
 4225              	.L399:
 278:src/display.c **** }
 4226              		.loc 1 278 8 is_stmt 0 view .LVU1284
 4227              	.LBE340:
 4228              	.LBE342:
2538:src/display.c **** 	set_IO_annunciator();
 4229              		.loc 1 2538 2 is_stmt 1 view .LVU1285
 4230 0066 6820     		movs	r0, #104
 4231 0068 FFF7FEFF 		bl	get_user_flag
 4232              	.LVL468:
 4233              	.LBB343:
 4234              	.LBI343:
 276:src/display.c ****   if (on)	set_dot(n);
 4235              		.loc 1 276 6 view .LVU1286
 4236              	.LBB344:
 277:src/display.c ****   else	clr_dot(n);
 4237              		.loc 1 277 3 view .LVU1287
 277:src/display.c ****   else	clr_dot(n);
 4238              		.loc 1 277 6 is_stmt 0 view .LVU1288
 4239 006c 20B3     		cbz	r0, .L400
 277:src/display.c ****   else	clr_dot(n);
 4240              		.loc 1 277 11 is_stmt 1 view .LVU1289
 4241 006e 8320     		movs	r0, #131
 4242              	.LVL469:
 277:src/display.c ****   else	clr_dot(n);
 4243              		.loc 1 277 11 is_stmt 0 view .LVU1290
 4244 0070 FFF7FEFF 		bl	set_dot
 4245              	.LVL470:
 4246              	.L401:
 277:src/display.c ****   else	clr_dot(n);
 4247              		.loc 1 277 11 view .LVU1291
 4248              	.LBE344:
 4249              	.LBE343:
2539:src/display.c **** 
ARM GAS  /tmp/ccdQiHBS.s 			page 156


 4250              		.loc 1 2539 2 is_stmt 1 view .LVU1292
 4251 0074 FFF7FEFF 		bl	set_IO_annunciator
 4252              	.LVL471:
2543:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4253              		.loc 1 2543 2 view .LVU1293
2543:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4254              		.loc 1 2543 11 is_stmt 0 view .LVU1294
 4255 0078 2368     		ldr	r3, [r4]
 4256 007a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 4257 007e 03F00103 		and	r3, r3, #1
2543:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4258              		.loc 1 2543 2 view .LVU1295
 4259 0082 2B43     		orrs	r3, r3, r5
 4260 0084 13F0FF0F 		tst	r3, #255
 4261              	.LBB346:
 4262              	.LBB347:
 277:src/display.c ****   else	clr_dot(n);
 4263              		.loc 1 277 11 view .LVU1296
 4264 0088 4FF08C00 		mov	r0, #140
 4265              	.LBE347:
 4266              	.LBE346:
2543:src/display.c **** 	dot(RAD, !is_intmode() && tm == TRIG_RAD);
 4267              		.loc 1 2543 2 view .LVU1297
 4268 008c 06D1     		bne	.L415
 4269              	.LVL472:
 4270              	.LBB350:
 4271              	.LBI346:
 276:src/display.c ****   if (on)	set_dot(n);
 4272              		.loc 1 276 6 is_stmt 1 view .LVU1298
 4273              	.LBB348:
 277:src/display.c ****   else	clr_dot(n);
 4274              		.loc 1 277 3 view .LVU1299
 277:src/display.c ****   else	clr_dot(n);
 4275              		.loc 1 277 11 view .LVU1300
 4276 008e FFF7FEFF 		bl	set_dot
 4277              	.LVL473:
 277:src/display.c ****   else	clr_dot(n);
 4278              		.loc 1 277 11 is_stmt 0 view .LVU1301
 4279              	.LBE348:
 4280              	.LBE350:
2544:src/display.c ****       }
 4281              		.loc 1 2544 2 is_stmt 1 view .LVU1302
 4282              	.L404:
 4283              	.LBB351:
 4284              	.LBI351:
 276:src/display.c ****   if (on)	set_dot(n);
 4285              		.loc 1 276 6 view .LVU1303
 4286              	.LBB352:
 277:src/display.c ****   else	clr_dot(n);
 4287              		.loc 1 277 3 view .LVU1304
 278:src/display.c **** }
 4288              		.loc 1 278 8 view .LVU1305
 4289              	.LBE352:
 4290              	.LBE351:
2545:src/display.c **** 
 4291              		.loc 1 2545 7 is_stmt 0 view .LVU1306
 4292 0092 BDE87040 		pop	{r4, r5, r6, lr}
ARM GAS  /tmp/ccdQiHBS.s 			page 157


 4293              		.cfi_remember_state
 4294              		.cfi_restore 14
 4295              		.cfi_restore 6
 4296              		.cfi_restore 5
 4297              		.cfi_restore 4
 4298              		.cfi_def_cfa_offset 0
 4299              	.LVL474:
 4300              	.LBB356:
 4301              	.LBB353:
 278:src/display.c **** }
 4302              		.loc 1 278 8 view .LVU1307
 4303 0096 8B20     		movs	r0, #139
 4304 0098 FFF7FEBF 		b	clr_dot
 4305              	.LVL475:
 4306              	.L415:
 4307              		.cfi_restore_state
 278:src/display.c **** }
 4308              		.loc 1 278 8 view .LVU1308
 4309              	.LBE353:
 4310              	.LBE356:
 4311              	.LBB357:
 276:src/display.c ****   if (on)	set_dot(n);
 4312              		.loc 1 276 6 is_stmt 1 view .LVU1309
 4313              	.LBB349:
 277:src/display.c ****   else	clr_dot(n);
 4314              		.loc 1 277 3 view .LVU1310
 278:src/display.c **** }
 4315              		.loc 1 278 8 view .LVU1311
 4316 009c FFF7FEFF 		bl	clr_dot
 4317              	.LVL476:
 278:src/display.c **** }
 4318              		.loc 1 278 8 is_stmt 0 view .LVU1312
 4319              	.LBE349:
 4320              	.LBE357:
2544:src/display.c ****       }
 4321              		.loc 1 2544 2 is_stmt 1 view .LVU1313
2544:src/display.c ****       }
 4322              		.loc 1 2544 11 is_stmt 0 view .LVU1314
 4323 00a0 2368     		ldr	r3, [r4]
 4324 00a2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2544:src/display.c ****       }
 4325              		.loc 1 2544 2 view .LVU1315
 4326 00a6 DB07     		lsls	r3, r3, #31
 4327 00a8 F3D4     		bmi	.L404
2544:src/display.c ****       }
 4328              		.loc 1 2544 2 discriminator 1 view .LVU1316
 4329 00aa 012D     		cmp	r5, #1
 4330 00ac F1D1     		bne	.L404
 4331              	.LVL477:
 4332              	.LBB358:
 276:src/display.c ****   if (on)	set_dot(n);
 4333              		.loc 1 276 6 is_stmt 1 view .LVU1317
 4334              	.LBB354:
 277:src/display.c ****   else	clr_dot(n);
 4335              		.loc 1 277 3 view .LVU1318
 277:src/display.c ****   else	clr_dot(n);
 4336              		.loc 1 277 11 view .LVU1319
ARM GAS  /tmp/ccdQiHBS.s 			page 158


 4337              	.LBE354:
 4338              	.LBE358:
2545:src/display.c **** 
 4339              		.loc 1 2545 7 is_stmt 0 view .LVU1320
 4340 00ae BDE87040 		pop	{r4, r5, r6, lr}
 4341              		.cfi_remember_state
 4342              		.cfi_restore 14
 4343              		.cfi_restore 6
 4344              		.cfi_restore 5
 4345              		.cfi_restore 4
 4346              		.cfi_def_cfa_offset 0
 4347              	.LVL478:
 4348              	.LBB359:
 4349              	.LBB355:
 277:src/display.c ****   else	clr_dot(n);
 4350              		.loc 1 277 11 view .LVU1321
 4351 00b2 8B20     		movs	r0, #139
 4352 00b4 FFF7FEBF 		b	set_dot
 4353              	.LVL479:
 4354              	.L400:
 4355              		.cfi_restore_state
 277:src/display.c ****   else	clr_dot(n);
 4356              		.loc 1 277 11 view .LVU1322
 4357              	.LBE355:
 4358              	.LBE359:
 4359              	.LBB360:
 4360              	.LBB345:
 278:src/display.c **** }
 4361              		.loc 1 278 8 is_stmt 1 view .LVU1323
 4362 00b8 8320     		movs	r0, #131
 4363              	.LVL480:
 278:src/display.c **** }
 4364              		.loc 1 278 8 is_stmt 0 view .LVU1324
 4365 00ba FFF7FEFF 		bl	clr_dot
 4366              	.LVL481:
 4367 00be D9E7     		b	.L401
 4368              	.LVL482:
 4369              	.L393:
 278:src/display.c **** }
 4370              		.loc 1 278 8 view .LVU1325
 4371              	.LBE345:
 4372              	.LBE360:
 4373              	.LBB361:
 4374              	.LBB331:
 278:src/display.c **** }
 4375              		.loc 1 278 8 is_stmt 1 view .LVU1326
 4376 00c0 FFF7FEFF 		bl	clr_dot
 4377              	.LVL483:
 278:src/display.c **** }
 4378              		.loc 1 278 8 is_stmt 0 view .LVU1327
 4379 00c4 B9E7     		b	.L394
 4380              	.LVL484:
 4381              	.L398:
 278:src/display.c **** }
 4382              		.loc 1 278 8 view .LVU1328
 4383              	.LBE331:
 4384              	.LBE361:
ARM GAS  /tmp/ccdQiHBS.s 			page 159


 4385              	.LBB362:
 276:src/display.c ****   if (on)	set_dot(n);
 4386              		.loc 1 276 6 is_stmt 1 view .LVU1329
 4387              	.LBB341:
 277:src/display.c ****   else	clr_dot(n);
 4388              		.loc 1 277 3 view .LVU1330
 277:src/display.c ****   else	clr_dot(n);
 4389              		.loc 1 277 11 view .LVU1331
 4390 00c6 FFF7FEFF 		bl	set_dot
 4391              	.LVL485:
 4392 00ca CCE7     		b	.L399
 4393              	.LVL486:
 4394              	.L414:
 277:src/display.c ****   else	clr_dot(n);
 4395              		.loc 1 277 11 is_stmt 0 view .LVU1332
 4396              	.LBE341:
 4397              	.LBE362:
 4398              	.LBB363:
 4399              	.LBI333:
 276:src/display.c ****   if (on)	set_dot(n);
 4400              		.loc 1 276 6 is_stmt 1 view .LVU1333
 4401              	.LBB336:
 277:src/display.c ****   else	clr_dot(n);
 4402              		.loc 1 277 3 view .LVU1334
 278:src/display.c **** }
 4403              		.loc 1 278 8 view .LVU1335
 4404 00cc FFF7FEFF 		bl	clr_dot
 4405              	.LVL487:
 4406 00d0 BEE7     		b	.L396
 4407              	.LVL488:
 4408              	.L413:
 278:src/display.c **** }
 4409              		.loc 1 278 8 is_stmt 0 view .LVU1336
 4410              	.LBE336:
 4411              	.LBE363:
 4412              	.LBB364:
 276:src/display.c ****   if (on)	set_dot(n);
 4413              		.loc 1 276 6 is_stmt 1 view .LVU1337
 4414              	.LBB326:
 277:src/display.c ****   else	clr_dot(n);
 4415              		.loc 1 277 3 view .LVU1338
 277:src/display.c ****   else	clr_dot(n);
 4416              		.loc 1 277 11 view .LVU1339
 4417 00d2 FFF7FEFF 		bl	set_dot
 4418              	.LVL489:
 4419 00d6 A5E7     		b	.L392
 4420              	.L417:
 4421              		.align	2
 4422              	.L416:
 4423 00d8 00000000 		.word	main_ram
 4424 00dc 00000000 		.word	Running
 4425 00e0 00000000 		.word	StateWhileOn
 4426 00e4 07000800 		.word	524295
 4427 00e8 00080800 		.word	526336
 4428              	.LBE326:
 4429              	.LBE364:
 4430              		.cfi_endproc
ARM GAS  /tmp/ccdQiHBS.s 			page 160


 4431              	.LFE32:
 4433              		.section	.text.pixel_length,"ax",%progbits
 4434              		.align	1
 4435              		.p2align 2,,3
 4436              		.global	pixel_length
 4437              		.syntax unified
 4438              		.thumb
 4439              		.thumb_func
 4440              		.fpu fpv4-sp-d16
 4442              	pixel_length:
 4443              	.LVL490:
 4444              	.LFB40:
3464:src/display.c **** 
3465:src/display.c **** 
3466:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3467:src/display.c ****        */
3468:src/display.c ****       int pixel_length(const char *s, int smallp)
3469:src/display.c ****       {
 4445              		.loc 1 3469 7 view -0
 4446              		.cfi_startproc
 4447              		@ args = 0, pretend = 0, frame = 0
 4448              		@ frame_needed = 0, uses_anonymous_args = 0
3470:src/display.c **** 	int len = 0;
 4449              		.loc 1 3470 2 view .LVU1341
3471:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4450              		.loc 1 3471 2 view .LVU1342
3469:src/display.c **** 	int len = 0;
 4451              		.loc 1 3469 7 is_stmt 0 view .LVU1343
 4452 0000 70B5     		push	{r4, r5, r6, lr}
 4453              		.cfi_def_cfa_offset 16
 4454              		.cfi_offset 4, -16
 4455              		.cfi_offset 5, -12
 4456              		.cfi_offset 6, -8
 4457              		.cfi_offset 14, -4
3469:src/display.c **** 	int len = 0;
 4458              		.loc 1 3469 7 view .LVU1344
 4459 0002 0446     		mov	r4, r0
3472:src/display.c **** 	while (*s != '\0') {
 4460              		.loc 1 3472 9 view .LVU1345
 4461 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 4462              	.LVL491:
3471:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4463              		.loc 1 3471 34 view .LVU1346
 4464 0006 0E1E     		subs	r6, r1, #0
 4465 0008 18BF     		it	ne
 4466 000a 4FF48076 		movne	r6, #256
 4467              	.LVL492:
 4468              		.loc 1 3472 2 is_stmt 1 view .LVU1347
 4469              		.loc 1 3472 8 view .LVU1348
 4470 000e A0B1     		cbz	r0, .L425
3470:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4471              		.loc 1 3470 6 is_stmt 0 view .LVU1349
 4472 0010 0025     		movs	r5, #0
 4473 0012 06E0     		b	.L423
 4474              	.LVL493:
 4475              	.L421:
3473:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
ARM GAS  /tmp/ccdQiHBS.s 			page 161


3474:src/display.c **** 	  if (s[0] == '\007') {
3475:src/display.c **** 	    len += s[1] & 0x1F;
3476:src/display.c **** 	    s += 3;
3477:src/display.c **** 	    continue;
3478:src/display.c **** 	  }
3479:src/display.c **** #endif
3480:src/display.c **** 	  len += charlengths( (unsigned char) *s++ + offset );
 4476              		.loc 1 3480 11 view .LVU1350
 4477 0014 3044     		add	r0, r0, r6
 4478 0016 FFF7FEFF 		bl	charlengths
 4479              	.LVL494:
 4480              		.loc 1 3480 42 view .LVU1351
 4481 001a 0134     		adds	r4, r4, #1
 4482              	.LVL495:
 4483              		.loc 1 3480 8 view .LVU1352
 4484 001c 0544     		add	r5, r5, r0
 4485              	.LVL496:
3472:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4486              		.loc 1 3472 8 is_stmt 1 view .LVU1353
3472:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4487              		.loc 1 3472 9 is_stmt 0 view .LVU1354
 4488 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3472:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4489              		.loc 1 3472 8 view .LVU1355
 4490 0020 48B1     		cbz	r0, .L418
 4491              	.LVL497:
 4492              	.L423:
3474:src/display.c **** 	    len += s[1] & 0x1F;
 4493              		.loc 1 3474 4 is_stmt 1 view .LVU1356
 4494              		.loc 1 3480 4 view .LVU1357
3474:src/display.c **** 	    len += s[1] & 0x1F;
 4495              		.loc 1 3474 7 is_stmt 0 view .LVU1358
 4496 0022 0728     		cmp	r0, #7
 4497 0024 F6D1     		bne	.L421
3475:src/display.c **** 	    s += 3;
 4498              		.loc 1 3475 6 is_stmt 1 view .LVU1359
3475:src/display.c **** 	    s += 3;
 4499              		.loc 1 3475 18 is_stmt 0 view .LVU1360
 4500 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3472:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4501              		.loc 1 3472 9 view .LVU1361
 4502 0028 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
3475:src/display.c **** 	    s += 3;
 4503              		.loc 1 3475 18 view .LVU1362
 4504 002a 03F01F03 		and	r3, r3, #31
3476:src/display.c **** 	    continue;
 4505              		.loc 1 3476 8 view .LVU1363
 4506 002e 0334     		adds	r4, r4, #3
 4507              	.LVL498:
3475:src/display.c **** 	    s += 3;
 4508              		.loc 1 3475 10 view .LVU1364
 4509 0030 1D44     		add	r5, r5, r3
 4510              	.LVL499:
3476:src/display.c **** 	    continue;
 4511              		.loc 1 3476 6 is_stmt 1 view .LVU1365
3477:src/display.c **** 	  }
 4512              		.loc 1 3477 6 view .LVU1366
ARM GAS  /tmp/ccdQiHBS.s 			page 162


3472:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 4513              		.loc 1 3472 8 view .LVU1367
 4514 0032 0028     		cmp	r0, #0
 4515 0034 F5D1     		bne	.L423
 4516              	.L418:
3481:src/display.c **** 	}
3482:src/display.c **** 	return len;
3483:src/display.c ****       }
 4517              		.loc 1 3483 7 is_stmt 0 view .LVU1368
 4518 0036 2846     		mov	r0, r5
 4519 0038 70BD     		pop	{r4, r5, r6, pc}
 4520              	.LVL500:
 4521              	.L425:
3470:src/display.c **** 	const int offset = smallp ? 256 : 0;
 4522              		.loc 1 3470 6 view .LVU1369
 4523 003a 0546     		mov	r5, r0
3482:src/display.c ****       }
 4524              		.loc 1 3482 2 is_stmt 1 view .LVU1370
 4525              		.loc 1 3483 7 is_stmt 0 view .LVU1371
 4526 003c 2846     		mov	r0, r5
 4527 003e 70BD     		pop	{r4, r5, r6, pc}
 4528              		.loc 1 3483 7 view .LVU1372
 4529              		.cfi_endproc
 4530              	.LFE40:
 4532              		.section	.text.set_status,"ax",%progbits
 4533              		.align	1
 4534              		.p2align 2,,3
 4535              		.syntax unified
 4536              		.thumb
 4537              		.thumb_func
 4538              		.fpu fpv4-sp-d16
 4540              	set_status:
 4541              	.LVL501:
 4542              	.LFB43:
3484:src/display.c **** 
3485:src/display.c **** 
3486:src/display.c ****       /* Determine the pixel length of the string if it were displayed.
3487:src/display.c ****        * If this is larger than the display, return true.
3488:src/display.c ****        */
3489:src/display.c ****       static int string_too_large(const char *s) {
3490:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
3491:src/display.c ****       }
3492:src/display.c ****       static int string_too_large_top(const char *s) {
3493:src/display.c **** 	return pixel_length(s, 0) > BW_TOP+1;
3494:src/display.c ****       }
3495:src/display.c **** 
3496:src/display.c **** 
3497:src/display.c ****       /* Display the given string on the screen.
3498:src/display.c ****        */
3499:src/display.c ****       static void set_status(const char *str) {
 4543              		.loc 1 3499 47 is_stmt 1 view -0
 4544              		.cfi_startproc
 4545              		@ args = 0, pretend = 0, frame = 0
 4546              		@ frame_needed = 0, uses_anonymous_args = 0
3500:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4547              		.loc 1 3500 2 view .LVU1374
 4548              		.loc 1 3500 24 is_stmt 0 view .LVU1375
ARM GAS  /tmp/ccdQiHBS.s 			page 163


 4549 0000 0C4B     		ldr	r3, .L433
 4550              		.loc 1 3500 2 view .LVU1376
 4551 0002 93F91630 		ldrsb	r3, [r3, #22]
 4552 0006 002B     		cmp	r3, #0
3499:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4553              		.loc 1 3499 47 view .LVU1377
 4554 0008 10B5     		push	{r4, lr}
 4555              		.cfi_def_cfa_offset 8
 4556              		.cfi_offset 4, -8
 4557              		.cfi_offset 14, -4
3499:src/display.c **** 	set_status_sized(str, State2.disp_small || string_too_large(str));
 4558              		.loc 1 3499 47 view .LVU1378
 4559 000a 0446     		mov	r4, r0
 4560              		.loc 1 3500 2 view .LVU1379
 4561 000c 05DA     		bge	.L432
 4562              	.LBB365:
 4563              	.LBB366:
3358:src/display.c ****       }
 4564              		.loc 1 3358 2 view .LVU1380
 4565 000e 2046     		mov	r0, r4
3358:src/display.c ****       }
 4566              		.loc 1 3358 2 view .LVU1381
 4567              	.LBE366:
 4568              	.LBE365:
 4569              		.loc 1 3500 2 view .LVU1382
 4570 0010 0121     		movs	r1, #1
 4571              	.LVL502:
 4572              	.LBB372:
 4573              	.LBI365:
3357:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4574              		.loc 1 3357 19 is_stmt 1 view .LVU1383
 4575              	.LBB367:
3358:src/display.c ****       }
 4576              		.loc 1 3358 2 view .LVU1384
 4577              	.LBE367:
 4578              	.LBE372:
3501:src/display.c ****       }
 4579              		.loc 1 3501 7 is_stmt 0 view .LVU1385
 4580 0012 BDE81040 		pop	{r4, lr}
 4581              		.cfi_remember_state
 4582              		.cfi_restore 14
 4583              		.cfi_restore 4
 4584              		.cfi_def_cfa_offset 0
 4585              	.LBB373:
 4586              	.LBB368:
3358:src/display.c ****       }
 4587              		.loc 1 3358 2 view .LVU1386
 4588 0016 FFF7FEBF 		b	s_s_sized.constprop.0
 4589              	.LVL503:
 4590              	.L432:
 4591              		.cfi_restore_state
3358:src/display.c ****       }
 4592              		.loc 1 3358 2 view .LVU1387
 4593              	.LBE368:
 4594              	.LBE373:
 4595              	.LBB374:
 4596              	.LBI374:
ARM GAS  /tmp/ccdQiHBS.s 			page 164


3489:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 4597              		.loc 1 3489 18 is_stmt 1 view .LVU1388
 4598              	.LBB375:
3490:src/display.c ****       }
 4599              		.loc 1 3490 2 view .LVU1389
3490:src/display.c ****       }
 4600              		.loc 1 3490 9 is_stmt 0 view .LVU1390
 4601 001a 0021     		movs	r1, #0
 4602 001c FFF7FEFF 		bl	pixel_length
 4603              	.LVL504:
3490:src/display.c ****       }
 4604              		.loc 1 3490 9 view .LVU1391
 4605              	.LBE375:
 4606              	.LBE374:
3500:src/display.c ****       }
 4607              		.loc 1 3500 2 view .LVU1392
 4608 0020 2C28     		cmp	r0, #44
 4609 0022 D8BF     		it	le
 4610 0024 0021     		movle	r1, #0
 4611              	.LBB376:
 4612              	.LBB369:
3358:src/display.c ****       }
 4613              		.loc 1 3358 2 view .LVU1393
 4614 0026 2046     		mov	r0, r4
 4615              	.LBE369:
 4616              	.LBE376:
3500:src/display.c ****       }
 4617              		.loc 1 3500 2 view .LVU1394
 4618 0028 C8BF     		it	gt
 4619 002a 0121     		movgt	r1, #1
 4620              	.LVL505:
 4621              	.LBB377:
3357:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 4622              		.loc 1 3357 19 is_stmt 1 view .LVU1395
 4623              	.LBB370:
3358:src/display.c ****       }
 4624              		.loc 1 3358 2 view .LVU1396
 4625              	.LBE370:
 4626              	.LBE377:
 4627              		.loc 1 3501 7 is_stmt 0 view .LVU1397
 4628 002c BDE81040 		pop	{r4, lr}
 4629              		.cfi_restore 14
 4630              		.cfi_restore 4
 4631              		.cfi_def_cfa_offset 0
 4632              	.LVL506:
 4633              	.LBB378:
 4634              	.LBB371:
3358:src/display.c ****       }
 4635              		.loc 1 3358 2 view .LVU1398
 4636 0030 FFF7FEBF 		b	s_s_sized.constprop.0
 4637              	.LVL507:
 4638              	.L434:
3358:src/display.c ****       }
 4639              		.loc 1 3358 2 view .LVU1399
 4640              		.align	2
 4641              	.L433:
 4642 0034 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccdQiHBS.s 			page 165


 4643              	.LBE371:
 4644              	.LBE378:
 4645              		.cfi_endproc
 4646              	.LFE43:
 4648              		.section	.text.set_x_dn,"ax",%progbits
 4649              		.align	1
 4650              		.p2align 2,,3
 4651              		.global	set_x_dn
 4652              		.syntax unified
 4653              		.thumb
 4654              		.thumb_func
 4655              		.fpu fpv4-sp-d16
 4657              	set_x_dn:
 4658              	.LVL508:
 4659              	.LFB27:
1926:src/display.c **** 	char x[50], *obp = x;
 4660              		.loc 1 1926 67 is_stmt 1 view -0
 4661              		.cfi_startproc
 4662              		@ args = 0, pretend = 0, frame = 152
 4663              		@ frame_needed = 0, uses_anonymous_args = 0
1927:src/display.c **** 	int odig = 0;
 4664              		.loc 1 1927 2 view .LVU1401
1926:src/display.c **** 	char x[50], *obp = x;
 4665              		.loc 1 1926 67 is_stmt 0 view .LVU1402
 4666 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4667              		.cfi_def_cfa_offset 36
 4668              		.cfi_offset 4, -36
 4669              		.cfi_offset 5, -32
 4670              		.cfi_offset 6, -28
 4671              		.cfi_offset 7, -24
 4672              		.cfi_offset 8, -20
 4673              		.cfi_offset 9, -16
 4674              		.cfi_offset 10, -12
 4675              		.cfi_offset 11, -8
 4676              		.cfi_offset 14, -4
 4677 0004 A7B0     		sub	sp, sp, #156
 4678              		.cfi_def_cfa_offset 192
 4679              	.LVL509:
1928:src/display.c **** 	int show_exp = 0;
 4680              		.loc 1 1928 2 is_stmt 1 view .LVU1403
1929:src/display.c **** 	int j;
 4681              		.loc 1 1929 2 view .LVU1404
1930:src/display.c **** 	char mantissa[64];
 4682              		.loc 1 1930 2 view .LVU1405
1931:src/display.c **** 	int exp = 0;
 4683              		.loc 1 1931 2 view .LVU1406
1932:src/display.c **** 	char *p = mantissa;
 4684              		.loc 1 1932 2 view .LVU1407
1933:src/display.c **** 	char *r;
 4685              		.loc 1 1933 2 view .LVU1408
1934:src/display.c **** 	const char *q;
 4686              		.loc 1 1934 2 view .LVU1409
1935:src/display.c **** 	int count, i;
 4687              		.loc 1 1935 2 view .LVU1410
1936:src/display.c **** 	int extra_digits = 0;
 4688              		.loc 1 1936 2 view .LVU1411
1937:src/display.c **** #ifdef INCLUDE_SIGFIG_MODE
ARM GAS  /tmp/ccdQiHBS.s 			page 166


 4689              		.loc 1 1937 2 view .LVU1412
1939:src/display.c **** 	int dispdigs;
 4690              		.loc 1 1939 2 view .LVU1413
1940:src/display.c **** 	int mode = get_dispmode_digs(&dispdigs);
 4691              		.loc 1 1940 2 view .LVU1414
1941:src/display.c **** #else
 4692              		.loc 1 1941 2 view .LVU1415
1926:src/display.c **** 	char x[50], *obp = x;
 4693              		.loc 1 1926 67 is_stmt 0 view .LVU1416
 4694 0006 8246     		mov	r10, r0
1941:src/display.c **** #else
 4695              		.loc 1 1941 13 view .LVU1417
 4696 0008 08A8     		add	r0, sp, #32
 4697              	.LVL510:
1926:src/display.c **** 	char x[50], *obp = x;
 4698              		.loc 1 1926 67 view .LVU1418
 4699 000a 0C46     		mov	r4, r1
 4700 000c 0192     		str	r2, [sp, #4]
1941:src/display.c **** #else
 4701              		.loc 1 1941 13 view .LVU1419
 4702 000e FFF7FEFF 		bl	get_dispmode_digs
 4703              	.LVL511:
1941:src/display.c **** #else
 4704              		.loc 1 1941 13 view .LVU1420
 4705 0012 0546     		mov	r5, r0
 4706              	.LVL512:
1946:src/display.c **** 	int negative = 0;
 4707              		.loc 1 1946 2 is_stmt 1 view .LVU1421
1947:src/display.c **** 	int trimzeros = 0;
 4708              		.loc 1 1947 2 view .LVU1422
1948:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 4709              		.loc 1 1948 2 view .LVU1423
1956:src/display.c **** #endif
 4710              		.loc 1 1956 2 view .LVU1424
1959:src/display.c **** #if defined(INCLUDE_YREG_CODE)
 4711              		.loc 1 1959 2 view .LVU1425
 4712 0014 FFF7FEFF 		bl	set_separator_decimal_modes
 4713              	.LVL513:
1961:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4714              		.loc 1 1961 2 view .LVU1426
1961:src/display.c **** 	  if (!State2.smode && ! State2.cmplx) {
 4715              		.loc 1 1961 5 is_stmt 0 view .LVU1427
 4716 0018 002C     		cmp	r4, #0
 4717 001a 00F08781 		beq	.L436
 4718              	.L439:
1986:src/display.c **** 	  return;
 4719              		.loc 1 1986 2 is_stmt 1 view .LVU1428
1986:src/display.c **** 	  return;
 4720              		.loc 1 1986 6 is_stmt 0 view .LVU1429
 4721 001e 9AF80800 		ldrb	r0, [r10, #8]	@ zero_extendqisi2
 4722 0022 2146     		mov	r1, r4
 4723 0024 FFF7FEFF 		bl	check_special_dn.isra.0
 4724              	.LVL514:
1986:src/display.c **** 	  return;
 4725              		.loc 1 1986 5 view .LVU1430
 4726 0028 8146     		mov	r9, r0
 4727 002a 0028     		cmp	r0, #0
ARM GAS  /tmp/ccdQiHBS.s 			page 167


 4728 002c 40F07681 		bne	.L435
1989:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4729              		.loc 1 1989 2 is_stmt 1 view .LVU1431
1989:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4730              		.loc 1 1989 12 is_stmt 0 view .LVU1432
 4731 0030 CC4E     		ldr	r6, .L687
1989:src/display.c **** 	  decNumberNormalize(z, z, &Ctx);
 4732              		.loc 1 1989 5 view .LVU1433
 4733 0032 737C     		ldrb	r3, [r6, #17]	@ zero_extendqisi2
 4734 0034 012B     		cmp	r3, #1
 4735 0036 00F0FB82 		beq	.L664
1932:src/display.c **** 	char *p = mantissa;
 4736              		.loc 1 1932 6 view .LVU1434
 4737 003a 8046     		mov	r8, r0
 4738              	.LVL515:
 4739              	.L442:
1995:src/display.c **** 
 4740              		.loc 1 1995 2 is_stmt 1 view .LVU1435
 4741 003c 09AF     		add	r7, sp, #36
 4742              	.LVL516:
1995:src/display.c **** 
 4743              		.loc 1 1995 2 is_stmt 0 view .LVU1436
 4744 003e 3846     		mov	r0, r7
 4745 0040 3222     		movs	r2, #50
 4746 0042 0021     		movs	r1, #0
 4747 0044 FFF7FEFF 		bl	xset
 4748              	.LVL517:
1997:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4749              		.loc 1 1997 2 is_stmt 1 view .LVU1437
1997:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4750              		.loc 1 1997 6 is_stmt 0 view .LVU1438
 4751 0048 5046     		mov	r0, r10
 4752 004a FFF7FEFF 		bl	dn_eq0
 4753              	.LVL518:
1997:src/display.c **** 	  if (decNumberIsNegative(z) && get_user_flag(NAN_FLAG)) {
 4754              		.loc 1 1997 5 view .LVU1439
 4755 004e 0028     		cmp	r0, #0
 4756 0050 00F06781 		beq	.L443
1998:src/display.c **** 	    x[0] = '-';
 4757              		.loc 1 1998 4 is_stmt 1 view .LVU1440
1998:src/display.c **** 	    x[0] = '-';
 4758              		.loc 1 1998 7 is_stmt 0 view .LVU1441
 4759 0054 9AF90830 		ldrsb	r3, [r10, #8]
 4760 0058 002B     		cmp	r3, #0
 4761 005a C0F21083 		blt	.L665
 4762              	.L444:
2002:src/display.c **** 	} else
 4763              		.loc 1 2002 6 is_stmt 1 view .LVU1442
2002:src/display.c **** 	} else
 4764              		.loc 1 2002 11 is_stmt 0 view .LVU1443
 4765 005e 3023     		movs	r3, #48
 4766 0060 8DF82430 		strb	r3, [sp, #36]
 4767              	.L445:
2006:src/display.c **** 	  show_x(x, exp);
 4768              		.loc 1 2006 2 is_stmt 1 view .LVU1444
2006:src/display.c **** 	  show_x(x, exp);
 4769              		.loc 1 2006 12 is_stmt 0 view .LVU1445
ARM GAS  /tmp/ccdQiHBS.s 			page 168


 4770 0064 96F811B0 		ldrb	fp, [r6, #17]	@ zero_extendqisi2
2006:src/display.c **** 	  show_x(x, exp);
 4771              		.loc 1 2006 5 view .LVU1446
 4772 0068 BBF1010F 		cmp	fp, #1
 4773 006c 00F04883 		beq	.L666
2012:src/display.c **** 	  //  ALL mode: fill the display
 4774              		.loc 1 2012 2 is_stmt 1 view .LVU1447
2012:src/display.c **** 	  //  ALL mode: fill the display
 4775              		.loc 1 2012 5 is_stmt 0 view .LVU1448
 4776 0070 002D     		cmp	r5, #0
 4777 0072 40F08181 		bne	.L667
2014:src/display.c **** 	else
 4778              		.loc 1 2014 4 is_stmt 1 view .LVU1449
2014:src/display.c **** 	else
 4779              		.loc 1 2014 25 is_stmt 0 view .LVU1450
 4780 0076 019E     		ldr	r6, [sp, #4]
 4781              	.LBB400:
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4782              		.loc 1 2021 11 view .LVU1451
 4783 0078 089B     		ldr	r3, [sp, #32]
 4784              	.LBE400:
2014:src/display.c **** 	else
 4785              		.loc 1 2014 25 view .LVU1452
 4786 007a 3168     		ldr	r1, [r6]
 4787              	.LBB401:
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4788              		.loc 1 2021 11 view .LVU1453
 4789 007c 2A46     		mov	r2, r5
 4790 007e 5046     		mov	r0, r10
 4791              	.LBE401:
2014:src/display.c **** 	else
 4792              		.loc 1 2014 25 view .LVU1454
 4793 0080 4D1E     		subs	r5, r1, #1
 4794              	.LVL519:
 4795              	.LBB402:
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4796              		.loc 1 2021 11 view .LVU1455
 4797 0082 07A9     		add	r1, sp, #28
 4798              	.LBE402:
2014:src/display.c **** 	else
 4799              		.loc 1 2014 7 view .LVU1456
 4800 0084 0795     		str	r5, [sp, #28]
2018:src/display.c **** 	  int orig_mode = mode;
 4801              		.loc 1 2018 2 is_stmt 1 view .LVU1457
 4802              	.LBB403:
2019:src/display.c **** 
 4803              		.loc 1 2019 4 view .LVU1458
 4804              	.LVL520:
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4805              		.loc 1 2021 4 view .LVU1459
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4806              		.loc 1 2021 11 is_stmt 0 view .LVU1460
 4807 0086 FFF7FEFF 		bl	std_round_fix
 4808              	.LVL521:
2026:src/display.c ****  	}
 4809              		.loc 1 2026 27 view .LVU1461
 4810 008a 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccdQiHBS.s 			page 169


 4811 008c 013B     		subs	r3, r3, #1
2026:src/display.c ****  	}
 4812              		.loc 1 2026 9 view .LVU1462
 4813 008e 0793     		str	r3, [sp, #28]
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 4814              		.loc 1 2024 16 view .LVU1463
 4815 0090 0123     		movs	r3, #1
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 4816              		.loc 1 2021 11 view .LVU1464
 4817 0092 0546     		mov	r5, r0
 4818              	.LVL522:
2022:src/display.c **** 	    // allow zeros to be trimmed
 4819              		.loc 1 2022 4 is_stmt 1 view .LVU1465
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 4820              		.loc 1 2024 6 view .LVU1466
2025:src/display.c **** 	    dd = *display_digits - 1;
 4821              		.loc 1 2025 4 view .LVU1467
2026:src/display.c ****  	}
 4822              		.loc 1 2026 6 view .LVU1468
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 4823              		.loc 1 2024 16 is_stmt 0 view .LVU1469
 4824 0094 0493     		str	r3, [sp, #16]
 4825              	.LVL523:
 4826              	.L566:
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 4827              		.loc 1 2024 16 view .LVU1470
 4828              	.LBE403:
2038:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4829              		.loc 1 2038 2 is_stmt 1 view .LVU1471
 4830 0096 0DF1580B 		add	fp, sp, #88
 4831              	.LVL524:
2038:src/display.c **** 	mantissa[sizeof(mantissa)-1] = '\0';
 4832              		.loc 1 2038 2 is_stmt 0 view .LVU1472
 4833 009a 3F22     		movs	r2, #63
 4834 009c 3021     		movs	r1, #48
 4835 009e 5846     		mov	r0, fp
 4836 00a0 FFF7FEFF 		bl	xset
 4837              	.LVL525:
2039:src/display.c **** 
 4838              		.loc 1 2039 2 is_stmt 1 view .LVU1473
2039:src/display.c **** 
 4839              		.loc 1 2039 31 is_stmt 0 view .LVU1474
 4840 00a4 0023     		movs	r3, #0
2041:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4841              		.loc 1 2041 6 view .LVU1475
 4842 00a6 4521     		movs	r1, #69
 4843 00a8 3846     		mov	r0, r7
2039:src/display.c **** 
 4844              		.loc 1 2039 31 view .LVU1476
 4845 00aa 8DF89730 		strb	r3, [sp, #151]
2041:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4846              		.loc 1 2041 2 is_stmt 1 view .LVU1477
2041:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 4847              		.loc 1 2041 6 is_stmt 0 view .LVU1478
 4848 00ae FFF7FEFF 		bl	find_char
 4849              	.LVL526:
2043:src/display.c **** 	if (q == NULL) exp = 0;
ARM GAS  /tmp/ccdQiHBS.s 			page 170


 4850              		.loc 1 2043 2 is_stmt 1 view .LVU1479
2043:src/display.c **** 	if (q == NULL) exp = 0;
 4851              		.loc 1 2043 5 is_stmt 0 view .LVU1480
 4852 00b2 0646     		mov	r6, r0
 4853 00b4 0028     		cmp	r0, #0
 4854 00b6 00F06D81 		beq	.L668
 4855              	.L461:
2046:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4856              		.loc 1 2046 4 is_stmt 1 view .LVU1481
2046:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4857              		.loc 1 2046 10 is_stmt 0 view .LVU1482
 4858 00ba 701C     		adds	r0, r6, #1
 4859              	.LVL527:
2046:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4860              		.loc 1 2046 10 view .LVU1483
 4861 00bc FFF7FEFF 		bl	s_to_i
 4862              	.LVL528:
2047:src/display.c **** 	}
 4863              		.loc 1 2047 7 view .LVU1484
 4864 00c0 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 4865 00c2 442B     		cmp	r3, #68
2046:src/display.c **** 	  if (*q == 'D') exp = -exp;
 4866              		.loc 1 2046 10 view .LVU1485
 4867 00c4 0646     		mov	r6, r0
 4868              	.LVL529:
2047:src/display.c **** 	}
 4869              		.loc 1 2047 4 is_stmt 1 view .LVU1486
2047:src/display.c **** 	}
 4870              		.loc 1 2047 19 view .LVU1487
2047:src/display.c **** 	}
 4871              		.loc 1 2047 23 is_stmt 0 view .LVU1488
 4872 00c6 08BF     		it	eq
 4873 00c8 4642     		rsbeq	r6, r0, #0
 4874              	.LVL530:
 4875              	.L462:
2055:src/display.c **** 	if (!res) {
 4876              		.loc 1 2055 2 is_stmt 1 view .LVU1489
2055:src/display.c **** 	if (!res) {
 4877              		.loc 1 2055 12 view .LVU1490
2055:src/display.c **** 	if (!res) {
 4878              		.loc 1 2055 2 is_stmt 0 view .LVU1491
 4879 00ca 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4880 00ce 202B     		cmp	r3, #32
2055:src/display.c **** 	if (!res) {
 4881              		.loc 1 2055 8 view .LVU1492
 4882 00d0 B846     		mov	r8, r7
2055:src/display.c **** 	if (!res) {
 4883              		.loc 1 2055 2 view .LVU1493
 4884 00d2 03D1     		bne	.L463
 4885              	.LVL531:
 4886              	.L464:
2055:src/display.c **** 	if (!res) {
 4887              		.loc 1 2055 27 is_stmt 1 discriminator 3 view .LVU1494
2055:src/display.c **** 	if (!res) {
 4888              		.loc 1 2055 23 discriminator 3 view .LVU1495
2055:src/display.c **** 	if (!res) {
 4889              		.loc 1 2055 12 discriminator 3 view .LVU1496
ARM GAS  /tmp/ccdQiHBS.s 			page 171


2055:src/display.c **** 	if (!res) {
 4890              		.loc 1 2055 2 is_stmt 0 discriminator 3 view .LVU1497
 4891 00d4 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4892              	.LVL532:
2055:src/display.c **** 	if (!res) {
 4893              		.loc 1 2055 2 discriminator 3 view .LVU1498
 4894 00d8 202B     		cmp	r3, #32
 4895 00da FBD0     		beq	.L464
 4896              	.LVL533:
 4897              	.L463:
2056:src/display.c **** 	  CLR_EXP_SIGN;
 4898              		.loc 1 2056 2 is_stmt 1 view .LVU1499
2056:src/display.c **** 	  CLR_EXP_SIGN;
 4899              		.loc 1 2056 5 is_stmt 0 view .LVU1500
 4900 00dc 002C     		cmp	r4, #0
 4901 00de 00F0D982 		beq	.L669
 4902              	.L465:
2060:src/display.c **** 	  negative = 1;
 4903              		.loc 1 2060 2 is_stmt 1 view .LVU1501
2060:src/display.c **** 	  negative = 1;
 4904              		.loc 1 2060 6 is_stmt 0 view .LVU1502
 4905 00e2 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
2060:src/display.c **** 	  negative = 1;
 4906              		.loc 1 2060 5 view .LVU1503
 4907 00e6 2D2B     		cmp	r3, #45
 4908 00e8 00F0E481 		beq	.L670
2063:src/display.c **** 	  q++;
 4909              		.loc 1 2063 9 is_stmt 1 view .LVU1504
2063:src/display.c **** 	  q++;
 4910              		.loc 1 2063 12 is_stmt 0 view .LVU1505
 4911 00ec 2B2B     		cmp	r3, #43
 4912 00ee 00F0BF82 		beq	.L671
1947:src/display.c **** 	int trimzeros = 0;
 4913              		.loc 1 1947 6 view .LVU1506
 4914 00f2 0022     		movs	r2, #0
 4915 00f4 0392     		str	r2, [sp, #12]
 4916              	.LVL534:
 4917              	.L467:
2065:src/display.c **** 	if (*q == '.') {
 4918              		.loc 1 2065 9 is_stmt 1 discriminator 1 view .LVU1507
2065:src/display.c **** 	if (*q == '.') {
 4919              		.loc 1 2065 2 is_stmt 0 discriminator 1 view .LVU1508
 4920 00f6 302B     		cmp	r3, #48
 4921 00f8 03D1     		bne	.L469
 4922              	.LVL535:
 4923              	.L468:
2065:src/display.c **** 	if (*q == '.') {
 4924              		.loc 1 2065 24 is_stmt 1 discriminator 2 view .LVU1509
2065:src/display.c **** 	if (*q == '.') {
 4925              		.loc 1 2065 20 discriminator 2 view .LVU1510
2065:src/display.c **** 	if (*q == '.') {
 4926              		.loc 1 2065 9 discriminator 2 view .LVU1511
 4927 00fa 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 4928              	.LVL536:
2065:src/display.c **** 	if (*q == '.') {
 4929              		.loc 1 2065 2 is_stmt 0 discriminator 2 view .LVU1512
 4930 00fe 302B     		cmp	r3, #48
ARM GAS  /tmp/ccdQiHBS.s 			page 172


 4931 0100 FBD0     		beq	.L468
 4932              	.LVL537:
 4933              	.L469:
2066:src/display.c **** 	  do
 4934              		.loc 1 2066 2 is_stmt 1 view .LVU1513
2066:src/display.c **** 	  do
 4935              		.loc 1 2066 5 is_stmt 0 view .LVU1514
 4936 0102 2E2B     		cmp	r3, #46
 4937 0104 00F0BE81 		beq	.L672
2073:src/display.c **** 	    *p++ = *q++;
 4938              		.loc 1 2073 4 is_stmt 1 view .LVU1515
2073:src/display.c **** 	    *p++ = *q++;
 4939              		.loc 1 2073 7 is_stmt 0 view .LVU1516
 4940 0108 A3F13002 		sub	r2, r3, #48
 4941 010c 092A     		cmp	r2, #9
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4942              		.loc 1 2074 6 is_stmt 1 view .LVU1517
 4943              	.LVL538:
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4944              		.loc 1 2074 15 is_stmt 0 view .LVU1518
 4945 010e 9CBF     		itt	ls
 4946 0110 08F10108 		addls	r8, r8, #1
 4947              	.LVL539:
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4948              		.loc 1 2074 11 view .LVU1519
 4949 0114 8DF85830 		strbls	r3, [sp, #88]
2075:src/display.c **** 	    *p++ = *q++;
 4950              		.loc 1 2075 11 view .LVU1520
 4951 0118 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
2075:src/display.c **** 	    *p++ = *q++;
 4952              		.loc 1 2075 10 view .LVU1521
 4953 011c A2F13003 		sub	r3, r2, #48
2074:src/display.c **** 	  while (*q >= '0' && *q <= '9') {
 4954              		.loc 1 2074 8 view .LVU1522
 4955 0120 94BF     		ite	ls
 4956 0122 0DF15901 		addls	r1, sp, #89
1933:src/display.c **** 	char *r;
 4957              		.loc 1 1933 8 view .LVU1523
 4958 0126 5946     		movhi	r1, fp
 4959              	.LVL540:
2075:src/display.c **** 	    *p++ = *q++;
 4960              		.loc 1 2075 10 is_stmt 1 view .LVU1524
 4961 0128 092B     		cmp	r3, #9
 4962 012a 0ED8     		bhi	.L475
 4963 012c A6EB0800 		sub	r0, r6, r8
 4964 0130 08F10103 		add	r3, r8, #1
 4965              	.L476:
 4966              	.LVL541:
2076:src/display.c **** 	    exp++;
 4967              		.loc 1 2076 6 view .LVU1525
2076:src/display.c **** 	    exp++;
 4968              		.loc 1 2076 11 is_stmt 0 view .LVU1526
 4969 0134 01F8012B 		strb	r2, [r1], #1
 4970              	.LVL542:
2076:src/display.c **** 	    exp++;
 4971              		.loc 1 2076 15 view .LVU1527
 4972 0138 9846     		mov	r8, r3
ARM GAS  /tmp/ccdQiHBS.s 			page 173


 4973              	.LVL543:
2077:src/display.c **** 	  }
 4974              		.loc 1 2077 6 is_stmt 1 view .LVU1528
 4975 013a C618     		adds	r6, r0, r3
 4976              	.LVL544:
2075:src/display.c **** 	    *p++ = *q++;
 4977              		.loc 1 2075 10 view .LVU1529
2075:src/display.c **** 	    *p++ = *q++;
 4978              		.loc 1 2075 11 is_stmt 0 view .LVU1530
 4979 013c 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 4980              	.LVL545:
2075:src/display.c **** 	    *p++ = *q++;
 4981              		.loc 1 2075 10 view .LVU1531
 4982 0140 A2F1300C 		sub	ip, r2, #48
 4983 0144 BCF1090F 		cmp	ip, #9
 4984 0148 F4D9     		bls	.L476
 4985              	.LVL546:
 4986              	.L475:
2079:src/display.c **** 	    q++;
 4987              		.loc 1 2079 4 is_stmt 1 view .LVU1532
2079:src/display.c **** 	    q++;
 4988              		.loc 1 2079 7 is_stmt 0 view .LVU1533
 4989 014a 2E2A     		cmp	r2, #46
 4990 014c 00F07E82 		beq	.L673
 4991              	.LVL547:
 4992              	.L472:
2086:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4993              		.loc 1 2086 2 is_stmt 1 view .LVU1534
2087:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 4994              		.loc 1 2087 12 is_stmt 0 view .LVU1535
 4995 0150 019B     		ldr	r3, [sp, #4]
 4996 0152 079A     		ldr	r2, [sp, #28]
 4997 0154 1B68     		ldr	r3, [r3]
 4998 0156 0293     		str	r3, [sp, #8]
2086:src/display.c **** 	  if (exp > (*display_digits - 1) || exp < -dd)
 4999              		.loc 1 2086 5 view .LVU1536
 5000 0158 012D     		cmp	r5, #1
 5001 015a 00F08381 		beq	.L478
 5002              	.LVL548:
 5003              	.L663:
2088:src/display.c **** 	  else {
 5004              		.loc 1 2088 35 view .LVU1537
 5005 015e 0021     		movs	r1, #0
 5006              	.LVL549:
 5007              	.L479:
2100:src/display.c **** 	if (*p >= '5') {	// Round up
 5008              		.loc 1 2100 2 is_stmt 1 view .LVU1538
 5009 0160 02F1010E 		add	lr, r2, #1
2100:src/display.c **** 	if (*p >= '5') {	// Round up
 5010              		.loc 1 2100 35 is_stmt 0 view .LVU1539
 5011 0164 7144     		add	r1, r1, lr
2100:src/display.c **** 	if (*p >= '5') {	// Round up
 5012              		.loc 1 2100 4 view .LVU1540
 5013 0166 0BEB0103 		add	r3, fp, r1
 5014              	.LVL550:
2101:src/display.c **** 	  *p = '0';
 5015              		.loc 1 2101 2 is_stmt 1 view .LVU1541
ARM GAS  /tmp/ccdQiHBS.s 			page 174


2101:src/display.c **** 	  *p = '0';
 5016              		.loc 1 2101 6 is_stmt 0 view .LVU1542
 5017 016a 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
2101:src/display.c **** 	  *p = '0';
 5018              		.loc 1 2101 5 view .LVU1543
 5019 016e 3428     		cmp	r0, #52
 5020 0170 26D9     		bls	.L484
2102:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5021              		.loc 1 2102 4 is_stmt 1 view .LVU1544
2102:src/display.c **** 	  for (r = mantissa; *r == '9'; r++);
 5022              		.loc 1 2102 7 is_stmt 0 view .LVU1545
 5023 0172 3020     		movs	r0, #48
 5024 0174 0BF80100 		strb	r0, [fp, r1]
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5025              		.loc 1 2103 4 is_stmt 1 view .LVU1546
 5026              	.LVL551:
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5027              		.loc 1 2103 23 view .LVU1547
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5028              		.loc 1 2103 4 is_stmt 0 view .LVU1548
 5029 0178 9DF85800 		ldrb	r0, [sp, #88]	@ zero_extendqisi2
 5030 017c 3928     		cmp	r0, #57
 5031 017e 40F0D783 		bne	.L485
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5032              		.loc 1 2103 11 view .LVU1549
 5033 0182 5846     		mov	r0, fp
 5034              	.LVL552:
 5035              	.L486:
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5036              		.loc 1 2103 38 is_stmt 1 discriminator 3 view .LVU1550
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5037              		.loc 1 2103 34 discriminator 3 view .LVU1551
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5038              		.loc 1 2103 23 discriminator 3 view .LVU1552
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5039              		.loc 1 2103 4 is_stmt 0 discriminator 3 view .LVU1553
 5040 0184 10F801CF 		ldrb	ip, [r0, #1]!	@ zero_extendqisi2
 5041              	.LVL553:
2103:src/display.c **** 	  if (r == p) {   // Special case 9.9999999
 5042              		.loc 1 2103 4 discriminator 3 view .LVU1554
 5043 0188 BCF1390F 		cmp	ip, #57
 5044 018c FAD0     		beq	.L486
2104:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5045              		.loc 1 2104 4 is_stmt 1 view .LVU1555
2104:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5046              		.loc 1 2104 7 is_stmt 0 view .LVU1556
 5047 018e 8342     		cmp	r3, r0
 5048 0190 00F01681 		beq	.L674
 5049              	.LVL554:
 5050              	.L564:
2113:src/display.c **** 	      *p = '0';
 5051              		.loc 1 2113 12 is_stmt 1 view .LVU1557
2113:src/display.c **** 	      *p = '0';
 5052              		.loc 1 2113 13 is_stmt 0 view .LVU1558
 5053 0194 13F801CC 		ldrb	ip, [r3, #-1]	@ zero_extendqisi2
2113:src/display.c **** 	      *p = '0';
 5054              		.loc 1 2113 12 view .LVU1559
ARM GAS  /tmp/ccdQiHBS.s 			page 175


 5055 0198 BCF1390F 		cmp	ip, #57
 5056 019c 03F1FF30 		add	r0, r3, #-1
 5057              	.LVL555:
2113:src/display.c **** 	      *p = '0';
 5058              		.loc 1 2113 12 view .LVU1560
 5059 01a0 08D1     		bne	.L489
2114:src/display.c **** 	    (*p)++;
 5060              		.loc 1 2114 11 view .LVU1561
 5061 01a2 4FF0300E 		mov	lr, #48
 5062              	.L488:
2114:src/display.c **** 	    (*p)++;
 5063              		.loc 1 2114 8 is_stmt 1 view .LVU1562
2114:src/display.c **** 	    (*p)++;
 5064              		.loc 1 2114 11 is_stmt 0 view .LVU1563
 5065 01a6 80F800E0 		strb	lr, [r0]
2113:src/display.c **** 	      *p = '0';
 5066              		.loc 1 2113 12 is_stmt 1 view .LVU1564
 5067              	.LVL556:
2113:src/display.c **** 	      *p = '0';
 5068              		.loc 1 2113 13 is_stmt 0 view .LVU1565
 5069 01aa 10F801CD 		ldrb	ip, [r0, #-1]!	@ zero_extendqisi2
 5070              	.LVL557:
2113:src/display.c **** 	      *p = '0';
 5071              		.loc 1 2113 12 view .LVU1566
 5072 01ae BCF1390F 		cmp	ip, #57
 5073 01b2 F8D0     		beq	.L488
 5074              	.L489:
2115:src/display.c **** 	  }
 5075              		.loc 1 2115 6 is_stmt 1 view .LVU1567
2115:src/display.c **** 	  }
 5076              		.loc 1 2115 10 is_stmt 0 view .LVU1568
 5077 01b4 0CF1010C 		add	ip, ip, #1
 5078 01b8 80F800C0 		strb	ip, [r0]
 5079              	.LVL558:
 5080              	.L662:
2115:src/display.c **** 	  }
 5081              		.loc 1 2115 10 view .LVU1569
 5082 01bc 1BF80100 		ldrb	r0, [fp, r1]	@ zero_extendqisi2
 5083              	.L484:
2120:src/display.c **** 
 5084              		.loc 1 2120 2 is_stmt 1 view .LVU1570
 5085              	.LVL559:
2120:src/display.c **** 
 5086              		.loc 1 2120 45 view .LVU1571
2120:src/display.c **** 
 5087              		.loc 1 2120 2 is_stmt 0 view .LVU1572
 5088 01c0 28B1     		cbz	r0, .L495
 5089              	.LVL560:
 5090              	.L563:
2120:src/display.c **** 
 5091              		.loc 1 2120 62 view .LVU1573
 5092 01c2 3020     		movs	r0, #48
 5093              	.L496:
2120:src/display.c **** 
 5094              		.loc 1 2120 68 is_stmt 1 discriminator 3 view .LVU1574
2120:src/display.c **** 
 5095              		.loc 1 2120 57 discriminator 3 view .LVU1575
ARM GAS  /tmp/ccdQiHBS.s 			page 176


 5096              	.LVL561:
2120:src/display.c **** 
 5097              		.loc 1 2120 62 is_stmt 0 discriminator 3 view .LVU1576
 5098 01c4 03F8010B 		strb	r0, [r3], #1
 5099              	.LVL562:
2120:src/display.c **** 
 5100              		.loc 1 2120 45 is_stmt 1 discriminator 3 view .LVU1577
2120:src/display.c **** 
 5101              		.loc 1 2120 2 is_stmt 0 discriminator 3 view .LVU1578
 5102 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5103 01ca 0029     		cmp	r1, #0
 5104 01cc FAD1     		bne	.L496
 5105              	.L495:
2122:src/display.c **** 	switch (mode) {
 5106              		.loc 1 2122 2 is_stmt 1 view .LVU1579
 5107              	.LVL563:
2123:src/display.c **** 	default:
 5108              		.loc 1 2123 2 view .LVU1580
 5109 01ce 022D     		cmp	r5, #2
 5110 01d0 00F07681 		beq	.L533
 5111 01d4 032D     		cmp	r5, #3
 5112 01d6 00F01881 		beq	.L498
 5113 01da 012D     		cmp	r5, #1
 5114 01dc 00F0F081 		beq	.L499
2126:src/display.c **** 	  if (count != *display_digits)
 5115              		.loc 1 2126 4 view .LVU1581
 5116              	.LVL564:
2126:src/display.c **** 	  if (count != *display_digits)
 5117              		.loc 1 2126 34 view .LVU1582
2126:src/display.c **** 	  if (count != *display_digits)
 5118              		.loc 1 2126 42 is_stmt 0 view .LVU1583
 5119 01e0 0298     		ldr	r0, [sp, #8]
 5120 01e2 26AB     		add	r3, sp, #152
 5121 01e4 0344     		add	r3, r3, r0
2126:src/display.c **** 	  if (count != *display_digits)
 5122              		.loc 1 2126 4 view .LVU1584
 5123 01e6 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 5124 01ea 302B     		cmp	r3, #48
 5125 01ec 40F09883 		bne	.L579
 5126 01f0 411E     		subs	r1, r0, #1
 5127 01f2 5944     		add	r1, r1, fp
 5128              	.LVL565:
 5129              	.L503:
2126:src/display.c **** 	  if (count != *display_digits)
 5130              		.loc 1 2126 66 is_stmt 1 discriminator 3 view .LVU1585
2126:src/display.c **** 	  if (count != *display_digits)
 5131              		.loc 1 2126 58 discriminator 3 view .LVU1586
2126:src/display.c **** 	  if (count != *display_digits)
 5132              		.loc 1 2126 42 is_stmt 0 discriminator 3 view .LVU1587
 5133 01f4 11F80159 		ldrb	r5, [r1], #-1	@ zero_extendqisi2
2126:src/display.c **** 	  if (count != *display_digits)
 5134              		.loc 1 2126 4 discriminator 3 view .LVU1588
 5135 01f8 302D     		cmp	r5, #48
 5136 01fa 0346     		mov	r3, r0
2126:src/display.c **** 	  if (count != *display_digits)
 5137              		.loc 1 2126 63 discriminator 3 view .LVU1589
 5138 01fc 00F1FF30 		add	r0, r0, #-1
ARM GAS  /tmp/ccdQiHBS.s 			page 177


 5139              	.LVL566:
2126:src/display.c **** 	  if (count != *display_digits)
 5140              		.loc 1 2126 34 is_stmt 1 discriminator 3 view .LVU1590
2126:src/display.c **** 	  if (count != *display_digits)
 5141              		.loc 1 2126 4 is_stmt 0 discriminator 3 view .LVU1591
 5142 0200 F8D0     		beq	.L503
2127:src/display.c **** 	    count++;
 5143              		.loc 1 2127 4 is_stmt 1 view .LVU1592
2127:src/display.c **** 	    count++;
 5144              		.loc 1 2127 7 is_stmt 0 view .LVU1593
 5145 0202 0299     		ldr	r1, [sp, #8]
 5146 0204 8842     		cmp	r0, r1
 5147 0206 08BF     		it	eq
 5148 0208 0B46     		moveq	r3, r1
 5149              	.LVL567:
 5150              	.L502:
2130:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5151              		.loc 1 2130 4 is_stmt 1 view .LVU1594
2130:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5152              		.loc 1 2130 7 is_stmt 0 view .LVU1595
 5153 020a 0299     		ldr	r1, [sp, #8]
 5154 020c 8E42     		cmp	r6, r1
 5155 020e 80F20E81 		bge	.L504
2130:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5156              		.loc 1 2130 47 discriminator 1 view .LVU1596
 5157 0212 591A     		subs	r1, r3, r1
2130:src/display.c **** 	    switch ((exp % 3) * UState.fixeng) {
 5158              		.loc 1 2130 31 discriminator 1 view .LVU1597
 5159 0214 B142     		cmp	r1, r6
 5160 0216 00F30A81 		bgt	.L504
2155:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5161              		.loc 1 2155 11 is_stmt 1 view .LVU1598
2155:src/display.c **** 	    for(i=0; i<=exp; i++) {
 5162              		.loc 1 2155 14 is_stmt 0 view .LVU1599
 5163 021a 002E     		cmp	r6, #0
 5164 021c C0F29D83 		blt	.L513
 5165 0220 721C     		adds	r2, r6, #1
2157:src/display.c **** 		*obp++ = ',';
 5166              		.loc 1 2157 31 view .LVU1600
 5167 0222 DFF84CE1 		ldr	lr, .L687+12
 5168 0226 0592     		str	r2, [sp, #20]
 5169 0228 0BEB0200 		add	r0, fp, r2
2122:src/display.c **** 	switch (mode) {
 5170              		.loc 1 2122 4 view .LVU1601
 5171 022c DC46     		mov	ip, fp
1927:src/display.c **** 	int odig = 0;
 5172              		.loc 1 1927 15 view .LVU1602
 5173 022e 3946     		mov	r1, r7
 5174 0230 05E0     		b	.L514
 5175              	.LVL568:
 5176              	.L517:
2158:src/display.c **** 	      *obp++ = *p++;
 5177              		.loc 1 2158 3 is_stmt 1 view .LVU1603
2157:src/display.c **** 		*obp++ = ',';
 5178              		.loc 1 2157 18 is_stmt 0 view .LVU1604
 5179 0232 022D     		cmp	r5, #2
2158:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccdQiHBS.s 			page 178


 5180              		.loc 1 2158 10 view .LVU1605
 5181 0234 05BF     		ittet	eq
 5182 0236 2C22     		moveq	r2, #44
 5183 0238 4A70     		strbeq	r2, [r1, #1]
2159:src/display.c **** 	      odig++;
 5184              		.loc 1 2159 12 view .LVU1606
 5185 023a 0131     		addne	r1, r1, #1
 5186              	.LVL569:
2158:src/display.c **** 	      *obp++ = *p++;
 5187              		.loc 1 2158 7 view .LVU1607
 5188 023c 0231     		addeq	r1, r1, #2
 5189              	.LVL570:
 5190              	.L514:
2159:src/display.c **** 	      odig++;
 5191              		.loc 1 2159 8 is_stmt 1 discriminator 2 view .LVU1608
2159:src/display.c **** 	      odig++;
 5192              		.loc 1 2159 15 is_stmt 0 discriminator 2 view .LVU1609
 5193 023e 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5194              	.LVL571:
2157:src/display.c **** 		*obp++ = ',';
 5195              		.loc 1 2157 8 is_stmt 1 discriminator 2 view .LVU1610
2159:src/display.c **** 	      odig++;
 5196              		.loc 1 2159 15 is_stmt 0 discriminator 2 view .LVU1611
 5197 0242 0A70     		strb	r2, [r1]
2160:src/display.c **** 	    }
 5198              		.loc 1 2160 8 is_stmt 1 discriminator 2 view .LVU1612
 5199              	.LVL572:
2156:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5200              		.loc 1 2156 23 discriminator 2 view .LVU1613
2156:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5201              		.loc 1 2156 15 discriminator 2 view .LVU1614
2157:src/display.c **** 		*obp++ = ',';
 5202              		.loc 1 2157 31 is_stmt 0 discriminator 2 view .LVU1615
 5203 0244 ABEB0C02 		sub	r2, fp, ip
 5204 0248 3244     		add	r2, r2, r6
 5205 024a 8EFB0285 		smull	r8, r5, lr, r2
 5206 024e A5EBE275 		sub	r5, r5, r2, asr #31
 5207 0252 05EB4505 		add	r5, r5, r5, lsl #1
2156:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5208              		.loc 1 2156 6 discriminator 2 view .LVU1616
 5209 0256 6045     		cmp	r0, ip
2157:src/display.c **** 		*obp++ = ',';
 5210              		.loc 1 2157 31 discriminator 2 view .LVU1617
 5211 0258 A2EB0505 		sub	r5, r2, r5
2156:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 5212              		.loc 1 2156 6 discriminator 2 view .LVU1618
 5213 025c E9D1     		bne	.L517
 5214 025e 059D     		ldr	r5, [sp, #20]
2162:src/display.c **** 	    if (count > (exp + 1)) {
 5215              		.loc 1 2162 6 is_stmt 1 view .LVU1619
2162:src/display.c **** 	    if (count > (exp + 1)) {
 5216              		.loc 1 2162 13 is_stmt 0 view .LVU1620
 5217 0260 2E22     		movs	r2, #46
2163:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5218              		.loc 1 2163 9 view .LVU1621
 5219 0262 AB42     		cmp	r3, r5
2162:src/display.c **** 	    if (count > (exp + 1)) {
ARM GAS  /tmp/ccdQiHBS.s 			page 179


 5220              		.loc 1 2162 13 view .LVU1622
 5221 0264 4A70     		strb	r2, [r1, #1]
2162:src/display.c **** 	    if (count > (exp + 1)) {
 5222              		.loc 1 2162 10 view .LVU1623
 5223 0266 01F10208 		add	r8, r1, #2
 5224              	.LVL573:
2163:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5225              		.loc 1 2163 6 is_stmt 1 view .LVU1624
2163:src/display.c **** 	      for (i=exp+1; i<count; i++) {
 5226              		.loc 1 2163 9 is_stmt 0 view .LVU1625
 5227 026a 40F34B81 		ble	.L511
 5228 026e 9A1B     		subs	r2, r3, r6
 5229 0270 0A44     		add	r2, r2, r1
 5230 0272 0131     		adds	r1, r1, #1
 5231              	.LVL574:
 5232              	.L518:
2165:src/display.c **** 		odig++;
 5233              		.loc 1 2165 3 is_stmt 1 discriminator 3 view .LVU1626
2165:src/display.c **** 		odig++;
 5234              		.loc 1 2165 10 is_stmt 0 discriminator 3 view .LVU1627
 5235 0274 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 5236              	.LVL575:
2165:src/display.c **** 		odig++;
 5237              		.loc 1 2165 10 discriminator 3 view .LVU1628
 5238 0278 01F8015F 		strb	r5, [r1, #1]!
2166:src/display.c **** 	      }
 5239              		.loc 1 2166 3 is_stmt 1 discriminator 3 view .LVU1629
2164:src/display.c **** 		*obp++ = *p++;
 5240              		.loc 1 2164 31 discriminator 3 view .LVU1630
2164:src/display.c **** 		*obp++ = *p++;
 5241              		.loc 1 2164 22 discriminator 3 view .LVU1631
2164:src/display.c **** 		*obp++ = *p++;
 5242              		.loc 1 2164 8 is_stmt 0 discriminator 3 view .LVU1632
 5243 027c 9142     		cmp	r1, r2
 5244 027e F9D1     		bne	.L518
 5245 0280 F243     		mvns	r2, r6
 5246 0282 1A44     		add	r2, r2, r3
 5247 0284 9044     		add	r8, r8, r2
 5248              	.LVL576:
2166:src/display.c **** 	      }
 5249              		.loc 1 2166 7 view .LVU1633
 5250 0286 1D46     		mov	r5, r3
 5251 0288 3CE1     		b	.L511
 5252              	.LVL577:
 5253              	.L583:
2166:src/display.c **** 	      }
 5254              		.loc 1 2166 7 view .LVU1634
 5255 028a B846     		mov	r8, r7
 5256              	.LVL578:
 5257              	.L540:
2258:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5258              		.loc 1 2258 2 is_stmt 1 view .LVU1635
2258:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5259              		.loc 1 2258 5 is_stmt 0 view .LVU1636
 5260 028c 029B     		ldr	r3, [sp, #8]
 5261 028e 0A2B     		cmp	r3, #10
 5262 0290 02DD     		ble	.L543
ARM GAS  /tmp/ccdQiHBS.s 			page 180


2258:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 5263              		.loc 1 2258 50 discriminator 1 view .LVU1637
 5264 0292 002C     		cmp	r4, #0
 5265 0294 00F00E82 		beq	.L675
 5266              	.L543:
2264:src/display.c **** 	if (odig > *display_digits)
 5267              		.loc 1 2264 2 is_stmt 1 view .LVU1638
 5268 0298 029B     		ldr	r3, [sp, #8]
 5269 029a 9D42     		cmp	r5, r3
 5270 029c A8BF     		it	ge
 5271 029e 1D46     		movge	r5, r3
 5272              	.LVL579:
2267:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5273              		.loc 1 2267 23 is_stmt 0 view .LVU1639
 5274 02a0 A3EB050A 		sub	r10, r3, r5
 5275              	.LVL580:
2267:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5276              		.loc 1 2267 23 view .LVU1640
 5277 02a4 1A46     		mov	r2, r3
2267:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5278              		.loc 1 2267 4 view .LVU1641
 5279 02a6 0AEBCA0A 		add	r10, r10, r10, lsl #3
2264:src/display.c **** 	if (odig > *display_digits)
 5280              		.loc 1 2264 7 view .LVU1642
 5281 02aa 0023     		movs	r3, #0
2268:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5282              		.loc 1 2268 5 view .LVU1643
 5283 02ac 9A45     		cmp	r10, r3
2264:src/display.c **** 	if (odig > *display_digits)
 5284              		.loc 1 2264 7 view .LVU1644
 5285 02ae 88F80030 		strb	r3, [r8]
2265:src/display.c **** 	  odig = *display_digits;
 5286              		.loc 1 2265 2 is_stmt 1 view .LVU1645
 5287              	.LVL581:
2267:src/display.c **** 	if (show_large_exponent && j > 0 && exp < -999)
 5288              		.loc 1 2267 2 view .LVU1646
2268:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5289              		.loc 1 2268 2 view .LVU1647
2268:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5290              		.loc 1 2268 5 is_stmt 0 view .LVU1648
 5291 02b2 04DD     		ble	.L544
2268:src/display.c **** 	  j -= SEGS_PER_DIGIT; // add a space before the sign of the exponent
 5292              		.loc 1 2268 35 discriminator 1 view .LVU1649
 5293 02b4 16F57A7F 		cmn	r6, #1000
2269:src/display.c **** 	if (negative) {
 5294              		.loc 1 2269 4 is_stmt 1 discriminator 1 view .LVU1650
2269:src/display.c **** 	if (negative) {
 5295              		.loc 1 2269 6 is_stmt 0 discriminator 1 view .LVU1651
 5296 02b8 D8BF     		it	le
 5297 02ba AAF1090A 		suble	r10, r10, #9
 5298              	.LVL582:
 5299              	.L544:
2270:src/display.c **** 	  if (res) *res++ = '-';
 5300              		.loc 1 2270 2 is_stmt 1 view .LVU1652
2270:src/display.c **** 	  if (res) *res++ = '-';
 5301              		.loc 1 2270 5 is_stmt 0 view .LVU1653
 5302 02be 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccdQiHBS.s 			page 181


 5303 02c0 2BB1     		cbz	r3, .L545
2271:src/display.c **** 	  else {
 5304              		.loc 1 2271 4 is_stmt 1 view .LVU1654
2271:src/display.c **** 	  else {
 5305              		.loc 1 2271 7 is_stmt 0 view .LVU1655
 5306 02c2 002C     		cmp	r4, #0
 5307 02c4 00F00582 		beq	.L546
2271:src/display.c **** 	  else {
 5308              		.loc 1 2271 13 is_stmt 1 discriminator 1 view .LVU1656
 5309              	.LVL583:
2271:src/display.c **** 	  else {
 5310              		.loc 1 2271 20 is_stmt 0 discriminator 1 view .LVU1657
 5311 02c8 2D23     		movs	r3, #45
 5312 02ca 04F8013B 		strb	r3, [r4], #1
 5313              	.LVL584:
 5314              	.L545:
2279:src/display.c **** 	  if (c == '.') {
 5315              		.loc 1 2279 12 is_stmt 1 discriminator 1 view .LVU1658
2279:src/display.c **** 	  if (c == '.') {
 5316              		.loc 1 2279 18 is_stmt 0 discriminator 1 view .LVU1659
 5317 02ce 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 5318              	.LVL585:
2279:src/display.c **** 	  if (c == '.') {
 5319              		.loc 1 2279 2 discriminator 1 view .LVU1660
 5320 02d2 C1B1     		cbz	r1, .L547
2279:src/display.c **** 	  if (c == '.') {
 5321              		.loc 1 2279 31 view .LVU1661
 5322 02d4 BAF16B0F 		cmp	r10, #107
 5323 02d8 15DC     		bgt	.L547
 5324              	.LVL586:
 5325              	.L548:
2283:src/display.c **** 	  } else {
 5326              		.loc 1 2283 12 view .LVU1662
 5327 02da 234B     		ldr	r3, .L687+4
2281:src/display.c **** 	  } else if (c == ',') {
 5328              		.loc 1 2281 12 view .LVU1663
 5329 02dc DFF894B0 		ldr	fp, .L687+16
 5330              	.LVL587:
 5331              	.L559:
2280:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5332              		.loc 1 2280 4 is_stmt 1 view .LVU1664
2280:src/display.c **** 	    res = set_decimal(j - SEGS_PER_DIGIT, DecimalMode, res);
 5333              		.loc 1 2280 7 is_stmt 0 view .LVU1665
 5334 02e0 2E29     		cmp	r1, #46
 5335 02e2 00F02481 		beq	.L676
2282:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5336              		.loc 1 2282 11 is_stmt 1 view .LVU1666
2282:src/display.c **** 	    res = set_separator(j, SeparatorMode, res);
 5337              		.loc 1 2282 14 is_stmt 0 view .LVU1667
 5338 02e6 2C29     		cmp	r1, #44
 5339 02e8 00F04B81 		beq	.L677
2285:src/display.c **** 	    j += SEGS_PER_DIGIT;
 5340              		.loc 1 2285 6 is_stmt 1 view .LVU1668
 5341              	.LVL588:
 5342              	.LBB404:
 5343              	.LBI404:
 332:src/display.c ****   if (res) *res++ = ch;
ARM GAS  /tmp/ccdQiHBS.s 			page 182


 5344              		.loc 1 332 14 view .LVU1669
 5345              	.LBB405:
 333:src/display.c ****   else	set_dig(base, ch);
 5346              		.loc 1 333 3 view .LVU1670
 333:src/display.c ****   else	set_dig(base, ch);
 5347              		.loc 1 333 6 is_stmt 0 view .LVU1671
 5348 02ec 002C     		cmp	r4, #0
 5349 02ee 00F05D81 		beq	.L557
 333:src/display.c ****   else	set_dig(base, ch);
 5350              		.loc 1 333 12 is_stmt 1 view .LVU1672
 5351              	.LVL589:
 333:src/display.c ****   else	set_dig(base, ch);
 5352              		.loc 1 333 19 is_stmt 0 view .LVU1673
 5353 02f2 04F8011B 		strb	r1, [r4], #1
 5354              	.LVL590:
 5355              	.L558:
 335:src/display.c **** }
 5356              		.loc 1 335 3 is_stmt 1 view .LVU1674
 335:src/display.c **** }
 5357              		.loc 1 335 3 is_stmt 0 view .LVU1675
 5358              	.LBE405:
 5359              	.LBE404:
2286:src/display.c **** 	  }
 5360              		.loc 1 2286 6 is_stmt 1 view .LVU1676
2279:src/display.c **** 	  if (c == '.') {
 5361              		.loc 1 2279 18 is_stmt 0 view .LVU1677
 5362 02f6 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5363              	.LVL591:
2286:src/display.c **** 	  }
 5364              		.loc 1 2286 8 view .LVU1678
 5365 02fa 0AF1090A 		add	r10, r10, #9
 5366              	.LVL592:
2279:src/display.c **** 	  if (c == '.') {
 5367              		.loc 1 2279 53 is_stmt 1 view .LVU1679
2279:src/display.c **** 	  if (c == '.') {
 5368              		.loc 1 2279 12 view .LVU1680
2279:src/display.c **** 	  if (c == '.') {
 5369              		.loc 1 2279 2 is_stmt 0 view .LVU1681
 5370 02fe 11B1     		cbz	r1, .L547
2279:src/display.c **** 	  if (c == '.') {
 5371              		.loc 1 2279 31 discriminator 3 view .LVU1682
 5372 0300 BAF16B0F 		cmp	r10, #107
 5373 0304 ECDD     		ble	.L559
 5374              	.LVL593:
 5375              	.L547:
2299:src/display.c **** 	  set_exp(exp, 0, res);
 5376              		.loc 1 2299 2 is_stmt 1 view .LVU1683
2299:src/display.c **** 	  set_exp(exp, 0, res);
 5377              		.loc 1 2299 5 is_stmt 0 view .LVU1684
 5378 0306 B9F1000F 		cmp	r9, #0
 5379 030a 40F02381 		bne	.L678
 5380              	.L560:
2302:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5381              		.loc 1 2302 2 is_stmt 1 view .LVU1685
2302:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5382              		.loc 1 2302 5 is_stmt 0 view .LVU1686
 5383 030e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
ARM GAS  /tmp/ccdQiHBS.s 			page 183


 5384 0312 2E2B     		cmp	r3, #46
 5385 0314 00F02881 		beq	.L679
 5386              	.LVL594:
 5387              	.L561:
2304:src/display.c ****       }
 5388              		.loc 1 2304 2 is_stmt 1 view .LVU1687
2304:src/display.c ****       }
 5389              		.loc 1 2304 18 is_stmt 0 view .LVU1688
 5390 0318 019B     		ldr	r3, [sp, #4]
 5391 031a 1D60     		str	r5, [r3]
 5392              	.LVL595:
 5393              	.L435:
2305:src/display.c **** 
 5394              		.loc 1 2305 7 view .LVU1689
 5395 031c 27B0     		add	sp, sp, #156
 5396              		.cfi_remember_state
 5397              		.cfi_def_cfa_offset 36
 5398              		@ sp needed
 5399 031e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5400              	.LVL596:
 5401              	.L443:
 5402              		.cfi_restore_state
2004:src/display.c **** 
 5403              		.loc 1 2004 4 is_stmt 1 view .LVU1690
 5404 0322 3946     		mov	r1, r7
 5405 0324 5046     		mov	r0, r10
 5406 0326 FFF7FEFF 		bl	decNumberToString
 5407              	.LVL597:
 5408 032a 9BE6     		b	.L445
 5409              	.LVL598:
 5410              	.L436:
1962:src/display.c **** 	    if (State2.hms) {
 5411              		.loc 1 1962 4 view .LVU1691
1962:src/display.c **** 	    if (State2.hms) {
 5412              		.loc 1 1962 25 is_stmt 0 view .LVU1692
 5413 032c 0D4B     		ldr	r3, .L687
 5414 032e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
1962:src/display.c **** 	    if (State2.hms) {
 5415              		.loc 1 1962 22 view .LVU1693
 5416 0330 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
1962:src/display.c **** 	    if (State2.hms) {
 5417              		.loc 1 1962 25 view .LVU1694
 5418 0332 01F00201 		and	r1, r1, #2
1962:src/display.c **** 	    if (State2.hms) {
 5419              		.loc 1 1962 22 view .LVU1695
 5420 0336 1143     		orrs	r1, r1, r2
 5421 0338 7FF471AE 		bne	.L439
1963:src/display.c **** 	      set_x_hms(z, res);
 5422              		.loc 1 1963 6 is_stmt 1 view .LVU1696
1963:src/display.c **** 	      set_x_hms(z, res);
 5423              		.loc 1 1963 10 is_stmt 0 view .LVU1697
 5424 033c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
1963:src/display.c **** 	      set_x_hms(z, res);
 5425              		.loc 1 1963 9 view .LVU1698
 5426 033e DE07     		lsls	r6, r3, #31
 5427 0340 00F1EA82 		bmi	.L680
1967:src/display.c **** 	      if (set_x_fract(z, res))
ARM GAS  /tmp/ccdQiHBS.s 			page 184


 5428              		.loc 1 1967 11 is_stmt 1 view .LVU1699
1967:src/display.c **** 	      if (set_x_fract(z, res))
 5429              		.loc 1 1967 15 is_stmt 0 view .LVU1700
 5430 0344 094B     		ldr	r3, .L687+8
 5431 0346 1B68     		ldr	r3, [r3]
 5432 0348 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1967:src/display.c **** 	      if (set_x_fract(z, res))
 5433              		.loc 1 1967 14 view .LVU1701
 5434 034c 9806     		lsls	r0, r3, #26
 5435 034e 7FF566AE 		bpl	.L439
1968:src/display.c **** 		return;
 5436              		.loc 1 1968 8 is_stmt 1 view .LVU1702
1968:src/display.c **** 		return;
 5437              		.loc 1 1968 12 is_stmt 0 view .LVU1703
 5438 0352 2146     		mov	r1, r4
 5439 0354 5046     		mov	r0, r10
 5440 0356 FFF7FEFF 		bl	set_x_fract
 5441              	.LVL599:
1968:src/display.c **** 		return;
 5442              		.loc 1 1968 11 view .LVU1704
 5443 035a 0028     		cmp	r0, #0
 5444 035c 3FF45FAE 		beq	.L439
 5445 0360 DCE7     		b	.L435
 5446              	.L688:
 5447 0362 00BF     		.align	2
 5448              	.L687:
 5449 0364 00000000 		.word	StateWhileOn
 5450 0368 00000000 		.word	.LANCHOR0
 5451 036c 00000000 		.word	main_ram
 5452 0370 56555555 		.word	1431655766
 5453 0374 00000000 		.word	.LANCHOR1
 5454              	.LVL600:
 5455              	.L667:
2012:src/display.c **** 	  //  ALL mode: fill the display
 5456              		.loc 1 2012 38 discriminator 1 view .LVU1705
 5457 0378 019B     		ldr	r3, [sp, #4]
 5458 037a 1A68     		ldr	r2, [r3]
2012:src/display.c **** 	  //  ALL mode: fill the display
 5459              		.loc 1 2012 35 discriminator 1 view .LVU1706
 5460 037c 089B     		ldr	r3, [sp, #32]
2012:src/display.c **** 	  //  ALL mode: fill the display
 5461              		.loc 1 2012 23 discriminator 1 view .LVU1707
 5462 037e 9A42     		cmp	r2, r3
 5463 0380 11DD     		ble	.L458
2016:src/display.c **** 
 5464              		.loc 1 2016 4 is_stmt 1 view .LVU1708
2018:src/display.c **** 	  int orig_mode = mode;
 5465              		.loc 1 2018 23 is_stmt 0 view .LVU1709
 5466 0382 042D     		cmp	r5, #4
2016:src/display.c **** 
 5467              		.loc 1 2016 7 view .LVU1710
 5468 0384 0793     		str	r3, [sp, #28]
2018:src/display.c **** 	  int orig_mode = mode;
 5469              		.loc 1 2018 2 is_stmt 1 view .LVU1711
2018:src/display.c **** 	  int orig_mode = mode;
 5470              		.loc 1 2018 23 is_stmt 0 view .LVU1712
 5471 0386 12D0     		beq	.L459
ARM GAS  /tmp/ccdQiHBS.s 			page 185


 5472              	.L681:
2018:src/display.c **** 	  int orig_mode = mode;
 5473              		.loc 1 2018 43 discriminator 2 view .LVU1713
 5474 0388 052D     		cmp	r5, #5
 5475 038a 00F08A81 		beq	.L460
1948:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 5476              		.loc 1 1948 6 view .LVU1714
 5477 038e 0023     		movs	r3, #0
 5478 0390 0493     		str	r3, [sp, #16]
 5479 0392 80E6     		b	.L566
 5480              	.LVL601:
 5481              	.L668:
2043:src/display.c **** 	if (q == NULL) exp = 0;
 5482              		.loc 1 2043 17 is_stmt 1 discriminator 1 view .LVU1715
2043:src/display.c **** 	if (q == NULL) exp = 0;
 5483              		.loc 1 2043 21 is_stmt 0 discriminator 1 view .LVU1716
 5484 0394 4421     		movs	r1, #68
 5485 0396 3846     		mov	r0, r7
 5486              	.LVL602:
2043:src/display.c **** 	if (q == NULL) exp = 0;
 5487              		.loc 1 2043 21 discriminator 1 view .LVU1717
 5488 0398 FFF7FEFF 		bl	find_char
 5489              	.LVL603:
2044:src/display.c **** 	else {
 5490              		.loc 1 2044 2 is_stmt 1 discriminator 1 view .LVU1718
2044:src/display.c **** 	else {
 5491              		.loc 1 2044 5 is_stmt 0 discriminator 1 view .LVU1719
 5492 039c 0646     		mov	r6, r0
 5493 039e 0028     		cmp	r0, #0
 5494 03a0 3FF493AE 		beq	.L462
 5495 03a4 89E6     		b	.L461
 5496              	.LVL604:
 5497              	.L458:
2014:src/display.c **** 	else
 5498              		.loc 1 2014 4 is_stmt 1 view .LVU1720
2014:src/display.c **** 	else
 5499              		.loc 1 2014 25 is_stmt 0 view .LVU1721
 5500 03a6 013A     		subs	r2, r2, #1
2018:src/display.c **** 	  int orig_mode = mode;
 5501              		.loc 1 2018 23 view .LVU1722
 5502 03a8 042D     		cmp	r5, #4
2014:src/display.c **** 	else
 5503              		.loc 1 2014 7 view .LVU1723
 5504 03aa 0792     		str	r2, [sp, #28]
2018:src/display.c **** 	  int orig_mode = mode;
 5505              		.loc 1 2018 2 is_stmt 1 view .LVU1724
2018:src/display.c **** 	  int orig_mode = mode;
 5506              		.loc 1 2018 23 is_stmt 0 view .LVU1725
 5507 03ac ECD1     		bne	.L681
 5508              	.L459:
 5509              	.LBB407:
2019:src/display.c **** 
 5510              		.loc 1 2019 4 is_stmt 1 view .LVU1726
 5511              	.LVL605:
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5512              		.loc 1 2021 4 view .LVU1727
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
ARM GAS  /tmp/ccdQiHBS.s 			page 186


 5513              		.loc 1 2021 11 is_stmt 0 view .LVU1728
 5514 03ae 2A46     		mov	r2, r5
 5515 03b0 07A9     		add	r1, sp, #28
 5516 03b2 5046     		mov	r0, r10
 5517 03b4 FFF7FEFF 		bl	std_round_fix
 5518              	.LVL606:
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 5519              		.loc 1 2024 16 view .LVU1729
 5520 03b8 0123     		movs	r3, #1
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 5521              		.loc 1 2021 11 view .LVU1730
 5522 03ba 0546     		mov	r5, r0
 5523              	.LVL607:
2022:src/display.c **** 	    // allow zeros to be trimmed
 5524              		.loc 1 2022 4 is_stmt 1 view .LVU1731
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 5525              		.loc 1 2024 6 view .LVU1732
2025:src/display.c **** 	    dd = *display_digits - 1;
 5526              		.loc 1 2025 4 view .LVU1733
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 5527              		.loc 1 2024 16 is_stmt 0 view .LVU1734
 5528 03bc 0493     		str	r3, [sp, #16]
 5529 03be 6AE6     		b	.L566
 5530              	.LVL608:
 5531              	.L674:
2024:src/display.c **** 	  if (orig_mode == MODE_STD)
 5532              		.loc 1 2024 16 view .LVU1735
 5533              	.LBE407:
2104:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 5534              		.loc 1 2104 7 view .LVU1736
 5535 03c0 5846     		mov	r0, fp
 5536              	.LVL609:
2105:src/display.c **** 	    mantissa[0] = '1';
 5537              		.loc 1 2105 41 view .LVU1737
 5538 03c2 4FF03008 		mov	r8, #48
 5539              	.L490:
 5540              	.LVL610:
2105:src/display.c **** 	    mantissa[0] = '1';
 5541              		.loc 1 2105 47 is_stmt 1 discriminator 3 view .LVU1738
2105:src/display.c **** 	    mantissa[0] = '1';
 5542              		.loc 1 2105 36 discriminator 3 view .LVU1739
2105:src/display.c **** 	    mantissa[0] = '1';
 5543              		.loc 1 2105 41 is_stmt 0 discriminator 3 view .LVU1740
 5544 03c6 00F8018B 		strb	r8, [r0], #1
 5545              	.LVL611:
2105:src/display.c **** 	    mantissa[0] = '1';
 5546              		.loc 1 2105 25 is_stmt 1 discriminator 3 view .LVU1741
2105:src/display.c **** 	    mantissa[0] = '1';
 5547              		.loc 1 2105 6 is_stmt 0 discriminator 3 view .LVU1742
 5548 03ca 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 5549 03ce BCF1390F 		cmp	ip, #57
 5550 03d2 F8D0     		beq	.L490
 5551              	.LVL612:
 5552              	.L565:
2106:src/display.c **** 	    exp++;
 5553              		.loc 1 2106 6 is_stmt 1 view .LVU1743
2106:src/display.c **** 	    exp++;
ARM GAS  /tmp/ccdQiHBS.s 			page 187


 5554              		.loc 1 2106 18 is_stmt 0 view .LVU1744
 5555 03d4 3120     		movs	r0, #49
2108:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5556              		.loc 1 2108 9 view .LVU1745
 5557 03d6 012D     		cmp	r5, #1
2107:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5558              		.loc 1 2107 9 view .LVU1746
 5559 03d8 06F10106 		add	r6, r6, #1
 5560              	.LVL613:
2106:src/display.c **** 	    exp++;
 5561              		.loc 1 2106 18 view .LVU1747
 5562 03dc 8DF85800 		strb	r0, [sp, #88]
2107:src/display.c **** 	    if (mode == MODE_FIX && exp > (*display_digits - 1)) {
 5563              		.loc 1 2107 6 is_stmt 1 view .LVU1748
 5564              	.LVL614:
2108:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5565              		.loc 1 2108 6 view .LVU1749
2108:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5566              		.loc 1 2108 9 is_stmt 0 view .LVU1750
 5567 03e0 7FF4ECAE 		bne	.L662
2108:src/display.c **** 	      mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5568              		.loc 1 2108 27 discriminator 1 view .LVU1751
 5569 03e4 0298     		ldr	r0, [sp, #8]
 5570 03e6 8642     		cmp	r6, r0
 5571 03e8 C0F2E580 		blt	.L492
2109:src/display.c **** 	      extra_digits = 0;
 5572              		.loc 1 2109 8 is_stmt 1 view .LVU1752
2109:src/display.c **** 	      extra_digits = 0;
 5573              		.loc 1 2109 28 is_stmt 0 view .LVU1753
 5574 03ec BF4B     		ldr	r3, .L689
 5575              	.LVL615:
2109:src/display.c **** 	      extra_digits = 0;
 5576              		.loc 1 2109 28 view .LVU1754
 5577 03ee 1B68     		ldr	r3, [r3]
 5578 03f0 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2109:src/display.c **** 	      extra_digits = 0;
 5579              		.loc 1 2109 37 view .LVU1755
 5580 03f4 D906     		lsls	r1, r3, #27
 5581              	.LVL616:
2109:src/display.c **** 	      extra_digits = 0;
 5582              		.loc 1 2109 37 view .LVU1756
 5583 03f6 40F1D582 		bpl	.L682
 5584              	.LVL617:
2120:src/display.c **** 
 5585              		.loc 1 2120 2 is_stmt 1 view .LVU1757
 5586 03fa 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2120:src/display.c **** 
 5587              		.loc 1 2120 9 is_stmt 0 view .LVU1758
 5588 03fe 0BEB0E03 		add	r3, fp, lr
 5589              	.LVL618:
2120:src/display.c **** 
 5590              		.loc 1 2120 45 is_stmt 1 view .LVU1759
2109:src/display.c **** 	      extra_digits = 0;
 5591              		.loc 1 2109 37 is_stmt 0 view .LVU1760
 5592 0402 0325     		movs	r5, #3
2120:src/display.c **** 
 5593              		.loc 1 2120 2 view .LVU1761
ARM GAS  /tmp/ccdQiHBS.s 			page 188


 5594 0404 0029     		cmp	r1, #0
 5595 0406 7FF4DCAE 		bne	.L563
 5596              	.LVL619:
 5597              	.L498:
2222:src/display.c **** 	  case -1:
 5598              		.loc 1 2222 4 is_stmt 1 view .LVU1762
2222:src/display.c **** 	  case -1:
 5599              		.loc 1 2222 16 is_stmt 0 view .LVU1763
 5600 040a B94B     		ldr	r3, .L689+4
 5601 040c 83FB0613 		smull	r1, r3, r3, r6
 5602 0410 A3EBE673 		sub	r3, r3, r6, asr #31
 5603 0414 03EB4303 		add	r3, r3, r3, lsl #1
 5604 0418 F31A     		subs	r3, r6, r3
 5605 041a 0233     		adds	r3, r3, #2
 5606 041c 042B     		cmp	r3, #4
 5607 041e 4FD8     		bhi	.L533
 5608 0420 DFE813F0 		tbh	[pc, r3, lsl #1]
 5609              	.L535:
 5610 0424 2402     		.2byte	(.L536-.L535)/2
 5611 0426 1202     		.2byte	(.L534-.L535)/2
 5612 0428 4E00     		.2byte	(.L533-.L535)/2
 5613 042a 2402     		.2byte	(.L536-.L535)/2
 5614 042c 1202     		.2byte	(.L534-.L535)/2
 5615              	.LVL620:
 5616              		.p2align 1
 5617              	.L504:
2131:src/display.c **** 	    case -1:
 5618              		.loc 1 2131 6 is_stmt 1 view .LVU1764
2131:src/display.c **** 	    case -1:
 5619              		.loc 1 2131 32 is_stmt 0 view .LVU1765
 5620 042e AF48     		ldr	r0, .L689
2131:src/display.c **** 	    case -1:
 5621              		.loc 1 2131 19 view .LVU1766
 5622 0430 AF49     		ldr	r1, .L689+4
2131:src/display.c **** 	    case -1:
 5623              		.loc 1 2131 32 view .LVU1767
 5624 0432 0068     		ldr	r0, [r0]
2131:src/display.c **** 	    case -1:
 5625              		.loc 1 2131 19 view .LVU1768
 5626 0434 81FB0651 		smull	r5, r1, r1, r6
2131:src/display.c **** 	    case -1:
 5627              		.loc 1 2131 32 view .LVU1769
 5628 0438 90F8E707 		ldrb	r0, [r0, #2023]	@ zero_extendqisi2
2131:src/display.c **** 	    case -1:
 5629              		.loc 1 2131 19 view .LVU1770
 5630 043c A1EBE671 		sub	r1, r1, r6, asr #31
 5631 0440 01EB4101 		add	r1, r1, r1, lsl #1
 5632 0444 711A     		subs	r1, r6, r1
2131:src/display.c **** 	    case -1:
 5633              		.loc 1 2131 32 view .LVU1771
 5634 0446 C0F30010 		ubfx	r0, r0, #4, #1
2131:src/display.c **** 	    case -1:
 5635              		.loc 1 2131 24 view .LVU1772
 5636 044a 01FB00F1 		mul	r1, r1, r0
 5637 044e 0231     		adds	r1, r1, #2
 5638 0450 0429     		cmp	r1, #4
 5639 0452 00F26782 		bhi	.L580
ARM GAS  /tmp/ccdQiHBS.s 			page 189


 5640 0456 DFE811F0 		tbh	[pc, r1, lsl #1]
 5641              	.L508:
 5642 045a 4302     		.2byte	(.L509-.L508)/2
 5643 045c 1802     		.2byte	(.L507-.L508)/2
 5644 045e 6502     		.2byte	(.L580-.L508)/2
 5645 0460 4302     		.2byte	(.L509-.L508)/2
 5646 0462 1802     		.2byte	(.L507-.L508)/2
 5647              	.LVL621:
 5648              		.p2align 1
 5649              	.L478:
2087:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5650              		.loc 1 2087 4 is_stmt 1 view .LVU1773
2087:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5651              		.loc 1 2087 7 is_stmt 0 view .LVU1774
 5652 0464 B342     		cmp	r3, r6
 5653 0466 03DD     		ble	.L481
2087:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5654              		.loc 1 2087 45 discriminator 1 view .LVU1775
 5655 0468 5342     		rsbs	r3, r2, #0
2087:src/display.c **** 	    mode = UState.fixeng?MODE_ENG:MODE_SCI;
 5656              		.loc 1 2087 36 discriminator 1 view .LVU1776
 5657 046a B342     		cmp	r3, r6
 5658 046c 40F30282 		ble	.L482
 5659              	.L481:
2088:src/display.c **** 	  else {
 5660              		.loc 1 2088 6 is_stmt 1 view .LVU1777
2088:src/display.c **** 	  else {
 5661              		.loc 1 2088 26 is_stmt 0 view .LVU1778
 5662 0470 9E4B     		ldr	r3, .L689
 5663 0472 1B68     		ldr	r3, [r3]
 5664 0474 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
2088:src/display.c **** 	  else {
 5665              		.loc 1 2088 35 view .LVU1779
 5666 0478 13F0100F 		tst	r3, #16
 5667 047c 14BF     		ite	ne
 5668 047e 0325     		movne	r5, #3
 5669              	.LVL622:
2088:src/display.c **** 	  else {
 5670              		.loc 1 2088 35 view .LVU1780
 5671 0480 0225     		moveq	r5, #2
 5672 0482 6CE6     		b	.L663
 5673              	.LVL623:
 5674              	.L672:
2088:src/display.c **** 	  else {
 5675              		.loc 1 2088 35 view .LVU1781
 5676 0484 013E     		subs	r6, r6, #1
 5677 0486 08EB0602 		add	r2, r8, r6
 5678              	.L471:
2067:src/display.c **** 	    exp--;
 5679              		.loc 1 2067 4 is_stmt 1 discriminator 1 view .LVU1782
2068:src/display.c **** 	  while (*++q == '0');
 5680              		.loc 1 2068 6 discriminator 1 view .LVU1783
 5681 048a A2EB0806 		sub	r6, r2, r8
 5682              	.LVL624:
2069:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5683              		.loc 1 2069 10 discriminator 1 view .LVU1784
2069:src/display.c **** 	  while (*q >= '0' && *q <= '9')
ARM GAS  /tmp/ccdQiHBS.s 			page 190


 5684              		.loc 1 2069 11 is_stmt 0 discriminator 1 view .LVU1785
 5685 048e 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
 5686              	.LVL625:
2069:src/display.c **** 	  while (*q >= '0' && *q <= '9')
 5687              		.loc 1 2069 4 discriminator 1 view .LVU1786
 5688 0492 302B     		cmp	r3, #48
 5689 0494 F9D0     		beq	.L471
2070:src/display.c **** 	    *p++ = *q++;
 5690              		.loc 1 2070 10 is_stmt 1 view .LVU1787
 5691 0496 A3F13002 		sub	r2, r3, #48
 5692 049a 092A     		cmp	r2, #9
 5693 049c 3FF658AE 		bhi	.L472
1933:src/display.c **** 	char *r;
 5694              		.loc 1 1933 8 is_stmt 0 view .LVU1788
 5695 04a0 5A46     		mov	r2, fp
 5696              	.LVL626:
 5697              	.L473:
2071:src/display.c **** 	} else {
 5698              		.loc 1 2071 6 is_stmt 1 view .LVU1789
2071:src/display.c **** 	} else {
 5699              		.loc 1 2071 11 is_stmt 0 view .LVU1790
 5700 04a2 02F8013B 		strb	r3, [r2], #1
 5701              	.LVL627:
2070:src/display.c **** 	    *p++ = *q++;
 5702              		.loc 1 2070 10 is_stmt 1 view .LVU1791
2070:src/display.c **** 	    *p++ = *q++;
 5703              		.loc 1 2070 11 is_stmt 0 view .LVU1792
 5704 04a6 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2070:src/display.c **** 	    *p++ = *q++;
 5705              		.loc 1 2070 10 view .LVU1793
 5706 04aa A3F13001 		sub	r1, r3, #48
 5707 04ae 0929     		cmp	r1, #9
 5708 04b0 F7D9     		bls	.L473
 5709 04b2 4DE6     		b	.L472
 5710              	.LVL628:
 5711              	.L670:
2061:src/display.c **** 	  q++;
 5712              		.loc 1 2061 4 is_stmt 1 view .LVU1794
2062:src/display.c **** 	} else if (*q == '+')
 5713              		.loc 1 2062 4 view .LVU1795
2061:src/display.c **** 	  q++;
 5714              		.loc 1 2061 13 is_stmt 0 view .LVU1796
 5715 04b4 0122     		movs	r2, #1
 5716 04b6 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 5717 04ba 0392     		str	r2, [sp, #12]
2062:src/display.c **** 	} else if (*q == '+')
 5718              		.loc 1 2062 5 view .LVU1797
 5719 04bc 9044     		add	r8, r8, r2
 5720              	.LVL629:
2062:src/display.c **** 	} else if (*q == '+')
 5721              		.loc 1 2062 5 view .LVU1798
 5722 04be 1AE6     		b	.L467
 5723              	.LVL630:
 5724              	.L533:
2062:src/display.c **** 	} else if (*q == '+')
 5725              		.loc 1 2062 5 view .LVU1799
 5726 04c0 079A     		ldr	r2, [sp, #28]
ARM GAS  /tmp/ccdQiHBS.s 			page 191


2222:src/display.c **** 	  case -1:
 5727              		.loc 1 2222 16 view .LVU1800
 5728 04c2 0125     		movs	r5, #1
1927:src/display.c **** 	int odig = 0;
 5729              		.loc 1 1927 15 view .LVU1801
 5730 04c4 3946     		mov	r1, r7
 5731              	.LVL631:
 5732              	.L501:
2236:src/display.c **** 	  };
 5733              		.loc 1 2236 6 is_stmt 1 view .LVU1802
2237:src/display.c **** 	  // Falling through
 5734              		.loc 1 2237 5 view .LVU1803
2241:src/display.c **** 	  odig++;
 5735              		.loc 1 2241 4 view .LVU1804
2241:src/display.c **** 	  odig++;
 5736              		.loc 1 2241 15 is_stmt 0 view .LVU1805
 5737 04c6 5B46     		mov	r3, fp
 5738              	.LVL632:
2241:src/display.c **** 	  odig++;
 5739              		.loc 1 2241 11 view .LVU1806
 5740 04c8 8846     		mov	r8, r1
 5741 04ca 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5742              	.LVL633:
2241:src/display.c **** 	  odig++;
 5743              		.loc 1 2241 11 view .LVU1807
 5744 04ce 08F8020B 		strb	r0, [r8], #2
2242:src/display.c **** 	  *obp++ = '.';
 5745              		.loc 1 2242 4 is_stmt 1 view .LVU1808
2243:src/display.c **** 	  dd--;
 5746              		.loc 1 2243 4 view .LVU1809
 5747              	.LVL634:
2243:src/display.c **** 	  dd--;
 5748              		.loc 1 2243 11 is_stmt 0 view .LVU1810
 5749 04d2 4FF02E0C 		mov	ip, #46
2245:src/display.c **** 	    *obp++ = *p++;
 5750              		.loc 1 2245 13 view .LVU1811
 5751 04d6 901E     		subs	r0, r2, #2
2245:src/display.c **** 	    *obp++ = *p++;
 5752              		.loc 1 2245 10 view .LVU1812
 5753 04d8 002A     		cmp	r2, #0
2243:src/display.c **** 	  dd--;
 5754              		.loc 1 2243 11 view .LVU1813
 5755 04da 81F801C0 		strb	ip, [r1, #1]
2244:src/display.c **** 	  while (dd-- >= 0) {
 5756              		.loc 1 2244 4 is_stmt 1 view .LVU1814
2245:src/display.c **** 	    *obp++ = *p++;
 5757              		.loc 1 2245 4 view .LVU1815
2245:src/display.c **** 	    *obp++ = *p++;
 5758              		.loc 1 2245 10 view .LVU1816
2245:src/display.c **** 	    *obp++ = *p++;
 5759              		.loc 1 2245 13 is_stmt 0 view .LVU1817
 5760 04de 0790     		str	r0, [sp, #28]
2245:src/display.c **** 	    *obp++ = *p++;
 5761              		.loc 1 2245 10 view .LVU1818
 5762 04e0 40F32382 		ble	.L581
2245:src/display.c **** 	    *obp++ = *p++;
 5763              		.loc 1 2245 10 view .LVU1819
ARM GAS  /tmp/ccdQiHBS.s 			page 192


 5764 04e4 501C     		adds	r0, r2, #1
 5765 04e6 0131     		adds	r1, r1, #1
 5766 04e8 8344     		add	fp, fp, r0
 5767              	.LVL635:
 5768              	.L539:
2246:src/display.c **** 	    odig++;
 5769              		.loc 1 2246 6 is_stmt 1 view .LVU1820
2246:src/display.c **** 	    odig++;
 5770              		.loc 1 2246 13 is_stmt 0 view .LVU1821
 5771 04ea 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5772              	.LVL636:
2246:src/display.c **** 	    odig++;
 5773              		.loc 1 2246 13 view .LVU1822
 5774 04ee 01F8010F 		strb	r0, [r1, #1]!
2247:src/display.c **** 	  }
 5775              		.loc 1 2247 6 is_stmt 1 view .LVU1823
2245:src/display.c **** 	    *obp++ = *p++;
 5776              		.loc 1 2245 10 view .LVU1824
 5777 04f2 5B45     		cmp	r3, fp
 5778 04f4 F9D1     		bne	.L539
 5779 04f6 6FF00103 		mvn	r3, #1
 5780              	.LVL637:
2245:src/display.c **** 	    *obp++ = *p++;
 5781              		.loc 1 2245 10 is_stmt 0 view .LVU1825
 5782 04fa 9044     		add	r8, r8, r2
 5783 04fc 1544     		add	r5, r5, r2
 5784 04fe 0793     		str	r3, [sp, #28]
2249:src/display.c **** 	}
 5785              		.loc 1 2249 13 view .LVU1826
 5786 0500 4FF00109 		mov	r9, #1
 5787              	.L511:
 5788              	.LVL638:
2252:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5789              		.loc 1 2252 2 is_stmt 1 view .LVU1827
2252:src/display.c **** 	  while (obp > x && obp[-1] == '0') {
 5790              		.loc 1 2252 5 is_stmt 0 view .LVU1828
 5791 0504 049B     		ldr	r3, [sp, #16]
 5792 0506 002B     		cmp	r3, #0
 5793 0508 3FF4C0AE 		beq	.L540
2253:src/display.c **** 	    obp--;
 5794              		.loc 1 2253 10 is_stmt 1 view .LVU1829
 5795 050c B845     		cmp	r8, r7
 5796 050e 7FF6BDAE 		bls	.L540
 5797 0512 4346     		mov	r3, r8
 5798 0514 04E0     		b	.L541
 5799              	.LVL639:
 5800              	.L542:
2253:src/display.c **** 	    obp--;
 5801              		.loc 1 2253 10 is_stmt 0 view .LVU1830
 5802 0516 9F42     		cmp	r7, r3
2255:src/display.c **** 	  }
 5803              		.loc 1 2255 10 view .LVU1831
 5804 0518 05F1FF35 		add	r5, r5, #-1
 5805              	.LVL640:
2253:src/display.c **** 	    obp--;
 5806              		.loc 1 2253 10 is_stmt 1 view .LVU1832
 5807 051c 3FF4B5AE 		beq	.L583
ARM GAS  /tmp/ccdQiHBS.s 			page 193


 5808              	.LVL641:
 5809              	.L541:
2254:src/display.c **** 	    odig--;
 5810              		.loc 1 2254 6 discriminator 1 view .LVU1833
 5811 0520 9846     		mov	r8, r3
 5812              	.LVL642:
2254:src/display.c **** 	    odig--;
 5813              		.loc 1 2254 6 is_stmt 0 discriminator 1 view .LVU1834
 5814 0522 013B     		subs	r3, r3, #1
 5815              	.LVL643:
2255:src/display.c **** 	  }
 5816              		.loc 1 2255 6 is_stmt 1 discriminator 1 view .LVU1835
2253:src/display.c **** 	    obp--;
 5817              		.loc 1 2253 19 is_stmt 0 discriminator 1 view .LVU1836
 5818 0524 18F8012C 		ldrb	r2, [r8, #-1]	@ zero_extendqisi2
 5819 0528 302A     		cmp	r2, #48
 5820 052a F4D0     		beq	.L542
2253:src/display.c **** 	    obp--;
 5821              		.loc 1 2253 19 discriminator 1 view .LVU1837
 5822 052c AEE6     		b	.L540
 5823              	.LVL644:
 5824              	.L676:
2281:src/display.c **** 	  } else if (c == ',') {
 5825              		.loc 1 2281 6 is_stmt 1 view .LVU1838
2281:src/display.c **** 	  } else if (c == ',') {
 5826              		.loc 1 2281 12 is_stmt 0 view .LVU1839
 5827 052e 9BF80010 		ldrb	r1, [fp]	@ zero_extendqisi2
 5828              	.LVL645:
 5829              	.LBB408:
 5830              	.LBI408:
 286:src/display.c ****   if (res) {
 5831              		.loc 1 286 14 is_stmt 1 view .LVU1840
 5832              	.LBB409:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5833              		.loc 1 287 3 view .LVU1841
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5834              		.loc 1 287 6 is_stmt 0 view .LVU1842
 5835 0532 002C     		cmp	r4, #0
 5836 0534 33D0     		beq	.L551
 288:src/display.c ****   } else {
 5837              		.loc 1 288 5 is_stmt 1 view .LVU1843
 288:src/display.c ****   } else {
 5838              		.loc 1 288 12 is_stmt 0 view .LVU1844
 5839 0536 0029     		cmp	r1, #0
 5840              	.LVL646:
 288:src/display.c ****   } else {
 5841              		.loc 1 288 12 view .LVU1845
 5842 0538 0CBF     		ite	eq
 5843 053a 2E22     		moveq	r2, #46
 5844 053c 2C22     		movne	r2, #44
 5845 053e 04F8012B 		strb	r2, [r4], #1
 5846              	.LVL647:
 5847              	.L553:
 288:src/display.c ****   } else {
 5848              		.loc 1 288 12 view .LVU1846
 5849              	.LBE409:
 5850              	.LBE408:
ARM GAS  /tmp/ccdQiHBS.s 			page 194


2279:src/display.c **** 	  if (c == '.') {
 5851              		.loc 1 2279 53 is_stmt 1 view .LVU1847
2279:src/display.c **** 	  if (c == '.') {
 5852              		.loc 1 2279 12 view .LVU1848
2279:src/display.c **** 	  if (c == '.') {
 5853              		.loc 1 2279 18 is_stmt 0 view .LVU1849
 5854 0542 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 5855              	.LVL648:
2279:src/display.c **** 	  if (c == '.') {
 5856              		.loc 1 2279 2 view .LVU1850
 5857 0546 0029     		cmp	r1, #0
 5858 0548 7FF4CAAE 		bne	.L559
2299:src/display.c **** 	  set_exp(exp, 0, res);
 5859              		.loc 1 2299 2 is_stmt 1 view .LVU1851
2299:src/display.c **** 	  set_exp(exp, 0, res);
 5860              		.loc 1 2299 5 is_stmt 0 view .LVU1852
 5861 054c B9F1000F 		cmp	r9, #0
 5862 0550 3FF4DDAE 		beq	.L560
 5863              	.LVL649:
 5864              	.L678:
2300:src/display.c **** #endif
 5865              		.loc 1 2300 4 is_stmt 1 view .LVU1853
 5866 0554 3046     		mov	r0, r6
 5867 0556 2246     		mov	r2, r4
 5868 0558 0021     		movs	r1, #0
 5869              	.LVL650:
2300:src/display.c **** #endif
 5870              		.loc 1 2300 4 is_stmt 0 view .LVU1854
 5871 055a FFF7FEFF 		bl	set_exp
 5872              	.LVL651:
2302:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5873              		.loc 1 2302 2 is_stmt 1 view .LVU1855
2302:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5874              		.loc 1 2302 5 is_stmt 0 view .LVU1856
 5875 055e 18F8013C 		ldrb	r3, [r8, #-1]	@ zero_extendqisi2
 5876 0562 2E2B     		cmp	r3, #46
 5877 0564 7FF4D8AE 		bne	.L561
 5878              	.L679:
2302:src/display.c **** 	  set_decimal((*display_digits - 1) * SEGS_PER_DIGIT, DecimalMode, res);
 5879              		.loc 1 2302 21 discriminator 1 view .LVU1857
 5880 0568 002C     		cmp	r4, #0
 5881 056a 7FF4D5AE 		bne	.L561
2303:src/display.c **** 	*display_digits = odig;
 5882              		.loc 1 2303 4 is_stmt 1 view .LVU1858
 5883              	.LVL652:
 5884              	.LBB411:
 5885              	.LBI411:
 286:src/display.c ****   if (res) {
 5886              		.loc 1 286 14 view .LVU1859
 5887              	.LBB412:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 5888              		.loc 1 287 3 view .LVU1860
 5889              	.LBE412:
 5890              	.LBE411:
2303:src/display.c **** 	*display_digits = odig;
 5891              		.loc 1 2303 33 is_stmt 0 view .LVU1861
 5892 056e 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/ccdQiHBS.s 			page 195


 5893 0570 1868     		ldr	r0, [r3]
2303:src/display.c **** 	*display_digits = odig;
 5894              		.loc 1 2303 4 view .LVU1862
 5895 0572 604B     		ldr	r3, .L689+8
2303:src/display.c **** 	*display_digits = odig;
 5896              		.loc 1 2303 33 view .LVU1863
 5897 0574 0138     		subs	r0, r0, #1
 5898              	.LBB414:
 5899              	.LBB413:
 5900 0576 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5901 0578 00EBC000 		add	r0, r0, r0, lsl #3
 5902 057c FFF7FEFF 		bl	set_decimal.part.0
 5903              	.LVL653:
 294:src/display.c **** }
 5904              		.loc 1 294 3 is_stmt 1 view .LVU1864
 294:src/display.c **** }
 5905              		.loc 1 294 10 is_stmt 0 view .LVU1865
 5906 0580 CAE6     		b	.L561
 5907              	.LVL654:
 5908              	.L677:
 294:src/display.c **** }
 5909              		.loc 1 294 10 view .LVU1866
 5910              	.LBE413:
 5911              	.LBE414:
2283:src/display.c **** 	  } else {
 5912              		.loc 1 2283 6 is_stmt 1 view .LVU1867
2283:src/display.c **** 	  } else {
 5913              		.loc 1 2283 12 is_stmt 0 view .LVU1868
 5914 0582 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5915              	.LVL655:
 5916              	.LBB415:
 5917              	.LBI415:
 301:src/display.c ****   if (sep == SEP_NONE)
 5918              		.loc 1 301 14 is_stmt 1 view .LVU1869
 5919              	.LBB416:
 302:src/display.c ****     return res;
 5920              		.loc 1 302 3 view .LVU1870
 302:src/display.c ****     return res;
 5921              		.loc 1 302 6 is_stmt 0 view .LVU1871
 5922 0584 002A     		cmp	r2, #0
 5923 0586 DCD0     		beq	.L553
 304:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5924              		.loc 1 304 3 is_stmt 1 view .LVU1872
 304:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 5925              		.loc 1 304 6 is_stmt 0 view .LVU1873
 5926 0588 002C     		cmp	r4, #0
 5927 058a 00F02781 		beq	.L555
 305:src/display.c ****     else *res++ = '.';
 5928              		.loc 1 305 5 is_stmt 1 view .LVU1874
 305:src/display.c ****     else *res++ = '.';
 5929              		.loc 1 305 8 is_stmt 0 view .LVU1875
 5930 058e 012A     		cmp	r2, #1
 305:src/display.c ****     else *res++ = '.';
 5931              		.loc 1 305 27 is_stmt 1 view .LVU1876
 5932              	.LVL656:
 306:src/display.c ****   } else {
 5933              		.loc 1 306 17 is_stmt 0 view .LVU1877
ARM GAS  /tmp/ccdQiHBS.s 			page 196


 5934 0590 16BF     		itet	ne
 5935 0592 2E22     		movne	r2, #46
 5936              	.LVL657:
 305:src/display.c ****     else *res++ = '.';
 5937              		.loc 1 305 34 view .LVU1878
 5938 0594 04F8011B 		strbeq	r1, [r4], #1
 5939              	.LVL658:
 306:src/display.c ****   } else {
 5940              		.loc 1 306 10 is_stmt 1 view .LVU1879
 306:src/display.c ****   } else {
 5941              		.loc 1 306 17 is_stmt 0 view .LVU1880
 5942 0598 04F8012B 		strbne	r2, [r4], #1
 5943              	.LVL659:
 306:src/display.c ****   } else {
 5944              		.loc 1 306 17 view .LVU1881
 5945 059c D1E7     		b	.L553
 5946              	.LVL660:
 5947              	.L551:
 306:src/display.c ****   } else {
 5948              		.loc 1 306 17 view .LVU1882
 5949              	.LBE416:
 5950              	.LBE415:
 5951              	.LBB418:
 5952              	.LBB410:
 5953 059e AAF10900 		sub	r0, r10, #9
 5954 05a2 FFF7FEFF 		bl	set_decimal.part.0
 5955              	.LVL661:
 306:src/display.c ****   } else {
 5956              		.loc 1 306 17 view .LVU1883
 5957 05a6 544B     		ldr	r3, .L689+12
 5958 05a8 0446     		mov	r4, r0
 5959              	.LVL662:
 306:src/display.c ****   } else {
 5960              		.loc 1 306 17 view .LVU1884
 5961 05aa CAE7     		b	.L553
 5962              	.LVL663:
 5963              	.L557:
 306:src/display.c ****   } else {
 5964              		.loc 1 306 17 view .LVU1885
 5965              	.LBE410:
 5966              	.LBE418:
 5967              	.LBB419:
 5968              	.LBB406:
 334:src/display.c ****   return res;
 5969              		.loc 1 334 8 is_stmt 1 view .LVU1886
 5970 05ac 5046     		mov	r0, r10
 5971 05ae FFF7FEFF 		bl	set_dig
 5972              	.LVL664:
 334:src/display.c ****   return res;
 5973              		.loc 1 334 8 is_stmt 0 view .LVU1887
 5974 05b2 514B     		ldr	r3, .L689+12
 5975 05b4 9FE6     		b	.L558
 5976              	.LVL665:
 5977              	.L492:
 334:src/display.c ****   return res;
 5978              		.loc 1 334 8 view .LVU1888
 5979              	.LBE406:
ARM GAS  /tmp/ccdQiHBS.s 			page 197


 5980              	.LBE419:
2120:src/display.c **** 
 5981              		.loc 1 2120 2 is_stmt 1 view .LVU1889
2120:src/display.c **** 
 5982              		.loc 1 2120 45 view .LVU1890
2120:src/display.c **** 
 5983              		.loc 1 2120 2 is_stmt 0 view .LVU1891
 5984 05b6 1BF80110 		ldrb	r1, [fp, r1]	@ zero_extendqisi2
 5985 05ba 0029     		cmp	r1, #0
 5986 05bc 7FF401AE 		bne	.L563
 5987              	.LVL666:
 5988              	.L499:
2185:src/display.c **** 	  if (exp >= 0) {		// Some digits to left of decimal point
 5989              		.loc 1 2185 4 is_stmt 1 view .LVU1892
2186:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5990              		.loc 1 2186 4 view .LVU1893
2186:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5991              		.loc 1 2186 7 is_stmt 0 view .LVU1894
 5992 05c0 002E     		cmp	r6, #0
 5993 05c2 C0F21281 		blt	.L522
2186:src/display.c **** 	    for (i=0; i<=exp; i++) {
 5994              		.loc 1 2186 7 view .LVU1895
 5995 05c6 731C     		adds	r3, r6, #1
2188:src/display.c **** 		*obp++ = ',';
 5996              		.loc 1 2188 31 view .LVU1896
 5997 05c8 DFF824E1 		ldr	lr, .L689+4
 5998 05cc 0593     		str	r3, [sp, #20]
 5999 05ce 0BEB030C 		add	ip, fp, r3
2122:src/display.c **** 	switch (mode) {
 6000              		.loc 1 2122 4 view .LVU1897
 6001 05d2 5D46     		mov	r5, fp
1927:src/display.c **** 	int odig = 0;
 6002              		.loc 1 1927 15 view .LVU1898
 6003 05d4 3846     		mov	r0, r7
 6004 05d6 05E0     		b	.L523
 6005              	.LVL667:
 6006              	.L526:
2189:src/display.c **** 	      *obp++ = *p++;
 6007              		.loc 1 2189 3 is_stmt 1 view .LVU1899
2188:src/display.c **** 		*obp++ = ',';
 6008              		.loc 1 2188 18 is_stmt 0 view .LVU1900
 6009 05d8 0229     		cmp	r1, #2
2189:src/display.c **** 	      *obp++ = *p++;
 6010              		.loc 1 2189 10 view .LVU1901
 6011 05da 05BF     		ittet	eq
 6012 05dc 2C23     		moveq	r3, #44
 6013 05de 4370     		strbeq	r3, [r0, #1]
2190:src/display.c **** 	      odig++;
 6014              		.loc 1 2190 12 view .LVU1902
 6015 05e0 0130     		addne	r0, r0, #1
 6016              	.LVL668:
2189:src/display.c **** 	      *obp++ = *p++;
 6017              		.loc 1 2189 7 view .LVU1903
 6018 05e2 0230     		addeq	r0, r0, #2
 6019              	.LVL669:
 6020              	.L523:
2190:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccdQiHBS.s 			page 198


 6021              		.loc 1 2190 8 is_stmt 1 discriminator 2 view .LVU1904
2190:src/display.c **** 	      odig++;
 6022              		.loc 1 2190 15 is_stmt 0 discriminator 2 view .LVU1905
 6023 05e4 15F8013B 		ldrb	r3, [r5], #1	@ zero_extendqisi2
 6024              	.LVL670:
2188:src/display.c **** 		*obp++ = ',';
 6025              		.loc 1 2188 8 is_stmt 1 discriminator 2 view .LVU1906
2190:src/display.c **** 	      odig++;
 6026              		.loc 1 2190 15 is_stmt 0 discriminator 2 view .LVU1907
 6027 05e8 0370     		strb	r3, [r0]
2191:src/display.c **** 	    }
 6028              		.loc 1 2191 8 is_stmt 1 discriminator 2 view .LVU1908
 6029              	.LVL671:
2187:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6030              		.loc 1 2187 24 discriminator 2 view .LVU1909
2187:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6031              		.loc 1 2187 16 discriminator 2 view .LVU1910
2188:src/display.c **** 		*obp++ = ',';
 6032              		.loc 1 2188 31 is_stmt 0 discriminator 2 view .LVU1911
 6033 05ea ABEB0503 		sub	r3, fp, r5
 6034 05ee 3344     		add	r3, r3, r6
 6035 05f0 8EFB0381 		smull	r8, r1, lr, r3
 6036 05f4 A1EBE371 		sub	r1, r1, r3, asr #31
 6037 05f8 01EB4101 		add	r1, r1, r1, lsl #1
2187:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6038              		.loc 1 2187 6 discriminator 2 view .LVU1912
 6039 05fc AC45     		cmp	ip, r5
2188:src/display.c **** 		*obp++ = ',';
 6040              		.loc 1 2188 31 discriminator 2 view .LVU1913
 6041 05fe A3EB0101 		sub	r1, r3, r1
2187:src/display.c **** 	      if (i > 0 && (exp - i) % 3 == 2)
 6042              		.loc 1 2187 6 discriminator 2 view .LVU1914
 6043 0602 E9D1     		bne	.L526
2193:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6044              		.loc 1 2193 13 view .LVU1915
 6045 0604 2E23     		movs	r3, #46
2194:src/display.c **** 	      *obp++ = *p++;
 6046              		.loc 1 2194 6 view .LVU1916
 6047 0606 002A     		cmp	r2, #0
 6048 0608 059D     		ldr	r5, [sp, #20]
 6049              	.LVL672:
2193:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6050              		.loc 1 2193 6 is_stmt 1 view .LVU1917
2193:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6051              		.loc 1 2193 13 is_stmt 0 view .LVU1918
 6052 060a 4370     		strb	r3, [r0, #1]
2193:src/display.c **** 	    for (i=0; i<dd && j < SEGS_EXP_BASE; i++) {
 6053              		.loc 1 2193 10 view .LVU1919
 6054 060c 00F10208 		add	r8, r0, #2
 6055              	.LVL673:
2194:src/display.c **** 	      *obp++ = *p++;
 6056              		.loc 1 2194 6 is_stmt 1 view .LVU1920
2194:src/display.c **** 	      *obp++ = *p++;
 6057              		.loc 1 2194 16 view .LVU1921
2194:src/display.c **** 	      *obp++ = *p++;
 6058              		.loc 1 2194 6 is_stmt 0 view .LVU1922
 6059 0610 7FF778AF 		ble	.L511
ARM GAS  /tmp/ccdQiHBS.s 			page 199


 6060 0614 0130     		adds	r0, r0, #1
 6061 0616 0CEB0201 		add	r1, ip, r2
 6062              	.LVL674:
 6063              	.L527:
2195:src/display.c **** 	      odig++;
 6064              		.loc 1 2195 8 is_stmt 1 discriminator 4 view .LVU1923
2195:src/display.c **** 	      odig++;
 6065              		.loc 1 2195 15 is_stmt 0 discriminator 4 view .LVU1924
 6066 061a 1CF8013B 		ldrb	r3, [ip], #1	@ zero_extendqisi2
 6067              	.LVL675:
2195:src/display.c **** 	      odig++;
 6068              		.loc 1 2195 15 discriminator 4 view .LVU1925
 6069 061e 00F8013F 		strb	r3, [r0, #1]!
2196:src/display.c **** 	    }
 6070              		.loc 1 2196 8 is_stmt 1 discriminator 4 view .LVU1926
2194:src/display.c **** 	      *obp++ = *p++;
 6071              		.loc 1 2194 43 discriminator 4 view .LVU1927
2194:src/display.c **** 	      *obp++ = *p++;
 6072              		.loc 1 2194 16 discriminator 4 view .LVU1928
2194:src/display.c **** 	      *obp++ = *p++;
 6073              		.loc 1 2194 6 is_stmt 0 discriminator 4 view .LVU1929
 6074 0622 8C45     		cmp	ip, r1
 6075 0624 F9D1     		bne	.L527
 6076 0626 059B     		ldr	r3, [sp, #20]
 6077 0628 1344     		add	r3, r3, r2
 6078 062a 9044     		add	r8, r8, r2
 6079              	.LVL676:
2194:src/display.c **** 	      *obp++ = *p++;
 6080              		.loc 1 2194 6 discriminator 4 view .LVU1930
 6081 062c 1D46     		mov	r5, r3
 6082 062e 69E7     		b	.L511
 6083              	.LVL677:
 6084              	.L664:
1990:src/display.c **** 	  exp = z->exponent + z->digits - 1;
 6085              		.loc 1 1990 4 is_stmt 1 view .LVU1931
 6086 0630 324A     		ldr	r2, .L689+16
 6087 0632 5146     		mov	r1, r10
 6088 0634 5046     		mov	r0, r10
 6089 0636 FFF7FEFF 		bl	decNumberNormalize
 6090              	.LVL678:
1991:src/display.c **** 	  z->exponent = 0;
 6091              		.loc 1 1991 4 view .LVU1932
1991:src/display.c **** 	  z->exponent = 0;
 6092              		.loc 1 1991 22 is_stmt 0 view .LVU1933
 6093 063a DAE90023 		ldrd	r2, r3, [r10]
 6094 063e 03EB0208 		add	r8, r3, r2
1992:src/display.c **** 	}
 6095              		.loc 1 1992 16 view .LVU1934
 6096 0642 CAF80490 		str	r9, [r10, #4]
1991:src/display.c **** 	  z->exponent = 0;
 6097              		.loc 1 1991 8 view .LVU1935
 6098 0646 08F1FF38 		add	r8, r8, #-1
 6099              	.LVL679:
1992:src/display.c **** 	}
 6100              		.loc 1 1992 4 is_stmt 1 view .LVU1936
 6101 064a F7E4     		b	.L442
 6102              	.LVL680:
ARM GAS  /tmp/ccdQiHBS.s 			page 200


 6103              	.L673:
2080:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6104              		.loc 1 2080 6 view .LVU1937
2081:src/display.c **** 	      *p++ = *q++;
 6105              		.loc 1 2081 13 is_stmt 0 view .LVU1938
 6106 064c 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
2081:src/display.c **** 	      *p++ = *q++;
 6107              		.loc 1 2081 12 view .LVU1939
 6108 0650 A3F13002 		sub	r2, r3, #48
 6109 0654 092A     		cmp	r2, #9
2080:src/display.c **** 	    while (*q >= '0' && *q <= '9')
 6110              		.loc 1 2080 7 view .LVU1940
 6111 0656 08F10108 		add	r8, r8, #1
 6112              	.LVL681:
2081:src/display.c **** 	      *p++ = *q++;
 6113              		.loc 1 2081 6 is_stmt 1 view .LVU1941
2081:src/display.c **** 	      *p++ = *q++;
 6114              		.loc 1 2081 12 view .LVU1942
 6115 065a 3FF679AD 		bhi	.L472
 6116              	.LVL682:
 6117              	.L477:
2082:src/display.c **** 	  }
 6118              		.loc 1 2082 8 view .LVU1943
2082:src/display.c **** 	  }
 6119              		.loc 1 2082 13 is_stmt 0 view .LVU1944
 6120 065e 01F8013B 		strb	r3, [r1], #1
 6121              	.LVL683:
2081:src/display.c **** 	      *p++ = *q++;
 6122              		.loc 1 2081 12 is_stmt 1 view .LVU1945
2081:src/display.c **** 	      *p++ = *q++;
 6123              		.loc 1 2081 13 is_stmt 0 view .LVU1946
 6124 0662 18F8013F 		ldrb	r3, [r8, #1]!	@ zero_extendqisi2
2081:src/display.c **** 	      *p++ = *q++;
 6125              		.loc 1 2081 12 view .LVU1947
 6126 0666 A3F13002 		sub	r2, r3, #48
 6127 066a 092A     		cmp	r2, #9
 6128 066c F7D9     		bls	.L477
 6129 066e 6FE5     		b	.L472
 6130              	.LVL684:
 6131              	.L671:
2064:src/display.c **** 	for (; *q == '0'; q++);
 6132              		.loc 1 2064 4 is_stmt 1 view .LVU1948
1947:src/display.c **** 	int trimzeros = 0;
 6133              		.loc 1 1947 6 is_stmt 0 view .LVU1949
 6134 0670 0022     		movs	r2, #0
 6135 0672 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 6136 0676 0392     		str	r2, [sp, #12]
2064:src/display.c **** 	for (; *q == '0'; q++);
 6137              		.loc 1 2064 5 view .LVU1950
 6138 0678 08F10108 		add	r8, r8, #1
 6139              	.LVL685:
2064:src/display.c **** 	for (; *q == '0'; q++);
 6140              		.loc 1 2064 5 view .LVU1951
 6141 067c 3BE5     		b	.L467
 6142              	.LVL686:
 6143              	.L665:
1998:src/display.c **** 	    x[0] = '-';
ARM GAS  /tmp/ccdQiHBS.s 			page 201


 6144              		.loc 1 1998 34 discriminator 1 view .LVU1952
 6145 067e 6B20     		movs	r0, #107
 6146 0680 FFF7FEFF 		bl	get_user_flag
 6147              	.LVL687:
1998:src/display.c **** 	    x[0] = '-';
 6148              		.loc 1 1998 31 discriminator 1 view .LVU1953
 6149 0684 0028     		cmp	r0, #0
 6150 0686 3FF4EAAC 		beq	.L444
1999:src/display.c **** 	    x[1] = '0';
 6151              		.loc 1 1999 6 is_stmt 1 view .LVU1954
2000:src/display.c **** 	  } else
 6152              		.loc 1 2000 6 view .LVU1955
1999:src/display.c **** 	    x[1] = '0';
 6153              		.loc 1 1999 11 is_stmt 0 view .LVU1956
 6154 068a 43F22D03 		movw	r3, #12333
 6155 068e ADF82430 		strh	r3, [sp, #36]	@ movhi
2000:src/display.c **** 	  } else
 6156              		.loc 1 2000 11 view .LVU1957
 6157 0692 E7E4     		b	.L445
 6158              	.LVL688:
 6159              	.L669:
2057:src/display.c **** 	  CLR_MANT_SIGN;
 6160              		.loc 1 2057 4 is_stmt 1 view .LVU1958
 6161              	.LBB420:
 6162              	.LBI420:
 252:src/display.c **** {
 6163              		.loc 1 252 13 view .LVU1959
 6164              	.LBB421:
 254:src/display.c **** }
 6165              		.loc 1 254 3 view .LVU1960
 6166 0694 8220     		movs	r0, #130
 6167 0696 FFF7FEFF 		bl	clr_dot
 6168              	.LVL689:
 6169              	.LBE421:
 6170              	.LBE420:
2058:src/display.c **** 	}
 6171              		.loc 1 2058 4 view .LVU1961
 6172              	.LBB422:
 6173              	.LBI422:
 242:src/display.c **** {
 6174              		.loc 1 242 13 view .LVU1962
 6175              	.LBB423:
 244:src/display.c **** }
 6176              		.loc 1 244 3 view .LVU1963
 6177 069a 8120     		movs	r0, #129
 6178 069c FFF7FEFF 		bl	clr_dot
 6179              	.LVL690:
 245:src/display.c **** 
 6180              		.loc 1 245 1 is_stmt 0 view .LVU1964
 6181 06a0 1FE5     		b	.L465
 6182              	.LVL691:
 6183              	.L460:
 245:src/display.c **** 
 6184              		.loc 1 245 1 view .LVU1965
 6185              	.LBE423:
 6186              	.LBE422:
 6187              	.LBB424:
ARM GAS  /tmp/ccdQiHBS.s 			page 202


2019:src/display.c **** 
 6188              		.loc 1 2019 4 is_stmt 1 view .LVU1966
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6189              		.loc 1 2021 4 view .LVU1967
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6190              		.loc 1 2021 11 is_stmt 0 view .LVU1968
 6191 06a2 2A46     		mov	r2, r5
 6192 06a4 07A9     		add	r1, sp, #28
 6193 06a6 5046     		mov	r0, r10
 6194 06a8 FFF7FEFF 		bl	std_round_fix
 6195              	.LVL692:
 6196              	.LBE424:
1948:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6197              		.loc 1 1948 6 view .LVU1969
 6198 06ac 0023     		movs	r3, #0
 6199              	.LBB425:
2021:src/display.c **** 	  if (orig_mode != MODE_SIG0)
 6200              		.loc 1 2021 11 view .LVU1970
 6201 06ae 0546     		mov	r5, r0
 6202              	.LVL693:
2022:src/display.c **** 	    // allow zeros to be trimmed
 6203              		.loc 1 2022 4 is_stmt 1 view .LVU1971
 6204              	.LBE425:
1948:src/display.c **** #if SHOW_LARGE_EXPONENT <= 0
 6205              		.loc 1 1948 6 is_stmt 0 view .LVU1972
 6206 06b0 0493     		str	r3, [sp, #16]
 6207 06b2 F0E4     		b	.L566
 6208              	.LVL694:
 6209              	.L675:
2258:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6210              		.loc 1 2258 72 discriminator 2 view .LVU1973
 6211 06b4 06F2E732 		addw	r2, r6, #999
2258:src/display.c **** 	  *display_digits = 10; // Make space for four-digit exponent and exponent sign
 6212              		.loc 1 2258 58 discriminator 2 view .LVU1974
 6213 06b8 40F2CE73 		movw	r3, #1998
 6214 06bc 9A42     		cmp	r2, r3
 6215 06be 7FF6EBAD 		bls	.L543
2259:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6216              		.loc 1 2259 4 is_stmt 1 view .LVU1975
2259:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6217              		.loc 1 2259 20 is_stmt 0 view .LVU1976
 6218 06c2 019A     		ldr	r2, [sp, #4]
 6219 06c4 0A23     		movs	r3, #10
2260:src/display.c **** 	  return;
 6220              		.loc 1 2260 4 view .LVU1977
 6221 06c6 2146     		mov	r1, r4
 6222 06c8 5046     		mov	r0, r10
2259:src/display.c **** 	  set_x_dn(z, res, display_digits);
 6223              		.loc 1 2259 20 view .LVU1978
 6224 06ca 1360     		str	r3, [r2]
2260:src/display.c **** 	  return;
 6225              		.loc 1 2260 4 is_stmt 1 view .LVU1979
 6226 06cc FFF7FEFF 		bl	set_x_dn
 6227              	.LVL695:
2261:src/display.c **** 	}
 6228              		.loc 1 2261 4 view .LVU1980
 6229 06d0 24E6     		b	.L435
ARM GAS  /tmp/ccdQiHBS.s 			page 203


 6230              	.LVL696:
 6231              	.L546:
2273:src/display.c **** 	      SET_MANT_SIGN;
 6232              		.loc 1 2273 6 view .LVU1981
2273:src/display.c **** 	      SET_MANT_SIGN;
 6233              		.loc 1 2273 9 is_stmt 0 view .LVU1982
 6234 06d2 BAF1000F 		cmp	r10, #0
 6235 06d6 40F00781 		bne	.L549
2274:src/display.c **** 	    else
 6236              		.loc 1 2274 8 is_stmt 1 view .LVU1983
 6237              	.LBB426:
 6238              	.LBI426:
 237:src/display.c **** {
 6239              		.loc 1 237 13 view .LVU1984
 6240              	.LBB427:
 239:src/display.c **** }
 6241              		.loc 1 239 3 view .LVU1985
 6242 06da 8120     		movs	r0, #129
 6243 06dc FFF7FEFF 		bl	set_dot
 6244              	.LVL697:
 239:src/display.c **** }
 6245              		.loc 1 239 3 is_stmt 0 view .LVU1986
 6246              	.LBE427:
 6247              	.LBE426:
2279:src/display.c **** 	  if (c == '.') {
 6248              		.loc 1 2279 12 is_stmt 1 view .LVU1987
2279:src/display.c **** 	  if (c == '.') {
 6249              		.loc 1 2279 18 is_stmt 0 view .LVU1988
 6250 06e0 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 6251              	.LVL698:
2279:src/display.c **** 	  if (c == '.') {
 6252              		.loc 1 2279 2 view .LVU1989
 6253 06e4 0029     		cmp	r1, #0
 6254 06e6 7FF4F8AD 		bne	.L548
 6255 06ea 0CE6     		b	.L547
 6256              	.L690:
 6257              		.align	2
 6258              	.L689:
 6259 06ec 00000000 		.word	main_ram
 6260 06f0 56555555 		.word	1431655766
 6261 06f4 00000000 		.word	.LANCHOR1
 6262 06f8 00000000 		.word	.LANCHOR0
 6263 06fc 00000000 		.word	Ctx
 6264              	.LVL699:
 6265              	.L666:
2007:src/display.c **** 	  return;
 6266              		.loc 1 2007 4 is_stmt 1 view .LVU1990
 6267              	.LBB428:
 6268              	.LBI428:
1795:src/display.c **** 	const int dbl = is_dblmode();
 6269              		.loc 1 1795 19 view .LVU1991
 6270              	.LBB429:
1796:src/display.c **** 	char *p;
 6271              		.loc 1 1796 2 view .LVU1992
1796:src/display.c **** 	char *p;
 6272              		.loc 1 1796 18 is_stmt 0 view .LVU1993
 6273 0700 FFF7FEFF 		bl	is_dblmode
ARM GAS  /tmp/ccdQiHBS.s 			page 204


 6274              	.LVL700:
1812:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6275              		.loc 1 1812 5 view .LVU1994
 6276 0704 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 6277 0708 2D2B     		cmp	r3, #45
1796:src/display.c **** 	char *p;
 6278              		.loc 1 1796 18 view .LVU1995
 6279 070a 0446     		mov	r4, r0
 6280              	.LVL701:
1797:src/display.c **** 	int i, j;
 6281              		.loc 1 1797 2 is_stmt 1 view .LVU1996
1798:src/display.c **** 	char *upper_str;
 6282              		.loc 1 1798 2 view .LVU1997
1799:src/display.c **** 	enum separator_modes separator_mode;
 6283              		.loc 1 1799 2 view .LVU1998
1800:src/display.c **** 	char decimal_mark;
 6284              		.loc 1 1800 2 view .LVU1999
1801:src/display.c **** 	char thousands_sep;
 6285              		.loc 1 1801 2 view .LVU2000
1802:src/display.c **** #if !defined(FULL_NUMBER_GROUPING)
 6286              		.loc 1 1802 2 view .LVU2001
1808:src/display.c **** #endif
 6287              		.loc 1 1808 2 view .LVU2002
1810:src/display.c **** 
 6288              		.loc 1 1810 2 view .LVU2003
1812:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6289              		.loc 1 1812 2 view .LVU2004
1812:src/display.c **** #if defined(INCLUDE_FONT_ESCAPE) && defined(FULL_NUMBER_GROUPING)
 6290              		.loc 1 1812 5 is_stmt 0 view .LVU2005
 6291 070c 00F01681 		beq	.L683
1825:src/display.c **** 
 6292              		.loc 1 1825 16 view .LVU2006
 6293 0710 4FF0000A 		mov	r10, #0
 6294              	.LVL702:
 6295              	.L447:
1827:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6296              		.loc 1 1827 2 is_stmt 1 view .LVU2007
1827:src/display.c **** 	xset(p, '0', 34 - (p - x));
 6297              		.loc 1 1827 6 is_stmt 0 view .LVU2008
 6298 0714 0021     		movs	r1, #0
 6299 0716 3846     		mov	r0, r7
 6300 0718 FFF7FEFF 		bl	find_char
 6301              	.LVL703:
1828:src/display.c **** 
 6302              		.loc 1 1828 2 is_stmt 1 view .LVU2009
1828:src/display.c **** 
 6303              		.loc 1 1828 23 is_stmt 0 view .LVU2010
 6304 071c C21B     		subs	r2, r0, r7
1828:src/display.c **** 
 6305              		.loc 1 1828 2 view .LVU2011
 6306 071e C2F12202 		rsb	r2, r2, #34
 6307 0722 3021     		movs	r1, #48
 6308 0724 FFF7FEFF 		bl	xset
 6309              	.LVL704:
1830:src/display.c **** 	  separator_mode = SEP_COMMA;
 6310              		.loc 1 1830 2 is_stmt 1 view .LVU2012
1830:src/display.c **** 	  separator_mode = SEP_COMMA;
ARM GAS  /tmp/ccdQiHBS.s 			page 205


 6311              		.loc 1 1830 18 is_stmt 0 view .LVU2013
 6312 0728 A74A     		ldr	r2, .L691
1841:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6313              		.loc 1 1841 6 view .LVU2014
 6314 072a 337D     		ldrb	r3, [r6, #20]	@ zero_extendqisi2
1830:src/display.c **** 	  separator_mode = SEP_COMMA;
 6315              		.loc 1 1830 5 view .LVU2015
 6316 072c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1838:src/display.c **** 	}
 6317              		.loc 1 1838 18 view .LVU2016
 6318 072e 002A     		cmp	r2, #0
 6319 0730 15BF     		itete	ne
 6320 0732 4FF0020B 		movne	fp, #2
 6321 0736 2C26     		moveq	r6, #44
 6322 0738 2E26     		movne	r6, #46
 6323              	.LVL705:
1838:src/display.c **** 	}
 6324              		.loc 1 1838 18 view .LVU2017
 6325 073a 2E25     		moveq	r5, #46
 6326              	.LVL706:
1838:src/display.c **** 	}
 6327              		.loc 1 1838 18 view .LVU2018
 6328 073c 18BF     		it	ne
 6329 073e 2C25     		movne	r5, #44
 6330              	.LVL707:
1841:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6331              		.loc 1 1841 2 is_stmt 1 view .LVU2019
1841:src/display.c **** #ifdef INCLUDE_FONT_ESCAPE
 6332              		.loc 1 1841 5 is_stmt 0 view .LVU2020
 6333 0740 13F0380F 		tst	r3, #56
 6334 0744 40F0D680 		bne	.L684
1868:src/display.c **** 	  xcopy(x + 2, x + 1, 16);
 6335              		.loc 1 1868 4 is_stmt 1 view .LVU2021
 6336              	.LVL708:
1869:src/display.c **** 	  x[1] = decimal_mark;
 6337              		.loc 1 1869 4 view .LVU2022
 6338 0748 1022     		movs	r2, #16
 6339 074a 791C     		adds	r1, r7, #1
 6340 074c B81C     		adds	r0, r7, #2
 6341 074e FFF7FEFF 		bl	xcopy
 6342              	.LVL709:
1870:src/display.c **** 	  if (grouping) {
 6343              		.loc 1 1870 4 view .LVU2023
1872:src/display.c **** 	    x[5] = thousands_sep;
 6344              		.loc 1 1872 6 is_stmt 0 view .LVU2024
 6345 0752 0D22     		movs	r2, #13
 6346 0754 791D     		adds	r1, r7, #5
 6347 0756 B81D     		adds	r0, r7, #6
1870:src/display.c **** 	  if (grouping) {
 6348              		.loc 1 1870 9 view .LVU2025
 6349 0758 7D70     		strb	r5, [r7, #1]
1871:src/display.c **** 	    xcopy(x + 6, x + 5, 13);
 6350              		.loc 1 1871 4 is_stmt 1 view .LVU2026
1872:src/display.c **** 	    x[5] = thousands_sep;
 6351              		.loc 1 1872 6 view .LVU2027
 6352 075a FFF7FEFF 		bl	xcopy
 6353              	.LVL710:
ARM GAS  /tmp/ccdQiHBS.s 			page 206


1873:src/display.c **** 	    x += 9;
 6354              		.loc 1 1873 6 view .LVU2028
1874:src/display.c **** 	  }
 6355              		.loc 1 1874 8 is_stmt 0 view .LVU2029
 6356 075e 07F10905 		add	r5, r7, #9
 6357              	.LVL711:
1873:src/display.c **** 	    x += 9;
 6358              		.loc 1 1873 11 view .LVU2030
 6359 0762 7E71     		strb	r6, [r7, #5]
1874:src/display.c **** 	  }
 6360              		.loc 1 1874 6 is_stmt 1 view .LVU2031
 6361              	.LVL712:
1877:src/display.c **** 	    if (exp < 0) {
 6362              		.loc 1 1877 4 view .LVU2032
1877:src/display.c **** 	    if (exp < 0) {
 6363              		.loc 1 1877 7 is_stmt 0 view .LVU2033
 6364 0764 002C     		cmp	r4, #0
 6365 0766 00F0E780 		beq	.L451
1878:src/display.c **** 	      x[9] = '-';
 6366              		.loc 1 1878 6 is_stmt 1 view .LVU2034
1878:src/display.c **** 	      x[9] = '-';
 6367              		.loc 1 1878 9 is_stmt 0 view .LVU2035
 6368 076a B8F1000F 		cmp	r8, #0
1879:src/display.c **** 	      exp = -exp;
 6369              		.loc 1 1879 8 is_stmt 1 view .LVU2036
1880:src/display.c **** 	    }
 6370              		.loc 1 1880 8 view .LVU2037
1884:src/display.c **** 	    x[10] = '0' + j;
 6371              		.loc 1 1884 8 is_stmt 0 view .LVU2038
 6372 076e 974B     		ldr	r3, .L691+4
1886:src/display.c **** 	  }
 6373              		.loc 1 1886 18 view .LVU2039
 6374 0770 9749     		ldr	r1, .L691+8
1879:src/display.c **** 	      exp = -exp;
 6375              		.loc 1 1879 13 view .LVU2040
 6376 0772 B6BF     		itet	lt
 6377 0774 2D22     		movlt	r2, #45
1883:src/display.c **** 	    j = exp / 1000;
 6378              		.loc 1 1883 13 view .LVU2041
 6379 0776 2022     		movge	r2, #32
1880:src/display.c **** 	    }
 6380              		.loc 1 1880 12 view .LVU2042
 6381 0778 C8F10008 		rsblt	r8, r8, #0
 6382              	.LVL713:
1880:src/display.c **** 	    }
 6383              		.loc 1 1880 12 view .LVU2043
 6384 077c BA74     		strb	r2, [r7, #18]
1884:src/display.c **** 	    x[10] = '0' + j;
 6385              		.loc 1 1884 6 is_stmt 1 view .LVU2044
1884:src/display.c **** 	    x[10] = '0' + j;
 6386              		.loc 1 1884 8 is_stmt 0 view .LVU2045
 6387 077e A3FB0823 		umull	r2, r3, r3, r8
 6388 0782 9B09     		lsrs	r3, r3, #6
 6389              	.LVL714:
1885:src/display.c **** 	    exp -= 1000 * j;
 6390              		.loc 1 1885 6 is_stmt 1 view .LVU2046
1885:src/display.c **** 	    exp -= 1000 * j;
ARM GAS  /tmp/ccdQiHBS.s 			page 207


 6391              		.loc 1 1885 18 is_stmt 0 view .LVU2047
 6392 0784 03F13002 		add	r2, r3, #48
1886:src/display.c **** 	  }
 6393              		.loc 1 1886 10 view .LVU2048
 6394 0788 01FB0388 		mla	r8, r1, r3, r8
 6395              	.LVL715:
1885:src/display.c **** 	    exp -= 1000 * j;
 6396              		.loc 1 1885 12 view .LVU2049
 6397 078c FA74     		strb	r2, [r7, #19]
1886:src/display.c **** 	  }
 6398              		.loc 1 1886 6 is_stmt 1 view .LVU2050
 6399              	.LVL716:
 6400              	.L453:
1892:src/display.c **** 	  *x = 0;
 6401              		.loc 1 1892 4 view .LVU2051
 6402 078e 0B22     		movs	r2, #11
 6403 0790 2946     		mov	r1, r5
 6404 0792 07F10A00 		add	r0, r7, #10
 6405 0796 FFF7FEFF 		bl	xcopy
 6406              	.LVL717:
1893:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6407              		.loc 1 1893 4 view .LVU2052
1893:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6408              		.loc 1 1893 7 is_stmt 0 view .LVU2053
 6409 079a 0022     		movs	r2, #0
1894:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6410              		.loc 1 1894 4 view .LVU2054
 6411 079c 4046     		mov	r0, r8
 6412 079e 0121     		movs	r1, #1
1893:src/display.c **** 	  set_exp(exp, 1, CNULL);
 6413              		.loc 1 1893 7 view .LVU2055
 6414 07a0 7A72     		strb	r2, [r7, #9]
1894:src/display.c **** 	  i = 1 * SEGS_PER_DIGIT;
 6415              		.loc 1 1894 4 is_stmt 1 view .LVU2056
 6416 07a2 FFF7FEFF 		bl	set_exp
 6417              	.LVL718:
1895:src/display.c **** 	}
 6418              		.loc 1 1895 4 view .LVU2057
1895:src/display.c **** 	}
 6419              		.loc 1 1895 4 is_stmt 0 view .LVU2058
 6420 07a6 A7EB0A0A 		sub	r10, r7, r10
 6421              	.LVL719:
1895:src/display.c **** 	}
 6422              		.loc 1 1895 6 view .LVU2059
 6423 07aa 0924     		movs	r4, #9
 6424              	.LVL720:
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6425              		.loc 1 1898 11 is_stmt 1 view .LVU2060
 6426              	.L454:
1899:src/display.c **** 	  }
 6427              		.loc 1 1899 6 view .LVU2061
 6428              	.LBB430:
 6429              	.LBI430:
 301:src/display.c ****   if (sep == SEP_NONE)
 6430              		.loc 1 301 14 view .LVU2062
 6431              	.LBB431:
 302:src/display.c ****     return res;
ARM GAS  /tmp/ccdQiHBS.s 			page 208


 6432              		.loc 1 302 3 view .LVU2063
 304:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 6433              		.loc 1 304 3 view .LVU2064
 6434 07ac 2046     		mov	r0, r4
 6435 07ae 5946     		mov	r1, fp
 6436              	.LBE431:
 6437              	.LBE430:
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6438              		.loc 1 1898 38 is_stmt 0 view .LVU2065
 6439 07b0 1B34     		adds	r4, r4, #27
 6440              	.LVL721:
 6441              	.LBB433:
 6442              	.LBB432:
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6443              		.loc 1 1898 38 view .LVU2066
 6444 07b2 FFF7FEFF 		bl	set_separator.part.0
 6445              	.LVL722:
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6446              		.loc 1 1898 38 view .LVU2067
 6447              	.LBE432:
 6448              	.LBE433:
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6449              		.loc 1 1898 36 is_stmt 1 view .LVU2068
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6450              		.loc 1 1898 11 view .LVU2069
1898:src/display.c **** 	    set_separator(i, separator_mode, CNULL);
 6451              		.loc 1 1898 4 is_stmt 0 view .LVU2070
 6452 07b6 512C     		cmp	r4, #81
 6453 07b8 F8DD     		ble	.L454
 6454 07ba 6C1E     		subs	r4, r5, #1
 6455              	.LVL723:
 6456              	.L456:
1904:src/display.c **** 
 6457              		.loc 1 1904 4 is_stmt 1 view .LVU2071
 6458 07bc 4846     		mov	r0, r9
 6459 07be 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
1903:src/display.c **** 	  set_dig(j, x[i]);
 6460              		.loc 1 1903 33 is_stmt 0 view .LVU2072
 6461 07c2 09F10909 		add	r9, r9, #9
 6462              	.LVL724:
1904:src/display.c **** 
 6463              		.loc 1 1904 4 view .LVU2073
 6464 07c6 FFF7FEFF 		bl	set_dig
 6465              	.LVL725:
1903:src/display.c **** 	  set_dig(j, x[i]);
 6466              		.loc 1 1903 26 is_stmt 1 view .LVU2074
1903:src/display.c **** 	  set_dig(j, x[i]);
 6467              		.loc 1 1903 18 view .LVU2075
1903:src/display.c **** 	  set_dig(j, x[i]);
 6468              		.loc 1 1903 2 is_stmt 0 view .LVU2076
 6469 07ca B9F16C0F 		cmp	r9, #108
 6470 07ce F5D1     		bne	.L456
1906:src/display.c **** 	set_status(upper_str - negative);
 6471              		.loc 1 1906 2 is_stmt 1 view .LVU2077
1906:src/display.c **** 	set_status(upper_str - negative);
 6472              		.loc 1 1906 5 is_stmt 0 view .LVU2078
 6473 07d0 0023     		movs	r3, #0
ARM GAS  /tmp/ccdQiHBS.s 			page 209


1907:src/display.c ****       }
 6474              		.loc 1 1907 2 view .LVU2079
 6475 07d2 5046     		mov	r0, r10
1906:src/display.c **** 	set_status(upper_str - negative);
 6476              		.loc 1 1906 5 view .LVU2080
 6477 07d4 2B70     		strb	r3, [r5]
1907:src/display.c ****       }
 6478              		.loc 1 1907 2 is_stmt 1 view .LVU2081
 6479 07d6 FFF7FEFF 		bl	set_status
 6480              	.LVL726:
1908:src/display.c **** 
 6481              		.loc 1 1908 7 is_stmt 0 view .LVU2082
 6482 07da 9FE5     		b	.L435
 6483              	.LVL727:
 6484              	.L555:
1908:src/display.c **** 
 6485              		.loc 1 1908 7 view .LVU2083
 6486              	.LBE429:
 6487              	.LBE428:
 6488              	.LBB438:
 6489              	.LBB417:
 6490 07dc 1146     		mov	r1, r2
 6491              	.LVL728:
1908:src/display.c **** 
 6492              		.loc 1 1908 7 view .LVU2084
 6493 07de 5046     		mov	r0, r10
 6494 07e0 FFF7FEFF 		bl	set_separator.part.0
 6495              	.LVL729:
1908:src/display.c **** 
 6496              		.loc 1 1908 7 view .LVU2085
 6497 07e4 7B4B     		ldr	r3, .L691+12
 6498 07e6 0446     		mov	r4, r0
 6499              	.LVL730:
1908:src/display.c **** 
 6500              		.loc 1 1908 7 view .LVU2086
 6501 07e8 ABE6     		b	.L553
 6502              	.LVL731:
 6503              	.L522:
1908:src/display.c **** 
 6504              		.loc 1 1908 7 view .LVU2087
 6505              	.LBE417:
 6506              	.LBE438:
2199:src/display.c **** 	    odig++;
 6507              		.loc 1 2199 6 is_stmt 1 view .LVU2088
2200:src/display.c **** 	    *obp++ = '.';
 6508              		.loc 1 2200 6 view .LVU2089
2201:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6509              		.loc 1 2201 6 view .LVU2090
2199:src/display.c **** 	    odig++;
 6510              		.loc 1 2199 13 is_stmt 0 view .LVU2091
 6511 07ea 42F63063 		movw	r3, #11824
 6512 07ee ADF82430 		strh	r3, [sp, #36]	@ movhi
2202:src/display.c **** 	      *obp++ = '0';
 6513              		.loc 1 2202 6 is_stmt 1 view .LVU2092
 6514              	.LVL732:
2202:src/display.c **** 	      *obp++ = '0';
 6515              		.loc 1 2202 20 view .LVU2093
ARM GAS  /tmp/ccdQiHBS.s 			page 210


2202:src/display.c **** 	      *obp++ = '0';
 6516              		.loc 1 2202 6 is_stmt 0 view .LVU2094
 6517 07f2 731C     		adds	r3, r6, #1
 6518              	.LVL733:
2202:src/display.c **** 	      *obp++ = '0';
 6519              		.loc 1 2202 6 view .LVU2095
 6520 07f4 00F0DD80 		beq	.L685
 6521 07f8 C6F10102 		rsb	r2, r6, #1
2201:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6522              		.loc 1 2201 10 view .LVU2096
 6523 07fc 0DF12600 		add	r0, sp, #38
 6524              	.LVL734:
2201:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6525              		.loc 1 2201 10 view .LVU2097
 6526 0800 079D     		ldr	r5, [sp, #28]
 6527 0802 3A44     		add	r2, r2, r7
 6528 0804 0346     		mov	r3, r0
 6529              	.LVL735:
2203:src/display.c **** 	      odig++;
 6530              		.loc 1 2203 15 view .LVU2098
 6531 0806 3021     		movs	r1, #48
 6532              	.LVL736:
 6533              	.L530:
2203:src/display.c **** 	      odig++;
 6534              		.loc 1 2203 8 is_stmt 1 discriminator 3 view .LVU2099
2203:src/display.c **** 	      odig++;
 6535              		.loc 1 2203 15 is_stmt 0 discriminator 3 view .LVU2100
 6536 0808 03F8011B 		strb	r1, [r3], #1
 6537              	.LVL737:
2204:src/display.c **** 	      dd--;
 6538              		.loc 1 2204 8 is_stmt 1 discriminator 3 view .LVU2101
2205:src/display.c **** 	    }
 6539              		.loc 1 2205 8 discriminator 3 view .LVU2102
2202:src/display.c **** 	      *obp++ = '0';
 6540              		.loc 1 2202 25 discriminator 3 view .LVU2103
2202:src/display.c **** 	      *obp++ = '0';
 6541              		.loc 1 2202 20 discriminator 3 view .LVU2104
2202:src/display.c **** 	      *obp++ = '0';
 6542              		.loc 1 2202 6 is_stmt 0 discriminator 3 view .LVU2105
 6543 080c 9342     		cmp	r3, r2
 6544 080e FBD1     		bne	.L530
 6545 0810 7319     		adds	r3, r6, r5
 6546              	.LVL738:
2202:src/display.c **** 	      *obp++ = '0';
 6547              		.loc 1 2202 6 discriminator 3 view .LVU2106
 6548 0812 6FEA0608 		mvn	r8, r6
 6549 0816 0133     		adds	r3, r3, #1
 6550 0818 8044     		add	r8, r8, r0
 6551 081a 7542     		rsbs	r5, r6, #0
 6552              	.L529:
 6553              	.LVL739:
2207:src/display.c **** 	      *obp++ = *p++;
 6554              		.loc 1 2207 12 is_stmt 1 view .LVU2107
2207:src/display.c **** 	      *obp++ = *p++;
 6555              		.loc 1 2207 15 is_stmt 0 view .LVU2108
 6556 081c 5A1E     		subs	r2, r3, #1
2207:src/display.c **** 	      *obp++ = *p++;
ARM GAS  /tmp/ccdQiHBS.s 			page 211


 6557              		.loc 1 2207 12 view .LVU2109
 6558 081e 002B     		cmp	r3, #0
2207:src/display.c **** 	      *obp++ = *p++;
 6559              		.loc 1 2207 15 view .LVU2110
 6560 0820 0792     		str	r2, [sp, #28]
2207:src/display.c **** 	      *obp++ = *p++;
 6561              		.loc 1 2207 12 view .LVU2111
 6562 0822 7FF76FAE 		ble	.L511
 6563 0826 4344     		add	r3, r3, r8
 6564 0828 581E     		subs	r0, r3, #1
 6565 082a 08F1FF38 		add	r8, r8, #-1
 6566              	.LVL740:
 6567              	.L531:
2208:src/display.c **** 	      odig++;
 6568              		.loc 1 2208 8 is_stmt 1 view .LVU2112
2208:src/display.c **** 	      odig++;
 6569              		.loc 1 2208 15 is_stmt 0 view .LVU2113
 6570 082e 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6571              	.LVL741:
2208:src/display.c **** 	      odig++;
 6572              		.loc 1 2208 15 view .LVU2114
 6573 0832 08F8011F 		strb	r1, [r8, #1]!
2209:src/display.c **** 	    }
 6574              		.loc 1 2209 8 is_stmt 1 view .LVU2115
2207:src/display.c **** 	      *obp++ = *p++;
 6575              		.loc 1 2207 12 view .LVU2116
 6576 0836 8045     		cmp	r8, r0
 6577 0838 F9D1     		bne	.L531
 6578              	.LVL742:
2207:src/display.c **** 	      *obp++ = *p++;
 6579              		.loc 1 2207 12 is_stmt 0 view .LVU2117
 6580 083a 681C     		adds	r0, r5, #1
 6581 083c 4FF0FF31 		mov	r1, #-1
 6582 0840 1518     		adds	r5, r2, r0
 6583 0842 9846     		mov	r8, r3
 6584 0844 0791     		str	r1, [sp, #28]
 6585 0846 5DE6     		b	.L511
 6586              	.LVL743:
 6587              	.L534:
2225:src/display.c **** 	    odig++;
 6588              		.loc 1 2225 6 is_stmt 1 view .LVU2118
2225:src/display.c **** 	    odig++;
 6589              		.loc 1 2225 13 is_stmt 0 view .LVU2119
 6590 0848 9DF85830 		ldrb	r3, [sp, #88]	@ zero_extendqisi2
 6591 084c 8DF82430 		strb	r3, [sp, #36]
2226:src/display.c **** 	    dd--;
 6592              		.loc 1 2226 6 is_stmt 1 view .LVU2120
 6593              	.LVL744:
2227:src/display.c **** 	    exp--;
 6594              		.loc 1 2227 6 view .LVU2121
2227:src/display.c **** 	    exp--;
 6595              		.loc 1 2227 8 is_stmt 0 view .LVU2122
 6596 0850 013A     		subs	r2, r2, #1
2228:src/display.c **** 	  case -2:
 6597              		.loc 1 2228 6 is_stmt 1 view .LVU2123
2228:src/display.c **** 	  case -2:
 6598              		.loc 1 2228 9 is_stmt 0 view .LVU2124
ARM GAS  /tmp/ccdQiHBS.s 			page 212


 6599 0852 013E     		subs	r6, r6, #1
 6600              	.LVL745:
2228:src/display.c **** 	  case -2:
 6601              		.loc 1 2228 9 view .LVU2125
 6602 0854 0325     		movs	r5, #3
2225:src/display.c **** 	    odig++;
 6603              		.loc 1 2225 17 view .LVU2126
 6604 0856 0DF1590B 		add	fp, sp, #89
 6605              	.LVL746:
2225:src/display.c **** 	    odig++;
 6606              		.loc 1 2225 10 view .LVU2127
 6607 085a 0DF12501 		add	r1, sp, #37
 6608              	.LVL747:
 6609              	.L537:
2231:src/display.c **** 	    odig++;
 6610              		.loc 1 2231 6 is_stmt 1 view .LVU2128
2231:src/display.c **** 	    odig++;
 6611              		.loc 1 2231 13 is_stmt 0 view .LVU2129
 6612 085e 1BF8013B 		ldrb	r3, [fp], #1	@ zero_extendqisi2
 6613              	.LVL748:
2231:src/display.c **** 	    odig++;
 6614              		.loc 1 2231 13 view .LVU2130
 6615 0862 01F8013B 		strb	r3, [r1], #1
 6616              	.LVL749:
2232:src/display.c **** 	    dd--;
 6617              		.loc 1 2232 6 is_stmt 1 view .LVU2131
2233:src/display.c **** 	    exp--;
 6618              		.loc 1 2233 6 view .LVU2132
2233:src/display.c **** 	    exp--;
 6619              		.loc 1 2233 8 is_stmt 0 view .LVU2133
 6620 0866 013A     		subs	r2, r2, #1
2234:src/display.c **** 	  case 0:
 6621              		.loc 1 2234 6 is_stmt 1 view .LVU2134
2234:src/display.c **** 	  case 0:
 6622              		.loc 1 2234 9 is_stmt 0 view .LVU2135
 6623 0868 013E     		subs	r6, r6, #1
 6624              	.LVL750:
2234:src/display.c **** 	  case 0:
 6625              		.loc 1 2234 9 view .LVU2136
 6626 086a 2CE6     		b	.L501
 6627              	.LVL751:
 6628              	.L536:
2234:src/display.c **** 	  case 0:
 6629              		.loc 1 2234 9 view .LVU2137
 6630 086c 079A     		ldr	r2, [sp, #28]
2222:src/display.c **** 	  case -1:
 6631              		.loc 1 2222 16 view .LVU2138
 6632 086e 0225     		movs	r5, #2
1927:src/display.c **** 	int odig = 0;
 6633              		.loc 1 1927 15 view .LVU2139
 6634 0870 3946     		mov	r1, r7
 6635 0872 F4E7     		b	.L537
 6636              	.LVL752:
 6637              	.L482:
2090:src/display.c **** 	    /* We might have push the fixed decimals off the
 6638              		.loc 1 2090 6 is_stmt 1 view .LVU2140
2094:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
ARM GAS  /tmp/ccdQiHBS.s 			page 213


 6639              		.loc 1 2094 6 view .LVU2141
2094:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6640              		.loc 1 2094 9 is_stmt 0 view .LVU2142
 6641 0874 0299     		ldr	r1, [sp, #8]
2094:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6642              		.loc 1 2094 23 view .LVU2143
 6643 0876 9319     		adds	r3, r2, r6
2094:src/display.c **** 	      dd = (*display_digits - 1) - extra_digits;
 6644              		.loc 1 2094 9 view .LVU2144
 6645 0878 9942     		cmp	r1, r3
2095:src/display.c **** 	  }
 6646              		.loc 1 2095 8 is_stmt 1 view .LVU2145
2095:src/display.c **** 	  }
 6647              		.loc 1 2095 30 is_stmt 0 view .LVU2146
 6648 087a DFBF     		itttt	le
 6649 087c 029B     		ldrle	r3, [sp, #8]
 6650 087e 03F1FF32 		addle	r2, r3, #-1
2095:src/display.c **** 	  }
 6651              		.loc 1 2095 35 view .LVU2147
 6652 0882 921B     		suble	r2, r2, r6
2095:src/display.c **** 	  }
 6653              		.loc 1 2095 11 view .LVU2148
 6654 0884 0792     		strle	r2, [sp, #28]
 6655 0886 3146     		mov	r1, r6
 6656 0888 6AE4     		b	.L479
 6657              	.LVL753:
 6658              	.L507:
2134:src/display.c **** 	      odig++;
 6659              		.loc 1 2134 8 is_stmt 1 view .LVU2149
2134:src/display.c **** 	      odig++;
 6660              		.loc 1 2134 15 is_stmt 0 view .LVU2150
 6661 088a 9DF85810 		ldrb	r1, [sp, #88]	@ zero_extendqisi2
 6662 088e 8DF82410 		strb	r1, [sp, #36]
2135:src/display.c **** 	      dd--;
 6663              		.loc 1 2135 8 is_stmt 1 view .LVU2151
 6664              	.LVL754:
2136:src/display.c **** 	      exp--;
 6665              		.loc 1 2136 8 view .LVU2152
2136:src/display.c **** 	      exp--;
 6666              		.loc 1 2136 10 is_stmt 0 view .LVU2153
 6667 0892 013A     		subs	r2, r2, #1
2137:src/display.c **** 	    case -2:
 6668              		.loc 1 2137 8 is_stmt 1 view .LVU2154
2137:src/display.c **** 	    case -2:
 6669              		.loc 1 2137 11 is_stmt 0 view .LVU2155
 6670 0894 013E     		subs	r6, r6, #1
 6671              	.LVL755:
2137:src/display.c **** 	    case -2:
 6672              		.loc 1 2137 11 view .LVU2156
 6673 0896 0325     		movs	r5, #3
2134:src/display.c **** 	      odig++;
 6674              		.loc 1 2134 19 view .LVU2157
 6675 0898 0DF1590B 		add	fp, sp, #89
 6676              	.LVL756:
2134:src/display.c **** 	      odig++;
 6677              		.loc 1 2134 12 view .LVU2158
 6678 089c 0DF12501 		add	r1, sp, #37
ARM GAS  /tmp/ccdQiHBS.s 			page 214


 6679              	.LVL757:
 6680              	.L510:
2140:src/display.c **** 	      odig++;
 6681              		.loc 1 2140 8 is_stmt 1 view .LVU2159
2140:src/display.c **** 	      odig++;
 6682              		.loc 1 2140 15 is_stmt 0 view .LVU2160
 6683 08a0 1BF8010B 		ldrb	r0, [fp], #1	@ zero_extendqisi2
 6684              	.LVL758:
2140:src/display.c **** 	      odig++;
 6685              		.loc 1 2140 15 view .LVU2161
 6686 08a4 01F8010B 		strb	r0, [r1], #1
 6687              	.LVL759:
2141:src/display.c **** 	      dd--;
 6688              		.loc 1 2141 8 is_stmt 1 view .LVU2162
2142:src/display.c **** 	      exp--;
 6689              		.loc 1 2142 8 view .LVU2163
2143:src/display.c **** 	    case 0:
 6690              		.loc 1 2143 8 view .LVU2164
2142:src/display.c **** 	      exp--;
 6691              		.loc 1 2142 10 is_stmt 0 view .LVU2165
 6692 08a8 013A     		subs	r2, r2, #1
 6693 08aa 0792     		str	r2, [sp, #28]
2143:src/display.c **** 	    case 0:
 6694              		.loc 1 2143 11 view .LVU2166
 6695 08ac 013E     		subs	r6, r6, #1
 6696              	.LVL760:
 6697              	.L506:
2145:src/display.c **** 	    };
 6698              		.loc 1 2145 8 is_stmt 1 view .LVU2167
2146:src/display.c **** 	    *obp++ = *p++;
 6699              		.loc 1 2146 7 view .LVU2168
2147:src/display.c **** 	    odig++;
 6700              		.loc 1 2147 6 view .LVU2169
2147:src/display.c **** 	    odig++;
 6701              		.loc 1 2147 17 is_stmt 0 view .LVU2170
 6702 08ae 5A46     		mov	r2, fp
 6703              	.LVL761:
2147:src/display.c **** 	    odig++;
 6704              		.loc 1 2147 13 view .LVU2171
 6705 08b0 8846     		mov	r8, r1
 6706 08b2 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6707              	.LVL762:
2147:src/display.c **** 	    odig++;
 6708              		.loc 1 2147 13 view .LVU2172
 6709 08b6 08F8020B 		strb	r0, [r8], #2
2148:src/display.c **** 	    *obp++ = '.';
 6710              		.loc 1 2148 6 is_stmt 1 view .LVU2173
2149:src/display.c **** 	    for (i=1; i<count; i++) {
 6711              		.loc 1 2149 6 view .LVU2174
 6712              	.LVL763:
2150:src/display.c **** 	      *obp++ = *p++;
 6713              		.loc 1 2150 6 is_stmt 0 view .LVU2175
 6714 08ba 012B     		cmp	r3, #1
2149:src/display.c **** 	    for (i=1; i<count; i++) {
 6715              		.loc 1 2149 13 view .LVU2176
 6716 08bc 4FF02E00 		mov	r0, #46
 6717 08c0 4870     		strb	r0, [r1, #1]
ARM GAS  /tmp/ccdQiHBS.s 			page 215


2150:src/display.c **** 	      *obp++ = *p++;
 6718              		.loc 1 2150 6 is_stmt 1 view .LVU2177
 6719              	.LVL764:
2150:src/display.c **** 	      *obp++ = *p++;
 6720              		.loc 1 2150 16 view .LVU2178
2150:src/display.c **** 	      *obp++ = *p++;
 6721              		.loc 1 2150 6 is_stmt 0 view .LVU2179
 6722 08c2 32DD     		ble	.L581
2150:src/display.c **** 	      *obp++ = *p++;
 6723              		.loc 1 2150 6 view .LVU2180
 6724 08c4 0131     		adds	r1, r1, #1
 6725 08c6 9B44     		add	fp, fp, r3
 6726              	.LVL765:
 6727              	.L512:
2151:src/display.c **** 	      odig++;
 6728              		.loc 1 2151 8 is_stmt 1 discriminator 3 view .LVU2181
2151:src/display.c **** 	      odig++;
 6729              		.loc 1 2151 15 is_stmt 0 discriminator 3 view .LVU2182
 6730 08c8 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 6731              	.LVL766:
2151:src/display.c **** 	      odig++;
 6732              		.loc 1 2151 15 discriminator 3 view .LVU2183
 6733 08cc 01F8010F 		strb	r0, [r1, #1]!
2152:src/display.c **** 	    }
 6734              		.loc 1 2152 8 is_stmt 1 discriminator 3 view .LVU2184
2150:src/display.c **** 	      *obp++ = *p++;
 6735              		.loc 1 2150 25 discriminator 3 view .LVU2185
2150:src/display.c **** 	      *obp++ = *p++;
 6736              		.loc 1 2150 16 discriminator 3 view .LVU2186
2150:src/display.c **** 	      *obp++ = *p++;
 6737              		.loc 1 2150 6 is_stmt 0 discriminator 3 view .LVU2187
 6738 08d0 5A45     		cmp	r2, fp
 6739 08d2 F9D1     		bne	.L512
 6740 08d4 013B     		subs	r3, r3, #1
 6741              	.LVL767:
2150:src/display.c **** 	      *obp++ = *p++;
 6742              		.loc 1 2150 6 discriminator 3 view .LVU2188
 6743 08d6 9844     		add	r8, r8, r3
 6744 08d8 1D44     		add	r5, r5, r3
2154:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6745              		.loc 1 2154 15 view .LVU2189
 6746 08da 4FF00109 		mov	r9, #1
 6747 08de 11E6     		b	.L511
 6748              	.LVL768:
 6749              	.L509:
2154:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6750              		.loc 1 2154 15 view .LVU2190
 6751 08e0 079A     		ldr	r2, [sp, #28]
2131:src/display.c **** 	    case -1:
 6752              		.loc 1 2131 24 view .LVU2191
 6753 08e2 0225     		movs	r5, #2
1927:src/display.c **** 	int odig = 0;
 6754              		.loc 1 1927 15 view .LVU2192
 6755 08e4 3946     		mov	r1, r7
 6756 08e6 DBE7     		b	.L510
 6757              	.LVL769:
 6758              	.L549:
ARM GAS  /tmp/ccdQiHBS.s 			page 216


2276:src/display.c **** 	  }
 6759              		.loc 1 2276 8 is_stmt 1 view .LVU2193
 6760 08e8 2D21     		movs	r1, #45
 6761 08ea AAF10900 		sub	r0, r10, #9
 6762 08ee FFF7FEFF 		bl	set_dig
 6763              	.LVL770:
 6764 08f2 ECE4     		b	.L545
 6765              	.LVL771:
 6766              	.L684:
 6767              	.LBB439:
 6768              	.LBB436:
 6769              	.LBB434:
1843:src/display.c **** 	    '\007', '\341', ',', '\006', '\007', '\341', ',', '\006', '\006' };
 6770              		.loc 1 1843 4 view .LVU2194
1846:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6771              		.loc 1 1846 4 view .LVU2195
1846:src/display.c **** 	  xcopy(upper_str, small_dots, 13);
 6772              		.loc 1 1846 14 is_stmt 0 view .LVU2196
 6773 08f4 07F1030A 		add	r10, r7, #3
 6774              	.LVL772:
1847:src/display.c **** 	  if (grouping) {
 6775              		.loc 1 1847 4 is_stmt 1 view .LVU2197
 6776 08f8 3749     		ldr	r1, .L691+16
 6777 08fa 0D22     		movs	r2, #13
 6778 08fc 5046     		mov	r0, r10
 6779 08fe FFF7FEFF 		bl	xcopy
 6780              	.LVL773:
1848:src/display.c **** 	    xcopy(upper_str + 13 + 4, upper_str + 13 + 3, 19);
 6781              		.loc 1 1848 4 view .LVU2198
1849:src/display.c **** 	    upper_str[13 + 3] = thousands_sep;
 6782              		.loc 1 1849 6 view .LVU2199
 6783 0902 1322     		movs	r2, #19
 6784 0904 B918     		adds	r1, r7, r2
 6785 0906 07F11400 		add	r0, r7, #20
 6786 090a FFF7FEFF 		bl	xcopy
 6787              	.LVL774:
1850:src/display.c **** 	    x += 3 + 13 + 7;
 6788              		.loc 1 1850 6 view .LVU2200
1851:src/display.c **** 	  }
 6789              		.loc 1 1851 8 is_stmt 0 view .LVU2201
 6790 090e 07F11705 		add	r5, r7, #23
 6791              	.LVL775:
1850:src/display.c **** 	    x += 3 + 13 + 7;
 6792              		.loc 1 1850 24 view .LVU2202
 6793 0912 FE74     		strb	r6, [r7, #19]
1851:src/display.c **** 	  }
 6794              		.loc 1 1851 6 is_stmt 1 view .LVU2203
 6795              	.LVL776:
1864:src/display.c **** 	  i = 3 * SEGS_PER_DIGIT;
 6796              		.loc 1 1864 4 view .LVU2204
1865:src/display.c **** 	}
 6797              		.loc 1 1865 4 view .LVU2205
1865:src/display.c **** 	}
 6798              		.loc 1 1865 6 is_stmt 0 view .LVU2206
 6799 0914 1B24     		movs	r4, #27
 6800              	.LVL777:
1865:src/display.c **** 	}
ARM GAS  /tmp/ccdQiHBS.s 			page 217


 6801              		.loc 1 1865 6 view .LVU2207
 6802              	.LBE434:
 6803 0916 49E7     		b	.L454
 6804              	.LVL778:
 6805              	.L680:
1865:src/display.c **** 	}
 6806              		.loc 1 1865 6 view .LVU2208
 6807              	.LBE436:
 6808              	.LBE439:
1964:src/display.c **** 	      return;
 6809              		.loc 1 1964 8 is_stmt 1 view .LVU2209
 6810 0918 5046     		mov	r0, r10
 6811 091a FFF7FEFF 		bl	set_x_hms
 6812              	.LVL779:
1965:src/display.c **** 	    }
 6813              		.loc 1 1965 8 view .LVU2210
 6814 091e FDE4     		b	.L435
 6815              	.LVL780:
 6816              	.L579:
2126:src/display.c **** 	  if (count != *display_digits)
 6817              		.loc 1 2126 4 is_stmt 0 view .LVU2211
 6818 0920 029B     		ldr	r3, [sp, #8]
 6819 0922 72E4     		b	.L502
 6820              	.LVL781:
 6821              	.L580:
2131:src/display.c **** 	    case -1:
 6822              		.loc 1 2131 24 view .LVU2212
 6823 0924 0125     		movs	r5, #1
 6824 0926 3946     		mov	r1, r7
 6825 0928 C1E7     		b	.L506
 6826              	.LVL782:
 6827              	.L581:
2154:src/display.c **** 	  } else if (exp >= 0) {  // Some digits to left of decimal point
 6828              		.loc 1 2154 15 view .LVU2213
 6829 092a 4FF00109 		mov	r9, #1
 6830 092e E9E5     		b	.L511
 6831              	.LVL783:
 6832              	.L485:
2104:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6833              		.loc 1 2104 4 is_stmt 1 view .LVU2214
2104:src/display.c **** 	    for (r = mantissa; *r == '9'; *r++ = '0');
 6834              		.loc 1 2104 7 is_stmt 0 view .LVU2215
 6835 0930 5B45     		cmp	r3, fp
 6836 0932 7FF42FAC 		bne	.L564
 6837 0936 4DE5     		b	.L565
 6838              	.LVL784:
 6839              	.L451:
 6840              	.LBB440:
 6841              	.LBB437:
1889:src/display.c **** 	    x[10] = '\0';
 6842              		.loc 1 1889 6 is_stmt 1 view .LVU2216
1890:src/display.c **** 	  }
 6843              		.loc 1 1890 6 view .LVU2217
1889:src/display.c **** 	    x[10] = '\0';
 6844              		.loc 1 1889 11 is_stmt 0 view .LVU2218
 6845 0938 7C82     		strh	r4, [r7, #18]	@ movhi
 6846 093a 28E7     		b	.L453
ARM GAS  /tmp/ccdQiHBS.s 			page 218


 6847              	.LVL785:
 6848              	.L683:
 6849              	.LBB435:
1814:src/display.c **** 
 6850              		.loc 1 1814 4 is_stmt 1 view .LVU2219
1816:src/display.c **** 	  xcopy(x, small_minus, 4);
 6851              		.loc 1 1816 4 view .LVU2220
 6852 093c 2222     		movs	r2, #34
 6853 093e 0DF12501 		add	r1, sp, #37
 6854 0942 0AA8     		add	r0, sp, #40
 6855              	.LVL786:
1816:src/display.c **** 	  xcopy(x, small_minus, 4);
 6856              		.loc 1 1816 4 is_stmt 0 view .LVU2221
 6857 0944 FFF7FEFF 		bl	xcopy
 6858              	.LVL787:
1817:src/display.c **** 	  x += 4;
 6859              		.loc 1 1817 4 is_stmt 1 view .LVU2222
 6860 0948 3846     		mov	r0, r7
 6861 094a 2449     		ldr	r1, .L691+20
 6862 094c 0422     		movs	r2, #4
 6863 094e FFF7FEFF 		bl	xcopy
 6864              	.LVL788:
1818:src/display.c **** 	  negative = 4;
 6865              		.loc 1 1818 4 view .LVU2223
1819:src/display.c **** #else
 6866              		.loc 1 1819 4 view .LVU2224
1818:src/display.c **** 	  negative = 4;
 6867              		.loc 1 1818 6 is_stmt 0 view .LVU2225
 6868 0952 0AAF     		add	r7, sp, #40
 6869              	.LVL789:
1819:src/display.c **** #else
 6870              		.loc 1 1819 13 view .LVU2226
 6871 0954 4FF0040A 		mov	r10, #4
 6872              	.LVL790:
1819:src/display.c **** #else
 6873              		.loc 1 1819 13 view .LVU2227
 6874              	.LBE435:
 6875 0958 DCE6     		b	.L447
 6876              	.LVL791:
 6877              	.L513:
1819:src/display.c **** #else
 6878              		.loc 1 1819 13 view .LVU2228
 6879              	.LBE437:
 6880              	.LBE440:
2170:src/display.c **** 	    odig++;
 6881              		.loc 1 2170 6 is_stmt 1 view .LVU2229
2171:src/display.c **** 	    *obp++ = '.';
 6882              		.loc 1 2171 6 view .LVU2230
2172:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6883              		.loc 1 2172 6 view .LVU2231
2170:src/display.c **** 	    odig++;
 6884              		.loc 1 2170 13 is_stmt 0 view .LVU2232
 6885 095a 42F63062 		movw	r2, #11824
 6886 095e ADF82420 		strh	r2, [sp, #36]	@ movhi
2173:src/display.c **** 	      *obp++ = '0';
 6887              		.loc 1 2173 6 is_stmt 1 view .LVU2233
 6888              	.LVL792:
ARM GAS  /tmp/ccdQiHBS.s 			page 219


2173:src/display.c **** 	      *obp++ = '0';
 6889              		.loc 1 2173 20 view .LVU2234
2173:src/display.c **** 	      *obp++ = '0';
 6890              		.loc 1 2173 6 is_stmt 0 view .LVU2235
 6891 0962 721C     		adds	r2, r6, #1
 6892              	.LVL793:
2173:src/display.c **** 	      *obp++ = '0';
 6893              		.loc 1 2173 6 view .LVU2236
 6894 0964 2AD0     		beq	.L582
 6895 0966 C6F10101 		rsb	r1, r6, #1
2172:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6896              		.loc 1 2172 10 view .LVU2237
 6897 096a 0DF12600 		add	r0, sp, #38
 6898              	.LVL794:
2172:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6899              		.loc 1 2172 10 view .LVU2238
 6900 096e 3944     		add	r1, r1, r7
 6901 0970 0246     		mov	r2, r0
 6902              	.LVL795:
2174:src/display.c **** 	      odig++;
 6903              		.loc 1 2174 15 view .LVU2239
 6904 0972 3025     		movs	r5, #48
 6905              	.LVL796:
 6906              	.L520:
2174:src/display.c **** 	      odig++;
 6907              		.loc 1 2174 8 is_stmt 1 discriminator 3 view .LVU2240
2174:src/display.c **** 	      odig++;
 6908              		.loc 1 2174 15 is_stmt 0 discriminator 3 view .LVU2241
 6909 0974 02F8015B 		strb	r5, [r2], #1
 6910              	.LVL797:
2175:src/display.c **** 	    }
 6911              		.loc 1 2175 8 is_stmt 1 discriminator 3 view .LVU2242
2173:src/display.c **** 	      *obp++ = '0';
 6912              		.loc 1 2173 25 discriminator 3 view .LVU2243
2173:src/display.c **** 	      *obp++ = '0';
 6913              		.loc 1 2173 20 discriminator 3 view .LVU2244
2173:src/display.c **** 	      *obp++ = '0';
 6914              		.loc 1 2173 6 is_stmt 0 discriminator 3 view .LVU2245
 6915 0978 8A42     		cmp	r2, r1
 6916 097a FBD1     		bne	.L520
 6917 097c 6FEA0608 		mvn	r8, r6
 6918 0980 8044     		add	r8, r8, r0
 6919 0982 7542     		rsbs	r5, r6, #0
 6920              	.LVL798:
 6921              	.L519:
2177:src/display.c **** 	      *obp++ = *p++;
 6922              		.loc 1 2177 16 is_stmt 1 view .LVU2246
2177:src/display.c **** 	      *obp++ = *p++;
 6923              		.loc 1 2177 6 is_stmt 0 view .LVU2247
 6924 0984 002B     		cmp	r3, #0
 6925 0986 7FF7BDAD 		ble	.L511
 6926 098a 581E     		subs	r0, r3, #1
 6927 098c 4044     		add	r0, r0, r8
 6928 098e 08F1FF32 		add	r2, r8, #-1
 6929              	.LVL799:
 6930              	.L521:
2178:src/display.c **** 	      odig++;
ARM GAS  /tmp/ccdQiHBS.s 			page 220


 6931              		.loc 1 2178 8 is_stmt 1 discriminator 3 view .LVU2248
2178:src/display.c **** 	      odig++;
 6932              		.loc 1 2178 15 is_stmt 0 discriminator 3 view .LVU2249
 6933 0992 1BF8011B 		ldrb	r1, [fp], #1	@ zero_extendqisi2
 6934              	.LVL800:
2178:src/display.c **** 	      odig++;
 6935              		.loc 1 2178 15 discriminator 3 view .LVU2250
 6936 0996 02F8011F 		strb	r1, [r2, #1]!
2179:src/display.c **** 	    }
 6937              		.loc 1 2179 8 is_stmt 1 discriminator 3 view .LVU2251
2177:src/display.c **** 	      *obp++ = *p++;
 6938              		.loc 1 2177 25 discriminator 3 view .LVU2252
 6939              	.LVL801:
2177:src/display.c **** 	      *obp++ = *p++;
 6940              		.loc 1 2177 16 discriminator 3 view .LVU2253
2177:src/display.c **** 	      *obp++ = *p++;
 6941              		.loc 1 2177 6 is_stmt 0 discriminator 3 view .LVU2254
 6942 099a 9042     		cmp	r0, r2
 6943 099c F9D1     		bne	.L521
 6944              	.LVL802:
2177:src/display.c **** 	      *obp++ = *p++;
 6945              		.loc 1 2177 6 discriminator 3 view .LVU2255
 6946 099e 9844     		add	r8, r8, r3
 6947              	.LVL803:
2177:src/display.c **** 	      *obp++ = *p++;
 6948              		.loc 1 2177 6 discriminator 3 view .LVU2256
 6949 09a0 1D44     		add	r5, r5, r3
 6950 09a2 AFE5     		b	.L511
 6951              	.LVL804:
 6952              	.L682:
2120:src/display.c **** 
 6953              		.loc 1 2120 2 is_stmt 1 view .LVU2257
 6954 09a4 1BF80E10 		ldrb	r1, [fp, lr]	@ zero_extendqisi2
2120:src/display.c **** 
 6955              		.loc 1 2120 9 is_stmt 0 view .LVU2258
 6956 09a8 0BEB0E03 		add	r3, fp, lr
 6957              	.LVL805:
2120:src/display.c **** 
 6958              		.loc 1 2120 45 is_stmt 1 view .LVU2259
2120:src/display.c **** 
 6959              		.loc 1 2120 2 is_stmt 0 view .LVU2260
 6960 09ac 51B1     		cbz	r1, .L686
2109:src/display.c **** 	      extra_digits = 0;
 6961              		.loc 1 2109 37 view .LVU2261
 6962 09ae 0225     		movs	r5, #2
 6963 09b0 07E4     		b	.L563
 6964              	.LVL806:
 6965              	.L685:
2109:src/display.c **** 	      extra_digits = 0;
 6966              		.loc 1 2109 37 view .LVU2262
 6967 09b2 079B     		ldr	r3, [sp, #28]
 6968              	.LVL807:
2200:src/display.c **** 	    *obp++ = '.';
 6969              		.loc 1 2200 10 view .LVU2263
 6970 09b4 0125     		movs	r5, #1
2201:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6971              		.loc 1 2201 10 view .LVU2264
ARM GAS  /tmp/ccdQiHBS.s 			page 221


 6972 09b6 0DF12608 		add	r8, sp, #38
 6973              	.LVL808:
2201:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6974              		.loc 1 2201 10 view .LVU2265
 6975 09ba 2FE7     		b	.L529
 6976              	.LVL809:
 6977              	.L582:
2171:src/display.c **** 	    *obp++ = '.';
 6978              		.loc 1 2171 10 view .LVU2266
 6979 09bc 0125     		movs	r5, #1
2172:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6980              		.loc 1 2172 10 view .LVU2267
 6981 09be 0DF12608 		add	r8, sp, #38
 6982              	.LVL810:
2172:src/display.c **** 	    for (i=exp+1; i<0; i++) {
 6983              		.loc 1 2172 10 view .LVU2268
 6984 09c2 DFE7     		b	.L519
 6985              	.LVL811:
 6986              	.L686:
1927:src/display.c **** 	int odig = 0;
 6987              		.loc 1 1927 15 view .LVU2269
 6988 09c4 3946     		mov	r1, r7
 6989 09c6 7EE5     		b	.L501
 6990              	.L692:
 6991              		.align	2
 6992              	.L691:
 6993 09c8 00000000 		.word	.LANCHOR1
 6994 09cc D34D6210 		.word	274877907
 6995 09d0 18FCFFFF 		.word	-1000
 6996 09d4 00000000 		.word	.LANCHOR0
 6997 09d8 00000000 		.word	.LANCHOR11
 6998 09dc 00000000 		.word	.LANCHOR10
 6999              		.cfi_endproc
 7000              	.LFE27:
 7002              		.section	.text.set_x,"ax",%progbits
 7003              		.align	1
 7004              		.p2align 2,,3
 7005              		.syntax unified
 7006              		.thumb
 7007              		.thumb_func
 7008              		.fpu fpv4-sp-d16
 7010              	set_x:
 7011              	.LVL812:
 7012              	.LFB26:
1915:src/display.c **** 	decNumber z;
 7013              		.loc 1 1915 66 is_stmt 1 view -0
 7014              		.cfi_startproc
 7015              		@ args = 0, pretend = 0, frame = 40
 7016              		@ frame_needed = 0, uses_anonymous_args = 0
1916:src/display.c **** 	int digits = DISPLAY_DIGITS;
 7017              		.loc 1 1916 2 view .LVU2271
1917:src/display.c **** 
 7018              		.loc 1 1917 2 view .LVU2272
1915:src/display.c **** 	decNumber z;
 7019              		.loc 1 1915 66 is_stmt 0 view .LVU2273
 7020 0000 30B5     		push	{r4, r5, lr}
 7021              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccdQiHBS.s 			page 222


 7022              		.cfi_offset 4, -12
 7023              		.cfi_offset 5, -8
 7024              		.cfi_offset 14, -4
 7025 0002 8BB0     		sub	sp, sp, #44
 7026              		.cfi_def_cfa_offset 56
1917:src/display.c **** 
 7027              		.loc 1 1917 6 view .LVU2274
 7028 0004 0C23     		movs	r3, #12
1920:src/display.c **** 	else
 7029              		.loc 1 1920 4 view .LVU2275
 7030 0006 01AD     		add	r5, sp, #4
1915:src/display.c **** 	decNumber z;
 7031              		.loc 1 1915 66 view .LVU2276
 7032 0008 0C46     		mov	r4, r1
1917:src/display.c **** 
 7033              		.loc 1 1917 6 view .LVU2277
 7034 000a 0093     		str	r3, [sp]
1919:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7035              		.loc 1 1919 2 is_stmt 1 view .LVU2278
1920:src/display.c **** 	else
 7036              		.loc 1 1920 4 is_stmt 0 view .LVU2279
 7037 000c 2946     		mov	r1, r5
 7038              	.LVL813:
1919:src/display.c **** 	  decimal128ToNumber(&(rgx->d), &z);
 7039              		.loc 1 1919 5 view .LVU2280
 7040 000e 42B1     		cbz	r2, .L694
1920:src/display.c **** 	else
 7041              		.loc 1 1920 4 is_stmt 1 view .LVU2281
 7042 0010 FFF7FEFF 		bl	decimal128ToNumber
 7043              	.LVL814:
1923:src/display.c ****       }
 7044              		.loc 1 1923 2 view .LVU2282
 7045 0014 2146     		mov	r1, r4
 7046 0016 2846     		mov	r0, r5
 7047 0018 6A46     		mov	r2, sp
 7048 001a FFF7FEFF 		bl	set_x_dn
 7049              	.LVL815:
1924:src/display.c **** 
 7050              		.loc 1 1924 7 is_stmt 0 view .LVU2283
 7051 001e 0BB0     		add	sp, sp, #44
 7052              		.cfi_remember_state
 7053              		.cfi_def_cfa_offset 12
 7054              		@ sp needed
 7055 0020 30BD     		pop	{r4, r5, pc}
 7056              	.LVL816:
 7057              	.L694:
 7058              		.cfi_restore_state
1922:src/display.c **** 	set_x_dn(&z, res, &digits);
 7059              		.loc 1 1922 4 is_stmt 1 view .LVU2284
 7060 0022 FFF7FEFF 		bl	decimal64ToNumber
 7061              	.LVL817:
1923:src/display.c ****       }
 7062              		.loc 1 1923 2 view .LVU2285
 7063 0026 2146     		mov	r1, r4
 7064 0028 2846     		mov	r0, r5
 7065 002a 6A46     		mov	r2, sp
 7066 002c FFF7FEFF 		bl	set_x_dn
ARM GAS  /tmp/ccdQiHBS.s 			page 223


 7067              	.LVL818:
1924:src/display.c **** 
 7068              		.loc 1 1924 7 is_stmt 0 view .LVU2286
 7069 0030 0BB0     		add	sp, sp, #44
 7070              		.cfi_def_cfa_offset 12
 7071              		@ sp needed
 7072 0032 30BD     		pop	{r4, r5, pc}
1924:src/display.c **** 
 7073              		.loc 1 1924 7 view .LVU2287
 7074              		.cfi_endproc
 7075              	.LFE26:
 7077              		.section	.text.format_reg,"ax",%progbits
 7078              		.align	1
 7079              		.p2align 2,,3
 7080              		.global	format_reg
 7081              		.syntax unified
 7082              		.thumb
 7083              		.thumb_func
 7084              		.fpu fpv4-sp-d16
 7086              	format_reg:
 7087              	.LVL819:
 7088              	.LFB28:
2331:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7089              		.loc 1 2331 45 is_stmt 1 view -0
 7090              		.cfi_startproc
 7091              		@ args = 0, pretend = 0, frame = 40
 7092              		@ frame_needed = 0, uses_anonymous_args = 0
2332:src/display.c **** 
 7093              		.loc 1 2332 2 view .LVU2289
2331:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7094              		.loc 1 2331 45 is_stmt 0 view .LVU2290
 7095 0000 30B5     		push	{r4, r5, lr}
 7096              		.cfi_def_cfa_offset 12
 7097              		.cfi_offset 4, -12
 7098              		.cfi_offset 5, -8
 7099              		.cfi_offset 14, -4
 7100 0002 8BB0     		sub	sp, sp, #44
 7101              		.cfi_def_cfa_offset 56
2331:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7102              		.loc 1 2331 45 view .LVU2291
 7103 0004 0C46     		mov	r4, r1
 7104 0006 0546     		mov	r5, r0
2332:src/display.c **** 
 7105              		.loc 1 2332 28 view .LVU2292
 7106 0008 FFF7FEFF 		bl	get_reg_n
 7107              	.LVL820:
2334:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7108              		.loc 1 2334 6 view .LVU2293
 7109 000c 154B     		ldr	r3, .L704
 7110 000e 1B68     		ldr	r3, [r3]
 7111 0010 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 7112              	.LVL821:
2334:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7113              		.loc 1 2334 2 is_stmt 1 view .LVU2294
2334:src/display.c **** 	  set_int_x(get_reg_n_int(index), buf);
 7114              		.loc 1 2334 5 is_stmt 0 view .LVU2295
 7115 0014 D207     		lsls	r2, r2, #31
ARM GAS  /tmp/ccdQiHBS.s 			page 224


 7116 0016 1DD4     		bmi	.L702
2337:src/display.c **** 	  decNumber x;
 7117              		.loc 1 2337 7 is_stmt 1 view .LVU2296
2337:src/display.c **** 	  decNumber x;
 7118              		.loc 1 2337 10 is_stmt 0 view .LVU2297
 7119 0018 44B1     		cbz	r4, .L703
 7120              	.L700:
2348:src/display.c ****       }
 7121              		.loc 1 2348 4 is_stmt 1 view .LVU2298
2348:src/display.c ****       }
 7122              		.loc 1 2348 24 is_stmt 0 view .LVU2299
 7123 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
2348:src/display.c ****       }
 7124              		.loc 1 2348 4 view .LVU2300
 7125 001e 2146     		mov	r1, r4
 7126 0020 C2F38012 		ubfx	r2, r2, #6, #1
 7127 0024 FFF7FEFF 		bl	set_x
 7128              	.LVL822:
2349:src/display.c **** 
 7129              		.loc 1 2349 7 view .LVU2301
 7130 0028 0BB0     		add	sp, sp, #44
 7131              		.cfi_remember_state
 7132              		.cfi_def_cfa_offset 12
 7133              		@ sp needed
 7134 002a 30BD     		pop	{r4, r5, pc}
 7135              	.LVL823:
 7136              	.L703:
 7137              		.cfi_restore_state
2337:src/display.c **** 	  decNumber x;
 7138              		.loc 1 2337 32 discriminator 1 view .LVU2302
 7139 002c 0E4A     		ldr	r2, .L704+4
2337:src/display.c **** 	  decNumber x;
 7140              		.loc 1 2337 23 discriminator 1 view .LVU2303
 7141 002e 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 7142 0030 012A     		cmp	r2, #1
 7143 0032 F2D9     		bls	.L700
 7144              	.LVL824:
 7145              	.LBB444:
 7146              	.LBI444:
2331:src/display.c **** 	const REGISTER *const r = get_reg_n(index);
 7147              		.loc 1 2331 12 is_stmt 1 view .LVU2304
 7148              	.LBB445:
 7149              	.LBB446:
2338:src/display.c **** 	  int s;
 7150              		.loc 1 2338 4 view .LVU2305
2339:src/display.c **** 	  unsigned long long int v;
 7151              		.loc 1 2339 4 view .LVU2306
2340:src/display.c **** 
 7152              		.loc 1 2340 4 view .LVU2307
2342:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7153              		.loc 1 2342 4 view .LVU2308
 7154 0034 2946     		mov	r1, r5
 7155 0036 01A8     		add	r0, sp, #4
 7156              	.LVL825:
2342:src/display.c **** 	  v = dn_to_ull(&x, &s);
 7157              		.loc 1 2342 4 is_stmt 0 view .LVU2309
 7158 0038 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/ccdQiHBS.s 			page 225


 7159              	.LVL826:
2343:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7160              		.loc 1 2343 4 is_stmt 1 view .LVU2310
2343:src/display.c **** 	  set_int_x(build_value(v, s), CNULL);
 7161              		.loc 1 2343 8 is_stmt 0 view .LVU2311
 7162 003c 01A8     		add	r0, sp, #4
 7163 003e 6946     		mov	r1, sp
 7164 0040 FFF7FEFF 		bl	dn_to_ull
 7165              	.LVL827:
2344:src/display.c **** 	}
 7166              		.loc 1 2344 4 is_stmt 1 view .LVU2312
 7167 0044 009A     		ldr	r2, [sp]
 7168 0046 FFF7FEFF 		bl	build_value
 7169              	.LVL828:
2344:src/display.c **** 	}
 7170              		.loc 1 2344 4 is_stmt 0 view .LVU2313
 7171 004a 2246     		mov	r2, r4
 7172 004c FFF7FEFF 		bl	set_int_x
 7173              	.LVL829:
 7174              	.LBE446:
 7175              	.LBE445:
 7176              	.LBE444:
2349:src/display.c **** 
 7177              		.loc 1 2349 7 view .LVU2314
 7178 0050 0BB0     		add	sp, sp, #44
 7179              		.cfi_remember_state
 7180              		.cfi_def_cfa_offset 12
 7181              		@ sp needed
 7182 0052 30BD     		pop	{r4, r5, pc}
 7183              	.LVL830:
 7184              	.L702:
 7185              		.cfi_restore_state
2335:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7186              		.loc 1 2335 4 is_stmt 1 view .LVU2315
 7187 0054 2846     		mov	r0, r5
 7188              	.LVL831:
2335:src/display.c **** #ifndef HP16C_MODE_CHANGE
 7189              		.loc 1 2335 4 is_stmt 0 view .LVU2316
 7190 0056 FFF7FEFF 		bl	get_reg_n_int
 7191              	.LVL832:
 7192 005a 2246     		mov	r2, r4
 7193 005c FFF7FEFF 		bl	set_int_x
 7194              	.LVL833:
2349:src/display.c **** 
 7195              		.loc 1 2349 7 view .LVU2317
 7196 0060 0BB0     		add	sp, sp, #44
 7197              		.cfi_def_cfa_offset 12
 7198              		@ sp needed
 7199 0062 30BD     		pop	{r4, r5, pc}
 7200              	.LVL834:
 7201              	.L705:
2349:src/display.c **** 
 7202              		.loc 1 2349 7 view .LVU2318
 7203              		.align	2
 7204              	.L704:
 7205 0064 00000000 		.word	main_ram
 7206 0068 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccdQiHBS.s 			page 226


 7207              		.cfi_endproc
 7208              	.LFE28:
 7210              		.section	.text.set_status_right,"ax",%progbits
 7211              		.align	1
 7212              		.p2align 2,,3
 7213              		.syntax unified
 7214              		.thumb
 7215              		.thumb_func
 7216              		.fpu fpv4-sp-d16
 7218              	set_status_right:
 7219              	.LVL835:
 7220              	.LFB48:
3502:src/display.c ****       static void set_status_top(const char *str) {
3503:src/display.c **** 	if (no_status_top) return;
3504:src/display.c **** 	if (State2.runmode) {
3505:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3506:src/display.c **** 	}
3507:src/display.c **** 	else {
3508:src/display.c **** 	  set_status_sized(str, State2.disp_small || string_too_large(str));
3509:src/display.c **** 	}
3510:src/display.c ****       }
3511:src/display.c **** #ifdef TOP_ROW
3512:src/display.c ****       static void set_status_top_always(const char *str) {
3513:src/display.c **** 	if ((no_status_top) && (State2.runmode)) return;
3514:src/display.c **** 	set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
3515:src/display.c ****       }
3516:src/display.c **** #endif
3517:src/display.c **** 
3518:src/display.c ****       /*
3519:src/display.c ****        *  Display messages (global function)
3520:src/display.c ****        */
3521:src/display.c ****       extern void message(const char *str1, const char *str2)
3522:src/display.c ****       {
3523:src/display.c **** 	State2.disp_freeze = 0;
3524:src/display.c **** 	State2.disp_small = 0;
3525:src/display.c **** 	WasDataEntry = 0;
3526:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
3527:src/display.c **** 	  // Complete redraw necessary
3528:src/display.c **** 	  DispMsg = str1;
3529:src/display.c **** 	  display();
3530:src/display.c **** 	}
3531:src/display.c **** 	else {
3532:src/display.c **** 	  if ( str2 != NULL ) {
3533:src/display.c **** 	    reset_disp();
3534:src/display.c **** 	    ShowRPN = 0;
3535:src/display.c **** 	    set_annunciators();
3536:src/display.c **** 	    set_digits_string( str2, 0 );
3537:src/display.c **** 	  }
3538:src/display.c **** 	  set_status( str1 );
3539:src/display.c **** 	  finish_display();// message
3540:src/display.c **** 	}
3541:src/display.c ****       }
3542:src/display.c **** 
3543:src/display.c **** #ifdef INCLUDE_STOPWATCH
3544:src/display.c **** 
3545:src/display.c ****       static void stopwatch_exponent(const char* exponent) {
3546:src/display.c **** 	int j = SEGS_EXP_BASE;
ARM GAS  /tmp/ccdQiHBS.s 			page 227


3547:src/display.c **** 	for (; *exponent!=0; exponent++) {
3548:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
3549:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
3550:src/display.c **** 	}
3551:src/display.c ****       }
3552:src/display.c **** 
3553:src/display.c ****       void stopwatch_message(const char *str1, const char *str2, int force_small, char* exponent)
3554:src/display.c ****       {
3555:src/display.c **** 	reset_disp();
3556:src/display.c **** 	set_dot(DEG);
3557:src/display.c **** 	set_digits_string( str2, 0 );
3558:src/display.c **** 	State2.disp_small = force_small;
3559:src/display.c **** 	if( exponent!=NULL ) {
3560:src/display.c **** 	  stopwatch_exponent(exponent);
3561:src/display.c **** 	}
3562:src/display.c **** 	set_status( str1 );
3563:src/display.c **** 	finish_display();
3564:src/display.c ****       }
3565:src/display.c **** 
3566:src/display.c **** 
3567:src/display.c **** #endif // INCLUDE_STOPWATCH
3568:src/display.c **** 
3569:src/display.c ****       /* Display the right hand characters from the given string.
3570:src/display.c ****        * Trying to fit as many as possible into the bitmap area,
3571:src/display.c ****        * and reduce font size if required.
3572:src/display.c ****        */
3573:src/display.c ****       static void set_status_right(const char *str) {
 7221              		.loc 1 3573 53 is_stmt 1 view -0
 7222              		.cfi_startproc
 7223              		@ args = 0, pretend = 0, frame = 0
 7224              		@ frame_needed = 0, uses_anonymous_args = 0
3574:src/display.c **** 	unsigned int x = 0;
 7225              		.loc 1 3574 2 view .LVU2320
3575:src/display.c **** 	const char *p;
 7226              		.loc 1 3575 2 view .LVU2321
3576:src/display.c **** 	const int toolarge = State2.disp_small || string_too_large(str);
 7227              		.loc 1 3576 2 view .LVU2322
3573:src/display.c **** 	unsigned int x = 0;
 7228              		.loc 1 3573 53 is_stmt 0 view .LVU2323
 7229 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 7230              		.cfi_def_cfa_offset 32
 7231              		.cfi_offset 3, -32
 7232              		.cfi_offset 4, -28
 7233              		.cfi_offset 5, -24
 7234              		.cfi_offset 6, -20
 7235              		.cfi_offset 7, -16
 7236              		.cfi_offset 8, -12
 7237              		.cfi_offset 9, -8
 7238              		.cfi_offset 14, -4
 7239              		.loc 1 3576 23 view .LVU2324
 7240 0004 164B     		ldr	r3, .L720
 7241              		.loc 1 3576 41 view .LVU2325
 7242 0006 93F91630 		ldrsb	r3, [r3, #22]
 7243 000a 002B     		cmp	r3, #0
3573:src/display.c **** 	unsigned int x = 0;
 7244              		.loc 1 3573 53 view .LVU2326
 7245 000c 0646     		mov	r6, r0
ARM GAS  /tmp/ccdQiHBS.s 			page 228


 7246              		.loc 1 3576 41 view .LVU2327
 7247 000e 1DDA     		bge	.L719
 7248              	.LVL836:
 7249              	.L707:
 7250              		.loc 1 3576 12 view .LVU2328
 7251 0010 4FF00108 		mov	r8, #1
3577:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7252              		.loc 1 3577 36 view .LVU2329
 7253 0014 4FF48077 		mov	r7, #256
 7254              	.L708:
 7255              	.LVL837:
3578:src/display.c **** 
3579:src/display.c **** 	for (p=str; *p != '\0'; p++);
 7256              		.loc 1 3579 2 is_stmt 1 discriminator 4 view .LVU2330
 7257              		.loc 1 3579 14 discriminator 4 view .LVU2331
 7258              		.loc 1 3579 2 is_stmt 0 discriminator 4 view .LVU2332
 7259 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 7260 001a 3446     		mov	r4, r6
 7261 001c 1BB1     		cbz	r3, .L709
 7262              	.LVL838:
 7263              	.L710:
 7264              		.loc 1 3579 30 is_stmt 1 discriminator 3 view .LVU2333
 7265              		.loc 1 3579 26 discriminator 3 view .LVU2334
 7266              		.loc 1 3579 14 discriminator 3 view .LVU2335
 7267              		.loc 1 3579 2 is_stmt 0 discriminator 3 view .LVU2336
 7268 001e 14F8013F 		ldrb	r3, [r4, #1]!	@ zero_extendqisi2
 7269              	.LVL839:
 7270              		.loc 1 3579 2 discriminator 3 view .LVU2337
 7271 0022 002B     		cmp	r3, #0
 7272 0024 FBD1     		bne	.L710
 7273              	.L709:
3574:src/display.c **** 	const char *p;
 7274              		.loc 1 3574 15 view .LVU2338
 7275 0026 0025     		movs	r5, #0
 7276 0028 06E0     		b	.L711
 7277              	.LVL840:
 7278              	.L712:
 7279              	.LBB447:
3580:src/display.c **** 	while (--p >= str) {
3581:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7280              		.loc 1 3581 27 view .LVU2339
 7281 002a 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
3582:src/display.c **** 
3583:src/display.c **** 	  x += charlengths(c);
 7282              		.loc 1 3583 9 view .LVU2340
 7283 002c 3844     		add	r0, r0, r7
 7284 002e FFF7FEFF 		bl	charlengths
 7285              	.LVL841:
 7286              		.loc 1 3583 6 view .LVU2341
 7287 0032 0544     		add	r5, r5, r0
 7288              	.LVL842:
3584:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7289              		.loc 1 3584 4 is_stmt 1 view .LVU2342
 7290              		.loc 1 3584 7 is_stmt 0 view .LVU2343
 7291 0034 2C2D     		cmp	r5, #44
 7292 0036 03D8     		bhi	.L713
 7293              	.LVL843:
ARM GAS  /tmp/ccdQiHBS.s 			page 229


 7294              	.L711:
3581:src/display.c **** 
 7295              		.loc 1 3581 4 is_stmt 1 view .LVU2344
3581:src/display.c **** 
 7296              		.loc 1 3581 4 is_stmt 0 view .LVU2345
 7297              	.LBE447:
3580:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7298              		.loc 1 3580 8 is_stmt 1 view .LVU2346
 7299 0038 A146     		mov	r9, r4
 7300 003a 013C     		subs	r4, r4, #1
 7301              	.LVL844:
 7302              	.LBB448:
3583:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7303              		.loc 1 3583 4 view .LVU2347
3583:src/display.c **** 	  if (x > BITMAP_WIDTH+1)
 7304              		.loc 1 3583 4 is_stmt 0 view .LVU2348
 7305              	.LBE448:
3580:src/display.c **** 	  const unsigned int c = (unsigned char) *p + offset;
 7306              		.loc 1 3580 8 view .LVU2349
 7307 003c A642     		cmp	r6, r4
 7308 003e F4D9     		bls	.L712
 7309              	.LVL845:
 7310              	.L713:
3585:src/display.c **** 	    break;
3586:src/display.c **** 	}
3587:src/display.c **** 	set_status_sized(p+1, toolarge);
 7311              		.loc 1 3587 2 is_stmt 1 view .LVU2350
 7312              	.LBB449:
 7313              	.LBI449:
3357:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7314              		.loc 1 3357 19 view .LVU2351
 7315              	.LBB450:
3358:src/display.c ****       }
 7316              		.loc 1 3358 2 view .LVU2352
 7317 0040 4146     		mov	r1, r8
 7318 0042 4846     		mov	r0, r9
 7319              	.LBE450:
 7320              	.LBE449:
3588:src/display.c ****       }
 7321              		.loc 1 3588 7 is_stmt 0 view .LVU2353
 7322 0044 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 7323              		.cfi_remember_state
 7324              		.cfi_restore 14
 7325              		.cfi_restore 9
 7326              		.cfi_restore 8
 7327              		.cfi_restore 7
 7328              		.cfi_restore 6
 7329              		.cfi_restore 5
 7330              		.cfi_restore 4
 7331              		.cfi_restore 3
 7332              		.cfi_def_cfa_offset 0
 7333              	.LVL846:
 7334              	.LBB452:
 7335              	.LBB451:
3358:src/display.c ****       }
 7336              		.loc 1 3358 2 view .LVU2354
 7337 0048 FFF7FEBF 		b	s_s_sized.constprop.0
ARM GAS  /tmp/ccdQiHBS.s 			page 230


 7338              	.LVL847:
 7339              	.L719:
 7340              		.cfi_restore_state
3358:src/display.c ****       }
 7341              		.loc 1 3358 2 view .LVU2355
 7342              	.LBE451:
 7343              	.LBE452:
 7344              	.LBB453:
 7345              	.LBI453:
3489:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7346              		.loc 1 3489 18 is_stmt 1 view .LVU2356
 7347              	.LBB454:
3490:src/display.c ****       }
 7348              		.loc 1 3490 2 view .LVU2357
3490:src/display.c ****       }
 7349              		.loc 1 3490 9 is_stmt 0 view .LVU2358
 7350 004c 0021     		movs	r1, #0
 7351 004e FFF7FEFF 		bl	pixel_length
 7352              	.LVL848:
3490:src/display.c ****       }
 7353              		.loc 1 3490 9 view .LVU2359
 7354              	.LBE454:
 7355              	.LBE453:
3576:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7356              		.loc 1 3576 41 view .LVU2360
 7357 0052 2C28     		cmp	r0, #44
 7358 0054 DCDC     		bgt	.L707
3576:src/display.c **** 	const int offset = toolarge ? 256 : 0;
 7359              		.loc 1 3576 12 view .LVU2361
 7360 0056 4FF00008 		mov	r8, #0
3577:src/display.c **** 
 7361              		.loc 1 3577 36 view .LVU2362
 7362 005a 4746     		mov	r7, r8
 7363 005c DCE7     		b	.L708
 7364              	.L721:
 7365 005e 00BF     		.align	2
 7366              	.L720:
 7367 0060 00000000 		.word	StateWhileOn
 7368              		.cfi_endproc
 7369              	.LFE48:
 7371              		.section	.rodata.annunciators.str1.4,"aMS",%progbits,1
 7372              		.align	2
 7373              	.LC2:
 7374 0000 32630600 		.ascii	"2c\006\000"
 7375              		.align	2
 7376              	.LC3:
 7377 0004 07C63C00 		.ascii	"\007\306<\000"
 7378              		.align	2
 7379              	.LC4:
 7380 0008 07876900 		.ascii	"\007\207i\000"
 7381              		.align	2
 7382              	.LC5:
 7383 000c 07C67900 		.ascii	"\007\306y\000"
 7384              		.align	2
 7385              	.LC6:
 7386 0010 07950600 		.ascii	"\007\225\006\000"
 7387              		.align	2
ARM GAS  /tmp/ccdQiHBS.s 			page 231


 7388              	.LC7:
 7389 0014 792E6D64 		.ascii	"y.md\006\006\000"
 7389      060600
 7390 001b 00       		.align	2
 7391              	.LC8:
 7392 001c 6D2E6479 		.ascii	"m.dy\006\006\000"
 7392      060600
 7393 0023 00       		.align	2
 7394              	.LC9:
 7395 0024 4C656E67 		.ascii	"Length:\000"
 7395      74683A00 
 7396              		.align	2
 7397              	.LC10:
 7398 002c 5265616C 		.ascii	"Real:\000"
 7398      3A00
 7399 0032 0000     		.align	2
 7400              	.LC11:
 7401 0034 416E676C 		.ascii	"Angle:\000"
 7401      653A00
 7402 003b 00       		.align	2
 7403              	.LC12:
 7404 003c 496D6167 		.ascii	"Imag:\000"
 7404      3A00
 7405 0042 0000     		.align	2
 7406              	.LC13:
 7407 0044 1400     		.ascii	"\024\000"
 7408 0046 0000     		.align	2
 7409              	.LC14:
 7410 0048 07C77900 		.ascii	"\007\307y\000"
 7411              		.align	2
 7412              	.LC15:
 7413 004c 07870700 		.ascii	"\007\207\007\000"
 7414              		.align	2
 7415              	.LC16:
 7416 0050 07C73C00 		.ascii	"\007\307<\000"
 7417              		.align	2
 7418              	.LC17:
 7419 0054 07C74400 		.ascii	"\007\307D\000"
 7420              		.align	2
 7421              	.LC18:
 7422 0058 07876A00 		.ascii	"\007\207j\000"
 7423              		.align	2
 7424              	.LC19:
 7425 005c 07872000 		.ascii	"\007\207 \000"
 7426              		.align	2
 7427              	.LC20:
 7428 0060 06060788 		.ascii	"\006\006\007\210\007\000"
 7428      0700
 7429 0066 0000     		.align	2
 7430              	.LC21:
 7431 0068 0784060D 		.ascii	"\007\204\006\015\000"
 7431      00
 7432 006d 000000   		.align	2
 7433              	.LC23:
 7434 0070 07E43F00 		.ascii	"\007\344?\000"
 7435              		.section	.text.annunciators,"ax",%progbits
 7436              		.align	1
ARM GAS  /tmp/ccdQiHBS.s 			page 232


 7437              		.p2align 2,,3
 7438              		.syntax unified
 7439              		.thumb
 7440              		.thumb_func
 7441              		.fpu fpv4-sp-d16
 7443              	annunciators:
 7444              	.LFB16:
 911:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7445              		.loc 1 911 36 is_stmt 1 view -0
 7446              		.cfi_startproc
 7447              		@ args = 0, pretend = 0, frame = 88
 7448              		@ frame_needed = 0, uses_anonymous_args = 0
 913:src/display.c ****       int n;
 7449              		.loc 1 913 7 view .LVU2364
 911:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7450              		.loc 1 911 36 is_stmt 0 view .LVU2365
 7451 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7452              		.cfi_def_cfa_offset 28
 7453              		.cfi_offset 4, -28
 7454              		.cfi_offset 5, -24
 7455              		.cfi_offset 6, -20
 7456              		.cfi_offset 7, -16
 7457              		.cfi_offset 8, -12
 7458              		.cfi_offset 9, -8
 7459              		.cfi_offset 14, -4
 924:src/display.c **** #  endif
 7460              		.loc 1 924 38 view .LVU2366
 7461 0004 DFF84083 		ldr	r8, .L852+60
 911:src/display.c ****       // We initialize q here to avoid uninitialized error messages by very strict compilers
 7462              		.loc 1 911 36 view .LVU2367
 7463 0008 97B0     		sub	sp, sp, #92
 7464              		.cfi_def_cfa_offset 120
 7465              	.LVL849:
 914:src/display.c ****       static const char shift_chars[4] = " \021\022\023";
 7466              		.loc 1 914 7 is_stmt 1 view .LVU2368
 915:src/display.c ****       const char shift_char = shift_chars[cur_shift()];
 7467              		.loc 1 915 7 view .LVU2369
 916:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7468              		.loc 1 916 7 view .LVU2370
 916:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7469              		.loc 1 916 43 is_stmt 0 view .LVU2371
 7470 000a FFF7FEFF 		bl	cur_shift
 7471              	.LVL850:
 924:src/display.c **** #  endif
 7472              		.loc 1 924 38 view .LVU2372
 7473 000e D8F80020 		ldr	r2, [r8]
 916:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7474              		.loc 1 916 18 view .LVU2373
 7475 0012 BE4B     		ldr	r3, .L852
 924:src/display.c **** #  endif
 7476              		.loc 1 924 38 view .LVU2374
 7477 0014 92F8EA77 		ldrb	r7, [r2, #2026]	@ zero_extendqisi2
 916:src/display.c ****       // Constant variables and code branches depending on a constant variable
 7478              		.loc 1 916 18 view .LVU2375
 7479 0018 1E5C     		ldrb	r6, [r3, r0]	@ zero_extendqisi2
 7480              	.LVL851:
 924:src/display.c **** #  endif
ARM GAS  /tmp/ccdQiHBS.s 			page 233


 7481              		.loc 1 924 7 is_stmt 1 view .LVU2376
 955:src/display.c ****       
 7482              		.loc 1 955 7 is_stmt 0 view .LVU2377
 7483 001a 0BAD     		add	r5, sp, #44
 7484              	.LVL852:
 955:src/display.c ****       
 7485              		.loc 1 955 7 view .LVU2378
 7486 001c 2A22     		movs	r2, #42
 7487 001e 0021     		movs	r1, #0
 7488 0020 2846     		mov	r0, r5
 7489 0022 FFF7FEFF 		bl	xset
 7490              	.LVL853:
 957:src/display.c **** #ifdef SHOW_STACK_SIZE
 7491              		.loc 1 957 11 view .LVU2379
 7492 0026 D8F80030 		ldr	r3, [r8]
 7493 002a 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
 957:src/display.c **** #ifdef SHOW_STACK_SIZE
 7494              		.loc 1 957 10 view .LVU2380
 7495 002e D107     		lsls	r1, r2, #31
 924:src/display.c **** #  endif
 7496              		.loc 1 924 38 view .LVU2381
 7497 0030 C7F38007 		ubfx	r7, r7, #2, #1
 7498              	.LVL854:
 927:src/display.c **** #  else
 7499              		.loc 1 927 7 is_stmt 1 view .LVU2382
 932:src/display.c **** #  else
 7500              		.loc 1 932 7 view .LVU2383
 942:src/display.c **** #else
 7501              		.loc 1 942 7 view .LVU2384
 950:src/display.c **** #else
 7502              		.loc 1 950 7 view .LVU2385
 955:src/display.c ****       
 7503              		.loc 1 955 7 view .LVU2386
 957:src/display.c **** #ifdef SHOW_STACK_SIZE
 7504              		.loc 1 957 7 view .LVU2387
 957:src/display.c **** #ifdef SHOW_STACK_SIZE
 7505              		.loc 1 957 10 is_stmt 0 view .LVU2388
 7506 0034 00F1C580 		bmi	.L840
 996:src/display.c **** #else
 7507              		.loc 1 996 12 is_stmt 1 view .LVU2389
 996:src/display.c **** #else
 7508              		.loc 1 996 15 is_stmt 0 view .LVU2390
 7509 0038 002F     		cmp	r7, #0
 7510 003a 00F08C80 		beq	.L841
 7511              	.L735:
1081:src/display.c **** 	  *p++ = '\007';
 7512              		.loc 1 1081 2 is_stmt 1 view .LVU2391
1081:src/display.c **** 	  *p++ = '\007';
 7513              		.loc 1 1081 6 is_stmt 0 view .LVU2392
 7514 003e B44C     		ldr	r4, .L852+4
 7515 0040 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
1081:src/display.c **** 	  *p++ = '\007';
 7516              		.loc 1 1081 5 view .LVU2393
 7517 0042 9107     		lsls	r1, r2, #30
 7518 0044 40F12181 		bpl	.L745
1082:src/display.c **** 	  *p++ = '\344';
 7519              		.loc 1 1082 4 is_stmt 1 view .LVU2394
ARM GAS  /tmp/ccdQiHBS.s 			page 234


 7520              	.LVL855:
1083:src/display.c **** 	  *p++ = shift_char;
 7521              		.loc 1 1083 4 view .LVU2395
1082:src/display.c **** 	  *p++ = '\344';
 7522              		.loc 1 1082 9 is_stmt 0 view .LVU2396
 7523 0048 4EF20743 		movw	r3, #58375
1085:src/display.c **** 	}
 7524              		.loc 1 1085 6 view .LVU2397
 7525 004c B149     		ldr	r1, .L852+8
1084:src/display.c **** 	  q = "\024";
 7526              		.loc 1 1084 9 view .LVU2398
 7527 004e 8DF82E60 		strb	r6, [sp, #46]
1082:src/display.c **** 	  *p++ = '\344';
 7528              		.loc 1 1082 9 view .LVU2399
 7529 0052 ADF82C30 		strh	r3, [sp, #44]	@ movhi
1084:src/display.c **** 	  q = "\024";
 7530              		.loc 1 1084 4 is_stmt 1 view .LVU2400
 7531              	.LVL856:
1085:src/display.c **** 	}
 7532              		.loc 1 1085 4 view .LVU2401
1084:src/display.c **** 	  q = "\024";
 7533              		.loc 1 1084 6 is_stmt 0 view .LVU2402
 7534 0056 0DF12F00 		add	r0, sp, #47
 7535              	.LVL857:
 7536              	.L746:
 7537              	.L748:
1143:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7538              		.loc 1 1143 2 is_stmt 1 view .LVU2403
1143:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7539              		.loc 1 1143 6 is_stmt 0 view .LVU2404
 7540 005a FFF7FEFF 		bl	scopy
 7541              	.LVL858:
1143:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7542              		.loc 1 1143 6 view .LVU2405
 7543 005e 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
1148:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7544              		.loc 1 1148 5 view .LVU2406
 7545 0060 5307     		lsls	r3, r2, #29
1143:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 7546              		.loc 1 1143 6 view .LVU2407
 7547 0062 0646     		mov	r6, r0
 7548              	.LVL859:
1148:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7549              		.loc 1 1148 2 is_stmt 1 view .LVU2408
1148:src/display.c **** 	  scopy(p, "\007\204\006\015");
 7550              		.loc 1 1148 5 is_stmt 0 view .LVU2409
 7551 0064 00F14D81 		bmi	.L842
 7552              	.LVL860:
 7553              	.L754:
1150:src/display.c **** 	  decNumber y;
 7554              		.loc 1 1150 9 is_stmt 1 view .LVU2410
1150:src/display.c **** 	  decNumber y;
 7555              		.loc 1 1150 13 is_stmt 0 view .LVU2411
 7556 0068 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
1150:src/display.c **** 	  decNumber y;
 7557              		.loc 1 1150 12 view .LVU2412
 7558 006a 5806     		lsls	r0, r3, #25
ARM GAS  /tmp/ccdQiHBS.s 			page 235


 7559 006c 40F1FB80 		bpl	.L755
 7560              	.L743:
 7561              	.LBB469:
1151:src/display.c **** 	display_yreg:
 7562              		.loc 1 1151 4 is_stmt 1 view .LVU2413
1159:src/display.c **** 		    getRegister(&y, regK_idx);
 7563              		.loc 1 1159 5 view .LVU2414
1159:src/display.c **** 		    getRegister(&y, regK_idx);
 7564              		.loc 1 1159 36 is_stmt 0 view .LVU2415
 7565 0070 D8F80030 		ldr	r3, [r8]
 7566 0074 B3F8AC27 		ldrh	r2, [r3, #1964]
 7567 0078 40F2C113 		movw	r3, #449
1159:src/display.c **** 		    getRegister(&y, regK_idx);
 7568              		.loc 1 1159 8 view .LVU2416
 7569 007c 1340     		ands	r3, r3, r2
 7570 007e C12B     		cmp	r3, #193
 7571 0080 00F00482 		beq	.L843
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7572              		.loc 1 1163 7 is_stmt 1 view .LVU2417
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7573              		.loc 1 1163 37 is_stmt 0 view .LVU2418
 7574 0084 DFF8C492 		ldr	r9, .L852+64
 7575 0088 D9F80010 		ldr	r1, [r9]
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7576              		.loc 1 1163 7 view .LVU2419
 7577 008c 6329     		cmp	r1, #99
 7578 008e 00F3E881 		bgt	.L844
 7579              	.L758:
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7580              		.loc 1 1163 7 discriminator 3 view .LVU2420
 7581 0092 0131     		adds	r1, r1, #1
 7582              	.L762:
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 7583              		.loc 1 1163 7 discriminator 4 view .LVU2421
 7584 0094 02AF     		add	r7, sp, #8
 7585 0096 3846     		mov	r0, r7
 7586 0098 FFF7FEFF 		bl	getRegister
 7587              	.LVL861:
 7588              	.L757:
1173:src/display.c **** #ifdef INCLUDE_C_LOCK
 7589              		.loc 1 1173 4 is_stmt 1 view .LVU2422
1173:src/display.c **** #ifdef INCLUDE_C_LOCK
 7590              		.loc 1 1173 7 is_stmt 0 view .LVU2423
 7591 009c 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 7592 00a0 13F0700F 		tst	r3, #112
 7593 00a4 40F09481 		bne	.L764
1175:src/display.c **** #else
 7594              		.loc 1 1175 7 is_stmt 1 view .LVU2424
1175:src/display.c **** #else
 7595              		.loc 1 1175 20 is_stmt 0 view .LVU2425
 7596 00a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1175:src/display.c **** #else
 7597              		.loc 1 1175 10 view .LVU2426
 7598 00aa 13F0010F 		tst	r3, #1
1175:src/display.c **** #else
 7599              		.loc 1 1175 40 view .LVU2427
 7600 00ae D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/ccdQiHBS.s 			page 236


1175:src/display.c **** #else
 7601              		.loc 1 1175 10 view .LVU2428
 7602 00b2 00F04D81 		beq	.L767
1175:src/display.c **** #else
 7603              		.loc 1 1175 39 discriminator 1 view .LVU2429
 7604 00b6 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
1175:src/display.c **** #else
 7605              		.loc 1 1175 34 discriminator 1 view .LVU2430
 7606 00ba 02F04101 		and	r1, r2, #65
 7607 00be 4129     		cmp	r1, #65
 7608 00c0 08D1     		bne	.L766
1175:src/display.c **** #else
 7609              		.loc 1 1175 49 discriminator 2 view .LVU2431
 7610 00c2 1206     		lsls	r2, r2, #24
 7611 00c4 40F14481 		bpl	.L767
1175:src/display.c **** #else
 7612              		.loc 1 1175 120 discriminator 3 view .LVU2432
 7613 00c8 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
1175:src/display.c **** #else
 7614              		.loc 1 1175 81 discriminator 3 view .LVU2433
 7615 00cc 12F0C00F 		tst	r2, #192
 7616 00d0 40F03E81 		bne	.L767
 7617              	.L766:
 7618              	.LBB470:
1179:src/display.c **** 
 7619              		.loc 1 1179 8 is_stmt 1 view .LVU2434
1181:src/display.c **** 	      UState.nothousands = 1;
 7620              		.loc 1 1181 8 is_stmt 0 view .LVU2435
 7621 00d4 2A22     		movs	r2, #42
 7622 00d6 0021     		movs	r1, #0
 7623 00d8 2846     		mov	r0, r5
1179:src/display.c **** 
 7624              		.loc 1 1179 44 view .LVU2436
 7625 00da 93F8E767 		ldrb	r6, [r3, #2023]	@ zero_extendqisi2
 7626              	.LVL862:
1179:src/display.c **** 
 7627              		.loc 1 1179 44 view .LVU2437
 7628 00de 8E4C     		ldr	r4, .L852+12
1181:src/display.c **** 	      UState.nothousands = 1;
 7629              		.loc 1 1181 8 view .LVU2438
 7630 00e0 FFF7FEFF 		bl	xset
 7631              	.LVL863:
1182:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7632              		.loc 1 1182 27 view .LVU2439
 7633 00e4 D8F80020 		ldr	r2, [r8]
 7634 00e8 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
 7635 00ec 43F04003 		orr	r3, r3, #64
 7636 00f0 82F8E737 		strb	r3, [r2, #2023]
1183:src/display.c **** 	      UState.nothousands = saved_nothousands;
 7637              		.loc 1 1183 8 view .LVU2440
 7638 00f4 2946     		mov	r1, r5
 7639 00f6 3846     		mov	r0, r7
 7640 00f8 FFF7FEFF 		bl	set_x_hms
 7641              	.LVL864:
1184:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7642              		.loc 1 1184 27 view .LVU2441
 7643 00fc D8F80030 		ldr	r3, [r8]
ARM GAS  /tmp/ccdQiHBS.s 			page 237


 7644 0100 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
1179:src/display.c **** 
 7645              		.loc 1 1179 44 view .LVU2442
 7646 0104 C6F38016 		ubfx	r6, r6, #6, #1
 7647              	.LVL865:
1181:src/display.c **** 	      UState.nothousands = 1;
 7648              		.loc 1 1181 8 is_stmt 1 view .LVU2443
1182:src/display.c **** 	      set_x_hms(&y, buf); // no prefix or alignment for HMS display
 7649              		.loc 1 1182 8 view .LVU2444
1183:src/display.c **** 	      UState.nothousands = saved_nothousands;
 7650              		.loc 1 1183 8 view .LVU2445
1184:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7651              		.loc 1 1184 8 view .LVU2446
1184:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7652              		.loc 1 1184 27 is_stmt 0 view .LVU2447
 7653 0108 66F38612 		bfi	r2, r6, #6, #1
 7654 010c 83F8E727 		strb	r2, [r3, #2023]
1189:src/display.c **** 	      while (*p) {
 7655              		.loc 1 1189 8 is_stmt 1 view .LVU2448
 7656              	.LVL866:
1190:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7657              		.loc 1 1190 8 view .LVU2449
1190:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7658              		.loc 1 1190 14 view .LVU2450
1190:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7659              		.loc 1 1190 15 is_stmt 0 view .LVU2451
 7660 0110 4021     		movs	r1, #64
1184:src/display.c **** 	      // First replace the '@' character with the degree symbol
 7661              		.loc 1 1184 27 view .LVU2452
 7662 0112 0522     		movs	r2, #5
 7663 0114 03E0     		b	.L769
 7664              	.LVL867:
 7665              	.L845:
1190:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7666              		.loc 1 1190 15 view .LVU2453
 7667 0116 14F8021F 		ldrb	r1, [r4, #2]!	@ zero_extendqisi2
 7668              	.LVL868:
1190:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7669              		.loc 1 1190 14 view .LVU2454
 7670 011a 49B1     		cbz	r1, .L726
 7671 011c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 7672              	.LVL869:
 7673              	.L769:
1191:src/display.c **** 		if (pixel_length(buf, 1) <= BW_TOP + 1) {
 7674              		.loc 1 1191 3 is_stmt 1 view .LVU2455
 7675 011e 2846     		mov	r0, r5
 7676 0120 FFF7FEFF 		bl	replace_char
 7677              	.LVL870:
1192:src/display.c **** 		  goto skip;
 7678              		.loc 1 1192 3 view .LVU2456
1192:src/display.c **** 		  goto skip;
 7679              		.loc 1 1192 7 is_stmt 0 view .LVU2457
 7680 0124 0121     		movs	r1, #1
 7681 0126 2846     		mov	r0, r5
 7682 0128 FFF7FEFF 		bl	pixel_length
 7683              	.LVL871:
1195:src/display.c **** 	      }
ARM GAS  /tmp/ccdQiHBS.s 			page 238


 7684              		.loc 1 1195 3 is_stmt 1 view .LVU2458
1190:src/display.c **** 		replace_char(buf, p[0], p[1]);
 7685              		.loc 1 1190 14 view .LVU2459
1192:src/display.c **** 		  goto skip;
 7686              		.loc 1 1192 6 is_stmt 0 view .LVU2460
 7687 012c 2C28     		cmp	r0, #44
 7688 012e F2DC     		bgt	.L845
 7689              	.LVL872:
 7690              	.L726:
1192:src/display.c **** 		  goto skip;
 7691              		.loc 1 1192 6 view .LVU2461
 7692              	.LBE470:
 7693              	.LBE469:
1244:src/display.c ****     }
 7694              		.loc 1 1244 11 is_stmt 1 view .LVU2462
 7695              	.LBB476:
 7696              	.LBI476:
3502:src/display.c **** 	if (no_status_top) return;
 7697              		.loc 1 3502 19 view .LVU2463
 7698              	.LBB477:
3503:src/display.c **** 	if (State2.runmode) {
 7699              		.loc 1 3503 2 view .LVU2464
3503:src/display.c **** 	if (State2.runmode) {
 7700              		.loc 1 3503 6 is_stmt 0 view .LVU2465
 7701 0130 7A4B     		ldr	r3, .L852+16
3503:src/display.c **** 	if (State2.runmode) {
 7702              		.loc 1 3503 5 view .LVU2466
 7703 0132 B3F90010 		ldrsh	r1, [r3]
 7704 0136 59B9     		cbnz	r1, .L722
3504:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7705              		.loc 1 3504 2 is_stmt 1 view .LVU2467
3504:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7706              		.loc 1 3504 6 is_stmt 0 view .LVU2468
 7707 0138 754B     		ldr	r3, .L852+4
 7708 013a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3504:src/display.c **** 	  set_status_sized_top(str, State2.disp_small || string_too_large_top(str));
 7709              		.loc 1 3504 5 view .LVU2469
 7710 013c 5806     		lsls	r0, r3, #25
 7711 013e 40F19880 		bpl	.L776
3505:src/display.c **** 	}
 7712              		.loc 1 3505 4 is_stmt 1 view .LVU2470
 7713 0142 1A06     		lsls	r2, r3, #24
 7714 0144 40F19980 		bpl	.L839
 7715              	.L798:
3508:src/display.c **** 	}
 7716              		.loc 1 3508 4 is_stmt 0 view .LVU2471
 7717 0148 0121     		movs	r1, #1
 7718              	.L778:
 7719              	.LVL873:
 7720              	.LBB478:
 7721              	.LBI478:
3357:src/display.c **** 	s_s_sized(str, smallp, BITMAP_WIDTH, MATRIX_BASE, MAX_DOTS);
 7722              		.loc 1 3357 19 is_stmt 1 view .LVU2472
 7723              	.LBB479:
3358:src/display.c ****       }
 7724              		.loc 1 3358 2 view .LVU2473
 7725 014a 2846     		mov	r0, r5
ARM GAS  /tmp/ccdQiHBS.s 			page 239


 7726 014c FFF7FEFF 		bl	s_s_sized.constprop.0
 7727              	.LVL874:
 7728              	.L722:
3358:src/display.c ****       }
 7729              		.loc 1 3358 2 is_stmt 0 view .LVU2474
 7730              	.LBE479:
 7731              	.LBE478:
 7732              	.LBE477:
 7733              	.LBE476:
1245:src/display.c **** #endif //top_row
 7734              		.loc 1 1245 5 view .LVU2475
 7735 0150 17B0     		add	sp, sp, #92
 7736              		.cfi_remember_state
 7737              		.cfi_def_cfa_offset 28
 7738              		@ sp needed
 7739 0152 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7740              	.LVL875:
 7741              	.L841:
 7742              		.cfi_restore_state
 996:src/display.c **** #else
 7743              		.loc 1 996 35 discriminator 1 view .LVU2476
 7744 0156 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 996:src/display.c **** #else
 7745              		.loc 1 996 32 discriminator 1 view .LVU2477
 7746 015a 02F04102 		and	r2, r2, #65
 7747 015e 412A     		cmp	r2, #65
 7748 0160 3FF46DAF 		beq	.L735
1017:src/display.c **** 	    *p++ = shift_char;
 7749              		.loc 1 1017 4 is_stmt 1 view .LVU2478
1017:src/display.c **** 	    *p++ = shift_char;
 7750              		.loc 1 1017 7 is_stmt 0 view .LVU2479
 7751 0164 202E     		cmp	r6, #32
 7752 0166 00F05E81 		beq	.L736
 7753              	.L738:
1018:src/display.c **** 	    *p++ = '\006';
 7754              		.loc 1 1018 6 is_stmt 1 view .LVU2480
 7755              	.LVL876:
1019:src/display.c **** 	  }
 7756              		.loc 1 1019 11 is_stmt 0 view .LVU2481
 7757 016a 0623     		movs	r3, #6
1018:src/display.c **** 	    *p++ = '\006';
 7758              		.loc 1 1018 11 view .LVU2482
 7759 016c 8DF82C60 		strb	r6, [sp, #44]
1019:src/display.c **** 	  }
 7760              		.loc 1 1019 6 is_stmt 1 view .LVU2483
 7761              	.LVL877:
1019:src/display.c **** 	  }
 7762              		.loc 1 1019 11 is_stmt 0 view .LVU2484
 7763 0170 8DF82D30 		strb	r3, [sp, #45]
1019:src/display.c **** 	  }
 7764              		.loc 1 1019 8 view .LVU2485
 7765 0174 0DF12E00 		add	r0, sp, #46
 7766              	.LVL878:
 7767              	.L737:
1025:src/display.c **** 	  *p++ = ' ';
 7768              		.loc 1 1025 2 is_stmt 1 view .LVU2486
1025:src/display.c **** 	  *p++ = ' ';
ARM GAS  /tmp/ccdQiHBS.s 			page 240


 7769              		.loc 1 1025 6 is_stmt 0 view .LVU2487
 7770 0178 654C     		ldr	r4, .L852+4
 7771 017a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1025:src/display.c **** 	  *p++ = ' ';
 7772              		.loc 1 1025 5 view .LVU2488
 7773 017c 9A07     		lsls	r2, r3, #30
 7774 017e 00F14D81 		bmi	.L846
1030:src/display.c **** 	  *p++ = ' ';
 7775              		.loc 1 1030 2 is_stmt 1 view .LVU2489
1030:src/display.c **** 	  *p++ = ' ';
 7776              		.loc 1 1030 5 is_stmt 0 view .LVU2490
 7777 0182 5B07     		lsls	r3, r3, #29
 7778 0184 00F16881 		bmi	.L847
1036:src/display.c **** 	  if (State2.wascomplex) {
 7779              		.loc 1 1036 2 is_stmt 1 view .LVU2491
1036:src/display.c **** 	  if (State2.wascomplex) {
 7780              		.loc 1 1036 5 is_stmt 0 view .LVU2492
 7781 0188 202E     		cmp	r6, #32
 7782 018a 00F08581 		beq	.L848
 7783              	.L741:
1053:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7784              		.loc 1 1053 2 is_stmt 1 view .LVU2493
1053:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7785              		.loc 1 1053 16 is_stmt 0 view .LVU2494
 7786 018e D8F80030 		ldr	r3, [r8]
 7787 0192 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 7788 0196 C3F30113 		ubfx	r3, r3, #4, #2
1053:src/display.c **** #ifndef NO_DATEMODE_INDICATION
 7789              		.loc 1 1053 2 view .LVU2495
 7790 019a 012B     		cmp	r3, #1
 7791 019c 00F09781 		beq	.L785
 7792 01a0 5F49     		ldr	r1, .L852+20
 7793 01a2 604A     		ldr	r2, .L852+24
 7794 01a4 022B     		cmp	r3, #2
 7795 01a6 08BF     		it	eq
 7796 01a8 1146     		moveq	r1, r2
 7797              	.L744:
 7798              	.LVL879:
1067:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7799              		.loc 1 1067 2 is_stmt 1 view .LVU2496
1067:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7800              		.loc 1 1067 6 is_stmt 0 view .LVU2497
 7801 01aa FFF7FEFF 		bl	scopy
 7802              	.LVL880:
1067:src/display.c **** #if !defined SHOW_STACK_SIZE || defined NO_DATEMODE_INDICATION
 7803              		.loc 1 1067 6 view .LVU2498
 7804 01ae 0446     		mov	r4, r0
 7805              	.LVL881:
1069:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7806              		.loc 1 1069 2 is_stmt 1 view .LVU2499
1069:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7807              		.loc 1 1069 6 is_stmt 0 view .LVU2500
 7808 01b0 FFF7FEFF 		bl	get_trig_mode
 7809              	.LVL882:
1069:src/display.c **** 	  scopy(p, (has_FONT_ESCAPE ? "\006\006\007\210\007" : "\006\006\007" ));
 7810              		.loc 1 1069 5 view .LVU2501
 7811 01b4 0228     		cmp	r0, #2
ARM GAS  /tmp/ccdQiHBS.s 			page 241


 7812 01b6 BBD1     		bne	.L726
1070:src/display.c **** 	}
 7813              		.loc 1 1070 4 is_stmt 1 view .LVU2502
 7814 01b8 5B49     		ldr	r1, .L852+28
 7815 01ba 2046     		mov	r0, r4
 7816 01bc FFF7FEFF 		bl	scopy
 7817              	.LVL883:
 7818 01c0 B6E7     		b	.L726
 7819              	.LVL884:
 7820              	.L840:
 967:src/display.c **** 	    *p++ = '\006';
 7821              		.loc 1 967 6 view .LVU2503
 968:src/display.c **** 	  }
 7822              		.loc 1 968 11 is_stmt 0 view .LVU2504
 7823 01c2 0623     		movs	r3, #6
 7824 01c4 8DF82D30 		strb	r3, [sp, #45]
 967:src/display.c **** 	    *p++ = '\006';
 7825              		.loc 1 967 11 view .LVU2505
 7826 01c8 8DF82C60 		strb	r6, [sp, #44]
 968:src/display.c **** 	  }
 7827              		.loc 1 968 6 is_stmt 1 view .LVU2506
 7828              	.LVL885:
 971:src/display.c **** 	default:
 7829              		.loc 1 971 2 view .LVU2507
 971:src/display.c **** 	default:
 7830              		.loc 1 971 9 is_stmt 0 view .LVU2508
 7831 01cc FFF7FEFF 		bl	int_mode
 7832              	.LVL886:
 7833 01d0 0138     		subs	r0, r0, #1
 7834 01d2 C0B2     		uxtb	r0, r0
 7835 01d4 0228     		cmp	r0, #2
 7836 01d6 96BF     		itet	ls
 7837 01d8 544B     		ldrls	r3, .L852+32
 7838 01da 5549     		ldrhi	r1, .L852+36
 7839 01dc 53F82010 		ldrls	r1, [r3, r0, lsl #2]
 7840              	.LVL887:
 978:src/display.c **** 	*q++ = '\006';
 7841              		.loc 1 978 2 is_stmt 1 view .LVU2509
 978:src/display.c **** 	*q++ = '\006';
 7842              		.loc 1 978 6 is_stmt 0 view .LVU2510
 7843 01e0 0DF12E00 		add	r0, sp, #46
 7844              	.LVL888:
 978:src/display.c **** 	*q++ = '\006';
 7845              		.loc 1 978 6 view .LVU2511
 7846 01e4 FFF7FEFF 		bl	scopy
 7847              	.LVL889:
 979:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7848              		.loc 1 979 7 view .LVU2512
 7849 01e8 0646     		mov	r6, r0
 7850              	.LVL890:
 979:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7851              		.loc 1 979 7 view .LVU2513
 7852 01ea 0623     		movs	r3, #6
 7853 01ec 06F8013B 		strb	r3, [r6], #1
 978:src/display.c **** 	*q++ = '\006';
 7854              		.loc 1 978 6 view .LVU2514
 7855 01f0 0446     		mov	r4, r0
ARM GAS  /tmp/ccdQiHBS.s 			page 242


 7856              	.LVL891:
 979:src/display.c **** 	p = num_arg_0(q, word_size(), 2);
 7857              		.loc 1 979 2 is_stmt 1 view .LVU2515
 980:src/display.c **** 
 7858              		.loc 1 980 2 view .LVU2516
 980:src/display.c **** 
 7859              		.loc 1 980 6 is_stmt 0 view .LVU2517
 7860 01f2 FFF7FEFF 		bl	word_size
 7861              	.LVL892:
 7862 01f6 0146     		mov	r1, r0
 7863 01f8 3046     		mov	r0, r6
 982:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7864              		.loc 1 982 19 view .LVU2518
 7865 01fa 4E4E     		ldr	r6, .L852+40
 7866              	.LVL893:
 980:src/display.c **** 
 7867              		.loc 1 980 6 view .LVU2519
 7868 01fc 0222     		movs	r2, #2
 7869 01fe FFF7FEFF 		bl	num_arg_0
 7870              	.LVL894:
 982:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7871              		.loc 1 982 19 view .LVU2520
 7872 0202 3368     		ldr	r3, [r6]
 7873              	.LVL895:
 982:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7874              		.loc 1 982 2 is_stmt 1 view .LVU2521
 982:src/display.c **** 	  n = 4 + 2 * (5 - IntMaxWindow);
 7875              		.loc 1 982 5 is_stmt 0 view .LVU2522
 7876 0204 002B     		cmp	r3, #0
 7877 0206 93DD     		ble	.L726
 983:src/display.c **** 	  if (*q == '1')
 7878              		.loc 1 983 4 is_stmt 1 view .LVU2523
 983:src/display.c **** 	  if (*q == '1')
 7879              		.loc 1 983 10 is_stmt 0 view .LVU2524
 7880 0208 C3F10702 		rsb	r2, r3, #7
 7881 020c 5200     		lsls	r2, r2, #1
 983:src/display.c **** 	  if (*q == '1')
 7882              		.loc 1 983 6 view .LVU2525
 7883 020e 0192     		str	r2, [sp, #4]
 984:src/display.c **** 	    n += 2;
 7884              		.loc 1 984 4 is_stmt 1 view .LVU2526
 984:src/display.c **** 	    n += 2;
 7885              		.loc 1 984 7 is_stmt 0 view .LVU2527
 7886 0210 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 7887 0212 3129     		cmp	r1, #49
 985:src/display.c **** 	  if (q[1] == '1')
 7888              		.loc 1 985 6 is_stmt 1 view .LVU2528
 985:src/display.c **** 	  if (q[1] == '1')
 7889              		.loc 1 985 8 is_stmt 0 view .LVU2529
 7890 0214 04BF     		itt	eq
 7891 0216 0232     		addeq	r2, r2, #2
 7892 0218 0192     		streq	r2, [sp, #4]
 986:src/display.c **** 	    n += 2;
 7893              		.loc 1 986 4 is_stmt 1 view .LVU2530
 986:src/display.c **** 	    n += 2;
 7894              		.loc 1 986 7 is_stmt 0 view .LVU2531
 7895 021a A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccdQiHBS.s 			page 243


 7896 021c 3129     		cmp	r1, #49
 7897 021e 00D1     		bne	.L728
 987:src/display.c **** 	  while (n-- > 0)
 7898              		.loc 1 987 6 is_stmt 1 view .LVU2532
 987:src/display.c **** 	  while (n-- > 0)
 7899              		.loc 1 987 8 is_stmt 0 view .LVU2533
 7900 0220 0232     		adds	r2, r2, #2
 7901              	.L728:
 988:src/display.c **** 	    *p++ = '\006';
 7902              		.loc 1 988 10 is_stmt 1 view .LVU2534
 988:src/display.c **** 	    *p++ = '\006';
 7903              		.loc 1 988 12 is_stmt 0 view .LVU2535
 7904 0222 511E     		subs	r1, r2, #1
 988:src/display.c **** 	    *p++ = '\006';
 7905              		.loc 1 988 10 view .LVU2536
 7906 0224 002A     		cmp	r2, #0
 988:src/display.c **** 	    *p++ = '\006';
 7907              		.loc 1 988 12 view .LVU2537
 7908 0226 0191     		str	r1, [sp, #4]
 988:src/display.c **** 	    *p++ = '\006';
 7909              		.loc 1 988 10 view .LVU2538
 7910 0228 40F35381 		ble	.L837
 989:src/display.c **** 
 7911              		.loc 1 989 11 view .LVU2539
 7912 022c 0621     		movs	r1, #6
 7913              	.L729:
 989:src/display.c **** 
 7914              		.loc 1 989 6 is_stmt 1 view .LVU2540
 7915              	.LVL896:
 989:src/display.c **** 
 7916              		.loc 1 989 11 is_stmt 0 view .LVU2541
 7917 022e 00F8011B 		strb	r1, [r0], #1
 7918              	.LVL897:
 988:src/display.c **** 	    *p++ = '\006';
 7919              		.loc 1 988 10 is_stmt 1 view .LVU2542
 988:src/display.c **** 	    *p++ = '\006';
 7920              		.loc 1 988 12 is_stmt 0 view .LVU2543
 7921 0232 019B     		ldr	r3, [sp, #4]
 7922 0234 5A1E     		subs	r2, r3, #1
 988:src/display.c **** 	    *p++ = '\006';
 7923              		.loc 1 988 10 view .LVU2544
 7924 0236 002B     		cmp	r3, #0
 988:src/display.c **** 	    *p++ = '\006';
 7925              		.loc 1 988 12 view .LVU2545
 7926 0238 0192     		str	r2, [sp, #4]
 988:src/display.c **** 	    *p++ = '\006';
 7927              		.loc 1 988 10 view .LVU2546
 7928 023a F8DC     		bgt	.L729
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7929              		.loc 1 991 4 is_stmt 1 view .LVU2547
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7930              		.loc 1 991 11 is_stmt 0 view .LVU2548
 7931 023c 3368     		ldr	r3, [r6]
 7932 023e 0193     		str	r3, [sp, #4]
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7933              		.loc 1 991 27 is_stmt 1 view .LVU2549
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
ARM GAS  /tmp/ccdQiHBS.s 			page 244


 7934              		.loc 1 991 4 is_stmt 0 view .LVU2550
 7935 0240 002B     		cmp	r3, #0
 7936 0242 FFF675AF 		blt	.L726
 7937              	.L780:
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7938              		.loc 1 991 4 view .LVU2551
 7939 0246 324C     		ldr	r4, .L852+4
 7940              	.LVL898:
 7941              	.L734:
 992:src/display.c **** 	}
 7942              		.loc 1 992 6 is_stmt 1 view .LVU2552
 992:src/display.c **** 	}
 7943              		.loc 1 992 19 is_stmt 0 view .LVU2553
 7944 0248 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7945 024a C2F3C202 		ubfx	r2, r2, #3, #3
 992:src/display.c **** 	}
 7946              		.loc 1 992 11 view .LVU2554
 7947 024e 9A42     		cmp	r2, r3
 7948 0250 0CBF     		ite	eq
 7949 0252 7C23     		moveq	r3, #124
 7950 0254 2723     		movne	r3, #39
 7951              	.LVL899:
 992:src/display.c **** 	}
 7952              		.loc 1 992 11 view .LVU2555
 7953 0256 00F8013B 		strb	r3, [r0], #1
 7954              	.LVL900:
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7955              		.loc 1 991 35 is_stmt 1 view .LVU2556
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7956              		.loc 1 991 36 is_stmt 0 view .LVU2557
 7957 025a 019B     		ldr	r3, [sp, #4]
 7958 025c 013B     		subs	r3, r3, #1
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7959              		.loc 1 991 4 view .LVU2558
 7960 025e 002B     		cmp	r3, #0
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7961              		.loc 1 991 36 view .LVU2559
 7962 0260 0193     		str	r3, [sp, #4]
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7963              		.loc 1 991 27 is_stmt 1 view .LVU2560
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 7964              		.loc 1 991 4 is_stmt 0 view .LVU2561
 7965 0262 F1DA     		bge	.L734
 7966 0264 64E7     		b	.L726
 7967              	.LVL901:
 7968              	.L755:
1244:src/display.c ****     }
 7969              		.loc 1 1244 11 is_stmt 1 view .LVU2562
 7970              	.LBB483:
3502:src/display.c **** 	if (no_status_top) return;
 7971              		.loc 1 3502 19 view .LVU2563
 7972              	.LBB482:
3503:src/display.c **** 	if (State2.runmode) {
 7973              		.loc 1 3503 2 view .LVU2564
3503:src/display.c **** 	if (State2.runmode) {
 7974              		.loc 1 3503 6 is_stmt 0 view .LVU2565
 7975 0266 2D4A     		ldr	r2, .L852+16
ARM GAS  /tmp/ccdQiHBS.s 			page 245


3503:src/display.c **** 	if (State2.runmode) {
 7976              		.loc 1 3503 5 view .LVU2566
 7977 0268 B2F90020 		ldrsh	r2, [r2]
 7978 026c 002A     		cmp	r2, #0
 7979 026e 7FF46FAF 		bne	.L722
 7980              	.LVL902:
 7981              	.L776:
3508:src/display.c **** 	}
 7982              		.loc 1 3508 4 is_stmt 1 view .LVU2567
 7983 0272 1B06     		lsls	r3, r3, #24
 7984 0274 3FF568AF 		bmi	.L798
 7985              	.LVL903:
 7986              	.LBB480:
 7987              	.LBI480:
3489:src/display.c **** 	return pixel_length(s, 0) > BITMAP_WIDTH+1;
 7988              		.loc 1 3489 18 view .LVU2568
 7989              	.LBB481:
3490:src/display.c ****       }
 7990              		.loc 1 3490 2 view .LVU2569
3490:src/display.c ****       }
 7991              		.loc 1 3490 9 is_stmt 0 view .LVU2570
 7992 0278 0021     		movs	r1, #0
 7993              	.LVL904:
 7994              	.L839:
3490:src/display.c ****       }
 7995              		.loc 1 3490 9 view .LVU2571
 7996 027a 2846     		mov	r0, r5
 7997 027c FFF7FEFF 		bl	pixel_length
 7998              	.LVL905:
 7999              	.LBE481:
 8000              	.LBE480:
3508:src/display.c **** 	}
 8001              		.loc 1 3508 4 view .LVU2572
 8002 0280 2C28     		cmp	r0, #44
 8003 0282 D4BF     		ite	le
 8004 0284 0021     		movle	r1, #0
 8005 0286 0121     		movgt	r1, #1
 8006 0288 5FE7     		b	.L778
 8007              	.LVL906:
 8008              	.L745:
3508:src/display.c **** 	}
 8009              		.loc 1 3508 4 view .LVU2573
 8010              	.LBE482:
 8011              	.LBE483:
1087:src/display.c **** 	  *p++ = '\007';
 8012              		.loc 1 1087 7 is_stmt 1 view .LVU2574
1087:src/display.c **** 	  *p++ = '\007';
 8013              		.loc 1 1087 10 is_stmt 0 view .LVU2575
 8014 028a 202E     		cmp	r6, #32
 8015 028c 2ED1     		bne	.L849
1096:src/display.c **** 			if ( POLAR_DISPLAY ) {
 8016              		.loc 1 1096 3 is_stmt 1 view .LVU2576
1096:src/display.c **** 			if ( POLAR_DISPLAY ) {
 8017              		.loc 1 1096 19 is_stmt 0 view .LVU2577
 8018 028e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
1096:src/display.c **** 			if ( POLAR_DISPLAY ) {
 8019              		.loc 1 1096 6 view .LVU2578
ARM GAS  /tmp/ccdQiHBS.s 			page 246


 8020 0292 13F0060F 		tst	r3, #6
 8021 0296 04D0     		beq	.L749
1096:src/display.c **** 			if ( POLAR_DISPLAY ) {
 8022              		.loc 1 1096 33 discriminator 1 view .LVU2579
 8023 0298 03F04102 		and	r2, r3, #65
 8024 029c 412A     		cmp	r2, #65
 8025 029e 00F0CD80 		beq	.L850
 8026              	.L749:
1106:src/display.c **** 			q = "\007\307<";
 8027              		.loc 1 1106 8 is_stmt 1 view .LVU2580
1106:src/display.c **** 			q = "\007\307<";
 8028              		.loc 1 1106 23 is_stmt 0 view .LVU2581
 8029 02a2 254A     		ldr	r2, .L852+44
 8030 02a4 1268     		ldr	r2, [r2]
1106:src/display.c **** 			q = "\007\307<";
 8031              		.loc 1 1106 11 view .LVU2582
 8032 02a6 012A     		cmp	r2, #1
 8033 02a8 00F0B580 		beq	.L790
1106:src/display.c **** 			q = "\007\307<";
 8034              		.loc 1 1106 44 discriminator 1 view .LVU2583
 8035 02ac 03F0C101 		and	r1, r3, #193
 8036 02b0 C129     		cmp	r1, #193
 8037 02b2 00F0B080 		beq	.L790
1109:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8038              		.loc 1 1109 8 is_stmt 1 view .LVU2584
1109:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8039              		.loc 1 1109 12 is_stmt 0 view .LVU2585
 8040 02b6 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
1109:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8041              		.loc 1 1109 11 view .LVU2586
 8042 02b8 11F0C00F 		tst	r1, #192
 8043 02bc 40F0FF80 		bne	.L752
1109:src/display.c **** 			q = CPX_J ? "\007\207j" : "\007\207i";
 8044              		.loc 1 1109 30 discriminator 1 view .LVU2587
 8045 02c0 03F04101 		and	r1, r3, #65
 8046 02c4 4129     		cmp	r1, #65
 8047 02c6 00F0FA80 		beq	.L752
1120:src/display.c **** 	    q = "\007\307y";
 8048              		.loc 1 1120 9 is_stmt 1 view .LVU2588
1120:src/display.c **** 	    q = "\007\307y";
 8049              		.loc 1 1120 12 is_stmt 0 view .LVU2589
 8050 02ca 022A     		cmp	r2, #2
 8051 02cc 00F00881 		beq	.L792
1124:src/display.c **** 	    q = "\007\207\007";
 8052              		.loc 1 1124 9 is_stmt 1 view .LVU2590
1124:src/display.c **** 	    q = "\007\207\007";
 8053              		.loc 1 1124 13 is_stmt 0 view .LVU2591
 8054 02d0 FFF7FEFF 		bl	get_trig_mode
 8055              	.LVL907:
1124:src/display.c **** 	    q = "\007\207\007";
 8056              		.loc 1 1124 12 view .LVU2592
 8057 02d4 0228     		cmp	r0, #2
 8058 02d6 00F00681 		beq	.L793
1130:src/display.c **** #else
 8059              		.loc 1 1130 6 is_stmt 1 view .LVU2593
1130:src/display.c **** #else
 8060              		.loc 1 1130 11 is_stmt 0 view .LVU2594
ARM GAS  /tmp/ccdQiHBS.s 			page 247


 8061 02da FFF7FEFF 		bl	is_dblmode
 8062              	.LVL908:
1130:src/display.c **** #else
 8063              		.loc 1 1130 38 view .LVU2595
 8064 02de 174B     		ldr	r3, .L852+48
 8065 02e0 1749     		ldr	r1, .L852+52
 8066 02e2 0028     		cmp	r0, #0
 8067 02e4 18BF     		it	ne
 8068 02e6 1946     		movne	r1, r3
 8069 02e8 2846     		mov	r0, r5
 8070 02ea B6E6     		b	.L746
 8071              	.L849:
1088:src/display.c **** 	  *p++ = '\307';
 8072              		.loc 1 1088 4 is_stmt 1 view .LVU2596
 8073              	.LVL909:
1089:src/display.c **** 	  *p++ = shift_char;
 8074              		.loc 1 1089 4 view .LVU2597
1088:src/display.c **** 	  *p++ = '\307';
 8075              		.loc 1 1088 9 is_stmt 0 view .LVU2598
 8076 02ec 4CF20773 		movw	r3, #50951
 8077 02f0 ADF82C30 		strh	r3, [sp, #44]	@ movhi
1090:src/display.c **** 	  goto no_copy;
 8078              		.loc 1 1090 4 is_stmt 1 view .LVU2599
 8079              	.LVL910:
1091:src/display.c **** 	}
 8080              		.loc 1 1091 4 view .LVU2600
1148:src/display.c **** 	  scopy(p, "\007\204\006\015");
 8081              		.loc 1 1148 5 is_stmt 0 view .LVU2601
 8082 02f4 5307     		lsls	r3, r2, #29
1090:src/display.c **** 	  goto no_copy;
 8083              		.loc 1 1090 9 view .LVU2602
 8084 02f6 8DF82E60 		strb	r6, [sp, #46]
1090:src/display.c **** 	  goto no_copy;
 8085              		.loc 1 1090 6 view .LVU2603
 8086 02fa 0DF12F06 		add	r6, sp, #47
 8087              	.LVL911:
1148:src/display.c **** 	  scopy(p, "\007\204\006\015");
 8088              		.loc 1 1148 2 is_stmt 1 view .LVU2604
1148:src/display.c **** 	  scopy(p, "\007\204\006\015");
 8089              		.loc 1 1148 5 is_stmt 0 view .LVU2605
 8090 02fe 7FF5B3AE 		bpl	.L754
 8091              	.LVL912:
 8092              	.L842:
1149:src/display.c **** 	} else if (State2.runmode) {
 8093              		.loc 1 1149 4 is_stmt 1 view .LVU2606
 8094 0302 1049     		ldr	r1, .L852+56
 8095 0304 3046     		mov	r0, r6
 8096 0306 FFF7FEFF 		bl	scopy
 8097              	.LVL913:
 8098 030a 11E7     		b	.L726
 8099              	.L853:
 8100              		.align	2
 8101              	.L852:
 8102 030c 00000000 		.word	.LANCHOR12
 8103 0310 00000000 		.word	StateWhileOn
 8104 0314 44000000 		.word	.LC13
 8105 0318 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/ccdQiHBS.s 			page 248


 8106 031c 00000000 		.word	.LANCHOR15
 8107 0320 10000000 		.word	.LC6
 8108 0324 1C000000 		.word	.LC8
 8109 0328 60000000 		.word	.LC20
 8110 032c 00000000 		.word	.LANCHOR13
 8111 0330 00000000 		.word	.LC2
 8112 0334 00000000 		.word	IntMaxWindow
 8113 0338 00000000 		.word	RectPolConv
 8114 033c 54000000 		.word	.LC17
 8115 0340 5C000000 		.word	.LC19
 8116 0344 68000000 		.word	.LC21
 8117 0348 00000000 		.word	main_ram
 8118 034c 00000000 		.word	ShowRegister
 8119              	.L767:
 8120              	.LBB484:
1199:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8121              		.loc 1 1199 6 view .LVU2607
1199:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8122              		.loc 1 1199 21 is_stmt 0 view .LVU2608
 8123 0350 93F8E637 		ldrb	r3, [r3, #2022]	@ zero_extendqisi2
1199:src/display.c **** #ifndef SHIFT_AND_CMPLX_SUPPRESS_YREG
 8124              		.loc 1 1199 9 view .LVU2609
 8125 0354 9B06     		lsls	r3, r3, #26
 8126 0356 3BD5     		bpl	.L764
1201:src/display.c **** #endif
 8127              		.loc 1 1201 6 view .LVU2610
 8128 0358 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
1201:src/display.c **** #endif
 8129              		.loc 1 1201 3 view .LVU2611
 8130 035a 13F00204 		ands	r4, r3, #2
 8131 035e 37D1     		bne	.L764
1204:src/display.c **** #endif
 8132              		.loc 1 1204 6 view .LVU2612
 8133 0360 644B     		ldr	r3, .L854
1204:src/display.c **** #endif
 8134              		.loc 1 1204 3 view .LVU2613
 8135 0362 1B68     		ldr	r3, [r3]
 8136 0364 012B     		cmp	r3, #1
 8137 0366 33D0     		beq	.L764
1206:src/display.c **** 	      char ltgteq;
 8138              		.loc 1 1206 6 view .LVU2614
 8139 0368 3146     		mov	r1, r6
 8140 036a 3846     		mov	r0, r7
 8141 036c FFF7FEFF 		bl	set_x_fract
 8142              	.LVL914:
1206:src/display.c **** 	      char ltgteq;
 8143              		.loc 1 1206 3 view .LVU2615
 8144 0370 70B3     		cbz	r0, .L764
 8145              	.LBB471:
1207:src/display.c **** 
 8146              		.loc 1 1207 8 is_stmt 1 view .LVU2616
1209:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8147              		.loc 1 1209 8 view .LVU2617
1209:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8148              		.loc 1 1209 12 is_stmt 0 view .LVU2618
 8149 0372 2146     		mov	r1, r4
 8150 0374 2846     		mov	r0, r5
ARM GAS  /tmp/ccdQiHBS.s 			page 249


 8151 0376 FFF7FEFF 		bl	find_char
 8152              	.LVL915:
 8153 037a 0446     		mov	r4, r0
1209:src/display.c **** 	      // Replace Lt/Gt/= with </>/= in small font
 8154              		.loc 1 1209 10 view .LVU2619
 8155 037c 0238     		subs	r0, r0, #2
 8156              	.LVL916:
1211:src/display.c **** 	      switch (ltgteq) {
 8157              		.loc 1 1211 8 is_stmt 1 view .LVU2620
1211:src/display.c **** 	      switch (ltgteq) {
 8158              		.loc 1 1211 15 is_stmt 0 view .LVU2621
 8159 037e 14F8028C 		ldrb	r8, [r4, #-2]	@ zero_extendqisi2
 8160              	.LVL917:
1212:src/display.c **** 	      case 'G':	ltgteq = '>'; break;
 8161              		.loc 1 1212 8 is_stmt 1 view .LVU2622
 8162 0382 B8F1470F 		cmp	r8, #71
 8163 0386 00F0B180 		beq	.L795
1214:src/display.c **** 	      }
 8164              		.loc 1 1214 25 is_stmt 0 view .LVU2623
 8165 038a B8F14C0F 		cmp	r8, #76
 8166 038e 08BF     		it	eq
 8167 0390 4FF03C08 		moveq	r8, #60
 8168              	.LVL918:
 8169              	.L771:
1216:src/display.c **** 	      q[2] = ltgteq;
 8170              		.loc 1 1216 8 is_stmt 1 view .LVU2624
 8171 0394 5849     		ldr	r1, .L854+4
 8172 0396 FFF7FEFF 		bl	scopy
 8173              	.LVL919:
1217:src/display.c **** 
 8174              		.loc 1 1217 8 view .LVU2625
1217:src/display.c **** 
 8175              		.loc 1 1217 13 is_stmt 0 view .LVU2626
 8176 039a 84F80080 		strb	r8, [r4]
1219:src/display.c **** 		goto skip;
 8177              		.loc 1 1219 8 is_stmt 1 view .LVU2627
1219:src/display.c **** 		goto skip;
 8178              		.loc 1 1219 12 is_stmt 0 view .LVU2628
 8179 039e 0121     		movs	r1, #1
 8180 03a0 2846     		mov	r0, r5
 8181 03a2 FFF7FEFF 		bl	pixel_length
 8182              	.LVL920:
1219:src/display.c **** 		goto skip;
 8183              		.loc 1 1219 11 view .LVU2629
 8184 03a6 2C28     		cmp	r0, #44
 8185 03a8 7FF7C2AE 		ble	.L726
1222:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8186              		.loc 1 1222 8 is_stmt 1 view .LVU2630
1222:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8187              		.loc 1 1222 14 is_stmt 0 view .LVU2631
 8188 03ac 4FF00008 		mov	r8, #0
 8189              	.LVL921:
1222:src/display.c **** 	      if (pixel_length(buf, 1) <= BW_TOP + 1) {
 8190              		.loc 1 1222 14 view .LVU2632
 8191 03b0 04F8038C 		strb	r8, [r4, #-3]
1223:src/display.c **** 		goto skip;
 8192              		.loc 1 1223 8 is_stmt 1 view .LVU2633
ARM GAS  /tmp/ccdQiHBS.s 			page 250


1223:src/display.c **** 		goto skip;
 8193              		.loc 1 1223 12 is_stmt 0 view .LVU2634
 8194 03b4 0121     		movs	r1, #1
 8195 03b6 2846     		mov	r0, r5
 8196 03b8 FFF7FEFF 		bl	pixel_length
 8197              	.LVL922:
1223:src/display.c **** 		goto skip;
 8198              		.loc 1 1223 11 view .LVU2635
 8199 03bc 2C28     		cmp	r0, #44
 8200 03be 7FF7B7AE 		ble	.L726
1226:src/display.c **** 	    }
 8201              		.loc 1 1226 8 is_stmt 1 view .LVU2636
1226:src/display.c **** 	    }
 8202              		.loc 1 1226 39 is_stmt 0 view .LVU2637
 8203 03c2 721B     		subs	r2, r6, r5
1226:src/display.c **** 	    }
 8204              		.loc 1 1226 8 view .LVU2638
 8205 03c4 4146     		mov	r1, r8
 8206 03c6 C2F12A02 		rsb	r2, r2, #42
 8207 03ca 3046     		mov	r0, r6
 8208 03cc FFF7FEFF 		bl	xset
 8209              	.LVL923:
 8210              	.L764:
1226:src/display.c **** 	    }
 8211              		.loc 1 1226 8 view .LVU2639
 8212              	.LBE471:
1229:src/display.c **** 	    int extra_pixels;
 8213              		.loc 1 1229 4 is_stmt 1 view .LVU2640
1229:src/display.c **** 	    int extra_pixels;
 8214              		.loc 1 1229 10 is_stmt 0 view .LVU2641
 8215 03d0 0C23     		movs	r3, #12
 8216 03d2 0193     		str	r3, [sp, #4]
1229:src/display.c **** 	    int extra_pixels;
 8217              		.loc 1 1229 27 is_stmt 1 view .LVU2642
 8218 03d4 0FE0     		b	.L773
 8219              	.LVL924:
 8220              	.L851:
 8221              	.LBB472:
1237:src/display.c **** 
 8222              		.loc 1 1237 6 is_stmt 0 view .LVU2643
 8223 03d6 019A     		ldr	r2, [sp, #4]
 8224 03d8 0A32     		adds	r2, r2, #10
 8225 03da FFF7FEFF 		bl	xset
 8226              	.LVL925:
1239:src/display.c **** 	  }
 8227              		.loc 1 1239 6 is_stmt 1 view .LVU2644
1239:src/display.c **** 	  }
 8228              		.loc 1 1239 30 is_stmt 0 view .LVU2645
 8229 03de B4F12902 		subs	r2, r4, #41
1239:src/display.c **** 	  }
 8230              		.loc 1 1239 8 view .LVU2646
 8231 03e2 019B     		ldr	r3, [sp, #4]
1239:src/display.c **** 	  }
 8232              		.loc 1 1239 30 view .LVU2647
 8233 03e4 48BF     		it	mi
 8234 03e6 A4F12602 		submi	r2, r4, #38
1239:src/display.c **** 	  }
ARM GAS  /tmp/ccdQiHBS.s 			page 251


 8235              		.loc 1 1239 8 view .LVU2648
 8236 03ea A3EBA203 		sub	r3, r3, r2, asr #2
 8237              	.LBE472:
1229:src/display.c **** 	    int extra_pixels;
 8238              		.loc 1 1229 4 view .LVU2649
 8239 03ee 012B     		cmp	r3, #1
 8240              	.LBB473:
1239:src/display.c **** 	  }
 8241              		.loc 1 1239 8 view .LVU2650
 8242 03f0 0193     		str	r3, [sp, #4]
 8243              	.LBE473:
1229:src/display.c **** 	    int extra_pixels;
 8244              		.loc 1 1229 27 is_stmt 1 view .LVU2651
1229:src/display.c **** 	    int extra_pixels;
 8245              		.loc 1 1229 4 is_stmt 0 view .LVU2652
 8246 03f2 7FF79DAE 		ble	.L726
 8247              	.LVL926:
 8248              	.L773:
 8249              	.LBB474:
1230:src/display.c **** 
 8250              		.loc 1 1230 6 is_stmt 1 view .LVU2653
1232:src/display.c **** 	    extra_pixels = pixel_length(buf, 1) - (BW_TOP + 1);
 8251              		.loc 1 1232 6 view .LVU2654
 8252 03f6 01AA     		add	r2, sp, #4
 8253 03f8 3146     		mov	r1, r6
 8254 03fa 3846     		mov	r0, r7
 8255 03fc FFF7FEFF 		bl	set_x_dn
 8256              	.LVL927:
1233:src/display.c **** 	    if (extra_pixels <= 0)
 8257              		.loc 1 1233 6 view .LVU2655
1233:src/display.c **** 	    if (extra_pixels <= 0)
 8258              		.loc 1 1233 21 is_stmt 0 view .LVU2656
 8259 0400 0121     		movs	r1, #1
 8260 0402 2846     		mov	r0, r5
 8261 0404 FFF7FEFF 		bl	pixel_length
 8262              	.LVL928:
1237:src/display.c **** 
 8263              		.loc 1 1237 6 is_stmt 1 view .LVU2657
1233:src/display.c **** 	    if (extra_pixels <= 0)
 8264              		.loc 1 1233 21 is_stmt 0 view .LVU2658
 8265 0408 0446     		mov	r4, r0
 8266              	.LVL929:
1234:src/display.c **** 	      break;
 8267              		.loc 1 1234 6 is_stmt 1 view .LVU2659
1234:src/display.c **** 	      break;
 8268              		.loc 1 1234 9 is_stmt 0 view .LVU2660
 8269 040a 2C2C     		cmp	r4, #44
1237:src/display.c **** 
 8270              		.loc 1 1237 6 view .LVU2661
 8271 040c 4FF00001 		mov	r1, #0
 8272 0410 3046     		mov	r0, r6
 8273              	.LVL930:
1234:src/display.c **** 	      break;
 8274              		.loc 1 1234 9 view .LVU2662
 8275 0412 E0DC     		bgt	.L851
 8276              	.LVL931:
1234:src/display.c **** 	      break;
ARM GAS  /tmp/ccdQiHBS.s 			page 252


 8277              		.loc 1 1234 9 view .LVU2663
 8278              	.LBE474:
 8279 0414 8CE6     		b	.L726
 8280              	.LVL932:
 8281              	.L790:
1234:src/display.c **** 	      break;
 8282              		.loc 1 1234 9 view .LVU2664
 8283              	.LBE484:
1107:src/display.c **** 		}
 8284              		.loc 1 1107 6 view .LVU2665
 8285 0416 3949     		ldr	r1, .L854+8
 913:src/display.c ****       int n;
 8286              		.loc 1 913 22 view .LVU2666
 8287 0418 2846     		mov	r0, r5
 8288 041a 1EE6     		b	.L746
 8289              	.LVL933:
 8290              	.L846:
1026:src/display.c **** 	  *p = '\024';
 8291              		.loc 1 1026 4 is_stmt 1 view .LVU2667
1026:src/display.c **** 	  *p = '\024';
 8292              		.loc 1 1026 9 is_stmt 0 view .LVU2668
 8293 041c 2022     		movs	r2, #32
1027:src/display.c **** 	  goto skip;
 8294              		.loc 1 1027 7 view .LVU2669
 8295 041e 1423     		movs	r3, #20
1026:src/display.c **** 	  *p = '\024';
 8296              		.loc 1 1026 9 view .LVU2670
 8297 0420 0270     		strb	r2, [r0]
1027:src/display.c **** 	  goto skip;
 8298              		.loc 1 1027 4 is_stmt 1 view .LVU2671
1027:src/display.c **** 	  goto skip;
 8299              		.loc 1 1027 7 is_stmt 0 view .LVU2672
 8300 0422 4370     		strb	r3, [r0, #1]
1028:src/display.c **** 	}
 8301              		.loc 1 1028 4 is_stmt 1 view .LVU2673
 8302 0424 84E6     		b	.L726
 8303              	.LVL934:
 8304              	.L736:
1017:src/display.c **** 	    *p++ = shift_char;
 8305              		.loc 1 1017 30 is_stmt 0 discriminator 1 view .LVU2674
 8306 0426 FFF7FEFF 		bl	is_dblmode
 8307              	.LVL935:
1017:src/display.c **** 	    *p++ = shift_char;
 8308              		.loc 1 1017 26 discriminator 1 view .LVU2675
 8309 042a 0028     		cmp	r0, #0
 8310 042c 3FF49DAE 		beq	.L738
1022:src/display.c **** 	  }
 8311              		.loc 1 1022 6 is_stmt 1 view .LVU2676
 8312              	.LVL936:
1022:src/display.c **** 	  }
 8313              		.loc 1 1022 11 is_stmt 0 view .LVU2677
 8314 0430 4423     		movs	r3, #68
 8315 0432 8DF82C30 		strb	r3, [sp, #44]
1022:src/display.c **** 	  }
 8316              		.loc 1 1022 8 view .LVU2678
 8317 0436 0DF12D00 		add	r0, sp, #45
 8318              	.LVL937:
ARM GAS  /tmp/ccdQiHBS.s 			page 253


1022:src/display.c **** 	  }
 8319              		.loc 1 1022 8 view .LVU2679
 8320 043a 9DE6     		b	.L737
 8321              	.LVL938:
 8322              	.L850:
1097:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
 8323              		.loc 1 1097 4 is_stmt 1 view .LVU2680
1098:src/display.c **** 			}
 8324              		.loc 1 1098 5 view .LVU2681
1101:src/display.c **** 			}
 8325              		.loc 1 1101 5 view .LVU2682
1097:src/display.c **** 				q = (REAL_FLAG ? "Length:" : "Angle:");
 8326              		.loc 1 1097 7 is_stmt 0 view .LVU2683
 8327 043c 1A06     		lsls	r2, r3, #24
1098:src/display.c **** 			}
 8328              		.loc 1 1098 32 view .LVU2684
 8329 043e 4BBF     		itete	mi
 8330 0440 2F4A     		ldrmi	r2, .L854+12
1101:src/display.c **** 			}
 8331              		.loc 1 1101 30 view .LVU2685
 8332 0442 304A     		ldrpl	r2, .L854+16
1098:src/display.c **** 			}
 8333              		.loc 1 1098 32 view .LVU2686
 8334 0444 3049     		ldrmi	r1, .L854+20
1101:src/display.c **** 			}
 8335              		.loc 1 1101 30 view .LVU2687
 8336 0446 3149     		ldrpl	r1, .L854+24
 8337 0448 13F0020F 		tst	r3, #2
 8338 044c 08BF     		it	eq
 8339 044e 1146     		moveq	r1, r2
 8340              	.LVL939:
1103:src/display.c **** 			goto skip;
 8341              		.loc 1 1103 4 is_stmt 1 view .LVU2688
 8342 0450 2846     		mov	r0, r5
 8343 0452 FFF7FEFF 		bl	scopy
 8344              	.LVL940:
1104:src/display.c **** 		}
 8345              		.loc 1 1104 4 view .LVU2689
 8346 0456 6BE6     		b	.L726
 8347              	.LVL941:
 8348              	.L847:
1031:src/display.c **** 	  *p = '\015';
 8349              		.loc 1 1031 4 view .LVU2690
1031:src/display.c **** 	  *p = '\015';
 8350              		.loc 1 1031 9 is_stmt 0 view .LVU2691
 8351 0458 2022     		movs	r2, #32
1032:src/display.c **** 	  goto skip;
 8352              		.loc 1 1032 7 view .LVU2692
 8353 045a 0D23     		movs	r3, #13
1031:src/display.c **** 	  *p = '\015';
 8354              		.loc 1 1031 9 view .LVU2693
 8355 045c 0270     		strb	r2, [r0]
1032:src/display.c **** 	  goto skip;
 8356              		.loc 1 1032 4 is_stmt 1 view .LVU2694
1032:src/display.c **** 	  goto skip;
 8357              		.loc 1 1032 7 is_stmt 0 view .LVU2695
 8358 045e 4370     		strb	r3, [r0, #1]
ARM GAS  /tmp/ccdQiHBS.s 			page 254


1033:src/display.c **** 	}
 8359              		.loc 1 1033 4 is_stmt 1 view .LVU2696
 8360 0460 66E6     		b	.L726
 8361              	.LVL942:
 8362              	.L844:
 8363              	.LBB485:
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8364              		.loc 1 1163 78 is_stmt 0 discriminator 2 view .LVU2697
 8365 0462 FFF7FEFF 		bl	stack_size
 8366              	.LVL943:
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8367              		.loc 1 1163 65 discriminator 2 view .LVU2698
 8368 0466 D9F80010 		ldr	r1, [r9]
 8369 046a 6330     		adds	r0, r0, #99
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8370              		.loc 1 1163 49 discriminator 2 view .LVU2699
 8371 046c 8842     		cmp	r0, r1
 8372 046e FFF610AE 		blt	.L758
1164:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8373              		.loc 1 1164 14 view .LVU2700
 8374 0472 FFF7FEFF 		bl	get_cmdline
 8375              	.LVL944:
1164:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8376              		.loc 1 1164 10 view .LVU2701
 8377 0476 0028     		cmp	r0, #0
 8378 0478 2FD0     		beq	.L760
1164:src/display.c **** 				     && !(yreg_enabled && !State2.state_lift) // unless stack lift is disabled...
 8379              		.loc 1 1164 28 discriminator 1 view .LVU2702
 8380 047a A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 8381 047c 6BBB     		cbnz	r3, .L760
1165:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
 8382              		.loc 1 1165 10 view .LVU2703
 8383 047e 17B1     		cbz	r7, .L761
1165:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
 8384              		.loc 1 1165 31 discriminator 1 view .LVU2704
 8385 0480 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
1165:src/display.c **** 				     ) ? ShowRegister : ShowRegister+1);
 8386              		.loc 1 1165 13 discriminator 1 view .LVU2705
 8387 0482 5906     		lsls	r1, r3, #25
 8388 0484 29D5     		bpl	.L760
 8389              	.L761:
1163:src/display.c **** 				     && (get_cmdline() && !State2.catalogue)
 8390              		.loc 1 1163 7 discriminator 5 view .LVU2706
 8391 0486 D9F80010 		ldr	r1, [r9]
 8392 048a 03E6     		b	.L762
 8393              	.L843:
1160:src/display.c **** 		  }
 8394              		.loc 1 1160 7 is_stmt 1 view .LVU2707
 8395 048c 02AF     		add	r7, sp, #8
 8396 048e 3846     		mov	r0, r7
 8397 0490 6F21     		movs	r1, #111
 8398 0492 FFF7FEFF 		bl	getRegister
 8399              	.LVL945:
 8400 0496 01E6     		b	.L757
 8401              	.LVL946:
 8402              	.L848:
1160:src/display.c **** 		  }
ARM GAS  /tmp/ccdQiHBS.s 			page 255


 8403              		.loc 1 1160 7 is_stmt 0 view .LVU2708
 8404              	.LBE485:
1036:src/display.c **** 	  if (State2.wascomplex) {
 8405              		.loc 1 1036 28 discriminator 1 view .LVU2709
 8406 0498 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
1036:src/display.c **** 	  if (State2.wascomplex) {
 8407              		.loc 1 1036 24 discriminator 1 view .LVU2710
 8408 049a 13F0C00F 		tst	r3, #192
 8409 049e 1AD1     		bne	.L783
1036:src/display.c **** 	  if (State2.wascomplex) {
 8410              		.loc 1 1036 60 discriminator 2 view .LVU2711
 8411 04a0 144B     		ldr	r3, .L854
 8412 04a2 1B68     		ldr	r3, [r3]
1036:src/display.c **** 	  if (State2.wascomplex) {
 8413              		.loc 1 1036 46 discriminator 2 view .LVU2712
 8414 04a4 002B     		cmp	r3, #0
 8415 04a6 3FF472AE 		beq	.L741
1037:src/display.c **** 	    q = (has_FONT_ESCAPE ? "\007\207i" : "i\006");
 8416              		.loc 1 1037 4 is_stmt 1 view .LVU2713
1040:src/display.c **** 	    if (RectPolConv == 1) {
 8417              		.loc 1 1040 9 view .LVU2714
1041:src/display.c **** 	      q = "\007\306<";
 8418              		.loc 1 1041 6 view .LVU2715
1045:src/display.c **** 	    }
 8419              		.loc 1 1045 10 is_stmt 0 view .LVU2716
 8420 04aa 1949     		ldr	r1, .L854+28
 8421 04ac 194A     		ldr	r2, .L854+32
 8422 04ae 012B     		cmp	r3, #1
 8423 04b0 18BF     		it	ne
 8424 04b2 1146     		movne	r1, r2
 8425              	.L742:
 8426              	.LVL947:
1048:src/display.c **** 
 8427              		.loc 1 1048 4 is_stmt 1 view .LVU2717
1048:src/display.c **** 
 8428              		.loc 1 1048 8 is_stmt 0 view .LVU2718
 8429 04b4 2846     		mov	r0, r5
 8430              	.LVL948:
1048:src/display.c **** 
 8431              		.loc 1 1048 8 view .LVU2719
 8432 04b6 FFF7FEFF 		bl	scopy
 8433              	.LVL949:
1048:src/display.c **** 
 8434              		.loc 1 1048 8 view .LVU2720
 8435 04ba 0646     		mov	r6, r0
 8436              	.LVL950:
1050:src/display.c **** 	}
 8437              		.loc 1 1050 4 is_stmt 1 view .LVU2721
 8438 04bc D8E5     		b	.L743
 8439              	.LVL951:
 8440              	.L752:
1110:src/display.c **** 		}
 8441              		.loc 1 1110 4 view .LVU2722
1110:src/display.c **** 		}
 8442              		.loc 1 1110 28 is_stmt 0 view .LVU2723
 8443 04be 1648     		ldr	r0, .L854+36
 8444 04c0 1649     		ldr	r1, .L854+40
ARM GAS  /tmp/ccdQiHBS.s 			page 256


 8445 04c2 13F0200F 		tst	r3, #32
 8446 04c6 08BF     		it	eq
 8447 04c8 0146     		moveq	r1, r0
 8448 04ca 2846     		mov	r0, r5
 8449 04cc C5E5     		b	.L746
 8450              	.LVL952:
 8451              	.L785:
1059:src/display.c **** #endif
 8452              		.loc 1 1059 19 view .LVU2724
 8453 04ce 1449     		ldr	r1, .L854+44
 8454 04d0 6BE6     		b	.L744
 8455              	.LVL953:
 8456              	.L837:
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8457              		.loc 1 991 4 is_stmt 1 view .LVU2725
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8458              		.loc 1 991 11 is_stmt 0 view .LVU2726
 8459 04d2 0193     		str	r3, [sp, #4]
 991:src/display.c **** 	    *p++ = State2.window == n ? '|' : '\'';
 8460              		.loc 1 991 27 is_stmt 1 view .LVU2727
 8461 04d4 B7E6     		b	.L780
 8462              	.LVL954:
 8463              	.L783:
1038:src/display.c **** 	  }
 8464              		.loc 1 1038 8 is_stmt 0 view .LVU2728
 8465 04d6 1049     		ldr	r1, .L854+36
 8466 04d8 ECE7     		b	.L742
 8467              	.LVL955:
 8468              	.L760:
1038:src/display.c **** 	  }
 8469              		.loc 1 1038 8 view .LVU2729
 8470 04da D9F80010 		ldr	r1, [r9]
 8471 04de D8E5     		b	.L758
 8472              	.LVL956:
 8473              	.L792:
1121:src/display.c **** 	  }
 8474              		.loc 1 1121 8 view .LVU2730
 8475 04e0 1049     		ldr	r1, .L854+48
 913:src/display.c ****       int n;
 8476              		.loc 1 913 22 view .LVU2731
 8477 04e2 2846     		mov	r0, r5
 8478 04e4 B9E5     		b	.L746
 8479              	.L793:
1125:src/display.c **** 	  }
 8480              		.loc 1 1125 8 view .LVU2732
 8481 04e6 1049     		ldr	r1, .L854+52
 913:src/display.c ****       int n;
 8482              		.loc 1 913 22 view .LVU2733
 8483 04e8 2846     		mov	r0, r5
 8484 04ea B6E5     		b	.L746
 8485              	.LVL957:
 8486              	.L795:
 8487              	.LBB486:
 8488              	.LBB475:
1213:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8489              		.loc 1 1213 25 view .LVU2734
 8490 04ec 4FF03E08 		mov	r8, #62
ARM GAS  /tmp/ccdQiHBS.s 			page 257


 8491              	.LVL958:
1213:src/display.c **** 	      case 'L':	ltgteq = '<'; break;
 8492              		.loc 1 1213 25 view .LVU2735
 8493 04f0 50E7     		b	.L771
 8494              	.L855:
 8495 04f2 00BF     		.align	2
 8496              	.L854:
 8497 04f4 00000000 		.word	RectPolConv
 8498 04f8 70000000 		.word	.LC23
 8499 04fc 50000000 		.word	.LC16
 8500 0500 34000000 		.word	.LC11
 8501 0504 3C000000 		.word	.LC12
 8502 0508 24000000 		.word	.LC9
 8503 050c 2C000000 		.word	.LC10
 8504 0510 04000000 		.word	.LC3
 8505 0514 0C000000 		.word	.LC5
 8506 0518 08000000 		.word	.LC4
 8507 051c 58000000 		.word	.LC18
 8508 0520 14000000 		.word	.LC7
 8509 0524 48000000 		.word	.LC14
 8510 0528 4C000000 		.word	.LC15
 8511              	.LBE475:
 8512              	.LBE486:
 8513              		.cfi_endproc
 8514              	.LFE16:
 8516              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 8517              		.align	2
 8518              	.LC24:
 8519 0000 0D00     		.ascii	"\015\000"
 8520 0002 0000     		.align	2
 8521              	.LC25:
 8522 0004 060600   		.ascii	"\006\006\000"
 8523 0007 00       		.align	2
 8524              	.LC27:
 8525 0008 7041554C 		.ascii	"pAULI, WwALtE\000"
 8525      492C2057 
 8525      77414C74 
 8525      4500
 8526 0016 0000     		.align	2
 8527              	.LC28:
 8528 0018 48595000 		.ascii	"HYP\000"
 8529              		.align	2
 8530              	.LC29:
 8531 001c 7F060600 		.ascii	"\177\006\006\000"
 8532              		.align	2
 8533              	.LC32:
 8534 0020 3020746F 		.ascii	"0 to 255\000"
 8534      20323535 
 8534      00
 8535 0029 000000   		.align	2
 8536              	.LC33:
 8537 002c 46726565 		.ascii	"Free:\000"
 8537      3A00
 8538 0032 0000     		.align	2
 8539              	.LC34:
 8540 0034 202C2046 		.ascii	" , FL. \000"
 8540      4C2E2000 
ARM GAS  /tmp/ccdQiHBS.s 			page 258


 8541              		.align	2
 8542              	.LC35:
 8543 003c 52656773 		.ascii	"Regs:\000"
 8543      3A00
 8544 0042 0000     		.align	2
 8545              	.LC36:
 8546 0044 20910606 		.ascii	" \221\006\006+\000"
 8546      2B00
 8547 004a 0000     		.align	2
 8548              	.LC37:
 8549 004c 202C204C 		.ascii	" , Loc. \000"
 8549      6F632E20 
 8549      00
 8550 0055 000000   		.align	2
 8551              	.LC38:
 8552 0058 464C2000 		.ascii	"FL \000"
 8553              		.align	2
 8554              	.LC39:
 8555 005c 58595A54 		.ascii	"XYZT\006A:D\006LIJK\000"
 8555      06413A44 
 8555      064C494A 
 8555      4B00
 8556 006a 0000     		.align	2
 8557              	.LC40:
 8558 006c 464C2E30 		.ascii	"FL.00-.15\000"
 8558      302D2E31 
 8558      3500
 8559 0076 0000     		.align	2
 8560              	.LC41:
 8561 0078 43414C4C 		.ascii	"CALLS\000"
 8561      5300
 8562 007e 0000     		.align	2
 8563              	.LC42:
 8564 0080 52656720 		.ascii	"Reg \000"
 8564      00
 8565 0085 000000   		.align	2
 8566              	.LC43:
 8567 0088 00       		.ascii	"\000"
 8568 0089 000000   		.align	2
 8569              	.LC44:
 8570 008c 202D2D2D 		.ascii	" ---\000"
 8570      00
 8571 0091 000000   		.align	2
 8572              	.LC31:
 8573 0094 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 8573      093E0A00 
 8574              		.align	2
 8575              	.LC30:
 8576 009c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 8576      41424344 
 8576      4C494A4B 
 8576      00
 8577              		.section	.text.display,"ax",%progbits
 8578              		.align	1
 8579              		.p2align 2,,3
 8580              		.global	display
 8581              		.syntax unified
ARM GAS  /tmp/ccdQiHBS.s 			page 259


 8582              		.thumb
 8583              		.thumb_func
 8584              		.fpu fpv4-sp-d16
 8586              	display:
 8587              	.LFB34:
2970:src/display.c **** 	int i, j;
 8588              		.loc 1 2970 26 is_stmt 1 view -0
 8589              		.cfi_startproc
 8590              		@ args = 0, pretend = 0, frame = 152
 8591              		@ frame_needed = 0, uses_anonymous_args = 0
2971:src/display.c **** 	char buf[40], *bp = buf;
 8592              		.loc 1 2971 2 view .LVU2737
2972:src/display.c **** 	const char *p;
 8593              		.loc 1 2972 2 view .LVU2738
2970:src/display.c **** 	int i, j;
 8594              		.loc 1 2970 26 is_stmt 0 view .LVU2739
 8595 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8596              		.cfi_def_cfa_offset 36
 8597              		.cfi_offset 4, -36
 8598              		.cfi_offset 5, -32
 8599              		.cfi_offset 6, -28
 8600              		.cfi_offset 7, -24
 8601              		.cfi_offset 8, -20
 8602              		.cfi_offset 9, -16
 8603              		.cfi_offset 10, -12
 8604              		.cfi_offset 11, -8
 8605              		.cfi_offset 14, -4
2975:src/display.c **** 	int skip = 0;
 8606              		.loc 1 2975 24 view .LVU2740
 8607 0004 B54C     		ldr	r4, .L1163
2970:src/display.c **** 	int i, j;
 8608              		.loc 1 2970 26 view .LVU2741
 8609 0006 A7B0     		sub	sp, sp, #156
 8610              		.cfi_def_cfa_offset 192
 8611              	.LVL959:
2973:src/display.c **** 	int annuc = 0;
 8612              		.loc 1 2973 2 is_stmt 1 view .LVU2742
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8613              		.loc 1 2974 2 view .LVU2743
2975:src/display.c **** 	int skip = 0;
 8614              		.loc 1 2975 2 view .LVU2744
2975:src/display.c **** 	int skip = 0;
 8615              		.loc 1 2975 24 is_stmt 0 view .LVU2745
 8616 0008 94F80E90 		ldrb	r9, [r4, #14]	@ zero_extendqisi2
 8617              	.LVL960:
2976:src/display.c **** 	int x_disp = 0;
 8618              		.loc 1 2976 2 is_stmt 1 view .LVU2746
2977:src/display.c **** 	const int shift = cur_shift();
 8619              		.loc 1 2977 2 view .LVU2747
2978:src/display.c **** 
 8620              		.loc 1 2978 2 view .LVU2748
2978:src/display.c **** 
 8621              		.loc 1 2978 20 is_stmt 0 view .LVU2749
 8622 000c FFF7FEFF 		bl	cur_shift
 8623              	.LVL961:
2982:src/display.c **** 	  State2.disp_freeze = 0;
 8624              		.loc 1 2982 6 view .LVU2750
ARM GAS  /tmp/ccdQiHBS.s 			page 260


 8625 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 8626              	.LVL962:
2982:src/display.c **** 	  State2.disp_freeze = 0;
 8627              		.loc 1 2982 2 is_stmt 1 view .LVU2751
2982:src/display.c **** 	  State2.disp_freeze = 0;
 8628              		.loc 1 2982 5 is_stmt 0 view .LVU2752
 8629 0012 13F01006 		ands	r6, r3, #16
 8630 0016 40F09580 		bne	.L1121
2992:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8631              		.loc 1 2992 2 is_stmt 1 view .LVU2753
2992:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8632              		.loc 1 2992 6 is_stmt 0 view .LVU2754
 8633 001a B14F     		ldr	r7, .L1163+4
 8634 001c 3D68     		ldr	r5, [r7]
2992:src/display.c **** 	  wait_for_display(); // Normally called from reset_disp()
 8635              		.loc 1 2992 5 view .LVU2755
 8636 001e 002D     		cmp	r5, #0
 8637 0020 50D1     		bne	.L1122
3003:src/display.c **** 
 8638              		.loc 1 3003 2 is_stmt 1 view .LVU2756
 8639 0022 8246     		mov	r10, r0
 8640 0024 FFF7FEFF 		bl	reset_disp
 8641              	.LVL963:
3005:src/display.c **** 	if (State2.cmplx  && !cata) {
 8642              		.loc 1 3005 2 view .LVU2757
 8643 0028 1CA8     		add	r0, sp, #112
 8644              	.LVL964:
3005:src/display.c **** 	if (State2.cmplx  && !cata) {
 8645              		.loc 1 3005 2 is_stmt 0 view .LVU2758
 8646 002a 2822     		movs	r2, #40
 8647 002c 2946     		mov	r1, r5
 8648 002e FFF7FEFF 		bl	xset
 8649              	.LVL965:
3006:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8650              		.loc 1 3006 2 is_stmt 1 view .LVU2759
3006:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8651              		.loc 1 3006 6 is_stmt 0 view .LVU2760
 8652 0032 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
3006:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8653              		.loc 1 3006 5 view .LVU2761
 8654 0034 9E07     		lsls	r6, r3, #30
 8655 0036 03D5     		bpl	.L997
3006:src/display.c **** 	  *bp++ = COMPLEX_PREFIX;
 8656              		.loc 1 3006 20 discriminator 1 view .LVU2762
 8657 0038 B9F1000F 		cmp	r9, #0
 8658 003c 00F00381 		beq	.L1123
 8659              	.L997:
2972:src/display.c **** 	const char *p;
 8660              		.loc 1 2972 17 view .LVU2763
 8661 0040 0DF17008 		add	r8, sp, #112
 8662              	.LVL966:
 8663              	.L862:
3010:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8664              		.loc 1 3010 2 is_stmt 1 view .LVU2764
3010:src/display.c **** 	  char vers[VERS_SVN_OFFSET + 5] = VERS_DISPLAY;
 8665              		.loc 1 3010 5 is_stmt 0 view .LVU2765
 8666 0044 D806     		lsls	r0, r3, #27
ARM GAS  /tmp/ccdQiHBS.s 			page 261


 8667 0046 00F16581 		bmi	.L1124
3018:src/display.c **** 	  set_status(S_SURE);
 8668              		.loc 1 3018 9 is_stmt 1 view .LVU2766
3018:src/display.c **** 	  set_status(S_SURE);
 8669              		.loc 1 3018 13 is_stmt 0 view .LVU2767
 8670 004a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
3018:src/display.c **** 	  set_status(S_SURE);
 8671              		.loc 1 3018 12 view .LVU2768
 8672 004c 5107     		lsls	r1, r2, #29
 8673 004e 40F00B81 		bne	.L1125
3020:src/display.c **** 	  bp = scopy(bp, "HYP");
 8674              		.loc 1 3020 9 is_stmt 1 view .LVU2769
3020:src/display.c **** 	  bp = scopy(bp, "HYP");
 8675              		.loc 1 3020 12 is_stmt 0 view .LVU2770
 8676 0052 9A06     		lsls	r2, r3, #26
 8677 0054 00F1D080 		bmi	.L1126
3025:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8678              		.loc 1 3025 9 is_stmt 1 view .LVU2771
3025:src/display.c **** 	  // const int n = 3 + (nLIB(state_pc()) & 1); // Number of digits to display/expect
 8679              		.loc 1 3025 12 is_stmt 0 view .LVU2772
 8680 0058 D907     		lsls	r1, r3, #31
 8681 005a 00F1C881 		bmi	.L1127
3033:src/display.c **** 	  /* Commands with arguments */
 8682              		.loc 1 3033 9 is_stmt 1 view .LVU2773
3033:src/display.c **** 	  /* Commands with arguments */
 8683              		.loc 1 3033 13 is_stmt 0 view .LVU2774
 8684 005e A17D     		ldrb	r1, [r4, #22]	@ zero_extendqisi2
3033:src/display.c **** 	  /* Commands with arguments */
 8685              		.loc 1 3033 12 view .LVU2775
 8686 0060 8A06     		lsls	r2, r1, #26
 8687 0062 40F19E81 		bpl	.L872
3036:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8688              		.loc 1 3036 4 is_stmt 1 view .LVU2776
3036:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8689              		.loc 1 3036 8 is_stmt 0 view .LVU2777
 8690 0066 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
3036:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8691              		.loc 1 3036 7 view .LVU2778
 8692 0068 4D2A     		cmp	r2, #77
 8693 006a 00F01782 		beq	.L873
3036:src/display.c **** 	    bp = scopy(bp, "\177\006\006");
 8694              		.loc 1 3036 28 discriminator 1 view .LVU2779
 8695 006e 02F16C03 		add	r3, r2, #108
 8696 0072 DBB2     		uxtb	r3, r3
 8697 0074 012B     		cmp	r3, #1
 8698 0076 40F21182 		bls	.L873
 8699              	.L874:
3039:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8700              		.loc 1 3039 4 is_stmt 1 view .LVU2780
3039:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8701              		.loc 1 3039 35 is_stmt 0 view .LVU2781
 8702 007a 9A49     		ldr	r1, .L1163+8
 8703 007c 0623     		movs	r3, #6
 8704 007e 03EB0213 		add	r3, r3, r2, lsl #4
3039:src/display.c **** 	  bp = scopy(bp, State2.ind?"\015" : "\006\006");
 8705              		.loc 1 3039 9 view .LVU2782
 8706 0082 1944     		add	r1, r1, r3
ARM GAS  /tmp/ccdQiHBS.s 			page 262


 8707 0084 4046     		mov	r0, r8
 8708 0086 FFF7FEFF 		bl	scopy
 8709              	.LVL967:
3040:src/display.c **** 	  if (State2.dot) {
 8710              		.loc 1 3040 4 is_stmt 1 view .LVU2783
3040:src/display.c **** 	  if (State2.dot) {
 8711              		.loc 1 3040 9 is_stmt 0 view .LVU2784
 8712 008a 974B     		ldr	r3, .L1163+12
 8713 008c 94F91510 		ldrsb	r1, [r4, #21]
 8714 0090 964A     		ldr	r2, .L1163+16
 8715 0092 12EA2101 		ands	r1, r2, r1, asr #32
 8716 0096 38BF     		it	cc
 8717 0098 1946     		movcc	r1, r3
 8718 009a FFF7FEFF 		bl	scopy
 8719              	.LVL968:
3041:src/display.c **** 	    *bp++ = 's';
 8720              		.loc 1 3041 8 view .LVU2785
 8721 009e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 8722              	.LVL969:
3041:src/display.c **** 	    *bp++ = 's';
 8723              		.loc 1 3041 4 is_stmt 1 view .LVU2786
3041:src/display.c **** 	    *bp++ = 's';
 8724              		.loc 1 3041 7 is_stmt 0 view .LVU2787
 8725 00a0 5B06     		lsls	r3, r3, #25
 8726 00a2 40F12782 		bpl	.L876
3042:src/display.c **** 	    *bp++ = '_';
 8727              		.loc 1 3042 6 is_stmt 1 view .LVU2788
 8728              	.LVL970:
3042:src/display.c **** 	    *bp++ = '_';
 8729              		.loc 1 3042 12 is_stmt 0 view .LVU2789
 8730 00a6 7322     		movs	r2, #115
 8731              	.LVL971:
 8732              	.L1113:
3046:src/display.c **** 	  } else {
 8733              		.loc 1 3046 12 view .LVU2790
 8734 00a8 5F23     		movs	r3, #95
 8735 00aa 914E     		ldr	r6, .L1163+20
 8736 00ac DFF85C82 		ldr	r8, .L1163+48
3045:src/display.c **** 	    *bp++ = '_';
 8737              		.loc 1 3045 12 view .LVU2791
 8738 00b0 0270     		strb	r2, [r0]
3046:src/display.c **** 	  } else {
 8739              		.loc 1 3046 6 is_stmt 1 view .LVU2792
3046:src/display.c **** 	  } else {
 8740              		.loc 1 3046 12 is_stmt 0 view .LVU2793
 8741 00b2 4370     		strb	r3, [r0, #1]
 8742              	.L869:
3024:src/display.c **** 	} else if (State2.gtodot) {
 8743              		.loc 1 3024 4 is_stmt 1 view .LVU2794
 8744 00b4 1CA8     		add	r0, sp, #112
 8745 00b6 FFF7FEFF 		bl	set_status
 8746              	.LVL972:
3207:src/display.c ****       nostk:	show_flags();
 8747              		.loc 1 3207 2 view .LVU2795
 8748 00ba FFF7FEFF 		bl	show_stack
 8749              	.LVL973:
3208:src/display.c **** 	if (!skip) {
ARM GAS  /tmp/ccdQiHBS.s 			page 263


 8750              		.loc 1 3208 14 view .LVU2796
 8751 00be FFF7FEFF 		bl	show_flags
 8752              	.LVL974:
3209:src/display.c **** 	  if (State2.runmode) {
 8753              		.loc 1 3209 2 view .LVU2797
 8754 00c2 DBE0     		b	.L866
 8755              	.LVL975:
 8756              	.L1122:
2993:src/display.c **** 
 8757              		.loc 1 2993 4 view .LVU2798
 8758 00c4 FFF7FEFF 		bl	wait_for_display
 8759              	.LVL976:
2996:src/display.c **** 	    clr_dot(i);
 8760              		.loc 1 2996 4 view .LVU2799
2996:src/display.c **** 	    clr_dot(i);
 8761              		.loc 1 2996 16 view .LVU2800
 8762              	.L860:
2997:src/display.c **** 	  }
 8763              		.loc 1 2997 6 discriminator 3 view .LVU2801
 8764 00c8 3046     		mov	r0, r6
2996:src/display.c **** 	    clr_dot(i);
 8765              		.loc 1 2996 31 is_stmt 0 discriminator 3 view .LVU2802
 8766 00ca 0136     		adds	r6, r6, #1
 8767              	.LVL977:
2997:src/display.c **** 	  }
 8768              		.loc 1 2997 6 discriminator 3 view .LVU2803
 8769 00cc FFF7FEFF 		bl	clr_dot
 8770              	.LVL978:
2996:src/display.c **** 	    clr_dot(i);
 8771              		.loc 1 2996 31 is_stmt 1 discriminator 3 view .LVU2804
2996:src/display.c **** 	    clr_dot(i);
 8772              		.loc 1 2996 16 discriminator 3 view .LVU2805
2996:src/display.c **** 	    clr_dot(i);
 8773              		.loc 1 2996 4 is_stmt 0 discriminator 3 view .LVU2806
 8774 00d0 832E     		cmp	r6, #131
 8775 00d2 F9D1     		bne	.L860
 8776 00d4 864E     		ldr	r6, .L1163+20
 8777              	.LVL979:
2996:src/display.c **** 	    clr_dot(i);
 8778              		.loc 1 2996 4 discriminator 3 view .LVU2807
 8779 00d6 DFF83482 		ldr	r8, .L1163+48
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 8780              		.loc 1 2974 6 view .LVU2808
 8781 00da 0025     		movs	r5, #0
 8782              	.LVL980:
 8783              	.L861:
3212:src/display.c **** 	    if (p == NULL || cata) {
 8784              		.loc 1 3212 6 is_stmt 1 view .LVU2809
3212:src/display.c **** 	    if (p == NULL || cata) {
 8785              		.loc 1 3212 10 is_stmt 0 view .LVU2810
 8786 00dc FFF7FEFF 		bl	get_cmdline
 8787              	.LVL981:
3213:src/display.c **** 	      if (ShowRegister != -1) {
 8788              		.loc 1 3213 6 is_stmt 1 view .LVU2811
3213:src/display.c **** 	      if (ShowRegister != -1) {
 8789              		.loc 1 3213 9 is_stmt 0 view .LVU2812
 8790 00e0 8246     		mov	r10, r0
ARM GAS  /tmp/ccdQiHBS.s 			page 264


 8791 00e2 10B1     		cbz	r0, .L944
3213:src/display.c **** 	      if (ShowRegister != -1) {
 8792              		.loc 1 3213 20 discriminator 1 view .LVU2813
 8793 00e4 B9F1000F 		cmp	r9, #0
 8794 00e8 37D0     		beq	.L945
 8795              	.L944:
3214:src/display.c **** #ifdef INCLUDE_C_LOCK
 8796              		.loc 1 3214 8 is_stmt 1 view .LVU2814
3214:src/display.c **** #ifdef INCLUDE_C_LOCK
 8797              		.loc 1 3214 25 is_stmt 0 view .LVU2815
 8798 00ea DFF82492 		ldr	r9, .L1163+52
 8799              	.LVL982:
3214:src/display.c **** #ifdef INCLUDE_C_LOCK
 8800              		.loc 1 3214 25 view .LVU2816
 8801 00ee D9F80000 		ldr	r0, [r9]
 8802              	.LVL983:
3214:src/display.c **** #ifdef INCLUDE_C_LOCK
 8803              		.loc 1 3214 11 view .LVU2817
 8804 00f2 411C     		adds	r1, r0, #1
 8805 00f4 00F03381 		beq	.L946
3216:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8806              		.loc 1 3216 3 is_stmt 1 view .LVU2818
3216:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8807              		.loc 1 3216 8 is_stmt 0 view .LVU2819
 8808 00f8 7E49     		ldr	r1, .L1163+24
 8809 00fa 0A68     		ldr	r2, [r1]
3216:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8810              		.loc 1 3216 34 view .LVU2820
 8811 00fc 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
3216:src/display.c **** 		  if ( POLAR_FORM_NOT_READY ) {
 8812              		.loc 1 3216 6 view .LVU2821
 8813 0100 03F0C703 		and	r3, r3, #199
 8814 0104 C12B     		cmp	r3, #193
 8815 0106 00F08580 		beq	.L1128
3232:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8816              		.loc 1 3232 5 is_stmt 1 view .LVU2822
3232:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 8817              		.loc 1 3232 41 is_stmt 0 view .LVU2823
 8818 010a 6428     		cmp	r0, #100
 8819 010c 00F03D81 		beq	.L1129
 8820              	.L953:
3233:src/display.c **** 		}
 8821              		.loc 1 3233 5 is_stmt 1 view .LVU2824
 8822 0110 0021     		movs	r1, #0
 8823 0112 FFF7FEFF 		bl	format_reg
 8824              	.LVL984:
3247:src/display.c **** 	      goto finish;
 8825              		.loc 1 3247 6 view .LVU2825
3247:src/display.c **** 	      goto finish;
 8826              		.loc 1 3247 9 is_stmt 0 view .LVU2826
 8827 0116 3B68     		ldr	r3, [r7]
 8828 0118 002B     		cmp	r3, #0
 8829 011a 00F0DB80 		beq	.L1118
 8830              	.LVL985:
 8831              	.L951:
3302:src/display.c **** 	State2.disp_as_alpha = 0;
 8832              		.loc 1 3302 2 is_stmt 1 view .LVU2827
ARM GAS  /tmp/ccdQiHBS.s 			page 265


3303:src/display.c **** 	State2.smode = SDISP_NORMAL;
 8833              		.loc 1 3303 2 view .LVU2828
3304:src/display.c **** 	State2.invalid_disp = 0;
 8834              		.loc 1 3304 2 view .LVU2829
3302:src/display.c **** 	State2.disp_as_alpha = 0;
 8835              		.loc 1 3302 17 is_stmt 0 view .LVU2830
 8836 011e 6369     		ldr	r3, [r4, #20]
 8837 0120 23F02173 		bic	r3, r3, #42205184
 8838 0124 23F48053 		bic	r3, r3, #4096
3304:src/display.c **** 	State2.invalid_disp = 0;
 8839              		.loc 1 3304 15 view .LVU2831
 8840 0128 0022     		movs	r2, #0
3302:src/display.c **** 	State2.disp_as_alpha = 0;
 8841              		.loc 1 3302 17 view .LVU2832
 8842 012a 6361     		str	r3, [r4, #20]
3306:src/display.c **** 	DispMsg = CNULL;
 8843              		.loc 1 3306 15 view .LVU2833
 8844 012c 6423     		movs	r3, #100
3304:src/display.c **** 	State2.invalid_disp = 0;
 8845              		.loc 1 3304 15 view .LVU2834
 8846 012e 6274     		strb	r2, [r4, #17]
3305:src/display.c **** 	ShowRegister = regX_idx;
 8847              		.loc 1 3305 2 is_stmt 1 view .LVU2835
3306:src/display.c **** 	DispMsg = CNULL;
 8848              		.loc 1 3306 2 view .LVU2836
3307:src/display.c **** 	DispPlot = 0;
 8849              		.loc 1 3307 10 is_stmt 0 view .LVU2837
 8850 0130 3260     		str	r2, [r6]
3308:src/display.c **** 	State2.disp_small = 0;
 8851              		.loc 1 3308 11 view .LVU2838
 8852 0132 A8F80020 		strh	r2, [r8]	@ movhi
3306:src/display.c **** 	DispMsg = CNULL;
 8853              		.loc 1 3306 15 view .LVU2839
 8854 0136 C9F80030 		str	r3, [r9]
3307:src/display.c **** 	DispPlot = 0;
 8855              		.loc 1 3307 2 is_stmt 1 view .LVU2840
3308:src/display.c **** 	State2.disp_small = 0;
 8856              		.loc 1 3308 2 view .LVU2841
3309:src/display.c **** 	finish_display();
 8857              		.loc 1 3309 2 view .LVU2842
3310:src/display.c **** #ifdef CONSOLE
 8858              		.loc 1 3310 2 view .LVU2843
 8859 013a FFF7FEFF 		bl	finish_display
 8860              	.LVL986:
3314:src/display.c **** #endif
 8861              		.loc 1 3314 7 is_stmt 0 view .LVU2844
 8862 013e 27B0     		add	sp, sp, #156
 8863              		.cfi_remember_state
 8864              		.cfi_def_cfa_offset 36
 8865              		@ sp needed
 8866 0140 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8867              	.LVL987:
 8868              	.L1121:
 8869              		.cfi_restore_state
2983:src/display.c **** 	  State2.disp_temp = 1;
 8870              		.loc 1 2983 4 is_stmt 1 view .LVU2845
2984:src/display.c **** #ifdef CONSOLE
ARM GAS  /tmp/ccdQiHBS.s 			page 266


 8871              		.loc 1 2984 4 view .LVU2846
2988:src/display.c **** 	  return;
 8872              		.loc 1 2988 12 is_stmt 0 view .LVU2847
 8873 0144 6C4A     		ldr	r2, .L1163+28
2983:src/display.c **** 	  State2.disp_temp = 1;
 8874              		.loc 1 2983 23 view .LVU2848
 8875 0146 23F03003 		bic	r3, r3, #48
 8876 014a 43F02003 		orr	r3, r3, #32
2988:src/display.c **** 	  return;
 8877              		.loc 1 2988 12 view .LVU2849
 8878 014e 0021     		movs	r1, #0
2983:src/display.c **** 	  State2.disp_temp = 1;
 8879              		.loc 1 2983 23 view .LVU2850
 8880 0150 E375     		strb	r3, [r4, #23]
2988:src/display.c **** 	  return;
 8881              		.loc 1 2988 4 is_stmt 1 view .LVU2851
2988:src/display.c **** 	  return;
 8882              		.loc 1 2988 12 is_stmt 0 view .LVU2852
 8883 0152 1160     		str	r1, [r2]
2989:src/display.c **** 	}
 8884              		.loc 1 2989 4 is_stmt 1 view .LVU2853
3314:src/display.c **** #endif
 8885              		.loc 1 3314 7 is_stmt 0 view .LVU2854
 8886 0154 27B0     		add	sp, sp, #156
 8887              		.cfi_remember_state
 8888              		.cfi_def_cfa_offset 36
 8889              		@ sp needed
 8890 0156 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8891              	.LVL988:
 8892              	.L945:
 8893              		.cfi_restore_state
3244:src/display.c **** 	      x_disp = 1;
 8894              		.loc 1 3244 8 is_stmt 1 view .LVU2855
 8895              	.LBB532:
 8896              	.LBI532:
1247:src/display.c ****       int i;
 8897              		.loc 1 1247 17 view .LVU2856
 8898              	.LBB533:
1248:src/display.c ****       int gotdot = -1;
 8899              		.loc 1 1248 7 view .LVU2857
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 8900              		.loc 1 1249 7 view .LVU2858
1251:src/display.c **** #endif
 8901              		.loc 1 1251 7 view .LVU2859
1255:src/display.c **** #endif
 8902              		.loc 1 1255 7 view .LVU2860
1258:src/display.c **** 	SET_MANT_SIGN;
 8903              		.loc 1 1258 7 view .LVU2861
1258:src/display.c **** 	SET_MANT_SIGN;
 8904              		.loc 1 1258 10 is_stmt 0 view .LVU2862
 8905 015a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 8906 015c 2D2B     		cmp	r3, #45
 8907 015e 00F0F981 		beq	.L1130
 8908              	.LVL989:
 8909              	.L956:
1263:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8910              		.loc 1 1263 7 is_stmt 1 view .LVU2863
ARM GAS  /tmp/ccdQiHBS.s 			page 267


1263:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8911              		.loc 1 1263 11 is_stmt 0 view .LVU2864
 8912 0162 644B     		ldr	r3, .L1163+24
 8913 0164 1B68     		ldr	r3, [r3]
 8914 0166 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1263:src/display.c **** 	for (i=0; *p != '\0'; p++) {
 8915              		.loc 1 1263 10 view .LVU2865
 8916 016a 13F0010B 		ands	fp, r3, #1
 8917 016e 00F09C81 		beq	.L957
 8918              	.LVL990:
1264:src/display.c **** 	  set_dig(i, *p);
 8919              		.loc 1 1264 12 is_stmt 1 view .LVU2866
 8920 0172 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1264:src/display.c **** 	  set_dig(i, *p);
 8921              		.loc 1 1264 8 is_stmt 0 view .LVU2867
 8922 0176 4FF00009 		mov	r9, #0
 8923              	.LVL991:
1264:src/display.c **** 	  set_dig(i, *p);
 8924              		.loc 1 1264 2 view .LVU2868
 8925 017a 41B1     		cbz	r1, .L959
 8926              	.LVL992:
 8927              	.L958:
1265:src/display.c **** 	  i += SEGS_PER_DIGIT;
 8928              		.loc 1 1265 4 is_stmt 1 view .LVU2869
 8929 017c 4846     		mov	r0, r9
 8930 017e FFF7FEFF 		bl	set_dig
 8931              	.LVL993:
1266:src/display.c **** 	}
 8932              		.loc 1 1266 4 view .LVU2870
1264:src/display.c **** 	  set_dig(i, *p);
 8933              		.loc 1 1264 12 is_stmt 0 view .LVU2871
 8934 0182 1AF8011F 		ldrb	r1, [r10, #1]!	@ zero_extendqisi2
 8935              	.LVL994:
1266:src/display.c **** 	}
 8936              		.loc 1 1266 6 view .LVU2872
 8937 0186 09F10909 		add	r9, r9, #9
 8938              	.LVL995:
1264:src/display.c **** 	  set_dig(i, *p);
 8939              		.loc 1 1264 24 is_stmt 1 view .LVU2873
1264:src/display.c **** 	  set_dig(i, *p);
 8940              		.loc 1 1264 12 view .LVU2874
1264:src/display.c **** 	  set_dig(i, *p);
 8941              		.loc 1 1264 2 is_stmt 0 view .LVU2875
 8942 018a 0029     		cmp	r1, #0
 8943 018c F6D1     		bne	.L958
 8944              	.LVL996:
 8945              	.L959:
1268:src/display.c ****       } else {
 8946              		.loc 1 1268 2 is_stmt 1 view .LVU2876
 8947 018e FFF7FEFF 		bl	carry_overflow
 8948              	.LVL997:
1268:src/display.c ****       } else {
 8949              		.loc 1 1268 2 is_stmt 0 view .LVU2877
 8950              	.LBE533:
 8951              	.LBE532:
3247:src/display.c **** 	      goto finish;
 8952              		.loc 1 3247 6 is_stmt 1 view .LVU2878
ARM GAS  /tmp/ccdQiHBS.s 			page 268


3247:src/display.c **** 	      goto finish;
 8953              		.loc 1 3247 9 is_stmt 0 view .LVU2879
 8954 0192 3B68     		ldr	r3, [r7]
 8955 0194 DFF87891 		ldr	r9, .L1163+52
 8956 0198 002B     		cmp	r3, #0
 8957 019a C0D1     		bne	.L951
 8958              	.LVL998:
 8959              	.L950:
3279:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 8960              		.loc 1 3279 2 is_stmt 1 view .LVU2880
 8961 019c FFF7FEFF 		bl	set_annunciators
 8962              	.LVL999:
3280:src/display.c **** 	  ShowRPN = 0;
 8963              		.loc 1 3280 2 view .LVU2881
3280:src/display.c **** 	  ShowRPN = 0;
 8964              		.loc 1 3280 50 is_stmt 0 view .LVU2882
 8965 01a0 3368     		ldr	r3, [r6]
 8966 01a2 002B     		cmp	r3, #0
 8967 01a4 00F0E380 		beq	.L1131
 8968              	.LVL1000:
 8969              	.L864:
3281:src/display.c **** 	  dot(RPN, 0);
 8970              		.loc 1 3281 4 is_stmt 1 view .LVU2883
3281:src/display.c **** 	  dot(RPN, 0);
 8971              		.loc 1 3281 12 is_stmt 0 view .LVU2884
 8972 01a8 534F     		ldr	r7, .L1163+28
 8973 01aa 0023     		movs	r3, #0
 8974              	.LBB560:
 8975              	.LBB561:
 278:src/display.c **** }
 8976              		.loc 1 278 8 view .LVU2885
 8977 01ac 8D20     		movs	r0, #141
 8978              	.LBE561:
 8979              	.LBE560:
3281:src/display.c **** 	  dot(RPN, 0);
 8980              		.loc 1 3281 12 view .LVU2886
 8981 01ae 3B60     		str	r3, [r7]
3282:src/display.c **** 	}
 8982              		.loc 1 3282 4 is_stmt 1 view .LVU2887
 8983              	.LVL1001:
 8984              	.LBB563:
 8985              	.LBI560:
 276:src/display.c ****   if (on)	set_dot(n);
 8986              		.loc 1 276 6 view .LVU2888
 8987              	.LBB562:
 277:src/display.c ****   else	clr_dot(n);
 8988              		.loc 1 277 3 view .LVU2889
 278:src/display.c **** }
 8989              		.loc 1 278 8 view .LVU2890
 8990 01b0 FFF7FEFF 		bl	clr_dot
 8991              	.LVL1002:
 8992              	.L988:
 278:src/display.c **** }
 8993              		.loc 1 278 8 is_stmt 0 view .LVU2891
 8994              	.LBE562:
 8995              	.LBE563:
3285:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
ARM GAS  /tmp/ccdQiHBS.s 			page 269


 8996              		.loc 1 3285 2 is_stmt 1 view .LVU2892
3286:src/display.c **** 
 8997              		.loc 1 3286 4 is_stmt 0 view .LVU2893
 8998 01b4 3B68     		ldr	r3, [r7]
 8999 01b6 002B     		cmp	r3, #0
 9000 01b8 54D1     		bne	.L1008
3285:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9001              		.loc 1 3285 31 view .LVU2894
 9002 01ba A27D     		ldrb	r2, [r4, #22]	@ zero_extendqisi2
 9003 01bc 12F04003 		ands	r3, r2, #64
 9004 01c0 08D0     		beq	.L989
3286:src/display.c **** 
 9005              		.loc 1 3286 8 view .LVU2895
 9006 01c2 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3286:src/display.c **** 
 9007              		.loc 1 3286 4 view .LVU2896
 9008 01c4 1B07     		lsls	r3, r3, #28
 9009 01c6 40F1C880 		bpl	.L1010
3286:src/display.c **** 
 9010              		.loc 1 3286 30 discriminator 3 view .LVU2897
 9011 01ca 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 9012 01cc 012B     		cmp	r3, #1
 9013 01ce 01D0     		beq	.L989
3286:src/display.c **** 
 9014              		.loc 1 3286 60 discriminator 5 view .LVU2898
 9015 01d0 C2F38003 		ubfx	r3, r2, #2, #1
 9016              	.L989:
3285:src/display.c **** 	  && (! State2.registerlist || State2.smode == SDISP_SHOW || State2.disp_as_alpha);
 9017              		.loc 1 3285 19 discriminator 9 view .LVU2899
 9018 01d4 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 9019 01d6 63F34512 		bfi	r2, r3, #5, #1
 9020 01da E275     		strb	r2, [r4, #23]
3289:src/display.c **** 	  annunciators();
 9021              		.loc 1 3289 2 is_stmt 1 discriminator 9 view .LVU2900
3289:src/display.c **** 	  annunciators();
 9022              		.loc 1 3289 5 is_stmt 0 discriminator 9 view .LVU2901
 9023 01dc 002D     		cmp	r5, #0
 9024 01de 3CD0     		beq	.L990
3289:src/display.c **** 	  annunciators();
 9025              		.loc 1 3289 36 discriminator 1 view .LVU2902
 9026 01e0 D3B2     		uxtb	r3, r2
3289:src/display.c **** 	  annunciators();
 9027              		.loc 1 3289 13 discriminator 1 view .LVU2903
 9028 01e2 03F02103 		and	r3, r3, #33
 9029 01e6 202B     		cmp	r3, #32
 9030 01e8 37D0     		beq	.L990
 9031              	.L991:
3290:src/display.c ****  	State2.hms = 0;
 9032              		.loc 1 3290 4 is_stmt 1 view .LVU2904
 9033 01ea FFF7FEFF 		bl	annunciators
 9034              	.LVL1003:
 9035              	.L992:
3291:src/display.c **** #else
 9036              		.loc 1 3291 3 view .LVU2905
3291:src/display.c **** #else
 9037              		.loc 1 3291 14 is_stmt 0 view .LVU2906
 9038 01ee E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccdQiHBS.s 			page 270


 9039 01f0 6FF30003 		bfc	r3, #0, #1
 9040 01f4 E375     		strb	r3, [r4, #23]
 9041 01f6 92E7     		b	.L951
 9042              	.LVL1004:
 9043              	.L1126:
3021:src/display.c **** 	  if (! State2.dot)
 9044              		.loc 1 3021 4 is_stmt 1 view .LVU2907
3021:src/display.c **** 	  if (! State2.dot)
 9045              		.loc 1 3021 9 is_stmt 0 view .LVU2908
 9046 01f8 4049     		ldr	r1, .L1163+32
 9047 01fa 4046     		mov	r0, r8
 9048 01fc FFF7FEFF 		bl	scopy
 9049              	.LVL1005:
3022:src/display.c **** 	    *bp++ = '\235';
 9050              		.loc 1 3022 8 view .LVU2909
 9051 0200 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 9052              	.LVL1006:
3022:src/display.c **** 	    *bp++ = '\235';
 9053              		.loc 1 3022 4 is_stmt 1 view .LVU2910
3022:src/display.c **** 	    *bp++ = '\235';
 9054              		.loc 1 3022 7 is_stmt 0 view .LVU2911
 9055 0202 5E06     		lsls	r6, r3, #25
 9056 0204 00F11C81 		bmi	.L1114
3023:src/display.c **** 	  set_status(buf);
 9057              		.loc 1 3023 6 is_stmt 1 view .LVU2912
 9058              	.LVL1007:
3023:src/display.c **** 	  set_status(buf);
 9059              		.loc 1 3023 12 is_stmt 0 view .LVU2913
 9060 0208 9D23     		movs	r3, #157
 9061 020a 394E     		ldr	r6, .L1163+20
 9062 020c DFF8FC80 		ldr	r8, .L1163+48
 9063 0210 0370     		strb	r3, [r0]
 9064 0212 4FE7     		b	.L869
 9065              	.LVL1008:
 9066              	.L1128:
3217:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9067              		.loc 1 3217 5 is_stmt 1 view .LVU2914
3217:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9068              		.loc 1 3217 10 is_stmt 0 view .LVU2915
 9069 0214 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
3217:src/display.c **** 		    op_r2p(OP_NOP); // note: argument not being OP_R2P signals to function that results go to J, 
 9070              		.loc 1 3217 8 view .LVU2916
 9071 0218 DA07     		lsls	r2, r3, #31
 9072 021a 00F18F81 		bmi	.L1132
 9073              	.L948:
3221:src/display.c **** 		    State2.hms = 0;
 9074              		.loc 1 3221 5 is_stmt 1 view .LVU2917
3221:src/display.c **** 		    State2.hms = 0;
 9075              		.loc 1 3221 9 is_stmt 0 view .LVU2918
 9076 021e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3221:src/display.c **** 		    State2.hms = 0;
 9077              		.loc 1 3221 8 view .LVU2919
 9078 0220 13F00101 		ands	r1, r3, #1
 9079 0224 00F01081 		beq	.L949
3222:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9080              		.loc 1 3222 7 is_stmt 1 view .LVU2920
3222:src/display.c **** 		    format_reg(regJ_idx, CNULL);
ARM GAS  /tmp/ccdQiHBS.s 			page 271


 9081              		.loc 1 3222 18 is_stmt 0 view .LVU2921
 9082 0228 6FF30003 		bfc	r3, #0, #1
3223:src/display.c **** 		    State2.hms = 1;
 9083              		.loc 1 3223 7 view .LVU2922
 9084 022c 0021     		movs	r1, #0
 9085 022e 6E20     		movs	r0, #110
3222:src/display.c **** 		    format_reg(regJ_idx, CNULL);
 9086              		.loc 1 3222 18 view .LVU2923
 9087 0230 E375     		strb	r3, [r4, #23]
3223:src/display.c **** 		    State2.hms = 1;
 9088              		.loc 1 3223 7 is_stmt 1 view .LVU2924
 9089 0232 FFF7FEFF 		bl	format_reg
 9090              	.LVL1009:
3224:src/display.c **** 		  }
 9091              		.loc 1 3224 7 view .LVU2925
3224:src/display.c **** 		  }
 9092              		.loc 1 3224 18 is_stmt 0 view .LVU2926
 9093 0236 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3247:src/display.c **** 	      goto finish;
 9094              		.loc 1 3247 9 view .LVU2927
 9095 0238 3A68     		ldr	r2, [r7]
3224:src/display.c **** 		  }
 9096              		.loc 1 3224 18 view .LVU2928
 9097 023a 43F00103 		orr	r3, r3, #1
 9098 023e E375     		strb	r3, [r4, #23]
 9099              	.LVL1010:
3247:src/display.c **** 	      goto finish;
 9100              		.loc 1 3247 6 is_stmt 1 view .LVU2929
3247:src/display.c **** 	      goto finish;
 9101              		.loc 1 3247 9 is_stmt 0 view .LVU2930
 9102 0240 002A     		cmp	r2, #0
 9103 0242 ABD0     		beq	.L950
 9104 0244 6BE7     		b	.L951
 9105              	.LVL1011:
 9106              	.L1123:
3007:src/display.c **** 	  set_status(buf);
 9107              		.loc 1 3007 4 is_stmt 1 view .LVU2931
3007:src/display.c **** 	  set_status(buf);
 9108              		.loc 1 3007 10 is_stmt 0 view .LVU2932
 9109 0246 1423     		movs	r3, #20
3008:src/display.c **** 	}
 9110              		.loc 1 3008 4 view .LVU2933
 9111 0248 1CA8     		add	r0, sp, #112
3007:src/display.c **** 	  set_status(buf);
 9112              		.loc 1 3007 10 view .LVU2934
 9113 024a 8DF87030 		strb	r3, [sp, #112]
3008:src/display.c **** 	}
 9114              		.loc 1 3008 4 is_stmt 1 view .LVU2935
3007:src/display.c **** 	  set_status(buf);
 9115              		.loc 1 3007 7 is_stmt 0 view .LVU2936
 9116 024e 0DF17108 		add	r8, sp, #113
 9117              	.LVL1012:
3008:src/display.c **** 	}
 9118              		.loc 1 3008 4 view .LVU2937
 9119 0252 FFF7FEFF 		bl	set_status
 9120              	.LVL1013:
 9121 0256 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccdQiHBS.s 			page 272


 9122 0258 F4E6     		b	.L862
 9123              	.LVL1014:
 9124              	.L990:
3289:src/display.c **** 	  annunciators();
 9125              		.loc 1 3289 52 discriminator 3 view .LVU2938
 9126 025a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 9127 025c 13F0C00F 		tst	r3, #192
 9128 0260 C5D0     		beq	.L992
 9129 0262 C2E7     		b	.L991
 9130              	.L1008:
 9131 0264 0023     		movs	r3, #0
 9132 0266 B5E7     		b	.L989
 9133              	.LVL1015:
 9134              	.L1125:
3019:src/display.c **** 	} else if (State2.hyp) {
 9135              		.loc 1 3019 4 is_stmt 1 view .LVU2939
 9136 0268 2548     		ldr	r0, .L1163+36
 9137 026a 214E     		ldr	r6, .L1163+20
 9138 026c DFF89C80 		ldr	r8, .L1163+48
 9139              	.LVL1016:
3019:src/display.c **** 	} else if (State2.hyp) {
 9140              		.loc 1 3019 4 is_stmt 0 view .LVU2940
 9141 0270 FFF7FEFF 		bl	set_status
 9142              	.LVL1017:
3207:src/display.c ****       nostk:	show_flags();
 9143              		.loc 1 3207 2 is_stmt 1 view .LVU2941
 9144 0274 FFF7FEFF 		bl	show_stack
 9145              	.LVL1018:
3208:src/display.c **** 	if (!skip) {
 9146              		.loc 1 3208 14 view .LVU2942
 9147 0278 FFF7FEFF 		bl	show_flags
 9148              	.LVL1019:
3209:src/display.c **** 	  if (State2.runmode) {
 9149              		.loc 1 3209 2 view .LVU2943
 9150              	.L866:
3210:src/display.c **** 	  only_update_x:
 9151              		.loc 1 3210 4 view .LVU2944
3210:src/display.c **** 	  only_update_x:
 9152              		.loc 1 3210 8 is_stmt 0 view .LVU2945
 9153 027c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3210:src/display.c **** 	  only_update_x:
 9154              		.loc 1 3210 7 view .LVU2946
 9155 027e 13F0400A 		ands	r10, r3, #64
 9156 0282 7FF42BAF 		bne	.L861
 9157              	.LBB564:
3251:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9158              		.loc 1 3251 6 is_stmt 1 view .LVU2947
3251:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9159              		.loc 1 3251 24 is_stmt 0 view .LVU2948
 9160 0286 1B4B     		ldr	r3, .L1163+24
 9161 0288 1B68     		ldr	r3, [r3]
3251:src/display.c **** 	    unsigned int upc = user_pc(pc);
 9162              		.loc 1 3251 19 view .LVU2949
 9163 028a B3F8E077 		ldrh	r7, [r3, #2016]
 9164              	.LVL1020:
3252:src/display.c **** 	    const int n = nLIB(pc);
 9165              		.loc 1 3252 6 is_stmt 1 view .LVU2950
ARM GAS  /tmp/ccdQiHBS.s 			page 273


3252:src/display.c **** 	    const int n = nLIB(pc);
 9166              		.loc 1 3252 25 is_stmt 0 view .LVU2951
 9167 028e 3846     		mov	r0, r7
 9168 0290 FFF7FEFF 		bl	user_pc
 9169              	.LVL1021:
3254:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9170              		.loc 1 3254 6 view .LVU2952
 9171 0294 2822     		movs	r2, #40
 9172 0296 5146     		mov	r1, r10
3252:src/display.c **** 	    const int n = nLIB(pc);
 9173              		.loc 1 3252 25 view .LVU2953
 9174 0298 8346     		mov	fp, r0
3254:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9175              		.loc 1 3254 6 view .LVU2954
 9176 029a 1CA8     		add	r0, sp, #112
 9177              	.LVL1022:
3253:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9178              		.loc 1 3253 6 is_stmt 1 view .LVU2955
3254:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9179              		.loc 1 3254 6 is_stmt 0 view .LVU2956
 9180 029c FFF7FEFF 		bl	xset
 9181              	.LVL1023:
3255:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9182              		.loc 1 3255 6 view .LVU2957
 9183 02a0 184B     		ldr	r3, .L1163+40
3253:src/display.c **** 	    xset(buf, '\0', sizeof(buf));
 9184              		.loc 1 3253 20 view .LVU2958
 9185 02a2 BF0B     		lsrs	r7, r7, #14
 9186              	.LVL1024:
3254:src/display.c **** 	    set_exp(ProgFree, 1, CNULL);
 9187              		.loc 1 3254 6 is_stmt 1 view .LVU2959
3255:src/display.c **** 	    num_arg_0(scopy_spc(buf, n == 0 ? S7_STEP : libname[n]), 
 9188              		.loc 1 3255 6 view .LVU2960
 9189 02a4 1868     		ldr	r0, [r3]
 9190 02a6 5246     		mov	r2, r10
 9191 02a8 0121     		movs	r1, #1
 9192 02aa FFF7FEFF 		bl	set_exp
 9193              	.LVL1025:
3256:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9194              		.loc 1 3256 6 view .LVU2961
 9195 02ae 002F     		cmp	r7, #0
 9196 02b0 40F0D280 		bne	.L1133
 9197 02b4 1449     		ldr	r1, .L1163+44
 9198              	.L987:
 9199 02b6 DFF85890 		ldr	r9, .L1163+52
 9200              	.LVL1026:
3256:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9201              		.loc 1 3256 6 is_stmt 0 discriminator 4 view .LVU2962
 9202 02ba 1CA8     		add	r0, sp, #112
 9203 02bc FFF7FEFF 		bl	scopy_spc
 9204              	.LVL1027:
3257:src/display.c **** 	    set_digits_string(buf, SEGS_PER_DIGIT);
 9205              		.loc 1 3257 21 discriminator 4 view .LVU2963
 9206 02c0 07F00102 		and	r2, r7, #1
3256:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9207              		.loc 1 3256 6 discriminator 4 view .LVU2964
 9208 02c4 5946     		mov	r1, fp
ARM GAS  /tmp/ccdQiHBS.s 			page 274


 9209 02c6 0332     		adds	r2, r2, #3
 9210 02c8 FFF7FEFF 		bl	num_arg_0
 9211              	.LVL1028:
3258:src/display.c **** #if 0
 9212              		.loc 1 3258 6 is_stmt 1 discriminator 4 view .LVU2965
 9213 02cc 1CA8     		add	r0, sp, #112
 9214 02ce 0921     		movs	r1, #9
 9215 02d0 FFF7FEFF 		bl	set_digits_string
 9216              	.LVL1029:
 9217              	.L1118:
3258:src/display.c **** #if 0
 9218              		.loc 1 3258 6 is_stmt 0 discriminator 4 view .LVU2966
 9219              	.LBE564:
3279:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9220              		.loc 1 3279 2 is_stmt 1 discriminator 4 view .LVU2967
 9221 02d4 FFF7FEFF 		bl	set_annunciators
 9222              	.LVL1030:
3280:src/display.c **** 	  ShowRPN = 0;
 9223              		.loc 1 3280 2 discriminator 4 view .LVU2968
 9224 02d8 66E7     		b	.L864
 9225              	.L1164:
 9226 02da 00BF     		.align	2
 9227              	.L1163:
 9228 02dc 00000000 		.word	StateWhileOn
 9229 02e0 00000000 		.word	WasDataEntry
 9230 02e4 00000000 		.word	argcmds
 9231 02e8 04000000 		.word	.LC25
 9232 02ec 00000000 		.word	.LC24
 9233 02f0 00000000 		.word	DispMsg
 9234 02f4 00000000 		.word	main_ram
 9235 02f8 00000000 		.word	ShowRPN
 9236 02fc 18000000 		.word	.LC28
 9237 0300 00000000 		.word	.LANCHOR18
 9238 0304 00000000 		.word	ProgFree
 9239 0308 00000000 		.word	.LANCHOR16
 9240 030c 00000000 		.word	DispPlot
 9241 0310 00000000 		.word	ShowRegister
 9242              	.LVL1031:
 9243              	.L1124:
 9244              	.LBB565:
3011:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9245              		.loc 1 3011 4 view .LVU2969
3011:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9246              		.loc 1 3011 9 is_stmt 0 view .LVU2970
 9247 0314 BB4B     		ldr	r3, .L1165
 9248 0316 BC4E     		ldr	r6, .L1165+4
 9249 0318 DFF81C83 		ldr	r8, .L1165+52
 9250              	.LVL1032:
3011:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9251              		.loc 1 3011 9 view .LVU2971
 9252 031c DFF81C93 		ldr	r9, .L1165+56
 9253              	.LVL1033:
3011:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9254              		.loc 1 3011 9 view .LVU2972
 9255 0320 93E80700 		ldm	r3, {r0, r1, r2}
 9256 0324 13AB     		add	r3, sp, #76
 9257 0326 03C3     		stmia	r3!, {r0, r1}
ARM GAS  /tmp/ccdQiHBS.s 			page 275


 9258 0328 0021     		movs	r1, #0
3012:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9259              		.loc 1 3012 4 view .LVU2973
 9260 032a B848     		ldr	r0, .L1165+8
3011:src/display.c **** 	  set_digits_string("pAULI, WwALtE", 0);
 9261              		.loc 1 3011 9 view .LVU2974
 9262 032c 1A80     		strh	r2, [r3]	@ movhi
 9263 032e CDF85610 		str	r1, [sp, #86]	@ unaligned
3012:src/display.c **** 	  set_dig_s(SEGS_EXP_BASE, 'r', CNULL);
 9264              		.loc 1 3012 4 is_stmt 1 view .LVU2975
 9265 0332 FFF7FEFF 		bl	set_digits_string
 9266              	.LVL1034:
3013:src/display.c **** 	  xcopy( vers + VERS_SVN_OFFSET, SvnRevision, 4 );
 9267              		.loc 1 3013 4 view .LVU2976
 9268              	.LBB566:
 9269              	.LBI566:
 332:src/display.c ****   if (res) *res++ = ch;
 9270              		.loc 1 332 14 view .LVU2977
 9271              	.LBB567:
 333:src/display.c ****   else	set_dig(base, ch);
 9272              		.loc 1 333 3 view .LVU2978
 334:src/display.c ****   return res;
 9273              		.loc 1 334 8 view .LVU2979
 9274 0336 7221     		movs	r1, #114
 9275 0338 6C20     		movs	r0, #108
 9276 033a FFF7FEFF 		bl	set_dig
 9277              	.LVL1035:
 335:src/display.c **** }
 9278              		.loc 1 335 3 view .LVU2980
 335:src/display.c **** }
 9279              		.loc 1 335 3 is_stmt 0 view .LVU2981
 9280              	.LBE567:
 9281              	.LBE566:
3014:src/display.c **** 	  set_status(vers);
 9282              		.loc 1 3014 4 is_stmt 1 view .LVU2982
 9283 033e B449     		ldr	r1, .L1165+12
 9284 0340 0422     		movs	r2, #4
 9285 0342 0DF15500 		add	r0, sp, #85
 9286 0346 FFF7FEFF 		bl	xcopy
 9287              	.LVL1036:
3015:src/display.c **** 	  skip = 1;
 9288              		.loc 1 3015 4 view .LVU2983
 9289 034a 13A8     		add	r0, sp, #76
 9290 034c FFF7FEFF 		bl	set_status
 9291              	.LVL1037:
3016:src/display.c **** 	  goto nostk;
 9292              		.loc 1 3016 4 view .LVU2984
3017:src/display.c **** 	} else if (State2.confirm) {
 9293              		.loc 1 3017 4 view .LVU2985
3017:src/display.c **** 	} else if (State2.confirm) {
 9294              		.loc 1 3017 4 is_stmt 0 view .LVU2986
 9295              	.LBE565:
3208:src/display.c **** 	if (!skip) {
 9296              		.loc 1 3208 14 is_stmt 1 view .LVU2987
 9297 0350 FFF7FEFF 		bl	show_flags
 9298              	.LVL1038:
3209:src/display.c **** 	  if (State2.runmode) {
ARM GAS  /tmp/ccdQiHBS.s 			page 276


 9299              		.loc 1 3209 2 view .LVU2988
3279:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 9300              		.loc 1 3279 2 view .LVU2989
 9301 0354 FFF7FEFF 		bl	set_annunciators
 9302              	.LVL1039:
3280:src/display.c **** 	  ShowRPN = 0;
 9303              		.loc 1 3280 2 view .LVU2990
 9304 0358 26E7     		b	.L864
 9305              	.LVL1040:
 9306              	.L1010:
3280:src/display.c **** 	  ShowRPN = 0;
 9307              		.loc 1 3280 2 is_stmt 0 view .LVU2991
 9308 035a 0123     		movs	r3, #1
 9309 035c 3AE7     		b	.L989
 9310              	.LVL1041:
 9311              	.L946:
3242:src/display.c **** 	    } else {
 9312              		.loc 1 3242 3 is_stmt 1 view .LVU2992
 9313 035e AD48     		ldr	r0, .L1165+16
 9314 0360 2421     		movs	r1, #36
 9315 0362 FFF7FEFF 		bl	set_digits_string
 9316              	.LVL1042:
3247:src/display.c **** 	      goto finish;
 9317              		.loc 1 3247 6 view .LVU2993
3247:src/display.c **** 	      goto finish;
 9318              		.loc 1 3247 9 is_stmt 0 view .LVU2994
 9319 0366 3B68     		ldr	r3, [r7]
 9320 0368 002B     		cmp	r3, #0
 9321 036a B3D0     		beq	.L1118
 9322 036c D7E6     		b	.L951
 9323              	.LVL1043:
 9324              	.L1131:
3280:src/display.c **** 	  ShowRPN = 0;
 9325              		.loc 1 3280 69 discriminator 3 view .LVU2995
 9326 036e B8F90030 		ldrsh	r3, [r8]
 9327 0372 002B     		cmp	r3, #0
 9328 0374 7FF418AF 		bne	.L864
3280:src/display.c **** 	  ShowRPN = 0;
 9329              		.loc 1 3280 81 discriminator 4 view .LVU2996
 9330 0378 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 9331 037a 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 9332 037c 03F00403 		and	r3, r3, #4
 9333 0380 1343     		orrs	r3, r3, r2
 9334 0382 7FF411AF 		bne	.L864
 9335 0386 A44F     		ldr	r7, .L1165+20
 9336 0388 14E7     		b	.L988
 9337              	.LVL1044:
 9338              	.L1129:
3232:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9339              		.loc 1 3232 44 discriminator 1 view .LVU2997
 9340 038a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3232:src/display.c **** 		  format_reg(ShowRegister, CNULL);
 9341              		.loc 1 3232 41 discriminator 1 view .LVU2998
 9342 038c 13F00101 		ands	r1, r3, #1
 9343 0390 7FF4BEAE 		bne	.L953
 9344              	.LVL1045:
3233:src/display.c **** 		}
ARM GAS  /tmp/ccdQiHBS.s 			page 277


 9345              		.loc 1 3233 5 is_stmt 1 view .LVU2999
 9346 0394 FFF7FEFF 		bl	format_reg
 9347              	.LVL1046:
3247:src/display.c **** 	      goto finish;
 9348              		.loc 1 3247 6 view .LVU3000
3247:src/display.c **** 	      goto finish;
 9349              		.loc 1 3247 9 is_stmt 0 view .LVU3001
 9350 0398 3B68     		ldr	r3, [r7]
 9351 039a 002B     		cmp	r3, #0
 9352 039c 3FF4FEAE 		beq	.L950
 9353 03a0 BDE6     		b	.L951
 9354              	.LVL1047:
 9355              	.L872:
3064:src/display.c **** 	  *bp++ = 'x';
 9356              		.loc 1 3064 9 is_stmt 1 view .LVU3002
3064:src/display.c **** 	  *bp++ = 'x';
 9357              		.loc 1 3064 19 is_stmt 0 view .LVU3003
 9358 03a2 E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
3064:src/display.c **** 	  *bp++ = 'x';
 9359              		.loc 1 3064 12 view .LVU3004
 9360 03a4 072A     		cmp	r2, #7
 9361 03a6 5CD1     		bne	.L1134
3070:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9362              		.loc 1 3070 9 is_stmt 1 view .LVU3005
3070:src/display.c **** 	  const opcode op = current_catalogue(State.catpos);
 9363              		.loc 1 3070 12 is_stmt 0 view .LVU3006
 9364 03a8 B9F1000F 		cmp	r9, #0
 9365 03ac 40F09081 		bne	.L1135
3118:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9366              		.loc 1 3118 9 is_stmt 1 view .LVU3007
3118:src/display.c **** 	  bp = scopy_char(bp, multicmds[CmdBase].cmd, '\'');
 9367              		.loc 1 3118 12 is_stmt 0 view .LVU3008
 9368 03b0 1807     		lsls	r0, r3, #28
 9369 03b2 32D4     		bmi	.L1136
3126:src/display.c **** 	  show_status();
 9370              		.loc 1 3126 9 is_stmt 1 view .LVU3009
3126:src/display.c **** 	  show_status();
 9371              		.loc 1 3126 19 is_stmt 0 view .LVU3010
 9372 03b4 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
3126:src/display.c **** 	  show_status();
 9373              		.loc 1 3126 12 view .LVU3011
 9374 03b6 002B     		cmp	r3, #0
 9375 03b8 40F00182 		bne	.L1137
3129:src/display.c **** 	  show_label();
 9376              		.loc 1 3129 9 is_stmt 1 view .LVU3012
3129:src/display.c **** 	  show_label();
 9377              		.loc 1 3129 13 is_stmt 0 view .LVU3013
 9378 03bc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
3129:src/display.c **** 	  show_label();
 9379              		.loc 1 3129 12 view .LVU3014
 9380 03be 5E07     		lsls	r6, r3, #29
 9381 03c0 00F10F83 		bmi	.L1138
3132:src/display.c **** 	  show_registers();
 9382              		.loc 1 3132 9 is_stmt 1 view .LVU3015
3132:src/display.c **** 	  show_registers();
 9383              		.loc 1 3132 12 is_stmt 0 view .LVU3016
 9384 03c4 1807     		lsls	r0, r3, #28
ARM GAS  /tmp/ccdQiHBS.s 			page 278


 9385 03c6 00F1B682 		bmi	.L1139
3142:src/display.c **** 	  if (DispMsg) { 
 9386              		.loc 1 3142 9 is_stmt 1 view .LVU3017
3142:src/display.c **** 	  if (DispMsg) { 
 9387              		.loc 1 3142 12 is_stmt 0 view .LVU3018
 9388 03ca 4E06     		lsls	r6, r1, #25
 9389 03cc 40F19282 		bpl	.L929
3143:src/display.c **** 	    set_status(DispMsg);
 9390              		.loc 1 3143 4 is_stmt 1 view .LVU3019
3143:src/display.c **** 	    set_status(DispMsg);
 9391              		.loc 1 3143 8 is_stmt 0 view .LVU3020
 9392 03d0 8D4E     		ldr	r6, .L1165+4
 9393 03d2 3368     		ldr	r3, [r6]
3143:src/display.c **** 	    set_status(DispMsg);
 9394              		.loc 1 3143 7 view .LVU3021
 9395 03d4 002B     		cmp	r3, #0
 9396 03d6 00F03983 		beq	.L930
3144:src/display.c **** 	  } else if (DispPlot) {
 9397              		.loc 1 3144 6 is_stmt 1 view .LVU3022
 9398 03da 1846     		mov	r0, r3
 9399 03dc FFF7FEFF 		bl	set_status
 9400              	.LVL1048:
3207:src/display.c ****       nostk:	show_flags();
 9401              		.loc 1 3207 2 view .LVU3023
 9402 03e0 DFF85482 		ldr	r8, .L1165+52
 9403              	.LVL1049:
3207:src/display.c ****       nostk:	show_flags();
 9404              		.loc 1 3207 2 is_stmt 0 view .LVU3024
 9405 03e4 FFF7FEFF 		bl	show_stack
 9406              	.LVL1050:
3208:src/display.c **** 	if (!skip) {
 9407              		.loc 1 3208 14 is_stmt 1 view .LVU3025
 9408 03e8 FFF7FEFF 		bl	show_flags
 9409              	.LVL1051:
3209:src/display.c **** 	  if (State2.runmode) {
 9410              		.loc 1 3209 2 view .LVU3026
 9411 03ec 46E7     		b	.L866
 9412              	.LVL1052:
 9413              	.L1127:
3027:src/display.c **** 	  if (State2.numdigit > 0)
 9414              		.loc 1 3027 4 view .LVU3027
3027:src/display.c **** 	  if (State2.numdigit > 0)
 9415              		.loc 1 3027 9 is_stmt 0 view .LVU3028
 9416 03ee 2E22     		movs	r2, #46
 9417 03f0 8A49     		ldr	r1, .L1165+24
 9418 03f2 4046     		mov	r0, r8
 9419 03f4 FFF7FEFF 		bl	scopy_char
 9420              	.LVL1053:
3028:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9421              		.loc 1 3028 14 view .LVU3029
 9422 03f8 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3027:src/display.c **** 	  if (State2.numdigit > 0)
 9423              		.loc 1 3027 9 view .LVU3030
 9424 03fa 0346     		mov	r3, r0
 9425              	.LVL1054:
3028:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9426              		.loc 1 3028 4 is_stmt 1 view .LVU3031
ARM GAS  /tmp/ccdQiHBS.s 			page 279


3028:src/display.c **** 	    bp = num_arg_0(bp, (unsigned int)State2.digval, (int)State2.numdigit);
 9427              		.loc 1 3028 7 is_stmt 0 view .LVU3032
 9428 03fc 002A     		cmp	r2, #0
 9429 03fe 48D1     		bne	.L1140
 9430              	.L871:
3031:src/display.c **** 	  set_status(buf);
 9431              		.loc 1 3031 4 is_stmt 1 view .LVU3033
 9432              	.LVL1055:
3031:src/display.c **** 	  set_status(buf);
 9433              		.loc 1 3031 10 is_stmt 0 view .LVU3034
 9434 0400 5F22     		movs	r2, #95
 9435 0402 1A70     		strb	r2, [r3]
3032:src/display.c **** 	} else if (State2.rarg) {
 9436              		.loc 1 3032 4 is_stmt 1 view .LVU3035
 9437              	.LVL1056:
 9438              	.L889:
 9439              	.LBB568:
3117:src/display.c **** 	} else if (State2.multi) {
 9440              		.loc 1 3117 4 view .LVU3036
 9441 0404 1CA8     		add	r0, sp, #112
 9442 0406 FFF7FEFF 		bl	set_status
 9443              	.LVL1057:
3117:src/display.c **** 	} else if (State2.multi) {
 9444              		.loc 1 3117 4 is_stmt 0 view .LVU3037
 9445              	.LBE568:
3207:src/display.c ****       nostk:	show_flags();
 9446              		.loc 1 3207 2 is_stmt 1 view .LVU3038
 9447 040a 7F4E     		ldr	r6, .L1165+4
 9448 040c DFF82882 		ldr	r8, .L1165+52
 9449 0410 FFF7FEFF 		bl	show_stack
 9450              	.LVL1058:
3208:src/display.c **** 	if (!skip) {
 9451              		.loc 1 3208 14 view .LVU3039
 9452 0414 FFF7FEFF 		bl	show_flags
 9453              	.LVL1059:
3209:src/display.c **** 	  if (State2.runmode) {
 9454              		.loc 1 3209 2 view .LVU3040
 9455 0418 30E7     		b	.L866
 9456              	.LVL1060:
 9457              	.L1136:
3119:src/display.c **** 	  if (State2.numdigit > 0) {
 9458              		.loc 1 3119 4 view .LVU3041
3119:src/display.c **** 	  if (State2.numdigit > 0) {
 9459              		.loc 1 3119 42 is_stmt 0 view .LVU3042
 9460 041a E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9461 041c 8049     		ldr	r1, .L1165+28
 9462 041e 0423     		movs	r3, #4
 9463 0420 03EB0213 		add	r3, r3, r2, lsl #4
3119:src/display.c **** 	  if (State2.numdigit > 0) {
 9464              		.loc 1 3119 9 view .LVU3043
 9465 0424 1944     		add	r1, r1, r3
 9466 0426 4046     		mov	r0, r8
 9467 0428 2722     		movs	r2, #39
 9468 042a FFF7FEFF 		bl	scopy_char
 9469              	.LVL1061:
3120:src/display.c **** 	    *bp++ = (char) State2.digval;
 9470              		.loc 1 3120 7 view .LVU3044
ARM GAS  /tmp/ccdQiHBS.s 			page 280


 9471 042e E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9472              	.LVL1062:
3120:src/display.c **** 	    *bp++ = (char) State2.digval;
 9473              		.loc 1 3120 4 is_stmt 1 view .LVU3045
3120:src/display.c **** 	    *bp++ = (char) State2.digval;
 9474              		.loc 1 3120 7 is_stmt 0 view .LVU3046
 9475 0430 33B1     		cbz	r3, .L1114
3121:src/display.c **** 	    if (State2.numdigit > 1)
 9476              		.loc 1 3121 6 is_stmt 1 view .LVU3047
 9477              	.LVL1063:
3121:src/display.c **** 	    if (State2.numdigit > 1)
 9478              		.loc 1 3121 14 is_stmt 0 view .LVU3048
 9479 0432 2389     		ldrh	r3, [r4, #8]
 9480 0434 0370     		strb	r3, [r0]
3122:src/display.c **** 	      *bp++ = State2.digval2;
 9481              		.loc 1 3122 6 is_stmt 1 view .LVU3049
3122:src/display.c **** 	      *bp++ = State2.digval2;
 9482              		.loc 1 3122 9 is_stmt 0 view .LVU3050
 9483 0436 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9484 0438 012B     		cmp	r3, #1
3123:src/display.c **** 	  }
 9485              		.loc 1 3123 8 is_stmt 1 view .LVU3051
 9486              	.LVL1064:
3123:src/display.c **** 	  }
 9487              		.loc 1 3123 22 is_stmt 0 view .LVU3052
 9488 043a 84BF     		itt	hi
 9489 043c A37A     		ldrbhi	r3, [r4, #10]	@ zero_extendqisi2
3123:src/display.c **** 	  }
 9490              		.loc 1 3123 14 view .LVU3053
 9491 043e 4370     		strbhi	r3, [r0, #1]
 9492              	.LVL1065:
 9493              	.L1114:
3123:src/display.c **** 	  }
 9494              		.loc 1 3123 14 view .LVU3054
 9495 0440 714E     		ldr	r6, .L1165+4
 9496 0442 DFF8F481 		ldr	r8, .L1165+52
 9497 0446 35E6     		b	.L869
 9498              	.LVL1066:
 9499              	.L949:
3227:src/display.c **** 		  }
 9500              		.loc 1 3227 7 is_stmt 1 view .LVU3055
 9501 0448 6E20     		movs	r0, #110
 9502 044a FFF7FEFF 		bl	format_reg
 9503              	.LVL1067:
3247:src/display.c **** 	      goto finish;
 9504              		.loc 1 3247 6 view .LVU3056
3247:src/display.c **** 	      goto finish;
 9505              		.loc 1 3247 9 is_stmt 0 view .LVU3057
 9506 044e 3B68     		ldr	r3, [r7]
 9507 0450 002B     		cmp	r3, #0
 9508 0452 3FF4A3AE 		beq	.L950
 9509 0456 62E6     		b	.L951
 9510              	.LVL1068:
 9511              	.L1133:
 9512              	.LBB577:
3256:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9513              		.loc 1 3256 6 discriminator 1 view .LVU3058
ARM GAS  /tmp/ccdQiHBS.s 			page 281


 9514 0458 7249     		ldr	r1, .L1165+32
 9515 045a 07EB8703 		add	r3, r7, r7, lsl #2
 9516 045e 1944     		add	r1, r1, r3
 9517 0460 29E7     		b	.L987
 9518              	.LVL1069:
 9519              	.L1134:
3256:src/display.c **** 		      upc, 3 + (n & 1));  // 4 digits in ROM and Library
 9520              		.loc 1 3256 6 discriminator 1 view .LVU3059
 9521              	.LBE577:
3065:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9522              		.loc 1 3065 4 is_stmt 1 view .LVU3060
3066:src/display.c **** 	  *bp++ = '_';
 9523              		.loc 1 3066 33 is_stmt 0 view .LVU3061
 9524 0462 714B     		ldr	r3, .L1165+36
 9525 0464 684E     		ldr	r6, .L1165+4
3066:src/display.c **** 	  *bp++ = '_';
 9526              		.loc 1 3066 10 view .LVU3062
 9527 0466 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 9528 0468 88F80130 		strb	r3, [r8, #1]
3065:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9529              		.loc 1 3065 10 view .LVU3063
 9530 046c 7823     		movs	r3, #120
3067:src/display.c **** 	  *bp++ = '?';
 9531              		.loc 1 3067 10 view .LVU3064
 9532 046e 5F22     		movs	r2, #95
3065:src/display.c **** 	  *bp++ = "=\013\035<\011>\012"[State2.test];
 9533              		.loc 1 3065 10 view .LVU3065
 9534 0470 88F80030 		strb	r3, [r8]
3066:src/display.c **** 	  *bp++ = '_';
 9535              		.loc 1 3066 4 is_stmt 1 view .LVU3066
 9536              	.LVL1070:
3067:src/display.c **** 	  *bp++ = '?';
 9537              		.loc 1 3067 4 view .LVU3067
3068:src/display.c **** 	  set_status(buf);
 9538              		.loc 1 3068 10 is_stmt 0 view .LVU3068
 9539 0474 3F23     		movs	r3, #63
3067:src/display.c **** 	  *bp++ = '?';
 9540              		.loc 1 3067 10 view .LVU3069
 9541 0476 88F80220 		strb	r2, [r8, #2]
3068:src/display.c **** 	  set_status(buf);
 9542              		.loc 1 3068 4 is_stmt 1 view .LVU3070
 9543              	.LVL1071:
3068:src/display.c **** 	  set_status(buf);
 9544              		.loc 1 3068 10 is_stmt 0 view .LVU3071
 9545 047a 88F80330 		strb	r3, [r8, #3]
3069:src/display.c **** 	} else if (cata) {
 9546              		.loc 1 3069 4 is_stmt 1 view .LVU3072
 9547 047e 1CA8     		add	r0, sp, #112
 9548 0480 FFF7FEFF 		bl	set_status
 9549              	.LVL1072:
3207:src/display.c ****       nostk:	show_flags();
 9550              		.loc 1 3207 2 view .LVU3073
 9551 0484 DFF8B081 		ldr	r8, .L1165+52
 9552              	.LVL1073:
3207:src/display.c ****       nostk:	show_flags();
 9553              		.loc 1 3207 2 is_stmt 0 view .LVU3074
 9554 0488 FFF7FEFF 		bl	show_stack
ARM GAS  /tmp/ccdQiHBS.s 			page 282


 9555              	.LVL1074:
3208:src/display.c **** 	if (!skip) {
 9556              		.loc 1 3208 14 is_stmt 1 view .LVU3075
 9557 048c FFF7FEFF 		bl	show_flags
 9558              	.LVL1075:
3209:src/display.c **** 	  if (State2.runmode) {
 9559              		.loc 1 3209 2 view .LVU3076
 9560 0490 F4E6     		b	.L866
 9561              	.LVL1076:
 9562              	.L1140:
3029:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9563              		.loc 1 3029 6 view .LVU3077
3029:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9564              		.loc 1 3029 11 is_stmt 0 view .LVU3078
 9565 0492 2189     		ldrh	r1, [r4, #8]
 9566 0494 FFF7FEFF 		bl	num_arg_0
 9567              	.LVL1077:
3029:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9568              		.loc 1 3029 11 view .LVU3079
 9569 0498 0346     		mov	r3, r0
 9570              	.LVL1078:
3029:src/display.c **** 	  // for (i=State2.numdigit; i<n; i++)
 9571              		.loc 1 3029 11 view .LVU3080
 9572 049a B1E7     		b	.L871
 9573              	.LVL1079:
 9574              	.L873:
3037:src/display.c **** #endif
 9575              		.loc 1 3037 6 is_stmt 1 view .LVU3081
3037:src/display.c **** #endif
 9576              		.loc 1 3037 11 is_stmt 0 view .LVU3082
 9577 049c 4046     		mov	r0, r8
 9578 049e 6349     		ldr	r1, .L1165+40
 9579 04a0 FFF7FEFF 		bl	scopy
 9580              	.LVL1080:
 9581 04a4 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 9582 04a6 8046     		mov	r8, r0
 9583              	.LVL1081:
3037:src/display.c **** #endif
 9584              		.loc 1 3037 11 view .LVU3083
 9585 04a8 E7E5     		b	.L874
 9586              	.LVL1082:
 9587              	.L957:
 9588              	.LBB578:
 9589              	.LBB554:
1270:src/display.c **** 
 9590              		.loc 1 1270 2 is_stmt 1 view .LVU3084
 9591 04aa FFF7FEFF 		bl	set_separator_decimal_modes
 9592              	.LVL1083:
1272:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9593              		.loc 1 1272 2 view .LVU3085
1274:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9594              		.loc 1 1274 2 view .LVU3086
1274:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9595              		.loc 1 1274 5 is_stmt 0 view .LVU3087
 9596 04ae A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9597              	.LBB534:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
ARM GAS  /tmp/ccdQiHBS.s 			page 283


 9598              		.loc 1 1281 15 view .LVU3088
 9599 04b0 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
 9600              	.LBE534:
1274:src/display.c **** #  if !defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 9601              		.loc 1 1274 5 view .LVU3089
 9602 04b4 012B     		cmp	r3, #1
 9603 04b6 40F20181 		bls	.L960
 9604              	.LVL1084:
 9605              	.LBB535:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9606              		.loc 1 1281 14 is_stmt 1 view .LVU3090
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9607              		.loc 1 1281 4 is_stmt 0 view .LVU3091
 9608 04ba 0029     		cmp	r1, #0
 9609 04bc 00F0C182 		beq	.L1001
1278:src/display.c **** 	  int j;
 9610              		.loc 1 1278 10 view .LVU3092
 9611 04c0 5B46     		mov	r3, fp
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9612              		.loc 1 1281 10 view .LVU3093
 9613 04c2 5A46     		mov	r2, fp
 9614 04c4 D446     		mov	ip, r10
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9615              		.loc 1 1281 4 view .LVU3094
 9616 04c6 0846     		mov	r0, r1
 9617              	.LBE535:
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 9618              		.loc 1 1249 11 view .LVU3095
 9619 04c8 4FF0FF3E 		mov	lr, #-1
 9620 04cc 04E0     		b	.L963
 9621              	.LVL1085:
 9622              	.L962:
 9623              	.LBB536:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9624              		.loc 1 1281 28 is_stmt 1 view .LVU3096
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9625              		.loc 1 1281 15 is_stmt 0 view .LVU3097
 9626 04ce 1CF8010F 		ldrb	r0, [ip, #1]!	@ zero_extendqisi2
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9627              		.loc 1 1281 29 view .LVU3098
 9628 04d2 0132     		adds	r2, r2, #1
 9629              	.LVL1086:
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9630              		.loc 1 1281 14 is_stmt 1 view .LVU3099
1281:src/display.c **** 	    if (p[j] == '.' && gotdot < 0) {
 9631              		.loc 1 1281 4 is_stmt 0 view .LVU3100
 9632 04d4 0028     		cmp	r0, #0
 9633 04d6 43D0     		beq	.L1141
 9634              	.LVL1087:
 9635              	.L963:
1282:src/display.c **** 	      gotdot = j;
 9636              		.loc 1 1282 6 is_stmt 1 view .LVU3101
1282:src/display.c **** 	      gotdot = j;
 9637              		.loc 1 1282 9 is_stmt 0 view .LVU3102
 9638 04d8 2E28     		cmp	r0, #46
 9639 04da F8D1     		bne	.L962
1283:src/display.c **** #  if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/ccdQiHBS.s 			page 284


 9640              		.loc 1 1283 8 is_stmt 1 view .LVU3103
 9641              	.LVL1088:
1285:src/display.c **** #  endif
 9642              		.loc 1 1285 8 view .LVU3104
1282:src/display.c **** 	      gotdot = j;
 9643              		.loc 1 1282 22 is_stmt 0 view .LVU3105
 9644 04dc BEF1FF3F 		cmp	lr, #-1
 9645 04e0 F5D1     		bne	.L962
1285:src/display.c **** #  endif
 9646              		.loc 1 1285 29 view .LVU3106
 9647 04e2 9CF80130 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 9648 04e6 A3F12E03 		sub	r3, #46
 9649 04ea B3FA83F3 		clz	r3, r3
1285:src/display.c **** #  endif
 9650              		.loc 1 1285 19 view .LVU3107
 9651 04ee 9646     		mov	lr, r2
1285:src/display.c **** #  endif
 9652              		.loc 1 1285 29 view .LVU3108
 9653 04f0 5B09     		lsrs	r3, r3, #5
 9654              	.LVL1089:
1285:src/display.c **** #  endif
 9655              		.loc 1 1285 29 view .LVU3109
 9656 04f2 ECE7     		b	.L962
 9657              	.LVL1090:
 9658              	.L876:
1285:src/display.c **** #  endif
 9659              		.loc 1 1285 29 view .LVU3110
 9660              	.LBE536:
 9661              	.LBE554:
 9662              	.LBE578:
3044:src/display.c **** 	    *bp++ = '\021';
 9663              		.loc 1 3044 11 is_stmt 1 view .LVU3111
3044:src/display.c **** 	    *bp++ = '\021';
 9664              		.loc 1 3044 14 is_stmt 0 view .LVU3112
 9665 04f4 BAF1010F 		cmp	r10, #1
 9666 04f8 00F0E880 		beq	.L1142
3051:src/display.c **** 	      *bp++ = '.';
 9667              		.loc 1 3051 6 is_stmt 1 view .LVU3113
3051:src/display.c **** 	      *bp++ = '.';
 9668              		.loc 1 3051 10 is_stmt 0 view .LVU3114
 9669 04fc A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3051:src/display.c **** 	      *bp++ = '.';
 9670              		.loc 1 3051 9 view .LVU3115
 9671 04fe DE07     		lsls	r6, r3, #31
3052:src/display.c **** 	    if (State2.numdigit > 0) {
 9672              		.loc 1 3052 8 is_stmt 1 view .LVU3116
 9673              	.LVL1091:
3052:src/display.c **** 	    if (State2.numdigit > 0) {
 9674              		.loc 1 3052 14 is_stmt 0 view .LVU3117
 9675 0500 44BF     		itt	mi
 9676 0502 2E23     		movmi	r3, #46
 9677 0504 00F8013B 		strbmi	r3, [r0], #1
 9678              	.LVL1092:
3053:src/display.c **** 	      if (State2.shuffle)
 9679              		.loc 1 3053 6 is_stmt 1 view .LVU3118
3053:src/display.c **** 	      if (State2.shuffle)
 9680              		.loc 1 3053 16 is_stmt 0 view .LVU3119
ARM GAS  /tmp/ccdQiHBS.s 			page 285


 9681 0508 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
3053:src/display.c **** 	      if (State2.shuffle)
 9682              		.loc 1 3053 9 view .LVU3120
 9683 050a 8AB1     		cbz	r2, .L879
3054:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9684              		.loc 1 3054 8 is_stmt 1 view .LVU3121
3054:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9685              		.loc 1 3054 12 is_stmt 0 view .LVU3122
 9686 050c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3054:src/display.c **** 		for (i = 0, j = State2.digval; i<State2.numdigit; i++, j >>= 2)
 9687              		.loc 1 3054 11 view .LVU3123
 9688 050e 9907     		lsls	r1, r3, #30
 9689 0510 40F19382 		bpl	.L880
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9690              		.loc 1 3055 3 is_stmt 1 view .LVU3124
 9691              	.LVL1093:
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9692              		.loc 1 3055 17 is_stmt 0 view .LVU3125
 9693 0514 2289     		ldrh	r2, [r4, #8]
 9694              	.LVL1094:
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9695              		.loc 1 3055 34 is_stmt 1 view .LVU3126
 9696 0516 464E     		ldr	r6, .L1165+44
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9697              		.loc 1 3055 10 is_stmt 0 view .LVU3127
 9698 0518 0023     		movs	r3, #0
 9699              	.LVL1095:
 9700              	.L881:
3056:src/display.c **** 	      else
 9701              		.loc 1 3056 5 is_stmt 1 discriminator 3 view .LVU3128
3056:src/display.c **** 	      else
 9702              		.loc 1 3056 24 is_stmt 0 discriminator 3 view .LVU3129
 9703 051a 02F00301 		and	r1, r2, #3
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9704              		.loc 1 3055 54 discriminator 3 view .LVU3130
 9705 051e 0133     		adds	r3, r3, #1
 9706              	.LVL1096:
3056:src/display.c **** 	      else
 9707              		.loc 1 3056 11 discriminator 3 view .LVU3131
 9708 0520 715C     		ldrb	r1, [r6, r1]	@ zero_extendqisi2
 9709 0522 00F8011B 		strb	r1, [r0], #1
 9710              	.LVL1097:
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9711              		.loc 1 3055 53 is_stmt 1 discriminator 3 view .LVU3132
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9712              		.loc 1 3055 42 is_stmt 0 discriminator 3 view .LVU3133
 9713 0526 E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9714              		.loc 1 3055 3 discriminator 3 view .LVU3134
 9715 0528 9942     		cmp	r1, r3
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9716              		.loc 1 3055 60 discriminator 3 view .LVU3135
 9717 052a 4FEAA202 		asr	r2, r2, #2
 9718              	.LVL1098:
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
 9719              		.loc 1 3055 34 is_stmt 1 discriminator 3 view .LVU3136
3055:src/display.c **** 		  *bp++ = REGNAMES[j & 3];
ARM GAS  /tmp/ccdQiHBS.s 			page 286


 9720              		.loc 1 3055 3 is_stmt 0 discriminator 3 view .LVU3137
 9721 052e F4DC     		bgt	.L881
 9722              	.LVL1099:
 9723              	.L879:
3061:src/display.c **** 	  }
 9724              		.loc 1 3061 6 is_stmt 1 view .LVU3138
3061:src/display.c **** 	  }
 9725              		.loc 1 3061 12 is_stmt 0 view .LVU3139
 9726 0530 5F23     		movs	r3, #95
 9727 0532 354E     		ldr	r6, .L1165+4
 9728 0534 DFF80081 		ldr	r8, .L1165+52
 9729 0538 0370     		strb	r3, [r0]
 9730 053a BBE5     		b	.L869
 9731              	.LVL1100:
 9732              	.L1132:
3218:src/display.c **** 		    SET_POLAR_READY;
 9733              		.loc 1 3218 7 is_stmt 1 view .LVU3140
 9734 053c 0020     		movs	r0, #0
 9735 053e FFF7FEFF 		bl	op_r2p
 9736              	.LVL1101:
3219:src/display.c **** 		  }
 9737              		.loc 1 3219 7 view .LVU3141
 9738 0542 3C49     		ldr	r1, .L1165+48
 9739 0544 0B68     		ldr	r3, [r1]
 9740 0546 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 9741 054a 6FF30002 		bfc	r2, #0, #1
 9742 054e 83F8AD27 		strb	r2, [r3, #1965]
 9743 0552 64E6     		b	.L948
 9744              	.LVL1102:
 9745              	.L1130:
 9746              	.LBB579:
 9747              	.LBB555:
1259:src/display.c **** 	p++;
 9748              		.loc 1 1259 2 view .LVU3142
 9749              	.LBB537:
 9750              	.LBI537:
 237:src/display.c **** {
 9751              		.loc 1 237 13 view .LVU3143
 9752              	.LBB538:
 239:src/display.c **** }
 9753              		.loc 1 239 3 view .LVU3144
 9754 0554 8120     		movs	r0, #129
 9755              	.LVL1103:
 239:src/display.c **** }
 9756              		.loc 1 239 3 is_stmt 0 view .LVU3145
 9757 0556 FFF7FEFF 		bl	set_dot
 9758              	.LVL1104:
 9759              	.LBE538:
 9760              	.LBE537:
1260:src/display.c ****       }
 9761              		.loc 1 1260 2 is_stmt 1 view .LVU3146
1260:src/display.c ****       }
 9762              		.loc 1 1260 3 is_stmt 0 view .LVU3147
 9763 055a 0AF1010A 		add	r10, r10, #1
 9764              	.LVL1105:
1260:src/display.c ****       }
 9765              		.loc 1 1260 3 view .LVU3148
ARM GAS  /tmp/ccdQiHBS.s 			page 287


 9766 055e 00E6     		b	.L956
 9767              	.LVL1106:
 9768              	.L1141:
 9769              	.LBB539:
1289:src/display.c **** 	  if (j > 0) {
 9770              		.loc 1 1289 4 is_stmt 1 view .LVU3149
1289:src/display.c **** 	  if (j > 0) {
 9771              		.loc 1 1289 24 is_stmt 0 view .LVU3150
 9772 0560 03F10C0C 		add	ip, r3, #12
1289:src/display.c **** 	  if (j > 0) {
 9773              		.loc 1 1289 6 view .LVU3151
 9774 0564 A2EB0C02 		sub	r2, r2, ip
 9775              	.LVL1107:
1290:src/display.c **** 	    p += j + 1;
 9776              		.loc 1 1290 4 is_stmt 1 view .LVU3152
1290:src/display.c **** 	    p += j + 1;
 9777              		.loc 1 1290 7 is_stmt 0 view .LVU3153
 9778 0568 002A     		cmp	r2, #0
 9779 056a 40F32381 		ble	.L1002
1291:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9780              		.loc 1 1291 6 is_stmt 1 view .LVU3154
1291:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9781              		.loc 1 1291 8 is_stmt 0 view .LVU3155
 9782 056e 511C     		adds	r1, r2, #1
1293:src/display.c **** 	      gotdot = 0;
 9783              		.loc 1 1293 9 view .LVU3156
 9784 0570 7245     		cmp	r2, lr
1291:src/display.c **** 	    i = SEGS_PER_DIGIT;
 9785              		.loc 1 1291 8 view .LVU3157
 9786 0572 8A44     		add	r10, r10, r1
 9787              	.LVL1108:
1292:src/display.c **** 	    if (gotdot <= j) {
 9788              		.loc 1 1292 6 is_stmt 1 view .LVU3158
1293:src/display.c **** 	      gotdot = 0;
 9789              		.loc 1 1293 6 view .LVU3159
1293:src/display.c **** 	      gotdot = 0;
 9790              		.loc 1 1293 9 is_stmt 0 view .LVU3160
 9791 0574 C0F20A81 		blt	.L965
1294:src/display.c **** 	      if (double_dot)
 9792              		.loc 1 1294 8 is_stmt 1 view .LVU3161
 9793              	.LVL1109:
1295:src/display.c **** 		p++;
 9794              		.loc 1 1295 8 view .LVU3162
1295:src/display.c **** 		p++;
 9795              		.loc 1 1295 11 is_stmt 0 view .LVU3163
 9796 0578 002B     		cmp	r3, #0
 9797 057a 00F06482 		beq	.L1003
1296:src/display.c **** 	    }
 9798              		.loc 1 1296 3 is_stmt 1 view .LVU3164
1296:src/display.c **** 	    }
 9799              		.loc 1 1296 4 is_stmt 0 view .LVU3165
 9800 057e 0AF1010A 		add	r10, r10, #1
 9801              	.LVL1110:
1292:src/display.c **** 	    if (gotdot <= j) {
 9802              		.loc 1 1292 8 view .LVU3166
 9803 0582 4FF0090B 		mov	fp, #9
 9804              	.LVL1111:
ARM GAS  /tmp/ccdQiHBS.s 			page 288


 9805              	.L966:
1305:src/display.c **** 	    overflow_to_left = 1;
 9806              		.loc 1 1305 6 is_stmt 1 view .LVU3167
 9807 0586 3C21     		movs	r1, #60
 9808              	.LVL1112:
1305:src/display.c **** 	    overflow_to_left = 1;
 9809              		.loc 1 1305 6 is_stmt 0 view .LVU3168
 9810 0588 0020     		movs	r0, #0
 9811 058a FFF7FEFF 		bl	set_dig
 9812              	.LVL1113:
1306:src/display.c **** 	  }
 9813              		.loc 1 1306 6 is_stmt 1 view .LVU3169
1306:src/display.c **** 	  }
 9814              		.loc 1 1306 6 is_stmt 0 view .LVU3170
 9815 058e 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1306:src/display.c **** 	  }
 9816              		.loc 1 1306 6 view .LVU3171
 9817              	.LBE539:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9818              		.loc 1 1312 9 is_stmt 1 view .LVU3172
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9819              		.loc 1 1312 2 is_stmt 0 view .LVU3173
 9820 0592 4FF00009 		mov	r9, #0
 9821              	.LVL1114:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9822              		.loc 1 1312 2 view .LVU3174
 9823 0596 0029     		cmp	r1, #0
 9824 0598 00F08980 		beq	.L1120
 9825              	.LVL1115:
 9826              	.L995:
 9827              	.LBB540:
1306:src/display.c **** 	  }
 9828              		.loc 1 1306 23 view .LVU3175
 9829 059c 0123     		movs	r3, #1
 9830 059e 0093     		str	r3, [sp]
 9831 05a0 13E0     		b	.L975
 9832              	.LVL1116:
 9833              	.L1143:
1306:src/display.c **** 	  }
 9834              		.loc 1 1306 23 view .LVU3176
 9835              	.LBE540:
1318:src/display.c **** 	      gotdot = i;
 9836              		.loc 1 1318 6 is_stmt 1 view .LVU3177
1318:src/display.c **** 	      gotdot = i;
 9837              		.loc 1 1318 9 is_stmt 0 view .LVU3178
 9838 05a2 B9F1FF3F 		cmp	r9, #-1
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9839              		.loc 1 1322 9 view .LVU3179
 9840 05a6 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
1318:src/display.c **** 	      gotdot = i;
 9841              		.loc 1 1318 9 view .LVU3180
 9842 05aa 1BD0     		beq	.L969
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9843              		.loc 1 1322 6 is_stmt 1 view .LVU3181
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9844              		.loc 1 1322 9 is_stmt 0 view .LVU3182
 9845 05ac 2E2B     		cmp	r3, #46
ARM GAS  /tmp/ccdQiHBS.s 			page 289


 9846 05ae 25D0     		beq	.L994
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9847              		.loc 1 1322 25 view .LVU3183
 9848 05b0 D945     		cmp	r9, fp
 9849 05b2 19D0     		beq	.L972
 9850              	.L971:
1329:src/display.c **** 		i += segs_per_digit;
 9851              		.loc 1 1329 3 is_stmt 1 view .LVU3184
 9852 05b4 5846     		mov	r0, fp
 9853 05b6 2F21     		movs	r1, #47
 9854 05b8 FFF7FEFF 		bl	set_dig
 9855              	.LVL1117:
1330:src/display.c **** 	      }
 9856              		.loc 1 1330 3 view .LVU3185
1330:src/display.c **** 	      }
 9857              		.loc 1 1330 5 is_stmt 0 view .LVU3186
 9858 05bc 0BF1090B 		add	fp, fp, #9
 9859              	.LVL1118:
1330:src/display.c **** 	      }
 9860              		.loc 1 1330 5 view .LVU3187
 9861 05c0 5346     		mov	r3, r10
 9862              	.LVL1119:
 9863              	.L973:
1316:src/display.c **** 	  if (*p == '.') {
 9864              		.loc 1 1316 11 is_stmt 1 view .LVU3188
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9865              		.loc 1 1312 9 is_stmt 0 view .LVU3189
 9866 05c2 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
1316:src/display.c **** 	  if (*p == '.') {
 9867              		.loc 1 1316 12 view .LVU3190
 9868 05c4 0AF1010A 		add	r10, r10, #1
 9869              	.LVL1120:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9870              		.loc 1 1312 9 is_stmt 1 view .LVU3191
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 9871              		.loc 1 1312 2 is_stmt 0 view .LVU3192
 9872 05c8 D1B3     		cbz	r1, .L976
 9873              	.LVL1121:
 9874              	.L975:
1314:src/display.c **** #endif
 9875              		.loc 1 1314 9 view .LVU3193
 9876 05ca A1F14403 		sub	r3, r1, #68
 9877 05ce 012B     		cmp	r3, #1
 9878 05d0 36D9     		bls	.L976
1317:src/display.c **** 	    if (gotdot < 0)
 9879              		.loc 1 1317 4 is_stmt 1 view .LVU3194
1317:src/display.c **** 	    if (gotdot < 0)
 9880              		.loc 1 1317 7 is_stmt 0 view .LVU3195
 9881 05d2 2E29     		cmp	r1, #46
 9882 05d4 E5D0     		beq	.L1143
1351:src/display.c **** 	      i += segs_per_digit;
 9883              		.loc 1 1351 8 is_stmt 1 view .LVU3196
 9884 05d6 5846     		mov	r0, fp
 9885 05d8 FFF7FEFF 		bl	set_dig
 9886              	.LVL1122:
1352:src/display.c **** 	    }
 9887              		.loc 1 1352 8 view .LVU3197
ARM GAS  /tmp/ccdQiHBS.s 			page 290


1352:src/display.c **** 	    }
 9888              		.loc 1 1352 10 is_stmt 0 view .LVU3198
 9889 05dc 0BF1090B 		add	fp, fp, #9
 9890              	.LVL1123:
1352:src/display.c **** 	    }
 9891              		.loc 1 1352 10 view .LVU3199
 9892 05e0 5346     		mov	r3, r10
 9893 05e2 EEE7     		b	.L973
 9894              	.L969:
1319:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY)
 9895              		.loc 1 1319 8 is_stmt 1 view .LVU3200
 9896              	.LVL1124:
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9897              		.loc 1 1322 6 view .LVU3201
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9898              		.loc 1 1322 9 is_stmt 0 view .LVU3202
 9899 05e4 2E2B     		cmp	r3, #46
 9900 05e6 08D0     		beq	.L1144
 9901              	.LVL1125:
 9902              	.L972:
1333:src/display.c **** 		  i += segs_per_digit;
 9903              		.loc 1 1333 3 is_stmt 1 view .LVU3203
1333:src/display.c **** 		  i += segs_per_digit;
 9904              		.loc 1 1333 6 is_stmt 0 view .LVU3204
 9905 05e8 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 9906 05ea 012B     		cmp	r3, #1
 9907 05ec 40F2C580 		bls	.L974
1334:src/display.c **** 		}
 9908              		.loc 1 1334 5 is_stmt 1 view .LVU3205
 9909              	.LVL1126:
1334:src/display.c **** 		}
 9910              		.loc 1 1334 5 is_stmt 0 view .LVU3206
 9911 05f0 D946     		mov	r9, fp
 9912 05f2 5346     		mov	r3, r10
1334:src/display.c **** 		}
 9913              		.loc 1 1334 7 view .LVU3207
 9914 05f4 0BF1090B 		add	fp, fp, #9
 9915              	.LVL1127:
1334:src/display.c **** 		}
 9916              		.loc 1 1334 7 view .LVU3208
 9917 05f8 E3E7     		b	.L973
 9918              	.LVL1128:
 9919              	.L1144:
1322:src/display.c **** 	      if ( *(p+1) == '.' ) {
 9920              		.loc 1 1322 9 view .LVU3209
 9921 05fa D946     		mov	r9, fp
 9922              	.LVL1129:
 9923              	.L994:
1323:src/display.c **** 		p++;
 9924              		.loc 1 1323 8 is_stmt 1 view .LVU3210
1324:src/display.c **** 	      }
 9925              		.loc 1 1324 3 view .LVU3211
1324:src/display.c **** 	      }
 9926              		.loc 1 1324 4 is_stmt 0 view .LVU3212
 9927 05fc 0AF1010A 		add	r10, r10, #1
 9928              	.LVL1130:
1324:src/display.c **** 	      }
ARM GAS  /tmp/ccdQiHBS.s 			page 291


 9929              		.loc 1 1324 4 view .LVU3213
 9930 0600 D8E7     		b	.L971
 9931              	.L1166:
 9932 0602 00BF     		.align	2
 9933              	.L1165:
 9934 0604 0C000000 		.word	.LANCHOR14+12
 9935 0608 00000000 		.word	DispMsg
 9936 060c 08000000 		.word	.LC27
 9937 0610 00000000 		.word	.LANCHOR17
 9938 0614 8C000000 		.word	.LC44
 9939 0618 00000000 		.word	ShowRPN
 9940 061c 56040000 		.word	argcmds+1110
 9941 0620 00000000 		.word	multicmds
 9942 0624 00000000 		.word	.LANCHOR19
 9943 0628 94000000 		.word	.LC31
 9944 062c 1C000000 		.word	.LC29
 9945 0630 9C000000 		.word	.LC30
 9946 0634 00000000 		.word	main_ram
 9947 0638 00000000 		.word	DispPlot
 9948 063c 00000000 		.word	ShowRegister
 9949              	.L976:
1361:src/display.c **** 	    gotdot = i;
 9950              		.loc 1 1361 4 is_stmt 1 view .LVU3214
1361:src/display.c **** 	    gotdot = i;
 9951              		.loc 1 1361 7 is_stmt 0 view .LVU3215
 9952 0640 B9F1FF3F 		cmp	r9, #-1
 9953 0644 08BF     		it	eq
 9954 0646 D946     		moveq	r9, fp
 9955              	.LVL1131:
1363:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 9956              		.loc 1 1363 4 is_stmt 1 view .LVU3216
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9957              		.loc 1 1364 6 view .LVU3217
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 9958              		.loc 1 1364 13 is_stmt 0 view .LVU3218
 9959 0648 A9F11B09 		sub	r9, r9, #27
 9960              	.LVL1132:
1365:src/display.c **** 	      break;
 9961              		.loc 1 1365 6 is_stmt 1 view .LVU3219
1365:src/display.c **** 	      break;
 9962              		.loc 1 1365 9 is_stmt 0 view .LVU3220
 9963 064c B9F1000F 		cmp	r9, #0
 9964 0650 14DD     		ble	.L961
1365:src/display.c **** 	      break;
 9965              		.loc 1 1365 9 view .LVU3221
 9966 0652 4346     		mov	r3, r8
 9967 0654 0195     		str	r5, [sp, #4]
 9968 0656 009D     		ldr	r5, [sp]
 9969              	.LVL1133:
1365:src/display.c **** 	      break;
 9970              		.loc 1 1365 9 view .LVU3222
 9971 0658 B046     		mov	r8, r6
 9972 065a 4E46     		mov	r6, r9
 9973 065c 9946     		mov	r9, r3
 9974              	.LVL1134:
 9975              	.L980:
1368:src/display.c **** 	      break;
ARM GAS  /tmp/ccdQiHBS.s 			page 292


 9976              		.loc 1 1368 6 is_stmt 1 view .LVU3223
1371:src/display.c **** 	  }
 9977              		.loc 1 1371 6 view .LVU3224
 9978              	.LBB541:
 9979              	.LBB542:
 304:src/display.c ****     if (sep == SEP_COMMA) *res++ = ',';
 9980              		.loc 1 304 3 view .LVU3225
 9981 065e 3046     		mov	r0, r6
 9982              	.LBE542:
 9983              	.LBE541:
1368:src/display.c **** 	      break;
 9984              		.loc 1 1368 9 is_stmt 0 view .LVU3226
 9985 0660 0DB1     		cbz	r5, .L981
 9986              	.LVL1135:
1368:src/display.c **** 	      break;
 9987              		.loc 1 1368 27 view .LVU3227
 9988 0662 092E     		cmp	r6, #9
 9989 0664 07D0     		beq	.L1110
 9990              	.L981:
1371:src/display.c **** 	  }
 9991              		.loc 1 1371 6 view .LVU3228
 9992 0666 D04B     		ldr	r3, .L1167
 9993 0668 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9994              	.LVL1136:
 9995              	.LBB544:
 9996              	.LBI541:
 301:src/display.c ****   if (sep == SEP_NONE)
 9997              		.loc 1 301 14 is_stmt 1 view .LVU3229
 9998              	.LBB543:
 302:src/display.c ****     return res;
 9999              		.loc 1 302 3 view .LVU3230
 302:src/display.c ****     return res;
 10000              		.loc 1 302 6 is_stmt 0 view .LVU3231
 10001 066a 09B1     		cbz	r1, .L982
 10002 066c FFF7FEFF 		bl	set_separator.part.0
 10003              	.LVL1137:
 10004              	.L982:
 302:src/display.c ****     return res;
 10005              		.loc 1 302 6 view .LVU3232
 10006              	.LBE543:
 10007              	.LBE544:
1363:src/display.c **** 	    gotdot -= 3 * SEGS_PER_DIGIT;
 10008              		.loc 1 1363 4 is_stmt 1 view .LVU3233
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10009              		.loc 1 1364 6 view .LVU3234
1364:src/display.c **** 	    if (gotdot <= 0)			// MvC: was '<', caused crash
 10010              		.loc 1 1364 13 is_stmt 0 view .LVU3235
 10011 0670 1B3E     		subs	r6, r6, #27
 10012              	.LVL1138:
1365:src/display.c **** 	      break;
 10013              		.loc 1 1365 6 is_stmt 1 view .LVU3236
1365:src/display.c **** 	      break;
 10014              		.loc 1 1365 9 is_stmt 0 view .LVU3237
 10015 0672 002E     		cmp	r6, #0
 10016 0674 F3DC     		bgt	.L980
 10017              	.L1110:
1365:src/display.c **** 	      break;
ARM GAS  /tmp/ccdQiHBS.s 			page 293


 10018              		.loc 1 1365 9 view .LVU3238
 10019 0676 019D     		ldr	r5, [sp, #4]
 10020 0678 4646     		mov	r6, r8
 10021              	.LVL1139:
1365:src/display.c **** 	      break;
 10022              		.loc 1 1365 9 view .LVU3239
 10023 067a C846     		mov	r8, r9
 10024              	.LVL1140:
 10025              	.L961:
1375:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10026              		.loc 1 1375 4 is_stmt 1 view .LVU3240
1375:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10027              		.loc 1 1375 8 is_stmt 0 view .LVU3241
 10028 067c 9AF80020 		ldrb	r2, [r10]	@ zero_extendqisi2
1375:src/display.c **** #  ifdef DONT_PAD_EXPONENT_ENTRY
 10029              		.loc 1 1375 7 view .LVU3242
 10030 0680 A2F14401 		sub	r1, r2, #68
 10031 0684 0129     		cmp	r1, #1
 10032 0686 12D8     		bhi	.L1120
 10033              	.LBB545:
1379:src/display.c **** #  endif
 10034              		.loc 1 1379 6 is_stmt 1 view .LVU3243
 10035              	.LVL1141:
1382:src/display.c **** 	      flags |= 2;
 10036              		.loc 1 1382 6 view .LVU3244
1383:src/display.c **** 	    if (i > 10 * SEGS_PER_DIGIT)
 10037              		.loc 1 1383 14 is_stmt 0 view .LVU3245
 10038 0688 442A     		cmp	r2, #68
 10039 068a 14BF     		ite	ne
 10040 068c 4FF00C09 		movne	r9, #12
 10041 0690 4FF00E09 		moveq	r9, #14
 10042              	.LVL1142:
1384:src/display.c **** 	      flags |= 16;
 10043              		.loc 1 1384 6 is_stmt 1 view .LVU3246
1384:src/display.c **** 	      flags |= 16;
 10044              		.loc 1 1384 9 is_stmt 0 view .LVU3247
 10045 0694 BBF15A0F 		cmp	fp, #90
1385:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10046              		.loc 1 1385 8 is_stmt 1 view .LVU3248
1385:src/display.c **** 	    set_exp(s_to_i(p+1), flags, CNULL);
 10047              		.loc 1 1385 14 is_stmt 0 view .LVU3249
 10048 0698 C8BF     		it	gt
 10049 069a 49F01009 		orrgt	r9, r9, #16
 10050              	.LVL1143:
1386:src/display.c **** 	  }
 10051              		.loc 1 1386 6 is_stmt 1 view .LVU3250
 10052 069e 0AF10100 		add	r0, r10, #1
 10053 06a2 FFF7FEFF 		bl	s_to_i
 10054              	.LVL1144:
 10055 06a6 4946     		mov	r1, r9
 10056 06a8 0022     		movs	r2, #0
 10057 06aa FFF7FEFF 		bl	set_exp
 10058              	.LVL1145:
 10059              	.L1120:
1386:src/display.c **** 	  }
 10060              		.loc 1 1386 6 is_stmt 0 view .LVU3251
 10061              	.LBE545:
ARM GAS  /tmp/ccdQiHBS.s 			page 294


 10062              	.LBE555:
 10063              	.LBE579:
3247:src/display.c **** 	      goto finish;
 10064              		.loc 1 3247 6 is_stmt 1 view .LVU3252
3247:src/display.c **** 	      goto finish;
 10065              		.loc 1 3247 9 is_stmt 0 view .LVU3253
 10066 06ae 3B68     		ldr	r3, [r7]
 10067 06b0 DFF81493 		ldr	r9, .L1167+32
 10068 06b4 002B     		cmp	r3, #0
 10069 06b6 3FF471AD 		beq	.L950
 10070 06ba 30E5     		b	.L951
 10071              	.LVL1146:
 10072              	.L960:
 10073              	.LBB580:
 10074              	.LBB556:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10075              		.loc 1 1312 9 is_stmt 1 view .LVU3254
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10076              		.loc 1 1312 2 is_stmt 0 view .LVU3255
 10077 06bc 0029     		cmp	r1, #0
 10078 06be 00F0C081 		beq	.L1001
1255:src/display.c **** #endif
 10079              		.loc 1 1255 11 view .LVU3256
 10080 06c2 CDF800B0 		str	fp, [sp]
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10081              		.loc 1 1249 11 view .LVU3257
 10082 06c6 4FF0FF39 		mov	r9, #-1
 10083              	.LVL1147:
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10084              		.loc 1 1249 11 view .LVU3258
 10085 06ca 7EE7     		b	.L975
 10086              	.LVL1148:
 10087              	.L1142:
1249:src/display.c **** #if !defined(PRETTY_FRACTION_ENTRY) || defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10088              		.loc 1 1249 11 view .LVU3259
 10089              	.LBE556:
 10090              	.LBE580:
3045:src/display.c **** 	    *bp++ = '_';
 10091              		.loc 1 3045 6 is_stmt 1 view .LVU3260
3045:src/display.c **** 	    *bp++ = '_';
 10092              		.loc 1 3045 12 is_stmt 0 view .LVU3261
 10093 06cc 1122     		movs	r2, #17
 10094 06ce EBE4     		b	.L1113
 10095              	.LVL1149:
 10096              	.L1135:
 10097              	.LBB581:
3071:src/display.c **** 	  char b2[16];
 10098              		.loc 1 3071 4 is_stmt 1 view .LVU3262
3071:src/display.c **** 	  char b2[16];
 10099              		.loc 1 3071 45 is_stmt 0 view .LVU3263
 10100 06d0 B64B     		ldr	r3, .L1167+4
 10101 06d2 1B68     		ldr	r3, [r3]
 10102 06d4 B3F8DC07 		ldrh	r0, [r3, #2012]
3071:src/display.c **** 	  char b2[16];
 10103              		.loc 1 3071 22 view .LVU3264
 10104 06d8 C0F34610 		ubfx	r0, r0, #5, #7
 10105 06dc FFF7FEFF 		bl	current_catalogue
ARM GAS  /tmp/ccdQiHBS.s 			page 295


 10106              	.LVL1150:
3075:src/display.c **** 	  p = catcmd(op, b2);
 10107              		.loc 1 3075 9 view .LVU3265
 10108 06e0 B349     		ldr	r1, .L1167+8
3071:src/display.c **** 	  char b2[16];
 10109              		.loc 1 3071 22 view .LVU3266
 10110 06e2 8246     		mov	r10, r0
 10111              	.LVL1151:
3072:src/display.c **** 	  const char *p;
 10112              		.loc 1 3072 4 is_stmt 1 view .LVU3267
3073:src/display.c **** 
 10113              		.loc 1 3073 4 view .LVU3268
3075:src/display.c **** 	  p = catcmd(op, b2);
 10114              		.loc 1 3075 4 view .LVU3269
3075:src/display.c **** 	  p = catcmd(op, b2);
 10115              		.loc 1 3075 9 is_stmt 0 view .LVU3270
 10116 06e4 4046     		mov	r0, r8
 10117              	.LVL1152:
3075:src/display.c **** 	  p = catcmd(op, b2);
 10118              		.loc 1 3075 9 view .LVU3271
 10119 06e6 FFF7FEFF 		bl	scopy
 10120              	.LVL1153:
3076:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10121              		.loc 1 3076 8 view .LVU3272
 10122 06ea 06A9     		add	r1, sp, #24
3075:src/display.c **** 	  p = catcmd(op, b2);
 10123              		.loc 1 3075 9 view .LVU3273
 10124 06ec 0646     		mov	r6, r0
3076:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10125              		.loc 1 3076 8 view .LVU3274
 10126 06ee 5046     		mov	r0, r10
 10127              	.LVL1154:
3076:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10128              		.loc 1 3076 4 is_stmt 1 view .LVU3275
3076:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10129              		.loc 1 3076 8 is_stmt 0 view .LVU3276
 10130 06f0 FFF7FEFF 		bl	catcmd
 10131              	.LVL1155:
3077:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10132              		.loc 1 3077 7 view .LVU3277
 10133 06f4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 10134 06f6 142B     		cmp	r3, #20
3076:src/display.c **** 	  if (*p != COMPLEX_PREFIX && State2.cmplx)
 10135              		.loc 1 3076 8 view .LVU3278
 10136 06f8 0146     		mov	r1, r0
 10137              	.LVL1156:
3077:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10138              		.loc 1 3077 4 is_stmt 1 view .LVU3279
3077:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10139              		.loc 1 3077 7 is_stmt 0 view .LVU3280
 10140 06fa 05D0     		beq	.L884
3077:src/display.c **** 	    *bp++ = COMPLEX_PREFIX;
 10141              		.loc 1 3077 29 discriminator 1 view .LVU3281
 10142 06fc 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10143 06fe 9B07     		lsls	r3, r3, #30
3078:src/display.c **** 	  bp = scopy(bp, p);
 10144              		.loc 1 3078 6 is_stmt 1 discriminator 1 view .LVU3282
ARM GAS  /tmp/ccdQiHBS.s 			page 296


 10145              	.LVL1157:
3078:src/display.c **** 	  bp = scopy(bp, p);
 10146              		.loc 1 3078 12 is_stmt 0 discriminator 1 view .LVU3283
 10147 0700 44BF     		itt	mi
 10148 0702 1423     		movmi	r3, #20
 10149 0704 06F8013B 		strbmi	r3, [r6], #1
 10150              	.LVL1158:
 10151              	.L884:
3079:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10152              		.loc 1 3079 4 is_stmt 1 view .LVU3284
3079:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10153              		.loc 1 3079 9 is_stmt 0 view .LVU3285
 10154 0708 3046     		mov	r0, r6
 10155              	.LVL1159:
3079:src/display.c **** 	  if (cata == CATALOGUE_CONST || cata == CATALOGUE_COMPLEX_CONST) {
 10156              		.loc 1 3079 9 view .LVU3286
 10157 070a FFF7FEFF 		bl	scopy
 10158              	.LVL1160:
3080:src/display.c **** 	    // State2.disp_small = 1;
 10159              		.loc 1 3080 4 is_stmt 1 view .LVU3287
3080:src/display.c **** 	    // State2.disp_small = 1;
 10160              		.loc 1 3080 7 is_stmt 0 view .LVU3288
 10161 070e A9F11003 		sub	r3, r9, #16
 10162 0712 012B     		cmp	r3, #1
 10163 0714 40F2DB80 		bls	.L1145
3087:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10164              		.loc 1 3087 11 is_stmt 1 view .LVU3289
3087:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10165              		.loc 1 3087 15 is_stmt 0 view .LVU3290
 10166 0718 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
3087:src/display.c **** 	    if (cata == CATALOGUE_CONV) {
 10167              		.loc 1 3087 14 view .LVU3291
 10168 071a 5E06     		lsls	r6, r3, #25
 10169 071c 7FF572AE 		bpl	.L889
3088:src/display.c **** 	      decNumber x, r;
 10170              		.loc 1 3088 6 is_stmt 1 view .LVU3292
3088:src/display.c **** 	      decNumber x, r;
 10171              		.loc 1 3088 9 is_stmt 0 view .LVU3293
 10172 0720 B9F1120F 		cmp	r9, #18
 10173 0724 00F0BA82 		beq	.L1146
3108:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10174              		.loc 1 3108 13 is_stmt 1 view .LVU3294
3108:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10175              		.loc 1 3108 46 is_stmt 0 view .LVU3295
 10176 0728 AAF58873 		sub	r3, r10, #272
3108:src/display.c **** 	      REGISTER z, *const x = StackBase;
 10177              		.loc 1 3108 16 view .LVU3296
 10178 072c 0D2B     		cmp	r3, #13
 10179 072e 3FF669AE 		bhi	.L889
 10180              	.LBB569:
3109:src/display.c **** 	      copyreg(&z, x);
 10181              		.loc 1 3109 8 is_stmt 1 discriminator 3 view .LVU3297
3109:src/display.c **** 	      copyreg(&z, x);
 10182              		.loc 1 3109 27 is_stmt 0 discriminator 3 view .LVU3298
 10183 0732 A04B     		ldr	r3, .L1167+12
 10184 0734 1E68     		ldr	r6, [r3]
 10185              	.LVL1161:
ARM GAS  /tmp/ccdQiHBS.s 			page 297


3110:src/display.c **** 	      sigma_val((enum nilop) argKIND(op));
 10186              		.loc 1 3110 8 is_stmt 1 discriminator 3 view .LVU3299
 10187 0736 13A8     		add	r0, sp, #76
 10188 0738 3146     		mov	r1, r6
 10189 073a FFF7FEFF 		bl	copyreg
 10190              	.LVL1162:
3111:src/display.c **** 	      set_x(x, CNULL, is_dblmode());
 10191              		.loc 1 3111 8 discriminator 3 view .LVU3300
 10192 073e 5FFA8AF0 		uxtb	r0, r10
 10193 0742 FFF7FEFF 		bl	sigma_val
 10194              	.LVL1163:
3112:src/display.c **** 	      copyreg(x, &z);
 10195              		.loc 1 3112 8 discriminator 3 view .LVU3301
 10196 0746 FFF7FEFF 		bl	is_dblmode
 10197              	.LVL1164:
 10198 074a 0021     		movs	r1, #0
 10199 074c 0246     		mov	r2, r0
 10200 074e 3046     		mov	r0, r6
 10201 0750 FFF7FEFF 		bl	set_x
 10202              	.LVL1165:
3113:src/display.c **** 	      skip = 1;
 10203              		.loc 1 3113 8 discriminator 3 view .LVU3302
 10204 0754 13A9     		add	r1, sp, #76
 10205 0756 3046     		mov	r0, r6
 10206 0758 FFF7FEFF 		bl	copyreg
 10207              	.LVL1166:
3114:src/display.c **** 	    }
 10208              		.loc 1 3114 8 discriminator 3 view .LVU3303
3114:src/display.c **** 	    }
 10209              		.loc 1 3114 8 is_stmt 0 discriminator 3 view .LVU3304
 10210              	.LBE569:
3117:src/display.c **** 	} else if (State2.multi) {
 10211              		.loc 1 3117 4 is_stmt 1 discriminator 3 view .LVU3305
 10212 075c 1CA8     		add	r0, sp, #112
 10213 075e FFF7FEFF 		bl	set_status
 10214              	.LVL1167:
3117:src/display.c **** 	} else if (State2.multi) {
 10215              		.loc 1 3117 4 is_stmt 0 discriminator 3 view .LVU3306
 10216              	.LBE581:
3207:src/display.c ****       nostk:	show_flags();
 10217              		.loc 1 3207 2 is_stmt 1 discriminator 3 view .LVU3307
 10218 0762 FFF7FEFF 		bl	show_stack
 10219              	.LVL1168:
3208:src/display.c **** 	if (!skip) {
 10220              		.loc 1 3208 14 discriminator 3 view .LVU3308
 10221 0766 FFF7FEFF 		bl	show_flags
 10222              	.LVL1169:
3209:src/display.c **** 	  if (State2.runmode) {
 10223              		.loc 1 3209 2 discriminator 3 view .LVU3309
 10224              	.L888:
3279:src/display.c **** 	if (x_disp == 0 || State2.smode != SDISP_NORMAL || DispMsg != NULL || DispPlot || State2.disp_as_a
 10225              		.loc 1 3279 2 view .LVU3310
 10226 076a FFF7FEFF 		bl	set_annunciators
 10227              	.LVL1170:
3280:src/display.c **** 	  ShowRPN = 0;
 10228              		.loc 1 3280 2 view .LVU3311
 10229 076e 924E     		ldr	r6, .L1167+16
ARM GAS  /tmp/ccdQiHBS.s 			page 298


 10230 0770 DFF85882 		ldr	r8, .L1167+36
 10231 0774 DFF85092 		ldr	r9, .L1167+32
 10232 0778 16E5     		b	.L864
 10233              	.LVL1171:
 10234              	.L974:
 10235              	.LBB582:
 10236              	.LBB557:
1337:src/display.c **** 		  //						i += SEGS_PER_DIGIT;
 10237              		.loc 1 1337 5 view .LVU3312
 10238              	.LBB546:
 10239              	.LBI546:
 286:src/display.c ****   if (res) {
 10240              		.loc 1 286 14 view .LVU3313
 10241              	.LBB547:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10242              		.loc 1 287 3 view .LVU3314
 10243 077a 904B     		ldr	r3, .L1167+20
 10244 077c ABF10900 		sub	r0, fp, #9
 10245              	.LVL1172:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10246              		.loc 1 287 3 is_stmt 0 view .LVU3315
 10247 0780 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 10248 0782 FFF7FEFF 		bl	set_decimal.part.0
 10249              	.LVL1173:
 294:src/display.c **** }
 10250              		.loc 1 294 3 is_stmt 1 view .LVU3316
 294:src/display.c **** }
 10251              		.loc 1 294 10 is_stmt 0 view .LVU3317
 10252 0786 D946     		mov	r9, fp
 10253 0788 5346     		mov	r3, r10
 10254 078a 1AE7     		b	.L973
 10255              	.LVL1174:
 10256              	.L965:
 294:src/display.c **** }
 10257              		.loc 1 294 10 view .LVU3318
 10258              	.LBE547:
 10259              	.LBE546:
 10260              	.LBB548:
1298:src/display.c **** 	      gotdot = 0;
 10261              		.loc 1 1298 11 is_stmt 1 view .LVU3319
1298:src/display.c **** 	      gotdot = 0;
 10262              		.loc 1 1298 14 is_stmt 0 view .LVU3320
 10263 078c 9AF80020 		ldrb	r2, [r10]	@ zero_extendqisi2
 10264              	.LVL1175:
1298:src/display.c **** 	      gotdot = 0;
 10265              		.loc 1 1298 14 view .LVU3321
 10266 0790 2E2A     		cmp	r2, #46
 10267 0792 00F01D81 		beq	.L1147
 10268              	.LVL1176:
1305:src/display.c **** 	    overflow_to_left = 1;
 10269              		.loc 1 1305 6 is_stmt 1 view .LVU3322
 10270 0796 3C21     		movs	r1, #60
 10271              	.LVL1177:
1305:src/display.c **** 	    overflow_to_left = 1;
 10272              		.loc 1 1305 6 is_stmt 0 view .LVU3323
 10273 0798 FFF7FEFF 		bl	set_dig
 10274              	.LVL1178:
ARM GAS  /tmp/ccdQiHBS.s 			page 299


1306:src/display.c **** 	  }
 10275              		.loc 1 1306 6 is_stmt 1 view .LVU3324
1306:src/display.c **** 	  }
 10276              		.loc 1 1306 6 is_stmt 0 view .LVU3325
 10277 079c 9AF80010 		ldrb	r1, [r10]	@ zero_extendqisi2
1306:src/display.c **** 	  }
 10278              		.loc 1 1306 6 view .LVU3326
 10279              	.LBE548:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10280              		.loc 1 1312 9 is_stmt 1 view .LVU3327
 10281              	.LBB549:
1292:src/display.c **** 	    if (gotdot <= j) {
 10282              		.loc 1 1292 8 is_stmt 0 view .LVU3328
 10283 07a0 4FF0090B 		mov	fp, #9
 10284              	.LBE549:
1312:src/display.c **** #ifdef LARGE_EXPONENT_ENTRY
 10285              		.loc 1 1312 2 view .LVU3329
 10286 07a4 0029     		cmp	r1, #0
 10287 07a6 3FF469AF 		beq	.L961
 10288              	.LBB550:
1304:src/display.c **** 	    set_dig(0, '<');
 10289              		.loc 1 1304 18 view .LVU3330
 10290 07aa 4FF0FF39 		mov	r9, #-1
 10291              	.LVL1179:
1292:src/display.c **** 	    if (gotdot <= j) {
 10292              		.loc 1 1292 8 view .LVU3331
 10293 07ae 4FF0090B 		mov	fp, #9
 10294 07b2 F3E6     		b	.L995
 10295              	.LVL1180:
 10296              	.L1002:
1292:src/display.c **** 	    if (gotdot <= j) {
 10297              		.loc 1 1292 8 view .LVU3332
 10298              	.LBE550:
1272:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 10299              		.loc 1 1272 4 view .LVU3333
 10300 07b4 8346     		mov	fp, r0
1255:src/display.c **** #endif
 10301              		.loc 1 1255 11 view .LVU3334
 10302 07b6 0090     		str	r0, [sp]
 10303              	.LBB551:
1308:src/display.c **** 	}
 10304              		.loc 1 1308 16 view .LVU3335
 10305 07b8 4FF0FF39 		mov	r9, #-1
 10306              	.LVL1181:
1308:src/display.c **** 	}
 10307              		.loc 1 1308 16 view .LVU3336
 10308 07bc 05E7     		b	.L975
 10309              	.LVL1182:
 10310              	.L1137:
1308:src/display.c **** 	}
 10311              		.loc 1 1308 16 view .LVU3337
 10312              	.LBE551:
 10313              	.LBE557:
 10314              	.LBE582:
3127:src/display.c **** 	  skip = 1;
 10315              		.loc 1 3127 4 is_stmt 1 view .LVU3338
 10316              	.LBB583:
ARM GAS  /tmp/ccdQiHBS.s 			page 300


 10317              	.LBI583:
2352:src/display.c **** 	int i, n;
 10318              		.loc 1 2352 19 view .LVU3339
 10319              	.LBB584:
2353:src/display.c **** 	int j = SEGS_EXP_BASE;
 10320              		.loc 1 2353 2 view .LVU3340
2354:src/display.c **** 	const int status = State2.status - 3;
 10321              		.loc 1 2354 2 view .LVU3341
2355:src/display.c **** 	char buf[16], *p = buf;
 10322              		.loc 1 2355 2 view .LVU3342
2359:src/display.c **** 	  set_status("Free:");
 10323              		.loc 1 2359 5 is_stmt 0 view .LVU3343
 10324 07be 012B     		cmp	r3, #1
2355:src/display.c **** 	char buf[16], *p = buf;
 10325              		.loc 1 2355 12 view .LVU3344
 10326 07c0 A3F10306 		sub	r6, r3, #3
 10327              	.LVL1183:
2356:src/display.c **** 	unsigned int pc;
 10328              		.loc 1 2356 2 is_stmt 1 view .LVU3345
2357:src/display.c **** 
 10329              		.loc 1 2357 2 view .LVU3346
2359:src/display.c **** 	  set_status("Free:");
 10330              		.loc 1 2359 2 view .LVU3347
2359:src/display.c **** 	  set_status("Free:");
 10331              		.loc 1 2359 5 is_stmt 0 view .LVU3348
 10332 07c4 00F04F82 		beq	.L1148
2367:src/display.c **** 	  /* Top line */
 10333              		.loc 1 2367 7 is_stmt 1 view .LVU3349
2367:src/display.c **** 	  /* Top line */
 10334              		.loc 1 2367 10 is_stmt 0 view .LVU3350
 10335 07c8 711C     		adds	r1, r6, #1
 10336 07ca 00F01E82 		beq	.L1149
 10337              	.LBB585:
2384:src/display.c **** 	  int end;
 10338              		.loc 1 2384 4 is_stmt 1 view .LVU3351
2385:src/display.c **** 	  int group = 10;
 10339              		.loc 1 2385 4 view .LVU3352
2386:src/display.c **** 	  int start = 0;
 10340              		.loc 1 2386 4 view .LVU3353
 10341              	.LVL1184:
2387:src/display.c **** 		
 10342              		.loc 1 2387 4 view .LVU3354
2389:src/display.c **** 	    base = 10 * status;
 10343              		.loc 1 2389 4 view .LVU3355
2389:src/display.c **** 	    base = 10 * status;
 10344              		.loc 1 2389 7 is_stmt 0 view .LVU3356
 10345 07ce 092E     		cmp	r6, #9
 10346 07d0 40F3F481 		ble	.L1150
2399:src/display.c **** 	    base = regX_idx;
 10347              		.loc 1 2399 9 is_stmt 1 view .LVU3357
2399:src/display.c **** 	    base = regX_idx;
 10348              		.loc 1 2399 12 is_stmt 0 view .LVU3358
 10349 07d4 0A2E     		cmp	r6, #10
 10350 07d6 00F0D481 		beq	.L1151
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10351              		.loc 1 2407 6 is_stmt 1 view .LVU3359
 10352              	.LVL1185:
ARM GAS  /tmp/ccdQiHBS.s 			page 301


2408:src/display.c **** 	    set_status("FL.00-.15");
 10353              		.loc 1 2408 6 view .LVU3360
2409:src/display.c **** 	  }
 10354              		.loc 1 2409 6 view .LVU3361
 10355 07da 7948     		ldr	r0, .L1167+24
 10356 07dc 4FF00A09 		mov	r9, #10
 10357              	.LVL1186:
2409:src/display.c **** 	  }
 10358              		.loc 1 2409 6 is_stmt 0 view .LVU3362
 10359 07e0 FFF7FEFF 		bl	set_status
 10360              	.LVL1187:
2386:src/display.c **** 	  int start = 0;
 10361              		.loc 1 2386 8 view .LVU3363
 10362 07e4 4F46     		mov	r7, r9
2387:src/display.c **** 		
 10363              		.loc 1 2387 8 view .LVU3364
 10364 07e6 4FF0000B 		mov	fp, #0
2409:src/display.c **** 	  }
 10365              		.loc 1 2409 6 view .LVU3365
 10366 07ea 0720     		movs	r0, #7
 10367 07ec 4FF00908 		mov	r8, #9
 10368              	.LVL1188:
2408:src/display.c **** 	    set_status("FL.00-.15");
 10369              		.loc 1 2408 10 view .LVU3366
 10370 07f0 4FF07F0A 		mov	r10, #127
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10371              		.loc 1 2407 11 view .LVU3367
 10372 07f4 7026     		movs	r6, #112
 10373              	.LVL1189:
 10374              	.L903:
2411:src/display.c **** 	  set_decimal(j, DECIMAL_DOT, CNULL);
 10375              		.loc 1 2411 4 is_stmt 1 view .LVU3368
2412:src/display.c **** 	  j += SEGS_PER_DIGIT;
 10376              		.loc 1 2412 4 view .LVU3369
 10377              	.LBB586:
 10378              	.LBI586:
 286:src/display.c ****   if (res) {
 10379              		.loc 1 286 14 view .LVU3370
 10380              	.LBE586:
 10381              	.LBE585:
 10382              	.LBE584:
 10383              	.LBE583:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10384              		.loc 1 287 3 view .LVU3371
 10385              	.LBB627:
 10386              	.LBB615:
 10387              	.LBB606:
 10388              	.LBB589:
 10389              	.LBB587:
 10390              	.LBI587:
 286:src/display.c ****   if (res) {
 10391              		.loc 1 286 14 view .LVU3372
 10392              	.LBB588:
 290:src/display.c ****     if (decimal != DECIMAL_DOT)
 10393              		.loc 1 290 5 view .LVU3373
 10394 07f6 FFF7FEFF 		bl	set_dot
 10395              	.LVL1190:
ARM GAS  /tmp/ccdQiHBS.s 			page 302


 291:src/display.c ****       set_dot(posn+8);
 10396              		.loc 1 291 5 view .LVU3374
 294:src/display.c **** }
 10397              		.loc 1 294 3 view .LVU3375
 294:src/display.c **** }
 10398              		.loc 1 294 3 is_stmt 0 view .LVU3376
 10399              	.LBE588:
 10400              	.LBE587:
 10401              	.LBE589:
 10402              	.LBE606:
 10403              	.LBE615:
 10404              	.LBE627:
 294:src/display.c **** }
 10405              		.loc 1 294 3 is_stmt 1 view .LVU3377
 10406              	.LBB628:
 10407              	.LBB616:
 10408              	.LBB607:
2413:src/display.c **** 	  for (i = start; i < group + start; i++) {
 10409              		.loc 1 2413 4 view .LVU3378
2414:src/display.c **** 	    int k = i + base - start;
 10410              		.loc 1 2414 4 view .LVU3379
2414:src/display.c **** 	    int k = i + base - start;
 10411              		.loc 1 2414 20 view .LVU3380
 10412 07fa CBEB4703 		rsb	r3, fp, r7, lsl #1
 10413 07fe 3344     		add	r3, r3, r6
 10414 0800 0093     		str	r3, [sp]
 10415 0802 A6EB0B03 		sub	r3, r6, fp
 10416 0806 3744     		add	r7, r7, r6
 10417              	.LVL1191:
2414:src/display.c **** 	    int k = i + base - start;
 10418              		.loc 1 2414 20 is_stmt 0 view .LVU3381
 10419 0808 0193     		str	r3, [sp, #4]
 10420              	.LVL1192:
 10421              	.L908:
 10422              	.LBB590:
2415:src/display.c **** 	    int l = get_user_flag(k);
 10423              		.loc 1 2415 6 is_stmt 1 view .LVU3382
2416:src/display.c **** 	    k += group;
 10424              		.loc 1 2416 6 view .LVU3383
2416:src/display.c **** 	    k += group;
 10425              		.loc 1 2416 14 is_stmt 0 view .LVU3384
 10426 080a 019B     		ldr	r3, [sp, #4]
 10427 080c 03EB0B00 		add	r0, r3, fp
 10428 0810 FFF7FEFF 		bl	get_user_flag
 10429              	.LVL1193:
2418:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10430              		.loc 1 2418 9 view .LVU3385
 10431 0814 5745     		cmp	r7, r10
2416:src/display.c **** 	    k += group;
 10432              		.loc 1 2416 14 view .LVU3386
 10433 0816 0646     		mov	r6, r0
 10434              	.LVL1194:
2417:src/display.c **** 	    if (end >= k) {
 10435              		.loc 1 2417 6 is_stmt 1 view .LVU3387
2418:src/display.c **** 	      l |= (get_user_flag(k) << 1);
 10436              		.loc 1 2418 6 view .LVU3388
2418:src/display.c **** 	      l |= (get_user_flag(k) << 1);
ARM GAS  /tmp/ccdQiHBS.s 			page 303


 10437              		.loc 1 2418 9 is_stmt 0 view .LVU3389
 10438 0818 3CDD     		ble	.L1152
 10439              	.LVL1195:
 10440              	.L905:
2424:src/display.c **** 	    set_decimal(j, DECIMAL_DOT, CNULL);
 10441              		.loc 1 2424 6 is_stmt 1 view .LVU3390
 10442 081a 3146     		mov	r1, r6
 10443 081c 4046     		mov	r0, r8
 10444 081e FFF7FEFF 		bl	set_dig
 10445              	.LVL1196:
2425:src/display.c **** 	    j += SEGS_PER_DIGIT;
 10446              		.loc 1 2425 6 view .LVU3391
 10447              	.LBB591:
 10448              	.LBI591:
 286:src/display.c ****   if (res) {
 10449              		.loc 1 286 14 view .LVU3392
 10450              	.LBE591:
 10451              	.LBE590:
 10452              	.LBE607:
 10453              	.LBE616:
 10454              	.LBE628:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10455              		.loc 1 287 3 view .LVU3393
 10456              	.LBB629:
 10457              	.LBB617:
 10458              	.LBB608:
 10459              	.LBB599:
 10460              	.LBB594:
 10461              	.LBB592:
 10462              	.LBI592:
 286:src/display.c ****   if (res) {
 10463              		.loc 1 286 14 view .LVU3394
 10464              	.LBB593:
 290:src/display.c ****     if (decimal != DECIMAL_DOT)
 10465              		.loc 1 290 5 view .LVU3395
 10466 0822 08F10700 		add	r0, r8, #7
 10467 0826 FFF7FEFF 		bl	set_dot
 10468              	.LVL1197:
 291:src/display.c ****       set_dot(posn+8);
 10469              		.loc 1 291 5 view .LVU3396
 294:src/display.c **** }
 10470              		.loc 1 294 3 view .LVU3397
 294:src/display.c **** }
 10471              		.loc 1 294 3 is_stmt 0 view .LVU3398
 10472              	.LBE593:
 10473              	.LBE592:
 10474              	.LBE594:
 10475              	.LBE599:
 10476              	.LBE608:
 10477              	.LBE617:
 10478              	.LBE629:
 294:src/display.c **** }
 10479              		.loc 1 294 3 is_stmt 1 view .LVU3399
 10480              	.LBB630:
 10481              	.LBB618:
 10482              	.LBB609:
 10483              	.LBB600:
ARM GAS  /tmp/ccdQiHBS.s 			page 304


2426:src/display.c **** 	    if (i == 4) {
 10484              		.loc 1 2426 6 view .LVU3400
2426:src/display.c **** 	    if (i == 4) {
 10485              		.loc 1 2426 6 is_stmt 0 view .LVU3401
 10486              	.LBE600:
2414:src/display.c **** 	    int k = i + base - start;
 10487              		.loc 1 2414 39 is_stmt 1 view .LVU3402
 10488              	.LBB601:
2427:src/display.c **** 	      set_dig(j, 8);
 10489              		.loc 1 2427 9 is_stmt 0 view .LVU3403
 10490 082a BBF1040F 		cmp	fp, #4
2426:src/display.c **** 	    if (i == 4) {
 10491              		.loc 1 2426 8 view .LVU3404
 10492 082e 08F10900 		add	r0, r8, #9
 10493              	.LVL1198:
2427:src/display.c **** 	      set_dig(j, 8);
 10494              		.loc 1 2427 6 is_stmt 1 view .LVU3405
 10495              	.LBE601:
2414:src/display.c **** 	    int k = i + base - start;
 10496              		.loc 1 2414 40 is_stmt 0 view .LVU3406
 10497 0832 0BF1010B 		add	fp, fp, #1
 10498              	.LVL1199:
2414:src/display.c **** 	    int k = i + base - start;
 10499              		.loc 1 2414 20 is_stmt 1 view .LVU3407
 10500              	.LBB602:
2427:src/display.c **** 	      set_dig(j, 8);
 10501              		.loc 1 2427 9 is_stmt 0 view .LVU3408
 10502 0836 3CD0     		beq	.L1153
2427:src/display.c **** 	      set_dig(j, 8);
 10503              		.loc 1 2427 9 view .LVU3409
 10504              	.LBE602:
2414:src/display.c **** 	    int k = i + base - start;
 10505              		.loc 1 2414 4 view .LVU3410
 10506 0838 CB45     		cmp	fp, r9
 10507 083a 07F10107 		add	r7, r7, #1
 10508 083e 01D0     		beq	.L1154
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10509              		.loc 1 2407 11 view .LVU3411
 10510 0840 8046     		mov	r8, r0
 10511 0842 E2E7     		b	.L908
 10512              	.L1154:
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10513              		.loc 1 2407 11 view .LVU3412
 10514 0844 594F     		ldr	r7, .L1167+4
 10515              	.LVL1200:
 10516              	.L898:
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10517              		.loc 1 2407 11 view .LVU3413
 10518              	.LBE609:
2435:src/display.c **** 	pc = state_pc();
 10519              		.loc 1 2435 2 is_stmt 1 view .LVU3414
2436:src/display.c **** 	if (isXROM(pc))
 10520              		.loc 1 2436 2 view .LVU3415
2436:src/display.c **** 	if (isXROM(pc))
 10521              		.loc 1 2436 7 is_stmt 0 view .LVU3416
 10522 0846 3B68     		ldr	r3, [r7]
2436:src/display.c **** 	if (isXROM(pc))
ARM GAS  /tmp/ccdQiHBS.s 			page 305


 10523              		.loc 1 2436 5 view .LVU3417
 10524 0848 B3F8E077 		ldrh	r7, [r3, #2016]
 10525              	.LVL1201:
2437:src/display.c **** 	  pc = 1;
 10526              		.loc 1 2437 2 is_stmt 1 view .LVU3418
2437:src/display.c **** 	  pc = 1;
 10527              		.loc 1 2437 6 is_stmt 0 view .LVU3419
 10528 084c BB0B     		lsrs	r3, r7, #14
2438:src/display.c **** 	for (n=i=0; i<4; i++) {
 10529              		.loc 1 2438 7 view .LVU3420
 10530 084e 032B     		cmp	r3, #3
 10531 0850 08BF     		it	eq
 10532 0852 0127     		moveq	r7, #1
 10533              	.LVL1202:
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10534              		.loc 1 2439 2 is_stmt 1 view .LVU3421
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10535              		.loc 1 2439 14 view .LVU3422
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10536              		.loc 1 2439 8 is_stmt 0 view .LVU3423
 10537 0854 4FF00009 		mov	r9, #0
 10538 0858 6426     		movs	r6, #100
2435:src/display.c **** 	pc = state_pc();
 10539              		.loc 1 2435 4 view .LVU3424
 10540 085a 4FF06C08 		mov	r8, #108
 10541              	.LVL1203:
 10542              	.L912:
2440:src/display.c **** 	    if (++n == 4) {
 10543              		.loc 1 2440 4 is_stmt 1 view .LVU3425
2440:src/display.c **** 	    if (++n == 4) {
 10544              		.loc 1 2440 8 is_stmt 0 view .LVU3426
 10545 085e 0222     		movs	r2, #2
 10546 0860 3146     		mov	r1, r6
 10547 0862 3846     		mov	r0, r7
 10548 0864 FFF7FEFF 		bl	find_label_from
 10549              	.LVL1204:
2441:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10550              		.loc 1 2441 6 is_stmt 1 view .LVU3427
2440:src/display.c **** 	    if (++n == 4) {
 10551              		.loc 1 2440 7 is_stmt 0 view .LVU3428
 10552 0868 60B1     		cbz	r0, .L910
2441:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10553              		.loc 1 2441 9 view .LVU3429
 10554 086a 09F10109 		add	r9, r9, #1
 10555              	.LVL1205:
2445:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10556              		.loc 1 2445 8 is_stmt 1 view .LVU3430
2441:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10557              		.loc 1 2441 9 is_stmt 0 view .LVU3431
 10558 086e B9F1040F 		cmp	r9, #4
2445:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10559              		.loc 1 2445 8 view .LVU3432
 10560 0872 A6F12301 		sub	r1, r6, #35
 10561 0876 4046     		mov	r0, r8
2441:src/display.c **** 	      set_dig(SEGS_EXP_BASE + SEGS_PER_EXP_DIGIT, 'L');
 10562              		.loc 1 2441 9 view .LVU3433
 10563 0878 00F08D80 		beq	.L1155
ARM GAS  /tmp/ccdQiHBS.s 			page 306


2445:src/display.c **** 	      j += SEGS_PER_EXP_DIGIT;
 10564              		.loc 1 2445 8 view .LVU3434
 10565 087c FFF7FEFF 		bl	set_dig
 10566              	.LVL1206:
2446:src/display.c **** 	    }
 10567              		.loc 1 2446 8 is_stmt 1 view .LVU3435
2446:src/display.c **** 	    }
 10568              		.loc 1 2446 10 is_stmt 0 view .LVU3436
 10569 0880 08F10708 		add	r8, r8, #7
 10570              	.LVL1207:
 10571              	.L910:
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10572              		.loc 1 2439 19 is_stmt 1 view .LVU3437
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10573              		.loc 1 2439 14 view .LVU3438
 10574 0884 0136     		adds	r6, r6, #1
 10575              	.LVL1208:
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10576              		.loc 1 2439 2 is_stmt 0 view .LVU3439
 10577 0886 682E     		cmp	r6, #104
 10578 0888 E9D1     		bne	.L912
 10579              	.LVL1209:
 10580              	.L1117:
2439:src/display.c **** 	  if (find_label_from(pc, 100+i, FIND_OP_ENDS)) {
 10581              		.loc 1 2439 2 view .LVU3440
 10582              	.LBE618:
 10583              	.LBE630:
3207:src/display.c ****       nostk:	show_flags();
 10584              		.loc 1 3207 2 is_stmt 1 discriminator 1 view .LVU3441
 10585 088a FFF7FEFF 		bl	show_stack
 10586              	.LVL1210:
3208:src/display.c **** 	if (!skip) {
 10587              		.loc 1 3208 14 discriminator 1 view .LVU3442
 10588 088e FFF7FEFF 		bl	show_flags
 10589              	.LVL1211:
3209:src/display.c **** 	  if (State2.runmode) {
 10590              		.loc 1 3209 2 discriminator 1 view .LVU3443
 10591 0892 6AE7     		b	.L888
 10592              	.LVL1212:
 10593              	.L1152:
 10594              	.LBB631:
 10595              	.LBB619:
 10596              	.LBB610:
 10597              	.LBB603:
2419:src/display.c **** 	      k += group;
 10598              		.loc 1 2419 8 view .LVU3444
2419:src/display.c **** 	      k += group;
 10599              		.loc 1 2419 14 is_stmt 0 view .LVU3445
 10600 0894 3846     		mov	r0, r7
 10601              	.LVL1213:
2419:src/display.c **** 	      k += group;
 10602              		.loc 1 2419 14 view .LVU3446
 10603 0896 FFF7FEFF 		bl	get_user_flag
 10604              	.LVL1214:
 10605 089a 009B     		ldr	r3, [sp]
 10606 089c 5B44     		add	r3, r3, fp
2421:src/display.c **** 		l |= (get_user_flag(k) << 2);
ARM GAS  /tmp/ccdQiHBS.s 			page 307


 10607              		.loc 1 2421 11 view .LVU3447
 10608 089e 9A45     		cmp	r10, r3
2419:src/display.c **** 	      k += group;
 10609              		.loc 1 2419 10 view .LVU3448
 10610 08a0 46EA4006 		orr	r6, r6, r0, lsl #1
 10611              	.LVL1215:
2420:src/display.c **** 	      if (end >= k)
 10612              		.loc 1 2420 8 is_stmt 1 view .LVU3449
2421:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10613              		.loc 1 2421 8 view .LVU3450
2421:src/display.c **** 		l |= (get_user_flag(k) << 2);
 10614              		.loc 1 2421 11 is_stmt 0 view .LVU3451
 10615 08a4 B9DB     		blt	.L905
2422:src/display.c **** 	    }
 10616              		.loc 1 2422 3 is_stmt 1 view .LVU3452
2422:src/display.c **** 	    }
 10617              		.loc 1 2422 9 is_stmt 0 view .LVU3453
 10618 08a6 1846     		mov	r0, r3
 10619 08a8 FFF7FEFF 		bl	get_user_flag
 10620              	.LVL1216:
2422:src/display.c **** 	    }
 10621              		.loc 1 2422 5 view .LVU3454
 10622 08ac 46EA8006 		orr	r6, r6, r0, lsl #2
 10623              	.LVL1217:
2422:src/display.c **** 	    }
 10624              		.loc 1 2422 5 view .LVU3455
 10625 08b0 B3E7     		b	.L905
 10626              	.LVL1218:
 10627              	.L1153:
2428:src/display.c **** 	      set_decimal(j, DECIMAL_DOT, CNULL);
 10628              		.loc 1 2428 8 is_stmt 1 view .LVU3456
 10629 08b2 0821     		movs	r1, #8
 10630 08b4 FFF7FEFF 		bl	set_dig
 10631              	.LVL1219:
2429:src/display.c **** 	      j += SEGS_PER_DIGIT;
 10632              		.loc 1 2429 8 view .LVU3457
 10633              	.LBB595:
 10634              	.LBI595:
 286:src/display.c ****   if (res) {
 10635              		.loc 1 286 14 view .LVU3458
 10636              	.LBE595:
 10637              	.LBE603:
 10638              	.LBE610:
 10639              	.LBE619:
 10640              	.LBE631:
 287:src/display.c ****     *res++ = (decimal == DECIMAL_DOT)?'.':',';
 10641              		.loc 1 287 3 view .LVU3459
 10642              	.LBB632:
 10643              	.LBB620:
 10644              	.LBB611:
 10645              	.LBB604:
 10646              	.LBB598:
 10647              	.LBB596:
 10648              	.LBI596:
 286:src/display.c ****   if (res) {
 10649              		.loc 1 286 14 view .LVU3460
 10650              	.LBB597:
ARM GAS  /tmp/ccdQiHBS.s 			page 308


 290:src/display.c ****     if (decimal != DECIMAL_DOT)
 10651              		.loc 1 290 5 view .LVU3461
 10652 08b8 08F11000 		add	r0, r8, #16
 10653 08bc FFF7FEFF 		bl	set_dot
 10654              	.LVL1220:
 291:src/display.c ****       set_dot(posn+8);
 10655              		.loc 1 291 5 view .LVU3462
 294:src/display.c **** }
 10656              		.loc 1 294 3 view .LVU3463
 294:src/display.c **** }
 10657              		.loc 1 294 3 is_stmt 0 view .LVU3464
 10658              	.LBE597:
 10659              	.LBE596:
 10660              	.LBE598:
 10661              	.LBE604:
 10662              	.LBE611:
 10663              	.LBE620:
 10664              	.LBE632:
 294:src/display.c **** }
 10665              		.loc 1 294 3 is_stmt 1 view .LVU3465
 10666              	.LBB633:
 10667              	.LBB621:
 10668              	.LBB612:
 10669              	.LBB605:
2430:src/display.c **** 	    }
 10670              		.loc 1 2430 8 view .LVU3466
2430:src/display.c **** 	    }
 10671              		.loc 1 2430 10 is_stmt 0 view .LVU3467
 10672 08c0 08F11200 		add	r0, r8, #18
 10673              	.LVL1221:
2430:src/display.c **** 	    }
 10674              		.loc 1 2430 10 view .LVU3468
 10675              	.LBE605:
2414:src/display.c **** 	    int k = i + base - start;
 10676              		.loc 1 2414 39 is_stmt 1 view .LVU3469
2414:src/display.c **** 	    int k = i + base - start;
 10677              		.loc 1 2414 20 view .LVU3470
2414:src/display.c **** 	    int k = i + base - start;
 10678              		.loc 1 2414 20 is_stmt 0 view .LVU3471
 10679 08c4 0137     		adds	r7, r7, #1
2414:src/display.c **** 	    int k = i + base - start;
 10680              		.loc 1 2414 40 view .LVU3472
 10681 08c6 4FF0050B 		mov	fp, #5
 10682              	.LVL1222:
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10683              		.loc 1 2407 11 view .LVU3473
 10684 08ca 8046     		mov	r8, r0
 10685 08cc 9DE7     		b	.L908
 10686              	.LVL1223:
 10687              	.L1145:
2407:src/display.c **** 	    end = LOCAL_FLAG_BASE + 15;
 10688              		.loc 1 2407 11 view .LVU3474
 10689              	.LBE612:
 10690              	.LBE621:
 10691              	.LBE633:
 10692              	.LBB634:
3082:src/display.c **** 	      set_digits_string("0 to 255", 0);
ARM GAS  /tmp/ccdQiHBS.s 			page 309


 10693              		.loc 1 3082 6 is_stmt 1 view .LVU3475
3082:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10694              		.loc 1 3082 9 is_stmt 0 view .LVU3476
 10695 08ce BAF5274F 		cmp	r10, #42752
 10696 08d2 54D0     		beq	.L886
3082:src/display.c **** 	      set_digits_string("0 to 255", 0);
 10697              		.loc 1 3082 41 discriminator 1 view .LVU3477
 10698 08d4 BAF5284F 		cmp	r10, #43008
 10699 08d8 51D0     		beq	.L886
3085:src/display.c **** 	    skip = 1;
 10700              		.loc 1 3085 8 is_stmt 1 view .LVU3478
3085:src/display.c **** 	    skip = 1;
 10701              		.loc 1 3085 14 is_stmt 0 view .LVU3479
 10702 08da 0AF07F00 		and	r0, r10, #127
 10703 08de 0021     		movs	r1, #0
 10704 08e0 FFF7FEFF 		bl	get_const
 10705              	.LVL1224:
3085:src/display.c **** 	    skip = 1;
 10706              		.loc 1 3085 8 view .LVU3480
 10707 08e4 0022     		movs	r2, #0
 10708              	.LVL1225:
 10709              	.L1116:
 10710              	.LBB570:
3106:src/display.c **** 	      skip = 1;
 10711              		.loc 1 3106 8 discriminator 1 view .LVU3481
 10712 08e6 1146     		mov	r1, r2
 10713 08e8 FFF7FEFF 		bl	set_x
 10714              	.LVL1226:
3107:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10715              		.loc 1 3107 8 is_stmt 1 discriminator 1 view .LVU3482
3107:src/display.c **** 	    } else if (op >= (OP_NIL | OP_sigmaX2Y) && op < (OP_NIL | OP_sigmaX2Y) + NUMSTATREG) {
 10716              		.loc 1 3107 8 is_stmt 0 discriminator 1 view .LVU3483
 10717              	.LBE570:
3117:src/display.c **** 	} else if (State2.multi) {
 10718              		.loc 1 3117 4 is_stmt 1 discriminator 1 view .LVU3484
 10719 08ec 1CA8     		add	r0, sp, #112
 10720 08ee FFF7FEFF 		bl	set_status
 10721              	.LVL1227:
 10722 08f2 CAE7     		b	.L1117
 10723              	.LVL1228:
 10724              	.L929:
3117:src/display.c **** 	} else if (State2.multi) {
 10725              		.loc 1 3117 4 is_stmt 0 discriminator 1 view .LVU3485
 10726              	.LBE634:
3183:src/display.c **** 	  if (i > 0)
 10727              		.loc 1 3183 4 is_stmt 1 view .LVU3486
3183:src/display.c **** 	  if (i > 0)
 10728              		.loc 1 3183 8 is_stmt 0 view .LVU3487
 10729 08f4 2D4B     		ldr	r3, .L1167+4
 10730 08f6 1B68     		ldr	r3, [r3]
 10731 08f8 B3F8E007 		ldrh	r0, [r3, #2016]
 10732              	.LVL1229:
3184:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10733              		.loc 1 3184 4 is_stmt 1 view .LVU3488
3184:src/display.c **** 	    set_status(prt(getprog(i), buf));
 10734              		.loc 1 3184 7 is_stmt 0 view .LVU3489
 10735 08fc 0028     		cmp	r0, #0
ARM GAS  /tmp/ccdQiHBS.s 			page 310


 10736 08fe 00F0AE81 		beq	.L940
3185:src/display.c **** 	  else
 10737              		.loc 1 3185 6 is_stmt 1 view .LVU3490
 10738 0902 FFF7FEFF 		bl	getprog
 10739              	.LVL1230:
3185:src/display.c **** 	  else
 10740              		.loc 1 3185 6 is_stmt 0 view .LVU3491
 10741 0906 1CA9     		add	r1, sp, #112
 10742 0908 FFF7FEFF 		bl	prt
 10743              	.LVL1231:
 10744 090c FFF7FEFF 		bl	set_status
 10745              	.LVL1232:
 10746              	.L941:
3188:src/display.c **** #if 0
 10747              		.loc 1 3188 4 is_stmt 1 view .LVU3492
 10748 0910 8920     		movs	r0, #137
 10749 0912 FFF7FEFF 		bl	set_dot
 10750              	.LVL1233:
3203:src/display.c **** 	      annuc = 1;
 10751              		.loc 1 3203 6 view .LVU3493
3203:src/display.c **** 	      annuc = 1;
 10752              		.loc 1 3203 10 is_stmt 0 view .LVU3494
 10753 0916 FFF7FEFF 		bl	cur_shift
 10754              	.LVL1234:
3203:src/display.c **** 	      annuc = 1;
 10755              		.loc 1 3203 49 view .LVU3495
 10756 091a 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 10757 091c 03F00603 		and	r3, r3, #6
 10758 0920 1843     		orrs	r0, r0, r3
 10759 0922 10F0FF0F 		tst	r0, #255
 10760 0926 40F09281 		bne	.L942
3208:src/display.c **** 	if (!skip) {
 10761              		.loc 1 3208 14 is_stmt 1 view .LVU3496
 10762 092a FFF7FEFF 		bl	show_flags
 10763              	.LVL1235:
3209:src/display.c **** 	  if (State2.runmode) {
 10764              		.loc 1 3209 2 view .LVU3497
 10765 092e 224E     		ldr	r6, .L1167+16
 10766 0930 DFF89880 		ldr	r8, .L1167+36
 10767              	.LVL1236:
3209:src/display.c **** 	  if (State2.runmode) {
 10768              		.loc 1 3209 2 is_stmt 0 view .LVU3498
 10769 0934 A2E4     		b	.L866
 10770              	.LVL1237:
 10771              	.L1139:
3133:src/display.c **** 	  skip = 1;
 10772              		.loc 1 3133 4 is_stmt 1 view .LVU3499
 10773              	.LBB635:
 10774              	.LBI635:
2479:src/display.c **** 	char buf[16], *bp;
 10775              		.loc 1 2479 19 view .LVU3500
 10776              	.LBB636:
2480:src/display.c **** 	int n = State2.digval;
 10777              		.loc 1 2480 2 view .LVU3501
2481:src/display.c **** 	
 10778              		.loc 1 2481 2 view .LVU3502
2481:src/display.c **** 	
ARM GAS  /tmp/ccdQiHBS.s 			page 311


 10779              		.loc 1 2481 6 is_stmt 0 view .LVU3503
 10780 0936 B4F80880 		ldrh	r8, [r4, #8]
 10781              	.LVL1238:
2488:src/display.c **** 	  n;
 10782              		.loc 1 2488 2 is_stmt 1 view .LVU3504
2488:src/display.c **** 	  n;
 10783              		.loc 1 2488 54 is_stmt 0 view .LVU3505
 10784 093a CA07     		lsls	r2, r1, #31
 10785 093c 4CBF     		ite	mi
 10786 093e 08F17007 		addmi	r7, r8, #112
2481:src/display.c **** 	
 10787              		.loc 1 2481 6 view .LVU3506
 10788 0942 4746     		movpl	r7, r8
 10789              	.LVL1239:
2492:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10790              		.loc 1 2492 2 is_stmt 1 view .LVU3507
2492:src/display.c **** 	  set_status(alpha_rcl_s(reg, buf));
 10791              		.loc 1 2492 5 is_stmt 0 view .LVU3508
 10792 0944 11F00401 		ands	r1, r1, #4
 10793 0948 00F00181 		beq	.L920
2493:src/display.c **** 	}
 10794              		.loc 1 2493 4 is_stmt 1 view .LVU3509
2493:src/display.c **** 	}
 10795              		.loc 1 2493 15 is_stmt 0 view .LVU3510
 10796 094c 13A9     		add	r1, sp, #76
 10797 094e 3846     		mov	r0, r7
 10798 0950 FFF7FEFF 		bl	alpha_rcl_s
 10799              	.LVL1240:
2493:src/display.c **** 	}
 10800              		.loc 1 2493 4 view .LVU3511
 10801 0954 FFF7FEFF 		bl	set_status
 10802              	.LVL1241:
 10803              	.L921:
2515:src/display.c ****       }
 10804              		.loc 1 2515 2 is_stmt 1 view .LVU3512
 10805 0958 3846     		mov	r0, r7
 10806 095a 0021     		movs	r1, #0
 10807 095c FFF7FEFF 		bl	format_reg
 10808              	.LVL1242:
 10809              	.LBE636:
 10810              	.LBE635:
3134:src/display.c **** 	  if (shift != SHIFT_N || (State2.smode == SDISP_SHOW && is_intmode())) {
 10811              		.loc 1 3134 4 view .LVU3513
3135:src/display.c **** 	    annunciators();
 10812              		.loc 1 3135 4 view .LVU3514
3135:src/display.c **** 	    annunciators();
 10813              		.loc 1 3135 7 is_stmt 0 view .LVU3515
 10814 0960 BAF1000F 		cmp	r10, #0
 10815 0964 08D1     		bne	.L927
3135:src/display.c **** 	    annunciators();
 10816              		.loc 1 3135 25 discriminator 1 view .LVU3516
 10817 0966 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 10818 0968 012B     		cmp	r3, #1
 10819 096a 8ED1     		bne	.L1117
3135:src/display.c **** 	    annunciators();
 10820              		.loc 1 3135 56 discriminator 2 view .LVU3517
 10821 096c 0F4B     		ldr	r3, .L1167+4
ARM GAS  /tmp/ccdQiHBS.s 			page 312


 10822 096e 1B68     		ldr	r3, [r3]
 10823 0970 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 10824 0974 DF07     		lsls	r7, r3, #31
 10825              	.LVL1243:
3135:src/display.c **** 	    annunciators();
 10826              		.loc 1 3135 56 discriminator 2 view .LVU3518
 10827 0976 88D5     		bpl	.L1117
 10828              	.L927:
3136:src/display.c **** 	  }
 10829              		.loc 1 3136 6 is_stmt 1 view .LVU3519
 10830 0978 FFF7FEFF 		bl	annunciators
 10831              	.LVL1244:
3207:src/display.c ****       nostk:	show_flags();
 10832              		.loc 1 3207 2 view .LVU3520
 10833 097c 85E7     		b	.L1117
 10834              	.LVL1245:
 10835              	.L886:
 10836              	.LBB639:
3083:src/display.c **** 	    else
 10837              		.loc 1 3083 8 view .LVU3521
 10838 097e 0021     		movs	r1, #0
 10839 0980 1048     		ldr	r0, .L1167+28
 10840 0982 FFF7FEFF 		bl	set_digits_string
 10841              	.LVL1246:
3117:src/display.c **** 	} else if (State2.multi) {
 10842              		.loc 1 3117 4 view .LVU3522
 10843 0986 1CA8     		add	r0, sp, #112
 10844 0988 FFF7FEFF 		bl	set_status
 10845              	.LVL1247:
3117:src/display.c **** 	} else if (State2.multi) {
 10846              		.loc 1 3117 4 is_stmt 0 view .LVU3523
 10847              	.LBE639:
3207:src/display.c ****       nostk:	show_flags();
 10848              		.loc 1 3207 2 is_stmt 1 view .LVU3524
 10849 098c FFF7FEFF 		bl	show_stack
 10850              	.LVL1248:
3208:src/display.c **** 	if (!skip) {
 10851              		.loc 1 3208 14 view .LVU3525
 10852 0990 FFF7FEFF 		bl	show_flags
 10853              	.LVL1249:
3209:src/display.c **** 	  if (State2.runmode) {
 10854              		.loc 1 3209 2 view .LVU3526
 10855 0994 E9E6     		b	.L888
 10856              	.LVL1250:
 10857              	.L1155:
 10858              	.LBB640:
 10859              	.LBB622:
2442:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10860              		.loc 1 2442 8 view .LVU3527
 10861 0996 4C21     		movs	r1, #76
 10862 0998 7320     		movs	r0, #115
 10863              	.LVL1251:
2442:src/display.c **** 	      set_dig(SEGS_EXP_BASE + 2*SEGS_PER_EXP_DIGIT, 'L');
 10864              		.loc 1 2442 8 is_stmt 0 view .LVU3528
 10865 099a FFF7FEFF 		bl	set_dig
 10866              	.LVL1252:
2443:src/display.c **** 	    } else {
ARM GAS  /tmp/ccdQiHBS.s 			page 313


 10867              		.loc 1 2443 8 is_stmt 1 view .LVU3529
 10868 099e 4C21     		movs	r1, #76
 10869 09a0 7A20     		movs	r0, #122
 10870 09a2 FFF7FEFF 		bl	set_dig
 10871              	.LVL1253:
 10872 09a6 6DE7     		b	.L910
 10873              	.L1168:
 10874              		.align	2
 10875              	.L1167:
 10876 09a8 00000000 		.word	.LANCHOR0
 10877 09ac 00000000 		.word	main_ram
 10878 09b0 1C000000 		.word	.LC29
 10879 09b4 00000000 		.word	StackBase
 10880 09b8 00000000 		.word	DispMsg
 10881 09bc 00000000 		.word	.LANCHOR1
 10882 09c0 6C000000 		.word	.LC40
 10883 09c4 20000000 		.word	.LC32
 10884 09c8 00000000 		.word	ShowRegister
 10885 09cc 00000000 		.word	DispPlot
 10886              	.LVL1254:
 10887              	.L1147:
2443:src/display.c **** 	    } else {
 10888              		.loc 1 2443 8 is_stmt 0 view .LVU3530
 10889              	.LBE622:
 10890              	.LBE640:
 10891              	.LBB641:
 10892              	.LBB558:
 10893              	.LBB552:
1299:src/display.c **** 	      p++;
 10894              		.loc 1 1299 8 is_stmt 1 view .LVU3531
1300:src/display.c **** 	      if (!double_dot)
 10895              		.loc 1 1300 8 view .LVU3532
1302:src/display.c **** 	    }
 10896              		.loc 1 1302 5 is_stmt 0 view .LVU3533
 10897 09d0 002B     		cmp	r3, #0
1300:src/display.c **** 	      if (!double_dot)
 10898              		.loc 1 1300 9 view .LVU3534
 10899 09d2 0AF1010A 		add	r10, r10, #1
 10900              	.LVL1255:
1301:src/display.c **** 		i = 2*SEGS_PER_DIGIT;
 10901              		.loc 1 1301 8 is_stmt 1 view .LVU3535
1302:src/display.c **** 	    }
 10902              		.loc 1 1302 5 is_stmt 0 view .LVU3536
 10903 09d6 14BF     		ite	ne
 10904 09d8 4FF0090B 		movne	fp, #9
 10905 09dc 4FF0120B 		moveq	fp, #18
 10906 09e0 D1E5     		b	.L966
 10907              	.LVL1256:
 10908              	.L1138:
1302:src/display.c **** 	    }
 10909              		.loc 1 1302 5 view .LVU3537
 10910              	.LBE552:
 10911              	.LBE558:
 10912              	.LBE641:
3130:src/display.c **** 	  skip = 1;
 10913              		.loc 1 3130 4 is_stmt 1 view .LVU3538
 10914              	.LBB642:
ARM GAS  /tmp/ccdQiHBS.s 			page 314


 10915              	.LBI642:
2454:src/display.c **** 	char buf[16];
 10916              		.loc 1 2454 19 view .LVU3539
 10917              	.LBB643:
2455:src/display.c **** 	unsigned short int pc = State2.digval;
 10918              		.loc 1 2455 2 view .LVU3540
2456:src/display.c **** 	unsigned int op = getprog(pc);
 10919              		.loc 1 2456 2 view .LVU3541
2456:src/display.c **** 	unsigned int op = getprog(pc);
 10920              		.loc 1 2456 21 is_stmt 0 view .LVU3542
 10921 09e2 B4F80890 		ldrh	r9, [r4, #8]
 10922              	.LVL1257:
2457:src/display.c **** 	int n = nLIB(pc);
 10923              		.loc 1 2457 2 is_stmt 1 view .LVU3543
2462:src/display.c **** 
 10924              		.loc 1 2462 27 is_stmt 0 view .LVU3544
 10925 09e6 DFF87483 		ldr	r8, .L1169+64
 10926              	.LVL1258:
2457:src/display.c **** 	int n = nLIB(pc);
 10927              		.loc 1 2457 20 view .LVU3545
 10928 09ea 4846     		mov	r0, r9
 10929 09ec FFF7FEFF 		bl	getprog
 10930              	.LVL1259:
2461:src/display.c **** 	set_digits_string(libname[n], 0);
 10931              		.loc 1 2461 2 view .LVU3546
 10932 09f0 13A9     		add	r1, sp, #76
2457:src/display.c **** 	int n = nLIB(pc);
 10933              		.loc 1 2457 20 view .LVU3547
 10934 09f2 0646     		mov	r6, r0
 10935              	.LVL1260:
2458:src/display.c **** 	unsigned short int lblpc;
 10936              		.loc 1 2458 2 is_stmt 1 view .LVU3548
2459:src/display.c **** 
 10937              		.loc 1 2459 2 view .LVU3549
2461:src/display.c **** 	set_digits_string(libname[n], 0);
 10938              		.loc 1 2461 2 view .LVU3550
 10939 09f4 FFF7FEFF 		bl	prt
 10940              	.LVL1261:
2461:src/display.c **** 	set_digits_string(libname[n], 0);
 10941              		.loc 1 2461 2 is_stmt 0 view .LVU3551
 10942 09f8 FFF7FEFF 		bl	set_status
 10943              	.LVL1262:
2462:src/display.c **** 
 10944              		.loc 1 2462 2 is_stmt 1 view .LVU3552
2462:src/display.c **** 
 10945              		.loc 1 2462 27 is_stmt 0 view .LVU3553
 10946 09fc 4FEA9930 		lsr	r0, r9, #14
 10947 0a00 00EB8000 		add	r0, r0, r0, lsl #2
2462:src/display.c **** 
 10948              		.loc 1 2462 2 view .LVU3554
 10949 0a04 4044     		add	r0, r0, r8
 10950 0a06 0021     		movs	r1, #0
 10951 0a08 FFF7FEFF 		bl	set_digits_string
 10952              	.LVL1263:
2464:src/display.c **** 	  lblpc = findmultilbl(op, 0);
 10953              		.loc 1 2464 2 is_stmt 1 view .LVU3555
2464:src/display.c **** 	  lblpc = findmultilbl(op, 0);
ARM GAS  /tmp/ccdQiHBS.s 			page 315


 10954              		.loc 1 2464 5 is_stmt 0 view .LVU3556
 10955 0a0c 16F4704F 		tst	r6, #61440
 10956 0a10 3FF43BAF 		beq	.L1117
2465:src/display.c **** 	  if (lblpc != pc) {
 10957              		.loc 1 2465 4 is_stmt 1 view .LVU3557
2465:src/display.c **** 	  if (lblpc != pc) {
 10958              		.loc 1 2465 12 is_stmt 0 view .LVU3558
 10959 0a14 3046     		mov	r0, r6
 10960 0a16 0021     		movs	r1, #0
 10961 0a18 FFF7FEFF 		bl	findmultilbl
 10962              	.LVL1264:
2465:src/display.c **** 	  if (lblpc != pc) {
 10963              		.loc 1 2465 10 view .LVU3559
 10964 0a1c 86B2     		uxth	r6, r0
 10965              	.LVL1265:
2466:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10966              		.loc 1 2466 4 is_stmt 1 view .LVU3560
2466:src/display.c **** 	    set_digits_string("CALLS", SEGS_PER_DIGIT * 7);
 10967              		.loc 1 2466 7 is_stmt 0 view .LVU3561
 10968 0a1e B145     		cmp	r9, r6
 10969 0a20 3FF433AF 		beq	.L1117
2467:src/display.c **** 	    n = nLIB(lblpc);
 10970              		.loc 1 2467 6 is_stmt 1 view .LVU3562
 10971 0a24 BD48     		ldr	r0, .L1169
 10972 0a26 3F21     		movs	r1, #63
 10973 0a28 FFF7FEFF 		bl	set_digits_string
 10974              	.LVL1266:
2468:src/display.c **** 	    if (n == REGION_RAM)
 10975              		.loc 1 2468 6 view .LVU3563
2469:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10976              		.loc 1 2469 6 view .LVU3564
2469:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10977              		.loc 1 2469 9 is_stmt 0 view .LVU3565
 10978 0a2c B20B     		lsrs	r2, r6, #14
 10979              	.LVL1267:
2469:src/display.c **** 	      set_exp(lblpc, 1, CNULL);
 10980              		.loc 1 2469 9 view .LVU3566
 10981 0a2e 1CD1     		bne	.L917
2470:src/display.c **** 	    else {
 10982              		.loc 1 2470 8 is_stmt 1 view .LVU3567
 10983 0a30 3046     		mov	r0, r6
 10984 0a32 0121     		movs	r1, #1
 10985 0a34 FFF7FEFF 		bl	set_exp
 10986              	.LVL1268:
2470:src/display.c **** 	    else {
 10987              		.loc 1 2470 8 is_stmt 0 view .LVU3568
 10988 0a38 27E7     		b	.L1117
 10989              	.LVL1269:
 10990              	.L880:
2470:src/display.c **** 	    else {
 10991              		.loc 1 2470 8 view .LVU3569
 10992              	.LBE643:
 10993              	.LBE642:
3058:src/display.c **** 	    }
 10994              		.loc 1 3058 3 is_stmt 1 view .LVU3570
3058:src/display.c **** 	    }
 10995              		.loc 1 3058 8 is_stmt 0 view .LVU3571
ARM GAS  /tmp/ccdQiHBS.s 			page 316


 10996 0a3a 2189     		ldrh	r1, [r4, #8]
 10997 0a3c FFF7FEFF 		bl	num_arg_0
 10998              	.LVL1270:
3058:src/display.c **** 	    }
 10999              		.loc 1 3058 8 view .LVU3572
 11000 0a40 76E5     		b	.L879
 11001              	.LVL1271:
 11002              	.L1001:
 11003              	.LBB645:
 11004              	.LBB559:
1272:src/display.c **** #if defined(PRETTY_FRACTION_ENTRY) && defined(FRACTION_ENTRY_OVERFLOW_LEFT)
 11005              		.loc 1 1272 4 view .LVU3573
 11006 0a42 8B46     		mov	fp, r1
 11007 0a44 1AE6     		b	.L961
 11008              	.LVL1272:
 11009              	.L1003:
 11010              	.LBB553:
1292:src/display.c **** 	    if (gotdot <= j) {
 11011              		.loc 1 1292 8 view .LVU3574
 11012 0a46 4FF0090B 		mov	fp, #9
 11013 0a4a 9CE5     		b	.L966
 11014              	.LVL1273:
 11015              	.L930:
1292:src/display.c **** 	    if (gotdot <= j) {
 11016              		.loc 1 1292 8 view .LVU3575
 11017              	.LBE553:
 11018              	.LBE559:
 11019              	.LBE645:
3145:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11020              		.loc 1 3145 11 is_stmt 1 view .LVU3576
3145:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11021              		.loc 1 3145 15 is_stmt 0 view .LVU3577
 11022 0a4c DFF81083 		ldr	r8, .L1169+68
 11023              	.LVL1274:
3145:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11024              		.loc 1 3145 15 view .LVU3578
 11025 0a50 B8F900B0 		ldrsh	fp, [r8]
3145:src/display.c **** 	    set_status_graphic((const unsigned char *)get_reg_n(DispPlot-1));
 11026              		.loc 1 3145 14 view .LVU3579
 11027 0a54 BBF1000F 		cmp	fp, #0
 11028 0a58 43D1     		bne	.L1156
3147:src/display.c **** #if 0
 11029              		.loc 1 3147 11 is_stmt 1 view .LVU3580
3147:src/display.c **** #if 0
 11030              		.loc 1 3147 14 is_stmt 0 view .LVU3581
 11031 0a5a 0807     		lsls	r0, r1, #28
 11032 0a5c 0DD4     		bmi	.L1157
 11033              	.LVL1275:
3207:src/display.c ****       nostk:	show_flags();
 11034              		.loc 1 3207 2 is_stmt 1 view .LVU3582
 11035 0a5e FFF7FEFF 		bl	show_stack
 11036              	.LVL1276:
3208:src/display.c **** 	if (!skip) {
 11037              		.loc 1 3208 14 view .LVU3583
3177:src/display.c **** 	  }
 11038              		.loc 1 3177 12 is_stmt 0 view .LVU3584
 11039 0a62 0125     		movs	r5, #1
ARM GAS  /tmp/ccdQiHBS.s 			page 317


3208:src/display.c **** 	if (!skip) {
 11040              		.loc 1 3208 14 view .LVU3585
 11041 0a64 FFF7FEFF 		bl	show_flags
 11042              	.LVL1277:
3209:src/display.c **** 	  if (State2.runmode) {
 11043              		.loc 1 3209 2 is_stmt 1 view .LVU3586
 11044 0a68 08E4     		b	.L866
 11045              	.LVL1278:
 11046              	.L917:
 11047              	.LBB646:
 11048              	.LBB644:
2472:src/display.c **** 	    }
 11049              		.loc 1 2472 8 view .LVU3587
2472:src/display.c **** 	    }
 11050              		.loc 1 2472 37 is_stmt 0 view .LVU3588
 11051 0a6a 02EB8202 		add	r2, r2, r2, lsl #2
 11052              	.LVL1279:
2472:src/display.c **** 	    }
 11053              		.loc 1 2472 8 view .LVU3589
 11054 0a6e 08EB0200 		add	r0, r8, r2
 11055 0a72 0021     		movs	r1, #0
 11056 0a74 FFF7FEFF 		bl	set_exp_digits_string
 11057              	.LVL1280:
2472:src/display.c **** 	    }
 11058              		.loc 1 2472 8 view .LVU3590
 11059              	.LBE644:
 11060              	.LBE646:
3207:src/display.c ****       nostk:	show_flags();
 11061              		.loc 1 3207 2 is_stmt 1 view .LVU3591
 11062 0a78 07E7     		b	.L1117
 11063              	.LVL1281:
 11064              	.L1157:
3151:src/display.c **** 	    j = State2.alpha_pos;
 11065              		.loc 1 3151 6 view .LVU3592
3151:src/display.c **** 	    j = State2.alpha_pos;
 11066              		.loc 1 3151 22 is_stmt 0 view .LVU3593
 11067 0a7a A94B     		ldr	r3, .L1169+4
 11068 0a7c 1968     		ldr	r1, [r3]
3151:src/display.c **** 	    j = State2.alpha_pos;
 11069              		.loc 1 3151 11 view .LVU3594
 11070 0a7e 1CA8     		add	r0, sp, #112
 11071 0a80 01F5F661 		add	r1, r1, #1968
 11072 0a84 FFF7FEFF 		bl	scopy
 11073              	.LVL1282:
3152:src/display.c **** 	    if (j != 0) {
 11074              		.loc 1 3152 16 view .LVU3595
 11075 0a88 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 11076              	.LVL1283:
3152:src/display.c **** 	    if (j != 0) {
 11077              		.loc 1 3152 6 is_stmt 1 view .LVU3596
3153:src/display.c **** 	      i = slen(buf);
 11078              		.loc 1 3153 6 view .LVU3597
3153:src/display.c **** 	      i = slen(buf);
 11079              		.loc 1 3153 9 is_stmt 0 view .LVU3598
 11080 0a8a 8BB9     		cbnz	r3, .L1158
3170:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11081              		.loc 1 3170 8 is_stmt 1 view .LVU3599
ARM GAS  /tmp/ccdQiHBS.s 			page 318


3170:src/display.c **** 		*bp++ = 021 + shift - SHIFT_F;
 11082              		.loc 1 3170 11 is_stmt 0 view .LVU3600
 11083 0a8c BAF1000F 		cmp	r10, #0
 11084 0a90 04D0     		beq	.L939
3171:src/display.c **** 		*bp++ = '\0';
 11085              		.loc 1 3171 3 is_stmt 1 view .LVU3601
 11086              	.LVL1284:
3171:src/display.c **** 		*bp++ = '\0';
 11087              		.loc 1 3171 23 is_stmt 0 view .LVU3602
 11088 0a92 0AF1100A 		add	r10, r10, #16
3171:src/display.c **** 		*bp++ = '\0';
 11089              		.loc 1 3171 9 view .LVU3603
 11090 0a96 80F800A0 		strb	r10, [r0]
3172:src/display.c **** 	      }
 11091              		.loc 1 3172 3 is_stmt 1 view .LVU3604
 11092              	.LVL1285:
3172:src/display.c **** 	      }
 11093              		.loc 1 3172 9 is_stmt 0 view .LVU3605
 11094 0a9a 4370     		strb	r3, [r0, #1]
 11095              	.LVL1286:
 11096              	.L939:
3174:src/display.c **** 	    }
 11097              		.loc 1 3174 8 is_stmt 1 view .LVU3606
 11098 0a9c 1CA8     		add	r0, sp, #112
 11099 0a9e FFF7FEFF 		bl	set_status_right
 11100              	.LVL1287:
3207:src/display.c ****       nostk:	show_flags();
 11101              		.loc 1 3207 2 view .LVU3607
2974:src/display.c **** 	const enum catalogues cata = (enum catalogues) State2.catalogue;
 11102              		.loc 1 2974 6 is_stmt 0 view .LVU3608
 11103 0aa2 0025     		movs	r5, #0
3207:src/display.c ****       nostk:	show_flags();
 11104              		.loc 1 3207 2 view .LVU3609
 11105 0aa4 FFF7FEFF 		bl	show_stack
 11106              	.LVL1288:
3208:src/display.c **** 	if (!skip) {
 11107              		.loc 1 3208 14 is_stmt 1 view .LVU3610
 11108 0aa8 FFF7FEFF 		bl	show_flags
 11109              	.LVL1289:
3209:src/display.c **** 	  if (State2.runmode) {
 11110              		.loc 1 3209 2 view .LVU3611
 11111 0aac FFF7E6BB 		b	.L866
 11112              	.LVL1290:
 11113              	.L1158:
3154:src/display.c **** 	      //				
 11114              		.loc 1 3154 8 view .LVU3612
3154:src/display.c **** 	      //				
 11115              		.loc 1 3154 12 is_stmt 0 view .LVU3613
 11116 0ab0 1CA8     		add	r0, sp, #112
 11117              	.LVL1291:
3154:src/display.c **** 	      //				
 11118              		.loc 1 3154 12 view .LVU3614
 11119 0ab2 0093     		str	r3, [sp]
 11120 0ab4 FFF7FEFF 		bl	slen
 11121              	.LVL1292:
3156:src/display.c **** #ifdef BIGGER_DISPLAY
 11122              		.loc 1 3156 8 is_stmt 1 view .LVU3615
ARM GAS  /tmp/ccdQiHBS.s 			page 319


3160:src/display.c **** #endif
 11123              		.loc 1 3160 8 view .LVU3616
3156:src/display.c **** #ifdef BIGGER_DISPLAY
 11124              		.loc 1 3156 10 is_stmt 0 view .LVU3617
 11125 0ab8 009B     		ldr	r3, [sp]
 11126 0aba 03EB4303 		add	r3, r3, r3, lsl #1
3160:src/display.c **** #endif
 11127              		.loc 1 3160 15 view .LVU3618
 11128 0abe A0EB4300 		sub	r0, r0, r3, lsl #1
 11129              	.LVL1293:
3160:src/display.c **** #endif
 11130              		.loc 1 3160 11 view .LVU3619
 11131 0ac2 0B28     		cmp	r0, #11
 11132 0ac4 7FF7F6AA 		ble	.L869
3163:src/display.c **** 		set_status_right(buf);
 11133              		.loc 1 3163 3 is_stmt 1 view .LVU3620
3163:src/display.c **** 		set_status_right(buf);
 11134              		.loc 1 3163 18 is_stmt 0 view .LVU3621
 11135 0ac8 26AB     		add	r3, sp, #152
 11136 0aca 0344     		add	r3, r3, r0
3164:src/display.c **** 		}
 11137              		.loc 1 3164 3 view .LVU3622
 11138 0acc 1CA8     		add	r0, sp, #112
3163:src/display.c **** 		set_status_right(buf);
 11139              		.loc 1 3163 18 view .LVU3623
 11140 0ace 03F828BC 		strb	fp, [r3, #-40]
3164:src/display.c **** 		}
 11141              		.loc 1 3164 3 is_stmt 1 view .LVU3624
 11142 0ad2 FFF7FEFF 		bl	set_status_right
 11143              	.LVL1294:
3207:src/display.c ****       nostk:	show_flags();
 11144              		.loc 1 3207 2 view .LVU3625
 11145 0ad6 FFF7FEFF 		bl	show_stack
 11146              	.LVL1295:
3208:src/display.c **** 	if (!skip) {
 11147              		.loc 1 3208 14 view .LVU3626
 11148 0ada FFF7FEFF 		bl	show_flags
 11149              	.LVL1296:
3209:src/display.c **** 	  if (State2.runmode) {
 11150              		.loc 1 3209 2 view .LVU3627
 11151 0ade FFF7CDBB 		b	.L866
 11152              	.LVL1297:
 11153              	.L1156:
3146:src/display.c **** 	  } else if (State2.alphas) {
 11154              		.loc 1 3146 6 view .LVU3628
3146:src/display.c **** 	  } else if (State2.alphas) {
 11155              		.loc 1 3146 48 is_stmt 0 view .LVU3629
 11156 0ae2 0BF1FF30 		add	r0, fp, #-1
 11157 0ae6 0293     		str	r3, [sp, #8]
 11158 0ae8 FFF7FEFF 		bl	get_reg_n
 11159              	.LVL1298:
 11160              	.LBB647:
 11161              	.LBI647:
3326:src/display.c **** 	int glen = *graphic++;
 11162              		.loc 1 3326 19 is_stmt 1 view .LVU3630
 11163              	.LBB648:
3327:src/display.c **** 	int i, j;
ARM GAS  /tmp/ccdQiHBS.s 			page 320


 11164              		.loc 1 3327 2 view .LVU3631
3327:src/display.c **** 	int i, j;
 11165              		.loc 1 3327 6 is_stmt 0 view .LVU3632
 11166 0aec 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 11167              	.LVL1299:
3328:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11168              		.loc 1 3328 2 is_stmt 1 view .LVU3633
3334:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11169              		.loc 1 3334 2 view .LVU3634
3334:src/display.c **** 	if (glen > BITMAP_WIDTH)	glen = BITMAP_WIDTH;
 11170              		.loc 1 3334 5 is_stmt 0 view .LVU3635
 11171 0aee 42B3     		cbz	r2, .L932
3335:src/display.c **** 
 11172              		.loc 1 3335 2 is_stmt 1 view .LVU3636
 11173              	.LVL1300:
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11174              		.loc 1 3337 2 view .LVU3637
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11175              		.loc 1 3337 12 view .LVU3638
 11176 0af0 431C     		adds	r3, r0, #1
 11177 0af2 0193     		str	r3, [sp, #4]
 11178 0af4 2B2A     		cmp	r2, #43
 11179 0af6 D4BF     		ite	le
 11180 0af8 9B18     		addle	r3, r3, r2
 11181 0afa 2B33     		addgt	r3, r3, #43
 11182 0afc 0093     		str	r3, [sp]
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11183              		.loc 1 3337 8 is_stmt 0 view .LVU3639
 11184 0afe 029B     		ldr	r3, [sp, #8]
 11185 0b00 CDE90256 		strd	r5, r6, [sp, #8]
 11186 0b04 9B46     		mov	fp, r3
 11187              	.LVL1301:
 11188              	.L933:
3338:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11189              		.loc 1 3338 14 is_stmt 1 view .LVU3640
 11190 0b06 0123     		movs	r3, #1
 11191 0b08 019E     		ldr	r6, [sp, #4]
 11192 0b0a 03FA0BFA 		lsl	r10, r3, fp
 11193 0b0e 0BF19405 		add	r5, fp, #148
 11194 0b12 06E0     		b	.L936
 11195              	.LVL1302:
 11196              	.L1160:
 11197              	.LBB649:
 11198              	.LBB650:
 277:src/display.c ****   else	clr_dot(n);
 11199              		.loc 1 277 11 is_stmt 0 view .LVU3641
 11200 0b14 FFF7FEFF 		bl	set_dot
 11201              	.LVL1303:
 11202              	.L935:
 277:src/display.c ****   else	clr_dot(n);
 11203              		.loc 1 277 11 view .LVU3642
 11204              	.LBE650:
 11205              	.LBE649:
3338:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11206              		.loc 1 3338 23 is_stmt 1 view .LVU3643
3338:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11207              		.loc 1 3338 14 view .LVU3644
ARM GAS  /tmp/ccdQiHBS.s 			page 321


3338:src/display.c **** #if !defined(CONSOLE) && !defined(DM42)
 11208              		.loc 1 3338 4 is_stmt 0 view .LVU3645
 11209 0b18 009B     		ldr	r3, [sp]
 11210 0b1a B342     		cmp	r3, r6
 11211 0b1c 05F10605 		add	r5, r5, #6
 11212 0b20 08D0     		beq	.L1159
 11213              	.LVL1304:
 11214              	.L936:
3343:src/display.c **** #endif
 11215              		.loc 1 3343 6 is_stmt 1 view .LVU3646
 11216              	.LBB653:
 11217              	.LBI649:
 276:src/display.c ****   if (on)	set_dot(n);
 11218              		.loc 1 276 6 view .LVU3647
 11219              	.LBB651:
 277:src/display.c ****   else	clr_dot(n);
 11220              		.loc 1 277 3 view .LVU3648
 277:src/display.c ****   else	clr_dot(n);
 11221              		.loc 1 277 11 view .LVU3649
 278:src/display.c **** }
 11222              		.loc 1 278 8 view .LVU3650
 11223              	.LBE651:
 11224              	.LBE653:
3343:src/display.c **** #endif
 11225              		.loc 1 3343 37 is_stmt 0 view .LVU3651
 11226 0b22 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 11227              	.LVL1305:
 11228              	.LBB654:
 11229              	.LBB652:
 277:src/display.c ****   else	clr_dot(n);
 11230              		.loc 1 277 6 view .LVU3652
 11231 0b26 13EA0A0F 		tst	r3, r10
 277:src/display.c ****   else	clr_dot(n);
 11232              		.loc 1 277 11 view .LVU3653
 11233 0b2a 2846     		mov	r0, r5
 277:src/display.c ****   else	clr_dot(n);
 11234              		.loc 1 277 6 view .LVU3654
 11235 0b2c F2D1     		bne	.L1160
 278:src/display.c **** }
 11236              		.loc 1 278 8 view .LVU3655
 11237 0b2e FFF7FEFF 		bl	clr_dot
 11238              	.LVL1306:
 11239 0b32 F1E7     		b	.L935
 11240              	.LVL1307:
 11241              	.L1159:
 278:src/display.c **** }
 11242              		.loc 1 278 8 view .LVU3656
 11243              	.LBE652:
 11244              	.LBE654:
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11245              		.loc 1 3337 17 is_stmt 1 view .LVU3657
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11246              		.loc 1 3337 18 is_stmt 0 view .LVU3658
 11247 0b34 0BF1010B 		add	fp, fp, #1
 11248              	.LVL1308:
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11249              		.loc 1 3337 12 is_stmt 1 view .LVU3659
ARM GAS  /tmp/ccdQiHBS.s 			page 322


3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11250              		.loc 1 3337 2 is_stmt 0 view .LVU3660
 11251 0b38 BBF1060F 		cmp	fp, #6
 11252 0b3c E3D1     		bne	.L933
 11253 0b3e DDE90256 		ldrd	r5, r6, [sp, #8]
 11254              	.LVL1309:
 11255              	.L932:
3337:src/display.c **** 	  for (j=1; j<=glen; j++) {
 11256              		.loc 1 3337 2 view .LVU3661
 11257              	.LBE648:
 11258              	.LBE647:
3207:src/display.c ****       nostk:	show_flags();
 11259              		.loc 1 3207 2 is_stmt 1 view .LVU3662
 11260 0b42 FFF7FEFF 		bl	show_stack
 11261              	.LVL1310:
3208:src/display.c **** 	if (!skip) {
 11262              		.loc 1 3208 14 view .LVU3663
 11263 0b46 FFF7FEFF 		bl	show_flags
 11264              	.LVL1311:
3209:src/display.c **** 	  if (State2.runmode) {
 11265              		.loc 1 3209 2 view .LVU3664
 11266 0b4a FFF797BB 		b	.L866
 11267              	.LVL1312:
 11268              	.L920:
 11269              	.LBB655:
 11270              	.LBB637:
2496:src/display.c **** #ifdef INCLUDE_FLASH_RECALL
 11271              		.loc 1 2496 4 view .LVU3665
 11272 0b4e 13AE     		add	r6, sp, #76
 11273 0b50 1022     		movs	r2, #16
 11274 0b52 3046     		mov	r0, r6
 11275 0b54 FFF7FEFF 		bl	xset
 11276              	.LVL1313:
2500:src/display.c **** #endif
 11277              		.loc 1 2500 4 view .LVU3666
2500:src/display.c **** #endif
 11278              		.loc 1 2500 9 is_stmt 0 view .LVU3667
 11279 0b58 7249     		ldr	r1, .L1169+8
 11280 0b5a 3046     		mov	r0, r6
 11281 0b5c FFF7FEFF 		bl	scopy_spc
 11282              	.LVL1314:
2502:src/display.c **** 	    *bp++ = '.';
 11283              		.loc 1 2502 8 view .LVU3668
 11284 0b60 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 11285              	.LVL1315:
2502:src/display.c **** 	    *bp++ = '.';
 11286              		.loc 1 2502 4 is_stmt 1 view .LVU3669
2502:src/display.c **** 	    *bp++ = '.';
 11287              		.loc 1 2502 7 is_stmt 0 view .LVU3670
 11288 0b62 DB07     		lsls	r3, r3, #31
 11289 0b64 21D5     		bpl	.L922
2503:src/display.c **** 	    if (n >= 100) {
 11290              		.loc 1 2503 6 is_stmt 1 view .LVU3671
 11291              	.LVL1316:
2503:src/display.c **** 	    if (n >= 100) {
 11292              		.loc 1 2503 12 is_stmt 0 view .LVU3672
 11293 0b66 2E23     		movs	r3, #46
ARM GAS  /tmp/ccdQiHBS.s 			page 323


2504:src/display.c **** 	      *bp++ = '1';
 11294              		.loc 1 2504 9 view .LVU3673
 11295 0b68 B8F1630F 		cmp	r8, #99
2503:src/display.c **** 	    if (n >= 100) {
 11296              		.loc 1 2503 12 view .LVU3674
 11297 0b6c 0370     		strb	r3, [r0]
2504:src/display.c **** 	      *bp++ = '1';
 11298              		.loc 1 2504 6 is_stmt 1 view .LVU3675
2504:src/display.c **** 	      *bp++ = '1';
 11299              		.loc 1 2504 9 is_stmt 0 view .LVU3676
 11300 0b6e 17DC     		bgt	.L923
2503:src/display.c **** 	    if (n >= 100) {
 11301              		.loc 1 2503 9 view .LVU3677
 11302 0b70 0130     		adds	r0, r0, #1
 11303              	.LVL1317:
 11304              	.L924:
2510:src/display.c **** 	  else
 11305              		.loc 1 2510 6 is_stmt 1 view .LVU3678
2510:src/display.c **** 	  else
 11306              		.loc 1 2510 11 is_stmt 0 view .LVU3679
 11307 0b72 4146     		mov	r1, r8
 11308 0b74 0222     		movs	r2, #2
 11309 0b76 FFF7FEFF 		bl	num_arg_0
 11310              	.LVL1318:
 11311              	.L926:
2513:src/display.c **** 	}
 11312              		.loc 1 2513 4 is_stmt 1 view .LVU3680
 11313 0b7a 3046     		mov	r0, r6
 11314 0b7c FFF7FEFF 		bl	set_status
 11315              	.LVL1319:
 11316 0b80 EAE6     		b	.L921
 11317              	.LVL1320:
 11318              	.L1151:
2513:src/display.c **** 	}
 11319              		.loc 1 2513 4 is_stmt 0 view .LVU3681
 11320              	.LBE637:
 11321              	.LBE655:
 11322              	.LBB656:
 11323              	.LBB623:
 11324              	.LBB613:
2400:src/display.c **** 	    end = regK_idx;
 11325              		.loc 1 2400 6 is_stmt 1 view .LVU3682
2401:src/display.c **** 	    start = 3;
 11326              		.loc 1 2401 6 view .LVU3683
2402:src/display.c **** 	    group = 4;
 11327              		.loc 1 2402 6 view .LVU3684
2403:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11328              		.loc 1 2403 6 view .LVU3685
2404:src/display.c **** 	  }
 11329              		.loc 1 2404 6 view .LVU3686
 11330 0b82 6948     		ldr	r0, .L1169+12
 11331 0b84 FFF7FEFF 		bl	set_status
 11332              	.LVL1321:
 11333 0b88 4FF02408 		mov	r8, #36
 11334              	.LVL1322:
2404:src/display.c **** 	  }
 11335              		.loc 1 2404 6 is_stmt 0 view .LVU3687
ARM GAS  /tmp/ccdQiHBS.s 			page 324


 11336 0b8c 2220     		movs	r0, #34
 11337 0b8e 4FF00709 		mov	r9, #7
 11338              	.LVL1323:
2402:src/display.c **** 	    group = 4;
 11339              		.loc 1 2402 12 view .LVU3688
 11340 0b92 4FF0030B 		mov	fp, #3
2403:src/display.c **** 	    set_status("XYZT\006A:D\006LIJK");
 11341              		.loc 1 2403 12 view .LVU3689
 11342 0b96 0427     		movs	r7, #4
2401:src/display.c **** 	    start = 3;
 11343              		.loc 1 2401 10 view .LVU3690
 11344 0b98 4FF06F0A 		mov	r10, #111
2400:src/display.c **** 	    end = regK_idx;
 11345              		.loc 1 2400 11 view .LVU3691
 11346 0b9c 6426     		movs	r6, #100
 11347              	.LVL1324:
2400:src/display.c **** 	    end = regK_idx;
 11348              		.loc 1 2400 11 view .LVU3692
 11349 0b9e 2AE6     		b	.L903
 11350              	.LVL1325:
 11351              	.L923:
2400:src/display.c **** 	    end = regK_idx;
 11352              		.loc 1 2400 11 view .LVU3693
 11353              	.LBE613:
 11354              	.LBE623:
 11355              	.LBE656:
 11356              	.LBB657:
 11357              	.LBB638:
2505:src/display.c **** 	      n -= 100;
 11358              		.loc 1 2505 8 is_stmt 1 view .LVU3694
2505:src/display.c **** 	      n -= 100;
 11359              		.loc 1 2505 14 is_stmt 0 view .LVU3695
 11360 0ba0 3123     		movs	r3, #49
 11361 0ba2 4370     		strb	r3, [r0, #1]
2506:src/display.c **** 	    }
 11362              		.loc 1 2506 8 is_stmt 1 view .LVU3696
2506:src/display.c **** 	    }
 11363              		.loc 1 2506 10 is_stmt 0 view .LVU3697
 11364 0ba4 A8F16408 		sub	r8, r8, #100
 11365              	.LVL1326:
2505:src/display.c **** 	      n -= 100;
 11366              		.loc 1 2505 11 view .LVU3698
 11367 0ba8 0230     		adds	r0, r0, #2
 11368              	.LVL1327:
 11369              	.L922:
2509:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11370              		.loc 1 2509 4 is_stmt 1 view .LVU3699
2509:src/display.c **** 	    bp = num_arg_0(bp, n, 2);
 11371              		.loc 1 2509 7 is_stmt 0 view .LVU3700
 11372 0baa B8F1630F 		cmp	r8, #99
 11373 0bae E0DD     		ble	.L924
2512:src/display.c **** 	  set_status(buf);
 11374              		.loc 1 2512 6 is_stmt 1 view .LVU3701
 11375              	.LVL1328:
2512:src/display.c **** 	  set_status(buf);
 11376              		.loc 1 2512 22 is_stmt 0 view .LVU3702
 11377 0bb0 5E4B     		ldr	r3, .L1169+16
ARM GAS  /tmp/ccdQiHBS.s 			page 325


 11378 0bb2 9844     		add	r8, r8, r3
 11379              	.LVL1329:
2512:src/display.c **** 	  set_status(buf);
 11380              		.loc 1 2512 12 view .LVU3703
 11381 0bb4 18F8643C 		ldrb	r3, [r8, #-100]	@ zero_extendqisi2
 11382 0bb8 0370     		strb	r3, [r0]
 11383 0bba DEE7     		b	.L926
 11384              	.LVL1330:
 11385              	.L1150:
2512:src/display.c **** 	  set_status(buf);
 11386              		.loc 1 2512 12 view .LVU3704
 11387              	.LBE638:
 11388              	.LBE657:
 11389              	.LBB658:
 11390              	.LBB624:
 11391              	.LBB614:
2390:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11392              		.loc 1 2390 6 is_stmt 1 view .LVU3705
2390:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11393              		.loc 1 2390 11 is_stmt 0 view .LVU3706
 11394 0bbc 4FF00A09 		mov	r9, #10
 11395              	.LVL1331:
2390:src/display.c **** 	    end = base >= 70 ? 99 : base + 29;
 11396              		.loc 1 2390 11 view .LVU3707
 11397 0bc0 09FB06F6 		mul	r6, r9, r6
 11398              	.LVL1332:
2391:src/display.c **** 	    p = scopy(buf, "FL ");
 11399              		.loc 1 2391 6 is_stmt 1 view .LVU3708
2391:src/display.c **** 	    p = scopy(buf, "FL ");
 11400              		.loc 1 2391 28 is_stmt 0 view .LVU3709
 11401 0bc4 462E     		cmp	r6, #70
2392:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11402              		.loc 1 2392 10 view .LVU3710
 11403 0bc6 5A49     		ldr	r1, .L1169+20
 11404              	.LVL1333:
2392:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11405              		.loc 1 2392 10 view .LVU3711
 11406 0bc8 13A8     		add	r0, sp, #76
 11407              	.LVL1334:
2391:src/display.c **** 	    p = scopy(buf, "FL ");
 11408              		.loc 1 2391 28 view .LVU3712
 11409 0bca B246     		mov	r10, r6
 11410 0bcc A8BF     		it	ge
 11411 0bce 4FF0460A 		movge	r10, #70
2392:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11412              		.loc 1 2392 10 view .LVU3713
 11413 0bd2 FFF7FEFF 		bl	scopy
 11414              	.LVL1335:
2393:src/display.c **** 	    *p++ = '-';
 11415              		.loc 1 2393 10 view .LVU3714
 11416 0bd6 3146     		mov	r1, r6
 11417 0bd8 0222     		movs	r2, #2
 11418 0bda FFF7FEFF 		bl	num_arg_0
 11419              	.LVL1336:
2391:src/display.c **** 	    p = scopy(buf, "FL ");
 11420              		.loc 1 2391 10 view .LVU3715
 11421 0bde 0AF11D0A 		add	r10, r10, #29
ARM GAS  /tmp/ccdQiHBS.s 			page 326


 11422              	.LVL1337:
2392:src/display.c **** 	    p = num_arg_0(p, base, 2);
 11423              		.loc 1 2392 6 is_stmt 1 view .LVU3716
2393:src/display.c **** 	    *p++ = '-';
 11424              		.loc 1 2393 6 view .LVU3717
2394:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11425              		.loc 1 2394 6 view .LVU3718
2394:src/display.c **** 	    p = num_arg_0(p, end, 2);
 11426              		.loc 1 2394 11 is_stmt 0 view .LVU3719
 11427 0be2 2D23     		movs	r3, #45
 11428 0be4 00F8013B 		strb	r3, [r0], #1
 11429              	.LVL1338:
2395:src/display.c **** 	    *p = '\0';
 11430              		.loc 1 2395 6 is_stmt 1 view .LVU3720
2395:src/display.c **** 	    *p = '\0';
 11431              		.loc 1 2395 10 is_stmt 0 view .LVU3721
 11432 0be8 5146     		mov	r1, r10
 11433 0bea 0222     		movs	r2, #2
 11434 0bec FFF7FEFF 		bl	num_arg_0
 11435              	.LVL1339:
2395:src/display.c **** 	    *p = '\0';
 11436              		.loc 1 2395 10 view .LVU3722
 11437 0bf0 0246     		mov	r2, r0
 11438              	.LVL1340:
2396:src/display.c **** 	    set_status(buf);
 11439              		.loc 1 2396 6 is_stmt 1 view .LVU3723
2396:src/display.c **** 	    set_status(buf);
 11440              		.loc 1 2396 9 is_stmt 0 view .LVU3724
 11441 0bf2 4FF0000B 		mov	fp, #0
2397:src/display.c **** 	  }
 11442              		.loc 1 2397 6 view .LVU3725
 11443 0bf6 13A8     		add	r0, sp, #76
 11444              	.LVL1341:
2396:src/display.c **** 	    set_status(buf);
 11445              		.loc 1 2396 9 view .LVU3726
 11446 0bf8 82F800B0 		strb	fp, [r2]
2397:src/display.c **** 	  }
 11447              		.loc 1 2397 6 is_stmt 1 view .LVU3727
 11448 0bfc FFF7FEFF 		bl	set_status
 11449              	.LVL1342:
2386:src/display.c **** 	  int start = 0;
 11450              		.loc 1 2386 8 is_stmt 0 view .LVU3728
 11451 0c00 4F46     		mov	r7, r9
 11452 0c02 0720     		movs	r0, #7
 11453 0c04 4FF00908 		mov	r8, #9
 11454              	.LVL1343:
2386:src/display.c **** 	  int start = 0;
 11455              		.loc 1 2386 8 view .LVU3729
 11456 0c08 F5E5     		b	.L903
 11457              	.LVL1344:
 11458              	.L1149:
2386:src/display.c **** 	  int start = 0;
 11459              		.loc 1 2386 8 view .LVU3730
 11460              	.LBE614:
2369:src/display.c **** 	  if (SizeStatRegs)
 11461              		.loc 1 2369 4 is_stmt 1 view .LVU3731
2369:src/display.c **** 	  if (SizeStatRegs)
ARM GAS  /tmp/ccdQiHBS.s 			page 327


 11462              		.loc 1 2369 8 is_stmt 0 view .LVU3732
 11463 0c0a 13AE     		add	r6, sp, #76
 11464              	.LVL1345:
2369:src/display.c **** 	  if (SizeStatRegs)
 11465              		.loc 1 2369 8 view .LVU3733
 11466 0c0c 4949     		ldr	r1, .L1169+24
 11467              	.LVL1346:
2369:src/display.c **** 	  if (SizeStatRegs)
 11468              		.loc 1 2369 8 view .LVU3734
 11469 0c0e 3046     		mov	r0, r6
 11470 0c10 FFF7FEFF 		bl	scopy
 11471              	.LVL1347:
2370:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11472              		.loc 1 2370 8 view .LVU3735
 11473 0c14 484A     		ldr	r2, .L1169+28
2370:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11474              		.loc 1 2370 7 view .LVU3736
 11475 0c16 1268     		ldr	r2, [r2]
2369:src/display.c **** 	  if (SizeStatRegs)
 11476              		.loc 1 2369 8 view .LVU3737
 11477 0c18 0346     		mov	r3, r0
 11478              	.LVL1348:
2370:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11479              		.loc 1 2370 4 is_stmt 1 view .LVU3738
2370:src/display.c **** 	    p = scopy(p, " \221\006\006+");
 11480              		.loc 1 2370 7 is_stmt 0 view .LVU3739
 11481 0c1a 002A     		cmp	r2, #0
 11482 0c1c 6CD1     		bne	.L1161
 11483              	.L900:
2372:src/display.c **** 	  set_status(buf);
 11484              		.loc 1 2372 4 is_stmt 1 view .LVU3740
2372:src/display.c **** 	  set_status(buf);
 11485              		.loc 1 2372 7 is_stmt 0 view .LVU3741
 11486 0c1e 0022     		movs	r2, #0
 11487 0c20 1A70     		strb	r2, [r3]
2373:src/display.c **** 
 11488              		.loc 1 2373 4 is_stmt 1 view .LVU3742
 11489 0c22 3046     		mov	r0, r6
 11490              	.LVL1349:
2373:src/display.c **** 
 11491              		.loc 1 2373 4 is_stmt 0 view .LVU3743
 11492 0c24 FFF7FEFF 		bl	set_status
 11493              	.LVL1350:
2376:src/display.c **** 	  if (LocalRegs < 0) {
 11494              		.loc 1 2376 4 is_stmt 1 view .LVU3744
2376:src/display.c **** 	  if (LocalRegs < 0) {
 11495              		.loc 1 2376 8 is_stmt 0 view .LVU3745
 11496 0c28 FFF7FEFF 		bl	global_regs
 11497              	.LVL1351:
2377:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11498              		.loc 1 2377 8 view .LVU3746
 11499 0c2c 3C4F     		ldr	r7, .L1169+4
2376:src/display.c **** 	  if (LocalRegs < 0) {
 11500              		.loc 1 2376 8 view .LVU3747
 11501 0c2e 0146     		mov	r1, r0
 11502 0c30 3046     		mov	r0, r6
 11503 0c32 FFF7FEFF 		bl	num_arg
ARM GAS  /tmp/ccdQiHBS.s 			page 328


 11504              	.LVL1352:
2377:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11505              		.loc 1 2377 8 view .LVU3748
 11506 0c36 3A68     		ldr	r2, [r7]
 11507 0c38 B2F8DE27 		ldrh	r2, [r2, #2014]
2377:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11508              		.loc 1 2377 7 view .LVU3749
 11509 0c3c 1204     		lsls	r2, r2, #16
2376:src/display.c **** 	  if (LocalRegs < 0) {
 11510              		.loc 1 2376 8 view .LVU3750
 11511 0c3e 0346     		mov	r3, r0
 11512              	.LVL1353:
2377:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11513              		.loc 1 2377 4 is_stmt 1 view .LVU3751
2377:src/display.c **** 	    p = scopy(p, " , Loc. ");
 11514              		.loc 1 2377 7 is_stmt 0 view .LVU3752
 11515 0c40 4ED4     		bmi	.L1162
 11516              	.LVL1354:
 11517              	.L901:
2381:src/display.c **** 	  set_digits_string(buf, 0);
 11518              		.loc 1 2381 4 is_stmt 1 view .LVU3753
2381:src/display.c **** 	  set_digits_string(buf, 0);
 11519              		.loc 1 2381 7 is_stmt 0 view .LVU3754
 11520 0c42 0021     		movs	r1, #0
2382:src/display.c **** 	} else {
 11521              		.loc 1 2382 4 view .LVU3755
 11522 0c44 3046     		mov	r0, r6
 11523              	.LVL1355:
2381:src/display.c **** 	  set_digits_string(buf, 0);
 11524              		.loc 1 2381 7 view .LVU3756
 11525 0c46 1970     		strb	r1, [r3]
2382:src/display.c **** 	} else {
 11526              		.loc 1 2382 4 is_stmt 1 view .LVU3757
 11527 0c48 FFF7FEFF 		bl	set_digits_string
 11528              	.LVL1356:
2382:src/display.c **** 	} else {
 11529              		.loc 1 2382 4 is_stmt 0 view .LVU3758
 11530 0c4c FBE5     		b	.L898
 11531              	.LVL1357:
 11532              	.L942:
2382:src/display.c **** 	} else {
 11533              		.loc 1 2382 4 view .LVU3759
 11534              	.LBE624:
 11535              	.LBE658:
3204:src/display.c **** 	  goto nostk;
 11536              		.loc 1 3204 8 is_stmt 1 view .LVU3760
3208:src/display.c **** 	if (!skip) {
 11537              		.loc 1 3208 14 view .LVU3761
 11538 0c4e FFF7FEFF 		bl	show_flags
 11539              	.LVL1358:
3209:src/display.c **** 	  if (State2.runmode) {
 11540              		.loc 1 3209 2 view .LVU3762
 11541 0c52 3A4E     		ldr	r6, .L1169+32
 11542 0c54 DFF80881 		ldr	r8, .L1169+68
 11543              	.LVL1359:
3204:src/display.c **** 	  goto nostk;
 11544              		.loc 1 3204 14 is_stmt 0 view .LVU3763
ARM GAS  /tmp/ccdQiHBS.s 			page 329


 11545 0c58 0125     		movs	r5, #1
 11546 0c5a FFF70FBB 		b	.L866
 11547              	.LVL1360:
 11548              	.L940:
3187:src/display.c **** 	  set_dot(STO_annun);
 11549              		.loc 1 3187 6 is_stmt 1 view .LVU3764
 11550 0c5e 3848     		ldr	r0, .L1169+36
 11551              	.LVL1361:
3187:src/display.c **** 	  set_dot(STO_annun);
 11552              		.loc 1 3187 6 is_stmt 0 view .LVU3765
 11553 0c60 FFF7FEFF 		bl	set_status
 11554              	.LVL1362:
3187:src/display.c **** 	  set_dot(STO_annun);
 11555              		.loc 1 3187 6 view .LVU3766
 11556 0c64 54E6     		b	.L941
 11557              	.LVL1363:
 11558              	.L1148:
 11559              	.LBB659:
 11560              	.LBB625:
2360:src/display.c **** 	  p = num_arg(buf, free_mem());
 11561              		.loc 1 2360 4 is_stmt 1 view .LVU3767
 11562 0c66 3748     		ldr	r0, .L1169+40
 11563 0c68 2D4F     		ldr	r7, .L1169+4
 11564 0c6a FFF7FEFF 		bl	set_status
 11565              	.LVL1364:
2361:src/display.c **** 	  p = scopy(p, " , FL. ");
 11566              		.loc 1 2361 4 view .LVU3768
2361:src/display.c **** 	  p = scopy(p, " , FL. ");
 11567              		.loc 1 2361 21 is_stmt 0 view .LVU3769
 11568 0c6e FFF7FEFF 		bl	free_mem
 11569              	.LVL1365:
 11570 0c72 0146     		mov	r1, r0
2361:src/display.c **** 	  p = scopy(p, " , FL. ");
 11571              		.loc 1 2361 8 view .LVU3770
 11572 0c74 13A8     		add	r0, sp, #76
 11573              	.LVL1366:
2361:src/display.c **** 	  p = scopy(p, " , FL. ");
 11574              		.loc 1 2361 8 view .LVU3771
 11575 0c76 FFF7FEFF 		bl	num_arg
 11576              	.LVL1367:
2362:src/display.c **** 	  p = num_arg(p, free_flash());
 11577              		.loc 1 2362 4 is_stmt 1 view .LVU3772
2362:src/display.c **** 	  p = num_arg(p, free_flash());
 11578              		.loc 1 2362 8 is_stmt 0 view .LVU3773
 11579 0c7a 3349     		ldr	r1, .L1169+44
 11580 0c7c FFF7FEFF 		bl	scopy
 11581              	.LVL1368:
2362:src/display.c **** 	  p = num_arg(p, free_flash());
 11582              		.loc 1 2362 8 view .LVU3774
 11583 0c80 0646     		mov	r6, r0
 11584              	.LVL1369:
2363:src/display.c **** 	  *p = '\0';
 11585              		.loc 1 2363 4 is_stmt 1 view .LVU3775
2363:src/display.c **** 	  *p = '\0';
 11586              		.loc 1 2363 19 is_stmt 0 view .LVU3776
 11587 0c82 FFF7FEFF 		bl	free_flash
 11588              	.LVL1370:
ARM GAS  /tmp/ccdQiHBS.s 			page 330


2363:src/display.c **** 	  *p = '\0';
 11589              		.loc 1 2363 19 view .LVU3777
 11590 0c86 0146     		mov	r1, r0
2363:src/display.c **** 	  *p = '\0';
 11591              		.loc 1 2363 8 view .LVU3778
 11592 0c88 3046     		mov	r0, r6
 11593 0c8a FFF7FEFF 		bl	num_arg
 11594              	.LVL1371:
 11595 0c8e 0346     		mov	r3, r0
 11596              	.LVL1372:
2364:src/display.c **** 	  set_digits_string(buf, 0);
 11597              		.loc 1 2364 4 is_stmt 1 view .LVU3779
2364:src/display.c **** 	  set_digits_string(buf, 0);
 11598              		.loc 1 2364 7 is_stmt 0 view .LVU3780
 11599 0c90 0021     		movs	r1, #0
2365:src/display.c **** 	}
 11600              		.loc 1 2365 4 view .LVU3781
 11601 0c92 13A8     		add	r0, sp, #76
 11602              	.LVL1373:
2364:src/display.c **** 	  set_digits_string(buf, 0);
 11603              		.loc 1 2364 7 view .LVU3782
 11604 0c94 1970     		strb	r1, [r3]
2365:src/display.c **** 	}
 11605              		.loc 1 2365 4 is_stmt 1 view .LVU3783
 11606 0c96 FFF7FEFF 		bl	set_digits_string
 11607              	.LVL1374:
2365:src/display.c **** 	}
 11608              		.loc 1 2365 4 is_stmt 0 view .LVU3784
 11609 0c9a D4E5     		b	.L898
 11610              	.LVL1375:
 11611              	.L1146:
2365:src/display.c **** 	}
 11612              		.loc 1 2365 4 view .LVU3785
 11613              	.LBE625:
 11614              	.LBE659:
 11615              	.LBB660:
 11616              	.LBB575:
3089:src/display.c **** 	      decimal64 z;
 11617              		.loc 1 3089 8 is_stmt 1 view .LVU3786
3090:src/display.c **** 
 11618              		.loc 1 3090 8 view .LVU3787
3092:src/display.c **** 	      if (opKIND(op) == KIND_MON) {
 11619              		.loc 1 3092 8 view .LVU3788
 11620 0c9c 0AA8     		add	r0, sp, #40
 11621 0c9e FFF7FEFF 		bl	getX
 11622              	.LVL1376:
3093:src/display.c **** 		const unsigned int f = argKIND(op);
 11623              		.loc 1 3093 8 view .LVU3789
3093:src/display.c **** 		const unsigned int f = argKIND(op);
 11624              		.loc 1 3093 11 is_stmt 0 view .LVU3790
 11625 0ca2 CAF30723 		ubfx	r3, r10, #8, #8
 11626 0ca6 022B     		cmp	r3, #2
 11627 0ca8 2FD1     		bne	.L891
 11628              	.LBB571:
3094:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
 11629              		.loc 1 3094 3 is_stmt 1 view .LVU3791
3094:src/display.c **** 		if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondreal)) {
ARM GAS  /tmp/ccdQiHBS.s 			page 331


 11630              		.loc 1 3094 22 is_stmt 0 view .LVU3792
 11631 0caa 5FFA8AFA 		uxtb	r10, r10
 11632              	.LVL1377:
3095:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11633              		.loc 1 3095 3 is_stmt 1 view .LVU3793
3095:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11634              		.loc 1 3095 6 is_stmt 0 view .LVU3794
 11635 0cae BAF19B0F 		cmp	r10, #155
 11636              	.LBB572:
3098:src/display.c **** 		}
 11637              		.loc 1 3098 5 view .LVU3795
 11638 0cb2 13AE     		add	r6, sp, #76
 11639              	.LBE572:
3095:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11640              		.loc 1 3095 6 view .LVU3796
 11641 0cb4 25D8     		bhi	.L892
3095:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11642              		.loc 1 3095 28 discriminator 1 view .LVU3797
 11643 0cb6 1823     		movs	r3, #24
 11644 0cb8 244A     		ldr	r2, .L1169+48
 11645 0cba 03FB0AF3 		mul	r3, r3, r10
 11646 0cbe D358     		ldr	r3, [r2, r3]
3095:src/display.c **** 		  FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 11647              		.loc 1 3095 23 discriminator 1 view .LVU3798
 11648 0cc0 FBB1     		cbz	r3, .L892
 11649              	.LBB573:
3096:src/display.c **** 		  update_speed(0);
 11650              		.loc 1 3096 5 is_stmt 1 view .LVU3799
 11651              	.LVL1378:
3097:src/display.c **** 		  fp(&r, &x);
 11652              		.loc 1 3097 20 view .LVU3800
3098:src/display.c **** 		}
 11653              		.loc 1 3098 5 view .LVU3801
 11654 0cc2 0AA9     		add	r1, sp, #40
 11655 0cc4 3046     		mov	r0, r6
 11656 0cc6 9847     		blx	r3
 11657              	.LVL1379:
 11658              	.L893:
3098:src/display.c **** 		}
 11659              		.loc 1 3098 5 is_stmt 0 view .LVU3802
 11660              	.LBE573:
 11661              	.LBE571:
3104:src/display.c **** 	      packed_from_number(&z, &r);
 11662              		.loc 1 3104 8 is_stmt 1 discriminator 1 view .LVU3803
 11663 0cc8 214A     		ldr	r2, .L1169+52
 11664 0cca 3146     		mov	r1, r6
 11665 0ccc 3046     		mov	r0, r6
 11666 0cce FFF7FEFF 		bl	decNumberNormalize
 11667              	.LVL1380:
3105:src/display.c **** 	      set_x((REGISTER *)&z, CNULL, 0);
 11668              		.loc 1 3105 8 discriminator 1 view .LVU3804
 11669 0cd2 04A8     		add	r0, sp, #16
 11670 0cd4 3146     		mov	r1, r6
 11671 0cd6 FFF7FEFF 		bl	packed_from_number
 11672              	.LVL1381:
3106:src/display.c **** 	      skip = 1;
 11673              		.loc 1 3106 8 discriminator 1 view .LVU3805
ARM GAS  /tmp/ccdQiHBS.s 			page 332


 11674 0cda 0022     		movs	r2, #0
 11675 0cdc 04A8     		add	r0, sp, #16
 11676 0cde 02E6     		b	.L1116
 11677              	.LVL1382:
 11678              	.L1162:
3106:src/display.c **** 	      skip = 1;
 11679              		.loc 1 3106 8 is_stmt 0 discriminator 1 view .LVU3806
 11680              	.LBE575:
 11681              	.LBE660:
 11682              	.LBB661:
 11683              	.LBB626:
2378:src/display.c **** 	    p = num_arg(p, local_regs());
 11684              		.loc 1 2378 6 is_stmt 1 view .LVU3807
2378:src/display.c **** 	    p = num_arg(p, local_regs());
 11685              		.loc 1 2378 10 is_stmt 0 view .LVU3808
 11686 0ce0 1C49     		ldr	r1, .L1169+56
 11687 0ce2 FFF7FEFF 		bl	scopy
 11688              	.LVL1383:
2378:src/display.c **** 	    p = num_arg(p, local_regs());
 11689              		.loc 1 2378 10 view .LVU3809
 11690 0ce6 8046     		mov	r8, r0
 11691              	.LVL1384:
2379:src/display.c **** 	  }
 11692              		.loc 1 2379 6 is_stmt 1 view .LVU3810
2379:src/display.c **** 	  }
 11693              		.loc 1 2379 21 is_stmt 0 view .LVU3811
 11694 0ce8 FFF7FEFF 		bl	local_regs
 11695              	.LVL1385:
2379:src/display.c **** 	  }
 11696              		.loc 1 2379 21 view .LVU3812
 11697 0cec 0146     		mov	r1, r0
2379:src/display.c **** 	  }
 11698              		.loc 1 2379 10 view .LVU3813
 11699 0cee 4046     		mov	r0, r8
 11700 0cf0 FFF7FEFF 		bl	num_arg
 11701              	.LVL1386:
 11702 0cf4 0346     		mov	r3, r0
 11703              	.LVL1387:
2379:src/display.c **** 	  }
 11704              		.loc 1 2379 10 view .LVU3814
 11705 0cf6 A4E7     		b	.L901
 11706              	.LVL1388:
 11707              	.L1161:
2371:src/display.c **** 	  *p = '\0';
 11708              		.loc 1 2371 6 is_stmt 1 view .LVU3815
2371:src/display.c **** 	  *p = '\0';
 11709              		.loc 1 2371 10 is_stmt 0 view .LVU3816
 11710 0cf8 1749     		ldr	r1, .L1169+60
 11711 0cfa FFF7FEFF 		bl	scopy
 11712              	.LVL1389:
2371:src/display.c **** 	  *p = '\0';
 11713              		.loc 1 2371 10 view .LVU3817
 11714 0cfe 0346     		mov	r3, r0
 11715              	.LVL1390:
2371:src/display.c **** 	  *p = '\0';
 11716              		.loc 1 2371 10 view .LVU3818
 11717 0d00 8DE7     		b	.L900
ARM GAS  /tmp/ccdQiHBS.s 			page 333


 11718              	.LVL1391:
 11719              	.L892:
2371:src/display.c **** 	  *p = '\0';
 11720              		.loc 1 2371 10 view .LVU3819
 11721              	.LBE626:
 11722              	.LBE661:
 11723              	.LBB662:
 11724              	.LBB576:
 11725              	.LBB574:
3101:src/display.c **** 	      } else
 11726              		.loc 1 3101 5 is_stmt 1 view .LVU3820
 11727 0d02 3046     		mov	r0, r6
 11728 0d04 FFF7FEFF 		bl	set_NaN
 11729              	.LVL1392:
 11730 0d08 DEE7     		b	.L893
 11731              	.LVL1393:
 11732              	.L891:
3101:src/display.c **** 	      } else
 11733              		.loc 1 3101 5 is_stmt 0 view .LVU3821
 11734              	.LBE574:
3103:src/display.c **** 	      decNumberNormalize(&r, &r, &Ctx);
 11735              		.loc 1 3103 3 is_stmt 1 view .LVU3822
 11736 0d0a 13AE     		add	r6, sp, #76
 11737 0d0c 0AAA     		add	r2, sp, #40
 11738 0d0e 0AF07F01 		and	r1, r10, #127
 11739 0d12 3046     		mov	r0, r6
 11740 0d14 FFF7FEFF 		bl	do_conv
 11741              	.LVL1394:
 11742 0d18 D6E7     		b	.L893
 11743              	.L1170:
 11744 0d1a 00BF     		.align	2
 11745              	.L1169:
 11746 0d1c 78000000 		.word	.LC41
 11747 0d20 00000000 		.word	main_ram
 11748 0d24 80000000 		.word	.LC42
 11749 0d28 5C000000 		.word	.LC39
 11750 0d2c 9C000000 		.word	.LC30
 11751 0d30 58000000 		.word	.LC38
 11752 0d34 3C000000 		.word	.LC35
 11753 0d38 00000000 		.word	SizeStatRegs
 11754 0d3c 00000000 		.word	DispMsg
 11755 0d40 88000000 		.word	.LC43
 11756 0d44 2C000000 		.word	.LC33
 11757 0d48 34000000 		.word	.LC34
 11758 0d4c 00000000 		.word	monfuncs
 11759 0d50 00000000 		.word	Ctx
 11760 0d54 4C000000 		.word	.LC37
 11761 0d58 44000000 		.word	.LC36
 11762 0d5c 00000000 		.word	.LANCHOR19
 11763 0d60 00000000 		.word	DispPlot
 11764              	.LBE576:
 11765              	.LBE662:
 11766              		.cfi_endproc
 11767              	.LFE34:
 11769              		.section	.text.frozen_display,"ax",%progbits
 11770              		.align	1
 11771              		.p2align 2,,3
ARM GAS  /tmp/ccdQiHBS.s 			page 334


 11772              		.global	frozen_display
 11773              		.syntax unified
 11774              		.thumb
 11775              		.thumb_func
 11776              		.fpu fpv4-sp-d16
 11778              	frozen_display:
 11779              	.LFB35:
3320:src/display.c **** 	State2.disp_freeze = 0;
 11780              		.loc 1 3320 7 view -0
 11781              		.cfi_startproc
 11782              		@ args = 0, pretend = 0, frame = 0
 11783              		@ frame_needed = 0, uses_anonymous_args = 0
3321:src/display.c **** 	display();
 11784              		.loc 1 3321 2 view .LVU3824
3320:src/display.c **** 	State2.disp_freeze = 0;
 11785              		.loc 1 3320 7 is_stmt 0 view .LVU3825
 11786 0000 10B5     		push	{r4, lr}
 11787              		.cfi_def_cfa_offset 8
 11788              		.cfi_offset 4, -8
 11789              		.cfi_offset 14, -4
3321:src/display.c **** 	display();
 11790              		.loc 1 3321 21 view .LVU3826
 11791 0002 064C     		ldr	r4, .L1173
 11792 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11793 0006 6FF30413 		bfc	r3, #4, #1
 11794 000a E375     		strb	r3, [r4, #23]
3322:src/display.c **** 	State2.disp_freeze = 1;
 11795              		.loc 1 3322 2 is_stmt 1 view .LVU3827
 11796 000c FFF7FEFF 		bl	display
 11797              	.LVL1395:
3323:src/display.c ****       }
 11798              		.loc 1 3323 2 view .LVU3828
3323:src/display.c ****       }
 11799              		.loc 1 3323 21 is_stmt 0 view .LVU3829
 11800 0010 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11801 0012 43F01003 		orr	r3, r3, #16
 11802 0016 E375     		strb	r3, [r4, #23]
3324:src/display.c **** 
 11803              		.loc 1 3324 7 view .LVU3830
 11804 0018 10BD     		pop	{r4, pc}
 11805              	.L1174:
 11806 001a 00BF     		.align	2
 11807              	.L1173:
 11808 001c 00000000 		.word	StateWhileOn
 11809              		.cfi_endproc
 11810              	.LFE35:
 11812              		.section	.text.message,"ax",%progbits
 11813              		.align	1
 11814              		.p2align 2,,3
 11815              		.global	message
 11816              		.syntax unified
 11817              		.thumb
 11818              		.thumb_func
 11819              		.fpu fpv4-sp-d16
 11821              	message:
 11822              	.LVL1396:
 11823              	.LFB45:
ARM GAS  /tmp/ccdQiHBS.s 			page 335


3522:src/display.c **** 	State2.disp_freeze = 0;
 11824              		.loc 1 3522 7 is_stmt 1 view -0
 11825              		.cfi_startproc
 11826              		@ args = 0, pretend = 0, frame = 0
 11827              		@ frame_needed = 0, uses_anonymous_args = 0
3523:src/display.c **** 	State2.disp_small = 0;
 11828              		.loc 1 3523 2 view .LVU3832
3524:src/display.c **** 	WasDataEntry = 0;
 11829              		.loc 1 3524 2 view .LVU3833
3524:src/display.c **** 	WasDataEntry = 0;
 11830              		.loc 1 3524 20 is_stmt 0 view .LVU3834
 11831 0000 174A     		ldr	r2, .L1185
3522:src/display.c **** 	State2.disp_freeze = 0;
 11832              		.loc 1 3522 7 view .LVU3835
 11833 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 11834              		.cfi_def_cfa_offset 24
 11835              		.cfi_offset 3, -24
 11836              		.cfi_offset 4, -20
 11837              		.cfi_offset 5, -16
 11838              		.cfi_offset 6, -12
 11839              		.cfi_offset 7, -8
 11840              		.cfi_offset 14, -4
3524:src/display.c **** 	WasDataEntry = 0;
 11841              		.loc 1 3524 20 view .LVU3836
 11842 0004 D38A     		ldrh	r3, [r2, #22]
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11843              		.loc 1 3525 15 view .LVU3837
 11844 0006 174E     		ldr	r6, .L1185+4
3524:src/display.c **** 	WasDataEntry = 0;
 11845              		.loc 1 3524 20 view .LVU3838
 11846 0008 23F48453 		bic	r3, r3, #4224
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11847              		.loc 1 3525 15 view .LVU3839
 11848 000c 0027     		movs	r7, #0
3524:src/display.c **** 	WasDataEntry = 0;
 11849              		.loc 1 3524 20 view .LVU3840
 11850 000e D382     		strh	r3, [r2, #22]	@ movhi
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11851              		.loc 1 3525 2 is_stmt 1 view .LVU3841
3526:src/display.c **** 	  // Complete redraw necessary
 11852              		.loc 1 3526 5 is_stmt 0 view .LVU3842
 11853 0010 9B05     		lsls	r3, r3, #22
3522:src/display.c **** 	State2.disp_freeze = 0;
 11854              		.loc 1 3522 7 view .LVU3843
 11855 0012 0546     		mov	r5, r0
 11856 0014 0C46     		mov	r4, r1
3525:src/display.c **** 	if ( State2.invalid_disp && str2 == NULL ) {
 11857              		.loc 1 3525 15 view .LVU3844
 11858 0016 3760     		str	r7, [r6]
3526:src/display.c **** 	  // Complete redraw necessary
 11859              		.loc 1 3526 2 is_stmt 1 view .LVU3845
3526:src/display.c **** 	  // Complete redraw necessary
 11860              		.loc 1 3526 5 is_stmt 0 view .LVU3846
 11861 0018 12D5     		bpl	.L1176
3526:src/display.c **** 	  // Complete redraw necessary
 11862              		.loc 1 3526 27 discriminator 1 view .LVU3847
 11863 001a D1B1     		cbz	r1, .L1184
ARM GAS  /tmp/ccdQiHBS.s 			page 336


 11864              	.L1177:
3533:src/display.c **** 	    ShowRPN = 0;
 11865              		.loc 1 3533 6 is_stmt 1 view .LVU3848
 11866 001c FFF7FEFF 		bl	reset_disp
 11867              	.LVL1397:
3534:src/display.c **** 	    set_annunciators();
 11868              		.loc 1 3534 6 view .LVU3849
3534:src/display.c **** 	    set_annunciators();
 11869              		.loc 1 3534 14 is_stmt 0 view .LVU3850
 11870 0020 114B     		ldr	r3, .L1185+8
 11871 0022 0026     		movs	r6, #0
 11872 0024 1E60     		str	r6, [r3]
3535:src/display.c **** 	    set_digits_string( str2, 0 );
 11873              		.loc 1 3535 6 is_stmt 1 view .LVU3851
 11874 0026 FFF7FEFF 		bl	set_annunciators
 11875              	.LVL1398:
3536:src/display.c **** 	  }
 11876              		.loc 1 3536 6 view .LVU3852
 11877 002a 3146     		mov	r1, r6
 11878 002c 2046     		mov	r0, r4
 11879 002e FFF7FEFF 		bl	set_digits_string
 11880              	.LVL1399:
3538:src/display.c **** 	  finish_display();// message
 11881              		.loc 1 3538 4 view .LVU3853
 11882 0032 2846     		mov	r0, r5
 11883 0034 FFF7FEFF 		bl	set_status
 11884              	.LVL1400:
3539:src/display.c **** 	}
 11885              		.loc 1 3539 4 view .LVU3854
3541:src/display.c **** 
 11886              		.loc 1 3541 7 is_stmt 0 view .LVU3855
 11887 0038 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11888              		.cfi_remember_state
 11889              		.cfi_restore 14
 11890              		.cfi_restore 7
 11891              		.cfi_restore 6
 11892              		.cfi_restore 5
 11893              		.cfi_restore 4
 11894              		.cfi_restore 3
 11895              		.cfi_def_cfa_offset 0
 11896              	.LVL1401:
3539:src/display.c **** 	}
 11897              		.loc 1 3539 4 view .LVU3856
 11898 003c FFF7FEBF 		b	finish_display
 11899              	.LVL1402:
 11900              	.L1176:
 11901              		.cfi_restore_state
3532:src/display.c **** 	    reset_disp();
 11902              		.loc 1 3532 4 is_stmt 1 view .LVU3857
3532:src/display.c **** 	    reset_disp();
 11903              		.loc 1 3532 7 is_stmt 0 view .LVU3858
 11904 0040 0029     		cmp	r1, #0
 11905 0042 EBD1     		bne	.L1177
3538:src/display.c **** 	  finish_display();// message
 11906              		.loc 1 3538 4 is_stmt 1 view .LVU3859
 11907 0044 2846     		mov	r0, r5
 11908              	.LVL1403:
ARM GAS  /tmp/ccdQiHBS.s 			page 337


3538:src/display.c **** 	  finish_display();// message
 11909              		.loc 1 3538 4 is_stmt 0 view .LVU3860
 11910 0046 FFF7FEFF 		bl	set_status
 11911              	.LVL1404:
3539:src/display.c **** 	}
 11912              		.loc 1 3539 4 is_stmt 1 view .LVU3861
3541:src/display.c **** 
 11913              		.loc 1 3541 7 is_stmt 0 view .LVU3862
 11914 004a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11915              		.cfi_remember_state
 11916              		.cfi_restore 14
 11917              		.cfi_restore 7
 11918              		.cfi_restore 6
 11919              		.cfi_restore 5
 11920              		.cfi_restore 4
 11921              		.cfi_restore 3
 11922              		.cfi_def_cfa_offset 0
 11923              	.LVL1405:
3539:src/display.c **** 	}
 11924              		.loc 1 3539 4 view .LVU3863
 11925 004e FFF7FEBF 		b	finish_display
 11926              	.LVL1406:
 11927              	.L1184:
 11928              		.cfi_restore_state
3528:src/display.c **** 	  display();
 11929              		.loc 1 3528 4 is_stmt 1 view .LVU3864
3528:src/display.c **** 	  display();
 11930              		.loc 1 3528 12 is_stmt 0 view .LVU3865
 11931 0052 064B     		ldr	r3, .L1185+12
 11932 0054 1860     		str	r0, [r3]
3529:src/display.c **** 	}
 11933              		.loc 1 3529 4 is_stmt 1 view .LVU3866
3541:src/display.c **** 
 11934              		.loc 1 3541 7 is_stmt 0 view .LVU3867
 11935 0056 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 11936              		.cfi_restore 14
 11937              		.cfi_restore 7
 11938              		.cfi_restore 6
 11939              		.cfi_restore 5
 11940              		.cfi_restore 4
 11941              		.cfi_restore 3
 11942              		.cfi_def_cfa_offset 0
3529:src/display.c **** 	}
 11943              		.loc 1 3529 4 view .LVU3868
 11944 005a FFF7FEBF 		b	display
 11945              	.LVL1407:
 11946              	.L1186:
3529:src/display.c **** 	}
 11947              		.loc 1 3529 4 view .LVU3869
 11948 005e 00BF     		.align	2
 11949              	.L1185:
 11950 0060 00000000 		.word	StateWhileOn
 11951 0064 00000000 		.word	WasDataEntry
 11952 0068 00000000 		.word	ShowRPN
 11953 006c 00000000 		.word	DispMsg
 11954              		.cfi_endproc
 11955              	.LFE45:
ARM GAS  /tmp/ccdQiHBS.s 			page 338


 11957              		.section	.text.error_message,"ax",%progbits
 11958              		.align	1
 11959              		.p2align 2,,3
 11960              		.global	error_message
 11961              		.syntax unified
 11962              		.thumb
 11963              		.thumb_func
 11964              		.fpu fpv4-sp-d16
 11966              	error_message:
 11967              	.LVL1408:
 11968              	.LFB1:
 110:src/display.c **** #define MSG1(top) top "\0"
 11969              		.loc 1 110 1 is_stmt 1 view -0
 11970              		.cfi_startproc
 11971              		@ args = 0, pretend = 0, frame = 0
 11972              		@ frame_needed = 0, uses_anonymous_args = 0
 115:src/display.c ****     {
 11973              		.loc 1 115 3 view .LVU3871
 176:src/display.c ****     const char *p = error_table[e];
 11974              		.loc 1 176 3 view .LVU3872
 176:src/display.c ****     const char *p = error_table[e];
 11975              		.loc 1 176 21 is_stmt 0 view .LVU3873
 11976 0000 334B     		ldr	r3, .L1213
 11977 0002 1B68     		ldr	r3, [r3]
 11978 0004 0343     		orrs	r3, r0, r3
 11979 0006 00D1     		bne	.L1209
 11980 0008 7047     		bx	lr
 11981              	.L1209:
 11982              	.LBB663:
 177:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11983              		.loc 1 177 5 is_stmt 1 view .LVU3874
 177:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11984              		.loc 1 177 17 is_stmt 0 view .LVU3875
 11985 000a 324B     		ldr	r3, .L1213+4
 11986              	.LBE663:
 110:src/display.c **** #define MSG1(top) top "\0"
 11987              		.loc 1 110 1 view .LVU3876
 11988 000c 70B5     		push	{r4, r5, r6, lr}
 11989              		.cfi_def_cfa_offset 16
 11990              		.cfi_offset 4, -16
 11991              		.cfi_offset 5, -12
 11992              		.cfi_offset 6, -8
 11993              		.cfi_offset 14, -4
 11994              	.LBB675:
 177:src/display.c ****     const char *q = find_char(p, '\0') + 1;
 11995              		.loc 1 177 17 view .LVU3877
 11996 000e 53F82060 		ldr	r6, [r3, r0, lsl #2]
 11997              	.LVL1409:
 178:src/display.c ****     if (*q == '\0')
 11998              		.loc 1 178 5 is_stmt 1 view .LVU3878
 11999 0012 0446     		mov	r4, r0
 178:src/display.c ****     if (*q == '\0')
 12000              		.loc 1 178 21 is_stmt 0 view .LVU3879
 12001 0014 0021     		movs	r1, #0
 12002 0016 3046     		mov	r0, r6
 12003              	.LVL1410:
 178:src/display.c ****     if (*q == '\0')
ARM GAS  /tmp/ccdQiHBS.s 			page 339


 12004              		.loc 1 178 21 view .LVU3880
 12005 0018 FFF7FEFF 		bl	find_char
 12006              	.LVL1411:
 179:src/display.c ****       q = S7_ERROR;
 12007              		.loc 1 179 5 is_stmt 1 view .LVU3881
 179:src/display.c ****       q = S7_ERROR;
 12008              		.loc 1 179 9 is_stmt 0 view .LVU3882
 12009 001c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 179:src/display.c ****       q = S7_ERROR;
 12010              		.loc 1 179 8 view .LVU3883
 12011 001e 002B     		cmp	r3, #0
 12012 0020 3CD0     		beq	.L1198
 181:src/display.c ****       DispMsg = p;
 12013              		.loc 1 181 8 view .LVU3884
 12014 0022 582B     		cmp	r3, #88
 178:src/display.c ****     if (*q == '\0')
 12015              		.loc 1 178 17 view .LVU3885
 12016 0024 00F10105 		add	r5, r0, #1
 12017              	.LVL1412:
 181:src/display.c ****       DispMsg = p;
 12018              		.loc 1 181 5 is_stmt 1 view .LVU3886
 181:src/display.c ****       DispMsg = p;
 12019              		.loc 1 181 8 is_stmt 0 view .LVU3887
 12020 0028 39D1     		bne	.L1190
 182:src/display.c ****       frozen_display();
 12021              		.loc 1 182 7 is_stmt 1 view .LVU3888
 12022              	.LBB664:
 12023              	.LBB665:
3321:src/display.c **** 	display();
 12024              		.loc 1 3321 21 is_stmt 0 view .LVU3889
 12025 002a 2B4C     		ldr	r4, .L1213+8
 12026              	.LVL1413:
3321:src/display.c **** 	display();
 12027              		.loc 1 3321 21 view .LVU3890
 12028              	.LBE665:
 12029              	.LBE664:
 182:src/display.c ****       frozen_display();
 12030              		.loc 1 182 15 view .LVU3891
 12031 002c 2B4A     		ldr	r2, .L1213+12
 12032              	.LBB669:
 12033              	.LBB666:
3321:src/display.c **** 	display();
 12034              		.loc 1 3321 21 view .LVU3892
 12035 002e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12036              	.LBE666:
 12037              	.LBE669:
 182:src/display.c ****       frozen_display();
 12038              		.loc 1 182 15 view .LVU3893
 12039 0030 1660     		str	r6, [r2]
 183:src/display.c ****     }
 12040              		.loc 1 183 7 is_stmt 1 view .LVU3894
 12041              	.LBB670:
 12042              	.LBI664:
3319:src/display.c ****       {
 12043              		.loc 1 3319 12 view .LVU3895
 12044              	.LBB667:
3321:src/display.c **** 	display();
ARM GAS  /tmp/ccdQiHBS.s 			page 340


 12045              		.loc 1 3321 2 view .LVU3896
3321:src/display.c **** 	display();
 12046              		.loc 1 3321 21 is_stmt 0 view .LVU3897
 12047 0032 6FF30413 		bfc	r3, #4, #1
 12048 0036 E375     		strb	r3, [r4, #23]
3322:src/display.c **** 	State2.disp_freeze = 1;
 12049              		.loc 1 3322 2 is_stmt 1 view .LVU3898
 12050 0038 FFF7FEFF 		bl	display
 12051              	.LVL1414:
3323:src/display.c ****       }
 12052              		.loc 1 3323 2 view .LVU3899
 12053              	.LBE667:
 12054              	.LBE670:
 194:src/display.c ****       if (*q == 'X')
 12055              		.loc 1 194 5 view .LVU3900
 12056              	.LBB671:
 12057              	.LBB668:
3323:src/display.c ****       }
 12058              		.loc 1 3323 21 is_stmt 0 view .LVU3901
 12059 003c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12060 003e 43F01003 		orr	r3, r3, #16
 12061 0042 E375     		strb	r3, [r4, #23]
 12062              	.LBE668:
 12063              	.LBE671:
 194:src/display.c ****       if (*q == 'X')
 12064              		.loc 1 194 9 view .LVU3902
 12065 0044 264B     		ldr	r3, .L1213+16
 194:src/display.c ****       if (*q == 'X')
 12066              		.loc 1 194 8 view .LVU3903
 12067 0046 1B68     		ldr	r3, [r3]
 12068 0048 002B     		cmp	r3, #0
 12069 004a 38D0     		beq	.L1187
 12070              	.LVL1415:
 12071              	.L1212:
 195:src/display.c **** 	print_reg(regX_idx, p, 0);
 12072              		.loc 1 195 7 is_stmt 1 view .LVU3904
 195:src/display.c **** 	print_reg(regX_idx, p, 0);
 12073              		.loc 1 195 10 is_stmt 0 view .LVU3905
 12074 004c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 12075 004e 582B     		cmp	r3, #88
 12076 0050 36D0     		beq	.L1210
 198:src/display.c **** 	print_line(p, 0);
 12077              		.loc 1 198 2 is_stmt 1 view .LVU3906
 12078 0052 0020     		movs	r0, #0
 12079 0054 FFF7FEFF 		bl	print_tab
 12080              	.LVL1416:
 199:src/display.c **** 	print(' ');
 12081              		.loc 1 199 2 view .LVU3907
 12082 0058 3046     		mov	r0, r6
 12083 005a 0021     		movs	r1, #0
 12084 005c FFF7FEFF 		bl	print_line
 12085              	.LVL1417:
 200:src/display.c **** 	while (*q != '\0') {
 12086              		.loc 1 200 2 view .LVU3908
 12087 0060 2020     		movs	r0, #32
 12088 0062 FFF7FEFF 		bl	print
 12089              	.LVL1418:
ARM GAS  /tmp/ccdQiHBS.s 			page 341


 201:src/display.c **** 	  int c = *q;
 12090              		.loc 1 201 2 view .LVU3909
 201:src/display.c **** 	  int c = *q;
 12091              		.loc 1 201 8 view .LVU3910
 201:src/display.c **** 	  int c = *q;
 12092              		.loc 1 201 9 is_stmt 0 view .LVU3911
 12093 0066 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 201:src/display.c **** 	  int c = *q;
 12094              		.loc 1 201 8 view .LVU3912
 12095 0068 73B9     		cbnz	r3, .L1194
 12096              	.L1197:
 210:src/display.c ****       }
 12097              		.loc 1 210 2 is_stmt 1 view .LVU3913
 12098              	.LBE675:
 215:src/display.c **** 
 12099              		.loc 1 215 1 is_stmt 0 view .LVU3914
 12100 006a BDE87040 		pop	{r4, r5, r6, lr}
 12101              		.cfi_remember_state
 12102              		.cfi_restore 14
 12103              		.cfi_restore 6
 12104              		.cfi_restore 5
 12105              		.cfi_restore 4
 12106              		.cfi_def_cfa_offset 0
 12107              	.LVL1419:
 12108              	.LBB676:
 210:src/display.c ****       }
 12109              		.loc 1 210 2 view .LVU3915
 12110 006e 0020     		movs	r0, #0
 12111 0070 FFF7FEBF 		b	print_advance
 12112              	.LVL1420:
 12113              	.L1211:
 12114              		.cfi_restore_state
 12115              	.LBB672:
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12116              		.loc 1 205 4 view .LVU3916
 12117 0074 FFF7FEFF 		bl	print
 12118              	.LVL1421:
 206:src/display.c **** 	    ++q;
 12119              		.loc 1 206 4 is_stmt 1 view .LVU3917
 207:src/display.c **** 	  ++q;
 12120              		.loc 1 207 6 view .LVU3918
 206:src/display.c **** 	    ++q;
 12121              		.loc 1 206 7 is_stmt 0 view .LVU3919
 12122 0078 6D2C     		cmp	r4, #109
 207:src/display.c **** 	  ++q;
 12123              		.loc 1 207 6 view .LVU3920
 12124 007a 0CBF     		ite	eq
 12125 007c 691C     		addeq	r1, r5, #1
 12126              	.LVL1422:
 207:src/display.c **** 	  ++q;
 12127              		.loc 1 207 6 view .LVU3921
 12128 007e 2946     		movne	r1, r5
 12129              	.LVL1423:
 12130              	.L1196:
 208:src/display.c **** 	}
 12131              		.loc 1 208 4 is_stmt 1 view .LVU3922
 12132              	.LBE672:
ARM GAS  /tmp/ccdQiHBS.s 			page 342


 201:src/display.c **** 	  int c = *q;
 12133              		.loc 1 201 9 is_stmt 0 view .LVU3923
 12134 0080 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 12135              	.LBB673:
 208:src/display.c **** 	}
 12136              		.loc 1 208 4 view .LVU3924
 12137 0082 4D1C     		adds	r5, r1, #1
 12138              	.LVL1424:
 208:src/display.c **** 	}
 12139              		.loc 1 208 4 view .LVU3925
 12140              	.LBE673:
 201:src/display.c **** 	  int c = *q;
 12141              		.loc 1 201 8 is_stmt 1 view .LVU3926
 12142 0084 002B     		cmp	r3, #0
 12143 0086 F0D0     		beq	.L1197
 12144              	.LVL1425:
 12145              	.L1194:
 12146              	.LBB674:
 202:src/display.c **** 	  if (c >= 'A')
 12147              		.loc 1 202 4 view .LVU3927
 203:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12148              		.loc 1 203 4 view .LVU3928
 204:src/display.c **** 	  print(c);
 12149              		.loc 1 204 6 view .LVU3929
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12150              		.loc 1 205 4 view .LVU3930
 12151 0088 43F06004 		orr	r4, r3, #96
 12152              	.LVL1426:
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12153              		.loc 1 205 4 view .LVU3931
 203:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12154              		.loc 1 203 7 is_stmt 0 view .LVU3932
 12155 008c 402B     		cmp	r3, #64
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12156              		.loc 1 205 4 view .LVU3933
 12157 008e 2046     		mov	r0, r4
 203:src/display.c **** 	    c |= 0x60; // ASCII lower case
 12158              		.loc 1 203 7 view .LVU3934
 12159 0090 F0DC     		bgt	.L1211
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12160              		.loc 1 205 4 view .LVU3935
 12161 0092 1846     		mov	r0, r3
 12162 0094 FFF7FEFF 		bl	print
 12163              	.LVL1427:
 206:src/display.c **** 	    ++q;
 12164              		.loc 1 206 4 is_stmt 1 view .LVU3936
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12165              		.loc 1 205 4 is_stmt 0 view .LVU3937
 12166 0098 2946     		mov	r1, r5
 12167 009a F1E7     		b	.L1196
 12168              	.LVL1428:
 12169              	.L1198:
 205:src/display.c **** 	  if (c == 'm' /* || c == 'w' */)
 12170              		.loc 1 205 4 view .LVU3938
 12171              	.LBE674:
 180:src/display.c ****     if (*q == 'X') {
 12172              		.loc 1 180 9 view .LVU3939
ARM GAS  /tmp/ccdQiHBS.s 			page 343


 12173 009c 114D     		ldr	r5, .L1213+20
 12174              	.L1190:
 12175              	.LVL1429:
 190:src/display.c ****       State2.disp_freeze = (e != ERR_NONE);
 12176              		.loc 1 190 7 is_stmt 1 view .LVU3940
 12177 009e 2946     		mov	r1, r5
 12178 00a0 3046     		mov	r0, r6
 12179 00a2 FFF7FEFF 		bl	message
 12180              	.LVL1430:
 191:src/display.c ****     }
 12181              		.loc 1 191 7 view .LVU3941
 191:src/display.c ****     }
 12182              		.loc 1 191 26 is_stmt 0 view .LVU3942
 12183 00a6 0C4B     		ldr	r3, .L1213+8
 191:src/display.c ****     }
 12184              		.loc 1 191 31 view .LVU3943
 12185 00a8 003C     		subs	r4, r4, #0
 191:src/display.c ****     }
 12186              		.loc 1 191 26 view .LVU3944
 12187 00aa DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 191:src/display.c ****     }
 12188              		.loc 1 191 31 view .LVU3945
 12189 00ac 18BF     		it	ne
 12190 00ae 0124     		movne	r4, #1
 12191              	.LVL1431:
 191:src/display.c ****     }
 12192              		.loc 1 191 26 view .LVU3946
 12193 00b0 64F30412 		bfi	r2, r4, #4, #1
 12194 00b4 DA75     		strb	r2, [r3, #23]
 194:src/display.c ****       if (*q == 'X')
 12195              		.loc 1 194 5 is_stmt 1 view .LVU3947
 194:src/display.c ****       if (*q == 'X')
 12196              		.loc 1 194 9 is_stmt 0 view .LVU3948
 12197 00b6 0A4B     		ldr	r3, .L1213+16
 194:src/display.c ****       if (*q == 'X')
 12198              		.loc 1 194 8 view .LVU3949
 12199 00b8 1B68     		ldr	r3, [r3]
 12200 00ba 002B     		cmp	r3, #0
 12201 00bc C6D1     		bne	.L1212
 12202              	.LVL1432:
 12203              	.L1187:
 194:src/display.c ****       if (*q == 'X')
 12204              		.loc 1 194 8 view .LVU3950
 12205              	.LBE676:
 215:src/display.c **** 
 12206              		.loc 1 215 1 view .LVU3951
 12207 00be 70BD     		pop	{r4, r5, r6, pc}
 12208              	.LVL1433:
 12209              	.L1210:
 12210              	.LBB677:
 196:src/display.c ****       else {
 12211              		.loc 1 196 2 is_stmt 1 view .LVU3952
 12212 00c0 3146     		mov	r1, r6
 12213 00c2 0022     		movs	r2, #0
 12214              	.LBE677:
 215:src/display.c **** 
 12215              		.loc 1 215 1 is_stmt 0 view .LVU3953
ARM GAS  /tmp/ccdQiHBS.s 			page 344


 12216 00c4 BDE87040 		pop	{r4, r5, r6, lr}
 12217              		.cfi_restore 14
 12218              		.cfi_restore 6
 12219              		.cfi_restore 5
 12220              		.cfi_restore 4
 12221              		.cfi_def_cfa_offset 0
 12222              	.LVL1434:
 12223              	.LBB678:
 196:src/display.c ****       else {
 12224              		.loc 1 196 2 view .LVU3954
 12225 00c8 6420     		movs	r0, #100
 12226 00ca FFF7FEBF 		b	print_reg
 12227              	.LVL1435:
 12228              	.L1214:
 196:src/display.c ****       else {
 12229              		.loc 1 196 2 view .LVU3955
 12230 00ce 00BF     		.align	2
 12231              	.L1213:
 12232 00d0 00000000 		.word	Running
 12233 00d4 00000000 		.word	.LANCHOR21
 12234 00d8 00000000 		.word	StateWhileOn
 12235 00dc 00000000 		.word	DispMsg
 12236 00e0 00000000 		.word	Tracing
 12237 00e4 00000000 		.word	.LANCHOR20
 12238              	.LBE678:
 12239              		.cfi_endproc
 12240              	.LFE1:
 12242              		.section	.text.stopwatch_message,"ax",%progbits
 12243              		.align	1
 12244              		.p2align 2,,3
 12245              		.global	stopwatch_message
 12246              		.syntax unified
 12247              		.thumb
 12248              		.thumb_func
 12249              		.fpu fpv4-sp-d16
 12251              	stopwatch_message:
 12252              	.LVL1436:
 12253              	.LFB47:
3554:src/display.c **** 	reset_disp();
 12254              		.loc 1 3554 7 is_stmt 1 view -0
 12255              		.cfi_startproc
 12256              		@ args = 0, pretend = 0, frame = 0
 12257              		@ frame_needed = 0, uses_anonymous_args = 0
3555:src/display.c **** 	set_dot(DEG);
 12258              		.loc 1 3555 2 view .LVU3957
3554:src/display.c **** 	reset_disp();
 12259              		.loc 1 3554 7 is_stmt 0 view .LVU3958
 12260 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 12261              		.cfi_def_cfa_offset 24
 12262              		.cfi_offset 3, -24
 12263              		.cfi_offset 4, -20
 12264              		.cfi_offset 5, -16
 12265              		.cfi_offset 6, -12
 12266              		.cfi_offset 7, -8
 12267              		.cfi_offset 14, -4
3554:src/display.c **** 	reset_disp();
 12268              		.loc 1 3554 7 view .LVU3959
ARM GAS  /tmp/ccdQiHBS.s 			page 345


 12269 0002 1446     		mov	r4, r2
 12270 0004 0F46     		mov	r7, r1
 12271 0006 1D46     		mov	r5, r3
 12272 0008 0646     		mov	r6, r0
3555:src/display.c **** 	set_dot(DEG);
 12273              		.loc 1 3555 2 view .LVU3960
 12274 000a FFF7FEFF 		bl	reset_disp
 12275              	.LVL1437:
3556:src/display.c **** 	set_digits_string( str2, 0 );
 12276              		.loc 1 3556 2 is_stmt 1 view .LVU3961
 12277 000e 8C20     		movs	r0, #140
 12278 0010 FFF7FEFF 		bl	set_dot
 12279              	.LVL1438:
3557:src/display.c **** 	State2.disp_small = force_small;
 12280              		.loc 1 3557 2 view .LVU3962
 12281 0014 3846     		mov	r0, r7
 12282 0016 0021     		movs	r1, #0
 12283 0018 FFF7FEFF 		bl	set_digits_string
 12284              	.LVL1439:
3558:src/display.c **** 	if( exponent!=NULL ) {
 12285              		.loc 1 3558 2 view .LVU3963
3558:src/display.c **** 	if( exponent!=NULL ) {
 12286              		.loc 1 3558 20 is_stmt 0 view .LVU3964
 12287 001c 0B4B     		ldr	r3, .L1226
 12288 001e 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 12289 0020 64F3C712 		bfi	r2, r4, #7, #1
 12290              	.LVL1440:
3558:src/display.c **** 	if( exponent!=NULL ) {
 12291              		.loc 1 3558 20 view .LVU3965
 12292 0024 9A75     		strb	r2, [r3, #22]
3559:src/display.c **** 	  stopwatch_exponent(exponent);
 12293              		.loc 1 3559 2 is_stmt 1 view .LVU3966
3559:src/display.c **** 	  stopwatch_exponent(exponent);
 12294              		.loc 1 3559 4 is_stmt 0 view .LVU3967
 12295 0026 55B1     		cbz	r5, .L1216
 12296              	.LVL1441:
 12297              	.LBB679:
 12298              	.LBB680:
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12299              		.loc 1 3547 9 is_stmt 1 view .LVU3968
 12300 0028 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12301              		.loc 1 3547 2 is_stmt 0 view .LVU3969
 12302 002a 41B1     		cbz	r1, .L1216
3546:src/display.c **** 	for (; *exponent!=0; exponent++) {
 12303              		.loc 1 3546 6 view .LVU3970
 12304 002c 6C24     		movs	r4, #108
 12305              	.LVL1442:
 12306              	.L1217:
3548:src/display.c **** 	  j += SEGS_PER_EXP_DIGIT;
 12307              		.loc 1 3548 4 is_stmt 1 view .LVU3971
 12308              	.LBB681:
 12309              	.LBI681:
 332:src/display.c ****   if (res) *res++ = ch;
 12310              		.loc 1 332 14 view .LVU3972
 12311              	.LBB682:
 333:src/display.c ****   else	set_dig(base, ch);
ARM GAS  /tmp/ccdQiHBS.s 			page 346


 12312              		.loc 1 333 3 view .LVU3973
 334:src/display.c ****   return res;
 12313              		.loc 1 334 8 view .LVU3974
 12314 002e 2046     		mov	r0, r4
 12315 0030 FFF7FEFF 		bl	set_dig
 12316              	.LVL1443:
 335:src/display.c **** }
 12317              		.loc 1 335 3 view .LVU3975
 335:src/display.c **** }
 12318              		.loc 1 335 3 is_stmt 0 view .LVU3976
 12319              	.LBE682:
 12320              	.LBE681:
3549:src/display.c **** 	}
 12321              		.loc 1 3549 4 is_stmt 1 view .LVU3977
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12322              		.loc 1 3547 9 is_stmt 0 view .LVU3978
 12323 0034 15F8011F 		ldrb	r1, [r5, #1]!	@ zero_extendqisi2
 12324              	.LVL1444:
3549:src/display.c **** 	}
 12325              		.loc 1 3549 6 view .LVU3979
 12326 0038 0734     		adds	r4, r4, #7
 12327              	.LVL1445:
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12328              		.loc 1 3547 23 is_stmt 1 view .LVU3980
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12329              		.loc 1 3547 9 view .LVU3981
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12330              		.loc 1 3547 2 is_stmt 0 view .LVU3982
 12331 003a 0029     		cmp	r1, #0
 12332 003c F7D1     		bne	.L1217
 12333              	.LVL1446:
 12334              	.L1216:
3547:src/display.c **** 	  set_dig_s(j, *exponent, CNULL);
 12335              		.loc 1 3547 2 view .LVU3983
 12336              	.LBE680:
 12337              	.LBE679:
3562:src/display.c **** 	finish_display();
 12338              		.loc 1 3562 2 is_stmt 1 view .LVU3984
 12339 003e 3046     		mov	r0, r6
 12340 0040 FFF7FEFF 		bl	set_status
 12341              	.LVL1447:
3563:src/display.c ****       }
 12342              		.loc 1 3563 2 view .LVU3985
3564:src/display.c **** 
 12343              		.loc 1 3564 7 is_stmt 0 view .LVU3986
 12344 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 12345              		.cfi_restore 14
 12346              		.cfi_restore 7
 12347              		.cfi_restore 6
 12348              		.cfi_restore 5
 12349              		.cfi_restore 4
 12350              		.cfi_restore 3
 12351              		.cfi_def_cfa_offset 0
 12352              	.LVL1448:
3563:src/display.c ****       }
 12353              		.loc 1 3563 2 view .LVU3987
 12354 0048 FFF7FEBF 		b	finish_display
ARM GAS  /tmp/ccdQiHBS.s 			page 347


 12355              	.LVL1449:
 12356              	.L1227:
 12357              		.align	2
 12358              	.L1226:
 12359 004c 00000000 		.word	StateWhileOn
 12360              		.cfi_endproc
 12361              	.LFE47:
 12363              		.section	.rodata.str1.4,"aMS",%progbits,1
 12364              		.align	2
 12365              	.LC45:
 12366 0000 06316306 		.ascii	"\0061c\006\006\000"
 12366      0600
 12367 0006 0000     		.align	2
 12368              	.LC46:
 12369 0008 756E0600 		.ascii	"un\006\000"
 12370              		.align	2
 12371              	.LC47:
 12372 000c 736D00   		.ascii	"sm\000"
 12373              		.set	CSWTCH.343,CSWTCH.341
 12374              		.global	DIGITS
 12375              		.comm	IoAnnunciator,4,4
 12376              		.comm	IntMaxWindow,4,4
 12377              		.comm	JustDisplayed,4,4
 12378              		.comm	ShowRPN,4,4
 12379              		.global	no_status_top
 12380              		.comm	DispPlot,2,2
 12381              		.comm	DispMsg,4,4
 12382              		.global	SvnRevision
 12383              		.section	.rodata
 12384              		.align	2
 12385              		.set	.LANCHOR14,. + 0
 12386              	.LC22:
 12387 0000 40052006 		.ascii	"@\005 \006\"\000.\000\000"
 12387      22002E00 
 12387      00
 12388 0009 000000   		.space	3
 12389              	.LC26:
 12390 000c 33344306 		.ascii	"34C\0063.3\222T\000"
 12390      332E3392 
 12390      5400
 12391 0016 00000000 		.space	4
 12392 001a 0000     		.space	2
 12393              	.LC48:
 12394 001c 52756E6E 		.ascii	"Running\000ProGraMm\000"
 12394      696E6700 
 12394      50726F47 
 12394      72614D6D 
 12394      00
 12395 002d 000000   		.space	3
 12396              	.LC49:
 12397 0030 446F6D61 		.ascii	"Domain\000\000"
 12397      696E0000 
 12398              	.LC50:
 12399 0038 42616420 		.ascii	"Bad time\000or dAtE\000"
 12399      74696D65 
 12399      006F7220 
 12399      64417445 
ARM GAS  /tmp/ccdQiHBS.s 			page 348


 12399      00
 12400 0049 000000   		.space	3
 12401              	.LC51:
 12402 004c 556E6465 		.ascii	"Undefined\000Op-COdE\000"
 12402      66696E65 
 12402      64004F70 
 12402      2D434F64 
 12402      4500
 12403 005e 0000     		.space	2
 12404              	.LC52:
 12405 0060 2B9F0000 		.ascii	"+\237\000\000"
 12406              	.LC53:
 12407 0064 2D9F0000 		.ascii	"-\237\000\000"
 12408              	.LC54:
 12409 0068 4E6F2073 		.ascii	"No such\000LAbEL\000"
 12409      75636800 
 12409      4C416245 
 12409      4C00
 12410 0076 0000     		.space	2
 12411              	.LC55:
 12412 0078 496C6C65 		.ascii	"Illegal\000OPErAtion\000"
 12412      67616C00 
 12412      4F504572 
 12412      4174696F 
 12412      6E00
 12413 008a 0000     		.space	2
 12414              	.LC56:
 12415 008c 4F757420 		.ascii	"Out of range\000\000"
 12415      6F662072 
 12415      616E6765 
 12415      0000
 12416 009a 0000     		.space	2
 12417              	.LC57:
 12418 009c 42616420 		.ascii	"Bad digit\000\000"
 12418      64696769 
 12418      740000
 12419 00a7 00       		.space	1
 12420              	.LC58:
 12421 00a8 546F6F20 		.ascii	"Too long\000\000"
 12421      6C6F6E67 
 12421      0000
 12422 00b2 0000     		.space	2
 12423              	.LC59:
 12424 00b4 52414D20 		.ascii	"RAM is\000FuLL\000"
 12424      69730046 
 12424      754C4C00 
 12425              	.LC60:
 12426 00c0 53746163 		.ascii	"Stack\000CLASH\000"
 12426      6B00434C 
 12426      41534800 
 12427              	.LC61:
 12428 00cc 42616420 		.ascii	"Bad mode\000\000"
 12428      6D6F6465 
 12428      0000
 12429 00d6 0000     		.space	2
 12430              	.LC62:
 12431 00d8 576F7264 		.ascii	"Word\006\006\006size\000too SMmALL\000"
ARM GAS  /tmp/ccdQiHBS.s 			page 349


 12431      06060673 
 12431      697A6500 
 12431      746F6F20 
 12431      534D6D41 
 12432 00ef 00       		.space	1
 12433              	.LC63:
 12434 00f0 546F6F20 		.ascii	"Too few\000dAtA PointS\000"
 12434      66657700 
 12434      64417441 
 12434      20506F69 
 12434      6E745300 
 12435              	.LC64:
 12436 0104 496E7661 		.ascii	"Invalid\000ParaMmEtEr\000"
 12436      6C696400 
 12436      50617261 
 12436      4D6D4574 
 12436      457200
 12437 0117 00       		.space	1
 12438              	.LC65:
 12439 0118 492F4F00 		.ascii	"I/O\000\000"
 12439      00
 12440 011d 000000   		.space	3
 12441              	.LC66:
 12442 0120 496E7661 		.ascii	"Invalid\000dAtA\000"
 12442      6C696400 
 12442      64417441 
 12442      00
 12443 012d 000000   		.space	3
 12444              	.LC67:
 12445 0130 57726974 		.ascii	"Write\000ProtEctEd\000"
 12445      65005072 
 12445      6F744563 
 12445      74456400 
 12446              	.LC68:
 12447 0140 4E6F2072 		.ascii	"No root\000Found\000"
 12447      6F6F7400 
 12447      466F756E 
 12447      6400
 12448 014e 0000     		.space	2
 12449              	.LC69:
 12450 0150 4D617472 		.ascii	"Matrix\000MmISMmAtCH\000"
 12450      6978004D 
 12450      6D49534D 
 12450      6D417443 
 12450      4800
 12451 0162 0000     		.space	2
 12452              	.LC70:
 12453 0164 53696E67 		.ascii	"Singular\000\000"
 12453      756C6172 
 12453      0000
 12454 016e 0000     		.space	2
 12455              	.LC71:
 12456 0170 466C6173 		.ascii	"Flash is\000FuLL\000"
 12456      68206973 
 12456      0046754C 
 12456      4C00
 12457 017e 0000     		.space	2
ARM GAS  /tmp/ccdQiHBS.s 			page 350


 12458              	.LC72:
 12459 0180 4E6F2063 		.ascii	"No crystal\000InStaLLEd\000"
 12459      72797374 
 12459      616C0049 
 12459      6E537461 
 12459      4C4C4564 
 12460 0195 000000   		.space	3
 12461              	.LC73:
 12462 0198 55736520 		.ascii	"Use even reg\000for CoMmPLEH\000"
 12462      6576656E 
 12462      20726567 
 12462      00666F72 
 12462      20436F4D 
 12463 01b2 0000     		.space	2
 12464              	.LC74:
 12465 01b4 04201D00 		.ascii	"\004 \035\000X\000"
 12465      5800
 12466              		.section	.bss.DecimalMode,"aw",%nobits
 12467              		.set	.LANCHOR1,. + 0
 12470              	DecimalMode:
 12471 0000 00       		.space	1
 12472              		.section	.bss.SeparatorMode,"aw",%nobits
 12473              		.set	.LANCHOR0,. + 0
 12476              	SeparatorMode:
 12477 0000 00       		.space	1
 12478              		.section	.bss.no_status_top,"aw",%nobits
 12479              		.align	1
 12480              		.set	.LANCHOR15,. + 0
 12483              	no_status_top:
 12484 0000 0000     		.space	2
 12485              		.section	.rodata.CSWTCH.341,"a"
 12486              		.align	2
 12487              		.set	.LANCHOR8,. + 0
 12490              	CSWTCH.341:
 12491 0000 02000000 		.word	2
 12492 0004 08000000 		.word	8
 12493 0008 0A000000 		.word	10
 12494 000c 10000000 		.word	16
 12495              		.section	.rodata.CSWTCH.367,"a"
 12496              		.align	2
 12497              		.set	.LANCHOR13,. + 0
 12500              	CSWTCH.367:
 12501 0000 00000000 		.word	.LC45
 12502 0004 08000000 		.word	.LC46
 12503 0008 0C000000 		.word	.LC47
 12504              		.section	.rodata.DIGITS,"a"
 12505              		.align	2
 12506              		.set	.LANCHOR9,. + 0
 12509              	DIGITS:
 12510 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 12510      34353637 
 12510      38394142 
 12510      43444546 
 12510      00
 12511              		.section	.rodata.S7_ERROR,"a"
 12512              		.align	2
 12513              		.set	.LANCHOR20,. + 0
ARM GAS  /tmp/ccdQiHBS.s 			page 351


 12516              	S7_ERROR:
 12517 0000 4572726F 		.ascii	"Error\000"
 12517      7200
 12518              		.section	.rodata.S7_INF,"a"
 12519              		.align	2
 12520              		.set	.LANCHOR4,. + 0
 12523              	S7_INF:
 12524 0000 496E6669 		.ascii	"Infinity\000"
 12524      6E697479 
 12524      00
 12525              		.section	.rodata.S7_NaN,"a"
 12526              		.align	2
 12527              		.set	.LANCHOR3,. + 0
 12530              	S7_NaN:
 12531 0000 6E6F7420 		.ascii	"not nuMmEric\000"
 12531      6E754D6D 
 12531      45726963 
 12531      00
 12532              		.section	.rodata.S7_STEP,"a"
 12533              		.align	2
 12534              		.set	.LANCHOR16,. + 0
 12537              	S7_STEP:
 12538 0000 53744550 		.ascii	"StEP \000"
 12538      2000
 12539              		.section	.rodata.S7_fract_EQ,"a"
 12540              		.align	2
 12541              		.set	.LANCHOR6,. + 0
 12544              	S7_fract_EQ:
 12545 0000 203D2000 		.ascii	" = \000"
 12546              		.section	.rodata.S7_fract_GT,"a"
 12547              		.align	2
 12548              		.set	.LANCHOR7,. + 0
 12551              	S7_fract_GT:
 12552 0000 20477400 		.ascii	" Gt\000"
 12553              		.section	.rodata.S7_fract_LT,"a"
 12554              		.align	2
 12555              		.set	.LANCHOR5,. + 0
 12558              	S7_fract_LT:
 12559 0000 204C7400 		.ascii	" Lt\000"
 12560              		.section	.rodata.S_SURE,"a"
 12561              		.align	2
 12562              		.set	.LANCHOR18,. + 0
 12565              	S_SURE:
 12566 0000 53757265 		.ascii	"Sure?\000"
 12566      3F00
 12567              		.section	.rodata.SvnRevision,"a"
 12568              		.align	2
 12569              		.set	.LANCHOR17,. + 0
 12572              	SvnRevision:
 12573 0000 38362020 		.ascii	"86  "
 12574              		.section	.rodata.digtbl,"a"
 12575              		.align	2
 12576              		.set	.LANCHOR2,. + 0
 12579              	digtbl:
 12580 0000 00401050 		.ascii	"\000@\020P\002B\022R-\000\000\000\000\000\000\000\000"
 12580      02421252 
 12580      2D000000 
ARM GAS  /tmp/ccdQiHBS.s 			page 352


 12580      00000000 
 12580      00
 12581 0011 00000000 		.ascii	"\000\000\000\000\000\000\000\027\001\000\000\000\000"
 12581      00000017 
 12581      01000000 
 12581      00
 12582 001e 00000000 		.ascii	"\000\000\000\000(\000\000\000\000 fK\000\000\000\020"
 12582      28000000 
 12582      0020664B 
 12582      00000010 
 12583 002e 001C6F09 		.ascii	"\000\034o\011^[9swI\177{\000\000\006\022\003\000x}7"
 12583      5E5B3973 
 12583      77497F7B 
 12583      00000612 
 12583      0300787D 
 12584 0043 661F7674 		.ascii	"f\037vtg=$\017u&lmo|y\024s6/\000'\000;\000f\000K\000"
 12584      673D240F 
 12584      75266C6D 
 12584      6F7C7914 
 12584      73362F00 
 12585 005f 02007D37 		.ascii	"\002\000}7\026\037vtg5\004\017u&i\025\027|y\024s6\007"
 12585      161F7674 
 12585      6735040F 
 12585      75266915 
 12585      177C7914 
 12586 0076 000F003B 		.ascii	"\000\017\000;"
 12587              		.section	.rodata.error_table.8669,"a"
 12588              		.align	2
 12589              		.set	.LANCHOR21,. + 0
 12592              	error_table.8669:
 12593 0000 1C000000 		.word	.LC48
 12594 0004 30000000 		.word	.LC49
 12595 0008 38000000 		.word	.LC50
 12596 000c 4C000000 		.word	.LC51
 12597 0010 60000000 		.word	.LC52
 12598 0014 64000000 		.word	.LC53
 12599 0018 68000000 		.word	.LC54
 12600 001c 78000000 		.word	.LC55
 12601 0020 8C000000 		.word	.LC56
 12602 0024 9C000000 		.word	.LC57
 12603 0028 A8000000 		.word	.LC58
 12604 002c B4000000 		.word	.LC59
 12605 0030 C0000000 		.word	.LC60
 12606 0034 CC000000 		.word	.LC61
 12607 0038 D8000000 		.word	.LC62
 12608 003c F0000000 		.word	.LC63
 12609 0040 04010000 		.word	.LC64
 12610 0044 18010000 		.word	.LC65
 12611 0048 20010000 		.word	.LC66
 12612 004c 30010000 		.word	.LC67
 12613 0050 40010000 		.word	.LC68
 12614 0054 50010000 		.word	.LC69
 12615 0058 64010000 		.word	.LC70
 12616 005c 70010000 		.word	.LC71
 12617 0060 80010000 		.word	.LC72
 12618 0064 98010000 		.word	.LC73
 12619 0068 B4010000 		.word	.LC74
ARM GAS  /tmp/ccdQiHBS.s 			page 353


 12620              		.section	.rodata.libname,"a"
 12621              		.align	2
 12622              		.set	.LANCHOR19,. + 0
 12625              	libname:
 12626 0000 72414D6D 		.ascii	"rAMm\000"
 12626      00
 12627 0005 4C696220 		.ascii	"Lib \000"
 12627      00
 12628 000a 42757020 		.ascii	"Bup \000"
 12628      00
 12629 000f 726F4D6D 		.ascii	"roMm\000"
 12629      00
 12630              		.section	.rodata.shift_chars.8774,"a"
 12631              		.align	2
 12632              		.set	.LANCHOR12,. + 0
 12635              	shift_chars.8774:
 12636 0000 20111213 		.ascii	" \021\022\023"
 12637              		.section	.rodata.small_dots.8972,"a"
 12638              		.align	2
 12639              		.set	.LANCHOR11,. + 0
 12642              	small_dots.8972:
 12643 0000 07E12C06 		.ascii	"\007\341,\006\007\341,\006\007\341,\006\006"
 12643      07E12C06 
 12643      07E12C06 
 12643      06
 12644              		.section	.rodata.small_minus.8971,"a"
 12645              		.align	2
 12646              		.set	.LANCHOR10,. + 0
 12649              	small_minus.8971:
 12650 0000 07C22D06 		.ascii	"\007\302-\006"
 12651              		.text
 12652              	.Letext0:
 12653              		.file 2 "src/decNumber/decContext.h"
 12654              		.file 3 "src/decNumber/decNumber.h"
 12655              		.file 4 "src/decNumber/decimal64.h"
 12656              		.file 5 "src/decNumber/decimal128.h"
 12657              		.file 6 "src/xeq.h"
 12658              		.file 7 "src/data.h"
 12659              		.file 8 "src/storage.h"
 12660              		.file 9 "src/display.h"
 12661              		.file 10 "src/consts.h"
 12662              		.file 11 "src/stats.h"
 12663              		.file 12 "src/revision.h"
 12664              		.file 13 "src/printer.h"
 12665              		.file 14 "src/charset7.h"
 12666              		.file 15 "src/lcd.h"
 12667              		.file 16 "src/decn.h"
 12668              		.file 17 "src/alpha.h"
 12669              		.file 18 "src/int.h"
ARM GAS  /tmp/ccdQiHBS.s 			page 354


DEFINED SYMBOLS
                            *ABS*:0000000000000000 display.c
     /tmp/ccdQiHBS.s:18     .text.set_separator_decimal_modes:0000000000000000 $t
     /tmp/ccdQiHBS.s:26     .text.set_separator_decimal_modes:0000000000000000 set_separator_decimal_modes
     /tmp/ccdQiHBS.s:119    .text.set_separator_decimal_modes:0000000000000048 $d
     /tmp/ccdQiHBS.s:126    .text.set_dig:0000000000000000 $t
     /tmp/ccdQiHBS.s:133    .text.set_dig:0000000000000000 set_dig
     /tmp/ccdQiHBS.s:220    .text.set_dig:000000000000002c $d
     /tmp/ccdQiHBS.s:225    .text.hms_render:0000000000000000 $t
     /tmp/ccdQiHBS.s:232    .text.hms_render:0000000000000000 hms_render
     /tmp/ccdQiHBS.s:431    .text.hms_render:00000000000000a4 $d
     /tmp/ccdQiHBS.s:438    .text.set_exp_digits_string:0000000000000000 $t
     /tmp/ccdQiHBS.s:445    .text.set_exp_digits_string:0000000000000000 set_exp_digits_string
     /tmp/ccdQiHBS.s:559    .text.hms_step:0000000000000000 $t
     /tmp/ccdQiHBS.s:566    .text.hms_step:0000000000000000 hms_step
     /tmp/ccdQiHBS.s:627    .text.hms_step:0000000000000034 $d
     /tmp/ccdQiHBS.s:632    .text.set_exp:0000000000000000 $t
     /tmp/ccdQiHBS.s:639    .text.set_exp:0000000000000000 set_exp
     /tmp/ccdQiHBS.s:925    .text.set_exp:00000000000000f8 $d
     /tmp/ccdQiHBS.s:931    .text.set_separator.part.0:0000000000000000 $t
     /tmp/ccdQiHBS.s:938    .text.set_separator.part.0:0000000000000000 set_separator.part.0
     /tmp/ccdQiHBS.s:985    .text.set_decimal.part.0:0000000000000000 $t
     /tmp/ccdQiHBS.s:992    .text.set_decimal.part.0:0000000000000000 set_decimal.part.0
     /tmp/ccdQiHBS.s:1039   .text.set_digits_string:0000000000000000 $t
     /tmp/ccdQiHBS.s:1046   .text.set_digits_string:0000000000000000 set_digits_string
     /tmp/ccdQiHBS.s:1158   .rodata.check_special_dn.isra.0.str1.4:0000000000000000 $d
     /tmp/ccdQiHBS.s:1162   .text.check_special_dn.isra.0:0000000000000000 $t
     /tmp/ccdQiHBS.s:1169   .text.check_special_dn.isra.0:0000000000000000 check_special_dn.isra.0
     /tmp/ccdQiHBS.s:1292   .text.check_special_dn.isra.0:0000000000000058 $d
     /tmp/ccdQiHBS.s:1299   .text.set_x_hms:0000000000000000 $t
     /tmp/ccdQiHBS.s:1306   .text.set_x_hms:0000000000000000 set_x_hms
     /tmp/ccdQiHBS.s:1827   .text.set_x_hms:00000000000001c4 $d
     /tmp/ccdQiHBS.s:1836   .text.set_x_fract:0000000000000000 $t
     /tmp/ccdQiHBS.s:1843   .text.set_x_fract:0000000000000000 set_x_fract
     /tmp/ccdQiHBS.s:2272   .text.set_x_fract:0000000000000194 $d
     /tmp/ccdQiHBS.s:2286   .rodata.carry_overflow.str1.4:0000000000000000 $d
     /tmp/ccdQiHBS.s:2287   .rodata.carry_overflow.str1.4:0000000000000000 .LC1
     /tmp/ccdQiHBS.s:2290   .text.carry_overflow:0000000000000000 $t
     /tmp/ccdQiHBS.s:2297   .text.carry_overflow:0000000000000000 carry_overflow
     /tmp/ccdQiHBS.s:2427   .text.carry_overflow:000000000000006c $d
     /tmp/ccdQiHBS.s:2436   .text.set_int_x:0000000000000000 $t
     /tmp/ccdQiHBS.s:2443   .text.set_int_x:0000000000000000 set_int_x
     /tmp/ccdQiHBS.s:3161   .text.set_int_x:00000000000002f8 $d
               .rodata.CSWTCH.341:0000000000000000 CSWTCH.343
                            *COM*:0000000000000004 IntMaxWindow
     /tmp/ccdQiHBS.s:3172   .text.set_int_x:0000000000000310 $t
     /tmp/ccdQiHBS.s:3330   .text.set_int_x:00000000000003c4 $d
     /tmp/ccdQiHBS.s:3337   .text.s_s_sized.constprop.0:0000000000000000 $t
     /tmp/ccdQiHBS.s:3344   .text.s_s_sized.constprop.0:0000000000000000 s_s_sized.constprop.0
     /tmp/ccdQiHBS.s:3725   .text.s_s_sized.constprop.0:0000000000000158 $d
     /tmp/ccdQiHBS.s:3730   .text.getdig:0000000000000000 $t
     /tmp/ccdQiHBS.s:3738   .text.getdig:0000000000000000 getdig
     /tmp/ccdQiHBS.s:3758   .text.getdig:0000000000000008 $d
     /tmp/ccdQiHBS.s:3763   .text.dot:0000000000000000 $t
     /tmp/ccdQiHBS.s:3771   .text.dot:0000000000000000 dot
     /tmp/ccdQiHBS.s:3794   .text.std_round_fix:0000000000000000 $t
     /tmp/ccdQiHBS.s:3802   .text.std_round_fix:0000000000000000 std_round_fix
ARM GAS  /tmp/ccdQiHBS.s 			page 355


     /tmp/ccdQiHBS.s:3959   .text.std_round_fix:0000000000000078 $d
     /tmp/ccdQiHBS.s:3964   .text.set_IO_annunciator:0000000000000000 $t
     /tmp/ccdQiHBS.s:3972   .text.set_IO_annunciator:0000000000000000 set_IO_annunciator
     /tmp/ccdQiHBS.s:4071   .text.set_IO_annunciator:0000000000000038 $d
                            *COM*:0000000000000004 IoAnnunciator
     /tmp/ccdQiHBS.s:4077   .text.set_annunciators:0000000000000000 $t
     /tmp/ccdQiHBS.s:4084   .text.set_annunciators:0000000000000000 set_annunciators
     /tmp/ccdQiHBS.s:4423   .text.set_annunciators:00000000000000d8 $d
     /tmp/ccdQiHBS.s:4434   .text.pixel_length:0000000000000000 $t
     /tmp/ccdQiHBS.s:4442   .text.pixel_length:0000000000000000 pixel_length
     /tmp/ccdQiHBS.s:4533   .text.set_status:0000000000000000 $t
     /tmp/ccdQiHBS.s:4540   .text.set_status:0000000000000000 set_status
     /tmp/ccdQiHBS.s:4642   .text.set_status:0000000000000034 $d
     /tmp/ccdQiHBS.s:4649   .text.set_x_dn:0000000000000000 $t
     /tmp/ccdQiHBS.s:4657   .text.set_x_dn:0000000000000000 set_x_dn
     /tmp/ccdQiHBS.s:5449   .text.set_x_dn:0000000000000364 $d
     /tmp/ccdQiHBS.s:5457   .text.set_x_dn:0000000000000378 $t
     /tmp/ccdQiHBS.s:5610   .text.set_x_dn:0000000000000424 $d
     /tmp/ccdQiHBS.s:5616   .text.set_x_dn:000000000000042e $t
     /tmp/ccdQiHBS.s:5642   .text.set_x_dn:000000000000045a $d
     /tmp/ccdQiHBS.s:5648   .text.set_x_dn:0000000000000464 $t
     /tmp/ccdQiHBS.s:6259   .text.set_x_dn:00000000000006ec $d
     /tmp/ccdQiHBS.s:6273   .text.set_x_dn:0000000000000700 $t
     /tmp/ccdQiHBS.s:6993   .text.set_x_dn:00000000000009c8 $d
     /tmp/ccdQiHBS.s:7003   .text.set_x:0000000000000000 $t
     /tmp/ccdQiHBS.s:7010   .text.set_x:0000000000000000 set_x
     /tmp/ccdQiHBS.s:7078   .text.format_reg:0000000000000000 $t
     /tmp/ccdQiHBS.s:7086   .text.format_reg:0000000000000000 format_reg
     /tmp/ccdQiHBS.s:7205   .text.format_reg:0000000000000064 $d
     /tmp/ccdQiHBS.s:7211   .text.set_status_right:0000000000000000 $t
     /tmp/ccdQiHBS.s:7218   .text.set_status_right:0000000000000000 set_status_right
     /tmp/ccdQiHBS.s:7367   .text.set_status_right:0000000000000060 $d
     /tmp/ccdQiHBS.s:7372   .rodata.annunciators.str1.4:0000000000000000 $d
     /tmp/ccdQiHBS.s:7436   .text.annunciators:0000000000000000 $t
     /tmp/ccdQiHBS.s:7443   .text.annunciators:0000000000000000 annunciators
     /tmp/ccdQiHBS.s:8102   .text.annunciators:000000000000030c $d
     /tmp/ccdQiHBS.s:8123   .text.annunciators:0000000000000350 $t
     /tmp/ccdQiHBS.s:8497   .text.annunciators:00000000000004f4 $d
     /tmp/ccdQiHBS.s:8517   .rodata.display.str1.4:0000000000000000 $d
     /tmp/ccdQiHBS.s:8578   .text.display:0000000000000000 $t
     /tmp/ccdQiHBS.s:8586   .text.display:0000000000000000 display
     /tmp/ccdQiHBS.s:9228   .text.display:00000000000002dc $d
                            *COM*:0000000000000004 DispMsg
                            *COM*:0000000000000004 ShowRPN
                            *COM*:0000000000000002 DispPlot
     /tmp/ccdQiHBS.s:9247   .text.display:0000000000000314 $t
     /tmp/ccdQiHBS.s:9934   .text.display:0000000000000604 $d
     /tmp/ccdQiHBS.s:9952   .text.display:0000000000000640 $t
     /tmp/ccdQiHBS.s:10876  .text.display:00000000000009a8 $d
     /tmp/ccdQiHBS.s:10897  .text.display:00000000000009d0 $t
     /tmp/ccdQiHBS.s:11746  .text.display:0000000000000d1c $d
     /tmp/ccdQiHBS.s:11770  .text.frozen_display:0000000000000000 $t
     /tmp/ccdQiHBS.s:11778  .text.frozen_display:0000000000000000 frozen_display
     /tmp/ccdQiHBS.s:11808  .text.frozen_display:000000000000001c $d
     /tmp/ccdQiHBS.s:11813  .text.message:0000000000000000 $t
     /tmp/ccdQiHBS.s:11821  .text.message:0000000000000000 message
     /tmp/ccdQiHBS.s:11950  .text.message:0000000000000060 $d
ARM GAS  /tmp/ccdQiHBS.s 			page 356


     /tmp/ccdQiHBS.s:11958  .text.error_message:0000000000000000 $t
     /tmp/ccdQiHBS.s:11966  .text.error_message:0000000000000000 error_message
     /tmp/ccdQiHBS.s:12232  .text.error_message:00000000000000d0 $d
     /tmp/ccdQiHBS.s:12243  .text.stopwatch_message:0000000000000000 $t
     /tmp/ccdQiHBS.s:12251  .text.stopwatch_message:0000000000000000 stopwatch_message
     /tmp/ccdQiHBS.s:12359  .text.stopwatch_message:000000000000004c $d
     /tmp/ccdQiHBS.s:12364  .rodata.str1.4:0000000000000000 $d
     /tmp/ccdQiHBS.s:12490  .rodata.CSWTCH.341:0000000000000000 CSWTCH.341
     /tmp/ccdQiHBS.s:12509  .rodata.DIGITS:0000000000000000 DIGITS
                            *COM*:0000000000000004 JustDisplayed
     /tmp/ccdQiHBS.s:12483  .bss.no_status_top:0000000000000000 no_status_top
     /tmp/ccdQiHBS.s:12572  .rodata.SvnRevision:0000000000000000 SvnRevision
     /tmp/ccdQiHBS.s:12384  .rodata:0000000000000000 $d
     /tmp/ccdQiHBS.s:12470  .bss.DecimalMode:0000000000000000 DecimalMode
     /tmp/ccdQiHBS.s:12471  .bss.DecimalMode:0000000000000000 $d
     /tmp/ccdQiHBS.s:12476  .bss.SeparatorMode:0000000000000000 SeparatorMode
     /tmp/ccdQiHBS.s:12477  .bss.SeparatorMode:0000000000000000 $d
     /tmp/ccdQiHBS.s:12479  .bss.no_status_top:0000000000000000 $d
     /tmp/ccdQiHBS.s:12486  .rodata.CSWTCH.341:0000000000000000 $d
     /tmp/ccdQiHBS.s:12496  .rodata.CSWTCH.367:0000000000000000 $d
     /tmp/ccdQiHBS.s:12500  .rodata.CSWTCH.367:0000000000000000 CSWTCH.367
     /tmp/ccdQiHBS.s:12505  .rodata.DIGITS:0000000000000000 $d
     /tmp/ccdQiHBS.s:12512  .rodata.S7_ERROR:0000000000000000 $d
     /tmp/ccdQiHBS.s:12516  .rodata.S7_ERROR:0000000000000000 S7_ERROR
     /tmp/ccdQiHBS.s:12519  .rodata.S7_INF:0000000000000000 $d
     /tmp/ccdQiHBS.s:12523  .rodata.S7_INF:0000000000000000 S7_INF
     /tmp/ccdQiHBS.s:12526  .rodata.S7_NaN:0000000000000000 $d
     /tmp/ccdQiHBS.s:12530  .rodata.S7_NaN:0000000000000000 S7_NaN
     /tmp/ccdQiHBS.s:12533  .rodata.S7_STEP:0000000000000000 $d
     /tmp/ccdQiHBS.s:12537  .rodata.S7_STEP:0000000000000000 S7_STEP
     /tmp/ccdQiHBS.s:12540  .rodata.S7_fract_EQ:0000000000000000 $d
     /tmp/ccdQiHBS.s:12544  .rodata.S7_fract_EQ:0000000000000000 S7_fract_EQ
     /tmp/ccdQiHBS.s:12547  .rodata.S7_fract_GT:0000000000000000 $d
     /tmp/ccdQiHBS.s:12551  .rodata.S7_fract_GT:0000000000000000 S7_fract_GT
     /tmp/ccdQiHBS.s:12554  .rodata.S7_fract_LT:0000000000000000 $d
     /tmp/ccdQiHBS.s:12558  .rodata.S7_fract_LT:0000000000000000 S7_fract_LT
     /tmp/ccdQiHBS.s:12561  .rodata.S_SURE:0000000000000000 $d
     /tmp/ccdQiHBS.s:12565  .rodata.S_SURE:0000000000000000 S_SURE
     /tmp/ccdQiHBS.s:12568  .rodata.SvnRevision:0000000000000000 $d
     /tmp/ccdQiHBS.s:12575  .rodata.digtbl:0000000000000000 $d
     /tmp/ccdQiHBS.s:12579  .rodata.digtbl:0000000000000000 digtbl
     /tmp/ccdQiHBS.s:12588  .rodata.error_table.8669:0000000000000000 $d
     /tmp/ccdQiHBS.s:12592  .rodata.error_table.8669:0000000000000000 error_table.8669
     /tmp/ccdQiHBS.s:12621  .rodata.libname:0000000000000000 $d
     /tmp/ccdQiHBS.s:12625  .rodata.libname:0000000000000000 libname
     /tmp/ccdQiHBS.s:12631  .rodata.shift_chars.8774:0000000000000000 $d
     /tmp/ccdQiHBS.s:12635  .rodata.shift_chars.8774:0000000000000000 shift_chars.8774
     /tmp/ccdQiHBS.s:12638  .rodata.small_dots.8972:0000000000000000 $d
     /tmp/ccdQiHBS.s:12642  .rodata.small_dots.8972:0000000000000000 small_dots.8972
     /tmp/ccdQiHBS.s:12645  .rodata.small_minus.8971:0000000000000000 $d
     /tmp/ccdQiHBS.s:12649  .rodata.small_minus.8971:0000000000000000 small_minus.8971

UNDEFINED SYMBOLS
main_ram
set_dot
clr_dot
decNumberMod
ARM GAS  /tmp/ccdQiHBS.s 			page 357


dn_to_int
dn_mulpow10
decNumberTrunc
const_100
xset
num_arg
num_arg_0
scopy
dn_abs
decNumberHR2HMS
decNumberRound
dn_lt
dn_minus
dn_eq0
const_9000
const_hms_threshold
decNumberFrac
decNumber2Fraction
dn_divide
dn_compare
dn_eq
dn_multiply
dn_add
dn_inc
decNumberZero
const_100000
const_0_0001
get_carry
get_overflow
StateWhileOn
__aeabi_uldivmod
word_size
extract_value
int_mode
int_base
charlengths
findlengths
unpackchar
RectPolConv
finish_display
PrinterColumn
get_trig_mode
get_user_flag
Running
get_dispmode_digs
find_char
s_to_i
decNumberToString
decNumberNormalize
Ctx
is_dblmode
xcopy
decimal128ToNumber
decimal64ToNumber
get_reg_n
getRegister
dn_to_ull
ARM GAS  /tmp/ccdQiHBS.s 			page 358


build_value
get_reg_n_int
cur_shift
replace_char
ShowRegister
stack_size
get_cmdline
reset_disp
show_stack
show_flags
wait_for_display
user_pc
scopy_spc
WasDataEntry
argcmds
ProgFree
scopy_char
op_r2p
multicmds
current_catalogue
catcmd
copyreg
sigma_val
find_label_from
get_const
getprog
prt
alpha_rcl_s
StackBase
findmultilbl
slen
global_regs
free_mem
free_flash
getX
packed_from_number
local_regs
set_NaN
do_conv
SizeStatRegs
monfuncs
print_tab
print_line
print
print_advance
print_reg
Tracing
